(()=>{var Nc=Object.create;var zu=Object.defineProperty;var Bc=Object.getOwnPropertyDescriptor;var Fc=Object.getOwnPropertyNames;var jc=Object.getPrototypeOf,Hc=Object.prototype.hasOwnProperty;var za=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports);var zc=(i,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of Fc(e))!Hc.call(i,r)&&r!==t&&zu(i,r,{get:()=>e[r],enumerable:!(n=Bc(e,r))||n.enumerable});return i};var Va=(i,e,t)=>(t=i!=null?Nc(jc(i)):{},zc(e||!i||!i.__esModule?zu(t,"default",{value:i,enumerable:!0}):t,i));var Ll=za((xl,Is)=>{(function(i,e){"use strict";(function(){for(var y=0,d=["ms","moz","webkit","o"],g=0;g<d.length&&!i.requestAnimationFrame;++g)i.requestAnimationFrame=i[d[g]+"RequestAnimationFrame"],i.cancelAnimationFrame=i[d[g]+"CancelAnimationFrame"]||i[d[g]+"CancelRequestAnimationFrame"];i.requestAnimationFrame||(i.requestAnimationFrame=function(b,E){var P=new Date().getTime(),o=Math.max(0,16-(P-y)),h=i.setTimeout(function(){b(P+o)},o);return y=P+o,h}),i.cancelAnimationFrame||(i.cancelAnimationFrame=function(b){clearTimeout(b)})})();var t,n,r,s=null,a=null,u=null,c=function(y,d,g){y.addEventListener?y.addEventListener(d,g,!1):y.attachEvent?y.attachEvent("on"+d,g):y["on"+d]=g},v={autoRun:!0,barThickness:3,barColors:{0:"rgba(26,  188, 156, .9)",".25":"rgba(52,  152, 219, .9)",".50":"rgba(241, 196, 15,  .9)",".75":"rgba(230, 126, 34,  .9)","1.0":"rgba(211, 84,  0,   .9)"},shadowBlur:10,shadowColor:"rgba(0,   0,   0,   .6)",className:null},k=function(){t.width=i.innerWidth,t.height=v.barThickness*5;var y=t.getContext("2d");y.shadowBlur=v.shadowBlur,y.shadowColor=v.shadowColor;var d=y.createLinearGradient(0,0,t.width,0);for(var g in v.barColors)d.addColorStop(g,v.barColors[g]);y.lineWidth=v.barThickness,y.beginPath(),y.moveTo(0,v.barThickness/2),y.lineTo(Math.ceil(n*t.width),v.barThickness/2),y.strokeStyle=d,y.stroke()},A=function(){t=e.createElement("canvas");var y=t.style;y.position="fixed",y.top=y.left=y.right=y.margin=y.padding=0,y.zIndex=100001,y.display="none",v.className&&t.classList.add(v.className),e.body.appendChild(t),c(i,"resize",k)},N={config:function(y){for(var d in y)v.hasOwnProperty(d)&&(v[d]=y[d])},show:function(y){if(!r)if(y){if(u)return;u=setTimeout(()=>N.show(),y)}else r=!0,a!==null&&i.cancelAnimationFrame(a),t||A(),t.style.opacity=1,t.style.display="block",N.progress(0),v.autoRun&&function d(){s=i.requestAnimationFrame(d),N.progress("+"+.05*Math.pow(1-Math.sqrt(n),2))}()},progress:function(y){return typeof y>"u"||(typeof y=="string"&&(y=(y.indexOf("+")>=0||y.indexOf("-")>=0?n:0)+parseFloat(y)),n=y>1?1:y,k()),n},hide:function(){clearTimeout(u),u=null,r&&(r=!1,s!=null&&(i.cancelAnimationFrame(s),s=null),function y(){if(N.progress("+.1")>=1&&(t.style.opacity-=.05,t.style.opacity<=.05)){t.style.display="none",a=null;return}a=i.requestAnimationFrame(y)}())}};typeof Is=="object"&&typeof Is.exports=="object"?Is.exports=N:typeof define=="function"&&define.amd?define(function(){return N}):this.topbar=N}).call(xl,window,document)});var rd=za((nd,Gs)=>{(function(){function i(o){"use strict";var h={omitExtraWLInCodeBlocks:{defaultValue:!1,describe:"Omit the default extra whiteline added to code blocks",type:"boolean"},noHeaderId:{defaultValue:!1,describe:"Turn on/off generated header id",type:"boolean"},prefixHeaderId:{defaultValue:!1,describe:"Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",type:"string"},rawPrefixHeaderId:{defaultValue:!1,describe:'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',type:"boolean"},ghCompatibleHeaderId:{defaultValue:!1,describe:"Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)",type:"boolean"},rawHeaderId:{defaultValue:!1,describe:`Remove only spaces, ' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids`,type:"boolean"},headerLevelStart:{defaultValue:!1,describe:"The header blocks level start",type:"integer"},parseImgDimensions:{defaultValue:!1,describe:"Turn on/off image dimension parsing",type:"boolean"},simplifiedAutoLink:{defaultValue:!1,describe:"Turn on/off GFM autolink style",type:"boolean"},excludeTrailingPunctuationFromURLs:{defaultValue:!1,describe:"Excludes trailing punctuation from links generated with autoLinking",type:"boolean"},literalMidWordUnderscores:{defaultValue:!1,describe:"Parse midword underscores as literal underscores",type:"boolean"},literalMidWordAsterisks:{defaultValue:!1,describe:"Parse midword asterisks as literal asterisks",type:"boolean"},strikethrough:{defaultValue:!1,describe:"Turn on/off strikethrough support",type:"boolean"},tables:{defaultValue:!1,describe:"Turn on/off tables support",type:"boolean"},tablesHeaderId:{defaultValue:!1,describe:"Add an id to table headers",type:"boolean"},ghCodeBlocks:{defaultValue:!0,describe:"Turn on/off GFM fenced code blocks support",type:"boolean"},tasklists:{defaultValue:!1,describe:"Turn on/off GFM tasklist support",type:"boolean"},smoothLivePreview:{defaultValue:!1,describe:"Prevents weird effects in live previews due to incomplete input",type:"boolean"},smartIndentationFix:{defaultValue:!1,describe:"Tries to smartly fix indentation in es6 strings",type:"boolean"},disableForced4SpacesIndentedSublists:{defaultValue:!1,describe:"Disables the requirement of indenting nested sublists by 4 spaces",type:"boolean"},simpleLineBreaks:{defaultValue:!1,describe:"Parses simple line breaks as <br> (GFM Style)",type:"boolean"},requireSpaceBeforeHeadingText:{defaultValue:!1,describe:"Makes adding a space between `#` and the header text mandatory (GFM Style)",type:"boolean"},ghMentions:{defaultValue:!1,describe:"Enables github @mentions",type:"boolean"},ghMentionsLink:{defaultValue:"https://github.com/{u}",describe:"Changes the link generated by @mentions. Only applies if ghMentions option is enabled.",type:"string"},encodeEmails:{defaultValue:!0,describe:"Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities",type:"boolean"},openLinksInNewWindow:{defaultValue:!1,describe:"Open all links in new windows",type:"boolean"},backslashEscapesHTMLTags:{defaultValue:!1,describe:"Support for HTML Tag escaping. ex: <div>foo</div>",type:"boolean"},emoji:{defaultValue:!1,describe:"Enable emoji support. Ex: `this is a :smile: emoji`",type:"boolean"},underline:{defaultValue:!1,describe:"Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`",type:"boolean"},ellipsis:{defaultValue:!0,describe:"Replaces three dots with the ellipsis unicode character",type:"boolean"},completeHTMLDocument:{defaultValue:!1,describe:"Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags",type:"boolean"},metadata:{defaultValue:!1,describe:"Enable support for document metadata (defined at the top of the document between `\xAB\xAB\xAB` and `\xBB\xBB\xBB` or between `---` and `---`).",type:"boolean"},splitAdjacentBlockquotes:{defaultValue:!1,describe:"Split adjacent blockquote blocks",type:"boolean"}};if(o===!1)return JSON.parse(JSON.stringify(h));var f={};for(var _ in h)h.hasOwnProperty(_)&&(f[_]=h[_].defaultValue);return f}function e(){"use strict";var o=i(!0),h={};for(var f in o)o.hasOwnProperty(f)&&(h[f]=!0);return h}var t={},n={},r={},s=i(!0),a="vanilla",u={github:{omitExtraWLInCodeBlocks:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,disableForced4SpacesIndentedSublists:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghCompatibleHeaderId:!0,ghMentions:!0,backslashEscapesHTMLTags:!0,emoji:!0,splitAdjacentBlockquotes:!0},original:{noHeaderId:!0,ghCodeBlocks:!1},ghost:{omitExtraWLInCodeBlocks:!0,parseImgDimensions:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,smoothLivePreview:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghMentions:!1,encodeEmails:!0},vanilla:i(!0),allOn:e()};t.helper={},t.extensions={},t.setOption=function(o,h){"use strict";return s[o]=h,this},t.getOption=function(o){"use strict";return s[o]},t.getOptions=function(){"use strict";return s},t.resetOptions=function(){"use strict";s=i(!0)},t.setFlavor=function(o){"use strict";if(!u.hasOwnProperty(o))throw Error(o+" flavor was not found");t.resetOptions();var h=u[o];a=o;for(var f in h)h.hasOwnProperty(f)&&(s[f]=h[f])},t.getFlavor=function(){"use strict";return a},t.getFlavorOptions=function(o){"use strict";if(u.hasOwnProperty(o))return u[o]},t.getDefaultOptions=function(o){"use strict";return i(o)},t.subParser=function(o,h){"use strict";if(t.helper.isString(o))if(typeof h<"u")n[o]=h;else{if(n.hasOwnProperty(o))return n[o];throw Error("SubParser named "+o+" not registered!")}},t.extension=function(o,h){"use strict";if(!t.helper.isString(o))throw Error("Extension 'name' must be a string");if(o=t.helper.stdExtName(o),t.helper.isUndefined(h)){if(!r.hasOwnProperty(o))throw Error("Extension named "+o+" is not registered!");return r[o]}else{typeof h=="function"&&(h=h()),t.helper.isArray(h)||(h=[h]);var f=c(h,o);if(f.valid)r[o]=h;else throw Error(f.error)}},t.getAllExtensions=function(){"use strict";return r},t.removeExtension=function(o){"use strict";delete r[o]},t.resetExtensions=function(){"use strict";r={}};function c(o,h){"use strict";var f=h?"Error in "+h+" extension->":"Error in unnamed extension",_={valid:!0,error:""};t.helper.isArray(o)||(o=[o]);for(var C=0;C<o.length;++C){var I=f+" sub-extension "+C+": ",L=o[C];if(typeof L!="object")return _.valid=!1,_.error=I+"must be an object, but "+typeof L+" given",_;if(!t.helper.isString(L.type))return _.valid=!1,_.error=I+'property "type" must be a string, but '+typeof L.type+" given",_;var F=L.type=L.type.toLowerCase();if(F==="language"&&(F=L.type="lang"),F==="html"&&(F=L.type="output"),F!=="lang"&&F!=="output"&&F!=="listener")return _.valid=!1,_.error=I+"type "+F+' is not recognized. Valid values: "lang/language", "output/html" or "listener"',_;if(F==="listener"){if(t.helper.isUndefined(L.listeners))return _.valid=!1,_.error=I+'. Extensions of type "listener" must have a property called "listeners"',_}else if(t.helper.isUndefined(L.filter)&&t.helper.isUndefined(L.regex))return _.valid=!1,_.error=I+F+' extensions must define either a "regex" property or a "filter" method',_;if(L.listeners){if(typeof L.listeners!="object")return _.valid=!1,_.error=I+'"listeners" property must be an object but '+typeof L.listeners+" given",_;for(var K in L.listeners)if(L.listeners.hasOwnProperty(K)&&typeof L.listeners[K]!="function")return _.valid=!1,_.error=I+'"listeners" property must be an hash of [event name]: [callback]. listeners.'+K+" must be a function but "+typeof L.listeners[K]+" given",_}if(L.filter){if(typeof L.filter!="function")return _.valid=!1,_.error=I+'"filter" must be a function, but '+typeof L.filter+" given",_}else if(L.regex){if(t.helper.isString(L.regex)&&(L.regex=new RegExp(L.regex,"g")),!(L.regex instanceof RegExp))return _.valid=!1,_.error=I+'"regex" property must either be a string or a RegExp object, but '+typeof L.regex+" given",_;if(t.helper.isUndefined(L.replace))return _.valid=!1,_.error=I+'"regex" extensions must implement a replace string or function',_}}return _}t.validateExtension=function(o){"use strict";var h=c(o,null);return h.valid?!0:(console.warn(h.error),!1)},t.hasOwnProperty("helper")||(t.helper={}),t.helper.isString=function(o){"use strict";return typeof o=="string"||o instanceof String},t.helper.isFunction=function(o){"use strict";var h={};return o&&h.toString.call(o)==="[object Function]"},t.helper.isArray=function(o){"use strict";return Array.isArray(o)},t.helper.isUndefined=function(o){"use strict";return typeof o>"u"},t.helper.forEach=function(o,h){"use strict";if(t.helper.isUndefined(o))throw new Error("obj param is required");if(t.helper.isUndefined(h))throw new Error("callback param is required");if(!t.helper.isFunction(h))throw new Error("callback param must be a function/closure");if(typeof o.forEach=="function")o.forEach(h);else if(t.helper.isArray(o))for(var f=0;f<o.length;f++)h(o[f],f,o);else if(typeof o=="object")for(var _ in o)o.hasOwnProperty(_)&&h(o[_],_,o);else throw new Error("obj does not seem to be an array or an iterable object")},t.helper.stdExtName=function(o){"use strict";return o.replace(/[_?*+\/\\.^-]/g,"").replace(/\s/g,"").toLowerCase()};function v(o,h){"use strict";var f=h.charCodeAt(0);return"\xA8E"+f+"E"}t.helper.escapeCharactersCallback=v,t.helper.escapeCharacters=function(o,h,f){"use strict";var _="(["+h.replace(/([\[\]\\])/g,"\\$1")+"])";f&&(_="\\\\"+_);var C=new RegExp(_,"g");return o=o.replace(C,v),o},t.helper.unescapeHTMLEntities=function(o){"use strict";return o.replace(/&quot;/g,'"').replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")};var k=function(o,h,f,_){"use strict";var C=_||"",I=C.indexOf("g")>-1,L=new RegExp(h+"|"+f,"g"+C.replace(/g/g,"")),F=new RegExp(h,C.replace(/g/g,"")),K=[],W,q,G,x,U;do for(W=0;G=L.exec(o);)if(F.test(G[0]))W++||(q=L.lastIndex,x=q-G[0].length);else if(W&&!--W){U=G.index+G[0].length;var z={left:{start:x,end:q},match:{start:q,end:G.index},right:{start:G.index,end:U},wholeMatch:{start:x,end:U}};if(K.push(z),!I)return K}while(W&&(L.lastIndex=q));return K};t.helper.matchRecursiveRegExp=function(o,h,f,_){"use strict";for(var C=k(o,h,f,_),I=[],L=0;L<C.length;++L)I.push([o.slice(C[L].wholeMatch.start,C[L].wholeMatch.end),o.slice(C[L].match.start,C[L].match.end),o.slice(C[L].left.start,C[L].left.end),o.slice(C[L].right.start,C[L].right.end)]);return I},t.helper.replaceRecursiveRegExp=function(o,h,f,_,C){"use strict";if(!t.helper.isFunction(h)){var I=h;h=function(){return I}}var L=k(o,f,_,C),F=o,K=L.length;if(K>0){var W=[];L[0].wholeMatch.start!==0&&W.push(o.slice(0,L[0].wholeMatch.start));for(var q=0;q<K;++q)W.push(h(o.slice(L[q].wholeMatch.start,L[q].wholeMatch.end),o.slice(L[q].match.start,L[q].match.end),o.slice(L[q].left.start,L[q].left.end),o.slice(L[q].right.start,L[q].right.end))),q<K-1&&W.push(o.slice(L[q].wholeMatch.end,L[q+1].wholeMatch.start));L[K-1].wholeMatch.end<o.length&&W.push(o.slice(L[K-1].wholeMatch.end)),F=W.join("")}return F},t.helper.regexIndexOf=function(o,h,f){"use strict";if(!t.helper.isString(o))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";if(!(h instanceof RegExp))throw"InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";var _=o.substring(f||0).search(h);return _>=0?_+(f||0):_},t.helper.splitAtIndex=function(o,h){"use strict";if(!t.helper.isString(o))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";return[o.substring(0,h),o.substring(h)]},t.helper.encodeEmailAddress=function(o){"use strict";var h=[function(f){return"&#"+f.charCodeAt(0)+";"},function(f){return"&#x"+f.charCodeAt(0).toString(16)+";"},function(f){return f}];return o=o.replace(/./g,function(f){if(f==="@")f=h[Math.floor(Math.random()*2)](f);else{var _=Math.random();f=_>.9?h[2](f):_>.45?h[1](f):h[0](f)}return f}),o},t.helper.padEnd=function(h,f,_){"use strict";return f=f>>0,_=String(_||" "),h.length>f?String(h):(f=f-h.length,f>_.length&&(_+=_.repeat(f/_.length)),String(h)+_.slice(0,f))},typeof console>"u"&&(console={warn:function(o){"use strict";alert(o)},log:function(o){"use strict";alert(o)},error:function(o){"use strict";throw o}}),t.helper.regexes={asteriskDashAndColon:/([*_:~])/g},t.helper.emojis={"+1":"\u{1F44D}","-1":"\u{1F44E}",100:"\u{1F4AF}",1234:"\u{1F522}","1st_place_medal":"\u{1F947}","2nd_place_medal":"\u{1F948}","3rd_place_medal":"\u{1F949}","8ball":"\u{1F3B1}",a:"\u{1F170}\uFE0F",ab:"\u{1F18E}",abc:"\u{1F524}",abcd:"\u{1F521}",accept:"\u{1F251}",aerial_tramway:"\u{1F6A1}",airplane:"\u2708\uFE0F",alarm_clock:"\u23F0",alembic:"\u2697\uFE0F",alien:"\u{1F47D}",ambulance:"\u{1F691}",amphora:"\u{1F3FA}",anchor:"\u2693\uFE0F",angel:"\u{1F47C}",anger:"\u{1F4A2}",angry:"\u{1F620}",anguished:"\u{1F627}",ant:"\u{1F41C}",apple:"\u{1F34E}",aquarius:"\u2652\uFE0F",aries:"\u2648\uFE0F",arrow_backward:"\u25C0\uFE0F",arrow_double_down:"\u23EC",arrow_double_up:"\u23EB",arrow_down:"\u2B07\uFE0F",arrow_down_small:"\u{1F53D}",arrow_forward:"\u25B6\uFE0F",arrow_heading_down:"\u2935\uFE0F",arrow_heading_up:"\u2934\uFE0F",arrow_left:"\u2B05\uFE0F",arrow_lower_left:"\u2199\uFE0F",arrow_lower_right:"\u2198\uFE0F",arrow_right:"\u27A1\uFE0F",arrow_right_hook:"\u21AA\uFE0F",arrow_up:"\u2B06\uFE0F",arrow_up_down:"\u2195\uFE0F",arrow_up_small:"\u{1F53C}",arrow_upper_left:"\u2196\uFE0F",arrow_upper_right:"\u2197\uFE0F",arrows_clockwise:"\u{1F503}",arrows_counterclockwise:"\u{1F504}",art:"\u{1F3A8}",articulated_lorry:"\u{1F69B}",artificial_satellite:"\u{1F6F0}",astonished:"\u{1F632}",athletic_shoe:"\u{1F45F}",atm:"\u{1F3E7}",atom_symbol:"\u269B\uFE0F",avocado:"\u{1F951}",b:"\u{1F171}\uFE0F",baby:"\u{1F476}",baby_bottle:"\u{1F37C}",baby_chick:"\u{1F424}",baby_symbol:"\u{1F6BC}",back:"\u{1F519}",bacon:"\u{1F953}",badminton:"\u{1F3F8}",baggage_claim:"\u{1F6C4}",baguette_bread:"\u{1F956}",balance_scale:"\u2696\uFE0F",balloon:"\u{1F388}",ballot_box:"\u{1F5F3}",ballot_box_with_check:"\u2611\uFE0F",bamboo:"\u{1F38D}",banana:"\u{1F34C}",bangbang:"\u203C\uFE0F",bank:"\u{1F3E6}",bar_chart:"\u{1F4CA}",barber:"\u{1F488}",baseball:"\u26BE\uFE0F",basketball:"\u{1F3C0}",basketball_man:"\u26F9\uFE0F",basketball_woman:"\u26F9\uFE0F&zwj;\u2640\uFE0F",bat:"\u{1F987}",bath:"\u{1F6C0}",bathtub:"\u{1F6C1}",battery:"\u{1F50B}",beach_umbrella:"\u{1F3D6}",bear:"\u{1F43B}",bed:"\u{1F6CF}",bee:"\u{1F41D}",beer:"\u{1F37A}",beers:"\u{1F37B}",beetle:"\u{1F41E}",beginner:"\u{1F530}",bell:"\u{1F514}",bellhop_bell:"\u{1F6CE}",bento:"\u{1F371}",biking_man:"\u{1F6B4}",bike:"\u{1F6B2}",biking_woman:"\u{1F6B4}&zwj;\u2640\uFE0F",bikini:"\u{1F459}",biohazard:"\u2623\uFE0F",bird:"\u{1F426}",birthday:"\u{1F382}",black_circle:"\u26AB\uFE0F",black_flag:"\u{1F3F4}",black_heart:"\u{1F5A4}",black_joker:"\u{1F0CF}",black_large_square:"\u2B1B\uFE0F",black_medium_small_square:"\u25FE\uFE0F",black_medium_square:"\u25FC\uFE0F",black_nib:"\u2712\uFE0F",black_small_square:"\u25AA\uFE0F",black_square_button:"\u{1F532}",blonde_man:"\u{1F471}",blonde_woman:"\u{1F471}&zwj;\u2640\uFE0F",blossom:"\u{1F33C}",blowfish:"\u{1F421}",blue_book:"\u{1F4D8}",blue_car:"\u{1F699}",blue_heart:"\u{1F499}",blush:"\u{1F60A}",boar:"\u{1F417}",boat:"\u26F5\uFE0F",bomb:"\u{1F4A3}",book:"\u{1F4D6}",bookmark:"\u{1F516}",bookmark_tabs:"\u{1F4D1}",books:"\u{1F4DA}",boom:"\u{1F4A5}",boot:"\u{1F462}",bouquet:"\u{1F490}",bowing_man:"\u{1F647}",bow_and_arrow:"\u{1F3F9}",bowing_woman:"\u{1F647}&zwj;\u2640\uFE0F",bowling:"\u{1F3B3}",boxing_glove:"\u{1F94A}",boy:"\u{1F466}",bread:"\u{1F35E}",bride_with_veil:"\u{1F470}",bridge_at_night:"\u{1F309}",briefcase:"\u{1F4BC}",broken_heart:"\u{1F494}",bug:"\u{1F41B}",building_construction:"\u{1F3D7}",bulb:"\u{1F4A1}",bullettrain_front:"\u{1F685}",bullettrain_side:"\u{1F684}",burrito:"\u{1F32F}",bus:"\u{1F68C}",business_suit_levitating:"\u{1F574}",busstop:"\u{1F68F}",bust_in_silhouette:"\u{1F464}",busts_in_silhouette:"\u{1F465}",butterfly:"\u{1F98B}",cactus:"\u{1F335}",cake:"\u{1F370}",calendar:"\u{1F4C6}",call_me_hand:"\u{1F919}",calling:"\u{1F4F2}",camel:"\u{1F42B}",camera:"\u{1F4F7}",camera_flash:"\u{1F4F8}",camping:"\u{1F3D5}",cancer:"\u264B\uFE0F",candle:"\u{1F56F}",candy:"\u{1F36C}",canoe:"\u{1F6F6}",capital_abcd:"\u{1F520}",capricorn:"\u2651\uFE0F",car:"\u{1F697}",card_file_box:"\u{1F5C3}",card_index:"\u{1F4C7}",card_index_dividers:"\u{1F5C2}",carousel_horse:"\u{1F3A0}",carrot:"\u{1F955}",cat:"\u{1F431}",cat2:"\u{1F408}",cd:"\u{1F4BF}",chains:"\u26D3",champagne:"\u{1F37E}",chart:"\u{1F4B9}",chart_with_downwards_trend:"\u{1F4C9}",chart_with_upwards_trend:"\u{1F4C8}",checkered_flag:"\u{1F3C1}",cheese:"\u{1F9C0}",cherries:"\u{1F352}",cherry_blossom:"\u{1F338}",chestnut:"\u{1F330}",chicken:"\u{1F414}",children_crossing:"\u{1F6B8}",chipmunk:"\u{1F43F}",chocolate_bar:"\u{1F36B}",christmas_tree:"\u{1F384}",church:"\u26EA\uFE0F",cinema:"\u{1F3A6}",circus_tent:"\u{1F3AA}",city_sunrise:"\u{1F307}",city_sunset:"\u{1F306}",cityscape:"\u{1F3D9}",cl:"\u{1F191}",clamp:"\u{1F5DC}",clap:"\u{1F44F}",clapper:"\u{1F3AC}",classical_building:"\u{1F3DB}",clinking_glasses:"\u{1F942}",clipboard:"\u{1F4CB}",clock1:"\u{1F550}",clock10:"\u{1F559}",clock1030:"\u{1F565}",clock11:"\u{1F55A}",clock1130:"\u{1F566}",clock12:"\u{1F55B}",clock1230:"\u{1F567}",clock130:"\u{1F55C}",clock2:"\u{1F551}",clock230:"\u{1F55D}",clock3:"\u{1F552}",clock330:"\u{1F55E}",clock4:"\u{1F553}",clock430:"\u{1F55F}",clock5:"\u{1F554}",clock530:"\u{1F560}",clock6:"\u{1F555}",clock630:"\u{1F561}",clock7:"\u{1F556}",clock730:"\u{1F562}",clock8:"\u{1F557}",clock830:"\u{1F563}",clock9:"\u{1F558}",clock930:"\u{1F564}",closed_book:"\u{1F4D5}",closed_lock_with_key:"\u{1F510}",closed_umbrella:"\u{1F302}",cloud:"\u2601\uFE0F",cloud_with_lightning:"\u{1F329}",cloud_with_lightning_and_rain:"\u26C8",cloud_with_rain:"\u{1F327}",cloud_with_snow:"\u{1F328}",clown_face:"\u{1F921}",clubs:"\u2663\uFE0F",cocktail:"\u{1F378}",coffee:"\u2615\uFE0F",coffin:"\u26B0\uFE0F",cold_sweat:"\u{1F630}",comet:"\u2604\uFE0F",computer:"\u{1F4BB}",computer_mouse:"\u{1F5B1}",confetti_ball:"\u{1F38A}",confounded:"\u{1F616}",confused:"\u{1F615}",congratulations:"\u3297\uFE0F",construction:"\u{1F6A7}",construction_worker_man:"\u{1F477}",construction_worker_woman:"\u{1F477}&zwj;\u2640\uFE0F",control_knobs:"\u{1F39B}",convenience_store:"\u{1F3EA}",cookie:"\u{1F36A}",cool:"\u{1F192}",policeman:"\u{1F46E}",copyright:"\xA9\uFE0F",corn:"\u{1F33D}",couch_and_lamp:"\u{1F6CB}",couple:"\u{1F46B}",couple_with_heart_woman_man:"\u{1F491}",couple_with_heart_man_man:"\u{1F468}&zwj;\u2764\uFE0F&zwj;\u{1F468}",couple_with_heart_woman_woman:"\u{1F469}&zwj;\u2764\uFE0F&zwj;\u{1F469}",couplekiss_man_man:"\u{1F468}&zwj;\u2764\uFE0F&zwj;\u{1F48B}&zwj;\u{1F468}",couplekiss_man_woman:"\u{1F48F}",couplekiss_woman_woman:"\u{1F469}&zwj;\u2764\uFE0F&zwj;\u{1F48B}&zwj;\u{1F469}",cow:"\u{1F42E}",cow2:"\u{1F404}",cowboy_hat_face:"\u{1F920}",crab:"\u{1F980}",crayon:"\u{1F58D}",credit_card:"\u{1F4B3}",crescent_moon:"\u{1F319}",cricket:"\u{1F3CF}",crocodile:"\u{1F40A}",croissant:"\u{1F950}",crossed_fingers:"\u{1F91E}",crossed_flags:"\u{1F38C}",crossed_swords:"\u2694\uFE0F",crown:"\u{1F451}",cry:"\u{1F622}",crying_cat_face:"\u{1F63F}",crystal_ball:"\u{1F52E}",cucumber:"\u{1F952}",cupid:"\u{1F498}",curly_loop:"\u27B0",currency_exchange:"\u{1F4B1}",curry:"\u{1F35B}",custard:"\u{1F36E}",customs:"\u{1F6C3}",cyclone:"\u{1F300}",dagger:"\u{1F5E1}",dancer:"\u{1F483}",dancing_women:"\u{1F46F}",dancing_men:"\u{1F46F}&zwj;\u2642\uFE0F",dango:"\u{1F361}",dark_sunglasses:"\u{1F576}",dart:"\u{1F3AF}",dash:"\u{1F4A8}",date:"\u{1F4C5}",deciduous_tree:"\u{1F333}",deer:"\u{1F98C}",department_store:"\u{1F3EC}",derelict_house:"\u{1F3DA}",desert:"\u{1F3DC}",desert_island:"\u{1F3DD}",desktop_computer:"\u{1F5A5}",male_detective:"\u{1F575}\uFE0F",diamond_shape_with_a_dot_inside:"\u{1F4A0}",diamonds:"\u2666\uFE0F",disappointed:"\u{1F61E}",disappointed_relieved:"\u{1F625}",dizzy:"\u{1F4AB}",dizzy_face:"\u{1F635}",do_not_litter:"\u{1F6AF}",dog:"\u{1F436}",dog2:"\u{1F415}",dollar:"\u{1F4B5}",dolls:"\u{1F38E}",dolphin:"\u{1F42C}",door:"\u{1F6AA}",doughnut:"\u{1F369}",dove:"\u{1F54A}",dragon:"\u{1F409}",dragon_face:"\u{1F432}",dress:"\u{1F457}",dromedary_camel:"\u{1F42A}",drooling_face:"\u{1F924}",droplet:"\u{1F4A7}",drum:"\u{1F941}",duck:"\u{1F986}",dvd:"\u{1F4C0}","e-mail":"\u{1F4E7}",eagle:"\u{1F985}",ear:"\u{1F442}",ear_of_rice:"\u{1F33E}",earth_africa:"\u{1F30D}",earth_americas:"\u{1F30E}",earth_asia:"\u{1F30F}",egg:"\u{1F95A}",eggplant:"\u{1F346}",eight_pointed_black_star:"\u2734\uFE0F",eight_spoked_asterisk:"\u2733\uFE0F",electric_plug:"\u{1F50C}",elephant:"\u{1F418}",email:"\u2709\uFE0F",end:"\u{1F51A}",envelope_with_arrow:"\u{1F4E9}",euro:"\u{1F4B6}",european_castle:"\u{1F3F0}",european_post_office:"\u{1F3E4}",evergreen_tree:"\u{1F332}",exclamation:"\u2757\uFE0F",expressionless:"\u{1F611}",eye:"\u{1F441}",eye_speech_bubble:"\u{1F441}&zwj;\u{1F5E8}",eyeglasses:"\u{1F453}",eyes:"\u{1F440}",face_with_head_bandage:"\u{1F915}",face_with_thermometer:"\u{1F912}",fist_oncoming:"\u{1F44A}",factory:"\u{1F3ED}",fallen_leaf:"\u{1F342}",family_man_woman_boy:"\u{1F46A}",family_man_boy:"\u{1F468}&zwj;\u{1F466}",family_man_boy_boy:"\u{1F468}&zwj;\u{1F466}&zwj;\u{1F466}",family_man_girl:"\u{1F468}&zwj;\u{1F467}",family_man_girl_boy:"\u{1F468}&zwj;\u{1F467}&zwj;\u{1F466}",family_man_girl_girl:"\u{1F468}&zwj;\u{1F467}&zwj;\u{1F467}",family_man_man_boy:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F466}",family_man_man_boy_boy:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F466}&zwj;\u{1F466}",family_man_man_girl:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}",family_man_man_girl_boy:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}&zwj;\u{1F466}",family_man_man_girl_girl:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}&zwj;\u{1F467}",family_man_woman_boy_boy:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",family_man_woman_girl:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}",family_man_woman_girl_boy:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",family_man_woman_girl_girl:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",family_woman_boy:"\u{1F469}&zwj;\u{1F466}",family_woman_boy_boy:"\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",family_woman_girl:"\u{1F469}&zwj;\u{1F467}",family_woman_girl_boy:"\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",family_woman_girl_girl:"\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",family_woman_woman_boy:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F466}",family_woman_woman_boy_boy:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",family_woman_woman_girl:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}",family_woman_woman_girl_boy:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",family_woman_woman_girl_girl:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",fast_forward:"\u23E9",fax:"\u{1F4E0}",fearful:"\u{1F628}",feet:"\u{1F43E}",female_detective:"\u{1F575}\uFE0F&zwj;\u2640\uFE0F",ferris_wheel:"\u{1F3A1}",ferry:"\u26F4",field_hockey:"\u{1F3D1}",file_cabinet:"\u{1F5C4}",file_folder:"\u{1F4C1}",film_projector:"\u{1F4FD}",film_strip:"\u{1F39E}",fire:"\u{1F525}",fire_engine:"\u{1F692}",fireworks:"\u{1F386}",first_quarter_moon:"\u{1F313}",first_quarter_moon_with_face:"\u{1F31B}",fish:"\u{1F41F}",fish_cake:"\u{1F365}",fishing_pole_and_fish:"\u{1F3A3}",fist_raised:"\u270A",fist_left:"\u{1F91B}",fist_right:"\u{1F91C}",flags:"\u{1F38F}",flashlight:"\u{1F526}",fleur_de_lis:"\u269C\uFE0F",flight_arrival:"\u{1F6EC}",flight_departure:"\u{1F6EB}",floppy_disk:"\u{1F4BE}",flower_playing_cards:"\u{1F3B4}",flushed:"\u{1F633}",fog:"\u{1F32B}",foggy:"\u{1F301}",football:"\u{1F3C8}",footprints:"\u{1F463}",fork_and_knife:"\u{1F374}",fountain:"\u26F2\uFE0F",fountain_pen:"\u{1F58B}",four_leaf_clover:"\u{1F340}",fox_face:"\u{1F98A}",framed_picture:"\u{1F5BC}",free:"\u{1F193}",fried_egg:"\u{1F373}",fried_shrimp:"\u{1F364}",fries:"\u{1F35F}",frog:"\u{1F438}",frowning:"\u{1F626}",frowning_face:"\u2639\uFE0F",frowning_man:"\u{1F64D}&zwj;\u2642\uFE0F",frowning_woman:"\u{1F64D}",middle_finger:"\u{1F595}",fuelpump:"\u26FD\uFE0F",full_moon:"\u{1F315}",full_moon_with_face:"\u{1F31D}",funeral_urn:"\u26B1\uFE0F",game_die:"\u{1F3B2}",gear:"\u2699\uFE0F",gem:"\u{1F48E}",gemini:"\u264A\uFE0F",ghost:"\u{1F47B}",gift:"\u{1F381}",gift_heart:"\u{1F49D}",girl:"\u{1F467}",globe_with_meridians:"\u{1F310}",goal_net:"\u{1F945}",goat:"\u{1F410}",golf:"\u26F3\uFE0F",golfing_man:"\u{1F3CC}\uFE0F",golfing_woman:"\u{1F3CC}\uFE0F&zwj;\u2640\uFE0F",gorilla:"\u{1F98D}",grapes:"\u{1F347}",green_apple:"\u{1F34F}",green_book:"\u{1F4D7}",green_heart:"\u{1F49A}",green_salad:"\u{1F957}",grey_exclamation:"\u2755",grey_question:"\u2754",grimacing:"\u{1F62C}",grin:"\u{1F601}",grinning:"\u{1F600}",guardsman:"\u{1F482}",guardswoman:"\u{1F482}&zwj;\u2640\uFE0F",guitar:"\u{1F3B8}",gun:"\u{1F52B}",haircut_woman:"\u{1F487}",haircut_man:"\u{1F487}&zwj;\u2642\uFE0F",hamburger:"\u{1F354}",hammer:"\u{1F528}",hammer_and_pick:"\u2692",hammer_and_wrench:"\u{1F6E0}",hamster:"\u{1F439}",hand:"\u270B",handbag:"\u{1F45C}",handshake:"\u{1F91D}",hankey:"\u{1F4A9}",hatched_chick:"\u{1F425}",hatching_chick:"\u{1F423}",headphones:"\u{1F3A7}",hear_no_evil:"\u{1F649}",heart:"\u2764\uFE0F",heart_decoration:"\u{1F49F}",heart_eyes:"\u{1F60D}",heart_eyes_cat:"\u{1F63B}",heartbeat:"\u{1F493}",heartpulse:"\u{1F497}",hearts:"\u2665\uFE0F",heavy_check_mark:"\u2714\uFE0F",heavy_division_sign:"\u2797",heavy_dollar_sign:"\u{1F4B2}",heavy_heart_exclamation:"\u2763\uFE0F",heavy_minus_sign:"\u2796",heavy_multiplication_x:"\u2716\uFE0F",heavy_plus_sign:"\u2795",helicopter:"\u{1F681}",herb:"\u{1F33F}",hibiscus:"\u{1F33A}",high_brightness:"\u{1F506}",high_heel:"\u{1F460}",hocho:"\u{1F52A}",hole:"\u{1F573}",honey_pot:"\u{1F36F}",horse:"\u{1F434}",horse_racing:"\u{1F3C7}",hospital:"\u{1F3E5}",hot_pepper:"\u{1F336}",hotdog:"\u{1F32D}",hotel:"\u{1F3E8}",hotsprings:"\u2668\uFE0F",hourglass:"\u231B\uFE0F",hourglass_flowing_sand:"\u23F3",house:"\u{1F3E0}",house_with_garden:"\u{1F3E1}",houses:"\u{1F3D8}",hugs:"\u{1F917}",hushed:"\u{1F62F}",ice_cream:"\u{1F368}",ice_hockey:"\u{1F3D2}",ice_skate:"\u26F8",icecream:"\u{1F366}",id:"\u{1F194}",ideograph_advantage:"\u{1F250}",imp:"\u{1F47F}",inbox_tray:"\u{1F4E5}",incoming_envelope:"\u{1F4E8}",tipping_hand_woman:"\u{1F481}",information_source:"\u2139\uFE0F",innocent:"\u{1F607}",interrobang:"\u2049\uFE0F",iphone:"\u{1F4F1}",izakaya_lantern:"\u{1F3EE}",jack_o_lantern:"\u{1F383}",japan:"\u{1F5FE}",japanese_castle:"\u{1F3EF}",japanese_goblin:"\u{1F47A}",japanese_ogre:"\u{1F479}",jeans:"\u{1F456}",joy:"\u{1F602}",joy_cat:"\u{1F639}",joystick:"\u{1F579}",kaaba:"\u{1F54B}",key:"\u{1F511}",keyboard:"\u2328\uFE0F",keycap_ten:"\u{1F51F}",kick_scooter:"\u{1F6F4}",kimono:"\u{1F458}",kiss:"\u{1F48B}",kissing:"\u{1F617}",kissing_cat:"\u{1F63D}",kissing_closed_eyes:"\u{1F61A}",kissing_heart:"\u{1F618}",kissing_smiling_eyes:"\u{1F619}",kiwi_fruit:"\u{1F95D}",koala:"\u{1F428}",koko:"\u{1F201}",label:"\u{1F3F7}",large_blue_circle:"\u{1F535}",large_blue_diamond:"\u{1F537}",large_orange_diamond:"\u{1F536}",last_quarter_moon:"\u{1F317}",last_quarter_moon_with_face:"\u{1F31C}",latin_cross:"\u271D\uFE0F",laughing:"\u{1F606}",leaves:"\u{1F343}",ledger:"\u{1F4D2}",left_luggage:"\u{1F6C5}",left_right_arrow:"\u2194\uFE0F",leftwards_arrow_with_hook:"\u21A9\uFE0F",lemon:"\u{1F34B}",leo:"\u264C\uFE0F",leopard:"\u{1F406}",level_slider:"\u{1F39A}",libra:"\u264E\uFE0F",light_rail:"\u{1F688}",link:"\u{1F517}",lion:"\u{1F981}",lips:"\u{1F444}",lipstick:"\u{1F484}",lizard:"\u{1F98E}",lock:"\u{1F512}",lock_with_ink_pen:"\u{1F50F}",lollipop:"\u{1F36D}",loop:"\u27BF",loud_sound:"\u{1F50A}",loudspeaker:"\u{1F4E2}",love_hotel:"\u{1F3E9}",love_letter:"\u{1F48C}",low_brightness:"\u{1F505}",lying_face:"\u{1F925}",m:"\u24C2\uFE0F",mag:"\u{1F50D}",mag_right:"\u{1F50E}",mahjong:"\u{1F004}\uFE0F",mailbox:"\u{1F4EB}",mailbox_closed:"\u{1F4EA}",mailbox_with_mail:"\u{1F4EC}",mailbox_with_no_mail:"\u{1F4ED}",man:"\u{1F468}",man_artist:"\u{1F468}&zwj;\u{1F3A8}",man_astronaut:"\u{1F468}&zwj;\u{1F680}",man_cartwheeling:"\u{1F938}&zwj;\u2642\uFE0F",man_cook:"\u{1F468}&zwj;\u{1F373}",man_dancing:"\u{1F57A}",man_facepalming:"\u{1F926}&zwj;\u2642\uFE0F",man_factory_worker:"\u{1F468}&zwj;\u{1F3ED}",man_farmer:"\u{1F468}&zwj;\u{1F33E}",man_firefighter:"\u{1F468}&zwj;\u{1F692}",man_health_worker:"\u{1F468}&zwj;\u2695\uFE0F",man_in_tuxedo:"\u{1F935}",man_judge:"\u{1F468}&zwj;\u2696\uFE0F",man_juggling:"\u{1F939}&zwj;\u2642\uFE0F",man_mechanic:"\u{1F468}&zwj;\u{1F527}",man_office_worker:"\u{1F468}&zwj;\u{1F4BC}",man_pilot:"\u{1F468}&zwj;\u2708\uFE0F",man_playing_handball:"\u{1F93E}&zwj;\u2642\uFE0F",man_playing_water_polo:"\u{1F93D}&zwj;\u2642\uFE0F",man_scientist:"\u{1F468}&zwj;\u{1F52C}",man_shrugging:"\u{1F937}&zwj;\u2642\uFE0F",man_singer:"\u{1F468}&zwj;\u{1F3A4}",man_student:"\u{1F468}&zwj;\u{1F393}",man_teacher:"\u{1F468}&zwj;\u{1F3EB}",man_technologist:"\u{1F468}&zwj;\u{1F4BB}",man_with_gua_pi_mao:"\u{1F472}",man_with_turban:"\u{1F473}",tangerine:"\u{1F34A}",mans_shoe:"\u{1F45E}",mantelpiece_clock:"\u{1F570}",maple_leaf:"\u{1F341}",martial_arts_uniform:"\u{1F94B}",mask:"\u{1F637}",massage_woman:"\u{1F486}",massage_man:"\u{1F486}&zwj;\u2642\uFE0F",meat_on_bone:"\u{1F356}",medal_military:"\u{1F396}",medal_sports:"\u{1F3C5}",mega:"\u{1F4E3}",melon:"\u{1F348}",memo:"\u{1F4DD}",men_wrestling:"\u{1F93C}&zwj;\u2642\uFE0F",menorah:"\u{1F54E}",mens:"\u{1F6B9}",metal:"\u{1F918}",metro:"\u{1F687}",microphone:"\u{1F3A4}",microscope:"\u{1F52C}",milk_glass:"\u{1F95B}",milky_way:"\u{1F30C}",minibus:"\u{1F690}",minidisc:"\u{1F4BD}",mobile_phone_off:"\u{1F4F4}",money_mouth_face:"\u{1F911}",money_with_wings:"\u{1F4B8}",moneybag:"\u{1F4B0}",monkey:"\u{1F412}",monkey_face:"\u{1F435}",monorail:"\u{1F69D}",moon:"\u{1F314}",mortar_board:"\u{1F393}",mosque:"\u{1F54C}",motor_boat:"\u{1F6E5}",motor_scooter:"\u{1F6F5}",motorcycle:"\u{1F3CD}",motorway:"\u{1F6E3}",mount_fuji:"\u{1F5FB}",mountain:"\u26F0",mountain_biking_man:"\u{1F6B5}",mountain_biking_woman:"\u{1F6B5}&zwj;\u2640\uFE0F",mountain_cableway:"\u{1F6A0}",mountain_railway:"\u{1F69E}",mountain_snow:"\u{1F3D4}",mouse:"\u{1F42D}",mouse2:"\u{1F401}",movie_camera:"\u{1F3A5}",moyai:"\u{1F5FF}",mrs_claus:"\u{1F936}",muscle:"\u{1F4AA}",mushroom:"\u{1F344}",musical_keyboard:"\u{1F3B9}",musical_note:"\u{1F3B5}",musical_score:"\u{1F3BC}",mute:"\u{1F507}",nail_care:"\u{1F485}",name_badge:"\u{1F4DB}",national_park:"\u{1F3DE}",nauseated_face:"\u{1F922}",necktie:"\u{1F454}",negative_squared_cross_mark:"\u274E",nerd_face:"\u{1F913}",neutral_face:"\u{1F610}",new:"\u{1F195}",new_moon:"\u{1F311}",new_moon_with_face:"\u{1F31A}",newspaper:"\u{1F4F0}",newspaper_roll:"\u{1F5DE}",next_track_button:"\u23ED",ng:"\u{1F196}",no_good_man:"\u{1F645}&zwj;\u2642\uFE0F",no_good_woman:"\u{1F645}",night_with_stars:"\u{1F303}",no_bell:"\u{1F515}",no_bicycles:"\u{1F6B3}",no_entry:"\u26D4\uFE0F",no_entry_sign:"\u{1F6AB}",no_mobile_phones:"\u{1F4F5}",no_mouth:"\u{1F636}",no_pedestrians:"\u{1F6B7}",no_smoking:"\u{1F6AD}","non-potable_water":"\u{1F6B1}",nose:"\u{1F443}",notebook:"\u{1F4D3}",notebook_with_decorative_cover:"\u{1F4D4}",notes:"\u{1F3B6}",nut_and_bolt:"\u{1F529}",o:"\u2B55\uFE0F",o2:"\u{1F17E}\uFE0F",ocean:"\u{1F30A}",octopus:"\u{1F419}",oden:"\u{1F362}",office:"\u{1F3E2}",oil_drum:"\u{1F6E2}",ok:"\u{1F197}",ok_hand:"\u{1F44C}",ok_man:"\u{1F646}&zwj;\u2642\uFE0F",ok_woman:"\u{1F646}",old_key:"\u{1F5DD}",older_man:"\u{1F474}",older_woman:"\u{1F475}",om:"\u{1F549}",on:"\u{1F51B}",oncoming_automobile:"\u{1F698}",oncoming_bus:"\u{1F68D}",oncoming_police_car:"\u{1F694}",oncoming_taxi:"\u{1F696}",open_file_folder:"\u{1F4C2}",open_hands:"\u{1F450}",open_mouth:"\u{1F62E}",open_umbrella:"\u2602\uFE0F",ophiuchus:"\u26CE",orange_book:"\u{1F4D9}",orthodox_cross:"\u2626\uFE0F",outbox_tray:"\u{1F4E4}",owl:"\u{1F989}",ox:"\u{1F402}",package:"\u{1F4E6}",page_facing_up:"\u{1F4C4}",page_with_curl:"\u{1F4C3}",pager:"\u{1F4DF}",paintbrush:"\u{1F58C}",palm_tree:"\u{1F334}",pancakes:"\u{1F95E}",panda_face:"\u{1F43C}",paperclip:"\u{1F4CE}",paperclips:"\u{1F587}",parasol_on_ground:"\u26F1",parking:"\u{1F17F}\uFE0F",part_alternation_mark:"\u303D\uFE0F",partly_sunny:"\u26C5\uFE0F",passenger_ship:"\u{1F6F3}",passport_control:"\u{1F6C2}",pause_button:"\u23F8",peace_symbol:"\u262E\uFE0F",peach:"\u{1F351}",peanuts:"\u{1F95C}",pear:"\u{1F350}",pen:"\u{1F58A}",pencil2:"\u270F\uFE0F",penguin:"\u{1F427}",pensive:"\u{1F614}",performing_arts:"\u{1F3AD}",persevere:"\u{1F623}",person_fencing:"\u{1F93A}",pouting_woman:"\u{1F64E}",phone:"\u260E\uFE0F",pick:"\u26CF",pig:"\u{1F437}",pig2:"\u{1F416}",pig_nose:"\u{1F43D}",pill:"\u{1F48A}",pineapple:"\u{1F34D}",ping_pong:"\u{1F3D3}",pisces:"\u2653\uFE0F",pizza:"\u{1F355}",place_of_worship:"\u{1F6D0}",plate_with_cutlery:"\u{1F37D}",play_or_pause_button:"\u23EF",point_down:"\u{1F447}",point_left:"\u{1F448}",point_right:"\u{1F449}",point_up:"\u261D\uFE0F",point_up_2:"\u{1F446}",police_car:"\u{1F693}",policewoman:"\u{1F46E}&zwj;\u2640\uFE0F",poodle:"\u{1F429}",popcorn:"\u{1F37F}",post_office:"\u{1F3E3}",postal_horn:"\u{1F4EF}",postbox:"\u{1F4EE}",potable_water:"\u{1F6B0}",potato:"\u{1F954}",pouch:"\u{1F45D}",poultry_leg:"\u{1F357}",pound:"\u{1F4B7}",rage:"\u{1F621}",pouting_cat:"\u{1F63E}",pouting_man:"\u{1F64E}&zwj;\u2642\uFE0F",pray:"\u{1F64F}",prayer_beads:"\u{1F4FF}",pregnant_woman:"\u{1F930}",previous_track_button:"\u23EE",prince:"\u{1F934}",princess:"\u{1F478}",printer:"\u{1F5A8}",purple_heart:"\u{1F49C}",purse:"\u{1F45B}",pushpin:"\u{1F4CC}",put_litter_in_its_place:"\u{1F6AE}",question:"\u2753",rabbit:"\u{1F430}",rabbit2:"\u{1F407}",racehorse:"\u{1F40E}",racing_car:"\u{1F3CE}",radio:"\u{1F4FB}",radio_button:"\u{1F518}",radioactive:"\u2622\uFE0F",railway_car:"\u{1F683}",railway_track:"\u{1F6E4}",rainbow:"\u{1F308}",rainbow_flag:"\u{1F3F3}\uFE0F&zwj;\u{1F308}",raised_back_of_hand:"\u{1F91A}",raised_hand_with_fingers_splayed:"\u{1F590}",raised_hands:"\u{1F64C}",raising_hand_woman:"\u{1F64B}",raising_hand_man:"\u{1F64B}&zwj;\u2642\uFE0F",ram:"\u{1F40F}",ramen:"\u{1F35C}",rat:"\u{1F400}",record_button:"\u23FA",recycle:"\u267B\uFE0F",red_circle:"\u{1F534}",registered:"\xAE\uFE0F",relaxed:"\u263A\uFE0F",relieved:"\u{1F60C}",reminder_ribbon:"\u{1F397}",repeat:"\u{1F501}",repeat_one:"\u{1F502}",rescue_worker_helmet:"\u26D1",restroom:"\u{1F6BB}",revolving_hearts:"\u{1F49E}",rewind:"\u23EA",rhinoceros:"\u{1F98F}",ribbon:"\u{1F380}",rice:"\u{1F35A}",rice_ball:"\u{1F359}",rice_cracker:"\u{1F358}",rice_scene:"\u{1F391}",right_anger_bubble:"\u{1F5EF}",ring:"\u{1F48D}",robot:"\u{1F916}",rocket:"\u{1F680}",rofl:"\u{1F923}",roll_eyes:"\u{1F644}",roller_coaster:"\u{1F3A2}",rooster:"\u{1F413}",rose:"\u{1F339}",rosette:"\u{1F3F5}",rotating_light:"\u{1F6A8}",round_pushpin:"\u{1F4CD}",rowing_man:"\u{1F6A3}",rowing_woman:"\u{1F6A3}&zwj;\u2640\uFE0F",rugby_football:"\u{1F3C9}",running_man:"\u{1F3C3}",running_shirt_with_sash:"\u{1F3BD}",running_woman:"\u{1F3C3}&zwj;\u2640\uFE0F",sa:"\u{1F202}\uFE0F",sagittarius:"\u2650\uFE0F",sake:"\u{1F376}",sandal:"\u{1F461}",santa:"\u{1F385}",satellite:"\u{1F4E1}",saxophone:"\u{1F3B7}",school:"\u{1F3EB}",school_satchel:"\u{1F392}",scissors:"\u2702\uFE0F",scorpion:"\u{1F982}",scorpius:"\u264F\uFE0F",scream:"\u{1F631}",scream_cat:"\u{1F640}",scroll:"\u{1F4DC}",seat:"\u{1F4BA}",secret:"\u3299\uFE0F",see_no_evil:"\u{1F648}",seedling:"\u{1F331}",selfie:"\u{1F933}",shallow_pan_of_food:"\u{1F958}",shamrock:"\u2618\uFE0F",shark:"\u{1F988}",shaved_ice:"\u{1F367}",sheep:"\u{1F411}",shell:"\u{1F41A}",shield:"\u{1F6E1}",shinto_shrine:"\u26E9",ship:"\u{1F6A2}",shirt:"\u{1F455}",shopping:"\u{1F6CD}",shopping_cart:"\u{1F6D2}",shower:"\u{1F6BF}",shrimp:"\u{1F990}",signal_strength:"\u{1F4F6}",six_pointed_star:"\u{1F52F}",ski:"\u{1F3BF}",skier:"\u26F7",skull:"\u{1F480}",skull_and_crossbones:"\u2620\uFE0F",sleeping:"\u{1F634}",sleeping_bed:"\u{1F6CC}",sleepy:"\u{1F62A}",slightly_frowning_face:"\u{1F641}",slightly_smiling_face:"\u{1F642}",slot_machine:"\u{1F3B0}",small_airplane:"\u{1F6E9}",small_blue_diamond:"\u{1F539}",small_orange_diamond:"\u{1F538}",small_red_triangle:"\u{1F53A}",small_red_triangle_down:"\u{1F53B}",smile:"\u{1F604}",smile_cat:"\u{1F638}",smiley:"\u{1F603}",smiley_cat:"\u{1F63A}",smiling_imp:"\u{1F608}",smirk:"\u{1F60F}",smirk_cat:"\u{1F63C}",smoking:"\u{1F6AC}",snail:"\u{1F40C}",snake:"\u{1F40D}",sneezing_face:"\u{1F927}",snowboarder:"\u{1F3C2}",snowflake:"\u2744\uFE0F",snowman:"\u26C4\uFE0F",snowman_with_snow:"\u2603\uFE0F",sob:"\u{1F62D}",soccer:"\u26BD\uFE0F",soon:"\u{1F51C}",sos:"\u{1F198}",sound:"\u{1F509}",space_invader:"\u{1F47E}",spades:"\u2660\uFE0F",spaghetti:"\u{1F35D}",sparkle:"\u2747\uFE0F",sparkler:"\u{1F387}",sparkles:"\u2728",sparkling_heart:"\u{1F496}",speak_no_evil:"\u{1F64A}",speaker:"\u{1F508}",speaking_head:"\u{1F5E3}",speech_balloon:"\u{1F4AC}",speedboat:"\u{1F6A4}",spider:"\u{1F577}",spider_web:"\u{1F578}",spiral_calendar:"\u{1F5D3}",spiral_notepad:"\u{1F5D2}",spoon:"\u{1F944}",squid:"\u{1F991}",stadium:"\u{1F3DF}",star:"\u2B50\uFE0F",star2:"\u{1F31F}",star_and_crescent:"\u262A\uFE0F",star_of_david:"\u2721\uFE0F",stars:"\u{1F320}",station:"\u{1F689}",statue_of_liberty:"\u{1F5FD}",steam_locomotive:"\u{1F682}",stew:"\u{1F372}",stop_button:"\u23F9",stop_sign:"\u{1F6D1}",stopwatch:"\u23F1",straight_ruler:"\u{1F4CF}",strawberry:"\u{1F353}",stuck_out_tongue:"\u{1F61B}",stuck_out_tongue_closed_eyes:"\u{1F61D}",stuck_out_tongue_winking_eye:"\u{1F61C}",studio_microphone:"\u{1F399}",stuffed_flatbread:"\u{1F959}",sun_behind_large_cloud:"\u{1F325}",sun_behind_rain_cloud:"\u{1F326}",sun_behind_small_cloud:"\u{1F324}",sun_with_face:"\u{1F31E}",sunflower:"\u{1F33B}",sunglasses:"\u{1F60E}",sunny:"\u2600\uFE0F",sunrise:"\u{1F305}",sunrise_over_mountains:"\u{1F304}",surfing_man:"\u{1F3C4}",surfing_woman:"\u{1F3C4}&zwj;\u2640\uFE0F",sushi:"\u{1F363}",suspension_railway:"\u{1F69F}",sweat:"\u{1F613}",sweat_drops:"\u{1F4A6}",sweat_smile:"\u{1F605}",sweet_potato:"\u{1F360}",swimming_man:"\u{1F3CA}",swimming_woman:"\u{1F3CA}&zwj;\u2640\uFE0F",symbols:"\u{1F523}",synagogue:"\u{1F54D}",syringe:"\u{1F489}",taco:"\u{1F32E}",tada:"\u{1F389}",tanabata_tree:"\u{1F38B}",taurus:"\u2649\uFE0F",taxi:"\u{1F695}",tea:"\u{1F375}",telephone_receiver:"\u{1F4DE}",telescope:"\u{1F52D}",tennis:"\u{1F3BE}",tent:"\u26FA\uFE0F",thermometer:"\u{1F321}",thinking:"\u{1F914}",thought_balloon:"\u{1F4AD}",ticket:"\u{1F3AB}",tickets:"\u{1F39F}",tiger:"\u{1F42F}",tiger2:"\u{1F405}",timer_clock:"\u23F2",tipping_hand_man:"\u{1F481}&zwj;\u2642\uFE0F",tired_face:"\u{1F62B}",tm:"\u2122\uFE0F",toilet:"\u{1F6BD}",tokyo_tower:"\u{1F5FC}",tomato:"\u{1F345}",tongue:"\u{1F445}",top:"\u{1F51D}",tophat:"\u{1F3A9}",tornado:"\u{1F32A}",trackball:"\u{1F5B2}",tractor:"\u{1F69C}",traffic_light:"\u{1F6A5}",train:"\u{1F68B}",train2:"\u{1F686}",tram:"\u{1F68A}",triangular_flag_on_post:"\u{1F6A9}",triangular_ruler:"\u{1F4D0}",trident:"\u{1F531}",triumph:"\u{1F624}",trolleybus:"\u{1F68E}",trophy:"\u{1F3C6}",tropical_drink:"\u{1F379}",tropical_fish:"\u{1F420}",truck:"\u{1F69A}",trumpet:"\u{1F3BA}",tulip:"\u{1F337}",tumbler_glass:"\u{1F943}",turkey:"\u{1F983}",turtle:"\u{1F422}",tv:"\u{1F4FA}",twisted_rightwards_arrows:"\u{1F500}",two_hearts:"\u{1F495}",two_men_holding_hands:"\u{1F46C}",two_women_holding_hands:"\u{1F46D}",u5272:"\u{1F239}",u5408:"\u{1F234}",u55b6:"\u{1F23A}",u6307:"\u{1F22F}\uFE0F",u6708:"\u{1F237}\uFE0F",u6709:"\u{1F236}",u6e80:"\u{1F235}",u7121:"\u{1F21A}\uFE0F",u7533:"\u{1F238}",u7981:"\u{1F232}",u7a7a:"\u{1F233}",umbrella:"\u2614\uFE0F",unamused:"\u{1F612}",underage:"\u{1F51E}",unicorn:"\u{1F984}",unlock:"\u{1F513}",up:"\u{1F199}",upside_down_face:"\u{1F643}",v:"\u270C\uFE0F",vertical_traffic_light:"\u{1F6A6}",vhs:"\u{1F4FC}",vibration_mode:"\u{1F4F3}",video_camera:"\u{1F4F9}",video_game:"\u{1F3AE}",violin:"\u{1F3BB}",virgo:"\u264D\uFE0F",volcano:"\u{1F30B}",volleyball:"\u{1F3D0}",vs:"\u{1F19A}",vulcan_salute:"\u{1F596}",walking_man:"\u{1F6B6}",walking_woman:"\u{1F6B6}&zwj;\u2640\uFE0F",waning_crescent_moon:"\u{1F318}",waning_gibbous_moon:"\u{1F316}",warning:"\u26A0\uFE0F",wastebasket:"\u{1F5D1}",watch:"\u231A\uFE0F",water_buffalo:"\u{1F403}",watermelon:"\u{1F349}",wave:"\u{1F44B}",wavy_dash:"\u3030\uFE0F",waxing_crescent_moon:"\u{1F312}",wc:"\u{1F6BE}",weary:"\u{1F629}",wedding:"\u{1F492}",weight_lifting_man:"\u{1F3CB}\uFE0F",weight_lifting_woman:"\u{1F3CB}\uFE0F&zwj;\u2640\uFE0F",whale:"\u{1F433}",whale2:"\u{1F40B}",wheel_of_dharma:"\u2638\uFE0F",wheelchair:"\u267F\uFE0F",white_check_mark:"\u2705",white_circle:"\u26AA\uFE0F",white_flag:"\u{1F3F3}\uFE0F",white_flower:"\u{1F4AE}",white_large_square:"\u2B1C\uFE0F",white_medium_small_square:"\u25FD\uFE0F",white_medium_square:"\u25FB\uFE0F",white_small_square:"\u25AB\uFE0F",white_square_button:"\u{1F533}",wilted_flower:"\u{1F940}",wind_chime:"\u{1F390}",wind_face:"\u{1F32C}",wine_glass:"\u{1F377}",wink:"\u{1F609}",wolf:"\u{1F43A}",woman:"\u{1F469}",woman_artist:"\u{1F469}&zwj;\u{1F3A8}",woman_astronaut:"\u{1F469}&zwj;\u{1F680}",woman_cartwheeling:"\u{1F938}&zwj;\u2640\uFE0F",woman_cook:"\u{1F469}&zwj;\u{1F373}",woman_facepalming:"\u{1F926}&zwj;\u2640\uFE0F",woman_factory_worker:"\u{1F469}&zwj;\u{1F3ED}",woman_farmer:"\u{1F469}&zwj;\u{1F33E}",woman_firefighter:"\u{1F469}&zwj;\u{1F692}",woman_health_worker:"\u{1F469}&zwj;\u2695\uFE0F",woman_judge:"\u{1F469}&zwj;\u2696\uFE0F",woman_juggling:"\u{1F939}&zwj;\u2640\uFE0F",woman_mechanic:"\u{1F469}&zwj;\u{1F527}",woman_office_worker:"\u{1F469}&zwj;\u{1F4BC}",woman_pilot:"\u{1F469}&zwj;\u2708\uFE0F",woman_playing_handball:"\u{1F93E}&zwj;\u2640\uFE0F",woman_playing_water_polo:"\u{1F93D}&zwj;\u2640\uFE0F",woman_scientist:"\u{1F469}&zwj;\u{1F52C}",woman_shrugging:"\u{1F937}&zwj;\u2640\uFE0F",woman_singer:"\u{1F469}&zwj;\u{1F3A4}",woman_student:"\u{1F469}&zwj;\u{1F393}",woman_teacher:"\u{1F469}&zwj;\u{1F3EB}",woman_technologist:"\u{1F469}&zwj;\u{1F4BB}",woman_with_turban:"\u{1F473}&zwj;\u2640\uFE0F",womans_clothes:"\u{1F45A}",womans_hat:"\u{1F452}",women_wrestling:"\u{1F93C}&zwj;\u2640\uFE0F",womens:"\u{1F6BA}",world_map:"\u{1F5FA}",worried:"\u{1F61F}",wrench:"\u{1F527}",writing_hand:"\u270D\uFE0F",x:"\u274C",yellow_heart:"\u{1F49B}",yen:"\u{1F4B4}",yin_yang:"\u262F\uFE0F",yum:"\u{1F60B}",zap:"\u26A1\uFE0F",zipper_mouth_face:"\u{1F910}",zzz:"\u{1F4A4}",octocat:'<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',showdown:`<span style="font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>`},t.Converter=function(o){"use strict";var h={},f=[],_=[],C={},I=a,L={parsed:{},raw:"",format:""};F();function F(){o=o||{};for(var x in s)s.hasOwnProperty(x)&&(h[x]=s[x]);if(typeof o=="object")for(var U in o)o.hasOwnProperty(U)&&(h[U]=o[U]);else throw Error("Converter expects the passed parameter to be an object, but "+typeof o+" was passed instead.");h.extensions&&t.helper.forEach(h.extensions,K)}function K(x,U){if(U=U||null,t.helper.isString(x))if(x=t.helper.stdExtName(x),U=x,t.extensions[x]){console.warn("DEPRECATION WARNING: "+x+" is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!"),W(t.extensions[x],x);return}else if(!t.helper.isUndefined(r[x]))x=r[x];else throw Error('Extension "'+x+'" could not be loaded. It was either not found or is not a valid extension.');typeof x=="function"&&(x=x()),t.helper.isArray(x)||(x=[x]);var z=c(x,U);if(!z.valid)throw Error(z.error);for(var $=0;$<x.length;++$){switch(x[$].type){case"lang":f.push(x[$]);break;case"output":_.push(x[$]);break}if(x[$].hasOwnProperty("listeners"))for(var ee in x[$].listeners)x[$].listeners.hasOwnProperty(ee)&&q(ee,x[$].listeners[ee])}}function W(x,U){typeof x=="function"&&(x=x(new t.Converter)),t.helper.isArray(x)||(x=[x]);var z=c(x,U);if(!z.valid)throw Error(z.error);for(var $=0;$<x.length;++$)switch(x[$].type){case"lang":f.push(x[$]);break;case"output":_.push(x[$]);break;default:throw Error("Extension loader error: Type unrecognized!!!")}}function q(x,U){if(!t.helper.isString(x))throw Error("Invalid argument in converter.listen() method: name must be a string, but "+typeof x+" given");if(typeof U!="function")throw Error("Invalid argument in converter.listen() method: callback must be a function, but "+typeof U+" given");C.hasOwnProperty(x)||(C[x]=[]),C[x].push(U)}function G(x){var U=x.match(/^\s*/)[0].length,z=new RegExp("^\\s{0,"+U+"}","gm");return x.replace(z,"")}this._dispatch=function(U,z,$,ee){if(C.hasOwnProperty(U))for(var X=0;X<C[U].length;++X){var ie=C[U][X](U,z,this,$,ee);ie&&typeof ie<"u"&&(z=ie)}return z},this.listen=function(x,U){return q(x,U),this},this.makeHtml=function(x){if(!x)return x;var U={gHtmlBlocks:[],gHtmlMdBlocks:[],gHtmlSpans:[],gUrls:{},gTitles:{},gDimensions:{},gListLevel:0,hashLinkCounts:{},langExtensions:f,outputModifiers:_,converter:this,ghCodeBlocks:[],metadata:{parsed:{},raw:"",format:""}};return x=x.replace(/¨/g,"\xA8T"),x=x.replace(/\$/g,"\xA8D"),x=x.replace(/\r\n/g,`
`),x=x.replace(/\r/g,`
`),x=x.replace(/\u00A0/g,"&nbsp;"),h.smartIndentationFix&&(x=G(x)),x=`

`+x+`

`,x=t.subParser("detab")(x,h,U),x=x.replace(/^[ \t]+$/mg,""),t.helper.forEach(f,function(z){x=t.subParser("runExtension")(z,x,h,U)}),x=t.subParser("metadata")(x,h,U),x=t.subParser("hashPreCodeTags")(x,h,U),x=t.subParser("githubCodeBlocks")(x,h,U),x=t.subParser("hashHTMLBlocks")(x,h,U),x=t.subParser("hashCodeTags")(x,h,U),x=t.subParser("stripLinkDefinitions")(x,h,U),x=t.subParser("blockGamut")(x,h,U),x=t.subParser("unhashHTMLSpans")(x,h,U),x=t.subParser("unescapeSpecialChars")(x,h,U),x=x.replace(/¨D/g,"$$"),x=x.replace(/¨T/g,"\xA8"),x=t.subParser("completeHTMLDocument")(x,h,U),t.helper.forEach(_,function(z){x=t.subParser("runExtension")(z,x,h,U)}),L=U.metadata,x},this.makeMarkdown=this.makeMd=function(x,U){if(x=x.replace(/\r\n/g,`
`),x=x.replace(/\r/g,`
`),x=x.replace(/>[ \t]+</,">\xA8NBSP;<"),!U)if(window&&window.document)U=window.document;else throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");var z=U.createElement("div");z.innerHTML=x;var $={preList:me(z)};ae(z);for(var ee=z.childNodes,X="",ie=0;ie<ee.length;ie++)X+=t.subParser("makeMarkdown.node")(ee[ie],$);function ae(re){for(var ye=0;ye<re.childNodes.length;++ye){var ne=re.childNodes[ye];ne.nodeType===3?!/\S/.test(ne.nodeValue)&&!/^[ ]+$/.test(ne.nodeValue)?(re.removeChild(ne),--ye):(ne.nodeValue=ne.nodeValue.split(`
`).join(" "),ne.nodeValue=ne.nodeValue.replace(/(\s)+/g,"$1")):ne.nodeType===1&&ae(ne)}}function me(re){for(var ye=re.querySelectorAll("pre"),ne=[],xe=0;xe<ye.length;++xe)if(ye[xe].childElementCount===1&&ye[xe].firstChild.tagName.toLowerCase()==="code"){var je=ye[xe].firstChild.innerHTML.trim(),He=ye[xe].firstChild.getAttribute("data-language")||"";if(He==="")for(var st=ye[xe].firstChild.className.split(" "),At=0;At<st.length;++At){var nt=st[At].match(/^language-(.+)$/);if(nt!==null){He=nt[1];break}}je=t.helper.unescapeHTMLEntities(je),ne.push(je),ye[xe].outerHTML='<precode language="'+He+'" precodenum="'+xe.toString()+'"></precode>'}else ne.push(ye[xe].innerHTML),ye[xe].innerHTML="",ye[xe].setAttribute("prenum",xe.toString());return ne}return X},this.setOption=function(x,U){h[x]=U},this.getOption=function(x){return h[x]},this.getOptions=function(){return h},this.addExtension=function(x,U){U=U||null,K(x,U)},this.useExtension=function(x){K(x)},this.setFlavor=function(x){if(!u.hasOwnProperty(x))throw Error(x+" flavor was not found");var U=u[x];I=x;for(var z in U)U.hasOwnProperty(z)&&(h[z]=U[z])},this.getFlavor=function(){return I},this.removeExtension=function(x){t.helper.isArray(x)||(x=[x]);for(var U=0;U<x.length;++U){for(var z=x[U],$=0;$<f.length;++$)f[$]===z&&f.splice($,1);for(var ee=0;ee<_.length;++ee)_[ee]===z&&_.splice(ee,1)}},this.getAllExtensions=function(){return{language:f,output:_}},this.getMetadata=function(x){return x?L.raw:L.parsed},this.getMetadataFormat=function(){return L.format},this._setMetadataPair=function(x,U){L.parsed[x]=U},this._setMetadataFormat=function(x){L.format=x},this._setMetadataRaw=function(x){L.raw=x}},t.subParser("anchors",function(o,h,f){"use strict";o=f.converter._dispatch("anchors.before",o,h,f);var _=function(C,I,L,F,K,W,q){if(t.helper.isUndefined(q)&&(q=""),L=L.toLowerCase(),C.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)F="";else if(!F)if(L||(L=I.toLowerCase().replace(/ ?\n/g," ")),F="#"+L,!t.helper.isUndefined(f.gUrls[L]))F=f.gUrls[L],t.helper.isUndefined(f.gTitles[L])||(q=f.gTitles[L]);else return C;F=F.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var G='<a href="'+F+'"';return q!==""&&q!==null&&(q=q.replace(/"/g,"&quot;"),q=q.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),G+=' title="'+q+'"'),h.openLinksInNewWindow&&!/^#/.test(F)&&(G+=' rel="noopener noreferrer" target="\xA8E95Eblank"'),G+=">"+I+"</a>",G};return o=o.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g,_),o=o.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,_),o=o.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,_),o=o.replace(/\[([^\[\]]+)]()()()()()/g,_),h.ghMentions&&(o=o.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gmi,function(C,I,L,F,K){if(L==="\\")return I+F;if(!t.helper.isString(h.ghMentionsLink))throw new Error("ghMentionsLink option must be a string");var W=h.ghMentionsLink.replace(/\{u}/g,K),q="";return h.openLinksInNewWindow&&(q=' rel="noopener noreferrer" target="\xA8E95Eblank"'),I+'<a href="'+W+'"'+q+">"+F+"</a>"})),o=f.converter._dispatch("anchors.after",o,h,f),o});var A=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,N=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,y=/()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,d=/(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gmi,g=/<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,b=function(o){"use strict";return function(h,f,_,C,I,L,F){_=_.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var K=_,W="",q="",G=f||"",x=F||"";return/^www\./i.test(_)&&(_=_.replace(/^www\./i,"http://www.")),o.excludeTrailingPunctuationFromURLs&&L&&(W=L),o.openLinksInNewWindow&&(q=' rel="noopener noreferrer" target="\xA8E95Eblank"'),G+'<a href="'+_+'"'+q+">"+K+"</a>"+W+x}},E=function(o,h){"use strict";return function(f,_,C){var I="mailto:";return _=_||"",C=t.subParser("unescapeSpecialChars")(C,o,h),o.encodeEmails?(I=t.helper.encodeEmailAddress(I+C),C=t.helper.encodeEmailAddress(C)):I=I+C,_+'<a href="'+I+'">'+C+"</a>"}};t.subParser("autoLinks",function(o,h,f){"use strict";return o=f.converter._dispatch("autoLinks.before",o,h,f),o=o.replace(y,b(h)),o=o.replace(g,E(h,f)),o=f.converter._dispatch("autoLinks.after",o,h,f),o}),t.subParser("simplifiedAutoLinks",function(o,h,f){"use strict";return h.simplifiedAutoLink&&(o=f.converter._dispatch("simplifiedAutoLinks.before",o,h,f),h.excludeTrailingPunctuationFromURLs?o=o.replace(N,b(h)):o=o.replace(A,b(h)),o=o.replace(d,E(h,f)),o=f.converter._dispatch("simplifiedAutoLinks.after",o,h,f)),o}),t.subParser("blockGamut",function(o,h,f){"use strict";return o=f.converter._dispatch("blockGamut.before",o,h,f),o=t.subParser("blockQuotes")(o,h,f),o=t.subParser("headers")(o,h,f),o=t.subParser("horizontalRule")(o,h,f),o=t.subParser("lists")(o,h,f),o=t.subParser("codeBlocks")(o,h,f),o=t.subParser("tables")(o,h,f),o=t.subParser("hashHTMLBlocks")(o,h,f),o=t.subParser("paragraphs")(o,h,f),o=f.converter._dispatch("blockGamut.after",o,h,f),o}),t.subParser("blockQuotes",function(o,h,f){"use strict";o=f.converter._dispatch("blockQuotes.before",o,h,f),o=o+`

`;var _=/(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;return h.splitAdjacentBlockquotes&&(_=/^ {0,3}>[\s\S]*?(?:\n\n)/gm),o=o.replace(_,function(C){return C=C.replace(/^[ \t]*>[ \t]?/gm,""),C=C.replace(/¨0/g,""),C=C.replace(/^[ \t]+$/gm,""),C=t.subParser("githubCodeBlocks")(C,h,f),C=t.subParser("blockGamut")(C,h,f),C=C.replace(/(^|\n)/g,"$1  "),C=C.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm,function(I,L){var F=L;return F=F.replace(/^  /mg,"\xA80"),F=F.replace(/¨0/g,""),F}),t.subParser("hashBlock")(`<blockquote>
`+C+`
</blockquote>`,h,f)}),o=f.converter._dispatch("blockQuotes.after",o,h,f),o}),t.subParser("codeBlocks",function(o,h,f){"use strict";o=f.converter._dispatch("codeBlocks.before",o,h,f),o+="\xA80";var _=/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g;return o=o.replace(_,function(C,I,L){var F=I,K=L,W=`
`;return F=t.subParser("outdent")(F,h,f),F=t.subParser("encodeCode")(F,h,f),F=t.subParser("detab")(F,h,f),F=F.replace(/^\n+/g,""),F=F.replace(/\n+$/g,""),h.omitExtraWLInCodeBlocks&&(W=""),F="<pre><code>"+F+W+"</code></pre>",t.subParser("hashBlock")(F,h,f)+K}),o=o.replace(/¨0/,""),o=f.converter._dispatch("codeBlocks.after",o,h,f),o}),t.subParser("codeSpans",function(o,h,f){"use strict";return o=f.converter._dispatch("codeSpans.before",o,h,f),typeof o>"u"&&(o=""),o=o.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,function(_,C,I,L){var F=L;return F=F.replace(/^([ \t]*)/g,""),F=F.replace(/[ \t]*$/g,""),F=t.subParser("encodeCode")(F,h,f),F=C+"<code>"+F+"</code>",F=t.subParser("hashHTMLSpans")(F,h,f),F}),o=f.converter._dispatch("codeSpans.after",o,h,f),o}),t.subParser("completeHTMLDocument",function(o,h,f){"use strict";if(!h.completeHTMLDocument)return o;o=f.converter._dispatch("completeHTMLDocument.before",o,h,f);var _="html",C=`<!DOCTYPE HTML>
`,I="",L=`<meta charset="utf-8">
`,F="",K="";typeof f.metadata.parsed.doctype<"u"&&(C="<!DOCTYPE "+f.metadata.parsed.doctype+`>
`,_=f.metadata.parsed.doctype.toString().toLowerCase(),(_==="html"||_==="html5")&&(L='<meta charset="utf-8">'));for(var W in f.metadata.parsed)if(f.metadata.parsed.hasOwnProperty(W))switch(W.toLowerCase()){case"doctype":break;case"title":I="<title>"+f.metadata.parsed.title+`</title>
`;break;case"charset":_==="html"||_==="html5"?L='<meta charset="'+f.metadata.parsed.charset+`">
`:L='<meta name="charset" content="'+f.metadata.parsed.charset+`">
`;break;case"language":case"lang":F=' lang="'+f.metadata.parsed[W]+'"',K+='<meta name="'+W+'" content="'+f.metadata.parsed[W]+`">
`;break;default:K+='<meta name="'+W+'" content="'+f.metadata.parsed[W]+`">
`}return o=C+"<html"+F+`>
<head>
`+I+L+K+`</head>
<body>
`+o.trim()+`
</body>
</html>`,o=f.converter._dispatch("completeHTMLDocument.after",o,h,f),o}),t.subParser("detab",function(o,h,f){"use strict";return o=f.converter._dispatch("detab.before",o,h,f),o=o.replace(/\t(?=\t)/g,"    "),o=o.replace(/\t/g,"\xA8A\xA8B"),o=o.replace(/¨B(.+?)¨A/g,function(_,C){for(var I=C,L=4-I.length%4,F=0;F<L;F++)I+=" ";return I}),o=o.replace(/¨A/g,"    "),o=o.replace(/¨B/g,""),o=f.converter._dispatch("detab.after",o,h,f),o}),t.subParser("ellipsis",function(o,h,f){"use strict";return h.ellipsis&&(o=f.converter._dispatch("ellipsis.before",o,h,f),o=o.replace(/\.\.\./g,"\u2026"),o=f.converter._dispatch("ellipsis.after",o,h,f)),o}),t.subParser("emoji",function(o,h,f){"use strict";if(!h.emoji)return o;o=f.converter._dispatch("emoji.before",o,h,f);var _=/:([\S]+?):/g;return o=o.replace(_,function(C,I){return t.helper.emojis.hasOwnProperty(I)?t.helper.emojis[I]:C}),o=f.converter._dispatch("emoji.after",o,h,f),o}),t.subParser("encodeAmpsAndAngles",function(o,h,f){"use strict";return o=f.converter._dispatch("encodeAmpsAndAngles.before",o,h,f),o=o.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,"&amp;"),o=o.replace(/<(?![a-z\/?$!])/gi,"&lt;"),o=o.replace(/</g,"&lt;"),o=o.replace(/>/g,"&gt;"),o=f.converter._dispatch("encodeAmpsAndAngles.after",o,h,f),o}),t.subParser("encodeBackslashEscapes",function(o,h,f){"use strict";return o=f.converter._dispatch("encodeBackslashEscapes.before",o,h,f),o=o.replace(/\\(\\)/g,t.helper.escapeCharactersCallback),o=o.replace(/\\([`*_{}\[\]()>#+.!~=|:-])/g,t.helper.escapeCharactersCallback),o=f.converter._dispatch("encodeBackslashEscapes.after",o,h,f),o}),t.subParser("encodeCode",function(o,h,f){"use strict";return o=f.converter._dispatch("encodeCode.before",o,h,f),o=o.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/([*_{}\[\]\\=~-])/g,t.helper.escapeCharactersCallback),o=f.converter._dispatch("encodeCode.after",o,h,f),o}),t.subParser("escapeSpecialCharsWithinTagAttributes",function(o,h,f){"use strict";o=f.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before",o,h,f);var _=/<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,C=/<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;return o=o.replace(_,function(I){return I.replace(/(.)<\/?code>(?=.)/g,"$1`").replace(/([\\`*_~=|])/g,t.helper.escapeCharactersCallback)}),o=o.replace(C,function(I){return I.replace(/([\\`*_~=|])/g,t.helper.escapeCharactersCallback)}),o=f.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after",o,h,f),o}),t.subParser("githubCodeBlocks",function(o,h,f){"use strict";return h.ghCodeBlocks?(o=f.converter._dispatch("githubCodeBlocks.before",o,h,f),o+="\xA80",o=o.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g,function(_,C,I,L){var F=h.omitExtraWLInCodeBlocks?"":`
`;return L=t.subParser("encodeCode")(L,h,f),L=t.subParser("detab")(L,h,f),L=L.replace(/^\n+/g,""),L=L.replace(/\n+$/g,""),L="<pre><code"+(I?' class="'+I+" language-"+I+'"':"")+">"+L+F+"</code></pre>",L=t.subParser("hashBlock")(L,h,f),`

\xA8G`+(f.ghCodeBlocks.push({text:_,codeblock:L})-1)+`G

`}),o=o.replace(/¨0/,""),f.converter._dispatch("githubCodeBlocks.after",o,h,f)):o}),t.subParser("hashBlock",function(o,h,f){"use strict";return o=f.converter._dispatch("hashBlock.before",o,h,f),o=o.replace(/(^\n+|\n+$)/g,""),o=`

\xA8K`+(f.gHtmlBlocks.push(o)-1)+`K

`,o=f.converter._dispatch("hashBlock.after",o,h,f),o}),t.subParser("hashCodeTags",function(o,h,f){"use strict";o=f.converter._dispatch("hashCodeTags.before",o,h,f);var _=function(C,I,L,F){var K=L+t.subParser("encodeCode")(I,h,f)+F;return"\xA8C"+(f.gHtmlSpans.push(K)-1)+"C"};return o=t.helper.replaceRecursiveRegExp(o,_,"<code\\b[^>]*>","</code>","gim"),o=f.converter._dispatch("hashCodeTags.after",o,h,f),o}),t.subParser("hashElement",function(o,h,f){"use strict";return function(_,C){var I=C;return I=I.replace(/\n\n/g,`
`),I=I.replace(/^\n/,""),I=I.replace(/\n+$/g,""),I=`

\xA8K`+(f.gHtmlBlocks.push(I)-1)+`K

`,I}}),t.subParser("hashHTMLBlocks",function(o,h,f){"use strict";o=f.converter._dispatch("hashHTMLBlocks.before",o,h,f);var _=["pre","div","h1","h2","h3","h4","h5","h6","blockquote","table","dl","ol","ul","script","noscript","form","fieldset","iframe","math","style","section","header","footer","nav","article","aside","address","audio","canvas","figure","hgroup","output","video","p"],C=function(x,U,z,$){var ee=x;return z.search(/\bmarkdown\b/)!==-1&&(ee=z+f.converter.makeHtml(U)+$),`

\xA8K`+(f.gHtmlBlocks.push(ee)-1)+`K

`};h.backslashEscapesHTMLTags&&(o=o.replace(/\\<(\/?[^>]+?)>/g,function(x,U){return"&lt;"+U+"&gt;"}));for(var I=0;I<_.length;++I)for(var L,F=new RegExp("^ {0,3}(<"+_[I]+"\\b[^>]*>)","im"),K="<"+_[I]+"\\b[^>]*>",W="</"+_[I]+">";(L=t.helper.regexIndexOf(o,F))!==-1;){var q=t.helper.splitAtIndex(o,L),G=t.helper.replaceRecursiveRegExp(q[1],C,K,W,"im");if(G===q[1])break;o=q[0].concat(G)}return o=o.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,t.subParser("hashElement")(o,h,f)),o=t.helper.replaceRecursiveRegExp(o,function(x){return`

\xA8K`+(f.gHtmlBlocks.push(x)-1)+`K

`},"^ {0,3}<!--","-->","gm"),o=o.replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,t.subParser("hashElement")(o,h,f)),o=f.converter._dispatch("hashHTMLBlocks.after",o,h,f),o}),t.subParser("hashHTMLSpans",function(o,h,f){"use strict";o=f.converter._dispatch("hashHTMLSpans.before",o,h,f);function _(C){return"\xA8C"+(f.gHtmlSpans.push(C)-1)+"C"}return o=o.replace(/<[^>]+?\/>/gi,function(C){return _(C)}),o=o.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g,function(C){return _(C)}),o=o.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g,function(C){return _(C)}),o=o.replace(/<[^>]+?>/gi,function(C){return _(C)}),o=f.converter._dispatch("hashHTMLSpans.after",o,h,f),o}),t.subParser("unhashHTMLSpans",function(o,h,f){"use strict";o=f.converter._dispatch("unhashHTMLSpans.before",o,h,f);for(var _=0;_<f.gHtmlSpans.length;++_){for(var C=f.gHtmlSpans[_],I=0;/¨C(\d+)C/.test(C);){var L=RegExp.$1;if(C=C.replace("\xA8C"+L+"C",f.gHtmlSpans[L]),I===10){console.error("maximum nesting of 10 spans reached!!!");break}++I}o=o.replace("\xA8C"+_+"C",C)}return o=f.converter._dispatch("unhashHTMLSpans.after",o,h,f),o}),t.subParser("hashPreCodeTags",function(o,h,f){"use strict";o=f.converter._dispatch("hashPreCodeTags.before",o,h,f);var _=function(C,I,L,F){var K=L+t.subParser("encodeCode")(I,h,f)+F;return`

\xA8G`+(f.ghCodeBlocks.push({text:C,codeblock:K})-1)+`G

`};return o=t.helper.replaceRecursiveRegExp(o,_,"^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>","^ {0,3}</code>\\s*</pre>","gim"),o=f.converter._dispatch("hashPreCodeTags.after",o,h,f),o}),t.subParser("headers",function(o,h,f){"use strict";o=f.converter._dispatch("headers.before",o,h,f);var _=isNaN(parseInt(h.headerLevelStart))?1:parseInt(h.headerLevelStart),C=h.smoothLivePreview?/^(.+)[ \t]*\n={2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n=+[ \t]*\n+/gm,I=h.smoothLivePreview?/^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n-+[ \t]*\n+/gm;o=o.replace(C,function(K,W){var q=t.subParser("spanGamut")(W,h,f),G=h.noHeaderId?"":' id="'+F(W)+'"',x=_,U="<h"+x+G+">"+q+"</h"+x+">";return t.subParser("hashBlock")(U,h,f)}),o=o.replace(I,function(K,W){var q=t.subParser("spanGamut")(W,h,f),G=h.noHeaderId?"":' id="'+F(W)+'"',x=_+1,U="<h"+x+G+">"+q+"</h"+x+">";return t.subParser("hashBlock")(U,h,f)});var L=h.requireSpaceBeforeHeadingText?/^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm:/^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;o=o.replace(L,function(K,W,q){var G=q;h.customizedHeaderId&&(G=q.replace(/\s?\{([^{]+?)}\s*$/,""));var x=t.subParser("spanGamut")(G,h,f),U=h.noHeaderId?"":' id="'+F(q)+'"',z=_-1+W.length,$="<h"+z+U+">"+x+"</h"+z+">";return t.subParser("hashBlock")($,h,f)});function F(K){var W,q;if(h.customizedHeaderId){var G=K.match(/\{([^{]+?)}\s*$/);G&&G[1]&&(K=G[1])}return W=K,t.helper.isString(h.prefixHeaderId)?q=h.prefixHeaderId:h.prefixHeaderId===!0?q="section-":q="",h.rawPrefixHeaderId||(W=q+W),h.ghCompatibleHeaderId?W=W.replace(/ /g,"-").replace(/&amp;/g,"").replace(/¨T/g,"").replace(/¨D/g,"").replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g,"").toLowerCase():h.rawHeaderId?W=W.replace(/ /g,"-").replace(/&amp;/g,"&").replace(/¨T/g,"\xA8").replace(/¨D/g,"$").replace(/["']/g,"-").toLowerCase():W=W.replace(/[^\w]/g,"").toLowerCase(),h.rawPrefixHeaderId&&(W=q+W),f.hashLinkCounts[W]?W=W+"-"+f.hashLinkCounts[W]++:f.hashLinkCounts[W]=1,W}return o=f.converter._dispatch("headers.after",o,h,f),o}),t.subParser("horizontalRule",function(o,h,f){"use strict";o=f.converter._dispatch("horizontalRule.before",o,h,f);var _=t.subParser("hashBlock")("<hr />",h,f);return o=o.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm,_),o=o.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm,_),o=o.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm,_),o=f.converter._dispatch("horizontalRule.after",o,h,f),o}),t.subParser("images",function(o,h,f){"use strict";o=f.converter._dispatch("images.before",o,h,f);var _=/!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,C=/!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,I=/!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,L=/!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,F=/!\[([^\[\]]+)]()()()()()/g;function K(q,G,x,U,z,$,ee,X){return U=U.replace(/\s/g,""),W(q,G,x,U,z,$,ee,X)}function W(q,G,x,U,z,$,ee,X){var ie=f.gUrls,ae=f.gTitles,me=f.gDimensions;if(x=x.toLowerCase(),X||(X=""),q.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)U="";else if(U===""||U===null)if((x===""||x===null)&&(x=G.toLowerCase().replace(/ ?\n/g," ")),U="#"+x,!t.helper.isUndefined(ie[x]))U=ie[x],t.helper.isUndefined(ae[x])||(X=ae[x]),t.helper.isUndefined(me[x])||(z=me[x].width,$=me[x].height);else return q;G=G.replace(/"/g,"&quot;").replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),U=U.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var re='<img src="'+U+'" alt="'+G+'"';return X&&t.helper.isString(X)&&(X=X.replace(/"/g,"&quot;").replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),re+=' title="'+X+'"'),z&&$&&(z=z==="*"?"auto":z,$=$==="*"?"auto":$,re+=' width="'+z+'"',re+=' height="'+$+'"'),re+=" />",re}return o=o.replace(L,W),o=o.replace(I,K),o=o.replace(C,W),o=o.replace(_,W),o=o.replace(F,W),o=f.converter._dispatch("images.after",o,h,f),o}),t.subParser("italicsAndBold",function(o,h,f){"use strict";o=f.converter._dispatch("italicsAndBold.before",o,h,f);function _(C,I,L){return I+C+L}return h.literalMidWordUnderscores?(o=o.replace(/\b___(\S[\s\S]*?)___\b/g,function(C,I){return _(I,"<strong><em>","</em></strong>")}),o=o.replace(/\b__(\S[\s\S]*?)__\b/g,function(C,I){return _(I,"<strong>","</strong>")}),o=o.replace(/\b_(\S[\s\S]*?)_\b/g,function(C,I){return _(I,"<em>","</em>")})):(o=o.replace(/___(\S[\s\S]*?)___/g,function(C,I){return/\S$/.test(I)?_(I,"<strong><em>","</em></strong>"):C}),o=o.replace(/__(\S[\s\S]*?)__/g,function(C,I){return/\S$/.test(I)?_(I,"<strong>","</strong>"):C}),o=o.replace(/_([^\s_][\s\S]*?)_/g,function(C,I){return/\S$/.test(I)?_(I,"<em>","</em>"):C})),h.literalMidWordAsterisks?(o=o.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g,function(C,I,L){return _(L,I+"<strong><em>","</em></strong>")}),o=o.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g,function(C,I,L){return _(L,I+"<strong>","</strong>")}),o=o.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g,function(C,I,L){return _(L,I+"<em>","</em>")})):(o=o.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g,function(C,I){return/\S$/.test(I)?_(I,"<strong><em>","</em></strong>"):C}),o=o.replace(/\*\*(\S[\s\S]*?)\*\*/g,function(C,I){return/\S$/.test(I)?_(I,"<strong>","</strong>"):C}),o=o.replace(/\*([^\s*][\s\S]*?)\*/g,function(C,I){return/\S$/.test(I)?_(I,"<em>","</em>"):C})),o=f.converter._dispatch("italicsAndBold.after",o,h,f),o}),t.subParser("lists",function(o,h,f){"use strict";function _(L,F){f.gListLevel++,L=L.replace(/\n{2,}$/,`
`),L+="\xA80";var K=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,W=/\n[ \t]*\n(?!¨0)/.test(L);return h.disableForced4SpacesIndentedSublists&&(K=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm),L=L.replace(K,function(q,G,x,U,z,$,ee){ee=ee&&ee.trim()!=="";var X=t.subParser("outdent")(z,h,f),ie="";return $&&h.tasklists&&(ie=' class="task-list-item" style="list-style-type: none;"',X=X.replace(/^[ \t]*\[(x|X| )?]/m,function(){var ae='<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';return ee&&(ae+=" checked"),ae+=">",ae})),X=X.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g,function(ae){return"\xA8A"+ae}),G||X.search(/\n{2,}/)>-1?(X=t.subParser("githubCodeBlocks")(X,h,f),X=t.subParser("blockGamut")(X,h,f)):(X=t.subParser("lists")(X,h,f),X=X.replace(/\n$/,""),X=t.subParser("hashHTMLBlocks")(X,h,f),X=X.replace(/\n\n+/g,`

`),W?X=t.subParser("paragraphs")(X,h,f):X=t.subParser("spanGamut")(X,h,f)),X=X.replace("\xA8A",""),X="<li"+ie+">"+X+`</li>
`,X}),L=L.replace(/¨0/g,""),f.gListLevel--,F&&(L=L.replace(/\s+$/,"")),L}function C(L,F){if(F==="ol"){var K=L.match(/^ *(\d+)\./);if(K&&K[1]!=="1")return' start="'+K[1]+'"'}return""}function I(L,F,K){var W=h.disableForced4SpacesIndentedSublists?/^ ?\d+\.[ \t]/gm:/^ {0,3}\d+\.[ \t]/gm,q=h.disableForced4SpacesIndentedSublists?/^ ?[*+-][ \t]/gm:/^ {0,3}[*+-][ \t]/gm,G=F==="ul"?W:q,x="";if(L.search(G)!==-1)(function z($){var ee=$.search(G),X=C(L,F);ee!==-1?(x+=`

<`+F+X+`>
`+_($.slice(0,ee),!!K)+"</"+F+`>
`,F=F==="ul"?"ol":"ul",G=F==="ul"?W:q,z($.slice(ee))):x+=`

<`+F+X+`>
`+_($,!!K)+"</"+F+`>
`})(L);else{var U=C(L,F);x=`

<`+F+U+`>
`+_(L,!!K)+"</"+F+`>
`}return x}return o=f.converter._dispatch("lists.before",o,h,f),o+="\xA80",f.gListLevel?o=o.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(L,F,K){var W=K.search(/[*+-]/g)>-1?"ul":"ol";return I(F,W,!0)}):o=o.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(L,F,K,W){var q=W.search(/[*+-]/g)>-1?"ul":"ol";return I(K,q,!1)}),o=o.replace(/¨0/,""),o=f.converter._dispatch("lists.after",o,h,f),o}),t.subParser("metadata",function(o,h,f){"use strict";if(!h.metadata)return o;o=f.converter._dispatch("metadata.before",o,h,f);function _(C){f.metadata.raw=C,C=C.replace(/&/g,"&amp;").replace(/"/g,"&quot;"),C=C.replace(/\n {4}/g," "),C.replace(/^([\S ]+): +([\s\S]+?)$/gm,function(I,L,F){return f.metadata.parsed[L]=F,""})}return o=o.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/,function(C,I,L){return _(L),"\xA8M"}),o=o.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/,function(C,I,L){return I&&(f.metadata.format=I),_(L),"\xA8M"}),o=o.replace(/¨M/g,""),o=f.converter._dispatch("metadata.after",o,h,f),o}),t.subParser("outdent",function(o,h,f){"use strict";return o=f.converter._dispatch("outdent.before",o,h,f),o=o.replace(/^(\t|[ ]{1,4})/gm,"\xA80"),o=o.replace(/¨0/g,""),o=f.converter._dispatch("outdent.after",o,h,f),o}),t.subParser("paragraphs",function(o,h,f){"use strict";o=f.converter._dispatch("paragraphs.before",o,h,f),o=o.replace(/^\n+/g,""),o=o.replace(/\n+$/g,"");for(var _=o.split(/\n{2,}/g),C=[],I=_.length,L=0;L<I;L++){var F=_[L];F.search(/¨(K|G)(\d+)\1/g)>=0?C.push(F):F.search(/\S/)>=0&&(F=t.subParser("spanGamut")(F,h,f),F=F.replace(/^([ \t]*)/g,"<p>"),F+="</p>",C.push(F))}for(I=C.length,L=0;L<I;L++){for(var K="",W=C[L],q=!1;/¨(K|G)(\d+)\1/.test(W);){var G=RegExp.$1,x=RegExp.$2;G==="K"?K=f.gHtmlBlocks[x]:q?K=t.subParser("encodeCode")(f.ghCodeBlocks[x].text,h,f):K=f.ghCodeBlocks[x].codeblock,K=K.replace(/\$/g,"$$$$"),W=W.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/,K),/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(W)&&(q=!0)}C[L]=W}return o=C.join(`
`),o=o.replace(/^\n+/g,""),o=o.replace(/\n+$/g,""),f.converter._dispatch("paragraphs.after",o,h,f)}),t.subParser("runExtension",function(o,h,f,_){"use strict";if(o.filter)h=o.filter(h,_.converter,f);else if(o.regex){var C=o.regex;C instanceof RegExp||(C=new RegExp(C,"g")),h=h.replace(C,o.replace)}return h}),t.subParser("spanGamut",function(o,h,f){"use strict";return o=f.converter._dispatch("spanGamut.before",o,h,f),o=t.subParser("codeSpans")(o,h,f),o=t.subParser("escapeSpecialCharsWithinTagAttributes")(o,h,f),o=t.subParser("encodeBackslashEscapes")(o,h,f),o=t.subParser("images")(o,h,f),o=t.subParser("anchors")(o,h,f),o=t.subParser("autoLinks")(o,h,f),o=t.subParser("simplifiedAutoLinks")(o,h,f),o=t.subParser("emoji")(o,h,f),o=t.subParser("underline")(o,h,f),o=t.subParser("italicsAndBold")(o,h,f),o=t.subParser("strikethrough")(o,h,f),o=t.subParser("ellipsis")(o,h,f),o=t.subParser("hashHTMLSpans")(o,h,f),o=t.subParser("encodeAmpsAndAngles")(o,h,f),h.simpleLineBreaks?/\n\n¨K/.test(o)||(o=o.replace(/\n+/g,`<br />
`)):o=o.replace(/  +\n/g,`<br />
`),o=f.converter._dispatch("spanGamut.after",o,h,f),o}),t.subParser("strikethrough",function(o,h,f){"use strict";function _(C){return h.simplifiedAutoLink&&(C=t.subParser("simplifiedAutoLinks")(C,h,f)),"<del>"+C+"</del>"}return h.strikethrough&&(o=f.converter._dispatch("strikethrough.before",o,h,f),o=o.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g,function(C,I){return _(I)}),o=f.converter._dispatch("strikethrough.after",o,h,f)),o}),t.subParser("stripLinkDefinitions",function(o,h,f){"use strict";var _=/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,C=/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm;o+="\xA80";var I=function(L,F,K,W,q,G,x){return F=F.toLowerCase(),o.toLowerCase().split(F).length-1<2?L:(K.match(/^data:.+?\/.+?;base64,/)?f.gUrls[F]=K.replace(/\s/g,""):f.gUrls[F]=t.subParser("encodeAmpsAndAngles")(K,h,f),G?G+x:(x&&(f.gTitles[F]=x.replace(/"|'/g,"&quot;")),h.parseImgDimensions&&W&&q&&(f.gDimensions[F]={width:W,height:q}),""))};return o=o.replace(C,I),o=o.replace(_,I),o=o.replace(/¨0/,""),o}),t.subParser("tables",function(o,h,f){"use strict";if(!h.tables)return o;var _=/^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,C=/^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm;function I(q){return/^:[ \t]*--*$/.test(q)?' style="text-align:left;"':/^--*[ \t]*:[ \t]*$/.test(q)?' style="text-align:right;"':/^:[ \t]*--*[ \t]*:$/.test(q)?' style="text-align:center;"':""}function L(q,G){var x="";return q=q.trim(),(h.tablesHeaderId||h.tableHeaderId)&&(x=' id="'+q.replace(/ /g,"_").toLowerCase()+'"'),q=t.subParser("spanGamut")(q,h,f),"<th"+x+G+">"+q+`</th>
`}function F(q,G){var x=t.subParser("spanGamut")(q,h,f);return"<td"+G+">"+x+`</td>
`}function K(q,G){for(var x=`<table>
<thead>
<tr>
`,U=q.length,z=0;z<U;++z)x+=q[z];for(x+=`</tr>
</thead>
<tbody>
`,z=0;z<G.length;++z){x+=`<tr>
`;for(var $=0;$<U;++$)x+=G[z][$];x+=`</tr>
`}return x+=`</tbody>
</table>
`,x}function W(q){var G,x=q.split(`
`);for(G=0;G<x.length;++G)/^ {0,3}\|/.test(x[G])&&(x[G]=x[G].replace(/^ {0,3}\|/,"")),/\|[ \t]*$/.test(x[G])&&(x[G]=x[G].replace(/\|[ \t]*$/,"")),x[G]=t.subParser("codeSpans")(x[G],h,f);var U=x[0].split("|").map(function(re){return re.trim()}),z=x[1].split("|").map(function(re){return re.trim()}),$=[],ee=[],X=[],ie=[];for(x.shift(),x.shift(),G=0;G<x.length;++G)x[G].trim()!==""&&$.push(x[G].split("|").map(function(re){return re.trim()}));if(U.length<z.length)return q;for(G=0;G<z.length;++G)X.push(I(z[G]));for(G=0;G<U.length;++G)t.helper.isUndefined(X[G])&&(X[G]=""),ee.push(L(U[G],X[G]));for(G=0;G<$.length;++G){for(var ae=[],me=0;me<ee.length;++me)t.helper.isUndefined($[G][me]),ae.push(F($[G][me],X[me]));ie.push(ae)}return K(ee,ie)}return o=f.converter._dispatch("tables.before",o,h,f),o=o.replace(/\\(\|)/g,t.helper.escapeCharactersCallback),o=o.replace(_,W),o=o.replace(C,W),o=f.converter._dispatch("tables.after",o,h,f),o}),t.subParser("underline",function(o,h,f){"use strict";return h.underline&&(o=f.converter._dispatch("underline.before",o,h,f),h.literalMidWordUnderscores?(o=o.replace(/\b___(\S[\s\S]*?)___\b/g,function(_,C){return"<u>"+C+"</u>"}),o=o.replace(/\b__(\S[\s\S]*?)__\b/g,function(_,C){return"<u>"+C+"</u>"})):(o=o.replace(/___(\S[\s\S]*?)___/g,function(_,C){return/\S$/.test(C)?"<u>"+C+"</u>":_}),o=o.replace(/__(\S[\s\S]*?)__/g,function(_,C){return/\S$/.test(C)?"<u>"+C+"</u>":_})),o=o.replace(/(_)/g,t.helper.escapeCharactersCallback),o=f.converter._dispatch("underline.after",o,h,f)),o}),t.subParser("unescapeSpecialChars",function(o,h,f){"use strict";return o=f.converter._dispatch("unescapeSpecialChars.before",o,h,f),o=o.replace(/¨E(\d+)E/g,function(_,C){var I=parseInt(C);return String.fromCharCode(I)}),o=f.converter._dispatch("unescapeSpecialChars.after",o,h,f),o}),t.subParser("makeMarkdown.blockquote",function(o,h){"use strict";var f="";if(o.hasChildNodes())for(var _=o.childNodes,C=_.length,I=0;I<C;++I){var L=t.subParser("makeMarkdown.node")(_[I],h);L!==""&&(f+=L)}return f=f.trim(),f="> "+f.split(`
`).join(`
> `),f}),t.subParser("makeMarkdown.codeBlock",function(o,h){"use strict";var f=o.getAttribute("language"),_=o.getAttribute("precodenum");return"```"+f+`
`+h.preList[_]+"\n```"}),t.subParser("makeMarkdown.codeSpan",function(o){"use strict";return"`"+o.innerHTML+"`"}),t.subParser("makeMarkdown.emphasis",function(o,h){"use strict";var f="";if(o.hasChildNodes()){f+="*";for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);f+="*"}return f}),t.subParser("makeMarkdown.header",function(o,h,f){"use strict";var _=new Array(f+1).join("#"),C="";if(o.hasChildNodes()){C=_+" ";for(var I=o.childNodes,L=I.length,F=0;F<L;++F)C+=t.subParser("makeMarkdown.node")(I[F],h)}return C}),t.subParser("makeMarkdown.hr",function(){"use strict";return"---"}),t.subParser("makeMarkdown.image",function(o){"use strict";var h="";return o.hasAttribute("src")&&(h+="!["+o.getAttribute("alt")+"](",h+="<"+o.getAttribute("src")+">",o.hasAttribute("width")&&o.hasAttribute("height")&&(h+=" ="+o.getAttribute("width")+"x"+o.getAttribute("height")),o.hasAttribute("title")&&(h+=' "'+o.getAttribute("title")+'"'),h+=")"),h}),t.subParser("makeMarkdown.links",function(o,h){"use strict";var f="";if(o.hasChildNodes()&&o.hasAttribute("href")){var _=o.childNodes,C=_.length;f="[";for(var I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);f+="](",f+="<"+o.getAttribute("href")+">",o.hasAttribute("title")&&(f+=' "'+o.getAttribute("title")+'"'),f+=")"}return f}),t.subParser("makeMarkdown.list",function(o,h,f){"use strict";var _="";if(!o.hasChildNodes())return"";for(var C=o.childNodes,I=C.length,L=o.getAttribute("start")||1,F=0;F<I;++F)if(!(typeof C[F].tagName>"u"||C[F].tagName.toLowerCase()!=="li")){var K="";f==="ol"?K=L.toString()+". ":K="- ",_+=K+t.subParser("makeMarkdown.listItem")(C[F],h),++L}return _+=`
<!-- -->
`,_.trim()}),t.subParser("makeMarkdown.listItem",function(o,h){"use strict";for(var f="",_=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);return/\n$/.test(f)?f=f.split(`
`).join(`
    `).replace(/^ {4}$/gm,"").replace(/\n\n+/g,`

`):f+=`
`,f}),t.subParser("makeMarkdown.node",function(o,h,f){"use strict";f=f||!1;var _="";if(o.nodeType===3)return t.subParser("makeMarkdown.txt")(o,h);if(o.nodeType===8)return"<!--"+o.data+`-->

`;if(o.nodeType!==1)return"";var C=o.tagName.toLowerCase();switch(C){case"h1":f||(_=t.subParser("makeMarkdown.header")(o,h,1)+`

`);break;case"h2":f||(_=t.subParser("makeMarkdown.header")(o,h,2)+`

`);break;case"h3":f||(_=t.subParser("makeMarkdown.header")(o,h,3)+`

`);break;case"h4":f||(_=t.subParser("makeMarkdown.header")(o,h,4)+`

`);break;case"h5":f||(_=t.subParser("makeMarkdown.header")(o,h,5)+`

`);break;case"h6":f||(_=t.subParser("makeMarkdown.header")(o,h,6)+`

`);break;case"p":f||(_=t.subParser("makeMarkdown.paragraph")(o,h)+`

`);break;case"blockquote":f||(_=t.subParser("makeMarkdown.blockquote")(o,h)+`

`);break;case"hr":f||(_=t.subParser("makeMarkdown.hr")(o,h)+`

`);break;case"ol":f||(_=t.subParser("makeMarkdown.list")(o,h,"ol")+`

`);break;case"ul":f||(_=t.subParser("makeMarkdown.list")(o,h,"ul")+`

`);break;case"precode":f||(_=t.subParser("makeMarkdown.codeBlock")(o,h)+`

`);break;case"pre":f||(_=t.subParser("makeMarkdown.pre")(o,h)+`

`);break;case"table":f||(_=t.subParser("makeMarkdown.table")(o,h)+`

`);break;case"code":_=t.subParser("makeMarkdown.codeSpan")(o,h);break;case"em":case"i":_=t.subParser("makeMarkdown.emphasis")(o,h);break;case"strong":case"b":_=t.subParser("makeMarkdown.strong")(o,h);break;case"del":_=t.subParser("makeMarkdown.strikethrough")(o,h);break;case"a":_=t.subParser("makeMarkdown.links")(o,h);break;case"img":_=t.subParser("makeMarkdown.image")(o,h);break;default:_=o.outerHTML+`

`}return _}),t.subParser("makeMarkdown.paragraph",function(o,h){"use strict";var f="";if(o.hasChildNodes())for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);return f=f.trim(),f}),t.subParser("makeMarkdown.pre",function(o,h){"use strict";var f=o.getAttribute("prenum");return"<pre>"+h.preList[f]+"</pre>"}),t.subParser("makeMarkdown.strikethrough",function(o,h){"use strict";var f="";if(o.hasChildNodes()){f+="~~";for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);f+="~~"}return f}),t.subParser("makeMarkdown.strong",function(o,h){"use strict";var f="";if(o.hasChildNodes()){f+="**";for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);f+="**"}return f}),t.subParser("makeMarkdown.table",function(o,h){"use strict";var f="",_=[[],[]],C=o.querySelectorAll("thead>tr>th"),I=o.querySelectorAll("tbody>tr"),L,F;for(L=0;L<C.length;++L){var K=t.subParser("makeMarkdown.tableCell")(C[L],h),W="---";if(C[L].hasAttribute("style")){var q=C[L].getAttribute("style").toLowerCase().replace(/\s/g,"");switch(q){case"text-align:left;":W=":---";break;case"text-align:right;":W="---:";break;case"text-align:center;":W=":---:";break}}_[0][L]=K.trim(),_[1][L]=W}for(L=0;L<I.length;++L){var G=_.push([])-1,x=I[L].getElementsByTagName("td");for(F=0;F<C.length;++F){var U=" ";typeof x[F]<"u"&&(U=t.subParser("makeMarkdown.tableCell")(x[F],h)),_[G].push(U)}}var z=3;for(L=0;L<_.length;++L)for(F=0;F<_[L].length;++F){var $=_[L][F].length;$>z&&(z=$)}for(L=0;L<_.length;++L){for(F=0;F<_[L].length;++F)L===1?_[L][F].slice(-1)===":"?_[L][F]=t.helper.padEnd(_[L][F].slice(-1),z-1,"-")+":":_[L][F]=t.helper.padEnd(_[L][F],z,"-"):_[L][F]=t.helper.padEnd(_[L][F],z);f+="| "+_[L].join(" | ")+` |
`}return f.trim()}),t.subParser("makeMarkdown.tableCell",function(o,h){"use strict";var f="";if(!o.hasChildNodes())return"";for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h,!0);return f.trim()}),t.subParser("makeMarkdown.txt",function(o){"use strict";var h=o.nodeValue;return h=h.replace(/ +/g," "),h=h.replace(/¨NBSP;/g," "),h=t.helper.unescapeHTMLEntities(h),h=h.replace(/([*_~|`])/g,"\\$1"),h=h.replace(/^(\s*)>/g,"\\$1>"),h=h.replace(/^#/gm,"\\#"),h=h.replace(/^(\s*)([-=]{3,})(\s*)$/,"$1\\$2$3"),h=h.replace(/^( {0,3}\d+)\./gm,"$1\\."),h=h.replace(/^( {0,3})([+-])/gm,"$1\\$2"),h=h.replace(/]([\s]*)\(/g,"\\]$1\\("),h=h.replace(/^ {0,3}\[([\S \t]*?)]:/gm,"\\[$1]:"),h});var P=this;typeof define=="function"&&define.amd?define(function(){"use strict";return t}):typeof Gs<"u"&&Gs.exports?Gs.exports=t:P.showdown=t}).call(nd)});var Sc=za((Ra,xu)=>{(function(e,t){typeof Ra=="object"&&typeof xu=="object"?xu.exports=t():typeof define=="function"&&define.amd?define("Flowbite",[],t):typeof Ra=="object"?Ra.Flowbite=t():e.Flowbite=t()})(self,function(){return function(){"use strict";var i={853:function(r,s,a){a.r(s),a.d(s,{afterMain:function(){return F},afterRead:function(){return C},afterWrite:function(){return q},applyStyles:function(){return ae},arrow:function(){return Si},auto:function(){return A},basePlacements:function(){return N},beforeMain:function(){return I},beforeRead:function(){return f},beforeWrite:function(){return K},bottom:function(){return c},clippingParents:function(){return g},computeStyles:function(){return et},createPopper:function(){return cs},createPopperBase:function(){return Kn},createPopperLite:function(){return fs},detectOverflow:function(){return Jt},end:function(){return d},eventListeners:function(){return Ft},flip:function(){return fi},hide:function(){return M},left:function(){return k},main:function(){return L},modifierPhases:function(){return G},offset:function(){return pe},placements:function(){return h},popper:function(){return E},popperGenerator:function(){return mn},popperOffsets:function(){return he},preventOverflow:function(){return ut},read:function(){return _},reference:function(){return P},right:function(){return v},start:function(){return y},top:function(){return u},variationPlacements:function(){return o},viewport:function(){return b},write:function(){return W}});var u="top",c="bottom",v="right",k="left",A="auto",N=[u,c,v,k],y="start",d="end",g="clippingParents",b="viewport",E="popper",P="reference",o=N.reduce(function(S,T){return S.concat([T+"-"+y,T+"-"+d])},[]),h=[].concat(N,[A]).reduce(function(S,T){return S.concat([T,T+"-"+y,T+"-"+d])},[]),f="beforeRead",_="read",C="afterRead",I="beforeMain",L="main",F="afterMain",K="beforeWrite",W="write",q="afterWrite",G=[f,_,C,I,L,F,K,W,q];function x(S){return S?(S.nodeName||"").toLowerCase():null}function U(S){if(S==null)return window;if(S.toString()!=="[object Window]"){var T=S.ownerDocument;return T&&T.defaultView||window}return S}function z(S){var T=U(S).Element;return S instanceof T||S instanceof Element}function $(S){var T=U(S).HTMLElement;return S instanceof T||S instanceof HTMLElement}function ee(S){if(typeof ShadowRoot>"u")return!1;var T=U(S).ShadowRoot;return S instanceof T||S instanceof ShadowRoot}function X(S){var T=S.state;Object.keys(T.elements).forEach(function(l){var m=T.styles[l]||{},p=T.attributes[l]||{},w=T.elements[l];!$(w)||!x(w)||(Object.assign(w.style,m),Object.keys(p).forEach(function(D){var R=p[D];R===!1?w.removeAttribute(D):w.setAttribute(D,R===!0?"":R)}))})}function ie(S){var T=S.state,l={popper:{position:T.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(T.elements.popper.style,l.popper),T.styles=l,T.elements.arrow&&Object.assign(T.elements.arrow.style,l.arrow),function(){Object.keys(T.elements).forEach(function(m){var p=T.elements[m],w=T.attributes[m]||{},D=Object.keys(T.styles.hasOwnProperty(m)?T.styles[m]:l[m]),R=D.reduce(function(O,j){return O[j]="",O},{});!$(p)||!x(p)||(Object.assign(p.style,R),Object.keys(w).forEach(function(O){p.removeAttribute(O)}))})}}var ae={name:"applyStyles",enabled:!0,phase:"write",fn:X,effect:ie,requires:["computeStyles"]};function me(S){return S.split("-")[0]}var re=Math.max,ye=Math.min,ne=Math.round;function xe(){var S=navigator.userAgentData;return S!=null&&S.brands?S.brands.map(function(T){return T.brand+"/"+T.version}).join(" "):navigator.userAgent}function je(){return!/^((?!chrome|android).)*safari/i.test(xe())}function He(S,T,l){T===void 0&&(T=!1),l===void 0&&(l=!1);var m=S.getBoundingClientRect(),p=1,w=1;T&&$(S)&&(p=S.offsetWidth>0&&ne(m.width)/S.offsetWidth||1,w=S.offsetHeight>0&&ne(m.height)/S.offsetHeight||1);var D=z(S)?U(S):window,R=D.visualViewport,O=!je()&&l,j=(m.left+(O&&R?R.offsetLeft:0))/p,B=(m.top+(O&&R?R.offsetTop:0))/w,V=m.width/p,J=m.height/w;return{width:V,height:J,top:B,right:j+V,bottom:B+J,left:j,x:j,y:B}}function st(S){var T=He(S),l=S.offsetWidth,m=S.offsetHeight;return Math.abs(T.width-l)<=1&&(l=T.width),Math.abs(T.height-m)<=1&&(m=T.height),{x:S.offsetLeft,y:S.offsetTop,width:l,height:m}}function At(S,T){var l=T.getRootNode&&T.getRootNode();if(S.contains(T))return!0;if(l&&ee(l)){var m=T;do{if(m&&S.isSameNode(m))return!0;m=m.parentNode||m.host}while(m)}return!1}function nt(S){return U(S).getComputedStyle(S)}function at(S){return["table","td","th"].indexOf(x(S))>=0}function ot(S){return((z(S)?S.ownerDocument:S.document)||window.document).documentElement}function Et(S){return x(S)==="html"?S:S.assignedSlot||S.parentNode||(ee(S)?S.host:null)||ot(S)}function di(S){return!$(S)||nt(S).position==="fixed"?null:S.offsetParent}function Vi(S){var T=/firefox/i.test(xe()),l=/Trident/i.test(xe());if(l&&$(S)){var m=nt(S);if(m.position==="fixed")return null}var p=Et(S);for(ee(p)&&(p=p.host);$(p)&&["html","body"].indexOf(x(p))<0;){var w=nt(p);if(w.transform!=="none"||w.perspective!=="none"||w.contain==="paint"||["transform","perspective"].indexOf(w.willChange)!==-1||T&&w.willChange==="filter"||T&&w.filter&&w.filter!=="none")return p;p=p.parentNode}return null}function Ct(S){for(var T=U(S),l=di(S);l&&at(l)&&nt(l).position==="static";)l=di(l);return l&&(x(l)==="html"||x(l)==="body"&&nt(l).position==="static")?T:l||Vi(S)||T}function Qt(S){return["top","bottom"].indexOf(S)>=0?"x":"y"}function ft(S,T,l){return re(S,ye(T,l))}function cn(S,T,l){var m=ft(S,T,l);return m>l?l:m}function ei(){return{top:0,right:0,bottom:0,left:0}}function $t(S){return Object.assign({},ei(),S)}function Nt(S,T){return T.reduce(function(l,m){return l[m]=S,l},{})}var ti=function(T,l){return T=typeof T=="function"?T(Object.assign({},l.rects,{placement:l.placement})):T,$t(typeof T!="number"?T:Nt(T,N))};function ii(S){var T,l=S.state,m=S.name,p=S.options,w=l.elements.arrow,D=l.modifiersData.popperOffsets,R=me(l.placement),O=Qt(R),j=[k,v].indexOf(R)>=0,B=j?"height":"width";if(!(!w||!D)){var V=ti(p.padding,l),J=st(w),Y=O==="y"?u:k,se=O==="y"?c:v,oe=l.rects.reference[B]+l.rects.reference[O]-D[O]-l.rects.popper[B],ue=D[O]-l.rects.reference[O],ge=Ct(w),_e=ge?O==="y"?ge.clientHeight||0:ge.clientWidth||0:0,Le=oe/2-ue/2,ke=V[Y],De=_e-J[B]-V[se],ve=_e/2-J[B]/2+Le,Te=ft(ke,ve,De),Re=O;l.modifiersData[m]=(T={},T[Re]=Te,T.centerOffset=Te-ve,T)}}function hn(S){var T=S.state,l=S.options,m=l.element,p=m===void 0?"[data-popper-arrow]":m;p!=null&&(typeof p=="string"&&(p=T.elements.popper.querySelector(p),!p)||At(T.elements.popper,p)&&(T.elements.arrow=p))}var Si={name:"arrow",enabled:!0,phase:"main",fn:ii,effect:hn,requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function qt(S){return S.split("-")[1]}var fn={top:"auto",right:"auto",bottom:"auto",left:"auto"};function pn(S){var T=S.x,l=S.y,m=window,p=m.devicePixelRatio||1;return{x:ne(T*p)/p||0,y:ne(l*p)/p||0}}function ci(S){var T,l=S.popper,m=S.popperRect,p=S.placement,w=S.variation,D=S.offsets,R=S.position,O=S.gpuAcceleration,j=S.adaptive,B=S.roundOffsets,V=S.isFixed,J=D.x,Y=J===void 0?0:J,se=D.y,oe=se===void 0?0:se,ue=typeof B=="function"?B({x:Y,y:oe}):{x:Y,y:oe};Y=ue.x,oe=ue.y;var ge=D.hasOwnProperty("x"),_e=D.hasOwnProperty("y"),Le=k,ke=u,De=window;if(j){var ve=Ct(l),Te="clientHeight",Re="clientWidth";if(ve===U(l)&&(ve=ot(l),nt(ve).position!=="static"&&R==="absolute"&&(Te="scrollHeight",Re="scrollWidth")),ve=ve,p===u||(p===k||p===v)&&w===d){ke=c;var Oe=V&&ve===De&&De.visualViewport?De.visualViewport.height:ve[Te];oe-=Oe-m.height,oe*=O?1:-1}if(p===k||(p===u||p===c)&&w===d){Le=v;var Pe=V&&ve===De&&De.visualViewport?De.visualViewport.width:ve[Re];Y-=Pe-m.width,Y*=O?1:-1}}var Ce=Object.assign({position:R},j&&fn),Me=B===!0?pn({x:Y,y:oe}):{x:Y,y:oe};if(Y=Me.x,oe=Me.y,O){var ze;return Object.assign({},Ce,(ze={},ze[ke]=_e?"0":"",ze[Le]=ge?"0":"",ze.transform=(De.devicePixelRatio||1)<=1?"translate("+Y+"px, "+oe+"px)":"translate3d("+Y+"px, "+oe+"px, 0)",ze))}return Object.assign({},Ce,(T={},T[ke]=_e?oe+"px":"",T[Le]=ge?Y+"px":"",T.transform="",T))}function Kt(S){var T=S.state,l=S.options,m=l.gpuAcceleration,p=m===void 0?!0:m,w=l.adaptive,D=w===void 0?!0:w,R=l.roundOffsets,O=R===void 0?!0:R;if(!1)var j;var B={placement:me(T.placement),variation:qt(T.placement),popper:T.elements.popper,popperRect:T.rects.popper,gpuAcceleration:p,isFixed:T.options.strategy==="fixed"};T.modifiersData.popperOffsets!=null&&(T.styles.popper=Object.assign({},T.styles.popper,ci(Object.assign({},B,{offsets:T.modifiersData.popperOffsets,position:T.options.strategy,adaptive:D,roundOffsets:O})))),T.modifiersData.arrow!=null&&(T.styles.arrow=Object.assign({},T.styles.arrow,ci(Object.assign({},B,{offsets:T.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:O})))),T.attributes.popper=Object.assign({},T.attributes.popper,{"data-popper-placement":T.placement})}var et={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:Kt,data:{}},Bt={passive:!0};function pt(S){var T=S.state,l=S.instance,m=S.options,p=m.scroll,w=p===void 0?!0:p,D=m.resize,R=D===void 0?!0:D,O=U(T.elements.popper),j=[].concat(T.scrollParents.reference,T.scrollParents.popper);return w&&j.forEach(function(B){B.addEventListener("scroll",l.update,Bt)}),R&&O.addEventListener("resize",l.update,Bt),function(){w&&j.forEach(function(B){B.removeEventListener("scroll",l.update,Bt)}),R&&O.removeEventListener("resize",l.update,Bt)}}var Ft={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:pt,data:{}},Di={left:"right",right:"left",bottom:"top",top:"bottom"};function St(S){return S.replace(/left|right|bottom|top/g,function(T){return Di[T]})}var Ui={start:"end",end:"start"};function Wi(S){return S.replace(/start|end/g,function(T){return Ui[T]})}function ni(S){var T=U(S),l=T.pageXOffset,m=T.pageYOffset;return{scrollLeft:l,scrollTop:m}}function gn(S){return He(ot(S)).left+ni(S).scrollLeft}function Ue(S,T){var l=U(S),m=ot(S),p=l.visualViewport,w=m.clientWidth,D=m.clientHeight,R=0,O=0;if(p){w=p.width,D=p.height;var j=je();(j||!j&&T==="fixed")&&(R=p.offsetLeft,O=p.offsetTop)}return{width:w,height:D,x:R+gn(S),y:O}}function ri(S){var T,l=ot(S),m=ni(S),p=(T=S.ownerDocument)==null?void 0:T.body,w=re(l.scrollWidth,l.clientWidth,p?p.scrollWidth:0,p?p.clientWidth:0),D=re(l.scrollHeight,l.clientHeight,p?p.scrollHeight:0,p?p.clientHeight:0),R=-m.scrollLeft+gn(S),O=-m.scrollTop;return nt(p||l).direction==="rtl"&&(R+=re(l.clientWidth,p?p.clientWidth:0)-w),{width:w,height:D,x:R,y:O}}function $i(S){var T=nt(S),l=T.overflow,m=T.overflowX,p=T.overflowY;return/auto|scroll|overlay|hidden/.test(l+p+m)}function Ti(S){return["html","body","#document"].indexOf(x(S))>=0?S.ownerDocument.body:$(S)&&$i(S)?S:Ti(Et(S))}function jt(S,T){var l;T===void 0&&(T=[]);var m=Ti(S),p=m===((l=S.ownerDocument)==null?void 0:l.body),w=U(m),D=p?[w].concat(w.visualViewport||[],$i(m)?m:[]):m,R=T.concat(D);return p?R:R.concat(jt(Et(D)))}function qi(S){return Object.assign({},S,{left:S.x,top:S.y,right:S.x+S.width,bottom:S.y+S.height})}function zn(S,T){var l=He(S,!1,T==="fixed");return l.top=l.top+S.clientTop,l.left=l.left+S.clientLeft,l.bottom=l.top+S.clientHeight,l.right=l.left+S.clientWidth,l.width=S.clientWidth,l.height=S.clientHeight,l.x=l.left,l.y=l.top,l}function gt(S,T,l){return T===b?qi(Ue(S,l)):z(T)?zn(T,l):qi(ri(ot(S)))}function hi(S){var T=jt(Et(S)),l=["absolute","fixed"].indexOf(nt(S).position)>=0,m=l&&$(S)?Ct(S):S;return z(m)?T.filter(function(p){return z(p)&&At(p,m)&&x(p)!=="body"}):[]}function Vn(S,T,l,m){var p=T==="clippingParents"?hi(S):[].concat(T),w=[].concat(p,[l]),D=w[0],R=w.reduce(function(O,j){var B=gt(S,j,m);return O.top=re(B.top,O.top),O.right=ye(B.right,O.right),O.bottom=ye(B.bottom,O.bottom),O.left=re(B.left,O.left),O},gt(S,D,m));return R.width=R.right-R.left,R.height=R.bottom-R.top,R.x=R.left,R.y=R.top,R}function Ki(S){var T=S.reference,l=S.element,m=S.placement,p=m?me(m):null,w=m?qt(m):null,D=T.x+T.width/2-l.width/2,R=T.y+T.height/2-l.height/2,O;switch(p){case u:O={x:D,y:T.y-l.height};break;case c:O={x:D,y:T.y+T.height};break;case v:O={x:T.x+T.width,y:R};break;case k:O={x:T.x-l.width,y:R};break;default:O={x:T.x,y:T.y}}var j=p?Qt(p):null;if(j!=null){var B=j==="y"?"height":"width";switch(w){case y:O[j]=O[j]-(T[B]/2-l[B]/2);break;case d:O[j]=O[j]+(T[B]/2-l[B]/2);break;default:}}return O}function Jt(S,T){T===void 0&&(T={});var l=T,m=l.placement,p=m===void 0?S.placement:m,w=l.strategy,D=w===void 0?S.strategy:w,R=l.boundary,O=R===void 0?g:R,j=l.rootBoundary,B=j===void 0?b:j,V=l.elementContext,J=V===void 0?E:V,Y=l.altBoundary,se=Y===void 0?!1:Y,oe=l.padding,ue=oe===void 0?0:oe,ge=$t(typeof ue!="number"?ue:Nt(ue,N)),_e=J===E?P:E,Le=S.rects.popper,ke=S.elements[se?_e:J],De=Vn(z(ke)?ke:ke.contextElement||ot(S.elements.popper),O,B,D),ve=He(S.elements.reference),Te=Ki({reference:ve,element:Le,strategy:"absolute",placement:p}),Re=qi(Object.assign({},Le,Te)),Oe=J===E?Re:ve,Pe={top:De.top-Oe.top+ge.top,bottom:Oe.bottom-De.bottom+ge.bottom,left:De.left-Oe.left+ge.left,right:Oe.right-De.right+ge.right},Ce=S.modifiersData.offset;if(J===E&&Ce){var Me=Ce[p];Object.keys(Pe).forEach(function(ze){var pi=[v,c].indexOf(ze)>=0?1:-1,gi=[u,c].indexOf(ze)>=0?"y":"x";Pe[ze]+=Me[gi]*pi})}return Pe}function Un(S,T){T===void 0&&(T={});var l=T,m=l.placement,p=l.boundary,w=l.rootBoundary,D=l.padding,R=l.flipVariations,O=l.allowedAutoPlacements,j=O===void 0?h:O,B=qt(m),V=B?R?o:o.filter(function(se){return qt(se)===B}):N,J=V.filter(function(se){return j.indexOf(se)>=0});J.length===0&&(J=V);var Y=J.reduce(function(se,oe){return se[oe]=Jt(S,{placement:oe,boundary:p,rootBoundary:w,padding:D})[me(oe)],se},{});return Object.keys(Y).sort(function(se,oe){return Y[se]-Y[oe]})}function Dt(S){if(me(S)===A)return[];var T=St(S);return[Wi(S),T,Wi(T)]}function si(S){var T=S.state,l=S.options,m=S.name;if(!T.modifiersData[m]._skip){for(var p=l.mainAxis,w=p===void 0?!0:p,D=l.altAxis,R=D===void 0?!0:D,O=l.fallbackPlacements,j=l.padding,B=l.boundary,V=l.rootBoundary,J=l.altBoundary,Y=l.flipVariations,se=Y===void 0?!0:Y,oe=l.allowedAutoPlacements,ue=T.options.placement,ge=me(ue),_e=ge===ue,Le=O||(_e||!se?[St(ue)]:Dt(ue)),ke=[ue].concat(Le).reduce(function(Gn,Yi){return Gn.concat(me(Yi)===A?Un(T,{placement:Yi,boundary:B,rootBoundary:V,padding:j,flipVariations:se,allowedAutoPlacements:oe}):Yi)},[]),De=T.rects.reference,ve=T.rects.popper,Te=new Map,Re=!0,Oe=ke[0],Pe=0;Pe<ke.length;Pe++){var Ce=ke[Pe],Me=me(Ce),ze=qt(Ce)===y,pi=[u,c].indexOf(Me)>=0,gi=pi?"width":"height",lt=Jt(T,{placement:Ce,boundary:B,rootBoundary:V,altBoundary:J,padding:j}),Fe=pi?ze?v:k:ze?c:u;De[gi]>ve[gi]&&(Fe=St(Fe));var Jn=St(Fe),mi=[];if(w&&mi.push(lt[Me]<=0),R&&mi.push(lt[Fe]<=0,lt[Jn]<=0),mi.every(function(Gn){return Gn})){Oe=Ce,Re=!1;break}Te.set(Ce,mi)}if(Re)for(var ps=se?3:1,Ba=function(Yi){var vr=ke.find(function(ms){var vn=Te.get(ms);if(vn)return vn.slice(0,Yi).every(function(Fa){return Fa})});if(vr)return Oe=vr,"break"},mr=ps;mr>0;mr--){var gs=Ba(mr);if(gs==="break")break}T.placement!==Oe&&(T.modifiersData[m]._skip=!0,T.placement=Oe,T.reset=!0)}}var fi={name:"flip",enabled:!0,phase:"main",fn:si,requiresIfExists:["offset"],data:{_skip:!1}};function Ji(S,T,l){return l===void 0&&(l={x:0,y:0}),{top:S.top-T.height-l.y,right:S.right-T.width+l.x,bottom:S.bottom-T.height+l.y,left:S.left-T.width-l.x}}function Gi(S){return[u,v,c,k].some(function(T){return S[T]>=0})}function Wn(S){var T=S.state,l=S.name,m=T.rects.reference,p=T.rects.popper,w=T.modifiersData.preventOverflow,D=Jt(T,{elementContext:"reference"}),R=Jt(T,{altBoundary:!0}),O=Ji(D,m),j=Ji(R,p,w),B=Gi(O),V=Gi(j);T.modifiersData[l]={referenceClippingOffsets:O,popperEscapeOffsets:j,isReferenceHidden:B,hasPopperEscaped:V},T.attributes.popper=Object.assign({},T.attributes.popper,{"data-popper-reference-hidden":B,"data-popper-escaped":V})}var M={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:Wn};function te(S,T,l){var m=me(S),p=[k,u].indexOf(m)>=0?-1:1,w=typeof l=="function"?l(Object.assign({},T,{placement:S})):l,D=w[0],R=w[1];return D=D||0,R=(R||0)*p,[k,v].indexOf(m)>=0?{x:R,y:D}:{x:D,y:R}}function Q(S){var T=S.state,l=S.options,m=S.name,p=l.offset,w=p===void 0?[0,0]:p,D=h.reduce(function(B,V){return B[V]=te(V,T.rects,w),B},{}),R=D[T.placement],O=R.x,j=R.y;T.modifiersData.popperOffsets!=null&&(T.modifiersData.popperOffsets.x+=O,T.modifiersData.popperOffsets.y+=j),T.modifiersData[m]=D}var pe={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:Q};function Ee(S){var T=S.state,l=S.name;T.modifiersData[l]=Ki({reference:T.rects.reference,element:T.rects.popper,strategy:"absolute",placement:T.placement})}var he={name:"popperOffsets",enabled:!0,phase:"read",fn:Ee,data:{}};function We(S){return S==="x"?"y":"x"}function Tt(S){var T=S.state,l=S.options,m=S.name,p=l.mainAxis,w=p===void 0?!0:p,D=l.altAxis,R=D===void 0?!1:D,O=l.boundary,j=l.rootBoundary,B=l.altBoundary,V=l.padding,J=l.tether,Y=J===void 0?!0:J,se=l.tetherOffset,oe=se===void 0?0:se,ue=Jt(T,{boundary:O,rootBoundary:j,padding:V,altBoundary:B}),ge=me(T.placement),_e=qt(T.placement),Le=!_e,ke=Qt(ge),De=We(ke),ve=T.modifiersData.popperOffsets,Te=T.rects.reference,Re=T.rects.popper,Oe=typeof oe=="function"?oe(Object.assign({},T.rects,{placement:T.placement})):oe,Pe=typeof Oe=="number"?{mainAxis:Oe,altAxis:Oe}:Object.assign({mainAxis:0,altAxis:0},Oe),Ce=T.modifiersData.offset?T.modifiersData.offset[T.placement]:null,Me={x:0,y:0};if(ve){if(w){var ze,pi=ke==="y"?u:k,gi=ke==="y"?c:v,lt=ke==="y"?"height":"width",Fe=ve[ke],Jn=Fe+ue[pi],mi=Fe-ue[gi],ps=Y?-Re[lt]/2:0,Ba=_e===y?Te[lt]:Re[lt],mr=_e===y?-Re[lt]:-Te[lt],gs=T.elements.arrow,Gn=Y&&gs?st(gs):{width:0,height:0},Yi=T.modifiersData["arrow#persistent"]?T.modifiersData["arrow#persistent"].padding:ei(),vr=Yi[pi],ms=Yi[gi],vn=ft(0,Te[lt],Gn[lt]),Fa=Le?Te[lt]/2-ps-vn-vr-Pe.mainAxis:Ba-vn-vr-Pe.mainAxis,Lc=Le?-Te[lt]/2+ps+vn+ms+Pe.mainAxis:mr+vn+ms+Pe.mainAxis,ja=T.elements.arrow&&Ct(T.elements.arrow),Rc=ja?ke==="y"?ja.clientTop||0:ja.clientLeft||0:0,Pu=(ze=Ce?.[ke])!=null?ze:0,Pc=Fe+Fa-Pu-Rc,Ic=Fe+Lc-Pu,Iu=ft(Y?ye(Jn,Pc):Jn,Fe,Y?re(mi,Ic):mi);ve[ke]=Iu,Me[ke]=Iu-Fe}if(R){var Ou,Oc=ke==="x"?u:k,Mc=ke==="x"?c:v,bn=ve[De],vs=De==="y"?"height":"width",Mu=bn+ue[Oc],Nu=bn-ue[Mc],Ha=[u,k].indexOf(ge)!==-1,Bu=(Ou=Ce?.[De])!=null?Ou:0,Fu=Ha?Mu:bn-Te[vs]-Re[vs]-Bu+Pe.altAxis,ju=Ha?bn+Te[vs]+Re[vs]-Bu-Pe.altAxis:Nu,Hu=Y&&Ha?cn(Fu,bn,ju):ft(Y?Fu:Mu,bn,Y?ju:Nu);ve[De]=Hu,Me[De]=Hu-bn}T.modifiersData[m]=Me}}var ut={name:"preventOverflow",enabled:!0,phase:"main",fn:Tt,requiresIfExists:["offset"]};function Ye(S){return{scrollLeft:S.scrollLeft,scrollTop:S.scrollTop}}function Xi(S){return S===U(S)||!$(S)?ni(S):Ye(S)}function $n(S){var T=S.getBoundingClientRect(),l=ne(T.width)/S.offsetWidth||1,m=ne(T.height)/S.offsetHeight||1;return l!==1||m!==1}function us(S,T,l){l===void 0&&(l=!1);var m=$(T),p=$(T)&&$n(T),w=ot(T),D=He(S,p,l),R={scrollLeft:0,scrollTop:0},O={x:0,y:0};return(m||!m&&!l)&&((x(T)!=="body"||$i(w))&&(R=Xi(T)),$(T)?(O=He(T,!0),O.x+=T.clientLeft,O.y+=T.clientTop):w&&(O.x=gn(w))),{x:D.left+R.scrollLeft-O.x,y:D.top+R.scrollTop-O.y,width:D.width,height:D.height}}function qn(S){var T=new Map,l=new Set,m=[];S.forEach(function(w){T.set(w.name,w)});function p(w){l.add(w.name);var D=[].concat(w.requires||[],w.requiresIfExists||[]);D.forEach(function(R){if(!l.has(R)){var O=T.get(R);O&&p(O)}}),m.push(w)}return S.forEach(function(w){l.has(w.name)||p(w)}),m}function Oa(S){var T=qn(S);return G.reduce(function(l,m){return l.concat(T.filter(function(p){return p.phase===m}))},[])}function Ma(S){var T;return function(){return T||(T=new Promise(function(l){Promise.resolve().then(function(){T=void 0,l(S())})})),T}}function Na(S){var T=S.reduce(function(l,m){var p=l[m.name];return l[m.name]=p?Object.assign({},p,m,{options:Object.assign({},p.options,m.options),data:Object.assign({},p.data,m.data)}):m,l},{});return Object.keys(T).map(function(l){return T[l]})}var Lu="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",Ru="Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.",ls={placement:"bottom",modifiers:[],strategy:"absolute"};function gr(){for(var S=arguments.length,T=new Array(S),l=0;l<S;l++)T[l]=arguments[l];return!T.some(function(m){return!(m&&typeof m.getBoundingClientRect=="function")})}function mn(S){S===void 0&&(S={});var T=S,l=T.defaultModifiers,m=l===void 0?[]:l,p=T.defaultOptions,w=p===void 0?ls:p;return function(R,O,j){j===void 0&&(j=w);var B={placement:"bottom",orderedModifiers:[],options:Object.assign({},ls,w),modifiersData:{},elements:{reference:R,popper:O},attributes:{},styles:{}},V=[],J=!1,Y={state:B,setOptions:function(ge){var _e=typeof ge=="function"?ge(B.options):ge;oe(),B.options=Object.assign({},w,B.options,_e),B.scrollParents={reference:z(R)?jt(R):R.contextElement?jt(R.contextElement):[],popper:jt(O)};var Le=Oa(Na([].concat(m,B.options.modifiers)));if(B.orderedModifiers=Le.filter(function(Ce){return Ce.enabled}),!1)var ke,De,ve,Te,Re,Oe,Pe;return se(),Y.update()},forceUpdate:function(){if(!J){var ge=B.elements,_e=ge.reference,Le=ge.popper;if(gr(_e,Le)){B.rects={reference:us(_e,Ct(Le),B.options.strategy==="fixed"),popper:st(Le)},B.reset=!1,B.placement=B.options.placement,B.orderedModifiers.forEach(function(Ce){return B.modifiersData[Ce.name]=Object.assign({},Ce.data)});for(var ke=0,De=0;De<B.orderedModifiers.length;De++){if(B.reset===!0){B.reset=!1,De=-1;continue}var ve=B.orderedModifiers[De],Te=ve.fn,Re=ve.options,Oe=Re===void 0?{}:Re,Pe=ve.name;typeof Te=="function"&&(B=Te({state:B,options:Oe,name:Pe,instance:Y})||B)}}}},update:Ma(function(){return new Promise(function(ue){Y.forceUpdate(),ue(B)})}),destroy:function(){oe(),J=!0}};if(!gr(R,O))return Y;Y.setOptions(j).then(function(ue){!J&&j.onFirstUpdate&&j.onFirstUpdate(ue)});function se(){B.orderedModifiers.forEach(function(ue){var ge=ue.name,_e=ue.options,Le=_e===void 0?{}:_e,ke=ue.effect;if(typeof ke=="function"){var De=ke({state:B,name:ge,instance:Y,options:Le}),ve=function(){};V.push(De||ve)}})}function oe(){V.forEach(function(ue){return ue()}),V=[]}return Y}}var Kn=mn(),ds=[Ft,he,et,ae,pe,fi,ut,Si,M],cs=mn({defaultModifiers:ds}),hs=[Ft,he,et,ae],fs=mn({defaultModifiers:hs})},554:function(r,s){Object.defineProperty(s,"__esModule",{value:!0});function a(l,m){(m==null||m>l.length)&&(m=l.length);for(var p=0,w=Array(m);p<m;p++)w[p]=l[p];return w}function u(l){if(Array.isArray(l))return l}function c(l){if(Array.isArray(l))return a(l)}function v(l){if(l===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return l}function k(l,m,p){return m=g(m),_(l,E()?Reflect.construct(m,p||[],g(l).constructor):m.apply(l,p))}function A(l,m){if(!(l instanceof m))throw new TypeError("Cannot call a class as a function")}function N(l,m){for(var p=0;p<m.length;p++){var w=m[p];w.enumerable=w.enumerable||!1,w.configurable=!0,"value"in w&&(w.writable=!0),Object.defineProperty(l,W(w.key),w)}}function y(l,m,p){return m&&N(l.prototype,m),p&&N(l,p),Object.defineProperty(l,"prototype",{writable:!1}),l}function d(){return d=typeof Reflect<"u"&&Reflect.get?Reflect.get.bind():function(l,m,p){var w=L(l,m);if(w){var D=Object.getOwnPropertyDescriptor(w,m);return D.get?D.get.call(arguments.length<3?l:p):D.value}},d.apply(null,arguments)}function g(l){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(m){return m.__proto__||Object.getPrototypeOf(m)},g(l)}function b(l,m){if(typeof m!="function"&&m!==null)throw new TypeError("Super expression must either be null or a function");l.prototype=Object.create(m&&m.prototype,{constructor:{value:l,writable:!0,configurable:!0}}),Object.defineProperty(l,"prototype",{writable:!1}),m&&C(l,m)}function E(){try{var l=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch{}return(E=function(){return!!l})()}function P(l){if(typeof Symbol<"u"&&l[Symbol.iterator]!=null||l["@@iterator"]!=null)return Array.from(l)}function o(l,m){var p=l==null?null:typeof Symbol<"u"&&l[Symbol.iterator]||l["@@iterator"];if(p!=null){var w,D,R,O,j=[],B=!0,V=!1;try{if(R=(p=p.call(l)).next,m===0){if(Object(p)!==p)return;B=!1}else for(;!(B=(w=R.call(p)).done)&&(j.push(w.value),j.length!==m);B=!0);}catch(J){V=!0,D=J}finally{try{if(!B&&p.return!=null&&(O=p.return(),Object(O)!==O))return}finally{if(V)throw D}}return j}}function h(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function f(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _(l,m){if(m&&(typeof m=="object"||typeof m=="function"))return m;if(m!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return v(l)}function C(l,m){return C=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(p,w){return p.__proto__=w,p},C(l,m)}function I(l,m){return u(l)||o(l,m)||G(l,m)||h()}function L(l,m){for(;!{}.hasOwnProperty.call(l,m)&&(l=g(l))!==null;);return l}function F(l){return c(l)||P(l)||G(l)||f()}function K(l,m){if(typeof l!="object"||!l)return l;var p=l[Symbol.toPrimitive];if(p!==void 0){var w=p.call(l,m||"default");if(typeof w!="object")return w;throw new TypeError("@@toPrimitive must return a primitive value.")}return(m==="string"?String:Number)(l)}function W(l){var m=K(l,"string");return typeof m=="symbol"?m:m+""}function q(l){return q=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(m){return typeof m}:function(m){return m&&typeof Symbol=="function"&&m.constructor===Symbol&&m!==Symbol.prototype?"symbol":typeof m},q(l)}function G(l,m){if(l){if(typeof l=="string")return a(l,m);var p={}.toString.call(l).slice(8,-1);return p==="Object"&&l.constructor&&(p=l.constructor.name),p==="Map"||p==="Set"?Array.from(l):p==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(p)?a(l,m):void 0}}function x(l,m){return Object.prototype.hasOwnProperty.call(l,m)}function U(l){return l[l.length-1]}function z(l){for(var m=arguments.length,p=new Array(m>1?m-1:0),w=1;w<m;w++)p[w-1]=arguments[w];return p.forEach(function(D){l.includes(D)||l.push(D)}),l}function $(l,m){return l?l.split(m):[]}function ee(l,m,p){var w=m===void 0||l>=m,D=p===void 0||l<=p;return w&&D}function X(l,m,p){return l<m?m:l>p?p:l}function ie(l,m){var p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},w=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,D=arguments.length>4&&arguments[4]!==void 0?arguments[4]:"",R=Object.keys(p).reduce(function(j,B){var V=p[B];return typeof V=="function"&&(V=V(w)),"".concat(j," ").concat(B,'="').concat(V,'"')},l);D+="<".concat(R,"></").concat(l,">");var O=w+1;return O<m?ie(l,m,p,O,D):D}function ae(l){return l.replace(/>\s+/g,">").replace(/\s+</,"<")}function me(l){return new Date(l).setHours(0,0,0,0)}function re(){return new Date().setHours(0,0,0,0)}function ye(){switch(arguments.length){case 0:return re();case 1:return me(arguments.length<=0?void 0:arguments[0])}var l=new Date(0);return l.setFullYear.apply(l,arguments),l.setHours(0,0,0,0)}function ne(l,m){var p=new Date(l);return p.setDate(p.getDate()+m)}function xe(l,m){return ne(l,m*7)}function je(l,m){var p=new Date(l),w=p.getMonth()+m,D=w%12;D<0&&(D+=12);var R=p.setMonth(w);return p.getMonth()!==D?p.setDate(0):R}function He(l,m){var p=new Date(l),w=p.getMonth(),D=p.setFullYear(p.getFullYear()+m);return w===1&&p.getMonth()===2?p.setDate(0):D}function st(l,m){return(l-m+7)%7}function At(l,m){var p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:0,w=new Date(l).getDay();return ne(l,st(m,p)-st(w,p))}function nt(l){var m=At(l,4,1),p=At(new Date(m).setMonth(0,4),4,1);return Math.round((m-p)/6048e5)+1}function at(l,m){var p=new Date(l).getFullYear();return Math.floor(p/m)*m}var ot=/dd?|DD?|mm?|MM?|yy?(?:yy)?/,Et=/[\s!-/:-@[-`{-~年月日]+/,di={},Vi={y:function(m,p){return new Date(m).setFullYear(parseInt(p,10))},m:function(m,p,w){var D=new Date(m),R=parseInt(p,10)-1;if(isNaN(R)){if(!p)return NaN;var O=p.toLowerCase(),j=function(V){return V.toLowerCase().startsWith(O)};if(R=w.monthsShort.findIndex(j),R<0&&(R=w.months.findIndex(j)),R<0)return NaN}return D.setMonth(R),D.getMonth()!==Qt(R)?D.setDate(0):D.getTime()},d:function(m,p){return new Date(m).setDate(parseInt(p,10))}},Ct={d:function(m){return m.getDate()},dd:function(m){return ft(m.getDate(),2)},D:function(m,p){return p.daysShort[m.getDay()]},DD:function(m,p){return p.days[m.getDay()]},m:function(m){return m.getMonth()+1},mm:function(m){return ft(m.getMonth()+1,2)},M:function(m,p){return p.monthsShort[m.getMonth()]},MM:function(m,p){return p.months[m.getMonth()]},y:function(m){return m.getFullYear()},yy:function(m){return ft(m.getFullYear(),2).slice(-2)},yyyy:function(m){return ft(m.getFullYear(),4)}};function Qt(l){return l>-1?l%12:Qt(l+12)}function ft(l,m){return l.toString().padStart(m,"0")}function cn(l){if(typeof l!="string")throw new Error("Invalid date format.");if(l in di)return di[l];var m=l.split(ot),p=l.match(new RegExp(ot,"g"));if(m.length===0||!p)throw new Error("Invalid date format.");var w=p.map(function(R){return Ct[R]}),D=Object.keys(Vi).reduce(function(R,O){var j=p.find(function(B){return B[0]!=="D"&&B[0].toLowerCase()===O});return j&&R.push(O),R},[]);return di[l]={parser:function(O,j){var B=O.split(Et).reduce(function(V,J,Y){if(J.length>0&&p[Y]){var se=p[Y][0];se==="M"?V.m=J:se!=="D"&&(V[se]=J)}return V},{});return D.reduce(function(V,J){var Y=Vi[J](V,B[J],j);return isNaN(Y)?V:Y},re())},formatter:function(O,j){var B=w.reduce(function(V,J,Y){return V+="".concat(m[Y]).concat(J(O,j))},"");return B+=U(m)}}}function ei(l,m,p){if(l instanceof Date||typeof l=="number"){var w=me(l);return isNaN(w)?void 0:w}if(l){if(l==="today")return re();if(m&&m.toValue){var D=m.toValue(l,m,p);return isNaN(D)?void 0:me(D)}return cn(m).parser(l,p)}}function $t(l,m,p){if(isNaN(l)||!l&&l!==0)return"";var w=typeof l=="number"?new Date(l):l;return m.toDisplay?m.toDisplay(w,m,p):cn(m).formatter(w,p)}var Nt=new WeakMap,ti=EventTarget.prototype,ii=ti.addEventListener,hn=ti.removeEventListener;function Si(l,m){var p=Nt.get(l);p||(p=[],Nt.set(l,p)),m.forEach(function(w){ii.call.apply(ii,F(w)),p.push(w)})}function qt(l){var m=Nt.get(l);m&&(m.forEach(function(p){hn.call.apply(hn,F(p))}),Nt.delete(l))}if(!Event.prototype.composedPath){var fn=function l(m){var p=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];p.push(m);var w;return m.parentNode?w=m.parentNode:m.host?w=m.host:m.defaultView&&(w=m.defaultView),w?l(w,p):p};Event.prototype.composedPath=function(){return fn(this.target)}}function pn(l,m,p){var w=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,D=l[w];return m(D)?D:D===p||!D.parentElement?void 0:pn(l,m,p,w+1)}function ci(l,m){var p=typeof m=="function"?m:function(w){return w.matches(m)};return pn(l.composedPath(),p,l.currentTarget)}var Kt={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear",titleFormat:"MM y"}},et={autohide:!1,beforeShowDay:null,beforeShowDecade:null,beforeShowMonth:null,beforeShowYear:null,calendarWeeks:!1,clearBtn:!1,dateDelimiter:",",datesDisabled:[],daysOfWeekDisabled:[],daysOfWeekHighlighted:[],defaultViewDate:void 0,disableTouchKeyboard:!1,format:"mm/dd/yyyy",language:"en",maxDate:null,maxNumberOfDates:1,maxView:3,minDate:null,nextArrow:'<svg class="w-4 h-4 rtl:rotate-180 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/></svg>',orientation:"auto",pickLevel:0,prevArrow:'<svg class="w-4 h-4 rtl:rotate-180 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5H1m0 0 4 4M1 5l4-4"/></svg>',showDaysOfWeek:!0,showOnClick:!0,showOnFocus:!0,startView:0,title:"",todayBtn:!1,todayBtnMode:0,todayHighlight:!1,updateOnBlur:!0,weekStart:0},Bt=document.createRange();function pt(l){return Bt.createContextualFragment(l)}function Ft(l){l.style.display!=="none"&&(l.style.display&&(l.dataset.styleDisplay=l.style.display),l.style.display="none")}function Di(l){l.style.display==="none"&&(l.dataset.styleDisplay?(l.style.display=l.dataset.styleDisplay,delete l.dataset.styleDisplay):l.style.display="")}function St(l){l.firstChild&&(l.removeChild(l.firstChild),St(l))}function Ui(l,m){St(l),m instanceof DocumentFragment?l.appendChild(m):typeof m=="string"?l.appendChild(pt(m)):typeof m.forEach=="function"&&m.forEach(function(p){l.appendChild(p)})}var Wi=et.language,ni=et.format,gn=et.weekStart;function Ue(l,m){return l.length<6&&m>=0&&m<7?z(l,m):l}function ri(l){return(l+6)%7}function $i(l,m,p,w){var D=ei(l,m,p);return D!==void 0?D:w}function Ti(l,m){var p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:3,w=parseInt(l,10);return w>=0&&w<=p?w:m}function jt(l,m){var p=Object.assign({},l),w={},D=m.constructor.locales,R=m.config||{},O=R.format,j=R.language,B=R.locale,V=R.maxDate,J=R.maxView,Y=R.minDate,se=R.pickLevel,oe=R.startView,ue=R.weekStart;if(p.language){var ge;if(p.language!==j&&(D[p.language]?ge=p.language:(ge=p.language.split("-")[0],D[ge]===void 0&&(ge=!1))),delete p.language,ge){j=w.language=ge;var _e=B||D[Wi];B=Object.assign({format:ni,weekStart:gn},D[Wi]),j!==Wi&&Object.assign(B,D[j]),w.locale=B,O===_e.format&&(O=w.format=B.format),ue===_e.weekStart&&(ue=w.weekStart=B.weekStart,w.weekEnd=ri(B.weekStart))}}if(p.format){var Le=typeof p.format.toDisplay=="function",ke=typeof p.format.toValue=="function",De=ot.test(p.format);(Le&&ke||De)&&(O=w.format=p.format),delete p.format}var ve=Y,Te=V;if(p.minDate!==void 0&&(ve=p.minDate===null?ye(0,0,1):$i(p.minDate,O,B,ve),delete p.minDate),p.maxDate!==void 0&&(Te=p.maxDate===null?void 0:$i(p.maxDate,O,B,Te),delete p.maxDate),Te<ve?(Y=w.minDate=Te,V=w.maxDate=ve):(Y!==ve&&(Y=w.minDate=ve),V!==Te&&(V=w.maxDate=Te)),p.datesDisabled&&(w.datesDisabled=p.datesDisabled.reduce(function(Fe,Jn){var mi=ei(Jn,O,B);return mi!==void 0?z(Fe,mi):Fe},[]),delete p.datesDisabled),p.defaultViewDate!==void 0){var Re=ei(p.defaultViewDate,O,B);Re!==void 0&&(w.defaultViewDate=Re),delete p.defaultViewDate}if(p.weekStart!==void 0){var Oe=Number(p.weekStart)%7;isNaN(Oe)||(ue=w.weekStart=Oe,w.weekEnd=ri(Oe)),delete p.weekStart}if(p.daysOfWeekDisabled&&(w.daysOfWeekDisabled=p.daysOfWeekDisabled.reduce(Ue,[]),delete p.daysOfWeekDisabled),p.daysOfWeekHighlighted&&(w.daysOfWeekHighlighted=p.daysOfWeekHighlighted.reduce(Ue,[]),delete p.daysOfWeekHighlighted),p.maxNumberOfDates!==void 0){var Pe=parseInt(p.maxNumberOfDates,10);Pe>=0&&(w.maxNumberOfDates=Pe,w.multidate=Pe!==1),delete p.maxNumberOfDates}p.dateDelimiter&&(w.dateDelimiter=String(p.dateDelimiter),delete p.dateDelimiter);var Ce=se;p.pickLevel!==void 0&&(Ce=Ti(p.pickLevel,2),delete p.pickLevel),Ce!==se&&(se=w.pickLevel=Ce);var Me=J;p.maxView!==void 0&&(Me=Ti(p.maxView,J),delete p.maxView),Me=se>Me?se:Me,Me!==J&&(J=w.maxView=Me);var ze=oe;if(p.startView!==void 0&&(ze=Ti(p.startView,ze),delete p.startView),ze<se?ze=se:ze>J&&(ze=J),ze!==oe&&(w.startView=ze),p.prevArrow){var pi=pt(p.prevArrow);pi.childNodes.length>0&&(w.prevArrow=pi.childNodes),delete p.prevArrow}if(p.nextArrow){var gi=pt(p.nextArrow);gi.childNodes.length>0&&(w.nextArrow=gi.childNodes),delete p.nextArrow}if(p.disableTouchKeyboard!==void 0&&(w.disableTouchKeyboard="ontouchstart"in document&&!!p.disableTouchKeyboard,delete p.disableTouchKeyboard),p.orientation){var lt=p.orientation.toLowerCase().split(/\s+/g);w.orientation={x:lt.find(function(Fe){return Fe==="left"||Fe==="right"})||"auto",y:lt.find(function(Fe){return Fe==="top"||Fe==="bottom"})||"auto"},delete p.orientation}if(p.todayBtnMode!==void 0){switch(p.todayBtnMode){case 0:case 1:w.todayBtnMode=p.todayBtnMode}delete p.todayBtnMode}return Object.keys(p).forEach(function(Fe){p[Fe]!==void 0&&x(et,Fe)&&(w[Fe]=p[Fe])}),w}var qi=ae(`<div class="datepicker hidden">
  <div class="datepicker-picker inline-block rounded-lg bg-white dark:bg-gray-700 shadow-lg p-4">
    <div class="datepicker-header">
      <div class="datepicker-title bg-white dark:bg-gray-700 dark:text-white px-2 py-3 text-center font-semibold"></div>
      <div class="datepicker-controls flex justify-between mb-2">
        <button type="button" class="bg-white dark:bg-gray-700 rounded-lg text-gray-500 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-600 hover:text-gray-900 dark:hover:text-white text-lg p-2.5 focus:outline-none focus:ring-2 focus:ring-gray-200 prev-btn"></button>
        <button type="button" class="text-sm rounded-lg text-gray-900 dark:text-white bg-white dark:bg-gray-700 font-semibold py-2.5 px-5 hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-200 view-switch"></button>
        <button type="button" class="bg-white dark:bg-gray-700 rounded-lg text-gray-500 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-600 hover:text-gray-900 dark:hover:text-white text-lg p-2.5 focus:outline-none focus:ring-2 focus:ring-gray-200 next-btn"></button>
      </div>
    </div>
    <div class="datepicker-main p-1"></div>
    <div class="datepicker-footer">
      <div class="datepicker-controls flex space-x-2 rtl:space-x-reverse mt-2">
        <button type="button" class="%buttonClass% today-btn text-white bg-blue-700 !bg-primary-700 dark:bg-blue-600 dark:!bg-primary-600 hover:bg-blue-800 hover:!bg-primary-800 dark:hover:bg-blue-700 dark:hover:!bg-primary-700 focus:ring-4 focus:ring-blue-300 focus:!ring-primary-300 font-medium rounded-lg text-sm px-5 py-2 text-center w-1/2"></button>
        <button type="button" class="%buttonClass% clear-btn text-gray-900 dark:text-white bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600 focus:ring-4 focus:ring-blue-300 focus:!ring-primary-300 font-medium rounded-lg text-sm px-5 py-2 text-center w-1/2"></button>
      </div>
    </div>
  </div>
</div>`),zn=ae(`<div class="days">
  <div class="days-of-week grid grid-cols-7 mb-1">`.concat(ie("span",7,{class:"dow block flex-1 leading-9 border-0 rounded-lg cursor-default text-center text-gray-900 font-semibold text-sm"}),`</div>
  <div class="datepicker-grid w-64 grid grid-cols-7">`).concat(ie("span",42,{class:"block flex-1 leading-9 border-0 rounded-lg cursor-default text-center text-gray-900 font-semibold text-sm h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400"}),`</div>
</div>`)),gt=ae(`<div class="calendar-weeks">
  <div class="days-of-week flex"><span class="dow h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400"></span></div>
  <div class="weeks">`.concat(ie("span",6,{class:"week block flex-1 leading-9 border-0 rounded-lg cursor-default text-center text-gray-900 font-semibold text-sm"}),`</div>
</div>`)),hi=function(){function l(m,p){A(this,l),Object.assign(this,p,{picker:m,element:pt('<div class="datepicker-view flex"></div>').firstChild,selected:[]}),this.init(this.picker.datepicker.config)}return y(l,[{key:"init",value:function(p){p.pickLevel!==void 0&&(this.isMinView=this.id===p.pickLevel),this.setOptions(p),this.updateFocus(),this.updateSelection()}},{key:"performBeforeHook",value:function(p,w,D){var R=this.beforeShow(new Date(D));switch(q(R)){case"boolean":R={enabled:R};break;case"string":R={classes:R}}if(R){if(R.enabled===!1&&(p.classList.add("disabled"),z(this.disabled,w)),R.classes){var O,j=R.classes.split(/\s+/);(O=p.classList).add.apply(O,F(j)),j.includes("disabled")&&z(this.disabled,w)}R.content&&Ui(p,R.content)}}}])}(),Vn=function(l){function m(p){return A(this,m),k(this,m,[p,{id:0,name:"days",cellClass:"day"}])}return b(m,l),y(m,[{key:"init",value:function(w){var D=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;if(D){var R=pt(zn).firstChild;this.dow=R.firstChild,this.grid=R.lastChild,this.element.appendChild(R)}d(g(m.prototype),"init",this).call(this,w)}},{key:"setOptions",value:function(w){var D=this,R;if(x(w,"minDate")&&(this.minDate=w.minDate),x(w,"maxDate")&&(this.maxDate=w.maxDate),w.datesDisabled&&(this.datesDisabled=w.datesDisabled),w.daysOfWeekDisabled&&(this.daysOfWeekDisabled=w.daysOfWeekDisabled,R=!0),w.daysOfWeekHighlighted&&(this.daysOfWeekHighlighted=w.daysOfWeekHighlighted),w.todayHighlight!==void 0&&(this.todayHighlight=w.todayHighlight),w.weekStart!==void 0&&(this.weekStart=w.weekStart,this.weekEnd=w.weekEnd,R=!0),w.locale){var O=this.locale=w.locale;this.dayNames=O.daysMin,this.switchLabelFormat=O.titleFormat,R=!0}if(w.beforeShowDay!==void 0&&(this.beforeShow=typeof w.beforeShowDay=="function"?w.beforeShowDay:void 0),w.calendarWeeks!==void 0)if(w.calendarWeeks&&!this.calendarWeeks){var j=pt(gt).firstChild;this.calendarWeeks={element:j,dow:j.firstChild,weeks:j.lastChild},this.element.insertBefore(j,this.element.firstChild)}else this.calendarWeeks&&!w.calendarWeeks&&(this.element.removeChild(this.calendarWeeks.element),this.calendarWeeks=null);w.showDaysOfWeek!==void 0&&(w.showDaysOfWeek?(Di(this.dow),this.calendarWeeks&&Di(this.calendarWeeks.dow)):(Ft(this.dow),this.calendarWeeks&&Ft(this.calendarWeeks.dow))),R&&Array.from(this.dow.children).forEach(function(B,V){var J=(D.weekStart+V)%7;B.textContent=D.dayNames[J],B.className=D.daysOfWeekDisabled.includes(J)?"dow disabled text-center h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400 cursor-not-allowed":"dow text-center h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400"})}},{key:"updateFocus",value:function(){var w=new Date(this.picker.viewDate),D=w.getFullYear(),R=w.getMonth(),O=ye(D,R,1),j=At(O,this.weekStart,this.weekStart);this.first=O,this.last=ye(D,R+1,0),this.start=j,this.focused=this.picker.viewDate}},{key:"updateSelection",value:function(){var w=this.picker.datepicker,D=w.dates,R=w.rangepicker;this.selected=D,R&&(this.range=R.dates)}},{key:"render",value:function(){var w=this;this.today=this.todayHighlight?re():void 0,this.disabled=F(this.datesDisabled);var D=$t(this.focused,this.switchLabelFormat,this.locale);if(this.picker.setViewSwitchLabel(D),this.picker.setPrevBtnDisabled(this.first<=this.minDate),this.picker.setNextBtnDisabled(this.last>=this.maxDate),this.calendarWeeks){var R=At(this.first,1,1);Array.from(this.calendarWeeks.weeks.children).forEach(function(O,j){O.textContent=nt(xe(R,j))})}Array.from(this.grid.children).forEach(function(O,j){var B=O.classList,V=ne(w.start,j),J=new Date(V),Y=J.getDay();if(O.className="datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ".concat(w.cellClass),O.dataset.date=V,O.textContent=J.getDate(),V<w.first?B.add("prev","text-gray-500","dark:text-white"):V>w.last&&B.add("next","text-gray-500","dark:text-white"),w.today===V&&B.add("today","bg-gray-100","dark:bg-gray-600"),(V<w.minDate||V>w.maxDate||w.disabled.includes(V))&&(B.add("disabled","cursor-not-allowed","text-gray-400","dark:text-gray-500"),B.remove("hover:bg-gray-100","dark:hover:bg-gray-600","text-gray-900","dark:text-white","cursor-pointer")),w.daysOfWeekDisabled.includes(Y)&&(B.add("disabled","cursor-not-allowed","text-gray-400","dark:text-gray-500"),B.remove("hover:bg-gray-100","dark:hover:bg-gray-600","text-gray-900","dark:text-white","cursor-pointer"),z(w.disabled,V)),w.daysOfWeekHighlighted.includes(Y)&&B.add("highlighted"),w.range){var se=I(w.range,2),oe=se[0],ue=se[1];V>oe&&V<ue&&(B.add("range","bg-gray-200","dark:bg-gray-600"),B.remove("rounded-lg","rounded-l-lg","rounded-r-lg")),V===oe&&(B.add("range-start","bg-gray-100","dark:bg-gray-600","rounded-l-lg"),B.remove("rounded-lg","rounded-r-lg")),V===ue&&(B.add("range-end","bg-gray-100","dark:bg-gray-600","rounded-r-lg"),B.remove("rounded-lg","rounded-l-lg"))}w.selected.includes(V)&&(B.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),B.remove("text-gray-900","text-gray-500","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600","dark:bg-gray-600","bg-gray-100","bg-gray-200")),V===w.focused&&B.add("focused"),w.beforeShow&&w.performBeforeHook(O,V,V)})}},{key:"refresh",value:function(){var w=this,D=this.range||[],R=I(D,2),O=R[0],j=R[1];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach(function(B){B.classList.remove("range","range-start","range-end","selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white","focused"),B.classList.add("text-gray-900","rounded-lg","dark:text-white")}),Array.from(this.grid.children).forEach(function(B){var V=Number(B.dataset.date),J=B.classList;J.remove("bg-gray-200","dark:bg-gray-600","rounded-l-lg","rounded-r-lg"),V>O&&V<j&&(J.add("range","bg-gray-200","dark:bg-gray-600"),J.remove("rounded-lg")),V===O&&(J.add("range-start","bg-gray-200","dark:bg-gray-600","rounded-l-lg"),J.remove("rounded-lg")),V===j&&(J.add("range-end","bg-gray-200","dark:bg-gray-600","rounded-r-lg"),J.remove("rounded-lg")),w.selected.includes(V)&&(J.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),J.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600","bg-gray-100","bg-gray-200","dark:bg-gray-600")),V===w.focused&&J.add("focused")})}},{key:"refreshFocus",value:function(){var w=Math.round((this.focused-this.start)/864e5);this.grid.querySelectorAll(".focused").forEach(function(D){D.classList.remove("focused")}),this.grid.children[w].classList.add("focused")}}])}(hi);function Ki(l,m){if(!(!l||!l[0]||!l[1])){var p=I(l,2),w=I(p[0],2),D=w[0],R=w[1],O=I(p[1],2),j=O[0],B=O[1];if(!(D>m||j<m))return[D===m?R:-1,j===m?B:12]}}var Jt=function(l){function m(p){return A(this,m),k(this,m,[p,{id:1,name:"months",cellClass:"month"}])}return b(m,l),y(m,[{key:"init",value:function(w){var D=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;D&&(this.grid=this.element,this.element.classList.add("months","datepicker-grid","w-64","grid","grid-cols-4"),this.grid.appendChild(pt(ie("span",12,{"data-month":function(O){return O}})))),d(g(m.prototype),"init",this).call(this,w)}},{key:"setOptions",value:function(w){if(w.locale&&(this.monthNames=w.locale.monthsShort),x(w,"minDate"))if(w.minDate===void 0)this.minYear=this.minMonth=this.minDate=void 0;else{var D=new Date(w.minDate);this.minYear=D.getFullYear(),this.minMonth=D.getMonth(),this.minDate=D.setDate(1)}if(x(w,"maxDate"))if(w.maxDate===void 0)this.maxYear=this.maxMonth=this.maxDate=void 0;else{var R=new Date(w.maxDate);this.maxYear=R.getFullYear(),this.maxMonth=R.getMonth(),this.maxDate=ye(this.maxYear,this.maxMonth+1,0)}w.beforeShowMonth!==void 0&&(this.beforeShow=typeof w.beforeShowMonth=="function"?w.beforeShowMonth:void 0)}},{key:"updateFocus",value:function(){var w=new Date(this.picker.viewDate);this.year=w.getFullYear(),this.focused=w.getMonth()}},{key:"updateSelection",value:function(){var w=this.picker.datepicker,D=w.dates,R=w.rangepicker;this.selected=D.reduce(function(O,j){var B=new Date(j),V=B.getFullYear(),J=B.getMonth();return O[V]===void 0?O[V]=[J]:z(O[V],J),O},{}),R&&R.dates&&(this.range=R.dates.map(function(O){var j=new Date(O);return isNaN(j)?void 0:[j.getFullYear(),j.getMonth()]}))}},{key:"render",value:function(){var w=this;this.disabled=[],this.picker.setViewSwitchLabel(this.year),this.picker.setPrevBtnDisabled(this.year<=this.minYear),this.picker.setNextBtnDisabled(this.year>=this.maxYear);var D=this.selected[this.year]||[],R=this.year<this.minYear||this.year>this.maxYear,O=this.year===this.minYear,j=this.year===this.maxYear,B=Ki(this.range,this.year);Array.from(this.grid.children).forEach(function(V,J){var Y=V.classList,se=ye(w.year,J,1);if(V.className="datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ".concat(w.cellClass),w.isMinView&&(V.dataset.date=se),V.textContent=w.monthNames[J],(R||O&&J<w.minMonth||j&&J>w.maxMonth)&&Y.add("disabled"),B){var oe=I(B,2),ue=oe[0],ge=oe[1];J>ue&&J<ge&&Y.add("range"),J===ue&&Y.add("range-start"),J===ge&&Y.add("range-end")}D.includes(J)&&(Y.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),Y.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")),J===w.focused&&Y.add("focused"),w.beforeShow&&w.performBeforeHook(V,J,se)})}},{key:"refresh",value:function(){var w=this,D=this.selected[this.year]||[],R=Ki(this.range,this.year)||[],O=I(R,2),j=O[0],B=O[1];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach(function(V){V.classList.remove("range","range-start","range-end","selected","bg-blue-700","!bg-primary-700","dark:bg-blue-600","dark:!bg-primary-700","dark:text-white","text-white","focused"),V.classList.add("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")}),Array.from(this.grid.children).forEach(function(V,J){var Y=V.classList;J>j&&J<B&&Y.add("range"),J===j&&Y.add("range-start"),J===B&&Y.add("range-end"),D.includes(J)&&(Y.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),Y.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")),J===w.focused&&Y.add("focused")})}},{key:"refreshFocus",value:function(){this.grid.querySelectorAll(".focused").forEach(function(w){w.classList.remove("focused")}),this.grid.children[this.focused].classList.add("focused")}}])}(hi);function Un(l){return F(l).reduce(function(m,p,w){return m+=w?p:p.toUpperCase()},"")}var Dt=function(l){function m(p,w){return A(this,m),k(this,m,[p,w])}return b(m,l),y(m,[{key:"init",value:function(w){var D=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;D&&(this.navStep=this.step*10,this.beforeShowOption="beforeShow".concat(Un(this.cellClass)),this.grid=this.element,this.element.classList.add(this.name,"datepicker-grid","w-64","grid","grid-cols-4"),this.grid.appendChild(pt(ie("span",12)))),d(g(m.prototype),"init",this).call(this,w)}},{key:"setOptions",value:function(w){if(x(w,"minDate")&&(w.minDate===void 0?this.minYear=this.minDate=void 0:(this.minYear=at(w.minDate,this.step),this.minDate=ye(this.minYear,0,1))),x(w,"maxDate")&&(w.maxDate===void 0?this.maxYear=this.maxDate=void 0:(this.maxYear=at(w.maxDate,this.step),this.maxDate=ye(this.maxYear,11,31))),w[this.beforeShowOption]!==void 0){var D=w[this.beforeShowOption];this.beforeShow=typeof D=="function"?D:void 0}}},{key:"updateFocus",value:function(){var w=new Date(this.picker.viewDate),D=at(w,this.navStep),R=D+9*this.step;this.first=D,this.last=R,this.start=D-this.step,this.focused=at(w,this.step)}},{key:"updateSelection",value:function(){var w=this,D=this.picker.datepicker,R=D.dates,O=D.rangepicker;this.selected=R.reduce(function(j,B){return z(j,at(B,w.step))},[]),O&&O.dates&&(this.range=O.dates.map(function(j){if(j!==void 0)return at(j,w.step)}))}},{key:"render",value:function(){var w=this;this.disabled=[],this.picker.setViewSwitchLabel("".concat(this.first,"-").concat(this.last)),this.picker.setPrevBtnDisabled(this.first<=this.minYear),this.picker.setNextBtnDisabled(this.last>=this.maxYear),Array.from(this.grid.children).forEach(function(D,R){var O=D.classList,j=w.start+R*w.step,B=ye(j,0,1);if(D.className="datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ".concat(w.cellClass),w.isMinView&&(D.dataset.date=B),D.textContent=D.dataset.year=j,R===0?O.add("prev"):R===11&&O.add("next"),(j<w.minYear||j>w.maxYear)&&O.add("disabled"),w.range){var V=I(w.range,2),J=V[0],Y=V[1];j>J&&j<Y&&O.add("range"),j===J&&O.add("range-start"),j===Y&&O.add("range-end")}w.selected.includes(j)&&(O.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),O.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")),j===w.focused&&O.add("focused"),w.beforeShow&&w.performBeforeHook(D,j,B)})}},{key:"refresh",value:function(){var w=this,D=this.range||[],R=I(D,2),O=R[0],j=R[1];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach(function(B){B.classList.remove("range","range-start","range-end","selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark!bg-primary-600","dark:text-white","focused")}),Array.from(this.grid.children).forEach(function(B){var V=Number(B.textContent),J=B.classList;V>O&&V<j&&J.add("range"),V===O&&J.add("range-start"),V===j&&J.add("range-end"),w.selected.includes(V)&&(J.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),J.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")),V===w.focused&&J.add("focused")})}},{key:"refreshFocus",value:function(){var w=Math.round((this.focused-this.start)/this.step);this.grid.querySelectorAll(".focused").forEach(function(D){D.classList.remove("focused")}),this.grid.children[w].classList.add("focused")}}])}(hi);function si(l,m){var p={date:l.getDate(),viewDate:new Date(l.picker.viewDate),viewId:l.picker.currentView.id,datepicker:l};l.element.dispatchEvent(new CustomEvent(m,{detail:p}))}function fi(l,m){var p=l.config,w=p.minDate,D=p.maxDate,R=l.picker,O=R.currentView,j=R.viewDate,B;switch(O.id){case 0:B=je(j,m);break;case 1:B=He(j,m);break;default:B=He(j,m*O.navStep)}B=X(B,w,D),l.picker.changeFocus(B).render()}function Ji(l){var m=l.picker.currentView.id;m!==l.config.maxView&&l.picker.changeView(m+1).render()}function Gi(l){l.config.updateOnBlur?l.update({autohide:!0}):(l.refresh("input"),l.hide())}function Wn(l,m){var p=l.picker,w=new Date(p.viewDate),D=p.currentView.id,R=D===1?je(w,m-w.getMonth()):He(w,m-w.getFullYear());p.changeFocus(R).changeView(D-1).render()}function M(l){var m=l.picker,p=re();if(l.config.todayBtnMode===1){if(l.config.autohide){l.setDate(p);return}l.setDate(p,{render:!1}),m.update()}m.viewDate!==p&&m.changeFocus(p),m.changeView(0).render()}function te(l){l.setDate({clear:!0})}function Q(l){Ji(l)}function pe(l){fi(l,-1)}function Ee(l){fi(l,1)}function he(l,m){var p=ci(m,".datepicker-cell");if(!(!p||p.classList.contains("disabled"))){var w=l.picker.currentView,D=w.id,R=w.isMinView;R?l.setDate(Number(p.dataset.date)):D===1?Wn(l,Number(p.dataset.month)):Wn(l,Number(p.dataset.year))}}function We(l){!l.inline&&!l.config.disableTouchKeyboard&&l.inputField.focus()}function Tt(l,m){if(m.title!==void 0&&(m.title?(l.controls.title.textContent=m.title,Di(l.controls.title)):(l.controls.title.textContent="",Ft(l.controls.title))),m.prevArrow){var p=l.controls.prevBtn;St(p),m.prevArrow.forEach(function(j){p.appendChild(j.cloneNode(!0))})}if(m.nextArrow){var w=l.controls.nextBtn;St(w),m.nextArrow.forEach(function(j){w.appendChild(j.cloneNode(!0))})}if(m.locale&&(l.controls.todayBtn.textContent=m.locale.today,l.controls.clearBtn.textContent=m.locale.clear),m.todayBtn!==void 0&&(m.todayBtn?Di(l.controls.todayBtn):Ft(l.controls.todayBtn)),x(m,"minDate")||x(m,"maxDate")){var D=l.datepicker.config,R=D.minDate,O=D.maxDate;l.controls.todayBtn.disabled=!ee(re(),R,O)}m.clearBtn!==void 0&&(m.clearBtn?Di(l.controls.clearBtn):Ft(l.controls.clearBtn))}function ut(l){var m=l.dates,p=l.config,w=m.length>0?U(m):p.defaultViewDate;return X(w,p.minDate,p.maxDate)}function Ye(l,m){var p=new Date(l.viewDate),w=new Date(m),D=l.currentView,R=D.id,O=D.year,j=D.first,B=D.last,V=w.getFullYear();switch(l.viewDate=m,V!==p.getFullYear()&&si(l.datepicker,"changeYear"),w.getMonth()!==p.getMonth()&&si(l.datepicker,"changeMonth"),R){case 0:return m<j||m>B;case 1:return V!==O;default:return V<j||V>B}}function Xi(l){return window.getComputedStyle(l).direction}var $n=function(){function l(m){A(this,l),this.datepicker=m;var p=qi.replace(/%buttonClass%/g,m.config.buttonClass),w=this.element=pt(p).firstChild,D=I(w.firstChild.children,3),R=D[0],O=D[1],j=D[2],B=R.firstElementChild,V=I(R.lastElementChild.children,3),J=V[0],Y=V[1],se=V[2],oe=I(j.firstChild.children,2),ue=oe[0],ge=oe[1],_e={title:B,prevBtn:J,viewSwitch:Y,nextBtn:se,todayBtn:ue,clearBtn:ge};this.main=O,this.controls=_e;var Le=m.inline?"inline":"dropdown";w.classList.add("datepicker-".concat(Le)),Le==="dropdown"&&w.classList.add("dropdown","absolute","top-0","left-0","z-50","pt-2"),Tt(this,m.config),this.viewDate=ut(m),Si(m,[[w,"click",We.bind(null,m),{capture:!0}],[O,"click",he.bind(null,m)],[_e.viewSwitch,"click",Q.bind(null,m)],[_e.prevBtn,"click",pe.bind(null,m)],[_e.nextBtn,"click",Ee.bind(null,m)],[_e.todayBtn,"click",M.bind(null,m)],[_e.clearBtn,"click",te.bind(null,m)]]),this.views=[new Vn(this),new Jt(this),new Dt(this,{id:2,name:"years",cellClass:"year",step:1}),new Dt(this,{id:3,name:"decades",cellClass:"decade",step:10})],this.currentView=this.views[m.config.startView],this.currentView.render(),this.main.appendChild(this.currentView.element),m.config.container.appendChild(this.element)}return y(l,[{key:"setOptions",value:function(p){Tt(this,p),this.views.forEach(function(w){w.init(p,!1)}),this.currentView.render()}},{key:"detach",value:function(){this.datepicker.config.container.removeChild(this.element)}},{key:"show",value:function(){if(!this.active){this.element.classList.add("active","block"),this.element.classList.remove("hidden"),this.active=!0;var p=this.datepicker;if(!p.inline){var w=Xi(p.inputField);w!==Xi(p.config.container)?this.element.dir=w:this.element.dir&&this.element.removeAttribute("dir"),this.place(),p.config.disableTouchKeyboard&&p.inputField.blur()}si(p,"show")}}},{key:"hide",value:function(){this.active&&(this.datepicker.exitEditMode(),this.element.classList.remove("active","block"),this.element.classList.add("active","block","hidden"),this.active=!1,si(this.datepicker,"hide"))}},{key:"place",value:function(){var p=this.element,w=p.classList,D=p.style,R=this.datepicker,O=R.config,j=R.inputField,B=O.container,V=this.element.getBoundingClientRect(),J=V.width,Y=V.height,se=B.getBoundingClientRect(),oe=se.left,ue=se.top,ge=se.width,_e=j.getBoundingClientRect(),Le=_e.left,ke=_e.top,De=_e.width,ve=_e.height,Te=O.orientation,Re=Te.x,Oe=Te.y,Pe,Ce,Me;B===document.body?(Pe=window.scrollY,Ce=Le+window.scrollX,Me=ke+Pe):(Pe=B.scrollTop,Ce=Le-oe,Me=ke-ue+Pe),Re==="auto"&&(Ce<0?(Re="left",Ce=10):Ce+J>ge?Re="right":Re=Xi(j)==="rtl"?"right":"left"),Re==="right"&&(Ce-=J-De),Oe==="auto"&&(Oe=Me-Y<Pe?"bottom":"top"),Oe==="top"?Me-=Y:Me+=ve,w.remove("datepicker-orient-top","datepicker-orient-bottom","datepicker-orient-right","datepicker-orient-left"),w.add("datepicker-orient-".concat(Oe),"datepicker-orient-".concat(Re)),D.top=Me&&"".concat(Me,"px"),D.left=Ce&&"".concat(Ce,"px")}},{key:"setViewSwitchLabel",value:function(p){this.controls.viewSwitch.textContent=p}},{key:"setPrevBtnDisabled",value:function(p){this.controls.prevBtn.disabled=p}},{key:"setNextBtnDisabled",value:function(p){this.controls.nextBtn.disabled=p}},{key:"changeView",value:function(p){var w=this.currentView,D=this.views[p];return D.id!==w.id&&(this.currentView=D,this._renderMethod="render",si(this.datepicker,"changeView"),this.main.replaceChild(D.element,w.element)),this}},{key:"changeFocus",value:function(p){return this._renderMethod=Ye(this,p)?"render":"refreshFocus",this.views.forEach(function(w){w.updateFocus()}),this}},{key:"update",value:function(){var p=ut(this.datepicker);return this._renderMethod=Ye(this,p)?"render":"refresh",this.views.forEach(function(w){w.updateFocus(),w.updateSelection()}),this}},{key:"render",value:function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0,w=p&&this._renderMethod||"render";delete this._renderMethod,this.currentView[w]()}}])}();function us(l,m,p,w,D,R){if(ee(l,D,R)){if(w(l)){var O=m(l,p);return us(O,m,p,w,D,R)}return l}}function qn(l,m,p,w){var D=l.picker,R=D.currentView,O=R.step||1,j=D.viewDate,B,V;switch(R.id){case 0:w?j=ne(j,p*7):m.ctrlKey||m.metaKey?j=He(j,p):j=ne(j,p),B=ne,V=function(Y){return R.disabled.includes(Y)};break;case 1:j=je(j,w?p*4:p),B=je,V=function(Y){var se=new Date(Y),oe=R.year,ue=R.disabled;return se.getFullYear()===oe&&ue.includes(se.getMonth())};break;default:j=He(j,p*(w?4:1)*O),B=He,V=function(Y){return R.disabled.includes(at(Y,O))}}j=us(j,B,p<0?-O:O,V,R.minDate,R.maxDate),j!==void 0&&D.changeFocus(j).render()}function Oa(l,m){if(m.key==="Tab"){Gi(l);return}var p=l.picker,w=p.currentView,D=w.id,R=w.isMinView;if(p.active)if(l.editMode)switch(m.key){case"Escape":p.hide();break;case"Enter":l.exitEditMode({update:!0,autohide:l.config.autohide});break;default:return}else switch(m.key){case"Escape":p.hide();break;case"ArrowLeft":if(m.ctrlKey||m.metaKey)fi(l,-1);else if(m.shiftKey){l.enterEditMode();return}else qn(l,m,-1,!1);break;case"ArrowRight":if(m.ctrlKey||m.metaKey)fi(l,1);else if(m.shiftKey){l.enterEditMode();return}else qn(l,m,1,!1);break;case"ArrowUp":if(m.ctrlKey||m.metaKey)Ji(l);else if(m.shiftKey){l.enterEditMode();return}else qn(l,m,-1,!0);break;case"ArrowDown":if(m.shiftKey&&!m.ctrlKey&&!m.metaKey){l.enterEditMode();return}qn(l,m,1,!0);break;case"Enter":R?l.setDate(p.viewDate):p.changeView(D-1).render();break;case"Backspace":case"Delete":l.enterEditMode();return;default:m.key.length===1&&!m.ctrlKey&&!m.metaKey&&l.enterEditMode();return}else switch(m.key){case"ArrowDown":case"Escape":p.show();break;case"Enter":l.update();break;default:return}m.preventDefault(),m.stopPropagation()}function Ma(l){l.config.showOnFocus&&!l._showing&&l.show()}function Na(l,m){var p=m.target;(l.picker.active||l.config.showOnClick)&&(p._active=p===document.activeElement,p._clicking=setTimeout(function(){delete p._active,delete p._clicking},2e3))}function Lu(l,m){var p=m.target;p._clicking&&(clearTimeout(p._clicking),delete p._clicking,p._active&&l.enterEditMode(),delete p._active,l.config.showOnClick&&l.show())}function Ru(l,m){m.clipboardData.types.includes("text/plain")&&l.enterEditMode()}function ls(l,m){var p=l.element;if(p===document.activeElement){var w=l.picker.element;ci(m,function(D){return D===p||D===w})||Gi(l)}}function gr(l,m){return l.map(function(p){return $t(p,m.format,m.locale)}).join(m.dateDelimiter)}function mn(l,m){var p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1,w=l.config,D=l.dates,R=l.rangepicker;if(m.length===0)return p?[]:void 0;var O=R&&l===R.datepickers[1],j=m.reduce(function(B,V){var J=ei(V,w.format,w.locale);if(J===void 0)return B;if(w.pickLevel>0){var Y=new Date(J);w.pickLevel===1?J=O?Y.setMonth(Y.getMonth()+1,0):Y.setDate(1):J=O?Y.setFullYear(Y.getFullYear()+1,0,0):Y.setMonth(0,1)}return ee(J,w.minDate,w.maxDate)&&!B.includes(J)&&!w.datesDisabled.includes(J)&&!w.daysOfWeekDisabled.includes(new Date(J).getDay())&&B.push(J),B},[]);if(j.length!==0)return w.multidate&&!p&&(j=j.reduce(function(B,V){return D.includes(V)||B.push(V),B},D.filter(function(B){return!j.includes(B)}))),w.maxNumberOfDates&&j.length>w.maxNumberOfDates?j.slice(w.maxNumberOfDates*-1):j}function Kn(l){var m=arguments.length>1&&arguments[1]!==void 0?arguments[1]:3,p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0,w=l.config,D=l.picker,R=l.inputField;if(m&2){var O=D.active?w.pickLevel:w.startView;D.update().changeView(O).render(p)}m&1&&R&&(R.value=gr(l.dates,w))}function ds(l,m,p){var w=p.clear,D=p.render,R=p.autohide;D===void 0&&(D=!0),D?R===void 0&&(R=l.config.autohide):R=!1;var O=mn(l,m,w);O&&(O.toString()!==l.dates.toString()?(l.dates=O,Kn(l,D?3:1),si(l,"changeDate")):Kn(l,1),R&&l.hide())}var cs=function(){function l(m){var p=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},w=arguments.length>2&&arguments[2]!==void 0?arguments[2]:void 0;A(this,l),m.datepicker=this,this.element=m;var D=this.config=Object.assign({buttonClass:p.buttonClass&&String(p.buttonClass)||"button",container:document.body,defaultViewDate:re(),maxDate:void 0,minDate:void 0},jt(et,this));this._options=p,Object.assign(D,jt(p,this));var R=this.inline=m.tagName!=="INPUT",O,j;if(R)D.container=m,j=$(m.dataset.date,D.dateDelimiter),delete m.dataset.date;else{var B=p.container?document.querySelector(p.container):null;B&&(D.container=B),O=this.inputField=m,O.classList.add("datepicker-input"),j=$(O.value,D.dateDelimiter)}if(w){var V=w.inputs.indexOf(O),J=w.datepickers;if(V<0||V>1||!Array.isArray(J))throw Error("Invalid rangepicker object.");J[V]=this,Object.defineProperty(this,"rangepicker",{get:function(){return w}})}this.dates=[];var Y=mn(this,j);Y&&Y.length>0&&(this.dates=Y),O&&(O.value=gr(this.dates,D));var se=this.picker=new $n(this);if(R)this.show();else{var oe=ls.bind(null,this),ue=[[O,"keydown",Oa.bind(null,this)],[O,"focus",Ma.bind(null,this)],[O,"mousedown",Na.bind(null,this)],[O,"click",Lu.bind(null,this)],[O,"paste",Ru.bind(null,this)],[document,"mousedown",oe],[document,"touchstart",oe],[window,"resize",se.place.bind(se)]];Si(this,ue)}}return y(l,[{key:"active",get:function(){return!!(this.picker&&this.picker.active)}},{key:"pickerElement",get:function(){return this.picker?this.picker.element:void 0}},{key:"setOptions",value:function(p){var w=this.picker,D=jt(p,this);Object.assign(this._options,p),Object.assign(this.config,D),w.setOptions(D),Kn(this,3)}},{key:"show",value:function(){if(this.inputField){if(this.inputField.disabled)return;this.inputField!==document.activeElement&&(this._showing=!0,this.inputField.focus(),delete this._showing)}this.picker.show()}},{key:"hide",value:function(){this.inline||(this.picker.hide(),this.picker.update().changeView(this.config.startView).render())}},{key:"destroy",value:function(){return this.hide(),qt(this),this.picker.detach(),this.inline||this.inputField.classList.remove("datepicker-input"),delete this.element.datepicker,this}},{key:"getDate",value:function(){var p=this,w=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0,D=w?function(R){return $t(R,w,p.config.locale)}:function(R){return new Date(R)};if(this.config.multidate)return this.dates.map(D);if(this.dates.length>0)return D(this.dates[0])}},{key:"setDate",value:function(){for(var p=arguments.length,w=new Array(p),D=0;D<p;D++)w[D]=arguments[D];var R=[].concat(w),O={},j=U(w);q(j)==="object"&&!Array.isArray(j)&&!(j instanceof Date)&&j&&Object.assign(O,R.pop());var B=Array.isArray(R[0])?R[0]:R;ds(this,B,O)}},{key:"update",value:function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0;if(!this.inline){var w={clear:!0,autohide:!!(p&&p.autohide)},D=$(this.inputField.value,this.config.dateDelimiter);ds(this,D,w)}}},{key:"refresh",value:function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0,w=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;p&&typeof p!="string"&&(w=p,p=void 0);var D;p==="picker"?D=2:p==="input"?D=1:D=3,Kn(this,D,!w)}},{key:"enterEditMode",value:function(){this.inline||!this.picker.active||this.editMode||(this.editMode=!0,this.inputField.classList.add("in-edit","border-blue-700","!border-primary-700"))}},{key:"exitEditMode",value:function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0;if(!(this.inline||!this.editMode)){var w=Object.assign({update:!1},p);delete this.editMode,this.inputField.classList.remove("in-edit","border-blue-700","!border-primary-700"),w.update&&this.update(w)}}}],[{key:"formatDate",value:function(p,w,D){return $t(p,w,D&&Kt[D]||Kt.en)}},{key:"parseDate",value:function(p,w,D){return ei(p,w,D&&Kt[D]||Kt.en)}},{key:"locales",get:function(){return Kt}}])}();function hs(l){var m=Object.assign({},l);return delete m.inputs,delete m.allowOneSidedRange,delete m.maxNumberOfDates,m}function fs(l,m,p,w){Si(l,[[p,"changeDate",m]]),new cs(p,w,l)}function S(l,m){if(!l._updating){l._updating=!0;var p=m.target;if(p.datepicker!==void 0){var w=l.datepickers,D={render:!1},R=l.inputs.indexOf(p),O=R===0?1:0,j=w[R].dates[0],B=w[O].dates[0];j!==void 0&&B!==void 0?R===0&&j>B?(w[0].setDate(B,D),w[1].setDate(j,D)):R===1&&j<B&&(w[0].setDate(j,D),w[1].setDate(B,D)):l.allowOneSidedRange||(j!==void 0||B!==void 0)&&(D.clear=!0,w[O].setDate(w[R].dates,D)),w[0].picker.update().render(),w[1].picker.update().render(),delete l._updating}}}var T=function(){function l(m){var p=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};A(this,l);var w=Array.isArray(p.inputs)?p.inputs:Array.from(m.querySelectorAll("input"));if(!(w.length<2)){m.rangepicker=this,this.element=m,this.inputs=w.slice(0,2),this.allowOneSidedRange=!!p.allowOneSidedRange;var D=S.bind(null,this),R=hs(p),O=[];Object.defineProperty(this,"datepickers",{get:function(){return O}}),fs(this,D,this.inputs[0],R),fs(this,D,this.inputs[1],R),Object.freeze(O),O[0].dates.length>0?S(this,{target:this.inputs[0]}):O[1].dates.length>0&&S(this,{target:this.inputs[1]})}}return y(l,[{key:"dates",get:function(){return this.datepickers.length===2?[this.datepickers[0].dates[0],this.datepickers[1].dates[0]]:void 0}},{key:"setOptions",value:function(p){this.allowOneSidedRange=!!p.allowOneSidedRange;var w=hs(p);this.datepickers[0].setOptions(w),this.datepickers[1].setOptions(w)}},{key:"destroy",value:function(){this.datepickers[0].destroy(),this.datepickers[1].destroy(),qt(this),delete this.element.rangepicker}},{key:"getDates",value:function(){var p=this,w=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0,D=w?function(R){return $t(R,w,p.datepickers[0].config.locale)}:function(R){return new Date(R)};return this.dates.map(function(R){return R===void 0?R:D(R)})}},{key:"setDates",value:function(p,w){var D=I(this.datepickers,2),R=D[0],O=D[1],j=this.dates;this._updating=!0,R.setDate(p),O.setDate(w),delete this._updating,O.dates[0]!==j[1]?S(this,{target:this.inputs[1]}):R.dates[0]!==j[0]&&S(this,{target:this.inputs[0]})}}])}();s.DateRangePicker=T,s.Datepicker=cs},902:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initAccordions=void 0;var c=a(423),v={alwaysOpen:!1,activeClasses:"bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white",inactiveClasses:"text-gray-500 dark:text-gray-400",onOpen:function(){},onClose:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=[]),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._accordionEl=d,this._items=g,this._options=u(u({},v),b),this._initialized=!1,this.init(),c.default.addInstance("Accordion",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._items.length&&!this._initialized&&(this._items.forEach(function(g){g.active&&d.open(g.id);var b=function(){d.toggle(g.id)};g.triggerEl.addEventListener("click",b),g.clickHandler=b}),this._initialized=!0)},y.prototype.destroy=function(){this._items.length&&this._initialized&&(this._items.forEach(function(d){d.triggerEl.removeEventListener("click",d.clickHandler),delete d.clickHandler}),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Accordion",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getItem=function(d){return this._items.filter(function(g){return g.id===d})[0]},y.prototype.open=function(d){var g,b,E=this,P=this.getItem(d);this._options.alwaysOpen||this._items.map(function(o){var h,f;o!==P&&((h=o.triggerEl.classList).remove.apply(h,E._options.activeClasses.split(" ")),(f=o.triggerEl.classList).add.apply(f,E._options.inactiveClasses.split(" ")),o.targetEl.classList.add("hidden"),o.triggerEl.setAttribute("aria-expanded","false"),o.active=!1,o.iconEl&&o.iconEl.classList.add("rotate-180"))}),(g=P.triggerEl.classList).add.apply(g,this._options.activeClasses.split(" ")),(b=P.triggerEl.classList).remove.apply(b,this._options.inactiveClasses.split(" ")),P.triggerEl.setAttribute("aria-expanded","true"),P.targetEl.classList.remove("hidden"),P.active=!0,P.iconEl&&P.iconEl.classList.remove("rotate-180"),this._options.onOpen(this,P)},y.prototype.toggle=function(d){var g=this.getItem(d);g.active?this.close(d):this.open(d),this._options.onToggle(this,g)},y.prototype.close=function(d){var g,b,E=this.getItem(d);(g=E.triggerEl.classList).remove.apply(g,this._options.activeClasses.split(" ")),(b=E.triggerEl.classList).add.apply(b,this._options.inactiveClasses.split(" ")),E.targetEl.classList.add("hidden"),E.triggerEl.setAttribute("aria-expanded","false"),E.active=!1,E.iconEl&&E.iconEl.classList.add("rotate-180"),this._options.onClose(this,E)},y.prototype.updateOnOpen=function(d){this._options.onOpen=d},y.prototype.updateOnClose=function(d){this._options.onClose=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-accordion]").forEach(function(y){var d=y.getAttribute("data-accordion"),g=y.getAttribute("data-active-classes"),b=y.getAttribute("data-inactive-classes"),E=[];y.querySelectorAll("[data-accordion-target]").forEach(function(P){if(P.closest("[data-accordion]")===y){var o={id:P.getAttribute("data-accordion-target"),triggerEl:P,targetEl:document.querySelector(P.getAttribute("data-accordion-target")),iconEl:P.querySelector("[data-accordion-icon]"),active:P.getAttribute("aria-expanded")==="true"};E.push(o)}}),new A(y,E,{alwaysOpen:d==="open",activeClasses:g||v.activeClasses,inactiveClasses:b||v.inactiveClasses})})}s.initAccordions=N,typeof window<"u"&&(window.Accordion=A,window.initAccordions=N),s.default=A},33:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initCarousels=void 0;var c=a(423),v={defaultPosition:0,indicators:{items:[],activeClasses:"bg-white dark:bg-gray-800",inactiveClasses:"bg-white/50 dark:bg-gray-800/50 hover:bg-white dark:hover:bg-gray-800"},interval:3e3,onNext:function(){},onPrev:function(){},onChange:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=[]),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._carouselEl=d,this._items=g,this._options=u(u(u({},v),b),{indicators:u(u({},v.indicators),b.indicators)}),this._activeItem=this.getItem(this._options.defaultPosition),this._indicators=this._options.indicators.items,this._intervalDuration=this._options.interval,this._intervalInstance=null,this._initialized=!1,this.init(),c.default.addInstance("Carousel",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._items.length&&!this._initialized&&(this._items.map(function(g){g.el.classList.add("absolute","inset-0","transition-transform","transform")}),this.getActiveItem()?this.slideTo(this.getActiveItem().position):this.slideTo(0),this._indicators.map(function(g,b){g.el.addEventListener("click",function(){d.slideTo(b)})}),this._initialized=!0)},y.prototype.destroy=function(){this._initialized&&(this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Carousel",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getItem=function(d){return this._items[d]},y.prototype.slideTo=function(d){var g=this._items[d],b={left:g.position===0?this._items[this._items.length-1]:this._items[g.position-1],middle:g,right:g.position===this._items.length-1?this._items[0]:this._items[g.position+1]};this._rotate(b),this._setActiveItem(g),this._intervalInstance&&(this.pause(),this.cycle()),this._options.onChange(this)},y.prototype.next=function(){var d=this.getActiveItem(),g=null;d.position===this._items.length-1?g=this._items[0]:g=this._items[d.position+1],this.slideTo(g.position),this._options.onNext(this)},y.prototype.prev=function(){var d=this.getActiveItem(),g=null;d.position===0?g=this._items[this._items.length-1]:g=this._items[d.position-1],this.slideTo(g.position),this._options.onPrev(this)},y.prototype._rotate=function(d){if(this._items.map(function(g){g.el.classList.add("hidden")}),this._items.length===1){d.middle.el.classList.remove("-translate-x-full","translate-x-full","translate-x-0","hidden","z-10"),d.middle.el.classList.add("translate-x-0","z-20");return}d.left.el.classList.remove("-translate-x-full","translate-x-full","translate-x-0","hidden","z-20"),d.left.el.classList.add("-translate-x-full","z-10"),d.middle.el.classList.remove("-translate-x-full","translate-x-full","translate-x-0","hidden","z-10"),d.middle.el.classList.add("translate-x-0","z-30"),d.right.el.classList.remove("-translate-x-full","translate-x-full","translate-x-0","hidden","z-30"),d.right.el.classList.add("translate-x-full","z-20")},y.prototype.cycle=function(){var d=this;typeof window<"u"&&(this._intervalInstance=window.setInterval(function(){d.next()},this._intervalDuration))},y.prototype.pause=function(){clearInterval(this._intervalInstance)},y.prototype.getActiveItem=function(){return this._activeItem},y.prototype._setActiveItem=function(d){var g,b,E=this;this._activeItem=d;var P=d.position;this._indicators.length&&(this._indicators.map(function(o){var h,f;o.el.setAttribute("aria-current","false"),(h=o.el.classList).remove.apply(h,E._options.indicators.activeClasses.split(" ")),(f=o.el.classList).add.apply(f,E._options.indicators.inactiveClasses.split(" "))}),(g=this._indicators[P].el.classList).add.apply(g,this._options.indicators.activeClasses.split(" ")),(b=this._indicators[P].el.classList).remove.apply(b,this._options.indicators.inactiveClasses.split(" ")),this._indicators[P].el.setAttribute("aria-current","true"))},y.prototype.updateOnNext=function(d){this._options.onNext=d},y.prototype.updateOnPrev=function(d){this._options.onPrev=d},y.prototype.updateOnChange=function(d){this._options.onChange=d},y}();function N(){document.querySelectorAll("[data-carousel]").forEach(function(y){var d=y.getAttribute("data-carousel-interval"),g=y.getAttribute("data-carousel")==="slide",b=[],E=0;y.querySelectorAll("[data-carousel-item]").length&&Array.from(y.querySelectorAll("[data-carousel-item]")).map(function(_,C){b.push({position:C,el:_}),_.getAttribute("data-carousel-item")==="active"&&(E=C)});var P=[];y.querySelectorAll("[data-carousel-slide-to]").length&&Array.from(y.querySelectorAll("[data-carousel-slide-to]")).map(function(_){P.push({position:parseInt(_.getAttribute("data-carousel-slide-to")),el:_})});var o=new A(y,b,{defaultPosition:E,indicators:{items:P},interval:d||v.interval});g&&o.cycle();var h=y.querySelector("[data-carousel-next]"),f=y.querySelector("[data-carousel-prev]");h&&h.addEventListener("click",function(){o.next()}),f&&f.addEventListener("click",function(){o.prev()})})}s.initCarousels=N,typeof window<"u"&&(window.Carousel=A,window.initCarousels=N),s.default=A},673:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initCopyClipboards=void 0;var c=a(423),v={htmlEntities:!1,contentType:"input",onCopy:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:g.id,this._triggerEl=d,this._targetEl=g,this._options=u(u({},v),b),this._initialized=!1,this.init(),c.default.addInstance("CopyClipboard",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._targetEl&&this._triggerEl&&!this._initialized&&(this._triggerElClickHandler=function(){d.copy()},this._triggerEl&&this._triggerEl.addEventListener("click",this._triggerElClickHandler),this._initialized=!0)},y.prototype.destroy=function(){this._triggerEl&&this._targetEl&&this._initialized&&(this._triggerEl&&this._triggerEl.removeEventListener("click",this._triggerElClickHandler),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("CopyClipboard",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getTargetValue=function(){if(this._options.contentType==="input")return this._targetEl.value;if(this._options.contentType==="innerHTML")return this._targetEl.innerHTML;if(this._options.contentType==="textContent")return this._targetEl.textContent.replace(/\s+/g," ").trim()},y.prototype.copy=function(){var d=this.getTargetValue();this._options.htmlEntities&&(d=this.decodeHTML(d));var g=document.createElement("textarea");return g.value=d,document.body.appendChild(g),g.select(),document.execCommand("copy"),document.body.removeChild(g),this._options.onCopy(this),d},y.prototype.decodeHTML=function(d){var g=document.createElement("textarea");return g.innerHTML=d,g.textContent},y.prototype.updateOnCopyCallback=function(d){this._options.onCopy=d},y}();function N(){document.querySelectorAll("[data-copy-to-clipboard-target]").forEach(function(y){var d=y.getAttribute("data-copy-to-clipboard-target"),g=document.getElementById(d),b=y.getAttribute("data-copy-to-clipboard-content-type"),E=y.getAttribute("data-copy-to-clipboard-html-entities");g?c.default.instanceExists("CopyClipboard",g.getAttribute("id"))||new A(y,g,{htmlEntities:E&&E==="true"?!0:v.htmlEntities,contentType:b||v.contentType}):console.error('The target element with id "'.concat(d,'" does not exist. Please check the data-copy-to-clipboard-target attribute.'))})}s.initCopyClipboards=N,typeof window<"u"&&(window.CopyClipboard=A,window.initClipboards=N),s.default=A},922:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initCollapses=void 0;var c=a(423),v={onCollapse:function(){},onExpand:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._targetEl=d,this._triggerEl=g,this._options=u(u({},v),b),this._visible=!1,this._initialized=!1,this.init(),c.default.addInstance("Collapse",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._triggerEl&&this._targetEl&&!this._initialized&&(this._triggerEl.hasAttribute("aria-expanded")?this._visible=this._triggerEl.getAttribute("aria-expanded")==="true":this._visible=!this._targetEl.classList.contains("hidden"),this._clickHandler=function(){d.toggle()},this._triggerEl.addEventListener("click",this._clickHandler),this._initialized=!0)},y.prototype.destroy=function(){this._triggerEl&&this._initialized&&(this._triggerEl.removeEventListener("click",this._clickHandler),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Collapse",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.collapse=function(){this._targetEl.classList.add("hidden"),this._triggerEl&&this._triggerEl.setAttribute("aria-expanded","false"),this._visible=!1,this._options.onCollapse(this)},y.prototype.expand=function(){this._targetEl.classList.remove("hidden"),this._triggerEl&&this._triggerEl.setAttribute("aria-expanded","true"),this._visible=!0,this._options.onExpand(this)},y.prototype.toggle=function(){this._visible?this.collapse():this.expand(),this._options.onToggle(this)},y.prototype.updateOnCollapse=function(d){this._options.onCollapse=d},y.prototype.updateOnExpand=function(d){this._options.onExpand=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-collapse-toggle]").forEach(function(y){var d=y.getAttribute("data-collapse-toggle"),g=document.getElementById(d);g?c.default.instanceExists("Collapse",g.getAttribute("id"))?new A(g,y,{},{id:g.getAttribute("id")+"_"+c.default._generateRandomId()}):new A(g,y):console.error('The target element with id "'.concat(d,'" does not exist. Please check the data-collapse-toggle attribute.'))})}s.initCollapses=N,typeof window<"u"&&(window.Collapse=A,window.initCollapses=N),s.default=A},132:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(d){for(var g,b=1,E=arguments.length;b<E;b++){g=arguments[b];for(var P in g)Object.prototype.hasOwnProperty.call(g,P)&&(d[P]=g[P])}return d},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initDatepickers=void 0;var c=a(423),v=a(554),k={defaultDatepickerId:null,autohide:!1,format:"mm/dd/yyyy",maxDate:null,minDate:null,orientation:"bottom",buttons:!1,autoSelectToday:0,title:null,language:"en",rangePicker:!1,onShow:function(){},onHide:function(){}},A={id:null,override:!0},N=function(){function d(g,b,E){g===void 0&&(g=null),b===void 0&&(b=k),E===void 0&&(E=A),this._instanceId=E.id?E.id:g.id,this._datepickerEl=g,this._datepickerInstance=null,this._options=u(u({},k),b),this._initialized=!1,this.init(),c.default.addInstance("Datepicker",this,this._instanceId,E.override)}return d.prototype.init=function(){this._datepickerEl&&!this._initialized&&(this._options.rangePicker?this._datepickerInstance=new v.DateRangePicker(this._datepickerEl,this._getDatepickerOptions(this._options)):this._datepickerInstance=new v.Datepicker(this._datepickerEl,this._getDatepickerOptions(this._options)),this._initialized=!0)},d.prototype.destroy=function(){this._initialized&&(this._initialized=!1,this._datepickerInstance.destroy())},d.prototype.removeInstance=function(){this.destroy(),c.default.removeInstance("Datepicker",this._instanceId)},d.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},d.prototype.getDatepickerInstance=function(){return this._datepickerInstance},d.prototype.getDate=function(){if(this._options.rangePicker&&this._datepickerInstance instanceof v.DateRangePicker)return this._datepickerInstance.getDates();if(!this._options.rangePicker&&this._datepickerInstance instanceof v.Datepicker)return this._datepickerInstance.getDate()},d.prototype.setDate=function(g){if(this._options.rangePicker&&this._datepickerInstance instanceof v.DateRangePicker)return this._datepickerInstance.setDates(g);if(!this._options.rangePicker&&this._datepickerInstance instanceof v.Datepicker)return this._datepickerInstance.setDate(g)},d.prototype.show=function(){this._datepickerInstance.show(),this._options.onShow(this)},d.prototype.hide=function(){this._datepickerInstance.hide(),this._options.onHide(this)},d.prototype._getDatepickerOptions=function(g){var b={};return g.buttons&&(b.todayBtn=!0,b.clearBtn=!0,g.autoSelectToday&&(b.todayBtnMode=1)),g.autohide&&(b.autohide=!0),g.format&&(b.format=g.format),g.maxDate&&(b.maxDate=g.maxDate),g.minDate&&(b.minDate=g.minDate),g.orientation&&(b.orientation=g.orientation),g.title&&(b.title=g.title),g.language&&(b.language=g.language),b},d.prototype.updateOnShow=function(g){this._options.onShow=g},d.prototype.updateOnHide=function(g){this._options.onHide=g},d}();function y(){document.querySelectorAll("[datepicker], [inline-datepicker], [date-rangepicker]").forEach(function(d){if(d){var g=d.hasAttribute("datepicker-buttons"),b=d.hasAttribute("datepicker-autoselect-today"),E=d.hasAttribute("datepicker-autohide"),P=d.getAttribute("datepicker-format"),o=d.getAttribute("datepicker-max-date"),h=d.getAttribute("datepicker-min-date"),f=d.getAttribute("datepicker-orientation"),_=d.getAttribute("datepicker-title"),C=d.getAttribute("datepicker-language"),I=d.hasAttribute("date-rangepicker");new N(d,{buttons:g||k.buttons,autoSelectToday:b||k.autoSelectToday,autohide:E||k.autohide,format:P||k.format,maxDate:o||k.maxDate,minDate:h||k.minDate,orientation:f||k.orientation,title:_||k.title,language:C||k.language,rangePicker:I||k.rangePicker})}else console.error("The datepicker element does not exist. Please check the datepicker attribute.")})}s.initDatepickers=y,typeof window<"u"&&(window.Datepicker=N,window.initDatepickers=y),s.default=N},556:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initDials=void 0;var c=a(423),v={triggerType:"hover",onShow:function(){},onHide:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E,P){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=null),E===void 0&&(E=v),P===void 0&&(P=k),this._instanceId=P.id?P.id:b.id,this._parentEl=d,this._triggerEl=g,this._targetEl=b,this._options=u(u({},v),E),this._visible=!1,this._initialized=!1,this.init(),c.default.addInstance("Dial",this,this._instanceId,P.override)}return y.prototype.init=function(){var d=this;if(this._triggerEl&&this._targetEl&&!this._initialized){var g=this._getTriggerEventTypes(this._options.triggerType);this._showEventHandler=function(){d.show()},g.showEvents.forEach(function(b){d._triggerEl.addEventListener(b,d._showEventHandler),d._targetEl.addEventListener(b,d._showEventHandler)}),this._hideEventHandler=function(){d._parentEl.matches(":hover")||d.hide()},g.hideEvents.forEach(function(b){d._parentEl.addEventListener(b,d._hideEventHandler)}),this._initialized=!0}},y.prototype.destroy=function(){var d=this;if(this._initialized){var g=this._getTriggerEventTypes(this._options.triggerType);g.showEvents.forEach(function(b){d._triggerEl.removeEventListener(b,d._showEventHandler),d._targetEl.removeEventListener(b,d._showEventHandler)}),g.hideEvents.forEach(function(b){d._parentEl.removeEventListener(b,d._hideEventHandler)}),this._initialized=!1}},y.prototype.removeInstance=function(){c.default.removeInstance("Dial",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.hide=function(){this._targetEl.classList.add("hidden"),this._triggerEl&&this._triggerEl.setAttribute("aria-expanded","false"),this._visible=!1,this._options.onHide(this)},y.prototype.show=function(){this._targetEl.classList.remove("hidden"),this._triggerEl&&this._triggerEl.setAttribute("aria-expanded","true"),this._visible=!0,this._options.onShow(this)},y.prototype.toggle=function(){this._visible?this.hide():this.show()},y.prototype.isHidden=function(){return!this._visible},y.prototype.isVisible=function(){return this._visible},y.prototype._getTriggerEventTypes=function(d){switch(d){case"hover":return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]};case"click":return{showEvents:["click","focus"],hideEvents:["focusout","blur"]};case"none":return{showEvents:[],hideEvents:[]};default:return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]}}},y.prototype.updateOnShow=function(d){this._options.onShow=d},y.prototype.updateOnHide=function(d){this._options.onHide=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-dial-init]").forEach(function(y){var d=y.querySelector("[data-dial-toggle]");if(d){var g=d.getAttribute("data-dial-toggle"),b=document.getElementById(g);if(b){var E=d.getAttribute("data-dial-trigger");new A(y,d,b,{triggerType:E||v.triggerType})}else console.error("Dial with id ".concat(g," does not exist. Are you sure that the data-dial-toggle attribute points to the correct modal id?"))}else console.error("Dial with id ".concat(y.id," does not have a trigger element. Are you sure that the data-dial-toggle attribute exists?"))})}s.initDials=N,typeof window<"u"&&(window.Dial=A,window.initDials=N),s.default=A},791:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initDismisses=void 0;var c=a(423),v={transition:"transition-opacity",duration:300,timing:"ease-out",onHide:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._targetEl=d,this._triggerEl=g,this._options=u(u({},v),b),this._initialized=!1,this.init(),c.default.addInstance("Dismiss",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._triggerEl&&this._targetEl&&!this._initialized&&(this._clickHandler=function(){d.hide()},this._triggerEl.addEventListener("click",this._clickHandler),this._initialized=!0)},y.prototype.destroy=function(){this._triggerEl&&this._initialized&&(this._triggerEl.removeEventListener("click",this._clickHandler),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Dismiss",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.hide=function(){var d=this;this._targetEl.classList.add(this._options.transition,"duration-".concat(this._options.duration),this._options.timing,"opacity-0"),setTimeout(function(){d._targetEl.classList.add("hidden")},this._options.duration),this._options.onHide(this,this._targetEl)},y.prototype.updateOnHide=function(d){this._options.onHide=d},y}();function N(){document.querySelectorAll("[data-dismiss-target]").forEach(function(y){var d=y.getAttribute("data-dismiss-target"),g=document.querySelector(d);g?new A(g,y):console.error('The dismiss element with id "'.concat(d,'" does not exist. Please check the data-dismiss-target attribute.'))})}s.initDismisses=N,typeof window<"u"&&(window.Dismiss=A,window.initDismisses=N),s.default=A},340:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initDrawers=void 0;var c=a(423),v={placement:"left",bodyScrolling:!1,backdrop:!0,edge:!1,edgeOffset:"bottom-[60px]",backdropClasses:"bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-30",onShow:function(){},onHide:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b){d===void 0&&(d=null),g===void 0&&(g=v),b===void 0&&(b=k),this._eventListenerInstances=[],this._instanceId=b.id?b.id:d.id,this._targetEl=d,this._options=u(u({},v),g),this._visible=!1,this._initialized=!1,this.init(),c.default.addInstance("Drawer",this,this._instanceId,b.override)}return y.prototype.init=function(){var d=this;this._targetEl&&!this._initialized&&(this._targetEl.setAttribute("aria-hidden","true"),this._targetEl.classList.add("transition-transform"),this._getPlacementClasses(this._options.placement).base.map(function(g){d._targetEl.classList.add(g)}),this._handleEscapeKey=function(g){g.key==="Escape"&&d.isVisible()&&d.hide()},document.addEventListener("keydown",this._handleEscapeKey),this._initialized=!0)},y.prototype.destroy=function(){this._initialized&&(this.removeAllEventListenerInstances(),this._destroyBackdropEl(),document.removeEventListener("keydown",this._handleEscapeKey),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Drawer",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.hide=function(){var d=this;this._options.edge?(this._getPlacementClasses(this._options.placement+"-edge").active.map(function(g){d._targetEl.classList.remove(g)}),this._getPlacementClasses(this._options.placement+"-edge").inactive.map(function(g){d._targetEl.classList.add(g)})):(this._getPlacementClasses(this._options.placement).active.map(function(g){d._targetEl.classList.remove(g)}),this._getPlacementClasses(this._options.placement).inactive.map(function(g){d._targetEl.classList.add(g)})),this._targetEl.setAttribute("aria-hidden","true"),this._targetEl.removeAttribute("aria-modal"),this._targetEl.removeAttribute("role"),this._options.bodyScrolling||document.body.classList.remove("overflow-hidden"),this._options.backdrop&&this._destroyBackdropEl(),this._visible=!1,this._options.onHide(this)},y.prototype.show=function(){var d=this;this._options.edge?(this._getPlacementClasses(this._options.placement+"-edge").active.map(function(g){d._targetEl.classList.add(g)}),this._getPlacementClasses(this._options.placement+"-edge").inactive.map(function(g){d._targetEl.classList.remove(g)})):(this._getPlacementClasses(this._options.placement).active.map(function(g){d._targetEl.classList.add(g)}),this._getPlacementClasses(this._options.placement).inactive.map(function(g){d._targetEl.classList.remove(g)})),this._targetEl.setAttribute("aria-modal","true"),this._targetEl.setAttribute("role","dialog"),this._targetEl.removeAttribute("aria-hidden"),this._options.bodyScrolling||document.body.classList.add("overflow-hidden"),this._options.backdrop&&this._createBackdrop(),this._visible=!0,this._options.onShow(this)},y.prototype.toggle=function(){this.isVisible()?this.hide():this.show()},y.prototype._createBackdrop=function(){var d,g=this;if(!this._visible){var b=document.createElement("div");b.setAttribute("drawer-backdrop",""),(d=b.classList).add.apply(d,this._options.backdropClasses.split(" ")),document.querySelector("body").append(b),b.addEventListener("click",function(){g.hide()})}},y.prototype._destroyBackdropEl=function(){this._visible&&document.querySelector("[drawer-backdrop]")!==null&&document.querySelector("[drawer-backdrop]").remove()},y.prototype._getPlacementClasses=function(d){switch(d){case"top":return{base:["top-0","left-0","right-0"],active:["transform-none"],inactive:["-translate-y-full"]};case"right":return{base:["right-0","top-0"],active:["transform-none"],inactive:["translate-x-full"]};case"bottom":return{base:["bottom-0","left-0","right-0"],active:["transform-none"],inactive:["translate-y-full"]};case"left":return{base:["left-0","top-0"],active:["transform-none"],inactive:["-translate-x-full"]};case"bottom-edge":return{base:["left-0","top-0"],active:["transform-none"],inactive:["translate-y-full",this._options.edgeOffset]};default:return{base:["left-0","top-0"],active:["transform-none"],inactive:["-translate-x-full"]}}},y.prototype.isHidden=function(){return!this._visible},y.prototype.isVisible=function(){return this._visible},y.prototype.addEventListenerInstance=function(d,g,b){this._eventListenerInstances.push({element:d,type:g,handler:b})},y.prototype.removeAllEventListenerInstances=function(){this._eventListenerInstances.map(function(d){d.element.removeEventListener(d.type,d.handler)}),this._eventListenerInstances=[]},y.prototype.getAllEventListenerInstances=function(){return this._eventListenerInstances},y.prototype.updateOnShow=function(d){this._options.onShow=d},y.prototype.updateOnHide=function(d){this._options.onHide=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-drawer-target]").forEach(function(y){var d=y.getAttribute("data-drawer-target"),g=document.getElementById(d);if(g){var b=y.getAttribute("data-drawer-placement"),E=y.getAttribute("data-drawer-body-scrolling"),P=y.getAttribute("data-drawer-backdrop"),o=y.getAttribute("data-drawer-edge"),h=y.getAttribute("data-drawer-edge-offset");new A(g,{placement:b||v.placement,bodyScrolling:E?E==="true":v.bodyScrolling,backdrop:P?P==="true":v.backdrop,edge:o?o==="true":v.edge,edgeOffset:h||v.edgeOffset})}else console.error("Drawer with id ".concat(d," not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"))}),document.querySelectorAll("[data-drawer-toggle]").forEach(function(y){var d=y.getAttribute("data-drawer-toggle"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Drawer",d);if(b){var E=function(){b.toggle()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Drawer with id ".concat(d," has not been initialized. Please initialize it using the data-drawer-target attribute."))}else console.error("Drawer with id ".concat(d," not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"))}),document.querySelectorAll("[data-drawer-dismiss], [data-drawer-hide]").forEach(function(y){var d=y.getAttribute("data-drawer-dismiss")?y.getAttribute("data-drawer-dismiss"):y.getAttribute("data-drawer-hide"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Drawer",d);if(b){var E=function(){b.hide()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Drawer with id ".concat(d," has not been initialized. Please initialize it using the data-drawer-target attribute."))}else console.error("Drawer with id ".concat(d," not found. Are you sure that the data-drawer-target attribute points to the correct drawer id"))}),document.querySelectorAll("[data-drawer-show]").forEach(function(y){var d=y.getAttribute("data-drawer-show"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Drawer",d);if(b){var E=function(){b.show()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Drawer with id ".concat(d," has not been initialized. Please initialize it using the data-drawer-target attribute."))}else console.error("Drawer with id ".concat(d," not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"))})}s.initDrawers=N,typeof window<"u"&&(window.Drawer=A,window.initDrawers=N),s.default=A},316:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(g){for(var b,E=1,P=arguments.length;E<P;E++){b=arguments[E];for(var o in b)Object.prototype.hasOwnProperty.call(b,o)&&(g[o]=b[o])}return g},u.apply(this,arguments)},c=this&&this.__spreadArray||function(g,b,E){if(E||arguments.length===2)for(var P=0,o=b.length,h;P<o;P++)(h||!(P in b))&&(h||(h=Array.prototype.slice.call(b,0,P)),h[P]=b[P]);return g.concat(h||Array.prototype.slice.call(b))};Object.defineProperty(s,"__esModule",{value:!0}),s.initDropdowns=void 0;var v=a(853),k=a(423),A={placement:"bottom",triggerType:"click",offsetSkidding:0,offsetDistance:10,delay:300,ignoreClickOutsideClass:!1,onShow:function(){},onHide:function(){},onToggle:function(){}},N={id:null,override:!0},y=function(){function g(b,E,P,o){b===void 0&&(b=null),E===void 0&&(E=null),P===void 0&&(P=A),o===void 0&&(o=N),this._instanceId=o.id?o.id:b.id,this._targetEl=b,this._triggerEl=E,this._options=u(u({},A),P),this._popperInstance=null,this._visible=!1,this._initialized=!1,this.init(),k.default.addInstance("Dropdown",this,this._instanceId,o.override)}return g.prototype.init=function(){this._triggerEl&&this._targetEl&&!this._initialized&&(this._popperInstance=this._createPopperInstance(),this._setupEventListeners(),this._initialized=!0)},g.prototype.destroy=function(){var b=this,E=this._getTriggerEvents();this._options.triggerType==="click"&&E.showEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._clickHandler)}),this._options.triggerType==="hover"&&(E.showEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._hoverShowTriggerElHandler),b._targetEl.removeEventListener(P,b._hoverShowTargetElHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._hoverHideHandler),b._targetEl.removeEventListener(P,b._hoverHideHandler)})),this._popperInstance.destroy(),this._initialized=!1},g.prototype.removeInstance=function(){k.default.removeInstance("Dropdown",this._instanceId)},g.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},g.prototype._setupEventListeners=function(){var b=this,E=this._getTriggerEvents();this._clickHandler=function(){b.toggle()},this._options.triggerType==="click"&&E.showEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._clickHandler)}),this._hoverShowTriggerElHandler=function(P){P.type==="click"?b.toggle():setTimeout(function(){b.show()},b._options.delay)},this._hoverShowTargetElHandler=function(){b.show()},this._hoverHideHandler=function(){setTimeout(function(){b._targetEl.matches(":hover")||b.hide()},b._options.delay)},this._options.triggerType==="hover"&&(E.showEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._hoverShowTriggerElHandler),b._targetEl.addEventListener(P,b._hoverShowTargetElHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._hoverHideHandler),b._targetEl.addEventListener(P,b._hoverHideHandler)}))},g.prototype._createPopperInstance=function(){return(0,v.createPopper)(this._triggerEl,this._targetEl,{placement:this._options.placement,modifiers:[{name:"offset",options:{offset:[this._options.offsetSkidding,this._options.offsetDistance]}}]})},g.prototype._setupClickOutsideListener=function(){var b=this;this._clickOutsideEventListener=function(E){b._handleClickOutside(E,b._targetEl)},document.body.addEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._removeClickOutsideListener=function(){document.body.removeEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._handleClickOutside=function(b,E){var P=b.target,o=this._options.ignoreClickOutsideClass,h=!1;if(o){var f=document.querySelectorAll(".".concat(o));f.forEach(function(_){if(_.contains(P)){h=!0;return}})}P!==E&&!E.contains(P)&&!this._triggerEl.contains(P)&&!h&&this.isVisible()&&this.hide()},g.prototype._getTriggerEvents=function(){switch(this._options.triggerType){case"hover":return{showEvents:["mouseenter","click"],hideEvents:["mouseleave"]};case"click":return{showEvents:["click"],hideEvents:[]};case"none":return{showEvents:[],hideEvents:[]};default:return{showEvents:["click"],hideEvents:[]}}},g.prototype.toggle=function(){this.isVisible()?this.hide():this.show(),this._options.onToggle(this)},g.prototype.isVisible=function(){return this._visible},g.prototype.show=function(){this._targetEl.classList.remove("hidden"),this._targetEl.classList.add("block"),this._targetEl.removeAttribute("aria-hidden"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!0}],!1)})}),this._setupClickOutsideListener(),this._popperInstance.update(),this._visible=!0,this._options.onShow(this)},g.prototype.hide=function(){this._targetEl.classList.remove("block"),this._targetEl.classList.add("hidden"),this._targetEl.setAttribute("aria-hidden","true"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!1}],!1)})}),this._visible=!1,this._removeClickOutsideListener(),this._options.onHide(this)},g.prototype.updateOnShow=function(b){this._options.onShow=b},g.prototype.updateOnHide=function(b){this._options.onHide=b},g.prototype.updateOnToggle=function(b){this._options.onToggle=b},g}();function d(){document.querySelectorAll("[data-dropdown-toggle]").forEach(function(g){var b=g.getAttribute("data-dropdown-toggle"),E=document.getElementById(b);if(E){var P=g.getAttribute("data-dropdown-placement"),o=g.getAttribute("data-dropdown-offset-skidding"),h=g.getAttribute("data-dropdown-offset-distance"),f=g.getAttribute("data-dropdown-trigger"),_=g.getAttribute("data-dropdown-delay"),C=g.getAttribute("data-dropdown-ignore-click-outside-class");new y(E,g,{placement:P||A.placement,triggerType:f||A.triggerType,offsetSkidding:o?parseInt(o):A.offsetSkidding,offsetDistance:h?parseInt(h):A.offsetDistance,delay:_?parseInt(_):A.delay,ignoreClickOutsideClass:C||A.ignoreClickOutsideClass})}else console.error('The dropdown element with id "'.concat(b,'" does not exist. Please check the data-dropdown-toggle attribute.'))})}s.initDropdowns=d,typeof window<"u"&&(window.Dropdown=y,window.initDropdowns=d),s.default=y},311:function(r,s,a){Object.defineProperty(s,"__esModule",{value:!0}),s.initFlowbite=void 0;var u=a(902),c=a(33),v=a(673),k=a(922),A=a(556),N=a(791),y=a(340),d=a(316),g=a(656),b=a(16),E=a(903),P=a(247),o=a(671),h=a(132);function f(){(0,u.initAccordions)(),(0,k.initCollapses)(),(0,c.initCarousels)(),(0,N.initDismisses)(),(0,d.initDropdowns)(),(0,b.initModals)(),(0,y.initDrawers)(),(0,P.initTabs)(),(0,o.initTooltips)(),(0,E.initPopovers)(),(0,A.initDials)(),(0,g.initInputCounters)(),(0,v.initCopyClipboards)(),(0,h.initDatepickers)()}s.initFlowbite=f,typeof window<"u"&&(window.initFlowbite=f)},656:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initInputCounters=void 0;var c=a(423),v={minValue:null,maxValue:null,onIncrement:function(){},onDecrement:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E,P){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=null),E===void 0&&(E=v),P===void 0&&(P=k),this._instanceId=P.id?P.id:d.id,this._targetEl=d,this._incrementEl=g,this._decrementEl=b,this._options=u(u({},v),E),this._initialized=!1,this.init(),c.default.addInstance("InputCounter",this,this._instanceId,P.override)}return y.prototype.init=function(){var d=this;this._targetEl&&!this._initialized&&(this._inputHandler=function(g){{var b=g.target;/^\d*$/.test(b.value)||(b.value=b.value.replace(/[^\d]/g,"")),d._options.maxValue!==null&&parseInt(b.value)>d._options.maxValue&&(b.value=d._options.maxValue.toString()),d._options.minValue!==null&&parseInt(b.value)<d._options.minValue&&(b.value=d._options.minValue.toString())}},this._incrementClickHandler=function(){d.increment()},this._decrementClickHandler=function(){d.decrement()},this._targetEl.addEventListener("input",this._inputHandler),this._incrementEl&&this._incrementEl.addEventListener("click",this._incrementClickHandler),this._decrementEl&&this._decrementEl.addEventListener("click",this._decrementClickHandler),this._initialized=!0)},y.prototype.destroy=function(){this._targetEl&&this._initialized&&(this._targetEl.removeEventListener("input",this._inputHandler),this._incrementEl&&this._incrementEl.removeEventListener("click",this._incrementClickHandler),this._decrementEl&&this._decrementEl.removeEventListener("click",this._decrementClickHandler),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("InputCounter",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getCurrentValue=function(){return parseInt(this._targetEl.value)||0},y.prototype.increment=function(){this._options.maxValue!==null&&this.getCurrentValue()>=this._options.maxValue||(this._targetEl.value=(this.getCurrentValue()+1).toString(),this._options.onIncrement(this))},y.prototype.decrement=function(){this._options.minValue!==null&&this.getCurrentValue()<=this._options.minValue||(this._targetEl.value=(this.getCurrentValue()-1).toString(),this._options.onDecrement(this))},y.prototype.updateOnIncrement=function(d){this._options.onIncrement=d},y.prototype.updateOnDecrement=function(d){this._options.onDecrement=d},y}();function N(){document.querySelectorAll("[data-input-counter]").forEach(function(y){var d=y.id,g=document.querySelector('[data-input-counter-increment="'+d+'"]'),b=document.querySelector('[data-input-counter-decrement="'+d+'"]'),E=y.getAttribute("data-input-counter-min"),P=y.getAttribute("data-input-counter-max");y?c.default.instanceExists("InputCounter",y.getAttribute("id"))||new A(y,g||null,b||null,{minValue:E?parseInt(E):null,maxValue:P?parseInt(P):null}):console.error('The target element with id "'.concat(d,'" does not exist. Please check the data-input-counter attribute.'))})}s.initInputCounters=N,typeof window<"u"&&(window.InputCounter=A,window.initInputCounters=N),s.default=A},16:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initModals=void 0;var c=a(423),v={placement:"center",backdropClasses:"bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-40",backdrop:"dynamic",closable:!0,onHide:function(){},onShow:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b){d===void 0&&(d=null),g===void 0&&(g=v),b===void 0&&(b=k),this._eventListenerInstances=[],this._instanceId=b.id?b.id:d.id,this._targetEl=d,this._options=u(u({},v),g),this._isHidden=!0,this._backdropEl=null,this._initialized=!1,this.init(),c.default.addInstance("Modal",this,this._instanceId,b.override)}return y.prototype.init=function(){var d=this;this._targetEl&&!this._initialized&&(this._getPlacementClasses().map(function(g){d._targetEl.classList.add(g)}),this._initialized=!0)},y.prototype.destroy=function(){this._initialized&&(this.removeAllEventListenerInstances(),this._destroyBackdropEl(),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Modal",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype._createBackdrop=function(){var d;if(this._isHidden){var g=document.createElement("div");(d=g.classList).add.apply(d,this._options.backdropClasses.split(" ")),document.querySelector("body").append(g),this._backdropEl=g}},y.prototype._destroyBackdropEl=function(){!this._isHidden&&this._backdropEl&&(this._backdropEl.remove(),this._backdropEl=null)},y.prototype._setupModalCloseEventListeners=function(){var d=this;this._options.backdrop==="dynamic"&&(this._clickOutsideEventListener=function(g){d._handleOutsideClick(g.target)},this._targetEl.addEventListener("click",this._clickOutsideEventListener,!0)),this._keydownEventListener=function(g){g.key==="Escape"&&d.hide()},document.body.addEventListener("keydown",this._keydownEventListener,!0)},y.prototype._removeModalCloseEventListeners=function(){this._options.backdrop==="dynamic"&&this._targetEl.removeEventListener("click",this._clickOutsideEventListener,!0),document.body.removeEventListener("keydown",this._keydownEventListener,!0)},y.prototype._handleOutsideClick=function(d){(d===this._targetEl||d===this._backdropEl&&this.isVisible())&&this.hide()},y.prototype._getPlacementClasses=function(){switch(this._options.placement){case"top-left":return["justify-start","items-start"];case"top-center":return["justify-center","items-start"];case"top-right":return["justify-end","items-start"];case"center-left":return["justify-start","items-center"];case"center":return["justify-center","items-center"];case"center-right":return["justify-end","items-center"];case"bottom-left":return["justify-start","items-end"];case"bottom-center":return["justify-center","items-end"];case"bottom-right":return["justify-end","items-end"];default:return["justify-center","items-center"]}},y.prototype.toggle=function(){this._isHidden?this.show():this.hide(),this._options.onToggle(this)},y.prototype.show=function(){this.isHidden&&(this._targetEl.classList.add("flex"),this._targetEl.classList.remove("hidden"),this._targetEl.setAttribute("aria-modal","true"),this._targetEl.setAttribute("role","dialog"),this._targetEl.removeAttribute("aria-hidden"),this._createBackdrop(),this._isHidden=!1,this._options.closable&&this._setupModalCloseEventListeners(),document.body.classList.add("overflow-hidden"),this._options.onShow(this))},y.prototype.hide=function(){this.isVisible&&(this._targetEl.classList.add("hidden"),this._targetEl.classList.remove("flex"),this._targetEl.setAttribute("aria-hidden","true"),this._targetEl.removeAttribute("aria-modal"),this._targetEl.removeAttribute("role"),this._destroyBackdropEl(),this._isHidden=!0,document.body.classList.remove("overflow-hidden"),this._options.closable&&this._removeModalCloseEventListeners(),this._options.onHide(this))},y.prototype.isVisible=function(){return!this._isHidden},y.prototype.isHidden=function(){return this._isHidden},y.prototype.addEventListenerInstance=function(d,g,b){this._eventListenerInstances.push({element:d,type:g,handler:b})},y.prototype.removeAllEventListenerInstances=function(){this._eventListenerInstances.map(function(d){d.element.removeEventListener(d.type,d.handler)}),this._eventListenerInstances=[]},y.prototype.getAllEventListenerInstances=function(){return this._eventListenerInstances},y.prototype.updateOnShow=function(d){this._options.onShow=d},y.prototype.updateOnHide=function(d){this._options.onHide=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-modal-target]").forEach(function(y){var d=y.getAttribute("data-modal-target"),g=document.getElementById(d);if(g){var b=g.getAttribute("data-modal-placement"),E=g.getAttribute("data-modal-backdrop");new A(g,{placement:b||v.placement,backdrop:E||v.backdrop})}else console.error("Modal with id ".concat(d," does not exist. Are you sure that the data-modal-target attribute points to the correct modal id?."))}),document.querySelectorAll("[data-modal-toggle]").forEach(function(y){var d=y.getAttribute("data-modal-toggle"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Modal",d);if(b){var E=function(){b.toggle()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Modal with id ".concat(d," has not been initialized. Please initialize it using the data-modal-target attribute."))}else console.error("Modal with id ".concat(d," does not exist. Are you sure that the data-modal-toggle attribute points to the correct modal id?"))}),document.querySelectorAll("[data-modal-show]").forEach(function(y){var d=y.getAttribute("data-modal-show"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Modal",d);if(b){var E=function(){b.show()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Modal with id ".concat(d," has not been initialized. Please initialize it using the data-modal-target attribute."))}else console.error("Modal with id ".concat(d," does not exist. Are you sure that the data-modal-show attribute points to the correct modal id?"))}),document.querySelectorAll("[data-modal-hide]").forEach(function(y){var d=y.getAttribute("data-modal-hide"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Modal",d);if(b){var E=function(){b.hide()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Modal with id ".concat(d," has not been initialized. Please initialize it using the data-modal-target attribute."))}else console.error("Modal with id ".concat(d," does not exist. Are you sure that the data-modal-hide attribute points to the correct modal id?"))})}s.initModals=N,typeof window<"u"&&(window.Modal=A,window.initModals=N),s.default=A},903:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(g){for(var b,E=1,P=arguments.length;E<P;E++){b=arguments[E];for(var o in b)Object.prototype.hasOwnProperty.call(b,o)&&(g[o]=b[o])}return g},u.apply(this,arguments)},c=this&&this.__spreadArray||function(g,b,E){if(E||arguments.length===2)for(var P=0,o=b.length,h;P<o;P++)(h||!(P in b))&&(h||(h=Array.prototype.slice.call(b,0,P)),h[P]=b[P]);return g.concat(h||Array.prototype.slice.call(b))};Object.defineProperty(s,"__esModule",{value:!0}),s.initPopovers=void 0;var v=a(853),k=a(423),A={placement:"top",offset:10,triggerType:"hover",onShow:function(){},onHide:function(){},onToggle:function(){}},N={id:null,override:!0},y=function(){function g(b,E,P,o){b===void 0&&(b=null),E===void 0&&(E=null),P===void 0&&(P=A),o===void 0&&(o=N),this._instanceId=o.id?o.id:b.id,this._targetEl=b,this._triggerEl=E,this._options=u(u({},A),P),this._popperInstance=null,this._visible=!1,this._initialized=!1,this.init(),k.default.addInstance("Popover",this,o.id?o.id:this._targetEl.id,o.override)}return g.prototype.init=function(){this._triggerEl&&this._targetEl&&!this._initialized&&(this._setupEventListeners(),this._popperInstance=this._createPopperInstance(),this._initialized=!0)},g.prototype.destroy=function(){var b=this;if(this._initialized){var E=this._getTriggerEvents();E.showEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._showHandler),b._targetEl.removeEventListener(P,b._showHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._hideHandler),b._targetEl.removeEventListener(P,b._hideHandler)}),this._removeKeydownListener(),this._removeClickOutsideListener(),this._popperInstance&&this._popperInstance.destroy(),this._initialized=!1}},g.prototype.removeInstance=function(){k.default.removeInstance("Popover",this._instanceId)},g.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},g.prototype._setupEventListeners=function(){var b=this,E=this._getTriggerEvents();this._showHandler=function(){b.show()},this._hideHandler=function(){setTimeout(function(){b._targetEl.matches(":hover")||b.hide()},100)},E.showEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._showHandler),b._targetEl.addEventListener(P,b._showHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._hideHandler),b._targetEl.addEventListener(P,b._hideHandler)})},g.prototype._createPopperInstance=function(){return(0,v.createPopper)(this._triggerEl,this._targetEl,{placement:this._options.placement,modifiers:[{name:"offset",options:{offset:[0,this._options.offset]}}]})},g.prototype._getTriggerEvents=function(){switch(this._options.triggerType){case"hover":return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]};case"click":return{showEvents:["click","focus"],hideEvents:["focusout","blur"]};case"none":return{showEvents:[],hideEvents:[]};default:return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]}}},g.prototype._setupKeydownListener=function(){var b=this;this._keydownEventListener=function(E){E.key==="Escape"&&b.hide()},document.body.addEventListener("keydown",this._keydownEventListener,!0)},g.prototype._removeKeydownListener=function(){document.body.removeEventListener("keydown",this._keydownEventListener,!0)},g.prototype._setupClickOutsideListener=function(){var b=this;this._clickOutsideEventListener=function(E){b._handleClickOutside(E,b._targetEl)},document.body.addEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._removeClickOutsideListener=function(){document.body.removeEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._handleClickOutside=function(b,E){var P=b.target;P!==E&&!E.contains(P)&&!this._triggerEl.contains(P)&&this.isVisible()&&this.hide()},g.prototype.isVisible=function(){return this._visible},g.prototype.toggle=function(){this.isVisible()?this.hide():this.show(),this._options.onToggle(this)},g.prototype.show=function(){this._targetEl.classList.remove("opacity-0","invisible"),this._targetEl.classList.add("opacity-100","visible"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!0}],!1)})}),this._setupClickOutsideListener(),this._setupKeydownListener(),this._popperInstance.update(),this._visible=!0,this._options.onShow(this)},g.prototype.hide=function(){this._targetEl.classList.remove("opacity-100","visible"),this._targetEl.classList.add("opacity-0","invisible"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!1}],!1)})}),this._removeClickOutsideListener(),this._removeKeydownListener(),this._visible=!1,this._options.onHide(this)},g.prototype.updateOnShow=function(b){this._options.onShow=b},g.prototype.updateOnHide=function(b){this._options.onHide=b},g.prototype.updateOnToggle=function(b){this._options.onToggle=b},g}();function d(){document.querySelectorAll("[data-popover-target]").forEach(function(g){var b=g.getAttribute("data-popover-target"),E=document.getElementById(b);if(E){var P=g.getAttribute("data-popover-trigger"),o=g.getAttribute("data-popover-placement"),h=g.getAttribute("data-popover-offset");new y(E,g,{placement:o||A.placement,offset:h?parseInt(h):A.offset,triggerType:P||A.triggerType})}else console.error('The popover element with id "'.concat(b,'" does not exist. Please check the data-popover-target attribute.'))})}s.initPopovers=d,typeof window<"u"&&(window.Popover=y,window.initPopovers=d),s.default=y},247:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initTabs=void 0;var c=a(423),v={defaultTabId:null,activeClasses:"text-blue-600 hover:text-blue-600 dark:text-blue-500 dark:hover:text-blue-500 border-blue-600 dark:border-blue-500",inactiveClasses:"dark:border-transparent text-gray-500 hover:text-gray-600 dark:text-gray-400 border-gray-100 hover:border-gray-300 dark:border-gray-700 dark:hover:text-gray-300",onShow:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=[]),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._tabsEl=d,this._items=g,this._activeTab=b?this.getTab(b.defaultTabId):null,this._options=u(u({},v),b),this._initialized=!1,this.init(),c.default.addInstance("Tabs",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._items.length&&!this._initialized&&(this._activeTab||this.setActiveTab(this._items[0]),this.show(this._activeTab.id,!0),this._items.map(function(g){g.triggerEl.addEventListener("click",function(b){b.preventDefault(),d.show(g.id)})}))},y.prototype.destroy=function(){this._initialized&&(this._initialized=!1)},y.prototype.removeInstance=function(){this.destroy(),c.default.removeInstance("Tabs",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getActiveTab=function(){return this._activeTab},y.prototype.setActiveTab=function(d){this._activeTab=d},y.prototype.getTab=function(d){return this._items.filter(function(g){return g.id===d})[0]},y.prototype.show=function(d,g){var b,E,P=this;g===void 0&&(g=!1);var o=this.getTab(d);o===this._activeTab&&!g||(this._items.map(function(h){var f,_;h!==o&&((f=h.triggerEl.classList).remove.apply(f,P._options.activeClasses.split(" ")),(_=h.triggerEl.classList).add.apply(_,P._options.inactiveClasses.split(" ")),h.targetEl.classList.add("hidden"),h.triggerEl.setAttribute("aria-selected","false"))}),(b=o.triggerEl.classList).add.apply(b,this._options.activeClasses.split(" ")),(E=o.triggerEl.classList).remove.apply(E,this._options.inactiveClasses.split(" ")),o.triggerEl.setAttribute("aria-selected","true"),o.targetEl.classList.remove("hidden"),this.setActiveTab(o),this._options.onShow(this,o))},y.prototype.updateOnShow=function(d){this._options.onShow=d},y}();function N(){document.querySelectorAll("[data-tabs-toggle]").forEach(function(y){var d=[],g=y.getAttribute("data-tabs-active-classes"),b=y.getAttribute("data-tabs-inactive-classes"),E=null;y.querySelectorAll('[role="tab"]').forEach(function(P){var o=P.getAttribute("aria-selected")==="true",h={id:P.getAttribute("data-tabs-target"),triggerEl:P,targetEl:document.querySelector(P.getAttribute("data-tabs-target"))};d.push(h),o&&(E=h.id)}),new A(y,d,{defaultTabId:E,activeClasses:g||v.activeClasses,inactiveClasses:b||v.inactiveClasses})})}s.initTabs=N,typeof window<"u"&&(window.Tabs=A,window.initTabs=N),s.default=A},671:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(g){for(var b,E=1,P=arguments.length;E<P;E++){b=arguments[E];for(var o in b)Object.prototype.hasOwnProperty.call(b,o)&&(g[o]=b[o])}return g},u.apply(this,arguments)},c=this&&this.__spreadArray||function(g,b,E){if(E||arguments.length===2)for(var P=0,o=b.length,h;P<o;P++)(h||!(P in b))&&(h||(h=Array.prototype.slice.call(b,0,P)),h[P]=b[P]);return g.concat(h||Array.prototype.slice.call(b))};Object.defineProperty(s,"__esModule",{value:!0}),s.initTooltips=void 0;var v=a(853),k=a(423),A={placement:"top",triggerType:"hover",onShow:function(){},onHide:function(){},onToggle:function(){}},N={id:null,override:!0},y=function(){function g(b,E,P,o){b===void 0&&(b=null),E===void 0&&(E=null),P===void 0&&(P=A),o===void 0&&(o=N),this._instanceId=o.id?o.id:b.id,this._targetEl=b,this._triggerEl=E,this._options=u(u({},A),P),this._popperInstance=null,this._visible=!1,this._initialized=!1,this.init(),k.default.addInstance("Tooltip",this,this._instanceId,o.override)}return g.prototype.init=function(){this._triggerEl&&this._targetEl&&!this._initialized&&(this._setupEventListeners(),this._popperInstance=this._createPopperInstance(),this._initialized=!0)},g.prototype.destroy=function(){var b=this;if(this._initialized){var E=this._getTriggerEvents();E.showEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._showHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._hideHandler)}),this._removeKeydownListener(),this._removeClickOutsideListener(),this._popperInstance&&this._popperInstance.destroy(),this._initialized=!1}},g.prototype.removeInstance=function(){k.default.removeInstance("Tooltip",this._instanceId)},g.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},g.prototype._setupEventListeners=function(){var b=this,E=this._getTriggerEvents();this._showHandler=function(){b.show()},this._hideHandler=function(){b.hide()},E.showEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._showHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._hideHandler)})},g.prototype._createPopperInstance=function(){return(0,v.createPopper)(this._triggerEl,this._targetEl,{placement:this._options.placement,modifiers:[{name:"offset",options:{offset:[0,8]}}]})},g.prototype._getTriggerEvents=function(){switch(this._options.triggerType){case"hover":return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]};case"click":return{showEvents:["click","focus"],hideEvents:["focusout","blur"]};case"none":return{showEvents:[],hideEvents:[]};default:return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]}}},g.prototype._setupKeydownListener=function(){var b=this;this._keydownEventListener=function(E){E.key==="Escape"&&b.hide()},document.body.addEventListener("keydown",this._keydownEventListener,!0)},g.prototype._removeKeydownListener=function(){document.body.removeEventListener("keydown",this._keydownEventListener,!0)},g.prototype._setupClickOutsideListener=function(){var b=this;this._clickOutsideEventListener=function(E){b._handleClickOutside(E,b._targetEl)},document.body.addEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._removeClickOutsideListener=function(){document.body.removeEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._handleClickOutside=function(b,E){var P=b.target;P!==E&&!E.contains(P)&&!this._triggerEl.contains(P)&&this.isVisible()&&this.hide()},g.prototype.isVisible=function(){return this._visible},g.prototype.toggle=function(){this.isVisible()?this.hide():this.show()},g.prototype.show=function(){this._targetEl.classList.remove("opacity-0","invisible"),this._targetEl.classList.add("opacity-100","visible"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!0}],!1)})}),this._setupClickOutsideListener(),this._setupKeydownListener(),this._popperInstance.update(),this._visible=!0,this._options.onShow(this)},g.prototype.hide=function(){this._targetEl.classList.remove("opacity-100","visible"),this._targetEl.classList.add("opacity-0","invisible"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!1}],!1)})}),this._removeClickOutsideListener(),this._removeKeydownListener(),this._visible=!1,this._options.onHide(this)},g.prototype.updateOnShow=function(b){this._options.onShow=b},g.prototype.updateOnHide=function(b){this._options.onHide=b},g.prototype.updateOnToggle=function(b){this._options.onToggle=b},g}();function d(){document.querySelectorAll("[data-tooltip-target]").forEach(function(g){var b=g.getAttribute("data-tooltip-target"),E=document.getElementById(b);if(E){var P=g.getAttribute("data-tooltip-trigger"),o=g.getAttribute("data-tooltip-placement");new y(E,g,{placement:o||A.placement,triggerType:P||A.triggerType})}else console.error('The tooltip element with id "'.concat(b,'" does not exist. Please check the data-tooltip-target attribute.'))})}s.initTooltips=d,typeof window<"u"&&(window.Tooltip=y,window.initTooltips=d),s.default=y},947:function(r,s){Object.defineProperty(s,"__esModule",{value:!0});var a=function(){function u(c,v){v===void 0&&(v=[]),this._eventType=c,this._eventFunctions=v}return u.prototype.init=function(){var c=this;this._eventFunctions.forEach(function(v){typeof window<"u"&&window.addEventListener(c._eventType,v)})},u}();s.default=a},423:function(r,s){Object.defineProperty(s,"__esModule",{value:!0});var a=function(){function c(){this._instances={Accordion:{},Carousel:{},Collapse:{},Dial:{},Dismiss:{},Drawer:{},Dropdown:{},Modal:{},Popover:{},Tabs:{},Tooltip:{},InputCounter:{},CopyClipboard:{},Datepicker:{}}}return c.prototype.addInstance=function(v,k,A,N){if(N===void 0&&(N=!1),!this._instances[v])return console.warn("Flowbite: Component ".concat(v," does not exist.")),!1;if(this._instances[v][A]&&!N){console.warn("Flowbite: Instance with ID ".concat(A," already exists."));return}N&&this._instances[v][A]&&this._instances[v][A].destroyAndRemoveInstance(),this._instances[v][A||this._generateRandomId()]=k},c.prototype.getAllInstances=function(){return this._instances},c.prototype.getInstances=function(v){return this._instances[v]?this._instances[v]:(console.warn("Flowbite: Component ".concat(v," does not exist.")),!1)},c.prototype.getInstance=function(v,k){if(this._componentAndInstanceCheck(v,k)){if(!this._instances[v][k]){console.warn("Flowbite: Instance with ID ".concat(k," does not exist."));return}return this._instances[v][k]}},c.prototype.destroyAndRemoveInstance=function(v,k){this._componentAndInstanceCheck(v,k)&&(this.destroyInstanceObject(v,k),this.removeInstance(v,k))},c.prototype.removeInstance=function(v,k){this._componentAndInstanceCheck(v,k)&&delete this._instances[v][k]},c.prototype.destroyInstanceObject=function(v,k){this._componentAndInstanceCheck(v,k)&&this._instances[v][k].destroy()},c.prototype.instanceExists=function(v,k){return!(!this._instances[v]||!this._instances[v][k])},c.prototype._generateRandomId=function(){return Math.random().toString(36).substr(2,9)},c.prototype._componentAndInstanceCheck=function(v,k){return this._instances[v]?this._instances[v][k]?!0:(console.warn("Flowbite: Instance with ID ".concat(k," does not exist.")),!1):(console.warn("Flowbite: Component ".concat(v," does not exist.")),!1)},c}(),u=new a;s.default=u,typeof window<"u"&&(window.FlowbiteInstances=u)}},e={};function t(r){var s=e[r];if(s!==void 0)return s.exports;var a=e[r]={exports:{}};return i[r].call(a.exports,a,a.exports,t),a.exports}(function(){t.d=function(r,s){for(var a in s)t.o(s,a)&&!t.o(r,a)&&Object.defineProperty(r,a,{enumerable:!0,get:s[a]})}})(),function(){t.o=function(r,s){return Object.prototype.hasOwnProperty.call(r,s)}}(),function(){t.r=function(r){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})}}();var n={};return function(){var r=n;Object.defineProperty(r,"__esModule",{value:!0});var s=t(902),a=t(33),u=t(922),c=t(556),v=t(791),k=t(340),A=t(316),N=t(16),y=t(903),d=t(247),g=t(671),b=t(656),E=t(673),P=t(132);t(311);var o=t(947),h=new o.default("phx:page-loading-stop",[s.initAccordions,u.initCollapses,a.initCarousels,v.initDismisses,A.initDropdowns,N.initModals,k.initDrawers,d.initTabs,g.initTooltips,y.initPopovers,c.initDials,b.initInputCounters,E.initCopyClipboards,P.initDatepickers]);h.init();var f=new o.default("load",[s.initAccordions,u.initCollapses,a.initCarousels,v.initDismisses,A.initDropdowns,N.initModals,k.initDrawers,d.initTabs,g.initTooltips,y.initPopovers,c.initDials,b.initInputCounters,E.initCopyClipboards,P.initDatepickers]);f.init(),r.default={Accordion:s.default,Carousel:a.default,Collapse:u.default,Dial:c.default,Drawer:k.default,Dismiss:v.default,Dropdown:A.default,Modal:N.default,Popover:y.default,Tabs:d.default,Tooltip:g.default,InputCounter:b.default,CopyClipboard:E.default,Datepicker:P.default,Events:o.default}}(),n}()})});(function(){var i=e();function e(){if(typeof window.CustomEvent=="function")return window.CustomEvent;function r(s,a){a=a||{bubbles:!1,cancelable:!1,detail:void 0};var u=document.createEvent("CustomEvent");return u.initCustomEvent(s,a.bubbles,a.cancelable,a.detail),u}return r.prototype=window.Event.prototype,r}function t(r,s){var a=document.createElement("input");return a.type="hidden",a.name=r,a.value=s,a}function n(r,s){var a=r.getAttribute("data-to"),u=t("_method",r.getAttribute("data-method")),c=t("_csrf_token",r.getAttribute("data-csrf")),v=document.createElement("form"),k=document.createElement("input"),A=r.getAttribute("target");v.method=r.getAttribute("data-method")==="get"?"get":"post",v.action=a,v.style.display="none",A?v.target=A:s&&(v.target="_blank"),v.appendChild(c),v.appendChild(u),document.body.appendChild(v),k.type="submit",v.appendChild(k),k.click()}window.addEventListener("click",function(r){var s=r.target;if(!r.defaultPrevented)for(;s&&s.getAttribute;){var a=new i("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!s.dispatchEvent(a))return r.preventDefault(),r.stopImmediatePropagation(),!1;if(s.getAttribute("data-method")&&s.getAttribute("data-to"))return n(s,r.metaKey||r.shiftKey),r.preventDefault(),!1;s=s.parentNode}},!1),window.addEventListener("phoenix.link.click",function(r){var s=r.target.getAttribute("data-confirm");s&&!window.confirm(s)&&r.preventDefault()},!1)})();var wr=i=>typeof i=="function"?i:function(){return i},Vc=typeof self<"u"?self:null,yr=typeof window<"u"?window:null,yn=Vc||yr||yn,Uc="2.0.0",vi={connecting:0,open:1,closing:2,closed:3},Wc=1e4,$c=1e3,Ht={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},xi={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},Ua={longpoll:"longpoll",websocket:"websocket"},qc={complete:4},bs=class{constructor(i,e,t,n){this.channel=i,this.event=e,this.payload=t||function(){return{}},this.receivedResp=null,this.timeout=n,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}resend(i){this.timeout=i,this.reset(),this.send()}send(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}receive(i,e){return this.hasReceived(i)&&e(this.receivedResp.response),this.recHooks.push({status:i,callback:e}),this}reset(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}matchReceive({status:i,response:e,_ref:t}){this.recHooks.filter(n=>n.status===i).forEach(n=>n.callback(e))}cancelRefEvent(){this.refEvent&&this.channel.off(this.refEvent)}cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}startTimeout(){this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,i=>{this.cancelRefEvent(),this.cancelTimeout(),this.receivedResp=i,this.matchReceive(i)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}hasReceived(i){return this.receivedResp&&this.receivedResp.status===i}trigger(i,e){this.channel.trigger(this.refEvent,{status:i,response:e})}},Vu=class{constructor(i,e){this.callback=i,this.timerCalc=e,this.timer=null,this.tries=0}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}},Kc=class{constructor(i,e,t){this.state=Ht.closed,this.topic=i,this.params=wr(e||{}),this.socket=t,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new bs(this,xi.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new Vu(()=>{this.socket.isConnected()&&this.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(()=>this.rejoinTimer.reset())),this.stateChangeRefs.push(this.socket.onOpen(()=>{this.rejoinTimer.reset(),this.isErrored()&&this.rejoin()})),this.joinPush.receive("ok",()=>{this.state=Ht.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(n=>n.send()),this.pushBuffer=[]}),this.joinPush.receive("error",()=>{this.state=Ht.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.onClose(()=>{this.rejoinTimer.reset(),this.socket.hasLogger()&&this.socket.log("channel",`close ${this.topic} ${this.joinRef()}`),this.state=Ht.closed,this.socket.remove(this)}),this.onError(n=>{this.socket.hasLogger()&&this.socket.log("channel",`error ${this.topic}`,n),this.isJoining()&&this.joinPush.reset(),this.state=Ht.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",()=>{this.socket.hasLogger()&&this.socket.log("channel",`timeout ${this.topic} (${this.joinRef()})`,this.joinPush.timeout),new bs(this,xi.leave,wr({}),this.timeout).send(),this.state=Ht.errored,this.joinPush.reset(),this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.on(xi.reply,(n,r)=>{this.trigger(this.replyEventName(r),n)})}join(i=this.timeout){if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=i,this.joinedOnce=!0,this.rejoin(),this.joinPush}onClose(i){this.on(xi.close,i)}onError(i){return this.on(xi.error,e=>i(e))}on(i,e){let t=this.bindingRef++;return this.bindings.push({event:i,ref:t,callback:e}),t}off(i,e){this.bindings=this.bindings.filter(t=>!(t.event===i&&(typeof e>"u"||e===t.ref)))}canPush(){return this.socket.isConnected()&&this.isJoined()}push(i,e,t=this.timeout){if(e=e||{},!this.joinedOnce)throw new Error(`tried to push '${i}' to '${this.topic}' before joining. Use channel.join() before pushing events`);let n=new bs(this,i,function(){return e},t);return this.canPush()?n.send():(n.startTimeout(),this.pushBuffer.push(n)),n}leave(i=this.timeout){this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=Ht.leaving;let e=()=>{this.socket.hasLogger()&&this.socket.log("channel",`leave ${this.topic}`),this.trigger(xi.close,"leave")},t=new bs(this,xi.leave,wr({}),i);return t.receive("ok",()=>e()).receive("timeout",()=>e()),t.send(),this.canPush()||t.trigger("ok",{}),t}onMessage(i,e,t){return e}isMember(i,e,t,n){return this.topic!==i?!1:n&&n!==this.joinRef()?(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:i,event:e,payload:t,joinRef:n}),!1):!0}joinRef(){return this.joinPush.ref}rejoin(i=this.timeout){this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=Ht.joining,this.joinPush.resend(i))}trigger(i,e,t,n){let r=this.onMessage(i,e,t,n);if(e&&!r)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");let s=this.bindings.filter(a=>a.event===i);for(let a=0;a<s.length;a++)s[a].callback(r,t,n||this.joinRef())}replyEventName(i){return`chan_reply_${i}`}isClosed(){return this.state===Ht.closed}isErrored(){return this.state===Ht.errored}isJoined(){return this.state===Ht.joined}isJoining(){return this.state===Ht.joining}isLeaving(){return this.state===Ht.leaving}},ws=class{static request(i,e,t,n,r,s,a){if(yn.XDomainRequest){let u=new yn.XDomainRequest;return this.xdomainRequest(u,i,e,n,r,s,a)}else{let u=new yn.XMLHttpRequest;return this.xhrRequest(u,i,e,t,n,r,s,a)}}static xdomainRequest(i,e,t,n,r,s,a){return i.timeout=r,i.open(e,t),i.onload=()=>{let u=this.parseJSON(i.responseText);a&&a(u)},s&&(i.ontimeout=s),i.onprogress=()=>{},i.send(n),i}static xhrRequest(i,e,t,n,r,s,a,u){return i.open(e,t,!0),i.timeout=s,i.setRequestHeader("Content-Type",n),i.onerror=()=>u&&u(null),i.onreadystatechange=()=>{if(i.readyState===qc.complete&&u){let c=this.parseJSON(i.responseText);u(c)}},a&&(i.ontimeout=a),i.send(r),i}static parseJSON(i){if(!i||i==="")return null;try{return JSON.parse(i)}catch{return console&&console.log("failed to parse JSON response",i),null}}static serialize(i,e){let t=[];for(var n in i){if(!Object.prototype.hasOwnProperty.call(i,n))continue;let r=e?`${e}[${n}]`:n,s=i[n];typeof s=="object"?t.push(this.serialize(s,r)):t.push(encodeURIComponent(r)+"="+encodeURIComponent(s))}return t.join("&")}static appendParams(i,e){if(Object.keys(e).length===0)return i;let t=i.match(/\?/)?"&":"?";return`${i}${t}${this.serialize(e)}`}},Jc=i=>{let e="",t=new Uint8Array(i),n=t.byteLength;for(let r=0;r<n;r++)e+=String.fromCharCode(t[r]);return btoa(e)},br=class{constructor(i){this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.reqs=new Set,this.awaitingBatchAck=!1,this.currentBatch=null,this.currentBatchTimer=null,this.batchBuffer=[],this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(i),this.readyState=vi.connecting,setTimeout(()=>this.poll(),0)}normalizeEndpoint(i){return i.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+Ua.websocket),"$1/"+Ua.longpoll)}endpointURL(){return ws.appendParams(this.pollEndpoint,{token:this.token})}closeAndRetry(i,e,t){this.close(i,e,t),this.readyState=vi.connecting}ontimeout(){this.onerror("timeout"),this.closeAndRetry(1005,"timeout",!1)}isActive(){return this.readyState===vi.open||this.readyState===vi.connecting}poll(){this.ajax("GET","application/json",null,()=>this.ontimeout(),i=>{if(i){var{status:e,token:t,messages:n}=i;this.token=t}else e=0;switch(e){case 200:n.forEach(r=>{setTimeout(()=>this.onmessage({data:r}),0)}),this.poll();break;case 204:this.poll();break;case 410:this.readyState=vi.open,this.onopen({}),this.poll();break;case 403:this.onerror(403),this.close(1008,"forbidden",!1);break;case 0:case 500:this.onerror(500),this.closeAndRetry(1011,"internal server error",500);break;default:throw new Error(`unhandled poll status ${e}`)}})}send(i){typeof i!="string"&&(i=Jc(i)),this.currentBatch?this.currentBatch.push(i):this.awaitingBatchAck?this.batchBuffer.push(i):(this.currentBatch=[i],this.currentBatchTimer=setTimeout(()=>{this.batchSend(this.currentBatch),this.currentBatch=null},0))}batchSend(i){this.awaitingBatchAck=!0,this.ajax("POST","application/x-ndjson",i.join(`
`),()=>this.onerror("timeout"),e=>{this.awaitingBatchAck=!1,!e||e.status!==200?(this.onerror(e&&e.status),this.closeAndRetry(1011,"internal server error",!1)):this.batchBuffer.length>0&&(this.batchSend(this.batchBuffer),this.batchBuffer=[])})}close(i,e,t){for(let r of this.reqs)r.abort();this.readyState=vi.closed;let n=Object.assign({code:1e3,reason:void 0,wasClean:!0},{code:i,reason:e,wasClean:t});this.batchBuffer=[],clearTimeout(this.currentBatchTimer),this.currentBatchTimer=null,typeof CloseEvent<"u"?this.onclose(new CloseEvent("close",n)):this.onclose(n)}ajax(i,e,t,n,r){let s,a=()=>{this.reqs.delete(s),n()};s=ws.request(i,this.endpointURL(),e,t,this.timeout,a,u=>{this.reqs.delete(s),this.isActive()&&r(u)}),this.reqs.add(s)}};var ys={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode(i,e){if(i.payload.constructor===ArrayBuffer)return e(this.binaryEncode(i));{let t=[i.join_ref,i.ref,i.topic,i.event,i.payload];return e(JSON.stringify(t))}},decode(i,e){if(i.constructor===ArrayBuffer)return e(this.binaryDecode(i));{let[t,n,r,s,a]=JSON.parse(i);return e({join_ref:t,ref:n,topic:r,event:s,payload:a})}},binaryEncode(i){let{join_ref:e,ref:t,event:n,topic:r,payload:s}=i,a=this.META_LENGTH+e.length+t.length+r.length+n.length,u=new ArrayBuffer(this.HEADER_LENGTH+a),c=new DataView(u),v=0;c.setUint8(v++,this.KINDS.push),c.setUint8(v++,e.length),c.setUint8(v++,t.length),c.setUint8(v++,r.length),c.setUint8(v++,n.length),Array.from(e,A=>c.setUint8(v++,A.charCodeAt(0))),Array.from(t,A=>c.setUint8(v++,A.charCodeAt(0))),Array.from(r,A=>c.setUint8(v++,A.charCodeAt(0))),Array.from(n,A=>c.setUint8(v++,A.charCodeAt(0)));var k=new Uint8Array(u.byteLength+s.byteLength);return k.set(new Uint8Array(u),0),k.set(new Uint8Array(s),u.byteLength),k.buffer},binaryDecode(i){let e=new DataView(i),t=e.getUint8(0),n=new TextDecoder;switch(t){case this.KINDS.push:return this.decodePush(i,e,n);case this.KINDS.reply:return this.decodeReply(i,e,n);case this.KINDS.broadcast:return this.decodeBroadcast(i,e,n)}},decodePush(i,e,t){let n=e.getUint8(1),r=e.getUint8(2),s=e.getUint8(3),a=this.HEADER_LENGTH+this.META_LENGTH-1,u=t.decode(i.slice(a,a+n));a=a+n;let c=t.decode(i.slice(a,a+r));a=a+r;let v=t.decode(i.slice(a,a+s));a=a+s;let k=i.slice(a,i.byteLength);return{join_ref:u,ref:null,topic:c,event:v,payload:k}},decodeReply(i,e,t){let n=e.getUint8(1),r=e.getUint8(2),s=e.getUint8(3),a=e.getUint8(4),u=this.HEADER_LENGTH+this.META_LENGTH,c=t.decode(i.slice(u,u+n));u=u+n;let v=t.decode(i.slice(u,u+r));u=u+r;let k=t.decode(i.slice(u,u+s));u=u+s;let A=t.decode(i.slice(u,u+a));u=u+a;let N=i.slice(u,i.byteLength),y={status:A,response:N};return{join_ref:c,ref:v,topic:k,event:xi.reply,payload:y}},decodeBroadcast(i,e,t){let n=e.getUint8(1),r=e.getUint8(2),s=this.HEADER_LENGTH+2,a=t.decode(i.slice(s,s+n));s=s+n;let u=t.decode(i.slice(s,s+r));s=s+r;let c=i.slice(s,i.byteLength);return{join_ref:null,ref:null,topic:a,event:u,payload:c}}},Uu=class{constructor(i,e={}){this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=e.timeout||Wc,this.transport=e.transport||yn.WebSocket||br,this.primaryPassedHealthCheck=!1,this.longPollFallbackMs=e.longPollFallbackMs,this.fallbackTimer=null,this.sessionStore=e.sessionStorage||yn&&yn.sessionStorage,this.establishedConnections=0,this.defaultEncoder=ys.encode.bind(ys),this.defaultDecoder=ys.decode.bind(ys),this.closeWasClean=!1,this.binaryType=e.binaryType||"arraybuffer",this.connectClock=1,this.transport!==br?(this.encode=e.encode||this.defaultEncoder,this.decode=e.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder);let t=null;yr&&yr.addEventListener&&(yr.addEventListener("pagehide",n=>{this.conn&&(this.disconnect(),t=this.connectClock)}),yr.addEventListener("pageshow",n=>{t===this.connectClock&&(t=null,this.connect())})),this.heartbeatIntervalMs=e.heartbeatIntervalMs||3e4,this.rejoinAfterMs=n=>e.rejoinAfterMs?e.rejoinAfterMs(n):[1e3,2e3,5e3][n-1]||1e4,this.reconnectAfterMs=n=>e.reconnectAfterMs?e.reconnectAfterMs(n):[10,50,100,150,200,250,500,1e3,2e3][n-1]||5e3,this.logger=e.logger||null,!this.logger&&e.debug&&(this.logger=(n,r,s)=>{console.log(`${n}: ${r}`,s)}),this.longpollerTimeout=e.longpollerTimeout||2e4,this.params=wr(e.params||{}),this.endPoint=`${i}/${Ua.websocket}`,this.vsn=e.vsn||Uc,this.heartbeatTimeoutTimer=null,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new Vu(()=>{this.teardown(()=>this.connect())},this.reconnectAfterMs)}getLongPollTransport(){return br}replaceTransport(i){this.connectClock++,this.closeWasClean=!0,clearTimeout(this.fallbackTimer),this.reconnectTimer.reset(),this.conn&&(this.conn.close(),this.conn=null),this.transport=i}protocol(){return location.protocol.match(/^https/)?"wss":"ws"}endPointURL(){let i=ws.appendParams(ws.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return i.charAt(0)!=="/"?i:i.charAt(1)==="/"?`${this.protocol()}:${i}`:`${this.protocol()}://${location.host}${i}`}disconnect(i,e,t){this.connectClock++,this.closeWasClean=!0,clearTimeout(this.fallbackTimer),this.reconnectTimer.reset(),this.teardown(i,e,t)}connect(i){i&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=wr(i)),!this.conn&&(this.longPollFallbackMs&&this.transport!==br?this.connectWithFallback(br,this.longPollFallbackMs):this.transportConnect())}log(i,e,t){this.logger&&this.logger(i,e,t)}hasLogger(){return this.logger!==null}onOpen(i){let e=this.makeRef();return this.stateChangeCallbacks.open.push([e,i]),e}onClose(i){let e=this.makeRef();return this.stateChangeCallbacks.close.push([e,i]),e}onError(i){let e=this.makeRef();return this.stateChangeCallbacks.error.push([e,i]),e}onMessage(i){let e=this.makeRef();return this.stateChangeCallbacks.message.push([e,i]),e}ping(i){if(!this.isConnected())return!1;let e=this.makeRef(),t=Date.now();this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:e});let n=this.onMessage(r=>{r.ref===e&&(this.off([n]),i(Date.now()-t))});return!0}transportConnect(){this.connectClock++,this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=()=>this.onConnOpen(),this.conn.onerror=i=>this.onConnError(i),this.conn.onmessage=i=>this.onConnMessage(i),this.conn.onclose=i=>this.onConnClose(i)}getSession(i){return this.sessionStore&&this.sessionStore.getItem(i)}storeSession(i,e){this.sessionStore&&this.sessionStore.setItem(i,e)}connectWithFallback(i,e=2500){clearTimeout(this.fallbackTimer);let t=!1,n=!0,r,s,a=u=>{this.log("transport",`falling back to ${i.name}...`,u),this.off([r,s]),n=!1,this.replaceTransport(i),this.transportConnect()};if(this.getSession(`phx:fallback:${i.name}`))return a("memorized");this.fallbackTimer=setTimeout(a,e),s=this.onError(u=>{this.log("transport","error",u),n&&!t&&(clearTimeout(this.fallbackTimer),a(u))}),this.onOpen(()=>{if(t=!0,!n)return this.primaryPassedHealthCheck||this.storeSession(`phx:fallback:${i.name}`,"true"),this.log("transport",`established ${i.name} fallback`);clearTimeout(this.fallbackTimer),this.fallbackTimer=setTimeout(a,e),this.ping(u=>{this.log("transport","connected to primary after",u),this.primaryPassedHealthCheck=!0,clearTimeout(this.fallbackTimer)})}),this.transportConnect()}clearHeartbeats(){clearTimeout(this.heartbeatTimer),clearTimeout(this.heartbeatTimeoutTimer)}onConnOpen(){this.hasLogger()&&this.log("transport",`${this.transport.name} connected to ${this.endPointURL()}`),this.closeWasClean=!1,this.establishedConnections++,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(([,i])=>i())}heartbeatTimeout(){this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.triggerChanError(),this.closeWasClean=!1,this.teardown(()=>this.reconnectTimer.scheduleTimeout(),$c,"heartbeat timeout"))}resetHeartbeat(){this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,this.clearHeartbeats(),this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs))}teardown(i,e,t){if(!this.conn)return i&&i();this.waitForBufferDone(()=>{this.conn&&(e?this.conn.close(e,t||""):this.conn.close()),this.waitForSocketClosed(()=>{this.conn&&(this.conn.onopen=function(){},this.conn.onerror=function(){},this.conn.onmessage=function(){},this.conn.onclose=function(){},this.conn=null),i&&i()})})}waitForBufferDone(i,e=1){if(e===5||!this.conn||!this.conn.bufferedAmount){i();return}setTimeout(()=>{this.waitForBufferDone(i,e+1)},150*e)}waitForSocketClosed(i,e=1){if(e===5||!this.conn||this.conn.readyState===vi.closed){i();return}setTimeout(()=>{this.waitForSocketClosed(i,e+1)},150*e)}onConnClose(i){let e=i&&i.code;this.hasLogger()&&this.log("transport","close",i),this.triggerChanError(),this.clearHeartbeats(),!this.closeWasClean&&e!==1e3&&this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(([,t])=>t(i))}onConnError(i){this.hasLogger()&&this.log("transport",i);let e=this.transport,t=this.establishedConnections;this.stateChangeCallbacks.error.forEach(([,n])=>{n(i,e,t)}),(e===this.transport||t>0)&&this.triggerChanError()}triggerChanError(){this.channels.forEach(i=>{i.isErrored()||i.isLeaving()||i.isClosed()||i.trigger(xi.error)})}connectionState(){switch(this.conn&&this.conn.readyState){case vi.connecting:return"connecting";case vi.open:return"open";case vi.closing:return"closing";default:return"closed"}}isConnected(){return this.connectionState()==="open"}remove(i){this.off(i.stateChangeRefs),this.channels=this.channels.filter(e=>e!==i)}off(i){for(let e in this.stateChangeCallbacks)this.stateChangeCallbacks[e]=this.stateChangeCallbacks[e].filter(([t])=>i.indexOf(t)===-1)}channel(i,e={}){let t=new Kc(i,e,this);return this.channels.push(t),t}push(i){if(this.hasLogger()){let{topic:e,event:t,payload:n,ref:r,join_ref:s}=i;this.log("push",`${e} ${t} (${s}, ${r})`,n)}this.isConnected()?this.encode(i,e=>this.conn.send(e)):this.sendBuffer.push(()=>this.encode(i,e=>this.conn.send(e)))}makeRef(){let i=this.ref+1;return i===this.ref?this.ref=0:this.ref=i,this.ref.toString()}sendHeartbeat(){this.pendingHeartbeatRef&&!this.isConnected()||(this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatTimeoutTimer=setTimeout(()=>this.heartbeatTimeout(),this.heartbeatIntervalMs))}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(i=>i()),this.sendBuffer=[])}onConnMessage(i){this.decode(i.data,e=>{let{topic:t,event:n,payload:r,ref:s,join_ref:a}=e;s&&s===this.pendingHeartbeatRef&&(this.clearHeartbeats(),this.pendingHeartbeatRef=null,this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)),this.hasLogger()&&this.log("receive",`${r.status||""} ${t} ${n} ${s&&"("+s+")"||""}`,r);for(let u=0;u<this.channels.length;u++){let c=this.channels[u];c.isMember(t,n,r,a)&&c.trigger(n,r,s,a)}for(let u=0;u<this.stateChangeCallbacks.message.length;u++){let[,c]=this.stateChangeCallbacks.message[u];c(e)}})}leaveOpenTopic(i){let e=this.channels.find(t=>t.topic===i&&(t.isJoined()||t.isJoining()));e&&(this.hasLogger()&&this.log("transport",`leaving duplicate topic "${i}"`),e.leave())}};var yl="consecutive-reloads",Gc=10,Xc=5e3,Yc=1e4,Zc=3e4,wl=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading","phx-hook-loading"],Ri="data-phx-component",Wa="data-phx-link",Qc="track-static",eh="data-phx-link-state",Qn="data-phx-ref-loading",Gt="data-phx-ref-src",tt="data-phx-ref-lock",_l="track-uploads",Pi="data-phx-upload-ref",io="data-phx-preflighted-refs",th="data-phx-done-refs",Wu="drop-target",Ya="data-phx-active-refs",Ts="phx:live-file:updated",kl="data-phx-skip",Al="data-phx-id",$u="data-phx-prune",qu="phx-connected",wn="phx-loading",Xn="phx-error",Ku="phx-client-error",_r="phx-server-error",An="data-phx-parent-id",no="data-phx-main",en="data-phx-root-id",Za="viewport-top",Qa="viewport-bottom",ih="trigger-action",Ls="phx-has-focused",nh=["text","textarea","number","email","password","search","tel","url","date","time","datetime-local","color","range"],El=["checkbox","radio"],Rr="phx-has-submitted",_i="data-phx-session",En=`[${_i}]`,Ju="data-phx-sticky",kn="data-phx-static",eo="data-phx-readonly",Zn="data-phx-disabled",Gu="disable-with",Rs="data-phx-disable-with-restore",kr="hook",rh="debounce",sh="throttle",Ps="update",$a="stream",Ar="data-phx-stream",ah="key",bi="phxPrivate",Xu="auto-recover",_s="phx:live-socket:debug",qa="phx:live-socket:profiling",Ka="phx:live-socket:latency-sim",ks="phx:nav-history-position",oh="progress",Yu="mounted",Zu="__phoenix_reload_status__",uh=1,Qu=3,lh=200,dh="phx-",ch=3e4,Er="debounce-trigger",Cr="throttled",el="debounce-prev-key",hh={debounce:300,throttle:300},tl=[Qn,Gt,tt],As="d",yi="s",Ja="r",mt="c",il="e",nl="r",rl="t",fh="p",sl="stream",ph=class{constructor(i,e,t){let{chunk_size:n,chunk_timeout:r}=e;this.liveSocket=t,this.entry=i,this.offset=0,this.chunkSize=n,this.chunkTimeout=r,this.chunkTimer=null,this.errored=!1,this.uploadChannel=t.channel(`lvu:${i.ref}`,{token:i.metadata()})}error(i){this.errored||(this.uploadChannel.leave(),this.errored=!0,clearTimeout(this.chunkTimer),this.entry.error(i))}upload(){this.uploadChannel.onError(i=>this.error(i)),this.uploadChannel.join().receive("ok",i=>this.readNextChunk()).receive("error",i=>this.error(i))}isDone(){return this.offset>=this.entry.file.size}readNextChunk(){let i=new window.FileReader,e=this.entry.file.slice(this.offset,this.chunkSize+this.offset);i.onload=t=>{if(t.target.error===null)this.offset+=t.target.result.byteLength,this.pushChunk(t.target.result);else return Lt("Read error: "+t.target.error)},i.readAsArrayBuffer(e)}pushChunk(i){this.uploadChannel.isJoined()&&this.uploadChannel.push("chunk",i,this.chunkTimeout).receive("ok",()=>{this.entry.progress(this.offset/this.entry.file.size*100),this.isDone()||(this.chunkTimer=setTimeout(()=>this.readNextChunk(),this.liveSocket.getLatencySim()||0))}).receive("error",({reason:e})=>this.error(e))}},Lt=(i,e)=>console.error&&console.error(i,e),Li=i=>{let e=typeof i;return e==="number"||e==="string"&&/^(0|[1-9]\d*)$/.test(i)};function gh(){let i=new Set,e=document.querySelectorAll("*[id]");for(let t=0,n=e.length;t<n;t++)i.has(e[t].id)?console.error(`Multiple IDs detected: ${e[t].id}. Ensure unique element ids.`):i.add(e[t].id)}function mh(i){let e=new Set;Object.keys(i).forEach(t=>{let n=document.getElementById(t);n&&n.parentElement&&n.parentElement.getAttribute("phx-update")!=="stream"&&e.add(`The stream container with id "${n.parentElement.id}" is missing the phx-update="stream" attribute. Ensure it is set for streams to work properly.`)}),e.forEach(t=>console.error(t))}var vh=(i,e,t,n)=>{i.liveSocket.isDebugEnabled()&&console.log(`${i.id} ${e}: ${t} - `,n)},Sr=i=>typeof i=="function"?i:function(){return i},xs=i=>JSON.parse(JSON.stringify(i)),Lr=(i,e,t)=>{do{if(i.matches(`[${e}]`)&&!i.disabled)return i;i=i.parentElement||i.parentNode}while(i!==null&&i.nodeType===1&&!(t&&t.isSameNode(i)||i.matches(En)));return null},Yn=i=>i!==null&&typeof i=="object"&&!(i instanceof Array),bh=(i,e)=>JSON.stringify(i)===JSON.stringify(e),al=i=>{for(let e in i)return!1;return!0},Qi=(i,e)=>i&&e(i),yh=function(i,e,t,n){i.forEach(r=>{new ph(r,t.config,n).upload()})},wh={canPushState(){return typeof history.pushState<"u"},dropLocal(i,e,t){return i.removeItem(this.localKey(e,t))},updateLocal(i,e,t,n,r){let s=this.getLocal(i,e,t),a=this.localKey(e,t),u=s===null?n:r(s);return i.setItem(a,JSON.stringify(u)),u},getLocal(i,e,t){return JSON.parse(i.getItem(this.localKey(e,t)))},updateCurrentState(i){this.canPushState()&&history.replaceState(i(history.state||{}),"",window.location.href)},pushState(i,e,t){if(this.canPushState()){if(t!==window.location.href){if(e.type=="redirect"&&e.scroll){let n=history.state||{};n.scroll=e.scroll,history.replaceState(n,"",window.location.href)}delete e.scroll,history[i+"State"](e,"",t||null),window.requestAnimationFrame(()=>{let n=this.getHashTargetEl(window.location.hash);n?n.scrollIntoView():e.type==="redirect"&&window.scroll(0,0)})}}else this.redirect(t)},setCookie(i,e,t){let n=typeof t=="number"?` max-age=${t};`:"";document.cookie=`${i}=${e};${n} path=/`},getCookie(i){return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${i}s*=s*([^;]*).*$)|^.*$`),"$1")},deleteCookie(i){document.cookie=`${i}=; max-age=-1; path=/`},redirect(i,e){e&&this.setCookie("__phoenix_flash__",e,60),window.location=i},localKey(i,e){return`${i}-${e}`},getHashTargetEl(i){let e=i.toString().substring(1);if(e!=="")return document.getElementById(e)||document.querySelector(`a[name="${e}"]`)}},xt=wh,_n={byId(i){return document.getElementById(i)||Lt(`no id found for ${i}`)},removeClass(i,e){i.classList.remove(e),i.classList.length===0&&i.removeAttribute("class")},all(i,e,t){if(!i)return[];let n=Array.from(i.querySelectorAll(e));return t?n.forEach(t):n},childNodeLength(i){let e=document.createElement("template");return e.innerHTML=i,e.content.childElementCount},isUploadInput(i){return i.type==="file"&&i.getAttribute(Pi)!==null},isAutoUpload(i){return i.hasAttribute("data-phx-auto-upload")},findUploadInputs(i){let e=i.id,t=this.all(document,`input[type="file"][${Pi}][form="${e}"]`);return this.all(i,`input[type="file"][${Pi}]`).concat(t)},findComponentNodeList(i,e){return this.filterWithinSameLiveView(this.all(i,`[${Ri}="${e}"]`),i)},isPhxDestroyed(i){return!!(i.id&&_n.private(i,"destroyed"))},wantsNewTab(i){let e=i.ctrlKey||i.shiftKey||i.metaKey||i.button&&i.button===1,t=i.target instanceof HTMLAnchorElement&&i.target.hasAttribute("download"),n=i.target.hasAttribute("target")&&i.target.getAttribute("target").toLowerCase()==="_blank",r=i.target.hasAttribute("target")&&!i.target.getAttribute("target").startsWith("_");return e||n||t||r},isUnloadableFormSubmit(i){return i.target&&i.target.getAttribute("method")==="dialog"||i.submitter&&i.submitter.getAttribute("formmethod")==="dialog"?!1:!i.defaultPrevented&&!this.wantsNewTab(i)},isNewPageClick(i,e){let t=i.target instanceof HTMLAnchorElement?i.target.getAttribute("href"):null,n;if(i.defaultPrevented||t===null||this.wantsNewTab(i)||t.startsWith("mailto:")||t.startsWith("tel:")||i.target.isContentEditable)return!1;try{n=new URL(t)}catch{try{n=new URL(t,e)}catch{return!0}}return n.host===e.host&&n.protocol===e.protocol&&n.pathname===e.pathname&&n.search===e.search?n.hash===""&&!n.href.endsWith("#"):n.protocol.startsWith("http")},markPhxChildDestroyed(i){this.isPhxChild(i)&&i.setAttribute(_i,""),this.putPrivate(i,"destroyed",!0)},findPhxChildrenInFragment(i,e){let t=document.createElement("template");return t.innerHTML=i,this.findPhxChildren(t.content,e)},isIgnored(i,e){return(i.getAttribute(e)||i.getAttribute("data-phx-update"))==="ignore"},isPhxUpdate(i,e,t){return i.getAttribute&&t.indexOf(i.getAttribute(e))>=0},findPhxSticky(i){return this.all(i,`[${Ju}]`)},findPhxChildren(i,e){return this.all(i,`${En}[${An}="${e}"]`)},findExistingParentCIDs(i,e){let t=new Set,n=new Set;return e.forEach(r=>{this.filterWithinSameLiveView(this.all(i,`[${Ri}="${r}"]`),i).forEach(s=>{t.add(r),this.filterWithinSameLiveView(this.all(s,`[${Ri}]`),s).map(a=>parseInt(a.getAttribute(Ri))).forEach(a=>n.add(a))})}),n.forEach(r=>t.delete(r)),t},filterWithinSameLiveView(i,e){return e.querySelector(En)?i.filter(t=>this.withinSameLiveView(t,e)):i},withinSameLiveView(i,e){for(;i=i.parentNode;){if(i.isSameNode(e))return!0;if(i.getAttribute(_i)!==null)return!1}},private(i,e){return i[bi]&&i[bi][e]},deletePrivate(i,e){i[bi]&&delete i[bi][e]},putPrivate(i,e,t){i[bi]||(i[bi]={}),i[bi][e]=t},updatePrivate(i,e,t,n){let r=this.private(i,e);r===void 0?this.putPrivate(i,e,n(t)):this.putPrivate(i,e,n(r))},syncPendingAttrs(i,e){i.hasAttribute(Gt)&&(wl.forEach(t=>{i.classList.contains(t)&&e.classList.add(t)}),tl.filter(t=>i.hasAttribute(t)).forEach(t=>{e.setAttribute(t,i.getAttribute(t))}))},copyPrivates(i,e){e[bi]&&(i[bi]=e[bi])},putTitle(i){let e=document.querySelector("title");if(e){let{prefix:t,suffix:n,default:r}=e.dataset,s=typeof i!="string"||i.trim()==="";if(s&&typeof r!="string")return;let a=s?r:i;document.title=`${t||""}${a||""}${n||""}`}else document.title=i},debounce(i,e,t,n,r,s,a,u){let c=i.getAttribute(t),v=i.getAttribute(r);c===""&&(c=n),v===""&&(v=s);let k=c||v;switch(k){case null:return u();case"blur":this.once(i,"debounce-blur")&&i.addEventListener("blur",()=>{a()&&u()});return;default:let A=parseInt(k),N=()=>v?this.deletePrivate(i,Cr):u(),y=this.incCycle(i,Er,N);if(isNaN(A))return Lt(`invalid throttle/debounce value: ${k}`);if(v){let g=!1;if(e.type==="keydown"){let b=this.private(i,el);this.putPrivate(i,el,e.key),g=b!==e.key}if(!g&&this.private(i,Cr))return!1;{u();let b=setTimeout(()=>{a()&&this.triggerCycle(i,Er)},A);this.putPrivate(i,Cr,b)}}else setTimeout(()=>{a()&&this.triggerCycle(i,Er,y)},A);let d=i.form;d&&this.once(d,"bind-debounce")&&d.addEventListener("submit",()=>{Array.from(new FormData(d).entries(),([g])=>{let b=d.querySelector(`[name="${g}"]`);this.incCycle(b,Er),this.deletePrivate(b,Cr)})}),this.once(i,"bind-debounce")&&i.addEventListener("blur",()=>{clearTimeout(this.private(i,Cr)),this.triggerCycle(i,Er)})}},triggerCycle(i,e,t){let[n,r]=this.private(i,e);t||(t=n),t===n&&(this.incCycle(i,e),r())},once(i,e){return this.private(i,e)===!0?!1:(this.putPrivate(i,e,!0),!0)},incCycle(i,e,t=function(){}){let[n]=this.private(i,e)||[0,t];return n++,this.putPrivate(i,e,[n,t]),n},maintainPrivateHooks(i,e,t,n){i.hasAttribute&&i.hasAttribute("data-phx-hook")&&!e.hasAttribute("data-phx-hook")&&e.setAttribute("data-phx-hook",i.getAttribute("data-phx-hook")),e.hasAttribute&&(e.hasAttribute(t)||e.hasAttribute(n))&&e.setAttribute("data-phx-hook","Phoenix.InfiniteScroll")},putCustomElHook(i,e){i.isConnected?i.setAttribute("data-phx-hook",""):console.error(`
        hook attached to non-connected DOM element
        ensure you are calling createHook within your connectedCallback. ${i.outerHTML}
      `),this.putPrivate(i,"custom-el-hook",e)},getCustomElHook(i){return this.private(i,"custom-el-hook")},isUsedInput(i){return i.nodeType===Node.ELEMENT_NODE&&(this.private(i,Ls)||this.private(i,Rr))},resetForm(i){Array.from(i.elements).forEach(e=>{this.deletePrivate(e,Ls),this.deletePrivate(e,Rr)})},isPhxChild(i){return i.getAttribute&&i.getAttribute(An)},isPhxSticky(i){return i.getAttribute&&i.getAttribute(Ju)!==null},isChildOfAny(i,e){return!!e.find(t=>t.contains(i))},firstPhxChild(i){return this.isPhxChild(i)?i:this.all(i,`[${An}]`)[0]},dispatchEvent(i,e,t={}){let n=!0;i.nodeName==="INPUT"&&i.type==="file"&&e==="click"&&(n=!1);let a={bubbles:t.bubbles===void 0?n:!!t.bubbles,cancelable:!0,detail:t.detail||{}},u=e==="click"?new MouseEvent("click",a):new CustomEvent(e,a);i.dispatchEvent(u)},cloneNode(i,e){if(typeof e>"u")return i.cloneNode(!0);{let t=i.cloneNode(!1);return t.innerHTML=e,t}},mergeAttrs(i,e,t={}){let n=new Set(t.exclude||[]),r=t.isIgnored,s=e.attributes;for(let u=s.length-1;u>=0;u--){let c=s[u].name;if(n.has(c))c==="value"&&i.value===e.value&&i.setAttribute("value",e.getAttribute(c));else{let v=e.getAttribute(c);i.getAttribute(c)!==v&&(!r||r&&c.startsWith("data-"))&&i.setAttribute(c,v)}}let a=i.attributes;for(let u=a.length-1;u>=0;u--){let c=a[u].name;r?c.startsWith("data-")&&!e.hasAttribute(c)&&!tl.includes(c)&&i.removeAttribute(c):e.hasAttribute(c)||i.removeAttribute(c)}},mergeFocusedInput(i,e){i instanceof HTMLSelectElement||_n.mergeAttrs(i,e,{exclude:["value"]}),e.readOnly?i.setAttribute("readonly",!0):i.removeAttribute("readonly")},hasSelectionRange(i){return i.setSelectionRange&&(i.type==="text"||i.type==="textarea")},restoreFocus(i,e,t){if(i instanceof HTMLSelectElement&&i.focus(),!_n.isTextualInput(i))return;i.matches(":focus")||i.focus(),this.hasSelectionRange(i)&&i.setSelectionRange(e,t)},isFormInput(i){return/^(?:input|select|textarea)$/i.test(i.tagName)&&i.type!=="button"},syncAttrsToProps(i){i instanceof HTMLInputElement&&El.indexOf(i.type.toLocaleLowerCase())>=0&&(i.checked=i.getAttribute("checked")!==null)},isTextualInput(i){return nh.indexOf(i.type)>=0},isNowTriggerFormExternal(i,e){return i.getAttribute&&i.getAttribute(e)!==null&&document.body.contains(i)},cleanChildNodes(i,e){if(_n.isPhxUpdate(i,e,["append","prepend"])){let t=[];i.childNodes.forEach(n=>{n.id||(!(n.nodeType===Node.TEXT_NODE&&n.nodeValue.trim()==="")&&n.nodeType!==Node.COMMENT_NODE&&Lt(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(n.outerHTML||n.nodeValue).trim()}"

`),t.push(n))}),t.forEach(n=>n.remove())}},replaceRootContainer(i,e,t){let n=new Set(["id",_i,kn,no,en]);if(i.tagName.toLowerCase()===e.toLowerCase())return Array.from(i.attributes).filter(r=>!n.has(r.name.toLowerCase())).forEach(r=>i.removeAttribute(r.name)),Object.keys(t).filter(r=>!n.has(r.toLowerCase())).forEach(r=>i.setAttribute(r,t[r])),i;{let r=document.createElement(e);return Object.keys(t).forEach(s=>r.setAttribute(s,t[s])),n.forEach(s=>r.setAttribute(s,i.getAttribute(s))),r.innerHTML=i.innerHTML,i.replaceWith(r),r}},getSticky(i,e,t){let n=(_n.private(i,"sticky")||[]).find(([r])=>e===r);if(n){let[r,s,a]=n;return a}else return typeof t=="function"?t():t},deleteSticky(i,e){this.updatePrivate(i,"sticky",[],t=>t.filter(([n,r])=>n!==e))},putSticky(i,e,t){let n=t(i);this.updatePrivate(i,"sticky",[],r=>{let s=r.findIndex(([a])=>e===a);return s>=0?r[s]=[e,t,n]:r.push([e,t,n]),r})},applyStickyOperations(i){let e=_n.private(i,"sticky");e&&e.forEach(([t,n,r])=>this.putSticky(i,t,n))},isLocked(i){return i.hasAttribute&&i.hasAttribute(tt)}},H=_n,Dr=class{static isActive(i,e){let t=e._phxRef===void 0,r=i.getAttribute(Ya).split(",").indexOf(it.genFileRef(e))>=0;return e.size>0&&(t||r)}static isPreflighted(i,e){return i.getAttribute(io).split(",").indexOf(it.genFileRef(e))>=0&&this.isActive(i,e)}static isPreflightInProgress(i){return i._preflightInProgress===!0}static markPreflightInProgress(i){i._preflightInProgress=!0}constructor(i,e,t,n){this.ref=it.genFileRef(e),this.fileEl=i,this.file=e,this.view=t,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._lastProgressSent=-1,this._onDone=function(){},this._onElUpdated=this.onElUpdated.bind(this),this.fileEl.addEventListener(Ts,this._onElUpdated),this.autoUpload=n}metadata(){return this.meta}progress(i){this._progress=Math.floor(i),this._progress>this._lastProgressSent&&(this._progress>=100?(this._progress=100,this._lastProgressSent=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,()=>{it.untrackFile(this.fileEl,this.file),this._onDone()})):(this._lastProgressSent=this._progress,this.view.pushFileProgress(this.fileEl,this.ref,this._progress)))}isCancelled(){return this._isCancelled}cancel(){this.file._preflightInProgress=!1,this._isCancelled=!0,this._isDone=!0,this._onDone()}isDone(){return this._isDone}error(i="failed"){this.fileEl.removeEventListener(Ts,this._onElUpdated),this.view.pushFileProgress(this.fileEl,this.ref,{error:i}),this.isAutoUpload()||it.clearFiles(this.fileEl)}isAutoUpload(){return this.autoUpload}onDone(i){this._onDone=()=>{this.fileEl.removeEventListener(Ts,this._onElUpdated),i()}}onElUpdated(){this.fileEl.getAttribute(Ya).split(",").indexOf(this.ref)===-1&&(it.untrackFile(this.fileEl,this.file),this.cancel())}toPreflightPayload(){return{last_modified:this.file.lastModified,name:this.file.name,relative_path:this.file.webkitRelativePath,size:this.file.size,type:this.file.type,ref:this.ref,meta:typeof this.file.meta=="function"?this.file.meta():void 0}}uploader(i){if(this.meta.uploader){let e=i[this.meta.uploader]||Lt(`no uploader configured for ${this.meta.uploader}`);return{name:this.meta.uploader,callback:e}}else return{name:"channel",callback:yh}}zipPostFlight(i){this.meta=i.entries[this.ref],this.meta||Lt(`no preflight upload response returned with ref ${this.ref}`,{input:this.fileEl,response:i})}},_h=0,it=class to{static genFileRef(e){let t=e._phxRef;return t!==void 0?t:(e._phxRef=(_h++).toString(),e._phxRef)}static getEntryDataURL(e,t,n){let r=this.activeFiles(e).find(s=>this.genFileRef(s)===t);n(URL.createObjectURL(r))}static hasUploadsInProgress(e){let t=0;return H.findUploadInputs(e).forEach(n=>{n.getAttribute(io)!==n.getAttribute(th)&&t++}),t>0}static serializeUploads(e){let t=this.activeFiles(e),n={};return t.forEach(r=>{let s={path:e.name},a=e.getAttribute(Pi);n[a]=n[a]||[],s.ref=this.genFileRef(r),s.last_modified=r.lastModified,s.name=r.name||s.ref,s.relative_path=r.webkitRelativePath,s.type=r.type,s.size=r.size,typeof r.meta=="function"&&(s.meta=r.meta()),n[a].push(s)}),n}static clearFiles(e){e.value=null,e.removeAttribute(Pi),H.putPrivate(e,"files",[])}static untrackFile(e,t){H.putPrivate(e,"files",H.private(e,"files").filter(n=>!Object.is(n,t)))}static trackFiles(e,t,n){if(e.getAttribute("multiple")!==null){let r=t.filter(s=>!this.activeFiles(e).find(a=>Object.is(a,s)));H.updatePrivate(e,"files",[],s=>s.concat(r)),e.value=null}else n&&n.files.length>0&&(e.files=n.files),H.putPrivate(e,"files",t)}static activeFileInputs(e){let t=H.findUploadInputs(e);return Array.from(t).filter(n=>n.files&&this.activeFiles(n).length>0)}static activeFiles(e){return(H.private(e,"files")||[]).filter(t=>Dr.isActive(e,t))}static inputsAwaitingPreflight(e){let t=H.findUploadInputs(e);return Array.from(t).filter(n=>this.filesAwaitingPreflight(n).length>0)}static filesAwaitingPreflight(e){return this.activeFiles(e).filter(t=>!Dr.isPreflighted(e,t)&&!Dr.isPreflightInProgress(t))}static markPreflightInProgress(e){e.forEach(t=>Dr.markPreflightInProgress(t.file))}constructor(e,t,n){this.autoUpload=H.isAutoUpload(e),this.view=t,this.onComplete=n,this._entries=Array.from(to.filesAwaitingPreflight(e)||[]).map(r=>new Dr(e,r,t,this.autoUpload)),to.markPreflightInProgress(this._entries),this.numEntriesInProgress=this._entries.length}isAutoUpload(){return this.autoUpload}entries(){return this._entries}initAdapterUpload(e,t,n){this._entries=this._entries.map(s=>(s.isCancelled()?(this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()):(s.zipPostFlight(e),s.onDone(()=>{this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()})),s));let r=this._entries.reduce((s,a)=>{if(!a.meta)return s;let{name:u,callback:c}=a.uploader(n.uploaders);return s[u]=s[u]||{callback:c,entries:[]},s[u].entries.push(a),s},{});for(let s in r){let{callback:a,entries:u}=r[s];a(u,t,e,n)}}},kh={anyOf(i,e){return e.find(t=>i instanceof t)},isFocusable(i,e){return i instanceof HTMLAnchorElement&&i.rel!=="ignore"||i instanceof HTMLAreaElement&&i.href!==void 0||!i.disabled&&this.anyOf(i,[HTMLInputElement,HTMLSelectElement,HTMLTextAreaElement,HTMLButtonElement])||i instanceof HTMLIFrameElement||i.tabIndex>0||!e&&i.getAttribute("tabindex")!==null&&i.getAttribute("aria-hidden")!=="true"},attemptFocus(i,e){if(this.isFocusable(i,e))try{i.focus()}catch{}return!!document.activeElement&&document.activeElement.isSameNode(i)},focusFirstInteractive(i){let e=i.firstElementChild;for(;e;){if(this.attemptFocus(e,!0)||this.focusFirstInteractive(e,!0))return!0;e=e.nextElementSibling}},focusFirst(i){let e=i.firstElementChild;for(;e;){if(this.attemptFocus(e)||this.focusFirst(e))return!0;e=e.nextElementSibling}},focusLast(i){let e=i.lastElementChild;for(;e;){if(this.attemptFocus(e)||this.focusLast(e))return!0;e=e.previousElementSibling}}},wi=kh,Cl={LiveFileUpload:{activeRefs(){return this.el.getAttribute(Ya)},preflightedRefs(){return this.el.getAttribute(io)},mounted(){this.preflightedWas=this.preflightedRefs()},updated(){let i=this.preflightedRefs();this.preflightedWas!==i&&(this.preflightedWas=i,i===""&&this.__view().cancelSubmit(this.el.form)),this.activeRefs()===""&&(this.el.value=null),this.el.dispatchEvent(new CustomEvent(Ts))}},LiveImgPreview:{mounted(){this.ref=this.el.getAttribute("data-phx-entry-ref"),this.inputEl=document.getElementById(this.el.getAttribute(Pi)),it.getEntryDataURL(this.inputEl,this.ref,i=>{this.url=i,this.el.src=i})},destroyed(){URL.revokeObjectURL(this.url)}},FocusWrap:{mounted(){this.focusStart=this.el.firstElementChild,this.focusEnd=this.el.lastElementChild,this.focusStart.addEventListener("focus",i=>{if(!i.relatedTarget||!this.el.contains(i.relatedTarget)){let e=i.target.nextElementSibling;wi.attemptFocus(e)||wi.focusFirst(e)}else wi.focusLast(this.el)}),this.focusEnd.addEventListener("focus",i=>{if(!i.relatedTarget||!this.el.contains(i.relatedTarget)){let e=i.target.previousElementSibling;wi.attemptFocus(e)||wi.focusLast(e)}else wi.focusFirst(this.el)}),this.el.addEventListener("phx:show-end",()=>this.el.focus()),window.getComputedStyle(this.el).display!=="none"&&wi.focusFirst(this.el)}}},Sl=i=>["HTML","BODY"].indexOf(i.nodeName.toUpperCase())>=0?null:["scroll","auto"].indexOf(getComputedStyle(i).overflowY)>=0?i:Sl(i.parentElement),ol=i=>i?i.scrollTop:document.documentElement.scrollTop||document.body.scrollTop,ro=i=>i?i.getBoundingClientRect().bottom:window.innerHeight||document.documentElement.clientHeight,so=i=>i?i.getBoundingClientRect().top:0,Ah=(i,e)=>{let t=i.getBoundingClientRect();return Math.ceil(t.top)>=so(e)&&Math.ceil(t.left)>=0&&Math.floor(t.top)<=ro(e)},Eh=(i,e)=>{let t=i.getBoundingClientRect();return Math.ceil(t.bottom)>=so(e)&&Math.ceil(t.left)>=0&&Math.floor(t.bottom)<=ro(e)},ul=(i,e)=>{let t=i.getBoundingClientRect();return Math.ceil(t.top)>=so(e)&&Math.ceil(t.left)>=0&&Math.floor(t.top)<=ro(e)};Cl.InfiniteScroll={mounted(){this.scrollContainer=Sl(this.el);let i=ol(this.scrollContainer),e=!1,t=500,n=null,r=this.throttle(t,(u,c)=>{n=()=>!0,this.liveSocket.execJSHookPush(this.el,u,{id:c.id,_overran:!0},()=>{n=null})}),s=this.throttle(t,(u,c)=>{n=()=>c.scrollIntoView({block:"start"}),this.liveSocket.execJSHookPush(this.el,u,{id:c.id},()=>{n=null,window.requestAnimationFrame(()=>{ul(c,this.scrollContainer)||c.scrollIntoView({block:"start"})})})}),a=this.throttle(t,(u,c)=>{n=()=>c.scrollIntoView({block:"end"}),this.liveSocket.execJSHookPush(this.el,u,{id:c.id},()=>{n=null,window.requestAnimationFrame(()=>{ul(c,this.scrollContainer)||c.scrollIntoView({block:"end"})})})});this.onScroll=u=>{let c=ol(this.scrollContainer);if(n)return i=c,n();let v=this.el.getBoundingClientRect(),k=this.el.getAttribute(this.liveSocket.binding("viewport-top")),A=this.el.getAttribute(this.liveSocket.binding("viewport-bottom")),N=this.el.lastElementChild,y=this.el.firstElementChild,d=c<i,g=c>i;d&&k&&!e&&v.top>=0?(e=!0,r(k,y)):g&&e&&v.top<=0&&(e=!1),k&&d&&Ah(y,this.scrollContainer)?s(k,y):A&&g&&Eh(N,this.scrollContainer)&&a(A,N),i=c},this.scrollContainer?this.scrollContainer.addEventListener("scroll",this.onScroll):window.addEventListener("scroll",this.onScroll)},destroyed(){this.scrollContainer?this.scrollContainer.removeEventListener("scroll",this.onScroll):window.removeEventListener("scroll",this.onScroll)},throttle(i,e){let t=0,n;return(...r)=>{let s=Date.now(),a=i-(s-t);a<=0||a>i?(n&&(clearTimeout(n),n=null),t=s,e(...r)):n||(n=setTimeout(()=>{t=Date.now(),n=null,e(...r)},a))}}};var Ch=Cl,ll=class{static onUnlock(i,e){if(!H.isLocked(i)&&!i.closest(`[${tt}]`))return e();let t=i.closest(`[${tt}]`),n=t.closest(`[${tt}]`).getAttribute(tt);t.addEventListener(`phx:undo-lock:${n}`,()=>{e()},{once:!0})}constructor(i){this.el=i,this.loadingRef=i.hasAttribute(Qn)?parseInt(i.getAttribute(Qn),10):null,this.lockRef=i.hasAttribute(tt)?parseInt(i.getAttribute(tt),10):null}maybeUndo(i,e,t){this.isWithin(i)&&(this.undoLocks(i,e,t),this.undoLoading(i,e),this.isFullyResolvedBy(i)&&this.el.removeAttribute(Gt))}isWithin(i){return!(this.loadingRef!==null&&this.loadingRef>i&&this.lockRef!==null&&this.lockRef>i)}undoLocks(i,e,t){if(!this.isLockUndoneBy(i))return;let n=H.private(this.el,tt);n&&(t(n),H.deletePrivate(this.el,tt)),this.el.removeAttribute(tt);let r={detail:{ref:i,event:e},bubbles:!0,cancelable:!1};this.el.dispatchEvent(new CustomEvent(`phx:undo-lock:${this.lockRef}`,r))}undoLoading(i,e){if(!this.isLoadingUndoneBy(i)){this.canUndoLoading(i)&&this.el.classList.contains("phx-submit-loading")&&this.el.classList.remove("phx-change-loading");return}if(this.canUndoLoading(i)){this.el.removeAttribute(Qn);let t=this.el.getAttribute(Zn),n=this.el.getAttribute(eo);n!==null&&(this.el.readOnly=n==="true",this.el.removeAttribute(eo)),t!==null&&(this.el.disabled=t==="true",this.el.removeAttribute(Zn));let r=this.el.getAttribute(Rs);r!==null&&(this.el.innerText=r,this.el.removeAttribute(Rs));let s={detail:{ref:i,event:e},bubbles:!0,cancelable:!1};this.el.dispatchEvent(new CustomEvent(`phx:undo-loading:${this.loadingRef}`,s))}wl.forEach(t=>{(t!=="phx-submit-loading"||this.canUndoLoading(i))&&H.removeClass(this.el,t)})}isLoadingUndoneBy(i){return this.loadingRef===null?!1:this.loadingRef<=i}isLockUndoneBy(i){return this.lockRef===null?!1:this.lockRef<=i}isFullyResolvedBy(i){return(this.loadingRef===null||this.loadingRef<=i)&&(this.lockRef===null||this.lockRef<=i)}canUndoLoading(i){return this.lockRef===null||this.lockRef<=i}},Sh=class{constructor(i,e,t){let n=new Set,r=new Set([...e.children].map(a=>a.id)),s=[];Array.from(i.children).forEach(a=>{if(a.id&&(n.add(a.id),r.has(a.id))){let u=a.previousElementSibling&&a.previousElementSibling.id;s.push({elementId:a.id,previousElementId:u})}}),this.containerId=e.id,this.updateType=t,this.elementsToModify=s,this.elementIdsToAdd=[...r].filter(a=>!n.has(a))}perform(){let i=H.byId(this.containerId);this.elementsToModify.forEach(e=>{e.previousElementId?Qi(document.getElementById(e.previousElementId),t=>{Qi(document.getElementById(e.elementId),n=>{n.previousElementSibling&&n.previousElementSibling.id==t.id||t.insertAdjacentElement("afterend",n)})}):Qi(document.getElementById(e.elementId),t=>{t.previousElementSibling==null||i.insertAdjacentElement("afterbegin",t)})}),this.updateType=="prepend"&&this.elementIdsToAdd.reverse().forEach(e=>{Qi(document.getElementById(e),t=>i.insertAdjacentElement("afterbegin",t))})}},dl=11;function Dh(i,e){var t=e.attributes,n,r,s,a,u;if(!(e.nodeType===dl||i.nodeType===dl)){for(var c=t.length-1;c>=0;c--)n=t[c],r=n.name,s=n.namespaceURI,a=n.value,s?(r=n.localName||r,u=i.getAttributeNS(s,r),u!==a&&(n.prefix==="xmlns"&&(r=n.name),i.setAttributeNS(s,r,a))):(u=i.getAttribute(r),u!==a&&i.setAttribute(r,a));for(var v=i.attributes,k=v.length-1;k>=0;k--)n=v[k],r=n.name,s=n.namespaceURI,s?(r=n.localName||r,e.hasAttributeNS(s,r)||i.removeAttributeNS(s,r)):e.hasAttribute(r)||i.removeAttribute(r)}}var Es,Th="http://www.w3.org/1999/xhtml",Rt=typeof document>"u"?void 0:document,xh=!!Rt&&"content"in Rt.createElement("template"),Lh=!!Rt&&Rt.createRange&&"createContextualFragment"in Rt.createRange();function Rh(i){var e=Rt.createElement("template");return e.innerHTML=i,e.content.childNodes[0]}function Ph(i){Es||(Es=Rt.createRange(),Es.selectNode(Rt.body));var e=Es.createContextualFragment(i);return e.childNodes[0]}function Ih(i){var e=Rt.createElement("body");return e.innerHTML=i,e.childNodes[0]}function Oh(i){return i=i.trim(),xh?Rh(i):Lh?Ph(i):Ih(i)}function Cs(i,e){var t=i.nodeName,n=e.nodeName,r,s;return t===n?!0:(r=t.charCodeAt(0),s=n.charCodeAt(0),r<=90&&s>=97?t===n.toUpperCase():s<=90&&r>=97?n===t.toUpperCase():!1)}function Mh(i,e){return!e||e===Th?Rt.createElement(i):Rt.createElementNS(e,i)}function Nh(i,e){for(var t=i.firstChild;t;){var n=t.nextSibling;e.appendChild(t),t=n}return e}function Ga(i,e,t){i[t]!==e[t]&&(i[t]=e[t],i[t]?i.setAttribute(t,""):i.removeAttribute(t))}var cl={OPTION:function(i,e){var t=i.parentNode;if(t){var n=t.nodeName.toUpperCase();n==="OPTGROUP"&&(t=t.parentNode,n=t&&t.nodeName.toUpperCase()),n==="SELECT"&&!t.hasAttribute("multiple")&&(i.hasAttribute("selected")&&!e.selected&&(i.setAttribute("selected","selected"),i.removeAttribute("selected")),t.selectedIndex=-1)}Ga(i,e,"selected")},INPUT:function(i,e){Ga(i,e,"checked"),Ga(i,e,"disabled"),i.value!==e.value&&(i.value=e.value),e.hasAttribute("value")||i.removeAttribute("value")},TEXTAREA:function(i,e){var t=e.value;i.value!==t&&(i.value=t);var n=i.firstChild;if(n){var r=n.nodeValue;if(r==t||!t&&r==i.placeholder)return;n.nodeValue=t}},SELECT:function(i,e){if(!e.hasAttribute("multiple")){for(var t=-1,n=0,r=i.firstChild,s,a;r;)if(a=r.nodeName&&r.nodeName.toUpperCase(),a==="OPTGROUP")s=r,r=s.firstChild;else{if(a==="OPTION"){if(r.hasAttribute("selected")){t=n;break}n++}r=r.nextSibling,!r&&s&&(r=s.nextSibling,s=null)}i.selectedIndex=t}}},Tr=1,hl=11,fl=3,pl=8;function Zi(){}function Bh(i){if(i)return i.getAttribute&&i.getAttribute("id")||i.id}function Fh(i){return function(t,n,r){if(r||(r={}),typeof n=="string")if(t.nodeName==="#document"||t.nodeName==="HTML"||t.nodeName==="BODY"){var s=n;n=Rt.createElement("html"),n.innerHTML=s}else n=Oh(n);else n.nodeType===hl&&(n=n.firstElementChild);var a=r.getNodeKey||Bh,u=r.onBeforeNodeAdded||Zi,c=r.onNodeAdded||Zi,v=r.onBeforeElUpdated||Zi,k=r.onElUpdated||Zi,A=r.onBeforeNodeDiscarded||Zi,N=r.onNodeDiscarded||Zi,y=r.onBeforeElChildrenUpdated||Zi,d=r.skipFromChildren||Zi,g=r.addChild||function(z,$){return z.appendChild($)},b=r.childrenOnly===!0,E=Object.create(null),P=[];function o(z){P.push(z)}function h(z,$){if(z.nodeType===Tr)for(var ee=z.firstChild;ee;){var X=void 0;$&&(X=a(ee))?o(X):(N(ee),ee.firstChild&&h(ee,$)),ee=ee.nextSibling}}function f(z,$,ee){A(z)!==!1&&($&&$.removeChild(z),N(z),h(z,ee))}function _(z){if(z.nodeType===Tr||z.nodeType===hl)for(var $=z.firstChild;$;){var ee=a($);ee&&(E[ee]=$),_($),$=$.nextSibling}}_(t);function C(z){c(z);for(var $=z.firstChild;$;){var ee=$.nextSibling,X=a($);if(X){var ie=E[X];ie&&Cs($,ie)?($.parentNode.replaceChild(ie,$),L(ie,$)):C($)}else C($);$=ee}}function I(z,$,ee){for(;$;){var X=$.nextSibling;(ee=a($))?o(ee):f($,z,!0),$=X}}function L(z,$,ee){var X=a($);if(X&&delete E[X],!ee){var ie=v(z,$);if(ie===!1||(ie instanceof HTMLElement&&(z=ie,_(z)),i(z,$),k(z),y(z,$)===!1))return}z.nodeName!=="TEXTAREA"?F(z,$):cl.TEXTAREA(z,$)}function F(z,$){var ee=d(z,$),X=$.firstChild,ie=z.firstChild,ae,me,re,ye,ne;e:for(;X;){for(ye=X.nextSibling,ae=a(X);!ee&&ie;){if(re=ie.nextSibling,X.isSameNode&&X.isSameNode(ie)){X=ye,ie=re;continue e}me=a(ie);var xe=ie.nodeType,je=void 0;if(xe===X.nodeType&&(xe===Tr?(ae?ae!==me&&((ne=E[ae])?re===ne?je=!1:(z.insertBefore(ne,ie),me?o(me):f(ie,z,!0),ie=ne,me=a(ie)):je=!1):me&&(je=!1),je=je!==!1&&Cs(ie,X),je&&L(ie,X)):(xe===fl||xe==pl)&&(je=!0,ie.nodeValue!==X.nodeValue&&(ie.nodeValue=X.nodeValue))),je){X=ye,ie=re;continue e}me?o(me):f(ie,z,!0),ie=re}if(ae&&(ne=E[ae])&&Cs(ne,X))ee||g(z,ne),L(ne,X);else{var He=u(X);He!==!1&&(He&&(X=He),X.actualize&&(X=X.actualize(z.ownerDocument||Rt)),g(z,X),C(X))}X=ye,ie=re}I(z,ie,me);var st=cl[z.nodeName];st&&st(z,$)}var K=t,W=K.nodeType,q=n.nodeType;if(!b){if(W===Tr)q===Tr?Cs(t,n)||(N(t),K=Nh(t,Mh(n.nodeName,n.namespaceURI))):K=n;else if(W===fl||W===pl){if(q===W)return K.nodeValue!==n.nodeValue&&(K.nodeValue=n.nodeValue),K;K=n}}if(K===n)N(t);else{if(n.isSameNode&&n.isSameNode(K))return;if(L(K,n,b),P)for(var G=0,x=P.length;G<x;G++){var U=E[P[G]];U&&f(U,U.parentNode,!1)}}return!b&&K!==t&&t.parentNode&&(K.actualize&&(K=K.actualize(t.ownerDocument||Rt)),t.parentNode.replaceChild(K,t)),K}}var jh=Fh(Dh),Hh=jh,Ss=class{constructor(i,e,t,n,r,s,a={}){this.view=i,this.liveSocket=i.liveSocket,this.container=e,this.id=t,this.rootID=i.root.id,this.html=n,this.streams=r,this.streamInserts={},this.streamComponentRestore={},this.targetCID=s,this.cidPatch=Li(this.targetCID),this.pendingRemoves=[],this.phxRemove=this.liveSocket.binding("remove"),this.targetContainer=this.isCIDPatch()?this.targetCIDContainer(n):e,this.callbacks={beforeadded:[],beforeupdated:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[],aftertransitionsDiscarded:[]},this.withChildren=a.withChildren||a.undoRef||!1,this.undoRef=a.undoRef}before(i,e){this.callbacks[`before${i}`].push(e)}after(i,e){this.callbacks[`after${i}`].push(e)}trackBefore(i,...e){this.callbacks[`before${i}`].forEach(t=>t(...e))}trackAfter(i,...e){this.callbacks[`after${i}`].forEach(t=>t(...e))}markPrunableContentForRemoval(){let i=this.liveSocket.binding(Ps);H.all(this.container,`[${i}=append] > *, [${i}=prepend] > *`,e=>{e.setAttribute($u,"")})}perform(i){let{view:e,liveSocket:t,html:n,container:r,targetContainer:s}=this;if(this.isCIDPatch()&&!s)return;let a=t.getActiveElement(),{selectionStart:u,selectionEnd:c}=a&&H.hasSelectionRange(a)?a:{},v=t.binding(Ps),k=t.binding(Za),A=t.binding(Qa),N=t.binding(ih),y=[],d=[],g=[],b=null;function E(P,o,h=this.withChildren){let f={childrenOnly:P.getAttribute(Ri)===null&&!h,getNodeKey:_=>H.isPhxDestroyed(_)?null:i?_.id:_.id||_.getAttribute&&_.getAttribute(Al),skipFromChildren:_=>_.getAttribute(v)===$a,addChild:(_,C)=>{let{ref:I,streamAt:L}=this.getStreamInsert(C);if(I===void 0)return _.appendChild(C);if(this.setStreamRef(C,I),L===0)_.insertAdjacentElement("afterbegin",C);else if(L===-1){let F=_.lastElementChild;if(F&&!F.hasAttribute(Ar)){let K=Array.from(_.children).find(W=>!W.hasAttribute(Ar));_.insertBefore(C,K)}else _.appendChild(C)}else if(L>0){let F=Array.from(_.children)[L];_.insertBefore(C,F)}},onBeforeNodeAdded:_=>{H.maintainPrivateHooks(_,_,k,A),this.trackBefore("added",_);let C=_;return this.streamComponentRestore[_.id]&&(C=this.streamComponentRestore[_.id],delete this.streamComponentRestore[_.id],E.call(this,C,_,!0)),C},onNodeAdded:_=>{_.getAttribute&&this.maybeReOrderStream(_,!0),_ instanceof HTMLImageElement&&_.srcset?_.srcset=_.srcset:_ instanceof HTMLVideoElement&&_.autoplay&&_.play(),H.isNowTriggerFormExternal(_,N)&&(b=_),(H.isPhxChild(_)&&e.ownsElement(_)||H.isPhxSticky(_)&&e.ownsElement(_.parentNode))&&this.trackAfter("phxChildAdded",_),y.push(_)},onNodeDiscarded:_=>this.onNodeDiscarded(_),onBeforeNodeDiscarded:_=>_.getAttribute&&_.getAttribute($u)!==null?!0:!(_.parentElement!==null&&_.id&&H.isPhxUpdate(_.parentElement,v,[$a,"append","prepend"])||this.maybePendingRemove(_)||this.skipCIDSibling(_)),onElUpdated:_=>{H.isNowTriggerFormExternal(_,N)&&(b=_),d.push(_),this.maybeReOrderStream(_,!1)},onBeforeElUpdated:(_,C)=>{if(_.id&&_.isSameNode(P)&&_.id!==C.id)return f.onNodeDiscarded(_),_.replaceWith(C),f.onNodeAdded(C);if(H.syncPendingAttrs(_,C),H.maintainPrivateHooks(_,C,k,A),H.cleanChildNodes(C,v),this.skipCIDSibling(C))return this.maybeReOrderStream(_),!1;if(H.isPhxSticky(_))return[_i,kn,en].map(F=>[F,_.getAttribute(F),C.getAttribute(F)]).forEach(([F,K,W])=>{W&&K!==W&&_.setAttribute(F,W)}),!1;if(H.isIgnored(_,v)||_.form&&_.form.isSameNode(b))return this.trackBefore("updated",_,C),H.mergeAttrs(_,C,{isIgnored:H.isIgnored(_,v)}),d.push(_),H.applyStickyOperations(_),!1;if(_.type==="number"&&_.validity&&_.validity.badInput)return!1;let I=a&&_.isSameNode(a)&&H.isFormInput(_),L=I&&this.isChangedSelect(_,C);if(_.hasAttribute(Gt)&&_.getAttribute(tt)!=this.undoRef){H.isUploadInput(_)&&(H.mergeAttrs(_,C,{isIgnored:!0}),this.trackBefore("updated",_,C),d.push(_)),H.applyStickyOperations(_);let K=_.hasAttribute(tt)?H.private(_,tt)||_.cloneNode(!0):null;K&&(H.putPrivate(_,tt,K),I||(_=K))}if(H.isPhxChild(C)){let F=_.getAttribute(_i);return H.mergeAttrs(_,C,{exclude:[kn]}),F!==""&&_.setAttribute(_i,F),_.setAttribute(en,this.rootID),H.applyStickyOperations(_),!1}return H.copyPrivates(C,_),I&&_.type!=="hidden"&&!L?(this.trackBefore("updated",_,C),H.mergeFocusedInput(_,C),H.syncAttrsToProps(_),d.push(_),H.applyStickyOperations(_),!1):(L&&_.blur(),H.isPhxUpdate(C,v,["append","prepend"])&&g.push(new Sh(_,C,C.getAttribute(v))),H.syncAttrsToProps(C),H.applyStickyOperations(C),this.trackBefore("updated",_,C),_)}};Hh(P,o,f)}return this.trackBefore("added",r),this.trackBefore("updated",r,r),t.time("morphdom",()=>{this.streams.forEach(([P,o,h,f])=>{o.forEach(([_,C,I])=>{this.streamInserts[_]={ref:P,streamAt:C,limit:I,reset:f}}),f!==void 0&&H.all(r,`[${Ar}="${P}"]`,_=>{this.removeStreamChildElement(_)}),h.forEach(_=>{let C=r.querySelector(`[id="${_}"]`);C&&this.removeStreamChildElement(C)})}),i&&H.all(this.container,`[${v}=${$a}]`,P=>{this.liveSocket.owner(P,o=>{o===this.view&&Array.from(P.children).forEach(h=>{this.removeStreamChildElement(h)})})}),E.call(this,s,n)}),t.isDebugEnabled()&&(gh(),mh(this.streamInserts),Array.from(document.querySelectorAll("input[name=id]")).forEach(P=>{P.form&&console.error(`Detected an input with name="id" inside a form! This will cause problems when patching the DOM.
`,P)})),g.length>0&&t.time("post-morph append/prepend restoration",()=>{g.forEach(P=>P.perform())}),t.silenceEvents(()=>H.restoreFocus(a,u,c)),H.dispatchEvent(document,"phx:update"),y.forEach(P=>this.trackAfter("added",P)),d.forEach(P=>this.trackAfter("updated",P)),this.transitionPendingRemoves(),b&&(t.unload(),Object.getPrototypeOf(b).submit.call(b)),!0}onNodeDiscarded(i){(H.isPhxChild(i)||H.isPhxSticky(i))&&this.liveSocket.destroyViewByEl(i),this.trackAfter("discarded",i)}maybePendingRemove(i){return i.getAttribute&&i.getAttribute(this.phxRemove)!==null?(this.pendingRemoves.push(i),!0):!1}removeStreamChildElement(i){this.streamInserts[i.id]?(this.streamComponentRestore[i.id]=i,i.remove()):this.maybePendingRemove(i)||(i.remove(),this.onNodeDiscarded(i))}getStreamInsert(i){return(i.id?this.streamInserts[i.id]:{})||{}}setStreamRef(i,e){H.putSticky(i,Ar,t=>t.setAttribute(Ar,e))}maybeReOrderStream(i,e){let{ref:t,streamAt:n,reset:r}=this.getStreamInsert(i);if(n!==void 0&&(this.setStreamRef(i,t),!(!r&&!e)&&i.parentElement)){if(n===0)i.parentElement.insertBefore(i,i.parentElement.firstElementChild);else if(n>0){let s=Array.from(i.parentElement.children),a=s.indexOf(i);if(n>=s.length-1)i.parentElement.appendChild(i);else{let u=s[n];a>n?i.parentElement.insertBefore(i,u):i.parentElement.insertBefore(i,u.nextElementSibling)}}this.maybeLimitStream(i)}}maybeLimitStream(i){let{limit:e}=this.getStreamInsert(i),t=e!==null&&Array.from(i.parentElement.children);e&&e<0&&t.length>e*-1?t.slice(0,t.length+e).forEach(n=>this.removeStreamChildElement(n)):e&&e>=0&&t.length>e&&t.slice(e).forEach(n=>this.removeStreamChildElement(n))}transitionPendingRemoves(){let{pendingRemoves:i,liveSocket:e}=this;i.length>0&&e.transitionRemoves(i,!1,()=>{i.forEach(t=>{let n=H.firstPhxChild(t);n&&e.destroyViewByEl(n),t.remove()}),this.trackAfter("transitionsDiscarded",i)})}isChangedSelect(i,e){return!(i instanceof HTMLSelectElement)||i.multiple?!1:i.options.length!==e.options.length?!0:(e.value=i.value,!i.isEqualNode(e))}isCIDPatch(){return this.cidPatch}skipCIDSibling(i){return i.nodeType===Node.ELEMENT_NODE&&i.hasAttribute(kl)}targetCIDContainer(i){if(!this.isCIDPatch())return;let[e,...t]=H.findComponentNodeList(this.container,this.targetCID);return t.length===0&&H.childNodeLength(i)===1?e:e&&e.parentNode}indexOf(i,e){return Array.from(i.children).indexOf(e)}},zh=new Set(["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"]),Vh=new Set(["'",'"']),gl=(i,e,t)=>{let n=0,r=!1,s,a,u,c,v,k,A=i.match(/^(\s*(?:<!--.*?-->\s*)*)<([^\s\/>]+)/);if(A===null)throw new Error(`malformed html ${i}`);for(n=A[0].length,s=A[1],u=A[2],c=n,n;n<i.length&&i.charAt(n)!==">";n++)if(i.charAt(n)==="="){let d=i.slice(n-3,n)===" id";n++;let g=i.charAt(n);if(Vh.has(g)){let b=n;for(n++,n;n<i.length&&i.charAt(n)!==g;n++);if(d){v=i.slice(b+1,n);break}}}let N=i.length-1;for(r=!1;N>=s.length+u.length;){let d=i.charAt(N);if(r)d==="-"&&i.slice(N-3,N)==="<!-"?(r=!1,N-=4):N-=1;else if(d===">"&&i.slice(N-2,N)==="--")r=!0,N-=3;else{if(d===">")break;N-=1}}a=i.slice(N+1,i.length);let y=Object.keys(e).map(d=>e[d]===!0?d:`${d}="${e[d]}"`).join(" ");if(t){let d=v?` id="${v}"`:"";zh.has(u)?k=`<${u}${d}${y===""?"":" "}${y}/>`:k=`<${u}${d}${y===""?"":" "}${y}></${u}>`}else{let d=i.slice(c,N+1);k=`<${u}${y===""?"":" "}${y}${d}`}return[k,s,a]},ml=class{static extract(i){let{[nl]:e,[il]:t,[rl]:n}=i;return delete i[nl],delete i[il],delete i[rl],{diff:i,title:n,reply:e||null,events:t||[]}}constructor(i,e){this.viewId=i,this.rendered={},this.magicId=0,this.mergeDiff(e)}parentViewId(){return this.viewId}toString(i){let[e,t]=this.recursiveToString(this.rendered,this.rendered[mt],i,!0,{});return[e,t]}recursiveToString(i,e=i[mt],t,n,r){t=t?new Set(t):null;let s={buffer:"",components:e,onlyCids:t,streams:new Set};return this.toOutputBuffer(i,null,s,n,r),[s.buffer,s.streams]}componentCIDs(i){return Object.keys(i[mt]||{}).map(e=>parseInt(e))}isComponentOnlyDiff(i){return i[mt]?Object.keys(i).length===1:!1}getComponent(i,e){return i[mt][e]}resetRender(i){this.rendered[mt][i]&&(this.rendered[mt][i].reset=!0)}mergeDiff(i){let e=i[mt],t={};if(delete i[mt],this.rendered=this.mutableMerge(this.rendered,i),this.rendered[mt]=this.rendered[mt]||{},e){let n=this.rendered[mt];for(let r in e)e[r]=this.cachedFindComponent(r,e[r],n,e,t);for(let r in e)n[r]=e[r];i[mt]=e}}cachedFindComponent(i,e,t,n,r){if(r[i])return r[i];{let s,a,u=e[yi];if(Li(u)){let c;u>0?c=this.cachedFindComponent(u,n[u],t,n,r):c=t[-u],a=c[yi],s=this.cloneMerge(c,e,!0),s[yi]=a}else s=e[yi]!==void 0||t[i]===void 0?e:this.cloneMerge(t[i],e,!1);return r[i]=s,s}}mutableMerge(i,e){return e[yi]!==void 0?e:(this.doMutableMerge(i,e),i)}doMutableMerge(i,e){for(let t in e){let n=e[t],r=i[t];Yn(n)&&n[yi]===void 0&&Yn(r)?this.doMutableMerge(r,n):i[t]=n}i[Ja]&&(i.newRender=!0)}cloneMerge(i,e,t){let n={...i,...e};for(let r in n){let s=e[r],a=i[r];Yn(s)&&s[yi]===void 0&&Yn(a)?n[r]=this.cloneMerge(a,s,t):s===void 0&&Yn(a)&&(n[r]=this.cloneMerge(a,{},t))}return t?(delete n.magicId,delete n.newRender):i[Ja]&&(n.newRender=!0),n}componentToString(i){let[e,t]=this.recursiveCIDToString(this.rendered[mt],i,null),[n,r,s]=gl(e,{});return[n,t]}pruneCIDs(i){i.forEach(e=>delete this.rendered[mt][e])}get(){return this.rendered}isNewFingerprint(i={}){return!!i[yi]}templateStatic(i,e){return typeof i=="number"?e[i]:i}nextMagicID(){return this.magicId++,`m${this.magicId}-${this.parentViewId()}`}toOutputBuffer(i,e,t,n,r={}){if(i[As])return this.comprehensionToBuffer(i,e,t);let{[yi]:s}=i;s=this.templateStatic(s,e);let a=i[Ja],u=t.buffer;a&&(t.buffer=""),n&&a&&!i.magicId&&(i.newRender=!0,i.magicId=this.nextMagicID()),t.buffer+=s[0];for(let c=1;c<s.length;c++)this.dynamicToBuffer(i[c-1],e,t,n),t.buffer+=s[c];if(a){let c=!1,v;n||i.magicId?(c=n&&!i.newRender,v={[Al]:i.magicId,...r}):v=r,c&&(v[kl]=!0);let[k,A,N]=gl(t.buffer,v,c);i.newRender=!1,t.buffer=u+A+k+N}}comprehensionToBuffer(i,e,t){let{[As]:n,[yi]:r,[sl]:s}=i,[a,u,c,v]=s||[null,{},[],null];r=this.templateStatic(r,e);let k=e||i[fh];for(let A=0;A<n.length;A++){let N=n[A];t.buffer+=r[0];for(let y=1;y<r.length;y++){let d=!1;this.dynamicToBuffer(N[y-1],k,t,d),t.buffer+=r[y]}}s!==void 0&&(i[As].length>0||c.length>0||v)&&(delete i[sl],i[As]=[],t.streams.add(s))}dynamicToBuffer(i,e,t,n){if(typeof i=="number"){let[r,s]=this.recursiveCIDToString(t.components,i,t.onlyCids);t.buffer+=r,t.streams=new Set([...t.streams,...s])}else Yn(i)?this.toOutputBuffer(i,e,t,n,{}):t.buffer+=i}recursiveCIDToString(i,e,t){let n=i[e]||Lt(`no component for CID ${e}`,i),r={[Ri]:e},s=t&&!t.has(e);n.newRender=!s,n.magicId=`c${e}-${this.parentViewId()}`;let a=!n.reset,[u,c]=this.recursiveToString(n,i,t,a,r);return delete n.reset,[u,c]}},vl=[],bl=200,Uh={exec(i,e,t,n,r,s){let[a,u]=s||[null,{callback:s&&s.callback}];(t.charAt(0)==="["?JSON.parse(t):[[a,u]]).forEach(([v,k])=>{v===a&&(k={...u,...k},k.callback=k.callback||u.callback),this.filterToEls(n.liveSocket,r,k).forEach(A=>{this[`exec_${v}`](i,e,t,n,r,A,k)})})},isVisible(i){return!!(i.offsetWidth||i.offsetHeight||i.getClientRects().length>0)},isInViewport(i){let e=i.getBoundingClientRect(),t=window.innerHeight||document.documentElement.clientHeight,n=window.innerWidth||document.documentElement.clientWidth;return e.right>0&&e.bottom>0&&e.left<n&&e.top<t},exec_exec(i,e,t,n,r,s,{attr:a,to:u}){(u?H.all(document,u):[r]).forEach(v=>{let k=v.getAttribute(a);if(!k)throw new Error(`expected ${a} to contain JS command on "${u}"`);n.liveSocket.execJS(v,k,e)})},exec_dispatch(i,e,t,n,r,s,{event:a,detail:u,bubbles:c}){u=u||{},u.dispatcher=r,H.dispatchEvent(s,a,{detail:u,bubbles:c})},exec_push(i,e,t,n,r,s,a){let{event:u,data:c,target:v,page_loading:k,loading:A,value:N,dispatcher:y,callback:d}=a,g={loading:A,value:N,target:v,page_loading:!!k},b=e==="change"&&y?y:r,E=v||b.getAttribute(n.binding("target"))||b,P=(o,h)=>{if(o.isConnected())if(e==="change"){let{newCid:f,_target:_}=a;_=_||(H.isFormInput(r)?r.name:void 0),_&&(g._target=_),o.pushInput(r,h,f,u||t,g,d)}else if(e==="submit"){let{submitter:f}=a;o.submitForm(r,h,u||t,f,g,d)}else o.pushEvent(e,r,h,u||t,c,g,d)};a.targetView&&a.targetCtx?P(a.targetView,a.targetCtx):n.withinTargets(E,P)},exec_navigate(i,e,t,n,r,s,{href:a,replace:u}){n.liveSocket.historyRedirect(i,a,u?"replace":"push",null,r)},exec_patch(i,e,t,n,r,s,{href:a,replace:u}){n.liveSocket.pushHistoryPatch(i,a,u?"replace":"push",r)},exec_focus(i,e,t,n,r,s){window.requestAnimationFrame(()=>wi.attemptFocus(s))},exec_focus_first(i,e,t,n,r,s){window.requestAnimationFrame(()=>wi.focusFirstInteractive(s)||wi.focusFirst(s))},exec_push_focus(i,e,t,n,r,s){window.requestAnimationFrame(()=>vl.push(s||r))},exec_pop_focus(i,e,t,n,r,s){window.requestAnimationFrame(()=>{let a=vl.pop();a&&a.focus()})},exec_add_class(i,e,t,n,r,s,{names:a,transition:u,time:c,blocking:v}){this.addOrRemoveClasses(s,a,[],u,c,n,v)},exec_remove_class(i,e,t,n,r,s,{names:a,transition:u,time:c,blocking:v}){this.addOrRemoveClasses(s,[],a,u,c,n,v)},exec_toggle_class(i,e,t,n,r,s,{names:a,transition:u,time:c,blocking:v}){this.toggleClasses(s,a,u,c,n,v)},exec_toggle_attr(i,e,t,n,r,s,{attr:[a,u,c]}){this.toggleAttr(s,a,u,c)},exec_transition(i,e,t,n,r,s,{time:a,transition:u,blocking:c}){this.addOrRemoveClasses(s,[],[],u,a,n,c)},exec_toggle(i,e,t,n,r,s,{display:a,ins:u,outs:c,time:v,blocking:k}){this.toggle(e,n,s,a,u,c,v,k)},exec_show(i,e,t,n,r,s,{display:a,transition:u,time:c,blocking:v}){this.show(e,n,s,a,u,c,v)},exec_hide(i,e,t,n,r,s,{display:a,transition:u,time:c,blocking:v}){this.hide(e,n,s,a,u,c,v)},exec_set_attr(i,e,t,n,r,s,{attr:[a,u]}){this.setOrRemoveAttrs(s,[[a,u]],[])},exec_remove_attr(i,e,t,n,r,s,{attr:a}){this.setOrRemoveAttrs(s,[],[a])},show(i,e,t,n,r,s,a){this.isVisible(t)||this.toggle(i,e,t,n,r,null,s,a)},hide(i,e,t,n,r,s,a){this.isVisible(t)&&this.toggle(i,e,t,n,null,r,s,a)},toggle(i,e,t,n,r,s,a,u){a=a||bl;let[c,v,k]=r||[[],[],[]],[A,N,y]=s||[[],[],[]];if(c.length>0||A.length>0)if(this.isVisible(t)){let d=()=>{this.addOrRemoveClasses(t,N,c.concat(v).concat(k)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(t,A,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(t,y,N))})},g=()=>{this.addOrRemoveClasses(t,[],A.concat(y)),H.putSticky(t,"toggle",b=>b.style.display="none"),t.dispatchEvent(new Event("phx:hide-end"))};t.dispatchEvent(new Event("phx:hide-start")),u===!1?(d(),setTimeout(g,a)):e.transition(a,d,g)}else{if(i==="remove")return;let d=()=>{this.addOrRemoveClasses(t,v,A.concat(N).concat(y));let b=n||this.defaultDisplay(t);H.putSticky(t,"toggle",E=>E.style.display=b),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(t,c,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(t,k,v))})},g=()=>{this.addOrRemoveClasses(t,[],c.concat(k)),t.dispatchEvent(new Event("phx:show-end"))};t.dispatchEvent(new Event("phx:show-start")),u===!1?(d(),setTimeout(g,a)):e.transition(a,d,g)}else this.isVisible(t)?window.requestAnimationFrame(()=>{t.dispatchEvent(new Event("phx:hide-start")),H.putSticky(t,"toggle",d=>d.style.display="none"),t.dispatchEvent(new Event("phx:hide-end"))}):window.requestAnimationFrame(()=>{t.dispatchEvent(new Event("phx:show-start"));let d=n||this.defaultDisplay(t);H.putSticky(t,"toggle",g=>g.style.display=d),t.dispatchEvent(new Event("phx:show-end"))})},toggleClasses(i,e,t,n,r,s){window.requestAnimationFrame(()=>{let[a,u]=H.getSticky(i,"classes",[[],[]]),c=e.filter(k=>a.indexOf(k)<0&&!i.classList.contains(k)),v=e.filter(k=>u.indexOf(k)<0&&i.classList.contains(k));this.addOrRemoveClasses(i,c,v,t,n,r,s)})},toggleAttr(i,e,t,n){i.hasAttribute(e)?n!==void 0?i.getAttribute(e)===t?this.setOrRemoveAttrs(i,[[e,n]],[]):this.setOrRemoveAttrs(i,[[e,t]],[]):this.setOrRemoveAttrs(i,[],[e]):this.setOrRemoveAttrs(i,[[e,t]],[])},addOrRemoveClasses(i,e,t,n,r,s,a){r=r||bl;let[u,c,v]=n||[[],[],[]];if(u.length>0){let k=()=>{this.addOrRemoveClasses(i,c,[].concat(u).concat(v)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,u,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,v,c))})},A=()=>this.addOrRemoveClasses(i,e.concat(v),t.concat(u).concat(c));a===!1?(k(),setTimeout(A,r)):s.transition(r,k,A);return}window.requestAnimationFrame(()=>{let[k,A]=H.getSticky(i,"classes",[[],[]]),N=e.filter(b=>k.indexOf(b)<0&&!i.classList.contains(b)),y=t.filter(b=>A.indexOf(b)<0&&i.classList.contains(b)),d=k.filter(b=>t.indexOf(b)<0).concat(N),g=A.filter(b=>e.indexOf(b)<0).concat(y);H.putSticky(i,"classes",b=>(b.classList.remove(...g),b.classList.add(...d),[d,g]))})},setOrRemoveAttrs(i,e,t){let[n,r]=H.getSticky(i,"attrs",[[],[]]),s=e.map(([c,v])=>c).concat(t),a=n.filter(([c,v])=>!s.includes(c)).concat(e),u=r.filter(c=>!s.includes(c)).concat(t);H.putSticky(i,"attrs",c=>(u.forEach(v=>c.removeAttribute(v)),a.forEach(([v,k])=>c.setAttribute(v,k)),[a,u]))},hasAllClasses(i,e){return e.every(t=>i.classList.contains(t))},isToggledOut(i,e){return!this.isVisible(i)||this.hasAllClasses(i,e)},filterToEls(i,e,{to:t}){let n=()=>{if(typeof t=="string")return document.querySelectorAll(t);if(t.closest){let r=e.closest(t.closest);return r?[r]:[]}else if(t.inner)return e.querySelectorAll(t.inner)};return t?i.jsQuerySelectorAll(e,t,n):[e]},defaultDisplay(i){return{tr:"table-row",td:"table-cell"}[i.tagName.toLowerCase()]||"block"},transitionClasses(i){if(!i)return null;let[e,t,n]=Array.isArray(i)?i:[i.split(" "),[],[]];return e=Array.isArray(e)?e:e.split(" "),t=Array.isArray(t)?t:t.split(" "),n=Array.isArray(n)?n:n.split(" "),[e,t,n]}},Ne=Uh,Xa="hookId",Wh=1,xr=class{static makeID(){return Wh++}static elementID(i){return H.private(i,Xa)}constructor(i,e,t){this.el=e,this.__attachView(i),this.__callbacks=t,this.__listeners=new Set,this.__isDisconnected=!1,H.putPrivate(this.el,Xa,this.constructor.makeID());for(let n in this.__callbacks)this[n]=this.__callbacks[n]}__attachView(i){i?(this.__view=()=>i,this.liveSocket=i.liveSocket):(this.__view=()=>{throw new Error(`hook not yet attached to a live view: ${this.el.outerHTML}`)},this.liveSocket=null)}__mounted(){this.mounted&&this.mounted()}__updated(){this.updated&&this.updated()}__beforeUpdate(){this.beforeUpdate&&this.beforeUpdate()}__destroyed(){this.destroyed&&this.destroyed(),H.deletePrivate(this.el,Xa)}__reconnected(){this.__isDisconnected&&(this.__isDisconnected=!1,this.reconnected&&this.reconnected())}__disconnected(){this.__isDisconnected=!0,this.disconnected&&this.disconnected()}js(){let i=this;return{exec(e){i.__view().liveSocket.execJS(i.el,e,"hook")},show(e,t={}){let n=i.__view().liveSocket.owner(e);Ne.show("hook",n,e,t.display,t.transition,t.time,t.blocking)},hide(e,t={}){let n=i.__view().liveSocket.owner(e);Ne.hide("hook",n,e,null,t.transition,t.time,t.blocking)},toggle(e,t={}){let n=i.__view().liveSocket.owner(e);t.in=Ne.transitionClasses(t.in),t.out=Ne.transitionClasses(t.out),Ne.toggle("hook",n,e,t.display,t.in,t.out,t.time,t.blocking)},addClass(e,t,n={}){t=Array.isArray(t)?t:t.split(" ");let r=i.__view().liveSocket.owner(e);Ne.addOrRemoveClasses(e,t,[],n.transition,n.time,r,n.blocking)},removeClass(e,t,n={}){n.transition=Ne.transitionClasses(n.transition),t=Array.isArray(t)?t:t.split(" ");let r=i.__view().liveSocket.owner(e);Ne.addOrRemoveClasses(e,[],t,n.transition,n.time,r,n.blocking)},toggleClass(e,t,n={}){n.transition=Ne.transitionClasses(n.transition),t=Array.isArray(t)?t:t.split(" ");let r=i.__view().liveSocket.owner(e);Ne.toggleClasses(e,t,n.transition,n.time,r,n.blocking)},transition(e,t,n={}){let r=i.__view().liveSocket.owner(e);Ne.addOrRemoveClasses(e,[],[],Ne.transitionClasses(t),n.time,r,n.blocking)},setAttribute(e,t,n){Ne.setOrRemoveAttrs(e,[[t,n]],[])},removeAttribute(e,t){Ne.setOrRemoveAttrs(e,[],[t])},toggleAttribute(e,t,n,r){Ne.toggleAttr(e,t,n,r)}}}pushEvent(i,e={},t){return t===void 0?new Promise((n,r)=>{try{this.__view().pushHookEvent(this.el,null,i,e,(a,u)=>n(a))===!1&&r(new Error("unable to push hook event. LiveView not connected"))}catch(s){r(s)}}):this.__view().pushHookEvent(this.el,null,i,e,t)}pushEventTo(i,e,t={},n){return n===void 0?new Promise((r,s)=>{try{this.__view().withinTargets(i,(a,u)=>{a.pushHookEvent(this.el,u,e,t,(v,k)=>r(v))===!1&&s(new Error("unable to push hook event. LiveView not connected"))})}catch(a){s(a)}}):this.__view().withinTargets(i,(r,s)=>r.pushHookEvent(this.el,s,e,t,n))}handleEvent(i,e){let t=(n,r)=>r?i:e(n.detail);return window.addEventListener(`phx:${i}`,t),this.__listeners.add(t),t}removeHandleEvent(i){let e=i(null,!0);window.removeEventListener(`phx:${e}`,i),this.__listeners.delete(i)}upload(i,e){return this.__view().dispatchUploads(null,i,e)}uploadTo(i,e,t){return this.__view().withinTargets(i,(n,r)=>{n.dispatchUploads(r,e,t)})}__cleanup__(){this.__listeners.forEach(i=>this.removeHandleEvent(i))}},$h=(i,e)=>{let t=i.endsWith("[]"),n=t?i.slice(0,-2):i;return n=n.replace(/([^\[\]]+)(\]?$)/,`${e}$1$2`),t&&(n+="[]"),n},Ds=(i,e,t=[])=>{let{submitter:n,...r}=e,s;if(n&&n.name){let k=document.createElement("input");k.type="hidden";let A=n.getAttribute("form");A&&k.setAttribute("form",A),k.name=n.name,k.value=n.value,n.parentElement.insertBefore(k,n),s=k}let a=new FormData(i),u=[];a.forEach((k,A,N)=>{k instanceof File&&u.push(A)}),u.forEach(k=>a.delete(k));let c=new URLSearchParams,v=Array.from(i.elements);for(let[k,A]of a.entries())if(t.length===0||t.indexOf(k)>=0){let N=v.filter(g=>g.name===k),y=!N.some(g=>H.private(g,Ls)||H.private(g,Rr)),d=N.every(g=>g.type==="hidden");y&&!(n&&n.name==k)&&!d&&c.append($h(k,"_unused_"),""),c.append(k,A)}n&&s&&n.parentElement.removeChild(s);for(let k in r)c.append(k,r[k]);return c.toString()},qh=class Dl{static closestView(e){let t=e.closest(En);return t?H.private(t,"view"):null}constructor(e,t,n,r,s){this.isDead=!1,this.liveSocket=t,this.flash=r,this.parent=n,this.root=n?n.root:this,this.el=e,H.putPrivate(this.el,"view",this),this.id=this.el.id,this.ref=0,this.lastAckRef=null,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.pendingForms=new Set,this.redirect=!1,this.href=null,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinAttempts=0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(a){a&&a()},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.formsForRecovery={},this.channel=this.liveSocket.channel(`lv:${this.id}`,()=>{let a=this.href&&this.expandURL(this.href);return{redirect:this.redirect?a:void 0,url:this.redirect?void 0:a||void 0,params:this.connectParams(s),session:this.getSession(),static:this.getStatic(),flash:this.flash}})}setHref(e){this.href=e}setRedirect(e){this.redirect=!0,this.href=e}isMain(){return this.el.hasAttribute(no)}connectParams(e){let t=this.liveSocket.params(this.el),n=H.all(document,`[${this.binding(Qc)}]`).map(r=>r.src||r.href).filter(r=>typeof r=="string");return n.length>0&&(t._track_static=n),t._mounts=this.joinCount,t._mount_attempts=this.joinAttempts,t._live_referer=e,this.joinAttempts++,t}isConnected(){return this.channel.canPush()}getSession(){return this.el.getAttribute(_i)}getStatic(){let e=this.el.getAttribute(kn);return e===""?null:e}destroy(e=function(){}){this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);let t=()=>{e();for(let n in this.viewHooks)this.destroyHook(this.viewHooks[n])};H.markPhxChildDestroyed(this.el),this.log("destroyed",()=>["the child has been removed from the parent"]),this.channel.leave().receive("ok",t).receive("error",t).receive("timeout",t)}setContainerClasses(...e){this.el.classList.remove(qu,wn,Xn,Ku,_r),this.el.classList.add(...e)}showLoader(e){if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout(()=>this.showLoader(),e);else{for(let t in this.viewHooks)this.viewHooks[t].__disconnected();this.setContainerClasses(wn)}}execAll(e){H.all(this.el,`[${e}]`,t=>this.liveSocket.execJS(t,t.getAttribute(e)))}hideLoader(){clearTimeout(this.loaderTimer),this.setContainerClasses(qu),this.execAll(this.binding("connected"))}triggerReconnected(){for(let e in this.viewHooks)this.viewHooks[e].__reconnected()}log(e,t){this.liveSocket.log(this,e,t)}transition(e,t,n=function(){}){this.liveSocket.transition(e,t,n)}withinTargets(e,t,n=document,r){if(e instanceof HTMLElement||e instanceof SVGElement)return this.liveSocket.owner(e,s=>t(s,e));if(Li(e))H.findComponentNodeList(r||this.el,e).length===0?Lt(`no component found matching phx-target of ${e}`):t(this,parseInt(e));else{let s=Array.from(n.querySelectorAll(e));s.length===0&&Lt(`nothing found matching the phx-target selector "${e}"`),s.forEach(a=>this.liveSocket.owner(a,u=>t(u,a)))}}applyDiff(e,t,n){this.log(e,()=>["",xs(t)]);let{diff:r,reply:s,events:a,title:u}=ml.extract(t);n({diff:r,reply:s,events:a}),(typeof u=="string"||e=="mount")&&window.requestAnimationFrame(()=>H.putTitle(u))}onJoin(e){let{rendered:t,container:n,liveview_version:r}=e;if(n){let[s,a]=n;this.el=H.replaceRootContainer(this.el,s,a)}this.childJoins=0,this.joinPending=!0,this.flash=null,this.root===this&&(this.formsForRecovery=this.getFormsForRecovery()),this.isMain()&&window.history.state===null&&xt.pushState("replace",{type:"patch",id:this.id,position:this.liveSocket.currentHistoryPosition}),r!==this.liveSocket.version()&&console.error(`LiveView asset version mismatch. JavaScript version ${this.liveSocket.version()} vs. server ${r}. To avoid issues, please ensure that your assets use the same version as the server.`),xt.dropLocal(this.liveSocket.localStorage,window.location.pathname,yl),this.applyDiff("mount",t,({diff:s,events:a})=>{this.rendered=new ml(this.id,s);let[u,c]=this.renderContainer(null,"join");this.dropPendingRefs(),this.joinCount++,this.joinAttempts=0,this.maybeRecoverForms(u,()=>{this.onJoinComplete(e,u,c,a)})})}dropPendingRefs(){H.all(document,`[${Gt}="${this.refSrc()}"]`,e=>{e.removeAttribute(Qn),e.removeAttribute(Gt),e.removeAttribute(tt)})}onJoinComplete({live_patch:e},t,n,r){if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(e,t,n,r);H.findPhxChildrenInFragment(t,this.id).filter(a=>{let u=a.id&&this.el.querySelector(`[id="${a.id}"]`),c=u&&u.getAttribute(kn);return c&&a.setAttribute(kn,c),u&&u.setAttribute(en,this.root.id),this.joinChild(a)}).length===0?this.parent?(this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,n,r)]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(e,t,n,r)):this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,n,r)])}attachTrueDocEl(){this.el=H.byId(this.id),this.el.setAttribute(en,this.root.id)}execNewMounted(e=this.el){let t=this.binding(Za),n=this.binding(Qa);H.all(e,`[${t}], [${n}]`,r=>{this.ownsElement(r)&&(H.maintainPrivateHooks(r,r,t,n),this.maybeAddNewHook(r))}),H.all(e,`[${this.binding(kr)}], [data-phx-${kr}]`,r=>{this.ownsElement(r)&&this.maybeAddNewHook(r)}),H.all(e,`[${this.binding(Yu)}]`,r=>{this.ownsElement(r)&&this.maybeMounted(r)})}applyJoinPatch(e,t,n,r){this.attachTrueDocEl();let s=new Ss(this,this.el,this.id,t,n,null);if(s.markPrunableContentForRemoval(),this.performPatch(s,!1,!0),this.joinNewChildren(),this.execNewMounted(),this.joinPending=!1,this.liveSocket.dispatchEvents(r),this.applyPendingUpdates(),e){let{kind:a,to:u}=e;this.liveSocket.historyPatch(u,a)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}triggerBeforeUpdateHook(e,t){this.liveSocket.triggerDOM("onBeforeElUpdated",[e,t]);let n=this.getHook(e),r=n&&H.isIgnored(e,this.binding(Ps));if(n&&!e.isEqualNode(t)&&!(r&&bh(e.dataset,t.dataset)))return n.__beforeUpdate(),n}maybeMounted(e){let t=e.getAttribute(this.binding(Yu)),n=t&&H.private(e,"mounted");t&&!n&&(this.liveSocket.execJS(e,t),H.putPrivate(e,"mounted",!0))}maybeAddNewHook(e){let t=this.addHook(e);t&&t.__mounted()}performPatch(e,t,n=!1){let r=[],s=!1,a=new Set;return this.liveSocket.triggerDOM("onPatchStart",[e.targetContainer]),e.after("added",u=>{this.liveSocket.triggerDOM("onNodeAdded",[u]);let c=this.binding(Za),v=this.binding(Qa);H.maintainPrivateHooks(u,u,c,v),this.maybeAddNewHook(u),u.getAttribute&&this.maybeMounted(u)}),e.after("phxChildAdded",u=>{H.isPhxSticky(u)?this.liveSocket.joinRootViews():s=!0}),e.before("updated",(u,c)=>{this.triggerBeforeUpdateHook(u,c)&&a.add(u.id)}),e.after("updated",u=>{a.has(u.id)&&this.getHook(u).__updated()}),e.after("discarded",u=>{u.nodeType===Node.ELEMENT_NODE&&r.push(u)}),e.after("transitionsDiscarded",u=>this.afterElementsRemoved(u,t)),e.perform(n),this.afterElementsRemoved(r,t),this.liveSocket.triggerDOM("onPatchEnd",[e.targetContainer]),s}afterElementsRemoved(e,t){let n=[];e.forEach(r=>{let s=H.all(r,`[${Ri}]`),a=H.all(r,`[${this.binding(kr)}], [data-phx-hook]`);s.concat(r).forEach(u=>{let c=this.componentID(u);Li(c)&&n.indexOf(c)===-1&&n.push(c)}),a.concat(r).forEach(u=>{let c=this.getHook(u);c&&this.destroyHook(c)})}),t&&this.maybePushComponentsDestroyed(n)}joinNewChildren(){H.findPhxChildren(this.el,this.id).forEach(e=>this.joinChild(e))}maybeRecoverForms(e,t){let n=this.binding("change"),r=this.root.formsForRecovery,s=document.createElement("template");s.innerHTML=e;let a=s.content.firstElementChild;a.id=this.id,a.setAttribute(en,this.root.id),a.setAttribute(_i,this.getSession()),a.setAttribute(kn,this.getStatic()),a.setAttribute(An,this.parent?this.parent.id:null);let u=H.all(s.content,"form").filter(c=>c.id&&r[c.id]).filter(c=>!this.pendingForms.has(c.id)).filter(c=>r[c.id].getAttribute(n)===c.getAttribute(n)).map(c=>[r[c.id],c]);if(u.length===0)return t();u.forEach(([c,v],k)=>{this.pendingForms.add(v.id),this.pushFormRecovery(c,v,s.content.firstElementChild,()=>{this.pendingForms.delete(v.id),k===u.length-1&&t()})})}getChildById(e){return this.root.children[this.id][e]}getDescendentByEl(e){return e.id===this.id?this:this.children[e.getAttribute(An)]?.[e.id]}destroyDescendent(e){for(let t in this.root.children)for(let n in this.root.children[t])if(n===e)return this.root.children[t][n].destroy()}joinChild(e){if(!this.getChildById(e.id)){let n=new Dl(e,this.liveSocket,this);return this.root.children[this.id][n.id]=n,n.join(),this.childJoins++,!0}}isJoinPending(){return this.joinPending}ackJoin(e){this.childJoins--,this.childJoins===0&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}onAllChildJoinsComplete(){this.pendingForms.clear(),this.formsForRecovery={},this.joinCallback(()=>{this.pendingJoinOps.forEach(([e,t])=>{e.isDestroyed()||t()}),this.pendingJoinOps=[]})}update(e,t){if(this.isJoinPending()||this.liveSocket.hasPendingLink()&&this.root.isMain())return this.pendingDiffs.push({diff:e,events:t});this.rendered.mergeDiff(e);let n=!1;this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time("component patch complete",()=>{H.findExistingParentCIDs(this.el,this.rendered.componentCIDs(e)).forEach(s=>{this.componentPatch(this.rendered.getComponent(e,s),s)&&(n=!0)})}):al(e)||this.liveSocket.time("full patch complete",()=>{let[r,s]=this.renderContainer(e,"update"),a=new Ss(this,this.el,this.id,r,s,null);n=this.performPatch(a,!0)}),this.liveSocket.dispatchEvents(t),n&&this.joinNewChildren()}renderContainer(e,t){return this.liveSocket.time(`toString diff (${t})`,()=>{let n=this.el.tagName,r=e?this.rendered.componentCIDs(e):null,[s,a]=this.rendered.toString(r);return[`<${n}>${s}</${n}>`,a]})}componentPatch(e,t){if(al(e))return!1;let[n,r]=this.rendered.componentToString(t),s=new Ss(this,this.el,this.id,n,r,t);return this.performPatch(s,!0)}getHook(e){return this.viewHooks[xr.elementID(e)]}addHook(e){let t=xr.elementID(e);if(!(e.getAttribute&&!this.ownsElement(e)))if(t&&!this.viewHooks[t]){let n=H.getCustomElHook(e)||Lt(`no hook found for custom element: ${e.id}`);return this.viewHooks[t]=n,n.__attachView(this),n}else{if(t||!e.getAttribute)return;{let n=e.getAttribute(`data-phx-${kr}`)||e.getAttribute(this.binding(kr)),r=this.liveSocket.getHookCallbacks(n);if(r){e.id||Lt(`no DOM ID for hook "${n}". Hooks require a unique ID on each element.`,e);let s=new xr(this,e,r);return this.viewHooks[xr.elementID(s.el)]=s,s}else n!==null&&Lt(`unknown hook found for "${n}"`,e)}}}destroyHook(e){let t=xr.elementID(e.el);e.__destroyed(),e.__cleanup__(),delete this.viewHooks[t]}applyPendingUpdates(){this.pendingDiffs.forEach(({diff:e,events:t})=>this.update(e,t)),this.pendingDiffs=[],this.eachChild(e=>e.applyPendingUpdates())}eachChild(e){let t=this.root.children[this.id]||{};for(let n in t)e(this.getChildById(n))}onChannel(e,t){this.liveSocket.onChannel(this.channel,e,n=>{this.isJoinPending()?this.root.pendingJoinOps.push([this,()=>t(n)]):this.liveSocket.requestDOMUpdate(()=>t(n))})}bindChannel(){this.liveSocket.onChannel(this.channel,"diff",e=>{this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",e,({diff:t,events:n})=>this.update(t,n))})}),this.onChannel("redirect",({to:e,flash:t})=>this.onRedirect({to:e,flash:t})),this.onChannel("live_patch",e=>this.onLivePatch(e)),this.onChannel("live_redirect",e=>this.onLiveRedirect(e)),this.channel.onError(e=>this.onError(e)),this.channel.onClose(e=>this.onClose(e))}destroyAllChildren(){this.eachChild(e=>e.destroy())}onLiveRedirect(e){let{to:t,kind:n,flash:r}=e,s=this.expandURL(t),a=new CustomEvent("phx:server-navigate",{detail:{to:t,kind:n,flash:r}});this.liveSocket.historyRedirect(a,s,n,r)}onLivePatch(e){let{to:t,kind:n}=e;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,n)}expandURL(e){return e.startsWith("/")?`${window.location.protocol}//${window.location.host}${e}`:e}onRedirect({to:e,flash:t,reloadToken:n}){this.liveSocket.redirect(e,t,n)}isDestroyed(){return this.destroyed}joinDead(){this.isDead=!0}joinPush(){return this.joinPush=this.joinPush||this.channel.join(),this.joinPush}join(e){this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel(),this.isMain()&&(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=t=>{t=t||function(){},e?e(this.joinCount,t):t()},this.wrapPush(()=>this.channel.join(),{ok:t=>this.liveSocket.requestDOMUpdate(()=>this.onJoin(t)),error:t=>this.onJoinError(t),timeout:()=>this.onJoinError({reason:"timeout"})})}onJoinError(e){if(e.reason==="reload"){this.log("error",()=>[`failed mount with ${e.status}. Falling back to page reload`,e]),this.onRedirect({to:this.root.href,reloadToken:e.token});return}else if(e.reason==="unauthorized"||e.reason==="stale"){this.log("error",()=>["unauthorized live_redirect. Falling back to page request",e]),this.onRedirect({to:this.root.href});return}if((e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect)return this.onRedirect(e.redirect);if(e.live_redirect)return this.onLiveRedirect(e.live_redirect);if(this.log("error",()=>["unable to join",e]),this.isMain())this.displayError([wn,Xn,_r]),this.liveSocket.isConnected()&&this.liveSocket.reloadWithJitter(this);else{this.joinAttempts>=Qu&&(this.root.displayError([wn,Xn,_r]),this.log("error",()=>[`giving up trying to mount after ${Qu} tries`,e]),this.destroy());let t=H.byId(this.el.id);t?(H.mergeAttrs(t,this.el),this.displayError([wn,Xn,_r]),this.el=t):this.destroy()}}onClose(e){if(!this.isDestroyed()){if(this.isMain()&&this.liveSocket.hasPendingLink()&&e!=="leave")return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(lh)}}onError(e){this.onClose(e),this.liveSocket.isConnected()&&this.log("error",()=>["view crashed",e]),this.liveSocket.isUnloaded()||(this.liveSocket.isConnected()?this.displayError([wn,Xn,_r]):this.displayError([wn,Xn,Ku]))}displayError(e){this.isMain()&&H.dispatchEvent(window,"phx:page-loading-start",{detail:{to:this.href,kind:"error"}}),this.showLoader(),this.setContainerClasses(...e),this.execAll(this.binding("disconnected"))}wrapPush(e,t){let n=this.liveSocket.getLatencySim(),r=n?s=>setTimeout(()=>!this.isDestroyed()&&s(),n):s=>!this.isDestroyed()&&s();r(()=>{e().receive("ok",s=>r(()=>t.ok&&t.ok(s))).receive("error",s=>r(()=>t.error&&t.error(s))).receive("timeout",()=>r(()=>t.timeout&&t.timeout()))})}pushWithReply(e,t,n){if(!this.isConnected())return Promise.reject({error:"noconnection"});let[r,[s],a]=e?e():[null,[],{}],u=this.joinCount,c=function(){};return a.page_loading&&(c=this.liveSocket.withPageLoading({kind:"element",target:s})),typeof n.cid!="number"&&delete n.cid,new Promise((v,k)=>{this.wrapPush(()=>this.channel.push(t,n,ch),{ok:A=>{r!==null&&(this.lastAckRef=r);let N=y=>{A.redirect&&this.onRedirect(A.redirect),A.live_patch&&this.onLivePatch(A.live_patch),A.live_redirect&&this.onLiveRedirect(A.live_redirect),c(),v({resp:A,reply:y})};A.diff?this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",A.diff,({diff:y,reply:d,events:g})=>{r!==null&&this.undoRefs(r,n.event),this.update(y,g),N(d)})}):(r!==null&&this.undoRefs(r,n.event),N(null))},error:A=>k({error:A}),timeout:()=>{k({timeout:!0}),this.joinCount===u&&this.liveSocket.reloadWithJitter(this,()=>{this.log("timeout",()=>["received timeout while communicating with server. Falling back to hard refresh for recovery"])})}})})}undoRefs(e,t,n){if(!this.isConnected())return;let r=`[${Gt}="${this.refSrc()}"]`;n?(n=new Set(n),H.all(document,r,s=>{n&&!n.has(s)||(H.all(s,r,a=>this.undoElRef(a,e,t)),this.undoElRef(s,e,t))})):H.all(document,r,s=>this.undoElRef(s,e,t))}undoElRef(e,t,n){new ll(e).maybeUndo(t,n,s=>{let a=new Ss(this,e,this.id,s,[],null,{undoRef:t}),u=this.performPatch(a,!0);H.all(e,`[${Gt}="${this.refSrc()}"]`,c=>this.undoElRef(c,t,n)),u&&this.joinNewChildren()})}refSrc(){return this.el.id}putRef(e,t,n,r={}){let s=this.ref++,a=this.binding(Gu);if(r.loading){let u=H.all(document,r.loading).map(c=>({el:c,lock:!0,loading:!0}));e=e.concat(u)}for(let{el:u,lock:c,loading:v}of e){if(!c&&!v)throw new Error("putRef requires lock or loading");if(u.setAttribute(Gt,this.refSrc()),v&&u.setAttribute(Qn,s),c&&u.setAttribute(tt,s),!v||r.submitter&&!(u===r.submitter||u===r.form))continue;let k=new Promise(d=>{u.addEventListener(`phx:undo-lock:${s}`,()=>d(y),{once:!0})}),A=new Promise(d=>{u.addEventListener(`phx:undo-loading:${s}`,()=>d(y),{once:!0})});u.classList.add(`phx-${n}-loading`);let N=u.getAttribute(a);N!==null&&(u.getAttribute(Rs)||u.setAttribute(Rs,u.innerText),N!==""&&(u.innerText=N),u.setAttribute(Zn,u.getAttribute(Zn)||u.disabled),u.setAttribute("disabled",""));let y={event:t,eventType:n,ref:s,isLoading:v,isLocked:c,lockElements:e.filter(({lock:d})=>d).map(({el:d})=>d),loadingElements:e.filter(({loading:d})=>d).map(({el:d})=>d),unlock:d=>{d=Array.isArray(d)?d:[d],this.undoRefs(s,t,d)},lockComplete:k,loadingComplete:A,lock:d=>new Promise(g=>{if(this.isAcked(s))return g(y);d.setAttribute(tt,s),d.setAttribute(Gt,this.refSrc()),d.addEventListener(`phx:lock-stop:${s}`,()=>g(y),{once:!0})})};u.dispatchEvent(new CustomEvent("phx:push",{detail:y,bubbles:!0,cancelable:!1})),t&&u.dispatchEvent(new CustomEvent(`phx:push:${t}`,{detail:y,bubbles:!0,cancelable:!1}))}return[s,e.map(({el:u})=>u),r]}isAcked(e){return this.lastAckRef!==null&&this.lastAckRef>=e}componentID(e){let t=e.getAttribute&&e.getAttribute(Ri);return t?parseInt(t):null}targetComponentID(e,t,n={}){if(Li(t))return t;let r=n.target||e.getAttribute(this.binding("target"));return Li(r)?parseInt(r):t&&(r!==null||n.target)?this.closestComponentID(t):null}closestComponentID(e){return Li(e)?e:e?Qi(e.closest(`[${Ri}]`),t=>this.ownsElement(t)&&this.componentID(t)):null}pushHookEvent(e,t,n,r,s){if(!this.isConnected())return this.log("hook",()=>["unable to push hook event. LiveView not connected",n,r]),!1;let[a,u,c]=this.putRef([{el:e,loading:!0,lock:!0}],n,"hook");return this.pushWithReply(()=>[a,u,c],"event",{type:"hook",event:n,value:r,cid:this.closestComponentID(t)}).then(({resp:v,reply:k})=>s(k,a)),a}extractMeta(e,t,n){let r=this.binding("value-");for(let s=0;s<e.attributes.length;s++){t||(t={});let a=e.attributes[s].name;a.startsWith(r)&&(t[a.replace(r,"")]=e.getAttribute(a))}if(e.value!==void 0&&!(e instanceof HTMLFormElement)&&(t||(t={}),t.value=e.value,e.tagName==="INPUT"&&El.indexOf(e.type)>=0&&!e.checked&&delete t.value),n){t||(t={});for(let s in n)t[s]=n[s]}return t}pushEvent(e,t,n,r,s,a={},u){this.pushWithReply(()=>this.putRef([{el:t,loading:!0,lock:!0}],r,e,a),"event",{type:e,event:r,value:this.extractMeta(t,s,a.value),cid:this.targetComponentID(t,n,a)}).then(({reply:c})=>u&&u(c))}pushFileProgress(e,t,n,r=function(){}){this.liveSocket.withinOwners(e.form,(s,a)=>{s.pushWithReply(null,"progress",{event:e.getAttribute(s.binding(oh)),ref:e.getAttribute(Pi),entry_ref:t,progress:n,cid:s.targetComponentID(e.form,a)}).then(({resp:u})=>r(u))})}pushInput(e,t,n,r,s,a){if(!e.form)throw new Error("form events require the input to be inside a form");let u,c=Li(n)?n:this.targetComponentID(e.form,t,s),v=()=>this.putRef([{el:e,loading:!0,lock:!0},{el:e.form,loading:!0,lock:!0}],r,"change",s),k,A=this.extractMeta(e.form);e instanceof HTMLButtonElement&&(A.submitter=e),e.getAttribute(this.binding("change"))?k=Ds(e.form,{_target:s._target,...A},[e.name]):k=Ds(e.form,{_target:s._target,...A}),H.isUploadInput(e)&&e.files&&e.files.length>0&&it.trackFiles(e,Array.from(e.files)),u=it.serializeUploads(e);let N={type:"form",event:r,value:k,uploads:u,cid:c};this.pushWithReply(v,"event",N).then(({resp:y})=>{H.isUploadInput(e)&&H.isAutoUpload(e)?ll.onUnlock(e,()=>{if(it.filesAwaitingPreflight(e).length>0){let[d,g]=v();this.undoRefs(d,r,[e.form]),this.uploadFiles(e.form,r,t,d,c,b=>{a&&a(y),this.triggerAwaitingSubmit(e.form,r),this.undoRefs(d,r)})}}):a&&a(y)})}triggerAwaitingSubmit(e,t){let n=this.getScheduledSubmit(e);if(n){let[r,s,a,u]=n;this.cancelSubmit(e,t),u()}}getScheduledSubmit(e){return this.formSubmits.find(([t,n,r,s])=>t.isSameNode(e))}scheduleSubmit(e,t,n,r){if(this.getScheduledSubmit(e))return!0;this.formSubmits.push([e,t,n,r])}cancelSubmit(e,t){this.formSubmits=this.formSubmits.filter(([n,r,s,a])=>n.isSameNode(e)?(this.undoRefs(r,t),!1):!0)}disableForm(e,t,n={}){let r=d=>!(Lr(d,`${this.binding(Ps)}=ignore`,d.form)||Lr(d,"data-phx-update=ignore",d.form)),s=d=>d.hasAttribute(this.binding(Gu)),a=d=>d.tagName=="BUTTON",u=d=>["INPUT","TEXTAREA","SELECT"].includes(d.tagName),c=Array.from(e.elements),v=c.filter(s),k=c.filter(a).filter(r),A=c.filter(u).filter(r);k.forEach(d=>{d.setAttribute(Zn,d.disabled),d.disabled=!0}),A.forEach(d=>{d.setAttribute(eo,d.readOnly),d.readOnly=!0,d.files&&(d.setAttribute(Zn,d.disabled),d.disabled=!0)});let N=v.concat(k).concat(A).map(d=>({el:d,loading:!0,lock:!0})),y=[{el:e,loading:!0,lock:!1}].concat(N).reverse();return this.putRef(y,t,"submit",n)}pushFormSubmit(e,t,n,r,s,a){let u=()=>this.disableForm(e,n,{...s,form:e,submitter:r}),c=this.targetComponentID(e,t);if(it.hasUploadsInProgress(e)){let[v,k]=u(),A=()=>this.pushFormSubmit(e,t,n,r,s,a);return this.scheduleSubmit(e,v,s,A)}else if(it.inputsAwaitingPreflight(e).length>0){let[v,k]=u(),A=()=>[v,k,s];this.uploadFiles(e,n,t,v,c,N=>{if(it.inputsAwaitingPreflight(e).length>0)return this.undoRefs(v,n);let y=this.extractMeta(e),d=Ds(e,{submitter:r,...y});this.pushWithReply(A,"event",{type:"form",event:n,value:d,cid:c}).then(({resp:g})=>a(g))})}else if(!(e.hasAttribute(Gt)&&e.classList.contains("phx-submit-loading"))){let v=this.extractMeta(e),k=Ds(e,{submitter:r,...v});this.pushWithReply(u,"event",{type:"form",event:n,value:k,cid:c}).then(({resp:A})=>a(A))}}uploadFiles(e,t,n,r,s,a){let u=this.joinCount,c=it.activeFileInputs(e),v=c.length;c.forEach(k=>{let A=new it(k,this,()=>{v--,v===0&&a()}),N=A.entries().map(d=>d.toPreflightPayload());if(N.length===0){v--;return}let y={ref:k.getAttribute(Pi),entries:N,cid:this.targetComponentID(k.form,n)};this.log("upload",()=>["sending preflight request",y]),this.pushWithReply(null,"allow_upload",y).then(({resp:d})=>{if(this.log("upload",()=>["got preflight response",d]),A.entries().forEach(g=>{d.entries&&!d.entries[g.ref]&&this.handleFailedEntryPreflight(g.ref,"failed preflight",A)}),d.error||Object.keys(d.entries).length===0)this.undoRefs(r,t),(d.error||[]).map(([b,E])=>{this.handleFailedEntryPreflight(b,E,A)});else{let g=b=>{this.channel.onError(()=>{this.joinCount===u&&b()})};A.initAdapterUpload(d,g,this.liveSocket)}})})}handleFailedEntryPreflight(e,t,n){if(n.isAutoUpload()){let r=n.entries().find(s=>s.ref===e.toString());r&&r.cancel()}else n.entries().map(r=>r.cancel());this.log("upload",()=>[`error for entry ${e}`,t])}dispatchUploads(e,t,n){let r=this.targetCtxElement(e)||this.el,s=H.findUploadInputs(r).filter(a=>a.name===t);s.length===0?Lt(`no live file inputs found matching the name "${t}"`):s.length>1?Lt(`duplicate live file inputs found matching the name "${t}"`):H.dispatchEvent(s[0],_l,{detail:{files:n}})}targetCtxElement(e){if(Li(e)){let[t]=H.findComponentNodeList(this.el,e);return t}else return e||null}pushFormRecovery(e,t,n,r){let s=this.binding("change"),a=t.getAttribute(this.binding("target"))||t,u=t.getAttribute(this.binding(Xu))||t.getAttribute(this.binding("change")),c=Array.from(e.elements).filter(A=>H.isFormInput(A)&&A.name&&!A.hasAttribute(s));if(c.length===0)return;c.forEach(A=>A.hasAttribute(Pi)&&it.clearFiles(A));let v=c.find(A=>A.type!=="hidden")||c[0],k=0;this.withinTargets(a,(A,N)=>{let y=this.targetComponentID(t,N);k++;let d=new CustomEvent("phx:form-recovery",{detail:{sourceElement:e}});Ne.exec(d,"change",u,this,v,["push",{_target:v.name,targetView:A,targetCtx:N,newCid:y,callback:()=>{k--,k===0&&r()}}])},n,n)}pushLinkPatch(e,t,n,r){let s=this.liveSocket.setPendingLink(t),a=e.isTrusted&&e.type!=="popstate",u=n?()=>this.putRef([{el:n,loading:a,lock:!0}],null,"click"):null,c=()=>this.liveSocket.redirect(window.location.href),v=t.startsWith("/")?`${location.protocol}//${location.host}${t}`:t;this.pushWithReply(u,"live_patch",{url:v}).then(({resp:k})=>{this.liveSocket.requestDOMUpdate(()=>{k.link_redirect?this.liveSocket.replaceMain(t,null,r,s):(this.liveSocket.commitPendingLink(s)&&(this.href=t),this.applyPendingUpdates(),r&&r(s))})},({error:k,timeout:A})=>c())}getFormsForRecovery(){if(this.joinCount===0)return{};let e=this.binding("change");return H.all(this.el,`form[${e}]`).filter(t=>t.id).filter(t=>t.elements.length>0).filter(t=>t.getAttribute(this.binding(Xu))!=="ignore").map(t=>t.cloneNode(!0)).reduce((t,n)=>(t[n.id]=n,t),{})}maybePushComponentsDestroyed(e){let t=e.filter(n=>H.findComponentNodeList(this.el,n).length===0);t.length>0&&(t.forEach(n=>this.rendered.resetRender(n)),this.pushWithReply(null,"cids_will_destroy",{cids:t}).then(()=>{this.liveSocket.requestDOMUpdate(()=>{let n=t.filter(r=>H.findComponentNodeList(this.el,r).length===0);n.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:n}).then(({resp:r})=>{this.rendered.pruneCIDs(r.cids)})})}))}ownsElement(e){let t=e.closest(En);return e.getAttribute(An)===this.id||t&&t.id===this.id||!t&&this.isDead}submitForm(e,t,n,r,s={}){H.putPrivate(e,Rr,!0),Array.from(e.elements).forEach(u=>H.putPrivate(u,Rr,!0)),this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,n,r,s,()=>{this.liveSocket.restorePreviouslyActiveFocus()})}binding(e){return this.liveSocket.binding(e)}};var Tl=class{constructor(i,e,t={}){if(this.unloaded=!1,!e||e.constructor.name==="Object")throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);this.socket=new e(i,t),this.bindingPrefix=t.bindingPrefix||dh,this.opts=t,this.params=Sr(t.params||{}),this.viewLogger=t.viewLogger,this.metadataCallbacks=t.metadata||{},this.defaults=Object.assign(xs(hh),t.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.outgoingMainEl=null,this.clickStartedAtTarget=null,this.linkRef=1,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=xs(window.location),this.hooks=t.hooks||{},this.uploaders=t.uploaders||{},this.loaderTimeout=t.loaderTimeout||uh,this.reloadWithJitterTimer=null,this.maxReloads=t.maxReloads||Gc,this.reloadJitterMin=t.reloadJitterMin||Xc,this.reloadJitterMax=t.reloadJitterMax||Yc,this.failsafeJitter=t.failsafeJitter||Zc,this.localStorage=t.localStorage||window.localStorage,this.sessionStorage=t.sessionStorage||window.sessionStorage,this.boundTopLevelEvents=!1,this.boundEventNames=new Set,this.serverCloseRef=null,this.domCallbacks=Object.assign({jsQuerySelectorAll:null,onPatchStart:Sr(),onPatchEnd:Sr(),onNodeAdded:Sr(),onBeforeElUpdated:Sr()},t.dom||{}),this.transitions=new Kh,this.currentHistoryPosition=parseInt(this.sessionStorage.getItem(ks))||0,window.addEventListener("pagehide",n=>{this.unloaded=!0}),this.socket.onOpen(()=>{this.isUnloaded()&&window.location.reload()})}version(){return"1.0.3"}isProfileEnabled(){return this.sessionStorage.getItem(qa)==="true"}isDebugEnabled(){return this.sessionStorage.getItem(_s)==="true"}isDebugDisabled(){return this.sessionStorage.getItem(_s)==="false"}enableDebug(){this.sessionStorage.setItem(_s,"true")}enableProfiling(){this.sessionStorage.setItem(qa,"true")}disableDebug(){this.sessionStorage.setItem(_s,"false")}disableProfiling(){this.sessionStorage.removeItem(qa)}enableLatencySim(i){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),this.sessionStorage.setItem(Ka,i)}disableLatencySim(){this.sessionStorage.removeItem(Ka)}getLatencySim(){let i=this.sessionStorage.getItem(Ka);return i?parseInt(i):null}getSocket(){return this.socket}connect(){window.location.hostname==="localhost"&&!this.isDebugDisabled()&&this.enableDebug();let i=()=>{this.resetReloadStatus(),this.joinRootViews()?(this.bindTopLevelEvents(),this.socket.connect()):this.main?this.socket.connect():this.bindTopLevelEvents({dead:!0}),this.joinDeadView()};["complete","loaded","interactive"].indexOf(document.readyState)>=0?i():document.addEventListener("DOMContentLoaded",()=>i())}disconnect(i){clearTimeout(this.reloadWithJitterTimer),this.serverCloseRef&&(this.socket.off(this.serverCloseRef),this.serverCloseRef=null),this.socket.disconnect(i)}replaceTransport(i){clearTimeout(this.reloadWithJitterTimer),this.socket.replaceTransport(i),this.connect()}execJS(i,e,t=null){let n=new CustomEvent("phx:exec",{detail:{sourceElement:i}});this.owner(i,r=>Ne.exec(n,t,e,r,i))}execJSHookPush(i,e,t,n){this.withinOwners(i,r=>{let s=new CustomEvent("phx:exec",{detail:{sourceElement:i}});Ne.exec(s,"hook",e,r,i,["push",{data:t,callback:n}])})}unload(){this.unloaded||(this.main&&this.isConnected()&&this.log(this.main,"socket",()=>["disconnect for page nav"]),this.unloaded=!0,this.destroyAllViews(),this.disconnect())}triggerDOM(i,e){this.domCallbacks[i](...e)}time(i,e){if(!this.isProfileEnabled()||!console.time)return e();console.time(i);let t=e();return console.timeEnd(i),t}log(i,e,t){if(this.viewLogger){let[n,r]=t();this.viewLogger(i,e,n,r)}else if(this.isDebugEnabled()){let[n,r]=t();vh(i,e,n,r)}}requestDOMUpdate(i){this.transitions.after(i)}transition(i,e,t=function(){}){this.transitions.addTransition(i,e,t)}onChannel(i,e,t){i.on(e,n=>{let r=this.getLatencySim();r?setTimeout(()=>t(n),r):t(n)})}reloadWithJitter(i,e){clearTimeout(this.reloadWithJitterTimer),this.disconnect();let t=this.reloadJitterMin,n=this.reloadJitterMax,r=Math.floor(Math.random()*(n-t+1))+t,s=xt.updateLocal(this.localStorage,window.location.pathname,yl,0,a=>a+1);s>=this.maxReloads&&(r=this.failsafeJitter),this.reloadWithJitterTimer=setTimeout(()=>{i.isDestroyed()||i.isConnected()||(i.destroy(),e?e():this.log(i,"join",()=>[`encountered ${s} consecutive reloads`]),s>=this.maxReloads&&this.log(i,"join",()=>[`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]),this.hasPendingLink()?window.location=this.pendingLink:window.location.reload())},r)}getHookCallbacks(i){return i&&i.startsWith("Phoenix.")?Ch[i.split(".")[1]]:this.hooks[i]}isUnloaded(){return this.unloaded}isConnected(){return this.socket.isConnected()}getBindingPrefix(){return this.bindingPrefix}binding(i){return`${this.getBindingPrefix()}${i}`}channel(i,e){return this.socket.channel(i,e)}joinDeadView(){let i=document.body;if(i&&!this.isPhxView(i)&&!this.isPhxView(document.firstElementChild)){let e=this.newRootView(i);e.setHref(this.getHref()),e.joinDead(),this.main||(this.main=e),window.requestAnimationFrame(()=>{e.execNewMounted(),this.maybeScroll(history.state?.scroll)})}}joinRootViews(){let i=!1;return H.all(document,`${En}:not([${An}])`,e=>{if(!this.getRootById(e.id)){let t=this.newRootView(e);H.isPhxSticky(e)||t.setHref(this.getHref()),t.join(),e.hasAttribute(no)&&(this.main=t)}i=!0}),i}redirect(i,e,t){t&&xt.setCookie(Zu,t,60),this.unload(),xt.redirect(i,e)}replaceMain(i,e,t=null,n=this.setPendingLink(i)){let r=this.currentLocation.href;this.outgoingMainEl=this.outgoingMainEl||this.main.el;let s=H.all(this.outgoingMainEl,`[${this.binding("remove")}]`),a=H.cloneNode(this.outgoingMainEl,"");this.main.showLoader(this.loaderTimeout),this.main.destroy(),this.main=this.newRootView(a,e,r),this.main.setRedirect(i),this.transitionRemoves(s,!0),this.main.join((u,c)=>{u===1&&this.commitPendingLink(n)&&this.requestDOMUpdate(()=>{s.forEach(v=>v.remove()),H.findPhxSticky(document).forEach(v=>a.appendChild(v)),this.outgoingMainEl.replaceWith(a),this.outgoingMainEl=null,t&&t(n),c()})})}transitionRemoves(i,e,t){let n=this.binding("remove");if(e){let s=H.findPhxSticky(document)||[];i=i.filter(a=>!H.isChildOfAny(a,s))}let r=s=>{s.preventDefault(),s.stopImmediatePropagation()};i.forEach(s=>{for(let a of this.boundEventNames)s.addEventListener(a,r,!0);this.execJS(s,s.getAttribute(n),"remove")}),this.requestDOMUpdate(()=>{i.forEach(s=>{for(let a of this.boundEventNames)s.removeEventListener(a,r,!0)}),t&&t()})}isPhxView(i){return i.getAttribute&&i.getAttribute(_i)!==null}newRootView(i,e,t){let n=new qh(i,this,null,e,t);return this.roots[n.id]=n,n}owner(i,e){let t=Qi(i.closest(En),n=>this.getViewByEl(n))||this.main;return t&&e?e(t):t}withinOwners(i,e){this.owner(i,t=>e(t,i))}getViewByEl(i){let e=i.getAttribute(en);return Qi(this.getRootById(e),t=>t.getDescendentByEl(i))}getRootById(i){return this.roots[i]}destroyAllViews(){for(let i in this.roots)this.roots[i].destroy(),delete this.roots[i];this.main=null}destroyViewByEl(i){let e=this.getRootById(i.getAttribute(en));e&&e.id===i.id?(e.destroy(),delete this.roots[e.id]):e&&e.destroyDescendent(i.id)}getActiveElement(){return document.activeElement}dropActiveElement(i){this.prevActive&&i.ownsElement(this.prevActive)&&(this.prevActive=null)}restorePreviouslyActiveFocus(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}blurActiveElement(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}bindTopLevelEvents({dead:i}={}){this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,this.serverCloseRef=this.socket.onClose(e=>{if(e&&e.code===1e3&&this.main)return this.reloadWithJitter(this.main)}),document.body.addEventListener("click",function(){}),window.addEventListener("pageshow",e=>{e.persisted&&(this.getSocket().disconnect(),this.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())},!0),i||this.bindNav(),this.bindClicks(),i||this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(e,t,n,r,s,a)=>{let u=r.getAttribute(this.binding(ah)),c=e.key&&e.key.toLowerCase();if(u&&u.toLowerCase()!==c)return;let v={key:e.key,...this.eventMeta(t,e,r)};Ne.exec(e,t,s,n,r,["push",{data:v}])}),this.bind({blur:"focusout",focus:"focusin"},(e,t,n,r,s,a)=>{if(!a){let u={key:e.key,...this.eventMeta(t,e,r)};Ne.exec(e,t,s,n,r,["push",{data:u}])}}),this.bind({blur:"blur",focus:"focus"},(e,t,n,r,s,a)=>{if(a==="window"){let u=this.eventMeta(t,e,r);Ne.exec(e,t,s,n,r,["push",{data:u}])}}),this.on("dragover",e=>e.preventDefault()),this.on("drop",e=>{e.preventDefault();let t=Qi(Lr(e.target,this.binding(Wu)),s=>s.getAttribute(this.binding(Wu))),n=t&&document.getElementById(t),r=Array.from(e.dataTransfer.files||[]);!n||n.disabled||r.length===0||!(n.files instanceof FileList)||(it.trackFiles(n,r,e.dataTransfer),n.dispatchEvent(new Event("input",{bubbles:!0})))}),this.on(_l,e=>{let t=e.target;if(!H.isUploadInput(t))return;let n=Array.from(e.detail.files||[]).filter(r=>r instanceof File||r instanceof Blob);it.trackFiles(t,n),t.dispatchEvent(new Event("input",{bubbles:!0}))}))}eventMeta(i,e,t){let n=this.metadataCallbacks[i];return n?n(e,t):{}}setPendingLink(i){return this.linkRef++,this.pendingLink=i,this.resetReloadStatus(),this.linkRef}resetReloadStatus(){xt.deleteCookie(Zu)}commitPendingLink(i){return this.linkRef!==i?!1:(this.href=this.pendingLink,this.pendingLink=null,!0)}getHref(){return this.href}hasPendingLink(){return!!this.pendingLink}bind(i,e){for(let t in i){let n=i[t];this.on(n,r=>{let s=this.binding(t),a=this.binding(`window-${t}`),u=r.target.getAttribute&&r.target.getAttribute(s);u?this.debounce(r.target,r,n,()=>{this.withinOwners(r.target,c=>{e(r,t,c,r.target,u,null)})}):H.all(document,`[${a}]`,c=>{let v=c.getAttribute(a);this.debounce(c,r,n,()=>{this.withinOwners(c,k=>{e(r,t,k,c,v,"window")})})})})}}bindClicks(){this.on("mousedown",i=>this.clickStartedAtTarget=i.target),this.bindClick("click","click")}bindClick(i,e){let t=this.binding(e);window.addEventListener(i,n=>{let r=null;n.detail===0&&(this.clickStartedAtTarget=n.target);let s=this.clickStartedAtTarget||n.target;r=Lr(n.target,t),this.dispatchClickAway(n,s),this.clickStartedAtTarget=null;let a=r&&r.getAttribute(t);if(!a){H.isNewPageClick(n,window.location)&&this.unload();return}r.getAttribute("href")==="#"&&n.preventDefault(),!r.hasAttribute(Gt)&&this.debounce(r,n,"click",()=>{this.withinOwners(r,u=>{Ne.exec(n,"click",a,u,r,["push",{data:this.eventMeta("click",n,r)}])})})},!1)}dispatchClickAway(i,e){let t=this.binding("click-away");H.all(document,`[${t}]`,n=>{n.isSameNode(e)||n.contains(e)||this.withinOwners(n,r=>{let s=n.getAttribute(t);Ne.isVisible(n)&&Ne.isInViewport(n)&&Ne.exec(i,"click",s,r,n,["push",{data:this.eventMeta("click",i,i.target)}])})})}bindNav(){if(!xt.canPushState())return;history.scrollRestoration&&(history.scrollRestoration="manual");let i=null;window.addEventListener("scroll",e=>{clearTimeout(i),i=setTimeout(()=>{xt.updateCurrentState(t=>Object.assign(t,{scroll:window.scrollY}))},100)}),window.addEventListener("popstate",e=>{if(!this.registerNewLocation(window.location))return;let{type:t,backType:n,id:r,scroll:s,position:a}=e.state||{},u=window.location.href,c=a>this.currentHistoryPosition;t=c?t:n||t,this.currentHistoryPosition=a||0,this.sessionStorage.setItem(ks,this.currentHistoryPosition.toString()),H.dispatchEvent(window,"phx:navigate",{detail:{href:u,patch:t==="patch",pop:!0,direction:c?"forward":"backward"}}),this.requestDOMUpdate(()=>{let v=()=>{this.maybeScroll(s)};this.main.isConnected()&&t==="patch"&&r===this.main.id?this.main.pushLinkPatch(e,u,null,v):this.replaceMain(u,null,v)})},!1),window.addEventListener("click",e=>{let t=Lr(e.target,Wa),n=t&&t.getAttribute(Wa);if(!n||!this.isConnected()||!this.main||H.wantsNewTab(e))return;let r=t.href instanceof SVGAnimatedString?t.href.baseVal:t.href,s=t.getAttribute(eh);e.preventDefault(),e.stopImmediatePropagation(),this.pendingLink!==r&&this.requestDOMUpdate(()=>{if(n==="patch")this.pushHistoryPatch(e,r,s,t);else if(n==="redirect")this.historyRedirect(e,r,s,null,t);else throw new Error(`expected ${Wa} to be "patch" or "redirect", got: ${n}`);let a=t.getAttribute(this.binding("click"));a&&this.requestDOMUpdate(()=>this.execJS(t,a,"click"))})},!1)}maybeScroll(i){typeof i=="number"&&requestAnimationFrame(()=>{window.scrollTo(0,i)})}dispatchEvent(i,e={}){H.dispatchEvent(window,`phx:${i}`,{detail:e})}dispatchEvents(i){i.forEach(([e,t])=>this.dispatchEvent(e,t))}withPageLoading(i,e){H.dispatchEvent(window,"phx:page-loading-start",{detail:i});let t=()=>H.dispatchEvent(window,"phx:page-loading-stop",{detail:i});return e?e(t):t}pushHistoryPatch(i,e,t,n){if(!this.isConnected()||!this.main.isMain())return xt.redirect(e);this.withPageLoading({to:e,kind:"patch"},r=>{this.main.pushLinkPatch(i,e,n,s=>{this.historyPatch(e,t,s),r()})})}historyPatch(i,e,t=this.setPendingLink(i)){this.commitPendingLink(t)&&(this.currentHistoryPosition++,this.sessionStorage.setItem(ks,this.currentHistoryPosition.toString()),xt.updateCurrentState(n=>({...n,backType:"patch"})),xt.pushState(e,{type:"patch",id:this.main.id,position:this.currentHistoryPosition},i),H.dispatchEvent(window,"phx:navigate",{detail:{patch:!0,href:i,pop:!1,direction:"forward"}}),this.registerNewLocation(window.location))}historyRedirect(i,e,t,n,r){if(r&&i.isTrusted&&i.type!=="popstate"&&r.classList.add("phx-click-loading"),!this.isConnected()||!this.main.isMain())return xt.redirect(e,n);if(/^\/$|^\/[^\/]+.*$/.test(e)){let{protocol:a,host:u}=window.location;e=`${a}//${u}${e}`}let s=window.scrollY;this.withPageLoading({to:e,kind:"redirect"},a=>{this.replaceMain(e,n,u=>{u===this.linkRef&&(this.currentHistoryPosition++,this.sessionStorage.setItem(ks,this.currentHistoryPosition.toString()),xt.updateCurrentState(c=>({...c,backType:"redirect"})),xt.pushState(t,{type:"redirect",id:this.main.id,scroll:s,position:this.currentHistoryPosition},e),H.dispatchEvent(window,"phx:navigate",{detail:{href:e,patch:!1,pop:!1,direction:"forward"}}),this.registerNewLocation(window.location)),a()})})}registerNewLocation(i){let{pathname:e,search:t}=this.currentLocation;return e+t===i.pathname+i.search?!1:(this.currentLocation=xs(i),!0)}bindForms(){let i=0,e=!1;this.on("submit",t=>{let n=t.target.getAttribute(this.binding("submit")),r=t.target.getAttribute(this.binding("change"));!e&&r&&!n&&(e=!0,t.preventDefault(),this.withinOwners(t.target,s=>{s.disableForm(t.target),window.requestAnimationFrame(()=>{H.isUnloadableFormSubmit(t)&&this.unload(),t.target.submit()})}))}),this.on("submit",t=>{let n=t.target.getAttribute(this.binding("submit"));if(!n){H.isUnloadableFormSubmit(t)&&this.unload();return}t.preventDefault(),t.target.disabled=!0,this.withinOwners(t.target,r=>{Ne.exec(t,"submit",n,r,t.target,["push",{submitter:t.submitter}])})});for(let t of["change","input"])this.on(t,n=>{if(n instanceof CustomEvent&&n.target.form===void 0){if(n.detail&&n.detail.dispatcher)throw new Error(`dispatching a custom ${t} event is only supported on input elements inside a form`);return}let r=this.binding("change"),s=n.target;if(n.isComposing){let y=`composition-listener-${t}`;H.private(s,y)||(H.putPrivate(s,y,!0),s.addEventListener("compositionend",()=>{s.dispatchEvent(new Event(t,{bubbles:!0})),H.deletePrivate(s,y)},{once:!0}));return}let a=s.getAttribute(r),u=s.form&&s.form.getAttribute(r),c=a||u;if(!c||s.type==="number"&&s.validity&&s.validity.badInput)return;let v=a?s:s.form,k=i;i++;let{at:A,type:N}=H.private(s,"prev-iteration")||{};A===k-1&&t==="change"&&N==="input"||(H.putPrivate(s,"prev-iteration",{at:k,type:t}),this.debounce(s,n,t,()=>{this.withinOwners(v,y=>{H.putPrivate(s,Ls,!0),Ne.exec(n,"change",c,y,s,["push",{_target:n.target.name,dispatcher:v}])})}))});this.on("reset",t=>{let n=t.target;H.resetForm(n);let r=Array.from(n.elements).find(s=>s.type==="reset");r&&window.requestAnimationFrame(()=>{r.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!1}))})})}debounce(i,e,t,n){if(t==="blur"||t==="focusout")return n();let r=this.binding(rh),s=this.binding(sh),a=this.defaults.debounce.toString(),u=this.defaults.throttle.toString();this.withinOwners(i,c=>{let v=()=>!c.isDestroyed()&&document.body.contains(i);H.debounce(i,e,r,a,s,u,v,()=>{n()})})}silenceEvents(i){this.silenced=!0,i(),this.silenced=!1}on(i,e){this.boundEventNames.add(i),window.addEventListener(i,t=>{this.silenced||e(t)})}jsQuerySelectorAll(i,e,t){let n=this.domCallbacks.jsQuerySelectorAll;return n?n(i,e,t):t()}},Kh=class{constructor(){this.transitions=new Set,this.pendingOps=[]}reset(){this.transitions.forEach(i=>{clearTimeout(i),this.transitions.delete(i)}),this.flushPendingOps()}after(i){this.size()===0?i():this.pushPendingOp(i)}addTransition(i,e,t){e();let n=setTimeout(()=>{this.transitions.delete(n),t(),this.flushPendingOps()},i);this.transitions.add(n)}pushPendingOp(i){this.pendingOps.push(i)}size(){return this.transitions.size}flushPendingOps(){if(this.size()>0)return;let i=this.pendingOps.shift();i&&(i(),this.flushPendingOps())}};var Ia=Va(Ll());function Rl(i,e){var t=Object.keys(i);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(i);e&&(n=n.filter(function(r){return Object.getOwnPropertyDescriptor(i,r).enumerable})),t.push.apply(t,n)}return t}function Ai(i){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?Rl(Object(t),!0).forEach(function(n){Jh(i,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(t)):Rl(Object(t)).forEach(function(n){Object.defineProperty(i,n,Object.getOwnPropertyDescriptor(t,n))})}return i}function Fs(i){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Fs=function(e){return typeof e}:Fs=function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fs(i)}function Jh(i,e,t){return e in i?Object.defineProperty(i,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):i[e]=t,i}function Oi(){return Oi=Object.assign||function(i){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(i[n]=t[n])}return i},Oi.apply(this,arguments)}function Gh(i,e){if(i==null)return{};var t={},n=Object.keys(i),r,s;for(s=0;s<n.length;s++)r=n[s],!(e.indexOf(r)>=0)&&(t[r]=i[r]);return t}function Xh(i,e){if(i==null)return{};var t=Gh(i,e),n,r;if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(i);for(r=0;r<s.length;r++)n=s[r],!(e.indexOf(n)>=0)&&Object.prototype.propertyIsEnumerable.call(i,n)&&(t[n]=i[n])}return t}var Yh="1.15.4";function Ii(i){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(i)}var Mi=Ii(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),Hr=Ii(/Edge/i),Pl=Ii(/firefox/i),Mr=Ii(/safari/i)&&!Ii(/chrome/i)&&!Ii(/android/i),Hl=Ii(/iP(ad|od|hone)/i),zl=Ii(/chrome/i)&&Ii(/android/i),Vl={capture:!1,passive:!1};function Se(i,e,t){i.addEventListener(e,t,!Mi&&Vl)}function Ae(i,e,t){i.removeEventListener(e,t,!Mi&&Vl)}function Us(i,e){if(e){if(e[0]===">"&&(e=e.substring(1)),i)try{if(i.matches)return i.matches(e);if(i.msMatchesSelector)return i.msMatchesSelector(e);if(i.webkitMatchesSelector)return i.webkitMatchesSelector(e)}catch{return!1}return!1}}function Ul(i){return i.host&&i!==document&&i.host.nodeType?i.host:i.parentNode}function oi(i,e,t,n){if(i){t=t||document;do{if(e!=null&&(e[0]===">"?i.parentNode===t&&Us(i,e):Us(i,e))||n&&i===t)return i;if(i===t)break}while(i=Ul(i))}return null}var Il=/\s+/g;function zt(i,e,t){if(i&&e)if(i.classList)i.classList[t?"add":"remove"](e);else{var n=(" "+i.className+" ").replace(Il," ").replace(" "+e+" "," ");i.className=(n+(t?" "+e:"")).replace(Il," ")}}function le(i,e,t){var n=i&&i.style;if(n){if(t===void 0)return document.defaultView&&document.defaultView.getComputedStyle?t=document.defaultView.getComputedStyle(i,""):i.currentStyle&&(t=i.currentStyle),e===void 0?t:t[e];!(e in n)&&e.indexOf("webkit")===-1&&(e="-webkit-"+e),n[e]=t+(typeof t=="string"?"":"px")}}function rr(i,e){var t="";if(typeof i=="string")t=i;else do{var n=le(i,"transform");n&&n!=="none"&&(t=n+" "+t)}while(!e&&(i=i.parentNode));var r=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return r&&new r(t)}function Wl(i,e,t){if(i){var n=i.getElementsByTagName(e),r=0,s=n.length;if(t)for(;r<s;r++)t(n[r],r);return n}return[]}function ki(){var i=document.scrollingElement;return i||document.documentElement}function Qe(i,e,t,n,r){if(!(!i.getBoundingClientRect&&i!==window)){var s,a,u,c,v,k,A;if(i!==window&&i.parentNode&&i!==ki()?(s=i.getBoundingClientRect(),a=s.top,u=s.left,c=s.bottom,v=s.right,k=s.height,A=s.width):(a=0,u=0,c=window.innerHeight,v=window.innerWidth,k=window.innerHeight,A=window.innerWidth),(e||t)&&i!==window&&(r=r||i.parentNode,!Mi))do if(r&&r.getBoundingClientRect&&(le(r,"transform")!=="none"||t&&le(r,"position")!=="static")){var N=r.getBoundingClientRect();a-=N.top+parseInt(le(r,"border-top-width")),u-=N.left+parseInt(le(r,"border-left-width")),c=a+s.height,v=u+s.width;break}while(r=r.parentNode);if(n&&i!==window){var y=rr(r||i),d=y&&y.a,g=y&&y.d;y&&(a/=g,u/=d,A/=d,k/=g,c=a+k,v=u+A)}return{top:a,left:u,bottom:c,right:v,width:A,height:k}}}function Ol(i,e,t){for(var n=rn(i,!0),r=Qe(i)[e];n;){var s=Qe(n)[t],a=void 0;if(t==="top"||t==="left"?a=r>=s:a=r<=s,!a)return n;if(n===ki())break;n=rn(n,!1)}return!1}function sr(i,e,t,n){for(var r=0,s=0,a=i.children;s<a.length;){if(a[s].style.display!=="none"&&a[s]!==de.ghost&&(n||a[s]!==de.dragged)&&oi(a[s],t.draggable,i,!1)){if(r===e)return a[s];r++}s++}return null}function wo(i,e){for(var t=i.lastElementChild;t&&(t===de.ghost||le(t,"display")==="none"||e&&!Us(t,e));)t=t.previousElementSibling;return t||null}function Xt(i,e){var t=0;if(!i||!i.parentNode)return-1;for(;i=i.previousElementSibling;)i.nodeName.toUpperCase()!=="TEMPLATE"&&i!==de.clone&&(!e||Us(i,e))&&t++;return t}function Ml(i){var e=0,t=0,n=ki();if(i)do{var r=rr(i),s=r.a,a=r.d;e+=i.scrollLeft*s,t+=i.scrollTop*a}while(i!==n&&(i=i.parentNode));return[e,t]}function Zh(i,e){for(var t in i)if(i.hasOwnProperty(t)){for(var n in e)if(e.hasOwnProperty(n)&&e[n]===i[t][n])return Number(t)}return-1}function rn(i,e){if(!i||!i.getBoundingClientRect)return ki();var t=i,n=!1;do if(t.clientWidth<t.scrollWidth||t.clientHeight<t.scrollHeight){var r=le(t);if(t.clientWidth<t.scrollWidth&&(r.overflowX=="auto"||r.overflowX=="scroll")||t.clientHeight<t.scrollHeight&&(r.overflowY=="auto"||r.overflowY=="scroll")){if(!t.getBoundingClientRect||t===document.body)return ki();if(n||e)return t;n=!0}}while(t=t.parentNode);return ki()}function Qh(i,e){if(i&&e)for(var t in e)e.hasOwnProperty(t)&&(i[t]=e[t]);return i}function ao(i,e){return Math.round(i.top)===Math.round(e.top)&&Math.round(i.left)===Math.round(e.left)&&Math.round(i.height)===Math.round(e.height)&&Math.round(i.width)===Math.round(e.width)}var Nr;function $l(i,e){return function(){if(!Nr){var t=arguments,n=this;t.length===1?i.call(n,t[0]):i.apply(n,t),Nr=setTimeout(function(){Nr=void 0},e)}}}function ef(){clearTimeout(Nr),Nr=void 0}function ql(i,e,t){i.scrollLeft+=e,i.scrollTop+=t}function Kl(i){var e=window.Polymer,t=window.jQuery||window.Zepto;return e&&e.dom?e.dom(i).cloneNode(!0):t?t(i).clone(!0)[0]:i.cloneNode(!0)}function Jl(i,e,t){var n={};return Array.from(i.children).forEach(function(r){var s,a,u,c;if(!(!oi(r,e.draggable,i,!1)||r.animated||r===t)){var v=Qe(r);n.left=Math.min((s=n.left)!==null&&s!==void 0?s:1/0,v.left),n.top=Math.min((a=n.top)!==null&&a!==void 0?a:1/0,v.top),n.right=Math.max((u=n.right)!==null&&u!==void 0?u:-1/0,v.right),n.bottom=Math.max((c=n.bottom)!==null&&c!==void 0?c:-1/0,v.bottom)}}),n.width=n.right-n.left,n.height=n.bottom-n.top,n.x=n.left,n.y=n.top,n}var It="Sortable"+new Date().getTime();function tf(){var i=[],e;return{captureAnimationState:function(){if(i=[],!!this.options.animation){var n=[].slice.call(this.el.children);n.forEach(function(r){if(!(le(r,"display")==="none"||r===de.ghost)){i.push({target:r,rect:Qe(r)});var s=Ai({},i[i.length-1].rect);if(r.thisAnimationDuration){var a=rr(r,!0);a&&(s.top-=a.f,s.left-=a.e)}r.fromRect=s}})}},addAnimationState:function(n){i.push(n)},removeAnimationState:function(n){i.splice(Zh(i,{target:n}),1)},animateAll:function(n){var r=this;if(!this.options.animation){clearTimeout(e),typeof n=="function"&&n();return}var s=!1,a=0;i.forEach(function(u){var c=0,v=u.target,k=v.fromRect,A=Qe(v),N=v.prevFromRect,y=v.prevToRect,d=u.rect,g=rr(v,!0);g&&(A.top-=g.f,A.left-=g.e),v.toRect=A,v.thisAnimationDuration&&ao(N,A)&&!ao(k,A)&&(d.top-A.top)/(d.left-A.left)===(k.top-A.top)/(k.left-A.left)&&(c=rf(d,N,y,r.options)),ao(A,k)||(v.prevFromRect=k,v.prevToRect=A,c||(c=r.options.animation),r.animate(v,d,A,c)),c&&(s=!0,a=Math.max(a,c),clearTimeout(v.animationResetTimer),v.animationResetTimer=setTimeout(function(){v.animationTime=0,v.prevFromRect=null,v.fromRect=null,v.prevToRect=null,v.thisAnimationDuration=null},c),v.thisAnimationDuration=c)}),clearTimeout(e),s?e=setTimeout(function(){typeof n=="function"&&n()},a):typeof n=="function"&&n(),i=[]},animate:function(n,r,s,a){if(a){le(n,"transition",""),le(n,"transform","");var u=rr(this.el),c=u&&u.a,v=u&&u.d,k=(r.left-s.left)/(c||1),A=(r.top-s.top)/(v||1);n.animatingX=!!k,n.animatingY=!!A,le(n,"transform","translate3d("+k+"px,"+A+"px,0)"),this.forRepaintDummy=nf(n),le(n,"transition","transform "+a+"ms"+(this.options.easing?" "+this.options.easing:"")),le(n,"transform","translate3d(0,0,0)"),typeof n.animated=="number"&&clearTimeout(n.animated),n.animated=setTimeout(function(){le(n,"transition",""),le(n,"transform",""),n.animated=!1,n.animatingX=!1,n.animatingY=!1},a)}}}}function nf(i){return i.offsetWidth}function rf(i,e,t,n){return Math.sqrt(Math.pow(e.top-i.top,2)+Math.pow(e.left-i.left,2))/Math.sqrt(Math.pow(e.top-t.top,2)+Math.pow(e.left-t.left,2))*n.animation}var er=[],oo={initializeByDefault:!0},zr={mount:function(e){for(var t in oo)oo.hasOwnProperty(t)&&!(t in e)&&(e[t]=oo[t]);er.forEach(function(n){if(n.pluginName===e.pluginName)throw"Sortable: Cannot mount plugin ".concat(e.pluginName," more than once")}),er.push(e)},pluginEvent:function(e,t,n){var r=this;this.eventCanceled=!1,n.cancel=function(){r.eventCanceled=!0};var s=e+"Global";er.forEach(function(a){t[a.pluginName]&&(t[a.pluginName][s]&&t[a.pluginName][s](Ai({sortable:t},n)),t.options[a.pluginName]&&t[a.pluginName][e]&&t[a.pluginName][e](Ai({sortable:t},n)))})},initializePlugins:function(e,t,n,r){er.forEach(function(u){var c=u.pluginName;if(!(!e.options[c]&&!u.initializeByDefault)){var v=new u(e,t,e.options);v.sortable=e,v.options=e.options,e[c]=v,Oi(n,v.defaults)}});for(var s in e.options)if(e.options.hasOwnProperty(s)){var a=this.modifyOption(e,s,e.options[s]);typeof a<"u"&&(e.options[s]=a)}},getEventProperties:function(e,t){var n={};return er.forEach(function(r){typeof r.eventProperties=="function"&&Oi(n,r.eventProperties.call(t[r.pluginName],e))}),n},modifyOption:function(e,t,n){var r;return er.forEach(function(s){e[s.pluginName]&&s.optionListeners&&typeof s.optionListeners[t]=="function"&&(r=s.optionListeners[t].call(e[s.pluginName],n))}),r}};function sf(i){var e=i.sortable,t=i.rootEl,n=i.name,r=i.targetEl,s=i.cloneEl,a=i.toEl,u=i.fromEl,c=i.oldIndex,v=i.newIndex,k=i.oldDraggableIndex,A=i.newDraggableIndex,N=i.originalEvent,y=i.putSortable,d=i.extraEventProperties;if(e=e||t&&t[It],!!e){var g,b=e.options,E="on"+n.charAt(0).toUpperCase()+n.substr(1);window.CustomEvent&&!Mi&&!Hr?g=new CustomEvent(n,{bubbles:!0,cancelable:!0}):(g=document.createEvent("Event"),g.initEvent(n,!0,!0)),g.to=a||t,g.from=u||t,g.item=r||t,g.clone=s,g.oldIndex=c,g.newIndex=v,g.oldDraggableIndex=k,g.newDraggableIndex=A,g.originalEvent=N,g.pullMode=y?y.lastPutMode:void 0;var P=Ai(Ai({},d),zr.getEventProperties(n,e));for(var o in P)g[o]=P[o];t&&t.dispatchEvent(g),b[E]&&b[E].call(e,g)}}var af=["evt"],Pt=function(e,t){var n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},r=n.evt,s=Xh(n,af);zr.pluginEvent.bind(de)(e,t,Ai({dragEl:Z,parentEl:Je,ghostEl:ce,rootEl:Ve,nextEl:Dn,lastDownEl:js,cloneEl:$e,cloneHidden:nn,dragStarted:Pr,putSortable:rt,activeSortable:de.active,originalEvent:r,oldIndex:nr,oldDraggableIndex:Br,newIndex:Vt,newDraggableIndex:tn,hideGhostForTarget:Zl,unhideGhostForTarget:Ql,cloneNowHidden:function(){nn=!0},cloneNowShown:function(){nn=!1},dispatchSortableEvent:function(u){vt({sortable:t,name:u,originalEvent:r})}},s))};function vt(i){sf(Ai({putSortable:rt,cloneEl:$e,targetEl:Z,rootEl:Ve,oldIndex:nr,oldDraggableIndex:Br,newIndex:Vt,newDraggableIndex:tn},i))}var Z,Je,ce,Ve,Dn,js,$e,nn,nr,Vt,Br,tn,Os,rt,ir=!1,Ws=!1,$s=[],Cn,ai,uo,lo,Nl,Bl,Pr,tr,Fr,jr=!1,Ms=!1,Hs,dt,co=[],mo=!1,qs=[],Js=typeof document<"u",Ns=Hl,Fl=Hr||Mi?"cssFloat":"float",of=Js&&!zl&&!Hl&&"draggable"in document.createElement("div"),Gl=function(){if(Js){if(Mi)return!1;var i=document.createElement("x");return i.style.cssText="pointer-events:auto",i.style.pointerEvents==="auto"}}(),Xl=function(e,t){var n=le(e),r=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),s=sr(e,0,t),a=sr(e,1,t),u=s&&le(s),c=a&&le(a),v=u&&parseInt(u.marginLeft)+parseInt(u.marginRight)+Qe(s).width,k=c&&parseInt(c.marginLeft)+parseInt(c.marginRight)+Qe(a).width;if(n.display==="flex")return n.flexDirection==="column"||n.flexDirection==="column-reverse"?"vertical":"horizontal";if(n.display==="grid")return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(s&&u.float&&u.float!=="none"){var A=u.float==="left"?"left":"right";return a&&(c.clear==="both"||c.clear===A)?"vertical":"horizontal"}return s&&(u.display==="block"||u.display==="flex"||u.display==="table"||u.display==="grid"||v>=r&&n[Fl]==="none"||a&&n[Fl]==="none"&&v+k>r)?"vertical":"horizontal"},uf=function(e,t,n){var r=n?e.left:e.top,s=n?e.right:e.bottom,a=n?e.width:e.height,u=n?t.left:t.top,c=n?t.right:t.bottom,v=n?t.width:t.height;return r===u||s===c||r+a/2===u+v/2},lf=function(e,t){var n;return $s.some(function(r){var s=r[It].options.emptyInsertThreshold;if(!(!s||wo(r))){var a=Qe(r),u=e>=a.left-s&&e<=a.right+s,c=t>=a.top-s&&t<=a.bottom+s;if(u&&c)return n=r}}),n},Yl=function(e){function t(s,a){return function(u,c,v,k){var A=u.options.group.name&&c.options.group.name&&u.options.group.name===c.options.group.name;if(s==null&&(a||A))return!0;if(s==null||s===!1)return!1;if(a&&s==="clone")return s;if(typeof s=="function")return t(s(u,c,v,k),a)(u,c,v,k);var N=(a?u:c).options.group.name;return s===!0||typeof s=="string"&&s===N||s.join&&s.indexOf(N)>-1}}var n={},r=e.group;(!r||Fs(r)!="object")&&(r={name:r}),n.name=r.name,n.checkPull=t(r.pull,!0),n.checkPut=t(r.put),n.revertClone=r.revertClone,e.group=n},Zl=function(){!Gl&&ce&&le(ce,"display","none")},Ql=function(){!Gl&&ce&&le(ce,"display","")};Js&&!zl&&document.addEventListener("click",function(i){if(Ws)return i.preventDefault(),i.stopPropagation&&i.stopPropagation(),i.stopImmediatePropagation&&i.stopImmediatePropagation(),Ws=!1,!1},!0);var Sn=function(e){if(Z){e=e.touches?e.touches[0]:e;var t=lf(e.clientX,e.clientY);if(t){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);n.target=n.rootEl=t,n.preventDefault=void 0,n.stopPropagation=void 0,t[It]._onDragOver(n)}}},df=function(e){Z&&Z.parentNode[It]._isOutsideThisEl(e.target)};function de(i,e){if(!(i&&i.nodeType&&i.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(i));this.el=i,this.options=e=Oi({},e),i[It]=this;var t={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(i.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Xl(i,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(a,u){a.setData("Text",u.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:de.supportPointer!==!1&&"PointerEvent"in window&&!Mr,emptyInsertThreshold:5};zr.initializePlugins(this,i,t);for(var n in t)!(n in e)&&(e[n]=t[n]);Yl(e);for(var r in this)r.charAt(0)==="_"&&typeof this[r]=="function"&&(this[r]=this[r].bind(this));this.nativeDraggable=e.forceFallback?!1:of,this.nativeDraggable&&(this.options.touchStartThreshold=1),e.supportPointer?Se(i,"pointerdown",this._onTapStart):(Se(i,"mousedown",this._onTapStart),Se(i,"touchstart",this._onTapStart)),this.nativeDraggable&&(Se(i,"dragover",this),Se(i,"dragenter",this)),$s.push(this.el),e.store&&e.store.get&&this.sort(e.store.get(this)||[]),Oi(this,tf())}de.prototype={constructor:de,_isOutsideThisEl:function(e){!this.el.contains(e)&&e!==this.el&&(tr=null)},_getDirection:function(e,t){return typeof this.options.direction=="function"?this.options.direction.call(this,e,t,Z):this.options.direction},_onTapStart:function(e){if(e.cancelable){var t=this,n=this.el,r=this.options,s=r.preventOnFilter,a=e.type,u=e.touches&&e.touches[0]||e.pointerType&&e.pointerType==="touch"&&e,c=(u||e).target,v=e.target.shadowRoot&&(e.path&&e.path[0]||e.composedPath&&e.composedPath()[0])||c,k=r.filter;if(bf(n),!Z&&!(/mousedown|pointerdown/.test(a)&&e.button!==0||r.disabled)&&!v.isContentEditable&&!(!this.nativeDraggable&&Mr&&c&&c.tagName.toUpperCase()==="SELECT")&&(c=oi(c,r.draggable,n,!1),!(c&&c.animated)&&js!==c)){if(nr=Xt(c),Br=Xt(c,r.draggable),typeof k=="function"){if(k.call(this,e,c,this)){vt({sortable:t,rootEl:v,name:"filter",targetEl:c,toEl:n,fromEl:n}),Pt("filter",t,{evt:e}),s&&e.preventDefault();return}}else if(k&&(k=k.split(",").some(function(A){if(A=oi(v,A.trim(),n,!1),A)return vt({sortable:t,rootEl:A,name:"filter",targetEl:c,fromEl:n,toEl:n}),Pt("filter",t,{evt:e}),!0}),k)){s&&e.preventDefault();return}r.handle&&!oi(v,r.handle,n,!1)||this._prepareDragStart(e,u,c)}}},_prepareDragStart:function(e,t,n){var r=this,s=r.el,a=r.options,u=s.ownerDocument,c;if(n&&!Z&&n.parentNode===s){var v=Qe(n);if(Ve=s,Z=n,Je=Z.parentNode,Dn=Z.nextSibling,js=n,Os=a.group,de.dragged=Z,Cn={target:Z,clientX:(t||e).clientX,clientY:(t||e).clientY},Nl=Cn.clientX-v.left,Bl=Cn.clientY-v.top,this._lastX=(t||e).clientX,this._lastY=(t||e).clientY,Z.style["will-change"]="all",c=function(){if(Pt("delayEnded",r,{evt:e}),de.eventCanceled){r._onDrop();return}r._disableDelayedDragEvents(),!Pl&&r.nativeDraggable&&(Z.draggable=!0),r._triggerDragStart(e,t),vt({sortable:r,name:"choose",originalEvent:e}),zt(Z,a.chosenClass,!0)},a.ignore.split(",").forEach(function(k){Wl(Z,k.trim(),ho)}),Se(u,"dragover",Sn),Se(u,"mousemove",Sn),Se(u,"touchmove",Sn),a.supportPointer?(Se(u,"pointerup",r._onDrop),!this.nativeDraggable&&Se(u,"pointercancel",r._onDrop)):(Se(u,"mouseup",r._onDrop),Se(u,"touchend",r._onDrop),Se(u,"touchcancel",r._onDrop)),Pl&&this.nativeDraggable&&(this.options.touchStartThreshold=4,Z.draggable=!0),Pt("delayStart",this,{evt:e}),a.delay&&(!a.delayOnTouchOnly||t)&&(!this.nativeDraggable||!(Hr||Mi))){if(de.eventCanceled){this._onDrop();return}a.supportPointer?(Se(u,"pointerup",r._disableDelayedDrag),Se(u,"pointercancel",r._disableDelayedDrag)):(Se(u,"mouseup",r._disableDelayedDrag),Se(u,"touchend",r._disableDelayedDrag),Se(u,"touchcancel",r._disableDelayedDrag)),Se(u,"mousemove",r._delayedDragTouchMoveHandler),Se(u,"touchmove",r._delayedDragTouchMoveHandler),a.supportPointer&&Se(u,"pointermove",r._delayedDragTouchMoveHandler),r._dragStartTimer=setTimeout(c,a.delay)}else c()}},_delayedDragTouchMoveHandler:function(e){var t=e.touches?e.touches[0]:e;Math.max(Math.abs(t.clientX-this._lastX),Math.abs(t.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){Z&&ho(Z),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var e=this.el.ownerDocument;Ae(e,"mouseup",this._disableDelayedDrag),Ae(e,"touchend",this._disableDelayedDrag),Ae(e,"touchcancel",this._disableDelayedDrag),Ae(e,"pointerup",this._disableDelayedDrag),Ae(e,"pointercancel",this._disableDelayedDrag),Ae(e,"mousemove",this._delayedDragTouchMoveHandler),Ae(e,"touchmove",this._delayedDragTouchMoveHandler),Ae(e,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(e,t){t=t||e.pointerType=="touch"&&e,!this.nativeDraggable||t?this.options.supportPointer?Se(document,"pointermove",this._onTouchMove):t?Se(document,"touchmove",this._onTouchMove):Se(document,"mousemove",this._onTouchMove):(Se(Z,"dragend",this),Se(Ve,"dragstart",this._onDragStart));try{zs(function(){document.selection?document.selection.empty():window.getSelection().removeAllRanges()})}catch{}},_dragStarted:function(e,t){if(ir=!1,Ve&&Z){Pt("dragStarted",this,{evt:t}),this.nativeDraggable&&Se(document,"dragover",df);var n=this.options;!e&&zt(Z,n.dragClass,!1),zt(Z,n.ghostClass,!0),de.active=this,e&&this._appendGhost(),vt({sortable:this,name:"start",originalEvent:t})}else this._nulling()},_emulateDragOver:function(){if(ai){this._lastX=ai.clientX,this._lastY=ai.clientY,Zl();for(var e=document.elementFromPoint(ai.clientX,ai.clientY),t=e;e&&e.shadowRoot&&(e=e.shadowRoot.elementFromPoint(ai.clientX,ai.clientY),e!==t);)t=e;if(Z.parentNode[It]._isOutsideThisEl(e),t)do{if(t[It]){var n=void 0;if(n=t[It]._onDragOver({clientX:ai.clientX,clientY:ai.clientY,target:e,rootEl:t}),n&&!this.options.dragoverBubble)break}e=t}while(t=Ul(t));Ql()}},_onTouchMove:function(e){if(Cn){var t=this.options,n=t.fallbackTolerance,r=t.fallbackOffset,s=e.touches?e.touches[0]:e,a=ce&&rr(ce,!0),u=ce&&a&&a.a,c=ce&&a&&a.d,v=Ns&&dt&&Ml(dt),k=(s.clientX-Cn.clientX+r.x)/(u||1)+(v?v[0]-co[0]:0)/(u||1),A=(s.clientY-Cn.clientY+r.y)/(c||1)+(v?v[1]-co[1]:0)/(c||1);if(!de.active&&!ir){if(n&&Math.max(Math.abs(s.clientX-this._lastX),Math.abs(s.clientY-this._lastY))<n)return;this._onDragStart(e,!0)}if(ce){a?(a.e+=k-(uo||0),a.f+=A-(lo||0)):a={a:1,b:0,c:0,d:1,e:k,f:A};var N="matrix(".concat(a.a,",").concat(a.b,",").concat(a.c,",").concat(a.d,",").concat(a.e,",").concat(a.f,")");le(ce,"webkitTransform",N),le(ce,"mozTransform",N),le(ce,"msTransform",N),le(ce,"transform",N),uo=k,lo=A,ai=s}e.cancelable&&e.preventDefault()}},_appendGhost:function(){if(!ce){var e=this.options.fallbackOnBody?document.body:Ve,t=Qe(Z,!0,Ns,!0,e),n=this.options;if(Ns){for(dt=e;le(dt,"position")==="static"&&le(dt,"transform")==="none"&&dt!==document;)dt=dt.parentNode;dt!==document.body&&dt!==document.documentElement?(dt===document&&(dt=ki()),t.top+=dt.scrollTop,t.left+=dt.scrollLeft):dt=ki(),co=Ml(dt)}ce=Z.cloneNode(!0),zt(ce,n.ghostClass,!1),zt(ce,n.fallbackClass,!0),zt(ce,n.dragClass,!0),le(ce,"transition",""),le(ce,"transform",""),le(ce,"box-sizing","border-box"),le(ce,"margin",0),le(ce,"top",t.top),le(ce,"left",t.left),le(ce,"width",t.width),le(ce,"height",t.height),le(ce,"opacity","0.8"),le(ce,"position",Ns?"absolute":"fixed"),le(ce,"zIndex","100000"),le(ce,"pointerEvents","none"),de.ghost=ce,e.appendChild(ce),le(ce,"transform-origin",Nl/parseInt(ce.style.width)*100+"% "+Bl/parseInt(ce.style.height)*100+"%")}},_onDragStart:function(e,t){var n=this,r=e.dataTransfer,s=n.options;if(Pt("dragStart",this,{evt:e}),de.eventCanceled){this._onDrop();return}Pt("setupClone",this),de.eventCanceled||($e=Kl(Z),$e.removeAttribute("id"),$e.draggable=!1,$e.style["will-change"]="",this._hideClone(),zt($e,this.options.chosenClass,!1),de.clone=$e),n.cloneId=zs(function(){Pt("clone",n),!de.eventCanceled&&(n.options.removeCloneOnHide||Ve.insertBefore($e,Z),n._hideClone(),vt({sortable:n,name:"clone"}))}),!t&&zt(Z,s.dragClass,!0),t?(Ws=!0,n._loopId=setInterval(n._emulateDragOver,50)):(Ae(document,"mouseup",n._onDrop),Ae(document,"touchend",n._onDrop),Ae(document,"touchcancel",n._onDrop),r&&(r.effectAllowed="move",s.setData&&s.setData.call(n,r,Z)),Se(document,"drop",n),le(Z,"transform","translateZ(0)")),ir=!0,n._dragStartId=zs(n._dragStarted.bind(n,t,e)),Se(document,"selectstart",n),Pr=!0,Mr&&le(document.body,"user-select","none")},_onDragOver:function(e){var t=this.el,n=e.target,r,s,a,u=this.options,c=u.group,v=de.active,k=Os===c,A=u.sort,N=rt||v,y,d=this,g=!1;if(mo)return;function b($,ee){Pt($,d,Ai({evt:e,isOwner:k,axis:y?"vertical":"horizontal",revert:a,dragRect:r,targetRect:s,canSort:A,fromSortable:N,target:n,completed:P,onMove:function(ie,ae){return Bs(Ve,t,Z,r,ie,Qe(ie),e,ae)},changed:o},ee))}function E(){b("dragOverAnimationCapture"),d.captureAnimationState(),d!==N&&N.captureAnimationState()}function P($){return b("dragOverCompleted",{insertion:$}),$&&(k?v._hideClone():v._showClone(d),d!==N&&(zt(Z,rt?rt.options.ghostClass:v.options.ghostClass,!1),zt(Z,u.ghostClass,!0)),rt!==d&&d!==de.active?rt=d:d===de.active&&rt&&(rt=null),N===d&&(d._ignoreWhileAnimating=n),d.animateAll(function(){b("dragOverAnimationComplete"),d._ignoreWhileAnimating=null}),d!==N&&(N.animateAll(),N._ignoreWhileAnimating=null)),(n===Z&&!Z.animated||n===t&&!n.animated)&&(tr=null),!u.dragoverBubble&&!e.rootEl&&n!==document&&(Z.parentNode[It]._isOutsideThisEl(e.target),!$&&Sn(e)),!u.dragoverBubble&&e.stopPropagation&&e.stopPropagation(),g=!0}function o(){Vt=Xt(Z),tn=Xt(Z,u.draggable),vt({sortable:d,name:"change",toEl:t,newIndex:Vt,newDraggableIndex:tn,originalEvent:e})}if(e.preventDefault!==void 0&&e.cancelable&&e.preventDefault(),n=oi(n,u.draggable,t,!0),b("dragOver"),de.eventCanceled)return g;if(Z.contains(e.target)||n.animated&&n.animatingX&&n.animatingY||d._ignoreWhileAnimating===n)return P(!1);if(Ws=!1,v&&!u.disabled&&(k?A||(a=Je!==Ve):rt===this||(this.lastPutMode=Os.checkPull(this,v,Z,e))&&c.checkPut(this,v,Z,e))){if(y=this._getDirection(e,n)==="vertical",r=Qe(Z),b("dragOverValid"),de.eventCanceled)return g;if(a)return Je=Ve,E(),this._hideClone(),b("revert"),de.eventCanceled||(Dn?Ve.insertBefore(Z,Dn):Ve.appendChild(Z)),P(!0);var h=wo(t,u.draggable);if(!h||pf(e,y,this)&&!h.animated){if(h===Z)return P(!1);if(h&&t===e.target&&(n=h),n&&(s=Qe(n)),Bs(Ve,t,Z,r,n,s,e,!!n)!==!1)return E(),h&&h.nextSibling?t.insertBefore(Z,h.nextSibling):t.appendChild(Z),Je=t,o(),P(!0)}else if(h&&ff(e,y,this)){var f=sr(t,0,u,!0);if(f===Z)return P(!1);if(n=f,s=Qe(n),Bs(Ve,t,Z,r,n,s,e,!1)!==!1)return E(),t.insertBefore(Z,f),Je=t,o(),P(!0)}else if(n.parentNode===t){s=Qe(n);var _=0,C,I=Z.parentNode!==t,L=!uf(Z.animated&&Z.toRect||r,n.animated&&n.toRect||s,y),F=y?"top":"left",K=Ol(n,"top","top")||Ol(Z,"top","top"),W=K?K.scrollTop:void 0;tr!==n&&(C=s[F],jr=!1,Ms=!L&&u.invertSwap||I),_=gf(e,n,s,y,L?1:u.swapThreshold,u.invertedSwapThreshold==null?u.swapThreshold:u.invertedSwapThreshold,Ms,tr===n);var q;if(_!==0){var G=Xt(Z);do G-=_,q=Je.children[G];while(q&&(le(q,"display")==="none"||q===ce))}if(_===0||q===n)return P(!1);tr=n,Fr=_;var x=n.nextElementSibling,U=!1;U=_===1;var z=Bs(Ve,t,Z,r,n,s,e,U);if(z!==!1)return(z===1||z===-1)&&(U=z===1),mo=!0,setTimeout(hf,30),E(),U&&!x?t.appendChild(Z):n.parentNode.insertBefore(Z,U?x:n),K&&ql(K,0,W-K.scrollTop),Je=Z.parentNode,C!==void 0&&!Ms&&(Hs=Math.abs(C-Qe(n)[F])),o(),P(!0)}if(t.contains(Z))return P(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){Ae(document,"mousemove",this._onTouchMove),Ae(document,"touchmove",this._onTouchMove),Ae(document,"pointermove",this._onTouchMove),Ae(document,"dragover",Sn),Ae(document,"mousemove",Sn),Ae(document,"touchmove",Sn)},_offUpEvents:function(){var e=this.el.ownerDocument;Ae(e,"mouseup",this._onDrop),Ae(e,"touchend",this._onDrop),Ae(e,"pointerup",this._onDrop),Ae(e,"pointercancel",this._onDrop),Ae(e,"touchcancel",this._onDrop),Ae(document,"selectstart",this)},_onDrop:function(e){var t=this.el,n=this.options;if(Vt=Xt(Z),tn=Xt(Z,n.draggable),Pt("drop",this,{evt:e}),Je=Z&&Z.parentNode,Vt=Xt(Z),tn=Xt(Z,n.draggable),de.eventCanceled){this._nulling();return}ir=!1,Ms=!1,jr=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),vo(this.cloneId),vo(this._dragStartId),this.nativeDraggable&&(Ae(document,"drop",this),Ae(t,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),Mr&&le(document.body,"user-select",""),le(Z,"transform",""),e&&(Pr&&(e.cancelable&&e.preventDefault(),!n.dropBubble&&e.stopPropagation()),ce&&ce.parentNode&&ce.parentNode.removeChild(ce),(Ve===Je||rt&&rt.lastPutMode!=="clone")&&$e&&$e.parentNode&&$e.parentNode.removeChild($e),Z&&(this.nativeDraggable&&Ae(Z,"dragend",this),ho(Z),Z.style["will-change"]="",Pr&&!ir&&zt(Z,rt?rt.options.ghostClass:this.options.ghostClass,!1),zt(Z,this.options.chosenClass,!1),vt({sortable:this,name:"unchoose",toEl:Je,newIndex:null,newDraggableIndex:null,originalEvent:e}),Ve!==Je?(Vt>=0&&(vt({rootEl:Je,name:"add",toEl:Je,fromEl:Ve,originalEvent:e}),vt({sortable:this,name:"remove",toEl:Je,originalEvent:e}),vt({rootEl:Je,name:"sort",toEl:Je,fromEl:Ve,originalEvent:e}),vt({sortable:this,name:"sort",toEl:Je,originalEvent:e})),rt&&rt.save()):Vt!==nr&&Vt>=0&&(vt({sortable:this,name:"update",toEl:Je,originalEvent:e}),vt({sortable:this,name:"sort",toEl:Je,originalEvent:e})),de.active&&((Vt==null||Vt===-1)&&(Vt=nr,tn=Br),vt({sortable:this,name:"end",toEl:Je,originalEvent:e}),this.save()))),this._nulling()},_nulling:function(){Pt("nulling",this),Ve=Z=Je=ce=Dn=$e=js=nn=Cn=ai=Pr=Vt=tn=nr=Br=tr=Fr=rt=Os=de.dragged=de.ghost=de.clone=de.active=null,qs.forEach(function(e){e.checked=!0}),qs.length=uo=lo=0},handleEvent:function(e){switch(e.type){case"drop":case"dragend":this._onDrop(e);break;case"dragenter":case"dragover":Z&&(this._onDragOver(e),cf(e));break;case"selectstart":e.preventDefault();break}},toArray:function(){for(var e=[],t,n=this.el.children,r=0,s=n.length,a=this.options;r<s;r++)t=n[r],oi(t,a.draggable,this.el,!1)&&e.push(t.getAttribute(a.dataIdAttr)||vf(t));return e},sort:function(e,t){var n={},r=this.el;this.toArray().forEach(function(s,a){var u=r.children[a];oi(u,this.options.draggable,r,!1)&&(n[s]=u)},this),t&&this.captureAnimationState(),e.forEach(function(s){n[s]&&(r.removeChild(n[s]),r.appendChild(n[s]))}),t&&this.animateAll()},save:function(){var e=this.options.store;e&&e.set&&e.set(this)},closest:function(e,t){return oi(e,t||this.options.draggable,this.el,!1)},option:function(e,t){var n=this.options;if(t===void 0)return n[e];var r=zr.modifyOption(this,e,t);typeof r<"u"?n[e]=r:n[e]=t,e==="group"&&Yl(n)},destroy:function(){Pt("destroy",this);var e=this.el;e[It]=null,Ae(e,"mousedown",this._onTapStart),Ae(e,"touchstart",this._onTapStart),Ae(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(Ae(e,"dragover",this),Ae(e,"dragenter",this)),Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),function(t){t.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),$s.splice($s.indexOf(this.el),1),this.el=e=null},_hideClone:function(){if(!nn){if(Pt("hideClone",this),de.eventCanceled)return;le($e,"display","none"),this.options.removeCloneOnHide&&$e.parentNode&&$e.parentNode.removeChild($e),nn=!0}},_showClone:function(e){if(e.lastPutMode!=="clone"){this._hideClone();return}if(nn){if(Pt("showClone",this),de.eventCanceled)return;Z.parentNode==Ve&&!this.options.group.revertClone?Ve.insertBefore($e,Z):Dn?Ve.insertBefore($e,Dn):Ve.appendChild($e),this.options.group.revertClone&&this.animate(Z,$e),le($e,"display",""),nn=!1}}};function cf(i){i.dataTransfer&&(i.dataTransfer.dropEffect="move"),i.cancelable&&i.preventDefault()}function Bs(i,e,t,n,r,s,a,u){var c,v=i[It],k=v.options.onMove,A;return window.CustomEvent&&!Mi&&!Hr?c=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(c=document.createEvent("Event"),c.initEvent("move",!0,!0)),c.to=e,c.from=i,c.dragged=t,c.draggedRect=n,c.related=r||e,c.relatedRect=s||Qe(e),c.willInsertAfter=u,c.originalEvent=a,i.dispatchEvent(c),k&&(A=k.call(v,c,a)),A}function ho(i){i.draggable=!1}function hf(){mo=!1}function ff(i,e,t){var n=Qe(sr(t.el,0,t.options,!0)),r=Jl(t.el,t.options,ce),s=10;return e?i.clientX<r.left-s||i.clientY<n.top&&i.clientX<n.right:i.clientY<r.top-s||i.clientY<n.bottom&&i.clientX<n.left}function pf(i,e,t){var n=Qe(wo(t.el,t.options.draggable)),r=Jl(t.el,t.options,ce),s=10;return e?i.clientX>r.right+s||i.clientY>n.bottom&&i.clientX>n.left:i.clientY>r.bottom+s||i.clientX>n.right&&i.clientY>n.top}function gf(i,e,t,n,r,s,a,u){var c=n?i.clientY:i.clientX,v=n?t.height:t.width,k=n?t.top:t.left,A=n?t.bottom:t.right,N=!1;if(!a){if(u&&Hs<v*r){if(!jr&&(Fr===1?c>k+v*s/2:c<A-v*s/2)&&(jr=!0),jr)N=!0;else if(Fr===1?c<k+Hs:c>A-Hs)return-Fr}else if(c>k+v*(1-r)/2&&c<A-v*(1-r)/2)return mf(e)}return N=N||a,N&&(c<k+v*s/2||c>A-v*s/2)?c>k+v/2?1:-1:0}function mf(i){return Xt(Z)<Xt(i)?1:-1}function vf(i){for(var e=i.tagName+i.className+i.src+i.href+i.textContent,t=e.length,n=0;t--;)n+=e.charCodeAt(t);return n.toString(36)}function bf(i){qs.length=0;for(var e=i.getElementsByTagName("input"),t=e.length;t--;){var n=e[t];n.checked&&qs.push(n)}}function zs(i){return setTimeout(i,0)}function vo(i){return clearTimeout(i)}Js&&Se(document,"touchmove",function(i){(de.active||ir)&&i.cancelable&&i.preventDefault()});de.utils={on:Se,off:Ae,css:le,find:Wl,is:function(e,t){return!!oi(e,t,e,!1)},extend:Qh,throttle:$l,closest:oi,toggleClass:zt,clone:Kl,index:Xt,nextTick:zs,cancelNextTick:vo,detectDirection:Xl,getChild:sr,expando:It};de.get=function(i){return i[It]};de.mount=function(){for(var i=arguments.length,e=new Array(i),t=0;t<i;t++)e[t]=arguments[t];e[0].constructor===Array&&(e=e[0]),e.forEach(function(n){if(!n.prototype||!n.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(n));n.utils&&(de.utils=Ai(Ai({},de.utils),n.utils)),zr.mount(n)})};de.create=function(i,e){return new de(i,e)};de.version=Yh;var Ze=[],Ir,bo,yo=!1,fo,po,Ks,Or;function yf(){function i(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var e in this)e.charAt(0)==="_"&&typeof this[e]=="function"&&(this[e]=this[e].bind(this))}return i.prototype={dragStarted:function(t){var n=t.originalEvent;this.sortable.nativeDraggable?Se(document,"dragover",this._handleAutoScroll):this.options.supportPointer?Se(document,"pointermove",this._handleFallbackAutoScroll):n.touches?Se(document,"touchmove",this._handleFallbackAutoScroll):Se(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(t){var n=t.originalEvent;!this.options.dragOverBubble&&!n.rootEl&&this._handleAutoScroll(n)},drop:function(){this.sortable.nativeDraggable?Ae(document,"dragover",this._handleAutoScroll):(Ae(document,"pointermove",this._handleFallbackAutoScroll),Ae(document,"touchmove",this._handleFallbackAutoScroll),Ae(document,"mousemove",this._handleFallbackAutoScroll)),jl(),Vs(),ef()},nulling:function(){Ks=bo=Ir=yo=Or=fo=po=null,Ze.length=0},_handleFallbackAutoScroll:function(t){this._handleAutoScroll(t,!0)},_handleAutoScroll:function(t,n){var r=this,s=(t.touches?t.touches[0]:t).clientX,a=(t.touches?t.touches[0]:t).clientY,u=document.elementFromPoint(s,a);if(Ks=t,n||this.options.forceAutoScrollFallback||Hr||Mi||Mr){go(t,this.options,u,n);var c=rn(u,!0);yo&&(!Or||s!==fo||a!==po)&&(Or&&jl(),Or=setInterval(function(){var v=rn(document.elementFromPoint(s,a),!0);v!==c&&(c=v,Vs()),go(t,r.options,v,n)},10),fo=s,po=a)}else{if(!this.options.bubbleScroll||rn(u,!0)===ki()){Vs();return}go(t,this.options,rn(u,!1),!1)}}},Oi(i,{pluginName:"scroll",initializeByDefault:!0})}function Vs(){Ze.forEach(function(i){clearInterval(i.pid)}),Ze=[]}function jl(){clearInterval(Or)}var go=$l(function(i,e,t,n){if(e.scroll){var r=(i.touches?i.touches[0]:i).clientX,s=(i.touches?i.touches[0]:i).clientY,a=e.scrollSensitivity,u=e.scrollSpeed,c=ki(),v=!1,k;bo!==t&&(bo=t,Vs(),Ir=e.scroll,k=e.scrollFn,Ir===!0&&(Ir=rn(t,!0)));var A=0,N=Ir;do{var y=N,d=Qe(y),g=d.top,b=d.bottom,E=d.left,P=d.right,o=d.width,h=d.height,f=void 0,_=void 0,C=y.scrollWidth,I=y.scrollHeight,L=le(y),F=y.scrollLeft,K=y.scrollTop;y===c?(f=o<C&&(L.overflowX==="auto"||L.overflowX==="scroll"||L.overflowX==="visible"),_=h<I&&(L.overflowY==="auto"||L.overflowY==="scroll"||L.overflowY==="visible")):(f=o<C&&(L.overflowX==="auto"||L.overflowX==="scroll"),_=h<I&&(L.overflowY==="auto"||L.overflowY==="scroll"));var W=f&&(Math.abs(P-r)<=a&&F+o<C)-(Math.abs(E-r)<=a&&!!F),q=_&&(Math.abs(b-s)<=a&&K+h<I)-(Math.abs(g-s)<=a&&!!K);if(!Ze[A])for(var G=0;G<=A;G++)Ze[G]||(Ze[G]={});(Ze[A].vx!=W||Ze[A].vy!=q||Ze[A].el!==y)&&(Ze[A].el=y,Ze[A].vx=W,Ze[A].vy=q,clearInterval(Ze[A].pid),(W!=0||q!=0)&&(v=!0,Ze[A].pid=setInterval(function(){n&&this.layer===0&&de.active._onTouchMove(Ks);var x=Ze[this.layer].vy?Ze[this.layer].vy*u:0,U=Ze[this.layer].vx?Ze[this.layer].vx*u:0;typeof k=="function"&&k.call(de.dragged.parentNode[It],U,x,i,Ks,Ze[this.layer].el)!=="continue"||ql(Ze[this.layer].el,U,x)}.bind({layer:A}),24))),A++}while(e.bubbleScroll&&N!==c&&(N=rn(N,!1)));yo=v}},30),ed=function(e){var t=e.originalEvent,n=e.putSortable,r=e.dragEl,s=e.activeSortable,a=e.dispatchSortableEvent,u=e.hideGhostForTarget,c=e.unhideGhostForTarget;if(t){var v=n||s;u();var k=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,A=document.elementFromPoint(k.clientX,k.clientY);c(),v&&!v.el.contains(A)&&(a("spill"),this.onSpill({dragEl:r,putSortable:n}))}};function _o(){}_o.prototype={startIndex:null,dragStart:function(e){var t=e.oldDraggableIndex;this.startIndex=t},onSpill:function(e){var t=e.dragEl,n=e.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var r=sr(this.sortable.el,this.startIndex,this.options);r?this.sortable.el.insertBefore(t,r):this.sortable.el.appendChild(t),this.sortable.animateAll(),n&&n.animateAll()},drop:ed};Oi(_o,{pluginName:"revertOnSpill"});function ko(){}ko.prototype={onSpill:function(e){var t=e.dragEl,n=e.putSortable,r=n||this.sortable;r.captureAnimationState(),t.parentNode&&t.parentNode.removeChild(t),r.animateAll()},drop:ed};Oi(ko,{pluginName:"removeOnSpill"});de.mount(new yf);de.mount(ko,_o);var td=de;var id={mounted(){let i=new td(this.el,{animation:1,delay:4,delayOnTouchOnly:!0,group:"shared",draggable:".draggable",ghostClass:".sortable-ghost",handle:".drag-handle",onEnd:e=>{e.preventDefault(),console.log("onEnd"),this.pushEvent("dropped",{draggedId:e.item.id,toDropzoneId:e.to.id,fromDropzoneId:e.from.id,newDraggableIndex:e.newDraggableIndex,oldDraggableIndex:e.oldDraggableIndex,newOrder:i.toArray()})}})}};var kc=Va(rd());function wf(i){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)t.hasOwnProperty(n)&&(i[n]=t[n])}return i}function So(i,e){return Array(e+1).join(i)}function _f(i){return i.replace(/^\n*/,"")}function kf(i){for(var e=i.length;e>0&&i[e-1]===`
`;)e--;return i.substring(0,e)}var Af=["ADDRESS","ARTICLE","ASIDE","AUDIO","BLOCKQUOTE","BODY","CANVAS","CENTER","DD","DIR","DIV","DL","DT","FIELDSET","FIGCAPTION","FIGURE","FOOTER","FORM","FRAMESET","H1","H2","H3","H4","H5","H6","HEADER","HGROUP","HR","HTML","ISINDEX","LI","MAIN","MENU","NAV","NOFRAMES","NOSCRIPT","OL","OUTPUT","P","PRE","SECTION","TABLE","TBODY","TD","TFOOT","TH","THEAD","TR","UL"];function Do(i){return To(i,Af)}var od=["AREA","BASE","BR","COL","COMMAND","EMBED","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR"];function ud(i){return To(i,od)}function Ef(i){return dd(i,od)}var ld=["A","TABLE","THEAD","TBODY","TFOOT","TH","TD","IFRAME","SCRIPT","AUDIO","VIDEO"];function Cf(i){return To(i,ld)}function Sf(i){return dd(i,ld)}function To(i,e){return e.indexOf(i.nodeName)>=0}function dd(i,e){return i.getElementsByTagName&&e.some(function(t){return i.getElementsByTagName(t).length})}var ct={};ct.paragraph={filter:"p",replacement:function(i){return`

`+i+`

`}};ct.lineBreak={filter:"br",replacement:function(i,e,t){return t.br+`
`}};ct.heading={filter:["h1","h2","h3","h4","h5","h6"],replacement:function(i,e,t){var n=Number(e.nodeName.charAt(1));if(t.headingStyle==="setext"&&n<3){var r=So(n===1?"=":"-",i.length);return`

`+i+`
`+r+`

`}else return`

`+So("#",n)+" "+i+`

`}};ct.blockquote={filter:"blockquote",replacement:function(i){return i=i.replace(/^\n+|\n+$/g,""),i=i.replace(/^/gm,"> "),`

`+i+`

`}};ct.list={filter:["ul","ol"],replacement:function(i,e){var t=e.parentNode;return t.nodeName==="LI"&&t.lastElementChild===e?`
`+i:`

`+i+`

`}};ct.listItem={filter:"li",replacement:function(i,e,t){i=i.replace(/^\n+/,"").replace(/\n+$/,`
`).replace(/\n/gm,`
    `);var n=t.bulletListMarker+"   ",r=e.parentNode;if(r.nodeName==="OL"){var s=r.getAttribute("start"),a=Array.prototype.indexOf.call(r.children,e);n=(s?Number(s)+a:a+1)+".  "}return n+i+(e.nextSibling&&!/\n$/.test(i)?`
`:"")}};ct.indentedCodeBlock={filter:function(i,e){return e.codeBlockStyle==="indented"&&i.nodeName==="PRE"&&i.firstChild&&i.firstChild.nodeName==="CODE"},replacement:function(i,e,t){return`

    `+e.firstChild.textContent.replace(/\n/g,`
    `)+`

`}};ct.fencedCodeBlock={filter:function(i,e){return e.codeBlockStyle==="fenced"&&i.nodeName==="PRE"&&i.firstChild&&i.firstChild.nodeName==="CODE"},replacement:function(i,e,t){for(var n=e.firstChild.getAttribute("class")||"",r=(n.match(/language-(\S+)/)||[null,""])[1],s=e.firstChild.textContent,a=t.fence.charAt(0),u=3,c=new RegExp("^"+a+"{3,}","gm"),v;v=c.exec(s);)v[0].length>=u&&(u=v[0].length+1);var k=So(a,u);return`

`+k+r+`
`+s.replace(/\n$/,"")+`
`+k+`

`}};ct.horizontalRule={filter:"hr",replacement:function(i,e,t){return`

`+t.hr+`

`}};ct.inlineLink={filter:function(i,e){return e.linkStyle==="inlined"&&i.nodeName==="A"&&i.getAttribute("href")},replacement:function(i,e){var t=e.getAttribute("href");t&&(t=t.replace(/([()])/g,"\\$1"));var n=Xs(e.getAttribute("title"));return n&&(n=' "'+n.replace(/"/g,'\\"')+'"'),"["+i+"]("+t+n+")"}};ct.referenceLink={filter:function(i,e){return e.linkStyle==="referenced"&&i.nodeName==="A"&&i.getAttribute("href")},replacement:function(i,e,t){var n=e.getAttribute("href"),r=Xs(e.getAttribute("title"));r&&(r=' "'+r+'"');var s,a;switch(t.linkReferenceStyle){case"collapsed":s="["+i+"][]",a="["+i+"]: "+n+r;break;case"shortcut":s="["+i+"]",a="["+i+"]: "+n+r;break;default:var u=this.references.length+1;s="["+i+"]["+u+"]",a="["+u+"]: "+n+r}return this.references.push(a),s},references:[],append:function(i){var e="";return this.references.length&&(e=`

`+this.references.join(`
`)+`

`,this.references=[]),e}};ct.emphasis={filter:["em","i"],replacement:function(i,e,t){return i.trim()?t.emDelimiter+i+t.emDelimiter:""}};ct.strong={filter:["strong","b"],replacement:function(i,e,t){return i.trim()?t.strongDelimiter+i+t.strongDelimiter:""}};ct.code={filter:function(i){var e=i.previousSibling||i.nextSibling,t=i.parentNode.nodeName==="PRE"&&!e;return i.nodeName==="CODE"&&!t},replacement:function(i){if(!i)return"";i=i.replace(/\r?\n|\r/g," ");for(var e=/^`|^ .*?[^ ].* $|`$/.test(i)?" ":"",t="`",n=i.match(/`+/gm)||[];n.indexOf(t)!==-1;)t=t+"`";return t+e+i+e+t}};ct.image={filter:"img",replacement:function(i,e){var t=Xs(e.getAttribute("alt")),n=e.getAttribute("src")||"",r=Xs(e.getAttribute("title")),s=r?' "'+r+'"':"";return n?"!["+t+"]("+n+s+")":""}};function Xs(i){return i?i.replace(/(\n+\s*)+/g,`
`):""}function cd(i){this.options=i,this._keep=[],this._remove=[],this.blankRule={replacement:i.blankReplacement},this.keepReplacement=i.keepReplacement,this.defaultRule={replacement:i.defaultReplacement},this.array=[];for(var e in i.rules)this.array.push(i.rules[e])}cd.prototype={add:function(i,e){this.array.unshift(e)},keep:function(i){this._keep.unshift({filter:i,replacement:this.keepReplacement})},remove:function(i){this._remove.unshift({filter:i,replacement:function(){return""}})},forNode:function(i){if(i.isBlank)return this.blankRule;var e;return(e=Ao(this.array,i,this.options))||(e=Ao(this._keep,i,this.options))||(e=Ao(this._remove,i,this.options))?e:this.defaultRule},forEach:function(i){for(var e=0;e<this.array.length;e++)i(this.array[e],e)}};function Ao(i,e,t){for(var n=0;n<i.length;n++){var r=i[n];if(Df(r,e,t))return r}}function Df(i,e,t){var n=i.filter;if(typeof n=="string"){if(n===e.nodeName.toLowerCase())return!0}else if(Array.isArray(n)){if(n.indexOf(e.nodeName.toLowerCase())>-1)return!0}else if(typeof n=="function"){if(n.call(i,e,t))return!0}else throw new TypeError("`filter` needs to be a string, array, or function")}function Tf(i){var e=i.element,t=i.isBlock,n=i.isVoid,r=i.isPre||function(A){return A.nodeName==="PRE"};if(!(!e.firstChild||r(e))){for(var s=null,a=!1,u=null,c=sd(u,e,r);c!==e;){if(c.nodeType===3||c.nodeType===4){var v=c.data.replace(/[ \r\n\t]+/g," ");if((!s||/ $/.test(s.data))&&!a&&v[0]===" "&&(v=v.substr(1)),!v){c=Eo(c);continue}c.data=v,s=c}else if(c.nodeType===1)t(c)||c.nodeName==="BR"?(s&&(s.data=s.data.replace(/ $/,"")),s=null,a=!1):n(c)||r(c)?(s=null,a=!0):s&&(a=!1);else{c=Eo(c);continue}var k=sd(u,c,r);u=c,c=k}s&&(s.data=s.data.replace(/ $/,""),s.data||Eo(s))}}function Eo(i){var e=i.nextSibling||i.parentNode;return i.parentNode.removeChild(i),e}function sd(i,e,t){return i&&i.parentNode===e||t(e)?e.nextSibling||e.parentNode:e.firstChild||e.nextSibling||e.parentNode}var xo=typeof window<"u"?window:{};function xf(){var i=xo.DOMParser,e=!1;try{new i().parseFromString("","text/html")&&(e=!0)}catch{}return e}function Lf(){var i=function(){};return Rf()?i.prototype.parseFromString=function(e){var t=new window.ActiveXObject("htmlfile");return t.designMode="on",t.open(),t.write(e),t.close(),t}:i.prototype.parseFromString=function(e){var t=document.implementation.createHTMLDocument("");return t.open(),t.write(e),t.close(),t},i}function Rf(){var i=!1;try{document.implementation.createHTMLDocument("").open()}catch{xo.ActiveXObject&&(i=!0)}return i}var Pf=xf()?xo.DOMParser:Lf();function If(i,e){var t;if(typeof i=="string"){var n=Of().parseFromString('<x-turndown id="turndown-root">'+i+"</x-turndown>","text/html");t=n.getElementById("turndown-root")}else t=i.cloneNode(!0);return Tf({element:t,isBlock:Do,isVoid:ud,isPre:e.preformattedCode?Mf:null}),t}var Co;function Of(){return Co=Co||new Pf,Co}function Mf(i){return i.nodeName==="PRE"||i.nodeName==="CODE"}function Nf(i,e){return i.isBlock=Do(i),i.isCode=i.nodeName==="CODE"||i.parentNode.isCode,i.isBlank=Bf(i),i.flankingWhitespace=Ff(i,e),i}function Bf(i){return!ud(i)&&!Cf(i)&&/^\s*$/i.test(i.textContent)&&!Ef(i)&&!Sf(i)}function Ff(i,e){if(i.isBlock||e.preformattedCode&&i.isCode)return{leading:"",trailing:""};var t=jf(i.textContent);return t.leadingAscii&&ad("left",i,e)&&(t.leading=t.leadingNonAscii),t.trailingAscii&&ad("right",i,e)&&(t.trailing=t.trailingNonAscii),{leading:t.leading,trailing:t.trailing}}function jf(i){var e=i.match(/^(([ \t\r\n]*)(\s*))(?:(?=\S)[\s\S]*\S)?((\s*?)([ \t\r\n]*))$/);return{leading:e[1],leadingAscii:e[2],leadingNonAscii:e[3],trailing:e[4],trailingNonAscii:e[5],trailingAscii:e[6]}}function ad(i,e,t){var n,r,s;return i==="left"?(n=e.previousSibling,r=/ $/):(n=e.nextSibling,r=/^ /),n&&(n.nodeType===3?s=r.test(n.nodeValue):t.preformattedCode&&n.nodeName==="CODE"?s=!1:n.nodeType===1&&!Do(n)&&(s=r.test(n.textContent))),s}var Hf=Array.prototype.reduce,zf=[[/\\/g,"\\\\"],[/\*/g,"\\*"],[/^-/g,"\\-"],[/^\+ /g,"\\+ "],[/^(=+)/g,"\\$1"],[/^(#{1,6}) /g,"\\$1 "],[/`/g,"\\`"],[/^~~~/g,"\\~~~"],[/\[/g,"\\["],[/\]/g,"\\]"],[/^>/g,"\\>"],[/_/g,"\\_"],[/^(\d+)\. /g,"$1\\. "]];function Ys(i){if(!(this instanceof Ys))return new Ys(i);var e={rules:ct,headingStyle:"setext",hr:"* * *",bulletListMarker:"*",codeBlockStyle:"indented",fence:"```",emDelimiter:"_",strongDelimiter:"**",linkStyle:"inlined",linkReferenceStyle:"full",br:"  ",preformattedCode:!1,blankReplacement:function(t,n){return n.isBlock?`

`:""},keepReplacement:function(t,n){return n.isBlock?`

`+n.outerHTML+`

`:n.outerHTML},defaultReplacement:function(t,n){return n.isBlock?`

`+t+`

`:t}};this.options=wf({},e,i),this.rules=new cd(this.options)}Ys.prototype={turndown:function(i){if(!Wf(i))throw new TypeError(i+" is not a string, or an element/document/fragment node.");if(i==="")return"";var e=hd.call(this,new If(i,this.options));return Vf.call(this,e)},use:function(i){if(Array.isArray(i))for(var e=0;e<i.length;e++)this.use(i[e]);else if(typeof i=="function")i(this);else throw new TypeError("plugin must be a Function or an Array of Functions");return this},addRule:function(i,e){return this.rules.add(i,e),this},keep:function(i){return this.rules.keep(i),this},remove:function(i){return this.rules.remove(i),this},escape:function(i){return zf.reduce(function(e,t){return e.replace(t[0],t[1])},i)}};function hd(i){var e=this;return Hf.call(i.childNodes,function(t,n){n=new Nf(n,e.options);var r="";return n.nodeType===3?r=n.isCode?n.nodeValue:e.escape(n.nodeValue):n.nodeType===1&&(r=Uf.call(e,n)),fd(t,r)},"")}function Vf(i){var e=this;return this.rules.forEach(function(t){typeof t.append=="function"&&(i=fd(i,t.append(e.options)))}),i.replace(/^[\t\r\n]+/,"").replace(/[\t\r\n\s]+$/,"")}function Uf(i){var e=this.rules.forNode(i),t=hd.call(this,i),n=i.flankingWhitespace;return(n.leading||n.trailing)&&(t=t.trim()),n.leading+e.replacement(t,i,this.options)+n.trailing}function fd(i,e){var t=kf(i),n=_f(e),r=Math.max(i.length-t.length,e.length-n.length),s=`

`.substring(0,r);return t+s+n}function Wf(i){return i!=null&&(typeof i=="string"||i.nodeType&&(i.nodeType===1||i.nodeType===9||i.nodeType===11))}var pd=Ys;var $f="2.1.12",Rn="[data-trix-attachment]",wu={preview:{presentation:"gallery",caption:{name:!0,size:!0}},file:{caption:{size:!0}}},wt={default:{tagName:"div",parse:!1},quote:{tagName:"blockquote",nestable:!0},heading1:{tagName:"h1",terminal:!0,breakOnReturn:!0,group:!1},code:{tagName:"pre",terminal:!0,htmlAttributes:["language"],text:{plaintext:!0}},bulletList:{tagName:"ul",parse:!1},bullet:{tagName:"li",listAttribute:"bulletList",group:!1,nestable:!0,test(i){return gd(i.parentNode)===wt[this.listAttribute].tagName}},numberList:{tagName:"ol",parse:!1},number:{tagName:"li",listAttribute:"numberList",group:!1,nestable:!0,test(i){return gd(i.parentNode)===wt[this.listAttribute].tagName}},attachmentGallery:{tagName:"div",exclusive:!0,terminal:!0,parse:!1,group:!1}},gd=i=>{var e;return i==null||(e=i.tagName)===null||e===void 0?void 0:e.toLowerCase()},md=navigator.userAgent.match(/android\s([0-9]+.*Chrome)/i),Lo=md&&parseInt(md[1]),as={composesExistingText:/Android.*Chrome/.test(navigator.userAgent),recentAndroid:Lo&&Lo>12,samsungAndroid:Lo&&navigator.userAgent.match(/Android.*SM-/),forcesObjectResizing:/Trident.*rv:11/.test(navigator.userAgent),supportsInputEvents:typeof InputEvent<"u"&&["data","getTargetRanges","inputType"].every(i=>i in InputEvent.prototype)},Xd={ADD_ATTR:["language"],SAFE_FOR_XML:!1,RETURN_DOM:!0},fe={attachFiles:"Attach Files",bold:"Bold",bullets:"Bullets",byte:"Byte",bytes:"Bytes",captionPlaceholder:"Add a caption\u2026",code:"Code",heading1:"Heading",indent:"Increase Level",italic:"Italic",link:"Link",numbers:"Numbers",outdent:"Decrease Level",quote:"Quote",redo:"Redo",remove:"Remove",strike:"Strikethrough",undo:"Undo",unlink:"Unlink",url:"URL",urlPlaceholder:"Enter a URL\u2026",GB:"GB",KB:"KB",MB:"MB",PB:"PB",TB:"TB"},qf=[fe.bytes,fe.KB,fe.MB,fe.GB,fe.TB,fe.PB],Yd={prefix:"IEC",precision:2,formatter(i){switch(i){case 0:return"0 ".concat(fe.bytes);case 1:return"1 ".concat(fe.byte);default:let e;this.prefix==="SI"?e=1e3:this.prefix==="IEC"&&(e=1024);let t=Math.floor(Math.log(i)/Math.log(e)),n=(i/Math.pow(e,t)).toFixed(this.precision).replace(/0*$/,"").replace(/\.$/,"");return"".concat(n," ").concat(qf[t])}}},xa="\uFEFF",an="\xA0",Zd=function(i){for(let e in i){let t=i[e];this[e]=t}return this},_u=document.documentElement,Kf=_u.matches,Ke=function(i){let{onElement:e,matchingSelector:t,withCallback:n,inPhase:r,preventDefault:s,times:a}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},u=e||_u,c=t,v=r==="capturing",k=function(A){a!=null&&--a==0&&k.destroy();let N=on(A.target,{matchingSelector:c});N!=null&&(n?.call(N,A,N),s&&A.preventDefault())};return k.destroy=()=>u.removeEventListener(i,k,v),u.addEventListener(i,k,v),k},Xr=function(i){let{onElement:e,bubbles:t,cancelable:n,attributes:r}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},s=e??_u;t=t!==!1,n=n!==!1;let a=document.createEvent("Events");return a.initEvent(i,t,n),r!=null&&Zd.call(a,r),s.dispatchEvent(a)},Qd=function(i,e){if(i?.nodeType===1)return Kf.call(i,e)},on=function(i){let{matchingSelector:e,untilNode:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};for(;i&&i.nodeType!==Node.ELEMENT_NODE;)i=i.parentNode;if(i!=null){if(e==null)return i;if(i.closest&&t==null)return i.closest(e);for(;i&&i!==t;){if(Qd(i,e))return i;i=i.parentNode}}},ku=i=>document.activeElement!==i&&Ln(i,document.activeElement),Ln=function(i,e){if(i&&e)for(;e;){if(e===i)return!0;e=e.parentNode}},Ro=function(i){var e;if((e=i)===null||e===void 0||!e.parentNode)return;let t=0;for(i=i.previousSibling;i;)t++,i=i.previousSibling;return t},un=i=>{var e;return i==null||(e=i.parentNode)===null||e===void 0?void 0:e.removeChild(i)},oa=function(i){let{onlyNodesOfType:e,usingFilter:t,expandEntityReferences:n}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=(()=>{switch(e){case"element":return NodeFilter.SHOW_ELEMENT;case"text":return NodeFilter.SHOW_TEXT;case"comment":return NodeFilter.SHOW_COMMENT;default:return NodeFilter.SHOW_ALL}})();return document.createTreeWalker(i,r,t??null,n===!0)},yt=i=>{var e;return i==null||(e=i.tagName)===null||e===void 0?void 0:e.toLowerCase()},be=function(i){let e,t,n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};typeof i=="object"?(n=i,i=n.tagName):n={attributes:n};let r=document.createElement(i);if(n.editable!=null&&(n.attributes==null&&(n.attributes={}),n.attributes.contenteditable=n.editable),n.attributes)for(e in n.attributes)t=n.attributes[e],r.setAttribute(e,t);if(n.style)for(e in n.style)t=n.style[e],r.style[e]=t;if(n.data)for(e in n.data)t=n.data[e],r.dataset[e]=t;return n.className&&n.className.split(" ").forEach(s=>{r.classList.add(s)}),n.textContent&&(r.textContent=n.textContent),n.childNodes&&[].concat(n.childNodes).forEach(s=>{r.appendChild(s)}),r},Vr,Yr=function(){if(Vr!=null)return Vr;Vr=[];for(let i in wt){let e=wt[i];e.tagName&&Vr.push(e.tagName)}return Vr},Po=i=>or(i?.firstChild),vd=function(i){let{strict:e}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{strict:!0};return e?or(i):or(i)||!or(i.firstChild)&&function(t){return Yr().includes(yt(t))&&!Yr().includes(yt(t.firstChild))}(i)},or=i=>Jf(i)&&i?.data==="block",Jf=i=>i?.nodeType===Node.COMMENT_NODE,ur=function(i){let{name:e}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(i)return Zr(i)?i.data===xa?!e||i.parentNode.dataset.trixCursorTarget===e:void 0:ur(i.firstChild)},Pn=i=>Qd(i,Rn),ec=i=>Zr(i)&&i?.data==="",Zr=i=>i?.nodeType===Node.TEXT_NODE,Au={level2Enabled:!0,getLevel(){return this.level2Enabled&&as.supportsInputEvents?2:0},pickFiles(i){let e=be("input",{type:"file",multiple:!0,hidden:!0,id:this.fileInputId});e.addEventListener("change",()=>{i(e.files),un(e)}),un(document.getElementById(this.fileInputId)),document.body.appendChild(e),e.click()}},ra={removeBlankTableCells:!1,tableCellSeparator:" | ",tableRowSeparator:`
`},Mn={bold:{tagName:"strong",inheritable:!0,parser(i){let e=window.getComputedStyle(i);return e.fontWeight==="bold"||e.fontWeight>=600}},italic:{tagName:"em",inheritable:!0,parser:i=>window.getComputedStyle(i).fontStyle==="italic"},href:{groupTagName:"a",parser(i){let e="a:not(".concat(Rn,")"),t=i.closest(e);if(t)return t.getAttribute("href")}},strike:{tagName:"del",inheritable:!0},frozen:{style:{backgroundColor:"highlight"}}},tc={getDefaultHTML:()=>`<div class="trix-button-row">
      <span class="trix-button-group trix-button-group--text-tools" data-trix-button-group="text-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-bold" data-trix-attribute="bold" data-trix-key="b" title="`.concat(fe.bold,'" tabindex="-1">').concat(fe.bold,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-italic" data-trix-attribute="italic" data-trix-key="i" title="`).concat(fe.italic,'" tabindex="-1">').concat(fe.italic,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-strike" data-trix-attribute="strike" title="`).concat(fe.strike,'" tabindex="-1">').concat(fe.strike,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-link" data-trix-attribute="href" data-trix-action="link" data-trix-key="k" title="`).concat(fe.link,'" tabindex="-1">').concat(fe.link,`</button>
      </span>

      <span class="trix-button-group trix-button-group--block-tools" data-trix-button-group="block-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-heading-1" data-trix-attribute="heading1" title="`).concat(fe.heading1,'" tabindex="-1">').concat(fe.heading1,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-quote" data-trix-attribute="quote" title="`).concat(fe.quote,'" tabindex="-1">').concat(fe.quote,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-code" data-trix-attribute="code" title="`).concat(fe.code,'" tabindex="-1">').concat(fe.code,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-bullet-list" data-trix-attribute="bullet" title="`).concat(fe.bullets,'" tabindex="-1">').concat(fe.bullets,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-number-list" data-trix-attribute="number" title="`).concat(fe.numbers,'" tabindex="-1">').concat(fe.numbers,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-decrease-nesting-level" data-trix-action="decreaseNestingLevel" title="`).concat(fe.outdent,'" tabindex="-1">').concat(fe.outdent,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-increase-nesting-level" data-trix-action="increaseNestingLevel" title="`).concat(fe.indent,'" tabindex="-1">').concat(fe.indent,`</button>
      </span>

      <span class="trix-button-group trix-button-group--file-tools" data-trix-button-group="file-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-attach" data-trix-action="attachFiles" title="`).concat(fe.attachFiles,'" tabindex="-1">').concat(fe.attachFiles,`</button>
      </span>

      <span class="trix-button-group-spacer"></span>

      <span class="trix-button-group trix-button-group--history-tools" data-trix-button-group="history-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-undo" data-trix-action="undo" data-trix-key="z" title="`).concat(fe.undo,'" tabindex="-1">').concat(fe.undo,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-redo" data-trix-action="redo" data-trix-key="shift+z" title="`).concat(fe.redo,'" tabindex="-1">').concat(fe.redo,`</button>
      </span>
    </div>

    <div class="trix-dialogs" data-trix-dialogs>
      <div class="trix-dialog trix-dialog--link" data-trix-dialog="href" data-trix-dialog-attribute="href">
        <div class="trix-dialog__link-fields">
          <input type="url" name="href" class="trix-input trix-input--dialog" placeholder="`).concat(fe.urlPlaceholder,'" aria-label="').concat(fe.url,`" data-trix-validate-href required data-trix-input>
          <div class="trix-button-group">
            <input type="button" class="trix-button trix-button--dialog" value="`).concat(fe.link,`" data-trix-method="setAttribute">
            <input type="button" class="trix-button trix-button--dialog" value="`).concat(fe.unlink,`" data-trix-method="removeAttribute">
          </div>
        </div>
      </div>
    </div>`)},iu={interval:5e3},os=Object.freeze({__proto__:null,attachments:wu,blockAttributes:wt,browser:as,css:{attachment:"attachment",attachmentCaption:"attachment__caption",attachmentCaptionEditor:"attachment__caption-editor",attachmentMetadata:"attachment__metadata",attachmentMetadataContainer:"attachment__metadata-container",attachmentName:"attachment__name",attachmentProgress:"attachment__progress",attachmentSize:"attachment__size",attachmentToolbar:"attachment__toolbar",attachmentGallery:"attachment-gallery"},dompurify:Xd,fileSize:Yd,input:Au,keyNames:{8:"backspace",9:"tab",13:"return",27:"escape",37:"left",39:"right",46:"delete",68:"d",72:"h",79:"o"},lang:fe,parser:ra,textAttributes:Mn,toolbar:tc,undo:iu}),Ge=class{static proxyMethod(e){let{name:t,toMethod:n,toProperty:r,optional:s}=Gf(e);this.prototype[t]=function(){let a,u;var c,v;return n?u=s?(c=this[n])===null||c===void 0?void 0:c.call(this):this[n]():r&&(u=this[r]),s?(a=(v=u)===null||v===void 0?void 0:v[t],a?bd.call(a,u,arguments):void 0):(a=u[t],bd.call(a,u,arguments))}}},Gf=function(i){let e=i.match(Xf);if(!e)throw new Error("can't parse @proxyMethod expression: ".concat(i));let t={name:e[4]};return e[2]!=null?t.toMethod=e[1]:t.toProperty=e[1],e[3]!=null&&(t.optional=!0),t},{apply:bd}=Function.prototype,Xf=new RegExp("^(.+?)(\\(\\))?(\\?)?\\.(.+?)$"),Io,Oo,Mo,Nn=class extends Ge{static box(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";return e instanceof this?e:this.fromUCS2String(e?.toString())}static fromUCS2String(e){return new this(e,nu(e))}static fromCodepoints(e){return new this(ru(e),e)}constructor(e,t){super(...arguments),this.ucs2String=e,this.codepoints=t,this.length=this.codepoints.length,this.ucs2Length=this.ucs2String.length}offsetToUCS2Offset(e){return ru(this.codepoints.slice(0,Math.max(0,e))).length}offsetFromUCS2Offset(e){return nu(this.ucs2String.slice(0,Math.max(0,e))).length}slice(){return this.constructor.fromCodepoints(this.codepoints.slice(...arguments))}charAt(e){return this.slice(e,e+1)}isEqualTo(e){return this.constructor.box(e).ucs2String===this.ucs2String}toJSON(){return this.ucs2String}getCacheKey(){return this.ucs2String}toString(){return this.ucs2String}},Yf=((Io=Array.from)===null||Io===void 0?void 0:Io.call(Array,"\u{1F47C}").length)===1,Zf=((Oo=" ".codePointAt)===null||Oo===void 0?void 0:Oo.call(" ",0))!=null,Qf=((Mo=String.fromCodePoint)===null||Mo===void 0?void 0:Mo.call(String,32,128124))===" \u{1F47C}",nu,ru;nu=Yf&&Zf?i=>Array.from(i).map(e=>e.codePointAt(0)):function(i){let e=[],t=0,{length:n}=i;for(;t<n;){let r=i.charCodeAt(t++);if(55296<=r&&r<=56319&&t<n){let s=i.charCodeAt(t++);(64512&s)==56320?r=((1023&r)<<10)+(1023&s)+65536:t--}e.push(r)}return e},ru=Qf?i=>String.fromCodePoint(...Array.from(i||[])):function(i){return(()=>{let e=[];return Array.from(i).forEach(t=>{let n="";t>65535&&(t-=65536,n+=String.fromCharCode(t>>>10&1023|55296),t=56320|1023&t),e.push(n+String.fromCharCode(t))}),e})().join("")};var ep=0,ji=class extends Ge{static fromJSONString(e){return this.fromJSON(JSON.parse(e))}constructor(){super(...arguments),this.id=++ep}hasSameConstructorAs(e){return this.constructor===e?.constructor}isEqualTo(e){return this===e}inspect(){let e=[],t=this.contentsForInspection()||{};for(let n in t){let r=t[n];e.push("".concat(n,"=").concat(r))}return"#<".concat(this.constructor.name,":").concat(this.id).concat(e.length?" ".concat(e.join(", ")):"",">")}contentsForInspection(){}toJSONString(){return JSON.stringify(this)}toUTF16String(){return Nn.box(this)}getCacheKey(){return this.id.toString()}},Bn=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];if(i.length!==e.length)return!1;for(let t=0;t<i.length;t++)if(i[t]!==e[t])return!1;return!0},Eu=function(i){let e=i.slice(0);for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return e.splice(...n),e},tp=/[\u05BE\u05C0\u05C3\u05D0-\u05EA\u05F0-\u05F4\u061B\u061F\u0621-\u063A\u0640-\u064A\u066D\u0671-\u06B7\u06BA-\u06BE\u06C0-\u06CE\u06D0-\u06D5\u06E5\u06E6\u200F\u202B\u202E\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE72\uFE74\uFE76-\uFEFC]/,ip=function(){let i=be("input",{dir:"auto",name:"x",dirName:"x.dir"}),e=be("textarea",{dir:"auto",name:"y",dirName:"y.dir"}),t=be("form");t.appendChild(i),t.appendChild(e);let n=function(){try{return new FormData(t).has(e.dirName)}catch{return!1}}(),r=function(){try{return i.matches(":dir(ltr),:dir(rtl)")}catch{return!1}}();return n?function(s){return e.value=s,new FormData(t).get(e.dirName)}:r?function(s){return i.value=s,i.matches(":dir(rtl)")?"rtl":"ltr"}:function(s){let a=s.trim().charAt(0);return tp.test(a)?"rtl":"ltr"}}(),No=null,Bo=null,Fo=null,Zs=null,su=()=>(No||(No=rp().concat(np())),No),Xe=i=>wt[i],np=()=>(Bo||(Bo=Object.keys(wt)),Bo),au=i=>Mn[i],rp=()=>(Fo||(Fo=Object.keys(Mn)),Fo),ic=function(i,e){sp(i).textContent=e.replace(/%t/g,i)},sp=function(i){let e=document.createElement("style");e.setAttribute("type","text/css"),e.setAttribute("data-tag-name",i.toLowerCase());let t=ap();return t&&e.setAttribute("nonce",t),document.head.insertBefore(e,document.head.firstChild),e},ap=function(){let i=yd("trix-csp-nonce")||yd("csp-nonce");if(i){let{nonce:e,content:t}=i;return e==""?t:e}},yd=i=>document.head.querySelector("meta[name=".concat(i,"]")),wd={"application/x-trix-feature-detection":"test"},nc=function(i){let e=i.getData("text/plain"),t=i.getData("text/html");if(!e||!t)return e?.length;{let{body:n}=new DOMParser().parseFromString(t,"text/html");if(n.textContent===e)return!n.querySelector("*")}},rc=/Mac|^iP/.test(navigator.platform)?i=>i.metaKey:i=>i.ctrlKey,Cu=i=>setTimeout(i,1),sc=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e={};for(let t in i){let n=i[t];e[t]=n}return e},pr=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(Object.keys(i).length!==Object.keys(e).length)return!1;for(let t in i)if(i[t]!==e[t])return!1;return!0},Ie=function(i){if(i!=null)return Array.isArray(i)||(i=[i,i]),[_d(i[0]),_d(i[1]!=null?i[1]:i[0])]},Fi=function(i){if(i==null)return;let[e,t]=Ie(i);return ou(e,t)},ua=function(i,e){if(i==null||e==null)return;let[t,n]=Ie(i),[r,s]=Ie(e);return ou(t,r)&&ou(n,s)},_d=function(i){return typeof i=="number"?i:sc(i)},ou=function(i,e){return typeof i=="number"?i===e:pr(i,e)},la=class extends Ge{constructor(){super(...arguments),this.update=this.update.bind(this),this.selectionManagers=[]}start(){this.started||(this.started=!0,document.addEventListener("selectionchange",this.update,!0))}stop(){if(this.started)return this.started=!1,document.removeEventListener("selectionchange",this.update,!0)}registerSelectionManager(e){if(!this.selectionManagers.includes(e))return this.selectionManagers.push(e),this.start()}unregisterSelectionManager(e){if(this.selectionManagers=this.selectionManagers.filter(t=>t!==e),this.selectionManagers.length===0)return this.stop()}notifySelectionManagersOfSelectionChange(){return this.selectionManagers.map(e=>e.selectionDidChange())}update(){this.notifySelectionManagersOfSelectionChange()}reset(){this.update()}},Fn=new la,ac=function(){let i=window.getSelection();if(i.rangeCount>0)return i},Qr=function(){var i;let e=(i=ac())===null||i===void 0?void 0:i.getRangeAt(0);if(e&&!op(e))return e},oc=function(i){let e=window.getSelection();return e.removeAllRanges(),e.addRange(i),Fn.update()},op=i=>kd(i.startContainer)||kd(i.endContainer),kd=i=>!Object.getPrototypeOf(i),Gr=i=>i.replace(new RegExp("".concat(xa),"g"),"").replace(new RegExp("".concat(an),"g")," "),Su=new RegExp("[^\\S".concat(an,"]")),Du=i=>i.replace(new RegExp("".concat(Su.source),"g")," ").replace(/\ {2,}/g," "),Ad=function(i,e){if(i.isEqualTo(e))return["",""];let t=jo(i,e),{length:n}=t.utf16String,r;if(n){let{offset:s}=t,a=i.codepoints.slice(0,s).concat(i.codepoints.slice(s+n));r=jo(e,Nn.fromCodepoints(a))}else r=jo(e,i);return[t.utf16String.toString(),r.utf16String.toString()]},jo=function(i,e){let t=0,n=i.length,r=e.length;for(;t<n&&i.charAt(t).isEqualTo(e.charAt(t));)t++;for(;n>t+1&&i.charAt(n-1).isEqualTo(e.charAt(r-1));)n--,r--;return{utf16String:i.slice(t,n),offset:t}},_t=class extends ji{static fromCommonAttributesOfObjects(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];if(!e.length)return new this;let t=Ur(e[0]),n=t.getKeys();return e.slice(1).forEach(r=>{n=t.getKeysCommonToHash(Ur(r)),t=t.slice(n)}),t}static box(e){return Ur(e)}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};super(...arguments),this.values=sa(e)}add(e,t){return this.merge(up(e,t))}remove(e){return new _t(sa(this.values,e))}get(e){return this.values[e]}has(e){return e in this.values}merge(e){return new _t(lp(this.values,dp(e)))}slice(e){let t={};return Array.from(e).forEach(n=>{this.has(n)&&(t[n]=this.values[n])}),new _t(t)}getKeys(){return Object.keys(this.values)}getKeysCommonToHash(e){return e=Ur(e),this.getKeys().filter(t=>this.values[t]===e.values[t])}isEqualTo(e){return Bn(this.toArray(),Ur(e).toArray())}isEmpty(){return this.getKeys().length===0}toArray(){if(!this.array){let e=[];for(let t in this.values){let n=this.values[t];e.push(e.push(t,n))}this.array=e.slice(0)}return this.array}toObject(){return sa(this.values)}toJSON(){return this.toObject()}contentsForInspection(){return{values:JSON.stringify(this.values)}}},up=function(i,e){let t={};return t[i]=e,t},lp=function(i,e){let t=sa(i);for(let n in e){let r=e[n];t[n]=r}return t},sa=function(i,e){let t={};return Object.keys(i).sort().forEach(n=>{n!==e&&(t[n]=i[n])}),t},Ur=function(i){return i instanceof _t?i:new _t(i)},dp=function(i){return i instanceof _t?i.values:i},ts=class{static groupObjects(){let e,t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],{depth:n,asTree:r}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};r&&n==null&&(n=0);let s=[];return Array.from(t).forEach(a=>{var u;if(e){var c,v,k;if((c=a.canBeGrouped)!==null&&c!==void 0&&c.call(a,n)&&(v=(k=e[e.length-1]).canBeGroupedWith)!==null&&v!==void 0&&v.call(k,a,n))return void e.push(a);s.push(new this(e,{depth:n,asTree:r})),e=null}(u=a.canBeGrouped)!==null&&u!==void 0&&u.call(a,n)?e=[a]:s.push(a)}),e&&s.push(new this(e,{depth:n,asTree:r})),s}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],{depth:t,asTree:n}=arguments.length>1?arguments[1]:void 0;this.objects=e,n&&(this.depth=t,this.objects=this.constructor.groupObjects(this.objects,{asTree:n,depth:this.depth+1}))}getObjects(){return this.objects}getDepth(){return this.depth}getCacheKey(){let e=["objectGroup"];return Array.from(this.getObjects()).forEach(t=>{e.push(t.getCacheKey())}),e.join("/")}},uu=class extends Ge{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),this.objects={},Array.from(e).forEach(t=>{let n=JSON.stringify(t);this.objects[n]==null&&(this.objects[n]=t)})}find(e){let t=JSON.stringify(e);return this.objects[t]}},lu=class{constructor(e){this.reset(e)}add(e){let t=Ed(e);this.elements[t]=e}remove(e){let t=Ed(e),n=this.elements[t];if(n)return delete this.elements[t],n}reset(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];return this.elements={},Array.from(e).forEach(t=>{this.add(t)}),e}},Ed=i=>i.dataset.trixStoreKey,lr=class extends Ge{isPerforming(){return this.performing===!0}hasPerformed(){return this.performed===!0}hasSucceeded(){return this.performed&&this.succeeded}hasFailed(){return this.performed&&!this.succeeded}getPromise(){return this.promise||(this.promise=new Promise((e,t)=>(this.performing=!0,this.perform((n,r)=>{this.succeeded=n,this.performing=!1,this.performed=!0,this.succeeded?e(r):t(r)})))),this.promise}perform(e){return e(!1)}release(){var e,t;(e=this.promise)===null||e===void 0||(t=e.cancel)===null||t===void 0||t.call(e),this.promise=null,this.performing=null,this.performed=null,this.succeeded=null}};lr.proxyMethod("getPromise().then"),lr.proxyMethod("getPromise().catch");var Hi=class extends Ge{constructor(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.object=e,this.options=t,this.childViews=[],this.rootView=this}getNodes(){return this.nodes||(this.nodes=this.createNodes()),this.nodes.map(e=>e.cloneNode(!0))}invalidate(){var e;return this.nodes=null,this.childViews=[],(e=this.parentView)===null||e===void 0?void 0:e.invalidate()}invalidateViewForObject(e){var t;return(t=this.findViewForObject(e))===null||t===void 0?void 0:t.invalidate()}findOrCreateCachedChildView(e,t,n){let r=this.getCachedViewForObject(t);return r?this.recordChildView(r):(r=this.createChildView(...arguments),this.cacheViewForObject(r,t)),r}createChildView(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};t instanceof ts&&(n.viewClass=e,e=du);let r=new e(t,n);return this.recordChildView(r)}recordChildView(e){return e.parentView=this,e.rootView=this.rootView,this.childViews.push(e),e}getAllChildViews(){let e=[];return this.childViews.forEach(t=>{e.push(t),e=e.concat(t.getAllChildViews())}),e}findElement(){return this.findElementForObject(this.object)}findElementForObject(e){let t=e?.id;if(t)return this.rootView.element.querySelector("[data-trix-id='".concat(t,"']"))}findViewForObject(e){for(let t of this.getAllChildViews())if(t.object===e)return t}getViewCache(){return this.rootView!==this?this.rootView.getViewCache():this.isViewCachingEnabled()?(this.viewCache||(this.viewCache={}),this.viewCache):void 0}isViewCachingEnabled(){return this.shouldCacheViews!==!1}enableViewCaching(){this.shouldCacheViews=!0}disableViewCaching(){this.shouldCacheViews=!1}getCachedViewForObject(e){var t;return(t=this.getViewCache())===null||t===void 0?void 0:t[e.getCacheKey()]}cacheViewForObject(e,t){let n=this.getViewCache();n&&(n[t.getCacheKey()]=e)}garbageCollectCachedViews(){let e=this.getViewCache();if(e){let t=this.getAllChildViews().concat(this).map(n=>n.object.getCacheKey());for(let n in e)t.includes(n)||delete e[n]}}},du=class extends Hi{constructor(){super(...arguments),this.objectGroup=this.object,this.viewClass=this.options.viewClass,delete this.options.viewClass}getChildViews(){return this.childViews.length||Array.from(this.objectGroup.getObjects()).forEach(e=>{this.findOrCreateCachedChildView(this.viewClass,e,this.options)}),this.childViews}createNodes(){let e=this.createContainerElement();return this.getChildViews().forEach(t=>{Array.from(t.getNodes()).forEach(n=>{e.appendChild(n)})}),[e]}createContainerElement(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:this.objectGroup.getDepth();return this.getChildViews()[0].createContainerElement(e)}};var{entries:uc,setPrototypeOf:Cd,isFrozen:cp,getPrototypeOf:hp,getOwnPropertyDescriptor:fp}=Object,{freeze:kt,seal:Zt,create:lc}=Object,{apply:cu,construct:hu}=typeof Reflect<"u"&&Reflect;kt||(kt=function(i){return i}),Zt||(Zt=function(i){return i}),cu||(cu=function(i,e,t){return i.apply(e,t)}),hu||(hu=function(i,e){return new i(...e)});var Qs=Wt(Array.prototype.forEach),Sd=Wt(Array.prototype.pop),Wr=Wt(Array.prototype.push),aa=Wt(String.prototype.toLowerCase),Ho=Wt(String.prototype.toString),Dd=Wt(String.prototype.match),$r=Wt(String.prototype.replace),pp=Wt(String.prototype.indexOf),gp=Wt(String.prototype.trim),ui=Wt(Object.prototype.hasOwnProperty),bt=Wt(RegExp.prototype.test),qr=(Td=TypeError,function(){for(var i=arguments.length,e=new Array(i),t=0;t<i;t++)e[t]=arguments[t];return hu(Td,e)}),Td;function Wt(i){return function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return cu(i,e,n)}}function we(i,e){let t=arguments.length>2&&arguments[2]!==void 0?arguments[2]:aa;Cd&&Cd(i,null);let n=e.length;for(;n--;){let r=e[n];if(typeof r=="string"){let s=t(r);s!==r&&(cp(e)||(e[n]=s),r=s)}i[r]=!0}return i}function mp(i){for(let e=0;e<i.length;e++)ui(i,e)||(i[e]=null);return i}function xn(i){let e=lc(null);for(let[t,n]of uc(i))ui(i,t)&&(Array.isArray(n)?e[t]=mp(n):n&&typeof n=="object"&&n.constructor===Object?e[t]=xn(n):e[t]=n);return e}function Kr(i,e){for(;i!==null;){let t=fp(i,e);if(t){if(t.get)return Wt(t.get);if(typeof t.value=="function")return Wt(t.value)}i=hp(i)}return function(){return null}}var xd=kt(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),zo=kt(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),Vo=kt(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),vp=kt(["animate","color-profile","cursor","discard","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),Uo=kt(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover","mprescripts"]),bp=kt(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),Ld=kt(["#text"]),Rd=kt(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","popover","popovertarget","popovertargetaction","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","wrap","xmlns","slot"]),Wo=kt(["accent-height","accumulate","additive","alignment-baseline","amplitude","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","exponent","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","intercept","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","slope","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","tablevalues","targetx","targety","transform","transform-origin","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),Pd=kt(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),ea=kt(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),yp=Zt(/\{\{[\w\W]*|[\w\W]*\}\}/gm),wp=Zt(/<%[\w\W]*|[\w\W]*%>/gm),_p=Zt(/\$\{[\w\W]*}/gm),kp=Zt(/^data-[\-\w.\u00B7-\uFFFF]+$/),Ap=Zt(/^aria-[\-\w]+$/),dc=Zt(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),Ep=Zt(/^(?:\w+script|data):/i),Cp=Zt(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),cc=Zt(/^html$/i),Sp=Zt(/^[a-z][.\w]*(-[.\w]+)+$/i),Id=Object.freeze({__proto__:null,ARIA_ATTR:Ap,ATTR_WHITESPACE:Cp,CUSTOM_ELEMENT:Sp,DATA_ATTR:kp,DOCTYPE_NAME:cc,ERB_EXPR:wp,IS_ALLOWED_URI:dc,IS_SCRIPT_OR_DATA:Ep,MUSTACHE_EXPR:yp,TMPLIT_EXPR:_p}),Dp=1,Tp=3,xp=7,Lp=8,Rp=9,Pp=function(){return typeof window>"u"?null:window},da=function i(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Pp(),t=M=>i(M);if(t.version="3.2.3",t.removed=[],!e||!e.document||e.document.nodeType!==Rp)return t.isSupported=!1,t;let{document:n}=e,r=n,s=r.currentScript,{DocumentFragment:a,HTMLTemplateElement:u,Node:c,Element:v,NodeFilter:k,NamedNodeMap:A=e.NamedNodeMap||e.MozNamedAttrMap,HTMLFormElement:N,DOMParser:y,trustedTypes:d}=e,g=v.prototype,b=Kr(g,"cloneNode"),E=Kr(g,"remove"),P=Kr(g,"nextSibling"),o=Kr(g,"childNodes"),h=Kr(g,"parentNode");if(typeof u=="function"){let M=n.createElement("template");M.content&&M.content.ownerDocument&&(n=M.content.ownerDocument)}let f,_="",{implementation:C,createNodeIterator:I,createDocumentFragment:L,getElementsByTagName:F}=n,{importNode:K}=r,W={afterSanitizeAttributes:[],afterSanitizeElements:[],afterSanitizeShadowDOM:[],beforeSanitizeAttributes:[],beforeSanitizeElements:[],beforeSanitizeShadowDOM:[],uponSanitizeAttribute:[],uponSanitizeElement:[],uponSanitizeShadowNode:[]};t.isSupported=typeof uc=="function"&&typeof h=="function"&&C&&C.createHTMLDocument!==void 0;let{MUSTACHE_EXPR:q,ERB_EXPR:G,TMPLIT_EXPR:x,DATA_ATTR:U,ARIA_ATTR:z,IS_SCRIPT_OR_DATA:$,ATTR_WHITESPACE:ee,CUSTOM_ELEMENT:X}=Id,{IS_ALLOWED_URI:ie}=Id,ae=null,me=we({},[...xd,...zo,...Vo,...Uo,...Ld]),re=null,ye=we({},[...Rd,...Wo,...Pd,...ea]),ne=Object.seal(lc(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),xe=null,je=null,He=!0,st=!0,At=!1,nt=!0,at=!1,ot=!0,Et=!1,di=!1,Vi=!1,Ct=!1,Qt=!1,ft=!1,cn=!0,ei=!1,$t=!0,Nt=!1,ti={},ii=null,hn=we({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]),Si=null,qt=we({},["audio","video","img","source","image","track"]),fn=null,pn=we({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),ci="http://www.w3.org/1998/Math/MathML",Kt="http://www.w3.org/2000/svg",et="http://www.w3.org/1999/xhtml",Bt=et,pt=!1,Ft=null,Di=we({},[ci,Kt,et],Ho),St=we({},["mi","mo","mn","ms","mtext"]),Ui=we({},["annotation-xml"]),Wi=we({},["title","style","font","a","script"]),ni=null,gn=["application/xhtml+xml","text/html"],Ue=null,ri=null,$i=n.createElement("form"),Ti=function(M){return M instanceof RegExp||M instanceof Function},jt=function(){let M=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};if(!ri||ri!==M){if(M&&typeof M=="object"||(M={}),M=xn(M),ni=gn.indexOf(M.PARSER_MEDIA_TYPE)===-1?"text/html":M.PARSER_MEDIA_TYPE,Ue=ni==="application/xhtml+xml"?Ho:aa,ae=ui(M,"ALLOWED_TAGS")?we({},M.ALLOWED_TAGS,Ue):me,re=ui(M,"ALLOWED_ATTR")?we({},M.ALLOWED_ATTR,Ue):ye,Ft=ui(M,"ALLOWED_NAMESPACES")?we({},M.ALLOWED_NAMESPACES,Ho):Di,fn=ui(M,"ADD_URI_SAFE_ATTR")?we(xn(pn),M.ADD_URI_SAFE_ATTR,Ue):pn,Si=ui(M,"ADD_DATA_URI_TAGS")?we(xn(qt),M.ADD_DATA_URI_TAGS,Ue):qt,ii=ui(M,"FORBID_CONTENTS")?we({},M.FORBID_CONTENTS,Ue):hn,xe=ui(M,"FORBID_TAGS")?we({},M.FORBID_TAGS,Ue):{},je=ui(M,"FORBID_ATTR")?we({},M.FORBID_ATTR,Ue):{},ti=!!ui(M,"USE_PROFILES")&&M.USE_PROFILES,He=M.ALLOW_ARIA_ATTR!==!1,st=M.ALLOW_DATA_ATTR!==!1,At=M.ALLOW_UNKNOWN_PROTOCOLS||!1,nt=M.ALLOW_SELF_CLOSE_IN_ATTR!==!1,at=M.SAFE_FOR_TEMPLATES||!1,ot=M.SAFE_FOR_XML!==!1,Et=M.WHOLE_DOCUMENT||!1,Ct=M.RETURN_DOM||!1,Qt=M.RETURN_DOM_FRAGMENT||!1,ft=M.RETURN_TRUSTED_TYPE||!1,Vi=M.FORCE_BODY||!1,cn=M.SANITIZE_DOM!==!1,ei=M.SANITIZE_NAMED_PROPS||!1,$t=M.KEEP_CONTENT!==!1,Nt=M.IN_PLACE||!1,ie=M.ALLOWED_URI_REGEXP||dc,Bt=M.NAMESPACE||et,St=M.MATHML_TEXT_INTEGRATION_POINTS||St,Ui=M.HTML_INTEGRATION_POINTS||Ui,ne=M.CUSTOM_ELEMENT_HANDLING||{},M.CUSTOM_ELEMENT_HANDLING&&Ti(M.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(ne.tagNameCheck=M.CUSTOM_ELEMENT_HANDLING.tagNameCheck),M.CUSTOM_ELEMENT_HANDLING&&Ti(M.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(ne.attributeNameCheck=M.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),M.CUSTOM_ELEMENT_HANDLING&&typeof M.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements=="boolean"&&(ne.allowCustomizedBuiltInElements=M.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),at&&(st=!1),Qt&&(Ct=!0),ti&&(ae=we({},Ld),re=[],ti.html===!0&&(we(ae,xd),we(re,Rd)),ti.svg===!0&&(we(ae,zo),we(re,Wo),we(re,ea)),ti.svgFilters===!0&&(we(ae,Vo),we(re,Wo),we(re,ea)),ti.mathMl===!0&&(we(ae,Uo),we(re,Pd),we(re,ea))),M.ADD_TAGS&&(ae===me&&(ae=xn(ae)),we(ae,M.ADD_TAGS,Ue)),M.ADD_ATTR&&(re===ye&&(re=xn(re)),we(re,M.ADD_ATTR,Ue)),M.ADD_URI_SAFE_ATTR&&we(fn,M.ADD_URI_SAFE_ATTR,Ue),M.FORBID_CONTENTS&&(ii===hn&&(ii=xn(ii)),we(ii,M.FORBID_CONTENTS,Ue)),$t&&(ae["#text"]=!0),Et&&we(ae,["html","head","body"]),ae.table&&(we(ae,["tbody"]),delete xe.tbody),M.TRUSTED_TYPES_POLICY){if(typeof M.TRUSTED_TYPES_POLICY.createHTML!="function")throw qr('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');if(typeof M.TRUSTED_TYPES_POLICY.createScriptURL!="function")throw qr('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');f=M.TRUSTED_TYPES_POLICY,_=f.createHTML("")}else f===void 0&&(f=function(te,Q){if(typeof te!="object"||typeof te.createPolicy!="function")return null;let pe=null,Ee="data-tt-policy-suffix";Q&&Q.hasAttribute(Ee)&&(pe=Q.getAttribute(Ee));let he="dompurify"+(pe?"#"+pe:"");try{return te.createPolicy(he,{createHTML:We=>We,createScriptURL:We=>We})}catch{return console.warn("TrustedTypes policy "+he+" could not be created."),null}}(d,s)),f!==null&&typeof _=="string"&&(_=f.createHTML(""));kt&&kt(M),ri=M}},qi=we({},[...zo,...Vo,...vp]),zn=we({},[...Uo,...bp]),gt=function(M){Wr(t.removed,{element:M});try{h(M).removeChild(M)}catch{E(M)}},hi=function(M,te){try{Wr(t.removed,{attribute:te.getAttributeNode(M),from:te})}catch{Wr(t.removed,{attribute:null,from:te})}if(te.removeAttribute(M),M==="is")if(Ct||Qt)try{gt(te)}catch{}else try{te.setAttribute(M,"")}catch{}},Vn=function(M){let te=null,Q=null;if(Vi)M="<remove></remove>"+M;else{let he=Dd(M,/^[\r\n\t ]+/);Q=he&&he[0]}ni==="application/xhtml+xml"&&Bt===et&&(M='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+M+"</body></html>");let pe=f?f.createHTML(M):M;if(Bt===et)try{te=new y().parseFromString(pe,ni)}catch{}if(!te||!te.documentElement){te=C.createDocument(Bt,"template",null);try{te.documentElement.innerHTML=pt?_:pe}catch{}}let Ee=te.body||te.documentElement;return M&&Q&&Ee.insertBefore(n.createTextNode(Q),Ee.childNodes[0]||null),Bt===et?F.call(te,Et?"html":"body")[0]:Et?te.documentElement:Ee},Ki=function(M){return I.call(M.ownerDocument||M,M,k.SHOW_ELEMENT|k.SHOW_COMMENT|k.SHOW_TEXT|k.SHOW_PROCESSING_INSTRUCTION|k.SHOW_CDATA_SECTION,null)},Jt=function(M){return M instanceof N&&(typeof M.nodeName!="string"||typeof M.textContent!="string"||typeof M.removeChild!="function"||!(M.attributes instanceof A)||typeof M.removeAttribute!="function"||typeof M.setAttribute!="function"||typeof M.namespaceURI!="string"||typeof M.insertBefore!="function"||typeof M.hasChildNodes!="function")},Un=function(M){return typeof c=="function"&&M instanceof c};function Dt(M,te,Q){Qs(M,pe=>{pe.call(t,te,Q,ri)})}let si=function(M){let te=null;if(Dt(W.beforeSanitizeElements,M,null),Jt(M))return gt(M),!0;let Q=Ue(M.nodeName);if(Dt(W.uponSanitizeElement,M,{tagName:Q,allowedTags:ae}),M.hasChildNodes()&&!Un(M.firstElementChild)&&bt(/<[/\w]/g,M.innerHTML)&&bt(/<[/\w]/g,M.textContent)||M.nodeType===xp||ot&&M.nodeType===Lp&&bt(/<[/\w]/g,M.data))return gt(M),!0;if(!ae[Q]||xe[Q]){if(!xe[Q]&&Ji(Q)&&(ne.tagNameCheck instanceof RegExp&&bt(ne.tagNameCheck,Q)||ne.tagNameCheck instanceof Function&&ne.tagNameCheck(Q)))return!1;if($t&&!ii[Q]){let pe=h(M)||M.parentNode,Ee=o(M)||M.childNodes;if(Ee&&pe)for(let he=Ee.length-1;he>=0;--he){let We=b(Ee[he],!0);We.__removalCount=(M.__removalCount||0)+1,pe.insertBefore(We,P(M))}}return gt(M),!0}return M instanceof v&&!function(pe){let Ee=h(pe);Ee&&Ee.tagName||(Ee={namespaceURI:Bt,tagName:"template"});let he=aa(pe.tagName),We=aa(Ee.tagName);return!!Ft[pe.namespaceURI]&&(pe.namespaceURI===Kt?Ee.namespaceURI===et?he==="svg":Ee.namespaceURI===ci?he==="svg"&&(We==="annotation-xml"||St[We]):!!qi[he]:pe.namespaceURI===ci?Ee.namespaceURI===et?he==="math":Ee.namespaceURI===Kt?he==="math"&&Ui[We]:!!zn[he]:pe.namespaceURI===et?!(Ee.namespaceURI===Kt&&!Ui[We])&&!(Ee.namespaceURI===ci&&!St[We])&&!zn[he]&&(Wi[he]||!qi[he]):!(ni!=="application/xhtml+xml"||!Ft[pe.namespaceURI]))}(M)?(gt(M),!0):Q!=="noscript"&&Q!=="noembed"&&Q!=="noframes"||!bt(/<\/no(script|embed|frames)/i,M.innerHTML)?(at&&M.nodeType===Tp&&(te=M.textContent,Qs([q,G,x],pe=>{te=$r(te,pe," ")}),M.textContent!==te&&(Wr(t.removed,{element:M.cloneNode()}),M.textContent=te)),Dt(W.afterSanitizeElements,M,null),!1):(gt(M),!0)},fi=function(M,te,Q){if(cn&&(te==="id"||te==="name")&&(Q in n||Q in $i))return!1;if(!(st&&!je[te]&&bt(U,te))){if(!(He&&bt(z,te))){if(!re[te]||je[te]){if(!(Ji(M)&&(ne.tagNameCheck instanceof RegExp&&bt(ne.tagNameCheck,M)||ne.tagNameCheck instanceof Function&&ne.tagNameCheck(M))&&(ne.attributeNameCheck instanceof RegExp&&bt(ne.attributeNameCheck,te)||ne.attributeNameCheck instanceof Function&&ne.attributeNameCheck(te))||te==="is"&&ne.allowCustomizedBuiltInElements&&(ne.tagNameCheck instanceof RegExp&&bt(ne.tagNameCheck,Q)||ne.tagNameCheck instanceof Function&&ne.tagNameCheck(Q))))return!1}else if(!fn[te]){if(!bt(ie,$r(Q,ee,""))){if((te!=="src"&&te!=="xlink:href"&&te!=="href"||M==="script"||pp(Q,"data:")!==0||!Si[M])&&!(At&&!bt($,$r(Q,ee,"")))){if(Q)return!1}}}}}return!0},Ji=function(M){return M!=="annotation-xml"&&Dd(M,X)},Gi=function(M){Dt(W.beforeSanitizeAttributes,M,null);let{attributes:te}=M;if(!te||Jt(M))return;let Q={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:re,forceKeepAttr:void 0},pe=te.length;for(;pe--;){let Ee=te[pe],{name:he,namespaceURI:We,value:Tt}=Ee,ut=Ue(he),Ye=he==="value"?Tt:gp(Tt);if(Q.attrName=ut,Q.attrValue=Ye,Q.keepAttr=!0,Q.forceKeepAttr=void 0,Dt(W.uponSanitizeAttribute,M,Q),Ye=Q.attrValue,!ei||ut!=="id"&&ut!=="name"||(hi(he,M),Ye="user-content-"+Ye),ot&&bt(/((--!?|])>)|<\/(style|title)/i,Ye)){hi(he,M);continue}if(Q.forceKeepAttr||(hi(he,M),!Q.keepAttr))continue;if(!nt&&bt(/\/>/i,Ye)){hi(he,M);continue}at&&Qs([q,G,x],$n=>{Ye=$r(Ye,$n," ")});let Xi=Ue(M.nodeName);if(fi(Xi,ut,Ye)){if(f&&typeof d=="object"&&typeof d.getAttributeType=="function"&&!We)switch(d.getAttributeType(Xi,ut)){case"TrustedHTML":Ye=f.createHTML(Ye);break;case"TrustedScriptURL":Ye=f.createScriptURL(Ye)}try{We?M.setAttributeNS(We,he,Ye):M.setAttribute(he,Ye),Jt(M)?gt(M):Sd(t.removed)}catch{}}}Dt(W.afterSanitizeAttributes,M,null)},Wn=function M(te){let Q=null,pe=Ki(te);for(Dt(W.beforeSanitizeShadowDOM,te,null);Q=pe.nextNode();)Dt(W.uponSanitizeShadowNode,Q,null),si(Q),Gi(Q),Q.content instanceof a&&M(Q.content);Dt(W.afterSanitizeShadowDOM,te,null)};return t.sanitize=function(M){let te=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},Q=null,pe=null,Ee=null,he=null;if(pt=!M,pt&&(M="<!-->"),typeof M!="string"&&!Un(M)){if(typeof M.toString!="function")throw qr("toString is not a function");if(typeof(M=M.toString())!="string")throw qr("dirty is not a string, aborting")}if(!t.isSupported)return M;if(di||jt(te),t.removed=[],typeof M=="string"&&(Nt=!1),Nt){if(M.nodeName){let ut=Ue(M.nodeName);if(!ae[ut]||xe[ut])throw qr("root node is forbidden and cannot be sanitized in-place")}}else if(M instanceof c)Q=Vn("<!---->"),pe=Q.ownerDocument.importNode(M,!0),pe.nodeType===Dp&&pe.nodeName==="BODY"||pe.nodeName==="HTML"?Q=pe:Q.appendChild(pe);else{if(!Ct&&!at&&!Et&&M.indexOf("<")===-1)return f&&ft?f.createHTML(M):M;if(Q=Vn(M),!Q)return Ct?null:ft?_:""}Q&&Vi&&gt(Q.firstChild);let We=Ki(Nt?M:Q);for(;Ee=We.nextNode();)si(Ee),Gi(Ee),Ee.content instanceof a&&Wn(Ee.content);if(Nt)return M;if(Ct){if(Qt)for(he=L.call(Q.ownerDocument);Q.firstChild;)he.appendChild(Q.firstChild);else he=Q;return(re.shadowroot||re.shadowrootmode)&&(he=K.call(r,he,!0)),he}let Tt=Et?Q.outerHTML:Q.innerHTML;return Et&&ae["!doctype"]&&Q.ownerDocument&&Q.ownerDocument.doctype&&Q.ownerDocument.doctype.name&&bt(cc,Q.ownerDocument.doctype.name)&&(Tt="<!DOCTYPE "+Q.ownerDocument.doctype.name+`>
`+Tt),at&&Qs([q,G,x],ut=>{Tt=$r(Tt,ut," ")}),f&&ft?f.createHTML(Tt):Tt},t.setConfig=function(){jt(arguments.length>0&&arguments[0]!==void 0?arguments[0]:{}),di=!0},t.clearConfig=function(){ri=null,di=!1},t.isValidAttribute=function(M,te,Q){ri||jt({});let pe=Ue(M),Ee=Ue(te);return fi(pe,Ee,Q)},t.addHook=function(M,te){typeof te=="function"&&Wr(W[M],te)},t.removeHook=function(M){return Sd(W[M])},t.removeHooks=function(M){W[M]=[]},t.removeAllHooks=function(){W={afterSanitizeAttributes:[],afterSanitizeElements:[],afterSanitizeShadowDOM:[],beforeSanitizeAttributes:[],beforeSanitizeElements:[],beforeSanitizeShadowDOM:[],uponSanitizeAttribute:[],uponSanitizeElement:[],uponSanitizeShadowNode:[]}},t}();da.addHook("uponSanitizeAttribute",function(i,e){/^data-trix-/.test(e.attrName)&&(e.forceKeepAttr=!0)});var Ip="style href src width height language class".split(" "),Op="javascript:".split(" "),Mp="script iframe form noscript".split(" "),dr=class extends Ge{static setHTML(e,t){let n=new this(t).sanitize(),r=n.getHTML?n.getHTML():n.outerHTML;e.innerHTML=r}static sanitize(e,t){let n=new this(e,t);return n.sanitize(),n}constructor(e){let{allowedAttributes:t,forbiddenProtocols:n,forbiddenElements:r}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.allowedAttributes=t||Ip,this.forbiddenProtocols=n||Op,this.forbiddenElements=r||Mp,this.body=Np(e)}sanitize(){return this.sanitizeElements(),this.normalizeListElementNesting(),da.setConfig(Xd),this.body=da.sanitize(this.body),this.body}getHTML(){return this.body.innerHTML}getBody(){return this.body}sanitizeElements(){let e=oa(this.body),t=[];for(;e.nextNode();){let n=e.currentNode;switch(n.nodeType){case Node.ELEMENT_NODE:this.elementIsRemovable(n)?t.push(n):this.sanitizeElement(n);break;case Node.COMMENT_NODE:t.push(n)}}return t.forEach(n=>un(n)),this.body}sanitizeElement(e){return e.hasAttribute("href")&&this.forbiddenProtocols.includes(e.protocol)&&e.removeAttribute("href"),Array.from(e.attributes).forEach(t=>{let{name:n}=t;this.allowedAttributes.includes(n)||n.indexOf("data-trix")===0||e.removeAttribute(n)}),e}normalizeListElementNesting(){return Array.from(this.body.querySelectorAll("ul,ol")).forEach(e=>{let t=e.previousElementSibling;t&&yt(t)==="li"&&t.appendChild(e)}),this.body}elementIsRemovable(e){if(e?.nodeType===Node.ELEMENT_NODE)return this.elementIsForbidden(e)||this.elementIsntSerializable(e)}elementIsForbidden(e){return this.forbiddenElements.includes(yt(e))}elementIsntSerializable(e){return e.getAttribute("data-trix-serialize")==="false"&&!Pn(e)}},Np=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";i=i.replace(/<\/html[^>]*>[^]*$/i,"</html>");let e=document.implementation.createHTMLDocument("");return e.documentElement.innerHTML=i,Array.from(e.head.querySelectorAll("style")).forEach(t=>{e.body.appendChild(t)}),e.body},{css:sn}=os,is=class extends Hi{constructor(){super(...arguments),this.attachment=this.object,this.attachment.uploadProgressDelegate=this,this.attachmentPiece=this.options.piece}createContentNodes(){return[]}createNodes(){let e,t=e=be({tagName:"figure",className:this.getClassName(),data:this.getData(),editable:!1}),n=this.getHref();return n&&(e=be({tagName:"a",editable:!1,attributes:{href:n,tabindex:-1}}),t.appendChild(e)),this.attachment.hasContent()?dr.setHTML(e,this.attachment.getContent()):this.createContentNodes().forEach(r=>{e.appendChild(r)}),e.appendChild(this.createCaptionElement()),this.attachment.isPending()&&(this.progressElement=be({tagName:"progress",attributes:{class:sn.attachmentProgress,value:this.attachment.getUploadProgress(),max:100},data:{trixMutable:!0,trixStoreKey:["progressElement",this.attachment.id].join("/")}}),t.appendChild(this.progressElement)),[Od("left"),t,Od("right")]}createCaptionElement(){let e=be({tagName:"figcaption",className:sn.attachmentCaption}),t=this.attachmentPiece.getCaption();if(t)e.classList.add("".concat(sn.attachmentCaption,"--edited")),e.textContent=t;else{let n,r,s=this.getCaptionConfig();if(s.name&&(n=this.attachment.getFilename()),s.size&&(r=this.attachment.getFormattedFilesize()),n){let a=be({tagName:"span",className:sn.attachmentName,textContent:n});e.appendChild(a)}if(r){n&&e.appendChild(document.createTextNode(" "));let a=be({tagName:"span",className:sn.attachmentSize,textContent:r});e.appendChild(a)}}return e}getClassName(){let e=[sn.attachment,"".concat(sn.attachment,"--").concat(this.attachment.getType())],t=this.attachment.getExtension();return t&&e.push("".concat(sn.attachment,"--").concat(t)),e.join(" ")}getData(){let e={trixAttachment:JSON.stringify(this.attachment),trixContentType:this.attachment.getContentType(),trixId:this.attachment.id},{attributes:t}=this.attachmentPiece;return t.isEmpty()||(e.trixAttributes=JSON.stringify(t)),this.attachment.isPending()&&(e.trixSerialize=!1),e}getHref(){if(!Bp(this.attachment.getContent(),"a"))return this.attachment.getHref()}getCaptionConfig(){var e;let t=this.attachment.getType(),n=sc((e=wu[t])===null||e===void 0?void 0:e.caption);return t==="file"&&(n.name=!0),n}findProgressElement(){var e;return(e=this.findElement())===null||e===void 0?void 0:e.querySelector("progress")}attachmentDidChangeUploadProgress(){let e=this.attachment.getUploadProgress(),t=this.findProgressElement();t&&(t.value=e)}},Od=i=>be({tagName:"span",textContent:xa,data:{trixCursorTarget:i,trixSerialize:!1}}),Bp=function(i,e){let t=be("div");return dr.setHTML(t,i||""),t.querySelector(e)},ca=class extends is{constructor(){super(...arguments),this.attachment.previewDelegate=this}createContentNodes(){return this.image=be({tagName:"img",attributes:{src:""},data:{trixMutable:!0}}),this.refresh(this.image),[this.image]}createCaptionElement(){let e=super.createCaptionElement(...arguments);return e.textContent||e.setAttribute("data-trix-placeholder",fe.captionPlaceholder),e}refresh(e){var t;if(e||(e=(t=this.findElement())===null||t===void 0?void 0:t.querySelector("img")),e)return this.updateAttributesForImage(e)}updateAttributesForImage(e){let t=this.attachment.getURL(),n=this.attachment.getPreviewURL();if(e.src=n||t,n===t)e.removeAttribute("data-trix-serialized-attributes");else{let u=JSON.stringify({src:t});e.setAttribute("data-trix-serialized-attributes",u)}let r=this.attachment.getWidth(),s=this.attachment.getHeight();r!=null&&(e.width=r),s!=null&&(e.height=s);let a=["imageElement",this.attachment.id,e.src,e.width,e.height].join("/");e.dataset.trixStoreKey=a}attachmentDidChangeAttributes(){return this.refresh(this.image),this.refresh()}},ha=class extends Hi{constructor(){super(...arguments),this.piece=this.object,this.attributes=this.piece.getAttributes(),this.textConfig=this.options.textConfig,this.context=this.options.context,this.piece.attachment?this.attachment=this.piece.attachment:this.string=this.piece.toString()}createNodes(){let e=this.attachment?this.createAttachmentNodes():this.createStringNodes(),t=this.createElement();if(t){let n=function(r){for(;(s=r)!==null&&s!==void 0&&s.firstElementChild;){var s;r=r.firstElementChild}return r}(t);Array.from(e).forEach(r=>{n.appendChild(r)}),e=[t]}return e}createAttachmentNodes(){let e=this.attachment.isPreviewable()?ca:is;return this.createChildView(e,this.piece.attachment,{piece:this.piece}).getNodes()}createStringNodes(){var e;if((e=this.textConfig)!==null&&e!==void 0&&e.plaintext)return[document.createTextNode(this.string)];{let t=[],n=this.string.split(`
`);for(let r=0;r<n.length;r++){let s=n[r];if(r>0){let a=be("br");t.push(a)}if(s.length){let a=document.createTextNode(this.preserveSpaces(s));t.push(a)}}return t}}createElement(){let e,t,n,r={};for(t in this.attributes){n=this.attributes[t];let a=au(t);if(a){if(a.tagName){var s;let u=be(a.tagName);s?(s.appendChild(u),s=u):e=s=u}if(a.styleProperty&&(r[a.styleProperty]=n),a.style)for(t in a.style)n=a.style[t],r[t]=n}}if(Object.keys(r).length)for(t in e||(e=be("span")),r)n=r[t],e.style[t]=n;return e}createContainerElement(){for(let e in this.attributes){let t=this.attributes[e],n=au(e);if(n&&n.groupTagName){let r={};return r[e]=t,be(n.groupTagName,r)}}}preserveSpaces(e){return this.context.isLast&&(e=e.replace(/\ $/,an)),e=e.replace(/(\S)\ {3}(\S)/g,"$1 ".concat(an," $2")).replace(/\ {2}/g,"".concat(an," ")).replace(/\ {2}/g," ".concat(an)),(this.context.isFirst||this.context.followsWhitespace)&&(e=e.replace(/^\ /,an)),e}},fa=class extends Hi{constructor(){super(...arguments),this.text=this.object,this.textConfig=this.options.textConfig}createNodes(){let e=[],t=ts.groupObjects(this.getPieces()),n=t.length-1;for(let s=0;s<t.length;s++){let a=t[s],u={};s===0&&(u.isFirst=!0),s===n&&(u.isLast=!0),Fp(r)&&(u.followsWhitespace=!0);let c=this.findOrCreateCachedChildView(ha,a,{textConfig:this.textConfig,context:u});e.push(...Array.from(c.getNodes()||[]));var r=a}return e}getPieces(){return Array.from(this.text.getPieces()).filter(e=>!e.hasAttribute("blockBreak"))}},Fp=i=>/\s$/.test(i?.toString()),{css:Md}=os,pa=class extends Hi{constructor(){super(...arguments),this.block=this.object,this.attributes=this.block.getAttributes()}createNodes(){let e=[document.createComment("block")];if(this.block.isEmpty())e.push(be("br"));else{var t;let n=(t=Xe(this.block.getLastAttribute()))===null||t===void 0?void 0:t.text,r=this.findOrCreateCachedChildView(fa,this.block.text,{textConfig:n});e.push(...Array.from(r.getNodes()||[])),this.shouldAddExtraNewlineElement()&&e.push(be("br"))}if(this.attributes.length)return e;{let n,{tagName:r}=wt.default;this.block.isRTL()&&(n={dir:"rtl"});let s=be({tagName:r,attributes:n});return e.forEach(a=>s.appendChild(a)),[s]}}createContainerElement(e){let t={},n,r=this.attributes[e],{tagName:s,htmlAttributes:a=[]}=Xe(r);if(e===0&&this.block.isRTL()&&Object.assign(t,{dir:"rtl"}),r==="attachmentGallery"){let u=this.block.getBlockBreakPosition();n="".concat(Md.attachmentGallery," ").concat(Md.attachmentGallery,"--").concat(u)}return Object.entries(this.block.htmlAttributes).forEach(u=>{let[c,v]=u;a.includes(c)&&(t[c]=v)}),be({tagName:s,className:n,attributes:t})}shouldAddExtraNewlineElement(){return/\n\n$/.test(this.block.toString())}},cr=class extends Hi{static render(e){let t=be("div"),n=new this(e,{element:t});return n.render(),n.sync(),t}constructor(){super(...arguments),this.element=this.options.element,this.elementStore=new lu,this.setDocument(this.object)}setDocument(e){e.isEqualTo(this.document)||(this.document=this.object=e)}render(){if(this.childViews=[],this.shadowElement=be("div"),!this.document.isEmpty()){let e=ts.groupObjects(this.document.getBlocks(),{asTree:!0});Array.from(e).forEach(t=>{let n=this.findOrCreateCachedChildView(pa,t);Array.from(n.getNodes()).map(r=>this.shadowElement.appendChild(r))})}}isSynced(){return jp(this.shadowElement,this.element)}sync(){let e=this.createDocumentFragmentForSync();for(;this.element.lastChild;)this.element.removeChild(this.element.lastChild);return this.element.appendChild(e),this.didSync()}didSync(){return this.elementStore.reset(Nd(this.element)),Cu(()=>this.garbageCollectCachedViews())}createDocumentFragmentForSync(){let e=document.createDocumentFragment();return Array.from(this.shadowElement.childNodes).forEach(t=>{e.appendChild(t.cloneNode(!0))}),Array.from(Nd(e)).forEach(t=>{let n=this.elementStore.remove(t);n&&t.parentNode.replaceChild(n,t)}),e}},Nd=i=>i.querySelectorAll("[data-trix-store-key]"),jp=(i,e)=>Bd(i.innerHTML)===Bd(e.innerHTML),Bd=i=>i.replace(/&nbsp;/g," ");function ta(i){var e,t;function n(s,a){try{var u=i[s](a),c=u.value,v=c instanceof Hp;Promise.resolve(v?c.v:c).then(function(k){if(v){var A=s==="return"?"return":"next";if(!c.k||k.done)return n(A,k);k=i[A](k).value}r(u.done?"return":"normal",k)},function(k){n("throw",k)})}catch(k){r("throw",k)}}function r(s,a){switch(s){case"return":e.resolve({value:a,done:!0});break;case"throw":e.reject(a);break;default:e.resolve({value:a,done:!1})}(e=e.next)?n(e.key,e.arg):t=null}this._invoke=function(s,a){return new Promise(function(u,c){var v={key:s,arg:a,resolve:u,reject:c,next:null};t?t=t.next=v:(e=t=v,n(s,a))})},typeof i.return!="function"&&(this.return=void 0)}function Hp(i,e){this.v=i,this.k=e}function Mt(i,e,t){return(e=zp(e))in i?Object.defineProperty(i,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):i[e]=t,i}function zp(i){var e=function(t,n){if(typeof t!="object"||t===null)return t;var r=t[Symbol.toPrimitive];if(r!==void 0){var s=r.call(t,n||"default");if(typeof s!="object")return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return(n==="string"?String:Number)(t)}(i,"string");return typeof e=="symbol"?e:String(e)}ta.prototype[typeof Symbol=="function"&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},ta.prototype.next=function(i){return this._invoke("next",i)},ta.prototype.throw=function(i){return this._invoke("throw",i)},ta.prototype.return=function(i){return this._invoke("return",i)};function Be(i,e){return Vp(i,hc(i,e,"get"))}function Tu(i,e,t){return Up(i,hc(i,e,"set"),t),t}function hc(i,e,t){if(!e.has(i))throw new TypeError("attempted to "+t+" private field on non-instance");return e.get(i)}function Vp(i,e){return e.get?e.get.call(i):e.value}function Up(i,e,t){if(e.set)e.set.call(i,t);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=t}}function ia(i,e,t){if(!e.has(i))throw new TypeError("attempted to get private field on non-instance");return t}function fc(i,e){if(e.has(i))throw new TypeError("Cannot initialize the same private elements twice on an object")}function es(i,e,t){fc(i,e),e.set(i,t)}var zi=class extends ji{static registerType(e,t){t.type=e,this.types[e]=t}static fromJSON(e){let t=this.types[e.type];if(t)return t.fromJSON(e)}constructor(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.attributes=_t.box(t)}copyWithAttributes(e){return new this.constructor(this.getValue(),e)}copyWithAdditionalAttributes(e){return this.copyWithAttributes(this.attributes.merge(e))}copyWithoutAttribute(e){return this.copyWithAttributes(this.attributes.remove(e))}copy(){return this.copyWithAttributes(this.attributes)}getAttribute(e){return this.attributes.get(e)}getAttributesHash(){return this.attributes}getAttributes(){return this.attributes.toObject()}hasAttribute(e){return this.attributes.has(e)}hasSameStringValueAsPiece(e){return e&&this.toString()===e.toString()}hasSameAttributesAsPiece(e){return e&&(this.attributes===e.attributes||this.attributes.isEqualTo(e.attributes))}isBlockBreak(){return!1}isEqualTo(e){return super.isEqualTo(...arguments)||this.hasSameConstructorAs(e)&&this.hasSameStringValueAsPiece(e)&&this.hasSameAttributesAsPiece(e)}isEmpty(){return this.length===0}isSerializable(){return!0}toJSON(){return{type:this.constructor.type,attributes:this.getAttributes()}}contentsForInspection(){return{type:this.constructor.type,attributes:this.attributes.inspect()}}canBeGrouped(){return this.hasAttribute("href")}canBeGroupedWith(e){return this.getAttribute("href")===e.getAttribute("href")}getLength(){return this.length}canBeConsolidatedWith(e){return!1}};Mt(zi,"types",{});var ga=class extends lr{constructor(e){super(...arguments),this.url=e}perform(e){let t=new Image;t.onload=()=>(t.width=this.width=t.naturalWidth,t.height=this.height=t.naturalHeight,e(!0,t)),t.onerror=()=>e(!1),t.src=this.url}},ln=class extends ji{static attachmentForFile(e){let t=new this(this.attributesForFile(e));return t.setFile(e),t}static attributesForFile(e){return new _t({filename:e.name,filesize:e.size,contentType:e.type})}static fromJSON(e){return new this(e)}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};super(e),this.releaseFile=this.releaseFile.bind(this),this.attributes=_t.box(e),this.didChangeAttributes()}getAttribute(e){return this.attributes.get(e)}hasAttribute(e){return this.attributes.has(e)}getAttributes(){return this.attributes.toObject()}setAttributes(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=this.attributes.merge(e);var n,r,s,a;if(!this.attributes.isEqualTo(t))return this.attributes=t,this.didChangeAttributes(),(n=this.previewDelegate)===null||n===void 0||(r=n.attachmentDidChangeAttributes)===null||r===void 0||r.call(n,this),(s=this.delegate)===null||s===void 0||(a=s.attachmentDidChangeAttributes)===null||a===void 0?void 0:a.call(s,this)}didChangeAttributes(){if(this.isPreviewable())return this.preloadURL()}isPending(){return this.file!=null&&!(this.getURL()||this.getHref())}isPreviewable(){return this.attributes.has("previewable")?this.attributes.get("previewable"):ln.previewablePattern.test(this.getContentType())}getType(){return this.hasContent()?"content":this.isPreviewable()?"preview":"file"}getURL(){return this.attributes.get("url")}getHref(){return this.attributes.get("href")}getFilename(){return this.attributes.get("filename")||""}getFilesize(){return this.attributes.get("filesize")}getFormattedFilesize(){let e=this.attributes.get("filesize");return typeof e=="number"?Yd.formatter(e):""}getExtension(){var e;return(e=this.getFilename().match(/\.(\w+)$/))===null||e===void 0?void 0:e[1].toLowerCase()}getContentType(){return this.attributes.get("contentType")}hasContent(){return this.attributes.has("content")}getContent(){return this.attributes.get("content")}getWidth(){return this.attributes.get("width")}getHeight(){return this.attributes.get("height")}getFile(){return this.file}setFile(e){if(this.file=e,this.isPreviewable())return this.preloadFile()}releaseFile(){this.releasePreloadedFile(),this.file=null}getUploadProgress(){return this.uploadProgress!=null?this.uploadProgress:0}setUploadProgress(e){var t,n;if(this.uploadProgress!==e)return this.uploadProgress=e,(t=this.uploadProgressDelegate)===null||t===void 0||(n=t.attachmentDidChangeUploadProgress)===null||n===void 0?void 0:n.call(t,this)}toJSON(){return this.getAttributes()}getCacheKey(){return[super.getCacheKey(...arguments),this.attributes.getCacheKey(),this.getPreviewURL()].join("/")}getPreviewURL(){return this.previewURL||this.preloadingURL}setPreviewURL(e){var t,n,r,s;if(e!==this.getPreviewURL())return this.previewURL=e,(t=this.previewDelegate)===null||t===void 0||(n=t.attachmentDidChangeAttributes)===null||n===void 0||n.call(t,this),(r=this.delegate)===null||r===void 0||(s=r.attachmentDidChangePreviewURL)===null||s===void 0?void 0:s.call(r,this)}preloadURL(){return this.preload(this.getURL(),this.releaseFile)}preloadFile(){if(this.file)return this.fileObjectURL=URL.createObjectURL(this.file),this.preload(this.fileObjectURL)}releasePreloadedFile(){this.fileObjectURL&&(URL.revokeObjectURL(this.fileObjectURL),this.fileObjectURL=null)}preload(e,t){if(e&&e!==this.getPreviewURL())return this.preloadingURL=e,new ga(e).then(n=>{let{width:r,height:s}=n;return this.getWidth()&&this.getHeight()||this.setAttributes({width:r,height:s}),this.preloadingURL=null,this.setPreviewURL(e),t?.()}).catch(()=>(this.preloadingURL=null,t?.()))}};Mt(ln,"previewablePattern",/^image(\/(gif|png|webp|jpe?g)|$)/);var dn=class extends zi{static fromJSON(e){return new this(ln.fromJSON(e.attachment),e.attributes)}constructor(e){super(...arguments),this.attachment=e,this.length=1,this.ensureAttachmentExclusivelyHasAttribute("href"),this.attachment.hasContent()||this.removeProhibitedAttributes()}ensureAttachmentExclusivelyHasAttribute(e){this.hasAttribute(e)&&(this.attachment.hasAttribute(e)||this.attachment.setAttributes(this.attributes.slice([e])),this.attributes=this.attributes.remove(e))}removeProhibitedAttributes(){let e=this.attributes.slice(dn.permittedAttributes);e.isEqualTo(this.attributes)||(this.attributes=e)}getValue(){return this.attachment}isSerializable(){return!this.attachment.isPending()}getCaption(){return this.attributes.get("caption")||""}isEqualTo(e){var t;return super.isEqualTo(e)&&this.attachment.id===(e==null||(t=e.attachment)===null||t===void 0?void 0:t.id)}toString(){return"\uFFFC"}toJSON(){let e=super.toJSON(...arguments);return e.attachment=this.attachment,e}getCacheKey(){return[super.getCacheKey(...arguments),this.attachment.getCacheKey()].join("/")}toConsole(){return JSON.stringify(this.toString())}};Mt(dn,"permittedAttributes",["caption","presentation"]),zi.registerType("attachment",dn);var ns=class extends zi{static fromJSON(e){return new this(e.string,e.attributes)}constructor(e){super(...arguments),this.string=(t=>t.replace(/\r\n?/g,`
`))(e),this.length=this.string.length}getValue(){return this.string}toString(){return this.string.toString()}isBlockBreak(){return this.toString()===`
`&&this.getAttribute("blockBreak")===!0}toJSON(){let e=super.toJSON(...arguments);return e.string=this.string,e}canBeConsolidatedWith(e){return e&&this.hasSameConstructorAs(e)&&this.hasSameAttributesAsPiece(e)}consolidateWith(e){return new this.constructor(this.toString()+e.toString(),this.attributes)}splitAtOffset(e){let t,n;return e===0?(t=null,n=this):e===this.length?(t=this,n=null):(t=new this.constructor(this.string.slice(0,e),this.attributes),n=new this.constructor(this.string.slice(e),this.attributes)),[t,n]}toConsole(){let{string:e}=this;return e.length>15&&(e=e.slice(0,14)+"\u2026"),JSON.stringify(e.toString())}};zi.registerType("string",ns);var hr=class extends ji{static box(e){return e instanceof this?e:new this(e)}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),this.objects=e.slice(0),this.length=this.objects.length}indexOf(e){return this.objects.indexOf(e)}splice(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return new this.constructor(Eu(this.objects,...t))}eachObject(e){return this.objects.map((t,n)=>e(t,n))}insertObjectAtIndex(e,t){return this.splice(t,0,e)}insertSplittableListAtIndex(e,t){return this.splice(t,0,...e.objects)}insertSplittableListAtPosition(e,t){let[n,r]=this.splitObjectAtPosition(t);return new this.constructor(n).insertSplittableListAtIndex(e,r)}editObjectAtIndex(e,t){return this.replaceObjectAtIndex(t(this.objects[e]),e)}replaceObjectAtIndex(e,t){return this.splice(t,1,e)}removeObjectAtIndex(e){return this.splice(e,1)}getObjectAtIndex(e){return this.objects[e]}getSplittableListInRange(e){let[t,n,r]=this.splitObjectsAtRange(e);return new this.constructor(t.slice(n,r+1))}selectSplittableList(e){let t=this.objects.filter(n=>e(n));return new this.constructor(t)}removeObjectsInRange(e){let[t,n,r]=this.splitObjectsAtRange(e);return new this.constructor(t).splice(n,r-n+1)}transformObjectsInRange(e,t){let[n,r,s]=this.splitObjectsAtRange(e),a=n.map((u,c)=>r<=c&&c<=s?t(u):u);return new this.constructor(a)}splitObjectsAtRange(e){let t,[n,r,s]=this.splitObjectAtPosition($p(e));return[n,t]=new this.constructor(n).splitObjectAtPosition(qp(e)+s),[n,r,t-1]}getObjectAtPosition(e){let{index:t}=this.findIndexAndOffsetAtPosition(e);return this.objects[t]}splitObjectAtPosition(e){let t,n,{index:r,offset:s}=this.findIndexAndOffsetAtPosition(e),a=this.objects.slice(0);if(r!=null)if(s===0)t=r,n=0;else{let u=this.getObjectAtIndex(r),[c,v]=u.splitAtOffset(s);a.splice(r,1,c,v),t=r+1,n=c.getLength()-s}else t=a.length,n=0;return[a,t,n]}consolidate(){let e=[],t=this.objects[0];return this.objects.slice(1).forEach(n=>{var r,s;(r=(s=t).canBeConsolidatedWith)!==null&&r!==void 0&&r.call(s,n)?t=t.consolidateWith(n):(e.push(t),t=n)}),t&&e.push(t),new this.constructor(e)}consolidateFromIndexToIndex(e,t){let n=this.objects.slice(0).slice(e,t+1),r=new this.constructor(n).consolidate().toArray();return this.splice(e,n.length,...r)}findIndexAndOffsetAtPosition(e){let t,n=0;for(t=0;t<this.objects.length;t++){let r=n+this.objects[t].getLength();if(n<=e&&e<r)return{index:t,offset:e-n};n=r}return{index:null,offset:null}}findPositionAtIndexAndOffset(e,t){let n=0;for(let r=0;r<this.objects.length;r++){let s=this.objects[r];if(r<e)n+=s.getLength();else if(r===e){n+=t;break}}return n}getEndPosition(){return this.endPosition==null&&(this.endPosition=0,this.objects.forEach(e=>this.endPosition+=e.getLength())),this.endPosition}toString(){return this.objects.join("")}toArray(){return this.objects.slice(0)}toJSON(){return this.toArray()}isEqualTo(e){return super.isEqualTo(...arguments)||Wp(this.objects,e?.objects)}contentsForInspection(){return{objects:"[".concat(this.objects.map(e=>e.inspect()).join(", "),"]")}}},Wp=function(i){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];if(i.length!==e.length)return!1;let t=!0;for(let n=0;n<i.length;n++){let r=i[n];t&&!r.isEqualTo(e[n])&&(t=!1)}return t},$p=i=>i[0],qp=i=>i[1],Ut=class extends ji{static textForAttachmentWithAttributes(e,t){return new this([new dn(e,t)])}static textForStringWithAttributes(e,t){return new this([new ns(e,t)])}static fromJSON(e){return new this(Array.from(e).map(t=>zi.fromJSON(t)))}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments);let t=e.filter(n=>!n.isEmpty());this.pieceList=new hr(t)}copy(){return this.copyWithPieceList(this.pieceList)}copyWithPieceList(e){return new this.constructor(e.consolidate().toArray())}copyUsingObjectMap(e){let t=this.getPieces().map(n=>e.find(n)||n);return new this.constructor(t)}appendText(e){return this.insertTextAtPosition(e,this.getLength())}insertTextAtPosition(e,t){return this.copyWithPieceList(this.pieceList.insertSplittableListAtPosition(e.pieceList,t))}removeTextAtRange(e){return this.copyWithPieceList(this.pieceList.removeObjectsInRange(e))}replaceTextAtRange(e,t){return this.removeTextAtRange(t).insertTextAtPosition(e,t[0])}moveTextFromRangeToPosition(e,t){if(e[0]<=t&&t<=e[1])return;let n=this.getTextAtRange(e),r=n.getLength();return e[0]<t&&(t-=r),this.removeTextAtRange(e).insertTextAtPosition(n,t)}addAttributeAtRange(e,t,n){let r={};return r[e]=t,this.addAttributesAtRange(r,n)}addAttributesAtRange(e,t){return this.copyWithPieceList(this.pieceList.transformObjectsInRange(t,n=>n.copyWithAdditionalAttributes(e)))}removeAttributeAtRange(e,t){return this.copyWithPieceList(this.pieceList.transformObjectsInRange(t,n=>n.copyWithoutAttribute(e)))}setAttributesAtRange(e,t){return this.copyWithPieceList(this.pieceList.transformObjectsInRange(t,n=>n.copyWithAttributes(e)))}getAttributesAtPosition(e){var t;return((t=this.pieceList.getObjectAtPosition(e))===null||t===void 0?void 0:t.getAttributes())||{}}getCommonAttributes(){let e=Array.from(this.pieceList.toArray()).map(t=>t.getAttributes());return _t.fromCommonAttributesOfObjects(e).toObject()}getCommonAttributesAtRange(e){return this.getTextAtRange(e).getCommonAttributes()||{}}getExpandedRangeForAttributeAtOffset(e,t){let n,r=n=t,s=this.getLength();for(;r>0&&this.getCommonAttributesAtRange([r-1,n])[e];)r--;for(;n<s&&this.getCommonAttributesAtRange([t,n+1])[e];)n++;return[r,n]}getTextAtRange(e){return this.copyWithPieceList(this.pieceList.getSplittableListInRange(e))}getStringAtRange(e){return this.pieceList.getSplittableListInRange(e).toString()}getStringAtPosition(e){return this.getStringAtRange([e,e+1])}startsWithString(e){return this.getStringAtRange([0,e.length])===e}endsWithString(e){let t=this.getLength();return this.getStringAtRange([t-e.length,t])===e}getAttachmentPieces(){return this.pieceList.toArray().filter(e=>!!e.attachment)}getAttachments(){return this.getAttachmentPieces().map(e=>e.attachment)}getAttachmentAndPositionById(e){let t=0;for(let r of this.pieceList.toArray()){var n;if(((n=r.attachment)===null||n===void 0?void 0:n.id)===e)return{attachment:r.attachment,position:t};t+=r.length}return{attachment:null,position:null}}getAttachmentById(e){let{attachment:t}=this.getAttachmentAndPositionById(e);return t}getRangeOfAttachment(e){let t=this.getAttachmentAndPositionById(e.id),n=t.position;if(e=t.attachment)return[n,n+1]}updateAttributesForAttachment(e,t){let n=this.getRangeOfAttachment(t);return n?this.addAttributesAtRange(e,n):this}getLength(){return this.pieceList.getEndPosition()}isEmpty(){return this.getLength()===0}isEqualTo(e){var t;return super.isEqualTo(e)||(e==null||(t=e.pieceList)===null||t===void 0?void 0:t.isEqualTo(this.pieceList))}isBlockBreak(){return this.getLength()===1&&this.pieceList.getObjectAtIndex(0).isBlockBreak()}eachPiece(e){return this.pieceList.eachObject(e)}getPieces(){return this.pieceList.toArray()}getPieceAtPosition(e){return this.pieceList.getObjectAtPosition(e)}contentsForInspection(){return{pieceList:this.pieceList.inspect()}}toSerializableText(){let e=this.pieceList.selectSplittableList(t=>t.isSerializable());return this.copyWithPieceList(e)}toString(){return this.pieceList.toString()}toJSON(){return this.pieceList.toJSON()}toConsole(){return JSON.stringify(this.pieceList.toArray().map(e=>JSON.parse(e.toConsole())))}getDirection(){return ip(this.toString())}isRTL(){return this.getDirection()==="rtl"}},Yt=class extends ji{static fromJSON(e){return new this(Ut.fromJSON(e.text),e.attributes,e.htmlAttributes)}constructor(e,t,n){super(...arguments),this.text=Kp(e||new Ut),this.attributes=t||[],this.htmlAttributes=n||{}}isEmpty(){return this.text.isBlockBreak()}isEqualTo(e){return!!super.isEqualTo(e)||this.text.isEqualTo(e?.text)&&Bn(this.attributes,e?.attributes)&&pr(this.htmlAttributes,e?.htmlAttributes)}copyWithText(e){return new Yt(e,this.attributes,this.htmlAttributes)}copyWithoutText(){return this.copyWithText(null)}copyWithAttributes(e){return new Yt(this.text,e,this.htmlAttributes)}copyWithoutAttributes(){return this.copyWithAttributes(null)}copyUsingObjectMap(e){let t=e.find(this.text);return t?this.copyWithText(t):this.copyWithText(this.text.copyUsingObjectMap(e))}addAttribute(e){let t=this.attributes.concat(Fd(e));return this.copyWithAttributes(t)}addHTMLAttribute(e,t){let n=Object.assign({},this.htmlAttributes,{[e]:t});return new Yt(this.text,this.attributes,n)}removeAttribute(e){let{listAttribute:t}=Xe(e),n=Hd(Hd(this.attributes,e),t);return this.copyWithAttributes(n)}removeLastAttribute(){return this.removeAttribute(this.getLastAttribute())}getLastAttribute(){return jd(this.attributes)}getAttributes(){return this.attributes.slice(0)}getAttributeLevel(){return this.attributes.length}getAttributeAtLevel(e){return this.attributes[e-1]}hasAttribute(e){return this.attributes.includes(e)}hasAttributes(){return this.getAttributeLevel()>0}getLastNestableAttribute(){return jd(this.getNestableAttributes())}getNestableAttributes(){return this.attributes.filter(e=>Xe(e).nestable)}getNestingLevel(){return this.getNestableAttributes().length}decreaseNestingLevel(){let e=this.getLastNestableAttribute();return e?this.removeAttribute(e):this}increaseNestingLevel(){let e=this.getLastNestableAttribute();if(e){let t=this.attributes.lastIndexOf(e),n=Eu(this.attributes,t+1,0,...Fd(e));return this.copyWithAttributes(n)}return this}getListItemAttributes(){return this.attributes.filter(e=>Xe(e).listAttribute)}isListItem(){var e;return(e=Xe(this.getLastAttribute()))===null||e===void 0?void 0:e.listAttribute}isTerminalBlock(){var e;return(e=Xe(this.getLastAttribute()))===null||e===void 0?void 0:e.terminal}breaksOnReturn(){var e;return(e=Xe(this.getLastAttribute()))===null||e===void 0?void 0:e.breakOnReturn}findLineBreakInDirectionFromPosition(e,t){let n=this.toString(),r;switch(e){case"forward":r=n.indexOf(`
`,t);break;case"backward":r=n.slice(0,t).lastIndexOf(`
`)}if(r!==-1)return r}contentsForInspection(){return{text:this.text.inspect(),attributes:this.attributes}}toString(){return this.text.toString()}toJSON(){return{text:this.text,attributes:this.attributes,htmlAttributes:this.htmlAttributes}}getDirection(){return this.text.getDirection()}isRTL(){return this.text.isRTL()}getLength(){return this.text.getLength()}canBeConsolidatedWith(e){return!this.hasAttributes()&&!e.hasAttributes()&&this.getDirection()===e.getDirection()}consolidateWith(e){let t=Ut.textForStringWithAttributes(`
`),n=this.getTextWithoutBlockBreak().appendText(t);return this.copyWithText(n.appendText(e.text))}splitAtOffset(e){let t,n;return e===0?(t=null,n=this):e===this.getLength()?(t=this,n=null):(t=this.copyWithText(this.text.getTextAtRange([0,e])),n=this.copyWithText(this.text.getTextAtRange([e,this.getLength()]))),[t,n]}getBlockBreakPosition(){return this.text.getLength()-1}getTextWithoutBlockBreak(){return pc(this.text)?this.text.getTextAtRange([0,this.getBlockBreakPosition()]):this.text.copy()}canBeGrouped(e){return this.attributes[e]}canBeGroupedWith(e,t){let n=e.getAttributes(),r=n[t],s=this.attributes[t];return s===r&&!(Xe(s).group===!1&&!(()=>{if(!Zs){Zs=[];for(let a in wt){let{listAttribute:u}=wt[a];u!=null&&Zs.push(u)}}return Zs})().includes(n[t+1]))&&(this.getDirection()===e.getDirection()||e.isEmpty())}},Kp=function(i){return i=Jp(i),i=Xp(i)},Jp=function(i){let e=!1,t=i.getPieces(),n=t.slice(0,t.length-1),r=t[t.length-1];return r?(n=n.map(s=>s.isBlockBreak()?(e=!0,Yp(s)):s),e?new Ut([...n,r]):i):i},Gp=Ut.textForStringWithAttributes(`
`,{blockBreak:!0}),Xp=function(i){return pc(i)?i:i.appendText(Gp)},pc=function(i){let e=i.getLength();return e===0?!1:i.getTextAtRange([e-1,e]).isBlockBreak()},Yp=i=>i.copyWithoutAttribute("blockBreak"),Fd=function(i){let{listAttribute:e}=Xe(i);return e?[e,i]:[i]},jd=i=>i.slice(-1)[0],Hd=function(i,e){let t=i.lastIndexOf(e);return t===-1?i:Eu(i,t,1)},Ot=class extends ji{static fromJSON(e){return new this(Array.from(e).map(t=>Yt.fromJSON(t)))}static fromString(e,t){let n=Ut.textForStringWithAttributes(e,t);return new this([new Yt(n)])}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),e.length===0&&(e=[new Yt]),this.blockList=hr.box(e)}isEmpty(){let e=this.getBlockAtIndex(0);return this.blockList.length===1&&e.isEmpty()&&!e.hasAttributes()}copy(){let e=(arguments.length>0&&arguments[0]!==void 0?arguments[0]:{}).consolidateBlocks?this.blockList.consolidate().toArray():this.blockList.toArray();return new this.constructor(e)}copyUsingObjectsFromDocument(e){let t=new uu(e.getObjects());return this.copyUsingObjectMap(t)}copyUsingObjectMap(e){let t=this.getBlocks().map(n=>e.find(n)||n.copyUsingObjectMap(e));return new this.constructor(t)}copyWithBaseBlockAttributes(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],t=this.getBlocks().map(n=>{let r=e.concat(n.getAttributes());return n.copyWithAttributes(r)});return new this.constructor(t)}replaceBlock(e,t){let n=this.blockList.indexOf(e);return n===-1?this:new this.constructor(this.blockList.replaceObjectAtIndex(t,n))}insertDocumentAtRange(e,t){let{blockList:n}=e;t=Ie(t);let[r]=t,{index:s,offset:a}=this.locationFromPosition(r),u=this,c=this.getBlockAtPosition(r);return Fi(t)&&c.isEmpty()&&!c.hasAttributes()?u=new this.constructor(u.blockList.removeObjectAtIndex(s)):c.getBlockBreakPosition()===a&&r++,u=u.removeTextAtRange(t),new this.constructor(u.blockList.insertSplittableListAtPosition(n,r))}mergeDocumentAtRange(e,t){let n,r;t=Ie(t);let[s]=t,a=this.locationFromPosition(s),u=this.getBlockAtIndex(a.index).getAttributes(),c=e.getBaseBlockAttributes(),v=u.slice(-c.length);if(Bn(c,v)){let N=u.slice(0,-c.length);n=e.copyWithBaseBlockAttributes(N)}else n=e.copy({consolidateBlocks:!0}).copyWithBaseBlockAttributes(u);let k=n.getBlockCount(),A=n.getBlockAtIndex(0);if(Bn(u,A.getAttributes())){let N=A.getTextWithoutBlockBreak();if(r=this.insertTextAtRange(N,t),k>1){n=new this.constructor(n.getBlocks().slice(1));let y=s+N.getLength();r=r.insertDocumentAtRange(n,y)}}else r=this.insertDocumentAtRange(n,t);return r}insertTextAtRange(e,t){t=Ie(t);let[n]=t,{index:r,offset:s}=this.locationFromPosition(n),a=this.removeTextAtRange(t);return new this.constructor(a.blockList.editObjectAtIndex(r,u=>u.copyWithText(u.text.insertTextAtPosition(e,s))))}removeTextAtRange(e){let t;e=Ie(e);let[n,r]=e;if(Fi(e))return this;let[s,a]=Array.from(this.locationRangeFromRange(e)),u=s.index,c=s.offset,v=this.getBlockAtIndex(u),k=a.index,A=a.offset,N=this.getBlockAtIndex(k);if(r-n==1&&v.getBlockBreakPosition()===c&&N.getBlockBreakPosition()!==A&&N.text.getStringAtPosition(A)===`
`)t=this.blockList.editObjectAtIndex(k,y=>y.copyWithText(y.text.removeTextAtRange([A,A+1])));else{let y,d=v.text.getTextAtRange([0,c]),g=N.text.getTextAtRange([A,N.getLength()]),b=d.appendText(g);y=u!==k&&c===0&&v.getAttributeLevel()>=N.getAttributeLevel()?N.copyWithText(b):v.copyWithText(b);let E=k+1-u;t=this.blockList.splice(u,E,y)}return new this.constructor(t)}moveTextFromRangeToPosition(e,t){let n;e=Ie(e);let[r,s]=e;if(r<=t&&t<=s)return this;let a=this.getDocumentAtRange(e),u=this.removeTextAtRange(e),c=r<t;c&&(t-=a.getLength());let[v,...k]=a.getBlocks();return k.length===0?(n=v.getTextWithoutBlockBreak(),c&&(t+=1)):n=v.text,u=u.insertTextAtRange(n,t),k.length===0?u:(a=new this.constructor(k),t+=n.getLength(),u.insertDocumentAtRange(a,t))}addAttributeAtRange(e,t,n){let{blockList:r}=this;return this.eachBlockAtRange(n,(s,a,u)=>r=r.editObjectAtIndex(u,function(){return Xe(e)?s.addAttribute(e,t):a[0]===a[1]?s:s.copyWithText(s.text.addAttributeAtRange(e,t,a))})),new this.constructor(r)}addAttribute(e,t){let{blockList:n}=this;return this.eachBlock((r,s)=>n=n.editObjectAtIndex(s,()=>r.addAttribute(e,t))),new this.constructor(n)}removeAttributeAtRange(e,t){let{blockList:n}=this;return this.eachBlockAtRange(t,function(r,s,a){Xe(e)?n=n.editObjectAtIndex(a,()=>r.removeAttribute(e)):s[0]!==s[1]&&(n=n.editObjectAtIndex(a,()=>r.copyWithText(r.text.removeAttributeAtRange(e,s))))}),new this.constructor(n)}updateAttributesForAttachment(e,t){let n=this.getRangeOfAttachment(t),[r]=Array.from(n),{index:s}=this.locationFromPosition(r),a=this.getTextAtIndex(s);return new this.constructor(this.blockList.editObjectAtIndex(s,u=>u.copyWithText(a.updateAttributesForAttachment(e,t))))}removeAttributeForAttachment(e,t){let n=this.getRangeOfAttachment(t);return this.removeAttributeAtRange(e,n)}setHTMLAttributeAtPosition(e,t,n){let r=this.getBlockAtPosition(e),s=r.addHTMLAttribute(t,n);return this.replaceBlock(r,s)}insertBlockBreakAtRange(e){let t;e=Ie(e);let[n]=e,{offset:r}=this.locationFromPosition(n),s=this.removeTextAtRange(e);return r===0&&(t=[new Yt]),new this.constructor(s.blockList.insertSplittableListAtPosition(new hr(t),n))}applyBlockAttributeAtRange(e,t,n){let r=this.expandRangeToLineBreaksAndSplitBlocks(n),s=r.document;n=r.range;let a=Xe(e);if(a.listAttribute){s=s.removeLastListAttributeAtRange(n,{exceptAttributeName:e});let u=s.convertLineBreaksToBlockBreaksInRange(n);s=u.document,n=u.range}else s=a.exclusive?s.removeBlockAttributesAtRange(n):a.terminal?s.removeLastTerminalAttributeAtRange(n):s.consolidateBlocksAtRange(n);return s.addAttributeAtRange(e,t,n)}removeLastListAttributeAtRange(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},{blockList:n}=this;return this.eachBlockAtRange(e,function(r,s,a){let u=r.getLastAttribute();u&&Xe(u).listAttribute&&u!==t.exceptAttributeName&&(n=n.editObjectAtIndex(a,()=>r.removeAttribute(u)))}),new this.constructor(n)}removeLastTerminalAttributeAtRange(e){let{blockList:t}=this;return this.eachBlockAtRange(e,function(n,r,s){let a=n.getLastAttribute();a&&Xe(a).terminal&&(t=t.editObjectAtIndex(s,()=>n.removeAttribute(a)))}),new this.constructor(t)}removeBlockAttributesAtRange(e){let{blockList:t}=this;return this.eachBlockAtRange(e,function(n,r,s){n.hasAttributes()&&(t=t.editObjectAtIndex(s,()=>n.copyWithoutAttributes()))}),new this.constructor(t)}expandRangeToLineBreaksAndSplitBlocks(e){let t;e=Ie(e);let[n,r]=e,s=this.locationFromPosition(n),a=this.locationFromPosition(r),u=this,c=u.getBlockAtIndex(s.index);if(s.offset=c.findLineBreakInDirectionFromPosition("backward",s.offset),s.offset!=null&&(t=u.positionFromLocation(s),u=u.insertBlockBreakAtRange([t,t+1]),a.index+=1,a.offset-=u.getBlockAtIndex(s.index).getLength(),s.index+=1),s.offset=0,a.offset===0&&a.index>s.index)a.index-=1,a.offset=u.getBlockAtIndex(a.index).getBlockBreakPosition();else{let v=u.getBlockAtIndex(a.index);v.text.getStringAtRange([a.offset-1,a.offset])===`
`?a.offset-=1:a.offset=v.findLineBreakInDirectionFromPosition("forward",a.offset),a.offset!==v.getBlockBreakPosition()&&(t=u.positionFromLocation(a),u=u.insertBlockBreakAtRange([t,t+1]))}return n=u.positionFromLocation(s),r=u.positionFromLocation(a),{document:u,range:e=Ie([n,r])}}convertLineBreaksToBlockBreaksInRange(e){e=Ie(e);let[t]=e,n=this.getStringAtRange(e).slice(0,-1),r=this;return n.replace(/.*?\n/g,function(s){t+=s.length,r=r.insertBlockBreakAtRange([t-1,t])}),{document:r,range:e}}consolidateBlocksAtRange(e){e=Ie(e);let[t,n]=e,r=this.locationFromPosition(t).index,s=this.locationFromPosition(n).index;return new this.constructor(this.blockList.consolidateFromIndexToIndex(r,s))}getDocumentAtRange(e){e=Ie(e);let t=this.blockList.getSplittableListInRange(e).toArray();return new this.constructor(t)}getStringAtRange(e){let t,n=e=Ie(e);return n[n.length-1]!==this.getLength()&&(t=-1),this.getDocumentAtRange(e).toString().slice(0,t)}getBlockAtIndex(e){return this.blockList.getObjectAtIndex(e)}getBlockAtPosition(e){let{index:t}=this.locationFromPosition(e);return this.getBlockAtIndex(t)}getTextAtIndex(e){var t;return(t=this.getBlockAtIndex(e))===null||t===void 0?void 0:t.text}getTextAtPosition(e){let{index:t}=this.locationFromPosition(e);return this.getTextAtIndex(t)}getPieceAtPosition(e){let{index:t,offset:n}=this.locationFromPosition(e);return this.getTextAtIndex(t).getPieceAtPosition(n)}getCharacterAtPosition(e){let{index:t,offset:n}=this.locationFromPosition(e);return this.getTextAtIndex(t).getStringAtRange([n,n+1])}getLength(){return this.blockList.getEndPosition()}getBlocks(){return this.blockList.toArray()}getBlockCount(){return this.blockList.length}getEditCount(){return this.editCount}eachBlock(e){return this.blockList.eachObject(e)}eachBlockAtRange(e,t){let n,r;e=Ie(e);let[s,a]=e,u=this.locationFromPosition(s),c=this.locationFromPosition(a);if(u.index===c.index)return n=this.getBlockAtIndex(u.index),r=[u.offset,c.offset],t(n,r,u.index);for(let v=u.index;v<=c.index;v++)if(n=this.getBlockAtIndex(v),n){switch(v){case u.index:r=[u.offset,n.text.getLength()];break;case c.index:r=[0,c.offset];break;default:r=[0,n.text.getLength()]}t(n,r,v)}}getCommonAttributesAtRange(e){e=Ie(e);let[t]=e;if(Fi(e))return this.getCommonAttributesAtPosition(t);{let n=[],r=[];return this.eachBlockAtRange(e,function(s,a){if(a[0]!==a[1])return n.push(s.text.getCommonAttributesAtRange(a)),r.push(zd(s))}),_t.fromCommonAttributesOfObjects(n).merge(_t.fromCommonAttributesOfObjects(r)).toObject()}}getCommonAttributesAtPosition(e){let t,n,{index:r,offset:s}=this.locationFromPosition(e),a=this.getBlockAtIndex(r);if(!a)return{};let u=zd(a),c=a.text.getAttributesAtPosition(s),v=a.text.getAttributesAtPosition(s-1),k=Object.keys(Mn).filter(A=>Mn[A].inheritable);for(t in v)n=v[t],(n===c[t]||k.includes(t))&&(u[t]=n);return u}getRangeOfCommonAttributeAtPosition(e,t){let{index:n,offset:r}=this.locationFromPosition(t),s=this.getTextAtIndex(n),[a,u]=Array.from(s.getExpandedRangeForAttributeAtOffset(e,r)),c=this.positionFromLocation({index:n,offset:a}),v=this.positionFromLocation({index:n,offset:u});return Ie([c,v])}getBaseBlockAttributes(){let e=this.getBlockAtIndex(0).getAttributes();for(let t=1;t<this.getBlockCount();t++){let n=this.getBlockAtIndex(t).getAttributes(),r=Math.min(e.length,n.length);e=(()=>{let s=[];for(let a=0;a<r&&n[a]===e[a];a++)s.push(n[a]);return s})()}return e}getAttachmentById(e){for(let t of this.getAttachments())if(t.id===e)return t}getAttachmentPieces(){let e=[];return this.blockList.eachObject(t=>{let{text:n}=t;return e=e.concat(n.getAttachmentPieces())}),e}getAttachments(){return this.getAttachmentPieces().map(e=>e.attachment)}getRangeOfAttachment(e){let t=0,n=this.blockList.toArray();for(let r=0;r<n.length;r++){let{text:s}=n[r],a=s.getRangeOfAttachment(e);if(a)return Ie([t+a[0],t+a[1]]);t+=s.getLength()}}getLocationRangeOfAttachment(e){let t=this.getRangeOfAttachment(e);return this.locationRangeFromRange(t)}getAttachmentPieceForAttachment(e){for(let t of this.getAttachmentPieces())if(t.attachment===e)return t}findRangesForBlockAttribute(e){let t=0,n=[];return this.getBlocks().forEach(r=>{let s=r.getLength();r.hasAttribute(e)&&n.push([t,t+s]),t+=s}),n}findRangesForTextAttribute(e){let{withValue:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=0,r=[],s=[];return this.getPieces().forEach(a=>{let u=a.getLength();(function(c){return t?c.getAttribute(e)===t:c.hasAttribute(e)})(a)&&(r[1]===n?r[1]=n+u:s.push(r=[n,n+u])),n+=u}),s}locationFromPosition(e){let t=this.blockList.findIndexAndOffsetAtPosition(Math.max(0,e));if(t.index!=null)return t;{let n=this.getBlocks();return{index:n.length-1,offset:n[n.length-1].getLength()}}}positionFromLocation(e){return this.blockList.findPositionAtIndexAndOffset(e.index,e.offset)}locationRangeFromPosition(e){return Ie(this.locationFromPosition(e))}locationRangeFromRange(e){if(!(e=Ie(e)))return;let[t,n]=Array.from(e),r=this.locationFromPosition(t),s=this.locationFromPosition(n);return Ie([r,s])}rangeFromLocationRange(e){let t;e=Ie(e);let n=this.positionFromLocation(e[0]);return Fi(e)||(t=this.positionFromLocation(e[1])),Ie([n,t])}isEqualTo(e){return this.blockList.isEqualTo(e?.blockList)}getTexts(){return this.getBlocks().map(e=>e.text)}getPieces(){let e=[];return Array.from(this.getTexts()).forEach(t=>{e.push(...Array.from(t.getPieces()||[]))}),e}getObjects(){return this.getBlocks().concat(this.getTexts()).concat(this.getPieces())}toSerializableDocument(){let e=[];return this.blockList.eachObject(t=>e.push(t.copyWithText(t.text.toSerializableText()))),new this.constructor(e)}toString(){return this.blockList.toString()}toJSON(){return this.blockList.toJSON()}toConsole(){return JSON.stringify(this.blockList.toArray().map(e=>JSON.parse(e.text.toConsole())))}},zd=function(i){let e={},t=i.getLastAttribute();return t&&(e[t]=!0),e},$o=function(i){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return{string:i=Gr(i),attributes:e,type:"string"}},Vd=(i,e)=>{try{return JSON.parse(i.getAttribute("data-trix-".concat(e)))}catch{return{}}},jn=class extends Ge{static parse(e,t){let n=new this(e,t);return n.parse(),n}constructor(e){let{referenceElement:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.html=e,this.referenceElement=t,this.blocks=[],this.blockElements=[],this.processedElements=[]}getDocument(){return Ot.fromJSON(this.blocks)}parse(){try{this.createHiddenContainer(),dr.setHTML(this.containerElement,this.html);let e=oa(this.containerElement,{usingFilter:Qp});for(;e.nextNode();)this.processNode(e.currentNode);return this.translateBlockElementMarginsToNewlines()}finally{this.removeHiddenContainer()}}createHiddenContainer(){return this.referenceElement?(this.containerElement=this.referenceElement.cloneNode(!1),this.containerElement.removeAttribute("id"),this.containerElement.setAttribute("data-trix-internal",""),this.containerElement.style.display="none",this.referenceElement.parentNode.insertBefore(this.containerElement,this.referenceElement.nextSibling)):(this.containerElement=be({tagName:"div",style:{display:"none"}}),document.body.appendChild(this.containerElement))}removeHiddenContainer(){return un(this.containerElement)}processNode(e){switch(e.nodeType){case Node.TEXT_NODE:if(!this.isInsignificantTextNode(e))return this.appendBlockForTextNode(e),this.processTextNode(e);break;case Node.ELEMENT_NODE:return this.appendBlockForElement(e),this.processElement(e)}}appendBlockForTextNode(e){let t=e.parentNode;if(t===this.currentBlockElement&&this.isBlockElement(e.previousSibling))return this.appendStringWithAttributes(`
`);if(t===this.containerElement||this.isBlockElement(t)){var n;let r=this.getBlockAttributes(t),s=this.getBlockHTMLAttributes(t);Bn(r,(n=this.currentBlock)===null||n===void 0?void 0:n.attributes)||(this.currentBlock=this.appendBlockForAttributesWithElement(r,t,s),this.currentBlockElement=t)}}appendBlockForElement(e){let t=this.isBlockElement(e),n=Ln(this.currentBlockElement,e);if(t&&!this.isBlockElement(e.firstChild)){if(!this.isInsignificantTextNode(e.firstChild)||!this.isBlockElement(e.firstElementChild)){let r=this.getBlockAttributes(e),s=this.getBlockHTMLAttributes(e);if(e.firstChild){if(n&&Bn(r,this.currentBlock.attributes))return this.appendStringWithAttributes(`
`);this.currentBlock=this.appendBlockForAttributesWithElement(r,e,s),this.currentBlockElement=e}}}else if(this.currentBlockElement&&!n&&!t){let r=this.findParentBlockElement(e);if(r)return this.appendBlockForElement(r);this.currentBlock=this.appendEmptyBlock(),this.currentBlockElement=null}}findParentBlockElement(e){let{parentElement:t}=e;for(;t&&t!==this.containerElement;){if(this.isBlockElement(t)&&this.blockElements.includes(t))return t;t=t.parentElement}return null}processTextNode(e){let t=e.data;var n;return Ud(e.parentNode)||(t=Du(t),gc((n=e.previousSibling)===null||n===void 0?void 0:n.textContent)&&(t=eg(t))),this.appendStringWithAttributes(t,this.getTextAttributes(e.parentNode))}processElement(e){let t;if(Pn(e)){if(t=Vd(e,"attachment"),Object.keys(t).length){let n=this.getTextAttributes(e);this.appendAttachmentWithAttributes(t,n),e.innerHTML=""}return this.processedElements.push(e)}switch(yt(e)){case"br":return this.isExtraBR(e)||this.isBlockElement(e.nextSibling)||this.appendStringWithAttributes(`
`,this.getTextAttributes(e)),this.processedElements.push(e);case"img":t={url:e.getAttribute("src"),contentType:"image"};let n=(r=>{let s=r.getAttribute("width"),a=r.getAttribute("height"),u={};return s&&(u.width=parseInt(s,10)),a&&(u.height=parseInt(a,10)),u})(e);for(let r in n){let s=n[r];t[r]=s}return this.appendAttachmentWithAttributes(t,this.getTextAttributes(e)),this.processedElements.push(e);case"tr":if(this.needsTableSeparator(e))return this.appendStringWithAttributes(ra.tableRowSeparator);break;case"td":if(this.needsTableSeparator(e))return this.appendStringWithAttributes(ra.tableCellSeparator)}}appendBlockForAttributesWithElement(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};this.blockElements.push(t);let r=function(){return{text:[],attributes:arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},htmlAttributes:arguments.length>1&&arguments[1]!==void 0?arguments[1]:{}}}(e,n);return this.blocks.push(r),r}appendEmptyBlock(){return this.appendBlockForAttributesWithElement([],null)}appendStringWithAttributes(e,t){return this.appendPiece($o(e,t))}appendAttachmentWithAttributes(e,t){return this.appendPiece(function(n){return{attachment:n,attributes:arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},type:"attachment"}}(e,t))}appendPiece(e){return this.blocks.length===0&&this.appendEmptyBlock(),this.blocks[this.blocks.length-1].text.push(e)}appendStringToTextAtIndex(e,t){let{text:n}=this.blocks[t],r=n[n.length-1];if(r?.type!=="string")return n.push($o(e));r.string+=e}prependStringToTextAtIndex(e,t){let{text:n}=this.blocks[t],r=n[0];if(r?.type!=="string")return n.unshift($o(e));r.string=e+r.string}getTextAttributes(e){let t,n={};for(let r in Mn){let s=Mn[r];if(s.tagName&&on(e,{matchingSelector:s.tagName,untilNode:this.containerElement}))n[r]=!0;else if(s.parser){if(t=s.parser(e),t){let a=!1;for(let u of this.findBlockElementAncestors(e))if(s.parser(u)===t){a=!0;break}a||(n[r]=t)}}else s.styleProperty&&(t=e.style[s.styleProperty],t&&(n[r]=t))}if(Pn(e)){let r=Vd(e,"attributes");for(let s in r)t=r[s],n[s]=t}return n}getBlockAttributes(e){let t=[];for(;e&&e!==this.containerElement;){for(let r in wt){let s=wt[r];var n;s.parse!==!1&&yt(e)===s.tagName&&((n=s.test)!==null&&n!==void 0&&n.call(s,e)||!s.test)&&(t.push(r),s.listAttribute&&t.push(s.listAttribute))}e=e.parentNode}return t.reverse()}getBlockHTMLAttributes(e){let t={},n=Object.values(wt).find(r=>r.tagName===yt(e));return(n?.htmlAttributes||[]).forEach(r=>{e.hasAttribute(r)&&(t[r]=e.getAttribute(r))}),t}findBlockElementAncestors(e){let t=[];for(;e&&e!==this.containerElement;){let n=yt(e);Yr().includes(n)&&t.push(e),e=e.parentNode}return t}isBlockElement(e){if(e?.nodeType===Node.ELEMENT_NODE&&!Pn(e)&&!on(e,{matchingSelector:"td",untilNode:this.containerElement}))return Yr().includes(yt(e))||window.getComputedStyle(e).display==="block"}isInsignificantTextNode(e){if(e?.nodeType!==Node.TEXT_NODE||!tg(e.data))return;let{parentNode:t,previousSibling:n,nextSibling:r}=e;return Zp(t.previousSibling)&&!this.isBlockElement(t.previousSibling)||Ud(t)?void 0:!n||this.isBlockElement(n)||!r||this.isBlockElement(r)}isExtraBR(e){return yt(e)==="br"&&this.isBlockElement(e.parentNode)&&e.parentNode.lastChild===e}needsTableSeparator(e){if(ra.removeBlankTableCells){var t;let n=(t=e.previousSibling)===null||t===void 0?void 0:t.textContent;return n&&/\S/.test(n)}return e.previousSibling}translateBlockElementMarginsToNewlines(){let e=this.getMarginOfDefaultBlockElement();for(let t=0;t<this.blocks.length;t++){let n=this.getMarginOfBlockElementAtIndex(t);n&&(n.top>2*e.top&&this.prependStringToTextAtIndex(`
`,t),n.bottom>2*e.bottom&&this.appendStringToTextAtIndex(`
`,t))}}getMarginOfBlockElementAtIndex(e){let t=this.blockElements[e];if(t&&t.textContent&&!Yr().includes(yt(t))&&!this.processedElements.includes(t))return Wd(t)}getMarginOfDefaultBlockElement(){let e=be(wt.default.tagName);return this.containerElement.appendChild(e),Wd(e)}},Ud=function(i){let{whiteSpace:e}=window.getComputedStyle(i);return["pre","pre-wrap","pre-line"].includes(e)},Zp=i=>i&&!gc(i.textContent),Wd=function(i){let e=window.getComputedStyle(i);if(e.display==="block")return{top:parseInt(e.marginTop),bottom:parseInt(e.marginBottom)}},Qp=function(i){return yt(i)==="style"?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},eg=i=>i.replace(new RegExp("^".concat(Su.source,"+")),""),tg=i=>new RegExp("^".concat(Su.source,"*$")).test(i),gc=i=>/\s$/.test(i),ig=["contenteditable","data-trix-id","data-trix-store-key","data-trix-mutable","data-trix-placeholder","tabindex"],fu="data-trix-serialized-attributes",ng="[".concat(fu,"]"),rg=new RegExp("<!--block-->","g"),sg={"application/json":function(i){let e;if(i instanceof Ot)e=i;else{if(!(i instanceof HTMLElement))throw new Error("unserializable object");e=jn.parse(i.innerHTML).getDocument()}return e.toSerializableDocument().toJSONString()},"text/html":function(i){let e;if(i instanceof Ot)e=cr.render(i);else{if(!(i instanceof HTMLElement))throw new Error("unserializable object");e=i.cloneNode(!0)}return Array.from(e.querySelectorAll("[data-trix-serialize=false]")).forEach(t=>{un(t)}),ig.forEach(t=>{Array.from(e.querySelectorAll("[".concat(t,"]"))).forEach(n=>{n.removeAttribute(t)})}),Array.from(e.querySelectorAll(ng)).forEach(t=>{try{let n=JSON.parse(t.getAttribute(fu));t.removeAttribute(fu);for(let r in n){let s=n[r];t.setAttribute(r,s)}}catch{}}),e.innerHTML.replace(rg,"")}},ag=Object.freeze({__proto__:null}),qe=class extends Ge{constructor(e,t){super(...arguments),this.attachmentManager=e,this.attachment=t,this.id=this.attachment.id,this.file=this.attachment.file}remove(){return this.attachmentManager.requestRemovalOfAttachment(this.attachment)}};qe.proxyMethod("attachment.getAttribute"),qe.proxyMethod("attachment.hasAttribute"),qe.proxyMethod("attachment.setAttribute"),qe.proxyMethod("attachment.getAttributes"),qe.proxyMethod("attachment.setAttributes"),qe.proxyMethod("attachment.isPending"),qe.proxyMethod("attachment.isPreviewable"),qe.proxyMethod("attachment.getURL"),qe.proxyMethod("attachment.getHref"),qe.proxyMethod("attachment.getFilename"),qe.proxyMethod("attachment.getFilesize"),qe.proxyMethod("attachment.getFormattedFilesize"),qe.proxyMethod("attachment.getExtension"),qe.proxyMethod("attachment.getContentType"),qe.proxyMethod("attachment.getFile"),qe.proxyMethod("attachment.setFile"),qe.proxyMethod("attachment.releaseFile"),qe.proxyMethod("attachment.getUploadProgress"),qe.proxyMethod("attachment.setUploadProgress");var ma=class extends Ge{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),this.managedAttachments={},Array.from(e).forEach(t=>{this.manageAttachment(t)})}getAttachments(){let e=[];for(let t in this.managedAttachments){let n=this.managedAttachments[t];e.push(n)}return e}manageAttachment(e){return this.managedAttachments[e.id]||(this.managedAttachments[e.id]=new qe(this,e)),this.managedAttachments[e.id]}attachmentIsManaged(e){return e.id in this.managedAttachments}requestRemovalOfAttachment(e){var t,n;if(this.attachmentIsManaged(e))return(t=this.delegate)===null||t===void 0||(n=t.attachmentManagerDidRequestRemovalOfAttachment)===null||n===void 0?void 0:n.call(t,e)}unmanageAttachment(e){let t=this.managedAttachments[e.id];return delete this.managedAttachments[e.id],t}},va=class{constructor(e){this.composition=e,this.document=this.composition.document;let t=this.composition.getSelectedRange();this.startPosition=t[0],this.endPosition=t[1],this.startLocation=this.document.locationFromPosition(this.startPosition),this.endLocation=this.document.locationFromPosition(this.endPosition),this.block=this.document.getBlockAtIndex(this.endLocation.index),this.breaksOnReturn=this.block.breaksOnReturn(),this.previousCharacter=this.block.text.getStringAtPosition(this.endLocation.offset-1),this.nextCharacter=this.block.text.getStringAtPosition(this.endLocation.offset)}shouldInsertBlockBreak(){return this.block.hasAttributes()&&this.block.isListItem()&&!this.block.isEmpty()?this.startLocation.offset!==0:this.breaksOnReturn&&this.nextCharacter!==`
`}shouldBreakFormattedBlock(){return this.block.hasAttributes()&&!this.block.isListItem()&&(this.breaksOnReturn&&this.nextCharacter===`
`||this.previousCharacter===`
`)}shouldDecreaseListLevel(){return this.block.hasAttributes()&&this.block.isListItem()&&this.block.isEmpty()}shouldPrependListItem(){return this.block.isListItem()&&this.startLocation.offset===0&&!this.block.isEmpty()}shouldRemoveLastBlockAttribute(){return this.block.hasAttributes()&&!this.block.isListItem()&&this.block.isEmpty()}},Ci=class extends Ge{constructor(){super(...arguments),this.document=new Ot,this.attachments=[],this.currentAttributes={},this.revision=0}setDocument(e){var t,n;if(!e.isEqualTo(this.document))return this.document=e,this.refreshAttachments(),this.revision++,(t=this.delegate)===null||t===void 0||(n=t.compositionDidChangeDocument)===null||n===void 0?void 0:n.call(t,e)}getSnapshot(){return{document:this.document,selectedRange:this.getSelectedRange()}}loadSnapshot(e){var t,n,r,s;let{document:a,selectedRange:u}=e;return(t=this.delegate)===null||t===void 0||(n=t.compositionWillLoadSnapshot)===null||n===void 0||n.call(t),this.setDocument(a??new Ot),this.setSelection(u??[0,0]),(r=this.delegate)===null||r===void 0||(s=r.compositionDidLoadSnapshot)===null||s===void 0?void 0:s.call(r)}insertText(e){let{updatePosition:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{updatePosition:!0},n=this.getSelectedRange();this.setDocument(this.document.insertTextAtRange(e,n));let r=n[0],s=r+e.getLength();return t&&this.setSelection(s),this.notifyDelegateOfInsertionAtRange([r,s])}insertBlock(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:new Yt,t=new Ot([e]);return this.insertDocument(t)}insertDocument(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:new Ot,t=this.getSelectedRange();this.setDocument(this.document.insertDocumentAtRange(e,t));let n=t[0],r=n+e.getLength();return this.setSelection(r),this.notifyDelegateOfInsertionAtRange([n,r])}insertString(e,t){let n=this.getCurrentTextAttributes(),r=Ut.textForStringWithAttributes(e,n);return this.insertText(r,t)}insertBlockBreak(){let e=this.getSelectedRange();this.setDocument(this.document.insertBlockBreakAtRange(e));let t=e[0],n=t+1;return this.setSelection(n),this.notifyDelegateOfInsertionAtRange([t,n])}insertLineBreak(){let e=new va(this);if(e.shouldDecreaseListLevel())return this.decreaseListLevel(),this.setSelection(e.startPosition);if(e.shouldPrependListItem()){let t=new Ot([e.block.copyWithoutText()]);return this.insertDocument(t)}return e.shouldInsertBlockBreak()?this.insertBlockBreak():e.shouldRemoveLastBlockAttribute()?this.removeLastBlockAttribute():e.shouldBreakFormattedBlock()?this.breakFormattedBlock(e):this.insertString(`
`)}insertHTML(e){let t=jn.parse(e).getDocument(),n=this.getSelectedRange();this.setDocument(this.document.mergeDocumentAtRange(t,n));let r=n[0],s=r+t.getLength()-1;return this.setSelection(s),this.notifyDelegateOfInsertionAtRange([r,s])}replaceHTML(e){let t=jn.parse(e).getDocument().copyUsingObjectsFromDocument(this.document),n=this.getLocationRange({strict:!1}),r=this.document.rangeFromLocationRange(n);return this.setDocument(t),this.setSelection(r)}insertFile(e){return this.insertFiles([e])}insertFiles(e){let t=[];return Array.from(e).forEach(n=>{var r;if((r=this.delegate)!==null&&r!==void 0&&r.compositionShouldAcceptFile(n)){let s=ln.attachmentForFile(n);t.push(s)}}),this.insertAttachments(t)}insertAttachment(e){return this.insertAttachments([e])}insertAttachments(e){let t=new Ut;return Array.from(e).forEach(n=>{var r;let s=n.getType(),a=(r=wu[s])===null||r===void 0?void 0:r.presentation,u=this.getCurrentTextAttributes();a&&(u.presentation=a);let c=Ut.textForAttachmentWithAttributes(n,u);t=t.appendText(c)}),this.insertText(t)}shouldManageDeletingInDirection(e){let t=this.getLocationRange();if(Fi(t)){if(e==="backward"&&t[0].offset===0||this.shouldManageMovingCursorInDirection(e))return!0}else if(t[0].index!==t[1].index)return!0;return!1}deleteInDirection(e){let t,n,r,{length:s}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},a=this.getLocationRange(),u=this.getSelectedRange(),c=Fi(u);if(c?n=e==="backward"&&a[0].offset===0:r=a[0].index!==a[1].index,n&&this.canDecreaseBlockAttributeLevel()){let v=this.getBlock();if(v.isListItem()?this.decreaseListLevel():this.decreaseBlockAttributeLevel(),this.setSelection(u[0]),v.isEmpty())return!1}return c&&(u=this.getExpandedRangeInDirection(e,{length:s}),e==="backward"&&(t=this.getAttachmentAtRange(u))),t?(this.editAttachment(t),!1):(this.setDocument(this.document.removeTextAtRange(u)),this.setSelection(u[0]),!n&&!r&&void 0)}moveTextFromRange(e){let[t]=Array.from(this.getSelectedRange());return this.setDocument(this.document.moveTextFromRangeToPosition(e,t)),this.setSelection(t)}removeAttachment(e){let t=this.document.getRangeOfAttachment(e);if(t)return this.stopEditingAttachment(),this.setDocument(this.document.removeTextAtRange(t)),this.setSelection(t[0])}removeLastBlockAttribute(){let[e,t]=Array.from(this.getSelectedRange()),n=this.document.getBlockAtPosition(t);return this.removeCurrentAttribute(n.getLastAttribute()),this.setSelection(e)}insertPlaceholder(){return this.placeholderPosition=this.getPosition(),this.insertString(" ")}selectPlaceholder(){if(this.placeholderPosition!=null)return this.setSelectedRange([this.placeholderPosition,this.placeholderPosition+1]),this.getSelectedRange()}forgetPlaceholder(){this.placeholderPosition=null}hasCurrentAttribute(e){let t=this.currentAttributes[e];return t!=null&&t!==!1}toggleCurrentAttribute(e){let t=!this.currentAttributes[e];return t?this.setCurrentAttribute(e,t):this.removeCurrentAttribute(e)}canSetCurrentAttribute(e){return Xe(e)?this.canSetCurrentBlockAttribute(e):this.canSetCurrentTextAttribute(e)}canSetCurrentTextAttribute(e){let t=this.getSelectedDocument();if(t){for(let n of Array.from(t.getAttachments()))if(!n.hasContent())return!1;return!0}}canSetCurrentBlockAttribute(e){let t=this.getBlock();if(t)return!t.isTerminalBlock()}setCurrentAttribute(e,t){return Xe(e)?this.setBlockAttribute(e,t):(this.setTextAttribute(e,t),this.currentAttributes[e]=t,this.notifyDelegateOfCurrentAttributesChange())}setHTMLAtributeAtPosition(e,t,n){var r;let s=this.document.getBlockAtPosition(e),a=(r=Xe(s.getLastAttribute()))===null||r===void 0?void 0:r.htmlAttributes;if(s&&a!=null&&a.includes(t)){let u=this.document.setHTMLAttributeAtPosition(e,t,n);this.setDocument(u)}}setTextAttribute(e,t){let n=this.getSelectedRange();if(!n)return;let[r,s]=Array.from(n);if(r!==s)return this.setDocument(this.document.addAttributeAtRange(e,t,n));if(e==="href"){let a=Ut.textForStringWithAttributes(t,{href:t});return this.insertText(a)}}setBlockAttribute(e,t){let n=this.getSelectedRange();if(this.canSetCurrentAttribute(e))return this.setDocument(this.document.applyBlockAttributeAtRange(e,t,n)),this.setSelection(n)}removeCurrentAttribute(e){return Xe(e)?(this.removeBlockAttribute(e),this.updateCurrentAttributes()):(this.removeTextAttribute(e),delete this.currentAttributes[e],this.notifyDelegateOfCurrentAttributesChange())}removeTextAttribute(e){let t=this.getSelectedRange();if(t)return this.setDocument(this.document.removeAttributeAtRange(e,t))}removeBlockAttribute(e){let t=this.getSelectedRange();if(t)return this.setDocument(this.document.removeAttributeAtRange(e,t))}canDecreaseNestingLevel(){var e;return((e=this.getBlock())===null||e===void 0?void 0:e.getNestingLevel())>0}canIncreaseNestingLevel(){var e;let t=this.getBlock();if(t){if((e=Xe(t.getLastNestableAttribute()))===null||e===void 0||!e.listAttribute)return t.getNestingLevel()>0;{let n=this.getPreviousBlock();if(n)return function(){let r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];return Bn((arguments.length>0&&arguments[0]!==void 0?arguments[0]:[]).slice(0,r.length),r)}(n.getListItemAttributes(),t.getListItemAttributes())}}}decreaseNestingLevel(){let e=this.getBlock();if(e)return this.setDocument(this.document.replaceBlock(e,e.decreaseNestingLevel()))}increaseNestingLevel(){let e=this.getBlock();if(e)return this.setDocument(this.document.replaceBlock(e,e.increaseNestingLevel()))}canDecreaseBlockAttributeLevel(){var e;return((e=this.getBlock())===null||e===void 0?void 0:e.getAttributeLevel())>0}decreaseBlockAttributeLevel(){var e;let t=(e=this.getBlock())===null||e===void 0?void 0:e.getLastAttribute();if(t)return this.removeCurrentAttribute(t)}decreaseListLevel(){let[e]=Array.from(this.getSelectedRange()),{index:t}=this.document.locationFromPosition(e),n=t,r=this.getBlock().getAttributeLevel(),s=this.document.getBlockAtIndex(n+1);for(;s&&s.isListItem()&&!(s.getAttributeLevel()<=r);)n++,s=this.document.getBlockAtIndex(n+1);e=this.document.positionFromLocation({index:t,offset:0});let a=this.document.positionFromLocation({index:n,offset:0});return this.setDocument(this.document.removeLastListAttributeAtRange([e,a]))}updateCurrentAttributes(){let e=this.getSelectedRange({ignoreLock:!0});if(e){let t=this.document.getCommonAttributesAtRange(e);if(Array.from(su()).forEach(n=>{t[n]||this.canSetCurrentAttribute(n)||(t[n]=!1)}),!pr(t,this.currentAttributes))return this.currentAttributes=t,this.notifyDelegateOfCurrentAttributesChange()}}getCurrentAttributes(){return Zd.call({},this.currentAttributes)}getCurrentTextAttributes(){let e={};for(let t in this.currentAttributes){let n=this.currentAttributes[t];n!==!1&&au(t)&&(e[t]=n)}return e}freezeSelection(){return this.setCurrentAttribute("frozen",!0)}thawSelection(){return this.removeCurrentAttribute("frozen")}hasFrozenSelection(){return this.hasCurrentAttribute("frozen")}setSelection(e){var t;let n=this.document.locationRangeFromRange(e);return(t=this.delegate)===null||t===void 0?void 0:t.compositionDidRequestChangingSelectionToLocationRange(n)}getSelectedRange(){let e=this.getLocationRange();if(e)return this.document.rangeFromLocationRange(e)}setSelectedRange(e){let t=this.document.locationRangeFromRange(e);return this.getSelectionManager().setLocationRange(t)}getPosition(){let e=this.getLocationRange();if(e)return this.document.positionFromLocation(e[0])}getLocationRange(e){return this.targetLocationRange?this.targetLocationRange:this.getSelectionManager().getLocationRange(e)||Ie({index:0,offset:0})}withTargetLocationRange(e,t){let n;this.targetLocationRange=e;try{n=t()}finally{this.targetLocationRange=null}return n}withTargetRange(e,t){let n=this.document.locationRangeFromRange(e);return this.withTargetLocationRange(n,t)}withTargetDOMRange(e,t){let n=this.createLocationRangeFromDOMRange(e,{strict:!1});return this.withTargetLocationRange(n,t)}getExpandedRangeInDirection(e){let{length:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},[n,r]=Array.from(this.getSelectedRange());return e==="backward"?t?n-=t:n=this.translateUTF16PositionFromOffset(n,-1):t?r+=t:r=this.translateUTF16PositionFromOffset(r,1),Ie([n,r])}shouldManageMovingCursorInDirection(e){if(this.editingAttachment)return!0;let t=this.getExpandedRangeInDirection(e);return this.getAttachmentAtRange(t)!=null}moveCursorInDirection(e){let t,n;if(this.editingAttachment)n=this.document.getRangeOfAttachment(this.editingAttachment);else{let r=this.getSelectedRange();n=this.getExpandedRangeInDirection(e),t=!ua(r,n)}if(e==="backward"?this.setSelectedRange(n[0]):this.setSelectedRange(n[1]),t){let r=this.getAttachmentAtRange(n);if(r)return this.editAttachment(r)}}expandSelectionInDirection(e){let{length:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=this.getExpandedRangeInDirection(e,{length:t});return this.setSelectedRange(n)}expandSelectionForEditing(){if(this.hasCurrentAttribute("href"))return this.expandSelectionAroundCommonAttribute("href")}expandSelectionAroundCommonAttribute(e){let t=this.getPosition(),n=this.document.getRangeOfCommonAttributeAtPosition(e,t);return this.setSelectedRange(n)}selectionContainsAttachments(){var e;return((e=this.getSelectedAttachments())===null||e===void 0?void 0:e.length)>0}selectionIsInCursorTarget(){return this.editingAttachment||this.positionIsCursorTarget(this.getPosition())}positionIsCursorTarget(e){let t=this.document.locationFromPosition(e);if(t)return this.locationIsCursorTarget(t)}positionIsBlockBreak(e){var t;return(t=this.document.getPieceAtPosition(e))===null||t===void 0?void 0:t.isBlockBreak()}getSelectedDocument(){let e=this.getSelectedRange();if(e)return this.document.getDocumentAtRange(e)}getSelectedAttachments(){var e;return(e=this.getSelectedDocument())===null||e===void 0?void 0:e.getAttachments()}getAttachments(){return this.attachments.slice(0)}refreshAttachments(){let e=this.document.getAttachments(),{added:t,removed:n}=function(){let r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[],a=[],u=[],c=new Set;r.forEach(k=>{c.add(k)});let v=new Set;return s.forEach(k=>{v.add(k),c.has(k)||a.push(k)}),r.forEach(k=>{v.has(k)||u.push(k)}),{added:a,removed:u}}(this.attachments,e);return this.attachments=e,Array.from(n).forEach(r=>{var s,a;r.delegate=null,(s=this.delegate)===null||s===void 0||(a=s.compositionDidRemoveAttachment)===null||a===void 0||a.call(s,r)}),(()=>{let r=[];return Array.from(t).forEach(s=>{var a,u;s.delegate=this,r.push((a=this.delegate)===null||a===void 0||(u=a.compositionDidAddAttachment)===null||u===void 0?void 0:u.call(a,s))}),r})()}attachmentDidChangeAttributes(e){var t,n;return this.revision++,(t=this.delegate)===null||t===void 0||(n=t.compositionDidEditAttachment)===null||n===void 0?void 0:n.call(t,e)}attachmentDidChangePreviewURL(e){var t,n;return this.revision++,(t=this.delegate)===null||t===void 0||(n=t.compositionDidChangeAttachmentPreviewURL)===null||n===void 0?void 0:n.call(t,e)}editAttachment(e,t){var n,r;if(e!==this.editingAttachment)return this.stopEditingAttachment(),this.editingAttachment=e,(n=this.delegate)===null||n===void 0||(r=n.compositionDidStartEditingAttachment)===null||r===void 0?void 0:r.call(n,this.editingAttachment,t)}stopEditingAttachment(){var e,t;this.editingAttachment&&((e=this.delegate)===null||e===void 0||(t=e.compositionDidStopEditingAttachment)===null||t===void 0||t.call(e,this.editingAttachment),this.editingAttachment=null)}updateAttributesForAttachment(e,t){return this.setDocument(this.document.updateAttributesForAttachment(e,t))}removeAttributeForAttachment(e,t){return this.setDocument(this.document.removeAttributeForAttachment(e,t))}breakFormattedBlock(e){let{document:t}=e,{block:n}=e,r=e.startPosition,s=[r-1,r];n.getBlockBreakPosition()===e.startLocation.offset?(n.breaksOnReturn()&&e.nextCharacter===`
`?r+=1:t=t.removeTextAtRange(s),s=[r,r]):e.nextCharacter===`
`?e.previousCharacter===`
`?s=[r-1,r+1]:(s=[r,r+1],r+=1):e.startLocation.offset-1!=0&&(r+=1);let a=new Ot([n.removeLastAttribute().copyWithoutText()]);return this.setDocument(t.insertDocumentAtRange(a,s)),this.setSelection(r)}getPreviousBlock(){let e=this.getLocationRange();if(e){let{index:t}=e[0];if(t>0)return this.document.getBlockAtIndex(t-1)}}getBlock(){let e=this.getLocationRange();if(e)return this.document.getBlockAtIndex(e[0].index)}getAttachmentAtRange(e){let t=this.document.getDocumentAtRange(e);if(t.toString()==="".concat("\uFFFC",`
`))return t.getAttachments()[0]}notifyDelegateOfCurrentAttributesChange(){var e,t;return(e=this.delegate)===null||e===void 0||(t=e.compositionDidChangeCurrentAttributes)===null||t===void 0?void 0:t.call(e,this.currentAttributes)}notifyDelegateOfInsertionAtRange(e){var t,n;return(t=this.delegate)===null||t===void 0||(n=t.compositionDidPerformInsertionAtRange)===null||n===void 0?void 0:n.call(t,e)}translateUTF16PositionFromOffset(e,t){let n=this.document.toUTF16String(),r=n.offsetFromUCS2Offset(e);return n.offsetToUCS2Offset(r+t)}};Ci.proxyMethod("getSelectionManager().getPointRange"),Ci.proxyMethod("getSelectionManager().setLocationRangeFromPointRange"),Ci.proxyMethod("getSelectionManager().createLocationRangeFromDOMRange"),Ci.proxyMethod("getSelectionManager().locationIsCursorTarget"),Ci.proxyMethod("getSelectionManager().selectionIsExpanded"),Ci.proxyMethod("delegate?.getSelectionManager");var rs=class extends Ge{constructor(e){super(...arguments),this.composition=e,this.undoEntries=[],this.redoEntries=[]}recordUndoEntry(e){let{context:t,consolidatable:n}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=this.undoEntries.slice(-1)[0];if(!n||!og(r,e,t)){let s=this.createEntry({description:e,context:t});this.undoEntries.push(s),this.redoEntries=[]}}undo(){let e=this.undoEntries.pop();if(e){let t=this.createEntry(e);return this.redoEntries.push(t),this.composition.loadSnapshot(e.snapshot)}}redo(){let e=this.redoEntries.pop();if(e){let t=this.createEntry(e);return this.undoEntries.push(t),this.composition.loadSnapshot(e.snapshot)}}canUndo(){return this.undoEntries.length>0}canRedo(){return this.redoEntries.length>0}createEntry(){let{description:e,context:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return{description:e?.toString(),context:JSON.stringify(t),snapshot:this.composition.getSnapshot()}}},og=(i,e,t)=>i?.description===e?.toString()&&i?.context===JSON.stringify(t),qo="attachmentGallery",ba=class{constructor(e){this.document=e.document,this.selectedRange=e.selectedRange}perform(){return this.removeBlockAttribute(),this.applyBlockAttribute()}getSnapshot(){return{document:this.document,selectedRange:this.selectedRange}}removeBlockAttribute(){return this.findRangesOfBlocks().map(e=>this.document=this.document.removeAttributeAtRange(qo,e))}applyBlockAttribute(){let e=0;this.findRangesOfPieces().forEach(t=>{t[1]-t[0]>1&&(t[0]+=e,t[1]+=e,this.document.getCharacterAtPosition(t[1])!==`
`&&(this.document=this.document.insertBlockBreakAtRange(t[1]),t[1]<this.selectedRange[1]&&this.moveSelectedRangeForward(),t[1]++,e++),t[0]!==0&&this.document.getCharacterAtPosition(t[0]-1)!==`
`&&(this.document=this.document.insertBlockBreakAtRange(t[0]),t[0]<this.selectedRange[0]&&this.moveSelectedRangeForward(),t[0]++,e++),this.document=this.document.applyBlockAttributeAtRange(qo,!0,t))})}findRangesOfBlocks(){return this.document.findRangesForBlockAttribute(qo)}findRangesOfPieces(){return this.document.findRangesForTextAttribute("presentation",{withValue:"gallery"})}moveSelectedRangeForward(){this.selectedRange[0]+=1,this.selectedRange[1]+=1}},mc=function(i){let e=new ba(i);return e.perform(),e.getSnapshot()},ug=[mc],ya=class{constructor(e,t,n){this.insertFiles=this.insertFiles.bind(this),this.composition=e,this.selectionManager=t,this.element=n,this.undoManager=new rs(this.composition),this.filters=ug.slice(0)}loadDocument(e){return this.loadSnapshot({document:e,selectedRange:[0,0]})}loadHTML(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",t=jn.parse(e,{referenceElement:this.element}).getDocument();return this.loadDocument(t)}loadJSON(e){let{document:t,selectedRange:n}=e;return t=Ot.fromJSON(t),this.loadSnapshot({document:t,selectedRange:n})}loadSnapshot(e){return this.undoManager=new rs(this.composition),this.composition.loadSnapshot(e)}getDocument(){return this.composition.document}getSelectedDocument(){return this.composition.getSelectedDocument()}getSnapshot(){return this.composition.getSnapshot()}toJSON(){return this.getSnapshot()}deleteInDirection(e){return this.composition.deleteInDirection(e)}insertAttachment(e){return this.composition.insertAttachment(e)}insertAttachments(e){return this.composition.insertAttachments(e)}insertDocument(e){return this.composition.insertDocument(e)}insertFile(e){return this.composition.insertFile(e)}insertFiles(e){return this.composition.insertFiles(e)}insertHTML(e){return this.composition.insertHTML(e)}insertString(e){return this.composition.insertString(e)}insertText(e){return this.composition.insertText(e)}insertLineBreak(){return this.composition.insertLineBreak()}getSelectedRange(){return this.composition.getSelectedRange()}getPosition(){return this.composition.getPosition()}getClientRectAtPosition(e){let t=this.getDocument().locationRangeFromRange([e,e+1]);return this.selectionManager.getClientRectAtLocationRange(t)}expandSelectionInDirection(e){return this.composition.expandSelectionInDirection(e)}moveCursorInDirection(e){return this.composition.moveCursorInDirection(e)}setSelectedRange(e){return this.composition.setSelectedRange(e)}activateAttribute(e){let t=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1];return this.composition.setCurrentAttribute(e,t)}attributeIsActive(e){return this.composition.hasCurrentAttribute(e)}canActivateAttribute(e){return this.composition.canSetCurrentAttribute(e)}deactivateAttribute(e){return this.composition.removeCurrentAttribute(e)}setHTMLAtributeAtPosition(e,t,n){this.composition.setHTMLAtributeAtPosition(e,t,n)}canDecreaseNestingLevel(){return this.composition.canDecreaseNestingLevel()}canIncreaseNestingLevel(){return this.composition.canIncreaseNestingLevel()}decreaseNestingLevel(){if(this.canDecreaseNestingLevel())return this.composition.decreaseNestingLevel()}increaseNestingLevel(){if(this.canIncreaseNestingLevel())return this.composition.increaseNestingLevel()}canRedo(){return this.undoManager.canRedo()}canUndo(){return this.undoManager.canUndo()}recordUndoEntry(e){let{context:t,consolidatable:n}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.undoManager.recordUndoEntry(e,{context:t,consolidatable:n})}redo(){if(this.canRedo())return this.undoManager.redo()}undo(){if(this.canUndo())return this.undoManager.undo()}},wa=class{constructor(e){this.element=e}findLocationFromContainerAndOffset(e,t){let{strict:n}=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{strict:!0},r=0,s=!1,a={index:0,offset:0},u=this.findAttachmentElementParentForNode(e);u&&(e=u.parentNode,t=Ro(u));let c=oa(this.element,{usingFilter:vc});for(;c.nextNode();){let v=c.currentNode;if(v===e&&Zr(e)){ur(v)||(a.offset+=t);break}if(v.parentNode===e){if(r++===t)break}else if(!Ln(e,v)&&r>0)break;vd(v,{strict:n})?(s&&a.index++,a.offset=0,s=!0):a.offset+=Ko(v)}return a}findContainerAndOffsetFromLocation(e){let t,n;if(e.index===0&&e.offset===0){for(t=this.element,n=0;t.firstChild;)if(t=t.firstChild,Po(t)){n=1;break}return[t,n]}let[r,s]=this.findNodeAndOffsetFromLocation(e);if(r){if(Zr(r))Ko(r)===0?(t=r.parentNode.parentNode,n=Ro(r.parentNode),ur(r,{name:"right"})&&n++):(t=r,n=e.offset-s);else{if(t=r.parentNode,!vd(r.previousSibling)&&!Po(t))for(;r===t.lastChild&&(r=t,t=t.parentNode,!Po(t)););n=Ro(r),e.offset!==0&&n++}return[t,n]}}findNodeAndOffsetFromLocation(e){let t,n,r=0;for(let s of this.getSignificantNodesForIndex(e.index)){let a=Ko(s);if(e.offset<=r+a)if(Zr(s)){if(t=s,n=r,e.offset===n&&ur(t))break}else t||(t=s,n=r);if(r+=a,r>e.offset)break}return[t,n]}findAttachmentElementParentForNode(e){for(;e&&e!==this.element;){if(Pn(e))return e;e=e.parentNode}}getSignificantNodesForIndex(e){let t=[],n=oa(this.element,{usingFilter:lg}),r=!1;for(;n.nextNode();){let a=n.currentNode;var s;if(or(a)){if(s!=null?s++:s=0,s===e)r=!0;else if(r)break}else r&&t.push(a)}return t}},Ko=function(i){return i.nodeType===Node.TEXT_NODE?ur(i)?0:i.textContent.length:yt(i)==="br"||Pn(i)?1:0},lg=function(i){return dg(i)===NodeFilter.FILTER_ACCEPT?vc(i):NodeFilter.FILTER_REJECT},dg=function(i){return ec(i)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},vc=function(i){return Pn(i.parentNode)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},_a=class{createDOMRangeFromPoint(e){let t,{x:n,y:r}=e;if(document.caretPositionFromPoint){let{offsetNode:s,offset:a}=document.caretPositionFromPoint(n,r);return t=document.createRange(),t.setStart(s,a),t}if(document.caretRangeFromPoint)return document.caretRangeFromPoint(n,r);if(document.body.createTextRange){let s=Qr();try{let a=document.body.createTextRange();a.moveToPoint(n,r),a.select()}catch{}return t=Qr(),oc(s),t}}getClientRectsForDOMRange(e){let t=Array.from(e.getClientRects());return[t[0],t[t.length-1]]}},Bi=class extends Ge{constructor(e){super(...arguments),this.didMouseDown=this.didMouseDown.bind(this),this.selectionDidChange=this.selectionDidChange.bind(this),this.element=e,this.locationMapper=new wa(this.element),this.pointMapper=new _a,this.lockCount=0,Ke("mousedown",{onElement:this.element,withCallback:this.didMouseDown})}getLocationRange(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return e.strict===!1?this.createLocationRangeFromDOMRange(Qr()):e.ignoreLock?this.currentLocationRange:this.lockedLocationRange?this.lockedLocationRange:this.currentLocationRange}setLocationRange(e){if(this.lockedLocationRange)return;e=Ie(e);let t=this.createDOMRangeFromLocationRange(e);t&&(oc(t),this.updateCurrentLocationRange(e))}setLocationRangeFromPointRange(e){e=Ie(e);let t=this.getLocationAtPoint(e[0]),n=this.getLocationAtPoint(e[1]);this.setLocationRange([t,n])}getClientRectAtLocationRange(e){let t=this.createDOMRangeFromLocationRange(e);if(t)return this.getClientRectsForDOMRange(t)[1]}locationIsCursorTarget(e){let t=Array.from(this.findNodeAndOffsetFromLocation(e))[0];return ur(t)}lock(){this.lockCount++==0&&(this.updateCurrentLocationRange(),this.lockedLocationRange=this.getLocationRange())}unlock(){if(--this.lockCount==0){let{lockedLocationRange:e}=this;if(this.lockedLocationRange=null,e!=null)return this.setLocationRange(e)}}clearSelection(){var e;return(e=ac())===null||e===void 0?void 0:e.removeAllRanges()}selectionIsCollapsed(){var e;return((e=Qr())===null||e===void 0?void 0:e.collapsed)===!0}selectionIsExpanded(){return!this.selectionIsCollapsed()}createLocationRangeFromDOMRange(e,t){if(e==null||!this.domRangeWithinElement(e))return;let n=this.findLocationFromContainerAndOffset(e.startContainer,e.startOffset,t);if(!n)return;let r=e.collapsed?void 0:this.findLocationFromContainerAndOffset(e.endContainer,e.endOffset,t);return Ie([n,r])}didMouseDown(){return this.pauseTemporarily()}pauseTemporarily(){let e;this.paused=!0;let t=()=>{if(this.paused=!1,clearTimeout(n),Array.from(e).forEach(r=>{r.destroy()}),Ln(document,this.element))return this.selectionDidChange()},n=setTimeout(t,200);e=["mousemove","keydown"].map(r=>Ke(r,{onElement:document,withCallback:t}))}selectionDidChange(){if(!this.paused&&!ku(this.element))return this.updateCurrentLocationRange()}updateCurrentLocationRange(e){var t,n;if((e??(e=this.createLocationRangeFromDOMRange(Qr())))&&!ua(e,this.currentLocationRange))return this.currentLocationRange=e,(t=this.delegate)===null||t===void 0||(n=t.locationRangeDidChange)===null||n===void 0?void 0:n.call(t,this.currentLocationRange.slice(0))}createDOMRangeFromLocationRange(e){let t=this.findContainerAndOffsetFromLocation(e[0]),n=Fi(e)?t:this.findContainerAndOffsetFromLocation(e[1])||t;if(t!=null&&n!=null){let r=document.createRange();return r.setStart(...Array.from(t||[])),r.setEnd(...Array.from(n||[])),r}}getLocationAtPoint(e){let t=this.createDOMRangeFromPoint(e);var n;if(t)return(n=this.createLocationRangeFromDOMRange(t))===null||n===void 0?void 0:n[0]}domRangeWithinElement(e){return e.collapsed?Ln(this.element,e.startContainer):Ln(this.element,e.startContainer)&&Ln(this.element,e.endContainer)}};Bi.proxyMethod("locationMapper.findLocationFromContainerAndOffset"),Bi.proxyMethod("locationMapper.findContainerAndOffsetFromLocation"),Bi.proxyMethod("locationMapper.findNodeAndOffsetFromLocation"),Bi.proxyMethod("pointMapper.createDOMRangeFromPoint"),Bi.proxyMethod("pointMapper.getClientRectsForDOMRange");var bc=Object.freeze({__proto__:null,Attachment:ln,AttachmentManager:ma,AttachmentPiece:dn,Block:Yt,Composition:Ci,Document:Ot,Editor:ya,HTMLParser:jn,HTMLSanitizer:dr,LineBreakInsertion:va,LocationMapper:wa,ManagedAttachment:qe,Piece:zi,PointMapper:_a,SelectionManager:Bi,SplittableList:hr,StringPiece:ns,Text:Ut,UndoManager:rs}),cg=Object.freeze({__proto__:null,ObjectView:Hi,AttachmentView:is,BlockView:pa,DocumentView:cr,PieceView:ha,PreviewableAttachmentView:ca,TextView:fa}),{lang:Jo,css:Tn,keyNames:hg}=os,Go=function(i){return function(){let e=i.apply(this,arguments);e.do(),this.undos||(this.undos=[]),this.undos.push(e.undo)}},ka=class extends Ge{constructor(e,t,n){let r=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{};super(...arguments),Mt(this,"makeElementMutable",Go(()=>({do:()=>{this.element.dataset.trixMutable=!0},undo:()=>delete this.element.dataset.trixMutable}))),Mt(this,"addToolbar",Go(()=>{let s=be({tagName:"div",className:Tn.attachmentToolbar,data:{trixMutable:!0},childNodes:be({tagName:"div",className:"trix-button-row",childNodes:be({tagName:"span",className:"trix-button-group trix-button-group--actions",childNodes:be({tagName:"button",className:"trix-button trix-button--remove",textContent:Jo.remove,attributes:{title:Jo.remove},data:{trixAction:"remove"}})})})});return this.attachment.isPreviewable()&&s.appendChild(be({tagName:"div",className:Tn.attachmentMetadataContainer,childNodes:be({tagName:"span",className:Tn.attachmentMetadata,childNodes:[be({tagName:"span",className:Tn.attachmentName,textContent:this.attachment.getFilename(),attributes:{title:this.attachment.getFilename()}}),be({tagName:"span",className:Tn.attachmentSize,textContent:this.attachment.getFormattedFilesize()})]})})),Ke("click",{onElement:s,withCallback:this.didClickToolbar}),Ke("click",{onElement:s,matchingSelector:"[data-trix-action]",withCallback:this.didClickActionButton}),Xr("trix-attachment-before-toolbar",{onElement:this.element,attributes:{toolbar:s,attachment:this.attachment}}),{do:()=>this.element.appendChild(s),undo:()=>un(s)}})),Mt(this,"installCaptionEditor",Go(()=>{let s=be({tagName:"textarea",className:Tn.attachmentCaptionEditor,attributes:{placeholder:Jo.captionPlaceholder},data:{trixMutable:!0}});s.value=this.attachmentPiece.getCaption();let a=s.cloneNode();a.classList.add("trix-autoresize-clone"),a.tabIndex=-1;let u=function(){a.value=s.value,s.style.height=a.scrollHeight+"px"};Ke("input",{onElement:s,withCallback:u}),Ke("input",{onElement:s,withCallback:this.didInputCaption}),Ke("keydown",{onElement:s,withCallback:this.didKeyDownCaption}),Ke("change",{onElement:s,withCallback:this.didChangeCaption}),Ke("blur",{onElement:s,withCallback:this.didBlurCaption});let c=this.element.querySelector("figcaption"),v=c.cloneNode();return{do:()=>{if(c.style.display="none",v.appendChild(s),v.appendChild(a),v.classList.add("".concat(Tn.attachmentCaption,"--editing")),c.parentElement.insertBefore(v,c),u(),this.options.editCaption)return Cu(()=>s.focus())},undo(){un(v),c.style.display=null}}})),this.didClickToolbar=this.didClickToolbar.bind(this),this.didClickActionButton=this.didClickActionButton.bind(this),this.didKeyDownCaption=this.didKeyDownCaption.bind(this),this.didInputCaption=this.didInputCaption.bind(this),this.didChangeCaption=this.didChangeCaption.bind(this),this.didBlurCaption=this.didBlurCaption.bind(this),this.attachmentPiece=e,this.element=t,this.container=n,this.options=r,this.attachment=this.attachmentPiece.attachment,yt(this.element)==="a"&&(this.element=this.element.firstChild),this.install()}install(){this.makeElementMutable(),this.addToolbar(),this.attachment.isPreviewable()&&this.installCaptionEditor()}uninstall(){var e;let t=this.undos.pop();for(this.savePendingCaption();t;)t(),t=this.undos.pop();(e=this.delegate)===null||e===void 0||e.didUninstallAttachmentEditor(this)}savePendingCaption(){if(this.pendingCaption!=null){let s=this.pendingCaption;var e,t,n,r;this.pendingCaption=null,s?(e=this.delegate)===null||e===void 0||(t=e.attachmentEditorDidRequestUpdatingAttributesForAttachment)===null||t===void 0||t.call(e,{caption:s},this.attachment):(n=this.delegate)===null||n===void 0||(r=n.attachmentEditorDidRequestRemovingAttributeForAttachment)===null||r===void 0||r.call(n,"caption",this.attachment)}}didClickToolbar(e){return e.preventDefault(),e.stopPropagation()}didClickActionButton(e){var t;if(e.target.getAttribute("data-trix-action")==="remove")return(t=this.delegate)===null||t===void 0?void 0:t.attachmentEditorDidRequestRemovalOfAttachment(this.attachment)}didKeyDownCaption(e){var t,n;if(hg[e.keyCode]==="return")return e.preventDefault(),this.savePendingCaption(),(t=this.delegate)===null||t===void 0||(n=t.attachmentEditorDidRequestDeselectingAttachment)===null||n===void 0?void 0:n.call(t,this.attachment)}didInputCaption(e){this.pendingCaption=e.target.value.replace(/\s/g," ").trim()}didChangeCaption(e){return this.savePendingCaption()}didBlurCaption(e){return this.savePendingCaption()}},Aa=class extends Ge{constructor(e,t){super(...arguments),this.didFocus=this.didFocus.bind(this),this.didBlur=this.didBlur.bind(this),this.didClickAttachment=this.didClickAttachment.bind(this),this.element=e,this.composition=t,this.documentView=new cr(this.composition.document,{element:this.element}),Ke("focus",{onElement:this.element,withCallback:this.didFocus}),Ke("blur",{onElement:this.element,withCallback:this.didBlur}),Ke("click",{onElement:this.element,matchingSelector:"a[contenteditable=false]",preventDefault:!0}),Ke("mousedown",{onElement:this.element,matchingSelector:Rn,withCallback:this.didClickAttachment}),Ke("click",{onElement:this.element,matchingSelector:"a".concat(Rn),preventDefault:!0})}didFocus(e){var t;let n=()=>{var r,s;if(!this.focused)return this.focused=!0,(r=this.delegate)===null||r===void 0||(s=r.compositionControllerDidFocus)===null||s===void 0?void 0:s.call(r)};return((t=this.blurPromise)===null||t===void 0?void 0:t.then(n))||n()}didBlur(e){this.blurPromise=new Promise(t=>Cu(()=>{var n,r;return ku(this.element)||(this.focused=null,(n=this.delegate)===null||n===void 0||(r=n.compositionControllerDidBlur)===null||r===void 0||r.call(n)),this.blurPromise=null,t()}))}didClickAttachment(e,t){var n,r;let s=this.findAttachmentForElement(t),a=!!on(e.target,{matchingSelector:"figcaption"});return(n=this.delegate)===null||n===void 0||(r=n.compositionControllerDidSelectAttachment)===null||r===void 0?void 0:r.call(n,s,{editCaption:a})}getSerializableElement(){return this.isEditingAttachment()?this.documentView.shadowElement:this.element}render(){var e,t,n,r,s,a;return this.revision!==this.composition.revision&&(this.documentView.setDocument(this.composition.document),this.documentView.render(),this.revision=this.composition.revision),this.canSyncDocumentView()&&!this.documentView.isSynced()&&((n=this.delegate)===null||n===void 0||(r=n.compositionControllerWillSyncDocumentView)===null||r===void 0||r.call(n),this.documentView.sync(),(s=this.delegate)===null||s===void 0||(a=s.compositionControllerDidSyncDocumentView)===null||a===void 0||a.call(s)),(e=this.delegate)===null||e===void 0||(t=e.compositionControllerDidRender)===null||t===void 0?void 0:t.call(e)}rerenderViewForObject(e){return this.invalidateViewForObject(e),this.render()}invalidateViewForObject(e){return this.documentView.invalidateViewForObject(e)}isViewCachingEnabled(){return this.documentView.isViewCachingEnabled()}enableViewCaching(){return this.documentView.enableViewCaching()}disableViewCaching(){return this.documentView.disableViewCaching()}refreshViewCache(){return this.documentView.garbageCollectCachedViews()}isEditingAttachment(){return!!this.attachmentEditor}installAttachmentEditorForAttachment(e,t){var n;if(((n=this.attachmentEditor)===null||n===void 0?void 0:n.attachment)===e)return;let r=this.documentView.findElementForObject(e);if(!r)return;this.uninstallAttachmentEditor();let s=this.composition.document.getAttachmentPieceForAttachment(e);this.attachmentEditor=new ka(s,r,this.element,t),this.attachmentEditor.delegate=this}uninstallAttachmentEditor(){var e;return(e=this.attachmentEditor)===null||e===void 0?void 0:e.uninstall()}didUninstallAttachmentEditor(){return this.attachmentEditor=null,this.render()}attachmentEditorDidRequestUpdatingAttributesForAttachment(e,t){var n,r;return(n=this.delegate)===null||n===void 0||(r=n.compositionControllerWillUpdateAttachment)===null||r===void 0||r.call(n,t),this.composition.updateAttributesForAttachment(e,t)}attachmentEditorDidRequestRemovingAttributeForAttachment(e,t){var n,r;return(n=this.delegate)===null||n===void 0||(r=n.compositionControllerWillUpdateAttachment)===null||r===void 0||r.call(n,t),this.composition.removeAttributeForAttachment(e,t)}attachmentEditorDidRequestRemovalOfAttachment(e){var t,n;return(t=this.delegate)===null||t===void 0||(n=t.compositionControllerDidRequestRemovalOfAttachment)===null||n===void 0?void 0:n.call(t,e)}attachmentEditorDidRequestDeselectingAttachment(e){var t,n;return(t=this.delegate)===null||t===void 0||(n=t.compositionControllerDidRequestDeselectingAttachment)===null||n===void 0?void 0:n.call(t,e)}canSyncDocumentView(){return!this.isEditingAttachment()}findAttachmentForElement(e){return this.composition.document.getAttachmentById(parseInt(e.dataset.trixId,10))}},Ea=class extends Ge{},yc="data-trix-mutable",fg="[".concat(yc,"]"),pg={attributes:!0,childList:!0,characterData:!0,characterDataOldValue:!0,subtree:!0},Ca=class extends Ge{constructor(e){super(e),this.didMutate=this.didMutate.bind(this),this.element=e,this.observer=new window.MutationObserver(this.didMutate),this.start()}start(){return this.reset(),this.observer.observe(this.element,pg)}stop(){return this.observer.disconnect()}didMutate(e){var t,n;if(this.mutations.push(...Array.from(this.findSignificantMutations(e)||[])),this.mutations.length)return(t=this.delegate)===null||t===void 0||(n=t.elementDidMutate)===null||n===void 0||n.call(t,this.getMutationSummary()),this.reset()}reset(){this.mutations=[]}findSignificantMutations(e){return e.filter(t=>this.mutationIsSignificant(t))}mutationIsSignificant(e){if(this.nodeIsMutable(e.target))return!1;for(let t of Array.from(this.nodesModifiedByMutation(e)))if(this.nodeIsSignificant(t))return!0;return!1}nodeIsSignificant(e){return e!==this.element&&!this.nodeIsMutable(e)&&!ec(e)}nodeIsMutable(e){return on(e,{matchingSelector:fg})}nodesModifiedByMutation(e){let t=[];switch(e.type){case"attributes":e.attributeName!==yc&&t.push(e.target);break;case"characterData":t.push(e.target.parentNode),t.push(e.target);break;case"childList":t.push(...Array.from(e.addedNodes||[])),t.push(...Array.from(e.removedNodes||[]))}return t}getMutationSummary(){return this.getTextMutationSummary()}getTextMutationSummary(){let{additions:e,deletions:t}=this.getTextChangesFromCharacterData(),n=this.getTextChangesFromChildList();Array.from(n.additions).forEach(u=>{Array.from(e).includes(u)||e.push(u)}),t.push(...Array.from(n.deletions||[]));let r={},s=e.join("");s&&(r.textAdded=s);let a=t.join("");return a&&(r.textDeleted=a),r}getMutationsByType(e){return Array.from(this.mutations).filter(t=>t.type===e)}getTextChangesFromChildList(){let e,t,n=[],r=[];Array.from(this.getMutationsByType("childList")).forEach(u=>{n.push(...Array.from(u.addedNodes||[])),r.push(...Array.from(u.removedNodes||[]))}),n.length===0&&r.length===1&&or(r[0])?(e=[],t=[`
`]):(e=pu(n),t=pu(r));let s=e.filter((u,c)=>u!==t[c]).map(Gr),a=t.filter((u,c)=>u!==e[c]).map(Gr);return{additions:s,deletions:a}}getTextChangesFromCharacterData(){let e,t,n=this.getMutationsByType("characterData");if(n.length){let r=n[0],s=n[n.length-1],a=function(u,c){let v,k;return u=Nn.box(u),(c=Nn.box(c)).length<u.length?[k,v]=Ad(u,c):[v,k]=Ad(c,u),{added:v,removed:k}}(Gr(r.oldValue),Gr(s.target.data));e=a.added,t=a.removed}return{additions:e?[e]:[],deletions:t?[t]:[]}}},pu=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],e=[];for(let t of Array.from(i))switch(t.nodeType){case Node.TEXT_NODE:e.push(t.data);break;case Node.ELEMENT_NODE:yt(t)==="br"?e.push(`
`):e.push(...Array.from(pu(t.childNodes)||[]))}return e},Sa=class extends lr{constructor(e){super(...arguments),this.file=e}perform(e){let t=new FileReader;return t.onerror=()=>e(!1),t.onload=()=>{t.onerror=null;try{t.abort()}catch{}return e(!0,this.file)},t.readAsArrayBuffer(this.file)}},gu=class{constructor(e){this.element=e}shouldIgnore(e){return!!as.samsungAndroid&&(this.previousEvent=this.event,this.event=e,this.checkSamsungKeyboardBuggyModeStart(),this.checkSamsungKeyboardBuggyModeEnd(),this.buggyMode)}checkSamsungKeyboardBuggyModeStart(){this.insertingLongTextAfterUnidentifiedChar()&&gg(this.element.innerText,this.event.data)&&(this.buggyMode=!0,this.event.preventDefault())}checkSamsungKeyboardBuggyModeEnd(){this.buggyMode&&this.event.inputType!=="insertText"&&(this.buggyMode=!1)}insertingLongTextAfterUnidentifiedChar(){var e;return this.isBeforeInputInsertText()&&this.previousEventWasUnidentifiedKeydown()&&((e=this.event.data)===null||e===void 0?void 0:e.length)>50}isBeforeInputInsertText(){return this.event.type==="beforeinput"&&this.event.inputType==="insertText"}previousEventWasUnidentifiedKeydown(){var e,t;return((e=this.previousEvent)===null||e===void 0?void 0:e.type)==="keydown"&&((t=this.previousEvent)===null||t===void 0?void 0:t.key)==="Unidentified"}},gg=(i,e)=>$d(i)===$d(e),mg=new RegExp("(".concat("\uFFFC","|").concat(xa,"|").concat(an,"|\\s)+"),"g"),$d=i=>i.replace(mg," ").trim(),fr=class extends Ge{constructor(e){super(...arguments),this.element=e,this.mutationObserver=new Ca(this.element),this.mutationObserver.delegate=this,this.flakyKeyboardDetector=new gu(this.element);for(let t in this.constructor.events)Ke(t,{onElement:this.element,withCallback:this.handlerFor(t)})}elementDidMutate(e){}editorWillSyncDocumentView(){return this.mutationObserver.stop()}editorDidSyncDocumentView(){return this.mutationObserver.start()}requestRender(){var e,t;return(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidRequestRender)===null||t===void 0?void 0:t.call(e)}requestReparse(){var e,t;return(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidRequestReparse)===null||t===void 0||t.call(e),this.requestRender()}attachFiles(e){let t=Array.from(e).map(n=>new Sa(n));return Promise.all(t).then(n=>{this.handleInput(function(){var r,s;return(r=this.delegate)===null||r===void 0||r.inputControllerWillAttachFiles(),(s=this.responder)===null||s===void 0||s.insertFiles(n),this.requestRender()})})}handlerFor(e){return t=>{t.defaultPrevented||this.handleInput(()=>{if(!ku(this.element)){if(this.flakyKeyboardDetector.shouldIgnore(t))return;this.eventName=e,this.constructor.events[e].call(this,t)}})}}handleInput(e){try{var t;(t=this.delegate)===null||t===void 0||t.inputControllerWillHandleInput(),e.call(this)}finally{var n;(n=this.delegate)===null||n===void 0||n.inputControllerDidHandleInput()}}createLinkHTML(e,t){let n=document.createElement("a");return n.href=e,n.textContent=t||e,n.outerHTML}},Xo;Mt(fr,"events",{});var{browser:vg,keyNames:wc}=os,bg=0,li=class extends fr{constructor(){super(...arguments),this.resetInputSummary()}setInputSummary(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};this.inputSummary.eventName=this.eventName;for(let t in e){let n=e[t];this.inputSummary[t]=n}return this.inputSummary}resetInputSummary(){this.inputSummary={}}reset(){return this.resetInputSummary(),Fn.reset()}elementDidMutate(e){var t,n;return this.isComposing()?(t=this.delegate)===null||t===void 0||(n=t.inputControllerDidAllowUnhandledInput)===null||n===void 0?void 0:n.call(t):this.handleInput(function(){return this.mutationIsSignificant(e)&&(this.mutationIsExpected(e)?this.requestRender():this.requestReparse()),this.reset()})}mutationIsExpected(e){let{textAdded:t,textDeleted:n}=e;if(this.inputSummary.preferDocument)return!0;let r=t!=null?t===this.inputSummary.textAdded:!this.inputSummary.textAdded,s=n!=null?this.inputSummary.didDelete:!this.inputSummary.didDelete,a=[`
`,` 
`].includes(t)&&!r,u=n===`
`&&!s;if(a&&!u||u&&!a){let v=this.getSelectedRange();if(v){var c;let k=a?t.replace(/\n$/,"").length||-1:t?.length||1;if((c=this.responder)!==null&&c!==void 0&&c.positionIsBlockBreak(v[1]+k))return!0}}return r&&s}mutationIsSignificant(e){var t;let n=Object.keys(e).length>0,r=((t=this.compositionInput)===null||t===void 0?void 0:t.getEndData())==="";return n||!r}getCompositionInput(){if(this.isComposing())return this.compositionInput;this.compositionInput=new Ei(this)}isComposing(){return this.compositionInput&&!this.compositionInput.isEnded()}deleteInDirection(e,t){var n;return((n=this.responder)===null||n===void 0?void 0:n.deleteInDirection(e))!==!1?this.setInputSummary({didDelete:!0}):t?(t.preventDefault(),this.requestRender()):void 0}serializeSelectionToDataTransfer(e){var t;if(!function(r){if(r==null||!r.setData)return!1;for(let s in wd){let a=wd[s];try{if(r.setData(s,a),!r.getData(s)===a)return!1}catch{return!1}}return!0}(e))return;let n=(t=this.responder)===null||t===void 0?void 0:t.getSelectedDocument().toSerializableDocument();return e.setData("application/x-trix-document",JSON.stringify(n)),e.setData("text/html",cr.render(n).innerHTML),e.setData("text/plain",n.toString().replace(/\n$/,"")),!0}canAcceptDataTransfer(e){let t={};return Array.from(e?.types||[]).forEach(n=>{t[n]=!0}),t.Files||t["application/x-trix-document"]||t["text/html"]||t["text/plain"]}getPastedHTMLUsingHiddenElement(e){let t=this.getSelectedRange(),n={position:"absolute",left:"".concat(window.pageXOffset,"px"),top:"".concat(window.pageYOffset,"px"),opacity:0},r=be({style:n,tagName:"div",editable:!0});return document.body.appendChild(r),r.focus(),requestAnimationFrame(()=>{let s=r.innerHTML;return un(r),this.setSelectedRange(t),e(s)})}};Mt(li,"events",{keydown(i){this.isComposing()||this.resetInputSummary(),this.inputSummary.didInput=!0;let e=wc[i.keyCode];if(e){var t;let r=this.keys;["ctrl","alt","shift","meta"].forEach(s=>{var a;i["".concat(s,"Key")]&&(s==="ctrl"&&(s="control"),r=(a=r)===null||a===void 0?void 0:a[s])}),((t=r)===null||t===void 0?void 0:t[e])!=null&&(this.setInputSummary({keyName:e}),Fn.reset(),r[e].call(this,i))}if(rc(i)){let r=String.fromCharCode(i.keyCode).toLowerCase();if(r){var n;let s=["alt","shift"].map(a=>{if(i["".concat(a,"Key")])return a}).filter(a=>a);s.push(r),(n=this.delegate)!==null&&n!==void 0&&n.inputControllerDidReceiveKeyboardCommand(s)&&i.preventDefault()}}},keypress(i){if(this.inputSummary.eventName!=null||i.metaKey||i.ctrlKey&&!i.altKey)return;let e=_g(i);var t,n;return e?((t=this.delegate)===null||t===void 0||t.inputControllerWillPerformTyping(),(n=this.responder)===null||n===void 0||n.insertString(e),this.setInputSummary({textAdded:e,didDelete:this.selectionIsExpanded()})):void 0},textInput(i){let{data:e}=i,{textAdded:t}=this.inputSummary;if(t&&t!==e&&t.toUpperCase()===e){var n;let r=this.getSelectedRange();return this.setSelectedRange([r[0],r[1]+t.length]),(n=this.responder)===null||n===void 0||n.insertString(e),this.setInputSummary({textAdded:e}),this.setSelectedRange(r)}},dragenter(i){i.preventDefault()},dragstart(i){var e,t;return this.serializeSelectionToDataTransfer(i.dataTransfer),this.draggedRange=this.getSelectedRange(),(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidStartDrag)===null||t===void 0?void 0:t.call(e)},dragover(i){if(this.draggedRange||this.canAcceptDataTransfer(i.dataTransfer)){i.preventDefault();let n={x:i.clientX,y:i.clientY};var e,t;if(!pr(n,this.draggingPoint))return this.draggingPoint=n,(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidReceiveDragOverPoint)===null||t===void 0?void 0:t.call(e,this.draggingPoint)}},dragend(i){var e,t;(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidCancelDrag)===null||t===void 0||t.call(e),this.draggedRange=null,this.draggingPoint=null},drop(i){var e,t;i.preventDefault();let n=(e=i.dataTransfer)===null||e===void 0?void 0:e.files,r=i.dataTransfer.getData("application/x-trix-document"),s={x:i.clientX,y:i.clientY};if((t=this.responder)===null||t===void 0||t.setLocationRangeFromPointRange(s),n!=null&&n.length)this.attachFiles(n);else if(this.draggedRange){var a,u;(a=this.delegate)===null||a===void 0||a.inputControllerWillMoveText(),(u=this.responder)===null||u===void 0||u.moveTextFromRange(this.draggedRange),this.draggedRange=null,this.requestRender()}else if(r){var c;let v=Ot.fromJSONString(r);(c=this.responder)===null||c===void 0||c.insertDocument(v),this.requestRender()}this.draggedRange=null,this.draggingPoint=null},cut(i){var e,t;if((e=this.responder)!==null&&e!==void 0&&e.selectionIsExpanded()&&(this.serializeSelectionToDataTransfer(i.clipboardData)&&i.preventDefault(),(t=this.delegate)===null||t===void 0||t.inputControllerWillCutText(),this.deleteInDirection("backward"),i.defaultPrevented))return this.requestRender()},copy(i){var e;(e=this.responder)!==null&&e!==void 0&&e.selectionIsExpanded()&&this.serializeSelectionToDataTransfer(i.clipboardData)&&i.preventDefault()},paste(i){let e=i.clipboardData||i.testClipboardData,t={clipboard:e};if(!e||kg(i))return void this.getPastedHTMLUsingHiddenElement(h=>{var f,_,C;return t.type="text/html",t.html=h,(f=this.delegate)===null||f===void 0||f.inputControllerWillPaste(t),(_=this.responder)===null||_===void 0||_.insertHTML(t.html),this.requestRender(),(C=this.delegate)===null||C===void 0?void 0:C.inputControllerDidPaste(t)});let n=e.getData("URL"),r=e.getData("text/html"),s=e.getData("public.url-name");if(n){var a,u,c;let h;t.type="text/html",h=s?Du(s).trim():n,t.html=this.createLinkHTML(n,h),(a=this.delegate)===null||a===void 0||a.inputControllerWillPaste(t),this.setInputSummary({textAdded:h,didDelete:this.selectionIsExpanded()}),(u=this.responder)===null||u===void 0||u.insertHTML(t.html),this.requestRender(),(c=this.delegate)===null||c===void 0||c.inputControllerDidPaste(t)}else if(nc(e)){var v,k,A;t.type="text/plain",t.string=e.getData("text/plain"),(v=this.delegate)===null||v===void 0||v.inputControllerWillPaste(t),this.setInputSummary({textAdded:t.string,didDelete:this.selectionIsExpanded()}),(k=this.responder)===null||k===void 0||k.insertString(t.string),this.requestRender(),(A=this.delegate)===null||A===void 0||A.inputControllerDidPaste(t)}else if(r){var N,y,d;t.type="text/html",t.html=r,(N=this.delegate)===null||N===void 0||N.inputControllerWillPaste(t),(y=this.responder)===null||y===void 0||y.insertHTML(t.html),this.requestRender(),(d=this.delegate)===null||d===void 0||d.inputControllerDidPaste(t)}else if(Array.from(e.types).includes("Files")){var g,b;let h=(g=e.items)===null||g===void 0||(g=g[0])===null||g===void 0||(b=g.getAsFile)===null||b===void 0?void 0:b.call(g);if(h){var E,P,o;let f=yg(h);!h.name&&f&&(h.name="pasted-file-".concat(++bg,".").concat(f)),t.type="File",t.file=h,(E=this.delegate)===null||E===void 0||E.inputControllerWillAttachFiles(),(P=this.responder)===null||P===void 0||P.insertFile(t.file),this.requestRender(),(o=this.delegate)===null||o===void 0||o.inputControllerDidPaste(t)}}i.preventDefault()},compositionstart(i){return this.getCompositionInput().start(i.data)},compositionupdate(i){return this.getCompositionInput().update(i.data)},compositionend(i){return this.getCompositionInput().end(i.data)},beforeinput(i){this.inputSummary.didInput=!0},input(i){return this.inputSummary.didInput=!0,i.stopPropagation()}}),Mt(li,"keys",{backspace(i){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("backward",i)},delete(i){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("forward",i)},return(i){var e,t;return this.setInputSummary({preferDocument:!0}),(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0?void 0:t.insertLineBreak()},tab(i){var e,t;(e=this.responder)!==null&&e!==void 0&&e.canIncreaseNestingLevel()&&((t=this.responder)===null||t===void 0||t.increaseNestingLevel(),this.requestRender(),i.preventDefault())},left(i){var e;if(this.selectionIsInCursorTarget())return i.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("backward")},right(i){var e;if(this.selectionIsInCursorTarget())return i.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("forward")},control:{d(i){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("forward",i)},h(i){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("backward",i)},o(i){var e,t;return i.preventDefault(),(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0||t.insertString(`
`,{updatePosition:!1}),this.requestRender()}},shift:{return(i){var e,t;(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0||t.insertString(`
`),this.requestRender(),i.preventDefault()},tab(i){var e,t;(e=this.responder)!==null&&e!==void 0&&e.canDecreaseNestingLevel()&&((t=this.responder)===null||t===void 0||t.decreaseNestingLevel(),this.requestRender(),i.preventDefault())},left(i){if(this.selectionIsInCursorTarget())return i.preventDefault(),this.expandSelectionInDirection("backward")},right(i){if(this.selectionIsInCursorTarget())return i.preventDefault(),this.expandSelectionInDirection("forward")}},alt:{backspace(i){var e;return this.setInputSummary({preferDocument:!1}),(e=this.delegate)===null||e===void 0?void 0:e.inputControllerWillPerformTyping()}},meta:{backspace(i){var e;return this.setInputSummary({preferDocument:!1}),(e=this.delegate)===null||e===void 0?void 0:e.inputControllerWillPerformTyping()}}}),li.proxyMethod("responder?.getSelectedRange"),li.proxyMethod("responder?.setSelectedRange"),li.proxyMethod("responder?.expandSelectionInDirection"),li.proxyMethod("responder?.selectionIsInCursorTarget"),li.proxyMethod("responder?.selectionIsExpanded");var yg=i=>{var e;return(e=i.type)===null||e===void 0||(e=e.match(/\/(\w+)$/))===null||e===void 0?void 0:e[1]},wg=!((Xo=" ".codePointAt)===null||Xo===void 0||!Xo.call(" ",0)),_g=function(i){if(i.key&&wg&&i.key.codePointAt(0)===i.keyCode)return i.key;{let e;if(i.which===null?e=i.keyCode:i.which!==0&&i.charCode!==0&&(e=i.charCode),e!=null&&wc[e]!=="escape")return Nn.fromCodepoints([e]).toString()}},kg=function(i){let e=i.clipboardData;if(e){if(e.types.includes("text/html")){for(let t of e.types){let n=/^CorePasteboardFlavorType/.test(t),r=/^dyn\./.test(t)&&e.getData(t);if(n||r)return!0}return!1}{let t=e.types.includes("com.apple.webarchive"),n=e.types.includes("com.apple.flat-rtfd");return t||n}}},Ei=class extends Ge{constructor(e){super(...arguments),this.inputController=e,this.responder=this.inputController.responder,this.delegate=this.inputController.delegate,this.inputSummary=this.inputController.inputSummary,this.data={}}start(e){if(this.data.start=e,this.isSignificant()){var t,n;this.inputSummary.eventName==="keypress"&&this.inputSummary.textAdded&&((n=this.responder)===null||n===void 0||n.deleteInDirection("left")),this.selectionIsExpanded()||(this.insertPlaceholder(),this.requestRender()),this.range=(t=this.responder)===null||t===void 0?void 0:t.getSelectedRange()}}update(e){if(this.data.update=e,this.isSignificant()){let t=this.selectPlaceholder();t&&(this.forgetPlaceholder(),this.range=t)}}end(e){return this.data.end=e,this.isSignificant()?(this.forgetPlaceholder(),this.canApplyToDocument()?(this.setInputSummary({preferDocument:!0,didInput:!1}),(t=this.delegate)===null||t===void 0||t.inputControllerWillPerformTyping(),(n=this.responder)===null||n===void 0||n.setSelectedRange(this.range),(r=this.responder)===null||r===void 0||r.insertString(this.data.end),(s=this.responder)===null||s===void 0?void 0:s.setSelectedRange(this.range[0]+this.data.end.length)):this.data.start!=null||this.data.update!=null?(this.requestReparse(),this.inputController.reset()):void 0):this.inputController.reset();var t,n,r,s}getEndData(){return this.data.end}isEnded(){return this.getEndData()!=null}isSignificant(){return!vg.composesExistingText||this.inputSummary.didInput}canApplyToDocument(){var e,t;return((e=this.data.start)===null||e===void 0?void 0:e.length)===0&&((t=this.data.end)===null||t===void 0?void 0:t.length)>0&&this.range}};Ei.proxyMethod("inputController.setInputSummary"),Ei.proxyMethod("inputController.requestRender"),Ei.proxyMethod("inputController.requestReparse"),Ei.proxyMethod("responder?.selectionIsExpanded"),Ei.proxyMethod("responder?.insertPlaceholder"),Ei.proxyMethod("responder?.selectPlaceholder"),Ei.proxyMethod("responder?.forgetPlaceholder");var In=class extends fr{constructor(){super(...arguments),this.render=this.render.bind(this)}elementDidMutate(){return this.scheduledRender?this.composing?(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidAllowUnhandledInput)===null||t===void 0?void 0:t.call(e):void 0:this.reparse();var e,t}scheduleRender(){return this.scheduledRender?this.scheduledRender:this.scheduledRender=requestAnimationFrame(this.render)}render(){var e,t;cancelAnimationFrame(this.scheduledRender),this.scheduledRender=null,this.composing||(t=this.delegate)===null||t===void 0||t.render(),(e=this.afterRender)===null||e===void 0||e.call(this),this.afterRender=null}reparse(){var e;return(e=this.delegate)===null||e===void 0?void 0:e.reparse()}insertString(){var e;let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",n=arguments.length>1?arguments[1]:void 0;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.withTargetDOMRange(function(){var r;return(r=this.responder)===null||r===void 0?void 0:r.insertString(t,n)})}toggleAttributeIfSupported(e){var t;if(su().includes(e))return(t=this.delegate)===null||t===void 0||t.inputControllerWillPerformFormatting(e),this.withTargetDOMRange(function(){var n;return(n=this.responder)===null||n===void 0?void 0:n.toggleCurrentAttribute(e)})}activateAttributeIfSupported(e,t){var n;if(su().includes(e))return(n=this.delegate)===null||n===void 0||n.inputControllerWillPerformFormatting(e),this.withTargetDOMRange(function(){var r;return(r=this.responder)===null||r===void 0?void 0:r.setCurrentAttribute(e,t)})}deleteInDirection(e){let{recordUndoEntry:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{recordUndoEntry:!0};var n;t&&((n=this.delegate)===null||n===void 0||n.inputControllerWillPerformTyping());let r=()=>{var a;return(a=this.responder)===null||a===void 0?void 0:a.deleteInDirection(e)},s=this.getTargetDOMRange({minLength:this.composing?1:2});return s?this.withTargetDOMRange(s,r):r()}withTargetDOMRange(e,t){var n;return typeof e=="function"&&(t=e,e=this.getTargetDOMRange()),e?(n=this.responder)===null||n===void 0?void 0:n.withTargetDOMRange(e,t.bind(this)):(Fn.reset(),t.call(this))}getTargetDOMRange(){var e,t;let{minLength:n}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{minLength:0},r=(e=(t=this.event).getTargetRanges)===null||e===void 0?void 0:e.call(t);if(r&&r.length){let s=Ag(r[0]);if(n===0||s.toString().length>=n)return s}}withEvent(e,t){let n;this.event=e;try{n=t.call(this)}finally{this.event=null}return n}};Mt(In,"events",{keydown(i){if(rc(i)){var e;let t=Sg(i);(e=this.delegate)!==null&&e!==void 0&&e.inputControllerDidReceiveKeyboardCommand(t)&&i.preventDefault()}else{let t=i.key;i.altKey&&(t+="+Alt"),i.shiftKey&&(t+="+Shift");let n=this.constructor.keys[t];if(n)return this.withEvent(i,n)}},paste(i){var e;let t,n=(e=i.clipboardData)===null||e===void 0?void 0:e.getData("URL");return _c(i)?(i.preventDefault(),this.attachFiles(i.clipboardData.files)):Cg(i)?(i.preventDefault(),t={type:"text/plain",string:i.clipboardData.getData("text/plain")},(r=this.delegate)===null||r===void 0||r.inputControllerWillPaste(t),(s=this.responder)===null||s===void 0||s.insertString(t.string),this.render(),(a=this.delegate)===null||a===void 0?void 0:a.inputControllerDidPaste(t)):n?(i.preventDefault(),t={type:"text/html",html:this.createLinkHTML(n)},(u=this.delegate)===null||u===void 0||u.inputControllerWillPaste(t),(c=this.responder)===null||c===void 0||c.insertHTML(t.html),this.render(),(v=this.delegate)===null||v===void 0?void 0:v.inputControllerDidPaste(t)):void 0;var r,s,a,u,c,v},beforeinput(i){let e=this.constructor.inputTypes[i.inputType],t=(n=i,!(!/iPhone|iPad/.test(navigator.userAgent)||n.inputType&&n.inputType!=="insertParagraph"));var n;e&&(this.withEvent(i,e),t||this.scheduleRender()),t&&this.render()},input(i){Fn.reset()},dragstart(i){var e,t;(e=this.responder)!==null&&e!==void 0&&e.selectionContainsAttachments()&&(i.dataTransfer.setData("application/x-trix-dragging",!0),this.dragging={range:(t=this.responder)===null||t===void 0?void 0:t.getSelectedRange(),point:Zo(i)})},dragenter(i){Yo(i)&&i.preventDefault()},dragover(i){if(this.dragging){i.preventDefault();let t=Zo(i);var e;if(!pr(t,this.dragging.point))return this.dragging.point=t,(e=this.responder)===null||e===void 0?void 0:e.setLocationRangeFromPointRange(t)}else Yo(i)&&i.preventDefault()},drop(i){var e,t;if(this.dragging)return i.preventDefault(),(e=this.delegate)===null||e===void 0||e.inputControllerWillMoveText(),(t=this.responder)===null||t===void 0||t.moveTextFromRange(this.dragging.range),this.dragging=null,this.scheduleRender();if(Yo(i)){var n;i.preventDefault();let r=Zo(i);return(n=this.responder)===null||n===void 0||n.setLocationRangeFromPointRange(r),this.attachFiles(i.dataTransfer.files)}},dragend(){var i;this.dragging&&((i=this.responder)===null||i===void 0||i.setSelectedRange(this.dragging.range),this.dragging=null)},compositionend(i){this.composing&&(this.composing=!1,as.recentAndroid||this.scheduleRender())}}),Mt(In,"keys",{ArrowLeft(){var i,e;if((i=this.responder)!==null&&i!==void 0&&i.shouldManageMovingCursorInDirection("backward"))return this.event.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("backward")},ArrowRight(){var i,e;if((i=this.responder)!==null&&i!==void 0&&i.shouldManageMovingCursorInDirection("forward"))return this.event.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("forward")},Backspace(){var i,e,t;if((i=this.responder)!==null&&i!==void 0&&i.shouldManageDeletingInDirection("backward"))return this.event.preventDefault(),(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0||t.deleteInDirection("backward"),this.render()},Tab(){var i,e;if((i=this.responder)!==null&&i!==void 0&&i.canIncreaseNestingLevel())return this.event.preventDefault(),(e=this.responder)===null||e===void 0||e.increaseNestingLevel(),this.render()},"Tab+Shift"(){var i,e;if((i=this.responder)!==null&&i!==void 0&&i.canDecreaseNestingLevel())return this.event.preventDefault(),(e=this.responder)===null||e===void 0||e.decreaseNestingLevel(),this.render()}}),Mt(In,"inputTypes",{deleteByComposition(){return this.deleteInDirection("backward",{recordUndoEntry:!1})},deleteByCut(){return this.deleteInDirection("backward")},deleteByDrag(){return this.event.preventDefault(),this.withTargetDOMRange(function(){var i;this.deleteByDragRange=(i=this.responder)===null||i===void 0?void 0:i.getSelectedRange()})},deleteCompositionText(){return this.deleteInDirection("backward",{recordUndoEntry:!1})},deleteContent(){return this.deleteInDirection("backward")},deleteContentBackward(){return this.deleteInDirection("backward")},deleteContentForward(){return this.deleteInDirection("forward")},deleteEntireSoftLine(){return this.deleteInDirection("forward")},deleteHardLineBackward(){return this.deleteInDirection("backward")},deleteHardLineForward(){return this.deleteInDirection("forward")},deleteSoftLineBackward(){return this.deleteInDirection("backward")},deleteSoftLineForward(){return this.deleteInDirection("forward")},deleteWordBackward(){return this.deleteInDirection("backward")},deleteWordForward(){return this.deleteInDirection("forward")},formatBackColor(){return this.activateAttributeIfSupported("backgroundColor",this.event.data)},formatBold(){return this.toggleAttributeIfSupported("bold")},formatFontColor(){return this.activateAttributeIfSupported("color",this.event.data)},formatFontName(){return this.activateAttributeIfSupported("font",this.event.data)},formatIndent(){var i;if((i=this.responder)!==null&&i!==void 0&&i.canIncreaseNestingLevel())return this.withTargetDOMRange(function(){var e;return(e=this.responder)===null||e===void 0?void 0:e.increaseNestingLevel()})},formatItalic(){return this.toggleAttributeIfSupported("italic")},formatJustifyCenter(){return this.toggleAttributeIfSupported("justifyCenter")},formatJustifyFull(){return this.toggleAttributeIfSupported("justifyFull")},formatJustifyLeft(){return this.toggleAttributeIfSupported("justifyLeft")},formatJustifyRight(){return this.toggleAttributeIfSupported("justifyRight")},formatOutdent(){var i;if((i=this.responder)!==null&&i!==void 0&&i.canDecreaseNestingLevel())return this.withTargetDOMRange(function(){var e;return(e=this.responder)===null||e===void 0?void 0:e.decreaseNestingLevel()})},formatRemove(){this.withTargetDOMRange(function(){for(let t in(i=this.responder)===null||i===void 0?void 0:i.getCurrentAttributes()){var i,e;(e=this.responder)===null||e===void 0||e.removeCurrentAttribute(t)}})},formatSetBlockTextDirection(){return this.activateAttributeIfSupported("blockDir",this.event.data)},formatSetInlineTextDirection(){return this.activateAttributeIfSupported("textDir",this.event.data)},formatStrikeThrough(){return this.toggleAttributeIfSupported("strike")},formatSubscript(){return this.toggleAttributeIfSupported("sub")},formatSuperscript(){return this.toggleAttributeIfSupported("sup")},formatUnderline(){return this.toggleAttributeIfSupported("underline")},historyRedo(){var i;return(i=this.delegate)===null||i===void 0?void 0:i.inputControllerWillPerformRedo()},historyUndo(){var i;return(i=this.delegate)===null||i===void 0?void 0:i.inputControllerWillPerformUndo()},insertCompositionText(){return this.composing=!0,this.insertString(this.event.data)},insertFromComposition(){return this.composing=!1,this.insertString(this.event.data)},insertFromDrop(){let i=this.deleteByDragRange;var e;if(i)return this.deleteByDragRange=null,(e=this.delegate)===null||e===void 0||e.inputControllerWillMoveText(),this.withTargetDOMRange(function(){var t;return(t=this.responder)===null||t===void 0?void 0:t.moveTextFromRange(i)})},insertFromPaste(){let{dataTransfer:i}=this.event,e={dataTransfer:i},t=i.getData("URL"),n=i.getData("text/html");if(t){var r;let c;this.event.preventDefault(),e.type="text/html";let v=i.getData("public.url-name");c=v?Du(v).trim():t,e.html=this.createLinkHTML(t,c),(r=this.delegate)===null||r===void 0||r.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var k;return(k=this.responder)===null||k===void 0?void 0:k.insertHTML(e.html)}),this.afterRender=()=>{var k;return(k=this.delegate)===null||k===void 0?void 0:k.inputControllerDidPaste(e)}}else if(nc(i)){var s;e.type="text/plain",e.string=i.getData("text/plain"),(s=this.delegate)===null||s===void 0||s.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var c;return(c=this.responder)===null||c===void 0?void 0:c.insertString(e.string)}),this.afterRender=()=>{var c;return(c=this.delegate)===null||c===void 0?void 0:c.inputControllerDidPaste(e)}}else if(Eg(this.event)){var a;e.type="File",e.file=i.files[0],(a=this.delegate)===null||a===void 0||a.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var c;return(c=this.responder)===null||c===void 0?void 0:c.insertFile(e.file)}),this.afterRender=()=>{var c;return(c=this.delegate)===null||c===void 0?void 0:c.inputControllerDidPaste(e)}}else if(n){var u;this.event.preventDefault(),e.type="text/html",e.html=n,(u=this.delegate)===null||u===void 0||u.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var c;return(c=this.responder)===null||c===void 0?void 0:c.insertHTML(e.html)}),this.afterRender=()=>{var c;return(c=this.delegate)===null||c===void 0?void 0:c.inputControllerDidPaste(e)}}},insertFromYank(){return this.insertString(this.event.data)},insertLineBreak(){return this.insertString(`
`)},insertLink(){return this.activateAttributeIfSupported("href",this.event.data)},insertOrderedList(){return this.toggleAttributeIfSupported("number")},insertParagraph(){var i;return(i=this.delegate)===null||i===void 0||i.inputControllerWillPerformTyping(),this.withTargetDOMRange(function(){var e;return(e=this.responder)===null||e===void 0?void 0:e.insertLineBreak()})},insertReplacementText(){let i=this.event.dataTransfer.getData("text/plain"),e=this.event.getTargetRanges()[0];this.withTargetDOMRange(e,()=>{this.insertString(i,{updatePosition:!1})})},insertText(){var i;return this.insertString(this.event.data||((i=this.event.dataTransfer)===null||i===void 0?void 0:i.getData("text/plain")))},insertTranspose(){return this.insertString(this.event.data)},insertUnorderedList(){return this.toggleAttributeIfSupported("bullet")}});var Ag=function(i){let e=document.createRange();return e.setStart(i.startContainer,i.startOffset),e.setEnd(i.endContainer,i.endOffset),e},Yo=i=>{var e;return Array.from(((e=i.dataTransfer)===null||e===void 0?void 0:e.types)||[]).includes("Files")},Eg=i=>{var e;return((e=i.dataTransfer.files)===null||e===void 0?void 0:e[0])&&!_c(i)&&!(t=>{let{dataTransfer:n}=t;return n.types.includes("Files")&&n.types.includes("text/html")&&n.getData("text/html").includes("urn:schemas-microsoft-com:office:office")})(i)},_c=function(i){let e=i.clipboardData;if(e)return Array.from(e.types).filter(t=>t.match(/file/i)).length===e.types.length&&e.files.length>=1},Cg=function(i){let e=i.clipboardData;if(e)return e.types.includes("text/plain")&&e.types.length===1},Sg=function(i){let e=[];return i.altKey&&e.push("alt"),i.shiftKey&&e.push("shift"),e.push(i.key),e},Zo=i=>({x:i.clientX,y:i.clientY}),mu="[data-trix-attribute]",vu="[data-trix-action]",Dg="".concat(mu,", ").concat(vu),La="[data-trix-dialog]",Tg="".concat(La,"[data-trix-active]"),xg="".concat(La," [data-trix-method]"),qd="".concat(La," [data-trix-input]"),Kd=(i,e)=>(e||(e=ar(i)),i.querySelector("[data-trix-input][name='".concat(e,"']"))),Jd=i=>i.getAttribute("data-trix-action"),ar=i=>i.getAttribute("data-trix-attribute")||i.getAttribute("data-trix-dialog-attribute"),Da=class extends Ge{constructor(e){super(e),this.didClickActionButton=this.didClickActionButton.bind(this),this.didClickAttributeButton=this.didClickAttributeButton.bind(this),this.didClickDialogButton=this.didClickDialogButton.bind(this),this.didKeyDownDialogInput=this.didKeyDownDialogInput.bind(this),this.element=e,this.attributes={},this.actions={},this.resetDialogInputs(),Ke("mousedown",{onElement:this.element,matchingSelector:vu,withCallback:this.didClickActionButton}),Ke("mousedown",{onElement:this.element,matchingSelector:mu,withCallback:this.didClickAttributeButton}),Ke("click",{onElement:this.element,matchingSelector:Dg,preventDefault:!0}),Ke("click",{onElement:this.element,matchingSelector:xg,withCallback:this.didClickDialogButton}),Ke("keydown",{onElement:this.element,matchingSelector:qd,withCallback:this.didKeyDownDialogInput})}didClickActionButton(e,t){var n;(n=this.delegate)===null||n===void 0||n.toolbarDidClickButton(),e.preventDefault();let r=Jd(t);return this.getDialog(r)?this.toggleDialog(r):(s=this.delegate)===null||s===void 0?void 0:s.toolbarDidInvokeAction(r,t);var s}didClickAttributeButton(e,t){var n;(n=this.delegate)===null||n===void 0||n.toolbarDidClickButton(),e.preventDefault();let r=ar(t);var s;return this.getDialog(r)?this.toggleDialog(r):(s=this.delegate)===null||s===void 0||s.toolbarDidToggleAttribute(r),this.refreshAttributeButtons()}didClickDialogButton(e,t){let n=on(t,{matchingSelector:La});return this[t.getAttribute("data-trix-method")].call(this,n)}didKeyDownDialogInput(e,t){if(e.keyCode===13){e.preventDefault();let n=t.getAttribute("name"),r=this.getDialog(n);this.setAttribute(r)}if(e.keyCode===27)return e.preventDefault(),this.hideDialog()}updateActions(e){return this.actions=e,this.refreshActionButtons()}refreshActionButtons(){return this.eachActionButton((e,t)=>{e.disabled=this.actions[t]===!1})}eachActionButton(e){return Array.from(this.element.querySelectorAll(vu)).map(t=>e(t,Jd(t)))}updateAttributes(e){return this.attributes=e,this.refreshAttributeButtons()}refreshAttributeButtons(){return this.eachAttributeButton((e,t)=>(e.disabled=this.attributes[t]===!1,this.attributes[t]||this.dialogIsVisible(t)?(e.setAttribute("data-trix-active",""),e.classList.add("trix-active")):(e.removeAttribute("data-trix-active"),e.classList.remove("trix-active"))))}eachAttributeButton(e){return Array.from(this.element.querySelectorAll(mu)).map(t=>e(t,ar(t)))}applyKeyboardCommand(e){let t=JSON.stringify(e.sort());for(let n of Array.from(this.element.querySelectorAll("[data-trix-key]"))){let r=n.getAttribute("data-trix-key").split("+");if(JSON.stringify(r.sort())===t)return Xr("mousedown",{onElement:n}),!0}return!1}dialogIsVisible(e){let t=this.getDialog(e);if(t)return t.hasAttribute("data-trix-active")}toggleDialog(e){return this.dialogIsVisible(e)?this.hideDialog():this.showDialog(e)}showDialog(e){var t,n;this.hideDialog(),(t=this.delegate)===null||t===void 0||t.toolbarWillShowDialog();let r=this.getDialog(e);r.setAttribute("data-trix-active",""),r.classList.add("trix-active"),Array.from(r.querySelectorAll("input[disabled]")).forEach(a=>{a.removeAttribute("disabled")});let s=ar(r);if(s){let a=Kd(r,e);a&&(a.value=this.attributes[s]||"",a.select())}return(n=this.delegate)===null||n===void 0?void 0:n.toolbarDidShowDialog(e)}setAttribute(e){var t;let n=ar(e),r=Kd(e,n);return!r.willValidate||(r.setCustomValidity(""),r.checkValidity()&&this.isSafeAttribute(r))?((t=this.delegate)===null||t===void 0||t.toolbarDidUpdateAttribute(n,r.value),this.hideDialog()):(r.setCustomValidity("Invalid value"),r.setAttribute("data-trix-validate",""),r.classList.add("trix-validate"),r.focus())}isSafeAttribute(e){return!e.hasAttribute("data-trix-validate-href")||da.isValidAttribute("a","href",e.value)}removeAttribute(e){var t;let n=ar(e);return(t=this.delegate)===null||t===void 0||t.toolbarDidRemoveAttribute(n),this.hideDialog()}hideDialog(){let e=this.element.querySelector(Tg);var t;if(e)return e.removeAttribute("data-trix-active"),e.classList.remove("trix-active"),this.resetDialogInputs(),(t=this.delegate)===null||t===void 0?void 0:t.toolbarDidHideDialog((n=>n.getAttribute("data-trix-dialog"))(e))}resetDialogInputs(){Array.from(this.element.querySelectorAll(qd)).forEach(e=>{e.setAttribute("disabled","disabled"),e.removeAttribute("data-trix-validate"),e.classList.remove("trix-validate")})}getDialog(e){return this.element.querySelector("[data-trix-dialog=".concat(e,"]"))}},On=class extends Ea{constructor(e){let{editorElement:t,document:n,html:r}=e;super(...arguments),this.editorElement=t,this.selectionManager=new Bi(this.editorElement),this.selectionManager.delegate=this,this.composition=new Ci,this.composition.delegate=this,this.attachmentManager=new ma(this.composition.getAttachments()),this.attachmentManager.delegate=this,this.inputController=Au.getLevel()===2?new In(this.editorElement):new li(this.editorElement),this.inputController.delegate=this,this.inputController.responder=this.composition,this.compositionController=new Aa(this.editorElement,this.composition),this.compositionController.delegate=this,this.toolbarController=new Da(this.editorElement.toolbarElement),this.toolbarController.delegate=this,this.editor=new ya(this.composition,this.selectionManager,this.editorElement),n?this.editor.loadDocument(n):this.editor.loadHTML(r)}registerSelectionManager(){return Fn.registerSelectionManager(this.selectionManager)}unregisterSelectionManager(){return Fn.unregisterSelectionManager(this.selectionManager)}render(){return this.compositionController.render()}reparse(){return this.composition.replaceHTML(this.editorElement.innerHTML)}compositionDidChangeDocument(e){if(this.notifyEditorElement("document-change"),!this.handlingInput)return this.render()}compositionDidChangeCurrentAttributes(e){return this.currentAttributes=e,this.toolbarController.updateAttributes(this.currentAttributes),this.updateCurrentActions(),this.notifyEditorElement("attributes-change",{attributes:this.currentAttributes})}compositionDidPerformInsertionAtRange(e){this.pasting&&(this.pastedRange=e)}compositionShouldAcceptFile(e){return this.notifyEditorElement("file-accept",{file:e})}compositionDidAddAttachment(e){let t=this.attachmentManager.manageAttachment(e);return this.notifyEditorElement("attachment-add",{attachment:t})}compositionDidEditAttachment(e){this.compositionController.rerenderViewForObject(e);let t=this.attachmentManager.manageAttachment(e);return this.notifyEditorElement("attachment-edit",{attachment:t}),this.notifyEditorElement("change")}compositionDidChangeAttachmentPreviewURL(e){return this.compositionController.invalidateViewForObject(e),this.notifyEditorElement("change")}compositionDidRemoveAttachment(e){let t=this.attachmentManager.unmanageAttachment(e);return this.notifyEditorElement("attachment-remove",{attachment:t})}compositionDidStartEditingAttachment(e,t){return this.attachmentLocationRange=this.composition.document.getLocationRangeOfAttachment(e),this.compositionController.installAttachmentEditorForAttachment(e,t),this.selectionManager.setLocationRange(this.attachmentLocationRange)}compositionDidStopEditingAttachment(e){this.compositionController.uninstallAttachmentEditor(),this.attachmentLocationRange=null}compositionDidRequestChangingSelectionToLocationRange(e){if(!this.loadingSnapshot||this.isFocused())return this.requestedLocationRange=e,this.compositionRevisionWhenLocationRangeRequested=this.composition.revision,this.handlingInput?void 0:this.render()}compositionWillLoadSnapshot(){this.loadingSnapshot=!0}compositionDidLoadSnapshot(){this.compositionController.refreshViewCache(),this.render(),this.loadingSnapshot=!1}getSelectionManager(){return this.selectionManager}attachmentManagerDidRequestRemovalOfAttachment(e){return this.removeAttachment(e)}compositionControllerWillSyncDocumentView(){return this.inputController.editorWillSyncDocumentView(),this.selectionManager.lock(),this.selectionManager.clearSelection()}compositionControllerDidSyncDocumentView(){return this.inputController.editorDidSyncDocumentView(),this.selectionManager.unlock(),this.updateCurrentActions(),this.notifyEditorElement("sync")}compositionControllerDidRender(){this.requestedLocationRange&&(this.compositionRevisionWhenLocationRangeRequested===this.composition.revision&&this.selectionManager.setLocationRange(this.requestedLocationRange),this.requestedLocationRange=null,this.compositionRevisionWhenLocationRangeRequested=null),this.renderedCompositionRevision!==this.composition.revision&&(this.runEditorFilters(),this.composition.updateCurrentAttributes(),this.notifyEditorElement("render")),this.renderedCompositionRevision=this.composition.revision}compositionControllerDidFocus(){return this.isFocusedInvisibly()&&this.setLocationRange({index:0,offset:0}),this.toolbarController.hideDialog(),this.notifyEditorElement("focus")}compositionControllerDidBlur(){return this.notifyEditorElement("blur")}compositionControllerDidSelectAttachment(e,t){return this.toolbarController.hideDialog(),this.composition.editAttachment(e,t)}compositionControllerDidRequestDeselectingAttachment(e){let t=this.attachmentLocationRange||this.composition.document.getLocationRangeOfAttachment(e);return this.selectionManager.setLocationRange(t[1])}compositionControllerWillUpdateAttachment(e){return this.editor.recordUndoEntry("Edit Attachment",{context:e.id,consolidatable:!0})}compositionControllerDidRequestRemovalOfAttachment(e){return this.removeAttachment(e)}inputControllerWillHandleInput(){this.handlingInput=!0,this.requestedRender=!1}inputControllerDidRequestRender(){this.requestedRender=!0}inputControllerDidHandleInput(){if(this.handlingInput=!1,this.requestedRender)return this.requestedRender=!1,this.render()}inputControllerDidAllowUnhandledInput(){return this.notifyEditorElement("change")}inputControllerDidRequestReparse(){return this.reparse()}inputControllerWillPerformTyping(){return this.recordTypingUndoEntry()}inputControllerWillPerformFormatting(e){return this.recordFormattingUndoEntry(e)}inputControllerWillCutText(){return this.editor.recordUndoEntry("Cut")}inputControllerWillPaste(e){return this.editor.recordUndoEntry("Paste"),this.pasting=!0,this.notifyEditorElement("before-paste",{paste:e})}inputControllerDidPaste(e){return e.range=this.pastedRange,this.pastedRange=null,this.pasting=null,this.notifyEditorElement("paste",{paste:e})}inputControllerWillMoveText(){return this.editor.recordUndoEntry("Move")}inputControllerWillAttachFiles(){return this.editor.recordUndoEntry("Drop Files")}inputControllerWillPerformUndo(){return this.editor.undo()}inputControllerWillPerformRedo(){return this.editor.redo()}inputControllerDidReceiveKeyboardCommand(e){return this.toolbarController.applyKeyboardCommand(e)}inputControllerDidStartDrag(){this.locationRangeBeforeDrag=this.selectionManager.getLocationRange()}inputControllerDidReceiveDragOverPoint(e){return this.selectionManager.setLocationRangeFromPointRange(e)}inputControllerDidCancelDrag(){this.selectionManager.setLocationRange(this.locationRangeBeforeDrag),this.locationRangeBeforeDrag=null}locationRangeDidChange(e){return this.composition.updateCurrentAttributes(),this.updateCurrentActions(),this.attachmentLocationRange&&!ua(this.attachmentLocationRange,e)&&this.composition.stopEditingAttachment(),this.notifyEditorElement("selection-change")}toolbarDidClickButton(){if(!this.getLocationRange())return this.setLocationRange({index:0,offset:0})}toolbarDidInvokeAction(e,t){return this.invokeAction(e,t)}toolbarDidToggleAttribute(e){if(this.recordFormattingUndoEntry(e),this.composition.toggleCurrentAttribute(e),this.render(),!this.selectionFrozen)return this.editorElement.focus()}toolbarDidUpdateAttribute(e,t){if(this.recordFormattingUndoEntry(e),this.composition.setCurrentAttribute(e,t),this.render(),!this.selectionFrozen)return this.editorElement.focus()}toolbarDidRemoveAttribute(e){if(this.recordFormattingUndoEntry(e),this.composition.removeCurrentAttribute(e),this.render(),!this.selectionFrozen)return this.editorElement.focus()}toolbarWillShowDialog(e){return this.composition.expandSelectionForEditing(),this.freezeSelection()}toolbarDidShowDialog(e){return this.notifyEditorElement("toolbar-dialog-show",{dialogName:e})}toolbarDidHideDialog(e){return this.thawSelection(),this.editorElement.focus(),this.notifyEditorElement("toolbar-dialog-hide",{dialogName:e})}freezeSelection(){if(!this.selectionFrozen)return this.selectionManager.lock(),this.composition.freezeSelection(),this.selectionFrozen=!0,this.render()}thawSelection(){if(this.selectionFrozen)return this.composition.thawSelection(),this.selectionManager.unlock(),this.selectionFrozen=!1,this.render()}canInvokeAction(e){return!!this.actionIsExternal(e)||!((t=this.actions[e])===null||t===void 0||(t=t.test)===null||t===void 0||!t.call(this));var t}invokeAction(e,t){return this.actionIsExternal(e)?this.notifyEditorElement("action-invoke",{actionName:e,invokingElement:t}):(n=this.actions[e])===null||n===void 0||(n=n.perform)===null||n===void 0?void 0:n.call(this);var n}actionIsExternal(e){return/^x-./.test(e)}getCurrentActions(){let e={};for(let t in this.actions)e[t]=this.canInvokeAction(t);return e}updateCurrentActions(){let e=this.getCurrentActions();if(!pr(e,this.currentActions))return this.currentActions=e,this.toolbarController.updateActions(this.currentActions),this.notifyEditorElement("actions-change",{actions:this.currentActions})}runEditorFilters(){let e=this.composition.getSnapshot();if(Array.from(this.editor.filters).forEach(r=>{let{document:s,selectedRange:a}=e;e=r.call(this.editor,e)||{},e.document||(e.document=s),e.selectedRange||(e.selectedRange=a)}),t=e,n=this.composition.getSnapshot(),!ua(t.selectedRange,n.selectedRange)||!t.document.isEqualTo(n.document))return this.composition.loadSnapshot(e);var t,n}updateInputElement(){let e=function(t,n){let r=sg[n];if(r)return r(t);throw new Error("unknown content type: ".concat(n))}(this.compositionController.getSerializableElement(),"text/html");return this.editorElement.setFormValue(e)}notifyEditorElement(e,t){switch(e){case"document-change":this.documentChangedSinceLastRender=!0;break;case"render":this.documentChangedSinceLastRender&&(this.documentChangedSinceLastRender=!1,this.notifyEditorElement("change"));break;case"change":case"attachment-add":case"attachment-edit":case"attachment-remove":this.updateInputElement()}return this.editorElement.notify(e,t)}removeAttachment(e){return this.editor.recordUndoEntry("Delete Attachment"),this.composition.removeAttachment(e),this.render()}recordFormattingUndoEntry(e){let t=Xe(e),n=this.selectionManager.getLocationRange();if(t||!Fi(n))return this.editor.recordUndoEntry("Formatting",{context:this.getUndoContext(),consolidatable:!0})}recordTypingUndoEntry(){return this.editor.recordUndoEntry("Typing",{context:this.getUndoContext(this.currentAttributes),consolidatable:!0})}getUndoContext(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return[this.getLocationContext(),this.getTimeContext(),...Array.from(t)]}getLocationContext(){let e=this.selectionManager.getLocationRange();return Fi(e)?e[0].index:e}getTimeContext(){return iu.interval>0?Math.floor(new Date().getTime()/iu.interval):0}isFocused(){var e;return this.editorElement===((e=this.editorElement.ownerDocument)===null||e===void 0?void 0:e.activeElement)}isFocusedInvisibly(){return this.isFocused()&&!this.getLocationRange()}get actions(){return this.constructor.actions}};Mt(On,"actions",{undo:{test(){return this.editor.canUndo()},perform(){return this.editor.undo()}},redo:{test(){return this.editor.canRedo()},perform(){return this.editor.redo()}},link:{test(){return this.editor.canActivateAttribute("href")}},increaseNestingLevel:{test(){return this.editor.canIncreaseNestingLevel()},perform(){return this.editor.increaseNestingLevel()&&this.render()}},decreaseNestingLevel:{test(){return this.editor.canDecreaseNestingLevel()},perform(){return this.editor.decreaseNestingLevel()&&this.render()}},attachFiles:{test:()=>!0,perform(){return Au.pickFiles(this.editor.insertFiles)}}}),On.proxyMethod("getSelectionManager().setLocationRange"),On.proxyMethod("getSelectionManager().getLocationRange");var Lg=Object.freeze({__proto__:null,AttachmentEditorController:ka,CompositionController:Aa,Controller:Ea,EditorController:On,InputController:fr,Level0InputController:li,Level2InputController:In,ToolbarController:Da}),Rg=Object.freeze({__proto__:null,MutationObserver:Ca,SelectionChangeObserver:la}),Pg=Object.freeze({__proto__:null,FileVerificationOperation:Sa,ImagePreloadOperation:ga});ic("trix-toolbar",`%t {
  display: block;
}

%t {
  white-space: nowrap;
}

%t [data-trix-dialog] {
  display: none;
}

%t [data-trix-dialog][data-trix-active] {
  display: block;
}

%t [data-trix-dialog] [data-trix-validate]:invalid {
  background-color: #ffdddd;
}`);var Ta=class extends HTMLElement{connectedCallback(){this.innerHTML===""&&(this.innerHTML=tc.getDefaultHTML())}},Ig=0,Og=function(i){if(!i.hasAttribute("contenteditable"))return i.setAttribute("contenteditable",""),function(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return t.times=1,Ke(e,t)}("focus",{onElement:i,withCallback:()=>Mg(i)})},Mg=function(i){return Ng(i),Bg(i)},Ng=function(i){var e,t;if((e=(t=document).queryCommandSupported)!==null&&e!==void 0&&e.call(t,"enableObjectResizing"))return document.execCommand("enableObjectResizing",!1,!1),Ke("mscontrolselect",{onElement:i,preventDefault:!0})},Bg=function(i){var e,t;if((e=(t=document).queryCommandSupported)!==null&&e!==void 0&&e.call(t,"DefaultParagraphSeparator")){let{tagName:n}=wt.default;if(["div","p"].includes(n))return document.execCommand("DefaultParagraphSeparator",!1,n)}},Gd=as.forcesObjectResizing?{display:"inline",width:"auto"}:{display:"inline-block",width:"1px"};ic("trix-editor",`%t {
    display: block;
}

%t:empty::before {
    content: attr(placeholder);
    color: graytext;
    cursor: text;
    pointer-events: none;
    white-space: pre-line;
}

%t a[contenteditable=false] {
    cursor: text;
}

%t img {
    max-width: 100%;
    height: auto;
}

%t `.concat(Rn,` figcaption textarea {
    resize: none;
}

%t `).concat(Rn,` figcaption textarea.trix-autoresize-clone {
    position: absolute;
    left: -9999px;
    max-height: 0px;
}

%t `).concat(Rn,` figcaption[data-trix-placeholder]:empty::before {
    content: attr(data-trix-placeholder);
    color: graytext;
}

%t [data-trix-cursor-target] {
    display: `).concat(Gd.display,` !important;
    width: `).concat(Gd.width,` !important;
    padding: 0 !important;
    margin: 0 !important;
    border: none !important;
}

%t [data-trix-cursor-target=left] {
    vertical-align: top !important;
    margin-left: -1px !important;
}

%t [data-trix-cursor-target=right] {
    vertical-align: bottom !important;
    margin-right: -1px !important;
}`));var Ni=new WeakMap,Jr=new WeakSet,bu=class{constructor(e){var t,n;fc(t=this,n=Jr),n.add(t),es(this,Ni,{writable:!0,value:void 0}),this.element=e,Tu(this,Ni,e.attachInternals())}connectedCallback(){ia(this,Jr,na).call(this)}disconnectedCallback(){}get labels(){return Be(this,Ni).labels}get disabled(){var e;return(e=this.element.inputElement)===null||e===void 0?void 0:e.disabled}set disabled(e){this.element.toggleAttribute("disabled",e)}get required(){return this.element.hasAttribute("required")}set required(e){this.element.toggleAttribute("required",e),ia(this,Jr,na).call(this)}get validity(){return Be(this,Ni).validity}get validationMessage(){return Be(this,Ni).validationMessage}get willValidate(){return Be(this,Ni).willValidate}setFormValue(e){ia(this,Jr,na).call(this)}checkValidity(){return Be(this,Ni).checkValidity()}reportValidity(){return Be(this,Ni).reportValidity()}setCustomValidity(e){ia(this,Jr,na).call(this,e)}};function na(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",{required:e,value:t}=this.element,n=e&&!t,r=!!i,s=be("input",{required:e}),a=i||s.validationMessage;Be(this,Ni).setValidity({valueMissing:n,customError:r},a)}var Qo=new WeakMap,eu=new WeakMap,tu=new WeakMap,yu=class{constructor(e){es(this,Qo,{writable:!0,value:void 0}),es(this,eu,{writable:!0,value:t=>{t.defaultPrevented||t.target===this.element.form&&this.element.reset()}}),es(this,tu,{writable:!0,value:t=>{if(t.defaultPrevented||this.element.contains(t.target))return;let n=on(t.target,{matchingSelector:"label"});n&&Array.from(this.labels).includes(n)&&this.element.focus()}}),this.element=e}connectedCallback(){Tu(this,Qo,function(e){if(e.hasAttribute("aria-label")||e.hasAttribute("aria-labelledby"))return;let t=function(){let n=Array.from(e.labels).map(s=>{if(!s.contains(e))return s.textContent}).filter(s=>s),r=n.join(" ");return r?e.setAttribute("aria-label",r):e.removeAttribute("aria-label")};return t(),Ke("focus",{onElement:e,withCallback:t})}(this.element)),window.addEventListener("reset",Be(this,eu),!1),window.addEventListener("click",Be(this,tu),!1)}disconnectedCallback(){var e;(e=Be(this,Qo))===null||e===void 0||e.destroy(),window.removeEventListener("reset",Be(this,eu),!1),window.removeEventListener("click",Be(this,tu),!1)}get labels(){let e=[];this.element.id&&this.element.ownerDocument&&e.push(...Array.from(this.element.ownerDocument.querySelectorAll("label[for='".concat(this.element.id,"']"))||[]));let t=on(this.element,{matchingSelector:"label"});return t&&[this.element,null].includes(t.control)&&e.push(t),e}get disabled(){return console.warn("This browser does not support the [disabled] attribute for trix-editor elements."),!1}set disabled(e){console.warn("This browser does not support the [disabled] attribute for trix-editor elements.")}get required(){return console.warn("This browser does not support the [required] attribute for trix-editor elements."),!1}set required(e){console.warn("This browser does not support the [required] attribute for trix-editor elements.")}get validity(){return console.warn("This browser does not support the validity property for trix-editor elements."),null}get validationMessage(){return console.warn("This browser does not support the validationMessage property for trix-editor elements."),""}get willValidate(){return console.warn("This browser does not support the willValidate property for trix-editor elements."),!1}setFormValue(e){}checkValidity(){return console.warn("This browser does not support checkValidity() for trix-editor elements."),!0}reportValidity(){return console.warn("This browser does not support reportValidity() for trix-editor elements."),!0}setCustomValidity(e){console.warn("This browser does not support setCustomValidity(validationMessage) for trix-editor elements.")}},ht=new WeakMap,ss=class extends HTMLElement{constructor(){super(),es(this,ht,{writable:!0,value:void 0}),Tu(this,ht,this.constructor.formAssociated?new bu(this):new yu(this))}get trixId(){return this.hasAttribute("trix-id")?this.getAttribute("trix-id"):(this.setAttribute("trix-id",++Ig),this.trixId)}get labels(){return Be(this,ht).labels}get disabled(){return Be(this,ht).disabled}set disabled(e){Be(this,ht).disabled=e}get required(){return Be(this,ht).required}set required(e){Be(this,ht).required=e}get validity(){return Be(this,ht).validity}get validationMessage(){return Be(this,ht).validationMessage}get willValidate(){return Be(this,ht).willValidate}get type(){return this.localName}get toolbarElement(){var e;if(this.hasAttribute("toolbar"))return(e=this.ownerDocument)===null||e===void 0?void 0:e.getElementById(this.getAttribute("toolbar"));if(this.parentNode){let t="trix-toolbar-".concat(this.trixId);this.setAttribute("toolbar",t);let n=be("trix-toolbar",{id:t});return this.parentNode.insertBefore(n,this),n}}get form(){var e;return(e=this.inputElement)===null||e===void 0?void 0:e.form}get inputElement(){var e;if(this.hasAttribute("input"))return(e=this.ownerDocument)===null||e===void 0?void 0:e.getElementById(this.getAttribute("input"));if(this.parentNode){let t="trix-input-".concat(this.trixId);this.setAttribute("input",t);let n=be("input",{type:"hidden",id:t});return this.parentNode.insertBefore(n,this.nextElementSibling),n}}get editor(){var e;return(e=this.editorController)===null||e===void 0?void 0:e.editor}get name(){var e;return(e=this.inputElement)===null||e===void 0?void 0:e.name}get value(){var e;return(e=this.inputElement)===null||e===void 0?void 0:e.value}set value(e){var t;this.defaultValue=e,(t=this.editor)===null||t===void 0||t.loadHTML(this.defaultValue)}notify(e,t){if(this.editorController)return Xr("trix-".concat(e),{onElement:this,attributes:t})}setFormValue(e){this.inputElement&&(this.inputElement.value=e,Be(this,ht).setFormValue(e))}connectedCallback(){this.hasAttribute("data-trix-internal")||(Og(this),function(e){e.hasAttribute("role")||e.setAttribute("role","textbox")}(this),this.editorController||(Xr("trix-before-initialize",{onElement:this}),this.editorController=new On({editorElement:this,html:this.defaultValue=this.value}),requestAnimationFrame(()=>Xr("trix-initialize",{onElement:this}))),this.editorController.registerSelectionManager(),Be(this,ht).connectedCallback(),function(e){!document.querySelector(":focus")&&e.hasAttribute("autofocus")&&document.querySelector("[autofocus]")===e&&e.focus()}(this))}disconnectedCallback(){var e;(e=this.editorController)===null||e===void 0||e.unregisterSelectionManager(),Be(this,ht).disconnectedCallback()}checkValidity(){return Be(this,ht).checkValidity()}reportValidity(){return Be(this,ht).reportValidity()}setCustomValidity(e){Be(this,ht).setCustomValidity(e)}formDisabledCallback(e){this.inputElement&&(this.inputElement.disabled=e),this.toggleAttribute("contenteditable",!e)}formResetCallback(){this.reset()}reset(){this.value=this.defaultValue}};Mt(ss,"formAssociated","ElementInternals"in window);var Hn={VERSION:$f,config:os,core:ag,models:bc,views:cg,controllers:Lg,observers:Rg,operations:Pg,elements:Object.freeze({__proto__:null,TrixEditorElement:ss,TrixToolbarElement:Ta}),filters:Object.freeze({__proto__:null,Filter:ba,attachmentGalleryFilter:mc})};Object.assign(Hn,bc),window.Trix=Hn,setTimeout(function(){customElements.get("trix-toolbar")||customElements.define("trix-toolbar",Ta),customElements.get("trix-editor")||customElements.define("trix-editor",ss)},0);var Fg=new kc.default.Converter,jg=new pd;Hn.config.blockAttributes.heading2={tagName:"h2",terminal:!0,breakOnReturn:!0};Hn.config.blockAttributes.heading3={tagName:"h3",terminal:!0,breakOnReturn:!0};Hn.config.blockAttributes.heading4={tagName:"h4",terminal:!0,breakOnReturn:!0};Hn.config.blockAttributes.heading5={tagName:"h5",terminal:!0,breakOnReturn:!0};var Ac={mounted(){let i=this.el.getElementsByTagName("trix-editor")?.[0],e=i.editor,t=document.getElementById(i.id.replace("editor","content"));e.insertHTML(Fg.makeHtml(t.value)),this.el.addEventListener("trix-change",n=>{let r=jg.turndown(i.innerHTML);t.value=r,t.dispatchEvent(new Event("input",{bubbles:!0}))})}};var Hg=function(i,e){i.forEach(t=>{let n=new XMLHttpRequest;e(()=>n.abort()),n.onload=()=>n.status===200?t.progress(100):t.error(),n.onerror=()=>t.error(),n.upload.addEventListener("progress",s=>{if(s.lengthComputable){let a=Math.round(s.loaded/s.total*100);a<100&&t.progress(a)}});let r=t.meta.url;n.open("PUT",r,!0),n.send(t.file)})},Ec=Hg;var zg={mounted(){sessionStorage.getItem("locale")&&this.pushEventTo(this.el,"got-locale",{locale:sessionStorage.getItem("locale")}),this.handleEvent("set-locale",({locale:i})=>sessionStorage.setItem("locale",i))}},Cc=zg;var Cm=Va(Sc());var Dc="data-confirm-fired",Pa=document.getElementById("danger_dialog"),Tc=(i,e)=>{let t=i.getAttribute(e);t&&liveSocket.execJS(i,t)};window.addEventListener("ultra-confirm",i=>{let{detail:e,srcElement:t}=i,{message:n}=e,r=i.target;i.preventDefault(),r.setAttribute(Dc,""),Pa.returnValue="cancel",Pa.querySelector("[data-ref='title']").innerText=n,Pa.showModal(),Pa.addEventListener("close",({target:s})=>{s.returnValue==="confirm"?Tc(t,"phx-ultra-confirm-ok"):(Tc(t,"phx-ultra-confirm-cancel"),r.removeAttribute(Dc))})});var Vg={Drag:id,Markdown:Ac,LocalLocaleStorage:Cc},Ug=document.querySelector("meta[name='csrf-token']").getAttribute("content"),xc=new Tl("/live",Uu,{longPollFallbackMs:2500,params:{_csrf_token:Ug},uploaders:{S3:Ec},hooks:Vg});Ia.default.config({barColors:{0:"#29d"},shadowColor:"rgba(0, 0, 0, .3)"});window.addEventListener("phx:page-loading-start",i=>Ia.default.show(300));window.addEventListener("phx:page-loading-stop",i=>Ia.default.hide());xc.connect();window.liveSocket=xc;})();
/**
 * @license MIT
 * topbar 2.0.0, 2023-02-04
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
/*! Bundled license information:

showdown/dist/showdown.js:
  (*! showdown v 2.1.0 - 21-04-2022 *)

sortablejs/modular/sortable.esm.js:
  (**!
   * Sortable 1.15.4
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   *)

trix/dist/trix.esm.min.js:
  (*! @license DOMPurify 3.2.3 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.3/LICENSE *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vYXNzZXRzL3ZlbmRvci90b3BiYXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvb3B0aW9ucy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zaG93ZG93bi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9oZWxwZXJzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL2NvbnZlcnRlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2FuY2hvcnMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9hdXRvTGlua3MuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9ibG9ja0dhbXV0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvYmxvY2tRdW90ZXMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9jb2RlQmxvY2tzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvY29kZVNwYW5zLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvY29tcGxldGVIVE1MRG9jdW1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9kZXRhYi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2VsbGlwc2lzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvZW1vamkuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9lbmNvZGVBbXBzQW5kQW5nbGVzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvZW5jb2RlQmFja3NsYXNoRXNjYXBlcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2VuY29kZUNvZGUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9lc2NhcGVTcGVjaWFsQ2hhcnNXaXRoaW5UYWdBdHRyaWJ1dGVzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvZ2l0aHViQ29kZUJsb2Nrcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2hhc2hCbG9jay5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2hhc2hDb2RlVGFncy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2hhc2hFbGVtZW50LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvaGFzaEhUTUxCbG9ja3MuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9oYXNoSFRNTFNwYW5zLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvaGFzaFByZUNvZGVUYWdzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvaGVhZGVycy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2hvcml6b250YWxSdWxlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvaW1hZ2VzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvaXRhbGljc0FuZEJvbGQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9saXN0cy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ldGFkYXRhLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvb3V0ZGVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL3BhcmFncmFwaHMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9ydW5FeHRlbnNpb24uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9zcGFuR2FtdXQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9zdHJpa2V0aHJvdWdoLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvc3RyaXBMaW5rRGVmaW5pdGlvbnMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy90YWJsZXMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy91bmRlcmxpbmUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy91bmVzY2FwZVNwZWNpYWxDaGFycy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9ibG9ja3F1b3RlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvbWFrZU1hcmtkb3duL2NvZGVCbG9jay5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9jb2RlU3Bhbi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9lbXBoYXNpcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9oZWFkZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vaHIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vaW1hZ2UuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vbGlua3MuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vbGlzdC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9saXN0SXRlbS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9ub2RlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvbWFrZU1hcmtkb3duL3BhcmFncmFwaC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9wcmUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vc3RyaWtldGhyb3VnaC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9zdHJvbmcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vdGFibGUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vdGFibGVDZWxsLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvbWFrZU1hcmtkb3duL3R4dC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9sb2FkZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9lbnVtcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvdy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tYXRoLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3VzZXJBZ2VudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNMYXlvdXRWaWV3cG9ydC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9jb250YWlucy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNUYWJsZUVsZW1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy93aXRoaW4uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldFZhcmlhdGlvbi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93U2Nyb2xsQmFyWC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Vmlld3BvcnRSZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzU2Nyb2xsUGFyZW50LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRTY3JvbGxQYXJlbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlT2Zmc2V0cy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9kZXRlY3RPdmVyZmxvdy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZmxpcC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvaGlkZS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvb2Zmc2V0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEFsdEF4aXMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvaW5kZXguanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlU2Nyb2xsLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RlYm91bmNlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlQnlOYW1lLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2NyZWF0ZVBvcHBlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9wb3BwZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLWxpdGUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvaW5kZXguanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9mbG93Yml0ZS1kYXRlcGlja2VyL2Rpc3QvbWFpbi5janMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2FjY29yZGlvbi9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2NvbXBvbmVudHMvY2Fyb3VzZWwvaW5kZXgudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2NsaXBib2FyZC9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2NvbXBvbmVudHMvY29sbGFwc2UvaW5kZXgudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2RhdGVwaWNrZXIvaW5kZXgudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2RpYWwvaW5kZXgudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2Rpc21pc3MvaW5kZXgudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2RyYXdlci9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vaW5kZXgudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2luZGV4LnRzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9zcmMvY29tcG9uZW50cy9pbnB1dC1jb3VudGVyL2luZGV4LnRzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9zcmMvY29tcG9uZW50cy9tb2RhbC9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2NvbXBvbmVudHMvdGFicy9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2NvbXBvbmVudHMvdG9vbHRpcC9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2RvbS9ldmVudHMudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9kb20vaW5zdGFuY2VzLnRzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi93ZWJwYWNrL2Jvb3RzdHJhcCIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0IiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9zcmMvaW5kZXgucGhvZW5peC50cyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfaHRtbC9wcml2L3N0YXRpYy9waG9lbml4X2h0bWwuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3V0aWxzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9jb25zdGFudHMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3B1c2guanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3RpbWVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9jaGFubmVsLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9hamF4LmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9sb25ncG9sbC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvcHJlc2VuY2UuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3NlcmlhbGl6ZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3NvY2tldC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9jb25zdGFudHMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZW50cnlfdXBsb2FkZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvdXRpbHMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvYnJvd3Nlci5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9kb20uanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvdXBsb2FkX2VudHJ5LmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2xpdmVfdXBsb2FkZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvYXJpYS5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9ob29rcy5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9lbGVtZW50X3JlZi5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9kb21fcG9zdF9tb3JwaF9yZXN0b3Jlci5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9ub2RlX21vZHVsZXMvbW9ycGhkb20vZGlzdC9tb3JwaGRvbS1lc20uanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZG9tX3BhdGNoLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3JlbmRlcmVkLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2pzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3ZpZXdfaG9vay5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy92aWV3LmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2xpdmVfc29ja2V0LmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2luZGV4LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9qcy9hcHAuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zb3J0YWJsZWpzL21vZHVsYXIvc29ydGFibGUuZXNtLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9qcy9ob29rcy9zb3J0YWJsZS5qcyIsICIuLi8uLi8uLi9hc3NldHMvanMvaG9va3MvbWFya2Rvd24uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90dXJuZG93bi9saWIvdHVybmRvd24uYnJvd3Nlci5lcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29uZmlnL2F0dGFjaG1lbnRzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb25maWcvYmxvY2tfYXR0cmlidXRlcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29uZmlnL2Jyb3dzZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbmZpZy9kb21wdXJpZnkuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbmZpZy9sYW5nLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb25maWcvZmlsZV9zaXplX2Zvcm1hdHRpbmcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbnN0YW50cy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL2V4dGVuZC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL2RvbS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29uZmlnL2lucHV0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb25maWcva2V5X25hbWVzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb25maWcvcGFyc2VyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb25maWcvdGV4dF9hdHRyaWJ1dGVzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb25maWcvdG9vbGJhci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29uZmlnL3VuZG8uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbmZpZy9jc3MuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvcmUvYmFzaWNfb2JqZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL3V0aWxpdGllcy91dGYxNl9zdHJpbmcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvcmUvb2JqZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL2hlbHBlcnMvYXJyYXlzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL2hlbHBlcnMvYmlkaS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL2NvbmZpZy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL2N1c3RvbV9lbGVtZW50cy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL2V2ZW50cy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL2Z1bmN0aW9ucy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL29iamVjdHMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvcmUvaGVscGVycy9yYW5nZXMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L29ic2VydmVycy9zZWxlY3Rpb25fY2hhbmdlX29ic2VydmVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL2hlbHBlcnMvc3RyaW5ncy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9jb2xsZWN0aW9ucy9oYXNoLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL2NvbGxlY3Rpb25zL29iamVjdF9ncm91cC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9jb2xsZWN0aW9ucy9vYmplY3RfbWFwLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL2NvbGxlY3Rpb25zL2VsZW1lbnRfc3RvcmUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvcmUvdXRpbGl0aWVzL29wZXJhdGlvbi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvdmlld3Mvb2JqZWN0X3ZpZXcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9odG1sX3Nhbml0aXplci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvdmlld3MvYXR0YWNobWVudF92aWV3LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC92aWV3cy9wcmV2aWV3YWJsZV9hdHRhY2htZW50X3ZpZXcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L3ZpZXdzL3BpZWNlX3ZpZXcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L3ZpZXdzL3RleHRfdmlldy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvdmlld3MvYmxvY2tfdmlldy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvdmlld3MvZG9jdW1lbnRfdmlldy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvbW9kZWxzL3BpZWNlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9vcGVyYXRpb25zL2ltYWdlX3ByZWxvYWRfb3BlcmF0aW9uLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvYXR0YWNobWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvbW9kZWxzL2F0dGFjaG1lbnRfcGllY2UuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9zdHJpbmdfcGllY2UuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9zcGxpdHRhYmxlX2xpc3QuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy90ZXh0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvYmxvY2suanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9kb2N1bWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvbW9kZWxzL2h0bWxfcGFyc2VyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL3NlcmlhbGl6YXRpb24uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9tYW5hZ2VkX2F0dGFjaG1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9hdHRhY2htZW50X21hbmFnZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9saW5lX2JyZWFrX2luc2VydGlvbi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvbW9kZWxzL2NvbXBvc2l0aW9uLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvdW5kb19tYW5hZ2VyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9maWx0ZXJzL2ZpbHRlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvZmlsdGVycy9hdHRhY2htZW50X2dhbGxlcnlfZmlsdGVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvZWRpdG9yLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvbG9jYXRpb25fbWFwcGVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvcG9pbnRfbWFwcGVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvc2VsZWN0aW9uX21hbmFnZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbnRyb2xsZXJzL2F0dGFjaG1lbnRfZWRpdG9yX2NvbnRyb2xsZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbnRyb2xsZXJzL2NvbXBvc2l0aW9uX2NvbnRyb2xsZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L29ic2VydmVycy9tdXRhdGlvbl9vYnNlcnZlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvb3BlcmF0aW9ucy9maWxlX3ZlcmlmaWNhdGlvbl9vcGVyYXRpb24uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9mbGFreV9hbmRyb2lkX2tleWJvYXJkX2RldGVjdG9yLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb250cm9sbGVycy9pbnB1dF9jb250cm9sbGVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb250cm9sbGVycy9sZXZlbF8wX2lucHV0X2NvbnRyb2xsZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbnRyb2xsZXJzL2xldmVsXzJfaW5wdXRfY29udHJvbGxlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29udHJvbGxlcnMvdG9vbGJhcl9jb250cm9sbGVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb250cm9sbGVycy9lZGl0b3JfY29udHJvbGxlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvZWxlbWVudHMvdHJpeF90b29sYmFyX2VsZW1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2VsZW1lbnRzL3RyaXhfZWRpdG9yX2VsZW1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L3RyaXguanMiLCAiLi4vLi4vLi4vYXNzZXRzL2pzL3VwbG9hZGVycy9zMy5qcyIsICIuLi8uLi8uLi9hc3NldHMvanMvaG9va3MvbG9jYWxfbG9jYWxlX3N0b3JhZ2UuanMiLCAiLi4vLi4vLi4vYXNzZXRzL2pzL2RlbGV0ZV9jb25maXJtLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIEBsaWNlbnNlIE1JVFxuICogdG9wYmFyIDIuMC4wLCAyMDIzLTAyLTA0XG4gKiBodHRwczovL2J1dW5ndXllbi5naXRodWIuaW8vdG9wYmFyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgQnV1IE5ndXllblxuICovXG4oZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGF1bGlyaXNoLzE1Nzk2NzFcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGFzdFRpbWUgPSAwO1xuICAgIHZhciB2ZW5kb3JzID0gW1wibXNcIiwgXCJtb3pcIiwgXCJ3ZWJraXRcIiwgXCJvXCJdO1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsreCkge1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9XG4gICAgICAgIHdpbmRvd1t2ZW5kb3JzW3hdICsgXCJSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPVxuICAgICAgICB3aW5kb3dbdmVuZG9yc1t4XSArIFwiQ2FuY2VsQW5pbWF0aW9uRnJhbWVcIl0gfHxcbiAgICAgICAgd2luZG93W3ZlbmRvcnNbeF0gKyBcIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZVwiXTtcbiAgICB9XG4gICAgaWYgKCF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKVxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgZWxlbWVudCkge1xuICAgICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSk7XG4gICAgICAgIHZhciBpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYWxsYmFjayhjdXJyVGltZSArIHRpbWVUb0NhbGwpO1xuICAgICAgICB9LCB0aW1lVG9DYWxsKTtcbiAgICAgICAgbGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGw7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICAgIH07XG4gICAgaWYgKCF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpXG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgIH07XG4gIH0pKCk7XG5cbiAgdmFyIGNhbnZhcyxcbiAgICBjdXJyZW50UHJvZ3Jlc3MsXG4gICAgc2hvd2luZyxcbiAgICBwcm9ncmVzc1RpbWVySWQgPSBudWxsLFxuICAgIGZhZGVUaW1lcklkID0gbnVsbCxcbiAgICBkZWxheVRpbWVySWQgPSBudWxsLFxuICAgIGFkZEV2ZW50ID0gZnVuY3Rpb24gKGVsZW0sIHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgIGlmIChlbGVtLmFkZEV2ZW50TGlzdGVuZXIpIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICBlbHNlIGlmIChlbGVtLmF0dGFjaEV2ZW50KSBlbGVtLmF0dGFjaEV2ZW50KFwib25cIiArIHR5cGUsIGhhbmRsZXIpO1xuICAgICAgZWxzZSBlbGVtW1wib25cIiArIHR5cGVdID0gaGFuZGxlcjtcbiAgICB9LFxuICAgIG9wdGlvbnMgPSB7XG4gICAgICBhdXRvUnVuOiB0cnVlLFxuICAgICAgYmFyVGhpY2tuZXNzOiAzLFxuICAgICAgYmFyQ29sb3JzOiB7XG4gICAgICAgIDA6IFwicmdiYSgyNiwgIDE4OCwgMTU2LCAuOSlcIixcbiAgICAgICAgXCIuMjVcIjogXCJyZ2JhKDUyLCAgMTUyLCAyMTksIC45KVwiLFxuICAgICAgICBcIi41MFwiOiBcInJnYmEoMjQxLCAxOTYsIDE1LCAgLjkpXCIsXG4gICAgICAgIFwiLjc1XCI6IFwicmdiYSgyMzAsIDEyNiwgMzQsICAuOSlcIixcbiAgICAgICAgXCIxLjBcIjogXCJyZ2JhKDIxMSwgODQsICAwLCAgIC45KVwiLFxuICAgICAgfSxcbiAgICAgIHNoYWRvd0JsdXI6IDEwLFxuICAgICAgc2hhZG93Q29sb3I6IFwicmdiYSgwLCAgIDAsICAgMCwgICAuNilcIixcbiAgICAgIGNsYXNzTmFtZTogbnVsbCxcbiAgICB9LFxuICAgIHJlcGFpbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBvcHRpb25zLmJhclRoaWNrbmVzcyAqIDU7IC8vIG5lZWQgc3BhY2UgZm9yIHNoYWRvd1xuXG4gICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgIGN0eC5zaGFkb3dCbHVyID0gb3B0aW9ucy5zaGFkb3dCbHVyO1xuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gb3B0aW9ucy5zaGFkb3dDb2xvcjtcblxuICAgICAgdmFyIGxpbmVHcmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCBjYW52YXMud2lkdGgsIDApO1xuICAgICAgZm9yICh2YXIgc3RvcCBpbiBvcHRpb25zLmJhckNvbG9ycylcbiAgICAgICAgbGluZUdyYWRpZW50LmFkZENvbG9yU3RvcChzdG9wLCBvcHRpb25zLmJhckNvbG9yc1tzdG9wXSk7XG4gICAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5iYXJUaGlja25lc3M7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHgubW92ZVRvKDAsIG9wdGlvbnMuYmFyVGhpY2tuZXNzIC8gMik7XG4gICAgICBjdHgubGluZVRvKFxuICAgICAgICBNYXRoLmNlaWwoY3VycmVudFByb2dyZXNzICogY2FudmFzLndpZHRoKSxcbiAgICAgICAgb3B0aW9ucy5iYXJUaGlja25lc3MgLyAyXG4gICAgICApO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGluZUdyYWRpZW50O1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH0sXG4gICAgY3JlYXRlQ2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgIHZhciBzdHlsZSA9IGNhbnZhcy5zdHlsZTtcbiAgICAgIHN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgICAgc3R5bGUudG9wID0gc3R5bGUubGVmdCA9IHN0eWxlLnJpZ2h0ID0gc3R5bGUubWFyZ2luID0gc3R5bGUucGFkZGluZyA9IDA7XG4gICAgICBzdHlsZS56SW5kZXggPSAxMDAwMDE7XG4gICAgICBzdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICBpZiAob3B0aW9ucy5jbGFzc05hbWUpIGNhbnZhcy5jbGFzc0xpc3QuYWRkKG9wdGlvbnMuY2xhc3NOYW1lKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICAgIGFkZEV2ZW50KHdpbmRvdywgXCJyZXNpemVcIiwgcmVwYWludCk7XG4gICAgfSxcbiAgICB0b3BiYXIgPSB7XG4gICAgICBjb25maWc6IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRzKVxuICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpIG9wdGlvbnNba2V5XSA9IG9wdHNba2V5XTtcbiAgICAgIH0sXG4gICAgICBzaG93OiBmdW5jdGlvbiAoZGVsYXkpIHtcbiAgICAgICAgaWYgKHNob3dpbmcpIHJldHVybjtcbiAgICAgICAgaWYgKGRlbGF5KSB7XG4gICAgICAgICAgaWYgKGRlbGF5VGltZXJJZCkgcmV0dXJuO1xuICAgICAgICAgIGRlbGF5VGltZXJJZCA9IHNldFRpbWVvdXQoKCkgPT4gdG9wYmFyLnNob3coKSwgZGVsYXkpO1xuICAgICAgICB9IGVsc2UgIHtcbiAgICAgICAgICBzaG93aW5nID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZmFkZVRpbWVySWQgIT09IG51bGwpIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShmYWRlVGltZXJJZCk7XG4gICAgICAgICAgaWYgKCFjYW52YXMpIGNyZWF0ZUNhbnZhcygpO1xuICAgICAgICAgIGNhbnZhcy5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgICAgICBjYW52YXMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICB0b3BiYXIucHJvZ3Jlc3MoMCk7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuYXV0b1J1bikge1xuICAgICAgICAgICAgKGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgICAgICAgICAgIHByb2dyZXNzVGltZXJJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgICAgICAgICAgIHRvcGJhci5wcm9ncmVzcyhcbiAgICAgICAgICAgICAgICBcIitcIiArIDAuMDUgKiBNYXRoLnBvdygxIC0gTWF0aC5zcXJ0KGN1cnJlbnRQcm9ncmVzcyksIDIpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHByb2dyZXNzOiBmdW5jdGlvbiAodG8pIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGN1cnJlbnRQcm9ncmVzcztcbiAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHRvID1cbiAgICAgICAgICAgICh0by5pbmRleE9mKFwiK1wiKSA+PSAwIHx8IHRvLmluZGV4T2YoXCItXCIpID49IDBcbiAgICAgICAgICAgICAgPyBjdXJyZW50UHJvZ3Jlc3NcbiAgICAgICAgICAgICAgOiAwKSArIHBhcnNlRmxvYXQodG8pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQcm9ncmVzcyA9IHRvID4gMSA/IDEgOiB0bztcbiAgICAgICAgcmVwYWludCgpO1xuICAgICAgICByZXR1cm4gY3VycmVudFByb2dyZXNzO1xuICAgICAgfSxcbiAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGRlbGF5VGltZXJJZCk7XG4gICAgICAgIGRlbGF5VGltZXJJZCA9IG51bGw7XG4gICAgICAgIGlmICghc2hvd2luZykgcmV0dXJuO1xuICAgICAgICBzaG93aW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChwcm9ncmVzc1RpbWVySWQgIT0gbnVsbCkge1xuICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShwcm9ncmVzc1RpbWVySWQpO1xuICAgICAgICAgIHByb2dyZXNzVGltZXJJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgKGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgICAgICAgaWYgKHRvcGJhci5wcm9ncmVzcyhcIisuMVwiKSA+PSAxKSB7XG4gICAgICAgICAgICBjYW52YXMuc3R5bGUub3BhY2l0eSAtPSAwLjA1O1xuICAgICAgICAgICAgaWYgKGNhbnZhcy5zdHlsZS5vcGFjaXR5IDw9IDAuMDUpIHtcbiAgICAgICAgICAgICAgY2FudmFzLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgZmFkZVRpbWVySWQgPSBudWxsO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZhZGVUaW1lcklkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICAgICAgfSkoKTtcbiAgICAgIH0sXG4gICAgfTtcblxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHRvcGJhcjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdG9wYmFyO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRoaXMudG9wYmFyID0gdG9wYmFyO1xuICB9XG59LmNhbGwodGhpcywgd2luZG93LCBkb2N1bWVudCkpO1xuIiwgIi8qKlxuICogQ3JlYXRlZCBieSBUaXZpZSBvbiAxMy0wNy0yMDE1LlxuICovXG5cbmZ1bmN0aW9uIGdldERlZmF1bHRPcHRzIChzaW1wbGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBvbWl0RXh0cmFXTEluQ29kZUJsb2Nrczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnT21pdCB0aGUgZGVmYXVsdCBleHRyYSB3aGl0ZWxpbmUgYWRkZWQgdG8gY29kZSBibG9ja3MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBub0hlYWRlcklkOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUdXJuIG9uL29mZiBnZW5lcmF0ZWQgaGVhZGVyIGlkJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgcHJlZml4SGVhZGVySWQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ0FkZCBhIHByZWZpeCB0byB0aGUgZ2VuZXJhdGVkIGhlYWRlciBpZHMuIFBhc3NpbmcgYSBzdHJpbmcgd2lsbCBwcmVmaXggdGhhdCBzdHJpbmcgdG8gdGhlIGhlYWRlciBpZC4gU2V0dGluZyB0byB0cnVlIHdpbGwgYWRkIGEgZ2VuZXJpYyBcXCdzZWN0aW9uLVxcJyBwcmVmaXgnLFxuICAgICAgdHlwZTogJ3N0cmluZydcbiAgICB9LFxuICAgIHJhd1ByZWZpeEhlYWRlcklkOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdTZXR0aW5nIHRoaXMgb3B0aW9uIHRvIHRydWUgd2lsbCBwcmV2ZW50IHNob3dkb3duIGZyb20gbW9kaWZ5aW5nIHRoZSBwcmVmaXguIFRoaXMgbWlnaHQgcmVzdWx0IGluIG1hbGZvcm1lZCBJRHMgKGlmLCBmb3IgaW5zdGFuY2UsIHRoZSBcIiBjaGFyIGlzIHVzZWQgaW4gdGhlIHByZWZpeCknLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBnaENvbXBhdGlibGVIZWFkZXJJZDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnR2VuZXJhdGUgaGVhZGVyIGlkcyBjb21wYXRpYmxlIHdpdGggZ2l0aHViIHN0eWxlIChzcGFjZXMgYXJlIHJlcGxhY2VkIHdpdGggZGFzaGVzLCBhIGJ1bmNoIG9mIG5vbiBhbHBoYW51bWVyaWMgY2hhcnMgYXJlIHJlbW92ZWQpJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgcmF3SGVhZGVySWQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1JlbW92ZSBvbmx5IHNwYWNlcywgXFwnIGFuZCBcIiBmcm9tIGdlbmVyYXRlZCBoZWFkZXIgaWRzIChpbmNsdWRpbmcgcHJlZml4ZXMpLCByZXBsYWNpbmcgdGhlbSB3aXRoIGRhc2hlcyAoLSkuIFdBUk5JTkc6IFRoaXMgbWlnaHQgcmVzdWx0IGluIG1hbGZvcm1lZCBpZHMnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBoZWFkZXJMZXZlbFN0YXJ0OiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUaGUgaGVhZGVyIGJsb2NrcyBsZXZlbCBzdGFydCcsXG4gICAgICB0eXBlOiAnaW50ZWdlcidcbiAgICB9LFxuICAgIHBhcnNlSW1nRGltZW5zaW9uczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnVHVybiBvbi9vZmYgaW1hZ2UgZGltZW5zaW9uIHBhcnNpbmcnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBzaW1wbGlmaWVkQXV0b0xpbms6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1R1cm4gb24vb2ZmIEdGTSBhdXRvbGluayBzdHlsZScsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGV4Y2x1ZGVUcmFpbGluZ1B1bmN0dWF0aW9uRnJvbVVSTHM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ0V4Y2x1ZGVzIHRyYWlsaW5nIHB1bmN0dWF0aW9uIGZyb20gbGlua3MgZ2VuZXJhdGVkIHdpdGggYXV0b0xpbmtpbmcnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBsaXRlcmFsTWlkV29yZFVuZGVyc2NvcmVzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdQYXJzZSBtaWR3b3JkIHVuZGVyc2NvcmVzIGFzIGxpdGVyYWwgdW5kZXJzY29yZXMnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBsaXRlcmFsTWlkV29yZEFzdGVyaXNrczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnUGFyc2UgbWlkd29yZCBhc3Rlcmlza3MgYXMgbGl0ZXJhbCBhc3Rlcmlza3MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBzdHJpa2V0aHJvdWdoOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUdXJuIG9uL29mZiBzdHJpa2V0aHJvdWdoIHN1cHBvcnQnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICB0YWJsZXM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1R1cm4gb24vb2ZmIHRhYmxlcyBzdXBwb3J0JyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgdGFibGVzSGVhZGVySWQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ0FkZCBhbiBpZCB0byB0YWJsZSBoZWFkZXJzJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgZ2hDb2RlQmxvY2tzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgICBkZXNjcmliZTogJ1R1cm4gb24vb2ZmIEdGTSBmZW5jZWQgY29kZSBibG9ja3Mgc3VwcG9ydCcsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHRhc2tsaXN0czoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnVHVybiBvbi9vZmYgR0ZNIHRhc2tsaXN0IHN1cHBvcnQnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBzbW9vdGhMaXZlUHJldmlldzoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnUHJldmVudHMgd2VpcmQgZWZmZWN0cyBpbiBsaXZlIHByZXZpZXdzIGR1ZSB0byBpbmNvbXBsZXRlIGlucHV0JyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgc21hcnRJbmRlbnRhdGlvbkZpeDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnVHJpZXMgdG8gc21hcnRseSBmaXggaW5kZW50YXRpb24gaW4gZXM2IHN0cmluZ3MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBkaXNhYmxlRm9yY2VkNFNwYWNlc0luZGVudGVkU3VibGlzdHM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ0Rpc2FibGVzIHRoZSByZXF1aXJlbWVudCBvZiBpbmRlbnRpbmcgbmVzdGVkIHN1Ymxpc3RzIGJ5IDQgc3BhY2VzJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgc2ltcGxlTGluZUJyZWFrczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnUGFyc2VzIHNpbXBsZSBsaW5lIGJyZWFrcyBhcyA8YnI+IChHRk0gU3R5bGUpJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgcmVxdWlyZVNwYWNlQmVmb3JlSGVhZGluZ1RleHQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ01ha2VzIGFkZGluZyBhIHNwYWNlIGJldHdlZW4gYCNgIGFuZCB0aGUgaGVhZGVyIHRleHQgbWFuZGF0b3J5IChHRk0gU3R5bGUpJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgZ2hNZW50aW9uczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnRW5hYmxlcyBnaXRodWIgQG1lbnRpb25zJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgZ2hNZW50aW9uc0xpbms6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS97dX0nLFxuICAgICAgZGVzY3JpYmU6ICdDaGFuZ2VzIHRoZSBsaW5rIGdlbmVyYXRlZCBieSBAbWVudGlvbnMuIE9ubHkgYXBwbGllcyBpZiBnaE1lbnRpb25zIG9wdGlvbiBpcyBlbmFibGVkLicsXG4gICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAgZW5jb2RlRW1haWxzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgICBkZXNjcmliZTogJ0VuY29kZSBlLW1haWwgYWRkcmVzc2VzIHRocm91Z2ggdGhlIHVzZSBvZiBDaGFyYWN0ZXIgRW50aXRpZXMsIHRyYW5zZm9ybWluZyBBU0NJSSBlLW1haWwgYWRkcmVzc2VzIGludG8gaXRzIGVxdWl2YWxlbnQgZGVjaW1hbCBlbnRpdGllcycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIG9wZW5MaW5rc0luTmV3V2luZG93OiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdPcGVuIGFsbCBsaW5rcyBpbiBuZXcgd2luZG93cycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGJhY2tzbGFzaEVzY2FwZXNIVE1MVGFnczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnU3VwcG9ydCBmb3IgSFRNTCBUYWcgZXNjYXBpbmcuIGV4OiBcXDxkaXY+Zm9vXFw8L2Rpdj4nLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBlbW9qaToge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnRW5hYmxlIGVtb2ppIHN1cHBvcnQuIEV4OiBgdGhpcyBpcyBhIDpzbWlsZTogZW1vamlgJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgdW5kZXJsaW5lOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdFbmFibGUgc3VwcG9ydCBmb3IgdW5kZXJsaW5lLiBTeW50YXggaXMgZG91YmxlIG9yIHRyaXBsZSB1bmRlcnNjb3JlczogYF9fdW5kZXJsaW5lIHdvcmRfX2AuIFdpdGggdGhpcyBvcHRpb24gZW5hYmxlZCwgdW5kZXJzY29yZXMgbm8gbG9uZ2VyIHBhcnNlcyBpbnRvIGA8ZW0+YCBhbmQgYDxzdHJvbmc+YCcsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGVsbGlwc2lzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgICBkZXNjcmliZTogJ1JlcGxhY2VzIHRocmVlIGRvdHMgd2l0aCB0aGUgZWxsaXBzaXMgdW5pY29kZSBjaGFyYWN0ZXInLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBjb21wbGV0ZUhUTUxEb2N1bWVudDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnT3V0cHV0cyBhIGNvbXBsZXRlIGh0bWwgZG9jdW1lbnQsIGluY2x1ZGluZyBgPGh0bWw+YCwgYDxoZWFkPmAgYW5kIGA8Ym9keT5gIHRhZ3MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBtZXRhZGF0YToge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnRW5hYmxlIHN1cHBvcnQgZm9yIGRvY3VtZW50IG1ldGFkYXRhIChkZWZpbmVkIGF0IHRoZSB0b3Agb2YgdGhlIGRvY3VtZW50IGJldHdlZW4gYMKrwqvCq2AgYW5kIGDCu8K7wrtgIG9yIGJldHdlZW4gYC0tLWAgYW5kIGAtLS1gKS4nLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBzcGxpdEFkamFjZW50QmxvY2txdW90ZXM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1NwbGl0IGFkamFjZW50IGJsb2NrcXVvdGUgYmxvY2tzJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH1cbiAgfTtcbiAgaWYgKHNpbXBsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkZWZhdWx0T3B0aW9ucykpO1xuICB9XG4gIHZhciByZXQgPSB7fTtcbiAgZm9yICh2YXIgb3B0IGluIGRlZmF1bHRPcHRpb25zKSB7XG4gICAgaWYgKGRlZmF1bHRPcHRpb25zLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgIHJldFtvcHRdID0gZGVmYXVsdE9wdGlvbnNbb3B0XS5kZWZhdWx0VmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGFsbE9wdGlvbnNPbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIG9wdGlvbnMgPSBnZXREZWZhdWx0T3B0cyh0cnVlKSxcbiAgICAgIHJldCA9IHt9O1xuICBmb3IgKHZhciBvcHQgaW4gb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgIHJldFtvcHRdID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiIsICIvKipcbiAqIENyZWF0ZWQgYnkgVGl2aWUgb24gMDYtMDEtMjAxNS5cbiAqL1xuXG4vLyBQcml2YXRlIHByb3BlcnRpZXNcbnZhciBzaG93ZG93biA9IHt9LFxuICAgIHBhcnNlcnMgPSB7fSxcbiAgICBleHRlbnNpb25zID0ge30sXG4gICAgZ2xvYmFsT3B0aW9ucyA9IGdldERlZmF1bHRPcHRzKHRydWUpLFxuICAgIHNldEZsYXZvciA9ICd2YW5pbGxhJyxcbiAgICBmbGF2b3IgPSB7XG4gICAgICBnaXRodWI6IHtcbiAgICAgICAgb21pdEV4dHJhV0xJbkNvZGVCbG9ja3M6ICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBzaW1wbGlmaWVkQXV0b0xpbms6ICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGV4Y2x1ZGVUcmFpbGluZ1B1bmN0dWF0aW9uRnJvbVVSTHM6ICAgdHJ1ZSxcbiAgICAgICAgbGl0ZXJhbE1pZFdvcmRVbmRlcnNjb3JlczogICAgICAgICAgICB0cnVlLFxuICAgICAgICBzdHJpa2V0aHJvdWdoOiAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHRhYmxlczogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGFibGVzSGVhZGVySWQ6ICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBnaENvZGVCbG9ja3M6ICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHRhc2tsaXN0czogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgZGlzYWJsZUZvcmNlZDRTcGFjZXNJbmRlbnRlZFN1Ymxpc3RzOiB0cnVlLFxuICAgICAgICBzaW1wbGVMaW5lQnJlYWtzOiAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHJlcXVpcmVTcGFjZUJlZm9yZUhlYWRpbmdUZXh0OiAgICAgICAgdHJ1ZSxcbiAgICAgICAgZ2hDb21wYXRpYmxlSGVhZGVySWQ6ICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBnaE1lbnRpb25zOiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGJhY2tzbGFzaEVzY2FwZXNIVE1MVGFnczogICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgZW1vamk6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBzcGxpdEFkamFjZW50QmxvY2txdW90ZXM6ICAgICAgICAgICAgIHRydWVcbiAgICAgIH0sXG4gICAgICBvcmlnaW5hbDoge1xuICAgICAgICBub0hlYWRlcklkOiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGdoQ29kZUJsb2NrczogICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgIH0sXG4gICAgICBnaG9zdDoge1xuICAgICAgICBvbWl0RXh0cmFXTEluQ29kZUJsb2NrczogICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHBhcnNlSW1nRGltZW5zaW9uczogICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgc2ltcGxpZmllZEF1dG9MaW5rOiAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBleGNsdWRlVHJhaWxpbmdQdW5jdHVhdGlvbkZyb21VUkxzOiAgIHRydWUsXG4gICAgICAgIGxpdGVyYWxNaWRXb3JkVW5kZXJzY29yZXM6ICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgc3RyaWtldGhyb3VnaDogICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICB0YWJsZXM6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHRhYmxlc0hlYWRlcklkOiAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgZ2hDb2RlQmxvY2tzOiAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICB0YXNrbGlzdHM6ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHNtb290aExpdmVQcmV2aWV3OiAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgc2ltcGxlTGluZUJyZWFrczogICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICByZXF1aXJlU3BhY2VCZWZvcmVIZWFkaW5nVGV4dDogICAgICAgIHRydWUsXG4gICAgICAgIGdoTWVudGlvbnM6ICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgIGVuY29kZUVtYWlsczogICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgfSxcbiAgICAgIHZhbmlsbGE6IGdldERlZmF1bHRPcHRzKHRydWUpLFxuICAgICAgYWxsT246IGFsbE9wdGlvbnNPbigpXG4gICAgfTtcblxuLyoqXG4gKiBoZWxwZXIgbmFtZXNwYWNlXG4gKiBAdHlwZSB7e319XG4gKi9cbnNob3dkb3duLmhlbHBlciA9IHt9O1xuXG4vKipcbiAqIFRPRE8gTEVHQUNZIFNVUFBPUlQgQ09ERVxuICogQHR5cGUge3t9fVxuICovXG5zaG93ZG93bi5leHRlbnNpb25zID0ge307XG5cbi8qKlxuICogU2V0IGEgZ2xvYmFsIG9wdGlvblxuICogQHN0YXRpY1xuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybnMge3Nob3dkb3dufVxuICovXG5zaG93ZG93bi5zZXRPcHRpb24gPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGdsb2JhbE9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogR2V0IGEgZ2xvYmFsIG9wdGlvblxuICogQHN0YXRpY1xuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHJldHVybnMgeyp9XG4gKi9cbnNob3dkb3duLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZ2xvYmFsT3B0aW9uc1trZXldO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGdsb2JhbCBvcHRpb25zXG4gKiBAc3RhdGljXG4gKiBAcmV0dXJucyB7e319XG4gKi9cbnNob3dkb3duLmdldE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdsb2JhbE9wdGlvbnM7XG59O1xuXG4vKipcbiAqIFJlc2V0IGdsb2JhbCBvcHRpb25zIHRvIHRoZSBkZWZhdWx0IHZhbHVlc1xuICogQHN0YXRpY1xuICovXG5zaG93ZG93bi5yZXNldE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ2xvYmFsT3B0aW9ucyA9IGdldERlZmF1bHRPcHRzKHRydWUpO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGZsYXZvciBzaG93ZG93biBzaG91bGQgdXNlIGFzIGRlZmF1bHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKi9cbnNob3dkb3duLnNldEZsYXZvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCFmbGF2b3IuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICB0aHJvdyBFcnJvcihuYW1lICsgJyBmbGF2b3Igd2FzIG5vdCBmb3VuZCcpO1xuICB9XG4gIHNob3dkb3duLnJlc2V0T3B0aW9ucygpO1xuICB2YXIgcHJlc2V0ID0gZmxhdm9yW25hbWVdO1xuICBzZXRGbGF2b3IgPSBuYW1lO1xuICBmb3IgKHZhciBvcHRpb24gaW4gcHJlc2V0KSB7XG4gICAgaWYgKHByZXNldC5oYXNPd25Qcm9wZXJ0eShvcHRpb24pKSB7XG4gICAgICBnbG9iYWxPcHRpb25zW29wdGlvbl0gPSBwcmVzZXRbb3B0aW9uXTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50bHkgc2V0IGZsYXZvclxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuc2hvd2Rvd24uZ2V0Rmxhdm9yID0gZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBzZXRGbGF2b3I7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgb3B0aW9ucyBvZiBhIHNwZWNpZmllZCBmbGF2b3IuIFJldHVybnMgdW5kZWZpbmVkIGlmIHRoZSBmbGF2b3Igd2FzIG5vdCBmb3VuZFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZmxhdm9yXG4gKiBAcmV0dXJucyB7e318dW5kZWZpbmVkfVxuICovXG5zaG93ZG93bi5nZXRGbGF2b3JPcHRpb25zID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoZmxhdm9yLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgcmV0dXJuIGZsYXZvcltuYW1lXTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgb3B0aW9uc1xuICogQHN0YXRpY1xuICogQHBhcmFtIHtib29sZWFufSBbc2ltcGxlPXRydWVdXG4gKiBAcmV0dXJucyB7e319XG4gKi9cbnNob3dkb3duLmdldERlZmF1bHRPcHRpb25zID0gZnVuY3Rpb24gKHNpbXBsZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnZXREZWZhdWx0T3B0cyhzaW1wbGUpO1xufTtcblxuLyoqXG4gKiBHZXQgb3Igc2V0IGEgc3ViUGFyc2VyXG4gKlxuICogc3ViUGFyc2VyKG5hbWUpICAgICAgIC0gR2V0IGEgcmVnaXN0ZXJlZCBzdWJQYXJzZXJcbiAqIHN1YlBhcnNlcihuYW1lLCBmdW5jKSAtIFJlZ2lzdGVyIGEgc3ViUGFyc2VyXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2Z1bmNdXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyID0gZnVuY3Rpb24gKG5hbWUsIGZ1bmMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKG5hbWUpKSB7XG4gICAgaWYgKHR5cGVvZiBmdW5jICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcGFyc2Vyc1tuYW1lXSA9IGZ1bmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXJzZXJzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZXJzW25hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1N1YlBhcnNlciBuYW1lZCAnICsgbmFtZSArICcgbm90IHJlZ2lzdGVyZWQhJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEdldHMgb3IgcmVnaXN0ZXJzIGFuIGV4dGVuc2lvblxuICogQHN0YXRpY1xuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7b2JqZWN0fG9iamVjdFtdfGZ1bmN0aW9uPX0gZXh0XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuc2hvd2Rvd24uZXh0ZW5zaW9uID0gZnVuY3Rpb24gKG5hbWUsIGV4dCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcobmFtZSkpIHtcbiAgICB0aHJvdyBFcnJvcignRXh0ZW5zaW9uIFxcJ25hbWVcXCcgbXVzdCBiZSBhIHN0cmluZycpO1xuICB9XG5cbiAgbmFtZSA9IHNob3dkb3duLmhlbHBlci5zdGRFeHROYW1lKG5hbWUpO1xuXG4gIC8vIEdldHRlclxuICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGV4dCkpIHtcbiAgICBpZiAoIWV4dGVuc2lvbnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIHRocm93IEVycm9yKCdFeHRlbnNpb24gbmFtZWQgJyArIG5hbWUgKyAnIGlzIG5vdCByZWdpc3RlcmVkIScpO1xuICAgIH1cbiAgICByZXR1cm4gZXh0ZW5zaW9uc1tuYW1lXTtcblxuICAgIC8vIFNldHRlclxuICB9IGVsc2Uge1xuICAgIC8vIEV4cGFuZCBleHRlbnNpb24gaWYgaXQncyB3cmFwcGVkIGluIGEgZnVuY3Rpb25cbiAgICBpZiAodHlwZW9mIGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZXh0ID0gZXh0KCk7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGV4dGVuc2lvbiBpcyBhbiBhcnJheVxuICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzQXJyYXkoZXh0KSkge1xuICAgICAgZXh0ID0gW2V4dF07XG4gICAgfVxuXG4gICAgdmFyIHZhbGlkRXh0ZW5zaW9uID0gdmFsaWRhdGUoZXh0LCBuYW1lKTtcblxuICAgIGlmICh2YWxpZEV4dGVuc2lvbi52YWxpZCkge1xuICAgICAgZXh0ZW5zaW9uc1tuYW1lXSA9IGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3IodmFsaWRFeHRlbnNpb24uZXJyb3IpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBHZXRzIGFsbCBleHRlbnNpb25zIHJlZ2lzdGVyZWRcbiAqIEByZXR1cm5zIHt7fX1cbiAqL1xuc2hvd2Rvd24uZ2V0QWxsRXh0ZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZXh0ZW5zaW9ucztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGV4dGVuc2lvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqL1xuc2hvd2Rvd24ucmVtb3ZlRXh0ZW5zaW9uID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBkZWxldGUgZXh0ZW5zaW9uc1tuYW1lXTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgZXh0ZW5zaW9uc1xuICovXG5zaG93ZG93bi5yZXNldEV4dGVuc2lvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZXh0ZW5zaW9ucyA9IHt9O1xufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBleHRlbnNpb25cbiAqIEBwYXJhbSB7YXJyYXl9IGV4dGVuc2lvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHt7dmFsaWQ6IGJvb2xlYW4sIGVycm9yOiBzdHJpbmd9fVxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZSAoZXh0ZW5zaW9uLCBuYW1lKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZXJyTXNnID0gKG5hbWUpID8gJ0Vycm9yIGluICcgKyBuYW1lICsgJyBleHRlbnNpb24tPicgOiAnRXJyb3IgaW4gdW5uYW1lZCBleHRlbnNpb24nLFxuICAgICAgcmV0ID0ge1xuICAgICAgICB2YWxpZDogdHJ1ZSxcbiAgICAgICAgZXJyb3I6ICcnXG4gICAgICB9O1xuXG4gIGlmICghc2hvd2Rvd24uaGVscGVyLmlzQXJyYXkoZXh0ZW5zaW9uKSkge1xuICAgIGV4dGVuc2lvbiA9IFtleHRlbnNpb25dO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHRlbnNpb24ubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYmFzZU1zZyA9IGVyck1zZyArICcgc3ViLWV4dGVuc2lvbiAnICsgaSArICc6ICcsXG4gICAgICAgIGV4dCA9IGV4dGVuc2lvbltpXTtcbiAgICBpZiAodHlwZW9mIGV4dCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArICdtdXN0IGJlIGFuIG9iamVjdCwgYnV0ICcgKyB0eXBlb2YgZXh0ICsgJyBnaXZlbic7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKGV4dC50eXBlKSkge1xuICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ3Byb3BlcnR5IFwidHlwZVwiIG11c3QgYmUgYSBzdHJpbmcsIGJ1dCAnICsgdHlwZW9mIGV4dC50eXBlICsgJyBnaXZlbic7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHZhciB0eXBlID0gZXh0LnR5cGUgPSBleHQudHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gbm9ybWFsaXplIGV4dGVuc2lvbiB0eXBlXG4gICAgaWYgKHR5cGUgPT09ICdsYW5ndWFnZScpIHtcbiAgICAgIHR5cGUgPSBleHQudHlwZSA9ICdsYW5nJztcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gJ2h0bWwnKSB7XG4gICAgICB0eXBlID0gZXh0LnR5cGUgPSAnb3V0cHV0JztcbiAgICB9XG5cbiAgICBpZiAodHlwZSAhPT0gJ2xhbmcnICYmIHR5cGUgIT09ICdvdXRwdXQnICYmIHR5cGUgIT09ICdsaXN0ZW5lcicpIHtcbiAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArICd0eXBlICcgKyB0eXBlICsgJyBpcyBub3QgcmVjb2duaXplZC4gVmFsaWQgdmFsdWVzOiBcImxhbmcvbGFuZ3VhZ2VcIiwgXCJvdXRwdXQvaHRtbFwiIG9yIFwibGlzdGVuZXJcIic7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSAnbGlzdGVuZXInKSB7XG4gICAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGV4dC5saXN0ZW5lcnMpKSB7XG4gICAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJy4gRXh0ZW5zaW9ucyBvZiB0eXBlIFwibGlzdGVuZXJcIiBtdXN0IGhhdmUgYSBwcm9wZXJ0eSBjYWxsZWQgXCJsaXN0ZW5lcnNcIic7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0LmZpbHRlcikgJiYgc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGV4dC5yZWdleCkpIHtcbiAgICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyB0eXBlICsgJyBleHRlbnNpb25zIG11c3QgZGVmaW5lIGVpdGhlciBhIFwicmVnZXhcIiBwcm9wZXJ0eSBvciBhIFwiZmlsdGVyXCIgbWV0aG9kJztcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXh0Lmxpc3RlbmVycykge1xuICAgICAgaWYgKHR5cGVvZiBleHQubGlzdGVuZXJzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArICdcImxpc3RlbmVyc1wiIHByb3BlcnR5IG11c3QgYmUgYW4gb2JqZWN0IGJ1dCAnICsgdHlwZW9mIGV4dC5saXN0ZW5lcnMgKyAnIGdpdmVuJztcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGxuIGluIGV4dC5saXN0ZW5lcnMpIHtcbiAgICAgICAgaWYgKGV4dC5saXN0ZW5lcnMuaGFzT3duUHJvcGVydHkobG4pKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBleHQubGlzdGVuZXJzW2xuXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ1wibGlzdGVuZXJzXCIgcHJvcGVydHkgbXVzdCBiZSBhbiBoYXNoIG9mIFtldmVudCBuYW1lXTogW2NhbGxiYWNrXS4gbGlzdGVuZXJzLicgKyBsbiArXG4gICAgICAgICAgICAgICcgbXVzdCBiZSBhIGZ1bmN0aW9uIGJ1dCAnICsgdHlwZW9mIGV4dC5saXN0ZW5lcnNbbG5dICsgJyBnaXZlbic7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHQuZmlsdGVyKSB7XG4gICAgICBpZiAodHlwZW9mIGV4dC5maWx0ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnXCJmaWx0ZXJcIiBtdXN0IGJlIGEgZnVuY3Rpb24sIGJ1dCAnICsgdHlwZW9mIGV4dC5maWx0ZXIgKyAnIGdpdmVuJztcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGV4dC5yZWdleCkge1xuICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1N0cmluZyhleHQucmVnZXgpKSB7XG4gICAgICAgIGV4dC5yZWdleCA9IG5ldyBSZWdFeHAoZXh0LnJlZ2V4LCAnZycpO1xuICAgICAgfVxuICAgICAgaWYgKCEoZXh0LnJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArICdcInJlZ2V4XCIgcHJvcGVydHkgbXVzdCBlaXRoZXIgYmUgYSBzdHJpbmcgb3IgYSBSZWdFeHAgb2JqZWN0LCBidXQgJyArIHR5cGVvZiBleHQucmVnZXggKyAnIGdpdmVuJztcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0LnJlcGxhY2UpKSB7XG4gICAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ1wicmVnZXhcIiBleHRlbnNpb25zIG11c3QgaW1wbGVtZW50IGEgcmVwbGFjZSBzdHJpbmcgb3IgZnVuY3Rpb24nO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIFZhbGlkYXRlIGV4dGVuc2lvblxuICogQHBhcmFtIHtvYmplY3R9IGV4dFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbnNob3dkb3duLnZhbGlkYXRlRXh0ZW5zaW9uID0gZnVuY3Rpb24gKGV4dCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHZhbGlkYXRlRXh0ZW5zaW9uID0gdmFsaWRhdGUoZXh0LCBudWxsKTtcbiAgaWYgKCF2YWxpZGF0ZUV4dGVuc2lvbi52YWxpZCkge1xuICAgIGNvbnNvbGUud2Fybih2YWxpZGF0ZUV4dGVuc2lvbi5lcnJvcik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbiIsICIvKipcbiAqIHNob3dkb3duanMgaGVscGVyIGZ1bmN0aW9uc1xuICovXG5cbmlmICghc2hvd2Rvd24uaGFzT3duUHJvcGVydHkoJ2hlbHBlcicpKSB7XG4gIHNob3dkb3duLmhlbHBlciA9IHt9O1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhciBpcyBzdHJpbmdcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7c3RyaW5nfSBhXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nID0gZnVuY3Rpb24gKGEpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gKHR5cGVvZiBhID09PSAnc3RyaW5nJyB8fCBhIGluc3RhbmNlb2YgU3RyaW5nKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFyIGlzIGEgZnVuY3Rpb25cbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7Kn0gYVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbnNob3dkb3duLmhlbHBlci5pc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGEpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gYSAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoYSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG4vKipcbiAqIGlzQXJyYXkgaGVscGVyIGZ1bmN0aW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0geyp9IGFcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5zaG93ZG93bi5oZWxwZXIuaXNBcnJheSA9IGZ1bmN0aW9uIChhKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYSk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHVuZGVmaW5lZFxuICogQHN0YXRpY1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICovXG5zaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbn07XG5cbi8qKlxuICogRm9yRWFjaCBoZWxwZXIgZnVuY3Rpb25cbiAqIEl0ZXJhdGVzIG92ZXIgQXJyYXlzIGFuZCBPYmplY3RzIChvd24gcHJvcGVydGllcyBvbmx5KVxuICogQHN0YXRpY1xuICogQHBhcmFtIHsqfSBvYmpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIEFjY2VwdHMgMyBwYXJhbXM6IDEuIHZhbHVlLCAyLiBrZXksIDMuIHRoZSBvcmlnaW5hbCBhcnJheS9vYmplY3RcbiAqL1xuc2hvd2Rvd24uaGVscGVyLmZvckVhY2ggPSBmdW5jdGlvbiAob2JqLCBjYWxsYmFjaykge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIGNoZWNrIGlmIG9iaiBpcyBkZWZpbmVkXG4gIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQob2JqKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignb2JqIHBhcmFtIGlzIHJlcXVpcmVkJyk7XG4gIH1cblxuICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGNhbGxiYWNrKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2FsbGJhY2sgcGFyYW0gaXMgcmVxdWlyZWQnKTtcbiAgfVxuXG4gIGlmICghc2hvd2Rvd24uaGVscGVyLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsYmFjayBwYXJhbSBtdXN0IGJlIGEgZnVuY3Rpb24vY2xvc3VyZScpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmouZm9yRWFjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9iai5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmIChzaG93ZG93bi5oZWxwZXIuaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNhbGxiYWNrKG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIChvYmopID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIGNhbGxiYWNrKG9ialtwcm9wXSwgcHJvcCwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdvYmogZG9lcyBub3Qgc2VlbSB0byBiZSBhbiBhcnJheSBvciBhbiBpdGVyYWJsZSBvYmplY3QnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTdGFuZGFyZGlkaXplIGV4dGVuc2lvbiBuYW1lXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gcyBleHRlbnNpb24gbmFtZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuc2hvd2Rvd24uaGVscGVyLnN0ZEV4dE5hbWUgPSBmdW5jdGlvbiAocykge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBzLnJlcGxhY2UoL1tfPyorXFwvXFxcXC5eLV0vZywgJycpLnJlcGxhY2UoL1xccy9nLCAnJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbmZ1bmN0aW9uIGVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayAod2hvbGVNYXRjaCwgbTEpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgY2hhckNvZGVUb0VzY2FwZSA9IG0xLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiAnwqhFJyArIGNoYXJDb2RlVG9Fc2NhcGUgKyAnRSc7XG59XG5cbi8qKlxuICogQ2FsbGJhY2sgdXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyB3aGVuIHBhc3NpbmcgdGhyb3VnaCBTdHJpbmcucmVwbGFjZVxuICogQHN0YXRpY1xuICogQHBhcmFtIHtzdHJpbmd9IHdob2xlTWF0Y2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBtMVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayA9IGVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjaztcblxuLyoqXG4gKiBFc2NhcGUgY2hhcmFjdGVycyBpbiBhIHN0cmluZ1xuICogQHN0YXRpY1xuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyc1RvRXNjYXBlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFmdGVyQmFja3NsYXNoXG4gKiBAcmV0dXJucyB7WE1MfHN0cmluZ3x2b2lkfCp9XG4gKi9cbnNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzID0gZnVuY3Rpb24gKHRleHQsIGNoYXJzVG9Fc2NhcGUsIGFmdGVyQmFja3NsYXNoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gRmlyc3Qgd2UgaGF2ZSB0byBlc2NhcGUgdGhlIGVzY2FwZSBjaGFyYWN0ZXJzIHNvIHRoYXRcbiAgLy8gd2UgY2FuIGJ1aWxkIGEgY2hhcmFjdGVyIGNsYXNzIG91dCBvZiB0aGVtXG4gIHZhciByZWdleFN0cmluZyA9ICcoWycgKyBjaGFyc1RvRXNjYXBlLnJlcGxhY2UoLyhbXFxbXFxdXFxcXF0pL2csICdcXFxcJDEnKSArICddKSc7XG5cbiAgaWYgKGFmdGVyQmFja3NsYXNoKSB7XG4gICAgcmVnZXhTdHJpbmcgPSAnXFxcXFxcXFwnICsgcmVnZXhTdHJpbmc7XG4gIH1cblxuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4U3RyaW5nLCAnZycpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHJlZ2V4LCBlc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuXG4gIHJldHVybiB0ZXh0O1xufTtcblxuLyoqXG4gKiBVbmVzY2FwZSBIVE1MIGVudGl0aWVzXG4gKiBAcGFyYW0gdHh0XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5zaG93ZG93bi5oZWxwZXIudW5lc2NhcGVIVE1MRW50aXRpZXMgPSBmdW5jdGlvbiAodHh0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICByZXR1cm4gdHh0XG4gICAgLnJlcGxhY2UoLyZxdW90Oy9nLCAnXCInKVxuICAgIC5yZXBsYWNlKC8mbHQ7L2csICc8JylcbiAgICAucmVwbGFjZSgvJmd0Oy9nLCAnPicpXG4gICAgLnJlcGxhY2UoLyZhbXA7L2csICcmJyk7XG59O1xuXG52YXIgcmd4RmluZE1hdGNoUG9zID0gZnVuY3Rpb24gKHN0ciwgbGVmdCwgcmlnaHQsIGZsYWdzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGYgPSBmbGFncyB8fCAnJyxcbiAgICAgIGcgPSBmLmluZGV4T2YoJ2cnKSA+IC0xLFxuICAgICAgeCA9IG5ldyBSZWdFeHAobGVmdCArICd8JyArIHJpZ2h0LCAnZycgKyBmLnJlcGxhY2UoL2cvZywgJycpKSxcbiAgICAgIGwgPSBuZXcgUmVnRXhwKGxlZnQsIGYucmVwbGFjZSgvZy9nLCAnJykpLFxuICAgICAgcG9zID0gW10sXG4gICAgICB0LCBzLCBtLCBzdGFydCwgZW5kO1xuXG4gIGRvIHtcbiAgICB0ID0gMDtcbiAgICB3aGlsZSAoKG0gPSB4LmV4ZWMoc3RyKSkpIHtcbiAgICAgIGlmIChsLnRlc3QobVswXSkpIHtcbiAgICAgICAgaWYgKCEodCsrKSkge1xuICAgICAgICAgIHMgPSB4Lmxhc3RJbmRleDtcbiAgICAgICAgICBzdGFydCA9IHMgLSBtWzBdLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0KSB7XG4gICAgICAgIGlmICghLS10KSB7XG4gICAgICAgICAgZW5kID0gbS5pbmRleCArIG1bMF0ubGVuZ3RoO1xuICAgICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAgICBsZWZ0OiB7c3RhcnQ6IHN0YXJ0LCBlbmQ6IHN9LFxuICAgICAgICAgICAgbWF0Y2g6IHtzdGFydDogcywgZW5kOiBtLmluZGV4fSxcbiAgICAgICAgICAgIHJpZ2h0OiB7c3RhcnQ6IG0uaW5kZXgsIGVuZDogZW5kfSxcbiAgICAgICAgICAgIHdob2xlTWF0Y2g6IHtzdGFydDogc3RhcnQsIGVuZDogZW5kfVxuICAgICAgICAgIH07XG4gICAgICAgICAgcG9zLnB1c2gob2JqKTtcbiAgICAgICAgICBpZiAoIWcpIHtcbiAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IHdoaWxlICh0ICYmICh4Lmxhc3RJbmRleCA9IHMpKTtcblxuICByZXR1cm4gcG9zO1xufTtcblxuLyoqXG4gKiBtYXRjaFJlY3Vyc2l2ZVJlZ0V4cFxuICpcbiAqIChjKSAyMDA3IFN0ZXZlbiBMZXZpdGhhbiA8c3RldmVubGV2aXRoYW4uY29tPlxuICogTUlUIExpY2Vuc2VcbiAqXG4gKiBBY2NlcHRzIGEgc3RyaW5nIHRvIHNlYXJjaCwgYSBsZWZ0IGFuZCByaWdodCBmb3JtYXQgZGVsaW1pdGVyXG4gKiBhcyByZWdleCBwYXR0ZXJucywgYW5kIG9wdGlvbmFsIHJlZ2V4IGZsYWdzLiBSZXR1cm5zIGFuIGFycmF5XG4gKiBvZiBtYXRjaGVzLCBhbGxvd2luZyBuZXN0ZWQgaW5zdGFuY2VzIG9mIGxlZnQvcmlnaHQgZGVsaW1pdGVycy5cbiAqIFVzZSB0aGUgXCJnXCIgZmxhZyB0byByZXR1cm4gYWxsIG1hdGNoZXMsIG90aGVyd2lzZSBvbmx5IHRoZVxuICogZmlyc3QgaXMgcmV0dXJuZWQuIEJlIGNhcmVmdWwgdG8gZW5zdXJlIHRoYXQgdGhlIGxlZnQgYW5kXG4gKiByaWdodCBmb3JtYXQgZGVsaW1pdGVycyBwcm9kdWNlIG11dHVhbGx5IGV4Y2x1c2l2ZSBtYXRjaGVzLlxuICogQmFja3JlZmVyZW5jZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aGluIHRoZSByaWdodCBkZWxpbWl0ZXJcbiAqIGR1ZSB0byBob3cgaXQgaXMgaW50ZXJuYWxseSBjb21iaW5lZCB3aXRoIHRoZSBsZWZ0IGRlbGltaXRlci5cbiAqIFdoZW4gbWF0Y2hpbmcgc3RyaW5ncyB3aG9zZSBmb3JtYXQgZGVsaW1pdGVycyBhcmUgdW5iYWxhbmNlZFxuICogdG8gdGhlIGxlZnQgb3IgcmlnaHQsIHRoZSBvdXRwdXQgaXMgaW50ZW50aW9uYWxseSBhcyBhXG4gKiBjb252ZW50aW9uYWwgcmVnZXggbGlicmFyeSB3aXRoIHJlY3Vyc2lvbiBzdXBwb3J0IHdvdWxkXG4gKiBwcm9kdWNlLCBlLmcuIFwiPDx4PlwiIGFuZCBcIjx4Pj5cIiBib3RoIHByb2R1Y2UgW1wieFwiXSB3aGVuIHVzaW5nXG4gKiBcIjxcIiBhbmQgXCI+XCIgYXMgdGhlIGRlbGltaXRlcnMgKGJvdGggc3RyaW5ncyBjb250YWluIGEgc2luZ2xlLFxuICogYmFsYW5jZWQgaW5zdGFuY2Ugb2YgXCI8eD5cIikuXG4gKlxuICogZXhhbXBsZXM6XG4gKiBtYXRjaFJlY3Vyc2l2ZVJlZ0V4cChcInRlc3RcIiwgXCJcXFxcKFwiLCBcIlxcXFwpXCIpXG4gKiByZXR1cm5zOiBbXVxuICogbWF0Y2hSZWN1cnNpdmVSZWdFeHAoXCI8dDw8ZT4+PHM+PnQ8PlwiLCBcIjxcIiwgXCI+XCIsIFwiZ1wiKVxuICogcmV0dXJuczogW1widDw8ZT4+PHM+XCIsIFwiXCJdXG4gKiBtYXRjaFJlY3Vyc2l2ZVJlZ0V4cChcIjxkaXYgaWQ9XFxcInhcXFwiPnRlc3Q8L2Rpdj5cIiwgXCI8ZGl2XFxcXGJbXj5dKj5cIiwgXCI8L2Rpdj5cIiwgXCJnaVwiKVxuICogcmV0dXJuczogW1widGVzdFwiXVxuICovXG5zaG93ZG93bi5oZWxwZXIubWF0Y2hSZWN1cnNpdmVSZWdFeHAgPSBmdW5jdGlvbiAoc3RyLCBsZWZ0LCByaWdodCwgZmxhZ3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBtYXRjaFBvcyA9IHJneEZpbmRNYXRjaFBvcyAoc3RyLCBsZWZ0LCByaWdodCwgZmxhZ3MpLFxuICAgICAgcmVzdWx0cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Y2hQb3MubGVuZ3RoOyArK2kpIHtcbiAgICByZXN1bHRzLnB1c2goW1xuICAgICAgc3RyLnNsaWNlKG1hdGNoUG9zW2ldLndob2xlTWF0Y2guc3RhcnQsIG1hdGNoUG9zW2ldLndob2xlTWF0Y2guZW5kKSxcbiAgICAgIHN0ci5zbGljZShtYXRjaFBvc1tpXS5tYXRjaC5zdGFydCwgbWF0Y2hQb3NbaV0ubWF0Y2guZW5kKSxcbiAgICAgIHN0ci5zbGljZShtYXRjaFBvc1tpXS5sZWZ0LnN0YXJ0LCBtYXRjaFBvc1tpXS5sZWZ0LmVuZCksXG4gICAgICBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ucmlnaHQuc3RhcnQsIG1hdGNoUG9zW2ldLnJpZ2h0LmVuZClcbiAgICBdKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufSByZXBsYWNlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGxlZnRcbiAqIEBwYXJhbSB7c3RyaW5nfSByaWdodFxuICogQHBhcmFtIHtzdHJpbmd9IGZsYWdzXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5zaG93ZG93bi5oZWxwZXIucmVwbGFjZVJlY3Vyc2l2ZVJlZ0V4cCA9IGZ1bmN0aW9uIChzdHIsIHJlcGxhY2VtZW50LCBsZWZ0LCByaWdodCwgZmxhZ3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghc2hvd2Rvd24uaGVscGVyLmlzRnVuY3Rpb24ocmVwbGFjZW1lbnQpKSB7XG4gICAgdmFyIHJlcFN0ciA9IHJlcGxhY2VtZW50O1xuICAgIHJlcGxhY2VtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlcFN0cjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIG1hdGNoUG9zID0gcmd4RmluZE1hdGNoUG9zKHN0ciwgbGVmdCwgcmlnaHQsIGZsYWdzKSxcbiAgICAgIGZpbmFsU3RyID0gc3RyLFxuICAgICAgbG5nID0gbWF0Y2hQb3MubGVuZ3RoO1xuXG4gIGlmIChsbmcgPiAwKSB7XG4gICAgdmFyIGJpdHMgPSBbXTtcbiAgICBpZiAobWF0Y2hQb3NbMF0ud2hvbGVNYXRjaC5zdGFydCAhPT0gMCkge1xuICAgICAgYml0cy5wdXNoKHN0ci5zbGljZSgwLCBtYXRjaFBvc1swXS53aG9sZU1hdGNoLnN0YXJ0KSk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG5nOyArK2kpIHtcbiAgICAgIGJpdHMucHVzaChcbiAgICAgICAgcmVwbGFjZW1lbnQoXG4gICAgICAgICAgc3RyLnNsaWNlKG1hdGNoUG9zW2ldLndob2xlTWF0Y2guc3RhcnQsIG1hdGNoUG9zW2ldLndob2xlTWF0Y2guZW5kKSxcbiAgICAgICAgICBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ubWF0Y2guc3RhcnQsIG1hdGNoUG9zW2ldLm1hdGNoLmVuZCksXG4gICAgICAgICAgc3RyLnNsaWNlKG1hdGNoUG9zW2ldLmxlZnQuc3RhcnQsIG1hdGNoUG9zW2ldLmxlZnQuZW5kKSxcbiAgICAgICAgICBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ucmlnaHQuc3RhcnQsIG1hdGNoUG9zW2ldLnJpZ2h0LmVuZClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIGlmIChpIDwgbG5nIC0gMSkge1xuICAgICAgICBiaXRzLnB1c2goc3RyLnNsaWNlKG1hdGNoUG9zW2ldLndob2xlTWF0Y2guZW5kLCBtYXRjaFBvc1tpICsgMV0ud2hvbGVNYXRjaC5zdGFydCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobWF0Y2hQb3NbbG5nIC0gMV0ud2hvbGVNYXRjaC5lbmQgPCBzdHIubGVuZ3RoKSB7XG4gICAgICBiaXRzLnB1c2goc3RyLnNsaWNlKG1hdGNoUG9zW2xuZyAtIDFdLndob2xlTWF0Y2guZW5kKSk7XG4gICAgfVxuICAgIGZpbmFsU3RyID0gYml0cy5qb2luKCcnKTtcbiAgfVxuICByZXR1cm4gZmluYWxTdHI7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGluZGV4IHdpdGhpbiB0aGUgcGFzc2VkIFN0cmluZyBvYmplY3Qgb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgdGhlIHNwZWNpZmllZCByZWdleCxcbiAqIHN0YXJ0aW5nIHRoZSBzZWFyY2ggYXQgZnJvbUluZGV4LiBSZXR1cm5zIC0xIGlmIHRoZSB2YWx1ZSBpcyBub3QgZm91bmQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBzdHJpbmcgdG8gc2VhcmNoXG4gKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXggUmVndWxhciBleHByZXNzaW9uIHRvIHNlYXJjaFxuICogQHBhcmFtIHtpbnR9IFtmcm9tSW5kZXggPSAwXSBJbmRleCB0byBzdGFydCB0aGUgc2VhcmNoXG4gKiBAcmV0dXJucyB7TnVtYmVyfVxuICogQHRocm93cyBJbnZhbGlkQXJndW1lbnRFcnJvclxuICovXG5zaG93ZG93bi5oZWxwZXIucmVnZXhJbmRleE9mID0gZnVuY3Rpb24gKHN0ciwgcmVnZXgsIGZyb21JbmRleCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICghc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKHN0cikpIHtcbiAgICB0aHJvdyAnSW52YWxpZEFyZ3VtZW50RXJyb3I6IGZpcnN0IHBhcmFtZXRlciBvZiBzaG93ZG93bi5oZWxwZXIucmVnZXhJbmRleE9mIGZ1bmN0aW9uIG11c3QgYmUgYSBzdHJpbmcnO1xuICB9XG4gIGlmIChyZWdleCBpbnN0YW5jZW9mIFJlZ0V4cCA9PT0gZmFsc2UpIHtcbiAgICB0aHJvdyAnSW52YWxpZEFyZ3VtZW50RXJyb3I6IHNlY29uZCBwYXJhbWV0ZXIgb2Ygc2hvd2Rvd24uaGVscGVyLnJlZ2V4SW5kZXhPZiBmdW5jdGlvbiBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFJlZ0V4cCc7XG4gIH1cbiAgdmFyIGluZGV4T2YgPSBzdHIuc3Vic3RyaW5nKGZyb21JbmRleCB8fCAwKS5zZWFyY2gocmVnZXgpO1xuICByZXR1cm4gKGluZGV4T2YgPj0gMCkgPyAoaW5kZXhPZiArIChmcm9tSW5kZXggfHwgMCkpIDogaW5kZXhPZjtcbn07XG5cbi8qKlxuICogU3BsaXRzIHRoZSBwYXNzZWQgc3RyaW5nIG9iamVjdCBhdCB0aGUgZGVmaW5lZCBpbmRleCwgYW5kIHJldHVybnMgYW4gYXJyYXkgY29tcG9zZWQgb2YgdGhlIHR3byBzdWJzdHJpbmdzXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIHN0cmluZyB0byBzcGxpdFxuICogQHBhcmFtIHtpbnR9IGluZGV4IGluZGV4IHRvIHNwbGl0IHN0cmluZyBhdFxuICogQHJldHVybnMge1tzdHJpbmcsc3RyaW5nXX1cbiAqIEB0aHJvd3MgSW52YWxpZEFyZ3VtZW50RXJyb3JcbiAqL1xuc2hvd2Rvd24uaGVscGVyLnNwbGl0QXRJbmRleCA9IGZ1bmN0aW9uIChzdHIsIGluZGV4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcoc3RyKSkge1xuICAgIHRocm93ICdJbnZhbGlkQXJndW1lbnRFcnJvcjogZmlyc3QgcGFyYW1ldGVyIG9mIHNob3dkb3duLmhlbHBlci5yZWdleEluZGV4T2YgZnVuY3Rpb24gbXVzdCBiZSBhIHN0cmluZyc7XG4gIH1cbiAgcmV0dXJuIFtzdHIuc3Vic3RyaW5nKDAsIGluZGV4KSwgc3RyLnN1YnN0cmluZyhpbmRleCldO1xufTtcblxuLyoqXG4gKiBPYmZ1c2NhdGUgYW4gZS1tYWlsIGFkZHJlc3MgdGhyb3VnaCB0aGUgdXNlIG9mIENoYXJhY3RlciBFbnRpdGllcyxcbiAqIHRyYW5zZm9ybWluZyBBU0NJSSBjaGFyYWN0ZXJzIGludG8gdGhlaXIgZXF1aXZhbGVudCBkZWNpbWFsIG9yIGhleCBlbnRpdGllcy5cbiAqXG4gKiBTaW5jZSBpdCBoYXMgYSByYW5kb20gY29tcG9uZW50LCBzdWJzZXF1ZW50IGNhbGxzIHRvIHRoaXMgZnVuY3Rpb24gcHJvZHVjZSBkaWZmZXJlbnQgcmVzdWx0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYWlsXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5zaG93ZG93bi5oZWxwZXIuZW5jb2RlRW1haWxBZGRyZXNzID0gZnVuY3Rpb24gKG1haWwpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgZW5jb2RlID0gW1xuICAgIGZ1bmN0aW9uIChjaCkge1xuICAgICAgcmV0dXJuICcmIycgKyBjaC5jaGFyQ29kZUF0KDApICsgJzsnO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gKGNoKSB7XG4gICAgICByZXR1cm4gJyYjeCcgKyBjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSArICc7JztcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChjaCkge1xuICAgICAgcmV0dXJuIGNoO1xuICAgIH1cbiAgXTtcblxuICBtYWlsID0gbWFpbC5yZXBsYWNlKC8uL2csIGZ1bmN0aW9uIChjaCkge1xuICAgIGlmIChjaCA9PT0gJ0AnKSB7XG4gICAgICAvLyB0aGlzICptdXN0KiBiZSBlbmNvZGVkLiBJIGluc2lzdC5cbiAgICAgIGNoID0gZW5jb2RlW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpXShjaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKTtcbiAgICAgIC8vIHJvdWdobHkgMTAlIHJhdywgNDUlIGhleCwgNDUlIGRlY1xuICAgICAgY2ggPSAoXG4gICAgICAgIHIgPiAwLjkgPyBlbmNvZGVbMl0oY2gpIDogciA+IDAuNDUgPyBlbmNvZGVbMV0oY2gpIDogZW5jb2RlWzBdKGNoKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoO1xuICB9KTtcblxuICByZXR1cm4gbWFpbDtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBzdHJcbiAqIEBwYXJhbSB0YXJnZXRMZW5ndGhcbiAqIEBwYXJhbSBwYWRTdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnNob3dkb3duLmhlbHBlci5wYWRFbmQgPSBmdW5jdGlvbiBwYWRFbmQgKHN0ciwgdGFyZ2V0TGVuZ3RoLCBwYWRTdHJpbmcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvKmpzaGludCBiaXR3aXNlOiBmYWxzZSovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzcGFjZS1pbmZpeC1vcHNcbiAgdGFyZ2V0TGVuZ3RoID0gdGFyZ2V0TGVuZ3RoPj4wOyAvL2Zsb29yIGlmIG51bWJlciBvciBjb252ZXJ0IG5vbi1udW1iZXIgdG8gMDtcbiAgLypqc2hpbnQgYml0d2lzZTogdHJ1ZSovXG4gIHBhZFN0cmluZyA9IFN0cmluZyhwYWRTdHJpbmcgfHwgJyAnKTtcbiAgaWYgKHN0ci5sZW5ndGggPiB0YXJnZXRMZW5ndGgpIHtcbiAgICByZXR1cm4gU3RyaW5nKHN0cik7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0TGVuZ3RoID0gdGFyZ2V0TGVuZ3RoIC0gc3RyLmxlbmd0aDtcbiAgICBpZiAodGFyZ2V0TGVuZ3RoID4gcGFkU3RyaW5nLmxlbmd0aCkge1xuICAgICAgcGFkU3RyaW5nICs9IHBhZFN0cmluZy5yZXBlYXQodGFyZ2V0TGVuZ3RoIC8gcGFkU3RyaW5nLmxlbmd0aCk7IC8vYXBwZW5kIHRvIG9yaWdpbmFsIHRvIGVuc3VyZSB3ZSBhcmUgbG9uZ2VyIHRoYW4gbmVlZGVkXG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcoc3RyKSArIHBhZFN0cmluZy5zbGljZSgwLHRhcmdldExlbmd0aCk7XG4gIH1cbn07XG5cbi8qKlxuICogUE9MWUZJTExTXG4gKi9cbi8vIHVzZSB0aGlzIGluc3RlYWQgb2YgYnVpbHRpbiBpcyB1bmRlZmluZWQgZm9yIElFOCBjb21wYXRpYmlsaXR5XG5pZiAodHlwZW9mIChjb25zb2xlKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgY29uc29sZSA9IHtcbiAgICB3YXJuOiBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBhbGVydChtc2cpO1xuICAgIH0sXG4gICAgbG9nOiBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBhbGVydChtc2cpO1xuICAgIH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHRocm93IG1zZztcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQ29tbW9uIHJlZ2V4ZXMuXG4gKiBXZSBkZWNsYXJlIHNvbWUgY29tbW9uIHJlZ2V4ZXMgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZVxuICovXG5zaG93ZG93bi5oZWxwZXIucmVnZXhlcyA9IHtcbiAgYXN0ZXJpc2tEYXNoQW5kQ29sb246IC8oWypfOn5dKS9nXG59O1xuXG4vKipcbiAqIEVNT0pJUyBMSVNUXG4gKi9cbnNob3dkb3duLmhlbHBlci5lbW9qaXMgPSB7XG4gICcrMSc6J1xcdWQ4M2RcXHVkYzRkJyxcbiAgJy0xJzonXFx1ZDgzZFxcdWRjNGUnLFxuICAnMTAwJzonXFx1ZDgzZFxcdWRjYWYnLFxuICAnMTIzNCc6J1xcdWQ4M2RcXHVkZDIyJyxcbiAgJzFzdF9wbGFjZV9tZWRhbCc6J1xcdWQ4M2VcXHVkZDQ3JyxcbiAgJzJuZF9wbGFjZV9tZWRhbCc6J1xcdWQ4M2VcXHVkZDQ4JyxcbiAgJzNyZF9wbGFjZV9tZWRhbCc6J1xcdWQ4M2VcXHVkZDQ5JyxcbiAgJzhiYWxsJzonXFx1ZDgzY1xcdWRmYjEnLFxuICAnYSc6J1xcdWQ4M2NcXHVkZDcwXFx1ZmUwZicsXG4gICdhYic6J1xcdWQ4M2NcXHVkZDhlJyxcbiAgJ2FiYyc6J1xcdWQ4M2RcXHVkZDI0JyxcbiAgJ2FiY2QnOidcXHVkODNkXFx1ZGQyMScsXG4gICdhY2NlcHQnOidcXHVkODNjXFx1ZGU1MScsXG4gICdhZXJpYWxfdHJhbXdheSc6J1xcdWQ4M2RcXHVkZWExJyxcbiAgJ2FpcnBsYW5lJzonXFx1MjcwOFxcdWZlMGYnLFxuICAnYWxhcm1fY2xvY2snOidcXHUyM2YwJyxcbiAgJ2FsZW1iaWMnOidcXHUyNjk3XFx1ZmUwZicsXG4gICdhbGllbic6J1xcdWQ4M2RcXHVkYzdkJyxcbiAgJ2FtYnVsYW5jZSc6J1xcdWQ4M2RcXHVkZTkxJyxcbiAgJ2FtcGhvcmEnOidcXHVkODNjXFx1ZGZmYScsXG4gICdhbmNob3InOidcXHUyNjkzXFx1ZmUwZicsXG4gICdhbmdlbCc6J1xcdWQ4M2RcXHVkYzdjJyxcbiAgJ2FuZ2VyJzonXFx1ZDgzZFxcdWRjYTInLFxuICAnYW5ncnknOidcXHVkODNkXFx1ZGUyMCcsXG4gICdhbmd1aXNoZWQnOidcXHVkODNkXFx1ZGUyNycsXG4gICdhbnQnOidcXHVkODNkXFx1ZGMxYycsXG4gICdhcHBsZSc6J1xcdWQ4M2NcXHVkZjRlJyxcbiAgJ2FxdWFyaXVzJzonXFx1MjY1MlxcdWZlMGYnLFxuICAnYXJpZXMnOidcXHUyNjQ4XFx1ZmUwZicsXG4gICdhcnJvd19iYWNrd2FyZCc6J1xcdTI1YzBcXHVmZTBmJyxcbiAgJ2Fycm93X2RvdWJsZV9kb3duJzonXFx1MjNlYycsXG4gICdhcnJvd19kb3VibGVfdXAnOidcXHUyM2ViJyxcbiAgJ2Fycm93X2Rvd24nOidcXHUyYjA3XFx1ZmUwZicsXG4gICdhcnJvd19kb3duX3NtYWxsJzonXFx1ZDgzZFxcdWRkM2QnLFxuICAnYXJyb3dfZm9yd2FyZCc6J1xcdTI1YjZcXHVmZTBmJyxcbiAgJ2Fycm93X2hlYWRpbmdfZG93bic6J1xcdTI5MzVcXHVmZTBmJyxcbiAgJ2Fycm93X2hlYWRpbmdfdXAnOidcXHUyOTM0XFx1ZmUwZicsXG4gICdhcnJvd19sZWZ0JzonXFx1MmIwNVxcdWZlMGYnLFxuICAnYXJyb3dfbG93ZXJfbGVmdCc6J1xcdTIxOTlcXHVmZTBmJyxcbiAgJ2Fycm93X2xvd2VyX3JpZ2h0JzonXFx1MjE5OFxcdWZlMGYnLFxuICAnYXJyb3dfcmlnaHQnOidcXHUyN2ExXFx1ZmUwZicsXG4gICdhcnJvd19yaWdodF9ob29rJzonXFx1MjFhYVxcdWZlMGYnLFxuICAnYXJyb3dfdXAnOidcXHUyYjA2XFx1ZmUwZicsXG4gICdhcnJvd191cF9kb3duJzonXFx1MjE5NVxcdWZlMGYnLFxuICAnYXJyb3dfdXBfc21hbGwnOidcXHVkODNkXFx1ZGQzYycsXG4gICdhcnJvd191cHBlcl9sZWZ0JzonXFx1MjE5NlxcdWZlMGYnLFxuICAnYXJyb3dfdXBwZXJfcmlnaHQnOidcXHUyMTk3XFx1ZmUwZicsXG4gICdhcnJvd3NfY2xvY2t3aXNlJzonXFx1ZDgzZFxcdWRkMDMnLFxuICAnYXJyb3dzX2NvdW50ZXJjbG9ja3dpc2UnOidcXHVkODNkXFx1ZGQwNCcsXG4gICdhcnQnOidcXHVkODNjXFx1ZGZhOCcsXG4gICdhcnRpY3VsYXRlZF9sb3JyeSc6J1xcdWQ4M2RcXHVkZTliJyxcbiAgJ2FydGlmaWNpYWxfc2F0ZWxsaXRlJzonXFx1ZDgzZFxcdWRlZjAnLFxuICAnYXN0b25pc2hlZCc6J1xcdWQ4M2RcXHVkZTMyJyxcbiAgJ2F0aGxldGljX3Nob2UnOidcXHVkODNkXFx1ZGM1ZicsXG4gICdhdG0nOidcXHVkODNjXFx1ZGZlNycsXG4gICdhdG9tX3N5bWJvbCc6J1xcdTI2OWJcXHVmZTBmJyxcbiAgJ2F2b2NhZG8nOidcXHVkODNlXFx1ZGQ1MScsXG4gICdiJzonXFx1ZDgzY1xcdWRkNzFcXHVmZTBmJyxcbiAgJ2JhYnknOidcXHVkODNkXFx1ZGM3NicsXG4gICdiYWJ5X2JvdHRsZSc6J1xcdWQ4M2NcXHVkZjdjJyxcbiAgJ2JhYnlfY2hpY2snOidcXHVkODNkXFx1ZGMyNCcsXG4gICdiYWJ5X3N5bWJvbCc6J1xcdWQ4M2RcXHVkZWJjJyxcbiAgJ2JhY2snOidcXHVkODNkXFx1ZGQxOScsXG4gICdiYWNvbic6J1xcdWQ4M2VcXHVkZDUzJyxcbiAgJ2JhZG1pbnRvbic6J1xcdWQ4M2NcXHVkZmY4JyxcbiAgJ2JhZ2dhZ2VfY2xhaW0nOidcXHVkODNkXFx1ZGVjNCcsXG4gICdiYWd1ZXR0ZV9icmVhZCc6J1xcdWQ4M2VcXHVkZDU2JyxcbiAgJ2JhbGFuY2Vfc2NhbGUnOidcXHUyNjk2XFx1ZmUwZicsXG4gICdiYWxsb29uJzonXFx1ZDgzY1xcdWRmODgnLFxuICAnYmFsbG90X2JveCc6J1xcdWQ4M2RcXHVkZGYzJyxcbiAgJ2JhbGxvdF9ib3hfd2l0aF9jaGVjayc6J1xcdTI2MTFcXHVmZTBmJyxcbiAgJ2JhbWJvbyc6J1xcdWQ4M2NcXHVkZjhkJyxcbiAgJ2JhbmFuYSc6J1xcdWQ4M2NcXHVkZjRjJyxcbiAgJ2JhbmdiYW5nJzonXFx1MjAzY1xcdWZlMGYnLFxuICAnYmFuayc6J1xcdWQ4M2NcXHVkZmU2JyxcbiAgJ2Jhcl9jaGFydCc6J1xcdWQ4M2RcXHVkY2NhJyxcbiAgJ2JhcmJlcic6J1xcdWQ4M2RcXHVkYzg4JyxcbiAgJ2Jhc2ViYWxsJzonXFx1MjZiZVxcdWZlMGYnLFxuICAnYmFza2V0YmFsbCc6J1xcdWQ4M2NcXHVkZmMwJyxcbiAgJ2Jhc2tldGJhbGxfbWFuJzonXFx1MjZmOVxcdWZlMGYnLFxuICAnYmFza2V0YmFsbF93b21hbic6J1xcdTI2ZjlcXHVmZTBmJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdiYXQnOidcXHVkODNlXFx1ZGQ4NycsXG4gICdiYXRoJzonXFx1ZDgzZFxcdWRlYzAnLFxuICAnYmF0aHR1Yic6J1xcdWQ4M2RcXHVkZWMxJyxcbiAgJ2JhdHRlcnknOidcXHVkODNkXFx1ZGQwYicsXG4gICdiZWFjaF91bWJyZWxsYSc6J1xcdWQ4M2NcXHVkZmQ2JyxcbiAgJ2JlYXInOidcXHVkODNkXFx1ZGMzYicsXG4gICdiZWQnOidcXHVkODNkXFx1ZGVjZicsXG4gICdiZWUnOidcXHVkODNkXFx1ZGMxZCcsXG4gICdiZWVyJzonXFx1ZDgzY1xcdWRmN2EnLFxuICAnYmVlcnMnOidcXHVkODNjXFx1ZGY3YicsXG4gICdiZWV0bGUnOidcXHVkODNkXFx1ZGMxZScsXG4gICdiZWdpbm5lcic6J1xcdWQ4M2RcXHVkZDMwJyxcbiAgJ2JlbGwnOidcXHVkODNkXFx1ZGQxNCcsXG4gICdiZWxsaG9wX2JlbGwnOidcXHVkODNkXFx1ZGVjZScsXG4gICdiZW50byc6J1xcdWQ4M2NcXHVkZjcxJyxcbiAgJ2Jpa2luZ19tYW4nOidcXHVkODNkXFx1ZGViNCcsXG4gICdiaWtlJzonXFx1ZDgzZFxcdWRlYjInLFxuICAnYmlraW5nX3dvbWFuJzonXFx1ZDgzZFxcdWRlYjQmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ2Jpa2luaSc6J1xcdWQ4M2RcXHVkYzU5JyxcbiAgJ2Jpb2hhemFyZCc6J1xcdTI2MjNcXHVmZTBmJyxcbiAgJ2JpcmQnOidcXHVkODNkXFx1ZGMyNicsXG4gICdiaXJ0aGRheSc6J1xcdWQ4M2NcXHVkZjgyJyxcbiAgJ2JsYWNrX2NpcmNsZSc6J1xcdTI2YWJcXHVmZTBmJyxcbiAgJ2JsYWNrX2ZsYWcnOidcXHVkODNjXFx1ZGZmNCcsXG4gICdibGFja19oZWFydCc6J1xcdWQ4M2RcXHVkZGE0JyxcbiAgJ2JsYWNrX2pva2VyJzonXFx1ZDgzY1xcdWRjY2YnLFxuICAnYmxhY2tfbGFyZ2Vfc3F1YXJlJzonXFx1MmIxYlxcdWZlMGYnLFxuICAnYmxhY2tfbWVkaXVtX3NtYWxsX3NxdWFyZSc6J1xcdTI1ZmVcXHVmZTBmJyxcbiAgJ2JsYWNrX21lZGl1bV9zcXVhcmUnOidcXHUyNWZjXFx1ZmUwZicsXG4gICdibGFja19uaWInOidcXHUyNzEyXFx1ZmUwZicsXG4gICdibGFja19zbWFsbF9zcXVhcmUnOidcXHUyNWFhXFx1ZmUwZicsXG4gICdibGFja19zcXVhcmVfYnV0dG9uJzonXFx1ZDgzZFxcdWRkMzInLFxuICAnYmxvbmRlX21hbic6J1xcdWQ4M2RcXHVkYzcxJyxcbiAgJ2Jsb25kZV93b21hbic6J1xcdWQ4M2RcXHVkYzcxJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdibG9zc29tJzonXFx1ZDgzY1xcdWRmM2MnLFxuICAnYmxvd2Zpc2gnOidcXHVkODNkXFx1ZGMyMScsXG4gICdibHVlX2Jvb2snOidcXHVkODNkXFx1ZGNkOCcsXG4gICdibHVlX2Nhcic6J1xcdWQ4M2RcXHVkZTk5JyxcbiAgJ2JsdWVfaGVhcnQnOidcXHVkODNkXFx1ZGM5OScsXG4gICdibHVzaCc6J1xcdWQ4M2RcXHVkZTBhJyxcbiAgJ2JvYXInOidcXHVkODNkXFx1ZGMxNycsXG4gICdib2F0JzonXFx1MjZmNVxcdWZlMGYnLFxuICAnYm9tYic6J1xcdWQ4M2RcXHVkY2EzJyxcbiAgJ2Jvb2snOidcXHVkODNkXFx1ZGNkNicsXG4gICdib29rbWFyayc6J1xcdWQ4M2RcXHVkZDE2JyxcbiAgJ2Jvb2ttYXJrX3RhYnMnOidcXHVkODNkXFx1ZGNkMScsXG4gICdib29rcyc6J1xcdWQ4M2RcXHVkY2RhJyxcbiAgJ2Jvb20nOidcXHVkODNkXFx1ZGNhNScsXG4gICdib290JzonXFx1ZDgzZFxcdWRjNjInLFxuICAnYm91cXVldCc6J1xcdWQ4M2RcXHVkYzkwJyxcbiAgJ2Jvd2luZ19tYW4nOidcXHVkODNkXFx1ZGU0NycsXG4gICdib3dfYW5kX2Fycm93JzonXFx1ZDgzY1xcdWRmZjknLFxuICAnYm93aW5nX3dvbWFuJzonXFx1ZDgzZFxcdWRlNDcmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ2Jvd2xpbmcnOidcXHVkODNjXFx1ZGZiMycsXG4gICdib3hpbmdfZ2xvdmUnOidcXHVkODNlXFx1ZGQ0YScsXG4gICdib3knOidcXHVkODNkXFx1ZGM2NicsXG4gICdicmVhZCc6J1xcdWQ4M2NcXHVkZjVlJyxcbiAgJ2JyaWRlX3dpdGhfdmVpbCc6J1xcdWQ4M2RcXHVkYzcwJyxcbiAgJ2JyaWRnZV9hdF9uaWdodCc6J1xcdWQ4M2NcXHVkZjA5JyxcbiAgJ2JyaWVmY2FzZSc6J1xcdWQ4M2RcXHVkY2JjJyxcbiAgJ2Jyb2tlbl9oZWFydCc6J1xcdWQ4M2RcXHVkYzk0JyxcbiAgJ2J1Zyc6J1xcdWQ4M2RcXHVkYzFiJyxcbiAgJ2J1aWxkaW5nX2NvbnN0cnVjdGlvbic6J1xcdWQ4M2NcXHVkZmQ3JyxcbiAgJ2J1bGInOidcXHVkODNkXFx1ZGNhMScsXG4gICdidWxsZXR0cmFpbl9mcm9udCc6J1xcdWQ4M2RcXHVkZTg1JyxcbiAgJ2J1bGxldHRyYWluX3NpZGUnOidcXHVkODNkXFx1ZGU4NCcsXG4gICdidXJyaXRvJzonXFx1ZDgzY1xcdWRmMmYnLFxuICAnYnVzJzonXFx1ZDgzZFxcdWRlOGMnLFxuICAnYnVzaW5lc3Nfc3VpdF9sZXZpdGF0aW5nJzonXFx1ZDgzZFxcdWRkNzQnLFxuICAnYnVzc3RvcCc6J1xcdWQ4M2RcXHVkZThmJyxcbiAgJ2J1c3RfaW5fc2lsaG91ZXR0ZSc6J1xcdWQ4M2RcXHVkYzY0JyxcbiAgJ2J1c3RzX2luX3NpbGhvdWV0dGUnOidcXHVkODNkXFx1ZGM2NScsXG4gICdidXR0ZXJmbHknOidcXHVkODNlXFx1ZGQ4YicsXG4gICdjYWN0dXMnOidcXHVkODNjXFx1ZGYzNScsXG4gICdjYWtlJzonXFx1ZDgzY1xcdWRmNzAnLFxuICAnY2FsZW5kYXInOidcXHVkODNkXFx1ZGNjNicsXG4gICdjYWxsX21lX2hhbmQnOidcXHVkODNlXFx1ZGQxOScsXG4gICdjYWxsaW5nJzonXFx1ZDgzZFxcdWRjZjInLFxuICAnY2FtZWwnOidcXHVkODNkXFx1ZGMyYicsXG4gICdjYW1lcmEnOidcXHVkODNkXFx1ZGNmNycsXG4gICdjYW1lcmFfZmxhc2gnOidcXHVkODNkXFx1ZGNmOCcsXG4gICdjYW1waW5nJzonXFx1ZDgzY1xcdWRmZDUnLFxuICAnY2FuY2VyJzonXFx1MjY0YlxcdWZlMGYnLFxuICAnY2FuZGxlJzonXFx1ZDgzZFxcdWRkNmYnLFxuICAnY2FuZHknOidcXHVkODNjXFx1ZGY2YycsXG4gICdjYW5vZSc6J1xcdWQ4M2RcXHVkZWY2JyxcbiAgJ2NhcGl0YWxfYWJjZCc6J1xcdWQ4M2RcXHVkZDIwJyxcbiAgJ2NhcHJpY29ybic6J1xcdTI2NTFcXHVmZTBmJyxcbiAgJ2Nhcic6J1xcdWQ4M2RcXHVkZTk3JyxcbiAgJ2NhcmRfZmlsZV9ib3gnOidcXHVkODNkXFx1ZGRjMycsXG4gICdjYXJkX2luZGV4JzonXFx1ZDgzZFxcdWRjYzcnLFxuICAnY2FyZF9pbmRleF9kaXZpZGVycyc6J1xcdWQ4M2RcXHVkZGMyJyxcbiAgJ2Nhcm91c2VsX2hvcnNlJzonXFx1ZDgzY1xcdWRmYTAnLFxuICAnY2Fycm90JzonXFx1ZDgzZVxcdWRkNTUnLFxuICAnY2F0JzonXFx1ZDgzZFxcdWRjMzEnLFxuICAnY2F0Mic6J1xcdWQ4M2RcXHVkYzA4JyxcbiAgJ2NkJzonXFx1ZDgzZFxcdWRjYmYnLFxuICAnY2hhaW5zJzonXFx1MjZkMycsXG4gICdjaGFtcGFnbmUnOidcXHVkODNjXFx1ZGY3ZScsXG4gICdjaGFydCc6J1xcdWQ4M2RcXHVkY2I5JyxcbiAgJ2NoYXJ0X3dpdGhfZG93bndhcmRzX3RyZW5kJzonXFx1ZDgzZFxcdWRjYzknLFxuICAnY2hhcnRfd2l0aF91cHdhcmRzX3RyZW5kJzonXFx1ZDgzZFxcdWRjYzgnLFxuICAnY2hlY2tlcmVkX2ZsYWcnOidcXHVkODNjXFx1ZGZjMScsXG4gICdjaGVlc2UnOidcXHVkODNlXFx1ZGRjMCcsXG4gICdjaGVycmllcyc6J1xcdWQ4M2NcXHVkZjUyJyxcbiAgJ2NoZXJyeV9ibG9zc29tJzonXFx1ZDgzY1xcdWRmMzgnLFxuICAnY2hlc3RudXQnOidcXHVkODNjXFx1ZGYzMCcsXG4gICdjaGlja2VuJzonXFx1ZDgzZFxcdWRjMTQnLFxuICAnY2hpbGRyZW5fY3Jvc3NpbmcnOidcXHVkODNkXFx1ZGViOCcsXG4gICdjaGlwbXVuayc6J1xcdWQ4M2RcXHVkYzNmJyxcbiAgJ2Nob2NvbGF0ZV9iYXInOidcXHVkODNjXFx1ZGY2YicsXG4gICdjaHJpc3RtYXNfdHJlZSc6J1xcdWQ4M2NcXHVkZjg0JyxcbiAgJ2NodXJjaCc6J1xcdTI2ZWFcXHVmZTBmJyxcbiAgJ2NpbmVtYSc6J1xcdWQ4M2NcXHVkZmE2JyxcbiAgJ2NpcmN1c190ZW50JzonXFx1ZDgzY1xcdWRmYWEnLFxuICAnY2l0eV9zdW5yaXNlJzonXFx1ZDgzY1xcdWRmMDcnLFxuICAnY2l0eV9zdW5zZXQnOidcXHVkODNjXFx1ZGYwNicsXG4gICdjaXR5c2NhcGUnOidcXHVkODNjXFx1ZGZkOScsXG4gICdjbCc6J1xcdWQ4M2NcXHVkZDkxJyxcbiAgJ2NsYW1wJzonXFx1ZDgzZFxcdWRkZGMnLFxuICAnY2xhcCc6J1xcdWQ4M2RcXHVkYzRmJyxcbiAgJ2NsYXBwZXInOidcXHVkODNjXFx1ZGZhYycsXG4gICdjbGFzc2ljYWxfYnVpbGRpbmcnOidcXHVkODNjXFx1ZGZkYicsXG4gICdjbGlua2luZ19nbGFzc2VzJzonXFx1ZDgzZVxcdWRkNDInLFxuICAnY2xpcGJvYXJkJzonXFx1ZDgzZFxcdWRjY2InLFxuICAnY2xvY2sxJzonXFx1ZDgzZFxcdWRkNTAnLFxuICAnY2xvY2sxMCc6J1xcdWQ4M2RcXHVkZDU5JyxcbiAgJ2Nsb2NrMTAzMCc6J1xcdWQ4M2RcXHVkZDY1JyxcbiAgJ2Nsb2NrMTEnOidcXHVkODNkXFx1ZGQ1YScsXG4gICdjbG9jazExMzAnOidcXHVkODNkXFx1ZGQ2NicsXG4gICdjbG9jazEyJzonXFx1ZDgzZFxcdWRkNWInLFxuICAnY2xvY2sxMjMwJzonXFx1ZDgzZFxcdWRkNjcnLFxuICAnY2xvY2sxMzAnOidcXHVkODNkXFx1ZGQ1YycsXG4gICdjbG9jazInOidcXHVkODNkXFx1ZGQ1MScsXG4gICdjbG9jazIzMCc6J1xcdWQ4M2RcXHVkZDVkJyxcbiAgJ2Nsb2NrMyc6J1xcdWQ4M2RcXHVkZDUyJyxcbiAgJ2Nsb2NrMzMwJzonXFx1ZDgzZFxcdWRkNWUnLFxuICAnY2xvY2s0JzonXFx1ZDgzZFxcdWRkNTMnLFxuICAnY2xvY2s0MzAnOidcXHVkODNkXFx1ZGQ1ZicsXG4gICdjbG9jazUnOidcXHVkODNkXFx1ZGQ1NCcsXG4gICdjbG9jazUzMCc6J1xcdWQ4M2RcXHVkZDYwJyxcbiAgJ2Nsb2NrNic6J1xcdWQ4M2RcXHVkZDU1JyxcbiAgJ2Nsb2NrNjMwJzonXFx1ZDgzZFxcdWRkNjEnLFxuICAnY2xvY2s3JzonXFx1ZDgzZFxcdWRkNTYnLFxuICAnY2xvY2s3MzAnOidcXHVkODNkXFx1ZGQ2MicsXG4gICdjbG9jazgnOidcXHVkODNkXFx1ZGQ1NycsXG4gICdjbG9jazgzMCc6J1xcdWQ4M2RcXHVkZDYzJyxcbiAgJ2Nsb2NrOSc6J1xcdWQ4M2RcXHVkZDU4JyxcbiAgJ2Nsb2NrOTMwJzonXFx1ZDgzZFxcdWRkNjQnLFxuICAnY2xvc2VkX2Jvb2snOidcXHVkODNkXFx1ZGNkNScsXG4gICdjbG9zZWRfbG9ja193aXRoX2tleSc6J1xcdWQ4M2RcXHVkZDEwJyxcbiAgJ2Nsb3NlZF91bWJyZWxsYSc6J1xcdWQ4M2NcXHVkZjAyJyxcbiAgJ2Nsb3VkJzonXFx1MjYwMVxcdWZlMGYnLFxuICAnY2xvdWRfd2l0aF9saWdodG5pbmcnOidcXHVkODNjXFx1ZGYyOScsXG4gICdjbG91ZF93aXRoX2xpZ2h0bmluZ19hbmRfcmFpbic6J1xcdTI2YzgnLFxuICAnY2xvdWRfd2l0aF9yYWluJzonXFx1ZDgzY1xcdWRmMjcnLFxuICAnY2xvdWRfd2l0aF9zbm93JzonXFx1ZDgzY1xcdWRmMjgnLFxuICAnY2xvd25fZmFjZSc6J1xcdWQ4M2VcXHVkZDIxJyxcbiAgJ2NsdWJzJzonXFx1MjY2M1xcdWZlMGYnLFxuICAnY29ja3RhaWwnOidcXHVkODNjXFx1ZGY3OCcsXG4gICdjb2ZmZWUnOidcXHUyNjE1XFx1ZmUwZicsXG4gICdjb2ZmaW4nOidcXHUyNmIwXFx1ZmUwZicsXG4gICdjb2xkX3N3ZWF0JzonXFx1ZDgzZFxcdWRlMzAnLFxuICAnY29tZXQnOidcXHUyNjA0XFx1ZmUwZicsXG4gICdjb21wdXRlcic6J1xcdWQ4M2RcXHVkY2JiJyxcbiAgJ2NvbXB1dGVyX21vdXNlJzonXFx1ZDgzZFxcdWRkYjEnLFxuICAnY29uZmV0dGlfYmFsbCc6J1xcdWQ4M2NcXHVkZjhhJyxcbiAgJ2NvbmZvdW5kZWQnOidcXHVkODNkXFx1ZGUxNicsXG4gICdjb25mdXNlZCc6J1xcdWQ4M2RcXHVkZTE1JyxcbiAgJ2NvbmdyYXR1bGF0aW9ucyc6J1xcdTMyOTdcXHVmZTBmJyxcbiAgJ2NvbnN0cnVjdGlvbic6J1xcdWQ4M2RcXHVkZWE3JyxcbiAgJ2NvbnN0cnVjdGlvbl93b3JrZXJfbWFuJzonXFx1ZDgzZFxcdWRjNzcnLFxuICAnY29uc3RydWN0aW9uX3dvcmtlcl93b21hbic6J1xcdWQ4M2RcXHVkYzc3Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdjb250cm9sX2tub2JzJzonXFx1ZDgzY1xcdWRmOWInLFxuICAnY29udmVuaWVuY2Vfc3RvcmUnOidcXHVkODNjXFx1ZGZlYScsXG4gICdjb29raWUnOidcXHVkODNjXFx1ZGY2YScsXG4gICdjb29sJzonXFx1ZDgzY1xcdWRkOTInLFxuICAncG9saWNlbWFuJzonXFx1ZDgzZFxcdWRjNmUnLFxuICAnY29weXJpZ2h0JzonXFx1MDBhOVxcdWZlMGYnLFxuICAnY29ybic6J1xcdWQ4M2NcXHVkZjNkJyxcbiAgJ2NvdWNoX2FuZF9sYW1wJzonXFx1ZDgzZFxcdWRlY2InLFxuICAnY291cGxlJzonXFx1ZDgzZFxcdWRjNmInLFxuICAnY291cGxlX3dpdGhfaGVhcnRfd29tYW5fbWFuJzonXFx1ZDgzZFxcdWRjOTEnLFxuICAnY291cGxlX3dpdGhfaGVhcnRfbWFuX21hbic6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHUyNzY0XFx1ZmUwZiZ6d2o7XFx1ZDgzZFxcdWRjNjgnLFxuICAnY291cGxlX3dpdGhfaGVhcnRfd29tYW5fd29tYW4nOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1Mjc2NFxcdWZlMGYmendqO1xcdWQ4M2RcXHVkYzY5JyxcbiAgJ2NvdXBsZWtpc3NfbWFuX21hbic6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHUyNzY0XFx1ZmUwZiZ6d2o7XFx1ZDgzZFxcdWRjOGImendqO1xcdWQ4M2RcXHVkYzY4JyxcbiAgJ2NvdXBsZWtpc3NfbWFuX3dvbWFuJzonXFx1ZDgzZFxcdWRjOGYnLFxuICAnY291cGxla2lzc193b21hbl93b21hbic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHUyNzY0XFx1ZmUwZiZ6d2o7XFx1ZDgzZFxcdWRjOGImendqO1xcdWQ4M2RcXHVkYzY5JyxcbiAgJ2Nvdyc6J1xcdWQ4M2RcXHVkYzJlJyxcbiAgJ2NvdzInOidcXHVkODNkXFx1ZGMwNCcsXG4gICdjb3dib3lfaGF0X2ZhY2UnOidcXHVkODNlXFx1ZGQyMCcsXG4gICdjcmFiJzonXFx1ZDgzZVxcdWRkODAnLFxuICAnY3JheW9uJzonXFx1ZDgzZFxcdWRkOGQnLFxuICAnY3JlZGl0X2NhcmQnOidcXHVkODNkXFx1ZGNiMycsXG4gICdjcmVzY2VudF9tb29uJzonXFx1ZDgzY1xcdWRmMTknLFxuICAnY3JpY2tldCc6J1xcdWQ4M2NcXHVkZmNmJyxcbiAgJ2Nyb2NvZGlsZSc6J1xcdWQ4M2RcXHVkYzBhJyxcbiAgJ2Nyb2lzc2FudCc6J1xcdWQ4M2VcXHVkZDUwJyxcbiAgJ2Nyb3NzZWRfZmluZ2Vycyc6J1xcdWQ4M2VcXHVkZDFlJyxcbiAgJ2Nyb3NzZWRfZmxhZ3MnOidcXHVkODNjXFx1ZGY4YycsXG4gICdjcm9zc2VkX3N3b3Jkcyc6J1xcdTI2OTRcXHVmZTBmJyxcbiAgJ2Nyb3duJzonXFx1ZDgzZFxcdWRjNTEnLFxuICAnY3J5JzonXFx1ZDgzZFxcdWRlMjInLFxuICAnY3J5aW5nX2NhdF9mYWNlJzonXFx1ZDgzZFxcdWRlM2YnLFxuICAnY3J5c3RhbF9iYWxsJzonXFx1ZDgzZFxcdWRkMmUnLFxuICAnY3VjdW1iZXInOidcXHVkODNlXFx1ZGQ1MicsXG4gICdjdXBpZCc6J1xcdWQ4M2RcXHVkYzk4JyxcbiAgJ2N1cmx5X2xvb3AnOidcXHUyN2IwJyxcbiAgJ2N1cnJlbmN5X2V4Y2hhbmdlJzonXFx1ZDgzZFxcdWRjYjEnLFxuICAnY3VycnknOidcXHVkODNjXFx1ZGY1YicsXG4gICdjdXN0YXJkJzonXFx1ZDgzY1xcdWRmNmUnLFxuICAnY3VzdG9tcyc6J1xcdWQ4M2RcXHVkZWMzJyxcbiAgJ2N5Y2xvbmUnOidcXHVkODNjXFx1ZGYwMCcsXG4gICdkYWdnZXInOidcXHVkODNkXFx1ZGRlMScsXG4gICdkYW5jZXInOidcXHVkODNkXFx1ZGM4MycsXG4gICdkYW5jaW5nX3dvbWVuJzonXFx1ZDgzZFxcdWRjNmYnLFxuICAnZGFuY2luZ19tZW4nOidcXHVkODNkXFx1ZGM2ZiZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnZGFuZ28nOidcXHVkODNjXFx1ZGY2MScsXG4gICdkYXJrX3N1bmdsYXNzZXMnOidcXHVkODNkXFx1ZGQ3NicsXG4gICdkYXJ0JzonXFx1ZDgzY1xcdWRmYWYnLFxuICAnZGFzaCc6J1xcdWQ4M2RcXHVkY2E4JyxcbiAgJ2RhdGUnOidcXHVkODNkXFx1ZGNjNScsXG4gICdkZWNpZHVvdXNfdHJlZSc6J1xcdWQ4M2NcXHVkZjMzJyxcbiAgJ2RlZXInOidcXHVkODNlXFx1ZGQ4YycsXG4gICdkZXBhcnRtZW50X3N0b3JlJzonXFx1ZDgzY1xcdWRmZWMnLFxuICAnZGVyZWxpY3RfaG91c2UnOidcXHVkODNjXFx1ZGZkYScsXG4gICdkZXNlcnQnOidcXHVkODNjXFx1ZGZkYycsXG4gICdkZXNlcnRfaXNsYW5kJzonXFx1ZDgzY1xcdWRmZGQnLFxuICAnZGVza3RvcF9jb21wdXRlcic6J1xcdWQ4M2RcXHVkZGE1JyxcbiAgJ21hbGVfZGV0ZWN0aXZlJzonXFx1ZDgzZFxcdWRkNzVcXHVmZTBmJyxcbiAgJ2RpYW1vbmRfc2hhcGVfd2l0aF9hX2RvdF9pbnNpZGUnOidcXHVkODNkXFx1ZGNhMCcsXG4gICdkaWFtb25kcyc6J1xcdTI2NjZcXHVmZTBmJyxcbiAgJ2Rpc2FwcG9pbnRlZCc6J1xcdWQ4M2RcXHVkZTFlJyxcbiAgJ2Rpc2FwcG9pbnRlZF9yZWxpZXZlZCc6J1xcdWQ4M2RcXHVkZTI1JyxcbiAgJ2Rpenp5JzonXFx1ZDgzZFxcdWRjYWInLFxuICAnZGl6enlfZmFjZSc6J1xcdWQ4M2RcXHVkZTM1JyxcbiAgJ2RvX25vdF9saXR0ZXInOidcXHVkODNkXFx1ZGVhZicsXG4gICdkb2cnOidcXHVkODNkXFx1ZGMzNicsXG4gICdkb2cyJzonXFx1ZDgzZFxcdWRjMTUnLFxuICAnZG9sbGFyJzonXFx1ZDgzZFxcdWRjYjUnLFxuICAnZG9sbHMnOidcXHVkODNjXFx1ZGY4ZScsXG4gICdkb2xwaGluJzonXFx1ZDgzZFxcdWRjMmMnLFxuICAnZG9vcic6J1xcdWQ4M2RcXHVkZWFhJyxcbiAgJ2RvdWdobnV0JzonXFx1ZDgzY1xcdWRmNjknLFxuICAnZG92ZSc6J1xcdWQ4M2RcXHVkZDRhJyxcbiAgJ2RyYWdvbic6J1xcdWQ4M2RcXHVkYzA5JyxcbiAgJ2RyYWdvbl9mYWNlJzonXFx1ZDgzZFxcdWRjMzInLFxuICAnZHJlc3MnOidcXHVkODNkXFx1ZGM1NycsXG4gICdkcm9tZWRhcnlfY2FtZWwnOidcXHVkODNkXFx1ZGMyYScsXG4gICdkcm9vbGluZ19mYWNlJzonXFx1ZDgzZVxcdWRkMjQnLFxuICAnZHJvcGxldCc6J1xcdWQ4M2RcXHVkY2E3JyxcbiAgJ2RydW0nOidcXHVkODNlXFx1ZGQ0MScsXG4gICdkdWNrJzonXFx1ZDgzZVxcdWRkODYnLFxuICAnZHZkJzonXFx1ZDgzZFxcdWRjYzAnLFxuICAnZS1tYWlsJzonXFx1ZDgzZFxcdWRjZTcnLFxuICAnZWFnbGUnOidcXHVkODNlXFx1ZGQ4NScsXG4gICdlYXInOidcXHVkODNkXFx1ZGM0MicsXG4gICdlYXJfb2ZfcmljZSc6J1xcdWQ4M2NcXHVkZjNlJyxcbiAgJ2VhcnRoX2FmcmljYSc6J1xcdWQ4M2NcXHVkZjBkJyxcbiAgJ2VhcnRoX2FtZXJpY2FzJzonXFx1ZDgzY1xcdWRmMGUnLFxuICAnZWFydGhfYXNpYSc6J1xcdWQ4M2NcXHVkZjBmJyxcbiAgJ2VnZyc6J1xcdWQ4M2VcXHVkZDVhJyxcbiAgJ2VnZ3BsYW50JzonXFx1ZDgzY1xcdWRmNDYnLFxuICAnZWlnaHRfcG9pbnRlZF9ibGFja19zdGFyJzonXFx1MjczNFxcdWZlMGYnLFxuICAnZWlnaHRfc3Bva2VkX2FzdGVyaXNrJzonXFx1MjczM1xcdWZlMGYnLFxuICAnZWxlY3RyaWNfcGx1Zyc6J1xcdWQ4M2RcXHVkZDBjJyxcbiAgJ2VsZXBoYW50JzonXFx1ZDgzZFxcdWRjMTgnLFxuICAnZW1haWwnOidcXHUyNzA5XFx1ZmUwZicsXG4gICdlbmQnOidcXHVkODNkXFx1ZGQxYScsXG4gICdlbnZlbG9wZV93aXRoX2Fycm93JzonXFx1ZDgzZFxcdWRjZTknLFxuICAnZXVybyc6J1xcdWQ4M2RcXHVkY2I2JyxcbiAgJ2V1cm9wZWFuX2Nhc3RsZSc6J1xcdWQ4M2NcXHVkZmYwJyxcbiAgJ2V1cm9wZWFuX3Bvc3Rfb2ZmaWNlJzonXFx1ZDgzY1xcdWRmZTQnLFxuICAnZXZlcmdyZWVuX3RyZWUnOidcXHVkODNjXFx1ZGYzMicsXG4gICdleGNsYW1hdGlvbic6J1xcdTI3NTdcXHVmZTBmJyxcbiAgJ2V4cHJlc3Npb25sZXNzJzonXFx1ZDgzZFxcdWRlMTEnLFxuICAnZXllJzonXFx1ZDgzZFxcdWRjNDEnLFxuICAnZXllX3NwZWVjaF9idWJibGUnOidcXHVkODNkXFx1ZGM0MSZ6d2o7XFx1ZDgzZFxcdWRkZTgnLFxuICAnZXllZ2xhc3Nlcyc6J1xcdWQ4M2RcXHVkYzUzJyxcbiAgJ2V5ZXMnOidcXHVkODNkXFx1ZGM0MCcsXG4gICdmYWNlX3dpdGhfaGVhZF9iYW5kYWdlJzonXFx1ZDgzZVxcdWRkMTUnLFxuICAnZmFjZV93aXRoX3RoZXJtb21ldGVyJzonXFx1ZDgzZVxcdWRkMTInLFxuICAnZmlzdF9vbmNvbWluZyc6J1xcdWQ4M2RcXHVkYzRhJyxcbiAgJ2ZhY3RvcnknOidcXHVkODNjXFx1ZGZlZCcsXG4gICdmYWxsZW5fbGVhZic6J1xcdWQ4M2NcXHVkZjQyJyxcbiAgJ2ZhbWlseV9tYW5fd29tYW5fYm95JzonXFx1ZDgzZFxcdWRjNmEnLFxuICAnZmFtaWx5X21hbl9ib3knOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X21hbl9ib3lfYm95JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY2Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX2dpcmwnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X21hbl9naXJsX2JveSc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X21hbl9naXJsX2dpcmwnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjcmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2ZhbWlseV9tYW5fbWFuX2JveSc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X21hbl9tYW5fYm95X2JveSc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjYmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV9tYW5fbWFuX2dpcmwnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2ZhbWlseV9tYW5fbWFuX2dpcmxfYm95JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X21hbl9tYW5fZ2lybF9naXJsJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X21hbl93b21hbl9ib3lfYm95JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NiZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X21hbl93b21hbl9naXJsJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NycsXG4gICdmYW1pbHlfbWFuX3dvbWFuX2dpcmxfYm95JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X21hbl93b21hbl9naXJsX2dpcmwnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NycsXG4gICdmYW1pbHlfd29tYW5fYm95JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV93b21hbl9ib3lfYm95JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY2Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfd29tYW5fZ2lybCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NycsXG4gICdmYW1pbHlfd29tYW5fZ2lybF9ib3knOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjcmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV93b21hbl9naXJsX2dpcmwnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjcmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2ZhbWlseV93b21hbl93b21hbl9ib3knOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV93b21hbl93b21hbl9ib3lfYm95JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NiZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X3dvbWFuX3dvbWFuX2dpcmwnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2ZhbWlseV93b21hbl93b21hbl9naXJsX2JveSc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjcmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV93b21hbl93b21hbl9naXJsX2dpcmwnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NycsXG4gICdmYXN0X2ZvcndhcmQnOidcXHUyM2U5JyxcbiAgJ2ZheCc6J1xcdWQ4M2RcXHVkY2UwJyxcbiAgJ2ZlYXJmdWwnOidcXHVkODNkXFx1ZGUyOCcsXG4gICdmZWV0JzonXFx1ZDgzZFxcdWRjM2UnLFxuICAnZmVtYWxlX2RldGVjdGl2ZSc6J1xcdWQ4M2RcXHVkZDc1XFx1ZmUwZiZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnZmVycmlzX3doZWVsJzonXFx1ZDgzY1xcdWRmYTEnLFxuICAnZmVycnknOidcXHUyNmY0JyxcbiAgJ2ZpZWxkX2hvY2tleSc6J1xcdWQ4M2NcXHVkZmQxJyxcbiAgJ2ZpbGVfY2FiaW5ldCc6J1xcdWQ4M2RcXHVkZGM0JyxcbiAgJ2ZpbGVfZm9sZGVyJzonXFx1ZDgzZFxcdWRjYzEnLFxuICAnZmlsbV9wcm9qZWN0b3InOidcXHVkODNkXFx1ZGNmZCcsXG4gICdmaWxtX3N0cmlwJzonXFx1ZDgzY1xcdWRmOWUnLFxuICAnZmlyZSc6J1xcdWQ4M2RcXHVkZDI1JyxcbiAgJ2ZpcmVfZW5naW5lJzonXFx1ZDgzZFxcdWRlOTInLFxuICAnZmlyZXdvcmtzJzonXFx1ZDgzY1xcdWRmODYnLFxuICAnZmlyc3RfcXVhcnRlcl9tb29uJzonXFx1ZDgzY1xcdWRmMTMnLFxuICAnZmlyc3RfcXVhcnRlcl9tb29uX3dpdGhfZmFjZSc6J1xcdWQ4M2NcXHVkZjFiJyxcbiAgJ2Zpc2gnOidcXHVkODNkXFx1ZGMxZicsXG4gICdmaXNoX2Nha2UnOidcXHVkODNjXFx1ZGY2NScsXG4gICdmaXNoaW5nX3BvbGVfYW5kX2Zpc2gnOidcXHVkODNjXFx1ZGZhMycsXG4gICdmaXN0X3JhaXNlZCc6J1xcdTI3MGEnLFxuICAnZmlzdF9sZWZ0JzonXFx1ZDgzZVxcdWRkMWInLFxuICAnZmlzdF9yaWdodCc6J1xcdWQ4M2VcXHVkZDFjJyxcbiAgJ2ZsYWdzJzonXFx1ZDgzY1xcdWRmOGYnLFxuICAnZmxhc2hsaWdodCc6J1xcdWQ4M2RcXHVkZDI2JyxcbiAgJ2ZsZXVyX2RlX2xpcyc6J1xcdTI2OWNcXHVmZTBmJyxcbiAgJ2ZsaWdodF9hcnJpdmFsJzonXFx1ZDgzZFxcdWRlZWMnLFxuICAnZmxpZ2h0X2RlcGFydHVyZSc6J1xcdWQ4M2RcXHVkZWViJyxcbiAgJ2Zsb3BweV9kaXNrJzonXFx1ZDgzZFxcdWRjYmUnLFxuICAnZmxvd2VyX3BsYXlpbmdfY2FyZHMnOidcXHVkODNjXFx1ZGZiNCcsXG4gICdmbHVzaGVkJzonXFx1ZDgzZFxcdWRlMzMnLFxuICAnZm9nJzonXFx1ZDgzY1xcdWRmMmInLFxuICAnZm9nZ3knOidcXHVkODNjXFx1ZGYwMScsXG4gICdmb290YmFsbCc6J1xcdWQ4M2NcXHVkZmM4JyxcbiAgJ2Zvb3RwcmludHMnOidcXHVkODNkXFx1ZGM2MycsXG4gICdmb3JrX2FuZF9rbmlmZSc6J1xcdWQ4M2NcXHVkZjc0JyxcbiAgJ2ZvdW50YWluJzonXFx1MjZmMlxcdWZlMGYnLFxuICAnZm91bnRhaW5fcGVuJzonXFx1ZDgzZFxcdWRkOGInLFxuICAnZm91cl9sZWFmX2Nsb3Zlcic6J1xcdWQ4M2NcXHVkZjQwJyxcbiAgJ2ZveF9mYWNlJzonXFx1ZDgzZVxcdWRkOGEnLFxuICAnZnJhbWVkX3BpY3R1cmUnOidcXHVkODNkXFx1ZGRiYycsXG4gICdmcmVlJzonXFx1ZDgzY1xcdWRkOTMnLFxuICAnZnJpZWRfZWdnJzonXFx1ZDgzY1xcdWRmNzMnLFxuICAnZnJpZWRfc2hyaW1wJzonXFx1ZDgzY1xcdWRmNjQnLFxuICAnZnJpZXMnOidcXHVkODNjXFx1ZGY1ZicsXG4gICdmcm9nJzonXFx1ZDgzZFxcdWRjMzgnLFxuICAnZnJvd25pbmcnOidcXHVkODNkXFx1ZGUyNicsXG4gICdmcm93bmluZ19mYWNlJzonXFx1MjYzOVxcdWZlMGYnLFxuICAnZnJvd25pbmdfbWFuJzonXFx1ZDgzZFxcdWRlNGQmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ2Zyb3duaW5nX3dvbWFuJzonXFx1ZDgzZFxcdWRlNGQnLFxuICAnbWlkZGxlX2Zpbmdlcic6J1xcdWQ4M2RcXHVkZDk1JyxcbiAgJ2Z1ZWxwdW1wJzonXFx1MjZmZFxcdWZlMGYnLFxuICAnZnVsbF9tb29uJzonXFx1ZDgzY1xcdWRmMTUnLFxuICAnZnVsbF9tb29uX3dpdGhfZmFjZSc6J1xcdWQ4M2NcXHVkZjFkJyxcbiAgJ2Z1bmVyYWxfdXJuJzonXFx1MjZiMVxcdWZlMGYnLFxuICAnZ2FtZV9kaWUnOidcXHVkODNjXFx1ZGZiMicsXG4gICdnZWFyJzonXFx1MjY5OVxcdWZlMGYnLFxuICAnZ2VtJzonXFx1ZDgzZFxcdWRjOGUnLFxuICAnZ2VtaW5pJzonXFx1MjY0YVxcdWZlMGYnLFxuICAnZ2hvc3QnOidcXHVkODNkXFx1ZGM3YicsXG4gICdnaWZ0JzonXFx1ZDgzY1xcdWRmODEnLFxuICAnZ2lmdF9oZWFydCc6J1xcdWQ4M2RcXHVkYzlkJyxcbiAgJ2dpcmwnOidcXHVkODNkXFx1ZGM2NycsXG4gICdnbG9iZV93aXRoX21lcmlkaWFucyc6J1xcdWQ4M2NcXHVkZjEwJyxcbiAgJ2dvYWxfbmV0JzonXFx1ZDgzZVxcdWRkNDUnLFxuICAnZ29hdCc6J1xcdWQ4M2RcXHVkYzEwJyxcbiAgJ2dvbGYnOidcXHUyNmYzXFx1ZmUwZicsXG4gICdnb2xmaW5nX21hbic6J1xcdWQ4M2NcXHVkZmNjXFx1ZmUwZicsXG4gICdnb2xmaW5nX3dvbWFuJzonXFx1ZDgzY1xcdWRmY2NcXHVmZTBmJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdnb3JpbGxhJzonXFx1ZDgzZVxcdWRkOGQnLFxuICAnZ3JhcGVzJzonXFx1ZDgzY1xcdWRmNDcnLFxuICAnZ3JlZW5fYXBwbGUnOidcXHVkODNjXFx1ZGY0ZicsXG4gICdncmVlbl9ib29rJzonXFx1ZDgzZFxcdWRjZDcnLFxuICAnZ3JlZW5faGVhcnQnOidcXHVkODNkXFx1ZGM5YScsXG4gICdncmVlbl9zYWxhZCc6J1xcdWQ4M2VcXHVkZDU3JyxcbiAgJ2dyZXlfZXhjbGFtYXRpb24nOidcXHUyNzU1JyxcbiAgJ2dyZXlfcXVlc3Rpb24nOidcXHUyNzU0JyxcbiAgJ2dyaW1hY2luZyc6J1xcdWQ4M2RcXHVkZTJjJyxcbiAgJ2dyaW4nOidcXHVkODNkXFx1ZGUwMScsXG4gICdncmlubmluZyc6J1xcdWQ4M2RcXHVkZTAwJyxcbiAgJ2d1YXJkc21hbic6J1xcdWQ4M2RcXHVkYzgyJyxcbiAgJ2d1YXJkc3dvbWFuJzonXFx1ZDgzZFxcdWRjODImendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ2d1aXRhcic6J1xcdWQ4M2NcXHVkZmI4JyxcbiAgJ2d1bic6J1xcdWQ4M2RcXHVkZDJiJyxcbiAgJ2hhaXJjdXRfd29tYW4nOidcXHVkODNkXFx1ZGM4NycsXG4gICdoYWlyY3V0X21hbic6J1xcdWQ4M2RcXHVkYzg3Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdoYW1idXJnZXInOidcXHVkODNjXFx1ZGY1NCcsXG4gICdoYW1tZXInOidcXHVkODNkXFx1ZGQyOCcsXG4gICdoYW1tZXJfYW5kX3BpY2snOidcXHUyNjkyJyxcbiAgJ2hhbW1lcl9hbmRfd3JlbmNoJzonXFx1ZDgzZFxcdWRlZTAnLFxuICAnaGFtc3Rlcic6J1xcdWQ4M2RcXHVkYzM5JyxcbiAgJ2hhbmQnOidcXHUyNzBiJyxcbiAgJ2hhbmRiYWcnOidcXHVkODNkXFx1ZGM1YycsXG4gICdoYW5kc2hha2UnOidcXHVkODNlXFx1ZGQxZCcsXG4gICdoYW5rZXknOidcXHVkODNkXFx1ZGNhOScsXG4gICdoYXRjaGVkX2NoaWNrJzonXFx1ZDgzZFxcdWRjMjUnLFxuICAnaGF0Y2hpbmdfY2hpY2snOidcXHVkODNkXFx1ZGMyMycsXG4gICdoZWFkcGhvbmVzJzonXFx1ZDgzY1xcdWRmYTcnLFxuICAnaGVhcl9ub19ldmlsJzonXFx1ZDgzZFxcdWRlNDknLFxuICAnaGVhcnQnOidcXHUyNzY0XFx1ZmUwZicsXG4gICdoZWFydF9kZWNvcmF0aW9uJzonXFx1ZDgzZFxcdWRjOWYnLFxuICAnaGVhcnRfZXllcyc6J1xcdWQ4M2RcXHVkZTBkJyxcbiAgJ2hlYXJ0X2V5ZXNfY2F0JzonXFx1ZDgzZFxcdWRlM2InLFxuICAnaGVhcnRiZWF0JzonXFx1ZDgzZFxcdWRjOTMnLFxuICAnaGVhcnRwdWxzZSc6J1xcdWQ4M2RcXHVkYzk3JyxcbiAgJ2hlYXJ0cyc6J1xcdTI2NjVcXHVmZTBmJyxcbiAgJ2hlYXZ5X2NoZWNrX21hcmsnOidcXHUyNzE0XFx1ZmUwZicsXG4gICdoZWF2eV9kaXZpc2lvbl9zaWduJzonXFx1Mjc5NycsXG4gICdoZWF2eV9kb2xsYXJfc2lnbic6J1xcdWQ4M2RcXHVkY2IyJyxcbiAgJ2hlYXZ5X2hlYXJ0X2V4Y2xhbWF0aW9uJzonXFx1Mjc2M1xcdWZlMGYnLFxuICAnaGVhdnlfbWludXNfc2lnbic6J1xcdTI3OTYnLFxuICAnaGVhdnlfbXVsdGlwbGljYXRpb25feCc6J1xcdTI3MTZcXHVmZTBmJyxcbiAgJ2hlYXZ5X3BsdXNfc2lnbic6J1xcdTI3OTUnLFxuICAnaGVsaWNvcHRlcic6J1xcdWQ4M2RcXHVkZTgxJyxcbiAgJ2hlcmInOidcXHVkODNjXFx1ZGYzZicsXG4gICdoaWJpc2N1cyc6J1xcdWQ4M2NcXHVkZjNhJyxcbiAgJ2hpZ2hfYnJpZ2h0bmVzcyc6J1xcdWQ4M2RcXHVkZDA2JyxcbiAgJ2hpZ2hfaGVlbCc6J1xcdWQ4M2RcXHVkYzYwJyxcbiAgJ2hvY2hvJzonXFx1ZDgzZFxcdWRkMmEnLFxuICAnaG9sZSc6J1xcdWQ4M2RcXHVkZDczJyxcbiAgJ2hvbmV5X3BvdCc6J1xcdWQ4M2NcXHVkZjZmJyxcbiAgJ2hvcnNlJzonXFx1ZDgzZFxcdWRjMzQnLFxuICAnaG9yc2VfcmFjaW5nJzonXFx1ZDgzY1xcdWRmYzcnLFxuICAnaG9zcGl0YWwnOidcXHVkODNjXFx1ZGZlNScsXG4gICdob3RfcGVwcGVyJzonXFx1ZDgzY1xcdWRmMzYnLFxuICAnaG90ZG9nJzonXFx1ZDgzY1xcdWRmMmQnLFxuICAnaG90ZWwnOidcXHVkODNjXFx1ZGZlOCcsXG4gICdob3RzcHJpbmdzJzonXFx1MjY2OFxcdWZlMGYnLFxuICAnaG91cmdsYXNzJzonXFx1MjMxYlxcdWZlMGYnLFxuICAnaG91cmdsYXNzX2Zsb3dpbmdfc2FuZCc6J1xcdTIzZjMnLFxuICAnaG91c2UnOidcXHVkODNjXFx1ZGZlMCcsXG4gICdob3VzZV93aXRoX2dhcmRlbic6J1xcdWQ4M2NcXHVkZmUxJyxcbiAgJ2hvdXNlcyc6J1xcdWQ4M2NcXHVkZmQ4JyxcbiAgJ2h1Z3MnOidcXHVkODNlXFx1ZGQxNycsXG4gICdodXNoZWQnOidcXHVkODNkXFx1ZGUyZicsXG4gICdpY2VfY3JlYW0nOidcXHVkODNjXFx1ZGY2OCcsXG4gICdpY2VfaG9ja2V5JzonXFx1ZDgzY1xcdWRmZDInLFxuICAnaWNlX3NrYXRlJzonXFx1MjZmOCcsXG4gICdpY2VjcmVhbSc6J1xcdWQ4M2NcXHVkZjY2JyxcbiAgJ2lkJzonXFx1ZDgzY1xcdWRkOTQnLFxuICAnaWRlb2dyYXBoX2FkdmFudGFnZSc6J1xcdWQ4M2NcXHVkZTUwJyxcbiAgJ2ltcCc6J1xcdWQ4M2RcXHVkYzdmJyxcbiAgJ2luYm94X3RyYXknOidcXHVkODNkXFx1ZGNlNScsXG4gICdpbmNvbWluZ19lbnZlbG9wZSc6J1xcdWQ4M2RcXHVkY2U4JyxcbiAgJ3RpcHBpbmdfaGFuZF93b21hbic6J1xcdWQ4M2RcXHVkYzgxJyxcbiAgJ2luZm9ybWF0aW9uX3NvdXJjZSc6J1xcdTIxMzlcXHVmZTBmJyxcbiAgJ2lubm9jZW50JzonXFx1ZDgzZFxcdWRlMDcnLFxuICAnaW50ZXJyb2JhbmcnOidcXHUyMDQ5XFx1ZmUwZicsXG4gICdpcGhvbmUnOidcXHVkODNkXFx1ZGNmMScsXG4gICdpemFrYXlhX2xhbnRlcm4nOidcXHVkODNjXFx1ZGZlZScsXG4gICdqYWNrX29fbGFudGVybic6J1xcdWQ4M2NcXHVkZjgzJyxcbiAgJ2phcGFuJzonXFx1ZDgzZFxcdWRkZmUnLFxuICAnamFwYW5lc2VfY2FzdGxlJzonXFx1ZDgzY1xcdWRmZWYnLFxuICAnamFwYW5lc2VfZ29ibGluJzonXFx1ZDgzZFxcdWRjN2EnLFxuICAnamFwYW5lc2Vfb2dyZSc6J1xcdWQ4M2RcXHVkYzc5JyxcbiAgJ2plYW5zJzonXFx1ZDgzZFxcdWRjNTYnLFxuICAnam95JzonXFx1ZDgzZFxcdWRlMDInLFxuICAnam95X2NhdCc6J1xcdWQ4M2RcXHVkZTM5JyxcbiAgJ2pveXN0aWNrJzonXFx1ZDgzZFxcdWRkNzknLFxuICAna2FhYmEnOidcXHVkODNkXFx1ZGQ0YicsXG4gICdrZXknOidcXHVkODNkXFx1ZGQxMScsXG4gICdrZXlib2FyZCc6J1xcdTIzMjhcXHVmZTBmJyxcbiAgJ2tleWNhcF90ZW4nOidcXHVkODNkXFx1ZGQxZicsXG4gICdraWNrX3Njb290ZXInOidcXHVkODNkXFx1ZGVmNCcsXG4gICdraW1vbm8nOidcXHVkODNkXFx1ZGM1OCcsXG4gICdraXNzJzonXFx1ZDgzZFxcdWRjOGInLFxuICAna2lzc2luZyc6J1xcdWQ4M2RcXHVkZTE3JyxcbiAgJ2tpc3NpbmdfY2F0JzonXFx1ZDgzZFxcdWRlM2QnLFxuICAna2lzc2luZ19jbG9zZWRfZXllcyc6J1xcdWQ4M2RcXHVkZTFhJyxcbiAgJ2tpc3NpbmdfaGVhcnQnOidcXHVkODNkXFx1ZGUxOCcsXG4gICdraXNzaW5nX3NtaWxpbmdfZXllcyc6J1xcdWQ4M2RcXHVkZTE5JyxcbiAgJ2tpd2lfZnJ1aXQnOidcXHVkODNlXFx1ZGQ1ZCcsXG4gICdrb2FsYSc6J1xcdWQ4M2RcXHVkYzI4JyxcbiAgJ2tva28nOidcXHVkODNjXFx1ZGUwMScsXG4gICdsYWJlbCc6J1xcdWQ4M2NcXHVkZmY3JyxcbiAgJ2xhcmdlX2JsdWVfY2lyY2xlJzonXFx1ZDgzZFxcdWRkMzUnLFxuICAnbGFyZ2VfYmx1ZV9kaWFtb25kJzonXFx1ZDgzZFxcdWRkMzcnLFxuICAnbGFyZ2Vfb3JhbmdlX2RpYW1vbmQnOidcXHVkODNkXFx1ZGQzNicsXG4gICdsYXN0X3F1YXJ0ZXJfbW9vbic6J1xcdWQ4M2NcXHVkZjE3JyxcbiAgJ2xhc3RfcXVhcnRlcl9tb29uX3dpdGhfZmFjZSc6J1xcdWQ4M2NcXHVkZjFjJyxcbiAgJ2xhdGluX2Nyb3NzJzonXFx1MjcxZFxcdWZlMGYnLFxuICAnbGF1Z2hpbmcnOidcXHVkODNkXFx1ZGUwNicsXG4gICdsZWF2ZXMnOidcXHVkODNjXFx1ZGY0MycsXG4gICdsZWRnZXInOidcXHVkODNkXFx1ZGNkMicsXG4gICdsZWZ0X2x1Z2dhZ2UnOidcXHVkODNkXFx1ZGVjNScsXG4gICdsZWZ0X3JpZ2h0X2Fycm93JzonXFx1MjE5NFxcdWZlMGYnLFxuICAnbGVmdHdhcmRzX2Fycm93X3dpdGhfaG9vayc6J1xcdTIxYTlcXHVmZTBmJyxcbiAgJ2xlbW9uJzonXFx1ZDgzY1xcdWRmNGInLFxuICAnbGVvJzonXFx1MjY0Y1xcdWZlMGYnLFxuICAnbGVvcGFyZCc6J1xcdWQ4M2RcXHVkYzA2JyxcbiAgJ2xldmVsX3NsaWRlcic6J1xcdWQ4M2NcXHVkZjlhJyxcbiAgJ2xpYnJhJzonXFx1MjY0ZVxcdWZlMGYnLFxuICAnbGlnaHRfcmFpbCc6J1xcdWQ4M2RcXHVkZTg4JyxcbiAgJ2xpbmsnOidcXHVkODNkXFx1ZGQxNycsXG4gICdsaW9uJzonXFx1ZDgzZVxcdWRkODEnLFxuICAnbGlwcyc6J1xcdWQ4M2RcXHVkYzQ0JyxcbiAgJ2xpcHN0aWNrJzonXFx1ZDgzZFxcdWRjODQnLFxuICAnbGl6YXJkJzonXFx1ZDgzZVxcdWRkOGUnLFxuICAnbG9jayc6J1xcdWQ4M2RcXHVkZDEyJyxcbiAgJ2xvY2tfd2l0aF9pbmtfcGVuJzonXFx1ZDgzZFxcdWRkMGYnLFxuICAnbG9sbGlwb3AnOidcXHVkODNjXFx1ZGY2ZCcsXG4gICdsb29wJzonXFx1MjdiZicsXG4gICdsb3VkX3NvdW5kJzonXFx1ZDgzZFxcdWRkMGEnLFxuICAnbG91ZHNwZWFrZXInOidcXHVkODNkXFx1ZGNlMicsXG4gICdsb3ZlX2hvdGVsJzonXFx1ZDgzY1xcdWRmZTknLFxuICAnbG92ZV9sZXR0ZXInOidcXHVkODNkXFx1ZGM4YycsXG4gICdsb3dfYnJpZ2h0bmVzcyc6J1xcdWQ4M2RcXHVkZDA1JyxcbiAgJ2x5aW5nX2ZhY2UnOidcXHVkODNlXFx1ZGQyNScsXG4gICdtJzonXFx1MjRjMlxcdWZlMGYnLFxuICAnbWFnJzonXFx1ZDgzZFxcdWRkMGQnLFxuICAnbWFnX3JpZ2h0JzonXFx1ZDgzZFxcdWRkMGUnLFxuICAnbWFoam9uZyc6J1xcdWQ4M2NcXHVkYzA0XFx1ZmUwZicsXG4gICdtYWlsYm94JzonXFx1ZDgzZFxcdWRjZWInLFxuICAnbWFpbGJveF9jbG9zZWQnOidcXHVkODNkXFx1ZGNlYScsXG4gICdtYWlsYm94X3dpdGhfbWFpbCc6J1xcdWQ4M2RcXHVkY2VjJyxcbiAgJ21haWxib3hfd2l0aF9ub19tYWlsJzonXFx1ZDgzZFxcdWRjZWQnLFxuICAnbWFuJzonXFx1ZDgzZFxcdWRjNjgnLFxuICAnbWFuX2FydGlzdCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNjXFx1ZGZhOCcsXG4gICdtYW5fYXN0cm9uYXV0JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkZTgwJyxcbiAgJ21hbl9jYXJ0d2hlZWxpbmcnOidcXHVkODNlXFx1ZGQzOCZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnbWFuX2Nvb2snOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzY1xcdWRmNzMnLFxuICAnbWFuX2RhbmNpbmcnOidcXHVkODNkXFx1ZGQ3YScsXG4gICdtYW5fZmFjZXBhbG1pbmcnOidcXHVkODNlXFx1ZGQyNiZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnbWFuX2ZhY3Rvcnlfd29ya2VyJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2NcXHVkZmVkJyxcbiAgJ21hbl9mYXJtZXInOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzY1xcdWRmM2UnLFxuICAnbWFuX2ZpcmVmaWdodGVyJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkZTkyJyxcbiAgJ21hbl9oZWFsdGhfd29ya2VyJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdTI2OTVcXHVmZTBmJyxcbiAgJ21hbl9pbl90dXhlZG8nOidcXHVkODNlXFx1ZGQzNScsXG4gICdtYW5fanVkZ2UnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1MjY5NlxcdWZlMGYnLFxuICAnbWFuX2p1Z2dsaW5nJzonXFx1ZDgzZVxcdWRkMzkmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ21hbl9tZWNoYW5pYyc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGQyNycsXG4gICdtYW5fb2ZmaWNlX3dvcmtlcic6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGNiYycsXG4gICdtYW5fcGlsb3QnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1MjcwOFxcdWZlMGYnLFxuICAnbWFuX3BsYXlpbmdfaGFuZGJhbGwnOidcXHVkODNlXFx1ZGQzZSZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnbWFuX3BsYXlpbmdfd2F0ZXJfcG9sbyc6J1xcdWQ4M2VcXHVkZDNkJnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtYW5fc2NpZW50aXN0JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkZDJjJyxcbiAgJ21hbl9zaHJ1Z2dpbmcnOidcXHVkODNlXFx1ZGQzNyZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnbWFuX3Npbmdlcic6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNjXFx1ZGZhNCcsXG4gICdtYW5fc3R1ZGVudCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNjXFx1ZGY5MycsXG4gICdtYW5fdGVhY2hlcic6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNjXFx1ZGZlYicsXG4gICdtYW5fdGVjaG5vbG9naXN0JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkY2JiJyxcbiAgJ21hbl93aXRoX2d1YV9waV9tYW8nOidcXHVkODNkXFx1ZGM3MicsXG4gICdtYW5fd2l0aF90dXJiYW4nOidcXHVkODNkXFx1ZGM3MycsXG4gICd0YW5nZXJpbmUnOidcXHVkODNjXFx1ZGY0YScsXG4gICdtYW5zX3Nob2UnOidcXHVkODNkXFx1ZGM1ZScsXG4gICdtYW50ZWxwaWVjZV9jbG9jayc6J1xcdWQ4M2RcXHVkZDcwJyxcbiAgJ21hcGxlX2xlYWYnOidcXHVkODNjXFx1ZGY0MScsXG4gICdtYXJ0aWFsX2FydHNfdW5pZm9ybSc6J1xcdWQ4M2VcXHVkZDRiJyxcbiAgJ21hc2snOidcXHVkODNkXFx1ZGUzNycsXG4gICdtYXNzYWdlX3dvbWFuJzonXFx1ZDgzZFxcdWRjODYnLFxuICAnbWFzc2FnZV9tYW4nOidcXHVkODNkXFx1ZGM4NiZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnbWVhdF9vbl9ib25lJzonXFx1ZDgzY1xcdWRmNTYnLFxuICAnbWVkYWxfbWlsaXRhcnknOidcXHVkODNjXFx1ZGY5NicsXG4gICdtZWRhbF9zcG9ydHMnOidcXHVkODNjXFx1ZGZjNScsXG4gICdtZWdhJzonXFx1ZDgzZFxcdWRjZTMnLFxuICAnbWVsb24nOidcXHVkODNjXFx1ZGY0OCcsXG4gICdtZW1vJzonXFx1ZDgzZFxcdWRjZGQnLFxuICAnbWVuX3dyZXN0bGluZyc6J1xcdWQ4M2VcXHVkZDNjJnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtZW5vcmFoJzonXFx1ZDgzZFxcdWRkNGUnLFxuICAnbWVucyc6J1xcdWQ4M2RcXHVkZWI5JyxcbiAgJ21ldGFsJzonXFx1ZDgzZVxcdWRkMTgnLFxuICAnbWV0cm8nOidcXHVkODNkXFx1ZGU4NycsXG4gICdtaWNyb3Bob25lJzonXFx1ZDgzY1xcdWRmYTQnLFxuICAnbWljcm9zY29wZSc6J1xcdWQ4M2RcXHVkZDJjJyxcbiAgJ21pbGtfZ2xhc3MnOidcXHVkODNlXFx1ZGQ1YicsXG4gICdtaWxreV93YXknOidcXHVkODNjXFx1ZGYwYycsXG4gICdtaW5pYnVzJzonXFx1ZDgzZFxcdWRlOTAnLFxuICAnbWluaWRpc2MnOidcXHVkODNkXFx1ZGNiZCcsXG4gICdtb2JpbGVfcGhvbmVfb2ZmJzonXFx1ZDgzZFxcdWRjZjQnLFxuICAnbW9uZXlfbW91dGhfZmFjZSc6J1xcdWQ4M2VcXHVkZDExJyxcbiAgJ21vbmV5X3dpdGhfd2luZ3MnOidcXHVkODNkXFx1ZGNiOCcsXG4gICdtb25leWJhZyc6J1xcdWQ4M2RcXHVkY2IwJyxcbiAgJ21vbmtleSc6J1xcdWQ4M2RcXHVkYzEyJyxcbiAgJ21vbmtleV9mYWNlJzonXFx1ZDgzZFxcdWRjMzUnLFxuICAnbW9ub3JhaWwnOidcXHVkODNkXFx1ZGU5ZCcsXG4gICdtb29uJzonXFx1ZDgzY1xcdWRmMTQnLFxuICAnbW9ydGFyX2JvYXJkJzonXFx1ZDgzY1xcdWRmOTMnLFxuICAnbW9zcXVlJzonXFx1ZDgzZFxcdWRkNGMnLFxuICAnbW90b3JfYm9hdCc6J1xcdWQ4M2RcXHVkZWU1JyxcbiAgJ21vdG9yX3Njb290ZXInOidcXHVkODNkXFx1ZGVmNScsXG4gICdtb3RvcmN5Y2xlJzonXFx1ZDgzY1xcdWRmY2QnLFxuICAnbW90b3J3YXknOidcXHVkODNkXFx1ZGVlMycsXG4gICdtb3VudF9mdWppJzonXFx1ZDgzZFxcdWRkZmInLFxuICAnbW91bnRhaW4nOidcXHUyNmYwJyxcbiAgJ21vdW50YWluX2Jpa2luZ19tYW4nOidcXHVkODNkXFx1ZGViNScsXG4gICdtb3VudGFpbl9iaWtpbmdfd29tYW4nOidcXHVkODNkXFx1ZGViNSZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnbW91bnRhaW5fY2FibGV3YXknOidcXHVkODNkXFx1ZGVhMCcsXG4gICdtb3VudGFpbl9yYWlsd2F5JzonXFx1ZDgzZFxcdWRlOWUnLFxuICAnbW91bnRhaW5fc25vdyc6J1xcdWQ4M2NcXHVkZmQ0JyxcbiAgJ21vdXNlJzonXFx1ZDgzZFxcdWRjMmQnLFxuICAnbW91c2UyJzonXFx1ZDgzZFxcdWRjMDEnLFxuICAnbW92aWVfY2FtZXJhJzonXFx1ZDgzY1xcdWRmYTUnLFxuICAnbW95YWknOidcXHVkODNkXFx1ZGRmZicsXG4gICdtcnNfY2xhdXMnOidcXHVkODNlXFx1ZGQzNicsXG4gICdtdXNjbGUnOidcXHVkODNkXFx1ZGNhYScsXG4gICdtdXNocm9vbSc6J1xcdWQ4M2NcXHVkZjQ0JyxcbiAgJ211c2ljYWxfa2V5Ym9hcmQnOidcXHVkODNjXFx1ZGZiOScsXG4gICdtdXNpY2FsX25vdGUnOidcXHVkODNjXFx1ZGZiNScsXG4gICdtdXNpY2FsX3Njb3JlJzonXFx1ZDgzY1xcdWRmYmMnLFxuICAnbXV0ZSc6J1xcdWQ4M2RcXHVkZDA3JyxcbiAgJ25haWxfY2FyZSc6J1xcdWQ4M2RcXHVkYzg1JyxcbiAgJ25hbWVfYmFkZ2UnOidcXHVkODNkXFx1ZGNkYicsXG4gICduYXRpb25hbF9wYXJrJzonXFx1ZDgzY1xcdWRmZGUnLFxuICAnbmF1c2VhdGVkX2ZhY2UnOidcXHVkODNlXFx1ZGQyMicsXG4gICduZWNrdGllJzonXFx1ZDgzZFxcdWRjNTQnLFxuICAnbmVnYXRpdmVfc3F1YXJlZF9jcm9zc19tYXJrJzonXFx1Mjc0ZScsXG4gICduZXJkX2ZhY2UnOidcXHVkODNlXFx1ZGQxMycsXG4gICduZXV0cmFsX2ZhY2UnOidcXHVkODNkXFx1ZGUxMCcsXG4gICduZXcnOidcXHVkODNjXFx1ZGQ5NScsXG4gICduZXdfbW9vbic6J1xcdWQ4M2NcXHVkZjExJyxcbiAgJ25ld19tb29uX3dpdGhfZmFjZSc6J1xcdWQ4M2NcXHVkZjFhJyxcbiAgJ25ld3NwYXBlcic6J1xcdWQ4M2RcXHVkY2YwJyxcbiAgJ25ld3NwYXBlcl9yb2xsJzonXFx1ZDgzZFxcdWRkZGUnLFxuICAnbmV4dF90cmFja19idXR0b24nOidcXHUyM2VkJyxcbiAgJ25nJzonXFx1ZDgzY1xcdWRkOTYnLFxuICAnbm9fZ29vZF9tYW4nOidcXHVkODNkXFx1ZGU0NSZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnbm9fZ29vZF93b21hbic6J1xcdWQ4M2RcXHVkZTQ1JyxcbiAgJ25pZ2h0X3dpdGhfc3RhcnMnOidcXHVkODNjXFx1ZGYwMycsXG4gICdub19iZWxsJzonXFx1ZDgzZFxcdWRkMTUnLFxuICAnbm9fYmljeWNsZXMnOidcXHVkODNkXFx1ZGViMycsXG4gICdub19lbnRyeSc6J1xcdTI2ZDRcXHVmZTBmJyxcbiAgJ25vX2VudHJ5X3NpZ24nOidcXHVkODNkXFx1ZGVhYicsXG4gICdub19tb2JpbGVfcGhvbmVzJzonXFx1ZDgzZFxcdWRjZjUnLFxuICAnbm9fbW91dGgnOidcXHVkODNkXFx1ZGUzNicsXG4gICdub19wZWRlc3RyaWFucyc6J1xcdWQ4M2RcXHVkZWI3JyxcbiAgJ25vX3Ntb2tpbmcnOidcXHVkODNkXFx1ZGVhZCcsXG4gICdub24tcG90YWJsZV93YXRlcic6J1xcdWQ4M2RcXHVkZWIxJyxcbiAgJ25vc2UnOidcXHVkODNkXFx1ZGM0MycsXG4gICdub3RlYm9vayc6J1xcdWQ4M2RcXHVkY2QzJyxcbiAgJ25vdGVib29rX3dpdGhfZGVjb3JhdGl2ZV9jb3Zlcic6J1xcdWQ4M2RcXHVkY2Q0JyxcbiAgJ25vdGVzJzonXFx1ZDgzY1xcdWRmYjYnLFxuICAnbnV0X2FuZF9ib2x0JzonXFx1ZDgzZFxcdWRkMjknLFxuICAnbyc6J1xcdTJiNTVcXHVmZTBmJyxcbiAgJ28yJzonXFx1ZDgzY1xcdWRkN2VcXHVmZTBmJyxcbiAgJ29jZWFuJzonXFx1ZDgzY1xcdWRmMGEnLFxuICAnb2N0b3B1cyc6J1xcdWQ4M2RcXHVkYzE5JyxcbiAgJ29kZW4nOidcXHVkODNjXFx1ZGY2MicsXG4gICdvZmZpY2UnOidcXHVkODNjXFx1ZGZlMicsXG4gICdvaWxfZHJ1bSc6J1xcdWQ4M2RcXHVkZWUyJyxcbiAgJ29rJzonXFx1ZDgzY1xcdWRkOTcnLFxuICAnb2tfaGFuZCc6J1xcdWQ4M2RcXHVkYzRjJyxcbiAgJ29rX21hbic6J1xcdWQ4M2RcXHVkZTQ2Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdva193b21hbic6J1xcdWQ4M2RcXHVkZTQ2JyxcbiAgJ29sZF9rZXknOidcXHVkODNkXFx1ZGRkZCcsXG4gICdvbGRlcl9tYW4nOidcXHVkODNkXFx1ZGM3NCcsXG4gICdvbGRlcl93b21hbic6J1xcdWQ4M2RcXHVkYzc1JyxcbiAgJ29tJzonXFx1ZDgzZFxcdWRkNDknLFxuICAnb24nOidcXHVkODNkXFx1ZGQxYicsXG4gICdvbmNvbWluZ19hdXRvbW9iaWxlJzonXFx1ZDgzZFxcdWRlOTgnLFxuICAnb25jb21pbmdfYnVzJzonXFx1ZDgzZFxcdWRlOGQnLFxuICAnb25jb21pbmdfcG9saWNlX2Nhcic6J1xcdWQ4M2RcXHVkZTk0JyxcbiAgJ29uY29taW5nX3RheGknOidcXHVkODNkXFx1ZGU5NicsXG4gICdvcGVuX2ZpbGVfZm9sZGVyJzonXFx1ZDgzZFxcdWRjYzInLFxuICAnb3Blbl9oYW5kcyc6J1xcdWQ4M2RcXHVkYzUwJyxcbiAgJ29wZW5fbW91dGgnOidcXHVkODNkXFx1ZGUyZScsXG4gICdvcGVuX3VtYnJlbGxhJzonXFx1MjYwMlxcdWZlMGYnLFxuICAnb3BoaXVjaHVzJzonXFx1MjZjZScsXG4gICdvcmFuZ2VfYm9vayc6J1xcdWQ4M2RcXHVkY2Q5JyxcbiAgJ29ydGhvZG94X2Nyb3NzJzonXFx1MjYyNlxcdWZlMGYnLFxuICAnb3V0Ym94X3RyYXknOidcXHVkODNkXFx1ZGNlNCcsXG4gICdvd2wnOidcXHVkODNlXFx1ZGQ4OScsXG4gICdveCc6J1xcdWQ4M2RcXHVkYzAyJyxcbiAgJ3BhY2thZ2UnOidcXHVkODNkXFx1ZGNlNicsXG4gICdwYWdlX2ZhY2luZ191cCc6J1xcdWQ4M2RcXHVkY2M0JyxcbiAgJ3BhZ2Vfd2l0aF9jdXJsJzonXFx1ZDgzZFxcdWRjYzMnLFxuICAncGFnZXInOidcXHVkODNkXFx1ZGNkZicsXG4gICdwYWludGJydXNoJzonXFx1ZDgzZFxcdWRkOGMnLFxuICAncGFsbV90cmVlJzonXFx1ZDgzY1xcdWRmMzQnLFxuICAncGFuY2FrZXMnOidcXHVkODNlXFx1ZGQ1ZScsXG4gICdwYW5kYV9mYWNlJzonXFx1ZDgzZFxcdWRjM2MnLFxuICAncGFwZXJjbGlwJzonXFx1ZDgzZFxcdWRjY2UnLFxuICAncGFwZXJjbGlwcyc6J1xcdWQ4M2RcXHVkZDg3JyxcbiAgJ3BhcmFzb2xfb25fZ3JvdW5kJzonXFx1MjZmMScsXG4gICdwYXJraW5nJzonXFx1ZDgzY1xcdWRkN2ZcXHVmZTBmJyxcbiAgJ3BhcnRfYWx0ZXJuYXRpb25fbWFyayc6J1xcdTMwM2RcXHVmZTBmJyxcbiAgJ3BhcnRseV9zdW5ueSc6J1xcdTI2YzVcXHVmZTBmJyxcbiAgJ3Bhc3Nlbmdlcl9zaGlwJzonXFx1ZDgzZFxcdWRlZjMnLFxuICAncGFzc3BvcnRfY29udHJvbCc6J1xcdWQ4M2RcXHVkZWMyJyxcbiAgJ3BhdXNlX2J1dHRvbic6J1xcdTIzZjgnLFxuICAncGVhY2Vfc3ltYm9sJzonXFx1MjYyZVxcdWZlMGYnLFxuICAncGVhY2gnOidcXHVkODNjXFx1ZGY1MScsXG4gICdwZWFudXRzJzonXFx1ZDgzZVxcdWRkNWMnLFxuICAncGVhcic6J1xcdWQ4M2NcXHVkZjUwJyxcbiAgJ3Blbic6J1xcdWQ4M2RcXHVkZDhhJyxcbiAgJ3BlbmNpbDInOidcXHUyNzBmXFx1ZmUwZicsXG4gICdwZW5ndWluJzonXFx1ZDgzZFxcdWRjMjcnLFxuICAncGVuc2l2ZSc6J1xcdWQ4M2RcXHVkZTE0JyxcbiAgJ3BlcmZvcm1pbmdfYXJ0cyc6J1xcdWQ4M2NcXHVkZmFkJyxcbiAgJ3BlcnNldmVyZSc6J1xcdWQ4M2RcXHVkZTIzJyxcbiAgJ3BlcnNvbl9mZW5jaW5nJzonXFx1ZDgzZVxcdWRkM2EnLFxuICAncG91dGluZ193b21hbic6J1xcdWQ4M2RcXHVkZTRlJyxcbiAgJ3Bob25lJzonXFx1MjYwZVxcdWZlMGYnLFxuICAncGljayc6J1xcdTI2Y2YnLFxuICAncGlnJzonXFx1ZDgzZFxcdWRjMzcnLFxuICAncGlnMic6J1xcdWQ4M2RcXHVkYzE2JyxcbiAgJ3BpZ19ub3NlJzonXFx1ZDgzZFxcdWRjM2QnLFxuICAncGlsbCc6J1xcdWQ4M2RcXHVkYzhhJyxcbiAgJ3BpbmVhcHBsZSc6J1xcdWQ4M2NcXHVkZjRkJyxcbiAgJ3BpbmdfcG9uZyc6J1xcdWQ4M2NcXHVkZmQzJyxcbiAgJ3Bpc2Nlcyc6J1xcdTI2NTNcXHVmZTBmJyxcbiAgJ3BpenphJzonXFx1ZDgzY1xcdWRmNTUnLFxuICAncGxhY2Vfb2Zfd29yc2hpcCc6J1xcdWQ4M2RcXHVkZWQwJyxcbiAgJ3BsYXRlX3dpdGhfY3V0bGVyeSc6J1xcdWQ4M2NcXHVkZjdkJyxcbiAgJ3BsYXlfb3JfcGF1c2VfYnV0dG9uJzonXFx1MjNlZicsXG4gICdwb2ludF9kb3duJzonXFx1ZDgzZFxcdWRjNDcnLFxuICAncG9pbnRfbGVmdCc6J1xcdWQ4M2RcXHVkYzQ4JyxcbiAgJ3BvaW50X3JpZ2h0JzonXFx1ZDgzZFxcdWRjNDknLFxuICAncG9pbnRfdXAnOidcXHUyNjFkXFx1ZmUwZicsXG4gICdwb2ludF91cF8yJzonXFx1ZDgzZFxcdWRjNDYnLFxuICAncG9saWNlX2Nhcic6J1xcdWQ4M2RcXHVkZTkzJyxcbiAgJ3BvbGljZXdvbWFuJzonXFx1ZDgzZFxcdWRjNmUmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3Bvb2RsZSc6J1xcdWQ4M2RcXHVkYzI5JyxcbiAgJ3BvcGNvcm4nOidcXHVkODNjXFx1ZGY3ZicsXG4gICdwb3N0X29mZmljZSc6J1xcdWQ4M2NcXHVkZmUzJyxcbiAgJ3Bvc3RhbF9ob3JuJzonXFx1ZDgzZFxcdWRjZWYnLFxuICAncG9zdGJveCc6J1xcdWQ4M2RcXHVkY2VlJyxcbiAgJ3BvdGFibGVfd2F0ZXInOidcXHVkODNkXFx1ZGViMCcsXG4gICdwb3RhdG8nOidcXHVkODNlXFx1ZGQ1NCcsXG4gICdwb3VjaCc6J1xcdWQ4M2RcXHVkYzVkJyxcbiAgJ3BvdWx0cnlfbGVnJzonXFx1ZDgzY1xcdWRmNTcnLFxuICAncG91bmQnOidcXHVkODNkXFx1ZGNiNycsXG4gICdyYWdlJzonXFx1ZDgzZFxcdWRlMjEnLFxuICAncG91dGluZ19jYXQnOidcXHVkODNkXFx1ZGUzZScsXG4gICdwb3V0aW5nX21hbic6J1xcdWQ4M2RcXHVkZTRlJnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdwcmF5JzonXFx1ZDgzZFxcdWRlNGYnLFxuICAncHJheWVyX2JlYWRzJzonXFx1ZDgzZFxcdWRjZmYnLFxuICAncHJlZ25hbnRfd29tYW4nOidcXHVkODNlXFx1ZGQzMCcsXG4gICdwcmV2aW91c190cmFja19idXR0b24nOidcXHUyM2VlJyxcbiAgJ3ByaW5jZSc6J1xcdWQ4M2VcXHVkZDM0JyxcbiAgJ3ByaW5jZXNzJzonXFx1ZDgzZFxcdWRjNzgnLFxuICAncHJpbnRlcic6J1xcdWQ4M2RcXHVkZGE4JyxcbiAgJ3B1cnBsZV9oZWFydCc6J1xcdWQ4M2RcXHVkYzljJyxcbiAgJ3B1cnNlJzonXFx1ZDgzZFxcdWRjNWInLFxuICAncHVzaHBpbic6J1xcdWQ4M2RcXHVkY2NjJyxcbiAgJ3B1dF9saXR0ZXJfaW5faXRzX3BsYWNlJzonXFx1ZDgzZFxcdWRlYWUnLFxuICAncXVlc3Rpb24nOidcXHUyNzUzJyxcbiAgJ3JhYmJpdCc6J1xcdWQ4M2RcXHVkYzMwJyxcbiAgJ3JhYmJpdDInOidcXHVkODNkXFx1ZGMwNycsXG4gICdyYWNlaG9yc2UnOidcXHVkODNkXFx1ZGMwZScsXG4gICdyYWNpbmdfY2FyJzonXFx1ZDgzY1xcdWRmY2UnLFxuICAncmFkaW8nOidcXHVkODNkXFx1ZGNmYicsXG4gICdyYWRpb19idXR0b24nOidcXHVkODNkXFx1ZGQxOCcsXG4gICdyYWRpb2FjdGl2ZSc6J1xcdTI2MjJcXHVmZTBmJyxcbiAgJ3JhaWx3YXlfY2FyJzonXFx1ZDgzZFxcdWRlODMnLFxuICAncmFpbHdheV90cmFjayc6J1xcdWQ4M2RcXHVkZWU0JyxcbiAgJ3JhaW5ib3cnOidcXHVkODNjXFx1ZGYwOCcsXG4gICdyYWluYm93X2ZsYWcnOidcXHVkODNjXFx1ZGZmM1xcdWZlMGYmendqO1xcdWQ4M2NcXHVkZjA4JyxcbiAgJ3JhaXNlZF9iYWNrX29mX2hhbmQnOidcXHVkODNlXFx1ZGQxYScsXG4gICdyYWlzZWRfaGFuZF93aXRoX2ZpbmdlcnNfc3BsYXllZCc6J1xcdWQ4M2RcXHVkZDkwJyxcbiAgJ3JhaXNlZF9oYW5kcyc6J1xcdWQ4M2RcXHVkZTRjJyxcbiAgJ3JhaXNpbmdfaGFuZF93b21hbic6J1xcdWQ4M2RcXHVkZTRiJyxcbiAgJ3JhaXNpbmdfaGFuZF9tYW4nOidcXHVkODNkXFx1ZGU0YiZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAncmFtJzonXFx1ZDgzZFxcdWRjMGYnLFxuICAncmFtZW4nOidcXHVkODNjXFx1ZGY1YycsXG4gICdyYXQnOidcXHVkODNkXFx1ZGMwMCcsXG4gICdyZWNvcmRfYnV0dG9uJzonXFx1MjNmYScsXG4gICdyZWN5Y2xlJzonXFx1MjY3YlxcdWZlMGYnLFxuICAncmVkX2NpcmNsZSc6J1xcdWQ4M2RcXHVkZDM0JyxcbiAgJ3JlZ2lzdGVyZWQnOidcXHUwMGFlXFx1ZmUwZicsXG4gICdyZWxheGVkJzonXFx1MjYzYVxcdWZlMGYnLFxuICAncmVsaWV2ZWQnOidcXHVkODNkXFx1ZGUwYycsXG4gICdyZW1pbmRlcl9yaWJib24nOidcXHVkODNjXFx1ZGY5NycsXG4gICdyZXBlYXQnOidcXHVkODNkXFx1ZGQwMScsXG4gICdyZXBlYXRfb25lJzonXFx1ZDgzZFxcdWRkMDInLFxuICAncmVzY3VlX3dvcmtlcl9oZWxtZXQnOidcXHUyNmQxJyxcbiAgJ3Jlc3Ryb29tJzonXFx1ZDgzZFxcdWRlYmInLFxuICAncmV2b2x2aW5nX2hlYXJ0cyc6J1xcdWQ4M2RcXHVkYzllJyxcbiAgJ3Jld2luZCc6J1xcdTIzZWEnLFxuICAncmhpbm9jZXJvcyc6J1xcdWQ4M2VcXHVkZDhmJyxcbiAgJ3JpYmJvbic6J1xcdWQ4M2NcXHVkZjgwJyxcbiAgJ3JpY2UnOidcXHVkODNjXFx1ZGY1YScsXG4gICdyaWNlX2JhbGwnOidcXHVkODNjXFx1ZGY1OScsXG4gICdyaWNlX2NyYWNrZXInOidcXHVkODNjXFx1ZGY1OCcsXG4gICdyaWNlX3NjZW5lJzonXFx1ZDgzY1xcdWRmOTEnLFxuICAncmlnaHRfYW5nZXJfYnViYmxlJzonXFx1ZDgzZFxcdWRkZWYnLFxuICAncmluZyc6J1xcdWQ4M2RcXHVkYzhkJyxcbiAgJ3JvYm90JzonXFx1ZDgzZVxcdWRkMTYnLFxuICAncm9ja2V0JzonXFx1ZDgzZFxcdWRlODAnLFxuICAncm9mbCc6J1xcdWQ4M2VcXHVkZDIzJyxcbiAgJ3JvbGxfZXllcyc6J1xcdWQ4M2RcXHVkZTQ0JyxcbiAgJ3JvbGxlcl9jb2FzdGVyJzonXFx1ZDgzY1xcdWRmYTInLFxuICAncm9vc3Rlcic6J1xcdWQ4M2RcXHVkYzEzJyxcbiAgJ3Jvc2UnOidcXHVkODNjXFx1ZGYzOScsXG4gICdyb3NldHRlJzonXFx1ZDgzY1xcdWRmZjUnLFxuICAncm90YXRpbmdfbGlnaHQnOidcXHVkODNkXFx1ZGVhOCcsXG4gICdyb3VuZF9wdXNocGluJzonXFx1ZDgzZFxcdWRjY2QnLFxuICAncm93aW5nX21hbic6J1xcdWQ4M2RcXHVkZWEzJyxcbiAgJ3Jvd2luZ193b21hbic6J1xcdWQ4M2RcXHVkZWEzJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdydWdieV9mb290YmFsbCc6J1xcdWQ4M2NcXHVkZmM5JyxcbiAgJ3J1bm5pbmdfbWFuJzonXFx1ZDgzY1xcdWRmYzMnLFxuICAncnVubmluZ19zaGlydF93aXRoX3Nhc2gnOidcXHVkODNjXFx1ZGZiZCcsXG4gICdydW5uaW5nX3dvbWFuJzonXFx1ZDgzY1xcdWRmYzMmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3NhJzonXFx1ZDgzY1xcdWRlMDJcXHVmZTBmJyxcbiAgJ3NhZ2l0dGFyaXVzJzonXFx1MjY1MFxcdWZlMGYnLFxuICAnc2FrZSc6J1xcdWQ4M2NcXHVkZjc2JyxcbiAgJ3NhbmRhbCc6J1xcdWQ4M2RcXHVkYzYxJyxcbiAgJ3NhbnRhJzonXFx1ZDgzY1xcdWRmODUnLFxuICAnc2F0ZWxsaXRlJzonXFx1ZDgzZFxcdWRjZTEnLFxuICAnc2F4b3Bob25lJzonXFx1ZDgzY1xcdWRmYjcnLFxuICAnc2Nob29sJzonXFx1ZDgzY1xcdWRmZWInLFxuICAnc2Nob29sX3NhdGNoZWwnOidcXHVkODNjXFx1ZGY5MicsXG4gICdzY2lzc29ycyc6J1xcdTI3MDJcXHVmZTBmJyxcbiAgJ3Njb3JwaW9uJzonXFx1ZDgzZVxcdWRkODInLFxuICAnc2NvcnBpdXMnOidcXHUyNjRmXFx1ZmUwZicsXG4gICdzY3JlYW0nOidcXHVkODNkXFx1ZGUzMScsXG4gICdzY3JlYW1fY2F0JzonXFx1ZDgzZFxcdWRlNDAnLFxuICAnc2Nyb2xsJzonXFx1ZDgzZFxcdWRjZGMnLFxuICAnc2VhdCc6J1xcdWQ4M2RcXHVkY2JhJyxcbiAgJ3NlY3JldCc6J1xcdTMyOTlcXHVmZTBmJyxcbiAgJ3NlZV9ub19ldmlsJzonXFx1ZDgzZFxcdWRlNDgnLFxuICAnc2VlZGxpbmcnOidcXHVkODNjXFx1ZGYzMScsXG4gICdzZWxmaWUnOidcXHVkODNlXFx1ZGQzMycsXG4gICdzaGFsbG93X3Bhbl9vZl9mb29kJzonXFx1ZDgzZVxcdWRkNTgnLFxuICAnc2hhbXJvY2snOidcXHUyNjE4XFx1ZmUwZicsXG4gICdzaGFyayc6J1xcdWQ4M2VcXHVkZDg4JyxcbiAgJ3NoYXZlZF9pY2UnOidcXHVkODNjXFx1ZGY2NycsXG4gICdzaGVlcCc6J1xcdWQ4M2RcXHVkYzExJyxcbiAgJ3NoZWxsJzonXFx1ZDgzZFxcdWRjMWEnLFxuICAnc2hpZWxkJzonXFx1ZDgzZFxcdWRlZTEnLFxuICAnc2hpbnRvX3NocmluZSc6J1xcdTI2ZTknLFxuICAnc2hpcCc6J1xcdWQ4M2RcXHVkZWEyJyxcbiAgJ3NoaXJ0JzonXFx1ZDgzZFxcdWRjNTUnLFxuICAnc2hvcHBpbmcnOidcXHVkODNkXFx1ZGVjZCcsXG4gICdzaG9wcGluZ19jYXJ0JzonXFx1ZDgzZFxcdWRlZDInLFxuICAnc2hvd2VyJzonXFx1ZDgzZFxcdWRlYmYnLFxuICAnc2hyaW1wJzonXFx1ZDgzZVxcdWRkOTAnLFxuICAnc2lnbmFsX3N0cmVuZ3RoJzonXFx1ZDgzZFxcdWRjZjYnLFxuICAnc2l4X3BvaW50ZWRfc3Rhcic6J1xcdWQ4M2RcXHVkZDJmJyxcbiAgJ3NraSc6J1xcdWQ4M2NcXHVkZmJmJyxcbiAgJ3NraWVyJzonXFx1MjZmNycsXG4gICdza3VsbCc6J1xcdWQ4M2RcXHVkYzgwJyxcbiAgJ3NrdWxsX2FuZF9jcm9zc2JvbmVzJzonXFx1MjYyMFxcdWZlMGYnLFxuICAnc2xlZXBpbmcnOidcXHVkODNkXFx1ZGUzNCcsXG4gICdzbGVlcGluZ19iZWQnOidcXHVkODNkXFx1ZGVjYycsXG4gICdzbGVlcHknOidcXHVkODNkXFx1ZGUyYScsXG4gICdzbGlnaHRseV9mcm93bmluZ19mYWNlJzonXFx1ZDgzZFxcdWRlNDEnLFxuICAnc2xpZ2h0bHlfc21pbGluZ19mYWNlJzonXFx1ZDgzZFxcdWRlNDInLFxuICAnc2xvdF9tYWNoaW5lJzonXFx1ZDgzY1xcdWRmYjAnLFxuICAnc21hbGxfYWlycGxhbmUnOidcXHVkODNkXFx1ZGVlOScsXG4gICdzbWFsbF9ibHVlX2RpYW1vbmQnOidcXHVkODNkXFx1ZGQzOScsXG4gICdzbWFsbF9vcmFuZ2VfZGlhbW9uZCc6J1xcdWQ4M2RcXHVkZDM4JyxcbiAgJ3NtYWxsX3JlZF90cmlhbmdsZSc6J1xcdWQ4M2RcXHVkZDNhJyxcbiAgJ3NtYWxsX3JlZF90cmlhbmdsZV9kb3duJzonXFx1ZDgzZFxcdWRkM2InLFxuICAnc21pbGUnOidcXHVkODNkXFx1ZGUwNCcsXG4gICdzbWlsZV9jYXQnOidcXHVkODNkXFx1ZGUzOCcsXG4gICdzbWlsZXknOidcXHVkODNkXFx1ZGUwMycsXG4gICdzbWlsZXlfY2F0JzonXFx1ZDgzZFxcdWRlM2EnLFxuICAnc21pbGluZ19pbXAnOidcXHVkODNkXFx1ZGUwOCcsXG4gICdzbWlyayc6J1xcdWQ4M2RcXHVkZTBmJyxcbiAgJ3NtaXJrX2NhdCc6J1xcdWQ4M2RcXHVkZTNjJyxcbiAgJ3Ntb2tpbmcnOidcXHVkODNkXFx1ZGVhYycsXG4gICdzbmFpbCc6J1xcdWQ4M2RcXHVkYzBjJyxcbiAgJ3NuYWtlJzonXFx1ZDgzZFxcdWRjMGQnLFxuICAnc25lZXppbmdfZmFjZSc6J1xcdWQ4M2VcXHVkZDI3JyxcbiAgJ3Nub3dib2FyZGVyJzonXFx1ZDgzY1xcdWRmYzInLFxuICAnc25vd2ZsYWtlJzonXFx1Mjc0NFxcdWZlMGYnLFxuICAnc25vd21hbic6J1xcdTI2YzRcXHVmZTBmJyxcbiAgJ3Nub3dtYW5fd2l0aF9zbm93JzonXFx1MjYwM1xcdWZlMGYnLFxuICAnc29iJzonXFx1ZDgzZFxcdWRlMmQnLFxuICAnc29jY2VyJzonXFx1MjZiZFxcdWZlMGYnLFxuICAnc29vbic6J1xcdWQ4M2RcXHVkZDFjJyxcbiAgJ3Nvcyc6J1xcdWQ4M2NcXHVkZDk4JyxcbiAgJ3NvdW5kJzonXFx1ZDgzZFxcdWRkMDknLFxuICAnc3BhY2VfaW52YWRlcic6J1xcdWQ4M2RcXHVkYzdlJyxcbiAgJ3NwYWRlcyc6J1xcdTI2NjBcXHVmZTBmJyxcbiAgJ3NwYWdoZXR0aSc6J1xcdWQ4M2NcXHVkZjVkJyxcbiAgJ3NwYXJrbGUnOidcXHUyNzQ3XFx1ZmUwZicsXG4gICdzcGFya2xlcic6J1xcdWQ4M2NcXHVkZjg3JyxcbiAgJ3NwYXJrbGVzJzonXFx1MjcyOCcsXG4gICdzcGFya2xpbmdfaGVhcnQnOidcXHVkODNkXFx1ZGM5NicsXG4gICdzcGVha19ub19ldmlsJzonXFx1ZDgzZFxcdWRlNGEnLFxuICAnc3BlYWtlcic6J1xcdWQ4M2RcXHVkZDA4JyxcbiAgJ3NwZWFraW5nX2hlYWQnOidcXHVkODNkXFx1ZGRlMycsXG4gICdzcGVlY2hfYmFsbG9vbic6J1xcdWQ4M2RcXHVkY2FjJyxcbiAgJ3NwZWVkYm9hdCc6J1xcdWQ4M2RcXHVkZWE0JyxcbiAgJ3NwaWRlcic6J1xcdWQ4M2RcXHVkZDc3JyxcbiAgJ3NwaWRlcl93ZWInOidcXHVkODNkXFx1ZGQ3OCcsXG4gICdzcGlyYWxfY2FsZW5kYXInOidcXHVkODNkXFx1ZGRkMycsXG4gICdzcGlyYWxfbm90ZXBhZCc6J1xcdWQ4M2RcXHVkZGQyJyxcbiAgJ3Nwb29uJzonXFx1ZDgzZVxcdWRkNDQnLFxuICAnc3F1aWQnOidcXHVkODNlXFx1ZGQ5MScsXG4gICdzdGFkaXVtJzonXFx1ZDgzY1xcdWRmZGYnLFxuICAnc3Rhcic6J1xcdTJiNTBcXHVmZTBmJyxcbiAgJ3N0YXIyJzonXFx1ZDgzY1xcdWRmMWYnLFxuICAnc3Rhcl9hbmRfY3Jlc2NlbnQnOidcXHUyNjJhXFx1ZmUwZicsXG4gICdzdGFyX29mX2RhdmlkJzonXFx1MjcyMVxcdWZlMGYnLFxuICAnc3RhcnMnOidcXHVkODNjXFx1ZGYyMCcsXG4gICdzdGF0aW9uJzonXFx1ZDgzZFxcdWRlODknLFxuICAnc3RhdHVlX29mX2xpYmVydHknOidcXHVkODNkXFx1ZGRmZCcsXG4gICdzdGVhbV9sb2NvbW90aXZlJzonXFx1ZDgzZFxcdWRlODInLFxuICAnc3Rldyc6J1xcdWQ4M2NcXHVkZjcyJyxcbiAgJ3N0b3BfYnV0dG9uJzonXFx1MjNmOScsXG4gICdzdG9wX3NpZ24nOidcXHVkODNkXFx1ZGVkMScsXG4gICdzdG9wd2F0Y2gnOidcXHUyM2YxJyxcbiAgJ3N0cmFpZ2h0X3J1bGVyJzonXFx1ZDgzZFxcdWRjY2YnLFxuICAnc3RyYXdiZXJyeSc6J1xcdWQ4M2NcXHVkZjUzJyxcbiAgJ3N0dWNrX291dF90b25ndWUnOidcXHVkODNkXFx1ZGUxYicsXG4gICdzdHVja19vdXRfdG9uZ3VlX2Nsb3NlZF9leWVzJzonXFx1ZDgzZFxcdWRlMWQnLFxuICAnc3R1Y2tfb3V0X3Rvbmd1ZV93aW5raW5nX2V5ZSc6J1xcdWQ4M2RcXHVkZTFjJyxcbiAgJ3N0dWRpb19taWNyb3Bob25lJzonXFx1ZDgzY1xcdWRmOTknLFxuICAnc3R1ZmZlZF9mbGF0YnJlYWQnOidcXHVkODNlXFx1ZGQ1OScsXG4gICdzdW5fYmVoaW5kX2xhcmdlX2Nsb3VkJzonXFx1ZDgzY1xcdWRmMjUnLFxuICAnc3VuX2JlaGluZF9yYWluX2Nsb3VkJzonXFx1ZDgzY1xcdWRmMjYnLFxuICAnc3VuX2JlaGluZF9zbWFsbF9jbG91ZCc6J1xcdWQ4M2NcXHVkZjI0JyxcbiAgJ3N1bl93aXRoX2ZhY2UnOidcXHVkODNjXFx1ZGYxZScsXG4gICdzdW5mbG93ZXInOidcXHVkODNjXFx1ZGYzYicsXG4gICdzdW5nbGFzc2VzJzonXFx1ZDgzZFxcdWRlMGUnLFxuICAnc3VubnknOidcXHUyNjAwXFx1ZmUwZicsXG4gICdzdW5yaXNlJzonXFx1ZDgzY1xcdWRmMDUnLFxuICAnc3VucmlzZV9vdmVyX21vdW50YWlucyc6J1xcdWQ4M2NcXHVkZjA0JyxcbiAgJ3N1cmZpbmdfbWFuJzonXFx1ZDgzY1xcdWRmYzQnLFxuICAnc3VyZmluZ193b21hbic6J1xcdWQ4M2NcXHVkZmM0Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdzdXNoaSc6J1xcdWQ4M2NcXHVkZjYzJyxcbiAgJ3N1c3BlbnNpb25fcmFpbHdheSc6J1xcdWQ4M2RcXHVkZTlmJyxcbiAgJ3N3ZWF0JzonXFx1ZDgzZFxcdWRlMTMnLFxuICAnc3dlYXRfZHJvcHMnOidcXHVkODNkXFx1ZGNhNicsXG4gICdzd2VhdF9zbWlsZSc6J1xcdWQ4M2RcXHVkZTA1JyxcbiAgJ3N3ZWV0X3BvdGF0byc6J1xcdWQ4M2NcXHVkZjYwJyxcbiAgJ3N3aW1taW5nX21hbic6J1xcdWQ4M2NcXHVkZmNhJyxcbiAgJ3N3aW1taW5nX3dvbWFuJzonXFx1ZDgzY1xcdWRmY2EmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3N5bWJvbHMnOidcXHVkODNkXFx1ZGQyMycsXG4gICdzeW5hZ29ndWUnOidcXHVkODNkXFx1ZGQ0ZCcsXG4gICdzeXJpbmdlJzonXFx1ZDgzZFxcdWRjODknLFxuICAndGFjbyc6J1xcdWQ4M2NcXHVkZjJlJyxcbiAgJ3RhZGEnOidcXHVkODNjXFx1ZGY4OScsXG4gICd0YW5hYmF0YV90cmVlJzonXFx1ZDgzY1xcdWRmOGInLFxuICAndGF1cnVzJzonXFx1MjY0OVxcdWZlMGYnLFxuICAndGF4aSc6J1xcdWQ4M2RcXHVkZTk1JyxcbiAgJ3RlYSc6J1xcdWQ4M2NcXHVkZjc1JyxcbiAgJ3RlbGVwaG9uZV9yZWNlaXZlcic6J1xcdWQ4M2RcXHVkY2RlJyxcbiAgJ3RlbGVzY29wZSc6J1xcdWQ4M2RcXHVkZDJkJyxcbiAgJ3Rlbm5pcyc6J1xcdWQ4M2NcXHVkZmJlJyxcbiAgJ3RlbnQnOidcXHUyNmZhXFx1ZmUwZicsXG4gICd0aGVybW9tZXRlcic6J1xcdWQ4M2NcXHVkZjIxJyxcbiAgJ3RoaW5raW5nJzonXFx1ZDgzZVxcdWRkMTQnLFxuICAndGhvdWdodF9iYWxsb29uJzonXFx1ZDgzZFxcdWRjYWQnLFxuICAndGlja2V0JzonXFx1ZDgzY1xcdWRmYWInLFxuICAndGlja2V0cyc6J1xcdWQ4M2NcXHVkZjlmJyxcbiAgJ3RpZ2VyJzonXFx1ZDgzZFxcdWRjMmYnLFxuICAndGlnZXIyJzonXFx1ZDgzZFxcdWRjMDUnLFxuICAndGltZXJfY2xvY2snOidcXHUyM2YyJyxcbiAgJ3RpcHBpbmdfaGFuZF9tYW4nOidcXHVkODNkXFx1ZGM4MSZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAndGlyZWRfZmFjZSc6J1xcdWQ4M2RcXHVkZTJiJyxcbiAgJ3RtJzonXFx1MjEyMlxcdWZlMGYnLFxuICAndG9pbGV0JzonXFx1ZDgzZFxcdWRlYmQnLFxuICAndG9reW9fdG93ZXInOidcXHVkODNkXFx1ZGRmYycsXG4gICd0b21hdG8nOidcXHVkODNjXFx1ZGY0NScsXG4gICd0b25ndWUnOidcXHVkODNkXFx1ZGM0NScsXG4gICd0b3AnOidcXHVkODNkXFx1ZGQxZCcsXG4gICd0b3BoYXQnOidcXHVkODNjXFx1ZGZhOScsXG4gICd0b3JuYWRvJzonXFx1ZDgzY1xcdWRmMmEnLFxuICAndHJhY2tiYWxsJzonXFx1ZDgzZFxcdWRkYjInLFxuICAndHJhY3Rvcic6J1xcdWQ4M2RcXHVkZTljJyxcbiAgJ3RyYWZmaWNfbGlnaHQnOidcXHVkODNkXFx1ZGVhNScsXG4gICd0cmFpbic6J1xcdWQ4M2RcXHVkZThiJyxcbiAgJ3RyYWluMic6J1xcdWQ4M2RcXHVkZTg2JyxcbiAgJ3RyYW0nOidcXHVkODNkXFx1ZGU4YScsXG4gICd0cmlhbmd1bGFyX2ZsYWdfb25fcG9zdCc6J1xcdWQ4M2RcXHVkZWE5JyxcbiAgJ3RyaWFuZ3VsYXJfcnVsZXInOidcXHVkODNkXFx1ZGNkMCcsXG4gICd0cmlkZW50JzonXFx1ZDgzZFxcdWRkMzEnLFxuICAndHJpdW1waCc6J1xcdWQ4M2RcXHVkZTI0JyxcbiAgJ3Ryb2xsZXlidXMnOidcXHVkODNkXFx1ZGU4ZScsXG4gICd0cm9waHknOidcXHVkODNjXFx1ZGZjNicsXG4gICd0cm9waWNhbF9kcmluayc6J1xcdWQ4M2NcXHVkZjc5JyxcbiAgJ3Ryb3BpY2FsX2Zpc2gnOidcXHVkODNkXFx1ZGMyMCcsXG4gICd0cnVjayc6J1xcdWQ4M2RcXHVkZTlhJyxcbiAgJ3RydW1wZXQnOidcXHVkODNjXFx1ZGZiYScsXG4gICd0dWxpcCc6J1xcdWQ4M2NcXHVkZjM3JyxcbiAgJ3R1bWJsZXJfZ2xhc3MnOidcXHVkODNlXFx1ZGQ0MycsXG4gICd0dXJrZXknOidcXHVkODNlXFx1ZGQ4MycsXG4gICd0dXJ0bGUnOidcXHVkODNkXFx1ZGMyMicsXG4gICd0dic6J1xcdWQ4M2RcXHVkY2ZhJyxcbiAgJ3R3aXN0ZWRfcmlnaHR3YXJkc19hcnJvd3MnOidcXHVkODNkXFx1ZGQwMCcsXG4gICd0d29faGVhcnRzJzonXFx1ZDgzZFxcdWRjOTUnLFxuICAndHdvX21lbl9ob2xkaW5nX2hhbmRzJzonXFx1ZDgzZFxcdWRjNmMnLFxuICAndHdvX3dvbWVuX2hvbGRpbmdfaGFuZHMnOidcXHVkODNkXFx1ZGM2ZCcsXG4gICd1NTI3Mic6J1xcdWQ4M2NcXHVkZTM5JyxcbiAgJ3U1NDA4JzonXFx1ZDgzY1xcdWRlMzQnLFxuICAndTU1YjYnOidcXHVkODNjXFx1ZGUzYScsXG4gICd1NjMwNyc6J1xcdWQ4M2NcXHVkZTJmXFx1ZmUwZicsXG4gICd1NjcwOCc6J1xcdWQ4M2NcXHVkZTM3XFx1ZmUwZicsXG4gICd1NjcwOSc6J1xcdWQ4M2NcXHVkZTM2JyxcbiAgJ3U2ZTgwJzonXFx1ZDgzY1xcdWRlMzUnLFxuICAndTcxMjEnOidcXHVkODNjXFx1ZGUxYVxcdWZlMGYnLFxuICAndTc1MzMnOidcXHVkODNjXFx1ZGUzOCcsXG4gICd1Nzk4MSc6J1xcdWQ4M2NcXHVkZTMyJyxcbiAgJ3U3YTdhJzonXFx1ZDgzY1xcdWRlMzMnLFxuICAndW1icmVsbGEnOidcXHUyNjE0XFx1ZmUwZicsXG4gICd1bmFtdXNlZCc6J1xcdWQ4M2RcXHVkZTEyJyxcbiAgJ3VuZGVyYWdlJzonXFx1ZDgzZFxcdWRkMWUnLFxuICAndW5pY29ybic6J1xcdWQ4M2VcXHVkZDg0JyxcbiAgJ3VubG9jayc6J1xcdWQ4M2RcXHVkZDEzJyxcbiAgJ3VwJzonXFx1ZDgzY1xcdWRkOTknLFxuICAndXBzaWRlX2Rvd25fZmFjZSc6J1xcdWQ4M2RcXHVkZTQzJyxcbiAgJ3YnOidcXHUyNzBjXFx1ZmUwZicsXG4gICd2ZXJ0aWNhbF90cmFmZmljX2xpZ2h0JzonXFx1ZDgzZFxcdWRlYTYnLFxuICAndmhzJzonXFx1ZDgzZFxcdWRjZmMnLFxuICAndmlicmF0aW9uX21vZGUnOidcXHVkODNkXFx1ZGNmMycsXG4gICd2aWRlb19jYW1lcmEnOidcXHVkODNkXFx1ZGNmOScsXG4gICd2aWRlb19nYW1lJzonXFx1ZDgzY1xcdWRmYWUnLFxuICAndmlvbGluJzonXFx1ZDgzY1xcdWRmYmInLFxuICAndmlyZ28nOidcXHUyNjRkXFx1ZmUwZicsXG4gICd2b2xjYW5vJzonXFx1ZDgzY1xcdWRmMGInLFxuICAndm9sbGV5YmFsbCc6J1xcdWQ4M2NcXHVkZmQwJyxcbiAgJ3ZzJzonXFx1ZDgzY1xcdWRkOWEnLFxuICAndnVsY2FuX3NhbHV0ZSc6J1xcdWQ4M2RcXHVkZDk2JyxcbiAgJ3dhbGtpbmdfbWFuJzonXFx1ZDgzZFxcdWRlYjYnLFxuICAnd2Fsa2luZ193b21hbic6J1xcdWQ4M2RcXHVkZWI2Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICd3YW5pbmdfY3Jlc2NlbnRfbW9vbic6J1xcdWQ4M2NcXHVkZjE4JyxcbiAgJ3dhbmluZ19naWJib3VzX21vb24nOidcXHVkODNjXFx1ZGYxNicsXG4gICd3YXJuaW5nJzonXFx1MjZhMFxcdWZlMGYnLFxuICAnd2FzdGViYXNrZXQnOidcXHVkODNkXFx1ZGRkMScsXG4gICd3YXRjaCc6J1xcdTIzMWFcXHVmZTBmJyxcbiAgJ3dhdGVyX2J1ZmZhbG8nOidcXHVkODNkXFx1ZGMwMycsXG4gICd3YXRlcm1lbG9uJzonXFx1ZDgzY1xcdWRmNDknLFxuICAnd2F2ZSc6J1xcdWQ4M2RcXHVkYzRiJyxcbiAgJ3dhdnlfZGFzaCc6J1xcdTMwMzBcXHVmZTBmJyxcbiAgJ3dheGluZ19jcmVzY2VudF9tb29uJzonXFx1ZDgzY1xcdWRmMTInLFxuICAnd2MnOidcXHVkODNkXFx1ZGViZScsXG4gICd3ZWFyeSc6J1xcdWQ4M2RcXHVkZTI5JyxcbiAgJ3dlZGRpbmcnOidcXHVkODNkXFx1ZGM5MicsXG4gICd3ZWlnaHRfbGlmdGluZ19tYW4nOidcXHVkODNjXFx1ZGZjYlxcdWZlMGYnLFxuICAnd2VpZ2h0X2xpZnRpbmdfd29tYW4nOidcXHVkODNjXFx1ZGZjYlxcdWZlMGYmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3doYWxlJzonXFx1ZDgzZFxcdWRjMzMnLFxuICAnd2hhbGUyJzonXFx1ZDgzZFxcdWRjMGInLFxuICAnd2hlZWxfb2ZfZGhhcm1hJzonXFx1MjYzOFxcdWZlMGYnLFxuICAnd2hlZWxjaGFpcic6J1xcdTI2N2ZcXHVmZTBmJyxcbiAgJ3doaXRlX2NoZWNrX21hcmsnOidcXHUyNzA1JyxcbiAgJ3doaXRlX2NpcmNsZSc6J1xcdTI2YWFcXHVmZTBmJyxcbiAgJ3doaXRlX2ZsYWcnOidcXHVkODNjXFx1ZGZmM1xcdWZlMGYnLFxuICAnd2hpdGVfZmxvd2VyJzonXFx1ZDgzZFxcdWRjYWUnLFxuICAnd2hpdGVfbGFyZ2Vfc3F1YXJlJzonXFx1MmIxY1xcdWZlMGYnLFxuICAnd2hpdGVfbWVkaXVtX3NtYWxsX3NxdWFyZSc6J1xcdTI1ZmRcXHVmZTBmJyxcbiAgJ3doaXRlX21lZGl1bV9zcXVhcmUnOidcXHUyNWZiXFx1ZmUwZicsXG4gICd3aGl0ZV9zbWFsbF9zcXVhcmUnOidcXHUyNWFiXFx1ZmUwZicsXG4gICd3aGl0ZV9zcXVhcmVfYnV0dG9uJzonXFx1ZDgzZFxcdWRkMzMnLFxuICAnd2lsdGVkX2Zsb3dlcic6J1xcdWQ4M2VcXHVkZDQwJyxcbiAgJ3dpbmRfY2hpbWUnOidcXHVkODNjXFx1ZGY5MCcsXG4gICd3aW5kX2ZhY2UnOidcXHVkODNjXFx1ZGYyYycsXG4gICd3aW5lX2dsYXNzJzonXFx1ZDgzY1xcdWRmNzcnLFxuICAnd2luayc6J1xcdWQ4M2RcXHVkZTA5JyxcbiAgJ3dvbGYnOidcXHVkODNkXFx1ZGMzYScsXG4gICd3b21hbic6J1xcdWQ4M2RcXHVkYzY5JyxcbiAgJ3dvbWFuX2FydGlzdCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNjXFx1ZGZhOCcsXG4gICd3b21hbl9hc3Ryb25hdXQnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRlODAnLFxuICAnd29tYW5fY2FydHdoZWVsaW5nJzonXFx1ZDgzZVxcdWRkMzgmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3dvbWFuX2Nvb2snOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzY1xcdWRmNzMnLFxuICAnd29tYW5fZmFjZXBhbG1pbmcnOidcXHVkODNlXFx1ZGQyNiZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd29tYW5fZmFjdG9yeV93b3JrZXInOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzY1xcdWRmZWQnLFxuICAnd29tYW5fZmFybWVyJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2NcXHVkZjNlJyxcbiAgJ3dvbWFuX2ZpcmVmaWdodGVyJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkZTkyJyxcbiAgJ3dvbWFuX2hlYWx0aF93b3JrZXInOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1MjY5NVxcdWZlMGYnLFxuICAnd29tYW5fanVkZ2UnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1MjY5NlxcdWZlMGYnLFxuICAnd29tYW5fanVnZ2xpbmcnOidcXHVkODNlXFx1ZGQzOSZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd29tYW5fbWVjaGFuaWMnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRkMjcnLFxuICAnd29tYW5fb2ZmaWNlX3dvcmtlcic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGNiYycsXG4gICd3b21hbl9waWxvdCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHUyNzA4XFx1ZmUwZicsXG4gICd3b21hbl9wbGF5aW5nX2hhbmRiYWxsJzonXFx1ZDgzZVxcdWRkM2UmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3dvbWFuX3BsYXlpbmdfd2F0ZXJfcG9sbyc6J1xcdWQ4M2VcXHVkZDNkJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICd3b21hbl9zY2llbnRpc3QnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRkMmMnLFxuICAnd29tYW5fc2hydWdnaW5nJzonXFx1ZDgzZVxcdWRkMzcmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3dvbWFuX3Npbmdlcic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNjXFx1ZGZhNCcsXG4gICd3b21hbl9zdHVkZW50JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2NcXHVkZjkzJyxcbiAgJ3dvbWFuX3RlYWNoZXInOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzY1xcdWRmZWInLFxuICAnd29tYW5fdGVjaG5vbG9naXN0JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkY2JiJyxcbiAgJ3dvbWFuX3dpdGhfdHVyYmFuJzonXFx1ZDgzZFxcdWRjNzMmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3dvbWFuc19jbG90aGVzJzonXFx1ZDgzZFxcdWRjNWEnLFxuICAnd29tYW5zX2hhdCc6J1xcdWQ4M2RcXHVkYzUyJyxcbiAgJ3dvbWVuX3dyZXN0bGluZyc6J1xcdWQ4M2VcXHVkZDNjJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICd3b21lbnMnOidcXHVkODNkXFx1ZGViYScsXG4gICd3b3JsZF9tYXAnOidcXHVkODNkXFx1ZGRmYScsXG4gICd3b3JyaWVkJzonXFx1ZDgzZFxcdWRlMWYnLFxuICAnd3JlbmNoJzonXFx1ZDgzZFxcdWRkMjcnLFxuICAnd3JpdGluZ19oYW5kJzonXFx1MjcwZFxcdWZlMGYnLFxuICAneCc6J1xcdTI3NGMnLFxuICAneWVsbG93X2hlYXJ0JzonXFx1ZDgzZFxcdWRjOWInLFxuICAneWVuJzonXFx1ZDgzZFxcdWRjYjQnLFxuICAneWluX3lhbmcnOidcXHUyNjJmXFx1ZmUwZicsXG4gICd5dW0nOidcXHVkODNkXFx1ZGUwYicsXG4gICd6YXAnOidcXHUyNmExXFx1ZmUwZicsXG4gICd6aXBwZXJfbW91dGhfZmFjZSc6J1xcdWQ4M2VcXHVkZDEwJyxcbiAgJ3p6eic6J1xcdWQ4M2RcXHVkY2E0JyxcblxuICAvKiBzcGVjaWFsIGVtb2ppcyA6UCAqL1xuICAnb2N0b2NhdCc6ICAnPGltZyBhbHQ9XCI6b2N0b2NhdDpcIiBoZWlnaHQ9XCIyMFwiIHdpZHRoPVwiMjBcIiBhbGlnbj1cImFic21pZGRsZVwiIHNyYz1cImh0dHBzOi8vYXNzZXRzLWNkbi5naXRodWIuY29tL2ltYWdlcy9pY29ucy9lbW9qaS9vY3RvY2F0LnBuZ1wiPicsXG4gICdzaG93ZG93bic6ICc8c3BhbiBzdHlsZT1cImZvbnQtZmFtaWx5OiBcXCdBbm9ueW1vdXMgUHJvXFwnLCBtb25vc3BhY2U7IHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyB0ZXh0LWRlY29yYXRpb24tc3R5bGU6IGRhc2hlZDsgdGV4dC1kZWNvcmF0aW9uLWNvbG9yOiAjM2U4YjhhO3RleHQtdW5kZXJsaW5lLXBvc2l0aW9uOiB1bmRlcjtcIj5TPC9zcGFuPidcbn07XG4iLCAiLyoqXG4gKiBDcmVhdGVkIGJ5IEVzdGV2YW8gb24gMzEtMDUtMjAxNS5cbiAqL1xuXG4vKipcbiAqIFNob3dkb3duIENvbnZlcnRlciBjbGFzc1xuICogQGNsYXNzXG4gKiBAcGFyYW0ge29iamVjdH0gW2NvbnZlcnRlck9wdGlvbnNdXG4gKiBAcmV0dXJucyB7Q29udmVydGVyfVxuICovXG5zaG93ZG93bi5Db252ZXJ0ZXIgPSBmdW5jdGlvbiAoY29udmVydGVyT3B0aW9ucykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyXG4gICAgICAvKipcbiAgICAgICAqIE9wdGlvbnMgdXNlZCBieSB0aGlzIGNvbnZlcnRlclxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqIEB0eXBlIHt7fX1cbiAgICAgICAqL1xuICAgICAgb3B0aW9ucyA9IHt9LFxuXG4gICAgICAvKipcbiAgICAgICAqIExhbmd1YWdlIGV4dGVuc2lvbnMgdXNlZCBieSB0aGlzIGNvbnZlcnRlclxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgICAqL1xuICAgICAgbGFuZ0V4dGVuc2lvbnMgPSBbXSxcblxuICAgICAgLyoqXG4gICAgICAgKiBPdXRwdXQgbW9kaWZpZXJzIGV4dGVuc2lvbnMgdXNlZCBieSB0aGlzIGNvbnZlcnRlclxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgICAqL1xuICAgICAgb3V0cHV0TW9kaWZpZXJzID0gW10sXG5cbiAgICAgIC8qKlxuICAgICAgICogRXZlbnQgbGlzdGVuZXJzXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogQHR5cGUge3t9fVxuICAgICAgICovXG4gICAgICBsaXN0ZW5lcnMgPSB7fSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgZmxhdm9yIHNldCBpbiB0aGlzIGNvbnZlcnRlclxuICAgICAgICovXG4gICAgICBzZXRDb252Rmxhdm9yID0gc2V0Rmxhdm9yLFxuXG4gICAgICAvKipcbiAgICAgICAqIE1ldGFkYXRhIG9mIHRoZSBkb2N1bWVudFxuICAgICAgICogQHR5cGUge3twYXJzZWQ6IHt9LCByYXc6IHN0cmluZywgZm9ybWF0OiBzdHJpbmd9fVxuICAgICAgICovXG4gICAgICBtZXRhZGF0YSA9IHtcbiAgICAgICAgcGFyc2VkOiB7fSxcbiAgICAgICAgcmF3OiAnJyxcbiAgICAgICAgZm9ybWF0OiAnJ1xuICAgICAgfTtcblxuICBfY29uc3RydWN0b3IoKTtcblxuICAvKipcbiAgICogQ29udmVydGVyIGNvbnN0cnVjdG9yXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBfY29uc3RydWN0b3IgKCkge1xuICAgIGNvbnZlcnRlck9wdGlvbnMgPSBjb252ZXJ0ZXJPcHRpb25zIHx8IHt9O1xuXG4gICAgZm9yICh2YXIgZ09wdCBpbiBnbG9iYWxPcHRpb25zKSB7XG4gICAgICBpZiAoZ2xvYmFsT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShnT3B0KSkge1xuICAgICAgICBvcHRpb25zW2dPcHRdID0gZ2xvYmFsT3B0aW9uc1tnT3B0XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNZXJnZSBvcHRpb25zXG4gICAgaWYgKHR5cGVvZiBjb252ZXJ0ZXJPcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yICh2YXIgb3B0IGluIGNvbnZlcnRlck9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGNvbnZlcnRlck9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgICAgIG9wdGlvbnNbb3B0XSA9IGNvbnZlcnRlck9wdGlvbnNbb3B0XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcignQ29udmVydGVyIGV4cGVjdHMgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgdG8gYmUgYW4gb2JqZWN0LCBidXQgJyArIHR5cGVvZiBjb252ZXJ0ZXJPcHRpb25zICtcbiAgICAgICcgd2FzIHBhc3NlZCBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmV4dGVuc2lvbnMpIHtcbiAgICAgIHNob3dkb3duLmhlbHBlci5mb3JFYWNoKG9wdGlvbnMuZXh0ZW5zaW9ucywgX3BhcnNlRXh0ZW5zaW9uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7Kn0gZXh0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT0nJ11cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIF9wYXJzZUV4dGVuc2lvbiAoZXh0LCBuYW1lKSB7XG5cbiAgICBuYW1lID0gbmFtZSB8fCBudWxsO1xuICAgIC8vIElmIGl0J3MgYSBzdHJpbmcsIHRoZSBleHRlbnNpb24gd2FzIHByZXZpb3VzbHkgbG9hZGVkXG4gICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1N0cmluZyhleHQpKSB7XG4gICAgICBleHQgPSBzaG93ZG93bi5oZWxwZXIuc3RkRXh0TmFtZShleHQpO1xuICAgICAgbmFtZSA9IGV4dDtcblxuICAgICAgLy8gTEVHQUNZX1NVUFBPUlQgQ09ERVxuICAgICAgaWYgKHNob3dkb3duLmV4dGVuc2lvbnNbZXh0XSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0RFUFJFQ0FUSU9OIFdBUk5JTkc6ICcgKyBleHQgKyAnIGlzIGFuIG9sZCBleHRlbnNpb24gdGhhdCB1c2VzIGEgZGVwcmVjYXRlZCBsb2FkaW5nIG1ldGhvZC4nICtcbiAgICAgICAgICAnUGxlYXNlIGluZm9ybSB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlIGV4dGVuc2lvbiBzaG91bGQgYmUgdXBkYXRlZCEnKTtcbiAgICAgICAgbGVnYWN5RXh0ZW5zaW9uTG9hZGluZyhzaG93ZG93bi5leHRlbnNpb25zW2V4dF0sIGV4dCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gRU5EIExFR0FDWSBTVVBQT1JUIENPREVcblxuICAgICAgfSBlbHNlIGlmICghc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGV4dGVuc2lvbnNbZXh0XSkpIHtcbiAgICAgICAgZXh0ID0gZXh0ZW5zaW9uc1tleHRdO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcignRXh0ZW5zaW9uIFwiJyArIGV4dCArICdcIiBjb3VsZCBub3QgYmUgbG9hZGVkLiBJdCB3YXMgZWl0aGVyIG5vdCBmb3VuZCBvciBpcyBub3QgYSB2YWxpZCBleHRlbnNpb24uJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGV4dCA9IGV4dCgpO1xuICAgIH1cblxuICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzQXJyYXkoZXh0KSkge1xuICAgICAgZXh0ID0gW2V4dF07XG4gICAgfVxuXG4gICAgdmFyIHZhbGlkRXh0ID0gdmFsaWRhdGUoZXh0LCBuYW1lKTtcbiAgICBpZiAoIXZhbGlkRXh0LnZhbGlkKSB7XG4gICAgICB0aHJvdyBFcnJvcih2YWxpZEV4dC5lcnJvcik7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHQubGVuZ3RoOyArK2kpIHtcbiAgICAgIHN3aXRjaCAoZXh0W2ldLnR5cGUpIHtcblxuICAgICAgICBjYXNlICdsYW5nJzpcbiAgICAgICAgICBsYW5nRXh0ZW5zaW9ucy5wdXNoKGV4dFtpXSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnb3V0cHV0JzpcbiAgICAgICAgICBvdXRwdXRNb2RpZmllcnMucHVzaChleHRbaV0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGV4dFtpXS5oYXNPd25Qcm9wZXJ0eSgnbGlzdGVuZXJzJykpIHtcbiAgICAgICAgZm9yICh2YXIgbG4gaW4gZXh0W2ldLmxpc3RlbmVycykge1xuICAgICAgICAgIGlmIChleHRbaV0ubGlzdGVuZXJzLmhhc093blByb3BlcnR5KGxuKSkge1xuICAgICAgICAgICAgbGlzdGVuKGxuLCBleHRbaV0ubGlzdGVuZXJzW2xuXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgICogTEVHQUNZX1NVUFBPUlRcbiAgICogQHBhcmFtIHsqfSBleHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICovXG4gIGZ1bmN0aW9uIGxlZ2FjeUV4dGVuc2lvbkxvYWRpbmcgKGV4dCwgbmFtZSkge1xuICAgIGlmICh0eXBlb2YgZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBleHQgPSBleHQobmV3IHNob3dkb3duLkNvbnZlcnRlcigpKTtcbiAgICB9XG4gICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHQpKSB7XG4gICAgICBleHQgPSBbZXh0XTtcbiAgICB9XG4gICAgdmFyIHZhbGlkID0gdmFsaWRhdGUoZXh0LCBuYW1lKTtcblxuICAgIGlmICghdmFsaWQudmFsaWQpIHtcbiAgICAgIHRocm93IEVycm9yKHZhbGlkLmVycm9yKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dC5sZW5ndGg7ICsraSkge1xuICAgICAgc3dpdGNoIChleHRbaV0udHlwZSkge1xuICAgICAgICBjYXNlICdsYW5nJzpcbiAgICAgICAgICBsYW5nRXh0ZW5zaW9ucy5wdXNoKGV4dFtpXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ291dHB1dCc6XG4gICAgICAgICAgb3V0cHV0TW9kaWZpZXJzLnB1c2goZXh0W2ldKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDovLyBzaG91bGQgbmV2ZXIgcmVhY2ggaGVyZVxuICAgICAgICAgIHRocm93IEVycm9yKCdFeHRlbnNpb24gbG9hZGVyIGVycm9yOiBUeXBlIHVucmVjb2duaXplZCEhIScpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gYW4gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIGZ1bmN0aW9uIGxpc3RlbiAobmFtZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1N0cmluZyhuYW1lKSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgaW4gY29udmVydGVyLmxpc3RlbigpIG1ldGhvZDogbmFtZSBtdXN0IGJlIGEgc3RyaW5nLCBidXQgJyArIHR5cGVvZiBuYW1lICsgJyBnaXZlbicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50IGluIGNvbnZlcnRlci5saXN0ZW4oKSBtZXRob2Q6IGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbiwgYnV0ICcgKyB0eXBlb2YgY2FsbGJhY2sgKyAnIGdpdmVuJyk7XG4gICAgfVxuXG4gICAgaWYgKCFsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGxpc3RlbmVyc1tuYW1lXSA9IFtdO1xuICAgIH1cbiAgICBsaXN0ZW5lcnNbbmFtZV0ucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICBmdW5jdGlvbiByVHJpbUlucHV0VGV4dCAodGV4dCkge1xuICAgIHZhciByc3AgPSB0ZXh0Lm1hdGNoKC9eXFxzKi8pWzBdLmxlbmd0aCxcbiAgICAgICAgcmd4ID0gbmV3IFJlZ0V4cCgnXlxcXFxzezAsJyArIHJzcCArICd9JywgJ2dtJyk7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZShyZ3gsICcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhbiBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZ0TmFtZSBFdmVudCBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRleHRcbiAgICogQHBhcmFtIHt7fX0gb3B0aW9ucyBDb252ZXJ0ZXIgT3B0aW9uc1xuICAgKiBAcGFyYW0ge3t9fSBnbG9iYWxzXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLl9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoIChldnROYW1lLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICAgaWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShldnROYW1lKSkge1xuICAgICAgZm9yICh2YXIgZWkgPSAwOyBlaSA8IGxpc3RlbmVyc1tldnROYW1lXS5sZW5ndGg7ICsrZWkpIHtcbiAgICAgICAgdmFyIG5UZXh0ID0gbGlzdGVuZXJzW2V2dE5hbWVdW2VpXShldnROYW1lLCB0ZXh0LCB0aGlzLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgaWYgKG5UZXh0ICYmIHR5cGVvZiBuVGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0ZXh0ID0gblRleHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byBhbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKiBAcmV0dXJucyB7c2hvd2Rvd24uQ29udmVydGVyfVxuICAgKi9cbiAgdGhpcy5saXN0ZW4gPSBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcbiAgICBsaXN0ZW4obmFtZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIG1hcmtkb3duIHN0cmluZyBpbnRvIEhUTUxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICB0aGlzLm1ha2VIdG1sID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAvL2NoZWNrIGlmIHRleHQgaXMgbm90IGZhbHN5XG4gICAgaWYgKCF0ZXh0KSB7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG5cbiAgICB2YXIgZ2xvYmFscyA9IHtcbiAgICAgIGdIdG1sQmxvY2tzOiAgICAgW10sXG4gICAgICBnSHRtbE1kQmxvY2tzOiAgIFtdLFxuICAgICAgZ0h0bWxTcGFuczogICAgICBbXSxcbiAgICAgIGdVcmxzOiAgICAgICAgICAge30sXG4gICAgICBnVGl0bGVzOiAgICAgICAgIHt9LFxuICAgICAgZ0RpbWVuc2lvbnM6ICAgICB7fSxcbiAgICAgIGdMaXN0TGV2ZWw6ICAgICAgMCxcbiAgICAgIGhhc2hMaW5rQ291bnRzOiAge30sXG4gICAgICBsYW5nRXh0ZW5zaW9uczogIGxhbmdFeHRlbnNpb25zLFxuICAgICAgb3V0cHV0TW9kaWZpZXJzOiBvdXRwdXRNb2RpZmllcnMsXG4gICAgICBjb252ZXJ0ZXI6ICAgICAgIHRoaXMsXG4gICAgICBnaENvZGVCbG9ja3M6ICAgIFtdLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgcGFyc2VkOiB7fSxcbiAgICAgICAgcmF3OiAnJyxcbiAgICAgICAgZm9ybWF0OiAnJ1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBUaGlzIGxldHMgdXMgdXNlIMKoIHRyZW1hIGFzIGFuIGVzY2FwZSBjaGFyIHRvIGF2b2lkIG1kNSBoYXNoZXNcbiAgICAvLyBUaGUgY2hvaWNlIG9mIGNoYXJhY3RlciBpcyBhcmJpdHJhcnk7IGFueXRoaW5nIHRoYXQgaXNuJ3RcbiAgICAvLyBtYWdpYyBpbiBNYXJrZG93biB3aWxsIHdvcmsuXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqgvZywgJ8KoVCcpO1xuXG4gICAgLy8gUmVwbGFjZSAkIHdpdGggwqhEXG4gICAgLy8gUmVnRXhwIGludGVycHJldHMgJCBhcyBhIHNwZWNpYWwgY2hhcmFjdGVyXG4gICAgLy8gd2hlbiBpdCdzIGluIGEgcmVwbGFjZW1lbnQgc3RyaW5nXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFwkL2csICfCqEQnKTtcblxuICAgIC8vIFN0YW5kYXJkaXplIGxpbmUgZW5kaW5nc1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcclxcbi9nLCAnXFxuJyk7IC8vIERPUyB0byBVbml4XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxyL2csICdcXG4nKTsgLy8gTWFjIHRvIFVuaXhcblxuICAgIC8vIFN0YXJkYXJkaXplIGxpbmUgc3BhY2VzXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFx1MDBBMC9nLCAnJm5ic3A7Jyk7XG5cbiAgICBpZiAob3B0aW9ucy5zbWFydEluZGVudGF0aW9uRml4KSB7XG4gICAgICB0ZXh0ID0gclRyaW1JbnB1dFRleHQodGV4dCk7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHRleHQgYmVnaW5zIGFuZCBlbmRzIHdpdGggYSBjb3VwbGUgb2YgbmV3bGluZXM6XG4gICAgdGV4dCA9ICdcXG5cXG4nICsgdGV4dCArICdcXG5cXG4nO1xuXG4gICAgLy8gZGV0YWJcbiAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdkZXRhYicpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gICAgLyoqXG4gICAgICogU3RyaXAgYW55IGxpbmVzIGNvbnNpc3Rpbmcgb25seSBvZiBzcGFjZXMgYW5kIHRhYnMuXG4gICAgICogVGhpcyBtYWtlcyBzdWJzZXF1ZW50IHJlZ2V4cyBlYXNpZXIgdG8gd3JpdGUsIGJlY2F1c2Ugd2UgY2FuXG4gICAgICogbWF0Y2ggY29uc2VjdXRpdmUgYmxhbmsgbGluZXMgd2l0aCAvXFxuKy8gaW5zdGVhZCBvZiBzb21ldGhpbmdcbiAgICAgKiBjb250b3J0ZWQgbGlrZSAvWyBcXHRdKlxcbisvXG4gICAgICovXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlsgXFx0XSskL21nLCAnJyk7XG5cbiAgICAvL3J1biBsYW5ndWFnZUV4dGVuc2lvbnNcbiAgICBzaG93ZG93bi5oZWxwZXIuZm9yRWFjaChsYW5nRXh0ZW5zaW9ucywgZnVuY3Rpb24gKGV4dCkge1xuICAgICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigncnVuRXh0ZW5zaW9uJykoZXh0LCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB9KTtcblxuICAgIC8vIHJ1biB0aGUgc3ViIHBhcnNlcnNcbiAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtZXRhZGF0YScpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hQcmVDb2RlVGFncycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2dpdGh1YkNvZGVCbG9ja3MnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTEJsb2NrcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hDb2RlVGFncycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3N0cmlwTGlua0RlZmluaXRpb25zJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignYmxvY2tHYW11dCcpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3VuaGFzaEhUTUxTcGFucycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3VuZXNjYXBlU3BlY2lhbENoYXJzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgICAvLyBhdHRhY2tsYWI6IFJlc3RvcmUgZG9sbGFyIHNpZ25zXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqhEL2csICckJCcpO1xuXG4gICAgLy8gYXR0YWNrbGFiOiBSZXN0b3JlIHRyZW1hc1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoVC9nLCAnwqgnKTtcblxuICAgIC8vIHJlbmRlciBhIGNvbXBsZXRlIGh0bWwgZG9jdW1lbnQgaW5zdGVhZCBvZiBhIHBhcnRpYWwgaWYgdGhlIG9wdGlvbiBpcyBlbmFibGVkXG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignY29tcGxldGVIVE1MRG9jdW1lbnQnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAgIC8vIFJ1biBvdXRwdXQgbW9kaWZpZXJzXG4gICAgc2hvd2Rvd24uaGVscGVyLmZvckVhY2gob3V0cHV0TW9kaWZpZXJzLCBmdW5jdGlvbiAoZXh0KSB7XG4gICAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdydW5FeHRlbnNpb24nKShleHQsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIG1ldGFkYXRhXG4gICAgbWV0YWRhdGEgPSBnbG9iYWxzLm1ldGFkYXRhO1xuICAgIHJldHVybiB0ZXh0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBIVE1MIHN0cmluZyBpbnRvIGEgbWFya2Rvd24gc3RyaW5nXG4gICAqIEBwYXJhbSBzcmNcbiAgICogQHBhcmFtIFtIVE1MUGFyc2VyXSBBIFdIQVRXRyBET00gYW5kIEhUTUwgcGFyc2VyLCBzdWNoIGFzIEpTRE9NLiBJZiBub25lIGlzIHN1cHBsaWVkLCB3aW5kb3cuZG9jdW1lbnQgd2lsbCBiZSB1c2VkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5tYWtlTWFya2Rvd24gPSB0aGlzLm1ha2VNZCA9IGZ1bmN0aW9uIChzcmMsIEhUTUxQYXJzZXIpIHtcblxuICAgIC8vIHJlcGxhY2UgXFxyXFxuIHdpdGggXFxuXG4gICAgc3JjID0gc3JjLnJlcGxhY2UoL1xcclxcbi9nLCAnXFxuJyk7XG4gICAgc3JjID0gc3JjLnJlcGxhY2UoL1xcci9nLCAnXFxuJyk7IC8vIG9sZCBtYWNzXG5cbiAgICAvLyBkdWUgdG8gYW4gZWRnZSBjYXNlLCB3ZSBuZWVkIHRvIGZpbmQgdGhpczogPiA8XG4gICAgLy8gdG8gcHJldmVudCByZW1vdmluZyBvZiBub24gc2lsZW50IHdoaXRlIHNwYWNlc1xuICAgIC8vIGV4OiA8ZW0+dGhpcyBpczwvZW0+IDxzdHJvbmc+c3BhcnRhPC9zdHJvbmc+XG4gICAgc3JjID0gc3JjLnJlcGxhY2UoLz5bIFxcdF0rPC8sICc+wqhOQlNQOzwnKTtcblxuICAgIGlmICghSFRNTFBhcnNlcikge1xuICAgICAgaWYgKHdpbmRvdyAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgICAgSFRNTFBhcnNlciA9IHdpbmRvdy5kb2N1bWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSFRNTFBhcnNlciBpcyB1bmRlZmluZWQuIElmIGluIGEgd2Vid29ya2VyIG9yIG5vZGVqcyBlbnZpcm9ubWVudCwgeW91IG5lZWQgdG8gcHJvdmlkZSBhIFdIQVRXRyBET00gYW5kIEhUTUwgc3VjaCBhcyBKU0RPTScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkb2MgPSBIVE1MUGFyc2VyLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRvYy5pbm5lckhUTUwgPSBzcmM7XG5cbiAgICB2YXIgZ2xvYmFscyA9IHtcbiAgICAgIHByZUxpc3Q6IHN1YnN0aXR1dGVQcmVDb2RlVGFncyhkb2MpXG4gICAgfTtcblxuICAgIC8vIHJlbW92ZSBhbGwgbmV3bGluZXMgYW5kIGNvbGxhcHNlIHNwYWNlc1xuICAgIGNsZWFuKGRvYyk7XG5cbiAgICAvLyBzb21lIHN0dWZmLCBsaWtlIGFjY2lkZW50YWwgcmVmZXJlbmNlIGxpbmtzIG11c3Qgbm93IGJlIGVzY2FwZWRcbiAgICAvLyBUT0RPXG4gICAgLy8gZG9jLmlubmVySFRNTCA9IGRvYy5pbm5lckhUTUwucmVwbGFjZSgvXFxbW1xcU1xcdCBdXS8pO1xuXG4gICAgdmFyIG5vZGVzID0gZG9jLmNoaWxkTm9kZXMsXG4gICAgICAgIG1kRG9jID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBtZERvYyArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykobm9kZXNbaV0sIGdsb2JhbHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFuIChub2RlKSB7XG4gICAgICBmb3IgKHZhciBuID0gMDsgbiA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7ICsrbikge1xuICAgICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkTm9kZXNbbl07XG4gICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgICAgIGlmICghL1xcUy8udGVzdChjaGlsZC5ub2RlVmFsdWUpICYmICEvXlsgXSskLy50ZXN0KGNoaWxkLm5vZGVWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgLS1uO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGlsZC5ub2RlVmFsdWUgPSBjaGlsZC5ub2RlVmFsdWUuc3BsaXQoJ1xcbicpLmpvaW4oJyAnKTtcbiAgICAgICAgICAgIGNoaWxkLm5vZGVWYWx1ZSA9IGNoaWxkLm5vZGVWYWx1ZS5yZXBsYWNlKC8oXFxzKSsvZywgJyQxJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgY2xlYW4oY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmluZCBhbGwgcHJlIHRhZ3MgYW5kIHJlcGxhY2UgY29udGVudHMgd2l0aCBwbGFjZWhvbGRlclxuICAgIC8vIHdlIG5lZWQgdGhpcyBzbyB0aGF0IHdlIGNhbiByZW1vdmUgYWxsIGluZGVudGF0aW9uIGZyb20gaHRtbFxuICAgIC8vIHRvIGVhc2UgdXAgcGFyc2luZ1xuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGVQcmVDb2RlVGFncyAoZG9jKSB7XG5cbiAgICAgIHZhciBwcmVzID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJ3ByZScpLFxuICAgICAgICAgIHByZXNQSCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByZXMubGVuZ3RoOyArK2kpIHtcblxuICAgICAgICBpZiAocHJlc1tpXS5jaGlsZEVsZW1lbnRDb3VudCA9PT0gMSAmJiBwcmVzW2ldLmZpcnN0Q2hpbGQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnY29kZScpIHtcbiAgICAgICAgICB2YXIgY29udGVudCA9IHByZXNbaV0uZmlyc3RDaGlsZC5pbm5lckhUTUwudHJpbSgpLFxuICAgICAgICAgICAgICBsYW5ndWFnZSA9IHByZXNbaV0uZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGFuZ3VhZ2UnKSB8fCAnJztcblxuICAgICAgICAgIC8vIGlmIGRhdGEtbGFuZ3VhZ2UgYXR0cmlidXRlIGlzIG5vdCBkZWZpbmVkLCB0aGVuIHdlIGxvb2sgZm9yIGNsYXNzIGxhbmd1YWdlLSpcbiAgICAgICAgICBpZiAobGFuZ3VhZ2UgPT09ICcnKSB7XG4gICAgICAgICAgICB2YXIgY2xhc3NlcyA9IHByZXNbaV0uZmlyc3RDaGlsZC5jbGFzc05hbWUuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgY2xhc3Nlcy5sZW5ndGg7ICsrYykge1xuICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IGNsYXNzZXNbY10ubWF0Y2goL15sYW5ndWFnZS0oLispJC8pO1xuICAgICAgICAgICAgICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlID0gbWF0Y2hlc1sxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHVuZXNjYXBlIGh0bWwgZW50aXRpZXMgaW4gY29udGVudFxuICAgICAgICAgIGNvbnRlbnQgPSBzaG93ZG93bi5oZWxwZXIudW5lc2NhcGVIVE1MRW50aXRpZXMoY29udGVudCk7XG5cbiAgICAgICAgICBwcmVzUEgucHVzaChjb250ZW50KTtcbiAgICAgICAgICBwcmVzW2ldLm91dGVySFRNTCA9ICc8cHJlY29kZSBsYW5ndWFnZT1cIicgKyBsYW5ndWFnZSArICdcIiBwcmVjb2RlbnVtPVwiJyArIGkudG9TdHJpbmcoKSArICdcIj48L3ByZWNvZGU+JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmVzUEgucHVzaChwcmVzW2ldLmlubmVySFRNTCk7XG4gICAgICAgICAgcHJlc1tpXS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICBwcmVzW2ldLnNldEF0dHJpYnV0ZSgncHJlbnVtJywgaS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHByZXNQSDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWREb2M7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCBhbiBvcHRpb24gb2YgdGhpcyBDb252ZXJ0ZXIgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqL1xuICB0aGlzLnNldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgb3B0aW9uc1trZXldID0gdmFsdWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgb3B0aW9uIG9mIHRoaXMgQ29udmVydGVyIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICB0aGlzLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gb3B0aW9uc1trZXldO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG9wdGlvbnMgb2YgdGhpcyBDb252ZXJ0ZXIgaW5zdGFuY2VcbiAgICogQHJldHVybnMge3t9fVxuICAgKi9cbiAgdGhpcy5nZXRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgZXh0ZW5zaW9uIHRvIFRISVMgY29udmVydGVyXG4gICAqIEBwYXJhbSB7e319IGV4dGVuc2lvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25hbWU9bnVsbF1cbiAgICovXG4gIHRoaXMuYWRkRXh0ZW5zaW9uID0gZnVuY3Rpb24gKGV4dGVuc2lvbiwgbmFtZSkge1xuICAgIG5hbWUgPSBuYW1lIHx8IG51bGw7XG4gICAgX3BhcnNlRXh0ZW5zaW9uKGV4dGVuc2lvbiwgbmFtZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFVzZSBhIGdsb2JhbCByZWdpc3RlcmVkIGV4dGVuc2lvbiB3aXRoIFRISVMgY29udmVydGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHRlbnNpb25OYW1lIE5hbWUgb2YgdGhlIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBleHRlbnNpb25cbiAgICovXG4gIHRoaXMudXNlRXh0ZW5zaW9uID0gZnVuY3Rpb24gKGV4dGVuc2lvbk5hbWUpIHtcbiAgICBfcGFyc2VFeHRlbnNpb24oZXh0ZW5zaW9uTmFtZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZmxhdm9yIFRISVMgY29udmVydGVyIHNob3VsZCB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICovXG4gIHRoaXMuc2V0Rmxhdm9yID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoIWZsYXZvci5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgdGhyb3cgRXJyb3IobmFtZSArICcgZmxhdm9yIHdhcyBub3QgZm91bmQnKTtcbiAgICB9XG4gICAgdmFyIHByZXNldCA9IGZsYXZvcltuYW1lXTtcbiAgICBzZXRDb252Rmxhdm9yID0gbmFtZTtcbiAgICBmb3IgKHZhciBvcHRpb24gaW4gcHJlc2V0KSB7XG4gICAgICBpZiAocHJlc2V0Lmhhc093blByb3BlcnR5KG9wdGlvbikpIHtcbiAgICAgICAgb3B0aW9uc1tvcHRpb25dID0gcHJlc2V0W29wdGlvbl07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnRseSBzZXQgZmxhdm9yIG9mIHRoaXMgY29udmVydGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLmdldEZsYXZvciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc2V0Q29udkZsYXZvcjtcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGV4dGVuc2lvbiBmcm9tIFRISVMgY29udmVydGVyLlxuICAgKiBOb3RlOiBUaGlzIGlzIGEgY29zdGx5IG9wZXJhdGlvbi4gSXQncyBiZXR0ZXIgdG8gaW5pdGlhbGl6ZSBhIG5ldyBjb252ZXJ0ZXJcbiAgICogYW5kIHNwZWNpZnkgdGhlIGV4dGVuc2lvbnMgeW91IHdpc2ggdG8gdXNlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGV4dGVuc2lvblxuICAgKi9cbiAgdGhpcy5yZW1vdmVFeHRlbnNpb24gPSBmdW5jdGlvbiAoZXh0ZW5zaW9uKSB7XG4gICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHRlbnNpb24pKSB7XG4gICAgICBleHRlbnNpb24gPSBbZXh0ZW5zaW9uXTtcbiAgICB9XG4gICAgZm9yICh2YXIgYSA9IDA7IGEgPCBleHRlbnNpb24ubGVuZ3RoOyArK2EpIHtcbiAgICAgIHZhciBleHQgPSBleHRlbnNpb25bYV07XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhbmdFeHRlbnNpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChsYW5nRXh0ZW5zaW9uc1tpXSA9PT0gZXh0KSB7XG4gICAgICAgICAgbGFuZ0V4dGVuc2lvbnMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgb3V0cHV0TW9kaWZpZXJzLmxlbmd0aDsgKytpaSkge1xuICAgICAgICBpZiAob3V0cHV0TW9kaWZpZXJzW2lpXSA9PT0gZXh0KSB7XG4gICAgICAgICAgb3V0cHV0TW9kaWZpZXJzLnNwbGljZShpaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgZXh0ZW5zaW9uIG9mIFRISVMgY29udmVydGVyXG4gICAqIEByZXR1cm5zIHt7bGFuZ3VhZ2U6IEFycmF5LCBvdXRwdXQ6IEFycmF5fX1cbiAgICovXG4gIHRoaXMuZ2V0QWxsRXh0ZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGFuZ3VhZ2U6IGxhbmdFeHRlbnNpb25zLFxuICAgICAgb3V0cHV0OiBvdXRwdXRNb2RpZmllcnNcbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1ldGFkYXRhIG9mIHRoZSBwcmV2aW91c2x5IHBhcnNlZCBkb2N1bWVudFxuICAgKiBAcGFyYW0gcmF3XG4gICAqIEByZXR1cm5zIHtzdHJpbmd8e319XG4gICAqL1xuICB0aGlzLmdldE1ldGFkYXRhID0gZnVuY3Rpb24gKHJhdykge1xuICAgIGlmIChyYXcpIHtcbiAgICAgIHJldHVybiBtZXRhZGF0YS5yYXc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtZXRhZGF0YS5wYXJzZWQ7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1ldGFkYXRhIGZvcm1hdCBvZiB0aGUgcHJldmlvdXNseSBwYXJzZWQgZG9jdW1lbnRcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRoaXMuZ2V0TWV0YWRhdGFGb3JtYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1ldGFkYXRhLmZvcm1hdDtcbiAgfTtcblxuICAvKipcbiAgICogUHJpdmF0ZTogc2V0IGEgc2luZ2xlIGtleSwgdmFsdWUgbWV0YWRhdGEgcGFpclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgdGhpcy5fc2V0TWV0YWRhdGFQYWlyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBtZXRhZGF0YS5wYXJzZWRba2V5XSA9IHZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQcml2YXRlOiBzZXQgbWV0YWRhdGEgZm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXRcbiAgICovXG4gIHRoaXMuX3NldE1ldGFkYXRhRm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIG1ldGFkYXRhLmZvcm1hdCA9IGZvcm1hdDtcbiAgfTtcblxuICAvKipcbiAgICogUHJpdmF0ZTogc2V0IG1ldGFkYXRhIHJhdyB0ZXh0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSByYXdcbiAgICovXG4gIHRoaXMuX3NldE1ldGFkYXRhUmF3ID0gZnVuY3Rpb24gKHJhdykge1xuICAgIG1ldGFkYXRhLnJhdyA9IHJhdztcbiAgfTtcbn07XG4iLCAiLyoqXG4gKiBUdXJuIE1hcmtkb3duIGxpbmsgc2hvcnRjdXRzIGludG8gWEhUTUwgPGE+IHRhZ3MuXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignYW5jaG9ycycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdhbmNob3JzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHZhciB3cml0ZUFuY2hvclRhZyA9IGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBsaW5rVGV4dCwgbGlua0lkLCB1cmwsIG01LCBtNiwgdGl0bGUpIHtcbiAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKHRpdGxlKSkge1xuICAgICAgdGl0bGUgPSAnJztcbiAgICB9XG4gICAgbGlua0lkID0gbGlua0lkLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIGV4cGxpY2l0IGVtcHR5IHVybFxuICAgIGlmICh3aG9sZU1hdGNoLnNlYXJjaCgvXFwoPD9cXHMqPj8gPyhbJ1wiXS4qWydcIl0pP1xcKSQvbSkgPiAtMSkge1xuICAgICAgdXJsID0gJyc7XG4gICAgfSBlbHNlIGlmICghdXJsKSB7XG4gICAgICBpZiAoIWxpbmtJZCkge1xuICAgICAgICAvLyBsb3dlci1jYXNlIGFuZCB0dXJuIGVtYmVkZGVkIG5ld2xpbmVzIGludG8gc3BhY2VzXG4gICAgICAgIGxpbmtJZCA9IGxpbmtUZXh0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvID9cXG4vZywgJyAnKTtcbiAgICAgIH1cbiAgICAgIHVybCA9ICcjJyArIGxpbmtJZDtcblxuICAgICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZ2xvYmFscy5nVXJsc1tsaW5rSWRdKSkge1xuICAgICAgICB1cmwgPSBnbG9iYWxzLmdVcmxzW2xpbmtJZF07XG4gICAgICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGdsb2JhbHMuZ1RpdGxlc1tsaW5rSWRdKSkge1xuICAgICAgICAgIHRpdGxlID0gZ2xvYmFscy5nVGl0bGVzW2xpbmtJZF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB3aG9sZU1hdGNoO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vdXJsID0gc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnModXJsLCAnKl8nLCBmYWxzZSk7IC8vIHJlcGxhY2VkIGxpbmUgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZVxuICAgIHVybCA9IHVybC5yZXBsYWNlKHNob3dkb3duLmhlbHBlci5yZWdleGVzLmFzdGVyaXNrRGFzaEFuZENvbG9uLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcblxuICAgIHZhciByZXN1bHQgPSAnPGEgaHJlZj1cIicgKyB1cmwgKyAnXCInO1xuXG4gICAgaWYgKHRpdGxlICE9PSAnJyAmJiB0aXRsZSAhPT0gbnVsbCkge1xuICAgICAgdGl0bGUgPSB0aXRsZS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG4gICAgICAvL3RpdGxlID0gc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnModGl0bGUsICcqXycsIGZhbHNlKTsgLy8gcmVwbGFjZWQgbGluZSB0byBpbXByb3ZlIHBlcmZvcm1hbmNlXG4gICAgICB0aXRsZSA9IHRpdGxlLnJlcGxhY2Uoc2hvd2Rvd24uaGVscGVyLnJlZ2V4ZXMuYXN0ZXJpc2tEYXNoQW5kQ29sb24sIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuICAgICAgcmVzdWx0ICs9ICcgdGl0bGU9XCInICsgdGl0bGUgKyAnXCInO1xuICAgIH1cblxuICAgIC8vIG9wdGlvbkxpbmtzSW5OZXdXaW5kb3cgb25seSBhcHBsaWVzXG4gICAgLy8gdG8gZXh0ZXJuYWwgbGlua3MuIEhhc2ggbGlua3MgKCMpIG9wZW4gaW4gc2FtZSBwYWdlXG4gICAgaWYgKG9wdGlvbnMub3BlbkxpbmtzSW5OZXdXaW5kb3cgJiYgIS9eIy8udGVzdCh1cmwpKSB7XG4gICAgICAvLyBlc2NhcGVkIF9cbiAgICAgIHJlc3VsdCArPSAnIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCLCqEU5NUVibGFua1wiJztcbiAgICB9XG5cbiAgICByZXN1bHQgKz0gJz4nICsgbGlua1RleHQgKyAnPC9hPic7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIEZpcnN0LCBoYW5kbGUgcmVmZXJlbmNlLXN0eWxlIGxpbmtzOiBbbGluayB0ZXh0XSBbaWRdXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcWygoPzpcXFtbXlxcXV0qXXxbXlxcW1xcXV0pKildID8oPzpcXG4gKik/XFxbKC4qPyldKCkoKSgpKCkvZywgd3JpdGVBbmNob3JUYWcpO1xuXG4gIC8vIE5leHQsIGlubGluZS1zdHlsZSBsaW5rczogW2xpbmsgdGV4dF0odXJsIFwib3B0aW9uYWwgdGl0bGVcIilcbiAgLy8gY2FzZXMgd2l0aCBjcmF6eSB1cmxzIGxpa2UgLi9pbWFnZS9jYXQxKS5wbmdcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxbKCg/OlxcW1teXFxdXSpdfFteXFxbXFxdXSkqKV0oKVsgXFx0XSpcXChbIFxcdF0/PChbXj5dKik+KD86WyBcXHRdKigoW1wiJ10pKFteXCJdKj8pXFw1KSk/WyBcXHRdP1xcKS9nLFxuICAgIHdyaXRlQW5jaG9yVGFnKTtcblxuICAvLyBub3JtYWwgY2FzZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxbKCg/OlxcW1teXFxdXSpdfFteXFxbXFxdXSkqKV0oKVsgXFx0XSpcXChbIFxcdF0/PD8oW1xcU10rPyg/OlxcKFtcXFNdKj9cXClbXFxTXSo/KT8pPj8oPzpbIFxcdF0qKChbXCInXSkoW15cIl0qPylcXDUpKT9bIFxcdF0/XFwpL2csXG4gICAgd3JpdGVBbmNob3JUYWcpO1xuXG4gIC8vIGhhbmRsZSByZWZlcmVuY2Utc3R5bGUgc2hvcnRjdXRzOiBbbGluayB0ZXh0XVxuICAvLyBUaGVzZSBtdXN0IGNvbWUgbGFzdCBpbiBjYXNlIHlvdSd2ZSBhbHNvIGdvdCBbbGluayB0ZXN0XVsxXVxuICAvLyBvciBbbGluayB0ZXN0XSgvZm9vKVxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFsoW15cXFtcXF1dKyldKCkoKSgpKCkoKS9nLCB3cml0ZUFuY2hvclRhZyk7XG5cbiAgLy8gTGFzdGx5IGhhbmRsZSBHaXRodWJNZW50aW9ucyBpZiBvcHRpb24gaXMgZW5hYmxlZFxuICBpZiAob3B0aW9ucy5naE1lbnRpb25zKSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvKF58XFxzKShcXFxcKT8oQChbYS16XFxkXSsoPzpbYS16XFxkLi1dKz9bYS16XFxkXSspKikpL2dtaSwgZnVuY3Rpb24gKHdtLCBzdCwgZXNjYXBlLCBtZW50aW9ucywgdXNlcm5hbWUpIHtcbiAgICAgIGlmIChlc2NhcGUgPT09ICdcXFxcJykge1xuICAgICAgICByZXR1cm4gc3QgKyBtZW50aW9ucztcbiAgICAgIH1cblxuICAgICAgLy9jaGVjayBpZiBvcHRpb25zLmdoTWVudGlvbnNMaW5rIGlzIGEgc3RyaW5nXG4gICAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1N0cmluZyhvcHRpb25zLmdoTWVudGlvbnNMaW5rKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2doTWVudGlvbnNMaW5rIG9wdGlvbiBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICB9XG4gICAgICB2YXIgbG5rID0gb3B0aW9ucy5naE1lbnRpb25zTGluay5yZXBsYWNlKC9cXHt1fS9nLCB1c2VybmFtZSksXG4gICAgICAgICAgdGFyZ2V0ID0gJyc7XG4gICAgICBpZiAob3B0aW9ucy5vcGVuTGlua3NJbk5ld1dpbmRvdykge1xuICAgICAgICB0YXJnZXQgPSAnIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCLCqEU5NUVibGFua1wiJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdCArICc8YSBocmVmPVwiJyArIGxuayArICdcIicgKyB0YXJnZXQgKyAnPicgKyBtZW50aW9ucyArICc8L2E+JztcbiAgICB9KTtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2FuY2hvcnMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvLyB1cmwgYWxsb3dlZCBjaGFycyBbYS16XFxkXy5+Oi8/I1tdQCEkJicoKSorLDs9LV1cblxudmFyIHNpbXBsZVVSTFJlZ2V4ICA9IC8oWyp+X10rfFxcYikoKChodHRwcz98ZnRwfGRpY3QpOlxcL1xcL3x3d3dcXC4pW14nXCI+XFxzXSs/XFwuW14nXCI+XFxzXSs/KSgpKFxcMSk/KD89XFxzfCQpKD8hW1wiPD5dKS9naSxcbiAgICBzaW1wbGVVUkxSZWdleDIgPSAvKFsqfl9dK3xcXGIpKCgoaHR0cHM/fGZ0cHxkaWN0KTpcXC9cXC98d3d3XFwuKVteJ1wiPlxcc10rXFwuW14nXCI+XFxzXSs/KShbLiE/LCgpXFxbXFxdXSk/KFxcMSk/KD89XFxzfCQpKD8hW1wiPD5dKS9naSxcbiAgICBkZWxpbVVybFJlZ2V4ICAgPSAvKCk8KCgoaHR0cHM/fGZ0cHxkaWN0KTpcXC9cXC98d3d3XFwuKVteJ1wiPlxcc10rKSgpPigpL2dpLFxuICAgIHNpbXBsZU1haWxSZWdleCA9IC8oXnxcXHMpKD86bWFpbHRvOik/KFtBLVphLXowLTkhIyQlJicqKy0vPT9eX2B7fH1+Ll0rQFstYS16MC05XSsoXFwuWy1hLXowLTldKykqXFwuW2Etel0rKSg/PSR8XFxzKS9nbWksXG4gICAgZGVsaW1NYWlsUmVnZXggID0gLzwoKSg/Om1haWx0bzopPyhbLS5cXHddK0BbLWEtejAtOV0rKFxcLlstYS16MC05XSspKlxcLlthLXpdKyk+L2dpLFxuXG4gICAgcmVwbGFjZUxpbmsgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh3bSwgbGVhZGluZ01hZ2ljQ2hhcnMsIGxpbmssIG0yLCBtMywgdHJhaWxpbmdQdW5jdHVhdGlvbiwgdHJhaWxpbmdNYWdpY0NoYXJzKSB7XG4gICAgICAgIGxpbmsgPSBsaW5rLnJlcGxhY2Uoc2hvd2Rvd24uaGVscGVyLnJlZ2V4ZXMuYXN0ZXJpc2tEYXNoQW5kQ29sb24sIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuICAgICAgICB2YXIgbG5rVHh0ID0gbGluayxcbiAgICAgICAgICAgIGFwcGVuZCA9ICcnLFxuICAgICAgICAgICAgdGFyZ2V0ID0gJycsXG4gICAgICAgICAgICBsbWMgICAgPSBsZWFkaW5nTWFnaWNDaGFycyB8fCAnJyxcbiAgICAgICAgICAgIHRtYyAgICA9IHRyYWlsaW5nTWFnaWNDaGFycyB8fCAnJztcbiAgICAgICAgaWYgKC9ed3d3XFwuL2kudGVzdChsaW5rKSkge1xuICAgICAgICAgIGxpbmsgPSBsaW5rLnJlcGxhY2UoL153d3dcXC4vaSwgJ2h0dHA6Ly93d3cuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZXhjbHVkZVRyYWlsaW5nUHVuY3R1YXRpb25Gcm9tVVJMcyAmJiB0cmFpbGluZ1B1bmN0dWF0aW9uKSB7XG4gICAgICAgICAgYXBwZW5kID0gdHJhaWxpbmdQdW5jdHVhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5vcGVuTGlua3NJbk5ld1dpbmRvdykge1xuICAgICAgICAgIHRhcmdldCA9ICcgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIsKoRTk1RWJsYW5rXCInO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsbWMgKyAnPGEgaHJlZj1cIicgKyBsaW5rICsgJ1wiJyArIHRhcmdldCArICc+JyArIGxua1R4dCArICc8L2E+JyArIGFwcGVuZCArIHRtYztcbiAgICAgIH07XG4gICAgfSxcblxuICAgIHJlcGxhY2VNYWlsID0gZnVuY3Rpb24gKG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHJldHVybiBmdW5jdGlvbiAod2hvbGVNYXRjaCwgYiwgbWFpbCkge1xuICAgICAgICB2YXIgaHJlZiA9ICdtYWlsdG86JztcbiAgICAgICAgYiA9IGIgfHwgJyc7XG4gICAgICAgIG1haWwgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3VuZXNjYXBlU3BlY2lhbENoYXJzJykobWFpbCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICAgIGlmIChvcHRpb25zLmVuY29kZUVtYWlscykge1xuICAgICAgICAgIGhyZWYgPSBzaG93ZG93bi5oZWxwZXIuZW5jb2RlRW1haWxBZGRyZXNzKGhyZWYgKyBtYWlsKTtcbiAgICAgICAgICBtYWlsID0gc2hvd2Rvd24uaGVscGVyLmVuY29kZUVtYWlsQWRkcmVzcyhtYWlsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBocmVmID0gaHJlZiArIG1haWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGIgKyAnPGEgaHJlZj1cIicgKyBocmVmICsgJ1wiPicgKyBtYWlsICsgJzwvYT4nO1xuICAgICAgfTtcbiAgICB9O1xuXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2F1dG9MaW5rcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdhdXRvTGlua3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShkZWxpbVVybFJlZ2V4LCByZXBsYWNlTGluayhvcHRpb25zKSk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoZGVsaW1NYWlsUmVnZXgsIHJlcGxhY2VNYWlsKG9wdGlvbnMsIGdsb2JhbHMpKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdhdXRvTGlua3MuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICByZXR1cm4gdGV4dDtcbn0pO1xuXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3NpbXBsaWZpZWRBdXRvTGlua3MnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCFvcHRpb25zLnNpbXBsaWZpZWRBdXRvTGluaykge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnc2ltcGxpZmllZEF1dG9MaW5rcy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICBpZiAob3B0aW9ucy5leGNsdWRlVHJhaWxpbmdQdW5jdHVhdGlvbkZyb21VUkxzKSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZShzaW1wbGVVUkxSZWdleDIsIHJlcGxhY2VMaW5rKG9wdGlvbnMpKTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHNpbXBsZVVSTFJlZ2V4LCByZXBsYWNlTGluayhvcHRpb25zKSk7XG4gIH1cbiAgdGV4dCA9IHRleHQucmVwbGFjZShzaW1wbGVNYWlsUmVnZXgsIHJlcGxhY2VNYWlsKG9wdGlvbnMsIGdsb2JhbHMpKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdzaW1wbGlmaWVkQXV0b0xpbmtzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIFRoZXNlIGFyZSBhbGwgdGhlIHRyYW5zZm9ybWF0aW9ucyB0aGF0IGZvcm0gYmxvY2stbGV2ZWxcbiAqIHRhZ3MgbGlrZSBwYXJhZ3JhcGhzLCBoZWFkZXJzLCBhbmQgbGlzdCBpdGVtcy5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdibG9ja0dhbXV0JywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2Jsb2NrR2FtdXQuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gd2UgcGFyc2UgYmxvY2txdW90ZXMgZmlyc3Qgc28gdGhhdCB3ZSBjYW4gaGF2ZSBoZWFkaW5ncyBhbmQgaHJzXG4gIC8vIGluc2lkZSBibG9ja3F1b3Rlc1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdibG9ja1F1b3RlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoZWFkZXJzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gRG8gSG9yaXpvbnRhbCBSdWxlczpcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaG9yaXpvbnRhbFJ1bGUnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdsaXN0cycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdjb2RlQmxvY2tzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3RhYmxlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIFdlIGFscmVhZHkgcmFuIF9IYXNoSFRNTEJsb2NrcygpIGJlZm9yZSwgaW4gTWFya2Rvd24oKSwgYnV0IHRoYXRcbiAgLy8gd2FzIHRvIGVzY2FwZSByYXcgSFRNTCBpbiB0aGUgb3JpZ2luYWwgTWFya2Rvd24gc291cmNlLiBUaGlzIHRpbWUsXG4gIC8vIHdlJ3JlIGVzY2FwaW5nIHRoZSBtYXJrdXAgd2UndmUganVzdCBjcmVhdGVkLCBzbyB0aGF0IHdlIGRvbid0IHdyYXBcbiAgLy8gPHA+IHRhZ3MgYXJvdW5kIGJsb2NrLWxldmVsIHRhZ3MuXG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hIVE1MQmxvY2tzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3BhcmFncmFwaHMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdibG9ja0dhbXV0LmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ2Jsb2NrUXVvdGVzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2Jsb2NrUXVvdGVzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIGFkZCBhIGNvdXBsZSBleHRyYSBsaW5lcyBhZnRlciB0aGUgdGV4dCBhbmQgZW5kdGV4dCBtYXJrXG4gIHRleHQgPSB0ZXh0ICsgJ1xcblxcbic7XG5cbiAgdmFyIHJneCA9IC8oXiB7MCwzfT5bIFxcdF0/LitcXG4oLitcXG4pKlxcbiopKy9nbTtcblxuICBpZiAob3B0aW9ucy5zcGxpdEFkamFjZW50QmxvY2txdW90ZXMpIHtcbiAgICByZ3ggPSAvXiB7MCwzfT5bXFxzXFxTXSo/KD86XFxuXFxuKS9nbTtcbiAgfVxuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2Uocmd4LCBmdW5jdGlvbiAoYnEpIHtcbiAgICAvLyBhdHRhY2tsYWI6IGhhY2sgYXJvdW5kIEtvbnF1ZXJvciAzLjUuNCBidWc6XG4gICAgLy8gXCItLS0tLS0tLS0tYnVnXCIucmVwbGFjZSgvXi0vZyxcIlwiKSA9PSBcImJ1Z1wiXG4gICAgYnEgPSBicS5yZXBsYWNlKC9eWyBcXHRdKj5bIFxcdF0/L2dtLCAnJyk7IC8vIHRyaW0gb25lIGxldmVsIG9mIHF1b3RpbmdcblxuICAgIC8vIGF0dGFja2xhYjogY2xlYW4gdXAgaGFja1xuICAgIGJxID0gYnEucmVwbGFjZSgvwqgwL2csICcnKTtcblxuICAgIGJxID0gYnEucmVwbGFjZSgvXlsgXFx0XSskL2dtLCAnJyk7IC8vIHRyaW0gd2hpdGVzcGFjZS1vbmx5IGxpbmVzXG4gICAgYnEgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2dpdGh1YkNvZGVCbG9ja3MnKShicSwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgYnEgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2Jsb2NrR2FtdXQnKShicSwgb3B0aW9ucywgZ2xvYmFscyk7IC8vIHJlY3Vyc2VcblxuICAgIGJxID0gYnEucmVwbGFjZSgvKF58XFxuKS9nLCAnJDEgICcpO1xuICAgIC8vIFRoZXNlIGxlYWRpbmcgc3BhY2VzIHNjcmV3IHdpdGggPHByZT4gY29udGVudCwgc28gd2UgbmVlZCB0byBmaXggdGhhdDpcbiAgICBicSA9IGJxLnJlcGxhY2UoLyhcXHMqPHByZT5bXlxccl0rPzxcXC9wcmU+KS9nbSwgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xKSB7XG4gICAgICB2YXIgcHJlID0gbTE7XG4gICAgICAvLyBhdHRhY2tsYWI6IGhhY2sgYXJvdW5kIEtvbnF1ZXJvciAzLjUuNCBidWc6XG4gICAgICBwcmUgPSBwcmUucmVwbGFjZSgvXiAgL21nLCAnwqgwJyk7XG4gICAgICBwcmUgPSBwcmUucmVwbGFjZSgvwqgwL2csICcnKTtcbiAgICAgIHJldHVybiBwcmU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoQmxvY2snKSgnPGJsb2NrcXVvdGU+XFxuJyArIGJxICsgJ1xcbjwvYmxvY2txdW90ZT4nLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgfSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYmxvY2tRdW90ZXMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIFByb2Nlc3MgTWFya2Rvd24gYDxwcmU+PGNvZGU+YCBibG9ja3MuXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignY29kZUJsb2NrcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdjb2RlQmxvY2tzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIHNlbnRpbmVsIHdvcmthcm91bmRzIGZvciBsYWNrIG9mIFxcQSBhbmQgXFxaLCBzYWZhcmlcXGtodG1sIGJ1Z1xuICB0ZXh0ICs9ICfCqDAnO1xuXG4gIHZhciBwYXR0ZXJuID0gLyg/OlxcblxcbnxeKSgoPzooPzpbIF17NH18XFx0KS4qXFxuKykrKShcXG4qWyBdezAsM31bXiBcXHRcXG5dfCg/PcKoMCkpL2c7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UocGF0dGVybiwgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xLCBtMikge1xuICAgIHZhciBjb2RlYmxvY2sgPSBtMSxcbiAgICAgICAgbmV4dENoYXIgPSBtMixcbiAgICAgICAgZW5kID0gJ1xcbic7XG5cbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ291dGRlbnQnKShjb2RlYmxvY2ssIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIGNvZGVibG9jayA9IHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQ29kZScpKGNvZGVibG9jaywgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgY29kZWJsb2NrID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdkZXRhYicpKGNvZGVibG9jaywgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgY29kZWJsb2NrID0gY29kZWJsb2NrLnJlcGxhY2UoL15cXG4rL2csICcnKTsgLy8gdHJpbSBsZWFkaW5nIG5ld2xpbmVzXG4gICAgY29kZWJsb2NrID0gY29kZWJsb2NrLnJlcGxhY2UoL1xcbiskL2csICcnKTsgLy8gdHJpbSB0cmFpbGluZyBuZXdsaW5lc1xuXG4gICAgaWYgKG9wdGlvbnMub21pdEV4dHJhV0xJbkNvZGVCbG9ja3MpIHtcbiAgICAgIGVuZCA9ICcnO1xuICAgIH1cblxuICAgIGNvZGVibG9jayA9ICc8cHJlPjxjb2RlPicgKyBjb2RlYmxvY2sgKyBlbmQgKyAnPC9jb2RlPjwvcHJlPic7XG5cbiAgICByZXR1cm4gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoQmxvY2snKShjb2RlYmxvY2ssIG9wdGlvbnMsIGdsb2JhbHMpICsgbmV4dENoYXI7XG4gIH0pO1xuXG4gIC8vIHN0cmlwIHNlbnRpbmVsXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoMC8sICcnKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdjb2RlQmxvY2tzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKlxuICogICAqICBCYWNrdGljayBxdW90ZXMgYXJlIHVzZWQgZm9yIDxjb2RlPjwvY29kZT4gc3BhbnMuXG4gKlxuICogICAqICBZb3UgY2FuIHVzZSBtdWx0aXBsZSBiYWNrdGlja3MgYXMgdGhlIGRlbGltaXRlcnMgaWYgeW91IHdhbnQgdG9cbiAqICAgICBpbmNsdWRlIGxpdGVyYWwgYmFja3RpY2tzIGluIHRoZSBjb2RlIHNwYW4uIFNvLCB0aGlzIGlucHV0OlxuICpcbiAqICAgICAgICAgSnVzdCB0eXBlIGBgZm9vIGBiYXJgIGJhemBgIGF0IHRoZSBwcm9tcHQuXG4gKlxuICogICAgICAgV2lsbCB0cmFuc2xhdGUgdG86XG4gKlxuICogICAgICAgICA8cD5KdXN0IHR5cGUgPGNvZGU+Zm9vIGBiYXJgIGJhejwvY29kZT4gYXQgdGhlIHByb21wdC48L3A+XG4gKlxuICogICAgVGhlcmUncyBubyBhcmJpdHJhcnkgbGltaXQgdG8gdGhlIG51bWJlciBvZiBiYWNrdGlja3MgeW91XG4gKiAgICBjYW4gdXNlIGFzIGRlbGltdGVycy4gSWYgeW91IG5lZWQgdGhyZWUgY29uc2VjdXRpdmUgYmFja3RpY2tzXG4gKiAgICBpbiB5b3VyIGNvZGUsIHVzZSBmb3VyIGZvciBkZWxpbWl0ZXJzLCBldGMuXG4gKlxuICogICogIFlvdSBjYW4gdXNlIHNwYWNlcyB0byBnZXQgbGl0ZXJhbCBiYWNrdGlja3MgYXQgdGhlIGVkZ2VzOlxuICpcbiAqICAgICAgICAgLi4uIHR5cGUgYGAgYGJhcmAgYGAgLi4uXG4gKlxuICogICAgICAgVHVybnMgdG86XG4gKlxuICogICAgICAgICAuLi4gdHlwZSA8Y29kZT5gYmFyYDwvY29kZT4gLi4uXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignY29kZVNwYW5zJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2NvZGVTcGFucy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICBpZiAodHlwZW9mICh0ZXh0KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0ZXh0ID0gJyc7XG4gIH1cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKF58W15cXFxcXSkoYCspKFteXFxyXSo/W15gXSlcXDIoPyFgKS9nbSxcbiAgICBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIG0yLCBtMykge1xuICAgICAgdmFyIGMgPSBtMztcbiAgICAgIGMgPSBjLnJlcGxhY2UoL14oWyBcXHRdKikvZywgJycpO1x0Ly8gbGVhZGluZyB3aGl0ZXNwYWNlXG4gICAgICBjID0gYy5yZXBsYWNlKC9bIFxcdF0qJC9nLCAnJyk7XHQvLyB0cmFpbGluZyB3aGl0ZXNwYWNlXG4gICAgICBjID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykoYywgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICBjID0gbTEgKyAnPGNvZGU+JyArIGMgKyAnPC9jb2RlPic7XG4gICAgICBjID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTFNwYW5zJykoYywgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICByZXR1cm4gYztcbiAgICB9XG4gICk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnY29kZVNwYW5zLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBDcmVhdGUgYSBmdWxsIEhUTUwgZG9jdW1lbnQgZnJvbSB0aGUgcHJvY2Vzc2VkIG1hcmtkb3duXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignY29tcGxldGVIVE1MRG9jdW1lbnQnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCFvcHRpb25zLmNvbXBsZXRlSFRNTERvY3VtZW50KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdjb21wbGV0ZUhUTUxEb2N1bWVudC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB2YXIgZG9jdHlwZSA9ICdodG1sJyxcbiAgICAgIGRvY3R5cGVQYXJzZWQgPSAnPCFET0NUWVBFIEhUTUw+XFxuJyxcbiAgICAgIHRpdGxlID0gJycsXG4gICAgICBjaGFyc2V0ID0gJzxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiPlxcbicsXG4gICAgICBsYW5nID0gJycsXG4gICAgICBtZXRhZGF0YSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWQuZG9jdHlwZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkb2N0eXBlUGFyc2VkID0gJzwhRE9DVFlQRSAnICsgIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkLmRvY3R5cGUgKyAnPlxcbic7XG4gICAgZG9jdHlwZSA9IGdsb2JhbHMubWV0YWRhdGEucGFyc2VkLmRvY3R5cGUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChkb2N0eXBlID09PSAnaHRtbCcgfHwgZG9jdHlwZSA9PT0gJ2h0bWw1Jykge1xuICAgICAgY2hhcnNldCA9ICc8bWV0YSBjaGFyc2V0PVwidXRmLThcIj4nO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIG1ldGEgaW4gZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWQpIHtcbiAgICBpZiAoZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWQuaGFzT3duUHJvcGVydHkobWV0YSkpIHtcbiAgICAgIHN3aXRjaCAobWV0YS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgJ2RvY3R5cGUnOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3RpdGxlJzpcbiAgICAgICAgICB0aXRsZSA9ICc8dGl0bGU+JyArICBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZC50aXRsZSArICc8L3RpdGxlPlxcbic7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnY2hhcnNldCc6XG4gICAgICAgICAgaWYgKGRvY3R5cGUgPT09ICdodG1sJyB8fCBkb2N0eXBlID09PSAnaHRtbDUnKSB7XG4gICAgICAgICAgICBjaGFyc2V0ID0gJzxtZXRhIGNoYXJzZXQ9XCInICsgZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWQuY2hhcnNldCArICdcIj5cXG4nO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGFyc2V0ID0gJzxtZXRhIG5hbWU9XCJjaGFyc2V0XCIgY29udGVudD1cIicgKyBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZC5jaGFyc2V0ICsgJ1wiPlxcbic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2xhbmd1YWdlJzpcbiAgICAgICAgY2FzZSAnbGFuZyc6XG4gICAgICAgICAgbGFuZyA9ICcgbGFuZz1cIicgKyBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZFttZXRhXSArICdcIic7XG4gICAgICAgICAgbWV0YWRhdGEgKz0gJzxtZXRhIG5hbWU9XCInICsgbWV0YSArICdcIiBjb250ZW50PVwiJyArIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkW21ldGFdICsgJ1wiPlxcbic7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBtZXRhZGF0YSArPSAnPG1ldGEgbmFtZT1cIicgKyBtZXRhICsgJ1wiIGNvbnRlbnQ9XCInICsgZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWRbbWV0YV0gKyAnXCI+XFxuJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0ZXh0ID0gZG9jdHlwZVBhcnNlZCArICc8aHRtbCcgKyBsYW5nICsgJz5cXG48aGVhZD5cXG4nICsgdGl0bGUgKyBjaGFyc2V0ICsgbWV0YWRhdGEgKyAnPC9oZWFkPlxcbjxib2R5PlxcbicgKyB0ZXh0LnRyaW0oKSArICdcXG48L2JvZHk+XFxuPC9odG1sPic7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnY29tcGxldGVIVE1MRG9jdW1lbnQuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIENvbnZlcnQgYWxsIHRhYnMgdG8gc3BhY2VzXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignZGV0YWInLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2RldGFiLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIGV4cGFuZCBmaXJzdCBuLTEgdGFic1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHQoPz1cXHQpL2csICcgICAgJyk7IC8vIGdfdGFiX3dpZHRoXG5cbiAgLy8gcmVwbGFjZSB0aGUgbnRoIHdpdGggdHdvIHNlbnRpbmVsc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHQvZywgJ8KoQcKoQicpO1xuXG4gIC8vIHVzZSB0aGUgc2VudGluZWwgdG8gYW5jaG9yIG91ciByZWdleCBzbyBpdCBkb2Vzbid0IGV4cGxvZGVcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqhCKC4rPynCqEEvZywgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xKSB7XG4gICAgdmFyIGxlYWRpbmdUZXh0ID0gbTEsXG4gICAgICAgIG51bVNwYWNlcyA9IDQgLSBsZWFkaW5nVGV4dC5sZW5ndGggJSA0OyAgLy8gZ190YWJfd2lkdGhcblxuICAgIC8vIHRoZXJlICptdXN0KiBiZSBhIGJldHRlciB3YXkgdG8gZG8gdGhpczpcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVNwYWNlczsgaSsrKSB7XG4gICAgICBsZWFkaW5nVGV4dCArPSAnICc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxlYWRpbmdUZXh0O1xuICB9KTtcblxuICAvLyBjbGVhbiB1cCBzZW50aW5lbHNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqhBL2csICcgICAgJyk7ICAvLyBnX3RhYl93aWR0aFxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqEIvZywgJycpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2RldGFiLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdlbGxpcHNpcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIW9wdGlvbnMuZWxsaXBzaXMpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VsbGlwc2lzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcLlxcLlxcLi9nLCAn4oCmJyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZWxsaXBzaXMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8qKlxuICogVHVybiBlbW9qaSBjb2RlcyBpbnRvIGVtb2ppc1xuICpcbiAqIExpc3Qgb2Ygc3VwcG9ydGVkIGVtb2ppczogaHR0cHM6Ly9naXRodWIuY29tL3Nob3dkb3duanMvc2hvd2Rvd24vd2lraS9FbW9qaXNcbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdlbW9qaScsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIW9wdGlvbnMuZW1vamkpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2Vtb2ppLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHZhciBlbW9qaVJneCA9IC86KFtcXFNdKz8pOi9nO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoZW1vamlSZ3gsIGZ1bmN0aW9uICh3bSwgZW1vamlDb2RlKSB7XG4gICAgaWYgKHNob3dkb3duLmhlbHBlci5lbW9qaXMuaGFzT3duUHJvcGVydHkoZW1vamlDb2RlKSkge1xuICAgICAgcmV0dXJuIHNob3dkb3duLmhlbHBlci5lbW9qaXNbZW1vamlDb2RlXTtcbiAgICB9XG4gICAgcmV0dXJuIHdtO1xuICB9KTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlbW9qaS5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBTbWFydCBwcm9jZXNzaW5nIGZvciBhbXBlcnNhbmRzIGFuZCBhbmdsZSBicmFja2V0cyB0aGF0IG5lZWQgdG8gYmUgZW5jb2RlZC5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVBbXBzQW5kQW5nbGVzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlbmNvZGVBbXBzQW5kQW5nbGVzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIEFtcGVyc2FuZC1lbmNvZGluZyBiYXNlZCBlbnRpcmVseSBvbiBOYXQgSXJvbnMncyBBbXB1dGF0b3IgTVQgcGx1Z2luOlxuICAvLyBodHRwOi8vYnVtcHBvLm5ldC9wcm9qZWN0cy9hbXB1dGF0b3IvXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyYoPyEjP1t4WF0/KD86WzAtOWEtZkEtRl0rfFxcdyspOykvZywgJyZhbXA7Jyk7XG5cbiAgLy8gRW5jb2RlIG5ha2VkIDwnc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC88KD8hW2EtelxcLz8kIV0pL2dpLCAnJmx0OycpO1xuXG4gIC8vIEVuY29kZSA8XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzwvZywgJyZsdDsnKTtcblxuICAvLyBFbmNvZGUgPlxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZW5jb2RlQW1wc0FuZEFuZ2xlcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8qKlxuICogUmV0dXJucyB0aGUgc3RyaW5nLCB3aXRoIGFmdGVyIHByb2Nlc3NpbmcgdGhlIGZvbGxvd2luZyBiYWNrc2xhc2ggZXNjYXBlIHNlcXVlbmNlcy5cbiAqXG4gKiBhdHRhY2tsYWI6IFRoZSBwb2xpdGUgd2F5IHRvIGRvIHRoaXMgaXMgd2l0aCB0aGUgbmV3IGVzY2FwZUNoYXJhY3RlcnMoKSBmdW5jdGlvbjpcbiAqXG4gKiAgICB0ZXh0ID0gZXNjYXBlQ2hhcmFjdGVycyh0ZXh0LFwiXFxcXFwiLHRydWUpO1xuICogICAgdGV4dCA9IGVzY2FwZUNoYXJhY3RlcnModGV4dCxcImAqX3t9W10oKT4jKy0uIVwiLHRydWUpO1xuICpcbiAqIC4uLmJ1dCB3ZSdyZSBzaWRlc3RlcHBpbmcgaXRzIHVzZSBvZiB0aGUgKHNsb3cpIFJlZ0V4cCBjb25zdHJ1Y3RvclxuICogYXMgYW4gb3B0aW1pemF0aW9uIGZvciBGaXJlZm94LiAgVGhpcyBmdW5jdGlvbiBnZXRzIGNhbGxlZCBhIExPVC5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVCYWNrc2xhc2hFc2NhcGVzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlbmNvZGVCYWNrc2xhc2hFc2NhcGVzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcXFwoXFxcXCkvZywgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcXFwoW2AqX3t9XFxbXFxdKCk+IysuIX49fDotXSkvZywgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZW5jb2RlQmFja3NsYXNoRXNjYXBlcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8qKlxuICogRW5jb2RlL2VzY2FwZSBjZXJ0YWluIGNoYXJhY3RlcnMgaW5zaWRlIE1hcmtkb3duIGNvZGUgcnVucy5cbiAqIFRoZSBwb2ludCBpcyB0aGF0IGluIGNvZGUsIHRoZXNlIGNoYXJhY3RlcnMgYXJlIGxpdGVyYWxzLFxuICogYW5kIGxvc2UgdGhlaXIgc3BlY2lhbCBNYXJrZG93biBtZWFuaW5ncy5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VuY29kZUNvZGUuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gRW5jb2RlIGFsbCBhbXBlcnNhbmRzOyBIVE1MIGVudGl0aWVzIGFyZSBub3RcbiAgLy8gZW50aXRpZXMgd2l0aGluIGEgTWFya2Rvd24gY29kZSBzcGFuLlxuICB0ZXh0ID0gdGV4dFxuICAgIC5yZXBsYWNlKC8mL2csICcmYW1wOycpXG4gIC8vIERvIHRoZSBhbmdsZSBicmFja2V0IHNvbmcgYW5kIGRhbmNlOlxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gIC8vIE5vdywgZXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBhcmUgbWFnaWMgaW4gTWFya2Rvd246XG4gICAgLnJlcGxhY2UoLyhbKl97fVxcW1xcXVxcXFw9fi1dKS9nLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlbmNvZGVDb2RlLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBXaXRoaW4gdGFncyAtLSBtZWFuaW5nIGJldHdlZW4gPCBhbmQgPiAtLSBlbmNvZGUgW1xcIGAgKiBfIH4gPV0gc28gdGhleVxuICogZG9uJ3QgY29uZmxpY3Qgd2l0aCB0aGVpciB1c2UgaW4gTWFya2Rvd24gZm9yIGNvZGUsIGl0YWxpY3MgYW5kIHN0cm9uZy5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdlc2NhcGVTcGVjaWFsQ2hhcnNXaXRoaW5UYWdBdHRyaWJ1dGVzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlc2NhcGVTcGVjaWFsQ2hhcnNXaXRoaW5UYWdBdHRyaWJ1dGVzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIEJ1aWxkIGEgcmVnZXggdG8gZmluZCBIVE1MIHRhZ3MuXG4gIHZhciB0YWdzICAgICA9IC88XFwvP1thLXpcXGRfOi1dKyg/OltcXHNdK1tcXHNcXFNdKz8pPz4vZ2ksXG4gICAgICBjb21tZW50cyA9IC88ISgtLSg/Oig/OltePi1dfC1bXj5dKSg/OlteLV18LVteLV0pKiktLSk+L2dpO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UodGFncywgZnVuY3Rpb24gKHdob2xlTWF0Y2gpIHtcbiAgICByZXR1cm4gd2hvbGVNYXRjaFxuICAgICAgLnJlcGxhY2UoLyguKTxcXC8/Y29kZT4oPz0uKS9nLCAnJDFgJylcbiAgICAgIC5yZXBsYWNlKC8oW1xcXFxgKl9+PXxdKS9nLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcbiAgfSk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShjb21tZW50cywgZnVuY3Rpb24gKHdob2xlTWF0Y2gpIHtcbiAgICByZXR1cm4gd2hvbGVNYXRjaFxuICAgICAgLnJlcGxhY2UoLyhbXFxcXGAqX349fF0pL2csIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuICB9KTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlc2NhcGVTcGVjaWFsQ2hhcnNXaXRoaW5UYWdBdHRyaWJ1dGVzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBIYW5kbGUgZ2l0aHViIGNvZGVibG9ja3MgcHJpb3IgdG8gcnVubmluZyBIYXNoSFRNTCBzbyB0aGF0XG4gKiBIVE1MIGNvbnRhaW5lZCB3aXRoaW4gdGhlIGNvZGVibG9jayBnZXRzIGVzY2FwZWQgcHJvcGVybHlcbiAqIEV4YW1wbGU6XG4gKiBgYGBydWJ5XG4gKiAgICAgZGVmIGhlbGxvX3dvcmxkKHgpXG4gKiAgICAgICBwdXRzIFwiSGVsbG8sICN7eH1cIlxuICogICAgIGVuZFxuICogYGBgXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignZ2l0aHViQ29kZUJsb2NrcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBlYXJseSBleGl0IGlmIG9wdGlvbiBpcyBub3QgZW5hYmxlZFxuICBpZiAoIW9wdGlvbnMuZ2hDb2RlQmxvY2tzKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdnaXRodWJDb2RlQmxvY2tzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgKz0gJ8KoMCc7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKD86XnxcXG4pKD86IHswLDN9KShgYGArfH5+fispKD86ICopKFteXFxzYH5dKilcXG4oW1xcc1xcU10qPylcXG4oPzogezAsM30pXFwxL2csIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBkZWxpbSwgbGFuZ3VhZ2UsIGNvZGVibG9jaykge1xuICAgIHZhciBlbmQgPSAob3B0aW9ucy5vbWl0RXh0cmFXTEluQ29kZUJsb2NrcykgPyAnJyA6ICdcXG4nO1xuXG4gICAgLy8gRmlyc3QgcGFyc2UgdGhlIGdpdGh1YiBjb2RlIGJsb2NrXG4gICAgY29kZWJsb2NrID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2RldGFiJykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICBjb2RlYmxvY2sgPSBjb2RlYmxvY2sucmVwbGFjZSgvXlxcbisvZywgJycpOyAvLyB0cmltIGxlYWRpbmcgbmV3bGluZXNcbiAgICBjb2RlYmxvY2sgPSBjb2RlYmxvY2sucmVwbGFjZSgvXFxuKyQvZywgJycpOyAvLyB0cmltIHRyYWlsaW5nIHdoaXRlc3BhY2VcblxuICAgIGNvZGVibG9jayA9ICc8cHJlPjxjb2RlJyArIChsYW5ndWFnZSA/ICcgY2xhc3M9XCInICsgbGFuZ3VhZ2UgKyAnIGxhbmd1YWdlLScgKyBsYW5ndWFnZSArICdcIicgOiAnJykgKyAnPicgKyBjb2RlYmxvY2sgKyBlbmQgKyAnPC9jb2RlPjwvcHJlPic7XG5cbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKGNvZGVibG9jaywgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgICAvLyBTaW5jZSBHSENvZGVibG9ja3MgY2FuIGJlIGZhbHNlIHBvc2l0aXZlcywgd2UgbmVlZCB0b1xuICAgIC8vIHN0b3JlIHRoZSBwcmltaXRpdmUgdGV4dCBhbmQgdGhlIHBhcnNlZCB0ZXh0IGluIGEgZ2xvYmFsIHZhcixcbiAgICAvLyBhbmQgdGhlbiByZXR1cm4gYSB0b2tlblxuICAgIHJldHVybiAnXFxuXFxuwqhHJyArIChnbG9iYWxzLmdoQ29kZUJsb2Nrcy5wdXNoKHt0ZXh0OiB3aG9sZU1hdGNoLCBjb2RlYmxvY2s6IGNvZGVibG9ja30pIC0gMSkgKyAnR1xcblxcbic7XG4gIH0pO1xuXG4gIC8vIGF0dGFja2xhYjogc3RyaXAgc2VudGluZWxcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqgwLywgJycpO1xuXG4gIHJldHVybiBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2dpdGh1YkNvZGVCbG9ja3MuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdoYXNoQmxvY2suYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyheXFxuK3xcXG4rJCkvZywgJycpO1xuICB0ZXh0ID0gJ1xcblxcbsKoSycgKyAoZ2xvYmFscy5nSHRtbEJsb2Nrcy5wdXNoKHRleHQpIC0gMSkgKyAnS1xcblxcbic7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hCbG9jay5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8qKlxuICogSGFzaCBhbmQgZXNjYXBlIDxjb2RlPiBlbGVtZW50cyB0aGF0IHNob3VsZCBub3QgYmUgcGFyc2VkIGFzIG1hcmtkb3duXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignaGFzaENvZGVUYWdzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdoYXNoQ29kZVRhZ3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIHJlcEZ1bmMgPSBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbWF0Y2gsIGxlZnQsIHJpZ2h0KSB7XG4gICAgdmFyIGNvZGVibG9jayA9IGxlZnQgKyBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnKShtYXRjaCwgb3B0aW9ucywgZ2xvYmFscykgKyByaWdodDtcbiAgICByZXR1cm4gJ8KoQycgKyAoZ2xvYmFscy5nSHRtbFNwYW5zLnB1c2goY29kZWJsb2NrKSAtIDEpICsgJ0MnO1xuICB9O1xuXG4gIC8vIEhhc2ggbmFrZWQgPGNvZGU+XG4gIHRleHQgPSBzaG93ZG93bi5oZWxwZXIucmVwbGFjZVJlY3Vyc2l2ZVJlZ0V4cCh0ZXh0LCByZXBGdW5jLCAnPGNvZGVcXFxcYltePl0qPicsICc8L2NvZGU+JywgJ2dpbScpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hDb2RlVGFncy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignaGFzaEVsZW1lbnQnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSkge1xuICAgIHZhciBibG9ja1RleHQgPSBtMTtcblxuICAgIC8vIFVuZG8gZG91YmxlIGxpbmVzXG4gICAgYmxvY2tUZXh0ID0gYmxvY2tUZXh0LnJlcGxhY2UoL1xcblxcbi9nLCAnXFxuJyk7XG4gICAgYmxvY2tUZXh0ID0gYmxvY2tUZXh0LnJlcGxhY2UoL15cXG4vLCAnJyk7XG5cbiAgICAvLyBzdHJpcCB0cmFpbGluZyBibGFuayBsaW5lc1xuICAgIGJsb2NrVGV4dCA9IGJsb2NrVGV4dC5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7XG5cbiAgICAvLyBSZXBsYWNlIHRoZSBlbGVtZW50IHRleHQgd2l0aCBhIG1hcmtlciAoXCLCqEt4S1wiIHdoZXJlIHggaXMgaXRzIGtleSlcbiAgICBibG9ja1RleHQgPSAnXFxuXFxuwqhLJyArIChnbG9iYWxzLmdIdG1sQmxvY2tzLnB1c2goYmxvY2tUZXh0KSAtIDEpICsgJ0tcXG5cXG4nO1xuXG4gICAgcmV0dXJuIGJsb2NrVGV4dDtcbiAgfTtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignaGFzaEhUTUxCbG9ja3MnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hIVE1MQmxvY2tzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHZhciBibG9ja1RhZ3MgPSBbXG4gICAgICAgICdwcmUnLFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgJ2gxJyxcbiAgICAgICAgJ2gyJyxcbiAgICAgICAgJ2gzJyxcbiAgICAgICAgJ2g0JyxcbiAgICAgICAgJ2g1JyxcbiAgICAgICAgJ2g2JyxcbiAgICAgICAgJ2Jsb2NrcXVvdGUnLFxuICAgICAgICAndGFibGUnLFxuICAgICAgICAnZGwnLFxuICAgICAgICAnb2wnLFxuICAgICAgICAndWwnLFxuICAgICAgICAnc2NyaXB0JyxcbiAgICAgICAgJ25vc2NyaXB0JyxcbiAgICAgICAgJ2Zvcm0nLFxuICAgICAgICAnZmllbGRzZXQnLFxuICAgICAgICAnaWZyYW1lJyxcbiAgICAgICAgJ21hdGgnLFxuICAgICAgICAnc3R5bGUnLFxuICAgICAgICAnc2VjdGlvbicsXG4gICAgICAgICdoZWFkZXInLFxuICAgICAgICAnZm9vdGVyJyxcbiAgICAgICAgJ25hdicsXG4gICAgICAgICdhcnRpY2xlJyxcbiAgICAgICAgJ2FzaWRlJyxcbiAgICAgICAgJ2FkZHJlc3MnLFxuICAgICAgICAnYXVkaW8nLFxuICAgICAgICAnY2FudmFzJyxcbiAgICAgICAgJ2ZpZ3VyZScsXG4gICAgICAgICdoZ3JvdXAnLFxuICAgICAgICAnb3V0cHV0JyxcbiAgICAgICAgJ3ZpZGVvJyxcbiAgICAgICAgJ3AnXG4gICAgICBdLFxuICAgICAgcmVwRnVuYyA9IGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtYXRjaCwgbGVmdCwgcmlnaHQpIHtcbiAgICAgICAgdmFyIHR4dCA9IHdob2xlTWF0Y2g7XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaHRtbCBlbGVtZW50IGlzIG1hcmtlZCBhcyBtYXJrZG93blxuICAgICAgICAvLyBpZiBzbywgaXQncyBjb250ZW50cyBzaG91bGQgYmUgcGFyc2VkIGFzIG1hcmtkb3duXG4gICAgICAgIGlmIChsZWZ0LnNlYXJjaCgvXFxibWFya2Rvd25cXGIvKSAhPT0gLTEpIHtcbiAgICAgICAgICB0eHQgPSBsZWZ0ICsgZ2xvYmFscy5jb252ZXJ0ZXIubWFrZUh0bWwobWF0Y2gpICsgcmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdcXG5cXG7CqEsnICsgKGdsb2JhbHMuZ0h0bWxCbG9ja3MucHVzaCh0eHQpIC0gMSkgKyAnS1xcblxcbic7XG4gICAgICB9O1xuXG4gIGlmIChvcHRpb25zLmJhY2tzbGFzaEVzY2FwZXNIVE1MVGFncykge1xuICAgIC8vIGVuY29kZSBiYWNrc2xhc2ggZXNjYXBlZCBIVE1MIHRhZ3NcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFxcPChcXC8/W14+XSs/KT4vZywgZnVuY3Rpb24gKHdtLCBpbnNpZGUpIHtcbiAgICAgIHJldHVybiAnJmx0OycgKyBpbnNpZGUgKyAnJmd0Oyc7XG4gICAgfSk7XG4gIH1cblxuICAvLyBoYXNoIEhUTUwgQmxvY2tzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tUYWdzLmxlbmd0aDsgKytpKSB7XG5cbiAgICB2YXIgb3BUYWdQb3MsXG4gICAgICAgIHJneDEgICAgID0gbmV3IFJlZ0V4cCgnXiB7MCwzfSg8JyArIGJsb2NrVGFnc1tpXSArICdcXFxcYltePl0qPiknLCAnaW0nKSxcbiAgICAgICAgcGF0TGVmdCAgPSAnPCcgKyBibG9ja1RhZ3NbaV0gKyAnXFxcXGJbXj5dKj4nLFxuICAgICAgICBwYXRSaWdodCA9ICc8LycgKyBibG9ja1RhZ3NbaV0gKyAnPic7XG4gICAgLy8gMS4gTG9vayBmb3IgdGhlIGZpcnN0IHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvcGVuaW5nIEhUTUwgdGFnIGluIHRoZSB0ZXh0XG4gICAgd2hpbGUgKChvcFRhZ1BvcyA9IHNob3dkb3duLmhlbHBlci5yZWdleEluZGV4T2YodGV4dCwgcmd4MSkpICE9PSAtMSkge1xuXG4gICAgICAvLyBpZiB0aGUgSFRNTCB0YWcgaXMgXFwgZXNjYXBlZCwgd2UgbmVlZCB0byBlc2NhcGUgaXQgYW5kIGJyZWFrXG5cblxuICAgICAgLy8yLiBTcGxpdCB0aGUgdGV4dCBpbiB0aGF0IHBvc2l0aW9uXG4gICAgICB2YXIgc3ViVGV4dHMgPSBzaG93ZG93bi5oZWxwZXIuc3BsaXRBdEluZGV4KHRleHQsIG9wVGFnUG9zKSxcbiAgICAgICAgICAvLzMuIE1hdGNoIHJlY3Vyc2l2ZWx5XG4gICAgICAgICAgbmV3U3ViVGV4dDEgPSBzaG93ZG93bi5oZWxwZXIucmVwbGFjZVJlY3Vyc2l2ZVJlZ0V4cChzdWJUZXh0c1sxXSwgcmVwRnVuYywgcGF0TGVmdCwgcGF0UmlnaHQsICdpbScpO1xuXG4gICAgICAvLyBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3BcbiAgICAgIGlmIChuZXdTdWJUZXh0MSA9PT0gc3ViVGV4dHNbMV0pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB0ZXh0ID0gc3ViVGV4dHNbMF0uY29uY2F0KG5ld1N1YlRleHQxKTtcbiAgICB9XG4gIH1cbiAgLy8gSFIgU1BFQ0lBTCBDQVNFXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyhcXG4gezAsM30oPChocilcXGIoW148Pl0pKj9cXC8/PilbIFxcdF0qKD89XFxuezIsfSkpL2csXG4gICAgc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoRWxlbWVudCcpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpKTtcblxuICAvLyBTcGVjaWFsIGNhc2UgZm9yIHN0YW5kYWxvbmUgSFRNTCBjb21tZW50c1xuICB0ZXh0ID0gc2hvd2Rvd24uaGVscGVyLnJlcGxhY2VSZWN1cnNpdmVSZWdFeHAodGV4dCwgZnVuY3Rpb24gKHR4dCkge1xuICAgIHJldHVybiAnXFxuXFxuwqhLJyArIChnbG9iYWxzLmdIdG1sQmxvY2tzLnB1c2godHh0KSAtIDEpICsgJ0tcXG5cXG4nO1xuICB9LCAnXiB7MCwzfTwhLS0nLCAnLS0+JywgJ2dtJyk7XG5cbiAgLy8gUEhQIGFuZCBBU1Atc3R5bGUgcHJvY2Vzc29yIGluc3RydWN0aW9ucyAoPD8uLi4/PiBhbmQgPCUuLi4lPilcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKD86XFxuXFxuKSggezAsM30oPzo8KFs/JV0pW15cXHJdKj9cXDI+KVsgXFx0XSooPz1cXG57Mix9KSkvZyxcbiAgICBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hFbGVtZW50JykodGV4dCwgb3B0aW9ucywgZ2xvYmFscykpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hIVE1MQmxvY2tzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBIYXNoIHNwYW4gZWxlbWVudHMgdGhhdCBzaG91bGQgbm90IGJlIHBhcnNlZCBhcyBtYXJrZG93blxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hIVE1MU3BhbnMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hIVE1MU3BhbnMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgZnVuY3Rpb24gaGFzaEhUTUxTcGFuIChodG1sKSB7XG4gICAgcmV0dXJuICfCqEMnICsgKGdsb2JhbHMuZ0h0bWxTcGFucy5wdXNoKGh0bWwpIC0gMSkgKyAnQyc7XG4gIH1cblxuICAvLyBIYXNoIFNlbGYgQ2xvc2luZyB0YWdzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzxbXj5dKz9cXC8+L2dpLCBmdW5jdGlvbiAod20pIHtcbiAgICByZXR1cm4gaGFzaEhUTUxTcGFuKHdtKTtcbiAgfSk7XG5cbiAgLy8gSGFzaCB0YWdzIHdpdGhvdXQgcHJvcGVydGllc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC88KFtePl0rPyk+W1xcc1xcU10qPzxcXC9cXDE+L2csIGZ1bmN0aW9uICh3bSkge1xuICAgIHJldHVybiBoYXNoSFRNTFNwYW4od20pO1xuICB9KTtcblxuICAvLyBIYXNoIHRhZ3Mgd2l0aCBwcm9wZXJ0aWVzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzwoW14+XSs/KVxcc1tePl0rPz5bXFxzXFxTXSo/PFxcL1xcMT4vZywgZnVuY3Rpb24gKHdtKSB7XG4gICAgcmV0dXJuIGhhc2hIVE1MU3Bhbih3bSk7XG4gIH0pO1xuXG4gIC8vIEhhc2ggc2VsZiBjbG9zaW5nIHRhZ3Mgd2l0aG91dCAvPlxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC88W14+XSs/Pi9naSwgZnVuY3Rpb24gKHdtKSB7XG4gICAgcmV0dXJuIGhhc2hIVE1MU3Bhbih3bSk7XG4gIH0pO1xuXG4gIC8qc2hvd2Rvd24uaGVscGVyLm1hdGNoUmVjdXJzaXZlUmVnRXhwKHRleHQsICc8Y29kZVxcXFxiW14+XSo+JywgJzwvY29kZT4nLCAnZ2knKTsqL1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hIVE1MU3BhbnMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcblxuLyoqXG4gKiBVbmhhc2ggSFRNTCBzcGFuc1xuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3VuaGFzaEhUTUxTcGFucycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndW5oYXNoSFRNTFNwYW5zLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZ2xvYmFscy5nSHRtbFNwYW5zLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHJlcFRleHQgPSBnbG9iYWxzLmdIdG1sU3BhbnNbaV0sXG4gICAgICAgIC8vIGxpbWl0ZXIgdG8gcHJldmVudCBpbmZpbml0ZSBsb29wIChhc3N1bWUgMTAgYXMgbGltaXQgZm9yIHJlY3Vyc2UpXG4gICAgICAgIGxpbWl0ID0gMDtcblxuICAgIHdoaWxlICgvwqhDKFxcZCspQy8udGVzdChyZXBUZXh0KSkge1xuICAgICAgdmFyIG51bSA9IFJlZ0V4cC4kMTtcbiAgICAgIHJlcFRleHQgPSByZXBUZXh0LnJlcGxhY2UoJ8KoQycgKyBudW0gKyAnQycsIGdsb2JhbHMuZ0h0bWxTcGFuc1tudW1dKTtcbiAgICAgIGlmIChsaW1pdCA9PT0gMTApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignbWF4aW11bSBuZXN0aW5nIG9mIDEwIHNwYW5zIHJlYWNoZWQhISEnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICArK2xpbWl0O1xuICAgIH1cbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCfCqEMnICsgaSArICdDJywgcmVwVGV4dCk7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCd1bmhhc2hIVE1MU3BhbnMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIEhhc2ggYW5kIGVzY2FwZSA8cHJlPjxjb2RlPiBlbGVtZW50cyB0aGF0IHNob3VsZCBub3QgYmUgcGFyc2VkIGFzIG1hcmtkb3duXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignaGFzaFByZUNvZGVUYWdzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdoYXNoUHJlQ29kZVRhZ3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIHJlcEZ1bmMgPSBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbWF0Y2gsIGxlZnQsIHJpZ2h0KSB7XG4gICAgLy8gZW5jb2RlIGh0bWwgZW50aXRpZXNcbiAgICB2YXIgY29kZWJsb2NrID0gbGVmdCArIHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQ29kZScpKG1hdGNoLCBvcHRpb25zLCBnbG9iYWxzKSArIHJpZ2h0O1xuICAgIHJldHVybiAnXFxuXFxuwqhHJyArIChnbG9iYWxzLmdoQ29kZUJsb2Nrcy5wdXNoKHt0ZXh0OiB3aG9sZU1hdGNoLCBjb2RlYmxvY2s6IGNvZGVibG9ja30pIC0gMSkgKyAnR1xcblxcbic7XG4gIH07XG5cbiAgLy8gSGFzaCA8cHJlPjxjb2RlPlxuICB0ZXh0ID0gc2hvd2Rvd24uaGVscGVyLnJlcGxhY2VSZWN1cnNpdmVSZWdFeHAodGV4dCwgcmVwRnVuYywgJ14gezAsM308cHJlXFxcXGJbXj5dKj5cXFxccyo8Y29kZVxcXFxiW14+XSo+JywgJ14gezAsM308L2NvZGU+XFxcXHMqPC9wcmU+JywgJ2dpbScpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hQcmVDb2RlVGFncy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignaGVhZGVycycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdoZWFkZXJzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHZhciBoZWFkZXJMZXZlbFN0YXJ0ID0gKGlzTmFOKHBhcnNlSW50KG9wdGlvbnMuaGVhZGVyTGV2ZWxTdGFydCkpKSA/IDEgOiBwYXJzZUludChvcHRpb25zLmhlYWRlckxldmVsU3RhcnQpLFxuXG4gICAgICAvLyBTZXQgdGV4dC1zdHlsZSBoZWFkZXJzOlxuICAgICAgLy9cdEhlYWRlciAxXG4gICAgICAvL1x0PT09PT09PT1cbiAgICAgIC8vXG4gICAgICAvL1x0SGVhZGVyIDJcbiAgICAgIC8vXHQtLS0tLS0tLVxuICAgICAgLy9cbiAgICAgIHNldGV4dFJlZ2V4SDEgPSAob3B0aW9ucy5zbW9vdGhMaXZlUHJldmlldykgPyAvXiguKylbIFxcdF0qXFxuPXsyLH1bIFxcdF0qXFxuKy9nbSA6IC9eKC4rKVsgXFx0XSpcXG49K1sgXFx0XSpcXG4rL2dtLFxuICAgICAgc2V0ZXh0UmVnZXhIMiA9IChvcHRpb25zLnNtb290aExpdmVQcmV2aWV3KSA/IC9eKC4rKVsgXFx0XSpcXG4tezIsfVsgXFx0XSpcXG4rL2dtIDogL14oLispWyBcXHRdKlxcbi0rWyBcXHRdKlxcbisvZ207XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShzZXRleHRSZWdleEgxLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEpIHtcblxuICAgIHZhciBzcGFuR2FtdXQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NwYW5HYW11dCcpKG0xLCBvcHRpb25zLCBnbG9iYWxzKSxcbiAgICAgICAgaElEID0gKG9wdGlvbnMubm9IZWFkZXJJZCkgPyAnJyA6ICcgaWQ9XCInICsgaGVhZGVySWQobTEpICsgJ1wiJyxcbiAgICAgICAgaExldmVsID0gaGVhZGVyTGV2ZWxTdGFydCxcbiAgICAgICAgaGFzaEJsb2NrID0gJzxoJyArIGhMZXZlbCArIGhJRCArICc+JyArIHNwYW5HYW11dCArICc8L2gnICsgaExldmVsICsgJz4nO1xuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKGhhc2hCbG9jaywgb3B0aW9ucywgZ2xvYmFscyk7XG4gIH0pO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2Uoc2V0ZXh0UmVnZXhIMiwgZnVuY3Rpb24gKG1hdGNoRm91bmQsIG0xKSB7XG4gICAgdmFyIHNwYW5HYW11dCA9IHNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JykobTEsIG9wdGlvbnMsIGdsb2JhbHMpLFxuICAgICAgICBoSUQgPSAob3B0aW9ucy5ub0hlYWRlcklkKSA/ICcnIDogJyBpZD1cIicgKyBoZWFkZXJJZChtMSkgKyAnXCInLFxuICAgICAgICBoTGV2ZWwgPSBoZWFkZXJMZXZlbFN0YXJ0ICsgMSxcbiAgICAgICAgaGFzaEJsb2NrID0gJzxoJyArIGhMZXZlbCArIGhJRCArICc+JyArIHNwYW5HYW11dCArICc8L2gnICsgaExldmVsICsgJz4nO1xuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKGhhc2hCbG9jaywgb3B0aW9ucywgZ2xvYmFscyk7XG4gIH0pO1xuXG4gIC8vIGF0eC1zdHlsZSBoZWFkZXJzOlxuICAvLyAgIyBIZWFkZXIgMVxuICAvLyAgIyMgSGVhZGVyIDJcbiAgLy8gICMjIEhlYWRlciAyIHdpdGggY2xvc2luZyBoYXNoZXMgIyNcbiAgLy8gIC4uLlxuICAvLyAgIyMjIyMjIEhlYWRlciA2XG4gIC8vXG4gIHZhciBhdHhTdHlsZSA9IChvcHRpb25zLnJlcXVpcmVTcGFjZUJlZm9yZUhlYWRpbmdUZXh0KSA/IC9eKCN7MSw2fSlbIFxcdF0rKC4rPylbIFxcdF0qIypcXG4rL2dtIDogL14oI3sxLDZ9KVsgXFx0XSooLis/KVsgXFx0XSojKlxcbisvZ207XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShhdHhTdHlsZSwgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xLCBtMikge1xuICAgIHZhciBoVGV4dCA9IG0yO1xuICAgIGlmIChvcHRpb25zLmN1c3RvbWl6ZWRIZWFkZXJJZCkge1xuICAgICAgaFRleHQgPSBtMi5yZXBsYWNlKC9cXHM/XFx7KFtee10rPyl9XFxzKiQvLCAnJyk7XG4gICAgfVxuXG4gICAgdmFyIHNwYW4gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NwYW5HYW11dCcpKGhUZXh0LCBvcHRpb25zLCBnbG9iYWxzKSxcbiAgICAgICAgaElEID0gKG9wdGlvbnMubm9IZWFkZXJJZCkgPyAnJyA6ICcgaWQ9XCInICsgaGVhZGVySWQobTIpICsgJ1wiJyxcbiAgICAgICAgaExldmVsID0gaGVhZGVyTGV2ZWxTdGFydCAtIDEgKyBtMS5sZW5ndGgsXG4gICAgICAgIGhlYWRlciA9ICc8aCcgKyBoTGV2ZWwgKyBoSUQgKyAnPicgKyBzcGFuICsgJzwvaCcgKyBoTGV2ZWwgKyAnPic7XG5cbiAgICByZXR1cm4gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoQmxvY2snKShoZWFkZXIsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB9KTtcblxuICBmdW5jdGlvbiBoZWFkZXJJZCAobSkge1xuICAgIHZhciB0aXRsZSxcbiAgICAgICAgcHJlZml4O1xuXG4gICAgLy8gSXQgaXMgc2VwYXJhdGUgZnJvbSBvdGhlciBvcHRpb25zIHRvIGFsbG93IGNvbWJpbmluZyBwcmVmaXggYW5kIGN1c3RvbWl6ZWRcbiAgICBpZiAob3B0aW9ucy5jdXN0b21pemVkSGVhZGVySWQpIHtcbiAgICAgIHZhciBtYXRjaCA9IG0ubWF0Y2goL1xceyhbXntdKz8pfVxccyokLyk7XG4gICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHtcbiAgICAgICAgbSA9IG1hdGNoWzFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRpdGxlID0gbTtcblxuICAgIC8vIFByZWZpeCBpZCB0byBwcmV2ZW50IGNhdXNpbmcgaW5hZHZlcnRlbnQgcHJlLWV4aXN0aW5nIHN0eWxlIG1hdGNoZXMuXG4gICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1N0cmluZyhvcHRpb25zLnByZWZpeEhlYWRlcklkKSkge1xuICAgICAgcHJlZml4ID0gb3B0aW9ucy5wcmVmaXhIZWFkZXJJZDtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucHJlZml4SGVhZGVySWQgPT09IHRydWUpIHtcbiAgICAgIHByZWZpeCA9ICdzZWN0aW9uLSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZWZpeCA9ICcnO1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucy5yYXdQcmVmaXhIZWFkZXJJZCkge1xuICAgICAgdGl0bGUgPSBwcmVmaXggKyB0aXRsZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5naENvbXBhdGlibGVIZWFkZXJJZCkge1xuICAgICAgdGl0bGUgPSB0aXRsZVxuICAgICAgICAucmVwbGFjZSgvIC9nLCAnLScpXG4gICAgICAgIC8vIHJlcGxhY2UgcHJldmlvdXNseSBlc2NhcGVkIGNoYXJzICgmLCDCqCBhbmQgJClcbiAgICAgICAgLnJlcGxhY2UoLyZhbXA7L2csICcnKVxuICAgICAgICAucmVwbGFjZSgvwqhUL2csICcnKVxuICAgICAgICAucmVwbGFjZSgvwqhEL2csICcnKVxuICAgICAgICAvLyByZXBsYWNlIHJlc3Qgb2YgdGhlIGNoYXJzICgmfiQgYXJlIHJlcGVhdGVkIGFzIHRoZXkgbWlnaHQgaGF2ZSBiZWVuIGVzY2FwZWQpXG4gICAgICAgIC8vIGJvcnJvd2VkIGZyb20gZ2l0aHViJ3MgcmVkY2FycGV0IChzb21lIHRoZXkgc2hvdWxkIHByb2R1Y2Ugc2ltaWxhciByZXN1bHRzKVxuICAgICAgICAucmVwbGFjZSgvWyYrJCxcXC86Oz0/QFwiI3t9fF7CqH5cXFtcXF1gXFxcXCopKCUuISc8Pl0vZywgJycpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5yYXdIZWFkZXJJZCkge1xuICAgICAgdGl0bGUgPSB0aXRsZVxuICAgICAgICAucmVwbGFjZSgvIC9nLCAnLScpXG4gICAgICAgIC8vIHJlcGxhY2UgcHJldmlvdXNseSBlc2NhcGVkIGNoYXJzICgmLCDCqCBhbmQgJClcbiAgICAgICAgLnJlcGxhY2UoLyZhbXA7L2csICcmJylcbiAgICAgICAgLnJlcGxhY2UoL8KoVC9nLCAnwqgnKVxuICAgICAgICAucmVwbGFjZSgvwqhEL2csICckJylcbiAgICAgICAgLy8gcmVwbGFjZSBcIiBhbmQgJ1xuICAgICAgICAucmVwbGFjZSgvW1wiJ10vZywgJy0nKVxuICAgICAgICAudG9Mb3dlckNhc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGUgPSB0aXRsZVxuICAgICAgICAucmVwbGFjZSgvW15cXHddL2csICcnKVxuICAgICAgICAudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5yYXdQcmVmaXhIZWFkZXJJZCkge1xuICAgICAgdGl0bGUgPSBwcmVmaXggKyB0aXRsZTtcbiAgICB9XG5cbiAgICBpZiAoZ2xvYmFscy5oYXNoTGlua0NvdW50c1t0aXRsZV0pIHtcbiAgICAgIHRpdGxlID0gdGl0bGUgKyAnLScgKyAoZ2xvYmFscy5oYXNoTGlua0NvdW50c1t0aXRsZV0rKyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsb2JhbHMuaGFzaExpbmtDb3VudHNbdGl0bGVdID0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHRpdGxlO1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGVhZGVycy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8qKlxuICogVHVybiBNYXJrZG93biBsaW5rIHNob3J0Y3V0cyBpbnRvIFhIVE1MIDxhPiB0YWdzLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2hvcml6b250YWxSdWxlJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdob3Jpem9udGFsUnVsZS5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB2YXIga2V5ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoQmxvY2snKSgnPGhyIC8+Jywgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL14gezAsMn0oID8tKXszLH1bIFxcdF0qJC9nbSwga2V5KTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXiB7MCwyfSggP1xcKil7Myx9WyBcXHRdKiQvZ20sIGtleSk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL14gezAsMn0oID9fKXszLH1bIFxcdF0qJC9nbSwga2V5KTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdob3Jpem9udGFsUnVsZS5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8qKlxuICogVHVybiBNYXJrZG93biBpbWFnZSBzaG9ydGN1dHMgaW50byA8aW1nPiB0YWdzLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2ltYWdlcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdpbWFnZXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIGlubGluZVJlZ0V4cCAgICAgID0gLyFcXFsoW15cXF1dKj8pXVsgXFx0XSooKVxcKFsgXFx0XT88PyhbXFxTXSs/KD86XFwoW1xcU10qP1xcKVtcXFNdKj8pPyk+Pyg/OiA9KFsqXFxkXStbQS1aYS16JV17MCw0fSl4KFsqXFxkXStbQS1aYS16JV17MCw0fSkpP1sgXFx0XSooPzooW1wiJ10pKFteXCJdKj8pXFw2KT9bIFxcdF0/XFwpL2csXG4gICAgICBjcmF6eVJlZ0V4cCAgICAgICA9IC8hXFxbKFteXFxdXSo/KV1bIFxcdF0qKClcXChbIFxcdF0/PChbXj5dKik+KD86ID0oWypcXGRdK1tBLVphLXolXXswLDR9KXgoWypcXGRdK1tBLVphLXolXXswLDR9KSk/WyBcXHRdKig/Oig/OihbXCInXSkoW15cIl0qPylcXDYpKT9bIFxcdF0/XFwpL2csXG4gICAgICBiYXNlNjRSZWdFeHAgICAgICA9IC8hXFxbKFteXFxdXSo/KV1bIFxcdF0qKClcXChbIFxcdF0/PD8oZGF0YTouKz9cXC8uKz87YmFzZTY0LFtBLVphLXowLTkrLz1cXG5dKz8pPj8oPzogPShbKlxcZF0rW0EtWmEteiVdezAsNH0peChbKlxcZF0rW0EtWmEteiVdezAsNH0pKT9bIFxcdF0qKD86KFtcIiddKShbXlwiXSo/KVxcNik/WyBcXHRdP1xcKS9nLFxuICAgICAgcmVmZXJlbmNlUmVnRXhwICAgPSAvIVxcWyhbXlxcXV0qPyldID8oPzpcXG4gKik/XFxbKFtcXHNcXFNdKj8pXSgpKCkoKSgpKCkvZyxcbiAgICAgIHJlZlNob3J0Y3V0UmVnRXhwID0gLyFcXFsoW15cXFtcXF1dKyldKCkoKSgpKCkoKS9nO1xuXG4gIGZ1bmN0aW9uIHdyaXRlSW1hZ2VUYWdCYXNlNjQgKHdob2xlTWF0Y2gsIGFsdFRleHQsIGxpbmtJZCwgdXJsLCB3aWR0aCwgaGVpZ2h0LCBtNSwgdGl0bGUpIHtcbiAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFxzL2csICcnKTtcbiAgICByZXR1cm4gd3JpdGVJbWFnZVRhZyAod2hvbGVNYXRjaCwgYWx0VGV4dCwgbGlua0lkLCB1cmwsIHdpZHRoLCBoZWlnaHQsIG01LCB0aXRsZSk7XG4gIH1cblxuICBmdW5jdGlvbiB3cml0ZUltYWdlVGFnICh3aG9sZU1hdGNoLCBhbHRUZXh0LCBsaW5rSWQsIHVybCwgd2lkdGgsIGhlaWdodCwgbTUsIHRpdGxlKSB7XG5cbiAgICB2YXIgZ1VybHMgICA9IGdsb2JhbHMuZ1VybHMsXG4gICAgICAgIGdUaXRsZXMgPSBnbG9iYWxzLmdUaXRsZXMsXG4gICAgICAgIGdEaW1zICAgPSBnbG9iYWxzLmdEaW1lbnNpb25zO1xuXG4gICAgbGlua0lkID0gbGlua0lkLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAoIXRpdGxlKSB7XG4gICAgICB0aXRsZSA9ICcnO1xuICAgIH1cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIGV4cGxpY2l0IGVtcHR5IHVybFxuICAgIGlmICh3aG9sZU1hdGNoLnNlYXJjaCgvXFwoPD9cXHMqPj8gPyhbJ1wiXS4qWydcIl0pP1xcKSQvbSkgPiAtMSkge1xuICAgICAgdXJsID0gJyc7XG5cbiAgICB9IGVsc2UgaWYgKHVybCA9PT0gJycgfHwgdXJsID09PSBudWxsKSB7XG4gICAgICBpZiAobGlua0lkID09PSAnJyB8fCBsaW5rSWQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gbG93ZXItY2FzZSBhbmQgdHVybiBlbWJlZGRlZCBuZXdsaW5lcyBpbnRvIHNwYWNlc1xuICAgICAgICBsaW5rSWQgPSBhbHRUZXh0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvID9cXG4vZywgJyAnKTtcbiAgICAgIH1cbiAgICAgIHVybCA9ICcjJyArIGxpbmtJZDtcblxuICAgICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZ1VybHNbbGlua0lkXSkpIHtcbiAgICAgICAgdXJsID0gZ1VybHNbbGlua0lkXTtcbiAgICAgICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZ1RpdGxlc1tsaW5rSWRdKSkge1xuICAgICAgICAgIHRpdGxlID0gZ1RpdGxlc1tsaW5rSWRdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGdEaW1zW2xpbmtJZF0pKSB7XG4gICAgICAgICAgd2lkdGggPSBnRGltc1tsaW5rSWRdLndpZHRoO1xuICAgICAgICAgIGhlaWdodCA9IGdEaW1zW2xpbmtJZF0uaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gd2hvbGVNYXRjaDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhbHRUZXh0ID0gYWx0VGV4dFxuICAgICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKVxuICAgIC8vYWx0VGV4dCA9IHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzKGFsdFRleHQsICcqXycsIGZhbHNlKTtcbiAgICAgIC5yZXBsYWNlKHNob3dkb3duLmhlbHBlci5yZWdleGVzLmFzdGVyaXNrRGFzaEFuZENvbG9uLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcbiAgICAvL3VybCA9IHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzKHVybCwgJypfJywgZmFsc2UpO1xuICAgIHVybCA9IHVybC5yZXBsYWNlKHNob3dkb3duLmhlbHBlci5yZWdleGVzLmFzdGVyaXNrRGFzaEFuZENvbG9uLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcbiAgICB2YXIgcmVzdWx0ID0gJzxpbWcgc3JjPVwiJyArIHVybCArICdcIiBhbHQ9XCInICsgYWx0VGV4dCArICdcIic7XG5cbiAgICBpZiAodGl0bGUgJiYgc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKHRpdGxlKSkge1xuICAgICAgdGl0bGUgPSB0aXRsZVxuICAgICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXG4gICAgICAvL3RpdGxlID0gc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnModGl0bGUsICcqXycsIGZhbHNlKTtcbiAgICAgICAgLnJlcGxhY2Uoc2hvd2Rvd24uaGVscGVyLnJlZ2V4ZXMuYXN0ZXJpc2tEYXNoQW5kQ29sb24sIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuICAgICAgcmVzdWx0ICs9ICcgdGl0bGU9XCInICsgdGl0bGUgKyAnXCInO1xuICAgIH1cblxuICAgIGlmICh3aWR0aCAmJiBoZWlnaHQpIHtcbiAgICAgIHdpZHRoICA9ICh3aWR0aCA9PT0gJyonKSA/ICdhdXRvJyA6IHdpZHRoO1xuICAgICAgaGVpZ2h0ID0gKGhlaWdodCA9PT0gJyonKSA/ICdhdXRvJyA6IGhlaWdodDtcblxuICAgICAgcmVzdWx0ICs9ICcgd2lkdGg9XCInICsgd2lkdGggKyAnXCInO1xuICAgICAgcmVzdWx0ICs9ICcgaGVpZ2h0PVwiJyArIGhlaWdodCArICdcIic7XG4gICAgfVxuXG4gICAgcmVzdWx0ICs9ICcgLz4nO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIEZpcnN0LCBoYW5kbGUgcmVmZXJlbmNlLXN0eWxlIGxhYmVsZWQgaW1hZ2VzOiAhW2FsdCB0ZXh0XVtpZF1cbiAgdGV4dCA9IHRleHQucmVwbGFjZShyZWZlcmVuY2VSZWdFeHAsIHdyaXRlSW1hZ2VUYWcpO1xuXG4gIC8vIE5leHQsIGhhbmRsZSBpbmxpbmUgaW1hZ2VzOiAgIVthbHQgdGV4dF0odXJsID08d2lkdGg+eDxoZWlnaHQ+IFwib3B0aW9uYWwgdGl0bGVcIilcblxuICAvLyBiYXNlNjQgZW5jb2RlZCBpbWFnZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZShiYXNlNjRSZWdFeHAsIHdyaXRlSW1hZ2VUYWdCYXNlNjQpO1xuXG4gIC8vIGNhc2VzIHdpdGggY3JhenkgdXJscyBsaWtlIC4vaW1hZ2UvY2F0MSkucG5nXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoY3JhenlSZWdFeHAsIHdyaXRlSW1hZ2VUYWcpO1xuXG4gIC8vIG5vcm1hbCBjYXNlc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGlubGluZVJlZ0V4cCwgd3JpdGVJbWFnZVRhZyk7XG5cbiAgLy8gaGFuZGxlIHJlZmVyZW5jZS1zdHlsZSBzaG9ydGN1dHM6ICFbaW1nIHRleHRdXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UocmVmU2hvcnRjdXRSZWdFeHAsIHdyaXRlSW1hZ2VUYWcpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2ltYWdlcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignaXRhbGljc0FuZEJvbGQnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaXRhbGljc0FuZEJvbGQuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gaXQncyBmYXN0ZXIgdG8gaGF2ZSAzIHNlcGFyYXRlIHJlZ2V4ZXMgZm9yIGVhY2ggY2FzZSB0aGFuIGhhdmUganVzdCBvbmVcbiAgLy8gYmVjYXVzZSBvZiBiYWNrdHJhY2luZywgaW4gc29tZSBjYXNlcywgaXQgY291bGQgbGVhZCB0byBhbiBleHBvbmVudGlhbCBlZmZlY3RcbiAgLy8gY2FsbGVkIFwiY2F0YXN0cm9waGljIGJhY2t0cmFjZVwiLiBPbWlub3VzIVxuXG4gIGZ1bmN0aW9uIHBhcnNlSW5zaWRlICh0eHQsIGxlZnQsIHJpZ2h0KSB7XG4gICAgLypcbiAgICBpZiAob3B0aW9ucy5zaW1wbGlmaWVkQXV0b0xpbmspIHtcbiAgICAgIHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignc2ltcGxpZmllZEF1dG9MaW5rcycpKHR4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgfVxuICAgICovXG4gICAgcmV0dXJuIGxlZnQgKyB0eHQgKyByaWdodDtcbiAgfVxuXG4gIC8vIFBhcnNlIHVuZGVyc2NvcmVzXG4gIGlmIChvcHRpb25zLmxpdGVyYWxNaWRXb3JkVW5kZXJzY29yZXMpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXGJfX18oXFxTW1xcc1xcU10qPylfX19cXGIvZywgZnVuY3Rpb24gKHdtLCB0eHQpIHtcbiAgICAgIHJldHVybiBwYXJzZUluc2lkZSAodHh0LCAnPHN0cm9uZz48ZW0+JywgJzwvZW0+PC9zdHJvbmc+Jyk7XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxiX18oXFxTW1xcc1xcU10qPylfX1xcYi9nLCBmdW5jdGlvbiAod20sIHR4dCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW5zaWRlICh0eHQsICc8c3Ryb25nPicsICc8L3N0cm9uZz4nKTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXGJfKFxcU1tcXHNcXFNdKj8pX1xcYi9nLCBmdW5jdGlvbiAod20sIHR4dCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW5zaWRlICh0eHQsICc8ZW0+JywgJzwvZW0+Jyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvX19fKFxcU1tcXHNcXFNdKj8pX19fL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgcmV0dXJuICgvXFxTJC8udGVzdChtKSkgPyBwYXJzZUluc2lkZSAobSwgJzxzdHJvbmc+PGVtPicsICc8L2VtPjwvc3Ryb25nPicpIDogd207XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvX18oXFxTW1xcc1xcU10qPylfXy9nLCBmdW5jdGlvbiAod20sIG0pIHtcbiAgICAgIHJldHVybiAoL1xcUyQvLnRlc3QobSkpID8gcGFyc2VJbnNpZGUgKG0sICc8c3Ryb25nPicsICc8L3N0cm9uZz4nKSA6IHdtO1xuICAgIH0pO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL18oW15cXHNfXVtcXHNcXFNdKj8pXy9nLCBmdW5jdGlvbiAod20sIG0pIHtcbiAgICAgIC8vICEvXl9bXl9dLy50ZXN0KG0pIC0gdGVzdCBpZiBpdCBkb2Vzbid0IHN0YXJ0IHdpdGggX18gKHNpbmNlIGl0IHNlZW1zIHJlZHVuZGFudCwgd2UgcmVtb3ZlZCBpdClcbiAgICAgIHJldHVybiAoL1xcUyQvLnRlc3QobSkpID8gcGFyc2VJbnNpZGUgKG0sICc8ZW0+JywgJzwvZW0+JykgOiB3bTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIE5vdyBwYXJzZSBhc3Rlcmlza3NcbiAgaWYgKG9wdGlvbnMubGl0ZXJhbE1pZFdvcmRBc3Rlcmlza3MpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oW14qXXxeKVxcQlxcKlxcKlxcKihcXFNbXFxzXFxTXSo/KVxcKlxcKlxcKlxcQig/IVxcKikvZywgZnVuY3Rpb24gKHdtLCBsZWFkLCB0eHQpIHtcbiAgICAgIHJldHVybiBwYXJzZUluc2lkZSAodHh0LCBsZWFkICsgJzxzdHJvbmc+PGVtPicsICc8L2VtPjwvc3Ryb25nPicpO1xuICAgIH0pO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyhbXipdfF4pXFxCXFwqXFwqKFxcU1tcXHNcXFNdKj8pXFwqXFwqXFxCKD8hXFwqKS9nLCBmdW5jdGlvbiAod20sIGxlYWQsIHR4dCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW5zaWRlICh0eHQsIGxlYWQgKyAnPHN0cm9uZz4nLCAnPC9zdHJvbmc+Jyk7XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFteKl18XilcXEJcXCooXFxTW1xcc1xcU10qPylcXCpcXEIoPyFcXCopL2csIGZ1bmN0aW9uICh3bSwgbGVhZCwgdHh0KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnNpZGUgKHR4dCwgbGVhZCArICc8ZW0+JywgJzwvZW0+Jyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFwqXFwqXFwqKFxcU1tcXHNcXFNdKj8pXFwqXFwqXFwqL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgcmV0dXJuICgvXFxTJC8udGVzdChtKSkgPyBwYXJzZUluc2lkZSAobSwgJzxzdHJvbmc+PGVtPicsICc8L2VtPjwvc3Ryb25nPicpIDogd207XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFwqXFwqKFxcU1tcXHNcXFNdKj8pXFwqXFwqL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgcmV0dXJuICgvXFxTJC8udGVzdChtKSkgPyBwYXJzZUluc2lkZSAobSwgJzxzdHJvbmc+JywgJzwvc3Ryb25nPicpIDogd207XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFwqKFteXFxzKl1bXFxzXFxTXSo/KVxcKi9nLCBmdW5jdGlvbiAod20sIG0pIHtcbiAgICAgIC8vICEvXlxcKlteKl0vLnRlc3QobSkgLSB0ZXN0IGlmIGl0IGRvZXNuJ3Qgc3RhcnQgd2l0aCAqKiAoc2luY2UgaXQgc2VlbXMgcmVkdW5kYW50LCB3ZSByZW1vdmVkIGl0KVxuICAgICAgcmV0dXJuICgvXFxTJC8udGVzdChtKSkgPyBwYXJzZUluc2lkZSAobSwgJzxlbT4nLCAnPC9lbT4nKSA6IHdtO1xuICAgIH0pO1xuICB9XG5cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdpdGFsaWNzQW5kQm9sZC5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8qKlxuICogRm9ybSBIVE1MIG9yZGVyZWQgKG51bWJlcmVkKSBhbmQgdW5vcmRlcmVkIChidWxsZXRlZCkgbGlzdHMuXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignbGlzdHMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgdGhlIGNvbnRlbnRzIG9mIGEgc2luZ2xlIG9yZGVyZWQgb3IgdW5vcmRlcmVkIGxpc3QsIHNwbGl0dGluZyBpdFxuICAgKiBpbnRvIGluZGl2aWR1YWwgbGlzdCBpdGVtcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGxpc3RTdHJcbiAgICogQHBhcmFtIHtib29sZWFufSB0cmltVHJhaWxpbmdcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIHByb2Nlc3NMaXN0SXRlbXMgKGxpc3RTdHIsIHRyaW1UcmFpbGluZykge1xuICAgIC8vIFRoZSAkZ19saXN0X2xldmVsIGdsb2JhbCBrZWVwcyB0cmFjayBvZiB3aGVuIHdlJ3JlIGluc2lkZSBhIGxpc3QuXG4gICAgLy8gRWFjaCB0aW1lIHdlIGVudGVyIGEgbGlzdCwgd2UgaW5jcmVtZW50IGl0OyB3aGVuIHdlIGxlYXZlIGEgbGlzdCxcbiAgICAvLyB3ZSBkZWNyZW1lbnQuIElmIGl0J3MgemVybywgd2UncmUgbm90IGluIGEgbGlzdCBhbnltb3JlLlxuICAgIC8vXG4gICAgLy8gV2UgZG8gdGhpcyBiZWNhdXNlIHdoZW4gd2UncmUgbm90IGluc2lkZSBhIGxpc3QsIHdlIHdhbnQgdG8gdHJlYXRcbiAgICAvLyBzb21ldGhpbmcgbGlrZSB0aGlzOlxuICAgIC8vXG4gICAgLy8gICAgSSByZWNvbW1lbmQgdXBncmFkaW5nIHRvIHZlcnNpb25cbiAgICAvLyAgICA4LiBPb3BzLCBub3cgdGhpcyBsaW5lIGlzIHRyZWF0ZWRcbiAgICAvLyAgICBhcyBhIHN1Yi1saXN0LlxuICAgIC8vXG4gICAgLy8gQXMgYSBzaW5nbGUgcGFyYWdyYXBoLCBkZXNwaXRlIHRoZSBmYWN0IHRoYXQgdGhlIHNlY29uZCBsaW5lIHN0YXJ0c1xuICAgIC8vIHdpdGggYSBkaWdpdC1wZXJpb2Qtc3BhY2Ugc2VxdWVuY2UuXG4gICAgLy9cbiAgICAvLyBXaGVyZWFzIHdoZW4gd2UncmUgaW5zaWRlIGEgbGlzdCAob3Igc3ViLWxpc3QpLCB0aGF0IGxpbmUgd2lsbCBiZVxuICAgIC8vIHRyZWF0ZWQgYXMgdGhlIHN0YXJ0IG9mIGEgc3ViLWxpc3QuIFdoYXQgYSBrbHVkZ2UsIGh1aD8gVGhpcyBpc1xuICAgIC8vIGFuIGFzcGVjdCBvZiBNYXJrZG93bidzIHN5bnRheCB0aGF0J3MgaGFyZCB0byBwYXJzZSBwZXJmZWN0bHlcbiAgICAvLyB3aXRob3V0IHJlc29ydGluZyB0byBtaW5kLXJlYWRpbmcuIFBlcmhhcHMgdGhlIHNvbHV0aW9uIGlzIHRvXG4gICAgLy8gY2hhbmdlIHRoZSBzeW50YXggcnVsZXMgc3VjaCB0aGF0IHN1Yi1saXN0cyBtdXN0IHN0YXJ0IHdpdGggYVxuICAgIC8vIHN0YXJ0aW5nIGNhcmRpbmFsIG51bWJlcjsgZS5nLiBcIjEuXCIgb3IgXCJhLlwiLlxuICAgIGdsb2JhbHMuZ0xpc3RMZXZlbCsrO1xuXG4gICAgLy8gdHJpbSB0cmFpbGluZyBibGFuayBsaW5lczpcbiAgICBsaXN0U3RyID0gbGlzdFN0ci5yZXBsYWNlKC9cXG57Mix9JC8sICdcXG4nKTtcblxuICAgIC8vIGF0dGFja2xhYjogYWRkIHNlbnRpbmVsIHRvIGVtdWxhdGUgXFx6XG4gICAgbGlzdFN0ciArPSAnwqgwJztcblxuICAgIHZhciByZ3ggPSAvKFxcbik/KF4gezAsM30pKFsqKy1dfFxcZCtbLl0pWyBcXHRdKygoXFxbKHh8WHwgKT9dKT9bIFxcdF0qW15cXHJdKz8oXFxuezEsMn0pKSg/PVxcbioowqgwfCB7MCwzfShbKistXXxcXGQrWy5dKVsgXFx0XSspKS9nbSxcbiAgICAgICAgaXNQYXJhZ3JhcGhlZCA9ICgvXFxuWyBcXHRdKlxcbig/IcKoMCkvLnRlc3QobGlzdFN0cikpO1xuXG4gICAgLy8gU2luY2UgdmVyc2lvbiAxLjUsIG5lc3Rpbmcgc3VibGlzdHMgcmVxdWlyZXMgNCBzcGFjZXMgKG9yIDEgdGFiKSBpbmRlbnRhdGlvbixcbiAgICAvLyB3aGljaCBpcyBhIHN5bnRheCBicmVha2luZyBjaGFuZ2VcbiAgICAvLyBhY3RpdmF0aW5nIHRoaXMgb3B0aW9uIHJldmVydHMgdG8gb2xkIGJlaGF2aW9yXG4gICAgaWYgKG9wdGlvbnMuZGlzYWJsZUZvcmNlZDRTcGFjZXNJbmRlbnRlZFN1Ymxpc3RzKSB7XG4gICAgICByZ3ggPSAvKFxcbik/KF4gezAsM30pKFsqKy1dfFxcZCtbLl0pWyBcXHRdKygoXFxbKHh8WHwgKT9dKT9bIFxcdF0qW15cXHJdKz8oXFxuezEsMn0pKSg/PVxcbioowqgwfFxcMihbKistXXxcXGQrWy5dKVsgXFx0XSspKS9nbTtcbiAgICB9XG5cbiAgICBsaXN0U3RyID0gbGlzdFN0ci5yZXBsYWNlKHJneCwgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xLCBtMiwgbTMsIG00LCB0YXNrYnRuLCBjaGVja2VkKSB7XG4gICAgICBjaGVja2VkID0gKGNoZWNrZWQgJiYgY2hlY2tlZC50cmltKCkgIT09ICcnKTtcblxuICAgICAgdmFyIGl0ZW0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ291dGRlbnQnKShtNCwgb3B0aW9ucywgZ2xvYmFscyksXG4gICAgICAgICAgYnVsbGV0U3R5bGUgPSAnJztcblxuICAgICAgLy8gU3VwcG9ydCBmb3IgZ2l0aHViIHRhc2tsaXN0c1xuICAgICAgaWYgKHRhc2tidG4gJiYgb3B0aW9ucy50YXNrbGlzdHMpIHtcbiAgICAgICAgYnVsbGV0U3R5bGUgPSAnIGNsYXNzPVwidGFzay1saXN0LWl0ZW1cIiBzdHlsZT1cImxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcIic7XG4gICAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoL15bIFxcdF0qXFxbKHh8WHwgKT9dL20sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgb3RwID0gJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBkaXNhYmxlZCBzdHlsZT1cIm1hcmdpbjogMHB4IDAuMzVlbSAwLjI1ZW0gLTEuNmVtOyB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1wiJztcbiAgICAgICAgICBpZiAoY2hlY2tlZCkge1xuICAgICAgICAgICAgb3RwICs9ICcgY2hlY2tlZCc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG90cCArPSAnPic7XG4gICAgICAgICAgcmV0dXJuIG90cDtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIElTU1VFICMzMTJcbiAgICAgIC8vIFRoaXMgaW5wdXQ6IC0gLSAtIGFcbiAgICAgIC8vIGNhdXNlcyB0cm91YmxlIHRvIHRoZSBwYXJzZXIsIHNpbmNlIGl0IGludGVycHJldHMgaXQgYXM6XG4gICAgICAvLyA8dWw+PGxpPjxsaT48bGk+YTwvbGk+PC9saT48L2xpPjwvdWw+XG4gICAgICAvLyBpbnN0ZWFkIG9mOlxuICAgICAgLy8gPHVsPjxsaT4tIC0gYTwvbGk+PC91bD5cbiAgICAgIC8vIFNvLCB0byBwcmV2ZW50IGl0LCB3ZSB3aWxsIHB1dCBhIG1hcmtlciAowqhBKWluIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpbmVcbiAgICAgIC8vIEtpbmQgb2YgaGFja2lzaC9tb25rZXkgcGF0Y2hpbmcsIGJ1dCBzZWVtcyBtb3JlIGVmZmVjdGl2ZSB0aGFuIG92ZXJjb21wbGljYXRpbmcgdGhlIGxpc3QgcGFyc2VyXG4gICAgICBpdGVtID0gaXRlbS5yZXBsYWNlKC9eKFstKitdfFxcZFxcLilbIFxcdF0rW1xcU1xcbiBdKi9nLCBmdW5jdGlvbiAod20yKSB7XG4gICAgICAgIHJldHVybiAnwqhBJyArIHdtMjtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBtMSAtIExlYWRpbmcgbGluZSBvclxuICAgICAgLy8gSGFzIGEgZG91YmxlIHJldHVybiAobXVsdGkgcGFyYWdyYXBoKSBvclxuICAgICAgLy8gSGFzIHN1Ymxpc3RcbiAgICAgIGlmIChtMSB8fCAoaXRlbS5zZWFyY2goL1xcbnsyLH0vKSA+IC0xKSkge1xuICAgICAgICBpdGVtID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdnaXRodWJDb2RlQmxvY2tzJykoaXRlbSwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICAgIGl0ZW0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2Jsb2NrR2FtdXQnKShpdGVtLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJlY3Vyc2lvbiBmb3Igc3ViLWxpc3RzOlxuICAgICAgICBpdGVtID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdsaXN0cycpKGl0ZW0sIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgICBpdGVtID0gaXRlbS5yZXBsYWNlKC9cXG4kLywgJycpOyAvLyBjaG9tcChpdGVtKVxuICAgICAgICBpdGVtID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTEJsb2NrcycpKGl0ZW0sIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gICAgICAgIC8vIENvbGFwc2UgZG91YmxlIGxpbmVicmVha3NcbiAgICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvXFxuXFxuKy9nLCAnXFxuXFxuJyk7XG4gICAgICAgIGlmIChpc1BhcmFncmFwaGVkKSB7XG4gICAgICAgICAgaXRlbSA9IHNob3dkb3duLnN1YlBhcnNlcigncGFyYWdyYXBocycpKGl0ZW0sIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NwYW5HYW11dCcpKGl0ZW0sIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgbWFya2VyICjCqEEpXG4gICAgICBpdGVtID0gaXRlbS5yZXBsYWNlKCfCqEEnLCAnJyk7XG4gICAgICAvLyB3ZSBjYW4gZmluYWxseSB3cmFwIHRoZSBsaW5lIGluIGxpc3QgaXRlbSB0YWdzXG4gICAgICBpdGVtID0gICc8bGknICsgYnVsbGV0U3R5bGUgKyAnPicgKyBpdGVtICsgJzwvbGk+XFxuJztcblxuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSk7XG5cbiAgICAvLyBhdHRhY2tsYWI6IHN0cmlwIHNlbnRpbmVsXG4gICAgbGlzdFN0ciA9IGxpc3RTdHIucmVwbGFjZSgvwqgwL2csICcnKTtcblxuICAgIGdsb2JhbHMuZ0xpc3RMZXZlbC0tO1xuXG4gICAgaWYgKHRyaW1UcmFpbGluZykge1xuICAgICAgbGlzdFN0ciA9IGxpc3RTdHIucmVwbGFjZSgvXFxzKyQvLCAnJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3RTdHI7XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZVN0YXJ0TnVtYmVyIChsaXN0LCBsaXN0VHlwZSkge1xuICAgIC8vIGNoZWNrIGlmIG9sIGFuZCBzdGFydHMgYnkgYSBudW1iZXIgZGlmZmVyZW50IHRoYW4gMVxuICAgIGlmIChsaXN0VHlwZSA9PT0gJ29sJykge1xuICAgICAgdmFyIHJlcyA9IGxpc3QubWF0Y2goL14gKihcXGQrKVxcLi8pO1xuICAgICAgaWYgKHJlcyAmJiByZXNbMV0gIT09ICcxJykge1xuICAgICAgICByZXR1cm4gJyBzdGFydD1cIicgKyByZXNbMV0gKyAnXCInO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgYW5kIHBhcnNlIGNvbnNlY3V0aXZlIGxpc3RzIChiZXR0ZXIgZml4IGZvciBpc3N1ZSAjMTQyKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGlzdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGlzdFR5cGVcbiAgICogQHBhcmFtIHtib29sZWFufSB0cmltVHJhaWxpbmdcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIHBhcnNlQ29uc2VjdXRpdmVMaXN0cyAobGlzdCwgbGlzdFR5cGUsIHRyaW1UcmFpbGluZykge1xuICAgIC8vIGNoZWNrIGlmIHdlIGNhdWdodCAyIG9yIG1vcmUgY29uc2VjdXRpdmUgbGlzdHMgYnkgbWlzdGFrZVxuICAgIC8vIHdlIHVzZSB0aGUgY291bnRlclJneCwgbWVhbmluZyBpZiBsaXN0VHlwZSBpcyBVTCB3ZSBsb29rIGZvciBPTCBhbmQgdmljZSB2ZXJzYVxuICAgIHZhciBvbFJneCA9IChvcHRpb25zLmRpc2FibGVGb3JjZWQ0U3BhY2VzSW5kZW50ZWRTdWJsaXN0cykgPyAvXiA/XFxkK1xcLlsgXFx0XS9nbSA6IC9eIHswLDN9XFxkK1xcLlsgXFx0XS9nbSxcbiAgICAgICAgdWxSZ3ggPSAob3B0aW9ucy5kaXNhYmxlRm9yY2VkNFNwYWNlc0luZGVudGVkU3VibGlzdHMpID8gL14gP1sqKy1dWyBcXHRdL2dtIDogL14gezAsM31bKistXVsgXFx0XS9nbSxcbiAgICAgICAgY291bnRlclJ4ZyA9IChsaXN0VHlwZSA9PT0gJ3VsJykgPyBvbFJneCA6IHVsUmd4LFxuICAgICAgICByZXN1bHQgPSAnJztcblxuICAgIGlmIChsaXN0LnNlYXJjaChjb3VudGVyUnhnKSAhPT0gLTEpIHtcbiAgICAgIChmdW5jdGlvbiBwYXJzZUNMICh0eHQpIHtcbiAgICAgICAgdmFyIHBvcyA9IHR4dC5zZWFyY2goY291bnRlclJ4ZyksXG4gICAgICAgICAgICBzdHlsZSA9IHN0eWxlU3RhcnROdW1iZXIobGlzdCwgbGlzdFR5cGUpO1xuICAgICAgICBpZiAocG9zICE9PSAtMSkge1xuICAgICAgICAgIC8vIHNsaWNlXG4gICAgICAgICAgcmVzdWx0ICs9ICdcXG5cXG48JyArIGxpc3RUeXBlICsgc3R5bGUgKyAnPlxcbicgKyBwcm9jZXNzTGlzdEl0ZW1zKHR4dC5zbGljZSgwLCBwb3MpLCAhIXRyaW1UcmFpbGluZykgKyAnPC8nICsgbGlzdFR5cGUgKyAnPlxcbic7XG5cbiAgICAgICAgICAvLyBpbnZlcnQgY291bnRlclR5cGUgYW5kIGxpc3RUeXBlXG4gICAgICAgICAgbGlzdFR5cGUgPSAobGlzdFR5cGUgPT09ICd1bCcpID8gJ29sJyA6ICd1bCc7XG4gICAgICAgICAgY291bnRlclJ4ZyA9IChsaXN0VHlwZSA9PT0gJ3VsJykgPyBvbFJneCA6IHVsUmd4O1xuXG4gICAgICAgICAgLy9yZWN1cnNlXG4gICAgICAgICAgcGFyc2VDTCh0eHQuc2xpY2UocG9zKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ICs9ICdcXG5cXG48JyArIGxpc3RUeXBlICsgc3R5bGUgKyAnPlxcbicgKyBwcm9jZXNzTGlzdEl0ZW1zKHR4dCwgISF0cmltVHJhaWxpbmcpICsgJzwvJyArIGxpc3RUeXBlICsgJz5cXG4nO1xuICAgICAgICB9XG4gICAgICB9KShsaXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0eWxlID0gc3R5bGVTdGFydE51bWJlcihsaXN0LCBsaXN0VHlwZSk7XG4gICAgICByZXN1bHQgPSAnXFxuXFxuPCcgKyBsaXN0VHlwZSArIHN0eWxlICsgJz5cXG4nICsgcHJvY2Vzc0xpc3RJdGVtcyhsaXN0LCAhIXRyaW1UcmFpbGluZykgKyAnPC8nICsgbGlzdFR5cGUgKyAnPlxcbic7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKiBTdGFydCBvZiBsaXN0IHBhcnNpbmcgKiovXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2xpc3RzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAvLyBhZGQgc2VudGluZWwgdG8gaGFjayBhcm91bmQga2h0bWwvc2FmYXJpIGJ1ZzpcbiAgLy8gaHR0cDovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTEyMzFcbiAgdGV4dCArPSAnwqgwJztcblxuICBpZiAoZ2xvYmFscy5nTGlzdExldmVsKSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXigoIHswLDN9KFsqKy1dfFxcZCtbLl0pWyBcXHRdKylbXlxccl0rPyjCqDB8XFxuezIsfSg/PVxcUykoPyFbIFxcdF0qKD86WyorLV18XFxkK1suXSlbIFxcdF0rKSkpL2dtLFxuICAgICAgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIGxpc3QsIG0yKSB7XG4gICAgICAgIHZhciBsaXN0VHlwZSA9IChtMi5zZWFyY2goL1sqKy1dL2cpID4gLTEpID8gJ3VsJyA6ICdvbCc7XG4gICAgICAgIHJldHVybiBwYXJzZUNvbnNlY3V0aXZlTGlzdHMobGlzdCwgbGlzdFR5cGUsIHRydWUpO1xuICAgICAgfVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFxcblxcbnxeXFxuPykoKCB7MCwzfShbKistXXxcXGQrWy5dKVsgXFx0XSspW15cXHJdKz8owqgwfFxcbnsyLH0oPz1cXFMpKD8hWyBcXHRdKig/OlsqKy1dfFxcZCtbLl0pWyBcXHRdKykpKS9nbSxcbiAgICAgIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSwgbGlzdCwgbTMpIHtcbiAgICAgICAgdmFyIGxpc3RUeXBlID0gKG0zLnNlYXJjaCgvWyorLV0vZykgPiAtMSkgPyAndWwnIDogJ29sJztcbiAgICAgICAgcmV0dXJuIHBhcnNlQ29uc2VjdXRpdmVMaXN0cyhsaXN0LCBsaXN0VHlwZSwgZmFsc2UpO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICAvLyBzdHJpcCBzZW50aW5lbFxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqDAvLCAnJyk7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2xpc3RzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBQYXJzZSBtZXRhZGF0YSBhdCB0aGUgdG9wIG9mIHRoZSBkb2N1bWVudFxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ21ldGFkYXRhJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghb3B0aW9ucy5tZXRhZGF0YSkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnbWV0YWRhdGEuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgZnVuY3Rpb24gcGFyc2VNZXRhZGF0YUNvbnRlbnRzIChjb250ZW50KSB7XG4gICAgLy8gcmF3IGlzIHJhdyBzbyBpdCdzIG5vdCBjaGFuZ2VkIGluIGFueSB3YXlcbiAgICBnbG9iYWxzLm1ldGFkYXRhLnJhdyA9IGNvbnRlbnQ7XG5cbiAgICAvLyBlc2NhcGUgY2hhcnMgZm9yYmlkZGVuIGluIGh0bWwgYXR0cmlidXRlc1xuICAgIC8vIGRvdWJsZSBxdW90ZXNcbiAgICBjb250ZW50ID0gY29udGVudFxuICAgICAgLy8gYW1wZXJzYW5kIGZpcnN0XG4gICAgICAucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgICAgLy8gZG91YmxlIHF1b3Rlc1xuICAgICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcblxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1xcbiB7NH0vZywgJyAnKTtcbiAgICBjb250ZW50LnJlcGxhY2UoL14oW1xcUyBdKyk6ICsoW1xcc1xcU10rPykkL2dtLCBmdW5jdGlvbiAod20sIGtleSwgdmFsdWUpIHtcbiAgICAgIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfVxuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL15cXHMqwqvCq8KrKyhcXFMqPylcXG4oW1xcc1xcU10rPylcXG7Cu8K7wrsrXFxuLywgZnVuY3Rpb24gKHdob2xlbWF0Y2gsIGZvcm1hdCwgY29udGVudCkge1xuICAgIHBhcnNlTWV0YWRhdGFDb250ZW50cyhjb250ZW50KTtcbiAgICByZXR1cm4gJ8KoTSc7XG4gIH0pO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL15cXHMqLS0tKyhcXFMqPylcXG4oW1xcc1xcU10rPylcXG4tLS0rXFxuLywgZnVuY3Rpb24gKHdob2xlbWF0Y2gsIGZvcm1hdCwgY29udGVudCkge1xuICAgIGlmIChmb3JtYXQpIHtcbiAgICAgIGdsb2JhbHMubWV0YWRhdGEuZm9ybWF0ID0gZm9ybWF0O1xuICAgIH1cbiAgICBwYXJzZU1ldGFkYXRhQ29udGVudHMoY29udGVudCk7XG4gICAgcmV0dXJuICfCqE0nO1xuICB9KTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqE0vZywgJycpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ21ldGFkYXRhLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBSZW1vdmUgb25lIGxldmVsIG9mIGxpbmUtbGVhZGluZyB0YWJzIG9yIHNwYWNlc1xuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ291dGRlbnQnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ291dGRlbnQuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gYXR0YWNrbGFiOiBoYWNrIGFyb3VuZCBLb25xdWVyb3IgMy41LjQgYnVnOlxuICAvLyBcIi0tLS0tLS0tLS1idWdcIi5yZXBsYWNlKC9eLS9nLFwiXCIpID09IFwiYnVnXCJcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXihcXHR8WyBdezEsNH0pL2dtLCAnwqgwJyk7IC8vIGF0dGFja2xhYjogZ190YWJfd2lkdGhcblxuICAvLyBhdHRhY2tsYWI6IGNsZWFuIHVwIGhhY2tcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqgwL2csICcnKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdvdXRkZW50LmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3BhcmFncmFwaHMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgncGFyYWdyYXBocy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgLy8gU3RyaXAgbGVhZGluZyBhbmQgdHJhaWxpbmcgbGluZXM6XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL15cXG4rL2csICcnKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxuKyQvZywgJycpO1xuXG4gIHZhciBncmFmcyA9IHRleHQuc3BsaXQoL1xcbnsyLH0vZyksXG4gICAgICBncmFmc091dCA9IFtdLFxuICAgICAgZW5kID0gZ3JhZnMubGVuZ3RoOyAvLyBXcmFwIDxwPiB0YWdzXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmQ7IGkrKykge1xuICAgIHZhciBzdHIgPSBncmFmc1tpXTtcbiAgICAvLyBpZiB0aGlzIGlzIGFuIEhUTUwgbWFya2VyLCBjb3B5IGl0XG4gICAgaWYgKHN0ci5zZWFyY2goL8KoKEt8RykoXFxkKylcXDEvZykgPj0gMCkge1xuICAgICAgZ3JhZnNPdXQucHVzaChzdHIpO1xuXG4gICAgLy8gdGVzdCBmb3IgcHJlc2VuY2Ugb2YgY2hhcmFjdGVycyB0byBwcmV2ZW50IGVtcHR5IGxpbmVzIGJlaW5nIHBhcnNlZFxuICAgIC8vIGFzIHBhcmFncmFwaHMgKHJlc3VsdGluZyBpbiB1bmRlc2lyZWQgZXh0cmEgZW1wdHkgcGFyYWdyYXBocylcbiAgICB9IGVsc2UgaWYgKHN0ci5zZWFyY2goL1xcUy8pID49IDApIHtcbiAgICAgIHN0ciA9IHNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0Jykoc3RyLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9eKFsgXFx0XSopL2csICc8cD4nKTtcbiAgICAgIHN0ciArPSAnPC9wPic7XG4gICAgICBncmFmc091dC5wdXNoKHN0cik7XG4gICAgfVxuICB9XG5cbiAgLyoqIFVuaGFzaGlmeSBIVE1MIGJsb2NrcyAqL1xuICBlbmQgPSBncmFmc091dC5sZW5ndGg7XG4gIGZvciAoaSA9IDA7IGkgPCBlbmQ7IGkrKykge1xuICAgIHZhciBibG9ja1RleHQgPSAnJyxcbiAgICAgICAgZ3JhZnNPdXRJdCA9IGdyYWZzT3V0W2ldLFxuICAgICAgICBjb2RlRmxhZyA9IGZhbHNlO1xuICAgIC8vIGlmIHRoaXMgaXMgYSBtYXJrZXIgZm9yIGFuIGh0bWwgYmxvY2suLi5cbiAgICAvLyB1c2UgUmVnRXhwLnRlc3QgaW5zdGVhZCBvZiBzdHJpbmcuc2VhcmNoIGJlY2F1c2Ugb2YgUU1MIGJ1Z1xuICAgIHdoaWxlICgvwqgoS3xHKShcXGQrKVxcMS8udGVzdChncmFmc091dEl0KSkge1xuICAgICAgdmFyIGRlbGltID0gUmVnRXhwLiQxLFxuICAgICAgICAgIG51bSAgID0gUmVnRXhwLiQyO1xuXG4gICAgICBpZiAoZGVsaW0gPT09ICdLJykge1xuICAgICAgICBibG9ja1RleHQgPSBnbG9iYWxzLmdIdG1sQmxvY2tzW251bV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB3ZSBuZWVkIHRvIGNoZWNrIGlmIGdoQmxvY2sgaXMgYSBmYWxzZSBwb3NpdGl2ZVxuICAgICAgICBpZiAoY29kZUZsYWcpIHtcbiAgICAgICAgICAvLyB1c2UgZW5jb2RlZCB2ZXJzaW9uIG9mIGFsbCB0ZXh0XG4gICAgICAgICAgYmxvY2tUZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykoZ2xvYmFscy5naENvZGVCbG9ja3NbbnVtXS50ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBibG9ja1RleHQgPSBnbG9iYWxzLmdoQ29kZUJsb2Nrc1tudW1dLmNvZGVibG9jaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmxvY2tUZXh0ID0gYmxvY2tUZXh0LnJlcGxhY2UoL1xcJC9nLCAnJCQkJCcpOyAvLyBFc2NhcGUgYW55IGRvbGxhciBzaWduc1xuXG4gICAgICBncmFmc091dEl0ID0gZ3JhZnNPdXRJdC5yZXBsYWNlKC8oXFxuXFxuKT/CqChLfEcpXFxkK1xcMihcXG5cXG4pPy8sIGJsb2NrVGV4dCk7XG4gICAgICAvLyBDaGVjayBpZiBncmFmc091dEl0IGlzIGEgcHJlLT5jb2RlXG4gICAgICBpZiAoL148cHJlXFxiW14+XSo+XFxzKjxjb2RlXFxiW14+XSo+Ly50ZXN0KGdyYWZzT3V0SXQpKSB7XG4gICAgICAgIGNvZGVGbGFnID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZ3JhZnNPdXRbaV0gPSBncmFmc091dEl0O1xuICB9XG4gIHRleHQgPSBncmFmc091dC5qb2luKCdcXG4nKTtcbiAgLy8gU3RyaXAgbGVhZGluZyBhbmQgdHJhaWxpbmcgbGluZXM6XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL15cXG4rL2csICcnKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxuKyQvZywgJycpO1xuICByZXR1cm4gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdwYXJhZ3JhcGhzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG59KTtcbiIsICIvKipcbiAqIFJ1biBleHRlbnNpb25cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdydW5FeHRlbnNpb24nLCBmdW5jdGlvbiAoZXh0LCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoZXh0LmZpbHRlcikge1xuICAgIHRleHQgPSBleHQuZmlsdGVyKHRleHQsIGdsb2JhbHMuY29udmVydGVyLCBvcHRpb25zKTtcblxuICB9IGVsc2UgaWYgKGV4dC5yZWdleCkge1xuICAgIC8vIFRPRE8gcmVtb3ZlIHRoaXMgd2hlbiBvbGQgZXh0ZW5zaW9uIGxvYWRpbmcgbWVjaGFuaXNtIGlzIGRlcHJlY2F0ZWRcbiAgICB2YXIgcmUgPSBleHQucmVnZXg7XG4gICAgaWYgKCEocmUgaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgICByZSA9IG5ldyBSZWdFeHAocmUsICdnJyk7XG4gICAgfVxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UocmUsIGV4dC5yZXBsYWNlKTtcbiAgfVxuXG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBUaGVzZSBhcmUgYWxsIHRoZSB0cmFuc2Zvcm1hdGlvbnMgdGhhdCBvY2N1ciAqd2l0aGluKiBibG9jay1sZXZlbFxuICogdGFncyBsaWtlIHBhcmFncmFwaHMsIGhlYWRlcnMsIGFuZCBsaXN0IGl0ZW1zLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3NwYW5HYW11dCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdzcGFuR2FtdXQuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2NvZGVTcGFucycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlc2NhcGVTcGVjaWFsQ2hhcnNXaXRoaW5UYWdBdHRyaWJ1dGVzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUJhY2tzbGFzaEVzY2FwZXMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBQcm9jZXNzIGFuY2hvciBhbmQgaW1hZ2UgdGFncy4gSW1hZ2VzIG11c3QgY29tZSBmaXJzdCxcbiAgLy8gYmVjYXVzZSAhW2Zvb11bZl0gbG9va3MgbGlrZSBhbiBhbmNob3IuXG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2ltYWdlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdhbmNob3JzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gTWFrZSBsaW5rcyBvdXQgb2YgdGhpbmdzIGxpa2UgYDxodHRwOi8vZXhhbXBsZS5jb20vPmBcbiAgLy8gTXVzdCBjb21lIGFmdGVyIGFuY2hvcnMsIGJlY2F1c2UgeW91IGNhbiB1c2UgPCBhbmQgPlxuICAvLyBkZWxpbWl0ZXJzIGluIGlubGluZSBsaW5rcyBsaWtlIFt0aGlzXSg8dXJsPikuXG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2F1dG9MaW5rcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzaW1wbGlmaWVkQXV0b0xpbmtzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2Vtb2ppJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3VuZGVybGluZScpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdpdGFsaWNzQW5kQm9sZCcpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzdHJpa2V0aHJvdWdoJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VsbGlwc2lzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gd2UgbmVlZCB0byBoYXNoIEhUTUwgdGFncyBpbnNpZGUgc3BhbnNcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaEhUTUxTcGFucycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIG5vdyB3ZSBlbmNvZGUgYW1wcyBhbmQgYW5nbGVzXG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUFtcHNBbmRBbmdsZXMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBEbyBoYXJkIGJyZWFrc1xuICBpZiAob3B0aW9ucy5zaW1wbGVMaW5lQnJlYWtzKSB7XG4gICAgLy8gR0ZNIHN0eWxlIGhhcmQgYnJlYWtzXG4gICAgLy8gb25seSBhZGQgbGluZSBicmVha3MgaWYgdGhlIHRleHQgZG9lcyBub3QgY29udGFpbiBhIGJsb2NrIChzcGVjaWFsIGNhc2UgZm9yIGxpc3RzKVxuICAgIGlmICghL1xcblxcbsKoSy8udGVzdCh0ZXh0KSkge1xuICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxuKy9nLCAnPGJyIC8+XFxuJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFZhbmlsbGEgaGFyZCBicmVha3NcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8gICtcXG4vZywgJzxiciAvPlxcbicpO1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnc3BhbkdhbXV0LmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdzdHJpa2V0aHJvdWdoJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIHBhcnNlSW5zaWRlICh0eHQpIHtcbiAgICBpZiAob3B0aW9ucy5zaW1wbGlmaWVkQXV0b0xpbmspIHtcbiAgICAgIHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignc2ltcGxpZmllZEF1dG9MaW5rcycpKHR4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgfVxuICAgIHJldHVybiAnPGRlbD4nICsgdHh0ICsgJzwvZGVsPic7XG4gIH1cblxuICBpZiAob3B0aW9ucy5zdHJpa2V0aHJvdWdoKSB7XG4gICAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnc3RyaWtldGhyb3VnaC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oPzp+KXsyfShbXFxzXFxTXSs/KSg/On4pezJ9L2csIGZ1bmN0aW9uICh3bSwgdHh0KSB7IHJldHVybiBwYXJzZUluc2lkZSh0eHQpOyB9KTtcbiAgICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdzdHJpa2V0aHJvdWdoLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIH1cblxuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8qKlxuICogU3RyaXBzIGxpbmsgZGVmaW5pdGlvbnMgZnJvbSB0ZXh0LCBzdG9yZXMgdGhlIFVSTHMgYW5kIHRpdGxlcyBpblxuICogaGFzaCByZWZlcmVuY2VzLlxuICogTGluayBkZWZzIGFyZSBpbiB0aGUgZm9ybTogXltpZF06IHVybCBcIm9wdGlvbmFsIHRpdGxlXCJcbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdzdHJpcExpbmtEZWZpbml0aW9ucycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgcmVnZXggICAgICAgPSAvXiB7MCwzfVxcWyhbXlxcXV0rKV06WyBcXHRdKlxcbj9bIFxcdF0qPD8oW14+XFxzXSspPj8oPzogPShbKlxcZF0rW0EtWmEteiVdezAsNH0peChbKlxcZF0rW0EtWmEteiVdezAsNH0pKT9bIFxcdF0qXFxuP1sgXFx0XSooPzooXFxuKilbXCJ8JyhdKC4rPylbXCJ8JyldWyBcXHRdKik/KD86XFxuK3woPz3CqDApKS9nbSxcbiAgICAgIGJhc2U2NFJlZ2V4ID0gL14gezAsM31cXFsoW15cXF1dKyldOlsgXFx0XSpcXG4/WyBcXHRdKjw/KGRhdGE6Lis/XFwvLis/O2Jhc2U2NCxbQS1aYS16MC05Ky89XFxuXSs/KT4/KD86ID0oWypcXGRdK1tBLVphLXolXXswLDR9KXgoWypcXGRdK1tBLVphLXolXXswLDR9KSk/WyBcXHRdKlxcbj9bIFxcdF0qKD86KFxcbiopW1wifCcoXSguKz8pW1wifCcpXVsgXFx0XSopPyg/OlxcblxcbnwoPz3CqDApfCg/PVxcblxcWykpL2dtO1xuXG4gIC8vIGF0dGFja2xhYjogc2VudGluZWwgd29ya2Fyb3VuZHMgZm9yIGxhY2sgb2YgXFxBIGFuZCBcXFosIHNhZmFyaVxca2h0bWwgYnVnXG4gIHRleHQgKz0gJ8KoMCc7XG5cbiAgdmFyIHJlcGxhY2VGdW5jID0gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIGxpbmtJZCwgdXJsLCB3aWR0aCwgaGVpZ2h0LCBibGFua0xpbmVzLCB0aXRsZSkge1xuXG4gICAgLy8gaWYgdGhlcmUgYXJlbid0IHR3byBpbnN0YW5jZXMgb2YgbGlua0lkIGl0IG11c3Qgbm90IGJlIGEgcmVmZXJlbmNlIGxpbmsgc28gYmFjayBvdXRcbiAgICBsaW5rSWQgPSBsaW5rSWQudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAodGV4dC50b0xvd2VyQ2FzZSgpLnNwbGl0KGxpbmtJZCkubGVuZ3RoIC0gMSA8IDIpIHtcbiAgICAgIHJldHVybiB3aG9sZU1hdGNoO1xuICAgIH1cbiAgICBpZiAodXJsLm1hdGNoKC9eZGF0YTouKz9cXC8uKz87YmFzZTY0LC8pKSB7XG4gICAgICAvLyByZW1vdmUgbmV3bGluZXNcbiAgICAgIGdsb2JhbHMuZ1VybHNbbGlua0lkXSA9IHVybC5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnbG9iYWxzLmdVcmxzW2xpbmtJZF0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUFtcHNBbmRBbmdsZXMnKSh1cmwsIG9wdGlvbnMsIGdsb2JhbHMpOyAgLy8gTGluayBJRHMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcbiAgICB9XG5cbiAgICBpZiAoYmxhbmtMaW5lcykge1xuICAgICAgLy8gT29wcywgZm91bmQgYmxhbmsgbGluZXMsIHNvIGl0J3Mgbm90IGEgdGl0bGUuXG4gICAgICAvLyBQdXQgYmFjayB0aGUgcGFyZW50aGV0aWNhbCBzdGF0ZW1lbnQgd2Ugc3RvbGUuXG4gICAgICByZXR1cm4gYmxhbmtMaW5lcyArIHRpdGxlO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICBnbG9iYWxzLmdUaXRsZXNbbGlua0lkXSA9IHRpdGxlLnJlcGxhY2UoL1wifCcvZywgJyZxdW90OycpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMucGFyc2VJbWdEaW1lbnNpb25zICYmIHdpZHRoICYmIGhlaWdodCkge1xuICAgICAgICBnbG9iYWxzLmdEaW1lbnNpb25zW2xpbmtJZF0gPSB7XG4gICAgICAgICAgd2lkdGg6ICB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBDb21wbGV0ZWx5IHJlbW92ZSB0aGUgZGVmaW5pdGlvbiBmcm9tIHRoZSB0ZXh0XG4gICAgcmV0dXJuICcnO1xuICB9O1xuXG4gIC8vIGZpcnN0IHdlIHRyeSB0byBmaW5kIGJhc2U2NCBsaW5rIHJlZmVyZW5jZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZShiYXNlNjRSZWdleCwgcmVwbGFjZUZ1bmMpO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UocmVnZXgsIHJlcGxhY2VGdW5jKTtcblxuICAvLyBhdHRhY2tsYWI6IHN0cmlwIHNlbnRpbmVsXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoMC8sICcnKTtcblxuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcigndGFibGVzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghb3B0aW9ucy50YWJsZXMpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHZhciB0YWJsZVJneCAgICAgICA9IC9eIHswLDN9XFx8Py4rXFx8LitcXG4gezAsM31cXHw/WyBcXHRdKjo/WyBcXHRdKig/OlstPV0pezIsfVsgXFx0XSo6P1sgXFx0XSpcXHxbIFxcdF0qOj9bIFxcdF0qKD86Wy09XSl7Mix9W1xcc1xcU10rPyg/OlxcblxcbnzCqDApL2dtLFxuICAgICAgLy9zaW5nZUNvbFRibFJneCA9IC9eIHswLDN9XFx8LitcXHxcXG4gezAsM31cXHxbIFxcdF0qOj9bIFxcdF0qKD86Wy09XSl7Mix9WyBcXHRdKjo/WyBcXHRdKlxcfFsgXFx0XSpcXG4oPzogezAsM31cXHwuK1xcfFxcbikrKD86XFxuXFxufMKoMCkvZ207XG4gICAgICBzaW5nZUNvbFRibFJneCA9IC9eIHswLDN9XFx8LitcXHxbIFxcdF0qXFxuIHswLDN9XFx8WyBcXHRdKjo/WyBcXHRdKig/OlstPV0pezIsfVsgXFx0XSo6P1sgXFx0XSpcXHxbIFxcdF0qXFxuKCB7MCwzfVxcfC4rXFx8WyBcXHRdKlxcbikqKD86XFxufMKoMCkvZ207XG5cbiAgZnVuY3Rpb24gcGFyc2VTdHlsZXMgKHNMaW5lKSB7XG4gICAgaWYgKC9eOlsgXFx0XSotLSokLy50ZXN0KHNMaW5lKSkge1xuICAgICAgcmV0dXJuICcgc3R5bGU9XCJ0ZXh0LWFsaWduOmxlZnQ7XCInO1xuICAgIH0gZWxzZSBpZiAoL14tLSpbIFxcdF0qOlsgXFx0XSokLy50ZXN0KHNMaW5lKSkge1xuICAgICAgcmV0dXJuICcgc3R5bGU9XCJ0ZXh0LWFsaWduOnJpZ2h0O1wiJztcbiAgICB9IGVsc2UgaWYgKC9eOlsgXFx0XSotLSpbIFxcdF0qOiQvLnRlc3Qoc0xpbmUpKSB7XG4gICAgICByZXR1cm4gJyBzdHlsZT1cInRleHQtYWxpZ246Y2VudGVyO1wiJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSGVhZGVycyAoaGVhZGVyLCBzdHlsZSkge1xuICAgIHZhciBpZCA9ICcnO1xuICAgIGhlYWRlciA9IGhlYWRlci50cmltKCk7XG4gICAgLy8gc3VwcG9ydCBib3RoIHRhYmxlc0hlYWRlcklkIGFuZCB0YWJsZUhlYWRlcklkIGR1ZSB0byBlcnJvciBpbiBkb2N1bWVudGF0aW9uIHNvIHdlIGRvbid0IGJyZWFrIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgaWYgKG9wdGlvbnMudGFibGVzSGVhZGVySWQgfHwgb3B0aW9ucy50YWJsZUhlYWRlcklkKSB7XG4gICAgICBpZCA9ICcgaWQ9XCInICsgaGVhZGVyLnJlcGxhY2UoLyAvZywgJ18nKS50b0xvd2VyQ2FzZSgpICsgJ1wiJztcbiAgICB9XG4gICAgaGVhZGVyID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnKShoZWFkZXIsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gICAgcmV0dXJuICc8dGgnICsgaWQgKyBzdHlsZSArICc+JyArIGhlYWRlciArICc8L3RoPlxcbic7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUNlbGxzIChjZWxsLCBzdHlsZSkge1xuICAgIHZhciBzdWJUZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnKShjZWxsLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICByZXR1cm4gJzx0ZCcgKyBzdHlsZSArICc+JyArIHN1YlRleHQgKyAnPC90ZD5cXG4nO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRUYWJsZSAoaGVhZGVycywgY2VsbHMpIHtcbiAgICB2YXIgdGIgPSAnPHRhYmxlPlxcbjx0aGVhZD5cXG48dHI+XFxuJyxcbiAgICAgICAgdGJsTGduID0gaGVhZGVycy5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRibExnbjsgKytpKSB7XG4gICAgICB0YiArPSBoZWFkZXJzW2ldO1xuICAgIH1cbiAgICB0YiArPSAnPC90cj5cXG48L3RoZWFkPlxcbjx0Ym9keT5cXG4nO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgKytpKSB7XG4gICAgICB0YiArPSAnPHRyPlxcbic7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdGJsTGduOyArK2lpKSB7XG4gICAgICAgIHRiICs9IGNlbGxzW2ldW2lpXTtcbiAgICAgIH1cbiAgICAgIHRiICs9ICc8L3RyPlxcbic7XG4gICAgfVxuICAgIHRiICs9ICc8L3Rib2R5PlxcbjwvdGFibGU+XFxuJztcbiAgICByZXR1cm4gdGI7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVRhYmxlIChyYXdUYWJsZSkge1xuICAgIHZhciBpLCB0YWJsZUxpbmVzID0gcmF3VGFibGUuc3BsaXQoJ1xcbicpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRhYmxlTGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIC8vIHN0cmlwIHdyb25nIGZpcnN0IGFuZCBsYXN0IGNvbHVtbiBpZiB3cmFwcGVkIHRhYmxlcyBhcmUgdXNlZFxuICAgICAgaWYgKC9eIHswLDN9XFx8Ly50ZXN0KHRhYmxlTGluZXNbaV0pKSB7XG4gICAgICAgIHRhYmxlTGluZXNbaV0gPSB0YWJsZUxpbmVzW2ldLnJlcGxhY2UoL14gezAsM31cXHwvLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoL1xcfFsgXFx0XSokLy50ZXN0KHRhYmxlTGluZXNbaV0pKSB7XG4gICAgICAgIHRhYmxlTGluZXNbaV0gPSB0YWJsZUxpbmVzW2ldLnJlcGxhY2UoL1xcfFsgXFx0XSokLywgJycpO1xuICAgICAgfVxuICAgICAgLy8gcGFyc2UgY29kZSBzcGFucyBmaXJzdCwgYnV0IHdlIG9ubHkgc3VwcG9ydCBvbmUgbGluZSBjb2RlIHNwYW5zXG4gICAgICB0YWJsZUxpbmVzW2ldID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdjb2RlU3BhbnMnKSh0YWJsZUxpbmVzW2ldLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3SGVhZGVycyA9IHRhYmxlTGluZXNbMF0uc3BsaXQoJ3wnKS5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMudHJpbSgpO30pLFxuICAgICAgICByYXdTdHlsZXMgPSB0YWJsZUxpbmVzWzFdLnNwbGl0KCd8JykubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnRyaW0oKTt9KSxcbiAgICAgICAgcmF3Q2VsbHMgPSBbXSxcbiAgICAgICAgaGVhZGVycyA9IFtdLFxuICAgICAgICBzdHlsZXMgPSBbXSxcbiAgICAgICAgY2VsbHMgPSBbXTtcblxuICAgIHRhYmxlTGluZXMuc2hpZnQoKTtcbiAgICB0YWJsZUxpbmVzLnNoaWZ0KCk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGFibGVMaW5lcy5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKHRhYmxlTGluZXNbaV0udHJpbSgpID09PSAnJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJhd0NlbGxzLnB1c2goXG4gICAgICAgIHRhYmxlTGluZXNbaV1cbiAgICAgICAgICAuc3BsaXQoJ3wnKVxuICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIHJldHVybiBzLnRyaW0oKTtcbiAgICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAocmF3SGVhZGVycy5sZW5ndGggPCByYXdTdHlsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gcmF3VGFibGU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IHJhd1N0eWxlcy5sZW5ndGg7ICsraSkge1xuICAgICAgc3R5bGVzLnB1c2gocGFyc2VTdHlsZXMocmF3U3R5bGVzW2ldKSk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IHJhd0hlYWRlcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoc3R5bGVzW2ldKSkge1xuICAgICAgICBzdHlsZXNbaV0gPSAnJztcbiAgICAgIH1cbiAgICAgIGhlYWRlcnMucHVzaChwYXJzZUhlYWRlcnMocmF3SGVhZGVyc1tpXSwgc3R5bGVzW2ldKSk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IHJhd0NlbGxzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgcm93ID0gW107XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaGVhZGVycy5sZW5ndGg7ICsraWkpIHtcbiAgICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChyYXdDZWxsc1tpXVtpaV0pKSB7XG5cbiAgICAgICAgfVxuICAgICAgICByb3cucHVzaChwYXJzZUNlbGxzKHJhd0NlbGxzW2ldW2lpXSwgc3R5bGVzW2lpXSkpO1xuICAgICAgfVxuICAgICAgY2VsbHMucHVzaChyb3cpO1xuICAgIH1cblxuICAgIHJldHVybiBidWlsZFRhYmxlKGhlYWRlcnMsIGNlbGxzKTtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3RhYmxlcy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBmaW5kIGVzY2FwZWQgcGlwZSBjaGFyYWN0ZXJzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcXFwoXFx8KS9nLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcblxuICAvLyBwYXJzZSBtdWx0aSBjb2x1bW4gdGFibGVzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UodGFibGVSZ3gsIHBhcnNlVGFibGUpO1xuXG4gIC8vIHBhcnNlIG9uZSBjb2x1bW4gdGFibGVzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2Uoc2luZ2VDb2xUYmxSZ3gsIHBhcnNlVGFibGUpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3RhYmxlcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCd1bmRlcmxpbmUnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCFvcHRpb25zLnVuZGVybGluZSkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndW5kZXJsaW5lLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIGlmIChvcHRpb25zLmxpdGVyYWxNaWRXb3JkVW5kZXJzY29yZXMpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXGJfX18oXFxTW1xcc1xcU10qPylfX19cXGIvZywgZnVuY3Rpb24gKHdtLCB0eHQpIHtcbiAgICAgIHJldHVybiAnPHU+JyArIHR4dCArICc8L3U+JztcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXGJfXyhcXFNbXFxzXFxTXSo/KV9fXFxiL2csIGZ1bmN0aW9uICh3bSwgdHh0KSB7XG4gICAgICByZXR1cm4gJzx1PicgKyB0eHQgKyAnPC91Pic7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvX19fKFxcU1tcXHNcXFNdKj8pX19fL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgcmV0dXJuICgvXFxTJC8udGVzdChtKSkgPyAnPHU+JyArIG0gKyAnPC91PicgOiB3bTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9fXyhcXFNbXFxzXFxTXSo/KV9fL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgcmV0dXJuICgvXFxTJC8udGVzdChtKSkgPyAnPHU+JyArIG0gKyAnPC91PicgOiB3bTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGVzY2FwZSByZW1haW5pbmcgdW5kZXJzY29yZXMgdG8gcHJldmVudCB0aGVtIGJlaW5nIHBhcnNlZCBieSBpdGFsaWMgYW5kIGJvbGRcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKF8pL2csIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3VuZGVybGluZS5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBTd2FwIGJhY2sgaW4gYWxsIHRoZSBzcGVjaWFsIGNoYXJhY3RlcnMgd2UndmUgaGlkZGVuLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3VuZXNjYXBlU3BlY2lhbENoYXJzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCd1bmVzY2FwZVNwZWNpYWxDaGFycy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqEUoXFxkKylFL2csIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSkge1xuICAgIHZhciBjaGFyQ29kZVRvUmVwbGFjZSA9IHBhcnNlSW50KG0xKTtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZVRvUmVwbGFjZSk7XG4gIH0pO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3VuZXNjYXBlU3BlY2lhbENoYXJzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uYmxvY2txdW90ZScsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdHh0ID0gJyc7XG4gIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGROb2RlcyxcbiAgICAgICAgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBpbm5lclR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShjaGlsZHJlbltpXSwgZ2xvYmFscyk7XG5cbiAgICAgIGlmIChpbm5lclR4dCA9PT0gJycpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0eHQgKz0gaW5uZXJUeHQ7XG4gICAgfVxuICB9XG4gIC8vIGNsZWFudXBcbiAgdHh0ID0gdHh0LnRyaW0oKTtcbiAgdHh0ID0gJz4gJyArIHR4dC5zcGxpdCgnXFxuJykuam9pbignXFxuPiAnKTtcbiAgcmV0dXJuIHR4dDtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmNvZGVCbG9jaycsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgbGFuZyA9IG5vZGUuZ2V0QXR0cmlidXRlKCdsYW5ndWFnZScpLFxuICAgICAgbnVtICA9IG5vZGUuZ2V0QXR0cmlidXRlKCdwcmVjb2RlbnVtJyk7XG4gIHJldHVybiAnYGBgJyArIGxhbmcgKyAnXFxuJyArIGdsb2JhbHMucHJlTGlzdFtudW1dICsgJ1xcbmBgYCc7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5jb2RlU3BhbicsIGZ1bmN0aW9uIChub2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICByZXR1cm4gJ2AnICsgbm9kZS5pbm5lckhUTUwgKyAnYCc7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5lbXBoYXNpcycsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdHh0ID0gJyc7XG4gIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIHR4dCArPSAnKic7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyArK2kpIHtcbiAgICAgIHR4dCArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykoY2hpbGRyZW5baV0sIGdsb2JhbHMpO1xuICAgIH1cbiAgICB0eHQgKz0gJyonO1xuICB9XG4gIHJldHVybiB0eHQ7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscywgaGVhZGVyTGV2ZWwpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBoZWFkZXJNYXJrID0gbmV3IEFycmF5KGhlYWRlckxldmVsICsgMSkuam9pbignIycpLFxuICAgICAgdHh0ID0gJyc7XG5cbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdHh0ID0gaGVhZGVyTWFyayArICcgJztcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXMsXG4gICAgICAgIGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgKytpKSB7XG4gICAgICB0eHQgKz0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHR4dDtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmhyJywgZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgcmV0dXJuICctLS0nO1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uaW1hZ2UnLCBmdW5jdGlvbiAobm9kZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9ICcnO1xuICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoJ3NyYycpKSB7XG4gICAgdHh0ICs9ICchWycgKyBub2RlLmdldEF0dHJpYnV0ZSgnYWx0JykgKyAnXSgnO1xuICAgIHR4dCArPSAnPCcgKyBub2RlLmdldEF0dHJpYnV0ZSgnc3JjJykgKyAnPic7XG4gICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKCd3aWR0aCcpICYmIG5vZGUuaGFzQXR0cmlidXRlKCdoZWlnaHQnKSkge1xuICAgICAgdHh0ICs9ICcgPScgKyBub2RlLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSArICd4JyArIG5vZGUuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoJ3RpdGxlJykpIHtcbiAgICAgIHR4dCArPSAnIFwiJyArIG5vZGUuZ2V0QXR0cmlidXRlKCd0aXRsZScpICsgJ1wiJztcbiAgICB9XG4gICAgdHh0ICs9ICcpJztcbiAgfVxuICByZXR1cm4gdHh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubGlua3MnLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9ICcnO1xuICBpZiAobm9kZS5oYXNDaGlsZE5vZGVzKCkgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGROb2RlcyxcbiAgICAgICAgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgdHh0ID0gJ1snO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7ICsraSkge1xuICAgICAgdHh0ICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShjaGlsZHJlbltpXSwgZ2xvYmFscyk7XG4gICAgfVxuICAgIHR4dCArPSAnXSgnO1xuICAgIHR4dCArPSAnPCcgKyBub2RlLmdldEF0dHJpYnV0ZSgnaHJlZicpICsgJz4nO1xuICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZSgndGl0bGUnKSkge1xuICAgICAgdHh0ICs9ICcgXCInICsgbm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgKyAnXCInO1xuICAgIH1cbiAgICB0eHQgKz0gJyknO1xuICB9XG4gIHJldHVybiB0eHQ7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5saXN0JywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMsIHR5cGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKCFub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICB2YXIgbGlzdEl0ZW1zICAgICAgID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgbGlzdEl0ZW1zTGVuZ2h0ID0gbGlzdEl0ZW1zLmxlbmd0aCxcbiAgICAgIGxpc3ROdW0gPSBub2RlLmdldEF0dHJpYnV0ZSgnc3RhcnQnKSB8fCAxO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdEl0ZW1zTGVuZ2h0OyArK2kpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RJdGVtc1tpXS50YWdOYW1lID09PSAndW5kZWZpbmVkJyB8fCBsaXN0SXRlbXNbaV0udGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnbGknKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBkZWZpbmUgdGhlIGJ1bGxldCB0byB1c2UgaW4gbGlzdFxuICAgIHZhciBidWxsZXQgPSAnJztcbiAgICBpZiAodHlwZSA9PT0gJ29sJykge1xuICAgICAgYnVsbGV0ID0gbGlzdE51bS50b1N0cmluZygpICsgJy4gJztcbiAgICB9IGVsc2Uge1xuICAgICAgYnVsbGV0ID0gJy0gJztcbiAgICB9XG5cbiAgICAvLyBwYXJzZSBsaXN0IGl0ZW1cbiAgICB0eHQgKz0gYnVsbGV0ICsgc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubGlzdEl0ZW0nKShsaXN0SXRlbXNbaV0sIGdsb2JhbHMpO1xuICAgICsrbGlzdE51bTtcbiAgfVxuXG4gIC8vIGFkZCBjb21tZW50IGF0IHRoZSBlbmQgdG8gcHJldmVudCBjb25zZWN1dGl2ZSBsaXN0cyB0byBiZSBwYXJzZWQgYXMgb25lXG4gIHR4dCArPSAnXFxuPCEtLSAtLT5cXG4nO1xuICByZXR1cm4gdHh0LnRyaW0oKTtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmxpc3RJdGVtJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBsaXN0SXRlbVR4dCA9ICcnO1xuXG4gIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGROb2RlcyxcbiAgICAgIGNoaWxkcmVuTGVuZ2h0ID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5naHQ7ICsraSkge1xuICAgIGxpc3RJdGVtVHh0ICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShjaGlsZHJlbltpXSwgZ2xvYmFscyk7XG4gIH1cbiAgLy8gaWYgaXQncyBvbmx5IG9uZSBsaW5lciwgd2UgbmVlZCB0byBhZGQgYSBuZXdsaW5lIGF0IHRoZSBlbmRcbiAgaWYgKCEvXFxuJC8udGVzdChsaXN0SXRlbVR4dCkpIHtcbiAgICBsaXN0SXRlbVR4dCArPSAnXFxuJztcbiAgfSBlbHNlIHtcbiAgICAvLyBpdCdzIG11bHRpcGFyYWdyYXBoLCBzbyB3ZSBuZWVkIHRvIGluZGVudFxuICAgIGxpc3RJdGVtVHh0ID0gbGlzdEl0ZW1UeHRcbiAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgIC5qb2luKCdcXG4gICAgJylcbiAgICAgIC5yZXBsYWNlKC9eIHs0fSQvZ20sICcnKVxuICAgICAgLnJlcGxhY2UoL1xcblxcbisvZywgJ1xcblxcbicpO1xuICB9XG5cbiAgcmV0dXJuIGxpc3RJdGVtVHh0O1xufSk7XG4iLCAiXG5cbnNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscywgc3BhbnNPbmx5KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBzcGFuc09ubHkgPSBzcGFuc09ubHkgfHwgZmFsc2U7XG5cbiAgdmFyIHR4dCA9ICcnO1xuXG4gIC8vIGVkZ2UgY2FzZSBvZiB0ZXh0IHdpdGhvdXQgd3JhcHBlciBwYXJhZ3JhcGhcbiAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICByZXR1cm4gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24udHh0Jykobm9kZSwgZ2xvYmFscyk7XG4gIH1cblxuICAvLyBIVE1MIGNvbW1lbnRcbiAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDgpIHtcbiAgICByZXR1cm4gJzwhLS0nICsgbm9kZS5kYXRhICsgJy0tPlxcblxcbic7XG4gIH1cblxuICAvLyBwcm9jZXNzIG9ubHkgbm9kZSBlbGVtZW50c1xuICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciB0YWdOYW1lID0gbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgc3dpdGNoICh0YWdOYW1lKSB7XG5cbiAgICAvL1xuICAgIC8vIEJMT0NLU1xuICAgIC8vXG4gICAgY2FzZSAnaDEnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uaGVhZGVyJykobm9kZSwgZ2xvYmFscywgMSkgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaDInOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uaGVhZGVyJykobm9kZSwgZ2xvYmFscywgMikgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaDMnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uaGVhZGVyJykobm9kZSwgZ2xvYmFscywgMykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaDQnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uaGVhZGVyJykobm9kZSwgZ2xvYmFscywgNCkgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaDUnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uaGVhZGVyJykobm9kZSwgZ2xvYmFscywgNSkgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaDYnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uaGVhZGVyJykobm9kZSwgZ2xvYmFscywgNikgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnBhcmFncmFwaCcpKG5vZGUsIGdsb2JhbHMpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnYmxvY2txdW90ZSc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ibG9ja3F1b3RlJykobm9kZSwgZ2xvYmFscykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdocic6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ocicpKG5vZGUsIGdsb2JhbHMpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnb2wnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubGlzdCcpKG5vZGUsIGdsb2JhbHMsICdvbCcpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndWwnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubGlzdCcpKG5vZGUsIGdsb2JhbHMsICd1bCcpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncHJlY29kZSc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5jb2RlQmxvY2snKShub2RlLCBnbG9iYWxzKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3ByZSc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5wcmUnKShub2RlLCBnbG9iYWxzKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RhYmxlJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnRhYmxlJykobm9kZSwgZ2xvYmFscykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICAvL1xuICAgIC8vIFNQQU5TXG4gICAgLy9cbiAgICBjYXNlICdjb2RlJzpcbiAgICAgIHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmNvZGVTcGFuJykobm9kZSwgZ2xvYmFscyk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2VtJzpcbiAgICBjYXNlICdpJzpcbiAgICAgIHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmVtcGhhc2lzJykobm9kZSwgZ2xvYmFscyk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3N0cm9uZyc6XG4gICAgY2FzZSAnYic6XG4gICAgICB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5zdHJvbmcnKShub2RlLCBnbG9iYWxzKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnZGVsJzpcbiAgICAgIHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnN0cmlrZXRocm91Z2gnKShub2RlLCBnbG9iYWxzKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnYSc6XG4gICAgICB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5saW5rcycpKG5vZGUsIGdsb2JhbHMpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdpbWcnOlxuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uaW1hZ2UnKShub2RlLCBnbG9iYWxzKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHR4dCA9IG5vZGUub3V0ZXJIVE1MICsgJ1xcblxcbic7XG4gIH1cblxuICAvLyBjb21tb24gbm9ybWFsaXphdGlvblxuICAvLyBUT0RPIGV2ZW50dWFsbHlcblxuICByZXR1cm4gdHh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ucGFyYWdyYXBoJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyArK2kpIHtcbiAgICAgIHR4dCArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykoY2hpbGRyZW5baV0sIGdsb2JhbHMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNvbWUgdGV4dCBub3JtYWxpemF0aW9uXG4gIHR4dCA9IHR4dC50cmltKCk7XG5cbiAgcmV0dXJuIHR4dDtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnByZScsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgbnVtICA9IG5vZGUuZ2V0QXR0cmlidXRlKCdwcmVudW0nKTtcbiAgcmV0dXJuICc8cHJlPicgKyBnbG9iYWxzLnByZUxpc3RbbnVtXSArICc8L3ByZT4nO1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uc3RyaWtldGhyb3VnaCcsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdHh0ID0gJyc7XG4gIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIHR4dCArPSAnfn4nO1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGROb2RlcyxcbiAgICAgICAgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgKytpKSB7XG4gICAgICB0eHQgKz0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzKTtcbiAgICB9XG4gICAgdHh0ICs9ICd+fic7XG4gIH1cbiAgcmV0dXJuIHR4dDtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnN0cm9uZycsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdHh0ID0gJyc7XG4gIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIHR4dCArPSAnKionO1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGROb2RlcyxcbiAgICAgICAgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgKytpKSB7XG4gICAgICB0eHQgKz0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzKTtcbiAgICB9XG4gICAgdHh0ICs9ICcqKic7XG4gIH1cbiAgcmV0dXJuIHR4dDtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnRhYmxlJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJyxcbiAgICAgIHRhYmxlQXJyYXkgPSBbW10sIFtdXSxcbiAgICAgIGhlYWRpbmdzICAgPSBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoZWFkPnRyPnRoJyksXG4gICAgICByb3dzICAgICAgID0gbm9kZS5xdWVyeVNlbGVjdG9yQWxsKCd0Ym9keT50cicpLFxuICAgICAgaSwgaWk7XG4gIGZvciAoaSA9IDA7IGkgPCBoZWFkaW5ncy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBoZWFkQ29udGVudCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnRhYmxlQ2VsbCcpKGhlYWRpbmdzW2ldLCBnbG9iYWxzKSxcbiAgICAgICAgYWxsaWduID0gJy0tLSc7XG5cbiAgICBpZiAoaGVhZGluZ3NbaV0uaGFzQXR0cmlidXRlKCdzdHlsZScpKSB7XG4gICAgICB2YXIgc3R5bGUgPSBoZWFkaW5nc1tpXS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgICBjYXNlICd0ZXh0LWFsaWduOmxlZnQ7JzpcbiAgICAgICAgICBhbGxpZ24gPSAnOi0tLSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RleHQtYWxpZ246cmlnaHQ7JzpcbiAgICAgICAgICBhbGxpZ24gPSAnLS0tOic7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RleHQtYWxpZ246Y2VudGVyOyc6XG4gICAgICAgICAgYWxsaWduID0gJzotLS06JztcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgdGFibGVBcnJheVswXVtpXSA9IGhlYWRDb250ZW50LnRyaW0oKTtcbiAgICB0YWJsZUFycmF5WzFdW2ldID0gYWxsaWduO1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IHJvd3MubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgciA9IHRhYmxlQXJyYXkucHVzaChbXSkgLSAxLFxuICAgICAgICBjb2xzID0gcm93c1tpXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGQnKTtcblxuICAgIGZvciAoaWkgPSAwOyBpaSA8IGhlYWRpbmdzLmxlbmd0aDsgKytpaSkge1xuICAgICAgdmFyIGNlbGxDb250ZW50ID0gJyAnO1xuICAgICAgaWYgKHR5cGVvZiBjb2xzW2lpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY2VsbENvbnRlbnQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi50YWJsZUNlbGwnKShjb2xzW2lpXSwgZ2xvYmFscyk7XG4gICAgICB9XG4gICAgICB0YWJsZUFycmF5W3JdLnB1c2goY2VsbENvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjZWxsU3BhY2VzQ291bnQgPSAzO1xuICBmb3IgKGkgPSAwOyBpIDwgdGFibGVBcnJheS5sZW5ndGg7ICsraSkge1xuICAgIGZvciAoaWkgPSAwOyBpaSA8IHRhYmxlQXJyYXlbaV0ubGVuZ3RoOyArK2lpKSB7XG4gICAgICB2YXIgc3RyTGVuID0gdGFibGVBcnJheVtpXVtpaV0ubGVuZ3RoO1xuICAgICAgaWYgKHN0ckxlbiA+IGNlbGxTcGFjZXNDb3VudCkge1xuICAgICAgICBjZWxsU3BhY2VzQ291bnQgPSBzdHJMZW47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IHRhYmxlQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICBmb3IgKGlpID0gMDsgaWkgPCB0YWJsZUFycmF5W2ldLmxlbmd0aDsgKytpaSkge1xuICAgICAgaWYgKGkgPT09IDEpIHtcbiAgICAgICAgaWYgKHRhYmxlQXJyYXlbaV1baWldLnNsaWNlKC0xKSA9PT0gJzonKSB7XG4gICAgICAgICAgdGFibGVBcnJheVtpXVtpaV0gPSBzaG93ZG93bi5oZWxwZXIucGFkRW5kKHRhYmxlQXJyYXlbaV1baWldLnNsaWNlKC0xKSwgY2VsbFNwYWNlc0NvdW50IC0gMSwgJy0nKSArICc6JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YWJsZUFycmF5W2ldW2lpXSA9IHNob3dkb3duLmhlbHBlci5wYWRFbmQodGFibGVBcnJheVtpXVtpaV0sIGNlbGxTcGFjZXNDb3VudCwgJy0nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFibGVBcnJheVtpXVtpaV0gPSBzaG93ZG93bi5oZWxwZXIucGFkRW5kKHRhYmxlQXJyYXlbaV1baWldLCBjZWxsU3BhY2VzQ291bnQpO1xuICAgICAgfVxuICAgIH1cbiAgICB0eHQgKz0gJ3wgJyArIHRhYmxlQXJyYXlbaV0uam9pbignIHwgJykgKyAnIHxcXG4nO1xuICB9XG5cbiAgcmV0dXJuIHR4dC50cmltKCk7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi50YWJsZUNlbGwnLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9ICcnO1xuICBpZiAoIW5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGROb2RlcyxcbiAgICAgIGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7ICsraSkge1xuICAgIHR4dCArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykoY2hpbGRyZW5baV0sIGdsb2JhbHMsIHRydWUpO1xuICB9XG4gIHJldHVybiB0eHQudHJpbSgpO1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24udHh0JywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSBub2RlLm5vZGVWYWx1ZTtcblxuICAvLyBtdWx0aXBsZSBzcGFjZXMgYXJlIGNvbGxhcHNlZFxuICB0eHQgPSB0eHQucmVwbGFjZSgvICsvZywgJyAnKTtcblxuICAvLyByZXBsYWNlIHRoZSBjdXN0b20gwqhOQlNQOyB3aXRoIGEgc3BhY2VcbiAgdHh0ID0gdHh0LnJlcGxhY2UoL8KoTkJTUDsvZywgJyAnKTtcblxuICAvLyBcIiwgPCwgPiBhbmQgJiBzaG91bGQgcmVwbGFjZSBlc2NhcGVkIGh0bWwgZW50aXRpZXNcbiAgdHh0ID0gc2hvd2Rvd24uaGVscGVyLnVuZXNjYXBlSFRNTEVudGl0aWVzKHR4dCk7XG5cbiAgLy8gZXNjYXBlIG1hcmtkb3duIG1hZ2ljIGNoYXJhY3RlcnNcbiAgLy8gZW1waGFzaXMsIHN0cm9uZyBhbmQgc3RyaWtldGhyb3VnaCAtIGNhbiBhcHBlYXIgZXZlcnl3aGVyZVxuICAvLyB3ZSBhbHNvIGVzY2FwZSBwaXBlICh8KSBiZWNhdXNlIG9mIHRhYmxlc1xuICAvLyBhbmQgZXNjYXBlIGAgYmVjYXVzZSBvZiBjb2RlIGJsb2NrcyBhbmQgc3BhbnNcbiAgdHh0ID0gdHh0LnJlcGxhY2UoLyhbKl9+fGBdKS9nLCAnXFxcXCQxJyk7XG5cbiAgLy8gZXNjYXBlID4gYmVjYXVzZSBvZiBibG9ja3F1b3Rlc1xuICB0eHQgPSB0eHQucmVwbGFjZSgvXihcXHMqKT4vZywgJ1xcXFwkMT4nKTtcblxuICAvLyBoYXNoIGNoYXJhY3Rlciwgb25seSB0cm91Ymxlc29tZSBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgbGluZSBiZWNhdXNlIG9mIGhlYWRlcnNcbiAgdHh0ID0gdHh0LnJlcGxhY2UoL14jL2dtLCAnXFxcXCMnKTtcblxuICAvLyBob3Jpem9udGFsIHJ1bGVzXG4gIHR4dCA9IHR4dC5yZXBsYWNlKC9eKFxccyopKFstPV17Myx9KShcXHMqKSQvLCAnJDFcXFxcJDIkMycpO1xuXG4gIC8vIGRvdCwgYmVjYXVzZSBvZiBvcmRlcmVkIGxpc3RzLCBvbmx5IHRyb3VibGVzb21lIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBsaW5lIHdoZW4gcHJlY2VkZWQgYnkgYW4gaW50ZWdlclxuICB0eHQgPSB0eHQucmVwbGFjZSgvXiggezAsM31cXGQrKVxcLi9nbSwgJyQxXFxcXC4nKTtcblxuICAvLyArLCAqIGFuZCAtLCBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgbGluZSBiZWNvbWVzIGEgbGlzdCwgc28gd2UgbmVlZCB0byBlc2NhcGUgdGhlbSBhbHNvIChhc3RlcmlzayB3YXMgYWxyZWFkeSBlc2NhcGVkKVxuICB0eHQgPSB0eHQucmVwbGFjZSgvXiggezAsM30pKFsrLV0pL2dtLCAnJDFcXFxcJDInKTtcblxuICAvLyBpbWFnZXMgYW5kIGxpbmtzLCBdIGZvbGxvd2VkIGJ5ICggaXMgcHJvYmxlbWF0aWMsIHNvIHdlIGVzY2FwZSBpdFxuICB0eHQgPSB0eHQucmVwbGFjZSgvXShbXFxzXSopXFwoL2csICdcXFxcXSQxXFxcXCgnKTtcblxuICAvLyByZWZlcmVuY2UgVVJJcyBtdXN0IGFsc28gYmUgZXNjYXBlZFxuICB0eHQgPSB0eHQucmVwbGFjZSgvXiB7MCwzfVxcWyhbXFxTIFxcdF0qPyldOi9nbSwgJ1xcXFxbJDFdOicpO1xuXG4gIHJldHVybiB0eHQ7XG59KTtcbiIsICJ2YXIgcm9vdCA9IHRoaXM7XG5cbi8vIEFNRCBMb2FkZXJcbmlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuIHNob3dkb3duO1xuICB9KTtcblxuLy8gQ29tbW9uSlMvbm9kZUpTIExvYWRlclxufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHNob3dkb3duO1xuXG4vLyBSZWd1bGFyIEJyb3dzZXIgbG9hZGVyXG59IGVsc2Uge1xuICByb290LnNob3dkb3duID0gc2hvd2Rvd247XG59XG4iLCAiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJGbG93Yml0ZVwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJGbG93Yml0ZVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJGbG93Yml0ZVwiXSA9IGZhY3RvcnkoKTtcbn0pKHNlbGYsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsICJleHBvcnQgdmFyIHRvcCA9ICd0b3AnO1xuZXhwb3J0IHZhciBib3R0b20gPSAnYm90dG9tJztcbmV4cG9ydCB2YXIgcmlnaHQgPSAncmlnaHQnO1xuZXhwb3J0IHZhciBsZWZ0ID0gJ2xlZnQnO1xuZXhwb3J0IHZhciBhdXRvID0gJ2F1dG8nO1xuZXhwb3J0IHZhciBiYXNlUGxhY2VtZW50cyA9IFt0b3AsIGJvdHRvbSwgcmlnaHQsIGxlZnRdO1xuZXhwb3J0IHZhciBzdGFydCA9ICdzdGFydCc7XG5leHBvcnQgdmFyIGVuZCA9ICdlbmQnO1xuZXhwb3J0IHZhciBjbGlwcGluZ1BhcmVudHMgPSAnY2xpcHBpbmdQYXJlbnRzJztcbmV4cG9ydCB2YXIgdmlld3BvcnQgPSAndmlld3BvcnQnO1xuZXhwb3J0IHZhciBwb3BwZXIgPSAncG9wcGVyJztcbmV4cG9ydCB2YXIgcmVmZXJlbmNlID0gJ3JlZmVyZW5jZSc7XG5leHBvcnQgdmFyIHZhcmlhdGlvblBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovYmFzZVBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTtcbmV4cG9ydCB2YXIgcGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9bXS5jb25jYXQoYmFzZVBsYWNlbWVudHMsIFthdXRvXSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50LCBwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pOyAvLyBtb2RpZmllcnMgdGhhdCBuZWVkIHRvIHJlYWQgdGhlIERPTVxuXG5leHBvcnQgdmFyIGJlZm9yZVJlYWQgPSAnYmVmb3JlUmVhZCc7XG5leHBvcnQgdmFyIHJlYWQgPSAncmVhZCc7XG5leHBvcnQgdmFyIGFmdGVyUmVhZCA9ICdhZnRlclJlYWQnOyAvLyBwdXJlLWxvZ2ljIG1vZGlmaWVyc1xuXG5leHBvcnQgdmFyIGJlZm9yZU1haW4gPSAnYmVmb3JlTWFpbic7XG5leHBvcnQgdmFyIG1haW4gPSAnbWFpbic7XG5leHBvcnQgdmFyIGFmdGVyTWFpbiA9ICdhZnRlck1haW4nOyAvLyBtb2RpZmllciB3aXRoIHRoZSBwdXJwb3NlIHRvIHdyaXRlIHRvIHRoZSBET00gKG9yIHdyaXRlIGludG8gYSBmcmFtZXdvcmsgc3RhdGUpXG5cbmV4cG9ydCB2YXIgYmVmb3JlV3JpdGUgPSAnYmVmb3JlV3JpdGUnO1xuZXhwb3J0IHZhciB3cml0ZSA9ICd3cml0ZSc7XG5leHBvcnQgdmFyIGFmdGVyV3JpdGUgPSAnYWZ0ZXJXcml0ZSc7XG5leHBvcnQgdmFyIG1vZGlmaWVyUGhhc2VzID0gW2JlZm9yZVJlYWQsIHJlYWQsIGFmdGVyUmVhZCwgYmVmb3JlTWFpbiwgbWFpbiwgYWZ0ZXJNYWluLCBiZWZvcmVXcml0ZSwgd3JpdGUsIGFmdGVyV3JpdGVdOyIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlTmFtZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ID8gKGVsZW1lbnQubm9kZU5hbWUgfHwgJycpLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmIChub2RlLnRvU3RyaW5nKCkgIT09ICdbb2JqZWN0IFdpbmRvd10nKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdyA6IHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufSIsICJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5FbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5IVE1MRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNTaGFkb3dSb290KG5vZGUpIHtcbiAgLy8gSUUgMTEgaGFzIG5vIFNoYWRvd1Jvb3RcbiAgaWYgKHR5cGVvZiBTaGFkb3dSb290ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLlNoYWRvd1Jvb3Q7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgU2hhZG93Um9vdDtcbn1cblxuZXhwb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50LCBpc1NoYWRvd1Jvb3QgfTsiLCAiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gVGhpcyBtb2RpZmllciB0YWtlcyB0aGUgc3R5bGVzIHByZXBhcmVkIGJ5IHRoZSBgY29tcHV0ZVN0eWxlc2AgbW9kaWZpZXJcbi8vIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIEhUTUxFbGVtZW50cyBzdWNoIGFzIHBvcHBlciBhbmQgYXJyb3dcblxuZnVuY3Rpb24gYXBwbHlTdHlsZXMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlO1xuICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnN0eWxlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGbG93IGRvZXNuJ3Qgc3VwcG9ydCB0byBleHRlbmQgdGhpcyBwcm9wZXJ0eSwgYnV0IGl0J3MgdGhlIG1vc3RcbiAgICAvLyBlZmZlY3RpdmUgd2F5IHRvIGFwcGx5IHN0eWxlcyB0byBhbiBIVE1MRWxlbWVudFxuICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG5cbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuXG4gICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUgPT09IHRydWUgPyAnJyA6IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZTtcbiAgdmFyIGluaXRpYWxTdHlsZXMgPSB7XG4gICAgcG9wcGVyOiB7XG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGxlZnQ6ICcwJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbWFyZ2luOiAnMCdcbiAgICB9LFxuICAgIGFycm93OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG4gICAgcmVmZXJlbmNlOiB7fVxuICB9O1xuICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLnBvcHBlci5zdHlsZSwgaW5pdGlhbFN0eWxlcy5wb3BwZXIpO1xuICBzdGF0ZS5zdHlsZXMgPSBpbml0aWFsU3R5bGVzO1xuXG4gIGlmIChzdGF0ZS5lbGVtZW50cy5hcnJvdykge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMuYXJyb3cuc3R5bGUsIGluaXRpYWxTdHlsZXMuYXJyb3cpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICAgIHZhciBzdHlsZVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhzdGF0ZS5zdHlsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBzdGF0ZS5zdHlsZXNbbmFtZV0gOiBpbml0aWFsU3R5bGVzW25hbWVdKTsgLy8gU2V0IGFsbCB2YWx1ZXMgdG8gYW4gZW1wdHkgc3RyaW5nIHRvIHVuc2V0IHRoZW1cblxuICAgICAgdmFyIHN0eWxlID0gc3R5bGVQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9ICcnO1xuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9LCB7fSk7IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYXBwbHlTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGFwcGx5U3R5bGVzLFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsnY29tcHV0ZVN0eWxlcyddXG59OyIsICJpbXBvcnQgeyBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG59IiwgImV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciByb3VuZCA9IE1hdGgucm91bmQ7IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVBU3RyaW5nKCkge1xuICB2YXIgdWFEYXRhID0gbmF2aWdhdG9yLnVzZXJBZ2VudERhdGE7XG5cbiAgaWYgKHVhRGF0YSAhPSBudWxsICYmIHVhRGF0YS5icmFuZHMpIHtcbiAgICByZXR1cm4gdWFEYXRhLmJyYW5kcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmJyYW5kICsgXCIvXCIgKyBpdGVtLnZlcnNpb247XG4gICAgfSkuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQ7XG59IiwgImltcG9ydCBnZXRVQVN0cmluZyBmcm9tIFwiLi4vdXRpbHMvdXNlckFnZW50LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0xheW91dFZpZXdwb3J0KCkge1xuICByZXR1cm4gIS9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QoZ2V0VUFTdHJpbmcoKSk7XG59IiwgImltcG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgaXNMYXlvdXRWaWV3cG9ydCBmcm9tIFwiLi9pc0xheW91dFZpZXdwb3J0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgaW5jbHVkZVNjYWxlLCBpc0ZpeGVkU3RyYXRlZ3kpIHtcbiAgaWYgKGluY2x1ZGVTY2FsZSA9PT0gdm9pZCAwKSB7XG4gICAgaW5jbHVkZVNjYWxlID0gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNGaXhlZFN0cmF0ZWd5ID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkU3RyYXRlZ3kgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciBjbGllbnRSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNjYWxlWCA9IDE7XG4gIHZhciBzY2FsZVkgPSAxO1xuXG4gIGlmIChpbmNsdWRlU2NhbGUgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSkge1xuICAgIHNjYWxlWCA9IGVsZW1lbnQub2Zmc2V0V2lkdGggPiAwID8gcm91bmQoY2xpZW50UmVjdC53aWR0aCkgLyBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IDEgOiAxO1xuICAgIHNjYWxlWSA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ID4gMCA/IHJvdW5kKGNsaWVudFJlY3QuaGVpZ2h0KSAvIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IDEgOiAxO1xuICB9XG5cbiAgdmFyIF9yZWYgPSBpc0VsZW1lbnQoZWxlbWVudCkgPyBnZXRXaW5kb3coZWxlbWVudCkgOiB3aW5kb3csXG4gICAgICB2aXN1YWxWaWV3cG9ydCA9IF9yZWYudmlzdWFsVmlld3BvcnQ7XG5cbiAgdmFyIGFkZFZpc3VhbE9mZnNldHMgPSAhaXNMYXlvdXRWaWV3cG9ydCgpICYmIGlzRml4ZWRTdHJhdGVneTtcbiAgdmFyIHggPSAoY2xpZW50UmVjdC5sZWZ0ICsgKGFkZFZpc3VhbE9mZnNldHMgJiYgdmlzdWFsVmlld3BvcnQgPyB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0IDogMCkpIC8gc2NhbGVYO1xuICB2YXIgeSA9IChjbGllbnRSZWN0LnRvcCArIChhZGRWaXN1YWxPZmZzZXRzICYmIHZpc3VhbFZpZXdwb3J0ID8gdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wIDogMCkpIC8gc2NhbGVZO1xuICB2YXIgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoIC8gc2NhbGVYO1xuICB2YXIgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQgLyBzY2FsZVk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHRvcDogeSxcbiAgICByaWdodDogeCArIHdpZHRoLFxuICAgIGJvdHRvbTogeSArIGhlaWdodCxcbiAgICBsZWZ0OiB4LFxuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufSIsICJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiOyAvLyBSZXR1cm5zIHRoZSBsYXlvdXQgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuIExheW91dFxuLy8gbWVhbnMgaXQgZG9lc24ndCB0YWtlIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRMYXlvdXRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIGNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7IC8vIFVzZSB0aGUgY2xpZW50UmVjdCBzaXplcyBpZiBpdCdzIG5vdCBiZWVuIHRyYW5zZm9ybWVkLlxuICAvLyBGaXhlcyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEyMjNcblxuICB2YXIgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3Qud2lkdGggLSB3aWR0aCkgPD0gMSkge1xuICAgIHdpZHRoID0gY2xpZW50UmVjdC53aWR0aDtcbiAgfVxuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LmhlaWdodCAtIGhlaWdodCkgPD0gMSkge1xuICAgIGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgeTogZWxlbWVudC5vZmZzZXRUb3AsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59IiwgImltcG9ydCB7IGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgY2hpbGQpIHtcbiAgdmFyIHJvb3ROb2RlID0gY2hpbGQuZ2V0Um9vdE5vZGUgJiYgY2hpbGQuZ2V0Um9vdE5vZGUoKTsgLy8gRmlyc3QsIGF0dGVtcHQgd2l0aCBmYXN0ZXIgbmF0aXZlIG1ldGhvZFxuXG4gIGlmIChwYXJlbnQuY29udGFpbnMoY2hpbGQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gdGhlbiBmYWxsYmFjayB0byBjdXN0b20gaW1wbGVtZW50YXRpb24gd2l0aCBTaGFkb3cgRE9NIHN1cHBvcnRcbiAgZWxzZSBpZiAocm9vdE5vZGUgJiYgaXNTaGFkb3dSb290KHJvb3ROb2RlKSkge1xuICAgICAgdmFyIG5leHQgPSBjaGlsZDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAobmV4dCAmJiBwYXJlbnQuaXNTYW1lTm9kZShuZXh0KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXTogbmVlZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMuLi5cblxuXG4gICAgICAgIG5leHQgPSBuZXh0LnBhcmVudE5vZGUgfHwgbmV4dC5ob3N0O1xuICAgICAgfSB3aGlsZSAobmV4dCk7XG4gICAgfSAvLyBHaXZlIHVwLCB0aGUgcmVzdWx0IGlzIGZhbHNlXG5cblxuICByZXR1cm4gZmFsc2U7XG59IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldFdpbmRvdyhlbGVtZW50KS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufSIsICJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVGFibGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIFsndGFibGUnLCAndGQnLCAndGgnXS5pbmRleE9mKGdldE5vZGVOYW1lKGVsZW1lbnQpKSA+PSAwO1xufSIsICJpbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkge1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gIHJldHVybiAoKGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQub3duZXJEb2N1bWVudCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICBlbGVtZW50LmRvY3VtZW50KSB8fCB3aW5kb3cuZG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudDtcbn0iLCAiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gKC8vIHRoaXMgaXMgYSBxdWlja2VyIChidXQgbGVzcyB0eXBlIHNhZmUpIHdheSB0byBzYXZlIHF1aXRlIHNvbWUgYnl0ZXMgZnJvbSB0aGUgYnVuZGxlXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8ICggLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWRcbiAgICBpc1NoYWRvd1Jvb3QoZWxlbWVudCkgPyBlbGVtZW50Lmhvc3QgOiBudWxsKSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQsIGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBpc1RhYmxlRWxlbWVudCBmcm9tIFwiLi9pc1RhYmxlRWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGdldFVBU3RyaW5nIGZyb20gXCIuLi91dGlscy91c2VyQWdlbnQuanNcIjtcblxuZnVuY3Rpb24gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzgzN1xuICBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG59IC8vIGAub2Zmc2V0UGFyZW50YCByZXBvcnRzIGBudWxsYCBmb3IgZml4ZWQgZWxlbWVudHMsIHdoaWxlIGFic29sdXRlIGVsZW1lbnRzXG4vLyByZXR1cm4gdGhlIGNvbnRhaW5pbmcgYmxvY2tcblxuXG5mdW5jdGlvbiBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkge1xuICB2YXIgaXNGaXJlZm94ID0gL2ZpcmVmb3gvaS50ZXN0KGdldFVBU3RyaW5nKCkpO1xuICB2YXIgaXNJRSA9IC9UcmlkZW50L2kudGVzdChnZXRVQVN0cmluZygpKTtcblxuICBpZiAoaXNJRSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgLy8gSW4gSUUgOSwgMTAgYW5kIDExIGZpeGVkIGVsZW1lbnRzIGNvbnRhaW5pbmcgYmxvY2sgaXMgYWx3YXlzIGVzdGFibGlzaGVkIGJ5IHRoZSB2aWV3cG9ydFxuICAgIHZhciBlbGVtZW50Q3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcblxuICAgIGlmIChlbGVtZW50Q3NzLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgY3VycmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuXG4gIGlmIChpc1NoYWRvd1Jvb3QoY3VycmVudE5vZGUpKSB7XG4gICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5ob3N0O1xuICB9XG5cbiAgd2hpbGUgKGlzSFRNTEVsZW1lbnQoY3VycmVudE5vZGUpICYmIFsnaHRtbCcsICdib2R5J10uaW5kZXhPZihnZXROb2RlTmFtZShjdXJyZW50Tm9kZSkpIDwgMCkge1xuICAgIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTsgLy8gVGhpcyBpcyBub24tZXhoYXVzdGl2ZSBidXQgY292ZXJzIHRoZSBtb3N0IGNvbW1vbiBDU1MgcHJvcGVydGllcyB0aGF0XG4gICAgLy8gY3JlYXRlIGEgY29udGFpbmluZyBibG9jay5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ29udGFpbmluZ19ibG9jayNpZGVudGlmeWluZ190aGVfY29udGFpbmluZ19ibG9ja1xuXG4gICAgaWYgKGNzcy50cmFuc2Zvcm0gIT09ICdub25lJyB8fCBjc3MucGVyc3BlY3RpdmUgIT09ICdub25lJyB8fCBjc3MuY29udGFpbiA9PT0gJ3BhaW50JyB8fCBbJ3RyYW5zZm9ybScsICdwZXJzcGVjdGl2ZSddLmluZGV4T2YoY3NzLndpbGxDaGFuZ2UpICE9PSAtMSB8fCBpc0ZpcmVmb3ggJiYgY3NzLndpbGxDaGFuZ2UgPT09ICdmaWx0ZXInIHx8IGlzRmlyZWZveCAmJiBjc3MuZmlsdGVyICYmIGNzcy5maWx0ZXIgIT09ICdub25lJykge1xuICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IC8vIEdldHMgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgcG9zaXRpb25lZCBlbGVtZW50LiBIYW5kbGVzIHNvbWUgZWRnZSBjYXNlcyxcbi8vIHN1Y2ggYXMgdGFibGUgYW5jZXN0b3JzIGFuZCBjcm9zcyBicm93c2VyIGJ1Z3MuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCk7XG5cbiAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBpc1RhYmxlRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICBpZiAob2Zmc2V0UGFyZW50ICYmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnaHRtbCcgfHwgZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2JvZHknICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHx8IHdpbmRvdztcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpID49IDAgPyAneCcgOiAneSc7XG59IiwgImltcG9ydCB7IG1heCBhcyBtYXRoTWF4LCBtaW4gYXMgbWF0aE1pbiB9IGZyb20gXCIuL21hdGguanNcIjtcbmV4cG9ydCBmdW5jdGlvbiB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KSB7XG4gIHJldHVybiBtYXRoTWF4KG1pbiwgbWF0aE1pbih2YWx1ZSwgbWF4KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gd2l0aGluTWF4Q2xhbXAobWluLCB2YWx1ZSwgbWF4KSB7XG4gIHZhciB2ID0gd2l0aGluKG1pbiwgdmFsdWUsIG1heCk7XG4gIHJldHVybiB2ID4gbWF4ID8gbWF4IDogdjtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufSIsICJpbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VQYWRkaW5nT2JqZWN0KHBhZGRpbmdPYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGdldEZyZXNoU2lkZU9iamVjdCgpLCBwYWRkaW5nT2JqZWN0KTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhwYW5kVG9IYXNoTWFwKHZhbHVlLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoaGFzaE1hcCwga2V5KSB7XG4gICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGhhc2hNYXA7XG4gIH0sIHt9KTtcbn0iLCAiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuLi9kb20tdXRpbHMvY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgd2l0aGluIH0gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi4vdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuLi91dGlscy9leHBhbmRUb0hhc2hNYXAuanNcIjtcbmltcG9ydCB7IGxlZnQsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdG9wLCBib3R0b20gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdG9QYWRkaW5nT2JqZWN0ID0gZnVuY3Rpb24gdG9QYWRkaW5nT2JqZWN0KHBhZGRpbmcsIHN0YXRlKSB7XG4gIHBhZGRpbmcgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ2Z1bmN0aW9uJyA/IHBhZGRpbmcoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiBwYWRkaW5nO1xuICByZXR1cm4gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbn07XG5cbmZ1bmN0aW9uIGFycm93KF9yZWYpIHtcbiAgdmFyIF9zdGF0ZSRtb2RpZmllcnNEYXRhJDtcblxuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgYXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGlzVmVydGljYWwgPSBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKCFhcnJvd0VsZW1lbnQgfHwgIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGFkZGluZ09iamVjdCA9IHRvUGFkZGluZ09iamVjdChvcHRpb25zLnBhZGRpbmcsIHN0YXRlKTtcbiAgdmFyIGFycm93UmVjdCA9IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KTtcbiAgdmFyIG1pblByb3AgPSBheGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICB2YXIgbWF4UHJvcCA9IGF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICB2YXIgZW5kRGlmZiA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtsZW5dICsgc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnBvcHBlcltsZW5dO1xuICB2YXIgc3RhcnREaWZmID0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXTtcbiAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGFycm93RWxlbWVudCk7XG4gIHZhciBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBheGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIHx8IDAgOiAwO1xuICB2YXIgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7IC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgcG9wcGVyIGlmIHRoZSBjZW50ZXIgcG9pbnQgaXNcbiAgLy8gb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGJvdW5kc1xuXG4gIHZhciBtaW4gPSBwYWRkaW5nT2JqZWN0W21pblByb3BdO1xuICB2YXIgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93UmVjdFtsZW5dIC0gcGFkZGluZ09iamVjdFttYXhQcm9wXTtcbiAgdmFyIGNlbnRlciA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dSZWN0W2xlbl0gLyAyICsgY2VudGVyVG9SZWZlcmVuY2U7XG4gIHZhciBvZmZzZXQgPSB3aXRoaW4obWluLCBjZW50ZXIsIG1heCk7IC8vIFByZXZlbnRzIGJyZWFraW5nIHN5bnRheCBoaWdobGlnaHRpbmcuLi5cblxuICB2YXIgYXhpc1Byb3AgPSBheGlzO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gKF9zdGF0ZSRtb2RpZmllcnNEYXRhJCA9IHt9LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSRbYXhpc1Byb3BdID0gb2Zmc2V0LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQuY2VudGVyT2Zmc2V0ID0gb2Zmc2V0IC0gY2VudGVyLCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQpO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQsXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyAnW2RhdGEtcG9wcGVyLWFycm93XScgOiBfb3B0aW9ucyRlbGVtZW50O1xuXG4gIGlmIChhcnJvd0VsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBDU1Mgc2VsZWN0b3JcblxuXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIGVsZW1lbnQgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCAobm90IGFuIFNWR0VsZW1lbnQpLicsICdUbyB1c2UgYW4gU1ZHIGFycm93LCB3cmFwIGl0IGluIGFuIEhUTUxFbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIGFzJywgJ3RoZSBhcnJvdy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGFpbnMoc3RhdGUuZWxlbWVudHMucG9wcGVyLCBhcnJvd0VsZW1lbnQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIG1vZGlmaWVyXFwncyBgZWxlbWVudGAgbXVzdCBiZSBhIGNoaWxkIG9mIHRoZSBwb3BwZXInLCAnZWxlbWVudC4nXS5qb2luKCcgJykpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0YXRlLmVsZW1lbnRzLmFycm93ID0gYXJyb3dFbGVtZW50O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYXJyb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogYXJyb3csXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J11cbn07IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xufSIsICJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHVuc2V0U2lkZXMgPSB7XG4gIHRvcDogJ2F1dG8nLFxuICByaWdodDogJ2F1dG8nLFxuICBib3R0b206ICdhdXRvJyxcbiAgbGVmdDogJ2F1dG8nXG59OyAvLyBSb3VuZCB0aGUgb2Zmc2V0cyB0byB0aGUgbmVhcmVzdCBzdWl0YWJsZSBzdWJwaXhlbCBiYXNlZCBvbiB0aGUgRFBSLlxuLy8gWm9vbWluZyBjYW4gY2hhbmdlIHRoZSBEUFIsIGJ1dCBpdCBzZWVtcyB0byByZXBvcnQgYSB2YWx1ZSB0aGF0IHdpbGxcbi8vIGNsZWFubHkgZGl2aWRlIHRoZSB2YWx1ZXMgaW50byB0aGUgYXBwcm9wcmlhdGUgc3VicGl4ZWxzLlxuXG5mdW5jdGlvbiByb3VuZE9mZnNldHNCeURQUihfcmVmKSB7XG4gIHZhciB4ID0gX3JlZi54LFxuICAgICAgeSA9IF9yZWYueTtcbiAgdmFyIHdpbiA9IHdpbmRvdztcbiAgdmFyIGRwciA9IHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gIHJldHVybiB7XG4gICAgeDogcm91bmQoeCAqIGRwcikgLyBkcHIgfHwgMCxcbiAgICB5OiByb3VuZCh5ICogZHByKSAvIGRwciB8fCAwXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBUb1N0eWxlcyhfcmVmMikge1xuICB2YXIgX09iamVjdCRhc3NpZ24yO1xuXG4gIHZhciBwb3BwZXIgPSBfcmVmMi5wb3BwZXIsXG4gICAgICBwb3BwZXJSZWN0ID0gX3JlZjIucG9wcGVyUmVjdCxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYyLnBsYWNlbWVudCxcbiAgICAgIHZhcmlhdGlvbiA9IF9yZWYyLnZhcmlhdGlvbixcbiAgICAgIG9mZnNldHMgPSBfcmVmMi5vZmZzZXRzLFxuICAgICAgcG9zaXRpb24gPSBfcmVmMi5wb3NpdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9yZWYyLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGFkYXB0aXZlID0gX3JlZjIuYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHMgPSBfcmVmMi5yb3VuZE9mZnNldHMsXG4gICAgICBpc0ZpeGVkID0gX3JlZjIuaXNGaXhlZDtcbiAgdmFyIF9vZmZzZXRzJHggPSBvZmZzZXRzLngsXG4gICAgICB4ID0gX29mZnNldHMkeCA9PT0gdm9pZCAwID8gMCA6IF9vZmZzZXRzJHgsXG4gICAgICBfb2Zmc2V0cyR5ID0gb2Zmc2V0cy55LFxuICAgICAgeSA9IF9vZmZzZXRzJHkgPT09IHZvaWQgMCA/IDAgOiBfb2Zmc2V0cyR5O1xuXG4gIHZhciBfcmVmMyA9IHR5cGVvZiByb3VuZE9mZnNldHMgPT09ICdmdW5jdGlvbicgPyByb3VuZE9mZnNldHMoe1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9KSA6IHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcblxuICB4ID0gX3JlZjMueDtcbiAgeSA9IF9yZWYzLnk7XG4gIHZhciBoYXNYID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneCcpO1xuICB2YXIgaGFzWSA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3knKTtcbiAgdmFyIHNpZGVYID0gbGVmdDtcbiAgdmFyIHNpZGVZID0gdG9wO1xuICB2YXIgd2luID0gd2luZG93O1xuXG4gIGlmIChhZGFwdGl2ZSkge1xuICAgIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKTtcbiAgICB2YXIgaGVpZ2h0UHJvcCA9ICdjbGllbnRIZWlnaHQnO1xuICAgIHZhciB3aWR0aFByb3AgPSAnY2xpZW50V2lkdGgnO1xuXG4gICAgaWYgKG9mZnNldFBhcmVudCA9PT0gZ2V0V2luZG93KHBvcHBlcikpIHtcbiAgICAgIG9mZnNldFBhcmVudCA9IGdldERvY3VtZW50RWxlbWVudChwb3BwZXIpO1xuXG4gICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uICE9PSAnc3RhdGljJyAmJiBwb3NpdGlvbiA9PT0gJ2Fic29sdXRlJykge1xuICAgICAgICBoZWlnaHRQcm9wID0gJ3Njcm9sbEhlaWdodCc7XG4gICAgICAgIHdpZHRoUHJvcCA9ICdzY3JvbGxXaWR0aCc7XG4gICAgICB9XG4gICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYXN0XTogZm9yY2UgdHlwZSByZWZpbmVtZW50LCB3ZSBjb21wYXJlIG9mZnNldFBhcmVudCB3aXRoIHdpbmRvdyBhYm92ZSwgYnV0IEZsb3cgZG9lc24ndCBkZXRlY3QgaXRcblxuXG4gICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50O1xuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gdG9wIHx8IChwbGFjZW1lbnQgPT09IGxlZnQgfHwgcGxhY2VtZW50ID09PSByaWdodCkgJiYgdmFyaWF0aW9uID09PSBlbmQpIHtcbiAgICAgIHNpZGVZID0gYm90dG9tO1xuICAgICAgdmFyIG9mZnNldFkgPSBpc0ZpeGVkICYmIG9mZnNldFBhcmVudCA9PT0gd2luICYmIHdpbi52aXN1YWxWaWV3cG9ydCA/IHdpbi52aXN1YWxWaWV3cG9ydC5oZWlnaHQgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIG9mZnNldFBhcmVudFtoZWlnaHRQcm9wXTtcbiAgICAgIHkgLT0gb2Zmc2V0WSAtIHBvcHBlclJlY3QuaGVpZ2h0O1xuICAgICAgeSAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gbGVmdCB8fCAocGxhY2VtZW50ID09PSB0b3AgfHwgcGxhY2VtZW50ID09PSBib3R0b20pICYmIHZhcmlhdGlvbiA9PT0gZW5kKSB7XG4gICAgICBzaWRlWCA9IHJpZ2h0O1xuICAgICAgdmFyIG9mZnNldFggPSBpc0ZpeGVkICYmIG9mZnNldFBhcmVudCA9PT0gd2luICYmIHdpbi52aXN1YWxWaWV3cG9ydCA/IHdpbi52aXN1YWxWaWV3cG9ydC53aWR0aCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgb2Zmc2V0UGFyZW50W3dpZHRoUHJvcF07XG4gICAgICB4IC09IG9mZnNldFggLSBwb3BwZXJSZWN0LndpZHRoO1xuICAgICAgeCAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vblN0eWxlcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIHBvc2l0aW9uOiBwb3NpdGlvblxuICB9LCBhZGFwdGl2ZSAmJiB1bnNldFNpZGVzKTtcblxuICB2YXIgX3JlZjQgPSByb3VuZE9mZnNldHMgPT09IHRydWUgPyByb3VuZE9mZnNldHNCeURQUih7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH0pIDoge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xuXG4gIHggPSBfcmVmNC54O1xuICB5ID0gX3JlZjQueTtcblxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uKSB7XG4gICAgdmFyIF9PYmplY3QkYXNzaWduO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduID0ge30sIF9PYmplY3QkYXNzaWduW3NpZGVZXSA9IGhhc1kgPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ25bc2lkZVhdID0gaGFzWCA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbi50cmFuc2Zvcm0gPSAod2luLmRldmljZVBpeGVsUmF0aW8gfHwgMSkgPD0gMSA/IFwidHJhbnNsYXRlKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgpXCIgOiBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIDApXCIsIF9PYmplY3QkYXNzaWduKSk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24yID0ge30sIF9PYmplY3QkYXNzaWduMltzaWRlWV0gPSBoYXNZID8geSArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjJbc2lkZVhdID0gaGFzWCA/IHggKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yLnRyYW5zZm9ybSA9ICcnLCBfT2JqZWN0JGFzc2lnbjIpKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVN0eWxlcyhfcmVmNSkge1xuICB2YXIgc3RhdGUgPSBfcmVmNS5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmNS5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID0gb3B0aW9ucy5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRncHVBY2NlbGVyYXQsXG4gICAgICBfb3B0aW9ucyRhZGFwdGl2ZSA9IG9wdGlvbnMuYWRhcHRpdmUsXG4gICAgICBhZGFwdGl2ZSA9IF9vcHRpb25zJGFkYXB0aXZlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWRhcHRpdmUsXG4gICAgICBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPSBvcHRpb25zLnJvdW5kT2Zmc2V0cyxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJvdW5kT2Zmc2V0cztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSA9IGdldENvbXB1dGVkU3R5bGUoc3RhdGUuZWxlbWVudHMucG9wcGVyKS50cmFuc2l0aW9uUHJvcGVydHkgfHwgJyc7XG5cbiAgICBpZiAoYWRhcHRpdmUgJiYgWyd0cmFuc2Zvcm0nLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uc29tZShmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0cmFuc2l0aW9uUHJvcGVydHkuaW5kZXhPZihwcm9wZXJ0eSkgPj0gMDtcbiAgICB9KSkge1xuICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBEZXRlY3RlZCBDU1MgdHJhbnNpdGlvbnMgb24gYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcnLCAnQ1NTIHByb3BlcnRpZXM6IFwidHJhbnNmb3JtXCIsIFwidG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIuJywgJ1xcblxcbicsICdEaXNhYmxlIHRoZSBcImNvbXB1dGVTdHlsZXNcIiBtb2RpZmllclxcJ3MgYGFkYXB0aXZlYCBvcHRpb24gdG8gYWxsb3cnLCAnZm9yIHNtb290aCB0cmFuc2l0aW9ucywgb3IgcmVtb3ZlIHRoZXNlIHByb3BlcnRpZXMgZnJvbSB0aGUgQ1NTJywgJ3RyYW5zaXRpb24gZGVjbGFyYXRpb24gb24gdGhlIHBvcHBlciBlbGVtZW50IGlmIG9ubHkgdHJhbnNpdGlvbmluZycsICdvcGFjaXR5IG9yIGJhY2tncm91bmQtY29sb3IgZm9yIGV4YW1wbGUuJywgJ1xcblxcbicsICdXZSByZWNvbW1lbmQgdXNpbmcgdGhlIHBvcHBlciBlbGVtZW50IGFzIGEgd3JhcHBlciBhcm91bmQgYW4gaW5uZXInLCAnZWxlbWVudCB0aGF0IGNhbiBoYXZlIGFueSBDU1MgcHJvcGVydHkgdHJhbnNpdGlvbmVkIGZvciBhbmltYXRpb25zLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vblN0eWxlcyA9IHtcbiAgICBwbGFjZW1lbnQ6IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KSxcbiAgICB2YXJpYXRpb246IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHBvcHBlcjogc3RhdGUuZWxlbWVudHMucG9wcGVyLFxuICAgIHBvcHBlclJlY3Q6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBncHVBY2NlbGVyYXRpb246IGdwdUFjY2VsZXJhdGlvbixcbiAgICBpc0ZpeGVkOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnXG4gIH07XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5wb3BwZXIsIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLFxuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBhZGFwdGl2ZTogYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHM6IHJvdW5kT2Zmc2V0c1xuICAgIH0pKSk7XG4gIH1cblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLmFycm93ID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLmFycm93LCBtYXBUb1N0eWxlcyhPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3csXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGFkYXB0aXZlOiBmYWxzZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcGxhY2VtZW50Jzogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICBmbjogY29tcHV0ZVN0eWxlcyxcbiAgZGF0YToge31cbn07IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRXaW5kb3cuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgcGFzc2l2ZSA9IHtcbiAgcGFzc2l2ZTogdHJ1ZVxufTtcblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIGluc3RhbmNlID0gX3JlZi5pbnN0YW5jZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRzY3JvbGwgPSBvcHRpb25zLnNjcm9sbCxcbiAgICAgIHNjcm9sbCA9IF9vcHRpb25zJHNjcm9sbCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHNjcm9sbCxcbiAgICAgIF9vcHRpb25zJHJlc2l6ZSA9IG9wdGlvbnMucmVzaXplLFxuICAgICAgcmVzaXplID0gX29wdGlvbnMkcmVzaXplID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkcmVzaXplO1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KHN0YXRlLmVsZW1lbnRzLnBvcHBlcik7XG4gIHZhciBzY3JvbGxQYXJlbnRzID0gW10uY29uY2F0KHN0YXRlLnNjcm9sbFBhcmVudHMucmVmZXJlbmNlLCBzdGF0ZS5zY3JvbGxQYXJlbnRzLnBvcHBlcik7XG5cbiAgaWYgKHNjcm9sbCkge1xuICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICBzY3JvbGxQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChyZXNpemUpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNjcm9sbCkge1xuICAgICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgICAgc2Nyb2xsUGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVzaXplKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICB9XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdldmVudExpc3RlbmVycycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogZnVuY3Rpb24gZm4oKSB7fSxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIGRhdGE6IHt9XG59OyIsICJ2YXIgaGFzaCA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgYm90dG9tOiAndG9wJyxcbiAgdG9wOiAnYm90dG9tJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iLCAidmFyIGhhc2ggPSB7XG4gIHN0YXJ0OiAnZW5kJyxcbiAgZW5kOiAnc3RhcnQnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvc3RhcnR8ZW5kL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSIsICJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsKG5vZGUpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhub2RlKTtcbiAgdmFyIHNjcm9sbExlZnQgPSB3aW4ucGFnZVhPZmZzZXQ7XG4gIHZhciBzY3JvbGxUb3AgPSB3aW4ucGFnZVlPZmZzZXQ7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICB9O1xufSIsICJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpIHtcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxuICAvLyBpbmNvcnJlY3QgZm9yIFJUTC5cbiAgLy8gUG9wcGVyIDEgaXMgYnJva2VuIGluIHRoaXMgY2FzZSBhbmQgbmV2ZXIgaGFkIGEgYnVnIHJlcG9ydCBzbyBsZXQncyBhc3N1bWVcbiAgLy8gaXQncyBub3QgYW4gaXNzdWUuIEkgZG9uJ3QgdGhpbmsgYW55b25lIGV2ZXIgc3BlY2lmaWVzIHdpZHRoIG9uIDxodG1sPlxuICAvLyBhbnl3YXkuXG4gIC8vIEJyb3dzZXJzIHdoZXJlIHRoZSBsZWZ0IHNjcm9sbGJhciBkb2Vzbid0IGNhdXNlIGFuIGlzc3VlIHJlcG9ydCBgMGAgZm9yXG4gIC8vIHRoaXMgKGUuZy4gRWRnZSAyMDE5LCBJRTExLCBTYWZhcmkpXG4gIHJldHVybiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKS5sZWZ0ICsgZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG59IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGlzTGF5b3V0Vmlld3BvcnQgZnJvbSBcIi4vaXNMYXlvdXRWaWV3cG9ydC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgdmlzdWFsVmlld3BvcnQgPSB3aW4udmlzdWFsVmlld3BvcnQ7XG4gIHZhciB3aWR0aCA9IGh0bWwuY2xpZW50V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBodG1sLmNsaWVudEhlaWdodDtcbiAgdmFyIHggPSAwO1xuICB2YXIgeSA9IDA7XG5cbiAgaWYgKHZpc3VhbFZpZXdwb3J0KSB7XG4gICAgd2lkdGggPSB2aXN1YWxWaWV3cG9ydC53aWR0aDtcbiAgICBoZWlnaHQgPSB2aXN1YWxWaWV3cG9ydC5oZWlnaHQ7XG4gICAgdmFyIGxheW91dFZpZXdwb3J0ID0gaXNMYXlvdXRWaWV3cG9ydCgpO1xuXG4gICAgaWYgKGxheW91dFZpZXdwb3J0IHx8ICFsYXlvdXRWaWV3cG9ydCAmJiBzdHJhdGVneSA9PT0gJ2ZpeGVkJykge1xuICAgICAgeCA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQ7XG4gICAgICB5ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHggKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpLFxuICAgIHk6IHlcbiAgfTtcbn0iLCAiaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5pbXBvcnQgeyBtYXggfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiOyAvLyBHZXRzIHRoZSBlbnRpcmUgc2l6ZSBvZiB0aGUgc2Nyb2xsYWJsZSBkb2N1bWVudCBhcmVhLCBldmVuIGV4dGVuZGluZyBvdXRzaWRlXG4vLyBvZiB0aGUgYDxodG1sPmAgYW5kIGA8Ym9keT5gIHJlY3QgYm91bmRzIGlmIGhvcml6b250YWxseSBzY3JvbGxhYmxlXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB3aW5TY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCk7XG4gIHZhciBib2R5ID0gKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5O1xuICB2YXIgd2lkdGggPSBtYXgoaHRtbC5zY3JvbGxXaWR0aCwgaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuc2Nyb2xsV2lkdGggOiAwLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApO1xuICB2YXIgaGVpZ2h0ID0gbWF4KGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgYm9keSA/IGJvZHkuc2Nyb2xsSGVpZ2h0IDogMCwgYm9keSA/IGJvZHkuY2xpZW50SGVpZ2h0IDogMCk7XG4gIHZhciB4ID0gLXdpblNjcm9sbC5zY3JvbGxMZWZ0ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgdmFyIHkgPSAtd2luU2Nyb2xsLnNjcm9sbFRvcDtcblxuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShib2R5IHx8IGh0bWwpLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICB4ICs9IG1heChodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApIC0gd2lkdGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn0iLCAiaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBGaXJlZm94IHdhbnRzIHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG4gIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dZO1xuXG4gIHJldHVybiAvYXV0b3xzY3JvbGx8b3ZlcmxheXxoaWRkZW4vLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpO1xufSIsICJpbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7XG4gIGlmIChbJ2h0bWwnLCAnYm9keScsICcjZG9jdW1lbnQnXS5pbmRleE9mKGdldE5vZGVOYW1lKG5vZGUpKSA+PSAwKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGlmIChpc0hUTUxFbGVtZW50KG5vZGUpICYmIGlzU2Nyb2xsUGFyZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUobm9kZSkpO1xufSIsICJpbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gXCIuL2dldFNjcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuLypcbmdpdmVuIGEgRE9NIGVsZW1lbnQsIHJldHVybiB0aGUgbGlzdCBvZiBhbGwgc2Nyb2xsIHBhcmVudHMsIHVwIHRoZSBsaXN0IG9mIGFuY2Vzb3JzXG51bnRpbCB3ZSBnZXQgdG8gdGhlIHRvcCB3aW5kb3cgb2JqZWN0LiBUaGlzIGxpc3QgaXMgd2hhdCB3ZSBhdHRhY2ggc2Nyb2xsIGxpc3RlbmVyc1xudG8sIGJlY2F1c2UgaWYgYW55IG9mIHRoZXNlIHBhcmVudCBlbGVtZW50cyBzY3JvbGwsIHdlJ2xsIG5lZWQgdG8gcmUtY2FsY3VsYXRlIHRoZVxucmVmZXJlbmNlIGVsZW1lbnQncyBwb3NpdGlvbi5cbiovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RTY3JvbGxQYXJlbnRzKGVsZW1lbnQsIGxpc3QpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICBpZiAobGlzdCA9PT0gdm9pZCAwKSB7XG4gICAgbGlzdCA9IFtdO1xuICB9XG5cbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50KTtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudCA9PT0gKChfZWxlbWVudCRvd25lckRvY3VtZW4gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZWxlbWVudCRvd25lckRvY3VtZW4uYm9keSk7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coc2Nyb2xsUGFyZW50KTtcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IFt3aW5dLmNvbmNhdCh3aW4udmlzdWFsVmlld3BvcnQgfHwgW10sIGlzU2Nyb2xsUGFyZW50KHNjcm9sbFBhcmVudCkgPyBzY3JvbGxQYXJlbnQgOiBbXSkgOiBzY3JvbGxQYXJlbnQ7XG4gIHZhciB1cGRhdGVkTGlzdCA9IGxpc3QuY29uY2F0KHRhcmdldCk7XG4gIHJldHVybiBpc0JvZHkgPyB1cGRhdGVkTGlzdCA6IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBpc0JvZHkgdGVsbHMgdXMgdGFyZ2V0IHdpbGwgYmUgYW4gSFRNTEVsZW1lbnQgaGVyZVxuICB1cGRhdGVkTGlzdC5jb25jYXQobGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZSh0YXJnZXQpKSk7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlY3RUb0NsaWVudFJlY3QocmVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcmVjdCwge1xuICAgIGxlZnQ6IHJlY3QueCxcbiAgICB0b3A6IHJlY3QueSxcbiAgICByaWdodDogcmVjdC54ICsgcmVjdC53aWR0aCxcbiAgICBib3R0b206IHJlY3QueSArIHJlY3QuaGVpZ2h0XG4gIH0pO1xufSIsICJpbXBvcnQgeyB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZpZXdwb3J0UmVjdCBmcm9tIFwiLi9nZXRWaWV3cG9ydFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudFJlY3QgZnJvbSBcIi4vZ2V0RG9jdW1lbnRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi4vdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgbWF4LCBtaW4gfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBzdHJhdGVneSkge1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBmYWxzZSwgc3RyYXRlZ3kgPT09ICdmaXhlZCcpO1xuICByZWN0LnRvcCA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRUb3A7XG4gIHJlY3QubGVmdCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50TGVmdDtcbiAgcmVjdC5ib3R0b20gPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnJpZ2h0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC53aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3QuaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QueCA9IHJlY3QubGVmdDtcbiAgcmVjdC55ID0gcmVjdC50b3A7XG4gIHJldHVybiByZWN0O1xufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpIHtcbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50ID09PSB2aWV3cG9ydCA/IHJlY3RUb0NsaWVudFJlY3QoZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSkgOiBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpID8gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoY2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KSA6IHJlY3RUb0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkpO1xufSAvLyBBIFwiY2xpcHBpbmcgcGFyZW50XCIgaXMgYW4gb3ZlcmZsb3dhYmxlIGNvbnRhaW5lciB3aXRoIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZlxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgb3ZlcmZsb3dpbmcgZWxlbWVudHMgd2l0aCBhIHBvc2l0aW9uIGRpZmZlcmVudCBmcm9tXG4vLyBgaW5pdGlhbGBcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkge1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gbGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG4gIHZhciBjYW5Fc2NhcGVDbGlwcGluZyA9IFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24pID49IDA7XG4gIHZhciBjbGlwcGVyRWxlbWVudCA9IGNhbkVzY2FwZUNsaXBwaW5nICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuXG4gIGlmICghaXNFbGVtZW50KGNsaXBwZXJFbGVtZW50KSkge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTQxNFxuXG5cbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNsaXBwaW5nUGFyZW50KSB7XG4gICAgcmV0dXJuIGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgJiYgY29udGFpbnMoY2xpcHBpbmdQYXJlbnQsIGNsaXBwZXJFbGVtZW50KSAmJiBnZXROb2RlTmFtZShjbGlwcGluZ1BhcmVudCkgIT09ICdib2R5JztcbiAgfSk7XG59IC8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2Zcbi8vIGNsaXBwaW5nIHBhcmVudHNcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoZWxlbWVudCwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSwgc3RyYXRlZ3kpIHtcbiAgdmFyIG1haW5DbGlwcGluZ1BhcmVudHMgPSBib3VuZGFyeSA9PT0gJ2NsaXBwaW5nUGFyZW50cycgPyBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkgOiBbXS5jb25jYXQoYm91bmRhcnkpO1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gW10uY29uY2F0KG1haW5DbGlwcGluZ1BhcmVudHMsIFtyb290Qm91bmRhcnldKTtcbiAgdmFyIGZpcnN0Q2xpcHBpbmdQYXJlbnQgPSBjbGlwcGluZ1BhcmVudHNbMF07XG4gIHZhciBjbGlwcGluZ1JlY3QgPSBjbGlwcGluZ1BhcmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2NSZWN0LCBjbGlwcGluZ1BhcmVudCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KTtcbiAgICBhY2NSZWN0LnRvcCA9IG1heChyZWN0LnRvcCwgYWNjUmVjdC50b3ApO1xuICAgIGFjY1JlY3QucmlnaHQgPSBtaW4ocmVjdC5yaWdodCwgYWNjUmVjdC5yaWdodCk7XG4gICAgYWNjUmVjdC5ib3R0b20gPSBtaW4ocmVjdC5ib3R0b20sIGFjY1JlY3QuYm90dG9tKTtcbiAgICBhY2NSZWN0LmxlZnQgPSBtYXgocmVjdC5sZWZ0LCBhY2NSZWN0LmxlZnQpO1xuICAgIHJldHVybiBhY2NSZWN0O1xuICB9LCBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBmaXJzdENsaXBwaW5nUGFyZW50LCBzdHJhdGVneSkpO1xuICBjbGlwcGluZ1JlY3Qud2lkdGggPSBjbGlwcGluZ1JlY3QucmlnaHQgLSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LmhlaWdodCA9IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wO1xuICBjbGlwcGluZ1JlY3QueCA9IGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QueSA9IGNsaXBwaW5nUmVjdC50b3A7XG4gIHJldHVybiBjbGlwcGluZ1JlY3Q7XG59IiwgImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCBzdGFydCwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciByZWZlcmVuY2UgPSBfcmVmLnJlZmVyZW5jZSxcbiAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQgPyBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50ID8gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGVsZW1lbnQud2lkdGggLyAyO1xuICB2YXIgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBlbGVtZW50LmhlaWdodCAvIDI7XG4gIHZhciBvZmZzZXRzO1xuXG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgdG9wOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBlbGVtZW50LmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBib3R0b206XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcmlnaHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBsZWZ0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggLSBlbGVtZW50LndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG5cbiAgdmFyIG1haW5BeGlzID0gYmFzZVBsYWNlbWVudCA/IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KSA6IG51bGw7XG5cbiAgaWYgKG1haW5BeGlzICE9IG51bGwpIHtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHN3aXRjaCAodmFyaWF0aW9uKSB7XG4gICAgICBjYXNlIHN0YXJ0OlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdIC0gKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBlbmQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gKyAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufSIsICJpbXBvcnQgZ2V0Q2xpcHBpbmdSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4vY29tcHV0ZU9mZnNldHMuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuL3JlY3RUb0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCB7IGNsaXBwaW5nUGFyZW50cywgcmVmZXJlbmNlLCBwb3BwZXIsIGJvdHRvbSwgdG9wLCByaWdodCwgYmFzZVBsYWNlbWVudHMsIHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSBcIi4vbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuL2V4cGFuZFRvSGFzaE1hcC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRldGVjdE92ZXJmbG93KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyBzdGF0ZS5wbGFjZW1lbnQgOiBfb3B0aW9ucyRwbGFjZW1lbnQsXG4gICAgICBfb3B0aW9ucyRzdHJhdGVneSA9IF9vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgc3RyYXRlZ3kgPSBfb3B0aW9ucyRzdHJhdGVneSA9PT0gdm9pZCAwID8gc3RhdGUuc3RyYXRlZ3kgOiBfb3B0aW9ucyRzdHJhdGVneSxcbiAgICAgIF9vcHRpb25zJGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zJGJvdW5kYXJ5ID09PSB2b2lkIDAgPyBjbGlwcGluZ1BhcmVudHMgOiBfb3B0aW9ucyRib3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9PT0gdm9pZCAwID8gdmlld3BvcnQgOiBfb3B0aW9ucyRyb290Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRlbGVtZW50Q29udGUgPSBfb3B0aW9ucy5lbGVtZW50Q29udGV4dCxcbiAgICAgIGVsZW1lbnRDb250ZXh0ID0gX29wdGlvbnMkZWxlbWVudENvbnRlID09PSB2b2lkIDAgPyBwb3BwZXIgOiBfb3B0aW9ucyRlbGVtZW50Q29udGUsXG4gICAgICBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9IF9vcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zJHBhZGRpbmcgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRwYWRkaW5nO1xuICB2YXIgcGFkZGluZ09iamVjdCA9IG1lcmdlUGFkZGluZ09iamVjdCh0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcicgPyBwYWRkaW5nIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKSk7XG4gIHZhciBhbHRDb250ZXh0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHJlZmVyZW5jZSA6IHBvcHBlcjtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbYWx0Qm91bmRhcnkgPyBhbHRDb250ZXh0IDogZWxlbWVudENvbnRleHRdO1xuICB2YXIgY2xpcHBpbmdDbGllbnRSZWN0ID0gZ2V0Q2xpcHBpbmdSZWN0KGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQgOiBlbGVtZW50LmNvbnRleHRFbGVtZW50IHx8IGdldERvY3VtZW50RWxlbWVudChzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5LCBzdHJhdGVneSk7XG4gIHZhciByZWZlcmVuY2VDbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHN0YXRlLmVsZW1lbnRzLnJlZmVyZW5jZSk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlQ2xpZW50UmVjdCxcbiAgICBlbGVtZW50OiBwb3BwZXJSZWN0LFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pO1xuICB2YXIgcG9wcGVyQ2xpZW50UmVjdCA9IHJlY3RUb0NsaWVudFJlY3QoT2JqZWN0LmFzc2lnbih7fSwgcG9wcGVyUmVjdCwgcG9wcGVyT2Zmc2V0cykpO1xuICB2YXIgZWxlbWVudENsaWVudFJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcG9wcGVyQ2xpZW50UmVjdCA6IHJlZmVyZW5jZUNsaWVudFJlY3Q7IC8vIHBvc2l0aXZlID0gb3ZlcmZsb3dpbmcgdGhlIGNsaXBwaW5nIHJlY3RcbiAgLy8gMCBvciBuZWdhdGl2ZSA9IHdpdGhpbiB0aGUgY2xpcHBpbmcgcmVjdFxuXG4gIHZhciBvdmVyZmxvd09mZnNldHMgPSB7XG4gICAgdG9wOiBjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3AsXG4gICAgYm90dG9tOiBlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20sXG4gICAgbGVmdDogY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0LFxuICAgIHJpZ2h0OiBlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHRcbiAgfTtcbiAgdmFyIG9mZnNldERhdGEgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldDsgLy8gT2Zmc2V0cyBjYW4gYmUgYXBwbGllZCBvbmx5IHRvIHRoZSBwb3BwZXIgZWxlbWVudFxuXG4gIGlmIChlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyICYmIG9mZnNldERhdGEpIHtcbiAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0RGF0YVtwbGFjZW1lbnRdO1xuICAgIE9iamVjdC5rZXlzKG92ZXJmbG93T2Zmc2V0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbXVsdGlwbHkgPSBbcmlnaHQsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAxIDogLTE7XG4gICAgICB2YXIgYXhpcyA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAneScgOiAneCc7XG4gICAgICBvdmVyZmxvd09mZnNldHNba2V5XSArPSBvZmZzZXRbYXhpc10gKiBtdWx0aXBseTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdmVyZmxvd09mZnNldHM7XG59IiwgImltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyB2YXJpYXRpb25QbGFjZW1lbnRzLCBiYXNlUGxhY2VtZW50cywgcGxhY2VtZW50cyBhcyBhbGxQbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9IF9vcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9PT0gdm9pZCAwID8gYWxsUGxhY2VtZW50cyA6IF9vcHRpb25zJGFsbG93ZWRBdXRvUDtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpO1xuICB2YXIgcGxhY2VtZW50cyA9IHZhcmlhdGlvbiA/IGZsaXBWYXJpYXRpb25zID8gdmFyaWF0aW9uUGxhY2VtZW50cyA6IHZhcmlhdGlvblBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHZhcmlhdGlvbjtcbiAgfSkgOiBiYXNlUGxhY2VtZW50cztcbiAgdmFyIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhbGxvd2VkQXV0b1BsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpID49IDA7XG4gIH0pO1xuXG4gIGlmIChhbGxvd2VkUGxhY2VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBUaGUgYGFsbG93ZWRBdXRvUGxhY2VtZW50c2Agb3B0aW9uIGRpZCBub3QgYWxsb3cgYW55JywgJ3BsYWNlbWVudHMuIEVuc3VyZSB0aGUgYHBsYWNlbWVudGAgb3B0aW9uIG1hdGNoZXMgdGhlIHZhcmlhdGlvbicsICdvZiB0aGUgYWxsb3dlZCBwbGFjZW1lbnRzLicsICdGb3IgZXhhbXBsZSwgXCJhdXRvXCIgY2Fubm90IGJlIHVzZWQgdG8gYWxsb3cgXCJib3R0b20tc3RhcnRcIi4nLCAnVXNlIFwiYXV0by1zdGFydFwiIGluc3RlYWQuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV06IEZsb3cgc2VlbXMgdG8gaGF2ZSBwcm9ibGVtcyB3aXRoIHR3byBhcnJheSB1bmlvbnMuLi5cblxuXG4gIHZhciBvdmVyZmxvd3MgPSBhbGxvd2VkUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KVtnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCldO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG92ZXJmbG93cykuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBvdmVyZmxvd3NbYV0gLSBvdmVyZmxvd3NbYl07XG4gIH0pO1xufSIsICJpbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVBdXRvUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgYm90dG9tLCB0b3AsIHN0YXJ0LCByaWdodCwgbGVmdCwgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZnVuY3Rpb24gZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocGxhY2VtZW50KSB7XG4gIGlmIChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgb3Bwb3NpdGVQbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICByZXR1cm4gW2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCksIG9wcG9zaXRlUGxhY2VtZW50LCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCldO1xufVxuXG5mdW5jdGlvbiBmbGlwKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzID0gb3B0aW9ucy5mYWxsYmFja1BsYWNlbWVudHMsXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPSBvcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRmbGlwVmFyaWF0aW8sXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBvcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cztcbiAgdmFyIHByZWZlcnJlZFBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9IGJhc2VQbGFjZW1lbnQgPT09IHByZWZlcnJlZFBsYWNlbWVudDtcbiAgdmFyIGZhbGxiYWNrUGxhY2VtZW50cyA9IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyB8fCAoaXNCYXNlUGxhY2VtZW50IHx8ICFmbGlwVmFyaWF0aW9ucyA/IFtnZXRPcHBvc2l0ZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpXSA6IGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHByZWZlcnJlZFBsYWNlbWVudCkpO1xuICB2YXIgcGxhY2VtZW50cyA9IFtwcmVmZXJyZWRQbGFjZW1lbnRdLmNvbmNhdChmYWxsYmFja1BsYWNlbWVudHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8gPyBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9uczogZmxpcFZhcmlhdGlvbnMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHM6IGFsbG93ZWRBdXRvUGxhY2VtZW50c1xuICAgIH0pIDogcGxhY2VtZW50KTtcbiAgfSwgW10pO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBjaGVja3NNYXAgPSBuZXcgTWFwKCk7XG4gIHZhciBtYWtlRmFsbGJhY2tDaGVja3MgPSB0cnVlO1xuICB2YXIgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50c1swXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYWNlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGxhY2VtZW50ID0gcGxhY2VtZW50c1tpXTtcblxuICAgIHZhciBfYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBpc1N0YXJ0VmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHN0YXJ0O1xuICAgIHZhciBpc1ZlcnRpY2FsID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKF9iYXNlUGxhY2VtZW50KSA+PSAwO1xuICAgIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pO1xuICAgIHZhciBtYWluVmFyaWF0aW9uU2lkZSA9IGlzVmVydGljYWwgPyBpc1N0YXJ0VmFyaWF0aW9uID8gcmlnaHQgOiBsZWZ0IDogaXNTdGFydFZhcmlhdGlvbiA/IGJvdHRvbSA6IHRvcDtcblxuICAgIGlmIChyZWZlcmVuY2VSZWN0W2xlbl0gPiBwb3BwZXJSZWN0W2xlbl0pIHtcbiAgICAgIG1haW5WYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIH1cblxuICAgIHZhciBhbHRWYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIHZhciBjaGVja3MgPSBbXTtcblxuICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1tfYmFzZVBsYWNlbWVudF0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbbWFpblZhcmlhdGlvblNpZGVdIDw9IDAsIG92ZXJmbG93W2FsdFZhcmlhdGlvblNpZGVdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja3MuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICByZXR1cm4gY2hlY2s7XG4gICAgfSkpIHtcbiAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICAgIG1ha2VGYWxsYmFja0NoZWNrcyA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY2hlY2tzTWFwLnNldChwbGFjZW1lbnQsIGNoZWNrcyk7XG4gIH1cblxuICBpZiAobWFrZUZhbGxiYWNrQ2hlY2tzKSB7XG4gICAgLy8gYDJgIG1heSBiZSBkZXNpcmVkIGluIHNvbWUgY2FzZXMg4oCTIHJlc2VhcmNoIGxhdGVyXG4gICAgdmFyIG51bWJlck9mQ2hlY2tzID0gZmxpcFZhcmlhdGlvbnMgPyAzIDogMTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pKSB7XG4gICAgICB2YXIgZml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHMuZmluZChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgICAgIHZhciBjaGVja3MgPSBjaGVja3NNYXAuZ2V0KHBsYWNlbWVudCk7XG5cbiAgICAgICAgaWYgKGNoZWNrcykge1xuICAgICAgICAgIHJldHVybiBjaGVja3Muc2xpY2UoMCwgX2kpLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gZml0dGluZ1BsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgX2kgPSBudW1iZXJPZkNoZWNrczsgX2kgPiAwOyBfaS0tKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKF9pKTtcblxuICAgICAgaWYgKF9yZXQgPT09IFwiYnJlYWtcIikgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLnBsYWNlbWVudCAhPT0gZmlyc3RGaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCA9IHRydWU7XG4gICAgc3RhdGUucGxhY2VtZW50ID0gZmlyc3RGaXR0aW5nUGxhY2VtZW50O1xuICAgIHN0YXRlLnJlc2V0ID0gdHJ1ZTtcbiAgfVxufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZmxpcCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBmbGlwLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddLFxuICBkYXRhOiB7XG4gICAgX3NraXA6IGZhbHNlXG4gIH1cbn07IiwgImltcG9ydCB7IHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuXG5mdW5jdGlvbiBnZXRTaWRlT2Zmc2V0cyhvdmVyZmxvdywgcmVjdCwgcHJldmVudGVkT2Zmc2V0cykge1xuICBpZiAocHJldmVudGVkT2Zmc2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgcHJldmVudGVkT2Zmc2V0cyA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBvdmVyZmxvdy50b3AgLSByZWN0LmhlaWdodCAtIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICByaWdodDogb3ZlcmZsb3cucmlnaHQgLSByZWN0LndpZHRoICsgcHJldmVudGVkT2Zmc2V0cy54LFxuICAgIGJvdHRvbTogb3ZlcmZsb3cuYm90dG9tIC0gcmVjdC5oZWlnaHQgKyBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgbGVmdDogb3ZlcmZsb3cubGVmdCAtIHJlY3Qud2lkdGggLSBwcmV2ZW50ZWRPZmZzZXRzLnhcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG92ZXJmbG93KSB7XG4gIHJldHVybiBbdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XS5zb21lKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93W3NpZGVdID49IDA7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoaWRlKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHByZXZlbnRlZE9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdztcbiAgdmFyIHJlZmVyZW5jZU92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBlbGVtZW50Q29udGV4dDogJ3JlZmVyZW5jZSdcbiAgfSk7XG4gIHZhciBwb3BwZXJBbHRPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYWx0Qm91bmRhcnk6IHRydWVcbiAgfSk7XG4gIHZhciByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhyZWZlcmVuY2VPdmVyZmxvdywgcmVmZXJlbmNlUmVjdCk7XG4gIHZhciBwb3BwZXJFc2NhcGVPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocG9wcGVyQWx0T3ZlcmZsb3csIHBvcHBlclJlY3QsIHByZXZlbnRlZE9mZnNldHMpO1xuICB2YXIgaXNSZWZlcmVuY2VIaWRkZW4gPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzKTtcbiAgdmFyIGhhc1BvcHBlckVzY2FwZWQgPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocG9wcGVyRXNjYXBlT2Zmc2V0cyk7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSB7XG4gICAgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzOiByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMsXG4gICAgcG9wcGVyRXNjYXBlT2Zmc2V0czogcG9wcGVyRXNjYXBlT2Zmc2V0cyxcbiAgICBpc1JlZmVyZW5jZUhpZGRlbjogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgaGFzUG9wcGVyRXNjYXBlZDogaGFzUG9wcGVyRXNjYXBlZFxuICB9O1xuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLCB7XG4gICAgJ2RhdGEtcG9wcGVyLXJlZmVyZW5jZS1oaWRkZW4nOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICAnZGF0YS1wb3BwZXItZXNjYXBlZCc6IGhhc1BvcHBlckVzY2FwZWRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdoaWRlJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXSxcbiAgZm46IGhpZGVcbn07IiwgImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBwbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgcmVjdHMsIG9mZnNldCkge1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIGludmVydERpc3RhbmNlID0gW2xlZnQsIHRvcF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8gLTEgOiAxO1xuXG4gIHZhciBfcmVmID0gdHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IG9mZnNldChPYmplY3QuYXNzaWduKHt9LCByZWN0cywge1xuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pKSA6IG9mZnNldCxcbiAgICAgIHNraWRkaW5nID0gX3JlZlswXSxcbiAgICAgIGRpc3RhbmNlID0gX3JlZlsxXTtcblxuICBza2lkZGluZyA9IHNraWRkaW5nIHx8IDA7XG4gIGRpc3RhbmNlID0gKGRpc3RhbmNlIHx8IDApICogaW52ZXJ0RGlzdGFuY2U7XG4gIHJldHVybiBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IHtcbiAgICB4OiBkaXN0YW5jZSxcbiAgICB5OiBza2lkZGluZ1xuICB9IDoge1xuICAgIHg6IHNraWRkaW5nLFxuICAgIHk6IGRpc3RhbmNlXG4gIH07XG59XG5cbmZ1bmN0aW9uIG9mZnNldChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYyLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRvZmZzZXQgPSBvcHRpb25zLm9mZnNldCxcbiAgICAgIG9mZnNldCA9IF9vcHRpb25zJG9mZnNldCA9PT0gdm9pZCAwID8gWzAsIDBdIDogX29wdGlvbnMkb2Zmc2V0O1xuICB2YXIgZGF0YSA9IHBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCBzdGF0ZS5yZWN0cywgb2Zmc2V0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHZhciBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQgPSBkYXRhW3N0YXRlLnBsYWNlbWVudF0sXG4gICAgICB4ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50LngsXG4gICAgICB5ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50Lnk7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnggKz0geDtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueSArPSB5O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdvZmZzZXQnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIGZuOiBvZmZzZXRcbn07IiwgImltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tIFwiLi4vdXRpbHMvY29tcHV0ZU9mZnNldHMuanNcIjtcblxuZnVuY3Rpb24gcG9wcGVyT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICAvLyBPZmZzZXRzIGFyZSB0aGUgYWN0dWFsIHBvc2l0aW9uIHRoZSBwb3BwZXIgbmVlZHMgdG8gaGF2ZSB0byBiZVxuICAvLyBwcm9wZXJseSBwb3NpdGlvbmVkIG5lYXIgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgYmFzaWMgcGxhY2VtZW50LCBhbmQgd2lsbCBiZSBhZGp1c3RlZCBieVxuICAvLyB0aGUgbW9kaWZpZXJzIGluIHRoZSBuZXh0IHN0ZXBcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHN0YXRlLnJlY3RzLnJlZmVyZW5jZSxcbiAgICBlbGVtZW50OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwb3BwZXJPZmZzZXRzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdyZWFkJyxcbiAgZm46IHBvcHBlck9mZnNldHMsXG4gIGRhdGE6IHt9XG59OyIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBbHRBeGlzKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn0iLCAiaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCBzdGFydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldEFsdEF4aXMgZnJvbSBcIi4uL3V0aWxzL2dldEFsdEF4aXMuanNcIjtcbmltcG9ydCB7IHdpdGhpbiwgd2l0aGluTWF4Q2xhbXAgfSBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi4vdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzXCI7XG5pbXBvcnQgeyBtaW4gYXMgbWF0aE1pbiwgbWF4IGFzIG1hdGhNYXggfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXIgPSBvcHRpb25zLnRldGhlcixcbiAgICAgIHRldGhlciA9IF9vcHRpb25zJHRldGhlciA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHRldGhlcixcbiAgICAgIF9vcHRpb25zJHRldGhlck9mZnNldCA9IG9wdGlvbnMudGV0aGVyT2Zmc2V0LFxuICAgICAgdGV0aGVyT2Zmc2V0ID0gX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkdGV0aGVyT2Zmc2V0O1xuICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeVxuICB9KTtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9ICF2YXJpYXRpb247XG4gIHZhciBtYWluQXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGFsdEF4aXMgPSBnZXRBbHRBeGlzKG1haW5BeGlzKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IHRldGhlck9mZnNldChPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHRldGhlck9mZnNldDtcbiAgdmFyIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZSA9IHR5cGVvZiB0ZXRoZXJPZmZzZXRWYWx1ZSA9PT0gJ251bWJlcicgPyB7XG4gICAgbWFpbkF4aXM6IHRldGhlck9mZnNldFZhbHVlLFxuICAgIGFsdEF4aXM6IHRldGhlck9mZnNldFZhbHVlXG4gIH0gOiBPYmplY3QuYXNzaWduKHtcbiAgICBtYWluQXhpczogMCxcbiAgICBhbHRBeGlzOiAwXG4gIH0sIHRldGhlck9mZnNldFZhbHVlKTtcbiAgdmFyIG9mZnNldE1vZGlmaWVyU3RhdGUgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldCA/IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0W3N0YXRlLnBsYWNlbWVudF0gOiBudWxsO1xuICB2YXIgZGF0YSA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQ7XG5cbiAgICB2YXIgbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gdG9wIDogbGVmdDtcbiAgICB2YXIgYWx0U2lkZSA9IG1haW5BeGlzID09PSAneScgPyBib3R0b20gOiByaWdodDtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc107XG4gICAgdmFyIG1pbiA9IG9mZnNldCArIG92ZXJmbG93W21haW5TaWRlXTtcbiAgICB2YXIgbWF4ID0gb2Zmc2V0IC0gb3ZlcmZsb3dbYWx0U2lkZV07XG4gICAgdmFyIGFkZGl0aXZlID0gdGV0aGVyID8gLXBvcHBlclJlY3RbbGVuXSAvIDIgOiAwO1xuICAgIHZhciBtaW5MZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gcmVmZXJlbmNlUmVjdFtsZW5dIDogcG9wcGVyUmVjdFtsZW5dO1xuICAgIHZhciBtYXhMZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gLXBvcHBlclJlY3RbbGVuXSA6IC1yZWZlcmVuY2VSZWN0W2xlbl07IC8vIFdlIG5lZWQgdG8gaW5jbHVkZSB0aGUgYXJyb3cgaW4gdGhlIGNhbGN1bGF0aW9uIHNvIHRoZSBhcnJvdyBkb2Vzbid0IGdvXG4gICAgLy8gb3V0c2lkZSB0aGUgcmVmZXJlbmNlIGJvdW5kc1xuXG4gICAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICAgIHZhciBhcnJvd1JlY3QgPSB0ZXRoZXIgJiYgYXJyb3dFbGVtZW50ID8gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9O1xuICAgIHZhciBhcnJvd1BhZGRpbmdPYmplY3QgPSBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10gPyBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10ucGFkZGluZyA6IGdldEZyZXNoU2lkZU9iamVjdCgpO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNaW4gPSBhcnJvd1BhZGRpbmdPYmplY3RbbWFpblNpZGVdO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNYXggPSBhcnJvd1BhZGRpbmdPYmplY3RbYWx0U2lkZV07IC8vIElmIHRoZSByZWZlcmVuY2UgbGVuZ3RoIGlzIHNtYWxsZXIgdGhhbiB0aGUgYXJyb3cgbGVuZ3RoLCB3ZSBkb24ndCB3YW50XG4gICAgLy8gdG8gaW5jbHVkZSBpdHMgZnVsbCBzaXplIGluIHRoZSBjYWxjdWxhdGlvbi4gSWYgdGhlIHJlZmVyZW5jZSBpcyBzbWFsbFxuICAgIC8vIGFuZCBuZWFyIHRoZSBlZGdlIG9mIGEgYm91bmRhcnksIHRoZSBwb3BwZXIgY2FuIG92ZXJmbG93IGV2ZW4gaWYgdGhlXG4gICAgLy8gcmVmZXJlbmNlIGlzIG5vdCBvdmVyZmxvd2luZyBhcyB3ZWxsIChlLmcuIHZpcnR1YWwgZWxlbWVudHMgd2l0aCBub1xuICAgIC8vIHdpZHRoIG9yIGhlaWdodClcblxuICAgIHZhciBhcnJvd0xlbiA9IHdpdGhpbigwLCByZWZlcmVuY2VSZWN0W2xlbl0sIGFycm93UmVjdFtsZW5dKTtcbiAgICB2YXIgbWluT2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiAtIGFkZGl0aXZlIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXMgOiBtaW5MZW4gLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcztcbiAgICB2YXIgbWF4T2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gLXJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgKyBhZGRpdGl2ZSArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzIDogbWF4TGVuICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXM7XG4gICAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3cgJiYgZ2V0T2Zmc2V0UGFyZW50KHN0YXRlLmVsZW1lbnRzLmFycm93KTtcbiAgICB2YXIgY2xpZW50T2Zmc2V0ID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBtYWluQXhpcyA9PT0gJ3knID8gYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50VG9wIHx8IDAgOiBhcnJvd09mZnNldFBhcmVudC5jbGllbnRMZWZ0IHx8IDAgOiAwO1xuICAgIHZhciBvZmZzZXRNb2RpZmllclZhbHVlID0gKF9vZmZzZXRNb2RpZmllclN0YXRlJCA9IG9mZnNldE1vZGlmaWVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IG9mZnNldE1vZGlmaWVyU3RhdGVbbWFpbkF4aXNdKSAhPSBudWxsID8gX29mZnNldE1vZGlmaWVyU3RhdGUkIDogMDtcbiAgICB2YXIgdGV0aGVyTWluID0gb2Zmc2V0ICsgbWluT2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIGNsaWVudE9mZnNldDtcbiAgICB2YXIgdGV0aGVyTWF4ID0gb2Zmc2V0ICsgbWF4T2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZTtcbiAgICB2YXIgcHJldmVudGVkT2Zmc2V0ID0gd2l0aGluKHRldGhlciA/IG1hdGhNaW4obWluLCB0ZXRoZXJNaW4pIDogbWluLCBvZmZzZXQsIHRldGhlciA/IG1hdGhNYXgobWF4LCB0ZXRoZXJNYXgpIDogbWF4KTtcbiAgICBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldCAtIG9mZnNldDtcbiAgfVxuXG4gIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICB2YXIgX29mZnNldE1vZGlmaWVyU3RhdGUkMjtcblxuICAgIHZhciBfbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gdG9wIDogbGVmdDtcblxuICAgIHZhciBfYWx0U2lkZSA9IG1haW5BeGlzID09PSAneCcgPyBib3R0b20gOiByaWdodDtcblxuICAgIHZhciBfb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1thbHRBeGlzXTtcblxuICAgIHZhciBfbGVuID0gYWx0QXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gICAgdmFyIF9taW4gPSBfb2Zmc2V0ICsgb3ZlcmZsb3dbX21haW5TaWRlXTtcblxuICAgIHZhciBfbWF4ID0gX29mZnNldCAtIG92ZXJmbG93W19hbHRTaWRlXTtcblxuICAgIHZhciBpc09yaWdpblNpZGUgPSBbdG9wLCBsZWZ0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSA9IChfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyID0gb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb2Zmc2V0TW9kaWZpZXJTdGF0ZVthbHRBeGlzXSkgIT0gbnVsbCA/IF9vZmZzZXRNb2RpZmllclN0YXRlJDIgOiAwO1xuXG4gICAgdmFyIF90ZXRoZXJNaW4gPSBpc09yaWdpblNpZGUgPyBfbWluIDogX29mZnNldCAtIHJlZmVyZW5jZVJlY3RbX2xlbl0gLSBwb3BwZXJSZWN0W19sZW5dIC0gX29mZnNldE1vZGlmaWVyVmFsdWUgKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUuYWx0QXhpcztcblxuICAgIHZhciBfdGV0aGVyTWF4ID0gaXNPcmlnaW5TaWRlID8gX29mZnNldCArIHJlZmVyZW5jZVJlY3RbX2xlbl0gKyBwb3BwZXJSZWN0W19sZW5dIC0gX29mZnNldE1vZGlmaWVyVmFsdWUgLSBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUuYWx0QXhpcyA6IF9tYXg7XG5cbiAgICB2YXIgX3ByZXZlbnRlZE9mZnNldCA9IHRldGhlciAmJiBpc09yaWdpblNpZGUgPyB3aXRoaW5NYXhDbGFtcChfdGV0aGVyTWluLCBfb2Zmc2V0LCBfdGV0aGVyTWF4KSA6IHdpdGhpbih0ZXRoZXIgPyBfdGV0aGVyTWluIDogX21pbiwgX29mZnNldCwgdGV0aGVyID8gX3RldGhlck1heCA6IF9tYXgpO1xuXG4gICAgcG9wcGVyT2Zmc2V0c1thbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVthbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQgLSBfb2Zmc2V0O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogcHJldmVudE92ZXJmbG93LFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddXG59OyIsICJleHBvcnQgeyBkZWZhdWx0IGFzIGFwcGx5U3R5bGVzIH0gZnJvbSBcIi4vYXBwbHlTdHlsZXMuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYXJyb3cgfSBmcm9tIFwiLi9hcnJvdy5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjb21wdXRlU3R5bGVzIH0gZnJvbSBcIi4vY29tcHV0ZVN0eWxlcy5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBldmVudExpc3RlbmVycyB9IGZyb20gXCIuL2V2ZW50TGlzdGVuZXJzLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZsaXAgfSBmcm9tIFwiLi9mbGlwLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGhpZGUgfSBmcm9tIFwiLi9oaWRlLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG9mZnNldCB9IGZyb20gXCIuL29mZnNldC5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwb3BwZXJPZmZzZXRzIH0gZnJvbSBcIi4vcG9wcGVyT2Zmc2V0cy5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwcmV2ZW50T3ZlcmZsb3cgfSBmcm9tIFwiLi9wcmV2ZW50T3ZlcmZsb3cuanNcIjsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59IiwgImltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRIVE1MRWxlbWVudFNjcm9sbCBmcm9tIFwiLi9nZXRIVE1MRWxlbWVudFNjcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Tm9kZVNjcm9sbChub2RlKSB7XG4gIGlmIChub2RlID09PSBnZXRXaW5kb3cobm9kZSkgfHwgIWlzSFRNTEVsZW1lbnQobm9kZSkpIHtcbiAgICByZXR1cm4gZ2V0V2luZG93U2Nyb2xsKG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRIVE1MRWxlbWVudFNjcm9sbChub2RlKTtcbiAgfVxufSIsICJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldE5vZGVTY3JvbGwgZnJvbSBcIi4vZ2V0Tm9kZVNjcm9sbC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnRTY2FsZWQoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSByb3VuZChyZWN0LndpZHRoKSAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMTtcbiAgdmFyIHNjYWxlWSA9IHJvdW5kKHJlY3QuaGVpZ2h0KSAvIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IDE7XG4gIHJldHVybiBzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxO1xufSAvLyBSZXR1cm5zIHRoZSBjb21wb3NpdGUgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcG9zaXRlUmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50LCBpc0ZpeGVkKSB7XG4gIGlmIChpc0ZpeGVkID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnRJc1NjYWxlZCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBpc0VsZW1lbnRTY2FsZWQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50SXNTY2FsZWQsIGlzRml4ZWQpO1xuICB2YXIgc2Nyb2xsID0ge1xuICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwXG4gIH07XG4gIHZhciBvZmZzZXRzID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTA3OFxuICAgIGlzU2Nyb2xsUGFyZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBvZmZzZXRzID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCwgdHJ1ZSk7XG4gICAgICBvZmZzZXRzLnggKz0gb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgKz0gb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgb2Zmc2V0cy54ID0gZ2V0V2luZG93U2Nyb2xsQmFyWChkb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLSBvZmZzZXRzLngsXG4gICAgeTogcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgfTtcbn0iLCAiaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQnlOYW1lKG1vZGlmaWVycykge1xuICB2YXIgbWVyZ2VkID0gbW9kaWZpZXJzLnJlZHVjZShmdW5jdGlvbiAobWVyZ2VkLCBjdXJyZW50KSB7XG4gICAgdmFyIGV4aXN0aW5nID0gbWVyZ2VkW2N1cnJlbnQubmFtZV07XG4gICAgbWVyZ2VkW2N1cnJlbnQubmFtZV0gPSBleGlzdGluZyA/IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLCBjdXJyZW50LCB7XG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5vcHRpb25zLCBjdXJyZW50Lm9wdGlvbnMpLFxuICAgICAgZGF0YTogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcuZGF0YSwgY3VycmVudC5kYXRhKVxuICAgIH0pIDogY3VycmVudDtcbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9LCB7fSk7IC8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCBPYmplY3QudmFsdWVzXG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1lcmdlZCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gbWVyZ2VkW2tleV07XG4gIH0pO1xufSIsICJpbXBvcnQgZ2V0Q29tcG9zaXRlUmVjdCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBvcmRlck1vZGlmaWVycyBmcm9tIFwiLi91dGlscy9vcmRlck1vZGlmaWVycy5qc1wiO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gXCIuL3V0aWxzL2RlYm91bmNlLmpzXCI7XG5pbXBvcnQgdmFsaWRhdGVNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvdmFsaWRhdGVNb2RpZmllcnMuanNcIjtcbmltcG9ydCB1bmlxdWVCeSBmcm9tIFwiLi91dGlscy91bmlxdWVCeS5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IG1lcmdlQnlOYW1lIGZyb20gXCIuL3V0aWxzL21lcmdlQnlOYW1lLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgeyBhdXRvIH0gZnJvbSBcIi4vZW51bXMuanNcIjtcbnZhciBJTlZBTElEX0VMRU1FTlRfRVJST1IgPSAnUG9wcGVyOiBJbnZhbGlkIHJlZmVyZW5jZSBvciBwb3BwZXIgYXJndW1lbnQgcHJvdmlkZWQuIFRoZXkgbXVzdCBiZSBlaXRoZXIgYSBET00gZWxlbWVudCBvciB2aXJ0dWFsIGVsZW1lbnQuJztcbnZhciBJTkZJTklURV9MT09QX0VSUk9SID0gJ1BvcHBlcjogQW4gaW5maW5pdGUgbG9vcCBpbiB0aGUgbW9kaWZpZXJzIGN5Y2xlIGhhcyBiZWVuIGRldGVjdGVkISBUaGUgY3ljbGUgaGFzIGJlZW4gaW50ZXJydXB0ZWQgdG8gcHJldmVudCBhIGJyb3dzZXIgY3Jhc2guJztcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9wcGVyR2VuZXJhdG9yKGdlbmVyYXRvck9wdGlvbnMpIHtcbiAgaWYgKGdlbmVyYXRvck9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIGdlbmVyYXRvck9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfZ2VuZXJhdG9yT3B0aW9ucyA9IGdlbmVyYXRvck9wdGlvbnMsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0TW9kaWZpZXJzLFxuICAgICAgZGVmYXVsdE1vZGlmaWVycyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9PT0gdm9pZCAwID8gW10gOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE9wdGlvbnMsXG4gICAgICBkZWZhdWx0T3B0aW9ucyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPT09IHZvaWQgMCA/IERFRkFVTFRfT1BUSU9OUyA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZjI7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgIG9yZGVyZWRNb2RpZmllcnM6IFtdLFxuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRJT05TLCBkZWZhdWx0T3B0aW9ucyksXG4gICAgICBtb2RpZmllcnNEYXRhOiB7fSxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXI6IHBvcHBlclxuICAgICAgfSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgc3R5bGVzOiB7fVxuICAgIH07XG4gICAgdmFyIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB2YXIgaXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKHNldE9wdGlvbnNBY3Rpb24pIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2V0T3B0aW9uc0FjdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHNldE9wdGlvbnNBY3Rpb24oc3RhdGUub3B0aW9ucykgOiBzZXRPcHRpb25zQWN0aW9uO1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHN0YXRlLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgc3RhdGUub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHN0YXRlLnNjcm9sbFBhcmVudHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBpc0VsZW1lbnQocmVmZXJlbmNlKSA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZSkgOiByZWZlcmVuY2UuY29udGV4dEVsZW1lbnQgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UuY29udGV4dEVsZW1lbnQpIDogW10sXG4gICAgICAgICAgcG9wcGVyOiBsaXN0U2Nyb2xsUGFyZW50cyhwb3BwZXIpXG4gICAgICAgIH07IC8vIE9yZGVycyB0aGUgbW9kaWZpZXJzIGJhc2VkIG9uIHRoZWlyIGRlcGVuZGVuY2llcyBhbmQgYHBoYXNlYFxuICAgICAgICAvLyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlck1vZGlmaWVycyhtZXJnZUJ5TmFtZShbXS5jb25jYXQoZGVmYXVsdE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpKSk7IC8vIFN0cmlwIG91dCBkaXNhYmxlZCBtb2RpZmllcnNcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5lbmFibGVkO1xuICAgICAgICB9KTsgLy8gVmFsaWRhdGUgdGhlIHByb3ZpZGVkIG1vZGlmaWVycyBzbyB0aGF0IHRoZSBjb25zdW1lciB3aWxsIGdldCB3YXJuZWRcbiAgICAgICAgLy8gaWYgb25lIG9mIHRoZSBtb2RpZmllcnMgaXMgaW52YWxpZCBmb3IgYW55IHJlYXNvblxuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICB2YXIgbW9kaWZpZXJzID0gdW5pcXVlQnkoW10uY29uY2F0KG9yZGVyZWRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzKTtcblxuICAgICAgICAgIGlmIChnZXRCYXNlUGxhY2VtZW50KHN0YXRlLm9wdGlvbnMucGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgICAgICAgICAgdmFyIGZsaXBNb2RpZmllciA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZmluZChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lO1xuICAgICAgICAgICAgICByZXR1cm4gbmFtZSA9PT0gJ2ZsaXAnO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghZmxpcE1vZGlmaWVyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXV0b1wiIHBsYWNlbWVudHMgcmVxdWlyZSB0aGUgXCJmbGlwXCIgbW9kaWZpZXIgYmUnLCAncHJlc2VudCBhbmQgZW5hYmxlZCB0byB3b3JrLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShwb3BwZXIpLFxuICAgICAgICAgICAgICBtYXJnaW5Ub3AgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3AsXG4gICAgICAgICAgICAgIG1hcmdpblJpZ2h0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luUmlnaHQsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbSA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkJvdHRvbSxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQ7IC8vIFdlIG5vIGxvbmdlciB0YWtlIGludG8gYWNjb3VudCBgbWFyZ2luc2Agb24gdGhlIHBvcHBlciwgYW5kIGl0IGNhblxuICAgICAgICAgIC8vIGNhdXNlIGJ1Z3Mgd2l0aCBwb3NpdGlvbmluZywgc28gd2UnbGwgd2FybiB0aGUgY29uc3VtZXJcblxuXG4gICAgICAgICAgaWYgKFttYXJnaW5Ub3AsIG1hcmdpblJpZ2h0LCBtYXJnaW5Cb3R0b20sIG1hcmdpbkxlZnRdLnNvbWUoZnVuY3Rpb24gKG1hcmdpbikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobWFyZ2luKTtcbiAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBDU1MgXCJtYXJnaW5cIiBzdHlsZXMgY2Fubm90IGJlIHVzZWQgdG8gYXBwbHkgcGFkZGluZycsICdiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudCBvciBib3VuZGFyeS4nLCAnVG8gcmVwbGljYXRlIG1hcmdpbiwgdXNlIHRoZSBgb2Zmc2V0YCBtb2RpZmllciwgYXMgd2VsbCBhcycsICd0aGUgYHBhZGRpbmdgIG9wdGlvbiBpbiB0aGUgYHByZXZlbnRPdmVyZmxvd2AgYW5kIGBmbGlwYCcsICdtb2RpZmllcnMuJ10uam9pbignICcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBydW5Nb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIC8vIFN5bmMgdXBkYXRlIOKAkyBpdCB3aWxsIGFsd2F5cyBiZSBleGVjdXRlZCwgZXZlbiBpZiBub3QgbmVjZXNzYXJ5LiBUaGlzXG4gICAgICAvLyBpcyB1c2VmdWwgZm9yIGxvdyBmcmVxdWVuY3kgdXBkYXRlcyB3aGVyZSBzeW5jIGJlaGF2aW9yIHNpbXBsaWZpZXMgdGhlXG4gICAgICAvLyBsb2dpYy5cbiAgICAgIC8vIEZvciBoaWdoIGZyZXF1ZW5jeSB1cGRhdGVzIChlLmcuIGByZXNpemVgIGFuZCBgc2Nyb2xsYCBldmVudHMpLCBhbHdheXNcbiAgICAgIC8vIHByZWZlciB0aGUgYXN5bmMgUG9wcGVyI3VwZGF0ZSBtZXRob2RcbiAgICAgIGZvcmNlVXBkYXRlOiBmdW5jdGlvbiBmb3JjZVVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKGlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9zdGF0ZSRlbGVtZW50cyA9IHN0YXRlLmVsZW1lbnRzLFxuICAgICAgICAgICAgcmVmZXJlbmNlID0gX3N0YXRlJGVsZW1lbnRzLnJlZmVyZW5jZSxcbiAgICAgICAgICAgIHBvcHBlciA9IF9zdGF0ZSRlbGVtZW50cy5wb3BwZXI7IC8vIERvbid0IHByb2NlZWQgaWYgYHJlZmVyZW5jZWAgb3IgYHBvcHBlcmAgYXJlIG5vdCB2YWxpZCBlbGVtZW50c1xuICAgICAgICAvLyBhbnltb3JlXG5cbiAgICAgICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU3RvcmUgdGhlIHJlZmVyZW5jZSBhbmQgcG9wcGVyIHJlY3RzIHRvIGJlIHJlYWQgYnkgbW9kaWZpZXJzXG5cblxuICAgICAgICBzdGF0ZS5yZWN0cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGdldENvbXBvc2l0ZVJlY3QocmVmZXJlbmNlLCBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKSwgc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJyksXG4gICAgICAgICAgcG9wcGVyOiBnZXRMYXlvdXRSZWN0KHBvcHBlcilcbiAgICAgICAgfTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gcmVzZXQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlLiBUaGVcbiAgICAgICAgLy8gbW9zdCBjb21tb24gdXNlIGNhc2UgZm9yIHRoaXMgaXMgdGhlIGBmbGlwYCBtb2RpZmllciBjaGFuZ2luZyB0aGVcbiAgICAgICAgLy8gcGxhY2VtZW50LCB3aGljaCB0aGVuIG5lZWRzIHRvIHJlLXJ1biBhbGwgdGhlIG1vZGlmaWVycywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gbG9naWMgd2FzIHByZXZpb3VzbHkgcmFuIGZvciB0aGUgcHJldmlvdXMgcGxhY2VtZW50IGFuZCBpcyB0aGVyZWZvcmVcbiAgICAgICAgLy8gc3RhbGUvaW5jb3JyZWN0XG5cbiAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7IC8vIE9uIGVhY2ggdXBkYXRlIGN5Y2xlLCB0aGUgYG1vZGlmaWVyc0RhdGFgIHByb3BlcnR5IGZvciBlYWNoIG1vZGlmaWVyXG4gICAgICAgIC8vIGlzIGZpbGxlZCB3aXRoIHRoZSBpbml0aWFsIGRhdGEgc3BlY2lmaWVkIGJ5IHRoZSBtb2RpZmllci4gVGhpcyBtZWFuc1xuICAgICAgICAvLyBpdCBkb2Vzbid0IHBlcnNpc3QgYW5kIGlzIGZyZXNoIG9uIGVhY2ggdXBkYXRlLlxuICAgICAgICAvLyBUbyBlbnN1cmUgcGVyc2lzdGVudCBkYXRhLCB1c2UgYCR7bmFtZX0jcGVyc2lzdGVudGBcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLm1vZGlmaWVyc0RhdGFbbW9kaWZpZXIubmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCBtb2RpZmllci5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBfX2RlYnVnX2xvb3BzX18gPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIF9fZGVidWdfbG9vcHNfXyArPSAxO1xuXG4gICAgICAgICAgICBpZiAoX19kZWJ1Z19sb29wc19fID4gMTAwKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5GSU5JVEVfTE9PUF9FUlJPUik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdGF0ZS5yZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX3N0YXRlJG9yZGVyZWRNb2RpZmllID0gc3RhdGUub3JkZXJlZE1vZGlmaWVyc1tpbmRleF0sXG4gICAgICAgICAgICAgIGZuID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLmZuLFxuICAgICAgICAgICAgICBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm9wdGlvbnMsXG4gICAgICAgICAgICAgIF9vcHRpb25zID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9PT0gdm9pZCAwID8ge30gOiBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyLFxuICAgICAgICAgICAgICBuYW1lID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm5hbWU7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGZuKHtcbiAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgICBvcHRpb25zOiBfb3B0aW9ucyxcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgICAgICAgICB9KSB8fCBzdGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBc3luYyBhbmQgb3B0aW1pc3RpY2FsbHkgb3B0aW1pemVkIHVwZGF0ZSDigJMgaXQgd2lsbCBub3QgYmUgZXhlY3V0ZWQgaWZcbiAgICAgIC8vIG5vdCBuZWNlc3NhcnkgKGRlYm91bmNlZCB0byBydW4gYXQgbW9zdCBvbmNlLXBlci10aWNrKVxuICAgICAgdXBkYXRlOiBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIGluc3RhbmNlLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgcmVzb2x2ZShzdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIGlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5zZXRPcHRpb25zKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICBpZiAoIWlzRGVzdHJveWVkICYmIG9wdGlvbnMub25GaXJzdFVwZGF0ZSkge1xuICAgICAgICBvcHRpb25zLm9uRmlyc3RVcGRhdGUoc3RhdGUpO1xuICAgICAgfVxuICAgIH0pOyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIGJlZm9yZSB0aGUgZmlyc3RcbiAgICAvLyB1cGRhdGUgY3ljbGUgcnVucy4gVGhleSB3aWxsIGJlIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSB1cGRhdGVcbiAgICAvLyBjeWNsZS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBhIG1vZGlmaWVyIGFkZHMgc29tZSBwZXJzaXN0ZW50IGRhdGEgdGhhdFxuICAgIC8vIG90aGVyIG1vZGlmaWVycyBuZWVkIHRvIHVzZSwgYnV0IHRoZSBtb2RpZmllciBpcyBydW4gYWZ0ZXIgdGhlIGRlcGVuZGVudFxuICAgIC8vIG9uZS5cblxuICAgIGZ1bmN0aW9uIHJ1bk1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICAgICAgX3JlZjMkb3B0aW9ucyA9IF9yZWYzLm9wdGlvbnMsXG4gICAgICAgICAgICBvcHRpb25zID0gX3JlZjMkb3B0aW9ucyA9PT0gdm9pZCAwID8ge30gOiBfcmVmMyRvcHRpb25zLFxuICAgICAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZWZmZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIGNsZWFudXBGbiA9IGVmZmVjdCh7XG4gICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIG5vb3BGbiA9IGZ1bmN0aW9uIG5vb3BGbigpIHt9O1xuXG4gICAgICAgICAgZWZmZWN0Q2xlYW51cEZucy5wdXNoKGNsZWFudXBGbiB8fCBub29wRm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgZWZmZWN0Q2xlYW51cEZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0pO1xuICAgICAgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn1cbmV4cG9ydCB2YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGRldGVjdE92ZXJmbG93IH07IiwgImltcG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3cgfSBmcm9tIFwiLi9jcmVhdGVQb3BwZXIuanNcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gXCIuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzXCI7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qc1wiO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9hcHBseVN0eWxlcy5qc1wiO1xuaW1wb3J0IG9mZnNldCBmcm9tIFwiLi9tb2RpZmllcnMvb2Zmc2V0LmpzXCI7XG5pbXBvcnQgZmxpcCBmcm9tIFwiLi9tb2RpZmllcnMvZmxpcC5qc1wiO1xuaW1wb3J0IHByZXZlbnRPdmVyZmxvdyBmcm9tIFwiLi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgYXJyb3cgZnJvbSBcIi4vbW9kaWZpZXJzL2Fycm93LmpzXCI7XG5pbXBvcnQgaGlkZSBmcm9tIFwiLi9tb2RpZmllcnMvaGlkZS5qc1wiO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMsIGNvbXB1dGVTdHlsZXMsIGFwcGx5U3R5bGVzLCBvZmZzZXQsIGZsaXAsIHByZXZlbnRPdmVyZmxvdywgYXJyb3csIGhpZGVdO1xudmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzXG59KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIgYXMgY3JlYXRlUG9wcGVyTGl0ZSB9IGZyb20gXCIuL3BvcHBlci1saXRlLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0ICogZnJvbSBcIi4vbW9kaWZpZXJzL2luZGV4LmpzXCI7IiwgImltcG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3cgfSBmcm9tIFwiLi9jcmVhdGVQb3BwZXIuanNcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gXCIuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzXCI7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qc1wiO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9hcHBseVN0eWxlcy5qc1wiO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMsIGNvbXB1dGVTdHlsZXMsIGFwcGx5U3R5bGVzXTtcbnZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKHtcbiAgZGVmYXVsdE1vZGlmaWVyczogZGVmYXVsdE1vZGlmaWVyc1xufSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyLCBwb3BwZXJHZW5lcmF0b3IsIGRlZmF1bHRNb2RpZmllcnMsIGRldGVjdE92ZXJmbG93IH07IiwgImV4cG9ydCAqIGZyb20gXCIuL2VudW1zLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tb2RpZmllcnMvaW5kZXguanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBwb3BwZXJHZW5lcmF0b3IsIGRldGVjdE92ZXJmbG93LCBjcmVhdGVQb3BwZXIgYXMgY3JlYXRlUG9wcGVyQmFzZSB9IGZyb20gXCIuL2NyZWF0ZVBvcHBlci5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciB9IGZyb20gXCIuL3BvcHBlci5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciBhcyBjcmVhdGVQb3BwZXJMaXRlIH0gZnJvbSBcIi4vcG9wcGVyLWxpdGUuanNcIjsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSB7XG4gIChudWxsID09IGEgfHwgYSA+IHIubGVuZ3RoKSAmJiAoYSA9IHIubGVuZ3RoKTtcbiAgZm9yICh2YXIgZSA9IDAsIG4gPSBBcnJheShhKTsgZSA8IGE7IGUrKykgbltlXSA9IHJbZV07XG4gIHJldHVybiBuO1xufVxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKHIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocikpIHJldHVybiByO1xufVxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKHIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyKTtcbn1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSkge1xuICBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIHJldHVybiBlO1xufVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7XG4gIHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7XG59XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikge1xuICBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG59XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7XG4gIGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykge1xuICAgIHZhciBvID0gclt0XTtcbiAgICBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTtcbiAgfVxufVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHtcbiAgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiAhMVxuICB9KSwgZTtcbn1cbmZ1bmN0aW9uIF9nZXQoKSB7XG4gIHJldHVybiBfZ2V0ID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgUmVmbGVjdCAmJiBSZWZsZWN0LmdldCA/IFJlZmxlY3QuZ2V0LmJpbmQoKSA6IGZ1bmN0aW9uIChlLCB0LCByKSB7XG4gICAgdmFyIHAgPSBfc3VwZXJQcm9wQmFzZShlLCB0KTtcbiAgICBpZiAocCkge1xuICAgICAgdmFyIG4gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHAsIHQpO1xuICAgICAgcmV0dXJuIG4uZ2V0ID8gbi5nZXQuY2FsbChhcmd1bWVudHMubGVuZ3RoIDwgMyA/IGUgOiByKSA6IG4udmFsdWU7XG4gICAgfVxuICB9LCBfZ2V0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkge1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtcbiAgfSwgX2dldFByb3RvdHlwZU9mKHQpO1xufVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHtcbiAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiB0LFxuICAgICAgd3JpdGFibGU6ICEwLFxuICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH1cbiAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6ICExXG4gIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTtcbn1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIHRyeSB7XG4gICAgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICB9IGNhdGNoICh0KSB7fVxuICByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhdDtcbiAgfSkoKTtcbn1cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkocikge1xuICBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIG51bGwgIT0gcltTeW1ib2wuaXRlcmF0b3JdIHx8IG51bGwgIT0gcltcIkBAaXRlcmF0b3JcIl0pIHJldHVybiBBcnJheS5mcm9tKHIpO1xufVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHtcbiAgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKG51bGwgIT0gdCkge1xuICAgIHZhciBlLFxuICAgICAgbixcbiAgICAgIGksXG4gICAgICB1LFxuICAgICAgYSA9IFtdLFxuICAgICAgZiA9ICEwLFxuICAgICAgbyA9ICExO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaSA9ICh0ID0gdC5jYWxsKHIpKS5uZXh0LCAwID09PSBsKSB7XG4gICAgICAgIGlmIChPYmplY3QodCkgIT09IHQpIHJldHVybjtcbiAgICAgICAgZiA9ICExO1xuICAgICAgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApO1xuICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgIG8gPSAhMCwgbiA9IHI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghZiAmJiBudWxsICE9IHQucmV0dXJuICYmICh1ID0gdC5yZXR1cm4oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKG8pIHRocm93IG47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9XG59XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHtcbiAgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlKSkgcmV0dXJuIGU7XG4gIGlmICh2b2lkIDAgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQodCk7XG59XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YodCwgZSkge1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDtcbiAgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpO1xufVxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkociwgZSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKHIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBlKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgZSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2UodCwgbykge1xuICBmb3IgKDsgIXt9Lmhhc093blByb3BlcnR5LmNhbGwodCwgbykgJiYgbnVsbCAhPT0gKHQgPSBfZ2V0UHJvdG90eXBlT2YodCkpOyk7XG4gIHJldHVybiB0O1xufVxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KHIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhyKSB8fCBfaXRlcmFibGVUb0FycmF5KHIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7XG4gIGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiB0IHx8ICF0KSByZXR1cm4gdDtcbiAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgaSkgcmV0dXJuIGk7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICB9XG4gIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7XG59XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7XG4gIHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gXCJzeW1ib2xcIiA9PSB0eXBlb2YgaSA/IGkgOiBpICsgXCJcIjtcbn1cbmZ1bmN0aW9uIF90eXBlb2Yobykge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiB0eXBlb2YgbztcbiAgfSA6IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87XG4gIH0sIF90eXBlb2Yobyk7XG59XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgYSkge1xuICBpZiAocikge1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiByKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkociwgYSk7XG4gICAgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTtcbiAgICByZXR1cm4gXCJPYmplY3RcIiA9PT0gdCAmJiByLmNvbnN0cnVjdG9yICYmICh0ID0gci5jb25zdHJ1Y3Rvci5uYW1lKSwgXCJNYXBcIiA9PT0gdCB8fCBcIlNldFwiID09PSB0ID8gQXJyYXkuZnJvbShyKSA6IFwiQXJndW1lbnRzXCIgPT09IHQgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCkgPyBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSA6IHZvaWQgMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuZnVuY3Rpb24gbGFzdEl0ZW1PZihhcnIpIHtcbiAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV07XG59XG5cbi8vIHB1c2ggb25seSB0aGUgaXRlbXMgbm90IGluY2x1ZGVkIGluIHRoZSBhcnJheVxuZnVuY3Rpb24gcHVzaFVuaXF1ZShhcnIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBpdGVtc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cbiAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChhcnIuaW5jbHVkZXMoaXRlbSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXJyLnB1c2goaXRlbSk7XG4gIH0pO1xuICByZXR1cm4gYXJyO1xufVxuZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHIsIHNlcGFyYXRvcikge1xuICAvLyBjb252ZXJ0IGVtcHR5IHN0cmluZyB0byBhbiBlbXB0eSBhcnJheVxuICByZXR1cm4gc3RyID8gc3RyLnNwbGl0KHNlcGFyYXRvcikgOiBbXTtcbn1cbmZ1bmN0aW9uIGlzSW5SYW5nZSh0ZXN0VmFsLCBtaW4sIG1heCkge1xuICB2YXIgbWluT0sgPSBtaW4gPT09IHVuZGVmaW5lZCB8fCB0ZXN0VmFsID49IG1pbjtcbiAgdmFyIG1heE9LID0gbWF4ID09PSB1bmRlZmluZWQgfHwgdGVzdFZhbCA8PSBtYXg7XG4gIHJldHVybiBtaW5PSyAmJiBtYXhPSztcbn1cbmZ1bmN0aW9uIGxpbWl0VG9SYW5nZSh2YWwsIG1pbiwgbWF4KSB7XG4gIGlmICh2YWwgPCBtaW4pIHtcbiAgICByZXR1cm4gbWluO1xuICB9XG4gIGlmICh2YWwgPiBtYXgpIHtcbiAgICByZXR1cm4gbWF4O1xuICB9XG4gIHJldHVybiB2YWw7XG59XG5mdW5jdGlvbiBjcmVhdGVUYWdSZXBlYXQodGFnTmFtZSwgcmVwZWF0KSB7XG4gIHZhciBhdHRyaWJ1dGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgdmFyIGluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAwO1xuICB2YXIgaHRtbCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogJyc7XG4gIHZhciBvcGVuVGFnU3JjID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcykucmVkdWNlKGZ1bmN0aW9uIChzcmMsIGF0dHIpIHtcbiAgICB2YXIgdmFsID0gYXR0cmlidXRlc1thdHRyXTtcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFsID0gdmFsKGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHNyYywgXCIgXCIpLmNvbmNhdChhdHRyLCBcIj1cXFwiXCIpLmNvbmNhdCh2YWwsIFwiXFxcIlwiKTtcbiAgfSwgdGFnTmFtZSk7XG4gIGh0bWwgKz0gXCI8XCIuY29uY2F0KG9wZW5UYWdTcmMsIFwiPjwvXCIpLmNvbmNhdCh0YWdOYW1lLCBcIj5cIik7XG4gIHZhciBuZXh0ID0gaW5kZXggKyAxO1xuICByZXR1cm4gbmV4dCA8IHJlcGVhdCA/IGNyZWF0ZVRhZ1JlcGVhdCh0YWdOYW1lLCByZXBlYXQsIGF0dHJpYnV0ZXMsIG5leHQsIGh0bWwpIDogaHRtbDtcbn1cblxuLy8gUmVtb3ZlIHRoZSBzcGFjaW5nIHN1cnJvdW5kaW5nIHRhZ3MgZm9yIEhUTUwgcGFyc2VyIG5vdCB0byBjcmVhdGUgdGV4dCBub2Rlc1xuLy8gYmVmb3JlL2FmdGVyIGVsZW1lbnRzXG5mdW5jdGlvbiBvcHRpbWl6ZVRlbXBsYXRlSFRNTChodG1sKSB7XG4gIHJldHVybiBodG1sLnJlcGxhY2UoLz5cXHMrL2csICc+JykucmVwbGFjZSgvXFxzKzwvLCAnPCcpO1xufVxuXG5mdW5jdGlvbiBzdHJpcFRpbWUodGltZVZhbHVlKSB7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lVmFsdWUpLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufVxuZnVuY3Rpb24gdG9kYXkoKSB7XG4gIHJldHVybiBuZXcgRGF0ZSgpLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufVxuXG4vLyBHZXQgdGhlIHRpbWUgdmFsdWUgb2YgdGhlIHN0YXJ0IG9mIGdpdmVuIGRhdGUgb3IgeWVhciwgbW9udGggYW5kIGRheVxuZnVuY3Rpb24gZGF0ZVZhbHVlKCkge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gdG9kYXkoKTtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gc3RyaXBUaW1lKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSk7XG4gIH1cblxuICAvLyB1c2Ugc2V0RnVsbFllYXIoKSB0byBrZWVwIDItZGlnaXQgeWVhciBmcm9tIGJlaW5nIG1hcHBlZCB0byAxOTAwLTE5OTlcbiAgdmFyIG5ld0RhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgbmV3RGF0ZS5zZXRGdWxsWWVhci5hcHBseShuZXdEYXRlLCBhcmd1bWVudHMpO1xuICByZXR1cm4gbmV3RGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn1cbmZ1bmN0aW9uIGFkZERheXMoZGF0ZSwgYW1vdW50KSB7XG4gIHZhciBuZXdEYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gIHJldHVybiBuZXdEYXRlLnNldERhdGUobmV3RGF0ZS5nZXREYXRlKCkgKyBhbW91bnQpO1xufVxuZnVuY3Rpb24gYWRkV2Vla3MoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGREYXlzKGRhdGUsIGFtb3VudCAqIDcpO1xufVxuZnVuY3Rpb24gYWRkTW9udGhzKGRhdGUsIGFtb3VudCkge1xuICAvLyBJZiB0aGUgZGF5IG9mIHRoZSBkYXRlIGlzIG5vdCBpbiB0aGUgbmV3IG1vbnRoLCB0aGUgbGFzdCBkYXkgb2YgdGhlIG5ld1xuICAvLyBtb250aCB3aWxsIGJlIHJldHVybmVkLiBlLmcuIEphbiAzMSArIDEgbW9udGgg4oaSIEZlYiAyOCAobm90IE1hciAwMylcbiAgdmFyIG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgdmFyIG1vbnRoc1RvU2V0ID0gbmV3RGF0ZS5nZXRNb250aCgpICsgYW1vdW50O1xuICB2YXIgZXhwZWN0ZWRNb250aCA9IG1vbnRoc1RvU2V0ICUgMTI7XG4gIGlmIChleHBlY3RlZE1vbnRoIDwgMCkge1xuICAgIGV4cGVjdGVkTW9udGggKz0gMTI7XG4gIH1cbiAgdmFyIHRpbWUgPSBuZXdEYXRlLnNldE1vbnRoKG1vbnRoc1RvU2V0KTtcbiAgcmV0dXJuIG5ld0RhdGUuZ2V0TW9udGgoKSAhPT0gZXhwZWN0ZWRNb250aCA/IG5ld0RhdGUuc2V0RGF0ZSgwKSA6IHRpbWU7XG59XG5mdW5jdGlvbiBhZGRZZWFycyhkYXRlLCBhbW91bnQpIHtcbiAgLy8gSWYgdGhlIGRhdGUgaXMgRmViIDI5IGFuZCB0aGUgbmV3IHllYXIgaXMgbm90IGEgbGVhcCB5ZWFyLCBGZWIgMjggb2YgdGhlXG4gIC8vIG5ldyB5ZWFyIHdpbGwgYmUgcmV0dXJuZWQuXG4gIHZhciBuZXdEYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gIHZhciBleHBlY3RlZE1vbnRoID0gbmV3RGF0ZS5nZXRNb250aCgpO1xuICB2YXIgdGltZSA9IG5ld0RhdGUuc2V0RnVsbFllYXIobmV3RGF0ZS5nZXRGdWxsWWVhcigpICsgYW1vdW50KTtcbiAgcmV0dXJuIGV4cGVjdGVkTW9udGggPT09IDEgJiYgbmV3RGF0ZS5nZXRNb250aCgpID09PSAyID8gbmV3RGF0ZS5zZXREYXRlKDApIDogdGltZTtcbn1cblxuLy8gQ2FsY3VsYXRlIHRoZSBkaXN0YW5jZSBiZXR0d2VuIDIgZGF5cyBvZiB0aGUgd2Vla1xuZnVuY3Rpb24gZGF5RGlmZihkYXksIGZyb20pIHtcbiAgcmV0dXJuIChkYXkgLSBmcm9tICsgNykgJSA3O1xufVxuXG4vLyBHZXQgdGhlIGRhdGUgb2YgdGhlIHNwZWNpZmllZCBkYXkgb2YgdGhlIHdlZWsgb2YgZ2l2ZW4gYmFzZSBkYXRlXG5mdW5jdGlvbiBkYXlPZlRoZVdlZWtPZihiYXNlRGF0ZSwgZGF5T2ZXZWVrKSB7XG4gIHZhciB3ZWVrU3RhcnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7XG4gIHZhciBiYXNlRGF5ID0gbmV3IERhdGUoYmFzZURhdGUpLmdldERheSgpO1xuICByZXR1cm4gYWRkRGF5cyhiYXNlRGF0ZSwgZGF5RGlmZihkYXlPZldlZWssIHdlZWtTdGFydCkgLSBkYXlEaWZmKGJhc2VEYXksIHdlZWtTdGFydCkpO1xufVxuXG4vLyBHZXQgdGhlIElTTyB3ZWVrIG9mIGEgZGF0ZVxuZnVuY3Rpb24gZ2V0V2VlayhkYXRlKSB7XG4gIC8vIHN0YXJ0IG9mIElTTyB3ZWVrIGlzIE1vbmRheVxuICB2YXIgdGh1T2ZUaGVXZWVrID0gZGF5T2ZUaGVXZWVrT2YoZGF0ZSwgNCwgMSk7XG4gIC8vIDFzdCB3ZWVrID09IHRoZSB3ZWVrIHdoZXJlIHRoZSA0dGggb2YgSmFudWFyeSBpcyBpblxuICB2YXIgZmlyc3RUaHUgPSBkYXlPZlRoZVdlZWtPZihuZXcgRGF0ZSh0aHVPZlRoZVdlZWspLnNldE1vbnRoKDAsIDQpLCA0LCAxKTtcbiAgcmV0dXJuIE1hdGgucm91bmQoKHRodU9mVGhlV2VlayAtIGZpcnN0VGh1KSAvIDYwNDgwMDAwMCkgKyAxO1xufVxuXG4vLyBHZXQgdGhlIHN0YXJ0IHllYXIgb2YgdGhlIHBlcmlvZCBvZiB5ZWFycyB0aGF0IGluY2x1ZGVzIGdpdmVuIGRhdGVcbi8vIHllYXJzOiBsZW5ndGggb2YgdGhlIHllYXIgcGVyaW9kXG5mdW5jdGlvbiBzdGFydE9mWWVhclBlcmlvZChkYXRlLCB5ZWFycykge1xuICAvKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1llYXJfemVybyNJU09fODYwMSAqL1xuICB2YXIgeWVhciA9IG5ldyBEYXRlKGRhdGUpLmdldEZ1bGxZZWFyKCk7XG4gIHJldHVybiBNYXRoLmZsb29yKHllYXIgLyB5ZWFycykgKiB5ZWFycztcbn1cblxuLy8gcGF0dGVybiBmb3IgZm9ybWF0IHBhcnRzXG52YXIgcmVGb3JtYXRUb2tlbnMgPSAvZGQ/fEREP3xtbT98TU0/fHl5Pyg/Onl5KT8vO1xuLy8gcGF0dGVybiBmb3Igbm9uIGRhdGUgcGFydHNcbnZhciByZU5vbkRhdGVQYXJ0cyA9IC9bXFxzIS0vOi1AWy1gey1+5bm05pyI5pelXSsvO1xuLy8gY2FjaGUgZm9yIHBlcnNlZCBmb3JtYXRzXG52YXIga25vd25Gb3JtYXRzID0ge307XG4vLyBwYXJzZSBmdW50aW9ucyBmb3IgZGF0ZSBwYXJ0c1xudmFyIHBhcnNlRm5zID0ge1xuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHllYXIpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoZGF0ZSkuc2V0RnVsbFllYXIocGFyc2VJbnQoeWVhciwgMTApKTtcbiAgfSxcbiAgbTogZnVuY3Rpb24gbShkYXRlLCBtb250aCwgbG9jYWxlKSB7XG4gICAgdmFyIG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICB2YXIgbW9udGhJbmRleCA9IHBhcnNlSW50KG1vbnRoLCAxMCkgLSAxO1xuICAgIGlmIChpc05hTihtb250aEluZGV4KSkge1xuICAgICAgaWYgKCFtb250aCkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgfVxuICAgICAgdmFyIG1vbnRoTmFtZSA9IG1vbnRoLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgY29tcGFyZU5hbWVzID0gZnVuY3Rpb24gY29tcGFyZU5hbWVzKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKG1vbnRoTmFtZSk7XG4gICAgICB9O1xuICAgICAgLy8gY29tcGFyZSB3aXRoIGJvdGggc2hvcnQgYW5kIGZ1bGwgbmFtZXMgYmVjYXVzZSBzb21lIGxvY2FsZXMgaGF2ZSBwZXJpb2RzXG4gICAgICAvLyBpbiB0aGUgc2hvcnQgbmFtZXMgKG5vdCBlcXVhbCB0byB0aGUgZmlyc3QgWCBsZXR0ZXJzIG9mIHRoZSBmdWxsIG5hbWVzKVxuICAgICAgbW9udGhJbmRleCA9IGxvY2FsZS5tb250aHNTaG9ydC5maW5kSW5kZXgoY29tcGFyZU5hbWVzKTtcbiAgICAgIGlmIChtb250aEluZGV4IDwgMCkge1xuICAgICAgICBtb250aEluZGV4ID0gbG9jYWxlLm1vbnRocy5maW5kSW5kZXgoY29tcGFyZU5hbWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChtb250aEluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgfVxuICAgIH1cbiAgICBuZXdEYXRlLnNldE1vbnRoKG1vbnRoSW5kZXgpO1xuICAgIHJldHVybiBuZXdEYXRlLmdldE1vbnRoKCkgIT09IG5vcm1hbGl6ZU1vbnRoKG1vbnRoSW5kZXgpID8gbmV3RGF0ZS5zZXREYXRlKDApIDogbmV3RGF0ZS5nZXRUaW1lKCk7XG4gIH0sXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgZGF5KSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUpLnNldERhdGUocGFyc2VJbnQoZGF5LCAxMCkpO1xuICB9XG59O1xuLy8gZm9ybWF0IGZ1bmN0aW9ucyBmb3IgZGF0ZSBwYXJ0c1xudmFyIGZvcm1hdEZucyA9IHtcbiAgZDogZnVuY3Rpb24gZChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpO1xuICB9LFxuICBkZDogZnVuY3Rpb24gZGQoZGF0ZSkge1xuICAgIHJldHVybiBwYWRaZXJvKGRhdGUuZ2V0RGF0ZSgpLCAyKTtcbiAgfSxcbiAgRDogZnVuY3Rpb24gRChkYXRlLCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLmRheXNTaG9ydFtkYXRlLmdldERheSgpXTtcbiAgfSxcbiAgREQ6IGZ1bmN0aW9uIEREKGRhdGUsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUuZGF5c1tkYXRlLmdldERheSgpXTtcbiAgfSxcbiAgbTogZnVuY3Rpb24gbShkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKSArIDE7XG4gIH0sXG4gIG1tOiBmdW5jdGlvbiBtbShkYXRlKSB7XG4gICAgcmV0dXJuIHBhZFplcm8oZGF0ZS5nZXRNb250aCgpICsgMSwgMik7XG4gIH0sXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFtkYXRlLmdldE1vbnRoKCldO1xuICB9LFxuICBNTTogZnVuY3Rpb24gTU0oZGF0ZSwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5tb250aHNbZGF0ZS5nZXRNb250aCgpXTtcbiAgfSxcbiAgeTogZnVuY3Rpb24geShkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgfSxcbiAgeXk6IGZ1bmN0aW9uIHl5KGRhdGUpIHtcbiAgICByZXR1cm4gcGFkWmVybyhkYXRlLmdldEZ1bGxZZWFyKCksIDIpLnNsaWNlKC0yKTtcbiAgfSxcbiAgeXl5eTogZnVuY3Rpb24geXl5eShkYXRlKSB7XG4gICAgcmV0dXJuIHBhZFplcm8oZGF0ZS5nZXRGdWxsWWVhcigpLCA0KTtcbiAgfVxufTtcblxuLy8gZ2V0IG1vbnRoIGluZGV4IGluIG5vcm1hbCByYW5nZSAoMCAtIDExKSBmcm9tIGFueSBudW1iZXJcbmZ1bmN0aW9uIG5vcm1hbGl6ZU1vbnRoKG1vbnRoSW5kZXgpIHtcbiAgcmV0dXJuIG1vbnRoSW5kZXggPiAtMSA/IG1vbnRoSW5kZXggJSAxMiA6IG5vcm1hbGl6ZU1vbnRoKG1vbnRoSW5kZXggKyAxMik7XG59XG5mdW5jdGlvbiBwYWRaZXJvKG51bSwgbGVuZ3RoKSB7XG4gIHJldHVybiBudW0udG9TdHJpbmcoKS5wYWRTdGFydChsZW5ndGgsICcwJyk7XG59XG5mdW5jdGlvbiBwYXJzZUZvcm1hdFN0cmluZyhmb3JtYXQpIHtcbiAgaWYgKHR5cGVvZiBmb3JtYXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBkYXRlIGZvcm1hdC5cIik7XG4gIH1cbiAgaWYgKGZvcm1hdCBpbiBrbm93bkZvcm1hdHMpIHtcbiAgICByZXR1cm4ga25vd25Gb3JtYXRzW2Zvcm1hdF07XG4gIH1cblxuICAvLyBzcHJpdCB0aGUgZm9ybWF0IHN0cmluZyBpbnRvIHBhcnRzIGFuZCBzZXByYXRvcnNcbiAgdmFyIHNlcGFyYXRvcnMgPSBmb3JtYXQuc3BsaXQocmVGb3JtYXRUb2tlbnMpO1xuICB2YXIgcGFydHMgPSBmb3JtYXQubWF0Y2gobmV3IFJlZ0V4cChyZUZvcm1hdFRva2VucywgJ2cnKSk7XG4gIGlmIChzZXBhcmF0b3JzLmxlbmd0aCA9PT0gMCB8fCAhcGFydHMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGRhdGUgZm9ybWF0LlwiKTtcbiAgfVxuXG4gIC8vIGNvbGxlY3QgZm9ybWF0IGZ1bmN0aW9ucyB1c2VkIGluIHRoZSBmb3JtYXRcbiAgdmFyIHBhcnRGb3JtYXR0ZXJzID0gcGFydHMubWFwKGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHJldHVybiBmb3JtYXRGbnNbdG9rZW5dO1xuICB9KTtcblxuICAvLyBjb2xsZWN0IHBhcnNlIGZ1bmN0aW9uIGtleXMgdXNlZCBpbiB0aGUgZm9ybWF0XG4gIC8vIGl0ZXJhdGUgb3ZlciBwYXJzZUZucycga2V5cyBpbiBvcmRlciB0byBrZWVwIHRoZSBvcmRlciBvZiB0aGUga2V5cy5cbiAgdmFyIHBhcnRQYXJzZXJLZXlzID0gT2JqZWN0LmtleXMocGFyc2VGbnMpLnJlZHVjZShmdW5jdGlvbiAoa2V5cywga2V5KSB7XG4gICAgdmFyIHRva2VuID0gcGFydHMuZmluZChmdW5jdGlvbiAocGFydCkge1xuICAgICAgcmV0dXJuIHBhcnRbMF0gIT09ICdEJyAmJiBwYXJ0WzBdLnRvTG93ZXJDYXNlKCkgPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbiAgfSwgW10pO1xuICByZXR1cm4ga25vd25Gb3JtYXRzW2Zvcm1hdF0gPSB7XG4gICAgcGFyc2VyOiBmdW5jdGlvbiBwYXJzZXIoZGF0ZVN0ciwgbG9jYWxlKSB7XG4gICAgICB2YXIgZGF0ZVBhcnRzID0gZGF0ZVN0ci5zcGxpdChyZU5vbkRhdGVQYXJ0cykucmVkdWNlKGZ1bmN0aW9uIChkdFBhcnRzLCBwYXJ0LCBpbmRleCkge1xuICAgICAgICBpZiAocGFydC5sZW5ndGggPiAwICYmIHBhcnRzW2luZGV4XSkge1xuICAgICAgICAgIHZhciB0b2tlbiA9IHBhcnRzW2luZGV4XVswXTtcbiAgICAgICAgICBpZiAodG9rZW4gPT09ICdNJykge1xuICAgICAgICAgICAgZHRQYXJ0cy5tID0gcGFydDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuICE9PSAnRCcpIHtcbiAgICAgICAgICAgIGR0UGFydHNbdG9rZW5dID0gcGFydDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGR0UGFydHM7XG4gICAgICB9LCB7fSk7XG5cbiAgICAgIC8vIGl0ZXJhdGUgb3ZlciBwYXJ0UGFyc2Vya2V5cyBzbyB0aGF0IHRoZSBwYXJzaW5nIGlzIG1hZGUgaW4gdGhlIG9kZXJcbiAgICAgIC8vIG9mIHllYXIsIG1vbnRoIGFuZCBkYXkgdG8gcHJldmVudCB0aGUgZGF5IHBhcnNlciBmcm9tIGNvcnJlY3RpbmcgbGFzdFxuICAgICAgLy8gZGF5IG9mIG1vbnRoIHdyb25nbHlcbiAgICAgIHJldHVybiBwYXJ0UGFyc2VyS2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG9yaWdEYXRlLCBrZXkpIHtcbiAgICAgICAgdmFyIG5ld0RhdGUgPSBwYXJzZUZuc1trZXldKG9yaWdEYXRlLCBkYXRlUGFydHNba2V5XSwgbG9jYWxlKTtcbiAgICAgICAgLy8gaW5nbm9yZSB0aGUgcGFydCBmYWlsZWQgdG8gcGFyc2VcbiAgICAgICAgcmV0dXJuIGlzTmFOKG5ld0RhdGUpID8gb3JpZ0RhdGUgOiBuZXdEYXRlO1xuICAgICAgfSwgdG9kYXkoKSk7XG4gICAgfSxcbiAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uIGZvcm1hdHRlcihkYXRlLCBsb2NhbGUpIHtcbiAgICAgIHZhciBkYXRlU3RyID0gcGFydEZvcm1hdHRlcnMucmVkdWNlKGZ1bmN0aW9uIChzdHIsIGZuLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gc3RyICs9IFwiXCIuY29uY2F0KHNlcGFyYXRvcnNbaW5kZXhdKS5jb25jYXQoZm4oZGF0ZSwgbG9jYWxlKSk7XG4gICAgICB9LCAnJyk7XG4gICAgICAvLyBzZXBhcmF0b3JzJyBsZW5ndGggaXMgYWx3YXlzIHBhcnRzJyBsZW5ndGggKyAxLFxuICAgICAgcmV0dXJuIGRhdGVTdHIgKz0gbGFzdEl0ZW1PZihzZXBhcmF0b3JzKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZURhdGUoZGF0ZVN0ciwgZm9ybWF0LCBsb2NhbGUpIHtcbiAgaWYgKGRhdGVTdHIgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBkYXRlU3RyID09PSAnbnVtYmVyJykge1xuICAgIHZhciBkYXRlID0gc3RyaXBUaW1lKGRhdGVTdHIpO1xuICAgIHJldHVybiBpc05hTihkYXRlKSA/IHVuZGVmaW5lZCA6IGRhdGU7XG4gIH1cbiAgaWYgKCFkYXRlU3RyKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoZGF0ZVN0ciA9PT0gJ3RvZGF5Jykge1xuICAgIHJldHVybiB0b2RheSgpO1xuICB9XG4gIGlmIChmb3JtYXQgJiYgZm9ybWF0LnRvVmFsdWUpIHtcbiAgICB2YXIgX2RhdGUgPSBmb3JtYXQudG9WYWx1ZShkYXRlU3RyLCBmb3JtYXQsIGxvY2FsZSk7XG4gICAgcmV0dXJuIGlzTmFOKF9kYXRlKSA/IHVuZGVmaW5lZCA6IHN0cmlwVGltZShfZGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHBhcnNlRm9ybWF0U3RyaW5nKGZvcm1hdCkucGFyc2VyKGRhdGVTdHIsIGxvY2FsZSk7XG59XG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUsIGZvcm1hdCwgbG9jYWxlKSB7XG4gIGlmIChpc05hTihkYXRlKSB8fCAhZGF0ZSAmJiBkYXRlICE9PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHZhciBkYXRlT2JqID0gdHlwZW9mIGRhdGUgPT09ICdudW1iZXInID8gbmV3IERhdGUoZGF0ZSkgOiBkYXRlO1xuICBpZiAoZm9ybWF0LnRvRGlzcGxheSkge1xuICAgIHJldHVybiBmb3JtYXQudG9EaXNwbGF5KGRhdGVPYmosIGZvcm1hdCwgbG9jYWxlKTtcbiAgfVxuICByZXR1cm4gcGFyc2VGb3JtYXRTdHJpbmcoZm9ybWF0KS5mb3JtYXR0ZXIoZGF0ZU9iaiwgbG9jYWxlKTtcbn1cblxudmFyIGxpc3RlbmVyUmVnaXN0cnkgPSBuZXcgV2Vha01hcCgpO1xudmFyIF9FdmVudFRhcmdldCRwcm90b3R5cCA9IEV2ZW50VGFyZ2V0LnByb3RvdHlwZSxcbiAgYWRkRXZlbnRMaXN0ZW5lciA9IF9FdmVudFRhcmdldCRwcm90b3R5cC5hZGRFdmVudExpc3RlbmVyLFxuICByZW1vdmVFdmVudExpc3RlbmVyID0gX0V2ZW50VGFyZ2V0JHByb3RvdHlwLnJlbW92ZUV2ZW50TGlzdGVuZXI7XG5cbi8vIFJlZ2lzdGVyIGV2ZW50IGxpc3RlbmVycyB0byBhIGtleSBvYmplY3Rcbi8vIGxpc3RlbmVyczogYXJyYXkgb2YgbGlzdGVuZXIgZGVmaW5pdGlvbnM7XG4vLyAgIC0gZWFjaCBkZWZpbml0aW9uIG11c3QgYmUgYSBmbGF0IGFycmF5IG9mIGV2ZW50IHRhcmdldCBhbmQgdGhlIGFyZ3VtZW50c1xuLy8gICAgIHVzZWQgdG8gY2FsbCBhZGRFdmVudExpc3RlbmVyKCkgb24gdGhlIHRhcmdldFxuZnVuY3Rpb24gcmVnaXN0ZXJMaXN0ZW5lcnMoa2V5T2JqLCBsaXN0ZW5lcnMpIHtcbiAgdmFyIHJlZ2lzdGVyZWQgPSBsaXN0ZW5lclJlZ2lzdHJ5LmdldChrZXlPYmopO1xuICBpZiAoIXJlZ2lzdGVyZWQpIHtcbiAgICByZWdpc3RlcmVkID0gW107XG4gICAgbGlzdGVuZXJSZWdpc3RyeS5zZXQoa2V5T2JqLCByZWdpc3RlcmVkKTtcbiAgfVxuICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICBhZGRFdmVudExpc3RlbmVyLmNhbGwuYXBwbHkoYWRkRXZlbnRMaXN0ZW5lciwgX3RvQ29uc3VtYWJsZUFycmF5KGxpc3RlbmVyKSk7XG4gICAgcmVnaXN0ZXJlZC5wdXNoKGxpc3RlbmVyKTtcbiAgfSk7XG59XG5mdW5jdGlvbiB1bnJlZ2lzdGVyTGlzdGVuZXJzKGtleU9iaikge1xuICB2YXIgbGlzdGVuZXJzID0gbGlzdGVuZXJSZWdpc3RyeS5nZXQoa2V5T2JqKTtcbiAgaWYgKCFsaXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lci5jYWxsLmFwcGx5KHJlbW92ZUV2ZW50TGlzdGVuZXIsIF90b0NvbnN1bWFibGVBcnJheShsaXN0ZW5lcikpO1xuICB9KTtcbiAgbGlzdGVuZXJSZWdpc3RyeVtcImRlbGV0ZVwiXShrZXlPYmopO1xufVxuXG4vLyBFdmVudC5jb21wb3NlZFBhdGgoKSBwb2x5ZmlsbCBmb3IgRWRnZVxuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20va2xlaW5mcmV1bmQvZTk3ODdkNzM3NzZjMGUzNzUwZGNmY2RjODlmMTAwZWNcbmlmICghRXZlbnQucHJvdG90eXBlLmNvbXBvc2VkUGF0aCkge1xuICB2YXIgZ2V0Q29tcG9zZWRQYXRoID0gZnVuY3Rpb24gZ2V0Q29tcG9zZWRQYXRoKG5vZGUpIHtcbiAgICB2YXIgcGF0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XG4gICAgcGF0aC5wdXNoKG5vZGUpO1xuICAgIHZhciBwYXJlbnQ7XG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH0gZWxzZSBpZiAobm9kZS5ob3N0KSB7XG4gICAgICAvLyBTaGFkb3dSb290XG4gICAgICBwYXJlbnQgPSBub2RlLmhvc3Q7XG4gICAgfSBlbHNlIGlmIChub2RlLmRlZmF1bHRWaWV3KSB7XG4gICAgICAvLyBEb2N1bWVudFxuICAgICAgcGFyZW50ID0gbm9kZS5kZWZhdWx0VmlldztcbiAgICB9XG4gICAgcmV0dXJuIHBhcmVudCA/IGdldENvbXBvc2VkUGF0aChwYXJlbnQsIHBhdGgpIDogcGF0aDtcbiAgfTtcbiAgRXZlbnQucHJvdG90eXBlLmNvbXBvc2VkUGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0Q29tcG9zZWRQYXRoKHRoaXMudGFyZ2V0KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGZpbmRGcm9tUGF0aChwYXRoLCBjcml0ZXJpYSwgY3VycmVudFRhcmdldCkge1xuICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gIHZhciBlbCA9IHBhdGhbaW5kZXhdO1xuICBpZiAoY3JpdGVyaWEoZWwpKSB7XG4gICAgcmV0dXJuIGVsO1xuICB9IGVsc2UgaWYgKGVsID09PSBjdXJyZW50VGFyZ2V0IHx8ICFlbC5wYXJlbnRFbGVtZW50KSB7XG4gICAgLy8gc3RvcCB3aGVuIHJlYWNoaW5nIGN1cnJlbnRUYXJnZXQgb3IgPGh0bWw+XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiBmaW5kRnJvbVBhdGgocGF0aCwgY3JpdGVyaWEsIGN1cnJlbnRUYXJnZXQsIGluZGV4ICsgMSk7XG59XG5cbi8vIFNlYXJjaCBmb3IgdGhlIGFjdHVhbCB0YXJnZXQgb2YgYSBkZWxlZ2F0ZWQgZXZlbnRcbmZ1bmN0aW9uIGZpbmRFbGVtZW50SW5FdmVudFBhdGgoZXYsIHNlbGVjdG9yKSB7XG4gIHZhciBjcml0ZXJpYSA9IHR5cGVvZiBzZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJyA/IHNlbGVjdG9yIDogZnVuY3Rpb24gKGVsKSB7XG4gICAgcmV0dXJuIGVsLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xuICByZXR1cm4gZmluZEZyb21QYXRoKGV2LmNvbXBvc2VkUGF0aCgpLCBjcml0ZXJpYSwgZXYuY3VycmVudFRhcmdldCk7XG59XG5cbi8vIGRlZmF1bHQgbG9jYWxlc1xudmFyIGxvY2FsZXMgPSB7XG4gIGVuOiB7XG4gICAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gICAgZGF5c1Nob3J0OiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gICAgZGF5c01pbjogW1wiU3VcIiwgXCJNb1wiLCBcIlR1XCIsIFwiV2VcIiwgXCJUaFwiLCBcIkZyXCIsIFwiU2FcIl0sXG4gICAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcbiAgICBtb250aHNTaG9ydDogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdLFxuICAgIHRvZGF5OiBcIlRvZGF5XCIsXG4gICAgY2xlYXI6IFwiQ2xlYXJcIixcbiAgICB0aXRsZUZvcm1hdDogXCJNTSB5XCJcbiAgfVxufTtcblxuLy8gY29uZmlnIG9wdGlvbnMgdXBkYXRhYmxlIGJ5IHNldE9wdGlvbnMoKSBhbmQgdGhlaXIgZGVmYXVsdCB2YWx1ZXNcbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgYXV0b2hpZGU6IGZhbHNlLFxuICBiZWZvcmVTaG93RGF5OiBudWxsLFxuICBiZWZvcmVTaG93RGVjYWRlOiBudWxsLFxuICBiZWZvcmVTaG93TW9udGg6IG51bGwsXG4gIGJlZm9yZVNob3dZZWFyOiBudWxsLFxuICBjYWxlbmRhcldlZWtzOiBmYWxzZSxcbiAgY2xlYXJCdG46IGZhbHNlLFxuICBkYXRlRGVsaW1pdGVyOiAnLCcsXG4gIGRhdGVzRGlzYWJsZWQ6IFtdLFxuICBkYXlzT2ZXZWVrRGlzYWJsZWQ6IFtdLFxuICBkYXlzT2ZXZWVrSGlnaGxpZ2h0ZWQ6IFtdLFxuICBkZWZhdWx0Vmlld0RhdGU6IHVuZGVmaW5lZCxcbiAgLy8gcGxhY2Vob2xkZXIsIGRlZmF1bHRzIHRvIHRvZGF5KCkgYnkgdGhlIHByb2dyYW1cbiAgZGlzYWJsZVRvdWNoS2V5Ym9hcmQ6IGZhbHNlLFxuICBmb3JtYXQ6ICdtbS9kZC95eXl5JyxcbiAgbGFuZ3VhZ2U6ICdlbicsXG4gIG1heERhdGU6IG51bGwsXG4gIG1heE51bWJlck9mRGF0ZXM6IDEsXG4gIG1heFZpZXc6IDMsXG4gIG1pbkRhdGU6IG51bGwsXG4gIG5leHRBcnJvdzogJzxzdmcgY2xhc3M9XCJ3LTQgaC00IHJ0bDpyb3RhdGUtMTgwIHRleHQtZ3JheS04MDAgZGFyazp0ZXh0LXdoaXRlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAxNCAxMFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTEgNWgxMm0wIDBMOSAxbTQgNEw5IDlcIi8+PC9zdmc+JyxcbiAgb3JpZW50YXRpb246ICdhdXRvJyxcbiAgcGlja0xldmVsOiAwLFxuICBwcmV2QXJyb3c6ICc8c3ZnIGNsYXNzPVwidy00IGgtNCBydGw6cm90YXRlLTE4MCB0ZXh0LWdyYXktODAwIGRhcms6dGV4dC13aGl0ZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMTQgMTBcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xMyA1SDFtMCAwIDQgNE0xIDVsNC00XCIvPjwvc3ZnPicsXG4gIHNob3dEYXlzT2ZXZWVrOiB0cnVlLFxuICBzaG93T25DbGljazogdHJ1ZSxcbiAgc2hvd09uRm9jdXM6IHRydWUsXG4gIHN0YXJ0VmlldzogMCxcbiAgdGl0bGU6ICcnLFxuICB0b2RheUJ0bjogZmFsc2UsXG4gIHRvZGF5QnRuTW9kZTogMCxcbiAgdG9kYXlIaWdobGlnaHQ6IGZhbHNlLFxuICB1cGRhdGVPbkJsdXI6IHRydWUsXG4gIHdlZWtTdGFydDogMFxufTtcblxudmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbmZ1bmN0aW9uIHBhcnNlSFRNTChodG1sKSB7XG4gIHJldHVybiByYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoaHRtbCk7XG59XG5mdW5jdGlvbiBoaWRlRWxlbWVudChlbCkge1xuICBpZiAoZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGJhY2sgdXAgdGhlIGV4aXN0aW5nIGRpc3BsYXkgc2V0dGluZyBpbiBkYXRhLXN0eWxlLWRpc3BsYXlcbiAgaWYgKGVsLnN0eWxlLmRpc3BsYXkpIHtcbiAgICBlbC5kYXRhc2V0LnN0eWxlRGlzcGxheSA9IGVsLnN0eWxlLmRpc3BsYXk7XG4gIH1cbiAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbn1cbmZ1bmN0aW9uIHNob3dFbGVtZW50KGVsKSB7XG4gIGlmIChlbC5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGVsLmRhdGFzZXQuc3R5bGVEaXNwbGF5KSB7XG4gICAgLy8gcmVzdG9yZSBiYWNrZWQtdXAgZGlzcGF5IHByb3BlcnR5XG4gICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLmRhdGFzZXQuc3R5bGVEaXNwbGF5O1xuICAgIGRlbGV0ZSBlbC5kYXRhc2V0LnN0eWxlRGlzcGxheTtcbiAgfSBlbHNlIHtcbiAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gIH1cbn1cbmZ1bmN0aW9uIGVtcHR5Q2hpbGROb2RlcyhlbCkge1xuICBpZiAoZWwuZmlyc3RDaGlsZCkge1xuICAgIGVsLnJlbW92ZUNoaWxkKGVsLmZpcnN0Q2hpbGQpO1xuICAgIGVtcHR5Q2hpbGROb2RlcyhlbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlcGxhY2VDaGlsZE5vZGVzKGVsLCBuZXdDaGlsZE5vZGVzKSB7XG4gIGVtcHR5Q2hpbGROb2RlcyhlbCk7XG4gIGlmIChuZXdDaGlsZE5vZGVzIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkge1xuICAgIGVsLmFwcGVuZENoaWxkKG5ld0NoaWxkTm9kZXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBuZXdDaGlsZE5vZGVzID09PSAnc3RyaW5nJykge1xuICAgIGVsLmFwcGVuZENoaWxkKHBhcnNlSFRNTChuZXdDaGlsZE5vZGVzKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG5ld0NoaWxkTm9kZXMuZm9yRWFjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG5ld0NoaWxkTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgZWwuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIGRlZmF1bHRMYW5nID0gZGVmYXVsdE9wdGlvbnMubGFuZ3VhZ2UsXG4gIGRlZmF1bHRGb3JtYXQgPSBkZWZhdWx0T3B0aW9ucy5mb3JtYXQsXG4gIGRlZmF1bHRXZWVrU3RhcnQgPSBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnQ7XG5cbi8vIFJlZHVjZXIgZnVuY3Rpb24gdG8gZmlsdGVyIG91dCBpbnZhbGlkIGRheS1vZi13ZWVrIGZyb20gdGhlIGlucHV0XG5mdW5jdGlvbiBzYW5pdGl6ZURPVyhkb3csIGRheSkge1xuICByZXR1cm4gZG93Lmxlbmd0aCA8IDYgJiYgZGF5ID49IDAgJiYgZGF5IDwgNyA/IHB1c2hVbmlxdWUoZG93LCBkYXkpIDogZG93O1xufVxuZnVuY3Rpb24gY2FsY0VuZE9mV2VlayhzdGFydE9mV2Vlaykge1xuICByZXR1cm4gKHN0YXJ0T2ZXZWVrICsgNikgJSA3O1xufVxuXG4vLyB2YWxpZGF0ZSBpbnB1dCBkYXRlLiBpZiBpbnZhbGlkLCBmYWxsYmFjayB0byB0aGUgb3JpZ2luYWwgdmFsdWVcbmZ1bmN0aW9uIHZhbGlkYXRlRGF0ZSh2YWx1ZSwgZm9ybWF0LCBsb2NhbGUsIG9yaWdWYWx1ZSkge1xuICB2YXIgZGF0ZSA9IHBhcnNlRGF0ZSh2YWx1ZSwgZm9ybWF0LCBsb2NhbGUpO1xuICByZXR1cm4gZGF0ZSAhPT0gdW5kZWZpbmVkID8gZGF0ZSA6IG9yaWdWYWx1ZTtcbn1cblxuLy8gVmFsaWRhdGUgdmlld0lkLiBpZiBpbnZhbGlkLCBmYWxsYmFjayB0byB0aGUgb3JpZ2luYWwgdmFsdWVcbmZ1bmN0aW9uIHZhbGlkYXRlVmlld0lkKHZhbHVlLCBvcmlnVmFsdWUpIHtcbiAgdmFyIG1heCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMztcbiAgdmFyIHZpZXdJZCA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIHJldHVybiB2aWV3SWQgPj0gMCAmJiB2aWV3SWQgPD0gbWF4ID8gdmlld0lkIDogb3JpZ1ZhbHVlO1xufVxuXG4vLyBDcmVhdGUgRGF0ZXBpY2tlciBjb25maWd1cmF0aW9uIHRvIHNldFxuZnVuY3Rpb24gcHJvY2Vzc09wdGlvbnMob3B0aW9ucywgZGF0ZXBpY2tlcikge1xuICB2YXIgaW5PcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG4gIHZhciBjb25maWcgPSB7fTtcbiAgdmFyIGxvY2FsZXMgPSBkYXRlcGlja2VyLmNvbnN0cnVjdG9yLmxvY2FsZXM7XG4gIHZhciBfcmVmID0gZGF0ZXBpY2tlci5jb25maWcgfHwge30sXG4gICAgZm9ybWF0ID0gX3JlZi5mb3JtYXQsXG4gICAgbGFuZ3VhZ2UgPSBfcmVmLmxhbmd1YWdlLFxuICAgIGxvY2FsZSA9IF9yZWYubG9jYWxlLFxuICAgIG1heERhdGUgPSBfcmVmLm1heERhdGUsXG4gICAgbWF4VmlldyA9IF9yZWYubWF4VmlldyxcbiAgICBtaW5EYXRlID0gX3JlZi5taW5EYXRlLFxuICAgIHBpY2tMZXZlbCA9IF9yZWYucGlja0xldmVsLFxuICAgIHN0YXJ0VmlldyA9IF9yZWYuc3RhcnRWaWV3LFxuICAgIHdlZWtTdGFydCA9IF9yZWYud2Vla1N0YXJ0O1xuICBpZiAoaW5PcHRzLmxhbmd1YWdlKSB7XG4gICAgdmFyIGxhbmc7XG4gICAgaWYgKGluT3B0cy5sYW5ndWFnZSAhPT0gbGFuZ3VhZ2UpIHtcbiAgICAgIGlmIChsb2NhbGVzW2luT3B0cy5sYW5ndWFnZV0pIHtcbiAgICAgICAgbGFuZyA9IGluT3B0cy5sYW5ndWFnZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGxhbmdhdWdlICsgcmVnaW9uIHRhZyBjYW4gZmFsbGJhY2sgdG8gdGhlIG9uZSB3aXRob3V0XG4gICAgICAgIC8vIHJlZ2lvbiAoZS5nLiBmci1DQSDihpIgZnIpXG4gICAgICAgIGxhbmcgPSBpbk9wdHMubGFuZ3VhZ2Uuc3BsaXQoJy0nKVswXTtcbiAgICAgICAgaWYgKGxvY2FsZXNbbGFuZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGxhbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBkZWxldGUgaW5PcHRzLmxhbmd1YWdlO1xuICAgIGlmIChsYW5nKSB7XG4gICAgICBsYW5ndWFnZSA9IGNvbmZpZy5sYW5ndWFnZSA9IGxhbmc7XG5cbiAgICAgIC8vIHVwZGF0ZSBsb2NhbGUgYXMgd2VsbCB3aGVuIHVwZGF0aW5nIGxhbmd1YWdlXG4gICAgICB2YXIgb3JpZ0xvY2FsZSA9IGxvY2FsZSB8fCBsb2NhbGVzW2RlZmF1bHRMYW5nXTtcbiAgICAgIC8vIHVzZSBkZWZhdWx0IGxhbmd1YWdlJ3MgcHJvcGVydGllcyBmb3IgdGhlIGZhbGxiYWNrXG4gICAgICBsb2NhbGUgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgZm9ybWF0OiBkZWZhdWx0Rm9ybWF0LFxuICAgICAgICB3ZWVrU3RhcnQ6IGRlZmF1bHRXZWVrU3RhcnRcbiAgICAgIH0sIGxvY2FsZXNbZGVmYXVsdExhbmddKTtcbiAgICAgIGlmIChsYW5ndWFnZSAhPT0gZGVmYXVsdExhbmcpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihsb2NhbGUsIGxvY2FsZXNbbGFuZ3VhZ2VdKTtcbiAgICAgIH1cbiAgICAgIGNvbmZpZy5sb2NhbGUgPSBsb2NhbGU7XG4gICAgICAvLyBpZiBmb3JtYXQgYW5kL29yIHdlZWtTdGFydCBhcmUgdGhlIHNhbWUgYXMgb2xkIGxvY2FsZSdzIGRlZmF1bHRzLFxuICAgICAgLy8gdXBkYXRlIHRoZW0gdG8gbmV3IGxvY2FsZSdzIGRlZmF1bHRzXG4gICAgICBpZiAoZm9ybWF0ID09PSBvcmlnTG9jYWxlLmZvcm1hdCkge1xuICAgICAgICBmb3JtYXQgPSBjb25maWcuZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgICAgIH1cbiAgICAgIGlmICh3ZWVrU3RhcnQgPT09IG9yaWdMb2NhbGUud2Vla1N0YXJ0KSB7XG4gICAgICAgIHdlZWtTdGFydCA9IGNvbmZpZy53ZWVrU3RhcnQgPSBsb2NhbGUud2Vla1N0YXJ0O1xuICAgICAgICBjb25maWcud2Vla0VuZCA9IGNhbGNFbmRPZldlZWsobG9jYWxlLndlZWtTdGFydCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChpbk9wdHMuZm9ybWF0KSB7XG4gICAgdmFyIGhhc1RvRGlzcGxheSA9IHR5cGVvZiBpbk9wdHMuZm9ybWF0LnRvRGlzcGxheSA9PT0gJ2Z1bmN0aW9uJztcbiAgICB2YXIgaGFzVG9WYWx1ZSA9IHR5cGVvZiBpbk9wdHMuZm9ybWF0LnRvVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgdmFyIHZhbGlkRm9ybWF0U3RyaW5nID0gcmVGb3JtYXRUb2tlbnMudGVzdChpbk9wdHMuZm9ybWF0KTtcbiAgICBpZiAoaGFzVG9EaXNwbGF5ICYmIGhhc1RvVmFsdWUgfHwgdmFsaWRGb3JtYXRTdHJpbmcpIHtcbiAgICAgIGZvcm1hdCA9IGNvbmZpZy5mb3JtYXQgPSBpbk9wdHMuZm9ybWF0O1xuICAgIH1cbiAgICBkZWxldGUgaW5PcHRzLmZvcm1hdDtcbiAgfVxuXG4gIC8vKioqIGRhdGVzICoqKi8vXG4gIC8vIHdoaWxlIG1pbiBhbmQgbWF4RGF0ZSBmb3IgXCJubyBsaW1pdFwiIGluIHRoZSBvcHRpb25zIGFyZSBiZXR0ZXIgdG8gYmUgbnVsbFxuICAvLyAoZXNwZWNpYWxseSB3aGVuIHVwZGF0aW5nKSwgdGhlIG9uZXMgaW4gdGhlIGNvbmZpZyBoYXZlIHRvIGJlIHVuZGVmaW5lZFxuICAvLyBiZWNhdXNlIG51bGwgaXMgdHJlYXRlZCBhcyAwICg9IHVuaXggZXBvY2gpIHdoZW4gY29tcGFyaW5nIHdpdGggdGltZSB2YWx1ZVxuICB2YXIgbWluRHQgPSBtaW5EYXRlO1xuICB2YXIgbWF4RHQgPSBtYXhEYXRlO1xuICBpZiAoaW5PcHRzLm1pbkRhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIG1pbkR0ID0gaW5PcHRzLm1pbkRhdGUgPT09IG51bGwgPyBkYXRlVmFsdWUoMCwgMCwgMSkgLy8gc2V0IDAwMDAtMDEtMDEgdG8gcHJldmVudCBuZWdhdGl2ZSB2YWx1ZXMgZm9yIHllYXJcbiAgICA6IHZhbGlkYXRlRGF0ZShpbk9wdHMubWluRGF0ZSwgZm9ybWF0LCBsb2NhbGUsIG1pbkR0KTtcbiAgICBkZWxldGUgaW5PcHRzLm1pbkRhdGU7XG4gIH1cbiAgaWYgKGluT3B0cy5tYXhEYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICBtYXhEdCA9IGluT3B0cy5tYXhEYXRlID09PSBudWxsID8gdW5kZWZpbmVkIDogdmFsaWRhdGVEYXRlKGluT3B0cy5tYXhEYXRlLCBmb3JtYXQsIGxvY2FsZSwgbWF4RHQpO1xuICAgIGRlbGV0ZSBpbk9wdHMubWF4RGF0ZTtcbiAgfVxuICBpZiAobWF4RHQgPCBtaW5EdCkge1xuICAgIG1pbkRhdGUgPSBjb25maWcubWluRGF0ZSA9IG1heER0O1xuICAgIG1heERhdGUgPSBjb25maWcubWF4RGF0ZSA9IG1pbkR0O1xuICB9IGVsc2Uge1xuICAgIGlmIChtaW5EYXRlICE9PSBtaW5EdCkge1xuICAgICAgbWluRGF0ZSA9IGNvbmZpZy5taW5EYXRlID0gbWluRHQ7XG4gICAgfVxuICAgIGlmIChtYXhEYXRlICE9PSBtYXhEdCkge1xuICAgICAgbWF4RGF0ZSA9IGNvbmZpZy5tYXhEYXRlID0gbWF4RHQ7XG4gICAgfVxuICB9XG4gIGlmIChpbk9wdHMuZGF0ZXNEaXNhYmxlZCkge1xuICAgIGNvbmZpZy5kYXRlc0Rpc2FibGVkID0gaW5PcHRzLmRhdGVzRGlzYWJsZWQucmVkdWNlKGZ1bmN0aW9uIChkYXRlcywgZHQpIHtcbiAgICAgIHZhciBkYXRlID0gcGFyc2VEYXRlKGR0LCBmb3JtYXQsIGxvY2FsZSk7XG4gICAgICByZXR1cm4gZGF0ZSAhPT0gdW5kZWZpbmVkID8gcHVzaFVuaXF1ZShkYXRlcywgZGF0ZSkgOiBkYXRlcztcbiAgICB9LCBbXSk7XG4gICAgZGVsZXRlIGluT3B0cy5kYXRlc0Rpc2FibGVkO1xuICB9XG4gIGlmIChpbk9wdHMuZGVmYXVsdFZpZXdEYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgdmlld0RhdGUgPSBwYXJzZURhdGUoaW5PcHRzLmRlZmF1bHRWaWV3RGF0ZSwgZm9ybWF0LCBsb2NhbGUpO1xuICAgIGlmICh2aWV3RGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25maWcuZGVmYXVsdFZpZXdEYXRlID0gdmlld0RhdGU7XG4gICAgfVxuICAgIGRlbGV0ZSBpbk9wdHMuZGVmYXVsdFZpZXdEYXRlO1xuICB9XG5cbiAgLy8qKiogZGF5cyBvZiB3ZWVrICoqKi8vXG4gIGlmIChpbk9wdHMud2Vla1N0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgd2tTdGFydCA9IE51bWJlcihpbk9wdHMud2Vla1N0YXJ0KSAlIDc7XG4gICAgaWYgKCFpc05hTih3a1N0YXJ0KSkge1xuICAgICAgd2Vla1N0YXJ0ID0gY29uZmlnLndlZWtTdGFydCA9IHdrU3RhcnQ7XG4gICAgICBjb25maWcud2Vla0VuZCA9IGNhbGNFbmRPZldlZWsod2tTdGFydCk7XG4gICAgfVxuICAgIGRlbGV0ZSBpbk9wdHMud2Vla1N0YXJ0O1xuICB9XG4gIGlmIChpbk9wdHMuZGF5c09mV2Vla0Rpc2FibGVkKSB7XG4gICAgY29uZmlnLmRheXNPZldlZWtEaXNhYmxlZCA9IGluT3B0cy5kYXlzT2ZXZWVrRGlzYWJsZWQucmVkdWNlKHNhbml0aXplRE9XLCBbXSk7XG4gICAgZGVsZXRlIGluT3B0cy5kYXlzT2ZXZWVrRGlzYWJsZWQ7XG4gIH1cbiAgaWYgKGluT3B0cy5kYXlzT2ZXZWVrSGlnaGxpZ2h0ZWQpIHtcbiAgICBjb25maWcuZGF5c09mV2Vla0hpZ2hsaWdodGVkID0gaW5PcHRzLmRheXNPZldlZWtIaWdobGlnaHRlZC5yZWR1Y2Uoc2FuaXRpemVET1csIFtdKTtcbiAgICBkZWxldGUgaW5PcHRzLmRheXNPZldlZWtIaWdobGlnaHRlZDtcbiAgfVxuXG4gIC8vKioqIG11bHRpIGRhdGUgKioqLy9cbiAgaWYgKGluT3B0cy5tYXhOdW1iZXJPZkRhdGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgbWF4TnVtYmVyT2ZEYXRlcyA9IHBhcnNlSW50KGluT3B0cy5tYXhOdW1iZXJPZkRhdGVzLCAxMCk7XG4gICAgaWYgKG1heE51bWJlck9mRGF0ZXMgPj0gMCkge1xuICAgICAgY29uZmlnLm1heE51bWJlck9mRGF0ZXMgPSBtYXhOdW1iZXJPZkRhdGVzO1xuICAgICAgY29uZmlnLm11bHRpZGF0ZSA9IG1heE51bWJlck9mRGF0ZXMgIT09IDE7XG4gICAgfVxuICAgIGRlbGV0ZSBpbk9wdHMubWF4TnVtYmVyT2ZEYXRlcztcbiAgfVxuICBpZiAoaW5PcHRzLmRhdGVEZWxpbWl0ZXIpIHtcbiAgICBjb25maWcuZGF0ZURlbGltaXRlciA9IFN0cmluZyhpbk9wdHMuZGF0ZURlbGltaXRlcik7XG4gICAgZGVsZXRlIGluT3B0cy5kYXRlRGVsaW1pdGVyO1xuICB9XG5cbiAgLy8qKiogcGljayBsZXZlbCAmIHZpZXcgKioqLy9cbiAgdmFyIG5ld1BpY2tMZXZlbCA9IHBpY2tMZXZlbDtcbiAgaWYgKGluT3B0cy5waWNrTGV2ZWwgIT09IHVuZGVmaW5lZCkge1xuICAgIG5ld1BpY2tMZXZlbCA9IHZhbGlkYXRlVmlld0lkKGluT3B0cy5waWNrTGV2ZWwsIDIpO1xuICAgIGRlbGV0ZSBpbk9wdHMucGlja0xldmVsO1xuICB9XG4gIGlmIChuZXdQaWNrTGV2ZWwgIT09IHBpY2tMZXZlbCkge1xuICAgIHBpY2tMZXZlbCA9IGNvbmZpZy5waWNrTGV2ZWwgPSBuZXdQaWNrTGV2ZWw7XG4gIH1cbiAgdmFyIG5ld01heFZpZXcgPSBtYXhWaWV3O1xuICBpZiAoaW5PcHRzLm1heFZpZXcgIT09IHVuZGVmaW5lZCkge1xuICAgIG5ld01heFZpZXcgPSB2YWxpZGF0ZVZpZXdJZChpbk9wdHMubWF4VmlldywgbWF4Vmlldyk7XG4gICAgZGVsZXRlIGluT3B0cy5tYXhWaWV3O1xuICB9XG4gIC8vIGVuc3VyZSBtYXggdmlldyA+PSBwaWNrIGxldmVsXG4gIG5ld01heFZpZXcgPSBwaWNrTGV2ZWwgPiBuZXdNYXhWaWV3ID8gcGlja0xldmVsIDogbmV3TWF4VmlldztcbiAgaWYgKG5ld01heFZpZXcgIT09IG1heFZpZXcpIHtcbiAgICBtYXhWaWV3ID0gY29uZmlnLm1heFZpZXcgPSBuZXdNYXhWaWV3O1xuICB9XG4gIHZhciBuZXdTdGFydFZpZXcgPSBzdGFydFZpZXc7XG4gIGlmIChpbk9wdHMuc3RhcnRWaWV3ICE9PSB1bmRlZmluZWQpIHtcbiAgICBuZXdTdGFydFZpZXcgPSB2YWxpZGF0ZVZpZXdJZChpbk9wdHMuc3RhcnRWaWV3LCBuZXdTdGFydFZpZXcpO1xuICAgIGRlbGV0ZSBpbk9wdHMuc3RhcnRWaWV3O1xuICB9XG4gIC8vIGVuc3VyZSBwaWNrIGxldmVsIDw9IHN0YXJ0IHZpZXcgPD0gbWF4IHZpZXdcbiAgaWYgKG5ld1N0YXJ0VmlldyA8IHBpY2tMZXZlbCkge1xuICAgIG5ld1N0YXJ0VmlldyA9IHBpY2tMZXZlbDtcbiAgfSBlbHNlIGlmIChuZXdTdGFydFZpZXcgPiBtYXhWaWV3KSB7XG4gICAgbmV3U3RhcnRWaWV3ID0gbWF4VmlldztcbiAgfVxuICBpZiAobmV3U3RhcnRWaWV3ICE9PSBzdGFydFZpZXcpIHtcbiAgICBjb25maWcuc3RhcnRWaWV3ID0gbmV3U3RhcnRWaWV3O1xuICB9XG5cbiAgLy8qKiogdGVtcGxhdGUgKioqLy9cbiAgaWYgKGluT3B0cy5wcmV2QXJyb3cpIHtcbiAgICB2YXIgcHJldkFycm93ID0gcGFyc2VIVE1MKGluT3B0cy5wcmV2QXJyb3cpO1xuICAgIGlmIChwcmV2QXJyb3cuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25maWcucHJldkFycm93ID0gcHJldkFycm93LmNoaWxkTm9kZXM7XG4gICAgfVxuICAgIGRlbGV0ZSBpbk9wdHMucHJldkFycm93O1xuICB9XG4gIGlmIChpbk9wdHMubmV4dEFycm93KSB7XG4gICAgdmFyIG5leHRBcnJvdyA9IHBhcnNlSFRNTChpbk9wdHMubmV4dEFycm93KTtcbiAgICBpZiAobmV4dEFycm93LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uZmlnLm5leHRBcnJvdyA9IG5leHRBcnJvdy5jaGlsZE5vZGVzO1xuICAgIH1cbiAgICBkZWxldGUgaW5PcHRzLm5leHRBcnJvdztcbiAgfVxuXG4gIC8vKioqIG1pc2MgKioqLy9cbiAgaWYgKGluT3B0cy5kaXNhYmxlVG91Y2hLZXlib2FyZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uZmlnLmRpc2FibGVUb3VjaEtleWJvYXJkID0gJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQgJiYgISFpbk9wdHMuZGlzYWJsZVRvdWNoS2V5Ym9hcmQ7XG4gICAgZGVsZXRlIGluT3B0cy5kaXNhYmxlVG91Y2hLZXlib2FyZDtcbiAgfVxuICBpZiAoaW5PcHRzLm9yaWVudGF0aW9uKSB7XG4gICAgdmFyIG9yaWVudGF0aW9uID0gaW5PcHRzLm9yaWVudGF0aW9uLnRvTG93ZXJDYXNlKCkuc3BsaXQoL1xccysvZyk7XG4gICAgY29uZmlnLm9yaWVudGF0aW9uID0ge1xuICAgICAgeDogb3JpZW50YXRpb24uZmluZChmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geCA9PT0gJ2xlZnQnIHx8IHggPT09ICdyaWdodCc7XG4gICAgICB9KSB8fCAnYXV0bycsXG4gICAgICB5OiBvcmllbnRhdGlvbi5maW5kKGZ1bmN0aW9uICh5KSB7XG4gICAgICAgIHJldHVybiB5ID09PSAndG9wJyB8fCB5ID09PSAnYm90dG9tJztcbiAgICAgIH0pIHx8ICdhdXRvJ1xuICAgIH07XG4gICAgZGVsZXRlIGluT3B0cy5vcmllbnRhdGlvbjtcbiAgfVxuICBpZiAoaW5PcHRzLnRvZGF5QnRuTW9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3dpdGNoIChpbk9wdHMudG9kYXlCdG5Nb2RlKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGNvbmZpZy50b2RheUJ0bk1vZGUgPSBpbk9wdHMudG9kYXlCdG5Nb2RlO1xuICAgIH1cbiAgICBkZWxldGUgaW5PcHRzLnRvZGF5QnRuTW9kZTtcbiAgfVxuXG4gIC8vKioqIGNvcHkgdGhlIHJlc3QgKioqLy9cbiAgT2JqZWN0LmtleXMoaW5PcHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaW5PcHRzW2tleV0gIT09IHVuZGVmaW5lZCAmJiBoYXNQcm9wZXJ0eShkZWZhdWx0T3B0aW9ucywga2V5KSkge1xuICAgICAgY29uZmlnW2tleV0gPSBpbk9wdHNba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY29uZmlnO1xufVxuXG52YXIgcGlja2VyVGVtcGxhdGUgPSBvcHRpbWl6ZVRlbXBsYXRlSFRNTChcIjxkaXYgY2xhc3M9XFxcImRhdGVwaWNrZXIgaGlkZGVuXFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcImRhdGVwaWNrZXItcGlja2VyIGlubGluZS1ibG9jayByb3VuZGVkLWxnIGJnLXdoaXRlIGRhcms6YmctZ3JheS03MDAgc2hhZG93LWxnIHAtNFxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImRhdGVwaWNrZXItaGVhZGVyXFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJkYXRlcGlja2VyLXRpdGxlIGJnLXdoaXRlIGRhcms6YmctZ3JheS03MDAgZGFyazp0ZXh0LXdoaXRlIHB4LTIgcHktMyB0ZXh0LWNlbnRlciBmb250LXNlbWlib2xkXFxcIj48L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJkYXRlcGlja2VyLWNvbnRyb2xzIGZsZXgganVzdGlmeS1iZXR3ZWVuIG1iLTJcXFwiPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJiZy13aGl0ZSBkYXJrOmJnLWdyYXktNzAwIHJvdW5kZWQtbGcgdGV4dC1ncmF5LTUwMCBkYXJrOnRleHQtd2hpdGUgaG92ZXI6YmctZ3JheS0xMDAgZGFyazpob3ZlcjpiZy1ncmF5LTYwMCBob3Zlcjp0ZXh0LWdyYXktOTAwIGRhcms6aG92ZXI6dGV4dC13aGl0ZSB0ZXh0LWxnIHAtMi41IGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy1ncmF5LTIwMCBwcmV2LWJ0blxcXCI+PC9idXR0b24+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcInRleHQtc20gcm91bmRlZC1sZyB0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC13aGl0ZSBiZy13aGl0ZSBkYXJrOmJnLWdyYXktNzAwIGZvbnQtc2VtaWJvbGQgcHktMi41IHB4LTUgaG92ZXI6YmctZ3JheS0xMDAgZGFyazpob3ZlcjpiZy1ncmF5LTYwMCBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy0yIGZvY3VzOnJpbmctZ3JheS0yMDAgdmlldy1zd2l0Y2hcXFwiPjwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJiZy13aGl0ZSBkYXJrOmJnLWdyYXktNzAwIHJvdW5kZWQtbGcgdGV4dC1ncmF5LTUwMCBkYXJrOnRleHQtd2hpdGUgaG92ZXI6YmctZ3JheS0xMDAgZGFyazpob3ZlcjpiZy1ncmF5LTYwMCBob3Zlcjp0ZXh0LWdyYXktOTAwIGRhcms6aG92ZXI6dGV4dC13aGl0ZSB0ZXh0LWxnIHAtMi41IGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy1ncmF5LTIwMCBuZXh0LWJ0blxcXCI+PC9idXR0b24+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJkYXRlcGlja2VyLW1haW4gcC0xXFxcIj48L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZGF0ZXBpY2tlci1mb290ZXJcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImRhdGVwaWNrZXItY29udHJvbHMgZmxleCBzcGFjZS14LTIgcnRsOnNwYWNlLXgtcmV2ZXJzZSBtdC0yXFxcIj5cXG4gICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiJWJ1dHRvbkNsYXNzJSB0b2RheS1idG4gdGV4dC13aGl0ZSBiZy1ibHVlLTcwMCAhYmctcHJpbWFyeS03MDAgZGFyazpiZy1ibHVlLTYwMCBkYXJrOiFiZy1wcmltYXJ5LTYwMCBob3ZlcjpiZy1ibHVlLTgwMCBob3ZlcjohYmctcHJpbWFyeS04MDAgZGFyazpob3ZlcjpiZy1ibHVlLTcwMCBkYXJrOmhvdmVyOiFiZy1wcmltYXJ5LTcwMCBmb2N1czpyaW5nLTQgZm9jdXM6cmluZy1ibHVlLTMwMCBmb2N1czohcmluZy1wcmltYXJ5LTMwMCBmb250LW1lZGl1bSByb3VuZGVkLWxnIHRleHQtc20gcHgtNSBweS0yIHRleHQtY2VudGVyIHctMS8yXFxcIj48L2J1dHRvbj5cXG4gICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiJWJ1dHRvbkNsYXNzJSBjbGVhci1idG4gdGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtd2hpdGUgYmctd2hpdGUgZGFyazpiZy1ncmF5LTcwMCBib3JkZXIgYm9yZGVyLWdyYXktMzAwIGRhcms6Ym9yZGVyLWdyYXktNjAwIGhvdmVyOmJnLWdyYXktMTAwIGRhcms6aG92ZXI6YmctZ3JheS02MDAgZm9jdXM6cmluZy00IGZvY3VzOnJpbmctYmx1ZS0zMDAgZm9jdXM6IXJpbmctcHJpbWFyeS0zMDAgZm9udC1tZWRpdW0gcm91bmRlZC1sZyB0ZXh0LXNtIHB4LTUgcHktMiB0ZXh0LWNlbnRlciB3LTEvMlxcXCI+PC9idXR0b24+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgPC9kaXY+XFxuPC9kaXY+XCIpO1xuXG52YXIgZGF5c1RlbXBsYXRlID0gb3B0aW1pemVUZW1wbGF0ZUhUTUwoXCI8ZGl2IGNsYXNzPVxcXCJkYXlzXFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcImRheXMtb2Ytd2VlayBncmlkIGdyaWQtY29scy03IG1iLTFcXFwiPlwiLmNvbmNhdChjcmVhdGVUYWdSZXBlYXQoJ3NwYW4nLCA3LCB7XG4gIFwiY2xhc3NcIjogJ2RvdyBibG9jayBmbGV4LTEgbGVhZGluZy05IGJvcmRlci0wIHJvdW5kZWQtbGcgY3Vyc29yLWRlZmF1bHQgdGV4dC1jZW50ZXIgdGV4dC1ncmF5LTkwMCBmb250LXNlbWlib2xkIHRleHQtc20nXG59KSwgXCI8L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImRhdGVwaWNrZXItZ3JpZCB3LTY0IGdyaWQgZ3JpZC1jb2xzLTdcXFwiPlwiKS5jb25jYXQoY3JlYXRlVGFnUmVwZWF0KCdzcGFuJywgNDIsIHtcbiAgXCJjbGFzc1wiOiAnYmxvY2sgZmxleC0xIGxlYWRpbmctOSBib3JkZXItMCByb3VuZGVkLWxnIGN1cnNvci1kZWZhdWx0IHRleHQtY2VudGVyIHRleHQtZ3JheS05MDAgZm9udC1zZW1pYm9sZCB0ZXh0LXNtIGgtNiBsZWFkaW5nLTYgdGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LWdyYXktNTAwIGRhcms6dGV4dC1ncmF5LTQwMCdcbn0pLCBcIjwvZGl2PlxcbjwvZGl2PlwiKSk7XG5cbnZhciBjYWxlbmRhcldlZWtzVGVtcGxhdGUgPSBvcHRpbWl6ZVRlbXBsYXRlSFRNTChcIjxkaXYgY2xhc3M9XFxcImNhbGVuZGFyLXdlZWtzXFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcImRheXMtb2Ytd2VlayBmbGV4XFxcIj48c3BhbiBjbGFzcz1cXFwiZG93IGgtNiBsZWFkaW5nLTYgdGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LWdyYXktNTAwIGRhcms6dGV4dC1ncmF5LTQwMFxcXCI+PC9zcGFuPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwid2Vla3NcXFwiPlwiLmNvbmNhdChjcmVhdGVUYWdSZXBlYXQoJ3NwYW4nLCA2LCB7XG4gIFwiY2xhc3NcIjogJ3dlZWsgYmxvY2sgZmxleC0xIGxlYWRpbmctOSBib3JkZXItMCByb3VuZGVkLWxnIGN1cnNvci1kZWZhdWx0IHRleHQtY2VudGVyIHRleHQtZ3JheS05MDAgZm9udC1zZW1pYm9sZCB0ZXh0LXNtJ1xufSksIFwiPC9kaXY+XFxuPC9kaXY+XCIpKTtcblxuLy8gQmFzZSBjbGFzcyBvZiB0aGUgdmlldyBjbGFzc2VzXG52YXIgVmlldyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZpZXcocGlja2VyLCBjb25maWcpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmlldyk7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjb25maWcsIHtcbiAgICAgIHBpY2tlcjogcGlja2VyLFxuICAgICAgZWxlbWVudDogcGFyc2VIVE1MKFwiPGRpdiBjbGFzcz1cXFwiZGF0ZXBpY2tlci12aWV3IGZsZXhcXFwiPjwvZGl2PlwiKS5maXJzdENoaWxkLFxuICAgICAgc2VsZWN0ZWQ6IFtdXG4gICAgfSk7XG4gICAgdGhpcy5pbml0KHRoaXMucGlja2VyLmRhdGVwaWNrZXIuY29uZmlnKTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFZpZXcsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdChvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucy5waWNrTGV2ZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmlzTWluVmlldyA9IHRoaXMuaWQgPT09IG9wdGlvbnMucGlja0xldmVsO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgdGhpcy51cGRhdGVGb2N1cygpO1xuICAgICAgdGhpcy51cGRhdGVTZWxlY3Rpb24oKTtcbiAgICB9XG5cbiAgICAvLyBFeGVjdXRlIGJlZm9yZVNob3coKSBjYWxsYmFjayBhbmQgYXBwbHkgdGhlIHJlc3VsdCB0byB0aGUgZWxlbWVudFxuICAgIC8vIGFyZ3M6XG4gICAgLy8gLSBjdXJyZW50IC0gY3VycmVudCB2YWx1ZSBvbiB0aGUgaXRlcmF0aW9uIG9uIHZpZXcgcmVuZGVyaW5nXG4gICAgLy8gLSB0aW1lVmFsdWUgLSB0aW1lIHZhbHVlIG9mIHRoZSBkYXRlIHRvIHBhc3MgdG8gYmVmb3JlU2hvdygpXG4gIH0sIHtcbiAgICBrZXk6IFwicGVyZm9ybUJlZm9yZUhvb2tcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGVyZm9ybUJlZm9yZUhvb2soZWwsIGN1cnJlbnQsIHRpbWVWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuYmVmb3JlU2hvdyhuZXcgRGF0ZSh0aW1lVmFsdWUpKTtcbiAgICAgIHN3aXRjaCAoX3R5cGVvZihyZXN1bHQpKSB7XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHJlc3VsdFxuICAgICAgICAgIH07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgY2xhc3NlczogcmVzdWx0XG4gICAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgcHVzaFVuaXF1ZSh0aGlzLmRpc2FibGVkLCBjdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LmNsYXNzZXMpIHtcbiAgICAgICAgICB2YXIgX2VsJGNsYXNzTGlzdDtcbiAgICAgICAgICB2YXIgZXh0cmFDbGFzc2VzID0gcmVzdWx0LmNsYXNzZXMuc3BsaXQoL1xccysvKTtcbiAgICAgICAgICAoX2VsJGNsYXNzTGlzdCA9IGVsLmNsYXNzTGlzdCkuYWRkLmFwcGx5KF9lbCRjbGFzc0xpc3QsIF90b0NvbnN1bWFibGVBcnJheShleHRyYUNsYXNzZXMpKTtcbiAgICAgICAgICBpZiAoZXh0cmFDbGFzc2VzLmluY2x1ZGVzKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICBwdXNoVW5pcXVlKHRoaXMuZGlzYWJsZWQsIGN1cnJlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LmNvbnRlbnQpIHtcbiAgICAgICAgICByZXBsYWNlQ2hpbGROb2RlcyhlbCwgcmVzdWx0LmNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG59KCk7XG5cbnZhciBEYXlzVmlldyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1ZpZXcpIHtcbiAgZnVuY3Rpb24gRGF5c1ZpZXcocGlja2VyKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERheXNWaWV3KTtcbiAgICByZXR1cm4gX2NhbGxTdXBlcih0aGlzLCBEYXlzVmlldywgW3BpY2tlciwge1xuICAgICAgaWQ6IDAsXG4gICAgICBuYW1lOiAnZGF5cycsXG4gICAgICBjZWxsQ2xhc3M6ICdkYXknXG4gICAgfV0pO1xuICB9XG4gIF9pbmhlcml0cyhEYXlzVmlldywgX1ZpZXcpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKERheXNWaWV3LCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQob3B0aW9ucykge1xuICAgICAgdmFyIG9uQ29uc3RydWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuICAgICAgaWYgKG9uQ29uc3RydWN0aW9uKSB7XG4gICAgICAgIHZhciBpbm5lciA9IHBhcnNlSFRNTChkYXlzVGVtcGxhdGUpLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHRoaXMuZG93ID0gaW5uZXIuZmlyc3RDaGlsZDtcbiAgICAgICAgdGhpcy5ncmlkID0gaW5uZXIubGFzdENoaWxkO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoaW5uZXIpO1xuICAgICAgfVxuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoRGF5c1ZpZXcucHJvdG90eXBlKSwgXCJpbml0XCIsIHRoaXMpLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldE9wdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIHVwZGF0ZURPVztcbiAgICAgIGlmIChoYXNQcm9wZXJ0eShvcHRpb25zLCAnbWluRGF0ZScpKSB7XG4gICAgICAgIHRoaXMubWluRGF0ZSA9IG9wdGlvbnMubWluRGF0ZTtcbiAgICAgIH1cbiAgICAgIGlmIChoYXNQcm9wZXJ0eShvcHRpb25zLCAnbWF4RGF0ZScpKSB7XG4gICAgICAgIHRoaXMubWF4RGF0ZSA9IG9wdGlvbnMubWF4RGF0ZTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmRhdGVzRGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5kYXRlc0Rpc2FibGVkID0gb3B0aW9ucy5kYXRlc0Rpc2FibGVkO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZGF5c09mV2Vla0Rpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuZGF5c09mV2Vla0Rpc2FibGVkID0gb3B0aW9ucy5kYXlzT2ZXZWVrRGlzYWJsZWQ7XG4gICAgICAgIHVwZGF0ZURPVyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5kYXlzT2ZXZWVrSGlnaGxpZ2h0ZWQpIHtcbiAgICAgICAgdGhpcy5kYXlzT2ZXZWVrSGlnaGxpZ2h0ZWQgPSBvcHRpb25zLmRheXNPZldlZWtIaWdobGlnaHRlZDtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLnRvZGF5SGlnaGxpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy50b2RheUhpZ2hsaWdodCA9IG9wdGlvbnMudG9kYXlIaWdobGlnaHQ7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy53ZWVrU3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLndlZWtTdGFydCA9IG9wdGlvbnMud2Vla1N0YXJ0O1xuICAgICAgICB0aGlzLndlZWtFbmQgPSBvcHRpb25zLndlZWtFbmQ7XG4gICAgICAgIHVwZGF0ZURPVyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5sb2NhbGUpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IHRoaXMubG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gICAgICAgIHRoaXMuZGF5TmFtZXMgPSBsb2NhbGUuZGF5c01pbjtcbiAgICAgICAgdGhpcy5zd2l0Y2hMYWJlbEZvcm1hdCA9IGxvY2FsZS50aXRsZUZvcm1hdDtcbiAgICAgICAgdXBkYXRlRE9XID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmJlZm9yZVNob3dEYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmJlZm9yZVNob3cgPSB0eXBlb2Ygb3B0aW9ucy5iZWZvcmVTaG93RGF5ID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5iZWZvcmVTaG93RGF5IDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuY2FsZW5kYXJXZWVrcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmNhbGVuZGFyV2Vla3MgJiYgIXRoaXMuY2FsZW5kYXJXZWVrcykge1xuICAgICAgICAgIHZhciB3ZWVrc0VsZW0gPSBwYXJzZUhUTUwoY2FsZW5kYXJXZWVrc1RlbXBsYXRlKS5maXJzdENoaWxkO1xuICAgICAgICAgIHRoaXMuY2FsZW5kYXJXZWVrcyA9IHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IHdlZWtzRWxlbSxcbiAgICAgICAgICAgIGRvdzogd2Vla3NFbGVtLmZpcnN0Q2hpbGQsXG4gICAgICAgICAgICB3ZWVrczogd2Vla3NFbGVtLmxhc3RDaGlsZFxuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy5lbGVtZW50Lmluc2VydEJlZm9yZSh3ZWVrc0VsZW0sIHRoaXMuZWxlbWVudC5maXJzdENoaWxkKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNhbGVuZGFyV2Vla3MgJiYgIW9wdGlvbnMuY2FsZW5kYXJXZWVrcykge1xuICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmNhbGVuZGFyV2Vla3MuZWxlbWVudCk7XG4gICAgICAgICAgdGhpcy5jYWxlbmRhcldlZWtzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuc2hvd0RheXNPZldlZWsgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAob3B0aW9ucy5zaG93RGF5c09mV2Vlaykge1xuICAgICAgICAgIHNob3dFbGVtZW50KHRoaXMuZG93KTtcbiAgICAgICAgICBpZiAodGhpcy5jYWxlbmRhcldlZWtzKSB7XG4gICAgICAgICAgICBzaG93RWxlbWVudCh0aGlzLmNhbGVuZGFyV2Vla3MuZG93KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlkZUVsZW1lbnQodGhpcy5kb3cpO1xuICAgICAgICAgIGlmICh0aGlzLmNhbGVuZGFyV2Vla3MpIHtcbiAgICAgICAgICAgIGhpZGVFbGVtZW50KHRoaXMuY2FsZW5kYXJXZWVrcy5kb3cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyB1cGRhdGUgZGF5cy1vZi13ZWVrIHdoZW4gbG9jYWxlLCBkYXlzT2Z3ZWVrRGlzYWJsZWQgb3Igd2Vla1N0YXJ0IGlzIGNoYW5nZWRcbiAgICAgIGlmICh1cGRhdGVET1cpIHtcbiAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmRvdy5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgICAgICAgdmFyIGRvdyA9IChfdGhpcy53ZWVrU3RhcnQgKyBpbmRleCkgJSA3O1xuICAgICAgICAgIGVsLnRleHRDb250ZW50ID0gX3RoaXMuZGF5TmFtZXNbZG93XTtcbiAgICAgICAgICBlbC5jbGFzc05hbWUgPSBfdGhpcy5kYXlzT2ZXZWVrRGlzYWJsZWQuaW5jbHVkZXMoZG93KSA/ICdkb3cgZGlzYWJsZWQgdGV4dC1jZW50ZXIgaC02IGxlYWRpbmctNiB0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtZ3JheS01MDAgZGFyazp0ZXh0LWdyYXktNDAwIGN1cnNvci1ub3QtYWxsb3dlZCcgOiAnZG93IHRleHQtY2VudGVyIGgtNiBsZWFkaW5nLTYgdGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LWdyYXktNTAwIGRhcms6dGV4dC1ncmF5LTQwMCc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFwcGx5IHVwZGF0ZSBvbiB0aGUgZm9jdXNlZCBkYXRlIHRvIHZpZXcncyBzZXR0aW5nc1xuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZUZvY3VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUZvY3VzKCkge1xuICAgICAgdmFyIHZpZXdEYXRlID0gbmV3IERhdGUodGhpcy5waWNrZXIudmlld0RhdGUpO1xuICAgICAgdmFyIHZpZXdZZWFyID0gdmlld0RhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgIHZhciB2aWV3TW9udGggPSB2aWV3RGF0ZS5nZXRNb250aCgpO1xuICAgICAgdmFyIGZpcnN0T2ZNb250aCA9IGRhdGVWYWx1ZSh2aWV3WWVhciwgdmlld01vbnRoLCAxKTtcbiAgICAgIHZhciBzdGFydCA9IGRheU9mVGhlV2Vla09mKGZpcnN0T2ZNb250aCwgdGhpcy53ZWVrU3RhcnQsIHRoaXMud2Vla1N0YXJ0KTtcbiAgICAgIHRoaXMuZmlyc3QgPSBmaXJzdE9mTW9udGg7XG4gICAgICB0aGlzLmxhc3QgPSBkYXRlVmFsdWUodmlld1llYXIsIHZpZXdNb250aCArIDEsIDApO1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5mb2N1c2VkID0gdGhpcy5waWNrZXIudmlld0RhdGU7XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgdXBkYXRlIG9uIHRoZSBzZWxlY3RlZCBkYXRlcyB0byB2aWV3J3Mgc2V0dGluZ3NcbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVTZWxlY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlU2VsZWN0aW9uKCkge1xuICAgICAgdmFyIF90aGlzJHBpY2tlciRkYXRlcGljayA9IHRoaXMucGlja2VyLmRhdGVwaWNrZXIsXG4gICAgICAgIGRhdGVzID0gX3RoaXMkcGlja2VyJGRhdGVwaWNrLmRhdGVzLFxuICAgICAgICByYW5nZXBpY2tlciA9IF90aGlzJHBpY2tlciRkYXRlcGljay5yYW5nZXBpY2tlcjtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBkYXRlcztcbiAgICAgIGlmIChyYW5nZXBpY2tlcikge1xuICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2VwaWNrZXIuZGF0ZXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHRoZSBlbnRpcmUgdmlldyBVSVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIC8vIHVwZGF0ZSB0b2RheSBtYXJrZXIgb24gZXZlciByZW5kZXJcbiAgICAgIHRoaXMudG9kYXkgPSB0aGlzLnRvZGF5SGlnaGxpZ2h0ID8gdG9kYXkoKSA6IHVuZGVmaW5lZDtcbiAgICAgIC8vIHJlZnJlc2ggZGlzYWJsZWQgZGF0ZXMgb24gZXZlcnkgcmVuZGVyIGluIG9yZGVyIHRvIGNsZWFyIHRoZSBvbmVzIGFkZGVkXG4gICAgICAvLyBieSBiZWZvcmVTaG93IGhvb2sgYXQgcHJldmlvdXMgcmVuZGVyXG4gICAgICB0aGlzLmRpc2FibGVkID0gX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuZGF0ZXNEaXNhYmxlZCk7XG4gICAgICB2YXIgc3dpdGNoTGFiZWwgPSBmb3JtYXREYXRlKHRoaXMuZm9jdXNlZCwgdGhpcy5zd2l0Y2hMYWJlbEZvcm1hdCwgdGhpcy5sb2NhbGUpO1xuICAgICAgdGhpcy5waWNrZXIuc2V0Vmlld1N3aXRjaExhYmVsKHN3aXRjaExhYmVsKTtcbiAgICAgIHRoaXMucGlja2VyLnNldFByZXZCdG5EaXNhYmxlZCh0aGlzLmZpcnN0IDw9IHRoaXMubWluRGF0ZSk7XG4gICAgICB0aGlzLnBpY2tlci5zZXROZXh0QnRuRGlzYWJsZWQodGhpcy5sYXN0ID49IHRoaXMubWF4RGF0ZSk7XG4gICAgICBpZiAodGhpcy5jYWxlbmRhcldlZWtzKSB7XG4gICAgICAgIC8vIHN0YXJ0IG9mIHRoZSBVVEMgd2VlayAoTW9uZGF5KSBvZiB0aGUgMXN0IG9mIHRoZSBtb250aFxuICAgICAgICB2YXIgc3RhcnRPZldlZWsgPSBkYXlPZlRoZVdlZWtPZih0aGlzLmZpcnN0LCAxLCAxKTtcbiAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmNhbGVuZGFyV2Vla3Mud2Vla3MuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpbmRleCkge1xuICAgICAgICAgIGVsLnRleHRDb250ZW50ID0gZ2V0V2VlayhhZGRXZWVrcyhzdGFydE9mV2VlaywgaW5kZXgpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBBcnJheS5mcm9tKHRoaXMuZ3JpZC5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgICAgIHZhciBjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3Q7XG4gICAgICAgIHZhciBjdXJyZW50ID0gYWRkRGF5cyhfdGhpczIuc3RhcnQsIGluZGV4KTtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShjdXJyZW50KTtcbiAgICAgICAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IFwiZGF0ZXBpY2tlci1jZWxsIGhvdmVyOmJnLWdyYXktMTAwIGRhcms6aG92ZXI6YmctZ3JheS02MDAgYmxvY2sgZmxleC0xIGxlYWRpbmctOSBib3JkZXItMCByb3VuZGVkLWxnIGN1cnNvci1wb2ludGVyIHRleHQtY2VudGVyIHRleHQtZ3JheS05MDAgZGFyazp0ZXh0LXdoaXRlIGZvbnQtc2VtaWJvbGQgdGV4dC1zbSBcIi5jb25jYXQoX3RoaXMyLmNlbGxDbGFzcyk7XG4gICAgICAgIGVsLmRhdGFzZXQuZGF0ZSA9IGN1cnJlbnQ7XG4gICAgICAgIGVsLnRleHRDb250ZW50ID0gZGF0ZS5nZXREYXRlKCk7XG4gICAgICAgIGlmIChjdXJyZW50IDwgX3RoaXMyLmZpcnN0KSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgncHJldicsICd0ZXh0LWdyYXktNTAwJywgJ2Rhcms6dGV4dC13aGl0ZScpO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnQgPiBfdGhpczIubGFzdCkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ25leHQnLCAndGV4dC1ncmF5LTUwMCcsICdkYXJrOnRleHQtd2hpdGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3RoaXMyLnRvZGF5ID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgndG9kYXknLCAnYmctZ3JheS0xMDAnLCAnZGFyazpiZy1ncmF5LTYwMCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50IDwgX3RoaXMyLm1pbkRhdGUgfHwgY3VycmVudCA+IF90aGlzMi5tYXhEYXRlIHx8IF90aGlzMi5kaXNhYmxlZC5pbmNsdWRlcyhjdXJyZW50KSkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJywgJ2N1cnNvci1ub3QtYWxsb3dlZCcsICd0ZXh0LWdyYXktNDAwJywgJ2Rhcms6dGV4dC1ncmF5LTUwMCcpO1xuICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2hvdmVyOmJnLWdyYXktMTAwJywgJ2Rhcms6aG92ZXI6YmctZ3JheS02MDAnLCAndGV4dC1ncmF5LTkwMCcsICdkYXJrOnRleHQtd2hpdGUnLCAnY3Vyc29yLXBvaW50ZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3RoaXMyLmRheXNPZldlZWtEaXNhYmxlZC5pbmNsdWRlcyhkYXkpKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnLCAnY3Vyc29yLW5vdC1hbGxvd2VkJywgJ3RleHQtZ3JheS00MDAnLCAnZGFyazp0ZXh0LWdyYXktNTAwJyk7XG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgnaG92ZXI6YmctZ3JheS0xMDAnLCAnZGFyazpob3ZlcjpiZy1ncmF5LTYwMCcsICd0ZXh0LWdyYXktOTAwJywgJ2Rhcms6dGV4dC13aGl0ZScsICdjdXJzb3ItcG9pbnRlcicpO1xuICAgICAgICAgIHB1c2hVbmlxdWUoX3RoaXMyLmRpc2FibGVkLCBjdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3RoaXMyLmRheXNPZldlZWtIaWdobGlnaHRlZC5pbmNsdWRlcyhkYXkpKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3RoaXMyLnJhbmdlKSB7XG4gICAgICAgICAgdmFyIF90aGlzMiRyYW5nZSA9IF9zbGljZWRUb0FycmF5KF90aGlzMi5yYW5nZSwgMiksXG4gICAgICAgICAgICByYW5nZVN0YXJ0ID0gX3RoaXMyJHJhbmdlWzBdLFxuICAgICAgICAgICAgcmFuZ2VFbmQgPSBfdGhpczIkcmFuZ2VbMV07XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPiByYW5nZVN0YXJ0ICYmIGN1cnJlbnQgPCByYW5nZUVuZCkge1xuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCgncmFuZ2UnLCAnYmctZ3JheS0yMDAnLCAnZGFyazpiZy1ncmF5LTYwMCcpO1xuICAgICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgncm91bmRlZC1sZycsICdyb3VuZGVkLWwtbGcnLCAncm91bmRlZC1yLWxnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyZW50ID09PSByYW5nZVN0YXJ0KSB7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZS1zdGFydCcsICdiZy1ncmF5LTEwMCcsICdkYXJrOmJnLWdyYXktNjAwJywgJ3JvdW5kZWQtbC1sZycpO1xuICAgICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgncm91bmRlZC1sZycsICdyb3VuZGVkLXItbGcnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPT09IHJhbmdlRW5kKSB7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZS1lbmQnLCAnYmctZ3JheS0xMDAnLCAnZGFyazpiZy1ncmF5LTYwMCcsICdyb3VuZGVkLXItbGcnKTtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ3JvdW5kZWQtbGcnLCAncm91bmRlZC1sLWxnJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpczIuc2VsZWN0ZWQuaW5jbHVkZXMoY3VycmVudCkpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcsICdiZy1ibHVlLTcwMCcsICchYmctcHJpbWFyeS03MDAnLCAndGV4dC13aGl0ZScsICdkYXJrOmJnLWJsdWUtNjAwJywgJ2Rhcms6IWJnLXByaW1hcnktNjAwJywgJ2Rhcms6dGV4dC13aGl0ZScpO1xuICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ3RleHQtZ3JheS05MDAnLCAndGV4dC1ncmF5LTUwMCcsICdob3ZlcjpiZy1ncmF5LTEwMCcsICdkYXJrOnRleHQtd2hpdGUnLCAnZGFyazpob3ZlcjpiZy1ncmF5LTYwMCcsICdkYXJrOmJnLWdyYXktNjAwJywgJ2JnLWdyYXktMTAwJywgJ2JnLWdyYXktMjAwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IF90aGlzMi5mb2N1c2VkKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnZm9jdXNlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpczIuYmVmb3JlU2hvdykge1xuICAgICAgICAgIF90aGlzMi5wZXJmb3JtQmVmb3JlSG9vayhlbCwgY3VycmVudCwgY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgdmlldyBVSSBieSBhcHBseWluZyB0aGUgY2hhbmdlcyBvZiBzZWxlY3RlZCBhbmQgZm9jdXNlZCBpdGVtc1xuICB9LCB7XG4gICAga2V5OiBcInJlZnJlc2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgdmFyIF9yZWYgPSB0aGlzLnJhbmdlIHx8IFtdLFxuICAgICAgICBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICByYW5nZVN0YXJ0ID0gX3JlZjJbMF0sXG4gICAgICAgIHJhbmdlRW5kID0gX3JlZjJbMV07XG4gICAgICB0aGlzLmdyaWQucXVlcnlTZWxlY3RvckFsbCgnLnJhbmdlLCAucmFuZ2Utc3RhcnQsIC5yYW5nZS1lbmQsIC5zZWxlY3RlZCwgLmZvY3VzZWQnKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdyYW5nZScsICdyYW5nZS1zdGFydCcsICdyYW5nZS1lbmQnLCAnc2VsZWN0ZWQnLCAnYmctYmx1ZS03MDAnLCAnIWJnLXByaW1hcnktNzAwJywgJ3RleHQtd2hpdGUnLCAnZGFyazpiZy1ibHVlLTYwMCcsICdkYXJrOiFiZy1wcmltYXJ5LTYwMCcsICdkYXJrOnRleHQtd2hpdGUnLCAnZm9jdXNlZCcpO1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCd0ZXh0LWdyYXktOTAwJywgJ3JvdW5kZWQtbGcnLCAnZGFyazp0ZXh0LXdoaXRlJyk7XG4gICAgICB9KTtcbiAgICAgIEFycmF5LmZyb20odGhpcy5ncmlkLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IE51bWJlcihlbC5kYXRhc2V0LmRhdGUpO1xuICAgICAgICB2YXIgY2xhc3NMaXN0ID0gZWwuY2xhc3NMaXN0O1xuICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdiZy1ncmF5LTIwMCcsICdkYXJrOmJnLWdyYXktNjAwJywgJ3JvdW5kZWQtbC1sZycsICdyb3VuZGVkLXItbGcnKTtcbiAgICAgICAgaWYgKGN1cnJlbnQgPiByYW5nZVN0YXJ0ICYmIGN1cnJlbnQgPCByYW5nZUVuZCkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3JhbmdlJywgJ2JnLWdyYXktMjAwJywgJ2Rhcms6YmctZ3JheS02MDAnKTtcbiAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdyb3VuZGVkLWxnJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IHJhbmdlU3RhcnQpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZS1zdGFydCcsICdiZy1ncmF5LTIwMCcsICdkYXJrOmJnLWdyYXktNjAwJywgJ3JvdW5kZWQtbC1sZycpO1xuICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ3JvdW5kZWQtbGcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudCA9PT0gcmFuZ2VFbmQpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZS1lbmQnLCAnYmctZ3JheS0yMDAnLCAnZGFyazpiZy1ncmF5LTYwMCcsICdyb3VuZGVkLXItbGcnKTtcbiAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdyb3VuZGVkLWxnJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90aGlzMy5zZWxlY3RlZC5pbmNsdWRlcyhjdXJyZW50KSkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJywgJ2JnLWJsdWUtNzAwJywgJyFiZy1wcmltYXJ5LTcwMCcsICd0ZXh0LXdoaXRlJywgJ2Rhcms6YmctYmx1ZS02MDAnLCAnZGFyazohYmctcHJpbWFyeS02MDAnLCAnZGFyazp0ZXh0LXdoaXRlJyk7XG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgndGV4dC1ncmF5LTkwMCcsICdob3ZlcjpiZy1ncmF5LTEwMCcsICdkYXJrOnRleHQtd2hpdGUnLCAnZGFyazpob3ZlcjpiZy1ncmF5LTYwMCcsICdiZy1ncmF5LTEwMCcsICdiZy1ncmF5LTIwMCcsICdkYXJrOmJnLWdyYXktNjAwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IF90aGlzMy5mb2N1c2VkKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnZm9jdXNlZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdGhlIHZpZXcgVUkgYnkgYXBwbHlpbmcgdGhlIGNoYW5nZSBvZiBmb2N1c2VkIGl0ZW1cbiAgfSwge1xuICAgIGtleTogXCJyZWZyZXNoRm9jdXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaEZvY3VzKCkge1xuICAgICAgdmFyIGluZGV4ID0gTWF0aC5yb3VuZCgodGhpcy5mb2N1c2VkIC0gdGhpcy5zdGFydCkgLyA4NjQwMDAwMCk7XG4gICAgICB0aGlzLmdyaWQucXVlcnlTZWxlY3RvckFsbCgnLmZvY3VzZWQnKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1c2VkJyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZ3JpZC5jaGlsZHJlbltpbmRleF0uY2xhc3NMaXN0LmFkZCgnZm9jdXNlZCcpO1xuICAgIH1cbiAgfV0pO1xufShWaWV3KTtcblxuZnVuY3Rpb24gY29tcHV0ZU1vbnRoUmFuZ2UocmFuZ2UsIHRoaXNZZWFyKSB7XG4gIGlmICghcmFuZ2UgfHwgIXJhbmdlWzBdIHx8ICFyYW5nZVsxXSkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgX3JhbmdlID0gX3NsaWNlZFRvQXJyYXkocmFuZ2UsIDIpLFxuICAgIF9yYW5nZSQgPSBfc2xpY2VkVG9BcnJheShfcmFuZ2VbMF0sIDIpLFxuICAgIHN0YXJ0WSA9IF9yYW5nZSRbMF0sXG4gICAgc3RhcnRNID0gX3JhbmdlJFsxXSxcbiAgICBfcmFuZ2UkMiA9IF9zbGljZWRUb0FycmF5KF9yYW5nZVsxXSwgMiksXG4gICAgZW5kWSA9IF9yYW5nZSQyWzBdLFxuICAgIGVuZE0gPSBfcmFuZ2UkMlsxXTtcbiAgaWYgKHN0YXJ0WSA+IHRoaXNZZWFyIHx8IGVuZFkgPCB0aGlzWWVhcikge1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4gW3N0YXJ0WSA9PT0gdGhpc1llYXIgPyBzdGFydE0gOiAtMSwgZW5kWSA9PT0gdGhpc1llYXIgPyBlbmRNIDogMTJdO1xufVxudmFyIE1vbnRoc1ZpZXcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9WaWV3KSB7XG4gIGZ1bmN0aW9uIE1vbnRoc1ZpZXcocGlja2VyKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vbnRoc1ZpZXcpO1xuICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIE1vbnRoc1ZpZXcsIFtwaWNrZXIsIHtcbiAgICAgIGlkOiAxLFxuICAgICAgbmFtZTogJ21vbnRocycsXG4gICAgICBjZWxsQ2xhc3M6ICdtb250aCdcbiAgICB9XSk7XG4gIH1cbiAgX2luaGVyaXRzKE1vbnRoc1ZpZXcsIF9WaWV3KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhNb250aHNWaWV3LCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQob3B0aW9ucykge1xuICAgICAgdmFyIG9uQ29uc3RydWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuICAgICAgaWYgKG9uQ29uc3RydWN0aW9uKSB7XG4gICAgICAgIHRoaXMuZ3JpZCA9IHRoaXMuZWxlbWVudDtcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ21vbnRocycsICdkYXRlcGlja2VyLWdyaWQnLCAndy02NCcsICdncmlkJywgJ2dyaWQtY29scy00Jyk7XG4gICAgICAgIHRoaXMuZ3JpZC5hcHBlbmRDaGlsZChwYXJzZUhUTUwoY3JlYXRlVGFnUmVwZWF0KCdzcGFuJywgMTIsIHtcbiAgICAgICAgICAnZGF0YS1tb250aCc6IGZ1bmN0aW9uIGRhdGFNb250aChpeCkge1xuICAgICAgICAgICAgcmV0dXJuIGl4O1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpKTtcbiAgICAgIH1cbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1vbnRoc1ZpZXcucHJvdG90eXBlKSwgXCJpbml0XCIsIHRoaXMpLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldE9wdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucy5sb2NhbGUpIHtcbiAgICAgICAgdGhpcy5tb250aE5hbWVzID0gb3B0aW9ucy5sb2NhbGUubW9udGhzU2hvcnQ7XG4gICAgICB9XG4gICAgICBpZiAoaGFzUHJvcGVydHkob3B0aW9ucywgJ21pbkRhdGUnKSkge1xuICAgICAgICBpZiAob3B0aW9ucy5taW5EYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLm1pblllYXIgPSB0aGlzLm1pbk1vbnRoID0gdGhpcy5taW5EYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtaW5EYXRlT2JqID0gbmV3IERhdGUob3B0aW9ucy5taW5EYXRlKTtcbiAgICAgICAgICB0aGlzLm1pblllYXIgPSBtaW5EYXRlT2JqLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgdGhpcy5taW5Nb250aCA9IG1pbkRhdGVPYmouZ2V0TW9udGgoKTtcbiAgICAgICAgICB0aGlzLm1pbkRhdGUgPSBtaW5EYXRlT2JqLnNldERhdGUoMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChoYXNQcm9wZXJ0eShvcHRpb25zLCAnbWF4RGF0ZScpKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm1heERhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMubWF4WWVhciA9IHRoaXMubWF4TW9udGggPSB0aGlzLm1heERhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG1heERhdGVPYmogPSBuZXcgRGF0ZShvcHRpb25zLm1heERhdGUpO1xuICAgICAgICAgIHRoaXMubWF4WWVhciA9IG1heERhdGVPYmouZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICB0aGlzLm1heE1vbnRoID0gbWF4RGF0ZU9iai5nZXRNb250aCgpO1xuICAgICAgICAgIHRoaXMubWF4RGF0ZSA9IGRhdGVWYWx1ZSh0aGlzLm1heFllYXIsIHRoaXMubWF4TW9udGggKyAxLCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuYmVmb3JlU2hvd01vbnRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5iZWZvcmVTaG93ID0gdHlwZW9mIG9wdGlvbnMuYmVmb3JlU2hvd01vbnRoID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5iZWZvcmVTaG93TW9udGggOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHZpZXcncyBzZXR0aW5ncyB0byByZWZsZWN0IHRoZSB2aWV3RGF0ZSBzZXQgb24gdGhlIHBpY2tlclxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZUZvY3VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUZvY3VzKCkge1xuICAgICAgdmFyIHZpZXdEYXRlID0gbmV3IERhdGUodGhpcy5waWNrZXIudmlld0RhdGUpO1xuICAgICAgdGhpcy55ZWFyID0gdmlld0RhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgIHRoaXMuZm9jdXNlZCA9IHZpZXdEYXRlLmdldE1vbnRoKCk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHZpZXcncyBzZXR0aW5ncyB0byByZWZsZWN0IHRoZSBzZWxlY3RlZCBkYXRlc1xuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVNlbGVjdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTZWxlY3Rpb24oKSB7XG4gICAgICB2YXIgX3RoaXMkcGlja2VyJGRhdGVwaWNrID0gdGhpcy5waWNrZXIuZGF0ZXBpY2tlcixcbiAgICAgICAgZGF0ZXMgPSBfdGhpcyRwaWNrZXIkZGF0ZXBpY2suZGF0ZXMsXG4gICAgICAgIHJhbmdlcGlja2VyID0gX3RoaXMkcGlja2VyJGRhdGVwaWNrLnJhbmdlcGlja2VyO1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IGRhdGVzLnJlZHVjZShmdW5jdGlvbiAoc2VsZWN0ZWQsIHRpbWVWYWx1ZSkge1xuICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRpbWVWYWx1ZSk7XG4gICAgICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICB2YXIgbW9udGggPSBkYXRlLmdldE1vbnRoKCk7XG4gICAgICAgIGlmIChzZWxlY3RlZFt5ZWFyXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2VsZWN0ZWRbeWVhcl0gPSBbbW9udGhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHB1c2hVbmlxdWUoc2VsZWN0ZWRbeWVhcl0sIG1vbnRoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICB9LCB7fSk7XG4gICAgICBpZiAocmFuZ2VwaWNrZXIgJiYgcmFuZ2VwaWNrZXIuZGF0ZXMpIHtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlcGlja2VyLmRhdGVzLm1hcChmdW5jdGlvbiAodGltZVZhbHVlKSB7XG4gICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0aW1lVmFsdWUpO1xuICAgICAgICAgIHJldHVybiBpc05hTihkYXRlKSA/IHVuZGVmaW5lZCA6IFtkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKV07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgZW50aXJlIHZpZXcgVUlcbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIC8vIHJlZnJlc2ggZGlzYWJsZWQgbW9udGhzIG9uIGV2ZXJ5IHJlbmRlciBpbiBvcmRlciB0byBjbGVhciB0aGUgb25lcyBhZGRlZFxuICAgICAgLy8gYnkgYmVmb3JlU2hvdyBob29rIGF0IHByZXZpb3VzIHJlbmRlclxuICAgICAgdGhpcy5kaXNhYmxlZCA9IFtdO1xuICAgICAgdGhpcy5waWNrZXIuc2V0Vmlld1N3aXRjaExhYmVsKHRoaXMueWVhcik7XG4gICAgICB0aGlzLnBpY2tlci5zZXRQcmV2QnRuRGlzYWJsZWQodGhpcy55ZWFyIDw9IHRoaXMubWluWWVhcik7XG4gICAgICB0aGlzLnBpY2tlci5zZXROZXh0QnRuRGlzYWJsZWQodGhpcy55ZWFyID49IHRoaXMubWF4WWVhcik7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkW3RoaXMueWVhcl0gfHwgW107XG4gICAgICB2YXIgeXJPdXRPZlJhbmdlID0gdGhpcy55ZWFyIDwgdGhpcy5taW5ZZWFyIHx8IHRoaXMueWVhciA+IHRoaXMubWF4WWVhcjtcbiAgICAgIHZhciBpc01pblllYXIgPSB0aGlzLnllYXIgPT09IHRoaXMubWluWWVhcjtcbiAgICAgIHZhciBpc01heFllYXIgPSB0aGlzLnllYXIgPT09IHRoaXMubWF4WWVhcjtcbiAgICAgIHZhciByYW5nZSA9IGNvbXB1dGVNb250aFJhbmdlKHRoaXMucmFuZ2UsIHRoaXMueWVhcik7XG4gICAgICBBcnJheS5mcm9tKHRoaXMuZ3JpZC5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgICAgIHZhciBjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3Q7XG4gICAgICAgIHZhciBkYXRlID0gZGF0ZVZhbHVlKF90aGlzLnllYXIsIGluZGV4LCAxKTtcbiAgICAgICAgZWwuY2xhc3NOYW1lID0gXCJkYXRlcGlja2VyLWNlbGwgaG92ZXI6YmctZ3JheS0xMDAgZGFyazpob3ZlcjpiZy1ncmF5LTYwMCBibG9jayBmbGV4LTEgbGVhZGluZy05IGJvcmRlci0wIHJvdW5kZWQtbGcgY3Vyc29yLXBvaW50ZXIgdGV4dC1jZW50ZXIgdGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtd2hpdGUgZm9udC1zZW1pYm9sZCB0ZXh0LXNtIFwiLmNvbmNhdChfdGhpcy5jZWxsQ2xhc3MpO1xuICAgICAgICBpZiAoX3RoaXMuaXNNaW5WaWV3KSB7XG4gICAgICAgICAgZWwuZGF0YXNldC5kYXRlID0gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZXNldCB0ZXh0IG9uIGV2ZXJ5IHJlbmRlciB0byBjbGVhciB0aGUgY3VzdG9tIGNvbnRlbnQgc2V0XG4gICAgICAgIC8vIGJ5IGJlZm9yZVNob3cgaG9vayBhdCBwcmV2aW91cyByZW5kZXJcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPSBfdGhpcy5tb250aE5hbWVzW2luZGV4XTtcbiAgICAgICAgaWYgKHlyT3V0T2ZSYW5nZSB8fCBpc01pblllYXIgJiYgaW5kZXggPCBfdGhpcy5taW5Nb250aCB8fCBpc01heFllYXIgJiYgaW5kZXggPiBfdGhpcy5tYXhNb250aCkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgdmFyIF9yYW5nZTIgPSBfc2xpY2VkVG9BcnJheShyYW5nZSwgMiksXG4gICAgICAgICAgICByYW5nZVN0YXJ0ID0gX3JhbmdlMlswXSxcbiAgICAgICAgICAgIHJhbmdlRW5kID0gX3JhbmdlMlsxXTtcbiAgICAgICAgICBpZiAoaW5kZXggPiByYW5nZVN0YXJ0ICYmIGluZGV4IDwgcmFuZ2VFbmQpIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3JhbmdlJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpbmRleCA9PT0gcmFuZ2VTdGFydCkge1xuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCgncmFuZ2Utc3RhcnQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGV4ID09PSByYW5nZUVuZCkge1xuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCgncmFuZ2UtZW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3RlZC5pbmNsdWRlcyhpbmRleCkpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcsICdiZy1ibHVlLTcwMCcsICchYmctcHJpbWFyeS03MDAnLCAndGV4dC13aGl0ZScsICdkYXJrOmJnLWJsdWUtNjAwJywgJ2Rhcms6IWJnLXByaW1hcnktNjAwJywgJ2Rhcms6dGV4dC13aGl0ZScpO1xuICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ3RleHQtZ3JheS05MDAnLCAnaG92ZXI6YmctZ3JheS0xMDAnLCAnZGFyazp0ZXh0LXdoaXRlJywgJ2Rhcms6aG92ZXI6YmctZ3JheS02MDAnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggPT09IF90aGlzLmZvY3VzZWQpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdmb2N1c2VkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90aGlzLmJlZm9yZVNob3cpIHtcbiAgICAgICAgICBfdGhpcy5wZXJmb3JtQmVmb3JlSG9vayhlbCwgaW5kZXgsIGRhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdGhlIHZpZXcgVUkgYnkgYXBwbHlpbmcgdGhlIGNoYW5nZXMgb2Ygc2VsZWN0ZWQgYW5kIGZvY3VzZWQgaXRlbXNcbiAgfSwge1xuICAgIGtleTogXCJyZWZyZXNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIHZhciBzZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRbdGhpcy55ZWFyXSB8fCBbXTtcbiAgICAgIHZhciBfcmVmID0gY29tcHV0ZU1vbnRoUmFuZ2UodGhpcy5yYW5nZSwgdGhpcy55ZWFyKSB8fCBbXSxcbiAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgcmFuZ2VTdGFydCA9IF9yZWYyWzBdLFxuICAgICAgICByYW5nZUVuZCA9IF9yZWYyWzFdO1xuICAgICAgdGhpcy5ncmlkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5yYW5nZSwgLnJhbmdlLXN0YXJ0LCAucmFuZ2UtZW5kLCAuc2VsZWN0ZWQsIC5mb2N1c2VkJykuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgncmFuZ2UnLCAncmFuZ2Utc3RhcnQnLCAncmFuZ2UtZW5kJywgJ3NlbGVjdGVkJywgJ2JnLWJsdWUtNzAwJywgJyFiZy1wcmltYXJ5LTcwMCcsICdkYXJrOmJnLWJsdWUtNjAwJywgJ2Rhcms6IWJnLXByaW1hcnktNzAwJywgJ2Rhcms6dGV4dC13aGl0ZScsICd0ZXh0LXdoaXRlJywgJ2ZvY3VzZWQnKTtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgndGV4dC1ncmF5LTkwMCcsICdob3ZlcjpiZy1ncmF5LTEwMCcsICdkYXJrOnRleHQtd2hpdGUnLCAnZGFyazpob3ZlcjpiZy1ncmF5LTYwMCcpO1xuICAgICAgfSk7XG4gICAgICBBcnJheS5mcm9tKHRoaXMuZ3JpZC5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgICAgIHZhciBjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3Q7XG4gICAgICAgIGlmIChpbmRleCA+IHJhbmdlU3RhcnQgJiYgaW5kZXggPCByYW5nZUVuZCkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3JhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ID09PSByYW5nZVN0YXJ0KSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgncmFuZ2Utc3RhcnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggPT09IHJhbmdlRW5kKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgncmFuZ2UtZW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGVjdGVkLmluY2x1ZGVzKGluZGV4KSkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJywgJ2JnLWJsdWUtNzAwJywgJyFiZy1wcmltYXJ5LTcwMCcsICd0ZXh0LXdoaXRlJywgJ2Rhcms6YmctYmx1ZS02MDAnLCAnZGFyazohYmctcHJpbWFyeS02MDAnLCAnZGFyazp0ZXh0LXdoaXRlJyk7XG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgndGV4dC1ncmF5LTkwMCcsICdob3ZlcjpiZy1ncmF5LTEwMCcsICdkYXJrOnRleHQtd2hpdGUnLCAnZGFyazpob3ZlcjpiZy1ncmF5LTYwMCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCA9PT0gX3RoaXMyLmZvY3VzZWQpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdmb2N1c2VkJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgdmlldyBVSSBieSBhcHBseWluZyB0aGUgY2hhbmdlIG9mIGZvY3VzZWQgaXRlbVxuICB9LCB7XG4gICAga2V5OiBcInJlZnJlc2hGb2N1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWZyZXNoRm9jdXMoKSB7XG4gICAgICB0aGlzLmdyaWQucXVlcnlTZWxlY3RvckFsbCgnLmZvY3VzZWQnKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1c2VkJyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZ3JpZC5jaGlsZHJlblt0aGlzLmZvY3VzZWRdLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzZWQnKTtcbiAgICB9XG4gIH1dKTtcbn0oVmlldyk7XG5cbmZ1bmN0aW9uIHRvVGl0bGVDYXNlKHdvcmQpIHtcbiAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheSh3b3JkKS5yZWR1Y2UoZnVuY3Rpb24gKHN0ciwgY2gsIGl4KSB7XG4gICAgcmV0dXJuIHN0ciArPSBpeCA/IGNoIDogY2gudG9VcHBlckNhc2UoKTtcbiAgfSwgJycpO1xufVxuXG4vLyBDbGFzcyByZXByZXNlbnRpbmcgdGhlIHllYXJzIGFuZCBkZWNhZGVzIHZpZXcgZWxlbWVudHNcbnZhciBZZWFyc1ZpZXcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9WaWV3KSB7XG4gIGZ1bmN0aW9uIFllYXJzVmlldyhwaWNrZXIsIGNvbmZpZykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBZZWFyc1ZpZXcpO1xuICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIFllYXJzVmlldywgW3BpY2tlciwgY29uZmlnXSk7XG4gIH1cbiAgX2luaGVyaXRzKFllYXJzVmlldywgX1ZpZXcpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFllYXJzVmlldywgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KG9wdGlvbnMpIHtcbiAgICAgIHZhciBvbkNvbnN0cnVjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcbiAgICAgIGlmIChvbkNvbnN0cnVjdGlvbikge1xuICAgICAgICB0aGlzLm5hdlN0ZXAgPSB0aGlzLnN0ZXAgKiAxMDtcbiAgICAgICAgdGhpcy5iZWZvcmVTaG93T3B0aW9uID0gXCJiZWZvcmVTaG93XCIuY29uY2F0KHRvVGl0bGVDYXNlKHRoaXMuY2VsbENsYXNzKSk7XG4gICAgICAgIHRoaXMuZ3JpZCA9IHRoaXMuZWxlbWVudDtcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5uYW1lLCAnZGF0ZXBpY2tlci1ncmlkJywgJ3ctNjQnLCAnZ3JpZCcsICdncmlkLWNvbHMtNCcpO1xuICAgICAgICB0aGlzLmdyaWQuYXBwZW5kQ2hpbGQocGFyc2VIVE1MKGNyZWF0ZVRhZ1JlcGVhdCgnc3BhbicsIDEyKSkpO1xuICAgICAgfVxuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoWWVhcnNWaWV3LnByb3RvdHlwZSksIFwiaW5pdFwiLCB0aGlzKS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRPcHRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgaWYgKGhhc1Byb3BlcnR5KG9wdGlvbnMsICdtaW5EYXRlJykpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubWluRGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5taW5ZZWFyID0gdGhpcy5taW5EYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubWluWWVhciA9IHN0YXJ0T2ZZZWFyUGVyaW9kKG9wdGlvbnMubWluRGF0ZSwgdGhpcy5zdGVwKTtcbiAgICAgICAgICB0aGlzLm1pbkRhdGUgPSBkYXRlVmFsdWUodGhpcy5taW5ZZWFyLCAwLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGhhc1Byb3BlcnR5KG9wdGlvbnMsICdtYXhEYXRlJykpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubWF4RGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5tYXhZZWFyID0gdGhpcy5tYXhEYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubWF4WWVhciA9IHN0YXJ0T2ZZZWFyUGVyaW9kKG9wdGlvbnMubWF4RGF0ZSwgdGhpcy5zdGVwKTtcbiAgICAgICAgICB0aGlzLm1heERhdGUgPSBkYXRlVmFsdWUodGhpcy5tYXhZZWFyLCAxMSwgMzEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9uc1t0aGlzLmJlZm9yZVNob3dPcHRpb25dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIGJlZm9yZVNob3cgPSBvcHRpb25zW3RoaXMuYmVmb3JlU2hvd09wdGlvbl07XG4gICAgICAgIHRoaXMuYmVmb3JlU2hvdyA9IHR5cGVvZiBiZWZvcmVTaG93ID09PSAnZnVuY3Rpb24nID8gYmVmb3JlU2hvdyA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdmlldydzIHNldHRpbmdzIHRvIHJlZmxlY3QgdGhlIHZpZXdEYXRlIHNldCBvbiB0aGUgcGlja2VyXG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlRm9jdXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlRm9jdXMoKSB7XG4gICAgICB2YXIgdmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLnBpY2tlci52aWV3RGF0ZSk7XG4gICAgICB2YXIgZmlyc3QgPSBzdGFydE9mWWVhclBlcmlvZCh2aWV3RGF0ZSwgdGhpcy5uYXZTdGVwKTtcbiAgICAgIHZhciBsYXN0ID0gZmlyc3QgKyA5ICogdGhpcy5zdGVwO1xuICAgICAgdGhpcy5maXJzdCA9IGZpcnN0O1xuICAgICAgdGhpcy5sYXN0ID0gbGFzdDtcbiAgICAgIHRoaXMuc3RhcnQgPSBmaXJzdCAtIHRoaXMuc3RlcDtcbiAgICAgIHRoaXMuZm9jdXNlZCA9IHN0YXJ0T2ZZZWFyUGVyaW9kKHZpZXdEYXRlLCB0aGlzLnN0ZXApO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB2aWV3J3Mgc2V0dGluZ3MgdG8gcmVmbGVjdCB0aGUgc2VsZWN0ZWQgZGF0ZXNcbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVTZWxlY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlU2VsZWN0aW9uKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBfdGhpcyRwaWNrZXIkZGF0ZXBpY2sgPSB0aGlzLnBpY2tlci5kYXRlcGlja2VyLFxuICAgICAgICBkYXRlcyA9IF90aGlzJHBpY2tlciRkYXRlcGljay5kYXRlcyxcbiAgICAgICAgcmFuZ2VwaWNrZXIgPSBfdGhpcyRwaWNrZXIkZGF0ZXBpY2sucmFuZ2VwaWNrZXI7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gZGF0ZXMucmVkdWNlKGZ1bmN0aW9uICh5ZWFycywgdGltZVZhbHVlKSB7XG4gICAgICAgIHJldHVybiBwdXNoVW5pcXVlKHllYXJzLCBzdGFydE9mWWVhclBlcmlvZCh0aW1lVmFsdWUsIF90aGlzLnN0ZXApKTtcbiAgICAgIH0sIFtdKTtcbiAgICAgIGlmIChyYW5nZXBpY2tlciAmJiByYW5nZXBpY2tlci5kYXRlcykge1xuICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2VwaWNrZXIuZGF0ZXMubWFwKGZ1bmN0aW9uICh0aW1lVmFsdWUpIHtcbiAgICAgICAgICBpZiAodGltZVZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFydE9mWWVhclBlcmlvZCh0aW1lVmFsdWUsIF90aGlzLnN0ZXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHRoZSBlbnRpcmUgdmlldyBVSVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIC8vIHJlZnJlc2ggZGlzYWJsZWQgeWVhcnMgb24gZXZlcnkgcmVuZGVyIGluIG9yZGVyIHRvIGNsZWFyIHRoZSBvbmVzIGFkZGVkXG4gICAgICAvLyBieSBiZWZvcmVTaG93IGhvb2sgYXQgcHJldmlvdXMgcmVuZGVyXG4gICAgICB0aGlzLmRpc2FibGVkID0gW107XG4gICAgICB0aGlzLnBpY2tlci5zZXRWaWV3U3dpdGNoTGFiZWwoXCJcIi5jb25jYXQodGhpcy5maXJzdCwgXCItXCIpLmNvbmNhdCh0aGlzLmxhc3QpKTtcbiAgICAgIHRoaXMucGlja2VyLnNldFByZXZCdG5EaXNhYmxlZCh0aGlzLmZpcnN0IDw9IHRoaXMubWluWWVhcik7XG4gICAgICB0aGlzLnBpY2tlci5zZXROZXh0QnRuRGlzYWJsZWQodGhpcy5sYXN0ID49IHRoaXMubWF4WWVhcik7XG4gICAgICBBcnJheS5mcm9tKHRoaXMuZ3JpZC5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgICAgIHZhciBjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3Q7XG4gICAgICAgIHZhciBjdXJyZW50ID0gX3RoaXMyLnN0YXJ0ICsgaW5kZXggKiBfdGhpczIuc3RlcDtcbiAgICAgICAgdmFyIGRhdGUgPSBkYXRlVmFsdWUoY3VycmVudCwgMCwgMSk7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IFwiZGF0ZXBpY2tlci1jZWxsIGhvdmVyOmJnLWdyYXktMTAwIGRhcms6aG92ZXI6YmctZ3JheS02MDAgYmxvY2sgZmxleC0xIGxlYWRpbmctOSBib3JkZXItMCByb3VuZGVkLWxnIGN1cnNvci1wb2ludGVyIHRleHQtY2VudGVyIHRleHQtZ3JheS05MDAgZGFyazp0ZXh0LXdoaXRlIGZvbnQtc2VtaWJvbGQgdGV4dC1zbSBcIi5jb25jYXQoX3RoaXMyLmNlbGxDbGFzcyk7XG4gICAgICAgIGlmIChfdGhpczIuaXNNaW5WaWV3KSB7XG4gICAgICAgICAgZWwuZGF0YXNldC5kYXRlID0gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBlbC50ZXh0Q29udGVudCA9IGVsLmRhdGFzZXQueWVhciA9IGN1cnJlbnQ7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3ByZXYnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gMTEpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCduZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPCBfdGhpczIubWluWWVhciB8fCBjdXJyZW50ID4gX3RoaXMyLm1heFllYXIpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpczIucmFuZ2UpIHtcbiAgICAgICAgICB2YXIgX3RoaXMyJHJhbmdlID0gX3NsaWNlZFRvQXJyYXkoX3RoaXMyLnJhbmdlLCAyKSxcbiAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfdGhpczIkcmFuZ2VbMF0sXG4gICAgICAgICAgICByYW5nZUVuZCA9IF90aGlzMiRyYW5nZVsxXTtcbiAgICAgICAgICBpZiAoY3VycmVudCA+IHJhbmdlU3RhcnQgJiYgY3VycmVudCA8IHJhbmdlRW5kKSB7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3VycmVudCA9PT0gcmFuZ2VTdGFydCkge1xuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCgncmFuZ2Utc3RhcnQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPT09IHJhbmdlRW5kKSB7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZS1lbmQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90aGlzMi5zZWxlY3RlZC5pbmNsdWRlcyhjdXJyZW50KSkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJywgJ2JnLWJsdWUtNzAwJywgJyFiZy1wcmltYXJ5LTcwMCcsICd0ZXh0LXdoaXRlJywgJ2Rhcms6YmctYmx1ZS02MDAnLCAnZGFyazohYmctcHJpbWFyeS02MDAnLCAnZGFyazp0ZXh0LXdoaXRlJyk7XG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgndGV4dC1ncmF5LTkwMCcsICdob3ZlcjpiZy1ncmF5LTEwMCcsICdkYXJrOnRleHQtd2hpdGUnLCAnZGFyazpob3ZlcjpiZy1ncmF5LTYwMCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID09PSBfdGhpczIuZm9jdXNlZCkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ2ZvY3VzZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3RoaXMyLmJlZm9yZVNob3cpIHtcbiAgICAgICAgICBfdGhpczIucGVyZm9ybUJlZm9yZUhvb2soZWwsIGN1cnJlbnQsIGRhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdGhlIHZpZXcgVUkgYnkgYXBwbHlpbmcgdGhlIGNoYW5nZXMgb2Ygc2VsZWN0ZWQgYW5kIGZvY3VzZWQgaXRlbXNcbiAgfSwge1xuICAgIGtleTogXCJyZWZyZXNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIHZhciBfcmVmID0gdGhpcy5yYW5nZSB8fCBbXSxcbiAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgcmFuZ2VTdGFydCA9IF9yZWYyWzBdLFxuICAgICAgICByYW5nZUVuZCA9IF9yZWYyWzFdO1xuICAgICAgdGhpcy5ncmlkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5yYW5nZSwgLnJhbmdlLXN0YXJ0LCAucmFuZ2UtZW5kLCAuc2VsZWN0ZWQsIC5mb2N1c2VkJykuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgncmFuZ2UnLCAncmFuZ2Utc3RhcnQnLCAncmFuZ2UtZW5kJywgJ3NlbGVjdGVkJywgJ2JnLWJsdWUtNzAwJywgJyFiZy1wcmltYXJ5LTcwMCcsICd0ZXh0LXdoaXRlJywgJ2Rhcms6YmctYmx1ZS02MDAnLCAnZGFyayFiZy1wcmltYXJ5LTYwMCcsICdkYXJrOnRleHQtd2hpdGUnLCAnZm9jdXNlZCcpO1xuICAgICAgfSk7XG4gICAgICBBcnJheS5mcm9tKHRoaXMuZ3JpZC5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBOdW1iZXIoZWwudGV4dENvbnRlbnQpO1xuICAgICAgICB2YXIgY2xhc3NMaXN0ID0gZWwuY2xhc3NMaXN0O1xuICAgICAgICBpZiAoY3VycmVudCA+IHJhbmdlU3RhcnQgJiYgY3VycmVudCA8IHJhbmdlRW5kKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgncmFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudCA9PT0gcmFuZ2VTdGFydCkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3JhbmdlLXN0YXJ0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IHJhbmdlRW5kKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgncmFuZ2UtZW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90aGlzMy5zZWxlY3RlZC5pbmNsdWRlcyhjdXJyZW50KSkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJywgJ2JnLWJsdWUtNzAwJywgJyFiZy1wcmltYXJ5LTcwMCcsICd0ZXh0LXdoaXRlJywgJ2Rhcms6YmctYmx1ZS02MDAnLCAnZGFyazohYmctcHJpbWFyeS02MDAnLCAnZGFyazp0ZXh0LXdoaXRlJyk7XG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgndGV4dC1ncmF5LTkwMCcsICdob3ZlcjpiZy1ncmF5LTEwMCcsICdkYXJrOnRleHQtd2hpdGUnLCAnZGFyazpob3ZlcjpiZy1ncmF5LTYwMCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID09PSBfdGhpczMuZm9jdXNlZCkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ2ZvY3VzZWQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHRoZSB2aWV3IFVJIGJ5IGFwcGx5aW5nIHRoZSBjaGFuZ2Ugb2YgZm9jdXNlZCBpdGVtXG4gIH0sIHtcbiAgICBrZXk6IFwicmVmcmVzaEZvY3VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZnJlc2hGb2N1cygpIHtcbiAgICAgIHZhciBpbmRleCA9IE1hdGgucm91bmQoKHRoaXMuZm9jdXNlZCAtIHRoaXMuc3RhcnQpIC8gdGhpcy5zdGVwKTtcbiAgICAgIHRoaXMuZ3JpZC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9jdXNlZCcpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZvY3VzZWQnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5ncmlkLmNoaWxkcmVuW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdmb2N1c2VkJyk7XG4gICAgfVxuICB9XSk7XG59KFZpZXcpO1xuXG5mdW5jdGlvbiB0cmlnZ2VyRGF0ZXBpY2tlckV2ZW50KGRhdGVwaWNrZXIsIHR5cGUpIHtcbiAgdmFyIGRldGFpbCA9IHtcbiAgICBkYXRlOiBkYXRlcGlja2VyLmdldERhdGUoKSxcbiAgICB2aWV3RGF0ZTogbmV3IERhdGUoZGF0ZXBpY2tlci5waWNrZXIudmlld0RhdGUpLFxuICAgIHZpZXdJZDogZGF0ZXBpY2tlci5waWNrZXIuY3VycmVudFZpZXcuaWQsXG4gICAgZGF0ZXBpY2tlcjogZGF0ZXBpY2tlclxuICB9O1xuICBkYXRlcGlja2VyLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQodHlwZSwge1xuICAgIGRldGFpbDogZGV0YWlsXG4gIH0pKTtcbn1cblxuLy8gZGlyZWN0aW9uOiAtMSAodG8gcHJldmlvdXMpLCAxICh0byBuZXh0KVxuZnVuY3Rpb24gZ29Ub1ByZXZPck5leHQoZGF0ZXBpY2tlciwgZGlyZWN0aW9uKSB7XG4gIHZhciBfZGF0ZXBpY2tlciRjb25maWcgPSBkYXRlcGlja2VyLmNvbmZpZyxcbiAgICBtaW5EYXRlID0gX2RhdGVwaWNrZXIkY29uZmlnLm1pbkRhdGUsXG4gICAgbWF4RGF0ZSA9IF9kYXRlcGlja2VyJGNvbmZpZy5tYXhEYXRlO1xuICB2YXIgX2RhdGVwaWNrZXIkcGlja2VyID0gZGF0ZXBpY2tlci5waWNrZXIsXG4gICAgY3VycmVudFZpZXcgPSBfZGF0ZXBpY2tlciRwaWNrZXIuY3VycmVudFZpZXcsXG4gICAgdmlld0RhdGUgPSBfZGF0ZXBpY2tlciRwaWNrZXIudmlld0RhdGU7XG4gIHZhciBuZXdWaWV3RGF0ZTtcbiAgc3dpdGNoIChjdXJyZW50Vmlldy5pZCkge1xuICAgIGNhc2UgMDpcbiAgICAgIG5ld1ZpZXdEYXRlID0gYWRkTW9udGhzKHZpZXdEYXRlLCBkaXJlY3Rpb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgbmV3Vmlld0RhdGUgPSBhZGRZZWFycyh2aWV3RGF0ZSwgZGlyZWN0aW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBuZXdWaWV3RGF0ZSA9IGFkZFllYXJzKHZpZXdEYXRlLCBkaXJlY3Rpb24gKiBjdXJyZW50Vmlldy5uYXZTdGVwKTtcbiAgfVxuICBuZXdWaWV3RGF0ZSA9IGxpbWl0VG9SYW5nZShuZXdWaWV3RGF0ZSwgbWluRGF0ZSwgbWF4RGF0ZSk7XG4gIGRhdGVwaWNrZXIucGlja2VyLmNoYW5nZUZvY3VzKG5ld1ZpZXdEYXRlKS5yZW5kZXIoKTtcbn1cbmZ1bmN0aW9uIHN3aXRjaFZpZXcoZGF0ZXBpY2tlcikge1xuICB2YXIgdmlld0lkID0gZGF0ZXBpY2tlci5waWNrZXIuY3VycmVudFZpZXcuaWQ7XG4gIGlmICh2aWV3SWQgPT09IGRhdGVwaWNrZXIuY29uZmlnLm1heFZpZXcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZGF0ZXBpY2tlci5waWNrZXIuY2hhbmdlVmlldyh2aWV3SWQgKyAxKS5yZW5kZXIoKTtcbn1cbmZ1bmN0aW9uIHVuZm9jdXMoZGF0ZXBpY2tlcikge1xuICBpZiAoZGF0ZXBpY2tlci5jb25maWcudXBkYXRlT25CbHVyKSB7XG4gICAgZGF0ZXBpY2tlci51cGRhdGUoe1xuICAgICAgYXV0b2hpZGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkYXRlcGlja2VyLnJlZnJlc2goJ2lucHV0Jyk7XG4gICAgZGF0ZXBpY2tlci5oaWRlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ29Ub1NlbGVjdGVkTW9udGhPclllYXIoZGF0ZXBpY2tlciwgc2VsZWN0aW9uKSB7XG4gIHZhciBwaWNrZXIgPSBkYXRlcGlja2VyLnBpY2tlcjtcbiAgdmFyIHZpZXdEYXRlID0gbmV3IERhdGUocGlja2VyLnZpZXdEYXRlKTtcbiAgdmFyIHZpZXdJZCA9IHBpY2tlci5jdXJyZW50Vmlldy5pZDtcbiAgdmFyIG5ld0RhdGUgPSB2aWV3SWQgPT09IDEgPyBhZGRNb250aHModmlld0RhdGUsIHNlbGVjdGlvbiAtIHZpZXdEYXRlLmdldE1vbnRoKCkpIDogYWRkWWVhcnModmlld0RhdGUsIHNlbGVjdGlvbiAtIHZpZXdEYXRlLmdldEZ1bGxZZWFyKCkpO1xuICBwaWNrZXIuY2hhbmdlRm9jdXMobmV3RGF0ZSkuY2hhbmdlVmlldyh2aWV3SWQgLSAxKS5yZW5kZXIoKTtcbn1cbmZ1bmN0aW9uIG9uQ2xpY2tUb2RheUJ0bihkYXRlcGlja2VyKSB7XG4gIHZhciBwaWNrZXIgPSBkYXRlcGlja2VyLnBpY2tlcjtcbiAgdmFyIGN1cnJlbnREYXRlID0gdG9kYXkoKTtcbiAgaWYgKGRhdGVwaWNrZXIuY29uZmlnLnRvZGF5QnRuTW9kZSA9PT0gMSkge1xuICAgIGlmIChkYXRlcGlja2VyLmNvbmZpZy5hdXRvaGlkZSkge1xuICAgICAgZGF0ZXBpY2tlci5zZXREYXRlKGN1cnJlbnREYXRlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGF0ZXBpY2tlci5zZXREYXRlKGN1cnJlbnREYXRlLCB7XG4gICAgICByZW5kZXI6IGZhbHNlXG4gICAgfSk7XG4gICAgcGlja2VyLnVwZGF0ZSgpO1xuICB9XG4gIGlmIChwaWNrZXIudmlld0RhdGUgIT09IGN1cnJlbnREYXRlKSB7XG4gICAgcGlja2VyLmNoYW5nZUZvY3VzKGN1cnJlbnREYXRlKTtcbiAgfVxuICBwaWNrZXIuY2hhbmdlVmlldygwKS5yZW5kZXIoKTtcbn1cbmZ1bmN0aW9uIG9uQ2xpY2tDbGVhckJ0bihkYXRlcGlja2VyKSB7XG4gIGRhdGVwaWNrZXIuc2V0RGF0ZSh7XG4gICAgY2xlYXI6IHRydWVcbiAgfSk7XG59XG5mdW5jdGlvbiBvbkNsaWNrVmlld1N3aXRjaChkYXRlcGlja2VyKSB7XG4gIHN3aXRjaFZpZXcoZGF0ZXBpY2tlcik7XG59XG5mdW5jdGlvbiBvbkNsaWNrUHJldkJ0bihkYXRlcGlja2VyKSB7XG4gIGdvVG9QcmV2T3JOZXh0KGRhdGVwaWNrZXIsIC0xKTtcbn1cbmZ1bmN0aW9uIG9uQ2xpY2tOZXh0QnRuKGRhdGVwaWNrZXIpIHtcbiAgZ29Ub1ByZXZPck5leHQoZGF0ZXBpY2tlciwgMSk7XG59XG5cbi8vIEZvciB0aGUgcGlja2VyJ3MgbWFpbiBibG9jayB0byBkZWxlZ2V0ZSB0aGUgZXZlbnRzIGZyb20gYGRhdGVwaWNrZXItY2VsbGBzXG5mdW5jdGlvbiBvbkNsaWNrVmlldyhkYXRlcGlja2VyLCBldikge1xuICB2YXIgdGFyZ2V0ID0gZmluZEVsZW1lbnRJbkV2ZW50UGF0aChldiwgJy5kYXRlcGlja2VyLWNlbGwnKTtcbiAgaWYgKCF0YXJnZXQgfHwgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgX2RhdGVwaWNrZXIkcGlja2VyJGN1ID0gZGF0ZXBpY2tlci5waWNrZXIuY3VycmVudFZpZXcsXG4gICAgaWQgPSBfZGF0ZXBpY2tlciRwaWNrZXIkY3UuaWQsXG4gICAgaXNNaW5WaWV3ID0gX2RhdGVwaWNrZXIkcGlja2VyJGN1LmlzTWluVmlldztcbiAgaWYgKGlzTWluVmlldykge1xuICAgIGRhdGVwaWNrZXIuc2V0RGF0ZShOdW1iZXIodGFyZ2V0LmRhdGFzZXQuZGF0ZSkpO1xuICB9IGVsc2UgaWYgKGlkID09PSAxKSB7XG4gICAgZ29Ub1NlbGVjdGVkTW9udGhPclllYXIoZGF0ZXBpY2tlciwgTnVtYmVyKHRhcmdldC5kYXRhc2V0Lm1vbnRoKSk7XG4gIH0gZWxzZSB7XG4gICAgZ29Ub1NlbGVjdGVkTW9udGhPclllYXIoZGF0ZXBpY2tlciwgTnVtYmVyKHRhcmdldC5kYXRhc2V0LnllYXIpKTtcbiAgfVxufVxuZnVuY3Rpb24gb25DbGlja1BpY2tlcihkYXRlcGlja2VyKSB7XG4gIGlmICghZGF0ZXBpY2tlci5pbmxpbmUgJiYgIWRhdGVwaWNrZXIuY29uZmlnLmRpc2FibGVUb3VjaEtleWJvYXJkKSB7XG4gICAgZGF0ZXBpY2tlci5pbnB1dEZpZWxkLmZvY3VzKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1BpY2tlck9wdGlvbnMocGlja2VyLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnRpdGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAob3B0aW9ucy50aXRsZSkge1xuICAgICAgcGlja2VyLmNvbnRyb2xzLnRpdGxlLnRleHRDb250ZW50ID0gb3B0aW9ucy50aXRsZTtcbiAgICAgIHNob3dFbGVtZW50KHBpY2tlci5jb250cm9scy50aXRsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBpY2tlci5jb250cm9scy50aXRsZS50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgaGlkZUVsZW1lbnQocGlja2VyLmNvbnRyb2xzLnRpdGxlKTtcbiAgICB9XG4gIH1cbiAgaWYgKG9wdGlvbnMucHJldkFycm93KSB7XG4gICAgdmFyIHByZXZCdG4gPSBwaWNrZXIuY29udHJvbHMucHJldkJ0bjtcbiAgICBlbXB0eUNoaWxkTm9kZXMocHJldkJ0bik7XG4gICAgb3B0aW9ucy5wcmV2QXJyb3cuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgcHJldkJ0bi5hcHBlbmRDaGlsZChub2RlLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMubmV4dEFycm93KSB7XG4gICAgdmFyIG5leHRCdG4gPSBwaWNrZXIuY29udHJvbHMubmV4dEJ0bjtcbiAgICBlbXB0eUNoaWxkTm9kZXMobmV4dEJ0bik7XG4gICAgb3B0aW9ucy5uZXh0QXJyb3cuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgbmV4dEJ0bi5hcHBlbmRDaGlsZChub2RlLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMubG9jYWxlKSB7XG4gICAgcGlja2VyLmNvbnRyb2xzLnRvZGF5QnRuLnRleHRDb250ZW50ID0gb3B0aW9ucy5sb2NhbGUudG9kYXk7XG4gICAgcGlja2VyLmNvbnRyb2xzLmNsZWFyQnRuLnRleHRDb250ZW50ID0gb3B0aW9ucy5sb2NhbGUuY2xlYXI7XG4gIH1cbiAgaWYgKG9wdGlvbnMudG9kYXlCdG4gIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChvcHRpb25zLnRvZGF5QnRuKSB7XG4gICAgICBzaG93RWxlbWVudChwaWNrZXIuY29udHJvbHMudG9kYXlCdG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaWRlRWxlbWVudChwaWNrZXIuY29udHJvbHMudG9kYXlCdG4pO1xuICAgIH1cbiAgfVxuICBpZiAoaGFzUHJvcGVydHkob3B0aW9ucywgJ21pbkRhdGUnKSB8fCBoYXNQcm9wZXJ0eShvcHRpb25zLCAnbWF4RGF0ZScpKSB7XG4gICAgdmFyIF9waWNrZXIkZGF0ZXBpY2tlciRjbyA9IHBpY2tlci5kYXRlcGlja2VyLmNvbmZpZyxcbiAgICAgIG1pbkRhdGUgPSBfcGlja2VyJGRhdGVwaWNrZXIkY28ubWluRGF0ZSxcbiAgICAgIG1heERhdGUgPSBfcGlja2VyJGRhdGVwaWNrZXIkY28ubWF4RGF0ZTtcbiAgICBwaWNrZXIuY29udHJvbHMudG9kYXlCdG4uZGlzYWJsZWQgPSAhaXNJblJhbmdlKHRvZGF5KCksIG1pbkRhdGUsIG1heERhdGUpO1xuICB9XG4gIGlmIChvcHRpb25zLmNsZWFyQnRuICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAob3B0aW9ucy5jbGVhckJ0bikge1xuICAgICAgc2hvd0VsZW1lbnQocGlja2VyLmNvbnRyb2xzLmNsZWFyQnRuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlkZUVsZW1lbnQocGlja2VyLmNvbnRyb2xzLmNsZWFyQnRuKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gQ29tcHV0ZSB2aWV3IGRhdGUgdG8gcmVzZXQsIHdoaWNoIHdpbGwgYmUuLi5cbi8vIC0gdGhlIGxhc3QgaXRlbSBvZiB0aGUgc2VsZWN0ZWQgZGF0ZXMgb3IgZGVmYXVsdFZpZXdEYXRlIGlmIG5vIHNlbGVjdGlvblxuLy8gLSBsaW1pdHRlZCB0byBtaW5EYXRlIG9yIG1heERhdGUgaWYgaXQgZXhjZWVkcyB0aGUgcmFuZ2VcbmZ1bmN0aW9uIGNvbXB1dGVSZXNldFZpZXdEYXRlKGRhdGVwaWNrZXIpIHtcbiAgdmFyIGRhdGVzID0gZGF0ZXBpY2tlci5kYXRlcyxcbiAgICBjb25maWcgPSBkYXRlcGlja2VyLmNvbmZpZztcbiAgdmFyIHZpZXdEYXRlID0gZGF0ZXMubGVuZ3RoID4gMCA/IGxhc3RJdGVtT2YoZGF0ZXMpIDogY29uZmlnLmRlZmF1bHRWaWV3RGF0ZTtcbiAgcmV0dXJuIGxpbWl0VG9SYW5nZSh2aWV3RGF0ZSwgY29uZmlnLm1pbkRhdGUsIGNvbmZpZy5tYXhEYXRlKTtcbn1cblxuLy8gQ2hhbmdlIGN1cnJlbnQgdmlldydzIHZpZXcgZGF0ZVxuZnVuY3Rpb24gc2V0Vmlld0RhdGUocGlja2VyLCBuZXdEYXRlKSB7XG4gIHZhciBvbGRWaWV3RGF0ZSA9IG5ldyBEYXRlKHBpY2tlci52aWV3RGF0ZSk7XG4gIHZhciBuZXdWaWV3RGF0ZSA9IG5ldyBEYXRlKG5ld0RhdGUpO1xuICB2YXIgX3BpY2tlciRjdXJyZW50VmlldyA9IHBpY2tlci5jdXJyZW50VmlldyxcbiAgICBpZCA9IF9waWNrZXIkY3VycmVudFZpZXcuaWQsXG4gICAgeWVhciA9IF9waWNrZXIkY3VycmVudFZpZXcueWVhcixcbiAgICBmaXJzdCA9IF9waWNrZXIkY3VycmVudFZpZXcuZmlyc3QsXG4gICAgbGFzdCA9IF9waWNrZXIkY3VycmVudFZpZXcubGFzdDtcbiAgdmFyIHZpZXdZZWFyID0gbmV3Vmlld0RhdGUuZ2V0RnVsbFllYXIoKTtcbiAgcGlja2VyLnZpZXdEYXRlID0gbmV3RGF0ZTtcbiAgaWYgKHZpZXdZZWFyICE9PSBvbGRWaWV3RGF0ZS5nZXRGdWxsWWVhcigpKSB7XG4gICAgdHJpZ2dlckRhdGVwaWNrZXJFdmVudChwaWNrZXIuZGF0ZXBpY2tlciwgJ2NoYW5nZVllYXInKTtcbiAgfVxuICBpZiAobmV3Vmlld0RhdGUuZ2V0TW9udGgoKSAhPT0gb2xkVmlld0RhdGUuZ2V0TW9udGgoKSkge1xuICAgIHRyaWdnZXJEYXRlcGlja2VyRXZlbnQocGlja2VyLmRhdGVwaWNrZXIsICdjaGFuZ2VNb250aCcpO1xuICB9XG5cbiAgLy8gcmV0dXJuIHdoZXRoZXIgdGhlIG5ldyBkYXRlIGlzIGluIGRpZmZlcmVudCBwZXJpb2Qgb24gdGltZSBmcm9tIHRoZSBvbmVcbiAgLy8gZGlzcGxheWVkIGluIHRoZSBjdXJyZW50IHZpZXdcbiAgLy8gd2hlbiB0cnVlLCB0aGUgdmlldyBuZWVkcyB0byBiZSByZS1yZW5kZXJlZCBvbiB0aGUgbmV4dCBVSSByZWZyZXNoLlxuICBzd2l0Y2ggKGlkKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIG5ld0RhdGUgPCBmaXJzdCB8fCBuZXdEYXRlID4gbGFzdDtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gdmlld1llYXIgIT09IHllYXI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB2aWV3WWVhciA8IGZpcnN0IHx8IHZpZXdZZWFyID4gbGFzdDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0VGV4dERpcmVjdGlvbihlbCkge1xuICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLmRpcmVjdGlvbjtcbn1cblxuLy8gQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSBwaWNrZXIgVUlcbnZhciBQaWNrZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQaWNrZXIoZGF0ZXBpY2tlcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQaWNrZXIpO1xuICAgIHRoaXMuZGF0ZXBpY2tlciA9IGRhdGVwaWNrZXI7XG4gICAgdmFyIHRlbXBsYXRlID0gcGlja2VyVGVtcGxhdGUucmVwbGFjZSgvJWJ1dHRvbkNsYXNzJS9nLCBkYXRlcGlja2VyLmNvbmZpZy5idXR0b25DbGFzcyk7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQgPSBwYXJzZUhUTUwodGVtcGxhdGUpLmZpcnN0Q2hpbGQ7XG4gICAgdmFyIF9lbGVtZW50JGZpcnN0Q2hpbGQkYyA9IF9zbGljZWRUb0FycmF5KGVsZW1lbnQuZmlyc3RDaGlsZC5jaGlsZHJlbiwgMyksXG4gICAgICBoZWFkZXIgPSBfZWxlbWVudCRmaXJzdENoaWxkJGNbMF0sXG4gICAgICBtYWluID0gX2VsZW1lbnQkZmlyc3RDaGlsZCRjWzFdLFxuICAgICAgZm9vdGVyID0gX2VsZW1lbnQkZmlyc3RDaGlsZCRjWzJdO1xuICAgIHZhciB0aXRsZSA9IGhlYWRlci5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICB2YXIgX2hlYWRlciRsYXN0RWxlbWVudENoID0gX3NsaWNlZFRvQXJyYXkoaGVhZGVyLmxhc3RFbGVtZW50Q2hpbGQuY2hpbGRyZW4sIDMpLFxuICAgICAgcHJldkJ0biA9IF9oZWFkZXIkbGFzdEVsZW1lbnRDaFswXSxcbiAgICAgIHZpZXdTd2l0Y2ggPSBfaGVhZGVyJGxhc3RFbGVtZW50Q2hbMV0sXG4gICAgICBuZXh0QnRuID0gX2hlYWRlciRsYXN0RWxlbWVudENoWzJdO1xuICAgIHZhciBfZm9vdGVyJGZpcnN0Q2hpbGQkY2ggPSBfc2xpY2VkVG9BcnJheShmb290ZXIuZmlyc3RDaGlsZC5jaGlsZHJlbiwgMiksXG4gICAgICB0b2RheUJ0biA9IF9mb290ZXIkZmlyc3RDaGlsZCRjaFswXSxcbiAgICAgIGNsZWFyQnRuID0gX2Zvb3RlciRmaXJzdENoaWxkJGNoWzFdO1xuICAgIHZhciBjb250cm9scyA9IHtcbiAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgIHByZXZCdG46IHByZXZCdG4sXG4gICAgICB2aWV3U3dpdGNoOiB2aWV3U3dpdGNoLFxuICAgICAgbmV4dEJ0bjogbmV4dEJ0bixcbiAgICAgIHRvZGF5QnRuOiB0b2RheUJ0bixcbiAgICAgIGNsZWFyQnRuOiBjbGVhckJ0blxuICAgIH07XG4gICAgdGhpcy5tYWluID0gbWFpbjtcbiAgICB0aGlzLmNvbnRyb2xzID0gY29udHJvbHM7XG4gICAgdmFyIGVsZW1lbnRDbGFzcyA9IGRhdGVwaWNrZXIuaW5saW5lID8gJ2lubGluZScgOiAnZHJvcGRvd24nO1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRhdGVwaWNrZXItXCIuY29uY2F0KGVsZW1lbnRDbGFzcykpO1xuICAgIGVsZW1lbnRDbGFzcyA9PT0gJ2Ryb3Bkb3duJyA/IGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZHJvcGRvd24nLCAnYWJzb2x1dGUnLCAndG9wLTAnLCAnbGVmdC0wJywgJ3otNTAnLCAncHQtMicpIDogbnVsbDtcbiAgICBwcm9jZXNzUGlja2VyT3B0aW9ucyh0aGlzLCBkYXRlcGlja2VyLmNvbmZpZyk7XG4gICAgdGhpcy52aWV3RGF0ZSA9IGNvbXB1dGVSZXNldFZpZXdEYXRlKGRhdGVwaWNrZXIpO1xuXG4gICAgLy8gc2V0IHVwIGV2ZW50IGxpc3RlbmVyc1xuICAgIHJlZ2lzdGVyTGlzdGVuZXJzKGRhdGVwaWNrZXIsIFtbZWxlbWVudCwgJ2NsaWNrJywgb25DbGlja1BpY2tlci5iaW5kKG51bGwsIGRhdGVwaWNrZXIpLCB7XG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfV0sIFttYWluLCAnY2xpY2snLCBvbkNsaWNrVmlldy5iaW5kKG51bGwsIGRhdGVwaWNrZXIpXSwgW2NvbnRyb2xzLnZpZXdTd2l0Y2gsICdjbGljaycsIG9uQ2xpY2tWaWV3U3dpdGNoLmJpbmQobnVsbCwgZGF0ZXBpY2tlcildLCBbY29udHJvbHMucHJldkJ0biwgJ2NsaWNrJywgb25DbGlja1ByZXZCdG4uYmluZChudWxsLCBkYXRlcGlja2VyKV0sIFtjb250cm9scy5uZXh0QnRuLCAnY2xpY2snLCBvbkNsaWNrTmV4dEJ0bi5iaW5kKG51bGwsIGRhdGVwaWNrZXIpXSwgW2NvbnRyb2xzLnRvZGF5QnRuLCAnY2xpY2snLCBvbkNsaWNrVG9kYXlCdG4uYmluZChudWxsLCBkYXRlcGlja2VyKV0sIFtjb250cm9scy5jbGVhckJ0biwgJ2NsaWNrJywgb25DbGlja0NsZWFyQnRuLmJpbmQobnVsbCwgZGF0ZXBpY2tlcildXSk7XG5cbiAgICAvLyBzZXQgdXAgdmlld3NcbiAgICB0aGlzLnZpZXdzID0gW25ldyBEYXlzVmlldyh0aGlzKSwgbmV3IE1vbnRoc1ZpZXcodGhpcyksIG5ldyBZZWFyc1ZpZXcodGhpcywge1xuICAgICAgaWQ6IDIsXG4gICAgICBuYW1lOiAneWVhcnMnLFxuICAgICAgY2VsbENsYXNzOiAneWVhcicsXG4gICAgICBzdGVwOiAxXG4gICAgfSksIG5ldyBZZWFyc1ZpZXcodGhpcywge1xuICAgICAgaWQ6IDMsXG4gICAgICBuYW1lOiAnZGVjYWRlcycsXG4gICAgICBjZWxsQ2xhc3M6ICdkZWNhZGUnLFxuICAgICAgc3RlcDogMTBcbiAgICB9KV07XG4gICAgdGhpcy5jdXJyZW50VmlldyA9IHRoaXMudmlld3NbZGF0ZXBpY2tlci5jb25maWcuc3RhcnRWaWV3XTtcbiAgICB0aGlzLmN1cnJlbnRWaWV3LnJlbmRlcigpO1xuICAgIHRoaXMubWFpbi5hcHBlbmRDaGlsZCh0aGlzLmN1cnJlbnRWaWV3LmVsZW1lbnQpO1xuICAgIGRhdGVwaWNrZXIuY29uZmlnLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICB9XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoUGlja2VyLCBbe1xuICAgIGtleTogXCJzZXRPcHRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgcHJvY2Vzc1BpY2tlck9wdGlvbnModGhpcywgb3B0aW9ucyk7XG4gICAgICB0aGlzLnZpZXdzLmZvckVhY2goZnVuY3Rpb24gKHZpZXcpIHtcbiAgICAgICAgdmlldy5pbml0KG9wdGlvbnMsIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jdXJyZW50Vmlldy5yZW5kZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGV0YWNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICAgIHRoaXMuZGF0ZXBpY2tlci5jb25maWcuY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNob3dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJywgJ2Jsb2NrJyk7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICB2YXIgZGF0ZXBpY2tlciA9IHRoaXMuZGF0ZXBpY2tlcjtcbiAgICAgIGlmICghZGF0ZXBpY2tlci5pbmxpbmUpIHtcbiAgICAgICAgLy8gZW5zdXJlIHBpY2tlcidzIGRpcmVjdGlvbiBtYXRjaGVzIGlucHV0J3NcbiAgICAgICAgdmFyIGlucHV0RGlyZWN0aW9uID0gZ2V0VGV4dERpcmVjdGlvbihkYXRlcGlja2VyLmlucHV0RmllbGQpO1xuICAgICAgICBpZiAoaW5wdXREaXJlY3Rpb24gIT09IGdldFRleHREaXJlY3Rpb24oZGF0ZXBpY2tlci5jb25maWcuY29udGFpbmVyKSkge1xuICAgICAgICAgIHRoaXMuZWxlbWVudC5kaXIgPSBpbnB1dERpcmVjdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnQuZGlyKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGlyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wbGFjZSgpO1xuICAgICAgICBpZiAoZGF0ZXBpY2tlci5jb25maWcuZGlzYWJsZVRvdWNoS2V5Ym9hcmQpIHtcbiAgICAgICAgICBkYXRlcGlja2VyLmlucHV0RmllbGQuYmx1cigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0cmlnZ2VyRGF0ZXBpY2tlckV2ZW50KGRhdGVwaWNrZXIsICdzaG93Jyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhpZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgIGlmICghdGhpcy5hY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5kYXRlcGlja2VyLmV4aXRFZGl0TW9kZSgpO1xuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScsICdibG9jaycpO1xuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScsICdibG9jaycsICdoaWRkZW4nKTtcbiAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICB0cmlnZ2VyRGF0ZXBpY2tlckV2ZW50KHRoaXMuZGF0ZXBpY2tlciwgJ2hpZGUnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGxhY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxhY2UoKSB7XG4gICAgICB2YXIgX3RoaXMkZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgY2xhc3NMaXN0ID0gX3RoaXMkZWxlbWVudC5jbGFzc0xpc3QsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkZWxlbWVudC5zdHlsZTtcbiAgICAgIHZhciBfdGhpcyRkYXRlcGlja2VyID0gdGhpcy5kYXRlcGlja2VyLFxuICAgICAgICBjb25maWcgPSBfdGhpcyRkYXRlcGlja2VyLmNvbmZpZyxcbiAgICAgICAgaW5wdXRGaWVsZCA9IF90aGlzJGRhdGVwaWNrZXIuaW5wdXRGaWVsZDtcbiAgICAgIHZhciBjb250YWluZXIgPSBjb25maWcuY29udGFpbmVyO1xuICAgICAgdmFyIF90aGlzJGVsZW1lbnQkZ2V0Qm91biA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgY2FsZW5kYXJXaWR0aCA9IF90aGlzJGVsZW1lbnQkZ2V0Qm91bi53aWR0aCxcbiAgICAgICAgY2FsZW5kYXJIZWlnaHQgPSBfdGhpcyRlbGVtZW50JGdldEJvdW4uaGVpZ2h0O1xuICAgICAgdmFyIF9jb250YWluZXIkZ2V0Qm91bmRpbiA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgY29udGFpbmVyTGVmdCA9IF9jb250YWluZXIkZ2V0Qm91bmRpbi5sZWZ0LFxuICAgICAgICBjb250YWluZXJUb3AgPSBfY29udGFpbmVyJGdldEJvdW5kaW4udG9wLFxuICAgICAgICBjb250YWluZXJXaWR0aCA9IF9jb250YWluZXIkZ2V0Qm91bmRpbi53aWR0aDtcbiAgICAgIHZhciBfaW5wdXRGaWVsZCRnZXRCb3VuZGkgPSBpbnB1dEZpZWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICBpbnB1dExlZnQgPSBfaW5wdXRGaWVsZCRnZXRCb3VuZGkubGVmdCxcbiAgICAgICAgaW5wdXRUb3AgPSBfaW5wdXRGaWVsZCRnZXRCb3VuZGkudG9wLFxuICAgICAgICBpbnB1dFdpZHRoID0gX2lucHV0RmllbGQkZ2V0Qm91bmRpLndpZHRoLFxuICAgICAgICBpbnB1dEhlaWdodCA9IF9pbnB1dEZpZWxkJGdldEJvdW5kaS5oZWlnaHQ7XG4gICAgICB2YXIgX2NvbmZpZyRvcmllbnRhdGlvbiA9IGNvbmZpZy5vcmllbnRhdGlvbixcbiAgICAgICAgb3JpZW50WCA9IF9jb25maWckb3JpZW50YXRpb24ueCxcbiAgICAgICAgb3JpZW50WSA9IF9jb25maWckb3JpZW50YXRpb24ueTtcbiAgICAgIHZhciBzY3JvbGxUb3A7XG4gICAgICB2YXIgbGVmdDtcbiAgICAgIHZhciB0b3A7XG4gICAgICBpZiAoY29udGFpbmVyID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgIHNjcm9sbFRvcCA9IHdpbmRvdy5zY3JvbGxZO1xuICAgICAgICBsZWZ0ID0gaW5wdXRMZWZ0ICsgd2luZG93LnNjcm9sbFg7XG4gICAgICAgIHRvcCA9IGlucHV0VG9wICsgc2Nyb2xsVG9wO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Nyb2xsVG9wID0gY29udGFpbmVyLnNjcm9sbFRvcDtcbiAgICAgICAgbGVmdCA9IGlucHV0TGVmdCAtIGNvbnRhaW5lckxlZnQ7XG4gICAgICAgIHRvcCA9IGlucHV0VG9wIC0gY29udGFpbmVyVG9wICsgc2Nyb2xsVG9wO1xuICAgICAgfVxuICAgICAgaWYgKG9yaWVudFggPT09ICdhdXRvJykge1xuICAgICAgICBpZiAobGVmdCA8IDApIHtcbiAgICAgICAgICAvLyBhbGlnbiB0byB0aGUgbGVmdCBhbmQgbW92ZSBpbnRvIHZpc2libGUgYXJlYSBpZiBpbnB1dCdzIGxlZnQgZWRnZSA8IHdpbmRvdydzXG4gICAgICAgICAgb3JpZW50WCA9ICdsZWZ0JztcbiAgICAgICAgICBsZWZ0ID0gMTA7XG4gICAgICAgIH0gZWxzZSBpZiAobGVmdCArIGNhbGVuZGFyV2lkdGggPiBjb250YWluZXJXaWR0aCkge1xuICAgICAgICAgIC8vIGFsaWduIHRvIHRoZSByaWdodCBpZiBjYW5sZW5kYXIncyByaWdodCBlZGdlID4gY29udGFpbmVyJ3NcbiAgICAgICAgICBvcmllbnRYID0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcmllbnRYID0gZ2V0VGV4dERpcmVjdGlvbihpbnB1dEZpZWxkKSA9PT0gJ3J0bCcgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3JpZW50WCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICBsZWZ0IC09IGNhbGVuZGFyV2lkdGggLSBpbnB1dFdpZHRoO1xuICAgICAgfVxuICAgICAgaWYgKG9yaWVudFkgPT09ICdhdXRvJykge1xuICAgICAgICBvcmllbnRZID0gdG9wIC0gY2FsZW5kYXJIZWlnaHQgPCBzY3JvbGxUb3AgPyAnYm90dG9tJyA6ICd0b3AnO1xuICAgICAgfVxuICAgICAgaWYgKG9yaWVudFkgPT09ICd0b3AnKSB7XG4gICAgICAgIHRvcCAtPSBjYWxlbmRhckhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvcCArPSBpbnB1dEhlaWdodDtcbiAgICAgIH1cbiAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2RhdGVwaWNrZXItb3JpZW50LXRvcCcsICdkYXRlcGlja2VyLW9yaWVudC1ib3R0b20nLCAnZGF0ZXBpY2tlci1vcmllbnQtcmlnaHQnLCAnZGF0ZXBpY2tlci1vcmllbnQtbGVmdCcpO1xuICAgICAgY2xhc3NMaXN0LmFkZChcImRhdGVwaWNrZXItb3JpZW50LVwiLmNvbmNhdChvcmllbnRZKSwgXCJkYXRlcGlja2VyLW9yaWVudC1cIi5jb25jYXQob3JpZW50WCkpO1xuICAgICAgc3R5bGUudG9wID0gdG9wID8gXCJcIi5jb25jYXQodG9wLCBcInB4XCIpIDogdG9wO1xuICAgICAgc3R5bGUubGVmdCA9IGxlZnQgPyBcIlwiLmNvbmNhdChsZWZ0LCBcInB4XCIpIDogbGVmdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Vmlld1N3aXRjaExhYmVsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZpZXdTd2l0Y2hMYWJlbChsYWJlbFRleHQpIHtcbiAgICAgIHRoaXMuY29udHJvbHMudmlld1N3aXRjaC50ZXh0Q29udGVudCA9IGxhYmVsVGV4dDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0UHJldkJ0bkRpc2FibGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFByZXZCdG5EaXNhYmxlZChkaXNhYmxlZCkge1xuICAgICAgdGhpcy5jb250cm9scy5wcmV2QnRuLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldE5leHRCdG5EaXNhYmxlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXROZXh0QnRuRGlzYWJsZWQoZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuY29udHJvbHMubmV4dEJ0bi5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGFuZ2VWaWV3XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVZpZXcodmlld0lkKSB7XG4gICAgICB2YXIgb2xkVmlldyA9IHRoaXMuY3VycmVudFZpZXc7XG4gICAgICB2YXIgbmV3VmlldyA9IHRoaXMudmlld3Nbdmlld0lkXTtcbiAgICAgIGlmIChuZXdWaWV3LmlkICE9PSBvbGRWaWV3LmlkKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFZpZXcgPSBuZXdWaWV3O1xuICAgICAgICB0aGlzLl9yZW5kZXJNZXRob2QgPSAncmVuZGVyJztcbiAgICAgICAgdHJpZ2dlckRhdGVwaWNrZXJFdmVudCh0aGlzLmRhdGVwaWNrZXIsICdjaGFuZ2VWaWV3Jyk7XG4gICAgICAgIHRoaXMubWFpbi5yZXBsYWNlQ2hpbGQobmV3Vmlldy5lbGVtZW50LCBvbGRWaWV3LmVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQ2hhbmdlIHRoZSBmb2N1c2VkIGRhdGUgKHZpZXcgZGF0ZSlcbiAgfSwge1xuICAgIGtleTogXCJjaGFuZ2VGb2N1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VGb2N1cyhuZXdWaWV3RGF0ZSkge1xuICAgICAgdGhpcy5fcmVuZGVyTWV0aG9kID0gc2V0Vmlld0RhdGUodGhpcywgbmV3Vmlld0RhdGUpID8gJ3JlbmRlcicgOiAncmVmcmVzaEZvY3VzJztcbiAgICAgIHRoaXMudmlld3MuZm9yRWFjaChmdW5jdGlvbiAodmlldykge1xuICAgICAgICB2aWV3LnVwZGF0ZUZvY3VzKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFwcGx5IHRoZSBjaGFuZ2Ugb2YgdGhlIHNlbGVjdGVkIGRhdGVzXG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHZhciBuZXdWaWV3RGF0ZSA9IGNvbXB1dGVSZXNldFZpZXdEYXRlKHRoaXMuZGF0ZXBpY2tlcik7XG4gICAgICB0aGlzLl9yZW5kZXJNZXRob2QgPSBzZXRWaWV3RGF0ZSh0aGlzLCBuZXdWaWV3RGF0ZSkgPyAncmVuZGVyJyA6ICdyZWZyZXNoJztcbiAgICAgIHRoaXMudmlld3MuZm9yRWFjaChmdW5jdGlvbiAodmlldykge1xuICAgICAgICB2aWV3LnVwZGF0ZUZvY3VzKCk7XG4gICAgICAgIHZpZXcudXBkYXRlU2VsZWN0aW9uKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIFJlZnJlc2ggdGhlIHBpY2tlciBVSVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgcXVpY2tSZW5kZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG4gICAgICB2YXIgcmVuZGVyTWV0aG9kID0gcXVpY2tSZW5kZXIgJiYgdGhpcy5fcmVuZGVyTWV0aG9kIHx8ICdyZW5kZXInO1xuICAgICAgZGVsZXRlIHRoaXMuX3JlbmRlck1ldGhvZDtcbiAgICAgIHRoaXMuY3VycmVudFZpZXdbcmVuZGVyTWV0aG9kXSgpO1xuICAgIH1cbiAgfV0pO1xufSgpO1xuXG4vLyBGaW5kIHRoZSBjbG9zZXN0IGRhdGUgdGhhdCBkb2Vzbid0IG1lZXQgdGhlIGNvbmRpdGlvbiBmb3IgdW5hdmFpbGFibGUgZGF0ZVxuLy8gUmV0dXJucyB1bmRlZmluZWQgaWYgbm8gYXZhaWxhYmxlIGRhdGUgaXMgZm91bmRcbi8vIGFkZEZuOiBmdW5jdGlvbiB0byBjYWxjdWxhdGUgdGhlIG5leHQgZGF0ZVxuLy8gICAtIGFyZ3M6IHRpbWUgdmFsdWUsIGFtb3VudFxuLy8gaW5jcmVhc2U6IGFtb3VudCB0byBwYXNzIHRvIGFkZEZuXG4vLyB0ZXN0Rm46IGZ1bmN0aW9uIHRvIHRlc3QgdGhlIHVuYXZhaWxhYmxpdHkgb2YgdGhlIGRhdGVcbi8vICAgLSBhcmdzOiB0aW1lIHZhbHVlOyByZXR1bjogdHJ1ZSBpZiB1bmF2YWlsYWJsZVxuZnVuY3Rpb24gZmluZE5leHRBdmFpbGFibGVPbmUoZGF0ZSwgYWRkRm4sIGluY3JlYXNlLCB0ZXN0Rm4sIG1pbiwgbWF4KSB7XG4gIGlmICghaXNJblJhbmdlKGRhdGUsIG1pbiwgbWF4KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodGVzdEZuKGRhdGUpKSB7XG4gICAgdmFyIG5ld0RhdGUgPSBhZGRGbihkYXRlLCBpbmNyZWFzZSk7XG4gICAgcmV0dXJuIGZpbmROZXh0QXZhaWxhYmxlT25lKG5ld0RhdGUsIGFkZEZuLCBpbmNyZWFzZSwgdGVzdEZuLCBtaW4sIG1heCk7XG4gIH1cbiAgcmV0dXJuIGRhdGU7XG59XG5cbi8vIGRpcmVjdGlvbjogLTEgKGxlZnQvdXApLCAxIChyaWdodC9kb3duKVxuLy8gdmVydGljYWw6IHRydWUgZm9yIHVwL2Rvd24sIGZhbHNlIGZvciBsZWZ0L3JpZ2h0XG5mdW5jdGlvbiBtb3ZlQnlBcnJvd0tleShkYXRlcGlja2VyLCBldiwgZGlyZWN0aW9uLCB2ZXJ0aWNhbCkge1xuICB2YXIgcGlja2VyID0gZGF0ZXBpY2tlci5waWNrZXI7XG4gIHZhciBjdXJyZW50VmlldyA9IHBpY2tlci5jdXJyZW50VmlldztcbiAgdmFyIHN0ZXAgPSBjdXJyZW50Vmlldy5zdGVwIHx8IDE7XG4gIHZhciB2aWV3RGF0ZSA9IHBpY2tlci52aWV3RGF0ZTtcbiAgdmFyIGFkZEZuO1xuICB2YXIgdGVzdEZuO1xuICBzd2l0Y2ggKGN1cnJlbnRWaWV3LmlkKSB7XG4gICAgY2FzZSAwOlxuICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgIHZpZXdEYXRlID0gYWRkRGF5cyh2aWV3RGF0ZSwgZGlyZWN0aW9uICogNyk7XG4gICAgICB9IGVsc2UgaWYgKGV2LmN0cmxLZXkgfHwgZXYubWV0YUtleSkge1xuICAgICAgICB2aWV3RGF0ZSA9IGFkZFllYXJzKHZpZXdEYXRlLCBkaXJlY3Rpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmlld0RhdGUgPSBhZGREYXlzKHZpZXdEYXRlLCBkaXJlY3Rpb24pO1xuICAgICAgfVxuICAgICAgYWRkRm4gPSBhZGREYXlzO1xuICAgICAgdGVzdEZuID0gZnVuY3Rpb24gdGVzdEZuKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRWaWV3LmRpc2FibGVkLmluY2x1ZGVzKGRhdGUpO1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHZpZXdEYXRlID0gYWRkTW9udGhzKHZpZXdEYXRlLCB2ZXJ0aWNhbCA/IGRpcmVjdGlvbiAqIDQgOiBkaXJlY3Rpb24pO1xuICAgICAgYWRkRm4gPSBhZGRNb250aHM7XG4gICAgICB0ZXN0Rm4gPSBmdW5jdGlvbiB0ZXN0Rm4oZGF0ZSkge1xuICAgICAgICB2YXIgZHQgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgICAgdmFyIHllYXIgPSBjdXJyZW50Vmlldy55ZWFyLFxuICAgICAgICAgIGRpc2FibGVkID0gY3VycmVudFZpZXcuZGlzYWJsZWQ7XG4gICAgICAgIHJldHVybiBkdC5nZXRGdWxsWWVhcigpID09PSB5ZWFyICYmIGRpc2FibGVkLmluY2x1ZGVzKGR0LmdldE1vbnRoKCkpO1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB2aWV3RGF0ZSA9IGFkZFllYXJzKHZpZXdEYXRlLCBkaXJlY3Rpb24gKiAodmVydGljYWwgPyA0IDogMSkgKiBzdGVwKTtcbiAgICAgIGFkZEZuID0gYWRkWWVhcnM7XG4gICAgICB0ZXN0Rm4gPSBmdW5jdGlvbiB0ZXN0Rm4oZGF0ZSkge1xuICAgICAgICByZXR1cm4gY3VycmVudFZpZXcuZGlzYWJsZWQuaW5jbHVkZXMoc3RhcnRPZlllYXJQZXJpb2QoZGF0ZSwgc3RlcCkpO1xuICAgICAgfTtcbiAgfVxuICB2aWV3RGF0ZSA9IGZpbmROZXh0QXZhaWxhYmxlT25lKHZpZXdEYXRlLCBhZGRGbiwgZGlyZWN0aW9uIDwgMCA/IC1zdGVwIDogc3RlcCwgdGVzdEZuLCBjdXJyZW50Vmlldy5taW5EYXRlLCBjdXJyZW50Vmlldy5tYXhEYXRlKTtcbiAgaWYgKHZpZXdEYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICBwaWNrZXIuY2hhbmdlRm9jdXModmlld0RhdGUpLnJlbmRlcigpO1xuICB9XG59XG5mdW5jdGlvbiBvbktleWRvd24oZGF0ZXBpY2tlciwgZXYpIHtcbiAgaWYgKGV2LmtleSA9PT0gJ1RhYicpIHtcbiAgICB1bmZvY3VzKGRhdGVwaWNrZXIpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgcGlja2VyID0gZGF0ZXBpY2tlci5waWNrZXI7XG4gIHZhciBfcGlja2VyJGN1cnJlbnRWaWV3ID0gcGlja2VyLmN1cnJlbnRWaWV3LFxuICAgIGlkID0gX3BpY2tlciRjdXJyZW50Vmlldy5pZCxcbiAgICBpc01pblZpZXcgPSBfcGlja2VyJGN1cnJlbnRWaWV3LmlzTWluVmlldztcbiAgaWYgKCFwaWNrZXIuYWN0aXZlKSB7XG4gICAgc3dpdGNoIChldi5rZXkpIHtcbiAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICBwaWNrZXIuc2hvdygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgZGF0ZXBpY2tlci51cGRhdGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfVxuICB9IGVsc2UgaWYgKGRhdGVwaWNrZXIuZWRpdE1vZGUpIHtcbiAgICBzd2l0Y2ggKGV2LmtleSkge1xuICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgcGlja2VyLmhpZGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgIGRhdGVwaWNrZXIuZXhpdEVkaXRNb2RlKHtcbiAgICAgICAgICB1cGRhdGU6IHRydWUsXG4gICAgICAgICAgYXV0b2hpZGU6IGRhdGVwaWNrZXIuY29uZmlnLmF1dG9oaWRlXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChldi5rZXkpIHtcbiAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgIHBpY2tlci5oaWRlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgaWYgKGV2LmN0cmxLZXkgfHwgZXYubWV0YUtleSkge1xuICAgICAgICAgIGdvVG9QcmV2T3JOZXh0KGRhdGVwaWNrZXIsIC0xKTtcbiAgICAgICAgfSBlbHNlIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgICAgIGRhdGVwaWNrZXIuZW50ZXJFZGl0TW9kZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb3ZlQnlBcnJvd0tleShkYXRlcGlja2VyLCBldiwgLTEsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICBpZiAoZXYuY3RybEtleSB8fCBldi5tZXRhS2V5KSB7XG4gICAgICAgICAgZ29Ub1ByZXZPck5leHQoZGF0ZXBpY2tlciwgMSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXYuc2hpZnRLZXkpIHtcbiAgICAgICAgICBkYXRlcGlja2VyLmVudGVyRWRpdE1vZGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW92ZUJ5QXJyb3dLZXkoZGF0ZXBpY2tlciwgZXYsIDEsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICBpZiAoZXYuY3RybEtleSB8fCBldi5tZXRhS2V5KSB7XG4gICAgICAgICAgc3dpdGNoVmlldyhkYXRlcGlja2VyKTtcbiAgICAgICAgfSBlbHNlIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgICAgIGRhdGVwaWNrZXIuZW50ZXJFZGl0TW9kZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb3ZlQnlBcnJvd0tleShkYXRlcGlja2VyLCBldiwgLTEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgaWYgKGV2LnNoaWZ0S2V5ICYmICFldi5jdHJsS2V5ICYmICFldi5tZXRhS2V5KSB7XG4gICAgICAgICAgZGF0ZXBpY2tlci5lbnRlckVkaXRNb2RlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG1vdmVCeUFycm93S2V5KGRhdGVwaWNrZXIsIGV2LCAxLCB0cnVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgIGlmIChpc01pblZpZXcpIHtcbiAgICAgICAgICBkYXRlcGlja2VyLnNldERhdGUocGlja2VyLnZpZXdEYXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwaWNrZXIuY2hhbmdlVmlldyhpZCAtIDEpLnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQmFja3NwYWNlJzpcbiAgICAgIGNhc2UgJ0RlbGV0ZSc6XG4gICAgICAgIGRhdGVwaWNrZXIuZW50ZXJFZGl0TW9kZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoZXYua2V5Lmxlbmd0aCA9PT0gMSAmJiAhZXYuY3RybEtleSAmJiAhZXYubWV0YUtleSkge1xuICAgICAgICAgIGRhdGVwaWNrZXIuZW50ZXJFZGl0TW9kZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG59XG5mdW5jdGlvbiBvbkZvY3VzKGRhdGVwaWNrZXIpIHtcbiAgaWYgKGRhdGVwaWNrZXIuY29uZmlnLnNob3dPbkZvY3VzICYmICFkYXRlcGlja2VyLl9zaG93aW5nKSB7XG4gICAgZGF0ZXBpY2tlci5zaG93KCk7XG4gIH1cbn1cblxuLy8gZm9yIHRoZSBwcmV2ZW50aW9uIGZvciBlbnRlcmluZyBlZGl0IG1vZGUgd2hpbGUgZ2V0dGluZyBmb2N1cyBvbiBjbGlja1xuZnVuY3Rpb24gb25Nb3VzZWRvd24oZGF0ZXBpY2tlciwgZXYpIHtcbiAgdmFyIGVsID0gZXYudGFyZ2V0O1xuICBpZiAoZGF0ZXBpY2tlci5waWNrZXIuYWN0aXZlIHx8IGRhdGVwaWNrZXIuY29uZmlnLnNob3dPbkNsaWNrKSB7XG4gICAgZWwuX2FjdGl2ZSA9IGVsID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGVsLl9jbGlja2luZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgZGVsZXRlIGVsLl9hY3RpdmU7XG4gICAgICBkZWxldGUgZWwuX2NsaWNraW5nO1xuICAgIH0sIDIwMDApO1xuICB9XG59XG5mdW5jdGlvbiBvbkNsaWNrSW5wdXQoZGF0ZXBpY2tlciwgZXYpIHtcbiAgdmFyIGVsID0gZXYudGFyZ2V0O1xuICBpZiAoIWVsLl9jbGlja2luZykge1xuICAgIHJldHVybjtcbiAgfVxuICBjbGVhclRpbWVvdXQoZWwuX2NsaWNraW5nKTtcbiAgZGVsZXRlIGVsLl9jbGlja2luZztcbiAgaWYgKGVsLl9hY3RpdmUpIHtcbiAgICBkYXRlcGlja2VyLmVudGVyRWRpdE1vZGUoKTtcbiAgfVxuICBkZWxldGUgZWwuX2FjdGl2ZTtcbiAgaWYgKGRhdGVwaWNrZXIuY29uZmlnLnNob3dPbkNsaWNrKSB7XG4gICAgZGF0ZXBpY2tlci5zaG93KCk7XG4gIH1cbn1cbmZ1bmN0aW9uIG9uUGFzdGUoZGF0ZXBpY2tlciwgZXYpIHtcbiAgaWYgKGV2LmNsaXBib2FyZERhdGEudHlwZXMuaW5jbHVkZXMoJ3RleHQvcGxhaW4nKSkge1xuICAgIGRhdGVwaWNrZXIuZW50ZXJFZGl0TW9kZSgpO1xuICB9XG59XG5cbi8vIGZvciB0aGUgYGRvY3VtZW50YCB0byBkZWxlZ2F0ZSB0aGUgZXZlbnRzIGZyb20gb3V0c2lkZSB0aGUgcGlja2VyL2lucHV0IGZpZWxkXG5mdW5jdGlvbiBvbkNsaWNrT3V0c2lkZShkYXRlcGlja2VyLCBldikge1xuICB2YXIgZWxlbWVudCA9IGRhdGVwaWNrZXIuZWxlbWVudDtcbiAgaWYgKGVsZW1lbnQgIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHBpY2tlckVsZW0gPSBkYXRlcGlja2VyLnBpY2tlci5lbGVtZW50O1xuICBpZiAoZmluZEVsZW1lbnRJbkV2ZW50UGF0aChldiwgZnVuY3Rpb24gKGVsKSB7XG4gICAgcmV0dXJuIGVsID09PSBlbGVtZW50IHx8IGVsID09PSBwaWNrZXJFbGVtO1xuICB9KSkge1xuICAgIHJldHVybjtcbiAgfVxuICB1bmZvY3VzKGRhdGVwaWNrZXIpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlEYXRlcyhkYXRlcywgY29uZmlnKSB7XG4gIHJldHVybiBkYXRlcy5tYXAoZnVuY3Rpb24gKGR0KSB7XG4gICAgcmV0dXJuIGZvcm1hdERhdGUoZHQsIGNvbmZpZy5mb3JtYXQsIGNvbmZpZy5sb2NhbGUpO1xuICB9KS5qb2luKGNvbmZpZy5kYXRlRGVsaW1pdGVyKTtcbn1cblxuLy8gcGFyc2UgaW5wdXQgZGF0ZXMgYW5kIGNyZWF0ZSBhbiBhcnJheSBvZiB0aW1lIHZhbHVlcyBmb3Igc2VsZWN0aW9uXG4vLyByZXR1cm5zIHVuZGVmaW5lZCBpZiB0aGVyZSBhcmUgbm8gdmFsaWQgZGF0ZXMgaW4gaW5wdXREYXRlc1xuLy8gd2hlbiBvcmlnRGF0ZXMgKGN1cnJlbnQgc2VsZWN0aW9uKSBpcyBwYXNzZWQsIHRoZSBmdW5jdGlvbiB3b3JrcyB0byBtaXhcbi8vIHRoZSBpbnB1dCBkYXRlcyBpbnRvIHRoZSBjdXJyZW50IHNlbGVjdGlvblxuZnVuY3Rpb24gcHJvY2Vzc0lucHV0RGF0ZXMoZGF0ZXBpY2tlciwgaW5wdXREYXRlcykge1xuICB2YXIgY2xlYXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICB2YXIgY29uZmlnID0gZGF0ZXBpY2tlci5jb25maWcsXG4gICAgb3JpZ0RhdGVzID0gZGF0ZXBpY2tlci5kYXRlcyxcbiAgICByYW5nZXBpY2tlciA9IGRhdGVwaWNrZXIucmFuZ2VwaWNrZXI7XG4gIGlmIChpbnB1dERhdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIGVtcHR5IGlucHV0IGlzIGNvbnNpZGVyZWQgdmFsaWQgdW5sZXNzIG9yaWdpRGF0ZXMgaXMgcGFzc2VkXG4gICAgcmV0dXJuIGNsZWFyID8gW10gOiB1bmRlZmluZWQ7XG4gIH1cbiAgdmFyIHJhbmdlRW5kID0gcmFuZ2VwaWNrZXIgJiYgZGF0ZXBpY2tlciA9PT0gcmFuZ2VwaWNrZXIuZGF0ZXBpY2tlcnNbMV07XG4gIHZhciBuZXdEYXRlcyA9IGlucHV0RGF0ZXMucmVkdWNlKGZ1bmN0aW9uIChkYXRlcywgZHQpIHtcbiAgICB2YXIgZGF0ZSA9IHBhcnNlRGF0ZShkdCwgY29uZmlnLmZvcm1hdCwgY29uZmlnLmxvY2FsZSk7XG4gICAgaWYgKGRhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGRhdGVzO1xuICAgIH1cbiAgICBpZiAoY29uZmlnLnBpY2tMZXZlbCA+IDApIHtcbiAgICAgIC8vIGFkanVzdCB0byAxc3Qgb2YgdGhlIG1vbnRoL0phbiAxc3Qgb2YgdGhlIHllYXJcbiAgICAgIC8vIG9yIHRvIHRoZSBsYXN0IGRheSBvZiB0aGUgbW9uaC9EZWMgMzFzdCBvZiB0aGUgeWVhciBpZiB0aGUgZGF0ZXBpY2tlclxuICAgICAgLy8gaXMgdGhlIHJhbmdlLWVuZCBwaWNrZXIgb2YgYSByYW5nZXBpY2tlclxuICAgICAgdmFyIF9kdCA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgaWYgKGNvbmZpZy5waWNrTGV2ZWwgPT09IDEpIHtcbiAgICAgICAgZGF0ZSA9IHJhbmdlRW5kID8gX2R0LnNldE1vbnRoKF9kdC5nZXRNb250aCgpICsgMSwgMCkgOiBfZHQuc2V0RGF0ZSgxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGUgPSByYW5nZUVuZCA/IF9kdC5zZXRGdWxsWWVhcihfZHQuZ2V0RnVsbFllYXIoKSArIDEsIDAsIDApIDogX2R0LnNldE1vbnRoKDAsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNJblJhbmdlKGRhdGUsIGNvbmZpZy5taW5EYXRlLCBjb25maWcubWF4RGF0ZSkgJiYgIWRhdGVzLmluY2x1ZGVzKGRhdGUpICYmICFjb25maWcuZGF0ZXNEaXNhYmxlZC5pbmNsdWRlcyhkYXRlKSAmJiAhY29uZmlnLmRheXNPZldlZWtEaXNhYmxlZC5pbmNsdWRlcyhuZXcgRGF0ZShkYXRlKS5nZXREYXkoKSkpIHtcbiAgICAgIGRhdGVzLnB1c2goZGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlcztcbiAgfSwgW10pO1xuICBpZiAobmV3RGF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChjb25maWcubXVsdGlkYXRlICYmICFjbGVhcikge1xuICAgIC8vIGdldCB0aGUgc3lubWV0cmljIGRpZmZlcmVuY2UgYmV0d2VlbiBvcmlnRGF0ZXMgYW5kIG5ld0RhdGVzXG4gICAgbmV3RGF0ZXMgPSBuZXdEYXRlcy5yZWR1Y2UoZnVuY3Rpb24gKGRhdGVzLCBkYXRlKSB7XG4gICAgICBpZiAoIW9yaWdEYXRlcy5pbmNsdWRlcyhkYXRlKSkge1xuICAgICAgICBkYXRlcy5wdXNoKGRhdGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGVzO1xuICAgIH0sIG9yaWdEYXRlcy5maWx0ZXIoZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIHJldHVybiAhbmV3RGF0ZXMuaW5jbHVkZXMoZGF0ZSk7XG4gICAgfSkpO1xuICB9XG4gIC8vIGRvIGxlbmd0aCBjaGVjayBhbHdheXMgYmVjYXVzZSB1c2VyIGNhbiBpbnB1dCBtdWx0aXBsZSBkYXRlcyByZWdhcmRsZXNzIG9mIHRoZSBtb2RlXG4gIHJldHVybiBjb25maWcubWF4TnVtYmVyT2ZEYXRlcyAmJiBuZXdEYXRlcy5sZW5ndGggPiBjb25maWcubWF4TnVtYmVyT2ZEYXRlcyA/IG5ld0RhdGVzLnNsaWNlKGNvbmZpZy5tYXhOdW1iZXJPZkRhdGVzICogLTEpIDogbmV3RGF0ZXM7XG59XG5cbi8vIHJlZnJlc2ggdGhlIFVJIGVsZW1lbnRzXG4vLyBtb2RlczogMTogaW5wdXQgb25seSwgMiwgcGlja2VyIG9ubHksIDMgYm90aFxuZnVuY3Rpb24gcmVmcmVzaFVJKGRhdGVwaWNrZXIpIHtcbiAgdmFyIG1vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDM7XG4gIHZhciBxdWlja1JlbmRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcbiAgdmFyIGNvbmZpZyA9IGRhdGVwaWNrZXIuY29uZmlnLFxuICAgIHBpY2tlciA9IGRhdGVwaWNrZXIucGlja2VyLFxuICAgIGlucHV0RmllbGQgPSBkYXRlcGlja2VyLmlucHV0RmllbGQ7XG4gIGlmIChtb2RlICYgMikge1xuICAgIHZhciBuZXdWaWV3ID0gcGlja2VyLmFjdGl2ZSA/IGNvbmZpZy5waWNrTGV2ZWwgOiBjb25maWcuc3RhcnRWaWV3O1xuICAgIHBpY2tlci51cGRhdGUoKS5jaGFuZ2VWaWV3KG5ld1ZpZXcpLnJlbmRlcihxdWlja1JlbmRlcik7XG4gIH1cbiAgaWYgKG1vZGUgJiAxICYmIGlucHV0RmllbGQpIHtcbiAgICBpbnB1dEZpZWxkLnZhbHVlID0gc3RyaW5naWZ5RGF0ZXMoZGF0ZXBpY2tlci5kYXRlcywgY29uZmlnKTtcbiAgfVxufVxuZnVuY3Rpb24gX3NldERhdGUoZGF0ZXBpY2tlciwgaW5wdXREYXRlcywgb3B0aW9ucykge1xuICB2YXIgY2xlYXIgPSBvcHRpb25zLmNsZWFyLFxuICAgIHJlbmRlciA9IG9wdGlvbnMucmVuZGVyLFxuICAgIGF1dG9oaWRlID0gb3B0aW9ucy5hdXRvaGlkZTtcbiAgaWYgKHJlbmRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmVuZGVyID0gdHJ1ZTtcbiAgfVxuICBpZiAoIXJlbmRlcikge1xuICAgIGF1dG9oaWRlID0gZmFsc2U7XG4gIH0gZWxzZSBpZiAoYXV0b2hpZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGF1dG9oaWRlID0gZGF0ZXBpY2tlci5jb25maWcuYXV0b2hpZGU7XG4gIH1cbiAgdmFyIG5ld0RhdGVzID0gcHJvY2Vzc0lucHV0RGF0ZXMoZGF0ZXBpY2tlciwgaW5wdXREYXRlcywgY2xlYXIpO1xuICBpZiAoIW5ld0RhdGVzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChuZXdEYXRlcy50b1N0cmluZygpICE9PSBkYXRlcGlja2VyLmRhdGVzLnRvU3RyaW5nKCkpIHtcbiAgICBkYXRlcGlja2VyLmRhdGVzID0gbmV3RGF0ZXM7XG4gICAgcmVmcmVzaFVJKGRhdGVwaWNrZXIsIHJlbmRlciA/IDMgOiAxKTtcbiAgICB0cmlnZ2VyRGF0ZXBpY2tlckV2ZW50KGRhdGVwaWNrZXIsICdjaGFuZ2VEYXRlJyk7XG4gIH0gZWxzZSB7XG4gICAgcmVmcmVzaFVJKGRhdGVwaWNrZXIsIDEpO1xuICB9XG4gIGlmIChhdXRvaGlkZSkge1xuICAgIGRhdGVwaWNrZXIuaGlkZSgpO1xuICB9XG59XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgZGF0ZSBwaWNrZXJcbiAqL1xudmFyIERhdGVwaWNrZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlIGEgZGF0ZSBwaWNrZXJcbiAgICogQHBhcmFtICB7RWxlbWVudH0gZWxlbWVudCAtIGVsZW1lbnQgdG8gYmluZCBhIGRhdGUgcGlja2VyXG4gICAqIEBwYXJhbSAge09iamVjdH0gW29wdGlvbnNdIC0gY29uZmlnIG9wdGlvbnNcbiAgICogQHBhcmFtICB7RGF0ZVJhbmdlUGlja2VyfSBbcmFuZ2VwaWNrZXJdIC0gRGF0ZVJhbmdlUGlja2VyIGluc3RhbmNlIHRoZVxuICAgKiBkYXRlIHBpY2tlciBiZWxvbmdzIHRvLiBVc2UgdGhpcyBvbmx5IHdoZW4gY3JlYXRpbmcgZGF0ZSBwaWNrZXIgYXMgYSBwYXJ0XG4gICAqIG9mIGRhdGUgcmFuZ2UgcGlja2VyXG4gICAqL1xuICBmdW5jdGlvbiBEYXRlcGlja2VyKGVsZW1lbnQpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHJhbmdlcGlja2VyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGVwaWNrZXIpO1xuICAgIGVsZW1lbnQuZGF0ZXBpY2tlciA9IHRoaXM7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcblxuICAgIC8vIHNldCB1cCBjb25maWdcbiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWcgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGJ1dHRvbkNsYXNzOiBvcHRpb25zLmJ1dHRvbkNsYXNzICYmIFN0cmluZyhvcHRpb25zLmJ1dHRvbkNsYXNzKSB8fCAnYnV0dG9uJyxcbiAgICAgIGNvbnRhaW5lcjogZG9jdW1lbnQuYm9keSxcbiAgICAgIGRlZmF1bHRWaWV3RGF0ZTogdG9kYXkoKSxcbiAgICAgIG1heERhdGU6IHVuZGVmaW5lZCxcbiAgICAgIG1pbkRhdGU6IHVuZGVmaW5lZFxuICAgIH0sIHByb2Nlc3NPcHRpb25zKGRlZmF1bHRPcHRpb25zLCB0aGlzKSk7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgT2JqZWN0LmFzc2lnbihjb25maWcsIHByb2Nlc3NPcHRpb25zKG9wdGlvbnMsIHRoaXMpKTtcblxuICAgIC8vIGNvbmZpZ3VyZSBieSB0eXBlXG4gICAgdmFyIGlubGluZSA9IHRoaXMuaW5saW5lID0gZWxlbWVudC50YWdOYW1lICE9PSAnSU5QVVQnO1xuICAgIHZhciBpbnB1dEZpZWxkO1xuICAgIHZhciBpbml0aWFsRGF0ZXM7XG4gICAgaWYgKGlubGluZSkge1xuICAgICAgY29uZmlnLmNvbnRhaW5lciA9IGVsZW1lbnQ7XG4gICAgICBpbml0aWFsRGF0ZXMgPSBzdHJpbmdUb0FycmF5KGVsZW1lbnQuZGF0YXNldC5kYXRlLCBjb25maWcuZGF0ZURlbGltaXRlcik7XG4gICAgICBkZWxldGUgZWxlbWVudC5kYXRhc2V0LmRhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob3B0aW9ucy5jb250YWluZXIpIDogbnVsbDtcbiAgICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgICAgY29uZmlnLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgIH1cbiAgICAgIGlucHV0RmllbGQgPSB0aGlzLmlucHV0RmllbGQgPSBlbGVtZW50O1xuICAgICAgaW5wdXRGaWVsZC5jbGFzc0xpc3QuYWRkKCdkYXRlcGlja2VyLWlucHV0Jyk7XG4gICAgICBpbml0aWFsRGF0ZXMgPSBzdHJpbmdUb0FycmF5KGlucHV0RmllbGQudmFsdWUsIGNvbmZpZy5kYXRlRGVsaW1pdGVyKTtcbiAgICB9XG4gICAgaWYgKHJhbmdlcGlja2VyKSB7XG4gICAgICAvLyBjaGVjayB2YWxpZGlyeVxuICAgICAgdmFyIGluZGV4ID0gcmFuZ2VwaWNrZXIuaW5wdXRzLmluZGV4T2YoaW5wdXRGaWVsZCk7XG4gICAgICB2YXIgZGF0ZXBpY2tlcnMgPSByYW5nZXBpY2tlci5kYXRlcGlja2VycztcbiAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiAxIHx8ICFBcnJheS5pc0FycmF5KGRhdGVwaWNrZXJzKSkge1xuICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCByYW5nZXBpY2tlciBvYmplY3QuJyk7XG4gICAgICB9XG4gICAgICAvLyBhdHRhY2ggaXRhZWxmIHRvIHRoZSByYW5nZXBpY2tlciBoZXJlIHNvIHRoYXQgcHJvY2Vzc0lucHV0RGF0ZXMoKSBjYW5cbiAgICAgIC8vIGRldGVybWluZSBpZiB0aGlzIGlzIHRoZSByYW5nZS1lbmQgcGlja2VyIG9mIHRoZSByYW5nZXBpY2tlciB3aGlsZVxuICAgICAgLy8gc2V0dGluZyBpbml0YWwgdmFsdWVzIHdoZW4gcGlja0xldmVsID4gMFxuICAgICAgZGF0ZXBpY2tlcnNbaW5kZXhdID0gdGhpcztcbiAgICAgIC8vIGFkZCBnZXR0ZXIgZm9yIHJhbmdlcGlja2VyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JhbmdlcGlja2VyJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gcmFuZ2VwaWNrZXI7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHNldCBpbml0aWFsIGRhdGVzXG4gICAgdGhpcy5kYXRlcyA9IFtdO1xuICAgIC8vIHByb2Nlc3MgaW5pdGlhbCB2YWx1ZVxuICAgIHZhciBpbnB1dERhdGVWYWx1ZXMgPSBwcm9jZXNzSW5wdXREYXRlcyh0aGlzLCBpbml0aWFsRGF0ZXMpO1xuICAgIGlmIChpbnB1dERhdGVWYWx1ZXMgJiYgaW5wdXREYXRlVmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZGF0ZXMgPSBpbnB1dERhdGVWYWx1ZXM7XG4gICAgfVxuICAgIGlmIChpbnB1dEZpZWxkKSB7XG4gICAgICBpbnB1dEZpZWxkLnZhbHVlID0gc3RyaW5naWZ5RGF0ZXModGhpcy5kYXRlcywgY29uZmlnKTtcbiAgICB9XG4gICAgdmFyIHBpY2tlciA9IHRoaXMucGlja2VyID0gbmV3IFBpY2tlcih0aGlzKTtcbiAgICBpZiAoaW5saW5lKSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc2V0IHVwIGV2ZW50IGxpc3RlbmVycyBpbiBvdGhlciBtb2Rlc1xuICAgICAgdmFyIG9uTW91c2Vkb3duRG9jdW1lbnQgPSBvbkNsaWNrT3V0c2lkZS5iaW5kKG51bGwsIHRoaXMpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IFtbaW5wdXRGaWVsZCwgJ2tleWRvd24nLCBvbktleWRvd24uYmluZChudWxsLCB0aGlzKV0sIFtpbnB1dEZpZWxkLCAnZm9jdXMnLCBvbkZvY3VzLmJpbmQobnVsbCwgdGhpcyldLCBbaW5wdXRGaWVsZCwgJ21vdXNlZG93bicsIG9uTW91c2Vkb3duLmJpbmQobnVsbCwgdGhpcyldLCBbaW5wdXRGaWVsZCwgJ2NsaWNrJywgb25DbGlja0lucHV0LmJpbmQobnVsbCwgdGhpcyldLCBbaW5wdXRGaWVsZCwgJ3Bhc3RlJywgb25QYXN0ZS5iaW5kKG51bGwsIHRoaXMpXSwgW2RvY3VtZW50LCAnbW91c2Vkb3duJywgb25Nb3VzZWRvd25Eb2N1bWVudF0sIFtkb2N1bWVudCwgJ3RvdWNoc3RhcnQnLCBvbk1vdXNlZG93bkRvY3VtZW50XSwgW3dpbmRvdywgJ3Jlc2l6ZScsIHBpY2tlci5wbGFjZS5iaW5kKHBpY2tlcildXTtcbiAgICAgIHJlZ2lzdGVyTGlzdGVuZXJzKHRoaXMsIGxpc3RlbmVycyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1hdCBEYXRlIG9iamVjdCBvciB0aW1lIHZhbHVlIGluIGdpdmVuIGZvcm1hdCBhbmQgbGFuZ3VhZ2VcbiAgICogQHBhcmFtICB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSBkYXRlIG9yIHRpbWUgdmFsdWUgdG8gZm9ybWF0XG4gICAqIEBwYXJhbSAge1N0cmluZ3xPYmplY3R9IGZvcm1hdCAtIGZvcm1hdCBzdHJpbmcgb3Igb2JqZWN0IHRoYXQgY29udGFpbnNcbiAgICogdG9EaXNwbGF5KCkgY3VzdG9tIGZvcm1hdHRlciwgd2hvc2Ugc2lnbmF0dXJlIGlzXG4gICAqIC0gYXJnczpcbiAgICogICAtIGRhdGU6IHtEYXRlfSAtIERhdGUgaW5zdGFuY2Ugb2YgdGhlIGRhdGUgcGFzc2VkIHRvIHRoZSBtZXRob2RcbiAgICogICAtIGZvcm1hdDoge09iamVjdH0gLSB0aGUgZm9ybWF0IG9iamVjdCBwYXNzZWQgdG8gdGhlIG1ldGhvZFxuICAgKiAgIC0gbG9jYWxlOiB7T2JqZWN0fSAtIGxvY2FsZSBmb3IgdGhlIGxhbmd1YWdlIHNwZWNpZmllZCBieSBgbGFuZ2BcbiAgICogLSByZXR1cm46XG4gICAqICAgICB7U3RyaW5nfSBmb3JtYXR0ZWQgZGF0ZVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IFtsYW5nPWVuXSAtIGxhbmd1YWdlIGNvZGUgZm9yIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEByZXR1cm4ge1N0cmluZ30gZm9ybWF0dGVkIGRhdGVcbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoRGF0ZXBpY2tlciwgW3tcbiAgICBrZXk6IFwiYWN0aXZlXCIsXG4gICAgZ2V0OlxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtCb29sZWFufSAtIFdoZXRoZXIgdGhlIHBpY2tlciBlbGVtZW50IGlzIHNob3duLiBgdHJ1ZWAgd2huZSBzaG93blxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAhISh0aGlzLnBpY2tlciAmJiB0aGlzLnBpY2tlci5hY3RpdmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gLSBET00gb2JqZWN0IG9mIHBpY2tlciBlbGVtZW50XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwicGlja2VyRWxlbWVudFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucGlja2VyID8gdGhpcy5waWNrZXIuZWxlbWVudCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgbmV3IHZhbHVlcyB0byB0aGUgY29uZmlnIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGNvbmZpZyBvcHRpb25zIHRvIHVwZGF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInNldE9wdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICB2YXIgcGlja2VyID0gdGhpcy5waWNrZXI7XG4gICAgICB2YXIgbmV3T3B0aW9ucyA9IHByb2Nlc3NPcHRpb25zKG9wdGlvbnMsIHRoaXMpO1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5jb25maWcsIG5ld09wdGlvbnMpO1xuICAgICAgcGlja2VyLnNldE9wdGlvbnMobmV3T3B0aW9ucyk7XG4gICAgICByZWZyZXNoVUkodGhpcywgMyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgcGlja2VyIGVsZW1lbnRcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJzaG93XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICBpZiAodGhpcy5pbnB1dEZpZWxkKSB7XG4gICAgICAgIGlmICh0aGlzLmlucHV0RmllbGQuZGlzYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW5wdXRGaWVsZCAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgIHRoaXMuX3Nob3dpbmcgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuaW5wdXRGaWVsZC5mb2N1cygpO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zaG93aW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnBpY2tlci5zaG93KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgcGlja2VyIGVsZW1lbnRcbiAgICAgKiBOb3QgYXZhaWxhYmxlIG9uIGlubGluZSBwaWNrZXJcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJoaWRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICBpZiAodGhpcy5pbmxpbmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5waWNrZXIuaGlkZSgpO1xuICAgICAgdGhpcy5waWNrZXIudXBkYXRlKCkuY2hhbmdlVmlldyh0aGlzLmNvbmZpZy5zdGFydFZpZXcpLnJlbmRlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIERhdGVwaWNrZXIgaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtEZXRlcGlja2VyfSAtIHRoZSBpbnN0YW5jZSBkZXN0cm95ZWRcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJkZXN0cm95XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIHVucmVnaXN0ZXJMaXN0ZW5lcnModGhpcyk7XG4gICAgICB0aGlzLnBpY2tlci5kZXRhY2goKTtcbiAgICAgIGlmICghdGhpcy5pbmxpbmUpIHtcbiAgICAgICAgdGhpcy5pbnB1dEZpZWxkLmNsYXNzTGlzdC5yZW1vdmUoJ2RhdGVwaWNrZXItaW5wdXQnKTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQuZGF0ZXBpY2tlcjtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc2VsZWN0ZWQgZGF0ZShzKVxuICAgICAqXG4gICAgICogVGhlIG1ldGhvZCByZXR1cm5zIGEgRGF0ZSBvYmplY3Qgb2Ygc2VsZWN0ZWQgZGF0ZSBieSBkZWZhdWx0LCBhbmQgcmV0dXJuc1xuICAgICAqIGFuIGFycmF5IG9mIHNlbGVjdGVkIGRhdGVzIGluIG11bHRpZGF0ZSBtb2RlLiBJZiBmb3JtYXQgc3RyaW5nIGlzIHBhc3NlZCxcbiAgICAgKiBpdCByZXR1cm5zIGRhdGUgc3RyaW5nKHMpIGZvcm1hdHRlZCBpbiBnaXZlbiBmb3JtYXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IFtmb3JtYXRdIC0gRm9ybWF0IHN0cmluZyB0byBzdHJpbmdpZnkgdGhlIGRhdGUocylcbiAgICAgKiBAcmV0dXJuIHtEYXRlfFN0cmluZ3xEYXRlW118U3RyaW5nW119IC0gc2VsZWN0ZWQgZGF0ZShzKSwgb3IgaWYgbm9uZSBpc1xuICAgICAqIHNlbGVjdGVkLCBlbXB0eSBhcnJheSBpbiBtdWx0aWRhdGUgbW9kZSBhbmQgdW50aXRsZWQgaW4gc2lnbGVkYXRlIG1vZGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXREYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERhdGUoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIGZvcm1hdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIGNhbGxiYWNrID0gZm9ybWF0ID8gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0LCBfdGhpcy5jb25maWcubG9jYWxlKTtcbiAgICAgIH0gOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZSk7XG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMuY29uZmlnLm11bHRpZGF0ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRlcy5tYXAoY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sodGhpcy5kYXRlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHNlbGVjdGVkIGRhdGUocylcbiAgICAgKlxuICAgICAqIEluIG11bHRpZGF0ZSBtb2RlLCB5b3UgY2FuIHBhc3MgbXVsdGlwbGUgZGF0ZXMgYXMgYSBzZXJpZXMgb2YgYXJndW1lbnRzXG4gICAgICogb3IgYW4gYXJyYXkuIChTaW5jZSBlYWNoIGRhdGUgaXMgcGFyc2VkIGluZGl2aWR1YWxseSwgdGhlIHR5cGUgb2YgdGhlXG4gICAgICogZGF0ZXMgZG9lc24ndCBoYXZlIHRvIGJlIHRoZSBzYW1lLilcbiAgICAgKiBUaGUgZ2l2ZW4gZGF0ZXMgYXJlIHVzZWQgdG8gdG9nZ2xlIHRoZSBzZWxlY3Qgc3RhdHVzIG9mIGVhY2ggZGF0ZS4gVGhlXG4gICAgICogbnVtYmVyIG9mIHNlbGVjdGVkIGRhdGVzIGlzIGtlcHQgZnJvbSBleGNlZWRpbmcgdGhlIGxlbmd0aCBzZXQgdG9cbiAgICAgKiBtYXhOdW1iZXJPZkRhdGVzLlxuICAgICAqXG4gICAgICogV2l0aCBjbGVhcjogdHJ1ZSBvcHRpb24sIHRoZSBtZXRob2QgY2FuIGJlIHVzZWQgdG8gY2xlYXIgdGhlIHNlbGVjdGlvblxuICAgICAqIGFuZCB0byByZXBsYWNlIHRoZSBzZWxlY3Rpb24gaW5zdGVhZCBvZiB0b2dnbGluZyBpbiBtdWx0aWRhdGUgbW9kZS5cbiAgICAgKiBJZiB0aGUgb3B0aW9uIGlzIHBhc3NlZCB3aXRoIG5vIGRhdGUgYXJndW1lbnRzIG9yIGFuIGVtcHR5IGRhdGVzIGFycmF5LFxuICAgICAqIGl0IHdvcmtzIGFzIFwiY2xlYXJcIiAoY2xlYXIgdGhlIHNlbGVjdGlvbiB0aGVuIHNldCBub3RoaW5nKSwgYW5kIGlmIHRoZVxuICAgICAqIG9wdGlvbiBpcyBwYXNzZWQgd2l0aCBuZXcgZGF0ZXMgdG8gc2VsZWN0LCBpdCB3b3JrcyBhcyBcInJlcGxhY2VcIiAoY2xlYXJcbiAgICAgKiB0aGUgc2VsZWN0aW9uIHRoZW4gc2V0IHRoZSBnaXZlbiBkYXRlcylcbiAgICAgKlxuICAgICAqIFdoZW4gcmVuZGVyOiBmYWxzZSBvcHRpb24gaXMgdXNlZCwgdGhlIG1ldGhvZCBvbWl0cyByZS1yZW5kZXJpbmcgdGhlXG4gICAgICogcGlja2VyIGVsZW1lbnQuIEluIHRoaXMgY2FzZSwgeW91IG5lZWQgdG8gY2FsbCByZWZyZXNoKCkgbWV0aG9kIGxhdGVyIGluXG4gICAgICogb3JkZXIgZm9yIHRoZSBwaWNrZXIgZWxlbWVudCB0byByZWZsZWN0IHRoZSBjaGFuZ2VzLiBUaGUgaW5wdXQgZmllbGQgaXNcbiAgICAgKiByZWZyZXNoZWQgYWx3YXlzIHJlZ2FyZGxlc3Mgb2YgdGhpcyBvcHRpb24uXG4gICAgICpcbiAgICAgKiBXaGVuIGludmFsaWQgKHVucGFyc2FibGUsIHJlcGVhdGVkLCBkaXNhYmxlZCBvciBvdXQtb2YtcmFuZ2UpIGRhdGVzIGFyZVxuICAgICAqIHBhc3NlZCwgdGhlIG1ldGhvZCBpZ25vcmVzIHRoZW0gYW5kIGFwcGxpZXMgb25seSB2YWxpZCBvbmVzLiBJbiB0aGUgY2FzZVxuICAgICAqIHRoYXQgYWxsIHRoZSBnaXZlbiBkYXRlcyBhcmUgaW52YWxpZCwgd2hpY2ggaXMgZGlzdGluZ3Vpc2hlZCBmcm9tIHBhc3NpbmdcbiAgICAgKiBubyBkYXRlcywgdGhlIG1ldGhvZCBjb25zaWRlcnMgaXQgYXMgYW4gZXJyb3IgYW5kIGxlYXZlcyB0aGUgc2VsZWN0aW9uXG4gICAgICogdW50b3VjaGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsuLi4oRGF0ZXxOdW1iZXJ8U3RyaW5nKXxBcnJheX0gW2RhdGVzXSAtIERhdGUgc3RyaW5ncywgRGF0ZVxuICAgICAqIG9iamVjdHMsIHRpbWUgdmFsdWVzIG9yIG1peCBvZiB0aG9zZSBmb3IgbmV3IHNlbGVjdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBmdW5jdGlvbiBvcHRpb25zXG4gICAgICogLSBjbGVhcjoge2Jvb2xlYW59IC0gV2hldGhlciB0byBjbGVhciB0aGUgZXhpc3Rpbmcgc2VsZWN0aW9uXG4gICAgICogICAgIGRlZnVhbHQ6IGZhbHNlXG4gICAgICogLSByZW5kZXI6IHtib29sZWFufSAtIFdoZXRoZXIgdG8gcmUtcmVuZGVyIHRoZSBwaWNrZXIgZWxlbWVudFxuICAgICAqICAgICBkZWZhdWx0OiB0cnVlXG4gICAgICogLSBhdXRvaGlkZToge2Jvb2xlYW59IC0gV2hldGhlciB0byBoaWRlIHRoZSBwaWNrZXIgZWxlbWVudCBhZnRlciByZS1yZW5kZXJcbiAgICAgKiAgICAgSWdub3JlZCB3aGVuIHVzZWQgd2l0aCByZW5kZXI6IGZhbHNlXG4gICAgICogICAgIGRlZmF1bHQ6IGNvbmZpZy5hdXRvaGlkZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInNldERhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGF0ZSgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGVzID0gW10uY29uY2F0KGFyZ3MpO1xuICAgICAgdmFyIG9wdHMgPSB7fTtcbiAgICAgIHZhciBsYXN0QXJnID0gbGFzdEl0ZW1PZihhcmdzKTtcbiAgICAgIGlmIChfdHlwZW9mKGxhc3RBcmcpID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShsYXN0QXJnKSAmJiAhKGxhc3RBcmcgaW5zdGFuY2VvZiBEYXRlKSAmJiBsYXN0QXJnKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24ob3B0cywgZGF0ZXMucG9wKCkpO1xuICAgICAgfVxuICAgICAgdmFyIGlucHV0RGF0ZXMgPSBBcnJheS5pc0FycmF5KGRhdGVzWzBdKSA/IGRhdGVzWzBdIDogZGF0ZXM7XG4gICAgICBfc2V0RGF0ZSh0aGlzLCBpbnB1dERhdGVzLCBvcHRzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHNlbGVjdGVkIGRhdGUocykgd2l0aCBpbnB1dCBmaWVsZCdzIHZhbHVlXG4gICAgICogTm90IGF2YWlsYWJsZSBvbiBpbmxpbmUgcGlja2VyXG4gICAgICpcbiAgICAgKiBUaGUgaW5wdXQgZmllbGQgd2lsbCBiZSByZWZyZXNoZWQgd2l0aCBwcm9wZXJseSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IFtvcHRpb25zXSAtIGZ1bmN0aW9uIG9wdGlvbnNcbiAgICAgKiAtIGF1dG9oaWRlOiB7Ym9vbGVhbn0gLSB3aGV0aGVyIHRvIGhpZGUgdGhlIHBpY2tlciBlbGVtZW50IGFmdGVyIHJlZnJlc2hcbiAgICAgKiAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmICh0aGlzLmlubGluZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgb3B0cyA9IHtcbiAgICAgICAgY2xlYXI6IHRydWUsXG4gICAgICAgIGF1dG9oaWRlOiAhIShvcHRpb25zICYmIG9wdGlvbnMuYXV0b2hpZGUpXG4gICAgICB9O1xuICAgICAgdmFyIGlucHV0RGF0ZXMgPSBzdHJpbmdUb0FycmF5KHRoaXMuaW5wdXRGaWVsZC52YWx1ZSwgdGhpcy5jb25maWcuZGF0ZURlbGltaXRlcik7XG4gICAgICBfc2V0RGF0ZSh0aGlzLCBpbnB1dERhdGVzLCBvcHRzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWZyZXNoIHRoZSBwaWNrZXIgZWxlbWVudCBhbmQgdGhlIGFzc29jaWF0ZWQgaW5wdXQgZmllbGRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW3RhcmdldF0gLSB0YXJnZXQgaXRlbSB3aGVuIHJlZnJlc2hpbmcgb25lIGl0ZW0gb25seVxuICAgICAqICdwaWNrZXInIG9yICdpbnB1dCdcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtmb3JjZVJlbmRlcl0gLSB3aGV0aGVyIHRvIHJlLXJlbmRlciB0aGUgcGlja2VyIGVsZW1lbnRcbiAgICAgKiByZWdhcmRsZXNzIG9mIGl0cyBzdGF0ZSBpbnN0ZWFkIG9mIG9wdGltaXplZCByZWZyZXNoXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwicmVmcmVzaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgICAgdmFyIHRhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIGZvcmNlUmVuZGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICAgIGlmICh0YXJnZXQgJiYgdHlwZW9mIHRhcmdldCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIgPSB0YXJnZXQ7XG4gICAgICAgIHRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBtb2RlO1xuICAgICAgaWYgKHRhcmdldCA9PT0gJ3BpY2tlcicpIHtcbiAgICAgICAgbW9kZSA9IDI7XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gJ2lucHV0Jykge1xuICAgICAgICBtb2RlID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGUgPSAzO1xuICAgICAgfVxuICAgICAgcmVmcmVzaFVJKHRoaXMsIG1vZGUsICFmb3JjZVJlbmRlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW50ZXIgZWRpdCBtb2RlXG4gICAgICogTm90IGF2YWlsYWJsZSBvbiBpbmxpbmUgcGlja2VyIG9yIHdoZW4gdGhlIHBpY2tlciBlbGVtZW50IGlzIGhpZGRlblxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImVudGVyRWRpdE1vZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW50ZXJFZGl0TW9kZSgpIHtcbiAgICAgIGlmICh0aGlzLmlubGluZSB8fCAhdGhpcy5waWNrZXIuYWN0aXZlIHx8IHRoaXMuZWRpdE1vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5lZGl0TW9kZSA9IHRydWU7XG4gICAgICB0aGlzLmlucHV0RmllbGQuY2xhc3NMaXN0LmFkZCgnaW4tZWRpdCcsICdib3JkZXItYmx1ZS03MDAnLCAnIWJvcmRlci1wcmltYXJ5LTcwMCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4aXQgZnJvbSBlZGl0IG1vZGVcbiAgICAgKiBOb3QgYXZhaWxhYmxlIG9uIGlubGluZSBwaWNrZXJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IFtvcHRpb25zXSAtIGZ1bmN0aW9uIG9wdGlvbnNcbiAgICAgKiAtIHVwZGF0ZToge2Jvb2xlYW59IC0gd2hldGhlciB0byBjYWxsIHVwZGF0ZSgpIGFmdGVyIGV4aXRpbmdcbiAgICAgKiAgICAgSWYgZmFsc2UsIGlucHV0IGZpZWxkIGlzIHJldmVydCB0byB0aGUgZXhpc3Rpbmcgc2VsZWN0aW9uXG4gICAgICogICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZXhpdEVkaXRNb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4aXRFZGl0TW9kZSgpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAodGhpcy5pbmxpbmUgfHwgIXRoaXMuZWRpdE1vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG9wdHMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgdXBkYXRlOiBmYWxzZVxuICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICBkZWxldGUgdGhpcy5lZGl0TW9kZTtcbiAgICAgIHRoaXMuaW5wdXRGaWVsZC5jbGFzc0xpc3QucmVtb3ZlKCdpbi1lZGl0JywgJ2JvcmRlci1ibHVlLTcwMCcsICchYm9yZGVyLXByaW1hcnktNzAwJyk7XG4gICAgICBpZiAob3B0cy51cGRhdGUpIHtcbiAgICAgICAgdGhpcy51cGRhdGUob3B0cyk7XG4gICAgICB9XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZm9ybWF0RGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXREYXRlJDEoZGF0ZSwgZm9ybWF0LCBsYW5nKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RGF0ZShkYXRlLCBmb3JtYXQsIGxhbmcgJiYgbG9jYWxlc1tsYW5nXSB8fCBsb2NhbGVzLmVuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSBkYXRlIHN0cmluZ1xuICAgICAqIEBwYXJhbSAge1N0cmluZ3xEYXRlfE51bWJlcn0gZGF0ZVN0ciAtIGRhdGUgc3RyaW5nLCBEYXRlIG9iamVjdCBvciB0aW1lXG4gICAgICogdmFsdWUgdG8gcGFyc2VcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd8T2JqZWN0fSBmb3JtYXQgLSBmb3JtYXQgc3RyaW5nIG9yIG9iamVjdCB0aGF0IGNvbnRhaW5zXG4gICAgICogdG9WYWx1ZSgpIGN1c3RvbSBwYXJzZXIsIHdob3NlIHNpZ25hdHVyZSBpc1xuICAgICAqIC0gYXJnczpcbiAgICAgKiAgIC0gZGF0ZVN0cjoge1N0cmluZ3xEYXRlfE51bWJlcn0gLSB0aGUgZGF0ZVN0ciBwYXNzZWQgdG8gdGhlIG1ldGhvZFxuICAgICAqICAgLSBmb3JtYXQ6IHtPYmplY3R9IC0gdGhlIGZvcm1hdCBvYmplY3QgcGFzc2VkIHRvIHRoZSBtZXRob2RcbiAgICAgKiAgIC0gbG9jYWxlOiB7T2JqZWN0fSAtIGxvY2FsZSBmb3IgdGhlIGxhbmd1YWdlIHNwZWNpZmllZCBieSBgbGFuZ2BcbiAgICAgKiAtIHJldHVybjpcbiAgICAgKiAgICAge0RhdGV8TnVtYmVyfSBwYXJzZWQgZGF0ZSBvciBpdHMgdGltZSB2YWx1ZVxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gW2xhbmc9ZW5dIC0gbGFuZ3VhZ2UgY29kZSBmb3IgdGhlIGxvY2FsZSB0byB1c2VcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRpbWUgdmFsdWUgb2YgcGFyc2VkIGRhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJwYXJzZURhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VEYXRlJDEoZGF0ZVN0ciwgZm9ybWF0LCBsYW5nKSB7XG4gICAgICByZXR1cm4gcGFyc2VEYXRlKGRhdGVTdHIsIGZvcm1hdCwgbGFuZyAmJiBsb2NhbGVzW2xhbmddIHx8IGxvY2FsZXMuZW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtPYmplY3R9IC0gSW5zdGFsbGVkIGxvY2FsZXMgaW4gYFtsYW5ndWFnZUNvZGVdOiBsb2NhbGVPYmplY3RgIGZvcm1hdFxuICAgICAqIGVuYDpfRW5nbGlzaCAoVVMpXyBpcyBwcmUtaW5zdGFsbGVkLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImxvY2FsZXNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBsb2NhbGVzO1xuICAgIH1cbiAgfV0pO1xufSgpO1xuXG4vLyBmaWx0ZXIgb3V0IHRoZSBjb25maWcgb3B0aW9ucyBpbmFwcHJvcHJpdGUgdG8gcGFzcyB0byBEYXRlcGlja2VyXG5mdW5jdGlvbiBmaWx0ZXJPcHRpb25zKG9wdGlvbnMpIHtcbiAgdmFyIG5ld09wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgZGVsZXRlIG5ld09wdHMuaW5wdXRzO1xuICBkZWxldGUgbmV3T3B0cy5hbGxvd09uZVNpZGVkUmFuZ2U7XG4gIGRlbGV0ZSBuZXdPcHRzLm1heE51bWJlck9mRGF0ZXM7IC8vIHRvIGVuc3VyZSBlYWNoIGRhdGVwaWNrZXIgaGFuZGxlcyBhIHNpbmdsZSBkYXRlXG5cbiAgcmV0dXJuIG5ld09wdHM7XG59XG5mdW5jdGlvbiBzZXR1cERhdGVwaWNrZXIocmFuZ2VwaWNrZXIsIGNoYW5nZURhdGVMaXN0ZW5lciwgZWwsIG9wdGlvbnMpIHtcbiAgcmVnaXN0ZXJMaXN0ZW5lcnMocmFuZ2VwaWNrZXIsIFtbZWwsICdjaGFuZ2VEYXRlJywgY2hhbmdlRGF0ZUxpc3RlbmVyXV0pO1xuICBuZXcgRGF0ZXBpY2tlcihlbCwgb3B0aW9ucywgcmFuZ2VwaWNrZXIpO1xufVxuZnVuY3Rpb24gb25DaGFuZ2VEYXRlKHJhbmdlcGlja2VyLCBldikge1xuICAvLyB0byBwcmV2ZW50IGJvdGggZGF0ZXBpY2tlcnMgdHJpZ2dlciB0aGUgb3RoZXIgc2lkZSdzIHVwZGF0ZSBlYWNoIG90aGVyXG4gIGlmIChyYW5nZXBpY2tlci5fdXBkYXRpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcmFuZ2VwaWNrZXIuX3VwZGF0aW5nID0gdHJ1ZTtcbiAgdmFyIHRhcmdldCA9IGV2LnRhcmdldDtcbiAgaWYgKHRhcmdldC5kYXRlcGlja2VyID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGRhdGVwaWNrZXJzID0gcmFuZ2VwaWNrZXIuZGF0ZXBpY2tlcnM7XG4gIHZhciBzZXREYXRlT3B0aW9ucyA9IHtcbiAgICByZW5kZXI6IGZhbHNlXG4gIH07XG4gIHZhciBjaGFuZ2VkU2lkZSA9IHJhbmdlcGlja2VyLmlucHV0cy5pbmRleE9mKHRhcmdldCk7XG4gIHZhciBvdGhlclNpZGUgPSBjaGFuZ2VkU2lkZSA9PT0gMCA/IDEgOiAwO1xuICB2YXIgY2hhbmdlZERhdGUgPSBkYXRlcGlja2Vyc1tjaGFuZ2VkU2lkZV0uZGF0ZXNbMF07XG4gIHZhciBvdGhlckRhdGUgPSBkYXRlcGlja2Vyc1tvdGhlclNpZGVdLmRhdGVzWzBdO1xuICBpZiAoY2hhbmdlZERhdGUgIT09IHVuZGVmaW5lZCAmJiBvdGhlckRhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIGlmIHRoZSBzdGFydCBvZiB0aGUgcmFuZ2UgPiB0aGUgZW5kLCBzd2FwIHRoZW1cbiAgICBpZiAoY2hhbmdlZFNpZGUgPT09IDAgJiYgY2hhbmdlZERhdGUgPiBvdGhlckRhdGUpIHtcbiAgICAgIGRhdGVwaWNrZXJzWzBdLnNldERhdGUob3RoZXJEYXRlLCBzZXREYXRlT3B0aW9ucyk7XG4gICAgICBkYXRlcGlja2Vyc1sxXS5zZXREYXRlKGNoYW5nZWREYXRlLCBzZXREYXRlT3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChjaGFuZ2VkU2lkZSA9PT0gMSAmJiBjaGFuZ2VkRGF0ZSA8IG90aGVyRGF0ZSkge1xuICAgICAgZGF0ZXBpY2tlcnNbMF0uc2V0RGF0ZShjaGFuZ2VkRGF0ZSwgc2V0RGF0ZU9wdGlvbnMpO1xuICAgICAgZGF0ZXBpY2tlcnNbMV0uc2V0RGF0ZShvdGhlckRhdGUsIHNldERhdGVPcHRpb25zKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIXJhbmdlcGlja2VyLmFsbG93T25lU2lkZWRSYW5nZSkge1xuICAgIC8vIHRvIHByZXZlbnQgdGhlIHJhbmdlIGZyb20gYmVjb21pbmcgb25lLXNpZGVkLCBjb3B5IGNoYW5nZWQgc2lkZSdzXG4gICAgLy8gc2VsZWN0aW9uIChubyBtYXR0ZXIgaWYgaXQncyBlbXB0eSkgdG8gdGhlIG90aGVyIHNpZGVcbiAgICBpZiAoY2hhbmdlZERhdGUgIT09IHVuZGVmaW5lZCB8fCBvdGhlckRhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc2V0RGF0ZU9wdGlvbnMuY2xlYXIgPSB0cnVlO1xuICAgICAgZGF0ZXBpY2tlcnNbb3RoZXJTaWRlXS5zZXREYXRlKGRhdGVwaWNrZXJzW2NoYW5nZWRTaWRlXS5kYXRlcywgc2V0RGF0ZU9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICBkYXRlcGlja2Vyc1swXS5waWNrZXIudXBkYXRlKCkucmVuZGVyKCk7XG4gIGRhdGVwaWNrZXJzWzFdLnBpY2tlci51cGRhdGUoKS5yZW5kZXIoKTtcbiAgZGVsZXRlIHJhbmdlcGlja2VyLl91cGRhdGluZztcbn1cblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBkYXRlIHJhbmdlIHBpY2tlclxuICovXG52YXIgRGF0ZVJhbmdlUGlja2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIGRhdGUgcmFuZ2UgcGlja2VyXG4gICAqIEBwYXJhbSAge0VsZW1lbnR9IGVsZW1lbnQgLSBlbGVtZW50IHRvIGJpbmQgYSBkYXRlIHJhbmdlIHBpY2tlclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IFtvcHRpb25zXSAtIGNvbmZpZyBvcHRpb25zXG4gICAqL1xuICBmdW5jdGlvbiBEYXRlUmFuZ2VQaWNrZXIoZWxlbWVudCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0ZVJhbmdlUGlja2VyKTtcbiAgICB2YXIgaW5wdXRzID0gQXJyYXkuaXNBcnJheShvcHRpb25zLmlucHV0cykgPyBvcHRpb25zLmlucHV0cyA6IEFycmF5LmZyb20oZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpKTtcbiAgICBpZiAoaW5wdXRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxlbWVudC5yYW5nZXBpY2tlciA9IHRoaXM7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmlucHV0cyA9IGlucHV0cy5zbGljZSgwLCAyKTtcbiAgICB0aGlzLmFsbG93T25lU2lkZWRSYW5nZSA9ICEhb3B0aW9ucy5hbGxvd09uZVNpZGVkUmFuZ2U7XG4gICAgdmFyIGNoYW5nZURhdGVMaXN0ZW5lciA9IG9uQ2hhbmdlRGF0ZS5iaW5kKG51bGwsIHRoaXMpO1xuICAgIHZhciBjbGVhbk9wdGlvbnMgPSBmaWx0ZXJPcHRpb25zKG9wdGlvbnMpO1xuICAgIC8vIGluIG9yZGVyIGZvciBpbml0aWFsIGRhdGUgc2V0dXAgdG8gd29yayByaWdodCB3aGVuIHBjaWNMdmVsID4gMCxcbiAgICAvLyBsZXQgRGF0ZXBpY2tlciBjb25zdHJ1Y3RvciBhZGQgdGhlIGluc3RhbmNlIHRvIHRoZSByYW5nZXBpY2tlclxuICAgIHZhciBkYXRlcGlja2VycyA9IFtdO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZGF0ZXBpY2tlcnMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIGRhdGVwaWNrZXJzO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHNldHVwRGF0ZXBpY2tlcih0aGlzLCBjaGFuZ2VEYXRlTGlzdGVuZXIsIHRoaXMuaW5wdXRzWzBdLCBjbGVhbk9wdGlvbnMpO1xuICAgIHNldHVwRGF0ZXBpY2tlcih0aGlzLCBjaGFuZ2VEYXRlTGlzdGVuZXIsIHRoaXMuaW5wdXRzWzFdLCBjbGVhbk9wdGlvbnMpO1xuICAgIE9iamVjdC5mcmVlemUoZGF0ZXBpY2tlcnMpO1xuICAgIC8vIG5vcm1hbGl6ZSB0aGUgcmFuZ2UgaWYgaW5pdGFsIGRhdGVzIGFyZSBnaXZlblxuICAgIGlmIChkYXRlcGlja2Vyc1swXS5kYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICBvbkNoYW5nZURhdGUodGhpcywge1xuICAgICAgICB0YXJnZXQ6IHRoaXMuaW5wdXRzWzBdXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGRhdGVwaWNrZXJzWzFdLmRhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIG9uQ2hhbmdlRGF0ZSh0aGlzLCB7XG4gICAgICAgIHRhcmdldDogdGhpcy5pbnB1dHNbMV1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXl9IC0gc2VsZWN0ZWQgZGF0ZSBvZiB0aGUgbGlua2VkIGRhdGUgcGlja2Vyc1xuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhEYXRlUmFuZ2VQaWNrZXIsIFt7XG4gICAga2V5OiBcImRhdGVzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kYXRlcGlja2Vycy5sZW5ndGggPT09IDIgPyBbdGhpcy5kYXRlcGlja2Vyc1swXS5kYXRlc1swXSwgdGhpcy5kYXRlcGlja2Vyc1sxXS5kYXRlc1swXV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IG5ldyB2YWx1ZXMgdG8gdGhlIGNvbmZpZyBvcHRpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb25maWcgb3B0aW9ucyB0byB1cGRhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJzZXRPcHRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgdGhpcy5hbGxvd09uZVNpZGVkUmFuZ2UgPSAhIW9wdGlvbnMuYWxsb3dPbmVTaWRlZFJhbmdlO1xuICAgICAgdmFyIGNsZWFuT3B0aW9ucyA9IGZpbHRlck9wdGlvbnMob3B0aW9ucyk7XG4gICAgICB0aGlzLmRhdGVwaWNrZXJzWzBdLnNldE9wdGlvbnMoY2xlYW5PcHRpb25zKTtcbiAgICAgIHRoaXMuZGF0ZXBpY2tlcnNbMV0uc2V0T3B0aW9ucyhjbGVhbk9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIERhdGVSYW5nZVBpY2tlciBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge0RhdGVSYW5nZVBpY2tlcn0gLSB0aGUgaW5zdGFuY2UgZGVzdHJveWVkXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5kYXRlcGlja2Vyc1swXS5kZXN0cm95KCk7XG4gICAgICB0aGlzLmRhdGVwaWNrZXJzWzFdLmRlc3Ryb3koKTtcbiAgICAgIHVucmVnaXN0ZXJMaXN0ZW5lcnModGhpcyk7XG4gICAgICBkZWxldGUgdGhpcy5lbGVtZW50LnJhbmdlcGlja2VyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc3RhcnQgYW5kIGVuZCBkYXRlcyBvZiB0aGUgZGF0ZSByYW5nZVxuICAgICAqXG4gICAgICogVGhlIG1ldGhvZCByZXR1cm5zIERhdGUgb2JqZWN0cyBieSBkZWZhdWx0LiBJZiBmb3JtYXQgc3RyaW5nIGlzIHBhc3NlZCxcbiAgICAgKiBpdCByZXR1cm5zIGRhdGUgc3RyaW5ncyBmb3JtYXR0ZWQgaW4gZ2l2ZW4gZm9ybWF0LlxuICAgICAqIFRoZSByZXN1bHQgYXJyYXkgYWx3YXlzIGNvbnRhaW5zIDIgaXRlbXMgKHN0YXJ0IGRhdGUvZW5kIGRhdGUpIGFuZFxuICAgICAqIHVuZGVmaW5lZCBpcyB1c2VkIGZvciB1bnNlbGVjdGVkIHNpZGUuIChlLmcuIElmIG5vbmUgaXMgc2VsZWN0ZWQsXG4gICAgICogdGhlIHJlc3VsdCB3aWxsIGJlIFt1bmRlZmluZWQsIHVuZGVmaW5lZF0uIElmIG9ubHkgdGhlIGVuZCBkYXRlIGlzIHNldFxuICAgICAqIHdoZW4gYWxsb3dPbmVTaWRlZFJhbmdlIGNvbmZpZyBvcHRpb24gaXMgdHJ1ZSwgW3VuZGVmaW5lZCwgZW5kRGF0ZV0gd2lsbFxuICAgICAqIGJlIHJldHVybmVkLilcbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gW2Zvcm1hdF0gLSBGb3JtYXQgc3RyaW5nIHRvIHN0cmluZ2lmeSB0aGUgZGF0ZXNcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gLSBTdGFydCBhbmQgZW5kIGRhdGVzXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RGF0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0ZXMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIGZvcm1hdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIGNhbGxiYWNrID0gZm9ybWF0ID8gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0LCBfdGhpcy5kYXRlcGlja2Vyc1swXS5jb25maWcubG9jYWxlKTtcbiAgICAgIH0gOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHRoaXMuZGF0ZXMubWFwKGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgIHJldHVybiBkYXRlID09PSB1bmRlZmluZWQgPyBkYXRlIDogY2FsbGJhY2soZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHN0YXJ0IGFuZCBlbmQgZGF0ZXMgb2YgdGhlIGRhdGUgcmFuZ2VcbiAgICAgKlxuICAgICAqIFRoZSBtZXRob2QgY2FsbHMgZGF0ZXBpY2tlci5zZXREYXRlKCkgaW50ZXJuYWxseSB1c2luZyBlYWNoIG9mIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpbiBzdGFydOKGkmVuZCBvcmRlci5cbiAgICAgKlxuICAgICAqIFdoZW4gYSBjbGVhcjogdHJ1ZSBvcHRpb24gb2JqZWN0IGlzIHBhc3NlZCBpbnN0ZWFkIG9mIGEgZGF0ZSwgdGhlIG1ldGhvZFxuICAgICAqIGNsZWFycyB0aGUgZGF0ZS5cbiAgICAgKlxuICAgICAqIElmIGFuIGludmFsaWQgZGF0ZSwgdGhlIHNhbWUgZGF0ZSBhcyB0aGUgY3VycmVudCBvbmUgb3IgYW4gb3B0aW9uIG9iamVjdFxuICAgICAqIHdpdGhvdXQgY2xlYXI6IHRydWUgaXMgcGFzc2VkLCB0aGUgbWV0aG9kIGNvbnNpZGVycyB0aGF0IGFyZ3VtZW50IGFzIGFuXG4gICAgICogXCJpbmVmZmVjdGl2ZVwiIGFyZ3VtZW50IGJlY2F1c2UgY2FsbGluZyBkYXRlcGlja2VyLnNldERhdGUoKSB3aXRoIHRob3NlXG4gICAgICogdmFsdWVzIG1ha2VzIG5vIGNoYW5nZXMgdG8gdGhlIGRhdGUgc2VsZWN0aW9uLlxuICAgICAqXG4gICAgICogV2hlbiB0aGUgYWxsb3dPbmVTaWRlZFJhbmdlIGNvbmZpZyBvcHRpb24gaXMgZmFsc2UsIHBhc3Npbmcge2NsZWFyOiB0cnVlfVxuICAgICAqIHRvIGNsZWFyIHRoZSByYW5nZSB3b3JrcyBvbmx5IHdoZW4gaXQgaXMgZG9uZSB0byB0aGUgbGFzdCBlZmZlY3RpdmVcbiAgICAgKiBhcmd1bWVudCAoaW4gb3RoZXIgd29yZHMsIHBhc3NlZCB0byByYW5nZUVuZCBvciB0byByYW5nZVN0YXJ0IGFsb25nIHdpdGhcbiAgICAgKiBpbmVmZmVjdGl2ZSByYW5nZUVuZCkuIFRoaXMgaXMgYmVjYXVzZSB3aGVuIHRoZSBkYXRlIHJhbmdlIGlzIGNoYW5nZWQsXG4gICAgICogaXQgZ2V0cyBub3JtYWxpemVkIGJhc2VkIG9uIHRoZSBsYXN0IGNoYW5nZSBhdCB0aGUgZW5kIG9mIHRoZSBjaGFuZ2luZ1xuICAgICAqIHByb2Nlc3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0RhdGV8TnVtYmVyfFN0cmluZ3xPYmplY3R9IHJhbmdlU3RhcnQgLSBTdGFydCBkYXRlIG9mIHRoZSByYW5nZVxuICAgICAqIG9yIHtjbGVhcjogdHJ1ZX0gdG8gY2xlYXIgdGhlIGRhdGVcbiAgICAgKiBAcGFyYW0ge0RhdGV8TnVtYmVyfFN0cmluZ3xPYmplY3R9IHJhbmdlRW5kIC0gRW5kIGRhdGUgb2YgdGhlIHJhbmdlXG4gICAgICogb3Ige2NsZWFyOiB0cnVlfSB0byBjbGVhciB0aGUgZGF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInNldERhdGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldERhdGVzKHJhbmdlU3RhcnQsIHJhbmdlRW5kKSB7XG4gICAgICB2YXIgX3RoaXMkZGF0ZXBpY2tlcnMgPSBfc2xpY2VkVG9BcnJheSh0aGlzLmRhdGVwaWNrZXJzLCAyKSxcbiAgICAgICAgZGF0ZXBpY2tlcjAgPSBfdGhpcyRkYXRlcGlja2Vyc1swXSxcbiAgICAgICAgZGF0ZXBpY2tlcjEgPSBfdGhpcyRkYXRlcGlja2Vyc1sxXTtcbiAgICAgIHZhciBvcmlnRGF0ZXMgPSB0aGlzLmRhdGVzO1xuXG4gICAgICAvLyBJZiByYW5nZSBub3JtYWxpemF0aW9uIHJ1bnMgb24gZXZlcnkgY2hhbmdlLCB3ZSBjYW4ndCBzZXQgYSBuZXcgcmFuZ2VcbiAgICAgIC8vIHRoYXQgc3RhcnRzIGFmdGVyIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgcmFuZ2UgY29ycmVjdGx5IGJlY2F1c2UgdGhlXG4gICAgICAvLyBub3JtYWxpemF0aW9uIHByb2Nlc3Mgc3dhcHMgc3RhcnTihpTvuI5lbmQgcmlnaHQgYWZ0ZXIgc2V0dGluZyB0aGUgbmV3IHN0YXJ0XG4gICAgICAvLyBkYXRlLiBUbyBwcmV2ZW50IHRoaXMsIHRoZSBub3JtYWxpemF0aW9uIHByb2Nlc3MgbmVlZHMgdG8gcnVuIG9uY2UgYWZ0ZXJcbiAgICAgIC8vIGJvdGggb2YgdGhlIG5ldyBkYXRlcyBhcmUgc2V0LlxuICAgICAgdGhpcy5fdXBkYXRpbmcgPSB0cnVlO1xuICAgICAgZGF0ZXBpY2tlcjAuc2V0RGF0ZShyYW5nZVN0YXJ0KTtcbiAgICAgIGRhdGVwaWNrZXIxLnNldERhdGUocmFuZ2VFbmQpO1xuICAgICAgZGVsZXRlIHRoaXMuX3VwZGF0aW5nO1xuICAgICAgaWYgKGRhdGVwaWNrZXIxLmRhdGVzWzBdICE9PSBvcmlnRGF0ZXNbMV0pIHtcbiAgICAgICAgb25DaGFuZ2VEYXRlKHRoaXMsIHtcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMuaW5wdXRzWzFdXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChkYXRlcGlja2VyMC5kYXRlc1swXSAhPT0gb3JpZ0RhdGVzWzBdKSB7XG4gICAgICAgIG9uQ2hhbmdlRGF0ZSh0aGlzLCB7XG4gICAgICAgICAgdGFyZ2V0OiB0aGlzLmlucHV0c1swXVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcbn0oKTtcblxuZXhwb3J0cy5EYXRlUmFuZ2VQaWNrZXIgPSBEYXRlUmFuZ2VQaWNrZXI7XG5leHBvcnRzLkRhdGVwaWNrZXIgPSBEYXRlcGlja2VyO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiAqL1xuaW1wb3J0IHR5cGUgeyBBY2NvcmRpb25JdGVtLCBBY2NvcmRpb25PcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEluc3RhbmNlT3B0aW9ucyB9IGZyb20gJy4uLy4uL2RvbS90eXBlcyc7XG5pbXBvcnQgeyBBY2NvcmRpb25JbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgaW5zdGFuY2VzIGZyb20gJy4uLy4uL2RvbS9pbnN0YW5jZXMnO1xuXG5jb25zdCBEZWZhdWx0OiBBY2NvcmRpb25PcHRpb25zID0ge1xuICAgIGFsd2F5c09wZW46IGZhbHNlLFxuICAgIGFjdGl2ZUNsYXNzZXM6ICdiZy1ncmF5LTEwMCBkYXJrOmJnLWdyYXktODAwIHRleHQtZ3JheS05MDAgZGFyazp0ZXh0LXdoaXRlJyxcbiAgICBpbmFjdGl2ZUNsYXNzZXM6ICd0ZXh0LWdyYXktNTAwIGRhcms6dGV4dC1ncmF5LTQwMCcsXG4gICAgb25PcGVuOiAoKSA9PiB7fSxcbiAgICBvbkNsb3NlOiAoKSA9PiB7fSxcbiAgICBvblRvZ2dsZTogKCkgPT4ge30sXG59O1xuXG5jb25zdCBEZWZhdWx0SW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSB7XG4gICAgaWQ6IG51bGwsXG4gICAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5jbGFzcyBBY2NvcmRpb24gaW1wbGVtZW50cyBBY2NvcmRpb25JbnRlcmZhY2Uge1xuICAgIF9pbnN0YW5jZUlkOiBzdHJpbmc7XG4gICAgX2FjY29yZGlvbkVsOiBIVE1MRWxlbWVudDtcbiAgICBfaXRlbXM6IEFjY29yZGlvbkl0ZW1bXTtcbiAgICBfb3B0aW9uczogQWNjb3JkaW9uT3B0aW9ucztcbiAgICBfY2xpY2tIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF9pbml0aWFsaXplZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBhY2NvcmRpb25FbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgaXRlbXM6IEFjY29yZGlvbkl0ZW1bXSA9IFtdLFxuICAgICAgICBvcHRpb25zOiBBY2NvcmRpb25PcHRpb25zID0gRGVmYXVsdCxcbiAgICAgICAgaW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSBEZWZhdWx0SW5zdGFuY2VPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlSWQgPSBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgID8gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA6IGFjY29yZGlvbkVsLmlkO1xuICAgICAgICB0aGlzLl9hY2NvcmRpb25FbCA9IGFjY29yZGlvbkVsO1xuICAgICAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICBpbnN0YW5jZXMuYWRkSW5zdGFuY2UoXG4gICAgICAgICAgICAnQWNjb3JkaW9uJyxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZUlkLFxuICAgICAgICAgICAgaW5zdGFuY2VPcHRpb25zLm92ZXJyaWRlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2l0ZW1zLmxlbmd0aCAmJiAhdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIC8vIHNob3cgYWNjb3JkaW9uIGl0ZW0gYmFzZWQgb24gY2xpY2tcbiAgICAgICAgICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuKGl0ZW0uaWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGNsaWNrSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGUoaXRlbS5pZCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGl0ZW0udHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBjbGlja0hhbmRsZXIgaW4gYSBwcm9wZXJ0eSBvZiB0aGUgaXRlbSBmb3IgcmVtb3ZhbCBsYXRlclxuICAgICAgICAgICAgICAgIGl0ZW0uY2xpY2tIYW5kbGVyID0gY2xpY2tIYW5kbGVyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5faXRlbXMubGVuZ3RoICYmIHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS50cmlnZ2VyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBpdGVtLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cCBieSBkZWxldGluZyB0aGUgY2xpY2tIYW5kbGVyIHByb3BlcnR5IGZyb20gdGhlIGl0ZW1cbiAgICAgICAgICAgICAgICBkZWxldGUgaXRlbS5jbGlja0hhbmRsZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgaW5zdGFuY2VzLnJlbW92ZUluc3RhbmNlKCdBY2NvcmRpb24nLCB0aGlzLl9pbnN0YW5jZUlkKTtcbiAgICB9XG5cbiAgICBkZXN0cm95QW5kUmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnJlbW92ZUluc3RhbmNlKCk7XG4gICAgfVxuXG4gICAgZ2V0SXRlbShpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uaWQgPT09IGlkKVswXTtcbiAgICB9XG5cbiAgICBvcGVuKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZ2V0SXRlbShpZCk7XG5cbiAgICAgICAgLy8gZG9uJ3QgaGlkZSBvdGhlciBhY2NvcmRpb25zIGlmIGFsd2F5cyBvcGVuXG4gICAgICAgIGlmICghdGhpcy5fb3B0aW9ucy5hbHdheXNPcGVuKSB7XG4gICAgICAgICAgICB0aGlzLl9pdGVtcy5tYXAoKGkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaSAhPT0gaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpLnRyaWdnZXJFbC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5fb3B0aW9ucy5hY3RpdmVDbGFzc2VzLnNwbGl0KCcgJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaS50cmlnZ2VyRWwuY2xhc3NMaXN0LmFkZChcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuX29wdGlvbnMuaW5hY3RpdmVDbGFzc2VzLnNwbGl0KCcgJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaS50YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgaS50cmlnZ2VyRWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICAgICAgICAgIGkuYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcm90YXRlIGljb24gaWYgc2V0XG4gICAgICAgICAgICAgICAgICAgIGlmIChpLmljb25FbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaS5pY29uRWwuY2xhc3NMaXN0LmFkZCgncm90YXRlLTE4MCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93IGFjdGl2ZSBpdGVtXG4gICAgICAgIGl0ZW0udHJpZ2dlckVsLmNsYXNzTGlzdC5hZGQoLi4udGhpcy5fb3B0aW9ucy5hY3RpdmVDbGFzc2VzLnNwbGl0KCcgJykpO1xuICAgICAgICBpdGVtLnRyaWdnZXJFbC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICAgICAgLi4udGhpcy5fb3B0aW9ucy5pbmFjdGl2ZUNsYXNzZXMuc3BsaXQoJyAnKVxuICAgICAgICApO1xuICAgICAgICBpdGVtLnRyaWdnZXJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgICBpdGVtLnRhcmdldEVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgLy8gcm90YXRlIGljb24gaWYgc2V0XG4gICAgICAgIGlmIChpdGVtLmljb25FbCkge1xuICAgICAgICAgICAgaXRlbS5pY29uRWwuY2xhc3NMaXN0LnJlbW92ZSgncm90YXRlLTE4MCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbk9wZW4odGhpcywgaXRlbSk7XG4gICAgfVxuXG4gICAgdG9nZ2xlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZ2V0SXRlbShpZCk7XG5cbiAgICAgICAgaWYgKGl0ZW0uYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKGlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3BlbihpZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uVG9nZ2xlKHRoaXMsIGl0ZW0pO1xuICAgIH1cblxuICAgIGNsb3NlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZ2V0SXRlbShpZCk7XG5cbiAgICAgICAgaXRlbS50cmlnZ2VyRWwuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgICAgICAgIC4uLnRoaXMuX29wdGlvbnMuYWN0aXZlQ2xhc3Nlcy5zcGxpdCgnICcpXG4gICAgICAgICk7XG4gICAgICAgIGl0ZW0udHJpZ2dlckVsLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgICAgICAuLi50aGlzLl9vcHRpb25zLmluYWN0aXZlQ2xhc3Nlcy5zcGxpdCgnICcpXG4gICAgICAgICk7XG4gICAgICAgIGl0ZW0udGFyZ2V0RWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIGl0ZW0udHJpZ2dlckVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgICBpdGVtLmFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIHJvdGF0ZSBpY29uIGlmIHNldFxuICAgICAgICBpZiAoaXRlbS5pY29uRWwpIHtcbiAgICAgICAgICAgIGl0ZW0uaWNvbkVsLmNsYXNzTGlzdC5hZGQoJ3JvdGF0ZS0xODAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25DbG9zZSh0aGlzLCBpdGVtKTtcbiAgICB9XG5cbiAgICB1cGRhdGVPbk9wZW4oY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbk9wZW4gPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPbkNsb3NlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25DbG9zZSA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uVG9nZ2xlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25Ub2dnbGUgPSBjYWxsYmFjaztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0QWNjb3JkaW9ucygpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1hY2NvcmRpb25dJykuZm9yRWFjaCgoJGFjY29yZGlvbkVsKSA9PiB7XG4gICAgICAgIGNvbnN0IGFsd2F5c09wZW4gPSAkYWNjb3JkaW9uRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWFjY29yZGlvbicpO1xuICAgICAgICBjb25zdCBhY3RpdmVDbGFzc2VzID0gJGFjY29yZGlvbkVsLmdldEF0dHJpYnV0ZSgnZGF0YS1hY3RpdmUtY2xhc3NlcycpO1xuICAgICAgICBjb25zdCBpbmFjdGl2ZUNsYXNzZXMgPSAkYWNjb3JkaW9uRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgJ2RhdGEtaW5hY3RpdmUtY2xhc3NlcydcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBpdGVtcyA9IFtdIGFzIEFjY29yZGlvbkl0ZW1bXTtcbiAgICAgICAgJGFjY29yZGlvbkVsXG4gICAgICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtYWNjb3JkaW9uLXRhcmdldF0nKVxuICAgICAgICAgICAgLmZvckVhY2goKCR0cmlnZ2VyRWwpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBDb25zaWRlciBvbmx5IGl0ZW1zIHRoYXQgZGlyZWN0bHkgYmVsb25nIHRvICRhY2NvcmRpb25FbFxuICAgICAgICAgICAgICAgIC8vICh0byBtYWtlIG5lc3RlZCBhY2NvcmRpb25zIHdvcmspLlxuICAgICAgICAgICAgICAgIGlmICgkdHJpZ2dlckVsLmNsb3Nlc3QoJ1tkYXRhLWFjY29yZGlvbl0nKSA9PT0gJGFjY29yZGlvbkVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYWNjb3JkaW9uLXRhcmdldCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckVsOiAkdHJpZ2dlckVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYWNjb3JkaW9uLXRhcmdldCcpXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbkVsOiAkdHJpZ2dlckVsLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tkYXRhLWFjY29yZGlvbi1pY29uXSdcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9IGFzIEFjY29yZGlvbkl0ZW07XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IEFjY29yZGlvbigkYWNjb3JkaW9uRWwgYXMgSFRNTEVsZW1lbnQsIGl0ZW1zLCB7XG4gICAgICAgICAgICBhbHdheXNPcGVuOiBhbHdheXNPcGVuID09PSAnb3BlbicgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgICBhY3RpdmVDbGFzc2VzOiBhY3RpdmVDbGFzc2VzXG4gICAgICAgICAgICAgICAgPyBhY3RpdmVDbGFzc2VzXG4gICAgICAgICAgICAgICAgOiBEZWZhdWx0LmFjdGl2ZUNsYXNzZXMsXG4gICAgICAgICAgICBpbmFjdGl2ZUNsYXNzZXM6IGluYWN0aXZlQ2xhc3Nlc1xuICAgICAgICAgICAgICAgID8gaW5hY3RpdmVDbGFzc2VzXG4gICAgICAgICAgICAgICAgOiBEZWZhdWx0LmluYWN0aXZlQ2xhc3NlcyxcbiAgICAgICAgfSBhcyBBY2NvcmRpb25PcHRpb25zKTtcbiAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LkFjY29yZGlvbiA9IEFjY29yZGlvbjtcbiAgICB3aW5kb3cuaW5pdEFjY29yZGlvbnMgPSBpbml0QWNjb3JkaW9ucztcbn1cblxuZXhwb3J0IGRlZmF1bHQgQWNjb3JkaW9uO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiAqL1xuaW1wb3J0IHR5cGUge1xuICAgIENhcm91c2VsT3B0aW9ucyxcbiAgICBDYXJvdXNlbEl0ZW0sXG4gICAgSW5kaWNhdG9ySXRlbSxcbiAgICBSb3RhdGlvbkl0ZW1zLFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSW5zdGFuY2VPcHRpb25zIH0gZnJvbSAnLi4vLi4vZG9tL3R5cGVzJztcbmltcG9ydCB7IENhcm91c2VsSW50ZXJmYWNlIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IGluc3RhbmNlcyBmcm9tICcuLi8uLi9kb20vaW5zdGFuY2VzJztcblxuY29uc3QgRGVmYXVsdDogQ2Fyb3VzZWxPcHRpb25zID0ge1xuICAgIGRlZmF1bHRQb3NpdGlvbjogMCxcbiAgICBpbmRpY2F0b3JzOiB7XG4gICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgYWN0aXZlQ2xhc3NlczogJ2JnLXdoaXRlIGRhcms6YmctZ3JheS04MDAnLFxuICAgICAgICBpbmFjdGl2ZUNsYXNzZXM6XG4gICAgICAgICAgICAnYmctd2hpdGUvNTAgZGFyazpiZy1ncmF5LTgwMC81MCBob3ZlcjpiZy13aGl0ZSBkYXJrOmhvdmVyOmJnLWdyYXktODAwJyxcbiAgICB9LFxuICAgIGludGVydmFsOiAzMDAwLFxuICAgIG9uTmV4dDogKCkgPT4ge30sXG4gICAgb25QcmV2OiAoKSA9PiB7fSxcbiAgICBvbkNoYW5nZTogKCkgPT4ge30sXG59O1xuXG5jb25zdCBEZWZhdWx0SW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSB7XG4gICAgaWQ6IG51bGwsXG4gICAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5jbGFzcyBDYXJvdXNlbCBpbXBsZW1lbnRzIENhcm91c2VsSW50ZXJmYWNlIHtcbiAgICBfaW5zdGFuY2VJZDogc3RyaW5nO1xuICAgIF9jYXJvdXNlbEVsOiBIVE1MRWxlbWVudDtcbiAgICBfaXRlbXM6IENhcm91c2VsSXRlbVtdO1xuICAgIF9pbmRpY2F0b3JzOiBJbmRpY2F0b3JJdGVtW107XG4gICAgX2FjdGl2ZUl0ZW06IENhcm91c2VsSXRlbTtcbiAgICBfaW50ZXJ2YWxEdXJhdGlvbjogbnVtYmVyO1xuICAgIF9pbnRlcnZhbEluc3RhbmNlOiBudW1iZXI7XG4gICAgX29wdGlvbnM6IENhcm91c2VsT3B0aW9ucztcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgY2Fyb3VzZWxFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgaXRlbXM6IENhcm91c2VsSXRlbVtdID0gW10sXG4gICAgICAgIG9wdGlvbnM6IENhcm91c2VsT3B0aW9ucyA9IERlZmF1bHQsXG4gICAgICAgIGluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0gRGVmYXVsdEluc3RhbmNlT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZUlkID0gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA/IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgOiBjYXJvdXNlbEVsLmlkO1xuICAgICAgICB0aGlzLl9jYXJvdXNlbEVsID0gY2Fyb3VzZWxFbDtcbiAgICAgICAgdGhpcy5faXRlbXMgPSBpdGVtcztcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLkRlZmF1bHQsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaW5kaWNhdG9yczogeyAuLi5EZWZhdWx0LmluZGljYXRvcnMsIC4uLm9wdGlvbnMuaW5kaWNhdG9ycyB9LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9hY3RpdmVJdGVtID0gdGhpcy5nZXRJdGVtKHRoaXMuX29wdGlvbnMuZGVmYXVsdFBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5faW5kaWNhdG9ycyA9IHRoaXMuX29wdGlvbnMuaW5kaWNhdG9ycy5pdGVtcztcbiAgICAgICAgdGhpcy5faW50ZXJ2YWxEdXJhdGlvbiA9IHRoaXMuX29wdGlvbnMuaW50ZXJ2YWw7XG4gICAgICAgIHRoaXMuX2ludGVydmFsSW5zdGFuY2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgaW5zdGFuY2VzLmFkZEluc3RhbmNlKFxuICAgICAgICAgICAgJ0Nhcm91c2VsJyxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZUlkLFxuICAgICAgICAgICAgaW5zdGFuY2VPcHRpb25zLm92ZXJyaWRlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaW5pdGlhbGl6ZSBjYXJvdXNlbCBhbmQgaXRlbXMgYmFzZWQgb24gYWN0aXZlIG9uZVxuICAgICAqL1xuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pdGVtcy5sZW5ndGggJiYgIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pdGVtcy5tYXAoKGl0ZW06IENhcm91c2VsSXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uZWwuY2xhc3NMaXN0LmFkZChcbiAgICAgICAgICAgICAgICAgICAgJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2luc2V0LTAnLFxuICAgICAgICAgICAgICAgICAgICAndHJhbnNpdGlvbi10cmFuc2Zvcm0nLFxuICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gaWYgbm8gYWN0aXZlIGl0ZW0gaXMgc2V0IHRoZW4gZmlyc3QgcG9zaXRpb24gaXMgZGVmYXVsdFxuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0QWN0aXZlSXRlbSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZVRvKHRoaXMuZ2V0QWN0aXZlSXRlbSgpLnBvc2l0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZVRvKDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9pbmRpY2F0b3JzLm1hcCgoaW5kaWNhdG9yLCBwb3NpdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGluZGljYXRvci5lbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGlkZVRvKHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgaW5zdGFuY2VzLnJlbW92ZUluc3RhbmNlKCdDYXJvdXNlbCcsIHRoaXMuX2luc3RhbmNlSWQpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lBbmRSZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMucmVtb3ZlSW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICBnZXRJdGVtKHBvc2l0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTbGlkZSB0byB0aGUgZWxlbWVudCBiYXNlZCBvbiBpZFxuICAgICAqIEBwYXJhbSB7Kn0gcG9zaXRpb25cbiAgICAgKi9cbiAgICBzbGlkZVRvKHBvc2l0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgbmV4dEl0ZW06IENhcm91c2VsSXRlbSA9IHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXTtcbiAgICAgICAgY29uc3Qgcm90YXRpb25JdGVtczogUm90YXRpb25JdGVtcyA9IHtcbiAgICAgICAgICAgIGxlZnQ6XG4gICAgICAgICAgICAgICAgbmV4dEl0ZW0ucG9zaXRpb24gPT09IDBcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLl9pdGVtc1t0aGlzLl9pdGVtcy5sZW5ndGggLSAxXVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuX2l0ZW1zW25leHRJdGVtLnBvc2l0aW9uIC0gMV0sXG4gICAgICAgICAgICBtaWRkbGU6IG5leHRJdGVtLFxuICAgICAgICAgICAgcmlnaHQ6XG4gICAgICAgICAgICAgICAgbmV4dEl0ZW0ucG9zaXRpb24gPT09IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDFcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLl9pdGVtc1swXVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuX2l0ZW1zW25leHRJdGVtLnBvc2l0aW9uICsgMV0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3JvdGF0ZShyb3RhdGlvbkl0ZW1zKTtcbiAgICAgICAgdGhpcy5fc2V0QWN0aXZlSXRlbShuZXh0SXRlbSk7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcnZhbEluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uQ2hhbmdlKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJhc2VkIG9uIHRoZSBjdXJyZW50bHkgYWN0aXZlIGl0ZW0gaXQgd2lsbCBnbyB0byB0aGUgbmV4dCBwb3NpdGlvblxuICAgICAqL1xuICAgIG5leHQoKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUl0ZW0gPSB0aGlzLmdldEFjdGl2ZUl0ZW0oKTtcbiAgICAgICAgbGV0IG5leHRJdGVtID0gbnVsbDtcblxuICAgICAgICAvLyBjaGVjayBpZiBsYXN0IGl0ZW1cbiAgICAgICAgaWYgKGFjdGl2ZUl0ZW0ucG9zaXRpb24gPT09IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIG5leHRJdGVtID0gdGhpcy5faXRlbXNbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0SXRlbSA9IHRoaXMuX2l0ZW1zW2FjdGl2ZUl0ZW0ucG9zaXRpb24gKyAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2xpZGVUbyhuZXh0SXRlbS5wb3NpdGlvbik7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbk5leHQodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmFzZWQgb24gdGhlIGN1cnJlbnRseSBhY3RpdmUgaXRlbSBpdCB3aWxsIGdvIHRvIHRoZSBwcmV2aW91cyBwb3NpdGlvblxuICAgICAqL1xuICAgIHByZXYoKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUl0ZW0gPSB0aGlzLmdldEFjdGl2ZUl0ZW0oKTtcbiAgICAgICAgbGV0IHByZXZJdGVtID0gbnVsbDtcblxuICAgICAgICAvLyBjaGVjayBpZiBmaXJzdCBpdGVtXG4gICAgICAgIGlmIChhY3RpdmVJdGVtLnBvc2l0aW9uID09PSAwKSB7XG4gICAgICAgICAgICBwcmV2SXRlbSA9IHRoaXMuX2l0ZW1zW3RoaXMuX2l0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJldkl0ZW0gPSB0aGlzLl9pdGVtc1thY3RpdmVJdGVtLnBvc2l0aW9uIC0gMV07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNsaWRlVG8ocHJldkl0ZW0ucG9zaXRpb24pO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25QcmV2KHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGFwcGxpZXMgdGhlIHRyYW5zZm9ybSBjbGFzc2VzIGJhc2VkIG9uIHRoZSBsZWZ0LCBtaWRkbGUsIGFuZCByaWdodCByb3RhdGlvbiBjYXJvdXNlbCBpdGVtc1xuICAgICAqIEBwYXJhbSB7Kn0gcm90YXRpb25JdGVtc1xuICAgICAqL1xuICAgIF9yb3RhdGUocm90YXRpb25JdGVtczogUm90YXRpb25JdGVtcykge1xuICAgICAgICAvLyByZXNldFxuICAgICAgICB0aGlzLl9pdGVtcy5tYXAoKGl0ZW06IENhcm91c2VsSXRlbSkgPT4ge1xuICAgICAgICAgICAgaXRlbS5lbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSGFuZGxpbmcgdGhlIGNhc2Ugd2hlbiB0aGVyZSBpcyBvbmx5IG9uZSBpdGVtXG4gICAgICAgIGlmICh0aGlzLl9pdGVtcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJvdGF0aW9uSXRlbXMubWlkZGxlLmVsLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICAgICAgJy10cmFuc2xhdGUteC1mdWxsJyxcbiAgICAgICAgICAgICAgICAndHJhbnNsYXRlLXgtZnVsbCcsXG4gICAgICAgICAgICAgICAgJ3RyYW5zbGF0ZS14LTAnLFxuICAgICAgICAgICAgICAgICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgICd6LTEwJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJvdGF0aW9uSXRlbXMubWlkZGxlLmVsLmNsYXNzTGlzdC5hZGQoJ3RyYW5zbGF0ZS14LTAnLCAnei0yMCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGVmdCBpdGVtIChwcmV2aW91c2x5IGFjdGl2ZSlcbiAgICAgICAgcm90YXRpb25JdGVtcy5sZWZ0LmVsLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICAnLXRyYW5zbGF0ZS14LWZ1bGwnLFxuICAgICAgICAgICAgJ3RyYW5zbGF0ZS14LWZ1bGwnLFxuICAgICAgICAgICAgJ3RyYW5zbGF0ZS14LTAnLFxuICAgICAgICAgICAgJ2hpZGRlbicsXG4gICAgICAgICAgICAnei0yMCdcbiAgICAgICAgKTtcblxuICAgICAgICByb3RhdGlvbkl0ZW1zLmxlZnQuZWwuY2xhc3NMaXN0LmFkZCgnLXRyYW5zbGF0ZS14LWZ1bGwnLCAnei0xMCcpO1xuXG4gICAgICAgIC8vIGN1cnJlbnRseSBhY3RpdmUgaXRlbVxuICAgICAgICByb3RhdGlvbkl0ZW1zLm1pZGRsZS5lbC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICAgICAgJy10cmFuc2xhdGUteC1mdWxsJyxcbiAgICAgICAgICAgICd0cmFuc2xhdGUteC1mdWxsJyxcbiAgICAgICAgICAgICd0cmFuc2xhdGUteC0wJyxcbiAgICAgICAgICAgICdoaWRkZW4nLFxuICAgICAgICAgICAgJ3otMTAnXG4gICAgICAgICk7XG4gICAgICAgIHJvdGF0aW9uSXRlbXMubWlkZGxlLmVsLmNsYXNzTGlzdC5hZGQoJ3RyYW5zbGF0ZS14LTAnLCAnei0zMCcpO1xuXG4gICAgICAgIC8vIHJpZ2h0IGl0ZW0gKHVwY29taW5nIGFjdGl2ZSlcbiAgICAgICAgcm90YXRpb25JdGVtcy5yaWdodC5lbC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICAgICAgJy10cmFuc2xhdGUteC1mdWxsJyxcbiAgICAgICAgICAgICd0cmFuc2xhdGUteC1mdWxsJyxcbiAgICAgICAgICAgICd0cmFuc2xhdGUteC0wJyxcbiAgICAgICAgICAgICdoaWRkZW4nLFxuICAgICAgICAgICAgJ3otMzAnXG4gICAgICAgICk7XG4gICAgICAgIHJvdGF0aW9uSXRlbXMucmlnaHQuZWwuY2xhc3NMaXN0LmFkZCgndHJhbnNsYXRlLXgtZnVsbCcsICd6LTIwJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IGFuIGludGVydmFsIHRvIGN5Y2xlIHRocm91Z2ggdGhlIGNhcm91c2VsIGl0ZW1zXG4gICAgICovXG4gICAgY3ljbGUoKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJ2YWxJbnN0YW5jZSA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgICB9LCB0aGlzLl9pbnRlcnZhbER1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgY3ljbGluZyBpbnRlcnZhbFxuICAgICAqL1xuICAgIHBhdXNlKCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsSW5zdGFuY2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudGx5IGFjdGl2ZSBpdGVtXG4gICAgICovXG4gICAgZ2V0QWN0aXZlSXRlbSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZUl0ZW07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjdXJyZW50bHkgYWN0aXZlIGl0ZW0gYW5kIGRhdGEgYXR0cmlidXRlXG4gICAgICogQHBhcmFtIHsqfSBwb3NpdGlvblxuICAgICAqL1xuICAgIF9zZXRBY3RpdmVJdGVtKGl0ZW06IENhcm91c2VsSXRlbSkge1xuICAgICAgICB0aGlzLl9hY3RpdmVJdGVtID0gaXRlbTtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBpdGVtLnBvc2l0aW9uO1xuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgaW5kaWNhdG9ycyBpZiBhdmFpbGFibGVcbiAgICAgICAgaWYgKHRoaXMuX2luZGljYXRvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl9pbmRpY2F0b3JzLm1hcCgoaW5kaWNhdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaW5kaWNhdG9yLmVsLnNldEF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50JywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICAgICAgaW5kaWNhdG9yLmVsLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuX29wdGlvbnMuaW5kaWNhdG9ycy5hY3RpdmVDbGFzc2VzLnNwbGl0KCcgJylcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGluZGljYXRvci5lbC5jbGFzc0xpc3QuYWRkKFxuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLl9vcHRpb25zLmluZGljYXRvcnMuaW5hY3RpdmVDbGFzc2VzLnNwbGl0KCcgJylcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9pbmRpY2F0b3JzW3Bvc2l0aW9uXS5lbC5jbGFzc0xpc3QuYWRkKFxuICAgICAgICAgICAgICAgIC4uLnRoaXMuX29wdGlvbnMuaW5kaWNhdG9ycy5hY3RpdmVDbGFzc2VzLnNwbGl0KCcgJylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl9pbmRpY2F0b3JzW3Bvc2l0aW9uXS5lbC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICAgICAgICAgIC4uLnRoaXMuX29wdGlvbnMuaW5kaWNhdG9ycy5pbmFjdGl2ZUNsYXNzZXMuc3BsaXQoJyAnKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuX2luZGljYXRvcnNbcG9zaXRpb25dLmVsLnNldEF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50JywgJ3RydWUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU9uTmV4dChjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uTmV4dCA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uUHJldihjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uUHJldiA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uQ2hhbmdlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25DaGFuZ2UgPSBjYWxsYmFjaztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0Q2Fyb3VzZWxzKCkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNhcm91c2VsXScpLmZvckVhY2goKCRjYXJvdXNlbEVsKSA9PiB7XG4gICAgICAgIGNvbnN0IGludGVydmFsID0gJGNhcm91c2VsRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWNhcm91c2VsLWludGVydmFsJyk7XG4gICAgICAgIGNvbnN0IHNsaWRlID1cbiAgICAgICAgICAgICRjYXJvdXNlbEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1jYXJvdXNlbCcpID09PSAnc2xpZGUnXG4gICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgOiBmYWxzZTtcblxuICAgICAgICBjb25zdCBpdGVtczogQ2Fyb3VzZWxJdGVtW10gPSBbXTtcbiAgICAgICAgbGV0IGRlZmF1bHRQb3NpdGlvbiA9IDA7XG4gICAgICAgIGlmICgkY2Fyb3VzZWxFbC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1jYXJvdXNlbC1pdGVtXScpLmxlbmd0aCkge1xuICAgICAgICAgICAgQXJyYXkuZnJvbShcbiAgICAgICAgICAgICAgICAkY2Fyb3VzZWxFbC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1jYXJvdXNlbC1pdGVtXScpXG4gICAgICAgICAgICApLm1hcCgoJGNhcm91c2VsSXRlbUVsOiBIVE1MRWxlbWVudCwgcG9zaXRpb246IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGVsOiAkY2Fyb3VzZWxJdGVtRWwsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICRjYXJvdXNlbEl0ZW1FbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2Fyb3VzZWwtaXRlbScpID09PVxuICAgICAgICAgICAgICAgICAgICAnYWN0aXZlJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluZGljYXRvcnM6IEluZGljYXRvckl0ZW1bXSA9IFtdO1xuICAgICAgICBpZiAoJGNhcm91c2VsRWwucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY2Fyb3VzZWwtc2xpZGUtdG9dJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBBcnJheS5mcm9tKFxuICAgICAgICAgICAgICAgICRjYXJvdXNlbEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNhcm91c2VsLXNsaWRlLXRvXScpXG4gICAgICAgICAgICApLm1hcCgoJGluZGljYXRvckVsOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGluZGljYXRvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwYXJzZUludChcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbmRpY2F0b3JFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2Fyb3VzZWwtc2xpZGUtdG8nKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBlbDogJGluZGljYXRvckVsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjYXJvdXNlbCA9IG5ldyBDYXJvdXNlbCgkY2Fyb3VzZWxFbCBhcyBIVE1MRWxlbWVudCwgaXRlbXMsIHtcbiAgICAgICAgICAgIGRlZmF1bHRQb3NpdGlvbjogZGVmYXVsdFBvc2l0aW9uLFxuICAgICAgICAgICAgaW5kaWNhdG9yczoge1xuICAgICAgICAgICAgICAgIGl0ZW1zOiBpbmRpY2F0b3JzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGludGVydmFsOiBpbnRlcnZhbCA/IGludGVydmFsIDogRGVmYXVsdC5pbnRlcnZhbCxcbiAgICAgICAgfSBhcyBDYXJvdXNlbE9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChzbGlkZSkge1xuICAgICAgICAgICAgY2Fyb3VzZWwuY3ljbGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGZvciBjb250cm9sc1xuICAgICAgICBjb25zdCBjYXJvdXNlbE5leHRFbCA9ICRjYXJvdXNlbEVsLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAnW2RhdGEtY2Fyb3VzZWwtbmV4dF0nXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGNhcm91c2VsUHJldkVsID0gJGNhcm91c2VsRWwucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICdbZGF0YS1jYXJvdXNlbC1wcmV2XSdcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoY2Fyb3VzZWxOZXh0RWwpIHtcbiAgICAgICAgICAgIGNhcm91c2VsTmV4dEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNhcm91c2VsLm5leHQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhcm91c2VsUHJldkVsKSB7XG4gICAgICAgICAgICBjYXJvdXNlbFByZXZFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjYXJvdXNlbC5wcmV2KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuQ2Fyb3VzZWwgPSBDYXJvdXNlbDtcbiAgICB3aW5kb3cuaW5pdENhcm91c2VscyA9IGluaXRDYXJvdXNlbHM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhcm91c2VsO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiAqL1xuaW1wb3J0IHR5cGUgeyBDb3B5Q2xpcGJvYXJkT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBJbnN0YW5jZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9kb20vdHlwZXMnO1xuaW1wb3J0IHsgQ29weUNsaXBib2FyZEludGVyZmFjZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCBpbnN0YW5jZXMgZnJvbSAnLi4vLi4vZG9tL2luc3RhbmNlcyc7XG5cbmNvbnN0IERlZmF1bHQ6IENvcHlDbGlwYm9hcmRPcHRpb25zID0ge1xuICAgIGh0bWxFbnRpdGllczogZmFsc2UsXG4gICAgY29udGVudFR5cGU6ICdpbnB1dCcsXG4gICAgb25Db3B5OiAoKSA9PiB7fSxcbn07XG5cbmNvbnN0IERlZmF1bHRJbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IHtcbiAgICBpZDogbnVsbCxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmNsYXNzIENvcHlDbGlwYm9hcmQgaW1wbGVtZW50cyBDb3B5Q2xpcGJvYXJkSW50ZXJmYWNlIHtcbiAgICBfaW5zdGFuY2VJZDogc3RyaW5nO1xuICAgIF90cmlnZ2VyRWw6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBfdGFyZ2V0RWw6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsO1xuICAgIF9vcHRpb25zOiBDb3B5Q2xpcGJvYXJkT3B0aW9ucztcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gICAgX3RyaWdnZXJFbENsaWNrSGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfaW5wdXRIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHRyaWdnZXJFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgdGFyZ2V0RWw6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgb3B0aW9uczogQ29weUNsaXBib2FyZE9wdGlvbnMgPSBEZWZhdWx0LFxuICAgICAgICBpbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IERlZmF1bHRJbnN0YW5jZU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VJZCA9IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgPyBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgIDogdGFyZ2V0RWwuaWQ7XG5cbiAgICAgICAgdGhpcy5fdHJpZ2dlckVsID0gdHJpZ2dlckVsO1xuICAgICAgICB0aGlzLl90YXJnZXRFbCA9IHRhcmdldEVsO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIGluc3RhbmNlcy5hZGRJbnN0YW5jZShcbiAgICAgICAgICAgICdDb3B5Q2xpcGJvYXJkJyxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZUlkLFxuICAgICAgICAgICAgaW5zdGFuY2VPcHRpb25zLm92ZXJyaWRlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RhcmdldEVsICYmIHRoaXMuX3RyaWdnZXJFbCAmJiAhdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbENsaWNrSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvcHkoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIGNsaWNraW5nIG9uIHRoZSB0cmlnZ2VyIGVsZW1lbnQgc2hvdWxkIGNvcHkgdGhlIHZhbHVlIG9mIHRoZSB0YXJnZXQgZWxlbWVudFxuICAgICAgICAgICAgaWYgKHRoaXMuX3RyaWdnZXJFbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWxDbGlja0hhbmRsZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsICYmIHRoaXMuX3RhcmdldEVsICYmIHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbENsaWNrSGFuZGxlclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIGluc3RhbmNlcy5yZW1vdmVJbnN0YW5jZSgnQ29weUNsaXBib2FyZCcsIHRoaXMuX2luc3RhbmNlSWQpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lBbmRSZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMucmVtb3ZlSW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICBnZXRUYXJnZXRWYWx1ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuY29udGVudFR5cGUgPT09ICdpbnB1dCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YXJnZXRFbC52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmNvbnRlbnRUeXBlID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldEVsLmlubmVySFRNTDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmNvbnRlbnRUeXBlID09PSAndGV4dENvbnRlbnQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0RWwudGV4dENvbnRlbnQucmVwbGFjZSgvXFxzKy9nLCAnICcpLnRyaW0oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvcHkoKSB7XG4gICAgICAgIGxldCB0ZXh0VG9Db3B5ID0gdGhpcy5nZXRUYXJnZXRWYWx1ZSgpO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIEhUTUxFbnRpdGllcyBvcHRpb24gaXMgZW5hYmxlZFxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5odG1sRW50aXRpZXMpIHtcbiAgICAgICAgICAgIC8vIEVuY29kZSB0aGUgdGV4dCB1c2luZyBIVE1MIGVudGl0aWVzXG4gICAgICAgICAgICB0ZXh0VG9Db3B5ID0gdGhpcy5kZWNvZGVIVE1MKHRleHRUb0NvcHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgdGVtcG9yYXJ5IHRleHRhcmVhIGVsZW1lbnRcbiAgICAgICAgY29uc3QgdGVtcFRleHRBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgICAgdGVtcFRleHRBcmVhLnZhbHVlID0gdGV4dFRvQ29weTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZW1wVGV4dEFyZWEpO1xuXG4gICAgICAgIC8vIFNlbGVjdCB0aGUgdGV4dCBpbnNpZGUgdGhlIHRleHRhcmVhIGFuZCBjb3B5IGl0IHRvIHRoZSBjbGlwYm9hcmRcbiAgICAgICAgdGVtcFRleHRBcmVhLnNlbGVjdCgpO1xuICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpO1xuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgdGVtcG9yYXJ5IHRleHRhcmVhXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGVtcFRleHRBcmVhKTtcblxuICAgICAgICAvLyBDYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uQ29weSh0aGlzKTtcblxuICAgICAgICByZXR1cm4gdGV4dFRvQ29weTtcbiAgICB9XG5cbiAgICAvLyBGdW5jdGlvbiB0byBlbmNvZGUgdGV4dCBpbnRvIEhUTUwgZW50aXRpZXNcbiAgICBkZWNvZGVIVE1MKGh0bWw6IHN0cmluZykge1xuICAgICAgICBjb25zdCB0ZXh0YXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgICAgIHRleHRhcmVhLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHJldHVybiB0ZXh0YXJlYS50ZXh0Q29udGVudDtcbiAgICB9XG5cbiAgICB1cGRhdGVPbkNvcHlDYWxsYmFjayhjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uQ29weSA9IGNhbGxiYWNrO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRDb3B5Q2xpcGJvYXJkcygpIHtcbiAgICBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY29weS10by1jbGlwYm9hcmQtdGFyZ2V0XScpXG4gICAgICAgIC5mb3JFYWNoKCgkdHJpZ2dlckVsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRJZCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICdkYXRhLWNvcHktdG8tY2xpcGJvYXJkLXRhcmdldCdcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCAkdGFyZ2V0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXRJZCk7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICdkYXRhLWNvcHktdG8tY2xpcGJvYXJkLWNvbnRlbnQtdHlwZSdcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBodG1sRW50aXRpZXMgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAnZGF0YS1jb3B5LXRvLWNsaXBib2FyZC1odG1sLWVudGl0aWVzJ1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHRhcmdldCBlbGVtZW50IGV4aXN0c1xuICAgICAgICAgICAgaWYgKCR0YXJnZXRFbCkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgIWluc3RhbmNlcy5pbnN0YW5jZUV4aXN0cyhcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb3B5Q2xpcGJvYXJkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRFbC5nZXRBdHRyaWJ1dGUoJ2lkJylcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBuZXcgQ29weUNsaXBib2FyZChcbiAgICAgICAgICAgICAgICAgICAgICAgICR0cmlnZ2VyRWwgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0RWwgYXMgSFRNTElucHV0RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sRW50aXRpZXM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxFbnRpdGllcyAmJiBodG1sRW50aXRpZXMgPT09ICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IERlZmF1bHQuaHRtbEVudGl0aWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBjb250ZW50VHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGNvbnRlbnRUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogRGVmYXVsdC5jb250ZW50VHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gYXMgQ29weUNsaXBib2FyZE9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBUaGUgdGFyZ2V0IGVsZW1lbnQgd2l0aCBpZCBcIiR7dGFyZ2V0SWR9XCIgZG9lcyBub3QgZXhpc3QuIFBsZWFzZSBjaGVjayB0aGUgZGF0YS1jb3B5LXRvLWNsaXBib2FyZC10YXJnZXQgYXR0cmlidXRlLmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LkNvcHlDbGlwYm9hcmQgPSBDb3B5Q2xpcGJvYXJkO1xuICAgIHdpbmRvdy5pbml0Q2xpcGJvYXJkcyA9IGluaXRDb3B5Q2xpcGJvYXJkcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29weUNsaXBib2FyZDtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb24gKi9cbmltcG9ydCB0eXBlIHsgQ29sbGFwc2VPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEluc3RhbmNlT3B0aW9ucyB9IGZyb20gJy4uLy4uL2RvbS90eXBlcyc7XG5pbXBvcnQgeyBDb2xsYXBzZUludGVyZmFjZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCBpbnN0YW5jZXMgZnJvbSAnLi4vLi4vZG9tL2luc3RhbmNlcyc7XG5cbmNvbnN0IERlZmF1bHQ6IENvbGxhcHNlT3B0aW9ucyA9IHtcbiAgICBvbkNvbGxhcHNlOiAoKSA9PiB7fSxcbiAgICBvbkV4cGFuZDogKCkgPT4ge30sXG4gICAgb25Ub2dnbGU6ICgpID0+IHt9LFxufTtcblxuY29uc3QgRGVmYXVsdEluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0ge1xuICAgIGlkOiBudWxsLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuY2xhc3MgQ29sbGFwc2UgaW1wbGVtZW50cyBDb2xsYXBzZUludGVyZmFjZSB7XG4gICAgX2luc3RhbmNlSWQ6IHN0cmluZztcbiAgICBfdGFyZ2V0RWw6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBfdHJpZ2dlckVsOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gICAgX29wdGlvbnM6IENvbGxhcHNlT3B0aW9ucztcbiAgICBfdmlzaWJsZTogYm9vbGVhbjtcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gICAgX2NsaWNrSGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB0YXJnZXRFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgdHJpZ2dlckVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBvcHRpb25zOiBDb2xsYXBzZU9wdGlvbnMgPSBEZWZhdWx0LFxuICAgICAgICBpbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IERlZmF1bHRJbnN0YW5jZU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VJZCA9IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgPyBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgIDogdGFyZ2V0RWwuaWQ7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsID0gdGFyZ2V0RWw7XG4gICAgICAgIHRoaXMuX3RyaWdnZXJFbCA9IHRyaWdnZXJFbDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHsgLi4uRGVmYXVsdCwgLi4ub3B0aW9ucyB9O1xuICAgICAgICB0aGlzLl92aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICBpbnN0YW5jZXMuYWRkSW5zdGFuY2UoXG4gICAgICAgICAgICAnQ29sbGFwc2UnLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsICYmIHRoaXMuX3RhcmdldEVsICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3RyaWdnZXJFbC5oYXNBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Zpc2libGUgPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJykgPT09ICd0cnVlJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZml4IHVudGlsIHYyIG5vdCB0byBicmVhayBwcmV2aW91cyBzaW5nbGUgY29sbGFwc2VzIHdoaWNoIGJlY2FtZSBkaXNtaXNzXG4gICAgICAgICAgICAgICAgdGhpcy5fdmlzaWJsZSA9ICF0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9jbGlja0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2NsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsICYmIHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9jbGlja0hhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICBpbnN0YW5jZXMucmVtb3ZlSW5zdGFuY2UoJ0NvbGxhcHNlJywgdGhpcy5faW5zdGFuY2VJZCk7XG4gICAgfVxuXG4gICAgZGVzdHJveUFuZFJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIGNvbGxhcHNlKCkge1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgaWYgKHRoaXMuX3RyaWdnZXJFbCkge1xuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uQ29sbGFwc2UodGhpcyk7XG4gICAgfVxuXG4gICAgZXhwYW5kKCkge1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgaWYgKHRoaXMuX3RyaWdnZXJFbCkge1xuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkV4cGFuZCh0aGlzKTtcbiAgICB9XG5cbiAgICB0b2dnbGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl92aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbGxhcHNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmV4cGFuZCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25Ub2dnbGUodGhpcyk7XG4gICAgfVxuXG4gICAgdXBkYXRlT25Db2xsYXBzZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uQ29sbGFwc2UgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPbkV4cGFuZChjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uRXhwYW5kID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgdXBkYXRlT25Ub2dnbGUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblRvZ2dsZSA9IGNhbGxiYWNrO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRDb2xsYXBzZXMoKSB7XG4gICAgZG9jdW1lbnRcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNvbGxhcHNlLXRvZ2dsZV0nKVxuICAgICAgICAuZm9yRWFjaCgoJHRyaWdnZXJFbCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0SWQgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1jb2xsYXBzZS10b2dnbGUnKTtcbiAgICAgICAgICAgIGNvbnN0ICR0YXJnZXRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldElkKTtcblxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHRhcmdldCBlbGVtZW50IGV4aXN0c1xuICAgICAgICAgICAgaWYgKCR0YXJnZXRFbCkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgIWluc3RhbmNlcy5pbnN0YW5jZUV4aXN0cyhcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb2xsYXBzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0RWwuZ2V0QXR0cmlidXRlKCdpZCcpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbGxhcHNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldEVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbCBhcyBIVE1MRWxlbWVudFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGluc3RhbmNlIGV4aXN0cyBhbHJlYWR5IGZvciB0aGUgc2FtZSB0YXJnZXQgZWxlbWVudCB0aGVuIGNyZWF0ZSBhIG5ldyBvbmUgd2l0aCBhIGRpZmZlcmVudCB0cmlnZ2VyIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbGxhcHNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldEVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0RWwuZ2V0QXR0cmlidXRlKCdpZCcpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ18nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VzLl9nZW5lcmF0ZVJhbmRvbUlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgVGhlIHRhcmdldCBlbGVtZW50IHdpdGggaWQgXCIke3RhcmdldElkfVwiIGRvZXMgbm90IGV4aXN0LiBQbGVhc2UgY2hlY2sgdGhlIGRhdGEtY29sbGFwc2UtdG9nZ2xlIGF0dHJpYnV0ZS5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpbmRvdy5Db2xsYXBzZSA9IENvbGxhcHNlO1xuICAgIHdpbmRvdy5pbml0Q29sbGFwc2VzID0gaW5pdENvbGxhcHNlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2U7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uICovXG5pbXBvcnQgdHlwZSB7IERhdGVwaWNrZXJPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEluc3RhbmNlT3B0aW9ucyB9IGZyb20gJy4uLy4uL2RvbS90eXBlcyc7XG5pbXBvcnQgeyBEYXRlcGlja2VySW50ZXJmYWNlIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IGluc3RhbmNlcyBmcm9tICcuLi8uLi9kb20vaW5zdGFuY2VzJztcblxuaW1wb3J0IHtcbiAgICBEYXRlcGlja2VyIGFzIEZsb3diaXRlRGF0ZXBpY2tlcixcbiAgICBEYXRlUmFuZ2VQaWNrZXIgYXMgRmxvd2JpdGVEYXRlUmFuZ2VQaWNrZXIsXG59IGZyb20gJ2Zsb3diaXRlLWRhdGVwaWNrZXInO1xuXG5jb25zdCBEZWZhdWx0OiBEYXRlcGlja2VyT3B0aW9ucyA9IHtcbiAgICBkZWZhdWx0RGF0ZXBpY2tlcklkOiBudWxsLFxuICAgIGF1dG9oaWRlOiBmYWxzZSxcbiAgICBmb3JtYXQ6ICdtbS9kZC95eXl5JyxcbiAgICBtYXhEYXRlOiBudWxsLFxuICAgIG1pbkRhdGU6IG51bGwsXG4gICAgb3JpZW50YXRpb246ICdib3R0b20nLFxuICAgIGJ1dHRvbnM6IGZhbHNlLFxuICAgIGF1dG9TZWxlY3RUb2RheTogMCxcbiAgICB0aXRsZTogbnVsbCxcbiAgICBsYW5ndWFnZTogJ2VuJyxcbiAgICByYW5nZVBpY2tlcjogZmFsc2UsXG4gICAgb25TaG93OiAoKSA9PiB7fSxcbiAgICBvbkhpZGU6ICgpID0+IHt9LFxufTtcblxuY29uc3QgRGVmYXVsdEluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0ge1xuICAgIGlkOiBudWxsLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuY2xhc3MgRGF0ZXBpY2tlciBpbXBsZW1lbnRzIERhdGVwaWNrZXJJbnRlcmZhY2Uge1xuICAgIF9pbnN0YW5jZUlkOiBzdHJpbmc7XG4gICAgX2RhdGVwaWNrZXJFbDogSFRNTEVsZW1lbnQ7XG4gICAgX2RhdGVwaWNrZXJJbnN0YW5jZTogRmxvd2JpdGVEYXRlcGlja2VyIHwgRmxvd2JpdGVEYXRlUmFuZ2VQaWNrZXIgfCBudWxsO1xuICAgIF9vcHRpb25zOiBEYXRlcGlja2VyT3B0aW9ucztcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZGF0ZXBpY2tlckVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBvcHRpb25zOiBEYXRlcGlja2VyT3B0aW9ucyA9IERlZmF1bHQsXG4gICAgICAgIGluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0gRGVmYXVsdEluc3RhbmNlT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZUlkID0gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA/IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgOiBkYXRlcGlja2VyRWwuaWQ7XG4gICAgICAgIHRoaXMuX2RhdGVwaWNrZXJFbCA9IGRhdGVwaWNrZXJFbDtcbiAgICAgICAgdGhpcy5fZGF0ZXBpY2tlckluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHsgLi4uRGVmYXVsdCwgLi4ub3B0aW9ucyB9O1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgaW5zdGFuY2VzLmFkZEluc3RhbmNlKFxuICAgICAgICAgICAgJ0RhdGVwaWNrZXInLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5fZGF0ZXBpY2tlckVsICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMucmFuZ2VQaWNrZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRlcGlja2VySW5zdGFuY2UgPSBuZXcgRmxvd2JpdGVEYXRlUmFuZ2VQaWNrZXIoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RhdGVwaWNrZXJFbCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0RGF0ZXBpY2tlck9wdGlvbnModGhpcy5fb3B0aW9ucylcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRlcGlja2VySW5zdGFuY2UgPSBuZXcgRmxvd2JpdGVEYXRlcGlja2VyKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kYXRlcGlja2VyRWwsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldERhdGVwaWNrZXJPcHRpb25zKHRoaXMuX29wdGlvbnMpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fZGF0ZXBpY2tlckluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgaW5zdGFuY2VzLnJlbW92ZUluc3RhbmNlKCdEYXRlcGlja2VyJywgdGhpcy5faW5zdGFuY2VJZCk7XG4gICAgfVxuXG4gICAgZGVzdHJveUFuZFJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIGdldERhdGVwaWNrZXJJbnN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGVwaWNrZXJJbnN0YW5jZTtcbiAgICB9XG5cbiAgICBnZXREYXRlKCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLnJhbmdlUGlja2VyICYmXG4gICAgICAgICAgICB0aGlzLl9kYXRlcGlja2VySW5zdGFuY2UgaW5zdGFuY2VvZiBGbG93Yml0ZURhdGVSYW5nZVBpY2tlclxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRlcGlja2VySW5zdGFuY2UuZ2V0RGF0ZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICF0aGlzLl9vcHRpb25zLnJhbmdlUGlja2VyICYmXG4gICAgICAgICAgICB0aGlzLl9kYXRlcGlja2VySW5zdGFuY2UgaW5zdGFuY2VvZiBGbG93Yml0ZURhdGVwaWNrZXJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0ZXBpY2tlckluc3RhbmNlLmdldERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldERhdGUoZGF0ZTogYW55KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmFuZ2VQaWNrZXIgJiZcbiAgICAgICAgICAgIHRoaXMuX2RhdGVwaWNrZXJJbnN0YW5jZSBpbnN0YW5jZW9mIEZsb3diaXRlRGF0ZVJhbmdlUGlja2VyXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGVwaWNrZXJJbnN0YW5jZS5zZXREYXRlcyhkYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICF0aGlzLl9vcHRpb25zLnJhbmdlUGlja2VyICYmXG4gICAgICAgICAgICB0aGlzLl9kYXRlcGlja2VySW5zdGFuY2UgaW5zdGFuY2VvZiBGbG93Yml0ZURhdGVwaWNrZXJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0ZXBpY2tlckluc3RhbmNlLnNldERhdGUoZGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLl9kYXRlcGlja2VySW5zdGFuY2Uuc2hvdygpO1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uU2hvdyh0aGlzKTtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLl9kYXRlcGlja2VySW5zdGFuY2UuaGlkZSgpO1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSGlkZSh0aGlzKTtcbiAgICB9XG5cbiAgICBfZ2V0RGF0ZXBpY2tlck9wdGlvbnMob3B0aW9uczogRGF0ZXBpY2tlck9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZGF0ZXBpY2tlck9wdGlvbnMgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYnV0dG9ucykge1xuICAgICAgICAgICAgZGF0ZXBpY2tlck9wdGlvbnMudG9kYXlCdG4gPSB0cnVlO1xuICAgICAgICAgICAgZGF0ZXBpY2tlck9wdGlvbnMuY2xlYXJCdG4gPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdXRvU2VsZWN0VG9kYXkpIHtcbiAgICAgICAgICAgICAgICBkYXRlcGlja2VyT3B0aW9ucy50b2RheUJ0bk1vZGUgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYXV0b2hpZGUpIHtcbiAgICAgICAgICAgIGRhdGVwaWNrZXJPcHRpb25zLmF1dG9oaWRlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmZvcm1hdCkge1xuICAgICAgICAgICAgZGF0ZXBpY2tlck9wdGlvbnMuZm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5tYXhEYXRlKSB7XG4gICAgICAgICAgICBkYXRlcGlja2VyT3B0aW9ucy5tYXhEYXRlID0gb3B0aW9ucy5tYXhEYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWluRGF0ZSkge1xuICAgICAgICAgICAgZGF0ZXBpY2tlck9wdGlvbnMubWluRGF0ZSA9IG9wdGlvbnMubWluRGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICBkYXRlcGlja2VyT3B0aW9ucy5vcmllbnRhdGlvbiA9IG9wdGlvbnMub3JpZW50YXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy50aXRsZSkge1xuICAgICAgICAgICAgZGF0ZXBpY2tlck9wdGlvbnMudGl0bGUgPSBvcHRpb25zLnRpdGxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgIGRhdGVwaWNrZXJPcHRpb25zLmxhbmd1YWdlID0gb3B0aW9ucy5sYW5ndWFnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlcGlja2VyT3B0aW9ucztcbiAgICB9XG5cbiAgICB1cGRhdGVPblNob3coY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3cgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPbkhpZGUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUgPSBjYWxsYmFjaztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0RGF0ZXBpY2tlcnMoKSB7XG4gICAgZG9jdW1lbnRcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAnW2RhdGVwaWNrZXJdLCBbaW5saW5lLWRhdGVwaWNrZXJdLCBbZGF0ZS1yYW5nZXBpY2tlcl0nXG4gICAgICAgIClcbiAgICAgICAgLmZvckVhY2goKCRkYXRlcGlja2VyRWwpID0+IHtcbiAgICAgICAgICAgIGlmICgkZGF0ZXBpY2tlckVsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnV0dG9ucyA9XG4gICAgICAgICAgICAgICAgICAgICRkYXRlcGlja2VyRWwuaGFzQXR0cmlidXRlKCdkYXRlcGlja2VyLWJ1dHRvbnMnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhdXRvc2VsZWN0VG9kYXkgPSAkZGF0ZXBpY2tlckVsLmhhc0F0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGVwaWNrZXItYXV0b3NlbGVjdC10b2RheSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF1dG9oaWRlID0gJGRhdGVwaWNrZXJFbC5oYXNBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgICAgICdkYXRlcGlja2VyLWF1dG9oaWRlJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gJGRhdGVwaWNrZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGVwaWNrZXItZm9ybWF0Jyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF4RGF0ZSA9ICRkYXRlcGlja2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAnZGF0ZXBpY2tlci1tYXgtZGF0ZSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbkRhdGUgPSAkZGF0ZXBpY2tlckVsLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGVwaWNrZXItbWluLWRhdGUnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvcmllbnRhdGlvbiA9ICRkYXRlcGlja2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAnZGF0ZXBpY2tlci1vcmllbnRhdGlvbidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gJGRhdGVwaWNrZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGVwaWNrZXItdGl0bGUnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYW5ndWFnZSA9ICRkYXRlcGlja2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAnZGF0ZXBpY2tlci1sYW5ndWFnZSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlUGlja2VyID1cbiAgICAgICAgICAgICAgICAgICAgJGRhdGVwaWNrZXJFbC5oYXNBdHRyaWJ1dGUoJ2RhdGUtcmFuZ2VwaWNrZXInKTtcbiAgICAgICAgICAgICAgICBuZXcgRGF0ZXBpY2tlcihcbiAgICAgICAgICAgICAgICAgICAgJGRhdGVwaWNrZXJFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uczogYnV0dG9ucyA/IGJ1dHRvbnMgOiBEZWZhdWx0LmJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvU2VsZWN0VG9kYXk6IGF1dG9zZWxlY3RUb2RheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYXV0b3NlbGVjdFRvZGF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBEZWZhdWx0LmF1dG9TZWxlY3RUb2RheSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9oaWRlOiBhdXRvaGlkZSA/IGF1dG9oaWRlIDogRGVmYXVsdC5hdXRvaGlkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogZm9ybWF0ID8gZm9ybWF0IDogRGVmYXVsdC5mb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhEYXRlOiBtYXhEYXRlID8gbWF4RGF0ZSA6IERlZmF1bHQubWF4RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkRhdGU6IG1pbkRhdGUgPyBtaW5EYXRlIDogRGVmYXVsdC5taW5EYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvcmllbnRhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogRGVmYXVsdC5vcmllbnRhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSA/IHRpdGxlIDogRGVmYXVsdC50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlOiBsYW5ndWFnZSA/IGxhbmd1YWdlIDogRGVmYXVsdC5sYW5ndWFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlUGlja2VyOiByYW5nZVBpY2tlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcmFuZ2VQaWNrZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IERlZmF1bHQucmFuZ2VQaWNrZXIsXG4gICAgICAgICAgICAgICAgICAgIH0gYXMgRGF0ZXBpY2tlck9wdGlvbnNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgVGhlIGRhdGVwaWNrZXIgZWxlbWVudCBkb2VzIG5vdCBleGlzdC4gUGxlYXNlIGNoZWNrIHRoZSBkYXRlcGlja2VyIGF0dHJpYnV0ZS5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpbmRvdy5EYXRlcGlja2VyID0gRGF0ZXBpY2tlcjtcbiAgICB3aW5kb3cuaW5pdERhdGVwaWNrZXJzID0gaW5pdERhdGVwaWNrZXJzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRlcGlja2VyO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiAqL1xuaW1wb3J0IHR5cGUgeyBEaWFsT3B0aW9ucywgRGlhbFRyaWdnZXJUeXBlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEluc3RhbmNlT3B0aW9ucyB9IGZyb20gJy4uLy4uL2RvbS90eXBlcyc7XG5pbXBvcnQgeyBEaWFsSW50ZXJmYWNlIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IGluc3RhbmNlcyBmcm9tICcuLi8uLi9kb20vaW5zdGFuY2VzJztcblxuY29uc3QgRGVmYXVsdDogRGlhbE9wdGlvbnMgPSB7XG4gICAgdHJpZ2dlclR5cGU6ICdob3ZlcicsXG4gICAgb25TaG93OiAoKSA9PiB7fSxcbiAgICBvbkhpZGU6ICgpID0+IHt9LFxuICAgIG9uVG9nZ2xlOiAoKSA9PiB7fSxcbn07XG5cbmNvbnN0IERlZmF1bHRJbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IHtcbiAgICBpZDogbnVsbCxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmNsYXNzIERpYWwgaW1wbGVtZW50cyBEaWFsSW50ZXJmYWNlIHtcbiAgICBfaW5zdGFuY2VJZDogc3RyaW5nO1xuICAgIF9wYXJlbnRFbDogSFRNTEVsZW1lbnQ7XG4gICAgX3RyaWdnZXJFbDogSFRNTEVsZW1lbnQ7XG4gICAgX3RhcmdldEVsOiBIVE1MRWxlbWVudDtcbiAgICBfb3B0aW9uczogRGlhbE9wdGlvbnM7XG4gICAgX3Zpc2libGU6IGJvb2xlYW47XG4gICAgX2luaXRpYWxpemVkOiBib29sZWFuO1xuICAgIF9zaG93RXZlbnRIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF9oaWRlRXZlbnRIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHBhcmVudEVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICB0cmlnZ2VyRWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIHRhcmdldEVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBvcHRpb25zOiBEaWFsT3B0aW9ucyA9IERlZmF1bHQsXG4gICAgICAgIGluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0gRGVmYXVsdEluc3RhbmNlT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZUlkID0gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA/IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgOiB0YXJnZXRFbC5pZDtcbiAgICAgICAgdGhpcy5fcGFyZW50RWwgPSBwYXJlbnRFbDtcbiAgICAgICAgdGhpcy5fdHJpZ2dlckVsID0gdHJpZ2dlckVsO1xuICAgICAgICB0aGlzLl90YXJnZXRFbCA9IHRhcmdldEVsO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIGluc3RhbmNlcy5hZGRJbnN0YW5jZShcbiAgICAgICAgICAgICdEaWFsJyxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZUlkLFxuICAgICAgICAgICAgaW5zdGFuY2VPcHRpb25zLm92ZXJyaWRlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyaWdnZXJFbCAmJiB0aGlzLl90YXJnZXRFbCAmJiAhdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyaWdnZXJFdmVudFR5cGVzID0gdGhpcy5fZ2V0VHJpZ2dlckV2ZW50VHlwZXMoXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy50cmlnZ2VyVHlwZVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5fc2hvd0V2ZW50SGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRyaWdnZXJFdmVudFR5cGVzLnNob3dFdmVudHMuZm9yRWFjaCgoZXY6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9zaG93RXZlbnRIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5hZGRFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9zaG93RXZlbnRIYW5kbGVyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9oaWRlRXZlbnRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcGFyZW50RWwubWF0Y2hlcygnOmhvdmVyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50VHlwZXMuaGlkZUV2ZW50cy5mb3JFYWNoKChldjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50RWwuYWRkRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5faGlkZUV2ZW50SGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgY29uc3QgdHJpZ2dlckV2ZW50VHlwZXMgPSB0aGlzLl9nZXRUcmlnZ2VyRXZlbnRUeXBlcyhcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnRyaWdnZXJUeXBlXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnRUeXBlcy5zaG93RXZlbnRzLmZvckVhY2goKGV2OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5fc2hvd0V2ZW50SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5fc2hvd0V2ZW50SGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50VHlwZXMuaGlkZUV2ZW50cy5mb3JFYWNoKChldjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5faGlkZUV2ZW50SGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICBpbnN0YW5jZXMucmVtb3ZlSW5zdGFuY2UoJ0RpYWwnLCB0aGlzLl9pbnN0YW5jZUlkKTtcbiAgICB9XG5cbiAgICBkZXN0cm95QW5kUmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnJlbW92ZUluc3RhbmNlKCk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIGlmICh0aGlzLl90cmlnZ2VyRWwpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92aXNpYmxlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUodGhpcyk7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIGlmICh0aGlzLl90cmlnZ2VyRWwpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSB0cnVlO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25TaG93KHRoaXMpO1xuICAgIH1cblxuICAgIHRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Zpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc0hpZGRlbigpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl92aXNpYmxlO1xuICAgIH1cblxuICAgIGlzVmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2libGU7XG4gICAgfVxuXG4gICAgX2dldFRyaWdnZXJFdmVudFR5cGVzKHRyaWdnZXJUeXBlOiBEaWFsVHJpZ2dlclR5cGUpIHtcbiAgICAgICAgc3dpdGNoICh0cmlnZ2VyVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnaG92ZXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dFdmVudHM6IFsnbW91c2VlbnRlcicsICdmb2N1cyddLFxuICAgICAgICAgICAgICAgICAgICBoaWRlRXZlbnRzOiBbJ21vdXNlbGVhdmUnLCAnYmx1ciddLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdjbGljayc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogWydjbGljaycsICdmb2N1cyddLFxuICAgICAgICAgICAgICAgICAgICBoaWRlRXZlbnRzOiBbJ2ZvY3Vzb3V0JywgJ2JsdXInXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAnbm9uZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogW10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFtdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dFdmVudHM6IFsnbW91c2VlbnRlcicsICdmb2N1cyddLFxuICAgICAgICAgICAgICAgICAgICBoaWRlRXZlbnRzOiBbJ21vdXNlbGVhdmUnLCAnYmx1ciddLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVPblNob3coY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3cgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPbkhpZGUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPblRvZ2dsZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uVG9nZ2xlID0gY2FsbGJhY2s7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdERpYWxzKCkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWRpYWwtaW5pdF0nKS5mb3JFYWNoKCgkcGFyZW50RWwpID0+IHtcbiAgICAgICAgY29uc3QgJHRyaWdnZXJFbCA9ICRwYXJlbnRFbC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1kaWFsLXRvZ2dsZV0nKTtcblxuICAgICAgICBpZiAoJHRyaWdnZXJFbCkge1xuICAgICAgICAgICAgY29uc3QgZGlhbElkID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGlhbC10b2dnbGUnKTtcbiAgICAgICAgICAgIGNvbnN0ICRkaWFsRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkaWFsSWQpO1xuXG4gICAgICAgICAgICBpZiAoJGRpYWxFbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyaWdnZXJUeXBlID1cbiAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGlhbC10cmlnZ2VyJyk7XG4gICAgICAgICAgICAgICAgbmV3IERpYWwoXG4gICAgICAgICAgICAgICAgICAgICRwYXJlbnRFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJGRpYWxFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlclR5cGU6IHRyaWdnZXJUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0cmlnZ2VyVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogRGVmYXVsdC50cmlnZ2VyVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgfSBhcyBEaWFsT3B0aW9uc1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBEaWFsIHdpdGggaWQgJHtkaWFsSWR9IGRvZXMgbm90IGV4aXN0LiBBcmUgeW91IHN1cmUgdGhhdCB0aGUgZGF0YS1kaWFsLXRvZ2dsZSBhdHRyaWJ1dGUgcG9pbnRzIHRvIHRoZSBjb3JyZWN0IG1vZGFsIGlkP2BcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBgRGlhbCB3aXRoIGlkICR7JHBhcmVudEVsLmlkfSBkb2VzIG5vdCBoYXZlIGEgdHJpZ2dlciBlbGVtZW50LiBBcmUgeW91IHN1cmUgdGhhdCB0aGUgZGF0YS1kaWFsLXRvZ2dsZSBhdHRyaWJ1dGUgZXhpc3RzP2BcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LkRpYWwgPSBEaWFsO1xuICAgIHdpbmRvdy5pbml0RGlhbHMgPSBpbml0RGlhbHM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IERpYWw7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uICovXG5pbXBvcnQgdHlwZSB7IERpc21pc3NPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEluc3RhbmNlT3B0aW9ucyB9IGZyb20gJy4uLy4uL2RvbS90eXBlcyc7XG5pbXBvcnQgeyBEaXNtaXNzSW50ZXJmYWNlIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IGluc3RhbmNlcyBmcm9tICcuLi8uLi9kb20vaW5zdGFuY2VzJztcblxuY29uc3QgRGVmYXVsdDogRGlzbWlzc09wdGlvbnMgPSB7XG4gICAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb24tb3BhY2l0eScsXG4gICAgZHVyYXRpb246IDMwMCxcbiAgICB0aW1pbmc6ICdlYXNlLW91dCcsXG4gICAgb25IaWRlOiAoKSA9PiB7fSxcbn07XG5cbmNvbnN0IERlZmF1bHRJbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IHtcbiAgICBpZDogbnVsbCxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmNsYXNzIERpc21pc3MgaW1wbGVtZW50cyBEaXNtaXNzSW50ZXJmYWNlIHtcbiAgICBfaW5zdGFuY2VJZDogc3RyaW5nO1xuICAgIF90YXJnZXRFbDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIF90cmlnZ2VyRWw6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBfb3B0aW9uczogRGlzbWlzc09wdGlvbnM7XG4gICAgX2luaXRpYWxpemVkOiBib29sZWFuO1xuICAgIF9jbGlja0hhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdGFyZ2V0RWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIHRyaWdnZXJFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgb3B0aW9uczogRGlzbWlzc09wdGlvbnMgPSBEZWZhdWx0LFxuICAgICAgICBpbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IERlZmF1bHRJbnN0YW5jZU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VJZCA9IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgPyBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgIDogdGFyZ2V0RWwuaWQ7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsID0gdGFyZ2V0RWw7XG4gICAgICAgIHRoaXMuX3RyaWdnZXJFbCA9IHRyaWdnZXJFbDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHsgLi4uRGVmYXVsdCwgLi4ub3B0aW9ucyB9O1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgaW5zdGFuY2VzLmFkZEluc3RhbmNlKFxuICAgICAgICAgICAgJ0Rpc21pc3MnLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsICYmIHRoaXMuX3RhcmdldEVsICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5fY2xpY2tIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2NsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsICYmIHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9jbGlja0hhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICBpbnN0YW5jZXMucmVtb3ZlSW5zdGFuY2UoJ0Rpc21pc3MnLCB0aGlzLl9pbnN0YW5jZUlkKTtcbiAgICB9XG5cbiAgICBkZXN0cm95QW5kUmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnJlbW92ZUluc3RhbmNlKCk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZChcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMudHJhbnNpdGlvbixcbiAgICAgICAgICAgIGBkdXJhdGlvbi0ke3RoaXMuX29wdGlvbnMuZHVyYXRpb259YCxcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMudGltaW5nLFxuICAgICAgICAgICAgJ29wYWNpdHktMCdcbiAgICAgICAgKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgfSwgdGhpcy5fb3B0aW9ucy5kdXJhdGlvbik7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUodGhpcywgdGhpcy5fdGFyZ2V0RWwpO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uSGlkZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSGlkZSA9IGNhbGxiYWNrO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXREaXNtaXNzZXMoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZGlzbWlzcy10YXJnZXRdJykuZm9yRWFjaCgoJHRyaWdnZXJFbCkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXRJZCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRpc21pc3MtdGFyZ2V0Jyk7XG4gICAgICAgIGNvbnN0ICRkaXNtaXNzRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldElkKTtcblxuICAgICAgICBpZiAoJGRpc21pc3NFbCkge1xuICAgICAgICAgICAgbmV3IERpc21pc3MoJGRpc21pc3NFbCBhcyBIVE1MRWxlbWVudCwgJHRyaWdnZXJFbCBhcyBIVE1MRWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIGBUaGUgZGlzbWlzcyBlbGVtZW50IHdpdGggaWQgXCIke3RhcmdldElkfVwiIGRvZXMgbm90IGV4aXN0LiBQbGVhc2UgY2hlY2sgdGhlIGRhdGEtZGlzbWlzcy10YXJnZXQgYXR0cmlidXRlLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LkRpc21pc3MgPSBEaXNtaXNzO1xuICAgIHdpbmRvdy5pbml0RGlzbWlzc2VzID0gaW5pdERpc21pc3Nlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgRGlzbWlzcztcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb24gKi9cbmltcG9ydCB0eXBlIHsgRHJhd2VyT3B0aW9ucywgUGxhY2VtZW50Q2xhc3NlcyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBJbnN0YW5jZU9wdGlvbnMsIEV2ZW50TGlzdGVuZXJJbnN0YW5jZSB9IGZyb20gJy4uLy4uL2RvbS90eXBlcyc7XG5pbXBvcnQgeyBEcmF3ZXJJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgaW5zdGFuY2VzIGZyb20gJy4uLy4uL2RvbS9pbnN0YW5jZXMnO1xuXG5jb25zdCBEZWZhdWx0OiBEcmF3ZXJPcHRpb25zID0ge1xuICAgIHBsYWNlbWVudDogJ2xlZnQnLFxuICAgIGJvZHlTY3JvbGxpbmc6IGZhbHNlLFxuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGVkZ2U6IGZhbHNlLFxuICAgIGVkZ2VPZmZzZXQ6ICdib3R0b20tWzYwcHhdJyxcbiAgICBiYWNrZHJvcENsYXNzZXM6ICdiZy1ncmF5LTkwMC81MCBkYXJrOmJnLWdyYXktOTAwLzgwIGZpeGVkIGluc2V0LTAgei0zMCcsXG4gICAgb25TaG93OiAoKSA9PiB7fSxcbiAgICBvbkhpZGU6ICgpID0+IHt9LFxuICAgIG9uVG9nZ2xlOiAoKSA9PiB7fSxcbn07XG5cbmNvbnN0IERlZmF1bHRJbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IHtcbiAgICBpZDogbnVsbCxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmNsYXNzIERyYXdlciBpbXBsZW1lbnRzIERyYXdlckludGVyZmFjZSB7XG4gICAgX2luc3RhbmNlSWQ6IHN0cmluZztcbiAgICBfdGFyZ2V0RWw6IEhUTUxFbGVtZW50O1xuICAgIF90cmlnZ2VyRWw6IEhUTUxFbGVtZW50O1xuICAgIF9vcHRpb25zOiBEcmF3ZXJPcHRpb25zO1xuICAgIF92aXNpYmxlOiBib29sZWFuO1xuICAgIF9ldmVudExpc3RlbmVySW5zdGFuY2VzOiBFdmVudExpc3RlbmVySW5zdGFuY2VbXSA9IFtdO1xuICAgIF9oYW5kbGVFc2NhcGVLZXk6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG4gICAgX2luaXRpYWxpemVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHRhcmdldEVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBvcHRpb25zOiBEcmF3ZXJPcHRpb25zID0gRGVmYXVsdCxcbiAgICAgICAgaW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSBEZWZhdWx0SW5zdGFuY2VPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlSWQgPSBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgID8gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA6IHRhcmdldEVsLmlkO1xuICAgICAgICB0aGlzLl90YXJnZXRFbCA9IHRhcmdldEVsO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIGluc3RhbmNlcy5hZGRJbnN0YW5jZShcbiAgICAgICAgICAgICdEcmF3ZXInLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICAvLyBzZXQgaW5pdGlhbCBhY2Nlc3NpYmlsaXR5IGF0dHJpYnV0ZXNcbiAgICAgICAgaWYgKHRoaXMuX3RhcmdldEVsICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCd0cmFuc2l0aW9uLXRyYW5zZm9ybScpO1xuXG4gICAgICAgICAgICAvLyBzZXQgYmFzZSBwbGFjZW1lbnQgY2xhc3Nlc1xuICAgICAgICAgICAgdGhpcy5fZ2V0UGxhY2VtZW50Q2xhc3Nlcyh0aGlzLl9vcHRpb25zLnBsYWNlbWVudCkuYmFzZS5tYXAoKGMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKGMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUVzY2FwZUtleSA9IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmICdFc2NhcGUnIGtleSBpcyBwcmVzc2VkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgRHJhd2VyIGlzIHZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpOyAvLyBoaWRlIHRoZSBEcmF3ZXJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIGFkZCBrZXlib2FyZCBldmVudCBsaXN0ZW5lciB0byBkb2N1bWVudFxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUVzY2FwZUtleSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxFdmVudExpc3RlbmVySW5zdGFuY2VzKCk7XG4gICAgICAgICAgICB0aGlzLl9kZXN0cm95QmFja2Ryb3BFbCgpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGtleWJvYXJkIGV2ZW50IGxpc3RlbmVyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjYXBlS2V5KTtcblxuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICBpbnN0YW5jZXMucmVtb3ZlSW5zdGFuY2UoJ0RyYXdlcicsIHRoaXMuX2luc3RhbmNlSWQpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lBbmRSZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMucmVtb3ZlSW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICAvLyBiYXNlZCBvbiB0aGUgZWRnZSBvcHRpb24gc2hvdyBwbGFjZW1lbnQgY2xhc3Nlc1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5lZGdlKSB7XG4gICAgICAgICAgICB0aGlzLl9nZXRQbGFjZW1lbnRDbGFzc2VzKFxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucGxhY2VtZW50ICsgJy1lZGdlJ1xuICAgICAgICAgICAgKS5hY3RpdmUubWFwKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LnJlbW92ZShjKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fZ2V0UGxhY2VtZW50Q2xhc3NlcyhcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnBsYWNlbWVudCArICctZWRnZSdcbiAgICAgICAgICAgICkuaW5hY3RpdmUubWFwKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZChjKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZ2V0UGxhY2VtZW50Q2xhc3Nlcyh0aGlzLl9vcHRpb25zLnBsYWNlbWVudCkuYWN0aXZlLm1hcChcbiAgICAgICAgICAgICAgICAoYykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QucmVtb3ZlKGMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl9nZXRQbGFjZW1lbnRDbGFzc2VzKHRoaXMuX29wdGlvbnMucGxhY2VtZW50KS5pbmFjdGl2ZS5tYXAoXG4gICAgICAgICAgICAgICAgKGMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZChjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IGFjY2Vzc2liaWxpdHkgYXR0cmlidXRlc1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwucmVtb3ZlQXR0cmlidXRlKCdhcmlhLW1vZGFsJyk7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpO1xuXG4gICAgICAgIC8vIGVuYWJsZSBib2R5IHNjcm9sbFxuICAgICAgICBpZiAoIXRoaXMuX29wdGlvbnMuYm9keVNjcm9sbGluZykge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdvdmVyZmxvdy1oaWRkZW4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlc3Ryb3kgYmFja2Ryb3BcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYmFja2Ryb3ApIHtcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lCYWNrZHJvcEVsKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl92aXNpYmxlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUodGhpcyk7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuZWRnZSkge1xuICAgICAgICAgICAgdGhpcy5fZ2V0UGxhY2VtZW50Q2xhc3NlcyhcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnBsYWNlbWVudCArICctZWRnZSdcbiAgICAgICAgICAgICkuYWN0aXZlLm1hcCgoYykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5hZGQoYyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX2dldFBsYWNlbWVudENsYXNzZXMoXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5wbGFjZW1lbnQgKyAnLWVkZ2UnXG4gICAgICAgICAgICApLmluYWN0aXZlLm1hcCgoYykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2dldFBsYWNlbWVudENsYXNzZXModGhpcy5fb3B0aW9ucy5wbGFjZW1lbnQpLmFjdGl2ZS5tYXAoXG4gICAgICAgICAgICAgICAgKGMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZChjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5fZ2V0UGxhY2VtZW50Q2xhc3Nlcyh0aGlzLl9vcHRpb25zLnBsYWNlbWVudCkuaW5hY3RpdmUubWFwKFxuICAgICAgICAgICAgICAgIChjKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldCBhY2Nlc3NpYmlsaXR5IGF0dHJpYnV0ZXNcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuc2V0QXR0cmlidXRlKCdhcmlhLW1vZGFsJywgJ3RydWUnKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpO1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG5cbiAgICAgICAgLy8gZGlzYWJsZSBib2R5IHNjcm9sbFxuICAgICAgICBpZiAoIXRoaXMuX29wdGlvbnMuYm9keVNjcm9sbGluZykge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdvdmVyZmxvdy1oaWRkZW4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNob3cgYmFja2Ryb3BcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYmFja2Ryb3ApIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUJhY2tkcm9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl92aXNpYmxlID0gdHJ1ZTtcblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uU2hvdyh0aGlzKTtcbiAgICB9XG5cbiAgICB0b2dnbGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NyZWF0ZUJhY2tkcm9wKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3Zpc2libGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGJhY2tkcm9wRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGJhY2tkcm9wRWwuc2V0QXR0cmlidXRlKCdkcmF3ZXItYmFja2Ryb3AnLCAnJyk7XG4gICAgICAgICAgICBiYWNrZHJvcEVsLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgICAgICAgICAgLi4udGhpcy5fb3B0aW9ucy5iYWNrZHJvcENsYXNzZXMuc3BsaXQoJyAnKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5hcHBlbmQoYmFja2Ryb3BFbCk7XG4gICAgICAgICAgICBiYWNrZHJvcEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZGVzdHJveUJhY2tkcm9wRWwoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuX3Zpc2libGUgJiZcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkcmF3ZXItYmFja2Ryb3BdJykgIT09IG51bGxcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZHJhd2VyLWJhY2tkcm9wXScpLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2dldFBsYWNlbWVudENsYXNzZXMocGxhY2VtZW50OiBzdHJpbmcpOiBQbGFjZW1lbnRDbGFzc2VzIHtcbiAgICAgICAgc3dpdGNoIChwbGFjZW1lbnQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYmFzZTogWyd0b3AtMCcsICdsZWZ0LTAnLCAncmlnaHQtMCddLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IFsndHJhbnNmb3JtLW5vbmUnXSxcbiAgICAgICAgICAgICAgICAgICAgaW5hY3RpdmU6IFsnLXRyYW5zbGF0ZS15LWZ1bGwnXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2U6IFsncmlnaHQtMCcsICd0b3AtMCddLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IFsndHJhbnNmb3JtLW5vbmUnXSxcbiAgICAgICAgICAgICAgICAgICAgaW5hY3RpdmU6IFsndHJhbnNsYXRlLXgtZnVsbCddLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2U6IFsnYm90dG9tLTAnLCAnbGVmdC0wJywgJ3JpZ2h0LTAnXSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiBbJ3RyYW5zZm9ybS1ub25lJ10sXG4gICAgICAgICAgICAgICAgICAgIGluYWN0aXZlOiBbJ3RyYW5zbGF0ZS15LWZ1bGwnXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYmFzZTogWydsZWZ0LTAnLCAndG9wLTAnXSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiBbJ3RyYW5zZm9ybS1ub25lJ10sXG4gICAgICAgICAgICAgICAgICAgIGluYWN0aXZlOiBbJy10cmFuc2xhdGUteC1mdWxsJ10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbS1lZGdlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBiYXNlOiBbJ2xlZnQtMCcsICd0b3AtMCddLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IFsndHJhbnNmb3JtLW5vbmUnXSxcbiAgICAgICAgICAgICAgICAgICAgaW5hY3RpdmU6IFsndHJhbnNsYXRlLXktZnVsbCcsIHRoaXMuX29wdGlvbnMuZWRnZU9mZnNldF0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYmFzZTogWydsZWZ0LTAnLCAndG9wLTAnXSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiBbJ3RyYW5zZm9ybS1ub25lJ10sXG4gICAgICAgICAgICAgICAgICAgIGluYWN0aXZlOiBbJy10cmFuc2xhdGUteC1mdWxsJ10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzSGlkZGVuKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuX3Zpc2libGU7XG4gICAgfVxuXG4gICAgaXNWaXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlzaWJsZTtcbiAgICB9XG5cbiAgICBhZGRFdmVudExpc3RlbmVySW5zdGFuY2UoXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICB0eXBlOiBzdHJpbmcsXG4gICAgICAgIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3RcbiAgICApIHtcbiAgICAgICAgdGhpcy5fZXZlbnRMaXN0ZW5lckluc3RhbmNlcy5wdXNoKHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlQWxsRXZlbnRMaXN0ZW5lckluc3RhbmNlcygpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRMaXN0ZW5lckluc3RhbmNlcy5tYXAoKGV2ZW50TGlzdGVuZXJJbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgZXZlbnRMaXN0ZW5lckluc3RhbmNlLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICBldmVudExpc3RlbmVySW5zdGFuY2UudHlwZSxcbiAgICAgICAgICAgICAgICBldmVudExpc3RlbmVySW5zdGFuY2UuaGFuZGxlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2V2ZW50TGlzdGVuZXJJbnN0YW5jZXMgPSBbXTtcbiAgICB9XG5cbiAgICBnZXRBbGxFdmVudExpc3RlbmVySW5zdGFuY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRMaXN0ZW5lckluc3RhbmNlcztcbiAgICB9XG5cbiAgICB1cGRhdGVPblNob3coY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3cgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPbkhpZGUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPblRvZ2dsZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uVG9nZ2xlID0gY2FsbGJhY2s7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdERyYXdlcnMoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZHJhd2VyLXRhcmdldF0nKS5mb3JFYWNoKCgkdHJpZ2dlckVsKSA9PiB7XG4gICAgICAgIC8vIG1hbmRhdG9yeVxuICAgICAgICBjb25zdCBkcmF3ZXJJZCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRyYXdlci10YXJnZXQnKTtcbiAgICAgICAgY29uc3QgJGRyYXdlckVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZHJhd2VySWQpO1xuXG4gICAgICAgIGlmICgkZHJhd2VyRWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlbWVudCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRyYXdlci1wbGFjZW1lbnQnKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHlTY3JvbGxpbmcgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAnZGF0YS1kcmF3ZXItYm9keS1zY3JvbGxpbmcnXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgYmFja2Ryb3AgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kcmF3ZXItYmFja2Ryb3AnKTtcbiAgICAgICAgICAgIGNvbnN0IGVkZ2UgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kcmF3ZXItZWRnZScpO1xuICAgICAgICAgICAgY29uc3QgZWRnZU9mZnNldCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICdkYXRhLWRyYXdlci1lZGdlLW9mZnNldCdcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIG5ldyBEcmF3ZXIoJGRyYXdlckVsLCB7XG4gICAgICAgICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQgPyBwbGFjZW1lbnQgOiBEZWZhdWx0LnBsYWNlbWVudCxcbiAgICAgICAgICAgICAgICBib2R5U2Nyb2xsaW5nOiBib2R5U2Nyb2xsaW5nXG4gICAgICAgICAgICAgICAgICAgID8gYm9keVNjcm9sbGluZyA9PT0gJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgOiBEZWZhdWx0LmJvZHlTY3JvbGxpbmcsXG4gICAgICAgICAgICAgICAgYmFja2Ryb3A6IGJhY2tkcm9wXG4gICAgICAgICAgICAgICAgICAgID8gYmFja2Ryb3AgPT09ICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIDogRGVmYXVsdC5iYWNrZHJvcCxcbiAgICAgICAgICAgICAgICBlZGdlOiBlZGdlID8gKGVkZ2UgPT09ICd0cnVlJyA/IHRydWUgOiBmYWxzZSkgOiBEZWZhdWx0LmVkZ2UsXG4gICAgICAgICAgICAgICAgZWRnZU9mZnNldDogZWRnZU9mZnNldCA/IGVkZ2VPZmZzZXQgOiBEZWZhdWx0LmVkZ2VPZmZzZXQsXG4gICAgICAgICAgICB9IGFzIERyYXdlck9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBgRHJhd2VyIHdpdGggaWQgJHtkcmF3ZXJJZH0gbm90IGZvdW5kLiBBcmUgeW91IHN1cmUgdGhhdCB0aGUgZGF0YS1kcmF3ZXItdGFyZ2V0IGF0dHJpYnV0ZSBwb2ludHMgdG8gdGhlIGNvcnJlY3QgZHJhd2VyIGlkP2BcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWRyYXdlci10b2dnbGVdJykuZm9yRWFjaCgoJHRyaWdnZXJFbCkgPT4ge1xuICAgICAgICBjb25zdCBkcmF3ZXJJZCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRyYXdlci10b2dnbGUnKTtcbiAgICAgICAgY29uc3QgJGRyYXdlckVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZHJhd2VySWQpO1xuXG4gICAgICAgIGlmICgkZHJhd2VyRWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGRyYXdlcjogRHJhd2VySW50ZXJmYWNlID0gaW5zdGFuY2VzLmdldEluc3RhbmNlKFxuICAgICAgICAgICAgICAgICdEcmF3ZXInLFxuICAgICAgICAgICAgICAgIGRyYXdlcklkXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoZHJhd2VyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9nZ2xlRHJhd2VyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkcmF3ZXIudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAkdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlRHJhd2VyKTtcbiAgICAgICAgICAgICAgICBkcmF3ZXIuYWRkRXZlbnRMaXN0ZW5lckluc3RhbmNlKFxuICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVEcmF3ZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgRHJhd2VyIHdpdGggaWQgJHtkcmF3ZXJJZH0gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLiBQbGVhc2UgaW5pdGlhbGl6ZSBpdCB1c2luZyB0aGUgZGF0YS1kcmF3ZXItdGFyZ2V0IGF0dHJpYnV0ZS5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgYERyYXdlciB3aXRoIGlkICR7ZHJhd2VySWR9IG5vdCBmb3VuZC4gQXJlIHlvdSBzdXJlIHRoYXQgdGhlIGRhdGEtZHJhd2VyLXRhcmdldCBhdHRyaWJ1dGUgcG9pbnRzIHRvIHRoZSBjb3JyZWN0IGRyYXdlciBpZD9gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZHJhd2VyLWRpc21pc3NdLCBbZGF0YS1kcmF3ZXItaGlkZV0nKVxuICAgICAgICAuZm9yRWFjaCgoJHRyaWdnZXJFbCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZHJhd2VySWQgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kcmF3ZXItZGlzbWlzcycpXG4gICAgICAgICAgICAgICAgPyAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kcmF3ZXItZGlzbWlzcycpXG4gICAgICAgICAgICAgICAgOiAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kcmF3ZXItaGlkZScpO1xuICAgICAgICAgICAgY29uc3QgJGRyYXdlckVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZHJhd2VySWQpO1xuXG4gICAgICAgICAgICBpZiAoJGRyYXdlckVsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZHJhd2VyOiBEcmF3ZXJJbnRlcmZhY2UgPSBpbnN0YW5jZXMuZ2V0SW5zdGFuY2UoXG4gICAgICAgICAgICAgICAgICAgICdEcmF3ZXInLFxuICAgICAgICAgICAgICAgICAgICBkcmF3ZXJJZFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZHJhd2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhpZGVEcmF3ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmF3ZXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGlkZURyYXdlcik7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdlci5hZGRFdmVudExpc3RlbmVySW5zdGFuY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVEcmF3ZXJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgYERyYXdlciB3aXRoIGlkICR7ZHJhd2VySWR9IGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4gUGxlYXNlIGluaXRpYWxpemUgaXQgdXNpbmcgdGhlIGRhdGEtZHJhd2VyLXRhcmdldCBhdHRyaWJ1dGUuYFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgYERyYXdlciB3aXRoIGlkICR7ZHJhd2VySWR9IG5vdCBmb3VuZC4gQXJlIHlvdSBzdXJlIHRoYXQgdGhlIGRhdGEtZHJhd2VyLXRhcmdldCBhdHRyaWJ1dGUgcG9pbnRzIHRvIHRoZSBjb3JyZWN0IGRyYXdlciBpZGBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWRyYXdlci1zaG93XScpLmZvckVhY2goKCR0cmlnZ2VyRWwpID0+IHtcbiAgICAgICAgY29uc3QgZHJhd2VySWQgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kcmF3ZXItc2hvdycpO1xuICAgICAgICBjb25zdCAkZHJhd2VyRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkcmF3ZXJJZCk7XG5cbiAgICAgICAgaWYgKCRkcmF3ZXJFbCkge1xuICAgICAgICAgICAgY29uc3QgZHJhd2VyOiBEcmF3ZXJJbnRlcmZhY2UgPSBpbnN0YW5jZXMuZ2V0SW5zdGFuY2UoXG4gICAgICAgICAgICAgICAgJ0RyYXdlcicsXG4gICAgICAgICAgICAgICAgZHJhd2VySWRcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChkcmF3ZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaG93RHJhd2VyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkcmF3ZXIuc2hvdygpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJHRyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNob3dEcmF3ZXIpO1xuICAgICAgICAgICAgICAgIGRyYXdlci5hZGRFdmVudExpc3RlbmVySW5zdGFuY2UoXG4gICAgICAgICAgICAgICAgICAgICR0cmlnZ2VyRWwgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAgICAgICAgIHNob3dEcmF3ZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgRHJhd2VyIHdpdGggaWQgJHtkcmF3ZXJJZH0gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLiBQbGVhc2UgaW5pdGlhbGl6ZSBpdCB1c2luZyB0aGUgZGF0YS1kcmF3ZXItdGFyZ2V0IGF0dHJpYnV0ZS5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgYERyYXdlciB3aXRoIGlkICR7ZHJhd2VySWR9IG5vdCBmb3VuZC4gQXJlIHlvdSBzdXJlIHRoYXQgdGhlIGRhdGEtZHJhd2VyLXRhcmdldCBhdHRyaWJ1dGUgcG9pbnRzIHRvIHRoZSBjb3JyZWN0IGRyYXdlciBpZD9gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpbmRvdy5EcmF3ZXIgPSBEcmF3ZXI7XG4gICAgd2luZG93LmluaXREcmF3ZXJzID0gaW5pdERyYXdlcnM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IERyYXdlcjtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb24gKi9cbmltcG9ydCB7IGNyZWF0ZVBvcHBlciB9IGZyb20gJ0Bwb3BwZXJqcy9jb3JlJztcbmltcG9ydCB0eXBlIHtcbiAgICBPcHRpb25zIGFzIFBvcHBlck9wdGlvbnMsXG4gICAgSW5zdGFuY2UgYXMgUG9wcGVySW5zdGFuY2UsXG59IGZyb20gJ0Bwb3BwZXJqcy9jb3JlJztcbmltcG9ydCB0eXBlIHsgRHJvcGRvd25PcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEluc3RhbmNlT3B0aW9ucyB9IGZyb20gJy4uLy4uL2RvbS90eXBlcyc7XG5pbXBvcnQgeyBEcm9wZG93bkludGVyZmFjZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCBpbnN0YW5jZXMgZnJvbSAnLi4vLi4vZG9tL2luc3RhbmNlcyc7XG5cbmNvbnN0IERlZmF1bHQ6IERyb3Bkb3duT3B0aW9ucyA9IHtcbiAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgIHRyaWdnZXJUeXBlOiAnY2xpY2snLFxuICAgIG9mZnNldFNraWRkaW5nOiAwLFxuICAgIG9mZnNldERpc3RhbmNlOiAxMCxcbiAgICBkZWxheTogMzAwLFxuICAgIGlnbm9yZUNsaWNrT3V0c2lkZUNsYXNzOiBmYWxzZSxcbiAgICBvblNob3c6ICgpID0+IHt9LFxuICAgIG9uSGlkZTogKCkgPT4ge30sXG4gICAgb25Ub2dnbGU6ICgpID0+IHt9LFxufTtcblxuY29uc3QgRGVmYXVsdEluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0ge1xuICAgIGlkOiBudWxsLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuY2xhc3MgRHJvcGRvd24gaW1wbGVtZW50cyBEcm9wZG93bkludGVyZmFjZSB7XG4gICAgX2luc3RhbmNlSWQ6IHN0cmluZztcbiAgICBfdGFyZ2V0RWw6IEhUTUxFbGVtZW50O1xuICAgIF90cmlnZ2VyRWw6IEhUTUxFbGVtZW50O1xuICAgIF9vcHRpb25zOiBEcm9wZG93bk9wdGlvbnM7XG4gICAgX3Zpc2libGU6IGJvb2xlYW47XG4gICAgX3BvcHBlckluc3RhbmNlOiBQb3BwZXJJbnN0YW5jZTtcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gICAgX2NsaWNrT3V0c2lkZUV2ZW50TGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG4gICAgX2hvdmVyU2hvd1RyaWdnZXJFbEhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG4gICAgX2hvdmVyU2hvd1RhcmdldEVsSGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfaG92ZXJIaWRlSGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfY2xpY2tIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIHRyaWdnZXJFbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBvcHRpb25zOiBEcm9wZG93bk9wdGlvbnMgPSBEZWZhdWx0LFxuICAgICAgICBpbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IERlZmF1bHRJbnN0YW5jZU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VJZCA9IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgPyBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgIDogdGFyZ2V0RWxlbWVudC5pZDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwgPSB0YXJnZXRFbGVtZW50O1xuICAgICAgICB0aGlzLl90cmlnZ2VyRWwgPSB0cmlnZ2VyRWxlbWVudDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHsgLi4uRGVmYXVsdCwgLi4ub3B0aW9ucyB9O1xuICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIGluc3RhbmNlcy5hZGRJbnN0YW5jZShcbiAgICAgICAgICAgICdEcm9wZG93bicsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGluc3RhbmNlT3B0aW9ucy5vdmVycmlkZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl90cmlnZ2VyRWwgJiYgdGhpcy5fdGFyZ2V0RWwgJiYgIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZSA9IHRoaXMuX2NyZWF0ZVBvcHBlckluc3RhbmNlKCk7XG4gICAgICAgICAgICB0aGlzLl9zZXR1cEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBjb25zdCB0cmlnZ2VyRXZlbnRzID0gdGhpcy5fZ2V0VHJpZ2dlckV2ZW50cygpO1xuXG4gICAgICAgIC8vIFJlbW92ZSBjbGljayBldmVudCBsaXN0ZW5lcnMgZm9yIHRyaWdnZXIgZWxlbWVudFxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy50cmlnZ2VyVHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50cy5zaG93RXZlbnRzLmZvckVhY2goKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXYsIHRoaXMuX2NsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBob3ZlciBldmVudCBsaXN0ZW5lcnMgZm9yIHRyaWdnZXIgYW5kIHRhcmdldCBlbGVtZW50c1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy50cmlnZ2VyVHlwZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50cy5zaG93RXZlbnRzLmZvckVhY2goKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgIGV2LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ob3ZlclNob3dUcmlnZ2VyRWxIYW5kbGVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICAgICBldixcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faG92ZXJTaG93VGFyZ2V0RWxIYW5kbGVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnRzLmhpZGVFdmVudHMuZm9yRWFjaCgoZXYpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5faG92ZXJIaWRlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5faG92ZXJIaWRlSGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgaW5zdGFuY2VzLnJlbW92ZUluc3RhbmNlKCdEcm9wZG93bicsIHRoaXMuX2luc3RhbmNlSWQpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lBbmRSZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMucmVtb3ZlSW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICBfc2V0dXBFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgY29uc3QgdHJpZ2dlckV2ZW50cyA9IHRoaXMuX2dldFRyaWdnZXJFdmVudHMoKTtcblxuICAgICAgICB0aGlzLl9jbGlja0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGNsaWNrIGV2ZW50IGhhbmRsaW5nIGZvciB0cmlnZ2VyIGVsZW1lbnRcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudHJpZ2dlclR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudHMuc2hvd0V2ZW50cy5mb3JFYWNoKChldikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9jbGlja0hhbmRsZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9ob3ZlclNob3dUcmlnZ2VyRWxIYW5kbGVyID0gKGV2KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXYudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzLl9vcHRpb25zLmRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5faG92ZXJTaG93VGFyZ2V0RWxIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5faG92ZXJIaWRlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fdGFyZ2V0RWwubWF0Y2hlcygnOmhvdmVyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5fb3B0aW9ucy5kZWxheSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gaG92ZXIgZXZlbnQgaGFuZGxpbmcgZm9yIHRyaWdnZXIgZWxlbWVudFxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy50cmlnZ2VyVHlwZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50cy5zaG93RXZlbnRzLmZvckVhY2goKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgIGV2LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ob3ZlclNob3dUcmlnZ2VyRWxIYW5kbGVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICAgICBldixcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faG92ZXJTaG93VGFyZ2V0RWxIYW5kbGVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnRzLmhpZGVFdmVudHMuZm9yRWFjaCgoZXYpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5faG92ZXJIaWRlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuYWRkRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5faG92ZXJIaWRlSGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jcmVhdGVQb3BwZXJJbnN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVBvcHBlcih0aGlzLl90cmlnZ2VyRWwsIHRoaXMuX3RhcmdldEVsLCB7XG4gICAgICAgICAgICBwbGFjZW1lbnQ6IHRoaXMuX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5vZmZzZXRTa2lkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm9mZnNldERpc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3NldHVwQ2xpY2tPdXRzaWRlTGlzdGVuZXIoKSB7XG4gICAgICAgIHRoaXMuX2NsaWNrT3V0c2lkZUV2ZW50TGlzdGVuZXIgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNsaWNrT3V0c2lkZShldiwgdGhpcy5fdGFyZ2V0RWwpO1xuICAgICAgICB9O1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgdGhpcy5fY2xpY2tPdXRzaWRlRXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBfcmVtb3ZlQ2xpY2tPdXRzaWRlTGlzdGVuZXIoKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICB0aGlzLl9jbGlja091dHNpZGVFdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIF9oYW5kbGVDbGlja091dHNpZGUoZXY6IEV2ZW50LCB0YXJnZXRFbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgY2xpY2tlZEVsID0gZXYudGFyZ2V0IGFzIE5vZGU7XG5cbiAgICAgICAgLy8gSWdub3JlIGNsaWNrcyBvbiB0aGUgdHJpZ2dlciBlbGVtZW50IChpZS4gYSBkYXRlcGlja2VyIGlucHV0KVxuICAgICAgICBjb25zdCBpZ25vcmVDbGlja091dHNpZGVDbGFzcyA9IHRoaXMuX29wdGlvbnMuaWdub3JlQ2xpY2tPdXRzaWRlQ2xhc3M7XG5cbiAgICAgICAgbGV0IGlzSWdub3JlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoaWdub3JlQ2xpY2tPdXRzaWRlQ2xhc3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGlnbm9yZWRDbGlja091dHNpZGVFbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgICAgIGAuJHtpZ25vcmVDbGlja091dHNpZGVDbGFzc31gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWdub3JlZENsaWNrT3V0c2lkZUVscy5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlbC5jb250YWlucyhjbGlja2VkRWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzSWdub3JlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElnbm9yZSBjbGlja3Mgb24gdGhlIHRhcmdldCBlbGVtZW50IChpZS4gZHJvcGRvd24gaXRzZWxmKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjbGlja2VkRWwgIT09IHRhcmdldEVsICYmXG4gICAgICAgICAgICAhdGFyZ2V0RWwuY29udGFpbnMoY2xpY2tlZEVsKSAmJlxuICAgICAgICAgICAgIXRoaXMuX3RyaWdnZXJFbC5jb250YWlucyhjbGlja2VkRWwpICYmXG4gICAgICAgICAgICAhaXNJZ25vcmVkICYmXG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSgpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZ2V0VHJpZ2dlckV2ZW50cygpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9vcHRpb25zLnRyaWdnZXJUeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdob3Zlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogWydtb3VzZWVudGVyJywgJ2NsaWNrJ10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFsnbW91c2VsZWF2ZSddLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdjbGljayc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogWydjbGljayddLFxuICAgICAgICAgICAgICAgICAgICBoaWRlRXZlbnRzOiBbXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAnbm9uZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogW10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFtdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dFdmVudHM6IFsnY2xpY2snXSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZUV2ZW50czogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblRvZ2dsZSh0aGlzKTtcbiAgICB9XG5cbiAgICBpc1Zpc2libGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aXNpYmxlO1xuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCdibG9jaycpO1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG5cbiAgICAgICAgLy8gRW5hYmxlIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgdGhpcy5fcG9wcGVySW5zdGFuY2Uuc2V0T3B0aW9ucygob3B0aW9uczogUG9wcGVyT3B0aW9ucykgPT4gKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBtb2RpZmllcnM6IFtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLm1vZGlmaWVycyxcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdldmVudExpc3RlbmVycycsIGVuYWJsZWQ6IHRydWUgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0aGlzLl9zZXR1cENsaWNrT3V0c2lkZUxpc3RlbmVyKCk7XG5cbiAgICAgICAgLy8gVXBkYXRlIGl0cyBwb3NpdGlvblxuICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3codGhpcyk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LnJlbW92ZSgnYmxvY2snKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgIC8vIERpc2FibGUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZS5zZXRPcHRpb25zKChvcHRpb25zOiBQb3BwZXJPcHRpb25zKSA9PiAoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIG1vZGlmaWVyczogW1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMubW9kaWZpZXJzLFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJywgZW5hYmxlZDogZmFsc2UgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0aGlzLl92aXNpYmxlID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5fcmVtb3ZlQ2xpY2tPdXRzaWRlTGlzdGVuZXIoKTtcblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSGlkZSh0aGlzKTtcbiAgICB9XG5cbiAgICB1cGRhdGVPblNob3coY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3cgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPbkhpZGUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPblRvZ2dsZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uVG9nZ2xlID0gY2FsbGJhY2s7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdERyb3Bkb3ducygpIHtcbiAgICBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZHJvcGRvd24tdG9nZ2xlXScpXG4gICAgICAgIC5mb3JFYWNoKCgkdHJpZ2dlckVsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkcm9wZG93bklkID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZHJvcGRvd24tdG9nZ2xlJyk7XG4gICAgICAgICAgICBjb25zdCAkZHJvcGRvd25FbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRyb3Bkb3duSWQpO1xuXG4gICAgICAgICAgICBpZiAoJGRyb3Bkb3duRWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZW1lbnQgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEtZHJvcGRvd24tcGxhY2VtZW50J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0U2tpZGRpbmcgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEtZHJvcGRvd24tb2Zmc2V0LXNraWRkaW5nJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0RGlzdGFuY2UgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEtZHJvcGRvd24tb2Zmc2V0LWRpc3RhbmNlJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJpZ2dlclR5cGUgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEtZHJvcGRvd24tdHJpZ2dlcidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlbGF5ID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZHJvcGRvd24tZGVsYXknKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpZ25vcmVDbGlja091dHNpZGVDbGFzcyA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAnZGF0YS1kcm9wZG93bi1pZ25vcmUtY2xpY2stb3V0c2lkZS1jbGFzcydcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgbmV3IERyb3Bkb3duKFxuICAgICAgICAgICAgICAgICAgICAkZHJvcGRvd25FbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQgPyBwbGFjZW1lbnQgOiBEZWZhdWx0LnBsYWNlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJUeXBlOiB0cmlnZ2VyVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHJpZ2dlclR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IERlZmF1bHQudHJpZ2dlclR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRTa2lkZGluZzogb2Zmc2V0U2tpZGRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KG9mZnNldFNraWRkaW5nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogRGVmYXVsdC5vZmZzZXRTa2lkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldERpc3RhbmNlOiBvZmZzZXREaXN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcGFyc2VJbnQob2Zmc2V0RGlzdGFuY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBEZWZhdWx0Lm9mZnNldERpc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IGRlbGF5ID8gcGFyc2VJbnQoZGVsYXkpIDogRGVmYXVsdC5kZWxheSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZUNsaWNrT3V0c2lkZUNsYXNzOiBpZ25vcmVDbGlja091dHNpZGVDbGFzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaWdub3JlQ2xpY2tPdXRzaWRlQ2xhc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IERlZmF1bHQuaWdub3JlQ2xpY2tPdXRzaWRlQ2xhc3MsXG4gICAgICAgICAgICAgICAgICAgIH0gYXMgRHJvcGRvd25PcHRpb25zXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgYFRoZSBkcm9wZG93biBlbGVtZW50IHdpdGggaWQgXCIke2Ryb3Bkb3duSWR9XCIgZG9lcyBub3QgZXhpc3QuIFBsZWFzZSBjaGVjayB0aGUgZGF0YS1kcm9wZG93bi10b2dnbGUgYXR0cmlidXRlLmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LkRyb3Bkb3duID0gRHJvcGRvd247XG4gICAgd2luZG93LmluaXREcm9wZG93bnMgPSBpbml0RHJvcGRvd25zO1xufVxuXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bjtcbiIsICJpbXBvcnQgeyBpbml0QWNjb3JkaW9ucyB9IGZyb20gJy4vYWNjb3JkaW9uJztcbmltcG9ydCB7IGluaXRDYXJvdXNlbHMgfSBmcm9tICcuL2Nhcm91c2VsJztcbmltcG9ydCB7IGluaXRDb3B5Q2xpcGJvYXJkcyB9IGZyb20gJy4vY2xpcGJvYXJkJztcbmltcG9ydCB7IGluaXRDb2xsYXBzZXMgfSBmcm9tICcuL2NvbGxhcHNlJztcbmltcG9ydCB7IGluaXREaWFscyB9IGZyb20gJy4vZGlhbCc7XG5pbXBvcnQgeyBpbml0RGlzbWlzc2VzIH0gZnJvbSAnLi9kaXNtaXNzJztcbmltcG9ydCB7IGluaXREcmF3ZXJzIH0gZnJvbSAnLi9kcmF3ZXInO1xuaW1wb3J0IHsgaW5pdERyb3Bkb3ducyB9IGZyb20gJy4vZHJvcGRvd24nO1xuaW1wb3J0IHsgaW5pdElucHV0Q291bnRlcnMgfSBmcm9tICcuL2lucHV0LWNvdW50ZXInO1xuaW1wb3J0IHsgaW5pdE1vZGFscyB9IGZyb20gJy4vbW9kYWwnO1xuaW1wb3J0IHsgaW5pdFBvcG92ZXJzIH0gZnJvbSAnLi9wb3BvdmVyJztcbmltcG9ydCB7IGluaXRUYWJzIH0gZnJvbSAnLi90YWJzJztcbmltcG9ydCB7IGluaXRUb29sdGlwcyB9IGZyb20gJy4vdG9vbHRpcCc7XG5pbXBvcnQgeyBpbml0RGF0ZXBpY2tlcnMgfSBmcm9tICcuL2RhdGVwaWNrZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEZsb3diaXRlKCkge1xuICAgIGluaXRBY2NvcmRpb25zKCk7XG4gICAgaW5pdENvbGxhcHNlcygpO1xuICAgIGluaXRDYXJvdXNlbHMoKTtcbiAgICBpbml0RGlzbWlzc2VzKCk7XG4gICAgaW5pdERyb3Bkb3ducygpO1xuICAgIGluaXRNb2RhbHMoKTtcbiAgICBpbml0RHJhd2VycygpO1xuICAgIGluaXRUYWJzKCk7XG4gICAgaW5pdFRvb2x0aXBzKCk7XG4gICAgaW5pdFBvcG92ZXJzKCk7XG4gICAgaW5pdERpYWxzKCk7XG4gICAgaW5pdElucHV0Q291bnRlcnMoKTtcbiAgICBpbml0Q29weUNsaXBib2FyZHMoKTtcbiAgICBpbml0RGF0ZXBpY2tlcnMoKTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LmluaXRGbG93Yml0ZSA9IGluaXRGbG93Yml0ZTtcbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb24gKi9cbmltcG9ydCB0eXBlIHsgSW5wdXRDb3VudGVyT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBJbnN0YW5jZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9kb20vdHlwZXMnO1xuaW1wb3J0IHsgSW5wdXRDb3VudGVySW50ZXJmYWNlIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IGluc3RhbmNlcyBmcm9tICcuLi8uLi9kb20vaW5zdGFuY2VzJztcblxuY29uc3QgRGVmYXVsdDogSW5wdXRDb3VudGVyT3B0aW9ucyA9IHtcbiAgICBtaW5WYWx1ZTogbnVsbCxcbiAgICBtYXhWYWx1ZTogbnVsbCxcbiAgICBvbkluY3JlbWVudDogKCkgPT4ge30sXG4gICAgb25EZWNyZW1lbnQ6ICgpID0+IHt9LFxufTtcblxuY29uc3QgRGVmYXVsdEluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0ge1xuICAgIGlkOiBudWxsLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuY2xhc3MgSW5wdXRDb3VudGVyIGltcGxlbWVudHMgSW5wdXRDb3VudGVySW50ZXJmYWNlIHtcbiAgICBfaW5zdGFuY2VJZDogc3RyaW5nO1xuICAgIF90YXJnZXRFbDogSFRNTElucHV0RWxlbWVudCB8IG51bGw7XG4gICAgX2luY3JlbWVudEVsOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gICAgX2RlY3JlbWVudEVsOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gICAgX29wdGlvbnM6IElucHV0Q291bnRlck9wdGlvbnM7XG4gICAgX2luaXRpYWxpemVkOiBib29sZWFuO1xuICAgIF9pbmNyZW1lbnRDbGlja0hhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG4gICAgX2RlY3JlbWVudENsaWNrSGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfaW5wdXRIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHRhcmdldEVsOiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIGluY3JlbWVudEVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBkZWNyZW1lbnRFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgb3B0aW9uczogSW5wdXRDb3VudGVyT3B0aW9ucyA9IERlZmF1bHQsXG4gICAgICAgIGluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0gRGVmYXVsdEluc3RhbmNlT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZUlkID0gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA/IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgOiB0YXJnZXRFbC5pZDtcblxuICAgICAgICB0aGlzLl90YXJnZXRFbCA9IHRhcmdldEVsO1xuICAgICAgICB0aGlzLl9pbmNyZW1lbnRFbCA9IGluY3JlbWVudEVsO1xuICAgICAgICB0aGlzLl9kZWNyZW1lbnRFbCA9IGRlY3JlbWVudEVsO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIGluc3RhbmNlcy5hZGRJbnN0YW5jZShcbiAgICAgICAgICAgICdJbnB1dENvdW50ZXInLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5fdGFyZ2V0RWwgJiYgIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dEhhbmRsZXIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljXG4gICAgICAgICAgICAgICAgICAgIGlmICghL15cXGQqJC8udGVzdCh0YXJnZXQudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWdleCB0byBjaGVjayBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpY1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gdGFyZ2V0LnZhbHVlLnJlcGxhY2UoL1teXFxkXS9nLCAnJyk7IC8vIFJlbW92ZSBub24tbnVtZXJpYyBjaGFyYWN0ZXJzXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgbWF4IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubWF4VmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHRhcmdldC52YWx1ZSkgPiB0aGlzLl9vcHRpb25zLm1heFZhbHVlXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gdGhpcy5fb3B0aW9ucy5tYXhWYWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIG1pbiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm1pblZhbHVlICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCh0YXJnZXQudmFsdWUpIDwgdGhpcy5fb3B0aW9ucy5taW5WYWx1ZVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IHRoaXMuX29wdGlvbnMubWluVmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuX2luY3JlbWVudENsaWNrSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmluY3JlbWVudCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5fZGVjcmVtZW50Q2xpY2tIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjcmVtZW50KCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXIgdG8gcmVzdHJpY3QgaW5wdXQgdG8gbnVtZXJpYyB2YWx1ZXMgb25seVxuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9pbnB1dEhhbmRsZXIpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5faW5jcmVtZW50RWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmNyZW1lbnRFbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmNyZW1lbnRDbGlja0hhbmRsZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5fZGVjcmVtZW50RWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWNyZW1lbnRFbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWNyZW1lbnRDbGlja0hhbmRsZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5fdGFyZ2V0RWwgJiYgdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5faW5wdXRIYW5kbGVyKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2luY3JlbWVudEVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5jcmVtZW50RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5jcmVtZW50Q2xpY2tIYW5kbGVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9kZWNyZW1lbnRFbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlY3JlbWVudEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlY3JlbWVudENsaWNrSGFuZGxlclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIGluc3RhbmNlcy5yZW1vdmVJbnN0YW5jZSgnSW5wdXRDb3VudGVyJywgdGhpcy5faW5zdGFuY2VJZCk7XG4gICAgfVxuXG4gICAgZGVzdHJveUFuZFJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIGdldEN1cnJlbnRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuX3RhcmdldEVsLnZhbHVlKSB8fCAwO1xuICAgIH1cblxuICAgIGluY3JlbWVudCgpIHtcbiAgICAgICAgLy8gZG9uJ3QgaW5jcmVtZW50IGlmIHRoZSB2YWx1ZSBpcyBhbHJlYWR5IGF0IHRoZSBtYXhpbXVtIHZhbHVlXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubWF4VmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMuZ2V0Q3VycmVudFZhbHVlKCkgPj0gdGhpcy5fb3B0aW9ucy5tYXhWYWx1ZVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3RhcmdldEVsLnZhbHVlID0gKHRoaXMuZ2V0Q3VycmVudFZhbHVlKCkgKyAxKS50b1N0cmluZygpO1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSW5jcmVtZW50KHRoaXMpO1xuICAgIH1cblxuICAgIGRlY3JlbWVudCgpIHtcbiAgICAgICAgLy8gZG9uJ3QgZGVjcmVtZW50IGlmIHRoZSB2YWx1ZSBpcyBhbHJlYWR5IGF0IHRoZSBtaW5pbXVtIHZhbHVlXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubWluVmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMuZ2V0Q3VycmVudFZhbHVlKCkgPD0gdGhpcy5fb3B0aW9ucy5taW5WYWx1ZVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3RhcmdldEVsLnZhbHVlID0gKHRoaXMuZ2V0Q3VycmVudFZhbHVlKCkgLSAxKS50b1N0cmluZygpO1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uRGVjcmVtZW50KHRoaXMpO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uSW5jcmVtZW50KGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25JbmNyZW1lbnQgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPbkRlY3JlbWVudChjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uRGVjcmVtZW50ID0gY2FsbGJhY2s7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdElucHV0Q291bnRlcnMoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtaW5wdXQtY291bnRlcl0nKS5mb3JFYWNoKCgkdGFyZ2V0RWwpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0SWQgPSAkdGFyZ2V0RWwuaWQ7XG5cbiAgICAgICAgY29uc3QgJGluY3JlbWVudEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICdbZGF0YS1pbnB1dC1jb3VudGVyLWluY3JlbWVudD1cIicgKyB0YXJnZXRJZCArICdcIl0nXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgJGRlY3JlbWVudEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICdbZGF0YS1pbnB1dC1jb3VudGVyLWRlY3JlbWVudD1cIicgKyB0YXJnZXRJZCArICdcIl0nXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgbWluVmFsdWUgPSAkdGFyZ2V0RWwuZ2V0QXR0cmlidXRlKCdkYXRhLWlucHV0LWNvdW50ZXItbWluJyk7XG4gICAgICAgIGNvbnN0IG1heFZhbHVlID0gJHRhcmdldEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1pbnB1dC1jb3VudGVyLW1heCcpO1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZSB0YXJnZXQgZWxlbWVudCBleGlzdHNcbiAgICAgICAgaWYgKCR0YXJnZXRFbCkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFpbnN0YW5jZXMuaW5zdGFuY2VFeGlzdHMoXG4gICAgICAgICAgICAgICAgICAgICdJbnB1dENvdW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0RWwuZ2V0QXR0cmlidXRlKCdpZCcpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbmV3IElucHV0Q291bnRlcihcbiAgICAgICAgICAgICAgICAgICAgJHRhcmdldEVsIGFzIEhUTUxJbnB1dEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICRpbmNyZW1lbnRFbCA/ICgkaW5jcmVtZW50RWwgYXMgSFRNTEVsZW1lbnQpIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJGRlY3JlbWVudEVsID8gKCRkZWNyZW1lbnRFbCBhcyBIVE1MRWxlbWVudCkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5WYWx1ZTogbWluVmFsdWUgPyBwYXJzZUludChtaW5WYWx1ZSkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4VmFsdWU6IG1heFZhbHVlID8gcGFyc2VJbnQobWF4VmFsdWUpIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfSBhcyBJbnB1dENvdW50ZXJPcHRpb25zXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgYFRoZSB0YXJnZXQgZWxlbWVudCB3aXRoIGlkIFwiJHt0YXJnZXRJZH1cIiBkb2VzIG5vdCBleGlzdC4gUGxlYXNlIGNoZWNrIHRoZSBkYXRhLWlucHV0LWNvdW50ZXIgYXR0cmlidXRlLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LklucHV0Q291bnRlciA9IElucHV0Q291bnRlcjtcbiAgICB3aW5kb3cuaW5pdElucHV0Q291bnRlcnMgPSBpbml0SW5wdXRDb3VudGVycztcbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5wdXRDb3VudGVyO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiAqL1xuaW1wb3J0IHR5cGUgeyBNb2RhbE9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSW5zdGFuY2VPcHRpb25zLCBFdmVudExpc3RlbmVySW5zdGFuY2UgfSBmcm9tICcuLi8uLi9kb20vdHlwZXMnO1xuaW1wb3J0IHsgTW9kYWxJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgaW5zdGFuY2VzIGZyb20gJy4uLy4uL2RvbS9pbnN0YW5jZXMnO1xuXG5jb25zdCBEZWZhdWx0OiBNb2RhbE9wdGlvbnMgPSB7XG4gICAgcGxhY2VtZW50OiAnY2VudGVyJyxcbiAgICBiYWNrZHJvcENsYXNzZXM6ICdiZy1ncmF5LTkwMC81MCBkYXJrOmJnLWdyYXktOTAwLzgwIGZpeGVkIGluc2V0LTAgei00MCcsXG4gICAgYmFja2Ryb3A6ICdkeW5hbWljJyxcbiAgICBjbG9zYWJsZTogdHJ1ZSxcbiAgICBvbkhpZGU6ICgpID0+IHt9LFxuICAgIG9uU2hvdzogKCkgPT4ge30sXG4gICAgb25Ub2dnbGU6ICgpID0+IHt9LFxufTtcblxuY29uc3QgRGVmYXVsdEluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0ge1xuICAgIGlkOiBudWxsLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuY2xhc3MgTW9kYWwgaW1wbGVtZW50cyBNb2RhbEludGVyZmFjZSB7XG4gICAgX2luc3RhbmNlSWQ6IHN0cmluZztcbiAgICBfdGFyZ2V0RWw6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBfb3B0aW9uczogTW9kYWxPcHRpb25zO1xuICAgIF9pc0hpZGRlbjogYm9vbGVhbjtcbiAgICBfYmFja2Ryb3BFbDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIF9jbGlja091dHNpZGVFdmVudExpc3RlbmVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF9rZXlkb3duRXZlbnRMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfZXZlbnRMaXN0ZW5lckluc3RhbmNlczogRXZlbnRMaXN0ZW5lckluc3RhbmNlW10gPSBbXTtcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdGFyZ2V0RWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIG9wdGlvbnM6IE1vZGFsT3B0aW9ucyA9IERlZmF1bHQsXG4gICAgICAgIGluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0gRGVmYXVsdEluc3RhbmNlT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZUlkID0gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA/IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgOiB0YXJnZXRFbC5pZDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwgPSB0YXJnZXRFbDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHsgLi4uRGVmYXVsdCwgLi4ub3B0aW9ucyB9O1xuICAgICAgICB0aGlzLl9pc0hpZGRlbiA9IHRydWU7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wRWwgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgaW5zdGFuY2VzLmFkZEluc3RhbmNlKFxuICAgICAgICAgICAgJ01vZGFsJyxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZUlkLFxuICAgICAgICAgICAgaW5zdGFuY2VPcHRpb25zLm92ZXJyaWRlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RhcmdldEVsICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5fZ2V0UGxhY2VtZW50Q2xhc3NlcygpLm1hcCgoYykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5hZGQoYyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxFdmVudExpc3RlbmVySW5zdGFuY2VzKCk7XG4gICAgICAgICAgICB0aGlzLl9kZXN0cm95QmFja2Ryb3BFbCgpO1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICBpbnN0YW5jZXMucmVtb3ZlSW5zdGFuY2UoJ01vZGFsJywgdGhpcy5faW5zdGFuY2VJZCk7XG4gICAgfVxuXG4gICAgZGVzdHJveUFuZFJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIF9jcmVhdGVCYWNrZHJvcCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzSGlkZGVuKSB7XG4gICAgICAgICAgICBjb25zdCBiYWNrZHJvcEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBiYWNrZHJvcEVsLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgICAgICAgICAgLi4udGhpcy5fb3B0aW9ucy5iYWNrZHJvcENsYXNzZXMuc3BsaXQoJyAnKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5hcHBlbmQoYmFja2Ryb3BFbCk7XG4gICAgICAgICAgICB0aGlzLl9iYWNrZHJvcEVsID0gYmFja2Ryb3BFbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9kZXN0cm95QmFja2Ryb3BFbCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0hpZGRlbiAmJiB0aGlzLl9iYWNrZHJvcEVsKSB7XG4gICAgICAgICAgICB0aGlzLl9iYWNrZHJvcEVsLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5fYmFja2Ryb3BFbCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0dXBNb2RhbENsb3NlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmJhY2tkcm9wID09PSAnZHluYW1pYycpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrT3V0c2lkZUV2ZW50TGlzdGVuZXIgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVPdXRzaWRlQ2xpY2soZXYudGFyZ2V0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xpY2tPdXRzaWRlRXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fa2V5ZG93bkV2ZW50TGlzdGVuZXIgPSAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldi5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdrZXlkb3duJyxcbiAgICAgICAgICAgIHRoaXMuX2tleWRvd25FdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIF9yZW1vdmVNb2RhbENsb3NlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmJhY2tkcm9wID09PSAnZHluYW1pYycpIHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGlja091dHNpZGVFdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ2tleWRvd24nLFxuICAgICAgICAgICAgdGhpcy5fa2V5ZG93bkV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgX2hhbmRsZU91dHNpZGVDbGljayh0YXJnZXQ6IEV2ZW50VGFyZ2V0KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRhcmdldCA9PT0gdGhpcy5fdGFyZ2V0RWwgfHxcbiAgICAgICAgICAgICh0YXJnZXQgPT09IHRoaXMuX2JhY2tkcm9wRWwgJiYgdGhpcy5pc1Zpc2libGUoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9nZXRQbGFjZW1lbnRDbGFzc2VzKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX29wdGlvbnMucGxhY2VtZW50KSB7XG4gICAgICAgICAgICAvLyB0b3BcbiAgICAgICAgICAgIGNhc2UgJ3RvcC1sZWZ0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWydqdXN0aWZ5LXN0YXJ0JywgJ2l0ZW1zLXN0YXJ0J107XG4gICAgICAgICAgICBjYXNlICd0b3AtY2VudGVyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWydqdXN0aWZ5LWNlbnRlcicsICdpdGVtcy1zdGFydCddO1xuICAgICAgICAgICAgY2FzZSAndG9wLXJpZ2h0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWydqdXN0aWZ5LWVuZCcsICdpdGVtcy1zdGFydCddO1xuXG4gICAgICAgICAgICAvLyBjZW50ZXJcbiAgICAgICAgICAgIGNhc2UgJ2NlbnRlci1sZWZ0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWydqdXN0aWZ5LXN0YXJ0JywgJ2l0ZW1zLWNlbnRlciddO1xuICAgICAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWydqdXN0aWZ5LWNlbnRlcicsICdpdGVtcy1jZW50ZXInXTtcbiAgICAgICAgICAgIGNhc2UgJ2NlbnRlci1yaWdodCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnanVzdGlmeS1lbmQnLCAnaXRlbXMtY2VudGVyJ107XG5cbiAgICAgICAgICAgIC8vIGJvdHRvbVxuICAgICAgICAgICAgY2FzZSAnYm90dG9tLWxlZnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2p1c3RpZnktc3RhcnQnLCAnaXRlbXMtZW5kJ107XG4gICAgICAgICAgICBjYXNlICdib3R0b20tY2VudGVyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWydqdXN0aWZ5LWNlbnRlcicsICdpdGVtcy1lbmQnXTtcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbS1yaWdodCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnanVzdGlmeS1lbmQnLCAnaXRlbXMtZW5kJ107XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnanVzdGlmeS1jZW50ZXInLCAnaXRlbXMtY2VudGVyJ107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b2dnbGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0hpZGRlbikge1xuICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25Ub2dnbGUodGhpcyk7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNIaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5hZGQoJ2ZsZXgnKTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuc2V0QXR0cmlidXRlKCdhcmlhLW1vZGFsJywgJ3RydWUnKTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLnNldEF0dHJpYnV0ZSgncm9sZScsICdkaWFsb2cnKTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUJhY2tkcm9wKCk7XG4gICAgICAgICAgICB0aGlzLl9pc0hpZGRlbiA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBBZGQga2V5Ym9hcmQgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGRvY3VtZW50XG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5jbG9zYWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldHVwTW9kYWxDbG9zZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHByZXZlbnQgYm9keSBzY3JvbGxcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnb3ZlcmZsb3ctaGlkZGVuJyk7XG5cbiAgICAgICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLm9uU2hvdyh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QucmVtb3ZlKCdmbGV4Jyk7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpO1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwucmVtb3ZlQXR0cmlidXRlKCdyb2xlJyk7XG4gICAgICAgICAgICB0aGlzLl9kZXN0cm95QmFja2Ryb3BFbCgpO1xuICAgICAgICAgICAgdGhpcy5faXNIaWRkZW4gPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyByZS1hcHBseSBib2R5IHNjcm9sbFxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdvdmVyZmxvdy1oaWRkZW4nKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuY2xvc2FibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVNb2RhbENsb3NlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMub25IaWRlKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNWaXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuX2lzSGlkZGVuO1xuICAgIH1cblxuICAgIGlzSGlkZGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNIaWRkZW47XG4gICAgfVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lckluc3RhbmNlKFxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICAgICAgdHlwZTogc3RyaW5nLFxuICAgICAgICBoYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0XG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50TGlzdGVuZXJJbnN0YW5jZXMucHVzaCh7XG4gICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbW92ZUFsbEV2ZW50TGlzdGVuZXJJbnN0YW5jZXMoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50TGlzdGVuZXJJbnN0YW5jZXMubWFwKChldmVudExpc3RlbmVySW5zdGFuY2UpID0+IHtcbiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJJbnN0YW5jZS5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgZXZlbnRMaXN0ZW5lckluc3RhbmNlLnR5cGUsXG4gICAgICAgICAgICAgICAgZXZlbnRMaXN0ZW5lckluc3RhbmNlLmhhbmRsZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9ldmVudExpc3RlbmVySW5zdGFuY2VzID0gW107XG4gICAgfVxuXG4gICAgZ2V0QWxsRXZlbnRMaXN0ZW5lckluc3RhbmNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50TGlzdGVuZXJJbnN0YW5jZXM7XG4gICAgfVxuXG4gICAgdXBkYXRlT25TaG93KGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25TaG93ID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgdXBkYXRlT25IaWRlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25IaWRlID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgdXBkYXRlT25Ub2dnbGUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblRvZ2dsZSA9IGNhbGxiYWNrO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRNb2RhbHMoKSB7XG4gICAgLy8gaW5pdGlhdGUgbW9kYWwgYmFzZWQgb24gZGF0YS1tb2RhbC10YXJnZXRcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1tb2RhbC10YXJnZXRdJykuZm9yRWFjaCgoJHRyaWdnZXJFbCkgPT4ge1xuICAgICAgICBjb25zdCBtb2RhbElkID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kYWwtdGFyZ2V0Jyk7XG4gICAgICAgIGNvbnN0ICRtb2RhbEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kYWxJZCk7XG5cbiAgICAgICAgaWYgKCRtb2RhbEVsKSB7XG4gICAgICAgICAgICBjb25zdCBwbGFjZW1lbnQgPSAkbW9kYWxFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kYWwtcGxhY2VtZW50Jyk7XG4gICAgICAgICAgICBjb25zdCBiYWNrZHJvcCA9ICRtb2RhbEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1tb2RhbC1iYWNrZHJvcCcpO1xuICAgICAgICAgICAgbmV3IE1vZGFsKFxuICAgICAgICAgICAgICAgICRtb2RhbEVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQgPyBwbGFjZW1lbnQgOiBEZWZhdWx0LnBsYWNlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6IGJhY2tkcm9wID8gYmFja2Ryb3AgOiBEZWZhdWx0LmJhY2tkcm9wLFxuICAgICAgICAgICAgICAgIH0gYXMgTW9kYWxPcHRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBgTW9kYWwgd2l0aCBpZCAke21vZGFsSWR9IGRvZXMgbm90IGV4aXN0LiBBcmUgeW91IHN1cmUgdGhhdCB0aGUgZGF0YS1tb2RhbC10YXJnZXQgYXR0cmlidXRlIHBvaW50cyB0byB0aGUgY29ycmVjdCBtb2RhbCBpZD8uYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gdG9nZ2xlIG1vZGFsIHZpc2liaWxpdHlcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1tb2RhbC10b2dnbGVdJykuZm9yRWFjaCgoJHRyaWdnZXJFbCkgPT4ge1xuICAgICAgICBjb25zdCBtb2RhbElkID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kYWwtdG9nZ2xlJyk7XG4gICAgICAgIGNvbnN0ICRtb2RhbEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kYWxJZCk7XG5cbiAgICAgICAgaWYgKCRtb2RhbEVsKSB7XG4gICAgICAgICAgICBjb25zdCBtb2RhbDogTW9kYWxJbnRlcmZhY2UgPSBpbnN0YW5jZXMuZ2V0SW5zdGFuY2UoXG4gICAgICAgICAgICAgICAgJ01vZGFsJyxcbiAgICAgICAgICAgICAgICBtb2RhbElkXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAobW9kYWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b2dnbGVNb2RhbCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWwudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAkdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlTW9kYWwpO1xuICAgICAgICAgICAgICAgIG1vZGFsLmFkZEV2ZW50TGlzdGVuZXJJbnN0YW5jZShcbiAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlTW9kYWxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgTW9kYWwgd2l0aCBpZCAke21vZGFsSWR9IGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4gUGxlYXNlIGluaXRpYWxpemUgaXQgdXNpbmcgdGhlIGRhdGEtbW9kYWwtdGFyZ2V0IGF0dHJpYnV0ZS5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgYE1vZGFsIHdpdGggaWQgJHttb2RhbElkfSBkb2VzIG5vdCBleGlzdC4gQXJlIHlvdSBzdXJlIHRoYXQgdGhlIGRhdGEtbW9kYWwtdG9nZ2xlIGF0dHJpYnV0ZSBwb2ludHMgdG8gdGhlIGNvcnJlY3QgbW9kYWwgaWQ/YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gc2hvdyBtb2RhbCBvbiBjbGljayBpZiBleGlzdHMgYmFzZWQgb24gaWRcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1tb2RhbC1zaG93XScpLmZvckVhY2goKCR0cmlnZ2VyRWwpID0+IHtcbiAgICAgICAgY29uc3QgbW9kYWxJZCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLW1vZGFsLXNob3cnKTtcbiAgICAgICAgY29uc3QgJG1vZGFsRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2RhbElkKTtcblxuICAgICAgICBpZiAoJG1vZGFsRWwpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsOiBNb2RhbEludGVyZmFjZSA9IGluc3RhbmNlcy5nZXRJbnN0YW5jZShcbiAgICAgICAgICAgICAgICAnTW9kYWwnLFxuICAgICAgICAgICAgICAgIG1vZGFsSWRcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChtb2RhbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNob3dNb2RhbCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWwuc2hvdygpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJHRyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNob3dNb2RhbCk7XG4gICAgICAgICAgICAgICAgbW9kYWwuYWRkRXZlbnRMaXN0ZW5lckluc3RhbmNlKFxuICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgICAgICBzaG93TW9kYWxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgTW9kYWwgd2l0aCBpZCAke21vZGFsSWR9IGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4gUGxlYXNlIGluaXRpYWxpemUgaXQgdXNpbmcgdGhlIGRhdGEtbW9kYWwtdGFyZ2V0IGF0dHJpYnV0ZS5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgYE1vZGFsIHdpdGggaWQgJHttb2RhbElkfSBkb2VzIG5vdCBleGlzdC4gQXJlIHlvdSBzdXJlIHRoYXQgdGhlIGRhdGEtbW9kYWwtc2hvdyBhdHRyaWJ1dGUgcG9pbnRzIHRvIHRoZSBjb3JyZWN0IG1vZGFsIGlkP2BcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGhpZGUgbW9kYWwgb24gY2xpY2sgaWYgZXhpc3RzIGJhc2VkIG9uIGlkXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtbW9kYWwtaGlkZV0nKS5mb3JFYWNoKCgkdHJpZ2dlckVsKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vZGFsSWQgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1tb2RhbC1oaWRlJyk7XG4gICAgICAgIGNvbnN0ICRtb2RhbEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kYWxJZCk7XG5cbiAgICAgICAgaWYgKCRtb2RhbEVsKSB7XG4gICAgICAgICAgICBjb25zdCBtb2RhbDogTW9kYWxJbnRlcmZhY2UgPSBpbnN0YW5jZXMuZ2V0SW5zdGFuY2UoXG4gICAgICAgICAgICAgICAgJ01vZGFsJyxcbiAgICAgICAgICAgICAgICBtb2RhbElkXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAobW9kYWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoaWRlTW9kYWwgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICR0cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoaWRlTW9kYWwpO1xuICAgICAgICAgICAgICAgIG1vZGFsLmFkZEV2ZW50TGlzdGVuZXJJbnN0YW5jZShcbiAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICAgICAgaGlkZU1vZGFsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgYE1vZGFsIHdpdGggaWQgJHttb2RhbElkfSBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuIFBsZWFzZSBpbml0aWFsaXplIGl0IHVzaW5nIHRoZSBkYXRhLW1vZGFsLXRhcmdldCBhdHRyaWJ1dGUuYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIGBNb2RhbCB3aXRoIGlkICR7bW9kYWxJZH0gZG9lcyBub3QgZXhpc3QuIEFyZSB5b3Ugc3VyZSB0aGF0IHRoZSBkYXRhLW1vZGFsLWhpZGUgYXR0cmlidXRlIHBvaW50cyB0byB0aGUgY29ycmVjdCBtb2RhbCBpZD9gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpbmRvdy5Nb2RhbCA9IE1vZGFsO1xuICAgIHdpbmRvdy5pbml0TW9kYWxzID0gaW5pdE1vZGFscztcbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kYWw7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uICovXG5pbXBvcnQgeyBjcmVhdGVQb3BwZXIgfSBmcm9tICdAcG9wcGVyanMvY29yZSc7XG5pbXBvcnQgdHlwZSB7XG4gICAgT3B0aW9ucyBhcyBQb3BwZXJPcHRpb25zLFxuICAgIEluc3RhbmNlIGFzIFBvcHBlckluc3RhbmNlLFxufSBmcm9tICdAcG9wcGVyanMvY29yZSc7XG5pbXBvcnQgdHlwZSB7IFBvcG92ZXJPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEluc3RhbmNlT3B0aW9ucyB9IGZyb20gJy4uLy4uL2RvbS90eXBlcyc7XG5pbXBvcnQgeyBQb3BvdmVySW50ZXJmYWNlIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IGluc3RhbmNlcyBmcm9tICcuLi8uLi9kb20vaW5zdGFuY2VzJztcblxuY29uc3QgRGVmYXVsdDogUG9wb3Zlck9wdGlvbnMgPSB7XG4gICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICBvZmZzZXQ6IDEwLFxuICAgIHRyaWdnZXJUeXBlOiAnaG92ZXInLFxuICAgIG9uU2hvdzogKCkgPT4ge30sXG4gICAgb25IaWRlOiAoKSA9PiB7fSxcbiAgICBvblRvZ2dsZTogKCkgPT4ge30sXG59O1xuXG5jb25zdCBEZWZhdWx0SW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSB7XG4gICAgaWQ6IG51bGwsXG4gICAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5jbGFzcyBQb3BvdmVyIGltcGxlbWVudHMgUG9wb3ZlckludGVyZmFjZSB7XG4gICAgX2luc3RhbmNlSWQ6IHN0cmluZztcbiAgICBfdGFyZ2V0RWw6IEhUTUxFbGVtZW50O1xuICAgIF90cmlnZ2VyRWw6IEhUTUxFbGVtZW50O1xuICAgIF9vcHRpb25zOiBQb3BvdmVyT3B0aW9ucztcbiAgICBfcG9wcGVySW5zdGFuY2U6IFBvcHBlckluc3RhbmNlO1xuICAgIF9jbGlja091dHNpZGVFdmVudExpc3RlbmVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF9rZXlkb3duRXZlbnRMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfdmlzaWJsZTogYm9vbGVhbjtcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gICAgX3Nob3dIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF9oaWRlSGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB0YXJnZXRFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgdHJpZ2dlckVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBvcHRpb25zOiBQb3BvdmVyT3B0aW9ucyA9IERlZmF1bHQsXG4gICAgICAgIGluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0gRGVmYXVsdEluc3RhbmNlT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZUlkID0gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA/IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgOiB0YXJnZXRFbC5pZDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwgPSB0YXJnZXRFbDtcbiAgICAgICAgdGhpcy5fdHJpZ2dlckVsID0gdHJpZ2dlckVsO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgaW5zdGFuY2VzLmFkZEluc3RhbmNlKFxuICAgICAgICAgICAgJ1BvcG92ZXInLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGluc3RhbmNlT3B0aW9ucy5pZCA/IGluc3RhbmNlT3B0aW9ucy5pZCA6IHRoaXMuX3RhcmdldEVsLmlkLFxuICAgICAgICAgICAgaW5zdGFuY2VPcHRpb25zLm92ZXJyaWRlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyaWdnZXJFbCAmJiB0aGlzLl90YXJnZXRFbCAmJiAhdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldHVwRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlID0gdGhpcy5fY3JlYXRlUG9wcGVySW5zdGFuY2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyBhc3NvY2lhdGVkIHdpdGggdGhlIHRyaWdnZXIgZWxlbWVudCBhbmQgdGFyZ2V0IGVsZW1lbnRcbiAgICAgICAgICAgIGNvbnN0IHRyaWdnZXJFdmVudHMgPSB0aGlzLl9nZXRUcmlnZ2VyRXZlbnRzKCk7XG5cbiAgICAgICAgICAgIHRyaWdnZXJFdmVudHMuc2hvd0V2ZW50cy5mb3JFYWNoKChldikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9zaG93SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5fc2hvd0hhbmRsZXIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRyaWdnZXJFdmVudHMuaGlkZUV2ZW50cy5mb3JFYWNoKChldikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9oaWRlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5faGlkZUhhbmRsZXIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgZm9yIGtleWRvd25cbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUtleWRvd25MaXN0ZW5lcigpO1xuXG4gICAgICAgICAgICAvLyByZW1vdmUgZXZlbnQgbGlzdGVuZXJzIGZvciBjbGljayBvdXRzaWRlXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVDbGlja091dHNpZGVMaXN0ZW5lcigpO1xuXG4gICAgICAgICAgICAvLyBkZXN0cm95IHRoZSBQb3BwZXIgaW5zdGFuY2UgaWYgeW91IGhhdmUgb25lIChhc3N1bWluZyB0aGlzLl9wb3BwZXJJbnN0YW5jZSBpcyB0aGUgUG9wcGVyIGluc3RhbmNlKVxuICAgICAgICAgICAgaWYgKHRoaXMuX3BvcHBlckluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIGluc3RhbmNlcy5yZW1vdmVJbnN0YW5jZSgnUG9wb3ZlcicsIHRoaXMuX2luc3RhbmNlSWQpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lBbmRSZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMucmVtb3ZlSW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICBfc2V0dXBFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgY29uc3QgdHJpZ2dlckV2ZW50cyA9IHRoaXMuX2dldFRyaWdnZXJFdmVudHMoKTtcblxuICAgICAgICB0aGlzLl9zaG93SGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX2hpZGVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl90YXJnZXRFbC5tYXRjaGVzKCc6aG92ZXInKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRyaWdnZXJFdmVudHMuc2hvd0V2ZW50cy5mb3JFYWNoKChldikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoZXYsIHRoaXMuX3Nob3dIYW5kbGVyKTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmFkZEV2ZW50TGlzdGVuZXIoZXYsIHRoaXMuX3Nob3dIYW5kbGVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJpZ2dlckV2ZW50cy5oaWRlRXZlbnRzLmZvckVhY2goKGV2KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5faGlkZUhhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuYWRkRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5faGlkZUhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlUG9wcGVySW5zdGFuY2UoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVQb3BwZXIodGhpcy5fdHJpZ2dlckVsLCB0aGlzLl90YXJnZXRFbCwge1xuICAgICAgICAgICAgcGxhY2VtZW50OiB0aGlzLl9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgICAgICAgIG1vZGlmaWVyczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ29mZnNldCcsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogWzAsIHRoaXMuX29wdGlvbnMub2Zmc2V0XSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2dldFRyaWdnZXJFdmVudHMoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fb3B0aW9ucy50cmlnZ2VyVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnaG92ZXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dFdmVudHM6IFsnbW91c2VlbnRlcicsICdmb2N1cyddLFxuICAgICAgICAgICAgICAgICAgICBoaWRlRXZlbnRzOiBbJ21vdXNlbGVhdmUnLCAnYmx1ciddLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdjbGljayc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogWydjbGljaycsICdmb2N1cyddLFxuICAgICAgICAgICAgICAgICAgICBoaWRlRXZlbnRzOiBbJ2ZvY3Vzb3V0JywgJ2JsdXInXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAnbm9uZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogW10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFtdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dFdmVudHM6IFsnbW91c2VlbnRlcicsICdmb2N1cyddLFxuICAgICAgICAgICAgICAgICAgICBoaWRlRXZlbnRzOiBbJ21vdXNlbGVhdmUnLCAnYmx1ciddLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0dXBLZXlkb3duTGlzdGVuZXIoKSB7XG4gICAgICAgIHRoaXMuX2tleWRvd25FdmVudExpc3RlbmVyID0gKGV2OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXYua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAna2V5ZG93bicsXG4gICAgICAgICAgICB0aGlzLl9rZXlkb3duRXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBfcmVtb3ZlS2V5ZG93bkxpc3RlbmVyKCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAna2V5ZG93bicsXG4gICAgICAgICAgICB0aGlzLl9rZXlkb3duRXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBfc2V0dXBDbGlja091dHNpZGVMaXN0ZW5lcigpIHtcbiAgICAgICAgdGhpcy5fY2xpY2tPdXRzaWRlRXZlbnRMaXN0ZW5lciA9IChldjogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2xpY2tPdXRzaWRlKGV2LCB0aGlzLl90YXJnZXRFbCk7XG4gICAgICAgIH07XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICB0aGlzLl9jbGlja091dHNpZGVFdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIF9yZW1vdmVDbGlja091dHNpZGVMaXN0ZW5lcigpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrT3V0c2lkZUV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgX2hhbmRsZUNsaWNrT3V0c2lkZShldjogRXZlbnQsIHRhcmdldEVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBjb25zdCBjbGlja2VkRWwgPSBldi50YXJnZXQgYXMgTm9kZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY2xpY2tlZEVsICE9PSB0YXJnZXRFbCAmJlxuICAgICAgICAgICAgIXRhcmdldEVsLmNvbnRhaW5zKGNsaWNrZWRFbCkgJiZcbiAgICAgICAgICAgICF0aGlzLl90cmlnZ2VyRWwuY29udGFpbnMoY2xpY2tlZEVsKSAmJlxuICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUoKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNWaXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlzaWJsZTtcbiAgICB9XG5cbiAgICB0b2dnbGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25Ub2dnbGUodGhpcyk7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LnJlbW92ZSgnb3BhY2l0eS0wJywgJ2ludmlzaWJsZScpO1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCdvcGFjaXR5LTEwMCcsICd2aXNpYmxlJyk7XG5cbiAgICAgICAgLy8gRW5hYmxlIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgdGhpcy5fcG9wcGVySW5zdGFuY2Uuc2V0T3B0aW9ucygob3B0aW9uczogUG9wcGVyT3B0aW9ucykgPT4gKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBtb2RpZmllcnM6IFtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLm1vZGlmaWVycyxcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdldmVudExpc3RlbmVycycsIGVuYWJsZWQ6IHRydWUgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pKTtcblxuICAgICAgICAvLyBoYW5kbGUgY2xpY2sgb3V0c2lkZVxuICAgICAgICB0aGlzLl9zZXR1cENsaWNrT3V0c2lkZUxpc3RlbmVyKCk7XG5cbiAgICAgICAgLy8gaGFuZGxlIGVzYyBrZXlkb3duXG4gICAgICAgIHRoaXMuX3NldHVwS2V5ZG93bkxpc3RlbmVyKCk7XG5cbiAgICAgICAgLy8gVXBkYXRlIGl0cyBwb3NpdGlvblxuICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZS51cGRhdGUoKTtcblxuICAgICAgICAvLyBzZXQgdmlzaWJpbGl0eSB0byB0cnVlXG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSB0cnVlO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25TaG93KHRoaXMpO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5yZW1vdmUoJ29wYWNpdHktMTAwJywgJ3Zpc2libGUnKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZCgnb3BhY2l0eS0wJywgJ2ludmlzaWJsZScpO1xuXG4gICAgICAgIC8vIERpc2FibGUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZS5zZXRPcHRpb25zKChvcHRpb25zOiBQb3BwZXJPcHRpb25zKSA9PiAoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIG1vZGlmaWVyczogW1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMubW9kaWZpZXJzLFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJywgZW5hYmxlZDogZmFsc2UgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pKTtcblxuICAgICAgICAvLyBoYW5kbGUgY2xpY2sgb3V0c2lkZVxuICAgICAgICB0aGlzLl9yZW1vdmVDbGlja091dHNpZGVMaXN0ZW5lcigpO1xuXG4gICAgICAgIC8vIGhhbmRsZSBlc2Mga2V5ZG93blxuICAgICAgICB0aGlzLl9yZW1vdmVLZXlkb3duTGlzdGVuZXIoKTtcblxuICAgICAgICAvLyBzZXQgdmlzaWJpbGl0eSB0byBmYWxzZVxuICAgICAgICB0aGlzLl92aXNpYmxlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUodGhpcyk7XG4gICAgfVxuXG4gICAgdXBkYXRlT25TaG93KGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25TaG93ID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgdXBkYXRlT25IaWRlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25IaWRlID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgdXBkYXRlT25Ub2dnbGUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblRvZ2dsZSA9IGNhbGxiYWNrO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRQb3BvdmVycygpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1wb3BvdmVyLXRhcmdldF0nKS5mb3JFYWNoKCgkdHJpZ2dlckVsKSA9PiB7XG4gICAgICAgIGNvbnN0IHBvcG92ZXJJRCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXBvcG92ZXItdGFyZ2V0Jyk7XG4gICAgICAgIGNvbnN0ICRwb3BvdmVyRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwb3BvdmVySUQpO1xuXG4gICAgICAgIGlmICgkcG9wb3ZlckVsKSB7XG4gICAgICAgICAgICBjb25zdCB0cmlnZ2VyVHlwZSA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXBvcG92ZXItdHJpZ2dlcicpO1xuICAgICAgICAgICAgY29uc3QgcGxhY2VtZW50ID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcG9wb3Zlci1wbGFjZW1lbnQnKTtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXBvcG92ZXItb2Zmc2V0Jyk7XG5cbiAgICAgICAgICAgIG5ldyBQb3BvdmVyKFxuICAgICAgICAgICAgICAgICRwb3BvdmVyRWwgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgJHRyaWdnZXJFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50ID8gcGxhY2VtZW50IDogRGVmYXVsdC5wbGFjZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0ID8gcGFyc2VJbnQob2Zmc2V0KSA6IERlZmF1bHQub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyVHlwZTogdHJpZ2dlclR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJpZ2dlclR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogRGVmYXVsdC50cmlnZ2VyVHlwZSxcbiAgICAgICAgICAgICAgICB9IGFzIFBvcG92ZXJPcHRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBgVGhlIHBvcG92ZXIgZWxlbWVudCB3aXRoIGlkIFwiJHtwb3BvdmVySUR9XCIgZG9lcyBub3QgZXhpc3QuIFBsZWFzZSBjaGVjayB0aGUgZGF0YS1wb3BvdmVyLXRhcmdldCBhdHRyaWJ1dGUuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuUG9wb3ZlciA9IFBvcG92ZXI7XG4gICAgd2luZG93LmluaXRQb3BvdmVycyA9IGluaXRQb3BvdmVycztcbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9wb3ZlcjtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb24gKi9cbmltcG9ydCB0eXBlIHsgVGFiSXRlbSwgVGFic09wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSW5zdGFuY2VPcHRpb25zIH0gZnJvbSAnLi4vLi4vZG9tL3R5cGVzJztcbmltcG9ydCB7IFRhYnNJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgaW5zdGFuY2VzIGZyb20gJy4uLy4uL2RvbS9pbnN0YW5jZXMnO1xuXG5jb25zdCBEZWZhdWx0OiBUYWJzT3B0aW9ucyA9IHtcbiAgICBkZWZhdWx0VGFiSWQ6IG51bGwsXG4gICAgYWN0aXZlQ2xhc3NlczpcbiAgICAgICAgJ3RleHQtYmx1ZS02MDAgaG92ZXI6dGV4dC1ibHVlLTYwMCBkYXJrOnRleHQtYmx1ZS01MDAgZGFyazpob3Zlcjp0ZXh0LWJsdWUtNTAwIGJvcmRlci1ibHVlLTYwMCBkYXJrOmJvcmRlci1ibHVlLTUwMCcsXG4gICAgaW5hY3RpdmVDbGFzc2VzOlxuICAgICAgICAnZGFyazpib3JkZXItdHJhbnNwYXJlbnQgdGV4dC1ncmF5LTUwMCBob3Zlcjp0ZXh0LWdyYXktNjAwIGRhcms6dGV4dC1ncmF5LTQwMCBib3JkZXItZ3JheS0xMDAgaG92ZXI6Ym9yZGVyLWdyYXktMzAwIGRhcms6Ym9yZGVyLWdyYXktNzAwIGRhcms6aG92ZXI6dGV4dC1ncmF5LTMwMCcsXG4gICAgb25TaG93OiAoKSA9PiB7fSxcbn07XG5cbmNvbnN0IERlZmF1bHRJbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IHtcbiAgICBpZDogbnVsbCxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmNsYXNzIFRhYnMgaW1wbGVtZW50cyBUYWJzSW50ZXJmYWNlIHtcbiAgICBfaW5zdGFuY2VJZDogc3RyaW5nO1xuICAgIF90YWJzRWw6IEhUTUxFbGVtZW50O1xuICAgIF9pdGVtczogVGFiSXRlbVtdO1xuICAgIF9hY3RpdmVUYWI6IFRhYkl0ZW07XG4gICAgX29wdGlvbnM6IFRhYnNPcHRpb25zO1xuICAgIF9pbml0aWFsaXplZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB0YWJzRWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIGl0ZW1zOiBUYWJJdGVtW10gPSBbXSxcbiAgICAgICAgb3B0aW9uczogVGFic09wdGlvbnMgPSBEZWZhdWx0LFxuICAgICAgICBpbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IERlZmF1bHRJbnN0YW5jZU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VJZCA9IGluc3RhbmNlT3B0aW9ucy5pZCA/IGluc3RhbmNlT3B0aW9ucy5pZCA6IHRhYnNFbC5pZDtcbiAgICAgICAgdGhpcy5fdGFic0VsID0gdGFic0VsO1xuICAgICAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgICAgICB0aGlzLl9hY3RpdmVUYWIgPSBvcHRpb25zID8gdGhpcy5nZXRUYWIob3B0aW9ucy5kZWZhdWx0VGFiSWQpIDogbnVsbDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHsgLi4uRGVmYXVsdCwgLi4ub3B0aW9ucyB9O1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgaW5zdGFuY2VzLmFkZEluc3RhbmNlKFxuICAgICAgICAgICAgJ1RhYnMnLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5faXRlbXMubGVuZ3RoICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgLy8gc2V0IHRoZSBmaXJzdCB0YWIgYXMgYWN0aXZlIGlmIG5vdCBzZXQgYnkgZXhwbGljaXRseVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9hY3RpdmVUYWIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFjdGl2ZVRhYih0aGlzLl9pdGVtc1swXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGZvcmNlIHNob3cgdGhlIGZpcnN0IGRlZmF1bHQgdGFiXG4gICAgICAgICAgICB0aGlzLnNob3codGhpcy5fYWN0aXZlVGFiLmlkLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gc2hvdyB0YWIgY29udGVudCBiYXNlZCBvbiBjbGlja1xuICAgICAgICAgICAgdGhpcy5faXRlbXMubWFwKCh0YWIpID0+IHtcbiAgICAgICAgICAgICAgICB0YWIudHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyh0YWIuaWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIGluc3RhbmNlcy5yZW1vdmVJbnN0YW5jZSgnVGFicycsIHRoaXMuX2luc3RhbmNlSWQpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lBbmRSZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMucmVtb3ZlSW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICBnZXRBY3RpdmVUYWIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVUYWI7XG4gICAgfVxuXG4gICAgc2V0QWN0aXZlVGFiKHRhYjogVGFiSXRlbSkge1xuICAgICAgICB0aGlzLl9hY3RpdmVUYWIgPSB0YWI7XG4gICAgfVxuXG4gICAgZ2V0VGFiKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmZpbHRlcigodCkgPT4gdC5pZCA9PT0gaWQpWzBdO1xuICAgIH1cblxuICAgIHNob3coaWQ6IHN0cmluZywgZm9yY2VTaG93ID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgdGFiID0gdGhpcy5nZXRUYWIoaWQpO1xuXG4gICAgICAgIC8vIGRvbid0IGRvIGFueXRoaW5nIGlmIGFscmVhZHkgYWN0aXZlXG4gICAgICAgIGlmICh0YWIgPT09IHRoaXMuX2FjdGl2ZVRhYiAmJiAhZm9yY2VTaG93KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoaWRlIG90aGVyIHRhYnNcbiAgICAgICAgdGhpcy5faXRlbXMubWFwKCh0OiBUYWJJdGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAodCAhPT0gdGFiKSB7XG4gICAgICAgICAgICAgICAgdC50cmlnZ2VyRWwuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5fb3B0aW9ucy5hY3RpdmVDbGFzc2VzLnNwbGl0KCcgJylcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHQudHJpZ2dlckVsLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuX29wdGlvbnMuaW5hY3RpdmVDbGFzc2VzLnNwbGl0KCcgJylcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHQudGFyZ2V0RWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgdC50cmlnZ2VyRWwuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHNob3cgYWN0aXZlIHRhYlxuICAgICAgICB0YWIudHJpZ2dlckVsLmNsYXNzTGlzdC5hZGQoLi4udGhpcy5fb3B0aW9ucy5hY3RpdmVDbGFzc2VzLnNwbGl0KCcgJykpO1xuICAgICAgICB0YWIudHJpZ2dlckVsLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICAuLi50aGlzLl9vcHRpb25zLmluYWN0aXZlQ2xhc3Nlcy5zcGxpdCgnICcpXG4gICAgICAgICk7XG4gICAgICAgIHRhYi50cmlnZ2VyRWwuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ3RydWUnKTtcbiAgICAgICAgdGFiLnRhcmdldEVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuXG4gICAgICAgIHRoaXMuc2V0QWN0aXZlVGFiKHRhYik7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3codGhpcywgdGFiKTtcbiAgICB9XG5cbiAgICB1cGRhdGVPblNob3coY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3cgPSBjYWxsYmFjaztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0VGFicygpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10YWJzLXRvZ2dsZV0nKS5mb3JFYWNoKCgkcGFyZW50RWwpID0+IHtcbiAgICAgICAgY29uc3QgdGFiSXRlbXM6IFRhYkl0ZW1bXSA9IFtdO1xuICAgICAgICBjb25zdCBhY3RpdmVDbGFzc2VzID0gJHBhcmVudEVsLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICdkYXRhLXRhYnMtYWN0aXZlLWNsYXNzZXMnXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGluYWN0aXZlQ2xhc3NlcyA9ICRwYXJlbnRFbC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAnZGF0YS10YWJzLWluYWN0aXZlLWNsYXNzZXMnXG4gICAgICAgICk7XG4gICAgICAgIGxldCBkZWZhdWx0VGFiSWQgPSBudWxsO1xuICAgICAgICAkcGFyZW50RWxcbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT1cInRhYlwiXScpXG4gICAgICAgICAgICAuZm9yRWFjaCgoJHRyaWdnZXJFbDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0FjdGl2ZSA9XG4gICAgICAgICAgICAgICAgICAgICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJykgPT09ICd0cnVlJztcbiAgICAgICAgICAgICAgICBjb25zdCB0YWI6IFRhYkl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS10YWJzLXRhcmdldCcpLFxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyRWw6ICR0cmlnZ2VyRWwsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEVsOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFicy10YXJnZXQnKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGFiSXRlbXMucHVzaCh0YWIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRUYWJJZCA9IHRhYi5pZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBuZXcgVGFicygkcGFyZW50RWwgYXMgSFRNTEVsZW1lbnQsIHRhYkl0ZW1zLCB7XG4gICAgICAgICAgICBkZWZhdWx0VGFiSWQ6IGRlZmF1bHRUYWJJZCxcbiAgICAgICAgICAgIGFjdGl2ZUNsYXNzZXM6IGFjdGl2ZUNsYXNzZXNcbiAgICAgICAgICAgICAgICA/IGFjdGl2ZUNsYXNzZXNcbiAgICAgICAgICAgICAgICA6IERlZmF1bHQuYWN0aXZlQ2xhc3NlcyxcbiAgICAgICAgICAgIGluYWN0aXZlQ2xhc3NlczogaW5hY3RpdmVDbGFzc2VzXG4gICAgICAgICAgICAgICAgPyBpbmFjdGl2ZUNsYXNzZXNcbiAgICAgICAgICAgICAgICA6IERlZmF1bHQuaW5hY3RpdmVDbGFzc2VzLFxuICAgICAgICB9IGFzIFRhYnNPcHRpb25zKTtcbiAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LlRhYnMgPSBUYWJzO1xuICAgIHdpbmRvdy5pbml0VGFicyA9IGluaXRUYWJzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUYWJzO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiAqL1xuaW1wb3J0IHsgY3JlYXRlUG9wcGVyIH0gZnJvbSAnQHBvcHBlcmpzL2NvcmUnO1xuaW1wb3J0IHR5cGUge1xuICAgIE9wdGlvbnMgYXMgUG9wcGVyT3B0aW9ucyxcbiAgICBJbnN0YW5jZSBhcyBQb3BwZXJJbnN0YW5jZSxcbn0gZnJvbSAnQHBvcHBlcmpzL2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBUb29sdGlwT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBJbnN0YW5jZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9kb20vdHlwZXMnO1xuaW1wb3J0IHsgVG9vbHRpcEludGVyZmFjZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCBpbnN0YW5jZXMgZnJvbSAnLi4vLi4vZG9tL2luc3RhbmNlcyc7XG5cbmNvbnN0IERlZmF1bHQ6IFRvb2x0aXBPcHRpb25zID0ge1xuICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgdHJpZ2dlclR5cGU6ICdob3ZlcicsXG4gICAgb25TaG93OiAoKSA9PiB7fSxcbiAgICBvbkhpZGU6ICgpID0+IHt9LFxuICAgIG9uVG9nZ2xlOiAoKSA9PiB7fSxcbn07XG5cbmNvbnN0IERlZmF1bHRJbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IHtcbiAgICBpZDogbnVsbCxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmNsYXNzIFRvb2x0aXAgaW1wbGVtZW50cyBUb29sdGlwSW50ZXJmYWNlIHtcbiAgICBfaW5zdGFuY2VJZDogc3RyaW5nO1xuICAgIF90YXJnZXRFbDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIF90cmlnZ2VyRWw6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBfb3B0aW9uczogVG9vbHRpcE9wdGlvbnM7XG4gICAgX3BvcHBlckluc3RhbmNlOiBQb3BwZXJJbnN0YW5jZTtcbiAgICBfY2xpY2tPdXRzaWRlRXZlbnRMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfa2V5ZG93bkV2ZW50TGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG4gICAgX3Zpc2libGU6IGJvb2xlYW47XG4gICAgX2luaXRpYWxpemVkOiBib29sZWFuO1xuICAgIF9zaG93SGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfaGlkZUhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdGFyZ2V0RWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIHRyaWdnZXJFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgb3B0aW9uczogVG9vbHRpcE9wdGlvbnMgPSBEZWZhdWx0LFxuICAgICAgICBpbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IERlZmF1bHRJbnN0YW5jZU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VJZCA9IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgPyBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgIDogdGFyZ2V0RWwuaWQ7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsID0gdGFyZ2V0RWw7XG4gICAgICAgIHRoaXMuX3RyaWdnZXJFbCA9IHRyaWdnZXJFbDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHsgLi4uRGVmYXVsdCwgLi4ub3B0aW9ucyB9O1xuICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIGluc3RhbmNlcy5hZGRJbnN0YW5jZShcbiAgICAgICAgICAgICdUb29sdGlwJyxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZUlkLFxuICAgICAgICAgICAgaW5zdGFuY2VPcHRpb25zLm92ZXJyaWRlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyaWdnZXJFbCAmJiB0aGlzLl90YXJnZXRFbCAmJiAhdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldHVwRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlID0gdGhpcy5fY3JlYXRlUG9wcGVySW5zdGFuY2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyBhc3NvY2lhdGVkIHdpdGggdGhlIHRyaWdnZXIgZWxlbWVudFxuICAgICAgICAgICAgY29uc3QgdHJpZ2dlckV2ZW50cyA9IHRoaXMuX2dldFRyaWdnZXJFdmVudHMoKTtcblxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50cy5zaG93RXZlbnRzLmZvckVhY2goKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXYsIHRoaXMuX3Nob3dIYW5kbGVyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnRzLmhpZGVFdmVudHMuZm9yRWFjaCgoZXYpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5faGlkZUhhbmRsZXIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgZm9yIGtleWRvd25cbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUtleWRvd25MaXN0ZW5lcigpO1xuXG4gICAgICAgICAgICAvLyByZW1vdmUgZXZlbnQgbGlzdGVuZXJzIGZvciBjbGljayBvdXRzaWRlXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVDbGlja091dHNpZGVMaXN0ZW5lcigpO1xuXG4gICAgICAgICAgICAvLyBkZXN0cm95IHRoZSBQb3BwZXIgaW5zdGFuY2UgaWYgeW91IGhhdmUgb25lIChhc3N1bWluZyB0aGlzLl9wb3BwZXJJbnN0YW5jZSBpcyB0aGUgUG9wcGVyIGluc3RhbmNlKVxuICAgICAgICAgICAgaWYgKHRoaXMuX3BvcHBlckluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICBpbnN0YW5jZXMucmVtb3ZlSW5zdGFuY2UoJ1Rvb2x0aXAnLCB0aGlzLl9pbnN0YW5jZUlkKTtcbiAgICB9XG5cbiAgICBkZXN0cm95QW5kUmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnJlbW92ZUluc3RhbmNlKCk7XG4gICAgfVxuXG4gICAgX3NldHVwRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIGNvbnN0IHRyaWdnZXJFdmVudHMgPSB0aGlzLl9nZXRUcmlnZ2VyRXZlbnRzKCk7XG5cbiAgICAgICAgdGhpcy5fc2hvd0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9oaWRlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRyaWdnZXJFdmVudHMuc2hvd0V2ZW50cy5mb3JFYWNoKChldikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoZXYsIHRoaXMuX3Nob3dIYW5kbGVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJpZ2dlckV2ZW50cy5oaWRlRXZlbnRzLmZvckVhY2goKGV2KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5faGlkZUhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlUG9wcGVySW5zdGFuY2UoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVQb3BwZXIodGhpcy5fdHJpZ2dlckVsLCB0aGlzLl90YXJnZXRFbCwge1xuICAgICAgICAgICAgcGxhY2VtZW50OiB0aGlzLl9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgICAgICAgIG1vZGlmaWVyczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ29mZnNldCcsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogWzAsIDhdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfZ2V0VHJpZ2dlckV2ZW50cygpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9vcHRpb25zLnRyaWdnZXJUeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdob3Zlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogWydtb3VzZWVudGVyJywgJ2ZvY3VzJ10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFsnbW91c2VsZWF2ZScsICdibHVyJ10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ2NsaWNrJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnRzOiBbJ2NsaWNrJywgJ2ZvY3VzJ10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFsnZm9jdXNvdXQnLCAnYmx1ciddLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZUV2ZW50czogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogWydtb3VzZWVudGVyJywgJ2ZvY3VzJ10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFsnbW91c2VsZWF2ZScsICdibHVyJ10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXR1cEtleWRvd25MaXN0ZW5lcigpIHtcbiAgICAgICAgdGhpcy5fa2V5ZG93bkV2ZW50TGlzdGVuZXIgPSAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldi5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdrZXlkb3duJyxcbiAgICAgICAgICAgIHRoaXMuX2tleWRvd25FdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIF9yZW1vdmVLZXlkb3duTGlzdGVuZXIoKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdrZXlkb3duJyxcbiAgICAgICAgICAgIHRoaXMuX2tleWRvd25FdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIF9zZXR1cENsaWNrT3V0c2lkZUxpc3RlbmVyKCkge1xuICAgICAgICB0aGlzLl9jbGlja091dHNpZGVFdmVudExpc3RlbmVyID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVDbGlja091dHNpZGUoZXYsIHRoaXMuX3RhcmdldEVsKTtcbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrT3V0c2lkZUV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgX3JlbW92ZUNsaWNrT3V0c2lkZUxpc3RlbmVyKCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgdGhpcy5fY2xpY2tPdXRzaWRlRXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBfaGFuZGxlQ2xpY2tPdXRzaWRlKGV2OiBFdmVudCwgdGFyZ2V0RWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNsaWNrZWRFbCA9IGV2LnRhcmdldCBhcyBOb2RlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjbGlja2VkRWwgIT09IHRhcmdldEVsICYmXG4gICAgICAgICAgICAhdGFyZ2V0RWwuY29udGFpbnMoY2xpY2tlZEVsKSAmJlxuICAgICAgICAgICAgIXRoaXMuX3RyaWdnZXJFbC5jb250YWlucyhjbGlja2VkRWwpICYmXG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSgpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1Zpc2libGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aXNpYmxlO1xuICAgIH1cblxuICAgIHRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QucmVtb3ZlKCdvcGFjaXR5LTAnLCAnaW52aXNpYmxlJyk7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5hZGQoJ29wYWNpdHktMTAwJywgJ3Zpc2libGUnKTtcblxuICAgICAgICAvLyBFbmFibGUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZS5zZXRPcHRpb25zKChvcHRpb25zOiBQb3BwZXJPcHRpb25zKSA9PiAoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIG1vZGlmaWVyczogW1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMubW9kaWZpZXJzLFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJywgZW5hYmxlZDogdHJ1ZSB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIGhhbmRsZSBjbGljayBvdXRzaWRlXG4gICAgICAgIHRoaXMuX3NldHVwQ2xpY2tPdXRzaWRlTGlzdGVuZXIoKTtcblxuICAgICAgICAvLyBoYW5kbGUgZXNjIGtleWRvd25cbiAgICAgICAgdGhpcy5fc2V0dXBLZXlkb3duTGlzdGVuZXIoKTtcblxuICAgICAgICAvLyBVcGRhdGUgaXRzIHBvc2l0aW9uXG4gICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlLnVwZGF0ZSgpO1xuXG4gICAgICAgIC8vIHNldCB2aXNpYmlsaXR5XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSB0cnVlO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25TaG93KHRoaXMpO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5yZW1vdmUoJ29wYWNpdHktMTAwJywgJ3Zpc2libGUnKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZCgnb3BhY2l0eS0wJywgJ2ludmlzaWJsZScpO1xuXG4gICAgICAgIC8vIERpc2FibGUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZS5zZXRPcHRpb25zKChvcHRpb25zOiBQb3BwZXJPcHRpb25zKSA9PiAoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIG1vZGlmaWVyczogW1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMubW9kaWZpZXJzLFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJywgZW5hYmxlZDogZmFsc2UgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pKTtcblxuICAgICAgICAvLyBoYW5kbGUgY2xpY2sgb3V0c2lkZVxuICAgICAgICB0aGlzLl9yZW1vdmVDbGlja091dHNpZGVMaXN0ZW5lcigpO1xuXG4gICAgICAgIC8vIGhhbmRsZSBlc2Mga2V5ZG93blxuICAgICAgICB0aGlzLl9yZW1vdmVLZXlkb3duTGlzdGVuZXIoKTtcblxuICAgICAgICAvLyBzZXQgdmlzaWJpbGl0eVxuICAgICAgICB0aGlzLl92aXNpYmxlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUodGhpcyk7XG4gICAgfVxuXG4gICAgdXBkYXRlT25TaG93KGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25TaG93ID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgdXBkYXRlT25IaWRlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25IaWRlID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgdXBkYXRlT25Ub2dnbGUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblRvZ2dsZSA9IGNhbGxiYWNrO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRUb29sdGlwcygpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10b29sdGlwLXRhcmdldF0nKS5mb3JFYWNoKCgkdHJpZ2dlckVsKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvb2x0aXBJZCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtdGFyZ2V0Jyk7XG4gICAgICAgIGNvbnN0ICR0b29sdGlwRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0b29sdGlwSWQpO1xuXG4gICAgICAgIGlmICgkdG9vbHRpcEVsKSB7XG4gICAgICAgICAgICBjb25zdCB0cmlnZ2VyVHlwZSA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtdHJpZ2dlcicpO1xuICAgICAgICAgICAgY29uc3QgcGxhY2VtZW50ID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1wbGFjZW1lbnQnKTtcblxuICAgICAgICAgICAgbmV3IFRvb2x0aXAoXG4gICAgICAgICAgICAgICAgJHRvb2x0aXBFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAkdHJpZ2dlckVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQgPyBwbGFjZW1lbnQgOiBEZWZhdWx0LnBsYWNlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlclR5cGU6IHRyaWdnZXJUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRyaWdnZXJUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IERlZmF1bHQudHJpZ2dlclR5cGUsXG4gICAgICAgICAgICAgICAgfSBhcyBUb29sdGlwT3B0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgYFRoZSB0b29sdGlwIGVsZW1lbnQgd2l0aCBpZCBcIiR7dG9vbHRpcElkfVwiIGRvZXMgbm90IGV4aXN0LiBQbGVhc2UgY2hlY2sgdGhlIGRhdGEtdG9vbHRpcC10YXJnZXQgYXR0cmlidXRlLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LlRvb2x0aXAgPSBUb29sdGlwO1xuICAgIHdpbmRvdy5pbml0VG9vbHRpcHMgPSBpbml0VG9vbHRpcHM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXA7XG4iLCAiY2xhc3MgRXZlbnRzIHtcbiAgICBwcml2YXRlIF9ldmVudFR5cGU6IHN0cmluZztcbiAgICBwcml2YXRlIF9ldmVudEZ1bmN0aW9uczogRXZlbnRMaXN0ZW5lcltdO1xuXG4gICAgY29uc3RydWN0b3IoZXZlbnRUeXBlOiBzdHJpbmcsIGV2ZW50RnVuY3Rpb25zOiBFdmVudExpc3RlbmVyW10gPSBbXSkge1xuICAgICAgICB0aGlzLl9ldmVudFR5cGUgPSBldmVudFR5cGU7XG4gICAgICAgIHRoaXMuX2V2ZW50RnVuY3Rpb25zID0gZXZlbnRGdW5jdGlvbnM7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRGdW5jdGlvbnMuZm9yRWFjaCgoZXZlbnRGdW5jdGlvbikgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5fZXZlbnRUeXBlLCBldmVudEZ1bmN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudHM7XG4iLCAiaW1wb3J0IHsgQWNjb3JkaW9uSW50ZXJmYWNlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9hY2NvcmRpb24vaW50ZXJmYWNlJztcbmltcG9ydCB7IENhcm91c2VsSW50ZXJmYWNlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYXJvdXNlbC9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ29sbGFwc2VJbnRlcmZhY2UgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbGxhcHNlL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBEaWFsSW50ZXJmYWNlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9kaWFsL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBEaXNtaXNzSW50ZXJmYWNlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9kaXNtaXNzL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBEcmF3ZXJJbnRlcmZhY2UgfSBmcm9tICcuLi9jb21wb25lbnRzL2RyYXdlci9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRHJvcGRvd25JbnRlcmZhY2UgfSBmcm9tICcuLi9jb21wb25lbnRzL2Ryb3Bkb3duL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBNb2RhbEludGVyZmFjZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvbW9kYWwvaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvcG92ZXJJbnRlcmZhY2UgfSBmcm9tICcuLi9jb21wb25lbnRzL3BvcG92ZXIvaW50ZXJmYWNlJztcbmltcG9ydCB7IFRhYnNJbnRlcmZhY2UgfSBmcm9tICcuLi9jb21wb25lbnRzL3RhYnMvaW50ZXJmYWNlJztcbmltcG9ydCB7IFRvb2x0aXBJbnRlcmZhY2UgfSBmcm9tICcuLi9jb21wb25lbnRzL3Rvb2x0aXAvaW50ZXJmYWNlJztcbmltcG9ydCB7IElucHV0Q291bnRlckludGVyZmFjZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvaW5wdXQtY291bnRlci9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ29weUNsaXBib2FyZEludGVyZmFjZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvY2xpcGJvYXJkL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBEYXRlcGlja2VySW50ZXJmYWNlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9kYXRlcGlja2VyL2ludGVyZmFjZSc7XG5cbmNsYXNzIEluc3RhbmNlcyB7XG4gICAgcHJpdmF0ZSBfaW5zdGFuY2VzOiB7XG4gICAgICAgIEFjY29yZGlvbjogeyBbaWQ6IHN0cmluZ106IEFjY29yZGlvbkludGVyZmFjZSB9O1xuICAgICAgICBDYXJvdXNlbDogeyBbaWQ6IHN0cmluZ106IENhcm91c2VsSW50ZXJmYWNlIH07XG4gICAgICAgIENvbGxhcHNlOiB7IFtpZDogc3RyaW5nXTogQ29sbGFwc2VJbnRlcmZhY2UgfTtcbiAgICAgICAgRGlhbDogeyBbaWQ6IHN0cmluZ106IERpYWxJbnRlcmZhY2UgfTtcbiAgICAgICAgRGlzbWlzczogeyBbaWQ6IHN0cmluZ106IERpc21pc3NJbnRlcmZhY2UgfTtcbiAgICAgICAgRHJhd2VyOiB7IFtpZDogc3RyaW5nXTogRHJhd2VySW50ZXJmYWNlIH07XG4gICAgICAgIERyb3Bkb3duOiB7IFtpZDogc3RyaW5nXTogRHJvcGRvd25JbnRlcmZhY2UgfTtcbiAgICAgICAgTW9kYWw6IHsgW2lkOiBzdHJpbmddOiBNb2RhbEludGVyZmFjZSB9O1xuICAgICAgICBQb3BvdmVyOiB7IFtpZDogc3RyaW5nXTogUG9wb3ZlckludGVyZmFjZSB9O1xuICAgICAgICBUYWJzOiB7IFtpZDogc3RyaW5nXTogVGFic0ludGVyZmFjZSB9O1xuICAgICAgICBUb29sdGlwOiB7IFtpZDogc3RyaW5nXTogVG9vbHRpcEludGVyZmFjZSB9O1xuICAgICAgICBJbnB1dENvdW50ZXI6IHsgW2lkOiBzdHJpbmddOiBJbnB1dENvdW50ZXJJbnRlcmZhY2UgfTtcbiAgICAgICAgQ29weUNsaXBib2FyZDogeyBbaWQ6IHN0cmluZ106IENvcHlDbGlwYm9hcmRJbnRlcmZhY2UgfTtcbiAgICAgICAgRGF0ZXBpY2tlcjogeyBbaWQ6IHN0cmluZ106IERhdGVwaWNrZXJJbnRlcmZhY2UgfTtcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlcyA9IHtcbiAgICAgICAgICAgIEFjY29yZGlvbjoge30sXG4gICAgICAgICAgICBDYXJvdXNlbDoge30sXG4gICAgICAgICAgICBDb2xsYXBzZToge30sXG4gICAgICAgICAgICBEaWFsOiB7fSxcbiAgICAgICAgICAgIERpc21pc3M6IHt9LFxuICAgICAgICAgICAgRHJhd2VyOiB7fSxcbiAgICAgICAgICAgIERyb3Bkb3duOiB7fSxcbiAgICAgICAgICAgIE1vZGFsOiB7fSxcbiAgICAgICAgICAgIFBvcG92ZXI6IHt9LFxuICAgICAgICAgICAgVGFiczoge30sXG4gICAgICAgICAgICBUb29sdGlwOiB7fSxcbiAgICAgICAgICAgIElucHV0Q291bnRlcjoge30sXG4gICAgICAgICAgICBDb3B5Q2xpcGJvYXJkOiB7fSxcbiAgICAgICAgICAgIERhdGVwaWNrZXI6IHt9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFkZEluc3RhbmNlKFxuICAgICAgICBjb21wb25lbnQ6IGtleW9mIEluc3RhbmNlc1snX2luc3RhbmNlcyddLFxuICAgICAgICBpbnN0YW5jZTogYW55LFxuICAgICAgICBpZD86IHN0cmluZyxcbiAgICAgICAgb3ZlcnJpZGUgPSBmYWxzZVxuICAgICkge1xuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlc1tjb21wb25lbnRdKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEZsb3diaXRlOiBDb21wb25lbnQgJHtjb21wb25lbnR9IGRvZXMgbm90IGV4aXN0LmApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlc1tjb21wb25lbnRdW2lkXSAmJiAhb3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRmxvd2JpdGU6IEluc3RhbmNlIHdpdGggSUQgJHtpZH0gYWxyZWFkeSBleGlzdHMuYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3ZlcnJpZGUgJiYgdGhpcy5faW5zdGFuY2VzW2NvbXBvbmVudF1baWRdKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZXNbY29tcG9uZW50XVtpZF0uZGVzdHJveUFuZFJlbW92ZUluc3RhbmNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pbnN0YW5jZXNbY29tcG9uZW50XVtpZCA/IGlkIDogdGhpcy5fZ2VuZXJhdGVSYW5kb21JZCgpXSA9XG4gICAgICAgICAgICBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBnZXRBbGxJbnN0YW5jZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZXM7XG4gICAgfVxuXG4gICAgZ2V0SW5zdGFuY2VzKGNvbXBvbmVudDoga2V5b2YgSW5zdGFuY2VzWydfaW5zdGFuY2VzJ10pIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZXNbY29tcG9uZW50XSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBGbG93Yml0ZTogQ29tcG9uZW50ICR7Y29tcG9uZW50fSBkb2VzIG5vdCBleGlzdC5gKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VzW2NvbXBvbmVudF07XG4gICAgfVxuXG4gICAgZ2V0SW5zdGFuY2UoY29tcG9uZW50OiBrZXlvZiBJbnN0YW5jZXNbJ19pbnN0YW5jZXMnXSwgaWQ6IHN0cmluZykge1xuICAgICAgICBpZiAoIXRoaXMuX2NvbXBvbmVudEFuZEluc3RhbmNlQ2hlY2soY29tcG9uZW50LCBpZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2VzW2NvbXBvbmVudF1baWRdKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEZsb3diaXRlOiBJbnN0YW5jZSB3aXRoIElEICR7aWR9IGRvZXMgbm90IGV4aXN0LmApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZXNbY29tcG9uZW50XVtpZF0gYXMgYW55O1xuICAgIH1cblxuICAgIGRlc3Ryb3lBbmRSZW1vdmVJbnN0YW5jZShcbiAgICAgICAgY29tcG9uZW50OiBrZXlvZiBJbnN0YW5jZXNbJ19pbnN0YW5jZXMnXSxcbiAgICAgICAgaWQ6IHN0cmluZ1xuICAgICkge1xuICAgICAgICBpZiAoIXRoaXMuX2NvbXBvbmVudEFuZEluc3RhbmNlQ2hlY2soY29tcG9uZW50LCBpZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3Ryb3lJbnN0YW5jZU9iamVjdChjb21wb25lbnQsIGlkKTtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnN0YW5jZShjb21wb25lbnQsIGlkKTtcbiAgICB9XG5cbiAgICByZW1vdmVJbnN0YW5jZShjb21wb25lbnQ6IGtleW9mIEluc3RhbmNlc1snX2luc3RhbmNlcyddLCBpZDogc3RyaW5nKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29tcG9uZW50QW5kSW5zdGFuY2VDaGVjayhjb21wb25lbnQsIGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9pbnN0YW5jZXNbY29tcG9uZW50XVtpZF07XG4gICAgfVxuXG4gICAgZGVzdHJveUluc3RhbmNlT2JqZWN0KFxuICAgICAgICBjb21wb25lbnQ6IGtleW9mIEluc3RhbmNlc1snX2luc3RhbmNlcyddLFxuICAgICAgICBpZDogc3RyaW5nXG4gICAgKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29tcG9uZW50QW5kSW5zdGFuY2VDaGVjayhjb21wb25lbnQsIGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2luc3RhbmNlc1tjb21wb25lbnRdW2lkXS5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2VFeGlzdHMoY29tcG9uZW50OiBrZXlvZiBJbnN0YW5jZXNbJ19pbnN0YW5jZXMnXSwgaWQ6IHN0cmluZykge1xuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlc1tjb21wb25lbnRdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlc1tjb21wb25lbnRdW2lkXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgX2dlbmVyYXRlUmFuZG9tSWQoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY29tcG9uZW50QW5kSW5zdGFuY2VDaGVjayhcbiAgICAgICAgY29tcG9uZW50OiBrZXlvZiBJbnN0YW5jZXNbJ19pbnN0YW5jZXMnXSxcbiAgICAgICAgaWQ6IHN0cmluZ1xuICAgICkge1xuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlc1tjb21wb25lbnRdKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEZsb3diaXRlOiBDb21wb25lbnQgJHtjb21wb25lbnR9IGRvZXMgbm90IGV4aXN0LmApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZXNbY29tcG9uZW50XVtpZF0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRmxvd2JpdGU6IEluc3RhbmNlIHdpdGggSUQgJHtpZH0gZG9lcyBub3QgZXhpc3QuYCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmNvbnN0IGluc3RhbmNlcyA9IG5ldyBJbnN0YW5jZXMoKTtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdGFuY2VzO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuRmxvd2JpdGVJbnN0YW5jZXMgPSBpbnN0YW5jZXM7XG59XG4iLCAiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsICIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsICJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwgIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwgIi8vIGNvcmUgY29tcG9uZW50c1xuaW1wb3J0IEFjY29yZGlvbiwgeyBpbml0QWNjb3JkaW9ucyB9IGZyb20gJy4vY29tcG9uZW50cy9hY2NvcmRpb24nO1xuaW1wb3J0IENhcm91c2VsLCB7IGluaXRDYXJvdXNlbHMgfSBmcm9tICcuL2NvbXBvbmVudHMvY2Fyb3VzZWwnO1xuaW1wb3J0IENvbGxhcHNlLCB7IGluaXRDb2xsYXBzZXMgfSBmcm9tICcuL2NvbXBvbmVudHMvY29sbGFwc2UnO1xuaW1wb3J0IERpYWwsIHsgaW5pdERpYWxzIH0gZnJvbSAnLi9jb21wb25lbnRzL2RpYWwnO1xuaW1wb3J0IERpc21pc3MsIHsgaW5pdERpc21pc3NlcyB9IGZyb20gJy4vY29tcG9uZW50cy9kaXNtaXNzJztcbmltcG9ydCBEcmF3ZXIsIHsgaW5pdERyYXdlcnMgfSBmcm9tICcuL2NvbXBvbmVudHMvZHJhd2VyJztcbmltcG9ydCBEcm9wZG93biwgeyBpbml0RHJvcGRvd25zIH0gZnJvbSAnLi9jb21wb25lbnRzL2Ryb3Bkb3duJztcbmltcG9ydCBNb2RhbCwgeyBpbml0TW9kYWxzIH0gZnJvbSAnLi9jb21wb25lbnRzL21vZGFsJztcbmltcG9ydCBQb3BvdmVyLCB7IGluaXRQb3BvdmVycyB9IGZyb20gJy4vY29tcG9uZW50cy9wb3BvdmVyJztcbmltcG9ydCBUYWJzLCB7IGluaXRUYWJzIH0gZnJvbSAnLi9jb21wb25lbnRzL3RhYnMnO1xuaW1wb3J0IFRvb2x0aXAsIHsgaW5pdFRvb2x0aXBzIH0gZnJvbSAnLi9jb21wb25lbnRzL3Rvb2x0aXAnO1xuaW1wb3J0IElucHV0Q291bnRlciwgeyBpbml0SW5wdXRDb3VudGVycyB9IGZyb20gJy4vY29tcG9uZW50cy9pbnB1dC1jb3VudGVyJztcbmltcG9ydCBDb3B5Q2xpcGJvYXJkLCB7IGluaXRDb3B5Q2xpcGJvYXJkcyB9IGZyb20gJy4vY29tcG9uZW50cy9jbGlwYm9hcmQnO1xuaW1wb3J0IERhdGVwaWNrZXIsIHsgaW5pdERhdGVwaWNrZXJzIH0gZnJvbSAnLi9jb21wb25lbnRzL2RhdGVwaWNrZXInO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvaW5kZXgnO1xuaW1wb3J0IEV2ZW50cyBmcm9tICcuL2RvbS9ldmVudHMnO1xuXG5jb25zdCBsaXZlVmlld0xvYWRFdmVudHMgPSBuZXcgRXZlbnRzKCdwaHg6cGFnZS1sb2FkaW5nLXN0b3AnLCBbXG4gICAgaW5pdEFjY29yZGlvbnMsXG4gICAgaW5pdENvbGxhcHNlcyxcbiAgICBpbml0Q2Fyb3VzZWxzLFxuICAgIGluaXREaXNtaXNzZXMsXG4gICAgaW5pdERyb3Bkb3ducyxcbiAgICBpbml0TW9kYWxzLFxuICAgIGluaXREcmF3ZXJzLFxuICAgIGluaXRUYWJzLFxuICAgIGluaXRUb29sdGlwcyxcbiAgICBpbml0UG9wb3ZlcnMsXG4gICAgaW5pdERpYWxzLFxuICAgIGluaXRJbnB1dENvdW50ZXJzLFxuICAgIGluaXRDb3B5Q2xpcGJvYXJkcyxcbiAgICBpbml0RGF0ZXBpY2tlcnMsXG5dKTtcbmxpdmVWaWV3TG9hZEV2ZW50cy5pbml0KCk7XG5cbmNvbnN0IHJlZ3VsYXJWaWV3TG9hZEV2ZW50cyA9IG5ldyBFdmVudHMoJ2xvYWQnLCBbXG4gICAgaW5pdEFjY29yZGlvbnMsXG4gICAgaW5pdENvbGxhcHNlcyxcbiAgICBpbml0Q2Fyb3VzZWxzLFxuICAgIGluaXREaXNtaXNzZXMsXG4gICAgaW5pdERyb3Bkb3ducyxcbiAgICBpbml0TW9kYWxzLFxuICAgIGluaXREcmF3ZXJzLFxuICAgIGluaXRUYWJzLFxuICAgIGluaXRUb29sdGlwcyxcbiAgICBpbml0UG9wb3ZlcnMsXG4gICAgaW5pdERpYWxzLFxuICAgIGluaXRJbnB1dENvdW50ZXJzLFxuICAgIGluaXRDb3B5Q2xpcGJvYXJkcyxcbiAgICBpbml0RGF0ZXBpY2tlcnMsXG5dKTtcbnJlZ3VsYXJWaWV3TG9hZEV2ZW50cy5pbml0KCk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBBY2NvcmRpb24sXG4gICAgQ2Fyb3VzZWwsXG4gICAgQ29sbGFwc2UsXG4gICAgRGlhbCxcbiAgICBEcmF3ZXIsXG4gICAgRGlzbWlzcyxcbiAgICBEcm9wZG93bixcbiAgICBNb2RhbCxcbiAgICBQb3BvdmVyLFxuICAgIFRhYnMsXG4gICAgVG9vbHRpcCxcbiAgICBJbnB1dENvdW50ZXIsXG4gICAgQ29weUNsaXBib2FyZCxcbiAgICBEYXRlcGlja2VyLFxuICAgIEV2ZW50cyxcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIFBvbHlmaWxsRXZlbnQgPSBldmVudENvbnN0cnVjdG9yKCk7XG5cbiAgZnVuY3Rpb24gZXZlbnRDb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gd2luZG93LkN1c3RvbUV2ZW50O1xuICAgIC8vIElFPD05IFN1cHBvcnRcbiAgICBmdW5jdGlvbiBDdXN0b21FdmVudChldmVudCwgcGFyYW1zKSB7XG4gICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge2J1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiBmYWxzZSwgZGV0YWlsOiB1bmRlZmluZWR9O1xuICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICAgIHJldHVybiBldnQ7XG4gICAgfVxuICAgIEN1c3RvbUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG4gICAgcmV0dXJuIEN1c3RvbUV2ZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRIaWRkZW5JbnB1dChuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBpbnB1dC50eXBlID0gXCJoaWRkZW5cIjtcbiAgICBpbnB1dC5uYW1lID0gbmFtZTtcbiAgICBpbnB1dC52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGVsZW1lbnQsIHRhcmdldE1vZGlmaWVyS2V5KSB7XG4gICAgdmFyIHRvID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRvXCIpLFxuICAgICAgICBtZXRob2QgPSBidWlsZEhpZGRlbklucHV0KFwiX21ldGhvZFwiLCBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWV0aG9kXCIpKSxcbiAgICAgICAgY3NyZiA9IGJ1aWxkSGlkZGVuSW5wdXQoXCJfY3NyZl90b2tlblwiLCBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtY3NyZlwiKSksXG4gICAgICAgIGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKSxcbiAgICAgICAgc3VibWl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLFxuICAgICAgICB0YXJnZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcInRhcmdldFwiKTtcblxuICAgIGZvcm0ubWV0aG9kID0gKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikgPT09IFwiZ2V0XCIpID8gXCJnZXRcIiA6IFwicG9zdFwiO1xuICAgIGZvcm0uYWN0aW9uID0gdG87XG4gICAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICBpZiAodGFyZ2V0KSBmb3JtLnRhcmdldCA9IHRhcmdldDtcbiAgICBlbHNlIGlmICh0YXJnZXRNb2RpZmllcktleSkgZm9ybS50YXJnZXQgPSBcIl9ibGFua1wiO1xuXG4gICAgZm9ybS5hcHBlbmRDaGlsZChjc3JmKTtcbiAgICBmb3JtLmFwcGVuZENoaWxkKG1ldGhvZCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgIC8vIEluc2VydCBhIGJ1dHRvbiBhbmQgY2xpY2sgaXQgaW5zdGVhZCBvZiB1c2luZyBgZm9ybS5zdWJtaXRgXG4gICAgLy8gYmVjYXVzZSB0aGUgYHN1Ym1pdGAgZnVuY3Rpb24gZG9lcyBub3QgZW1pdCBhIGBzdWJtaXRgIGV2ZW50LlxuICAgIHN1Ym1pdC50eXBlID0gXCJzdWJtaXRcIjtcbiAgICBmb3JtLmFwcGVuZENoaWxkKHN1Ym1pdCk7XG4gICAgc3VibWl0LmNsaWNrKCk7XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IGUudGFyZ2V0O1xuICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcblxuICAgIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7XG4gICAgICB2YXIgcGhvZW5peExpbmtFdmVudCA9IG5ldyBQb2x5ZmlsbEV2ZW50KCdwaG9lbml4LmxpbmsuY2xpY2snLCB7XG4gICAgICAgIFwiYnViYmxlc1wiOiB0cnVlLCBcImNhbmNlbGFibGVcIjogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghZWxlbWVudC5kaXNwYXRjaEV2ZW50KHBob2VuaXhMaW5rRXZlbnQpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdG9cIikpIHtcbiAgICAgICAgaGFuZGxlQ2xpY2soZWxlbWVudCwgZS5tZXRhS2V5IHx8IGUuc2hpZnRLZXkpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9LCBmYWxzZSk7XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Bob2VuaXgubGluay5jbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbmZpcm1cIik7XG4gICAgaWYobWVzc2FnZSAmJiAhd2luZG93LmNvbmZpcm0obWVzc2FnZSkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sIGZhbHNlKTtcbn0pKCk7XG4iLCAiLy8gd3JhcHMgdmFsdWUgaW4gY2xvc3VyZSBvciByZXR1cm5zIGNsb3N1cmVcbmV4cG9ydCBsZXQgY2xvc3VyZSA9ICh2YWx1ZSkgPT4ge1xuICBpZih0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIil7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH0gZWxzZSB7XG4gICAgbGV0IGNsb3N1cmUgPSBmdW5jdGlvbiAoKXsgcmV0dXJuIHZhbHVlIH1cbiAgICByZXR1cm4gY2xvc3VyZVxuICB9XG59XG4iLCAiZXhwb3J0IGNvbnN0IGdsb2JhbFNlbGYgPSB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiBudWxsXG5leHBvcnQgY29uc3QgcGh4V2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IG51bGxcbmV4cG9ydCBjb25zdCBnbG9iYWwgPSBnbG9iYWxTZWxmIHx8IHBoeFdpbmRvdyB8fCBnbG9iYWxcbmV4cG9ydCBjb25zdCBERUZBVUxUX1ZTTiA9IFwiMi4wLjBcIlxuZXhwb3J0IGNvbnN0IFNPQ0tFVF9TVEFURVMgPSB7Y29ubmVjdGluZzogMCwgb3BlbjogMSwgY2xvc2luZzogMiwgY2xvc2VkOiAzfVxuZXhwb3J0IGNvbnN0IERFRkFVTFRfVElNRU9VVCA9IDEwMDAwXG5leHBvcnQgY29uc3QgV1NfQ0xPU0VfTk9STUFMID0gMTAwMFxuZXhwb3J0IGNvbnN0IENIQU5ORUxfU1RBVEVTID0ge1xuICBjbG9zZWQ6IFwiY2xvc2VkXCIsXG4gIGVycm9yZWQ6IFwiZXJyb3JlZFwiLFxuICBqb2luZWQ6IFwiam9pbmVkXCIsXG4gIGpvaW5pbmc6IFwiam9pbmluZ1wiLFxuICBsZWF2aW5nOiBcImxlYXZpbmdcIixcbn1cbmV4cG9ydCBjb25zdCBDSEFOTkVMX0VWRU5UUyA9IHtcbiAgY2xvc2U6IFwicGh4X2Nsb3NlXCIsXG4gIGVycm9yOiBcInBoeF9lcnJvclwiLFxuICBqb2luOiBcInBoeF9qb2luXCIsXG4gIHJlcGx5OiBcInBoeF9yZXBseVwiLFxuICBsZWF2ZTogXCJwaHhfbGVhdmVcIlxufVxuXG5leHBvcnQgY29uc3QgVFJBTlNQT1JUUyA9IHtcbiAgbG9uZ3BvbGw6IFwibG9uZ3BvbGxcIixcbiAgd2Vic29ja2V0OiBcIndlYnNvY2tldFwiXG59XG5leHBvcnQgY29uc3QgWEhSX1NUQVRFUyA9IHtcbiAgY29tcGxldGU6IDRcbn1cbiIsICIvKipcbiAqIEluaXRpYWxpemVzIHRoZSBQdXNoXG4gKiBAcGFyYW0ge0NoYW5uZWx9IGNoYW5uZWwgLSBUaGUgQ2hhbm5lbFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IC0gVGhlIGV2ZW50LCBmb3IgZXhhbXBsZSBgXCJwaHhfam9pblwiYFxuICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWQgLSBUaGUgcGF5bG9hZCwgZm9yIGV4YW1wbGUgYHt1c2VyX2lkOiAxMjN9YFxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXQgLSBUaGUgcHVzaCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQdXNoIHtcbiAgY29uc3RydWN0b3IoY2hhbm5lbCwgZXZlbnQsIHBheWxvYWQsIHRpbWVvdXQpe1xuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWxcbiAgICB0aGlzLmV2ZW50ID0gZXZlbnRcbiAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkIHx8IGZ1bmN0aW9uICgpeyByZXR1cm4ge30gfVxuICAgIHRoaXMucmVjZWl2ZWRSZXNwID0gbnVsbFxuICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXRcbiAgICB0aGlzLnRpbWVvdXRUaW1lciA9IG51bGxcbiAgICB0aGlzLnJlY0hvb2tzID0gW11cbiAgICB0aGlzLnNlbnQgPSBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0XG4gICAqL1xuICByZXNlbmQodGltZW91dCl7XG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dFxuICAgIHRoaXMucmVzZXQoKVxuICAgIHRoaXMuc2VuZCgpXG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gIHNlbmQoKXtcbiAgICBpZih0aGlzLmhhc1JlY2VpdmVkKFwidGltZW91dFwiKSl7IHJldHVybiB9XG4gICAgdGhpcy5zdGFydFRpbWVvdXQoKVxuICAgIHRoaXMuc2VudCA9IHRydWVcbiAgICB0aGlzLmNoYW5uZWwuc29ja2V0LnB1c2goe1xuICAgICAgdG9waWM6IHRoaXMuY2hhbm5lbC50b3BpYyxcbiAgICAgIGV2ZW50OiB0aGlzLmV2ZW50LFxuICAgICAgcGF5bG9hZDogdGhpcy5wYXlsb2FkKCksXG4gICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgam9pbl9yZWY6IHRoaXMuY2hhbm5lbC5qb2luUmVmKClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gc3RhdHVzXG4gICAqIEBwYXJhbSB7Kn0gY2FsbGJhY2tcbiAgICovXG4gIHJlY2VpdmUoc3RhdHVzLCBjYWxsYmFjayl7XG4gICAgaWYodGhpcy5oYXNSZWNlaXZlZChzdGF0dXMpKXtcbiAgICAgIGNhbGxiYWNrKHRoaXMucmVjZWl2ZWRSZXNwLnJlc3BvbnNlKVxuICAgIH1cblxuICAgIHRoaXMucmVjSG9va3MucHVzaCh7c3RhdHVzLCBjYWxsYmFja30pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVzZXQoKXtcbiAgICB0aGlzLmNhbmNlbFJlZkV2ZW50KClcbiAgICB0aGlzLnJlZiA9IG51bGxcbiAgICB0aGlzLnJlZkV2ZW50ID0gbnVsbFxuICAgIHRoaXMucmVjZWl2ZWRSZXNwID0gbnVsbFxuICAgIHRoaXMuc2VudCA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG1hdGNoUmVjZWl2ZSh7c3RhdHVzLCByZXNwb25zZSwgX3JlZn0pe1xuICAgIHRoaXMucmVjSG9va3MuZmlsdGVyKGggPT4gaC5zdGF0dXMgPT09IHN0YXR1cylcbiAgICAgIC5mb3JFYWNoKGggPT4gaC5jYWxsYmFjayhyZXNwb25zZSkpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNhbmNlbFJlZkV2ZW50KCl7XG4gICAgaWYoIXRoaXMucmVmRXZlbnQpeyByZXR1cm4gfVxuICAgIHRoaXMuY2hhbm5lbC5vZmYodGhpcy5yZWZFdmVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FuY2VsVGltZW91dCgpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRUaW1lcilcbiAgICB0aGlzLnRpbWVvdXRUaW1lciA9IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhcnRUaW1lb3V0KCl7XG4gICAgaWYodGhpcy50aW1lb3V0VGltZXIpeyB0aGlzLmNhbmNlbFRpbWVvdXQoKSB9XG4gICAgdGhpcy5yZWYgPSB0aGlzLmNoYW5uZWwuc29ja2V0Lm1ha2VSZWYoKVxuICAgIHRoaXMucmVmRXZlbnQgPSB0aGlzLmNoYW5uZWwucmVwbHlFdmVudE5hbWUodGhpcy5yZWYpXG5cbiAgICB0aGlzLmNoYW5uZWwub24odGhpcy5yZWZFdmVudCwgcGF5bG9hZCA9PiB7XG4gICAgICB0aGlzLmNhbmNlbFJlZkV2ZW50KClcbiAgICAgIHRoaXMuY2FuY2VsVGltZW91dCgpXG4gICAgICB0aGlzLnJlY2VpdmVkUmVzcCA9IHBheWxvYWRcbiAgICAgIHRoaXMubWF0Y2hSZWNlaXZlKHBheWxvYWQpXG4gICAgfSlcblxuICAgIHRoaXMudGltZW91dFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIoXCJ0aW1lb3V0XCIsIHt9KVxuICAgIH0sIHRoaXMudGltZW91dClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFzUmVjZWl2ZWQoc3RhdHVzKXtcbiAgICByZXR1cm4gdGhpcy5yZWNlaXZlZFJlc3AgJiYgdGhpcy5yZWNlaXZlZFJlc3Auc3RhdHVzID09PSBzdGF0dXNcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdHJpZ2dlcihzdGF0dXMsIHJlc3BvbnNlKXtcbiAgICB0aGlzLmNoYW5uZWwudHJpZ2dlcih0aGlzLnJlZkV2ZW50LCB7c3RhdHVzLCByZXNwb25zZX0pXG4gIH1cbn1cbiIsICIvKipcbiAqXG4gKiBDcmVhdGVzIGEgdGltZXIgdGhhdCBhY2NlcHRzIGEgYHRpbWVyQ2FsY2AgZnVuY3Rpb24gdG8gcGVyZm9ybVxuICogY2FsY3VsYXRlZCB0aW1lb3V0IHJldHJpZXMsIHN1Y2ggYXMgZXhwb25lbnRpYWwgYmFja29mZi5cbiAqXG4gKiBAZXhhbXBsZVxuICogbGV0IHJlY29ubmVjdFRpbWVyID0gbmV3IFRpbWVyKCgpID0+IHRoaXMuY29ubmVjdCgpLCBmdW5jdGlvbih0cmllcyl7XG4gKiAgIHJldHVybiBbMTAwMCwgNTAwMCwgMTAwMDBdW3RyaWVzIC0gMV0gfHwgMTAwMDBcbiAqIH0pXG4gKiByZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSAvLyBmaXJlcyBhZnRlciAxMDAwXG4gKiByZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSAvLyBmaXJlcyBhZnRlciA1MDAwXG4gKiByZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gKiByZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSAvLyBmaXJlcyBhZnRlciAxMDAwXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRpbWVyQ2FsY1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaW1lciB7XG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrLCB0aW1lckNhbGMpe1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFja1xuICAgIHRoaXMudGltZXJDYWxjID0gdGltZXJDYWxjXG4gICAgdGhpcy50aW1lciA9IG51bGxcbiAgICB0aGlzLnRyaWVzID0gMFxuICB9XG5cbiAgcmVzZXQoKXtcbiAgICB0aGlzLnRyaWVzID0gMFxuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbHMgYW55IHByZXZpb3VzIHNjaGVkdWxlVGltZW91dCBhbmQgc2NoZWR1bGVzIGNhbGxiYWNrXG4gICAqL1xuICBzY2hlZHVsZVRpbWVvdXQoKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcilcblxuICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudHJpZXMgPSB0aGlzLnRyaWVzICsgMVxuICAgICAgdGhpcy5jYWxsYmFjaygpXG4gICAgfSwgdGhpcy50aW1lckNhbGModGhpcy50cmllcyArIDEpKVxuICB9XG59XG4iLCAiaW1wb3J0IHtjbG9zdXJlfSBmcm9tIFwiLi91dGlsc1wiXG5pbXBvcnQge1xuICBDSEFOTkVMX0VWRU5UUyxcbiAgQ0hBTk5FTF9TVEFURVMsXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCBQdXNoIGZyb20gXCIuL3B1c2hcIlxuaW1wb3J0IFRpbWVyIGZyb20gXCIuL3RpbWVyXCJcblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcGljXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24pfSBwYXJhbXNcbiAqIEBwYXJhbSB7U29ja2V0fSBzb2NrZXRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhbm5lbCB7XG4gIGNvbnN0cnVjdG9yKHRvcGljLCBwYXJhbXMsIHNvY2tldCl7XG4gICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmNsb3NlZFxuICAgIHRoaXMudG9waWMgPSB0b3BpY1xuICAgIHRoaXMucGFyYW1zID0gY2xvc3VyZShwYXJhbXMgfHwge30pXG4gICAgdGhpcy5zb2NrZXQgPSBzb2NrZXRcbiAgICB0aGlzLmJpbmRpbmdzID0gW11cbiAgICB0aGlzLmJpbmRpbmdSZWYgPSAwXG4gICAgdGhpcy50aW1lb3V0ID0gdGhpcy5zb2NrZXQudGltZW91dFxuICAgIHRoaXMuam9pbmVkT25jZSA9IGZhbHNlXG4gICAgdGhpcy5qb2luUHVzaCA9IG5ldyBQdXNoKHRoaXMsIENIQU5ORUxfRVZFTlRTLmpvaW4sIHRoaXMucGFyYW1zLCB0aGlzLnRpbWVvdXQpXG4gICAgdGhpcy5wdXNoQnVmZmVyID0gW11cbiAgICB0aGlzLnN0YXRlQ2hhbmdlUmVmcyA9IFtdXG5cbiAgICB0aGlzLnJlam9pblRpbWVyID0gbmV3IFRpbWVyKCgpID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLnJlam9pbigpIH1cbiAgICB9LCB0aGlzLnNvY2tldC5yZWpvaW5BZnRlck1zKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VSZWZzLnB1c2godGhpcy5zb2NrZXQub25FcnJvcigoKSA9PiB0aGlzLnJlam9pblRpbWVyLnJlc2V0KCkpKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VSZWZzLnB1c2godGhpcy5zb2NrZXQub25PcGVuKCgpID0+IHtcbiAgICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKVxuICAgICAgaWYodGhpcy5pc0Vycm9yZWQoKSl7IHRoaXMucmVqb2luKCkgfVxuICAgIH0pXG4gICAgKVxuICAgIHRoaXMuam9pblB1c2gucmVjZWl2ZShcIm9rXCIsICgpID0+IHtcbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5qb2luZWRcbiAgICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKVxuICAgICAgdGhpcy5wdXNoQnVmZmVyLmZvckVhY2gocHVzaEV2ZW50ID0+IHB1c2hFdmVudC5zZW5kKCkpXG4gICAgICB0aGlzLnB1c2hCdWZmZXIgPSBbXVxuICAgIH0pXG4gICAgdGhpcy5qb2luUHVzaC5yZWNlaXZlKFwiZXJyb3JcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmVycm9yZWRcbiAgICAgIGlmKHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLnJlam9pblRpbWVyLnNjaGVkdWxlVGltZW91dCgpIH1cbiAgICB9KVxuICAgIHRoaXMub25DbG9zZSgoKSA9PiB7XG4gICAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KClcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGBjbG9zZSAke3RoaXMudG9waWN9ICR7dGhpcy5qb2luUmVmKCl9YClcbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5jbG9zZWRcbiAgICAgIHRoaXMuc29ja2V0LnJlbW92ZSh0aGlzKVxuICAgIH0pXG4gICAgdGhpcy5vbkVycm9yKHJlYXNvbiA9PiB7XG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBgZXJyb3IgJHt0aGlzLnRvcGljfWAsIHJlYXNvbilcbiAgICAgIGlmKHRoaXMuaXNKb2luaW5nKCkpeyB0aGlzLmpvaW5QdXNoLnJlc2V0KCkgfVxuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmVycm9yZWRcbiAgICAgIGlmKHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLnJlam9pblRpbWVyLnNjaGVkdWxlVGltZW91dCgpIH1cbiAgICB9KVxuICAgIHRoaXMuam9pblB1c2gucmVjZWl2ZShcInRpbWVvdXRcIiwgKCkgPT4ge1xuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgYHRpbWVvdXQgJHt0aGlzLnRvcGljfSAoJHt0aGlzLmpvaW5SZWYoKX0pYCwgdGhpcy5qb2luUHVzaC50aW1lb3V0KVxuICAgICAgbGV0IGxlYXZlUHVzaCA9IG5ldyBQdXNoKHRoaXMsIENIQU5ORUxfRVZFTlRTLmxlYXZlLCBjbG9zdXJlKHt9KSwgdGhpcy50aW1lb3V0KVxuICAgICAgbGVhdmVQdXNoLnNlbmQoKVxuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmVycm9yZWRcbiAgICAgIHRoaXMuam9pblB1c2gucmVzZXQoKVxuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luVGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgfVxuICAgIH0pXG4gICAgdGhpcy5vbihDSEFOTkVMX0VWRU5UUy5yZXBseSwgKHBheWxvYWQsIHJlZikgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyKHRoaXMucmVwbHlFdmVudE5hbWUocmVmKSwgcGF5bG9hZClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEpvaW4gdGhlIGNoYW5uZWxcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSB0aW1lb3V0XG4gICAqIEByZXR1cm5zIHtQdXNofVxuICAgKi9cbiAgam9pbih0aW1lb3V0ID0gdGhpcy50aW1lb3V0KXtcbiAgICBpZih0aGlzLmpvaW5lZE9uY2Upe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJpZWQgdG8gam9pbiBtdWx0aXBsZSB0aW1lcy4gJ2pvaW4nIGNhbiBvbmx5IGJlIGNhbGxlZCBhIHNpbmdsZSB0aW1lIHBlciBjaGFubmVsIGluc3RhbmNlXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXRcbiAgICAgIHRoaXMuam9pbmVkT25jZSA9IHRydWVcbiAgICAgIHRoaXMucmVqb2luKClcbiAgICAgIHJldHVybiB0aGlzLmpvaW5QdXNoXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhvb2sgaW50byBjaGFubmVsIGNsb3NlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbkNsb3NlKGNhbGxiYWNrKXtcbiAgICB0aGlzLm9uKENIQU5ORUxfRVZFTlRTLmNsb3NlLCBjYWxsYmFjaylcbiAgfVxuXG4gIC8qKlxuICAgKiBIb29rIGludG8gY2hhbm5lbCBlcnJvcnNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uRXJyb3IoY2FsbGJhY2spe1xuICAgIHJldHVybiB0aGlzLm9uKENIQU5ORUxfRVZFTlRTLmVycm9yLCByZWFzb24gPT4gY2FsbGJhY2socmVhc29uKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIG9uIGNoYW5uZWwgZXZlbnRzXG4gICAqXG4gICAqIFN1YnNjcmlwdGlvbiByZXR1cm5zIGEgcmVmIGNvdW50ZXIsIHdoaWNoIGNhbiBiZSB1c2VkIGxhdGVyIHRvXG4gICAqIHVuc3Vic2NyaWJlIHRoZSBleGFjdCBldmVudCBsaXN0ZW5lclxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCByZWYxID0gY2hhbm5lbC5vbihcImV2ZW50XCIsIGRvX3N0dWZmKVxuICAgKiBjb25zdCByZWYyID0gY2hhbm5lbC5vbihcImV2ZW50XCIsIGRvX290aGVyX3N0dWZmKVxuICAgKiBjaGFubmVsLm9mZihcImV2ZW50XCIsIHJlZjEpXG4gICAqIC8vIFNpbmNlIHVuc3Vic2NyaXB0aW9uLCBkb19zdHVmZiB3b24ndCBmaXJlLFxuICAgKiAvLyB3aGlsZSBkb19vdGhlcl9zdHVmZiB3aWxsIGtlZXAgZmlyaW5nIG9uIHRoZSBcImV2ZW50XCJcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEByZXR1cm5zIHtpbnRlZ2VyfSByZWZcbiAgICovXG4gIG9uKGV2ZW50LCBjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMuYmluZGluZ1JlZisrXG4gICAgdGhpcy5iaW5kaW5ncy5wdXNoKHtldmVudCwgcmVmLCBjYWxsYmFja30pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlcyBvZmYgb2YgY2hhbm5lbCBldmVudHNcbiAgICpcbiAgICogVXNlIHRoZSByZWYgcmV0dXJuZWQgZnJvbSBhIGNoYW5uZWwub24oKSB0byB1bnN1YnNjcmliZSBvbmVcbiAgICogaGFuZGxlciwgb3IgcGFzcyBub3RoaW5nIGZvciB0aGUgcmVmIHRvIHVuc3Vic2NyaWJlIGFsbFxuICAgKiBoYW5kbGVycyBmb3IgdGhlIGdpdmVuIGV2ZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBVbnN1YnNjcmliZSB0aGUgZG9fc3R1ZmYgaGFuZGxlclxuICAgKiBjb25zdCByZWYxID0gY2hhbm5lbC5vbihcImV2ZW50XCIsIGRvX3N0dWZmKVxuICAgKiBjaGFubmVsLm9mZihcImV2ZW50XCIsIHJlZjEpXG4gICAqXG4gICAqIC8vIFVuc3Vic2NyaWJlIGFsbCBoYW5kbGVycyBmcm9tIGV2ZW50XG4gICAqIGNoYW5uZWwub2ZmKFwiZXZlbnRcIilcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gcmVmXG4gICAqL1xuICBvZmYoZXZlbnQsIHJlZil7XG4gICAgdGhpcy5iaW5kaW5ncyA9IHRoaXMuYmluZGluZ3MuZmlsdGVyKChiaW5kKSA9PiB7XG4gICAgICByZXR1cm4gIShiaW5kLmV2ZW50ID09PSBldmVudCAmJiAodHlwZW9mIHJlZiA9PT0gXCJ1bmRlZmluZWRcIiB8fCByZWYgPT09IGJpbmQucmVmKSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjYW5QdXNoKCl7IHJldHVybiB0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpICYmIHRoaXMuaXNKb2luZWQoKSB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgbWVzc2FnZSBgZXZlbnRgIHRvIHBob2VuaXggd2l0aCB0aGUgcGF5bG9hZCBgcGF5bG9hZGAuXG4gICAqIFBob2VuaXggcmVjZWl2ZXMgdGhpcyBpbiB0aGUgYGhhbmRsZV9pbihldmVudCwgcGF5bG9hZCwgc29ja2V0KWBcbiAgICogZnVuY3Rpb24uIGlmIHBob2VuaXggcmVwbGllcyBvciBpdCB0aW1lcyBvdXQgKGRlZmF1bHQgMTAwMDBtcyksXG4gICAqIHRoZW4gb3B0aW9uYWxseSB0aGUgcmVwbHkgY2FuIGJlIHJlY2VpdmVkLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjaGFubmVsLnB1c2goXCJldmVudFwiKVxuICAgKiAgIC5yZWNlaXZlKFwib2tcIiwgcGF5bG9hZCA9PiBjb25zb2xlLmxvZyhcInBob2VuaXggcmVwbGllZDpcIiwgcGF5bG9hZCkpXG4gICAqICAgLnJlY2VpdmUoXCJlcnJvclwiLCBlcnIgPT4gY29uc29sZS5sb2coXCJwaG9lbml4IGVycm9yZWRcIiwgZXJyKSlcbiAgICogICAucmVjZWl2ZShcInRpbWVvdXRcIiwgKCkgPT4gY29uc29sZS5sb2coXCJ0aW1lZCBvdXQgcHVzaGluZ1wiKSlcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdGltZW91dF1cbiAgICogQHJldHVybnMge1B1c2h9XG4gICAqL1xuICBwdXNoKGV2ZW50LCBwYXlsb2FkLCB0aW1lb3V0ID0gdGhpcy50aW1lb3V0KXtcbiAgICBwYXlsb2FkID0gcGF5bG9hZCB8fCB7fVxuICAgIGlmKCF0aGlzLmpvaW5lZE9uY2Upe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB0cmllZCB0byBwdXNoICcke2V2ZW50fScgdG8gJyR7dGhpcy50b3BpY30nIGJlZm9yZSBqb2luaW5nLiBVc2UgY2hhbm5lbC5qb2luKCkgYmVmb3JlIHB1c2hpbmcgZXZlbnRzYClcbiAgICB9XG4gICAgbGV0IHB1c2hFdmVudCA9IG5ldyBQdXNoKHRoaXMsIGV2ZW50LCBmdW5jdGlvbiAoKXsgcmV0dXJuIHBheWxvYWQgfSwgdGltZW91dClcbiAgICBpZih0aGlzLmNhblB1c2goKSl7XG4gICAgICBwdXNoRXZlbnQuc2VuZCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2hFdmVudC5zdGFydFRpbWVvdXQoKVxuICAgICAgdGhpcy5wdXNoQnVmZmVyLnB1c2gocHVzaEV2ZW50KVxuICAgIH1cblxuICAgIHJldHVybiBwdXNoRXZlbnRcbiAgfVxuXG4gIC8qKiBMZWF2ZXMgdGhlIGNoYW5uZWxcbiAgICpcbiAgICogVW5zdWJzY3JpYmVzIGZyb20gc2VydmVyIGV2ZW50cywgYW5kXG4gICAqIGluc3RydWN0cyBjaGFubmVsIHRvIHRlcm1pbmF0ZSBvbiBzZXJ2ZXJcbiAgICpcbiAgICogVHJpZ2dlcnMgb25DbG9zZSgpIGhvb2tzXG4gICAqXG4gICAqIFRvIHJlY2VpdmUgbGVhdmUgYWNrbm93bGVkZ2VtZW50cywgdXNlIHRoZSBgcmVjZWl2ZWBcbiAgICogaG9vayB0byBiaW5kIHRvIHRoZSBzZXJ2ZXIgYWNrLCBpZTpcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY2hhbm5lbC5sZWF2ZSgpLnJlY2VpdmUoXCJva1wiLCAoKSA9PiBhbGVydChcImxlZnQhXCIpIClcbiAgICpcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSB0aW1lb3V0XG4gICAqIEByZXR1cm5zIHtQdXNofVxuICAgKi9cbiAgbGVhdmUodGltZW91dCA9IHRoaXMudGltZW91dCl7XG4gICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgdGhpcy5qb2luUHVzaC5jYW5jZWxUaW1lb3V0KClcblxuICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5sZWF2aW5nXG4gICAgbGV0IG9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBgbGVhdmUgJHt0aGlzLnRvcGljfWApXG4gICAgICB0aGlzLnRyaWdnZXIoQ0hBTk5FTF9FVkVOVFMuY2xvc2UsIFwibGVhdmVcIilcbiAgICB9XG4gICAgbGV0IGxlYXZlUHVzaCA9IG5ldyBQdXNoKHRoaXMsIENIQU5ORUxfRVZFTlRTLmxlYXZlLCBjbG9zdXJlKHt9KSwgdGltZW91dClcbiAgICBsZWF2ZVB1c2gucmVjZWl2ZShcIm9rXCIsICgpID0+IG9uQ2xvc2UoKSlcbiAgICAgIC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiBvbkNsb3NlKCkpXG4gICAgbGVhdmVQdXNoLnNlbmQoKVxuICAgIGlmKCF0aGlzLmNhblB1c2goKSl7IGxlYXZlUHVzaC50cmlnZ2VyKFwib2tcIiwge30pIH1cblxuICAgIHJldHVybiBsZWF2ZVB1c2hcbiAgfVxuXG4gIC8qKlxuICAgKiBPdmVycmlkYWJsZSBtZXNzYWdlIGhvb2tcbiAgICpcbiAgICogUmVjZWl2ZXMgYWxsIGV2ZW50cyBmb3Igc3BlY2lhbGl6ZWQgbWVzc2FnZSBoYW5kbGluZ1xuICAgKiBiZWZvcmUgZGlzcGF0Y2hpbmcgdG8gdGhlIGNoYW5uZWwgY2FsbGJhY2tzLlxuICAgKlxuICAgKiBNdXN0IHJldHVybiB0aGUgcGF5bG9hZCwgbW9kaWZpZWQgb3IgdW5tb2RpZmllZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWRcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSByZWZcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIG9uTWVzc2FnZShfZXZlbnQsIHBheWxvYWQsIF9yZWYpeyByZXR1cm4gcGF5bG9hZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc01lbWJlcih0b3BpYywgZXZlbnQsIHBheWxvYWQsIGpvaW5SZWYpe1xuICAgIGlmKHRoaXMudG9waWMgIT09IHRvcGljKXsgcmV0dXJuIGZhbHNlIH1cblxuICAgIGlmKGpvaW5SZWYgJiYgam9pblJlZiAhPT0gdGhpcy5qb2luUmVmKCkpe1xuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgXCJkcm9wcGluZyBvdXRkYXRlZCBtZXNzYWdlXCIsIHt0b3BpYywgZXZlbnQsIHBheWxvYWQsIGpvaW5SZWZ9KVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBqb2luUmVmKCl7IHJldHVybiB0aGlzLmpvaW5QdXNoLnJlZiB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZWpvaW4odGltZW91dCA9IHRoaXMudGltZW91dCl7XG4gICAgaWYodGhpcy5pc0xlYXZpbmcoKSl7IHJldHVybiB9XG4gICAgdGhpcy5zb2NrZXQubGVhdmVPcGVuVG9waWModGhpcy50b3BpYylcbiAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuam9pbmluZ1xuICAgIHRoaXMuam9pblB1c2gucmVzZW5kKHRpbWVvdXQpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRyaWdnZXIoZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pblJlZil7XG4gICAgbGV0IGhhbmRsZWRQYXlsb2FkID0gdGhpcy5vbk1lc3NhZ2UoZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pblJlZilcbiAgICBpZihwYXlsb2FkICYmICFoYW5kbGVkUGF5bG9hZCl7IHRocm93IG5ldyBFcnJvcihcImNoYW5uZWwgb25NZXNzYWdlIGNhbGxiYWNrcyBtdXN0IHJldHVybiB0aGUgcGF5bG9hZCwgbW9kaWZpZWQgb3IgdW5tb2RpZmllZFwiKSB9XG5cbiAgICBsZXQgZXZlbnRCaW5kaW5ncyA9IHRoaXMuYmluZGluZ3MuZmlsdGVyKGJpbmQgPT4gYmluZC5ldmVudCA9PT0gZXZlbnQpXG5cbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgZXZlbnRCaW5kaW5ncy5sZW5ndGg7IGkrKyl7XG4gICAgICBsZXQgYmluZCA9IGV2ZW50QmluZGluZ3NbaV1cbiAgICAgIGJpbmQuY2FsbGJhY2soaGFuZGxlZFBheWxvYWQsIHJlZiwgam9pblJlZiB8fCB0aGlzLmpvaW5SZWYoKSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlcGx5RXZlbnROYW1lKHJlZil7IHJldHVybiBgY2hhbl9yZXBseV8ke3JlZn1gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzQ2xvc2VkKCl7IHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5jbG9zZWQgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNFcnJvcmVkKCl7IHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzSm9pbmVkKCl7IHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5qb2luZWQgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNKb2luaW5nKCl7IHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5qb2luaW5nIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzTGVhdmluZygpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMubGVhdmluZyB9XG59XG4iLCAiaW1wb3J0IHtcbiAgZ2xvYmFsLFxuICBYSFJfU1RBVEVTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFqYXgge1xuXG4gIHN0YXRpYyByZXF1ZXN0KG1ldGhvZCwgZW5kUG9pbnQsIGFjY2VwdCwgYm9keSwgdGltZW91dCwgb250aW1lb3V0LCBjYWxsYmFjayl7XG4gICAgaWYoZ2xvYmFsLlhEb21haW5SZXF1ZXN0KXtcbiAgICAgIGxldCByZXEgPSBuZXcgZ2xvYmFsLlhEb21haW5SZXF1ZXN0KCkgLy8gSUU4LCBJRTlcbiAgICAgIHJldHVybiB0aGlzLnhkb21haW5SZXF1ZXN0KHJlcSwgbWV0aG9kLCBlbmRQb2ludCwgYm9keSwgdGltZW91dCwgb250aW1lb3V0LCBjYWxsYmFjaylcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHJlcSA9IG5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3QoKSAvLyBJRTcrLCBGaXJlZm94LCBDaHJvbWUsIE9wZXJhLCBTYWZhcmlcbiAgICAgIHJldHVybiB0aGlzLnhoclJlcXVlc3QocmVxLCBtZXRob2QsIGVuZFBvaW50LCBhY2NlcHQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHhkb21haW5SZXF1ZXN0KHJlcSwgbWV0aG9kLCBlbmRQb2ludCwgYm9keSwgdGltZW91dCwgb250aW1lb3V0LCBjYWxsYmFjayl7XG4gICAgcmVxLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgcmVxLm9wZW4obWV0aG9kLCBlbmRQb2ludClcbiAgICByZXEub25sb2FkID0gKCkgPT4ge1xuICAgICAgbGV0IHJlc3BvbnNlID0gdGhpcy5wYXJzZUpTT04ocmVxLnJlc3BvbnNlVGV4dClcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHJlc3BvbnNlKVxuICAgIH1cbiAgICBpZihvbnRpbWVvdXQpeyByZXEub250aW1lb3V0ID0gb250aW1lb3V0IH1cblxuICAgIC8vIFdvcmsgYXJvdW5kIGJ1ZyBpbiBJRTkgdGhhdCByZXF1aXJlcyBhbiBhdHRhY2hlZCBvbnByb2dyZXNzIGhhbmRsZXJcbiAgICByZXEub25wcm9ncmVzcyA9ICgpID0+IHsgfVxuXG4gICAgcmVxLnNlbmQoYm9keSlcbiAgICByZXR1cm4gcmVxXG4gIH1cblxuICBzdGF0aWMgeGhyUmVxdWVzdChyZXEsIG1ldGhvZCwgZW5kUG9pbnQsIGFjY2VwdCwgYm9keSwgdGltZW91dCwgb250aW1lb3V0LCBjYWxsYmFjayl7XG4gICAgcmVxLm9wZW4obWV0aG9kLCBlbmRQb2ludCwgdHJ1ZSlcbiAgICByZXEudGltZW91dCA9IHRpbWVvdXRcbiAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBhY2NlcHQpXG4gICAgcmVxLm9uZXJyb3IgPSAoKSA9PiBjYWxsYmFjayAmJiBjYWxsYmFjayhudWxsKVxuICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICBpZihyZXEucmVhZHlTdGF0ZSA9PT0gWEhSX1NUQVRFUy5jb21wbGV0ZSAmJiBjYWxsYmFjayl7XG4gICAgICAgIGxldCByZXNwb25zZSA9IHRoaXMucGFyc2VKU09OKHJlcS5yZXNwb25zZVRleHQpXG4gICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlKVxuICAgICAgfVxuICAgIH1cbiAgICBpZihvbnRpbWVvdXQpeyByZXEub250aW1lb3V0ID0gb250aW1lb3V0IH1cblxuICAgIHJlcS5zZW5kKGJvZHkpXG4gICAgcmV0dXJuIHJlcVxuICB9XG5cbiAgc3RhdGljIHBhcnNlSlNPTihyZXNwKXtcbiAgICBpZighcmVzcCB8fCByZXNwID09PSBcIlwiKXsgcmV0dXJuIG51bGwgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHJlc3ApXG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICBjb25zb2xlICYmIGNvbnNvbGUubG9nKFwiZmFpbGVkIHRvIHBhcnNlIEpTT04gcmVzcG9uc2VcIiwgcmVzcClcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHNlcmlhbGl6ZShvYmosIHBhcmVudEtleSl7XG4gICAgbGV0IHF1ZXJ5U3RyID0gW11cbiAgICBmb3IodmFyIGtleSBpbiBvYmope1xuICAgICAgaWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpeyBjb250aW51ZSB9XG4gICAgICBsZXQgcGFyYW1LZXkgPSBwYXJlbnRLZXkgPyBgJHtwYXJlbnRLZXl9WyR7a2V5fV1gIDoga2V5XG4gICAgICBsZXQgcGFyYW1WYWwgPSBvYmpba2V5XVxuICAgICAgaWYodHlwZW9mIHBhcmFtVmFsID09PSBcIm9iamVjdFwiKXtcbiAgICAgICAgcXVlcnlTdHIucHVzaCh0aGlzLnNlcmlhbGl6ZShwYXJhbVZhbCwgcGFyYW1LZXkpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVlcnlTdHIucHVzaChlbmNvZGVVUklDb21wb25lbnQocGFyYW1LZXkpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQocGFyYW1WYWwpKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcXVlcnlTdHIuam9pbihcIiZcIilcbiAgfVxuXG4gIHN0YXRpYyBhcHBlbmRQYXJhbXModXJsLCBwYXJhbXMpe1xuICAgIGlmKE9iamVjdC5rZXlzKHBhcmFtcykubGVuZ3RoID09PSAwKXsgcmV0dXJuIHVybCB9XG5cbiAgICBsZXQgcHJlZml4ID0gdXJsLm1hdGNoKC9cXD8vKSA/IFwiJlwiIDogXCI/XCJcbiAgICByZXR1cm4gYCR7dXJsfSR7cHJlZml4fSR7dGhpcy5zZXJpYWxpemUocGFyYW1zKX1gXG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBTT0NLRVRfU1RBVEVTLFxuICBUUkFOU1BPUlRTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCBBamF4IGZyb20gXCIuL2FqYXhcIlxuXG5sZXQgYXJyYXlCdWZmZXJUb0Jhc2U2NCA9IChidWZmZXIpID0+IHtcbiAgbGV0IGJpbmFyeSA9IFwiXCJcbiAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKVxuICBsZXQgbGVuID0gYnl0ZXMuYnl0ZUxlbmd0aFxuICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspeyBiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSkgfVxuICByZXR1cm4gYnRvYShiaW5hcnkpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvbmdQb2xsIHtcblxuICBjb25zdHJ1Y3RvcihlbmRQb2ludCl7XG4gICAgdGhpcy5lbmRQb2ludCA9IG51bGxcbiAgICB0aGlzLnRva2VuID0gbnVsbFxuICAgIHRoaXMuc2tpcEhlYXJ0YmVhdCA9IHRydWVcbiAgICB0aGlzLnJlcXMgPSBuZXcgU2V0KClcbiAgICB0aGlzLmF3YWl0aW5nQmF0Y2hBY2sgPSBmYWxzZVxuICAgIHRoaXMuY3VycmVudEJhdGNoID0gbnVsbFxuICAgIHRoaXMuY3VycmVudEJhdGNoVGltZXIgPSBudWxsXG4gICAgdGhpcy5iYXRjaEJ1ZmZlciA9IFtdXG4gICAgdGhpcy5vbm9wZW4gPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbmVycm9yID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgIHRoaXMub25tZXNzYWdlID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgIHRoaXMub25jbG9zZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICB0aGlzLnBvbGxFbmRwb2ludCA9IHRoaXMubm9ybWFsaXplRW5kcG9pbnQoZW5kUG9pbnQpXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU09DS0VUX1NUQVRFUy5jb25uZWN0aW5nXG4gICAgLy8gd2UgbXVzdCB3YWl0IGZvciB0aGUgY2FsbGVyIHRvIGZpbmlzaCBzZXR0aW5nIHVwIG91ciBjYWxsYmFja3MgYW5kIHRpbWVvdXQgcHJvcGVydGllc1xuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5wb2xsKCksIDApXG4gIH1cblxuICBub3JtYWxpemVFbmRwb2ludChlbmRQb2ludCl7XG4gICAgcmV0dXJuIChlbmRQb2ludFxuICAgICAgLnJlcGxhY2UoXCJ3czovL1wiLCBcImh0dHA6Ly9cIilcbiAgICAgIC5yZXBsYWNlKFwid3NzOi8vXCIsIFwiaHR0cHM6Ly9cIilcbiAgICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoLiopXFwvXCIgKyBUUkFOU1BPUlRTLndlYnNvY2tldCksIFwiJDEvXCIgKyBUUkFOU1BPUlRTLmxvbmdwb2xsKSlcbiAgfVxuXG4gIGVuZHBvaW50VVJMKCl7XG4gICAgcmV0dXJuIEFqYXguYXBwZW5kUGFyYW1zKHRoaXMucG9sbEVuZHBvaW50LCB7dG9rZW46IHRoaXMudG9rZW59KVxuICB9XG5cbiAgY2xvc2VBbmRSZXRyeShjb2RlLCByZWFzb24sIHdhc0NsZWFuKXtcbiAgICB0aGlzLmNsb3NlKGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4pXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU09DS0VUX1NUQVRFUy5jb25uZWN0aW5nXG4gIH1cblxuICBvbnRpbWVvdXQoKXtcbiAgICB0aGlzLm9uZXJyb3IoXCJ0aW1lb3V0XCIpXG4gICAgdGhpcy5jbG9zZUFuZFJldHJ5KDEwMDUsIFwidGltZW91dFwiLCBmYWxzZSlcbiAgfVxuXG4gIGlzQWN0aXZlKCl7IHJldHVybiB0aGlzLnJlYWR5U3RhdGUgPT09IFNPQ0tFVF9TVEFURVMub3BlbiB8fCB0aGlzLnJlYWR5U3RhdGUgPT09IFNPQ0tFVF9TVEFURVMuY29ubmVjdGluZyB9XG5cbiAgcG9sbCgpe1xuICAgIHRoaXMuYWpheChcIkdFVFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIiwgbnVsbCwgKCkgPT4gdGhpcy5vbnRpbWVvdXQoKSwgcmVzcCA9PiB7XG4gICAgICBpZihyZXNwKXtcbiAgICAgICAgdmFyIHtzdGF0dXMsIHRva2VuLCBtZXNzYWdlc30gPSByZXNwXG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdHVzID0gMFxuICAgICAgfVxuXG4gICAgICBzd2l0Y2goc3RhdHVzKXtcbiAgICAgICAgY2FzZSAyMDA6XG4gICAgICAgICAgbWVzc2FnZXMuZm9yRWFjaChtc2cgPT4ge1xuICAgICAgICAgICAgLy8gVGFza3MgYXJlIHdoYXQgdGhpbmdzIGxpa2UgZXZlbnQgaGFuZGxlcnMsIHNldFRpbWVvdXQgY2FsbGJhY2tzLFxuICAgICAgICAgICAgLy8gcHJvbWlzZSByZXNvbHZlcyBhbmQgbW9yZSBhcmUgcnVuIHdpdGhpbi5cbiAgICAgICAgICAgIC8vIEluIG1vZGVybiBicm93c2VycywgdGhlcmUgYXJlIHR3byBkaWZmZXJlbnQga2luZHMgb2YgdGFza3MsXG4gICAgICAgICAgICAvLyBtaWNyb3Rhc2tzIGFuZCBtYWNyb3Rhc2tzLlxuICAgICAgICAgICAgLy8gTWljcm90YXNrcyBhcmUgbWFpbmx5IHVzZWQgZm9yIFByb21pc2VzLCB3aGlsZSBtYWNyb3Rhc2tzIGFyZVxuICAgICAgICAgICAgLy8gdXNlZCBmb3IgZXZlcnl0aGluZyBlbHNlLlxuICAgICAgICAgICAgLy8gTWljcm90YXNrcyBhbHdheXMgaGF2ZSBwcmlvcml0eSBvdmVyIG1hY3JvdGFza3MuIElmIHRoZSBKUyBlbmdpbmVcbiAgICAgICAgICAgIC8vIGlzIGxvb2tpbmcgZm9yIGEgdGFzayB0byBydW4sIGl0IHdpbGwgYWx3YXlzIHRyeSB0byBlbXB0eSB0aGVcbiAgICAgICAgICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBiZWZvcmUgYXR0ZW1wdGluZyB0byBydW4gYW55dGhpbmcgZnJvbSB0aGVcbiAgICAgICAgICAgIC8vIG1hY3JvdGFzayBxdWV1ZS5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBGb3IgdGhlIFdlYlNvY2tldCB0cmFuc3BvcnQsIG1lc3NhZ2VzIGFsd2F5cyBhcnJpdmUgaW4gdGhlaXIgb3duXG4gICAgICAgICAgICAvLyBldmVudC4gVGhpcyBtZWFucyB0aGF0IGlmIGFueSBwcm9taXNlcyBhcmUgcmVzb2x2ZWQgZnJvbSB3aXRoaW4sXG4gICAgICAgICAgICAvLyB0aGVpciBjYWxsYmFja3Mgd2lsbCBhbHdheXMgZmluaXNoIGV4ZWN1dGlvbiBieSB0aGUgdGltZSB0aGVcbiAgICAgICAgICAgIC8vIG5leHQgbWVzc2FnZSBldmVudCBoYW5kbGVyIGlzIHJ1bi5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBJbiBvcmRlciB0byBlbXVsYXRlIHRoaXMgYmVoYXZpb3VyLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSBlYWNoXG4gICAgICAgICAgICAvLyBvbm1lc3NhZ2UgaGFuZGxlciBpcyBydW4gd2l0aGluIGl0cyBvd24gbWFjcm90YXNrLlxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLm9ubWVzc2FnZSh7ZGF0YTogbXNnfSksIDApXG4gICAgICAgICAgfSlcbiAgICAgICAgICB0aGlzLnBvbGwoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjA0OlxuICAgICAgICAgIHRoaXMucG9sbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0MTA6XG4gICAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gU09DS0VUX1NUQVRFUy5vcGVuXG4gICAgICAgICAgdGhpcy5vbm9wZW4oe30pXG4gICAgICAgICAgdGhpcy5wb2xsKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQwMzpcbiAgICAgICAgICB0aGlzLm9uZXJyb3IoNDAzKVxuICAgICAgICAgIHRoaXMuY2xvc2UoMTAwOCwgXCJmb3JiaWRkZW5cIiwgZmFsc2UpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIDUwMDpcbiAgICAgICAgICB0aGlzLm9uZXJyb3IoNTAwKVxuICAgICAgICAgIHRoaXMuY2xvc2VBbmRSZXRyeSgxMDExLCBcImludGVybmFsIHNlcnZlciBlcnJvclwiLCA1MDApXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKGB1bmhhbmRsZWQgcG9sbCBzdGF0dXMgJHtzdGF0dXN9YClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gd2UgY29sbGVjdCBhbGwgcHVzaGVzIHdpdGhpbiB0aGUgY3VycmVudCBldmVudCBsb29wIGJ5XG4gIC8vIHNldFRpbWVvdXQgMCwgd2hpY2ggb3B0aW1pemVzIGJhY2stdG8tYmFjayBwcm9jZWR1cmFsXG4gIC8vIHB1c2hlcyBhZ2FpbnN0IGFuIGVtcHR5IGJ1ZmZlclxuXG4gIHNlbmQoYm9keSl7XG4gICAgaWYodHlwZW9mKGJvZHkpICE9PSBcInN0cmluZ1wiKXsgYm9keSA9IGFycmF5QnVmZmVyVG9CYXNlNjQoYm9keSkgfVxuICAgIGlmKHRoaXMuY3VycmVudEJhdGNoKXtcbiAgICAgIHRoaXMuY3VycmVudEJhdGNoLnB1c2goYm9keSlcbiAgICB9IGVsc2UgaWYodGhpcy5hd2FpdGluZ0JhdGNoQWNrKXtcbiAgICAgIHRoaXMuYmF0Y2hCdWZmZXIucHVzaChib2R5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnRCYXRjaCA9IFtib2R5XVxuICAgICAgdGhpcy5jdXJyZW50QmF0Y2hUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmJhdGNoU2VuZCh0aGlzLmN1cnJlbnRCYXRjaClcbiAgICAgICAgdGhpcy5jdXJyZW50QmF0Y2ggPSBudWxsXG4gICAgICB9LCAwKVxuICAgIH1cbiAgfVxuXG4gIGJhdGNoU2VuZChtZXNzYWdlcyl7XG4gICAgdGhpcy5hd2FpdGluZ0JhdGNoQWNrID0gdHJ1ZVxuICAgIHRoaXMuYWpheChcIlBPU1RcIiwgXCJhcHBsaWNhdGlvbi94LW5kanNvblwiLCBtZXNzYWdlcy5qb2luKFwiXFxuXCIpLCAoKSA9PiB0aGlzLm9uZXJyb3IoXCJ0aW1lb3V0XCIpLCByZXNwID0+IHtcbiAgICAgIHRoaXMuYXdhaXRpbmdCYXRjaEFjayA9IGZhbHNlXG4gICAgICBpZighcmVzcCB8fCByZXNwLnN0YXR1cyAhPT0gMjAwKXtcbiAgICAgICAgdGhpcy5vbmVycm9yKHJlc3AgJiYgcmVzcC5zdGF0dXMpXG4gICAgICAgIHRoaXMuY2xvc2VBbmRSZXRyeSgxMDExLCBcImludGVybmFsIHNlcnZlciBlcnJvclwiLCBmYWxzZSlcbiAgICAgIH0gZWxzZSBpZih0aGlzLmJhdGNoQnVmZmVyLmxlbmd0aCA+IDApe1xuICAgICAgICB0aGlzLmJhdGNoU2VuZCh0aGlzLmJhdGNoQnVmZmVyKVxuICAgICAgICB0aGlzLmJhdGNoQnVmZmVyID0gW11cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgY2xvc2UoY29kZSwgcmVhc29uLCB3YXNDbGVhbil7XG4gICAgZm9yKGxldCByZXEgb2YgdGhpcy5yZXFzKXsgcmVxLmFib3J0KCkgfVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNPQ0tFVF9TVEFURVMuY2xvc2VkXG4gICAgbGV0IG9wdHMgPSBPYmplY3QuYXNzaWduKHtjb2RlOiAxMDAwLCByZWFzb246IHVuZGVmaW5lZCwgd2FzQ2xlYW46IHRydWV9LCB7Y29kZSwgcmVhc29uLCB3YXNDbGVhbn0pXG4gICAgdGhpcy5iYXRjaEJ1ZmZlciA9IFtdXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuY3VycmVudEJhdGNoVGltZXIpXG4gICAgdGhpcy5jdXJyZW50QmF0Y2hUaW1lciA9IG51bGxcbiAgICBpZih0eXBlb2YoQ2xvc2VFdmVudCkgIT09IFwidW5kZWZpbmVkXCIpe1xuICAgICAgdGhpcy5vbmNsb3NlKG5ldyBDbG9zZUV2ZW50KFwiY2xvc2VcIiwgb3B0cykpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub25jbG9zZShvcHRzKVxuICAgIH1cbiAgfVxuXG4gIGFqYXgobWV0aG9kLCBjb250ZW50VHlwZSwgYm9keSwgb25DYWxsZXJUaW1lb3V0LCBjYWxsYmFjayl7XG4gICAgbGV0IHJlcVxuICAgIGxldCBvbnRpbWVvdXQgPSAoKSA9PiB7XG4gICAgICB0aGlzLnJlcXMuZGVsZXRlKHJlcSlcbiAgICAgIG9uQ2FsbGVyVGltZW91dCgpXG4gICAgfVxuICAgIHJlcSA9IEFqYXgucmVxdWVzdChtZXRob2QsIHRoaXMuZW5kcG9pbnRVUkwoKSwgY29udGVudFR5cGUsIGJvZHksIHRoaXMudGltZW91dCwgb250aW1lb3V0LCByZXNwID0+IHtcbiAgICAgIHRoaXMucmVxcy5kZWxldGUocmVxKVxuICAgICAgaWYodGhpcy5pc0FjdGl2ZSgpKXsgY2FsbGJhY2socmVzcCkgfVxuICAgIH0pXG4gICAgdGhpcy5yZXFzLmFkZChyZXEpXG4gIH1cbn1cbiIsICIvKipcbiAqIEluaXRpYWxpemVzIHRoZSBQcmVzZW5jZVxuICogQHBhcmFtIHtDaGFubmVsfSBjaGFubmVsIC0gVGhlIENoYW5uZWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gVGhlIG9wdGlvbnMsXG4gKiAgICAgICAgZm9yIGV4YW1wbGUgYHtldmVudHM6IHtzdGF0ZTogXCJzdGF0ZVwiLCBkaWZmOiBcImRpZmZcIn19YFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVzZW5jZSB7XG5cbiAgY29uc3RydWN0b3IoY2hhbm5lbCwgb3B0cyA9IHt9KXtcbiAgICBsZXQgZXZlbnRzID0gb3B0cy5ldmVudHMgfHwge3N0YXRlOiBcInByZXNlbmNlX3N0YXRlXCIsIGRpZmY6IFwicHJlc2VuY2VfZGlmZlwifVxuICAgIHRoaXMuc3RhdGUgPSB7fVxuICAgIHRoaXMucGVuZGluZ0RpZmZzID0gW11cbiAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsXG4gICAgdGhpcy5qb2luUmVmID0gbnVsbFxuICAgIHRoaXMuY2FsbGVyID0ge1xuICAgICAgb25Kb2luOiBmdW5jdGlvbiAoKXsgfSxcbiAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uICgpeyB9LFxuICAgICAgb25TeW5jOiBmdW5jdGlvbiAoKXsgfVxuICAgIH1cblxuICAgIHRoaXMuY2hhbm5lbC5vbihldmVudHMuc3RhdGUsIG5ld1N0YXRlID0+IHtcbiAgICAgIGxldCB7b25Kb2luLCBvbkxlYXZlLCBvblN5bmN9ID0gdGhpcy5jYWxsZXJcblxuICAgICAgdGhpcy5qb2luUmVmID0gdGhpcy5jaGFubmVsLmpvaW5SZWYoKVxuICAgICAgdGhpcy5zdGF0ZSA9IFByZXNlbmNlLnN5bmNTdGF0ZSh0aGlzLnN0YXRlLCBuZXdTdGF0ZSwgb25Kb2luLCBvbkxlYXZlKVxuXG4gICAgICB0aGlzLnBlbmRpbmdEaWZmcy5mb3JFYWNoKGRpZmYgPT4ge1xuICAgICAgICB0aGlzLnN0YXRlID0gUHJlc2VuY2Uuc3luY0RpZmYodGhpcy5zdGF0ZSwgZGlmZiwgb25Kb2luLCBvbkxlYXZlKVxuICAgICAgfSlcbiAgICAgIHRoaXMucGVuZGluZ0RpZmZzID0gW11cbiAgICAgIG9uU3luYygpXG4gICAgfSlcblxuICAgIHRoaXMuY2hhbm5lbC5vbihldmVudHMuZGlmZiwgZGlmZiA9PiB7XG4gICAgICBsZXQge29uSm9pbiwgb25MZWF2ZSwgb25TeW5jfSA9IHRoaXMuY2FsbGVyXG5cbiAgICAgIGlmKHRoaXMuaW5QZW5kaW5nU3luY1N0YXRlKCkpe1xuICAgICAgICB0aGlzLnBlbmRpbmdEaWZmcy5wdXNoKGRpZmYpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXRlID0gUHJlc2VuY2Uuc3luY0RpZmYodGhpcy5zdGF0ZSwgZGlmZiwgb25Kb2luLCBvbkxlYXZlKVxuICAgICAgICBvblN5bmMoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBvbkpvaW4oY2FsbGJhY2speyB0aGlzLmNhbGxlci5vbkpvaW4gPSBjYWxsYmFjayB9XG5cbiAgb25MZWF2ZShjYWxsYmFjayl7IHRoaXMuY2FsbGVyLm9uTGVhdmUgPSBjYWxsYmFjayB9XG5cbiAgb25TeW5jKGNhbGxiYWNrKXsgdGhpcy5jYWxsZXIub25TeW5jID0gY2FsbGJhY2sgfVxuXG4gIGxpc3QoYnkpeyByZXR1cm4gUHJlc2VuY2UubGlzdCh0aGlzLnN0YXRlLCBieSkgfVxuXG4gIGluUGVuZGluZ1N5bmNTdGF0ZSgpe1xuICAgIHJldHVybiAhdGhpcy5qb2luUmVmIHx8ICh0aGlzLmpvaW5SZWYgIT09IHRoaXMuY2hhbm5lbC5qb2luUmVmKCkpXG4gIH1cblxuICAvLyBsb3dlci1sZXZlbCBwdWJsaWMgc3RhdGljIEFQSVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIHN5bmMgdGhlIGxpc3Qgb2YgcHJlc2VuY2VzIG9uIHRoZSBzZXJ2ZXJcbiAgICogd2l0aCB0aGUgY2xpZW50J3Mgc3RhdGUuIEFuIG9wdGlvbmFsIGBvbkpvaW5gIGFuZCBgb25MZWF2ZWAgY2FsbGJhY2sgY2FuXG4gICAqIGJlIHByb3ZpZGVkIHRvIHJlYWN0IHRvIGNoYW5nZXMgaW4gdGhlIGNsaWVudCdzIGxvY2FsIHByZXNlbmNlcyBhY3Jvc3NcbiAgICogZGlzY29ubmVjdHMgYW5kIHJlY29ubmVjdHMgd2l0aCB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJlc2VuY2V9XG4gICAqL1xuICBzdGF0aWMgc3luY1N0YXRlKGN1cnJlbnRTdGF0ZSwgbmV3U3RhdGUsIG9uSm9pbiwgb25MZWF2ZSl7XG4gICAgbGV0IHN0YXRlID0gdGhpcy5jbG9uZShjdXJyZW50U3RhdGUpXG4gICAgbGV0IGpvaW5zID0ge31cbiAgICBsZXQgbGVhdmVzID0ge31cblxuICAgIHRoaXMubWFwKHN0YXRlLCAoa2V5LCBwcmVzZW5jZSkgPT4ge1xuICAgICAgaWYoIW5ld1N0YXRlW2tleV0pe1xuICAgICAgICBsZWF2ZXNba2V5XSA9IHByZXNlbmNlXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLm1hcChuZXdTdGF0ZSwgKGtleSwgbmV3UHJlc2VuY2UpID0+IHtcbiAgICAgIGxldCBjdXJyZW50UHJlc2VuY2UgPSBzdGF0ZVtrZXldXG4gICAgICBpZihjdXJyZW50UHJlc2VuY2Upe1xuICAgICAgICBsZXQgbmV3UmVmcyA9IG5ld1ByZXNlbmNlLm1ldGFzLm1hcChtID0+IG0ucGh4X3JlZilcbiAgICAgICAgbGV0IGN1clJlZnMgPSBjdXJyZW50UHJlc2VuY2UubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgICBsZXQgam9pbmVkTWV0YXMgPSBuZXdQcmVzZW5jZS5tZXRhcy5maWx0ZXIobSA9PiBjdXJSZWZzLmluZGV4T2YobS5waHhfcmVmKSA8IDApXG4gICAgICAgIGxldCBsZWZ0TWV0YXMgPSBjdXJyZW50UHJlc2VuY2UubWV0YXMuZmlsdGVyKG0gPT4gbmV3UmVmcy5pbmRleE9mKG0ucGh4X3JlZikgPCAwKVxuICAgICAgICBpZihqb2luZWRNZXRhcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICBqb2luc1trZXldID0gbmV3UHJlc2VuY2VcbiAgICAgICAgICBqb2luc1trZXldLm1ldGFzID0gam9pbmVkTWV0YXNcbiAgICAgICAgfVxuICAgICAgICBpZihsZWZ0TWV0YXMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgbGVhdmVzW2tleV0gPSB0aGlzLmNsb25lKGN1cnJlbnRQcmVzZW5jZSlcbiAgICAgICAgICBsZWF2ZXNba2V5XS5tZXRhcyA9IGxlZnRNZXRhc1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBqb2luc1trZXldID0gbmV3UHJlc2VuY2VcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiB0aGlzLnN5bmNEaWZmKHN0YXRlLCB7am9pbnM6IGpvaW5zLCBsZWF2ZXM6IGxlYXZlc30sIG9uSm9pbiwgb25MZWF2ZSlcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBVc2VkIHRvIHN5bmMgYSBkaWZmIG9mIHByZXNlbmNlIGpvaW4gYW5kIGxlYXZlXG4gICAqIGV2ZW50cyBmcm9tIHRoZSBzZXJ2ZXIsIGFzIHRoZXkgaGFwcGVuLiBMaWtlIGBzeW5jU3RhdGVgLCBgc3luY0RpZmZgXG4gICAqIGFjY2VwdHMgb3B0aW9uYWwgYG9uSm9pbmAgYW5kIGBvbkxlYXZlYCBjYWxsYmFja3MgdG8gcmVhY3QgdG8gYSB1c2VyXG4gICAqIGpvaW5pbmcgb3IgbGVhdmluZyBmcm9tIGEgZGV2aWNlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJlc2VuY2V9XG4gICAqL1xuICBzdGF0aWMgc3luY0RpZmYoc3RhdGUsIGRpZmYsIG9uSm9pbiwgb25MZWF2ZSl7XG4gICAgbGV0IHtqb2lucywgbGVhdmVzfSA9IHRoaXMuY2xvbmUoZGlmZilcbiAgICBpZighb25Kb2luKXsgb25Kb2luID0gZnVuY3Rpb24gKCl7IH0gfVxuICAgIGlmKCFvbkxlYXZlKXsgb25MZWF2ZSA9IGZ1bmN0aW9uICgpeyB9IH1cblxuICAgIHRoaXMubWFwKGpvaW5zLCAoa2V5LCBuZXdQcmVzZW5jZSkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnRQcmVzZW5jZSA9IHN0YXRlW2tleV1cbiAgICAgIHN0YXRlW2tleV0gPSB0aGlzLmNsb25lKG5ld1ByZXNlbmNlKVxuICAgICAgaWYoY3VycmVudFByZXNlbmNlKXtcbiAgICAgICAgbGV0IGpvaW5lZFJlZnMgPSBzdGF0ZVtrZXldLm1ldGFzLm1hcChtID0+IG0ucGh4X3JlZilcbiAgICAgICAgbGV0IGN1ck1ldGFzID0gY3VycmVudFByZXNlbmNlLm1ldGFzLmZpbHRlcihtID0+IGpvaW5lZFJlZnMuaW5kZXhPZihtLnBoeF9yZWYpIDwgMClcbiAgICAgICAgc3RhdGVba2V5XS5tZXRhcy51bnNoaWZ0KC4uLmN1ck1ldGFzKVxuICAgICAgfVxuICAgICAgb25Kb2luKGtleSwgY3VycmVudFByZXNlbmNlLCBuZXdQcmVzZW5jZSlcbiAgICB9KVxuICAgIHRoaXMubWFwKGxlYXZlcywgKGtleSwgbGVmdFByZXNlbmNlKSA9PiB7XG4gICAgICBsZXQgY3VycmVudFByZXNlbmNlID0gc3RhdGVba2V5XVxuICAgICAgaWYoIWN1cnJlbnRQcmVzZW5jZSl7IHJldHVybiB9XG4gICAgICBsZXQgcmVmc1RvUmVtb3ZlID0gbGVmdFByZXNlbmNlLm1ldGFzLm1hcChtID0+IG0ucGh4X3JlZilcbiAgICAgIGN1cnJlbnRQcmVzZW5jZS5tZXRhcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5maWx0ZXIocCA9PiB7XG4gICAgICAgIHJldHVybiByZWZzVG9SZW1vdmUuaW5kZXhPZihwLnBoeF9yZWYpIDwgMFxuICAgICAgfSlcbiAgICAgIG9uTGVhdmUoa2V5LCBjdXJyZW50UHJlc2VuY2UsIGxlZnRQcmVzZW5jZSlcbiAgICAgIGlmKGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5sZW5ndGggPT09IDApe1xuICAgICAgICBkZWxldGUgc3RhdGVba2V5XVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHN0YXRlXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJlc2VuY2VzLCB3aXRoIHNlbGVjdGVkIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJlc2VuY2VzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNob29zZXJcbiAgICpcbiAgICogQHJldHVybnMge1ByZXNlbmNlfVxuICAgKi9cbiAgc3RhdGljIGxpc3QocHJlc2VuY2VzLCBjaG9vc2VyKXtcbiAgICBpZighY2hvb3Nlcil7IGNob29zZXIgPSBmdW5jdGlvbiAoa2V5LCBwcmVzKXsgcmV0dXJuIHByZXMgfSB9XG5cbiAgICByZXR1cm4gdGhpcy5tYXAocHJlc2VuY2VzLCAoa2V5LCBwcmVzZW5jZSkgPT4ge1xuICAgICAgcmV0dXJuIGNob29zZXIoa2V5LCBwcmVzZW5jZSlcbiAgICB9KVxuICB9XG5cbiAgLy8gcHJpdmF0ZVxuXG4gIHN0YXRpYyBtYXAob2JqLCBmdW5jKXtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5tYXAoa2V5ID0+IGZ1bmMoa2V5LCBvYmpba2V5XSkpXG4gIH1cblxuICBzdGF0aWMgY2xvbmUob2JqKXsgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSkgfVxufVxuIiwgIi8qIFRoZSBkZWZhdWx0IHNlcmlhbGl6ZXIgZm9yIGVuY29kaW5nIGFuZCBkZWNvZGluZyBtZXNzYWdlcyAqL1xuaW1wb3J0IHtcbiAgQ0hBTk5FTF9FVkVOVFNcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuZXhwb3J0IGRlZmF1bHQge1xuICBIRUFERVJfTEVOR1RIOiAxLFxuICBNRVRBX0xFTkdUSDogNCxcbiAgS0lORFM6IHtwdXNoOiAwLCByZXBseTogMSwgYnJvYWRjYXN0OiAyfSxcblxuICBlbmNvZGUobXNnLCBjYWxsYmFjayl7XG4gICAgaWYobXNnLnBheWxvYWQuY29uc3RydWN0b3IgPT09IEFycmF5QnVmZmVyKXtcbiAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzLmJpbmFyeUVuY29kZShtc2cpKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcGF5bG9hZCA9IFttc2cuam9pbl9yZWYsIG1zZy5yZWYsIG1zZy50b3BpYywgbXNnLmV2ZW50LCBtc2cucGF5bG9hZF1cbiAgICAgIHJldHVybiBjYWxsYmFjayhKU09OLnN0cmluZ2lmeShwYXlsb2FkKSlcbiAgICB9XG4gIH0sXG5cbiAgZGVjb2RlKHJhd1BheWxvYWQsIGNhbGxiYWNrKXtcbiAgICBpZihyYXdQYXlsb2FkLmNvbnN0cnVjdG9yID09PSBBcnJheUJ1ZmZlcil7XG4gICAgICByZXR1cm4gY2FsbGJhY2sodGhpcy5iaW5hcnlEZWNvZGUocmF3UGF5bG9hZCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBbam9pbl9yZWYsIHJlZiwgdG9waWMsIGV2ZW50LCBwYXlsb2FkXSA9IEpTT04ucGFyc2UocmF3UGF5bG9hZClcbiAgICAgIHJldHVybiBjYWxsYmFjayh7am9pbl9yZWYsIHJlZiwgdG9waWMsIGV2ZW50LCBwYXlsb2FkfSlcbiAgICB9XG4gIH0sXG5cbiAgLy8gcHJpdmF0ZVxuXG4gIGJpbmFyeUVuY29kZShtZXNzYWdlKXtcbiAgICBsZXQge2pvaW5fcmVmLCByZWYsIGV2ZW50LCB0b3BpYywgcGF5bG9hZH0gPSBtZXNzYWdlXG4gICAgbGV0IG1ldGFMZW5ndGggPSB0aGlzLk1FVEFfTEVOR1RIICsgam9pbl9yZWYubGVuZ3RoICsgcmVmLmxlbmd0aCArIHRvcGljLmxlbmd0aCArIGV2ZW50Lmxlbmd0aFxuICAgIGxldCBoZWFkZXIgPSBuZXcgQXJyYXlCdWZmZXIodGhpcy5IRUFERVJfTEVOR1RIICsgbWV0YUxlbmd0aClcbiAgICBsZXQgdmlldyA9IG5ldyBEYXRhVmlldyhoZWFkZXIpXG4gICAgbGV0IG9mZnNldCA9IDBcblxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIHRoaXMuS0lORFMucHVzaCkgLy8ga2luZFxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGpvaW5fcmVmLmxlbmd0aClcbiAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCByZWYubGVuZ3RoKVxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIHRvcGljLmxlbmd0aClcbiAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBldmVudC5sZW5ndGgpXG4gICAgQXJyYXkuZnJvbShqb2luX3JlZiwgY2hhciA9PiB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjaGFyLmNoYXJDb2RlQXQoMCkpKVxuICAgIEFycmF5LmZyb20ocmVmLCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG4gICAgQXJyYXkuZnJvbSh0b3BpYywgY2hhciA9PiB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjaGFyLmNoYXJDb2RlQXQoMCkpKVxuICAgIEFycmF5LmZyb20oZXZlbnQsIGNoYXIgPT4gdmlldy5zZXRVaW50OChvZmZzZXQrKywgY2hhci5jaGFyQ29kZUF0KDApKSlcblxuICAgIHZhciBjb21iaW5lZCA9IG5ldyBVaW50OEFycmF5KGhlYWRlci5ieXRlTGVuZ3RoICsgcGF5bG9hZC5ieXRlTGVuZ3RoKVxuICAgIGNvbWJpbmVkLnNldChuZXcgVWludDhBcnJheShoZWFkZXIpLCAwKVxuICAgIGNvbWJpbmVkLnNldChuZXcgVWludDhBcnJheShwYXlsb2FkKSwgaGVhZGVyLmJ5dGVMZW5ndGgpXG5cbiAgICByZXR1cm4gY29tYmluZWQuYnVmZmVyXG4gIH0sXG5cbiAgYmluYXJ5RGVjb2RlKGJ1ZmZlcil7XG4gICAgbGV0IHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKVxuICAgIGxldCBraW5kID0gdmlldy5nZXRVaW50OCgwKVxuICAgIGxldCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKClcbiAgICBzd2l0Y2goa2luZCl7XG4gICAgICBjYXNlIHRoaXMuS0lORFMucHVzaDogcmV0dXJuIHRoaXMuZGVjb2RlUHVzaChidWZmZXIsIHZpZXcsIGRlY29kZXIpXG4gICAgICBjYXNlIHRoaXMuS0lORFMucmVwbHk6IHJldHVybiB0aGlzLmRlY29kZVJlcGx5KGJ1ZmZlciwgdmlldywgZGVjb2RlcilcbiAgICAgIGNhc2UgdGhpcy5LSU5EUy5icm9hZGNhc3Q6IHJldHVybiB0aGlzLmRlY29kZUJyb2FkY2FzdChidWZmZXIsIHZpZXcsIGRlY29kZXIpXG4gICAgfVxuICB9LFxuXG4gIGRlY29kZVB1c2goYnVmZmVyLCB2aWV3LCBkZWNvZGVyKXtcbiAgICBsZXQgam9pblJlZlNpemUgPSB2aWV3LmdldFVpbnQ4KDEpXG4gICAgbGV0IHRvcGljU2l6ZSA9IHZpZXcuZ2V0VWludDgoMilcbiAgICBsZXQgZXZlbnRTaXplID0gdmlldy5nZXRVaW50OCgzKVxuICAgIGxldCBvZmZzZXQgPSB0aGlzLkhFQURFUl9MRU5HVEggKyB0aGlzLk1FVEFfTEVOR1RIIC0gMSAvLyBwdXNoZXMgaGF2ZSBubyByZWZcbiAgICBsZXQgam9pblJlZiA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGpvaW5SZWZTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBqb2luUmVmU2l6ZVxuICAgIGxldCB0b3BpYyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHRvcGljU2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgdG9waWNTaXplXG4gICAgbGV0IGV2ZW50ID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgZXZlbnRTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBldmVudFNpemVcbiAgICBsZXQgZGF0YSA9IGJ1ZmZlci5zbGljZShvZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgIHJldHVybiB7am9pbl9yZWY6IGpvaW5SZWYsIHJlZjogbnVsbCwgdG9waWM6IHRvcGljLCBldmVudDogZXZlbnQsIHBheWxvYWQ6IGRhdGF9XG4gIH0sXG5cbiAgZGVjb2RlUmVwbHkoYnVmZmVyLCB2aWV3LCBkZWNvZGVyKXtcbiAgICBsZXQgam9pblJlZlNpemUgPSB2aWV3LmdldFVpbnQ4KDEpXG4gICAgbGV0IHJlZlNpemUgPSB2aWV3LmdldFVpbnQ4KDIpXG4gICAgbGV0IHRvcGljU2l6ZSA9IHZpZXcuZ2V0VWludDgoMylcbiAgICBsZXQgZXZlbnRTaXplID0gdmlldy5nZXRVaW50OCg0KVxuICAgIGxldCBvZmZzZXQgPSB0aGlzLkhFQURFUl9MRU5HVEggKyB0aGlzLk1FVEFfTEVOR1RIXG4gICAgbGV0IGpvaW5SZWYgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBqb2luUmVmU2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgam9pblJlZlNpemVcbiAgICBsZXQgcmVmID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgcmVmU2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgcmVmU2l6ZVxuICAgIGxldCB0b3BpYyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHRvcGljU2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgdG9waWNTaXplXG4gICAgbGV0IGV2ZW50ID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgZXZlbnRTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBldmVudFNpemVcbiAgICBsZXQgZGF0YSA9IGJ1ZmZlci5zbGljZShvZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgIGxldCBwYXlsb2FkID0ge3N0YXR1czogZXZlbnQsIHJlc3BvbnNlOiBkYXRhfVxuICAgIHJldHVybiB7am9pbl9yZWY6IGpvaW5SZWYsIHJlZjogcmVmLCB0b3BpYzogdG9waWMsIGV2ZW50OiBDSEFOTkVMX0VWRU5UUy5yZXBseSwgcGF5bG9hZDogcGF5bG9hZH1cbiAgfSxcblxuICBkZWNvZGVCcm9hZGNhc3QoYnVmZmVyLCB2aWV3LCBkZWNvZGVyKXtcbiAgICBsZXQgdG9waWNTaXplID0gdmlldy5nZXRVaW50OCgxKVxuICAgIGxldCBldmVudFNpemUgPSB2aWV3LmdldFVpbnQ4KDIpXG4gICAgbGV0IG9mZnNldCA9IHRoaXMuSEVBREVSX0xFTkdUSCArIDJcbiAgICBsZXQgdG9waWMgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyB0b3BpY1NpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIHRvcGljU2l6ZVxuICAgIGxldCBldmVudCA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGV2ZW50U2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgZXZlbnRTaXplXG4gICAgbGV0IGRhdGEgPSBidWZmZXIuc2xpY2Uob2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aClcblxuICAgIHJldHVybiB7am9pbl9yZWY6IG51bGwsIHJlZjogbnVsbCwgdG9waWM6IHRvcGljLCBldmVudDogZXZlbnQsIHBheWxvYWQ6IGRhdGF9XG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBnbG9iYWwsXG4gIHBoeFdpbmRvdyxcbiAgQ0hBTk5FTF9FVkVOVFMsXG4gIERFRkFVTFRfVElNRU9VVCxcbiAgREVGQVVMVF9WU04sXG4gIFNPQ0tFVF9TVEFURVMsXG4gIFRSQU5TUE9SVFMsXG4gIFdTX0NMT1NFX05PUk1BTFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBjbG9zdXJlXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IEFqYXggZnJvbSBcIi4vYWpheFwiXG5pbXBvcnQgQ2hhbm5lbCBmcm9tIFwiLi9jaGFubmVsXCJcbmltcG9ydCBMb25nUG9sbCBmcm9tIFwiLi9sb25ncG9sbFwiXG5pbXBvcnQgU2VyaWFsaXplciBmcm9tIFwiLi9zZXJpYWxpemVyXCJcbmltcG9ydCBUaW1lciBmcm9tIFwiLi90aW1lclwiXG5cbi8qKiBJbml0aWFsaXplcyB0aGUgU29ja2V0ICpcbiAqXG4gKiBGb3IgSUU4IHN1cHBvcnQgdXNlIGFuIEVTNS1zaGltIChodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGVuZFBvaW50IC0gVGhlIHN0cmluZyBXZWJTb2NrZXQgZW5kcG9pbnQsIGllLCBgXCJ3czovL2V4YW1wbGUuY29tL3NvY2tldFwiYCxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXCJ3c3M6Ly9leGFtcGxlLmNvbVwiYFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcIi9zb2NrZXRcImAgKGluaGVyaXRlZCBob3N0ICYgcHJvdG9jb2wpXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHNdIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMudHJhbnNwb3J0XSAtIFRoZSBXZWJzb2NrZXQgVHJhbnNwb3J0LCBmb3IgZXhhbXBsZSBXZWJTb2NrZXQgb3IgUGhvZW5peC5Mb25nUG9sbC5cbiAqXG4gKiBEZWZhdWx0cyB0byBXZWJTb2NrZXQgd2l0aCBhdXRvbWF0aWMgTG9uZ1BvbGwgZmFsbGJhY2sgaWYgV2ViU29ja2V0IGlzIG5vdCBkZWZpbmVkLlxuICogVG8gZmFsbGJhY2sgdG8gTG9uZ1BvbGwgd2hlbiBXZWJTb2NrZXQgYXR0ZW1wdHMgZmFpbCwgdXNlIGBsb25nUG9sbEZhbGxiYWNrTXM6IDI1MDBgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLmxvbmdQb2xsRmFsbGJhY2tNc10gLSBUaGUgbWlsbGlzZWNvbmQgdGltZSB0byBhdHRlbXB0IHRoZSBwcmltYXJ5IHRyYW5zcG9ydFxuICogYmVmb3JlIGZhbGxpbmcgYmFjayB0byB0aGUgTG9uZ1BvbGwgdHJhbnNwb3J0LiBEaXNhYmxlZCBieSBkZWZhdWx0LlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLmRlYnVnXSAtIFdoZW4gdHJ1ZSwgZW5hYmxlcyBkZWJ1ZyBsb2dnaW5nLiBEZWZhdWx0IGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLmVuY29kZV0gLSBUaGUgZnVuY3Rpb24gdG8gZW5jb2RlIG91dGdvaW5nIG1lc3NhZ2VzLlxuICpcbiAqIERlZmF1bHRzIHRvIEpTT04gZW5jb2Rlci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5kZWNvZGVdIC0gVGhlIGZ1bmN0aW9uIHRvIGRlY29kZSBpbmNvbWluZyBtZXNzYWdlcy5cbiAqXG4gKiBEZWZhdWx0cyB0byBKU09OOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIChwYXlsb2FkLCBjYWxsYmFjaykgPT4gY2FsbGJhY2soSlNPTi5wYXJzZShwYXlsb2FkKSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy50aW1lb3V0XSAtIFRoZSBkZWZhdWx0IHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIHRyaWdnZXIgcHVzaCB0aW1lb3V0cy5cbiAqXG4gKiBEZWZhdWx0cyBgREVGQVVMVF9USU1FT1VUYFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLmhlYXJ0YmVhdEludGVydmFsTXNdIC0gVGhlIG1pbGxpc2VjIGludGVydmFsIHRvIHNlbmQgYSBoZWFydGJlYXQgbWVzc2FnZVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnJlY29ubmVjdEFmdGVyTXNdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbWlsbGlzZWNcbiAqIHNvY2tldCByZWNvbm5lY3QgaW50ZXJ2YWwuXG4gKlxuICogRGVmYXVsdHMgdG8gc3RlcHBlZCBiYWNrb2ZmIG9mOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGZ1bmN0aW9uKHRyaWVzKXtcbiAqICAgcmV0dXJuIFsxMCwgNTAsIDEwMCwgMTUwLCAyMDAsIDI1MCwgNTAwLCAxMDAwLCAyMDAwXVt0cmllcyAtIDFdIHx8IDUwMDBcbiAqIH1cbiAqIGBgYGBcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMucmVqb2luQWZ0ZXJNc10gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtaWxsaXNlY1xuICogcmVqb2luIGludGVydmFsIGZvciBpbmRpdmlkdWFsIGNoYW5uZWxzLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGZ1bmN0aW9uKHRyaWVzKXtcbiAqICAgcmV0dXJuIFsxMDAwLCAyMDAwLCA1MDAwXVt0cmllcyAtIDFdIHx8IDEwMDAwXG4gKiB9XG4gKiBgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMubG9nZ2VyXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiBmb3Igc3BlY2lhbGl6ZWQgbG9nZ2luZywgaWU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZnVuY3Rpb24oa2luZCwgbXNnLCBkYXRhKSB7XG4gKiAgIGNvbnNvbGUubG9nKGAke2tpbmR9OiAke21zZ31gLCBkYXRhKVxuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLmxvbmdwb2xsZXJUaW1lb3V0XSAtIFRoZSBtYXhpbXVtIHRpbWVvdXQgb2YgYSBsb25nIHBvbGwgQUpBWCByZXF1ZXN0LlxuICpcbiAqIERlZmF1bHRzIHRvIDIwcyAoZG91YmxlIHRoZSBzZXJ2ZXIgbG9uZyBwb2xsIHRpbWVyKS5cbiAqXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24pfSBbb3B0cy5wYXJhbXNdIC0gVGhlIG9wdGlvbmFsIHBhcmFtcyB0byBwYXNzIHdoZW4gY29ubmVjdGluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmJpbmFyeVR5cGVdIC0gVGhlIGJpbmFyeSB0eXBlIHRvIHVzZSBmb3IgYmluYXJ5IFdlYlNvY2tldCBmcmFtZXMuXG4gKlxuICogRGVmYXVsdHMgdG8gXCJhcnJheWJ1ZmZlclwiXG4gKlxuICogQHBhcmFtIHt2c259IFtvcHRzLnZzbl0gLSBUaGUgc2VyaWFsaXplcidzIHByb3RvY29sIHZlcnNpb24gdG8gc2VuZCBvbiBjb25uZWN0LlxuICpcbiAqIERlZmF1bHRzIHRvIERFRkFVTFRfVlNOLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5zZXNzaW9uU3RvcmFnZV0gLSBBbiBvcHRpb25hbCBTdG9yYWdlIGNvbXBhdGlibGUgb2JqZWN0XG4gKiBQaG9lbml4IHVzZXMgc2Vzc2lvblN0b3JhZ2UgZm9yIGxvbmdwb2xsIGZhbGxiYWNrIGhpc3RvcnkuIE92ZXJyaWRpbmcgdGhlIHN0b3JlIGlzXG4gKiB1c2VmdWwgd2hlbiBQaG9lbml4IHdvbid0IGhhdmUgYWNjZXNzIHRvIGBzZXNzaW9uU3RvcmFnZWAuIEZvciBleGFtcGxlLCBUaGlzIGNvdWxkXG4gKiBoYXBwZW4gaWYgYSBzaXRlIGxvYWRzIGEgY3Jvc3MtZG9tYWluIGNoYW5uZWwgaW4gYW4gaWZyYW1lLiBFeGFtcGxlIHVzYWdlOlxuICpcbiAqICAgICBjbGFzcyBJbk1lbW9yeVN0b3JhZ2Uge1xuICogICAgICAgY29uc3RydWN0b3IoKSB7IHRoaXMuc3RvcmFnZSA9IHt9IH1cbiAqICAgICAgIGdldEl0ZW0oa2V5TmFtZSkgeyByZXR1cm4gdGhpcy5zdG9yYWdlW2tleU5hbWVdIHx8IG51bGwgfVxuICogICAgICAgcmVtb3ZlSXRlbShrZXlOYW1lKSB7IGRlbGV0ZSB0aGlzLnN0b3JhZ2Vba2V5TmFtZV0gfVxuICogICAgICAgc2V0SXRlbShrZXlOYW1lLCBrZXlWYWx1ZSkgeyB0aGlzLnN0b3JhZ2Vba2V5TmFtZV0gPSBrZXlWYWx1ZSB9XG4gKiAgICAgfVxuICpcbiovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTb2NrZXQge1xuICBjb25zdHJ1Y3RvcihlbmRQb2ludCwgb3B0cyA9IHt9KXtcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzID0ge29wZW46IFtdLCBjbG9zZTogW10sIGVycm9yOiBbXSwgbWVzc2FnZTogW119XG4gICAgdGhpcy5jaGFubmVscyA9IFtdXG4gICAgdGhpcy5zZW5kQnVmZmVyID0gW11cbiAgICB0aGlzLnJlZiA9IDBcbiAgICB0aGlzLnRpbWVvdXQgPSBvcHRzLnRpbWVvdXQgfHwgREVGQVVMVF9USU1FT1VUXG4gICAgdGhpcy50cmFuc3BvcnQgPSBvcHRzLnRyYW5zcG9ydCB8fCBnbG9iYWwuV2ViU29ja2V0IHx8IExvbmdQb2xsXG4gICAgdGhpcy5wcmltYXJ5UGFzc2VkSGVhbHRoQ2hlY2sgPSBmYWxzZVxuICAgIHRoaXMubG9uZ1BvbGxGYWxsYmFja01zID0gb3B0cy5sb25nUG9sbEZhbGxiYWNrTXNcbiAgICB0aGlzLmZhbGxiYWNrVGltZXIgPSBudWxsXG4gICAgdGhpcy5zZXNzaW9uU3RvcmUgPSBvcHRzLnNlc3Npb25TdG9yYWdlIHx8IChnbG9iYWwgJiYgZ2xvYmFsLnNlc3Npb25TdG9yYWdlKVxuICAgIHRoaXMuZXN0YWJsaXNoZWRDb25uZWN0aW9ucyA9IDBcbiAgICB0aGlzLmRlZmF1bHRFbmNvZGVyID0gU2VyaWFsaXplci5lbmNvZGUuYmluZChTZXJpYWxpemVyKVxuICAgIHRoaXMuZGVmYXVsdERlY29kZXIgPSBTZXJpYWxpemVyLmRlY29kZS5iaW5kKFNlcmlhbGl6ZXIpXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gZmFsc2VcbiAgICB0aGlzLmJpbmFyeVR5cGUgPSBvcHRzLmJpbmFyeVR5cGUgfHwgXCJhcnJheWJ1ZmZlclwiXG4gICAgdGhpcy5jb25uZWN0Q2xvY2sgPSAxXG4gICAgaWYodGhpcy50cmFuc3BvcnQgIT09IExvbmdQb2xsKXtcbiAgICAgIHRoaXMuZW5jb2RlID0gb3B0cy5lbmNvZGUgfHwgdGhpcy5kZWZhdWx0RW5jb2RlclxuICAgICAgdGhpcy5kZWNvZGUgPSBvcHRzLmRlY29kZSB8fCB0aGlzLmRlZmF1bHREZWNvZGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW5jb2RlID0gdGhpcy5kZWZhdWx0RW5jb2RlclxuICAgICAgdGhpcy5kZWNvZGUgPSB0aGlzLmRlZmF1bHREZWNvZGVyXG4gICAgfVxuICAgIGxldCBhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93ID0gbnVsbFxuICAgIGlmKHBoeFdpbmRvdyAmJiBwaHhXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcil7XG4gICAgICBwaHhXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9lID0+IHtcbiAgICAgICAgaWYodGhpcy5jb25uKXtcbiAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKVxuICAgICAgICAgIGF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3cgPSB0aGlzLmNvbm5lY3RDbG9ja1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgcGh4V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlc2hvd1wiLCBfZSA9PiB7XG4gICAgICAgIGlmKGF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3cgPT09IHRoaXMuY29ubmVjdENsb2NrKXtcbiAgICAgICAgICBhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93ID0gbnVsbFxuICAgICAgICAgIHRoaXMuY29ubmVjdCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcyA9IG9wdHMuaGVhcnRiZWF0SW50ZXJ2YWxNcyB8fCAzMDAwMFxuICAgIHRoaXMucmVqb2luQWZ0ZXJNcyA9ICh0cmllcykgPT4ge1xuICAgICAgaWYob3B0cy5yZWpvaW5BZnRlck1zKXtcbiAgICAgICAgcmV0dXJuIG9wdHMucmVqb2luQWZ0ZXJNcyh0cmllcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbMTAwMCwgMjAwMCwgNTAwMF1bdHJpZXMgLSAxXSB8fCAxMDAwMFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlY29ubmVjdEFmdGVyTXMgPSAodHJpZXMpID0+IHtcbiAgICAgIGlmKG9wdHMucmVjb25uZWN0QWZ0ZXJNcyl7XG4gICAgICAgIHJldHVybiBvcHRzLnJlY29ubmVjdEFmdGVyTXModHJpZXMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gWzEwLCA1MCwgMTAwLCAxNTAsIDIwMCwgMjUwLCA1MDAsIDEwMDAsIDIwMDBdW3RyaWVzIC0gMV0gfHwgNTAwMFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxvZ2dlciA9IG9wdHMubG9nZ2VyIHx8IG51bGxcbiAgICBpZighdGhpcy5sb2dnZXIgJiYgb3B0cy5kZWJ1Zyl7XG4gICAgICB0aGlzLmxvZ2dlciA9IChraW5kLCBtc2csIGRhdGEpID0+IHsgY29uc29sZS5sb2coYCR7a2luZH06ICR7bXNnfWAsIGRhdGEpIH1cbiAgICB9XG4gICAgdGhpcy5sb25ncG9sbGVyVGltZW91dCA9IG9wdHMubG9uZ3BvbGxlclRpbWVvdXQgfHwgMjAwMDBcbiAgICB0aGlzLnBhcmFtcyA9IGNsb3N1cmUob3B0cy5wYXJhbXMgfHwge30pXG4gICAgdGhpcy5lbmRQb2ludCA9IGAke2VuZFBvaW50fS8ke1RSQU5TUE9SVFMud2Vic29ja2V0fWBcbiAgICB0aGlzLnZzbiA9IG9wdHMudnNuIHx8IERFRkFVTFRfVlNOXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXIgPSBudWxsXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lciA9IG51bGxcbiAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSBudWxsXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lciA9IG5ldyBUaW1lcigoKSA9PiB7XG4gICAgICB0aGlzLnRlYXJkb3duKCgpID0+IHRoaXMuY29ubmVjdCgpKVxuICAgIH0sIHRoaXMucmVjb25uZWN0QWZ0ZXJNcylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBMb25nUG9sbCB0cmFuc3BvcnQgcmVmZXJlbmNlXG4gICAqL1xuICBnZXRMb25nUG9sbFRyYW5zcG9ydCgpeyByZXR1cm4gTG9uZ1BvbGwgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0cyBhbmQgcmVwbGFjZXMgdGhlIGFjdGl2ZSB0cmFuc3BvcnRcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV3VHJhbnNwb3J0IC0gVGhlIG5ldyB0cmFuc3BvcnQgY2xhc3MgdG8gaW5zdGFudGlhdGVcbiAgICpcbiAgICovXG4gIHJlcGxhY2VUcmFuc3BvcnQobmV3VHJhbnNwb3J0KXtcbiAgICB0aGlzLmNvbm5lY3RDbG9jaysrXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gdHJ1ZVxuICAgIGNsZWFyVGltZW91dCh0aGlzLmZhbGxiYWNrVGltZXIpXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gICAgaWYodGhpcy5jb25uKXtcbiAgICAgIHRoaXMuY29ubi5jbG9zZSgpXG4gICAgICB0aGlzLmNvbm4gPSBudWxsXG4gICAgfVxuICAgIHRoaXMudHJhbnNwb3J0ID0gbmV3VHJhbnNwb3J0XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc29ja2V0IHByb3RvY29sXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBwcm90b2NvbCgpeyByZXR1cm4gbG9jYXRpb24ucHJvdG9jb2wubWF0Y2goL15odHRwcy8pID8gXCJ3c3NcIiA6IFwid3NcIiB9XG5cbiAgLyoqXG4gICAqIFRoZSBmdWxseSBxdWFsaWZpZWQgc29ja2V0IHVybFxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZW5kUG9pbnRVUkwoKXtcbiAgICBsZXQgdXJpID0gQWpheC5hcHBlbmRQYXJhbXMoXG4gICAgICBBamF4LmFwcGVuZFBhcmFtcyh0aGlzLmVuZFBvaW50LCB0aGlzLnBhcmFtcygpKSwge3ZzbjogdGhpcy52c259KVxuICAgIGlmKHVyaS5jaGFyQXQoMCkgIT09IFwiL1wiKXsgcmV0dXJuIHVyaSB9XG4gICAgaWYodXJpLmNoYXJBdCgxKSA9PT0gXCIvXCIpeyByZXR1cm4gYCR7dGhpcy5wcm90b2NvbCgpfToke3VyaX1gIH1cblxuICAgIHJldHVybiBgJHt0aGlzLnByb3RvY29sKCl9Oi8vJHtsb2NhdGlvbi5ob3N0fSR7dXJpfWBcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0cyB0aGUgc29ja2V0XG4gICAqXG4gICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2xvc2VFdmVudCNTdGF0dXNfY29kZXMgZm9yIHZhbGlkIHN0YXR1cyBjb2Rlcy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBPcHRpb25hbCBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgc29ja2V0IGlzIGRpc2Nvbm5lY3RlZC5cbiAgICogQHBhcmFtIHtpbnRlZ2VyfSBjb2RlIC0gQSBzdGF0dXMgY29kZSBmb3IgZGlzY29ubmVjdGlvbiAoT3B0aW9uYWwpLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIC0gQSB0ZXh0dWFsIGRlc2NyaXB0aW9uIG9mIHRoZSByZWFzb24gdG8gZGlzY29ubmVjdC4gKE9wdGlvbmFsKVxuICAgKi9cbiAgZGlzY29ubmVjdChjYWxsYmFjaywgY29kZSwgcmVhc29uKXtcbiAgICB0aGlzLmNvbm5lY3RDbG9jaysrXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gdHJ1ZVxuICAgIGNsZWFyVGltZW91dCh0aGlzLmZhbGxiYWNrVGltZXIpXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gICAgdGhpcy50ZWFyZG93bihjYWxsYmFjaywgY29kZSwgcmVhc29uKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBUaGUgcGFyYW1zIHRvIHNlbmQgd2hlbiBjb25uZWN0aW5nLCBmb3IgZXhhbXBsZSBge3VzZXJfaWQ6IHVzZXJUb2tlbn1gXG4gICAqXG4gICAqIFBhc3NpbmcgcGFyYW1zIHRvIGNvbm5lY3QgaXMgZGVwcmVjYXRlZDsgcGFzcyB0aGVtIGluIHRoZSBTb2NrZXQgY29uc3RydWN0b3IgaW5zdGVhZDpcbiAgICogYG5ldyBTb2NrZXQoXCIvc29ja2V0XCIsIHtwYXJhbXM6IHt1c2VyX2lkOiB1c2VyVG9rZW59fSlgLlxuICAgKi9cbiAgY29ubmVjdChwYXJhbXMpe1xuICAgIGlmKHBhcmFtcyl7XG4gICAgICBjb25zb2xlICYmIGNvbnNvbGUubG9nKFwicGFzc2luZyBwYXJhbXMgdG8gY29ubmVjdCBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkIHBhc3MgOnBhcmFtcyB0byB0aGUgU29ja2V0IGNvbnN0cnVjdG9yXCIpXG4gICAgICB0aGlzLnBhcmFtcyA9IGNsb3N1cmUocGFyYW1zKVxuICAgIH1cbiAgICBpZih0aGlzLmNvbm4peyByZXR1cm4gfVxuICAgIGlmKHRoaXMubG9uZ1BvbGxGYWxsYmFja01zICYmIHRoaXMudHJhbnNwb3J0ICE9PSBMb25nUG9sbCl7XG4gICAgICB0aGlzLmNvbm5lY3RXaXRoRmFsbGJhY2soTG9uZ1BvbGwsIHRoaXMubG9uZ1BvbGxGYWxsYmFja01zKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRyYW5zcG9ydENvbm5lY3QoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIHRoZSBtZXNzYWdlLiBPdmVycmlkZSBgdGhpcy5sb2dnZXJgIGZvciBzcGVjaWFsaXplZCBsb2dnaW5nLiBub29wcyBieSBkZWZhdWx0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBraW5kXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtc2dcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICovXG4gIGxvZyhraW5kLCBtc2csIGRhdGEpeyB0aGlzLmxvZ2dlciAmJiB0aGlzLmxvZ2dlcihraW5kLCBtc2csIGRhdGEpIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGEgbG9nZ2VyIGhhcyBiZWVuIHNldCBvbiB0aGlzIHNvY2tldC5cbiAgICovXG4gIGhhc0xvZ2dlcigpeyByZXR1cm4gdGhpcy5sb2dnZXIgIT09IG51bGwgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgY2FsbGJhY2tzIGZvciBjb25uZWN0aW9uIG9wZW4gZXZlbnRzXG4gICAqXG4gICAqIEBleGFtcGxlIHNvY2tldC5vbk9wZW4oZnVuY3Rpb24oKXsgY29uc29sZS5pbmZvKFwidGhlIHNvY2tldCB3YXMgb3BlbmVkXCIpIH0pXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbk9wZW4oY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Mub3Blbi5wdXNoKFtyZWYsIGNhbGxiYWNrXSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBjbG9zZSBldmVudHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2UoY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuY2xvc2UucHVzaChbcmVmLCBjYWxsYmFja10pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gZXJyb3IgZXZlbnRzXG4gICAqXG4gICAqIEBleGFtcGxlIHNvY2tldC5vbkVycm9yKGZ1bmN0aW9uKGVycm9yKXsgYWxlcnQoXCJBbiBlcnJvciBvY2N1cnJlZFwiKSB9KVxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25FcnJvcihjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5lcnJvci5wdXNoKFtyZWYsIGNhbGxiYWNrXSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBtZXNzYWdlIGV2ZW50c1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25NZXNzYWdlKGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm1lc3NhZ2UucHVzaChbcmVmLCBjYWxsYmFja10pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFBpbmdzIHRoZSBzZXJ2ZXIgYW5kIGludm9rZXMgdGhlIGNhbGxiYWNrIHdpdGggdGhlIFJUVCBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwaW5nIHdhcyBwdXNoZWQgb3IgZmFsc2UgaWYgdW5hYmxlIHRvIGJlIHB1c2hlZC5cbiAgICovXG4gIHBpbmcoY2FsbGJhY2spe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gZmFsc2UgfVxuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIGxldCBzdGFydFRpbWUgPSBEYXRlLm5vdygpXG4gICAgdGhpcy5wdXNoKHt0b3BpYzogXCJwaG9lbml4XCIsIGV2ZW50OiBcImhlYXJ0YmVhdFwiLCBwYXlsb2FkOiB7fSwgcmVmOiByZWZ9KVxuICAgIGxldCBvbk1zZ1JlZiA9IHRoaXMub25NZXNzYWdlKG1zZyA9PiB7XG4gICAgICBpZihtc2cucmVmID09PSByZWYpe1xuICAgICAgICB0aGlzLm9mZihbb25Nc2dSZWZdKVxuICAgICAgICBjYWxsYmFjayhEYXRlLm5vdygpIC0gc3RhcnRUaW1lKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICB0cmFuc3BvcnRDb25uZWN0KCl7XG4gICAgdGhpcy5jb25uZWN0Q2xvY2srK1xuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IGZhbHNlXG4gICAgdGhpcy5jb25uID0gbmV3IHRoaXMudHJhbnNwb3J0KHRoaXMuZW5kUG9pbnRVUkwoKSlcbiAgICB0aGlzLmNvbm4uYmluYXJ5VHlwZSA9IHRoaXMuYmluYXJ5VHlwZVxuICAgIHRoaXMuY29ubi50aW1lb3V0ID0gdGhpcy5sb25ncG9sbGVyVGltZW91dFxuICAgIHRoaXMuY29ubi5vbm9wZW4gPSAoKSA9PiB0aGlzLm9uQ29ubk9wZW4oKVxuICAgIHRoaXMuY29ubi5vbmVycm9yID0gZXJyb3IgPT4gdGhpcy5vbkNvbm5FcnJvcihlcnJvcilcbiAgICB0aGlzLmNvbm4ub25tZXNzYWdlID0gZXZlbnQgPT4gdGhpcy5vbkNvbm5NZXNzYWdlKGV2ZW50KVxuICAgIHRoaXMuY29ubi5vbmNsb3NlID0gZXZlbnQgPT4gdGhpcy5vbkNvbm5DbG9zZShldmVudClcbiAgfVxuXG4gIGdldFNlc3Npb24oa2V5KXsgcmV0dXJuIHRoaXMuc2Vzc2lvblN0b3JlICYmIHRoaXMuc2Vzc2lvblN0b3JlLmdldEl0ZW0oa2V5KSB9XG5cbiAgc3RvcmVTZXNzaW9uKGtleSwgdmFsKXsgdGhpcy5zZXNzaW9uU3RvcmUgJiYgdGhpcy5zZXNzaW9uU3RvcmUuc2V0SXRlbShrZXksIHZhbCkgfVxuXG4gIGNvbm5lY3RXaXRoRmFsbGJhY2soZmFsbGJhY2tUcmFuc3BvcnQsIGZhbGxiYWNrVGhyZXNob2xkID0gMjUwMCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuZmFsbGJhY2tUaW1lcilcbiAgICBsZXQgZXN0YWJsaXNoZWQgPSBmYWxzZVxuICAgIGxldCBwcmltYXJ5VHJhbnNwb3J0ID0gdHJ1ZVxuICAgIGxldCBvcGVuUmVmLCBlcnJvclJlZlxuICAgIGxldCBmYWxsYmFjayA9IChyZWFzb24pID0+IHtcbiAgICAgIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGBmYWxsaW5nIGJhY2sgdG8gJHtmYWxsYmFja1RyYW5zcG9ydC5uYW1lfS4uLmAsIHJlYXNvbilcbiAgICAgIHRoaXMub2ZmKFtvcGVuUmVmLCBlcnJvclJlZl0pXG4gICAgICBwcmltYXJ5VHJhbnNwb3J0ID0gZmFsc2VcbiAgICAgIHRoaXMucmVwbGFjZVRyYW5zcG9ydChmYWxsYmFja1RyYW5zcG9ydClcbiAgICAgIHRoaXMudHJhbnNwb3J0Q29ubmVjdCgpXG4gICAgfVxuICAgIGlmKHRoaXMuZ2V0U2Vzc2lvbihgcGh4OmZhbGxiYWNrOiR7ZmFsbGJhY2tUcmFuc3BvcnQubmFtZX1gKSl7IHJldHVybiBmYWxsYmFjayhcIm1lbW9yaXplZFwiKSB9XG5cbiAgICB0aGlzLmZhbGxiYWNrVGltZXIgPSBzZXRUaW1lb3V0KGZhbGxiYWNrLCBmYWxsYmFja1RocmVzaG9sZClcblxuICAgIGVycm9yUmVmID0gdGhpcy5vbkVycm9yKHJlYXNvbiA9PiB7XG4gICAgICB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBcImVycm9yXCIsIHJlYXNvbilcbiAgICAgIGlmKHByaW1hcnlUcmFuc3BvcnQgJiYgIWVzdGFibGlzaGVkKXtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZmFsbGJhY2tUaW1lcilcbiAgICAgICAgZmFsbGJhY2socmVhc29uKVxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5vbk9wZW4oKCkgPT4ge1xuICAgICAgZXN0YWJsaXNoZWQgPSB0cnVlXG4gICAgICBpZighcHJpbWFyeVRyYW5zcG9ydCl7XG4gICAgICAgIC8vIG9ubHkgbWVtb3JpemUgTFAgaWYgd2UgbmV2ZXIgY29ubmVjdGVkIHRvIHByaW1hcnlcbiAgICAgICAgaWYoIXRoaXMucHJpbWFyeVBhc3NlZEhlYWx0aENoZWNrKXsgdGhpcy5zdG9yZVNlc3Npb24oYHBoeDpmYWxsYmFjazoke2ZhbGxiYWNrVHJhbnNwb3J0Lm5hbWV9YCwgXCJ0cnVlXCIpIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGBlc3RhYmxpc2hlZCAke2ZhbGxiYWNrVHJhbnNwb3J0Lm5hbWV9IGZhbGxiYWNrYClcbiAgICAgIH1cbiAgICAgIC8vIGlmIHdlJ3ZlIGVzdGFibGlzaGVkIHByaW1hcnksIGdpdmUgdGhlIGZhbGxiYWNrIGEgbmV3IHBlcmlvZCB0byBhdHRlbXB0IHBpbmdcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmZhbGxiYWNrVGltZXIpXG4gICAgICB0aGlzLmZhbGxiYWNrVGltZXIgPSBzZXRUaW1lb3V0KGZhbGxiYWNrLCBmYWxsYmFja1RocmVzaG9sZClcbiAgICAgIHRoaXMucGluZyhydHQgPT4ge1xuICAgICAgICB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBcImNvbm5lY3RlZCB0byBwcmltYXJ5IGFmdGVyXCIsIHJ0dClcbiAgICAgICAgdGhpcy5wcmltYXJ5UGFzc2VkSGVhbHRoQ2hlY2sgPSB0cnVlXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmZhbGxiYWNrVGltZXIpXG4gICAgICB9KVxuICAgIH0pXG4gICAgdGhpcy50cmFuc3BvcnRDb25uZWN0KClcbiAgfVxuXG4gIGNsZWFySGVhcnRiZWF0cygpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmhlYXJ0YmVhdFRpbWVyKVxuICAgIGNsZWFyVGltZW91dCh0aGlzLmhlYXJ0YmVhdFRpbWVvdXRUaW1lcilcbiAgfVxuXG4gIG9uQ29ubk9wZW4oKXtcbiAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBgJHt0aGlzLnRyYW5zcG9ydC5uYW1lfSBjb25uZWN0ZWQgdG8gJHt0aGlzLmVuZFBvaW50VVJMKCl9YClcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgIHRoaXMuZXN0YWJsaXNoZWRDb25uZWN0aW9ucysrXG4gICAgdGhpcy5mbHVzaFNlbmRCdWZmZXIoKVxuICAgIHRoaXMucmVjb25uZWN0VGltZXIucmVzZXQoKVxuICAgIHRoaXMucmVzZXRIZWFydGJlYXQoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Mub3Blbi5mb3JFYWNoKChbLCBjYWxsYmFja10pID0+IGNhbGxiYWNrKCkpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgaGVhcnRiZWF0VGltZW91dCgpe1xuICAgIGlmKHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZil7XG4gICAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSBudWxsXG4gICAgICBpZih0aGlzLmhhc0xvZ2dlcigpKXsgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgXCJoZWFydGJlYXQgdGltZW91dC4gQXR0ZW1wdGluZyB0byByZS1lc3RhYmxpc2ggY29ubmVjdGlvblwiKSB9XG4gICAgICB0aGlzLnRyaWdnZXJDaGFuRXJyb3IoKVxuICAgICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gZmFsc2VcbiAgICAgIHRoaXMudGVhcmRvd24oKCkgPT4gdGhpcy5yZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSwgV1NfQ0xPU0VfTk9STUFMLCBcImhlYXJ0YmVhdCB0aW1lb3V0XCIpXG4gICAgfVxuICB9XG5cbiAgcmVzZXRIZWFydGJlYXQoKXtcbiAgICBpZih0aGlzLmNvbm4gJiYgdGhpcy5jb25uLnNraXBIZWFydGJlYXQpeyByZXR1cm4gfVxuICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICB0aGlzLmNsZWFySGVhcnRiZWF0cygpXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZW5kSGVhcnRiZWF0KCksIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcylcbiAgfVxuXG4gIHRlYXJkb3duKGNhbGxiYWNrLCBjb2RlLCByZWFzb24pe1xuICAgIGlmKCF0aGlzLmNvbm4pe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICB0aGlzLndhaXRGb3JCdWZmZXJEb25lKCgpID0+IHtcbiAgICAgIGlmKHRoaXMuY29ubil7XG4gICAgICAgIGlmKGNvZGUpeyB0aGlzLmNvbm4uY2xvc2UoY29kZSwgcmVhc29uIHx8IFwiXCIpIH0gZWxzZSB7IHRoaXMuY29ubi5jbG9zZSgpIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy53YWl0Rm9yU29ja2V0Q2xvc2VkKCgpID0+IHtcbiAgICAgICAgaWYodGhpcy5jb25uKXtcbiAgICAgICAgICB0aGlzLmNvbm4ub25vcGVuID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgICAgICAgIHRoaXMuY29ubi5vbmVycm9yID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgICAgICAgIHRoaXMuY29ubi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uLm9uY2xvc2UgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uID0gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgd2FpdEZvckJ1ZmZlckRvbmUoY2FsbGJhY2ssIHRyaWVzID0gMSl7XG4gICAgaWYodHJpZXMgPT09IDUgfHwgIXRoaXMuY29ubiB8fCAhdGhpcy5jb25uLmJ1ZmZlcmVkQW1vdW50KXtcbiAgICAgIGNhbGxiYWNrKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy53YWl0Rm9yQnVmZmVyRG9uZShjYWxsYmFjaywgdHJpZXMgKyAxKVxuICAgIH0sIDE1MCAqIHRyaWVzKVxuICB9XG5cbiAgd2FpdEZvclNvY2tldENsb3NlZChjYWxsYmFjaywgdHJpZXMgPSAxKXtcbiAgICBpZih0cmllcyA9PT0gNSB8fCAhdGhpcy5jb25uIHx8IHRoaXMuY29ubi5yZWFkeVN0YXRlID09PSBTT0NLRVRfU1RBVEVTLmNsb3NlZCl7XG4gICAgICBjYWxsYmFjaygpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMud2FpdEZvclNvY2tldENsb3NlZChjYWxsYmFjaywgdHJpZXMgKyAxKVxuICAgIH0sIDE1MCAqIHRyaWVzKVxuICB9XG5cbiAgb25Db25uQ2xvc2UoZXZlbnQpe1xuICAgIGxldCBjbG9zZUNvZGUgPSBldmVudCAmJiBldmVudC5jb2RlXG4gICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgXCJjbG9zZVwiLCBldmVudClcbiAgICB0aGlzLnRyaWdnZXJDaGFuRXJyb3IoKVxuICAgIHRoaXMuY2xlYXJIZWFydGJlYXRzKClcbiAgICBpZighdGhpcy5jbG9zZVdhc0NsZWFuICYmIGNsb3NlQ29kZSAhPT0gMTAwMCl7XG4gICAgICB0aGlzLnJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpXG4gICAgfVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuY2xvc2UuZm9yRWFjaCgoWywgY2FsbGJhY2tdKSA9PiBjYWxsYmFjayhldmVudCkpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uQ29ubkVycm9yKGVycm9yKXtcbiAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBlcnJvcilcbiAgICBsZXQgdHJhbnNwb3J0QmVmb3JlID0gdGhpcy50cmFuc3BvcnRcbiAgICBsZXQgZXN0YWJsaXNoZWRCZWZvcmUgPSB0aGlzLmVzdGFibGlzaGVkQ29ubmVjdGlvbnNcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmVycm9yLmZvckVhY2goKFssIGNhbGxiYWNrXSkgPT4ge1xuICAgICAgY2FsbGJhY2soZXJyb3IsIHRyYW5zcG9ydEJlZm9yZSwgZXN0YWJsaXNoZWRCZWZvcmUpXG4gICAgfSlcbiAgICBpZih0cmFuc3BvcnRCZWZvcmUgPT09IHRoaXMudHJhbnNwb3J0IHx8IGVzdGFibGlzaGVkQmVmb3JlID4gMCl7XG4gICAgICB0aGlzLnRyaWdnZXJDaGFuRXJyb3IoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdHJpZ2dlckNoYW5FcnJvcigpe1xuICAgIHRoaXMuY2hhbm5lbHMuZm9yRWFjaChjaGFubmVsID0+IHtcbiAgICAgIGlmKCEoY2hhbm5lbC5pc0Vycm9yZWQoKSB8fCBjaGFubmVsLmlzTGVhdmluZygpIHx8IGNoYW5uZWwuaXNDbG9zZWQoKSkpe1xuICAgICAgICBjaGFubmVsLnRyaWdnZXIoQ0hBTk5FTF9FVkVOVFMuZXJyb3IpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgY29ubmVjdGlvblN0YXRlKCl7XG4gICAgc3dpdGNoKHRoaXMuY29ubiAmJiB0aGlzLmNvbm4ucmVhZHlTdGF0ZSl7XG4gICAgICBjYXNlIFNPQ0tFVF9TVEFURVMuY29ubmVjdGluZzogcmV0dXJuIFwiY29ubmVjdGluZ1wiXG4gICAgICBjYXNlIFNPQ0tFVF9TVEFURVMub3BlbjogcmV0dXJuIFwib3BlblwiXG4gICAgICBjYXNlIFNPQ0tFVF9TVEFURVMuY2xvc2luZzogcmV0dXJuIFwiY2xvc2luZ1wiXG4gICAgICBkZWZhdWx0OiByZXR1cm4gXCJjbG9zZWRcIlxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ29ubmVjdGVkKCl7IHJldHVybiB0aGlzLmNvbm5lY3Rpb25TdGF0ZSgpID09PSBcIm9wZW5cIiB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqXG4gICAqIEBwYXJhbSB7Q2hhbm5lbH1cbiAgICovXG4gIHJlbW92ZShjaGFubmVsKXtcbiAgICB0aGlzLm9mZihjaGFubmVsLnN0YXRlQ2hhbmdlUmVmcylcbiAgICB0aGlzLmNoYW5uZWxzID0gdGhpcy5jaGFubmVscy5maWx0ZXIoYyA9PiBjICE9PSBjaGFubmVsKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYG9uT3BlbmAsIGBvbkNsb3NlYCwgYG9uRXJyb3IsYCBhbmQgYG9uTWVzc2FnZWAgcmVnaXN0cmF0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtyZWZzfSAtIGxpc3Qgb2YgcmVmcyByZXR1cm5lZCBieSBjYWxscyB0b1xuICAgKiAgICAgICAgICAgICAgICAgYG9uT3BlbmAsIGBvbkNsb3NlYCwgYG9uRXJyb3IsYCBhbmQgYG9uTWVzc2FnZWBcbiAgICovXG4gIG9mZihyZWZzKXtcbiAgICBmb3IobGV0IGtleSBpbiB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzKXtcbiAgICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Nba2V5XSA9IHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Nba2V5XS5maWx0ZXIoKFtyZWZdKSA9PiB7XG4gICAgICAgIHJldHVybiByZWZzLmluZGV4T2YocmVmKSA9PT0gLTFcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYXRlcyBhIG5ldyBjaGFubmVsIGZvciB0aGUgZ2l2ZW4gdG9waWNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjaGFuUGFyYW1zIC0gUGFyYW1ldGVycyBmb3IgdGhlIGNoYW5uZWxcbiAgICogQHJldHVybnMge0NoYW5uZWx9XG4gICAqL1xuICBjaGFubmVsKHRvcGljLCBjaGFuUGFyYW1zID0ge30pe1xuICAgIGxldCBjaGFuID0gbmV3IENoYW5uZWwodG9waWMsIGNoYW5QYXJhbXMsIHRoaXMpXG4gICAgdGhpcy5jaGFubmVscy5wdXNoKGNoYW4pXG4gICAgcmV0dXJuIGNoYW5cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKi9cbiAgcHVzaChkYXRhKXtcbiAgICBpZih0aGlzLmhhc0xvZ2dlcigpKXtcbiAgICAgIGxldCB7dG9waWMsIGV2ZW50LCBwYXlsb2FkLCByZWYsIGpvaW5fcmVmfSA9IGRhdGFcbiAgICAgIHRoaXMubG9nKFwicHVzaFwiLCBgJHt0b3BpY30gJHtldmVudH0gKCR7am9pbl9yZWZ9LCAke3JlZn0pYCwgcGF5bG9hZClcbiAgICB9XG5cbiAgICBpZih0aGlzLmlzQ29ubmVjdGVkKCkpe1xuICAgICAgdGhpcy5lbmNvZGUoZGF0YSwgcmVzdWx0ID0+IHRoaXMuY29ubi5zZW5kKHJlc3VsdCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKCgpID0+IHRoaXMuZW5jb2RlKGRhdGEsIHJlc3VsdCA9PiB0aGlzLmNvbm4uc2VuZChyZXN1bHQpKSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBuZXh0IG1lc3NhZ2UgcmVmLCBhY2NvdW50aW5nIGZvciBvdmVyZmxvd3NcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIG1ha2VSZWYoKXtcbiAgICBsZXQgbmV3UmVmID0gdGhpcy5yZWYgKyAxXG4gICAgaWYobmV3UmVmID09PSB0aGlzLnJlZil7IHRoaXMucmVmID0gMCB9IGVsc2UgeyB0aGlzLnJlZiA9IG5ld1JlZiB9XG5cbiAgICByZXR1cm4gdGhpcy5yZWYudG9TdHJpbmcoKVxuICB9XG5cbiAgc2VuZEhlYXJ0YmVhdCgpe1xuICAgIGlmKHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiAmJiAhdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cbiAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMucHVzaCh7dG9waWM6IFwicGhvZW5peFwiLCBldmVudDogXCJoZWFydGJlYXRcIiwgcGF5bG9hZDoge30sIHJlZjogdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmfSlcbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5oZWFydGJlYXRUaW1lb3V0KCksIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcylcbiAgfVxuXG4gIGZsdXNoU2VuZEJ1ZmZlcigpe1xuICAgIGlmKHRoaXMuaXNDb25uZWN0ZWQoKSAmJiB0aGlzLnNlbmRCdWZmZXIubGVuZ3RoID4gMCl7XG4gICAgICB0aGlzLnNlbmRCdWZmZXIuZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjaygpKVxuICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW11cbiAgICB9XG4gIH1cblxuICBvbkNvbm5NZXNzYWdlKHJhd01lc3NhZ2Upe1xuICAgIHRoaXMuZGVjb2RlKHJhd01lc3NhZ2UuZGF0YSwgbXNnID0+IHtcbiAgICAgIGxldCB7dG9waWMsIGV2ZW50LCBwYXlsb2FkLCByZWYsIGpvaW5fcmVmfSA9IG1zZ1xuICAgICAgaWYocmVmICYmIHJlZiA9PT0gdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmKXtcbiAgICAgICAgdGhpcy5jbGVhckhlYXJ0YmVhdHMoKVxuICAgICAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSBudWxsXG4gICAgICAgIHRoaXMuaGVhcnRiZWF0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2VuZEhlYXJ0YmVhdCgpLCB0aGlzLmhlYXJ0YmVhdEludGVydmFsTXMpXG4gICAgICB9XG5cbiAgICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwicmVjZWl2ZVwiLCBgJHtwYXlsb2FkLnN0YXR1cyB8fCBcIlwifSAke3RvcGljfSAke2V2ZW50fSAke3JlZiAmJiBcIihcIiArIHJlZiArIFwiKVwiIHx8IFwiXCJ9YCwgcGF5bG9hZClcblxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhbm5lbHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBjaGFubmVsID0gdGhpcy5jaGFubmVsc1tpXVxuICAgICAgICBpZighY2hhbm5lbC5pc01lbWJlcih0b3BpYywgZXZlbnQsIHBheWxvYWQsIGpvaW5fcmVmKSl7IGNvbnRpbnVlIH1cbiAgICAgICAgY2hhbm5lbC50cmlnZ2VyKGV2ZW50LCBwYXlsb2FkLCByZWYsIGpvaW5fcmVmKVxuICAgICAgfVxuXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5tZXNzYWdlLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgbGV0IFssIGNhbGxiYWNrXSA9IHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MubWVzc2FnZVtpXVxuICAgICAgICBjYWxsYmFjayhtc2cpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGxlYXZlT3BlblRvcGljKHRvcGljKXtcbiAgICBsZXQgZHVwQ2hhbm5lbCA9IHRoaXMuY2hhbm5lbHMuZmluZChjID0+IGMudG9waWMgPT09IHRvcGljICYmIChjLmlzSm9pbmVkKCkgfHwgYy5pc0pvaW5pbmcoKSkpXG4gICAgaWYoZHVwQ2hhbm5lbCl7XG4gICAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBgbGVhdmluZyBkdXBsaWNhdGUgdG9waWMgXCIke3RvcGljfVwiYClcbiAgICAgIGR1cENoYW5uZWwubGVhdmUoKVxuICAgIH1cbiAgfVxufVxuIiwgImV4cG9ydCBjb25zdCBDT05TRUNVVElWRV9SRUxPQURTID0gXCJjb25zZWN1dGl2ZS1yZWxvYWRzXCJcbmV4cG9ydCBjb25zdCBNQVhfUkVMT0FEUyA9IDEwXG5leHBvcnQgY29uc3QgUkVMT0FEX0pJVFRFUl9NSU4gPSA1MDAwXG5leHBvcnQgY29uc3QgUkVMT0FEX0pJVFRFUl9NQVggPSAxMDAwMFxuZXhwb3J0IGNvbnN0IEZBSUxTQUZFX0pJVFRFUiA9IDMwMDAwXG5leHBvcnQgY29uc3QgUEhYX0VWRU5UX0NMQVNTRVMgPSBbXG4gIFwicGh4LWNsaWNrLWxvYWRpbmdcIiwgXCJwaHgtY2hhbmdlLWxvYWRpbmdcIiwgXCJwaHgtc3VibWl0LWxvYWRpbmdcIixcbiAgXCJwaHgta2V5ZG93bi1sb2FkaW5nXCIsIFwicGh4LWtleXVwLWxvYWRpbmdcIiwgXCJwaHgtYmx1ci1sb2FkaW5nXCIsIFwicGh4LWZvY3VzLWxvYWRpbmdcIixcbiAgXCJwaHgtaG9vay1sb2FkaW5nXCJcbl1cbmV4cG9ydCBjb25zdCBQSFhfQ09NUE9ORU5UID0gXCJkYXRhLXBoeC1jb21wb25lbnRcIlxuZXhwb3J0IGNvbnN0IFBIWF9MSVZFX0xJTksgPSBcImRhdGEtcGh4LWxpbmtcIlxuZXhwb3J0IGNvbnN0IFBIWF9UUkFDS19TVEFUSUMgPSBcInRyYWNrLXN0YXRpY1wiXG5leHBvcnQgY29uc3QgUEhYX0xJTktfU1RBVEUgPSBcImRhdGEtcGh4LWxpbmstc3RhdGVcIlxuZXhwb3J0IGNvbnN0IFBIWF9SRUZfTE9BRElORyA9IFwiZGF0YS1waHgtcmVmLWxvYWRpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9SRUZfU1JDID0gXCJkYXRhLXBoeC1yZWYtc3JjXCJcbmV4cG9ydCBjb25zdCBQSFhfUkVGX0xPQ0sgPSBcImRhdGEtcGh4LXJlZi1sb2NrXCJcbmV4cG9ydCBjb25zdCBQSFhfVFJBQ0tfVVBMT0FEUyA9IFwidHJhY2stdXBsb2Fkc1wiXG5leHBvcnQgY29uc3QgUEhYX1VQTE9BRF9SRUYgPSBcImRhdGEtcGh4LXVwbG9hZC1yZWZcIlxuZXhwb3J0IGNvbnN0IFBIWF9QUkVGTElHSFRFRF9SRUZTID0gXCJkYXRhLXBoeC1wcmVmbGlnaHRlZC1yZWZzXCJcbmV4cG9ydCBjb25zdCBQSFhfRE9ORV9SRUZTID0gXCJkYXRhLXBoeC1kb25lLXJlZnNcIlxuZXhwb3J0IGNvbnN0IFBIWF9EUk9QX1RBUkdFVCA9IFwiZHJvcC10YXJnZXRcIlxuZXhwb3J0IGNvbnN0IFBIWF9BQ1RJVkVfRU5UUllfUkVGUyA9IFwiZGF0YS1waHgtYWN0aXZlLXJlZnNcIlxuZXhwb3J0IGNvbnN0IFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCA9IFwicGh4OmxpdmUtZmlsZTp1cGRhdGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfU0tJUCA9IFwiZGF0YS1waHgtc2tpcFwiXG5leHBvcnQgY29uc3QgUEhYX01BR0lDX0lEID0gXCJkYXRhLXBoeC1pZFwiXG5leHBvcnQgY29uc3QgUEhYX1BSVU5FID0gXCJkYXRhLXBoeC1wcnVuZVwiXG5leHBvcnQgY29uc3QgUEhYX0NPTk5FQ1RFRF9DTEFTUyA9IFwicGh4LWNvbm5lY3RlZFwiXG5leHBvcnQgY29uc3QgUEhYX0xPQURJTkdfQ0xBU1MgPSBcInBoeC1sb2FkaW5nXCJcbmV4cG9ydCBjb25zdCBQSFhfRVJST1JfQ0xBU1MgPSBcInBoeC1lcnJvclwiXG5leHBvcnQgY29uc3QgUEhYX0NMSUVOVF9FUlJPUl9DTEFTUyA9IFwicGh4LWNsaWVudC1lcnJvclwiXG5leHBvcnQgY29uc3QgUEhYX1NFUlZFUl9FUlJPUl9DTEFTUyA9IFwicGh4LXNlcnZlci1lcnJvclwiXG5leHBvcnQgY29uc3QgUEhYX1BBUkVOVF9JRCA9IFwiZGF0YS1waHgtcGFyZW50LWlkXCJcbmV4cG9ydCBjb25zdCBQSFhfTUFJTiA9IFwiZGF0YS1waHgtbWFpblwiXG5leHBvcnQgY29uc3QgUEhYX1JPT1RfSUQgPSBcImRhdGEtcGh4LXJvb3QtaWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9WSUVXUE9SVF9UT1AgPSBcInZpZXdwb3J0LXRvcFwiXG5leHBvcnQgY29uc3QgUEhYX1ZJRVdQT1JUX0JPVFRPTSA9IFwidmlld3BvcnQtYm90dG9tXCJcbmV4cG9ydCBjb25zdCBQSFhfVFJJR0dFUl9BQ1RJT04gPSBcInRyaWdnZXItYWN0aW9uXCJcbmV4cG9ydCBjb25zdCBQSFhfSEFTX0ZPQ1VTRUQgPSBcInBoeC1oYXMtZm9jdXNlZFwiXG5leHBvcnQgY29uc3QgRk9DVVNBQkxFX0lOUFVUUyA9IFtcInRleHRcIiwgXCJ0ZXh0YXJlYVwiLCBcIm51bWJlclwiLCBcImVtYWlsXCIsIFwicGFzc3dvcmRcIiwgXCJzZWFyY2hcIiwgXCJ0ZWxcIiwgXCJ1cmxcIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcImRhdGV0aW1lLWxvY2FsXCIsIFwiY29sb3JcIiwgXCJyYW5nZVwiXVxuZXhwb3J0IGNvbnN0IENIRUNLQUJMRV9JTlBVVFMgPSBbXCJjaGVja2JveFwiLCBcInJhZGlvXCJdXG5leHBvcnQgY29uc3QgUEhYX0hBU19TVUJNSVRURUQgPSBcInBoeC1oYXMtc3VibWl0dGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfU0VTU0lPTiA9IFwiZGF0YS1waHgtc2Vzc2lvblwiXG5leHBvcnQgY29uc3QgUEhYX1ZJRVdfU0VMRUNUT1IgPSBgWyR7UEhYX1NFU1NJT059XWBcbmV4cG9ydCBjb25zdCBQSFhfU1RJQ0tZID0gXCJkYXRhLXBoeC1zdGlja3lcIlxuZXhwb3J0IGNvbnN0IFBIWF9TVEFUSUMgPSBcImRhdGEtcGh4LXN0YXRpY1wiXG5leHBvcnQgY29uc3QgUEhYX1JFQURPTkxZID0gXCJkYXRhLXBoeC1yZWFkb25seVwiXG5leHBvcnQgY29uc3QgUEhYX0RJU0FCTEVEID0gXCJkYXRhLXBoeC1kaXNhYmxlZFwiXG5leHBvcnQgY29uc3QgUEhYX0RJU0FCTEVfV0lUSCA9IFwiZGlzYWJsZS13aXRoXCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUgPSBcImRhdGEtcGh4LWRpc2FibGUtd2l0aC1yZXN0b3JlXCJcbmV4cG9ydCBjb25zdCBQSFhfSE9PSyA9IFwiaG9va1wiXG5leHBvcnQgY29uc3QgUEhYX0RFQk9VTkNFID0gXCJkZWJvdW5jZVwiXG5leHBvcnQgY29uc3QgUEhYX1RIUk9UVExFID0gXCJ0aHJvdHRsZVwiXG5leHBvcnQgY29uc3QgUEhYX1VQREFURSA9IFwidXBkYXRlXCJcbmV4cG9ydCBjb25zdCBQSFhfU1RSRUFNID0gXCJzdHJlYW1cIlxuZXhwb3J0IGNvbnN0IFBIWF9TVFJFQU1fUkVGID0gXCJkYXRhLXBoeC1zdHJlYW1cIlxuZXhwb3J0IGNvbnN0IFBIWF9LRVkgPSBcImtleVwiXG5leHBvcnQgY29uc3QgUEhYX1BSSVZBVEUgPSBcInBoeFByaXZhdGVcIlxuZXhwb3J0IGNvbnN0IFBIWF9BVVRPX1JFQ09WRVIgPSBcImF1dG8tcmVjb3ZlclwiXG5leHBvcnQgY29uc3QgUEhYX0xWX0RFQlVHID0gXCJwaHg6bGl2ZS1zb2NrZXQ6ZGVidWdcIlxuZXhwb3J0IGNvbnN0IFBIWF9MVl9QUk9GSUxFID0gXCJwaHg6bGl2ZS1zb2NrZXQ6cHJvZmlsaW5nXCJcbmV4cG9ydCBjb25zdCBQSFhfTFZfTEFURU5DWV9TSU0gPSBcInBoeDpsaXZlLXNvY2tldDpsYXRlbmN5LXNpbVwiXG5leHBvcnQgY29uc3QgUEhYX0xWX0hJU1RPUllfUE9TSVRJT04gPSBcInBoeDpuYXYtaGlzdG9yeS1wb3NpdGlvblwiXG5leHBvcnQgY29uc3QgUEhYX1BST0dSRVNTID0gXCJwcm9ncmVzc1wiXG5leHBvcnQgY29uc3QgUEhYX01PVU5URUQgPSBcIm1vdW50ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9SRUxPQURfU1RBVFVTID0gXCJfX3Bob2VuaXhfcmVsb2FkX3N0YXR1c19fXCJcbmV4cG9ydCBjb25zdCBMT0FERVJfVElNRU9VVCA9IDFcbmV4cG9ydCBjb25zdCBNQVhfQ0hJTERfSk9JTl9BVFRFTVBUUyA9IDNcbmV4cG9ydCBjb25zdCBCRUZPUkVfVU5MT0FEX0xPQURFUl9USU1FT1VUID0gMjAwXG5leHBvcnQgY29uc3QgQklORElOR19QUkVGSVggPSBcInBoeC1cIlxuZXhwb3J0IGNvbnN0IFBVU0hfVElNRU9VVCA9IDMwMDAwXG5leHBvcnQgY29uc3QgTElOS19IRUFERVIgPSBcIngtcmVxdWVzdGVkLXdpdGhcIlxuZXhwb3J0IGNvbnN0IFJFU1BPTlNFX1VSTF9IRUFERVIgPSBcIngtcmVzcG9uc2UtdXJsXCJcbmV4cG9ydCBjb25zdCBERUJPVU5DRV9UUklHR0VSID0gXCJkZWJvdW5jZS10cmlnZ2VyXCJcbmV4cG9ydCBjb25zdCBUSFJPVFRMRUQgPSBcInRocm90dGxlZFwiXG5leHBvcnQgY29uc3QgREVCT1VOQ0VfUFJFVl9LRVkgPSBcImRlYm91bmNlLXByZXYta2V5XCJcbmV4cG9ydCBjb25zdCBERUZBVUxUUyA9IHtcbiAgZGVib3VuY2U6IDMwMCxcbiAgdGhyb3R0bGU6IDMwMFxufVxuZXhwb3J0IGNvbnN0IFBIWF9QRU5ESU5HX0FUVFJTID0gW1BIWF9SRUZfTE9BRElORywgUEhYX1JFRl9TUkMsIFBIWF9SRUZfTE9DS11cbi8vIFJlbmRlcmVkXG5leHBvcnQgY29uc3QgRFlOQU1JQ1MgPSBcImRcIlxuZXhwb3J0IGNvbnN0IFNUQVRJQyA9IFwic1wiXG5leHBvcnQgY29uc3QgUk9PVCA9IFwiclwiXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UUyA9IFwiY1wiXG5leHBvcnQgY29uc3QgRVZFTlRTID0gXCJlXCJcbmV4cG9ydCBjb25zdCBSRVBMWSA9IFwiclwiXG5leHBvcnQgY29uc3QgVElUTEUgPSBcInRcIlxuZXhwb3J0IGNvbnN0IFRFTVBMQVRFUyA9IFwicFwiXG5leHBvcnQgY29uc3QgU1RSRUFNID0gXCJzdHJlYW1cIlxuIiwgImltcG9ydCB7XG4gIGxvZ0Vycm9yXG59IGZyb20gXCIuL3V0aWxzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW50cnlVcGxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKGVudHJ5LCBjb25maWcsIGxpdmVTb2NrZXQpe1xuICAgIGxldCB7Y2h1bmtfc2l6ZSwgY2h1bmtfdGltZW91dH0gPSBjb25maWdcbiAgICB0aGlzLmxpdmVTb2NrZXQgPSBsaXZlU29ja2V0XG4gICAgdGhpcy5lbnRyeSA9IGVudHJ5XG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgdGhpcy5jaHVua1NpemUgPSBjaHVua19zaXplXG4gICAgdGhpcy5jaHVua1RpbWVvdXQgPSBjaHVua190aW1lb3V0XG4gICAgdGhpcy5jaHVua1RpbWVyID0gbnVsbFxuICAgIHRoaXMuZXJyb3JlZCA9IGZhbHNlXG4gICAgdGhpcy51cGxvYWRDaGFubmVsID0gbGl2ZVNvY2tldC5jaGFubmVsKGBsdnU6JHtlbnRyeS5yZWZ9YCwge3Rva2VuOiBlbnRyeS5tZXRhZGF0YSgpfSlcbiAgfVxuXG4gIGVycm9yKHJlYXNvbil7XG4gICAgaWYodGhpcy5lcnJvcmVkKXsgcmV0dXJuIH1cbiAgICB0aGlzLnVwbG9hZENoYW5uZWwubGVhdmUoKVxuICAgIHRoaXMuZXJyb3JlZCA9IHRydWVcbiAgICBjbGVhclRpbWVvdXQodGhpcy5jaHVua1RpbWVyKVxuICAgIHRoaXMuZW50cnkuZXJyb3IocmVhc29uKVxuICB9XG5cbiAgdXBsb2FkKCl7XG4gICAgdGhpcy51cGxvYWRDaGFubmVsLm9uRXJyb3IocmVhc29uID0+IHRoaXMuZXJyb3IocmVhc29uKSlcbiAgICB0aGlzLnVwbG9hZENoYW5uZWwuam9pbigpXG4gICAgICAucmVjZWl2ZShcIm9rXCIsIF9kYXRhID0+IHRoaXMucmVhZE5leHRDaHVuaygpKVxuICAgICAgLnJlY2VpdmUoXCJlcnJvclwiLCByZWFzb24gPT4gdGhpcy5lcnJvcihyZWFzb24pKVxuICB9XG5cbiAgaXNEb25lKCl7IHJldHVybiB0aGlzLm9mZnNldCA+PSB0aGlzLmVudHJ5LmZpbGUuc2l6ZSB9XG5cbiAgcmVhZE5leHRDaHVuaygpe1xuICAgIGxldCByZWFkZXIgPSBuZXcgd2luZG93LkZpbGVSZWFkZXIoKVxuICAgIGxldCBibG9iID0gdGhpcy5lbnRyeS5maWxlLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLmNodW5rU2l6ZSArIHRoaXMub2Zmc2V0KVxuICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4ge1xuICAgICAgaWYoZS50YXJnZXQuZXJyb3IgPT09IG51bGwpe1xuICAgICAgICB0aGlzLm9mZnNldCArPSBlLnRhcmdldC5yZXN1bHQuYnl0ZUxlbmd0aFxuICAgICAgICB0aGlzLnB1c2hDaHVuayhlLnRhcmdldC5yZXN1bHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbG9nRXJyb3IoXCJSZWFkIGVycm9yOiBcIiArIGUudGFyZ2V0LmVycm9yKVxuICAgICAgfVxuICAgIH1cbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgfVxuXG4gIHB1c2hDaHVuayhjaHVuayl7XG4gICAgaWYoIXRoaXMudXBsb2FkQ2hhbm5lbC5pc0pvaW5lZCgpKXsgcmV0dXJuIH1cbiAgICB0aGlzLnVwbG9hZENoYW5uZWwucHVzaChcImNodW5rXCIsIGNodW5rLCB0aGlzLmNodW5rVGltZW91dClcbiAgICAgIC5yZWNlaXZlKFwib2tcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLmVudHJ5LnByb2dyZXNzKCh0aGlzLm9mZnNldCAvIHRoaXMuZW50cnkuZmlsZS5zaXplKSAqIDEwMClcbiAgICAgICAgaWYoIXRoaXMuaXNEb25lKCkpe1xuICAgICAgICAgIHRoaXMuY2h1bmtUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZWFkTmV4dENodW5rKCksIHRoaXMubGl2ZVNvY2tldC5nZXRMYXRlbmN5U2ltKCkgfHwgMClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5yZWNlaXZlKFwiZXJyb3JcIiwgKHtyZWFzb259KSA9PiB0aGlzLmVycm9yKHJlYXNvbikpXG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBQSFhfVklFV19TRUxFQ1RPUlxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgRW50cnlVcGxvYWRlciBmcm9tIFwiLi9lbnRyeV91cGxvYWRlclwiXG5cbmV4cG9ydCBsZXQgbG9nRXJyb3IgPSAobXNnLCBvYmopID0+IGNvbnNvbGUuZXJyb3IgJiYgY29uc29sZS5lcnJvcihtc2csIG9iailcblxuZXhwb3J0IGxldCBpc0NpZCA9IChjaWQpID0+IHtcbiAgbGV0IHR5cGUgPSB0eXBlb2YoY2lkKVxuICByZXR1cm4gdHlwZSA9PT0gXCJudW1iZXJcIiB8fCAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAvXigwfFsxLTldXFxkKikkLy50ZXN0KGNpZCkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3REdXBsaWNhdGVJZHMoKXtcbiAgbGV0IGlkcyA9IG5ldyBTZXQoKVxuICBsZXQgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiKltpZF1cIilcbiAgZm9yKGxldCBpID0gMCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgIGlmKGlkcy5oYXMoZWxlbXNbaV0uaWQpKXtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE11bHRpcGxlIElEcyBkZXRlY3RlZDogJHtlbGVtc1tpXS5pZH0uIEVuc3VyZSB1bmlxdWUgZWxlbWVudCBpZHMuYClcbiAgICB9IGVsc2Uge1xuICAgICAgaWRzLmFkZChlbGVtc1tpXS5pZClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdEludmFsaWRTdHJlYW1JbnNlcnRzKGluc2VydHMpe1xuICBjb25zdCBlcnJvcnMgPSBuZXcgU2V0KClcbiAgT2JqZWN0LmtleXMoaW5zZXJ0cykuZm9yRWFjaCgoaWQpID0+IHtcbiAgICBjb25zdCBzdHJlYW1FbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKVxuICAgIGlmKHN0cmVhbUVsICYmIHN0cmVhbUVsLnBhcmVudEVsZW1lbnQgJiYgc3RyZWFtRWwucGFyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJwaHgtdXBkYXRlXCIpICE9PSBcInN0cmVhbVwiKXtcbiAgICAgIGVycm9ycy5hZGQoYFRoZSBzdHJlYW0gY29udGFpbmVyIHdpdGggaWQgXCIke3N0cmVhbUVsLnBhcmVudEVsZW1lbnQuaWR9XCIgaXMgbWlzc2luZyB0aGUgcGh4LXVwZGF0ZT1cInN0cmVhbVwiIGF0dHJpYnV0ZS4gRW5zdXJlIGl0IGlzIHNldCBmb3Igc3RyZWFtcyB0byB3b3JrIHByb3Blcmx5LmApXG4gICAgfVxuICB9KVxuICBlcnJvcnMuZm9yRWFjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSlcbn1cblxuZXhwb3J0IGxldCBkZWJ1ZyA9ICh2aWV3LCBraW5kLCBtc2csIG9iaikgPT4ge1xuICBpZih2aWV3LmxpdmVTb2NrZXQuaXNEZWJ1Z0VuYWJsZWQoKSl7XG4gICAgY29uc29sZS5sb2coYCR7dmlldy5pZH0gJHtraW5kfTogJHttc2d9IC0gYCwgb2JqKVxuICB9XG59XG5cbi8vIHdyYXBzIHZhbHVlIGluIGNsb3N1cmUgb3IgcmV0dXJucyBjbG9zdXJlXG5leHBvcnQgbGV0IGNsb3N1cmUgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIgPyB2YWwgOiBmdW5jdGlvbiAoKXsgcmV0dXJuIHZhbCB9XG5cbmV4cG9ydCBsZXQgY2xvbmUgPSAob2JqKSA9PiB7IHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpIH1cblxuZXhwb3J0IGxldCBjbG9zZXN0UGh4QmluZGluZyA9IChlbCwgYmluZGluZywgYm9yZGVyRWwpID0+IHtcbiAgZG8ge1xuICAgIGlmKGVsLm1hdGNoZXMoYFske2JpbmRpbmd9XWApICYmICFlbC5kaXNhYmxlZCl7IHJldHVybiBlbCB9XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50IHx8IGVsLnBhcmVudE5vZGVcbiAgfSB3aGlsZShlbCAhPT0gbnVsbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSAmJiAhKChib3JkZXJFbCAmJiBib3JkZXJFbC5pc1NhbWVOb2RlKGVsKSkgfHwgZWwubWF0Y2hlcyhQSFhfVklFV19TRUxFQ1RPUikpKVxuICByZXR1cm4gbnVsbFxufVxuXG5leHBvcnQgbGV0IGlzT2JqZWN0ID0gKG9iaikgPT4ge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgIShvYmogaW5zdGFuY2VvZiBBcnJheSlcbn1cblxuZXhwb3J0IGxldCBpc0VxdWFsT2JqID0gKG9iajEsIG9iajIpID0+IEpTT04uc3RyaW5naWZ5KG9iajEpID09PSBKU09OLnN0cmluZ2lmeShvYmoyKVxuXG5leHBvcnQgbGV0IGlzRW1wdHkgPSAob2JqKSA9PiB7XG4gIGZvcihsZXQgeCBpbiBvYmopeyByZXR1cm4gZmFsc2UgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgbGV0IG1heWJlID0gKGVsLCBjYWxsYmFjaykgPT4gZWwgJiYgY2FsbGJhY2soZWwpXG5cbmV4cG9ydCBsZXQgY2hhbm5lbFVwbG9hZGVyID0gZnVuY3Rpb24gKGVudHJpZXMsIG9uRXJyb3IsIHJlc3AsIGxpdmVTb2NrZXQpe1xuICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgIGxldCBlbnRyeVVwbG9hZGVyID0gbmV3IEVudHJ5VXBsb2FkZXIoZW50cnksIHJlc3AuY29uZmlnLCBsaXZlU29ja2V0KVxuICAgIGVudHJ5VXBsb2FkZXIudXBsb2FkKClcbiAgfSlcbn1cbiIsICJsZXQgQnJvd3NlciA9IHtcbiAgY2FuUHVzaFN0YXRlKCl7IHJldHVybiAodHlwZW9mIChoaXN0b3J5LnB1c2hTdGF0ZSkgIT09IFwidW5kZWZpbmVkXCIpIH0sXG5cbiAgZHJvcExvY2FsKGxvY2FsU3RvcmFnZSwgbmFtZXNwYWNlLCBzdWJrZXkpe1xuICAgIHJldHVybiBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLmxvY2FsS2V5KG5hbWVzcGFjZSwgc3Via2V5KSlcbiAgfSxcblxuICB1cGRhdGVMb2NhbChsb2NhbFN0b3JhZ2UsIG5hbWVzcGFjZSwgc3Via2V5LCBpbml0aWFsLCBmdW5jKXtcbiAgICBsZXQgY3VycmVudCA9IHRoaXMuZ2V0TG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSlcbiAgICBsZXQga2V5ID0gdGhpcy5sb2NhbEtleShuYW1lc3BhY2UsIHN1YmtleSlcbiAgICBsZXQgbmV3VmFsID0gY3VycmVudCA9PT0gbnVsbCA/IGluaXRpYWwgOiBmdW5jKGN1cnJlbnQpXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShuZXdWYWwpKVxuICAgIHJldHVybiBuZXdWYWxcbiAgfSxcblxuICBnZXRMb2NhbChsb2NhbFN0b3JhZ2UsIG5hbWVzcGFjZSwgc3Via2V5KXtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmxvY2FsS2V5KG5hbWVzcGFjZSwgc3Via2V5KSkpXG4gIH0sXG5cbiAgdXBkYXRlQ3VycmVudFN0YXRlKGNhbGxiYWNrKXtcbiAgICBpZighdGhpcy5jYW5QdXNoU3RhdGUoKSl7IHJldHVybiB9XG4gICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoY2FsbGJhY2soaGlzdG9yeS5zdGF0ZSB8fCB7fSksIFwiXCIsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuICB9LFxuXG4gIHB1c2hTdGF0ZShraW5kLCBtZXRhLCB0byl7XG4gICAgaWYodGhpcy5jYW5QdXNoU3RhdGUoKSl7XG4gICAgICBpZih0byAhPT0gd2luZG93LmxvY2F0aW9uLmhyZWYpe1xuICAgICAgICBpZihtZXRhLnR5cGUgPT0gXCJyZWRpcmVjdFwiICYmIG1ldGEuc2Nyb2xsKXtcbiAgICAgICAgICAvLyBJZiB3ZSdyZSByZWRpcmVjdGluZyBzdG9yZSB0aGUgY3VycmVudCBzY3JvbGxZIGZvciB0aGUgY3VycmVudCBoaXN0b3J5IHN0YXRlLlxuICAgICAgICAgIGxldCBjdXJyZW50U3RhdGUgPSBoaXN0b3J5LnN0YXRlIHx8IHt9XG4gICAgICAgICAgY3VycmVudFN0YXRlLnNjcm9sbCA9IG1ldGEuc2Nyb2xsXG4gICAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoY3VycmVudFN0YXRlLCBcIlwiLCB3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBtZXRhLnNjcm9sbCAvLyBPbmx5IHN0b3JlIHRoZSBzY3JvbGwgaW4gdGhlIHJlZGlyZWN0IGNhc2UuXG4gICAgICAgIGhpc3Rvcnlba2luZCArIFwiU3RhdGVcIl0obWV0YSwgXCJcIiwgdG8gfHwgbnVsbCkgLy8gSUUgd2lsbCBjb2VyY2UgdW5kZWZpbmVkIHRvIHN0cmluZ1xuXG4gICAgICAgIC8vIHdoZW4gdXNpbmcgbmF2aWdhdGUsIHdlJ2QgY2FsbCBwdXNoU3RhdGUgaW1tZWRpYXRlbHkgYmVmb3JlIHBhdGNoaW5nIHRoZSBET00sXG4gICAgICAgIC8vIGp1bXBpbmcgYmFjayB0byB0aGUgdG9wIG9mIHRoZSBwYWdlLCBlZmZlY3RpdmVseSBpZ25vcmluZyB0aGUgc2Nyb2xsSW50b1ZpZXc7XG4gICAgICAgIC8vIHRoZXJlZm9yZSB3ZSB3YWl0IGZvciB0aGUgbmV4dCBmcmFtZSAoYWZ0ZXIgdGhlIERPTSBwYXRjaCkgYW5kIG9ubHkgdGhlbiB0cnlcbiAgICAgICAgLy8gdG8gc2Nyb2xsIHRvIHRoZSBoYXNoRWxcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgbGV0IGhhc2hFbCA9IHRoaXMuZ2V0SGFzaFRhcmdldEVsKHdpbmRvdy5sb2NhdGlvbi5oYXNoKVxuICBcbiAgICAgICAgICBpZihoYXNoRWwpe1xuICAgICAgICAgICAgaGFzaEVsLnNjcm9sbEludG9WaWV3KClcbiAgICAgICAgICB9IGVsc2UgaWYobWV0YS50eXBlID09PSBcInJlZGlyZWN0XCIpe1xuICAgICAgICAgICAgd2luZG93LnNjcm9sbCgwLCAwKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZWRpcmVjdCh0bylcbiAgICB9XG4gIH0sXG5cbiAgc2V0Q29va2llKG5hbWUsIHZhbHVlLCBtYXhBZ2VTZWNvbmRzKXtcbiAgICBsZXQgZXhwaXJlcyA9IHR5cGVvZihtYXhBZ2VTZWNvbmRzKSA9PT0gXCJudW1iZXJcIiA/IGAgbWF4LWFnZT0ke21heEFnZVNlY29uZHN9O2AgOiBcIlwiXG4gICAgZG9jdW1lbnQuY29va2llID0gYCR7bmFtZX09JHt2YWx1ZX07JHtleHBpcmVzfSBwYXRoPS9gXG4gIH0sXG5cbiAgZ2V0Q29va2llKG5hbWUpe1xuICAgIHJldHVybiBkb2N1bWVudC5jb29raWUucmVwbGFjZShuZXcgUmVnRXhwKGAoPzooPzpefC4qO1xccyopJHtuYW1lfVxccypcXD1cXHMqKFteO10qKS4qJCl8Xi4qJGApLCBcIiQxXCIpXG4gIH0sXG5cbiAgZGVsZXRlQ29va2llKG5hbWUpe1xuICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke25hbWV9PTsgbWF4LWFnZT0tMTsgcGF0aD0vYFxuICB9LFxuXG4gIHJlZGlyZWN0KHRvVVJMLCBmbGFzaCl7XG4gICAgaWYoZmxhc2gpeyB0aGlzLnNldENvb2tpZShcIl9fcGhvZW5peF9mbGFzaF9fXCIsIGZsYXNoLCA2MCkgfVxuICAgIHdpbmRvdy5sb2NhdGlvbiA9IHRvVVJMXG4gIH0sXG5cbiAgbG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpeyByZXR1cm4gYCR7bmFtZXNwYWNlfS0ke3N1YmtleX1gIH0sXG5cbiAgZ2V0SGFzaFRhcmdldEVsKG1heWJlSGFzaCl7XG4gICAgbGV0IGhhc2ggPSBtYXliZUhhc2gudG9TdHJpbmcoKS5zdWJzdHJpbmcoMSlcbiAgICBpZihoYXNoID09PSBcIlwiKXsgcmV0dXJuIH1cbiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaGFzaCkgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYVtuYW1lPVwiJHtoYXNofVwiXWApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclxuIiwgImltcG9ydCB7XG4gIENIRUNLQUJMRV9JTlBVVFMsXG4gIERFQk9VTkNFX1BSRVZfS0VZLFxuICBERUJPVU5DRV9UUklHR0VSLFxuICBGT0NVU0FCTEVfSU5QVVRTLFxuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfSEFTX0ZPQ1VTRUQsXG4gIFBIWF9IQVNfU1VCTUlUVEVELFxuICBQSFhfTUFJTixcbiAgUEhYX1BBUkVOVF9JRCxcbiAgUEhYX1BSSVZBVEUsXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfUkVGX0xPQ0ssXG4gIFBIWF9QRU5ESU5HX0FUVFJTLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9VUExPQURfUkVGLFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX1NUSUNLWSxcbiAgUEhYX0VWRU5UX0NMQVNTRVMsXG4gIFRIUk9UVExFRCxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgbG9nRXJyb3Jcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5sZXQgRE9NID0ge1xuICBieUlkKGlkKXsgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSB8fCBsb2dFcnJvcihgbm8gaWQgZm91bmQgZm9yICR7aWR9YCkgfSxcblxuICByZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lKXtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSlcbiAgICBpZihlbC5jbGFzc0xpc3QubGVuZ3RoID09PSAwKXsgZWwucmVtb3ZlQXR0cmlidXRlKFwiY2xhc3NcIikgfVxuICB9LFxuXG4gIGFsbChub2RlLCBxdWVyeSwgY2FsbGJhY2spe1xuICAgIGlmKCFub2RlKXsgcmV0dXJuIFtdIH1cbiAgICBsZXQgYXJyYXkgPSBBcnJheS5mcm9tKG5vZGUucXVlcnlTZWxlY3RvckFsbChxdWVyeSkpXG4gICAgcmV0dXJuIGNhbGxiYWNrID8gYXJyYXkuZm9yRWFjaChjYWxsYmFjaykgOiBhcnJheVxuICB9LFxuXG4gIGNoaWxkTm9kZUxlbmd0aChodG1sKXtcbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sXG4gICAgcmV0dXJuIHRlbXBsYXRlLmNvbnRlbnQuY2hpbGRFbGVtZW50Q291bnRcbiAgfSxcblxuICBpc1VwbG9hZElucHV0KGVsKXsgcmV0dXJuIGVsLnR5cGUgPT09IFwiZmlsZVwiICYmIGVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRikgIT09IG51bGwgfSxcblxuICBpc0F1dG9VcGxvYWQoaW5wdXRFbCl7IHJldHVybiBpbnB1dEVsLmhhc0F0dHJpYnV0ZShcImRhdGEtcGh4LWF1dG8tdXBsb2FkXCIpIH0sXG5cbiAgZmluZFVwbG9hZElucHV0cyhub2RlKXtcbiAgICBjb25zdCBmb3JtSWQgPSBub2RlLmlkXG4gICAgY29uc3QgaW5wdXRzT3V0c2lkZUZvcm0gPSB0aGlzLmFsbChkb2N1bWVudCwgYGlucHV0W3R5cGU9XCJmaWxlXCJdWyR7UEhYX1VQTE9BRF9SRUZ9XVtmb3JtPVwiJHtmb3JtSWR9XCJdYClcbiAgICByZXR1cm4gdGhpcy5hbGwobm9kZSwgYGlucHV0W3R5cGU9XCJmaWxlXCJdWyR7UEhYX1VQTE9BRF9SRUZ9XWApLmNvbmNhdChpbnB1dHNPdXRzaWRlRm9ybSlcbiAgfSxcblxuICBmaW5kQ29tcG9uZW50Tm9kZUxpc3Qobm9kZSwgY2lkKXtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJXaXRoaW5TYW1lTGl2ZVZpZXcodGhpcy5hbGwobm9kZSwgYFske1BIWF9DT01QT05FTlR9PVwiJHtjaWR9XCJdYCksIG5vZGUpXG4gIH0sXG5cbiAgaXNQaHhEZXN0cm95ZWQobm9kZSl7XG4gICAgcmV0dXJuIG5vZGUuaWQgJiYgRE9NLnByaXZhdGUobm9kZSwgXCJkZXN0cm95ZWRcIikgPyB0cnVlIDogZmFsc2VcbiAgfSxcblxuICB3YW50c05ld1RhYihlKXtcbiAgICBsZXQgd2FudHNOZXdUYWIgPSBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSB8fCBlLm1ldGFLZXkgfHwgKGUuYnV0dG9uICYmIGUuYnV0dG9uID09PSAxKVxuICAgIGxldCBpc0Rvd25sb2FkID0gKGUudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQgJiYgZS50YXJnZXQuaGFzQXR0cmlidXRlKFwiZG93bmxvYWRcIikpXG4gICAgbGV0IGlzVGFyZ2V0QmxhbmsgPSBlLnRhcmdldC5oYXNBdHRyaWJ1dGUoXCJ0YXJnZXRcIikgJiYgZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpLnRvTG93ZXJDYXNlKCkgPT09IFwiX2JsYW5rXCJcbiAgICBsZXQgaXNUYXJnZXROYW1lZFRhYiA9IGUudGFyZ2V0Lmhhc0F0dHJpYnV0ZShcInRhcmdldFwiKSAmJiAhZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpLnN0YXJ0c1dpdGgoXCJfXCIpXG4gICAgcmV0dXJuIHdhbnRzTmV3VGFiIHx8IGlzVGFyZ2V0QmxhbmsgfHwgaXNEb3dubG9hZCB8fCBpc1RhcmdldE5hbWVkVGFiXG4gIH0sXG5cbiAgaXNVbmxvYWRhYmxlRm9ybVN1Ym1pdChlKXtcbiAgICAvLyBJZ25vcmUgZm9ybSBzdWJtaXNzaW9ucyBpbnRlbmRlZCB0byBjbG9zZSBhIG5hdGl2ZSA8ZGlhbG9nPiBlbGVtZW50XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2RpYWxvZyN1c2FnZV9ub3Rlc1xuICAgIGxldCBpc0RpYWxvZ1N1Ym1pdCA9IChlLnRhcmdldCAmJiBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgPT09IFwiZGlhbG9nXCIpIHx8XG4gICAgICAoZS5zdWJtaXR0ZXIgJiYgZS5zdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSA9PT0gXCJkaWFsb2dcIilcblxuICAgIGlmKGlzRGlhbG9nU3VibWl0KXtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gIWUuZGVmYXVsdFByZXZlbnRlZCAmJiAhdGhpcy53YW50c05ld1RhYihlKVxuICAgIH1cbiAgfSxcblxuICBpc05ld1BhZ2VDbGljayhlLCBjdXJyZW50TG9jYXRpb24pe1xuICAgIGxldCBocmVmID0gZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCA/IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImhyZWZcIikgOiBudWxsXG4gICAgbGV0IHVybFxuXG4gICAgaWYoZS5kZWZhdWx0UHJldmVudGVkIHx8IGhyZWYgPT09IG51bGwgfHwgdGhpcy53YW50c05ld1RhYihlKSl7IHJldHVybiBmYWxzZSB9XG4gICAgaWYoaHJlZi5zdGFydHNXaXRoKFwibWFpbHRvOlwiKSB8fCBocmVmLnN0YXJ0c1dpdGgoXCJ0ZWw6XCIpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZihlLnRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZSl7IHJldHVybiBmYWxzZSB9XG5cbiAgICB0cnkge1xuICAgICAgdXJsID0gbmV3IFVSTChocmVmKVxuICAgIH0gY2F0Y2gge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdXJsID0gbmV3IFVSTChocmVmLCBjdXJyZW50TG9jYXRpb24pXG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gYmFkIFVSTCwgZmFsbGJhY2sgdG8gbGV0IGJyb3dzZXIgdHJ5IGl0IGFzIGV4dGVybmFsXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYodXJsLmhvc3QgPT09IGN1cnJlbnRMb2NhdGlvbi5ob3N0ICYmIHVybC5wcm90b2NvbCA9PT0gY3VycmVudExvY2F0aW9uLnByb3RvY29sKXtcbiAgICAgIGlmKHVybC5wYXRobmFtZSA9PT0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lICYmIHVybC5zZWFyY2ggPT09IGN1cnJlbnRMb2NhdGlvbi5zZWFyY2gpe1xuICAgICAgICByZXR1cm4gdXJsLmhhc2ggPT09IFwiXCIgJiYgIXVybC5ocmVmLmVuZHNXaXRoKFwiI1wiKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXJsLnByb3RvY29sLnN0YXJ0c1dpdGgoXCJodHRwXCIpXG4gIH0sXG5cbiAgbWFya1BoeENoaWxkRGVzdHJveWVkKGVsKXtcbiAgICBpZih0aGlzLmlzUGh4Q2hpbGQoZWwpKXsgZWwuc2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OLCBcIlwiKSB9XG4gICAgdGhpcy5wdXRQcml2YXRlKGVsLCBcImRlc3Ryb3llZFwiLCB0cnVlKVxuICB9LFxuXG4gIGZpbmRQaHhDaGlsZHJlbkluRnJhZ21lbnQoaHRtbCwgcGFyZW50SWQpe1xuICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKVxuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcbiAgICByZXR1cm4gdGhpcy5maW5kUGh4Q2hpbGRyZW4odGVtcGxhdGUuY29udGVudCwgcGFyZW50SWQpXG4gIH0sXG5cbiAgaXNJZ25vcmVkKGVsLCBwaHhVcGRhdGUpe1xuICAgIHJldHVybiAoZWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkgfHwgZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtdXBkYXRlXCIpKSA9PT0gXCJpZ25vcmVcIlxuICB9LFxuXG4gIGlzUGh4VXBkYXRlKGVsLCBwaHhVcGRhdGUsIHVwZGF0ZVR5cGVzKXtcbiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlICYmIHVwZGF0ZVR5cGVzLmluZGV4T2YoZWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkpID49IDBcbiAgfSxcblxuICBmaW5kUGh4U3RpY2t5KGVsKXsgcmV0dXJuIHRoaXMuYWxsKGVsLCBgWyR7UEhYX1NUSUNLWX1dYCkgfSxcblxuICBmaW5kUGh4Q2hpbGRyZW4oZWwsIHBhcmVudElkKXtcbiAgICByZXR1cm4gdGhpcy5hbGwoZWwsIGAke1BIWF9WSUVXX1NFTEVDVE9SfVske1BIWF9QQVJFTlRfSUR9PVwiJHtwYXJlbnRJZH1cIl1gKVxuICB9LFxuXG4gIGZpbmRFeGlzdGluZ1BhcmVudENJRHMobm9kZSwgY2lkcyl7XG4gICAgLy8gd2Ugb25seSB3YW50IHRvIGZpbmQgcGFyZW50cyB0aGF0IGV4aXN0IG9uIHRoZSBwYWdlXG4gICAgLy8gaWYgYSBjaWQgaXMgbm90IG9uIHRoZSBwYWdlLCB0aGUgb25seSB3YXkgaXQgY2FuIGJlIGFkZGVkIGJhY2sgdG8gdGhlIHBhZ2VcbiAgICAvLyBpcyBpZiBhIHBhcmVudCBhZGRzIGl0IGJhY2ssIHRoZXJlZm9yZSBpZiBhIGNpZCBkb2VzIG5vdCBleGlzdCBvbiB0aGUgcGFnZSxcbiAgICAvLyB3ZSBzaG91bGQgbm90IHRyeSB0byByZW5kZXIgaXQgYnkgaXRzZWxmIChiZWNhdXNlIGl0IHdvdWxkIGJlIHJlbmRlcmVkIHR3aWNlLFxuICAgIC8vIG9uZSBieSB0aGUgcGFyZW50LCBhbmQgYSBzZWNvbmQgdGltZSBieSBpdHNlbGYpXG4gICAgbGV0IHBhcmVudENpZHMgPSBuZXcgU2V0KClcbiAgICBsZXQgY2hpbGRyZW5DaWRzID0gbmV3IFNldCgpXG5cbiAgICBjaWRzLmZvckVhY2goY2lkID0+IHtcbiAgICAgIHRoaXMuZmlsdGVyV2l0aGluU2FtZUxpdmVWaWV3KHRoaXMuYWxsKG5vZGUsIGBbJHtQSFhfQ09NUE9ORU5UfT1cIiR7Y2lkfVwiXWApLCBub2RlKS5mb3JFYWNoKHBhcmVudCA9PiB7XG4gICAgICAgIHBhcmVudENpZHMuYWRkKGNpZClcbiAgICAgICAgdGhpcy5maWx0ZXJXaXRoaW5TYW1lTGl2ZVZpZXcodGhpcy5hbGwocGFyZW50LCBgWyR7UEhYX0NPTVBPTkVOVH1dYCksIHBhcmVudClcbiAgICAgICAgICAubWFwKGVsID0+IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5UKSkpXG4gICAgICAgICAgLmZvckVhY2goY2hpbGRDSUQgPT4gY2hpbGRyZW5DaWRzLmFkZChjaGlsZENJRCkpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBjaGlsZHJlbkNpZHMuZm9yRWFjaChjaGlsZENpZCA9PiBwYXJlbnRDaWRzLmRlbGV0ZShjaGlsZENpZCkpXG5cbiAgICByZXR1cm4gcGFyZW50Q2lkc1xuICB9LFxuXG4gIGZpbHRlcldpdGhpblNhbWVMaXZlVmlldyhub2RlcywgcGFyZW50KXtcbiAgICBpZihwYXJlbnQucXVlcnlTZWxlY3RvcihQSFhfVklFV19TRUxFQ1RPUikpe1xuICAgICAgcmV0dXJuIG5vZGVzLmZpbHRlcihlbCA9PiB0aGlzLndpdGhpblNhbWVMaXZlVmlldyhlbCwgcGFyZW50KSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGVzXG4gICAgfVxuICB9LFxuXG4gIHdpdGhpblNhbWVMaXZlVmlldyhub2RlLCBwYXJlbnQpe1xuICAgIHdoaWxlKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpe1xuICAgICAgaWYobm9kZS5pc1NhbWVOb2RlKHBhcmVudCkpeyByZXR1cm4gdHJ1ZSB9XG4gICAgICBpZihub2RlLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTikgIT09IG51bGwpeyByZXR1cm4gZmFsc2UgfVxuICAgIH1cbiAgfSxcblxuICBwcml2YXRlKGVsLCBrZXkpeyByZXR1cm4gZWxbUEhYX1BSSVZBVEVdICYmIGVsW1BIWF9QUklWQVRFXVtrZXldIH0sXG5cbiAgZGVsZXRlUHJpdmF0ZShlbCwga2V5KXsgZWxbUEhYX1BSSVZBVEVdICYmIGRlbGV0ZSAoZWxbUEhYX1BSSVZBVEVdW2tleV0pIH0sXG5cbiAgcHV0UHJpdmF0ZShlbCwga2V5LCB2YWx1ZSl7XG4gICAgaWYoIWVsW1BIWF9QUklWQVRFXSl7IGVsW1BIWF9QUklWQVRFXSA9IHt9IH1cbiAgICBlbFtQSFhfUFJJVkFURV1ba2V5XSA9IHZhbHVlXG4gIH0sXG5cbiAgdXBkYXRlUHJpdmF0ZShlbCwga2V5LCBkZWZhdWx0VmFsLCB1cGRhdGVGdW5jKXtcbiAgICBsZXQgZXhpc3RpbmcgPSB0aGlzLnByaXZhdGUoZWwsIGtleSlcbiAgICBpZihleGlzdGluZyA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCB1cGRhdGVGdW5jKGRlZmF1bHRWYWwpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgdXBkYXRlRnVuYyhleGlzdGluZykpXG4gICAgfVxuICB9LFxuXG4gIHN5bmNQZW5kaW5nQXR0cnMoZnJvbUVsLCB0b0VsKXtcbiAgICBpZighZnJvbUVsLmhhc0F0dHJpYnV0ZShQSFhfUkVGX1NSQykpeyByZXR1cm4gfVxuICAgIFBIWF9FVkVOVF9DTEFTU0VTLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgIGZyb21FbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSAmJiB0b0VsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKVxuICAgIH0pXG4gICAgUEhYX1BFTkRJTkdfQVRUUlMuZmlsdGVyKGF0dHIgPT4gZnJvbUVsLmhhc0F0dHJpYnV0ZShhdHRyKSkuZm9yRWFjaChhdHRyID0+IHtcbiAgICAgIHRvRWwuc2V0QXR0cmlidXRlKGF0dHIsIGZyb21FbC5nZXRBdHRyaWJ1dGUoYXR0cikpXG4gICAgfSlcbiAgfSxcblxuICBjb3B5UHJpdmF0ZXModGFyZ2V0LCBzb3VyY2Upe1xuICAgIGlmKHNvdXJjZVtQSFhfUFJJVkFURV0pe1xuICAgICAgdGFyZ2V0W1BIWF9QUklWQVRFXSA9IHNvdXJjZVtQSFhfUFJJVkFURV1cbiAgICB9XG4gIH0sXG5cbiAgcHV0VGl0bGUoc3RyKXtcbiAgICBsZXQgdGl0bGVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJ0aXRsZVwiKVxuICAgIGlmKHRpdGxlRWwpe1xuICAgICAgbGV0IHtwcmVmaXgsIHN1ZmZpeCwgZGVmYXVsdDogZGVmYXVsdFRpdGxlfSA9IHRpdGxlRWwuZGF0YXNldFxuICAgICAgbGV0IGlzRW1wdHkgPSB0eXBlb2Yoc3RyKSAhPT0gXCJzdHJpbmdcIiB8fCBzdHIudHJpbSgpID09PSBcIlwiXG4gICAgICBpZihpc0VtcHR5ICYmIHR5cGVvZihkZWZhdWx0VGl0bGUpICE9PSBcInN0cmluZ1wiKXsgcmV0dXJuIH1cblxuICAgICAgbGV0IGlubmVyID0gaXNFbXB0eSA/IGRlZmF1bHRUaXRsZSA6IHN0clxuICAgICAgZG9jdW1lbnQudGl0bGUgPSBgJHtwcmVmaXggfHwgXCJcIn0ke2lubmVyIHx8IFwiXCJ9JHtzdWZmaXggfHwgXCJcIn1gXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gc3RyXG4gICAgfVxuICB9LFxuXG4gIGRlYm91bmNlKGVsLCBldmVudCwgcGh4RGVib3VuY2UsIGRlZmF1bHREZWJvdW5jZSwgcGh4VGhyb3R0bGUsIGRlZmF1bHRUaHJvdHRsZSwgYXN5bmNGaWx0ZXIsIGNhbGxiYWNrKXtcbiAgICBsZXQgZGVib3VuY2UgPSBlbC5nZXRBdHRyaWJ1dGUocGh4RGVib3VuY2UpXG4gICAgbGV0IHRocm90dGxlID0gZWwuZ2V0QXR0cmlidXRlKHBoeFRocm90dGxlKVxuXG4gICAgaWYoZGVib3VuY2UgPT09IFwiXCIpeyBkZWJvdW5jZSA9IGRlZmF1bHREZWJvdW5jZSB9XG4gICAgaWYodGhyb3R0bGUgPT09IFwiXCIpeyB0aHJvdHRsZSA9IGRlZmF1bHRUaHJvdHRsZSB9XG4gICAgbGV0IHZhbHVlID0gZGVib3VuY2UgfHwgdGhyb3R0bGVcbiAgICBzd2l0Y2godmFsdWUpe1xuICAgICAgY2FzZSBudWxsOiByZXR1cm4gY2FsbGJhY2soKVxuXG4gICAgICBjYXNlIFwiYmx1clwiOlxuICAgICAgICBpZih0aGlzLm9uY2UoZWwsIFwiZGVib3VuY2UtYmx1clwiKSl7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaWYoYXN5bmNGaWx0ZXIoKSl7IGNhbGxiYWNrKCkgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxldCB0aW1lb3V0ID0gcGFyc2VJbnQodmFsdWUpXG4gICAgICAgIGxldCB0cmlnZ2VyID0gKCkgPT4gdGhyb3R0bGUgPyB0aGlzLmRlbGV0ZVByaXZhdGUoZWwsIFRIUk9UVExFRCkgOiBjYWxsYmFjaygpXG4gICAgICAgIGxldCBjdXJyZW50Q3ljbGUgPSB0aGlzLmluY0N5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSLCB0cmlnZ2VyKVxuICAgICAgICBpZihpc05hTih0aW1lb3V0KSl7IHJldHVybiBsb2dFcnJvcihgaW52YWxpZCB0aHJvdHRsZS9kZWJvdW5jZSB2YWx1ZTogJHt2YWx1ZX1gKSB9XG4gICAgICAgIGlmKHRocm90dGxlKXtcbiAgICAgICAgICBsZXQgbmV3S2V5RG93biA9IGZhbHNlXG4gICAgICAgICAgaWYoZXZlbnQudHlwZSA9PT0gXCJrZXlkb3duXCIpe1xuICAgICAgICAgICAgbGV0IHByZXZLZXkgPSB0aGlzLnByaXZhdGUoZWwsIERFQk9VTkNFX1BSRVZfS0VZKVxuICAgICAgICAgICAgdGhpcy5wdXRQcml2YXRlKGVsLCBERUJPVU5DRV9QUkVWX0tFWSwgZXZlbnQua2V5KVxuICAgICAgICAgICAgbmV3S2V5RG93biA9IHByZXZLZXkgIT09IGV2ZW50LmtleVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKCFuZXdLZXlEb3duICYmIHRoaXMucHJpdmF0ZShlbCwgVEhST1RUTEVEKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgICAgY29uc3QgdCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBpZihhc3luY0ZpbHRlcigpKXsgdGhpcy50cmlnZ2VyQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIpIH1cbiAgICAgICAgICAgIH0sIHRpbWVvdXQpXG4gICAgICAgICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIFRIUk9UVExFRCwgdClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZihhc3luY0ZpbHRlcigpKXsgdGhpcy50cmlnZ2VyQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIsIGN1cnJlbnRDeWNsZSkgfVxuICAgICAgICAgIH0sIHRpbWVvdXQpXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZm9ybSA9IGVsLmZvcm1cbiAgICAgICAgaWYoZm9ybSAmJiB0aGlzLm9uY2UoZm9ybSwgXCJiaW5kLWRlYm91bmNlXCIpKXtcbiAgICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQXJyYXkuZnJvbSgobmV3IEZvcm1EYXRhKGZvcm0pKS5lbnRyaWVzKCksIChbbmFtZV0pID0+IHtcbiAgICAgICAgICAgICAgbGV0IGlucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7bmFtZX1cIl1gKVxuICAgICAgICAgICAgICB0aGlzLmluY0N5Y2xlKGlucHV0LCBERUJPVU5DRV9UUklHR0VSKVxuICAgICAgICAgICAgICB0aGlzLmRlbGV0ZVByaXZhdGUoaW5wdXQsIFRIUk9UVExFRClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLm9uY2UoZWwsIFwiYmluZC1kZWJvdW5jZVwiKSl7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSB0cmlnZ2VyIHRoZSBjYWxsYmFjayBoZXJlLFxuICAgICAgICAgICAgLy8gd2UgYWxzbyBjbGVhciB0aGUgdGhyb3R0bGUgdGltZW91dCB0byBwcmV2ZW50IHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgLy8gZnJvbSBiZWluZyBjYWxsZWQgYWdhaW4gYWZ0ZXIgdGhlIHRpbWVvdXQgZmlyZXNcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnByaXZhdGUoZWwsIFRIUk9UVExFRCkpXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJDeWNsZShlbCwgREVCT1VOQ0VfVFJJR0dFUilcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHRyaWdnZXJDeWNsZShlbCwga2V5LCBjdXJyZW50Q3ljbGUpe1xuICAgIGxldCBbY3ljbGUsIHRyaWdnZXJdID0gdGhpcy5wcml2YXRlKGVsLCBrZXkpXG4gICAgaWYoIWN1cnJlbnRDeWNsZSl7IGN1cnJlbnRDeWNsZSA9IGN5Y2xlIH1cbiAgICBpZihjdXJyZW50Q3ljbGUgPT09IGN5Y2xlKXtcbiAgICAgIHRoaXMuaW5jQ3ljbGUoZWwsIGtleSlcbiAgICAgIHRyaWdnZXIoKVxuICAgIH1cbiAgfSxcblxuICBvbmNlKGVsLCBrZXkpe1xuICAgIGlmKHRoaXMucHJpdmF0ZShlbCwga2V5KSA9PT0gdHJ1ZSl7IHJldHVybiBmYWxzZSB9XG4gICAgdGhpcy5wdXRQcml2YXRlKGVsLCBrZXksIHRydWUpXG4gICAgcmV0dXJuIHRydWVcbiAgfSxcblxuICBpbmNDeWNsZShlbCwga2V5LCB0cmlnZ2VyID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIGxldCBbY3VycmVudEN5Y2xlXSA9IHRoaXMucHJpdmF0ZShlbCwga2V5KSB8fCBbMCwgdHJpZ2dlcl1cbiAgICBjdXJyZW50Q3ljbGUrK1xuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCBbY3VycmVudEN5Y2xlLCB0cmlnZ2VyXSlcbiAgICByZXR1cm4gY3VycmVudEN5Y2xlXG4gIH0sXG5cbiAgLy8gbWFpbnRhaW5zIG9yIGFkZHMgcHJpdmF0ZWx5IHVzZWQgaG9vayBpbmZvcm1hdGlvblxuICAvLyBmcm9tRWwgYW5kIHRvRWwgY2FuIGJlIHRoZSBzYW1lIGVsZW1lbnQgaW4gdGhlIGNhc2Ugb2YgYSBuZXdseSBhZGRlZCBub2RlXG4gIC8vIGZyb21FbCBhbmQgdG9FbCBjYW4gYmUgYW55IEhUTUwgbm9kZSB0eXBlLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGlmIGl0J3MgYW4gZWxlbWVudCBub2RlXG4gIG1haW50YWluUHJpdmF0ZUhvb2tzKGZyb21FbCwgdG9FbCwgcGh4Vmlld3BvcnRUb3AsIHBoeFZpZXdwb3J0Qm90dG9tKXtcbiAgICAvLyBtYWludGFpbiB0aGUgaG9va3MgY3JlYXRlZCB3aXRoIGNyZWF0ZUhvb2tcbiAgICBpZihmcm9tRWwuaGFzQXR0cmlidXRlICYmIGZyb21FbC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIpICYmICF0b0VsLmhhc0F0dHJpYnV0ZShcImRhdGEtcGh4LWhvb2tcIikpe1xuICAgICAgdG9FbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIsIGZyb21FbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIpKVxuICAgIH1cbiAgICAvLyBhZGQgaG9va3MgdG8gZWxlbWVudHMgd2l0aCB2aWV3cG9ydCBhdHRyaWJ1dGVzXG4gICAgaWYodG9FbC5oYXNBdHRyaWJ1dGUgJiYgKHRvRWwuaGFzQXR0cmlidXRlKHBoeFZpZXdwb3J0VG9wKSB8fCB0b0VsLmhhc0F0dHJpYnV0ZShwaHhWaWV3cG9ydEJvdHRvbSkpKXtcbiAgICAgIHRvRWwuc2V0QXR0cmlidXRlKFwiZGF0YS1waHgtaG9va1wiLCBcIlBob2VuaXguSW5maW5pdGVTY3JvbGxcIilcbiAgICB9XG4gIH0sXG5cbiAgcHV0Q3VzdG9tRWxIb29rKGVsLCBob29rKXtcbiAgICBpZihlbC5pc0Nvbm5lY3RlZCl7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIsIFwiXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFxuICAgICAgICBob29rIGF0dGFjaGVkIHRvIG5vbi1jb25uZWN0ZWQgRE9NIGVsZW1lbnRcbiAgICAgICAgZW5zdXJlIHlvdSBhcmUgY2FsbGluZyBjcmVhdGVIb29rIHdpdGhpbiB5b3VyIGNvbm5lY3RlZENhbGxiYWNrLiAke2VsLm91dGVySFRNTH1cbiAgICAgIGApXG4gICAgfVxuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwgXCJjdXN0b20tZWwtaG9va1wiLCBob29rKVxuICB9LFxuXG4gIGdldEN1c3RvbUVsSG9vayhlbCl7IHJldHVybiB0aGlzLnByaXZhdGUoZWwsIFwiY3VzdG9tLWVsLWhvb2tcIikgfSxcblxuICBpc1VzZWRJbnB1dChlbCl7XG4gICAgcmV0dXJuIChlbC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiZcbiAgICAgICh0aGlzLnByaXZhdGUoZWwsIFBIWF9IQVNfRk9DVVNFRCkgfHwgdGhpcy5wcml2YXRlKGVsLCBQSFhfSEFTX1NVQk1JVFRFRCkpKVxuICB9LFxuXG4gIHJlc2V0Rm9ybShmb3JtKXtcbiAgICBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgdGhpcy5kZWxldGVQcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQpXG4gICAgICB0aGlzLmRlbGV0ZVByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVEKVxuICAgIH0pXG4gIH0sXG5cbiAgaXNQaHhDaGlsZChub2RlKXtcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1BBUkVOVF9JRClcbiAgfSxcblxuICBpc1BoeFN0aWNreShub2RlKXtcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1NUSUNLWSkgIT09IG51bGxcbiAgfSxcblxuICBpc0NoaWxkT2ZBbnkoZWwsIHBhcmVudHMpe1xuICAgIHJldHVybiAhIXBhcmVudHMuZmluZChwYXJlbnQgPT4gcGFyZW50LmNvbnRhaW5zKGVsKSlcbiAgfSxcblxuICBmaXJzdFBoeENoaWxkKGVsKXtcbiAgICByZXR1cm4gdGhpcy5pc1BoeENoaWxkKGVsKSA/IGVsIDogdGhpcy5hbGwoZWwsIGBbJHtQSFhfUEFSRU5UX0lEfV1gKVswXVxuICB9LFxuXG4gIGRpc3BhdGNoRXZlbnQodGFyZ2V0LCBuYW1lLCBvcHRzID0ge30pe1xuICAgIGxldCBkZWZhdWx0QnViYmxlID0gdHJ1ZVxuICAgIGxldCBpc1VwbG9hZFRhcmdldCA9IHRhcmdldC5ub2RlTmFtZSA9PT0gXCJJTlBVVFwiICYmIHRhcmdldC50eXBlID09PSBcImZpbGVcIlxuICAgIGlmKGlzVXBsb2FkVGFyZ2V0ICYmIG5hbWUgPT09IFwiY2xpY2tcIil7XG4gICAgICBkZWZhdWx0QnViYmxlID0gZmFsc2VcbiAgICB9XG4gICAgbGV0IGJ1YmJsZXMgPSBvcHRzLmJ1YmJsZXMgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRCdWJibGUgOiAhIW9wdHMuYnViYmxlc1xuICAgIGxldCBldmVudE9wdHMgPSB7YnViYmxlczogYnViYmxlcywgY2FuY2VsYWJsZTogdHJ1ZSwgZGV0YWlsOiBvcHRzLmRldGFpbCB8fCB7fX1cbiAgICBsZXQgZXZlbnQgPSBuYW1lID09PSBcImNsaWNrXCIgPyBuZXcgTW91c2VFdmVudChcImNsaWNrXCIsIGV2ZW50T3B0cykgOiBuZXcgQ3VzdG9tRXZlbnQobmFtZSwgZXZlbnRPcHRzKVxuICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KVxuICB9LFxuXG4gIGNsb25lTm9kZShub2RlLCBodG1sKXtcbiAgICBpZih0eXBlb2YgKGh0bWwpID09PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgIHJldHVybiBub2RlLmNsb25lTm9kZSh0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY2xvbmVkID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpXG4gICAgICBjbG9uZWQuaW5uZXJIVE1MID0gaHRtbFxuICAgICAgcmV0dXJuIGNsb25lZFxuICAgIH1cbiAgfSxcblxuICAvLyBtZXJnZSBhdHRyaWJ1dGVzIGZyb20gc291cmNlIHRvIHRhcmdldFxuICAvLyBpZiBhbiBlbGVtZW50IGlzIGlnbm9yZWQsIHdlIG9ubHkgbWVyZ2UgZGF0YSBhdHRyaWJ1dGVzXG4gIC8vIGluY2x1ZGluZyByZW1vdmluZyBkYXRhIGF0dHJpYnV0ZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBzb3VyY2VcbiAgbWVyZ2VBdHRycyh0YXJnZXQsIHNvdXJjZSwgb3B0cyA9IHt9KXtcbiAgICBsZXQgZXhjbHVkZSA9IG5ldyBTZXQob3B0cy5leGNsdWRlIHx8IFtdKVxuICAgIGxldCBpc0lnbm9yZWQgPSBvcHRzLmlzSWdub3JlZFxuICAgIGxldCBzb3VyY2VBdHRycyA9IHNvdXJjZS5hdHRyaWJ1dGVzXG4gICAgZm9yKGxldCBpID0gc291cmNlQXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgbGV0IG5hbWUgPSBzb3VyY2VBdHRyc1tpXS5uYW1lXG4gICAgICBpZighZXhjbHVkZS5oYXMobmFtZSkpe1xuICAgICAgICBjb25zdCBzb3VyY2VWYWx1ZSA9IHNvdXJjZS5nZXRBdHRyaWJ1dGUobmFtZSlcbiAgICAgICAgaWYodGFyZ2V0LmdldEF0dHJpYnV0ZShuYW1lKSAhPT0gc291cmNlVmFsdWUgJiYgKCFpc0lnbm9yZWQgfHwgKGlzSWdub3JlZCAmJiBuYW1lLnN0YXJ0c1dpdGgoXCJkYXRhLVwiKSkpKXtcbiAgICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKG5hbWUsIHNvdXJjZVZhbHVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSBleGNsdWRlIHRoZSB2YWx1ZSBmcm9tIGJlaW5nIG1lcmdlZCBvbiBmb2N1c2VkIGlucHV0cywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gdXNlcidzIGlucHV0IHNob3VsZCBhbHdheXMgd2luLlxuICAgICAgICAvLyBXZSBjYW4gc3RpbGwgYXNzaWduIGl0IGFzIGxvbmcgYXMgdGhlIHZhbHVlIHByb3BlcnR5IGlzIHRoZSBzYW1lLCB0aG91Z2guXG4gICAgICAgIC8vIFRoaXMgcHJldmVudHMgYSBzaXR1YXRpb24gd2hlcmUgdGhlIHVwZGF0ZWQgaG9vayBpcyBub3QgYmVpbmcgdHJpZ2dlcmVkXG4gICAgICAgIC8vIHdoZW4gYW4gaW5wdXQgaXMgYmFjayBpbiBpdHMgXCJvcmlnaW5hbCBzdGF0ZVwiLCBiZWNhdXNlIHRoZSBhdHRyaWJ1dGVcbiAgICAgICAgLy8gd2FzIG5ldmVyIGNoYW5nZWQsIHNlZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peF9saXZlX3ZpZXcvaXNzdWVzLzIxNjNcbiAgICAgICAgaWYobmFtZSA9PT0gXCJ2YWx1ZVwiICYmIHRhcmdldC52YWx1ZSA9PT0gc291cmNlLnZhbHVlKXtcbiAgICAgICAgICAvLyBhY3R1YWxseSBzZXQgdGhlIHZhbHVlIGF0dHJpYnV0ZSB0byBzeW5jIGl0IHdpdGggdGhlIHZhbHVlIHByb3BlcnR5XG4gICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIHNvdXJjZS5nZXRBdHRyaWJ1dGUobmFtZSkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdGFyZ2V0QXR0cnMgPSB0YXJnZXQuYXR0cmlidXRlc1xuICAgIGZvcihsZXQgaSA9IHRhcmdldEF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgIGxldCBuYW1lID0gdGFyZ2V0QXR0cnNbaV0ubmFtZVxuICAgICAgaWYoaXNJZ25vcmVkKXtcbiAgICAgICAgaWYobmFtZS5zdGFydHNXaXRoKFwiZGF0YS1cIikgJiYgIXNvdXJjZS5oYXNBdHRyaWJ1dGUobmFtZSkgJiYgIVBIWF9QRU5ESU5HX0FUVFJTLmluY2x1ZGVzKG5hbWUpKXsgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShuYW1lKSB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZighc291cmNlLmhhc0F0dHJpYnV0ZShuYW1lKSl7IHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUobmFtZSkgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBtZXJnZUZvY3VzZWRJbnB1dCh0YXJnZXQsIHNvdXJjZSl7XG4gICAgLy8gc2tpcCBzZWxlY3RzIGJlY2F1c2UgRkYgd2lsbCByZXNldCBoaWdobGlnaHRlZCBpbmRleCBmb3IgYW55IHNldEF0dHJpYnV0ZVxuICAgIGlmKCEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpKXsgRE9NLm1lcmdlQXR0cnModGFyZ2V0LCBzb3VyY2UsIHtleGNsdWRlOiBbXCJ2YWx1ZVwiXX0pIH1cblxuICAgIGlmKHNvdXJjZS5yZWFkT25seSl7XG4gICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwicmVhZG9ubHlcIiwgdHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInJlYWRvbmx5XCIpXG4gICAgfVxuICB9LFxuXG4gIGhhc1NlbGVjdGlvblJhbmdlKGVsKXtcbiAgICByZXR1cm4gZWwuc2V0U2VsZWN0aW9uUmFuZ2UgJiYgKGVsLnR5cGUgPT09IFwidGV4dFwiIHx8IGVsLnR5cGUgPT09IFwidGV4dGFyZWFcIilcbiAgfSxcblxuICByZXN0b3JlRm9jdXMoZm9jdXNlZCwgc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCl7XG4gICAgaWYoZm9jdXNlZCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50KXsgZm9jdXNlZC5mb2N1cygpIH1cbiAgICBpZighRE9NLmlzVGV4dHVhbElucHV0KGZvY3VzZWQpKXsgcmV0dXJuIH1cblxuICAgIGxldCB3YXNGb2N1c2VkID0gZm9jdXNlZC5tYXRjaGVzKFwiOmZvY3VzXCIpXG4gICAgaWYoIXdhc0ZvY3VzZWQpeyBmb2N1c2VkLmZvY3VzKCkgfVxuICAgIGlmKHRoaXMuaGFzU2VsZWN0aW9uUmFuZ2UoZm9jdXNlZCkpe1xuICAgICAgZm9jdXNlZC5zZXRTZWxlY3Rpb25SYW5nZShzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKVxuICAgIH1cbiAgfSxcblxuICBpc0Zvcm1JbnB1dChlbCl7IHJldHVybiAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYSkkL2kudGVzdChlbC50YWdOYW1lKSAmJiBlbC50eXBlICE9PSBcImJ1dHRvblwiIH0sXG5cbiAgc3luY0F0dHJzVG9Qcm9wcyhlbCl7XG4gICAgaWYoZWwgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50ICYmIENIRUNLQUJMRV9JTlBVVFMuaW5kZXhPZihlbC50eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkpID49IDApe1xuICAgICAgZWwuY2hlY2tlZCA9IGVsLmdldEF0dHJpYnV0ZShcImNoZWNrZWRcIikgIT09IG51bGxcbiAgICB9XG4gIH0sXG5cbiAgaXNUZXh0dWFsSW5wdXQoZWwpeyByZXR1cm4gRk9DVVNBQkxFX0lOUFVUUy5pbmRleE9mKGVsLnR5cGUpID49IDAgfSxcblxuICBpc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWwoZWwsIHBoeFRyaWdnZXJFeHRlcm5hbCl7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUocGh4VHJpZ2dlckV4dGVybmFsKSAhPT0gbnVsbCAmJiBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsKVxuICB9LFxuXG4gIGNsZWFuQ2hpbGROb2Rlcyhjb250YWluZXIsIHBoeFVwZGF0ZSl7XG4gICAgaWYoRE9NLmlzUGh4VXBkYXRlKGNvbnRhaW5lciwgcGh4VXBkYXRlLCBbXCJhcHBlbmRcIiwgXCJwcmVwZW5kXCJdKSl7XG4gICAgICBsZXQgdG9SZW1vdmUgPSBbXVxuICAgICAgY29udGFpbmVyLmNoaWxkTm9kZXMuZm9yRWFjaChjaGlsZE5vZGUgPT4ge1xuICAgICAgICBpZighY2hpbGROb2RlLmlkKXtcbiAgICAgICAgICAvLyBTa2lwIHdhcm5pbmcgaWYgaXQncyBhbiBlbXB0eSB0ZXh0IG5vZGUgKGUuZy4gYSBuZXctbGluZSlcbiAgICAgICAgICBsZXQgaXNFbXB0eVRleHROb2RlID0gY2hpbGROb2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiBjaGlsZE5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gXCJcIlxuICAgICAgICAgIGlmKCFpc0VtcHR5VGV4dE5vZGUgJiYgY2hpbGROb2RlLm5vZGVUeXBlICE9PSBOb2RlLkNPTU1FTlRfTk9ERSl7XG4gICAgICAgICAgICBsb2dFcnJvcihcIm9ubHkgSFRNTCBlbGVtZW50IHRhZ3Mgd2l0aCBhbiBpZCBhcmUgYWxsb3dlZCBpbnNpZGUgY29udGFpbmVycyB3aXRoIHBoeC11cGRhdGUuXFxuXFxuXCIgK1xuICAgICAgICAgICAgICBgcmVtb3ZpbmcgaWxsZWdhbCBub2RlOiBcIiR7KGNoaWxkTm9kZS5vdXRlckhUTUwgfHwgY2hpbGROb2RlLm5vZGVWYWx1ZSkudHJpbSgpfVwiXFxuXFxuYClcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9SZW1vdmUucHVzaChjaGlsZE5vZGUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICB0b1JlbW92ZS5mb3JFYWNoKGNoaWxkTm9kZSA9PiBjaGlsZE5vZGUucmVtb3ZlKCkpXG4gICAgfVxuICB9LFxuXG4gIHJlcGxhY2VSb290Q29udGFpbmVyKGNvbnRhaW5lciwgdGFnTmFtZSwgYXR0cnMpe1xuICAgIGxldCByZXRhaW5lZEF0dHJzID0gbmV3IFNldChbXCJpZFwiLCBQSFhfU0VTU0lPTiwgUEhYX1NUQVRJQywgUEhYX01BSU4sIFBIWF9ST09UX0lEXSlcbiAgICBpZihjb250YWluZXIudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0YWdOYW1lLnRvTG93ZXJDYXNlKCkpe1xuICAgICAgQXJyYXkuZnJvbShjb250YWluZXIuYXR0cmlidXRlcylcbiAgICAgICAgLmZpbHRlcihhdHRyID0+ICFyZXRhaW5lZEF0dHJzLmhhcyhhdHRyLm5hbWUudG9Mb3dlckNhc2UoKSkpXG4gICAgICAgIC5mb3JFYWNoKGF0dHIgPT4gY29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZShhdHRyLm5hbWUpKVxuXG4gICAgICBPYmplY3Qua2V5cyhhdHRycylcbiAgICAgICAgLmZpbHRlcihuYW1lID0+ICFyZXRhaW5lZEF0dHJzLmhhcyhuYW1lLnRvTG93ZXJDYXNlKCkpKVxuICAgICAgICAuZm9yRWFjaChhdHRyID0+IGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0cnNbYXR0cl0pKVxuXG4gICAgICByZXR1cm4gY29udGFpbmVyXG5cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG5ld0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSlcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGF0dHIgPT4gbmV3Q29udGFpbmVyLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyc1thdHRyXSkpXG4gICAgICByZXRhaW5lZEF0dHJzLmZvckVhY2goYXR0ciA9PiBuZXdDb250YWluZXIuc2V0QXR0cmlidXRlKGF0dHIsIGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoYXR0cikpKVxuICAgICAgbmV3Q29udGFpbmVyLmlubmVySFRNTCA9IGNvbnRhaW5lci5pbm5lckhUTUxcbiAgICAgIGNvbnRhaW5lci5yZXBsYWNlV2l0aChuZXdDb250YWluZXIpXG4gICAgICByZXR1cm4gbmV3Q29udGFpbmVyXG4gICAgfVxuICB9LFxuXG4gIGdldFN0aWNreShlbCwgbmFtZSwgZGVmYXVsdFZhbCl7XG4gICAgbGV0IG9wID0gKERPTS5wcml2YXRlKGVsLCBcInN0aWNreVwiKSB8fCBbXSkuZmluZCgoW2V4aXN0aW5nTmFtZSxdKSA9PiBuYW1lID09PSBleGlzdGluZ05hbWUpXG4gICAgaWYob3Ape1xuICAgICAgbGV0IFtfbmFtZSwgX29wLCBzdGFzaGVkUmVzdWx0XSA9IG9wXG4gICAgICByZXR1cm4gc3Rhc2hlZFJlc3VsdFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHlwZW9mKGRlZmF1bHRWYWwpID09PSBcImZ1bmN0aW9uXCIgPyBkZWZhdWx0VmFsKCkgOiBkZWZhdWx0VmFsXG4gICAgfVxuICB9LFxuXG4gIGRlbGV0ZVN0aWNreShlbCwgbmFtZSl7XG4gICAgdGhpcy51cGRhdGVQcml2YXRlKGVsLCBcInN0aWNreVwiLCBbXSwgb3BzID0+IHtcbiAgICAgIHJldHVybiBvcHMuZmlsdGVyKChbZXhpc3RpbmdOYW1lLCBfXSkgPT4gZXhpc3RpbmdOYW1lICE9PSBuYW1lKVxuICAgIH0pXG4gIH0sXG5cbiAgcHV0U3RpY2t5KGVsLCBuYW1lLCBvcCl7XG4gICAgbGV0IHN0YXNoZWRSZXN1bHQgPSBvcChlbClcbiAgICB0aGlzLnVwZGF0ZVByaXZhdGUoZWwsIFwic3RpY2t5XCIsIFtdLCBvcHMgPT4ge1xuICAgICAgbGV0IGV4aXN0aW5nSW5kZXggPSBvcHMuZmluZEluZGV4KChbZXhpc3RpbmdOYW1lLF0pID0+IG5hbWUgPT09IGV4aXN0aW5nTmFtZSlcbiAgICAgIGlmKGV4aXN0aW5nSW5kZXggPj0gMCl7XG4gICAgICAgIG9wc1tleGlzdGluZ0luZGV4XSA9IFtuYW1lLCBvcCwgc3Rhc2hlZFJlc3VsdF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wcy5wdXNoKFtuYW1lLCBvcCwgc3Rhc2hlZFJlc3VsdF0pXG4gICAgICB9XG4gICAgICByZXR1cm4gb3BzXG4gICAgfSlcbiAgfSxcblxuICBhcHBseVN0aWNreU9wZXJhdGlvbnMoZWwpe1xuICAgIGxldCBvcHMgPSBET00ucHJpdmF0ZShlbCwgXCJzdGlja3lcIilcbiAgICBpZighb3BzKXsgcmV0dXJuIH1cblxuICAgIG9wcy5mb3JFYWNoKChbbmFtZSwgb3AsIF9zdGFzaGVkXSkgPT4gdGhpcy5wdXRTdGlja3koZWwsIG5hbWUsIG9wKSlcbiAgfSxcblxuICBpc0xvY2tlZChlbCl7XG4gICAgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZSAmJiBlbC5oYXNBdHRyaWJ1dGUoUEhYX1JFRl9MT0NLKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERPTVxuIiwgImltcG9ydCB7XG4gIFBIWF9BQ1RJVkVfRU5UUllfUkVGUyxcbiAgUEhYX0xJVkVfRklMRV9VUERBVEVELFxuICBQSFhfUFJFRkxJR0hURURfUkVGU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBjaGFubmVsVXBsb2FkZXIsXG4gIGxvZ0Vycm9yXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXBsb2FkRW50cnkge1xuICBzdGF0aWMgaXNBY3RpdmUoZmlsZUVsLCBmaWxlKXtcbiAgICBsZXQgaXNOZXcgPSBmaWxlLl9waHhSZWYgPT09IHVuZGVmaW5lZFxuICAgIGxldCBhY3RpdmVSZWZzID0gZmlsZUVsLmdldEF0dHJpYnV0ZShQSFhfQUNUSVZFX0VOVFJZX1JFRlMpLnNwbGl0KFwiLFwiKVxuICAgIGxldCBpc0FjdGl2ZSA9IGFjdGl2ZVJlZnMuaW5kZXhPZihMaXZlVXBsb2FkZXIuZ2VuRmlsZVJlZihmaWxlKSkgPj0gMFxuICAgIHJldHVybiBmaWxlLnNpemUgPiAwICYmIChpc05ldyB8fCBpc0FjdGl2ZSlcbiAgfVxuXG4gIHN0YXRpYyBpc1ByZWZsaWdodGVkKGZpbGVFbCwgZmlsZSl7XG4gICAgbGV0IHByZWZsaWdodGVkUmVmcyA9IGZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX1BSRUZMSUdIVEVEX1JFRlMpLnNwbGl0KFwiLFwiKVxuICAgIGxldCBpc1ByZWZsaWdodGVkID0gcHJlZmxpZ2h0ZWRSZWZzLmluZGV4T2YoTGl2ZVVwbG9hZGVyLmdlbkZpbGVSZWYoZmlsZSkpID49IDBcbiAgICByZXR1cm4gaXNQcmVmbGlnaHRlZCAmJiB0aGlzLmlzQWN0aXZlKGZpbGVFbCwgZmlsZSlcbiAgfVxuXG4gIHN0YXRpYyBpc1ByZWZsaWdodEluUHJvZ3Jlc3MoZmlsZSl7XG4gICAgcmV0dXJuIGZpbGUuX3ByZWZsaWdodEluUHJvZ3Jlc3MgPT09IHRydWVcbiAgfVxuXG4gIHN0YXRpYyBtYXJrUHJlZmxpZ2h0SW5Qcm9ncmVzcyhmaWxlKXtcbiAgICBmaWxlLl9wcmVmbGlnaHRJblByb2dyZXNzID0gdHJ1ZVxuICB9XG5cbiAgY29uc3RydWN0b3IoZmlsZUVsLCBmaWxlLCB2aWV3LCBhdXRvVXBsb2FkKXtcbiAgICB0aGlzLnJlZiA9IExpdmVVcGxvYWRlci5nZW5GaWxlUmVmKGZpbGUpXG4gICAgdGhpcy5maWxlRWwgPSBmaWxlRWxcbiAgICB0aGlzLmZpbGUgPSBmaWxlXG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMubWV0YSA9IG51bGxcbiAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IGZhbHNlXG4gICAgdGhpcy5faXNEb25lID0gZmFsc2VcbiAgICB0aGlzLl9wcm9ncmVzcyA9IDBcbiAgICB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50ID0gLTFcbiAgICB0aGlzLl9vbkRvbmUgPSBmdW5jdGlvbigpeyB9XG4gICAgdGhpcy5fb25FbFVwZGF0ZWQgPSB0aGlzLm9uRWxVcGRhdGVkLmJpbmQodGhpcylcbiAgICB0aGlzLmZpbGVFbC5hZGRFdmVudExpc3RlbmVyKFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCwgdGhpcy5fb25FbFVwZGF0ZWQpXG4gICAgdGhpcy5hdXRvVXBsb2FkID0gYXV0b1VwbG9hZFxuICB9XG5cbiAgbWV0YWRhdGEoKXsgcmV0dXJuIHRoaXMubWV0YSB9XG5cbiAgcHJvZ3Jlc3MocHJvZ3Jlc3Mpe1xuICAgIHRoaXMuX3Byb2dyZXNzID0gTWF0aC5mbG9vcihwcm9ncmVzcylcbiAgICBpZih0aGlzLl9wcm9ncmVzcyA+IHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQpe1xuICAgICAgaWYodGhpcy5fcHJvZ3Jlc3MgPj0gMTAwKXtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3MgPSAxMDBcbiAgICAgICAgdGhpcy5fbGFzdFByb2dyZXNzU2VudCA9IDEwMFxuICAgICAgICB0aGlzLl9pc0RvbmUgPSB0cnVlXG4gICAgICAgIHRoaXMudmlldy5wdXNoRmlsZVByb2dyZXNzKHRoaXMuZmlsZUVsLCB0aGlzLnJlZiwgMTAwLCAoKSA9PiB7XG4gICAgICAgICAgTGl2ZVVwbG9hZGVyLnVudHJhY2tGaWxlKHRoaXMuZmlsZUVsLCB0aGlzLmZpbGUpXG4gICAgICAgICAgdGhpcy5fb25Eb25lKClcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQgPSB0aGlzLl9wcm9ncmVzc1xuICAgICAgICB0aGlzLnZpZXcucHVzaEZpbGVQcm9ncmVzcyh0aGlzLmZpbGVFbCwgdGhpcy5yZWYsIHRoaXMuX3Byb2dyZXNzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlzQ2FuY2VsbGVkKCl7IHJldHVybiB0aGlzLl9pc0NhbmNlbGxlZCB9XG5cbiAgY2FuY2VsKCl7XG4gICAgdGhpcy5maWxlLl9wcmVmbGlnaHRJblByb2dyZXNzID0gZmFsc2VcbiAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IHRydWVcbiAgICB0aGlzLl9pc0RvbmUgPSB0cnVlXG4gICAgdGhpcy5fb25Eb25lKClcbiAgfVxuXG4gIGlzRG9uZSgpeyByZXR1cm4gdGhpcy5faXNEb25lIH1cblxuICBlcnJvcihyZWFzb24gPSBcImZhaWxlZFwiKXtcbiAgICB0aGlzLmZpbGVFbC5yZW1vdmVFdmVudExpc3RlbmVyKFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCwgdGhpcy5fb25FbFVwZGF0ZWQpXG4gICAgdGhpcy52aWV3LnB1c2hGaWxlUHJvZ3Jlc3ModGhpcy5maWxlRWwsIHRoaXMucmVmLCB7ZXJyb3I6IHJlYXNvbn0pXG4gICAgaWYoIXRoaXMuaXNBdXRvVXBsb2FkKCkpeyBMaXZlVXBsb2FkZXIuY2xlYXJGaWxlcyh0aGlzLmZpbGVFbCkgfVxuICB9XG5cbiAgaXNBdXRvVXBsb2FkKCl7IHJldHVybiB0aGlzLmF1dG9VcGxvYWQgfVxuXG4gIC8vcHJpdmF0ZVxuXG4gIG9uRG9uZShjYWxsYmFjayl7XG4gICAgdGhpcy5fb25Eb25lID0gKCkgPT4ge1xuICAgICAgdGhpcy5maWxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihQSFhfTElWRV9GSUxFX1VQREFURUQsIHRoaXMuX29uRWxVcGRhdGVkKVxuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIG9uRWxVcGRhdGVkKCl7XG4gICAgbGV0IGFjdGl2ZVJlZnMgPSB0aGlzLmZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX0FDVElWRV9FTlRSWV9SRUZTKS5zcGxpdChcIixcIilcbiAgICBpZihhY3RpdmVSZWZzLmluZGV4T2YodGhpcy5yZWYpID09PSAtMSl7XG4gICAgICBMaXZlVXBsb2FkZXIudW50cmFja0ZpbGUodGhpcy5maWxlRWwsIHRoaXMuZmlsZSlcbiAgICAgIHRoaXMuY2FuY2VsKClcbiAgICB9XG4gIH1cblxuICB0b1ByZWZsaWdodFBheWxvYWQoKXtcbiAgICByZXR1cm4ge1xuICAgICAgbGFzdF9tb2RpZmllZDogdGhpcy5maWxlLmxhc3RNb2RpZmllZCxcbiAgICAgIG5hbWU6IHRoaXMuZmlsZS5uYW1lLFxuICAgICAgcmVsYXRpdmVfcGF0aDogdGhpcy5maWxlLndlYmtpdFJlbGF0aXZlUGF0aCxcbiAgICAgIHNpemU6IHRoaXMuZmlsZS5zaXplLFxuICAgICAgdHlwZTogdGhpcy5maWxlLnR5cGUsXG4gICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgbWV0YTogdHlwZW9mKHRoaXMuZmlsZS5tZXRhKSA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy5maWxlLm1ldGEoKSA6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxuXG4gIHVwbG9hZGVyKHVwbG9hZGVycyl7XG4gICAgaWYodGhpcy5tZXRhLnVwbG9hZGVyKXtcbiAgICAgIGxldCBjYWxsYmFjayA9IHVwbG9hZGVyc1t0aGlzLm1ldGEudXBsb2FkZXJdIHx8IGxvZ0Vycm9yKGBubyB1cGxvYWRlciBjb25maWd1cmVkIGZvciAke3RoaXMubWV0YS51cGxvYWRlcn1gKVxuICAgICAgcmV0dXJuIHtuYW1lOiB0aGlzLm1ldGEudXBsb2FkZXIsIGNhbGxiYWNrOiBjYWxsYmFja31cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtuYW1lOiBcImNoYW5uZWxcIiwgY2FsbGJhY2s6IGNoYW5uZWxVcGxvYWRlcn1cbiAgICB9XG4gIH1cblxuICB6aXBQb3N0RmxpZ2h0KHJlc3Ape1xuICAgIHRoaXMubWV0YSA9IHJlc3AuZW50cmllc1t0aGlzLnJlZl1cbiAgICBpZighdGhpcy5tZXRhKXsgbG9nRXJyb3IoYG5vIHByZWZsaWdodCB1cGxvYWQgcmVzcG9uc2UgcmV0dXJuZWQgd2l0aCByZWYgJHt0aGlzLnJlZn1gLCB7aW5wdXQ6IHRoaXMuZmlsZUVsLCByZXNwb25zZTogcmVzcH0pIH1cbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFBIWF9ET05FX1JFRlMsXG4gIFBIWF9QUkVGTElHSFRFRF9SRUZTLFxuICBQSFhfVVBMT0FEX1JFRlxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBVcGxvYWRFbnRyeSBmcm9tIFwiLi91cGxvYWRfZW50cnlcIlxuXG5sZXQgbGl2ZVVwbG9hZGVyRmlsZVJlZiA9IDBcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGl2ZVVwbG9hZGVyIHtcbiAgc3RhdGljIGdlbkZpbGVSZWYoZmlsZSl7XG4gICAgbGV0IHJlZiA9IGZpbGUuX3BoeFJlZlxuICAgIGlmKHJlZiAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIHJldHVybiByZWZcbiAgICB9IGVsc2Uge1xuICAgICAgZmlsZS5fcGh4UmVmID0gKGxpdmVVcGxvYWRlckZpbGVSZWYrKykudG9TdHJpbmcoKVxuICAgICAgcmV0dXJuIGZpbGUuX3BoeFJlZlxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRFbnRyeURhdGFVUkwoaW5wdXRFbCwgcmVmLCBjYWxsYmFjayl7XG4gICAgbGV0IGZpbGUgPSB0aGlzLmFjdGl2ZUZpbGVzKGlucHV0RWwpLmZpbmQoZmlsZSA9PiB0aGlzLmdlbkZpbGVSZWYoZmlsZSkgPT09IHJlZilcbiAgICBjYWxsYmFjayhVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpKVxuICB9XG5cbiAgc3RhdGljIGhhc1VwbG9hZHNJblByb2dyZXNzKGZvcm1FbCl7XG4gICAgbGV0IGFjdGl2ZSA9IDBcbiAgICBET00uZmluZFVwbG9hZElucHV0cyhmb3JtRWwpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgaWYoaW5wdXQuZ2V0QXR0cmlidXRlKFBIWF9QUkVGTElHSFRFRF9SRUZTKSAhPT0gaW5wdXQuZ2V0QXR0cmlidXRlKFBIWF9ET05FX1JFRlMpKXtcbiAgICAgICAgYWN0aXZlKytcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBhY3RpdmUgPiAwXG4gIH1cblxuICBzdGF0aWMgc2VyaWFsaXplVXBsb2FkcyhpbnB1dEVsKXtcbiAgICBsZXQgZmlsZXMgPSB0aGlzLmFjdGl2ZUZpbGVzKGlucHV0RWwpXG4gICAgbGV0IGZpbGVEYXRhID0ge31cbiAgICBmaWxlcy5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgbGV0IGVudHJ5ID0ge3BhdGg6IGlucHV0RWwubmFtZX1cbiAgICAgIGxldCB1cGxvYWRSZWYgPSBpbnB1dEVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRilcbiAgICAgIGZpbGVEYXRhW3VwbG9hZFJlZl0gPSBmaWxlRGF0YVt1cGxvYWRSZWZdIHx8IFtdXG4gICAgICBlbnRyeS5yZWYgPSB0aGlzLmdlbkZpbGVSZWYoZmlsZSlcbiAgICAgIGVudHJ5Lmxhc3RfbW9kaWZpZWQgPSBmaWxlLmxhc3RNb2RpZmllZFxuICAgICAgZW50cnkubmFtZSA9IGZpbGUubmFtZSB8fCBlbnRyeS5yZWZcbiAgICAgIGVudHJ5LnJlbGF0aXZlX3BhdGggPSBmaWxlLndlYmtpdFJlbGF0aXZlUGF0aFxuICAgICAgZW50cnkudHlwZSA9IGZpbGUudHlwZVxuICAgICAgZW50cnkuc2l6ZSA9IGZpbGUuc2l6ZVxuICAgICAgaWYodHlwZW9mKGZpbGUubWV0YSkgPT09IFwiZnVuY3Rpb25cIil7IGVudHJ5Lm1ldGEgPSBmaWxlLm1ldGEoKSB9XG4gICAgICBmaWxlRGF0YVt1cGxvYWRSZWZdLnB1c2goZW50cnkpXG4gICAgfSlcbiAgICByZXR1cm4gZmlsZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBjbGVhckZpbGVzKGlucHV0RWwpe1xuICAgIGlucHV0RWwudmFsdWUgPSBudWxsXG4gICAgaW5wdXRFbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpXG4gICAgRE9NLnB1dFByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBbXSlcbiAgfVxuXG4gIHN0YXRpYyB1bnRyYWNrRmlsZShpbnB1dEVsLCBmaWxlKXtcbiAgICBET00ucHV0UHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIsIERPTS5wcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIikuZmlsdGVyKGYgPT4gIU9iamVjdC5pcyhmLCBmaWxlKSkpXG4gIH1cblxuICBzdGF0aWMgdHJhY2tGaWxlcyhpbnB1dEVsLCBmaWxlcywgZGF0YVRyYW5zZmVyKXtcbiAgICBpZihpbnB1dEVsLmdldEF0dHJpYnV0ZShcIm11bHRpcGxlXCIpICE9PSBudWxsKXtcbiAgICAgIGxldCBuZXdGaWxlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+ICF0aGlzLmFjdGl2ZUZpbGVzKGlucHV0RWwpLmZpbmQoZiA9PiBPYmplY3QuaXMoZiwgZmlsZSkpKVxuICAgICAgRE9NLnVwZGF0ZVByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBbXSwgKGV4aXN0aW5nKSA9PiBleGlzdGluZy5jb25jYXQobmV3RmlsZXMpKVxuICAgICAgaW5wdXRFbC52YWx1ZSA9IG51bGxcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVzZXQgaW5wdXRFbCBmaWxlcyB0byBhbGlnbiBvdXRwdXQgd2l0aCBwcm9ncmFtbWF0aWMgY2hhbmdlcyAoaS5lLiBkcmFnIGFuZCBkcm9wKVxuICAgICAgaWYoZGF0YVRyYW5zZmVyICYmIGRhdGFUcmFuc2Zlci5maWxlcy5sZW5ndGggPiAwKXsgaW5wdXRFbC5maWxlcyA9IGRhdGFUcmFuc2Zlci5maWxlcyB9XG4gICAgICBET00ucHV0UHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIsIGZpbGVzKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhY3RpdmVGaWxlSW5wdXRzKGZvcm1FbCl7XG4gICAgbGV0IGZpbGVJbnB1dHMgPSBET00uZmluZFVwbG9hZElucHV0cyhmb3JtRWwpXG4gICAgcmV0dXJuIEFycmF5LmZyb20oZmlsZUlucHV0cykuZmlsdGVyKGVsID0+IGVsLmZpbGVzICYmIHRoaXMuYWN0aXZlRmlsZXMoZWwpLmxlbmd0aCA+IDApXG4gIH1cblxuICBzdGF0aWMgYWN0aXZlRmlsZXMoaW5wdXQpe1xuICAgIHJldHVybiAoRE9NLnByaXZhdGUoaW5wdXQsIFwiZmlsZXNcIikgfHwgW10pLmZpbHRlcihmID0+IFVwbG9hZEVudHJ5LmlzQWN0aXZlKGlucHV0LCBmKSlcbiAgfVxuXG4gIHN0YXRpYyBpbnB1dHNBd2FpdGluZ1ByZWZsaWdodChmb3JtRWwpe1xuICAgIGxldCBmaWxlSW5wdXRzID0gRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKVxuICAgIHJldHVybiBBcnJheS5mcm9tKGZpbGVJbnB1dHMpLmZpbHRlcihpbnB1dCA9PiB0aGlzLmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXQpLmxlbmd0aCA+IDApXG4gIH1cblxuICBzdGF0aWMgZmlsZXNBd2FpdGluZ1ByZWZsaWdodChpbnB1dCl7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlRmlsZXMoaW5wdXQpLmZpbHRlcihmID0+ICFVcGxvYWRFbnRyeS5pc1ByZWZsaWdodGVkKGlucHV0LCBmKSAmJiAhVXBsb2FkRW50cnkuaXNQcmVmbGlnaHRJblByb2dyZXNzKGYpKVxuICB9XG5cbiAgc3RhdGljIG1hcmtQcmVmbGlnaHRJblByb2dyZXNzKGVudHJpZXMpe1xuICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiBVcGxvYWRFbnRyeS5tYXJrUHJlZmxpZ2h0SW5Qcm9ncmVzcyhlbnRyeS5maWxlKSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGlucHV0RWwsIHZpZXcsIG9uQ29tcGxldGUpe1xuICAgIHRoaXMuYXV0b1VwbG9hZCA9IERPTS5pc0F1dG9VcGxvYWQoaW5wdXRFbClcbiAgICB0aGlzLnZpZXcgPSB2aWV3XG4gICAgdGhpcy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgIHRoaXMuX2VudHJpZXMgPVxuICAgICAgQXJyYXkuZnJvbShMaXZlVXBsb2FkZXIuZmlsZXNBd2FpdGluZ1ByZWZsaWdodChpbnB1dEVsKSB8fCBbXSlcbiAgICAgICAgLm1hcChmaWxlID0+IG5ldyBVcGxvYWRFbnRyeShpbnB1dEVsLCBmaWxlLCB2aWV3LCB0aGlzLmF1dG9VcGxvYWQpKVxuXG4gICAgLy8gcHJldmVudCBzZW5kaW5nIGR1cGxpY2F0ZSBwcmVmbGlnaHQgcmVxdWVzdHNcbiAgICBMaXZlVXBsb2FkZXIubWFya1ByZWZsaWdodEluUHJvZ3Jlc3ModGhpcy5fZW50cmllcylcblxuICAgIHRoaXMubnVtRW50cmllc0luUHJvZ3Jlc3MgPSB0aGlzLl9lbnRyaWVzLmxlbmd0aFxuICB9XG5cbiAgaXNBdXRvVXBsb2FkKCl7IHJldHVybiB0aGlzLmF1dG9VcGxvYWQgfVxuXG4gIGVudHJpZXMoKXsgcmV0dXJuIHRoaXMuX2VudHJpZXMgfVxuXG4gIGluaXRBZGFwdGVyVXBsb2FkKHJlc3AsIG9uRXJyb3IsIGxpdmVTb2NrZXQpe1xuICAgIHRoaXMuX2VudHJpZXMgPVxuICAgICAgdGhpcy5fZW50cmllcy5tYXAoZW50cnkgPT4ge1xuICAgICAgICBpZihlbnRyeS5pc0NhbmNlbGxlZCgpKXtcbiAgICAgICAgICB0aGlzLm51bUVudHJpZXNJblByb2dyZXNzLS1cbiAgICAgICAgICBpZih0aGlzLm51bUVudHJpZXNJblByb2dyZXNzID09PSAwKXsgdGhpcy5vbkNvbXBsZXRlKCkgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVudHJ5LnppcFBvc3RGbGlnaHQocmVzcClcbiAgICAgICAgICBlbnRyeS5vbkRvbmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcy0tXG4gICAgICAgICAgICBpZih0aGlzLm51bUVudHJpZXNJblByb2dyZXNzID09PSAwKXsgdGhpcy5vbkNvbXBsZXRlKCkgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudHJ5XG4gICAgICB9KVxuXG4gICAgbGV0IGdyb3VwZWRFbnRyaWVzID0gdGhpcy5fZW50cmllcy5yZWR1Y2UoKGFjYywgZW50cnkpID0+IHtcbiAgICAgIGlmKCFlbnRyeS5tZXRhKXsgcmV0dXJuIGFjYyB9XG4gICAgICBsZXQge25hbWUsIGNhbGxiYWNrfSA9IGVudHJ5LnVwbG9hZGVyKGxpdmVTb2NrZXQudXBsb2FkZXJzKVxuICAgICAgYWNjW25hbWVdID0gYWNjW25hbWVdIHx8IHtjYWxsYmFjazogY2FsbGJhY2ssIGVudHJpZXM6IFtdfVxuICAgICAgYWNjW25hbWVdLmVudHJpZXMucHVzaChlbnRyeSlcbiAgICAgIHJldHVybiBhY2NcbiAgICB9LCB7fSlcblxuICAgIGZvcihsZXQgbmFtZSBpbiBncm91cGVkRW50cmllcyl7XG4gICAgICBsZXQge2NhbGxiYWNrLCBlbnRyaWVzfSA9IGdyb3VwZWRFbnRyaWVzW25hbWVdXG4gICAgICBjYWxsYmFjayhlbnRyaWVzLCBvbkVycm9yLCByZXNwLCBsaXZlU29ja2V0KVxuICAgIH1cbiAgfVxufVxuIiwgImxldCBBUklBID0ge1xuICBhbnlPZihpbnN0YW5jZSwgY2xhc3Nlcyl7IHJldHVybiBjbGFzc2VzLmZpbmQobmFtZSA9PiBpbnN0YW5jZSBpbnN0YW5jZW9mIG5hbWUpIH0sXG5cbiAgaXNGb2N1c2FibGUoZWwsIGludGVyYWN0aXZlT25seSl7XG4gICAgcmV0dXJuIChcbiAgICAgIChlbCBpbnN0YW5jZW9mIEhUTUxBbmNob3JFbGVtZW50ICYmIGVsLnJlbCAhPT0gXCJpZ25vcmVcIikgfHxcbiAgICAgIChlbCBpbnN0YW5jZW9mIEhUTUxBcmVhRWxlbWVudCAmJiBlbC5ocmVmICE9PSB1bmRlZmluZWQpIHx8XG4gICAgICAoIWVsLmRpc2FibGVkICYmICh0aGlzLmFueU9mKGVsLCBbSFRNTElucHV0RWxlbWVudCwgSFRNTFNlbGVjdEVsZW1lbnQsIEhUTUxUZXh0QXJlYUVsZW1lbnQsIEhUTUxCdXR0b25FbGVtZW50XSkpKSB8fFxuICAgICAgKGVsIGluc3RhbmNlb2YgSFRNTElGcmFtZUVsZW1lbnQpIHx8XG4gICAgICAoZWwudGFiSW5kZXggPiAwIHx8ICghaW50ZXJhY3RpdmVPbmx5ICYmIGVsLmdldEF0dHJpYnV0ZShcInRhYmluZGV4XCIpICE9PSBudWxsICYmIGVsLmdldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpICE9PSBcInRydWVcIikpXG4gICAgKVxuICB9LFxuXG4gIGF0dGVtcHRGb2N1cyhlbCwgaW50ZXJhY3RpdmVPbmx5KXtcbiAgICBpZih0aGlzLmlzRm9jdXNhYmxlKGVsLCBpbnRlcmFjdGl2ZU9ubHkpKXsgdHJ5IHsgZWwuZm9jdXMoKSB9IGNhdGNoIHt9IH1cbiAgICByZXR1cm4gISFkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuaXNTYW1lTm9kZShlbClcbiAgfSxcblxuICBmb2N1c0ZpcnN0SW50ZXJhY3RpdmUoZWwpe1xuICAgIGxldCBjaGlsZCA9IGVsLmZpcnN0RWxlbWVudENoaWxkXG4gICAgd2hpbGUoY2hpbGQpe1xuICAgICAgaWYodGhpcy5hdHRlbXB0Rm9jdXMoY2hpbGQsIHRydWUpIHx8IHRoaXMuZm9jdXNGaXJzdEludGVyYWN0aXZlKGNoaWxkLCB0cnVlKSl7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLm5leHRFbGVtZW50U2libGluZ1xuICAgIH1cbiAgfSxcblxuICBmb2N1c0ZpcnN0KGVsKXtcbiAgICBsZXQgY2hpbGQgPSBlbC5maXJzdEVsZW1lbnRDaGlsZFxuICAgIHdoaWxlKGNoaWxkKXtcbiAgICAgIGlmKHRoaXMuYXR0ZW1wdEZvY3VzKGNoaWxkKSB8fCB0aGlzLmZvY3VzRmlyc3QoY2hpbGQpKXtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gY2hpbGQubmV4dEVsZW1lbnRTaWJsaW5nXG4gICAgfVxuICB9LFxuXG4gIGZvY3VzTGFzdChlbCl7XG4gICAgbGV0IGNoaWxkID0gZWwubGFzdEVsZW1lbnRDaGlsZFxuICAgIHdoaWxlKGNoaWxkKXtcbiAgICAgIGlmKHRoaXMuYXR0ZW1wdEZvY3VzKGNoaWxkKSB8fCB0aGlzLmZvY3VzTGFzdChjaGlsZCkpe1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgY2hpbGQgPSBjaGlsZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBBUklBXG4iLCAiaW1wb3J0IHtcbiAgUEhYX0FDVElWRV9FTlRSWV9SRUZTLFxuICBQSFhfTElWRV9GSUxFX1VQREFURUQsXG4gIFBIWF9QUkVGTElHSFRFRF9SRUZTLFxuICBQSFhfVVBMT0FEX1JFRlxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgTGl2ZVVwbG9hZGVyIGZyb20gXCIuL2xpdmVfdXBsb2FkZXJcIlxuaW1wb3J0IEFSSUEgZnJvbSBcIi4vYXJpYVwiXG5cbmxldCBIb29rcyA9IHtcbiAgTGl2ZUZpbGVVcGxvYWQ6IHtcbiAgICBhY3RpdmVSZWZzKCl7IHJldHVybiB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfQUNUSVZFX0VOVFJZX1JFRlMpIH0sXG5cbiAgICBwcmVmbGlnaHRlZFJlZnMoKXsgcmV0dXJuIHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9QUkVGTElHSFRFRF9SRUZTKSB9LFxuXG4gICAgbW91bnRlZCgpeyB0aGlzLnByZWZsaWdodGVkV2FzID0gdGhpcy5wcmVmbGlnaHRlZFJlZnMoKSB9LFxuXG4gICAgdXBkYXRlZCgpe1xuICAgICAgbGV0IG5ld1ByZWZsaWdodHMgPSB0aGlzLnByZWZsaWdodGVkUmVmcygpXG4gICAgICBpZih0aGlzLnByZWZsaWdodGVkV2FzICE9PSBuZXdQcmVmbGlnaHRzKXtcbiAgICAgICAgdGhpcy5wcmVmbGlnaHRlZFdhcyA9IG5ld1ByZWZsaWdodHNcbiAgICAgICAgaWYobmV3UHJlZmxpZ2h0cyA9PT0gXCJcIil7XG4gICAgICAgICAgdGhpcy5fX3ZpZXcoKS5jYW5jZWxTdWJtaXQodGhpcy5lbC5mb3JtKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmKHRoaXMuYWN0aXZlUmVmcygpID09PSBcIlwiKXsgdGhpcy5lbC52YWx1ZSA9IG51bGwgfVxuICAgICAgdGhpcy5lbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChQSFhfTElWRV9GSUxFX1VQREFURUQpKVxuICAgIH1cbiAgfSxcblxuICBMaXZlSW1nUHJldmlldzoge1xuICAgIG1vdW50ZWQoKXtcbiAgICAgIHRoaXMucmVmID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1lbnRyeS1yZWZcIilcbiAgICAgIHRoaXMuaW5wdXRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9VUExPQURfUkVGKSlcbiAgICAgIExpdmVVcGxvYWRlci5nZXRFbnRyeURhdGFVUkwodGhpcy5pbnB1dEVsLCB0aGlzLnJlZiwgdXJsID0+IHtcbiAgICAgICAgdGhpcy51cmwgPSB1cmxcbiAgICAgICAgdGhpcy5lbC5zcmMgPSB1cmxcbiAgICAgIH0pXG4gICAgfSxcbiAgICBkZXN0cm95ZWQoKXtcbiAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwodGhpcy51cmwpXG4gICAgfVxuICB9LFxuICBGb2N1c1dyYXA6IHtcbiAgICBtb3VudGVkKCl7XG4gICAgICB0aGlzLmZvY3VzU3RhcnQgPSB0aGlzLmVsLmZpcnN0RWxlbWVudENoaWxkXG4gICAgICB0aGlzLmZvY3VzRW5kID0gdGhpcy5lbC5sYXN0RWxlbWVudENoaWxkXG4gICAgICB0aGlzLmZvY3VzU3RhcnQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIChlKSA9PiB7XG4gICAgICAgIGlmKCFlLnJlbGF0ZWRUYXJnZXQgfHwgIXRoaXMuZWwuY29udGFpbnMoZS5yZWxhdGVkVGFyZ2V0KSl7IFxuICAgICAgICAgIC8vIEhhbmRsZSBmb2N1cyBlbnRlcmluZyBmcm9tIG91dHNpZGUgKGUuZy4gVGFiIHdoZW4gYm9keSBpcyBmb2N1c2VkKVxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9waG9lbml4ZnJhbWV3b3JrL3Bob2VuaXhfbGl2ZV92aWV3L2lzc3Vlcy8zNjM2XG4gICAgICAgICAgY29uc3QgbmV4dEZvY3VzID0gZS50YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nXG4gICAgICAgICAgQVJJQS5hdHRlbXB0Rm9jdXMobmV4dEZvY3VzKSB8fCBBUklBLmZvY3VzRmlyc3QobmV4dEZvY3VzKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEFSSUEuZm9jdXNMYXN0KHRoaXMuZWwpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICB0aGlzLmZvY3VzRW5kLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoZSkgPT4ge1xuICAgICAgICBpZighZS5yZWxhdGVkVGFyZ2V0IHx8ICF0aGlzLmVsLmNvbnRhaW5zKGUucmVsYXRlZFRhcmdldCkpeyBcbiAgICAgICAgICAvLyBIYW5kbGUgZm9jdXMgZW50ZXJpbmcgZnJvbSBvdXRzaWRlIChlLmcuIFNoaWZ0K1RhYiB3aGVuIGJvZHkgaXMgZm9jdXNlZClcbiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcGhvZW5peGZyYW1ld29yay9waG9lbml4X2xpdmVfdmlldy9pc3N1ZXMvMzYzNlxuICAgICAgICAgIGNvbnN0IG5leHRGb2N1cyA9IGUudGFyZ2V0LnByZXZpb3VzRWxlbWVudFNpYmxpbmdcbiAgICAgICAgICBBUklBLmF0dGVtcHRGb2N1cyhuZXh0Rm9jdXMpIHx8IEFSSUEuZm9jdXNMYXN0KG5leHRGb2N1cylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBUklBLmZvY3VzRmlyc3QodGhpcy5lbClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpzaG93LWVuZFwiLCAoKSA9PiB0aGlzLmVsLmZvY3VzKCkpXG4gICAgICBpZih3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsKS5kaXNwbGF5ICE9PSBcIm5vbmVcIil7XG4gICAgICAgIEFSSUEuZm9jdXNGaXJzdCh0aGlzLmVsKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5sZXQgZmluZFNjcm9sbENvbnRhaW5lciA9IChlbCkgPT4ge1xuICAvLyB0aGUgc2Nyb2xsIGV2ZW50IHdvbid0IGJlIGZpcmVkIG9uIHRoZSBodG1sL2JvZHkgZWxlbWVudCBldmVuIGlmIG92ZXJmbG93IGlzIHNldFxuICAvLyB0aGVyZWZvcmUgd2UgcmV0dXJuIG51bGwgdG8gaW5zdGVhZCBsaXN0ZW4gZm9yIHNjcm9sbCBldmVudHMgb24gZG9jdW1lbnRcbiAgaWYoW1wiSFRNTFwiLCBcIkJPRFlcIl0uaW5kZXhPZihlbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpKSA+PSAwKSByZXR1cm4gbnVsbFxuICBpZihbXCJzY3JvbGxcIiwgXCJhdXRvXCJdLmluZGV4T2YoZ2V0Q29tcHV0ZWRTdHlsZShlbCkub3ZlcmZsb3dZKSA+PSAwKSByZXR1cm4gZWxcbiAgcmV0dXJuIGZpbmRTY3JvbGxDb250YWluZXIoZWwucGFyZW50RWxlbWVudClcbn1cblxubGV0IHNjcm9sbFRvcCA9IChzY3JvbGxDb250YWluZXIpID0+IHtcbiAgaWYoc2Nyb2xsQ29udGFpbmVyKXtcbiAgICByZXR1cm4gc2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvcFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wXG4gIH1cbn1cblxubGV0IGJvdHRvbSA9IChzY3JvbGxDb250YWluZXIpID0+IHtcbiAgaWYoc2Nyb2xsQ29udGFpbmVyKXtcbiAgICByZXR1cm4gc2Nyb2xsQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbVxuICB9IGVsc2Uge1xuICAgIC8vIHdoZW4gd2UgaGF2ZSBubyBjb250YWluZXIsIHRoZSB3aG9sZSBwYWdlIHNjcm9sbHMsXG4gICAgLy8gdGhlcmVmb3JlIHRoZSBib3R0b20gY29vcmRpbmF0ZSBpcyB0aGUgdmlld3BvcnQgaGVpZ2h0XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gIH1cbn1cblxubGV0IHRvcCA9IChzY3JvbGxDb250YWluZXIpID0+IHtcbiAgaWYoc2Nyb2xsQ29udGFpbmVyKXtcbiAgICByZXR1cm4gc2Nyb2xsQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuICB9IGVsc2Uge1xuICAgIC8vIHdoZW4gd2UgaGF2ZSBubyBjb250YWluZXIgdGhlIHdob2xlIHBhZ2Ugc2Nyb2xscyxcbiAgICAvLyB0aGVyZWZvcmUgdGhlIHRvcCBjb29yZGluYXRlIGlzIDBcbiAgICByZXR1cm4gMFxuICB9XG59XG5cbmxldCBpc0F0Vmlld3BvcnRUb3AgPSAoZWwsIHNjcm9sbENvbnRhaW5lcikgPT4ge1xuICBsZXQgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gIHJldHVybiBNYXRoLmNlaWwocmVjdC50b3ApID49IHRvcChzY3JvbGxDb250YWluZXIpICYmIE1hdGguY2VpbChyZWN0LmxlZnQpID49IDAgJiYgTWF0aC5mbG9vcihyZWN0LnRvcCkgPD0gYm90dG9tKHNjcm9sbENvbnRhaW5lcilcbn1cblxubGV0IGlzQXRWaWV3cG9ydEJvdHRvbSA9IChlbCwgc2Nyb2xsQ29udGFpbmVyKSA9PiB7XG4gIGxldCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgcmV0dXJuIE1hdGguY2VpbChyZWN0LmJvdHRvbSkgPj0gdG9wKHNjcm9sbENvbnRhaW5lcikgJiYgTWF0aC5jZWlsKHJlY3QubGVmdCkgPj0gMCAmJiBNYXRoLmZsb29yKHJlY3QuYm90dG9tKSA8PSBib3R0b20oc2Nyb2xsQ29udGFpbmVyKVxufVxuXG5sZXQgaXNXaXRoaW5WaWV3cG9ydCA9IChlbCwgc2Nyb2xsQ29udGFpbmVyKSA9PiB7XG4gIGxldCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgcmV0dXJuIE1hdGguY2VpbChyZWN0LnRvcCkgPj0gdG9wKHNjcm9sbENvbnRhaW5lcikgJiYgTWF0aC5jZWlsKHJlY3QubGVmdCkgPj0gMCAmJiBNYXRoLmZsb29yKHJlY3QudG9wKSA8PSBib3R0b20oc2Nyb2xsQ29udGFpbmVyKVxufVxuXG5Ib29rcy5JbmZpbml0ZVNjcm9sbCA9IHtcbiAgbW91bnRlZCgpe1xuICAgIHRoaXMuc2Nyb2xsQ29udGFpbmVyID0gZmluZFNjcm9sbENvbnRhaW5lcih0aGlzLmVsKVxuICAgIGxldCBzY3JvbGxCZWZvcmUgPSBzY3JvbGxUb3AodGhpcy5zY3JvbGxDb250YWluZXIpXG4gICAgbGV0IHRvcE92ZXJyYW4gPSBmYWxzZVxuICAgIGxldCB0aHJvdHRsZUludGVydmFsID0gNTAwXG4gICAgbGV0IHBlbmRpbmdPcCA9IG51bGxcblxuICAgIGxldCBvblRvcE92ZXJydW4gPSB0aGlzLnRocm90dGxlKHRocm90dGxlSW50ZXJ2YWwsICh0b3BFdmVudCwgZmlyc3RDaGlsZCkgPT4ge1xuICAgICAgcGVuZGluZ09wID0gKCkgPT4gdHJ1ZVxuICAgICAgdGhpcy5saXZlU29ja2V0LmV4ZWNKU0hvb2tQdXNoKHRoaXMuZWwsIHRvcEV2ZW50LCB7aWQ6IGZpcnN0Q2hpbGQuaWQsIF9vdmVycmFuOiB0cnVlfSwgKCkgPT4ge1xuICAgICAgICBwZW5kaW5nT3AgPSBudWxsXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBsZXQgb25GaXJzdENoaWxkQXRUb3AgPSB0aGlzLnRocm90dGxlKHRocm90dGxlSW50ZXJ2YWwsICh0b3BFdmVudCwgZmlyc3RDaGlsZCkgPT4ge1xuICAgICAgcGVuZGluZ09wID0gKCkgPT4gZmlyc3RDaGlsZC5zY3JvbGxJbnRvVmlldyh7YmxvY2s6IFwic3RhcnRcIn0pXG4gICAgICB0aGlzLmxpdmVTb2NrZXQuZXhlY0pTSG9va1B1c2godGhpcy5lbCwgdG9wRXZlbnQsIHtpZDogZmlyc3RDaGlsZC5pZH0sICgpID0+IHtcbiAgICAgICAgcGVuZGluZ09wID0gbnVsbFxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgRE9NIGlzIHBhdGNoZWQgYnkgd2FpdGluZyBmb3IgdGhlIG5leHQgdGlja1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBpZighaXNXaXRoaW5WaWV3cG9ydChmaXJzdENoaWxkLCB0aGlzLnNjcm9sbENvbnRhaW5lcikpe1xuICAgICAgICAgICAgZmlyc3RDaGlsZC5zY3JvbGxJbnRvVmlldyh7YmxvY2s6IFwic3RhcnRcIn0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgbGV0IG9uTGFzdENoaWxkQXRCb3R0b20gPSB0aGlzLnRocm90dGxlKHRocm90dGxlSW50ZXJ2YWwsIChib3R0b21FdmVudCwgbGFzdENoaWxkKSA9PiB7XG4gICAgICBwZW5kaW5nT3AgPSAoKSA9PiBsYXN0Q2hpbGQuc2Nyb2xsSW50b1ZpZXcoe2Jsb2NrOiBcImVuZFwifSlcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5leGVjSlNIb29rUHVzaCh0aGlzLmVsLCBib3R0b21FdmVudCwge2lkOiBsYXN0Q2hpbGQuaWR9LCAoKSA9PiB7XG4gICAgICAgIHBlbmRpbmdPcCA9IG51bGxcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIERPTSBpcyBwYXRjaGVkIGJ5IHdhaXRpbmcgZm9yIHRoZSBuZXh0IHRpY2tcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaWYoIWlzV2l0aGluVmlld3BvcnQobGFzdENoaWxkLCB0aGlzLnNjcm9sbENvbnRhaW5lcikpe1xuICAgICAgICAgICAgbGFzdENoaWxkLnNjcm9sbEludG9WaWV3KHtibG9jazogXCJlbmRcIn0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5vblNjcm9sbCA9IChfZSkgPT4ge1xuICAgICAgbGV0IHNjcm9sbE5vdyA9IHNjcm9sbFRvcCh0aGlzLnNjcm9sbENvbnRhaW5lcilcblxuICAgICAgaWYocGVuZGluZ09wKXtcbiAgICAgICAgc2Nyb2xsQmVmb3JlID0gc2Nyb2xsTm93XG4gICAgICAgIHJldHVybiBwZW5kaW5nT3AoKVxuICAgICAgfVxuICAgICAgbGV0IHJlY3QgPSB0aGlzLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICBsZXQgdG9wRXZlbnQgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZSh0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhcInZpZXdwb3J0LXRvcFwiKSlcbiAgICAgIGxldCBib3R0b21FdmVudCA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFwidmlld3BvcnQtYm90dG9tXCIpKVxuICAgICAgbGV0IGxhc3RDaGlsZCA9IHRoaXMuZWwubGFzdEVsZW1lbnRDaGlsZFxuICAgICAgbGV0IGZpcnN0Q2hpbGQgPSB0aGlzLmVsLmZpcnN0RWxlbWVudENoaWxkXG4gICAgICBsZXQgaXNTY3JvbGxpbmdVcCA9IHNjcm9sbE5vdyA8IHNjcm9sbEJlZm9yZVxuICAgICAgbGV0IGlzU2Nyb2xsaW5nRG93biA9IHNjcm9sbE5vdyA+IHNjcm9sbEJlZm9yZVxuXG4gICAgICAvLyBlbCBvdmVycmFuIHdoaWxlIHNjcm9sbGluZyB1cFxuICAgICAgaWYoaXNTY3JvbGxpbmdVcCAmJiB0b3BFdmVudCAmJiAhdG9wT3ZlcnJhbiAmJiByZWN0LnRvcCA+PSAwKXtcbiAgICAgICAgdG9wT3ZlcnJhbiA9IHRydWVcbiAgICAgICAgb25Ub3BPdmVycnVuKHRvcEV2ZW50LCBmaXJzdENoaWxkKVxuICAgICAgfSBlbHNlIGlmKGlzU2Nyb2xsaW5nRG93biAmJiB0b3BPdmVycmFuICYmIHJlY3QudG9wIDw9IDApe1xuICAgICAgICB0b3BPdmVycmFuID0gZmFsc2VcbiAgICAgIH1cblxuICAgICAgaWYodG9wRXZlbnQgJiYgaXNTY3JvbGxpbmdVcCAmJiBpc0F0Vmlld3BvcnRUb3AoZmlyc3RDaGlsZCwgdGhpcy5zY3JvbGxDb250YWluZXIpKXtcbiAgICAgICAgb25GaXJzdENoaWxkQXRUb3AodG9wRXZlbnQsIGZpcnN0Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYoYm90dG9tRXZlbnQgJiYgaXNTY3JvbGxpbmdEb3duICYmIGlzQXRWaWV3cG9ydEJvdHRvbShsYXN0Q2hpbGQsIHRoaXMuc2Nyb2xsQ29udGFpbmVyKSl7XG4gICAgICAgIG9uTGFzdENoaWxkQXRCb3R0b20oYm90dG9tRXZlbnQsIGxhc3RDaGlsZClcbiAgICAgIH1cbiAgICAgIHNjcm9sbEJlZm9yZSA9IHNjcm9sbE5vd1xuICAgIH1cblxuICAgIGlmKHRoaXMuc2Nyb2xsQ29udGFpbmVyKXtcbiAgICAgIHRoaXMuc2Nyb2xsQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbClcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbClcbiAgICB9XG4gIH0sXG4gIFxuICBkZXN0cm95ZWQoKXtcbiAgICBpZih0aGlzLnNjcm9sbENvbnRhaW5lcil7XG4gICAgICB0aGlzLnNjcm9sbENvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwpXG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwpXG4gICAgfVxuICB9LFxuXG4gIHRocm90dGxlKGludGVydmFsLCBjYWxsYmFjayl7XG4gICAgbGV0IGxhc3RDYWxsQXQgPSAwXG4gICAgbGV0IHRpbWVyXG5cbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgIGxldCBub3cgPSBEYXRlLm5vdygpXG4gICAgICBsZXQgcmVtYWluaW5nVGltZSA9IGludGVydmFsIC0gKG5vdyAtIGxhc3RDYWxsQXQpXG5cbiAgICAgIGlmKHJlbWFpbmluZ1RpbWUgPD0gMCB8fCByZW1haW5pbmdUaW1lID4gaW50ZXJ2YWwpe1xuICAgICAgICBpZih0aW1lcil7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKVxuICAgICAgICAgIHRpbWVyID0gbnVsbFxuICAgICAgICB9XG4gICAgICAgIGxhc3RDYWxsQXQgPSBub3dcbiAgICAgICAgY2FsbGJhY2soLi4uYXJncylcbiAgICAgIH0gZWxzZSBpZighdGltZXIpe1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGxhc3RDYWxsQXQgPSBEYXRlLm5vdygpXG4gICAgICAgICAgdGltZXIgPSBudWxsXG4gICAgICAgICAgY2FsbGJhY2soLi4uYXJncylcbiAgICAgICAgfSwgcmVtYWluaW5nVGltZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEhvb2tzXG4iLCAiaW1wb3J0IHtcbiAgUEhYX1JFRl9MT0FESU5HLFxuICBQSFhfUkVGX0xPQ0ssXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfRVZFTlRfQ0xBU1NFUyxcbiAgUEhYX0RJU0FCTEVELFxuICBQSFhfUkVBRE9OTFksXG4gIFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRVxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZW1lbnRSZWYge1xuICBzdGF0aWMgb25VbmxvY2soZWwsIGNhbGxiYWNrKXtcbiAgICBpZighRE9NLmlzTG9ja2VkKGVsKSAmJiAhZWwuY2xvc2VzdChgWyR7UEhYX1JFRl9MT0NLfV1gKSl7IHJldHVybiBjYWxsYmFjaygpIH1cbiAgICBjb25zdCBjbG9zZXN0TG9jayA9IGVsLmNsb3Nlc3QoYFske1BIWF9SRUZfTE9DS31dYClcbiAgICBjb25zdCByZWYgPSBjbG9zZXN0TG9jay5jbG9zZXN0KGBbJHtQSFhfUkVGX0xPQ0t9XWApLmdldEF0dHJpYnV0ZShQSFhfUkVGX0xPQ0spXG4gICAgY2xvc2VzdExvY2suYWRkRXZlbnRMaXN0ZW5lcihgcGh4OnVuZG8tbG9jazoke3JlZn1gLCAoKSA9PiB7XG4gICAgICBjYWxsYmFjaygpXG4gICAgfSwge29uY2U6IHRydWV9KVxuICB9XG5cbiAgY29uc3RydWN0b3IoZWwpe1xuICAgIHRoaXMuZWwgPSBlbFxuICAgIHRoaXMubG9hZGluZ1JlZiA9IGVsLmhhc0F0dHJpYnV0ZShQSFhfUkVGX0xPQURJTkcpID8gcGFyc2VJbnQoZWwuZ2V0QXR0cmlidXRlKFBIWF9SRUZfTE9BRElORyksIDEwKSA6IG51bGxcbiAgICB0aGlzLmxvY2tSZWYgPSBlbC5oYXNBdHRyaWJ1dGUoUEhYX1JFRl9MT0NLKSA/IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZShQSFhfUkVGX0xPQ0spLCAxMCkgOiBudWxsXG4gIH1cblxuICAvLyBwdWJsaWNcblxuICBtYXliZVVuZG8ocmVmLCBwaHhFdmVudCwgZWFjaENsb25lQ2FsbGJhY2spe1xuICAgIGlmKCF0aGlzLmlzV2l0aGluKHJlZikpeyByZXR1cm4gfVxuXG4gICAgLy8gdW5kbyBsb2NrcyBhbmQgYXBwbHkgY2xvbmVzXG4gICAgdGhpcy51bmRvTG9ja3MocmVmLCBwaHhFdmVudCwgZWFjaENsb25lQ2FsbGJhY2spXG5cbiAgICAvLyB1bmRvIGxvYWRpbmcgc3RhdGVzXG4gICAgdGhpcy51bmRvTG9hZGluZyhyZWYsIHBoeEV2ZW50KVxuXG4gICAgLy8gY2xlYW4gdXAgaWYgZnVsbHkgcmVzb2x2ZWRcbiAgICBpZih0aGlzLmlzRnVsbHlSZXNvbHZlZEJ5KHJlZikpeyB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGX1NSQykgfVxuICB9XG5cbiAgLy8gcHJpdmF0ZVxuXG4gIGlzV2l0aGluKHJlZil7XG4gICAgcmV0dXJuICEoKHRoaXMubG9hZGluZ1JlZiAhPT0gbnVsbCAmJiB0aGlzLmxvYWRpbmdSZWYgPiByZWYpICYmICh0aGlzLmxvY2tSZWYgIT09IG51bGwgJiYgdGhpcy5sb2NrUmVmID4gcmVmKSlcbiAgfVxuXG4gIC8vIENoZWNrIGZvciBjbG9uZWQgUEhYX1JFRl9MT0NLIGVsZW1lbnQgdGhhdCBoYXMgYmVlbiBtb3JwaGVkIGJlaGluZFxuICAvLyB0aGUgc2NlbmVzIHdoaWxlIHRoaXMgZWxlbWVudCB3YXMgbG9ja2VkIGluIHRoZSBET00uXG4gIC8vIFdoZW4gd2UgYXBwbHkgdGhlIGNsb25lZCB0cmVlIHRvIHRoZSBhY3RpdmUgRE9NIGVsZW1lbnQsIHdlIG11c3RcbiAgLy9cbiAgLy8gICAxLiBleGVjdXRlIHBlbmRpbmcgbW91bnRlZCBob29rcyBmb3Igbm9kZXMgbm93IGluIHRoZSBET01cbiAgLy8gICAyLiB1bmRvIGFueSByZWYgaW5zaWRlIHRoZSBjbG9uZWQgdHJlZSB0aGF0IGhhcyBzaW5jZSBiZWVuIGFjaydkXG4gIHVuZG9Mb2NrcyhyZWYsIHBoeEV2ZW50LCBlYWNoQ2xvbmVDYWxsYmFjayl7XG4gICAgaWYoIXRoaXMuaXNMb2NrVW5kb25lQnkocmVmKSl7IHJldHVybiB9XG5cbiAgICBsZXQgY2xvbmVkVHJlZSA9IERPTS5wcml2YXRlKHRoaXMuZWwsIFBIWF9SRUZfTE9DSylcbiAgICBpZihjbG9uZWRUcmVlKXtcbiAgICAgIGVhY2hDbG9uZUNhbGxiYWNrKGNsb25lZFRyZWUpXG4gICAgICBET00uZGVsZXRlUHJpdmF0ZSh0aGlzLmVsLCBQSFhfUkVGX0xPQ0spXG4gICAgfVxuICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfTE9DSylcblxuICAgIGxldCBvcHRzID0ge2RldGFpbDoge3JlZjogcmVmLCBldmVudDogcGh4RXZlbnR9LCBidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiBmYWxzZX1cbiAgICB0aGlzLmVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGBwaHg6dW5kby1sb2NrOiR7dGhpcy5sb2NrUmVmfWAsIG9wdHMpKVxuICB9XG5cbiAgdW5kb0xvYWRpbmcocmVmLCBwaHhFdmVudCl7XG4gICAgaWYoIXRoaXMuaXNMb2FkaW5nVW5kb25lQnkocmVmKSl7XG4gICAgICBpZih0aGlzLmNhblVuZG9Mb2FkaW5nKHJlZikgJiYgdGhpcy5lbC5jbGFzc0xpc3QuY29udGFpbnMoXCJwaHgtc3VibWl0LWxvYWRpbmdcIikpe1xuICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoXCJwaHgtY2hhbmdlLWxvYWRpbmdcIilcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmKHRoaXMuY2FuVW5kb0xvYWRpbmcocmVmKSl7XG4gICAgICB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGX0xPQURJTkcpXG4gICAgICBsZXQgZGlzYWJsZWRWYWwgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQpXG4gICAgICBsZXQgcmVhZE9ubHlWYWwgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfUkVBRE9OTFkpXG4gICAgICAvLyByZXN0b3JlIGlucHV0c1xuICAgICAgaWYocmVhZE9ubHlWYWwgIT09IG51bGwpe1xuICAgICAgICB0aGlzLmVsLnJlYWRPbmx5ID0gcmVhZE9ubHlWYWwgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUFET05MWSlcbiAgICAgIH1cbiAgICAgIGlmKGRpc2FibGVkVmFsICE9PSBudWxsKXtcbiAgICAgICAgdGhpcy5lbC5kaXNhYmxlZCA9IGRpc2FibGVkVmFsID09PSBcInRydWVcIiA/IHRydWUgOiBmYWxzZVxuICAgICAgICB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfRElTQUJMRUQpXG4gICAgICB9XG4gICAgICAvLyByZXN0b3JlIGRpc2FibGVzXG4gICAgICBsZXQgZGlzYWJsZVJlc3RvcmUgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUpXG4gICAgICBpZihkaXNhYmxlUmVzdG9yZSAhPT0gbnVsbCl7XG4gICAgICAgIHRoaXMuZWwuaW5uZXJUZXh0ID0gZGlzYWJsZVJlc3RvcmVcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFKVxuICAgICAgfVxuXG4gICAgICBsZXQgb3B0cyA9IHtkZXRhaWw6IHtyZWY6IHJlZiwgZXZlbnQ6IHBoeEV2ZW50fSwgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogZmFsc2V9XG4gICAgICB0aGlzLmVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGBwaHg6dW5kby1sb2FkaW5nOiR7dGhpcy5sb2FkaW5nUmVmfWAsIG9wdHMpKVxuICAgIH1cblxuICAgIC8vIHJlbW92ZSBjbGFzc2VzXG4gICAgUEhYX0VWRU5UX0NMQVNTRVMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIGlmKG5hbWUgIT09IFwicGh4LXN1Ym1pdC1sb2FkaW5nXCIgfHwgdGhpcy5jYW5VbmRvTG9hZGluZyhyZWYpKXtcbiAgICAgICAgRE9NLnJlbW92ZUNsYXNzKHRoaXMuZWwsIG5hbWUpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGlzTG9hZGluZ1VuZG9uZUJ5KHJlZil7IHJldHVybiB0aGlzLmxvYWRpbmdSZWYgPT09IG51bGwgPyBmYWxzZSA6IHRoaXMubG9hZGluZ1JlZiA8PSByZWYgfVxuICBpc0xvY2tVbmRvbmVCeShyZWYpeyByZXR1cm4gdGhpcy5sb2NrUmVmID09PSBudWxsID8gZmFsc2UgOiB0aGlzLmxvY2tSZWYgPD0gcmVmIH1cblxuICBpc0Z1bGx5UmVzb2x2ZWRCeShyZWYpe1xuICAgIHJldHVybiAodGhpcy5sb2FkaW5nUmVmID09PSBudWxsIHx8IHRoaXMubG9hZGluZ1JlZiA8PSByZWYpICYmICh0aGlzLmxvY2tSZWYgPT09IG51bGwgfHwgdGhpcy5sb2NrUmVmIDw9IHJlZilcbiAgfVxuXG4gIC8vIG9ubHkgcmVtb3ZlIHRoZSBwaHgtc3VibWl0LWxvYWRpbmcgY2xhc3MgaWYgd2UgYXJlIG5vdCBsb2NrZWRcbiAgY2FuVW5kb0xvYWRpbmcocmVmKXsgcmV0dXJuIHRoaXMubG9ja1JlZiA9PT0gbnVsbCB8fCB0aGlzLmxvY2tSZWYgPD0gcmVmIH1cbn1cbiIsICJpbXBvcnQge1xuICBtYXliZVxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRE9NUG9zdE1vcnBoUmVzdG9yZXIge1xuICBjb25zdHJ1Y3Rvcihjb250YWluZXJCZWZvcmUsIGNvbnRhaW5lckFmdGVyLCB1cGRhdGVUeXBlKXtcbiAgICBsZXQgaWRzQmVmb3JlID0gbmV3IFNldCgpXG4gICAgbGV0IGlkc0FmdGVyID0gbmV3IFNldChbLi4uY29udGFpbmVyQWZ0ZXIuY2hpbGRyZW5dLm1hcChjaGlsZCA9PiBjaGlsZC5pZCkpXG5cbiAgICBsZXQgZWxlbWVudHNUb01vZGlmeSA9IFtdXG5cbiAgICBBcnJheS5mcm9tKGNvbnRhaW5lckJlZm9yZS5jaGlsZHJlbikuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBpZihjaGlsZC5pZCl7IC8vIGFsbCBvZiBvdXIgY2hpbGRyZW4gc2hvdWxkIGJlIGVsZW1lbnRzIHdpdGggaWRzXG4gICAgICAgIGlkc0JlZm9yZS5hZGQoY2hpbGQuaWQpXG4gICAgICAgIGlmKGlkc0FmdGVyLmhhcyhjaGlsZC5pZCkpe1xuICAgICAgICAgIGxldCBwcmV2aW91c0VsZW1lbnRJZCA9IGNoaWxkLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgY2hpbGQucHJldmlvdXNFbGVtZW50U2libGluZy5pZFxuICAgICAgICAgIGVsZW1lbnRzVG9Nb2RpZnkucHVzaCh7ZWxlbWVudElkOiBjaGlsZC5pZCwgcHJldmlvdXNFbGVtZW50SWQ6IHByZXZpb3VzRWxlbWVudElkfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmNvbnRhaW5lcklkID0gY29udGFpbmVyQWZ0ZXIuaWRcbiAgICB0aGlzLnVwZGF0ZVR5cGUgPSB1cGRhdGVUeXBlXG4gICAgdGhpcy5lbGVtZW50c1RvTW9kaWZ5ID0gZWxlbWVudHNUb01vZGlmeVxuICAgIHRoaXMuZWxlbWVudElkc1RvQWRkID0gWy4uLmlkc0FmdGVyXS5maWx0ZXIoaWQgPT4gIWlkc0JlZm9yZS5oYXMoaWQpKVxuICB9XG5cbiAgLy8gV2UgZG8gdGhlIGZvbGxvd2luZyB0byBvcHRpbWl6ZSBhcHBlbmQvcHJlcGVuZCBvcGVyYXRpb25zOlxuICAvLyAgIDEpIFRyYWNrIGlkcyBvZiBtb2RpZmllZCBlbGVtZW50cyAmIG9mIG5ldyBlbGVtZW50c1xuICAvLyAgIDIpIEFsbCB0aGUgbW9kaWZpZWQgZWxlbWVudHMgYXJlIHB1dCBiYWNrIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uIGluIHRoZSBET00gdHJlZVxuICAvLyAgICAgIGJ5IHN0b3JpbmcgdGhlIGlkIG9mIHRoZWlyIHByZXZpb3VzIHNpYmxpbmdcbiAgLy8gICAzKSBOZXcgZWxlbWVudHMgYXJlIGdvaW5nIHRvIGJlIHB1dCBpbiB0aGUgcmlnaHQgcGxhY2UgYnkgbW9ycGhkb20gZHVyaW5nIGFwcGVuZC5cbiAgLy8gICAgICBGb3IgcHJlcGVuZCwgd2UgbW92ZSB0aGVtIHRvIHRoZSBmaXJzdCBwb3NpdGlvbiBpbiB0aGUgY29udGFpbmVyXG4gIHBlcmZvcm0oKXtcbiAgICBsZXQgY29udGFpbmVyID0gRE9NLmJ5SWQodGhpcy5jb250YWluZXJJZClcbiAgICB0aGlzLmVsZW1lbnRzVG9Nb2RpZnkuZm9yRWFjaChlbGVtZW50VG9Nb2RpZnkgPT4ge1xuICAgICAgaWYoZWxlbWVudFRvTW9kaWZ5LnByZXZpb3VzRWxlbWVudElkKXtcbiAgICAgICAgbWF5YmUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudFRvTW9kaWZ5LnByZXZpb3VzRWxlbWVudElkKSwgcHJldmlvdXNFbGVtID0+IHtcbiAgICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50VG9Nb2RpZnkuZWxlbWVudElkKSwgZWxlbSA9PiB7XG4gICAgICAgICAgICBsZXQgaXNJblJpZ2h0UGxhY2UgPSBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmlkID09IHByZXZpb3VzRWxlbS5pZFxuICAgICAgICAgICAgaWYoIWlzSW5SaWdodFBsYWNlKXtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyZW5kXCIsIGVsZW0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGNvbnRhaW5lclxuICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50VG9Nb2RpZnkuZWxlbWVudElkKSwgZWxlbSA9PiB7XG4gICAgICAgICAgbGV0IGlzSW5SaWdodFBsYWNlID0gZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nID09IG51bGxcbiAgICAgICAgICBpZighaXNJblJpZ2h0UGxhY2Upe1xuICAgICAgICAgICAgY29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIiwgZWxlbSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmKHRoaXMudXBkYXRlVHlwZSA9PSBcInByZXBlbmRcIil7XG4gICAgICB0aGlzLmVsZW1lbnRJZHNUb0FkZC5yZXZlcnNlKCkuZm9yRWFjaChlbGVtSWQgPT4ge1xuICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtSWQpLCBlbGVtID0+IGNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmJlZ2luXCIsIGVsZW0pKVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsICJ2YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSA9IDExO1xuXG5mdW5jdGlvbiBtb3JwaEF0dHJzKGZyb21Ob2RlLCB0b05vZGUpIHtcbiAgICB2YXIgdG9Ob2RlQXR0cnMgPSB0b05vZGUuYXR0cmlidXRlcztcbiAgICB2YXIgYXR0cjtcbiAgICB2YXIgYXR0ck5hbWU7XG4gICAgdmFyIGF0dHJOYW1lc3BhY2VVUkk7XG4gICAgdmFyIGF0dHJWYWx1ZTtcbiAgICB2YXIgZnJvbVZhbHVlO1xuXG4gICAgLy8gZG9jdW1lbnQtZnJhZ21lbnRzIGRvbnQgaGF2ZSBhdHRyaWJ1dGVzIHNvIGxldHMgbm90IGRvIGFueXRoaW5nXG4gICAgaWYgKHRvTm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSB8fCBmcm9tTm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBhdHRyaWJ1dGVzIG9uIG9yaWdpbmFsIERPTSBlbGVtZW50XG4gICAgZm9yICh2YXIgaSA9IHRvTm9kZUF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGF0dHIgPSB0b05vZGVBdHRyc1tpXTtcbiAgICAgICAgYXR0ck5hbWUgPSBhdHRyLm5hbWU7XG4gICAgICAgIGF0dHJOYW1lc3BhY2VVUkkgPSBhdHRyLm5hbWVzcGFjZVVSSTtcbiAgICAgICAgYXR0clZhbHVlID0gYXR0ci52YWx1ZTtcblxuICAgICAgICBpZiAoYXR0ck5hbWVzcGFjZVVSSSkge1xuICAgICAgICAgICAgYXR0ck5hbWUgPSBhdHRyLmxvY2FsTmFtZSB8fCBhdHRyTmFtZTtcbiAgICAgICAgICAgIGZyb21WYWx1ZSA9IGZyb21Ob2RlLmdldEF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGZyb21WYWx1ZSAhPT0gYXR0clZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIucHJlZml4ID09PSAneG1sbnMnKXtcbiAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWUgPSBhdHRyLm5hbWU7IC8vIEl0J3Mgbm90IGFsbG93ZWQgdG8gc2V0IGFuIGF0dHJpYnV0ZSB3aXRoIHRoZSBYTUxOUyBuYW1lc3BhY2Ugd2l0aG91dCBzcGVjaWZ5aW5nIHRoZSBgeG1sbnNgIHByZWZpeFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5zZXRBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSwgYXR0clZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyb21WYWx1ZSA9IGZyb21Ob2RlLmdldEF0dHJpYnV0ZShhdHRyTmFtZSk7XG5cbiAgICAgICAgICAgIGlmIChmcm9tVmFsdWUgIT09IGF0dHJWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0clZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBhbnkgZXh0cmEgYXR0cmlidXRlcyBmb3VuZCBvbiB0aGUgb3JpZ2luYWwgRE9NIGVsZW1lbnQgdGhhdFxuICAgIC8vIHdlcmVuJ3QgZm91bmQgb24gdGhlIHRhcmdldCBlbGVtZW50LlxuICAgIHZhciBmcm9tTm9kZUF0dHJzID0gZnJvbU5vZGUuYXR0cmlidXRlcztcblxuICAgIGZvciAodmFyIGQgPSBmcm9tTm9kZUF0dHJzLmxlbmd0aCAtIDE7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgIGF0dHIgPSBmcm9tTm9kZUF0dHJzW2RdO1xuICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgYXR0ck5hbWVzcGFjZVVSSSA9IGF0dHIubmFtZXNwYWNlVVJJO1xuXG4gICAgICAgIGlmIChhdHRyTmFtZXNwYWNlVVJJKSB7XG4gICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubG9jYWxOYW1lIHx8IGF0dHJOYW1lO1xuXG4gICAgICAgICAgICBpZiAoIXRvTm9kZS5oYXNBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5yZW1vdmVBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRvTm9kZS5oYXNBdHRyaWJ1dGUoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgZnJvbU5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIHJhbmdlOyAvLyBDcmVhdGUgYSByYW5nZSBvYmplY3QgZm9yIGVmZmljZW50bHkgcmVuZGVyaW5nIHN0cmluZ3MgdG8gZWxlbWVudHMuXG52YXIgTlNfWEhUTUwgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCc7XG5cbnZhciBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogZG9jdW1lbnQ7XG52YXIgSEFTX1RFTVBMQVRFX1NVUFBPUlQgPSAhIWRvYyAmJiAnY29udGVudCcgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG52YXIgSEFTX1JBTkdFX1NVUFBPUlQgPSAhIWRvYyAmJiBkb2MuY3JlYXRlUmFuZ2UgJiYgJ2NyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCcgaW4gZG9jLmNyZWF0ZVJhbmdlKCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVRlbXBsYXRlKHN0cikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IGRvYy5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHN0cjtcbiAgICByZXR1cm4gdGVtcGxhdGUuY29udGVudC5jaGlsZE5vZGVzWzBdO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudEZyb21SYW5nZShzdHIpIHtcbiAgICBpZiAoIXJhbmdlKSB7XG4gICAgICAgIHJhbmdlID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgIHJhbmdlLnNlbGVjdE5vZGUoZG9jLmJvZHkpO1xuICAgIH1cblxuICAgIHZhciBmcmFnbWVudCA9IHJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChzdHIpO1xuICAgIHJldHVybiBmcmFnbWVudC5jaGlsZE5vZGVzWzBdO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudEZyb21XcmFwKHN0cikge1xuICAgIHZhciBmcmFnbWVudCA9IGRvYy5jcmVhdGVFbGVtZW50KCdib2R5Jyk7XG4gICAgZnJhZ21lbnQuaW5uZXJIVE1MID0gc3RyO1xuICAgIHJldHVybiBmcmFnbWVudC5jaGlsZE5vZGVzWzBdO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYWJvdXQgdGhlIHNhbWVcbiAqIHZhciBodG1sID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhzdHIsICd0ZXh0L2h0bWwnKTtcbiAqIHJldHVybiBodG1sLmJvZHkuZmlyc3RDaGlsZDtcbiAqXG4gKiBAbWV0aG9kIHRvRWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICovXG5mdW5jdGlvbiB0b0VsZW1lbnQoc3RyKSB7XG4gICAgc3RyID0gc3RyLnRyaW0oKTtcbiAgICBpZiAoSEFTX1RFTVBMQVRFX1NVUFBPUlQpIHtcbiAgICAgIC8vIGF2b2lkIHJlc3RyaWN0aW9ucyBvbiBjb250ZW50IGZvciB0aGluZ3MgbGlrZSBgPHRyPjx0aD5IaTwvdGg+PC90cj5gIHdoaWNoXG4gICAgICAvLyBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgZG9lc24ndCBzdXBwb3J0XG4gICAgICAvLyA8dGVtcGxhdGU+IHN1cHBvcnQgbm90IGF2YWlsYWJsZSBpbiBJRVxuICAgICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50RnJvbVRlbXBsYXRlKHN0cik7XG4gICAgfSBlbHNlIGlmIChIQVNfUkFOR0VfU1VQUE9SVCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50RnJvbVJhbmdlKHN0cik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50RnJvbVdyYXAoc3RyKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdHdvIG5vZGUncyBuYW1lcyBhcmUgdGhlIHNhbWUuXG4gKlxuICogTk9URTogV2UgZG9uJ3QgYm90aGVyIGNoZWNraW5nIGBuYW1lc3BhY2VVUklgIGJlY2F1c2UgeW91IHdpbGwgbmV2ZXIgZmluZCB0d28gSFRNTCBlbGVtZW50cyB3aXRoIHRoZSBzYW1lXG4gKiAgICAgICBub2RlTmFtZSBhbmQgZGlmZmVyZW50IG5hbWVzcGFjZSBVUklzLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiIFRoZSB0YXJnZXQgZWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY29tcGFyZU5vZGVOYW1lcyhmcm9tRWwsIHRvRWwpIHtcbiAgICB2YXIgZnJvbU5vZGVOYW1lID0gZnJvbUVsLm5vZGVOYW1lO1xuICAgIHZhciB0b05vZGVOYW1lID0gdG9FbC5ub2RlTmFtZTtcbiAgICB2YXIgZnJvbUNvZGVTdGFydCwgdG9Db2RlU3RhcnQ7XG5cbiAgICBpZiAoZnJvbU5vZGVOYW1lID09PSB0b05vZGVOYW1lKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZyb21Db2RlU3RhcnQgPSBmcm9tTm9kZU5hbWUuY2hhckNvZGVBdCgwKTtcbiAgICB0b0NvZGVTdGFydCA9IHRvTm9kZU5hbWUuY2hhckNvZGVBdCgwKTtcblxuICAgIC8vIElmIHRoZSB0YXJnZXQgZWxlbWVudCBpcyBhIHZpcnR1YWwgRE9NIG5vZGUgb3IgU1ZHIG5vZGUgdGhlbiB3ZSBtYXlcbiAgICAvLyBuZWVkIHRvIG5vcm1hbGl6ZSB0aGUgdGFnIG5hbWUgYmVmb3JlIGNvbXBhcmluZy4gTm9ybWFsIEhUTUwgZWxlbWVudHMgdGhhdCBhcmVcbiAgICAvLyBpbiB0aGUgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJcbiAgICAvLyBhcmUgY29udmVydGVkIHRvIHVwcGVyIGNhc2VcbiAgICBpZiAoZnJvbUNvZGVTdGFydCA8PSA5MCAmJiB0b0NvZGVTdGFydCA+PSA5NykgeyAvLyBmcm9tIGlzIHVwcGVyIGFuZCB0byBpcyBsb3dlclxuICAgICAgICByZXR1cm4gZnJvbU5vZGVOYW1lID09PSB0b05vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgfSBlbHNlIGlmICh0b0NvZGVTdGFydCA8PSA5MCAmJiBmcm9tQ29kZVN0YXJ0ID49IDk3KSB7IC8vIHRvIGlzIHVwcGVyIGFuZCBmcm9tIGlzIGxvd2VyXG4gICAgICAgIHJldHVybiB0b05vZGVOYW1lID09PSBmcm9tTm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBlbGVtZW50LCBvcHRpb25hbGx5IHdpdGggYSBrbm93biBuYW1lc3BhY2UgVVJJLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBlbGVtZW50IG5hbWUsIGUuZy4gJ2Rpdicgb3IgJ3N2ZydcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZXNwYWNlVVJJXSB0aGUgZWxlbWVudCdzIG5hbWVzcGFjZSBVUkksIGkuZS4gdGhlIHZhbHVlIG9mXG4gKiBpdHMgYHhtbG5zYCBhdHRyaWJ1dGUgb3IgaXRzIGluZmVycmVkIG5hbWVzcGFjZS5cbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMobmFtZSwgbmFtZXNwYWNlVVJJKSB7XG4gICAgcmV0dXJuICFuYW1lc3BhY2VVUkkgfHwgbmFtZXNwYWNlVVJJID09PSBOU19YSFRNTCA/XG4gICAgICAgIGRvYy5jcmVhdGVFbGVtZW50KG5hbWUpIDpcbiAgICAgICAgZG9jLmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIG5hbWUpO1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgY2hpbGRyZW4gb2Ygb25lIERPTSBlbGVtZW50IHRvIGFub3RoZXIgRE9NIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gbW92ZUNoaWxkcmVuKGZyb21FbCwgdG9FbCkge1xuICAgIHZhciBjdXJDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICB2YXIgbmV4dENoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIHRvRWwuYXBwZW5kQ2hpbGQoY3VyQ2hpbGQpO1xuICAgICAgICBjdXJDaGlsZCA9IG5leHRDaGlsZDtcbiAgICB9XG4gICAgcmV0dXJuIHRvRWw7XG59XG5cbmZ1bmN0aW9uIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCBuYW1lKSB7XG4gICAgaWYgKGZyb21FbFtuYW1lXSAhPT0gdG9FbFtuYW1lXSkge1xuICAgICAgICBmcm9tRWxbbmFtZV0gPSB0b0VsW25hbWVdO1xuICAgICAgICBpZiAoZnJvbUVsW25hbWVdKSB7XG4gICAgICAgICAgICBmcm9tRWwuc2V0QXR0cmlidXRlKG5hbWUsICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnZhciBzcGVjaWFsRWxIYW5kbGVycyA9IHtcbiAgICBPUFRJT046IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGZyb21FbC5wYXJlbnROb2RlO1xuICAgICAgICBpZiAocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdmFyIHBhcmVudE5hbWUgPSBwYXJlbnROb2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAocGFyZW50TmFtZSA9PT0gJ09QVEdST1VQJykge1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgcGFyZW50TmFtZSA9IHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmVudE5hbWUgPT09ICdTRUxFQ1QnICYmICFwYXJlbnROb2RlLmhhc0F0dHJpYnV0ZSgnbXVsdGlwbGUnKSkge1xuICAgICAgICAgICAgICAgIGlmIChmcm9tRWwuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpICYmICF0b0VsLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIE1TIEVkZ2UgYnVnIHdoZXJlIHRoZSAnc2VsZWN0ZWQnIGF0dHJpYnV0ZSBjYW4gb25seSBiZVxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmVkIGlmIHNldCB0byBhIG5vbi1lbXB0eSB2YWx1ZTpcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvMTIwODc2NzkvXG4gICAgICAgICAgICAgICAgICAgIGZyb21FbC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gcmVzZXQgc2VsZWN0IGVsZW1lbnQncyBzZWxlY3RlZEluZGV4IHRvIC0xLCBvdGhlcndpc2Ugc2V0dGluZ1xuICAgICAgICAgICAgICAgIC8vIGZyb21FbC5zZWxlY3RlZCB1c2luZyB0aGUgc3luY0Jvb2xlYW5BdHRyUHJvcCBiZWxvdyBoYXMgbm8gZWZmZWN0LlxuICAgICAgICAgICAgICAgIC8vIFRoZSBjb3JyZWN0IHNlbGVjdGVkSW5kZXggd2lsbCBiZSBzZXQgaW4gdGhlIFNFTEVDVCBzcGVjaWFsIGhhbmRsZXIgYmVsb3cuXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsICdzZWxlY3RlZCcpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVGhlIFwidmFsdWVcIiBhdHRyaWJ1dGUgaXMgc3BlY2lhbCBmb3IgdGhlIDxpbnB1dD4gZWxlbWVudCBzaW5jZSBpdCBzZXRzXG4gICAgICogdGhlIGluaXRpYWwgdmFsdWUuIENoYW5naW5nIHRoZSBcInZhbHVlXCIgYXR0cmlidXRlIHdpdGhvdXQgY2hhbmdpbmcgdGhlXG4gICAgICogXCJ2YWx1ZVwiIHByb3BlcnR5IHdpbGwgaGF2ZSBubyBlZmZlY3Qgc2luY2UgaXQgaXMgb25seSB1c2VkIHRvIHRoZSBzZXQgdGhlXG4gICAgICogaW5pdGlhbCB2YWx1ZS4gIFNpbWlsYXIgZm9yIHRoZSBcImNoZWNrZWRcIiBhdHRyaWJ1dGUsIGFuZCBcImRpc2FibGVkXCIuXG4gICAgICovXG4gICAgSU5QVVQ6IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ2NoZWNrZWQnKTtcbiAgICAgICAgc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsICdkaXNhYmxlZCcpO1xuXG4gICAgICAgIGlmIChmcm9tRWwudmFsdWUgIT09IHRvRWwudmFsdWUpIHtcbiAgICAgICAgICAgIGZyb21FbC52YWx1ZSA9IHRvRWwudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRvRWwuaGFzQXR0cmlidXRlKCd2YWx1ZScpKSB7XG4gICAgICAgICAgICBmcm9tRWwucmVtb3ZlQXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIFRFWFRBUkVBOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gdG9FbC52YWx1ZTtcbiAgICAgICAgaWYgKGZyb21FbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGZyb21FbC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZpcnN0Q2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKGZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIC8vIE5lZWRlZCBmb3IgSUUuIEFwcGFyZW50bHkgSUUgc2V0cyB0aGUgcGxhY2Vob2xkZXIgYXMgdGhlXG4gICAgICAgICAgICAvLyBub2RlIHZhbHVlIGFuZCB2aXNlIHZlcnNhLiBUaGlzIGlnbm9yZXMgYW4gZW1wdHkgdXBkYXRlLlxuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gZmlyc3RDaGlsZC5ub2RlVmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSA9PSBuZXdWYWx1ZSB8fCAoIW5ld1ZhbHVlICYmIG9sZFZhbHVlID09IGZyb21FbC5wbGFjZWhvbGRlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZpcnN0Q2hpbGQubm9kZVZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFNFTEVDVDogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIGlmICghdG9FbC5oYXNBdHRyaWJ1dGUoJ211bHRpcGxlJykpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAvLyBXZSBoYXZlIHRvIGxvb3AgdGhyb3VnaCBjaGlsZHJlbiBvZiBmcm9tRWwsIG5vdCB0b0VsIHNpbmNlIG5vZGVzIGNhbiBiZSBtb3ZlZFxuICAgICAgICAgICAgLy8gZnJvbSB0b0VsIHRvIGZyb21FbCBkaXJlY3RseSB3aGVuIG1vcnBoaW5nLlxuICAgICAgICAgICAgLy8gQXQgdGhlIHRpbWUgdGhpcyBzcGVjaWFsIGhhbmRsZXIgaXMgaW52b2tlZCwgYWxsIGNoaWxkcmVuIGhhdmUgYWxyZWFkeSBiZWVuIG1vcnBoZWRcbiAgICAgICAgICAgIC8vIGFuZCBhcHBlbmRlZCB0byAvIHJlbW92ZWQgZnJvbSBmcm9tRWwsIHNvIHVzaW5nIGZyb21FbCBoZXJlIGlzIHNhZmUgYW5kIGNvcnJlY3QuXG4gICAgICAgICAgICB2YXIgY3VyQ2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIHZhciBvcHRncm91cDtcbiAgICAgICAgICAgIHZhciBub2RlTmFtZTtcbiAgICAgICAgICAgIHdoaWxlKGN1ckNoaWxkKSB7XG4gICAgICAgICAgICAgICAgbm9kZU5hbWUgPSBjdXJDaGlsZC5ub2RlTmFtZSAmJiBjdXJDaGlsZC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmIChub2RlTmFtZSA9PT0gJ09QVEdST1VQJykge1xuICAgICAgICAgICAgICAgICAgICBvcHRncm91cCA9IGN1ckNoaWxkO1xuICAgICAgICAgICAgICAgICAgICBjdXJDaGlsZCA9IG9wdGdyb3VwLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lID09PSAnT1BUSU9OJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckNoaWxkLmhhc0F0dHJpYnV0ZSgnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3VyQ2hpbGQgJiYgb3B0Z3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gb3B0Z3JvdXAubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZyb21FbC5zZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBFTEVNRU5UX05PREUgPSAxO1xudmFyIERPQ1VNRU5UX0ZSQUdNRU5UX05PREUkMSA9IDExO1xudmFyIFRFWFRfTk9ERSA9IDM7XG52YXIgQ09NTUVOVF9OT0RFID0gODtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGRlZmF1bHRHZXROb2RlS2V5KG5vZGUpIHtcbiAgaWYgKG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpKSB8fCBub2RlLmlkO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1vcnBoZG9tRmFjdG9yeShtb3JwaEF0dHJzKSB7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIG1vcnBoZG9tKGZyb21Ob2RlLCB0b05vZGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRvTm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChmcm9tTm9kZS5ub2RlTmFtZSA9PT0gJyNkb2N1bWVudCcgfHwgZnJvbU5vZGUubm9kZU5hbWUgPT09ICdIVE1MJyB8fCBmcm9tTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIHZhciB0b05vZGVIdG1sID0gdG9Ob2RlO1xuICAgICAgICB0b05vZGUgPSBkb2MuY3JlYXRlRWxlbWVudCgnaHRtbCcpO1xuICAgICAgICB0b05vZGUuaW5uZXJIVE1MID0gdG9Ob2RlSHRtbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvTm9kZSA9IHRvRWxlbWVudCh0b05vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodG9Ob2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFJDEpIHtcbiAgICAgIHRvTm9kZSA9IHRvTm9kZS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICB9XG5cbiAgICB2YXIgZ2V0Tm9kZUtleSA9IG9wdGlvbnMuZ2V0Tm9kZUtleSB8fCBkZWZhdWx0R2V0Tm9kZUtleTtcbiAgICB2YXIgb25CZWZvcmVOb2RlQWRkZWQgPSBvcHRpb25zLm9uQmVmb3JlTm9kZUFkZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uTm9kZUFkZGVkID0gb3B0aW9ucy5vbk5vZGVBZGRlZCB8fCBub29wO1xuICAgIHZhciBvbkJlZm9yZUVsVXBkYXRlZCA9IG9wdGlvbnMub25CZWZvcmVFbFVwZGF0ZWQgfHwgbm9vcDtcbiAgICB2YXIgb25FbFVwZGF0ZWQgPSBvcHRpb25zLm9uRWxVcGRhdGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlTm9kZURpc2NhcmRlZCA9IG9wdGlvbnMub25CZWZvcmVOb2RlRGlzY2FyZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uTm9kZURpc2NhcmRlZCA9IG9wdGlvbnMub25Ob2RlRGlzY2FyZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQgPSBvcHRpb25zLm9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQgfHwgbm9vcDtcbiAgICB2YXIgc2tpcEZyb21DaGlsZHJlbiA9IG9wdGlvbnMuc2tpcEZyb21DaGlsZHJlbiB8fCBub29wO1xuICAgIHZhciBhZGRDaGlsZCA9IG9wdGlvbnMuYWRkQ2hpbGQgfHwgZnVuY3Rpb24ocGFyZW50LCBjaGlsZCl7IHJldHVybiBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpOyB9O1xuICAgIHZhciBjaGlsZHJlbk9ubHkgPSBvcHRpb25zLmNoaWxkcmVuT25seSA9PT0gdHJ1ZTtcblxuICAgIC8vIFRoaXMgb2JqZWN0IGlzIHVzZWQgYXMgYSBsb29rdXAgdG8gcXVpY2tseSBmaW5kIGFsbCBrZXllZCBlbGVtZW50cyBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuXG4gICAgdmFyIGZyb21Ob2Rlc0xvb2t1cCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleWVkUmVtb3ZhbExpc3QgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGFkZEtleWVkUmVtb3ZhbChrZXkpIHtcbiAgICAgIGtleWVkUmVtb3ZhbExpc3QucHVzaChrZXkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhbGtEaXNjYXJkZWRDaGlsZE5vZGVzKG5vZGUsIHNraXBLZXllZE5vZGVzKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIHZhciBjdXJDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgd2hpbGUgKGN1ckNoaWxkKSB7XG5cbiAgICAgICAgICB2YXIga2V5ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKHNraXBLZXllZE5vZGVzICYmIChrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKSkpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSBza2lwcGluZyBrZXllZCBub2RlcyB0aGVuIHdlIGFkZCB0aGUga2V5XG4gICAgICAgICAgICAvLyB0byBhIGxpc3Qgc28gdGhhdCBpdCBjYW4gYmUgaGFuZGxlZCBhdCB0aGUgdmVyeSBlbmQuXG4gICAgICAgICAgICBhZGRLZXllZFJlbW92YWwoa2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT25seSByZXBvcnQgdGhlIG5vZGUgYXMgZGlzY2FyZGVkIGlmIGl0IGlzIG5vdCBrZXllZC4gV2UgZG8gdGhpcyBiZWNhdXNlXG4gICAgICAgICAgICAvLyBhdCB0aGUgZW5kIHdlIGxvb3AgdGhyb3VnaCBhbGwga2V5ZWQgZWxlbWVudHMgdGhhdCB3ZXJlIHVubWF0Y2hlZFxuICAgICAgICAgICAgLy8gYW5kIHRoZW4gZGlzY2FyZCB0aGVtIGluIG9uZSBmaW5hbCBwYXNzLlxuICAgICAgICAgICAgb25Ob2RlRGlzY2FyZGVkKGN1ckNoaWxkKTtcbiAgICAgICAgICAgIGlmIChjdXJDaGlsZC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgIHdhbGtEaXNjYXJkZWRDaGlsZE5vZGVzKGN1ckNoaWxkLCBza2lwS2V5ZWROb2Rlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogUmVtb3ZlcyBhIERPTSBub2RlIG91dCBvZiB0aGUgb3JpZ2luYWwgRE9NXG4gICAgKlxuICAgICogQHBhcmFtICB7Tm9kZX0gbm9kZSBUaGUgbm9kZSB0byByZW1vdmVcbiAgICAqIEBwYXJhbSAge05vZGV9IHBhcmVudE5vZGUgVGhlIG5vZGVzIHBhcmVudFxuICAgICogQHBhcmFtICB7Qm9vbGVhbn0gc2tpcEtleWVkTm9kZXMgSWYgdHJ1ZSB0aGVuIGVsZW1lbnRzIHdpdGgga2V5cyB3aWxsIGJlIHNraXBwZWQgYW5kIG5vdCBkaXNjYXJkZWQuXG4gICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVOb2RlKG5vZGUsIHBhcmVudE5vZGUsIHNraXBLZXllZE5vZGVzKSB7XG4gICAgICBpZiAob25CZWZvcmVOb2RlRGlzY2FyZGVkKG5vZGUpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIG9uTm9kZURpc2NhcmRlZChub2RlKTtcbiAgICAgIHdhbGtEaXNjYXJkZWRDaGlsZE5vZGVzKG5vZGUsIHNraXBLZXllZE5vZGVzKTtcbiAgICB9XG5cbiAgICAvLyAvLyBUcmVlV2Fsa2VyIGltcGxlbWVudGF0aW9uIGlzIG5vIGZhc3RlciwgYnV0IGtlZXBpbmcgdGhpcyBhcm91bmQgaW4gY2FzZSB0aGlzIGNoYW5nZXMgaW4gdGhlIGZ1dHVyZVxuICAgIC8vIGZ1bmN0aW9uIGluZGV4VHJlZShyb290KSB7XG4gICAgLy8gICAgIHZhciB0cmVlV2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihcbiAgICAvLyAgICAgICAgIHJvb3QsXG4gICAgLy8gICAgICAgICBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCk7XG4gICAgLy9cbiAgICAvLyAgICAgdmFyIGVsO1xuICAgIC8vICAgICB3aGlsZSgoZWwgPSB0cmVlV2Fsa2VyLm5leHROb2RlKCkpKSB7XG4gICAgLy8gICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShlbCk7XG4gICAgLy8gICAgICAgICBpZiAoa2V5KSB7XG4gICAgLy8gICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBlbDtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIC8vIC8vIE5vZGVJdGVyYXRvciBpbXBsZW1lbnRhdGlvbiBpcyBubyBmYXN0ZXIsIGJ1dCBrZWVwaW5nIHRoaXMgYXJvdW5kIGluIGNhc2UgdGhpcyBjaGFuZ2VzIGluIHRoZSBmdXR1cmVcbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIGluZGV4VHJlZShub2RlKSB7XG4gICAgLy8gICAgIHZhciBub2RlSXRlcmF0b3IgPSBkb2N1bWVudC5jcmVhdGVOb2RlSXRlcmF0b3Iobm9kZSwgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQpO1xuICAgIC8vICAgICB2YXIgZWw7XG4gICAgLy8gICAgIHdoaWxlKChlbCA9IG5vZGVJdGVyYXRvci5uZXh0Tm9kZSgpKSkge1xuICAgIC8vICAgICAgICAgdmFyIGtleSA9IGdldE5vZGVLZXkoZWwpO1xuICAgIC8vICAgICAgICAgaWYgKGtleSkge1xuICAgIC8vICAgICAgICAgICAgIGZyb21Ob2Rlc0xvb2t1cFtrZXldID0gZWw7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG5cbiAgICBmdW5jdGlvbiBpbmRleFRyZWUobm9kZSkge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSB8fCBub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFJDEpIHtcbiAgICAgICAgdmFyIGN1ckNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcbiAgICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShjdXJDaGlsZCk7XG4gICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBjdXJDaGlsZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBXYWxrIHJlY3Vyc2l2ZWx5XG4gICAgICAgICAgaW5kZXhUcmVlKGN1ckNoaWxkKTtcblxuICAgICAgICAgIGN1ckNoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbmRleFRyZWUoZnJvbU5vZGUpO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlTm9kZUFkZGVkKGVsKSB7XG4gICAgICBvbk5vZGVBZGRlZChlbCk7XG5cbiAgICAgIHZhciBjdXJDaGlsZCA9IGVsLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcbiAgICAgICAgdmFyIG5leHRTaWJsaW5nID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgdmFyIGtleSA9IGdldE5vZGVLZXkoY3VyQ2hpbGQpO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgdmFyIHVubWF0Y2hlZEZyb21FbCA9IGZyb21Ob2Rlc0xvb2t1cFtrZXldO1xuICAgICAgICAgIC8vIGlmIHdlIGZpbmQgYSBkdXBsaWNhdGUgI2lkIG5vZGUgaW4gY2FjaGUsIHJlcGxhY2UgYGVsYCB3aXRoIGNhY2hlIHZhbHVlXG4gICAgICAgICAgLy8gYW5kIG1vcnBoIGl0IHRvIHRoZSBjaGlsZCBub2RlLlxuICAgICAgICAgIGlmICh1bm1hdGNoZWRGcm9tRWwgJiYgY29tcGFyZU5vZGVOYW1lcyhjdXJDaGlsZCwgdW5tYXRjaGVkRnJvbUVsKSkge1xuICAgICAgICAgICAgY3VyQ2hpbGQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQodW5tYXRjaGVkRnJvbUVsLCBjdXJDaGlsZCk7XG4gICAgICAgICAgICBtb3JwaEVsKHVubWF0Y2hlZEZyb21FbCwgY3VyQ2hpbGQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVOb2RlQWRkZWQoY3VyQ2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyByZWN1cnNpdmVseSBjYWxsIGZvciBjdXJDaGlsZCBhbmQgaXQncyBjaGlsZHJlbiB0byBzZWUgaWYgd2UgZmluZCBzb21ldGhpbmcgaW5cbiAgICAgICAgICAvLyBmcm9tTm9kZXNMb29rdXBcbiAgICAgICAgICBoYW5kbGVOb2RlQWRkZWQoY3VyQ2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VyQ2hpbGQgPSBuZXh0U2libGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwRnJvbUVsKGZyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCwgY3VyRnJvbU5vZGVLZXkpIHtcbiAgICAgIC8vIFdlIGhhdmUgcHJvY2Vzc2VkIGFsbCBvZiB0aGUgXCJ0byBub2Rlc1wiLiBJZiBjdXJGcm9tTm9kZUNoaWxkIGlzXG4gICAgICAvLyBub24tbnVsbCB0aGVuIHdlIHN0aWxsIGhhdmUgc29tZSBmcm9tIG5vZGVzIGxlZnQgb3ZlciB0aGF0IG5lZWRcbiAgICAgIC8vIHRvIGJlIHJlbW92ZWRcbiAgICAgIHdoaWxlIChjdXJGcm9tTm9kZUNoaWxkKSB7XG4gICAgICAgIHZhciBmcm9tTmV4dFNpYmxpbmcgPSBjdXJGcm9tTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICBpZiAoKGN1ckZyb21Ob2RlS2V5ID0gZ2V0Tm9kZUtleShjdXJGcm9tTm9kZUNoaWxkKSkpIHtcbiAgICAgICAgICAvLyBTaW5jZSB0aGUgbm9kZSBpcyBrZXllZCBpdCBtaWdodCBiZSBtYXRjaGVkIHVwIGxhdGVyIHNvIHdlIGRlZmVyXG4gICAgICAgICAgLy8gdGhlIGFjdHVhbCByZW1vdmFsIHRvIGxhdGVyXG4gICAgICAgICAgYWRkS2V5ZWRSZW1vdmFsKGN1ckZyb21Ob2RlS2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAvLyAgICAgICBzdGlsbCBhIGNoYW5jZSB0aGV5IHdpbGwgYmUgbWF0Y2hlZCB1cCBsYXRlclxuICAgICAgICAgIHJlbW92ZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCwgZnJvbUVsLCB0cnVlIC8qIHNraXAga2V5ZWQgbm9kZXMgKi8pO1xuICAgICAgICB9XG4gICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9ycGhFbChmcm9tRWwsIHRvRWwsIGNoaWxkcmVuT25seSkge1xuICAgICAgdmFyIHRvRWxLZXkgPSBnZXROb2RlS2V5KHRvRWwpO1xuXG4gICAgICBpZiAodG9FbEtleSkge1xuICAgICAgICAvLyBJZiBhbiBlbGVtZW50IHdpdGggYW4gSUQgaXMgYmVpbmcgbW9ycGhlZCB0aGVuIGl0IHdpbGwgYmUgaW4gdGhlIGZpbmFsXG4gICAgICAgIC8vIERPTSBzbyBjbGVhciBpdCBvdXQgb2YgdGhlIHNhdmVkIGVsZW1lbnRzIGNvbGxlY3Rpb25cbiAgICAgICAgZGVsZXRlIGZyb21Ob2Rlc0xvb2t1cFt0b0VsS2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjaGlsZHJlbk9ubHkpIHtcbiAgICAgICAgLy8gb3B0aW9uYWxcbiAgICAgICAgdmFyIGJlZm9yZVVwZGF0ZVJlc3VsdCA9IG9uQmVmb3JlRWxVcGRhdGVkKGZyb21FbCwgdG9FbCk7XG4gICAgICAgIGlmIChiZWZvcmVVcGRhdGVSZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKGJlZm9yZVVwZGF0ZVJlc3VsdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgZnJvbUVsID0gYmVmb3JlVXBkYXRlUmVzdWx0O1xuICAgICAgICAgIC8vIHJlaW5kZXggdGhlIG5ldyBmcm9tRWwgaW4gY2FzZSBpdCdzIG5vdCBpbiB0aGUgc2FtZVxuICAgICAgICAgIC8vIHRyZWUgYXMgdGhlIG9yaWdpbmFsIGZyb21FbFxuICAgICAgICAgIC8vIChQaG9lbml4IExpdmVWaWV3IHNvbWV0aW1lcyByZXR1cm5zIGEgY2xvbmVkIHRyZWUsXG4gICAgICAgICAgLy8gIGJ1dCBrZXllZCBsb29rdXBzIHdvdWxkIHN0aWxsIHBvaW50IHRvIHRoZSBvcmlnaW5hbCB0cmVlKVxuICAgICAgICAgIGluZGV4VHJlZShmcm9tRWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGF0dHJpYnV0ZXMgb24gb3JpZ2luYWwgRE9NIGVsZW1lbnQgZmlyc3RcbiAgICAgICAgbW9ycGhBdHRycyhmcm9tRWwsIHRvRWwpO1xuICAgICAgICAvLyBvcHRpb25hbFxuICAgICAgICBvbkVsVXBkYXRlZChmcm9tRWwpO1xuXG4gICAgICAgIGlmIChvbkJlZm9yZUVsQ2hpbGRyZW5VcGRhdGVkKGZyb21FbCwgdG9FbCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmcm9tRWwubm9kZU5hbWUgIT09ICdURVhUQVJFQScpIHtcbiAgICAgICAgbW9ycGhDaGlsZHJlbihmcm9tRWwsIHRvRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BlY2lhbEVsSGFuZGxlcnMuVEVYVEFSRUEoZnJvbUVsLCB0b0VsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3JwaENoaWxkcmVuKGZyb21FbCwgdG9FbCkge1xuICAgICAgdmFyIHNraXBGcm9tID0gc2tpcEZyb21DaGlsZHJlbihmcm9tRWwsIHRvRWwpO1xuICAgICAgdmFyIGN1clRvTm9kZUNoaWxkID0gdG9FbC5maXJzdENoaWxkO1xuICAgICAgdmFyIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDtcbiAgICAgIHZhciBjdXJUb05vZGVLZXk7XG4gICAgICB2YXIgY3VyRnJvbU5vZGVLZXk7XG5cbiAgICAgIHZhciBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICB2YXIgdG9OZXh0U2libGluZztcbiAgICAgIHZhciBtYXRjaGluZ0Zyb21FbDtcblxuICAgICAgLy8gd2FsayB0aGUgY2hpbGRyZW5cbiAgICAgIG91dGVyOiB3aGlsZSAoY3VyVG9Ob2RlQ2hpbGQpIHtcbiAgICAgICAgdG9OZXh0U2libGluZyA9IGN1clRvTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICBjdXJUb05vZGVLZXkgPSBnZXROb2RlS2V5KGN1clRvTm9kZUNoaWxkKTtcblxuICAgICAgICAvLyB3YWxrIHRoZSBmcm9tTm9kZSBjaGlsZHJlbiBhbGwgdGhlIHdheSB0aHJvdWdoXG4gICAgICAgIHdoaWxlICghc2tpcEZyb20gJiYgY3VyRnJvbU5vZGVDaGlsZCkge1xuICAgICAgICAgIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICBpZiAoY3VyVG9Ob2RlQ2hpbGQuaXNTYW1lTm9kZSAmJiBjdXJUb05vZGVDaGlsZC5pc1NhbWVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQpKSB7XG4gICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VyRnJvbU5vZGVLZXkgPSBnZXROb2RlS2V5KGN1ckZyb21Ob2RlQ2hpbGQpO1xuXG4gICAgICAgICAgdmFyIGN1ckZyb21Ob2RlVHlwZSA9IGN1ckZyb21Ob2RlQ2hpbGQubm9kZVR5cGU7XG5cbiAgICAgICAgICAvLyB0aGlzIG1lYW5zIGlmIHRoZSBjdXJGcm9tTm9kZUNoaWxkIGRvZXNudCBoYXZlIGEgbWF0Y2ggd2l0aCB0aGUgY3VyVG9Ob2RlQ2hpbGRcbiAgICAgICAgICB2YXIgaXNDb21wYXRpYmxlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGN1ckZyb21Ob2RlVHlwZSA9PT0gY3VyVG9Ob2RlQ2hpbGQubm9kZVR5cGUpIHtcbiAgICAgICAgICAgIGlmIChjdXJGcm9tTm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAvLyBCb3RoIG5vZGVzIGJlaW5nIGNvbXBhcmVkIGFyZSBFbGVtZW50IG5vZGVzXG5cbiAgICAgICAgICAgICAgaWYgKGN1clRvTm9kZUtleSkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSB0YXJnZXQgbm9kZSBoYXMgYSBrZXkgc28gd2Ugd2FudCB0byBtYXRjaCBpdCB1cCB3aXRoIHRoZSBjb3JyZWN0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAvLyBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWVcbiAgICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlS2V5ICE9PSBjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgICAgICAgLy8gVGhlIGN1cnJlbnQgZWxlbWVudCBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUgZG9lcyBub3QgaGF2ZSBhIG1hdGNoaW5nIGtleSBzb1xuICAgICAgICAgICAgICAgICAgLy8gbGV0J3MgY2hlY2sgb3VyIGxvb2t1cCB0byBzZWUgaWYgdGhlcmUgaXMgYSBtYXRjaGluZyBlbGVtZW50IGluIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgICAgICAgLy8gRE9NIHRyZWVcbiAgICAgICAgICAgICAgICAgIGlmICgobWF0Y2hpbmdGcm9tRWwgPSBmcm9tTm9kZXNMb29rdXBbY3VyVG9Ob2RlS2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyb21OZXh0U2libGluZyA9PT0gbWF0Y2hpbmdGcm9tRWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHNpbmdsZSBlbGVtZW50IHJlbW92YWxzLiBUbyBhdm9pZCByZW1vdmluZyB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgICAgICAgICAgICAvLyBET00gbm9kZSBvdXQgb2YgdGhlIHRyZWUgKHNpbmNlIHRoYXQgY2FuIGJyZWFrIENTUyB0cmFuc2l0aW9ucywgZXRjLiksXG4gICAgICAgICAgICAgICAgICAgICAgLy8gd2Ugd2lsbCBpbnN0ZWFkIGRpc2NhcmQgdGhlIGN1cnJlbnQgbm9kZSBhbmQgd2FpdCB1bnRpbCB0aGUgbmV4dFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGlvbiB0byBwcm9wZXJseSBtYXRjaCB1cCB0aGUga2V5ZWQgdGFyZ2V0IGVsZW1lbnQgd2l0aCBpdHMgbWF0Y2hpbmdcbiAgICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50IGluIHRoZSBvcmlnaW5hbCB0cmVlXG4gICAgICAgICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gV2UgZm91bmQgYSBtYXRjaGluZyBrZXllZCBlbGVtZW50IHNvbWV3aGVyZSBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gTGV0J3MgbW92ZSB0aGUgb3JpZ2luYWwgRE9NIG5vZGUgaW50byB0aGUgY3VycmVudCBwb3NpdGlvbiBhbmQgbW9ycGhcbiAgICAgICAgICAgICAgICAgICAgICAvLyBpdC5cblxuICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IFdlIHVzZSBpbnNlcnRCZWZvcmUgaW5zdGVhZCBvZiByZXBsYWNlQ2hpbGQgYmVjYXVzZSB3ZSB3YW50IHRvIGdvIHRocm91Z2hcbiAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYHJlbW92ZU5vZGUoKWAgZnVuY3Rpb24gZm9yIHRoZSBub2RlIHRoYXQgaXMgYmVpbmcgZGlzY2FyZGVkIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICAvLyBhbGwgbGlmZWN5Y2xlIGhvb2tzIGFyZSBjb3JyZWN0bHkgaW52b2tlZFxuICAgICAgICAgICAgICAgICAgICAgIGZyb21FbC5pbnNlcnRCZWZvcmUobWF0Y2hpbmdGcm9tRWwsIGN1ckZyb21Ob2RlQ2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gZnJvbU5leHRTaWJsaW5nID0gY3VyRnJvbU5vZGVDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2luY2UgdGhlIG5vZGUgaXMga2V5ZWQgaXQgbWlnaHQgYmUgbWF0Y2hlZCB1cCBsYXRlciBzbyB3ZSBkZWZlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGFjdHVhbCByZW1vdmFsIHRvIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgdHJ1ZSAvKiBza2lwIGtleWVkIG5vZGVzICovKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gbWF0Y2hpbmdGcm9tRWw7XG4gICAgICAgICAgICAgICAgICAgICAgY3VyRnJvbU5vZGVLZXkgPSBnZXROb2RlS2V5KGN1ckZyb21Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbm9kZXMgYXJlIG5vdCBjb21wYXRpYmxlIHNpbmNlIHRoZSBcInRvXCIgbm9kZSBoYXMgYSBrZXkgYW5kIHRoZXJlXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIG5vIG1hdGNoaW5nIGtleWVkIG5vZGUgaW4gdGhlIHNvdXJjZSB0cmVlXG4gICAgICAgICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBvcmlnaW5hbCBoYXMgYSBrZXlcbiAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IGlzQ29tcGF0aWJsZSAhPT0gZmFsc2UgJiYgY29tcGFyZU5vZGVOYW1lcyhjdXJGcm9tTm9kZUNoaWxkLCBjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgICAgIGlmIChpc0NvbXBhdGlibGUpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBmb3VuZCBjb21wYXRpYmxlIERPTSBlbGVtZW50cyBzbyB0cmFuc2Zvcm1cbiAgICAgICAgICAgICAgICAvLyB0aGUgY3VycmVudCBcImZyb21cIiBub2RlIHRvIG1hdGNoIHRoZSBjdXJyZW50XG4gICAgICAgICAgICAgICAgLy8gdGFyZ2V0IERPTSBub2RlLlxuICAgICAgICAgICAgICAgIC8vIE1PUlBIXG4gICAgICAgICAgICAgICAgbW9ycGhFbChjdXJGcm9tTm9kZUNoaWxkLCBjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJGcm9tTm9kZVR5cGUgPT09IFRFWFRfTk9ERSB8fCBjdXJGcm9tTm9kZVR5cGUgPT0gQ09NTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgIC8vIEJvdGggbm9kZXMgYmVpbmcgY29tcGFyZWQgYXJlIFRleHQgb3IgQ29tbWVudCBub2Rlc1xuICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAvLyBTaW1wbHkgdXBkYXRlIG5vZGVWYWx1ZSBvbiB0aGUgb3JpZ2luYWwgbm9kZSB0b1xuICAgICAgICAgICAgICAvLyBjaGFuZ2UgdGhlIHRleHQgdmFsdWVcbiAgICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlQ2hpbGQubm9kZVZhbHVlICE9PSBjdXJUb05vZGVDaGlsZC5ub2RlVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkLm5vZGVWYWx1ZSA9IGN1clRvTm9kZUNoaWxkLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzQ29tcGF0aWJsZSkge1xuICAgICAgICAgICAgLy8gQWR2YW5jZSBib3RoIHRoZSBcInRvXCIgY2hpbGQgYW5kIHRoZSBcImZyb21cIiBjaGlsZCBzaW5jZSB3ZSBmb3VuZCBhIG1hdGNoXG4gICAgICAgICAgICAvLyBOb3RoaW5nIGVsc2UgdG8gZG8gYXMgd2UgYWxyZWFkeSByZWN1cnNpdmVseSBjYWxsZWQgbW9ycGhDaGlsZHJlbiBhYm92ZVxuICAgICAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSB0b05leHRTaWJsaW5nO1xuICAgICAgICAgICAgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21OZXh0U2libGluZztcbiAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE5vIGNvbXBhdGlibGUgbWF0Y2ggc28gcmVtb3ZlIHRoZSBvbGQgbm9kZSBmcm9tIHRoZSBET00gYW5kIGNvbnRpbnVlIHRyeWluZyB0byBmaW5kIGFcbiAgICAgICAgICAvLyBtYXRjaCBpbiB0aGUgb3JpZ2luYWwgRE9NLiBIb3dldmVyLCB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIGZyb20gbm9kZSBpcyBub3Qga2V5ZWRcbiAgICAgICAgICAvLyBzaW5jZSBpdCBpcyBwb3NzaWJsZSB0aGF0IGEga2V5ZWQgbm9kZSBtaWdodCBtYXRjaCB1cCB3aXRoIGEgbm9kZSBzb21ld2hlcmUgZWxzZSBpbiB0aGVcbiAgICAgICAgICAvLyB0YXJnZXQgdHJlZSBhbmQgd2UgZG9uJ3Qgd2FudCB0byBkaXNjYXJkIGl0IGp1c3QgeWV0IHNpbmNlIGl0IHN0aWxsIG1pZ2h0IGZpbmQgYVxuICAgICAgICAgIC8vIGhvbWUgaW4gdGhlIGZpbmFsIERPTSB0cmVlLiBBZnRlciBldmVyeXRoaW5nIGlzIGRvbmUgd2Ugd2lsbCByZW1vdmUgYW55IGtleWVkIG5vZGVzXG4gICAgICAgICAgLy8gdGhhdCBkaWRuJ3QgZmluZCBhIGhvbWVcbiAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVLZXkpIHtcbiAgICAgICAgICAgIC8vIFNpbmNlIHRoZSBub2RlIGlzIGtleWVkIGl0IG1pZ2h0IGJlIG1hdGNoZWQgdXAgbGF0ZXIgc28gd2UgZGVmZXJcbiAgICAgICAgICAgIC8vIHRoZSBhY3R1YWwgcmVtb3ZhbCB0byBsYXRlclxuICAgICAgICAgICAgYWRkS2V5ZWRSZW1vdmFsKGN1ckZyb21Ob2RlS2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTk9URTogd2Ugc2tpcCBuZXN0ZWQga2V5ZWQgbm9kZXMgZnJvbSBiZWluZyByZW1vdmVkIHNpbmNlIHRoZXJlIGlzXG4gICAgICAgICAgICAvLyAgICAgICBzdGlsbCBhIGNoYW5jZSB0aGV5IHdpbGwgYmUgbWF0Y2hlZCB1cCBsYXRlclxuICAgICAgICAgICAgcmVtb3ZlTm9kZShjdXJGcm9tTm9kZUNoaWxkLCBmcm9tRWwsIHRydWUgLyogc2tpcCBrZXllZCBub2RlcyAqLyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21OZXh0U2libGluZztcbiAgICAgICAgfSAvLyBFTkQ6IHdoaWxlKGN1ckZyb21Ob2RlQ2hpbGQpIHt9XG5cbiAgICAgICAgLy8gSWYgd2UgZ290IHRoaXMgZmFyIHRoZW4gd2UgZGlkIG5vdCBmaW5kIGEgY2FuZGlkYXRlIG1hdGNoIGZvclxuICAgICAgICAvLyBvdXIgXCJ0byBub2RlXCIgYW5kIHdlIGV4aGF1c3RlZCBhbGwgb2YgdGhlIGNoaWxkcmVuIFwiZnJvbVwiXG4gICAgICAgIC8vIG5vZGVzLiBUaGVyZWZvcmUsIHdlIHdpbGwganVzdCBhcHBlbmQgdGhlIGN1cnJlbnQgXCJ0b1wiIG5vZGVcbiAgICAgICAgLy8gdG8gdGhlIGVuZFxuICAgICAgICBpZiAoY3VyVG9Ob2RlS2V5ICYmIChtYXRjaGluZ0Zyb21FbCA9IGZyb21Ob2Rlc0xvb2t1cFtjdXJUb05vZGVLZXldKSAmJiBjb21wYXJlTm9kZU5hbWVzKG1hdGNoaW5nRnJvbUVsLCBjdXJUb05vZGVDaGlsZCkpIHtcbiAgICAgICAgICAvLyBNT1JQSFxuICAgICAgICAgIGlmKCFza2lwRnJvbSl7IGFkZENoaWxkKGZyb21FbCwgbWF0Y2hpbmdGcm9tRWwpOyB9XG4gICAgICAgICAgbW9ycGhFbChtYXRjaGluZ0Zyb21FbCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCA9IG9uQmVmb3JlTm9kZUFkZGVkKGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICBpZiAob25CZWZvcmVOb2RlQWRkZWRSZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAob25CZWZvcmVOb2RlQWRkZWRSZXN1bHQpIHtcbiAgICAgICAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSBvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN1clRvTm9kZUNoaWxkLmFjdHVhbGl6ZSkge1xuICAgICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IGN1clRvTm9kZUNoaWxkLmFjdHVhbGl6ZShmcm9tRWwub3duZXJEb2N1bWVudCB8fCBkb2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkQ2hpbGQoZnJvbUVsLCBjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgICBoYW5kbGVOb2RlQWRkZWQoY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGN1clRvTm9kZUNoaWxkID0gdG9OZXh0U2libGluZztcbiAgICAgICAgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21OZXh0U2libGluZztcbiAgICAgIH1cblxuICAgICAgY2xlYW51cEZyb21FbChmcm9tRWwsIGN1ckZyb21Ob2RlQ2hpbGQsIGN1ckZyb21Ob2RlS2V5KTtcblxuICAgICAgdmFyIHNwZWNpYWxFbEhhbmRsZXIgPSBzcGVjaWFsRWxIYW5kbGVyc1tmcm9tRWwubm9kZU5hbWVdO1xuICAgICAgaWYgKHNwZWNpYWxFbEhhbmRsZXIpIHtcbiAgICAgICAgc3BlY2lhbEVsSGFuZGxlcihmcm9tRWwsIHRvRWwpO1xuICAgICAgfVxuICAgIH0gLy8gRU5EOiBtb3JwaENoaWxkcmVuKC4uLilcblxuICAgIHZhciBtb3JwaGVkTm9kZSA9IGZyb21Ob2RlO1xuICAgIHZhciBtb3JwaGVkTm9kZVR5cGUgPSBtb3JwaGVkTm9kZS5ub2RlVHlwZTtcbiAgICB2YXIgdG9Ob2RlVHlwZSA9IHRvTm9kZS5ub2RlVHlwZTtcblxuICAgIGlmICghY2hpbGRyZW5Pbmx5KSB7XG4gICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgd2UgYXJlIGdpdmVuIHR3byBET00gbm9kZXMgdGhhdCBhcmUgbm90XG4gICAgICAvLyBjb21wYXRpYmxlIChlLmcuIDxkaXY+IC0tPiA8c3Bhbj4gb3IgPGRpdj4gLS0+IFRFWFQpXG4gICAgICBpZiAobW9ycGhlZE5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgaWYgKHRvTm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgIGlmICghY29tcGFyZU5vZGVOYW1lcyhmcm9tTm9kZSwgdG9Ob2RlKSkge1xuICAgICAgICAgICAgb25Ob2RlRGlzY2FyZGVkKGZyb21Ob2RlKTtcbiAgICAgICAgICAgIG1vcnBoZWROb2RlID0gbW92ZUNoaWxkcmVuKGZyb21Ob2RlLCBjcmVhdGVFbGVtZW50TlModG9Ob2RlLm5vZGVOYW1lLCB0b05vZGUubmFtZXNwYWNlVVJJKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEdvaW5nIGZyb20gYW4gZWxlbWVudCBub2RlIHRvIGEgdGV4dCBub2RlXG4gICAgICAgICAgbW9ycGhlZE5vZGUgPSB0b05vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobW9ycGhlZE5vZGVUeXBlID09PSBURVhUX05PREUgfHwgbW9ycGhlZE5vZGVUeXBlID09PSBDT01NRU5UX05PREUpIHsgLy8gVGV4dCBvciBjb21tZW50IG5vZGVcbiAgICAgICAgaWYgKHRvTm9kZVR5cGUgPT09IG1vcnBoZWROb2RlVHlwZSkge1xuICAgICAgICAgIGlmIChtb3JwaGVkTm9kZS5ub2RlVmFsdWUgIT09IHRvTm9kZS5ub2RlVmFsdWUpIHtcbiAgICAgICAgICAgIG1vcnBoZWROb2RlLm5vZGVWYWx1ZSA9IHRvTm9kZS5ub2RlVmFsdWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG1vcnBoZWROb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRleHQgbm9kZSB0byBzb21ldGhpbmcgZWxzZVxuICAgICAgICAgIG1vcnBoZWROb2RlID0gdG9Ob2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vcnBoZWROb2RlID09PSB0b05vZGUpIHtcbiAgICAgIC8vIFRoZSBcInRvIG5vZGVcIiB3YXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgXCJmcm9tIG5vZGVcIiBzbyB3ZSBoYWQgdG9cbiAgICAgIC8vIHRvc3Mgb3V0IHRoZSBcImZyb20gbm9kZVwiIGFuZCB1c2UgdGhlIFwidG8gbm9kZVwiXG4gICAgICBvbk5vZGVEaXNjYXJkZWQoZnJvbU5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodG9Ob2RlLmlzU2FtZU5vZGUgJiYgdG9Ob2RlLmlzU2FtZU5vZGUobW9ycGhlZE5vZGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbW9ycGhFbChtb3JwaGVkTm9kZSwgdG9Ob2RlLCBjaGlsZHJlbk9ubHkpO1xuXG4gICAgICAvLyBXZSBub3cgbmVlZCB0byBsb29wIG92ZXIgYW55IGtleWVkIG5vZGVzIHRoYXQgbWlnaHQgbmVlZCB0byBiZVxuICAgICAgLy8gcmVtb3ZlZC4gV2Ugb25seSBkbyB0aGUgcmVtb3ZhbCBpZiB3ZSBrbm93IHRoYXQgdGhlIGtleWVkIG5vZGVcbiAgICAgIC8vIG5ldmVyIGZvdW5kIGEgbWF0Y2guIFdoZW4gYSBrZXllZCBub2RlIGlzIG1hdGNoZWQgdXAgd2UgcmVtb3ZlXG4gICAgICAvLyBpdCBvdXQgb2YgZnJvbU5vZGVzTG9va3VwIGFuZCB3ZSB1c2UgZnJvbU5vZGVzTG9va3VwIHRvIGRldGVybWluZVxuICAgICAgLy8gaWYgYSBrZXllZCBub2RlIGhhcyBiZWVuIG1hdGNoZWQgdXAgb3Igbm90XG4gICAgICBpZiAoa2V5ZWRSZW1vdmFsTGlzdCkge1xuICAgICAgICBmb3IgKHZhciBpPTAsIGxlbj1rZXllZFJlbW92YWxMaXN0Lmxlbmd0aDsgaTxsZW47IGkrKykge1xuICAgICAgICAgIHZhciBlbFRvUmVtb3ZlID0gZnJvbU5vZGVzTG9va3VwW2tleWVkUmVtb3ZhbExpc3RbaV1dO1xuICAgICAgICAgIGlmIChlbFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICByZW1vdmVOb2RlKGVsVG9SZW1vdmUsIGVsVG9SZW1vdmUucGFyZW50Tm9kZSwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghY2hpbGRyZW5Pbmx5ICYmIG1vcnBoZWROb2RlICE9PSBmcm9tTm9kZSAmJiBmcm9tTm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICBpZiAobW9ycGhlZE5vZGUuYWN0dWFsaXplKSB7XG4gICAgICAgIG1vcnBoZWROb2RlID0gbW9ycGhlZE5vZGUuYWN0dWFsaXplKGZyb21Ob2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jKTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHdlIGhhZCB0byBzd2FwIG91dCB0aGUgZnJvbSBub2RlIHdpdGggYSBuZXcgbm9kZSBiZWNhdXNlIHRoZSBvbGRcbiAgICAgIC8vIG5vZGUgd2FzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIHRhcmdldCBub2RlIHRoZW4gd2UgbmVlZCB0b1xuICAgICAgLy8gcmVwbGFjZSB0aGUgb2xkIERPTSBub2RlIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZS4gVGhpcyBpcyBvbmx5XG4gICAgICAvLyBwb3NzaWJsZSBpZiB0aGUgb3JpZ2luYWwgRE9NIG5vZGUgd2FzIHBhcnQgb2YgYSBET00gdHJlZSB3aGljaFxuICAgICAgLy8gd2Uga25vdyBpcyB0aGUgY2FzZSBpZiBpdCBoYXMgYSBwYXJlbnQgbm9kZS5cbiAgICAgIGZyb21Ob2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG1vcnBoZWROb2RlLCBmcm9tTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vcnBoZWROb2RlO1xuICB9O1xufVxuXG52YXIgbW9ycGhkb20gPSBtb3JwaGRvbUZhY3RvcnkobW9ycGhBdHRycyk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vcnBoZG9tO1xuIiwgImltcG9ydCB7XG4gIFBIWF9DT01QT05FTlQsXG4gIFBIWF9QUlVORSxcbiAgUEhYX1JPT1RfSUQsXG4gIFBIWF9TRVNTSU9OLFxuICBQSFhfU0tJUCxcbiAgUEhYX01BR0lDX0lELFxuICBQSFhfU1RBVElDLFxuICBQSFhfVFJJR0dFUl9BQ1RJT04sXG4gIFBIWF9VUERBVEUsXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfUkVGX0xPQ0ssXG4gIFBIWF9TVFJFQU0sXG4gIFBIWF9TVFJFQU1fUkVGLFxuICBQSFhfVklFV1BPUlRfVE9QLFxuICBQSFhfVklFV1BPUlRfQk9UVE9NLFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBkZXRlY3REdXBsaWNhdGVJZHMsXG4gIGRldGVjdEludmFsaWRTdHJlYW1JbnNlcnRzLFxuICBpc0NpZFxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBET01Qb3N0TW9ycGhSZXN0b3JlciBmcm9tIFwiLi9kb21fcG9zdF9tb3JwaF9yZXN0b3JlclwiXG5pbXBvcnQgbW9ycGhkb20gZnJvbSBcIm1vcnBoZG9tXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRE9NUGF0Y2gge1xuICBjb25zdHJ1Y3Rvcih2aWV3LCBjb250YWluZXIsIGlkLCBodG1sLCBzdHJlYW1zLCB0YXJnZXRDSUQsIG9wdHM9e30pe1xuICAgIHRoaXMudmlldyA9IHZpZXdcbiAgICB0aGlzLmxpdmVTb2NrZXQgPSB2aWV3LmxpdmVTb2NrZXRcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lclxuICAgIHRoaXMuaWQgPSBpZFxuICAgIHRoaXMucm9vdElEID0gdmlldy5yb290LmlkXG4gICAgdGhpcy5odG1sID0gaHRtbFxuICAgIHRoaXMuc3RyZWFtcyA9IHN0cmVhbXNcbiAgICB0aGlzLnN0cmVhbUluc2VydHMgPSB7fVxuICAgIHRoaXMuc3RyZWFtQ29tcG9uZW50UmVzdG9yZSA9IHt9XG4gICAgdGhpcy50YXJnZXRDSUQgPSB0YXJnZXRDSURcbiAgICB0aGlzLmNpZFBhdGNoID0gaXNDaWQodGhpcy50YXJnZXRDSUQpXG4gICAgdGhpcy5wZW5kaW5nUmVtb3ZlcyA9IFtdXG4gICAgdGhpcy5waHhSZW1vdmUgPSB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhcInJlbW92ZVwiKVxuICAgIHRoaXMudGFyZ2V0Q29udGFpbmVyID0gdGhpcy5pc0NJRFBhdGNoKCkgPyB0aGlzLnRhcmdldENJRENvbnRhaW5lcihodG1sKSA6IGNvbnRhaW5lclxuICAgIHRoaXMuY2FsbGJhY2tzID0ge1xuICAgICAgYmVmb3JlYWRkZWQ6IFtdLCBiZWZvcmV1cGRhdGVkOiBbXSwgYmVmb3JlcGh4Q2hpbGRBZGRlZDogW10sXG4gICAgICBhZnRlcmFkZGVkOiBbXSwgYWZ0ZXJ1cGRhdGVkOiBbXSwgYWZ0ZXJkaXNjYXJkZWQ6IFtdLCBhZnRlcnBoeENoaWxkQWRkZWQ6IFtdLFxuICAgICAgYWZ0ZXJ0cmFuc2l0aW9uc0Rpc2NhcmRlZDogW11cbiAgICB9XG4gICAgdGhpcy53aXRoQ2hpbGRyZW4gPSBvcHRzLndpdGhDaGlsZHJlbiB8fCBvcHRzLnVuZG9SZWYgfHwgZmFsc2VcbiAgICB0aGlzLnVuZG9SZWYgPSBvcHRzLnVuZG9SZWZcbiAgfVxuXG4gIGJlZm9yZShraW5kLCBjYWxsYmFjayl7IHRoaXMuY2FsbGJhY2tzW2BiZWZvcmUke2tpbmR9YF0ucHVzaChjYWxsYmFjaykgfVxuICBhZnRlcihraW5kLCBjYWxsYmFjayl7IHRoaXMuY2FsbGJhY2tzW2BhZnRlciR7a2luZH1gXS5wdXNoKGNhbGxiYWNrKSB9XG5cbiAgdHJhY2tCZWZvcmUoa2luZCwgLi4uYXJncyl7XG4gICAgdGhpcy5jYWxsYmFja3NbYGJlZm9yZSR7a2luZH1gXS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKC4uLmFyZ3MpKVxuICB9XG5cbiAgdHJhY2tBZnRlcihraW5kLCAuLi5hcmdzKXtcbiAgICB0aGlzLmNhbGxiYWNrc1tgYWZ0ZXIke2tpbmR9YF0uZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayguLi5hcmdzKSlcbiAgfVxuXG4gIG1hcmtQcnVuYWJsZUNvbnRlbnRGb3JSZW1vdmFsKCl7XG4gICAgbGV0IHBoeFVwZGF0ZSA9IHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9VUERBVEUpXG4gICAgRE9NLmFsbCh0aGlzLmNvbnRhaW5lciwgYFske3BoeFVwZGF0ZX09YXBwZW5kXSA+ICosIFske3BoeFVwZGF0ZX09cHJlcGVuZF0gPiAqYCwgZWwgPT4ge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFBIWF9QUlVORSwgXCJcIilcbiAgICB9KVxuICB9XG5cbiAgcGVyZm9ybShpc0pvaW5QYXRjaCl7XG4gICAgbGV0IHt2aWV3LCBsaXZlU29ja2V0LCBodG1sLCBjb250YWluZXIsIHRhcmdldENvbnRhaW5lcn0gPSB0aGlzXG4gICAgaWYodGhpcy5pc0NJRFBhdGNoKCkgJiYgIXRhcmdldENvbnRhaW5lcil7IHJldHVybiB9XG5cbiAgICBsZXQgZm9jdXNlZCA9IGxpdmVTb2NrZXQuZ2V0QWN0aXZlRWxlbWVudCgpXG4gICAgbGV0IHtzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kfSA9IGZvY3VzZWQgJiYgRE9NLmhhc1NlbGVjdGlvblJhbmdlKGZvY3VzZWQpID8gZm9jdXNlZCA6IHt9XG4gICAgbGV0IHBoeFVwZGF0ZSA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVVBEQVRFKVxuICAgIGxldCBwaHhWaWV3cG9ydFRvcCA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVklFV1BPUlRfVE9QKVxuICAgIGxldCBwaHhWaWV3cG9ydEJvdHRvbSA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVklFV1BPUlRfQk9UVE9NKVxuICAgIGxldCBwaHhUcmlnZ2VyRXh0ZXJuYWwgPSBsaXZlU29ja2V0LmJpbmRpbmcoUEhYX1RSSUdHRVJfQUNUSU9OKVxuICAgIGxldCBhZGRlZCA9IFtdXG4gICAgbGV0IHVwZGF0ZXMgPSBbXVxuICAgIGxldCBhcHBlbmRQcmVwZW5kVXBkYXRlcyA9IFtdXG5cbiAgICBsZXQgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkID0gbnVsbFxuXG4gICAgZnVuY3Rpb24gbW9ycGgodGFyZ2V0Q29udGFpbmVyLCBzb3VyY2UsIHdpdGhDaGlsZHJlbj10aGlzLndpdGhDaGlsZHJlbil7XG4gICAgICBsZXQgbW9ycGhDYWxsYmFja3MgPSB7XG4gICAgICAgIC8vIG5vcm1hbGx5LCB3ZSBhcmUgcnVubmluZyB3aXRoIGNoaWxkcmVuT25seSwgYXMgdGhlIHBhdGNoIEhUTUwgZm9yIGEgTFZcbiAgICAgICAgLy8gZG9lcyBub3QgaW5jbHVkZSB0aGUgTFYgYXR0cnMgKGRhdGEtcGh4LXNlc3Npb24sIGV0Yy4pXG4gICAgICAgIC8vIHdoZW4gd2UgYXJlIHBhdGNoaW5nIGEgbGl2ZSBjb21wb25lbnQsIHdlIGRvIHdhbnQgdG8gcGF0Y2ggdGhlIHJvb3QgZWxlbWVudCBhcyB3ZWxsO1xuICAgICAgICAvLyBhbm90aGVyIGNhc2UgaXMgdGhlIHJlY3Vyc2l2ZSBwYXRjaCBvZiBhIHN0cmVhbSBpdGVtIHRoYXQgd2FzIGtlcHQgb24gcmVzZXQgKC0+IG9uQmVmb3JlTm9kZUFkZGVkKVxuICAgICAgICBjaGlsZHJlbk9ubHk6IHRhcmdldENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCkgPT09IG51bGwgJiYgIXdpdGhDaGlsZHJlbixcbiAgICAgICAgZ2V0Tm9kZUtleTogKG5vZGUpID0+IHtcbiAgICAgICAgICBpZihET00uaXNQaHhEZXN0cm95ZWQobm9kZSkpeyByZXR1cm4gbnVsbCB9XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGpvaW4gcGF0Y2gsIHRoZW4gYnkgZGVmaW5pdGlvbiB0aGVyZSB3YXMgbm8gUEhYX01BR0lDX0lELlxuICAgICAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IHRvIHJlZHVjZSB0aGUgYW1vdW50IG9mIGVsZW1lbnRzIG1vcnBoZG9tIGRpc2NhcmRzLlxuICAgICAgICAgIGlmKGlzSm9pblBhdGNoKXsgcmV0dXJuIG5vZGUuaWQgfVxuICAgICAgICAgIHJldHVybiBub2RlLmlkIHx8IChub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZShQSFhfTUFHSUNfSUQpKVxuICAgICAgICB9LFxuICAgICAgICAvLyBza2lwIGluZGV4aW5nIGZyb20gY2hpbGRyZW4gd2hlbiBjb250YWluZXIgaXMgc3RyZWFtXG4gICAgICAgIHNraXBGcm9tQ2hpbGRyZW46IChmcm9tKSA9PiB7IHJldHVybiBmcm9tLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpID09PSBQSFhfU1RSRUFNIH0sXG4gICAgICAgIC8vIHRlbGwgbW9ycGhkb20gaG93IHRvIGFkZCBhIGNoaWxkXG4gICAgICAgIGFkZENoaWxkOiAocGFyZW50LCBjaGlsZCkgPT4ge1xuICAgICAgICAgIGxldCB7cmVmLCBzdHJlYW1BdH0gPSB0aGlzLmdldFN0cmVhbUluc2VydChjaGlsZClcbiAgICAgICAgICBpZihyZWYgPT09IHVuZGVmaW5lZCl7IHJldHVybiBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpIH1cblxuICAgICAgICAgIHRoaXMuc2V0U3RyZWFtUmVmKGNoaWxkLCByZWYpXG5cbiAgICAgICAgICAvLyBzdHJlYW1pbmdcbiAgICAgICAgICBpZihzdHJlYW1BdCA9PT0gMCl7XG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJiZWdpblwiLCBjaGlsZClcbiAgICAgICAgICB9IGVsc2UgaWYoc3RyZWFtQXQgPT09IC0xKXtcbiAgICAgICAgICAgIGxldCBsYXN0Q2hpbGQgPSBwYXJlbnQubGFzdEVsZW1lbnRDaGlsZFxuICAgICAgICAgICAgaWYobGFzdENoaWxkICYmICFsYXN0Q2hpbGQuaGFzQXR0cmlidXRlKFBIWF9TVFJFQU1fUkVGKSl7XG4gICAgICAgICAgICAgIGxldCBub25TdHJlYW1DaGlsZCA9IEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKS5maW5kKGMgPT4gIWMuaGFzQXR0cmlidXRlKFBIWF9TVFJFQU1fUkVGKSlcbiAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbm9uU3RyZWFtQ2hpbGQpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmKHN0cmVhbUF0ID4gMCl7XG4gICAgICAgICAgICBsZXQgc2libGluZyA9IEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKVtzdHJlYW1BdF1cbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHNpYmxpbmcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkJlZm9yZU5vZGVBZGRlZDogKGVsKSA9PiB7XG4gICAgICAgICAgRE9NLm1haW50YWluUHJpdmF0ZUhvb2tzKGVsLCBlbCwgcGh4Vmlld3BvcnRUb3AsIHBoeFZpZXdwb3J0Qm90dG9tKVxuICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJhZGRlZFwiLCBlbClcblxuICAgICAgICAgIGxldCBtb3JwaGVkRWwgPSBlbFxuICAgICAgICAgIC8vIHRoaXMgaXMgYSBzdHJlYW0gaXRlbSB0aGF0IHdhcyBrZXB0IG9uIHJlc2V0LCByZWN1cnNpdmVseSBtb3JwaCBpdFxuICAgICAgICAgIGlmKHRoaXMuc3RyZWFtQ29tcG9uZW50UmVzdG9yZVtlbC5pZF0pe1xuICAgICAgICAgICAgbW9ycGhlZEVsID0gdGhpcy5zdHJlYW1Db21wb25lbnRSZXN0b3JlW2VsLmlkXVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3RyZWFtQ29tcG9uZW50UmVzdG9yZVtlbC5pZF1cbiAgICAgICAgICAgIG1vcnBoLmNhbGwodGhpcywgbW9ycGhlZEVsLCBlbCwgdHJ1ZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbW9ycGhlZEVsXG4gICAgICAgIH0sXG4gICAgICAgIG9uTm9kZUFkZGVkOiAoZWwpID0+IHtcbiAgICAgICAgICBpZihlbC5nZXRBdHRyaWJ1dGUpeyB0aGlzLm1heWJlUmVPcmRlclN0cmVhbShlbCwgdHJ1ZSkgfVxuXG4gICAgICAgICAgLy8gaGFjayB0byBmaXggU2FmYXJpIGhhbmRsaW5nIG9mIGltZyBzcmNzZXQgYW5kIHZpZGVvIHRhZ3NcbiAgICAgICAgICBpZihlbCBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgJiYgZWwuc3Jjc2V0KXtcbiAgICAgICAgICAgIGVsLnNyY3NldCA9IGVsLnNyY3NldFxuICAgICAgICAgIH0gZWxzZSBpZihlbCBpbnN0YW5jZW9mIEhUTUxWaWRlb0VsZW1lbnQgJiYgZWwuYXV0b3BsYXkpe1xuICAgICAgICAgICAgZWwucGxheSgpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKERPTS5pc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWwoZWwsIHBoeFRyaWdnZXJFeHRlcm5hbCkpe1xuICAgICAgICAgICAgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkID0gZWxcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBuZXN0ZWQgdmlldyBoYW5kbGluZ1xuICAgICAgICAgIGlmKChET00uaXNQaHhDaGlsZChlbCkgJiYgdmlldy5vd25zRWxlbWVudChlbCkpIHx8IERPTS5pc1BoeFN0aWNreShlbCkgJiYgdmlldy5vd25zRWxlbWVudChlbC5wYXJlbnROb2RlKSl7XG4gICAgICAgICAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJwaHhDaGlsZEFkZGVkXCIsIGVsKVxuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRlZC5wdXNoKGVsKVxuICAgICAgICB9LFxuICAgICAgICBvbk5vZGVEaXNjYXJkZWQ6IChlbCkgPT4gdGhpcy5vbk5vZGVEaXNjYXJkZWQoZWwpLFxuICAgICAgICBvbkJlZm9yZU5vZGVEaXNjYXJkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1BSVU5FKSAhPT0gbnVsbCl7IHJldHVybiB0cnVlIH1cbiAgICAgICAgICBpZihlbC5wYXJlbnRFbGVtZW50ICE9PSBudWxsICYmIGVsLmlkICYmXG4gICAgICAgICAgICBET00uaXNQaHhVcGRhdGUoZWwucGFyZW50RWxlbWVudCwgcGh4VXBkYXRlLCBbUEhYX1NUUkVBTSwgXCJhcHBlbmRcIiwgXCJwcmVwZW5kXCJdKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYodGhpcy5tYXliZVBlbmRpbmdSZW1vdmUoZWwpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICBpZih0aGlzLnNraXBDSURTaWJsaW5nKGVsKSl7IHJldHVybiBmYWxzZSB9XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBvbkVsVXBkYXRlZDogKGVsKSA9PiB7XG4gICAgICAgICAgaWYoRE9NLmlzTm93VHJpZ2dlckZvcm1FeHRlcm5hbChlbCwgcGh4VHJpZ2dlckV4dGVybmFsKSl7XG4gICAgICAgICAgICBleHRlcm5hbEZvcm1UcmlnZ2VyZWQgPSBlbFxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVzLnB1c2goZWwpXG4gICAgICAgICAgdGhpcy5tYXliZVJlT3JkZXJTdHJlYW0oZWwsIGZhbHNlKVxuICAgICAgICB9LFxuICAgICAgICBvbkJlZm9yZUVsVXBkYXRlZDogKGZyb21FbCwgdG9FbCkgPT4ge1xuICAgICAgICAgIC8vIGlmIHdlIGFyZSBwYXRjaGluZyB0aGUgcm9vdCB0YXJnZXQgY29udGFpbmVyIGFuZCB0aGUgaWQgaGFzIGNoYW5nZWQsIHRyZWF0IGl0IGFzIGEgbmV3IG5vZGVcbiAgICAgICAgICAvLyBieSByZXBsYWNpbmcgdGhlIGZyb21FbCB3aXRoIHRoZSB0b0VsLCB3aGljaCBlbnN1cmVzIGhvb2tzIGFyZSB0b3JuIGRvd24gYW5kIHJlLWNyZWF0ZWRcbiAgICAgICAgICBpZihmcm9tRWwuaWQgJiYgZnJvbUVsLmlzU2FtZU5vZGUodGFyZ2V0Q29udGFpbmVyKSAmJiBmcm9tRWwuaWQgIT09IHRvRWwuaWQpe1xuICAgICAgICAgICAgbW9ycGhDYWxsYmFja3Mub25Ob2RlRGlzY2FyZGVkKGZyb21FbClcbiAgICAgICAgICAgIGZyb21FbC5yZXBsYWNlV2l0aCh0b0VsKVxuICAgICAgICAgICAgcmV0dXJuIG1vcnBoQ2FsbGJhY2tzLm9uTm9kZUFkZGVkKHRvRWwpXG4gICAgICAgICAgfVxuICAgICAgICAgIERPTS5zeW5jUGVuZGluZ0F0dHJzKGZyb21FbCwgdG9FbClcbiAgICAgICAgICBET00ubWFpbnRhaW5Qcml2YXRlSG9va3MoZnJvbUVsLCB0b0VsLCBwaHhWaWV3cG9ydFRvcCwgcGh4Vmlld3BvcnRCb3R0b20pXG4gICAgICAgICAgRE9NLmNsZWFuQ2hpbGROb2Rlcyh0b0VsLCBwaHhVcGRhdGUpXG4gICAgICAgICAgaWYodGhpcy5za2lwQ0lEU2libGluZyh0b0VsKSl7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIGlzIGEgbGl2ZSBjb21wb25lbnQgdXNlZCBpbiBhIHN0cmVhbSwgd2UgbWF5IG5lZWQgdG8gcmVvcmRlciBpdFxuICAgICAgICAgICAgdGhpcy5tYXliZVJlT3JkZXJTdHJlYW0oZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKERPTS5pc1BoeFN0aWNreShmcm9tRWwpKXtcbiAgICAgICAgICAgIFtQSFhfU0VTU0lPTiwgUEhYX1NUQVRJQywgUEhYX1JPT1RfSURdXG4gICAgICAgICAgICAgIC5tYXAoYXR0ciA9PiBbYXR0ciwgZnJvbUVsLmdldEF0dHJpYnV0ZShhdHRyKSwgdG9FbC5nZXRBdHRyaWJ1dGUoYXR0cildKVxuICAgICAgICAgICAgICAuZm9yRWFjaCgoW2F0dHIsIGZyb21WYWwsIHRvVmFsXSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHRvVmFsICYmIGZyb21WYWwgIT09IHRvVmFsKXsgZnJvbUVsLnNldEF0dHJpYnV0ZShhdHRyLCB0b1ZhbCkgfVxuICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoRE9NLmlzSWdub3JlZChmcm9tRWwsIHBoeFVwZGF0ZSkgfHwgKGZyb21FbC5mb3JtICYmIGZyb21FbC5mb3JtLmlzU2FtZU5vZGUoZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkKSkpe1xuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7aXNJZ25vcmVkOiBET00uaXNJZ25vcmVkKGZyb21FbCwgcGh4VXBkYXRlKX0pXG4gICAgICAgICAgICB1cGRhdGVzLnB1c2goZnJvbUVsKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZnJvbUVsLnR5cGUgPT09IFwibnVtYmVyXCIgJiYgKGZyb21FbC52YWxpZGl0eSAmJiBmcm9tRWwudmFsaWRpdHkuYmFkSW5wdXQpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBoYXMgUEhYX1JFRl9TUkMsIGl0IGlzIGxvYWRpbmcgb3IgbG9ja2VkIGFuZCBhd2FpdGluZyBhbiBhY2suXG4gICAgICAgICAgLy8gSWYgaXQncyBsb2NrZWQsIHdlIGNsb25lIHRoZSBmcm9tRWwgdHJlZSBhbmQgaW5zdHJ1Y3QgbW9ycGhkb20gdG8gdXNlXG4gICAgICAgICAgLy8gdGhlIGNsb25lZCB0cmVlIGFzIHRoZSBzb3VyY2Ugb2YgdGhlIG1vcnBoIGZvciB0aGlzIGJyYW5jaCBmcm9tIGhlcmUgb24gb3V0LlxuICAgICAgICAgIC8vIFdlIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIGNsb25lZCB0cmVlIGluIHRoZSBlbGVtZW50J3MgcHJpdmF0ZSBkYXRhLCBhbmRcbiAgICAgICAgICAvLyBvbiBhY2sgKHZpZXcudW5kb1JlZnMpLCB3ZSBtb3JwaCB0aGUgY2xvbmVkIHRyZWUgd2l0aCB0aGUgdHJ1ZSBmcm9tRWwgaW4gdGhlIERPTSB0b1xuICAgICAgICAgIC8vIGFwcGx5IGFueSBjaGFuZ2VzIHRoYXQgaGFwcGVuZWQgd2hpbGUgdGhlIGVsZW1lbnQgd2FzIGxvY2tlZC5cbiAgICAgICAgICBsZXQgaXNGb2N1c2VkRm9ybUVsID0gZm9jdXNlZCAmJiBmcm9tRWwuaXNTYW1lTm9kZShmb2N1c2VkKSAmJiBET00uaXNGb3JtSW5wdXQoZnJvbUVsKVxuICAgICAgICAgIGxldCBmb2N1c2VkU2VsZWN0Q2hhbmdlZCA9IGlzRm9jdXNlZEZvcm1FbCAmJiB0aGlzLmlzQ2hhbmdlZFNlbGVjdChmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgLy8gb25seSBwZXJmb3JtIHRoZSBjbG9uZSBzdGVwIGlmIHRoaXMgaXMgbm90IGEgcGF0Y2ggdGhhdCB1bmxvY2tzXG4gICAgICAgICAgaWYoZnJvbUVsLmhhc0F0dHJpYnV0ZShQSFhfUkVGX1NSQykgJiYgZnJvbUVsLmdldEF0dHJpYnV0ZShQSFhfUkVGX0xPQ0spICE9IHRoaXMudW5kb1JlZil7XG4gICAgICAgICAgICBpZihET00uaXNVcGxvYWRJbnB1dChmcm9tRWwpKXtcbiAgICAgICAgICAgICAgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7aXNJZ25vcmVkOiB0cnVlfSlcbiAgICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgICB1cGRhdGVzLnB1c2goZnJvbUVsKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICBsZXQgaXNMb2NrZWQgPSBmcm9tRWwuaGFzQXR0cmlidXRlKFBIWF9SRUZfTE9DSylcbiAgICAgICAgICAgIGxldCBjbG9uZSA9IGlzTG9ja2VkID8gRE9NLnByaXZhdGUoZnJvbUVsLCBQSFhfUkVGX0xPQ0spIHx8IGZyb21FbC5jbG9uZU5vZGUodHJ1ZSkgOiBudWxsXG4gICAgICAgICAgICBpZihjbG9uZSl7XG4gICAgICAgICAgICAgIERPTS5wdXRQcml2YXRlKGZyb21FbCwgUEhYX1JFRl9MT0NLLCBjbG9uZSlcbiAgICAgICAgICAgICAgaWYoIWlzRm9jdXNlZEZvcm1FbCl7XG4gICAgICAgICAgICAgICAgZnJvbUVsID0gY2xvbmVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIG5lc3RlZCB2aWV3IGhhbmRsaW5nXG4gICAgICAgICAgaWYoRE9NLmlzUGh4Q2hpbGQodG9FbCkpe1xuICAgICAgICAgICAgbGV0IHByZXZTZXNzaW9uID0gZnJvbUVsLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTilcbiAgICAgICAgICAgIERPTS5tZXJnZUF0dHJzKGZyb21FbCwgdG9FbCwge2V4Y2x1ZGU6IFtQSFhfU1RBVElDXX0pXG4gICAgICAgICAgICBpZihwcmV2U2Vzc2lvbiAhPT0gXCJcIil7IGZyb21FbC5zZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04sIHByZXZTZXNzaW9uKSB9XG4gICAgICAgICAgICBmcm9tRWwuc2V0QXR0cmlidXRlKFBIWF9ST09UX0lELCB0aGlzLnJvb3RJRClcbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnMoZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gaW5wdXQgaGFuZGxpbmdcbiAgICAgICAgICBET00uY29weVByaXZhdGVzKHRvRWwsIGZyb21FbClcblxuICAgICAgICAgIC8vIHNraXAgcGF0Y2hpbmcgZm9jdXNlZCBpbnB1dHMgdW5sZXNzIGZvY3VzIGlzIGEgc2VsZWN0IHRoYXQgaGFzIGNoYW5nZWQgb3B0aW9uc1xuICAgICAgICAgIGlmKGlzRm9jdXNlZEZvcm1FbCAmJiBmcm9tRWwudHlwZSAhPT0gXCJoaWRkZW5cIiAmJiAhZm9jdXNlZFNlbGVjdENoYW5nZWQpe1xuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLm1lcmdlRm9jdXNlZElucHV0KGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgIERPTS5zeW5jQXR0cnNUb1Byb3BzKGZyb21FbClcbiAgICAgICAgICAgIHVwZGF0ZXMucHVzaChmcm9tRWwpXG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKGZyb21FbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBibHVyIGZvY3VzZWQgc2VsZWN0IGlmIGl0IGNoYW5nZWQgc28gbmF0aXZlIFVJIGlzIHVwZGF0ZWQgKGllIHNhZmFyaSB3b24ndCB1cGRhdGUgdmlzaWJsZSBvcHRpb25zKVxuICAgICAgICAgICAgaWYoZm9jdXNlZFNlbGVjdENoYW5nZWQpeyBmcm9tRWwuYmx1cigpIH1cbiAgICAgICAgICAgIGlmKERPTS5pc1BoeFVwZGF0ZSh0b0VsLCBwaHhVcGRhdGUsIFtcImFwcGVuZFwiLCBcInByZXBlbmRcIl0pKXtcbiAgICAgICAgICAgICAgYXBwZW5kUHJlcGVuZFVwZGF0ZXMucHVzaChuZXcgRE9NUG9zdE1vcnBoUmVzdG9yZXIoZnJvbUVsLCB0b0VsLCB0b0VsLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpKSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRE9NLnN5bmNBdHRyc1RvUHJvcHModG9FbClcbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnModG9FbClcbiAgICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsIGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgIHJldHVybiBmcm9tRWxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1vcnBoZG9tKHRhcmdldENvbnRhaW5lciwgc291cmNlLCBtb3JwaENhbGxiYWNrcylcbiAgICB9XG5cbiAgICB0aGlzLnRyYWNrQmVmb3JlKFwiYWRkZWRcIiwgY29udGFpbmVyKVxuICAgIHRoaXMudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsIGNvbnRhaW5lciwgY29udGFpbmVyKVxuXG4gICAgbGl2ZVNvY2tldC50aW1lKFwibW9ycGhkb21cIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zdHJlYW1zLmZvckVhY2goKFtyZWYsIGluc2VydHMsIGRlbGV0ZUlkcywgcmVzZXRdKSA9PiB7XG4gICAgICAgIGluc2VydHMuZm9yRWFjaCgoW2tleSwgc3RyZWFtQXQsIGxpbWl0XSkgPT4ge1xuICAgICAgICAgIHRoaXMuc3RyZWFtSW5zZXJ0c1trZXldID0ge3JlZiwgc3RyZWFtQXQsIGxpbWl0LCByZXNldH1cbiAgICAgICAgfSlcbiAgICAgICAgaWYocmVzZXQgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgRE9NLmFsbChjb250YWluZXIsIGBbJHtQSFhfU1RSRUFNX1JFRn09XCIke3JlZn1cIl1gLCBjaGlsZCA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZVN0cmVhbUNoaWxkRWxlbWVudChjaGlsZClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZUlkcy5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgICBsZXQgY2hpbGQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcihgW2lkPVwiJHtpZH1cIl1gKVxuICAgICAgICAgIGlmKGNoaWxkKXsgdGhpcy5yZW1vdmVTdHJlYW1DaGlsZEVsZW1lbnQoY2hpbGQpIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG5cbiAgICAgIC8vIGNsZWFyIHN0cmVhbSBpdGVtcyBmcm9tIHRoZSBkZWFkIHJlbmRlciBpZiB0aGV5IGFyZSBub3QgaW5zZXJ0ZWQgYWdhaW5cbiAgICAgIGlmKGlzSm9pblBhdGNoKXtcbiAgICAgICAgRE9NLmFsbCh0aGlzLmNvbnRhaW5lciwgYFske3BoeFVwZGF0ZX09JHtQSFhfU1RSRUFNfV1gLCBlbCA9PiB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRvIG9ubHkgcmVtb3ZlIGVsZW1lbnRzIG93bmVkIGJ5IHRoZSBjdXJyZW50IHZpZXdcbiAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peF9saXZlX3ZpZXcvaXNzdWVzLzMwNDdcbiAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQub3duZXIoZWwsICh2aWV3KSA9PiB7XG4gICAgICAgICAgICBpZih2aWV3ID09PSB0aGlzLnZpZXcpe1xuICAgICAgICAgICAgICBBcnJheS5mcm9tKGVsLmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVN0cmVhbUNoaWxkRWxlbWVudChjaGlsZClcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBtb3JwaC5jYWxsKHRoaXMsIHRhcmdldENvbnRhaW5lciwgaHRtbClcbiAgICB9KVxuXG4gICAgaWYobGl2ZVNvY2tldC5pc0RlYnVnRW5hYmxlZCgpKXtcbiAgICAgIGRldGVjdER1cGxpY2F0ZUlkcygpXG4gICAgICBkZXRlY3RJbnZhbGlkU3RyZWFtSW5zZXJ0cyh0aGlzLnN0cmVhbUluc2VydHMpXG4gICAgICAvLyB3YXJuIGlmIHRoZXJlIGFyZSBhbnkgaW5wdXRzIG5hbWVkIFwiaWRcIlxuICAgICAgQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1pZF1cIikpLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgIGlmKG5vZGUuZm9ybSl7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkRldGVjdGVkIGFuIGlucHV0IHdpdGggbmFtZT1cXFwiaWRcXFwiIGluc2lkZSBhIGZvcm0hIFRoaXMgd2lsbCBjYXVzZSBwcm9ibGVtcyB3aGVuIHBhdGNoaW5nIHRoZSBET00uXFxuXCIsIG5vZGUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYoYXBwZW5kUHJlcGVuZFVwZGF0ZXMubGVuZ3RoID4gMCl7XG4gICAgICBsaXZlU29ja2V0LnRpbWUoXCJwb3N0LW1vcnBoIGFwcGVuZC9wcmVwZW5kIHJlc3RvcmF0aW9uXCIsICgpID0+IHtcbiAgICAgICAgYXBwZW5kUHJlcGVuZFVwZGF0ZXMuZm9yRWFjaCh1cGRhdGUgPT4gdXBkYXRlLnBlcmZvcm0oKSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgbGl2ZVNvY2tldC5zaWxlbmNlRXZlbnRzKCgpID0+IERPTS5yZXN0b3JlRm9jdXMoZm9jdXNlZCwgc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCkpXG4gICAgRE9NLmRpc3BhdGNoRXZlbnQoZG9jdW1lbnQsIFwicGh4OnVwZGF0ZVwiKVxuICAgIGFkZGVkLmZvckVhY2goZWwgPT4gdGhpcy50cmFja0FmdGVyKFwiYWRkZWRcIiwgZWwpKVxuICAgIHVwZGF0ZXMuZm9yRWFjaChlbCA9PiB0aGlzLnRyYWNrQWZ0ZXIoXCJ1cGRhdGVkXCIsIGVsKSlcblxuICAgIHRoaXMudHJhbnNpdGlvblBlbmRpbmdSZW1vdmVzKClcblxuICAgIGlmKGV4dGVybmFsRm9ybVRyaWdnZXJlZCl7XG4gICAgICBsaXZlU29ja2V0LnVubG9hZCgpXG4gICAgICAvLyB1c2UgcHJvdG90eXBlJ3Mgc3VibWl0IGluIGNhc2UgdGhlcmUncyBhIGZvcm0gY29udHJvbCB3aXRoIG5hbWUgb3IgaWQgb2YgXCJzdWJtaXRcIlxuICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxGb3JtRWxlbWVudC9zdWJtaXRcbiAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihleHRlcm5hbEZvcm1UcmlnZ2VyZWQpLnN1Ym1pdC5jYWxsKGV4dGVybmFsRm9ybVRyaWdnZXJlZClcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIG9uTm9kZURpc2NhcmRlZChlbCl7XG4gICAgLy8gbmVzdGVkIHZpZXcgaGFuZGxpbmdcbiAgICBpZihET00uaXNQaHhDaGlsZChlbCkgfHwgRE9NLmlzUGh4U3RpY2t5KGVsKSl7IHRoaXMubGl2ZVNvY2tldC5kZXN0cm95Vmlld0J5RWwoZWwpIH1cbiAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJkaXNjYXJkZWRcIiwgZWwpXG4gIH1cblxuICBtYXliZVBlbmRpbmdSZW1vdmUobm9kZSl7XG4gICAgaWYobm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUodGhpcy5waHhSZW1vdmUpICE9PSBudWxsKXtcbiAgICAgIHRoaXMucGVuZGluZ1JlbW92ZXMucHVzaChub2RlKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlU3RyZWFtQ2hpbGRFbGVtZW50KGNoaWxkKXtcbiAgICAvLyB3ZSBuZWVkIHRvIHN0b3JlIHRoZSBub2RlIGlmIGl0IGlzIGFjdHVhbGx5IHJlLWFkZGVkIGluIHRoZSBzYW1lIHBhdGNoXG4gICAgLy8gd2UgZG8gTk9UIHdhbnQgdG8gZXhlY3V0ZSBwaHgtcmVtb3ZlLCB3ZSBkbyBOT1Qgd2FudCB0byBjYWxsIG9uTm9kZURpc2NhcmRlZFxuICAgIGlmKHRoaXMuc3RyZWFtSW5zZXJ0c1tjaGlsZC5pZF0pe1xuICAgICAgdGhpcy5zdHJlYW1Db21wb25lbnRSZXN0b3JlW2NoaWxkLmlkXSA9IGNoaWxkXG4gICAgICBjaGlsZC5yZW1vdmUoKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvbmx5IHJlbW92ZSB0aGUgZWxlbWVudCBub3cgaWYgaXQgaGFzIG5vIHBoeC1yZW1vdmUgYmluZGluZ1xuICAgICAgaWYoIXRoaXMubWF5YmVQZW5kaW5nUmVtb3ZlKGNoaWxkKSl7XG4gICAgICAgIGNoaWxkLnJlbW92ZSgpXG4gICAgICAgIHRoaXMub25Ob2RlRGlzY2FyZGVkKGNoaWxkKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFN0cmVhbUluc2VydChlbCl7XG4gICAgbGV0IGluc2VydCA9IGVsLmlkID8gdGhpcy5zdHJlYW1JbnNlcnRzW2VsLmlkXSA6IHt9XG4gICAgcmV0dXJuIGluc2VydCB8fCB7fVxuICB9XG5cbiAgc2V0U3RyZWFtUmVmKGVsLCByZWYpe1xuICAgIERPTS5wdXRTdGlja3koZWwsIFBIWF9TVFJFQU1fUkVGLCBlbCA9PiBlbC5zZXRBdHRyaWJ1dGUoUEhYX1NUUkVBTV9SRUYsIHJlZikpXG4gIH1cblxuICBtYXliZVJlT3JkZXJTdHJlYW0oZWwsIGlzTmV3KXtcbiAgICBsZXQge3JlZiwgc3RyZWFtQXQsIHJlc2V0fSA9IHRoaXMuZ2V0U3RyZWFtSW5zZXJ0KGVsKVxuICAgIGlmKHN0cmVhbUF0ID09PSB1bmRlZmluZWQpeyByZXR1cm4gfVxuXG4gICAgLy8gd2UgbmVlZCB0byBzZXQgdGhlIFBIWF9TVFJFQU1fUkVGIGhlcmUgYXMgd2VsbCBhcyBhZGRDaGlsZCBpcyBpbnZva2VkIG9ubHkgZm9yIHBhcmVudHNcbiAgICB0aGlzLnNldFN0cmVhbVJlZihlbCwgcmVmKVxuXG4gICAgaWYoIXJlc2V0ICYmICFpc05ldyl7XG4gICAgICAvLyB3ZSBvbmx5IHJlb3JkZXIgaWYgdGhlIGVsZW1lbnQgaXMgbmV3IG9yIGl0J3MgYSBzdHJlYW0gcmVzZXRcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIHRoZSBlbGVtZW50IGhhcyBhIHBhcmVudCBlbGVtZW50O1xuICAgIC8vIGl0IGRvZXNuJ3QgaWYgd2UgYXJlIGN1cnJlbnRseSByZWN1cnNpdmVseSBtb3JwaGluZyAocmVzdG9yaW5nIGEgc2F2ZWQgc3RyZWFtIGNoaWxkKVxuICAgIC8vIGJlY2F1c2UgdGhlIGVsZW1lbnQgaXMgbm90IHlldCBhZGRlZCB0byB0aGUgcmVhbCBkb207XG4gICAgLy8gcmVvcmRlcmluZyBkb2VzIG5vdCBtYWtlIHNlbnNlIGluIHRoYXQgY2FzZSBhbnl3YXlcbiAgICBpZighZWwucGFyZW50RWxlbWVudCl7IHJldHVybiB9XG5cbiAgICBpZihzdHJlYW1BdCA9PT0gMCl7XG4gICAgICBlbC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShlbCwgZWwucGFyZW50RWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZClcbiAgICB9IGVsc2UgaWYoc3RyZWFtQXQgPiAwKXtcbiAgICAgIGxldCBjaGlsZHJlbiA9IEFycmF5LmZyb20oZWwucGFyZW50RWxlbWVudC5jaGlsZHJlbilcbiAgICAgIGxldCBvbGRJbmRleCA9IGNoaWxkcmVuLmluZGV4T2YoZWwpXG4gICAgICBpZihzdHJlYW1BdCA+PSBjaGlsZHJlbi5sZW5ndGggLSAxKXtcbiAgICAgICAgZWwucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChlbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBzaWJsaW5nID0gY2hpbGRyZW5bc3RyZWFtQXRdXG4gICAgICAgIGlmKG9sZEluZGV4ID4gc3RyZWFtQXQpe1xuICAgICAgICAgIGVsLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsLCBzaWJsaW5nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsLCBzaWJsaW5nLm5leHRFbGVtZW50U2libGluZylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubWF5YmVMaW1pdFN0cmVhbShlbClcbiAgfVxuXG4gIG1heWJlTGltaXRTdHJlYW0oZWwpe1xuICAgIGxldCB7bGltaXR9ID0gdGhpcy5nZXRTdHJlYW1JbnNlcnQoZWwpXG4gICAgbGV0IGNoaWxkcmVuID0gbGltaXQgIT09IG51bGwgJiYgQXJyYXkuZnJvbShlbC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuKVxuICAgIGlmKGxpbWl0ICYmIGxpbWl0IDwgMCAmJiBjaGlsZHJlbi5sZW5ndGggPiBsaW1pdCAqIC0xKXtcbiAgICAgIGNoaWxkcmVuLnNsaWNlKDAsIGNoaWxkcmVuLmxlbmd0aCArIGxpbWl0KS5mb3JFYWNoKGNoaWxkID0+IHRoaXMucmVtb3ZlU3RyZWFtQ2hpbGRFbGVtZW50KGNoaWxkKSlcbiAgICB9IGVsc2UgaWYobGltaXQgJiYgbGltaXQgPj0gMCAmJiBjaGlsZHJlbi5sZW5ndGggPiBsaW1pdCl7XG4gICAgICBjaGlsZHJlbi5zbGljZShsaW1pdCkuZm9yRWFjaChjaGlsZCA9PiB0aGlzLnJlbW92ZVN0cmVhbUNoaWxkRWxlbWVudChjaGlsZCkpXG4gICAgfVxuICB9XG5cbiAgdHJhbnNpdGlvblBlbmRpbmdSZW1vdmVzKCl7XG4gICAgbGV0IHtwZW5kaW5nUmVtb3ZlcywgbGl2ZVNvY2tldH0gPSB0aGlzXG4gICAgaWYocGVuZGluZ1JlbW92ZXMubGVuZ3RoID4gMCl7XG4gICAgICBsaXZlU29ja2V0LnRyYW5zaXRpb25SZW1vdmVzKHBlbmRpbmdSZW1vdmVzLCBmYWxzZSwgKCkgPT4ge1xuICAgICAgICBwZW5kaW5nUmVtb3Zlcy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICBsZXQgY2hpbGQgPSBET00uZmlyc3RQaHhDaGlsZChlbClcbiAgICAgICAgICBpZihjaGlsZCl7IGxpdmVTb2NrZXQuZGVzdHJveVZpZXdCeUVsKGNoaWxkKSB9XG4gICAgICAgICAgZWwucmVtb3ZlKClcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy50cmFja0FmdGVyKFwidHJhbnNpdGlvbnNEaXNjYXJkZWRcIiwgcGVuZGluZ1JlbW92ZXMpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGlzQ2hhbmdlZFNlbGVjdChmcm9tRWwsIHRvRWwpe1xuICAgIGlmKCEoZnJvbUVsIGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpIHx8IGZyb21FbC5tdWx0aXBsZSl7IHJldHVybiBmYWxzZSB9XG4gICAgaWYoZnJvbUVsLm9wdGlvbnMubGVuZ3RoICE9PSB0b0VsLm9wdGlvbnMubGVuZ3RoKXsgcmV0dXJuIHRydWUgfVxuXG4gICAgLy8ga2VlcCB0aGUgY3VycmVudCB2YWx1ZVxuICAgIHRvRWwudmFsdWUgPSBmcm9tRWwudmFsdWVcblxuICAgIC8vIGluIGdlbmVyYWwgd2UgaGF2ZSB0byBiZSB2ZXJ5IGNhcmVmdWwgd2l0aCB1c2luZyBpc0VxdWFsTm9kZSBhcyBpdCBkb2VzIG5vdCBhIHJlbGlhYmxlXG4gICAgLy8gRE9NIHRyZWUgZXF1YWxpdHkgY2hlY2ssIGJ1dCBmb3Igc2VsZWN0aW9uIGF0dHJpYnV0ZXMgYW5kIG9wdGlvbnMgaXQgd29ya3MgZmluZVxuICAgIHJldHVybiAhZnJvbUVsLmlzRXF1YWxOb2RlKHRvRWwpXG4gIH1cblxuICBpc0NJRFBhdGNoKCl7IHJldHVybiB0aGlzLmNpZFBhdGNoIH1cblxuICBza2lwQ0lEU2libGluZyhlbCl7XG4gICAgcmV0dXJuIGVsLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiBlbC5oYXNBdHRyaWJ1dGUoUEhYX1NLSVApXG4gIH1cblxuICB0YXJnZXRDSURDb250YWluZXIoaHRtbCl7XG4gICAgaWYoIXRoaXMuaXNDSURQYXRjaCgpKXsgcmV0dXJuIH1cbiAgICBsZXQgW2ZpcnN0LCAuLi5yZXN0XSA9IERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5jb250YWluZXIsIHRoaXMudGFyZ2V0Q0lEKVxuICAgIGlmKHJlc3QubGVuZ3RoID09PSAwICYmIERPTS5jaGlsZE5vZGVMZW5ndGgoaHRtbCkgPT09IDEpe1xuICAgICAgcmV0dXJuIGZpcnN0XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaXJzdCAmJiBmaXJzdC5wYXJlbnROb2RlXG4gICAgfVxuICB9XG5cbiAgaW5kZXhPZihwYXJlbnQsIGNoaWxkKXsgcmV0dXJuIEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKS5pbmRleE9mKGNoaWxkKSB9XG59XG4iLCAiaW1wb3J0IHtcbiAgQ09NUE9ORU5UUyxcbiAgRFlOQU1JQ1MsXG4gIFRFTVBMQVRFUyxcbiAgRVZFTlRTLFxuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfU0tJUCxcbiAgUEhYX01BR0lDX0lELFxuICBSRVBMWSxcbiAgU1RBVElDLFxuICBUSVRMRSxcbiAgU1RSRUFNLFxuICBST09ULFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBpc09iamVjdCxcbiAgbG9nRXJyb3IsXG4gIGlzQ2lkLFxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmNvbnN0IFZPSURfVEFHUyA9IG5ldyBTZXQoW1xuICBcImFyZWFcIixcbiAgXCJiYXNlXCIsXG4gIFwiYnJcIixcbiAgXCJjb2xcIixcbiAgXCJjb21tYW5kXCIsXG4gIFwiZW1iZWRcIixcbiAgXCJoclwiLFxuICBcImltZ1wiLFxuICBcImlucHV0XCIsXG4gIFwia2V5Z2VuXCIsXG4gIFwibGlua1wiLFxuICBcIm1ldGFcIixcbiAgXCJwYXJhbVwiLFxuICBcInNvdXJjZVwiLFxuICBcInRyYWNrXCIsXG4gIFwid2JyXCJcbl0pXG5jb25zdCBxdW90ZUNoYXJzID0gbmV3IFNldChbXCInXCIsIFwiXFxcIlwiXSlcblxuZXhwb3J0IGxldCBtb2RpZnlSb290ID0gKGh0bWwsIGF0dHJzLCBjbGVhcklubmVySFRNTCkgPT4ge1xuICBsZXQgaSA9IDBcbiAgbGV0IGluc2lkZUNvbW1lbnQgPSBmYWxzZVxuICBsZXQgYmVmb3JlVGFnLCBhZnRlclRhZywgdGFnLCB0YWdOYW1lRW5kc0F0LCBpZCwgbmV3SFRNTFxuXG4gIGxldCBsb29rYWhlYWQgPSBodG1sLm1hdGNoKC9eKFxccyooPzo8IS0tLio/LS0+XFxzKikqKTwoW15cXHNcXC8+XSspLylcbiAgaWYobG9va2FoZWFkID09PSBudWxsKXsgdGhyb3cgbmV3IEVycm9yKGBtYWxmb3JtZWQgaHRtbCAke2h0bWx9YCkgfVxuXG4gIGkgPSBsb29rYWhlYWRbMF0ubGVuZ3RoXG4gIGJlZm9yZVRhZyA9IGxvb2thaGVhZFsxXVxuICB0YWcgPSBsb29rYWhlYWRbMl1cbiAgdGFnTmFtZUVuZHNBdCA9IGlcblxuICAvLyBTY2FuIHRoZSBvcGVuaW5nIHRhZyBmb3IgaWQsIGlmIHRoZXJlIGlzIGFueVxuICBmb3IoaTsgaSA8IGh0bWwubGVuZ3RoOyBpKyspe1xuICAgIGlmKGh0bWwuY2hhckF0KGkpID09PSBcIj5cIiApeyBicmVhayB9XG4gICAgaWYoaHRtbC5jaGFyQXQoaSkgPT09IFwiPVwiKXtcbiAgICAgIGxldCBpc0lkID0gaHRtbC5zbGljZShpIC0gMywgaSkgPT09IFwiIGlkXCJcbiAgICAgIGkrK1xuICAgICAgbGV0IGNoYXIgPSBodG1sLmNoYXJBdChpKVxuICAgICAgaWYocXVvdGVDaGFycy5oYXMoY2hhcikpe1xuICAgICAgICBsZXQgYXR0clN0YXJ0c0F0ID0gaVxuICAgICAgICBpKytcbiAgICAgICAgZm9yKGk7IGkgPCBodG1sLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICBpZihodG1sLmNoYXJBdChpKSA9PT0gY2hhcil7IGJyZWFrIH1cbiAgICAgICAgfVxuICAgICAgICBpZihpc0lkKXtcbiAgICAgICAgICBpZCA9IGh0bWwuc2xpY2UoYXR0clN0YXJ0c0F0ICsgMSwgaSlcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGV0IGNsb3NlQXQgPSBodG1sLmxlbmd0aCAtIDFcbiAgaW5zaWRlQ29tbWVudCA9IGZhbHNlXG4gIHdoaWxlKGNsb3NlQXQgPj0gYmVmb3JlVGFnLmxlbmd0aCArIHRhZy5sZW5ndGgpe1xuICAgIGxldCBjaGFyID0gaHRtbC5jaGFyQXQoY2xvc2VBdClcbiAgICBpZihpbnNpZGVDb21tZW50KXtcbiAgICAgIGlmKGNoYXIgPT09IFwiLVwiICYmIGh0bWwuc2xpY2UoY2xvc2VBdCAtIDMsIGNsb3NlQXQpID09PSBcIjwhLVwiKXtcbiAgICAgICAgaW5zaWRlQ29tbWVudCA9IGZhbHNlXG4gICAgICAgIGNsb3NlQXQgLT0gNFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvc2VBdCAtPSAxXG4gICAgICB9XG4gICAgfSBlbHNlIGlmKGNoYXIgPT09IFwiPlwiICYmIGh0bWwuc2xpY2UoY2xvc2VBdCAtIDIsIGNsb3NlQXQpID09PSBcIi0tXCIpe1xuICAgICAgaW5zaWRlQ29tbWVudCA9IHRydWVcbiAgICAgIGNsb3NlQXQgLT0gM1xuICAgIH0gZWxzZSBpZihjaGFyID09PSBcIj5cIil7XG4gICAgICBicmVha1xuICAgIH0gZWxzZSB7XG4gICAgICBjbG9zZUF0IC09IDFcbiAgICB9XG4gIH1cbiAgYWZ0ZXJUYWcgPSBodG1sLnNsaWNlKGNsb3NlQXQgKyAxLCBodG1sLmxlbmd0aClcblxuICBsZXQgYXR0cnNTdHIgPVxuICAgIE9iamVjdC5rZXlzKGF0dHJzKVxuICAgICAgLm1hcChhdHRyID0+IGF0dHJzW2F0dHJdID09PSB0cnVlID8gYXR0ciA6IGAke2F0dHJ9PVwiJHthdHRyc1thdHRyXX1cImApXG4gICAgICAuam9pbihcIiBcIilcblxuICBpZihjbGVhcklubmVySFRNTCl7XG4gICAgLy8gS2VlcCB0aGUgaWQgaWYgYW55XG4gICAgbGV0IGlkQXR0clN0ciA9IGlkID8gYCBpZD1cIiR7aWR9XCJgIDogXCJcIlxuICAgIGlmKFZPSURfVEFHUy5oYXModGFnKSl7XG4gICAgICBuZXdIVE1MID0gYDwke3RhZ30ke2lkQXR0clN0cn0ke2F0dHJzU3RyID09PSBcIlwiID8gXCJcIiA6IFwiIFwifSR7YXR0cnNTdHJ9Lz5gXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0hUTUwgPSBgPCR7dGFnfSR7aWRBdHRyU3RyfSR7YXR0cnNTdHIgPT09IFwiXCIgPyBcIlwiIDogXCIgXCJ9JHthdHRyc1N0cn0+PC8ke3RhZ30+YFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgcmVzdCA9IGh0bWwuc2xpY2UodGFnTmFtZUVuZHNBdCwgY2xvc2VBdCArIDEpXG4gICAgbmV3SFRNTCA9IGA8JHt0YWd9JHthdHRyc1N0ciA9PT0gXCJcIiA/IFwiXCIgOiBcIiBcIn0ke2F0dHJzU3RyfSR7cmVzdH1gXG4gIH1cblxuICByZXR1cm4gW25ld0hUTUwsIGJlZm9yZVRhZywgYWZ0ZXJUYWddXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlcmVkIHtcbiAgc3RhdGljIGV4dHJhY3QoZGlmZil7XG4gICAgbGV0IHtbUkVQTFldOiByZXBseSwgW0VWRU5UU106IGV2ZW50cywgW1RJVExFXTogdGl0bGV9ID0gZGlmZlxuICAgIGRlbGV0ZSBkaWZmW1JFUExZXVxuICAgIGRlbGV0ZSBkaWZmW0VWRU5UU11cbiAgICBkZWxldGUgZGlmZltUSVRMRV1cbiAgICByZXR1cm4ge2RpZmYsIHRpdGxlLCByZXBseTogcmVwbHkgfHwgbnVsbCwgZXZlbnRzOiBldmVudHMgfHwgW119XG4gIH1cblxuICBjb25zdHJ1Y3Rvcih2aWV3SWQsIHJlbmRlcmVkKXtcbiAgICB0aGlzLnZpZXdJZCA9IHZpZXdJZFxuICAgIHRoaXMucmVuZGVyZWQgPSB7fVxuICAgIHRoaXMubWFnaWNJZCA9IDBcbiAgICB0aGlzLm1lcmdlRGlmZihyZW5kZXJlZClcbiAgfVxuXG4gIHBhcmVudFZpZXdJZCgpeyByZXR1cm4gdGhpcy52aWV3SWQgfVxuXG4gIHRvU3RyaW5nKG9ubHlDaWRzKXtcbiAgICBsZXQgW3N0ciwgc3RyZWFtc10gPSB0aGlzLnJlY3Vyc2l2ZVRvU3RyaW5nKHRoaXMucmVuZGVyZWQsIHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU10sIG9ubHlDaWRzLCB0cnVlLCB7fSlcbiAgICByZXR1cm4gW3N0ciwgc3RyZWFtc11cbiAgfVxuXG4gIHJlY3Vyc2l2ZVRvU3RyaW5nKHJlbmRlcmVkLCBjb21wb25lbnRzID0gcmVuZGVyZWRbQ09NUE9ORU5UU10sIG9ubHlDaWRzLCBjaGFuZ2VUcmFja2luZywgcm9vdEF0dHJzKXtcbiAgICBvbmx5Q2lkcyA9IG9ubHlDaWRzID8gbmV3IFNldChvbmx5Q2lkcykgOiBudWxsXG4gICAgbGV0IG91dHB1dCA9IHtidWZmZXI6IFwiXCIsIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsIG9ubHlDaWRzOiBvbmx5Q2lkcywgc3RyZWFtczogbmV3IFNldCgpfVxuICAgIHRoaXMudG9PdXRwdXRCdWZmZXIocmVuZGVyZWQsIG51bGwsIG91dHB1dCwgY2hhbmdlVHJhY2tpbmcsIHJvb3RBdHRycylcbiAgICByZXR1cm4gW291dHB1dC5idWZmZXIsIG91dHB1dC5zdHJlYW1zXVxuICB9XG5cbiAgY29tcG9uZW50Q0lEcyhkaWZmKXsgcmV0dXJuIE9iamVjdC5rZXlzKGRpZmZbQ09NUE9ORU5UU10gfHwge30pLm1hcChpID0+IHBhcnNlSW50KGkpKSB9XG5cbiAgaXNDb21wb25lbnRPbmx5RGlmZihkaWZmKXtcbiAgICBpZighZGlmZltDT01QT05FTlRTXSl7IHJldHVybiBmYWxzZSB9XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGRpZmYpLmxlbmd0aCA9PT0gMVxuICB9XG5cbiAgZ2V0Q29tcG9uZW50KGRpZmYsIGNpZCl7IHJldHVybiBkaWZmW0NPTVBPTkVOVFNdW2NpZF0gfVxuXG4gIHJlc2V0UmVuZGVyKGNpZCl7XG4gICAgLy8gd2UgYXJlIHJhY2luZyBhIGNvbXBvbmVudCBkZXN0cm95LCBpdCBjb3VsZCBub3QgZXhpc3QsIHNvXG4gICAgLy8gbWFrZSBzdXJlIHRoYXQgd2UgZG9uJ3QgdHJ5IHRvIHNldCByZXNldCBvbiB1bmRlZmluZWRcbiAgICBpZih0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdW2NpZF0pe1xuICAgICAgdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXVtjaWRdLnJlc2V0ID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIG1lcmdlRGlmZihkaWZmKXtcbiAgICBsZXQgbmV3YyA9IGRpZmZbQ09NUE9ORU5UU11cbiAgICBsZXQgY2FjaGUgPSB7fVxuICAgIGRlbGV0ZSBkaWZmW0NPTVBPTkVOVFNdXG4gICAgdGhpcy5yZW5kZXJlZCA9IHRoaXMubXV0YWJsZU1lcmdlKHRoaXMucmVuZGVyZWQsIGRpZmYpXG4gICAgdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSA9IHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU10gfHwge31cblxuICAgIGlmKG5ld2Mpe1xuICAgICAgbGV0IG9sZGMgPSB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdXG5cbiAgICAgIGZvcihsZXQgY2lkIGluIG5ld2Mpe1xuICAgICAgICBuZXdjW2NpZF0gPSB0aGlzLmNhY2hlZEZpbmRDb21wb25lbnQoY2lkLCBuZXdjW2NpZF0sIG9sZGMsIG5ld2MsIGNhY2hlKVxuICAgICAgfVxuXG4gICAgICBmb3IobGV0IGNpZCBpbiBuZXdjKXsgb2xkY1tjaWRdID0gbmV3Y1tjaWRdIH1cbiAgICAgIGRpZmZbQ09NUE9ORU5UU10gPSBuZXdjXG4gICAgfVxuICB9XG5cbiAgY2FjaGVkRmluZENvbXBvbmVudChjaWQsIGNkaWZmLCBvbGRjLCBuZXdjLCBjYWNoZSl7XG4gICAgaWYoY2FjaGVbY2lkXSl7XG4gICAgICByZXR1cm4gY2FjaGVbY2lkXVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbmRpZmYsIHN0YXQsIHNjaWQgPSBjZGlmZltTVEFUSUNdXG5cbiAgICAgIGlmKGlzQ2lkKHNjaWQpKXtcbiAgICAgICAgbGV0IHRkaWZmXG5cbiAgICAgICAgaWYoc2NpZCA+IDApe1xuICAgICAgICAgIHRkaWZmID0gdGhpcy5jYWNoZWRGaW5kQ29tcG9uZW50KHNjaWQsIG5ld2Nbc2NpZF0sIG9sZGMsIG5ld2MsIGNhY2hlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRkaWZmID0gb2xkY1stc2NpZF1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXQgPSB0ZGlmZltTVEFUSUNdXG4gICAgICAgIG5kaWZmID0gdGhpcy5jbG9uZU1lcmdlKHRkaWZmLCBjZGlmZiwgdHJ1ZSlcbiAgICAgICAgbmRpZmZbU1RBVElDXSA9IHN0YXRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5kaWZmID0gY2RpZmZbU1RBVElDXSAhPT0gdW5kZWZpbmVkIHx8IG9sZGNbY2lkXSA9PT0gdW5kZWZpbmVkID9cbiAgICAgICAgICBjZGlmZiA6IHRoaXMuY2xvbmVNZXJnZShvbGRjW2NpZF0sIGNkaWZmLCBmYWxzZSlcbiAgICAgIH1cblxuICAgICAgY2FjaGVbY2lkXSA9IG5kaWZmXG4gICAgICByZXR1cm4gbmRpZmZcbiAgICB9XG4gIH1cblxuICBtdXRhYmxlTWVyZ2UodGFyZ2V0LCBzb3VyY2Upe1xuICAgIGlmKHNvdXJjZVtTVEFUSUNdICE9PSB1bmRlZmluZWQpe1xuICAgICAgcmV0dXJuIHNvdXJjZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvTXV0YWJsZU1lcmdlKHRhcmdldCwgc291cmNlKVxuICAgICAgcmV0dXJuIHRhcmdldFxuICAgIH1cbiAgfVxuXG4gIGRvTXV0YWJsZU1lcmdlKHRhcmdldCwgc291cmNlKXtcbiAgICBmb3IobGV0IGtleSBpbiBzb3VyY2Upe1xuICAgICAgbGV0IHZhbCA9IHNvdXJjZVtrZXldXG4gICAgICBsZXQgdGFyZ2V0VmFsID0gdGFyZ2V0W2tleV1cbiAgICAgIGxldCBpc09ialZhbCA9IGlzT2JqZWN0KHZhbClcbiAgICAgIGlmKGlzT2JqVmFsICYmIHZhbFtTVEFUSUNdID09PSB1bmRlZmluZWQgJiYgaXNPYmplY3QodGFyZ2V0VmFsKSl7XG4gICAgICAgIHRoaXMuZG9NdXRhYmxlTWVyZ2UodGFyZ2V0VmFsLCB2YWwpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbFxuICAgICAgfVxuICAgIH1cbiAgICBpZih0YXJnZXRbUk9PVF0pe1xuICAgICAgdGFyZ2V0Lm5ld1JlbmRlciA9IHRydWVcbiAgICB9XG4gIH1cblxuICAvLyBNZXJnZXMgY2lkIHRyZWVzIHRvZ2V0aGVyLCBjb3B5aW5nIHN0YXRpY3MgZnJvbSBzb3VyY2UgdHJlZS5cbiAgLy9cbiAgLy8gVGhlIGBwcnVuZU1hZ2ljSWRgIGlzIHBhc3NlZCB0byBjb250cm9sIHBydW5pbmcgdGhlIG1hZ2ljSWQgb2YgdGhlXG4gIC8vIHRhcmdldC4gV2UgbXVzdCBhbHdheXMgcHJ1bmUgdGhlIG1hZ2ljSWQgd2hlbiB3ZSBhcmUgc2hhcmluZyBzdGF0aWNzXG4gIC8vIGZyb20gYW5vdGhlciBjb21wb25lbnQuIElmIG5vdCBwcnVuaW5nLCB3ZSByZXBsaWNhdGUgdGhlIGxvZ2ljIGZyb21cbiAgLy8gbXV0YWJsZU1lcmdlLCB3aGVyZSB3ZSBzZXQgbmV3UmVuZGVyIHRvIHRydWUgaWYgdGhlcmUgaXMgYSByb290XG4gIC8vIChlZmZlY3RpdmVseSBmb3JjaW5nIHRoZSBuZXcgdmVyc2lvbiB0byBiZSByZW5kZXJlZCBpbnN0ZWFkIG9mIHNraXBwZWQpXG4gIC8vXG4gIGNsb25lTWVyZ2UodGFyZ2V0LCBzb3VyY2UsIHBydW5lTWFnaWNJZCl7XG4gICAgbGV0IG1lcmdlZCA9IHsuLi50YXJnZXQsIC4uLnNvdXJjZX1cbiAgICBmb3IobGV0IGtleSBpbiBtZXJnZWQpe1xuICAgICAgbGV0IHZhbCA9IHNvdXJjZVtrZXldXG4gICAgICBsZXQgdGFyZ2V0VmFsID0gdGFyZ2V0W2tleV1cbiAgICAgIGlmKGlzT2JqZWN0KHZhbCkgJiYgdmFsW1NUQVRJQ10gPT09IHVuZGVmaW5lZCAmJiBpc09iamVjdCh0YXJnZXRWYWwpKXtcbiAgICAgICAgbWVyZ2VkW2tleV0gPSB0aGlzLmNsb25lTWVyZ2UodGFyZ2V0VmFsLCB2YWwsIHBydW5lTWFnaWNJZClcbiAgICAgIH0gZWxzZSBpZih2YWwgPT09IHVuZGVmaW5lZCAmJiBpc09iamVjdCh0YXJnZXRWYWwpKXtcbiAgICAgICAgbWVyZ2VkW2tleV0gPSB0aGlzLmNsb25lTWVyZ2UodGFyZ2V0VmFsLCB7fSwgcHJ1bmVNYWdpY0lkKVxuICAgICAgfVxuICAgIH1cbiAgICBpZihwcnVuZU1hZ2ljSWQpe1xuICAgICAgZGVsZXRlIG1lcmdlZC5tYWdpY0lkXG4gICAgICBkZWxldGUgbWVyZ2VkLm5ld1JlbmRlclxuICAgIH0gZWxzZSBpZih0YXJnZXRbUk9PVF0pe1xuICAgICAgbWVyZ2VkLm5ld1JlbmRlciA9IHRydWVcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZFxuICB9XG5cbiAgY29tcG9uZW50VG9TdHJpbmcoY2lkKXtcbiAgICBsZXQgW3N0ciwgc3RyZWFtc10gPSB0aGlzLnJlY3Vyc2l2ZUNJRFRvU3RyaW5nKHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU10sIGNpZCwgbnVsbClcbiAgICBsZXQgW3N0cmlwcGVkSFRNTCwgX2JlZm9yZSwgX2FmdGVyXSA9IG1vZGlmeVJvb3Qoc3RyLCB7fSlcbiAgICByZXR1cm4gW3N0cmlwcGVkSFRNTCwgc3RyZWFtc11cbiAgfVxuXG4gIHBydW5lQ0lEcyhjaWRzKXtcbiAgICBjaWRzLmZvckVhY2goY2lkID0+IGRlbGV0ZSB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdW2NpZF0pXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgZ2V0KCl7IHJldHVybiB0aGlzLnJlbmRlcmVkIH1cblxuICBpc05ld0ZpbmdlcnByaW50KGRpZmYgPSB7fSl7IHJldHVybiAhIWRpZmZbU1RBVElDXSB9XG5cbiAgdGVtcGxhdGVTdGF0aWMocGFydCwgdGVtcGxhdGVzKXtcbiAgICBpZih0eXBlb2YgKHBhcnQpID09PSBcIm51bWJlclwiKXtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZXNbcGFydF1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnRcbiAgICB9XG4gIH1cblxuICBuZXh0TWFnaWNJRCgpe1xuICAgIHRoaXMubWFnaWNJZCsrXG4gICAgcmV0dXJuIGBtJHt0aGlzLm1hZ2ljSWR9LSR7dGhpcy5wYXJlbnRWaWV3SWQoKX1gXG4gIH1cblxuICAvLyBDb252ZXJ0cyByZW5kZXJlZCB0cmVlIHRvIG91dHB1dCBidWZmZXIuXG4gIC8vXG4gIC8vIGNoYW5nZVRyYWNraW5nIGNvbnRyb2xzIGlmIHdlIGNhbiBhcHBseSB0aGUgUEhYX1NLSVAgb3B0aW1pemF0aW9uLlxuICAvLyBJdCBpcyBkaXNhYmxlZCBmb3IgY29tcHJlaGVuc2lvbnMgc2luY2Ugd2UgbXVzdCByZS1yZW5kZXIgdGhlIGVudGlyZSBjb2xsZWN0aW9uXG4gIC8vIGFuZCBubyBpbmRpdmlkdWFsIGVsZW1lbnQgaXMgdHJhY2tlZCBpbnNpZGUgdGhlIGNvbXByZWhlbnNpb24uXG4gIHRvT3V0cHV0QnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCwgY2hhbmdlVHJhY2tpbmcsIHJvb3RBdHRycyA9IHt9KXtcbiAgICBpZihyZW5kZXJlZFtEWU5BTUlDU10peyByZXR1cm4gdGhpcy5jb21wcmVoZW5zaW9uVG9CdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KSB9XG4gICAgbGV0IHtbU1RBVElDXTogc3RhdGljc30gPSByZW5kZXJlZFxuICAgIHN0YXRpY3MgPSB0aGlzLnRlbXBsYXRlU3RhdGljKHN0YXRpY3MsIHRlbXBsYXRlcylcbiAgICBsZXQgaXNSb290ID0gcmVuZGVyZWRbUk9PVF1cbiAgICBsZXQgcHJldkJ1ZmZlciA9IG91dHB1dC5idWZmZXJcbiAgICBpZihpc1Jvb3QpeyBvdXRwdXQuYnVmZmVyID0gXCJcIiB9XG5cbiAgICAvLyB0aGlzIGNvbmRpdGlvbiBpcyBjYWxsZWQgd2hlbiBmaXJzdCByZW5kZXJpbmcgYW4gb3B0aW1pemFibGUgZnVuY3Rpb24gY29tcG9uZW50LlxuICAgIC8vIExDIGhhdmUgdGhlaXIgbWFnaWNJZCBwcmV2aW91c2x5IHNldFxuICAgIGlmKGNoYW5nZVRyYWNraW5nICYmIGlzUm9vdCAmJiAhcmVuZGVyZWQubWFnaWNJZCl7XG4gICAgICByZW5kZXJlZC5uZXdSZW5kZXIgPSB0cnVlXG4gICAgICByZW5kZXJlZC5tYWdpY0lkID0gdGhpcy5uZXh0TWFnaWNJRCgpXG4gICAgfVxuXG4gICAgb3V0cHV0LmJ1ZmZlciArPSBzdGF0aWNzWzBdXG4gICAgZm9yKGxldCBpID0gMTsgaSA8IHN0YXRpY3MubGVuZ3RoOyBpKyspe1xuICAgICAgdGhpcy5keW5hbWljVG9CdWZmZXIocmVuZGVyZWRbaSAtIDFdLCB0ZW1wbGF0ZXMsIG91dHB1dCwgY2hhbmdlVHJhY2tpbmcpXG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHN0YXRpY3NbaV1cbiAgICB9XG5cbiAgICAvLyBBcHBsaWVzIHRoZSByb290IHRhZyBcInNraXBcIiBvcHRpbWl6YXRpb24gaWYgc3VwcG9ydGVkLCB3aGljaCBjbGVhcnNcbiAgICAvLyB0aGUgcm9vdCB0YWcgYXR0cmlidXRlcyBhbmQgaW5uZXJIVE1MLCBhbmQgb25seSBtYWludGFpbnMgdGhlIG1hZ2ljSWQuXG4gICAgLy8gV2UgY2FuIG9ubHkgc2tpcCB3aGVuIGNoYW5nZVRyYWNraW5nIGlzIHN1cHBvcnRlZCAob3V0c2lkZSBvZiBhIGNvbXByZWhlbnNpb24pLFxuICAgIC8vIGFuZCB3aGVuIHRoZSByb290IGVsZW1lbnQgaGFzbid0IGV4cGVyaWVuY2VkIGFuIHVucmVuZGVyZWQgbWVyZ2UgKG5ld1JlbmRlciB0cnVlKS5cbiAgICBpZihpc1Jvb3Qpe1xuICAgICAgbGV0IHNraXAgPSBmYWxzZVxuICAgICAgbGV0IGF0dHJzXG4gICAgICAvLyBXaGVuIGEgTEMgaXMgcmUtYWRkZWQgdG8gdGhlIHBhZ2UsIHdlIG5lZWQgdG8gcmUtcmVuZGVyIHRoZSBlbnRpcmUgTEMgdHJlZSxcbiAgICAgIC8vIHRoZXJlZm9yZSBjaGFuZ2VUcmFja2luZyBpcyBmYWxzZTsgaG93ZXZlciwgd2UgbmVlZCB0byBrZWVwIGFsbCB0aGUgbWFnaWNJZHNcbiAgICAgIC8vIGZyb20gYW55IGZ1bmN0aW9uIGNvbXBvbmVudCBzbyB0aGUgbmV4dCB0aW1lIHRoZSBMQyBpcyB1cGRhdGVkLCB3ZSBjYW4gYXBwbHlcbiAgICAgIC8vIHRoZSBza2lwIG9wdGltaXphdGlvblxuICAgICAgaWYoY2hhbmdlVHJhY2tpbmcgfHwgcmVuZGVyZWQubWFnaWNJZCl7XG4gICAgICAgIHNraXAgPSBjaGFuZ2VUcmFja2luZyAmJiAhcmVuZGVyZWQubmV3UmVuZGVyXG4gICAgICAgIGF0dHJzID0ge1tQSFhfTUFHSUNfSURdOiByZW5kZXJlZC5tYWdpY0lkLCAuLi5yb290QXR0cnN9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdHRycyA9IHJvb3RBdHRyc1xuICAgICAgfVxuICAgICAgaWYoc2tpcCl7IGF0dHJzW1BIWF9TS0lQXSA9IHRydWUgfVxuICAgICAgbGV0IFtuZXdSb290LCBjb21tZW50QmVmb3JlLCBjb21tZW50QWZ0ZXJdID0gbW9kaWZ5Um9vdChvdXRwdXQuYnVmZmVyLCBhdHRycywgc2tpcClcbiAgICAgIHJlbmRlcmVkLm5ld1JlbmRlciA9IGZhbHNlXG4gICAgICBvdXRwdXQuYnVmZmVyID0gcHJldkJ1ZmZlciArIGNvbW1lbnRCZWZvcmUgKyBuZXdSb290ICsgY29tbWVudEFmdGVyXG4gICAgfVxuICB9XG5cbiAgY29tcHJlaGVuc2lvblRvQnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCl7XG4gICAgbGV0IHtbRFlOQU1JQ1NdOiBkeW5hbWljcywgW1NUQVRJQ106IHN0YXRpY3MsIFtTVFJFQU1dOiBzdHJlYW19ID0gcmVuZGVyZWRcbiAgICBsZXQgW19yZWYsIF9pbnNlcnRzLCBkZWxldGVJZHMsIHJlc2V0XSA9IHN0cmVhbSB8fCBbbnVsbCwge30sIFtdLCBudWxsXVxuICAgIHN0YXRpY3MgPSB0aGlzLnRlbXBsYXRlU3RhdGljKHN0YXRpY3MsIHRlbXBsYXRlcylcbiAgICBsZXQgY29tcFRlbXBsYXRlcyA9IHRlbXBsYXRlcyB8fCByZW5kZXJlZFtURU1QTEFURVNdXG4gICAgZm9yKGxldCBkID0gMDsgZCA8IGR5bmFtaWNzLmxlbmd0aDsgZCsrKXtcbiAgICAgIGxldCBkeW5hbWljID0gZHluYW1pY3NbZF1cbiAgICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1swXVxuICAgICAgZm9yKGxldCBpID0gMTsgaSA8IHN0YXRpY3MubGVuZ3RoOyBpKyspe1xuICAgICAgICAvLyBJbnNpZGUgYSBjb21wcmVoZW5zaW9uLCB3ZSBkb24ndCB0cmFjayBob3cgZHluYW1pY3MgY2hhbmdlXG4gICAgICAgIC8vIG92ZXIgdGltZSAoYW5kIGZlYXR1cmVzIGxpa2Ugc3RyZWFtcyB3b3VsZCBtYWtlIHRoYXQgaW1wb3NzaWJsZVxuICAgICAgICAvLyB1bmxlc3Mgd2UgbW92ZSB0aGUgc3RyZWFtIGRpZmZpbmcgYXdheSBmcm9tIG1vcnBoZG9tKSxcbiAgICAgICAgLy8gc28gd2UgY2FuJ3QgcGVyZm9ybSByb290IGNoYW5nZSB0cmFja2luZy5cbiAgICAgICAgbGV0IGNoYW5nZVRyYWNraW5nID0gZmFsc2VcbiAgICAgICAgdGhpcy5keW5hbWljVG9CdWZmZXIoZHluYW1pY1tpIC0gMV0sIGNvbXBUZW1wbGF0ZXMsIG91dHB1dCwgY2hhbmdlVHJhY2tpbmcpXG4gICAgICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1tpXVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmKHN0cmVhbSAhPT0gdW5kZWZpbmVkICYmIChyZW5kZXJlZFtEWU5BTUlDU10ubGVuZ3RoID4gMCB8fCBkZWxldGVJZHMubGVuZ3RoID4gMCB8fCByZXNldCkpe1xuICAgICAgZGVsZXRlIHJlbmRlcmVkW1NUUkVBTV1cbiAgICAgIHJlbmRlcmVkW0RZTkFNSUNTXSA9IFtdXG4gICAgICBvdXRwdXQuc3RyZWFtcy5hZGQoc3RyZWFtKVxuICAgIH1cbiAgfVxuXG4gIGR5bmFtaWNUb0J1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQsIGNoYW5nZVRyYWNraW5nKXtcbiAgICBpZih0eXBlb2YgKHJlbmRlcmVkKSA9PT0gXCJudW1iZXJcIil7XG4gICAgICBsZXQgW3N0ciwgc3RyZWFtc10gPSB0aGlzLnJlY3Vyc2l2ZUNJRFRvU3RyaW5nKG91dHB1dC5jb21wb25lbnRzLCByZW5kZXJlZCwgb3V0cHV0Lm9ubHlDaWRzKVxuICAgICAgb3V0cHV0LmJ1ZmZlciArPSBzdHJcbiAgICAgIG91dHB1dC5zdHJlYW1zID0gbmV3IFNldChbLi4ub3V0cHV0LnN0cmVhbXMsIC4uLnN0cmVhbXNdKVxuICAgIH0gZWxzZSBpZihpc09iamVjdChyZW5kZXJlZCkpe1xuICAgICAgdGhpcy50b091dHB1dEJ1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQsIGNoYW5nZVRyYWNraW5nLCB7fSlcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LmJ1ZmZlciArPSByZW5kZXJlZFxuICAgIH1cbiAgfVxuXG4gIHJlY3Vyc2l2ZUNJRFRvU3RyaW5nKGNvbXBvbmVudHMsIGNpZCwgb25seUNpZHMpe1xuICAgIGxldCBjb21wb25lbnQgPSBjb21wb25lbnRzW2NpZF0gfHwgbG9nRXJyb3IoYG5vIGNvbXBvbmVudCBmb3IgQ0lEICR7Y2lkfWAsIGNvbXBvbmVudHMpXG4gICAgbGV0IGF0dHJzID0ge1tQSFhfQ09NUE9ORU5UXTogY2lkfVxuICAgIGxldCBza2lwID0gb25seUNpZHMgJiYgIW9ubHlDaWRzLmhhcyhjaWQpXG4gICAgLy8gVHdvIG9wdGltaXphdGlvbiBwYXRocyBhcHBseSBoZXJlOlxuICAgIC8vXG4gICAgLy8gICAxLiBUaGUgb25seUNpZHMgb3B0aW1pemF0aW9uIHdvcmtzIGJ5IHRoZSBzZXJ2ZXIgZGlmZiB0ZWxsaW5nIHVzIG9ubHkgc3BlY2lmaWNcbiAgICAvLyAgICAgY2lkJ3MgaGF2ZSBjaGFuZ2VkLiBUaGlzIGFsbG93cyB1cyB0byBza2lwIHJlbmRlcmluZyBhbnkgY29tcG9uZW50IHRoYXQgaGFzbid0IGNoYW5nZWQsXG4gICAgLy8gICAgIHdoaWNoIHVsdGltYXRlbHkgc2V0cyBQSFhfU0tJUCByb290IGF0dHJpYnV0ZSBhbmQgYXZvaWRzIHJlbmRlcmluZyB0aGUgaW5uZXJIVE1MLlxuICAgIC8vXG4gICAgLy8gICAyLiBUaGUgcm9vdCBQSFhfU0tJUCBvcHRpbWl6YXRpb24gZ2VuZXJhbGl6ZXMgdG8gYWxsIEhFRXggZnVuY3Rpb24gY29tcG9uZW50cywgYW5kXG4gICAgLy8gICAgIHdvcmtzIGluIHRoZSBzYW1lIFBIWF9TS0lQIGF0dHJpYnV0ZSBmYXNoaW9uIGFzIDEsIGJ1dCB0aGUgbmV3UmVuZGVyIHRyYWNraW5nIGlzIGRvbmVcbiAgICAvLyAgICAgYXQgdGhlIGdlbmVyYWwgZGlmZiBtZXJnZSBsZXZlbC4gSWYgd2UgbWVyZ2UgYSBkaWZmIHdpdGggbmV3IGR5bmFtaWNzLCB3ZSBuZWNlc3NhcmlseSBoYXZlXG4gICAgLy8gICAgIGV4cGVyaWVuY2VkIGEgY2hhbmdlIHdoaWNoIG11c3QgYmUgYSBuZXdSZW5kZXIsIGFuZCB0aHVzIHdlIGNhbid0IHNraXAgdGhlIHJlbmRlci5cbiAgICAvL1xuICAgIC8vIEJvdGggb3B0aW1pemF0aW9uIGZsb3dzIGFwcGx5IGhlcmUuIG5ld1JlbmRlciBpcyBzZXQgYmFzZWQgb24gdGhlIG9ubHlDaWRzIG9wdGltaXphdGlvbiwgYW5kXG4gICAgLy8gd2UgdHJhY2sgYSBkZXRlcm1pbmlzdGljIG1hZ2ljSWQgYmFzZWQgb24gdGhlIGNpZC5cbiAgICAvL1xuICAgIC8vIGNoYW5nZVRyYWNraW5nIGlzIGFib3V0IHRoZSBlbnRpcmUgdHJlZVxuICAgIC8vIG5ld1JlbmRlciBpcyBhYm91dCB0aGUgY3VycmVudCByb290IGluIHRoZSB0cmVlXG4gICAgLy9cbiAgICAvLyBCeSBkZWZhdWx0IGNoYW5nZVRyYWNraW5nIGlzIGVuYWJsZWQsIGJ1dCB3ZSBzcGVjaWFsIGNhc2UgdGhlIGZsb3cgd2hlcmUgdGhlIGNsaWVudCBpcyBwcnVuaW5nXG4gICAgLy8gY2lkcyBhbmQgdGhlIHNlcnZlciBhZGRzIHRoZSBjb21wb25lbnQgYmFjay4gSW4gc3VjaCBjYXNlcywgd2UgZXhwbGljaXRseSBkaXNhYmxlIGNoYW5nZVRyYWNraW5nXG4gICAgLy8gd2l0aCByZXNldFJlbmRlciBmb3IgdGhpcyBjaWQsIHRoZW4gcmUtZW5hYmxlIGl0IGFmdGVyIHRoZSByZWN1cnNpdmUgY2FsbCB0byBza2lwIHRoZSBvcHRpbWl6YXRpb25cbiAgICAvLyBmb3IgdGhlIGVudGlyZSBjb21wb25lbnQgdHJlZS5cbiAgICBjb21wb25lbnQubmV3UmVuZGVyID0gIXNraXBcbiAgICBjb21wb25lbnQubWFnaWNJZCA9IGBjJHtjaWR9LSR7dGhpcy5wYXJlbnRWaWV3SWQoKX1gXG4gICAgLy8gZW5hYmxlIGNoYW5nZSB0cmFja2luZyBhcyBsb25nIGFzIHRoZSBjb21wb25lbnQgaGFzbid0IGJlZW4gcmVzZXRcbiAgICBsZXQgY2hhbmdlVHJhY2tpbmcgPSAhY29tcG9uZW50LnJlc2V0XG4gICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlVG9TdHJpbmcoY29tcG9uZW50LCBjb21wb25lbnRzLCBvbmx5Q2lkcywgY2hhbmdlVHJhY2tpbmcsIGF0dHJzKVxuICAgIC8vIGRpc2FibGUgcmVzZXQgYWZ0ZXIgd2UndmUgcmVuZGVyZWRcbiAgICBkZWxldGUgY29tcG9uZW50LnJlc2V0XG5cbiAgICByZXR1cm4gW2h0bWwsIHN0cmVhbXNdXG4gIH1cbn1cbiIsICJpbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgQVJJQSBmcm9tIFwiLi9hcmlhXCJcblxubGV0IGZvY3VzU3RhY2sgPSBbXVxubGV0IGRlZmF1bHRfdHJhbnNpdGlvbl90aW1lID0gMjAwXG5cbmxldCBKUyA9IHtcbiAgLy8gcHJpdmF0ZVxuICBleGVjKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBkZWZhdWx0cyl7XG4gICAgbGV0IFtkZWZhdWx0S2luZCwgZGVmYXVsdEFyZ3NdID0gZGVmYXVsdHMgfHwgW251bGwsIHtjYWxsYmFjazogZGVmYXVsdHMgJiYgZGVmYXVsdHMuY2FsbGJhY2t9XVxuICAgIGxldCBjb21tYW5kcyA9IHBoeEV2ZW50LmNoYXJBdCgwKSA9PT0gXCJbXCIgP1xuICAgICAgSlNPTi5wYXJzZShwaHhFdmVudCkgOiBbW2RlZmF1bHRLaW5kLCBkZWZhdWx0QXJnc11dXG5cbiAgICBjb21tYW5kcy5mb3JFYWNoKChba2luZCwgYXJnc10pID0+IHtcbiAgICAgIGlmKGtpbmQgPT09IGRlZmF1bHRLaW5kKXtcbiAgICAgICAgLy8gYWx3YXlzIHByZWZlciB0aGUgYXJncywgYnV0IGtlZXAgZXhpc3Rpbmcga2V5cyBmcm9tIHRoZSBkZWZhdWx0QXJnc1xuICAgICAgICBhcmdzID0gey4uLmRlZmF1bHRBcmdzLCAuLi5hcmdzfVxuICAgICAgICBhcmdzLmNhbGxiYWNrID0gYXJncy5jYWxsYmFjayB8fCBkZWZhdWx0QXJncy5jYWxsYmFja1xuICAgICAgfVxuICAgICAgdGhpcy5maWx0ZXJUb0Vscyh2aWV3LmxpdmVTb2NrZXQsIHNvdXJjZUVsLCBhcmdzKS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgdGhpc1tgZXhlY18ke2tpbmR9YF0oZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCBhcmdzKVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuXG4gIGlzVmlzaWJsZShlbCl7XG4gICAgcmV0dXJuICEhKGVsLm9mZnNldFdpZHRoIHx8IGVsLm9mZnNldEhlaWdodCB8fCBlbC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA+IDApXG4gIH0sXG5cbiAgLy8gcmV0dXJucyB0cnVlIGlmIGFueSBwYXJ0IG9mIHRoZSBlbGVtZW50IGlzIGluc2lkZSB0aGUgdmlld3BvcnRcbiAgaXNJblZpZXdwb3J0KGVsKXtcbiAgICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBjb25zdCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuICAgIGNvbnN0IHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoXG5cbiAgICByZXR1cm4gKFxuICAgICAgcmVjdC5yaWdodCA+IDAgJiZcbiAgICAgIHJlY3QuYm90dG9tID4gMCAmJlxuICAgICAgcmVjdC5sZWZ0IDwgd2luZG93V2lkdGggJiZcbiAgICAgIHJlY3QudG9wIDwgd2luZG93SGVpZ2h0XG4gICAgKVxuICB9LFxuXG4gIC8vIHByaXZhdGVcblxuICAvLyBjb21tYW5kc1xuXG4gIGV4ZWNfZXhlYyhlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHthdHRyLCB0b30pe1xuICAgIGxldCBub2RlcyA9IHRvID8gRE9NLmFsbChkb2N1bWVudCwgdG8pIDogW3NvdXJjZUVsXVxuICAgIG5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICBsZXQgZW5jb2RlZEpTID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cilcbiAgICAgIGlmKCFlbmNvZGVkSlMpeyB0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkICR7YXR0cn0gdG8gY29udGFpbiBKUyBjb21tYW5kIG9uIFwiJHt0b31cImApIH1cbiAgICAgIHZpZXcubGl2ZVNvY2tldC5leGVjSlMobm9kZSwgZW5jb2RlZEpTLCBldmVudFR5cGUpXG4gICAgfSlcbiAgfSxcblxuICBleGVjX2Rpc3BhdGNoKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2V2ZW50LCBkZXRhaWwsIGJ1YmJsZXN9KXtcbiAgICBkZXRhaWwgPSBkZXRhaWwgfHwge31cbiAgICBkZXRhaWwuZGlzcGF0Y2hlciA9IHNvdXJjZUVsXG4gICAgRE9NLmRpc3BhdGNoRXZlbnQoZWwsIGV2ZW50LCB7ZGV0YWlsLCBidWJibGVzfSlcbiAgfSxcblxuICBleGVjX3B1c2goZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCBhcmdzKXtcbiAgICBsZXQge2V2ZW50LCBkYXRhLCB0YXJnZXQsIHBhZ2VfbG9hZGluZywgbG9hZGluZywgdmFsdWUsIGRpc3BhdGNoZXIsIGNhbGxiYWNrfSA9IGFyZ3NcbiAgICBsZXQgcHVzaE9wdHMgPSB7bG9hZGluZywgdmFsdWUsIHRhcmdldCwgcGFnZV9sb2FkaW5nOiAhIXBhZ2VfbG9hZGluZ31cbiAgICBsZXQgdGFyZ2V0U3JjID0gZXZlbnRUeXBlID09PSBcImNoYW5nZVwiICYmIGRpc3BhdGNoZXIgPyBkaXNwYXRjaGVyIDogc291cmNlRWxcbiAgICBsZXQgcGh4VGFyZ2V0ID0gdGFyZ2V0IHx8IHRhcmdldFNyYy5nZXRBdHRyaWJ1dGUodmlldy5iaW5kaW5nKFwidGFyZ2V0XCIpKSB8fCB0YXJnZXRTcmNcbiAgICBjb25zdCBoYW5kbGVyID0gKHRhcmdldFZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgaWYoIXRhcmdldFZpZXcuaXNDb25uZWN0ZWQoKSl7IHJldHVybiB9XG4gICAgICBpZihldmVudFR5cGUgPT09IFwiY2hhbmdlXCIpe1xuICAgICAgICBsZXQge25ld0NpZCwgX3RhcmdldH0gPSBhcmdzXG4gICAgICAgIF90YXJnZXQgPSBfdGFyZ2V0IHx8IChET00uaXNGb3JtSW5wdXQoc291cmNlRWwpID8gc291cmNlRWwubmFtZSA6IHVuZGVmaW5lZClcbiAgICAgICAgaWYoX3RhcmdldCl7IHB1c2hPcHRzLl90YXJnZXQgPSBfdGFyZ2V0IH1cbiAgICAgICAgdGFyZ2V0Vmlldy5wdXNoSW5wdXQoc291cmNlRWwsIHRhcmdldEN0eCwgbmV3Q2lkLCBldmVudCB8fCBwaHhFdmVudCwgcHVzaE9wdHMsIGNhbGxiYWNrKVxuICAgICAgfSBlbHNlIGlmKGV2ZW50VHlwZSA9PT0gXCJzdWJtaXRcIil7XG4gICAgICAgIGxldCB7c3VibWl0dGVyfSA9IGFyZ3NcbiAgICAgICAgdGFyZ2V0Vmlldy5zdWJtaXRGb3JtKHNvdXJjZUVsLCB0YXJnZXRDdHgsIGV2ZW50IHx8IHBoeEV2ZW50LCBzdWJtaXR0ZXIsIHB1c2hPcHRzLCBjYWxsYmFjaylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFZpZXcucHVzaEV2ZW50KGV2ZW50VHlwZSwgc291cmNlRWwsIHRhcmdldEN0eCwgZXZlbnQgfHwgcGh4RXZlbnQsIGRhdGEsIHB1c2hPcHRzLCBjYWxsYmFjaylcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gaW4gY2FzZSBvZiBmb3JtUmVjb3ZlcnksIHRhcmdldFZpZXcgYW5kIHRhcmdldEN0eCBhcmUgcGFzc2VkIGFzIGFyZ3VtZW50XG4gICAgLy8gYXMgdGhleSBhcmUgbG9va2VkIHVwIGluIGEgdGVtcGxhdGUgZWxlbWVudCwgbm90IHRoZSByZWFsIERPTVxuICAgIGlmKGFyZ3MudGFyZ2V0VmlldyAmJiBhcmdzLnRhcmdldEN0eCl7XG4gICAgICBoYW5kbGVyKGFyZ3MudGFyZ2V0VmlldywgYXJncy50YXJnZXRDdHgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHZpZXcud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsIGhhbmRsZXIpXG4gICAgfVxuICB9LFxuXG4gIGV4ZWNfbmF2aWdhdGUoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7aHJlZiwgcmVwbGFjZX0pe1xuICAgIHZpZXcubGl2ZVNvY2tldC5oaXN0b3J5UmVkaXJlY3QoZSwgaHJlZiwgcmVwbGFjZSA/IFwicmVwbGFjZVwiIDogXCJwdXNoXCIsIG51bGwsIHNvdXJjZUVsKVxuICB9LFxuXG4gIGV4ZWNfcGF0Y2goZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7aHJlZiwgcmVwbGFjZX0pe1xuICAgIHZpZXcubGl2ZVNvY2tldC5wdXNoSGlzdG9yeVBhdGNoKGUsIGhyZWYsIHJlcGxhY2UgPyBcInJlcGxhY2VcIiA6IFwicHVzaFwiLCBzb3VyY2VFbClcbiAgfSxcblxuICBleGVjX2ZvY3VzKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCl7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBBUklBLmF0dGVtcHRGb2N1cyhlbCkpXG4gIH0sXG5cbiAgZXhlY19mb2N1c19maXJzdChlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gQVJJQS5mb2N1c0ZpcnN0SW50ZXJhY3RpdmUoZWwpIHx8IEFSSUEuZm9jdXNGaXJzdChlbCkpXG4gIH0sXG5cbiAgZXhlY19wdXNoX2ZvY3VzKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCl7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBmb2N1c1N0YWNrLnB1c2goZWwgfHwgc291cmNlRWwpKVxuICB9LFxuXG4gIGV4ZWNfcG9wX2ZvY3VzKF9lLCBfZXZlbnRUeXBlLCBfcGh4RXZlbnQsIF92aWV3LCBfc291cmNlRWwsIF9lbCl7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBjb25zdCBlbCA9IGZvY3VzU3RhY2sucG9wKClcbiAgICAgIGlmKGVsKXsgZWwuZm9jdXMoKSB9XG4gICAgfSlcbiAgfSxcblxuICBleGVjX2FkZF9jbGFzcyhlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtuYW1lcywgdHJhbnNpdGlvbiwgdGltZSwgYmxvY2tpbmd9KXtcbiAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgbmFtZXMsIFtdLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3LCBibG9ja2luZylcbiAgfSxcblxuICBleGVjX3JlbW92ZV9jbGFzcyhlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtuYW1lcywgdHJhbnNpdGlvbiwgdGltZSwgYmxvY2tpbmd9KXtcbiAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIG5hbWVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3LCBibG9ja2luZylcbiAgfSxcblxuICBleGVjX3RvZ2dsZV9jbGFzcyhlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtuYW1lcywgdHJhbnNpdGlvbiwgdGltZSwgYmxvY2tpbmd9KXtcbiAgICB0aGlzLnRvZ2dsZUNsYXNzZXMoZWwsIG5hbWVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3LCBibG9ja2luZylcbiAgfSxcblxuICBleGVjX3RvZ2dsZV9hdHRyKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2F0dHI6IFthdHRyLCB2YWwxLCB2YWwyXX0pe1xuICAgIHRoaXMudG9nZ2xlQXR0cihlbCwgYXR0ciwgdmFsMSwgdmFsMilcbiAgfSxcblxuICBleGVjX3RyYW5zaXRpb24oZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7dGltZSwgdHJhbnNpdGlvbiwgYmxvY2tpbmd9KXtcbiAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIFtdLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3LCBibG9ja2luZylcbiAgfSxcblxuICBleGVjX3RvZ2dsZShlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtkaXNwbGF5LCBpbnMsIG91dHMsIHRpbWUsIGJsb2NraW5nfSl7XG4gICAgdGhpcy50b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgaW5zLCBvdXRzLCB0aW1lLCBibG9ja2luZylcbiAgfSxcblxuICBleGVjX3Nob3coZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7ZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZSwgYmxvY2tpbmd9KXtcbiAgICB0aGlzLnNob3coZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZSwgYmxvY2tpbmcpXG4gIH0sXG5cbiAgZXhlY19oaWRlKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2Rpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nfSl7XG4gICAgdGhpcy5oaWRlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nKVxuICB9LFxuXG4gIGV4ZWNfc2V0X2F0dHIoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7YXR0cjogW2F0dHIsIHZhbF19KXtcbiAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsXV0sIFtdKVxuICB9LFxuXG4gIGV4ZWNfcmVtb3ZlX2F0dHIoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7YXR0cn0pe1xuICAgIHRoaXMuc2V0T3JSZW1vdmVBdHRycyhlbCwgW10sIFthdHRyXSlcbiAgfSxcblxuICAvLyB1dGlscyBmb3IgY29tbWFuZHNcblxuICBzaG93KGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nKXtcbiAgICBpZighdGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgIHRoaXMudG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIG51bGwsIHRpbWUsIGJsb2NraW5nKVxuICAgIH1cbiAgfSxcblxuICBoaWRlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nKXtcbiAgICBpZih0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgdGhpcy50b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgbnVsbCwgdHJhbnNpdGlvbiwgdGltZSwgYmxvY2tpbmcpXG4gICAgfVxuICB9LFxuXG4gIHRvZ2dsZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCBpbnMsIG91dHMsIHRpbWUsIGJsb2NraW5nKXtcbiAgICB0aW1lID0gdGltZSB8fCBkZWZhdWx0X3RyYW5zaXRpb25fdGltZVxuICAgIGxldCBbaW5DbGFzc2VzLCBpblN0YXJ0Q2xhc3NlcywgaW5FbmRDbGFzc2VzXSA9IGlucyB8fCBbW10sIFtdLCBbXV1cbiAgICBsZXQgW291dENsYXNzZXMsIG91dFN0YXJ0Q2xhc3Nlcywgb3V0RW5kQ2xhc3Nlc10gPSBvdXRzIHx8IFtbXSwgW10sIFtdXVxuICAgIGlmKGluQ2xhc3Nlcy5sZW5ndGggPiAwIHx8IG91dENsYXNzZXMubGVuZ3RoID4gMCl7XG4gICAgICBpZih0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgICBsZXQgb25TdGFydCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgb3V0U3RhcnRDbGFzc2VzLCBpbkNsYXNzZXMuY29uY2F0KGluU3RhcnRDbGFzc2VzKS5jb25jYXQoaW5FbmRDbGFzc2VzKSlcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBvdXRDbGFzc2VzLCBbXSlcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG91dEVuZENsYXNzZXMsIG91dFN0YXJ0Q2xhc3NlcykpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBsZXQgb25FbmQgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBvdXRDbGFzc2VzLmNvbmNhdChvdXRFbmRDbGFzc2VzKSlcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIilcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLWVuZFwiKSlcbiAgICAgICAgfVxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLXN0YXJ0XCIpKVxuICAgICAgICBpZihibG9ja2luZyA9PT0gZmFsc2Upe1xuICAgICAgICAgIG9uU3RhcnQoKVxuICAgICAgICAgIHNldFRpbWVvdXQob25FbmQsIHRpbWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmlldy50cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRW5kKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZihldmVudFR5cGUgPT09IFwicmVtb3ZlXCIpeyByZXR1cm4gfVxuICAgICAgICBsZXQgb25TdGFydCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgaW5TdGFydENsYXNzZXMsIG91dENsYXNzZXMuY29uY2F0KG91dFN0YXJ0Q2xhc3NlcykuY29uY2F0KG91dEVuZENsYXNzZXMpKVxuICAgICAgICAgIGxldCBzdGlja3lEaXNwbGF5ID0gZGlzcGxheSB8fCB0aGlzLmRlZmF1bHREaXNwbGF5KGVsKVxuICAgICAgICAgIERPTS5wdXRTdGlja3koZWwsIFwidG9nZ2xlXCIsIGN1cnJlbnRFbCA9PiBjdXJyZW50RWwuc3R5bGUuZGlzcGxheSA9IHN0aWNreURpc3BsYXkpXG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgaW5DbGFzc2VzLCBbXSlcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIGluRW5kQ2xhc3NlcywgaW5TdGFydENsYXNzZXMpKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9uRW5kID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBbXSwgaW5DbGFzc2VzLmNvbmNhdChpbkVuZENsYXNzZXMpKVxuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctZW5kXCIpKVxuICAgICAgICB9XG4gICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctc3RhcnRcIikpXG4gICAgICAgIGlmKGJsb2NraW5nID09PSBmYWxzZSl7XG4gICAgICAgICAgb25TdGFydCgpXG4gICAgICAgICAgc2V0VGltZW91dChvbkVuZCwgdGltZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2aWV3LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25FbmQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYodGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6aGlkZS1zdGFydFwiKSlcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIilcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLWVuZFwiKSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctc3RhcnRcIikpXG4gICAgICAgICAgbGV0IHN0aWNreURpc3BsYXkgPSBkaXNwbGF5IHx8IHRoaXMuZGVmYXVsdERpc3BsYXkoZWwpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gc3RpY2t5RGlzcGxheSlcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LWVuZFwiKSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgdG9nZ2xlQ2xhc3NlcyhlbCwgY2xhc3NlcywgdHJhbnNpdGlvbiwgdGltZSwgdmlldywgYmxvY2tpbmcpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgbGV0IFtwcmV2QWRkcywgcHJldlJlbW92ZXNdID0gRE9NLmdldFN0aWNreShlbCwgXCJjbGFzc2VzXCIsIFtbXSwgW11dKVxuICAgICAgbGV0IG5ld0FkZHMgPSBjbGFzc2VzLmZpbHRlcihuYW1lID0+IHByZXZBZGRzLmluZGV4T2YobmFtZSkgPCAwICYmICFlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSkpXG4gICAgICBsZXQgbmV3UmVtb3ZlcyA9IGNsYXNzZXMuZmlsdGVyKG5hbWUgPT4gcHJldlJlbW92ZXMuaW5kZXhPZihuYW1lKSA8IDAgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKVxuICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG5ld0FkZHMsIG5ld1JlbW92ZXMsIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcsIGJsb2NraW5nKVxuICAgIH0pXG4gIH0sXG5cbiAgdG9nZ2xlQXR0cihlbCwgYXR0ciwgdmFsMSwgdmFsMil7XG4gICAgaWYoZWwuaGFzQXR0cmlidXRlKGF0dHIpKXtcbiAgICAgIGlmKHZhbDIgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgIC8vIHRvZ2dsZSBiZXR3ZWVuIHZhbDEgYW5kIHZhbDJcbiAgICAgICAgaWYoZWwuZ2V0QXR0cmlidXRlKGF0dHIpID09PSB2YWwxKXtcbiAgICAgICAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsMl1dLCBbXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsMV1dLCBbXSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmVtb3ZlIGF0dHJcbiAgICAgICAgdGhpcy5zZXRPclJlbW92ZUF0dHJzKGVsLCBbXSwgW2F0dHJdKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsMV1dLCBbXSlcbiAgICB9XG4gIH0sXG5cbiAgYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBhZGRzLCByZW1vdmVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3LCBibG9ja2luZyl7XG4gICAgdGltZSA9IHRpbWUgfHwgZGVmYXVsdF90cmFuc2l0aW9uX3RpbWVcbiAgICBsZXQgW3RyYW5zaXRpb25SdW4sIHRyYW5zaXRpb25TdGFydCwgdHJhbnNpdGlvbkVuZF0gPSB0cmFuc2l0aW9uIHx8IFtbXSwgW10sIFtdXVxuICAgIGlmKHRyYW5zaXRpb25SdW4ubGVuZ3RoID4gMCl7XG4gICAgICBsZXQgb25TdGFydCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIHRyYW5zaXRpb25TdGFydCwgW10uY29uY2F0KHRyYW5zaXRpb25SdW4pLmNvbmNhdCh0cmFuc2l0aW9uRW5kKSlcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIHRyYW5zaXRpb25SdW4sIFtdKVxuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIHRyYW5zaXRpb25FbmQsIHRyYW5zaXRpb25TdGFydCkpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBsZXQgb25Eb25lID0gKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIGFkZHMuY29uY2F0KHRyYW5zaXRpb25FbmQpLCByZW1vdmVzLmNvbmNhdCh0cmFuc2l0aW9uUnVuKS5jb25jYXQodHJhbnNpdGlvblN0YXJ0KSlcbiAgICAgIGlmKGJsb2NraW5nID09PSBmYWxzZSl7XG4gICAgICAgIG9uU3RhcnQoKVxuICAgICAgICBzZXRUaW1lb3V0KG9uRG9uZSwgdGltZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZpZXcudHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpXG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGxldCBbcHJldkFkZHMsIHByZXZSZW1vdmVzXSA9IERPTS5nZXRTdGlja3koZWwsIFwiY2xhc3Nlc1wiLCBbW10sIFtdXSlcbiAgICAgIGxldCBrZWVwQWRkcyA9IGFkZHMuZmlsdGVyKG5hbWUgPT4gcHJldkFkZHMuaW5kZXhPZihuYW1lKSA8IDAgJiYgIWVsLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKSlcbiAgICAgIGxldCBrZWVwUmVtb3ZlcyA9IHJlbW92ZXMuZmlsdGVyKG5hbWUgPT4gcHJldlJlbW92ZXMuaW5kZXhPZihuYW1lKSA8IDAgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKVxuICAgICAgbGV0IG5ld0FkZHMgPSBwcmV2QWRkcy5maWx0ZXIobmFtZSA9PiByZW1vdmVzLmluZGV4T2YobmFtZSkgPCAwKS5jb25jYXQoa2VlcEFkZHMpXG4gICAgICBsZXQgbmV3UmVtb3ZlcyA9IHByZXZSZW1vdmVzLmZpbHRlcihuYW1lID0+IGFkZHMuaW5kZXhPZihuYW1lKSA8IDApLmNvbmNhdChrZWVwUmVtb3ZlcylcblxuICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJjbGFzc2VzXCIsIGN1cnJlbnRFbCA9PiB7XG4gICAgICAgIGN1cnJlbnRFbC5jbGFzc0xpc3QucmVtb3ZlKC4uLm5ld1JlbW92ZXMpXG4gICAgICAgIGN1cnJlbnRFbC5jbGFzc0xpc3QuYWRkKC4uLm5ld0FkZHMpXG4gICAgICAgIHJldHVybiBbbmV3QWRkcywgbmV3UmVtb3Zlc11cbiAgICAgIH0pXG4gICAgfSlcbiAgfSxcblxuICBzZXRPclJlbW92ZUF0dHJzKGVsLCBzZXRzLCByZW1vdmVzKXtcbiAgICBsZXQgW3ByZXZTZXRzLCBwcmV2UmVtb3Zlc10gPSBET00uZ2V0U3RpY2t5KGVsLCBcImF0dHJzXCIsIFtbXSwgW11dKVxuXG4gICAgbGV0IGFsdGVyZWRBdHRycyA9IHNldHMubWFwKChbYXR0ciwgX3ZhbF0pID0+IGF0dHIpLmNvbmNhdChyZW1vdmVzKVxuICAgIGxldCBuZXdTZXRzID0gcHJldlNldHMuZmlsdGVyKChbYXR0ciwgX3ZhbF0pID0+ICFhbHRlcmVkQXR0cnMuaW5jbHVkZXMoYXR0cikpLmNvbmNhdChzZXRzKVxuICAgIGxldCBuZXdSZW1vdmVzID0gcHJldlJlbW92ZXMuZmlsdGVyKChhdHRyKSA9PiAhYWx0ZXJlZEF0dHJzLmluY2x1ZGVzKGF0dHIpKS5jb25jYXQocmVtb3ZlcylcblxuICAgIERPTS5wdXRTdGlja3koZWwsIFwiYXR0cnNcIiwgY3VycmVudEVsID0+IHtcbiAgICAgIG5ld1JlbW92ZXMuZm9yRWFjaChhdHRyID0+IGN1cnJlbnRFbC5yZW1vdmVBdHRyaWJ1dGUoYXR0cikpXG4gICAgICBuZXdTZXRzLmZvckVhY2goKFthdHRyLCB2YWxdKSA9PiBjdXJyZW50RWwuc2V0QXR0cmlidXRlKGF0dHIsIHZhbCkpXG4gICAgICByZXR1cm4gW25ld1NldHMsIG5ld1JlbW92ZXNdXG4gICAgfSlcbiAgfSxcblxuICBoYXNBbGxDbGFzc2VzKGVsLCBjbGFzc2VzKXsgcmV0dXJuIGNsYXNzZXMuZXZlcnkobmFtZSA9PiBlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSkpIH0sXG5cbiAgaXNUb2dnbGVkT3V0KGVsLCBvdXRDbGFzc2VzKXtcbiAgICByZXR1cm4gIXRoaXMuaXNWaXNpYmxlKGVsKSB8fCB0aGlzLmhhc0FsbENsYXNzZXMoZWwsIG91dENsYXNzZXMpXG4gIH0sXG5cbiAgZmlsdGVyVG9FbHMobGl2ZVNvY2tldCwgc291cmNlRWwsIHt0b30pe1xuICAgIGxldCBkZWZhdWx0UXVlcnkgPSAoKSA9PiB7XG4gICAgICBpZih0eXBlb2YodG8pID09PSBcInN0cmluZ1wiKXtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodG8pXG4gICAgICB9IGVsc2UgaWYodG8uY2xvc2VzdCl7XG4gICAgICAgIGxldCB0b0VsID0gc291cmNlRWwuY2xvc2VzdCh0by5jbG9zZXN0KVxuICAgICAgICByZXR1cm4gdG9FbCA/IFt0b0VsXSA6IFtdXG4gICAgICB9IGVsc2UgaWYodG8uaW5uZXIpe1xuICAgICAgICByZXR1cm4gc291cmNlRWwucXVlcnlTZWxlY3RvckFsbCh0by5pbm5lcilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvID8gbGl2ZVNvY2tldC5qc1F1ZXJ5U2VsZWN0b3JBbGwoc291cmNlRWwsIHRvLCBkZWZhdWx0UXVlcnkpIDogW3NvdXJjZUVsXVxuICB9LFxuXG4gIGRlZmF1bHREaXNwbGF5KGVsKXtcbiAgICByZXR1cm4ge3RyOiBcInRhYmxlLXJvd1wiLCB0ZDogXCJ0YWJsZS1jZWxsXCJ9W2VsLnRhZ05hbWUudG9Mb3dlckNhc2UoKV0gfHwgXCJibG9ja1wiXG4gIH0sXG5cbiAgdHJhbnNpdGlvbkNsYXNzZXModmFsKXtcbiAgICBpZighdmFsKXsgcmV0dXJuIG51bGwgfVxuXG4gICAgbGV0IFt0cmFucywgdFN0YXJ0LCB0RW5kXSA9IEFycmF5LmlzQXJyYXkodmFsKSA/IHZhbCA6IFt2YWwuc3BsaXQoXCIgXCIpLCBbXSwgW11dXG4gICAgdHJhbnMgPSBBcnJheS5pc0FycmF5KHRyYW5zKSA/IHRyYW5zIDogdHJhbnMuc3BsaXQoXCIgXCIpXG4gICAgdFN0YXJ0ID0gQXJyYXkuaXNBcnJheSh0U3RhcnQpID8gdFN0YXJ0IDogdFN0YXJ0LnNwbGl0KFwiIFwiKVxuICAgIHRFbmQgPSBBcnJheS5pc0FycmF5KHRFbmQpID8gdEVuZCA6IHRFbmQuc3BsaXQoXCIgXCIpXG4gICAgcmV0dXJuIFt0cmFucywgdFN0YXJ0LCB0RW5kXVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEpTXG4iLCAiaW1wb3J0IEpTIGZyb20gXCIuL2pzXCJcbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcblxuY29uc3QgSE9PS19JRCA9IFwiaG9va0lkXCJcblxubGV0IHZpZXdIb29rSUQgPSAxXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3SG9vayB7XG4gIHN0YXRpYyBtYWtlSUQoKXsgcmV0dXJuIHZpZXdIb29rSUQrKyB9XG4gIHN0YXRpYyBlbGVtZW50SUQoZWwpeyByZXR1cm4gRE9NLnByaXZhdGUoZWwsIEhPT0tfSUQpIH1cblxuICBjb25zdHJ1Y3Rvcih2aWV3LCBlbCwgY2FsbGJhY2tzKXtcbiAgICB0aGlzLmVsID0gZWxcbiAgICB0aGlzLl9fYXR0YWNoVmlldyh2aWV3KVxuICAgIHRoaXMuX19jYWxsYmFja3MgPSBjYWxsYmFja3NcbiAgICB0aGlzLl9fbGlzdGVuZXJzID0gbmV3IFNldCgpXG4gICAgdGhpcy5fX2lzRGlzY29ubmVjdGVkID0gZmFsc2VcbiAgICBET00ucHV0UHJpdmF0ZSh0aGlzLmVsLCBIT09LX0lELCB0aGlzLmNvbnN0cnVjdG9yLm1ha2VJRCgpKVxuICAgIGZvcihsZXQga2V5IGluIHRoaXMuX19jYWxsYmFja3MpeyB0aGlzW2tleV0gPSB0aGlzLl9fY2FsbGJhY2tzW2tleV0gfVxuICB9XG5cbiAgX19hdHRhY2hWaWV3KHZpZXcpe1xuICAgIGlmKHZpZXcpe1xuICAgICAgdGhpcy5fX3ZpZXcgPSAoKSA9PiB2aWV3XG4gICAgICB0aGlzLmxpdmVTb2NrZXQgPSB2aWV3LmxpdmVTb2NrZXRcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fX3ZpZXcgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaG9vayBub3QgeWV0IGF0dGFjaGVkIHRvIGEgbGl2ZSB2aWV3OiAke3RoaXMuZWwub3V0ZXJIVE1MfWApXG4gICAgICB9XG4gICAgICB0aGlzLmxpdmVTb2NrZXQgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgX19tb3VudGVkKCl7IHRoaXMubW91bnRlZCAmJiB0aGlzLm1vdW50ZWQoKSB9XG4gIF9fdXBkYXRlZCgpeyB0aGlzLnVwZGF0ZWQgJiYgdGhpcy51cGRhdGVkKCkgfVxuICBfX2JlZm9yZVVwZGF0ZSgpeyB0aGlzLmJlZm9yZVVwZGF0ZSAmJiB0aGlzLmJlZm9yZVVwZGF0ZSgpIH1cbiAgX19kZXN0cm95ZWQoKXtcbiAgICB0aGlzLmRlc3Ryb3llZCAmJiB0aGlzLmRlc3Ryb3llZCgpXG4gICAgRE9NLmRlbGV0ZVByaXZhdGUodGhpcy5lbCwgSE9PS19JRCkgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peF9saXZlX3ZpZXcvaXNzdWVzLzM0OTZcbiAgfVxuICBfX3JlY29ubmVjdGVkKCl7XG4gICAgaWYodGhpcy5fX2lzRGlzY29ubmVjdGVkKXtcbiAgICAgIHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCA9IGZhbHNlXG4gICAgICB0aGlzLnJlY29ubmVjdGVkICYmIHRoaXMucmVjb25uZWN0ZWQoKVxuICAgIH1cbiAgfVxuICBfX2Rpc2Nvbm5lY3RlZCgpe1xuICAgIHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCA9IHRydWVcbiAgICB0aGlzLmRpc2Nvbm5lY3RlZCAmJiB0aGlzLmRpc2Nvbm5lY3RlZCgpXG4gIH1cblxuICAvKipcbiAgICogQmluZHMgdGhlIGhvb2sgdG8gSlMgY29tbWFuZHMuXG4gICAqXG4gICAqIEBwYXJhbSB7Vmlld0hvb2t9IGhvb2sgLSBUaGUgVmlld0hvb2sgaW5zdGFuY2UgdG8gYmluZC5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IHdpdGggbWV0aG9kcyB0byBtYW5pcHVsYXRlIHRoZSBET00gYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdC5cbiAgICovXG4gIGpzKCl7XG4gICAgbGV0IGhvb2sgPSB0aGlzXG5cbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBFeGVjdXRlcyBlbmNvZGVkIEphdmFTY3JpcHQgaW4gdGhlIGNvbnRleHQgb2YgdGhlIGhvb2sgZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5jb2RlZEpTIC0gVGhlIGVuY29kZWQgSmF2YVNjcmlwdCBzdHJpbmcgdG8gZXhlY3V0ZS5cbiAgICAgICAqL1xuICAgICAgZXhlYyhlbmNvZGVkSlMpe1xuICAgICAgICBob29rLl9fdmlldygpLmxpdmVTb2NrZXQuZXhlY0pTKGhvb2suZWwsIGVuY29kZWRKUywgXCJob29rXCIpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFNob3dzIGFuIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byBzaG93LlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmRpc3BsYXldIC0gVGhlIENTUyBkaXNwbGF5IHZhbHVlIHRvIHNldC4gRGVmYXVsdHMgXCJibG9ja1wiLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnRyYW5zaXRpb25dIC0gVGhlIENTUyB0cmFuc2l0aW9uIGNsYXNzZXMgdG8gc2V0IHdoZW4gc2hvd2luZy5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy50aW1lXSAtIFRoZSB0cmFuc2l0aW9uIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kcy4gRGVmYXVsdHMgMjAwLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5ibG9ja2luZ10gLSBUaGUgYm9vbGVhbiBmbGFnIHRvIGJsb2NrIHRoZSBVSSBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgKiAgRGVmYXVsdHMgYHRydWVgLlxuICAgICAgICovXG4gICAgICBzaG93KGVsLCBvcHRzID0ge30pe1xuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIEpTLnNob3coXCJob29rXCIsIG93bmVyLCBlbCwgb3B0cy5kaXNwbGF5LCBvcHRzLnRyYW5zaXRpb24sIG9wdHMudGltZSwgb3B0cy5ibG9ja2luZylcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogSGlkZXMgYW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIGhpZGUuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9e31dIC0gT3B0aW9uYWwgc2V0dGluZ3MuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMudHJhbnNpdGlvbl0gLSBUaGUgQ1NTIHRyYW5zaXRpb24gY2xhc3NlcyB0byBzZXQgd2hlbiBoaWRpbmcuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZV0gLSBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHRzIDIwMC5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuYmxvY2tpbmddIC0gVGhlIGJvb2xlYW4gZmxhZyB0byBibG9jayB0aGUgVUkgZHVyaW5nIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICogICBEZWZhdWx0cyBgdHJ1ZWAuXG4gICAgICAgKi9cbiAgICAgIGhpZGUoZWwsIG9wdHMgPSB7fSl7XG4gICAgICAgIGxldCBvd25lciA9IGhvb2suX192aWV3KCkubGl2ZVNvY2tldC5vd25lcihlbClcbiAgICAgICAgSlMuaGlkZShcImhvb2tcIiwgb3duZXIsIGVsLCBudWxsLCBvcHRzLnRyYW5zaXRpb24sIG9wdHMudGltZSwgb3B0cy5ibG9ja2luZylcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVG9nZ2xlcyB0aGUgdmlzaWJpbGl0eSBvZiBhbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gdG9nZ2xlLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmRpc3BsYXldIC0gVGhlIENTUyBkaXNwbGF5IHZhbHVlIHRvIHNldC4gRGVmYXVsdHMgXCJibG9ja1wiLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmluXSAtIFRoZSBDU1MgdHJhbnNpdGlvbiBjbGFzc2VzIGZvciBzaG93aW5nLlxuICAgICAgICogICBBY2NlcHRzIGVpdGhlciB0aGUgc3RyaW5nIG9mIGNsYXNzZXMgdG8gYXBwbHkgd2hlbiB0b2dnbGluZyBpbiwgb3JcbiAgICAgICAqICAgYSAzLXR1cGxlIGNvbnRhaW5pbmcgdGhlIHRyYW5zaXRpb24gY2xhc3MsIHRoZSBjbGFzcyB0byBhcHBseVxuICAgICAgICogICB0byBzdGFydCB0aGUgdHJhbnNpdGlvbiwgYW5kIHRoZSBlbmRpbmcgdHJhbnNpdGlvbiBjbGFzcywgc3VjaCBhczpcbiAgICAgICAqXG4gICAgICAgKiAgICAgICBbXCJlYXNlLW91dCBkdXJhdGlvbi0zMDBcIiwgXCJvcGFjaXR5LTBcIiwgXCJvcGFjaXR5LTEwMFwiXVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5vdXRdIC0gVGhlIENTUyB0cmFuc2l0aW9uIGNsYXNzZXMgZm9yIGhpZGluZy5cbiAgICAgICAqICAgQWNjZXB0cyBlaXRoZXIgc3RyaW5nIG9mIGNsYXNzZXMgdG8gYXBwbHkgd2hlbiB0b2dnbGluZyBvdXQsIG9yXG4gICAgICAgKiAgIGEgMy10dXBsZSBjb250YWluaW5nIHRoZSB0cmFuc2l0aW9uIGNsYXNzLCB0aGUgY2xhc3MgdG8gYXBwbHlcbiAgICAgICAqICAgdG8gc3RhcnQgdGhlIHRyYW5zaXRpb24sIGFuZCB0aGUgZW5kaW5nIHRyYW5zaXRpb24gY2xhc3MsIHN1Y2ggYXM6XG4gICAgICAgKlxuICAgICAgICogICAgICAgW1wiZWFzZS1vdXQgZHVyYXRpb24tMzAwXCIsIFwib3BhY2l0eS0xMDBcIiwgXCJvcGFjaXR5LTBcIl1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZV0gLSBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5ibG9ja2luZ10gLSBUaGUgYm9vbGVhbiBmbGFnIHRvIGJsb2NrIHRoZSBVSSBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgKiAgIERlZmF1bHRzIGB0cnVlYC5cbiAgICAgICAqL1xuICAgICAgdG9nZ2xlKGVsLCBvcHRzID0ge30pe1xuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIG9wdHMuaW4gPSBKUy50cmFuc2l0aW9uQ2xhc3NlcyhvcHRzLmluKVxuICAgICAgICBvcHRzLm91dCA9IEpTLnRyYW5zaXRpb25DbGFzc2VzKG9wdHMub3V0KVxuICAgICAgICBKUy50b2dnbGUoXCJob29rXCIsIG93bmVyLCBlbCwgb3B0cy5kaXNwbGF5LCBvcHRzLmluLCBvcHRzLm91dCwgb3B0cy50aW1lLCBvcHRzLmJsb2NraW5nKVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBBZGRzIENTUyBjbGFzc2VzIHRvIGFuIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byBhZGQgY2xhc3NlcyB0by5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBuYW1lcyAtIFRoZSBjbGFzcyBuYW1lKHMpIHRvIGFkZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz17fV0gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy50cmFuc2l0aW9uXSAtIFRoZSBDU1MgdHJhbnNpdGlvbiBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICAgKiAgIEFjY2VwdHMgYSBzdHJpbmcgb2YgY2xhc3NlcyB0byBhcHBseSB3aGVuIGFkZGluZyBjbGFzc2VzIG9yXG4gICAgICAgKiAgIGEgMy10dXBsZSBjb250YWluaW5nIHRoZSB0cmFuc2l0aW9uIGNsYXNzLCB0aGUgY2xhc3MgdG8gYXBwbHlcbiAgICAgICAqICAgdG8gc3RhcnQgdGhlIHRyYW5zaXRpb24sIGFuZCB0aGUgZW5kaW5nIHRyYW5zaXRpb24gY2xhc3MsIHN1Y2ggYXM6XG4gICAgICAgKlxuICAgICAgICogICAgICAgW1wiZWFzZS1vdXQgZHVyYXRpb24tMzAwXCIsIFwib3BhY2l0eS0wXCIsIFwib3BhY2l0eS0xMDBcIl1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZV0gLSBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmJsb2NraW5nXSAtIFRoZSBib29sZWFuIGZsYWcgdG8gYmxvY2sgdGhlIFVJIGR1cmluZyB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAqICAgRGVmYXVsdHMgYHRydWVgLlxuICAgICAgICovXG4gICAgICBhZGRDbGFzcyhlbCwgbmFtZXMsIG9wdHMgPSB7fSl7XG4gICAgICAgIG5hbWVzID0gQXJyYXkuaXNBcnJheShuYW1lcykgPyBuYW1lcyA6IG5hbWVzLnNwbGl0KFwiIFwiKVxuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIEpTLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgbmFtZXMsIFtdLCBvcHRzLnRyYW5zaXRpb24sIG9wdHMudGltZSwgb3duZXIsIG9wdHMuYmxvY2tpbmcpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgQ1NTIGNsYXNzZXMgZnJvbSBhbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gcmVtb3ZlIGNsYXNzZXMgZnJvbS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBuYW1lcyAtIFRoZSBjbGFzcyBuYW1lKHMpIHRvIHJlbW92ZS5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz17fV0gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy50cmFuc2l0aW9uXSAtIFRoZSBDU1MgdHJhbnNpdGlvbiBjbGFzc2VzIHRvIHNldC5cbiAgICAgICAqICAgQWNjZXB0cyBhIHN0cmluZyBvZiBjbGFzc2VzIHRvIGFwcGx5IHdoZW4gcmVtb3ZpbmcgY2xhc3NlcyBvclxuICAgICAgICogICBhIDMtdHVwbGUgY29udGFpbmluZyB0aGUgdHJhbnNpdGlvbiBjbGFzcywgdGhlIGNsYXNzIHRvIGFwcGx5XG4gICAgICAgKiAgIHRvIHN0YXJ0IHRoZSB0cmFuc2l0aW9uLCBhbmQgdGhlIGVuZGluZyB0cmFuc2l0aW9uIGNsYXNzLCBzdWNoIGFzOlxuICAgICAgICpcbiAgICAgICAqICAgICAgIFtcImVhc2Utb3V0IGR1cmF0aW9uLTMwMFwiLCBcIm9wYWNpdHktMTAwXCIsIFwib3BhY2l0eS0wXCJdXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVdIC0gVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5ibG9ja2luZ10gLSBUaGUgYm9vbGVhbiBmbGFnIHRvIGJsb2NrIHRoZSBVSSBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgKiAgIERlZmF1bHRzIGB0cnVlYC5cbiAgICAgICAqL1xuICAgICAgcmVtb3ZlQ2xhc3MoZWwsIG5hbWVzLCBvcHRzID0ge30pe1xuICAgICAgICBvcHRzLnRyYW5zaXRpb24gPSBKUy50cmFuc2l0aW9uQ2xhc3NlcyhvcHRzLnRyYW5zaXRpb24pXG4gICAgICAgIG5hbWVzID0gQXJyYXkuaXNBcnJheShuYW1lcykgPyBuYW1lcyA6IG5hbWVzLnNwbGl0KFwiIFwiKVxuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIEpTLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIG5hbWVzLCBvcHRzLnRyYW5zaXRpb24sIG9wdHMudGltZSwgb3duZXIsIG9wdHMuYmxvY2tpbmcpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRvZ2dsZXMgQ1NTIGNsYXNzZXMgb24gYW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIHRvZ2dsZSBjbGFzc2VzIG9uLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IG5hbWVzIC0gVGhlIGNsYXNzIG5hbWUocykgdG8gdG9nZ2xlLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnRyYW5zaXRpb25dIC0gVGhlIENTUyB0cmFuc2l0aW9uIGNsYXNzZXMgdG8gc2V0LlxuICAgICAgICogICBBY2NlcHRzIGEgc3RyaW5nIG9mIGNsYXNzZXMgdG8gYXBwbHkgd2hlbiB0b2dnbGluZyBjbGFzc2VzIG9yXG4gICAgICAgKiAgIGEgMy10dXBsZSBjb250YWluaW5nIHRoZSB0cmFuc2l0aW9uIGNsYXNzLCB0aGUgY2xhc3MgdG8gYXBwbHlcbiAgICAgICAqICAgdG8gc3RhcnQgdGhlIHRyYW5zaXRpb24sIGFuZCB0aGUgZW5kaW5nIHRyYW5zaXRpb24gY2xhc3MsIHN1Y2ggYXM6XG4gICAgICAgKlxuICAgICAgICogICAgICAgW1wiZWFzZS1vdXQgZHVyYXRpb24tMzAwXCIsIFwib3BhY2l0eS0xMDBcIiwgXCJvcGFjaXR5LTBcIl1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZV0gLSBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmJsb2NraW5nXSAtIFRoZSBib29sZWFuIGZsYWcgdG8gYmxvY2sgdGhlIFVJIGR1cmluZyB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAqICAgRGVmYXVsdHMgYHRydWVgLlxuICAgICAgICovXG4gICAgICB0b2dnbGVDbGFzcyhlbCwgbmFtZXMsIG9wdHMgPSB7fSl7XG4gICAgICAgIG9wdHMudHJhbnNpdGlvbiA9IEpTLnRyYW5zaXRpb25DbGFzc2VzKG9wdHMudHJhbnNpdGlvbilcbiAgICAgICAgbmFtZXMgPSBBcnJheS5pc0FycmF5KG5hbWVzKSA/IG5hbWVzIDogbmFtZXMuc3BsaXQoXCIgXCIpXG4gICAgICAgIGxldCBvd25lciA9IGhvb2suX192aWV3KCkubGl2ZVNvY2tldC5vd25lcihlbClcbiAgICAgICAgSlMudG9nZ2xlQ2xhc3NlcyhlbCwgbmFtZXMsIG9wdHMudHJhbnNpdGlvbiwgb3B0cy50aW1lLCBvd25lciwgb3B0cy5ibG9ja2luZylcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQXBwbGllcyBhIENTUyB0cmFuc2l0aW9uIHRvIGFuIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byBhcHBseSB0aGUgdHJhbnNpdGlvbiB0by5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSB0cmFuc2l0aW9uIC0gVGhlIHRyYW5zaXRpb24gY2xhc3MoZXMpIHRvIGFwcGx5LlxuICAgICAgICogICBBY2NlcHRzIGEgc3RyaW5nIG9mIGNsYXNzZXMgdG8gYXBwbHkgd2hlbiB0cmFuc2l0aW9uaW5nIG9yXG4gICAgICAgKiAgIGEgMy10dXBsZSBjb250YWluaW5nIHRoZSB0cmFuc2l0aW9uIGNsYXNzLCB0aGUgY2xhc3MgdG8gYXBwbHlcbiAgICAgICAqICAgdG8gc3RhcnQgdGhlIHRyYW5zaXRpb24sIGFuZCB0aGUgZW5kaW5nIHRyYW5zaXRpb24gY2xhc3MsIHN1Y2ggYXM6XG4gICAgICAgKlxuICAgICAgICogICAgICAgW1wiZWFzZS1vdXQgZHVyYXRpb24tMzAwXCIsIFwib3BhY2l0eS0xMDBcIiwgXCJvcGFjaXR5LTBcIl1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9e31dIC0gT3B0aW9uYWwgc2V0dGluZ3MuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZV0gLSBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmJsb2NraW5nXSAtIFRoZSBib29sZWFuIGZsYWcgdG8gYmxvY2sgdGhlIFVJIGR1cmluZyB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAqICAgRGVmYXVsdHMgYHRydWVgLlxuICAgICAgICovXG4gICAgICB0cmFuc2l0aW9uKGVsLCB0cmFuc2l0aW9uLCBvcHRzID0ge30pe1xuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIEpTLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIFtdLCBKUy50cmFuc2l0aW9uQ2xhc3Nlcyh0cmFuc2l0aW9uKSwgb3B0cy50aW1lLCBvd25lciwgb3B0cy5ibG9ja2luZylcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyBhbiBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIHNldCB0aGUgYXR0cmlidXRlIG9uLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHIgLSBUaGUgYXR0cmlidXRlIG5hbWUgdG8gc2V0LlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbCAtIFRoZSB2YWx1ZSB0byBzZXQgZm9yIHRoZSBhdHRyaWJ1dGUuXG4gICAgICAgKi9cbiAgICAgIHNldEF0dHJpYnV0ZShlbCwgYXR0ciwgdmFsKXsgSlMuc2V0T3JSZW1vdmVBdHRycyhlbCwgW1thdHRyLCB2YWxdXSwgW10pIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyBhbiBhdHRyaWJ1dGUgZnJvbSBhbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgZnJvbS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyIC0gVGhlIGF0dHJpYnV0ZSBuYW1lIHRvIHJlbW92ZS5cbiAgICAgICAqL1xuICAgICAgcmVtb3ZlQXR0cmlidXRlKGVsLCBhdHRyKXsgSlMuc2V0T3JSZW1vdmVBdHRycyhlbCwgW10sIFthdHRyXSkgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUb2dnbGVzIGFuIGF0dHJpYnV0ZSBvbiBhbiBlbGVtZW50IGJldHdlZW4gdHdvIHZhbHVlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIHRvZ2dsZSB0aGUgYXR0cmlidXRlIG9uLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHIgLSBUaGUgYXR0cmlidXRlIG5hbWUgdG8gdG9nZ2xlLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbDEgLSBUaGUgZmlyc3QgdmFsdWUgdG8gdG9nZ2xlIGJldHdlZW4uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsMiAtIFRoZSBzZWNvbmQgdmFsdWUgdG8gdG9nZ2xlIGJldHdlZW4uXG4gICAgICAgKi9cbiAgICAgIHRvZ2dsZUF0dHJpYnV0ZShlbCwgYXR0ciwgdmFsMSwgdmFsMil7IEpTLnRvZ2dsZUF0dHIoZWwsIGF0dHIsIHZhbDEsIHZhbDIpIH0sXG4gICAgfVxuICB9XG5cbiAgcHVzaEV2ZW50KGV2ZW50LCBwYXlsb2FkID0ge30sIG9uUmVwbHkpe1xuICAgIGlmKG9uUmVwbHkgPT09IHVuZGVmaW5lZCl7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlZiA9IHRoaXMuX192aWV3KCkucHVzaEhvb2tFdmVudCh0aGlzLmVsLCBudWxsLCBldmVudCwgcGF5bG9hZCwgKHJlcGx5LCBfcmVmKSA9PiByZXNvbHZlKHJlcGx5KSlcbiAgICAgICAgICBpZihyZWYgPT09IGZhbHNlKXtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJ1bmFibGUgdG8gcHVzaCBob29rIGV2ZW50LiBMaXZlVmlldyBub3QgY29ubmVjdGVkXCIpKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3Ipe1xuICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX192aWV3KCkucHVzaEhvb2tFdmVudCh0aGlzLmVsLCBudWxsLCBldmVudCwgcGF5bG9hZCwgb25SZXBseSlcbiAgfVxuXG4gIHB1c2hFdmVudFRvKHBoeFRhcmdldCwgZXZlbnQsIHBheWxvYWQgPSB7fSwgb25SZXBseSl7XG4gICAgaWYob25SZXBseSA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5fX3ZpZXcoKS53aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgKHZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVmID0gdmlldy5wdXNoSG9va0V2ZW50KHRoaXMuZWwsIHRhcmdldEN0eCwgZXZlbnQsIHBheWxvYWQsIChyZXBseSwgX3JlZikgPT4gcmVzb2x2ZShyZXBseSkpXG4gICAgICAgICAgICBpZihyZWYgPT09IGZhbHNlKXtcbiAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcInVuYWJsZSB0byBwdXNoIGhvb2sgZXZlbnQuIExpdmVWaWV3IG5vdCBjb25uZWN0ZWRcIikpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBjYXRjaCAoZXJyb3Ipe1xuICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX192aWV3KCkud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsICh2aWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIHJldHVybiB2aWV3LnB1c2hIb29rRXZlbnQodGhpcy5lbCwgdGFyZ2V0Q3R4LCBldmVudCwgcGF5bG9hZCwgb25SZXBseSlcbiAgICB9KVxuICB9XG5cbiAgaGFuZGxlRXZlbnQoZXZlbnQsIGNhbGxiYWNrKXtcbiAgICBsZXQgY2FsbGJhY2tSZWYgPSAoY3VzdG9tRXZlbnQsIGJ5cGFzcykgPT4gYnlwYXNzID8gZXZlbnQgOiBjYWxsYmFjayhjdXN0b21FdmVudC5kZXRhaWwpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoYHBoeDoke2V2ZW50fWAsIGNhbGxiYWNrUmVmKVxuICAgIHRoaXMuX19saXN0ZW5lcnMuYWRkKGNhbGxiYWNrUmVmKVxuICAgIHJldHVybiBjYWxsYmFja1JlZlxuICB9XG5cbiAgcmVtb3ZlSGFuZGxlRXZlbnQoY2FsbGJhY2tSZWYpe1xuICAgIGxldCBldmVudCA9IGNhbGxiYWNrUmVmKG51bGwsIHRydWUpXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoYHBoeDoke2V2ZW50fWAsIGNhbGxiYWNrUmVmKVxuICAgIHRoaXMuX19saXN0ZW5lcnMuZGVsZXRlKGNhbGxiYWNrUmVmKVxuICB9XG5cbiAgdXBsb2FkKG5hbWUsIGZpbGVzKXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcoKS5kaXNwYXRjaFVwbG9hZHMobnVsbCwgbmFtZSwgZmlsZXMpXG4gIH1cblxuICB1cGxvYWRUbyhwaHhUYXJnZXQsIG5hbWUsIGZpbGVzKXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcoKS53aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgKHZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgdmlldy5kaXNwYXRjaFVwbG9hZHModGFyZ2V0Q3R4LCBuYW1lLCBmaWxlcylcbiAgICB9KVxuICB9XG5cbiAgX19jbGVhbnVwX18oKXtcbiAgICB0aGlzLl9fbGlzdGVuZXJzLmZvckVhY2goY2FsbGJhY2tSZWYgPT4gdGhpcy5yZW1vdmVIYW5kbGVFdmVudChjYWxsYmFja1JlZikpXG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBCRUZPUkVfVU5MT0FEX0xPQURFUl9USU1FT1VULFxuICBDSEVDS0FCTEVfSU5QVVRTLFxuICBDT05TRUNVVElWRV9SRUxPQURTLFxuICBQSFhfQVVUT19SRUNPVkVSLFxuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfQ09OTkVDVEVEX0NMQVNTLFxuICBQSFhfRElTQUJMRV9XSVRILFxuICBQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUsXG4gIFBIWF9ESVNBQkxFRCxcbiAgUEhYX0xPQURJTkdfQ0xBU1MsXG4gIFBIWF9FUlJPUl9DTEFTUyxcbiAgUEhYX0NMSUVOVF9FUlJPUl9DTEFTUyxcbiAgUEhYX1NFUlZFUl9FUlJPUl9DTEFTUyxcbiAgUEhYX0hBU19GT0NVU0VELFxuICBQSFhfSEFTX1NVQk1JVFRFRCxcbiAgUEhYX0hPT0ssXG4gIFBIWF9QQVJFTlRfSUQsXG4gIFBIWF9QUk9HUkVTUyxcbiAgUEhYX1JFQURPTkxZLFxuICBQSFhfUkVGX0xPQURJTkcsXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfUkVGX0xPQ0ssXG4gIFBIWF9ST09UX0lELFxuICBQSFhfU0VTU0lPTixcbiAgUEhYX1NUQVRJQyxcbiAgUEhYX1RSQUNLX1NUQVRJQyxcbiAgUEhYX1RSQUNLX1VQTE9BRFMsXG4gIFBIWF9VUERBVEUsXG4gIFBIWF9VUExPQURfUkVGLFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX01BSU4sXG4gIFBIWF9NT1VOVEVELFxuICBQVVNIX1RJTUVPVVQsXG4gIFBIWF9WSUVXUE9SVF9UT1AsXG4gIFBIWF9WSUVXUE9SVF9CT1RUT00sXG4gIE1BWF9DSElMRF9KT0lOX0FUVEVNUFRTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNsb25lLFxuICBjbG9zZXN0UGh4QmluZGluZyxcbiAgaXNFbXB0eSxcbiAgaXNFcXVhbE9iaixcbiAgbG9nRXJyb3IsXG4gIG1heWJlLFxuICBpc0NpZCxcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgQnJvd3NlciBmcm9tIFwiLi9icm93c2VyXCJcbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBFbGVtZW50UmVmIGZyb20gXCIuL2VsZW1lbnRfcmVmXCJcbmltcG9ydCBET01QYXRjaCBmcm9tIFwiLi9kb21fcGF0Y2hcIlxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcbmltcG9ydCBSZW5kZXJlZCBmcm9tIFwiLi9yZW5kZXJlZFwiXG5pbXBvcnQgVmlld0hvb2sgZnJvbSBcIi4vdmlld19ob29rXCJcbmltcG9ydCBKUyBmcm9tIFwiLi9qc1wiXG5cbmV4cG9ydCBsZXQgcHJlcGVuZEZvcm1EYXRhS2V5ID0gKGtleSwgcHJlZml4KSA9PiB7XG4gIGxldCBpc0FycmF5ID0ga2V5LmVuZHNXaXRoKFwiW11cIilcbiAgLy8gUmVtb3ZlIHRoZSBcIltdXCIgaWYgaXQncyBhbiBhcnJheVxuICBsZXQgYmFzZUtleSA9IGlzQXJyYXkgPyBrZXkuc2xpY2UoMCwgLTIpIDoga2V5XG4gIC8vIFJlcGxhY2UgbGFzdCBvY2N1cnJlbmNlIG9mIGtleSBiZWZvcmUgYSBjbG9zaW5nIGJyYWNrZXQgb3IgdGhlIGVuZCB3aXRoIGtleSBwbHVzIHN1ZmZpeFxuICBiYXNlS2V5ID0gYmFzZUtleS5yZXBsYWNlKC8oW15cXFtcXF1dKykoXFxdPyQpLywgYCR7cHJlZml4fSQxJDJgKVxuICAvLyBBZGQgYmFjayB0aGUgXCJbXVwiIGlmIGl0IHdhcyBhbiBhcnJheVxuICBpZihpc0FycmF5KXsgYmFzZUtleSArPSBcIltdXCIgfVxuICByZXR1cm4gYmFzZUtleVxufVxuXG5sZXQgc2VyaWFsaXplRm9ybSA9IChmb3JtLCBtZXRhZGF0YSwgb25seU5hbWVzID0gW10pID0+IHtcbiAgY29uc3Qge3N1Ym1pdHRlciwgLi4ubWV0YX0gPSBtZXRhZGF0YVxuXG4gIC8vIFdlIG11c3QgaW5qZWN0IHRoZSBzdWJtaXR0ZXIgaW4gdGhlIG9yZGVyIHRoYXQgaXQgZXhpc3RzIGluIHRoZSBET01cbiAgLy8gcmVsYXRpdmUgdG8gb3RoZXIgaW5wdXRzLiBGb3IgZXhhbXBsZSwgZm9yIGNoZWNrYm94IGdyb3VwcywgdGhlIG9yZGVyIG11c3QgYmUgbWFpbnRhaW5lZC5cbiAgbGV0IGluamVjdGVkRWxlbWVudFxuICBpZihzdWJtaXR0ZXIgJiYgc3VibWl0dGVyLm5hbWUpe1xuICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpXG4gICAgaW5wdXQudHlwZSA9IFwiaGlkZGVuXCJcbiAgICAvLyBzZXQgdGhlIGZvcm0gYXR0cmlidXRlIGlmIHRoZSBzdWJtaXR0ZXIgaGFzIG9uZTtcbiAgICAvLyB0aGlzIGNhbiBoYXBwZW4gaWYgdGhlIGVsZW1lbnQgaXMgb3V0c2lkZSB0aGUgYWN0dWFsIGZvcm0gZWxlbWVudFxuICAgIGNvbnN0IGZvcm1JZCA9IHN1Ym1pdHRlci5nZXRBdHRyaWJ1dGUoXCJmb3JtXCIpXG4gICAgaWYoZm9ybUlkKXtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcImZvcm1cIiwgZm9ybUlkKVxuICAgIH1cbiAgICBpbnB1dC5uYW1lID0gc3VibWl0dGVyLm5hbWVcbiAgICBpbnB1dC52YWx1ZSA9IHN1Ym1pdHRlci52YWx1ZVxuICAgIHN1Ym1pdHRlci5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShpbnB1dCwgc3VibWl0dGVyKVxuICAgIGluamVjdGVkRWxlbWVudCA9IGlucHV0XG4gIH1cblxuICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKVxuICBjb25zdCB0b1JlbW92ZSA9IFtdXG5cbiAgZm9ybURhdGEuZm9yRWFjaCgodmFsLCBrZXksIF9pbmRleCkgPT4ge1xuICAgIGlmKHZhbCBpbnN0YW5jZW9mIEZpbGUpeyB0b1JlbW92ZS5wdXNoKGtleSkgfVxuICB9KVxuXG4gIC8vIENsZWFudXAgYWZ0ZXIgYnVpbGRpbmcgZmlsZURhdGFcbiAgdG9SZW1vdmUuZm9yRWFjaChrZXkgPT4gZm9ybURhdGEuZGVsZXRlKGtleSkpXG5cbiAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpXG5cbiAgbGV0IGVsZW1lbnRzID0gQXJyYXkuZnJvbShmb3JtLmVsZW1lbnRzKVxuICBmb3IobGV0IFtrZXksIHZhbF0gb2YgZm9ybURhdGEuZW50cmllcygpKXtcbiAgICBpZihvbmx5TmFtZXMubGVuZ3RoID09PSAwIHx8IG9ubHlOYW1lcy5pbmRleE9mKGtleSkgPj0gMCl7XG4gICAgICBsZXQgaW5wdXRzID0gZWxlbWVudHMuZmlsdGVyKGlucHV0ID0+IGlucHV0Lm5hbWUgPT09IGtleSlcbiAgICAgIGxldCBpc1VudXNlZCA9ICFpbnB1dHMuc29tZShpbnB1dCA9PiAoRE9NLnByaXZhdGUoaW5wdXQsIFBIWF9IQVNfRk9DVVNFRCkgfHwgRE9NLnByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVEKSkpXG4gICAgICBsZXQgaGlkZGVuID0gaW5wdXRzLmV2ZXJ5KGlucHV0ID0+IGlucHV0LnR5cGUgPT09IFwiaGlkZGVuXCIpXG4gICAgICBpZihpc1VudXNlZCAmJiAhKHN1Ym1pdHRlciAmJiBzdWJtaXR0ZXIubmFtZSA9PSBrZXkpICYmICFoaWRkZW4pe1xuICAgICAgICBwYXJhbXMuYXBwZW5kKHByZXBlbmRGb3JtRGF0YUtleShrZXksIFwiX3VudXNlZF9cIiksIFwiXCIpXG4gICAgICB9XG4gICAgICBwYXJhbXMuYXBwZW5kKGtleSwgdmFsKVxuICAgIH1cbiAgfVxuXG4gIC8vIHJlbW92ZSB0aGUgaW5qZWN0ZWQgZWxlbWVudCBhZ2FpblxuICAvLyAoaXQgd291bGQgYmUgcmVtb3ZlZCBieSB0aGUgbmV4dCBkb20gcGF0Y2ggYW55d2F5LCBidXQgdGhpcyBpcyBjbGVhbmVyKVxuICBpZihzdWJtaXR0ZXIgJiYgaW5qZWN0ZWRFbGVtZW50KXtcbiAgICBzdWJtaXR0ZXIucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChpbmplY3RlZEVsZW1lbnQpXG4gIH1cblxuICBmb3IobGV0IG1ldGFLZXkgaW4gbWV0YSl7IHBhcmFtcy5hcHBlbmQobWV0YUtleSwgbWV0YVttZXRhS2V5XSkgfVxuXG4gIHJldHVybiBwYXJhbXMudG9TdHJpbmcoKVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3IHtcbiAgc3RhdGljIGNsb3Nlc3RWaWV3KGVsKXtcbiAgICBsZXQgbGl2ZVZpZXdFbCA9IGVsLmNsb3Nlc3QoUEhYX1ZJRVdfU0VMRUNUT1IpXG4gICAgcmV0dXJuIGxpdmVWaWV3RWwgPyBET00ucHJpdmF0ZShsaXZlVmlld0VsLCBcInZpZXdcIikgOiBudWxsXG4gIH1cblxuICBjb25zdHJ1Y3RvcihlbCwgbGl2ZVNvY2tldCwgcGFyZW50VmlldywgZmxhc2gsIGxpdmVSZWZlcmVyKXtcbiAgICB0aGlzLmlzRGVhZCA9IGZhbHNlXG4gICAgdGhpcy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuICAgIHRoaXMuZmxhc2ggPSBmbGFzaFxuICAgIHRoaXMucGFyZW50ID0gcGFyZW50Vmlld1xuICAgIHRoaXMucm9vdCA9IHBhcmVudFZpZXcgPyBwYXJlbnRWaWV3LnJvb3QgOiB0aGlzXG4gICAgdGhpcy5lbCA9IGVsXG4gICAgRE9NLnB1dFByaXZhdGUodGhpcy5lbCwgXCJ2aWV3XCIsIHRoaXMpXG4gICAgdGhpcy5pZCA9IHRoaXMuZWwuaWRcbiAgICB0aGlzLnJlZiA9IDBcbiAgICB0aGlzLmxhc3RBY2tSZWYgPSBudWxsXG4gICAgdGhpcy5jaGlsZEpvaW5zID0gMFxuICAgIHRoaXMubG9hZGVyVGltZXIgPSBudWxsXG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMucGVuZGluZ0Zvcm1zID0gbmV3IFNldCgpXG4gICAgdGhpcy5yZWRpcmVjdCA9IGZhbHNlXG4gICAgdGhpcy5ocmVmID0gbnVsbFxuICAgIHRoaXMuam9pbkNvdW50ID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5qb2luQ291bnQgLSAxIDogMFxuICAgIHRoaXMuam9pbkF0dGVtcHRzID0gMFxuICAgIHRoaXMuam9pblBlbmRpbmcgPSB0cnVlXG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZVxuICAgIHRoaXMuam9pbkNhbGxiYWNrID0gZnVuY3Rpb24ob25Eb25lKXsgb25Eb25lICYmIG9uRG9uZSgpIH1cbiAgICB0aGlzLnN0b3BDYWxsYmFjayA9IGZ1bmN0aW9uKCl7IH1cbiAgICB0aGlzLnBlbmRpbmdKb2luT3BzID0gdGhpcy5wYXJlbnQgPyBudWxsIDogW11cbiAgICB0aGlzLnZpZXdIb29rcyA9IHt9XG4gICAgdGhpcy5mb3JtU3VibWl0cyA9IFtdXG4gICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMucGFyZW50ID8gbnVsbCA6IHt9XG4gICAgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdID0ge31cbiAgICB0aGlzLmZvcm1zRm9yUmVjb3ZlcnkgPSB7fVxuICAgIHRoaXMuY2hhbm5lbCA9IHRoaXMubGl2ZVNvY2tldC5jaGFubmVsKGBsdjoke3RoaXMuaWR9YCwgKCkgPT4ge1xuICAgICAgbGV0IHVybCA9IHRoaXMuaHJlZiAmJiB0aGlzLmV4cGFuZFVSTCh0aGlzLmhyZWYpXG4gICAgICByZXR1cm4ge1xuICAgICAgICByZWRpcmVjdDogdGhpcy5yZWRpcmVjdCA/IHVybCA6IHVuZGVmaW5lZCxcbiAgICAgICAgdXJsOiB0aGlzLnJlZGlyZWN0ID8gdW5kZWZpbmVkIDogdXJsIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgcGFyYW1zOiB0aGlzLmNvbm5lY3RQYXJhbXMobGl2ZVJlZmVyZXIpLFxuICAgICAgICBzZXNzaW9uOiB0aGlzLmdldFNlc3Npb24oKSxcbiAgICAgICAgc3RhdGljOiB0aGlzLmdldFN0YXRpYygpLFxuICAgICAgICBmbGFzaDogdGhpcy5mbGFzaCxcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgc2V0SHJlZihocmVmKXsgdGhpcy5ocmVmID0gaHJlZiB9XG5cbiAgc2V0UmVkaXJlY3QoaHJlZil7XG4gICAgdGhpcy5yZWRpcmVjdCA9IHRydWVcbiAgICB0aGlzLmhyZWYgPSBocmVmXG4gIH1cblxuICBpc01haW4oKXsgcmV0dXJuIHRoaXMuZWwuaGFzQXR0cmlidXRlKFBIWF9NQUlOKSB9XG5cbiAgY29ubmVjdFBhcmFtcyhsaXZlUmVmZXJlcil7XG4gICAgbGV0IHBhcmFtcyA9IHRoaXMubGl2ZVNvY2tldC5wYXJhbXModGhpcy5lbClcbiAgICBsZXQgbWFuaWZlc3QgPVxuICAgICAgRE9NLmFsbChkb2N1bWVudCwgYFske3RoaXMuYmluZGluZyhQSFhfVFJBQ0tfU1RBVElDKX1dYClcbiAgICAgICAgLm1hcChub2RlID0+IG5vZGUuc3JjIHx8IG5vZGUuaHJlZikuZmlsdGVyKHVybCA9PiB0eXBlb2YgKHVybCkgPT09IFwic3RyaW5nXCIpXG5cbiAgICBpZihtYW5pZmVzdC5sZW5ndGggPiAwKXsgcGFyYW1zW1wiX3RyYWNrX3N0YXRpY1wiXSA9IG1hbmlmZXN0IH1cbiAgICBwYXJhbXNbXCJfbW91bnRzXCJdID0gdGhpcy5qb2luQ291bnRcbiAgICBwYXJhbXNbXCJfbW91bnRfYXR0ZW1wdHNcIl0gPSB0aGlzLmpvaW5BdHRlbXB0c1xuICAgIHBhcmFtc1tcIl9saXZlX3JlZmVyZXJcIl0gPSBsaXZlUmVmZXJlclxuICAgIHRoaXMuam9pbkF0dGVtcHRzKytcblxuICAgIHJldHVybiBwYXJhbXNcbiAgfVxuXG4gIGlzQ29ubmVjdGVkKCl7IHJldHVybiB0aGlzLmNoYW5uZWwuY2FuUHVzaCgpIH1cblxuICBnZXRTZXNzaW9uKCl7IHJldHVybiB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTikgfVxuXG4gIGdldFN0YXRpYygpe1xuICAgIGxldCB2YWwgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfU1RBVElDKVxuICAgIHJldHVybiB2YWwgPT09IFwiXCIgPyBudWxsIDogdmFsXG4gIH1cblxuICBkZXN0cm95KGNhbGxiYWNrID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIHRoaXMuZGVzdHJveUFsbENoaWxkcmVuKClcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWVcbiAgICBkZWxldGUgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdXG4gICAgaWYodGhpcy5wYXJlbnQpeyBkZWxldGUgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMucGFyZW50LmlkXVt0aGlzLmlkXSB9XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubG9hZGVyVGltZXIpXG4gICAgbGV0IG9uRmluaXNoZWQgPSAoKSA9PiB7XG4gICAgICBjYWxsYmFjaygpXG4gICAgICBmb3IobGV0IGlkIGluIHRoaXMudmlld0hvb2tzKXtcbiAgICAgICAgdGhpcy5kZXN0cm95SG9vayh0aGlzLnZpZXdIb29rc1tpZF0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgRE9NLm1hcmtQaHhDaGlsZERlc3Ryb3llZCh0aGlzLmVsKVxuXG4gICAgdGhpcy5sb2coXCJkZXN0cm95ZWRcIiwgKCkgPT4gW1widGhlIGNoaWxkIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgcGFyZW50XCJdKVxuICAgIHRoaXMuY2hhbm5lbC5sZWF2ZSgpXG4gICAgICAucmVjZWl2ZShcIm9rXCIsIG9uRmluaXNoZWQpXG4gICAgICAucmVjZWl2ZShcImVycm9yXCIsIG9uRmluaXNoZWQpXG4gICAgICAucmVjZWl2ZShcInRpbWVvdXRcIiwgb25GaW5pc2hlZClcbiAgfVxuXG4gIHNldENvbnRhaW5lckNsYXNzZXMoLi4uY2xhc3Nlcyl7XG4gICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgUEhYX0NPTk5FQ1RFRF9DTEFTUyxcbiAgICAgIFBIWF9MT0FESU5HX0NMQVNTLFxuICAgICAgUEhYX0VSUk9SX0NMQVNTLFxuICAgICAgUEhYX0NMSUVOVF9FUlJPUl9DTEFTUyxcbiAgICAgIFBIWF9TRVJWRVJfRVJST1JfQ0xBU1NcbiAgICApXG4gICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXMpXG4gIH1cblxuICBzaG93TG9hZGVyKHRpbWVvdXQpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRlclRpbWVyKVxuICAgIGlmKHRpbWVvdXQpe1xuICAgICAgdGhpcy5sb2FkZXJUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zaG93TG9hZGVyKCksIHRpbWVvdXQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcihsZXQgaWQgaW4gdGhpcy52aWV3SG9va3MpeyB0aGlzLnZpZXdIb29rc1tpZF0uX19kaXNjb25uZWN0ZWQoKSB9XG4gICAgICB0aGlzLnNldENvbnRhaW5lckNsYXNzZXMoUEhYX0xPQURJTkdfQ0xBU1MpXG4gICAgfVxuICB9XG5cbiAgZXhlY0FsbChiaW5kaW5nKXtcbiAgICBET00uYWxsKHRoaXMuZWwsIGBbJHtiaW5kaW5nfV1gLCBlbCA9PiB0aGlzLmxpdmVTb2NrZXQuZXhlY0pTKGVsLCBlbC5nZXRBdHRyaWJ1dGUoYmluZGluZykpKVxuICB9XG5cbiAgaGlkZUxvYWRlcigpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRlclRpbWVyKVxuICAgIHRoaXMuc2V0Q29udGFpbmVyQ2xhc3NlcyhQSFhfQ09OTkVDVEVEX0NMQVNTKVxuICAgIHRoaXMuZXhlY0FsbCh0aGlzLmJpbmRpbmcoXCJjb25uZWN0ZWRcIikpXG4gIH1cblxuICB0cmlnZ2VyUmVjb25uZWN0ZWQoKXtcbiAgICBmb3IobGV0IGlkIGluIHRoaXMudmlld0hvb2tzKXsgdGhpcy52aWV3SG9va3NbaWRdLl9fcmVjb25uZWN0ZWQoKSB9XG4gIH1cblxuICBsb2coa2luZCwgbXNnQ2FsbGJhY2spe1xuICAgIHRoaXMubGl2ZVNvY2tldC5sb2codGhpcywga2luZCwgbXNnQ2FsbGJhY2spXG4gIH1cblxuICB0cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSA9IGZ1bmN0aW9uKCl7fSl7XG4gICAgdGhpcy5saXZlU29ja2V0LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lKVxuICB9XG5cbiAgLy8gY2FsbHMgdGhlIGNhbGxiYWNrIHdpdGggdGhlIHZpZXcgYW5kIHRhcmdldCBlbGVtZW50IGZvciB0aGUgZ2l2ZW4gcGh4VGFyZ2V0XG4gIC8vIHRhcmdldHMgY2FuIGJlOlxuICAvLyAgKiBhbiBlbGVtZW50IGl0c2VsZiwgdGhlbiBpdCBpcyBzaW1wbHkgcGFzc2VkIHRvIGxpdmVTb2NrZXQub3duZXI7XG4gIC8vICAqIGEgQ0lEIChDb21wb25lbnQgSUQpLCB0aGVuIHdlIGZpcnN0IHNlYXJjaCB0aGUgY29tcG9uZW50J3MgZWxlbWVudCBpbiB0aGUgRE9NXG4gIC8vICAqIGEgc2VsZWN0b3IsIHRoZW4gd2Ugc2VhcmNoIHRoZSBzZWxlY3RvciBpbiB0aGUgRE9NIGFuZCBjYWxsIHRoZSBjYWxsYmFja1xuICAvLyAgICBmb3IgZWFjaCBlbGVtZW50IGZvdW5kIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgb3duZXIgdmlld1xuICB3aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgY2FsbGJhY2ssIGRvbSA9IGRvY3VtZW50LCB2aWV3RWwpe1xuICAgIC8vIGluIHRoZSBmb3JtIHJlY292ZXJ5IGNhc2Ugd2Ugc2VhcmNoIGluIGEgdGVtcGxhdGUgZnJhZ21lbnQgaW5zdGVhZCBvZlxuICAgIC8vIHRoZSByZWFsIGRvbSwgdGhlcmVmb3JlIHdlIG9wdGlvbmFsbHkgcGFzcyBkb20gYW5kIHZpZXdFbFxuXG4gICAgaWYocGh4VGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgcGh4VGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCl7XG4gICAgICByZXR1cm4gdGhpcy5saXZlU29ja2V0Lm93bmVyKHBoeFRhcmdldCwgdmlldyA9PiBjYWxsYmFjayh2aWV3LCBwaHhUYXJnZXQpKVxuICAgIH1cblxuICAgIGlmKGlzQ2lkKHBoeFRhcmdldCkpe1xuICAgICAgbGV0IHRhcmdldHMgPSBET00uZmluZENvbXBvbmVudE5vZGVMaXN0KHZpZXdFbCB8fCB0aGlzLmVsLCBwaHhUYXJnZXQpXG4gICAgICBpZih0YXJnZXRzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGxvZ0Vycm9yKGBubyBjb21wb25lbnQgZm91bmQgbWF0Y2hpbmcgcGh4LXRhcmdldCBvZiAke3BoeFRhcmdldH1gKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcywgcGFyc2VJbnQocGh4VGFyZ2V0KSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRhcmdldHMgPSBBcnJheS5mcm9tKGRvbS5xdWVyeVNlbGVjdG9yQWxsKHBoeFRhcmdldCkpXG4gICAgICBpZih0YXJnZXRzLmxlbmd0aCA9PT0gMCl7IGxvZ0Vycm9yKGBub3RoaW5nIGZvdW5kIG1hdGNoaW5nIHRoZSBwaHgtdGFyZ2V0IHNlbGVjdG9yIFwiJHtwaHhUYXJnZXR9XCJgKSB9XG4gICAgICB0YXJnZXRzLmZvckVhY2godGFyZ2V0ID0+IHRoaXMubGl2ZVNvY2tldC5vd25lcih0YXJnZXQsIHZpZXcgPT4gY2FsbGJhY2sodmlldywgdGFyZ2V0KSkpXG4gICAgfVxuICB9XG5cbiAgYXBwbHlEaWZmKHR5cGUsIHJhd0RpZmYsIGNhbGxiYWNrKXtcbiAgICB0aGlzLmxvZyh0eXBlLCAoKSA9PiBbXCJcIiwgY2xvbmUocmF3RGlmZildKVxuICAgIGxldCB7ZGlmZiwgcmVwbHksIGV2ZW50cywgdGl0bGV9ID0gUmVuZGVyZWQuZXh0cmFjdChyYXdEaWZmKVxuICAgIGNhbGxiYWNrKHtkaWZmLCByZXBseSwgZXZlbnRzfSlcbiAgICBpZih0eXBlb2YgdGl0bGUgPT09IFwic3RyaW5nXCIgfHwgdHlwZSA9PSBcIm1vdW50XCIpeyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IERPTS5wdXRUaXRsZSh0aXRsZSkpIH1cbiAgfVxuXG4gIG9uSm9pbihyZXNwKXtcbiAgICBsZXQge3JlbmRlcmVkLCBjb250YWluZXIsIGxpdmV2aWV3X3ZlcnNpb259ID0gcmVzcFxuICAgIGlmKGNvbnRhaW5lcil7XG4gICAgICBsZXQgW3RhZywgYXR0cnNdID0gY29udGFpbmVyXG4gICAgICB0aGlzLmVsID0gRE9NLnJlcGxhY2VSb290Q29udGFpbmVyKHRoaXMuZWwsIHRhZywgYXR0cnMpXG4gICAgfVxuICAgIHRoaXMuY2hpbGRKb2lucyA9IDBcbiAgICB0aGlzLmpvaW5QZW5kaW5nID0gdHJ1ZVxuICAgIHRoaXMuZmxhc2ggPSBudWxsXG4gICAgaWYodGhpcy5yb290ID09PSB0aGlzKXtcbiAgICAgIHRoaXMuZm9ybXNGb3JSZWNvdmVyeSA9IHRoaXMuZ2V0Rm9ybXNGb3JSZWNvdmVyeSgpXG4gICAgfVxuICAgIGlmKHRoaXMuaXNNYWluKCkgJiYgd2luZG93Lmhpc3Rvcnkuc3RhdGUgPT09IG51bGwpe1xuICAgICAgLy8gc2V0IGluaXRpYWwgaGlzdG9yeSBlbnRyeSBpZiB0aGlzIGlzIHRoZSBmaXJzdCBwYWdlIGxvYWQgKG5vIGhpc3RvcnkpXG4gICAgICBCcm93c2VyLnB1c2hTdGF0ZShcInJlcGxhY2VcIiwge1xuICAgICAgICB0eXBlOiBcInBhdGNoXCIsXG4gICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICBwb3NpdGlvbjogdGhpcy5saXZlU29ja2V0LmN1cnJlbnRIaXN0b3J5UG9zaXRpb25cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYobGl2ZXZpZXdfdmVyc2lvbiAhPT0gdGhpcy5saXZlU29ja2V0LnZlcnNpb24oKSl7XG4gICAgICBjb25zb2xlLmVycm9yKGBMaXZlVmlldyBhc3NldCB2ZXJzaW9uIG1pc21hdGNoLiBKYXZhU2NyaXB0IHZlcnNpb24gJHt0aGlzLmxpdmVTb2NrZXQudmVyc2lvbigpfSB2cy4gc2VydmVyICR7bGl2ZXZpZXdfdmVyc2lvbn0uIFRvIGF2b2lkIGlzc3VlcywgcGxlYXNlIGVuc3VyZSB0aGF0IHlvdXIgYXNzZXRzIHVzZSB0aGUgc2FtZSB2ZXJzaW9uIGFzIHRoZSBzZXJ2ZXIuYClcbiAgICB9XG5cbiAgICBCcm93c2VyLmRyb3BMb2NhbCh0aGlzLmxpdmVTb2NrZXQubG9jYWxTdG9yYWdlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIENPTlNFQ1VUSVZFX1JFTE9BRFMpXG4gICAgdGhpcy5hcHBseURpZmYoXCJtb3VudFwiLCByZW5kZXJlZCwgKHtkaWZmLCBldmVudHN9KSA9PiB7XG4gICAgICB0aGlzLnJlbmRlcmVkID0gbmV3IFJlbmRlcmVkKHRoaXMuaWQsIGRpZmYpXG4gICAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZW5kZXJDb250YWluZXIobnVsbCwgXCJqb2luXCIpXG4gICAgICB0aGlzLmRyb3BQZW5kaW5nUmVmcygpXG4gICAgICB0aGlzLmpvaW5Db3VudCsrXG4gICAgICB0aGlzLmpvaW5BdHRlbXB0cyA9IDBcblxuICAgICAgdGhpcy5tYXliZVJlY292ZXJGb3JtcyhodG1sLCAoKSA9PiB7XG4gICAgICAgIHRoaXMub25Kb2luQ29tcGxldGUocmVzcCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgZHJvcFBlbmRpbmdSZWZzKCl7XG4gICAgRE9NLmFsbChkb2N1bWVudCwgYFske1BIWF9SRUZfU1JDfT1cIiR7dGhpcy5yZWZTcmMoKX1cIl1gLCBlbCA9PiB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRl9MT0FESU5HKVxuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfU1JDKVxuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfTE9DSylcbiAgICB9KVxuICB9XG5cbiAgb25Kb2luQ29tcGxldGUoe2xpdmVfcGF0Y2h9LCBodG1sLCBzdHJlYW1zLCBldmVudHMpe1xuICAgIC8vIEluIG9yZGVyIHRvIHByb3ZpZGUgYSBiZXR0ZXIgZXhwZXJpZW5jZSwgd2Ugd2FudCB0byBqb2luXG4gICAgLy8gYWxsIExpdmVWaWV3cyBmaXJzdCBhbmQgb25seSB0aGVuIGFwcGx5IHRoZWlyIHBhdGNoZXMuXG4gICAgaWYodGhpcy5qb2luQ291bnQgPiAxIHx8ICh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuaXNKb2luUGVuZGluZygpKSl7XG4gICAgICByZXR1cm4gdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXG4gICAgfVxuXG4gICAgLy8gT25lIGRvd25zaWRlIG9mIHRoaXMgYXBwcm9hY2ggaXMgdGhhdCB3ZSBuZWVkIHRvIGZpbmQgcGh4Q2hpbGRyZW5cbiAgICAvLyBpbiB0aGUgaHRtbCBmcmFnbWVudCwgaW5zdGVhZCBvZiBkaXJlY3RseSBvbiB0aGUgRE9NLiBUaGUgZnJhZ21lbnRcbiAgICAvLyBhbHNvIGRvZXMgbm90IGluY2x1ZGUgUEhYX1NUQVRJQywgc28gd2UgbmVlZCB0byBjb3B5IGl0IG92ZXIgZnJvbVxuICAgIC8vIHRoZSBET00uXG4gICAgbGV0IG5ld0NoaWxkcmVuID0gRE9NLmZpbmRQaHhDaGlsZHJlbkluRnJhZ21lbnQoaHRtbCwgdGhpcy5pZCkuZmlsdGVyKHRvRWwgPT4ge1xuICAgICAgbGV0IGZyb21FbCA9IHRvRWwuaWQgJiYgdGhpcy5lbC5xdWVyeVNlbGVjdG9yKGBbaWQ9XCIke3RvRWwuaWR9XCJdYClcbiAgICAgIGxldCBwaHhTdGF0aWMgPSBmcm9tRWwgJiYgZnJvbUVsLmdldEF0dHJpYnV0ZShQSFhfU1RBVElDKVxuICAgICAgaWYocGh4U3RhdGljKXsgdG9FbC5zZXRBdHRyaWJ1dGUoUEhYX1NUQVRJQywgcGh4U3RhdGljKSB9XG4gICAgICAvLyBzZXQgUEhYX1JPT1RfSUQgdG8gcHJldmVudCBldmVudHMgZnJvbSBiZWluZyBkaXNwYXRjaGVkIHRvIHRoZSByb290IHZpZXdcbiAgICAgIC8vIHdoaWxlIHRoZSBjaGlsZCBqb2luIGlzIHN0aWxsIHBlbmRpbmdcbiAgICAgIGlmKGZyb21FbCl7IGZyb21FbC5zZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQsIHRoaXMucm9vdC5pZCkgfVxuICAgICAgcmV0dXJuIHRoaXMuam9pbkNoaWxkKHRvRWwpXG4gICAgfSlcblxuICAgIGlmKG5ld0NoaWxkcmVuLmxlbmd0aCA9PT0gMCl7XG4gICAgICBpZih0aGlzLnBhcmVudCl7XG4gICAgICAgIHRoaXMucm9vdC5wZW5kaW5nSm9pbk9wcy5wdXNoKFt0aGlzLCAoKSA9PiB0aGlzLmFwcGx5Sm9pblBhdGNoKGxpdmVfcGF0Y2gsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cyldKVxuICAgICAgICB0aGlzLnBhcmVudC5hY2tKb2luKHRoaXMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uQWxsQ2hpbGRKb2luc0NvbXBsZXRlKClcbiAgICAgICAgdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdC5wZW5kaW5nSm9pbk9wcy5wdXNoKFt0aGlzLCAoKSA9PiB0aGlzLmFwcGx5Sm9pblBhdGNoKGxpdmVfcGF0Y2gsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cyldKVxuICAgIH1cbiAgfVxuXG4gIGF0dGFjaFRydWVEb2NFbCgpe1xuICAgIHRoaXMuZWwgPSBET00uYnlJZCh0aGlzLmlkKVxuICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKFBIWF9ST09UX0lELCB0aGlzLnJvb3QuaWQpXG4gIH1cblxuICAvLyB0aGlzIGlzIGludm9rZWQgZm9yIGRlYWQgYW5kIGxpdmUgdmlld3MsIHNvIHdlIG11c3QgZmlsdGVyIGJ5XG4gIC8vIGJ5IG93bmVyIHRvIGVuc3VyZSB3ZSBhcmVuJ3QgZHVwbGljYXRpbmcgaG9va3MgYWNyb3NzIGRpc2Nvbm5lY3RcbiAgLy8gYW5kIGNvbm5lY3RlZCBzdGF0ZXMuIFRoaXMgYWxzbyBoYW5kbGVzIGNhc2VzIHdoZXJlIGhvb2tzIGV4aXN0XG4gIC8vIGluIGEgcm9vdCBsYXlvdXQgd2l0aCBhIExWIGluIHRoZSBib2R5XG4gIGV4ZWNOZXdNb3VudGVkKHBhcmVudCA9IHRoaXMuZWwpe1xuICAgIGxldCBwaHhWaWV3cG9ydFRvcCA9IHRoaXMuYmluZGluZyhQSFhfVklFV1BPUlRfVE9QKVxuICAgIGxldCBwaHhWaWV3cG9ydEJvdHRvbSA9IHRoaXMuYmluZGluZyhQSFhfVklFV1BPUlRfQk9UVE9NKVxuICAgIERPTS5hbGwocGFyZW50LCBgWyR7cGh4Vmlld3BvcnRUb3B9XSwgWyR7cGh4Vmlld3BvcnRCb3R0b219XWAsIGhvb2tFbCA9PiB7XG4gICAgICBpZih0aGlzLm93bnNFbGVtZW50KGhvb2tFbCkpe1xuICAgICAgICBET00ubWFpbnRhaW5Qcml2YXRlSG9va3MoaG9va0VsLCBob29rRWwsIHBoeFZpZXdwb3J0VG9wLCBwaHhWaWV3cG9ydEJvdHRvbSlcbiAgICAgICAgdGhpcy5tYXliZUFkZE5ld0hvb2soaG9va0VsKVxuICAgICAgfVxuICAgIH0pXG4gICAgRE9NLmFsbChwYXJlbnQsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX0hPT0spfV0sIFtkYXRhLXBoeC0ke1BIWF9IT09LfV1gLCBob29rRWwgPT4ge1xuICAgICAgaWYodGhpcy5vd25zRWxlbWVudChob29rRWwpKXtcbiAgICAgICAgdGhpcy5tYXliZUFkZE5ld0hvb2soaG9va0VsKVxuICAgICAgfVxuICAgIH0pXG4gICAgRE9NLmFsbChwYXJlbnQsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX01PVU5URUQpfV1gLCBlbCA9PiB7XG4gICAgICBpZih0aGlzLm93bnNFbGVtZW50KGVsKSl7XG4gICAgICAgIHRoaXMubWF5YmVNb3VudGVkKGVsKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBhcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpe1xuICAgIHRoaXMuYXR0YWNoVHJ1ZURvY0VsKClcbiAgICBsZXQgcGF0Y2ggPSBuZXcgRE9NUGF0Y2godGhpcywgdGhpcy5lbCwgdGhpcy5pZCwgaHRtbCwgc3RyZWFtcywgbnVsbClcbiAgICBwYXRjaC5tYXJrUHJ1bmFibGVDb250ZW50Rm9yUmVtb3ZhbCgpXG4gICAgdGhpcy5wZXJmb3JtUGF0Y2gocGF0Y2gsIGZhbHNlLCB0cnVlKVxuICAgIHRoaXMuam9pbk5ld0NoaWxkcmVuKClcbiAgICB0aGlzLmV4ZWNOZXdNb3VudGVkKClcblxuICAgIHRoaXMuam9pblBlbmRpbmcgPSBmYWxzZVxuICAgIHRoaXMubGl2ZVNvY2tldC5kaXNwYXRjaEV2ZW50cyhldmVudHMpXG4gICAgdGhpcy5hcHBseVBlbmRpbmdVcGRhdGVzKClcblxuICAgIGlmKGxpdmVfcGF0Y2gpe1xuICAgICAgbGV0IHtraW5kLCB0b30gPSBsaXZlX3BhdGNoXG4gICAgICB0aGlzLmxpdmVTb2NrZXQuaGlzdG9yeVBhdGNoKHRvLCBraW5kKVxuICAgIH1cbiAgICB0aGlzLmhpZGVMb2FkZXIoKVxuICAgIGlmKHRoaXMuam9pbkNvdW50ID4gMSl7IHRoaXMudHJpZ2dlclJlY29ubmVjdGVkKCkgfVxuICAgIHRoaXMuc3RvcENhbGxiYWNrKClcbiAgfVxuXG4gIHRyaWdnZXJCZWZvcmVVcGRhdGVIb29rKGZyb21FbCwgdG9FbCl7XG4gICAgdGhpcy5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvbkJlZm9yZUVsVXBkYXRlZFwiLCBbZnJvbUVsLCB0b0VsXSlcbiAgICBsZXQgaG9vayA9IHRoaXMuZ2V0SG9vayhmcm9tRWwpXG4gICAgbGV0IGlzSWdub3JlZCA9IGhvb2sgJiYgRE9NLmlzSWdub3JlZChmcm9tRWwsIHRoaXMuYmluZGluZyhQSFhfVVBEQVRFKSlcbiAgICBpZihob29rICYmICFmcm9tRWwuaXNFcXVhbE5vZGUodG9FbCkgJiYgIShpc0lnbm9yZWQgJiYgaXNFcXVhbE9iaihmcm9tRWwuZGF0YXNldCwgdG9FbC5kYXRhc2V0KSkpe1xuICAgICAgaG9vay5fX2JlZm9yZVVwZGF0ZSgpXG4gICAgICByZXR1cm4gaG9va1xuICAgIH1cbiAgfVxuXG4gIG1heWJlTW91bnRlZChlbCl7XG4gICAgbGV0IHBoeE1vdW50ZWQgPSBlbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9NT1VOVEVEKSlcbiAgICBsZXQgaGFzQmVlbkludm9rZWQgPSBwaHhNb3VudGVkICYmIERPTS5wcml2YXRlKGVsLCBcIm1vdW50ZWRcIilcbiAgICBpZihwaHhNb3VudGVkICYmICFoYXNCZWVuSW52b2tlZCl7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQuZXhlY0pTKGVsLCBwaHhNb3VudGVkKVxuICAgICAgRE9NLnB1dFByaXZhdGUoZWwsIFwibW91bnRlZFwiLCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIG1heWJlQWRkTmV3SG9vayhlbCl7XG4gICAgbGV0IG5ld0hvb2sgPSB0aGlzLmFkZEhvb2soZWwpXG4gICAgaWYobmV3SG9vayl7IG5ld0hvb2suX19tb3VudGVkKCkgfVxuICB9XG5cbiAgcGVyZm9ybVBhdGNoKHBhdGNoLCBwcnVuZUNpZHMsIGlzSm9pblBhdGNoID0gZmFsc2Upe1xuICAgIGxldCByZW1vdmVkRWxzID0gW11cbiAgICBsZXQgcGh4Q2hpbGRyZW5BZGRlZCA9IGZhbHNlXG4gICAgbGV0IHVwZGF0ZWRIb29rSWRzID0gbmV3IFNldCgpXG5cbiAgICB0aGlzLmxpdmVTb2NrZXQudHJpZ2dlckRPTShcIm9uUGF0Y2hTdGFydFwiLCBbcGF0Y2gudGFyZ2V0Q29udGFpbmVyXSlcblxuICAgIHBhdGNoLmFmdGVyKFwiYWRkZWRcIiwgZWwgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvbk5vZGVBZGRlZFwiLCBbZWxdKVxuICAgICAgbGV0IHBoeFZpZXdwb3J0VG9wID0gdGhpcy5iaW5kaW5nKFBIWF9WSUVXUE9SVF9UT1ApXG4gICAgICBsZXQgcGh4Vmlld3BvcnRCb3R0b20gPSB0aGlzLmJpbmRpbmcoUEhYX1ZJRVdQT1JUX0JPVFRPTSlcbiAgICAgIERPTS5tYWludGFpblByaXZhdGVIb29rcyhlbCwgZWwsIHBoeFZpZXdwb3J0VG9wLCBwaHhWaWV3cG9ydEJvdHRvbSlcbiAgICAgIHRoaXMubWF5YmVBZGROZXdIb29rKGVsKVxuICAgICAgaWYoZWwuZ2V0QXR0cmlidXRlKXsgdGhpcy5tYXliZU1vdW50ZWQoZWwpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJwaHhDaGlsZEFkZGVkXCIsIGVsID0+IHtcbiAgICAgIGlmKERPTS5pc1BoeFN0aWNreShlbCkpe1xuICAgICAgICB0aGlzLmxpdmVTb2NrZXQuam9pblJvb3RWaWV3cygpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwaHhDaGlsZHJlbkFkZGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5iZWZvcmUoXCJ1cGRhdGVkXCIsIChmcm9tRWwsIHRvRWwpID0+IHtcbiAgICAgIGxldCBob29rID0gdGhpcy50cmlnZ2VyQmVmb3JlVXBkYXRlSG9vayhmcm9tRWwsIHRvRWwpXG4gICAgICBpZihob29rKXsgdXBkYXRlZEhvb2tJZHMuYWRkKGZyb21FbC5pZCkgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5hZnRlcihcInVwZGF0ZWRcIiwgZWwgPT4ge1xuICAgICAgaWYodXBkYXRlZEhvb2tJZHMuaGFzKGVsLmlkKSl7IHRoaXMuZ2V0SG9vayhlbCkuX191cGRhdGVkKCkgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5hZnRlcihcImRpc2NhcmRlZFwiLCAoZWwpID0+IHtcbiAgICAgIGlmKGVsLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSl7IHJlbW92ZWRFbHMucHVzaChlbCkgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5hZnRlcihcInRyYW5zaXRpb25zRGlzY2FyZGVkXCIsIGVscyA9PiB0aGlzLmFmdGVyRWxlbWVudHNSZW1vdmVkKGVscywgcHJ1bmVDaWRzKSlcbiAgICBwYXRjaC5wZXJmb3JtKGlzSm9pblBhdGNoKVxuICAgIHRoaXMuYWZ0ZXJFbGVtZW50c1JlbW92ZWQocmVtb3ZlZEVscywgcHJ1bmVDaWRzKVxuXG4gICAgdGhpcy5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvblBhdGNoRW5kXCIsIFtwYXRjaC50YXJnZXRDb250YWluZXJdKVxuICAgIHJldHVybiBwaHhDaGlsZHJlbkFkZGVkXG4gIH1cblxuICBhZnRlckVsZW1lbnRzUmVtb3ZlZChlbGVtZW50cywgcHJ1bmVDaWRzKXtcbiAgICBsZXQgZGVzdHJveWVkQ0lEcyA9IFtdXG4gICAgZWxlbWVudHMuZm9yRWFjaChwYXJlbnQgPT4ge1xuICAgICAgbGV0IGNvbXBvbmVudHMgPSBET00uYWxsKHBhcmVudCwgYFske1BIWF9DT01QT05FTlR9XWApXG4gICAgICBsZXQgaG9va3MgPSBET00uYWxsKHBhcmVudCwgYFske3RoaXMuYmluZGluZyhQSFhfSE9PSyl9XSwgW2RhdGEtcGh4LWhvb2tdYClcbiAgICAgIGNvbXBvbmVudHMuY29uY2F0KHBhcmVudCkuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGxldCBjaWQgPSB0aGlzLmNvbXBvbmVudElEKGVsKVxuICAgICAgICBpZihpc0NpZChjaWQpICYmIGRlc3Ryb3llZENJRHMuaW5kZXhPZihjaWQpID09PSAtMSl7IGRlc3Ryb3llZENJRHMucHVzaChjaWQpIH1cbiAgICAgIH0pXG4gICAgICBob29rcy5jb25jYXQocGFyZW50KS5mb3JFYWNoKGhvb2tFbCA9PiB7XG4gICAgICAgIGxldCBob29rID0gdGhpcy5nZXRIb29rKGhvb2tFbClcbiAgICAgICAgaG9vayAmJiB0aGlzLmRlc3Ryb3lIb29rKGhvb2spXG4gICAgICB9KVxuICAgIH0pXG4gICAgLy8gV2Ugc2hvdWxkIG5vdCBwcnVuZUNpZHMgb24gam9pbnMuIE90aGVyd2lzZSwgaW4gY2FzZSBvZlxuICAgIC8vIHJlam9pbnMsIHdlIG1heSBub3RpZnkgY2lkcyB0aGF0IG5vIGxvbmdlciBiZWxvbmcgdG8gdGhlXG4gICAgLy8gY3VycmVudCBMaXZlVmlldyB0byBiZSByZW1vdmVkLlxuICAgIGlmKHBydW5lQ2lkcyl7XG4gICAgICB0aGlzLm1heWJlUHVzaENvbXBvbmVudHNEZXN0cm95ZWQoZGVzdHJveWVkQ0lEcylcbiAgICB9XG4gIH1cblxuICBqb2luTmV3Q2hpbGRyZW4oKXtcbiAgICBET00uZmluZFBoeENoaWxkcmVuKHRoaXMuZWwsIHRoaXMuaWQpLmZvckVhY2goZWwgPT4gdGhpcy5qb2luQ2hpbGQoZWwpKVxuICB9XG5cbiAgbWF5YmVSZWNvdmVyRm9ybXMoaHRtbCwgY2FsbGJhY2spe1xuICAgIGNvbnN0IHBoeENoYW5nZSA9IHRoaXMuYmluZGluZyhcImNoYW5nZVwiKVxuICAgIGNvbnN0IG9sZEZvcm1zID0gdGhpcy5yb290LmZvcm1zRm9yUmVjb3ZlcnlcbiAgICAvLyBTbyB3aHkgZG8gd2UgY3JlYXRlIGEgdGVtcGxhdGUgZWxlbWVudCBoZXJlP1xuICAgIC8vIE9uZSB3YXkgdG8gcmVjb3ZlciBmb3JtcyB3b3VsZCBiZSB0byBpbW1lZGlhdGVseSBhcHBseSB0aGUgbW91bnRcbiAgICAvLyBwYXRjaCBhbmQgdGhlbiBhZnRlcndhcmRzIHJlY292ZXIgdGhlIGZvcm1zLiBIb3dldmVyLCB0aGlzIHdvdWxkXG4gICAgLy8gY2F1c2UgYSBmbGlja2VyLCBiZWNhdXNlIHRoZSBtb3VudCBwYXRjaCB3b3VsZCByZW1vdmUgdGhlIGZvcm0gY29udGVudFxuICAgIC8vIHVudGlsIGl0IGlzIHJlc3RvcmVkLiBUaGVyZWZvcmUgTFYgZGVjaWRlZCB0byBkbyBmb3JtIHJlY292ZXJ5IHdpdGggdGhlXG4gICAgLy8gcmF3IEhUTUwgYmVmb3JlIGl0IGlzIGFwcGxpZWQgYW5kIGRlbGF5IHRoZSBtb3VudCBwYXRjaCB1bnRpbCB0aGUgZm9ybVxuICAgIC8vIHJlY292ZXJ5IGV2ZW50cyBhcmUgZG9uZS5cbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sXG4gICAgLy8gYmVjYXVzZSB3ZSB3b3JrIHdpdGggYSB0ZW1wbGF0ZSBlbGVtZW50LCB3ZSBtdXN0IG1hbnVhbGx5IGNvcHkgdGhlIGF0dHJpYnV0ZXNcbiAgICAvLyBvdGhlcndpc2UgdGhlIG93bmVyIC8gdGFyZ2V0IGhlbHBlcnMgZG9uJ3Qgd29yayBwcm9wZXJseVxuICAgIGNvbnN0IHJvb3RFbCA9IHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICByb290RWwuaWQgPSB0aGlzLmlkXG4gICAgcm9vdEVsLnNldEF0dHJpYnV0ZShQSFhfUk9PVF9JRCwgdGhpcy5yb290LmlkKVxuICAgIHJvb3RFbC5zZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04sIHRoaXMuZ2V0U2Vzc2lvbigpKVxuICAgIHJvb3RFbC5zZXRBdHRyaWJ1dGUoUEhYX1NUQVRJQywgdGhpcy5nZXRTdGF0aWMoKSlcbiAgICByb290RWwuc2V0QXR0cmlidXRlKFBIWF9QQVJFTlRfSUQsIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuaWQgOiBudWxsKVxuXG4gICAgLy8gd2UgZ28gb3ZlciBhbGwgZm9ybSBlbGVtZW50cyBpbiB0aGUgbmV3IEhUTUwgZm9yIHRoZSBMVlxuICAgIC8vIGFuZCBsb29rIGZvciBvbGQgZm9ybXMgaW4gdGhlIGBmb3Jtc0ZvclJlY292ZXJ5YCBvYmplY3Q7XG4gICAgLy8gdGhlIGZvcm1zRm9yUmVjb3ZlcnkgY2FuIGFsc28gY29udGFpbiBmb3JtcyBmcm9tIGNoaWxkIHZpZXdzXG4gICAgY29uc3QgZm9ybXNUb1JlY292ZXIgPVxuICAgICAgLy8gd2UgZ28gb3ZlciBhbGwgZm9ybXMgaW4gdGhlIG5ldyBET007IGJlY2F1c2UgdGhpcyBpcyBvbmx5IHRoZSBIVE1MIGZvciB0aGUgY3VycmVudFxuICAgICAgLy8gdmlldywgd2UgY2FuIGJlIHN1cmUgdGhhdCBhbGwgZm9ybXMgYXJlIG93bmVkIGJ5IHRoaXMgdmlldzpcbiAgICAgIERPTS5hbGwodGVtcGxhdGUuY29udGVudCwgXCJmb3JtXCIpXG4gICAgICAgIC8vIG9ubHkgcmVjb3ZlciBmb3JtcyB0aGF0IGhhdmUgYW4gaWQgYW5kIGFyZSBpbiB0aGUgb2xkIERPTVxuICAgICAgICAuZmlsdGVyKG5ld0Zvcm0gPT4gbmV3Rm9ybS5pZCAmJiBvbGRGb3Jtc1tuZXdGb3JtLmlkXSlcbiAgICAgICAgLy8gYWJhbmRvbiBmb3JtcyB3ZSBhbHJlYWR5IHRyaWVkIHRvIHJlY292ZXIgdG8gcHJldmVudCBsb29waW5nIGEgZmFpbGVkIHN0YXRlXG4gICAgICAgIC5maWx0ZXIobmV3Rm9ybSA9PiAhdGhpcy5wZW5kaW5nRm9ybXMuaGFzKG5ld0Zvcm0uaWQpKVxuICAgICAgICAvLyBvbmx5IHJlY292ZXIgaWYgdGhlIGZvcm0gaGFzIHRoZSBzYW1lIHBoeC1jaGFuZ2UgdmFsdWVcbiAgICAgICAgLmZpbHRlcihuZXdGb3JtID0+IG9sZEZvcm1zW25ld0Zvcm0uaWRdLmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpID09PSBuZXdGb3JtLmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpKVxuICAgICAgICAubWFwKG5ld0Zvcm0gPT4ge1xuICAgICAgICAgIHJldHVybiBbb2xkRm9ybXNbbmV3Rm9ybS5pZF0sIG5ld0Zvcm1dXG4gICAgICAgIH0pXG5cbiAgICBpZihmb3Jtc1RvUmVjb3Zlci5sZW5ndGggPT09IDApe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICBmb3Jtc1RvUmVjb3Zlci5mb3JFYWNoKChbb2xkRm9ybSwgbmV3Rm9ybV0sIGkpID0+IHtcbiAgICAgIHRoaXMucGVuZGluZ0Zvcm1zLmFkZChuZXdGb3JtLmlkKVxuICAgICAgLy8gaXQgaXMgaW1wb3J0YW50IHRvIHVzZSB0aGUgZmlyc3RFbGVtZW50Q2hpbGQgb2YgdGhlIHRlbXBsYXRlIGNvbnRlbnRcbiAgICAgIC8vIGJlY2F1c2Ugd2hlbiB0cmF2ZXJzaW5nIGEgZG9jdW1lbnRGcmFnbWVudCB1c2luZyBwYXJlbnROb2RlLCB3ZSB3b24ndCBldmVyIGFycml2ZSBhdFxuICAgICAgLy8gdGhlIGZyYWdtZW50OyBhcyB0aGUgdGVtcGxhdGUgaXMgYWx3YXlzIGEgTGl2ZVZpZXcsIHdlIGNhbiBiZSBzdXJlIHRoYXQgdGhlcmUgaXMgb25seVxuICAgICAgLy8gb25lIGNoaWxkIG9uIHRoZSByb290IGxldmVsXG4gICAgICB0aGlzLnB1c2hGb3JtUmVjb3Zlcnkob2xkRm9ybSwgbmV3Rm9ybSwgdGVtcGxhdGUuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZCwgKCkgPT4ge1xuICAgICAgICB0aGlzLnBlbmRpbmdGb3Jtcy5kZWxldGUobmV3Rm9ybS5pZClcbiAgICAgICAgLy8gd2Ugb25seSBjYWxsIHRoZSBjYWxsYmFjayBvbmNlIGFsbCBmb3JtcyBoYXZlIGJlZW4gcmVjb3ZlcmVkXG4gICAgICAgIGlmKGkgPT09IGZvcm1zVG9SZWNvdmVyLmxlbmd0aCAtIDEpe1xuICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgZ2V0Q2hpbGRCeUlkKGlkKXsgcmV0dXJuIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVtpZF0gfVxuXG4gIGdldERlc2NlbmRlbnRCeUVsKGVsKXtcbiAgICBpZihlbC5pZCA9PT0gdGhpcy5pZCl7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbltlbC5nZXRBdHRyaWJ1dGUoUEhYX1BBUkVOVF9JRCldPy5bZWwuaWRdXG4gICAgfVxuICB9XG5cbiAgZGVzdHJveURlc2NlbmRlbnQoaWQpe1xuICAgIGZvcihsZXQgcGFyZW50SWQgaW4gdGhpcy5yb290LmNoaWxkcmVuKXtcbiAgICAgIGZvcihsZXQgY2hpbGRJZCBpbiB0aGlzLnJvb3QuY2hpbGRyZW5bcGFyZW50SWRdKXtcbiAgICAgICAgaWYoY2hpbGRJZCA9PT0gaWQpeyByZXR1cm4gdGhpcy5yb290LmNoaWxkcmVuW3BhcmVudElkXVtjaGlsZElkXS5kZXN0cm95KCkgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGpvaW5DaGlsZChlbCl7XG4gICAgbGV0IGNoaWxkID0gdGhpcy5nZXRDaGlsZEJ5SWQoZWwuaWQpXG4gICAgaWYoIWNoaWxkKXtcbiAgICAgIGxldCB2aWV3ID0gbmV3IFZpZXcoZWwsIHRoaXMubGl2ZVNvY2tldCwgdGhpcylcbiAgICAgIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVt2aWV3LmlkXSA9IHZpZXdcbiAgICAgIHZpZXcuam9pbigpXG4gICAgICB0aGlzLmNoaWxkSm9pbnMrK1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBpc0pvaW5QZW5kaW5nKCl7IHJldHVybiB0aGlzLmpvaW5QZW5kaW5nIH1cblxuICBhY2tKb2luKF9jaGlsZCl7XG4gICAgdGhpcy5jaGlsZEpvaW5zLS1cblxuICAgIGlmKHRoaXMuY2hpbGRKb2lucyA9PT0gMCl7XG4gICAgICBpZih0aGlzLnBhcmVudCl7XG4gICAgICAgIHRoaXMucGFyZW50LmFja0pvaW4odGhpcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25BbGxDaGlsZEpvaW5zQ29tcGxldGUoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uQWxsQ2hpbGRKb2luc0NvbXBsZXRlKCl7XG4gICAgLy8gd2UgY2FuIGNsZWFyIHBlbmRpbmcgZm9ybSByZWNvdmVyaWVzIG5vdyB0aGF0IHdlJ3ZlIGpvaW5lZC5cbiAgICAvLyBUaGV5IGVpdGhlciBhbGwgcmVzb2x2ZWQgb3Igd2VyZSBhYmFuZG9uZWRcbiAgICB0aGlzLnBlbmRpbmdGb3Jtcy5jbGVhcigpXG4gICAgLy8gd2UgY2FuIGFsc28gY2xlYXIgdGhlIGZvcm1zRm9yUmVjb3Zlcnkgb2JqZWN0IHRvIG5vdCBrZWVwIG9sZCBmb3JtIGVsZW1lbnRzIGFyb3VuZFxuICAgIHRoaXMuZm9ybXNGb3JSZWNvdmVyeSA9IHt9XG4gICAgdGhpcy5qb2luQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy5wZW5kaW5nSm9pbk9wcy5mb3JFYWNoKChbdmlldywgb3BdKSA9PiB7XG4gICAgICAgIGlmKCF2aWV3LmlzRGVzdHJveWVkKCkpeyBvcCgpIH1cbiAgICAgIH0pXG4gICAgICB0aGlzLnBlbmRpbmdKb2luT3BzID0gW11cbiAgICB9KVxuICB9XG5cbiAgdXBkYXRlKGRpZmYsIGV2ZW50cyl7XG4gICAgaWYodGhpcy5pc0pvaW5QZW5kaW5nKCkgfHwgKHRoaXMubGl2ZVNvY2tldC5oYXNQZW5kaW5nTGluaygpICYmIHRoaXMucm9vdC5pc01haW4oKSkpe1xuICAgICAgcmV0dXJuIHRoaXMucGVuZGluZ0RpZmZzLnB1c2goe2RpZmYsIGV2ZW50c30pXG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJlZC5tZXJnZURpZmYoZGlmZilcbiAgICBsZXQgcGh4Q2hpbGRyZW5BZGRlZCA9IGZhbHNlXG5cbiAgICAvLyBXaGVuIHRoZSBkaWZmIG9ubHkgY29udGFpbnMgY29tcG9uZW50IGRpZmZzLCB0aGVuIHdhbGsgY29tcG9uZW50c1xuICAgIC8vIGFuZCBwYXRjaCBvbmx5IHRoZSBwYXJlbnQgY29tcG9uZW50IGNvbnRhaW5lcnMgZm91bmQgaW4gdGhlIGRpZmYuXG4gICAgLy8gT3RoZXJ3aXNlLCBwYXRjaCBlbnRpcmUgTFYgY29udGFpbmVyLlxuICAgIGlmKHRoaXMucmVuZGVyZWQuaXNDb21wb25lbnRPbmx5RGlmZihkaWZmKSl7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQudGltZShcImNvbXBvbmVudCBwYXRjaCBjb21wbGV0ZVwiLCAoKSA9PiB7XG4gICAgICAgIGxldCBwYXJlbnRDaWRzID0gRE9NLmZpbmRFeGlzdGluZ1BhcmVudENJRHModGhpcy5lbCwgdGhpcy5yZW5kZXJlZC5jb21wb25lbnRDSURzKGRpZmYpKVxuICAgICAgICBwYXJlbnRDaWRzLmZvckVhY2gocGFyZW50Q0lEID0+IHtcbiAgICAgICAgICBpZih0aGlzLmNvbXBvbmVudFBhdGNoKHRoaXMucmVuZGVyZWQuZ2V0Q29tcG9uZW50KGRpZmYsIHBhcmVudENJRCksIHBhcmVudENJRCkpeyBwaHhDaGlsZHJlbkFkZGVkID0gdHJ1ZSB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0gZWxzZSBpZighaXNFbXB0eShkaWZmKSl7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQudGltZShcImZ1bGwgcGF0Y2ggY29tcGxldGVcIiwgKCkgPT4ge1xuICAgICAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZW5kZXJDb250YWluZXIoZGlmZiwgXCJ1cGRhdGVcIilcbiAgICAgICAgbGV0IHBhdGNoID0gbmV3IERPTVBhdGNoKHRoaXMsIHRoaXMuZWwsIHRoaXMuaWQsIGh0bWwsIHN0cmVhbXMsIG51bGwpXG4gICAgICAgIHBoeENoaWxkcmVuQWRkZWQgPSB0aGlzLnBlcmZvcm1QYXRjaChwYXRjaCwgdHJ1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5saXZlU29ja2V0LmRpc3BhdGNoRXZlbnRzKGV2ZW50cylcbiAgICBpZihwaHhDaGlsZHJlbkFkZGVkKXsgdGhpcy5qb2luTmV3Q2hpbGRyZW4oKSB9XG4gIH1cblxuICByZW5kZXJDb250YWluZXIoZGlmZiwga2luZCl7XG4gICAgcmV0dXJuIHRoaXMubGl2ZVNvY2tldC50aW1lKGB0b1N0cmluZyBkaWZmICgke2tpbmR9KWAsICgpID0+IHtcbiAgICAgIGxldCB0YWcgPSB0aGlzLmVsLnRhZ05hbWVcbiAgICAgIC8vIERvbid0IHNraXAgYW55IGNvbXBvbmVudCBpbiB0aGUgZGlmZiBub3IgYW55IG1hcmtlZCBhcyBwcnVuZWRcbiAgICAgIC8vIChhcyB0aGV5IG1heSBoYXZlIGJlZW4gYWRkZWQgYmFjaylcbiAgICAgIGxldCBjaWRzID0gZGlmZiA/IHRoaXMucmVuZGVyZWQuY29tcG9uZW50Q0lEcyhkaWZmKSA6IG51bGxcbiAgICAgIGxldCBbaHRtbCwgc3RyZWFtc10gPSB0aGlzLnJlbmRlcmVkLnRvU3RyaW5nKGNpZHMpXG4gICAgICByZXR1cm4gW2A8JHt0YWd9PiR7aHRtbH08LyR7dGFnfT5gLCBzdHJlYW1zXVxuICAgIH0pXG4gIH1cblxuICBjb21wb25lbnRQYXRjaChkaWZmLCBjaWQpe1xuICAgIGlmKGlzRW1wdHkoZGlmZikpIHJldHVybiBmYWxzZVxuICAgIGxldCBbaHRtbCwgc3RyZWFtc10gPSB0aGlzLnJlbmRlcmVkLmNvbXBvbmVudFRvU3RyaW5nKGNpZClcbiAgICBsZXQgcGF0Y2ggPSBuZXcgRE9NUGF0Y2godGhpcywgdGhpcy5lbCwgdGhpcy5pZCwgaHRtbCwgc3RyZWFtcywgY2lkKVxuICAgIGxldCBjaGlsZHJlbkFkZGVkID0gdGhpcy5wZXJmb3JtUGF0Y2gocGF0Y2gsIHRydWUpXG4gICAgcmV0dXJuIGNoaWxkcmVuQWRkZWRcbiAgfVxuXG4gIGdldEhvb2soZWwpeyByZXR1cm4gdGhpcy52aWV3SG9va3NbVmlld0hvb2suZWxlbWVudElEKGVsKV0gfVxuXG4gIGFkZEhvb2soZWwpe1xuICAgIGxldCBob29rRWxJZCA9IFZpZXdIb29rLmVsZW1lbnRJRChlbClcblxuICAgIC8vIG9ubHkgZXZlciB0cnkgdG8gYWRkIGhvb2tzIHRvIGVsZW1lbnRzIG93bmVkIGJ5IHRoaXMgdmlld1xuICAgIGlmKGVsLmdldEF0dHJpYnV0ZSAmJiAhdGhpcy5vd25zRWxlbWVudChlbCkpeyByZXR1cm4gfVxuXG4gICAgaWYoaG9va0VsSWQgJiYgIXRoaXMudmlld0hvb2tzW2hvb2tFbElkXSl7XG4gICAgICAvLyBob29rIGNyZWF0ZWQsIGJ1dCBub3QgYXR0YWNoZWQgKGNyZWF0ZUhvb2sgZm9yIHdlYiBjb21wb25lbnQpXG4gICAgICBsZXQgaG9vayA9IERPTS5nZXRDdXN0b21FbEhvb2soZWwpIHx8IGxvZ0Vycm9yKGBubyBob29rIGZvdW5kIGZvciBjdXN0b20gZWxlbWVudDogJHtlbC5pZH1gKVxuICAgICAgdGhpcy52aWV3SG9va3NbaG9va0VsSWRdID0gaG9va1xuICAgICAgaG9vay5fX2F0dGFjaFZpZXcodGhpcylcbiAgICAgIHJldHVybiBob29rXG4gICAgfVxuICAgIGVsc2UgaWYoaG9va0VsSWQgfHwgIWVsLmdldEF0dHJpYnV0ZSl7XG4gICAgICAvLyBubyBob29rIGZvdW5kXG4gICAgICByZXR1cm5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbmV3IGhvb2sgZm91bmQgd2l0aCBwaHgtaG9vayBhdHRyaWJ1dGVcbiAgICAgIGxldCBob29rTmFtZSA9IGVsLmdldEF0dHJpYnV0ZShgZGF0YS1waHgtJHtQSFhfSE9PS31gKSB8fCBlbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9IT09LKSlcbiAgICAgIGxldCBjYWxsYmFja3MgPSB0aGlzLmxpdmVTb2NrZXQuZ2V0SG9va0NhbGxiYWNrcyhob29rTmFtZSlcblxuICAgICAgaWYoY2FsbGJhY2tzKXtcbiAgICAgICAgaWYoIWVsLmlkKXsgbG9nRXJyb3IoYG5vIERPTSBJRCBmb3IgaG9vayBcIiR7aG9va05hbWV9XCIuIEhvb2tzIHJlcXVpcmUgYSB1bmlxdWUgSUQgb24gZWFjaCBlbGVtZW50LmAsIGVsKSB9XG4gICAgICAgIGxldCBob29rID0gbmV3IFZpZXdIb29rKHRoaXMsIGVsLCBjYWxsYmFja3MpXG4gICAgICAgIHRoaXMudmlld0hvb2tzW1ZpZXdIb29rLmVsZW1lbnRJRChob29rLmVsKV0gPSBob29rXG4gICAgICAgIHJldHVybiBob29rXG4gICAgICB9IGVsc2UgaWYoaG9va05hbWUgIT09IG51bGwpe1xuICAgICAgICBsb2dFcnJvcihgdW5rbm93biBob29rIGZvdW5kIGZvciBcIiR7aG9va05hbWV9XCJgLCBlbClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkZXN0cm95SG9vayhob29rKXtcbiAgICAvLyBfX2Rlc3Ryb3llZCBjbGVhcnMgdGhlIGVsZW1lbnRJRCBmcm9tIHRoZSBob29rLCB0aGVyZWZvcmVcbiAgICAvLyB3ZSBuZWVkIHRvIGdldCBpdCBiZWZvcmUgY2FsbGluZyBfX2Rlc3Ryb3llZFxuICAgIGNvbnN0IGhvb2tJZCA9IFZpZXdIb29rLmVsZW1lbnRJRChob29rLmVsKVxuICAgIGhvb2suX19kZXN0cm95ZWQoKVxuICAgIGhvb2suX19jbGVhbnVwX18oKVxuICAgIGRlbGV0ZSB0aGlzLnZpZXdIb29rc1tob29rSWRdXG4gIH1cblxuICBhcHBseVBlbmRpbmdVcGRhdGVzKCl7XG4gICAgdGhpcy5wZW5kaW5nRGlmZnMuZm9yRWFjaCgoe2RpZmYsIGV2ZW50c30pID0+IHRoaXMudXBkYXRlKGRpZmYsIGV2ZW50cykpXG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMuZWFjaENoaWxkKGNoaWxkID0+IGNoaWxkLmFwcGx5UGVuZGluZ1VwZGF0ZXMoKSlcbiAgfVxuXG4gIGVhY2hDaGlsZChjYWxsYmFjayl7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdIHx8IHt9XG4gICAgZm9yKGxldCBpZCBpbiBjaGlsZHJlbil7IGNhbGxiYWNrKHRoaXMuZ2V0Q2hpbGRCeUlkKGlkKSkgfVxuICB9XG5cbiAgb25DaGFubmVsKGV2ZW50LCBjYil7XG4gICAgdGhpcy5saXZlU29ja2V0Lm9uQ2hhbm5lbCh0aGlzLmNoYW5uZWwsIGV2ZW50LCByZXNwID0+IHtcbiAgICAgIGlmKHRoaXMuaXNKb2luUGVuZGluZygpKXtcbiAgICAgICAgdGhpcy5yb290LnBlbmRpbmdKb2luT3BzLnB1c2goW3RoaXMsICgpID0+IGNiKHJlc3ApXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IGNiKHJlc3ApKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBiaW5kQ2hhbm5lbCgpe1xuICAgIC8vIFRoZSBkaWZmIGV2ZW50IHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoZSByZWd1bGFyIHVwZGF0ZSBvcGVyYXRpb25zLlxuICAgIC8vIEFsbCBvdGhlciBvcGVyYXRpb25zIGFyZSBxdWV1ZWQgdG8gYmUgYXBwbGllZCBvbmx5IGFmdGVyIGpvaW4uXG4gICAgdGhpcy5saXZlU29ja2V0Lm9uQ2hhbm5lbCh0aGlzLmNoYW5uZWwsIFwiZGlmZlwiLCAocmF3RGlmZikgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcGx5RGlmZihcInVwZGF0ZVwiLCByYXdEaWZmLCAoe2RpZmYsIGV2ZW50c30pID0+IHRoaXMudXBkYXRlKGRpZmYsIGV2ZW50cykpXG4gICAgICB9KVxuICAgIH0pXG4gICAgdGhpcy5vbkNoYW5uZWwoXCJyZWRpcmVjdFwiLCAoe3RvLCBmbGFzaH0pID0+IHRoaXMub25SZWRpcmVjdCh7dG8sIGZsYXNofSkpXG4gICAgdGhpcy5vbkNoYW5uZWwoXCJsaXZlX3BhdGNoXCIsIChyZWRpcikgPT4gdGhpcy5vbkxpdmVQYXRjaChyZWRpcikpXG4gICAgdGhpcy5vbkNoYW5uZWwoXCJsaXZlX3JlZGlyZWN0XCIsIChyZWRpcikgPT4gdGhpcy5vbkxpdmVSZWRpcmVjdChyZWRpcikpXG4gICAgdGhpcy5jaGFubmVsLm9uRXJyb3IocmVhc29uID0+IHRoaXMub25FcnJvcihyZWFzb24pKVxuICAgIHRoaXMuY2hhbm5lbC5vbkNsb3NlKHJlYXNvbiA9PiB0aGlzLm9uQ2xvc2UocmVhc29uKSlcbiAgfVxuXG4gIGRlc3Ryb3lBbGxDaGlsZHJlbigpeyB0aGlzLmVhY2hDaGlsZChjaGlsZCA9PiBjaGlsZC5kZXN0cm95KCkpIH1cblxuICBvbkxpdmVSZWRpcmVjdChyZWRpcil7XG4gICAgbGV0IHt0bywga2luZCwgZmxhc2h9ID0gcmVkaXJcbiAgICBsZXQgdXJsID0gdGhpcy5leHBhbmRVUkwodG8pXG4gICAgbGV0IGUgPSBuZXcgQ3VzdG9tRXZlbnQoXCJwaHg6c2VydmVyLW5hdmlnYXRlXCIsIHtkZXRhaWw6IHt0bywga2luZCwgZmxhc2h9fSlcbiAgICB0aGlzLmxpdmVTb2NrZXQuaGlzdG9yeVJlZGlyZWN0KGUsIHVybCwga2luZCwgZmxhc2gpXG4gIH1cblxuICBvbkxpdmVQYXRjaChyZWRpcil7XG4gICAgbGV0IHt0bywga2luZH0gPSByZWRpclxuICAgIHRoaXMuaHJlZiA9IHRoaXMuZXhwYW5kVVJMKHRvKVxuICAgIHRoaXMubGl2ZVNvY2tldC5oaXN0b3J5UGF0Y2godG8sIGtpbmQpXG4gIH1cblxuICBleHBhbmRVUkwodG8pe1xuICAgIHJldHVybiB0by5zdGFydHNXaXRoKFwiL1wiKSA/IGAke3dpbmRvdy5sb2NhdGlvbi5wcm90b2NvbH0vLyR7d2luZG93LmxvY2F0aW9uLmhvc3R9JHt0b31gIDogdG9cbiAgfVxuXG4gIG9uUmVkaXJlY3Qoe3RvLCBmbGFzaCwgcmVsb2FkVG9rZW59KXsgdGhpcy5saXZlU29ja2V0LnJlZGlyZWN0KHRvLCBmbGFzaCwgcmVsb2FkVG9rZW4pIH1cblxuICBpc0Rlc3Ryb3llZCgpeyByZXR1cm4gdGhpcy5kZXN0cm95ZWQgfVxuXG4gIGpvaW5EZWFkKCl7IHRoaXMuaXNEZWFkID0gdHJ1ZSB9XG5cbiAgam9pblB1c2goKXtcbiAgICB0aGlzLmpvaW5QdXNoID0gdGhpcy5qb2luUHVzaCB8fCB0aGlzLmNoYW5uZWwuam9pbigpXG4gICAgcmV0dXJuIHRoaXMuam9pblB1c2hcbiAgfVxuXG4gIGpvaW4oY2FsbGJhY2spe1xuICAgIHRoaXMuc2hvd0xvYWRlcih0aGlzLmxpdmVTb2NrZXQubG9hZGVyVGltZW91dClcbiAgICB0aGlzLmJpbmRDaGFubmVsKClcbiAgICBpZih0aGlzLmlzTWFpbigpKXtcbiAgICAgIHRoaXMuc3RvcENhbGxiYWNrID0gdGhpcy5saXZlU29ja2V0LndpdGhQYWdlTG9hZGluZyh7dG86IHRoaXMuaHJlZiwga2luZDogXCJpbml0aWFsXCJ9KVxuICAgIH1cbiAgICB0aGlzLmpvaW5DYWxsYmFjayA9IChvbkRvbmUpID0+IHtcbiAgICAgIG9uRG9uZSA9IG9uRG9uZSB8fCBmdW5jdGlvbigpe31cbiAgICAgIGNhbGxiYWNrID8gY2FsbGJhY2sodGhpcy5qb2luQ291bnQsIG9uRG9uZSkgOiBvbkRvbmUoKVxuICAgIH1cblxuICAgIHRoaXMud3JhcFB1c2goKCkgPT4gdGhpcy5jaGFubmVsLmpvaW4oKSwge1xuICAgICAgb2s6IChyZXNwKSA9PiB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB0aGlzLm9uSm9pbihyZXNwKSksXG4gICAgICBlcnJvcjogKGVycm9yKSA9PiB0aGlzLm9uSm9pbkVycm9yKGVycm9yKSxcbiAgICAgIHRpbWVvdXQ6ICgpID0+IHRoaXMub25Kb2luRXJyb3Ioe3JlYXNvbjogXCJ0aW1lb3V0XCJ9KVxuICAgIH0pXG4gIH1cblxuICBvbkpvaW5FcnJvcihyZXNwKXtcbiAgICBpZihyZXNwLnJlYXNvbiA9PT0gXCJyZWxvYWRcIil7XG4gICAgICB0aGlzLmxvZyhcImVycm9yXCIsICgpID0+IFtgZmFpbGVkIG1vdW50IHdpdGggJHtyZXNwLnN0YXR1c30uIEZhbGxpbmcgYmFjayB0byBwYWdlIHJlbG9hZGAsIHJlc3BdKVxuICAgICAgdGhpcy5vblJlZGlyZWN0KHt0bzogdGhpcy5yb290LmhyZWYsIHJlbG9hZFRva2VuOiByZXNwLnRva2VufSlcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSBpZihyZXNwLnJlYXNvbiA9PT0gXCJ1bmF1dGhvcml6ZWRcIiB8fCByZXNwLnJlYXNvbiA9PT0gXCJzdGFsZVwiKXtcbiAgICAgIHRoaXMubG9nKFwiZXJyb3JcIiwgKCkgPT4gW1widW5hdXRob3JpemVkIGxpdmVfcmVkaXJlY3QuIEZhbGxpbmcgYmFjayB0byBwYWdlIHJlcXVlc3RcIiwgcmVzcF0pXG4gICAgICB0aGlzLm9uUmVkaXJlY3Qoe3RvOiB0aGlzLnJvb3QuaHJlZn0pXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYocmVzcC5yZWRpcmVjdCB8fCByZXNwLmxpdmVfcmVkaXJlY3Qpe1xuICAgICAgdGhpcy5qb2luUGVuZGluZyA9IGZhbHNlXG4gICAgICB0aGlzLmNoYW5uZWwubGVhdmUoKVxuICAgIH1cbiAgICBpZihyZXNwLnJlZGlyZWN0KXsgcmV0dXJuIHRoaXMub25SZWRpcmVjdChyZXNwLnJlZGlyZWN0KSB9XG4gICAgaWYocmVzcC5saXZlX3JlZGlyZWN0KXsgcmV0dXJuIHRoaXMub25MaXZlUmVkaXJlY3QocmVzcC5saXZlX3JlZGlyZWN0KSB9XG4gICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbXCJ1bmFibGUgdG8gam9pblwiLCByZXNwXSlcbiAgICBpZih0aGlzLmlzTWFpbigpKXtcbiAgICAgIHRoaXMuZGlzcGxheUVycm9yKFtQSFhfTE9BRElOR19DTEFTUywgUEhYX0VSUk9SX0NMQVNTLCBQSFhfU0VSVkVSX0VSUk9SX0NMQVNTXSlcbiAgICAgIGlmKHRoaXMubGl2ZVNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5saXZlU29ja2V0LnJlbG9hZFdpdGhKaXR0ZXIodGhpcykgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZih0aGlzLmpvaW5BdHRlbXB0cyA+PSBNQVhfQ0hJTERfSk9JTl9BVFRFTVBUUyl7XG4gICAgICAgIC8vIHB1dCB0aGUgcm9vdCByZXZpZXcgaW50byBwZXJtYW5lbnQgZXJyb3Igc3RhdGUsIGJ1dCBkb24ndCBkZXN0cm95IGl0IGFzIGl0IGNhbiByZW1haW4gYWN0aXZlXG4gICAgICAgIHRoaXMucm9vdC5kaXNwbGF5RXJyb3IoW1BIWF9MT0FESU5HX0NMQVNTLCBQSFhfRVJST1JfQ0xBU1MsIFBIWF9TRVJWRVJfRVJST1JfQ0xBU1NdKVxuICAgICAgICB0aGlzLmxvZyhcImVycm9yXCIsICgpID0+IFtgZ2l2aW5nIHVwIHRyeWluZyB0byBtb3VudCBhZnRlciAke01BWF9DSElMRF9KT0lOX0FUVEVNUFRTfSB0cmllc2AsIHJlc3BdKVxuICAgICAgICB0aGlzLmRlc3Ryb3koKVxuICAgICAgfVxuICAgICAgbGV0IHRydWVDaGlsZEVsID0gRE9NLmJ5SWQodGhpcy5lbC5pZClcbiAgICAgIGlmKHRydWVDaGlsZEVsKXtcbiAgICAgICAgRE9NLm1lcmdlQXR0cnModHJ1ZUNoaWxkRWwsIHRoaXMuZWwpXG4gICAgICAgIHRoaXMuZGlzcGxheUVycm9yKFtQSFhfTE9BRElOR19DTEFTUywgUEhYX0VSUk9SX0NMQVNTLCBQSFhfU0VSVkVSX0VSUk9SX0NMQVNTXSlcbiAgICAgICAgdGhpcy5lbCA9IHRydWVDaGlsZEVsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uQ2xvc2UocmVhc29uKXtcbiAgICBpZih0aGlzLmlzRGVzdHJveWVkKCkpeyByZXR1cm4gfVxuICAgIGlmKHRoaXMuaXNNYWluKCkgJiYgdGhpcy5saXZlU29ja2V0Lmhhc1BlbmRpbmdMaW5rKCkgJiYgcmVhc29uICE9PSBcImxlYXZlXCIpe1xuICAgICAgcmV0dXJuIHRoaXMubGl2ZVNvY2tldC5yZWxvYWRXaXRoSml0dGVyKHRoaXMpXG4gICAgfVxuICAgIHRoaXMuZGVzdHJveUFsbENoaWxkcmVuKClcbiAgICB0aGlzLmxpdmVTb2NrZXQuZHJvcEFjdGl2ZUVsZW1lbnQodGhpcylcbiAgICAvLyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiBiZSBudWxsIGluIEludGVybmV0IEV4cGxvcmVyIDExXG4gICAgaWYoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCl7IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpIH1cbiAgICBpZih0aGlzLmxpdmVTb2NrZXQuaXNVbmxvYWRlZCgpKXtcbiAgICAgIHRoaXMuc2hvd0xvYWRlcihCRUZPUkVfVU5MT0FEX0xPQURFUl9USU1FT1VUKVxuICAgIH1cbiAgfVxuXG4gIG9uRXJyb3IocmVhc29uKXtcbiAgICB0aGlzLm9uQ2xvc2UocmVhc29uKVxuICAgIGlmKHRoaXMubGl2ZVNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbXCJ2aWV3IGNyYXNoZWRcIiwgcmVhc29uXSkgfVxuICAgIGlmKCF0aGlzLmxpdmVTb2NrZXQuaXNVbmxvYWRlZCgpKXtcbiAgICAgIGlmKHRoaXMubGl2ZVNvY2tldC5pc0Nvbm5lY3RlZCgpKXtcbiAgICAgICAgdGhpcy5kaXNwbGF5RXJyb3IoW1BIWF9MT0FESU5HX0NMQVNTLCBQSFhfRVJST1JfQ0xBU1MsIFBIWF9TRVJWRVJfRVJST1JfQ0xBU1NdKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5RXJyb3IoW1BIWF9MT0FESU5HX0NMQVNTLCBQSFhfRVJST1JfQ0xBU1MsIFBIWF9DTElFTlRfRVJST1JfQ0xBU1NdKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRpc3BsYXlFcnJvcihjbGFzc2VzKXtcbiAgICBpZih0aGlzLmlzTWFpbigpKXsgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpwYWdlLWxvYWRpbmctc3RhcnRcIiwge2RldGFpbDoge3RvOiB0aGlzLmhyZWYsIGtpbmQ6IFwiZXJyb3JcIn19KSB9XG4gICAgdGhpcy5zaG93TG9hZGVyKClcbiAgICB0aGlzLnNldENvbnRhaW5lckNsYXNzZXMoLi4uY2xhc3NlcylcbiAgICB0aGlzLmV4ZWNBbGwodGhpcy5iaW5kaW5nKFwiZGlzY29ubmVjdGVkXCIpKVxuICB9XG5cbiAgd3JhcFB1c2goY2FsbGVyUHVzaCwgcmVjZWl2ZXMpe1xuICAgIGxldCBsYXRlbmN5ID0gdGhpcy5saXZlU29ja2V0LmdldExhdGVuY3lTaW0oKVxuICAgIGxldCB3aXRoTGF0ZW5jeSA9IGxhdGVuY3kgP1xuICAgICAgKGNiKSA9PiBzZXRUaW1lb3V0KCgpID0+ICF0aGlzLmlzRGVzdHJveWVkKCkgJiYgY2IoKSwgbGF0ZW5jeSkgOlxuICAgICAgKGNiKSA9PiAhdGhpcy5pc0Rlc3Ryb3llZCgpICYmIGNiKClcblxuICAgIHdpdGhMYXRlbmN5KCgpID0+IHtcbiAgICAgIGNhbGxlclB1c2goKVxuICAgICAgICAucmVjZWl2ZShcIm9rXCIsIHJlc3AgPT4gd2l0aExhdGVuY3koKCkgPT4gcmVjZWl2ZXMub2sgJiYgcmVjZWl2ZXMub2socmVzcCkpKVxuICAgICAgICAucmVjZWl2ZShcImVycm9yXCIsIHJlYXNvbiA9PiB3aXRoTGF0ZW5jeSgoKSA9PiByZWNlaXZlcy5lcnJvciAmJiByZWNlaXZlcy5lcnJvcihyZWFzb24pKSlcbiAgICAgICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+IHdpdGhMYXRlbmN5KCgpID0+IHJlY2VpdmVzLnRpbWVvdXQgJiYgcmVjZWl2ZXMudGltZW91dCgpKSlcbiAgICB9KVxuICB9XG5cbiAgcHVzaFdpdGhSZXBseShyZWZHZW5lcmF0b3IsIGV2ZW50LCBwYXlsb2FkKXtcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIFByb21pc2UucmVqZWN0KHtlcnJvcjogXCJub2Nvbm5lY3Rpb25cIn0pIH1cblxuICAgIGxldCBbcmVmLCBbZWxdLCBvcHRzXSA9IHJlZkdlbmVyYXRvciA/IHJlZkdlbmVyYXRvcigpIDogW251bGwsIFtdLCB7fV1cbiAgICBsZXQgb2xkSm9pbkNvdW50ID0gdGhpcy5qb2luQ291bnRcbiAgICBsZXQgb25Mb2FkaW5nRG9uZSA9IGZ1bmN0aW9uKCl7fVxuICAgIGlmKG9wdHMucGFnZV9sb2FkaW5nKXtcbiAgICAgIG9uTG9hZGluZ0RvbmUgPSB0aGlzLmxpdmVTb2NrZXQud2l0aFBhZ2VMb2FkaW5nKHtraW5kOiBcImVsZW1lbnRcIiwgdGFyZ2V0OiBlbH0pXG4gICAgfVxuXG4gICAgaWYodHlwZW9mIChwYXlsb2FkLmNpZCkgIT09IFwibnVtYmVyXCIpeyBkZWxldGUgcGF5bG9hZC5jaWQgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMud3JhcFB1c2goKCkgPT4gdGhpcy5jaGFubmVsLnB1c2goZXZlbnQsIHBheWxvYWQsIFBVU0hfVElNRU9VVCksIHtcbiAgICAgICAgb2s6IChyZXNwKSA9PiB7XG4gICAgICAgICAgaWYocmVmICE9PSBudWxsKXsgdGhpcy5sYXN0QWNrUmVmID0gcmVmIH1cbiAgICAgICAgICBsZXQgZmluaXNoID0gKGhvb2tSZXBseSkgPT4ge1xuICAgICAgICAgICAgaWYocmVzcC5yZWRpcmVjdCl7IHRoaXMub25SZWRpcmVjdChyZXNwLnJlZGlyZWN0KSB9XG4gICAgICAgICAgICBpZihyZXNwLmxpdmVfcGF0Y2gpeyB0aGlzLm9uTGl2ZVBhdGNoKHJlc3AubGl2ZV9wYXRjaCkgfVxuICAgICAgICAgICAgaWYocmVzcC5saXZlX3JlZGlyZWN0KXsgdGhpcy5vbkxpdmVSZWRpcmVjdChyZXNwLmxpdmVfcmVkaXJlY3QpIH1cbiAgICAgICAgICAgIG9uTG9hZGluZ0RvbmUoKVxuICAgICAgICAgICAgcmVzb2x2ZSh7cmVzcDogcmVzcCwgcmVwbHk6IGhvb2tSZXBseX0pXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHJlc3AuZGlmZil7XG4gICAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuYXBwbHlEaWZmKFwidXBkYXRlXCIsIHJlc3AuZGlmZiwgKHtkaWZmLCByZXBseSwgZXZlbnRzfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHJlZiAhPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICB0aGlzLnVuZG9SZWZzKHJlZiwgcGF5bG9hZC5ldmVudClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoZGlmZiwgZXZlbnRzKVxuICAgICAgICAgICAgICAgIGZpbmlzaChyZXBseSlcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKHJlZiAhPT0gbnVsbCl7IHRoaXMudW5kb1JlZnMocmVmLCBwYXlsb2FkLmV2ZW50KSB9XG4gICAgICAgICAgICBmaW5pc2gobnVsbClcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiAocmVhc29uKSA9PiByZWplY3Qoe2Vycm9yOiByZWFzb259KSxcbiAgICAgICAgdGltZW91dDogKCkgPT4ge1xuICAgICAgICAgIHJlamVjdCh7dGltZW91dDogdHJ1ZX0pXG4gICAgICAgICAgaWYodGhpcy5qb2luQ291bnQgPT09IG9sZEpvaW5Db3VudCl7XG4gICAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVsb2FkV2l0aEppdHRlcih0aGlzLCAoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMubG9nKFwidGltZW91dFwiLCAoKSA9PiBbXCJyZWNlaXZlZCB0aW1lb3V0IHdoaWxlIGNvbW11bmljYXRpbmcgd2l0aCBzZXJ2ZXIuIEZhbGxpbmcgYmFjayB0byBoYXJkIHJlZnJlc2ggZm9yIHJlY292ZXJ5XCJdKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHVuZG9SZWZzKHJlZiwgcGh4RXZlbnQsIG9ubHlFbHMpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfSAvLyBleGl0IGlmIGV4dGVybmFsIGZvcm0gdHJpZ2dlcmVkXG4gICAgbGV0IHNlbGVjdG9yID0gYFske1BIWF9SRUZfU1JDfT1cIiR7dGhpcy5yZWZTcmMoKX1cIl1gXG5cbiAgICBpZihvbmx5RWxzKXtcbiAgICAgIG9ubHlFbHMgPSBuZXcgU2V0KG9ubHlFbHMpXG4gICAgICBET00uYWxsKGRvY3VtZW50LCBzZWxlY3RvciwgcGFyZW50ID0+IHtcbiAgICAgICAgaWYob25seUVscyAmJiAhb25seUVscy5oYXMocGFyZW50KSl7IHJldHVybiB9XG4gICAgICAgIC8vIHVuZG8gYW55IGNoaWxkIHJlZnMgd2l0aGluIHBhcmVudCBmaXJzdFxuICAgICAgICBET00uYWxsKHBhcmVudCwgc2VsZWN0b3IsIGNoaWxkID0+IHRoaXMudW5kb0VsUmVmKGNoaWxkLCByZWYsIHBoeEV2ZW50KSlcbiAgICAgICAgdGhpcy51bmRvRWxSZWYocGFyZW50LCByZWYsIHBoeEV2ZW50KVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgRE9NLmFsbChkb2N1bWVudCwgc2VsZWN0b3IsIGVsID0+IHRoaXMudW5kb0VsUmVmKGVsLCByZWYsIHBoeEV2ZW50KSlcbiAgICB9XG4gIH1cblxuICB1bmRvRWxSZWYoZWwsIHJlZiwgcGh4RXZlbnQpe1xuICAgIGxldCBlbFJlZiA9IG5ldyBFbGVtZW50UmVmKGVsKVxuXG4gICAgZWxSZWYubWF5YmVVbmRvKHJlZiwgcGh4RXZlbnQsIGNsb25lZFRyZWUgPT4ge1xuICAgICAgLy8gd2UgbmVlZCB0byBwZXJmb3JtIGEgZnVsbCBwYXRjaCBvbiB1bmxvY2tlZCBlbGVtZW50c1xuICAgICAgLy8gdG8gcGVyZm9ybSBhbGwgdGhlIG5lY2Vzc2FyeSBsb2dpYyAobGlrZSBjYWxsaW5nIHVwZGF0ZWQgZm9yIGhvb2tzLCBldGMuKVxuICAgICAgbGV0IHBhdGNoID0gbmV3IERPTVBhdGNoKHRoaXMsIGVsLCB0aGlzLmlkLCBjbG9uZWRUcmVlLCBbXSwgbnVsbCwge3VuZG9SZWY6IHJlZn0pXG4gICAgICBjb25zdCBwaHhDaGlsZHJlbkFkZGVkID0gdGhpcy5wZXJmb3JtUGF0Y2gocGF0Y2gsIHRydWUpXG4gICAgICBET00uYWxsKGVsLCBgWyR7UEhYX1JFRl9TUkN9PVwiJHt0aGlzLnJlZlNyYygpfVwiXWAsIGNoaWxkID0+IHRoaXMudW5kb0VsUmVmKGNoaWxkLCByZWYsIHBoeEV2ZW50KSlcbiAgICAgIGlmKHBoeENoaWxkcmVuQWRkZWQpeyB0aGlzLmpvaW5OZXdDaGlsZHJlbigpIH1cbiAgICB9KVxuICB9XG5cbiAgcmVmU3JjKCl7IHJldHVybiB0aGlzLmVsLmlkIH1cblxuICBwdXRSZWYoZWxlbWVudHMsIHBoeEV2ZW50LCBldmVudFR5cGUsIG9wdHMgPSB7fSl7XG4gICAgbGV0IG5ld1JlZiA9IHRoaXMucmVmKytcbiAgICBsZXQgZGlzYWJsZVdpdGggPSB0aGlzLmJpbmRpbmcoUEhYX0RJU0FCTEVfV0lUSClcbiAgICBpZihvcHRzLmxvYWRpbmcpe1xuICAgICAgbGV0IGxvYWRpbmdFbHMgPSBET00uYWxsKGRvY3VtZW50LCBvcHRzLmxvYWRpbmcpLm1hcChlbCA9PiB7XG4gICAgICAgIHJldHVybiB7ZWwsIGxvY2s6IHRydWUsIGxvYWRpbmc6IHRydWV9XG4gICAgICB9KVxuICAgICAgZWxlbWVudHMgPSBlbGVtZW50cy5jb25jYXQobG9hZGluZ0VscylcbiAgICB9XG5cbiAgICBmb3IobGV0IHtlbCwgbG9jaywgbG9hZGluZ30gb2YgZWxlbWVudHMpe1xuICAgICAgaWYoIWxvY2sgJiYgIWxvYWRpbmcpeyB0aHJvdyBuZXcgRXJyb3IoXCJwdXRSZWYgcmVxdWlyZXMgbG9jayBvciBsb2FkaW5nXCIpIH1cbiAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfUkVGX1NSQywgdGhpcy5yZWZTcmMoKSlcbiAgICAgIGlmKGxvYWRpbmcpeyBlbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9MT0FESU5HLCBuZXdSZWYpIH1cbiAgICAgIGlmKGxvY2speyBlbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9MT0NLLCBuZXdSZWYpIH1cblxuICAgICAgaWYoIWxvYWRpbmcgfHwgKG9wdHMuc3VibWl0dGVyICYmICEoZWwgPT09IG9wdHMuc3VibWl0dGVyIHx8IGVsID09PSBvcHRzLmZvcm0pKSl7IGNvbnRpbnVlIH1cblxuICAgICAgbGV0IGxvY2tDb21wbGV0ZVByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihgcGh4OnVuZG8tbG9jazoke25ld1JlZn1gLCAoKSA9PiByZXNvbHZlKGRldGFpbCksIHtvbmNlOiB0cnVlfSlcbiAgICAgIH0pXG5cbiAgICAgIGxldCBsb2FkaW5nQ29tcGxldGVQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoYHBoeDp1bmRvLWxvYWRpbmc6JHtuZXdSZWZ9YCwgKCkgPT4gcmVzb2x2ZShkZXRhaWwpLCB7b25jZTogdHJ1ZX0pXG4gICAgICB9KVxuXG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGBwaHgtJHtldmVudFR5cGV9LWxvYWRpbmdgKVxuICAgICAgbGV0IGRpc2FibGVUZXh0ID0gZWwuZ2V0QXR0cmlidXRlKGRpc2FibGVXaXRoKVxuICAgICAgaWYoZGlzYWJsZVRleHQgIT09IG51bGwpe1xuICAgICAgICBpZighZWwuZ2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSkpe1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUsIGVsLmlubmVyVGV4dClcbiAgICAgICAgfVxuICAgICAgICBpZihkaXNhYmxlVGV4dCAhPT0gXCJcIil7IGVsLmlubmVyVGV4dCA9IGRpc2FibGVUZXh0IH1cbiAgICAgICAgLy8gUEhYX0RJU0FCTEVEIGNvdWxkIGhhdmUgYWxyZWFkeSBiZWVuIHNldCBpbiBkaXNhYmxlRm9ybVxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVELCBlbC5nZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVEKSB8fCBlbC5kaXNhYmxlZClcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJcIilcbiAgICAgIH1cblxuICAgICAgbGV0IGRldGFpbCA9IHtcbiAgICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgICBldmVudFR5cGU6IGV2ZW50VHlwZSxcbiAgICAgICAgcmVmOiBuZXdSZWYsXG4gICAgICAgIGlzTG9hZGluZzogbG9hZGluZyxcbiAgICAgICAgaXNMb2NrZWQ6IGxvY2ssXG4gICAgICAgIGxvY2tFbGVtZW50czogZWxlbWVudHMuZmlsdGVyKCh7bG9ja30pID0+IGxvY2spLm1hcCgoe2VsfSkgPT4gZWwpLFxuICAgICAgICBsb2FkaW5nRWxlbWVudHM6IGVsZW1lbnRzLmZpbHRlcigoe2xvYWRpbmd9KSA9PiBsb2FkaW5nKS5tYXAoKHtlbH0pID0+IGVsKSxcbiAgICAgICAgdW5sb2NrOiAoZWxzKSA9PiB7XG4gICAgICAgICAgZWxzID0gQXJyYXkuaXNBcnJheShlbHMpID8gZWxzIDogW2Vsc11cbiAgICAgICAgICB0aGlzLnVuZG9SZWZzKG5ld1JlZiwgcGh4RXZlbnQsIGVscylcbiAgICAgICAgfSxcbiAgICAgICAgbG9ja0NvbXBsZXRlOiBsb2NrQ29tcGxldGVQcm9taXNlLFxuICAgICAgICBsb2FkaW5nQ29tcGxldGU6IGxvYWRpbmdDb21wbGV0ZVByb21pc2UsXG4gICAgICAgIGxvY2s6IChsb2NrRWwpID0+IHtcbiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBpZih0aGlzLmlzQWNrZWQobmV3UmVmKSl7IHJldHVybiByZXNvbHZlKGRldGFpbCkgfVxuICAgICAgICAgICAgbG9ja0VsLnNldEF0dHJpYnV0ZShQSFhfUkVGX0xPQ0ssIG5ld1JlZilcbiAgICAgICAgICAgIGxvY2tFbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9TUkMsIHRoaXMucmVmU3JjKCkpXG4gICAgICAgICAgICBsb2NrRWwuYWRkRXZlbnRMaXN0ZW5lcihgcGh4OmxvY2stc3RvcDoke25ld1JlZn1gLCAoKSA9PiByZXNvbHZlKGRldGFpbCksIHtvbmNlOiB0cnVlfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcInBoeDpwdXNoXCIsIHtcbiAgICAgICAgZGV0YWlsOiBkZXRhaWwsXG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IGZhbHNlXG4gICAgICB9KSlcbiAgICAgIGlmKHBoeEV2ZW50KXtcbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoYHBoeDpwdXNoOiR7cGh4RXZlbnR9YCwge1xuICAgICAgICAgIGRldGFpbDogZGV0YWlsLFxuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2VcbiAgICAgICAgfSkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbbmV3UmVmLCBlbGVtZW50cy5tYXAoKHtlbH0pID0+IGVsKSwgb3B0c11cbiAgfVxuXG4gIGlzQWNrZWQocmVmKXsgcmV0dXJuIHRoaXMubGFzdEFja1JlZiAhPT0gbnVsbCAmJiB0aGlzLmxhc3RBY2tSZWYgPj0gcmVmIH1cblxuICBjb21wb25lbnRJRChlbCl7XG4gICAgbGV0IGNpZCA9IGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVClcbiAgICByZXR1cm4gY2lkID8gcGFyc2VJbnQoY2lkKSA6IG51bGxcbiAgfVxuXG4gIHRhcmdldENvbXBvbmVudElEKHRhcmdldCwgdGFyZ2V0Q3R4LCBvcHRzID0ge30pe1xuICAgIGlmKGlzQ2lkKHRhcmdldEN0eCkpeyByZXR1cm4gdGFyZ2V0Q3R4IH1cblxuICAgIGxldCBjaWRPclNlbGVjdG9yID0gb3B0cy50YXJnZXQgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJ0YXJnZXRcIikpXG4gICAgaWYoaXNDaWQoY2lkT3JTZWxlY3Rvcikpe1xuICAgICAgcmV0dXJuIHBhcnNlSW50KGNpZE9yU2VsZWN0b3IpXG4gICAgfSBlbHNlIGlmKHRhcmdldEN0eCAmJiAoY2lkT3JTZWxlY3RvciAhPT0gbnVsbCB8fCBvcHRzLnRhcmdldCkpe1xuICAgICAgcmV0dXJuIHRoaXMuY2xvc2VzdENvbXBvbmVudElEKHRhcmdldEN0eClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBjbG9zZXN0Q29tcG9uZW50SUQodGFyZ2V0Q3R4KXtcbiAgICBpZihpc0NpZCh0YXJnZXRDdHgpKXtcbiAgICAgIHJldHVybiB0YXJnZXRDdHhcbiAgICB9IGVsc2UgaWYodGFyZ2V0Q3R4KXtcbiAgICAgIHJldHVybiBtYXliZSh0YXJnZXRDdHguY2xvc2VzdChgWyR7UEhYX0NPTVBPTkVOVH1dYCksIGVsID0+IHRoaXMub3duc0VsZW1lbnQoZWwpICYmIHRoaXMuY29tcG9uZW50SUQoZWwpKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHB1c2hIb29rRXZlbnQoZWwsIHRhcmdldEN0eCwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpe1xuICAgICAgdGhpcy5sb2coXCJob29rXCIsICgpID0+IFtcInVuYWJsZSB0byBwdXNoIGhvb2sgZXZlbnQuIExpdmVWaWV3IG5vdCBjb25uZWN0ZWRcIiwgZXZlbnQsIHBheWxvYWRdKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGxldCBbcmVmLCBlbHMsIG9wdHNdID0gdGhpcy5wdXRSZWYoW3tlbCwgbG9hZGluZzogdHJ1ZSwgbG9jazogdHJ1ZX1dLCBldmVudCwgXCJob29rXCIpXG4gICAgdGhpcy5wdXNoV2l0aFJlcGx5KCgpID0+IFtyZWYsIGVscywgb3B0c10sIFwiZXZlbnRcIiwge1xuICAgICAgdHlwZTogXCJob29rXCIsXG4gICAgICBldmVudDogZXZlbnQsXG4gICAgICB2YWx1ZTogcGF5bG9hZCxcbiAgICAgIGNpZDogdGhpcy5jbG9zZXN0Q29tcG9uZW50SUQodGFyZ2V0Q3R4KVxuICAgIH0pLnRoZW4oKHtyZXNwOiBfcmVzcCwgcmVwbHk6IGhvb2tSZXBseX0pID0+IG9uUmVwbHkoaG9va1JlcGx5LCByZWYpKVxuXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgZXh0cmFjdE1ldGEoZWwsIG1ldGEsIHZhbHVlKXtcbiAgICBsZXQgcHJlZml4ID0gdGhpcy5iaW5kaW5nKFwidmFsdWUtXCIpXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGVsLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xuICAgICAgaWYoIW1ldGEpeyBtZXRhID0ge30gfVxuICAgICAgbGV0IG5hbWUgPSBlbC5hdHRyaWJ1dGVzW2ldLm5hbWVcbiAgICAgIGlmKG5hbWUuc3RhcnRzV2l0aChwcmVmaXgpKXsgbWV0YVtuYW1lLnJlcGxhY2UocHJlZml4LCBcIlwiKV0gPSBlbC5nZXRBdHRyaWJ1dGUobmFtZSkgfVxuICAgIH1cbiAgICBpZihlbC52YWx1ZSAhPT0gdW5kZWZpbmVkICYmICEoZWwgaW5zdGFuY2VvZiBIVE1MRm9ybUVsZW1lbnQpKXtcbiAgICAgIGlmKCFtZXRhKXsgbWV0YSA9IHt9IH1cbiAgICAgIG1ldGEudmFsdWUgPSBlbC52YWx1ZVxuXG4gICAgICBpZihlbC50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgQ0hFQ0tBQkxFX0lOUFVUUy5pbmRleE9mKGVsLnR5cGUpID49IDAgJiYgIWVsLmNoZWNrZWQpe1xuICAgICAgICBkZWxldGUgbWV0YS52YWx1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZih2YWx1ZSl7XG4gICAgICBpZighbWV0YSl7IG1ldGEgPSB7fSB9XG4gICAgICBmb3IobGV0IGtleSBpbiB2YWx1ZSl7IG1ldGFba2V5XSA9IHZhbHVlW2tleV0gfVxuICAgIH1cbiAgICByZXR1cm4gbWV0YVxuICB9XG5cbiAgcHVzaEV2ZW50KHR5cGUsIGVsLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBtZXRhLCBvcHRzID0ge30sIG9uUmVwbHkpe1xuICAgIHRoaXMucHVzaFdpdGhSZXBseSgoKSA9PiB0aGlzLnB1dFJlZihbe2VsLCBsb2FkaW5nOiB0cnVlLCBsb2NrOiB0cnVlfV0sIHBoeEV2ZW50LCB0eXBlLCBvcHRzKSwgXCJldmVudFwiLCB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgdmFsdWU6IHRoaXMuZXh0cmFjdE1ldGEoZWwsIG1ldGEsIG9wdHMudmFsdWUpLFxuICAgICAgY2lkOiB0aGlzLnRhcmdldENvbXBvbmVudElEKGVsLCB0YXJnZXRDdHgsIG9wdHMpXG4gICAgfSkudGhlbigoe3JlcGx5fSkgPT4gb25SZXBseSAmJiBvblJlcGx5KHJlcGx5KSlcbiAgfVxuXG4gIHB1c2hGaWxlUHJvZ3Jlc3MoZmlsZUVsLCBlbnRyeVJlZiwgcHJvZ3Jlc3MsIG9uUmVwbHkgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgdGhpcy5saXZlU29ja2V0LndpdGhpbk93bmVycyhmaWxlRWwuZm9ybSwgKHZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgdmlldy5wdXNoV2l0aFJlcGx5KG51bGwsIFwicHJvZ3Jlc3NcIiwge1xuICAgICAgICBldmVudDogZmlsZUVsLmdldEF0dHJpYnV0ZSh2aWV3LmJpbmRpbmcoUEhYX1BST0dSRVNTKSksXG4gICAgICAgIHJlZjogZmlsZUVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRiksXG4gICAgICAgIGVudHJ5X3JlZjogZW50cnlSZWYsXG4gICAgICAgIHByb2dyZXNzOiBwcm9ncmVzcyxcbiAgICAgICAgY2lkOiB2aWV3LnRhcmdldENvbXBvbmVudElEKGZpbGVFbC5mb3JtLCB0YXJnZXRDdHgpXG4gICAgICB9KS50aGVuKCh7cmVzcH0pID0+IG9uUmVwbHkocmVzcCkpXG4gICAgfSlcbiAgfVxuXG4gIHB1c2hJbnB1dChpbnB1dEVsLCB0YXJnZXRDdHgsIGZvcmNlQ2lkLCBwaHhFdmVudCwgb3B0cywgY2FsbGJhY2spe1xuICAgIGlmKCFpbnB1dEVsLmZvcm0pe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZm9ybSBldmVudHMgcmVxdWlyZSB0aGUgaW5wdXQgdG8gYmUgaW5zaWRlIGEgZm9ybVwiKVxuICAgIH1cblxuICAgIGxldCB1cGxvYWRzXG4gICAgbGV0IGNpZCA9IGlzQ2lkKGZvcmNlQ2lkKSA/IGZvcmNlQ2lkIDogdGhpcy50YXJnZXRDb21wb25lbnRJRChpbnB1dEVsLmZvcm0sIHRhcmdldEN0eCwgb3B0cylcbiAgICBsZXQgcmVmR2VuZXJhdG9yID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMucHV0UmVmKFtcbiAgICAgICAge2VsOiBpbnB1dEVsLCBsb2FkaW5nOiB0cnVlLCBsb2NrOiB0cnVlfSxcbiAgICAgICAge2VsOiBpbnB1dEVsLmZvcm0sIGxvYWRpbmc6IHRydWUsIGxvY2s6IHRydWV9XG4gICAgICBdLCBwaHhFdmVudCwgXCJjaGFuZ2VcIiwgb3B0cylcbiAgICB9XG4gICAgbGV0IGZvcm1EYXRhXG4gICAgbGV0IG1ldGEgID0gdGhpcy5leHRyYWN0TWV0YShpbnB1dEVsLmZvcm0pXG4gICAgaWYoaW5wdXRFbCBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50KXsgbWV0YS5zdWJtaXR0ZXIgPSBpbnB1dEVsIH1cbiAgICBpZihpbnB1dEVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIikpKXtcbiAgICAgIGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShpbnB1dEVsLmZvcm0sIHtfdGFyZ2V0OiBvcHRzLl90YXJnZXQsIC4uLm1ldGF9LCBbaW5wdXRFbC5uYW1lXSlcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybURhdGEgPSBzZXJpYWxpemVGb3JtKGlucHV0RWwuZm9ybSwge190YXJnZXQ6IG9wdHMuX3RhcmdldCwgLi4ubWV0YX0pXG4gICAgfVxuICAgIGlmKERPTS5pc1VwbG9hZElucHV0KGlucHV0RWwpICYmIGlucHV0RWwuZmlsZXMgJiYgaW5wdXRFbC5maWxlcy5sZW5ndGggPiAwKXtcbiAgICAgIExpdmVVcGxvYWRlci50cmFja0ZpbGVzKGlucHV0RWwsIEFycmF5LmZyb20oaW5wdXRFbC5maWxlcykpXG4gICAgfVxuICAgIHVwbG9hZHMgPSBMaXZlVXBsb2FkZXIuc2VyaWFsaXplVXBsb2FkcyhpbnB1dEVsKVxuXG4gICAgbGV0IGV2ZW50ID0ge1xuICAgICAgdHlwZTogXCJmb3JtXCIsXG4gICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICB1cGxvYWRzOiB1cGxvYWRzLFxuICAgICAgY2lkOiBjaWRcbiAgICB9XG4gICAgdGhpcy5wdXNoV2l0aFJlcGx5KHJlZkdlbmVyYXRvciwgXCJldmVudFwiLCBldmVudCkudGhlbigoe3Jlc3B9KSA9PiB7XG4gICAgICBpZihET00uaXNVcGxvYWRJbnB1dChpbnB1dEVsKSAmJiBET00uaXNBdXRvVXBsb2FkKGlucHV0RWwpKXtcbiAgICAgICAgLy8gdGhlIGVsZW1lbnQgY291bGQgYmUgaW5zaWRlIGEgbG9ja2VkIHBhcmVudCBmb3Igb3RoZXIgdW5yZWxhdGVkIGNoYW5nZXM7XG4gICAgICAgIC8vIHdlIGNhbiBvbmx5IHN0YXJ0IHVwbG9hZHMgd2hlbiB0aGUgdHJlZSBpcyB1bmxvY2tlZCBhbmQgdGhlXG4gICAgICAgIC8vIG5lY2Vzc2FyeSBkYXRhIGF0dHJpYnV0ZXMgYXJlIHNldCBpbiB0aGUgcmVhbCBET01cbiAgICAgICAgRWxlbWVudFJlZi5vblVubG9jayhpbnB1dEVsLCAoKSA9PiB7XG4gICAgICAgICAgaWYoTGl2ZVVwbG9hZGVyLmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXRFbCkubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICBsZXQgW3JlZiwgX2Vsc10gPSByZWZHZW5lcmF0b3IoKVxuICAgICAgICAgICAgdGhpcy51bmRvUmVmcyhyZWYsIHBoeEV2ZW50LCBbaW5wdXRFbC5mb3JtXSlcbiAgICAgICAgICAgIHRoaXMudXBsb2FkRmlsZXMoaW5wdXRFbC5mb3JtLCBwaHhFdmVudCwgdGFyZ2V0Q3R4LCByZWYsIGNpZCwgKF91cGxvYWRzKSA9PiB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHJlc3ApXG4gICAgICAgICAgICAgIHRoaXMudHJpZ2dlckF3YWl0aW5nU3VibWl0KGlucHV0RWwuZm9ybSwgcGh4RXZlbnQpXG4gICAgICAgICAgICAgIHRoaXMudW5kb1JlZnMocmVmLCBwaHhFdmVudClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzcClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdHJpZ2dlckF3YWl0aW5nU3VibWl0KGZvcm1FbCwgcGh4RXZlbnQpe1xuICAgIGxldCBhd2FpdGluZ1N1Ym1pdCA9IHRoaXMuZ2V0U2NoZWR1bGVkU3VibWl0KGZvcm1FbClcbiAgICBpZihhd2FpdGluZ1N1Ym1pdCl7XG4gICAgICBsZXQgW19lbCwgX3JlZiwgX29wdHMsIGNhbGxiYWNrXSA9IGF3YWl0aW5nU3VibWl0XG4gICAgICB0aGlzLmNhbmNlbFN1Ym1pdChmb3JtRWwsIHBoeEV2ZW50KVxuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIGdldFNjaGVkdWxlZFN1Ym1pdChmb3JtRWwpe1xuICAgIHJldHVybiB0aGlzLmZvcm1TdWJtaXRzLmZpbmQoKFtlbCwgX3JlZiwgX29wdHMsIF9jYWxsYmFja10pID0+IGVsLmlzU2FtZU5vZGUoZm9ybUVsKSlcbiAgfVxuXG4gIHNjaGVkdWxlU3VibWl0KGZvcm1FbCwgcmVmLCBvcHRzLCBjYWxsYmFjayl7XG4gICAgaWYodGhpcy5nZXRTY2hlZHVsZWRTdWJtaXQoZm9ybUVsKSl7IHJldHVybiB0cnVlIH1cbiAgICB0aGlzLmZvcm1TdWJtaXRzLnB1c2goW2Zvcm1FbCwgcmVmLCBvcHRzLCBjYWxsYmFja10pXG4gIH1cblxuICBjYW5jZWxTdWJtaXQoZm9ybUVsLCBwaHhFdmVudCl7XG4gICAgdGhpcy5mb3JtU3VibWl0cyA9IHRoaXMuZm9ybVN1Ym1pdHMuZmlsdGVyKChbZWwsIHJlZiwgX29wdHMsIF9jYWxsYmFja10pID0+IHtcbiAgICAgIGlmKGVsLmlzU2FtZU5vZGUoZm9ybUVsKSl7XG4gICAgICAgIHRoaXMudW5kb1JlZnMocmVmLCBwaHhFdmVudClcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBkaXNhYmxlRm9ybShmb3JtRWwsIHBoeEV2ZW50LCBvcHRzID0ge30pe1xuICAgIGxldCBmaWx0ZXJJZ25vcmVkID0gZWwgPT4ge1xuICAgICAgbGV0IHVzZXJJZ25vcmVkID0gY2xvc2VzdFBoeEJpbmRpbmcoZWwsIGAke3RoaXMuYmluZGluZyhQSFhfVVBEQVRFKX09aWdub3JlYCwgZWwuZm9ybSlcbiAgICAgIHJldHVybiAhKHVzZXJJZ25vcmVkIHx8IGNsb3Nlc3RQaHhCaW5kaW5nKGVsLCBcImRhdGEtcGh4LXVwZGF0ZT1pZ25vcmVcIiwgZWwuZm9ybSkpXG4gICAgfVxuICAgIGxldCBmaWx0ZXJEaXNhYmxlcyA9IGVsID0+IHtcbiAgICAgIHJldHVybiBlbC5oYXNBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9ESVNBQkxFX1dJVEgpKVxuICAgIH1cbiAgICBsZXQgZmlsdGVyQnV0dG9uID0gZWwgPT4gZWwudGFnTmFtZSA9PSBcIkJVVFRPTlwiXG5cbiAgICBsZXQgZmlsdGVySW5wdXQgPSBlbCA9PiBbXCJJTlBVVFwiLCBcIlRFWFRBUkVBXCIsIFwiU0VMRUNUXCJdLmluY2x1ZGVzKGVsLnRhZ05hbWUpXG5cbiAgICBsZXQgZm9ybUVsZW1lbnRzID0gQXJyYXkuZnJvbShmb3JtRWwuZWxlbWVudHMpXG4gICAgbGV0IGRpc2FibGVzID0gZm9ybUVsZW1lbnRzLmZpbHRlcihmaWx0ZXJEaXNhYmxlcylcbiAgICBsZXQgYnV0dG9ucyA9IGZvcm1FbGVtZW50cy5maWx0ZXIoZmlsdGVyQnV0dG9uKS5maWx0ZXIoZmlsdGVySWdub3JlZClcbiAgICBsZXQgaW5wdXRzID0gZm9ybUVsZW1lbnRzLmZpbHRlcihmaWx0ZXJJbnB1dCkuZmlsdGVyKGZpbHRlcklnbm9yZWQpXG5cbiAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVELCBidXR0b24uZGlzYWJsZWQpXG4gICAgICBidXR0b24uZGlzYWJsZWQgPSB0cnVlXG4gICAgfSlcbiAgICBpbnB1dHMuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoUEhYX1JFQURPTkxZLCBpbnB1dC5yZWFkT25seSlcbiAgICAgIGlucHV0LnJlYWRPbmx5ID0gdHJ1ZVxuICAgICAgaWYoaW5wdXQuZmlsZXMpe1xuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVELCBpbnB1dC5kaXNhYmxlZClcbiAgICAgICAgaW5wdXQuZGlzYWJsZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgICBsZXQgZm9ybUVscyA9IGRpc2FibGVzLmNvbmNhdChidXR0b25zKS5jb25jYXQoaW5wdXRzKS5tYXAoZWwgPT4ge1xuICAgICAgcmV0dXJuIHtlbCwgbG9hZGluZzogdHJ1ZSwgbG9jazogdHJ1ZX1cbiAgICB9KVxuXG4gICAgLy8gd2UgcmV2ZXJzZSB0aGUgb3JkZXIgc28gZm9ybSBjaGlsZHJlbiBhcmUgYWxyZWFkeSBsb2NrZWQgYnkgdGhlIHRpbWVcbiAgICAvLyB0aGUgZm9ybSBpcyBsb2NrZWRcbiAgICBsZXQgZWxzID0gW3tlbDogZm9ybUVsLCBsb2FkaW5nOiB0cnVlLCBsb2NrOiBmYWxzZX1dLmNvbmNhdChmb3JtRWxzKS5yZXZlcnNlKClcbiAgICByZXR1cm4gdGhpcy5wdXRSZWYoZWxzLCBwaHhFdmVudCwgXCJzdWJtaXRcIiwgb3B0cylcbiAgfVxuXG4gIHB1c2hGb3JtU3VibWl0KGZvcm1FbCwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgc3VibWl0dGVyLCBvcHRzLCBvblJlcGx5KXtcbiAgICBsZXQgcmVmR2VuZXJhdG9yID0gKCkgPT4gdGhpcy5kaXNhYmxlRm9ybShmb3JtRWwsIHBoeEV2ZW50LCB7XG4gICAgICAuLi5vcHRzLFxuICAgICAgZm9ybTogZm9ybUVsLFxuICAgICAgc3VibWl0dGVyOiBzdWJtaXR0ZXJcbiAgICB9KVxuICAgIGxldCBjaWQgPSB0aGlzLnRhcmdldENvbXBvbmVudElEKGZvcm1FbCwgdGFyZ2V0Q3R4KVxuICAgIGlmKExpdmVVcGxvYWRlci5oYXNVcGxvYWRzSW5Qcm9ncmVzcyhmb3JtRWwpKXtcbiAgICAgIGxldCBbcmVmLCBfZWxzXSA9IHJlZkdlbmVyYXRvcigpXG4gICAgICBsZXQgcHVzaCA9ICgpID0+IHRoaXMucHVzaEZvcm1TdWJtaXQoZm9ybUVsLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBzdWJtaXR0ZXIsIG9wdHMsIG9uUmVwbHkpXG4gICAgICByZXR1cm4gdGhpcy5zY2hlZHVsZVN1Ym1pdChmb3JtRWwsIHJlZiwgb3B0cywgcHVzaClcbiAgICB9IGVsc2UgaWYoTGl2ZVVwbG9hZGVyLmlucHV0c0F3YWl0aW5nUHJlZmxpZ2h0KGZvcm1FbCkubGVuZ3RoID4gMCl7XG4gICAgICBsZXQgW3JlZiwgZWxzXSA9IHJlZkdlbmVyYXRvcigpXG4gICAgICBsZXQgcHJveHlSZWZHZW4gPSAoKSA9PiBbcmVmLCBlbHMsIG9wdHNdXG4gICAgICB0aGlzLnVwbG9hZEZpbGVzKGZvcm1FbCwgcGh4RXZlbnQsIHRhcmdldEN0eCwgcmVmLCBjaWQsIChfdXBsb2FkcykgPT4ge1xuICAgICAgICAvLyBpZiB3ZSBzdGlsbCBoYXZpbmcgcGVuZGluZyBwcmVmbGlnaHRzIGl0IG1lYW5zIHdlIGhhdmUgaW52YWxpZCBlbnRyaWVzXG4gICAgICAgIC8vIGFuZCB0aGUgcGh4LXN1Ym1pdCBjYW5ub3QgYmUgY29tcGxldGVkXG4gICAgICAgIGlmKExpdmVVcGxvYWRlci5pbnB1dHNBd2FpdGluZ1ByZWZsaWdodChmb3JtRWwpLmxlbmd0aCA+IDApe1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuZG9SZWZzKHJlZiwgcGh4RXZlbnQpXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1ldGEgPSB0aGlzLmV4dHJhY3RNZXRhKGZvcm1FbClcbiAgICAgICAgbGV0IGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShmb3JtRWwsIHtzdWJtaXR0ZXIsIC4uLm1ldGF9KVxuICAgICAgICB0aGlzLnB1c2hXaXRoUmVwbHkocHJveHlSZWZHZW4sIFwiZXZlbnRcIiwge1xuICAgICAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgICAgIGV2ZW50OiBwaHhFdmVudCxcbiAgICAgICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICAgICAgY2lkOiBjaWRcbiAgICAgICAgfSkudGhlbigoe3Jlc3B9KSA9PiBvblJlcGx5KHJlc3ApKVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYoIShmb3JtRWwuaGFzQXR0cmlidXRlKFBIWF9SRUZfU1JDKSAmJiBmb3JtRWwuY2xhc3NMaXN0LmNvbnRhaW5zKFwicGh4LXN1Ym1pdC1sb2FkaW5nXCIpKSl7XG4gICAgICBsZXQgbWV0YSA9IHRoaXMuZXh0cmFjdE1ldGEoZm9ybUVsKVxuICAgICAgbGV0IGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShmb3JtRWwsIHtzdWJtaXR0ZXIsIC4uLm1ldGF9KVxuICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KHJlZkdlbmVyYXRvciwgXCJldmVudFwiLCB7XG4gICAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICAgIHZhbHVlOiBmb3JtRGF0YSxcbiAgICAgICAgY2lkOiBjaWRcbiAgICAgIH0pLnRoZW4oKHtyZXNwfSkgPT4gb25SZXBseShyZXNwKSlcbiAgICB9XG4gIH1cblxuICB1cGxvYWRGaWxlcyhmb3JtRWwsIHBoeEV2ZW50LCB0YXJnZXRDdHgsIHJlZiwgY2lkLCBvbkNvbXBsZXRlKXtcbiAgICBsZXQgam9pbkNvdW50QXRVcGxvYWQgPSB0aGlzLmpvaW5Db3VudFxuICAgIGxldCBpbnB1dEVscyA9IExpdmVVcGxvYWRlci5hY3RpdmVGaWxlSW5wdXRzKGZvcm1FbClcbiAgICBsZXQgbnVtRmlsZUlucHV0c0luUHJvZ3Jlc3MgPSBpbnB1dEVscy5sZW5ndGhcblxuICAgIC8vIGdldCBlYWNoIGZpbGUgaW5wdXRcbiAgICBpbnB1dEVscy5mb3JFYWNoKGlucHV0RWwgPT4ge1xuICAgICAgbGV0IHVwbG9hZGVyID0gbmV3IExpdmVVcGxvYWRlcihpbnB1dEVsLCB0aGlzLCAoKSA9PiB7XG4gICAgICAgIG51bUZpbGVJbnB1dHNJblByb2dyZXNzLS1cbiAgICAgICAgaWYobnVtRmlsZUlucHV0c0luUHJvZ3Jlc3MgPT09IDApeyBvbkNvbXBsZXRlKCkgfVxuICAgICAgfSlcblxuICAgICAgbGV0IGVudHJpZXMgPSB1cGxvYWRlci5lbnRyaWVzKCkubWFwKGVudHJ5ID0+IGVudHJ5LnRvUHJlZmxpZ2h0UGF5bG9hZCgpKVxuXG4gICAgICBpZihlbnRyaWVzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIG51bUZpbGVJbnB1dHNJblByb2dyZXNzLS1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgICByZWY6IGlucHV0RWwuZ2V0QXR0cmlidXRlKFBIWF9VUExPQURfUkVGKSxcbiAgICAgICAgZW50cmllczogZW50cmllcyxcbiAgICAgICAgY2lkOiB0aGlzLnRhcmdldENvbXBvbmVudElEKGlucHV0RWwuZm9ybSwgdGFyZ2V0Q3R4KVxuICAgICAgfVxuXG4gICAgICB0aGlzLmxvZyhcInVwbG9hZFwiLCAoKSA9PiBbXCJzZW5kaW5nIHByZWZsaWdodCByZXF1ZXN0XCIsIHBheWxvYWRdKVxuXG4gICAgICB0aGlzLnB1c2hXaXRoUmVwbHkobnVsbCwgXCJhbGxvd191cGxvYWRcIiwgcGF5bG9hZCkudGhlbigoe3Jlc3B9KSA9PiB7XG4gICAgICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtcImdvdCBwcmVmbGlnaHQgcmVzcG9uc2VcIiwgcmVzcF0pXG4gICAgICAgIC8vIHRoZSBwcmVmbGlnaHQgd2lsbCByZWplY3QgZW50cmllcyBiZXlvbmQgdGhlIG1heCBlbnRyaWVzXG4gICAgICAgIC8vIHNvIHdlIGVycm9yIGFuZCBjYW5jZWwgZW50cmllcyBvbiB0aGUgY2xpZW50IHRoYXQgYXJlIG1pc3NpbmcgZnJvbSB0aGUgcmVzcG9uc2VcbiAgICAgICAgdXBsb2FkZXIuZW50cmllcygpLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgIGlmKHJlc3AuZW50cmllcyAmJiAhcmVzcC5lbnRyaWVzW2VudHJ5LnJlZl0pe1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVGYWlsZWRFbnRyeVByZWZsaWdodChlbnRyeS5yZWYsIFwiZmFpbGVkIHByZWZsaWdodFwiLCB1cGxvYWRlcilcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC8vIGZvciBhdXRvIHVwbG9hZHMsIHdlIG1heSBoYXZlIGFuIGVtcHR5IGVudHJpZXMgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyXG4gICAgICAgIC8vIGZvciBmb3JtIHN1Ym1pdHMgdGhhdCBjb250YWluIGludmFsaWQgZW50cmllc1xuICAgICAgICBpZihyZXNwLmVycm9yIHx8IE9iamVjdC5rZXlzKHJlc3AuZW50cmllcykubGVuZ3RoID09PSAwKXtcbiAgICAgICAgICB0aGlzLnVuZG9SZWZzKHJlZiwgcGh4RXZlbnQpXG4gICAgICAgICAgbGV0IGVycm9ycyA9IHJlc3AuZXJyb3IgfHwgW11cbiAgICAgICAgICBlcnJvcnMubWFwKChbZW50cnlfcmVmLCByZWFzb25dKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUZhaWxlZEVudHJ5UHJlZmxpZ2h0KGVudHJ5X3JlZiwgcmVhc29uLCB1cGxvYWRlcilcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBvbkVycm9yID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwub25FcnJvcigoKSA9PiB7XG4gICAgICAgICAgICAgIGlmKHRoaXMuam9pbkNvdW50ID09PSBqb2luQ291bnRBdFVwbG9hZCl7IGNhbGxiYWNrKCkgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBsb2FkZXIuaW5pdEFkYXB0ZXJVcGxvYWQocmVzcCwgb25FcnJvciwgdGhpcy5saXZlU29ja2V0KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBoYW5kbGVGYWlsZWRFbnRyeVByZWZsaWdodCh1cGxvYWRSZWYsIHJlYXNvbiwgdXBsb2FkZXIpe1xuICAgIGlmKHVwbG9hZGVyLmlzQXV0b1VwbG9hZCgpKXtcbiAgICAgIC8vIHVwbG9hZFJlZiBtYXkgYmUgdG9wIGxldmVsIHVwbG9hZCBjb25maWcgcmVmIG9yIGVudHJ5IHJlZlxuICAgICAgbGV0IGVudHJ5ID0gdXBsb2FkZXIuZW50cmllcygpLmZpbmQoZW50cnkgPT4gZW50cnkucmVmID09PSB1cGxvYWRSZWYudG9TdHJpbmcoKSlcbiAgICAgIGlmKGVudHJ5KXsgZW50cnkuY2FuY2VsKCkgfVxuICAgIH0gZWxzZSB7XG4gICAgICB1cGxvYWRlci5lbnRyaWVzKCkubWFwKGVudHJ5ID0+IGVudHJ5LmNhbmNlbCgpKVxuICAgIH1cbiAgICB0aGlzLmxvZyhcInVwbG9hZFwiLCAoKSA9PiBbYGVycm9yIGZvciBlbnRyeSAke3VwbG9hZFJlZn1gLCByZWFzb25dKVxuICB9XG5cbiAgZGlzcGF0Y2hVcGxvYWRzKHRhcmdldEN0eCwgbmFtZSwgZmlsZXNPckJsb2JzKXtcbiAgICBsZXQgdGFyZ2V0RWxlbWVudCA9IHRoaXMudGFyZ2V0Q3R4RWxlbWVudCh0YXJnZXRDdHgpIHx8IHRoaXMuZWxcbiAgICBsZXQgaW5wdXRzID0gRE9NLmZpbmRVcGxvYWRJbnB1dHModGFyZ2V0RWxlbWVudCkuZmlsdGVyKGVsID0+IGVsLm5hbWUgPT09IG5hbWUpXG4gICAgaWYoaW5wdXRzLmxlbmd0aCA9PT0gMCl7IGxvZ0Vycm9yKGBubyBsaXZlIGZpbGUgaW5wdXRzIGZvdW5kIG1hdGNoaW5nIHRoZSBuYW1lIFwiJHtuYW1lfVwiYCkgfVxuICAgIGVsc2UgaWYoaW5wdXRzLmxlbmd0aCA+IDEpeyBsb2dFcnJvcihgZHVwbGljYXRlIGxpdmUgZmlsZSBpbnB1dHMgZm91bmQgbWF0Y2hpbmcgdGhlIG5hbWUgXCIke25hbWV9XCJgKSB9XG4gICAgZWxzZSB7IERPTS5kaXNwYXRjaEV2ZW50KGlucHV0c1swXSwgUEhYX1RSQUNLX1VQTE9BRFMsIHtkZXRhaWw6IHtmaWxlczogZmlsZXNPckJsb2JzfX0pIH1cbiAgfVxuXG4gIHRhcmdldEN0eEVsZW1lbnQodGFyZ2V0Q3R4KXtcbiAgICBpZihpc0NpZCh0YXJnZXRDdHgpKXtcbiAgICAgIGxldCBbdGFyZ2V0XSA9IERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgdGFyZ2V0Q3R4KVxuICAgICAgcmV0dXJuIHRhcmdldFxuICAgIH0gZWxzZSBpZih0YXJnZXRDdHgpe1xuICAgICAgcmV0dXJuIHRhcmdldEN0eFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHB1c2hGb3JtUmVjb3Zlcnkob2xkRm9ybSwgbmV3Rm9ybSwgdGVtcGxhdGVEb20sIGNhbGxiYWNrKXtcbiAgICAvLyB3ZSBhcmUgb25seSByZWNvdmVyaW5nIGZvcm1zIGluc2lkZSB0aGUgY3VycmVudCB2aWV3LCB0aGVyZWZvcmUgaXQgaXMgc2FmZSB0b1xuICAgIC8vIHNraXAgd2l0aGluT3duZXJzIGhlcmUgYW5kIGFsd2F5cyB1c2UgdGhpcyB3aGVuIHJlZmVycmluZyB0byB0aGUgdmlld1xuICAgIGNvbnN0IHBoeENoYW5nZSA9IHRoaXMuYmluZGluZyhcImNoYW5nZVwiKVxuICAgIGNvbnN0IHBoeFRhcmdldCA9IG5ld0Zvcm0uZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcInRhcmdldFwiKSkgfHwgbmV3Rm9ybVxuICAgIGNvbnN0IHBoeEV2ZW50ID0gbmV3Rm9ybS5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9BVVRPX1JFQ09WRVIpKSB8fCBuZXdGb3JtLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIikpXG4gICAgY29uc3QgaW5wdXRzID0gQXJyYXkuZnJvbShvbGRGb3JtLmVsZW1lbnRzKS5maWx0ZXIoZWwgPT4gRE9NLmlzRm9ybUlucHV0KGVsKSAmJiBlbC5uYW1lICYmICFlbC5oYXNBdHRyaWJ1dGUocGh4Q2hhbmdlKSlcbiAgICBpZihpbnB1dHMubGVuZ3RoID09PSAwKXsgcmV0dXJuIH1cblxuICAgIC8vIHdlIG11c3QgY2xlYXIgdHJhY2tlZCB1cGxvYWRzIGJlZm9yZSByZWNvdmVyeSBhcyB0aGV5IG5vIGxvbmdlciBoYXZlIHZhbGlkIHJlZnNcbiAgICBpbnB1dHMuZm9yRWFjaChpbnB1dCA9PiBpbnB1dC5oYXNBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpICYmIExpdmVVcGxvYWRlci5jbGVhckZpbGVzKGlucHV0KSlcbiAgICAvLyBwdXNoSW5wdXQgYXNzdW1lcyB0aGF0IHRoZXJlIGlzIGEgc291cmNlIGVsZW1lbnQgdGhhdCBpbml0aWF0ZWQgdGhlIGNoYW5nZTtcbiAgICAvLyBiZWNhdXNlIHRoaXMgaXMgbm90IHRoZSBjYXNlIHdoZW4gd2UgcmVjb3ZlciBmb3Jtcywgd2UgcHJvdmlkZSB0aGUgZmlyc3QgaW5wdXQgd2UgZmluZFxuICAgIGxldCBpbnB1dCA9IGlucHV0cy5maW5kKGVsID0+IGVsLnR5cGUgIT09IFwiaGlkZGVuXCIpIHx8IGlucHV0c1swXVxuXG4gICAgLy8gaW4gdGhlIGNhc2UgdGhhdCB0aGVyZSBhcmUgbXVsdGlwbGUgdGFyZ2V0cywgd2UgY291bnQgdGhlIG51bWJlciBvZiBwZW5kaW5nIHJlY292ZXJ5IGV2ZW50c1xuICAgIC8vIGFuZCBvbmx5IGNhbGwgdGhlIGNhbGxiYWNrIG9uY2UgYWxsIGV2ZW50cyBoYXZlIGJlZW4gcHJvY2Vzc2VkXG4gICAgbGV0IHBlbmRpbmcgPSAwXG4gICAgLy8gd2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsIGNhbGxiYWNrLCBkb20sIHZpZXdFbClcbiAgICB0aGlzLndpdGhpblRhcmdldHMocGh4VGFyZ2V0LCAodGFyZ2V0VmlldywgdGFyZ2V0Q3R4KSA9PiB7XG4gICAgICBjb25zdCBjaWQgPSB0aGlzLnRhcmdldENvbXBvbmVudElEKG5ld0Zvcm0sIHRhcmdldEN0eClcbiAgICAgIHBlbmRpbmcrK1xuICAgICAgbGV0IGUgPSBuZXcgQ3VzdG9tRXZlbnQoXCJwaHg6Zm9ybS1yZWNvdmVyeVwiLCB7ZGV0YWlsOiB7c291cmNlRWxlbWVudDogb2xkRm9ybX19KVxuICAgICAgSlMuZXhlYyhlLCBcImNoYW5nZVwiLCBwaHhFdmVudCwgdGhpcywgaW5wdXQsIFtcInB1c2hcIiwge1xuICAgICAgICBfdGFyZ2V0OiBpbnB1dC5uYW1lLFxuICAgICAgICB0YXJnZXRWaWV3LFxuICAgICAgICB0YXJnZXRDdHgsXG4gICAgICAgIG5ld0NpZDogY2lkLFxuICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgIHBlbmRpbmctLVxuICAgICAgICAgIGlmKHBlbmRpbmcgPT09IDApeyBjYWxsYmFjaygpIH1cbiAgICAgICAgfVxuICAgICAgfV0pXG4gICAgfSwgdGVtcGxhdGVEb20sIHRlbXBsYXRlRG9tKVxuICB9XG5cbiAgcHVzaExpbmtQYXRjaChlLCBocmVmLCB0YXJnZXRFbCwgY2FsbGJhY2spe1xuICAgIGxldCBsaW5rUmVmID0gdGhpcy5saXZlU29ja2V0LnNldFBlbmRpbmdMaW5rKGhyZWYpXG4gICAgLy8gb25seSBhZGQgbG9hZGluZyBzdGF0ZXMgaWYgZXZlbnQgaXMgdHJ1c3RlZCAoaXQgd2FzIHRyaWdnZXJlZCBieSB1c2VyLCBzdWNoIGFzIGNsaWNrKSBhbmRcbiAgICAvLyBpdCdzIG5vdCBhIGZvcndhcmQvYmFjayBuYXZpZ2F0aW9uIGZyb20gcG9wc3RhdGVcbiAgICBsZXQgbG9hZGluZyA9IGUuaXNUcnVzdGVkICYmIGUudHlwZSAhPT0gXCJwb3BzdGF0ZVwiXG4gICAgbGV0IHJlZkdlbiA9IHRhcmdldEVsID8gKCkgPT4gdGhpcy5wdXRSZWYoW3tlbDogdGFyZ2V0RWwsIGxvYWRpbmc6IGxvYWRpbmcsIGxvY2s6IHRydWV9XSwgbnVsbCwgXCJjbGlja1wiKSA6IG51bGxcbiAgICBsZXQgZmFsbGJhY2sgPSAoKSA9PiB0aGlzLmxpdmVTb2NrZXQucmVkaXJlY3Qod2luZG93LmxvY2F0aW9uLmhyZWYpXG4gICAgbGV0IHVybCA9IGhyZWYuc3RhcnRzV2l0aChcIi9cIikgPyBgJHtsb2NhdGlvbi5wcm90b2NvbH0vLyR7bG9jYXRpb24uaG9zdH0ke2hyZWZ9YCA6IGhyZWZcblxuICAgIHRoaXMucHVzaFdpdGhSZXBseShyZWZHZW4sIFwibGl2ZV9wYXRjaFwiLCB7dXJsfSkudGhlbihcbiAgICAgICh7cmVzcH0pID0+IHtcbiAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgIGlmKHJlc3AubGlua19yZWRpcmVjdCl7XG4gICAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVwbGFjZU1haW4oaHJlZiwgbnVsbCwgY2FsbGJhY2ssIGxpbmtSZWYpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKHRoaXMubGl2ZVNvY2tldC5jb21taXRQZW5kaW5nTGluayhsaW5rUmVmKSl7XG4gICAgICAgICAgICAgIHRoaXMuaHJlZiA9IGhyZWZcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXBwbHlQZW5kaW5nVXBkYXRlcygpXG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhsaW5rUmVmKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICAoe2Vycm9yOiBfZXJyb3IsIHRpbWVvdXQ6IF90aW1lb3V0fSkgPT4gZmFsbGJhY2soKVxuICAgIClcbiAgfVxuXG4gIGdldEZvcm1zRm9yUmVjb3ZlcnkoKXtcbiAgICBpZih0aGlzLmpvaW5Db3VudCA9PT0gMCl7IHJldHVybiB7fSB9XG5cbiAgICBsZXQgcGh4Q2hhbmdlID0gdGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpXG5cbiAgICByZXR1cm4gRE9NLmFsbCh0aGlzLmVsLCBgZm9ybVske3BoeENoYW5nZX1dYClcbiAgICAgIC5maWx0ZXIoZm9ybSA9PiBmb3JtLmlkKVxuICAgICAgLmZpbHRlcihmb3JtID0+IGZvcm0uZWxlbWVudHMubGVuZ3RoID4gMClcbiAgICAgIC5maWx0ZXIoZm9ybSA9PiBmb3JtLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0FVVE9fUkVDT1ZFUikpICE9PSBcImlnbm9yZVwiKVxuICAgICAgLm1hcChmb3JtID0+IGZvcm0uY2xvbmVOb2RlKHRydWUpKVxuICAgICAgLnJlZHVjZSgoYWNjLCBmb3JtKSA9PiB7XG4gICAgICAgIGFjY1tmb3JtLmlkXSA9IGZvcm1cbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwge30pXG4gIH1cblxuICBtYXliZVB1c2hDb21wb25lbnRzRGVzdHJveWVkKGRlc3Ryb3llZENJRHMpe1xuICAgIGxldCB3aWxsRGVzdHJveUNJRHMgPSBkZXN0cm95ZWRDSURzLmZpbHRlcihjaWQgPT4ge1xuICAgICAgcmV0dXJuIERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgY2lkKS5sZW5ndGggPT09IDBcbiAgICB9KVxuXG4gICAgaWYod2lsbERlc3Ryb3lDSURzLmxlbmd0aCA+IDApe1xuICAgICAgLy8gd2UgbXVzdCByZXNldCB0aGUgcmVuZGVyIGNoYW5nZSB0cmFja2luZyBmb3IgY2lkcyB0aGF0XG4gICAgICAvLyBjb3VsZCBiZSBhZGRlZCBiYWNrIGZyb20gdGhlIHNlcnZlciBzbyB3ZSBkb24ndCBza2lwIHRoZW1cbiAgICAgIHdpbGxEZXN0cm95Q0lEcy5mb3JFYWNoKGNpZCA9PiB0aGlzLnJlbmRlcmVkLnJlc2V0UmVuZGVyKGNpZCkpXG5cbiAgICAgIHRoaXMucHVzaFdpdGhSZXBseShudWxsLCBcImNpZHNfd2lsbF9kZXN0cm95XCIsIHtjaWRzOiB3aWxsRGVzdHJveUNJRHN9KS50aGVuKCgpID0+IHtcbiAgICAgICAgLy8gd2UgbXVzdCB3YWl0IGZvciBwZW5kaW5nIHRyYW5zaXRpb25zIHRvIGNvbXBsZXRlIGJlZm9yZSBkZXRlcm1pbmluZ1xuICAgICAgICAvLyBpZiB0aGUgY2lkcyB3ZXJlIGFkZGVkIGJhY2sgdG8gdGhlIERPTSBpbiB0aGUgbWVhbnRpbWUgKCMzMTM5KVxuICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgLy8gU2VlIGlmIGFueSBvZiB0aGUgY2lkcyB3ZSB3YW50ZWQgdG8gZGVzdHJveSB3ZXJlIGFkZGVkIGJhY2ssXG4gICAgICAgICAgLy8gaWYgdGhleSB3ZXJlIGFkZGVkIGJhY2ssIHdlIGRvbid0IGFjdHVhbGx5IGRlc3Ryb3kgdGhlbS5cbiAgICAgICAgICBsZXQgY29tcGxldGVseURlc3Ryb3lDSURzID0gd2lsbERlc3Ryb3lDSURzLmZpbHRlcihjaWQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgY2lkKS5sZW5ndGggPT09IDBcbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgaWYoY29tcGxldGVseURlc3Ryb3lDSURzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KG51bGwsIFwiY2lkc19kZXN0cm95ZWRcIiwge2NpZHM6IGNvbXBsZXRlbHlEZXN0cm95Q0lEc30pLnRoZW4oKHtyZXNwfSkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkLnBydW5lQ0lEcyhyZXNwLmNpZHMpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgb3duc0VsZW1lbnQoZWwpe1xuICAgIGxldCBwYXJlbnRWaWV3RWwgPSBlbC5jbG9zZXN0KFBIWF9WSUVXX1NFTEVDVE9SKVxuICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1BBUkVOVF9JRCkgPT09IHRoaXMuaWQgfHxcbiAgICAgIChwYXJlbnRWaWV3RWwgJiYgcGFyZW50Vmlld0VsLmlkID09PSB0aGlzLmlkKSB8fFxuICAgICAgKCFwYXJlbnRWaWV3RWwgJiYgdGhpcy5pc0RlYWQpXG4gIH1cblxuICBzdWJtaXRGb3JtKGZvcm0sIHRhcmdldEN0eCwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgb3B0cyA9IHt9KXtcbiAgICBET00ucHV0UHJpdmF0ZShmb3JtLCBQSFhfSEFTX1NVQk1JVFRFRCwgdHJ1ZSlcbiAgICBjb25zdCBpbnB1dHMgPSBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpXG4gICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4gRE9NLnB1dFByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVELCB0cnVlKSlcbiAgICB0aGlzLmxpdmVTb2NrZXQuYmx1ckFjdGl2ZUVsZW1lbnQodGhpcylcbiAgICB0aGlzLnB1c2hGb3JtU3VibWl0KGZvcm0sIHRhcmdldEN0eCwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgb3B0cywgKCkgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnJlc3RvcmVQcmV2aW91c2x5QWN0aXZlRm9jdXMoKVxuICAgIH0pXG4gIH1cblxuICBiaW5kaW5nKGtpbmQpeyByZXR1cm4gdGhpcy5saXZlU29ja2V0LmJpbmRpbmcoa2luZCkgfVxufVxuIiwgIi8qKiBJbml0aWFsaXplcyB0aGUgTGl2ZVNvY2tldFxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5kUG9pbnQgLSBUaGUgc3RyaW5nIFdlYlNvY2tldCBlbmRwb2ludCwgaWUsIGBcIndzczovL2V4YW1wbGUuY29tL2xpdmVcImAsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwiL2xpdmVcImAgKGluaGVyaXRlZCBob3N0ICYgcHJvdG9jb2wpXG4gKiBAcGFyYW0ge1Bob2VuaXguU29ja2V0fSBzb2NrZXQgLSB0aGUgcmVxdWlyZWQgUGhvZW5peCBTb2NrZXQgY2xhc3MgaW1wb3J0ZWQgZnJvbSBcInBob2VuaXhcIi4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIGltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXG4gKiAgICAgaW1wb3J0IHtMaXZlU29ja2V0fSBmcm9tIFwicGhvZW5peF9saXZlX3ZpZXdcIlxuICogICAgIGxldCBsaXZlU29ja2V0ID0gbmV3IExpdmVTb2NrZXQoXCIvbGl2ZVwiLCBTb2NrZXQsIHsuLi59KVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c10gLSBPcHRpb25hbCBjb25maWd1cmF0aW9uLiBPdXRzaWRlIG9mIGtleXMgbGlzdGVkIGJlbG93LCBhbGxcbiAqIGNvbmZpZ3VyYXRpb24gaXMgcGFzc2VkIGRpcmVjdGx5IHRvIHRoZSBQaG9lbml4IFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5kZWZhdWx0c10gLSBUaGUgb3B0aW9uYWwgZGVmYXVsdHMgdG8gdXNlIGZvciB2YXJpb3VzIGJpbmRpbmdzLFxuICogc3VjaCBhcyBgcGh4LWRlYm91bmNlYC4gU3VwcG9ydHMgdGhlIGZvbGxvd2luZyBrZXlzOlxuICpcbiAqICAgLSBkZWJvdW5jZSAtIHRoZSBtaWxsaXNlY29uZCBwaHgtZGVib3VuY2UgdGltZS4gRGVmYXVsdHMgMzAwXG4gKiAgIC0gdGhyb3R0bGUgLSB0aGUgbWlsbGlzZWNvbmQgcGh4LXRocm90dGxlIHRpbWUuIERlZmF1bHRzIDMwMFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnBhcmFtc10gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gZm9yIHBhc3NpbmcgY29ubmVjdCBwYXJhbXMuXG4gKiBUaGUgZnVuY3Rpb24gcmVjZWl2ZXMgdGhlIGVsZW1lbnQgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gTGl2ZVZpZXcuIEZvciBleGFtcGxlOlxuICpcbiAqICAgICAoZWwpID0+IHt2aWV3OiBlbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW15LXZpZXctbmFtZVwiLCB0b2tlbjogd2luZG93Lm15VG9rZW59XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmJpbmRpbmdQcmVmaXhdIC0gVGhlIG9wdGlvbmFsIHByZWZpeCB0byB1c2UgZm9yIGFsbCBwaHggRE9NIGFubm90YXRpb25zLlxuICogRGVmYXVsdHMgdG8gXCJwaHgtXCIuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMuaG9va3NdIC0gVGhlIG9wdGlvbmFsIG9iamVjdCBmb3IgcmVmZXJlbmNpbmcgTGl2ZVZpZXcgaG9vayBjYWxsYmFja3MuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMudXBsb2FkZXJzXSAtIFRoZSBvcHRpb25hbCBvYmplY3QgZm9yIHJlZmVyZW5jaW5nIExpdmVWaWV3IHVwbG9hZGVyIGNhbGxiYWNrcy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMubG9hZGVyVGltZW91dF0gLSBUaGUgb3B0aW9uYWwgZGVsYXkgaW4gbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGFwcGx5XG4gKiBsb2FkaW5nIHN0YXRlcy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMubWF4UmVsb2Fkc10gLSBUaGUgbWF4aW11bSByZWxvYWRzIGJlZm9yZSBlbnRlcmluZyBmYWlsc2FmZSBtb2RlLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5yZWxvYWRKaXR0ZXJNaW5dIC0gVGhlIG1pbmltdW0gdGltZSBiZXR3ZWVuIG5vcm1hbCByZWxvYWQgYXR0ZW1wdHMuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLnJlbG9hZEppdHRlck1heF0gLSBUaGUgbWF4aW11bSB0aW1lIGJldHdlZW4gbm9ybWFsIHJlbG9hZCBhdHRlbXB0cy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMuZmFpbHNhZmVKaXR0ZXJdIC0gVGhlIHRpbWUgYmV0d2VlbiByZWxvYWQgYXR0ZW1wdHMgaW4gZmFpbHNhZmUgbW9kZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnZpZXdMb2dnZXJdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIGxvZyBkZWJ1ZyBpbmZvcm1hdGlvbi4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgICh2aWV3LCBraW5kLCBtc2csIG9iaikgPT4gY29uc29sZS5sb2coYCR7dmlldy5pZH0gJHtraW5kfTogJHttc2d9IC0gYCwgb2JqKVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5tZXRhZGF0YV0gLSBUaGUgb3B0aW9uYWwgb2JqZWN0IG1hcHBpbmcgZXZlbnQgbmFtZXMgdG8gZnVuY3Rpb25zIGZvclxuICogcG9wdWxhdGluZyBldmVudCBtZXRhZGF0YS4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIG1ldGFkYXRhOiB7XG4gKiAgICAgICBjbGljazogKGUsIGVsKSA9PiB7XG4gKiAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgY3RybEtleTogZS5jdHJsS2V5LFxuICogICAgICAgICAgIG1ldGFLZXk6IGUubWV0YUtleSxcbiAqICAgICAgICAgICBkZXRhaWw6IGUuZGV0YWlsIHx8IDEsXG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICBrZXlkb3duOiAoZSwgZWwpID0+IHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICBrZXk6IGUua2V5LFxuICogICAgICAgICAgIGN0cmxLZXk6IGUuY3RybEtleSxcbiAqICAgICAgICAgICBtZXRhS2V5OiBlLm1ldGFLZXksXG4gKiAgICAgICAgICAgc2hpZnRLZXk6IGUuc2hpZnRLZXlcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIH1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5zZXNzaW9uU3RvcmFnZV0gLSBBbiBvcHRpb25hbCBTdG9yYWdlIGNvbXBhdGlibGUgb2JqZWN0XG4gKiBVc2VmdWwgd2hlbiBMaXZlVmlldyB3b24ndCBoYXZlIGFjY2VzcyB0byBgc2Vzc2lvblN0b3JhZ2VgLiAgRm9yIGV4YW1wbGUsIFRoaXMgY291bGRcbiAqIGhhcHBlbiBpZiBhIHNpdGUgbG9hZHMgYSBjcm9zcy1kb21haW4gTGl2ZVZpZXcgaW4gYW4gaWZyYW1lLiAgRXhhbXBsZSB1c2FnZTpcbiAqXG4gKiAgICAgY2xhc3MgSW5NZW1vcnlTdG9yYWdlIHtcbiAqICAgICAgIGNvbnN0cnVjdG9yKCkgeyB0aGlzLnN0b3JhZ2UgPSB7fSB9XG4gKiAgICAgICBnZXRJdGVtKGtleU5hbWUpIHsgcmV0dXJuIHRoaXMuc3RvcmFnZVtrZXlOYW1lXSB8fCBudWxsIH1cbiAqICAgICAgIHJlbW92ZUl0ZW0oa2V5TmFtZSkgeyBkZWxldGUgdGhpcy5zdG9yYWdlW2tleU5hbWVdIH1cbiAqICAgICAgIHNldEl0ZW0oa2V5TmFtZSwga2V5VmFsdWUpIHsgdGhpcy5zdG9yYWdlW2tleU5hbWVdID0ga2V5VmFsdWUgfVxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMubG9jYWxTdG9yYWdlXSAtIEFuIG9wdGlvbmFsIFN0b3JhZ2UgY29tcGF0aWJsZSBvYmplY3RcbiAqIFVzZWZ1bCBmb3Igd2hlbiBMaXZlVmlldyB3b24ndCBoYXZlIGFjY2VzcyB0byBgbG9jYWxTdG9yYWdlYC5cbiAqIFNlZSBgb3B0cy5zZXNzaW9uU3RvcmFnZWAgZm9yIGV4YW1wbGVzLlxuKi9cblxuaW1wb3J0IHtcbiAgQklORElOR19QUkVGSVgsXG4gIENPTlNFQ1VUSVZFX1JFTE9BRFMsXG4gIERFRkFVTFRTLFxuICBGQUlMU0FGRV9KSVRURVIsXG4gIExPQURFUl9USU1FT1VULFxuICBNQVhfUkVMT0FEUyxcbiAgUEhYX0RFQk9VTkNFLFxuICBQSFhfRFJPUF9UQVJHRVQsXG4gIFBIWF9IQVNfRk9DVVNFRCxcbiAgUEhYX0tFWSxcbiAgUEhYX0xJTktfU1RBVEUsXG4gIFBIWF9MSVZFX0xJTkssXG4gIFBIWF9MVl9ERUJVRyxcbiAgUEhYX0xWX0xBVEVOQ1lfU0lNLFxuICBQSFhfTFZfUFJPRklMRSxcbiAgUEhYX0xWX0hJU1RPUllfUE9TSVRJT04sXG4gIFBIWF9NQUlOLFxuICBQSFhfUEFSRU5UX0lELFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX1JPT1RfSUQsXG4gIFBIWF9USFJPVFRMRSxcbiAgUEhYX1RSQUNLX1VQTE9BRFMsXG4gIFBIWF9TRVNTSU9OLFxuICBSRUxPQURfSklUVEVSX01JTixcbiAgUkVMT0FEX0pJVFRFUl9NQVgsXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfUkVMT0FEX1NUQVRVU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBjbG9uZSxcbiAgY2xvc2VzdFBoeEJpbmRpbmcsXG4gIGNsb3N1cmUsXG4gIGRlYnVnLFxuICBtYXliZVxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBCcm93c2VyIGZyb20gXCIuL2Jyb3dzZXJcIlxuaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuaW1wb3J0IEhvb2tzIGZyb20gXCIuL2hvb2tzXCJcbmltcG9ydCBMaXZlVXBsb2FkZXIgZnJvbSBcIi4vbGl2ZV91cGxvYWRlclwiXG5pbXBvcnQgVmlldyBmcm9tIFwiLi92aWV3XCJcbmltcG9ydCBKUyBmcm9tIFwiLi9qc1wiXG5cbmV4cG9ydCBsZXQgaXNVc2VkSW5wdXQgPSAoZWwpID0+IERPTS5pc1VzZWRJbnB1dChlbClcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGl2ZVNvY2tldCB7XG4gIGNvbnN0cnVjdG9yKHVybCwgcGh4U29ja2V0LCBvcHRzID0ge30pe1xuICAgIHRoaXMudW5sb2FkZWQgPSBmYWxzZVxuICAgIGlmKCFwaHhTb2NrZXQgfHwgcGh4U29ja2V0LmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiT2JqZWN0XCIpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcbiAgICAgIGEgcGhvZW5peCBTb2NrZXQgbXVzdCBiZSBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIHRoZSBMaXZlU29ja2V0IGNvbnN0cnVjdG9yLiBGb3IgZXhhbXBsZTpcblxuICAgICAgICAgIGltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXG4gICAgICAgICAgaW1wb3J0IHtMaXZlU29ja2V0fSBmcm9tIFwicGhvZW5peF9saXZlX3ZpZXdcIlxuICAgICAgICAgIGxldCBsaXZlU29ja2V0ID0gbmV3IExpdmVTb2NrZXQoXCIvbGl2ZVwiLCBTb2NrZXQsIHsuLi59KVxuICAgICAgYClcbiAgICB9XG4gICAgdGhpcy5zb2NrZXQgPSBuZXcgcGh4U29ja2V0KHVybCwgb3B0cylcbiAgICB0aGlzLmJpbmRpbmdQcmVmaXggPSBvcHRzLmJpbmRpbmdQcmVmaXggfHwgQklORElOR19QUkVGSVhcbiAgICB0aGlzLm9wdHMgPSBvcHRzXG4gICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKG9wdHMucGFyYW1zIHx8IHt9KVxuICAgIHRoaXMudmlld0xvZ2dlciA9IG9wdHMudmlld0xvZ2dlclxuICAgIHRoaXMubWV0YWRhdGFDYWxsYmFja3MgPSBvcHRzLm1ldGFkYXRhIHx8IHt9XG4gICAgdGhpcy5kZWZhdWx0cyA9IE9iamVjdC5hc3NpZ24oY2xvbmUoREVGQVVMVFMpLCBvcHRzLmRlZmF1bHRzIHx8IHt9KVxuICAgIHRoaXMuYWN0aXZlRWxlbWVudCA9IG51bGxcbiAgICB0aGlzLnByZXZBY3RpdmUgPSBudWxsXG4gICAgdGhpcy5zaWxlbmNlZCA9IGZhbHNlXG4gICAgdGhpcy5tYWluID0gbnVsbFxuICAgIHRoaXMub3V0Z29pbmdNYWluRWwgPSBudWxsXG4gICAgdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCA9IG51bGxcbiAgICB0aGlzLmxpbmtSZWYgPSAxXG4gICAgdGhpcy5yb290cyA9IHt9XG4gICAgdGhpcy5ocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWZcbiAgICB0aGlzLnBlbmRpbmdMaW5rID0gbnVsbFxuICAgIHRoaXMuY3VycmVudExvY2F0aW9uID0gY2xvbmUod2luZG93LmxvY2F0aW9uKVxuICAgIHRoaXMuaG9va3MgPSBvcHRzLmhvb2tzIHx8IHt9XG4gICAgdGhpcy51cGxvYWRlcnMgPSBvcHRzLnVwbG9hZGVycyB8fCB7fVxuICAgIHRoaXMubG9hZGVyVGltZW91dCA9IG9wdHMubG9hZGVyVGltZW91dCB8fCBMT0FERVJfVElNRU9VVFxuICAgIHRoaXMucmVsb2FkV2l0aEppdHRlclRpbWVyID0gbnVsbFxuICAgIHRoaXMubWF4UmVsb2FkcyA9IG9wdHMubWF4UmVsb2FkcyB8fCBNQVhfUkVMT0FEU1xuICAgIHRoaXMucmVsb2FkSml0dGVyTWluID0gb3B0cy5yZWxvYWRKaXR0ZXJNaW4gfHwgUkVMT0FEX0pJVFRFUl9NSU5cbiAgICB0aGlzLnJlbG9hZEppdHRlck1heCA9IG9wdHMucmVsb2FkSml0dGVyTWF4IHx8IFJFTE9BRF9KSVRURVJfTUFYXG4gICAgdGhpcy5mYWlsc2FmZUppdHRlciA9IG9wdHMuZmFpbHNhZmVKaXR0ZXIgfHwgRkFJTFNBRkVfSklUVEVSXG4gICAgdGhpcy5sb2NhbFN0b3JhZ2UgPSBvcHRzLmxvY2FsU3RvcmFnZSB8fCB3aW5kb3cubG9jYWxTdG9yYWdlXG4gICAgdGhpcy5zZXNzaW9uU3RvcmFnZSA9IG9wdHMuc2Vzc2lvblN0b3JhZ2UgfHwgd2luZG93LnNlc3Npb25TdG9yYWdlXG4gICAgdGhpcy5ib3VuZFRvcExldmVsRXZlbnRzID0gZmFsc2VcbiAgICB0aGlzLmJvdW5kRXZlbnROYW1lcyA9IG5ldyBTZXQoKVxuICAgIHRoaXMuc2VydmVyQ2xvc2VSZWYgPSBudWxsXG4gICAgdGhpcy5kb21DYWxsYmFja3MgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGpzUXVlcnlTZWxlY3RvckFsbDogbnVsbCxcbiAgICAgIG9uUGF0Y2hTdGFydDogY2xvc3VyZSgpLFxuICAgICAgb25QYXRjaEVuZDogY2xvc3VyZSgpLFxuICAgICAgb25Ob2RlQWRkZWQ6IGNsb3N1cmUoKSxcbiAgICAgIG9uQmVmb3JlRWxVcGRhdGVkOiBjbG9zdXJlKCl9LFxuICAgIG9wdHMuZG9tIHx8IHt9KVxuICAgIHRoaXMudHJhbnNpdGlvbnMgPSBuZXcgVHJhbnNpdGlvblNldCgpXG4gICAgdGhpcy5jdXJyZW50SGlzdG9yeVBvc2l0aW9uID0gcGFyc2VJbnQodGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9ISVNUT1JZX1BPU0lUSU9OKSkgfHwgMFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgX2UgPT4ge1xuICAgICAgdGhpcy51bmxvYWRlZCA9IHRydWVcbiAgICB9KVxuICAgIHRoaXMuc29ja2V0Lm9uT3BlbigoKSA9PiB7XG4gICAgICBpZih0aGlzLmlzVW5sb2FkZWQoKSl7XG4gICAgICAgIC8vIHJlbG9hZCBwYWdlIGlmIGJlaW5nIHJlc3RvcmVkIGZyb20gYmFjay9mb3J3YXJkIGNhY2hlIGFuZCBicm93c2VyIGRvZXMgbm90IGVtaXQgXCJwYWdlc2hvd1wiXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBwdWJsaWNcblxuICB2ZXJzaW9uKCl7IHJldHVybiBMVl9WU04gfVxuXG4gIGlzUHJvZmlsZUVuYWJsZWQoKXsgcmV0dXJuIHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfUFJPRklMRSkgPT09IFwidHJ1ZVwiIH1cblxuICBpc0RlYnVnRW5hYmxlZCgpeyByZXR1cm4gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9ERUJVRykgPT09IFwidHJ1ZVwiIH1cblxuICBpc0RlYnVnRGlzYWJsZWQoKXsgcmV0dXJuIHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfREVCVUcpID09PSBcImZhbHNlXCIgfVxuXG4gIGVuYWJsZURlYnVnKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfREVCVUcsIFwidHJ1ZVwiKSB9XG5cbiAgZW5hYmxlUHJvZmlsaW5nKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfUFJPRklMRSwgXCJ0cnVlXCIpIH1cblxuICBkaXNhYmxlRGVidWcoKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9ERUJVRywgXCJmYWxzZVwiKSB9XG5cbiAgZGlzYWJsZVByb2ZpbGluZygpeyB0aGlzLnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oUEhYX0xWX1BST0ZJTEUpIH1cblxuICBlbmFibGVMYXRlbmN5U2ltKHVwcGVyQm91bmRNcyl7XG4gICAgdGhpcy5lbmFibGVEZWJ1ZygpXG4gICAgY29uc29sZS5sb2coXCJsYXRlbmN5IHNpbXVsYXRvciBlbmFibGVkIGZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyBicm93c2VyIHNlc3Npb24uIENhbGwgZGlzYWJsZUxhdGVuY3lTaW0oKSB0byBkaXNhYmxlXCIpXG4gICAgdGhpcy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSwgdXBwZXJCb3VuZE1zKVxuICB9XG5cbiAgZGlzYWJsZUxhdGVuY3lTaW0oKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSkgfVxuXG4gIGdldExhdGVuY3lTaW0oKXtcbiAgICBsZXQgc3RyID0gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSlcbiAgICByZXR1cm4gc3RyID8gcGFyc2VJbnQoc3RyKSA6IG51bGxcbiAgfVxuXG4gIGdldFNvY2tldCgpeyByZXR1cm4gdGhpcy5zb2NrZXQgfVxuXG4gIGNvbm5lY3QoKXtcbiAgICAvLyBlbmFibGUgZGVidWcgYnkgZGVmYXVsdCBpZiBvbiBsb2NhbGhvc3QgYW5kIG5vdCBleHBsaWNpdGx5IGRpc2FibGVkXG4gICAgaWYod2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSBcImxvY2FsaG9zdFwiICYmICF0aGlzLmlzRGVidWdEaXNhYmxlZCgpKXsgdGhpcy5lbmFibGVEZWJ1ZygpIH1cbiAgICBsZXQgZG9Db25uZWN0ID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZXNldFJlbG9hZFN0YXR1cygpXG4gICAgICBpZih0aGlzLmpvaW5Sb290Vmlld3MoKSl7XG4gICAgICAgIHRoaXMuYmluZFRvcExldmVsRXZlbnRzKClcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCgpXG4gICAgICB9IGVsc2UgaWYodGhpcy5tYWluKXtcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJpbmRUb3BMZXZlbEV2ZW50cyh7ZGVhZDogdHJ1ZX0pXG4gICAgICB9XG4gICAgICB0aGlzLmpvaW5EZWFkVmlldygpXG4gICAgfVxuICAgIGlmKFtcImNvbXBsZXRlXCIsIFwibG9hZGVkXCIsIFwiaW50ZXJhY3RpdmVcIl0uaW5kZXhPZihkb2N1bWVudC5yZWFkeVN0YXRlKSA+PSAwKXtcbiAgICAgIGRvQ29ubmVjdCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IGRvQ29ubmVjdCgpKVxuICAgIH1cbiAgfVxuXG4gIGRpc2Nvbm5lY3QoY2FsbGJhY2spe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICAvLyByZW1vdmUgdGhlIHNvY2tldCBjbG9zZSBsaXN0ZW5lciB0byBhdm9pZCB0cnlpbmcgdG8gaGFuZGxlXG4gICAgLy8gYSBzZXJ2ZXIgY2xvc2UgZXZlbnQgd2hlbiBpdCBpcyBhY3R1YWxseSBjYXVzZWQgYnkgdXMgZGlzY29ubmVjdGluZ1xuICAgIGlmKHRoaXMuc2VydmVyQ2xvc2VSZWYpe1xuICAgICAgdGhpcy5zb2NrZXQub2ZmKHRoaXMuc2VydmVyQ2xvc2VSZWYpXG4gICAgICB0aGlzLnNlcnZlckNsb3NlUmVmID0gbnVsbFxuICAgIH1cbiAgICB0aGlzLnNvY2tldC5kaXNjb25uZWN0KGNhbGxiYWNrKVxuICB9XG5cbiAgcmVwbGFjZVRyYW5zcG9ydCh0cmFuc3BvcnQpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICB0aGlzLnNvY2tldC5yZXBsYWNlVHJhbnNwb3J0KHRyYW5zcG9ydClcbiAgICB0aGlzLmNvbm5lY3QoKVxuICB9XG5cbiAgZXhlY0pTKGVsLCBlbmNvZGVkSlMsIGV2ZW50VHlwZSA9IG51bGwpe1xuICAgIGxldCBlID0gbmV3IEN1c3RvbUV2ZW50KFwicGh4OmV4ZWNcIiwge2RldGFpbDoge3NvdXJjZUVsZW1lbnQ6IGVsfX0pXG4gICAgdGhpcy5vd25lcihlbCwgdmlldyA9PiBKUy5leGVjKGUsIGV2ZW50VHlwZSwgZW5jb2RlZEpTLCB2aWV3LCBlbCkpXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgZXhlY0pTSG9va1B1c2goZWwsIHBoeEV2ZW50LCBkYXRhLCBjYWxsYmFjayl7XG4gICAgdGhpcy53aXRoaW5Pd25lcnMoZWwsIHZpZXcgPT4ge1xuICAgICAgbGV0IGUgPSBuZXcgQ3VzdG9tRXZlbnQoXCJwaHg6ZXhlY1wiLCB7ZGV0YWlsOiB7c291cmNlRWxlbWVudDogZWx9fSlcbiAgICAgIEpTLmV4ZWMoZSwgXCJob29rXCIsIHBoeEV2ZW50LCB2aWV3LCBlbCwgW1wicHVzaFwiLCB7ZGF0YSwgY2FsbGJhY2t9XSlcbiAgICB9KVxuICB9XG5cbiAgdW5sb2FkKCl7XG4gICAgaWYodGhpcy51bmxvYWRlZCl7IHJldHVybiB9XG4gICAgaWYodGhpcy5tYWluICYmIHRoaXMuaXNDb25uZWN0ZWQoKSl7IHRoaXMubG9nKHRoaXMubWFpbiwgXCJzb2NrZXRcIiwgKCkgPT4gW1wiZGlzY29ubmVjdCBmb3IgcGFnZSBuYXZcIl0pIH1cbiAgICB0aGlzLnVubG9hZGVkID0gdHJ1ZVxuICAgIHRoaXMuZGVzdHJveUFsbFZpZXdzKClcbiAgICB0aGlzLmRpc2Nvbm5lY3QoKVxuICB9XG5cbiAgdHJpZ2dlckRPTShraW5kLCBhcmdzKXsgdGhpcy5kb21DYWxsYmFja3Nba2luZF0oLi4uYXJncykgfVxuXG4gIHRpbWUobmFtZSwgZnVuYyl7XG4gICAgaWYoIXRoaXMuaXNQcm9maWxlRW5hYmxlZCgpIHx8ICFjb25zb2xlLnRpbWUpeyByZXR1cm4gZnVuYygpIH1cbiAgICBjb25zb2xlLnRpbWUobmFtZSlcbiAgICBsZXQgcmVzdWx0ID0gZnVuYygpXG4gICAgY29uc29sZS50aW1lRW5kKG5hbWUpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgbG9nKHZpZXcsIGtpbmQsIG1zZ0NhbGxiYWNrKXtcbiAgICBpZih0aGlzLnZpZXdMb2dnZXIpe1xuICAgICAgbGV0IFttc2csIG9ial0gPSBtc2dDYWxsYmFjaygpXG4gICAgICB0aGlzLnZpZXdMb2dnZXIodmlldywga2luZCwgbXNnLCBvYmopXG4gICAgfSBlbHNlIGlmKHRoaXMuaXNEZWJ1Z0VuYWJsZWQoKSl7XG4gICAgICBsZXQgW21zZywgb2JqXSA9IG1zZ0NhbGxiYWNrKClcbiAgICAgIGRlYnVnKHZpZXcsIGtpbmQsIG1zZywgb2JqKVxuICAgIH1cbiAgfVxuXG4gIHJlcXVlc3RET01VcGRhdGUoY2FsbGJhY2spe1xuICAgIHRoaXMudHJhbnNpdGlvbnMuYWZ0ZXIoY2FsbGJhY2spXG4gIH1cblxuICB0cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSA9IGZ1bmN0aW9uKCl7fSl7XG4gICAgdGhpcy50cmFuc2l0aW9ucy5hZGRUcmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSlcbiAgfVxuXG4gIG9uQ2hhbm5lbChjaGFubmVsLCBldmVudCwgY2Ipe1xuICAgIGNoYW5uZWwub24oZXZlbnQsIGRhdGEgPT4ge1xuICAgICAgbGV0IGxhdGVuY3kgPSB0aGlzLmdldExhdGVuY3lTaW0oKVxuICAgICAgaWYoIWxhdGVuY3kpe1xuICAgICAgICBjYihkYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBjYihkYXRhKSwgbGF0ZW5jeSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmVsb2FkV2l0aEppdHRlcih2aWV3LCBsb2cpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICB0aGlzLmRpc2Nvbm5lY3QoKVxuICAgIGxldCBtaW5NcyA9IHRoaXMucmVsb2FkSml0dGVyTWluXG4gICAgbGV0IG1heE1zID0gdGhpcy5yZWxvYWRKaXR0ZXJNYXhcbiAgICBsZXQgYWZ0ZXJNcyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXhNcyAtIG1pbk1zICsgMSkpICsgbWluTXNcbiAgICBsZXQgdHJpZXMgPSBCcm93c2VyLnVwZGF0ZUxvY2FsKHRoaXMubG9jYWxTdG9yYWdlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIENPTlNFQ1VUSVZFX1JFTE9BRFMsIDAsIGNvdW50ID0+IGNvdW50ICsgMSlcbiAgICBpZih0cmllcyA+PSB0aGlzLm1heFJlbG9hZHMpe1xuICAgICAgYWZ0ZXJNcyA9IHRoaXMuZmFpbHNhZmVKaXR0ZXJcbiAgICB9XG4gICAgdGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIGlmIHZpZXcgaGFzIHJlY292ZXJlZCwgc3VjaCBhcyB0cmFuc3BvcnQgcmVwbGFjZWQsIHRoZW4gY2FuY2VsXG4gICAgICBpZih2aWV3LmlzRGVzdHJveWVkKCkgfHwgdmlldy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cbiAgICAgIHZpZXcuZGVzdHJveSgpXG4gICAgICBsb2cgPyBsb2coKSA6IHRoaXMubG9nKHZpZXcsIFwiam9pblwiLCAoKSA9PiBbYGVuY291bnRlcmVkICR7dHJpZXN9IGNvbnNlY3V0aXZlIHJlbG9hZHNgXSlcbiAgICAgIGlmKHRyaWVzID49IHRoaXMubWF4UmVsb2Fkcyl7XG4gICAgICAgIHRoaXMubG9nKHZpZXcsIFwiam9pblwiLCAoKSA9PiBbYGV4Y2VlZGVkICR7dGhpcy5tYXhSZWxvYWRzfSBjb25zZWN1dGl2ZSByZWxvYWRzLiBFbnRlcmluZyBmYWlsc2FmZSBtb2RlYF0pXG4gICAgICB9XG4gICAgICBpZih0aGlzLmhhc1BlbmRpbmdMaW5rKCkpe1xuICAgICAgICB3aW5kb3cubG9jYXRpb24gPSB0aGlzLnBlbmRpbmdMaW5rXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgIH1cbiAgICB9LCBhZnRlck1zKVxuICB9XG5cbiAgZ2V0SG9va0NhbGxiYWNrcyhuYW1lKXtcbiAgICByZXR1cm4gbmFtZSAmJiBuYW1lLnN0YXJ0c1dpdGgoXCJQaG9lbml4LlwiKSA/IEhvb2tzW25hbWUuc3BsaXQoXCIuXCIpWzFdXSA6IHRoaXMuaG9va3NbbmFtZV1cbiAgfVxuXG4gIGlzVW5sb2FkZWQoKXsgcmV0dXJuIHRoaXMudW5sb2FkZWQgfVxuXG4gIGlzQ29ubmVjdGVkKCl7IHJldHVybiB0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpIH1cblxuICBnZXRCaW5kaW5nUHJlZml4KCl7IHJldHVybiB0aGlzLmJpbmRpbmdQcmVmaXggfVxuXG4gIGJpbmRpbmcoa2luZCl7IHJldHVybiBgJHt0aGlzLmdldEJpbmRpbmdQcmVmaXgoKX0ke2tpbmR9YCB9XG5cbiAgY2hhbm5lbCh0b3BpYywgcGFyYW1zKXsgcmV0dXJuIHRoaXMuc29ja2V0LmNoYW5uZWwodG9waWMsIHBhcmFtcykgfVxuXG4gIGpvaW5EZWFkVmlldygpe1xuICAgIGxldCBib2R5ID0gZG9jdW1lbnQuYm9keVxuICAgIGlmKGJvZHkgJiYgIXRoaXMuaXNQaHhWaWV3KGJvZHkpICYmICF0aGlzLmlzUGh4Vmlldyhkb2N1bWVudC5maXJzdEVsZW1lbnRDaGlsZCkpe1xuICAgICAgbGV0IHZpZXcgPSB0aGlzLm5ld1Jvb3RWaWV3KGJvZHkpXG4gICAgICB2aWV3LnNldEhyZWYodGhpcy5nZXRIcmVmKCkpXG4gICAgICB2aWV3LmpvaW5EZWFkKClcbiAgICAgIGlmKCF0aGlzLm1haW4peyB0aGlzLm1haW4gPSB2aWV3IH1cbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB2aWV3LmV4ZWNOZXdNb3VudGVkKClcbiAgICAgICAgLy8gcmVzdG9yZSBzY3JvbGwgcG9zaXRpb24gd2hlbiBuYXZpZ2F0aW5nIGZyb20gYW4gZXh0ZXJuYWwgLyBub24tbGl2ZSBwYWdlXG4gICAgICAgIHRoaXMubWF5YmVTY3JvbGwoaGlzdG9yeS5zdGF0ZT8uc2Nyb2xsKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBqb2luUm9vdFZpZXdzKCl7XG4gICAgbGV0IHJvb3RzRm91bmQgPSBmYWxzZVxuICAgIERPTS5hbGwoZG9jdW1lbnQsIGAke1BIWF9WSUVXX1NFTEVDVE9SfTpub3QoWyR7UEhYX1BBUkVOVF9JRH1dKWAsIHJvb3RFbCA9PiB7XG4gICAgICBpZighdGhpcy5nZXRSb290QnlJZChyb290RWwuaWQpKXtcbiAgICAgICAgbGV0IHZpZXcgPSB0aGlzLm5ld1Jvb3RWaWV3KHJvb3RFbClcbiAgICAgICAgLy8gc3RpY2tpZXMgY2Fubm90IGJlIG1vdW50ZWQgYXQgdGhlIHJvdXRlciBhbmQgdGhlcmVmb3JlIHNob3VsZCBub3RcbiAgICAgICAgLy8gZ2V0IGEgaHJlZiBzZXQgb24gdGhlbVxuICAgICAgICBpZighRE9NLmlzUGh4U3RpY2t5KHJvb3RFbCkpeyB2aWV3LnNldEhyZWYodGhpcy5nZXRIcmVmKCkpIH1cbiAgICAgICAgdmlldy5qb2luKClcbiAgICAgICAgaWYocm9vdEVsLmhhc0F0dHJpYnV0ZShQSFhfTUFJTikpeyB0aGlzLm1haW4gPSB2aWV3IH1cbiAgICAgIH1cbiAgICAgIHJvb3RzRm91bmQgPSB0cnVlXG4gICAgfSlcbiAgICByZXR1cm4gcm9vdHNGb3VuZFxuICB9XG5cbiAgcmVkaXJlY3QodG8sIGZsYXNoLCByZWxvYWRUb2tlbil7XG4gICAgaWYocmVsb2FkVG9rZW4peyBCcm93c2VyLnNldENvb2tpZShQSFhfUkVMT0FEX1NUQVRVUywgcmVsb2FkVG9rZW4sIDYwKSB9XG4gICAgdGhpcy51bmxvYWQoKVxuICAgIEJyb3dzZXIucmVkaXJlY3QodG8sIGZsYXNoKVxuICB9XG5cbiAgcmVwbGFjZU1haW4oaHJlZiwgZmxhc2gsIGNhbGxiYWNrID0gbnVsbCwgbGlua1JlZiA9IHRoaXMuc2V0UGVuZGluZ0xpbmsoaHJlZikpe1xuICAgIGxldCBsaXZlUmVmZXJlciA9IHRoaXMuY3VycmVudExvY2F0aW9uLmhyZWZcbiAgICB0aGlzLm91dGdvaW5nTWFpbkVsID0gdGhpcy5vdXRnb2luZ01haW5FbCB8fCB0aGlzLm1haW4uZWxcbiAgICBsZXQgcmVtb3ZlRWxzID0gRE9NLmFsbCh0aGlzLm91dGdvaW5nTWFpbkVsLCBgWyR7dGhpcy5iaW5kaW5nKFwicmVtb3ZlXCIpfV1gKVxuICAgIGxldCBuZXdNYWluRWwgPSBET00uY2xvbmVOb2RlKHRoaXMub3V0Z29pbmdNYWluRWwsIFwiXCIpXG4gICAgdGhpcy5tYWluLnNob3dMb2FkZXIodGhpcy5sb2FkZXJUaW1lb3V0KVxuICAgIHRoaXMubWFpbi5kZXN0cm95KClcblxuICAgIHRoaXMubWFpbiA9IHRoaXMubmV3Um9vdFZpZXcobmV3TWFpbkVsLCBmbGFzaCwgbGl2ZVJlZmVyZXIpXG4gICAgdGhpcy5tYWluLnNldFJlZGlyZWN0KGhyZWYpXG4gICAgdGhpcy50cmFuc2l0aW9uUmVtb3ZlcyhyZW1vdmVFbHMsIHRydWUpXG4gICAgdGhpcy5tYWluLmpvaW4oKGpvaW5Db3VudCwgb25Eb25lKSA9PiB7XG4gICAgICBpZihqb2luQ291bnQgPT09IDEgJiYgdGhpcy5jb21taXRQZW5kaW5nTGluayhsaW5rUmVmKSl7XG4gICAgICAgIHRoaXMucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgLy8gcmVtb3ZlIHBoeC1yZW1vdmUgZWxzIHJpZ2h0IGJlZm9yZSB3ZSByZXBsYWNlIHRoZSBtYWluIGVsZW1lbnRcbiAgICAgICAgICByZW1vdmVFbHMuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmUoKSlcbiAgICAgICAgICBET00uZmluZFBoeFN0aWNreShkb2N1bWVudCkuZm9yRWFjaChlbCA9PiBuZXdNYWluRWwuYXBwZW5kQ2hpbGQoZWwpKVxuICAgICAgICAgIHRoaXMub3V0Z29pbmdNYWluRWwucmVwbGFjZVdpdGgobmV3TWFpbkVsKVxuICAgICAgICAgIHRoaXMub3V0Z29pbmdNYWluRWwgPSBudWxsXG4gICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobGlua1JlZilcbiAgICAgICAgICBvbkRvbmUoKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB0cmFuc2l0aW9uUmVtb3ZlcyhlbGVtZW50cywgc2tpcFN0aWNreSwgY2FsbGJhY2spe1xuICAgIGxldCByZW1vdmVBdHRyID0gdGhpcy5iaW5kaW5nKFwicmVtb3ZlXCIpXG4gICAgaWYoc2tpcFN0aWNreSl7XG4gICAgICBjb25zdCBzdGlja2llcyA9IERPTS5maW5kUGh4U3RpY2t5KGRvY3VtZW50KSB8fCBbXVxuICAgICAgZWxlbWVudHMgPSBlbGVtZW50cy5maWx0ZXIoZWwgPT4gIURPTS5pc0NoaWxkT2ZBbnkoZWwsIHN0aWNraWVzKSlcbiAgICB9XG4gICAgbGV0IHNpbGVuY2VFdmVudHMgPSAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG4gICAgfVxuICAgIGVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgLy8gcHJldmVudCBhbGwgbGlzdGVuZXJzIHdlIGNhcmUgYWJvdXQgZnJvbSBidWJibGluZyB0byB3aW5kb3dcbiAgICAgIC8vIHNpbmNlIHdlIGFyZSByZW1vdmluZyB0aGUgZWxlbWVudFxuICAgICAgZm9yKGxldCBldmVudCBvZiB0aGlzLmJvdW5kRXZlbnROYW1lcyl7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHNpbGVuY2VFdmVudHMsIHRydWUpXG4gICAgICB9XG4gICAgICB0aGlzLmV4ZWNKUyhlbCwgZWwuZ2V0QXR0cmlidXRlKHJlbW92ZUF0dHIpLCBcInJlbW92ZVwiKVxuICAgIH0pXG4gICAgLy8gcmVtb3ZlIHRoZSBzaWxlbmNlZCBsaXN0ZW5lcnMgd2hlbiB0cmFuc2l0aW9ucyBhcmUgZG9uZSBpbmNhc2UgdGhlIGVsZW1lbnQgaXMgcmUtdXNlZFxuICAgIC8vIGFuZCBjYWxsIGNhbGxlcidzIGNhbGxiYWNrIGFzIHNvb24gYXMgd2UgYXJlIGRvbmUgd2l0aCB0cmFuc2l0aW9uc1xuICAgIHRoaXMucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICBlbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgZm9yKGxldCBldmVudCBvZiB0aGlzLmJvdW5kRXZlbnROYW1lcyl7XG4gICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgc2lsZW5jZUV2ZW50cywgdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9KVxuICB9XG5cbiAgaXNQaHhWaWV3KGVsKXsgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04pICE9PSBudWxsIH1cblxuICBuZXdSb290VmlldyhlbCwgZmxhc2gsIGxpdmVSZWZlcmVyKXtcbiAgICBsZXQgdmlldyA9IG5ldyBWaWV3KGVsLCB0aGlzLCBudWxsLCBmbGFzaCwgbGl2ZVJlZmVyZXIpXG4gICAgdGhpcy5yb290c1t2aWV3LmlkXSA9IHZpZXdcbiAgICByZXR1cm4gdmlld1xuICB9XG5cbiAgb3duZXIoY2hpbGRFbCwgY2FsbGJhY2spe1xuICAgIGxldCB2aWV3ID0gbWF5YmUoY2hpbGRFbC5jbG9zZXN0KFBIWF9WSUVXX1NFTEVDVE9SKSwgZWwgPT4gdGhpcy5nZXRWaWV3QnlFbChlbCkpIHx8IHRoaXMubWFpblxuICAgIHJldHVybiB2aWV3ICYmIGNhbGxiYWNrID8gY2FsbGJhY2sodmlldykgOiB2aWV3XG4gIH1cblxuICB3aXRoaW5Pd25lcnMoY2hpbGRFbCwgY2FsbGJhY2spe1xuICAgIHRoaXMub3duZXIoY2hpbGRFbCwgdmlldyA9PiBjYWxsYmFjayh2aWV3LCBjaGlsZEVsKSlcbiAgfVxuXG4gIGdldFZpZXdCeUVsKGVsKXtcbiAgICBsZXQgcm9vdElkID0gZWwuZ2V0QXR0cmlidXRlKFBIWF9ST09UX0lEKVxuICAgIHJldHVybiBtYXliZSh0aGlzLmdldFJvb3RCeUlkKHJvb3RJZCksIHJvb3QgPT4gcm9vdC5nZXREZXNjZW5kZW50QnlFbChlbCkpXG4gIH1cblxuICBnZXRSb290QnlJZChpZCl7IHJldHVybiB0aGlzLnJvb3RzW2lkXSB9XG5cbiAgZGVzdHJveUFsbFZpZXdzKCl7XG4gICAgZm9yKGxldCBpZCBpbiB0aGlzLnJvb3RzKXtcbiAgICAgIHRoaXMucm9vdHNbaWRdLmRlc3Ryb3koKVxuICAgICAgZGVsZXRlIHRoaXMucm9vdHNbaWRdXG4gICAgfVxuICAgIHRoaXMubWFpbiA9IG51bGxcbiAgfVxuXG4gIGRlc3Ryb3lWaWV3QnlFbChlbCl7XG4gICAgbGV0IHJvb3QgPSB0aGlzLmdldFJvb3RCeUlkKGVsLmdldEF0dHJpYnV0ZShQSFhfUk9PVF9JRCkpXG4gICAgaWYocm9vdCAmJiByb290LmlkID09PSBlbC5pZCl7XG4gICAgICByb290LmRlc3Ryb3koKVxuICAgICAgZGVsZXRlIHRoaXMucm9vdHNbcm9vdC5pZF1cbiAgICB9IGVsc2UgaWYocm9vdCl7XG4gICAgICByb290LmRlc3Ryb3lEZXNjZW5kZW50KGVsLmlkKVxuICAgIH1cbiAgfVxuXG4gIGdldEFjdGl2ZUVsZW1lbnQoKXtcbiAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICB9XG5cbiAgZHJvcEFjdGl2ZUVsZW1lbnQodmlldyl7XG4gICAgaWYodGhpcy5wcmV2QWN0aXZlICYmIHZpZXcub3duc0VsZW1lbnQodGhpcy5wcmV2QWN0aXZlKSl7XG4gICAgICB0aGlzLnByZXZBY3RpdmUgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgcmVzdG9yZVByZXZpb3VzbHlBY3RpdmVGb2N1cygpe1xuICAgIGlmKHRoaXMucHJldkFjdGl2ZSAmJiB0aGlzLnByZXZBY3RpdmUgIT09IGRvY3VtZW50LmJvZHkpe1xuICAgICAgdGhpcy5wcmV2QWN0aXZlLmZvY3VzKClcbiAgICB9XG4gIH1cblxuICBibHVyQWN0aXZlRWxlbWVudCgpe1xuICAgIHRoaXMucHJldkFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlRWxlbWVudCgpXG4gICAgaWYodGhpcy5wcmV2QWN0aXZlICE9PSBkb2N1bWVudC5ib2R5KXsgdGhpcy5wcmV2QWN0aXZlLmJsdXIoKSB9XG4gIH1cblxuICBiaW5kVG9wTGV2ZWxFdmVudHMoe2RlYWR9ID0ge30pe1xuICAgIGlmKHRoaXMuYm91bmRUb3BMZXZlbEV2ZW50cyl7IHJldHVybiB9XG5cbiAgICB0aGlzLmJvdW5kVG9wTGV2ZWxFdmVudHMgPSB0cnVlXG4gICAgLy8gZW50ZXIgZmFpbHNhZmUgcmVsb2FkIGlmIHNlcnZlciBoYXMgZ29uZSBhd2F5IGludGVudGlvbmFsbHksIHN1Y2ggYXMgXCJkaXNjb25uZWN0XCIgYnJvYWRjYXN0XG4gICAgdGhpcy5zZXJ2ZXJDbG9zZVJlZiA9IHRoaXMuc29ja2V0Lm9uQ2xvc2UoZXZlbnQgPT4ge1xuICAgICAgLy8gZmFpbHNhZmUgcmVsb2FkIGlmIG5vcm1hbCBjbG9zdXJlIGFuZCB3ZSBzdGlsbCBoYXZlIGEgbWFpbiBMVlxuICAgICAgaWYoZXZlbnQgJiYgZXZlbnQuY29kZSA9PT0gMTAwMCAmJiB0aGlzLm1haW4peyByZXR1cm4gdGhpcy5yZWxvYWRXaXRoSml0dGVyKHRoaXMubWFpbikgfVxuICAgIH0pXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCl7IH0pIC8vIGVuc3VyZSBhbGwgY2xpY2sgZXZlbnRzIGJ1YmJsZSBmb3IgbW9iaWxlIFNhZmFyaVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZXNob3dcIiwgZSA9PiB7XG4gICAgICBpZihlLnBlcnNpc3RlZCl7IC8vIHJlbG9hZCBwYWdlIGlmIGJlaW5nIHJlc3RvcmVkIGZyb20gYmFjay9mb3J3YXJkIGNhY2hlXG4gICAgICAgIHRoaXMuZ2V0U29ja2V0KCkuZGlzY29ubmVjdCgpXG4gICAgICAgIHRoaXMud2l0aFBhZ2VMb2FkaW5nKHt0bzogd2luZG93LmxvY2F0aW9uLmhyZWYsIGtpbmQ6IFwicmVkaXJlY3RcIn0pXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgfVxuICAgIH0sIHRydWUpXG4gICAgaWYoIWRlYWQpeyB0aGlzLmJpbmROYXYoKSB9XG4gICAgdGhpcy5iaW5kQ2xpY2tzKClcbiAgICBpZighZGVhZCl7IHRoaXMuYmluZEZvcm1zKCkgfVxuICAgIHRoaXMuYmluZCh7a2V5dXA6IFwia2V5dXBcIiwga2V5ZG93bjogXCJrZXlkb3duXCJ9LCAoZSwgdHlwZSwgdmlldywgdGFyZ2V0RWwsIHBoeEV2ZW50LCBfcGh4VGFyZ2V0KSA9PiB7XG4gICAgICBsZXQgbWF0Y2hLZXkgPSB0YXJnZXRFbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9LRVkpKVxuICAgICAgbGV0IHByZXNzZWRLZXkgPSBlLmtleSAmJiBlLmtleS50b0xvd2VyQ2FzZSgpIC8vIGNocm9tZSBjbGlja2VkIGF1dG9jb21wbGV0ZXMgc2VuZCBhIGtleWRvd24gd2l0aG91dCBrZXlcbiAgICAgIGlmKG1hdGNoS2V5ICYmIG1hdGNoS2V5LnRvTG93ZXJDYXNlKCkgIT09IHByZXNzZWRLZXkpeyByZXR1cm4gfVxuXG4gICAgICBsZXQgZGF0YSA9IHtrZXk6IGUua2V5LCAuLi50aGlzLmV2ZW50TWV0YSh0eXBlLCBlLCB0YXJnZXRFbCl9XG4gICAgICBKUy5leGVjKGUsIHR5cGUsIHBoeEV2ZW50LCB2aWV3LCB0YXJnZXRFbCwgW1wicHVzaFwiLCB7ZGF0YX1dKVxuICAgIH0pXG4gICAgdGhpcy5iaW5kKHtibHVyOiBcImZvY3Vzb3V0XCIsIGZvY3VzOiBcImZvY3VzaW5cIn0sIChlLCB0eXBlLCB2aWV3LCB0YXJnZXRFbCwgcGh4RXZlbnQsIHBoeFRhcmdldCkgPT4ge1xuICAgICAgaWYoIXBoeFRhcmdldCl7XG4gICAgICAgIGxldCBkYXRhID0ge2tleTogZS5rZXksIC4uLnRoaXMuZXZlbnRNZXRhKHR5cGUsIGUsIHRhcmdldEVsKX1cbiAgICAgICAgSlMuZXhlYyhlLCB0eXBlLCBwaHhFdmVudCwgdmlldywgdGFyZ2V0RWwsIFtcInB1c2hcIiwge2RhdGF9XSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMuYmluZCh7Ymx1cjogXCJibHVyXCIsIGZvY3VzOiBcImZvY3VzXCJ9LCAoZSwgdHlwZSwgdmlldywgdGFyZ2V0RWwsIHBoeEV2ZW50LCBwaHhUYXJnZXQpID0+IHtcbiAgICAgIC8vIGJsdXIgYW5kIGZvY3VzIGFyZSB0cmlnZ2VyZWQgb24gZG9jdW1lbnQgYW5kIHdpbmRvdy4gRGlzY2FyZCBvbmUgdG8gYXZvaWQgZHVwc1xuICAgICAgaWYocGh4VGFyZ2V0ID09PSBcIndpbmRvd1wiKXtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmV2ZW50TWV0YSh0eXBlLCBlLCB0YXJnZXRFbClcbiAgICAgICAgSlMuZXhlYyhlLCB0eXBlLCBwaHhFdmVudCwgdmlldywgdGFyZ2V0RWwsIFtcInB1c2hcIiwge2RhdGF9XSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMub24oXCJkcmFnb3ZlclwiLCBlID0+IGUucHJldmVudERlZmF1bHQoKSlcbiAgICB0aGlzLm9uKFwiZHJvcFwiLCBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgbGV0IGRyb3BUYXJnZXRJZCA9IG1heWJlKGNsb3Nlc3RQaHhCaW5kaW5nKGUudGFyZ2V0LCB0aGlzLmJpbmRpbmcoUEhYX0RST1BfVEFSR0VUKSksIHRydWVUYXJnZXQgPT4ge1xuICAgICAgICByZXR1cm4gdHJ1ZVRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9EUk9QX1RBUkdFVCkpXG4gICAgICB9KVxuICAgICAgbGV0IGRyb3BUYXJnZXQgPSBkcm9wVGFyZ2V0SWQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZHJvcFRhcmdldElkKVxuICAgICAgbGV0IGZpbGVzID0gQXJyYXkuZnJvbShlLmRhdGFUcmFuc2Zlci5maWxlcyB8fCBbXSlcbiAgICAgIGlmKCFkcm9wVGFyZ2V0IHx8IGRyb3BUYXJnZXQuZGlzYWJsZWQgfHwgZmlsZXMubGVuZ3RoID09PSAwIHx8ICEoZHJvcFRhcmdldC5maWxlcyBpbnN0YW5jZW9mIEZpbGVMaXN0KSl7IHJldHVybiB9XG5cbiAgICAgIExpdmVVcGxvYWRlci50cmFja0ZpbGVzKGRyb3BUYXJnZXQsIGZpbGVzLCBlLmRhdGFUcmFuc2ZlcilcbiAgICAgIGRyb3BUYXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7YnViYmxlczogdHJ1ZX0pKVxuICAgIH0pXG4gICAgdGhpcy5vbihQSFhfVFJBQ0tfVVBMT0FEUywgZSA9PiB7XG4gICAgICBsZXQgdXBsb2FkVGFyZ2V0ID0gZS50YXJnZXRcbiAgICAgIGlmKCFET00uaXNVcGxvYWRJbnB1dCh1cGxvYWRUYXJnZXQpKXsgcmV0dXJuIH1cbiAgICAgIGxldCBmaWxlcyA9IEFycmF5LmZyb20oZS5kZXRhaWwuZmlsZXMgfHwgW10pLmZpbHRlcihmID0+IGYgaW5zdGFuY2VvZiBGaWxlIHx8IGYgaW5zdGFuY2VvZiBCbG9iKVxuICAgICAgTGl2ZVVwbG9hZGVyLnRyYWNrRmlsZXModXBsb2FkVGFyZ2V0LCBmaWxlcylcbiAgICAgIHVwbG9hZFRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIsIHtidWJibGVzOiB0cnVlfSkpXG4gICAgfSlcbiAgfVxuXG4gIGV2ZW50TWV0YShldmVudE5hbWUsIGUsIHRhcmdldEVsKXtcbiAgICBsZXQgY2FsbGJhY2sgPSB0aGlzLm1ldGFkYXRhQ2FsbGJhY2tzW2V2ZW50TmFtZV1cbiAgICByZXR1cm4gY2FsbGJhY2sgPyBjYWxsYmFjayhlLCB0YXJnZXRFbCkgOiB7fVxuICB9XG5cbiAgc2V0UGVuZGluZ0xpbmsoaHJlZil7XG4gICAgdGhpcy5saW5rUmVmKytcbiAgICB0aGlzLnBlbmRpbmdMaW5rID0gaHJlZlxuICAgIHRoaXMucmVzZXRSZWxvYWRTdGF0dXMoKVxuICAgIHJldHVybiB0aGlzLmxpbmtSZWZcbiAgfVxuXG4gIC8vIGFueXRpbWUgd2UgYXJlIG5hdmlnYXRpbmcgb3IgY29ubmVjdGluZywgZHJvcCByZWxvYWQgY29va2llIGluIGNhc2VcbiAgLy8gd2UgaXNzdWUgdGhlIGNvb2tpZSBidXQgdGhlIG5leHQgcmVxdWVzdCB3YXMgaW50ZXJydXB0ZWQgYW5kIHRoZSBzZXJ2ZXIgbmV2ZXIgZHJvcHBlZCBpdFxuICByZXNldFJlbG9hZFN0YXR1cygpeyBCcm93c2VyLmRlbGV0ZUNvb2tpZShQSFhfUkVMT0FEX1NUQVRVUykgfVxuXG4gIGNvbW1pdFBlbmRpbmdMaW5rKGxpbmtSZWYpe1xuICAgIGlmKHRoaXMubGlua1JlZiAhPT0gbGlua1JlZil7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ocmVmID0gdGhpcy5wZW5kaW5nTGlua1xuICAgICAgdGhpcy5wZW5kaW5nTGluayA9IG51bGxcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgZ2V0SHJlZigpeyByZXR1cm4gdGhpcy5ocmVmIH1cblxuICBoYXNQZW5kaW5nTGluaygpeyByZXR1cm4gISF0aGlzLnBlbmRpbmdMaW5rIH1cblxuICBiaW5kKGV2ZW50cywgY2FsbGJhY2spe1xuICAgIGZvcihsZXQgZXZlbnQgaW4gZXZlbnRzKXtcbiAgICAgIGxldCBicm93c2VyRXZlbnROYW1lID0gZXZlbnRzW2V2ZW50XVxuXG4gICAgICB0aGlzLm9uKGJyb3dzZXJFdmVudE5hbWUsIGUgPT4ge1xuICAgICAgICBsZXQgYmluZGluZyA9IHRoaXMuYmluZGluZyhldmVudClcbiAgICAgICAgbGV0IHdpbmRvd0JpbmRpbmcgPSB0aGlzLmJpbmRpbmcoYHdpbmRvdy0ke2V2ZW50fWApXG4gICAgICAgIGxldCB0YXJnZXRQaHhFdmVudCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoYmluZGluZylcbiAgICAgICAgaWYodGFyZ2V0UGh4RXZlbnQpe1xuICAgICAgICAgIHRoaXMuZGVib3VuY2UoZS50YXJnZXQsIGUsIGJyb3dzZXJFdmVudE5hbWUsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2l0aGluT3duZXJzKGUudGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZSwgZXZlbnQsIHZpZXcsIGUudGFyZ2V0LCB0YXJnZXRQaHhFdmVudCwgbnVsbClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBET00uYWxsKGRvY3VtZW50LCBgWyR7d2luZG93QmluZGluZ31dYCwgZWwgPT4ge1xuICAgICAgICAgICAgbGV0IHBoeEV2ZW50ID0gZWwuZ2V0QXR0cmlidXRlKHdpbmRvd0JpbmRpbmcpXG4gICAgICAgICAgICB0aGlzLmRlYm91bmNlKGVsLCBlLCBicm93c2VyRXZlbnROYW1lLCAoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMud2l0aGluT3duZXJzKGVsLCB2aWV3ID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlLCBldmVudCwgdmlldywgZWwsIHBoeEV2ZW50LCBcIndpbmRvd1wiKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGJpbmRDbGlja3MoKXtcbiAgICB0aGlzLm9uKFwibW91c2Vkb3duXCIsIGUgPT4gdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCA9IGUudGFyZ2V0KVxuICAgIHRoaXMuYmluZENsaWNrKFwiY2xpY2tcIiwgXCJjbGlja1wiKVxuICB9XG5cbiAgYmluZENsaWNrKGV2ZW50TmFtZSwgYmluZGluZ05hbWUpe1xuICAgIGxldCBjbGljayA9IHRoaXMuYmluZGluZyhiaW5kaW5nTmFtZSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGUgPT4ge1xuICAgICAgbGV0IHRhcmdldCA9IG51bGxcbiAgICAgIC8vIGEgc3ludGhldGljIGNsaWNrIGV2ZW50IChkZXRhaWwgMCkgd2lsbCBub3QgaGF2ZSBjYXVzZWQgYSBtb3VzZWRvd24gZXZlbnQsXG4gICAgICAvLyB0aGVyZWZvcmUgdGhlIGNsaWNrU3RhcnRlZEF0VGFyZ2V0IGlzIHN0YWxlXG4gICAgICBpZihlLmRldGFpbCA9PT0gMCkgdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCA9IGUudGFyZ2V0XG4gICAgICBsZXQgY2xpY2tTdGFydGVkQXRUYXJnZXQgPSB0aGlzLmNsaWNrU3RhcnRlZEF0VGFyZ2V0IHx8IGUudGFyZ2V0XG4gICAgICAvLyB3aGVuIHNlYXJjaGluZyB0aGUgdGFyZ2V0IGZvciB0aGUgY2xpY2sgZXZlbnQsIHdlIGFsd2F5cyB3YW50IHRvXG4gICAgICAvLyB1c2UgdGhlIGFjdHVhbCBldmVudCB0YXJnZXQsIHNlZSAjMzM3MlxuICAgICAgdGFyZ2V0ID0gY2xvc2VzdFBoeEJpbmRpbmcoZS50YXJnZXQsIGNsaWNrKVxuICAgICAgdGhpcy5kaXNwYXRjaENsaWNrQXdheShlLCBjbGlja1N0YXJ0ZWRBdFRhcmdldClcbiAgICAgIHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBudWxsXG4gICAgICBsZXQgcGh4RXZlbnQgPSB0YXJnZXQgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShjbGljaylcbiAgICAgIGlmKCFwaHhFdmVudCl7XG4gICAgICAgIGlmKERPTS5pc05ld1BhZ2VDbGljayhlLCB3aW5kb3cubG9jYXRpb24pKXsgdGhpcy51bmxvYWQoKSB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZih0YXJnZXQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIpeyBlLnByZXZlbnREZWZhdWx0KCkgfVxuXG4gICAgICAvLyBub29wIGlmIHdlIGFyZSBpbiB0aGUgbWlkZGxlIG9mIGF3YWl0aW5nIGFuIGFjayBmb3IgdGhpcyBlbCBhbHJlYWR5XG4gICAgICBpZih0YXJnZXQuaGFzQXR0cmlidXRlKFBIWF9SRUZfU1JDKSl7IHJldHVybiB9XG5cbiAgICAgIHRoaXMuZGVib3VuY2UodGFyZ2V0LCBlLCBcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy53aXRoaW5Pd25lcnModGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICBKUy5leGVjKGUsIFwiY2xpY2tcIiwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldCwgW1wicHVzaFwiLCB7ZGF0YTogdGhpcy5ldmVudE1ldGEoXCJjbGlja1wiLCBlLCB0YXJnZXQpfV0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0sIGZhbHNlKVxuICB9XG5cbiAgZGlzcGF0Y2hDbGlja0F3YXkoZSwgY2xpY2tTdGFydGVkQXQpe1xuICAgIGxldCBwaHhDbGlja0F3YXkgPSB0aGlzLmJpbmRpbmcoXCJjbGljay1hd2F5XCIpXG4gICAgRE9NLmFsbChkb2N1bWVudCwgYFske3BoeENsaWNrQXdheX1dYCwgZWwgPT4ge1xuICAgICAgaWYoIShlbC5pc1NhbWVOb2RlKGNsaWNrU3RhcnRlZEF0KSB8fCBlbC5jb250YWlucyhjbGlja1N0YXJ0ZWRBdCkpKXtcbiAgICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZWwsIHZpZXcgPT4ge1xuICAgICAgICAgIGxldCBwaHhFdmVudCA9IGVsLmdldEF0dHJpYnV0ZShwaHhDbGlja0F3YXkpXG4gICAgICAgICAgaWYoSlMuaXNWaXNpYmxlKGVsKSAmJiBKUy5pc0luVmlld3BvcnQoZWwpKXtcbiAgICAgICAgICAgIEpTLmV4ZWMoZSwgXCJjbGlja1wiLCBwaHhFdmVudCwgdmlldywgZWwsIFtcInB1c2hcIiwge2RhdGE6IHRoaXMuZXZlbnRNZXRhKFwiY2xpY2tcIiwgZSwgZS50YXJnZXQpfV0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBiaW5kTmF2KCl7XG4gICAgaWYoIUJyb3dzZXIuY2FuUHVzaFN0YXRlKCkpeyByZXR1cm4gfVxuICAgIGlmKGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24peyBoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIiB9XG4gICAgbGV0IHNjcm9sbFRpbWVyID0gbnVsbFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIF9lID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChzY3JvbGxUaW1lcilcbiAgICAgIHNjcm9sbFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIEJyb3dzZXIudXBkYXRlQ3VycmVudFN0YXRlKHN0YXRlID0+IE9iamVjdC5hc3NpZ24oc3RhdGUsIHtzY3JvbGw6IHdpbmRvdy5zY3JvbGxZfSkpXG4gICAgICB9LCAxMDApXG4gICAgfSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGV2ZW50ID0+IHtcbiAgICAgIGlmKCF0aGlzLnJlZ2lzdGVyTmV3TG9jYXRpb24od2luZG93LmxvY2F0aW9uKSl7IHJldHVybiB9XG4gICAgICBsZXQge3R5cGUsIGJhY2tUeXBlLCBpZCwgc2Nyb2xsLCBwb3NpdGlvbn0gPSBldmVudC5zdGF0ZSB8fCB7fVxuICAgICAgbGV0IGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZlxuXG4gICAgICAvLyBDb21wYXJlIHBvc2l0aW9ucyB0byBkZXRlcm1pbmUgZGlyZWN0aW9uXG4gICAgICBsZXQgaXNGb3J3YXJkID0gcG9zaXRpb24gPiB0aGlzLmN1cnJlbnRIaXN0b3J5UG9zaXRpb25cblxuICAgICAgdHlwZSA9IGlzRm9yd2FyZCA/IHR5cGUgOiAoYmFja1R5cGUgfHwgdHlwZSlcblxuICAgICAgLy8gVXBkYXRlIGN1cnJlbnQgcG9zaXRpb25cbiAgICAgIHRoaXMuY3VycmVudEhpc3RvcnlQb3NpdGlvbiA9IHBvc2l0aW9uIHx8IDBcbiAgICAgIHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfSElTVE9SWV9QT1NJVElPTiwgdGhpcy5jdXJyZW50SGlzdG9yeVBvc2l0aW9uLnRvU3RyaW5nKCkpXG5cbiAgICAgIERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6bmF2aWdhdGVcIiwge2RldGFpbDoge2hyZWYsIHBhdGNoOiB0eXBlID09PSBcInBhdGNoXCIsIHBvcDogdHJ1ZSwgZGlyZWN0aW9uOiBpc0ZvcndhcmQgPyBcImZvcndhcmRcIiA6IFwiYmFja3dhcmRcIn19KVxuICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoKSA9PiB7IHRoaXMubWF5YmVTY3JvbGwoc2Nyb2xsKSB9XG4gICAgICAgIGlmKHRoaXMubWFpbi5pc0Nvbm5lY3RlZCgpICYmICh0eXBlID09PSBcInBhdGNoXCIgJiYgaWQgPT09IHRoaXMubWFpbi5pZCkpe1xuICAgICAgICAgIHRoaXMubWFpbi5wdXNoTGlua1BhdGNoKGV2ZW50LCBocmVmLCBudWxsLCBjYWxsYmFjaylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlcGxhY2VNYWluKGhyZWYsIG51bGwsIGNhbGxiYWNrKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sIGZhbHNlKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB7XG4gICAgICBsZXQgdGFyZ2V0ID0gY2xvc2VzdFBoeEJpbmRpbmcoZS50YXJnZXQsIFBIWF9MSVZFX0xJTkspXG4gICAgICBsZXQgdHlwZSA9IHRhcmdldCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFBIWF9MSVZFX0xJTkspXG4gICAgICBpZighdHlwZSB8fCAhdGhpcy5pc0Nvbm5lY3RlZCgpIHx8ICF0aGlzLm1haW4gfHwgRE9NLndhbnRzTmV3VGFiKGUpKXsgcmV0dXJuIH1cblxuICAgICAgLy8gV2hlbiB3cmFwcGluZyBhbiBTVkcgZWxlbWVudCBpbiBhbiBhbmNob3IgdGFnLCB0aGUgaHJlZiBjYW4gYmUgYW4gU1ZHQW5pbWF0ZWRTdHJpbmdcbiAgICAgIGxldCBocmVmID0gdGFyZ2V0LmhyZWYgaW5zdGFuY2VvZiBTVkdBbmltYXRlZFN0cmluZyA/IHRhcmdldC5ocmVmLmJhc2VWYWwgOiB0YXJnZXQuaHJlZlxuXG4gICAgICBsZXQgbGlua1N0YXRlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShQSFhfTElOS19TVEFURSlcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSAvLyBkbyBub3QgYnViYmxlIGNsaWNrIHRvIHJlZ3VsYXIgcGh4LWNsaWNrIGJpbmRpbmdzXG4gICAgICBpZih0aGlzLnBlbmRpbmdMaW5rID09PSBocmVmKXsgcmV0dXJuIH1cblxuICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgaWYodHlwZSA9PT0gXCJwYXRjaFwiKXtcbiAgICAgICAgICB0aGlzLnB1c2hIaXN0b3J5UGF0Y2goZSwgaHJlZiwgbGlua1N0YXRlLCB0YXJnZXQpXG4gICAgICAgIH0gZWxzZSBpZih0eXBlID09PSBcInJlZGlyZWN0XCIpe1xuICAgICAgICAgIHRoaXMuaGlzdG9yeVJlZGlyZWN0KGUsIGhyZWYsIGxpbmtTdGF0ZSwgbnVsbCwgdGFyZ2V0KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgJHtQSFhfTElWRV9MSU5LfSB0byBiZSBcInBhdGNoXCIgb3IgXCJyZWRpcmVjdFwiLCBnb3Q6ICR7dHlwZX1gKVxuICAgICAgICB9XG4gICAgICAgIGxldCBwaHhDbGljayA9IHRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwiY2xpY2tcIikpXG4gICAgICAgIGlmKHBoeENsaWNrKXtcbiAgICAgICAgICB0aGlzLnJlcXVlc3RET01VcGRhdGUoKCkgPT4gdGhpcy5leGVjSlModGFyZ2V0LCBwaHhDbGljaywgXCJjbGlja1wiKSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LCBmYWxzZSlcbiAgfVxuXG4gIG1heWJlU2Nyb2xsKHNjcm9sbCl7XG4gICAgaWYodHlwZW9mKHNjcm9sbCkgPT09IFwibnVtYmVyXCIpe1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHNjcm9sbClcbiAgICAgIH0pIC8vIHRoZSBib2R5IG5lZWRzIHRvIHJlbmRlciBiZWZvcmUgd2Ugc2Nyb2xsLlxuICAgIH1cbiAgfVxuXG4gIGRpc3BhdGNoRXZlbnQoZXZlbnQsIHBheWxvYWQgPSB7fSl7XG4gICAgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBgcGh4OiR7ZXZlbnR9YCwge2RldGFpbDogcGF5bG9hZH0pXG4gIH1cblxuICBkaXNwYXRjaEV2ZW50cyhldmVudHMpe1xuICAgIGV2ZW50cy5mb3JFYWNoKChbZXZlbnQsIHBheWxvYWRdKSA9PiB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQsIHBheWxvYWQpKVxuICB9XG5cbiAgd2l0aFBhZ2VMb2FkaW5nKGluZm8sIGNhbGxiYWNrKXtcbiAgICBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIFwicGh4OnBhZ2UtbG9hZGluZy1zdGFydFwiLCB7ZGV0YWlsOiBpbmZvfSlcbiAgICBsZXQgZG9uZSA9ICgpID0+IERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6cGFnZS1sb2FkaW5nLXN0b3BcIiwge2RldGFpbDogaW5mb30pXG4gICAgcmV0dXJuIGNhbGxiYWNrID8gY2FsbGJhY2soZG9uZSkgOiBkb25lXG4gIH1cblxuICBwdXNoSGlzdG9yeVBhdGNoKGUsIGhyZWYsIGxpbmtTdGF0ZSwgdGFyZ2V0RWwpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkgfHwgIXRoaXMubWFpbi5pc01haW4oKSl7IHJldHVybiBCcm93c2VyLnJlZGlyZWN0KGhyZWYpIH1cblxuICAgIHRoaXMud2l0aFBhZ2VMb2FkaW5nKHt0bzogaHJlZiwga2luZDogXCJwYXRjaFwifSwgZG9uZSA9PiB7XG4gICAgICB0aGlzLm1haW4ucHVzaExpbmtQYXRjaChlLCBocmVmLCB0YXJnZXRFbCwgbGlua1JlZiA9PiB7XG4gICAgICAgIHRoaXMuaGlzdG9yeVBhdGNoKGhyZWYsIGxpbmtTdGF0ZSwgbGlua1JlZilcbiAgICAgICAgZG9uZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBoaXN0b3J5UGF0Y2goaHJlZiwgbGlua1N0YXRlLCBsaW5rUmVmID0gdGhpcy5zZXRQZW5kaW5nTGluayhocmVmKSl7XG4gICAgaWYoIXRoaXMuY29tbWl0UGVuZGluZ0xpbmsobGlua1JlZikpeyByZXR1cm4gfVxuXG4gICAgLy8gSW5jcmVtZW50IHBvc2l0aW9uIGZvciBuZXcgc3RhdGVcbiAgICB0aGlzLmN1cnJlbnRIaXN0b3J5UG9zaXRpb24rK1xuICAgIHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfSElTVE9SWV9QT1NJVElPTiwgdGhpcy5jdXJyZW50SGlzdG9yeVBvc2l0aW9uLnRvU3RyaW5nKCkpXG5cbiAgICAvLyBzdG9yZSB0aGUgdHlwZSBmb3IgYmFjayBuYXZpZ2F0aW9uXG4gICAgQnJvd3Nlci51cGRhdGVDdXJyZW50U3RhdGUoKHN0YXRlKSA9PiAoey4uLnN0YXRlLCBiYWNrVHlwZTogXCJwYXRjaFwifSkpXG5cbiAgICBCcm93c2VyLnB1c2hTdGF0ZShsaW5rU3RhdGUsIHtcbiAgICAgIHR5cGU6IFwicGF0Y2hcIixcbiAgICAgIGlkOiB0aGlzLm1haW4uaWQsXG4gICAgICBwb3NpdGlvbjogdGhpcy5jdXJyZW50SGlzdG9yeVBvc2l0aW9uXG4gICAgfSwgaHJlZilcblxuICAgIERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6bmF2aWdhdGVcIiwge2RldGFpbDoge3BhdGNoOiB0cnVlLCBocmVmLCBwb3A6IGZhbHNlLCBkaXJlY3Rpb246IFwiZm9yd2FyZFwifX0pXG4gICAgdGhpcy5yZWdpc3Rlck5ld0xvY2F0aW9uKHdpbmRvdy5sb2NhdGlvbilcbiAgfVxuXG4gIGhpc3RvcnlSZWRpcmVjdChlLCBocmVmLCBsaW5rU3RhdGUsIGZsYXNoLCB0YXJnZXRFbCl7XG4gICAgaWYodGFyZ2V0RWwgJiYgZS5pc1RydXN0ZWQgJiYgZS50eXBlICE9PSBcInBvcHN0YXRlXCIpeyB0YXJnZXRFbC5jbGFzc0xpc3QuYWRkKFwicGh4LWNsaWNrLWxvYWRpbmdcIikgfVxuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkgfHwgIXRoaXMubWFpbi5pc01haW4oKSl7IHJldHVybiBCcm93c2VyLnJlZGlyZWN0KGhyZWYsIGZsYXNoKSB9XG5cbiAgICAvLyBjb252ZXJ0IHRvIGZ1bGwgaHJlZiBpZiBvbmx5IHBhdGggcHJlZml4XG4gICAgaWYoL15cXC8kfF5cXC9bXlxcL10rLiokLy50ZXN0KGhyZWYpKXtcbiAgICAgIGxldCB7cHJvdG9jb2wsIGhvc3R9ID0gd2luZG93LmxvY2F0aW9uXG4gICAgICBocmVmID0gYCR7cHJvdG9jb2x9Ly8ke2hvc3R9JHtocmVmfWBcbiAgICB9XG4gICAgbGV0IHNjcm9sbCA9IHdpbmRvdy5zY3JvbGxZXG4gICAgdGhpcy53aXRoUGFnZUxvYWRpbmcoe3RvOiBocmVmLCBraW5kOiBcInJlZGlyZWN0XCJ9LCBkb25lID0+IHtcbiAgICAgIHRoaXMucmVwbGFjZU1haW4oaHJlZiwgZmxhc2gsIChsaW5rUmVmKSA9PiB7XG4gICAgICAgIGlmKGxpbmtSZWYgPT09IHRoaXMubGlua1JlZil7XG4gICAgICAgICAgLy8gSW5jcmVtZW50IHBvc2l0aW9uIGZvciBuZXcgc3RhdGVcbiAgICAgICAgICB0aGlzLmN1cnJlbnRIaXN0b3J5UG9zaXRpb24rK1xuICAgICAgICAgIHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfSElTVE9SWV9QT1NJVElPTiwgdGhpcy5jdXJyZW50SGlzdG9yeVBvc2l0aW9uLnRvU3RyaW5nKCkpXG5cbiAgICAgICAgICAvLyBzdG9yZSB0aGUgdHlwZSBmb3IgYmFjayBuYXZpZ2F0aW9uXG4gICAgICAgICAgQnJvd3Nlci51cGRhdGVDdXJyZW50U3RhdGUoKHN0YXRlKSA9PiAoey4uLnN0YXRlLCBiYWNrVHlwZTogXCJyZWRpcmVjdFwifSkpXG5cbiAgICAgICAgICBCcm93c2VyLnB1c2hTdGF0ZShsaW5rU3RhdGUsIHtcbiAgICAgICAgICAgIHR5cGU6IFwicmVkaXJlY3RcIixcbiAgICAgICAgICAgIGlkOiB0aGlzLm1haW4uaWQsXG4gICAgICAgICAgICBzY3JvbGw6IHNjcm9sbCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLmN1cnJlbnRIaXN0b3J5UG9zaXRpb25cbiAgICAgICAgICB9LCBocmVmKVxuXG4gICAgICAgICAgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpuYXZpZ2F0ZVwiLCB7ZGV0YWlsOiB7aHJlZiwgcGF0Y2g6IGZhbHNlLCBwb3A6IGZhbHNlLCBkaXJlY3Rpb246IFwiZm9yd2FyZFwifX0pXG4gICAgICAgICAgdGhpcy5yZWdpc3Rlck5ld0xvY2F0aW9uKHdpbmRvdy5sb2NhdGlvbilcbiAgICAgICAgfVxuICAgICAgICBkb25lKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHJlZ2lzdGVyTmV3TG9jYXRpb24obmV3TG9jYXRpb24pe1xuICAgIGxldCB7cGF0aG5hbWUsIHNlYXJjaH0gPSB0aGlzLmN1cnJlbnRMb2NhdGlvblxuICAgIGlmKHBhdGhuYW1lICsgc2VhcmNoID09PSBuZXdMb2NhdGlvbi5wYXRobmFtZSArIG5ld0xvY2F0aW9uLnNlYXJjaCl7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJyZW50TG9jYXRpb24gPSBjbG9uZShuZXdMb2NhdGlvbilcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgYmluZEZvcm1zKCl7XG4gICAgbGV0IGl0ZXJhdGlvbnMgPSAwXG4gICAgbGV0IGV4dGVybmFsRm9ybVN1Ym1pdHRlZCA9IGZhbHNlXG5cbiAgICAvLyBkaXNhYmxlIGZvcm1zIG9uIHN1Ym1pdCB0aGF0IHRyYWNrIHBoeC1jaGFuZ2UgYnV0IHBlcmZvcm0gZXh0ZXJuYWwgc3VibWl0XG4gICAgdGhpcy5vbihcInN1Ym1pdFwiLCBlID0+IHtcbiAgICAgIGxldCBwaHhTdWJtaXQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwic3VibWl0XCIpKVxuICAgICAgbGV0IHBoeENoYW5nZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIikpXG4gICAgICBpZighZXh0ZXJuYWxGb3JtU3VibWl0dGVkICYmIHBoeENoYW5nZSAmJiAhcGh4U3VibWl0KXtcbiAgICAgICAgZXh0ZXJuYWxGb3JtU3VibWl0dGVkID0gdHJ1ZVxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZS50YXJnZXQsIHZpZXcgPT4ge1xuICAgICAgICAgIHZpZXcuZGlzYWJsZUZvcm0oZS50YXJnZXQpXG4gICAgICAgICAgLy8gc2FmYXJpIG5lZWRzIG5leHQgdGlja1xuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgaWYoRE9NLmlzVW5sb2FkYWJsZUZvcm1TdWJtaXQoZSkpeyB0aGlzLnVubG9hZCgpIH1cbiAgICAgICAgICAgIGUudGFyZ2V0LnN1Ym1pdCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5vbihcInN1Ym1pdFwiLCBlID0+IHtcbiAgICAgIGxldCBwaHhFdmVudCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJzdWJtaXRcIikpXG4gICAgICBpZighcGh4RXZlbnQpe1xuICAgICAgICBpZihET00uaXNVbmxvYWRhYmxlRm9ybVN1Ym1pdChlKSl7IHRoaXMudW5sb2FkKCkgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS50YXJnZXQuZGlzYWJsZWQgPSB0cnVlXG4gICAgICB0aGlzLndpdGhpbk93bmVycyhlLnRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgIEpTLmV4ZWMoZSwgXCJzdWJtaXRcIiwgcGh4RXZlbnQsIHZpZXcsIGUudGFyZ2V0LCBbXCJwdXNoXCIsIHtzdWJtaXR0ZXI6IGUuc3VibWl0dGVyfV0pXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBmb3IobGV0IHR5cGUgb2YgW1wiY2hhbmdlXCIsIFwiaW5wdXRcIl0pe1xuICAgICAgdGhpcy5vbih0eXBlLCBlID0+IHtcbiAgICAgICAgaWYoZSBpbnN0YW5jZW9mIEN1c3RvbUV2ZW50ICYmIGUudGFyZ2V0LmZvcm0gPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgLy8gdGhyb3cgb24gaW52YWxpZCBKUy5kaXNwYXRjaCB0YXJnZXQgYW5kIG5vb3AgaWYgQ3VzdG9tRXZlbnQgdHJpZ2dlcmVkIG91dHNpZGUgSlMuZGlzcGF0Y2hcbiAgICAgICAgICBpZihlLmRldGFpbCAmJiBlLmRldGFpbC5kaXNwYXRjaGVyKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlzcGF0Y2hpbmcgYSBjdXN0b20gJHt0eXBlfSBldmVudCBpcyBvbmx5IHN1cHBvcnRlZCBvbiBpbnB1dCBlbGVtZW50cyBpbnNpZGUgYSBmb3JtYClcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBoeENoYW5nZSA9IHRoaXMuYmluZGluZyhcImNoYW5nZVwiKVxuICAgICAgICBsZXQgaW5wdXQgPSBlLnRhcmdldFxuICAgICAgICAvLyBkbyBub3QgZmlyZSBwaHgtY2hhbmdlIGlmIHdlIGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgY29tcG9zaXRpb24gc2Vzc2lvblxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9pc0NvbXBvc2luZ1xuICAgICAgICAvLyBTYWZhcmkgaGFzIGlzc3VlcyBpZiB0aGUgaW5wdXQgaXMgdXBkYXRlZCB3aGlsZSBjb21wb3NpbmdcbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waG9lbml4ZnJhbWV3b3JrL3Bob2VuaXhfbGl2ZV92aWV3L2lzc3Vlcy8zMzIyXG4gICAgICAgIGlmKGUuaXNDb21wb3Npbmcpe1xuICAgICAgICAgIGNvbnN0IGtleSA9IGBjb21wb3NpdGlvbi1saXN0ZW5lci0ke3R5cGV9YFxuICAgICAgICAgIGlmKCFET00ucHJpdmF0ZShpbnB1dCwga2V5KSl7XG4gICAgICAgICAgICBET00ucHV0UHJpdmF0ZShpbnB1dCwga2V5LCB0cnVlKVxuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNvbXBvc2l0aW9uZW5kXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgLy8gdHJpZ2dlciBhIG5ldyBpbnB1dC9jaGFuZ2UgZXZlbnRcbiAgICAgICAgICAgICAgaW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQodHlwZSwge2J1YmJsZXM6IHRydWV9KSlcbiAgICAgICAgICAgICAgRE9NLmRlbGV0ZVByaXZhdGUoaW5wdXQsIGtleSlcbiAgICAgICAgICAgIH0sIHtvbmNlOiB0cnVlfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGlucHV0RXZlbnQgPSBpbnB1dC5nZXRBdHRyaWJ1dGUocGh4Q2hhbmdlKVxuICAgICAgICBsZXQgZm9ybUV2ZW50ID0gaW5wdXQuZm9ybSAmJiBpbnB1dC5mb3JtLmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpXG4gICAgICAgIGxldCBwaHhFdmVudCA9IGlucHV0RXZlbnQgfHwgZm9ybUV2ZW50XG4gICAgICAgIGlmKCFwaHhFdmVudCl7IHJldHVybiB9XG4gICAgICAgIGlmKGlucHV0LnR5cGUgPT09IFwibnVtYmVyXCIgJiYgaW5wdXQudmFsaWRpdHkgJiYgaW5wdXQudmFsaWRpdHkuYmFkSW5wdXQpeyByZXR1cm4gfVxuXG4gICAgICAgIGxldCBkaXNwYXRjaGVyID0gaW5wdXRFdmVudCA/IGlucHV0IDogaW5wdXQuZm9ybVxuICAgICAgICBsZXQgY3VycmVudEl0ZXJhdGlvbnMgPSBpdGVyYXRpb25zXG4gICAgICAgIGl0ZXJhdGlvbnMrK1xuICAgICAgICBsZXQge2F0OiBhdCwgdHlwZTogbGFzdFR5cGV9ID0gRE9NLnByaXZhdGUoaW5wdXQsIFwicHJldi1pdGVyYXRpb25cIikgfHwge31cbiAgICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIGFsd2F5cyBmaXJlIGF0IGxlYXN0IG9uZSBcImlucHV0XCIgZXZlbnQgYmVmb3JlIGV2ZXJ5IFwiY2hhbmdlXCJcbiAgICAgICAgLy8gSWdub3JlIFwiY2hhbmdlXCIgZXZlbnRzLCB1bmxlc3MgdGhlcmUgd2FzIG5vIHByaW9yIFwiaW5wdXRcIiBldmVudC5cbiAgICAgICAgLy8gVGhpcyBjb3VsZCBoYXBwZW4gaWYgdXNlciBjb2RlIHRyaWdnZXJzIGEgXCJjaGFuZ2VcIiBldmVudCwgb3IgaWYgdGhlIGJyb3dzZXIgaXMgbm9uLWNvbmZvcm1pbmcuXG4gICAgICAgIGlmKGF0ID09PSBjdXJyZW50SXRlcmF0aW9ucyAtIDEgJiYgdHlwZSA9PT0gXCJjaGFuZ2VcIiAmJiBsYXN0VHlwZSA9PT0gXCJpbnB1dFwiKXsgcmV0dXJuIH1cblxuICAgICAgICBET00ucHV0UHJpdmF0ZShpbnB1dCwgXCJwcmV2LWl0ZXJhdGlvblwiLCB7YXQ6IGN1cnJlbnRJdGVyYXRpb25zLCB0eXBlOiB0eXBlfSlcblxuICAgICAgICB0aGlzLmRlYm91bmNlKGlucHV0LCBlLCB0eXBlLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZGlzcGF0Y2hlciwgdmlldyA9PiB7XG4gICAgICAgICAgICBET00ucHV0UHJpdmF0ZShpbnB1dCwgUEhYX0hBU19GT0NVU0VELCB0cnVlKVxuICAgICAgICAgICAgSlMuZXhlYyhlLCBcImNoYW5nZVwiLCBwaHhFdmVudCwgdmlldywgaW5wdXQsIFtcInB1c2hcIiwge190YXJnZXQ6IGUudGFyZ2V0Lm5hbWUsIGRpc3BhdGNoZXI6IGRpc3BhdGNoZXJ9XSlcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5vbihcInJlc2V0XCIsIChlKSA9PiB7XG4gICAgICBsZXQgZm9ybSA9IGUudGFyZ2V0XG4gICAgICBET00ucmVzZXRGb3JtKGZvcm0pXG4gICAgICBsZXQgaW5wdXQgPSBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpLmZpbmQoZWwgPT4gZWwudHlwZSA9PT0gXCJyZXNldFwiKVxuICAgICAgaWYoaW5wdXQpe1xuICAgICAgICAvLyB3YWl0IHVudGlsIG5leHQgdGljayB0byBnZXQgdXBkYXRlZCBpbnB1dCB2YWx1ZVxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBpbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIsIHtidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiBmYWxzZX0pKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBkZWJvdW5jZShlbCwgZXZlbnQsIGV2ZW50VHlwZSwgY2FsbGJhY2spe1xuICAgIGlmKGV2ZW50VHlwZSA9PT0gXCJibHVyXCIgfHwgZXZlbnRUeXBlID09PSBcImZvY3Vzb3V0XCIpeyByZXR1cm4gY2FsbGJhY2soKSB9XG5cbiAgICBsZXQgcGh4RGVib3VuY2UgPSB0aGlzLmJpbmRpbmcoUEhYX0RFQk9VTkNFKVxuICAgIGxldCBwaHhUaHJvdHRsZSA9IHRoaXMuYmluZGluZyhQSFhfVEhST1RUTEUpXG4gICAgbGV0IGRlZmF1bHREZWJvdW5jZSA9IHRoaXMuZGVmYXVsdHMuZGVib3VuY2UudG9TdHJpbmcoKVxuICAgIGxldCBkZWZhdWx0VGhyb3R0bGUgPSB0aGlzLmRlZmF1bHRzLnRocm90dGxlLnRvU3RyaW5nKClcblxuICAgIHRoaXMud2l0aGluT3duZXJzKGVsLCB2aWV3ID0+IHtcbiAgICAgIGxldCBhc3luY0ZpbHRlciA9ICgpID0+ICF2aWV3LmlzRGVzdHJveWVkKCkgJiYgZG9jdW1lbnQuYm9keS5jb250YWlucyhlbClcbiAgICAgIERPTS5kZWJvdW5jZShlbCwgZXZlbnQsIHBoeERlYm91bmNlLCBkZWZhdWx0RGVib3VuY2UsIHBoeFRocm90dGxlLCBkZWZhdWx0VGhyb3R0bGUsIGFzeW5jRmlsdGVyLCAoKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHNpbGVuY2VFdmVudHMoY2FsbGJhY2spe1xuICAgIHRoaXMuc2lsZW5jZWQgPSB0cnVlXG4gICAgY2FsbGJhY2soKVxuICAgIHRoaXMuc2lsZW5jZWQgPSBmYWxzZVxuICB9XG5cbiAgb24oZXZlbnQsIGNhbGxiYWNrKXtcbiAgICB0aGlzLmJvdW5kRXZlbnROYW1lcy5hZGQoZXZlbnQpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGUgPT4ge1xuICAgICAgaWYoIXRoaXMuc2lsZW5jZWQpeyBjYWxsYmFjayhlKSB9XG4gICAgfSlcbiAgfVxuXG4gIGpzUXVlcnlTZWxlY3RvckFsbChzb3VyY2VFbCwgcXVlcnksIGRlZmF1bHRRdWVyeSl7XG4gICAgbGV0IGFsbCA9IHRoaXMuZG9tQ2FsbGJhY2tzLmpzUXVlcnlTZWxlY3RvckFsbFxuICAgIHJldHVybiBhbGwgPyBhbGwoc291cmNlRWwsIHF1ZXJ5LCBkZWZhdWx0UXVlcnkpIDogZGVmYXVsdFF1ZXJ5KClcbiAgfVxufVxuXG5jbGFzcyBUcmFuc2l0aW9uU2V0IHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICB0aGlzLnRyYW5zaXRpb25zID0gbmV3IFNldCgpXG4gICAgdGhpcy5wZW5kaW5nT3BzID0gW11cbiAgfVxuXG4gIHJlc2V0KCl7XG4gICAgdGhpcy50cmFuc2l0aW9ucy5mb3JFYWNoKHRpbWVyID0+IHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcilcbiAgICAgIHRoaXMudHJhbnNpdGlvbnMuZGVsZXRlKHRpbWVyKVxuICAgIH0pXG4gICAgdGhpcy5mbHVzaFBlbmRpbmdPcHMoKVxuICB9XG5cbiAgYWZ0ZXIoY2FsbGJhY2spe1xuICAgIGlmKHRoaXMuc2l6ZSgpID09PSAwKXtcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoUGVuZGluZ09wKGNhbGxiYWNrKVxuICAgIH1cbiAgfVxuXG4gIGFkZFRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lKXtcbiAgICBvblN0YXJ0KClcbiAgICBsZXQgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbnMuZGVsZXRlKHRpbWVyKVxuICAgICAgb25Eb25lKClcbiAgICAgIHRoaXMuZmx1c2hQZW5kaW5nT3BzKClcbiAgICB9LCB0aW1lKVxuICAgIHRoaXMudHJhbnNpdGlvbnMuYWRkKHRpbWVyKVxuICB9XG5cbiAgcHVzaFBlbmRpbmdPcChvcCl7IHRoaXMucGVuZGluZ09wcy5wdXNoKG9wKSB9XG5cbiAgc2l6ZSgpeyByZXR1cm4gdGhpcy50cmFuc2l0aW9ucy5zaXplIH1cblxuICBmbHVzaFBlbmRpbmdPcHMoKXtcbiAgICBpZih0aGlzLnNpemUoKSA+IDApeyByZXR1cm4gfVxuICAgIGxldCBvcCA9IHRoaXMucGVuZGluZ09wcy5zaGlmdCgpXG4gICAgaWYob3Ape1xuICAgICAgb3AoKVxuICAgICAgdGhpcy5mbHVzaFBlbmRpbmdPcHMoKVxuICAgIH1cbiAgfVxufVxuIiwgIi8qXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuUGhvZW5peCBMaXZlVmlldyBKYXZhU2NyaXB0IENsaWVudFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuU2VlIHRoZSBoZXhkb2NzIGF0IGBodHRwczovL2hleGRvY3MucG0vcGhvZW5peF9saXZlX3ZpZXdgIGZvciBkb2N1bWVudGF0aW9uLlxuXG4qL1xuXG5pbXBvcnQgTGl2ZVNvY2tldCwge2lzVXNlZElucHV0fSBmcm9tIFwiLi9saXZlX3NvY2tldFwiXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgVmlld0hvb2sgZnJvbSBcIi4vdmlld19ob29rXCJcbmltcG9ydCBWaWV3IGZyb20gXCIuL3ZpZXdcIlxuXG4vKiogQ3JlYXRlcyBhIFZpZXdIb29rIGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gZWxlbWVudCBhbmQgY2FsbGJhY2tzLlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gYXNzb2NpYXRlIHdpdGggdGhlIGhvb2suXG4gKiBAcGFyYW0ge09iamVjdH0gW2NhbGxiYWNrc10gLSBUaGUgbGlzdCBvZiBob29rIGNhbGxiYWNrcywgc3VjaCBhcyBtb3VudGVkLFxuICogICB1cGRhdGVkLCBkZXN0cm95ZWQsIGV0Yy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGNsYXNzIE15Q29tcG9uZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICogICBjb25uZWN0ZWRDYWxsYmFjaygpe1xuICogICAgIGxldCBvbkxpdmVWaWV3TW91bnRlZCA9ICgpID0+IHRoaXMuaG9vay5wdXNoRXZlbnQoLi4uKSlcbiAqICAgICB0aGlzLmhvb2sgPSBjcmVhdGVIb29rKHRoaXMsIHttb3VudGVkOiBvbkxpdmVWaWV3TW91bnRlZH0pXG4gKiAgIH1cbiAqIH1cbiAqXG4gKiAqTm90ZSo6IGBjcmVhdGVIb29rYCBtdXN0IGJlIGNhbGxlZCBmcm9tIHRoZSBgY29ubmVjdGVkQ2FsbGJhY2tgIGxpZmVjeWNsZVxuICogd2hpY2ggaXMgdHJpZ2dlcmVkIGFmdGVyIHRoZSBlbGVtZW50IGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBET00uIElmIHlvdSB0cnlcbiAqIHRvIGNhbGwgYGNyZWF0ZUhvb2tgIGZyb20gdGhlIGNvbnN0cnVjdG9yLCBhbiBlcnJvciB3aWxsIGJlIGxvZ2dlZC5cbiAqXG4gKiBAcmV0dXJucyB7Vmlld0hvb2t9IFJldHVybnMgdGhlIFZpZXdIb29rIGluc3RhbmNlIGZvciB0aGUgY3VzdG9tIGVsZW1lbnQuXG4gKi9cbmxldCBjcmVhdGVIb29rID0gKGVsLCBjYWxsYmFja3MgPSB7fSkgPT4ge1xuICBsZXQgZXhpc3RpbmdIb29rID0gRE9NLmdldEN1c3RvbUVsSG9vayhlbClcbiAgaWYoZXhpc3RpbmdIb29rKXsgcmV0dXJuIGV4aXN0aW5nSG9vayB9XG5cbiAgbGV0IGhvb2sgPSBuZXcgVmlld0hvb2soVmlldy5jbG9zZXN0VmlldyhlbCksIGVsLCBjYWxsYmFja3MpXG4gIERPTS5wdXRDdXN0b21FbEhvb2soZWwsIGhvb2spXG4gIHJldHVybiBob29rXG59XG5cbmV4cG9ydCB7XG4gIExpdmVTb2NrZXQsXG4gIGlzVXNlZElucHV0LFxuICBjcmVhdGVIb29rXG59XG4iLCAiLy8gSWYgeW91IHdhbnQgdG8gdXNlIFBob2VuaXggY2hhbm5lbHMsIHJ1biBgbWl4IGhlbHAgcGh4Lmdlbi5jaGFubmVsYFxuLy8gdG8gZ2V0IHN0YXJ0ZWQgYW5kIHRoZW4gdW5jb21tZW50IHRoZSBsaW5lIGJlbG93LlxuLy8gaW1wb3J0IFwiLi91c2VyX3NvY2tldC5qc1wiXG5cbi8vIFlvdSBjYW4gaW5jbHVkZSBkZXBlbmRlbmNpZXMgaW4gdHdvIHdheXMuXG4vL1xuLy8gVGhlIHNpbXBsZXN0IG9wdGlvbiBpcyB0byBwdXQgdGhlbSBpbiBhc3NldHMvdmVuZG9yIGFuZFxuLy8gaW1wb3J0IHRoZW0gdXNpbmcgcmVsYXRpdmUgcGF0aHM6XG4vL1xuLy8gICAgIGltcG9ydCBcIi4uL3ZlbmRvci9zb21lLXBhY2thZ2UuanNcIlxuLy9cbi8vIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gYG5wbSBpbnN0YWxsIHNvbWUtcGFja2FnZSAtLXByZWZpeCBhc3NldHNgIGFuZCBpbXBvcnRcbi8vIHRoZW0gdXNpbmcgYSBwYXRoIHN0YXJ0aW5nIHdpdGggdGhlIHBhY2thZ2UgbmFtZTpcbi8vXG4vLyAgICAgaW1wb3J0IFwic29tZS1wYWNrYWdlXCJcbi8vXG5cbi8vIEluY2x1ZGUgcGhvZW5peF9odG1sIHRvIGhhbmRsZSBtZXRob2Q9UFVUL0RFTEVURSBpbiBmb3JtcyBhbmQgYnV0dG9ucy5cbmltcG9ydCBcInBob2VuaXhfaHRtbFwiXG4vLyBFc3RhYmxpc2ggUGhvZW5peCBTb2NrZXQgYW5kIExpdmVWaWV3IGNvbmZpZ3VyYXRpb24uXG5pbXBvcnQgeyBTb2NrZXQgfSBmcm9tIFwicGhvZW5peFwiXG5pbXBvcnQgeyBMaXZlU29ja2V0IH0gZnJvbSBcInBob2VuaXhfbGl2ZV92aWV3XCJcbmltcG9ydCB0b3BiYXIgZnJvbSBcIi4uL3ZlbmRvci90b3BiYXJcIlxuaW1wb3J0IHNvcnRhYmxlIGZyb20gXCIuL2hvb2tzL3NvcnRhYmxlXCJcbmltcG9ydCBtYXJrZG93biBmcm9tIFwiLi9ob29rcy9tYXJrZG93blwiXG5pbXBvcnQgUzNVcGxvYWRlciBmcm9tIFwiLi91cGxvYWRlcnMvczNcIlxuaW1wb3J0IExvY2FsTG9jYWxlU3RvcmFnZSBmcm9tIFwiLi9ob29rcy9sb2NhbF9sb2NhbGVfc3RvcmFnZVwiXG5pbXBvcnQgXCJmbG93Yml0ZS9kaXN0L2Zsb3diaXRlLnBob2VuaXguanNcIlxuaW1wb3J0IFwiLi9kZWxldGVfY29uZmlybVwiXG5cbmNvbnN0IEhvb2tzID0geyBEcmFnOiBzb3J0YWJsZSwgTWFya2Rvd246IG1hcmtkb3duLCBMb2NhbExvY2FsZVN0b3JhZ2U6IExvY2FsTG9jYWxlU3RvcmFnZSB9XG5cbmxldCBjc3JmVG9rZW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibWV0YVtuYW1lPSdjc3JmLXRva2VuJ11cIikuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKVxubGV0IGxpdmVTb2NrZXQgPSBuZXcgTGl2ZVNvY2tldChcIi9saXZlXCIsIFNvY2tldCwge1xuICBsb25nUG9sbEZhbGxiYWNrTXM6IDI1MDAsXG4gIHBhcmFtczogeyBfY3NyZl90b2tlbjogY3NyZlRva2VuIH0sXG4gIHVwbG9hZGVyczogeyBTMzogUzNVcGxvYWRlciB9LFxuICBob29rczogSG9va3MsXG59KVxuXG4vLyBTaG93IHByb2dyZXNzIGJhciBvbiBsaXZlIG5hdmlnYXRpb24gYW5kIGZvcm0gc3VibWl0c1xudG9wYmFyLmNvbmZpZyh7IGJhckNvbG9yczogeyAwOiBcIiMyOWRcIiB9LCBzaGFkb3dDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIC4zKVwiIH0pXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpwYWdlLWxvYWRpbmctc3RhcnRcIiwgX2luZm8gPT4gdG9wYmFyLnNob3coMzAwKSlcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGh4OnBhZ2UtbG9hZGluZy1zdG9wXCIsIF9pbmZvID0+IHRvcGJhci5oaWRlKCkpXG5cbi8vIGNvbm5lY3QgaWYgdGhlcmUgYXJlIGFueSBMaXZlVmlld3Mgb24gdGhlIHBhZ2VcbmxpdmVTb2NrZXQuY29ubmVjdCgpXG5cbi8vIGV4cG9zZSBsaXZlU29ja2V0IG9uIHdpbmRvdyBmb3Igd2ViIGNvbnNvbGUgZGVidWcgbG9ncyBhbmQgbGF0ZW5jeSBzaW11bGF0aW9uOlxuLy8gPj4gbGl2ZVNvY2tldC5lbmFibGVEZWJ1ZygpXG4vLyA+PiBsaXZlU29ja2V0LmVuYWJsZUxhdGVuY3lTaW0oMTAwMCkgIC8vIGVuYWJsZWQgZm9yIGR1cmF0aW9uIG9mIGJyb3dzZXIgc2Vzc2lvblxuLy8gPj4gbGl2ZVNvY2tldC5kaXNhYmxlTGF0ZW5jeVNpbSgpXG53aW5kb3cubGl2ZVNvY2tldCA9IGxpdmVTb2NrZXRcbiIsICIvKiohXG4gKiBTb3J0YWJsZSAxLjE1LjRcbiAqIEBhdXRob3JcdFJ1YmFYYSAgIDx0cmFzaEBydWJheGEub3JnPlxuICogQGF1dGhvclx0b3dlbm0gICAgPG93ZW4yMzM1NUBnbWFpbC5jb20+XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHtcbiAgICAgIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuICByZXR1cm4gYXJyMjtcbn1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbnZhciB2ZXJzaW9uID0gXCIxLjE1LjRcIjtcblxuZnVuY3Rpb24gdXNlckFnZW50KHBhdHRlcm4pIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IpIHtcbiAgICByZXR1cm4gISEgLypAX19QVVJFX18qL25hdmlnYXRvci51c2VyQWdlbnQubWF0Y2gocGF0dGVybik7XG4gIH1cbn1cbnZhciBJRTExT3JMZXNzID0gdXNlckFnZW50KC8oPzpUcmlkZW50LipydlsgOl0/MTFcXC58bXNpZXxpZW1vYmlsZXxXaW5kb3dzIFBob25lKS9pKTtcbnZhciBFZGdlID0gdXNlckFnZW50KC9FZGdlL2kpO1xudmFyIEZpcmVGb3ggPSB1c2VyQWdlbnQoL2ZpcmVmb3gvaSk7XG52YXIgU2FmYXJpID0gdXNlckFnZW50KC9zYWZhcmkvaSkgJiYgIXVzZXJBZ2VudCgvY2hyb21lL2kpICYmICF1c2VyQWdlbnQoL2FuZHJvaWQvaSk7XG52YXIgSU9TID0gdXNlckFnZW50KC9pUChhZHxvZHxob25lKS9pKTtcbnZhciBDaHJvbWVGb3JBbmRyb2lkID0gdXNlckFnZW50KC9jaHJvbWUvaSkgJiYgdXNlckFnZW50KC9hbmRyb2lkL2kpO1xuXG52YXIgY2FwdHVyZU1vZGUgPSB7XG4gIGNhcHR1cmU6IGZhbHNlLFxuICBwYXNzaXZlOiBmYWxzZVxufTtcbmZ1bmN0aW9uIG9uKGVsLCBldmVudCwgZm4pIHtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sICFJRTExT3JMZXNzICYmIGNhcHR1cmVNb2RlKTtcbn1cbmZ1bmN0aW9uIG9mZihlbCwgZXZlbnQsIGZuKSB7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCAhSUUxMU9yTGVzcyAmJiBjYXB0dXJlTW9kZSk7XG59XG5mdW5jdGlvbiBtYXRjaGVzKCAvKipIVE1MRWxlbWVudCovZWwsIC8qKlN0cmluZyovc2VsZWN0b3IpIHtcbiAgaWYgKCFzZWxlY3RvcikgcmV0dXJuO1xuICBzZWxlY3RvclswXSA9PT0gJz4nICYmIChzZWxlY3RvciA9IHNlbGVjdG9yLnN1YnN0cmluZygxKSk7XG4gIGlmIChlbCkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoZWwubWF0Y2hlcykge1xuICAgICAgICByZXR1cm4gZWwubWF0Y2hlcyhzZWxlY3Rvcik7XG4gICAgICB9IGVsc2UgaWYgKGVsLm1zTWF0Y2hlc1NlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9IGVsc2UgaWYgKGVsLndlYmtpdE1hdGNoZXNTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldFBhcmVudE9ySG9zdChlbCkge1xuICByZXR1cm4gZWwuaG9zdCAmJiBlbCAhPT0gZG9jdW1lbnQgJiYgZWwuaG9zdC5ub2RlVHlwZSA/IGVsLmhvc3QgOiBlbC5wYXJlbnROb2RlO1xufVxuZnVuY3Rpb24gY2xvc2VzdCggLyoqSFRNTEVsZW1lbnQqL2VsLCAvKipTdHJpbmcqL3NlbGVjdG9yLCAvKipIVE1MRWxlbWVudCovY3R4LCBpbmNsdWRlQ1RYKSB7XG4gIGlmIChlbCkge1xuICAgIGN0eCA9IGN0eCB8fCBkb2N1bWVudDtcbiAgICBkbyB7XG4gICAgICBpZiAoc2VsZWN0b3IgIT0gbnVsbCAmJiAoc2VsZWN0b3JbMF0gPT09ICc+JyA/IGVsLnBhcmVudE5vZGUgPT09IGN0eCAmJiBtYXRjaGVzKGVsLCBzZWxlY3RvcikgOiBtYXRjaGVzKGVsLCBzZWxlY3RvcikpIHx8IGluY2x1ZGVDVFggJiYgZWwgPT09IGN0eCkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9XG4gICAgICBpZiAoZWwgPT09IGN0eCkgYnJlYWs7XG4gICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG4gICAgfSB3aGlsZSAoZWwgPSBnZXRQYXJlbnRPckhvc3QoZWwpKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbnZhciBSX1NQQUNFID0gL1xccysvZztcbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsLCBuYW1lLCBzdGF0ZSkge1xuICBpZiAoZWwgJiYgbmFtZSkge1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgIGVsLmNsYXNzTGlzdFtzdGF0ZSA/ICdhZGQnIDogJ3JlbW92ZSddKG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gKCcgJyArIGVsLmNsYXNzTmFtZSArICcgJykucmVwbGFjZShSX1NQQUNFLCAnICcpLnJlcGxhY2UoJyAnICsgbmFtZSArICcgJywgJyAnKTtcbiAgICAgIGVsLmNsYXNzTmFtZSA9IChjbGFzc05hbWUgKyAoc3RhdGUgPyAnICcgKyBuYW1lIDogJycpKS5yZXBsYWNlKFJfU1BBQ0UsICcgJyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBjc3MoZWwsIHByb3AsIHZhbCkge1xuICB2YXIgc3R5bGUgPSBlbCAmJiBlbC5zdHlsZTtcbiAgaWYgKHN0eWxlKSB7XG4gICAgaWYgKHZhbCA9PT0gdm9pZCAwKSB7XG4gICAgICBpZiAoZG9jdW1lbnQuZGVmYXVsdFZpZXcgJiYgZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgICAgICB2YWwgPSBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCAnJyk7XG4gICAgICB9IGVsc2UgaWYgKGVsLmN1cnJlbnRTdHlsZSkge1xuICAgICAgICB2YWwgPSBlbC5jdXJyZW50U3R5bGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcCA9PT0gdm9pZCAwID8gdmFsIDogdmFsW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIShwcm9wIGluIHN0eWxlKSAmJiBwcm9wLmluZGV4T2YoJ3dlYmtpdCcpID09PSAtMSkge1xuICAgICAgICBwcm9wID0gJy13ZWJraXQtJyArIHByb3A7XG4gICAgICB9XG4gICAgICBzdHlsZVtwcm9wXSA9IHZhbCArICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/ICcnIDogJ3B4Jyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtYXRyaXgoZWwsIHNlbGZPbmx5KSB7XG4gIHZhciBhcHBsaWVkVHJhbnNmb3JtcyA9ICcnO1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gZWw7XG4gIH0gZWxzZSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IGNzcyhlbCwgJ3RyYW5zZm9ybScpO1xuICAgICAgaWYgKHRyYW5zZm9ybSAmJiB0cmFuc2Zvcm0gIT09ICdub25lJykge1xuICAgICAgICBhcHBsaWVkVHJhbnNmb3JtcyA9IHRyYW5zZm9ybSArICcgJyArIGFwcGxpZWRUcmFuc2Zvcm1zO1xuICAgICAgfVxuICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuICAgIH0gd2hpbGUgKCFzZWxmT25seSAmJiAoZWwgPSBlbC5wYXJlbnROb2RlKSk7XG4gIH1cbiAgdmFyIG1hdHJpeEZuID0gd2luZG93LkRPTU1hdHJpeCB8fCB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4IHx8IHdpbmRvdy5DU1NNYXRyaXggfHwgd2luZG93Lk1TQ1NTTWF0cml4O1xuICAvKmpzaGludCAtVzA1NiAqL1xuICByZXR1cm4gbWF0cml4Rm4gJiYgbmV3IG1hdHJpeEZuKGFwcGxpZWRUcmFuc2Zvcm1zKTtcbn1cbmZ1bmN0aW9uIGZpbmQoY3R4LCB0YWdOYW1lLCBpdGVyYXRvcikge1xuICBpZiAoY3R4KSB7XG4gICAgdmFyIGxpc3QgPSBjdHguZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSksXG4gICAgICBpID0gMCxcbiAgICAgIG4gPSBsaXN0Lmxlbmd0aDtcbiAgICBpZiAoaXRlcmF0b3IpIHtcbiAgICAgIGZvciAoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdG9yKGxpc3RbaV0sIGkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuICByZXR1cm4gW107XG59XG5mdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkge1xuICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQ7XG4gIGlmIChzY3JvbGxpbmdFbGVtZW50KSB7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxufVxuXG4vKipcclxuICogUmV0dXJucyB0aGUgXCJib3VuZGluZyBjbGllbnQgcmVjdFwiIG9mIGdpdmVuIGVsZW1lbnRcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgICAgICAgICAgICAgICAgICBUaGUgZWxlbWVudCB3aG9zZSBib3VuZGluZ0NsaWVudFJlY3QgaXMgd2FudGVkXHJcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gcmVsYXRpdmVUb0NvbnRhaW5pbmdCbG9jayAgV2hldGhlciB0aGUgcmVjdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGNvbnRhaW5pbmcgYmxvY2sgb2YgKGluY2x1ZGluZykgdGhlIGNvbnRhaW5lclxyXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQgIFdoZXRoZXIgdGhlIHJlY3Qgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSByZWxhdGl2ZSBwYXJlbnQgb2YgKGluY2x1ZGluZykgdGhlIGNvbnRhaWVuclxyXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IHVuZG9TY2FsZSAgICAgICAgICAgICAgICAgIFdoZXRoZXIgdGhlIGNvbnRhaW5lcidzIHNjYWxlKCkgc2hvdWxkIGJlIHVuZG9uZVxyXG4gKiBAcGFyYW0gIHtbSFRNTEVsZW1lbnRdfSBjb250YWluZXIgICAgICAgICAgICAgIFRoZSBwYXJlbnQgdGhlIGVsZW1lbnQgd2lsbCBiZSBwbGFjZWQgaW5cclxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgYm91bmRpbmdDbGllbnRSZWN0IG9mIGVsLCB3aXRoIHNwZWNpZmllZCBhZGp1c3RtZW50c1xyXG4gKi9cbmZ1bmN0aW9uIGdldFJlY3QoZWwsIHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2ssIHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQsIHVuZG9TY2FsZSwgY29udGFpbmVyKSB7XG4gIGlmICghZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIGVsICE9PSB3aW5kb3cpIHJldHVybjtcbiAgdmFyIGVsUmVjdCwgdG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0LCBoZWlnaHQsIHdpZHRoO1xuICBpZiAoZWwgIT09IHdpbmRvdyAmJiBlbC5wYXJlbnROb2RlICYmIGVsICE9PSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkpIHtcbiAgICBlbFJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB0b3AgPSBlbFJlY3QudG9wO1xuICAgIGxlZnQgPSBlbFJlY3QubGVmdDtcbiAgICBib3R0b20gPSBlbFJlY3QuYm90dG9tO1xuICAgIHJpZ2h0ID0gZWxSZWN0LnJpZ2h0O1xuICAgIGhlaWdodCA9IGVsUmVjdC5oZWlnaHQ7XG4gICAgd2lkdGggPSBlbFJlY3Qud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gMDtcbiAgICBsZWZ0ID0gMDtcbiAgICBib3R0b20gPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgcmlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgfVxuICBpZiAoKHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2sgfHwgcmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCkgJiYgZWwgIT09IHdpbmRvdykge1xuICAgIC8vIEFkanVzdCBmb3IgdHJhbnNsYXRlKClcbiAgICBjb250YWluZXIgPSBjb250YWluZXIgfHwgZWwucGFyZW50Tm9kZTtcblxuICAgIC8vIHNvbHZlcyAjMTEyMyAoc2VlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzc5NTM4MDYvNjA4ODMxMilcbiAgICAvLyBOb3QgbmVlZGVkIG9uIDw9IElFMTFcbiAgICBpZiAoIUlFMTFPckxlc3MpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIChjc3MoY29udGFpbmVyLCAndHJhbnNmb3JtJykgIT09ICdub25lJyB8fCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50ICYmIGNzcyhjb250YWluZXIsICdwb3NpdGlvbicpICE9PSAnc3RhdGljJykpIHtcbiAgICAgICAgICB2YXIgY29udGFpbmVyUmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgIC8vIFNldCByZWxhdGl2ZSB0byBlZGdlcyBvZiBwYWRkaW5nIGJveCBvZiBjb250YWluZXJcbiAgICAgICAgICB0b3AgLT0gY29udGFpbmVyUmVjdC50b3AgKyBwYXJzZUludChjc3MoY29udGFpbmVyLCAnYm9yZGVyLXRvcC13aWR0aCcpKTtcbiAgICAgICAgICBsZWZ0IC09IGNvbnRhaW5lclJlY3QubGVmdCArIHBhcnNlSW50KGNzcyhjb250YWluZXIsICdib3JkZXItbGVmdC13aWR0aCcpKTtcbiAgICAgICAgICBib3R0b20gPSB0b3AgKyBlbFJlY3QuaGVpZ2h0O1xuICAgICAgICAgIHJpZ2h0ID0gbGVmdCArIGVsUmVjdC53aWR0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG4gICAgICB9IHdoaWxlIChjb250YWluZXIgPSBjb250YWluZXIucGFyZW50Tm9kZSk7XG4gICAgfVxuICB9XG4gIGlmICh1bmRvU2NhbGUgJiYgZWwgIT09IHdpbmRvdykge1xuICAgIC8vIEFkanVzdCBmb3Igc2NhbGUoKVxuICAgIHZhciBlbE1hdHJpeCA9IG1hdHJpeChjb250YWluZXIgfHwgZWwpLFxuICAgICAgc2NhbGVYID0gZWxNYXRyaXggJiYgZWxNYXRyaXguYSxcbiAgICAgIHNjYWxlWSA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmQ7XG4gICAgaWYgKGVsTWF0cml4KSB7XG4gICAgICB0b3AgLz0gc2NhbGVZO1xuICAgICAgbGVmdCAvPSBzY2FsZVg7XG4gICAgICB3aWR0aCAvPSBzY2FsZVg7XG4gICAgICBoZWlnaHQgLz0gc2NhbGVZO1xuICAgICAgYm90dG9tID0gdG9wICsgaGVpZ2h0O1xuICAgICAgcmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdG9wOiB0b3AsXG4gICAgbGVmdDogbGVmdCxcbiAgICBib3R0b206IGJvdHRvbSxcbiAgICByaWdodDogcmlnaHQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG5cbi8qKlxyXG4gKiBDaGVja3MgaWYgYSBzaWRlIG9mIGFuIGVsZW1lbnQgaXMgc2Nyb2xsZWQgcGFzdCBhIHNpZGUgb2YgaXRzIHBhcmVudHNcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbCAgICAgICAgICAgVGhlIGVsZW1lbnQgd2hvJ3Mgc2lkZSBiZWluZyBzY3JvbGxlZCBvdXQgb2YgdmlldyBpcyBpbiBxdWVzdGlvblxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgIGVsU2lkZSAgICAgICBTaWRlIG9mIHRoZSBlbGVtZW50IGluIHF1ZXN0aW9uICgndG9wJywgJ2xlZnQnLCAncmlnaHQnLCAnYm90dG9tJylcclxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICBwYXJlbnRTaWRlICAgU2lkZSBvZiB0aGUgcGFyZW50IGluIHF1ZXN0aW9uICgndG9wJywgJ2xlZnQnLCAncmlnaHQnLCAnYm90dG9tJylcclxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9ICAgICAgICAgICAgICAgVGhlIHBhcmVudCBzY3JvbGwgZWxlbWVudCB0aGF0IHRoZSBlbCdzIHNpZGUgaXMgc2Nyb2xsZWQgcGFzdCwgb3IgbnVsbCBpZiB0aGVyZSBpcyBubyBzdWNoIGVsZW1lbnRcclxuICovXG5mdW5jdGlvbiBpc1Njcm9sbGVkUGFzdChlbCwgZWxTaWRlLCBwYXJlbnRTaWRlKSB7XG4gIHZhciBwYXJlbnQgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbCwgdHJ1ZSksXG4gICAgZWxTaWRlVmFsID0gZ2V0UmVjdChlbClbZWxTaWRlXTtcblxuICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICB2YXIgcGFyZW50U2lkZVZhbCA9IGdldFJlY3QocGFyZW50KVtwYXJlbnRTaWRlXSxcbiAgICAgIHZpc2libGUgPSB2b2lkIDA7XG4gICAgaWYgKHBhcmVudFNpZGUgPT09ICd0b3AnIHx8IHBhcmVudFNpZGUgPT09ICdsZWZ0Jykge1xuICAgICAgdmlzaWJsZSA9IGVsU2lkZVZhbCA+PSBwYXJlbnRTaWRlVmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2aXNpYmxlID0gZWxTaWRlVmFsIDw9IHBhcmVudFNpZGVWYWw7XG4gICAgfVxuICAgIGlmICghdmlzaWJsZSkgcmV0dXJuIHBhcmVudDtcbiAgICBpZiAocGFyZW50ID09PSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkpIGJyZWFrO1xuICAgIHBhcmVudCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KHBhcmVudCwgZmFsc2UpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXHJcbiAqIEdldHMgbnRoIGNoaWxkIG9mIGVsLCBpZ25vcmluZyBoaWRkZW4gY2hpbGRyZW4sIHNvcnRhYmxlJ3MgZWxlbWVudHMgKGRvZXMgbm90IGlnbm9yZSBjbG9uZSBpZiBpdCdzIHZpc2libGUpXHJcbiAqIGFuZCBub24tZHJhZ2dhYmxlIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICAgICBUaGUgcGFyZW50IGVsZW1lbnRcclxuICogQHBhcmFtICB7TnVtYmVyfSBjaGlsZE51bSAgICAgIFRoZSBpbmRleCBvZiB0aGUgY2hpbGRcclxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zICAgICAgIFBhcmVudCBTb3J0YWJsZSdzIG9wdGlvbnNcclxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9ICAgICAgICAgIFRoZSBjaGlsZCBhdCBpbmRleCBjaGlsZE51bSwgb3IgbnVsbCBpZiBub3QgZm91bmRcclxuICovXG5mdW5jdGlvbiBnZXRDaGlsZChlbCwgY2hpbGROdW0sIG9wdGlvbnMsIGluY2x1ZGVEcmFnRWwpIHtcbiAgdmFyIGN1cnJlbnRDaGlsZCA9IDAsXG4gICAgaSA9IDAsXG4gICAgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcbiAgd2hpbGUgKGkgPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBpZiAoY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnICYmIGNoaWxkcmVuW2ldICE9PSBTb3J0YWJsZS5naG9zdCAmJiAoaW5jbHVkZURyYWdFbCB8fCBjaGlsZHJlbltpXSAhPT0gU29ydGFibGUuZHJhZ2dlZCkgJiYgY2xvc2VzdChjaGlsZHJlbltpXSwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsLCBmYWxzZSkpIHtcbiAgICAgIGlmIChjdXJyZW50Q2hpbGQgPT09IGNoaWxkTnVtKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbltpXTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRDaGlsZCsrO1xuICAgIH1cbiAgICBpKys7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxyXG4gKiBHZXRzIHRoZSBsYXN0IGNoaWxkIGluIHRoZSBlbCwgaWdub3JpbmcgZ2hvc3RFbCBvciBpbnZpc2libGUgZWxlbWVudHMgKGNsb25lcylcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgIFBhcmVudCBlbGVtZW50XHJcbiAqIEBwYXJhbSAge3NlbGVjdG9yfSBzZWxlY3RvciAgICBBbnkgb3RoZXIgZWxlbWVudHMgdGhhdCBzaG91bGQgYmUgaWdub3JlZFxyXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICAgICAgICAgVGhlIGxhc3QgY2hpbGQsIGlnbm9yaW5nIGdob3N0RWxcclxuICovXG5mdW5jdGlvbiBsYXN0Q2hpbGQoZWwsIHNlbGVjdG9yKSB7XG4gIHZhciBsYXN0ID0gZWwubGFzdEVsZW1lbnRDaGlsZDtcbiAgd2hpbGUgKGxhc3QgJiYgKGxhc3QgPT09IFNvcnRhYmxlLmdob3N0IHx8IGNzcyhsYXN0LCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgc2VsZWN0b3IgJiYgIW1hdGNoZXMobGFzdCwgc2VsZWN0b3IpKSkge1xuICAgIGxhc3QgPSBsYXN0LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIGxhc3QgfHwgbnVsbDtcbn1cblxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGluZGV4IG9mIGFuIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnQgZm9yIGEgc2VsZWN0ZWQgc2V0IG9mXHJcbiAqIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbFxyXG4gKiBAcGFyYW0gIHtzZWxlY3Rvcn0gc2VsZWN0b3JcclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cbmZ1bmN0aW9uIGluZGV4KGVsLCBzZWxlY3Rvcikge1xuICB2YXIgaW5kZXggPSAwO1xuICBpZiAoIWVsIHx8ICFlbC5wYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuICB3aGlsZSAoZWwgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgaWYgKGVsLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgIT09ICdURU1QTEFURScgJiYgZWwgIT09IFNvcnRhYmxlLmNsb25lICYmICghc2VsZWN0b3IgfHwgbWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSkge1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufVxuXG4vKipcclxuICogUmV0dXJucyB0aGUgc2Nyb2xsIG9mZnNldCBvZiB0aGUgZ2l2ZW4gZWxlbWVudCwgYWRkZWQgd2l0aCBhbGwgdGhlIHNjcm9sbCBvZmZzZXRzIG9mIHBhcmVudCBlbGVtZW50cy5cclxuICogVGhlIHZhbHVlIGlzIHJldHVybmVkIGluIHJlYWwgcGl4ZWxzLlxyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWxcclxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICAgIE9mZnNldHMgaW4gdGhlIGZvcm1hdCBvZiBbbGVmdCwgdG9wXVxyXG4gKi9cbmZ1bmN0aW9uIGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGVsKSB7XG4gIHZhciBvZmZzZXRMZWZ0ID0gMCxcbiAgICBvZmZzZXRUb3AgPSAwLFxuICAgIHdpblNjcm9sbGVyID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICBpZiAoZWwpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgZWxNYXRyaXggPSBtYXRyaXgoZWwpLFxuICAgICAgICBzY2FsZVggPSBlbE1hdHJpeC5hLFxuICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeC5kO1xuICAgICAgb2Zmc2V0TGVmdCArPSBlbC5zY3JvbGxMZWZ0ICogc2NhbGVYO1xuICAgICAgb2Zmc2V0VG9wICs9IGVsLnNjcm9sbFRvcCAqIHNjYWxlWTtcbiAgICB9IHdoaWxlIChlbCAhPT0gd2luU2Nyb2xsZXIgJiYgKGVsID0gZWwucGFyZW50Tm9kZSkpO1xuICB9XG4gIHJldHVybiBbb2Zmc2V0TGVmdCwgb2Zmc2V0VG9wXTtcbn1cblxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBvYmplY3Qgd2l0aGluIHRoZSBnaXZlbiBhcnJheVxyXG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyICAgQXJyYXkgdGhhdCBtYXkgb3IgbWF5IG5vdCBob2xkIHRoZSBvYmplY3RcclxuICogQHBhcmFtICB7T2JqZWN0fSBvYmogIEFuIG9iamVjdCB0aGF0IGhhcyBhIGtleS12YWx1ZSBwYWlyIHVuaXF1ZSB0byBhbmQgaWRlbnRpY2FsIHRvIGEga2V5LXZhbHVlIHBhaXIgaW4gdGhlIG9iamVjdCB5b3Ugd2FudCB0byBmaW5kXHJcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICBUaGUgaW5kZXggb2YgdGhlIG9iamVjdCBpbiB0aGUgYXJyYXksIG9yIC0xXHJcbiAqL1xuZnVuY3Rpb24gaW5kZXhPZk9iamVjdChhcnIsIG9iaikge1xuICBmb3IgKHZhciBpIGluIGFycikge1xuICAgIGlmICghYXJyLmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkgJiYgb2JqW2tleV0gPT09IGFycltpXVtrZXldKSByZXR1cm4gTnVtYmVyKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5mdW5jdGlvbiBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbCwgaW5jbHVkZVNlbGYpIHtcbiAgLy8gc2tpcCB0byB3aW5kb3dcbiAgaWYgKCFlbCB8fCAhZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICB2YXIgZWxlbSA9IGVsO1xuICB2YXIgZ290U2VsZiA9IGZhbHNlO1xuICBkbyB7XG4gICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBnZXQgZWxlbSBjc3MgaWYgaXQgaXNuJ3QgZXZlbiBvdmVyZmxvd2luZyBpbiB0aGUgZmlyc3QgcGxhY2UgKHBlcmZvcm1hbmNlKVxuICAgIGlmIChlbGVtLmNsaWVudFdpZHRoIDwgZWxlbS5zY3JvbGxXaWR0aCB8fCBlbGVtLmNsaWVudEhlaWdodCA8IGVsZW0uc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB2YXIgZWxlbUNTUyA9IGNzcyhlbGVtKTtcbiAgICAgIGlmIChlbGVtLmNsaWVudFdpZHRoIDwgZWxlbS5zY3JvbGxXaWR0aCAmJiAoZWxlbUNTUy5vdmVyZmxvd1ggPT0gJ2F1dG8nIHx8IGVsZW1DU1Mub3ZlcmZsb3dYID09ICdzY3JvbGwnKSB8fCBlbGVtLmNsaWVudEhlaWdodCA8IGVsZW0uc2Nyb2xsSGVpZ2h0ICYmIChlbGVtQ1NTLm92ZXJmbG93WSA9PSAnYXV0bycgfHwgZWxlbUNTUy5vdmVyZmxvd1kgPT0gJ3Njcm9sbCcpKSB7XG4gICAgICAgIGlmICghZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgfHwgZWxlbSA9PT0gZG9jdW1lbnQuYm9keSkgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgICAgICAgaWYgKGdvdFNlbGYgfHwgaW5jbHVkZVNlbGYpIHJldHVybiBlbGVtO1xuICAgICAgICBnb3RTZWxmID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuICB9IHdoaWxlIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKTtcbiAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZChkc3QsIHNyYykge1xuICBpZiAoZHN0ICYmIHNyYykge1xuICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICAgIGlmIChzcmMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBkc3Rba2V5XSA9IHNyY1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZHN0O1xufVxuZnVuY3Rpb24gaXNSZWN0RXF1YWwocmVjdDEsIHJlY3QyKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHJlY3QxLnRvcCkgPT09IE1hdGgucm91bmQocmVjdDIudG9wKSAmJiBNYXRoLnJvdW5kKHJlY3QxLmxlZnQpID09PSBNYXRoLnJvdW5kKHJlY3QyLmxlZnQpICYmIE1hdGgucm91bmQocmVjdDEuaGVpZ2h0KSA9PT0gTWF0aC5yb3VuZChyZWN0Mi5oZWlnaHQpICYmIE1hdGgucm91bmQocmVjdDEud2lkdGgpID09PSBNYXRoLnJvdW5kKHJlY3QyLndpZHRoKTtcbn1cbnZhciBfdGhyb3R0bGVUaW1lb3V0O1xuZnVuY3Rpb24gdGhyb3R0bGUoY2FsbGJhY2ssIG1zKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfdGhyb3R0bGVUaW1lb3V0KSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwoX3RoaXMsIGFyZ3NbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2suYXBwbHkoX3RoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgX3Rocm90dGxlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhyb3R0bGVUaW1lb3V0ID0gdm9pZCAwO1xuICAgICAgfSwgbXMpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNhbmNlbFRocm90dGxlKCkge1xuICBjbGVhclRpbWVvdXQoX3Rocm90dGxlVGltZW91dCk7XG4gIF90aHJvdHRsZVRpbWVvdXQgPSB2b2lkIDA7XG59XG5mdW5jdGlvbiBzY3JvbGxCeShlbCwgeCwgeSkge1xuICBlbC5zY3JvbGxMZWZ0ICs9IHg7XG4gIGVsLnNjcm9sbFRvcCArPSB5O1xufVxuZnVuY3Rpb24gY2xvbmUoZWwpIHtcbiAgdmFyIFBvbHltZXIgPSB3aW5kb3cuUG9seW1lcjtcbiAgdmFyICQgPSB3aW5kb3cualF1ZXJ5IHx8IHdpbmRvdy5aZXB0bztcbiAgaWYgKFBvbHltZXIgJiYgUG9seW1lci5kb20pIHtcbiAgICByZXR1cm4gUG9seW1lci5kb20oZWwpLmNsb25lTm9kZSh0cnVlKTtcbiAgfSBlbHNlIGlmICgkKSB7XG4gICAgcmV0dXJuICQoZWwpLmNsb25lKHRydWUpWzBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbC5jbG9uZU5vZGUodHJ1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFJlY3QoZWwsIHJlY3QpIHtcbiAgY3NzKGVsLCAncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgY3NzKGVsLCAndG9wJywgcmVjdC50b3ApO1xuICBjc3MoZWwsICdsZWZ0JywgcmVjdC5sZWZ0KTtcbiAgY3NzKGVsLCAnd2lkdGgnLCByZWN0LndpZHRoKTtcbiAgY3NzKGVsLCAnaGVpZ2h0JywgcmVjdC5oZWlnaHQpO1xufVxuZnVuY3Rpb24gdW5zZXRSZWN0KGVsKSB7XG4gIGNzcyhlbCwgJ3Bvc2l0aW9uJywgJycpO1xuICBjc3MoZWwsICd0b3AnLCAnJyk7XG4gIGNzcyhlbCwgJ2xlZnQnLCAnJyk7XG4gIGNzcyhlbCwgJ3dpZHRoJywgJycpO1xuICBjc3MoZWwsICdoZWlnaHQnLCAnJyk7XG59XG5mdW5jdGlvbiBnZXRDaGlsZENvbnRhaW5pbmdSZWN0RnJvbUVsZW1lbnQoY29udGFpbmVyLCBvcHRpb25zLCBnaG9zdEVsKSB7XG4gIHZhciByZWN0ID0ge307XG4gIEFycmF5LmZyb20oY29udGFpbmVyLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHZhciBfcmVjdCRsZWZ0LCBfcmVjdCR0b3AsIF9yZWN0JHJpZ2h0LCBfcmVjdCRib3R0b207XG4gICAgaWYgKCFjbG9zZXN0KGNoaWxkLCBvcHRpb25zLmRyYWdnYWJsZSwgY29udGFpbmVyLCBmYWxzZSkgfHwgY2hpbGQuYW5pbWF0ZWQgfHwgY2hpbGQgPT09IGdob3N0RWwpIHJldHVybjtcbiAgICB2YXIgY2hpbGRSZWN0ID0gZ2V0UmVjdChjaGlsZCk7XG4gICAgcmVjdC5sZWZ0ID0gTWF0aC5taW4oKF9yZWN0JGxlZnQgPSByZWN0LmxlZnQpICE9PSBudWxsICYmIF9yZWN0JGxlZnQgIT09IHZvaWQgMCA/IF9yZWN0JGxlZnQgOiBJbmZpbml0eSwgY2hpbGRSZWN0LmxlZnQpO1xuICAgIHJlY3QudG9wID0gTWF0aC5taW4oKF9yZWN0JHRvcCA9IHJlY3QudG9wKSAhPT0gbnVsbCAmJiBfcmVjdCR0b3AgIT09IHZvaWQgMCA/IF9yZWN0JHRvcCA6IEluZmluaXR5LCBjaGlsZFJlY3QudG9wKTtcbiAgICByZWN0LnJpZ2h0ID0gTWF0aC5tYXgoKF9yZWN0JHJpZ2h0ID0gcmVjdC5yaWdodCkgIT09IG51bGwgJiYgX3JlY3QkcmlnaHQgIT09IHZvaWQgMCA/IF9yZWN0JHJpZ2h0IDogLUluZmluaXR5LCBjaGlsZFJlY3QucmlnaHQpO1xuICAgIHJlY3QuYm90dG9tID0gTWF0aC5tYXgoKF9yZWN0JGJvdHRvbSA9IHJlY3QuYm90dG9tKSAhPT0gbnVsbCAmJiBfcmVjdCRib3R0b20gIT09IHZvaWQgMCA/IF9yZWN0JGJvdHRvbSA6IC1JbmZpbml0eSwgY2hpbGRSZWN0LmJvdHRvbSk7XG4gIH0pO1xuICByZWN0LndpZHRoID0gcmVjdC5yaWdodCAtIHJlY3QubGVmdDtcbiAgcmVjdC5oZWlnaHQgPSByZWN0LmJvdHRvbSAtIHJlY3QudG9wO1xuICByZWN0LnggPSByZWN0LmxlZnQ7XG4gIHJlY3QueSA9IHJlY3QudG9wO1xuICByZXR1cm4gcmVjdDtcbn1cbnZhciBleHBhbmRvID0gJ1NvcnRhYmxlJyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG5mdW5jdGlvbiBBbmltYXRpb25TdGF0ZU1hbmFnZXIoKSB7XG4gIHZhciBhbmltYXRpb25TdGF0ZXMgPSBbXSxcbiAgICBhbmltYXRpb25DYWxsYmFja0lkO1xuICByZXR1cm4ge1xuICAgIGNhcHR1cmVBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gY2FwdHVyZUFuaW1hdGlvblN0YXRlKCkge1xuICAgICAgYW5pbWF0aW9uU3RhdGVzID0gW107XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbmltYXRpb24pIHJldHVybjtcbiAgICAgIHZhciBjaGlsZHJlbiA9IFtdLnNsaWNlLmNhbGwodGhpcy5lbC5jaGlsZHJlbik7XG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY3NzKGNoaWxkLCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgY2hpbGQgPT09IFNvcnRhYmxlLmdob3N0KSByZXR1cm47XG4gICAgICAgIGFuaW1hdGlvblN0YXRlcy5wdXNoKHtcbiAgICAgICAgICB0YXJnZXQ6IGNoaWxkLFxuICAgICAgICAgIHJlY3Q6IGdldFJlY3QoY2hpbGQpXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZnJvbVJlY3QgPSBfb2JqZWN0U3ByZWFkMih7fSwgYW5pbWF0aW9uU3RhdGVzW2FuaW1hdGlvblN0YXRlcy5sZW5ndGggLSAxXS5yZWN0KTtcblxuICAgICAgICAvLyBJZiBhbmltYXRpbmc6IGNvbXBlbnNhdGUgZm9yIGN1cnJlbnQgYW5pbWF0aW9uXG4gICAgICAgIGlmIChjaGlsZC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICB2YXIgY2hpbGRNYXRyaXggPSBtYXRyaXgoY2hpbGQsIHRydWUpO1xuICAgICAgICAgIGlmIChjaGlsZE1hdHJpeCkge1xuICAgICAgICAgICAgZnJvbVJlY3QudG9wIC09IGNoaWxkTWF0cml4LmY7XG4gICAgICAgICAgICBmcm9tUmVjdC5sZWZ0IC09IGNoaWxkTWF0cml4LmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoaWxkLmZyb21SZWN0ID0gZnJvbVJlY3Q7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGFkZEFuaW1hdGlvblN0YXRlOiBmdW5jdGlvbiBhZGRBbmltYXRpb25TdGF0ZShzdGF0ZSkge1xuICAgICAgYW5pbWF0aW9uU3RhdGVzLnB1c2goc3RhdGUpO1xuICAgIH0sXG4gICAgcmVtb3ZlQW5pbWF0aW9uU3RhdGU6IGZ1bmN0aW9uIHJlbW92ZUFuaW1hdGlvblN0YXRlKHRhcmdldCkge1xuICAgICAgYW5pbWF0aW9uU3RhdGVzLnNwbGljZShpbmRleE9mT2JqZWN0KGFuaW1hdGlvblN0YXRlcywge1xuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSksIDEpO1xuICAgIH0sXG4gICAgYW5pbWF0ZUFsbDogZnVuY3Rpb24gYW5pbWF0ZUFsbChjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICBjbGVhclRpbWVvdXQoYW5pbWF0aW9uQ2FsbGJhY2tJZCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBhbmltYXRpbmcgPSBmYWxzZSxcbiAgICAgICAgYW5pbWF0aW9uVGltZSA9IDA7XG4gICAgICBhbmltYXRpb25TdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIHRpbWUgPSAwLFxuICAgICAgICAgIHRhcmdldCA9IHN0YXRlLnRhcmdldCxcbiAgICAgICAgICBmcm9tUmVjdCA9IHRhcmdldC5mcm9tUmVjdCxcbiAgICAgICAgICB0b1JlY3QgPSBnZXRSZWN0KHRhcmdldCksXG4gICAgICAgICAgcHJldkZyb21SZWN0ID0gdGFyZ2V0LnByZXZGcm9tUmVjdCxcbiAgICAgICAgICBwcmV2VG9SZWN0ID0gdGFyZ2V0LnByZXZUb1JlY3QsXG4gICAgICAgICAgYW5pbWF0aW5nUmVjdCA9IHN0YXRlLnJlY3QsXG4gICAgICAgICAgdGFyZ2V0TWF0cml4ID0gbWF0cml4KHRhcmdldCwgdHJ1ZSk7XG4gICAgICAgIGlmICh0YXJnZXRNYXRyaXgpIHtcbiAgICAgICAgICAvLyBDb21wZW5zYXRlIGZvciBjdXJyZW50IGFuaW1hdGlvblxuICAgICAgICAgIHRvUmVjdC50b3AgLT0gdGFyZ2V0TWF0cml4LmY7XG4gICAgICAgICAgdG9SZWN0LmxlZnQgLT0gdGFyZ2V0TWF0cml4LmU7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0LnRvUmVjdCA9IHRvUmVjdDtcbiAgICAgICAgaWYgKHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICAvLyBDb3VsZCBhbHNvIGNoZWNrIGlmIGFuaW1hdGluZ1JlY3QgaXMgYmV0d2VlbiBmcm9tUmVjdCBhbmQgdG9SZWN0XG4gICAgICAgICAgaWYgKGlzUmVjdEVxdWFsKHByZXZGcm9tUmVjdCwgdG9SZWN0KSAmJiAhaXNSZWN0RXF1YWwoZnJvbVJlY3QsIHRvUmVjdCkgJiZcbiAgICAgICAgICAvLyBNYWtlIHN1cmUgYW5pbWF0aW5nUmVjdCBpcyBvbiBsaW5lIGJldHdlZW4gdG9SZWN0ICYgZnJvbVJlY3RcbiAgICAgICAgICAoYW5pbWF0aW5nUmVjdC50b3AgLSB0b1JlY3QudG9wKSAvIChhbmltYXRpbmdSZWN0LmxlZnQgLSB0b1JlY3QubGVmdCkgPT09IChmcm9tUmVjdC50b3AgLSB0b1JlY3QudG9wKSAvIChmcm9tUmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQpKSB7XG4gICAgICAgICAgICAvLyBJZiByZXR1cm5pbmcgdG8gc2FtZSBwbGFjZSBhcyBzdGFydGVkIGZyb20gYW5pbWF0aW9uIGFuZCBvbiBzYW1lIGF4aXNcbiAgICAgICAgICAgIHRpbWUgPSBjYWxjdWxhdGVSZWFsVGltZShhbmltYXRpbmdSZWN0LCBwcmV2RnJvbVJlY3QsIHByZXZUb1JlY3QsIF90aGlzLm9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIGZyb21SZWN0ICE9IHRvUmVjdDogYW5pbWF0ZVxuICAgICAgICBpZiAoIWlzUmVjdEVxdWFsKHRvUmVjdCwgZnJvbVJlY3QpKSB7XG4gICAgICAgICAgdGFyZ2V0LnByZXZGcm9tUmVjdCA9IGZyb21SZWN0O1xuICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gdG9SZWN0O1xuICAgICAgICAgIGlmICghdGltZSkge1xuICAgICAgICAgICAgdGltZSA9IF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpcy5hbmltYXRlKHRhcmdldCwgYW5pbWF0aW5nUmVjdCwgdG9SZWN0LCB0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZSkge1xuICAgICAgICAgIGFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgYW5pbWF0aW9uVGltZSA9IE1hdGgubWF4KGFuaW1hdGlvblRpbWUsIHRpbWUpO1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0aW9uUmVzZXRUaW1lcik7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGlvblJlc2V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRhcmdldC5hbmltYXRpb25UaW1lID0gMDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2RnJvbVJlY3QgPSBudWxsO1xuICAgICAgICAgICAgdGFyZ2V0LmZyb21SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgIH0sIHRpbWUpO1xuICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSB0aW1lO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNsZWFyVGltZW91dChhbmltYXRpb25DYWxsYmFja0lkKTtcbiAgICAgIGlmICghYW5pbWF0aW5nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmltYXRpb25DYWxsYmFja0lkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICAgICAgfSwgYW5pbWF0aW9uVGltZSk7XG4gICAgICB9XG4gICAgICBhbmltYXRpb25TdGF0ZXMgPSBbXTtcbiAgICB9LFxuICAgIGFuaW1hdGU6IGZ1bmN0aW9uIGFuaW1hdGUodGFyZ2V0LCBjdXJyZW50UmVjdCwgdG9SZWN0LCBkdXJhdGlvbikge1xuICAgICAgaWYgKGR1cmF0aW9uKSB7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJycpO1xuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJycpO1xuICAgICAgICB2YXIgZWxNYXRyaXggPSBtYXRyaXgodGhpcy5lbCksXG4gICAgICAgICAgc2NhbGVYID0gZWxNYXRyaXggJiYgZWxNYXRyaXguYSxcbiAgICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeCAmJiBlbE1hdHJpeC5kLFxuICAgICAgICAgIHRyYW5zbGF0ZVggPSAoY3VycmVudFJlY3QubGVmdCAtIHRvUmVjdC5sZWZ0KSAvIChzY2FsZVggfHwgMSksXG4gICAgICAgICAgdHJhbnNsYXRlWSA9IChjdXJyZW50UmVjdC50b3AgLSB0b1JlY3QudG9wKSAvIChzY2FsZVkgfHwgMSk7XG4gICAgICAgIHRhcmdldC5hbmltYXRpbmdYID0gISF0cmFuc2xhdGVYO1xuICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWSA9ICEhdHJhbnNsYXRlWTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgnICsgdHJhbnNsYXRlWCArICdweCwnICsgdHJhbnNsYXRlWSArICdweCwwKScpO1xuICAgICAgICB0aGlzLmZvclJlcGFpbnREdW1teSA9IHJlcGFpbnQodGFyZ2V0KTsgLy8gcmVwYWludFxuXG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJ3RyYW5zZm9ybSAnICsgZHVyYXRpb24gKyAnbXMnICsgKHRoaXMub3B0aW9ucy5lYXNpbmcgPyAnICcgKyB0aGlzLm9wdGlvbnMuZWFzaW5nIDogJycpKTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgwLDAsMCknKTtcbiAgICAgICAgdHlwZW9mIHRhcmdldC5hbmltYXRlZCA9PT0gJ251bWJlcicgJiYgY2xlYXJUaW1lb3V0KHRhcmdldC5hbmltYXRlZCk7XG4gICAgICAgIHRhcmdldC5hbmltYXRlZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJycpO1xuICAgICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGVkID0gZmFsc2U7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1ggPSBmYWxzZTtcbiAgICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWSA9IGZhbHNlO1xuICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gcmVwYWludCh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5vZmZzZXRXaWR0aDtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZVJlYWxUaW1lKGFuaW1hdGluZ1JlY3QsIGZyb21SZWN0LCB0b1JlY3QsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhmcm9tUmVjdC50b3AgLSBhbmltYXRpbmdSZWN0LnRvcCwgMikgKyBNYXRoLnBvdyhmcm9tUmVjdC5sZWZ0IC0gYW5pbWF0aW5nUmVjdC5sZWZ0LCAyKSkgLyBNYXRoLnNxcnQoTWF0aC5wb3coZnJvbVJlY3QudG9wIC0gdG9SZWN0LnRvcCwgMikgKyBNYXRoLnBvdyhmcm9tUmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQsIDIpKSAqIG9wdGlvbnMuYW5pbWF0aW9uO1xufVxuXG52YXIgcGx1Z2lucyA9IFtdO1xudmFyIGRlZmF1bHRzID0ge1xuICBpbml0aWFsaXplQnlEZWZhdWx0OiB0cnVlXG59O1xudmFyIFBsdWdpbk1hbmFnZXIgPSB7XG4gIG1vdW50OiBmdW5jdGlvbiBtb3VudChwbHVnaW4pIHtcbiAgICAvLyBTZXQgZGVmYXVsdCBzdGF0aWMgcHJvcGVydGllc1xuICAgIGZvciAodmFyIG9wdGlvbiBpbiBkZWZhdWx0cykge1xuICAgICAgaWYgKGRlZmF1bHRzLmhhc093blByb3BlcnR5KG9wdGlvbikgJiYgIShvcHRpb24gaW4gcGx1Z2luKSkge1xuICAgICAgICBwbHVnaW5bb3B0aW9uXSA9IGRlZmF1bHRzW29wdGlvbl07XG4gICAgICB9XG4gICAgfVxuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgaWYgKHAucGx1Z2luTmFtZSA9PT0gcGx1Z2luLnBsdWdpbk5hbWUpIHtcbiAgICAgICAgdGhyb3cgXCJTb3J0YWJsZTogQ2Fubm90IG1vdW50IHBsdWdpbiBcIi5jb25jYXQocGx1Z2luLnBsdWdpbk5hbWUsIFwiIG1vcmUgdGhhbiBvbmNlXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHBsdWdpbnMucHVzaChwbHVnaW4pO1xuICB9LFxuICBwbHVnaW5FdmVudDogZnVuY3Rpb24gcGx1Z2luRXZlbnQoZXZlbnROYW1lLCBzb3J0YWJsZSwgZXZ0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLmV2ZW50Q2FuY2VsZWQgPSBmYWxzZTtcbiAgICBldnQuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuZXZlbnRDYW5jZWxlZCA9IHRydWU7XG4gICAgfTtcbiAgICB2YXIgZXZlbnROYW1lR2xvYmFsID0gZXZlbnROYW1lICsgJ0dsb2JhbCc7XG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIGlmICghc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdKSByZXR1cm47XG4gICAgICAvLyBGaXJlIGdsb2JhbCBldmVudHMgaWYgaXQgZXhpc3RzIGluIHRoaXMgc29ydGFibGVcbiAgICAgIGlmIChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lR2xvYmFsXSkge1xuICAgICAgICBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lR2xvYmFsXShfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlXG4gICAgICAgIH0sIGV2dCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBPbmx5IGZpcmUgcGx1Z2luIGV2ZW50IGlmIHBsdWdpbiBpcyBlbmFibGVkIGluIHRoaXMgc29ydGFibGUsXG4gICAgICAvLyBhbmQgcGx1Z2luIGhhcyBldmVudCBkZWZpbmVkXG4gICAgICBpZiAoc29ydGFibGUub3B0aW9uc1twbHVnaW4ucGx1Z2luTmFtZV0gJiYgc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZV0oX29iamVjdFNwcmVhZDIoe1xuICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZVxuICAgICAgICB9LCBldnQpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgaW5pdGlhbGl6ZVBsdWdpbnM6IGZ1bmN0aW9uIGluaXRpYWxpemVQbHVnaW5zKHNvcnRhYmxlLCBlbCwgZGVmYXVsdHMsIG9wdGlvbnMpIHtcbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgdmFyIHBsdWdpbk5hbWUgPSBwbHVnaW4ucGx1Z2luTmFtZTtcbiAgICAgIGlmICghc29ydGFibGUub3B0aW9uc1twbHVnaW5OYW1lXSAmJiAhcGx1Z2luLmluaXRpYWxpemVCeURlZmF1bHQpIHJldHVybjtcbiAgICAgIHZhciBpbml0aWFsaXplZCA9IG5ldyBwbHVnaW4oc29ydGFibGUsIGVsLCBzb3J0YWJsZS5vcHRpb25zKTtcbiAgICAgIGluaXRpYWxpemVkLnNvcnRhYmxlID0gc29ydGFibGU7XG4gICAgICBpbml0aWFsaXplZC5vcHRpb25zID0gc29ydGFibGUub3B0aW9ucztcbiAgICAgIHNvcnRhYmxlW3BsdWdpbk5hbWVdID0gaW5pdGlhbGl6ZWQ7XG5cbiAgICAgIC8vIEFkZCBkZWZhdWx0IG9wdGlvbnMgZnJvbSBwbHVnaW5cbiAgICAgIF9leHRlbmRzKGRlZmF1bHRzLCBpbml0aWFsaXplZC5kZWZhdWx0cyk7XG4gICAgfSk7XG4gICAgZm9yICh2YXIgb3B0aW9uIGluIHNvcnRhYmxlLm9wdGlvbnMpIHtcbiAgICAgIGlmICghc29ydGFibGUub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pKSBjb250aW51ZTtcbiAgICAgIHZhciBtb2RpZmllZCA9IHRoaXMubW9kaWZ5T3B0aW9uKHNvcnRhYmxlLCBvcHRpb24sIHNvcnRhYmxlLm9wdGlvbnNbb3B0aW9uXSk7XG4gICAgICBpZiAodHlwZW9mIG1vZGlmaWVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzb3J0YWJsZS5vcHRpb25zW29wdGlvbl0gPSBtb2RpZmllZDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGdldEV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZ2V0RXZlbnRQcm9wZXJ0aWVzKG5hbWUsIHNvcnRhYmxlKSB7XG4gICAgdmFyIGV2ZW50UHJvcGVydGllcyA9IHt9O1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICBpZiAodHlwZW9mIHBsdWdpbi5ldmVudFByb3BlcnRpZXMgIT09ICdmdW5jdGlvbicpIHJldHVybjtcbiAgICAgIF9leHRlbmRzKGV2ZW50UHJvcGVydGllcywgcGx1Z2luLmV2ZW50UHJvcGVydGllcy5jYWxsKHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSwgbmFtZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBldmVudFByb3BlcnRpZXM7XG4gIH0sXG4gIG1vZGlmeU9wdGlvbjogZnVuY3Rpb24gbW9kaWZ5T3B0aW9uKHNvcnRhYmxlLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBtb2RpZmllZFZhbHVlO1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICAvLyBQbHVnaW4gbXVzdCBleGlzdCBvbiB0aGUgU29ydGFibGVcbiAgICAgIGlmICghc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdKSByZXR1cm47XG5cbiAgICAgIC8vIElmIHN0YXRpYyBvcHRpb24gbGlzdGVuZXIgZXhpc3RzIGZvciB0aGlzIG9wdGlvbiwgY2FsbCBpbiB0aGUgY29udGV4dCBvZiB0aGUgU29ydGFibGUncyBpbnN0YW5jZSBvZiB0aGlzIHBsdWdpblxuICAgICAgaWYgKHBsdWdpbi5vcHRpb25MaXN0ZW5lcnMgJiYgdHlwZW9mIHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbW9kaWZpZWRWYWx1ZSA9IHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0uY2FsbChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbW9kaWZpZWRWYWx1ZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChfcmVmKSB7XG4gIHZhciBzb3J0YWJsZSA9IF9yZWYuc29ydGFibGUsXG4gICAgcm9vdEVsID0gX3JlZi5yb290RWwsXG4gICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICB0YXJnZXRFbCA9IF9yZWYudGFyZ2V0RWwsXG4gICAgY2xvbmVFbCA9IF9yZWYuY2xvbmVFbCxcbiAgICB0b0VsID0gX3JlZi50b0VsLFxuICAgIGZyb21FbCA9IF9yZWYuZnJvbUVsLFxuICAgIG9sZEluZGV4ID0gX3JlZi5vbGRJbmRleCxcbiAgICBuZXdJbmRleCA9IF9yZWYubmV3SW5kZXgsXG4gICAgb2xkRHJhZ2dhYmxlSW5kZXggPSBfcmVmLm9sZERyYWdnYWJsZUluZGV4LFxuICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gX3JlZi5uZXdEcmFnZ2FibGVJbmRleCxcbiAgICBvcmlnaW5hbEV2ZW50ID0gX3JlZi5vcmlnaW5hbEV2ZW50LFxuICAgIHB1dFNvcnRhYmxlID0gX3JlZi5wdXRTb3J0YWJsZSxcbiAgICBleHRyYUV2ZW50UHJvcGVydGllcyA9IF9yZWYuZXh0cmFFdmVudFByb3BlcnRpZXM7XG4gIHNvcnRhYmxlID0gc29ydGFibGUgfHwgcm9vdEVsICYmIHJvb3RFbFtleHBhbmRvXTtcbiAgaWYgKCFzb3J0YWJsZSkgcmV0dXJuO1xuICB2YXIgZXZ0LFxuICAgIG9wdGlvbnMgPSBzb3J0YWJsZS5vcHRpb25zLFxuICAgIG9uTmFtZSA9ICdvbicgKyBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSk7XG4gIC8vIFN1cHBvcnQgZm9yIG5ldyBDdXN0b21FdmVudCBmZWF0dXJlXG4gIGlmICh3aW5kb3cuQ3VzdG9tRXZlbnQgJiYgIUlFMTFPckxlc3MgJiYgIUVkZ2UpIHtcbiAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQobmFtZSwge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldnQuaW5pdEV2ZW50KG5hbWUsIHRydWUsIHRydWUpO1xuICB9XG4gIGV2dC50byA9IHRvRWwgfHwgcm9vdEVsO1xuICBldnQuZnJvbSA9IGZyb21FbCB8fCByb290RWw7XG4gIGV2dC5pdGVtID0gdGFyZ2V0RWwgfHwgcm9vdEVsO1xuICBldnQuY2xvbmUgPSBjbG9uZUVsO1xuICBldnQub2xkSW5kZXggPSBvbGRJbmRleDtcbiAgZXZ0Lm5ld0luZGV4ID0gbmV3SW5kZXg7XG4gIGV2dC5vbGREcmFnZ2FibGVJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICBldnQubmV3RHJhZ2dhYmxlSW5kZXggPSBuZXdEcmFnZ2FibGVJbmRleDtcbiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICBldnQucHVsbE1vZGUgPSBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLmxhc3RQdXRNb2RlIDogdW5kZWZpbmVkO1xuICB2YXIgYWxsRXZlbnRQcm9wZXJ0aWVzID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGV4dHJhRXZlbnRQcm9wZXJ0aWVzKSwgUGx1Z2luTWFuYWdlci5nZXRFdmVudFByb3BlcnRpZXMobmFtZSwgc29ydGFibGUpKTtcbiAgZm9yICh2YXIgb3B0aW9uIGluIGFsbEV2ZW50UHJvcGVydGllcykge1xuICAgIGV2dFtvcHRpb25dID0gYWxsRXZlbnRQcm9wZXJ0aWVzW29wdGlvbl07XG4gIH1cbiAgaWYgKHJvb3RFbCkge1xuICAgIHJvb3RFbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gIH1cbiAgaWYgKG9wdGlvbnNbb25OYW1lXSkge1xuICAgIG9wdGlvbnNbb25OYW1lXS5jYWxsKHNvcnRhYmxlLCBldnQpO1xuICB9XG59XG5cbnZhciBfZXhjbHVkZWQgPSBbXCJldnRcIl07XG52YXIgcGx1Z2luRXZlbnQgPSBmdW5jdGlvbiBwbHVnaW5FdmVudChldmVudE5hbWUsIHNvcnRhYmxlKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSxcbiAgICBvcmlnaW5hbEV2ZW50ID0gX3JlZi5ldnQsXG4gICAgZGF0YSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBfZXhjbHVkZWQpO1xuICBQbHVnaW5NYW5hZ2VyLnBsdWdpbkV2ZW50LmJpbmQoU29ydGFibGUpKGV2ZW50TmFtZSwgc29ydGFibGUsIF9vYmplY3RTcHJlYWQyKHtcbiAgICBkcmFnRWw6IGRyYWdFbCxcbiAgICBwYXJlbnRFbDogcGFyZW50RWwsXG4gICAgZ2hvc3RFbDogZ2hvc3RFbCxcbiAgICByb290RWw6IHJvb3RFbCxcbiAgICBuZXh0RWw6IG5leHRFbCxcbiAgICBsYXN0RG93bkVsOiBsYXN0RG93bkVsLFxuICAgIGNsb25lRWw6IGNsb25lRWwsXG4gICAgY2xvbmVIaWRkZW46IGNsb25lSGlkZGVuLFxuICAgIGRyYWdTdGFydGVkOiBtb3ZlZCxcbiAgICBwdXRTb3J0YWJsZTogcHV0U29ydGFibGUsXG4gICAgYWN0aXZlU29ydGFibGU6IFNvcnRhYmxlLmFjdGl2ZSxcbiAgICBvcmlnaW5hbEV2ZW50OiBvcmlnaW5hbEV2ZW50LFxuICAgIG9sZEluZGV4OiBvbGRJbmRleCxcbiAgICBvbGREcmFnZ2FibGVJbmRleDogb2xkRHJhZ2dhYmxlSW5kZXgsXG4gICAgbmV3SW5kZXg6IG5ld0luZGV4LFxuICAgIG5ld0RyYWdnYWJsZUluZGV4OiBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICBoaWRlR2hvc3RGb3JUYXJnZXQ6IF9oaWRlR2hvc3RGb3JUYXJnZXQsXG4gICAgdW5oaWRlR2hvc3RGb3JUYXJnZXQ6IF91bmhpZGVHaG9zdEZvclRhcmdldCxcbiAgICBjbG9uZU5vd0hpZGRlbjogZnVuY3Rpb24gY2xvbmVOb3dIaWRkZW4oKSB7XG4gICAgICBjbG9uZUhpZGRlbiA9IHRydWU7XG4gICAgfSxcbiAgICBjbG9uZU5vd1Nob3duOiBmdW5jdGlvbiBjbG9uZU5vd1Nob3duKCkge1xuICAgICAgY2xvbmVIaWRkZW4gPSBmYWxzZTtcbiAgICB9LFxuICAgIGRpc3BhdGNoU29ydGFibGVFdmVudDogZnVuY3Rpb24gZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KG5hbWUpIHtcbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBvcmlnaW5hbEV2ZW50XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIGRhdGEpKTtcbn07XG5mdW5jdGlvbiBfZGlzcGF0Y2hFdmVudChpbmZvKSB7XG4gIGRpc3BhdGNoRXZlbnQoX29iamVjdFNwcmVhZDIoe1xuICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZSxcbiAgICBjbG9uZUVsOiBjbG9uZUVsLFxuICAgIHRhcmdldEVsOiBkcmFnRWwsXG4gICAgcm9vdEVsOiByb290RWwsXG4gICAgb2xkSW5kZXg6IG9sZEluZGV4LFxuICAgIG9sZERyYWdnYWJsZUluZGV4OiBvbGREcmFnZ2FibGVJbmRleCxcbiAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG5ld0RyYWdnYWJsZUluZGV4XG4gIH0sIGluZm8pKTtcbn1cbnZhciBkcmFnRWwsXG4gIHBhcmVudEVsLFxuICBnaG9zdEVsLFxuICByb290RWwsXG4gIG5leHRFbCxcbiAgbGFzdERvd25FbCxcbiAgY2xvbmVFbCxcbiAgY2xvbmVIaWRkZW4sXG4gIG9sZEluZGV4LFxuICBuZXdJbmRleCxcbiAgb2xkRHJhZ2dhYmxlSW5kZXgsXG4gIG5ld0RyYWdnYWJsZUluZGV4LFxuICBhY3RpdmVHcm91cCxcbiAgcHV0U29ydGFibGUsXG4gIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSBmYWxzZSxcbiAgaWdub3JlTmV4dENsaWNrID0gZmFsc2UsXG4gIHNvcnRhYmxlcyA9IFtdLFxuICB0YXBFdnQsXG4gIHRvdWNoRXZ0LFxuICBsYXN0RHgsXG4gIGxhc3REeSxcbiAgdGFwRGlzdGFuY2VMZWZ0LFxuICB0YXBEaXN0YW5jZVRvcCxcbiAgbW92ZWQsXG4gIGxhc3RUYXJnZXQsXG4gIGxhc3REaXJlY3Rpb24sXG4gIHBhc3RGaXJzdEludmVydFRocmVzaCA9IGZhbHNlLFxuICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gZmFsc2UsXG4gIHRhcmdldE1vdmVEaXN0YW5jZSxcbiAgLy8gRm9yIHBvc2l0aW9uaW5nIGdob3N0IGFic29sdXRlbHlcbiAgZ2hvc3RSZWxhdGl2ZVBhcmVudCxcbiAgZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGwgPSBbXSxcbiAgLy8gKGxlZnQsIHRvcClcblxuICBfc2lsZW50ID0gZmFsc2UsXG4gIHNhdmVkSW5wdXRDaGVja2VkID0gW107XG5cbi8qKiBAY29uc3QgKi9cbnZhciBkb2N1bWVudEV4aXN0cyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsXG4gIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5ID0gSU9TLFxuICBDU1NGbG9hdFByb3BlcnR5ID0gRWRnZSB8fCBJRTExT3JMZXNzID8gJ2Nzc0Zsb2F0JyA6ICdmbG9hdCcsXG4gIC8vIFRoaXMgd2lsbCBub3QgcGFzcyBmb3IgSUU5LCBiZWNhdXNlIElFOSBEbkQgb25seSB3b3JrcyBvbiBhbmNob3JzXG4gIHN1cHBvcnREcmFnZ2FibGUgPSBkb2N1bWVudEV4aXN0cyAmJiAhQ2hyb21lRm9yQW5kcm9pZCAmJiAhSU9TICYmICdkcmFnZ2FibGUnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICBzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWRvY3VtZW50RXhpc3RzKSByZXR1cm47XG4gICAgLy8gZmFsc2Ugd2hlbiA8PSBJRTExXG4gICAgaWYgKElFMTFPckxlc3MpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgneCcpO1xuICAgIGVsLnN0eWxlLmNzc1RleHQgPSAncG9pbnRlci1ldmVudHM6YXV0byc7XG4gICAgcmV0dXJuIGVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPT09ICdhdXRvJztcbiAgfSgpLFxuICBfZGV0ZWN0RGlyZWN0aW9uID0gZnVuY3Rpb24gX2RldGVjdERpcmVjdGlvbihlbCwgb3B0aW9ucykge1xuICAgIHZhciBlbENTUyA9IGNzcyhlbCksXG4gICAgICBlbFdpZHRoID0gcGFyc2VJbnQoZWxDU1Mud2lkdGgpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ0xlZnQpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ1JpZ2h0KSAtIHBhcnNlSW50KGVsQ1NTLmJvcmRlckxlZnRXaWR0aCkgLSBwYXJzZUludChlbENTUy5ib3JkZXJSaWdodFdpZHRoKSxcbiAgICAgIGNoaWxkMSA9IGdldENoaWxkKGVsLCAwLCBvcHRpb25zKSxcbiAgICAgIGNoaWxkMiA9IGdldENoaWxkKGVsLCAxLCBvcHRpb25zKSxcbiAgICAgIGZpcnN0Q2hpbGRDU1MgPSBjaGlsZDEgJiYgY3NzKGNoaWxkMSksXG4gICAgICBzZWNvbmRDaGlsZENTUyA9IGNoaWxkMiAmJiBjc3MoY2hpbGQyKSxcbiAgICAgIGZpcnN0Q2hpbGRXaWR0aCA9IGZpcnN0Q2hpbGRDU1MgJiYgcGFyc2VJbnQoZmlyc3RDaGlsZENTUy5tYXJnaW5MZWZ0KSArIHBhcnNlSW50KGZpcnN0Q2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDEpLndpZHRoLFxuICAgICAgc2Vjb25kQ2hpbGRXaWR0aCA9IHNlY29uZENoaWxkQ1NTICYmIHBhcnNlSW50KHNlY29uZENoaWxkQ1NTLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQoc2Vjb25kQ2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDIpLndpZHRoO1xuICAgIGlmIChlbENTUy5kaXNwbGF5ID09PSAnZmxleCcpIHtcbiAgICAgIHJldHVybiBlbENTUy5mbGV4RGlyZWN0aW9uID09PSAnY29sdW1uJyB8fCBlbENTUy5mbGV4RGlyZWN0aW9uID09PSAnY29sdW1uLXJldmVyc2UnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICB9XG4gICAgaWYgKGVsQ1NTLmRpc3BsYXkgPT09ICdncmlkJykge1xuICAgICAgcmV0dXJuIGVsQ1NTLmdyaWRUZW1wbGF0ZUNvbHVtbnMuc3BsaXQoJyAnKS5sZW5ndGggPD0gMSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIGlmIChjaGlsZDEgJiYgZmlyc3RDaGlsZENTU1tcImZsb2F0XCJdICYmIGZpcnN0Q2hpbGRDU1NbXCJmbG9hdFwiXSAhPT0gJ25vbmUnKSB7XG4gICAgICB2YXIgdG91Y2hpbmdTaWRlQ2hpbGQyID0gZmlyc3RDaGlsZENTU1tcImZsb2F0XCJdID09PSAnbGVmdCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgcmV0dXJuIGNoaWxkMiAmJiAoc2Vjb25kQ2hpbGRDU1MuY2xlYXIgPT09ICdib3RoJyB8fCBzZWNvbmRDaGlsZENTUy5jbGVhciA9PT0gdG91Y2hpbmdTaWRlQ2hpbGQyKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZDEgJiYgKGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ2Jsb2NrJyB8fCBmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICdmbGV4JyB8fCBmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICd0YWJsZScgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAnZ3JpZCcgfHwgZmlyc3RDaGlsZFdpZHRoID49IGVsV2lkdGggJiYgZWxDU1NbQ1NTRmxvYXRQcm9wZXJ0eV0gPT09ICdub25lJyB8fCBjaGlsZDIgJiYgZWxDU1NbQ1NTRmxvYXRQcm9wZXJ0eV0gPT09ICdub25lJyAmJiBmaXJzdENoaWxkV2lkdGggKyBzZWNvbmRDaGlsZFdpZHRoID4gZWxXaWR0aCkgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICB9LFxuICBfZHJhZ0VsSW5Sb3dDb2x1bW4gPSBmdW5jdGlvbiBfZHJhZ0VsSW5Sb3dDb2x1bW4oZHJhZ1JlY3QsIHRhcmdldFJlY3QsIHZlcnRpY2FsKSB7XG4gICAgdmFyIGRyYWdFbFMxT3BwID0gdmVydGljYWwgPyBkcmFnUmVjdC5sZWZ0IDogZHJhZ1JlY3QudG9wLFxuICAgICAgZHJhZ0VsUzJPcHAgPSB2ZXJ0aWNhbCA/IGRyYWdSZWN0LnJpZ2h0IDogZHJhZ1JlY3QuYm90dG9tLFxuICAgICAgZHJhZ0VsT3BwTGVuZ3RoID0gdmVydGljYWwgPyBkcmFnUmVjdC53aWR0aCA6IGRyYWdSZWN0LmhlaWdodCxcbiAgICAgIHRhcmdldFMxT3BwID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LmxlZnQgOiB0YXJnZXRSZWN0LnRvcCxcbiAgICAgIHRhcmdldFMyT3BwID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LnJpZ2h0IDogdGFyZ2V0UmVjdC5ib3R0b20sXG4gICAgICB0YXJnZXRPcHBMZW5ndGggPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3Qud2lkdGggOiB0YXJnZXRSZWN0LmhlaWdodDtcbiAgICByZXR1cm4gZHJhZ0VsUzFPcHAgPT09IHRhcmdldFMxT3BwIHx8IGRyYWdFbFMyT3BwID09PSB0YXJnZXRTMk9wcCB8fCBkcmFnRWxTMU9wcCArIGRyYWdFbE9wcExlbmd0aCAvIDIgPT09IHRhcmdldFMxT3BwICsgdGFyZ2V0T3BwTGVuZ3RoIC8gMjtcbiAgfSxcbiAgLyoqXHJcbiAgICogRGV0ZWN0cyBmaXJzdCBuZWFyZXN0IGVtcHR5IHNvcnRhYmxlIHRvIFggYW5kIFkgcG9zaXRpb24gdXNpbmcgZW1wdHlJbnNlcnRUaHJlc2hvbGQuXHJcbiAgICogQHBhcmFtICB7TnVtYmVyfSB4ICAgICAgWCBwb3NpdGlvblxyXG4gICAqIEBwYXJhbSAge051bWJlcn0geSAgICAgIFkgcG9zaXRpb25cclxuICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICBFbGVtZW50IG9mIHRoZSBmaXJzdCBmb3VuZCBuZWFyZXN0IFNvcnRhYmxlXHJcbiAgICovXG4gIF9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSA9IGZ1bmN0aW9uIF9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSh4LCB5KSB7XG4gICAgdmFyIHJldDtcbiAgICBzb3J0YWJsZXMuc29tZShmdW5jdGlvbiAoc29ydGFibGUpIHtcbiAgICAgIHZhciB0aHJlc2hvbGQgPSBzb3J0YWJsZVtleHBhbmRvXS5vcHRpb25zLmVtcHR5SW5zZXJ0VGhyZXNob2xkO1xuICAgICAgaWYgKCF0aHJlc2hvbGQgfHwgbGFzdENoaWxkKHNvcnRhYmxlKSkgcmV0dXJuO1xuICAgICAgdmFyIHJlY3QgPSBnZXRSZWN0KHNvcnRhYmxlKSxcbiAgICAgICAgaW5zaWRlSG9yaXpvbnRhbGx5ID0geCA+PSByZWN0LmxlZnQgLSB0aHJlc2hvbGQgJiYgeCA8PSByZWN0LnJpZ2h0ICsgdGhyZXNob2xkLFxuICAgICAgICBpbnNpZGVWZXJ0aWNhbGx5ID0geSA+PSByZWN0LnRvcCAtIHRocmVzaG9sZCAmJiB5IDw9IHJlY3QuYm90dG9tICsgdGhyZXNob2xkO1xuICAgICAgaWYgKGluc2lkZUhvcml6b250YWxseSAmJiBpbnNpZGVWZXJ0aWNhbGx5KSB7XG4gICAgICAgIHJldHVybiByZXQgPSBzb3J0YWJsZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmV0O1xuICB9LFxuICBfcHJlcGFyZUdyb3VwID0gZnVuY3Rpb24gX3ByZXBhcmVHcm91cChvcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gdG9Gbih2YWx1ZSwgcHVsbCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0bywgZnJvbSwgZHJhZ0VsLCBldnQpIHtcbiAgICAgICAgdmFyIHNhbWVHcm91cCA9IHRvLm9wdGlvbnMuZ3JvdXAubmFtZSAmJiBmcm9tLm9wdGlvbnMuZ3JvdXAubmFtZSAmJiB0by5vcHRpb25zLmdyb3VwLm5hbWUgPT09IGZyb20ub3B0aW9ucy5ncm91cC5uYW1lO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAocHVsbCB8fCBzYW1lR3JvdXApKSB7XG4gICAgICAgICAgLy8gRGVmYXVsdCBwdWxsIHZhbHVlXG4gICAgICAgICAgLy8gRGVmYXVsdCBwdWxsIGFuZCBwdXQgdmFsdWUgaWYgc2FtZSBncm91cFxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKHB1bGwgJiYgdmFsdWUgPT09ICdjbG9uZScpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIHRvRm4odmFsdWUodG8sIGZyb20sIGRyYWdFbCwgZXZ0KSwgcHVsbCkodG8sIGZyb20sIGRyYWdFbCwgZXZ0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgb3RoZXJHcm91cCA9IChwdWxsID8gdG8gOiBmcm9tKS5vcHRpb25zLmdyb3VwLm5hbWU7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgPT09IG90aGVyR3JvdXAgfHwgdmFsdWUuam9pbiAmJiB2YWx1ZS5pbmRleE9mKG90aGVyR3JvdXApID4gLTE7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBncm91cCA9IHt9O1xuICAgIHZhciBvcmlnaW5hbEdyb3VwID0gb3B0aW9ucy5ncm91cDtcbiAgICBpZiAoIW9yaWdpbmFsR3JvdXAgfHwgX3R5cGVvZihvcmlnaW5hbEdyb3VwKSAhPSAnb2JqZWN0Jykge1xuICAgICAgb3JpZ2luYWxHcm91cCA9IHtcbiAgICAgICAgbmFtZTogb3JpZ2luYWxHcm91cFxuICAgICAgfTtcbiAgICB9XG4gICAgZ3JvdXAubmFtZSA9IG9yaWdpbmFsR3JvdXAubmFtZTtcbiAgICBncm91cC5jaGVja1B1bGwgPSB0b0ZuKG9yaWdpbmFsR3JvdXAucHVsbCwgdHJ1ZSk7XG4gICAgZ3JvdXAuY2hlY2tQdXQgPSB0b0ZuKG9yaWdpbmFsR3JvdXAucHV0KTtcbiAgICBncm91cC5yZXZlcnRDbG9uZSA9IG9yaWdpbmFsR3JvdXAucmV2ZXJ0Q2xvbmU7XG4gICAgb3B0aW9ucy5ncm91cCA9IGdyb3VwO1xuICB9LFxuICBfaGlkZUdob3N0Rm9yVGFyZ2V0ID0gZnVuY3Rpb24gX2hpZGVHaG9zdEZvclRhcmdldCgpIHtcbiAgICBpZiAoIXN1cHBvcnRDc3NQb2ludGVyRXZlbnRzICYmIGdob3N0RWwpIHtcbiAgICAgIGNzcyhnaG9zdEVsLCAnZGlzcGxheScsICdub25lJyk7XG4gICAgfVxuICB9LFxuICBfdW5oaWRlR2hvc3RGb3JUYXJnZXQgPSBmdW5jdGlvbiBfdW5oaWRlR2hvc3RGb3JUYXJnZXQoKSB7XG4gICAgaWYgKCFzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyAmJiBnaG9zdEVsKSB7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgfVxuICB9O1xuXG4vLyAjMTE4NCBmaXggLSBQcmV2ZW50IGNsaWNrIGV2ZW50IG9uIGZhbGxiYWNrIGlmIGRyYWdnZWQgYnV0IGl0ZW0gbm90IGNoYW5nZWQgcG9zaXRpb25cbmlmIChkb2N1bWVudEV4aXN0cyAmJiAhQ2hyb21lRm9yQW5kcm9pZCkge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldnQpIHtcbiAgICBpZiAoaWdub3JlTmV4dENsaWNrKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24gJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZ0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiAmJiBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICBpZ25vcmVOZXh0Q2xpY2sgPSBmYWxzZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxudmFyIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50ID0gZnVuY3Rpb24gbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQoZXZ0KSB7XG4gIGlmIChkcmFnRWwpIHtcbiAgICBldnQgPSBldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0O1xuICAgIHZhciBuZWFyZXN0ID0gX2RldGVjdE5lYXJlc3RFbXB0eVNvcnRhYmxlKGV2dC5jbGllbnRYLCBldnQuY2xpZW50WSk7XG4gICAgaWYgKG5lYXJlc3QpIHtcbiAgICAgIC8vIENyZWF0ZSBpbWl0YXRpb24gZXZlbnRcbiAgICAgIHZhciBldmVudCA9IHt9O1xuICAgICAgZm9yICh2YXIgaSBpbiBldnQpIHtcbiAgICAgICAgaWYgKGV2dC5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIGV2ZW50W2ldID0gZXZ0W2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBldmVudC50YXJnZXQgPSBldmVudC5yb290RWwgPSBuZWFyZXN0O1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB2b2lkIDA7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24gPSB2b2lkIDA7XG4gICAgICBuZWFyZXN0W2V4cGFuZG9dLl9vbkRyYWdPdmVyKGV2ZW50KTtcbiAgICB9XG4gIH1cbn07XG52YXIgX2NoZWNrT3V0c2lkZVRhcmdldEVsID0gZnVuY3Rpb24gX2NoZWNrT3V0c2lkZVRhcmdldEVsKGV2dCkge1xuICBpZiAoZHJhZ0VsKSB7XG4gICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbChldnQudGFyZ2V0KTtcbiAgfVxufTtcblxuLyoqXHJcbiAqIEBjbGFzcyAgU29ydGFibGVcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbFxyXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgIFtvcHRpb25zXVxyXG4gKi9cbmZ1bmN0aW9uIFNvcnRhYmxlKGVsLCBvcHRpb25zKSB7XG4gIGlmICghKGVsICYmIGVsLm5vZGVUeXBlICYmIGVsLm5vZGVUeXBlID09PSAxKSkge1xuICAgIHRocm93IFwiU29ydGFibGU6IGBlbGAgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCwgbm90IFwiLmNvbmNhdCh7fS50b1N0cmluZy5jYWxsKGVsKSk7XG4gIH1cbiAgdGhpcy5lbCA9IGVsOyAvLyByb290IGVsZW1lbnRcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvcHRpb25zKTtcblxuICAvLyBFeHBvcnQgaW5zdGFuY2VcbiAgZWxbZXhwYW5kb10gPSB0aGlzO1xuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgZ3JvdXA6IG51bGwsXG4gICAgc29ydDogdHJ1ZSxcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgc3RvcmU6IG51bGwsXG4gICAgaGFuZGxlOiBudWxsLFxuICAgIGRyYWdnYWJsZTogL15bdW9dbCQvaS50ZXN0KGVsLm5vZGVOYW1lKSA/ICc+bGknIDogJz4qJyxcbiAgICBzd2FwVGhyZXNob2xkOiAxLFxuICAgIC8vIHBlcmNlbnRhZ2U7IDAgPD0geCA8PSAxXG4gICAgaW52ZXJ0U3dhcDogZmFsc2UsXG4gICAgLy8gaW52ZXJ0IGFsd2F5c1xuICAgIGludmVydGVkU3dhcFRocmVzaG9sZDogbnVsbCxcbiAgICAvLyB3aWxsIGJlIHNldCB0byBzYW1lIGFzIHN3YXBUaHJlc2hvbGQgaWYgZGVmYXVsdFxuICAgIHJlbW92ZUNsb25lT25IaWRlOiB0cnVlLFxuICAgIGRpcmVjdGlvbjogZnVuY3Rpb24gZGlyZWN0aW9uKCkge1xuICAgICAgcmV0dXJuIF9kZXRlY3REaXJlY3Rpb24oZWwsIHRoaXMub3B0aW9ucyk7XG4gICAgfSxcbiAgICBnaG9zdENsYXNzOiAnc29ydGFibGUtZ2hvc3QnLFxuICAgIGNob3NlbkNsYXNzOiAnc29ydGFibGUtY2hvc2VuJyxcbiAgICBkcmFnQ2xhc3M6ICdzb3J0YWJsZS1kcmFnJyxcbiAgICBpZ25vcmU6ICdhLCBpbWcnLFxuICAgIGZpbHRlcjogbnVsbCxcbiAgICBwcmV2ZW50T25GaWx0ZXI6IHRydWUsXG4gICAgYW5pbWF0aW9uOiAwLFxuICAgIGVhc2luZzogbnVsbCxcbiAgICBzZXREYXRhOiBmdW5jdGlvbiBzZXREYXRhKGRhdGFUcmFuc2ZlciwgZHJhZ0VsKSB7XG4gICAgICBkYXRhVHJhbnNmZXIuc2V0RGF0YSgnVGV4dCcsIGRyYWdFbC50ZXh0Q29udGVudCk7XG4gICAgfSxcbiAgICBkcm9wQnViYmxlOiBmYWxzZSxcbiAgICBkcmFnb3ZlckJ1YmJsZTogZmFsc2UsXG4gICAgZGF0YUlkQXR0cjogJ2RhdGEtaWQnLFxuICAgIGRlbGF5OiAwLFxuICAgIGRlbGF5T25Ub3VjaE9ubHk6IGZhbHNlLFxuICAgIHRvdWNoU3RhcnRUaHJlc2hvbGQ6IChOdW1iZXIucGFyc2VJbnQgPyBOdW1iZXIgOiB3aW5kb3cpLnBhcnNlSW50KHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCAxMCkgfHwgMSxcbiAgICBmb3JjZUZhbGxiYWNrOiBmYWxzZSxcbiAgICBmYWxsYmFja0NsYXNzOiAnc29ydGFibGUtZmFsbGJhY2snLFxuICAgIGZhbGxiYWNrT25Cb2R5OiBmYWxzZSxcbiAgICBmYWxsYmFja1RvbGVyYW5jZTogMCxcbiAgICBmYWxsYmFja09mZnNldDoge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9LFxuICAgIHN1cHBvcnRQb2ludGVyOiBTb3J0YWJsZS5zdXBwb3J0UG9pbnRlciAhPT0gZmFsc2UgJiYgJ1BvaW50ZXJFdmVudCcgaW4gd2luZG93ICYmICFTYWZhcmksXG4gICAgZW1wdHlJbnNlcnRUaHJlc2hvbGQ6IDVcbiAgfTtcbiAgUGx1Z2luTWFuYWdlci5pbml0aWFsaXplUGx1Z2lucyh0aGlzLCBlbCwgZGVmYXVsdHMpO1xuXG4gIC8vIFNldCBkZWZhdWx0IG9wdGlvbnNcbiAgZm9yICh2YXIgbmFtZSBpbiBkZWZhdWx0cykge1xuICAgICEobmFtZSBpbiBvcHRpb25zKSAmJiAob3B0aW9uc1tuYW1lXSA9IGRlZmF1bHRzW25hbWVdKTtcbiAgfVxuICBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpO1xuXG4gIC8vIEJpbmQgYWxsIHByaXZhdGUgbWV0aG9kc1xuICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNldHVwIGRyYWcgbW9kZVxuICB0aGlzLm5hdGl2ZURyYWdnYWJsZSA9IG9wdGlvbnMuZm9yY2VGYWxsYmFjayA/IGZhbHNlIDogc3VwcG9ydERyYWdnYWJsZTtcbiAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgLy8gVG91Y2ggc3RhcnQgdGhyZXNob2xkIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gdGhlIG5hdGl2ZSBkcmFnc3RhcnQgdGhyZXNob2xkXG4gICAgdGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgPSAxO1xuICB9XG5cbiAgLy8gQmluZCBldmVudHNcbiAgaWYgKG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICBvbihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gIH0gZWxzZSB7XG4gICAgb24oZWwsICdtb3VzZWRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvbihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgfVxuICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICBvbihlbCwgJ2RyYWdvdmVyJywgdGhpcyk7XG4gICAgb24oZWwsICdkcmFnZW50ZXInLCB0aGlzKTtcbiAgfVxuICBzb3J0YWJsZXMucHVzaCh0aGlzLmVsKTtcblxuICAvLyBSZXN0b3JlIHNvcnRpbmdcbiAgb3B0aW9ucy5zdG9yZSAmJiBvcHRpb25zLnN0b3JlLmdldCAmJiB0aGlzLnNvcnQob3B0aW9ucy5zdG9yZS5nZXQodGhpcykgfHwgW10pO1xuXG4gIC8vIEFkZCBhbmltYXRpb24gc3RhdGUgbWFuYWdlclxuICBfZXh0ZW5kcyh0aGlzLCBBbmltYXRpb25TdGF0ZU1hbmFnZXIoKSk7XG59XG5Tb3J0YWJsZS5wcm90b3R5cGUgPSAvKiogQGxlbmRzIFNvcnRhYmxlLnByb3RvdHlwZSAqL3tcbiAgY29uc3RydWN0b3I6IFNvcnRhYmxlLFxuICBfaXNPdXRzaWRlVGhpc0VsOiBmdW5jdGlvbiBfaXNPdXRzaWRlVGhpc0VsKHRhcmdldCkge1xuICAgIGlmICghdGhpcy5lbC5jb250YWlucyh0YXJnZXQpICYmIHRhcmdldCAhPT0gdGhpcy5lbCkge1xuICAgICAgbGFzdFRhcmdldCA9IG51bGw7XG4gICAgfVxuICB9LFxuICBfZ2V0RGlyZWN0aW9uOiBmdW5jdGlvbiBfZ2V0RGlyZWN0aW9uKGV2dCwgdGFyZ2V0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnZnVuY3Rpb24nID8gdGhpcy5vcHRpb25zLmRpcmVjdGlvbi5jYWxsKHRoaXMsIGV2dCwgdGFyZ2V0LCBkcmFnRWwpIDogdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgfSxcbiAgX29uVGFwU3RhcnQ6IGZ1bmN0aW9uIF9vblRhcFN0YXJ0KCAvKiogRXZlbnR8VG91Y2hFdmVudCAqL2V2dCkge1xuICAgIGlmICghZXZ0LmNhbmNlbGFibGUpIHJldHVybjtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgZWwgPSB0aGlzLmVsLFxuICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgIHByZXZlbnRPbkZpbHRlciA9IG9wdGlvbnMucHJldmVudE9uRmlsdGVyLFxuICAgICAgdHlwZSA9IGV2dC50eXBlLFxuICAgICAgdG91Y2ggPSBldnQudG91Y2hlcyAmJiBldnQudG91Y2hlc1swXSB8fCBldnQucG9pbnRlclR5cGUgJiYgZXZ0LnBvaW50ZXJUeXBlID09PSAndG91Y2gnICYmIGV2dCxcbiAgICAgIHRhcmdldCA9ICh0b3VjaCB8fCBldnQpLnRhcmdldCxcbiAgICAgIG9yaWdpbmFsVGFyZ2V0ID0gZXZ0LnRhcmdldC5zaGFkb3dSb290ICYmIChldnQucGF0aCAmJiBldnQucGF0aFswXSB8fCBldnQuY29tcG9zZWRQYXRoICYmIGV2dC5jb21wb3NlZFBhdGgoKVswXSkgfHwgdGFyZ2V0LFxuICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgX3NhdmVJbnB1dENoZWNrZWRTdGF0ZShlbCk7XG5cbiAgICAvLyBEb24ndCB0cmlnZ2VyIHN0YXJ0IGV2ZW50IHdoZW4gYW4gZWxlbWVudCBpcyBiZWVuIGRyYWdnZWQsIG90aGVyd2lzZSB0aGUgZXZ0Lm9sZGluZGV4IGFsd2F5cyB3cm9uZyB3aGVuIHNldCBvcHRpb24uZ3JvdXAuXG4gICAgaWYgKGRyYWdFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoL21vdXNlZG93bnxwb2ludGVyZG93bi8udGVzdCh0eXBlKSAmJiBldnQuYnV0dG9uICE9PSAwIHx8IG9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjsgLy8gb25seSBsZWZ0IGJ1dHRvbiBhbmQgZW5hYmxlZFxuICAgIH1cblxuICAgIC8vIGNhbmNlbCBkbmQgaWYgb3JpZ2luYWwgdGFyZ2V0IGlzIGNvbnRlbnQgZWRpdGFibGVcbiAgICBpZiAob3JpZ2luYWxUYXJnZXQuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTYWZhcmkgaWdub3JlcyBmdXJ0aGVyIGV2ZW50IGhhbmRsaW5nIGFmdGVyIG1vdXNlZG93blxuICAgIGlmICghdGhpcy5uYXRpdmVEcmFnZ2FibGUgJiYgU2FmYXJpICYmIHRhcmdldCAmJiB0YXJnZXQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0VMRUNUJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0YXJnZXQgPSBjbG9zZXN0KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsLCBmYWxzZSk7XG4gICAgaWYgKHRhcmdldCAmJiB0YXJnZXQuYW5pbWF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGxhc3REb3duRWwgPT09IHRhcmdldCkge1xuICAgICAgLy8gSWdub3JpbmcgZHVwbGljYXRlIGBkb3duYFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIGRyYWdnZWQgZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudFxuICAgIG9sZEluZGV4ID0gaW5kZXgodGFyZ2V0KTtcbiAgICBvbGREcmFnZ2FibGVJbmRleCA9IGluZGV4KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG4gICAgLy8gQ2hlY2sgZmlsdGVyXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChmaWx0ZXIuY2FsbCh0aGlzLCBldnQsIHRhcmdldCwgdGhpcykpIHtcbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgICByb290RWw6IG9yaWdpbmFsVGFyZ2V0LFxuICAgICAgICAgIG5hbWU6ICdmaWx0ZXInLFxuICAgICAgICAgIHRhcmdldEVsOiB0YXJnZXQsXG4gICAgICAgICAgdG9FbDogZWwsXG4gICAgICAgICAgZnJvbUVsOiBlbFxuICAgICAgICB9KTtcbiAgICAgICAgcGx1Z2luRXZlbnQoJ2ZpbHRlcicsIF90aGlzLCB7XG4gICAgICAgICAgZXZ0OiBldnRcbiAgICAgICAgfSk7XG4gICAgICAgIHByZXZlbnRPbkZpbHRlciAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuOyAvLyBjYW5jZWwgZG5kXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IGZpbHRlci5zcGxpdCgnLCcpLnNvbWUoZnVuY3Rpb24gKGNyaXRlcmlhKSB7XG4gICAgICAgIGNyaXRlcmlhID0gY2xvc2VzdChvcmlnaW5hbFRhcmdldCwgY3JpdGVyaWEudHJpbSgpLCBlbCwgZmFsc2UpO1xuICAgICAgICBpZiAoY3JpdGVyaWEpIHtcbiAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgICAgICByb290RWw6IGNyaXRlcmlhLFxuICAgICAgICAgICAgbmFtZTogJ2ZpbHRlcicsXG4gICAgICAgICAgICB0YXJnZXRFbDogdGFyZ2V0LFxuICAgICAgICAgICAgZnJvbUVsOiBlbCxcbiAgICAgICAgICAgIHRvRWw6IGVsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcGx1Z2luRXZlbnQoJ2ZpbHRlcicsIF90aGlzLCB7XG4gICAgICAgICAgICBldnQ6IGV2dFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChmaWx0ZXIpIHtcbiAgICAgICAgcHJldmVudE9uRmlsdGVyICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47IC8vIGNhbmNlbCBkbmRcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuaGFuZGxlICYmICFjbG9zZXN0KG9yaWdpbmFsVGFyZ2V0LCBvcHRpb25zLmhhbmRsZSwgZWwsIGZhbHNlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFByZXBhcmUgYGRyYWdzdGFydGBcbiAgICB0aGlzLl9wcmVwYXJlRHJhZ1N0YXJ0KGV2dCwgdG91Y2gsIHRhcmdldCk7XG4gIH0sXG4gIF9wcmVwYXJlRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfcHJlcGFyZURyYWdTdGFydCggLyoqIEV2ZW50ICovZXZ0LCAvKiogVG91Y2ggKi90b3VjaCwgLyoqIEhUTUxFbGVtZW50ICovdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgIGVsID0gX3RoaXMuZWwsXG4gICAgICBvcHRpb25zID0gX3RoaXMub3B0aW9ucyxcbiAgICAgIG93bmVyRG9jdW1lbnQgPSBlbC5vd25lckRvY3VtZW50LFxuICAgICAgZHJhZ1N0YXJ0Rm47XG4gICAgaWYgKHRhcmdldCAmJiAhZHJhZ0VsICYmIHRhcmdldC5wYXJlbnROb2RlID09PSBlbCkge1xuICAgICAgdmFyIGRyYWdSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgcm9vdEVsID0gZWw7XG4gICAgICBkcmFnRWwgPSB0YXJnZXQ7XG4gICAgICBwYXJlbnRFbCA9IGRyYWdFbC5wYXJlbnROb2RlO1xuICAgICAgbmV4dEVsID0gZHJhZ0VsLm5leHRTaWJsaW5nO1xuICAgICAgbGFzdERvd25FbCA9IHRhcmdldDtcbiAgICAgIGFjdGl2ZUdyb3VwID0gb3B0aW9ucy5ncm91cDtcbiAgICAgIFNvcnRhYmxlLmRyYWdnZWQgPSBkcmFnRWw7XG4gICAgICB0YXBFdnQgPSB7XG4gICAgICAgIHRhcmdldDogZHJhZ0VsLFxuICAgICAgICBjbGllbnRYOiAodG91Y2ggfHwgZXZ0KS5jbGllbnRYLFxuICAgICAgICBjbGllbnRZOiAodG91Y2ggfHwgZXZ0KS5jbGllbnRZXG4gICAgICB9O1xuICAgICAgdGFwRGlzdGFuY2VMZWZ0ID0gdGFwRXZ0LmNsaWVudFggLSBkcmFnUmVjdC5sZWZ0O1xuICAgICAgdGFwRGlzdGFuY2VUb3AgPSB0YXBFdnQuY2xpZW50WSAtIGRyYWdSZWN0LnRvcDtcbiAgICAgIHRoaXMuX2xhc3RYID0gKHRvdWNoIHx8IGV2dCkuY2xpZW50WDtcbiAgICAgIHRoaXMuX2xhc3RZID0gKHRvdWNoIHx8IGV2dCkuY2xpZW50WTtcbiAgICAgIGRyYWdFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICdhbGwnO1xuICAgICAgZHJhZ1N0YXJ0Rm4gPSBmdW5jdGlvbiBkcmFnU3RhcnRGbigpIHtcbiAgICAgICAgcGx1Z2luRXZlbnQoJ2RlbGF5RW5kZWQnLCBfdGhpcywge1xuICAgICAgICAgIGV2dDogZXZ0XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgICAgIF90aGlzLl9vbkRyb3AoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVsYXllZCBkcmFnIGhhcyBiZWVuIHRyaWdnZXJlZFxuICAgICAgICAvLyB3ZSBjYW4gcmUtZW5hYmxlIHRoZSBldmVudHM6IHRvdWNobW92ZS9tb3VzZW1vdmVcbiAgICAgICAgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuICAgICAgICBpZiAoIUZpcmVGb3ggJiYgX3RoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgICAgZHJhZ0VsLmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCaW5kIHRoZSBldmVudHM6IGRyYWdzdGFydC9kcmFnZW5kXG4gICAgICAgIF90aGlzLl90cmlnZ2VyRHJhZ1N0YXJ0KGV2dCwgdG91Y2gpO1xuXG4gICAgICAgIC8vIERyYWcgc3RhcnQgZXZlbnRcbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgICBuYW1lOiAnY2hvb3NlJyxcbiAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ2hvc2VuIGl0ZW1cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmNob3NlbkNsYXNzLCB0cnVlKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIERpc2FibGUgXCJkcmFnZ2FibGVcIlxuICAgICAgb3B0aW9ucy5pZ25vcmUuc3BsaXQoJywnKS5mb3JFYWNoKGZ1bmN0aW9uIChjcml0ZXJpYSkge1xuICAgICAgICBmaW5kKGRyYWdFbCwgY3JpdGVyaWEudHJpbSgpLCBfZGlzYWJsZURyYWdnYWJsZSk7XG4gICAgICB9KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdkcmFnb3ZlcicsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgICAgaWYgKG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgICAvLyBOYXRpdmUgRCZEIHRyaWdnZXJzIHBvaW50ZXJjYW5jZWxcbiAgICAgICAgIXRoaXMubmF0aXZlRHJhZ2dhYmxlICYmIG9uKG93bmVyRG9jdW1lbnQsICdwb2ludGVyY2FuY2VsJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1ha2UgZHJhZ0VsIGRyYWdnYWJsZSAobXVzdCBiZSBiZWZvcmUgZGVsYXkgZm9yIEZpcmVGb3gpXG4gICAgICBpZiAoRmlyZUZveCAmJiB0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMudG91Y2hTdGFydFRocmVzaG9sZCA9IDQ7XG4gICAgICAgIGRyYWdFbC5kcmFnZ2FibGUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcGx1Z2luRXZlbnQoJ2RlbGF5U3RhcnQnLCB0aGlzLCB7XG4gICAgICAgIGV2dDogZXZ0XG4gICAgICB9KTtcblxuICAgICAgLy8gRGVsYXkgaXMgaW1wb3NzaWJsZSBmb3IgbmF0aXZlIERuRCBpbiBFZGdlIG9yIElFXG4gICAgICBpZiAob3B0aW9ucy5kZWxheSAmJiAoIW9wdGlvbnMuZGVsYXlPblRvdWNoT25seSB8fCB0b3VjaCkgJiYgKCF0aGlzLm5hdGl2ZURyYWdnYWJsZSB8fCAhKEVkZ2UgfHwgSUUxMU9yTGVzcykpKSB7XG4gICAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICAgICAgdGhpcy5fb25Ecm9wKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIG1vdmVzIHRoZSBwb2ludGVyIG9yIGxldCBnbyB0aGUgY2xpY2sgb3IgdG91Y2hcbiAgICAgICAgLy8gYmVmb3JlIHRoZSBkZWxheSBoYXMgYmVlbiByZWFjaGVkOlxuICAgICAgICAvLyBkaXNhYmxlIHRoZSBkZWxheWVkIGRyYWdcbiAgICAgICAgaWYgKG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgICBvbihvd25lckRvY3VtZW50LCAncG9pbnRlcnVwJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJjYW5jZWwnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICB9XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIF90aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBvcHRpb25zLnN1cHBvcnRQb2ludGVyICYmIG9uKG93bmVyRG9jdW1lbnQsICdwb2ludGVybW92ZScsIF90aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBfdGhpcy5fZHJhZ1N0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGRyYWdTdGFydEZuLCBvcHRpb25zLmRlbGF5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdTdGFydEZuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBfZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyOiBmdW5jdGlvbiBfZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKCAvKiogVG91Y2hFdmVudHxQb2ludGVyRXZlbnQgKiovZSkge1xuICAgIHZhciB0b3VjaCA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGU7XG4gICAgaWYgKE1hdGgubWF4KE1hdGguYWJzKHRvdWNoLmNsaWVudFggLSB0aGlzLl9sYXN0WCksIE1hdGguYWJzKHRvdWNoLmNsaWVudFkgLSB0aGlzLl9sYXN0WSkpID49IE1hdGguZmxvb3IodGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgLyAodGhpcy5uYXRpdmVEcmFnZ2FibGUgJiYgd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSkpKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcoKTtcbiAgICB9XG4gIH0sXG4gIF9kaXNhYmxlRGVsYXllZERyYWc6IGZ1bmN0aW9uIF9kaXNhYmxlRGVsYXllZERyYWcoKSB7XG4gICAgZHJhZ0VsICYmIF9kaXNhYmxlRHJhZ2dhYmxlKGRyYWdFbCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2RyYWdTdGFydFRpbWVyKTtcbiAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWdFdmVudHMoKTtcbiAgfSxcbiAgX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50czogZnVuY3Rpb24gX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IHRoaXMuZWwub3duZXJEb2N1bWVudDtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAncG9pbnRlcnVwJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJjYW5jZWwnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gIH0sXG4gIF90cmlnZ2VyRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfdHJpZ2dlckRyYWdTdGFydCggLyoqIEV2ZW50ICovZXZ0LCAvKiogVG91Y2ggKi90b3VjaCkge1xuICAgIHRvdWNoID0gdG91Y2ggfHwgZXZ0LnBvaW50ZXJUeXBlID09ICd0b3VjaCcgJiYgZXZ0O1xuICAgIGlmICghdGhpcy5uYXRpdmVEcmFnZ2FibGUgfHwgdG91Y2gpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICAgIH0gZWxzZSBpZiAodG91Y2gpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb24oZHJhZ0VsLCAnZHJhZ2VuZCcsIHRoaXMpO1xuICAgICAgb24ocm9vdEVsLCAnZHJhZ3N0YXJ0JywgdGhpcy5fb25EcmFnU3RhcnQpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgX25leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xuICAgICAgICAgIGRvY3VtZW50LnNlbGVjdGlvbi5lbXB0eSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuICB9LFxuICBfZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIF9kcmFnU3RhcnRlZChmYWxsYmFjaywgZXZ0KSB7XG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlO1xuICAgIGlmIChyb290RWwgJiYgZHJhZ0VsKSB7XG4gICAgICBwbHVnaW5FdmVudCgnZHJhZ1N0YXJ0ZWQnLCB0aGlzLCB7XG4gICAgICAgIGV2dDogZXZ0XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICBvbihkb2N1bWVudCwgJ2RyYWdvdmVyJywgX2NoZWNrT3V0c2lkZVRhcmdldEVsKTtcbiAgICAgIH1cbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAvLyBBcHBseSBlZmZlY3RcbiAgICAgICFmYWxsYmFjayAmJiB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCBmYWxzZSk7XG4gICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgdHJ1ZSk7XG4gICAgICBTb3J0YWJsZS5hY3RpdmUgPSB0aGlzO1xuICAgICAgZmFsbGJhY2sgJiYgdGhpcy5fYXBwZW5kR2hvc3QoKTtcblxuICAgICAgLy8gRHJhZyBzdGFydCBldmVudFxuICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgbmFtZTogJ3N0YXJ0JyxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbnVsbGluZygpO1xuICAgIH1cbiAgfSxcbiAgX2VtdWxhdGVEcmFnT3ZlcjogZnVuY3Rpb24gX2VtdWxhdGVEcmFnT3ZlcigpIHtcbiAgICBpZiAodG91Y2hFdnQpIHtcbiAgICAgIHRoaXMuX2xhc3RYID0gdG91Y2hFdnQuY2xpZW50WDtcbiAgICAgIHRoaXMuX2xhc3RZID0gdG91Y2hFdnQuY2xpZW50WTtcbiAgICAgIF9oaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgICAgIHZhciB0YXJnZXQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHRvdWNoRXZ0LmNsaWVudFgsIHRvdWNoRXZ0LmNsaWVudFkpO1xuICAgICAgdmFyIHBhcmVudCA9IHRhcmdldDtcbiAgICAgIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0LnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnNoYWRvd1Jvb3QuZWxlbWVudEZyb21Qb2ludCh0b3VjaEV2dC5jbGllbnRYLCB0b3VjaEV2dC5jbGllbnRZKTtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gcGFyZW50KSBicmVhaztcbiAgICAgICAgcGFyZW50ID0gdGFyZ2V0O1xuICAgICAgfVxuICAgICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbCh0YXJnZXQpO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKHBhcmVudFtleHBhbmRvXSkge1xuICAgICAgICAgICAgdmFyIGluc2VydGVkID0gdm9pZCAwO1xuICAgICAgICAgICAgaW5zZXJ0ZWQgPSBwYXJlbnRbZXhwYW5kb10uX29uRHJhZ092ZXIoe1xuICAgICAgICAgICAgICBjbGllbnRYOiB0b3VjaEV2dC5jbGllbnRYLFxuICAgICAgICAgICAgICBjbGllbnRZOiB0b3VjaEV2dC5jbGllbnRZLFxuICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGluc2VydGVkICYmICF0aGlzLm9wdGlvbnMuZHJhZ292ZXJCdWJibGUpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRhcmdldCA9IHBhcmVudDsgLy8gc3RvcmUgbGFzdCBlbGVtZW50XG4gICAgICAgIH1cbiAgICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqLyB3aGlsZSAocGFyZW50ID0gZ2V0UGFyZW50T3JIb3N0KHBhcmVudCkpO1xuICAgICAgfVxuICAgICAgX3VuaGlkZUdob3N0Rm9yVGFyZ2V0KCk7XG4gICAgfVxuICB9LFxuICBfb25Ub3VjaE1vdmU6IGZ1bmN0aW9uIF9vblRvdWNoTW92ZSggLyoqVG91Y2hFdmVudCovZXZ0KSB7XG4gICAgaWYgKHRhcEV2dCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIGZhbGxiYWNrVG9sZXJhbmNlID0gb3B0aW9ucy5mYWxsYmFja1RvbGVyYW5jZSxcbiAgICAgICAgZmFsbGJhY2tPZmZzZXQgPSBvcHRpb25zLmZhbGxiYWNrT2Zmc2V0LFxuICAgICAgICB0b3VjaCA9IGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQsXG4gICAgICAgIGdob3N0TWF0cml4ID0gZ2hvc3RFbCAmJiBtYXRyaXgoZ2hvc3RFbCwgdHJ1ZSksXG4gICAgICAgIHNjYWxlWCA9IGdob3N0RWwgJiYgZ2hvc3RNYXRyaXggJiYgZ2hvc3RNYXRyaXguYSxcbiAgICAgICAgc2NhbGVZID0gZ2hvc3RFbCAmJiBnaG9zdE1hdHJpeCAmJiBnaG9zdE1hdHJpeC5kLFxuICAgICAgICByZWxhdGl2ZVNjcm9sbE9mZnNldCA9IFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5ICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgJiYgZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZ2hvc3RSZWxhdGl2ZVBhcmVudCksXG4gICAgICAgIGR4ID0gKHRvdWNoLmNsaWVudFggLSB0YXBFdnQuY2xpZW50WCArIGZhbGxiYWNrT2Zmc2V0LngpIC8gKHNjYWxlWCB8fCAxKSArIChyZWxhdGl2ZVNjcm9sbE9mZnNldCA/IHJlbGF0aXZlU2Nyb2xsT2Zmc2V0WzBdIC0gZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGxbMF0gOiAwKSAvIChzY2FsZVggfHwgMSksXG4gICAgICAgIGR5ID0gKHRvdWNoLmNsaWVudFkgLSB0YXBFdnQuY2xpZW50WSArIGZhbGxiYWNrT2Zmc2V0LnkpIC8gKHNjYWxlWSB8fCAxKSArIChyZWxhdGl2ZVNjcm9sbE9mZnNldCA/IHJlbGF0aXZlU2Nyb2xsT2Zmc2V0WzFdIC0gZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGxbMV0gOiAwKSAvIChzY2FsZVkgfHwgMSk7XG5cbiAgICAgIC8vIG9ubHkgc2V0IHRoZSBzdGF0dXMgdG8gZHJhZ2dpbmcsIHdoZW4gd2UgYXJlIGFjdHVhbGx5IGRyYWdnaW5nXG4gICAgICBpZiAoIVNvcnRhYmxlLmFjdGl2ZSAmJiAhYXdhaXRpbmdEcmFnU3RhcnRlZCkge1xuICAgICAgICBpZiAoZmFsbGJhY2tUb2xlcmFuY2UgJiYgTWF0aC5tYXgoTWF0aC5hYnModG91Y2guY2xpZW50WCAtIHRoaXMuX2xhc3RYKSwgTWF0aC5hYnModG91Y2guY2xpZW50WSAtIHRoaXMuX2xhc3RZKSkgPCBmYWxsYmFja1RvbGVyYW5jZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vbkRyYWdTdGFydChldnQsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKGdob3N0RWwpIHtcbiAgICAgICAgaWYgKGdob3N0TWF0cml4KSB7XG4gICAgICAgICAgZ2hvc3RNYXRyaXguZSArPSBkeCAtIChsYXN0RHggfHwgMCk7XG4gICAgICAgICAgZ2hvc3RNYXRyaXguZiArPSBkeSAtIChsYXN0RHkgfHwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2hvc3RNYXRyaXggPSB7XG4gICAgICAgICAgICBhOiAxLFxuICAgICAgICAgICAgYjogMCxcbiAgICAgICAgICAgIGM6IDAsXG4gICAgICAgICAgICBkOiAxLFxuICAgICAgICAgICAgZTogZHgsXG4gICAgICAgICAgICBmOiBkeVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNzc01hdHJpeCA9IFwibWF0cml4KFwiLmNvbmNhdChnaG9zdE1hdHJpeC5hLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmIsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguYywgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5kLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmUsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguZiwgXCIpXCIpO1xuICAgICAgICBjc3MoZ2hvc3RFbCwgJ3dlYmtpdFRyYW5zZm9ybScsIGNzc01hdHJpeCk7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAnbW96VHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgY3NzKGdob3N0RWwsICdtc1RyYW5zZm9ybScsIGNzc01hdHJpeCk7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgbGFzdER4ID0gZHg7XG4gICAgICAgIGxhc3REeSA9IGR5O1xuICAgICAgICB0b3VjaEV2dCA9IHRvdWNoO1xuICAgICAgfVxuICAgICAgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LFxuICBfYXBwZW5kR2hvc3Q6IGZ1bmN0aW9uIF9hcHBlbmRHaG9zdCgpIHtcbiAgICAvLyBCdWcgaWYgdXNpbmcgc2NhbGUoKTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjYzNzA1OFxuICAgIC8vIE5vdCBiZWluZyBhZGp1c3RlZCBmb3JcbiAgICBpZiAoIWdob3N0RWwpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLm9wdGlvbnMuZmFsbGJhY2tPbkJvZHkgPyBkb2N1bWVudC5ib2R5IDogcm9vdEVsLFxuICAgICAgICByZWN0ID0gZ2V0UmVjdChkcmFnRWwsIHRydWUsIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5LCB0cnVlLCBjb250YWluZXIpLFxuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAvLyBQb3NpdGlvbiBhYnNvbHV0ZWx5XG4gICAgICBpZiAoUG9zaXRpb25HaG9zdEFic29sdXRlbHkpIHtcbiAgICAgICAgLy8gR2V0IHJlbGF0aXZlbHkgcG9zaXRpb25lZCBwYXJlbnRcbiAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGNvbnRhaW5lcjtcbiAgICAgICAgd2hpbGUgKGNzcyhnaG9zdFJlbGF0aXZlUGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycgJiYgY3NzKGdob3N0UmVsYXRpdmVQYXJlbnQsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgIT09IGRvY3VtZW50KSB7XG4gICAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdob3N0UmVsYXRpdmVQYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2hvc3RSZWxhdGl2ZVBhcmVudCAhPT0gZG9jdW1lbnQuYm9keSAmJiBnaG9zdFJlbGF0aXZlUGFyZW50ICE9PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAoZ2hvc3RSZWxhdGl2ZVBhcmVudCA9PT0gZG9jdW1lbnQpIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gICAgICAgICAgcmVjdC50b3AgKz0gZ2hvc3RSZWxhdGl2ZVBhcmVudC5zY3JvbGxUb3A7XG4gICAgICAgICAgcmVjdC5sZWZ0ICs9IGdob3N0UmVsYXRpdmVQYXJlbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50ID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICAgICAgICB9XG4gICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsID0gZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZ2hvc3RSZWxhdGl2ZVBhcmVudCk7XG4gICAgICB9XG4gICAgICBnaG9zdEVsID0gZHJhZ0VsLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgdG9nZ2xlQ2xhc3MoZ2hvc3RFbCwgb3B0aW9ucy5mYWxsYmFja0NsYXNzLCB0cnVlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCB0cnVlKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtJywgJycpO1xuICAgICAgY3NzKGdob3N0RWwsICdib3gtc2l6aW5nJywgJ2JvcmRlci1ib3gnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbWFyZ2luJywgMCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RvcCcsIHJlY3QudG9wKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbGVmdCcsIHJlY3QubGVmdCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3dpZHRoJywgcmVjdC53aWR0aCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnb3BhY2l0eScsICcwLjgnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAncG9zaXRpb24nLCBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSA/ICdhYnNvbHV0ZScgOiAnZml4ZWQnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnekluZGV4JywgJzEwMDAwMCcpO1xuICAgICAgY3NzKGdob3N0RWwsICdwb2ludGVyRXZlbnRzJywgJ25vbmUnKTtcbiAgICAgIFNvcnRhYmxlLmdob3N0ID0gZ2hvc3RFbDtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChnaG9zdEVsKTtcblxuICAgICAgLy8gU2V0IHRyYW5zZm9ybS1vcmlnaW5cbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtLW9yaWdpbicsIHRhcERpc3RhbmNlTGVmdCAvIHBhcnNlSW50KGdob3N0RWwuc3R5bGUud2lkdGgpICogMTAwICsgJyUgJyArIHRhcERpc3RhbmNlVG9wIC8gcGFyc2VJbnQoZ2hvc3RFbC5zdHlsZS5oZWlnaHQpICogMTAwICsgJyUnKTtcbiAgICB9XG4gIH0sXG4gIF9vbkRyYWdTdGFydDogZnVuY3Rpb24gX29uRHJhZ1N0YXJ0KCAvKipFdmVudCovZXZ0LCAvKipib29sZWFuKi9mYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGRhdGFUcmFuc2ZlciA9IGV2dC5kYXRhVHJhbnNmZXI7XG4gICAgdmFyIG9wdGlvbnMgPSBfdGhpcy5vcHRpb25zO1xuICAgIHBsdWdpbkV2ZW50KCdkcmFnU3RhcnQnLCB0aGlzLCB7XG4gICAgICBldnQ6IGV2dFxuICAgIH0pO1xuICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICB0aGlzLl9vbkRyb3AoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcGx1Z2luRXZlbnQoJ3NldHVwQ2xvbmUnLCB0aGlzKTtcbiAgICBpZiAoIVNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIGNsb25lRWwgPSBjbG9uZShkcmFnRWwpO1xuICAgICAgY2xvbmVFbC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICAgIGNsb25lRWwuZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICBjbG9uZUVsLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJyc7XG4gICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGNsb25lRWwsIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpO1xuICAgICAgU29ydGFibGUuY2xvbmUgPSBjbG9uZUVsO1xuICAgIH1cblxuICAgIC8vICMxMTQzOiBJRnJhbWUgc3VwcG9ydCB3b3JrYXJvdW5kXG4gICAgX3RoaXMuY2xvbmVJZCA9IF9uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBwbHVnaW5FdmVudCgnY2xvbmUnLCBfdGhpcyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuO1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLl9oaWRlQ2xvbmUoKTtcbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICBuYW1lOiAnY2xvbmUnXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAhZmFsbGJhY2sgJiYgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmRyYWdDbGFzcywgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgcHJvcGVyIGRyb3AgZXZlbnRzXG4gICAgaWYgKGZhbGxiYWNrKSB7XG4gICAgICBpZ25vcmVOZXh0Q2xpY2sgPSB0cnVlO1xuICAgICAgX3RoaXMuX2xvb3BJZCA9IHNldEludGVydmFsKF90aGlzLl9lbXVsYXRlRHJhZ092ZXIsIDUwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVW5kbyB3aGF0IHdhcyBzZXQgaW4gX3ByZXBhcmVEcmFnU3RhcnQgYmVmb3JlIGRyYWcgc3RhcnRlZFxuICAgICAgb2ZmKGRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2hlbmQnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBpZiAoZGF0YVRyYW5zZmVyKSB7XG4gICAgICAgIGRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gJ21vdmUnO1xuICAgICAgICBvcHRpb25zLnNldERhdGEgJiYgb3B0aW9ucy5zZXREYXRhLmNhbGwoX3RoaXMsIGRhdGFUcmFuc2ZlciwgZHJhZ0VsKTtcbiAgICAgIH1cbiAgICAgIG9uKGRvY3VtZW50LCAnZHJvcCcsIF90aGlzKTtcblxuICAgICAgLy8gIzEyNzYgZml4OlxuICAgICAgY3NzKGRyYWdFbCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVaKDApJyk7XG4gICAgfVxuICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSB0cnVlO1xuICAgIF90aGlzLl9kcmFnU3RhcnRJZCA9IF9uZXh0VGljayhfdGhpcy5fZHJhZ1N0YXJ0ZWQuYmluZChfdGhpcywgZmFsbGJhY2ssIGV2dCkpO1xuICAgIG9uKGRvY3VtZW50LCAnc2VsZWN0c3RhcnQnLCBfdGhpcyk7XG4gICAgbW92ZWQgPSB0cnVlO1xuICAgIGlmIChTYWZhcmkpIHtcbiAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAndXNlci1zZWxlY3QnLCAnbm9uZScpO1xuICAgIH1cbiAgfSxcbiAgLy8gUmV0dXJucyB0cnVlIC0gaWYgbm8gZnVydGhlciBhY3Rpb24gaXMgbmVlZGVkIChlaXRoZXIgaW5zZXJ0ZWQgb3IgYW5vdGhlciBjb25kaXRpb24pXG4gIF9vbkRyYWdPdmVyOiBmdW5jdGlvbiBfb25EcmFnT3ZlciggLyoqRXZlbnQqL2V2dCkge1xuICAgIHZhciBlbCA9IHRoaXMuZWwsXG4gICAgICB0YXJnZXQgPSBldnQudGFyZ2V0LFxuICAgICAgZHJhZ1JlY3QsXG4gICAgICB0YXJnZXRSZWN0LFxuICAgICAgcmV2ZXJ0LFxuICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgIGdyb3VwID0gb3B0aW9ucy5ncm91cCxcbiAgICAgIGFjdGl2ZVNvcnRhYmxlID0gU29ydGFibGUuYWN0aXZlLFxuICAgICAgaXNPd25lciA9IGFjdGl2ZUdyb3VwID09PSBncm91cCxcbiAgICAgIGNhblNvcnQgPSBvcHRpb25zLnNvcnQsXG4gICAgICBmcm9tU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCBhY3RpdmVTb3J0YWJsZSxcbiAgICAgIHZlcnRpY2FsLFxuICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgY29tcGxldGVkRmlyZWQgPSBmYWxzZTtcbiAgICBpZiAoX3NpbGVudCkgcmV0dXJuO1xuICAgIGZ1bmN0aW9uIGRyYWdPdmVyRXZlbnQobmFtZSwgZXh0cmEpIHtcbiAgICAgIHBsdWdpbkV2ZW50KG5hbWUsIF90aGlzLCBfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgIGV2dDogZXZ0LFxuICAgICAgICBpc093bmVyOiBpc093bmVyLFxuICAgICAgICBheGlzOiB2ZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCcsXG4gICAgICAgIHJldmVydDogcmV2ZXJ0LFxuICAgICAgICBkcmFnUmVjdDogZHJhZ1JlY3QsXG4gICAgICAgIHRhcmdldFJlY3Q6IHRhcmdldFJlY3QsXG4gICAgICAgIGNhblNvcnQ6IGNhblNvcnQsXG4gICAgICAgIGZyb21Tb3J0YWJsZTogZnJvbVNvcnRhYmxlLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWQsXG4gICAgICAgIG9uTW92ZTogZnVuY3Rpb24gb25Nb3ZlKHRhcmdldCwgYWZ0ZXIpIHtcbiAgICAgICAgICByZXR1cm4gX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIGdldFJlY3QodGFyZ2V0KSwgZXZ0LCBhZnRlcik7XG4gICAgICAgIH0sXG4gICAgICAgIGNoYW5nZWQ6IGNoYW5nZWRcbiAgICAgIH0sIGV4dHJhKSk7XG4gICAgfVxuXG4gICAgLy8gQ2FwdHVyZSBhbmltYXRpb24gc3RhdGVcbiAgICBmdW5jdGlvbiBjYXB0dXJlKCkge1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlJyk7XG4gICAgICBfdGhpcy5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgIGlmIChfdGhpcyAhPT0gZnJvbVNvcnRhYmxlKSB7XG4gICAgICAgIGZyb21Tb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gaW52b2NhdGlvbiB3aGVuIGRyYWdFbCBpcyBpbnNlcnRlZCAob3IgY29tcGxldGVkKVxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlZChpbnNlcnRpb24pIHtcbiAgICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyQ29tcGxldGVkJywge1xuICAgICAgICBpbnNlcnRpb246IGluc2VydGlvblxuICAgICAgfSk7XG4gICAgICBpZiAoaW5zZXJ0aW9uKSB7XG4gICAgICAgIC8vIENsb25lcyBtdXN0IGJlIGhpZGRlbiBiZWZvcmUgZm9sZGluZyBhbmltYXRpb24gdG8gY2FwdHVyZSBkcmFnUmVjdEFic29sdXRlIHByb3Blcmx5XG4gICAgICAgIGlmIChpc093bmVyKSB7XG4gICAgICAgICAgYWN0aXZlU29ydGFibGUuX2hpZGVDbG9uZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9zaG93Q2xvbmUoX3RoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpcyAhPT0gZnJvbVNvcnRhYmxlKSB7XG4gICAgICAgICAgLy8gU2V0IGdob3N0IGNsYXNzIHRvIG5ldyBzb3J0YWJsZSdzIGdob3N0IGNsYXNzXG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcyA6IGFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5naG9zdENsYXNzLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHV0U29ydGFibGUgIT09IF90aGlzICYmIF90aGlzICE9PSBTb3J0YWJsZS5hY3RpdmUpIHtcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF90aGlzO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGlzID09PSBTb3J0YWJsZS5hY3RpdmUgJiYgcHV0U29ydGFibGUpIHtcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBbmltYXRpb25cbiAgICAgICAgaWYgKGZyb21Tb3J0YWJsZSA9PT0gX3RoaXMpIHtcbiAgICAgICAgICBfdGhpcy5faWdub3JlV2hpbGVBbmltYXRpbmcgPSB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuYW5pbWF0ZUFsbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJBbmltYXRpb25Db21wbGV0ZScpO1xuICAgICAgICAgIF90aGlzLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoX3RoaXMgIT09IGZyb21Tb3J0YWJsZSkge1xuICAgICAgICAgIGZyb21Tb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgICAgZnJvbVNvcnRhYmxlLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gTnVsbCBsYXN0VGFyZ2V0IGlmIGl0IGlzIG5vdCBpbnNpZGUgYSBwcmV2aW91c2x5IHN3YXBwZWQgZWxlbWVudFxuICAgICAgaWYgKHRhcmdldCA9PT0gZHJhZ0VsICYmICFkcmFnRWwuYW5pbWF0ZWQgfHwgdGFyZ2V0ID09PSBlbCAmJiAhdGFyZ2V0LmFuaW1hdGVkKSB7XG4gICAgICAgIGxhc3RUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBubyBidWJibGluZyBhbmQgbm90IGZhbGxiYWNrXG4gICAgICBpZiAoIW9wdGlvbnMuZHJhZ292ZXJCdWJibGUgJiYgIWV2dC5yb290RWwgJiYgdGFyZ2V0ICE9PSBkb2N1bWVudCkge1xuICAgICAgICBkcmFnRWwucGFyZW50Tm9kZVtleHBhbmRvXS5faXNPdXRzaWRlVGhpc0VsKGV2dC50YXJnZXQpO1xuXG4gICAgICAgIC8vIERvIG5vdCBkZXRlY3QgZm9yIGVtcHR5IGluc2VydCBpZiBhbHJlYWR5IGluc2VydGVkXG4gICAgICAgICFpbnNlcnRpb24gJiYgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQoZXZ0KTtcbiAgICAgIH1cbiAgICAgICFvcHRpb25zLmRyYWdvdmVyQnViYmxlICYmIGV2dC5zdG9wUHJvcGFnYXRpb24gJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuIGNvbXBsZXRlZEZpcmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBDYWxsIHdoZW4gZHJhZ0VsIGhhcyBiZWVuIGluc2VydGVkXG4gICAgZnVuY3Rpb24gY2hhbmdlZCgpIHtcbiAgICAgIG5ld0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcbiAgICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgbmFtZTogJ2NoYW5nZScsXG4gICAgICAgIHRvRWw6IGVsLFxuICAgICAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgICAgIG5ld0RyYWdnYWJsZUluZGV4OiBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGV2dC5wcmV2ZW50RGVmYXVsdCAhPT0gdm9pZCAwKSB7XG4gICAgICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgdGFyZ2V0ID0gY2xvc2VzdCh0YXJnZXQsIG9wdGlvbnMuZHJhZ2dhYmxlLCBlbCwgdHJ1ZSk7XG4gICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXInKTtcbiAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuIGNvbXBsZXRlZEZpcmVkO1xuICAgIGlmIChkcmFnRWwuY29udGFpbnMoZXZ0LnRhcmdldCkgfHwgdGFyZ2V0LmFuaW1hdGVkICYmIHRhcmdldC5hbmltYXRpbmdYICYmIHRhcmdldC5hbmltYXRpbmdZIHx8IF90aGlzLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9PT0gdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICB9XG4gICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2U7XG4gICAgaWYgKGFjdGl2ZVNvcnRhYmxlICYmICFvcHRpb25zLmRpc2FibGVkICYmIChpc093bmVyID8gY2FuU29ydCB8fCAocmV2ZXJ0ID0gcGFyZW50RWwgIT09IHJvb3RFbCkgLy8gUmV2ZXJ0aW5nIGl0ZW0gaW50byB0aGUgb3JpZ2luYWwgbGlzdFxuICAgIDogcHV0U29ydGFibGUgPT09IHRoaXMgfHwgKHRoaXMubGFzdFB1dE1vZGUgPSBhY3RpdmVHcm91cC5jaGVja1B1bGwodGhpcywgYWN0aXZlU29ydGFibGUsIGRyYWdFbCwgZXZ0KSkgJiYgZ3JvdXAuY2hlY2tQdXQodGhpcywgYWN0aXZlU29ydGFibGUsIGRyYWdFbCwgZXZ0KSkpIHtcbiAgICAgIHZlcnRpY2FsID0gdGhpcy5fZ2V0RGlyZWN0aW9uKGV2dCwgdGFyZ2V0KSA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIGRyYWdSZWN0ID0gZ2V0UmVjdChkcmFnRWwpO1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJWYWxpZCcpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybiBjb21wbGV0ZWRGaXJlZDtcbiAgICAgIGlmIChyZXZlcnQpIHtcbiAgICAgICAgcGFyZW50RWwgPSByb290RWw7IC8vIGFjdHVhbGl6YXRpb25cbiAgICAgICAgY2FwdHVyZSgpO1xuICAgICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcbiAgICAgICAgZHJhZ092ZXJFdmVudCgncmV2ZXJ0Jyk7XG4gICAgICAgIGlmICghU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgICAgIGlmIChuZXh0RWwpIHtcbiAgICAgICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBuZXh0RWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBlbExhc3RDaGlsZCA9IGxhc3RDaGlsZChlbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuICAgICAgaWYgKCFlbExhc3RDaGlsZCB8fCBfZ2hvc3RJc0xhc3QoZXZ0LCB2ZXJ0aWNhbCwgdGhpcykgJiYgIWVsTGFzdENoaWxkLmFuaW1hdGVkKSB7XG4gICAgICAgIC8vIEluc2VydCB0byBlbmQgb2YgbGlzdFxuXG4gICAgICAgIC8vIElmIGFscmVhZHkgYXQgZW5kIG9mIGxpc3Q6IERvIG5vdCBpbnNlcnRcbiAgICAgICAgaWYgKGVsTGFzdENoaWxkID09PSBkcmFnRWwpIHtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIGEgbGFzdCBlbGVtZW50LCBpdCBpcyB0aGUgdGFyZ2V0XG4gICAgICAgIGlmIChlbExhc3RDaGlsZCAmJiBlbCA9PT0gZXZ0LnRhcmdldCkge1xuICAgICAgICAgIHRhcmdldCA9IGVsTGFzdENoaWxkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXRSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgdGFyZ2V0UmVjdCwgZXZ0LCAhIXRhcmdldCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgY2FwdHVyZSgpO1xuICAgICAgICAgIGlmIChlbExhc3RDaGlsZCAmJiBlbExhc3RDaGlsZC5uZXh0U2libGluZykge1xuICAgICAgICAgICAgLy8gdGhlIGxhc3QgZHJhZ2dhYmxlIGVsZW1lbnQgaXMgbm90IHRoZSBsYXN0IG5vZGVcbiAgICAgICAgICAgIGVsLmluc2VydEJlZm9yZShkcmFnRWwsIGVsTGFzdENoaWxkLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50RWwgPSBlbDsgLy8gYWN0dWFsaXphdGlvblxuXG4gICAgICAgICAgY2hhbmdlZCgpO1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZWxMYXN0Q2hpbGQgJiYgX2dob3N0SXNGaXJzdChldnQsIHZlcnRpY2FsLCB0aGlzKSkge1xuICAgICAgICAvLyBJbnNlcnQgdG8gc3RhcnQgb2YgbGlzdFxuICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IGdldENoaWxkKGVsLCAwLCBvcHRpb25zLCB0cnVlKTtcbiAgICAgICAgaWYgKGZpcnN0Q2hpbGQgPT09IGRyYWdFbCkge1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldCA9IGZpcnN0Q2hpbGQ7XG4gICAgICAgIHRhcmdldFJlY3QgPSBnZXRSZWN0KHRhcmdldCk7XG4gICAgICAgIGlmIChfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgdGFyZ2V0UmVjdCwgZXZ0LCBmYWxzZSkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgY2FwdHVyZSgpO1xuICAgICAgICAgIGVsLmluc2VydEJlZm9yZShkcmFnRWwsIGZpcnN0Q2hpbGQpO1xuICAgICAgICAgIHBhcmVudEVsID0gZWw7IC8vIGFjdHVhbGl6YXRpb25cblxuICAgICAgICAgIGNoYW5nZWQoKTtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldC5wYXJlbnROb2RlID09PSBlbCkge1xuICAgICAgICB0YXJnZXRSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gMCxcbiAgICAgICAgICB0YXJnZXRCZWZvcmVGaXJzdFN3YXAsXG4gICAgICAgICAgZGlmZmVyZW50TGV2ZWwgPSBkcmFnRWwucGFyZW50Tm9kZSAhPT0gZWwsXG4gICAgICAgICAgZGlmZmVyZW50Um93Q29sID0gIV9kcmFnRWxJblJvd0NvbHVtbihkcmFnRWwuYW5pbWF0ZWQgJiYgZHJhZ0VsLnRvUmVjdCB8fCBkcmFnUmVjdCwgdGFyZ2V0LmFuaW1hdGVkICYmIHRhcmdldC50b1JlY3QgfHwgdGFyZ2V0UmVjdCwgdmVydGljYWwpLFxuICAgICAgICAgIHNpZGUxID0gdmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JyxcbiAgICAgICAgICBzY3JvbGxlZFBhc3RUb3AgPSBpc1Njcm9sbGVkUGFzdCh0YXJnZXQsICd0b3AnLCAndG9wJykgfHwgaXNTY3JvbGxlZFBhc3QoZHJhZ0VsLCAndG9wJywgJ3RvcCcpLFxuICAgICAgICAgIHNjcm9sbEJlZm9yZSA9IHNjcm9sbGVkUGFzdFRvcCA/IHNjcm9sbGVkUGFzdFRvcC5zY3JvbGxUb3AgOiB2b2lkIDA7XG4gICAgICAgIGlmIChsYXN0VGFyZ2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXRCZWZvcmVGaXJzdFN3YXAgPSB0YXJnZXRSZWN0W3NpZGUxXTtcbiAgICAgICAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZTtcbiAgICAgICAgICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gIWRpZmZlcmVudFJvd0NvbCAmJiBvcHRpb25zLmludmVydFN3YXAgfHwgZGlmZmVyZW50TGV2ZWw7XG4gICAgICAgIH1cbiAgICAgICAgZGlyZWN0aW9uID0gX2dldFN3YXBEaXJlY3Rpb24oZXZ0LCB0YXJnZXQsIHRhcmdldFJlY3QsIHZlcnRpY2FsLCBkaWZmZXJlbnRSb3dDb2wgPyAxIDogb3B0aW9ucy5zd2FwVGhyZXNob2xkLCBvcHRpb25zLmludmVydGVkU3dhcFRocmVzaG9sZCA9PSBudWxsID8gb3B0aW9ucy5zd2FwVGhyZXNob2xkIDogb3B0aW9ucy5pbnZlcnRlZFN3YXBUaHJlc2hvbGQsIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQsIGxhc3RUYXJnZXQgPT09IHRhcmdldCk7XG4gICAgICAgIHZhciBzaWJsaW5nO1xuICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSAwKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGFyZ2V0IGlzIGJlc2lkZSBkcmFnRWwgaW4gcmVzcGVjdGl2ZSBkaXJlY3Rpb24gKGlnbm9yaW5nIGhpZGRlbiBlbGVtZW50cylcbiAgICAgICAgICB2YXIgZHJhZ0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBkcmFnSW5kZXggLT0gZGlyZWN0aW9uO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudEVsLmNoaWxkcmVuW2RyYWdJbmRleF07XG4gICAgICAgICAgfSB3aGlsZSAoc2libGluZyAmJiAoY3NzKHNpYmxpbmcsICdkaXNwbGF5JykgPT09ICdub25lJyB8fCBzaWJsaW5nID09PSBnaG9zdEVsKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgZHJhZ0VsIGlzIGFscmVhZHkgYmVzaWRlIHRhcmdldDogRG8gbm90IGluc2VydFxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAwIHx8IHNpYmxpbmcgPT09IHRhcmdldCkge1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIGxhc3REaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHZhciBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcsXG4gICAgICAgICAgYWZ0ZXIgPSBmYWxzZTtcbiAgICAgICAgYWZ0ZXIgPSBkaXJlY3Rpb24gPT09IDE7XG4gICAgICAgIHZhciBtb3ZlVmVjdG9yID0gX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIHRhcmdldFJlY3QsIGV2dCwgYWZ0ZXIpO1xuICAgICAgICBpZiAobW92ZVZlY3RvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAobW92ZVZlY3RvciA9PT0gMSB8fCBtb3ZlVmVjdG9yID09PSAtMSkge1xuICAgICAgICAgICAgYWZ0ZXIgPSBtb3ZlVmVjdG9yID09PSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfc2lsZW50ID0gdHJ1ZTtcbiAgICAgICAgICBzZXRUaW1lb3V0KF91bnNpbGVudCwgMzApO1xuICAgICAgICAgIGNhcHR1cmUoKTtcbiAgICAgICAgICBpZiAoYWZ0ZXIgJiYgIW5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBhZnRlciA/IG5leHRTaWJsaW5nIDogdGFyZ2V0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBVbmRvIGNocm9tZSdzIHNjcm9sbCBhZGp1c3RtZW50IChoYXMgbm8gZWZmZWN0IG9uIG90aGVyIGJyb3dzZXJzKVxuICAgICAgICAgIGlmIChzY3JvbGxlZFBhc3RUb3ApIHtcbiAgICAgICAgICAgIHNjcm9sbEJ5KHNjcm9sbGVkUGFzdFRvcCwgMCwgc2Nyb2xsQmVmb3JlIC0gc2Nyb2xsZWRQYXN0VG9wLnNjcm9sbFRvcCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudEVsID0gZHJhZ0VsLnBhcmVudE5vZGU7IC8vIGFjdHVhbGl6YXRpb25cblxuICAgICAgICAgIC8vIG11c3QgYmUgZG9uZSBiZWZvcmUgYW5pbWF0aW9uXG4gICAgICAgICAgaWYgKHRhcmdldEJlZm9yZUZpcnN0U3dhcCAhPT0gdW5kZWZpbmVkICYmICFpc0NpcmN1bXN0YW50aWFsSW52ZXJ0KSB7XG4gICAgICAgICAgICB0YXJnZXRNb3ZlRGlzdGFuY2UgPSBNYXRoLmFicyh0YXJnZXRCZWZvcmVGaXJzdFN3YXAgLSBnZXRSZWN0KHRhcmdldClbc2lkZTFdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hhbmdlZCgpO1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbC5jb250YWlucyhkcmFnRWwpKSB7XG4gICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIF9pZ25vcmVXaGlsZUFuaW1hdGluZzogbnVsbCxcbiAgX29mZk1vdmVFdmVudHM6IGZ1bmN0aW9uIF9vZmZNb3ZlRXZlbnRzKCkge1xuICAgIG9mZihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICBvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAnZHJhZ292ZXInLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgIG9mZihkb2N1bWVudCwgJ3RvdWNobW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgfSxcbiAgX29mZlVwRXZlbnRzOiBmdW5jdGlvbiBfb2ZmVXBFdmVudHMoKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSB0aGlzLmVsLm93bmVyRG9jdW1lbnQ7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdwb2ludGVyY2FuY2VsJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYoZG9jdW1lbnQsICdzZWxlY3RzdGFydCcsIHRoaXMpO1xuICB9LFxuICBfb25Ecm9wOiBmdW5jdGlvbiBfb25Ecm9wKCAvKipFdmVudCovZXZ0KSB7XG4gICAgdmFyIGVsID0gdGhpcy5lbCxcbiAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnRcbiAgICBuZXdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG4gICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBpbmRleChkcmFnRWwsIG9wdGlvbnMuZHJhZ2dhYmxlKTtcbiAgICBwbHVnaW5FdmVudCgnZHJvcCcsIHRoaXMsIHtcbiAgICAgIGV2dDogZXZ0XG4gICAgfSk7XG4gICAgcGFyZW50RWwgPSBkcmFnRWwgJiYgZHJhZ0VsLnBhcmVudE5vZGU7XG5cbiAgICAvLyBHZXQgYWdhaW4gYWZ0ZXIgcGx1Z2luIGV2ZW50XG4gICAgbmV3SW5kZXggPSBpbmRleChkcmFnRWwpO1xuICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG4gICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIHRoaXMuX251bGxpbmcoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlO1xuICAgIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQgPSBmYWxzZTtcbiAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZTtcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2xvb3BJZCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2RyYWdTdGFydFRpbWVyKTtcbiAgICBfY2FuY2VsTmV4dFRpY2sodGhpcy5jbG9uZUlkKTtcbiAgICBfY2FuY2VsTmV4dFRpY2sodGhpcy5fZHJhZ1N0YXJ0SWQpO1xuXG4gICAgLy8gVW5iaW5kIGV2ZW50c1xuICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgb2ZmKGRvY3VtZW50LCAnZHJvcCcsIHRoaXMpO1xuICAgICAgb2ZmKGVsLCAnZHJhZ3N0YXJ0JywgdGhpcy5fb25EcmFnU3RhcnQpO1xuICAgIH1cbiAgICB0aGlzLl9vZmZNb3ZlRXZlbnRzKCk7XG4gICAgdGhpcy5fb2ZmVXBFdmVudHMoKTtcbiAgICBpZiAoU2FmYXJpKSB7XG4gICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ3VzZXItc2VsZWN0JywgJycpO1xuICAgIH1cbiAgICBjc3MoZHJhZ0VsLCAndHJhbnNmb3JtJywgJycpO1xuICAgIGlmIChldnQpIHtcbiAgICAgIGlmIChtb3ZlZCkge1xuICAgICAgICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgIW9wdGlvbnMuZHJvcEJ1YmJsZSAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgICBnaG9zdEVsICYmIGdob3N0RWwucGFyZW50Tm9kZSAmJiBnaG9zdEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZ2hvc3RFbCk7XG4gICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgICAvLyBSZW1vdmUgY2xvbmUocylcbiAgICAgICAgY2xvbmVFbCAmJiBjbG9uZUVsLnBhcmVudE5vZGUgJiYgY2xvbmVFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lRWwpO1xuICAgICAgfVxuICAgICAgaWYgKGRyYWdFbCkge1xuICAgICAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgICBvZmYoZHJhZ0VsLCAnZHJhZ2VuZCcsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIF9kaXNhYmxlRHJhZ2dhYmxlKGRyYWdFbCk7XG4gICAgICAgIGRyYWdFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnO1xuXG4gICAgICAgIC8vIFJlbW92ZSBjbGFzc2VzXG4gICAgICAgIC8vIGdob3N0Q2xhc3MgaXMgYWRkZWQgaW4gZHJhZ1N0YXJ0ZWRcbiAgICAgICAgaWYgKG1vdmVkICYmICFhd2FpdGluZ0RyYWdTdGFydGVkKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcyA6IHRoaXMub3B0aW9ucy5naG9zdENsYXNzLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTtcblxuICAgICAgICAvLyBEcmFnIHN0b3AgZXZlbnRcbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgIG5hbWU6ICd1bmNob29zZScsXG4gICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgbmV3SW5kZXg6IG51bGwsXG4gICAgICAgICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG51bGwsXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocm9vdEVsICE9PSBwYXJlbnRFbCkge1xuICAgICAgICAgIGlmIChuZXdJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAvLyBBZGQgZXZlbnRcbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgbmFtZTogJ2FkZCcsXG4gICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBmcm9tRWw6IHJvb3RFbCxcbiAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUmVtb3ZlIGV2ZW50XG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICBuYW1lOiAncmVtb3ZlJyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGRyYWcgZnJvbSBvbmUgbGlzdCBhbmQgZHJvcCBpbnRvIGFub3RoZXJcbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgbmFtZTogJ3NvcnQnLFxuICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgZnJvbUVsOiByb290RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICBuYW1lOiAnc29ydCcsXG4gICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5zYXZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG5ld0luZGV4ICE9PSBvbGRJbmRleCkge1xuICAgICAgICAgICAgaWYgKG5ld0luZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgLy8gZHJhZyAmIGRyb3Agd2l0aGluIHRoZSBzYW1lIGxpc3RcbiAgICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICd1cGRhdGUnLFxuICAgICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdzb3J0JyxcbiAgICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChTb3J0YWJsZS5hY3RpdmUpIHtcbiAgICAgICAgICAvKiBqc2hpbnQgZXFudWxsOnRydWUgKi9cbiAgICAgICAgICBpZiAobmV3SW5kZXggPT0gbnVsbCB8fCBuZXdJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5ld0luZGV4ID0gb2xkSW5kZXg7XG4gICAgICAgICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICAgIG5hbWU6ICdlbmQnLFxuICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIFNhdmUgc29ydGluZ1xuICAgICAgICAgIHRoaXMuc2F2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX251bGxpbmcoKTtcbiAgfSxcbiAgX251bGxpbmc6IGZ1bmN0aW9uIF9udWxsaW5nKCkge1xuICAgIHBsdWdpbkV2ZW50KCdudWxsaW5nJywgdGhpcyk7XG4gICAgcm9vdEVsID0gZHJhZ0VsID0gcGFyZW50RWwgPSBnaG9zdEVsID0gbmV4dEVsID0gY2xvbmVFbCA9IGxhc3REb3duRWwgPSBjbG9uZUhpZGRlbiA9IHRhcEV2dCA9IHRvdWNoRXZ0ID0gbW92ZWQgPSBuZXdJbmRleCA9IG5ld0RyYWdnYWJsZUluZGV4ID0gb2xkSW5kZXggPSBvbGREcmFnZ2FibGVJbmRleCA9IGxhc3RUYXJnZXQgPSBsYXN0RGlyZWN0aW9uID0gcHV0U29ydGFibGUgPSBhY3RpdmVHcm91cCA9IFNvcnRhYmxlLmRyYWdnZWQgPSBTb3J0YWJsZS5naG9zdCA9IFNvcnRhYmxlLmNsb25lID0gU29ydGFibGUuYWN0aXZlID0gbnVsbDtcbiAgICBzYXZlZElucHV0Q2hlY2tlZC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgZWwuY2hlY2tlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgc2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gbGFzdER4ID0gbGFzdER5ID0gMDtcbiAgfSxcbiAgaGFuZGxlRXZlbnQ6IGZ1bmN0aW9uIGhhbmRsZUV2ZW50KCAvKipFdmVudCovZXZ0KSB7XG4gICAgc3dpdGNoIChldnQudHlwZSkge1xuICAgICAgY2FzZSAnZHJvcCc6XG4gICAgICBjYXNlICdkcmFnZW5kJzpcbiAgICAgICAgdGhpcy5fb25Ecm9wKGV2dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZHJhZ2VudGVyJzpcbiAgICAgIGNhc2UgJ2RyYWdvdmVyJzpcbiAgICAgICAgaWYgKGRyYWdFbCkge1xuICAgICAgICAgIHRoaXMuX29uRHJhZ092ZXIoZXZ0KTtcbiAgICAgICAgICBfZ2xvYmFsRHJhZ092ZXIoZXZ0KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdHN0YXJ0JzpcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSxcbiAgLyoqXHJcbiAgICogU2VyaWFsaXplcyB0aGUgaXRlbSBpbnRvIGFuIGFycmF5IG9mIHN0cmluZy5cclxuICAgKiBAcmV0dXJucyB7U3RyaW5nW119XHJcbiAgICovXG4gIHRvQXJyYXk6IGZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgdmFyIG9yZGVyID0gW10sXG4gICAgICBlbCxcbiAgICAgIGNoaWxkcmVuID0gdGhpcy5lbC5jaGlsZHJlbixcbiAgICAgIGkgPSAwLFxuICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgZm9yICg7IGkgPCBuOyBpKyspIHtcbiAgICAgIGVsID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoY2xvc2VzdChlbCwgb3B0aW9ucy5kcmFnZ2FibGUsIHRoaXMuZWwsIGZhbHNlKSkge1xuICAgICAgICBvcmRlci5wdXNoKGVsLmdldEF0dHJpYnV0ZShvcHRpb25zLmRhdGFJZEF0dHIpIHx8IF9nZW5lcmF0ZUlkKGVsKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcmRlcjtcbiAgfSxcbiAgLyoqXHJcbiAgICogU29ydHMgdGhlIGVsZW1lbnRzIGFjY29yZGluZyB0byB0aGUgYXJyYXkuXHJcbiAgICogQHBhcmFtICB7U3RyaW5nW119ICBvcmRlciAgb3JkZXIgb2YgdGhlIGl0ZW1zXHJcbiAgICovXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQob3JkZXIsIHVzZUFuaW1hdGlvbikge1xuICAgIHZhciBpdGVtcyA9IHt9LFxuICAgICAgcm9vdEVsID0gdGhpcy5lbDtcbiAgICB0aGlzLnRvQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCwgaSkge1xuICAgICAgdmFyIGVsID0gcm9vdEVsLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGNsb3Nlc3QoZWwsIHRoaXMub3B0aW9ucy5kcmFnZ2FibGUsIHJvb3RFbCwgZmFsc2UpKSB7XG4gICAgICAgIGl0ZW1zW2lkXSA9IGVsO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICAgIHVzZUFuaW1hdGlvbiAmJiB0aGlzLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICBpZiAoaXRlbXNbaWRdKSB7XG4gICAgICAgIHJvb3RFbC5yZW1vdmVDaGlsZChpdGVtc1tpZF0pO1xuICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoaXRlbXNbaWRdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VBbmltYXRpb24gJiYgdGhpcy5hbmltYXRlQWxsKCk7XG4gIH0sXG4gIC8qKlxyXG4gICAqIFNhdmUgdGhlIGN1cnJlbnQgc29ydGluZ1xyXG4gICAqL1xuICBzYXZlOiBmdW5jdGlvbiBzYXZlKCkge1xuICAgIHZhciBzdG9yZSA9IHRoaXMub3B0aW9ucy5zdG9yZTtcbiAgICBzdG9yZSAmJiBzdG9yZS5zZXQgJiYgc3RvcmUuc2V0KHRoaXMpO1xuICB9LFxuICAvKipcclxuICAgKiBGb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQsIGdldCB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIGJ5IHRlc3RpbmcgdGhlIGVsZW1lbnQgaXRzZWxmIGFuZCB0cmF2ZXJzaW5nIHVwIHRocm91Z2ggaXRzIGFuY2VzdG9ycyBpbiB0aGUgRE9NIHRyZWUuXHJcbiAgICogQHBhcmFtICAge0hUTUxFbGVtZW50fSAgZWxcclxuICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgICBbc2VsZWN0b3JdICBkZWZhdWx0OiBgb3B0aW9ucy5kcmFnZ2FibGVgXHJcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fG51bGx9XHJcbiAgICovXG4gIGNsb3Nlc3Q6IGZ1bmN0aW9uIGNsb3Nlc3QkMShlbCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gY2xvc2VzdChlbCwgc2VsZWN0b3IgfHwgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSwgdGhpcy5lbCwgZmFsc2UpO1xuICB9LFxuICAvKipcclxuICAgKiBTZXQvZ2V0IG9wdGlvblxyXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcclxuICAgKiBAcGFyYW0gICB7Kn0gICAgICBbdmFsdWVdXHJcbiAgICogQHJldHVybnMgeyp9XHJcbiAgICovXG4gIG9wdGlvbjogZnVuY3Rpb24gb3B0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBvcHRpb25zW25hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbW9kaWZpZWRWYWx1ZSA9IFBsdWdpbk1hbmFnZXIubW9kaWZ5T3B0aW9uKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIGlmICh0eXBlb2YgbW9kaWZpZWRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgb3B0aW9uc1tuYW1lXSA9IG1vZGlmaWVkVmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zW25hbWVdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PT0gJ2dyb3VwJykge1xuICAgICAgICBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgLyoqXHJcbiAgICogRGVzdHJveVxyXG4gICAqL1xuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHBsdWdpbkV2ZW50KCdkZXN0cm95JywgdGhpcyk7XG4gICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICBlbFtleHBhbmRvXSA9IG51bGw7XG4gICAgb2ZmKGVsLCAnbW91c2Vkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gICAgb2ZmKGVsLCAndG91Y2hzdGFydCcsIHRoaXMuX29uVGFwU3RhcnQpO1xuICAgIG9mZihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICBvZmYoZWwsICdkcmFnb3ZlcicsIHRoaXMpO1xuICAgICAgb2ZmKGVsLCAnZHJhZ2VudGVyJywgdGhpcyk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBkcmFnZ2FibGUgYXR0cmlidXRlc1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnW2RyYWdnYWJsZV0nKSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RyYWdnYWJsZScpO1xuICAgIH0pO1xuICAgIHRoaXMuX29uRHJvcCgpO1xuICAgIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuICAgIHNvcnRhYmxlcy5zcGxpY2Uoc29ydGFibGVzLmluZGV4T2YodGhpcy5lbCksIDEpO1xuICAgIHRoaXMuZWwgPSBlbCA9IG51bGw7XG4gIH0sXG4gIF9oaWRlQ2xvbmU6IGZ1bmN0aW9uIF9oaWRlQ2xvbmUoKSB7XG4gICAgaWYgKCFjbG9uZUhpZGRlbikge1xuICAgICAgcGx1Z2luRXZlbnQoJ2hpZGVDbG9uZScsIHRoaXMpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjtcbiAgICAgIGNzcyhjbG9uZUVsLCAnZGlzcGxheScsICdub25lJyk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlICYmIGNsb25lRWwucGFyZW50Tm9kZSkge1xuICAgICAgICBjbG9uZUVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmVFbCk7XG4gICAgICB9XG4gICAgICBjbG9uZUhpZGRlbiA9IHRydWU7XG4gICAgfVxuICB9LFxuICBfc2hvd0Nsb25lOiBmdW5jdGlvbiBfc2hvd0Nsb25lKHB1dFNvcnRhYmxlKSB7XG4gICAgaWYgKHB1dFNvcnRhYmxlLmxhc3RQdXRNb2RlICE9PSAnY2xvbmUnKSB7XG4gICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNsb25lSGlkZGVuKSB7XG4gICAgICBwbHVnaW5FdmVudCgnc2hvd0Nsb25lJywgdGhpcyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuO1xuXG4gICAgICAvLyBzaG93IGNsb25lIGF0IGRyYWdFbCBvciBvcmlnaW5hbCBwb3NpdGlvblxuICAgICAgaWYgKGRyYWdFbC5wYXJlbnROb2RlID09IHJvb3RFbCAmJiAhdGhpcy5vcHRpb25zLmdyb3VwLnJldmVydENsb25lKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcbiAgICAgIH0gZWxzZSBpZiAobmV4dEVsKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgbmV4dEVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChjbG9uZUVsKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ3JvdXAucmV2ZXJ0Q2xvbmUpIHtcbiAgICAgICAgdGhpcy5hbmltYXRlKGRyYWdFbCwgY2xvbmVFbCk7XG4gICAgICB9XG4gICAgICBjc3MoY2xvbmVFbCwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgICBjbG9uZUhpZGRlbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIF9nbG9iYWxEcmFnT3ZlciggLyoqRXZlbnQqL2V2dCkge1xuICBpZiAoZXZ0LmRhdGFUcmFuc2Zlcikge1xuICAgIGV2dC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdtb3ZlJztcbiAgfVxuICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbn1cbmZ1bmN0aW9uIF9vbk1vdmUoZnJvbUVsLCB0b0VsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXRFbCwgdGFyZ2V0UmVjdCwgb3JpZ2luYWxFdmVudCwgd2lsbEluc2VydEFmdGVyKSB7XG4gIHZhciBldnQsXG4gICAgc29ydGFibGUgPSBmcm9tRWxbZXhwYW5kb10sXG4gICAgb25Nb3ZlRm4gPSBzb3J0YWJsZS5vcHRpb25zLm9uTW92ZSxcbiAgICByZXRWYWw7XG4gIC8vIFN1cHBvcnQgZm9yIG5ldyBDdXN0b21FdmVudCBmZWF0dXJlXG4gIGlmICh3aW5kb3cuQ3VzdG9tRXZlbnQgJiYgIUlFMTFPckxlc3MgJiYgIUVkZ2UpIHtcbiAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ21vdmUnLCB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2dC5pbml0RXZlbnQoJ21vdmUnLCB0cnVlLCB0cnVlKTtcbiAgfVxuICBldnQudG8gPSB0b0VsO1xuICBldnQuZnJvbSA9IGZyb21FbDtcbiAgZXZ0LmRyYWdnZWQgPSBkcmFnRWw7XG4gIGV2dC5kcmFnZ2VkUmVjdCA9IGRyYWdSZWN0O1xuICBldnQucmVsYXRlZCA9IHRhcmdldEVsIHx8IHRvRWw7XG4gIGV2dC5yZWxhdGVkUmVjdCA9IHRhcmdldFJlY3QgfHwgZ2V0UmVjdCh0b0VsKTtcbiAgZXZ0LndpbGxJbnNlcnRBZnRlciA9IHdpbGxJbnNlcnRBZnRlcjtcbiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICBmcm9tRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICBpZiAob25Nb3ZlRm4pIHtcbiAgICByZXRWYWwgPSBvbk1vdmVGbi5jYWxsKHNvcnRhYmxlLCBldnQsIG9yaWdpbmFsRXZlbnQpO1xuICB9XG4gIHJldHVybiByZXRWYWw7XG59XG5mdW5jdGlvbiBfZGlzYWJsZURyYWdnYWJsZShlbCkge1xuICBlbC5kcmFnZ2FibGUgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIF91bnNpbGVudCgpIHtcbiAgX3NpbGVudCA9IGZhbHNlO1xufVxuZnVuY3Rpb24gX2dob3N0SXNGaXJzdChldnQsIHZlcnRpY2FsLCBzb3J0YWJsZSkge1xuICB2YXIgZmlyc3RFbFJlY3QgPSBnZXRSZWN0KGdldENoaWxkKHNvcnRhYmxlLmVsLCAwLCBzb3J0YWJsZS5vcHRpb25zLCB0cnVlKSk7XG4gIHZhciBjaGlsZENvbnRhaW5pbmdSZWN0ID0gZ2V0Q2hpbGRDb250YWluaW5nUmVjdEZyb21FbGVtZW50KHNvcnRhYmxlLmVsLCBzb3J0YWJsZS5vcHRpb25zLCBnaG9zdEVsKTtcbiAgdmFyIHNwYWNlciA9IDEwO1xuICByZXR1cm4gdmVydGljYWwgPyBldnQuY2xpZW50WCA8IGNoaWxkQ29udGFpbmluZ1JlY3QubGVmdCAtIHNwYWNlciB8fCBldnQuY2xpZW50WSA8IGZpcnN0RWxSZWN0LnRvcCAmJiBldnQuY2xpZW50WCA8IGZpcnN0RWxSZWN0LnJpZ2h0IDogZXZ0LmNsaWVudFkgPCBjaGlsZENvbnRhaW5pbmdSZWN0LnRvcCAtIHNwYWNlciB8fCBldnQuY2xpZW50WSA8IGZpcnN0RWxSZWN0LmJvdHRvbSAmJiBldnQuY2xpZW50WCA8IGZpcnN0RWxSZWN0LmxlZnQ7XG59XG5mdW5jdGlvbiBfZ2hvc3RJc0xhc3QoZXZ0LCB2ZXJ0aWNhbCwgc29ydGFibGUpIHtcbiAgdmFyIGxhc3RFbFJlY3QgPSBnZXRSZWN0KGxhc3RDaGlsZChzb3J0YWJsZS5lbCwgc29ydGFibGUub3B0aW9ucy5kcmFnZ2FibGUpKTtcbiAgdmFyIGNoaWxkQ29udGFpbmluZ1JlY3QgPSBnZXRDaGlsZENvbnRhaW5pbmdSZWN0RnJvbUVsZW1lbnQoc29ydGFibGUuZWwsIHNvcnRhYmxlLm9wdGlvbnMsIGdob3N0RWwpO1xuICB2YXIgc3BhY2VyID0gMTA7XG4gIHJldHVybiB2ZXJ0aWNhbCA/IGV2dC5jbGllbnRYID4gY2hpbGRDb250YWluaW5nUmVjdC5yaWdodCArIHNwYWNlciB8fCBldnQuY2xpZW50WSA+IGxhc3RFbFJlY3QuYm90dG9tICYmIGV2dC5jbGllbnRYID4gbGFzdEVsUmVjdC5sZWZ0IDogZXZ0LmNsaWVudFkgPiBjaGlsZENvbnRhaW5pbmdSZWN0LmJvdHRvbSArIHNwYWNlciB8fCBldnQuY2xpZW50WCA+IGxhc3RFbFJlY3QucmlnaHQgJiYgZXZ0LmNsaWVudFkgPiBsYXN0RWxSZWN0LnRvcDtcbn1cbmZ1bmN0aW9uIF9nZXRTd2FwRGlyZWN0aW9uKGV2dCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCwgc3dhcFRocmVzaG9sZCwgaW52ZXJ0ZWRTd2FwVGhyZXNob2xkLCBpbnZlcnRTd2FwLCBpc0xhc3RUYXJnZXQpIHtcbiAgdmFyIG1vdXNlT25BeGlzID0gdmVydGljYWwgPyBldnQuY2xpZW50WSA6IGV2dC5jbGllbnRYLFxuICAgIHRhcmdldExlbmd0aCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5oZWlnaHQgOiB0YXJnZXRSZWN0LndpZHRoLFxuICAgIHRhcmdldFMxID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LnRvcCA6IHRhcmdldFJlY3QubGVmdCxcbiAgICB0YXJnZXRTMiA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5ib3R0b20gOiB0YXJnZXRSZWN0LnJpZ2h0LFxuICAgIGludmVydCA9IGZhbHNlO1xuICBpZiAoIWludmVydFN3YXApIHtcbiAgICAvLyBOZXZlciBpbnZlcnQgb3IgY3JlYXRlIGRyYWdFbCBzaGFkb3cgd2hlbiB0YXJnZXQgbW92ZW1lbmV0IGNhdXNlcyBtb3VzZSB0byBtb3ZlIHBhc3QgdGhlIGVuZCBvZiByZWd1bGFyIHN3YXBUaHJlc2hvbGRcbiAgICBpZiAoaXNMYXN0VGFyZ2V0ICYmIHRhcmdldE1vdmVEaXN0YW5jZSA8IHRhcmdldExlbmd0aCAqIHN3YXBUaHJlc2hvbGQpIHtcbiAgICAgIC8vIG11bHRpcGxpZWQgb25seSBieSBzd2FwVGhyZXNob2xkIGJlY2F1c2UgbW91c2Ugd2lsbCBhbHJlYWR5IGJlIGluc2lkZSB0YXJnZXQgYnkgKDEgLSB0aHJlc2hvbGQpICogdGFyZ2V0TGVuZ3RoIC8gMlxuICAgICAgLy8gY2hlY2sgaWYgcGFzdCBmaXJzdCBpbnZlcnQgdGhyZXNob2xkIG9uIHNpZGUgb3Bwb3NpdGUgb2YgbGFzdERpcmVjdGlvblxuICAgICAgaWYgKCFwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggJiYgKGxhc3REaXJlY3Rpb24gPT09IDEgPyBtb3VzZU9uQXhpcyA+IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoICogaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIC8gMiA6IG1vdXNlT25BeGlzIDwgdGFyZ2V0UzIgLSB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyKSkge1xuICAgICAgICAvLyBwYXN0IGZpcnN0IGludmVydCB0aHJlc2hvbGQsIGRvIG5vdCByZXN0cmljdCBpbnZlcnRlZCB0aHJlc2hvbGQgdG8gZHJhZ0VsIHNoYWRvd1xuICAgICAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFwYXN0Rmlyc3RJbnZlcnRUaHJlc2gpIHtcbiAgICAgICAgLy8gZHJhZ0VsIHNoYWRvdyAodGFyZ2V0IG1vdmUgZGlzdGFuY2Ugc2hhZG93KVxuICAgICAgICBpZiAobGFzdERpcmVjdGlvbiA9PT0gMSA/IG1vdXNlT25BeGlzIDwgdGFyZ2V0UzEgKyB0YXJnZXRNb3ZlRGlzdGFuY2UgLy8gb3ZlciBkcmFnRWwgc2hhZG93XG4gICAgICAgIDogbW91c2VPbkF4aXMgPiB0YXJnZXRTMiAtIHRhcmdldE1vdmVEaXN0YW5jZSkge1xuICAgICAgICAgIHJldHVybiAtbGFzdERpcmVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW52ZXJ0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVndWxhclxuICAgICAgaWYgKG1vdXNlT25BeGlzID4gdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiAoMSAtIHN3YXBUaHJlc2hvbGQpIC8gMiAmJiBtb3VzZU9uQXhpcyA8IHRhcmdldFMyIC0gdGFyZ2V0TGVuZ3RoICogKDEgLSBzd2FwVGhyZXNob2xkKSAvIDIpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRJbnNlcnREaXJlY3Rpb24odGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaW52ZXJ0ID0gaW52ZXJ0IHx8IGludmVydFN3YXA7XG4gIGlmIChpbnZlcnQpIHtcbiAgICAvLyBJbnZlcnQgb2YgcmVndWxhclxuICAgIGlmIChtb3VzZU9uQXhpcyA8IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoICogaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIC8gMiB8fCBtb3VzZU9uQXhpcyA+IHRhcmdldFMyIC0gdGFyZ2V0TGVuZ3RoICogaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIC8gMikge1xuICAgICAgcmV0dXJuIG1vdXNlT25BeGlzID4gdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggLyAyID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLyoqXHJcbiAqIEdldHMgdGhlIGRpcmVjdGlvbiBkcmFnRWwgbXVzdCBiZSBzd2FwcGVkIHJlbGF0aXZlIHRvIHRhcmdldCBpbiBvcmRlciB0byBtYWtlIGl0XHJcbiAqIHNlZW0gdGhhdCBkcmFnRWwgaGFzIGJlZW4gXCJpbnNlcnRlZFwiIGludG8gdGhhdCBlbGVtZW50J3MgcG9zaXRpb25cclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IHRhcmdldCAgICAgICBUaGUgdGFyZ2V0IHdob3NlIHBvc2l0aW9uIGRyYWdFbCBpcyBiZWluZyBpbnNlcnRlZCBhdFxyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgIERpcmVjdGlvbiBkcmFnRWwgbXVzdCBiZSBzd2FwcGVkXHJcbiAqL1xuZnVuY3Rpb24gX2dldEluc2VydERpcmVjdGlvbih0YXJnZXQpIHtcbiAgaWYgKGluZGV4KGRyYWdFbCkgPCBpbmRleCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59XG5cbi8qKlxyXG4gKiBHZW5lcmF0ZSBpZFxyXG4gKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9IGVsXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xuZnVuY3Rpb24gX2dlbmVyYXRlSWQoZWwpIHtcbiAgdmFyIHN0ciA9IGVsLnRhZ05hbWUgKyBlbC5jbGFzc05hbWUgKyBlbC5zcmMgKyBlbC5ocmVmICsgZWwudGV4dENvbnRlbnQsXG4gICAgaSA9IHN0ci5sZW5ndGgsXG4gICAgc3VtID0gMDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHN1bSArPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gc3VtLnRvU3RyaW5nKDM2KTtcbn1cbmZ1bmN0aW9uIF9zYXZlSW5wdXRDaGVja2VkU3RhdGUocm9vdCkge1xuICBzYXZlZElucHV0Q2hlY2tlZC5sZW5ndGggPSAwO1xuICB2YXIgaW5wdXRzID0gcm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKTtcbiAgdmFyIGlkeCA9IGlucHV0cy5sZW5ndGg7XG4gIHdoaWxlIChpZHgtLSkge1xuICAgIHZhciBlbCA9IGlucHV0c1tpZHhdO1xuICAgIGVsLmNoZWNrZWQgJiYgc2F2ZWRJbnB1dENoZWNrZWQucHVzaChlbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9uZXh0VGljayhmbikge1xuICByZXR1cm4gc2V0VGltZW91dChmbiwgMCk7XG59XG5mdW5jdGlvbiBfY2FuY2VsTmV4dFRpY2soaWQpIHtcbiAgcmV0dXJuIGNsZWFyVGltZW91dChpZCk7XG59XG5cbi8vIEZpeGVkICM5NzM6XG5pZiAoZG9jdW1lbnRFeGlzdHMpIHtcbiAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgaWYgKChTb3J0YWJsZS5hY3RpdmUgfHwgYXdhaXRpbmdEcmFnU3RhcnRlZCkgJiYgZXZ0LmNhbmNlbGFibGUpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIEV4cG9ydCB1dGlsc1xuU29ydGFibGUudXRpbHMgPSB7XG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIGNzczogY3NzLFxuICBmaW5kOiBmaW5kLFxuICBpczogZnVuY3Rpb24gaXMoZWwsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuICEhY2xvc2VzdChlbCwgc2VsZWN0b3IsIGVsLCBmYWxzZSk7XG4gIH0sXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0aHJvdHRsZTogdGhyb3R0bGUsXG4gIGNsb3Nlc3Q6IGNsb3Nlc3QsXG4gIHRvZ2dsZUNsYXNzOiB0b2dnbGVDbGFzcyxcbiAgY2xvbmU6IGNsb25lLFxuICBpbmRleDogaW5kZXgsXG4gIG5leHRUaWNrOiBfbmV4dFRpY2ssXG4gIGNhbmNlbE5leHRUaWNrOiBfY2FuY2VsTmV4dFRpY2ssXG4gIGRldGVjdERpcmVjdGlvbjogX2RldGVjdERpcmVjdGlvbixcbiAgZ2V0Q2hpbGQ6IGdldENoaWxkLFxuICBleHBhbmRvOiBleHBhbmRvXG59O1xuXG4vKipcclxuICogR2V0IHRoZSBTb3J0YWJsZSBpbnN0YW5jZSBvZiBhbiBlbGVtZW50XHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50XHJcbiAqIEByZXR1cm4ge1NvcnRhYmxlfHVuZGVmaW5lZH0gICAgICAgICBUaGUgaW5zdGFuY2Ugb2YgU29ydGFibGVcclxuICovXG5Tb3J0YWJsZS5nZXQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudFtleHBhbmRvXTtcbn07XG5cbi8qKlxyXG4gKiBNb3VudCBhIHBsdWdpbiB0byBTb3J0YWJsZVxyXG4gKiBAcGFyYW0gIHsuLi5Tb3J0YWJsZVBsdWdpbnxTb3J0YWJsZVBsdWdpbltdfSBwbHVnaW5zICAgICAgIFBsdWdpbnMgYmVpbmcgbW91bnRlZFxyXG4gKi9cblNvcnRhYmxlLm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBwbHVnaW5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIGlmIChwbHVnaW5zWzBdLmNvbnN0cnVjdG9yID09PSBBcnJheSkgcGx1Z2lucyA9IHBsdWdpbnNbMF07XG4gIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgaWYgKCFwbHVnaW4ucHJvdG90eXBlIHx8ICFwbHVnaW4ucHJvdG90eXBlLmNvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBcIlNvcnRhYmxlOiBNb3VudGVkIHBsdWdpbiBtdXN0IGJlIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIG5vdCBcIi5jb25jYXQoe30udG9TdHJpbmcuY2FsbChwbHVnaW4pKTtcbiAgICB9XG4gICAgaWYgKHBsdWdpbi51dGlscykgU29ydGFibGUudXRpbHMgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgU29ydGFibGUudXRpbHMpLCBwbHVnaW4udXRpbHMpO1xuICAgIFBsdWdpbk1hbmFnZXIubW91bnQocGx1Z2luKTtcbiAgfSk7XG59O1xuXG4vKipcclxuICogQ3JlYXRlIHNvcnRhYmxlIGluc3RhbmNlXHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9ICBlbFxyXG4gKiBAcGFyYW0ge09iamVjdH0gICAgICBbb3B0aW9uc11cclxuICovXG5Tb3J0YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBTb3J0YWJsZShlbCwgb3B0aW9ucyk7XG59O1xuXG4vLyBFeHBvcnRcblNvcnRhYmxlLnZlcnNpb24gPSB2ZXJzaW9uO1xuXG52YXIgYXV0b1Njcm9sbHMgPSBbXSxcbiAgc2Nyb2xsRWwsXG4gIHNjcm9sbFJvb3RFbCxcbiAgc2Nyb2xsaW5nID0gZmFsc2UsXG4gIGxhc3RBdXRvU2Nyb2xsWCxcbiAgbGFzdEF1dG9TY3JvbGxZLFxuICB0b3VjaEV2dCQxLFxuICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbDtcbmZ1bmN0aW9uIEF1dG9TY3JvbGxQbHVnaW4oKSB7XG4gIGZ1bmN0aW9uIEF1dG9TY3JvbGwoKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIHNjcm9sbDogdHJ1ZSxcbiAgICAgIGZvcmNlQXV0b1Njcm9sbEZhbGxiYWNrOiBmYWxzZSxcbiAgICAgIHNjcm9sbFNlbnNpdGl2aXR5OiAzMCxcbiAgICAgIHNjcm9sbFNwZWVkOiAxMCxcbiAgICAgIGJ1YmJsZVNjcm9sbDogdHJ1ZVxuICAgIH07XG5cbiAgICAvLyBCaW5kIGFsbCBwcml2YXRlIG1ldGhvZHNcbiAgICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgICBpZiAoZm4uY2hhckF0KDApID09PSAnXycgJiYgdHlwZW9mIHRoaXNbZm5dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXNbZm5dID0gdGhpc1tmbl0uYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgQXV0b1Njcm9sbC5wcm90b3R5cGUgPSB7XG4gICAgZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIGRyYWdTdGFydGVkKF9yZWYpIHtcbiAgICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gX3JlZi5vcmlnaW5hbEV2ZW50O1xuICAgICAgaWYgKHRoaXMuc29ydGFibGUubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAnZHJhZ292ZXInLCB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgfSBlbHNlIGlmIChvcmlnaW5hbEV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckNvbXBsZXRlZDogZnVuY3Rpb24gZHJhZ092ZXJDb21wbGV0ZWQoX3JlZjIpIHtcbiAgICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gX3JlZjIub3JpZ2luYWxFdmVudDtcbiAgICAgIC8vIEZvciB3aGVuIGJ1YmJsaW5nIGlzIGNhbmNlbGVkIGFuZCB1c2luZyBmYWxsYmFjayAoZmFsbGJhY2sgJ3RvdWNobW92ZScgYWx3YXlzIHJlYWNoZWQpXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5kcmFnT3ZlckJ1YmJsZSAmJiAhb3JpZ2luYWxFdmVudC5yb290RWwpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlQXV0b1Njcm9sbChvcmlnaW5hbEV2ZW50KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyb3A6IGZ1bmN0aW9uIGRyb3AoKSB7XG4gICAgICBpZiAodGhpcy5zb3J0YWJsZS5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAnZHJhZ292ZXInLCB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgIH1cbiAgICAgIGNsZWFyUG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwoKTtcbiAgICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICAgIGNhbmNlbFRocm90dGxlKCk7XG4gICAgfSxcbiAgICBudWxsaW5nOiBmdW5jdGlvbiBudWxsaW5nKCkge1xuICAgICAgdG91Y2hFdnQkMSA9IHNjcm9sbFJvb3RFbCA9IHNjcm9sbEVsID0gc2Nyb2xsaW5nID0gcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgPSBsYXN0QXV0b1Njcm9sbFggPSBsYXN0QXV0b1Njcm9sbFkgPSBudWxsO1xuICAgICAgYXV0b1Njcm9sbHMubGVuZ3RoID0gMDtcbiAgICB9LFxuICAgIF9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGw6IGZ1bmN0aW9uIF9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwoZXZ0KSB7XG4gICAgICB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKGV2dCwgdHJ1ZSk7XG4gICAgfSxcbiAgICBfaGFuZGxlQXV0b1Njcm9sbDogZnVuY3Rpb24gX2hhbmRsZUF1dG9TY3JvbGwoZXZ0LCBmYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciB4ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFgsXG4gICAgICAgIHkgPSAoZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCkuY2xpZW50WSxcbiAgICAgICAgZWxlbSA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XG4gICAgICB0b3VjaEV2dCQxID0gZXZ0O1xuXG4gICAgICAvLyBJRSBkb2VzIG5vdCBzZWVtIHRvIGhhdmUgbmF0aXZlIGF1dG9zY3JvbGwsXG4gICAgICAvLyBFZGdlJ3MgYXV0b3Njcm9sbCBzZWVtcyB0b28gY29uZGl0aW9uYWwsXG4gICAgICAvLyBNQUNPUyBTYWZhcmkgZG9lcyBub3QgaGF2ZSBhdXRvc2Nyb2xsLFxuICAgICAgLy8gRmlyZWZveCBhbmQgQ2hyb21lIGFyZSBnb29kXG4gICAgICBpZiAoZmFsbGJhY2sgfHwgdGhpcy5vcHRpb25zLmZvcmNlQXV0b1Njcm9sbEZhbGxiYWNrIHx8IEVkZ2UgfHwgSUUxMU9yTGVzcyB8fCBTYWZhcmkpIHtcbiAgICAgICAgYXV0b1Njcm9sbChldnQsIHRoaXMub3B0aW9ucywgZWxlbSwgZmFsbGJhY2spO1xuXG4gICAgICAgIC8vIExpc3RlbmVyIGZvciBwb2ludGVyIGVsZW1lbnQgY2hhbmdlXG4gICAgICAgIHZhciBvZ0VsZW1TY3JvbGxlciA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsZW0sIHRydWUpO1xuICAgICAgICBpZiAoc2Nyb2xsaW5nICYmICghcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgfHwgeCAhPT0gbGFzdEF1dG9TY3JvbGxYIHx8IHkgIT09IGxhc3RBdXRvU2Nyb2xsWSkpIHtcbiAgICAgICAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCAmJiBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCk7XG4gICAgICAgICAgLy8gRGV0ZWN0IGZvciBwb2ludGVyIGVsZW0gY2hhbmdlLCBlbXVsYXRpbmcgbmF0aXZlIERuRCBiZWhhdmlvdXJcbiAgICAgICAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbGVtID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh4LCB5KSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAobmV3RWxlbSAhPT0gb2dFbGVtU2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgb2dFbGVtU2Nyb2xsZXIgPSBuZXdFbGVtO1xuICAgICAgICAgICAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdXRvU2Nyb2xsKGV2dCwgX3RoaXMub3B0aW9ucywgbmV3RWxlbSwgZmFsbGJhY2spO1xuICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICBsYXN0QXV0b1Njcm9sbFggPSB4O1xuICAgICAgICAgIGxhc3RBdXRvU2Nyb2xsWSA9IHk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIERuRCBpcyBlbmFibGVkIChhbmQgYnJvd3NlciBoYXMgZ29vZCBhdXRvc2Nyb2xsaW5nKSwgZmlyc3QgYXV0b3Njcm9sbCB3aWxsIGFscmVhZHkgc2Nyb2xsLCBzbyBnZXQgcGFyZW50IGF1dG9zY3JvbGwgb2YgZmlyc3QgYXV0b3Njcm9sbFxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5idWJibGVTY3JvbGwgfHwgZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgdHJ1ZSkgPT09IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKSkge1xuICAgICAgICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYXV0b1Njcm9sbChldnQsIHRoaXMub3B0aW9ucywgZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgZmFsc2UpLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoQXV0b1Njcm9sbCwge1xuICAgIHBsdWdpbk5hbWU6ICdzY3JvbGwnLFxuICAgIGluaXRpYWxpemVCeURlZmF1bHQ6IHRydWVcbiAgfSk7XG59XG5mdW5jdGlvbiBjbGVhckF1dG9TY3JvbGxzKCkge1xuICBhdXRvU2Nyb2xscy5mb3JFYWNoKGZ1bmN0aW9uIChhdXRvU2Nyb2xsKSB7XG4gICAgY2xlYXJJbnRlcnZhbChhdXRvU2Nyb2xsLnBpZCk7XG4gIH0pO1xuICBhdXRvU2Nyb2xscyA9IFtdO1xufVxuZnVuY3Rpb24gY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpIHtcbiAgY2xlYXJJbnRlcnZhbChwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCk7XG59XG52YXIgYXV0b1Njcm9sbCA9IHRocm90dGxlKGZ1bmN0aW9uIChldnQsIG9wdGlvbnMsIHJvb3RFbCwgaXNGYWxsYmFjaykge1xuICAvLyBCdWc6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTUwNTUyMVxuICBpZiAoIW9wdGlvbnMuc2Nyb2xsKSByZXR1cm47XG4gIHZhciB4ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFgsXG4gICAgeSA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRZLFxuICAgIHNlbnMgPSBvcHRpb25zLnNjcm9sbFNlbnNpdGl2aXR5LFxuICAgIHNwZWVkID0gb3B0aW9ucy5zY3JvbGxTcGVlZCxcbiAgICB3aW5TY3JvbGxlciA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgdmFyIHNjcm9sbFRoaXNJbnN0YW5jZSA9IGZhbHNlLFxuICAgIHNjcm9sbEN1c3RvbUZuO1xuXG4gIC8vIE5ldyBzY3JvbGwgcm9vdCwgc2V0IHNjcm9sbEVsXG4gIGlmIChzY3JvbGxSb290RWwgIT09IHJvb3RFbCkge1xuICAgIHNjcm9sbFJvb3RFbCA9IHJvb3RFbDtcbiAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgc2Nyb2xsRWwgPSBvcHRpb25zLnNjcm9sbDtcbiAgICBzY3JvbGxDdXN0b21GbiA9IG9wdGlvbnMuc2Nyb2xsRm47XG4gICAgaWYgKHNjcm9sbEVsID09PSB0cnVlKSB7XG4gICAgICBzY3JvbGxFbCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KHJvb3RFbCwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIHZhciBsYXllcnNPdXQgPSAwO1xuICB2YXIgY3VycmVudFBhcmVudCA9IHNjcm9sbEVsO1xuICBkbyB7XG4gICAgdmFyIGVsID0gY3VycmVudFBhcmVudCxcbiAgICAgIHJlY3QgPSBnZXRSZWN0KGVsKSxcbiAgICAgIHRvcCA9IHJlY3QudG9wLFxuICAgICAgYm90dG9tID0gcmVjdC5ib3R0b20sXG4gICAgICBsZWZ0ID0gcmVjdC5sZWZ0LFxuICAgICAgcmlnaHQgPSByZWN0LnJpZ2h0LFxuICAgICAgd2lkdGggPSByZWN0LndpZHRoLFxuICAgICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQsXG4gICAgICBjYW5TY3JvbGxYID0gdm9pZCAwLFxuICAgICAgY2FuU2Nyb2xsWSA9IHZvaWQgMCxcbiAgICAgIHNjcm9sbFdpZHRoID0gZWwuc2Nyb2xsV2lkdGgsXG4gICAgICBzY3JvbGxIZWlnaHQgPSBlbC5zY3JvbGxIZWlnaHQsXG4gICAgICBlbENTUyA9IGNzcyhlbCksXG4gICAgICBzY3JvbGxQb3NYID0gZWwuc2Nyb2xsTGVmdCxcbiAgICAgIHNjcm9sbFBvc1kgPSBlbC5zY3JvbGxUb3A7XG4gICAgaWYgKGVsID09PSB3aW5TY3JvbGxlcikge1xuICAgICAgY2FuU2Nyb2xsWCA9IHdpZHRoIDwgc2Nyb2xsV2lkdGggJiYgKGVsQ1NTLm92ZXJmbG93WCA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WCA9PT0gJ3Njcm9sbCcgfHwgZWxDU1Mub3ZlcmZsb3dYID09PSAndmlzaWJsZScpO1xuICAgICAgY2FuU2Nyb2xsWSA9IGhlaWdodCA8IHNjcm9sbEhlaWdodCAmJiAoZWxDU1Mub3ZlcmZsb3dZID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dZID09PSAnc2Nyb2xsJyB8fCBlbENTUy5vdmVyZmxvd1kgPT09ICd2aXNpYmxlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhblNjcm9sbFggPSB3aWR0aCA8IHNjcm9sbFdpZHRoICYmIChlbENTUy5vdmVyZmxvd1ggPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1ggPT09ICdzY3JvbGwnKTtcbiAgICAgIGNhblNjcm9sbFkgPSBoZWlnaHQgPCBzY3JvbGxIZWlnaHQgJiYgKGVsQ1NTLm92ZXJmbG93WSA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WSA9PT0gJ3Njcm9sbCcpO1xuICAgIH1cbiAgICB2YXIgdnggPSBjYW5TY3JvbGxYICYmIChNYXRoLmFicyhyaWdodCAtIHgpIDw9IHNlbnMgJiYgc2Nyb2xsUG9zWCArIHdpZHRoIDwgc2Nyb2xsV2lkdGgpIC0gKE1hdGguYWJzKGxlZnQgLSB4KSA8PSBzZW5zICYmICEhc2Nyb2xsUG9zWCk7XG4gICAgdmFyIHZ5ID0gY2FuU2Nyb2xsWSAmJiAoTWF0aC5hYnMoYm90dG9tIC0geSkgPD0gc2VucyAmJiBzY3JvbGxQb3NZICsgaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0KSAtIChNYXRoLmFicyh0b3AgLSB5KSA8PSBzZW5zICYmICEhc2Nyb2xsUG9zWSk7XG4gICAgaWYgKCFhdXRvU2Nyb2xsc1tsYXllcnNPdXRdKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsYXllcnNPdXQ7IGkrKykge1xuICAgICAgICBpZiAoIWF1dG9TY3JvbGxzW2ldKSB7XG4gICAgICAgICAgYXV0b1Njcm9sbHNbaV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS52eCAhPSB2eCB8fCBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ5ICE9IHZ5IHx8IGF1dG9TY3JvbGxzW2xheWVyc091dF0uZWwgIT09IGVsKSB7XG4gICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLmVsID0gZWw7XG4gICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ4ID0gdng7XG4gICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ5ID0gdnk7XG4gICAgICBjbGVhckludGVydmFsKGF1dG9TY3JvbGxzW2xheWVyc091dF0ucGlkKTtcbiAgICAgIGlmICh2eCAhPSAwIHx8IHZ5ICE9IDApIHtcbiAgICAgICAgc2Nyb2xsVGhpc0luc3RhbmNlID0gdHJ1ZTtcbiAgICAgICAgLyoganNoaW50IGxvb3BmdW5jOnRydWUgKi9cbiAgICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5waWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gZW11bGF0ZSBkcmFnIG92ZXIgZHVyaW5nIGF1dG9zY3JvbGwgKGZhbGxiYWNrKSwgZW11bGF0aW5nIG5hdGl2ZSBEbkQgYmVoYXZpb3VyXG4gICAgICAgICAgaWYgKGlzRmFsbGJhY2sgJiYgdGhpcy5sYXllciA9PT0gMCkge1xuICAgICAgICAgICAgU29ydGFibGUuYWN0aXZlLl9vblRvdWNoTW92ZSh0b3VjaEV2dCQxKTsgLy8gVG8gbW92ZSBnaG9zdCBpZiBpdCBpcyBwb3NpdGlvbmVkIGFic29sdXRlbHlcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHNjcm9sbE9mZnNldFkgPSBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eSA/IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ5ICogc3BlZWQgOiAwO1xuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXRYID0gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnggPyBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eCAqIHNwZWVkIDogMDtcbiAgICAgICAgICBpZiAodHlwZW9mIHNjcm9sbEN1c3RvbUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsQ3VzdG9tRm4uY2FsbChTb3J0YWJsZS5kcmFnZ2VkLnBhcmVudE5vZGVbZXhwYW5kb10sIHNjcm9sbE9mZnNldFgsIHNjcm9sbE9mZnNldFksIGV2dCwgdG91Y2hFdnQkMSwgYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0uZWwpICE9PSAnY29udGludWUnKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc2Nyb2xsQnkoYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0uZWwsIHNjcm9sbE9mZnNldFgsIHNjcm9sbE9mZnNldFkpO1xuICAgICAgICB9LmJpbmQoe1xuICAgICAgICAgIGxheWVyOiBsYXllcnNPdXRcbiAgICAgICAgfSksIDI0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGF5ZXJzT3V0Kys7XG4gIH0gd2hpbGUgKG9wdGlvbnMuYnViYmxlU2Nyb2xsICYmIGN1cnJlbnRQYXJlbnQgIT09IHdpblNjcm9sbGVyICYmIChjdXJyZW50UGFyZW50ID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoY3VycmVudFBhcmVudCwgZmFsc2UpKSk7XG4gIHNjcm9sbGluZyA9IHNjcm9sbFRoaXNJbnN0YW5jZTsgLy8gaW4gY2FzZSBhbm90aGVyIGZ1bmN0aW9uIGNhdGNoZXMgc2Nyb2xsaW5nIGFzIGZhbHNlIGluIGJldHdlZW4gd2hlbiBpdCBpcyBub3Rcbn0sIDMwKTtcblxudmFyIGRyb3AgPSBmdW5jdGlvbiBkcm9wKF9yZWYpIHtcbiAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmLm9yaWdpbmFsRXZlbnQsXG4gICAgcHV0U29ydGFibGUgPSBfcmVmLnB1dFNvcnRhYmxlLFxuICAgIGRyYWdFbCA9IF9yZWYuZHJhZ0VsLFxuICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZi5hY3RpdmVTb3J0YWJsZSxcbiAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQgPSBfcmVmLmRpc3BhdGNoU29ydGFibGVFdmVudCxcbiAgICBoaWRlR2hvc3RGb3JUYXJnZXQgPSBfcmVmLmhpZGVHaG9zdEZvclRhcmdldCxcbiAgICB1bmhpZGVHaG9zdEZvclRhcmdldCA9IF9yZWYudW5oaWRlR2hvc3RGb3JUYXJnZXQ7XG4gIGlmICghb3JpZ2luYWxFdmVudCkgcmV0dXJuO1xuICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IGFjdGl2ZVNvcnRhYmxlO1xuICBoaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgdmFyIHRvdWNoID0gb3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlcyAmJiBvcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA/IG9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBvcmlnaW5hbEV2ZW50O1xuICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZKTtcbiAgdW5oaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgaWYgKHRvU29ydGFibGUgJiYgIXRvU29ydGFibGUuZWwuY29udGFpbnModGFyZ2V0KSkge1xuICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCgnc3BpbGwnKTtcbiAgICB0aGlzLm9uU3BpbGwoe1xuICAgICAgZHJhZ0VsOiBkcmFnRWwsXG4gICAgICBwdXRTb3J0YWJsZTogcHV0U29ydGFibGVcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIFJldmVydCgpIHt9XG5SZXZlcnQucHJvdG90eXBlID0ge1xuICBzdGFydEluZGV4OiBudWxsLFxuICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChfcmVmMikge1xuICAgIHZhciBvbGREcmFnZ2FibGVJbmRleCA9IF9yZWYyLm9sZERyYWdnYWJsZUluZGV4O1xuICAgIHRoaXMuc3RhcnRJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICB9LFxuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKF9yZWYzKSB7XG4gICAgdmFyIGRyYWdFbCA9IF9yZWYzLmRyYWdFbCxcbiAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjMucHV0U29ydGFibGU7XG4gICAgdGhpcy5zb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICBpZiAocHV0U29ydGFibGUpIHtcbiAgICAgIHB1dFNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgIH1cbiAgICB2YXIgbmV4dFNpYmxpbmcgPSBnZXRDaGlsZCh0aGlzLnNvcnRhYmxlLmVsLCB0aGlzLnN0YXJ0SW5kZXgsIHRoaXMub3B0aW9ucyk7XG4gICAgaWYgKG5leHRTaWJsaW5nKSB7XG4gICAgICB0aGlzLnNvcnRhYmxlLmVsLmluc2VydEJlZm9yZShkcmFnRWwsIG5leHRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zb3J0YWJsZS5lbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuICAgIH1cbiAgICB0aGlzLnNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICBpZiAocHV0U29ydGFibGUpIHtcbiAgICAgIHB1dFNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICB9XG4gIH0sXG4gIGRyb3A6IGRyb3Bcbn07XG5fZXh0ZW5kcyhSZXZlcnQsIHtcbiAgcGx1Z2luTmFtZTogJ3JldmVydE9uU3BpbGwnXG59KTtcbmZ1bmN0aW9uIFJlbW92ZSgpIHt9XG5SZW1vdmUucHJvdG90eXBlID0ge1xuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKF9yZWY0KSB7XG4gICAgdmFyIGRyYWdFbCA9IF9yZWY0LmRyYWdFbCxcbiAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjQucHV0U29ydGFibGU7XG4gICAgdmFyIHBhcmVudFNvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgdGhpcy5zb3J0YWJsZTtcbiAgICBwYXJlbnRTb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICBkcmFnRWwucGFyZW50Tm9kZSAmJiBkcmFnRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkcmFnRWwpO1xuICAgIHBhcmVudFNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgfSxcbiAgZHJvcDogZHJvcFxufTtcbl9leHRlbmRzKFJlbW92ZSwge1xuICBwbHVnaW5OYW1lOiAncmVtb3ZlT25TcGlsbCdcbn0pO1xuXG52YXIgbGFzdFN3YXBFbDtcbmZ1bmN0aW9uIFN3YXBQbHVnaW4oKSB7XG4gIGZ1bmN0aW9uIFN3YXAoKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIHN3YXBDbGFzczogJ3NvcnRhYmxlLXN3YXAtaGlnaGxpZ2h0J1xuICAgIH07XG4gIH1cbiAgU3dhcC5wcm90b3R5cGUgPSB7XG4gICAgZHJhZ1N0YXJ0OiBmdW5jdGlvbiBkcmFnU3RhcnQoX3JlZikge1xuICAgICAgdmFyIGRyYWdFbCA9IF9yZWYuZHJhZ0VsO1xuICAgICAgbGFzdFN3YXBFbCA9IGRyYWdFbDtcbiAgICB9LFxuICAgIGRyYWdPdmVyVmFsaWQ6IGZ1bmN0aW9uIGRyYWdPdmVyVmFsaWQoX3JlZjIpIHtcbiAgICAgIHZhciBjb21wbGV0ZWQgPSBfcmVmMi5jb21wbGV0ZWQsXG4gICAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgICAgb25Nb3ZlID0gX3JlZjIub25Nb3ZlLFxuICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYyLmFjdGl2ZVNvcnRhYmxlLFxuICAgICAgICBjaGFuZ2VkID0gX3JlZjIuY2hhbmdlZCxcbiAgICAgICAgY2FuY2VsID0gX3JlZjIuY2FuY2VsO1xuICAgICAgaWYgKCFhY3RpdmVTb3J0YWJsZS5vcHRpb25zLnN3YXApIHJldHVybjtcbiAgICAgIHZhciBlbCA9IHRoaXMuc29ydGFibGUuZWwsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgdmFyIHByZXZTd2FwRWwgPSBsYXN0U3dhcEVsO1xuICAgICAgICBpZiAob25Nb3ZlKHRhcmdldCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3ModGFyZ2V0LCBvcHRpb25zLnN3YXBDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgbGFzdFN3YXBFbCA9IHRhcmdldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0U3dhcEVsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldlN3YXBFbCAmJiBwcmV2U3dhcEVsICE9PSBsYXN0U3dhcEVsKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MocHJldlN3YXBFbCwgb3B0aW9ucy5zd2FwQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hhbmdlZCgpO1xuICAgICAgY29tcGxldGVkKHRydWUpO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKF9yZWYzKSB7XG4gICAgICB2YXIgYWN0aXZlU29ydGFibGUgPSBfcmVmMy5hY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMy5wdXRTb3J0YWJsZSxcbiAgICAgICAgZHJhZ0VsID0gX3JlZjMuZHJhZ0VsO1xuICAgICAgdmFyIHRvU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCB0aGlzLnNvcnRhYmxlO1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICBsYXN0U3dhcEVsICYmIHRvZ2dsZUNsYXNzKGxhc3RTd2FwRWwsIG9wdGlvbnMuc3dhcENsYXNzLCBmYWxzZSk7XG4gICAgICBpZiAobGFzdFN3YXBFbCAmJiAob3B0aW9ucy5zd2FwIHx8IHB1dFNvcnRhYmxlICYmIHB1dFNvcnRhYmxlLm9wdGlvbnMuc3dhcCkpIHtcbiAgICAgICAgaWYgKGRyYWdFbCAhPT0gbGFzdFN3YXBFbCkge1xuICAgICAgICAgIHRvU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgICAgICAgaWYgKHRvU29ydGFibGUgIT09IGFjdGl2ZVNvcnRhYmxlKSBhY3RpdmVTb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgICAgICBzd2FwTm9kZXMoZHJhZ0VsLCBsYXN0U3dhcEVsKTtcbiAgICAgICAgICB0b1NvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgICBpZiAodG9Tb3J0YWJsZSAhPT0gYWN0aXZlU29ydGFibGUpIGFjdGl2ZVNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbnVsbGluZzogZnVuY3Rpb24gbnVsbGluZygpIHtcbiAgICAgIGxhc3RTd2FwRWwgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKFN3YXAsIHtcbiAgICBwbHVnaW5OYW1lOiAnc3dhcCcsXG4gICAgZXZlbnRQcm9wZXJ0aWVzOiBmdW5jdGlvbiBldmVudFByb3BlcnRpZXMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzd2FwSXRlbTogbGFzdFN3YXBFbFxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gc3dhcE5vZGVzKG4xLCBuMikge1xuICB2YXIgcDEgPSBuMS5wYXJlbnROb2RlLFxuICAgIHAyID0gbjIucGFyZW50Tm9kZSxcbiAgICBpMSxcbiAgICBpMjtcbiAgaWYgKCFwMSB8fCAhcDIgfHwgcDEuaXNFcXVhbE5vZGUobjIpIHx8IHAyLmlzRXF1YWxOb2RlKG4xKSkgcmV0dXJuO1xuICBpMSA9IGluZGV4KG4xKTtcbiAgaTIgPSBpbmRleChuMik7XG4gIGlmIChwMS5pc0VxdWFsTm9kZShwMikgJiYgaTEgPCBpMikge1xuICAgIGkyKys7XG4gIH1cbiAgcDEuaW5zZXJ0QmVmb3JlKG4yLCBwMS5jaGlsZHJlbltpMV0pO1xuICBwMi5pbnNlcnRCZWZvcmUobjEsIHAyLmNoaWxkcmVuW2kyXSk7XG59XG5cbnZhciBtdWx0aURyYWdFbGVtZW50cyA9IFtdLFxuICBtdWx0aURyYWdDbG9uZXMgPSBbXSxcbiAgbGFzdE11bHRpRHJhZ1NlbGVjdCxcbiAgLy8gZm9yIHNlbGVjdGlvbiB3aXRoIG1vZGlmaWVyIGtleSBkb3duIChTSElGVClcbiAgbXVsdGlEcmFnU29ydGFibGUsXG4gIGluaXRpYWxGb2xkaW5nID0gZmFsc2UsXG4gIC8vIEluaXRpYWwgbXVsdGktZHJhZyBmb2xkIHdoZW4gZHJhZyBzdGFydGVkXG4gIGZvbGRpbmcgPSBmYWxzZSxcbiAgLy8gRm9sZGluZyBhbnkgb3RoZXIgdGltZVxuICBkcmFnU3RhcnRlZCA9IGZhbHNlLFxuICBkcmFnRWwkMSxcbiAgY2xvbmVzRnJvbVJlY3QsXG4gIGNsb25lc0hpZGRlbjtcbmZ1bmN0aW9uIE11bHRpRHJhZ1BsdWdpbigpIHtcbiAgZnVuY3Rpb24gTXVsdGlEcmFnKHNvcnRhYmxlKSB7XG4gICAgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG4gICAgZm9yICh2YXIgZm4gaW4gdGhpcykge1xuICAgICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2ZuXSA9IHRoaXNbZm5dLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghc29ydGFibGUub3B0aW9ucy5hdm9pZEltcGxpY2l0RGVzZWxlY3QpIHtcbiAgICAgIGlmIChzb3J0YWJsZS5vcHRpb25zLnN1cHBvcnRQb2ludGVyKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAncG9pbnRlcnVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgICBvbihkb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgfVxuICAgIH1cbiAgICBvbihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLl9jaGVja0tleURvd24pO1xuICAgIG9uKGRvY3VtZW50LCAna2V5dXAnLCB0aGlzLl9jaGVja0tleVVwKTtcbiAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgc2VsZWN0ZWRDbGFzczogJ3NvcnRhYmxlLXNlbGVjdGVkJyxcbiAgICAgIG11bHRpRHJhZ0tleTogbnVsbCxcbiAgICAgIGF2b2lkSW1wbGljaXREZXNlbGVjdDogZmFsc2UsXG4gICAgICBzZXREYXRhOiBmdW5jdGlvbiBzZXREYXRhKGRhdGFUcmFuc2ZlciwgZHJhZ0VsKSB7XG4gICAgICAgIHZhciBkYXRhID0gJyc7XG4gICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCwgaSkge1xuICAgICAgICAgICAgZGF0YSArPSAoIWkgPyAnJyA6ICcsICcpICsgbXVsdGlEcmFnRWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gZHJhZ0VsLnRleHRDb250ZW50O1xuICAgICAgICB9XG4gICAgICAgIGRhdGFUcmFuc2Zlci5zZXREYXRhKCdUZXh0JywgZGF0YSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBNdWx0aURyYWcucHJvdG90eXBlID0ge1xuICAgIG11bHRpRHJhZ0tleURvd246IGZhbHNlLFxuICAgIGlzTXVsdGlEcmFnOiBmYWxzZSxcbiAgICBkZWxheVN0YXJ0R2xvYmFsOiBmdW5jdGlvbiBkZWxheVN0YXJ0R2xvYmFsKF9yZWYpIHtcbiAgICAgIHZhciBkcmFnZ2VkID0gX3JlZi5kcmFnRWw7XG4gICAgICBkcmFnRWwkMSA9IGRyYWdnZWQ7XG4gICAgfSxcbiAgICBkZWxheUVuZGVkOiBmdW5jdGlvbiBkZWxheUVuZGVkKCkge1xuICAgICAgdGhpcy5pc011bHRpRHJhZyA9IH5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKTtcbiAgICB9LFxuICAgIHNldHVwQ2xvbmU6IGZ1bmN0aW9uIHNldHVwQ2xvbmUoX3JlZjIpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYyLnNvcnRhYmxlLFxuICAgICAgICBjYW5jZWwgPSBfcmVmMi5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLnB1c2goY2xvbmUobXVsdGlEcmFnRWxlbWVudHNbaV0pKTtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzW2ldLnNvcnRhYmxlSW5kZXggPSBtdWx0aURyYWdFbGVtZW50c1tpXS5zb3J0YWJsZUluZGV4O1xuICAgICAgICBtdWx0aURyYWdDbG9uZXNbaV0uZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICAgIG11bHRpRHJhZ0Nsb25lc1tpXS5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnO1xuICAgICAgICB0b2dnbGVDbGFzcyhtdWx0aURyYWdDbG9uZXNbaV0sIHRoaXMub3B0aW9ucy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzW2ldID09PSBkcmFnRWwkMSAmJiB0b2dnbGVDbGFzcyhtdWx0aURyYWdDbG9uZXNbaV0sIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpO1xuICAgICAgfVxuICAgICAgc29ydGFibGUuX2hpZGVDbG9uZSgpO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoX3JlZjMpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYzLnNvcnRhYmxlLFxuICAgICAgICByb290RWwgPSBfcmVmMy5yb290RWwsXG4gICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCA9IF9yZWYzLmRpc3BhdGNoU29ydGFibGVFdmVudCxcbiAgICAgICAgY2FuY2VsID0gX3JlZjMuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSkge1xuICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoICYmIG11bHRpRHJhZ1NvcnRhYmxlID09PSBzb3J0YWJsZSkge1xuICAgICAgICAgIGluc2VydE11bHRpRHJhZ0Nsb25lcyh0cnVlLCByb290RWwpO1xuICAgICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCgnY2xvbmUnKTtcbiAgICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd0Nsb25lOiBmdW5jdGlvbiBzaG93Q2xvbmUoX3JlZjQpIHtcbiAgICAgIHZhciBjbG9uZU5vd1Nob3duID0gX3JlZjQuY2xvbmVOb3dTaG93bixcbiAgICAgICAgcm9vdEVsID0gX3JlZjQucm9vdEVsLFxuICAgICAgICBjYW5jZWwgPSBfcmVmNC5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcbiAgICAgIGluc2VydE11bHRpRHJhZ0Nsb25lcyhmYWxzZSwgcm9vdEVsKTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICBjc3MoY2xvbmUsICdkaXNwbGF5JywgJycpO1xuICAgICAgfSk7XG4gICAgICBjbG9uZU5vd1Nob3duKCk7XG4gICAgICBjbG9uZXNIaWRkZW4gPSBmYWxzZTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgaGlkZUNsb25lOiBmdW5jdGlvbiBoaWRlQ2xvbmUoX3JlZjUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmNS5zb3J0YWJsZSxcbiAgICAgICAgY2xvbmVOb3dIaWRkZW4gPSBfcmVmNS5jbG9uZU5vd0hpZGRlbixcbiAgICAgICAgY2FuY2VsID0gX3JlZjUuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG4gICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgY3NzKGNsb25lLCAnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlICYmIGNsb25lLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBjbG9uZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjbG9uZU5vd0hpZGRlbigpO1xuICAgICAgY2xvbmVzSGlkZGVuID0gdHJ1ZTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgZHJhZ1N0YXJ0R2xvYmFsOiBmdW5jdGlvbiBkcmFnU3RhcnRHbG9iYWwoX3JlZjYpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY2LnNvcnRhYmxlO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnICYmIG11bHRpRHJhZ1NvcnRhYmxlKSB7XG4gICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlLm11bHRpRHJhZy5fZGVzZWxlY3RNdWx0aURyYWcoKTtcbiAgICAgIH1cbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU29ydCBtdWx0aS1kcmFnIGVsZW1lbnRzXG4gICAgICBtdWx0aURyYWdFbGVtZW50cyA9IG11bHRpRHJhZ0VsZW1lbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEuc29ydGFibGVJbmRleCAtIGIuc29ydGFibGVJbmRleDtcbiAgICAgIH0pO1xuICAgICAgZHJhZ1N0YXJ0ZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIGRyYWdTdGFydGVkKF9yZWY3KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY3LnNvcnRhYmxlO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNvcnQpIHtcbiAgICAgICAgLy8gQ2FwdHVyZSByZWN0cyxcbiAgICAgICAgLy8gaGlkZSBtdWx0aSBkcmFnIGVsZW1lbnRzIChieSBwb3NpdGlvbmluZyB0aGVtIGFic29sdXRlKSxcbiAgICAgICAgLy8gc2V0IG11bHRpIGRyYWcgZWxlbWVudHMgcmVjdHMgdG8gZHJhZ1JlY3QsXG4gICAgICAgIC8vIHNob3cgbXVsdGkgZHJhZyBlbGVtZW50cyxcbiAgICAgICAgLy8gYW5pbWF0ZSB0byByZWN0cyxcbiAgICAgICAgLy8gdW5zZXQgcmVjdHMgJiByZW1vdmUgZnJvbSBET01cblxuICAgICAgICBzb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICAgICAgICAgIGNzcyhtdWx0aURyYWdFbGVtZW50LCAncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgPT09IGRyYWdFbCQxKSByZXR1cm47XG4gICAgICAgICAgICBzZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQsIGRyYWdSZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb2xkaW5nID0gdHJ1ZTtcbiAgICAgICAgICBpbml0aWFsRm9sZGluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNvcnRhYmxlLmFuaW1hdGVBbGwoZnVuY3Rpb24gKCkge1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIGluaXRpYWxGb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICB1bnNldFJlY3QobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgYWxsIGF1eGlsaWFyeSBtdWx0aWRyYWcgaXRlbXMgZnJvbSBlbCwgaWYgc29ydGluZyBlbmFibGVkXG4gICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5zb3J0KSB7XG4gICAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBkcmFnT3ZlcjogZnVuY3Rpb24gZHJhZ092ZXIoX3JlZjgpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBfcmVmOC50YXJnZXQsXG4gICAgICAgIGNvbXBsZXRlZCA9IF9yZWY4LmNvbXBsZXRlZCxcbiAgICAgICAgY2FuY2VsID0gX3JlZjguY2FuY2VsO1xuICAgICAgaWYgKGZvbGRpbmcgJiYgfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YodGFyZ2V0KSkge1xuICAgICAgICBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJldmVydDogZnVuY3Rpb24gcmV2ZXJ0KF9yZWY5KSB7XG4gICAgICB2YXIgZnJvbVNvcnRhYmxlID0gX3JlZjkuZnJvbVNvcnRhYmxlLFxuICAgICAgICByb290RWwgPSBfcmVmOS5yb290RWwsXG4gICAgICAgIHNvcnRhYmxlID0gX3JlZjkuc29ydGFibGUsXG4gICAgICAgIGRyYWdSZWN0ID0gX3JlZjkuZHJhZ1JlY3Q7XG4gICAgICBpZiAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAvLyBTZXR1cCB1bmZvbGQgYW5pbWF0aW9uXG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICBzb3J0YWJsZS5hZGRBbmltYXRpb25TdGF0ZSh7XG4gICAgICAgICAgICB0YXJnZXQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgICByZWN0OiBmb2xkaW5nID8gZ2V0UmVjdChtdWx0aURyYWdFbGVtZW50KSA6IGRyYWdSZWN0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdW5zZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuZnJvbVJlY3QgPSBkcmFnUmVjdDtcbiAgICAgICAgICBmcm9tU29ydGFibGUucmVtb3ZlQW5pbWF0aW9uU3RhdGUobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIGluc2VydE11bHRpRHJhZ0VsZW1lbnRzKCF0aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUsIHJvb3RFbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckNvbXBsZXRlZDogZnVuY3Rpb24gZHJhZ092ZXJDb21wbGV0ZWQoX3JlZjEwKSB7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmMTAuc29ydGFibGUsXG4gICAgICAgIGlzT3duZXIgPSBfcmVmMTAuaXNPd25lcixcbiAgICAgICAgaW5zZXJ0aW9uID0gX3JlZjEwLmluc2VydGlvbixcbiAgICAgICAgYWN0aXZlU29ydGFibGUgPSBfcmVmMTAuYWN0aXZlU29ydGFibGUsXG4gICAgICAgIHBhcmVudEVsID0gX3JlZjEwLnBhcmVudEVsLFxuICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMC5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgaWYgKGluc2VydGlvbikge1xuICAgICAgICAvLyBDbG9uZXMgbXVzdCBiZSBoaWRkZW4gYmVmb3JlIGZvbGRpbmcgYW5pbWF0aW9uIHRvIGNhcHR1cmUgZHJhZ1JlY3RBYnNvbHV0ZSBwcm9wZXJseVxuICAgICAgICBpZiAoaXNPd25lcikge1xuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9oaWRlQ2xvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpbml0aWFsRm9sZGluZyA9IGZhbHNlO1xuICAgICAgICAvLyBJZiBsZWF2aW5nIHNvcnQ6ZmFsc2Ugcm9vdCwgb3IgYWxyZWFkeSBmb2xkaW5nIC0gRm9sZCB0byBuZXcgbG9jYXRpb25cbiAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEgJiYgKGZvbGRpbmcgfHwgIWlzT3duZXIgJiYgIWFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuc29ydCAmJiAhcHV0U29ydGFibGUpKSB7XG4gICAgICAgICAgLy8gRm9sZDogU2V0IGFsbCBtdWx0aSBkcmFnIGVsZW1lbnRzJ3MgcmVjdHMgdG8gZHJhZ0VsJ3MgcmVjdCB3aGVuIG11bHRpLWRyYWcgZWxlbWVudHMgYXJlIGludmlzaWJsZVxuICAgICAgICAgIHZhciBkcmFnUmVjdEFic29sdXRlID0gZ2V0UmVjdChkcmFnRWwkMSwgZmFsc2UsIHRydWUsIHRydWUpO1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgICAgICAgICAgc2V0UmVjdChtdWx0aURyYWdFbGVtZW50LCBkcmFnUmVjdEFic29sdXRlKTtcblxuICAgICAgICAgICAgLy8gTW92ZSBlbGVtZW50KHMpIHRvIGVuZCBvZiBwYXJlbnRFbCBzbyB0aGF0IGl0IGRvZXMgbm90IGludGVyZmVyZSB3aXRoIG11bHRpLWRyYWcgY2xvbmVzIGluc2VydGlvbiBpZiB0aGV5IGFyZSBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gd2hpbGUgZm9sZGluZywgYW5kIHNvIHRoYXQgd2UgY2FuIGNhcHR1cmUgdGhlbSBhZ2FpbiBiZWNhdXNlIG9sZCBzb3J0YWJsZSB3aWxsIG5vIGxvbmdlciBiZSBmcm9tU29ydGFibGVcbiAgICAgICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZvbGRpbmcgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2xvbmVzIG11c3QgYmUgc2hvd24gKGFuZCBjaGVjayB0byByZW1vdmUgbXVsdGkgZHJhZ3MpIGFmdGVyIGZvbGRpbmcgd2hlbiBpbnRlcmZlcmluZyBtdWx0aURyYWdFbGVtZW50cyBhcmUgbW92ZWQgb3V0XG4gICAgICAgIGlmICghaXNPd25lcikge1xuICAgICAgICAgIC8vIE9ubHkgcmVtb3ZlIGlmIG5vdCBmb2xkaW5nIChmb2xkaW5nIHdpbGwgcmVtb3ZlIHRoZW0gYW55d2F5cylcbiAgICAgICAgICBpZiAoIWZvbGRpbmcpIHtcbiAgICAgICAgICAgIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIgY2xvbmVzSGlkZGVuQmVmb3JlID0gY2xvbmVzSGlkZGVuO1xuICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShzb3J0YWJsZSk7XG5cbiAgICAgICAgICAgIC8vIFVuZm9sZCBhbmltYXRpb24gZm9yIGNsb25lcyBpZiBzaG93aW5nIGZyb20gaGlkZGVuXG4gICAgICAgICAgICBpZiAoYWN0aXZlU29ydGFibGUub3B0aW9ucy5hbmltYXRpb24gJiYgIWNsb25lc0hpZGRlbiAmJiBjbG9uZXNIaWRkZW5CZWZvcmUpIHtcbiAgICAgICAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBjbG9uZSxcbiAgICAgICAgICAgICAgICAgIHJlY3Q6IGNsb25lc0Zyb21SZWN0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2xvbmUuZnJvbVJlY3QgPSBjbG9uZXNGcm9tUmVjdDtcbiAgICAgICAgICAgICAgICBjbG9uZS50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShzb3J0YWJsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckFuaW1hdGlvbkNhcHR1cmU6IGZ1bmN0aW9uIGRyYWdPdmVyQW5pbWF0aW9uQ2FwdHVyZShfcmVmMTEpIHtcbiAgICAgIHZhciBkcmFnUmVjdCA9IF9yZWYxMS5kcmFnUmVjdCxcbiAgICAgICAgaXNPd25lciA9IF9yZWYxMS5pc093bmVyLFxuICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYxMS5hY3RpdmVTb3J0YWJsZTtcbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgfSk7XG4gICAgICBpZiAoYWN0aXZlU29ydGFibGUub3B0aW9ucy5hbmltYXRpb24gJiYgIWlzT3duZXIgJiYgYWN0aXZlU29ydGFibGUubXVsdGlEcmFnLmlzTXVsdGlEcmFnKSB7XG4gICAgICAgIGNsb25lc0Zyb21SZWN0ID0gX2V4dGVuZHMoe30sIGRyYWdSZWN0KTtcbiAgICAgICAgdmFyIGRyYWdNYXRyaXggPSBtYXRyaXgoZHJhZ0VsJDEsIHRydWUpO1xuICAgICAgICBjbG9uZXNGcm9tUmVjdC50b3AgLT0gZHJhZ01hdHJpeC5mO1xuICAgICAgICBjbG9uZXNGcm9tUmVjdC5sZWZ0IC09IGRyYWdNYXRyaXguZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGU6IGZ1bmN0aW9uIGRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGUoKSB7XG4gICAgICBpZiAoZm9sZGluZykge1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKF9yZWYxMikge1xuICAgICAgdmFyIGV2dCA9IF9yZWYxMi5vcmlnaW5hbEV2ZW50LFxuICAgICAgICByb290RWwgPSBfcmVmMTIucm9vdEVsLFxuICAgICAgICBwYXJlbnRFbCA9IF9yZWYxMi5wYXJlbnRFbCxcbiAgICAgICAgc29ydGFibGUgPSBfcmVmMTIuc29ydGFibGUsXG4gICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCA9IF9yZWYxMi5kaXNwYXRjaFNvcnRhYmxlRXZlbnQsXG4gICAgICAgIG9sZEluZGV4ID0gX3JlZjEyLm9sZEluZGV4LFxuICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMi5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciB0b1NvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgdGhpcy5zb3J0YWJsZTtcbiAgICAgIGlmICghZXZ0KSByZXR1cm47XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgY2hpbGRyZW4gPSBwYXJlbnRFbC5jaGlsZHJlbjtcblxuICAgICAgLy8gTXVsdGktZHJhZyBzZWxlY3Rpb25cbiAgICAgIGlmICghZHJhZ1N0YXJ0ZWQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubXVsdGlEcmFnS2V5ICYmICF0aGlzLm11bHRpRHJhZ0tleURvd24pIHtcbiAgICAgICAgICB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZygpO1xuICAgICAgICB9XG4gICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCQxLCBvcHRpb25zLnNlbGVjdGVkQ2xhc3MsICF+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSkpO1xuICAgICAgICBpZiAoIX5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKSkge1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnB1c2goZHJhZ0VsJDEpO1xuICAgICAgICAgIGRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICAgICAgcm9vdEVsOiByb290RWwsXG4gICAgICAgICAgICBuYW1lOiAnc2VsZWN0JyxcbiAgICAgICAgICAgIHRhcmdldEVsOiBkcmFnRWwkMSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gTW9kaWZpZXIgYWN0aXZhdGVkLCBzZWxlY3QgZnJvbSBsYXN0IHRvIGRyYWdFbFxuICAgICAgICAgIGlmIChldnQuc2hpZnRLZXkgJiYgbGFzdE11bHRpRHJhZ1NlbGVjdCAmJiBzb3J0YWJsZS5lbC5jb250YWlucyhsYXN0TXVsdGlEcmFnU2VsZWN0KSkge1xuICAgICAgICAgICAgdmFyIGxhc3RJbmRleCA9IGluZGV4KGxhc3RNdWx0aURyYWdTZWxlY3QpLFxuICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleChkcmFnRWwkMSk7XG4gICAgICAgICAgICBpZiAofmxhc3RJbmRleCAmJiB+Y3VycmVudEluZGV4ICYmIGxhc3RJbmRleCAhPT0gY3VycmVudEluZGV4KSB7XG4gICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gTXVzdCBpbmNsdWRlIGxhc3RNdWx0aURyYWdTZWxlY3QgKHNlbGVjdCBpdCksIGluIGNhc2UgbW9kaWZpZWQgc2VsZWN0aW9uIGZyb20gbm8gc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgLy8gKGJ1dCBwcmV2aW91cyBzZWxlY3Rpb24gZXhpc3RlZClcbiAgICAgICAgICAgICAgICB2YXIgbiwgaTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICBpID0gbGFzdEluZGV4O1xuICAgICAgICAgICAgICAgICAgbiA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaSA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICAgIG4gPSBsYXN0SW5kZXggKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgICAgICAgICAgZm9yICg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIGlmICh+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihjaGlsZHJlbltpXSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZWxlbWVudCBpcyBkcmFnZ2FibGVcbiAgICAgICAgICAgICAgICAgIGlmICghY2xvc2VzdChjaGlsZHJlbltpXSwgb3B0aW9ucy5kcmFnZ2FibGUsIHBhcmVudEVsLCBmYWxzZSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZWxlbWVudCBpcyBmaWx0ZXJlZFxuICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0gZmlsdGVyICYmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nID8gZmlsdGVyLmNhbGwoc29ydGFibGUsIGV2dCwgY2hpbGRyZW5baV0sIHNvcnRhYmxlKSA6IGZpbHRlci5zcGxpdCgnLCcpLnNvbWUoZnVuY3Rpb24gKGNyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9zZXN0KGNoaWxkcmVuW2ldLCBjcml0ZXJpYS50cmltKCksIHBhcmVudEVsLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoY2hpbGRyZW5baV0sIG9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgICAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWw6IGNoaWxkcmVuW2ldLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGFzdE11bHRpRHJhZ1NlbGVjdCA9IGRyYWdFbCQxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpLCAxKTtcbiAgICAgICAgICBsYXN0TXVsdGlEcmFnU2VsZWN0ID0gbnVsbDtcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgbmFtZTogJ2Rlc2VsZWN0JyxcbiAgICAgICAgICAgIHRhcmdldEVsOiBkcmFnRWwkMSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE11bHRpLWRyYWcgZHJvcFxuICAgICAgaWYgKGRyYWdTdGFydGVkICYmIHRoaXMuaXNNdWx0aURyYWcpIHtcbiAgICAgICAgZm9sZGluZyA9IGZhbHNlO1xuICAgICAgICAvLyBEbyBub3QgXCJ1bmZvbGRcIiBhZnRlciBhcm91bmQgZHJhZ0VsIGlmIHJldmVydGVkXG4gICAgICAgIGlmICgocGFyZW50RWxbZXhwYW5kb10ub3B0aW9ucy5zb3J0IHx8IHBhcmVudEVsICE9PSByb290RWwpICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxKSxcbiAgICAgICAgICAgIG11bHRpRHJhZ0luZGV4ID0gaW5kZXgoZHJhZ0VsJDEsICc6bm90KC4nICsgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MgKyAnKScpO1xuICAgICAgICAgIGlmICghaW5pdGlhbEZvbGRpbmcgJiYgb3B0aW9ucy5hbmltYXRpb24pIGRyYWdFbCQxLnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgICAgICBpZiAoIWluaXRpYWxGb2xkaW5nKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgZHJhZ0VsJDEuZnJvbVJlY3QgPSBkcmFnUmVjdDtcbiAgICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCAhPT0gZHJhZ0VsJDEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZWN0ID0gZm9sZGluZyA/IGdldFJlY3QobXVsdGlEcmFnRWxlbWVudCkgOiBkcmFnUmVjdDtcbiAgICAgICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuZnJvbVJlY3QgPSByZWN0O1xuXG4gICAgICAgICAgICAgICAgICAvLyBQcmVwYXJlIHVuZm9sZCBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgIHRvU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHJlY3Q6IHJlY3RcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE11bHRpIGRyYWcgZWxlbWVudHMgYXJlIG5vdCBuZWNlc3NhcmlseSByZW1vdmVkIGZyb20gdGhlIERPTSBvbiBkcm9wLCBzbyB0byByZWluc2VydFxuICAgICAgICAgICAgLy8gcHJvcGVybHkgdGhleSBtdXN0IGFsbCBiZSByZW1vdmVkXG4gICAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5bbXVsdGlEcmFnSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIGNoaWxkcmVuW211bHRpRHJhZ0luZGV4XSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbXVsdGlEcmFnSW5kZXgrKztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBJZiBpbml0aWFsIGZvbGRpbmcgaXMgZG9uZSwgdGhlIGVsZW1lbnRzIG1heSBoYXZlIGNoYW5nZWQgcG9zaXRpb24gYmVjYXVzZSB0aGV5IGFyZSBub3dcbiAgICAgICAgICAgIC8vIHVuZm9sZGluZyBhcm91bmQgZHJhZ0VsLCBldmVuIHRob3VnaCBkcmFnRWwgbWF5IG5vdCBoYXZlIGhpcyBpbmRleCBjaGFuZ2VkLCBzbyB1cGRhdGUgZXZlbnRcbiAgICAgICAgICAgIC8vIG11c3QgYmUgZmlyZWQgaGVyZSBhcyBTb3J0YWJsZSB3aWxsIG5vdC5cbiAgICAgICAgICAgIGlmIChvbGRJbmRleCA9PT0gaW5kZXgoZHJhZ0VsJDEpKSB7XG4gICAgICAgICAgICAgIHZhciB1cGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXggIT09IGluZGV4KG11bHRpRHJhZ0VsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICB1cGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQoJ3VwZGF0ZScpO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCgnc29ydCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTXVzdCBiZSBkb25lIGFmdGVyIGNhcHR1cmluZyBpbmRpdmlkdWFsIHJlY3RzIChzY3JvbGwgYmFyKVxuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0b1NvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBjbG9uZXMgaWYgbmVjZXNzYXJ5XG4gICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICBjbG9uZS5wYXJlbnROb2RlICYmIGNsb25lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG51bGxpbmdHbG9iYWw6IGZ1bmN0aW9uIG51bGxpbmdHbG9iYWwoKSB7XG4gICAgICB0aGlzLmlzTXVsdGlEcmFnID0gZHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5sZW5ndGggPSAwO1xuICAgIH0sXG4gICAgZGVzdHJveUdsb2JhbDogZnVuY3Rpb24gZGVzdHJveUdsb2JhbCgpIHtcbiAgICAgIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG4gICAgICBvZmYoZG9jdW1lbnQsICdwb2ludGVydXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5fY2hlY2tLZXlEb3duKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2tleXVwJywgdGhpcy5fY2hlY2tLZXlVcCk7XG4gICAgfSxcbiAgICBfZGVzZWxlY3RNdWx0aURyYWc6IGZ1bmN0aW9uIF9kZXNlbGVjdE11bHRpRHJhZyhldnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZHJhZ1N0YXJ0ZWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZHJhZ1N0YXJ0ZWQpIHJldHVybjtcblxuICAgICAgLy8gT25seSBkZXNlbGVjdCBpZiBzZWxlY3Rpb24gaXMgaW4gdGhpcyBzb3J0YWJsZVxuICAgICAgaWYgKG11bHRpRHJhZ1NvcnRhYmxlICE9PSB0aGlzLnNvcnRhYmxlKSByZXR1cm47XG5cbiAgICAgIC8vIE9ubHkgZGVzZWxlY3QgaWYgdGFyZ2V0IGlzIG5vdCBpdGVtIGluIHRoaXMgc29ydGFibGVcbiAgICAgIGlmIChldnQgJiYgY2xvc2VzdChldnQudGFyZ2V0LCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLnNvcnRhYmxlLmVsLCBmYWxzZSkpIHJldHVybjtcblxuICAgICAgLy8gT25seSBkZXNlbGVjdCBpZiBsZWZ0IGNsaWNrXG4gICAgICBpZiAoZXZ0ICYmIGV2dC5idXR0b24gIT09IDApIHJldHVybjtcbiAgICAgIHdoaWxlIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGVsID0gbXVsdGlEcmFnRWxlbWVudHNbMF07XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgZmFsc2UpO1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5zaGlmdCgpO1xuICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICBzb3J0YWJsZTogdGhpcy5zb3J0YWJsZSxcbiAgICAgICAgICByb290RWw6IHRoaXMuc29ydGFibGUuZWwsXG4gICAgICAgICAgbmFtZTogJ2Rlc2VsZWN0JyxcbiAgICAgICAgICB0YXJnZXRFbDogZWwsXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgX2NoZWNrS2V5RG93bjogZnVuY3Rpb24gX2NoZWNrS2V5RG93bihldnQpIHtcbiAgICAgIGlmIChldnQua2V5ID09PSB0aGlzLm9wdGlvbnMubXVsdGlEcmFnS2V5KSB7XG4gICAgICAgIHRoaXMubXVsdGlEcmFnS2V5RG93biA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBfY2hlY2tLZXlVcDogZnVuY3Rpb24gX2NoZWNrS2V5VXAoZXZ0KSB7XG4gICAgICBpZiAoZXZ0LmtleSA9PT0gdGhpcy5vcHRpb25zLm11bHRpRHJhZ0tleSkge1xuICAgICAgICB0aGlzLm11bHRpRHJhZ0tleURvd24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyhNdWx0aURyYWcsIHtcbiAgICAvLyBTdGF0aWMgbWV0aG9kcyAmIHByb3BlcnRpZXNcbiAgICBwbHVnaW5OYW1lOiAnbXVsdGlEcmFnJyxcbiAgICB1dGlsczoge1xuICAgICAgLyoqXHJcbiAgICAgICAqIFNlbGVjdHMgdGhlIHByb3ZpZGVkIG11bHRpLWRyYWcgaXRlbVxyXG4gICAgICAgKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgVGhlIGVsZW1lbnQgdG8gYmUgc2VsZWN0ZWRcclxuICAgICAgICovXG4gICAgICBzZWxlY3Q6IGZ1bmN0aW9uIHNlbGVjdChlbCkge1xuICAgICAgICB2YXIgc29ydGFibGUgPSBlbC5wYXJlbnROb2RlW2V4cGFuZG9dO1xuICAgICAgICBpZiAoIXNvcnRhYmxlIHx8ICFzb3J0YWJsZS5vcHRpb25zLm11bHRpRHJhZyB8fCB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihlbCkpIHJldHVybjtcbiAgICAgICAgaWYgKG11bHRpRHJhZ1NvcnRhYmxlICYmIG11bHRpRHJhZ1NvcnRhYmxlICE9PSBzb3J0YWJsZSkge1xuICAgICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlLm11bHRpRHJhZy5fZGVzZWxlY3RNdWx0aURyYWcoKTtcbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHNvcnRhYmxlO1xuICAgICAgICB9XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCBzb3J0YWJsZS5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIHRydWUpO1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGVsKTtcbiAgICAgIH0sXG4gICAgICAvKipcclxuICAgICAgICogRGVzZWxlY3RzIHRoZSBwcm92aWRlZCBtdWx0aS1kcmFnIGl0ZW1cclxuICAgICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgIFRoZSBlbGVtZW50IHRvIGJlIGRlc2VsZWN0ZWRcclxuICAgICAgICovXG4gICAgICBkZXNlbGVjdDogZnVuY3Rpb24gZGVzZWxlY3QoZWwpIHtcbiAgICAgICAgdmFyIHNvcnRhYmxlID0gZWwucGFyZW50Tm9kZVtleHBhbmRvXSxcbiAgICAgICAgICBpbmRleCA9IG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZWwpO1xuICAgICAgICBpZiAoIXNvcnRhYmxlIHx8ICFzb3J0YWJsZS5vcHRpb25zLm11bHRpRHJhZyB8fCAhfmluZGV4KSByZXR1cm47XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCBzb3J0YWJsZS5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZXZlbnRQcm9wZXJ0aWVzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG4gICAgICB2YXIgb2xkSW5kaWNpZXMgPSBbXSxcbiAgICAgICAgbmV3SW5kaWNpZXMgPSBbXTtcbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgb2xkSW5kaWNpZXMucHVzaCh7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICBpbmRleDogbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIG11bHRpRHJhZ0VsZW1lbnRzIHdpbGwgYWxyZWFkeSBiZSBzb3J0ZWQgaWYgZm9sZGluZ1xuICAgICAgICB2YXIgbmV3SW5kZXg7XG4gICAgICAgIGlmIChmb2xkaW5nICYmIG11bHRpRHJhZ0VsZW1lbnQgIT09IGRyYWdFbCQxKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChmb2xkaW5nKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSBpbmRleChtdWx0aURyYWdFbGVtZW50LCAnOm5vdCguJyArIF90aGlzMy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MgKyAnKScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0luZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3SW5kaWNpZXMucHVzaCh7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICBpbmRleDogbmV3SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1zOiBfdG9Db25zdW1hYmxlQXJyYXkobXVsdGlEcmFnRWxlbWVudHMpLFxuICAgICAgICBjbG9uZXM6IFtdLmNvbmNhdChtdWx0aURyYWdDbG9uZXMpLFxuICAgICAgICBvbGRJbmRpY2llczogb2xkSW5kaWNpZXMsXG4gICAgICAgIG5ld0luZGljaWVzOiBuZXdJbmRpY2llc1xuICAgICAgfTtcbiAgICB9LFxuICAgIG9wdGlvbkxpc3RlbmVyczoge1xuICAgICAgbXVsdGlEcmFnS2V5OiBmdW5jdGlvbiBtdWx0aURyYWdLZXkoa2V5KSB7XG4gICAgICAgIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoa2V5ID09PSAnY3RybCcpIHtcbiAgICAgICAgICBrZXkgPSAnQ29udHJvbCc7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBrZXkgPSBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGluc2VydE11bHRpRHJhZ0VsZW1lbnRzKGNsb25lc0luc2VydGVkLCByb290RWwpIHtcbiAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCwgaSkge1xuICAgIHZhciB0YXJnZXQgPSByb290RWwuY2hpbGRyZW5bbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ICsgKGNsb25lc0luc2VydGVkID8gTnVtYmVyKGkpIDogMCldO1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUobXVsdGlEcmFnRWxlbWVudCwgdGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxyXG4gKiBJbnNlcnQgbXVsdGktZHJhZyBjbG9uZXNcclxuICogQHBhcmFtICB7W0Jvb2xlYW5dfSBlbGVtZW50c0luc2VydGVkICBXaGV0aGVyIHRoZSBtdWx0aS1kcmFnIGVsZW1lbnRzIGFyZSBpbnNlcnRlZFxyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gcm9vdEVsXHJcbiAqL1xuZnVuY3Rpb24gaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKGVsZW1lbnRzSW5zZXJ0ZWQsIHJvb3RFbCkge1xuICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUsIGkpIHtcbiAgICB2YXIgdGFyZ2V0ID0gcm9vdEVsLmNoaWxkcmVuW2Nsb25lLnNvcnRhYmxlSW5kZXggKyAoZWxlbWVudHNJbnNlcnRlZCA/IE51bWJlcihpKSA6IDApXTtcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lLCB0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290RWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpIHtcbiAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgIG11bHRpRHJhZ0VsZW1lbnQucGFyZW50Tm9kZSAmJiBtdWx0aURyYWdFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gIH0pO1xufVxuXG5Tb3J0YWJsZS5tb3VudChuZXcgQXV0b1Njcm9sbFBsdWdpbigpKTtcblNvcnRhYmxlLm1vdW50KFJlbW92ZSwgUmV2ZXJ0KTtcblxuZXhwb3J0IGRlZmF1bHQgU29ydGFibGU7XG5leHBvcnQgeyBNdWx0aURyYWdQbHVnaW4gYXMgTXVsdGlEcmFnLCBTb3J0YWJsZSwgU3dhcFBsdWdpbiBhcyBTd2FwIH07XG4iLCAiaW1wb3J0IFNvcnRhYmxlIGZyb20gJ3NvcnRhYmxlanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBzb3J0YWJsZSA9IG5ldyBTb3J0YWJsZSh0aGlzLmVsLCB7XG4gICAgICBhbmltYXRpb246IDEsXG4gICAgICBkZWxheTogNCxcbiAgICAgIGRlbGF5T25Ub3VjaE9ubHk6IHRydWUsXG4gICAgICBncm91cDogJ3NoYXJlZCcsXG4gICAgICBkcmFnZ2FibGU6ICcuZHJhZ2dhYmxlJyxcbiAgICAgIGdob3N0Q2xhc3M6ICcuc29ydGFibGUtZ2hvc3QnLFxuICAgICAgaGFuZGxlOiBcIi5kcmFnLWhhbmRsZVwiLFxuICAgICAgb25FbmQ6IChldnQpID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coc29ydGFibGUudG9BcnJheSgpKVxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICBjb25zb2xlLmxvZygnb25FbmQnKTtcblxuICAgICAgICB0aGlzLnB1c2hFdmVudCgnZHJvcHBlZCcsIHtcbiAgICAgICAgICBkcmFnZ2VkSWQ6IGV2dC5pdGVtLmlkLCAvLyBpZCBvZiB0aGUgZHJhZ2dlZCBpdGVtXG4gICAgICAgICAgdG9Ecm9wem9uZUlkOiBldnQudG8uaWQsIC8vIGlkIG9mIHRoZSBkcm9wIHpvbmUgd2hlcmUgdGhlIGRyb3Agb2NjdXJlZFxuICAgICAgICAgIGZyb21Ecm9wem9uZUlkOiBldnQuZnJvbS5pZCwgLy8gaWQgb2YgdGhlIGRyb3Agem9uZSB3aGVyZSB0aGUgZHJvcCBvY2N1cmVkXG4gICAgICAgICAgbmV3RHJhZ2dhYmxlSW5kZXg6IGV2dC5uZXdEcmFnZ2FibGVJbmRleCwgLy8gaW5kZXggd2hlcmUgdGhlIGl0ZW0gd2FzIGRyb3BwZWQgKHJlbGF0aXZlIHRvIG90aGVyIGl0ZW1zIGluIHRoZSBkcm9wIHpvbmUpXG4gICAgICAgICAgb2xkRHJhZ2dhYmxlSW5kZXg6IGV2dC5vbGREcmFnZ2FibGVJbmRleCwgLy8gaW5kZXggd2hlcmUgdGhlIGl0ZW0gd2FzIGRyb3BwZWQgKHJlbGF0aXZlIHRvIG90aGVyIGl0ZW1zIGluIHRoZSBkcm9wIHpvbmUpXG4gICAgICAgICAgbmV3T3JkZXI6IHNvcnRhYmxlLnRvQXJyYXkoKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufTtcbiIsICJpbXBvcnQgc2hvd2Rvd24gZnJvbSAnc2hvd2Rvd24nXG5pbXBvcnQgVHVybmRvd25TZXJ2aWNlIGZyb20gJ3R1cm5kb3duJ1xuXG5jb25zdCBjb252ZXJ0ZXIgPSBuZXcgc2hvd2Rvd24uQ29udmVydGVyKClcbnZhciB0dXJuZG93blNlcnZpY2UgPSBuZXcgVHVybmRvd25TZXJ2aWNlKClcblxuaW1wb3J0IFRyaXggZnJvbSBcInRyaXhcIlxuXG4vLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidHJpeC1iZWZvcmUtaW5pdGlhbGl6ZVwiLCAoKSA9PiB7IC8qIENoYW5nZSBUcml4LmNvbmZpZyBpZiB5b3UgbmVlZCAqL1xuVHJpeC5jb25maWcuYmxvY2tBdHRyaWJ1dGVzLmhlYWRpbmcyID0ge1xuICB0YWdOYW1lOiBcImgyXCIsXG4gIHRlcm1pbmFsOiB0cnVlLFxuICBicmVha09uUmV0dXJuOiB0cnVlXG59O1xuVHJpeC5jb25maWcuYmxvY2tBdHRyaWJ1dGVzLmhlYWRpbmczID0ge1xuICB0YWdOYW1lOiBcImgzXCIsXG4gIHRlcm1pbmFsOiB0cnVlLFxuICBicmVha09uUmV0dXJuOiB0cnVlXG59O1xuVHJpeC5jb25maWcuYmxvY2tBdHRyaWJ1dGVzLmhlYWRpbmc0ID0ge1xuICB0YWdOYW1lOiBcImg0XCIsXG4gIHRlcm1pbmFsOiB0cnVlLFxuICBicmVha09uUmV0dXJuOiB0cnVlXG59O1xuVHJpeC5jb25maWcuYmxvY2tBdHRyaWJ1dGVzLmhlYWRpbmc1ID0ge1xuICB0YWdOYW1lOiBcImg1XCIsXG4gIHRlcm1pbmFsOiB0cnVlLFxuICBicmVha09uUmV0dXJuOiB0cnVlXG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG1vdW50ZWQoKSB7XG4gICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRoaXMuZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RyaXgtZWRpdG9yJyk/LlswXVxuICAgIGNvbnN0IGVkaXRvciA9IHRhcmdldE5vZGUuZWRpdG9yXG5cblxuICAgIGNvbnN0IGlucHV0VGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0Tm9kZS5pZC5yZXBsYWNlKCdlZGl0b3InLCAnY29udGVudCcpKVxuICAgIGVkaXRvci5pbnNlcnRIVE1MKGNvbnZlcnRlci5tYWtlSHRtbChpbnB1dFRhcmdldC52YWx1ZSkpXG5cblxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJpeC1jaGFuZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IG1hcmtkb3duID0gdHVybmRvd25TZXJ2aWNlLnR1cm5kb3duKHRhcmdldE5vZGUuaW5uZXJIVE1MKVxuICAgICAgaW5wdXRUYXJnZXQudmFsdWUgPSBtYXJrZG93blxuICAgICAgaW5wdXRUYXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2lucHV0JywgeyBidWJibGVzOiB0cnVlIH0pKVxuICAgIH0pXG4gIH0sXG59XG4iLCAiZnVuY3Rpb24gZXh0ZW5kIChkZXN0aW5hdGlvbikge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSBkZXN0aW5hdGlvbltrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiByZXBlYXQgKGNoYXJhY3RlciwgY291bnQpIHtcbiAgcmV0dXJuIEFycmF5KGNvdW50ICsgMSkuam9pbihjaGFyYWN0ZXIpXG59XG5cbmZ1bmN0aW9uIHRyaW1MZWFkaW5nTmV3bGluZXMgKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL15cXG4qLywgJycpXG59XG5cbmZ1bmN0aW9uIHRyaW1UcmFpbGluZ05ld2xpbmVzIChzdHJpbmcpIHtcbiAgLy8gYXZvaWQgbWF0Y2gtYXQtZW5kIHJlZ2V4cCBib3R0bGVuZWNrLCBzZWUgIzM3MFxuICB2YXIgaW5kZXhFbmQgPSBzdHJpbmcubGVuZ3RoO1xuICB3aGlsZSAoaW5kZXhFbmQgPiAwICYmIHN0cmluZ1tpbmRleEVuZCAtIDFdID09PSAnXFxuJykgaW5kZXhFbmQtLTtcbiAgcmV0dXJuIHN0cmluZy5zdWJzdHJpbmcoMCwgaW5kZXhFbmQpXG59XG5cbnZhciBibG9ja0VsZW1lbnRzID0gW1xuICAnQUREUkVTUycsICdBUlRJQ0xFJywgJ0FTSURFJywgJ0FVRElPJywgJ0JMT0NLUVVPVEUnLCAnQk9EWScsICdDQU5WQVMnLFxuICAnQ0VOVEVSJywgJ0REJywgJ0RJUicsICdESVYnLCAnREwnLCAnRFQnLCAnRklFTERTRVQnLCAnRklHQ0FQVElPTicsICdGSUdVUkUnLFxuICAnRk9PVEVSJywgJ0ZPUk0nLCAnRlJBTUVTRVQnLCAnSDEnLCAnSDInLCAnSDMnLCAnSDQnLCAnSDUnLCAnSDYnLCAnSEVBREVSJyxcbiAgJ0hHUk9VUCcsICdIUicsICdIVE1MJywgJ0lTSU5ERVgnLCAnTEknLCAnTUFJTicsICdNRU5VJywgJ05BVicsICdOT0ZSQU1FUycsXG4gICdOT1NDUklQVCcsICdPTCcsICdPVVRQVVQnLCAnUCcsICdQUkUnLCAnU0VDVElPTicsICdUQUJMRScsICdUQk9EWScsICdURCcsXG4gICdURk9PVCcsICdUSCcsICdUSEVBRCcsICdUUicsICdVTCdcbl07XG5cbmZ1bmN0aW9uIGlzQmxvY2sgKG5vZGUpIHtcbiAgcmV0dXJuIGlzKG5vZGUsIGJsb2NrRWxlbWVudHMpXG59XG5cbnZhciB2b2lkRWxlbWVudHMgPSBbXG4gICdBUkVBJywgJ0JBU0UnLCAnQlInLCAnQ09MJywgJ0NPTU1BTkQnLCAnRU1CRUQnLCAnSFInLCAnSU1HJywgJ0lOUFVUJyxcbiAgJ0tFWUdFTicsICdMSU5LJywgJ01FVEEnLCAnUEFSQU0nLCAnU09VUkNFJywgJ1RSQUNLJywgJ1dCUidcbl07XG5cbmZ1bmN0aW9uIGlzVm9pZCAobm9kZSkge1xuICByZXR1cm4gaXMobm9kZSwgdm9pZEVsZW1lbnRzKVxufVxuXG5mdW5jdGlvbiBoYXNWb2lkIChub2RlKSB7XG4gIHJldHVybiBoYXMobm9kZSwgdm9pZEVsZW1lbnRzKVxufVxuXG52YXIgbWVhbmluZ2Z1bFdoZW5CbGFua0VsZW1lbnRzID0gW1xuICAnQScsICdUQUJMRScsICdUSEVBRCcsICdUQk9EWScsICdURk9PVCcsICdUSCcsICdURCcsICdJRlJBTUUnLCAnU0NSSVBUJyxcbiAgJ0FVRElPJywgJ1ZJREVPJ1xuXTtcblxuZnVuY3Rpb24gaXNNZWFuaW5nZnVsV2hlbkJsYW5rIChub2RlKSB7XG4gIHJldHVybiBpcyhub2RlLCBtZWFuaW5nZnVsV2hlbkJsYW5rRWxlbWVudHMpXG59XG5cbmZ1bmN0aW9uIGhhc01lYW5pbmdmdWxXaGVuQmxhbmsgKG5vZGUpIHtcbiAgcmV0dXJuIGhhcyhub2RlLCBtZWFuaW5nZnVsV2hlbkJsYW5rRWxlbWVudHMpXG59XG5cbmZ1bmN0aW9uIGlzIChub2RlLCB0YWdOYW1lcykge1xuICByZXR1cm4gdGFnTmFtZXMuaW5kZXhPZihub2RlLm5vZGVOYW1lKSA+PSAwXG59XG5cbmZ1bmN0aW9uIGhhcyAobm9kZSwgdGFnTmFtZXMpIHtcbiAgcmV0dXJuIChcbiAgICBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lICYmXG4gICAgdGFnTmFtZXMuc29tZShmdW5jdGlvbiAodGFnTmFtZSkge1xuICAgICAgcmV0dXJuIG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSkubGVuZ3RoXG4gICAgfSlcbiAgKVxufVxuXG52YXIgcnVsZXMgPSB7fTtcblxucnVsZXMucGFyYWdyYXBoID0ge1xuICBmaWx0ZXI6ICdwJyxcblxuICByZXBsYWNlbWVudDogZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICByZXR1cm4gJ1xcblxcbicgKyBjb250ZW50ICsgJ1xcblxcbidcbiAgfVxufTtcblxucnVsZXMubGluZUJyZWFrID0ge1xuICBmaWx0ZXI6ICdicicsXG5cbiAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChjb250ZW50LCBub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuYnIgKyAnXFxuJ1xuICB9XG59O1xuXG5ydWxlcy5oZWFkaW5nID0ge1xuICBmaWx0ZXI6IFsnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnXSxcblxuICByZXBsYWNlbWVudDogZnVuY3Rpb24gKGNvbnRlbnQsIG5vZGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgaExldmVsID0gTnVtYmVyKG5vZGUubm9kZU5hbWUuY2hhckF0KDEpKTtcblxuICAgIGlmIChvcHRpb25zLmhlYWRpbmdTdHlsZSA9PT0gJ3NldGV4dCcgJiYgaExldmVsIDwgMykge1xuICAgICAgdmFyIHVuZGVybGluZSA9IHJlcGVhdCgoaExldmVsID09PSAxID8gJz0nIDogJy0nKSwgY29udGVudC5sZW5ndGgpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgJ1xcblxcbicgKyBjb250ZW50ICsgJ1xcbicgKyB1bmRlcmxpbmUgKyAnXFxuXFxuJ1xuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ1xcblxcbicgKyByZXBlYXQoJyMnLCBoTGV2ZWwpICsgJyAnICsgY29udGVudCArICdcXG5cXG4nXG4gICAgfVxuICB9XG59O1xuXG5ydWxlcy5ibG9ja3F1b3RlID0ge1xuICBmaWx0ZXI6ICdibG9ja3F1b3RlJyxcblxuICByZXBsYWNlbWVudDogZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC9eXFxuK3xcXG4rJC9nLCAnJyk7XG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvXi9nbSwgJz4gJyk7XG4gICAgcmV0dXJuICdcXG5cXG4nICsgY29udGVudCArICdcXG5cXG4nXG4gIH1cbn07XG5cbnJ1bGVzLmxpc3QgPSB7XG4gIGZpbHRlcjogWyd1bCcsICdvbCddLFxuXG4gIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAoY29udGVudCwgbm9kZSkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudC5ub2RlTmFtZSA9PT0gJ0xJJyAmJiBwYXJlbnQubGFzdEVsZW1lbnRDaGlsZCA9PT0gbm9kZSkge1xuICAgICAgcmV0dXJuICdcXG4nICsgY29udGVudFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ1xcblxcbicgKyBjb250ZW50ICsgJ1xcblxcbidcbiAgICB9XG4gIH1cbn07XG5cbnJ1bGVzLmxpc3RJdGVtID0ge1xuICBmaWx0ZXI6ICdsaScsXG5cbiAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChjb250ZW50LCBub2RlLCBvcHRpb25zKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnRcbiAgICAgIC5yZXBsYWNlKC9eXFxuKy8sICcnKSAvLyByZW1vdmUgbGVhZGluZyBuZXdsaW5lc1xuICAgICAgLnJlcGxhY2UoL1xcbiskLywgJ1xcbicpIC8vIHJlcGxhY2UgdHJhaWxpbmcgbmV3bGluZXMgd2l0aCBqdXN0IGEgc2luZ2xlIG9uZVxuICAgICAgLnJlcGxhY2UoL1xcbi9nbSwgJ1xcbiAgICAnKTsgLy8gaW5kZW50XG4gICAgdmFyIHByZWZpeCA9IG9wdGlvbnMuYnVsbGV0TGlzdE1hcmtlciArICcgICAnO1xuICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudC5ub2RlTmFtZSA9PT0gJ09MJykge1xuICAgICAgdmFyIHN0YXJ0ID0gcGFyZW50LmdldEF0dHJpYnV0ZSgnc3RhcnQnKTtcbiAgICAgIHZhciBpbmRleCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwocGFyZW50LmNoaWxkcmVuLCBub2RlKTtcbiAgICAgIHByZWZpeCA9IChzdGFydCA/IE51bWJlcihzdGFydCkgKyBpbmRleCA6IGluZGV4ICsgMSkgKyAnLiAgJztcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIHByZWZpeCArIGNvbnRlbnQgKyAobm9kZS5uZXh0U2libGluZyAmJiAhL1xcbiQvLnRlc3QoY29udGVudCkgPyAnXFxuJyA6ICcnKVxuICAgIClcbiAgfVxufTtcblxucnVsZXMuaW5kZW50ZWRDb2RlQmxvY2sgPSB7XG4gIGZpbHRlcjogZnVuY3Rpb24gKG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgb3B0aW9ucy5jb2RlQmxvY2tTdHlsZSA9PT0gJ2luZGVudGVkJyAmJlxuICAgICAgbm9kZS5ub2RlTmFtZSA9PT0gJ1BSRScgJiZcbiAgICAgIG5vZGUuZmlyc3RDaGlsZCAmJlxuICAgICAgbm9kZS5maXJzdENoaWxkLm5vZGVOYW1lID09PSAnQ09ERSdcbiAgICApXG4gIH0sXG5cbiAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChjb250ZW50LCBub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICdcXG5cXG4gICAgJyArXG4gICAgICBub2RlLmZpcnN0Q2hpbGQudGV4dENvbnRlbnQucmVwbGFjZSgvXFxuL2csICdcXG4gICAgJykgK1xuICAgICAgJ1xcblxcbidcbiAgICApXG4gIH1cbn07XG5cbnJ1bGVzLmZlbmNlZENvZGVCbG9jayA9IHtcbiAgZmlsdGVyOiBmdW5jdGlvbiAobm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiAoXG4gICAgICBvcHRpb25zLmNvZGVCbG9ja1N0eWxlID09PSAnZmVuY2VkJyAmJlxuICAgICAgbm9kZS5ub2RlTmFtZSA9PT0gJ1BSRScgJiZcbiAgICAgIG5vZGUuZmlyc3RDaGlsZCAmJlxuICAgICAgbm9kZS5maXJzdENoaWxkLm5vZGVOYW1lID09PSAnQ09ERSdcbiAgICApXG4gIH0sXG5cbiAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChjb250ZW50LCBub2RlLCBvcHRpb25zKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IG5vZGUuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJyc7XG4gICAgdmFyIGxhbmd1YWdlID0gKGNsYXNzTmFtZS5tYXRjaCgvbGFuZ3VhZ2UtKFxcUyspLykgfHwgW251bGwsICcnXSlbMV07XG4gICAgdmFyIGNvZGUgPSBub2RlLmZpcnN0Q2hpbGQudGV4dENvbnRlbnQ7XG5cbiAgICB2YXIgZmVuY2VDaGFyID0gb3B0aW9ucy5mZW5jZS5jaGFyQXQoMCk7XG4gICAgdmFyIGZlbmNlU2l6ZSA9IDM7XG4gICAgdmFyIGZlbmNlSW5Db2RlUmVnZXggPSBuZXcgUmVnRXhwKCdeJyArIGZlbmNlQ2hhciArICd7Myx9JywgJ2dtJyk7XG5cbiAgICB2YXIgbWF0Y2g7XG4gICAgd2hpbGUgKChtYXRjaCA9IGZlbmNlSW5Db2RlUmVnZXguZXhlYyhjb2RlKSkpIHtcbiAgICAgIGlmIChtYXRjaFswXS5sZW5ndGggPj0gZmVuY2VTaXplKSB7XG4gICAgICAgIGZlbmNlU2l6ZSA9IG1hdGNoWzBdLmxlbmd0aCArIDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGZlbmNlID0gcmVwZWF0KGZlbmNlQ2hhciwgZmVuY2VTaXplKTtcblxuICAgIHJldHVybiAoXG4gICAgICAnXFxuXFxuJyArIGZlbmNlICsgbGFuZ3VhZ2UgKyAnXFxuJyArXG4gICAgICBjb2RlLnJlcGxhY2UoL1xcbiQvLCAnJykgK1xuICAgICAgJ1xcbicgKyBmZW5jZSArICdcXG5cXG4nXG4gICAgKVxuICB9XG59O1xuXG5ydWxlcy5ob3Jpem9udGFsUnVsZSA9IHtcbiAgZmlsdGVyOiAnaHInLFxuXG4gIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAoY29udGVudCwgbm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiAnXFxuXFxuJyArIG9wdGlvbnMuaHIgKyAnXFxuXFxuJ1xuICB9XG59O1xuXG5ydWxlcy5pbmxpbmVMaW5rID0ge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIChub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG9wdGlvbnMubGlua1N0eWxlID09PSAnaW5saW5lZCcgJiZcbiAgICAgIG5vZGUubm9kZU5hbWUgPT09ICdBJyAmJlxuICAgICAgbm9kZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuICAgIClcbiAgfSxcblxuICByZXBsYWNlbWVudDogZnVuY3Rpb24gKGNvbnRlbnQsIG5vZGUpIHtcbiAgICB2YXIgaHJlZiA9IG5vZGUuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgaWYgKGhyZWYpIGhyZWYgPSBocmVmLnJlcGxhY2UoLyhbKCldKS9nLCAnXFxcXCQxJyk7XG4gICAgdmFyIHRpdGxlID0gY2xlYW5BdHRyaWJ1dGUobm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykpO1xuICAgIGlmICh0aXRsZSkgdGl0bGUgPSAnIFwiJyArIHRpdGxlLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKSArICdcIic7XG4gICAgcmV0dXJuICdbJyArIGNvbnRlbnQgKyAnXSgnICsgaHJlZiArIHRpdGxlICsgJyknXG4gIH1cbn07XG5cbnJ1bGVzLnJlZmVyZW5jZUxpbmsgPSB7XG4gIGZpbHRlcjogZnVuY3Rpb24gKG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgb3B0aW9ucy5saW5rU3R5bGUgPT09ICdyZWZlcmVuY2VkJyAmJlxuICAgICAgbm9kZS5ub2RlTmFtZSA9PT0gJ0EnICYmXG4gICAgICBub2RlLmdldEF0dHJpYnV0ZSgnaHJlZicpXG4gICAgKVxuICB9LFxuXG4gIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAoY29udGVudCwgbm9kZSwgb3B0aW9ucykge1xuICAgIHZhciBocmVmID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICB2YXIgdGl0bGUgPSBjbGVhbkF0dHJpYnV0ZShub2RlLmdldEF0dHJpYnV0ZSgndGl0bGUnKSk7XG4gICAgaWYgKHRpdGxlKSB0aXRsZSA9ICcgXCInICsgdGl0bGUgKyAnXCInO1xuICAgIHZhciByZXBsYWNlbWVudDtcbiAgICB2YXIgcmVmZXJlbmNlO1xuXG4gICAgc3dpdGNoIChvcHRpb25zLmxpbmtSZWZlcmVuY2VTdHlsZSkge1xuICAgICAgY2FzZSAnY29sbGFwc2VkJzpcbiAgICAgICAgcmVwbGFjZW1lbnQgPSAnWycgKyBjb250ZW50ICsgJ11bXSc7XG4gICAgICAgIHJlZmVyZW5jZSA9ICdbJyArIGNvbnRlbnQgKyAnXTogJyArIGhyZWYgKyB0aXRsZTtcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3Nob3J0Y3V0JzpcbiAgICAgICAgcmVwbGFjZW1lbnQgPSAnWycgKyBjb250ZW50ICsgJ10nO1xuICAgICAgICByZWZlcmVuY2UgPSAnWycgKyBjb250ZW50ICsgJ106ICcgKyBocmVmICsgdGl0bGU7XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgaWQgPSB0aGlzLnJlZmVyZW5jZXMubGVuZ3RoICsgMTtcbiAgICAgICAgcmVwbGFjZW1lbnQgPSAnWycgKyBjb250ZW50ICsgJ11bJyArIGlkICsgJ10nO1xuICAgICAgICByZWZlcmVuY2UgPSAnWycgKyBpZCArICddOiAnICsgaHJlZiArIHRpdGxlO1xuICAgIH1cblxuICAgIHRoaXMucmVmZXJlbmNlcy5wdXNoKHJlZmVyZW5jZSk7XG4gICAgcmV0dXJuIHJlcGxhY2VtZW50XG4gIH0sXG5cbiAgcmVmZXJlbmNlczogW10sXG5cbiAgYXBwZW5kOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciByZWZlcmVuY2VzID0gJyc7XG4gICAgaWYgKHRoaXMucmVmZXJlbmNlcy5sZW5ndGgpIHtcbiAgICAgIHJlZmVyZW5jZXMgPSAnXFxuXFxuJyArIHRoaXMucmVmZXJlbmNlcy5qb2luKCdcXG4nKSArICdcXG5cXG4nO1xuICAgICAgdGhpcy5yZWZlcmVuY2VzID0gW107IC8vIFJlc2V0IHJlZmVyZW5jZXNcbiAgICB9XG4gICAgcmV0dXJuIHJlZmVyZW5jZXNcbiAgfVxufTtcblxucnVsZXMuZW1waGFzaXMgPSB7XG4gIGZpbHRlcjogWydlbScsICdpJ10sXG5cbiAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChjb250ZW50LCBub2RlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFjb250ZW50LnRyaW0oKSkgcmV0dXJuICcnXG4gICAgcmV0dXJuIG9wdGlvbnMuZW1EZWxpbWl0ZXIgKyBjb250ZW50ICsgb3B0aW9ucy5lbURlbGltaXRlclxuICB9XG59O1xuXG5ydWxlcy5zdHJvbmcgPSB7XG4gIGZpbHRlcjogWydzdHJvbmcnLCAnYiddLFxuXG4gIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAoY29udGVudCwgbm9kZSwgb3B0aW9ucykge1xuICAgIGlmICghY29udGVudC50cmltKCkpIHJldHVybiAnJ1xuICAgIHJldHVybiBvcHRpb25zLnN0cm9uZ0RlbGltaXRlciArIGNvbnRlbnQgKyBvcHRpb25zLnN0cm9uZ0RlbGltaXRlclxuICB9XG59O1xuXG5ydWxlcy5jb2RlID0ge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIGhhc1NpYmxpbmdzID0gbm9kZS5wcmV2aW91c1NpYmxpbmcgfHwgbm9kZS5uZXh0U2libGluZztcbiAgICB2YXIgaXNDb2RlQmxvY2sgPSBub2RlLnBhcmVudE5vZGUubm9kZU5hbWUgPT09ICdQUkUnICYmICFoYXNTaWJsaW5ncztcblxuICAgIHJldHVybiBub2RlLm5vZGVOYW1lID09PSAnQ09ERScgJiYgIWlzQ29kZUJsb2NrXG4gIH0sXG5cbiAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgaWYgKCFjb250ZW50KSByZXR1cm4gJydcbiAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnICcpO1xuXG4gICAgdmFyIGV4dHJhU3BhY2UgPSAvXmB8XiAuKj9bXiBdLiogJHxgJC8udGVzdChjb250ZW50KSA/ICcgJyA6ICcnO1xuICAgIHZhciBkZWxpbWl0ZXIgPSAnYCc7XG4gICAgdmFyIG1hdGNoZXMgPSBjb250ZW50Lm1hdGNoKC9gKy9nbSkgfHwgW107XG4gICAgd2hpbGUgKG1hdGNoZXMuaW5kZXhPZihkZWxpbWl0ZXIpICE9PSAtMSkgZGVsaW1pdGVyID0gZGVsaW1pdGVyICsgJ2AnO1xuXG4gICAgcmV0dXJuIGRlbGltaXRlciArIGV4dHJhU3BhY2UgKyBjb250ZW50ICsgZXh0cmFTcGFjZSArIGRlbGltaXRlclxuICB9XG59O1xuXG5ydWxlcy5pbWFnZSA9IHtcbiAgZmlsdGVyOiAnaW1nJyxcblxuICByZXBsYWNlbWVudDogZnVuY3Rpb24gKGNvbnRlbnQsIG5vZGUpIHtcbiAgICB2YXIgYWx0ID0gY2xlYW5BdHRyaWJ1dGUobm9kZS5nZXRBdHRyaWJ1dGUoJ2FsdCcpKTtcbiAgICB2YXIgc3JjID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3NyYycpIHx8ICcnO1xuICAgIHZhciB0aXRsZSA9IGNsZWFuQXR0cmlidXRlKG5vZGUuZ2V0QXR0cmlidXRlKCd0aXRsZScpKTtcbiAgICB2YXIgdGl0bGVQYXJ0ID0gdGl0bGUgPyAnIFwiJyArIHRpdGxlICsgJ1wiJyA6ICcnO1xuICAgIHJldHVybiBzcmMgPyAnIVsnICsgYWx0ICsgJ10nICsgJygnICsgc3JjICsgdGl0bGVQYXJ0ICsgJyknIDogJydcbiAgfVxufTtcblxuZnVuY3Rpb24gY2xlYW5BdHRyaWJ1dGUgKGF0dHJpYnV0ZSkge1xuICByZXR1cm4gYXR0cmlidXRlID8gYXR0cmlidXRlLnJlcGxhY2UoLyhcXG4rXFxzKikrL2csICdcXG4nKSA6ICcnXG59XG5cbi8qKlxuICogTWFuYWdlcyBhIGNvbGxlY3Rpb24gb2YgcnVsZXMgdXNlZCB0byBjb252ZXJ0IEhUTUwgdG8gTWFya2Rvd25cbiAqL1xuXG5mdW5jdGlvbiBSdWxlcyAob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLl9rZWVwID0gW107XG4gIHRoaXMuX3JlbW92ZSA9IFtdO1xuXG4gIHRoaXMuYmxhbmtSdWxlID0ge1xuICAgIHJlcGxhY2VtZW50OiBvcHRpb25zLmJsYW5rUmVwbGFjZW1lbnRcbiAgfTtcblxuICB0aGlzLmtlZXBSZXBsYWNlbWVudCA9IG9wdGlvbnMua2VlcFJlcGxhY2VtZW50O1xuXG4gIHRoaXMuZGVmYXVsdFJ1bGUgPSB7XG4gICAgcmVwbGFjZW1lbnQ6IG9wdGlvbnMuZGVmYXVsdFJlcGxhY2VtZW50XG4gIH07XG5cbiAgdGhpcy5hcnJheSA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5ydWxlcykgdGhpcy5hcnJheS5wdXNoKG9wdGlvbnMucnVsZXNba2V5XSk7XG59XG5cblJ1bGVzLnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbiAoa2V5LCBydWxlKSB7XG4gICAgdGhpcy5hcnJheS51bnNoaWZ0KHJ1bGUpO1xuICB9LFxuXG4gIGtlZXA6IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICB0aGlzLl9rZWVwLnVuc2hpZnQoe1xuICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICByZXBsYWNlbWVudDogdGhpcy5rZWVwUmVwbGFjZW1lbnRcbiAgICB9KTtcbiAgfSxcblxuICByZW1vdmU6IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICB0aGlzLl9yZW1vdmUudW5zaGlmdCh7XG4gICAgICBmaWx0ZXI6IGZpbHRlcixcbiAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJ1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIGZvck5vZGU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKG5vZGUuaXNCbGFuaykgcmV0dXJuIHRoaXMuYmxhbmtSdWxlXG4gICAgdmFyIHJ1bGU7XG5cbiAgICBpZiAoKHJ1bGUgPSBmaW5kUnVsZSh0aGlzLmFycmF5LCBub2RlLCB0aGlzLm9wdGlvbnMpKSkgcmV0dXJuIHJ1bGVcbiAgICBpZiAoKHJ1bGUgPSBmaW5kUnVsZSh0aGlzLl9rZWVwLCBub2RlLCB0aGlzLm9wdGlvbnMpKSkgcmV0dXJuIHJ1bGVcbiAgICBpZiAoKHJ1bGUgPSBmaW5kUnVsZSh0aGlzLl9yZW1vdmUsIG5vZGUsIHRoaXMub3B0aW9ucykpKSByZXR1cm4gcnVsZVxuXG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdFJ1bGVcbiAgfSxcblxuICBmb3JFYWNoOiBmdW5jdGlvbiAoZm4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYXJyYXkubGVuZ3RoOyBpKyspIGZuKHRoaXMuYXJyYXlbaV0sIGkpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmaW5kUnVsZSAocnVsZXMsIG5vZGUsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBydWxlID0gcnVsZXNbaV07XG4gICAgaWYgKGZpbHRlclZhbHVlKHJ1bGUsIG5vZGUsIG9wdGlvbnMpKSByZXR1cm4gcnVsZVxuICB9XG4gIHJldHVybiB2b2lkIDBcbn1cblxuZnVuY3Rpb24gZmlsdGVyVmFsdWUgKHJ1bGUsIG5vZGUsIG9wdGlvbnMpIHtcbiAgdmFyIGZpbHRlciA9IHJ1bGUuZmlsdGVyO1xuICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZmlsdGVyID09PSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHJldHVybiB0cnVlXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShmaWx0ZXIpKSB7XG4gICAgaWYgKGZpbHRlci5pbmRleE9mKG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgPiAtMSkgcmV0dXJuIHRydWVcbiAgfSBlbHNlIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZpbHRlci5jYWxsKHJ1bGUsIG5vZGUsIG9wdGlvbnMpKSByZXR1cm4gdHJ1ZVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BmaWx0ZXJgIG5lZWRzIHRvIGJlIGEgc3RyaW5nLCBhcnJheSwgb3IgZnVuY3Rpb24nKVxuICB9XG59XG5cbi8qKlxuICogVGhlIGNvbGxhcHNlV2hpdGVzcGFjZSBmdW5jdGlvbiBpcyBhZGFwdGVkIGZyb20gY29sbGFwc2Utd2hpdGVzcGFjZVxuICogYnkgTHVjIFRoZXZlbmFyZC5cbiAqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgTHVjIFRoZXZlbmFyZCA8bHVjdGhldmVuYXJkQGdtYWlsLmNvbT5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qKlxuICogY29sbGFwc2VXaGl0ZXNwYWNlKG9wdGlvbnMpIHJlbW92ZXMgZXh0cmFuZW91cyB3aGl0ZXNwYWNlIGZyb20gYW4gdGhlIGdpdmVuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gY29sbGFwc2VXaGl0ZXNwYWNlIChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuICB2YXIgaXNCbG9jayA9IG9wdGlvbnMuaXNCbG9jaztcbiAgdmFyIGlzVm9pZCA9IG9wdGlvbnMuaXNWb2lkO1xuICB2YXIgaXNQcmUgPSBvcHRpb25zLmlzUHJlIHx8IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubm9kZU5hbWUgPT09ICdQUkUnXG4gIH07XG5cbiAgaWYgKCFlbGVtZW50LmZpcnN0Q2hpbGQgfHwgaXNQcmUoZWxlbWVudCkpIHJldHVyblxuXG4gIHZhciBwcmV2VGV4dCA9IG51bGw7XG4gIHZhciBrZWVwTGVhZGluZ1dzID0gZmFsc2U7XG5cbiAgdmFyIHByZXYgPSBudWxsO1xuICB2YXIgbm9kZSA9IG5leHQocHJldiwgZWxlbWVudCwgaXNQcmUpO1xuXG4gIHdoaWxlIChub2RlICE9PSBlbGVtZW50KSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMgfHwgbm9kZS5ub2RlVHlwZSA9PT0gNCkgeyAvLyBOb2RlLlRFWFRfTk9ERSBvciBOb2RlLkNEQVRBX1NFQ1RJT05fTk9ERVxuICAgICAgdmFyIHRleHQgPSBub2RlLmRhdGEucmVwbGFjZSgvWyBcXHJcXG5cXHRdKy9nLCAnICcpO1xuXG4gICAgICBpZiAoKCFwcmV2VGV4dCB8fCAvICQvLnRlc3QocHJldlRleHQuZGF0YSkpICYmXG4gICAgICAgICAgIWtlZXBMZWFkaW5nV3MgJiYgdGV4dFswXSA9PT0gJyAnKSB7XG4gICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cigxKTtcbiAgICAgIH1cblxuICAgICAgLy8gYHRleHRgIG1pZ2h0IGJlIGVtcHR5IGF0IHRoaXMgcG9pbnQuXG4gICAgICBpZiAoIXRleHQpIHtcbiAgICAgICAgbm9kZSA9IHJlbW92ZShub2RlKTtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgbm9kZS5kYXRhID0gdGV4dDtcblxuICAgICAgcHJldlRleHQgPSBub2RlO1xuICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkgeyAvLyBOb2RlLkVMRU1FTlRfTk9ERVxuICAgICAgaWYgKGlzQmxvY2sobm9kZSkgfHwgbm9kZS5ub2RlTmFtZSA9PT0gJ0JSJykge1xuICAgICAgICBpZiAocHJldlRleHQpIHtcbiAgICAgICAgICBwcmV2VGV4dC5kYXRhID0gcHJldlRleHQuZGF0YS5yZXBsYWNlKC8gJC8sICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZUZXh0ID0gbnVsbDtcbiAgICAgICAga2VlcExlYWRpbmdXcyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChpc1ZvaWQobm9kZSkgfHwgaXNQcmUobm9kZSkpIHtcbiAgICAgICAgLy8gQXZvaWQgdHJpbW1pbmcgc3BhY2UgYXJvdW5kIG5vbi1ibG9jaywgbm9uLUJSIHZvaWQgZWxlbWVudHMgYW5kIGlubGluZSBQUkUuXG4gICAgICAgIHByZXZUZXh0ID0gbnVsbDtcbiAgICAgICAga2VlcExlYWRpbmdXcyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHByZXZUZXh0KSB7XG4gICAgICAgIC8vIERyb3AgcHJvdGVjdGlvbiBpZiBzZXQgcHJldmlvdXNseS5cbiAgICAgICAga2VlcExlYWRpbmdXcyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlID0gcmVtb3ZlKG5vZGUpO1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dE5vZGUgPSBuZXh0KHByZXYsIG5vZGUsIGlzUHJlKTtcbiAgICBwcmV2ID0gbm9kZTtcbiAgICBub2RlID0gbmV4dE5vZGU7XG4gIH1cblxuICBpZiAocHJldlRleHQpIHtcbiAgICBwcmV2VGV4dC5kYXRhID0gcHJldlRleHQuZGF0YS5yZXBsYWNlKC8gJC8sICcnKTtcbiAgICBpZiAoIXByZXZUZXh0LmRhdGEpIHtcbiAgICAgIHJlbW92ZShwcmV2VGV4dCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogcmVtb3ZlKG5vZGUpIHJlbW92ZXMgdGhlIGdpdmVuIG5vZGUgZnJvbSB0aGUgRE9NIGFuZCByZXR1cm5zIHRoZVxuICogbmV4dCBub2RlIGluIHRoZSBzZXF1ZW5jZS5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEByZXR1cm4ge05vZGV9IG5vZGVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChub2RlKSB7XG4gIHZhciBuZXh0ID0gbm9kZS5uZXh0U2libGluZyB8fCBub2RlLnBhcmVudE5vZGU7XG5cbiAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuXG4gIHJldHVybiBuZXh0XG59XG5cbi8qKlxuICogbmV4dChwcmV2LCBjdXJyZW50LCBpc1ByZSkgcmV0dXJucyB0aGUgbmV4dCBub2RlIGluIHRoZSBzZXF1ZW5jZSwgZ2l2ZW4gdGhlXG4gKiBjdXJyZW50IGFuZCBwcmV2aW91cyBub2Rlcy5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IHByZXZcbiAqIEBwYXJhbSB7Tm9kZX0gY3VycmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXNQcmVcbiAqIEByZXR1cm4ge05vZGV9XG4gKi9cbmZ1bmN0aW9uIG5leHQgKHByZXYsIGN1cnJlbnQsIGlzUHJlKSB7XG4gIGlmICgocHJldiAmJiBwcmV2LnBhcmVudE5vZGUgPT09IGN1cnJlbnQpIHx8IGlzUHJlKGN1cnJlbnQpKSB7XG4gICAgcmV0dXJuIGN1cnJlbnQubmV4dFNpYmxpbmcgfHwgY3VycmVudC5wYXJlbnROb2RlXG4gIH1cblxuICByZXR1cm4gY3VycmVudC5maXJzdENoaWxkIHx8IGN1cnJlbnQubmV4dFNpYmxpbmcgfHwgY3VycmVudC5wYXJlbnROb2RlXG59XG5cbi8qXG4gKiBTZXQgdXAgd2luZG93IGZvciBOb2RlLmpzXG4gKi9cblxudmFyIHJvb3QgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fSk7XG5cbi8qXG4gKiBQYXJzaW5nIEhUTUwgc3RyaW5nc1xuICovXG5cbmZ1bmN0aW9uIGNhblBhcnNlSFRNTE5hdGl2ZWx5ICgpIHtcbiAgdmFyIFBhcnNlciA9IHJvb3QuRE9NUGFyc2VyO1xuICB2YXIgY2FuUGFyc2UgPSBmYWxzZTtcblxuICAvLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTEyOTAzMVxuICAvLyBGaXJlZm94L09wZXJhL0lFIHRocm93IGVycm9ycyBvbiB1bnN1cHBvcnRlZCB0eXBlc1xuICB0cnkge1xuICAgIC8vIFdlYktpdCByZXR1cm5zIG51bGwgb24gdW5zdXBwb3J0ZWQgdHlwZXNcbiAgICBpZiAobmV3IFBhcnNlcigpLnBhcnNlRnJvbVN0cmluZygnJywgJ3RleHQvaHRtbCcpKSB7XG4gICAgICBjYW5QYXJzZSA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIHJldHVybiBjYW5QYXJzZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVIVE1MUGFyc2VyICgpIHtcbiAgdmFyIFBhcnNlciA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIHtcbiAgICBpZiAoc2hvdWxkVXNlQWN0aXZlWCgpKSB7XG4gICAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRnJvbVN0cmluZyA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgdmFyIGRvYyA9IG5ldyB3aW5kb3cuQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgICAgICAgZG9jLmRlc2lnbk1vZGUgPSAnb24nOyAvLyBkaXNhYmxlIG9uLXBhZ2Ugc2NyaXB0c1xuICAgICAgICBkb2Mub3BlbigpO1xuICAgICAgICBkb2Mud3JpdGUoc3RyaW5nKTtcbiAgICAgICAgZG9jLmNsb3NlKCk7XG4gICAgICAgIHJldHVybiBkb2NcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICB2YXIgZG9jID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCcnKTtcbiAgICAgICAgZG9jLm9wZW4oKTtcbiAgICAgICAgZG9jLndyaXRlKHN0cmluZyk7XG4gICAgICAgIGRvYy5jbG9zZSgpO1xuICAgICAgICByZXR1cm4gZG9jXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gUGFyc2VyXG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZUFjdGl2ZVggKCkge1xuICB2YXIgdXNlQWN0aXZlWCA9IGZhbHNlO1xuICB0cnkge1xuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgnJykub3BlbigpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHJvb3QuQWN0aXZlWE9iamVjdCkgdXNlQWN0aXZlWCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHVzZUFjdGl2ZVhcbn1cblxudmFyIEhUTUxQYXJzZXIgPSBjYW5QYXJzZUhUTUxOYXRpdmVseSgpID8gcm9vdC5ET01QYXJzZXIgOiBjcmVhdGVIVE1MUGFyc2VyKCk7XG5cbmZ1bmN0aW9uIFJvb3ROb2RlIChpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgcm9vdDtcbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgZG9jID0gaHRtbFBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhcbiAgICAgIC8vIERPTSBwYXJzZXJzIGFycmFuZ2UgZWxlbWVudHMgaW4gdGhlIDxoZWFkPiBhbmQgPGJvZHk+LlxuICAgICAgLy8gV3JhcHBpbmcgaW4gYSBjdXN0b20gZWxlbWVudCBlbnN1cmVzIGVsZW1lbnRzIGFyZSByZWxpYWJseSBhcnJhbmdlZCBpblxuICAgICAgLy8gYSBzaW5nbGUgZWxlbWVudC5cbiAgICAgICc8eC10dXJuZG93biBpZD1cInR1cm5kb3duLXJvb3RcIj4nICsgaW5wdXQgKyAnPC94LXR1cm5kb3duPicsXG4gICAgICAndGV4dC9odG1sJ1xuICAgICk7XG4gICAgcm9vdCA9IGRvYy5nZXRFbGVtZW50QnlJZCgndHVybmRvd24tcm9vdCcpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QgPSBpbnB1dC5jbG9uZU5vZGUodHJ1ZSk7XG4gIH1cbiAgY29sbGFwc2VXaGl0ZXNwYWNlKHtcbiAgICBlbGVtZW50OiByb290LFxuICAgIGlzQmxvY2s6IGlzQmxvY2ssXG4gICAgaXNWb2lkOiBpc1ZvaWQsXG4gICAgaXNQcmU6IG9wdGlvbnMucHJlZm9ybWF0dGVkQ29kZSA/IGlzUHJlT3JDb2RlIDogbnVsbFxuICB9KTtcblxuICByZXR1cm4gcm9vdFxufVxuXG52YXIgX2h0bWxQYXJzZXI7XG5mdW5jdGlvbiBodG1sUGFyc2VyICgpIHtcbiAgX2h0bWxQYXJzZXIgPSBfaHRtbFBhcnNlciB8fCBuZXcgSFRNTFBhcnNlcigpO1xuICByZXR1cm4gX2h0bWxQYXJzZXJcbn1cblxuZnVuY3Rpb24gaXNQcmVPckNvZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubm9kZU5hbWUgPT09ICdQUkUnIHx8IG5vZGUubm9kZU5hbWUgPT09ICdDT0RFJ1xufVxuXG5mdW5jdGlvbiBOb2RlIChub2RlLCBvcHRpb25zKSB7XG4gIG5vZGUuaXNCbG9jayA9IGlzQmxvY2sobm9kZSk7XG4gIG5vZGUuaXNDb2RlID0gbm9kZS5ub2RlTmFtZSA9PT0gJ0NPREUnIHx8IG5vZGUucGFyZW50Tm9kZS5pc0NvZGU7XG4gIG5vZGUuaXNCbGFuayA9IGlzQmxhbmsobm9kZSk7XG4gIG5vZGUuZmxhbmtpbmdXaGl0ZXNwYWNlID0gZmxhbmtpbmdXaGl0ZXNwYWNlKG5vZGUsIG9wdGlvbnMpO1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiBpc0JsYW5rIChub2RlKSB7XG4gIHJldHVybiAoXG4gICAgIWlzVm9pZChub2RlKSAmJlxuICAgICFpc01lYW5pbmdmdWxXaGVuQmxhbmsobm9kZSkgJiZcbiAgICAvXlxccyokL2kudGVzdChub2RlLnRleHRDb250ZW50KSAmJlxuICAgICFoYXNWb2lkKG5vZGUpICYmXG4gICAgIWhhc01lYW5pbmdmdWxXaGVuQmxhbmsobm9kZSlcbiAgKVxufVxuXG5mdW5jdGlvbiBmbGFua2luZ1doaXRlc3BhY2UgKG5vZGUsIG9wdGlvbnMpIHtcbiAgaWYgKG5vZGUuaXNCbG9jayB8fCAob3B0aW9ucy5wcmVmb3JtYXR0ZWRDb2RlICYmIG5vZGUuaXNDb2RlKSkge1xuICAgIHJldHVybiB7IGxlYWRpbmc6ICcnLCB0cmFpbGluZzogJycgfVxuICB9XG5cbiAgdmFyIGVkZ2VzID0gZWRnZVdoaXRlc3BhY2Uobm9kZS50ZXh0Q29udGVudCk7XG5cbiAgLy8gYWJhbmRvbiBsZWFkaW5nIEFTQ0lJIFdTIGlmIGxlZnQtZmxhbmtlZCBieSBBU0NJSSBXU1xuICBpZiAoZWRnZXMubGVhZGluZ0FzY2lpICYmIGlzRmxhbmtlZEJ5V2hpdGVzcGFjZSgnbGVmdCcsIG5vZGUsIG9wdGlvbnMpKSB7XG4gICAgZWRnZXMubGVhZGluZyA9IGVkZ2VzLmxlYWRpbmdOb25Bc2NpaTtcbiAgfVxuXG4gIC8vIGFiYW5kb24gdHJhaWxpbmcgQVNDSUkgV1MgaWYgcmlnaHQtZmxhbmtlZCBieSBBU0NJSSBXU1xuICBpZiAoZWRnZXMudHJhaWxpbmdBc2NpaSAmJiBpc0ZsYW5rZWRCeVdoaXRlc3BhY2UoJ3JpZ2h0Jywgbm9kZSwgb3B0aW9ucykpIHtcbiAgICBlZGdlcy50cmFpbGluZyA9IGVkZ2VzLnRyYWlsaW5nTm9uQXNjaWk7XG4gIH1cblxuICByZXR1cm4geyBsZWFkaW5nOiBlZGdlcy5sZWFkaW5nLCB0cmFpbGluZzogZWRnZXMudHJhaWxpbmcgfVxufVxuXG5mdW5jdGlvbiBlZGdlV2hpdGVzcGFjZSAoc3RyaW5nKSB7XG4gIHZhciBtID0gc3RyaW5nLm1hdGNoKC9eKChbIFxcdFxcclxcbl0qKShcXHMqKSkoPzooPz1cXFMpW1xcc1xcU10qXFxTKT8oKFxccyo/KShbIFxcdFxcclxcbl0qKSkkLyk7XG4gIHJldHVybiB7XG4gICAgbGVhZGluZzogbVsxXSwgLy8gd2hvbGUgc3RyaW5nIGZvciB3aGl0ZXNwYWNlLW9ubHkgc3RyaW5nc1xuICAgIGxlYWRpbmdBc2NpaTogbVsyXSxcbiAgICBsZWFkaW5nTm9uQXNjaWk6IG1bM10sXG4gICAgdHJhaWxpbmc6IG1bNF0sIC8vIGVtcHR5IGZvciB3aGl0ZXNwYWNlLW9ubHkgc3RyaW5nc1xuICAgIHRyYWlsaW5nTm9uQXNjaWk6IG1bNV0sXG4gICAgdHJhaWxpbmdBc2NpaTogbVs2XVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRmxhbmtlZEJ5V2hpdGVzcGFjZSAoc2lkZSwgbm9kZSwgb3B0aW9ucykge1xuICB2YXIgc2libGluZztcbiAgdmFyIHJlZ0V4cDtcbiAgdmFyIGlzRmxhbmtlZDtcblxuICBpZiAoc2lkZSA9PT0gJ2xlZnQnKSB7XG4gICAgc2libGluZyA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgIHJlZ0V4cCA9IC8gJC87XG4gIH0gZWxzZSB7XG4gICAgc2libGluZyA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgcmVnRXhwID0gL14gLztcbiAgfVxuXG4gIGlmIChzaWJsaW5nKSB7XG4gICAgaWYgKHNpYmxpbmcubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIGlzRmxhbmtlZCA9IHJlZ0V4cC50ZXN0KHNpYmxpbmcubm9kZVZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucHJlZm9ybWF0dGVkQ29kZSAmJiBzaWJsaW5nLm5vZGVOYW1lID09PSAnQ09ERScpIHtcbiAgICAgIGlzRmxhbmtlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoc2libGluZy5ub2RlVHlwZSA9PT0gMSAmJiAhaXNCbG9jayhzaWJsaW5nKSkge1xuICAgICAgaXNGbGFua2VkID0gcmVnRXhwLnRlc3Qoc2libGluZy50ZXh0Q29udGVudCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpc0ZsYW5rZWRcbn1cblxudmFyIHJlZHVjZSA9IEFycmF5LnByb3RvdHlwZS5yZWR1Y2U7XG52YXIgZXNjYXBlcyA9IFtcbiAgWy9cXFxcL2csICdcXFxcXFxcXCddLFxuICBbL1xcKi9nLCAnXFxcXConXSxcbiAgWy9eLS9nLCAnXFxcXC0nXSxcbiAgWy9eXFwrIC9nLCAnXFxcXCsgJ10sXG4gIFsvXig9KykvZywgJ1xcXFwkMSddLFxuICBbL14oI3sxLDZ9KSAvZywgJ1xcXFwkMSAnXSxcbiAgWy9gL2csICdcXFxcYCddLFxuICBbL15+fn4vZywgJ1xcXFx+fn4nXSxcbiAgWy9cXFsvZywgJ1xcXFxbJ10sXG4gIFsvXFxdL2csICdcXFxcXSddLFxuICBbL14+L2csICdcXFxcPiddLFxuICBbL18vZywgJ1xcXFxfJ10sXG4gIFsvXihcXGQrKVxcLiAvZywgJyQxXFxcXC4gJ11cbl07XG5cbmZ1bmN0aW9uIFR1cm5kb3duU2VydmljZSAob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHVybmRvd25TZXJ2aWNlKSkgcmV0dXJuIG5ldyBUdXJuZG93blNlcnZpY2Uob3B0aW9ucylcblxuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgcnVsZXM6IHJ1bGVzLFxuICAgIGhlYWRpbmdTdHlsZTogJ3NldGV4dCcsXG4gICAgaHI6ICcqICogKicsXG4gICAgYnVsbGV0TGlzdE1hcmtlcjogJyonLFxuICAgIGNvZGVCbG9ja1N0eWxlOiAnaW5kZW50ZWQnLFxuICAgIGZlbmNlOiAnYGBgJyxcbiAgICBlbURlbGltaXRlcjogJ18nLFxuICAgIHN0cm9uZ0RlbGltaXRlcjogJyoqJyxcbiAgICBsaW5rU3R5bGU6ICdpbmxpbmVkJyxcbiAgICBsaW5rUmVmZXJlbmNlU3R5bGU6ICdmdWxsJyxcbiAgICBicjogJyAgJyxcbiAgICBwcmVmb3JtYXR0ZWRDb2RlOiBmYWxzZSxcbiAgICBibGFua1JlcGxhY2VtZW50OiBmdW5jdGlvbiAoY29udGVudCwgbm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUuaXNCbG9jayA/ICdcXG5cXG4nIDogJydcbiAgICB9LFxuICAgIGtlZXBSZXBsYWNlbWVudDogZnVuY3Rpb24gKGNvbnRlbnQsIG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmlzQmxvY2sgPyAnXFxuXFxuJyArIG5vZGUub3V0ZXJIVE1MICsgJ1xcblxcbicgOiBub2RlLm91dGVySFRNTFxuICAgIH0sXG4gICAgZGVmYXVsdFJlcGxhY2VtZW50OiBmdW5jdGlvbiAoY29udGVudCwgbm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUuaXNCbG9jayA/ICdcXG5cXG4nICsgY29udGVudCArICdcXG5cXG4nIDogY29udGVudFxuICAgIH1cbiAgfTtcbiAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gIHRoaXMucnVsZXMgPSBuZXcgUnVsZXModGhpcy5vcHRpb25zKTtcbn1cblxuVHVybmRvd25TZXJ2aWNlLnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gICAqIFRoZSBlbnRyeSBwb2ludCBmb3IgY29udmVydGluZyBhIHN0cmluZyBvciBET00gbm9kZSB0byBNYXJrZG93blxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfEhUTUxFbGVtZW50fSBpbnB1dCBUaGUgc3RyaW5nIG9yIERPTSBub2RlIHRvIGNvbnZlcnRcbiAgICogQHJldHVybnMgQSBNYXJrZG93biByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW5wdXRcbiAgICogQHR5cGUgU3RyaW5nXG4gICAqL1xuXG4gIHR1cm5kb3duOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIWNhbkNvbnZlcnQoaW5wdXQpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBpbnB1dCArICcgaXMgbm90IGEgc3RyaW5nLCBvciBhbiBlbGVtZW50L2RvY3VtZW50L2ZyYWdtZW50IG5vZGUuJ1xuICAgICAgKVxuICAgIH1cblxuICAgIGlmIChpbnB1dCA9PT0gJycpIHJldHVybiAnJ1xuXG4gICAgdmFyIG91dHB1dCA9IHByb2Nlc3MuY2FsbCh0aGlzLCBuZXcgUm9vdE5vZGUoaW5wdXQsIHRoaXMub3B0aW9ucykpO1xuICAgIHJldHVybiBwb3N0UHJvY2Vzcy5jYWxsKHRoaXMsIG91dHB1dClcbiAgfSxcblxuICAvKipcbiAgICogQWRkIG9uZSBvciBtb3JlIHBsdWdpbnNcbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fSBwbHVnaW4gVGhlIHBsdWdpbiBvciBhcnJheSBvZiBwbHVnaW5zIHRvIGFkZFxuICAgKiBAcmV0dXJucyBUaGUgVHVybmRvd24gaW5zdGFuY2UgZm9yIGNoYWluaW5nXG4gICAqIEB0eXBlIE9iamVjdFxuICAgKi9cblxuICB1c2U6IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwbHVnaW4pKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbi5sZW5ndGg7IGkrKykgdGhpcy51c2UocGx1Z2luW2ldKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbih0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGx1Z2luIG11c3QgYmUgYSBGdW5jdGlvbiBvciBhbiBBcnJheSBvZiBGdW5jdGlvbnMnKVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIGEgcnVsZVxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIHVuaXF1ZSBrZXkgb2YgdGhlIHJ1bGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHJ1bGUgVGhlIHJ1bGVcbiAgICogQHJldHVybnMgVGhlIFR1cm5kb3duIGluc3RhbmNlIGZvciBjaGFpbmluZ1xuICAgKiBAdHlwZSBPYmplY3RcbiAgICovXG5cbiAgYWRkUnVsZTogZnVuY3Rpb24gKGtleSwgcnVsZSkge1xuICAgIHRoaXMucnVsZXMuYWRkKGtleSwgcnVsZSk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfSxcblxuICAvKipcbiAgICogS2VlcCBhIG5vZGUgKGFzIEhUTUwpIHRoYXQgbWF0Y2hlcyB0aGUgZmlsdGVyXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl8RnVuY3Rpb259IGZpbHRlciBUaGUgdW5pcXVlIGtleSBvZiB0aGUgcnVsZVxuICAgKiBAcmV0dXJucyBUaGUgVHVybmRvd24gaW5zdGFuY2UgZm9yIGNoYWluaW5nXG4gICAqIEB0eXBlIE9iamVjdFxuICAgKi9cblxuICBrZWVwOiBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgdGhpcy5ydWxlcy5rZWVwKGZpbHRlcik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlIGEgbm9kZSB0aGF0IG1hdGNoZXMgdGhlIGZpbHRlclxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fEZ1bmN0aW9ufSBmaWx0ZXIgVGhlIHVuaXF1ZSBrZXkgb2YgdGhlIHJ1bGVcbiAgICogQHJldHVybnMgVGhlIFR1cm5kb3duIGluc3RhbmNlIGZvciBjaGFpbmluZ1xuICAgKiBAdHlwZSBPYmplY3RcbiAgICovXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgdGhpcy5ydWxlcy5yZW1vdmUoZmlsdGVyKTtcbiAgICByZXR1cm4gdGhpc1xuICB9LFxuXG4gIC8qKlxuICAgKiBFc2NhcGVzIE1hcmtkb3duIHN5bnRheFxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBlc2NhcGVcbiAgICogQHJldHVybnMgQSBzdHJpbmcgd2l0aCBNYXJrZG93biBzeW50YXggZXNjYXBlZFxuICAgKiBAdHlwZSBTdHJpbmdcbiAgICovXG5cbiAgZXNjYXBlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGVzY2FwZXMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgZXNjYXBlKSB7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3IucmVwbGFjZShlc2NhcGVbMF0sIGVzY2FwZVsxXSlcbiAgICB9LCBzdHJpbmcpXG4gIH1cbn07XG5cbi8qKlxuICogUmVkdWNlcyBhIERPTSBub2RlIGRvd24gdG8gaXRzIE1hcmtkb3duIHN0cmluZyBlcXVpdmFsZW50XG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50Tm9kZSBUaGUgbm9kZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyBBIE1hcmtkb3duIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBub2RlXG4gKiBAdHlwZSBTdHJpbmdcbiAqL1xuXG5mdW5jdGlvbiBwcm9jZXNzIChwYXJlbnROb2RlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmV0dXJuIHJlZHVjZS5jYWxsKHBhcmVudE5vZGUuY2hpbGROb2RlcywgZnVuY3Rpb24gKG91dHB1dCwgbm9kZSkge1xuICAgIG5vZGUgPSBuZXcgTm9kZShub2RlLCBzZWxmLm9wdGlvbnMpO1xuXG4gICAgdmFyIHJlcGxhY2VtZW50ID0gJyc7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIHJlcGxhY2VtZW50ID0gbm9kZS5pc0NvZGUgPyBub2RlLm5vZGVWYWx1ZSA6IHNlbGYuZXNjYXBlKG5vZGUubm9kZVZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgIHJlcGxhY2VtZW50ID0gcmVwbGFjZW1lbnRGb3JOb2RlLmNhbGwoc2VsZiwgbm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpvaW4ob3V0cHV0LCByZXBsYWNlbWVudClcbiAgfSwgJycpXG59XG5cbi8qKlxuICogQXBwZW5kcyBzdHJpbmdzIGFzIGVhY2ggcnVsZSByZXF1aXJlcyBhbmQgdHJpbXMgdGhlIG91dHB1dFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBvdXRwdXQgVGhlIGNvbnZlcnNpb24gb3V0cHV0XG4gKiBAcmV0dXJucyBBIHRyaW1tZWQgdmVyc2lvbiBvZiB0aGUgb3VwdXRcbiAqIEB0eXBlIFN0cmluZ1xuICovXG5cbmZ1bmN0aW9uIHBvc3RQcm9jZXNzIChvdXRwdXQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnJ1bGVzLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICBpZiAodHlwZW9mIHJ1bGUuYXBwZW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvdXRwdXQgPSBqb2luKG91dHB1dCwgcnVsZS5hcHBlbmQoc2VsZi5vcHRpb25zKSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gb3V0cHV0LnJlcGxhY2UoL15bXFx0XFxyXFxuXSsvLCAnJykucmVwbGFjZSgvW1xcdFxcclxcblxcc10rJC8sICcnKVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIGVsZW1lbnQgbm9kZSB0byBpdHMgTWFya2Rvd24gZXF1aXZhbGVudFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGUgVGhlIG5vZGUgdG8gY29udmVydFxuICogQHJldHVybnMgQSBNYXJrZG93biByZXByZXNlbnRhdGlvbiBvZiB0aGUgbm9kZVxuICogQHR5cGUgU3RyaW5nXG4gKi9cblxuZnVuY3Rpb24gcmVwbGFjZW1lbnRGb3JOb2RlIChub2RlKSB7XG4gIHZhciBydWxlID0gdGhpcy5ydWxlcy5mb3JOb2RlKG5vZGUpO1xuICB2YXIgY29udGVudCA9IHByb2Nlc3MuY2FsbCh0aGlzLCBub2RlKTtcbiAgdmFyIHdoaXRlc3BhY2UgPSBub2RlLmZsYW5raW5nV2hpdGVzcGFjZTtcbiAgaWYgKHdoaXRlc3BhY2UubGVhZGluZyB8fCB3aGl0ZXNwYWNlLnRyYWlsaW5nKSBjb250ZW50ID0gY29udGVudC50cmltKCk7XG4gIHJldHVybiAoXG4gICAgd2hpdGVzcGFjZS5sZWFkaW5nICtcbiAgICBydWxlLnJlcGxhY2VtZW50KGNvbnRlbnQsIG5vZGUsIHRoaXMub3B0aW9ucykgK1xuICAgIHdoaXRlc3BhY2UudHJhaWxpbmdcbiAgKVxufVxuXG4vKipcbiAqIEpvaW5zIHJlcGxhY2VtZW50IHRvIHRoZSBjdXJyZW50IG91dHB1dCB3aXRoIGFwcHJvcHJpYXRlIG51bWJlciBvZiBuZXcgbGluZXNcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gb3V0cHV0IFRoZSBjdXJyZW50IGNvbnZlcnNpb24gb3V0cHV0XG4gKiBAcGFyYW0ge1N0cmluZ30gcmVwbGFjZW1lbnQgVGhlIHN0cmluZyB0byBhcHBlbmQgdG8gdGhlIG91dHB1dFxuICogQHJldHVybnMgSm9pbmVkIG91dHB1dFxuICogQHR5cGUgU3RyaW5nXG4gKi9cblxuZnVuY3Rpb24gam9pbiAob3V0cHV0LCByZXBsYWNlbWVudCkge1xuICB2YXIgczEgPSB0cmltVHJhaWxpbmdOZXdsaW5lcyhvdXRwdXQpO1xuICB2YXIgczIgPSB0cmltTGVhZGluZ05ld2xpbmVzKHJlcGxhY2VtZW50KTtcbiAgdmFyIG5scyA9IE1hdGgubWF4KG91dHB1dC5sZW5ndGggLSBzMS5sZW5ndGgsIHJlcGxhY2VtZW50Lmxlbmd0aCAtIHMyLmxlbmd0aCk7XG4gIHZhciBzZXBhcmF0b3IgPSAnXFxuXFxuJy5zdWJzdHJpbmcoMCwgbmxzKTtcblxuICByZXR1cm4gczEgKyBzZXBhcmF0b3IgKyBzMlxufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBpbnB1dCBjYW4gYmUgY29udmVydGVkXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGlucHV0IERlc2NyaWJlIHRoaXMgcGFyYW1ldGVyXG4gKiBAcmV0dXJucyBEZXNjcmliZSB3aGF0IGl0IHJldHVybnNcbiAqIEB0eXBlIFN0cmluZ3xPYmplY3R8QXJyYXl8Qm9vbGVhbnxOdW1iZXJcbiAqL1xuXG5mdW5jdGlvbiBjYW5Db252ZXJ0IChpbnB1dCkge1xuICByZXR1cm4gKFxuICAgIGlucHV0ICE9IG51bGwgJiYgKFxuICAgICAgdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fFxuICAgICAgKGlucHV0Lm5vZGVUeXBlICYmIChcbiAgICAgICAgaW5wdXQubm9kZVR5cGUgPT09IDEgfHwgaW5wdXQubm9kZVR5cGUgPT09IDkgfHwgaW5wdXQubm9kZVR5cGUgPT09IDExXG4gICAgICApKVxuICAgIClcbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBUdXJuZG93blNlcnZpY2U7XG4iLCAiZXhwb3J0IGNvbnN0IGF0dGFjaG1lbnRTZWxlY3RvciA9IFwiW2RhdGEtdHJpeC1hdHRhY2htZW50XVwiXG5cbmNvbnN0IGF0dGFjaG1lbnRzID0ge1xuICBwcmV2aWV3OiB7XG4gICAgcHJlc2VudGF0aW9uOiBcImdhbGxlcnlcIixcbiAgICBjYXB0aW9uOiB7XG4gICAgICBuYW1lOiB0cnVlLFxuICAgICAgc2l6ZTogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICBmaWxlOiB7XG4gICAgY2FwdGlvbjoge1xuICAgICAgc2l6ZTogdHJ1ZSxcbiAgICB9LFxuICB9LFxufVxuZXhwb3J0IGRlZmF1bHQgYXR0YWNobWVudHNcbiIsICJjb25zdCBhdHRyaWJ1dGVzID0ge1xuICBkZWZhdWx0OiB7XG4gICAgdGFnTmFtZTogXCJkaXZcIixcbiAgICBwYXJzZTogZmFsc2UsXG4gIH0sXG4gIHF1b3RlOiB7XG4gICAgdGFnTmFtZTogXCJibG9ja3F1b3RlXCIsXG4gICAgbmVzdGFibGU6IHRydWUsXG4gIH0sXG4gIGhlYWRpbmcxOiB7XG4gICAgdGFnTmFtZTogXCJoMVwiLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIGJyZWFrT25SZXR1cm46IHRydWUsXG4gICAgZ3JvdXA6IGZhbHNlLFxuICB9LFxuICBjb2RlOiB7XG4gICAgdGFnTmFtZTogXCJwcmVcIixcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICBodG1sQXR0cmlidXRlczogWyBcImxhbmd1YWdlXCIgXSxcbiAgICB0ZXh0OiB7XG4gICAgICBwbGFpbnRleHQ6IHRydWUsXG4gICAgfSxcbiAgfSxcbiAgYnVsbGV0TGlzdDoge1xuICAgIHRhZ05hbWU6IFwidWxcIixcbiAgICBwYXJzZTogZmFsc2UsXG4gIH0sXG4gIGJ1bGxldDoge1xuICAgIHRhZ05hbWU6IFwibGlcIixcbiAgICBsaXN0QXR0cmlidXRlOiBcImJ1bGxldExpc3RcIixcbiAgICBncm91cDogZmFsc2UsXG4gICAgbmVzdGFibGU6IHRydWUsXG4gICAgdGVzdChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gdGFnTmFtZShlbGVtZW50LnBhcmVudE5vZGUpID09PSBhdHRyaWJ1dGVzW3RoaXMubGlzdEF0dHJpYnV0ZV0udGFnTmFtZVxuICAgIH0sXG4gIH0sXG4gIG51bWJlckxpc3Q6IHtcbiAgICB0YWdOYW1lOiBcIm9sXCIsXG4gICAgcGFyc2U6IGZhbHNlLFxuICB9LFxuICBudW1iZXI6IHtcbiAgICB0YWdOYW1lOiBcImxpXCIsXG4gICAgbGlzdEF0dHJpYnV0ZTogXCJudW1iZXJMaXN0XCIsXG4gICAgZ3JvdXA6IGZhbHNlLFxuICAgIG5lc3RhYmxlOiB0cnVlLFxuICAgIHRlc3QoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRhZ05hbWUoZWxlbWVudC5wYXJlbnROb2RlKSA9PT0gYXR0cmlidXRlc1t0aGlzLmxpc3RBdHRyaWJ1dGVdLnRhZ05hbWVcbiAgICB9LFxuICB9LFxuICBhdHRhY2htZW50R2FsbGVyeToge1xuICAgIHRhZ05hbWU6IFwiZGl2XCIsXG4gICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHBhcnNlOiBmYWxzZSxcbiAgICBncm91cDogZmFsc2UsXG4gIH0sXG59XG5cbmNvbnN0IHRhZ05hbWUgPSAoZWxlbWVudCkgPT4gZWxlbWVudD8udGFnTmFtZT8udG9Mb3dlckNhc2UoKVxuXG5leHBvcnQgZGVmYXVsdCBhdHRyaWJ1dGVzXG4iLCAiY29uc3QgYW5kcm9pZFZlcnNpb25NYXRjaCA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2FuZHJvaWRcXHMoWzAtOV0rLipDaHJvbWUpL2kpXG5jb25zdCBhbmRyb2lkVmVyc2lvbiA9IGFuZHJvaWRWZXJzaW9uTWF0Y2ggJiYgcGFyc2VJbnQoYW5kcm9pZFZlcnNpb25NYXRjaFsxXSlcblxuZXhwb3J0IGRlZmF1bHQge1xuICAvLyBBbmRyb2lkIGVtaXRzIGNvbXBvc2l0aW9uIGV2ZW50cyB3aGVuIG1vdmluZyB0aGUgY3Vyc29yIHRocm91Z2ggZXhpc3RpbmcgdGV4dFxuICAvLyBJbnRyb2R1Y2VkIGluIENocm9tZSA2NTogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NzY0NDM5I2M5XG4gIGNvbXBvc2VzRXhpc3RpbmdUZXh0OiAvQW5kcm9pZC4qQ2hyb21lLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLFxuXG4gIC8vIEFuZHJvaWQgMTMsIGVzcGVjaWFsbHkgb24gU2Ftc3VuZyBrZXlib2FyZHMsIGVtaXRzIGV4dHJhIGNvbXBvc2l0aW9uZW5kIGFuZCBiZWZvcmVpbnB1dCBldmVudHNcbiAgLy8gdGhhdCBjYW4gbWFrZSB0aGUgaW5wdXQgaGFuZGxlciBsb3NlIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBvciBlbnRlciBhbiBpbmZpbml0ZSBpbnB1dCAtPiByZW5kZXIgLT4gaW5wdXRcbiAgLy8gbG9vcC5cbiAgcmVjZW50QW5kcm9pZDogYW5kcm9pZFZlcnNpb24gJiYgYW5kcm9pZFZlcnNpb24gPiAxMixcbiAgc2Ftc3VuZ0FuZHJvaWQ6IGFuZHJvaWRWZXJzaW9uICYmIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQuKlNNLS8pLFxuXG4gIC8vIElFIDExIGFjdGl2YXRlcyByZXNpemluZyBoYW5kbGVzIG9uIGVkaXRhYmxlIGVsZW1lbnRzIHRoYXQgaGF2ZSBcImxheW91dFwiXG4gIGZvcmNlc09iamVjdFJlc2l6aW5nOiAvVHJpZGVudC4qcnY6MTEvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9pbnB1dC1ldmVudHMtMS8gKyBodHRwczovL3d3dy53My5vcmcvVFIvaW5wdXQtZXZlbnRzLTIvXG4gIHN1cHBvcnRzSW5wdXRFdmVudHM6IHR5cGVvZiBJbnB1dEV2ZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgWyBcImRhdGFcIiwgXCJnZXRUYXJnZXRSYW5nZXNcIiwgXCJpbnB1dFR5cGVcIiBdLmV2ZXJ5KHByb3AgPT4gcHJvcCBpbiBJbnB1dEV2ZW50LnByb3RvdHlwZSksXG59XG4iLCAiZXhwb3J0IGRlZmF1bHQge1xuICBBRERfQVRUUjogWyBcImxhbmd1YWdlXCIgXSxcbiAgU0FGRV9GT1JfWE1MOiBmYWxzZSxcbiAgUkVUVVJOX0RPTTogdHJ1ZVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgYXR0YWNoRmlsZXM6IFwiQXR0YWNoIEZpbGVzXCIsXG4gIGJvbGQ6IFwiQm9sZFwiLFxuICBidWxsZXRzOiBcIkJ1bGxldHNcIixcbiAgYnl0ZTogXCJCeXRlXCIsXG4gIGJ5dGVzOiBcIkJ5dGVzXCIsXG4gIGNhcHRpb25QbGFjZWhvbGRlcjogXCJBZGQgYSBjYXB0aW9u4oCmXCIsXG4gIGNvZGU6IFwiQ29kZVwiLFxuICBoZWFkaW5nMTogXCJIZWFkaW5nXCIsXG4gIGluZGVudDogXCJJbmNyZWFzZSBMZXZlbFwiLFxuICBpdGFsaWM6IFwiSXRhbGljXCIsXG4gIGxpbms6IFwiTGlua1wiLFxuICBudW1iZXJzOiBcIk51bWJlcnNcIixcbiAgb3V0ZGVudDogXCJEZWNyZWFzZSBMZXZlbFwiLFxuICBxdW90ZTogXCJRdW90ZVwiLFxuICByZWRvOiBcIlJlZG9cIixcbiAgcmVtb3ZlOiBcIlJlbW92ZVwiLFxuICBzdHJpa2U6IFwiU3RyaWtldGhyb3VnaFwiLFxuICB1bmRvOiBcIlVuZG9cIixcbiAgdW5saW5rOiBcIlVubGlua1wiLFxuICB1cmw6IFwiVVJMXCIsXG4gIHVybFBsYWNlaG9sZGVyOiBcIkVudGVyIGEgVVJM4oCmXCIsXG4gIEdCOiBcIkdCXCIsXG4gIEtCOiBcIktCXCIsXG4gIE1COiBcIk1CXCIsXG4gIFBCOiBcIlBCXCIsXG4gIFRCOiBcIlRCXCIsXG59XG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiAgICBuby1jYXNlLWRlY2xhcmF0aW9ucyxcbiovXG5pbXBvcnQgbGFuZyBmcm9tIFwidHJpeC9jb25maWcvbGFuZ1wiXG5cbmNvbnN0IHNpemVzID0gWyBsYW5nLmJ5dGVzLCBsYW5nLktCLCBsYW5nLk1CLCBsYW5nLkdCLCBsYW5nLlRCLCBsYW5nLlBCIF1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBwcmVmaXg6IFwiSUVDXCIsXG4gIHByZWNpc2lvbjogMixcblxuICBmb3JtYXR0ZXIobnVtYmVyKSB7XG4gICAgc3dpdGNoIChudW1iZXIpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIGAwICR7bGFuZy5ieXRlc31gXG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBgMSAke2xhbmcuYnl0ZX1gXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsZXQgYmFzZVxuXG4gICAgICAgIGlmICh0aGlzLnByZWZpeCA9PT0gXCJTSVwiKSB7XG4gICAgICAgICAgYmFzZSA9IDEwMDBcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZWZpeCA9PT0gXCJJRUNcIikge1xuICAgICAgICAgIGJhc2UgPSAxMDI0XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBleHAgPSBNYXRoLmZsb29yKE1hdGgubG9nKG51bWJlcikgLyBNYXRoLmxvZyhiYXNlKSlcbiAgICAgICAgY29uc3QgaHVtYW5TaXplID0gbnVtYmVyIC8gTWF0aC5wb3coYmFzZSwgZXhwKVxuICAgICAgICBjb25zdCBzdHJpbmcgPSBodW1hblNpemUudG9GaXhlZCh0aGlzLnByZWNpc2lvbilcbiAgICAgICAgY29uc3Qgd2l0aG91dEluc2lnbmlmaWNhbnRaZXJvcyA9IHN0cmluZy5yZXBsYWNlKC8wKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC4kLywgXCJcIilcbiAgICAgICAgcmV0dXJuIGAke3dpdGhvdXRJbnNpZ25pZmljYW50WmVyb3N9ICR7c2l6ZXNbZXhwXX1gXG4gICAgfVxuICB9LFxufVxuIiwgImV4cG9ydCBjb25zdCBaRVJPX1dJRFRIX1NQQUNFID0gXCJcXHVGRUZGXCJcbmV4cG9ydCBjb25zdCBOT05fQlJFQUtJTkdfU1BBQ0UgPSBcIlxcdTAwQTBcIlxuZXhwb3J0IGNvbnN0IE9CSkVDVF9SRVBMQUNFTUVOVF9DSEFSQUNURVIgPSBcIlxcdUZGRkNcIlxuIiwgImV4cG9ydCBjb25zdCBleHRlbmQgPSBmdW5jdGlvbihwcm9wZXJ0aWVzKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIHByb3BlcnRpZXMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHByb3BlcnRpZXNba2V5XVxuICAgIHRoaXNba2V5XSA9IHZhbHVlXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cbiIsICJpbXBvcnQgYmxvY2tBdHRyaWJ1dGVzIGZyb20gXCJ0cml4L2NvbmZpZy9ibG9ja19hdHRyaWJ1dGVzXCJcbmltcG9ydCB7IFpFUk9fV0lEVEhfU1BBQ0UgfSBmcm9tIFwidHJpeC9jb25zdGFudHNcIlxuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSBcIi4vZXh0ZW5kXCJcbmltcG9ydCB7IGF0dGFjaG1lbnRTZWxlY3RvciB9IGZyb20gXCJ0cml4L2NvbmZpZy9hdHRhY2htZW50c1wiXG5cbmNvbnN0IGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcbmNvbnN0IG1hdGNoID0gaHRtbC5tYXRjaGVzXG5cbmV4cG9ydCBjb25zdCBoYW5kbGVFdmVudCA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgeyBvbkVsZW1lbnQsIG1hdGNoaW5nU2VsZWN0b3IsIHdpdGhDYWxsYmFjaywgaW5QaGFzZSwgcHJldmVudERlZmF1bHQsIHRpbWVzIH0gPSB7fSkge1xuICBjb25zdCBlbGVtZW50ID0gb25FbGVtZW50ID8gb25FbGVtZW50IDogaHRtbFxuICBjb25zdCBzZWxlY3RvciA9IG1hdGNoaW5nU2VsZWN0b3JcbiAgY29uc3QgdXNlQ2FwdHVyZSA9IGluUGhhc2UgPT09IFwiY2FwdHVyaW5nXCJcblxuICBjb25zdCBoYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAodGltZXMgIT0gbnVsbCAmJiAtLXRpbWVzID09PSAwKSB7XG4gICAgICBoYW5kbGVyLmRlc3Ryb3koKVxuICAgIH1cbiAgICBjb25zdCB0YXJnZXQgPSBmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZShldmVudC50YXJnZXQsIHsgbWF0Y2hpbmdTZWxlY3Rvcjogc2VsZWN0b3IgfSlcbiAgICBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgIHdpdGhDYWxsYmFjaz8uY2FsbCh0YXJnZXQsIGV2ZW50LCB0YXJnZXQpXG4gICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIuZGVzdHJveSA9ICgpID0+IGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIHVzZUNhcHR1cmUpXG5cbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgdXNlQ2FwdHVyZSlcbiAgcmV0dXJuIGhhbmRsZXJcbn1cblxuZXhwb3J0IGNvbnN0IGhhbmRsZUV2ZW50T25jZSA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gIG9wdGlvbnMudGltZXMgPSAxXG4gIHJldHVybiBoYW5kbGVFdmVudChldmVudE5hbWUsIG9wdGlvbnMpXG59XG5cbmV4cG9ydCBjb25zdCB0cmlnZ2VyRXZlbnQgPSBmdW5jdGlvbihldmVudE5hbWUsIHsgb25FbGVtZW50LCBidWJibGVzLCBjYW5jZWxhYmxlLCBhdHRyaWJ1dGVzIH0gPSB7fSkge1xuICBjb25zdCBlbGVtZW50ID0gb25FbGVtZW50ICE9IG51bGwgPyBvbkVsZW1lbnQgOiBodG1sXG4gIGJ1YmJsZXMgPSBidWJibGVzICE9PSBmYWxzZVxuICBjYW5jZWxhYmxlID0gY2FuY2VsYWJsZSAhPT0gZmFsc2VcblxuICBjb25zdCBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRzXCIpXG4gIGV2ZW50LmluaXRFdmVudChldmVudE5hbWUsIGJ1YmJsZXMsIGNhbmNlbGFibGUpXG4gIGlmIChhdHRyaWJ1dGVzICE9IG51bGwpIHtcbiAgICBleHRlbmQuY2FsbChldmVudCwgYXR0cmlidXRlcylcbiAgfVxuICByZXR1cm4gZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KVxufVxuXG5leHBvcnQgY29uc3QgZWxlbWVudE1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIGlmIChlbGVtZW50Py5ub2RlVHlwZSA9PT0gMSkge1xuICAgIHJldHVybiBtYXRjaC5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIHsgbWF0Y2hpbmdTZWxlY3RvciwgdW50aWxOb2RlIH0gPSB7fSkge1xuICB3aGlsZSAobm9kZSAmJiBub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGVcbiAgfVxuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAobWF0Y2hpbmdTZWxlY3RvciAhPSBudWxsKSB7XG4gICAgaWYgKG5vZGUuY2xvc2VzdCAmJiB1bnRpbE5vZGUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vZGUuY2xvc2VzdChtYXRjaGluZ1NlbGVjdG9yKVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAobm9kZSAmJiBub2RlICE9PSB1bnRpbE5vZGUpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRNYXRjaGVzU2VsZWN0b3Iobm9kZSwgbWF0Y2hpbmdTZWxlY3RvcikpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZVxuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZmluZElubmVyRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgd2hpbGUgKGVsZW1lbnQ/LmZpcnN0RWxlbWVudENoaWxkKSB7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGRcbiAgfVxuICByZXR1cm4gZWxlbWVudFxufVxuXG5leHBvcnQgY29uc3QgaW5uZXJFbGVtZW50SXNBY3RpdmUgPSAoZWxlbWVudCkgPT5cbiAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxlbWVudCAmJiBlbGVtZW50Q29udGFpbnNOb2RlKGVsZW1lbnQsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpXG5cbmV4cG9ydCBjb25zdCBlbGVtZW50Q29udGFpbnNOb2RlID0gZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkge1xuICBpZiAoIWVsZW1lbnQgfHwgIW5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlID09PSBlbGVtZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGZpbmROb2RlRnJvbUNvbnRhaW5lckFuZE9mZnNldCA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgb2Zmc2V0KSB7XG4gIGlmICghY29udGFpbmVyKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICByZXR1cm4gY29udGFpbmVyXG4gIH0gZWxzZSBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5maXJzdENoaWxkICE9IG51bGwgPyBjb250YWluZXIuZmlyc3RDaGlsZCA6IGNvbnRhaW5lclxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250YWluZXIuY2hpbGROb2Rlcy5pdGVtKG9mZnNldCAtIDEpXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGZpbmRFbGVtZW50RnJvbUNvbnRhaW5lckFuZE9mZnNldCA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgb2Zmc2V0KSB7XG4gIGNvbnN0IG5vZGUgPSBmaW5kTm9kZUZyb21Db250YWluZXJBbmRPZmZzZXQoY29udGFpbmVyLCBvZmZzZXQpXG4gIHJldHVybiBmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZShub2RlKVxufVxuXG5leHBvcnQgY29uc3QgZmluZENoaWxkSW5kZXhPZk5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmICghbm9kZT8ucGFyZW50Tm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIGxldCBjaGlsZEluZGV4ID0gMFxuICBub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmdcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBjaGlsZEluZGV4KytcbiAgICBub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmdcbiAgfVxuICByZXR1cm4gY2hpbGRJbmRleFxufVxuXG5leHBvcnQgY29uc3QgcmVtb3ZlTm9kZSA9IChub2RlKSA9PiBub2RlPy5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChub2RlKVxuXG5leHBvcnQgY29uc3Qgd2Fsa1RyZWUgPSBmdW5jdGlvbih0cmVlLCB7IG9ubHlOb2Rlc09mVHlwZSwgdXNpbmdGaWx0ZXIsIGV4cGFuZEVudGl0eVJlZmVyZW5jZXMgfSA9IHt9KSB7XG4gIGNvbnN0IHdoYXRUb1Nob3cgPSAoKCkgPT4ge1xuICAgIHN3aXRjaCAob25seU5vZGVzT2ZUeXBlKSB7XG4gICAgICBjYXNlIFwiZWxlbWVudFwiOlxuICAgICAgICByZXR1cm4gTm9kZUZpbHRlci5TSE9XX0VMRU1FTlRcbiAgICAgIGNhc2UgXCJ0ZXh0XCI6XG4gICAgICAgIHJldHVybiBOb2RlRmlsdGVyLlNIT1dfVEVYVFxuICAgICAgY2FzZSBcImNvbW1lbnRcIjpcbiAgICAgICAgcmV0dXJuIE5vZGVGaWx0ZXIuU0hPV19DT01NRU5UXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gTm9kZUZpbHRlci5TSE9XX0FMTFxuICAgIH1cbiAgfSkoKVxuXG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKFxuICAgIHRyZWUsXG4gICAgd2hhdFRvU2hvdyxcbiAgICB1c2luZ0ZpbHRlciAhPSBudWxsID8gdXNpbmdGaWx0ZXIgOiBudWxsLFxuICAgIGV4cGFuZEVudGl0eVJlZmVyZW5jZXMgPT09IHRydWVcbiAgKVxufVxuXG5leHBvcnQgY29uc3QgdGFnTmFtZSA9IChlbGVtZW50KSA9PiBlbGVtZW50Py50YWdOYW1lPy50b0xvd2VyQ2FzZSgpXG5cbmV4cG9ydCBjb25zdCBtYWtlRWxlbWVudCA9IGZ1bmN0aW9uKHRhZywgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBrZXksIHZhbHVlXG4gIGlmICh0eXBlb2YgdGFnID09PSBcIm9iamVjdFwiKSB7XG4gICAgb3B0aW9ucyA9IHRhZ1xuICAgIHRhZyA9IG9wdGlvbnMudGFnTmFtZVxuICB9IGVsc2Uge1xuICAgIG9wdGlvbnMgPSB7IGF0dHJpYnV0ZXM6IG9wdGlvbnMgfVxuICB9XG5cbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKVxuXG4gIGlmIChvcHRpb25zLmVkaXRhYmxlICE9IG51bGwpIHtcbiAgICBpZiAob3B0aW9ucy5hdHRyaWJ1dGVzID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMuYXR0cmlidXRlcyA9IHt9XG4gICAgfVxuICAgIG9wdGlvbnMuYXR0cmlidXRlcy5jb250ZW50ZWRpdGFibGUgPSBvcHRpb25zLmVkaXRhYmxlXG4gIH1cblxuICBpZiAob3B0aW9ucy5hdHRyaWJ1dGVzKSB7XG4gICAgZm9yIChrZXkgaW4gb3B0aW9ucy5hdHRyaWJ1dGVzKSB7XG4gICAgICB2YWx1ZSA9IG9wdGlvbnMuYXR0cmlidXRlc1trZXldXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRpb25zLnN0eWxlKSB7XG4gICAgZm9yIChrZXkgaW4gb3B0aW9ucy5zdHlsZSkge1xuICAgICAgdmFsdWUgPSBvcHRpb25zLnN0eWxlW2tleV1cbiAgICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHZhbHVlXG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgIGZvciAoa2V5IGluIG9wdGlvbnMuZGF0YSkge1xuICAgICAgdmFsdWUgPSBvcHRpb25zLmRhdGFba2V5XVxuICAgICAgZWxlbWVudC5kYXRhc2V0W2tleV0gPSB2YWx1ZVxuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRpb25zLmNsYXNzTmFtZSkge1xuICAgIG9wdGlvbnMuY2xhc3NOYW1lLnNwbGl0KFwiIFwiKS5mb3JFYWNoKChjbGFzc05hbWUpID0+IHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpXG4gICAgfSlcbiAgfVxuXG4gIGlmIChvcHRpb25zLnRleHRDb250ZW50KSB7XG4gICAgZWxlbWVudC50ZXh0Q29udGVudCA9IG9wdGlvbnMudGV4dENvbnRlbnRcbiAgfVxuXG4gIGlmIChvcHRpb25zLmNoaWxkTm9kZXMpIHtcbiAgICBbXS5jb25jYXQob3B0aW9ucy5jaGlsZE5vZGVzKS5mb3JFYWNoKChjaGlsZE5vZGUpID0+IHtcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gZWxlbWVudFxufVxuXG5sZXQgYmxvY2tUYWdOYW1lcyA9IHVuZGVmaW5lZFxuXG5leHBvcnQgY29uc3QgZ2V0QmxvY2tUYWdOYW1lcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoYmxvY2tUYWdOYW1lcyAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGJsb2NrVGFnTmFtZXNcbiAgfVxuXG4gIGJsb2NrVGFnTmFtZXMgPSBbXVxuICBmb3IgKGNvbnN0IGtleSBpbiBibG9ja0F0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gYmxvY2tBdHRyaWJ1dGVzW2tleV1cbiAgICBpZiAoYXR0cmlidXRlcy50YWdOYW1lKSB7XG4gICAgICBibG9ja1RhZ05hbWVzLnB1c2goYXR0cmlidXRlcy50YWdOYW1lKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBibG9ja1RhZ05hbWVzXG59XG5cbmV4cG9ydCBjb25zdCBub2RlSXNCbG9ja0NvbnRhaW5lciA9IChub2RlKSA9PiBub2RlSXNCbG9ja1N0YXJ0Q29tbWVudChub2RlPy5maXJzdENoaWxkKVxuXG5leHBvcnQgY29uc3Qgbm9kZVByb2JhYmx5SXNCbG9ja0NvbnRhaW5lciA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIGdldEJsb2NrVGFnTmFtZXMoKS5pbmNsdWRlcyh0YWdOYW1lKG5vZGUpKSAmJiAhZ2V0QmxvY2tUYWdOYW1lcygpLmluY2x1ZGVzKHRhZ05hbWUobm9kZS5maXJzdENoaWxkKSlcbn1cblxuZXhwb3J0IGNvbnN0IG5vZGVJc0Jsb2NrU3RhcnQgPSBmdW5jdGlvbihub2RlLCB7IHN0cmljdCB9ID0geyBzdHJpY3Q6IHRydWUgfSkge1xuICBpZiAoc3RyaWN0KSB7XG4gICAgcmV0dXJuIG5vZGVJc0Jsb2NrU3RhcnRDb21tZW50KG5vZGUpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG5vZGVJc0Jsb2NrU3RhcnRDb21tZW50KG5vZGUpIHx8ICFub2RlSXNCbG9ja1N0YXJ0Q29tbWVudChub2RlLmZpcnN0Q2hpbGQpICYmIG5vZGVQcm9iYWJseUlzQmxvY2tDb250YWluZXIobm9kZSlcbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IG5vZGVJc0Jsb2NrU3RhcnRDb21tZW50ID0gKG5vZGUpID0+IG5vZGVJc0NvbW1lbnROb2RlKG5vZGUpICYmIG5vZGU/LmRhdGEgPT09IFwiYmxvY2tcIlxuXG5leHBvcnQgY29uc3Qgbm9kZUlzQ29tbWVudE5vZGUgPSAobm9kZSkgPT4gbm9kZT8ubm9kZVR5cGUgPT09IE5vZGUuQ09NTUVOVF9OT0RFXG5cbmV4cG9ydCBjb25zdCBub2RlSXNDdXJzb3JUYXJnZXQgPSBmdW5jdGlvbihub2RlLCB7IG5hbWUgfSA9IHt9KSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChub2RlSXNUZXh0Tm9kZShub2RlKSkge1xuICAgIGlmIChub2RlLmRhdGEgPT09IFpFUk9fV0lEVEhfU1BBQ0UpIHtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBub2RlLnBhcmVudE5vZGUuZGF0YXNldC50cml4Q3Vyc29yVGFyZ2V0ID09PSBuYW1lXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZUlzQ3Vyc29yVGFyZ2V0KG5vZGUuZmlyc3RDaGlsZClcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgbm9kZUlzQXR0YWNobWVudEVsZW1lbnQgPSAobm9kZSkgPT4gZWxlbWVudE1hdGNoZXNTZWxlY3Rvcihub2RlLCBhdHRhY2htZW50U2VsZWN0b3IpXG5cbmV4cG9ydCBjb25zdCBub2RlSXNFbXB0eVRleHROb2RlID0gKG5vZGUpID0+IG5vZGVJc1RleHROb2RlKG5vZGUpICYmIG5vZGU/LmRhdGEgPT09IFwiXCJcblxuZXhwb3J0IGNvbnN0IG5vZGVJc1RleHROb2RlID0gKG5vZGUpID0+IG5vZGU/Lm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERVxuIiwgImltcG9ydCBicm93c2VyIGZyb20gXCJ0cml4L2NvbmZpZy9icm93c2VyXCJcbmltcG9ydCB7IG1ha2VFbGVtZW50LCByZW1vdmVOb2RlIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzL2RvbVwiXG5cbmNvbnN0IGlucHV0ID0ge1xuICBsZXZlbDJFbmFibGVkOiB0cnVlLFxuXG4gIGdldExldmVsKCkge1xuICAgIGlmICh0aGlzLmxldmVsMkVuYWJsZWQgJiYgYnJvd3Nlci5zdXBwb3J0c0lucHV0RXZlbnRzKSB7XG4gICAgICByZXR1cm4gMlxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cbiAgfSxcbiAgcGlja0ZpbGVzKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgaW5wdXQgPSBtYWtlRWxlbWVudChcImlucHV0XCIsIHsgdHlwZTogXCJmaWxlXCIsIG11bHRpcGxlOiB0cnVlLCBoaWRkZW46IHRydWUsIGlkOiB0aGlzLmZpbGVJbnB1dElkIH0pXG5cbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsICgpID0+IHtcbiAgICAgIGNhbGxiYWNrKGlucHV0LmZpbGVzKVxuICAgICAgcmVtb3ZlTm9kZShpbnB1dClcbiAgICB9KVxuXG4gICAgcmVtb3ZlTm9kZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmZpbGVJbnB1dElkKSlcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlucHV0KVxuICAgIGlucHV0LmNsaWNrKClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbnB1dFxuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgODogXCJiYWNrc3BhY2VcIixcbiAgOTogXCJ0YWJcIixcbiAgMTM6IFwicmV0dXJuXCIsXG4gIDI3OiBcImVzY2FwZVwiLFxuICAzNzogXCJsZWZ0XCIsXG4gIDM5OiBcInJpZ2h0XCIsXG4gIDQ2OiBcImRlbGV0ZVwiLFxuICA2ODogXCJkXCIsXG4gIDcyOiBcImhcIixcbiAgNzk6IFwib1wiLFxufVxuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgcmVtb3ZlQmxhbmtUYWJsZUNlbGxzOiBmYWxzZSxcbiAgdGFibGVDZWxsU2VwYXJhdG9yOiBcIiB8IFwiLFxuICB0YWJsZVJvd1NlcGFyYXRvcjogXCJcXG5cIixcbn1cbiIsICJpbXBvcnQgeyBhdHRhY2htZW50U2VsZWN0b3IgfSBmcm9tIFwidHJpeC9jb25maWcvYXR0YWNobWVudHNcIlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGJvbGQ6IHtcbiAgICB0YWdOYW1lOiBcInN0cm9uZ1wiLFxuICAgIGluaGVyaXRhYmxlOiB0cnVlLFxuICAgIHBhcnNlcihlbGVtZW50KSB7XG4gICAgICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpXG4gICAgICByZXR1cm4gc3R5bGUuZm9udFdlaWdodCA9PT0gXCJib2xkXCIgfHwgc3R5bGUuZm9udFdlaWdodCA+PSA2MDBcbiAgICB9LFxuICB9LFxuICBpdGFsaWM6IHtcbiAgICB0YWdOYW1lOiBcImVtXCIsXG4gICAgaW5oZXJpdGFibGU6IHRydWUsXG4gICAgcGFyc2VyKGVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudClcbiAgICAgIHJldHVybiBzdHlsZS5mb250U3R5bGUgPT09IFwiaXRhbGljXCJcbiAgICB9LFxuICB9LFxuICBocmVmOiB7XG4gICAgZ3JvdXBUYWdOYW1lOiBcImFcIixcbiAgICBwYXJzZXIoZWxlbWVudCkge1xuICAgICAgY29uc3QgbWF0Y2hpbmdTZWxlY3RvciA9IGBhOm5vdCgke2F0dGFjaG1lbnRTZWxlY3Rvcn0pYFxuICAgICAgY29uc3QgbGluayA9IGVsZW1lbnQuY2xvc2VzdChtYXRjaGluZ1NlbGVjdG9yKVxuICAgICAgaWYgKGxpbmspIHtcbiAgICAgICAgcmV0dXJuIGxpbmsuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKVxuICAgICAgfVxuICAgIH0sXG4gIH0sXG4gIHN0cmlrZToge1xuICAgIHRhZ05hbWU6IFwiZGVsXCIsXG4gICAgaW5oZXJpdGFibGU6IHRydWUsXG4gIH0sXG4gIGZyb3plbjoge1xuICAgIHN0eWxlOiB7IGJhY2tncm91bmRDb2xvcjogXCJoaWdobGlnaHRcIiB9LFxuICB9LFxufVxuIiwgImltcG9ydCBsYW5nIGZyb20gXCJ0cml4L2NvbmZpZy9sYW5nXCJcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXREZWZhdWx0SFRNTCgpIHtcbiAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJ0cml4LWJ1dHRvbi1yb3dcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwidHJpeC1idXR0b24tZ3JvdXAgdHJpeC1idXR0b24tZ3JvdXAtLXRleHQtdG9vbHNcIiBkYXRhLXRyaXgtYnV0dG9uLWdyb3VwPVwidGV4dC10b29sc1wiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLWJvbGRcIiBkYXRhLXRyaXgtYXR0cmlidXRlPVwiYm9sZFwiIGRhdGEtdHJpeC1rZXk9XCJiXCIgdGl0bGU9XCIke2xhbmcuYm9sZH1cIiB0YWJpbmRleD1cIi0xXCI+JHtsYW5nLmJvbGR9PC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwidHJpeC1idXR0b24gdHJpeC1idXR0b24tLWljb24gdHJpeC1idXR0b24tLWljb24taXRhbGljXCIgZGF0YS10cml4LWF0dHJpYnV0ZT1cIml0YWxpY1wiIGRhdGEtdHJpeC1rZXk9XCJpXCIgdGl0bGU9XCIke2xhbmcuaXRhbGljfVwiIHRhYmluZGV4PVwiLTFcIj4ke2xhbmcuaXRhbGljfTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLXN0cmlrZVwiIGRhdGEtdHJpeC1hdHRyaWJ1dGU9XCJzdHJpa2VcIiB0aXRsZT1cIiR7bGFuZy5zdHJpa2V9XCIgdGFiaW5kZXg9XCItMVwiPiR7bGFuZy5zdHJpa2V9PC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwidHJpeC1idXR0b24gdHJpeC1idXR0b24tLWljb24gdHJpeC1idXR0b24tLWljb24tbGlua1wiIGRhdGEtdHJpeC1hdHRyaWJ1dGU9XCJocmVmXCIgZGF0YS10cml4LWFjdGlvbj1cImxpbmtcIiBkYXRhLXRyaXgta2V5PVwia1wiIHRpdGxlPVwiJHtsYW5nLmxpbmt9XCIgdGFiaW5kZXg9XCItMVwiPiR7bGFuZy5saW5rfTwvYnV0dG9uPlxuICAgICAgPC9zcGFuPlxuXG4gICAgICA8c3BhbiBjbGFzcz1cInRyaXgtYnV0dG9uLWdyb3VwIHRyaXgtYnV0dG9uLWdyb3VwLS1ibG9jay10b29sc1wiIGRhdGEtdHJpeC1idXR0b24tZ3JvdXA9XCJibG9jay10b29sc1wiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLWhlYWRpbmctMVwiIGRhdGEtdHJpeC1hdHRyaWJ1dGU9XCJoZWFkaW5nMVwiIHRpdGxlPVwiJHtsYW5nLmhlYWRpbmcxfVwiIHRhYmluZGV4PVwiLTFcIj4ke2xhbmcuaGVhZGluZzF9PC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwidHJpeC1idXR0b24gdHJpeC1idXR0b24tLWljb24gdHJpeC1idXR0b24tLWljb24tcXVvdGVcIiBkYXRhLXRyaXgtYXR0cmlidXRlPVwicXVvdGVcIiB0aXRsZT1cIiR7bGFuZy5xdW90ZX1cIiB0YWJpbmRleD1cIi0xXCI+JHtsYW5nLnF1b3RlfTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLWNvZGVcIiBkYXRhLXRyaXgtYXR0cmlidXRlPVwiY29kZVwiIHRpdGxlPVwiJHtsYW5nLmNvZGV9XCIgdGFiaW5kZXg9XCItMVwiPiR7bGFuZy5jb2RlfTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLWJ1bGxldC1saXN0XCIgZGF0YS10cml4LWF0dHJpYnV0ZT1cImJ1bGxldFwiIHRpdGxlPVwiJHtsYW5nLmJ1bGxldHN9XCIgdGFiaW5kZXg9XCItMVwiPiR7bGFuZy5idWxsZXRzfTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLW51bWJlci1saXN0XCIgZGF0YS10cml4LWF0dHJpYnV0ZT1cIm51bWJlclwiIHRpdGxlPVwiJHtsYW5nLm51bWJlcnN9XCIgdGFiaW5kZXg9XCItMVwiPiR7bGFuZy5udW1iZXJzfTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLWRlY3JlYXNlLW5lc3RpbmctbGV2ZWxcIiBkYXRhLXRyaXgtYWN0aW9uPVwiZGVjcmVhc2VOZXN0aW5nTGV2ZWxcIiB0aXRsZT1cIiR7bGFuZy5vdXRkZW50fVwiIHRhYmluZGV4PVwiLTFcIj4ke2xhbmcub3V0ZGVudH08L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ0cml4LWJ1dHRvbiB0cml4LWJ1dHRvbi0taWNvbiB0cml4LWJ1dHRvbi0taWNvbi1pbmNyZWFzZS1uZXN0aW5nLWxldmVsXCIgZGF0YS10cml4LWFjdGlvbj1cImluY3JlYXNlTmVzdGluZ0xldmVsXCIgdGl0bGU9XCIke2xhbmcuaW5kZW50fVwiIHRhYmluZGV4PVwiLTFcIj4ke2xhbmcuaW5kZW50fTwvYnV0dG9uPlxuICAgICAgPC9zcGFuPlxuXG4gICAgICA8c3BhbiBjbGFzcz1cInRyaXgtYnV0dG9uLWdyb3VwIHRyaXgtYnV0dG9uLWdyb3VwLS1maWxlLXRvb2xzXCIgZGF0YS10cml4LWJ1dHRvbi1ncm91cD1cImZpbGUtdG9vbHNcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ0cml4LWJ1dHRvbiB0cml4LWJ1dHRvbi0taWNvbiB0cml4LWJ1dHRvbi0taWNvbi1hdHRhY2hcIiBkYXRhLXRyaXgtYWN0aW9uPVwiYXR0YWNoRmlsZXNcIiB0aXRsZT1cIiR7bGFuZy5hdHRhY2hGaWxlc31cIiB0YWJpbmRleD1cIi0xXCI+JHtsYW5nLmF0dGFjaEZpbGVzfTwvYnV0dG9uPlxuICAgICAgPC9zcGFuPlxuXG4gICAgICA8c3BhbiBjbGFzcz1cInRyaXgtYnV0dG9uLWdyb3VwLXNwYWNlclwiPjwvc3Bhbj5cblxuICAgICAgPHNwYW4gY2xhc3M9XCJ0cml4LWJ1dHRvbi1ncm91cCB0cml4LWJ1dHRvbi1ncm91cC0taGlzdG9yeS10b29sc1wiIGRhdGEtdHJpeC1idXR0b24tZ3JvdXA9XCJoaXN0b3J5LXRvb2xzXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwidHJpeC1idXR0b24gdHJpeC1idXR0b24tLWljb24gdHJpeC1idXR0b24tLWljb24tdW5kb1wiIGRhdGEtdHJpeC1hY3Rpb249XCJ1bmRvXCIgZGF0YS10cml4LWtleT1cInpcIiB0aXRsZT1cIiR7bGFuZy51bmRvfVwiIHRhYmluZGV4PVwiLTFcIj4ke2xhbmcudW5kb308L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ0cml4LWJ1dHRvbiB0cml4LWJ1dHRvbi0taWNvbiB0cml4LWJ1dHRvbi0taWNvbi1yZWRvXCIgZGF0YS10cml4LWFjdGlvbj1cInJlZG9cIiBkYXRhLXRyaXgta2V5PVwic2hpZnQrelwiIHRpdGxlPVwiJHtsYW5nLnJlZG99XCIgdGFiaW5kZXg9XCItMVwiPiR7bGFuZy5yZWRvfTwvYnV0dG9uPlxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cInRyaXgtZGlhbG9nc1wiIGRhdGEtdHJpeC1kaWFsb2dzPlxuICAgICAgPGRpdiBjbGFzcz1cInRyaXgtZGlhbG9nIHRyaXgtZGlhbG9nLS1saW5rXCIgZGF0YS10cml4LWRpYWxvZz1cImhyZWZcIiBkYXRhLXRyaXgtZGlhbG9nLWF0dHJpYnV0ZT1cImhyZWZcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRyaXgtZGlhbG9nX19saW5rLWZpZWxkc1wiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidXJsXCIgbmFtZT1cImhyZWZcIiBjbGFzcz1cInRyaXgtaW5wdXQgdHJpeC1pbnB1dC0tZGlhbG9nXCIgcGxhY2Vob2xkZXI9XCIke2xhbmcudXJsUGxhY2Vob2xkZXJ9XCIgYXJpYS1sYWJlbD1cIiR7bGFuZy51cmx9XCIgZGF0YS10cml4LXZhbGlkYXRlLWhyZWYgcmVxdWlyZWQgZGF0YS10cml4LWlucHV0PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0cml4LWJ1dHRvbi1ncm91cFwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1kaWFsb2dcIiB2YWx1ZT1cIiR7bGFuZy5saW5rfVwiIGRhdGEtdHJpeC1tZXRob2Q9XCJzZXRBdHRyaWJ1dGVcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ0cml4LWJ1dHRvbiB0cml4LWJ1dHRvbi0tZGlhbG9nXCIgdmFsdWU9XCIke2xhbmcudW5saW5rfVwiIGRhdGEtdHJpeC1tZXRob2Q9XCJyZW1vdmVBdHRyaWJ1dGVcIj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gXG4gIH0sXG59XG4iLCAiY29uc3QgdW5kbyA9IHsgaW50ZXJ2YWw6IDUwMDAgfVxuZXhwb3J0IGRlZmF1bHQgdW5kb1xuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgYXR0YWNobWVudDogXCJhdHRhY2htZW50XCIsXG4gIGF0dGFjaG1lbnRDYXB0aW9uOiBcImF0dGFjaG1lbnRfX2NhcHRpb25cIixcbiAgYXR0YWNobWVudENhcHRpb25FZGl0b3I6IFwiYXR0YWNobWVudF9fY2FwdGlvbi1lZGl0b3JcIixcbiAgYXR0YWNobWVudE1ldGFkYXRhOiBcImF0dGFjaG1lbnRfX21ldGFkYXRhXCIsXG4gIGF0dGFjaG1lbnRNZXRhZGF0YUNvbnRhaW5lcjogXCJhdHRhY2htZW50X19tZXRhZGF0YS1jb250YWluZXJcIixcbiAgYXR0YWNobWVudE5hbWU6IFwiYXR0YWNobWVudF9fbmFtZVwiLFxuICBhdHRhY2htZW50UHJvZ3Jlc3M6IFwiYXR0YWNobWVudF9fcHJvZ3Jlc3NcIixcbiAgYXR0YWNobWVudFNpemU6IFwiYXR0YWNobWVudF9fc2l6ZVwiLFxuICBhdHRhY2htZW50VG9vbGJhcjogXCJhdHRhY2htZW50X190b29sYmFyXCIsXG4gIGF0dGFjaG1lbnRHYWxsZXJ5OiBcImF0dGFjaG1lbnQtZ2FsbGVyeVwiLFxufVxuIiwgImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2ljT2JqZWN0IHtcbiAgc3RhdGljIHByb3h5TWV0aG9kKGV4cHJlc3Npb24pIHtcbiAgICBjb25zdCB7IG5hbWUsIHRvTWV0aG9kLCB0b1Byb3BlcnR5LCBvcHRpb25hbCB9ID0gcGFyc2VQcm94eU1ldGhvZEV4cHJlc3Npb24oZXhwcmVzc2lvbilcblxuICAgIHRoaXMucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgc3ViamVjdFxuICAgICAgbGV0IG9iamVjdFxuXG4gICAgICBpZiAodG9NZXRob2QpIHtcbiAgICAgICAgaWYgKG9wdGlvbmFsKSB7XG4gICAgICAgICAgb2JqZWN0ID0gdGhpc1t0b01ldGhvZF0/LigpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqZWN0ID0gdGhpc1t0b01ldGhvZF0oKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRvUHJvcGVydHkpIHtcbiAgICAgICAgb2JqZWN0ID0gdGhpc1t0b1Byb3BlcnR5XVxuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9uYWwpIHtcbiAgICAgICAgc3ViamVjdCA9IG9iamVjdD8uW25hbWVdXG4gICAgICAgIGlmIChzdWJqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIGFwcGx5LmNhbGwoc3ViamVjdCwgb2JqZWN0LCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1YmplY3QgPSBvYmplY3RbbmFtZV1cbiAgICAgICAgcmV0dXJuIGFwcGx5LmNhbGwoc3ViamVjdCwgb2JqZWN0LCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHBhcnNlUHJveHlNZXRob2RFeHByZXNzaW9uID0gZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICBjb25zdCBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2gocHJveHlNZXRob2RFeHByZXNzaW9uUGF0dGVybilcbiAgaWYgKCFtYXRjaCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgY2FuJ3QgcGFyc2UgQHByb3h5TWV0aG9kIGV4cHJlc3Npb246ICR7ZXhwcmVzc2lvbn1gKVxuICB9XG5cbiAgY29uc3QgYXJncyA9IHsgbmFtZTogbWF0Y2hbNF0gfVxuXG4gIGlmIChtYXRjaFsyXSAhPSBudWxsKSB7XG4gICAgYXJncy50b01ldGhvZCA9IG1hdGNoWzFdXG4gIH0gZWxzZSB7XG4gICAgYXJncy50b1Byb3BlcnR5ID0gbWF0Y2hbMV1cbiAgfVxuXG4gIGlmIChtYXRjaFszXSAhPSBudWxsKSB7XG4gICAgYXJncy5vcHRpb25hbCA9IHRydWVcbiAgfVxuXG4gIHJldHVybiBhcmdzXG59XG5cbmNvbnN0IHsgYXBwbHkgfSA9IEZ1bmN0aW9uLnByb3RvdHlwZVxuXG5jb25zdCBwcm94eU1ldGhvZEV4cHJlc3Npb25QYXR0ZXJuID0gbmV3IFJlZ0V4cChcIlxcXG5eXFxcbiguKz8pXFxcbihcXFxcKFxcXFwpKT9cXFxuKFxcXFw/KT9cXFxuXFxcXC5cXFxuKC4rPylcXFxuJFxcXG5cIilcbiIsICJpbXBvcnQgQmFzaWNPYmplY3QgZnJvbSBcInRyaXgvY29yZS9iYXNpY19vYmplY3RcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVVEYxNlN0cmluZyBleHRlbmRzIEJhc2ljT2JqZWN0IHtcbiAgc3RhdGljIGJveCh2YWx1ZSA9IFwiXCIpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiB0aGlzKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZnJvbVVDUzJTdHJpbmcodmFsdWU/LnRvU3RyaW5nKCkpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGZyb21VQ1MyU3RyaW5nKHVjczJTdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IHRoaXModWNzMlN0cmluZywgdWNzMmRlY29kZSh1Y3MyU3RyaW5nKSlcbiAgfVxuXG4gIHN0YXRpYyBmcm9tQ29kZXBvaW50cyhjb2RlcG9pbnRzKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKHVjczJlbmNvZGUoY29kZXBvaW50cyksIGNvZGVwb2ludHMpXG4gIH1cblxuICBjb25zdHJ1Y3Rvcih1Y3MyU3RyaW5nLCBjb2RlcG9pbnRzKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMudWNzMlN0cmluZyA9IHVjczJTdHJpbmdcbiAgICB0aGlzLmNvZGVwb2ludHMgPSBjb2RlcG9pbnRzXG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLmNvZGVwb2ludHMubGVuZ3RoXG4gICAgdGhpcy51Y3MyTGVuZ3RoID0gdGhpcy51Y3MyU3RyaW5nLmxlbmd0aFxuICB9XG5cbiAgb2Zmc2V0VG9VQ1MyT2Zmc2V0KG9mZnNldCkge1xuICAgIHJldHVybiB1Y3MyZW5jb2RlKHRoaXMuY29kZXBvaW50cy5zbGljZSgwLCBNYXRoLm1heCgwLCBvZmZzZXQpKSkubGVuZ3RoXG4gIH1cblxuICBvZmZzZXRGcm9tVUNTMk9mZnNldCh1Y3MyT2Zmc2V0KSB7XG4gICAgcmV0dXJuIHVjczJkZWNvZGUodGhpcy51Y3MyU3RyaW5nLnNsaWNlKDAsIE1hdGgubWF4KDAsIHVjczJPZmZzZXQpKSkubGVuZ3RoXG4gIH1cblxuICBzbGljZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5mcm9tQ29kZXBvaW50cyh0aGlzLmNvZGVwb2ludHMuc2xpY2UoLi4uYXJndW1lbnRzKSlcbiAgfVxuXG4gIGNoYXJBdChvZmZzZXQpIHtcbiAgICByZXR1cm4gdGhpcy5zbGljZShvZmZzZXQsIG9mZnNldCArIDEpXG4gIH1cblxuICBpc0VxdWFsVG8odmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5ib3godmFsdWUpLnVjczJTdHJpbmcgPT09IHRoaXMudWNzMlN0cmluZ1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnVjczJTdHJpbmdcbiAgfVxuXG4gIGdldENhY2hlS2V5KCkge1xuICAgIHJldHVybiB0aGlzLnVjczJTdHJpbmdcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnVjczJTdHJpbmdcbiAgfVxufVxuXG5jb25zdCBoYXNBcnJheUZyb20gPSBBcnJheS5mcm9tPy4oXCJcXHVkODNkXFx1ZGM3Y1wiKS5sZW5ndGggPT09IDFcbmNvbnN0IGhhc1N0cmluZ0NvZGVQb2ludEF0ID0gXCIgXCIuY29kZVBvaW50QXQ/LigwKSAhPSBudWxsXG5jb25zdCBoYXNTdHJpbmdGcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ/LigzMiwgMTI4MTI0KSA9PT0gXCIgXFx1ZDgzZFxcdWRjN2NcIlxuXG4vLyBVQ1MtMiBjb252ZXJzaW9uIGhlbHBlcnMgcG9ydGVkIGZyb20gTWF0aGlhcyBCeW5lbnMnIFB1bnljb2RlLmpzOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL3B1bnljb2RlLmpzI3B1bnljb2RldWNzMlxuXG5sZXQgdWNzMmRlY29kZSwgdWNzMmVuY29kZVxuXG4vLyBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG4vLyBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG4vLyB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuLy8gVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG4vLyBtYXRjaGluZyBVVEYtMTYuXG5pZiAoaGFzQXJyYXlGcm9tICYmIGhhc1N0cmluZ0NvZGVQb2ludEF0KSB7XG4gIHVjczJkZWNvZGUgPSAoc3RyaW5nKSA9PiBBcnJheS5mcm9tKHN0cmluZykubWFwKChjaGFyKSA9PiBjaGFyLmNvZGVQb2ludEF0KDApKVxufSBlbHNlIHtcbiAgdWNzMmRlY29kZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIGNvbnN0IG91dHB1dCA9IFtdXG4gICAgbGV0IGNvdW50ZXIgPSAwXG4gICAgY29uc3QgeyBsZW5ndGggfSA9IHN0cmluZ1xuXG4gICAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgIGxldCB2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKylcbiAgICAgIGlmICgweGQ4MDAgPD0gdmFsdWUgJiYgdmFsdWUgPD0gMHhkYmZmICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgICAgLy8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG4gICAgICAgIGNvbnN0IGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKVxuICAgICAgICBpZiAoKGV4dHJhICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG4gICAgICAgICAgLy8gbG93IHN1cnJvZ2F0ZVxuICAgICAgICAgIHZhbHVlID0gKCh2YWx1ZSAmIDB4M2ZmKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNmZikgKyAweDEwMDAwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlXG4gICAgICAgICAgLy8gbmV4dCBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcbiAgICAgICAgICBjb3VudGVyLS1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0cHV0LnB1c2godmFsdWUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dFxuICB9XG59XG5cbi8vIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cbmlmIChoYXNTdHJpbmdGcm9tQ29kZVBvaW50KSB7XG4gIHVjczJlbmNvZGUgPSAoYXJyYXkpID0+IFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLkFycmF5LmZyb20oYXJyYXkgfHwgW10pKVxufSBlbHNlIHtcbiAgdWNzMmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgY29uc3QgY2hhcmFjdGVycyA9ICgoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBbXVxuXG4gICAgICBBcnJheS5mcm9tKGFycmF5KS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICBsZXQgb3V0cHV0ID0gXCJcIlxuICAgICAgICBpZiAodmFsdWUgPiAweGZmZmYpIHtcbiAgICAgICAgICB2YWx1ZSAtPSAweDEwMDAwXG4gICAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzZmYgfCAweGQ4MDApXG4gICAgICAgICAgdmFsdWUgPSAweGRjMDAgfCB2YWx1ZSAmIDB4M2ZmXG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnB1c2gob3V0cHV0ICsgU3RyaW5nLmZyb21DaGFyQ29kZSh2YWx1ZSkpXG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSkoKVxuXG4gICAgcmV0dXJuIGNoYXJhY3RlcnMuam9pbihcIlwiKVxuICB9XG59XG4iLCAiaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcbmltcG9ydCBVVEYxNlN0cmluZyBmcm9tIFwidHJpeC9jb3JlL3V0aWxpdGllcy91dGYxNl9zdHJpbmdcIlxuXG5sZXQgaWQgPSAwXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyaXhPYmplY3QgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIHN0YXRpYyBmcm9tSlNPTlN0cmluZyhqc29uU3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZnJvbUpTT04oSlNPTi5wYXJzZShqc29uU3RyaW5nKSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLmlkID0gKytpZFxuICB9XG5cbiAgaGFzU2FtZUNvbnN0cnVjdG9yQXMob2JqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IgPT09IG9iamVjdD8uY29uc3RydWN0b3JcbiAgfVxuXG4gIGlzRXF1YWxUbyhvYmplY3QpIHtcbiAgICByZXR1cm4gdGhpcyA9PT0gb2JqZWN0XG4gIH1cblxuICBpbnNwZWN0KCkge1xuICAgIGNvbnN0IHBhcnRzID0gW11cbiAgICBjb25zdCBjb250ZW50cyA9IHRoaXMuY29udGVudHNGb3JJbnNwZWN0aW9uKCkgfHwge31cblxuICAgIGZvciAoY29uc3Qga2V5IGluIGNvbnRlbnRzKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGNvbnRlbnRzW2tleV1cbiAgICAgIHBhcnRzLnB1c2goYCR7a2V5fT0ke3ZhbHVlfWApXG4gICAgfVxuXG4gICAgcmV0dXJuIGAjPCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfToke3RoaXMuaWR9JHtwYXJ0cy5sZW5ndGggPyBgICR7cGFydHMuam9pbihcIiwgXCIpfWAgOiBcIlwifT5gXG4gIH1cblxuICBjb250ZW50c0Zvckluc3BlY3Rpb24oKSB7fVxuXG4gIHRvSlNPTlN0cmluZygpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcylcbiAgfVxuXG4gIHRvVVRGMTZTdHJpbmcoKSB7XG4gICAgcmV0dXJuIFVURjE2U3RyaW5nLmJveCh0aGlzKVxuICB9XG5cbiAgZ2V0Q2FjaGVLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWQudG9TdHJpbmcoKVxuICB9XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiAgICBpZC1sZW5ndGgsXG4qL1xuZXhwb3J0IGNvbnN0IGFycmF5c0FyZUVxdWFsID0gZnVuY3Rpb24oYSA9IFtdLCBiID0gW10pIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IHZhbHVlID0gYVtpbmRleF1cbiAgICBpZiAodmFsdWUgIT09IGJbaW5kZXhdKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGNvbnN0IGFycmF5U3RhcnRzV2l0aCA9IChhID0gW10sIGIgPSBbXSkgPT4gYXJyYXlzQXJlRXF1YWwoYS5zbGljZSgwLCBiLmxlbmd0aCksIGIpXG5cbmV4cG9ydCBjb25zdCBzcGxpY2VBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGFycmF5LnNsaWNlKDApXG4gIHJlc3VsdC5zcGxpY2UoLi4uYXJncylcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgY29uc3Qgc3VtbWFyaXplQXJyYXlDaGFuZ2UgPSBmdW5jdGlvbihvbGRBcnJheSA9IFtdLCBuZXdBcnJheSA9IFtdKSB7XG4gIGNvbnN0IGFkZGVkID0gW11cbiAgY29uc3QgcmVtb3ZlZCA9IFtdXG5cbiAgY29uc3QgZXhpc3RpbmdWYWx1ZXMgPSBuZXcgU2V0KClcblxuICBvbGRBcnJheS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgIGV4aXN0aW5nVmFsdWVzLmFkZCh2YWx1ZSlcbiAgfSlcblxuICBjb25zdCBjdXJyZW50VmFsdWVzID0gbmV3IFNldCgpXG5cbiAgbmV3QXJyYXkuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICBjdXJyZW50VmFsdWVzLmFkZCh2YWx1ZSlcbiAgICBpZiAoIWV4aXN0aW5nVmFsdWVzLmhhcyh2YWx1ZSkpIHtcbiAgICAgIGFkZGVkLnB1c2godmFsdWUpXG4gICAgfVxuICB9KVxuXG4gIG9sZEFycmF5LmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgaWYgKCFjdXJyZW50VmFsdWVzLmhhcyh2YWx1ZSkpIHtcbiAgICAgIHJlbW92ZWQucHVzaCh2YWx1ZSlcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIHsgYWRkZWQsIHJlbW92ZWQgfVxufVxuIiwgImltcG9ydCB7IG1ha2VFbGVtZW50IH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzL2RvbVwiXG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL3VuaWNvZGUtMi4xLjgvYmxvYi9tYXN0ZXIvQmlkaV9DbGFzcy9SaWdodF9Ub19MZWZ0L3JlZ2V4LmpzXG5jb25zdCBSVExfUEFUVEVSTiA9XG4gIC9bXFx1MDVCRVxcdTA1QzBcXHUwNUMzXFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUY0XFx1MDYxQlxcdTA2MUZcXHUwNjIxLVxcdTA2M0FcXHUwNjQwLVxcdTA2NEFcXHUwNjZEXFx1MDY3MS1cXHUwNkI3XFx1MDZCQS1cXHUwNkJFXFx1MDZDMC1cXHUwNkNFXFx1MDZEMC1cXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUyMDBGXFx1MjAyQlxcdTIwMkVcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3MlxcdUZFNzRcXHVGRTc2LVxcdUZFRkNdL1xuXG5leHBvcnQgY29uc3QgZ2V0RGlyZWN0aW9uID0gKGZ1bmN0aW9uKCkge1xuICBjb25zdCBpbnB1dCA9IG1ha2VFbGVtZW50KFwiaW5wdXRcIiwgeyBkaXI6IFwiYXV0b1wiLCBuYW1lOiBcInhcIiwgZGlyTmFtZTogXCJ4LmRpclwiIH0pXG4gIGNvbnN0IHRleHRBcmVhID0gbWFrZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiLCB7IGRpcjogXCJhdXRvXCIsIG5hbWU6IFwieVwiLCBkaXJOYW1lOiBcInkuZGlyXCIgfSlcbiAgY29uc3QgZm9ybSA9IG1ha2VFbGVtZW50KFwiZm9ybVwiKVxuICBmb3JtLmFwcGVuZENoaWxkKGlucHV0KVxuICBmb3JtLmFwcGVuZENoaWxkKHRleHRBcmVhKVxuXG4gIGNvbnN0IHN1cHBvcnRzRGlyTmFtZSA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBGb3JtRGF0YShmb3JtKS5oYXModGV4dEFyZWEuZGlyTmFtZSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9KSgpXG5cbiAgY29uc3Qgc3VwcG9ydHNEaXJTZWxlY3RvciA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGlucHV0Lm1hdGNoZXMoXCI6ZGlyKGx0ciksOmRpcihydGwpXCIpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSkoKVxuXG4gIGlmIChzdXBwb3J0c0Rpck5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB0ZXh0QXJlYS52YWx1ZSA9IHN0cmluZ1xuICAgICAgcmV0dXJuIG5ldyBGb3JtRGF0YShmb3JtKS5nZXQodGV4dEFyZWEuZGlyTmFtZSlcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3VwcG9ydHNEaXJTZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIGlucHV0LnZhbHVlID0gc3RyaW5nXG4gICAgICBpZiAoaW5wdXQubWF0Y2hlcyhcIjpkaXIocnRsKVwiKSkge1xuICAgICAgICByZXR1cm4gXCJydGxcIlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibHRyXCJcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgY29uc3QgY2hhciA9IHN0cmluZy50cmltKCkuY2hhckF0KDApXG4gICAgICBpZiAoUlRMX1BBVFRFUk4udGVzdChjaGFyKSkge1xuICAgICAgICByZXR1cm4gXCJydGxcIlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibHRyXCJcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKClcbiIsICJpbXBvcnQgKiBhcyBjb25maWcgZnJvbSBcInRyaXgvY29uZmlnXCJcblxubGV0IGFsbEF0dHJpYnV0ZU5hbWVzID0gbnVsbFxubGV0IGJsb2NrQXR0cmlidXRlTmFtZXMgPSBudWxsXG5sZXQgdGV4dEF0dHJpYnV0ZU5hbWVzID0gbnVsbFxubGV0IGxpc3RBdHRyaWJ1dGVOYW1lcyA9IG51bGxcblxuZXhwb3J0IGNvbnN0IGdldEFsbEF0dHJpYnV0ZU5hbWVzID0gKCkgPT4ge1xuICBpZiAoIWFsbEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgYWxsQXR0cmlidXRlTmFtZXMgPSBnZXRUZXh0QXR0cmlidXRlTmFtZXMoKS5jb25jYXQoZ2V0QmxvY2tBdHRyaWJ1dGVOYW1lcygpKVxuICB9XG4gIHJldHVybiBhbGxBdHRyaWJ1dGVOYW1lc1xufVxuXG5leHBvcnQgY29uc3QgZ2V0QmxvY2tDb25maWcgPSAoYXR0cmlidXRlTmFtZSkgPT4gY29uZmlnLmJsb2NrQXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXVxuXG5leHBvcnQgY29uc3QgZ2V0QmxvY2tBdHRyaWJ1dGVOYW1lcyA9ICgpID0+IHtcbiAgaWYgKCFibG9ja0F0dHJpYnV0ZU5hbWVzKSB7XG4gICAgYmxvY2tBdHRyaWJ1dGVOYW1lcyA9IE9iamVjdC5rZXlzKGNvbmZpZy5ibG9ja0F0dHJpYnV0ZXMpXG4gIH1cbiAgcmV0dXJuIGJsb2NrQXR0cmlidXRlTmFtZXNcbn1cblxuZXhwb3J0IGNvbnN0IGdldFRleHRDb25maWcgPSAoYXR0cmlidXRlTmFtZSkgPT4gY29uZmlnLnRleHRBdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdXG5cbmV4cG9ydCBjb25zdCBnZXRUZXh0QXR0cmlidXRlTmFtZXMgPSAoKSA9PiB7XG4gIGlmICghdGV4dEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgdGV4dEF0dHJpYnV0ZU5hbWVzID0gT2JqZWN0LmtleXMoY29uZmlnLnRleHRBdHRyaWJ1dGVzKVxuICB9XG4gIHJldHVybiB0ZXh0QXR0cmlidXRlTmFtZXNcbn1cblxuZXhwb3J0IGNvbnN0IGdldExpc3RBdHRyaWJ1dGVOYW1lcyA9ICgpID0+IHtcbiAgaWYgKCFsaXN0QXR0cmlidXRlTmFtZXMpIHtcbiAgICBsaXN0QXR0cmlidXRlTmFtZXMgPSBbXVxuICAgIGZvciAoY29uc3Qga2V5IGluIGNvbmZpZy5ibG9ja0F0dHJpYnV0ZXMpIHtcbiAgICAgIGNvbnN0IHsgbGlzdEF0dHJpYnV0ZSB9ID0gY29uZmlnLmJsb2NrQXR0cmlidXRlc1trZXldXG4gICAgICBpZiAobGlzdEF0dHJpYnV0ZSAhPSBudWxsKSB7XG4gICAgICAgIGxpc3RBdHRyaWJ1dGVOYW1lcy5wdXNoKGxpc3RBdHRyaWJ1dGUpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBsaXN0QXR0cmlidXRlTmFtZXNcbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZVxuKi9cbmV4cG9ydCBjb25zdCBpbnN0YWxsRGVmYXVsdENTU0ZvclRhZ05hbWUgPSBmdW5jdGlvbih0YWdOYW1lLCBkZWZhdWx0Q1NTKSB7XG4gIGNvbnN0IHN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudEZvclRhZ05hbWUodGFnTmFtZSlcbiAgc3R5bGVFbGVtZW50LnRleHRDb250ZW50ID0gZGVmYXVsdENTUy5yZXBsYWNlKC8ldC9nLCB0YWdOYW1lKVxufVxuXG5jb25zdCBpbnNlcnRTdHlsZUVsZW1lbnRGb3JUYWdOYW1lID0gZnVuY3Rpb24odGFnTmFtZSkge1xuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpXG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHQvY3NzXCIpXG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS10YWctbmFtZVwiLCB0YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gIGNvbnN0IG5vbmNlID0gZ2V0Q1NQTm9uY2UoKVxuICBpZiAobm9uY2UpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKVxuICB9XG4gIGRvY3VtZW50LmhlYWQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGRvY3VtZW50LmhlYWQuZmlyc3RDaGlsZClcbiAgcmV0dXJuIGVsZW1lbnRcbn1cblxuY29uc3QgZ2V0Q1NQTm9uY2UgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZWxlbWVudCA9IGdldE1ldGFFbGVtZW50KFwidHJpeC1jc3Atbm9uY2VcIikgfHwgZ2V0TWV0YUVsZW1lbnQoXCJjc3Atbm9uY2VcIilcbiAgaWYgKGVsZW1lbnQpIHtcbiAgICBjb25zdCB7IG5vbmNlLCBjb250ZW50IH0gPSBlbGVtZW50XG4gICAgcmV0dXJuIG5vbmNlID09IFwiXCIgPyBjb250ZW50IDogbm9uY2VcbiAgfVxufVxuXG5jb25zdCBnZXRNZXRhRWxlbWVudCA9IChuYW1lKSA9PiBkb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3IoYG1ldGFbbmFtZT0ke25hbWV9XWApXG4iLCAiY29uc3QgdGVzdFRyYW5zZmVyRGF0YSA9IHsgXCJhcHBsaWNhdGlvbi94LXRyaXgtZmVhdHVyZS1kZXRlY3Rpb25cIjogXCJ0ZXN0XCIgfVxuXG5leHBvcnQgY29uc3QgZGF0YVRyYW5zZmVySXNQbGFpblRleHQgPSBmdW5jdGlvbihkYXRhVHJhbnNmZXIpIHtcbiAgY29uc3QgdGV4dCA9IGRhdGFUcmFuc2Zlci5nZXREYXRhKFwidGV4dC9wbGFpblwiKVxuICBjb25zdCBodG1sID0gZGF0YVRyYW5zZmVyLmdldERhdGEoXCJ0ZXh0L2h0bWxcIilcblxuICBpZiAodGV4dCAmJiBodG1sKSB7XG4gICAgY29uc3QgeyBib2R5IH0gPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGh0bWwsIFwidGV4dC9odG1sXCIpXG4gICAgaWYgKGJvZHkudGV4dENvbnRlbnQgPT09IHRleHQpIHtcbiAgICAgIHJldHVybiAhYm9keS5xdWVyeVNlbGVjdG9yKFwiKlwiKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGV4dD8ubGVuZ3RoXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGRhdGFUcmFuc2ZlcklzTXNPZmZpY2VQYXN0ZSA9ICh7IGRhdGFUcmFuc2ZlciB9KSA9PiB7XG4gIHJldHVybiBkYXRhVHJhbnNmZXIudHlwZXMuaW5jbHVkZXMoXCJGaWxlc1wiKSAmJlxuICAgIGRhdGFUcmFuc2Zlci50eXBlcy5pbmNsdWRlcyhcInRleHQvaHRtbFwiKSAmJlxuICAgIGRhdGFUcmFuc2Zlci5nZXREYXRhKFwidGV4dC9odG1sXCIpLmluY2x1ZGVzKFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIpXG59XG5cbmV4cG9ydCBjb25zdCBkYXRhVHJhbnNmZXJJc1dyaXRhYmxlID0gZnVuY3Rpb24oZGF0YVRyYW5zZmVyKSB7XG4gIGlmICghZGF0YVRyYW5zZmVyPy5zZXREYXRhKSByZXR1cm4gZmFsc2VcblxuICBmb3IgKGNvbnN0IGtleSBpbiB0ZXN0VHJhbnNmZXJEYXRhKSB7XG4gICAgY29uc3QgdmFsdWUgPSB0ZXN0VHJhbnNmZXJEYXRhW2tleV1cblxuICAgIHRyeSB7XG4gICAgICBkYXRhVHJhbnNmZXIuc2V0RGF0YShrZXksIHZhbHVlKVxuICAgICAgaWYgKCFkYXRhVHJhbnNmZXIuZ2V0RGF0YShrZXkpID09PSB2YWx1ZSkgcmV0dXJuIGZhbHNlXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgY29uc3Qga2V5RXZlbnRJc0tleWJvYXJkQ29tbWFuZCA9IChmdW5jdGlvbigpIHtcbiAgaWYgKC9NYWN8XmlQLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSkpIHtcbiAgICByZXR1cm4gKGV2ZW50KSA9PiBldmVudC5tZXRhS2V5XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChldmVudCkgPT4gZXZlbnQuY3RybEtleVxuICB9XG59KSgpXG5cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRSZW5kZXJJbm1tZWRpYXRlbHlUb0RlYWxXaXRoSU9TRGljdGF0aW9uKGlucHV0RXZlbnQpIHtcbiAgaWYgKC9pUGhvbmV8aVBhZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgIC8vIEhhbmRsZSBnYXJibGVkIGNvbnRlbnQgYW5kIGR1cGxpY2F0ZWQgbmV3bGluZXMgd2hlbiB1c2luZyBkaWN0YXRpb24gb24gaU9TIDE4Ky4gVXBvbiBkaWN0YXRpb24gY29tcGxldGlvbiwgaU9TIHNlbmRzXG4gICAgLy8gdGhlIGxpc3Qgb2YgaW5zZXJ0VGV4dCAvIGluc2VydFBhcmFncmFwaCBldmVudHMgaW4gYSBxdWljayBzZXF1ZW5jZS4gSWYgd2UgZG9uJ3QgcmVuZGVyXG4gICAgLy8gdGhlIGVkaXRvciBzeW5jaHJvbm91c2x5LCB0aGUgaW50ZXJuYWwgcmFuZ2UgZmFpbHMgdG8gdXBkYXRlIGFuZCByZXN1bHRzIGluIGdhcmJsZWQgY29udGVudCBvciBkdXBsaWNhdGVkIG5ld2xpbmVzLlxuICAgIC8vXG4gICAgLy8gVGhpcyB3b3JrYXJvdW5kIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGlPUyBkb2Vzbid0IHNlbmQgY29tcG9zaW5nIGV2ZW50cyBhcyBleHBlY3RlZCB3aGlsZSBkaWN0YXRpbmc6XG4gICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI2MTc2NFxuICAgIHJldHVybiAhaW5wdXRFdmVudC5pbnB1dFR5cGUgfHwgaW5wdXRFdmVudC5pbnB1dFR5cGUgPT09IFwiaW5zZXJ0UGFyYWdyYXBoXCJcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuIiwgImV4cG9ydCBjb25zdCBkZWZlciA9IChmbikgPT4gc2V0VGltZW91dChmbiwgMSlcbiIsICIvKiBlc2xpbnQtZGlzYWJsZVxuICAgIGlkLWxlbmd0aCxcbiovXG5leHBvcnQgY29uc3QgY29weU9iamVjdCA9IGZ1bmN0aW9uKG9iamVjdCA9IHt9KSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9XG4gIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgIGNvbnN0IHZhbHVlID0gb2JqZWN0W2tleV1cbiAgICByZXN1bHRba2V5XSA9IHZhbHVlXG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgY29uc3Qgb2JqZWN0c0FyZUVxdWFsID0gZnVuY3Rpb24oYSA9IHt9LCBiID0ge30pIHtcbiAgaWYgKE9iamVjdC5rZXlzKGEpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgIGNvbnN0IHZhbHVlID0gYVtrZXldXG4gICAgaWYgKHZhbHVlICE9PSBiW2tleV0pIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuIiwgImltcG9ydCB7IGNvcHlPYmplY3QsIG9iamVjdHNBcmVFcXVhbCB9IGZyb20gXCJ0cml4L2NvcmUvaGVscGVycy9vYmplY3RzXCJcblxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHtcbiAgaWYgKHJhbmdlID09IG51bGwpIHJldHVyblxuXG4gIGlmICghQXJyYXkuaXNBcnJheShyYW5nZSkpIHtcbiAgICByYW5nZSA9IFsgcmFuZ2UsIHJhbmdlIF1cbiAgfVxuICByZXR1cm4gWyBjb3B5VmFsdWUocmFuZ2VbMF0pLCBjb3B5VmFsdWUocmFuZ2VbMV0gIT0gbnVsbCA/IHJhbmdlWzFdIDogcmFuZ2VbMF0pIF1cbn1cblxuZXhwb3J0IGNvbnN0IHJhbmdlSXNDb2xsYXBzZWQgPSBmdW5jdGlvbihyYW5nZSkge1xuICBpZiAocmFuZ2UgPT0gbnVsbCkgcmV0dXJuXG5cbiAgY29uc3QgWyBzdGFydCwgZW5kIF0gPSBub3JtYWxpemVSYW5nZShyYW5nZSlcbiAgcmV0dXJuIHJhbmdlVmFsdWVzQXJlRXF1YWwoc3RhcnQsIGVuZClcbn1cblxuZXhwb3J0IGNvbnN0IHJhbmdlc0FyZUVxdWFsID0gZnVuY3Rpb24obGVmdFJhbmdlLCByaWdodFJhbmdlKSB7XG4gIGlmIChsZWZ0UmFuZ2UgPT0gbnVsbCB8fCByaWdodFJhbmdlID09IG51bGwpIHJldHVyblxuXG4gIGNvbnN0IFsgbGVmdFN0YXJ0LCBsZWZ0RW5kIF0gPSBub3JtYWxpemVSYW5nZShsZWZ0UmFuZ2UpXG4gIGNvbnN0IFsgcmlnaHRTdGFydCwgcmlnaHRFbmQgXSA9IG5vcm1hbGl6ZVJhbmdlKHJpZ2h0UmFuZ2UpXG4gIHJldHVybiByYW5nZVZhbHVlc0FyZUVxdWFsKGxlZnRTdGFydCwgcmlnaHRTdGFydCkgJiYgcmFuZ2VWYWx1ZXNBcmVFcXVhbChsZWZ0RW5kLCByaWdodEVuZClcbn1cblxuY29uc3QgY29weVZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiB2YWx1ZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlKVxuICB9XG59XG5cbmNvbnN0IHJhbmdlVmFsdWVzQXJlRXF1YWwgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICBpZiAodHlwZW9mIGxlZnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqZWN0c0FyZUVxdWFsKGxlZnQsIHJpZ2h0KVxuICB9XG59XG4iLCAiaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLnVwZGF0ZSA9IHRoaXMudXBkYXRlLmJpbmQodGhpcylcbiAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXJzID0gW11cbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIGlmICghdGhpcy5zdGFydGVkKSB7XG4gICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsIHRoaXMudXBkYXRlLCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgaWYgKHRoaXMuc3RhcnRlZCkge1xuICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2VcbiAgICAgIHJldHVybiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsIHRoaXMudXBkYXRlLCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyU2VsZWN0aW9uTWFuYWdlcihzZWxlY3Rpb25NYW5hZ2VyKSB7XG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbk1hbmFnZXJzLmluY2x1ZGVzKHNlbGVjdGlvbk1hbmFnZXIpKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXJzLnB1c2goc2VsZWN0aW9uTWFuYWdlcilcbiAgICAgIHJldHVybiB0aGlzLnN0YXJ0KClcbiAgICB9XG4gIH1cblxuICB1bnJlZ2lzdGVyU2VsZWN0aW9uTWFuYWdlcihzZWxlY3Rpb25NYW5hZ2VyKSB7XG4gICAgdGhpcy5zZWxlY3Rpb25NYW5hZ2VycyA9IHRoaXMuc2VsZWN0aW9uTWFuYWdlcnMuZmlsdGVyKChzbSkgPT4gc20gIT09IHNlbGVjdGlvbk1hbmFnZXIpXG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uTWFuYWdlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdG9wKClcbiAgICB9XG4gIH1cblxuICBub3RpZnlTZWxlY3Rpb25NYW5hZ2Vyc09mU2VsZWN0aW9uQ2hhbmdlKCkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbk1hbmFnZXJzLm1hcCgoc2VsZWN0aW9uTWFuYWdlcikgPT4gc2VsZWN0aW9uTWFuYWdlci5zZWxlY3Rpb25EaWRDaGFuZ2UoKSlcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLm5vdGlmeVNlbGVjdGlvbk1hbmFnZXJzT2ZTZWxlY3Rpb25DaGFuZ2UoKVxuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy51cGRhdGUoKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzZWxlY3Rpb25DaGFuZ2VPYnNlcnZlciA9IG5ldyBTZWxlY3Rpb25DaGFuZ2VPYnNlcnZlcigpXG5cbmV4cG9ydCBjb25zdCBnZXRET01TZWxlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgY29uc3Qgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpXG4gIGlmIChzZWxlY3Rpb24ucmFuZ2VDb3VudCA+IDApIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldERPTVJhbmdlID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGRvbVJhbmdlID0gZ2V0RE9NU2VsZWN0aW9uKCk/LmdldFJhbmdlQXQoMClcbiAgaWYgKGRvbVJhbmdlKSB7XG4gICAgaWYgKCFkb21SYW5nZUlzUHJpdmF0ZShkb21SYW5nZSkpIHtcbiAgICAgIHJldHVybiBkb21SYW5nZVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgc2V0RE9NUmFuZ2UgPSBmdW5jdGlvbihkb21SYW5nZSkge1xuICBjb25zdCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKClcbiAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpXG4gIHNlbGVjdGlvbi5hZGRSYW5nZShkb21SYW5nZSlcbiAgcmV0dXJuIHNlbGVjdGlvbkNoYW5nZU9ic2VydmVyLnVwZGF0ZSgpXG59XG5cbi8vIEluIEZpcmVmb3gsIGNsaWNraW5nIGNlcnRhaW4gPGlucHV0PiBlbGVtZW50cyBjaGFuZ2VzIHRoZSBzZWxlY3Rpb24gdG8gYVxuLy8gcHJpdmF0ZSBlbGVtZW50IHVzZWQgdG8gZHJhdyBpdHMgVUkuIEF0dGVtcHRpbmcgdG8gYWNjZXNzIHByb3BlcnRpZXMgb2YgdGhvc2Vcbi8vIGVsZW1lbnRzIHRocm93cyBhbiBlcnJvci5cbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTIwODQyN1xuY29uc3QgZG9tUmFuZ2VJc1ByaXZhdGUgPSAoZG9tUmFuZ2UpID0+IG5vZGVJc1ByaXZhdGUoZG9tUmFuZ2Uuc3RhcnRDb250YWluZXIpIHx8IG5vZGVJc1ByaXZhdGUoZG9tUmFuZ2UuZW5kQ29udGFpbmVyKVxuXG5jb25zdCBub2RlSXNQcml2YXRlID0gKG5vZGUpID0+ICFPYmplY3QuZ2V0UHJvdG90eXBlT2Yobm9kZSlcbiIsICIvKiBlc2xpbnQtZGlzYWJsZVxuICAgIGlkLWxlbmd0aCxcbiAgICBuby11c2VsZXNzLWVzY2FwZSxcbiovXG5pbXBvcnQgeyBOT05fQlJFQUtJTkdfU1BBQ0UsIFpFUk9fV0lEVEhfU1BBQ0UgfSBmcm9tIFwidHJpeC9jb25zdGFudHNcIlxuaW1wb3J0IFVURjE2U3RyaW5nIGZyb20gXCJ0cml4L2NvcmUvdXRpbGl0aWVzL3V0ZjE2X3N0cmluZ1wiXG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVTcGFjZXMgPSAoc3RyaW5nKSA9PlxuICBzdHJpbmcucmVwbGFjZShuZXcgUmVnRXhwKGAke1pFUk9fV0lEVEhfU1BBQ0V9YCwgXCJnXCIpLCBcIlwiKS5yZXBsYWNlKG5ldyBSZWdFeHAoYCR7Tk9OX0JSRUFLSU5HX1NQQUNFfWAsIFwiZ1wiKSwgXCIgXCIpXG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVOZXdsaW5lcyA9IChzdHJpbmcpID0+IHN0cmluZy5yZXBsYWNlKC9cXHJcXG4/L2csIFwiXFxuXCIpXG5cbmV4cG9ydCBjb25zdCBicmVha2FibGVXaGl0ZXNwYWNlUGF0dGVybiA9IG5ldyBSZWdFeHAoYFteXFxcXFMke05PTl9CUkVBS0lOR19TUEFDRX1dYClcblxuZXhwb3J0IGNvbnN0IHNxdWlzaEJyZWFrYWJsZVdoaXRlc3BhY2UgPSAoc3RyaW5nKSA9PlxuICBzdHJpbmdcbiAgICAvLyBSZXBsYWNlIGFsbCBicmVha2FibGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHdpdGggYSBzcGFjZVxuICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAoYCR7YnJlYWthYmxlV2hpdGVzcGFjZVBhdHRlcm4uc291cmNlfWAsIFwiZ1wiKSwgXCIgXCIpXG4gICAgLy8gUmVwbGFjZSB0d28gb3IgbW9yZSBzcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICAgIC5yZXBsYWNlKC9cXCB7Mix9L2csIFwiIFwiKVxuXG5leHBvcnQgY29uc3Qgc3VtbWFyaXplU3RyaW5nQ2hhbmdlID0gZnVuY3Rpb24ob2xkU3RyaW5nLCBuZXdTdHJpbmcpIHtcbiAgbGV0IGFkZGVkLCByZW1vdmVkXG4gIG9sZFN0cmluZyA9IFVURjE2U3RyaW5nLmJveChvbGRTdHJpbmcpXG4gIG5ld1N0cmluZyA9IFVURjE2U3RyaW5nLmJveChuZXdTdHJpbmcpXG5cbiAgaWYgKG5ld1N0cmluZy5sZW5ndGggPCBvbGRTdHJpbmcubGVuZ3RoKSB7XG4gICAgWyByZW1vdmVkLCBhZGRlZCBdID0gdXRmMTZTdHJpbmdEaWZmZXJlbmNlcyhvbGRTdHJpbmcsIG5ld1N0cmluZylcbiAgfSBlbHNlIHtcbiAgICBbIGFkZGVkLCByZW1vdmVkIF0gPSB1dGYxNlN0cmluZ0RpZmZlcmVuY2VzKG5ld1N0cmluZywgb2xkU3RyaW5nKVxuICB9XG5cbiAgcmV0dXJuIHsgYWRkZWQsIHJlbW92ZWQgfVxufVxuXG5jb25zdCB1dGYxNlN0cmluZ0RpZmZlcmVuY2VzID0gZnVuY3Rpb24oYSwgYikge1xuICBpZiAoYS5pc0VxdWFsVG8oYikpIHtcbiAgICByZXR1cm4gWyBcIlwiLCBcIlwiIF1cbiAgfVxuXG4gIGNvbnN0IGRpZmZBID0gdXRmMTZTdHJpbmdEaWZmZXJlbmNlKGEsIGIpXG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSBkaWZmQS51dGYxNlN0cmluZ1xuXG4gIGxldCBkaWZmQlxuXG4gIGlmIChsZW5ndGgpIHtcbiAgICBjb25zdCB7IG9mZnNldCB9ID0gZGlmZkFcbiAgICBjb25zdCBjb2RlcG9pbnRzID0gYS5jb2RlcG9pbnRzLnNsaWNlKDAsIG9mZnNldCkuY29uY2F0KGEuY29kZXBvaW50cy5zbGljZShvZmZzZXQgKyBsZW5ndGgpKVxuICAgIGRpZmZCID0gdXRmMTZTdHJpbmdEaWZmZXJlbmNlKGIsIFVURjE2U3RyaW5nLmZyb21Db2RlcG9pbnRzKGNvZGVwb2ludHMpKVxuICB9IGVsc2Uge1xuICAgIGRpZmZCID0gdXRmMTZTdHJpbmdEaWZmZXJlbmNlKGIsIGEpXG4gIH1cblxuICByZXR1cm4gWyBkaWZmQS51dGYxNlN0cmluZy50b1N0cmluZygpLCBkaWZmQi51dGYxNlN0cmluZy50b1N0cmluZygpIF1cbn1cblxuY29uc3QgdXRmMTZTdHJpbmdEaWZmZXJlbmNlID0gZnVuY3Rpb24oYSwgYikge1xuICBsZXQgbGVmdEluZGV4ID0gMFxuICBsZXQgcmlnaHRJbmRleEEgPSBhLmxlbmd0aFxuICBsZXQgcmlnaHRJbmRleEIgPSBiLmxlbmd0aFxuXG4gIHdoaWxlIChsZWZ0SW5kZXggPCByaWdodEluZGV4QSAmJiBhLmNoYXJBdChsZWZ0SW5kZXgpLmlzRXF1YWxUbyhiLmNoYXJBdChsZWZ0SW5kZXgpKSkge1xuICAgIGxlZnRJbmRleCsrXG4gIH1cblxuICB3aGlsZSAocmlnaHRJbmRleEEgPiBsZWZ0SW5kZXggKyAxICYmIGEuY2hhckF0KHJpZ2h0SW5kZXhBIC0gMSkuaXNFcXVhbFRvKGIuY2hhckF0KHJpZ2h0SW5kZXhCIC0gMSkpKSB7XG4gICAgcmlnaHRJbmRleEEtLVxuICAgIHJpZ2h0SW5kZXhCLS1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdXRmMTZTdHJpbmc6IGEuc2xpY2UobGVmdEluZGV4LCByaWdodEluZGV4QSksXG4gICAgb2Zmc2V0OiBsZWZ0SW5kZXgsXG4gIH1cbn1cbiIsICJpbXBvcnQgVHJpeE9iamVjdCBmcm9tIFwidHJpeC9jb3JlL29iamVjdFwiIC8vIERvbid0IG92ZXJyaWRlIHdpbmRvdy5PYmplY3RcbmltcG9ydCB7IGFycmF5c0FyZUVxdWFsIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGFzaCBleHRlbmRzIFRyaXhPYmplY3Qge1xuICBzdGF0aWMgZnJvbUNvbW1vbkF0dHJpYnV0ZXNPZk9iamVjdHMob2JqZWN0cyA9IFtdKSB7XG4gICAgaWYgKCFvYmplY3RzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKClcbiAgICB9XG4gICAgbGV0IGhhc2ggPSBib3gob2JqZWN0c1swXSlcbiAgICBsZXQga2V5cyA9IGhhc2guZ2V0S2V5cygpXG5cbiAgICBvYmplY3RzLnNsaWNlKDEpLmZvckVhY2goKG9iamVjdCkgPT4ge1xuICAgICAga2V5cyA9IGhhc2guZ2V0S2V5c0NvbW1vblRvSGFzaChib3gob2JqZWN0KSlcbiAgICAgIGhhc2ggPSBoYXNoLnNsaWNlKGtleXMpXG4gICAgfSlcblxuICAgIHJldHVybiBoYXNoXG4gIH1cblxuICBzdGF0aWMgYm94KHZhbHVlcykge1xuICAgIHJldHVybiBib3godmFsdWVzKVxuICB9XG5cbiAgY29uc3RydWN0b3IodmFsdWVzID0ge30pIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy52YWx1ZXMgPSBjb3B5KHZhbHVlcylcbiAgfVxuXG4gIGFkZChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMubWVyZ2Uob2JqZWN0KGtleSwgdmFsdWUpKVxuICB9XG5cbiAgcmVtb3ZlKGtleSkge1xuICAgIHJldHVybiBuZXcgSGFzaChjb3B5KHRoaXMudmFsdWVzLCBrZXkpKVxuICB9XG5cbiAgZ2V0KGtleSkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlc1trZXldXG4gIH1cblxuICBoYXMoa2V5KSB7XG4gICAgcmV0dXJuIGtleSBpbiB0aGlzLnZhbHVlc1xuICB9XG5cbiAgbWVyZ2UodmFsdWVzKSB7XG4gICAgcmV0dXJuIG5ldyBIYXNoKG1lcmdlKHRoaXMudmFsdWVzLCB1bmJveCh2YWx1ZXMpKSlcbiAgfVxuXG4gIHNsaWNlKGtleXMpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB7fVxuXG4gICAgQXJyYXkuZnJvbShrZXlzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgIHZhbHVlc1trZXldID0gdGhpcy52YWx1ZXNba2V5XVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gbmV3IEhhc2godmFsdWVzKVxuICB9XG5cbiAgZ2V0S2V5cygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy52YWx1ZXMpXG4gIH1cblxuICBnZXRLZXlzQ29tbW9uVG9IYXNoKGhhc2gpIHtcbiAgICBoYXNoID0gYm94KGhhc2gpXG4gICAgcmV0dXJuIHRoaXMuZ2V0S2V5cygpLmZpbHRlcigoa2V5KSA9PiB0aGlzLnZhbHVlc1trZXldID09PSBoYXNoLnZhbHVlc1trZXldKVxuICB9XG5cbiAgaXNFcXVhbFRvKHZhbHVlcykge1xuICAgIHJldHVybiBhcnJheXNBcmVFcXVhbCh0aGlzLnRvQXJyYXkoKSwgYm94KHZhbHVlcykudG9BcnJheSgpKVxuICB9XG5cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRLZXlzKCkubGVuZ3RoID09PSAwXG4gIH1cblxuICB0b0FycmF5KCkge1xuICAgIGlmICghdGhpcy5hcnJheSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gW11cbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMudmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZXNba2V5XVxuICAgICAgICByZXN1bHQucHVzaChyZXN1bHQucHVzaChrZXksIHZhbHVlKSlcbiAgICAgIH1cbiAgICAgIHRoaXMuYXJyYXkgPSByZXN1bHQuc2xpY2UoMClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hcnJheVxuICB9XG5cbiAgdG9PYmplY3QoKSB7XG4gICAgcmV0dXJuIGNvcHkodGhpcy52YWx1ZXMpXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9PYmplY3QoKVxuICB9XG5cbiAgY29udGVudHNGb3JJbnNwZWN0aW9uKCkge1xuICAgIHJldHVybiB7IHZhbHVlczogSlNPTi5zdHJpbmdpZnkodGhpcy52YWx1ZXMpIH1cbiAgfVxufVxuXG5jb25zdCBvYmplY3QgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9XG4gIHJlc3VsdFtrZXldID0gdmFsdWVcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5jb25zdCBtZXJnZSA9IGZ1bmN0aW9uKG9iamVjdCwgdmFsdWVzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGNvcHkob2JqZWN0KVxuICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZXMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1trZXldXG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuY29uc3QgY29weSA9IGZ1bmN0aW9uKG9iamVjdCwga2V5VG9SZW1vdmUpIHtcbiAgY29uc3QgcmVzdWx0ID0ge31cbiAgY29uc3Qgc29ydGVkS2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCkuc29ydCgpXG5cbiAgc29ydGVkS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoa2V5ICE9PSBrZXlUb1JlbW92ZSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBvYmplY3Rba2V5XVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gcmVzdWx0XG59XG5cbmNvbnN0IGJveCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgSGFzaCkge1xuICAgIHJldHVybiBvYmplY3RcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEhhc2gob2JqZWN0KVxuICB9XG59XG5cbmNvbnN0IHVuYm94ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBIYXNoKSB7XG4gICAgcmV0dXJuIG9iamVjdC52YWx1ZXNcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqZWN0XG4gIH1cbn1cbiIsICJleHBvcnQgZGVmYXVsdCBjbGFzcyBPYmplY3RHcm91cCB7XG4gIHN0YXRpYyBncm91cE9iamVjdHModW5ncm91cGVkT2JqZWN0cyA9IFtdLCB7IGRlcHRoLCBhc1RyZWUgfSA9IHt9KSB7XG4gICAgbGV0IGdyb3VwXG4gICAgaWYgKGFzVHJlZSkge1xuICAgICAgaWYgKGRlcHRoID09IG51bGwpIHtcbiAgICAgICAgZGVwdGggPSAwXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG9iamVjdHMgPSBbXVxuXG4gICAgQXJyYXkuZnJvbSh1bmdyb3VwZWRPYmplY3RzKS5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgIGlmIChncm91cCkge1xuICAgICAgICBpZiAob2JqZWN0LmNhbkJlR3JvdXBlZD8uKGRlcHRoKSAmJiBncm91cFtncm91cC5sZW5ndGggLSAxXS5jYW5CZUdyb3VwZWRXaXRoPy4ob2JqZWN0LCBkZXB0aCkpIHtcbiAgICAgICAgICBncm91cC5wdXNoKG9iamVjdClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYmplY3RzLnB1c2gobmV3IHRoaXMoZ3JvdXAsIHsgZGVwdGgsIGFzVHJlZSB9KSlcbiAgICAgICAgICBncm91cCA9IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAob2JqZWN0LmNhbkJlR3JvdXBlZD8uKGRlcHRoKSkge1xuICAgICAgICBncm91cCA9IFsgb2JqZWN0IF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdHMucHVzaChvYmplY3QpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmIChncm91cCkge1xuICAgICAgb2JqZWN0cy5wdXNoKG5ldyB0aGlzKGdyb3VwLCB7IGRlcHRoLCBhc1RyZWUgfSkpXG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzXG4gIH1cblxuICBjb25zdHJ1Y3RvcihvYmplY3RzID0gW10sIHsgZGVwdGgsIGFzVHJlZSB9KSB7XG4gICAgdGhpcy5vYmplY3RzID0gb2JqZWN0c1xuICAgIGlmIChhc1RyZWUpIHtcbiAgICAgIHRoaXMuZGVwdGggPSBkZXB0aFxuICAgICAgdGhpcy5vYmplY3RzID0gdGhpcy5jb25zdHJ1Y3Rvci5ncm91cE9iamVjdHModGhpcy5vYmplY3RzLCB7IGFzVHJlZSwgZGVwdGg6IHRoaXMuZGVwdGggKyAxIH0pXG4gICAgfVxuICB9XG5cbiAgZ2V0T2JqZWN0cygpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3RzXG4gIH1cblxuICBnZXREZXB0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5kZXB0aFxuICB9XG5cbiAgZ2V0Q2FjaGVLZXkoKSB7XG4gICAgY29uc3Qga2V5cyA9IFsgXCJvYmplY3RHcm91cFwiIF1cbiAgICBBcnJheS5mcm9tKHRoaXMuZ2V0T2JqZWN0cygpKS5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgIGtleXMucHVzaChvYmplY3QuZ2V0Q2FjaGVLZXkoKSlcbiAgICB9KVxuICAgIHJldHVybiBrZXlzLmpvaW4oXCIvXCIpXG4gIH1cbn1cbiIsICJpbXBvcnQgQmFzaWNPYmplY3QgZnJvbSBcInRyaXgvY29yZS9iYXNpY19vYmplY3RcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPYmplY3RNYXAgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGNvbnN0cnVjdG9yKG9iamVjdHMgPSBbXSkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLm9iamVjdHMgPSB7fVxuXG4gICAgQXJyYXkuZnJvbShvYmplY3RzKS5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgIGNvbnN0IGhhc2ggPSBKU09OLnN0cmluZ2lmeShvYmplY3QpXG4gICAgICBpZiAodGhpcy5vYmplY3RzW2hhc2hdID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5vYmplY3RzW2hhc2hdID0gb2JqZWN0XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZpbmQob2JqZWN0KSB7XG4gICAgY29uc3QgaGFzaCA9IEpTT04uc3RyaW5naWZ5KG9iamVjdClcbiAgICByZXR1cm4gdGhpcy5vYmplY3RzW2hhc2hdXG4gIH1cbn1cbiIsICJleHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVtZW50U3RvcmUge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50cykge1xuICAgIHRoaXMucmVzZXQoZWxlbWVudHMpXG4gIH1cblxuICBhZGQoZWxlbWVudCkge1xuICAgIGNvbnN0IGtleSA9IGdldEtleShlbGVtZW50KVxuICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IGVsZW1lbnRcbiAgfVxuXG4gIHJlbW92ZShlbGVtZW50KSB7XG4gICAgY29uc3Qga2V5ID0gZ2V0S2V5KGVsZW1lbnQpXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmVsZW1lbnRzW2tleV1cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnRzW2tleV1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cbiAgfVxuXG4gIHJlc2V0KGVsZW1lbnRzID0gW10pIHtcbiAgICB0aGlzLmVsZW1lbnRzID0ge31cbiAgICBBcnJheS5mcm9tKGVsZW1lbnRzKS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLmFkZChlbGVtZW50KVxuICAgIH0pXG4gICAgcmV0dXJuIGVsZW1lbnRzXG4gIH1cbn1cblxuY29uc3QgZ2V0S2V5ID0gKGVsZW1lbnQpID0+IGVsZW1lbnQuZGF0YXNldC50cml4U3RvcmVLZXlcbiIsICJpbXBvcnQgQmFzaWNPYmplY3QgZnJvbSBcInRyaXgvY29yZS9iYXNpY19vYmplY3RcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVyYXRpb24gZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGlzUGVyZm9ybWluZygpIHtcbiAgICByZXR1cm4gdGhpcy5wZXJmb3JtaW5nID09PSB0cnVlXG4gIH1cblxuICBoYXNQZXJmb3JtZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVyZm9ybWVkID09PSB0cnVlXG4gIH1cblxuICBoYXNTdWNjZWVkZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVyZm9ybWVkICYmIHRoaXMuc3VjY2VlZGVkXG4gIH1cblxuICBoYXNGYWlsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVyZm9ybWVkICYmICF0aGlzLnN1Y2NlZWRlZFxuICB9XG5cbiAgZ2V0UHJvbWlzZSgpIHtcbiAgICBpZiAoIXRoaXMucHJvbWlzZSkge1xuICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0aGlzLnBlcmZvcm1pbmcgPSB0cnVlXG4gICAgICAgIHJldHVybiB0aGlzLnBlcmZvcm0oKHN1Y2NlZWRlZCwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgdGhpcy5zdWNjZWVkZWQgPSBzdWNjZWVkZWRcbiAgICAgICAgICB0aGlzLnBlcmZvcm1pbmcgPSBmYWxzZVxuICAgICAgICAgIHRoaXMucGVyZm9ybWVkID0gdHJ1ZVxuXG4gICAgICAgICAgaWYgKHRoaXMuc3VjY2VlZGVkKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KHJlc3VsdClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnByb21pc2VcbiAgfVxuXG4gIHBlcmZvcm0oY2FsbGJhY2spIHtcbiAgICByZXR1cm4gY2FsbGJhY2soZmFsc2UpXG4gIH1cblxuICByZWxlYXNlKCkge1xuICAgIHRoaXMucHJvbWlzZT8uY2FuY2VsPy4oKVxuICAgIHRoaXMucHJvbWlzZSA9IG51bGxcbiAgICB0aGlzLnBlcmZvcm1pbmcgPSBudWxsXG4gICAgdGhpcy5wZXJmb3JtZWQgPSBudWxsXG4gICAgdGhpcy5zdWNjZWVkZWQgPSBudWxsXG4gIH1cbn1cblxuT3BlcmF0aW9uLnByb3h5TWV0aG9kKFwiZ2V0UHJvbWlzZSgpLnRoZW5cIilcbk9wZXJhdGlvbi5wcm94eU1ldGhvZChcImdldFByb21pc2UoKS5jYXRjaFwiKVxuIiwgImltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5pbXBvcnQgT2JqZWN0R3JvdXAgZnJvbSBcInRyaXgvY29yZS9jb2xsZWN0aW9ucy9vYmplY3RfZ3JvdXBcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPYmplY3RWaWV3IGV4dGVuZHMgQmFzaWNPYmplY3Qge1xuICBjb25zdHJ1Y3RvcihvYmplY3QsIG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdFxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgICB0aGlzLmNoaWxkVmlld3MgPSBbXVxuICAgIHRoaXMucm9vdFZpZXcgPSB0aGlzXG4gIH1cblxuICBnZXROb2RlcygpIHtcbiAgICBpZiAoIXRoaXMubm9kZXMpIHsgdGhpcy5ub2RlcyA9IHRoaXMuY3JlYXRlTm9kZXMoKSB9XG4gICAgcmV0dXJuIHRoaXMubm9kZXMubWFwKChub2RlKSA9PiBub2RlLmNsb25lTm9kZSh0cnVlKSlcbiAgfVxuXG4gIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5ub2RlcyA9IG51bGxcbiAgICB0aGlzLmNoaWxkVmlld3MgPSBbXVxuICAgIHJldHVybiB0aGlzLnBhcmVudFZpZXc/LmludmFsaWRhdGUoKVxuICB9XG5cbiAgaW52YWxpZGF0ZVZpZXdGb3JPYmplY3Qob2JqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZFZpZXdGb3JPYmplY3Qob2JqZWN0KT8uaW52YWxpZGF0ZSgpXG4gIH1cblxuICBmaW5kT3JDcmVhdGVDYWNoZWRDaGlsZFZpZXcodmlld0NsYXNzLCBvYmplY3QsIG9wdGlvbnMpIHtcbiAgICBsZXQgdmlldyA9IHRoaXMuZ2V0Q2FjaGVkVmlld0Zvck9iamVjdChvYmplY3QpXG4gICAgaWYgKHZpZXcpIHtcbiAgICAgIHRoaXMucmVjb3JkQ2hpbGRWaWV3KHZpZXcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHZpZXcgPSB0aGlzLmNyZWF0ZUNoaWxkVmlldyguLi5hcmd1bWVudHMpXG4gICAgICB0aGlzLmNhY2hlVmlld0Zvck9iamVjdCh2aWV3LCBvYmplY3QpXG4gICAgfVxuICAgIHJldHVybiB2aWV3XG4gIH1cblxuICBjcmVhdGVDaGlsZFZpZXcodmlld0NsYXNzLCBvYmplY3QsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBPYmplY3RHcm91cCkge1xuICAgICAgb3B0aW9ucy52aWV3Q2xhc3MgPSB2aWV3Q2xhc3NcbiAgICAgIHZpZXdDbGFzcyA9IE9iamVjdEdyb3VwVmlld1xuICAgIH1cblxuICAgIGNvbnN0IHZpZXcgPSBuZXcgdmlld0NsYXNzKG9iamVjdCwgb3B0aW9ucylcbiAgICByZXR1cm4gdGhpcy5yZWNvcmRDaGlsZFZpZXcodmlldylcbiAgfVxuXG4gIHJlY29yZENoaWxkVmlldyh2aWV3KSB7XG4gICAgdmlldy5wYXJlbnRWaWV3ID0gdGhpc1xuICAgIHZpZXcucm9vdFZpZXcgPSB0aGlzLnJvb3RWaWV3XG4gICAgdGhpcy5jaGlsZFZpZXdzLnB1c2godmlldylcbiAgICByZXR1cm4gdmlld1xuICB9XG5cbiAgZ2V0QWxsQ2hpbGRWaWV3cygpIHtcbiAgICBsZXQgdmlld3MgPSBbXVxuXG4gICAgdGhpcy5jaGlsZFZpZXdzLmZvckVhY2goKGNoaWxkVmlldykgPT4ge1xuICAgICAgdmlld3MucHVzaChjaGlsZFZpZXcpXG4gICAgICB2aWV3cyA9IHZpZXdzLmNvbmNhdChjaGlsZFZpZXcuZ2V0QWxsQ2hpbGRWaWV3cygpKVxuICAgIH0pXG5cbiAgICByZXR1cm4gdmlld3NcbiAgfVxuXG4gIGZpbmRFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmZpbmRFbGVtZW50Rm9yT2JqZWN0KHRoaXMub2JqZWN0KVxuICB9XG5cbiAgZmluZEVsZW1lbnRGb3JPYmplY3Qob2JqZWN0KSB7XG4gICAgY29uc3QgaWQgPSBvYmplY3Q/LmlkXG4gICAgaWYgKGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5yb290Vmlldy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRyaXgtaWQ9JyR7aWR9J11gKVxuICAgIH1cbiAgfVxuXG4gIGZpbmRWaWV3Rm9yT2JqZWN0KG9iamVjdCkge1xuICAgIGZvciAoY29uc3QgdmlldyBvZiB0aGlzLmdldEFsbENoaWxkVmlld3MoKSkge1xuICAgICAgaWYgKHZpZXcub2JqZWN0ID09PSBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXdcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRWaWV3Q2FjaGUoKSB7XG4gICAgaWYgKHRoaXMucm9vdFZpZXcgPT09IHRoaXMpIHtcbiAgICAgIGlmICh0aGlzLmlzVmlld0NhY2hpbmdFbmFibGVkKCkpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpZXdDYWNoZSkgeyB0aGlzLnZpZXdDYWNoZSA9IHt9IH1cbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0NhY2hlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnJvb3RWaWV3LmdldFZpZXdDYWNoZSgpXG4gICAgfVxuICB9XG5cbiAgaXNWaWV3Q2FjaGluZ0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hvdWxkQ2FjaGVWaWV3cyAhPT0gZmFsc2VcbiAgfVxuXG4gIGVuYWJsZVZpZXdDYWNoaW5nKCkge1xuICAgIHRoaXMuc2hvdWxkQ2FjaGVWaWV3cyA9IHRydWVcbiAgfVxuXG4gIGRpc2FibGVWaWV3Q2FjaGluZygpIHtcbiAgICB0aGlzLnNob3VsZENhY2hlVmlld3MgPSBmYWxzZVxuICB9XG5cbiAgZ2V0Q2FjaGVkVmlld0Zvck9iamVjdChvYmplY3QpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRWaWV3Q2FjaGUoKT8uW29iamVjdC5nZXRDYWNoZUtleSgpXVxuICB9XG5cbiAgY2FjaGVWaWV3Rm9yT2JqZWN0KHZpZXcsIG9iamVjdCkge1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5nZXRWaWV3Q2FjaGUoKVxuICAgIGlmIChjYWNoZSkge1xuICAgICAgY2FjaGVbb2JqZWN0LmdldENhY2hlS2V5KCldID0gdmlld1xuICAgIH1cbiAgfVxuXG4gIGdhcmJhZ2VDb2xsZWN0Q2FjaGVkVmlld3MoKSB7XG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLmdldFZpZXdDYWNoZSgpXG4gICAgaWYgKGNhY2hlKSB7XG4gICAgICBjb25zdCB2aWV3cyA9IHRoaXMuZ2V0QWxsQ2hpbGRWaWV3cygpLmNvbmNhdCh0aGlzKVxuICAgICAgY29uc3Qgb2JqZWN0S2V5cyA9IHZpZXdzLm1hcCgodmlldykgPT4gdmlldy5vYmplY3QuZ2V0Q2FjaGVLZXkoKSlcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGNhY2hlKSB7XG4gICAgICAgIGlmICghb2JqZWN0S2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgZGVsZXRlIGNhY2hlW2tleV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgT2JqZWN0R3JvdXBWaWV3IGV4dGVuZHMgT2JqZWN0VmlldyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLm9iamVjdEdyb3VwID0gdGhpcy5vYmplY3RcbiAgICB0aGlzLnZpZXdDbGFzcyA9IHRoaXMub3B0aW9ucy52aWV3Q2xhc3NcbiAgICBkZWxldGUgdGhpcy5vcHRpb25zLnZpZXdDbGFzc1xuICB9XG5cbiAgZ2V0Q2hpbGRWaWV3cygpIHtcbiAgICBpZiAoIXRoaXMuY2hpbGRWaWV3cy5sZW5ndGgpIHtcbiAgICAgIEFycmF5LmZyb20odGhpcy5vYmplY3RHcm91cC5nZXRPYmplY3RzKCkpLmZvckVhY2goKG9iamVjdCkgPT4ge1xuICAgICAgICB0aGlzLmZpbmRPckNyZWF0ZUNhY2hlZENoaWxkVmlldyh0aGlzLnZpZXdDbGFzcywgb2JqZWN0LCB0aGlzLm9wdGlvbnMpXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jaGlsZFZpZXdzXG4gIH1cblxuICBjcmVhdGVOb2RlcygpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5jcmVhdGVDb250YWluZXJFbGVtZW50KClcblxuICAgIHRoaXMuZ2V0Q2hpbGRWaWV3cygpLmZvckVhY2goKHZpZXcpID0+IHtcbiAgICAgIEFycmF5LmZyb20odmlldy5nZXROb2RlcygpKS5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQobm9kZSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHJldHVybiBbIGVsZW1lbnQgXVxuICB9XG5cbiAgY3JlYXRlQ29udGFpbmVyRWxlbWVudChkZXB0aCA9IHRoaXMub2JqZWN0R3JvdXAuZ2V0RGVwdGgoKSkge1xuICAgIHJldHVybiB0aGlzLmdldENoaWxkVmlld3MoKVswXS5jcmVhdGVDb250YWluZXJFbGVtZW50KGRlcHRoKVxuICB9XG59XG4iLCAiaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcblxuaW1wb3J0IHsgbm9kZUlzQXR0YWNobWVudEVsZW1lbnQsIHJlbW92ZU5vZGUsIHRhZ05hbWUsIHdhbGtUcmVlIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcbmltcG9ydCBET01QdXJpZnkgZnJvbSBcImRvbXB1cmlmeVwiXG5pbXBvcnQgKiBhcyBjb25maWcgZnJvbSBcInRyaXgvY29uZmlnXCJcblxuRE9NUHVyaWZ5LmFkZEhvb2soXCJ1cG9uU2FuaXRpemVBdHRyaWJ1dGVcIiwgZnVuY3Rpb24gKG5vZGUsIGRhdGEpIHtcbiAgY29uc3QgYWxsb3dlZEF0dHJpYnV0ZVBhdHRlcm4gPSAvXmRhdGEtdHJpeC0vXG4gIGlmIChhbGxvd2VkQXR0cmlidXRlUGF0dGVybi50ZXN0KGRhdGEuYXR0ck5hbWUpKSB7XG4gICAgZGF0YS5mb3JjZUtlZXBBdHRyID0gdHJ1ZVxuICB9XG59KVxuXG5jb25zdCBERUZBVUxUX0FMTE9XRURfQVRUUklCVVRFUyA9IFwic3R5bGUgaHJlZiBzcmMgd2lkdGggaGVpZ2h0IGxhbmd1YWdlIGNsYXNzXCIuc3BsaXQoXCIgXCIpXG5jb25zdCBERUZBVUxUX0ZPUkJJRERFTl9QUk9UT0NPTFMgPSBcImphdmFzY3JpcHQ6XCIuc3BsaXQoXCIgXCIpXG5jb25zdCBERUZBVUxUX0ZPUkJJRERFTl9FTEVNRU5UUyA9IFwic2NyaXB0IGlmcmFtZSBmb3JtIG5vc2NyaXB0XCIuc3BsaXQoXCIgXCIpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhUTUxTYW5pdGl6ZXIgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIHN0YXRpYyBzZXRIVE1MKGVsZW1lbnQsIGh0bWwpIHtcbiAgICBjb25zdCBzYW5pdGl6ZWRFbGVtZW50ID0gbmV3IHRoaXMoaHRtbCkuc2FuaXRpemUoKVxuICAgIGNvbnN0IHNhbml0aXplZEh0bWwgPSBzYW5pdGl6ZWRFbGVtZW50LmdldEhUTUwgPyBzYW5pdGl6ZWRFbGVtZW50LmdldEhUTUwoKSA6IHNhbml0aXplZEVsZW1lbnQub3V0ZXJIVE1MXG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSBzYW5pdGl6ZWRIdG1sXG4gIH1cblxuICBzdGF0aWMgc2FuaXRpemUoaHRtbCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHNhbml0aXplciA9IG5ldyB0aGlzKGh0bWwsIG9wdGlvbnMpXG4gICAgc2FuaXRpemVyLnNhbml0aXplKClcbiAgICByZXR1cm4gc2FuaXRpemVyXG4gIH1cblxuICBjb25zdHJ1Y3RvcihodG1sLCB7IGFsbG93ZWRBdHRyaWJ1dGVzLCBmb3JiaWRkZW5Qcm90b2NvbHMsIGZvcmJpZGRlbkVsZW1lbnRzIH0gPSB7fSkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLmFsbG93ZWRBdHRyaWJ1dGVzID0gYWxsb3dlZEF0dHJpYnV0ZXMgfHwgREVGQVVMVF9BTExPV0VEX0FUVFJJQlVURVNcbiAgICB0aGlzLmZvcmJpZGRlblByb3RvY29scyA9IGZvcmJpZGRlblByb3RvY29scyB8fCBERUZBVUxUX0ZPUkJJRERFTl9QUk9UT0NPTFNcbiAgICB0aGlzLmZvcmJpZGRlbkVsZW1lbnRzID0gZm9yYmlkZGVuRWxlbWVudHMgfHwgREVGQVVMVF9GT1JCSURERU5fRUxFTUVOVFNcbiAgICB0aGlzLmJvZHkgPSBjcmVhdGVCb2R5RWxlbWVudEZvckhUTUwoaHRtbClcbiAgfVxuXG4gIHNhbml0aXplKCkge1xuICAgIHRoaXMuc2FuaXRpemVFbGVtZW50cygpXG4gICAgdGhpcy5ub3JtYWxpemVMaXN0RWxlbWVudE5lc3RpbmcoKVxuICAgIERPTVB1cmlmeS5zZXRDb25maWcoY29uZmlnLmRvbXB1cmlmeSlcbiAgICB0aGlzLmJvZHkgPSBET01QdXJpZnkuc2FuaXRpemUodGhpcy5ib2R5KVxuXG4gICAgcmV0dXJuIHRoaXMuYm9keVxuICB9XG5cbiAgZ2V0SFRNTCgpIHtcbiAgICByZXR1cm4gdGhpcy5ib2R5LmlubmVySFRNTFxuICB9XG5cbiAgZ2V0Qm9keSgpIHtcbiAgICByZXR1cm4gdGhpcy5ib2R5XG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgc2FuaXRpemVFbGVtZW50cygpIHtcbiAgICBjb25zdCB3YWxrZXIgPSB3YWxrVHJlZSh0aGlzLmJvZHkpXG4gICAgY29uc3Qgbm9kZXNUb1JlbW92ZSA9IFtdXG5cbiAgICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB3YWxrZXIuY3VycmVudE5vZGVcbiAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFOlxuICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRJc1JlbW92YWJsZShub2RlKSkge1xuICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2FuaXRpemVFbGVtZW50KG5vZGUpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgTm9kZS5DT01NRU5UX05PREU6XG4gICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBub2Rlc1RvUmVtb3ZlLmZvckVhY2goKG5vZGUpID0+IHJlbW92ZU5vZGUobm9kZSkpXG5cbiAgICByZXR1cm4gdGhpcy5ib2R5XG4gIH1cblxuICBzYW5pdGl6ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGlmICh0aGlzLmZvcmJpZGRlblByb3RvY29scy5pbmNsdWRlcyhlbGVtZW50LnByb3RvY29sKSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImhyZWZcIilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBBcnJheS5mcm9tKGVsZW1lbnQuYXR0cmlidXRlcykuZm9yRWFjaCgoeyBuYW1lIH0pID0+IHtcbiAgICAgIGlmICghdGhpcy5hbGxvd2VkQXR0cmlidXRlcy5pbmNsdWRlcyhuYW1lKSAmJiBuYW1lLmluZGV4T2YoXCJkYXRhLXRyaXhcIikgIT09IDApIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIGVsZW1lbnRcbiAgfVxuXG4gIG5vcm1hbGl6ZUxpc3RFbGVtZW50TmVzdGluZygpIHtcbiAgICBBcnJheS5mcm9tKHRoaXMuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwidWwsb2xcIikpLmZvckVhY2goKGxpc3RFbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBwcmV2aW91c0VsZW1lbnQgPSBsaXN0RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXG4gICAgICBpZiAocHJldmlvdXNFbGVtZW50KSB7XG4gICAgICAgIGlmICh0YWdOYW1lKHByZXZpb3VzRWxlbWVudCkgPT09IFwibGlcIikge1xuICAgICAgICAgIHByZXZpb3VzRWxlbWVudC5hcHBlbmRDaGlsZChsaXN0RWxlbWVudClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gdGhpcy5ib2R5XG4gIH1cblxuICBlbGVtZW50SXNSZW1vdmFibGUoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50Py5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHJldHVyblxuICAgIHJldHVybiB0aGlzLmVsZW1lbnRJc0ZvcmJpZGRlbihlbGVtZW50KSB8fCB0aGlzLmVsZW1lbnRJc250U2VyaWFsaXphYmxlKGVsZW1lbnQpXG4gIH1cblxuICBlbGVtZW50SXNGb3JiaWRkZW4oZWxlbWVudCkge1xuICAgIHJldHVybiB0aGlzLmZvcmJpZGRlbkVsZW1lbnRzLmluY2x1ZGVzKHRhZ05hbWUoZWxlbWVudCkpXG4gIH1cblxuICBlbGVtZW50SXNudFNlcmlhbGl6YWJsZShlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10cml4LXNlcmlhbGl6ZVwiKSA9PT0gXCJmYWxzZVwiICYmICFub2RlSXNBdHRhY2htZW50RWxlbWVudChlbGVtZW50KVxuICB9XG59XG5cbmNvbnN0IGNyZWF0ZUJvZHlFbGVtZW50Rm9ySFRNTCA9IGZ1bmN0aW9uKGh0bWwgPSBcIlwiKSB7XG4gIC8vIFJlbW92ZSBldmVyeXRoaW5nIGFmdGVyIDwvaHRtbD5cbiAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPFxcL2h0bWxbXj5dKj5bXl0qJC9pLCBcIjwvaHRtbD5cIilcbiAgY29uc3QgZG9jID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpXG4gIGRvYy5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbFxuXG4gIEFycmF5LmZyb20oZG9jLmhlYWQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlXCIpKS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudClcbiAgfSlcblxuICByZXR1cm4gZG9jLmJvZHlcbn1cbiIsICJpbXBvcnQgKiBhcyBjb25maWcgZnJvbSBcInRyaXgvY29uZmlnXCJcbmltcG9ydCB7IFpFUk9fV0lEVEhfU1BBQ0UgfSBmcm9tIFwidHJpeC9jb25zdGFudHNcIlxuaW1wb3J0IHsgY29weU9iamVjdCwgbWFrZUVsZW1lbnQgfSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuaW1wb3J0IE9iamVjdFZpZXcgZnJvbSBcInRyaXgvdmlld3Mvb2JqZWN0X3ZpZXdcIlxuaW1wb3J0IEhUTUxTYW5pdGl6ZXIgZnJvbSBcInRyaXgvbW9kZWxzL2h0bWxfc2FuaXRpemVyXCJcblxuY29uc3QgeyBjc3MgfSA9IGNvbmZpZ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdHRhY2htZW50VmlldyBleHRlbmRzIE9iamVjdFZpZXcge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5hdHRhY2htZW50ID0gdGhpcy5vYmplY3RcbiAgICB0aGlzLmF0dGFjaG1lbnQudXBsb2FkUHJvZ3Jlc3NEZWxlZ2F0ZSA9IHRoaXNcbiAgICB0aGlzLmF0dGFjaG1lbnRQaWVjZSA9IHRoaXMub3B0aW9ucy5waWVjZVxuICB9XG5cbiAgY3JlYXRlQ29udGVudE5vZGVzKCkge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgY3JlYXRlTm9kZXMoKSB7XG4gICAgbGV0IGlubmVyRWxlbWVudFxuICAgIGNvbnN0IGZpZ3VyZSA9IGlubmVyRWxlbWVudCA9IG1ha2VFbGVtZW50KHtcbiAgICAgIHRhZ05hbWU6IFwiZmlndXJlXCIsXG4gICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0Q2xhc3NOYW1lKCksXG4gICAgICBkYXRhOiB0aGlzLmdldERhdGEoKSxcbiAgICAgIGVkaXRhYmxlOiBmYWxzZSxcbiAgICB9KVxuXG4gICAgY29uc3QgaHJlZiA9IHRoaXMuZ2V0SHJlZigpXG4gICAgaWYgKGhyZWYpIHtcbiAgICAgIGlubmVyRWxlbWVudCA9IG1ha2VFbGVtZW50KHsgdGFnTmFtZTogXCJhXCIsIGVkaXRhYmxlOiBmYWxzZSwgYXR0cmlidXRlczogeyBocmVmLCB0YWJpbmRleDogLTEgfSB9KVxuICAgICAgZmlndXJlLmFwcGVuZENoaWxkKGlubmVyRWxlbWVudClcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hdHRhY2htZW50Lmhhc0NvbnRlbnQoKSkge1xuICAgICAgSFRNTFNhbml0aXplci5zZXRIVE1MKGlubmVyRWxlbWVudCwgdGhpcy5hdHRhY2htZW50LmdldENvbnRlbnQoKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jcmVhdGVDb250ZW50Tm9kZXMoKS5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIGlubmVyRWxlbWVudC5hcHBlbmRDaGlsZChub2RlKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpbm5lckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVDYXB0aW9uRWxlbWVudCgpKVxuXG4gICAgaWYgKHRoaXMuYXR0YWNobWVudC5pc1BlbmRpbmcoKSkge1xuICAgICAgdGhpcy5wcm9ncmVzc0VsZW1lbnQgPSBtYWtlRWxlbWVudCh7XG4gICAgICAgIHRhZ05hbWU6IFwicHJvZ3Jlc3NcIixcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGNsYXNzOiBjc3MuYXR0YWNobWVudFByb2dyZXNzLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLmF0dGFjaG1lbnQuZ2V0VXBsb2FkUHJvZ3Jlc3MoKSxcbiAgICAgICAgICBtYXg6IDEwMCxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHRyaXhNdXRhYmxlOiB0cnVlLFxuICAgICAgICAgIHRyaXhTdG9yZUtleTogWyBcInByb2dyZXNzRWxlbWVudFwiLCB0aGlzLmF0dGFjaG1lbnQuaWQgXS5qb2luKFwiL1wiKSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIGZpZ3VyZS5hcHBlbmRDaGlsZCh0aGlzLnByb2dyZXNzRWxlbWVudClcbiAgICB9XG5cbiAgICByZXR1cm4gWyBjcmVhdGVDdXJzb3JUYXJnZXQoXCJsZWZ0XCIpLCBmaWd1cmUsIGNyZWF0ZUN1cnNvclRhcmdldChcInJpZ2h0XCIpIF1cbiAgfVxuXG4gIGNyZWF0ZUNhcHRpb25FbGVtZW50KCkge1xuICAgIGNvbnN0IGZpZ2NhcHRpb24gPSBtYWtlRWxlbWVudCh7IHRhZ05hbWU6IFwiZmlnY2FwdGlvblwiLCBjbGFzc05hbWU6IGNzcy5hdHRhY2htZW50Q2FwdGlvbiB9KVxuICAgIGNvbnN0IGNhcHRpb24gPSB0aGlzLmF0dGFjaG1lbnRQaWVjZS5nZXRDYXB0aW9uKClcbiAgICBpZiAoY2FwdGlvbikge1xuICAgICAgZmlnY2FwdGlvbi5jbGFzc0xpc3QuYWRkKGAke2Nzcy5hdHRhY2htZW50Q2FwdGlvbn0tLWVkaXRlZGApXG4gICAgICBmaWdjYXB0aW9uLnRleHRDb250ZW50ID0gY2FwdGlvblxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbmFtZSwgc2l6ZVxuICAgICAgY29uc3QgY2FwdGlvbkNvbmZpZyA9IHRoaXMuZ2V0Q2FwdGlvbkNvbmZpZygpXG4gICAgICBpZiAoY2FwdGlvbkNvbmZpZy5uYW1lKSB7XG4gICAgICAgIG5hbWUgPSB0aGlzLmF0dGFjaG1lbnQuZ2V0RmlsZW5hbWUoKVxuICAgICAgfVxuICAgICAgaWYgKGNhcHRpb25Db25maWcuc2l6ZSkge1xuICAgICAgICBzaXplID0gdGhpcy5hdHRhY2htZW50LmdldEZvcm1hdHRlZEZpbGVzaXplKClcbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgY29uc3QgbmFtZUVsZW1lbnQgPSBtYWtlRWxlbWVudCh7IHRhZ05hbWU6IFwic3BhblwiLCBjbGFzc05hbWU6IGNzcy5hdHRhY2htZW50TmFtZSwgdGV4dENvbnRlbnQ6IG5hbWUgfSlcbiAgICAgICAgZmlnY2FwdGlvbi5hcHBlbmRDaGlsZChuYW1lRWxlbWVudClcbiAgICAgIH1cblxuICAgICAgaWYgKHNpemUpIHtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICBmaWdjYXB0aW9uLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiIFwiKSlcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaXplRWxlbWVudCA9IG1ha2VFbGVtZW50KHsgdGFnTmFtZTogXCJzcGFuXCIsIGNsYXNzTmFtZTogY3NzLmF0dGFjaG1lbnRTaXplLCB0ZXh0Q29udGVudDogc2l6ZSB9KVxuICAgICAgICBmaWdjYXB0aW9uLmFwcGVuZENoaWxkKHNpemVFbGVtZW50KVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWdjYXB0aW9uXG4gIH1cblxuICBnZXRDbGFzc05hbWUoKSB7XG4gICAgY29uc3QgbmFtZXMgPSBbIGNzcy5hdHRhY2htZW50LCBgJHtjc3MuYXR0YWNobWVudH0tLSR7dGhpcy5hdHRhY2htZW50LmdldFR5cGUoKX1gIF1cbiAgICBjb25zdCBleHRlbnNpb24gPSB0aGlzLmF0dGFjaG1lbnQuZ2V0RXh0ZW5zaW9uKClcbiAgICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgICBuYW1lcy5wdXNoKGAke2Nzcy5hdHRhY2htZW50fS0tJHtleHRlbnNpb259YClcbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzLmpvaW4oXCIgXCIpXG4gIH1cblxuICBnZXREYXRhKCkge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICB0cml4QXR0YWNobWVudDogSlNPTi5zdHJpbmdpZnkodGhpcy5hdHRhY2htZW50KSxcbiAgICAgIHRyaXhDb250ZW50VHlwZTogdGhpcy5hdHRhY2htZW50LmdldENvbnRlbnRUeXBlKCksXG4gICAgICB0cml4SWQ6IHRoaXMuYXR0YWNobWVudC5pZCxcbiAgICB9XG5cbiAgICBjb25zdCB7IGF0dHJpYnV0ZXMgfSA9IHRoaXMuYXR0YWNobWVudFBpZWNlXG4gICAgaWYgKCFhdHRyaWJ1dGVzLmlzRW1wdHkoKSkge1xuICAgICAgZGF0YS50cml4QXR0cmlidXRlcyA9IEpTT04uc3RyaW5naWZ5KGF0dHJpYnV0ZXMpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXR0YWNobWVudC5pc1BlbmRpbmcoKSkge1xuICAgICAgZGF0YS50cml4U2VyaWFsaXplID0gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgZ2V0SHJlZigpIHtcbiAgICBpZiAoIWh0bWxDb250YWluc1RhZ05hbWUodGhpcy5hdHRhY2htZW50LmdldENvbnRlbnQoKSwgXCJhXCIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRhY2htZW50LmdldEhyZWYoKVxuICAgIH1cbiAgfVxuXG4gIGdldENhcHRpb25Db25maWcoKSB7XG4gICAgY29uc3QgdHlwZSA9IHRoaXMuYXR0YWNobWVudC5nZXRUeXBlKClcbiAgICBjb25zdCBjYXB0aW9uQ29uZmlnID0gY29weU9iamVjdChjb25maWcuYXR0YWNobWVudHNbdHlwZV0/LmNhcHRpb24pXG4gICAgaWYgKHR5cGUgPT09IFwiZmlsZVwiKSB7XG4gICAgICBjYXB0aW9uQ29uZmlnLm5hbWUgPSB0cnVlXG4gICAgfVxuICAgIHJldHVybiBjYXB0aW9uQ29uZmlnXG4gIH1cblxuICBmaW5kUHJvZ3Jlc3NFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmZpbmRFbGVtZW50KCk/LnF1ZXJ5U2VsZWN0b3IoXCJwcm9ncmVzc1wiKVxuICB9XG5cbiAgLy8gQXR0YWNobWVudCBkZWxlZ2F0ZVxuXG4gIGF0dGFjaG1lbnREaWRDaGFuZ2VVcGxvYWRQcm9ncmVzcygpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuYXR0YWNobWVudC5nZXRVcGxvYWRQcm9ncmVzcygpXG4gICAgY29uc3QgcHJvZ3Jlc3NFbGVtZW50ID0gdGhpcy5maW5kUHJvZ3Jlc3NFbGVtZW50KClcbiAgICBpZiAocHJvZ3Jlc3NFbGVtZW50KSB7XG4gICAgICBwcm9ncmVzc0VsZW1lbnQudmFsdWUgPSB2YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBjcmVhdGVDdXJzb3JUYXJnZXQgPSAobmFtZSkgPT5cbiAgbWFrZUVsZW1lbnQoe1xuICAgIHRhZ05hbWU6IFwic3BhblwiLFxuICAgIHRleHRDb250ZW50OiBaRVJPX1dJRFRIX1NQQUNFLFxuICAgIGRhdGE6IHtcbiAgICAgIHRyaXhDdXJzb3JUYXJnZXQ6IG5hbWUsXG4gICAgICB0cml4U2VyaWFsaXplOiBmYWxzZSxcbiAgICB9LFxuICB9KVxuXG5jb25zdCBodG1sQ29udGFpbnNUYWdOYW1lID0gZnVuY3Rpb24oaHRtbCwgdGFnTmFtZSkge1xuICBjb25zdCBkaXYgPSBtYWtlRWxlbWVudChcImRpdlwiKVxuICBIVE1MU2FuaXRpemVyLnNldEhUTUwoZGl2LCBodG1sIHx8IFwiXCIpXG4gIHJldHVybiBkaXYucXVlcnlTZWxlY3Rvcih0YWdOYW1lKVxufVxuIiwgImltcG9ydCAqIGFzIGNvbmZpZyBmcm9tIFwidHJpeC9jb25maWdcIlxuaW1wb3J0IHsgbWFrZUVsZW1lbnQgfSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5pbXBvcnQgQXR0YWNobWVudFZpZXcgZnJvbSBcInRyaXgvdmlld3MvYXR0YWNobWVudF92aWV3XCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJldmlld2FibGVBdHRhY2htZW50VmlldyBleHRlbmRzIEF0dGFjaG1lbnRWaWV3IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMuYXR0YWNobWVudC5wcmV2aWV3RGVsZWdhdGUgPSB0aGlzXG4gIH1cblxuICBjcmVhdGVDb250ZW50Tm9kZXMoKSB7XG4gICAgdGhpcy5pbWFnZSA9IG1ha2VFbGVtZW50KHtcbiAgICAgIHRhZ05hbWU6IFwiaW1nXCIsXG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIHNyYzogXCJcIixcbiAgICAgIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHRyaXhNdXRhYmxlOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgdGhpcy5yZWZyZXNoKHRoaXMuaW1hZ2UpXG4gICAgcmV0dXJuIFsgdGhpcy5pbWFnZSBdXG4gIH1cblxuICBjcmVhdGVDYXB0aW9uRWxlbWVudCgpIHtcbiAgICBjb25zdCBmaWdjYXB0aW9uID0gc3VwZXIuY3JlYXRlQ2FwdGlvbkVsZW1lbnQoLi4uYXJndW1lbnRzKVxuICAgIGlmICghZmlnY2FwdGlvbi50ZXh0Q29udGVudCkge1xuICAgICAgZmlnY2FwdGlvbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRyaXgtcGxhY2Vob2xkZXJcIiwgY29uZmlnLmxhbmcuY2FwdGlvblBsYWNlaG9sZGVyKVxuICAgIH1cbiAgICByZXR1cm4gZmlnY2FwdGlvblxuICB9XG5cbiAgcmVmcmVzaChpbWFnZSkge1xuICAgIGlmICghaW1hZ2UpIHsgaW1hZ2UgPSB0aGlzLmZpbmRFbGVtZW50KCk/LnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIikgfVxuICAgIGlmIChpbWFnZSkge1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlQXR0cmlidXRlc0ZvckltYWdlKGltYWdlKVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUF0dHJpYnV0ZXNGb3JJbWFnZShpbWFnZSkge1xuICAgIGNvbnN0IHVybCA9IHRoaXMuYXR0YWNobWVudC5nZXRVUkwoKVxuICAgIGNvbnN0IHByZXZpZXdVUkwgPSB0aGlzLmF0dGFjaG1lbnQuZ2V0UHJldmlld1VSTCgpXG4gICAgaW1hZ2Uuc3JjID0gcHJldmlld1VSTCB8fCB1cmxcblxuICAgIGlmIChwcmV2aWV3VVJMID09PSB1cmwpIHtcbiAgICAgIGltYWdlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtdHJpeC1zZXJpYWxpemVkLWF0dHJpYnV0ZXNcIilcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2VyaWFsaXplZEF0dHJpYnV0ZXMgPSBKU09OLnN0cmluZ2lmeSh7IHNyYzogdXJsIH0pXG4gICAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRyaXgtc2VyaWFsaXplZC1hdHRyaWJ1dGVzXCIsIHNlcmlhbGl6ZWRBdHRyaWJ1dGVzKVxuICAgIH1cblxuICAgIGNvbnN0IHdpZHRoID0gdGhpcy5hdHRhY2htZW50LmdldFdpZHRoKClcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmF0dGFjaG1lbnQuZ2V0SGVpZ2h0KClcblxuICAgIGlmICh3aWR0aCAhPSBudWxsKSB7XG4gICAgICBpbWFnZS53aWR0aCA9IHdpZHRoXG4gICAgfVxuICAgIGlmIChoZWlnaHQgIT0gbnVsbCkge1xuICAgICAgaW1hZ2UuaGVpZ2h0ID0gaGVpZ2h0XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmVLZXkgPSBbIFwiaW1hZ2VFbGVtZW50XCIsIHRoaXMuYXR0YWNobWVudC5pZCwgaW1hZ2Uuc3JjLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0IF0uam9pbihcIi9cIilcbiAgICBpbWFnZS5kYXRhc2V0LnRyaXhTdG9yZUtleSA9IHN0b3JlS2V5XG4gIH1cblxuICAvLyBBdHRhY2htZW50IGRlbGVnYXRlXG5cbiAgYXR0YWNobWVudERpZENoYW5nZUF0dHJpYnV0ZXMoKSB7XG4gICAgdGhpcy5yZWZyZXNoKHRoaXMuaW1hZ2UpXG4gICAgcmV0dXJuIHRoaXMucmVmcmVzaCgpXG4gIH1cbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZVxuICAgIG5vLXVzZWxlc3MtZXNjYXBlLFxuICAgIG5vLXZhcixcbiovXG5pbXBvcnQgeyBOT05fQlJFQUtJTkdfU1BBQ0UgfSBmcm9tIFwidHJpeC9jb25zdGFudHNcIlxuXG5pbXBvcnQgT2JqZWN0VmlldyBmcm9tIFwidHJpeC92aWV3cy9vYmplY3Rfdmlld1wiXG5pbXBvcnQgQXR0YWNobWVudFZpZXcgZnJvbSBcInRyaXgvdmlld3MvYXR0YWNobWVudF92aWV3XCJcbmltcG9ydCBQcmV2aWV3YWJsZUF0dGFjaG1lbnRWaWV3IGZyb20gXCJ0cml4L3ZpZXdzL3ByZXZpZXdhYmxlX2F0dGFjaG1lbnRfdmlld1wiXG5cbmltcG9ydCB7IGZpbmRJbm5lckVsZW1lbnQsIGdldFRleHRDb25maWcsIG1ha2VFbGVtZW50IH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGllY2VWaWV3IGV4dGVuZHMgT2JqZWN0VmlldyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLnBpZWNlID0gdGhpcy5vYmplY3RcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB0aGlzLnBpZWNlLmdldEF0dHJpYnV0ZXMoKVxuICAgIHRoaXMudGV4dENvbmZpZyA9IHRoaXMub3B0aW9ucy50ZXh0Q29uZmlnXG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5vcHRpb25zLmNvbnRleHRcblxuICAgIGlmICh0aGlzLnBpZWNlLmF0dGFjaG1lbnQpIHtcbiAgICAgIHRoaXMuYXR0YWNobWVudCA9IHRoaXMucGllY2UuYXR0YWNobWVudFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0cmluZyA9IHRoaXMucGllY2UudG9TdHJpbmcoKVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZU5vZGVzKCkge1xuICAgIGxldCBub2RlcyA9IHRoaXMuYXR0YWNobWVudCA/IHRoaXMuY3JlYXRlQXR0YWNobWVudE5vZGVzKCkgOiB0aGlzLmNyZWF0ZVN0cmluZ05vZGVzKClcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5jcmVhdGVFbGVtZW50KClcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgY29uc3QgaW5uZXJFbGVtZW50ID0gZmluZElubmVyRWxlbWVudChlbGVtZW50KVxuICAgICAgQXJyYXkuZnJvbShub2RlcykuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICBpbm5lckVsZW1lbnQuYXBwZW5kQ2hpbGQobm9kZSlcbiAgICAgIH0pXG4gICAgICBub2RlcyA9IFsgZWxlbWVudCBdXG4gICAgfVxuICAgIHJldHVybiBub2Rlc1xuICB9XG5cbiAgY3JlYXRlQXR0YWNobWVudE5vZGVzKCkge1xuICAgIGNvbnN0IGNvbnN0cnVjdG9yID0gdGhpcy5hdHRhY2htZW50LmlzUHJldmlld2FibGUoKSA/IFByZXZpZXdhYmxlQXR0YWNobWVudFZpZXcgOiBBdHRhY2htZW50Vmlld1xuXG4gICAgY29uc3QgdmlldyA9IHRoaXMuY3JlYXRlQ2hpbGRWaWV3KGNvbnN0cnVjdG9yLCB0aGlzLnBpZWNlLmF0dGFjaG1lbnQsIHsgcGllY2U6IHRoaXMucGllY2UgfSlcbiAgICByZXR1cm4gdmlldy5nZXROb2RlcygpXG4gIH1cblxuICBjcmVhdGVTdHJpbmdOb2RlcygpIHtcbiAgICBpZiAodGhpcy50ZXh0Q29uZmlnPy5wbGFpbnRleHQpIHtcbiAgICAgIHJldHVybiBbIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuc3RyaW5nKSBdXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5vZGVzID0gW11cbiAgICAgIGNvbnN0IGl0ZXJhYmxlID0gdGhpcy5zdHJpbmcuc3BsaXQoXCJcXG5cIilcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBpdGVyYWJsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29uc3Qgc3Vic3RyaW5nID0gaXRlcmFibGVbaW5kZXhdXG4gICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICBjb25zdCBlbGVtZW50ID0gbWFrZUVsZW1lbnQoXCJiclwiKVxuICAgICAgICAgIG5vZGVzLnB1c2goZWxlbWVudClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdWJzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMucHJlc2VydmVTcGFjZXMoc3Vic3RyaW5nKSlcbiAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBub2Rlc1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUVsZW1lbnQoKSB7XG4gICAgbGV0IGVsZW1lbnQsIGtleSwgdmFsdWVcbiAgICBjb25zdCBzdHlsZXMgPSB7fVxuXG4gICAgZm9yIChrZXkgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuYXR0cmlidXRlc1trZXldXG4gICAgICBjb25zdCBjb25maWcgPSBnZXRUZXh0Q29uZmlnKGtleSlcbiAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy50YWdOYW1lKSB7XG4gICAgICAgICAgdmFyIGlubmVyRWxlbWVudFxuICAgICAgICAgIGNvbnN0IHBlbmRpbmdFbGVtZW50ID0gbWFrZUVsZW1lbnQoY29uZmlnLnRhZ05hbWUpXG5cbiAgICAgICAgICBpZiAoaW5uZXJFbGVtZW50KSB7XG4gICAgICAgICAgICBpbm5lckVsZW1lbnQuYXBwZW5kQ2hpbGQocGVuZGluZ0VsZW1lbnQpXG4gICAgICAgICAgICBpbm5lckVsZW1lbnQgPSBwZW5kaW5nRWxlbWVudFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gaW5uZXJFbGVtZW50ID0gcGVuZGluZ0VsZW1lbnRcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLnN0eWxlUHJvcGVydHkpIHtcbiAgICAgICAgICBzdHlsZXNbY29uZmlnLnN0eWxlUHJvcGVydHldID0gdmFsdWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuc3R5bGUpIHtcbiAgICAgICAgICBmb3IgKGtleSBpbiBjb25maWcuc3R5bGUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29uZmlnLnN0eWxlW2tleV1cbiAgICAgICAgICAgIHN0eWxlc1trZXldID0gdmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoc3R5bGVzKS5sZW5ndGgpIHtcbiAgICAgIGlmICghZWxlbWVudCkgeyBlbGVtZW50ID0gbWFrZUVsZW1lbnQoXCJzcGFuXCIpIH1cbiAgICAgIGZvciAoa2V5IGluIHN0eWxlcykge1xuICAgICAgICB2YWx1ZSA9IHN0eWxlc1trZXldXG4gICAgICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50XG4gIH1cblxuICBjcmVhdGVDb250YWluZXJFbGVtZW50KCkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmF0dHJpYnV0ZXNba2V5XVxuICAgICAgY29uc3QgY29uZmlnID0gZ2V0VGV4dENvbmZpZyhrZXkpXG4gICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcuZ3JvdXBUYWdOYW1lKSB7XG4gICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHt9XG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gdmFsdWVcbiAgICAgICAgICByZXR1cm4gbWFrZUVsZW1lbnQoY29uZmlnLmdyb3VwVGFnTmFtZSwgYXR0cmlidXRlcylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByZXNlcnZlU3BhY2VzKHN0cmluZykge1xuICAgIGlmICh0aGlzLmNvbnRleHQuaXNMYXN0KSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXFwgJC8sIE5PTl9CUkVBS0lOR19TUEFDRSlcbiAgICB9XG5cbiAgICBzdHJpbmcgPSBzdHJpbmdcbiAgICAgIC5yZXBsYWNlKC8oXFxTKVxcIHszfShcXFMpL2csIGAkMSAke05PTl9CUkVBS0lOR19TUEFDRX0gJDJgKVxuICAgICAgLnJlcGxhY2UoL1xcIHsyfS9nLCBgJHtOT05fQlJFQUtJTkdfU1BBQ0V9IGApXG4gICAgICAucmVwbGFjZSgvXFwgezJ9L2csIGAgJHtOT05fQlJFQUtJTkdfU1BBQ0V9YClcblxuICAgIGlmICh0aGlzLmNvbnRleHQuaXNGaXJzdCB8fCB0aGlzLmNvbnRleHQuZm9sbG93c1doaXRlc3BhY2UpIHtcbiAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9eXFwgLywgTk9OX0JSRUFLSU5HX1NQQUNFKVxuICAgIH1cblxuICAgIHJldHVybiBzdHJpbmdcbiAgfVxufVxuIiwgIi8qIGVzbGludC1kaXNhYmxlXG4gICAgbm8tdmFyLFxuKi9cbmltcG9ydCBPYmplY3RWaWV3IGZyb20gXCJ0cml4L3ZpZXdzL29iamVjdF92aWV3XCJcbmltcG9ydCBPYmplY3RHcm91cCBmcm9tIFwidHJpeC9jb3JlL2NvbGxlY3Rpb25zL29iamVjdF9ncm91cFwiXG5pbXBvcnQgUGllY2VWaWV3IGZyb20gXCJ0cml4L3ZpZXdzL3BpZWNlX3ZpZXdcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0VmlldyBleHRlbmRzIE9iamVjdFZpZXcge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy50ZXh0ID0gdGhpcy5vYmplY3RcbiAgICB0aGlzLnRleHRDb25maWcgPSB0aGlzLm9wdGlvbnMudGV4dENvbmZpZ1xuICB9XG5cbiAgY3JlYXRlTm9kZXMoKSB7XG4gICAgY29uc3Qgbm9kZXMgPSBbXVxuICAgIGNvbnN0IHBpZWNlcyA9IE9iamVjdEdyb3VwLmdyb3VwT2JqZWN0cyh0aGlzLmdldFBpZWNlcygpKVxuICAgIGNvbnN0IGxhc3RJbmRleCA9IHBpZWNlcy5sZW5ndGggLSAxXG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcGllY2VzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgcGllY2UgPSBwaWVjZXNbaW5kZXhdXG4gICAgICBjb25zdCBjb250ZXh0ID0ge31cbiAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICBjb250ZXh0LmlzRmlyc3QgPSB0cnVlXG4gICAgICB9XG4gICAgICBpZiAoaW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgICBjb250ZXh0LmlzTGFzdCA9IHRydWVcbiAgICAgIH1cbiAgICAgIGlmIChlbmRzV2l0aFdoaXRlc3BhY2UocHJldmlvdXNQaWVjZSkpIHtcbiAgICAgICAgY29udGV4dC5mb2xsb3dzV2hpdGVzcGFjZSA9IHRydWVcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmlldyA9IHRoaXMuZmluZE9yQ3JlYXRlQ2FjaGVkQ2hpbGRWaWV3KFBpZWNlVmlldywgcGllY2UsIHsgdGV4dENvbmZpZzogdGhpcy50ZXh0Q29uZmlnLCBjb250ZXh0IH0pXG4gICAgICBub2Rlcy5wdXNoKC4uLkFycmF5LmZyb20odmlldy5nZXROb2RlcygpIHx8IFtdKSlcblxuICAgICAgdmFyIHByZXZpb3VzUGllY2UgPSBwaWVjZVxuICAgIH1cbiAgICByZXR1cm4gbm9kZXNcbiAgfVxuXG4gIGdldFBpZWNlcygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnRleHQuZ2V0UGllY2VzKCkpLmZpbHRlcigocGllY2UpID0+ICFwaWVjZS5oYXNBdHRyaWJ1dGUoXCJibG9ja0JyZWFrXCIpKVxuICB9XG59XG5cbmNvbnN0IGVuZHNXaXRoV2hpdGVzcGFjZSA9IChwaWVjZSkgPT4gL1xccyQvLnRlc3QocGllY2U/LnRvU3RyaW5nKCkpXG4iLCAiaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5pbXBvcnQgT2JqZWN0VmlldyBmcm9tIFwidHJpeC92aWV3cy9vYmplY3Rfdmlld1wiXG5pbXBvcnQgVGV4dFZpZXcgZnJvbSBcInRyaXgvdmlld3MvdGV4dF92aWV3XCJcblxuaW1wb3J0IHsgZ2V0QmxvY2tDb25maWcsIG1ha2VFbGVtZW50IH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcbmNvbnN0IHsgY3NzIH0gPSBjb25maWdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmxvY2tWaWV3IGV4dGVuZHMgT2JqZWN0VmlldyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLmJsb2NrID0gdGhpcy5vYmplY3RcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB0aGlzLmJsb2NrLmdldEF0dHJpYnV0ZXMoKVxuICB9XG5cbiAgY3JlYXRlTm9kZXMoKSB7XG4gICAgY29uc3QgY29tbWVudCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJibG9ja1wiKVxuICAgIGNvbnN0IG5vZGVzID0gWyBjb21tZW50IF1cbiAgICBpZiAodGhpcy5ibG9jay5pc0VtcHR5KCkpIHtcbiAgICAgIG5vZGVzLnB1c2gobWFrZUVsZW1lbnQoXCJiclwiKSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdGV4dENvbmZpZyA9IGdldEJsb2NrQ29uZmlnKHRoaXMuYmxvY2suZ2V0TGFzdEF0dHJpYnV0ZSgpKT8udGV4dFxuICAgICAgY29uc3QgdGV4dFZpZXcgPSB0aGlzLmZpbmRPckNyZWF0ZUNhY2hlZENoaWxkVmlldyhUZXh0VmlldywgdGhpcy5ibG9jay50ZXh0LCB7IHRleHRDb25maWcgfSlcbiAgICAgIG5vZGVzLnB1c2goLi4uQXJyYXkuZnJvbSh0ZXh0Vmlldy5nZXROb2RlcygpIHx8IFtdKSlcbiAgICAgIGlmICh0aGlzLnNob3VsZEFkZEV4dHJhTmV3bGluZUVsZW1lbnQoKSkge1xuICAgICAgICBub2Rlcy5wdXNoKG1ha2VFbGVtZW50KFwiYnJcIikpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBub2Rlc1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgYXR0cmlidXRlc1xuICAgICAgY29uc3QgeyB0YWdOYW1lIH0gPSBjb25maWcuYmxvY2tBdHRyaWJ1dGVzLmRlZmF1bHRcbiAgICAgIGlmICh0aGlzLmJsb2NrLmlzUlRMKCkpIHtcbiAgICAgICAgYXR0cmlidXRlcyA9IHsgZGlyOiBcInJ0bFwiIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgZWxlbWVudCA9IG1ha2VFbGVtZW50KHsgdGFnTmFtZSwgYXR0cmlidXRlcyB9KVxuICAgICAgbm9kZXMuZm9yRWFjaCgobm9kZSkgPT4gZWxlbWVudC5hcHBlbmRDaGlsZChub2RlKSlcbiAgICAgIHJldHVybiBbIGVsZW1lbnQgXVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUNvbnRhaW5lckVsZW1lbnQoZGVwdGgpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgICBsZXQgY2xhc3NOYW1lXG4gICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IHRoaXMuYXR0cmlidXRlc1tkZXB0aF1cblxuICAgIGNvbnN0IHsgdGFnTmFtZSwgaHRtbEF0dHJpYnV0ZXMgPSBbXSB9ID0gZ2V0QmxvY2tDb25maWcoYXR0cmlidXRlTmFtZSlcblxuICAgIGlmIChkZXB0aCA9PT0gMCAmJiB0aGlzLmJsb2NrLmlzUlRMKCkpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlcywgeyBkaXI6IFwicnRsXCIgfSlcbiAgICB9XG5cbiAgICBpZiAoYXR0cmlidXRlTmFtZSA9PT0gXCJhdHRhY2htZW50R2FsbGVyeVwiKSB7XG4gICAgICBjb25zdCBzaXplID0gdGhpcy5ibG9jay5nZXRCbG9ja0JyZWFrUG9zaXRpb24oKVxuICAgICAgY2xhc3NOYW1lID0gYCR7Y3NzLmF0dGFjaG1lbnRHYWxsZXJ5fSAke2Nzcy5hdHRhY2htZW50R2FsbGVyeX0tLSR7c2l6ZX1gXG4gICAgfVxuXG4gICAgT2JqZWN0LmVudHJpZXModGhpcy5ibG9jay5odG1sQXR0cmlidXRlcykuZm9yRWFjaCgoWyBuYW1lLCB2YWx1ZSBdKSA9PiB7XG4gICAgICBpZiAoaHRtbEF0dHJpYnV0ZXMuaW5jbHVkZXMobmFtZSkpIHtcbiAgICAgICAgYXR0cmlidXRlc1tuYW1lXSA9IHZhbHVlXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiBtYWtlRWxlbWVudCh7IHRhZ05hbWUsIGNsYXNzTmFtZSwgYXR0cmlidXRlcyB9KVxuICB9XG5cbiAgLy8gQSBzaW5nbGUgPGJyPiBhdCB0aGUgZW5kIG9mIGEgYmxvY2sgZWxlbWVudCBoYXMgbm8gdmlzdWFsIHJlcHJlc2VudGF0aW9uXG4gIC8vIHNvIGFkZCBhbiBleHRyYSBvbmUuXG4gIHNob3VsZEFkZEV4dHJhTmV3bGluZUVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIC9cXG5cXG4kLy50ZXN0KHRoaXMuYmxvY2sudG9TdHJpbmcoKSlcbiAgfVxufVxuIiwgImltcG9ydCB7IG1ha2VFbGVtZW50IH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuaW1wb3J0IEVsZW1lbnRTdG9yZSBmcm9tIFwidHJpeC9jb3JlL2NvbGxlY3Rpb25zL2VsZW1lbnRfc3RvcmVcIlxuaW1wb3J0IE9iamVjdEdyb3VwIGZyb20gXCJ0cml4L2NvcmUvY29sbGVjdGlvbnMvb2JqZWN0X2dyb3VwXCJcbmltcG9ydCBPYmplY3RWaWV3IGZyb20gXCJ0cml4L3ZpZXdzL29iamVjdF92aWV3XCJcbmltcG9ydCBCbG9ja1ZpZXcgZnJvbSBcInRyaXgvdmlld3MvYmxvY2tfdmlld1wiXG5cbmltcG9ydCB7IGRlZmVyIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9jdW1lbnRWaWV3IGV4dGVuZHMgT2JqZWN0VmlldyB7XG4gIHN0YXRpYyByZW5kZXIoZG9jdW1lbnQpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gbWFrZUVsZW1lbnQoXCJkaXZcIilcbiAgICBjb25zdCB2aWV3ID0gbmV3IHRoaXMoZG9jdW1lbnQsIHsgZWxlbWVudCB9KVxuICAgIHZpZXcucmVuZGVyKClcbiAgICB2aWV3LnN5bmMoKVxuICAgIHJldHVybiBlbGVtZW50XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5lbGVtZW50ID0gdGhpcy5vcHRpb25zLmVsZW1lbnRcbiAgICB0aGlzLmVsZW1lbnRTdG9yZSA9IG5ldyBFbGVtZW50U3RvcmUoKVxuICAgIHRoaXMuc2V0RG9jdW1lbnQodGhpcy5vYmplY3QpXG4gIH1cblxuICBzZXREb2N1bWVudChkb2N1bWVudCkge1xuICAgIGlmICghZG9jdW1lbnQuaXNFcXVhbFRvKHRoaXMuZG9jdW1lbnQpKSB7XG4gICAgICB0aGlzLmRvY3VtZW50ID0gdGhpcy5vYmplY3QgPSBkb2N1bWVudFxuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmNoaWxkVmlld3MgPSBbXVxuXG4gICAgdGhpcy5zaGFkb3dFbGVtZW50ID0gbWFrZUVsZW1lbnQoXCJkaXZcIilcblxuICAgIGlmICghdGhpcy5kb2N1bWVudC5pc0VtcHR5KCkpIHtcbiAgICAgIGNvbnN0IG9iamVjdHMgPSBPYmplY3RHcm91cC5ncm91cE9iamVjdHModGhpcy5kb2N1bWVudC5nZXRCbG9ja3MoKSwgeyBhc1RyZWU6IHRydWUgfSlcblxuICAgICAgQXJyYXkuZnJvbShvYmplY3RzKS5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMuZmluZE9yQ3JlYXRlQ2FjaGVkQ2hpbGRWaWV3KEJsb2NrVmlldywgb2JqZWN0KVxuICAgICAgICBBcnJheS5mcm9tKHZpZXcuZ2V0Tm9kZXMoKSkubWFwKChub2RlKSA9PiB0aGlzLnNoYWRvd0VsZW1lbnQuYXBwZW5kQ2hpbGQobm9kZSkpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGlzU3luY2VkKCkge1xuICAgIHJldHVybiBlbGVtZW50c0hhdmVFcXVhbEhUTUwodGhpcy5zaGFkb3dFbGVtZW50LCB0aGlzLmVsZW1lbnQpXG4gIH1cblxuICBzeW5jKCkge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gdGhpcy5jcmVhdGVEb2N1bWVudEZyYWdtZW50Rm9yU3luYygpXG4gICAgd2hpbGUgKHRoaXMuZWxlbWVudC5sYXN0Q2hpbGQpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQubGFzdENoaWxkKVxuICAgIH1cbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpXG4gICAgcmV0dXJuIHRoaXMuZGlkU3luYygpXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgZGlkU3luYygpIHtcbiAgICB0aGlzLmVsZW1lbnRTdG9yZS5yZXNldChmaW5kU3RvcmVkRWxlbWVudHModGhpcy5lbGVtZW50KSlcbiAgICByZXR1cm4gZGVmZXIoKCkgPT4gdGhpcy5nYXJiYWdlQ29sbGVjdENhY2hlZFZpZXdzKCkpXG4gIH1cblxuICBjcmVhdGVEb2N1bWVudEZyYWdtZW50Rm9yU3luYygpIHtcbiAgICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKVxuXG4gICAgQXJyYXkuZnJvbSh0aGlzLnNoYWRvd0VsZW1lbnQuY2hpbGROb2RlcykuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQobm9kZS5jbG9uZU5vZGUodHJ1ZSkpXG4gICAgfSlcblxuICAgIEFycmF5LmZyb20oZmluZFN0b3JlZEVsZW1lbnRzKGZyYWdtZW50KSkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgY29uc3Qgc3RvcmVkRWxlbWVudCA9IHRoaXMuZWxlbWVudFN0b3JlLnJlbW92ZShlbGVtZW50KVxuICAgICAgaWYgKHN0b3JlZEVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChzdG9yZWRFbGVtZW50LCBlbGVtZW50KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gZnJhZ21lbnRcbiAgfVxufVxuXG5jb25zdCBmaW5kU3RvcmVkRWxlbWVudHMgPSAoZWxlbWVudCkgPT4gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtdHJpeC1zdG9yZS1rZXldXCIpXG5cbmNvbnN0IGVsZW1lbnRzSGF2ZUVxdWFsSFRNTCA9IChlbGVtZW50LCBvdGhlckVsZW1lbnQpID0+XG4gIGlnbm9yZVNwYWNlcyhlbGVtZW50LmlubmVySFRNTCkgPT09IGlnbm9yZVNwYWNlcyhvdGhlckVsZW1lbnQuaW5uZXJIVE1MKVxuXG5jb25zdCBpZ25vcmVTcGFjZXMgPSAoaHRtbCkgPT4gaHRtbC5yZXBsYWNlKC8mbmJzcDsvZywgXCIgXCIpXG4iLCAiaW1wb3J0IFRyaXhPYmplY3QgZnJvbSBcInRyaXgvY29yZS9vYmplY3RcIiAvLyBEb24ndCBvdmVycmlkZSB3aW5kb3cuT2JqZWN0XG5pbXBvcnQgSGFzaCBmcm9tIFwidHJpeC9jb3JlL2NvbGxlY3Rpb25zL2hhc2hcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaWVjZSBleHRlbmRzIFRyaXhPYmplY3Qge1xuICBzdGF0aWMgdHlwZXMgPSB7fVxuXG4gIHN0YXRpYyByZWdpc3RlclR5cGUodHlwZSwgY29uc3RydWN0b3IpIHtcbiAgICBjb25zdHJ1Y3Rvci50eXBlID0gdHlwZVxuICAgIHRoaXMudHlwZXNbdHlwZV0gPSBjb25zdHJ1Y3RvclxuICB9XG5cbiAgc3RhdGljIGZyb21KU09OKHBpZWNlSlNPTikge1xuICAgIGNvbnN0IGNvbnN0cnVjdG9yID0gdGhpcy50eXBlc1twaWVjZUpTT04udHlwZV1cbiAgICBpZiAoY29uc3RydWN0b3IpIHtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5mcm9tSlNPTihwaWVjZUpTT04pXG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IodmFsdWUsIGF0dHJpYnV0ZXMgPSB7fSkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBIYXNoLmJveChhdHRyaWJ1dGVzKVxuICB9XG5cbiAgY29weVdpdGhBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5nZXRWYWx1ZSgpLCBhdHRyaWJ1dGVzKVxuICB9XG5cbiAgY29weVdpdGhBZGRpdGlvbmFsQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhBdHRyaWJ1dGVzKHRoaXMuYXR0cmlidXRlcy5tZXJnZShhdHRyaWJ1dGVzKSlcbiAgfVxuXG4gIGNvcHlXaXRob3V0QXR0cmlidXRlKGF0dHJpYnV0ZSkge1xuICAgIHJldHVybiB0aGlzLmNvcHlXaXRoQXR0cmlidXRlcyh0aGlzLmF0dHJpYnV0ZXMucmVtb3ZlKGF0dHJpYnV0ZSkpXG4gIH1cblxuICBjb3B5KCkge1xuICAgIHJldHVybiB0aGlzLmNvcHlXaXRoQXR0cmlidXRlcyh0aGlzLmF0dHJpYnV0ZXMpXG4gIH1cblxuICBnZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXQoYXR0cmlidXRlKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlc0hhc2goKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlc1xuICB9XG5cbiAgZ2V0QXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLnRvT2JqZWN0KClcbiAgfVxuXG4gIGhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmhhcyhhdHRyaWJ1dGUpXG4gIH1cblxuICBoYXNTYW1lU3RyaW5nVmFsdWVBc1BpZWNlKHBpZWNlKSB7XG4gICAgcmV0dXJuIHBpZWNlICYmIHRoaXMudG9TdHJpbmcoKSA9PT0gcGllY2UudG9TdHJpbmcoKVxuICB9XG5cbiAgaGFzU2FtZUF0dHJpYnV0ZXNBc1BpZWNlKHBpZWNlKSB7XG4gICAgcmV0dXJuIHBpZWNlICYmICh0aGlzLmF0dHJpYnV0ZXMgPT09IHBpZWNlLmF0dHJpYnV0ZXMgfHwgdGhpcy5hdHRyaWJ1dGVzLmlzRXF1YWxUbyhwaWVjZS5hdHRyaWJ1dGVzKSlcbiAgfVxuXG4gIGlzQmxvY2tCcmVhaygpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlzRXF1YWxUbyhwaWVjZSkge1xuICAgIHJldHVybiAoXG4gICAgICBzdXBlci5pc0VxdWFsVG8oLi4uYXJndW1lbnRzKSB8fFxuICAgICAgdGhpcy5oYXNTYW1lQ29uc3RydWN0b3JBcyhwaWVjZSkgJiZcbiAgICAgICAgdGhpcy5oYXNTYW1lU3RyaW5nVmFsdWVBc1BpZWNlKHBpZWNlKSAmJlxuICAgICAgICB0aGlzLmhhc1NhbWVBdHRyaWJ1dGVzQXNQaWVjZShwaWVjZSlcbiAgICApXG4gIH1cblxuICBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMFxuICB9XG5cbiAgaXNTZXJpYWxpemFibGUoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdGhpcy5jb25zdHJ1Y3Rvci50eXBlLFxuICAgICAgYXR0cmlidXRlczogdGhpcy5nZXRBdHRyaWJ1dGVzKCksXG4gICAgfVxuICB9XG5cbiAgY29udGVudHNGb3JJbnNwZWN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0aGlzLmNvbnN0cnVjdG9yLnR5cGUsXG4gICAgICBhdHRyaWJ1dGVzOiB0aGlzLmF0dHJpYnV0ZXMuaW5zcGVjdCgpLFxuICAgIH1cbiAgfVxuXG4gIC8vIEdyb3VwaW5nXG5cbiAgY2FuQmVHcm91cGVkKCkge1xuICAgIHJldHVybiB0aGlzLmhhc0F0dHJpYnV0ZShcImhyZWZcIilcbiAgfVxuXG4gIGNhbkJlR3JvdXBlZFdpdGgocGllY2UpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBwaWVjZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpXG4gIH1cblxuICAvLyBTcGxpdHRhYmxlXG5cbiAgZ2V0TGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aFxuICB9XG5cbiAgY2FuQmVDb25zb2xpZGF0ZWRXaXRoKHBpZWNlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cbiIsICJpbXBvcnQgT3BlcmF0aW9uIGZyb20gXCJ0cml4L2NvcmUvdXRpbGl0aWVzL29wZXJhdGlvblwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlUHJlbG9hZE9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHVybCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLnVybCA9IHVybFxuICB9XG5cbiAgcGVyZm9ybShjYWxsYmFjaykge1xuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKClcblxuICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGltYWdlLndpZHRoID0gdGhpcy53aWR0aCA9IGltYWdlLm5hdHVyYWxXaWR0aFxuICAgICAgaW1hZ2UuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgPSBpbWFnZS5uYXR1cmFsSGVpZ2h0XG4gICAgICByZXR1cm4gY2FsbGJhY2sodHJ1ZSwgaW1hZ2UpXG4gICAgfVxuXG4gICAgaW1hZ2Uub25lcnJvciA9ICgpID0+IGNhbGxiYWNrKGZhbHNlKVxuXG4gICAgaW1hZ2Uuc3JjID0gdGhpcy51cmxcbiAgfVxufVxuIiwgImltcG9ydCAqIGFzIGNvbmZpZyBmcm9tIFwidHJpeC9jb25maWdcIlxuaW1wb3J0IFRyaXhPYmplY3QgZnJvbSBcInRyaXgvY29yZS9vYmplY3RcIiAvLyBEb24ndCBvdmVycmlkZSB3aW5kb3cuT2JqZWN0XG5pbXBvcnQgSGFzaCBmcm9tIFwidHJpeC9jb3JlL2NvbGxlY3Rpb25zL2hhc2hcIlxuaW1wb3J0IEltYWdlUHJlbG9hZE9wZXJhdGlvbiBmcm9tIFwidHJpeC9vcGVyYXRpb25zL2ltYWdlX3ByZWxvYWRfb3BlcmF0aW9uXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXR0YWNobWVudCBleHRlbmRzIFRyaXhPYmplY3Qge1xuICBzdGF0aWMgcHJldmlld2FibGVQYXR0ZXJuID0gL15pbWFnZShcXC8oZ2lmfHBuZ3x3ZWJwfGpwZT9nKXwkKS9cblxuICBzdGF0aWMgYXR0YWNobWVudEZvckZpbGUoZmlsZSkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXNGb3JGaWxlKGZpbGUpXG4gICAgY29uc3QgYXR0YWNobWVudCA9IG5ldyB0aGlzKGF0dHJpYnV0ZXMpXG4gICAgYXR0YWNobWVudC5zZXRGaWxlKGZpbGUpXG4gICAgcmV0dXJuIGF0dGFjaG1lbnRcbiAgfVxuXG4gIHN0YXRpYyBhdHRyaWJ1dGVzRm9yRmlsZShmaWxlKSB7XG4gICAgcmV0dXJuIG5ldyBIYXNoKHtcbiAgICAgIGZpbGVuYW1lOiBmaWxlLm5hbWUsXG4gICAgICBmaWxlc2l6ZTogZmlsZS5zaXplLFxuICAgICAgY29udGVudFR5cGU6IGZpbGUudHlwZSxcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGZyb21KU09OKGF0dGFjaG1lbnRKU09OKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKGF0dGFjaG1lbnRKU09OKVxuICB9XG5cbiAgY29uc3RydWN0b3IoYXR0cmlidXRlcyA9IHt9KSB7XG4gICAgc3VwZXIoYXR0cmlidXRlcylcbiAgICB0aGlzLnJlbGVhc2VGaWxlID0gdGhpcy5yZWxlYXNlRmlsZS5iaW5kKHRoaXMpXG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gSGFzaC5ib3goYXR0cmlidXRlcylcbiAgICB0aGlzLmRpZENoYW5nZUF0dHJpYnV0ZXMoKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KGF0dHJpYnV0ZSlcbiAgfVxuXG4gIGhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmhhcyhhdHRyaWJ1dGUpXG4gIH1cblxuICBnZXRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMudG9PYmplY3QoKVxuICB9XG5cbiAgc2V0QXR0cmlidXRlcyhhdHRyaWJ1dGVzID0ge30pIHtcbiAgICBjb25zdCBuZXdBdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzLm1lcmdlKGF0dHJpYnV0ZXMpXG4gICAgaWYgKCF0aGlzLmF0dHJpYnV0ZXMuaXNFcXVhbFRvKG5ld0F0dHJpYnV0ZXMpKSB7XG4gICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBuZXdBdHRyaWJ1dGVzXG4gICAgICB0aGlzLmRpZENoYW5nZUF0dHJpYnV0ZXMoKVxuICAgICAgdGhpcy5wcmV2aWV3RGVsZWdhdGU/LmF0dGFjaG1lbnREaWRDaGFuZ2VBdHRyaWJ1dGVzPy4odGhpcylcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5hdHRhY2htZW50RGlkQ2hhbmdlQXR0cmlidXRlcz8uKHRoaXMpXG4gICAgfVxuICB9XG5cbiAgZGlkQ2hhbmdlQXR0cmlidXRlcygpIHtcbiAgICBpZiAodGhpcy5pc1ByZXZpZXdhYmxlKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnByZWxvYWRVUkwoKVxuICAgIH1cbiAgfVxuXG4gIGlzUGVuZGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5maWxlICE9IG51bGwgJiYgISh0aGlzLmdldFVSTCgpIHx8IHRoaXMuZ2V0SHJlZigpKVxuICB9XG5cbiAgaXNQcmV2aWV3YWJsZSgpIHtcbiAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmhhcyhcInByZXZpZXdhYmxlXCIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmdldChcInByZXZpZXdhYmxlXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBBdHRhY2htZW50LnByZXZpZXdhYmxlUGF0dGVybi50ZXN0KHRoaXMuZ2V0Q29udGVudFR5cGUoKSlcbiAgICB9XG4gIH1cblxuICBnZXRUeXBlKCkge1xuICAgIGlmICh0aGlzLmhhc0NvbnRlbnQoKSkge1xuICAgICAgcmV0dXJuIFwiY29udGVudFwiXG4gICAgfSBlbHNlIGlmICh0aGlzLmlzUHJldmlld2FibGUoKSkge1xuICAgICAgcmV0dXJuIFwicHJldmlld1wiXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImZpbGVcIlxuICAgIH1cbiAgfVxuXG4gIGdldFVSTCgpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmdldChcInVybFwiKVxuICB9XG5cbiAgZ2V0SHJlZigpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmdldChcImhyZWZcIilcbiAgfVxuXG4gIGdldEZpbGVuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KFwiZmlsZW5hbWVcIikgfHwgXCJcIlxuICB9XG5cbiAgZ2V0RmlsZXNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXQoXCJmaWxlc2l6ZVwiKVxuICB9XG5cbiAgZ2V0Rm9ybWF0dGVkRmlsZXNpemUoKSB7XG4gICAgY29uc3QgZmlsZXNpemUgPSB0aGlzLmF0dHJpYnV0ZXMuZ2V0KFwiZmlsZXNpemVcIilcbiAgICBpZiAodHlwZW9mIGZpbGVzaXplID09PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gY29uZmlnLmZpbGVTaXplLmZvcm1hdHRlcihmaWxlc2l6ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiXCJcbiAgICB9XG4gIH1cblxuICBnZXRFeHRlbnNpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RmlsZW5hbWUoKVxuICAgICAgLm1hdGNoKC9cXC4oXFx3KykkLyk/LlsxXVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGdldENvbnRlbnRUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KFwiY29udGVudFR5cGVcIilcbiAgfVxuXG4gIGhhc0NvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5oYXMoXCJjb250ZW50XCIpXG4gIH1cblxuICBnZXRDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KFwiY29udGVudFwiKVxuICB9XG5cbiAgZ2V0V2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXQoXCJ3aWR0aFwiKVxuICB9XG5cbiAgZ2V0SGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KFwiaGVpZ2h0XCIpXG4gIH1cblxuICBnZXRGaWxlKCkge1xuICAgIHJldHVybiB0aGlzLmZpbGVcbiAgfVxuXG4gIHNldEZpbGUoZmlsZSkge1xuICAgIHRoaXMuZmlsZSA9IGZpbGVcbiAgICBpZiAodGhpcy5pc1ByZXZpZXdhYmxlKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnByZWxvYWRGaWxlKClcbiAgICB9XG4gIH1cblxuICByZWxlYXNlRmlsZSgpIHtcbiAgICB0aGlzLnJlbGVhc2VQcmVsb2FkZWRGaWxlKClcbiAgICB0aGlzLmZpbGUgPSBudWxsXG4gIH1cblxuICBnZXRVcGxvYWRQcm9ncmVzcygpIHtcbiAgICByZXR1cm4gdGhpcy51cGxvYWRQcm9ncmVzcyAhPSBudWxsID8gdGhpcy51cGxvYWRQcm9ncmVzcyA6IDBcbiAgfVxuXG4gIHNldFVwbG9hZFByb2dyZXNzKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMudXBsb2FkUHJvZ3Jlc3MgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLnVwbG9hZFByb2dyZXNzID0gdmFsdWVcbiAgICAgIHJldHVybiB0aGlzLnVwbG9hZFByb2dyZXNzRGVsZWdhdGU/LmF0dGFjaG1lbnREaWRDaGFuZ2VVcGxvYWRQcm9ncmVzcz8uKHRoaXMpXG4gICAgfVxuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZXMoKVxuICB9XG5cbiAgZ2V0Q2FjaGVLZXkoKSB7XG4gICAgcmV0dXJuIFsgc3VwZXIuZ2V0Q2FjaGVLZXkoLi4uYXJndW1lbnRzKSwgdGhpcy5hdHRyaWJ1dGVzLmdldENhY2hlS2V5KCksIHRoaXMuZ2V0UHJldmlld1VSTCgpIF0uam9pbihcIi9cIilcbiAgfVxuXG4gIC8vIFByZXZpZXdhYmxlXG5cbiAgZ2V0UHJldmlld1VSTCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcmV2aWV3VVJMIHx8IHRoaXMucHJlbG9hZGluZ1VSTFxuICB9XG5cbiAgc2V0UHJldmlld1VSTCh1cmwpIHtcbiAgICBpZiAodXJsICE9PSB0aGlzLmdldFByZXZpZXdVUkwoKSkge1xuICAgICAgdGhpcy5wcmV2aWV3VVJMID0gdXJsXG4gICAgICB0aGlzLnByZXZpZXdEZWxlZ2F0ZT8uYXR0YWNobWVudERpZENoYW5nZUF0dHJpYnV0ZXM/Lih0aGlzKVxuICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmF0dGFjaG1lbnREaWRDaGFuZ2VQcmV2aWV3VVJMPy4odGhpcylcbiAgICB9XG4gIH1cblxuICBwcmVsb2FkVVJMKCkge1xuICAgIHJldHVybiB0aGlzLnByZWxvYWQodGhpcy5nZXRVUkwoKSwgdGhpcy5yZWxlYXNlRmlsZSlcbiAgfVxuXG4gIHByZWxvYWRGaWxlKCkge1xuICAgIGlmICh0aGlzLmZpbGUpIHtcbiAgICAgIHRoaXMuZmlsZU9iamVjdFVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwodGhpcy5maWxlKVxuICAgICAgcmV0dXJuIHRoaXMucHJlbG9hZCh0aGlzLmZpbGVPYmplY3RVUkwpXG4gICAgfVxuICB9XG5cbiAgcmVsZWFzZVByZWxvYWRlZEZpbGUoKSB7XG4gICAgaWYgKHRoaXMuZmlsZU9iamVjdFVSTCkge1xuICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLmZpbGVPYmplY3RVUkwpXG4gICAgICB0aGlzLmZpbGVPYmplY3RVUkwgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgcHJlbG9hZCh1cmwsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHVybCAmJiB1cmwgIT09IHRoaXMuZ2V0UHJldmlld1VSTCgpKSB7XG4gICAgICB0aGlzLnByZWxvYWRpbmdVUkwgPSB1cmxcbiAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG5ldyBJbWFnZVByZWxvYWRPcGVyYXRpb24odXJsKVxuICAgICAgcmV0dXJuIG9wZXJhdGlvblxuICAgICAgICAudGhlbigoeyB3aWR0aCwgaGVpZ2h0IH0pID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMuZ2V0V2lkdGgoKSB8fCAhdGhpcy5nZXRIZWlnaHQoKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHsgd2lkdGgsIGhlaWdodCB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnByZWxvYWRpbmdVUkwgPSBudWxsXG4gICAgICAgICAgdGhpcy5zZXRQcmV2aWV3VVJMKHVybClcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2s/LigpXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5wcmVsb2FkaW5nVVJMID0gbnVsbFxuICAgICAgICAgIHJldHVybiBjYWxsYmFjaz8uKClcbiAgICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBPQkpFQ1RfUkVQTEFDRU1FTlRfQ0hBUkFDVEVSIH0gZnJvbSBcInRyaXgvY29uc3RhbnRzXCJcblxuaW1wb3J0IEF0dGFjaG1lbnQgZnJvbSBcInRyaXgvbW9kZWxzL2F0dGFjaG1lbnRcIlxuaW1wb3J0IFBpZWNlIGZyb20gXCJ0cml4L21vZGVscy9waWVjZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF0dGFjaG1lbnRQaWVjZSBleHRlbmRzIFBpZWNlIHtcbiAgc3RhdGljIHBlcm1pdHRlZEF0dHJpYnV0ZXMgPSBbIFwiY2FwdGlvblwiLCBcInByZXNlbnRhdGlvblwiIF1cblxuICBzdGF0aWMgZnJvbUpTT04ocGllY2VKU09OKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKEF0dGFjaG1lbnQuZnJvbUpTT04ocGllY2VKU09OLmF0dGFjaG1lbnQpLCBwaWVjZUpTT04uYXR0cmlidXRlcylcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGF0dGFjaG1lbnQpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5hdHRhY2htZW50ID0gYXR0YWNobWVudFxuICAgIHRoaXMubGVuZ3RoID0gMVxuICAgIHRoaXMuZW5zdXJlQXR0YWNobWVudEV4Y2x1c2l2ZWx5SGFzQXR0cmlidXRlKFwiaHJlZlwiKVxuICAgIGlmICghdGhpcy5hdHRhY2htZW50Lmhhc0NvbnRlbnQoKSkge1xuICAgICAgdGhpcy5yZW1vdmVQcm9oaWJpdGVkQXR0cmlidXRlcygpXG4gICAgfVxuICB9XG5cbiAgZW5zdXJlQXR0YWNobWVudEV4Y2x1c2l2ZWx5SGFzQXR0cmlidXRlKGF0dHJpYnV0ZSkge1xuICAgIGlmICh0aGlzLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XG4gICAgICBpZiAoIXRoaXMuYXR0YWNobWVudC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xuICAgICAgICB0aGlzLmF0dGFjaG1lbnQuc2V0QXR0cmlidXRlcyh0aGlzLmF0dHJpYnV0ZXMuc2xpY2UoWyBhdHRyaWJ1dGUgXSkpXG4gICAgICB9XG4gICAgICB0aGlzLmF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXMucmVtb3ZlKGF0dHJpYnV0ZSlcbiAgICB9XG4gIH1cblxuICByZW1vdmVQcm9oaWJpdGVkQXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzLnNsaWNlKEF0dGFjaG1lbnRQaWVjZS5wZXJtaXR0ZWRBdHRyaWJ1dGVzKVxuICAgIGlmICghYXR0cmlidXRlcy5pc0VxdWFsVG8odGhpcy5hdHRyaWJ1dGVzKSkge1xuICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlc1xuICAgIH1cbiAgfVxuXG4gIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmF0dGFjaG1lbnRcbiAgfVxuXG4gIGlzU2VyaWFsaXphYmxlKCkge1xuICAgIHJldHVybiAhdGhpcy5hdHRhY2htZW50LmlzUGVuZGluZygpXG4gIH1cblxuICBnZXRDYXB0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KFwiY2FwdGlvblwiKSB8fCBcIlwiXG4gIH1cblxuICBpc0VxdWFsVG8ocGllY2UpIHtcbiAgICByZXR1cm4gc3VwZXIuaXNFcXVhbFRvKHBpZWNlKSAmJiB0aGlzLmF0dGFjaG1lbnQuaWQgPT09IHBpZWNlPy5hdHRhY2htZW50Py5pZFxuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9CSkVDVF9SRVBMQUNFTUVOVF9DSEFSQUNURVJcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCBqc29uID0gc3VwZXIudG9KU09OKC4uLmFyZ3VtZW50cylcbiAgICBqc29uLmF0dGFjaG1lbnQgPSB0aGlzLmF0dGFjaG1lbnRcbiAgICByZXR1cm4ganNvblxuICB9XG5cbiAgZ2V0Q2FjaGVLZXkoKSB7XG4gICAgcmV0dXJuIFsgc3VwZXIuZ2V0Q2FjaGVLZXkoLi4uYXJndW1lbnRzKSwgdGhpcy5hdHRhY2htZW50LmdldENhY2hlS2V5KCkgXS5qb2luKFwiL1wiKVxuICB9XG5cbiAgdG9Db25zb2xlKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvU3RyaW5nKCkpXG4gIH1cbn1cblxuUGllY2UucmVnaXN0ZXJUeXBlKFwiYXR0YWNobWVudFwiLCBBdHRhY2htZW50UGllY2UpXG4iLCAiaW1wb3J0IFBpZWNlIGZyb20gXCJ0cml4L21vZGVscy9waWVjZVwiXG5cbmltcG9ydCB7IG5vcm1hbGl6ZU5ld2xpbmVzIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RyaW5nUGllY2UgZXh0ZW5kcyBQaWVjZSB7XG4gIHN0YXRpYyBmcm9tSlNPTihwaWVjZUpTT04pIHtcbiAgICByZXR1cm4gbmV3IHRoaXMocGllY2VKU09OLnN0cmluZywgcGllY2VKU09OLmF0dHJpYnV0ZXMpXG4gIH1cblxuICBjb25zdHJ1Y3RvcihzdHJpbmcpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5zdHJpbmcgPSBub3JtYWxpemVOZXdsaW5lcyhzdHJpbmcpXG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLnN0cmluZy5sZW5ndGhcbiAgfVxuXG4gIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnN0cmluZ1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaW5nLnRvU3RyaW5nKClcbiAgfVxuXG4gIGlzQmxvY2tCcmVhaygpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpID09PSBcIlxcblwiICYmIHRoaXMuZ2V0QXR0cmlidXRlKFwiYmxvY2tCcmVha1wiKSA9PT0gdHJ1ZVxuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLnRvSlNPTiguLi5hcmd1bWVudHMpXG4gICAgcmVzdWx0LnN0cmluZyA9IHRoaXMuc3RyaW5nXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLy8gU3BsaXR0YWJsZVxuXG4gIGNhbkJlQ29uc29saWRhdGVkV2l0aChwaWVjZSkge1xuICAgIHJldHVybiBwaWVjZSAmJiB0aGlzLmhhc1NhbWVDb25zdHJ1Y3RvckFzKHBpZWNlKSAmJiB0aGlzLmhhc1NhbWVBdHRyaWJ1dGVzQXNQaWVjZShwaWVjZSlcbiAgfVxuXG4gIGNvbnNvbGlkYXRlV2l0aChwaWVjZSkge1xuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLnRvU3RyaW5nKCkgKyBwaWVjZS50b1N0cmluZygpLCB0aGlzLmF0dHJpYnV0ZXMpXG4gIH1cblxuICBzcGxpdEF0T2Zmc2V0KG9mZnNldCkge1xuICAgIGxldCBsZWZ0LCByaWdodFxuICAgIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICAgIGxlZnQgPSBudWxsXG4gICAgICByaWdodCA9IHRoaXNcbiAgICB9IGVsc2UgaWYgKG9mZnNldCA9PT0gdGhpcy5sZW5ndGgpIHtcbiAgICAgIGxlZnQgPSB0aGlzXG4gICAgICByaWdodCA9IG51bGxcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuc3RyaW5nLnNsaWNlKDAsIG9mZnNldCksIHRoaXMuYXR0cmlidXRlcylcbiAgICAgIHJpZ2h0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5zdHJpbmcuc2xpY2Uob2Zmc2V0KSwgdGhpcy5hdHRyaWJ1dGVzKVxuICAgIH1cbiAgICByZXR1cm4gWyBsZWZ0LCByaWdodCBdXG4gIH1cblxuICB0b0NvbnNvbGUoKSB7XG4gICAgbGV0IHsgc3RyaW5nIH0gPSB0aGlzXG4gICAgaWYgKHN0cmluZy5sZW5ndGggPiAxNSkge1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKDAsIDE0KSArIFwi4oCmXCJcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0cmluZy50b1N0cmluZygpKVxuICB9XG59XG5cblBpZWNlLnJlZ2lzdGVyVHlwZShcInN0cmluZ1wiLCBTdHJpbmdQaWVjZSlcbiIsICIvKiBlc2xpbnQtZGlzYWJsZVxuICAgIHByZWZlci1jb25zdCxcbiovXG5pbXBvcnQgVHJpeE9iamVjdCBmcm9tIFwidHJpeC9jb3JlL29iamVjdFwiIC8vIERvbid0IG92ZXJyaWRlIHdpbmRvdy5PYmplY3RcblxuaW1wb3J0IHsgc3BsaWNlQXJyYXkgfSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTcGxpdHRhYmxlTGlzdCBleHRlbmRzIFRyaXhPYmplY3Qge1xuICBzdGF0aWMgYm94KG9iamVjdHMpIHtcbiAgICBpZiAob2JqZWN0cyBpbnN0YW5jZW9mIHRoaXMpIHtcbiAgICAgIHJldHVybiBvYmplY3RzXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcyhvYmplY3RzKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKG9iamVjdHMgPSBbXSkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLm9iamVjdHMgPSBvYmplY3RzLnNsaWNlKDApXG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLm9iamVjdHMubGVuZ3RoXG4gIH1cblxuICBpbmRleE9mKG9iamVjdCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdHMuaW5kZXhPZihvYmplY3QpXG4gIH1cblxuICBzcGxpY2UoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihzcGxpY2VBcnJheSh0aGlzLm9iamVjdHMsIC4uLmFyZ3MpKVxuICB9XG5cbiAgZWFjaE9iamVjdChjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9iamVjdHMubWFwKChvYmplY3QsIGluZGV4KSA9PiBjYWxsYmFjayhvYmplY3QsIGluZGV4KSlcbiAgfVxuXG4gIGluc2VydE9iamVjdEF0SW5kZXgob2JqZWN0LCBpbmRleCkge1xuICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMCwgb2JqZWN0KVxuICB9XG5cbiAgaW5zZXJ0U3BsaXR0YWJsZUxpc3RBdEluZGV4KHNwbGl0dGFibGVMaXN0LCBpbmRleCkge1xuICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMCwgLi4uc3BsaXR0YWJsZUxpc3Qub2JqZWN0cylcbiAgfVxuXG4gIGluc2VydFNwbGl0dGFibGVMaXN0QXRQb3NpdGlvbihzcGxpdHRhYmxlTGlzdCwgcG9zaXRpb24pIHtcbiAgICBjb25zdCBbIG9iamVjdHMsIGluZGV4IF0gPSB0aGlzLnNwbGl0T2JqZWN0QXRQb3NpdGlvbihwb3NpdGlvbilcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqZWN0cykuaW5zZXJ0U3BsaXR0YWJsZUxpc3RBdEluZGV4KHNwbGl0dGFibGVMaXN0LCBpbmRleClcbiAgfVxuXG4gIGVkaXRPYmplY3RBdEluZGV4KGluZGV4LCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnJlcGxhY2VPYmplY3RBdEluZGV4KGNhbGxiYWNrKHRoaXMub2JqZWN0c1tpbmRleF0pLCBpbmRleClcbiAgfVxuXG4gIHJlcGxhY2VPYmplY3RBdEluZGV4KG9iamVjdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGxpY2UoaW5kZXgsIDEsIG9iamVjdClcbiAgfVxuXG4gIHJlbW92ZU9iamVjdEF0SW5kZXgoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGxpY2UoaW5kZXgsIDEpXG4gIH1cblxuICBnZXRPYmplY3RBdEluZGV4KGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0c1tpbmRleF1cbiAgfVxuXG4gIGdldFNwbGl0dGFibGVMaXN0SW5SYW5nZShyYW5nZSkge1xuICAgIGNvbnN0IFsgb2JqZWN0cywgbGVmdEluZGV4LCByaWdodEluZGV4IF0gPSB0aGlzLnNwbGl0T2JqZWN0c0F0UmFuZ2UocmFuZ2UpXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iamVjdHMuc2xpY2UobGVmdEluZGV4LCByaWdodEluZGV4ICsgMSkpXG4gIH1cblxuICBzZWxlY3RTcGxpdHRhYmxlTGlzdCh0ZXN0KSB7XG4gICAgY29uc3Qgb2JqZWN0cyA9IHRoaXMub2JqZWN0cy5maWx0ZXIoKG9iamVjdCkgPT4gdGVzdChvYmplY3QpKVxuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmplY3RzKVxuICB9XG5cbiAgcmVtb3ZlT2JqZWN0c0luUmFuZ2UocmFuZ2UpIHtcbiAgICBjb25zdCBbIG9iamVjdHMsIGxlZnRJbmRleCwgcmlnaHRJbmRleCBdID0gdGhpcy5zcGxpdE9iamVjdHNBdFJhbmdlKHJhbmdlKVxuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmplY3RzKS5zcGxpY2UobGVmdEluZGV4LCByaWdodEluZGV4IC0gbGVmdEluZGV4ICsgMSlcbiAgfVxuXG4gIHRyYW5zZm9ybU9iamVjdHNJblJhbmdlKHJhbmdlLCB0cmFuc2Zvcm0pIHtcbiAgICBjb25zdCBbIG9iamVjdHMsIGxlZnRJbmRleCwgcmlnaHRJbmRleCBdID0gdGhpcy5zcGxpdE9iamVjdHNBdFJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IHRyYW5zZm9ybWVkT2JqZWN0cyA9IG9iamVjdHMubWFwKChvYmplY3QsIGluZGV4KSA9PlxuICAgICAgbGVmdEluZGV4IDw9IGluZGV4ICYmIGluZGV4IDw9IHJpZ2h0SW5kZXggPyB0cmFuc2Zvcm0ob2JqZWN0KSA6IG9iamVjdFxuICAgIClcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodHJhbnNmb3JtZWRPYmplY3RzKVxuICB9XG5cbiAgc3BsaXRPYmplY3RzQXRSYW5nZShyYW5nZSkge1xuICAgIGxldCByaWdodE91dGVySW5kZXhcbiAgICBsZXQgWyBvYmplY3RzLCBsZWZ0SW5uZXJJbmRleCwgb2Zmc2V0IF0gPSB0aGlzLnNwbGl0T2JqZWN0QXRQb3NpdGlvbihzdGFydE9mUmFuZ2UocmFuZ2UpKVxuICAgIDtbIG9iamVjdHMsIHJpZ2h0T3V0ZXJJbmRleCBdID0gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqZWN0cykuc3BsaXRPYmplY3RBdFBvc2l0aW9uKGVuZE9mUmFuZ2UocmFuZ2UpICsgb2Zmc2V0KVxuXG4gICAgcmV0dXJuIFsgb2JqZWN0cywgbGVmdElubmVySW5kZXgsIHJpZ2h0T3V0ZXJJbmRleCAtIDEgXVxuICB9XG5cbiAgZ2V0T2JqZWN0QXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgIGNvbnN0IHsgaW5kZXggfSA9IHRoaXMuZmluZEluZGV4QW5kT2Zmc2V0QXRQb3NpdGlvbihwb3NpdGlvbilcbiAgICByZXR1cm4gdGhpcy5vYmplY3RzW2luZGV4XVxuICB9XG5cbiAgc3BsaXRPYmplY3RBdFBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgbGV0IHNwbGl0SW5kZXgsIHNwbGl0T2Zmc2V0XG4gICAgY29uc3QgeyBpbmRleCwgb2Zmc2V0IH0gPSB0aGlzLmZpbmRJbmRleEFuZE9mZnNldEF0UG9zaXRpb24ocG9zaXRpb24pXG4gICAgY29uc3Qgb2JqZWN0cyA9IHRoaXMub2JqZWN0cy5zbGljZSgwKVxuICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgIHNwbGl0SW5kZXggPSBpbmRleFxuICAgICAgICBzcGxpdE9mZnNldCA9IDBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG9iamVjdCA9IHRoaXMuZ2V0T2JqZWN0QXRJbmRleChpbmRleClcbiAgICAgICAgY29uc3QgWyBsZWZ0T2JqZWN0LCByaWdodE9iamVjdCBdID0gb2JqZWN0LnNwbGl0QXRPZmZzZXQob2Zmc2V0KVxuICAgICAgICBvYmplY3RzLnNwbGljZShpbmRleCwgMSwgbGVmdE9iamVjdCwgcmlnaHRPYmplY3QpXG4gICAgICAgIHNwbGl0SW5kZXggPSBpbmRleCArIDFcbiAgICAgICAgc3BsaXRPZmZzZXQgPSBsZWZ0T2JqZWN0LmdldExlbmd0aCgpIC0gb2Zmc2V0XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNwbGl0SW5kZXggPSBvYmplY3RzLmxlbmd0aFxuICAgICAgc3BsaXRPZmZzZXQgPSAwXG4gICAgfVxuXG4gICAgcmV0dXJuIFsgb2JqZWN0cywgc3BsaXRJbmRleCwgc3BsaXRPZmZzZXQgXVxuICB9XG5cbiAgY29uc29saWRhdGUoKSB7XG4gICAgY29uc3Qgb2JqZWN0cyA9IFtdXG4gICAgbGV0IHBlbmRpbmdPYmplY3QgPSB0aGlzLm9iamVjdHNbMF1cblxuICAgIHRoaXMub2JqZWN0cy5zbGljZSgxKS5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgIGlmIChwZW5kaW5nT2JqZWN0LmNhbkJlQ29uc29saWRhdGVkV2l0aD8uKG9iamVjdCkpIHtcbiAgICAgICAgcGVuZGluZ09iamVjdCA9IHBlbmRpbmdPYmplY3QuY29uc29saWRhdGVXaXRoKG9iamVjdClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdHMucHVzaChwZW5kaW5nT2JqZWN0KVxuICAgICAgICBwZW5kaW5nT2JqZWN0ID0gb2JqZWN0XG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmIChwZW5kaW5nT2JqZWN0KSB7XG4gICAgICBvYmplY3RzLnB1c2gocGVuZGluZ09iamVjdClcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqZWN0cylcbiAgfVxuXG4gIGNvbnNvbGlkYXRlRnJvbUluZGV4VG9JbmRleChzdGFydEluZGV4LCBlbmRJbmRleCkge1xuICAgIGNvbnN0IG9iamVjdHMgPSB0aGlzLm9iamVjdHMuc2xpY2UoMClcbiAgICBjb25zdCBvYmplY3RzSW5SYW5nZSA9IG9iamVjdHMuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXggKyAxKVxuICAgIGNvbnN0IGNvbnNvbGlkYXRlZEluUmFuZ2UgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmplY3RzSW5SYW5nZSkuY29uc29saWRhdGUoKS50b0FycmF5KClcbiAgICByZXR1cm4gdGhpcy5zcGxpY2Uoc3RhcnRJbmRleCwgb2JqZWN0c0luUmFuZ2UubGVuZ3RoLCAuLi5jb25zb2xpZGF0ZWRJblJhbmdlKVxuICB9XG5cbiAgZmluZEluZGV4QW5kT2Zmc2V0QXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgIGxldCBpbmRleFxuICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSAwXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5vYmplY3RzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5vYmplY3RzW2luZGV4XVxuICAgICAgY29uc3QgbmV4dFBvc2l0aW9uID0gY3VycmVudFBvc2l0aW9uICsgb2JqZWN0LmdldExlbmd0aCgpXG4gICAgICBpZiAoY3VycmVudFBvc2l0aW9uIDw9IHBvc2l0aW9uICYmIHBvc2l0aW9uIDwgbmV4dFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB7IGluZGV4LCBvZmZzZXQ6IHBvc2l0aW9uIC0gY3VycmVudFBvc2l0aW9uIH1cbiAgICAgIH1cbiAgICAgIGN1cnJlbnRQb3NpdGlvbiA9IG5leHRQb3NpdGlvblxuICAgIH1cbiAgICByZXR1cm4geyBpbmRleDogbnVsbCwgb2Zmc2V0OiBudWxsIH1cbiAgfVxuXG4gIGZpbmRQb3NpdGlvbkF0SW5kZXhBbmRPZmZzZXQoaW5kZXgsIG9mZnNldCkge1xuICAgIGxldCBwb3NpdGlvbiA9IDBcbiAgICBmb3IgKGxldCBjdXJyZW50SW5kZXggPSAwOyBjdXJyZW50SW5kZXggPCB0aGlzLm9iamVjdHMubGVuZ3RoOyBjdXJyZW50SW5kZXgrKykge1xuICAgICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5vYmplY3RzW2N1cnJlbnRJbmRleF1cbiAgICAgIGlmIChjdXJyZW50SW5kZXggPCBpbmRleCkge1xuICAgICAgICBwb3NpdGlvbiArPSBvYmplY3QuZ2V0TGVuZ3RoKClcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudEluZGV4ID09PSBpbmRleCkge1xuICAgICAgICBwb3NpdGlvbiArPSBvZmZzZXRcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBvc2l0aW9uXG4gIH1cblxuICBnZXRFbmRQb3NpdGlvbigpIHtcbiAgICBpZiAodGhpcy5lbmRQb3NpdGlvbiA9PSBudWxsKSB7XG4gICAgICB0aGlzLmVuZFBvc2l0aW9uID0gMFxuICAgICAgdGhpcy5vYmplY3RzLmZvckVhY2goKG9iamVjdCkgPT4gdGhpcy5lbmRQb3NpdGlvbiArPSBvYmplY3QuZ2V0TGVuZ3RoKCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZW5kUG9zaXRpb25cbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdHMuam9pbihcIlwiKVxuICB9XG5cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3RzLnNsaWNlKDApXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheSgpXG4gIH1cblxuICBpc0VxdWFsVG8oc3BsaXR0YWJsZUxpc3QpIHtcbiAgICByZXR1cm4gc3VwZXIuaXNFcXVhbFRvKC4uLmFyZ3VtZW50cykgfHwgb2JqZWN0QXJyYXlzQXJlRXF1YWwodGhpcy5vYmplY3RzLCBzcGxpdHRhYmxlTGlzdD8ub2JqZWN0cylcbiAgfVxuXG4gIGNvbnRlbnRzRm9ySW5zcGVjdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb2JqZWN0czogYFske3RoaXMub2JqZWN0cy5tYXAoKG9iamVjdCkgPT4gb2JqZWN0Lmluc3BlY3QoKSkuam9pbihcIiwgXCIpfV1gLFxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBvYmplY3RBcnJheXNBcmVFcXVhbCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0ID0gW10pIHtcbiAgaWYgKGxlZnQubGVuZ3RoICE9PSByaWdodC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBsZXQgcmVzdWx0ID0gdHJ1ZVxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVmdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBvYmplY3QgPSBsZWZ0W2luZGV4XVxuICAgIGlmIChyZXN1bHQgJiYgIW9iamVjdC5pc0VxdWFsVG8ocmlnaHRbaW5kZXhdKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5jb25zdCBzdGFydE9mUmFuZ2UgPSAocmFuZ2UpID0+IHJhbmdlWzBdXG5cbmNvbnN0IGVuZE9mUmFuZ2UgPSAocmFuZ2UpID0+IHJhbmdlWzFdXG4iLCAiaW1wb3J0IFRyaXhPYmplY3QgZnJvbSBcInRyaXgvY29yZS9vYmplY3RcIiAvLyBEb24ndCBvdmVycmlkZSB3aW5kb3cuT2JqZWN0XG5cbmltcG9ydCB7IGdldERpcmVjdGlvbiB9IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5cbmltcG9ydCBQaWVjZSBmcm9tIFwidHJpeC9tb2RlbHMvcGllY2VcIlxuaW1wb3J0IEF0dGFjaG1lbnRQaWVjZSBmcm9tIFwidHJpeC9tb2RlbHMvYXR0YWNobWVudF9waWVjZVwiXG5pbXBvcnQgU3RyaW5nUGllY2UgZnJvbSBcInRyaXgvbW9kZWxzL3N0cmluZ19waWVjZVwiXG5pbXBvcnQgU3BsaXR0YWJsZUxpc3QgZnJvbSBcInRyaXgvbW9kZWxzL3NwbGl0dGFibGVfbGlzdFwiXG5cbmltcG9ydCBIYXNoIGZyb20gXCJ0cml4L2NvcmUvY29sbGVjdGlvbnMvaGFzaFwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHQgZXh0ZW5kcyBUcml4T2JqZWN0IHtcbiAgc3RhdGljIHRleHRGb3JBdHRhY2htZW50V2l0aEF0dHJpYnV0ZXMoYXR0YWNobWVudCwgYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHBpZWNlID0gbmV3IEF0dGFjaG1lbnRQaWVjZShhdHRhY2htZW50LCBhdHRyaWJ1dGVzKVxuICAgIHJldHVybiBuZXcgdGhpcyhbIHBpZWNlIF0pXG4gIH1cblxuICBzdGF0aWMgdGV4dEZvclN0cmluZ1dpdGhBdHRyaWJ1dGVzKHN0cmluZywgYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHBpZWNlID0gbmV3IFN0cmluZ1BpZWNlKHN0cmluZywgYXR0cmlidXRlcylcbiAgICByZXR1cm4gbmV3IHRoaXMoWyBwaWVjZSBdKVxuICB9XG5cbiAgc3RhdGljIGZyb21KU09OKHRleHRKU09OKSB7XG4gICAgY29uc3QgcGllY2VzID0gQXJyYXkuZnJvbSh0ZXh0SlNPTikubWFwKChwaWVjZUpTT04pID0+IFBpZWNlLmZyb21KU09OKHBpZWNlSlNPTikpXG4gICAgcmV0dXJuIG5ldyB0aGlzKHBpZWNlcylcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHBpZWNlcyA9IFtdKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIGNvbnN0IG5vdEVtcHR5ID0gcGllY2VzLmZpbHRlcigocGllY2UpID0+ICFwaWVjZS5pc0VtcHR5KCkpXG4gICAgdGhpcy5waWVjZUxpc3QgPSBuZXcgU3BsaXR0YWJsZUxpc3Qobm90RW1wdHkpXG4gIH1cblxuICBjb3B5KCkge1xuICAgIHJldHVybiB0aGlzLmNvcHlXaXRoUGllY2VMaXN0KHRoaXMucGllY2VMaXN0KVxuICB9XG5cbiAgY29weVdpdGhQaWVjZUxpc3QocGllY2VMaXN0KSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHBpZWNlTGlzdC5jb25zb2xpZGF0ZSgpLnRvQXJyYXkoKSlcbiAgfVxuXG4gIGNvcHlVc2luZ09iamVjdE1hcChvYmplY3RNYXApIHtcbiAgICBjb25zdCBwaWVjZXMgPSB0aGlzLmdldFBpZWNlcygpLm1hcCgocGllY2UpID0+IG9iamVjdE1hcC5maW5kKHBpZWNlKSB8fCBwaWVjZSlcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IocGllY2VzKVxuICB9XG5cbiAgYXBwZW5kVGV4dCh0ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0VGV4dEF0UG9zaXRpb24odGV4dCwgdGhpcy5nZXRMZW5ndGgoKSlcbiAgfVxuXG4gIGluc2VydFRleHRBdFBvc2l0aW9uKHRleHQsIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhQaWVjZUxpc3QodGhpcy5waWVjZUxpc3QuaW5zZXJ0U3BsaXR0YWJsZUxpc3RBdFBvc2l0aW9uKHRleHQucGllY2VMaXN0LCBwb3NpdGlvbikpXG4gIH1cblxuICByZW1vdmVUZXh0QXRSYW5nZShyYW5nZSkge1xuICAgIHJldHVybiB0aGlzLmNvcHlXaXRoUGllY2VMaXN0KHRoaXMucGllY2VMaXN0LnJlbW92ZU9iamVjdHNJblJhbmdlKHJhbmdlKSlcbiAgfVxuXG4gIHJlcGxhY2VUZXh0QXRSYW5nZSh0ZXh0LCByYW5nZSkge1xuICAgIHJldHVybiB0aGlzLnJlbW92ZVRleHRBdFJhbmdlKHJhbmdlKS5pbnNlcnRUZXh0QXRQb3NpdGlvbih0ZXh0LCByYW5nZVswXSlcbiAgfVxuXG4gIG1vdmVUZXh0RnJvbVJhbmdlVG9Qb3NpdGlvbihyYW5nZSwgcG9zaXRpb24pIHtcbiAgICBpZiAocmFuZ2VbMF0gPD0gcG9zaXRpb24gJiYgcG9zaXRpb24gPD0gcmFuZ2VbMV0pIHJldHVyblxuICAgIGNvbnN0IHRleHQgPSB0aGlzLmdldFRleHRBdFJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IGxlbmd0aCA9IHRleHQuZ2V0TGVuZ3RoKClcbiAgICBpZiAocmFuZ2VbMF0gPCBwb3NpdGlvbikge1xuICAgICAgcG9zaXRpb24gLT0gbGVuZ3RoXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlbW92ZVRleHRBdFJhbmdlKHJhbmdlKS5pbnNlcnRUZXh0QXRQb3NpdGlvbih0ZXh0LCBwb3NpdGlvbilcbiAgfVxuXG4gIGFkZEF0dHJpYnV0ZUF0UmFuZ2UoYXR0cmlidXRlLCB2YWx1ZSwgcmFuZ2UpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgICBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPSB2YWx1ZVxuICAgIHJldHVybiB0aGlzLmFkZEF0dHJpYnV0ZXNBdFJhbmdlKGF0dHJpYnV0ZXMsIHJhbmdlKVxuICB9XG5cbiAgYWRkQXR0cmlidXRlc0F0UmFuZ2UoYXR0cmlidXRlcywgcmFuZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5jb3B5V2l0aFBpZWNlTGlzdChcbiAgICAgIHRoaXMucGllY2VMaXN0LnRyYW5zZm9ybU9iamVjdHNJblJhbmdlKHJhbmdlLCAocGllY2UpID0+IHBpZWNlLmNvcHlXaXRoQWRkaXRpb25hbEF0dHJpYnV0ZXMoYXR0cmlidXRlcykpXG4gICAgKVxuICB9XG5cbiAgcmVtb3ZlQXR0cmlidXRlQXRSYW5nZShhdHRyaWJ1dGUsIHJhbmdlKSB7XG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhQaWVjZUxpc3QoXG4gICAgICB0aGlzLnBpZWNlTGlzdC50cmFuc2Zvcm1PYmplY3RzSW5SYW5nZShyYW5nZSwgKHBpZWNlKSA9PiBwaWVjZS5jb3B5V2l0aG91dEF0dHJpYnV0ZShhdHRyaWJ1dGUpKVxuICAgIClcbiAgfVxuXG4gIHNldEF0dHJpYnV0ZXNBdFJhbmdlKGF0dHJpYnV0ZXMsIHJhbmdlKSB7XG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhQaWVjZUxpc3QoXG4gICAgICB0aGlzLnBpZWNlTGlzdC50cmFuc2Zvcm1PYmplY3RzSW5SYW5nZShyYW5nZSwgKHBpZWNlKSA9PiBwaWVjZS5jb3B5V2l0aEF0dHJpYnV0ZXMoYXR0cmlidXRlcykpXG4gICAgKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlc0F0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5waWVjZUxpc3QuZ2V0T2JqZWN0QXRQb3NpdGlvbihwb3NpdGlvbik/LmdldEF0dHJpYnV0ZXMoKSB8fCB7fVxuICB9XG5cbiAgZ2V0Q29tbW9uQXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBvYmplY3RzID0gQXJyYXkuZnJvbSh0aGlzLnBpZWNlTGlzdC50b0FycmF5KCkpLm1hcCgocGllY2UpID0+IHBpZWNlLmdldEF0dHJpYnV0ZXMoKSlcbiAgICByZXR1cm4gSGFzaC5mcm9tQ29tbW9uQXR0cmlidXRlc09mT2JqZWN0cyhvYmplY3RzKS50b09iamVjdCgpXG4gIH1cblxuICBnZXRDb21tb25BdHRyaWJ1dGVzQXRSYW5nZShyYW5nZSkge1xuICAgIHJldHVybiB0aGlzLmdldFRleHRBdFJhbmdlKHJhbmdlKS5nZXRDb21tb25BdHRyaWJ1dGVzKCkgfHwge31cbiAgfVxuXG4gIGdldEV4cGFuZGVkUmFuZ2VGb3JBdHRyaWJ1dGVBdE9mZnNldChhdHRyaWJ1dGVOYW1lLCBvZmZzZXQpIHtcbiAgICBsZXQgcmlnaHRcbiAgICBsZXQgbGVmdCA9IHJpZ2h0ID0gb2Zmc2V0XG4gICAgY29uc3QgbGVuZ3RoID0gdGhpcy5nZXRMZW5ndGgoKVxuXG4gICAgd2hpbGUgKGxlZnQgPiAwICYmIHRoaXMuZ2V0Q29tbW9uQXR0cmlidXRlc0F0UmFuZ2UoWyBsZWZ0IC0gMSwgcmlnaHQgXSlbYXR0cmlidXRlTmFtZV0pIHtcbiAgICAgIGxlZnQtLVxuICAgIH1cbiAgICB3aGlsZSAocmlnaHQgPCBsZW5ndGggJiYgdGhpcy5nZXRDb21tb25BdHRyaWJ1dGVzQXRSYW5nZShbIG9mZnNldCwgcmlnaHQgKyAxIF0pW2F0dHJpYnV0ZU5hbWVdKSB7XG4gICAgICByaWdodCsrXG4gICAgfVxuXG4gICAgcmV0dXJuIFsgbGVmdCwgcmlnaHQgXVxuICB9XG5cbiAgZ2V0VGV4dEF0UmFuZ2UocmFuZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5jb3B5V2l0aFBpZWNlTGlzdCh0aGlzLnBpZWNlTGlzdC5nZXRTcGxpdHRhYmxlTGlzdEluUmFuZ2UocmFuZ2UpKVxuICB9XG5cbiAgZ2V0U3RyaW5nQXRSYW5nZShyYW5nZSkge1xuICAgIHJldHVybiB0aGlzLnBpZWNlTGlzdC5nZXRTcGxpdHRhYmxlTGlzdEluUmFuZ2UocmFuZ2UpLnRvU3RyaW5nKClcbiAgfVxuXG4gIGdldFN0cmluZ0F0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdFJhbmdlKFsgcG9zaXRpb24sIHBvc2l0aW9uICsgMSBdKVxuICB9XG5cbiAgc3RhcnRzV2l0aFN0cmluZyhzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdFJhbmdlKFsgMCwgc3RyaW5nLmxlbmd0aCBdKSA9PT0gc3RyaW5nXG4gIH1cblxuICBlbmRzV2l0aFN0cmluZyhzdHJpbmcpIHtcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLmdldExlbmd0aCgpXG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXRSYW5nZShbIGxlbmd0aCAtIHN0cmluZy5sZW5ndGgsIGxlbmd0aCBdKSA9PT0gc3RyaW5nXG4gIH1cblxuICBnZXRBdHRhY2htZW50UGllY2VzKCkge1xuICAgIHJldHVybiB0aGlzLnBpZWNlTGlzdC50b0FycmF5KCkuZmlsdGVyKChwaWVjZSkgPT4gISFwaWVjZS5hdHRhY2htZW50KVxuICB9XG5cbiAgZ2V0QXR0YWNobWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0YWNobWVudFBpZWNlcygpLm1hcCgocGllY2UpID0+IHBpZWNlLmF0dGFjaG1lbnQpXG4gIH1cblxuICBnZXRBdHRhY2htZW50QW5kUG9zaXRpb25CeUlkKGF0dGFjaG1lbnRJZCkge1xuICAgIGxldCBwb3NpdGlvbiA9IDBcbiAgICBmb3IgKGNvbnN0IHBpZWNlIG9mIHRoaXMucGllY2VMaXN0LnRvQXJyYXkoKSkge1xuICAgICAgaWYgKHBpZWNlLmF0dGFjaG1lbnQ/LmlkID09PSBhdHRhY2htZW50SWQpIHtcbiAgICAgICAgcmV0dXJuIHsgYXR0YWNobWVudDogcGllY2UuYXR0YWNobWVudCwgcG9zaXRpb24gfVxuICAgICAgfVxuICAgICAgcG9zaXRpb24gKz0gcGllY2UubGVuZ3RoXG4gICAgfVxuICAgIHJldHVybiB7IGF0dGFjaG1lbnQ6IG51bGwsIHBvc2l0aW9uOiBudWxsIH1cbiAgfVxuXG4gIGdldEF0dGFjaG1lbnRCeUlkKGF0dGFjaG1lbnRJZCkge1xuICAgIGNvbnN0IHsgYXR0YWNobWVudCB9ID0gdGhpcy5nZXRBdHRhY2htZW50QW5kUG9zaXRpb25CeUlkKGF0dGFjaG1lbnRJZClcbiAgICByZXR1cm4gYXR0YWNobWVudFxuICB9XG5cbiAgZ2V0UmFuZ2VPZkF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGNvbnN0IGF0dGFjaG1lbnRBbmRQb3NpdGlvbiA9IHRoaXMuZ2V0QXR0YWNobWVudEFuZFBvc2l0aW9uQnlJZChhdHRhY2htZW50LmlkKVxuICAgIGNvbnN0IHBvc2l0aW9uID0gYXR0YWNobWVudEFuZFBvc2l0aW9uLnBvc2l0aW9uXG4gICAgYXR0YWNobWVudCA9IGF0dGFjaG1lbnRBbmRQb3NpdGlvbi5hdHRhY2htZW50XG4gICAgaWYgKGF0dGFjaG1lbnQpIHtcbiAgICAgIHJldHVybiBbIHBvc2l0aW9uLCBwb3NpdGlvbiArIDEgXVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUF0dHJpYnV0ZXNGb3JBdHRhY2htZW50KGF0dHJpYnV0ZXMsIGF0dGFjaG1lbnQpIHtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZkF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICBpZiAocmFuZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmFkZEF0dHJpYnV0ZXNBdFJhbmdlKGF0dHJpYnV0ZXMsIHJhbmdlKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgfVxuXG4gIGdldExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5waWVjZUxpc3QuZ2V0RW5kUG9zaXRpb24oKVxuICB9XG5cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRMZW5ndGgoKSA9PT0gMFxuICB9XG5cbiAgaXNFcXVhbFRvKHRleHQpIHtcbiAgICByZXR1cm4gc3VwZXIuaXNFcXVhbFRvKHRleHQpIHx8IHRleHQ/LnBpZWNlTGlzdD8uaXNFcXVhbFRvKHRoaXMucGllY2VMaXN0KVxuICB9XG5cbiAgaXNCbG9ja0JyZWFrKCkge1xuICAgIHJldHVybiB0aGlzLmdldExlbmd0aCgpID09PSAxICYmIHRoaXMucGllY2VMaXN0LmdldE9iamVjdEF0SW5kZXgoMCkuaXNCbG9ja0JyZWFrKClcbiAgfVxuXG4gIGVhY2hQaWVjZShjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnBpZWNlTGlzdC5lYWNoT2JqZWN0KGNhbGxiYWNrKVxuICB9XG5cbiAgZ2V0UGllY2VzKCkge1xuICAgIHJldHVybiB0aGlzLnBpZWNlTGlzdC50b0FycmF5KClcbiAgfVxuXG4gIGdldFBpZWNlQXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgIHJldHVybiB0aGlzLnBpZWNlTGlzdC5nZXRPYmplY3RBdFBvc2l0aW9uKHBvc2l0aW9uKVxuICB9XG5cbiAgY29udGVudHNGb3JJbnNwZWN0aW9uKCkge1xuICAgIHJldHVybiB7IHBpZWNlTGlzdDogdGhpcy5waWVjZUxpc3QuaW5zcGVjdCgpIH1cbiAgfVxuXG4gIHRvU2VyaWFsaXphYmxlVGV4dCgpIHtcbiAgICBjb25zdCBwaWVjZUxpc3QgPSB0aGlzLnBpZWNlTGlzdC5zZWxlY3RTcGxpdHRhYmxlTGlzdCgocGllY2UpID0+IHBpZWNlLmlzU2VyaWFsaXphYmxlKCkpXG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhQaWVjZUxpc3QocGllY2VMaXN0KVxuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMucGllY2VMaXN0LnRvU3RyaW5nKClcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy5waWVjZUxpc3QudG9KU09OKClcbiAgfVxuXG4gIHRvQ29uc29sZSgpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5waWVjZUxpc3QudG9BcnJheSgpLm1hcCgocGllY2UpID0+IEpTT04ucGFyc2UocGllY2UudG9Db25zb2xlKCkpKSlcbiAgfVxuXG4gIC8vIEJJRElcblxuICBnZXREaXJlY3Rpb24oKSB7XG4gICAgcmV0dXJuIGdldERpcmVjdGlvbih0aGlzLnRvU3RyaW5nKCkpXG4gIH1cblxuICBpc1JUTCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXREaXJlY3Rpb24oKSA9PT0gXCJydGxcIlxuICB9XG59XG4iLCAiaW1wb3J0IFRyaXhPYmplY3QgZnJvbSBcInRyaXgvY29yZS9vYmplY3RcIiAvLyBEb24ndCBvdmVycmlkZSB3aW5kb3cuT2JqZWN0XG5pbXBvcnQgVGV4dCBmcm9tIFwidHJpeC9tb2RlbHMvdGV4dFwiXG5cbmltcG9ydCB7XG4gIGFycmF5c0FyZUVxdWFsLFxuICBnZXRCbG9ja0NvbmZpZyxcbiAgZ2V0TGlzdEF0dHJpYnV0ZU5hbWVzLFxuICBvYmplY3RzQXJlRXF1YWwsXG4gIHNwbGljZUFycmF5LFxufSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCbG9jayBleHRlbmRzIFRyaXhPYmplY3Qge1xuICBzdGF0aWMgZnJvbUpTT04oYmxvY2tKU09OKSB7XG4gICAgY29uc3QgdGV4dCA9IFRleHQuZnJvbUpTT04oYmxvY2tKU09OLnRleHQpXG4gICAgcmV0dXJuIG5ldyB0aGlzKHRleHQsIGJsb2NrSlNPTi5hdHRyaWJ1dGVzLCBibG9ja0pTT04uaHRtbEF0dHJpYnV0ZXMpXG4gIH1cblxuICBjb25zdHJ1Y3Rvcih0ZXh0LCBhdHRyaWJ1dGVzLCBodG1sQXR0cmlidXRlcykge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLnRleHQgPSBhcHBseUJsb2NrQnJlYWtUb1RleHQodGV4dCB8fCBuZXcgVGV4dCgpKVxuICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgfHwgW11cbiAgICB0aGlzLmh0bWxBdHRyaWJ1dGVzID0gaHRtbEF0dHJpYnV0ZXMgfHwge31cbiAgfVxuXG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dC5pc0Jsb2NrQnJlYWsoKVxuICB9XG5cbiAgaXNFcXVhbFRvKGJsb2NrKSB7XG4gICAgaWYgKHN1cGVyLmlzRXF1YWxUbyhibG9jaykpIHJldHVybiB0cnVlXG5cbiAgICByZXR1cm4gdGhpcy50ZXh0LmlzRXF1YWxUbyhibG9jaz8udGV4dCkgJiYgYXJyYXlzQXJlRXF1YWwodGhpcy5hdHRyaWJ1dGVzLCBibG9jaz8uYXR0cmlidXRlcykgJiYgb2JqZWN0c0FyZUVxdWFsKHRoaXMuaHRtbEF0dHJpYnV0ZXMsIGJsb2NrPy5odG1sQXR0cmlidXRlcylcbiAgfVxuXG4gIGNvcHlXaXRoVGV4dCh0ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBCbG9jayh0ZXh0LCB0aGlzLmF0dHJpYnV0ZXMsIHRoaXMuaHRtbEF0dHJpYnV0ZXMpXG4gIH1cblxuICBjb3B5V2l0aG91dFRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhUZXh0KG51bGwpXG4gIH1cblxuICBjb3B5V2l0aEF0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICAgIHJldHVybiBuZXcgQmxvY2sodGhpcy50ZXh0LCBhdHRyaWJ1dGVzLCB0aGlzLmh0bWxBdHRyaWJ1dGVzKVxuICB9XG5cbiAgY29weVdpdGhvdXRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiB0aGlzLmNvcHlXaXRoQXR0cmlidXRlcyhudWxsKVxuICB9XG5cbiAgY29weVVzaW5nT2JqZWN0TWFwKG9iamVjdE1hcCkge1xuICAgIGNvbnN0IG1hcHBlZFRleHQgPSBvYmplY3RNYXAuZmluZCh0aGlzLnRleHQpXG4gICAgaWYgKG1hcHBlZFRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvcHlXaXRoVGV4dChtYXBwZWRUZXh0KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jb3B5V2l0aFRleHQodGhpcy50ZXh0LmNvcHlVc2luZ09iamVjdE1hcChvYmplY3RNYXApKVxuICAgIH1cbiAgfVxuXG4gIGFkZEF0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzLmNvbmNhdChleHBhbmRBdHRyaWJ1dGUoYXR0cmlidXRlKSlcbiAgICByZXR1cm4gdGhpcy5jb3B5V2l0aEF0dHJpYnV0ZXMoYXR0cmlidXRlcylcbiAgfVxuXG4gIGFkZEhUTUxBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGNvbnN0IGh0bWxBdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5odG1sQXR0cmlidXRlcywgeyBbYXR0cmlidXRlXTogdmFsdWUgfSlcbiAgICByZXR1cm4gbmV3IEJsb2NrKHRoaXMudGV4dCwgdGhpcy5hdHRyaWJ1dGVzLCBodG1sQXR0cmlidXRlcylcbiAgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcbiAgICBjb25zdCB7IGxpc3RBdHRyaWJ1dGUgfSA9IGdldEJsb2NrQ29uZmlnKGF0dHJpYnV0ZSlcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gcmVtb3ZlTGFzdFZhbHVlKHJlbW92ZUxhc3RWYWx1ZSh0aGlzLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZSksIGxpc3RBdHRyaWJ1dGUpXG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpXG4gIH1cblxuICByZW1vdmVMYXN0QXR0cmlidXRlKCkge1xuICAgIHJldHVybiB0aGlzLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmdldExhc3RBdHRyaWJ1dGUoKSlcbiAgfVxuXG4gIGdldExhc3RBdHRyaWJ1dGUoKSB7XG4gICAgcmV0dXJuIGdldExhc3RFbGVtZW50KHRoaXMuYXR0cmlidXRlcylcbiAgfVxuXG4gIGdldEF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5zbGljZSgwKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlTGV2ZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5sZW5ndGhcbiAgfVxuXG4gIGdldEF0dHJpYnV0ZUF0TGV2ZWwobGV2ZWwpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2xldmVsIC0gMV1cbiAgfVxuXG4gIGhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGVOYW1lKVxuICB9XG5cbiAgaGFzQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGVMZXZlbCgpID4gMFxuICB9XG5cbiAgZ2V0TGFzdE5lc3RhYmxlQXR0cmlidXRlKCkge1xuICAgIHJldHVybiBnZXRMYXN0RWxlbWVudCh0aGlzLmdldE5lc3RhYmxlQXR0cmlidXRlcygpKVxuICB9XG5cbiAgZ2V0TmVzdGFibGVBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZmlsdGVyKChhdHRyaWJ1dGUpID0+IGdldEJsb2NrQ29uZmlnKGF0dHJpYnV0ZSkubmVzdGFibGUpXG4gIH1cblxuICBnZXROZXN0aW5nTGV2ZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TmVzdGFibGVBdHRyaWJ1dGVzKCkubGVuZ3RoXG4gIH1cblxuICBkZWNyZWFzZU5lc3RpbmdMZXZlbCgpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGUgPSB0aGlzLmdldExhc3ROZXN0YWJsZUF0dHJpYnV0ZSgpXG4gICAgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH1cblxuICBpbmNyZWFzZU5lc3RpbmdMZXZlbCgpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGUgPSB0aGlzLmdldExhc3ROZXN0YWJsZUF0dHJpYnV0ZSgpXG4gICAgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmF0dHJpYnV0ZXMubGFzdEluZGV4T2YoYXR0cmlidXRlKVxuICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHNwbGljZUFycmF5KHRoaXMuYXR0cmlidXRlcywgaW5kZXggKyAxLCAwLCAuLi5leHBhbmRBdHRyaWJ1dGUoYXR0cmlidXRlKSlcbiAgICAgIHJldHVybiB0aGlzLmNvcHlXaXRoQXR0cmlidXRlcyhhdHRyaWJ1dGVzKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgfVxuXG4gIGdldExpc3RJdGVtQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmZpbHRlcigoYXR0cmlidXRlKSA9PiBnZXRCbG9ja0NvbmZpZyhhdHRyaWJ1dGUpLmxpc3RBdHRyaWJ1dGUpXG4gIH1cblxuICBpc0xpc3RJdGVtKCkge1xuICAgIHJldHVybiBnZXRCbG9ja0NvbmZpZyh0aGlzLmdldExhc3RBdHRyaWJ1dGUoKSk/Lmxpc3RBdHRyaWJ1dGVcbiAgfVxuXG4gIGlzVGVybWluYWxCbG9jaygpIHtcbiAgICByZXR1cm4gZ2V0QmxvY2tDb25maWcodGhpcy5nZXRMYXN0QXR0cmlidXRlKCkpPy50ZXJtaW5hbFxuICB9XG5cbiAgYnJlYWtzT25SZXR1cm4oKSB7XG4gICAgcmV0dXJuIGdldEJsb2NrQ29uZmlnKHRoaXMuZ2V0TGFzdEF0dHJpYnV0ZSgpKT8uYnJlYWtPblJldHVyblxuICB9XG5cbiAgZmluZExpbmVCcmVha0luRGlyZWN0aW9uRnJvbVBvc2l0aW9uKGRpcmVjdGlvbiwgcG9zaXRpb24pIHtcbiAgICBjb25zdCBzdHJpbmcgPSB0aGlzLnRvU3RyaW5nKClcbiAgICBsZXQgcmVzdWx0XG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgXCJmb3J3YXJkXCI6XG4gICAgICAgIHJlc3VsdCA9IHN0cmluZy5pbmRleE9mKFwiXFxuXCIsIHBvc2l0aW9uKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcImJhY2t3YXJkXCI6XG4gICAgICAgIHJlc3VsdCA9IHN0cmluZy5zbGljZSgwLCBwb3NpdGlvbikubGFzdEluZGV4T2YoXCJcXG5cIilcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgfVxuXG4gIGNvbnRlbnRzRm9ySW5zcGVjdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogdGhpcy50ZXh0Lmluc3BlY3QoKSxcbiAgICAgIGF0dHJpYnV0ZXM6IHRoaXMuYXR0cmlidXRlcyxcbiAgICB9XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0LnRvU3RyaW5nKClcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogdGhpcy50ZXh0LFxuICAgICAgYXR0cmlidXRlczogdGhpcy5hdHRyaWJ1dGVzLFxuICAgICAgaHRtbEF0dHJpYnV0ZXM6IHRoaXMuaHRtbEF0dHJpYnV0ZXMsXG4gICAgfVxuICB9XG5cbiAgLy8gQklESVxuXG4gIGdldERpcmVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0LmdldERpcmVjdGlvbigpXG4gIH1cblxuICBpc1JUTCgpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0LmlzUlRMKClcbiAgfVxuXG4gIC8vIFNwbGl0dGFibGVcblxuICBnZXRMZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dC5nZXRMZW5ndGgoKVxuICB9XG5cbiAgY2FuQmVDb25zb2xpZGF0ZWRXaXRoKGJsb2NrKSB7XG4gICAgcmV0dXJuICF0aGlzLmhhc0F0dHJpYnV0ZXMoKSAmJiAhYmxvY2suaGFzQXR0cmlidXRlcygpICYmIHRoaXMuZ2V0RGlyZWN0aW9uKCkgPT09IGJsb2NrLmdldERpcmVjdGlvbigpXG4gIH1cblxuICBjb25zb2xpZGF0ZVdpdGgoYmxvY2spIHtcbiAgICBjb25zdCBuZXdsaW5lVGV4dCA9IFRleHQudGV4dEZvclN0cmluZ1dpdGhBdHRyaWJ1dGVzKFwiXFxuXCIpXG4gICAgY29uc3QgdGV4dCA9IHRoaXMuZ2V0VGV4dFdpdGhvdXRCbG9ja0JyZWFrKCkuYXBwZW5kVGV4dChuZXdsaW5lVGV4dClcbiAgICByZXR1cm4gdGhpcy5jb3B5V2l0aFRleHQodGV4dC5hcHBlbmRUZXh0KGJsb2NrLnRleHQpKVxuICB9XG5cbiAgc3BsaXRBdE9mZnNldChvZmZzZXQpIHtcbiAgICBsZXQgbGVmdCwgcmlnaHRcbiAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICBsZWZ0ID0gbnVsbFxuICAgICAgcmlnaHQgPSB0aGlzXG4gICAgfSBlbHNlIGlmIChvZmZzZXQgPT09IHRoaXMuZ2V0TGVuZ3RoKCkpIHtcbiAgICAgIGxlZnQgPSB0aGlzXG4gICAgICByaWdodCA9IG51bGxcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IHRoaXMuY29weVdpdGhUZXh0KHRoaXMudGV4dC5nZXRUZXh0QXRSYW5nZShbIDAsIG9mZnNldCBdKSlcbiAgICAgIHJpZ2h0ID0gdGhpcy5jb3B5V2l0aFRleHQodGhpcy50ZXh0LmdldFRleHRBdFJhbmdlKFsgb2Zmc2V0LCB0aGlzLmdldExlbmd0aCgpIF0pKVxuICAgIH1cbiAgICByZXR1cm4gWyBsZWZ0LCByaWdodCBdXG4gIH1cblxuICBnZXRCbG9ja0JyZWFrUG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dC5nZXRMZW5ndGgoKSAtIDFcbiAgfVxuXG4gIGdldFRleHRXaXRob3V0QmxvY2tCcmVhaygpIHtcbiAgICBpZiAodGV4dEVuZHNJbkJsb2NrQnJlYWsodGhpcy50ZXh0KSkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dC5nZXRUZXh0QXRSYW5nZShbIDAsIHRoaXMuZ2V0QmxvY2tCcmVha1Bvc2l0aW9uKCkgXSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dC5jb3B5KClcbiAgICB9XG4gIH1cblxuICAvLyBHcm91cGluZ1xuXG4gIGNhbkJlR3JvdXBlZChkZXB0aCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbZGVwdGhdXG4gIH1cblxuICBjYW5CZUdyb3VwZWRXaXRoKG90aGVyQmxvY2ssIGRlcHRoKSB7XG4gICAgY29uc3Qgb3RoZXJBdHRyaWJ1dGVzID0gb3RoZXJCbG9jay5nZXRBdHRyaWJ1dGVzKClcbiAgICBjb25zdCBvdGhlckF0dHJpYnV0ZSA9IG90aGVyQXR0cmlidXRlc1tkZXB0aF1cbiAgICBjb25zdCBhdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZXNbZGVwdGhdXG5cbiAgICByZXR1cm4gKFxuICAgICAgYXR0cmlidXRlID09PSBvdGhlckF0dHJpYnV0ZSAmJlxuICAgICAgIShnZXRCbG9ja0NvbmZpZyhhdHRyaWJ1dGUpLmdyb3VwID09PSBmYWxzZSAmJiAhZ2V0TGlzdEF0dHJpYnV0ZU5hbWVzKCkuaW5jbHVkZXMob3RoZXJBdHRyaWJ1dGVzW2RlcHRoICsgMV0pKSAmJlxuICAgICAgKHRoaXMuZ2V0RGlyZWN0aW9uKCkgPT09IG90aGVyQmxvY2suZ2V0RGlyZWN0aW9uKCkgfHwgb3RoZXJCbG9jay5pc0VtcHR5KCkpXG4gICAgKVxuICB9XG59XG5cbi8vIEJsb2NrIGJyZWFrc1xuXG5jb25zdCBhcHBseUJsb2NrQnJlYWtUb1RleHQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHRleHQgPSB1bm1hcmtFeGlzdGluZ0lubmVyQmxvY2tCcmVha3NJblRleHQodGV4dClcbiAgdGV4dCA9IGFkZEJsb2NrQnJlYWtUb1RleHQodGV4dClcbiAgcmV0dXJuIHRleHRcbn1cblxuY29uc3QgdW5tYXJrRXhpc3RpbmdJbm5lckJsb2NrQnJlYWtzSW5UZXh0ID0gZnVuY3Rpb24odGV4dCkge1xuICBsZXQgbW9kaWZpZWQgPSBmYWxzZVxuICBjb25zdCBwaWVjZXMgPSB0ZXh0LmdldFBpZWNlcygpXG5cbiAgbGV0IGlubmVyUGllY2VzID0gcGllY2VzLnNsaWNlKDAsIHBpZWNlcy5sZW5ndGggLSAxKVxuICBjb25zdCBsYXN0UGllY2UgPSBwaWVjZXNbcGllY2VzLmxlbmd0aCAtIDFdXG5cbiAgaWYgKCFsYXN0UGllY2UpIHJldHVybiB0ZXh0XG5cbiAgaW5uZXJQaWVjZXMgPSBpbm5lclBpZWNlcy5tYXAoKHBpZWNlKSA9PiB7XG4gICAgaWYgKHBpZWNlLmlzQmxvY2tCcmVhaygpKSB7XG4gICAgICBtb2RpZmllZCA9IHRydWVcbiAgICAgIHJldHVybiB1bm1hcmtCbG9ja0JyZWFrUGllY2UocGllY2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwaWVjZVxuICAgIH1cbiAgfSlcblxuICBpZiAobW9kaWZpZWQpIHtcbiAgICByZXR1cm4gbmV3IFRleHQoWyAuLi5pbm5lclBpZWNlcywgbGFzdFBpZWNlIF0pXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxufVxuXG5jb25zdCBibG9ja0JyZWFrVGV4dCA9IFRleHQudGV4dEZvclN0cmluZ1dpdGhBdHRyaWJ1dGVzKFwiXFxuXCIsIHsgYmxvY2tCcmVhazogdHJ1ZSB9KVxuXG5jb25zdCBhZGRCbG9ja0JyZWFrVG9UZXh0ID0gZnVuY3Rpb24odGV4dCkge1xuICBpZiAodGV4dEVuZHNJbkJsb2NrQnJlYWsodGV4dCkpIHtcbiAgICByZXR1cm4gdGV4dFxuICB9IGVsc2Uge1xuICAgIHJldHVybiB0ZXh0LmFwcGVuZFRleHQoYmxvY2tCcmVha1RleHQpXG4gIH1cbn1cblxuY29uc3QgdGV4dEVuZHNJbkJsb2NrQnJlYWsgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIGNvbnN0IGxlbmd0aCA9IHRleHQuZ2V0TGVuZ3RoKClcbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGNvbnN0IGVuZFRleHQgPSB0ZXh0LmdldFRleHRBdFJhbmdlKFsgbGVuZ3RoIC0gMSwgbGVuZ3RoIF0pXG4gIHJldHVybiBlbmRUZXh0LmlzQmxvY2tCcmVhaygpXG59XG5cbmNvbnN0IHVubWFya0Jsb2NrQnJlYWtQaWVjZSA9IChwaWVjZSkgPT4gcGllY2UuY29weVdpdGhvdXRBdHRyaWJ1dGUoXCJibG9ja0JyZWFrXCIpXG5cbi8vIEF0dHJpYnV0ZXNcblxuY29uc3QgZXhwYW5kQXR0cmlidXRlID0gZnVuY3Rpb24oYXR0cmlidXRlKSB7XG4gIGNvbnN0IHsgbGlzdEF0dHJpYnV0ZSB9ID0gZ2V0QmxvY2tDb25maWcoYXR0cmlidXRlKVxuICBpZiAobGlzdEF0dHJpYnV0ZSkge1xuICAgIHJldHVybiBbIGxpc3RBdHRyaWJ1dGUsIGF0dHJpYnV0ZSBdXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFsgYXR0cmlidXRlIF1cbiAgfVxufVxuXG4vLyBBcnJheSBoZWxwZXJzXG5cbmNvbnN0IGdldExhc3RFbGVtZW50ID0gKGFycmF5KSA9PiBhcnJheS5zbGljZSgtMSlbMF1cblxuY29uc3QgcmVtb3ZlTGFzdFZhbHVlID0gZnVuY3Rpb24oYXJyYXksIHZhbHVlKSB7XG4gIGNvbnN0IGluZGV4ID0gYXJyYXkubGFzdEluZGV4T2YodmFsdWUpXG4gIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICByZXR1cm4gYXJyYXlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3BsaWNlQXJyYXkoYXJyYXksIGluZGV4LCAxKVxuICB9XG59XG4iLCAiaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5pbXBvcnQgVHJpeE9iamVjdCBmcm9tIFwidHJpeC9jb3JlL29iamVjdFwiIC8vIERvbid0IG92ZXJyaWRlIHdpbmRvdy5PYmplY3RcblxuaW1wb3J0IFRleHQgZnJvbSBcInRyaXgvbW9kZWxzL3RleHRcIlxuaW1wb3J0IEJsb2NrIGZyb20gXCJ0cml4L21vZGVscy9ibG9ja1wiXG5pbXBvcnQgU3BsaXR0YWJsZUxpc3QgZnJvbSBcInRyaXgvbW9kZWxzL3NwbGl0dGFibGVfbGlzdFwiXG5pbXBvcnQgSGFzaCBmcm9tIFwidHJpeC9jb3JlL2NvbGxlY3Rpb25zL2hhc2hcIlxuaW1wb3J0IE9iamVjdE1hcCBmcm9tIFwidHJpeC9jb3JlL2NvbGxlY3Rpb25zL29iamVjdF9tYXBcIlxuXG5pbXBvcnQgeyBhcnJheXNBcmVFcXVhbCwgZ2V0QmxvY2tDb25maWcsIG5vcm1hbGl6ZVJhbmdlLCByYW5nZUlzQ29sbGFwc2VkIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9jdW1lbnQgZXh0ZW5kcyBUcml4T2JqZWN0IHtcbiAgc3RhdGljIGZyb21KU09OKGRvY3VtZW50SlNPTikge1xuICAgIGNvbnN0IGJsb2NrcyA9IEFycmF5LmZyb20oZG9jdW1lbnRKU09OKS5tYXAoKGJsb2NrSlNPTikgPT4gQmxvY2suZnJvbUpTT04oYmxvY2tKU09OKSlcbiAgICByZXR1cm4gbmV3IHRoaXMoYmxvY2tzKVxuICB9XG5cbiAgc3RhdGljIGZyb21TdHJpbmcoc3RyaW5nLCB0ZXh0QXR0cmlidXRlcykge1xuICAgIGNvbnN0IHRleHQgPSBUZXh0LnRleHRGb3JTdHJpbmdXaXRoQXR0cmlidXRlcyhzdHJpbmcsIHRleHRBdHRyaWJ1dGVzKVxuICAgIHJldHVybiBuZXcgdGhpcyhbIG5ldyBCbG9jayh0ZXh0KSBdKVxuICB9XG5cbiAgY29uc3RydWN0b3IoYmxvY2tzID0gW10pIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgaWYgKGJsb2Nrcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGJsb2NrcyA9IFsgbmV3IEJsb2NrKCkgXVxuICAgIH1cbiAgICB0aGlzLmJsb2NrTGlzdCA9IFNwbGl0dGFibGVMaXN0LmJveChibG9ja3MpXG4gIH1cblxuICBpc0VtcHR5KCkge1xuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5nZXRCbG9ja0F0SW5kZXgoMClcbiAgICByZXR1cm4gdGhpcy5ibG9ja0xpc3QubGVuZ3RoID09PSAxICYmIGJsb2NrLmlzRW1wdHkoKSAmJiAhYmxvY2suaGFzQXR0cmlidXRlcygpXG4gIH1cblxuICBjb3B5KG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGJsb2NrcyA9IG9wdGlvbnMuY29uc29saWRhdGVCbG9ja3MgPyB0aGlzLmJsb2NrTGlzdC5jb25zb2xpZGF0ZSgpLnRvQXJyYXkoKSA6IHRoaXMuYmxvY2tMaXN0LnRvQXJyYXkoKVxuXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrcylcbiAgfVxuXG4gIGNvcHlVc2luZ09iamVjdHNGcm9tRG9jdW1lbnQoc291cmNlRG9jdW1lbnQpIHtcbiAgICBjb25zdCBvYmplY3RNYXAgPSBuZXcgT2JqZWN0TWFwKHNvdXJjZURvY3VtZW50LmdldE9iamVjdHMoKSlcbiAgICByZXR1cm4gdGhpcy5jb3B5VXNpbmdPYmplY3RNYXAob2JqZWN0TWFwKVxuICB9XG5cbiAgY29weVVzaW5nT2JqZWN0TWFwKG9iamVjdE1hcCkge1xuICAgIGNvbnN0IGJsb2NrcyA9IHRoaXMuZ2V0QmxvY2tzKCkubWFwKChibG9jaykgPT4ge1xuICAgICAgY29uc3QgbWFwcGVkQmxvY2sgPSBvYmplY3RNYXAuZmluZChibG9jaylcbiAgICAgIHJldHVybiBtYXBwZWRCbG9jayB8fCBibG9jay5jb3B5VXNpbmdPYmplY3RNYXAob2JqZWN0TWFwKVxuICAgIH0pXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrcylcbiAgfVxuXG4gIGNvcHlXaXRoQmFzZUJsb2NrQXR0cmlidXRlcyhibG9ja0F0dHJpYnV0ZXMgPSBbXSkge1xuICAgIGNvbnN0IGJsb2NrcyA9IHRoaXMuZ2V0QmxvY2tzKCkubWFwKChibG9jaykgPT4ge1xuICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGJsb2NrQXR0cmlidXRlcy5jb25jYXQoYmxvY2suZ2V0QXR0cmlidXRlcygpKVxuICAgICAgcmV0dXJuIGJsb2NrLmNvcHlXaXRoQXR0cmlidXRlcyhhdHRyaWJ1dGVzKVxuICAgIH0pXG5cbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoYmxvY2tzKVxuICB9XG5cbiAgcmVwbGFjZUJsb2NrKG9sZEJsb2NrLCBuZXdCbG9jaykge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5ibG9ja0xpc3QuaW5kZXhPZihvbGRCbG9jaylcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5ibG9ja0xpc3QucmVwbGFjZU9iamVjdEF0SW5kZXgobmV3QmxvY2ssIGluZGV4KSlcbiAgfVxuXG4gIGluc2VydERvY3VtZW50QXRSYW5nZShkb2N1bWVudCwgcmFuZ2UpIHtcbiAgICBjb25zdCB7IGJsb2NrTGlzdCB9ID0gZG9jdW1lbnRcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHJhbmdlKVxuICAgIGxldCBbIHBvc2l0aW9uIF0gPSByYW5nZVxuICAgIGNvbnN0IHsgaW5kZXgsIG9mZnNldCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihwb3NpdGlvbilcblxuICAgIGxldCByZXN1bHQgPSB0aGlzXG4gICAgY29uc3QgYmxvY2sgPSB0aGlzLmdldEJsb2NrQXRQb3NpdGlvbihwb3NpdGlvbilcblxuICAgIGlmIChyYW5nZUlzQ29sbGFwc2VkKHJhbmdlKSAmJiBibG9jay5pc0VtcHR5KCkgJiYgIWJsb2NrLmhhc0F0dHJpYnV0ZXMoKSkge1xuICAgICAgcmVzdWx0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IocmVzdWx0LmJsb2NrTGlzdC5yZW1vdmVPYmplY3RBdEluZGV4KGluZGV4KSlcbiAgICB9IGVsc2UgaWYgKGJsb2NrLmdldEJsb2NrQnJlYWtQb3NpdGlvbigpID09PSBvZmZzZXQpIHtcbiAgICAgIHBvc2l0aW9uKytcbiAgICB9XG5cbiAgICByZXN1bHQgPSByZXN1bHQucmVtb3ZlVGV4dEF0UmFuZ2UocmFuZ2UpXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHJlc3VsdC5ibG9ja0xpc3QuaW5zZXJ0U3BsaXR0YWJsZUxpc3RBdFBvc2l0aW9uKGJsb2NrTGlzdCwgcG9zaXRpb24pKVxuICB9XG5cbiAgbWVyZ2VEb2N1bWVudEF0UmFuZ2UoZG9jdW1lbnQsIHJhbmdlKSB7XG4gICAgbGV0IGZvcm1hdHRlZERvY3VtZW50LCByZXN1bHRcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IFsgc3RhcnRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBjb25zdCBzdGFydExvY2F0aW9uID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihzdGFydFBvc2l0aW9uKVxuICAgIGNvbnN0IGJsb2NrQXR0cmlidXRlcyA9IHRoaXMuZ2V0QmxvY2tBdEluZGV4KHN0YXJ0TG9jYXRpb24uaW5kZXgpLmdldEF0dHJpYnV0ZXMoKVxuICAgIGNvbnN0IGJhc2VCbG9ja0F0dHJpYnV0ZXMgPSBkb2N1bWVudC5nZXRCYXNlQmxvY2tBdHRyaWJ1dGVzKClcbiAgICBjb25zdCB0cmFpbGluZ0Jsb2NrQXR0cmlidXRlcyA9IGJsb2NrQXR0cmlidXRlcy5zbGljZSgtYmFzZUJsb2NrQXR0cmlidXRlcy5sZW5ndGgpXG5cbiAgICBpZiAoYXJyYXlzQXJlRXF1YWwoYmFzZUJsb2NrQXR0cmlidXRlcywgdHJhaWxpbmdCbG9ja0F0dHJpYnV0ZXMpKSB7XG4gICAgICBjb25zdCBsZWFkaW5nQmxvY2tBdHRyaWJ1dGVzID0gYmxvY2tBdHRyaWJ1dGVzLnNsaWNlKDAsIC1iYXNlQmxvY2tBdHRyaWJ1dGVzLmxlbmd0aClcbiAgICAgIGZvcm1hdHRlZERvY3VtZW50ID0gZG9jdW1lbnQuY29weVdpdGhCYXNlQmxvY2tBdHRyaWJ1dGVzKGxlYWRpbmdCbG9ja0F0dHJpYnV0ZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1hdHRlZERvY3VtZW50ID0gZG9jdW1lbnQuY29weSh7IGNvbnNvbGlkYXRlQmxvY2tzOiB0cnVlIH0pLmNvcHlXaXRoQmFzZUJsb2NrQXR0cmlidXRlcyhibG9ja0F0dHJpYnV0ZXMpXG4gICAgfVxuXG4gICAgY29uc3QgYmxvY2tDb3VudCA9IGZvcm1hdHRlZERvY3VtZW50LmdldEJsb2NrQ291bnQoKVxuICAgIGNvbnN0IGZpcnN0QmxvY2sgPSBmb3JtYXR0ZWREb2N1bWVudC5nZXRCbG9ja0F0SW5kZXgoMClcblxuICAgIGlmIChhcnJheXNBcmVFcXVhbChibG9ja0F0dHJpYnV0ZXMsIGZpcnN0QmxvY2suZ2V0QXR0cmlidXRlcygpKSkge1xuICAgICAgY29uc3QgZmlyc3RUZXh0ID0gZmlyc3RCbG9jay5nZXRUZXh0V2l0aG91dEJsb2NrQnJlYWsoKVxuICAgICAgcmVzdWx0ID0gdGhpcy5pbnNlcnRUZXh0QXRSYW5nZShmaXJzdFRleHQsIHJhbmdlKVxuXG4gICAgICBpZiAoYmxvY2tDb3VudCA+IDEpIHtcbiAgICAgICAgZm9ybWF0dGVkRG9jdW1lbnQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihmb3JtYXR0ZWREb2N1bWVudC5nZXRCbG9ja3MoKS5zbGljZSgxKSlcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZmlyc3RUZXh0LmdldExlbmd0aCgpXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5pbnNlcnREb2N1bWVudEF0UmFuZ2UoZm9ybWF0dGVkRG9jdW1lbnQsIHBvc2l0aW9uKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB0aGlzLmluc2VydERvY3VtZW50QXRSYW5nZShmb3JtYXR0ZWREb2N1bWVudCwgcmFuZ2UpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgaW5zZXJ0VGV4dEF0UmFuZ2UodGV4dCwgcmFuZ2UpIHtcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IFsgc3RhcnRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBjb25zdCB7IGluZGV4LCBvZmZzZXQgfSA9IHRoaXMubG9jYXRpb25Gcm9tUG9zaXRpb24oc3RhcnRQb3NpdGlvbilcblxuICAgIGNvbnN0IGRvY3VtZW50ID0gdGhpcy5yZW1vdmVUZXh0QXRSYW5nZShyYW5nZSlcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoXG4gICAgICBkb2N1bWVudC5ibG9ja0xpc3QuZWRpdE9iamVjdEF0SW5kZXgoaW5kZXgsIChibG9jaykgPT5cbiAgICAgICAgYmxvY2suY29weVdpdGhUZXh0KGJsb2NrLnRleHQuaW5zZXJ0VGV4dEF0UG9zaXRpb24odGV4dCwgb2Zmc2V0KSlcbiAgICAgIClcbiAgICApXG4gIH1cblxuICByZW1vdmVUZXh0QXRSYW5nZShyYW5nZSkge1xuICAgIGxldCBibG9ja3NcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IFsgbGVmdFBvc2l0aW9uLCByaWdodFBvc2l0aW9uIF0gPSByYW5nZVxuICAgIGlmIChyYW5nZUlzQ29sbGFwc2VkKHJhbmdlKSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgY29uc3QgWyBsZWZ0TG9jYXRpb24sIHJpZ2h0TG9jYXRpb24gXSA9IEFycmF5LmZyb20odGhpcy5sb2NhdGlvblJhbmdlRnJvbVJhbmdlKHJhbmdlKSlcblxuICAgIGNvbnN0IGxlZnRJbmRleCA9IGxlZnRMb2NhdGlvbi5pbmRleFxuICAgIGNvbnN0IGxlZnRPZmZzZXQgPSBsZWZ0TG9jYXRpb24ub2Zmc2V0XG4gICAgY29uc3QgbGVmdEJsb2NrID0gdGhpcy5nZXRCbG9ja0F0SW5kZXgobGVmdEluZGV4KVxuXG4gICAgY29uc3QgcmlnaHRJbmRleCA9IHJpZ2h0TG9jYXRpb24uaW5kZXhcbiAgICBjb25zdCByaWdodE9mZnNldCA9IHJpZ2h0TG9jYXRpb24ub2Zmc2V0XG4gICAgY29uc3QgcmlnaHRCbG9jayA9IHRoaXMuZ2V0QmxvY2tBdEluZGV4KHJpZ2h0SW5kZXgpXG5cbiAgICBjb25zdCByZW1vdmVSaWdodE5ld2xpbmUgPVxuICAgICAgcmlnaHRQb3NpdGlvbiAtIGxlZnRQb3NpdGlvbiA9PT0gMSAmJlxuICAgICAgbGVmdEJsb2NrLmdldEJsb2NrQnJlYWtQb3NpdGlvbigpID09PSBsZWZ0T2Zmc2V0ICYmXG4gICAgICByaWdodEJsb2NrLmdldEJsb2NrQnJlYWtQb3NpdGlvbigpICE9PSByaWdodE9mZnNldCAmJlxuICAgICAgcmlnaHRCbG9jay50ZXh0LmdldFN0cmluZ0F0UG9zaXRpb24ocmlnaHRPZmZzZXQpID09PSBcIlxcblwiXG5cbiAgICBpZiAocmVtb3ZlUmlnaHROZXdsaW5lKSB7XG4gICAgICBibG9ja3MgPSB0aGlzLmJsb2NrTGlzdC5lZGl0T2JqZWN0QXRJbmRleChyaWdodEluZGV4LCAoYmxvY2spID0+XG4gICAgICAgIGJsb2NrLmNvcHlXaXRoVGV4dChibG9jay50ZXh0LnJlbW92ZVRleHRBdFJhbmdlKFsgcmlnaHRPZmZzZXQsIHJpZ2h0T2Zmc2V0ICsgMSBdKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGJsb2NrXG4gICAgICBjb25zdCBsZWZ0VGV4dCA9IGxlZnRCbG9jay50ZXh0LmdldFRleHRBdFJhbmdlKFsgMCwgbGVmdE9mZnNldCBdKVxuICAgICAgY29uc3QgcmlnaHRUZXh0ID0gcmlnaHRCbG9jay50ZXh0LmdldFRleHRBdFJhbmdlKFsgcmlnaHRPZmZzZXQsIHJpZ2h0QmxvY2suZ2V0TGVuZ3RoKCkgXSlcbiAgICAgIGNvbnN0IHRleHQgPSBsZWZ0VGV4dC5hcHBlbmRUZXh0KHJpZ2h0VGV4dClcblxuICAgICAgY29uc3QgcmVtb3ZpbmdMZWZ0QmxvY2sgPSBsZWZ0SW5kZXggIT09IHJpZ2h0SW5kZXggJiYgbGVmdE9mZnNldCA9PT0gMFxuICAgICAgY29uc3QgdXNlUmlnaHRCbG9jayA9IHJlbW92aW5nTGVmdEJsb2NrICYmIGxlZnRCbG9jay5nZXRBdHRyaWJ1dGVMZXZlbCgpID49IHJpZ2h0QmxvY2suZ2V0QXR0cmlidXRlTGV2ZWwoKVxuXG4gICAgICBpZiAodXNlUmlnaHRCbG9jaykge1xuICAgICAgICBibG9jayA9IHJpZ2h0QmxvY2suY29weVdpdGhUZXh0KHRleHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBibG9jayA9IGxlZnRCbG9jay5jb3B5V2l0aFRleHQodGV4dClcbiAgICAgIH1cblxuICAgICAgY29uc3QgYWZmZWN0ZWRCbG9ja0NvdW50ID0gcmlnaHRJbmRleCArIDEgLSBsZWZ0SW5kZXhcbiAgICAgIGJsb2NrcyA9IHRoaXMuYmxvY2tMaXN0LnNwbGljZShsZWZ0SW5kZXgsIGFmZmVjdGVkQmxvY2tDb3VudCwgYmxvY2spXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrcylcbiAgfVxuXG4gIG1vdmVUZXh0RnJvbVJhbmdlVG9Qb3NpdGlvbihyYW5nZSwgcG9zaXRpb24pIHtcbiAgICBsZXQgdGV4dFxuICAgIHJhbmdlID0gbm9ybWFsaXplUmFuZ2UocmFuZ2UpXG4gICAgY29uc3QgWyBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBpZiAoc3RhcnRQb3NpdGlvbiA8PSBwb3NpdGlvbiAmJiBwb3NpdGlvbiA8PSBlbmRQb3NpdGlvbikge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLmdldERvY3VtZW50QXRSYW5nZShyYW5nZSlcbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZW1vdmVUZXh0QXRSYW5nZShyYW5nZSlcblxuICAgIGNvbnN0IG1vdmluZ1JpZ2h0d2FyZCA9IHN0YXJ0UG9zaXRpb24gPCBwb3NpdGlvblxuICAgIGlmIChtb3ZpbmdSaWdodHdhcmQpIHtcbiAgICAgIHBvc2l0aW9uIC09IGRvY3VtZW50LmdldExlbmd0aCgpXG4gICAgfVxuXG4gICAgY29uc3QgWyBmaXJzdEJsb2NrLCAuLi5ibG9ja3MgXSA9IGRvY3VtZW50LmdldEJsb2NrcygpXG4gICAgaWYgKGJsb2Nrcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRleHQgPSBmaXJzdEJsb2NrLmdldFRleHRXaXRob3V0QmxvY2tCcmVhaygpXG4gICAgICBpZiAobW92aW5nUmlnaHR3YXJkKSB7XG4gICAgICAgIHBvc2l0aW9uICs9IDFcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGV4dCA9IGZpcnN0QmxvY2sudGV4dFxuICAgIH1cblxuICAgIHJlc3VsdCA9IHJlc3VsdC5pbnNlcnRUZXh0QXRSYW5nZSh0ZXh0LCBwb3NpdGlvbilcbiAgICBpZiAoYmxvY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cblxuICAgIGRvY3VtZW50ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoYmxvY2tzKVxuICAgIHBvc2l0aW9uICs9IHRleHQuZ2V0TGVuZ3RoKClcblxuICAgIHJldHVybiByZXN1bHQuaW5zZXJ0RG9jdW1lbnRBdFJhbmdlKGRvY3VtZW50LCBwb3NpdGlvbilcbiAgfVxuXG4gIGFkZEF0dHJpYnV0ZUF0UmFuZ2UoYXR0cmlidXRlLCB2YWx1ZSwgcmFuZ2UpIHtcbiAgICBsZXQgeyBibG9ja0xpc3QgfSA9IHRoaXNcbiAgICB0aGlzLmVhY2hCbG9ja0F0UmFuZ2UoXG4gICAgICByYW5nZSxcbiAgICAgIChibG9jaywgdGV4dFJhbmdlLCBpbmRleCkgPT5cbiAgICAgICAgYmxvY2tMaXN0ID0gYmxvY2tMaXN0LmVkaXRPYmplY3RBdEluZGV4KGluZGV4LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoZ2V0QmxvY2tDb25maWcoYXR0cmlidXRlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGJsb2NrLmFkZEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGV4dFJhbmdlWzBdID09PSB0ZXh0UmFuZ2VbMV0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJsb2NrXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gYmxvY2suY29weVdpdGhUZXh0KGJsb2NrLnRleHQuYWRkQXR0cmlidXRlQXRSYW5nZShhdHRyaWJ1dGUsIHZhbHVlLCB0ZXh0UmFuZ2UpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICApXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrTGlzdClcbiAgfVxuXG4gIGFkZEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgbGV0IHsgYmxvY2tMaXN0IH0gPSB0aGlzXG4gICAgdGhpcy5lYWNoQmxvY2soXG4gICAgICAoYmxvY2ssIGluZGV4KSA9PiBibG9ja0xpc3QgPSBibG9ja0xpc3QuZWRpdE9iamVjdEF0SW5kZXgoaW5kZXgsICgpID0+IGJsb2NrLmFkZEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKSlcbiAgICApXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrTGlzdClcbiAgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZUF0UmFuZ2UoYXR0cmlidXRlLCByYW5nZSkge1xuICAgIGxldCB7IGJsb2NrTGlzdCB9ID0gdGhpc1xuICAgIHRoaXMuZWFjaEJsb2NrQXRSYW5nZShyYW5nZSwgZnVuY3Rpb24oYmxvY2ssIHRleHRSYW5nZSwgaW5kZXgpIHtcbiAgICAgIGlmIChnZXRCbG9ja0NvbmZpZyhhdHRyaWJ1dGUpKSB7XG4gICAgICAgIGJsb2NrTGlzdCA9IGJsb2NrTGlzdC5lZGl0T2JqZWN0QXRJbmRleChpbmRleCwgKCkgPT4gYmxvY2sucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSkpXG4gICAgICB9IGVsc2UgaWYgKHRleHRSYW5nZVswXSAhPT0gdGV4dFJhbmdlWzFdKSB7XG4gICAgICAgIGJsb2NrTGlzdCA9IGJsb2NrTGlzdC5lZGl0T2JqZWN0QXRJbmRleChpbmRleCwgKCkgPT5cbiAgICAgICAgICBibG9jay5jb3B5V2l0aFRleHQoYmxvY2sudGV4dC5yZW1vdmVBdHRyaWJ1dGVBdFJhbmdlKGF0dHJpYnV0ZSwgdGV4dFJhbmdlKSlcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrTGlzdClcbiAgfVxuXG4gIHVwZGF0ZUF0dHJpYnV0ZXNGb3JBdHRhY2htZW50KGF0dHJpYnV0ZXMsIGF0dGFjaG1lbnQpIHtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZkF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICBjb25zdCBbIHN0YXJ0UG9zaXRpb24gXSA9IEFycmF5LmZyb20ocmFuZ2UpXG4gICAgY29uc3QgeyBpbmRleCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihzdGFydFBvc2l0aW9uKVxuICAgIGNvbnN0IHRleHQgPSB0aGlzLmdldFRleHRBdEluZGV4KGluZGV4KVxuXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKFxuICAgICAgdGhpcy5ibG9ja0xpc3QuZWRpdE9iamVjdEF0SW5kZXgoaW5kZXgsIChibG9jaykgPT5cbiAgICAgICAgYmxvY2suY29weVdpdGhUZXh0KHRleHQudXBkYXRlQXR0cmlidXRlc0ZvckF0dGFjaG1lbnQoYXR0cmlidXRlcywgYXR0YWNobWVudCkpXG4gICAgICApXG4gICAgKVxuICB9XG5cbiAgcmVtb3ZlQXR0cmlidXRlRm9yQXR0YWNobWVudChhdHRyaWJ1dGUsIGF0dGFjaG1lbnQpIHtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZkF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVBdHRyaWJ1dGVBdFJhbmdlKGF0dHJpYnV0ZSwgcmFuZ2UpXG4gIH1cblxuICBzZXRIVE1MQXR0cmlidXRlQXRQb3NpdGlvbihwb3NpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgICBjb25zdCBibG9jayA9IHRoaXMuZ2V0QmxvY2tBdFBvc2l0aW9uKHBvc2l0aW9uKVxuICAgIGNvbnN0IHVwZGF0ZWRCbG9jayA9IGJsb2NrLmFkZEhUTUxBdHRyaWJ1dGUobmFtZSwgdmFsdWUpXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZUJsb2NrKGJsb2NrLCB1cGRhdGVkQmxvY2spXG4gIH1cblxuICBpbnNlcnRCbG9ja0JyZWFrQXRSYW5nZShyYW5nZSkge1xuICAgIGxldCBibG9ja3NcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IFsgc3RhcnRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBjb25zdCB7IG9mZnNldCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihzdGFydFBvc2l0aW9uKVxuXG4gICAgY29uc3QgZG9jdW1lbnQgPSB0aGlzLnJlbW92ZVRleHRBdFJhbmdlKHJhbmdlKVxuICAgIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICAgIGJsb2NrcyA9IFsgbmV3IEJsb2NrKCkgXVxuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoXG4gICAgICBkb2N1bWVudC5ibG9ja0xpc3QuaW5zZXJ0U3BsaXR0YWJsZUxpc3RBdFBvc2l0aW9uKG5ldyBTcGxpdHRhYmxlTGlzdChibG9ja3MpLCBzdGFydFBvc2l0aW9uKVxuICAgIClcbiAgfVxuXG4gIGFwcGx5QmxvY2tBdHRyaWJ1dGVBdFJhbmdlKGF0dHJpYnV0ZU5hbWUsIHZhbHVlLCByYW5nZSkge1xuICAgIGNvbnN0IGV4cGFuZGVkID0gdGhpcy5leHBhbmRSYW5nZVRvTGluZUJyZWFrc0FuZFNwbGl0QmxvY2tzKHJhbmdlKVxuICAgIGxldCBkb2N1bWVudCA9IGV4cGFuZGVkLmRvY3VtZW50XG4gICAgcmFuZ2UgPSBleHBhbmRlZC5yYW5nZVxuICAgIGNvbnN0IGJsb2NrQ29uZmlnID0gZ2V0QmxvY2tDb25maWcoYXR0cmlidXRlTmFtZSlcblxuICAgIGlmIChibG9ja0NvbmZpZy5saXN0QXR0cmlidXRlKSB7XG4gICAgICBkb2N1bWVudCA9IGRvY3VtZW50LnJlbW92ZUxhc3RMaXN0QXR0cmlidXRlQXRSYW5nZShyYW5nZSwgeyBleGNlcHRBdHRyaWJ1dGVOYW1lOiBhdHRyaWJ1dGVOYW1lIH0pXG4gICAgICBjb25zdCBjb252ZXJ0ZWQgPSBkb2N1bWVudC5jb252ZXJ0TGluZUJyZWFrc1RvQmxvY2tCcmVha3NJblJhbmdlKHJhbmdlKVxuICAgICAgZG9jdW1lbnQgPSBjb252ZXJ0ZWQuZG9jdW1lbnRcbiAgICAgIHJhbmdlID0gY29udmVydGVkLnJhbmdlXG4gICAgfSBlbHNlIGlmIChibG9ja0NvbmZpZy5leGNsdXNpdmUpIHtcbiAgICAgIGRvY3VtZW50ID0gZG9jdW1lbnQucmVtb3ZlQmxvY2tBdHRyaWJ1dGVzQXRSYW5nZShyYW5nZSlcbiAgICB9IGVsc2UgaWYgKGJsb2NrQ29uZmlnLnRlcm1pbmFsKSB7XG4gICAgICBkb2N1bWVudCA9IGRvY3VtZW50LnJlbW92ZUxhc3RUZXJtaW5hbEF0dHJpYnV0ZUF0UmFuZ2UocmFuZ2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50ID0gZG9jdW1lbnQuY29uc29saWRhdGVCbG9ja3NBdFJhbmdlKHJhbmdlKVxuICAgIH1cblxuICAgIHJldHVybiBkb2N1bWVudC5hZGRBdHRyaWJ1dGVBdFJhbmdlKGF0dHJpYnV0ZU5hbWUsIHZhbHVlLCByYW5nZSlcbiAgfVxuXG4gIHJlbW92ZUxhc3RMaXN0QXR0cmlidXRlQXRSYW5nZShyYW5nZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IHsgYmxvY2tMaXN0IH0gPSB0aGlzXG4gICAgdGhpcy5lYWNoQmxvY2tBdFJhbmdlKHJhbmdlLCBmdW5jdGlvbihibG9jaywgdGV4dFJhbmdlLCBpbmRleCkge1xuICAgICAgY29uc3QgbGFzdEF0dHJpYnV0ZU5hbWUgPSBibG9jay5nZXRMYXN0QXR0cmlidXRlKClcbiAgICAgIGlmICghbGFzdEF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoIWdldEJsb2NrQ29uZmlnKGxhc3RBdHRyaWJ1dGVOYW1lKS5saXN0QXR0cmlidXRlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKGxhc3RBdHRyaWJ1dGVOYW1lID09PSBvcHRpb25zLmV4Y2VwdEF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBibG9ja0xpc3QgPSBibG9ja0xpc3QuZWRpdE9iamVjdEF0SW5kZXgoaW5kZXgsICgpID0+IGJsb2NrLnJlbW92ZUF0dHJpYnV0ZShsYXN0QXR0cmlidXRlTmFtZSkpXG4gICAgfSlcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoYmxvY2tMaXN0KVxuICB9XG5cbiAgcmVtb3ZlTGFzdFRlcm1pbmFsQXR0cmlidXRlQXRSYW5nZShyYW5nZSkge1xuICAgIGxldCB7IGJsb2NrTGlzdCB9ID0gdGhpc1xuICAgIHRoaXMuZWFjaEJsb2NrQXRSYW5nZShyYW5nZSwgZnVuY3Rpb24oYmxvY2ssIHRleHRSYW5nZSwgaW5kZXgpIHtcbiAgICAgIGNvbnN0IGxhc3RBdHRyaWJ1dGVOYW1lID0gYmxvY2suZ2V0TGFzdEF0dHJpYnV0ZSgpXG4gICAgICBpZiAoIWxhc3RBdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKCFnZXRCbG9ja0NvbmZpZyhsYXN0QXR0cmlidXRlTmFtZSkudGVybWluYWwpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBibG9ja0xpc3QgPSBibG9ja0xpc3QuZWRpdE9iamVjdEF0SW5kZXgoaW5kZXgsICgpID0+IGJsb2NrLnJlbW92ZUF0dHJpYnV0ZShsYXN0QXR0cmlidXRlTmFtZSkpXG4gICAgfSlcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoYmxvY2tMaXN0KVxuICB9XG5cbiAgcmVtb3ZlQmxvY2tBdHRyaWJ1dGVzQXRSYW5nZShyYW5nZSkge1xuICAgIGxldCB7IGJsb2NrTGlzdCB9ID0gdGhpc1xuICAgIHRoaXMuZWFjaEJsb2NrQXRSYW5nZShyYW5nZSwgZnVuY3Rpb24oYmxvY2ssIHRleHRSYW5nZSwgaW5kZXgpIHtcbiAgICAgIGlmIChibG9jay5oYXNBdHRyaWJ1dGVzKCkpIHtcbiAgICAgICAgYmxvY2tMaXN0ID0gYmxvY2tMaXN0LmVkaXRPYmplY3RBdEluZGV4KGluZGV4LCAoKSA9PiBibG9jay5jb3B5V2l0aG91dEF0dHJpYnV0ZXMoKSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihibG9ja0xpc3QpXG4gIH1cblxuICBleHBhbmRSYW5nZVRvTGluZUJyZWFrc0FuZFNwbGl0QmxvY2tzKHJhbmdlKSB7XG4gICAgbGV0IHBvc2l0aW9uXG4gICAgcmFuZ2UgPSBub3JtYWxpemVSYW5nZShyYW5nZSlcbiAgICBsZXQgWyBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBjb25zdCBzdGFydExvY2F0aW9uID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihzdGFydFBvc2l0aW9uKVxuICAgIGNvbnN0IGVuZExvY2F0aW9uID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihlbmRQb3NpdGlvbilcbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzXG5cbiAgICBjb25zdCBzdGFydEJsb2NrID0gZG9jdW1lbnQuZ2V0QmxvY2tBdEluZGV4KHN0YXJ0TG9jYXRpb24uaW5kZXgpXG4gICAgc3RhcnRMb2NhdGlvbi5vZmZzZXQgPSBzdGFydEJsb2NrLmZpbmRMaW5lQnJlYWtJbkRpcmVjdGlvbkZyb21Qb3NpdGlvbihcImJhY2t3YXJkXCIsIHN0YXJ0TG9jYXRpb24ub2Zmc2V0KVxuICAgIGlmIChzdGFydExvY2F0aW9uLm9mZnNldCAhPSBudWxsKSB7XG4gICAgICBwb3NpdGlvbiA9IGRvY3VtZW50LnBvc2l0aW9uRnJvbUxvY2F0aW9uKHN0YXJ0TG9jYXRpb24pXG4gICAgICBkb2N1bWVudCA9IGRvY3VtZW50Lmluc2VydEJsb2NrQnJlYWtBdFJhbmdlKFsgcG9zaXRpb24sIHBvc2l0aW9uICsgMSBdKVxuICAgICAgZW5kTG9jYXRpb24uaW5kZXggKz0gMVxuICAgICAgZW5kTG9jYXRpb24ub2Zmc2V0IC09IGRvY3VtZW50LmdldEJsb2NrQXRJbmRleChzdGFydExvY2F0aW9uLmluZGV4KS5nZXRMZW5ndGgoKVxuICAgICAgc3RhcnRMb2NhdGlvbi5pbmRleCArPSAxXG4gICAgfVxuICAgIHN0YXJ0TG9jYXRpb24ub2Zmc2V0ID0gMFxuXG4gICAgaWYgKGVuZExvY2F0aW9uLm9mZnNldCA9PT0gMCAmJiBlbmRMb2NhdGlvbi5pbmRleCA+IHN0YXJ0TG9jYXRpb24uaW5kZXgpIHtcbiAgICAgIGVuZExvY2F0aW9uLmluZGV4IC09IDFcbiAgICAgIGVuZExvY2F0aW9uLm9mZnNldCA9IGRvY3VtZW50LmdldEJsb2NrQXRJbmRleChlbmRMb2NhdGlvbi5pbmRleCkuZ2V0QmxvY2tCcmVha1Bvc2l0aW9uKClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZW5kQmxvY2sgPSBkb2N1bWVudC5nZXRCbG9ja0F0SW5kZXgoZW5kTG9jYXRpb24uaW5kZXgpXG4gICAgICBpZiAoZW5kQmxvY2sudGV4dC5nZXRTdHJpbmdBdFJhbmdlKFsgZW5kTG9jYXRpb24ub2Zmc2V0IC0gMSwgZW5kTG9jYXRpb24ub2Zmc2V0IF0pID09PSBcIlxcblwiKSB7XG4gICAgICAgIGVuZExvY2F0aW9uLm9mZnNldCAtPSAxXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmRMb2NhdGlvbi5vZmZzZXQgPSBlbmRCbG9jay5maW5kTGluZUJyZWFrSW5EaXJlY3Rpb25Gcm9tUG9zaXRpb24oXCJmb3J3YXJkXCIsIGVuZExvY2F0aW9uLm9mZnNldClcbiAgICAgIH1cbiAgICAgIGlmIChlbmRMb2NhdGlvbi5vZmZzZXQgIT09IGVuZEJsb2NrLmdldEJsb2NrQnJlYWtQb3NpdGlvbigpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gZG9jdW1lbnQucG9zaXRpb25Gcm9tTG9jYXRpb24oZW5kTG9jYXRpb24pXG4gICAgICAgIGRvY3VtZW50ID0gZG9jdW1lbnQuaW5zZXJ0QmxvY2tCcmVha0F0UmFuZ2UoWyBwb3NpdGlvbiwgcG9zaXRpb24gKyAxIF0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RhcnRQb3NpdGlvbiA9IGRvY3VtZW50LnBvc2l0aW9uRnJvbUxvY2F0aW9uKHN0YXJ0TG9jYXRpb24pXG4gICAgZW5kUG9zaXRpb24gPSBkb2N1bWVudC5wb3NpdGlvbkZyb21Mb2NhdGlvbihlbmRMb2NhdGlvbilcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKFsgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24gXSlcblxuICAgIHJldHVybiB7IGRvY3VtZW50LCByYW5nZSB9XG4gIH1cblxuICBjb252ZXJ0TGluZUJyZWFrc1RvQmxvY2tCcmVha3NJblJhbmdlKHJhbmdlKSB7XG4gICAgcmFuZ2UgPSBub3JtYWxpemVSYW5nZShyYW5nZSlcbiAgICBsZXQgWyBwb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBjb25zdCBzdHJpbmcgPSB0aGlzLmdldFN0cmluZ0F0UmFuZ2UocmFuZ2UpLnNsaWNlKDAsIC0xKVxuICAgIGxldCBkb2N1bWVudCA9IHRoaXNcblxuICAgIHN0cmluZy5yZXBsYWNlKC8uKj9cXG4vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHBvc2l0aW9uICs9IG1hdGNoLmxlbmd0aFxuICAgICAgZG9jdW1lbnQgPSBkb2N1bWVudC5pbnNlcnRCbG9ja0JyZWFrQXRSYW5nZShbIHBvc2l0aW9uIC0gMSwgcG9zaXRpb24gXSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIHsgZG9jdW1lbnQsIHJhbmdlIH1cbiAgfVxuXG4gIGNvbnNvbGlkYXRlQmxvY2tzQXRSYW5nZShyYW5nZSkge1xuICAgIHJhbmdlID0gbm9ybWFsaXplUmFuZ2UocmFuZ2UpXG4gICAgY29uc3QgWyBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBjb25zdCBzdGFydEluZGV4ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihzdGFydFBvc2l0aW9uKS5pbmRleFxuICAgIGNvbnN0IGVuZEluZGV4ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihlbmRQb3NpdGlvbikuaW5kZXhcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5ibG9ja0xpc3QuY29uc29saWRhdGVGcm9tSW5kZXhUb0luZGV4KHN0YXJ0SW5kZXgsIGVuZEluZGV4KSlcbiAgfVxuXG4gIGdldERvY3VtZW50QXRSYW5nZShyYW5nZSkge1xuICAgIHJhbmdlID0gbm9ybWFsaXplUmFuZ2UocmFuZ2UpXG4gICAgY29uc3QgYmxvY2tzID0gdGhpcy5ibG9ja0xpc3QuZ2V0U3BsaXR0YWJsZUxpc3RJblJhbmdlKHJhbmdlKS50b0FycmF5KClcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoYmxvY2tzKVxuICB9XG5cbiAgZ2V0U3RyaW5nQXRSYW5nZShyYW5nZSkge1xuICAgIGxldCBlbmRJbmRleFxuICAgIGNvbnN0IGFycmF5ID0gcmFuZ2UgPSBub3JtYWxpemVSYW5nZShyYW5nZSksXG4gICAgICBlbmRQb3NpdGlvbiA9IGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdXG4gICAgaWYgKGVuZFBvc2l0aW9uICE9PSB0aGlzLmdldExlbmd0aCgpKSB7XG4gICAgICBlbmRJbmRleCA9IC0xXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldERvY3VtZW50QXRSYW5nZShyYW5nZSkudG9TdHJpbmcoKS5zbGljZSgwLCBlbmRJbmRleClcbiAgfVxuXG4gIGdldEJsb2NrQXRJbmRleChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmJsb2NrTGlzdC5nZXRPYmplY3RBdEluZGV4KGluZGV4KVxuICB9XG5cbiAgZ2V0QmxvY2tBdFBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgY29uc3QgeyBpbmRleCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihwb3NpdGlvbilcbiAgICByZXR1cm4gdGhpcy5nZXRCbG9ja0F0SW5kZXgoaW5kZXgpXG4gIH1cblxuICBnZXRUZXh0QXRJbmRleChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmdldEJsb2NrQXRJbmRleChpbmRleCk/LnRleHRcbiAgfVxuXG4gIGdldFRleHRBdFBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgY29uc3QgeyBpbmRleCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihwb3NpdGlvbilcbiAgICByZXR1cm4gdGhpcy5nZXRUZXh0QXRJbmRleChpbmRleClcbiAgfVxuXG4gIGdldFBpZWNlQXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgIGNvbnN0IHsgaW5kZXgsIG9mZnNldCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihwb3NpdGlvbilcbiAgICByZXR1cm4gdGhpcy5nZXRUZXh0QXRJbmRleChpbmRleCkuZ2V0UGllY2VBdFBvc2l0aW9uKG9mZnNldClcbiAgfVxuXG4gIGdldENoYXJhY3RlckF0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICBjb25zdCB7IGluZGV4LCBvZmZzZXQgfSA9IHRoaXMubG9jYXRpb25Gcm9tUG9zaXRpb24ocG9zaXRpb24pXG4gICAgcmV0dXJuIHRoaXMuZ2V0VGV4dEF0SW5kZXgoaW5kZXgpLmdldFN0cmluZ0F0UmFuZ2UoWyBvZmZzZXQsIG9mZnNldCArIDEgXSlcbiAgfVxuXG4gIGdldExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5ibG9ja0xpc3QuZ2V0RW5kUG9zaXRpb24oKVxuICB9XG5cbiAgZ2V0QmxvY2tzKCkge1xuICAgIHJldHVybiB0aGlzLmJsb2NrTGlzdC50b0FycmF5KClcbiAgfVxuXG4gIGdldEJsb2NrQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tMaXN0Lmxlbmd0aFxuICB9XG5cbiAgZ2V0RWRpdENvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmVkaXRDb3VudFxuICB9XG5cbiAgZWFjaEJsb2NrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tMaXN0LmVhY2hPYmplY3QoY2FsbGJhY2spXG4gIH1cblxuICBlYWNoQmxvY2tBdFJhbmdlKHJhbmdlLCBjYWxsYmFjaykge1xuICAgIGxldCBibG9jaywgdGV4dFJhbmdlXG4gICAgcmFuZ2UgPSBub3JtYWxpemVSYW5nZShyYW5nZSlcbiAgICBjb25zdCBbIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uIF0gPSByYW5nZVxuICAgIGNvbnN0IHN0YXJ0TG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uRnJvbVBvc2l0aW9uKHN0YXJ0UG9zaXRpb24pXG4gICAgY29uc3QgZW5kTG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uRnJvbVBvc2l0aW9uKGVuZFBvc2l0aW9uKVxuXG4gICAgaWYgKHN0YXJ0TG9jYXRpb24uaW5kZXggPT09IGVuZExvY2F0aW9uLmluZGV4KSB7XG4gICAgICBibG9jayA9IHRoaXMuZ2V0QmxvY2tBdEluZGV4KHN0YXJ0TG9jYXRpb24uaW5kZXgpXG4gICAgICB0ZXh0UmFuZ2UgPSBbIHN0YXJ0TG9jYXRpb24ub2Zmc2V0LCBlbmRMb2NhdGlvbi5vZmZzZXQgXVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGJsb2NrLCB0ZXh0UmFuZ2UsIHN0YXJ0TG9jYXRpb24uaW5kZXgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGluZGV4ID0gc3RhcnRMb2NhdGlvbi5pbmRleDsgaW5kZXggPD0gZW5kTG9jYXRpb24uaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgYmxvY2sgPSB0aGlzLmdldEJsb2NrQXRJbmRleChpbmRleClcbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICAgICAgY2FzZSBzdGFydExvY2F0aW9uLmluZGV4OlxuICAgICAgICAgICAgICB0ZXh0UmFuZ2UgPSBbIHN0YXJ0TG9jYXRpb24ub2Zmc2V0LCBibG9jay50ZXh0LmdldExlbmd0aCgpIF1cbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgZW5kTG9jYXRpb24uaW5kZXg6XG4gICAgICAgICAgICAgIHRleHRSYW5nZSA9IFsgMCwgZW5kTG9jYXRpb24ub2Zmc2V0IF1cbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHRleHRSYW5nZSA9IFsgMCwgYmxvY2sudGV4dC5nZXRMZW5ndGgoKSBdXG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxiYWNrKGJsb2NrLCB0ZXh0UmFuZ2UsIGluZGV4KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0Q29tbW9uQXR0cmlidXRlc0F0UmFuZ2UocmFuZ2UpIHtcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IFsgc3RhcnRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBpZiAocmFuZ2VJc0NvbGxhcHNlZChyYW5nZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldENvbW1vbkF0dHJpYnV0ZXNBdFBvc2l0aW9uKHN0YXJ0UG9zaXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHRleHRBdHRyaWJ1dGVzID0gW11cbiAgICAgIGNvbnN0IGJsb2NrQXR0cmlidXRlcyA9IFtdXG5cbiAgICAgIHRoaXMuZWFjaEJsb2NrQXRSYW5nZShyYW5nZSwgZnVuY3Rpb24oYmxvY2ssIHRleHRSYW5nZSkge1xuICAgICAgICBpZiAodGV4dFJhbmdlWzBdICE9PSB0ZXh0UmFuZ2VbMV0pIHtcbiAgICAgICAgICB0ZXh0QXR0cmlidXRlcy5wdXNoKGJsb2NrLnRleHQuZ2V0Q29tbW9uQXR0cmlidXRlc0F0UmFuZ2UodGV4dFJhbmdlKSlcbiAgICAgICAgICByZXR1cm4gYmxvY2tBdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlc0ZvckJsb2NrKGJsb2NrKSlcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIEhhc2guZnJvbUNvbW1vbkF0dHJpYnV0ZXNPZk9iamVjdHModGV4dEF0dHJpYnV0ZXMpXG4gICAgICAgIC5tZXJnZShIYXNoLmZyb21Db21tb25BdHRyaWJ1dGVzT2ZPYmplY3RzKGJsb2NrQXR0cmlidXRlcykpXG4gICAgICAgIC50b09iamVjdCgpXG4gICAgfVxuICB9XG5cbiAgZ2V0Q29tbW9uQXR0cmlidXRlc0F0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICBsZXQga2V5LCB2YWx1ZVxuICAgIGNvbnN0IHsgaW5kZXgsIG9mZnNldCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihwb3NpdGlvbilcbiAgICBjb25zdCBibG9jayA9IHRoaXMuZ2V0QmxvY2tBdEluZGV4KGluZGV4KVxuICAgIGlmICghYmxvY2spIHtcbiAgICAgIHJldHVybiB7fVxuICAgIH1cblxuICAgIGNvbnN0IGNvbW1vbkF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzRm9yQmxvY2soYmxvY2spXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IGJsb2NrLnRleHQuZ2V0QXR0cmlidXRlc0F0UG9zaXRpb24ob2Zmc2V0KVxuICAgIGNvbnN0IGF0dHJpYnV0ZXNMZWZ0ID0gYmxvY2sudGV4dC5nZXRBdHRyaWJ1dGVzQXRQb3NpdGlvbihvZmZzZXQgLSAxKVxuICAgIGNvbnN0IGluaGVyaXRhYmxlQXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKGNvbmZpZy50ZXh0QXR0cmlidXRlcykuZmlsdGVyKChrZXkpID0+IHtcbiAgICAgIHJldHVybiBjb25maWcudGV4dEF0dHJpYnV0ZXNba2V5XS5pbmhlcml0YWJsZVxuICAgIH0pXG5cbiAgICBmb3IgKGtleSBpbiBhdHRyaWJ1dGVzTGVmdCkge1xuICAgICAgdmFsdWUgPSBhdHRyaWJ1dGVzTGVmdFtrZXldXG4gICAgICBpZiAodmFsdWUgPT09IGF0dHJpYnV0ZXNba2V5XSB8fCBpbmhlcml0YWJsZUF0dHJpYnV0ZXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBjb21tb25BdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb21tb25BdHRyaWJ1dGVzXG4gIH1cblxuICBnZXRSYW5nZU9mQ29tbW9uQXR0cmlidXRlQXRQb3NpdGlvbihhdHRyaWJ1dGVOYW1lLCBwb3NpdGlvbikge1xuICAgIGNvbnN0IHsgaW5kZXgsIG9mZnNldCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihwb3NpdGlvbilcbiAgICBjb25zdCB0ZXh0ID0gdGhpcy5nZXRUZXh0QXRJbmRleChpbmRleClcbiAgICBjb25zdCBbIHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQgXSA9IEFycmF5LmZyb20odGV4dC5nZXRFeHBhbmRlZFJhbmdlRm9yQXR0cmlidXRlQXRPZmZzZXQoYXR0cmlidXRlTmFtZSwgb2Zmc2V0KSlcblxuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5wb3NpdGlvbkZyb21Mb2NhdGlvbih7IGluZGV4LCBvZmZzZXQ6IHN0YXJ0T2Zmc2V0IH0pXG4gICAgY29uc3QgZW5kID0gdGhpcy5wb3NpdGlvbkZyb21Mb2NhdGlvbih7IGluZGV4LCBvZmZzZXQ6IGVuZE9mZnNldCB9KVxuICAgIHJldHVybiBub3JtYWxpemVSYW5nZShbIHN0YXJ0LCBlbmQgXSlcbiAgfVxuXG4gIGdldEJhc2VCbG9ja0F0dHJpYnV0ZXMoKSB7XG4gICAgbGV0IGJhc2VCbG9ja0F0dHJpYnV0ZXMgPSB0aGlzLmdldEJsb2NrQXRJbmRleCgwKS5nZXRBdHRyaWJ1dGVzKClcblxuICAgIGZvciAobGV0IGJsb2NrSW5kZXggPSAxOyBibG9ja0luZGV4IDwgdGhpcy5nZXRCbG9ja0NvdW50KCk7IGJsb2NrSW5kZXgrKykge1xuICAgICAgY29uc3QgYmxvY2tBdHRyaWJ1dGVzID0gdGhpcy5nZXRCbG9ja0F0SW5kZXgoYmxvY2tJbmRleCkuZ2V0QXR0cmlidXRlcygpXG4gICAgICBjb25zdCBsYXN0QXR0cmlidXRlSW5kZXggPSBNYXRoLm1pbihiYXNlQmxvY2tBdHRyaWJ1dGVzLmxlbmd0aCwgYmxvY2tBdHRyaWJ1dGVzLmxlbmd0aClcblxuICAgICAgYmFzZUJsb2NrQXR0cmlidXRlcyA9ICgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsYXN0QXR0cmlidXRlSW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgICBpZiAoYmxvY2tBdHRyaWJ1dGVzW2luZGV4XSAhPT0gYmFzZUJsb2NrQXR0cmlidXRlc1tpbmRleF0pIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKGJsb2NrQXR0cmlidXRlc1tpbmRleF0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfSkoKVxuICAgIH1cblxuICAgIHJldHVybiBiYXNlQmxvY2tBdHRyaWJ1dGVzXG4gIH1cblxuICBnZXRBdHRhY2htZW50QnlJZChhdHRhY2htZW50SWQpIHtcbiAgICBmb3IgKGNvbnN0IGF0dGFjaG1lbnQgb2YgdGhpcy5nZXRBdHRhY2htZW50cygpKSB7XG4gICAgICBpZiAoYXR0YWNobWVudC5pZCA9PT0gYXR0YWNobWVudElkKSB7XG4gICAgICAgIHJldHVybiBhdHRhY2htZW50XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0QXR0YWNobWVudFBpZWNlcygpIHtcbiAgICBsZXQgYXR0YWNobWVudFBpZWNlcyA9IFtdXG4gICAgdGhpcy5ibG9ja0xpc3QuZWFjaE9iamVjdCgoeyB0ZXh0IH0pID0+IGF0dGFjaG1lbnRQaWVjZXMgPSBhdHRhY2htZW50UGllY2VzLmNvbmNhdCh0ZXh0LmdldEF0dGFjaG1lbnRQaWVjZXMoKSkpXG4gICAgcmV0dXJuIGF0dGFjaG1lbnRQaWVjZXNcbiAgfVxuXG4gIGdldEF0dGFjaG1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLmdldEF0dGFjaG1lbnRQaWVjZXMoKS5tYXAoKHBpZWNlKSA9PiBwaWVjZS5hdHRhY2htZW50KVxuICB9XG5cbiAgZ2V0UmFuZ2VPZkF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGxldCBwb3NpdGlvbiA9IDBcbiAgICBjb25zdCBpdGVyYWJsZSA9IHRoaXMuYmxvY2tMaXN0LnRvQXJyYXkoKVxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBpdGVyYWJsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IHsgdGV4dCB9ID0gaXRlcmFibGVbaW5kZXhdXG4gICAgICBjb25zdCB0ZXh0UmFuZ2UgPSB0ZXh0LmdldFJhbmdlT2ZBdHRhY2htZW50KGF0dGFjaG1lbnQpXG4gICAgICBpZiAodGV4dFJhbmdlKSB7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVSYW5nZShbIHBvc2l0aW9uICsgdGV4dFJhbmdlWzBdLCBwb3NpdGlvbiArIHRleHRSYW5nZVsxXSBdKVxuICAgICAgfVxuICAgICAgcG9zaXRpb24gKz0gdGV4dC5nZXRMZW5ndGgoKVxuICAgIH1cbiAgfVxuXG4gIGdldExvY2F0aW9uUmFuZ2VPZkF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZU9mQXR0YWNobWVudChhdHRhY2htZW50KVxuICAgIHJldHVybiB0aGlzLmxvY2F0aW9uUmFuZ2VGcm9tUmFuZ2UocmFuZ2UpXG4gIH1cblxuICBnZXRBdHRhY2htZW50UGllY2VGb3JBdHRhY2htZW50KGF0dGFjaG1lbnQpIHtcbiAgICBmb3IgKGNvbnN0IHBpZWNlIG9mIHRoaXMuZ2V0QXR0YWNobWVudFBpZWNlcygpKSB7XG4gICAgICBpZiAocGllY2UuYXR0YWNobWVudCA9PT0gYXR0YWNobWVudCkge1xuICAgICAgICByZXR1cm4gcGllY2VcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmaW5kUmFuZ2VzRm9yQmxvY2tBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkge1xuICAgIGxldCBwb3NpdGlvbiA9IDBcbiAgICBjb25zdCByYW5nZXMgPSBbXVxuXG4gICAgdGhpcy5nZXRCbG9ja3MoKS5mb3JFYWNoKChibG9jaykgPT4ge1xuICAgICAgY29uc3QgbGVuZ3RoID0gYmxvY2suZ2V0TGVuZ3RoKClcbiAgICAgIGlmIChibG9jay5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgcmFuZ2VzLnB1c2goWyBwb3NpdGlvbiwgcG9zaXRpb24gKyBsZW5ndGggXSlcbiAgICAgIH1cbiAgICAgIHBvc2l0aW9uICs9IGxlbmd0aFxuICAgIH0pXG5cbiAgICByZXR1cm4gcmFuZ2VzXG4gIH1cblxuICBmaW5kUmFuZ2VzRm9yVGV4dEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCB7IHdpdGhWYWx1ZSB9ID0ge30pIHtcbiAgICBsZXQgcG9zaXRpb24gPSAwXG4gICAgbGV0IHJhbmdlID0gW11cbiAgICBjb25zdCByYW5nZXMgPSBbXVxuXG4gICAgY29uc3QgbWF0Y2ggPSBmdW5jdGlvbihwaWVjZSkge1xuICAgICAgaWYgKHdpdGhWYWx1ZSkge1xuICAgICAgICByZXR1cm4gcGllY2UuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpID09PSB3aXRoVmFsdWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwaWVjZS5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmdldFBpZWNlcygpLmZvckVhY2goKHBpZWNlKSA9PiB7XG4gICAgICBjb25zdCBsZW5ndGggPSBwaWVjZS5nZXRMZW5ndGgoKVxuICAgICAgaWYgKG1hdGNoKHBpZWNlKSkge1xuICAgICAgICBpZiAocmFuZ2VbMV0gPT09IHBvc2l0aW9uKSB7XG4gICAgICAgICAgcmFuZ2VbMV0gPSBwb3NpdGlvbiArIGxlbmd0aFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhbmdlcy5wdXNoKHJhbmdlID0gWyBwb3NpdGlvbiwgcG9zaXRpb24gKyBsZW5ndGggXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoXG4gICAgfSlcblxuICAgIHJldHVybiByYW5nZXNcbiAgfVxuXG4gIGxvY2F0aW9uRnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLmJsb2NrTGlzdC5maW5kSW5kZXhBbmRPZmZzZXRBdFBvc2l0aW9uKE1hdGgubWF4KDAsIHBvc2l0aW9uKSlcbiAgICBpZiAobG9jYXRpb24uaW5kZXggIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJsb2NrcyA9IHRoaXMuZ2V0QmxvY2tzKClcbiAgICAgIHJldHVybiB7IGluZGV4OiBibG9ja3MubGVuZ3RoIC0gMSwgb2Zmc2V0OiBibG9ja3NbYmxvY2tzLmxlbmd0aCAtIDFdLmdldExlbmd0aCgpIH1cbiAgICB9XG4gIH1cblxuICBwb3NpdGlvbkZyb21Mb2NhdGlvbihsb2NhdGlvbikge1xuICAgIHJldHVybiB0aGlzLmJsb2NrTGlzdC5maW5kUG9zaXRpb25BdEluZGV4QW5kT2Zmc2V0KGxvY2F0aW9uLmluZGV4LCBsb2NhdGlvbi5vZmZzZXQpXG4gIH1cblxuICBsb2NhdGlvblJhbmdlRnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVJhbmdlKHRoaXMubG9jYXRpb25Gcm9tUG9zaXRpb24ocG9zaXRpb24pKVxuICB9XG5cbiAgbG9jYXRpb25SYW5nZUZyb21SYW5nZShyYW5nZSkge1xuICAgIHJhbmdlID0gbm9ybWFsaXplUmFuZ2UocmFuZ2UpXG4gICAgaWYgKCFyYW5nZSkgcmV0dXJuXG5cbiAgICBjb25zdCBbIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uIF0gPSBBcnJheS5mcm9tKHJhbmdlKVxuICAgIGNvbnN0IHN0YXJ0TG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uRnJvbVBvc2l0aW9uKHN0YXJ0UG9zaXRpb24pXG4gICAgY29uc3QgZW5kTG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uRnJvbVBvc2l0aW9uKGVuZFBvc2l0aW9uKVxuICAgIHJldHVybiBub3JtYWxpemVSYW5nZShbIHN0YXJ0TG9jYXRpb24sIGVuZExvY2F0aW9uIF0pXG4gIH1cblxuICByYW5nZUZyb21Mb2NhdGlvblJhbmdlKGxvY2F0aW9uUmFuZ2UpIHtcbiAgICBsZXQgcmlnaHRQb3NpdGlvblxuICAgIGxvY2F0aW9uUmFuZ2UgPSBub3JtYWxpemVSYW5nZShsb2NhdGlvblJhbmdlKVxuICAgIGNvbnN0IGxlZnRQb3NpdGlvbiA9IHRoaXMucG9zaXRpb25Gcm9tTG9jYXRpb24obG9jYXRpb25SYW5nZVswXSlcbiAgICBpZiAoIXJhbmdlSXNDb2xsYXBzZWQobG9jYXRpb25SYW5nZSkpIHtcbiAgICAgIHJpZ2h0UG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uRnJvbUxvY2F0aW9uKGxvY2F0aW9uUmFuZ2VbMV0pXG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVSYW5nZShbIGxlZnRQb3NpdGlvbiwgcmlnaHRQb3NpdGlvbiBdKVxuICB9XG5cbiAgaXNFcXVhbFRvKGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tMaXN0LmlzRXF1YWxUbyhkb2N1bWVudD8uYmxvY2tMaXN0KVxuICB9XG5cbiAgZ2V0VGV4dHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tzKCkubWFwKChibG9jaykgPT4gYmxvY2sudGV4dClcbiAgfVxuXG4gIGdldFBpZWNlcygpIHtcbiAgICBjb25zdCBwaWVjZXMgPSBbXVxuXG4gICAgQXJyYXkuZnJvbSh0aGlzLmdldFRleHRzKCkpLmZvckVhY2goKHRleHQpID0+IHtcbiAgICAgIHBpZWNlcy5wdXNoKC4uLkFycmF5LmZyb20odGV4dC5nZXRQaWVjZXMoKSB8fCBbXSkpXG4gICAgfSlcblxuICAgIHJldHVybiBwaWVjZXNcbiAgfVxuXG4gIGdldE9iamVjdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tzKCkuY29uY2F0KHRoaXMuZ2V0VGV4dHMoKSkuY29uY2F0KHRoaXMuZ2V0UGllY2VzKCkpXG4gIH1cblxuICB0b1NlcmlhbGl6YWJsZURvY3VtZW50KCkge1xuICAgIGNvbnN0IGJsb2NrcyA9IFtdXG4gICAgdGhpcy5ibG9ja0xpc3QuZWFjaE9iamVjdCgoYmxvY2spID0+IGJsb2Nrcy5wdXNoKGJsb2NrLmNvcHlXaXRoVGV4dChibG9jay50ZXh0LnRvU2VyaWFsaXphYmxlVGV4dCgpKSkpXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrcylcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmJsb2NrTGlzdC50b1N0cmluZygpXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tMaXN0LnRvSlNPTigpXG4gIH1cblxuICB0b0NvbnNvbGUoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuYmxvY2tMaXN0LnRvQXJyYXkoKS5tYXAoKGJsb2NrKSA9PiBKU09OLnBhcnNlKGJsb2NrLnRleHQudG9Db25zb2xlKCkpKSlcbiAgfVxufVxuXG5jb25zdCBhdHRyaWJ1dGVzRm9yQmxvY2sgPSBmdW5jdGlvbihibG9jaykge1xuICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGJsb2NrLmdldExhc3RBdHRyaWJ1dGUoKVxuICBpZiAoYXR0cmlidXRlTmFtZSkge1xuICAgIGF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0gPSB0cnVlXG4gIH1cbiAgcmV0dXJuIGF0dHJpYnV0ZXNcbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZVxuICAgIG5vLWNhc2UtZGVjbGFyYXRpb25zLFxuICAgIG5vLWlycmVndWxhci13aGl0ZXNwYWNlLFxuKi9cbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tIFwidHJpeC9jb25maWdcIlxuaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcbmltcG9ydCBEb2N1bWVudCBmcm9tIFwidHJpeC9tb2RlbHMvZG9jdW1lbnRcIlxuaW1wb3J0IEhUTUxTYW5pdGl6ZXIgZnJvbSBcInRyaXgvbW9kZWxzL2h0bWxfc2FuaXRpemVyXCJcblxuaW1wb3J0IHtcbiAgYXJyYXlzQXJlRXF1YWwsXG4gIGJyZWFrYWJsZVdoaXRlc3BhY2VQYXR0ZXJuLFxuICBlbGVtZW50Q29udGFpbnNOb2RlLFxuICBmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZSxcbiAgZ2V0QmxvY2tUYWdOYW1lcyxcbiAgbWFrZUVsZW1lbnQsXG4gIG5vZGVJc0F0dGFjaG1lbnRFbGVtZW50LFxuICBub3JtYWxpemVTcGFjZXMsXG4gIHJlbW92ZU5vZGUsXG4gIHNxdWlzaEJyZWFrYWJsZVdoaXRlc3BhY2UsXG4gIHRhZ05hbWUsXG4gIHdhbGtUcmVlLFxufSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5jb25zdCBwaWVjZUZvclN0cmluZyA9IChzdHJpbmcsIGF0dHJpYnV0ZXMgPSB7fSkgPT4ge1xuICBjb25zdCB0eXBlID0gXCJzdHJpbmdcIlxuICBzdHJpbmcgPSBub3JtYWxpemVTcGFjZXMoc3RyaW5nKVxuICByZXR1cm4geyBzdHJpbmcsIGF0dHJpYnV0ZXMsIHR5cGUgfVxufVxuXG5jb25zdCBwaWVjZUZvckF0dGFjaG1lbnQgPSAoYXR0YWNobWVudCwgYXR0cmlidXRlcyA9IHt9KSA9PiB7XG4gIGNvbnN0IHR5cGUgPSBcImF0dGFjaG1lbnRcIlxuICByZXR1cm4geyBhdHRhY2htZW50LCBhdHRyaWJ1dGVzLCB0eXBlIH1cbn1cblxuY29uc3QgYmxvY2tGb3JBdHRyaWJ1dGVzID0gKGF0dHJpYnV0ZXMgPSB7fSwgaHRtbEF0dHJpYnV0ZXMgPSB7fSkgPT4ge1xuICBjb25zdCB0ZXh0ID0gW11cbiAgcmV0dXJuIHsgdGV4dCwgYXR0cmlidXRlcywgaHRtbEF0dHJpYnV0ZXMgfVxufVxuXG5jb25zdCBwYXJzZVRyaXhEYXRhQXR0cmlidXRlID0gKGVsZW1lbnQsIG5hbWUpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShlbGVtZW50LmdldEF0dHJpYnV0ZShgZGF0YS10cml4LSR7bmFtZX1gKSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4ge31cbiAgfVxufVxuXG5jb25zdCBnZXRJbWFnZURpbWVuc2lvbnMgPSAoZWxlbWVudCkgPT4ge1xuICBjb25zdCB3aWR0aCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwid2lkdGhcIilcbiAgY29uc3QgaGVpZ2h0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIilcbiAgY29uc3QgZGltZW5zaW9ucyA9IHt9XG4gIGlmICh3aWR0aCkge1xuICAgIGRpbWVuc2lvbnMud2lkdGggPSBwYXJzZUludCh3aWR0aCwgMTApXG4gIH1cbiAgaWYgKGhlaWdodCkge1xuICAgIGRpbWVuc2lvbnMuaGVpZ2h0ID0gcGFyc2VJbnQoaGVpZ2h0LCAxMClcbiAgfVxuICByZXR1cm4gZGltZW5zaW9uc1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIVE1MUGFyc2VyIGV4dGVuZHMgQmFzaWNPYmplY3Qge1xuICBzdGF0aWMgcGFyc2UoaHRtbCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyB0aGlzKGh0bWwsIG9wdGlvbnMpXG4gICAgcGFyc2VyLnBhcnNlKClcbiAgICByZXR1cm4gcGFyc2VyXG4gIH1cblxuICBjb25zdHJ1Y3RvcihodG1sLCB7IHJlZmVyZW5jZUVsZW1lbnQgfSA9IHt9KSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMuaHRtbCA9IGh0bWxcbiAgICB0aGlzLnJlZmVyZW5jZUVsZW1lbnQgPSByZWZlcmVuY2VFbGVtZW50XG4gICAgdGhpcy5ibG9ja3MgPSBbXVxuICAgIHRoaXMuYmxvY2tFbGVtZW50cyA9IFtdXG4gICAgdGhpcy5wcm9jZXNzZWRFbGVtZW50cyA9IFtdXG4gIH1cblxuICBnZXREb2N1bWVudCgpIHtcbiAgICByZXR1cm4gRG9jdW1lbnQuZnJvbUpTT04odGhpcy5ibG9ja3MpXG4gIH1cblxuICAvLyBIVE1MIHBhcnNpbmdcblxuICBwYXJzZSgpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5jcmVhdGVIaWRkZW5Db250YWluZXIoKVxuICAgICAgSFRNTFNhbml0aXplci5zZXRIVE1MKHRoaXMuY29udGFpbmVyRWxlbWVudCwgdGhpcy5odG1sKVxuICAgICAgY29uc3Qgd2Fsa2VyID0gd2Fsa1RyZWUodGhpcy5jb250YWluZXJFbGVtZW50LCB7IHVzaW5nRmlsdGVyOiBub2RlRmlsdGVyIH0pXG4gICAgICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzTm9kZSh3YWxrZXIuY3VycmVudE5vZGUpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGVCbG9ja0VsZW1lbnRNYXJnaW5zVG9OZXdsaW5lcygpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMucmVtb3ZlSGlkZGVuQ29udGFpbmVyKClcbiAgICB9XG4gIH1cblxuICBjcmVhdGVIaWRkZW5Db250YWluZXIoKSB7XG4gICAgaWYgKHRoaXMucmVmZXJlbmNlRWxlbWVudCkge1xuICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50ID0gdGhpcy5yZWZlcmVuY2VFbGVtZW50LmNsb25lTm9kZShmYWxzZSlcbiAgICAgIHRoaXMuY29udGFpbmVyRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKVxuICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtdHJpeC1pbnRlcm5hbFwiLCBcIlwiKVxuICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxuICAgICAgcmV0dXJuIHRoaXMucmVmZXJlbmNlRWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNvbnRhaW5lckVsZW1lbnQsIHRoaXMucmVmZXJlbmNlRWxlbWVudC5uZXh0U2libGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50ID0gbWFrZUVsZW1lbnQoeyB0YWdOYW1lOiBcImRpdlwiLCBzdHlsZTogeyBkaXNwbGF5OiBcIm5vbmVcIiB9IH0pXG4gICAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lckVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlSGlkZGVuQ29udGFpbmVyKCkge1xuICAgIHJldHVybiByZW1vdmVOb2RlKHRoaXMuY29udGFpbmVyRWxlbWVudClcbiAgfVxuXG4gIHByb2Nlc3NOb2RlKG5vZGUpIHtcbiAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICAgIGNhc2UgTm9kZS5URVhUX05PREU6XG4gICAgICAgIGlmICghdGhpcy5pc0luc2lnbmlmaWNhbnRUZXh0Tm9kZShub2RlKSkge1xuICAgICAgICAgIHRoaXMuYXBwZW5kQmxvY2tGb3JUZXh0Tm9kZShub2RlKVxuICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NUZXh0Tm9kZShub2RlKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFOlxuICAgICAgICB0aGlzLmFwcGVuZEJsb2NrRm9yRWxlbWVudChub2RlKVxuICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzRWxlbWVudChub2RlKVxuICAgIH1cbiAgfVxuXG4gIGFwcGVuZEJsb2NrRm9yVGV4dE5vZGUobm9kZSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBub2RlLnBhcmVudE5vZGVcbiAgICBpZiAoZWxlbWVudCA9PT0gdGhpcy5jdXJyZW50QmxvY2tFbGVtZW50ICYmIHRoaXMuaXNCbG9ja0VsZW1lbnQobm9kZS5wcmV2aW91c1NpYmxpbmcpKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcHBlbmRTdHJpbmdXaXRoQXR0cmlidXRlcyhcIlxcblwiKVxuICAgIH0gZWxzZSBpZiAoZWxlbWVudCA9PT0gdGhpcy5jb250YWluZXJFbGVtZW50IHx8IHRoaXMuaXNCbG9ja0VsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLmdldEJsb2NrQXR0cmlidXRlcyhlbGVtZW50KVxuICAgICAgY29uc3QgaHRtbEF0dHJpYnV0ZXMgPSB0aGlzLmdldEJsb2NrSFRNTEF0dHJpYnV0ZXMoZWxlbWVudClcbiAgICAgIGlmICghYXJyYXlzQXJlRXF1YWwoYXR0cmlidXRlcywgdGhpcy5jdXJyZW50QmxvY2s/LmF0dHJpYnV0ZXMpKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEJsb2NrID0gdGhpcy5hcHBlbmRCbG9ja0ZvckF0dHJpYnV0ZXNXaXRoRWxlbWVudChhdHRyaWJ1dGVzLCBlbGVtZW50LCBodG1sQXR0cmlidXRlcylcbiAgICAgICAgdGhpcy5jdXJyZW50QmxvY2tFbGVtZW50ID0gZWxlbWVudFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFwcGVuZEJsb2NrRm9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgY29uc3QgZWxlbWVudElzQmxvY2tFbGVtZW50ID0gdGhpcy5pc0Jsb2NrRWxlbWVudChlbGVtZW50KVxuICAgIGNvbnN0IGN1cnJlbnRCbG9ja0NvbnRhaW5zRWxlbWVudCA9IGVsZW1lbnRDb250YWluc05vZGUodGhpcy5jdXJyZW50QmxvY2tFbGVtZW50LCBlbGVtZW50KVxuXG4gICAgaWYgKGVsZW1lbnRJc0Jsb2NrRWxlbWVudCAmJiAhdGhpcy5pc0Jsb2NrRWxlbWVudChlbGVtZW50LmZpcnN0Q2hpbGQpKSB7XG4gICAgICBpZiAoIXRoaXMuaXNJbnNpZ25pZmljYW50VGV4dE5vZGUoZWxlbWVudC5maXJzdENoaWxkKSB8fCAhdGhpcy5pc0Jsb2NrRWxlbWVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5nZXRCbG9ja0F0dHJpYnV0ZXMoZWxlbWVudClcbiAgICAgICAgY29uc3QgaHRtbEF0dHJpYnV0ZXMgPSB0aGlzLmdldEJsb2NrSFRNTEF0dHJpYnV0ZXMoZWxlbWVudClcbiAgICAgICAgaWYgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIGlmICghKGN1cnJlbnRCbG9ja0NvbnRhaW5zRWxlbWVudCAmJiBhcnJheXNBcmVFcXVhbChhdHRyaWJ1dGVzLCB0aGlzLmN1cnJlbnRCbG9jay5hdHRyaWJ1dGVzKSkpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEJsb2NrID0gdGhpcy5hcHBlbmRCbG9ja0ZvckF0dHJpYnV0ZXNXaXRoRWxlbWVudChhdHRyaWJ1dGVzLCBlbGVtZW50LCBodG1sQXR0cmlidXRlcylcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEJsb2NrRWxlbWVudCA9IGVsZW1lbnRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwZW5kU3RyaW5nV2l0aEF0dHJpYnV0ZXMoXCJcXG5cIilcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudEJsb2NrRWxlbWVudCAmJiAhY3VycmVudEJsb2NrQ29udGFpbnNFbGVtZW50ICYmICFlbGVtZW50SXNCbG9ja0VsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHBhcmVudEJsb2NrRWxlbWVudCA9IHRoaXMuZmluZFBhcmVudEJsb2NrRWxlbWVudChlbGVtZW50KVxuICAgICAgaWYgKHBhcmVudEJsb2NrRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBlbmRCbG9ja0ZvckVsZW1lbnQocGFyZW50QmxvY2tFbGVtZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QmxvY2sgPSB0aGlzLmFwcGVuZEVtcHR5QmxvY2soKVxuICAgICAgICB0aGlzLmN1cnJlbnRCbG9ja0VsZW1lbnQgPSBudWxsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZmluZFBhcmVudEJsb2NrRWxlbWVudChlbGVtZW50KSB7XG4gICAgbGV0IHsgcGFyZW50RWxlbWVudCB9ID0gZWxlbWVudFxuICAgIHdoaWxlIChwYXJlbnRFbGVtZW50ICYmIHBhcmVudEVsZW1lbnQgIT09IHRoaXMuY29udGFpbmVyRWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMuaXNCbG9ja0VsZW1lbnQocGFyZW50RWxlbWVudCkgJiYgdGhpcy5ibG9ja0VsZW1lbnRzLmluY2x1ZGVzKHBhcmVudEVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybiBwYXJlbnRFbGVtZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRFbGVtZW50ID0gcGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBwcm9jZXNzVGV4dE5vZGUobm9kZSkge1xuICAgIGxldCBzdHJpbmcgPSBub2RlLmRhdGFcbiAgICBpZiAoIWVsZW1lbnRDYW5EaXNwbGF5UHJlZm9ybWF0dGVkVGV4dChub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICBzdHJpbmcgPSBzcXVpc2hCcmVha2FibGVXaGl0ZXNwYWNlKHN0cmluZylcbiAgICAgIGlmIChzdHJpbmdFbmRzV2l0aFdoaXRlc3BhY2Uobm9kZS5wcmV2aW91c1NpYmxpbmc/LnRleHRDb250ZW50KSkge1xuICAgICAgICBzdHJpbmcgPSBsZWZ0VHJpbUJyZWFrYWJsZVdoaXRlc3BhY2Uoc3RyaW5nKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hcHBlbmRTdHJpbmdXaXRoQXR0cmlidXRlcyhzdHJpbmcsIHRoaXMuZ2V0VGV4dEF0dHJpYnV0ZXMobm9kZS5wYXJlbnROb2RlKSlcbiAgfVxuXG4gIHByb2Nlc3NFbGVtZW50KGVsZW1lbnQpIHtcbiAgICBsZXQgYXR0cmlidXRlc1xuICAgIGlmIChub2RlSXNBdHRhY2htZW50RWxlbWVudChlbGVtZW50KSkge1xuICAgICAgYXR0cmlidXRlcyA9IHBhcnNlVHJpeERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgXCJhdHRhY2htZW50XCIpXG4gICAgICBpZiAoT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHRleHRBdHRyaWJ1dGVzID0gdGhpcy5nZXRUZXh0QXR0cmlidXRlcyhlbGVtZW50KVxuICAgICAgICB0aGlzLmFwcGVuZEF0dGFjaG1lbnRXaXRoQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCB0ZXh0QXR0cmlidXRlcylcbiAgICAgICAgLy8gV2UgaGF2ZSBldmVyeXRoaW5nIHdlIG5lZWQgc28gYXZvaWQgcHJvY2Vzc2luZyBpbm5lciBub2Rlc1xuICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IFwiXCJcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NlZEVsZW1lbnRzLnB1c2goZWxlbWVudClcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoICh0YWdOYW1lKGVsZW1lbnQpKSB7XG4gICAgICAgIGNhc2UgXCJiclwiOlxuICAgICAgICAgIGlmICghdGhpcy5pc0V4dHJhQlIoZWxlbWVudCkgJiYgIXRoaXMuaXNCbG9ja0VsZW1lbnQoZWxlbWVudC5uZXh0U2libGluZykpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kU3RyaW5nV2l0aEF0dHJpYnV0ZXMoXCJcXG5cIiwgdGhpcy5nZXRUZXh0QXR0cmlidXRlcyhlbGVtZW50KSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc2VkRWxlbWVudHMucHVzaChlbGVtZW50KVxuICAgICAgICBjYXNlIFwiaW1nXCI6XG4gICAgICAgICAgYXR0cmlidXRlcyA9IHsgdXJsOiBlbGVtZW50LmdldEF0dHJpYnV0ZShcInNyY1wiKSwgY29udGVudFR5cGU6IFwiaW1hZ2VcIiB9XG4gICAgICAgICAgY29uc3Qgb2JqZWN0ID0gZ2V0SW1hZ2VEaW1lbnNpb25zKGVsZW1lbnQpXG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldXG4gICAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmFwcGVuZEF0dGFjaG1lbnRXaXRoQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCB0aGlzLmdldFRleHRBdHRyaWJ1dGVzKGVsZW1lbnQpKVxuICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NlZEVsZW1lbnRzLnB1c2goZWxlbWVudClcbiAgICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgICAgaWYgKHRoaXMubmVlZHNUYWJsZVNlcGFyYXRvcihlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwZW5kU3RyaW5nV2l0aEF0dHJpYnV0ZXMoY29uZmlnLnBhcnNlci50YWJsZVJvd1NlcGFyYXRvcilcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBcInRkXCI6XG4gICAgICAgICAgaWYgKHRoaXMubmVlZHNUYWJsZVNlcGFyYXRvcihlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwZW5kU3RyaW5nV2l0aEF0dHJpYnV0ZXMoY29uZmlnLnBhcnNlci50YWJsZUNlbGxTZXBhcmF0b3IpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRG9jdW1lbnQgY29uc3RydWN0aW9uXG5cbiAgYXBwZW5kQmxvY2tGb3JBdHRyaWJ1dGVzV2l0aEVsZW1lbnQoYXR0cmlidXRlcywgZWxlbWVudCwgaHRtbEF0dHJpYnV0ZXMgPSB7fSkge1xuICAgIHRoaXMuYmxvY2tFbGVtZW50cy5wdXNoKGVsZW1lbnQpXG4gICAgY29uc3QgYmxvY2sgPSBibG9ja0ZvckF0dHJpYnV0ZXMoYXR0cmlidXRlcywgaHRtbEF0dHJpYnV0ZXMpXG4gICAgdGhpcy5ibG9ja3MucHVzaChibG9jaylcbiAgICByZXR1cm4gYmxvY2tcbiAgfVxuXG4gIGFwcGVuZEVtcHR5QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQmxvY2tGb3JBdHRyaWJ1dGVzV2l0aEVsZW1lbnQoW10sIG51bGwpXG4gIH1cblxuICBhcHBlbmRTdHJpbmdXaXRoQXR0cmlidXRlcyhzdHJpbmcsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRQaWVjZShwaWVjZUZvclN0cmluZyhzdHJpbmcsIGF0dHJpYnV0ZXMpKVxuICB9XG5cbiAgYXBwZW5kQXR0YWNobWVudFdpdGhBdHRyaWJ1dGVzKGF0dGFjaG1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRQaWVjZShwaWVjZUZvckF0dGFjaG1lbnQoYXR0YWNobWVudCwgYXR0cmlidXRlcykpXG4gIH1cblxuICBhcHBlbmRQaWVjZShwaWVjZSkge1xuICAgIGlmICh0aGlzLmJsb2Nrcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuYXBwZW5kRW1wdHlCbG9jaygpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmJsb2Nrc1t0aGlzLmJsb2Nrcy5sZW5ndGggLSAxXS50ZXh0LnB1c2gocGllY2UpXG4gIH1cblxuICBhcHBlbmRTdHJpbmdUb1RleHRBdEluZGV4KHN0cmluZywgaW5kZXgpIHtcbiAgICBjb25zdCB7IHRleHQgfSA9IHRoaXMuYmxvY2tzW2luZGV4XVxuICAgIGNvbnN0IHBpZWNlID0gdGV4dFt0ZXh0Lmxlbmd0aCAtIDFdXG5cbiAgICBpZiAocGllY2U/LnR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHBpZWNlLnN0cmluZyArPSBzdHJpbmdcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRleHQucHVzaChwaWVjZUZvclN0cmluZyhzdHJpbmcpKVxuICAgIH1cbiAgfVxuXG4gIHByZXBlbmRTdHJpbmdUb1RleHRBdEluZGV4KHN0cmluZywgaW5kZXgpIHtcbiAgICBjb25zdCB7IHRleHQgfSA9IHRoaXMuYmxvY2tzW2luZGV4XVxuICAgIGNvbnN0IHBpZWNlID0gdGV4dFswXVxuXG4gICAgaWYgKHBpZWNlPy50eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBwaWVjZS5zdHJpbmcgPSBzdHJpbmcgKyBwaWVjZS5zdHJpbmdcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRleHQudW5zaGlmdChwaWVjZUZvclN0cmluZyhzdHJpbmcpKVxuICAgIH1cbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZSBwYXJzaW5nXG5cbiAgZ2V0VGV4dEF0dHJpYnV0ZXMoZWxlbWVudCkge1xuICAgIGxldCB2YWx1ZVxuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7fVxuICAgIGZvciAoY29uc3QgYXR0cmlidXRlIGluIGNvbmZpZy50ZXh0QXR0cmlidXRlcykge1xuICAgICAgY29uc3QgY29uZmlnQXR0ciA9IGNvbmZpZy50ZXh0QXR0cmlidXRlc1thdHRyaWJ1dGVdXG4gICAgICBpZiAoXG4gICAgICAgIGNvbmZpZ0F0dHIudGFnTmFtZSAmJlxuICAgICAgICBmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZShlbGVtZW50LCB7XG4gICAgICAgICAgbWF0Y2hpbmdTZWxlY3RvcjogY29uZmlnQXR0ci50YWdOYW1lLFxuICAgICAgICAgIHVudGlsTm9kZTogdGhpcy5jb250YWluZXJFbGVtZW50LFxuICAgICAgICB9KVxuICAgICAgKSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbYXR0cmlidXRlXSA9IHRydWVcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnQXR0ci5wYXJzZXIpIHtcbiAgICAgICAgdmFsdWUgPSBjb25maWdBdHRyLnBhcnNlcihlbGVtZW50KVxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBsZXQgYXR0cmlidXRlSW5oZXJpdGVkRnJvbUJsb2NrID0gZmFsc2VcbiAgICAgICAgICBmb3IgKGNvbnN0IGJsb2NrRWxlbWVudCBvZiB0aGlzLmZpbmRCbG9ja0VsZW1lbnRBbmNlc3RvcnMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmIChjb25maWdBdHRyLnBhcnNlcihibG9ja0VsZW1lbnQpID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICBhdHRyaWJ1dGVJbmhlcml0ZWRGcm9tQmxvY2sgPSB0cnVlXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghYXR0cmlidXRlSW5oZXJpdGVkRnJvbUJsb2NrKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPSB2YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb25maWdBdHRyLnN0eWxlUHJvcGVydHkpIHtcbiAgICAgICAgdmFsdWUgPSBlbGVtZW50LnN0eWxlW2NvbmZpZ0F0dHIuc3R5bGVQcm9wZXJ0eV1cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgYXR0cmlidXRlc1thdHRyaWJ1dGVdID0gdmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2RlSXNBdHRhY2htZW50RWxlbWVudChlbGVtZW50KSkge1xuICAgICAgY29uc3Qgb2JqZWN0ID0gcGFyc2VUcml4RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBcImF0dHJpYnV0ZXNcIilcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldXG4gICAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGF0dHJpYnV0ZXNcbiAgfVxuXG4gIGdldEJsb2NrQXR0cmlidXRlcyhlbGVtZW50KSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IFtdXG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gdGhpcy5jb250YWluZXJFbGVtZW50KSB7XG4gICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBpbiBjb25maWcuYmxvY2tBdHRyaWJ1dGVzKSB7XG4gICAgICAgIGNvbnN0IGF0dHJDb25maWcgPSBjb25maWcuYmxvY2tBdHRyaWJ1dGVzW2F0dHJpYnV0ZV1cbiAgICAgICAgaWYgKGF0dHJDb25maWcucGFyc2UgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKHRhZ05hbWUoZWxlbWVudCkgPT09IGF0dHJDb25maWcudGFnTmFtZSkge1xuICAgICAgICAgICAgaWYgKGF0dHJDb25maWcudGVzdD8uKGVsZW1lbnQpIHx8ICFhdHRyQ29uZmlnLnRlc3QpIHtcbiAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZSlcbiAgICAgICAgICAgICAgaWYgKGF0dHJDb25maWcubGlzdEF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyQ29uZmlnLmxpc3RBdHRyaWJ1dGUpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGVcbiAgICB9XG4gICAgcmV0dXJuIGF0dHJpYnV0ZXMucmV2ZXJzZSgpXG4gIH1cblxuICBnZXRCbG9ja0hUTUxBdHRyaWJ1dGVzKGVsZW1lbnQpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgICBjb25zdCBibG9ja0NvbmZpZyA9IE9iamVjdC52YWx1ZXMoY29uZmlnLmJsb2NrQXR0cmlidXRlcykuZmluZChzZXR0aW5ncyA9PiBzZXR0aW5ncy50YWdOYW1lID09PSB0YWdOYW1lKGVsZW1lbnQpKVxuICAgIGNvbnN0IGFsbG93ZWRBdHRyaWJ1dGVzID0gYmxvY2tDb25maWc/Lmh0bWxBdHRyaWJ1dGVzIHx8IFtdXG5cbiAgICBhbGxvd2VkQXR0cmlidXRlcy5mb3JFYWNoKChhdHRyaWJ1dGUpID0+IHtcbiAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbYXR0cmlidXRlXSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIGF0dHJpYnV0ZXNcbiAgfVxuXG4gIGZpbmRCbG9ja0VsZW1lbnRBbmNlc3RvcnMoZWxlbWVudCkge1xuICAgIGNvbnN0IGFuY2VzdG9ycyA9IFtdXG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gdGhpcy5jb250YWluZXJFbGVtZW50KSB7XG4gICAgICBjb25zdCB0YWcgPSB0YWdOYW1lKGVsZW1lbnQpXG4gICAgICBpZiAoZ2V0QmxvY2tUYWdOYW1lcygpLmluY2x1ZGVzKHRhZykpIHtcbiAgICAgICAgYW5jZXN0b3JzLnB1c2goZWxlbWVudClcbiAgICAgIH1cbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGVcbiAgICB9XG4gICAgcmV0dXJuIGFuY2VzdG9yc1xuICB9XG5cbiAgLy8gRWxlbWVudCBpbnNwZWN0aW9uXG5cbiAgaXNCbG9ja0VsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50Py5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHJldHVyblxuICAgIGlmIChub2RlSXNBdHRhY2htZW50RWxlbWVudChlbGVtZW50KSkgcmV0dXJuXG4gICAgaWYgKGZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlKGVsZW1lbnQsIHsgbWF0Y2hpbmdTZWxlY3RvcjogXCJ0ZFwiLCB1bnRpbE5vZGU6IHRoaXMuY29udGFpbmVyRWxlbWVudCB9KSkgcmV0dXJuXG5cbiAgICByZXR1cm4gZ2V0QmxvY2tUYWdOYW1lcygpLmluY2x1ZGVzKHRhZ05hbWUoZWxlbWVudCkpIHx8XG4gICAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5kaXNwbGF5ID09PSBcImJsb2NrXCJcbiAgfVxuXG4gIGlzSW5zaWduaWZpY2FudFRleHROb2RlKG5vZGUpIHtcbiAgICBpZiAobm9kZT8ubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFKSByZXR1cm5cbiAgICBpZiAoIXN0cmluZ0lzQWxsQnJlYWthYmxlV2hpdGVzcGFjZShub2RlLmRhdGEpKSByZXR1cm5cbiAgICBjb25zdCB7IHBhcmVudE5vZGUsIHByZXZpb3VzU2libGluZywgbmV4dFNpYmxpbmcgfSA9IG5vZGVcbiAgICBpZiAobm9kZUVuZHNXaXRoTm9uV2hpdGVzcGFjZShwYXJlbnROb2RlLnByZXZpb3VzU2libGluZykgJiYgIXRoaXMuaXNCbG9ja0VsZW1lbnQocGFyZW50Tm9kZS5wcmV2aW91c1NpYmxpbmcpKSByZXR1cm5cbiAgICBpZiAoZWxlbWVudENhbkRpc3BsYXlQcmVmb3JtYXR0ZWRUZXh0KHBhcmVudE5vZGUpKSByZXR1cm5cbiAgICByZXR1cm4gIXByZXZpb3VzU2libGluZyB8fCB0aGlzLmlzQmxvY2tFbGVtZW50KHByZXZpb3VzU2libGluZykgfHwgIW5leHRTaWJsaW5nIHx8IHRoaXMuaXNCbG9ja0VsZW1lbnQobmV4dFNpYmxpbmcpXG4gIH1cblxuICBpc0V4dHJhQlIoZWxlbWVudCkge1xuICAgIHJldHVybiB0YWdOYW1lKGVsZW1lbnQpID09PSBcImJyXCIgJiYgdGhpcy5pc0Jsb2NrRWxlbWVudChlbGVtZW50LnBhcmVudE5vZGUpICYmIGVsZW1lbnQucGFyZW50Tm9kZS5sYXN0Q2hpbGQgPT09IGVsZW1lbnRcbiAgfVxuXG4gIG5lZWRzVGFibGVTZXBhcmF0b3IoZWxlbWVudCkge1xuICAgIGlmIChjb25maWcucGFyc2VyLnJlbW92ZUJsYW5rVGFibGVDZWxscykge1xuICAgICAgY29uc3QgY29udGVudCA9IGVsZW1lbnQucHJldmlvdXNTaWJsaW5nPy50ZXh0Q29udGVudFxuICAgICAgcmV0dXJuIGNvbnRlbnQgJiYgL1xcUy8udGVzdChjb250ZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5wcmV2aW91c1NpYmxpbmdcbiAgICB9XG4gIH1cblxuICAvLyBNYXJnaW4gdHJhbnNsYXRpb25cblxuICB0cmFuc2xhdGVCbG9ja0VsZW1lbnRNYXJnaW5zVG9OZXdsaW5lcygpIHtcbiAgICBjb25zdCBkZWZhdWx0TWFyZ2luID0gdGhpcy5nZXRNYXJnaW5PZkRlZmF1bHRCbG9ja0VsZW1lbnQoKVxuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuYmxvY2tzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgbWFyZ2luID0gdGhpcy5nZXRNYXJnaW5PZkJsb2NrRWxlbWVudEF0SW5kZXgoaW5kZXgpXG4gICAgICBpZiAobWFyZ2luKSB7XG4gICAgICAgIGlmIChtYXJnaW4udG9wID4gZGVmYXVsdE1hcmdpbi50b3AgKiAyKSB7XG4gICAgICAgICAgdGhpcy5wcmVwZW5kU3RyaW5nVG9UZXh0QXRJbmRleChcIlxcblwiLCBpbmRleClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXJnaW4uYm90dG9tID4gZGVmYXVsdE1hcmdpbi5ib3R0b20gKiAyKSB7XG4gICAgICAgICAgdGhpcy5hcHBlbmRTdHJpbmdUb1RleHRBdEluZGV4KFwiXFxuXCIsIGluZGV4KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0TWFyZ2luT2ZCbG9ja0VsZW1lbnRBdEluZGV4KGluZGV4KSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuYmxvY2tFbGVtZW50c1tpbmRleF1cbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQudGV4dENvbnRlbnQpIHtcbiAgICAgICAgaWYgKCFnZXRCbG9ja1RhZ05hbWVzKCkuaW5jbHVkZXModGFnTmFtZShlbGVtZW50KSkgJiYgIXRoaXMucHJvY2Vzc2VkRWxlbWVudHMuaW5jbHVkZXMoZWxlbWVudCkpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0QmxvY2tFbGVtZW50TWFyZ2luKGVsZW1lbnQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRNYXJnaW5PZkRlZmF1bHRCbG9ja0VsZW1lbnQoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IG1ha2VFbGVtZW50KGNvbmZpZy5ibG9ja0F0dHJpYnV0ZXMuZGVmYXVsdC50YWdOYW1lKVxuICAgIHRoaXMuY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KVxuICAgIHJldHVybiBnZXRCbG9ja0VsZW1lbnRNYXJnaW4oZWxlbWVudClcbiAgfVxufVxuXG4vL8KgSGVscGVyc1xuXG5jb25zdCBlbGVtZW50Q2FuRGlzcGxheVByZWZvcm1hdHRlZFRleHQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGNvbnN0IHsgd2hpdGVTcGFjZSB9ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudClcbiAgcmV0dXJuIFsgXCJwcmVcIiwgXCJwcmUtd3JhcFwiLCBcInByZS1saW5lXCIgXS5pbmNsdWRlcyh3aGl0ZVNwYWNlKVxufVxuXG5jb25zdCBub2RlRW5kc1dpdGhOb25XaGl0ZXNwYWNlID0gKG5vZGUpID0+IG5vZGUgJiYgIXN0cmluZ0VuZHNXaXRoV2hpdGVzcGFjZShub2RlLnRleHRDb250ZW50KVxuXG5jb25zdCBnZXRCbG9ja0VsZW1lbnRNYXJnaW4gPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudClcbiAgaWYgKHN0eWxlLmRpc3BsYXkgPT09IFwiYmxvY2tcIikge1xuICAgIHJldHVybiB7IHRvcDogcGFyc2VJbnQoc3R5bGUubWFyZ2luVG9wKSwgYm90dG9tOiBwYXJzZUludChzdHlsZS5tYXJnaW5Cb3R0b20pIH1cbiAgfVxufVxuXG5jb25zdCBub2RlRmlsdGVyID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAodGFnTmFtZShub2RlKSA9PT0gXCJzdHlsZVwiKSB7XG4gICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX1JFSkVDVFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFRcbiAgfVxufVxuXG4vLyBXaGl0ZXNwYWNlXG5cbmNvbnN0IGxlZnRUcmltQnJlYWthYmxlV2hpdGVzcGFjZSA9IChzdHJpbmcpID0+IHN0cmluZy5yZXBsYWNlKG5ldyBSZWdFeHAoYF4ke2JyZWFrYWJsZVdoaXRlc3BhY2VQYXR0ZXJuLnNvdXJjZX0rYCksIFwiXCIpXG5cbmNvbnN0IHN0cmluZ0lzQWxsQnJlYWthYmxlV2hpdGVzcGFjZSA9IChzdHJpbmcpID0+IG5ldyBSZWdFeHAoYF4ke2JyZWFrYWJsZVdoaXRlc3BhY2VQYXR0ZXJuLnNvdXJjZX0qJGApLnRlc3Qoc3RyaW5nKVxuXG5jb25zdCBzdHJpbmdFbmRzV2l0aFdoaXRlc3BhY2UgPSAoc3RyaW5nKSA9PiAvXFxzJC8udGVzdChzdHJpbmcpXG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiAgICBuby1lbXB0eSxcbiovXG5pbXBvcnQgeyByZW1vdmVOb2RlIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuaW1wb3J0IERvY3VtZW50VmlldyBmcm9tIFwidHJpeC92aWV3cy9kb2N1bWVudF92aWV3XCJcbmltcG9ydCBEb2N1bWVudCBmcm9tIFwidHJpeC9tb2RlbHMvZG9jdW1lbnRcIlxuaW1wb3J0IEhUTUxQYXJzZXIgZnJvbSBcInRyaXgvbW9kZWxzL2h0bWxfcGFyc2VyXCJcblxuY29uc3QgdW5zZXJpYWxpemFibGVFbGVtZW50U2VsZWN0b3IgPSBcIltkYXRhLXRyaXgtc2VyaWFsaXplPWZhbHNlXVwiXG5jb25zdCB1bnNlcmlhbGl6YWJsZUF0dHJpYnV0ZU5hbWVzID0gW1xuICBcImNvbnRlbnRlZGl0YWJsZVwiLFxuICBcImRhdGEtdHJpeC1pZFwiLFxuICBcImRhdGEtdHJpeC1zdG9yZS1rZXlcIixcbiAgXCJkYXRhLXRyaXgtbXV0YWJsZVwiLFxuICBcImRhdGEtdHJpeC1wbGFjZWhvbGRlclwiLFxuICBcInRhYmluZGV4XCIsXG5dXG5jb25zdCBzZXJpYWxpemVkQXR0cmlidXRlc0F0dHJpYnV0ZSA9IFwiZGF0YS10cml4LXNlcmlhbGl6ZWQtYXR0cmlidXRlc1wiXG5jb25zdCBzZXJpYWxpemVkQXR0cmlidXRlc1NlbGVjdG9yID0gYFske3NlcmlhbGl6ZWRBdHRyaWJ1dGVzQXR0cmlidXRlfV1gXG5cbmNvbnN0IGJsb2NrQ29tbWVudFBhdHRlcm4gPSBuZXcgUmVnRXhwKFwiPCEtLWJsb2NrLS0+XCIsIFwiZ1wiKVxuXG5jb25zdCBzZXJpYWxpemVycyA9IHtcbiAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IGZ1bmN0aW9uKHNlcmlhbGl6YWJsZSkge1xuICAgIGxldCBkb2N1bWVudFxuICAgIGlmIChzZXJpYWxpemFibGUgaW5zdGFuY2VvZiBEb2N1bWVudCkge1xuICAgICAgZG9jdW1lbnQgPSBzZXJpYWxpemFibGVcbiAgICB9IGVsc2UgaWYgKHNlcmlhbGl6YWJsZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICBkb2N1bWVudCA9IEhUTUxQYXJzZXIucGFyc2Uoc2VyaWFsaXphYmxlLmlubmVySFRNTCkuZ2V0RG9jdW1lbnQoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnNlcmlhbGl6YWJsZSBvYmplY3RcIilcbiAgICB9XG5cbiAgICByZXR1cm4gZG9jdW1lbnQudG9TZXJpYWxpemFibGVEb2N1bWVudCgpLnRvSlNPTlN0cmluZygpXG4gIH0sXG5cbiAgXCJ0ZXh0L2h0bWxcIjogZnVuY3Rpb24oc2VyaWFsaXphYmxlKSB7XG4gICAgbGV0IGVsZW1lbnRcbiAgICBpZiAoc2VyaWFsaXphYmxlIGluc3RhbmNlb2YgRG9jdW1lbnQpIHtcbiAgICAgIGVsZW1lbnQgPSBEb2N1bWVudFZpZXcucmVuZGVyKHNlcmlhbGl6YWJsZSlcbiAgICB9IGVsc2UgaWYgKHNlcmlhbGl6YWJsZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICBlbGVtZW50ID0gc2VyaWFsaXphYmxlLmNsb25lTm9kZSh0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnNlcmlhbGl6YWJsZSBvYmplY3RcIilcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgdW5zZXJpYWxpemFibGUgZWxlbWVudHNcbiAgICBBcnJheS5mcm9tKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh1bnNlcmlhbGl6YWJsZUVsZW1lbnRTZWxlY3RvcikpLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICByZW1vdmVOb2RlKGVsKVxuICAgIH0pXG5cbiAgICAvLyBSZW1vdmUgdW5zZXJpYWxpemFibGUgYXR0cmlidXRlc1xuICAgIHVuc2VyaWFsaXphYmxlQXR0cmlidXRlTmFtZXMuZm9yRWFjaCgoYXR0cmlidXRlKSA9PiB7XG4gICAgICBBcnJheS5mcm9tKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChgWyR7YXR0cmlidXRlfV1gKSkuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIC8vIFJld3JpdGUgZWxlbWVudHMgd2l0aCBzZXJpYWxpemVkIGF0dHJpYnV0ZSBvdmVycmlkZXNcbiAgICBBcnJheS5mcm9tKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZXJpYWxpemVkQXR0cmlidXRlc1NlbGVjdG9yKSkuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBKU09OLnBhcnNlKGVsLmdldEF0dHJpYnV0ZShzZXJpYWxpemVkQXR0cmlidXRlc0F0dHJpYnV0ZSkpXG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShzZXJpYWxpemVkQXR0cmlidXRlc0F0dHJpYnV0ZSlcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV1cbiAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxuICAgIH0pXG5cbiAgICByZXR1cm4gZWxlbWVudC5pbm5lckhUTUwucmVwbGFjZShibG9ja0NvbW1lbnRQYXR0ZXJuLCBcIlwiKVxuICB9LFxufVxuXG5jb25zdCBkZXNlcmlhbGl6ZXJzID0ge1xuICBcImFwcGxpY2F0aW9uL2pzb25cIjogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgcmV0dXJuIERvY3VtZW50LmZyb21KU09OU3RyaW5nKHN0cmluZylcbiAgfSxcblxuICBcInRleHQvaHRtbFwiOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICByZXR1cm4gSFRNTFBhcnNlci5wYXJzZShzdHJpbmcpLmdldERvY3VtZW50KClcbiAgfSxcbn1cblxuZXhwb3J0IGNvbnN0IHNlcmlhbGl6ZVRvQ29udGVudFR5cGUgPSBmdW5jdGlvbihzZXJpYWxpemFibGUsIGNvbnRlbnRUeXBlKSB7XG4gIGNvbnN0IHNlcmlhbGl6ZXIgPSBzZXJpYWxpemVyc1tjb250ZW50VHlwZV1cbiAgaWYgKHNlcmlhbGl6ZXIpIHtcbiAgICByZXR1cm4gc2VyaWFsaXplcihzZXJpYWxpemFibGUpXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIGNvbnRlbnQgdHlwZTogJHtjb250ZW50VHlwZX1gKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkZXNlcmlhbGl6ZUZyb21Db250ZW50VHlwZSA9IGZ1bmN0aW9uKHN0cmluZywgY29udGVudFR5cGUpIHtcbiAgY29uc3QgZGVzZXJpYWxpemVyID0gZGVzZXJpYWxpemVyc1tjb250ZW50VHlwZV1cbiAgaWYgKGRlc2VyaWFsaXplcikge1xuICAgIHJldHVybiBkZXNlcmlhbGl6ZXIoc3RyaW5nKVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgdW5rbm93biBjb250ZW50IHR5cGU6ICR7Y29udGVudFR5cGV9YClcbiAgfVxufVxuIiwgImltcG9ydCBcInRyaXgvbW9kZWxzL2F0dGFjaG1lbnRcIlxuaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFuYWdlZEF0dGFjaG1lbnQgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGNvbnN0cnVjdG9yKGF0dGFjaG1lbnRNYW5hZ2VyLCBhdHRhY2htZW50KSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMuYXR0YWNobWVudE1hbmFnZXIgPSBhdHRhY2htZW50TWFuYWdlclxuICAgIHRoaXMuYXR0YWNobWVudCA9IGF0dGFjaG1lbnRcbiAgICB0aGlzLmlkID0gdGhpcy5hdHRhY2htZW50LmlkXG4gICAgdGhpcy5maWxlID0gdGhpcy5hdHRhY2htZW50LmZpbGVcbiAgfVxuXG4gIHJlbW92ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRhY2htZW50TWFuYWdlci5yZXF1ZXN0UmVtb3ZhbE9mQXR0YWNobWVudCh0aGlzLmF0dGFjaG1lbnQpXG4gIH1cbn1cblxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LmdldEF0dHJpYnV0ZVwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50Lmhhc0F0dHJpYnV0ZVwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LnNldEF0dHJpYnV0ZVwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LmdldEF0dHJpYnV0ZXNcIilcbk1hbmFnZWRBdHRhY2htZW50LnByb3h5TWV0aG9kKFwiYXR0YWNobWVudC5zZXRBdHRyaWJ1dGVzXCIpXG5NYW5hZ2VkQXR0YWNobWVudC5wcm94eU1ldGhvZChcImF0dGFjaG1lbnQuaXNQZW5kaW5nXCIpXG5NYW5hZ2VkQXR0YWNobWVudC5wcm94eU1ldGhvZChcImF0dGFjaG1lbnQuaXNQcmV2aWV3YWJsZVwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LmdldFVSTFwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LmdldEhyZWZcIilcbk1hbmFnZWRBdHRhY2htZW50LnByb3h5TWV0aG9kKFwiYXR0YWNobWVudC5nZXRGaWxlbmFtZVwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LmdldEZpbGVzaXplXCIpXG5NYW5hZ2VkQXR0YWNobWVudC5wcm94eU1ldGhvZChcImF0dGFjaG1lbnQuZ2V0Rm9ybWF0dGVkRmlsZXNpemVcIilcbk1hbmFnZWRBdHRhY2htZW50LnByb3h5TWV0aG9kKFwiYXR0YWNobWVudC5nZXRFeHRlbnNpb25cIilcbk1hbmFnZWRBdHRhY2htZW50LnByb3h5TWV0aG9kKFwiYXR0YWNobWVudC5nZXRDb250ZW50VHlwZVwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LmdldEZpbGVcIilcbk1hbmFnZWRBdHRhY2htZW50LnByb3h5TWV0aG9kKFwiYXR0YWNobWVudC5zZXRGaWxlXCIpXG5NYW5hZ2VkQXR0YWNobWVudC5wcm94eU1ldGhvZChcImF0dGFjaG1lbnQucmVsZWFzZUZpbGVcIilcbk1hbmFnZWRBdHRhY2htZW50LnByb3h5TWV0aG9kKFwiYXR0YWNobWVudC5nZXRVcGxvYWRQcm9ncmVzc1wiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LnNldFVwbG9hZFByb2dyZXNzXCIpXG5cbiIsICJpbXBvcnQgTWFuYWdlZEF0dGFjaG1lbnQgZnJvbSBcInRyaXgvbW9kZWxzL21hbmFnZWRfYXR0YWNobWVudFwiXG5pbXBvcnQgQmFzaWNPYmplY3QgZnJvbSBcInRyaXgvY29yZS9iYXNpY19vYmplY3RcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdHRhY2htZW50TWFuYWdlciBleHRlbmRzIEJhc2ljT2JqZWN0IHtcbiAgY29uc3RydWN0b3IoYXR0YWNobWVudHMgPSBbXSkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLm1hbmFnZWRBdHRhY2htZW50cyA9IHt9XG4gICAgQXJyYXkuZnJvbShhdHRhY2htZW50cykuZm9yRWFjaCgoYXR0YWNobWVudCkgPT4ge1xuICAgICAgdGhpcy5tYW5hZ2VBdHRhY2htZW50KGF0dGFjaG1lbnQpXG4gICAgfSlcbiAgfVxuXG4gIGdldEF0dGFjaG1lbnRzKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdXG4gICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLm1hbmFnZWRBdHRhY2htZW50cykge1xuICAgICAgY29uc3QgYXR0YWNobWVudCA9IHRoaXMubWFuYWdlZEF0dGFjaG1lbnRzW2lkXVxuICAgICAgcmVzdWx0LnB1c2goYXR0YWNobWVudClcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgbWFuYWdlQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgaWYgKCF0aGlzLm1hbmFnZWRBdHRhY2htZW50c1thdHRhY2htZW50LmlkXSkge1xuICAgICAgdGhpcy5tYW5hZ2VkQXR0YWNobWVudHNbYXR0YWNobWVudC5pZF0gPSBuZXcgTWFuYWdlZEF0dGFjaG1lbnQodGhpcywgYXR0YWNobWVudClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubWFuYWdlZEF0dGFjaG1lbnRzW2F0dGFjaG1lbnQuaWRdXG4gIH1cblxuICBhdHRhY2htZW50SXNNYW5hZ2VkKGF0dGFjaG1lbnQpIHtcbiAgICByZXR1cm4gYXR0YWNobWVudC5pZCBpbiB0aGlzLm1hbmFnZWRBdHRhY2htZW50c1xuICB9XG5cbiAgcmVxdWVzdFJlbW92YWxPZkF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGlmICh0aGlzLmF0dGFjaG1lbnRJc01hbmFnZWQoYXR0YWNobWVudCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5hdHRhY2htZW50TWFuYWdlckRpZFJlcXVlc3RSZW1vdmFsT2ZBdHRhY2htZW50Py4oYXR0YWNobWVudClcbiAgICB9XG4gIH1cblxuICB1bm1hbmFnZUF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGNvbnN0IG1hbmFnZWRBdHRhY2htZW50ID0gdGhpcy5tYW5hZ2VkQXR0YWNobWVudHNbYXR0YWNobWVudC5pZF1cbiAgICBkZWxldGUgdGhpcy5tYW5hZ2VkQXR0YWNobWVudHNbYXR0YWNobWVudC5pZF1cbiAgICByZXR1cm4gbWFuYWdlZEF0dGFjaG1lbnRcbiAgfVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbmVCcmVha0luc2VydGlvbiB7XG4gIGNvbnN0cnVjdG9yKGNvbXBvc2l0aW9uKSB7XG4gICAgdGhpcy5jb21wb3NpdGlvbiA9IGNvbXBvc2l0aW9uXG4gICAgdGhpcy5kb2N1bWVudCA9IHRoaXMuY29tcG9zaXRpb24uZG9jdW1lbnRcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5jb21wb3NpdGlvbi5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSBzZWxlY3RlZFJhbmdlWzBdXG4gICAgdGhpcy5lbmRQb3NpdGlvbiA9IHNlbGVjdGVkUmFuZ2VbMV1cblxuICAgIHRoaXMuc3RhcnRMb2NhdGlvbiA9IHRoaXMuZG9jdW1lbnQubG9jYXRpb25Gcm9tUG9zaXRpb24odGhpcy5zdGFydFBvc2l0aW9uKVxuICAgIHRoaXMuZW5kTG9jYXRpb24gPSB0aGlzLmRvY3VtZW50LmxvY2F0aW9uRnJvbVBvc2l0aW9uKHRoaXMuZW5kUG9zaXRpb24pXG5cbiAgICB0aGlzLmJsb2NrID0gdGhpcy5kb2N1bWVudC5nZXRCbG9ja0F0SW5kZXgodGhpcy5lbmRMb2NhdGlvbi5pbmRleClcbiAgICB0aGlzLmJyZWFrc09uUmV0dXJuID0gdGhpcy5ibG9jay5icmVha3NPblJldHVybigpXG4gICAgdGhpcy5wcmV2aW91c0NoYXJhY3RlciA9IHRoaXMuYmxvY2sudGV4dC5nZXRTdHJpbmdBdFBvc2l0aW9uKHRoaXMuZW5kTG9jYXRpb24ub2Zmc2V0IC0gMSlcbiAgICB0aGlzLm5leHRDaGFyYWN0ZXIgPSB0aGlzLmJsb2NrLnRleHQuZ2V0U3RyaW5nQXRQb3NpdGlvbih0aGlzLmVuZExvY2F0aW9uLm9mZnNldClcbiAgfVxuXG4gIHNob3VsZEluc2VydEJsb2NrQnJlYWsoKSB7XG4gICAgaWYgKHRoaXMuYmxvY2suaGFzQXR0cmlidXRlcygpICYmIHRoaXMuYmxvY2suaXNMaXN0SXRlbSgpICYmICF0aGlzLmJsb2NrLmlzRW1wdHkoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhcnRMb2NhdGlvbi5vZmZzZXQgIT09IDBcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuYnJlYWtzT25SZXR1cm4gJiYgdGhpcy5uZXh0Q2hhcmFjdGVyICE9PSBcIlxcblwiXG4gICAgfVxuICB9XG5cbiAgc2hvdWxkQnJlYWtGb3JtYXR0ZWRCbG9jaygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5ibG9jay5oYXNBdHRyaWJ1dGVzKCkgJiZcbiAgICAgICF0aGlzLmJsb2NrLmlzTGlzdEl0ZW0oKSAmJlxuICAgICAgKHRoaXMuYnJlYWtzT25SZXR1cm4gJiYgdGhpcy5uZXh0Q2hhcmFjdGVyID09PSBcIlxcblwiIHx8IHRoaXMucHJldmlvdXNDaGFyYWN0ZXIgPT09IFwiXFxuXCIpXG4gICAgKVxuICB9XG5cbiAgc2hvdWxkRGVjcmVhc2VMaXN0TGV2ZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2suaGFzQXR0cmlidXRlcygpICYmIHRoaXMuYmxvY2suaXNMaXN0SXRlbSgpICYmIHRoaXMuYmxvY2suaXNFbXB0eSgpXG4gIH1cblxuICBzaG91bGRQcmVwZW5kTGlzdEl0ZW0oKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2suaXNMaXN0SXRlbSgpICYmIHRoaXMuc3RhcnRMb2NhdGlvbi5vZmZzZXQgPT09IDAgJiYgIXRoaXMuYmxvY2suaXNFbXB0eSgpXG4gIH1cblxuICBzaG91bGRSZW1vdmVMYXN0QmxvY2tBdHRyaWJ1dGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2suaGFzQXR0cmlidXRlcygpICYmICF0aGlzLmJsb2NrLmlzTGlzdEl0ZW0oKSAmJiB0aGlzLmJsb2NrLmlzRW1wdHkoKVxuICB9XG59XG4iLCAiaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5pbXBvcnQgeyBPQkpFQ1RfUkVQTEFDRU1FTlRfQ0hBUkFDVEVSIH0gZnJvbSBcInRyaXgvY29uc3RhbnRzXCJcblxuaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcbmltcG9ydCBUZXh0IGZyb20gXCJ0cml4L21vZGVscy90ZXh0XCJcbmltcG9ydCBCbG9jayBmcm9tIFwidHJpeC9tb2RlbHMvYmxvY2tcIlxuaW1wb3J0IEF0dGFjaG1lbnQgZnJvbSBcInRyaXgvbW9kZWxzL2F0dGFjaG1lbnRcIlxuaW1wb3J0IERvY3VtZW50IGZyb20gXCJ0cml4L21vZGVscy9kb2N1bWVudFwiXG5pbXBvcnQgSFRNTFBhcnNlciBmcm9tIFwidHJpeC9tb2RlbHMvaHRtbF9wYXJzZXJcIlxuaW1wb3J0IExpbmVCcmVha0luc2VydGlvbiBmcm9tIFwidHJpeC9tb2RlbHMvbGluZV9icmVha19pbnNlcnRpb25cIlxuXG5pbXBvcnQge1xuICBhcnJheVN0YXJ0c1dpdGgsXG4gIGV4dGVuZCxcbiAgZ2V0QWxsQXR0cmlidXRlTmFtZXMsXG4gIGdldEJsb2NrQ29uZmlnLFxuICBnZXRUZXh0Q29uZmlnLFxuICBub3JtYWxpemVSYW5nZSxcbiAgb2JqZWN0c0FyZUVxdWFsLFxuICByYW5nZUlzQ29sbGFwc2VkLFxuICByYW5nZXNBcmVFcXVhbCxcbiAgc3VtbWFyaXplQXJyYXlDaGFuZ2UsXG59IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5cbmNvbnN0IFBMQUNFSE9MREVSID0gXCIgXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9zaXRpb24gZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLmRvY3VtZW50ID0gbmV3IERvY3VtZW50KClcbiAgICB0aGlzLmF0dGFjaG1lbnRzID0gW11cbiAgICB0aGlzLmN1cnJlbnRBdHRyaWJ1dGVzID0ge31cbiAgICB0aGlzLnJldmlzaW9uID0gMFxuICB9XG5cbiAgc2V0RG9jdW1lbnQoZG9jdW1lbnQpIHtcbiAgICBpZiAoIWRvY3VtZW50LmlzRXF1YWxUbyh0aGlzLmRvY3VtZW50KSkge1xuICAgICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50XG4gICAgICB0aGlzLnJlZnJlc2hBdHRhY2htZW50cygpXG4gICAgICB0aGlzLnJldmlzaW9uKytcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkRpZENoYW5nZURvY3VtZW50Py4oZG9jdW1lbnQpXG4gICAgfVxuICB9XG5cbiAgLy8gU25hcHNob3RzXG5cbiAgZ2V0U25hcHNob3QoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvY3VtZW50OiB0aGlzLmRvY3VtZW50LFxuICAgICAgc2VsZWN0ZWRSYW5nZTogdGhpcy5nZXRTZWxlY3RlZFJhbmdlKCksXG4gICAgfVxuICB9XG5cbiAgbG9hZFNuYXBzaG90KHsgZG9jdW1lbnQsIHNlbGVjdGVkUmFuZ2UgfSkge1xuICAgIHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uV2lsbExvYWRTbmFwc2hvdD8uKClcbiAgICB0aGlzLnNldERvY3VtZW50KGRvY3VtZW50ICE9IG51bGwgPyBkb2N1bWVudCA6IG5ldyBEb2N1bWVudCgpKVxuICAgIHRoaXMuc2V0U2VsZWN0aW9uKHNlbGVjdGVkUmFuZ2UgIT0gbnVsbCA/IHNlbGVjdGVkUmFuZ2UgOiBbIDAsIDAgXSlcbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25EaWRMb2FkU25hcHNob3Q/LigpXG4gIH1cblxuICAvLyBSZXNwb25kZXIgcHJvdG9jb2xcblxuICBpbnNlcnRUZXh0KHRleHQsIHsgdXBkYXRlUG9zaXRpb24gfSA9IHsgdXBkYXRlUG9zaXRpb246IHRydWUgfSkge1xuICAgIGNvbnN0IHNlbGVjdGVkUmFuZ2UgPSB0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKVxuICAgIHRoaXMuc2V0RG9jdW1lbnQodGhpcy5kb2N1bWVudC5pbnNlcnRUZXh0QXRSYW5nZSh0ZXh0LCBzZWxlY3RlZFJhbmdlKSlcblxuICAgIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSBzZWxlY3RlZFJhbmdlWzBdXG4gICAgY29uc3QgZW5kUG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgdGV4dC5nZXRMZW5ndGgoKVxuXG4gICAgaWYgKHVwZGF0ZVBvc2l0aW9uKSB7XG4gICAgICB0aGlzLnNldFNlbGVjdGlvbihlbmRQb3NpdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubm90aWZ5RGVsZWdhdGVPZkluc2VydGlvbkF0UmFuZ2UoWyBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiBdKVxuICB9XG5cbiAgaW5zZXJ0QmxvY2soYmxvY2sgPSBuZXcgQmxvY2soKSkge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gbmV3IERvY3VtZW50KFsgYmxvY2sgXSlcbiAgICByZXR1cm4gdGhpcy5pbnNlcnREb2N1bWVudChkb2N1bWVudClcbiAgfVxuXG4gIGluc2VydERvY3VtZW50KGRvY3VtZW50ID0gbmV3IERvY3VtZW50KCkpIHtcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQuaW5zZXJ0RG9jdW1lbnRBdFJhbmdlKGRvY3VtZW50LCBzZWxlY3RlZFJhbmdlKSlcblxuICAgIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSBzZWxlY3RlZFJhbmdlWzBdXG4gICAgY29uc3QgZW5kUG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZG9jdW1lbnQuZ2V0TGVuZ3RoKClcblxuICAgIHRoaXMuc2V0U2VsZWN0aW9uKGVuZFBvc2l0aW9uKVxuICAgIHJldHVybiB0aGlzLm5vdGlmeURlbGVnYXRlT2ZJbnNlcnRpb25BdFJhbmdlKFsgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24gXSlcbiAgfVxuXG4gIGluc2VydFN0cmluZyhzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5nZXRDdXJyZW50VGV4dEF0dHJpYnV0ZXMoKVxuICAgIGNvbnN0IHRleHQgPSBUZXh0LnRleHRGb3JTdHJpbmdXaXRoQXR0cmlidXRlcyhzdHJpbmcsIGF0dHJpYnV0ZXMpXG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0VGV4dCh0ZXh0LCBvcHRpb25zKVxuICB9XG5cbiAgaW5zZXJ0QmxvY2tCcmVhaygpIHtcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQuaW5zZXJ0QmxvY2tCcmVha0F0UmFuZ2Uoc2VsZWN0ZWRSYW5nZSkpXG5cbiAgICBjb25zdCBzdGFydFBvc2l0aW9uID0gc2VsZWN0ZWRSYW5nZVswXVxuICAgIGNvbnN0IGVuZFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbiArIDFcblxuICAgIHRoaXMuc2V0U2VsZWN0aW9uKGVuZFBvc2l0aW9uKVxuICAgIHJldHVybiB0aGlzLm5vdGlmeURlbGVnYXRlT2ZJbnNlcnRpb25BdFJhbmdlKFsgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24gXSlcbiAgfVxuXG4gIGluc2VydExpbmVCcmVhaygpIHtcbiAgICBjb25zdCBpbnNlcnRpb24gPSBuZXcgTGluZUJyZWFrSW5zZXJ0aW9uKHRoaXMpXG5cbiAgICBpZiAoaW5zZXJ0aW9uLnNob3VsZERlY3JlYXNlTGlzdExldmVsKCkpIHtcbiAgICAgIHRoaXMuZGVjcmVhc2VMaXN0TGV2ZWwoKVxuICAgICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0aW9uKGluc2VydGlvbi5zdGFydFBvc2l0aW9uKVxuICAgIH0gZWxzZSBpZiAoaW5zZXJ0aW9uLnNob3VsZFByZXBlbmRMaXN0SXRlbSgpKSB7XG4gICAgICBjb25zdCBkb2N1bWVudCA9IG5ldyBEb2N1bWVudChbIGluc2VydGlvbi5ibG9jay5jb3B5V2l0aG91dFRleHQoKSBdKVxuICAgICAgcmV0dXJuIHRoaXMuaW5zZXJ0RG9jdW1lbnQoZG9jdW1lbnQpXG4gICAgfSBlbHNlIGlmIChpbnNlcnRpb24uc2hvdWxkSW5zZXJ0QmxvY2tCcmVhaygpKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnRCbG9ja0JyZWFrKClcbiAgICB9IGVsc2UgaWYgKGluc2VydGlvbi5zaG91bGRSZW1vdmVMYXN0QmxvY2tBdHRyaWJ1dGUoKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGFzdEJsb2NrQXR0cmlidXRlKClcbiAgICB9IGVsc2UgaWYgKGluc2VydGlvbi5zaG91bGRCcmVha0Zvcm1hdHRlZEJsb2NrKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmJyZWFrRm9ybWF0dGVkQmxvY2soaW5zZXJ0aW9uKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnRTdHJpbmcoXCJcXG5cIilcbiAgICB9XG4gIH1cblxuICBpbnNlcnRIVE1MKGh0bWwpIHtcbiAgICBjb25zdCBkb2N1bWVudCA9IEhUTUxQYXJzZXIucGFyc2UoaHRtbCkuZ2V0RG9jdW1lbnQoKVxuICAgIGNvbnN0IHNlbGVjdGVkUmFuZ2UgPSB0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKVxuXG4gICAgdGhpcy5zZXREb2N1bWVudCh0aGlzLmRvY3VtZW50Lm1lcmdlRG9jdW1lbnRBdFJhbmdlKGRvY3VtZW50LCBzZWxlY3RlZFJhbmdlKSlcblxuICAgIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSBzZWxlY3RlZFJhbmdlWzBdXG4gICAgY29uc3QgZW5kUG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZG9jdW1lbnQuZ2V0TGVuZ3RoKCkgLSAxXG5cbiAgICB0aGlzLnNldFNlbGVjdGlvbihlbmRQb3NpdGlvbilcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlEZWxlZ2F0ZU9mSW5zZXJ0aW9uQXRSYW5nZShbIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uIF0pXG4gIH1cblxuICByZXBsYWNlSFRNTChodG1sKSB7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBIVE1MUGFyc2VyLnBhcnNlKGh0bWwpLmdldERvY3VtZW50KCkuY29weVVzaW5nT2JqZWN0c0Zyb21Eb2N1bWVudCh0aGlzLmRvY3VtZW50KVxuICAgIGNvbnN0IGxvY2F0aW9uUmFuZ2UgPSB0aGlzLmdldExvY2F0aW9uUmFuZ2UoeyBzdHJpY3Q6IGZhbHNlIH0pXG4gICAgY29uc3Qgc2VsZWN0ZWRSYW5nZSA9IHRoaXMuZG9jdW1lbnQucmFuZ2VGcm9tTG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKVxuICAgIHRoaXMuc2V0RG9jdW1lbnQoZG9jdW1lbnQpXG4gICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0aW9uKHNlbGVjdGVkUmFuZ2UpXG4gIH1cblxuICBpbnNlcnRGaWxlKGZpbGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRGaWxlcyhbIGZpbGUgXSlcbiAgfVxuXG4gIGluc2VydEZpbGVzKGZpbGVzKSB7XG4gICAgY29uc3QgYXR0YWNobWVudHMgPSBbXVxuXG4gICAgQXJyYXkuZnJvbShmaWxlcykuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgICAgaWYgKHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uU2hvdWxkQWNjZXB0RmlsZShmaWxlKSkge1xuICAgICAgICBjb25zdCBhdHRhY2htZW50ID0gQXR0YWNobWVudC5hdHRhY2htZW50Rm9yRmlsZShmaWxlKVxuICAgICAgICBhdHRhY2htZW50cy5wdXNoKGF0dGFjaG1lbnQpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiB0aGlzLmluc2VydEF0dGFjaG1lbnRzKGF0dGFjaG1lbnRzKVxuICB9XG5cbiAgaW5zZXJ0QXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QXR0YWNobWVudHMoWyBhdHRhY2htZW50IF0pXG4gIH1cblxuICBpbnNlcnRBdHRhY2htZW50cyhhdHRhY2htZW50cykge1xuICAgIGxldCB0ZXh0ID0gbmV3IFRleHQoKVxuXG4gICAgQXJyYXkuZnJvbShhdHRhY2htZW50cykuZm9yRWFjaCgoYXR0YWNobWVudCkgPT4ge1xuICAgICAgY29uc3QgdHlwZSA9IGF0dGFjaG1lbnQuZ2V0VHlwZSgpXG4gICAgICBjb25zdCBwcmVzZW50YXRpb24gPSBjb25maWcuYXR0YWNobWVudHNbdHlwZV0/LnByZXNlbnRhdGlvblxuXG4gICAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5nZXRDdXJyZW50VGV4dEF0dHJpYnV0ZXMoKVxuICAgICAgaWYgKHByZXNlbnRhdGlvbikge1xuICAgICAgICBhdHRyaWJ1dGVzLnByZXNlbnRhdGlvbiA9IHByZXNlbnRhdGlvblxuICAgICAgfVxuXG4gICAgICBjb25zdCBhdHRhY2htZW50VGV4dCA9IFRleHQudGV4dEZvckF0dGFjaG1lbnRXaXRoQXR0cmlidXRlcyhhdHRhY2htZW50LCBhdHRyaWJ1dGVzKVxuICAgICAgdGV4dCA9IHRleHQuYXBwZW5kVGV4dChhdHRhY2htZW50VGV4dClcbiAgICB9KVxuXG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0VGV4dCh0ZXh0KVxuICB9XG5cbiAgc2hvdWxkTWFuYWdlRGVsZXRpbmdJbkRpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICBjb25zdCBsb2NhdGlvblJhbmdlID0gdGhpcy5nZXRMb2NhdGlvblJhbmdlKClcbiAgICBpZiAocmFuZ2VJc0NvbGxhcHNlZChsb2NhdGlvblJhbmdlKSkge1xuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJiYWNrd2FyZFwiICYmIGxvY2F0aW9uUmFuZ2VbMF0ub2Zmc2V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zaG91bGRNYW5hZ2VNb3ZpbmdDdXJzb3JJbkRpcmVjdGlvbihkaXJlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb2NhdGlvblJhbmdlWzBdLmluZGV4ICE9PSBsb2NhdGlvblJhbmdlWzFdLmluZGV4KSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZGVsZXRlSW5EaXJlY3Rpb24oZGlyZWN0aW9uLCB7IGxlbmd0aCB9ID0ge30pIHtcbiAgICBsZXQgYXR0YWNobWVudCwgZGVsZXRpbmdJbnRvUHJldmlvdXNCbG9jaywgc2VsZWN0aW9uU3BhbnNCbG9ja3NcbiAgICBjb25zdCBsb2NhdGlvblJhbmdlID0gdGhpcy5nZXRMb2NhdGlvblJhbmdlKClcbiAgICBsZXQgcmFuZ2UgPSB0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKVxuICAgIGNvbnN0IHNlbGVjdGlvbklzQ29sbGFwc2VkID0gcmFuZ2VJc0NvbGxhcHNlZChyYW5nZSlcblxuICAgIGlmIChzZWxlY3Rpb25Jc0NvbGxhcHNlZCkge1xuICAgICAgZGVsZXRpbmdJbnRvUHJldmlvdXNCbG9jayA9IGRpcmVjdGlvbiA9PT0gXCJiYWNrd2FyZFwiICYmIGxvY2F0aW9uUmFuZ2VbMF0ub2Zmc2V0ID09PSAwXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGlvblNwYW5zQmxvY2tzID0gbG9jYXRpb25SYW5nZVswXS5pbmRleCAhPT0gbG9jYXRpb25SYW5nZVsxXS5pbmRleFxuICAgIH1cblxuICAgIGlmIChkZWxldGluZ0ludG9QcmV2aW91c0Jsb2NrKSB7XG4gICAgICBpZiAodGhpcy5jYW5EZWNyZWFzZUJsb2NrQXR0cmlidXRlTGV2ZWwoKSkge1xuICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuZ2V0QmxvY2soKVxuXG4gICAgICAgIGlmIChibG9jay5pc0xpc3RJdGVtKCkpIHtcbiAgICAgICAgICB0aGlzLmRlY3JlYXNlTGlzdExldmVsKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRlY3JlYXNlQmxvY2tBdHRyaWJ1dGVMZXZlbCgpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFNlbGVjdGlvbihyYW5nZVswXSlcbiAgICAgICAgaWYgKGJsb2NrLmlzRW1wdHkoKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdGlvbklzQ29sbGFwc2VkKSB7XG4gICAgICByYW5nZSA9IHRoaXMuZ2V0RXhwYW5kZWRSYW5nZUluRGlyZWN0aW9uKGRpcmVjdGlvbiwgeyBsZW5ndGggfSlcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwiYmFja3dhcmRcIikge1xuICAgICAgICBhdHRhY2htZW50ID0gdGhpcy5nZXRBdHRhY2htZW50QXRSYW5nZShyYW5nZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXR0YWNobWVudCkge1xuICAgICAgdGhpcy5lZGl0QXR0YWNobWVudChhdHRhY2htZW50KVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0RG9jdW1lbnQodGhpcy5kb2N1bWVudC5yZW1vdmVUZXh0QXRSYW5nZShyYW5nZSkpXG4gICAgICB0aGlzLnNldFNlbGVjdGlvbihyYW5nZVswXSlcbiAgICAgIGlmIChkZWxldGluZ0ludG9QcmV2aW91c0Jsb2NrIHx8IHNlbGVjdGlvblNwYW5zQmxvY2tzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG1vdmVUZXh0RnJvbVJhbmdlKHJhbmdlKSB7XG4gICAgY29uc3QgWyBwb3NpdGlvbiBdID0gQXJyYXkuZnJvbSh0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKSlcbiAgICB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQubW92ZVRleHRGcm9tUmFuZ2VUb1Bvc2l0aW9uKHJhbmdlLCBwb3NpdGlvbikpXG4gICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0aW9uKHBvc2l0aW9uKVxuICB9XG5cbiAgcmVtb3ZlQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLmRvY3VtZW50LmdldFJhbmdlT2ZBdHRhY2htZW50KGF0dGFjaG1lbnQpXG4gICAgaWYgKHJhbmdlKSB7XG4gICAgICB0aGlzLnN0b3BFZGl0aW5nQXR0YWNobWVudCgpXG4gICAgICB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQucmVtb3ZlVGV4dEF0UmFuZ2UocmFuZ2UpKVxuICAgICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0aW9uKHJhbmdlWzBdKVxuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUxhc3RCbG9ja0F0dHJpYnV0ZSgpIHtcbiAgICBjb25zdCBbIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uIF0gPSBBcnJheS5mcm9tKHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpKVxuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5kb2N1bWVudC5nZXRCbG9ja0F0UG9zaXRpb24oZW5kUG9zaXRpb24pXG4gICAgdGhpcy5yZW1vdmVDdXJyZW50QXR0cmlidXRlKGJsb2NrLmdldExhc3RBdHRyaWJ1dGUoKSlcbiAgICByZXR1cm4gdGhpcy5zZXRTZWxlY3Rpb24oc3RhcnRQb3NpdGlvbilcbiAgfVxuXG4gIGluc2VydFBsYWNlaG9sZGVyKCkge1xuICAgIHRoaXMucGxhY2Vob2xkZXJQb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb24oKVxuICAgIHJldHVybiB0aGlzLmluc2VydFN0cmluZyhQTEFDRUhPTERFUilcbiAgfVxuXG4gIHNlbGVjdFBsYWNlaG9sZGVyKCkge1xuICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyUG9zaXRpb24gIT0gbnVsbCkge1xuICAgICAgdGhpcy5zZXRTZWxlY3RlZFJhbmdlKFsgdGhpcy5wbGFjZWhvbGRlclBvc2l0aW9uLCB0aGlzLnBsYWNlaG9sZGVyUG9zaXRpb24gKyBQTEFDRUhPTERFUi5sZW5ndGggXSlcbiAgICAgIHJldHVybiB0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKVxuICAgIH1cbiAgfVxuXG4gIGZvcmdldFBsYWNlaG9sZGVyKCkge1xuICAgIHRoaXMucGxhY2Vob2xkZXJQb3NpdGlvbiA9IG51bGxcbiAgfVxuXG4gIC8vIEN1cnJlbnQgYXR0cmlidXRlc1xuXG4gIGhhc0N1cnJlbnRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jdXJyZW50QXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXVxuICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSBmYWxzZVxuICB9XG5cbiAgdG9nZ2xlQ3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgY29uc3QgdmFsdWUgPSAhdGhpcy5jdXJyZW50QXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXVxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0Q3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCB2YWx1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlQ3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKVxuICAgIH1cbiAgfVxuXG4gIGNhblNldEN1cnJlbnRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkge1xuICAgIGlmIChnZXRCbG9ja0NvbmZpZyhhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FuU2V0Q3VycmVudEJsb2NrQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNhblNldEN1cnJlbnRUZXh0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpXG4gICAgfVxuICB9XG5cbiAgY2FuU2V0Q3VycmVudFRleHRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gdGhpcy5nZXRTZWxlY3RlZERvY3VtZW50KClcbiAgICBpZiAoIWRvY3VtZW50KSByZXR1cm5cbiAgICBmb3IgKGNvbnN0IGF0dGFjaG1lbnQgb2YgQXJyYXkuZnJvbShkb2N1bWVudC5nZXRBdHRhY2htZW50cygpKSkge1xuICAgICAgaWYgKCFhdHRhY2htZW50Lmhhc0NvbnRlbnQoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGNhblNldEN1cnJlbnRCbG9ja0F0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgY29uc3QgYmxvY2sgPSB0aGlzLmdldEJsb2NrKClcbiAgICBpZiAoIWJsb2NrKSByZXR1cm5cbiAgICByZXR1cm4gIWJsb2NrLmlzVGVybWluYWxCbG9jaygpXG4gIH1cblxuICBzZXRDdXJyZW50QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGdldEJsb2NrQ29uZmlnKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRCbG9ja0F0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCB2YWx1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRUZXh0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIHZhbHVlKVxuICAgICAgdGhpcy5jdXJyZW50QXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSA9IHZhbHVlXG4gICAgICByZXR1cm4gdGhpcy5ub3RpZnlEZWxlZ2F0ZU9mQ3VycmVudEF0dHJpYnV0ZXNDaGFuZ2UoKVxuICAgIH1cbiAgfVxuXG4gIHNldEhUTUxBdHJpYnV0ZUF0UG9zaXRpb24ocG9zaXRpb24sIGF0dHJpYnV0ZU5hbWUsIHZhbHVlKSB7XG4gICAgY29uc3QgYmxvY2sgPSB0aGlzLmRvY3VtZW50LmdldEJsb2NrQXRQb3NpdGlvbihwb3NpdGlvbilcbiAgICBjb25zdCBhbGxvd2VkSFRNTEF0dHJpYnV0ZXMgPSBnZXRCbG9ja0NvbmZpZyhibG9jay5nZXRMYXN0QXR0cmlidXRlKCkpPy5odG1sQXR0cmlidXRlc1xuXG4gICAgaWYgKGJsb2NrICYmIGFsbG93ZWRIVE1MQXR0cmlidXRlcz8uaW5jbHVkZXMoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgIGNvbnN0IG5ld0RvY3VtZW50ID0gdGhpcy5kb2N1bWVudC5zZXRIVE1MQXR0cmlidXRlQXRQb3NpdGlvbihwb3NpdGlvbiwgYXR0cmlidXRlTmFtZSwgdmFsdWUpXG4gICAgICB0aGlzLnNldERvY3VtZW50KG5ld0RvY3VtZW50KVxuICAgIH1cbiAgfVxuXG4gIHNldFRleHRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgdmFsdWUpIHtcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICBpZiAoIXNlbGVjdGVkUmFuZ2UpIHJldHVyblxuXG4gICAgY29uc3QgWyBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiBdID0gQXJyYXkuZnJvbShzZWxlY3RlZFJhbmdlKVxuICAgIGlmIChzdGFydFBvc2l0aW9uID09PSBlbmRQb3NpdGlvbikge1xuICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT09IFwiaHJlZlwiKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBUZXh0LnRleHRGb3JTdHJpbmdXaXRoQXR0cmlidXRlcyh2YWx1ZSwgeyBocmVmOiB2YWx1ZSB9KVxuICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnRUZXh0KHRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQuYWRkQXR0cmlidXRlQXRSYW5nZShhdHRyaWJ1dGVOYW1lLCB2YWx1ZSwgc2VsZWN0ZWRSYW5nZSkpXG4gICAgfVxuICB9XG5cbiAgc2V0QmxvY2tBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgdmFsdWUpIHtcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICBpZiAodGhpcy5jYW5TZXRDdXJyZW50QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQuYXBwbHlCbG9ja0F0dHJpYnV0ZUF0UmFuZ2UoYXR0cmlidXRlTmFtZSwgdmFsdWUsIHNlbGVjdGVkUmFuZ2UpKVxuICAgICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0aW9uKHNlbGVjdGVkUmFuZ2UpXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlQ3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgaWYgKGdldEJsb2NrQ29uZmlnKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICB0aGlzLnJlbW92ZUJsb2NrQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpXG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVDdXJyZW50QXR0cmlidXRlcygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlVGV4dEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKVxuICAgICAgZGVsZXRlIHRoaXMuY3VycmVudEF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV1cbiAgICAgIHJldHVybiB0aGlzLm5vdGlmeURlbGVnYXRlT2ZDdXJyZW50QXR0cmlidXRlc0NoYW5nZSgpXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlVGV4dEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRSYW5nZSA9IHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpXG4gICAgaWYgKCFzZWxlY3RlZFJhbmdlKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zZXREb2N1bWVudCh0aGlzLmRvY3VtZW50LnJlbW92ZUF0dHJpYnV0ZUF0UmFuZ2UoYXR0cmlidXRlTmFtZSwgc2VsZWN0ZWRSYW5nZSkpXG4gIH1cblxuICByZW1vdmVCbG9ja0F0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRSYW5nZSA9IHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpXG4gICAgaWYgKCFzZWxlY3RlZFJhbmdlKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zZXREb2N1bWVudCh0aGlzLmRvY3VtZW50LnJlbW92ZUF0dHJpYnV0ZUF0UmFuZ2UoYXR0cmlidXRlTmFtZSwgc2VsZWN0ZWRSYW5nZSkpXG4gIH1cblxuICBjYW5EZWNyZWFzZU5lc3RpbmdMZXZlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCbG9jaygpPy5nZXROZXN0aW5nTGV2ZWwoKSA+IDBcbiAgfVxuXG4gIGNhbkluY3JlYXNlTmVzdGluZ0xldmVsKCkge1xuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5nZXRCbG9jaygpXG4gICAgaWYgKCFibG9jaykgcmV0dXJuXG4gICAgaWYgKGdldEJsb2NrQ29uZmlnKGJsb2NrLmdldExhc3ROZXN0YWJsZUF0dHJpYnV0ZSgpKT8ubGlzdEF0dHJpYnV0ZSkge1xuICAgICAgY29uc3QgcHJldmlvdXNCbG9jayA9IHRoaXMuZ2V0UHJldmlvdXNCbG9jaygpXG4gICAgICBpZiAocHJldmlvdXNCbG9jaykge1xuICAgICAgICByZXR1cm4gYXJyYXlTdGFydHNXaXRoKHByZXZpb3VzQmxvY2suZ2V0TGlzdEl0ZW1BdHRyaWJ1dGVzKCksIGJsb2NrLmdldExpc3RJdGVtQXR0cmlidXRlcygpKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYmxvY2suZ2V0TmVzdGluZ0xldmVsKCkgPiAwXG4gICAgfVxuICB9XG5cbiAgZGVjcmVhc2VOZXN0aW5nTGV2ZWwoKSB7XG4gICAgY29uc3QgYmxvY2sgPSB0aGlzLmdldEJsb2NrKClcbiAgICBpZiAoIWJsb2NrKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zZXREb2N1bWVudCh0aGlzLmRvY3VtZW50LnJlcGxhY2VCbG9jayhibG9jaywgYmxvY2suZGVjcmVhc2VOZXN0aW5nTGV2ZWwoKSkpXG4gIH1cblxuICBpbmNyZWFzZU5lc3RpbmdMZXZlbCgpIHtcbiAgICBjb25zdCBibG9jayA9IHRoaXMuZ2V0QmxvY2soKVxuICAgIGlmICghYmxvY2spIHJldHVyblxuICAgIHJldHVybiB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQucmVwbGFjZUJsb2NrKGJsb2NrLCBibG9jay5pbmNyZWFzZU5lc3RpbmdMZXZlbCgpKSlcbiAgfVxuXG4gIGNhbkRlY3JlYXNlQmxvY2tBdHRyaWJ1dGVMZXZlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCbG9jaygpPy5nZXRBdHRyaWJ1dGVMZXZlbCgpID4gMFxuICB9XG5cbiAgZGVjcmVhc2VCbG9ja0F0dHJpYnV0ZUxldmVsKCkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHRoaXMuZ2V0QmxvY2soKT8uZ2V0TGFzdEF0dHJpYnV0ZSgpXG4gICAgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlQ3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGUpXG4gICAgfVxuICB9XG5cbiAgZGVjcmVhc2VMaXN0TGV2ZWwoKSB7XG4gICAgbGV0IFsgc3RhcnRQb3NpdGlvbiBdID0gQXJyYXkuZnJvbSh0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKSlcbiAgICBjb25zdCB7IGluZGV4IH0gPSB0aGlzLmRvY3VtZW50LmxvY2F0aW9uRnJvbVBvc2l0aW9uKHN0YXJ0UG9zaXRpb24pXG4gICAgbGV0IGVuZEluZGV4ID0gaW5kZXhcbiAgICBjb25zdCBhdHRyaWJ1dGVMZXZlbCA9IHRoaXMuZ2V0QmxvY2soKS5nZXRBdHRyaWJ1dGVMZXZlbCgpXG5cbiAgICBsZXQgYmxvY2sgPSB0aGlzLmRvY3VtZW50LmdldEJsb2NrQXRJbmRleChlbmRJbmRleCArIDEpXG4gICAgd2hpbGUgKGJsb2NrKSB7XG4gICAgICBpZiAoIWJsb2NrLmlzTGlzdEl0ZW0oKSB8fCBibG9jay5nZXRBdHRyaWJ1dGVMZXZlbCgpIDw9IGF0dHJpYnV0ZUxldmVsKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBlbmRJbmRleCsrXG4gICAgICBibG9jayA9IHRoaXMuZG9jdW1lbnQuZ2V0QmxvY2tBdEluZGV4KGVuZEluZGV4ICsgMSlcbiAgICB9XG5cbiAgICBzdGFydFBvc2l0aW9uID0gdGhpcy5kb2N1bWVudC5wb3NpdGlvbkZyb21Mb2NhdGlvbih7IGluZGV4LCBvZmZzZXQ6IDAgfSlcbiAgICBjb25zdCBlbmRQb3NpdGlvbiA9IHRoaXMuZG9jdW1lbnQucG9zaXRpb25Gcm9tTG9jYXRpb24oeyBpbmRleDogZW5kSW5kZXgsIG9mZnNldDogMCB9KVxuICAgIHJldHVybiB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQucmVtb3ZlTGFzdExpc3RBdHRyaWJ1dGVBdFJhbmdlKFsgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24gXSkpXG4gIH1cblxuICB1cGRhdGVDdXJyZW50QXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5nZXRTZWxlY3RlZFJhbmdlKHsgaWdub3JlTG9jazogdHJ1ZSB9KVxuICAgIGlmIChzZWxlY3RlZFJhbmdlKSB7XG4gICAgICBjb25zdCBjdXJyZW50QXR0cmlidXRlcyA9IHRoaXMuZG9jdW1lbnQuZ2V0Q29tbW9uQXR0cmlidXRlc0F0UmFuZ2Uoc2VsZWN0ZWRSYW5nZSlcblxuICAgICAgQXJyYXkuZnJvbShnZXRBbGxBdHRyaWJ1dGVOYW1lcygpKS5mb3JFYWNoKChhdHRyaWJ1dGVOYW1lKSA9PiB7XG4gICAgICAgIGlmICghY3VycmVudEF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0pIHtcbiAgICAgICAgICBpZiAoIXRoaXMuY2FuU2V0Q3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0gPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgaWYgKCFvYmplY3RzQXJlRXF1YWwoY3VycmVudEF0dHJpYnV0ZXMsIHRoaXMuY3VycmVudEF0dHJpYnV0ZXMpKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEF0dHJpYnV0ZXMgPSBjdXJyZW50QXR0cmlidXRlc1xuICAgICAgICByZXR1cm4gdGhpcy5ub3RpZnlEZWxlZ2F0ZU9mQ3VycmVudEF0dHJpYnV0ZXNDaGFuZ2UoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldEN1cnJlbnRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiBleHRlbmQuY2FsbCh7fSwgdGhpcy5jdXJyZW50QXR0cmlidXRlcylcbiAgfVxuXG4gIGdldEN1cnJlbnRUZXh0QXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmN1cnJlbnRBdHRyaWJ1dGVzKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuY3VycmVudEF0dHJpYnV0ZXNba2V5XVxuICAgICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgICBpZiAoZ2V0VGV4dENvbmZpZyhrZXkpKSB7XG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gdmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXR0cmlidXRlc1xuICB9XG5cbiAgLy8gU2VsZWN0aW9uIGZyZWV6aW5nXG5cbiAgZnJlZXplU2VsZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNldEN1cnJlbnRBdHRyaWJ1dGUoXCJmcm96ZW5cIiwgdHJ1ZSlcbiAgfVxuXG4gIHRoYXdTZWxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlQ3VycmVudEF0dHJpYnV0ZShcImZyb3plblwiKVxuICB9XG5cbiAgaGFzRnJvemVuU2VsZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmhhc0N1cnJlbnRBdHRyaWJ1dGUoXCJmcm96ZW5cIilcbiAgfVxuXG4gIHNldFNlbGVjdGlvbihzZWxlY3RlZFJhbmdlKSB7XG4gICAgY29uc3QgbG9jYXRpb25SYW5nZSA9IHRoaXMuZG9jdW1lbnQubG9jYXRpb25SYW5nZUZyb21SYW5nZShzZWxlY3RlZFJhbmdlKVxuICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkRpZFJlcXVlc3RDaGFuZ2luZ1NlbGVjdGlvblRvTG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKVxuICB9XG5cbiAgZ2V0U2VsZWN0ZWRSYW5nZSgpIHtcbiAgICBjb25zdCBsb2NhdGlvblJhbmdlID0gdGhpcy5nZXRMb2NhdGlvblJhbmdlKClcbiAgICBpZiAobG9jYXRpb25SYW5nZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQucmFuZ2VGcm9tTG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKVxuICAgIH1cbiAgfVxuXG4gIHNldFNlbGVjdGVkUmFuZ2Uoc2VsZWN0ZWRSYW5nZSkge1xuICAgIGNvbnN0IGxvY2F0aW9uUmFuZ2UgPSB0aGlzLmRvY3VtZW50LmxvY2F0aW9uUmFuZ2VGcm9tUmFuZ2Uoc2VsZWN0ZWRSYW5nZSlcbiAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3Rpb25NYW5hZ2VyKCkuc2V0TG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKVxuICB9XG5cbiAgZ2V0UG9zaXRpb24oKSB7XG4gICAgY29uc3QgbG9jYXRpb25SYW5nZSA9IHRoaXMuZ2V0TG9jYXRpb25SYW5nZSgpXG4gICAgaWYgKGxvY2F0aW9uUmFuZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50LnBvc2l0aW9uRnJvbUxvY2F0aW9uKGxvY2F0aW9uUmFuZ2VbMF0pXG4gICAgfVxuICB9XG5cbiAgZ2V0TG9jYXRpb25SYW5nZShvcHRpb25zKSB7XG4gICAgaWYgKHRoaXMudGFyZ2V0TG9jYXRpb25SYW5nZSkge1xuICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0TG9jYXRpb25SYW5nZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3Rpb25NYW5hZ2VyKCkuZ2V0TG9jYXRpb25SYW5nZShvcHRpb25zKSB8fCBub3JtYWxpemVSYW5nZSh7IGluZGV4OiAwLCBvZmZzZXQ6IDAgfSlcbiAgICB9XG4gIH1cblxuICB3aXRoVGFyZ2V0TG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlLCBmbikge1xuICAgIGxldCByZXN1bHRcbiAgICB0aGlzLnRhcmdldExvY2F0aW9uUmFuZ2UgPSBsb2NhdGlvblJhbmdlXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZuKClcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy50YXJnZXRMb2NhdGlvblJhbmdlID0gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICB3aXRoVGFyZ2V0UmFuZ2UocmFuZ2UsIGZuKSB7XG4gICAgY29uc3QgbG9jYXRpb25SYW5nZSA9IHRoaXMuZG9jdW1lbnQubG9jYXRpb25SYW5nZUZyb21SYW5nZShyYW5nZSlcbiAgICByZXR1cm4gdGhpcy53aXRoVGFyZ2V0TG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlLCBmbilcbiAgfVxuXG4gIHdpdGhUYXJnZXRET01SYW5nZShkb21SYW5nZSwgZm4pIHtcbiAgICBjb25zdCBsb2NhdGlvblJhbmdlID0gdGhpcy5jcmVhdGVMb2NhdGlvblJhbmdlRnJvbURPTVJhbmdlKGRvbVJhbmdlLCB7IHN0cmljdDogZmFsc2UgfSlcbiAgICByZXR1cm4gdGhpcy53aXRoVGFyZ2V0TG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlLCBmbilcbiAgfVxuXG4gIGdldEV4cGFuZGVkUmFuZ2VJbkRpcmVjdGlvbihkaXJlY3Rpb24sIHsgbGVuZ3RoIH0gPSB7fSkge1xuICAgIGxldCBbIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uIF0gPSBBcnJheS5mcm9tKHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpKVxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwiYmFja3dhcmRcIikge1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICBzdGFydFBvc2l0aW9uIC09IGxlbmd0aFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnRQb3NpdGlvbiA9IHRoaXMudHJhbnNsYXRlVVRGMTZQb3NpdGlvbkZyb21PZmZzZXQoc3RhcnRQb3NpdGlvbiwgLTEpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgZW5kUG9zaXRpb24gKz0gbGVuZ3RoXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmRQb3NpdGlvbiA9IHRoaXMudHJhbnNsYXRlVVRGMTZQb3NpdGlvbkZyb21PZmZzZXQoZW5kUG9zaXRpb24sIDEpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVSYW5nZShbIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uIF0pXG4gIH1cblxuICBzaG91bGRNYW5hZ2VNb3ZpbmdDdXJzb3JJbkRpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICBpZiAodGhpcy5lZGl0aW5nQXR0YWNobWVudCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldEV4cGFuZGVkUmFuZ2VJbkRpcmVjdGlvbihkaXJlY3Rpb24pXG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0YWNobWVudEF0UmFuZ2UocmFuZ2UpICE9IG51bGxcbiAgfVxuXG4gIG1vdmVDdXJzb3JJbkRpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICBsZXQgY2FuRWRpdEF0dGFjaG1lbnQsIHJhbmdlXG4gICAgaWYgKHRoaXMuZWRpdGluZ0F0dGFjaG1lbnQpIHtcbiAgICAgIHJhbmdlID0gdGhpcy5kb2N1bWVudC5nZXRSYW5nZU9mQXR0YWNobWVudCh0aGlzLmVkaXRpbmdBdHRhY2htZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICAgIHJhbmdlID0gdGhpcy5nZXRFeHBhbmRlZFJhbmdlSW5EaXJlY3Rpb24oZGlyZWN0aW9uKVxuICAgICAgY2FuRWRpdEF0dGFjaG1lbnQgPSAhcmFuZ2VzQXJlRXF1YWwoc2VsZWN0ZWRSYW5nZSwgcmFuZ2UpXG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJiYWNrd2FyZFwiKSB7XG4gICAgICB0aGlzLnNldFNlbGVjdGVkUmFuZ2UocmFuZ2VbMF0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U2VsZWN0ZWRSYW5nZShyYW5nZVsxXSlcbiAgICB9XG5cbiAgICBpZiAoY2FuRWRpdEF0dGFjaG1lbnQpIHtcbiAgICAgIGNvbnN0IGF0dGFjaG1lbnQgPSB0aGlzLmdldEF0dGFjaG1lbnRBdFJhbmdlKHJhbmdlKVxuICAgICAgaWYgKGF0dGFjaG1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdEF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBleHBhbmRTZWxlY3Rpb25JbkRpcmVjdGlvbihkaXJlY3Rpb24sIHsgbGVuZ3RoIH0gPSB7fSkge1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRFeHBhbmRlZFJhbmdlSW5EaXJlY3Rpb24oZGlyZWN0aW9uLCB7IGxlbmd0aCB9KVxuICAgIHJldHVybiB0aGlzLnNldFNlbGVjdGVkUmFuZ2UocmFuZ2UpXG4gIH1cblxuICBleHBhbmRTZWxlY3Rpb25Gb3JFZGl0aW5nKCkge1xuICAgIGlmICh0aGlzLmhhc0N1cnJlbnRBdHRyaWJ1dGUoXCJocmVmXCIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5leHBhbmRTZWxlY3Rpb25Bcm91bmRDb21tb25BdHRyaWJ1dGUoXCJocmVmXCIpXG4gICAgfVxuICB9XG5cbiAgZXhwYW5kU2VsZWN0aW9uQXJvdW5kQ29tbW9uQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb24oKVxuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5kb2N1bWVudC5nZXRSYW5nZU9mQ29tbW9uQXR0cmlidXRlQXRQb3NpdGlvbihhdHRyaWJ1dGVOYW1lLCBwb3NpdGlvbilcbiAgICByZXR1cm4gdGhpcy5zZXRTZWxlY3RlZFJhbmdlKHJhbmdlKVxuICB9XG5cbiAgc2VsZWN0aW9uQ29udGFpbnNBdHRhY2htZW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3RlZEF0dGFjaG1lbnRzKCk/Lmxlbmd0aCA+IDBcbiAgfVxuXG4gIHNlbGVjdGlvbklzSW5DdXJzb3JUYXJnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdGluZ0F0dGFjaG1lbnQgfHwgdGhpcy5wb3NpdGlvbklzQ3Vyc29yVGFyZ2V0KHRoaXMuZ2V0UG9zaXRpb24oKSlcbiAgfVxuXG4gIHBvc2l0aW9uSXNDdXJzb3JUYXJnZXQocG9zaXRpb24pIHtcbiAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuZG9jdW1lbnQubG9jYXRpb25Gcm9tUG9zaXRpb24ocG9zaXRpb24pXG4gICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5sb2NhdGlvbklzQ3Vyc29yVGFyZ2V0KGxvY2F0aW9uKVxuICAgIH1cbiAgfVxuXG4gIHBvc2l0aW9uSXNCbG9ja0JyZWFrKHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQuZ2V0UGllY2VBdFBvc2l0aW9uKHBvc2l0aW9uKT8uaXNCbG9ja0JyZWFrKClcbiAgfVxuXG4gIGdldFNlbGVjdGVkRG9jdW1lbnQoKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRSYW5nZSA9IHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpXG4gICAgaWYgKHNlbGVjdGVkUmFuZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmdldERvY3VtZW50QXRSYW5nZShzZWxlY3RlZFJhbmdlKVxuICAgIH1cbiAgfVxuXG4gIGdldFNlbGVjdGVkQXR0YWNobWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2VsZWN0ZWREb2N1bWVudCgpPy5nZXRBdHRhY2htZW50cygpXG4gIH1cblxuICAvLyBBdHRhY2htZW50c1xuXG4gIGdldEF0dGFjaG1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLmF0dGFjaG1lbnRzLnNsaWNlKDApXG4gIH1cblxuICByZWZyZXNoQXR0YWNobWVudHMoKSB7XG4gICAgY29uc3QgYXR0YWNobWVudHMgPSB0aGlzLmRvY3VtZW50LmdldEF0dGFjaG1lbnRzKClcbiAgICBjb25zdCB7IGFkZGVkLCByZW1vdmVkIH0gPSBzdW1tYXJpemVBcnJheUNoYW5nZSh0aGlzLmF0dGFjaG1lbnRzLCBhdHRhY2htZW50cylcbiAgICB0aGlzLmF0dGFjaG1lbnRzID0gYXR0YWNobWVudHNcblxuICAgIEFycmF5LmZyb20ocmVtb3ZlZCkuZm9yRWFjaCgoYXR0YWNobWVudCkgPT4ge1xuICAgICAgYXR0YWNobWVudC5kZWxlZ2F0ZSA9IG51bGxcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uRGlkUmVtb3ZlQXR0YWNobWVudD8uKGF0dGFjaG1lbnQpXG4gICAgfSlcblxuICAgIHJldHVybiAoKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gW11cblxuICAgICAgQXJyYXkuZnJvbShhZGRlZCkuZm9yRWFjaCgoYXR0YWNobWVudCkgPT4ge1xuICAgICAgICBhdHRhY2htZW50LmRlbGVnYXRlID0gdGhpc1xuICAgICAgICByZXN1bHQucHVzaCh0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkRpZEFkZEF0dGFjaG1lbnQ/LihhdHRhY2htZW50KSlcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9KSgpXG4gIH1cblxuICAvLyBBdHRhY2htZW50IGRlbGVnYXRlXG5cbiAgYXR0YWNobWVudERpZENoYW5nZUF0dHJpYnV0ZXMoYXR0YWNobWVudCkge1xuICAgIHRoaXMucmV2aXNpb24rK1xuICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkRpZEVkaXRBdHRhY2htZW50Py4oYXR0YWNobWVudClcbiAgfVxuXG4gIGF0dGFjaG1lbnREaWRDaGFuZ2VQcmV2aWV3VVJMKGF0dGFjaG1lbnQpIHtcbiAgICB0aGlzLnJldmlzaW9uKytcbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25EaWRDaGFuZ2VBdHRhY2htZW50UHJldmlld1VSTD8uKGF0dGFjaG1lbnQpXG4gIH1cblxuICAvLyBBdHRhY2htZW50IGVkaXRpbmdcblxuICBlZGl0QXR0YWNobWVudChhdHRhY2htZW50LCBvcHRpb25zKSB7XG4gICAgaWYgKGF0dGFjaG1lbnQgPT09IHRoaXMuZWRpdGluZ0F0dGFjaG1lbnQpIHJldHVyblxuICAgIHRoaXMuc3RvcEVkaXRpbmdBdHRhY2htZW50KClcbiAgICB0aGlzLmVkaXRpbmdBdHRhY2htZW50ID0gYXR0YWNobWVudFxuICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkRpZFN0YXJ0RWRpdGluZ0F0dGFjaG1lbnQ/Lih0aGlzLmVkaXRpbmdBdHRhY2htZW50LCBvcHRpb25zKVxuICB9XG5cbiAgc3RvcEVkaXRpbmdBdHRhY2htZW50KCkge1xuICAgIGlmICghdGhpcy5lZGl0aW5nQXR0YWNobWVudCkgcmV0dXJuXG4gICAgdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25EaWRTdG9wRWRpdGluZ0F0dGFjaG1lbnQ/Lih0aGlzLmVkaXRpbmdBdHRhY2htZW50KVxuICAgIHRoaXMuZWRpdGluZ0F0dGFjaG1lbnQgPSBudWxsXG4gIH1cblxuICB1cGRhdGVBdHRyaWJ1dGVzRm9yQXR0YWNobWVudChhdHRyaWJ1dGVzLCBhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0RG9jdW1lbnQodGhpcy5kb2N1bWVudC51cGRhdGVBdHRyaWJ1dGVzRm9yQXR0YWNobWVudChhdHRyaWJ1dGVzLCBhdHRhY2htZW50KSlcbiAgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZUZvckF0dGFjaG1lbnQoYXR0cmlidXRlLCBhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0RG9jdW1lbnQodGhpcy5kb2N1bWVudC5yZW1vdmVBdHRyaWJ1dGVGb3JBdHRhY2htZW50KGF0dHJpYnV0ZSwgYXR0YWNobWVudCkpXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgYnJlYWtGb3JtYXR0ZWRCbG9jayhpbnNlcnRpb24pIHtcbiAgICBsZXQgeyBkb2N1bWVudCB9ID0gaW5zZXJ0aW9uXG4gICAgY29uc3QgeyBibG9jayB9ID0gaW5zZXJ0aW9uXG4gICAgbGV0IHBvc2l0aW9uID0gaW5zZXJ0aW9uLnN0YXJ0UG9zaXRpb25cbiAgICBsZXQgcmFuZ2UgPSBbIHBvc2l0aW9uIC0gMSwgcG9zaXRpb24gXVxuXG4gICAgaWYgKGJsb2NrLmdldEJsb2NrQnJlYWtQb3NpdGlvbigpID09PSBpbnNlcnRpb24uc3RhcnRMb2NhdGlvbi5vZmZzZXQpIHtcbiAgICAgIGlmIChibG9jay5icmVha3NPblJldHVybigpICYmIGluc2VydGlvbi5uZXh0Q2hhcmFjdGVyID09PSBcIlxcblwiKSB7XG4gICAgICAgIHBvc2l0aW9uICs9IDFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50ID0gZG9jdW1lbnQucmVtb3ZlVGV4dEF0UmFuZ2UocmFuZ2UpXG4gICAgICB9XG4gICAgICByYW5nZSA9IFsgcG9zaXRpb24sIHBvc2l0aW9uIF1cbiAgICB9IGVsc2UgaWYgKGluc2VydGlvbi5uZXh0Q2hhcmFjdGVyID09PSBcIlxcblwiKSB7XG4gICAgICBpZiAoaW5zZXJ0aW9uLnByZXZpb3VzQ2hhcmFjdGVyID09PSBcIlxcblwiKSB7XG4gICAgICAgIHJhbmdlID0gWyBwb3NpdGlvbiAtIDEsIHBvc2l0aW9uICsgMSBdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByYW5nZSA9IFsgcG9zaXRpb24sIHBvc2l0aW9uICsgMSBdXG4gICAgICAgIHBvc2l0aW9uICs9IDFcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGluc2VydGlvbi5zdGFydExvY2F0aW9uLm9mZnNldCAtIDEgIT09IDApIHtcbiAgICAgIHBvc2l0aW9uICs9IDFcbiAgICB9XG5cbiAgICBjb25zdCBuZXdEb2N1bWVudCA9IG5ldyBEb2N1bWVudChbIGJsb2NrLnJlbW92ZUxhc3RBdHRyaWJ1dGUoKS5jb3B5V2l0aG91dFRleHQoKSBdKVxuICAgIHRoaXMuc2V0RG9jdW1lbnQoZG9jdW1lbnQuaW5zZXJ0RG9jdW1lbnRBdFJhbmdlKG5ld0RvY3VtZW50LCByYW5nZSkpXG4gICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0aW9uKHBvc2l0aW9uKVxuICB9XG5cbiAgZ2V0UHJldmlvdXNCbG9jaygpIHtcbiAgICBjb25zdCBsb2NhdGlvblJhbmdlID0gdGhpcy5nZXRMb2NhdGlvblJhbmdlKClcbiAgICBpZiAobG9jYXRpb25SYW5nZSkge1xuICAgICAgY29uc3QgeyBpbmRleCB9ID0gbG9jYXRpb25SYW5nZVswXVxuICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5nZXRCbG9ja0F0SW5kZXgoaW5kZXggLSAxKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldEJsb2NrKCkge1xuICAgIGNvbnN0IGxvY2F0aW9uUmFuZ2UgPSB0aGlzLmdldExvY2F0aW9uUmFuZ2UoKVxuICAgIGlmIChsb2NhdGlvblJhbmdlKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5nZXRCbG9ja0F0SW5kZXgobG9jYXRpb25SYW5nZVswXS5pbmRleClcbiAgICB9XG4gIH1cblxuICBnZXRBdHRhY2htZW50QXRSYW5nZShyYW5nZSkge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gdGhpcy5kb2N1bWVudC5nZXREb2N1bWVudEF0UmFuZ2UocmFuZ2UpXG4gICAgaWYgKGRvY3VtZW50LnRvU3RyaW5nKCkgPT09IGAke09CSkVDVF9SRVBMQUNFTUVOVF9DSEFSQUNURVJ9XFxuYCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEF0dGFjaG1lbnRzKClbMF1cbiAgICB9XG4gIH1cblxuICBub3RpZnlEZWxlZ2F0ZU9mQ3VycmVudEF0dHJpYnV0ZXNDaGFuZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uRGlkQ2hhbmdlQ3VycmVudEF0dHJpYnV0ZXM/Lih0aGlzLmN1cnJlbnRBdHRyaWJ1dGVzKVxuICB9XG5cbiAgbm90aWZ5RGVsZWdhdGVPZkluc2VydGlvbkF0UmFuZ2UocmFuZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25EaWRQZXJmb3JtSW5zZXJ0aW9uQXRSYW5nZT8uKHJhbmdlKVxuICB9XG5cbiAgdHJhbnNsYXRlVVRGMTZQb3NpdGlvbkZyb21PZmZzZXQocG9zaXRpb24sIG9mZnNldCkge1xuICAgIGNvbnN0IHV0ZjE2c3RyaW5nID0gdGhpcy5kb2N1bWVudC50b1VURjE2U3RyaW5nKClcbiAgICBjb25zdCB1dGYxNnBvc2l0aW9uID0gdXRmMTZzdHJpbmcub2Zmc2V0RnJvbVVDUzJPZmZzZXQocG9zaXRpb24pXG4gICAgcmV0dXJuIHV0ZjE2c3RyaW5nLm9mZnNldFRvVUNTMk9mZnNldCh1dGYxNnBvc2l0aW9uICsgb2Zmc2V0KVxuICB9XG59XG5cbkNvbXBvc2l0aW9uLnByb3h5TWV0aG9kKFwiZ2V0U2VsZWN0aW9uTWFuYWdlcigpLmdldFBvaW50UmFuZ2VcIilcbkNvbXBvc2l0aW9uLnByb3h5TWV0aG9kKFwiZ2V0U2VsZWN0aW9uTWFuYWdlcigpLnNldExvY2F0aW9uUmFuZ2VGcm9tUG9pbnRSYW5nZVwiKVxuQ29tcG9zaXRpb24ucHJveHlNZXRob2QoXCJnZXRTZWxlY3Rpb25NYW5hZ2VyKCkuY3JlYXRlTG9jYXRpb25SYW5nZUZyb21ET01SYW5nZVwiKVxuQ29tcG9zaXRpb24ucHJveHlNZXRob2QoXCJnZXRTZWxlY3Rpb25NYW5hZ2VyKCkubG9jYXRpb25Jc0N1cnNvclRhcmdldFwiKVxuQ29tcG9zaXRpb24ucHJveHlNZXRob2QoXCJnZXRTZWxlY3Rpb25NYW5hZ2VyKCkuc2VsZWN0aW9uSXNFeHBhbmRlZFwiKVxuQ29tcG9zaXRpb24ucHJveHlNZXRob2QoXCJkZWxlZ2F0ZT8uZ2V0U2VsZWN0aW9uTWFuYWdlclwiKVxuIiwgImltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuZG9NYW5hZ2VyIGV4dGVuZHMgQmFzaWNPYmplY3Qge1xuICBjb25zdHJ1Y3Rvcihjb21wb3NpdGlvbikge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLmNvbXBvc2l0aW9uID0gY29tcG9zaXRpb25cbiAgICB0aGlzLnVuZG9FbnRyaWVzID0gW11cbiAgICB0aGlzLnJlZG9FbnRyaWVzID0gW11cbiAgfVxuXG4gIHJlY29yZFVuZG9FbnRyeShkZXNjcmlwdGlvbiwgeyBjb250ZXh0LCBjb25zb2xpZGF0YWJsZSB9ID0ge30pIHtcbiAgICBjb25zdCBwcmV2aW91c0VudHJ5ID0gdGhpcy51bmRvRW50cmllcy5zbGljZSgtMSlbMF1cblxuICAgIGlmICghY29uc29saWRhdGFibGUgfHwgIWVudHJ5SGFzRGVzY3JpcHRpb25BbmRDb250ZXh0KHByZXZpb3VzRW50cnksIGRlc2NyaXB0aW9uLCBjb250ZXh0KSkge1xuICAgICAgY29uc3QgdW5kb0VudHJ5ID0gdGhpcy5jcmVhdGVFbnRyeSh7IGRlc2NyaXB0aW9uLCBjb250ZXh0IH0pXG4gICAgICB0aGlzLnVuZG9FbnRyaWVzLnB1c2godW5kb0VudHJ5KVxuICAgICAgdGhpcy5yZWRvRW50cmllcyA9IFtdXG4gICAgfVxuICB9XG5cbiAgdW5kbygpIHtcbiAgICBjb25zdCB1bmRvRW50cnkgPSB0aGlzLnVuZG9FbnRyaWVzLnBvcCgpXG4gICAgaWYgKHVuZG9FbnRyeSkge1xuICAgICAgY29uc3QgcmVkb0VudHJ5ID0gdGhpcy5jcmVhdGVFbnRyeSh1bmRvRW50cnkpXG4gICAgICB0aGlzLnJlZG9FbnRyaWVzLnB1c2gocmVkb0VudHJ5KVxuICAgICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24ubG9hZFNuYXBzaG90KHVuZG9FbnRyeS5zbmFwc2hvdClcbiAgICB9XG4gIH1cblxuICByZWRvKCkge1xuICAgIGNvbnN0IHJlZG9FbnRyeSA9IHRoaXMucmVkb0VudHJpZXMucG9wKClcbiAgICBpZiAocmVkb0VudHJ5KSB7XG4gICAgICBjb25zdCB1bmRvRW50cnkgPSB0aGlzLmNyZWF0ZUVudHJ5KHJlZG9FbnRyeSlcbiAgICAgIHRoaXMudW5kb0VudHJpZXMucHVzaCh1bmRvRW50cnkpXG4gICAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5sb2FkU25hcHNob3QocmVkb0VudHJ5LnNuYXBzaG90KVxuICAgIH1cbiAgfVxuXG4gIGNhblVuZG8oKSB7XG4gICAgcmV0dXJuIHRoaXMudW5kb0VudHJpZXMubGVuZ3RoID4gMFxuICB9XG5cbiAgY2FuUmVkbygpIHtcbiAgICByZXR1cm4gdGhpcy5yZWRvRW50cmllcy5sZW5ndGggPiAwXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgY3JlYXRlRW50cnkoeyBkZXNjcmlwdGlvbiwgY29udGV4dCB9ID0ge30pIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uPy50b1N0cmluZygpLFxuICAgICAgY29udGV4dDogSlNPTi5zdHJpbmdpZnkoY29udGV4dCksXG4gICAgICBzbmFwc2hvdDogdGhpcy5jb21wb3NpdGlvbi5nZXRTbmFwc2hvdCgpLFxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBlbnRyeUhhc0Rlc2NyaXB0aW9uQW5kQ29udGV4dCA9IChlbnRyeSwgZGVzY3JpcHRpb24sIGNvbnRleHQpID0+XG4gIGVudHJ5Py5kZXNjcmlwdGlvbiA9PT0gZGVzY3JpcHRpb24/LnRvU3RyaW5nKCkgJiYgZW50cnk/LmNvbnRleHQgPT09IEpTT04uc3RyaW5naWZ5KGNvbnRleHQpXG4iLCAiY29uc3QgQkxPQ0tfQVRUUklCVVRFX05BTUUgPSBcImF0dGFjaG1lbnRHYWxsZXJ5XCJcbmNvbnN0IFRFWFRfQVRUUklCVVRFX05BTUUgPSBcInByZXNlbnRhdGlvblwiXG5jb25zdCBURVhUX0FUVFJJQlVURV9WQUxVRSA9IFwiZ2FsbGVyeVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbHRlciB7XG4gIGNvbnN0cnVjdG9yKHNuYXBzaG90KSB7XG4gICAgdGhpcy5kb2N1bWVudCA9IHNuYXBzaG90LmRvY3VtZW50XG4gICAgdGhpcy5zZWxlY3RlZFJhbmdlID0gc25hcHNob3Quc2VsZWN0ZWRSYW5nZVxuICB9XG5cbiAgcGVyZm9ybSgpIHtcbiAgICB0aGlzLnJlbW92ZUJsb2NrQXR0cmlidXRlKClcbiAgICByZXR1cm4gdGhpcy5hcHBseUJsb2NrQXR0cmlidXRlKClcbiAgfVxuXG4gIGdldFNuYXBzaG90KCkge1xuICAgIHJldHVybiB7IGRvY3VtZW50OiB0aGlzLmRvY3VtZW50LCBzZWxlY3RlZFJhbmdlOiB0aGlzLnNlbGVjdGVkUmFuZ2UgfVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIHJlbW92ZUJsb2NrQXR0cmlidXRlKCkge1xuICAgIHJldHVybiB0aGlzLmZpbmRSYW5nZXNPZkJsb2NrcygpLm1hcCgocmFuZ2UpID0+IHRoaXMuZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50LnJlbW92ZUF0dHJpYnV0ZUF0UmFuZ2UoQkxPQ0tfQVRUUklCVVRFX05BTUUsIHJhbmdlKSlcbiAgfVxuXG4gIGFwcGx5QmxvY2tBdHRyaWJ1dGUoKSB7XG4gICAgbGV0IG9mZnNldCA9IDBcblxuICAgIHRoaXMuZmluZFJhbmdlc09mUGllY2VzKCkuZm9yRWFjaCgocmFuZ2UpID0+IHtcbiAgICAgIGlmIChyYW5nZVsxXSAtIHJhbmdlWzBdID4gMSkge1xuICAgICAgICByYW5nZVswXSArPSBvZmZzZXRcbiAgICAgICAgcmFuZ2VbMV0gKz0gb2Zmc2V0XG5cbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnQuZ2V0Q2hhcmFjdGVyQXRQb3NpdGlvbihyYW5nZVsxXSkgIT09IFwiXFxuXCIpIHtcbiAgICAgICAgICB0aGlzLmRvY3VtZW50ID0gdGhpcy5kb2N1bWVudC5pbnNlcnRCbG9ja0JyZWFrQXRSYW5nZShyYW5nZVsxXSlcbiAgICAgICAgICBpZiAocmFuZ2VbMV0gPCB0aGlzLnNlbGVjdGVkUmFuZ2VbMV0pIHtcbiAgICAgICAgICAgIHRoaXMubW92ZVNlbGVjdGVkUmFuZ2VGb3J3YXJkKClcbiAgICAgICAgICB9XG4gICAgICAgICAgcmFuZ2VbMV0rK1xuICAgICAgICAgIG9mZnNldCsrXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmFuZ2VbMF0gIT09IDApIHtcbiAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudC5nZXRDaGFyYWN0ZXJBdFBvc2l0aW9uKHJhbmdlWzBdIC0gMSkgIT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50Lmluc2VydEJsb2NrQnJlYWtBdFJhbmdlKHJhbmdlWzBdKVxuICAgICAgICAgICAgaWYgKHJhbmdlWzBdIDwgdGhpcy5zZWxlY3RlZFJhbmdlWzBdKSB7XG4gICAgICAgICAgICAgIHRoaXMubW92ZVNlbGVjdGVkUmFuZ2VGb3J3YXJkKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJhbmdlWzBdKytcbiAgICAgICAgICAgIG9mZnNldCsrXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kb2N1bWVudCA9IHRoaXMuZG9jdW1lbnQuYXBwbHlCbG9ja0F0dHJpYnV0ZUF0UmFuZ2UoQkxPQ0tfQVRUUklCVVRFX05BTUUsIHRydWUsIHJhbmdlKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmaW5kUmFuZ2VzT2ZCbG9ja3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQuZmluZFJhbmdlc0ZvckJsb2NrQXR0cmlidXRlKEJMT0NLX0FUVFJJQlVURV9OQU1FKVxuICB9XG5cbiAgZmluZFJhbmdlc09mUGllY2VzKCkge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmZpbmRSYW5nZXNGb3JUZXh0QXR0cmlidXRlKFRFWFRfQVRUUklCVVRFX05BTUUsIHsgd2l0aFZhbHVlOiBURVhUX0FUVFJJQlVURV9WQUxVRSB9KVxuICB9XG5cbiAgbW92ZVNlbGVjdGVkUmFuZ2VGb3J3YXJkKCkge1xuICAgIHRoaXMuc2VsZWN0ZWRSYW5nZVswXSArPSAxXG4gICAgdGhpcy5zZWxlY3RlZFJhbmdlWzFdICs9IDFcbiAgfVxufVxuIiwgImltcG9ydCBGaWx0ZXIgZnJvbSBcIi4vZmlsdGVyXCJcblxuZXhwb3J0IGNvbnN0IGF0dGFjaG1lbnRHYWxsZXJ5RmlsdGVyID0gZnVuY3Rpb24oc25hcHNob3QpIHtcbiAgY29uc3QgZmlsdGVyID0gbmV3IEZpbHRlcihzbmFwc2hvdClcbiAgZmlsdGVyLnBlcmZvcm0oKVxuICByZXR1cm4gZmlsdGVyLmdldFNuYXBzaG90KClcbn1cblxuIiwgImltcG9ydCBEb2N1bWVudCBmcm9tIFwidHJpeC9tb2RlbHMvZG9jdW1lbnRcIlxuaW1wb3J0IEhUTUxQYXJzZXIgZnJvbSBcInRyaXgvbW9kZWxzL2h0bWxfcGFyc2VyXCJcblxuaW1wb3J0IFVuZG9NYW5hZ2VyIGZyb20gXCJ0cml4L21vZGVscy91bmRvX21hbmFnZXJcIlxuaW1wb3J0IHsgYXR0YWNobWVudEdhbGxlcnlGaWx0ZXIgfSBmcm9tIFwidHJpeC9maWx0ZXJzL2F0dGFjaG1lbnRfZ2FsbGVyeV9maWx0ZXJcIlxuY29uc3QgREVGQVVMVF9GSUxURVJTID0gWyBhdHRhY2htZW50R2FsbGVyeUZpbHRlciBdXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRvciB7XG4gIGNvbnN0cnVjdG9yKGNvbXBvc2l0aW9uLCBzZWxlY3Rpb25NYW5hZ2VyLCBlbGVtZW50KSB7XG4gICAgdGhpcy5pbnNlcnRGaWxlcyA9IHRoaXMuaW5zZXJ0RmlsZXMuYmluZCh0aGlzKVxuICAgIHRoaXMuY29tcG9zaXRpb24gPSBjb21wb3NpdGlvblxuICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlciA9IHNlbGVjdGlvbk1hbmFnZXJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy51bmRvTWFuYWdlciA9IG5ldyBVbmRvTWFuYWdlcih0aGlzLmNvbXBvc2l0aW9uKVxuICAgIHRoaXMuZmlsdGVycyA9IERFRkFVTFRfRklMVEVSUy5zbGljZSgwKVxuICB9XG5cbiAgbG9hZERvY3VtZW50KGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMubG9hZFNuYXBzaG90KHsgZG9jdW1lbnQsIHNlbGVjdGVkUmFuZ2U6IFsgMCwgMCBdIH0pXG4gIH1cblxuICBsb2FkSFRNTChodG1sID0gXCJcIikge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gSFRNTFBhcnNlci5wYXJzZShodG1sLCB7IHJlZmVyZW5jZUVsZW1lbnQ6IHRoaXMuZWxlbWVudCB9KS5nZXREb2N1bWVudCgpXG4gICAgcmV0dXJuIHRoaXMubG9hZERvY3VtZW50KGRvY3VtZW50KVxuICB9XG5cbiAgbG9hZEpTT04oeyBkb2N1bWVudCwgc2VsZWN0ZWRSYW5nZSB9KSB7XG4gICAgZG9jdW1lbnQgPSBEb2N1bWVudC5mcm9tSlNPTihkb2N1bWVudClcbiAgICByZXR1cm4gdGhpcy5sb2FkU25hcHNob3QoeyBkb2N1bWVudCwgc2VsZWN0ZWRSYW5nZSB9KVxuICB9XG5cbiAgbG9hZFNuYXBzaG90KHNuYXBzaG90KSB7XG4gICAgdGhpcy51bmRvTWFuYWdlciA9IG5ldyBVbmRvTWFuYWdlcih0aGlzLmNvbXBvc2l0aW9uKVxuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmxvYWRTbmFwc2hvdChzbmFwc2hvdClcbiAgfVxuXG4gIGdldERvY3VtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmRvY3VtZW50XG4gIH1cblxuICBnZXRTZWxlY3RlZERvY3VtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmdldFNlbGVjdGVkRG9jdW1lbnQoKVxuICB9XG5cbiAgZ2V0U25hcHNob3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24uZ2V0U25hcHNob3QoKVxuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLmdldFNuYXBzaG90KClcbiAgfVxuXG4gIC8vIERvY3VtZW50IG1hbmlwdWxhdGlvblxuXG4gIGRlbGV0ZUluRGlyZWN0aW9uKGRpcmVjdGlvbikge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmRlbGV0ZUluRGlyZWN0aW9uKGRpcmVjdGlvbilcbiAgfVxuXG4gIGluc2VydEF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmluc2VydEF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgfVxuXG4gIGluc2VydEF0dGFjaG1lbnRzKGF0dGFjaG1lbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24uaW5zZXJ0QXR0YWNobWVudHMoYXR0YWNobWVudHMpXG4gIH1cblxuICBpbnNlcnREb2N1bWVudChkb2N1bWVudCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmluc2VydERvY3VtZW50KGRvY3VtZW50KVxuICB9XG5cbiAgaW5zZXJ0RmlsZShmaWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24uaW5zZXJ0RmlsZShmaWxlKVxuICB9XG5cbiAgaW5zZXJ0RmlsZXMoZmlsZXMpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5pbnNlcnRGaWxlcyhmaWxlcylcbiAgfVxuXG4gIGluc2VydEhUTUwoaHRtbCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmluc2VydEhUTUwoaHRtbClcbiAgfVxuXG4gIGluc2VydFN0cmluZyhzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5pbnNlcnRTdHJpbmcoc3RyaW5nKVxuICB9XG5cbiAgaW5zZXJ0VGV4dCh0ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24uaW5zZXJ0VGV4dCh0ZXh0KVxuICB9XG5cbiAgaW5zZXJ0TGluZUJyZWFrKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmluc2VydExpbmVCcmVhaygpXG4gIH1cblxuICAvLyBTZWxlY3Rpb25cblxuICBnZXRTZWxlY3RlZFJhbmdlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmdldFNlbGVjdGVkUmFuZ2UoKVxuICB9XG5cbiAgZ2V0UG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24uZ2V0UG9zaXRpb24oKVxuICB9XG5cbiAgZ2V0Q2xpZW50UmVjdEF0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICBjb25zdCBsb2NhdGlvblJhbmdlID0gdGhpcy5nZXREb2N1bWVudCgpLmxvY2F0aW9uUmFuZ2VGcm9tUmFuZ2UoWyBwb3NpdGlvbiwgcG9zaXRpb24gKyAxIF0pXG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5nZXRDbGllbnRSZWN0QXRMb2NhdGlvblJhbmdlKGxvY2F0aW9uUmFuZ2UpXG4gIH1cblxuICBleHBhbmRTZWxlY3Rpb25JbkRpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5leHBhbmRTZWxlY3Rpb25JbkRpcmVjdGlvbihkaXJlY3Rpb24pXG4gIH1cblxuICBtb3ZlQ3Vyc29ySW5EaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24ubW92ZUN1cnNvckluRGlyZWN0aW9uKGRpcmVjdGlvbilcbiAgfVxuXG4gIHNldFNlbGVjdGVkUmFuZ2Uoc2VsZWN0ZWRSYW5nZSkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLnNldFNlbGVjdGVkUmFuZ2Uoc2VsZWN0ZWRSYW5nZSlcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcblxuICBhY3RpdmF0ZUF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9IHRydWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5zZXRDdXJyZW50QXR0cmlidXRlKG5hbWUsIHZhbHVlKVxuICB9XG5cbiAgYXR0cmlidXRlSXNBY3RpdmUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmhhc0N1cnJlbnRBdHRyaWJ1dGUobmFtZSlcbiAgfVxuXG4gIGNhbkFjdGl2YXRlQXR0cmlidXRlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5jYW5TZXRDdXJyZW50QXR0cmlidXRlKG5hbWUpXG4gIH1cblxuICBkZWFjdGl2YXRlQXR0cmlidXRlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5yZW1vdmVDdXJyZW50QXR0cmlidXRlKG5hbWUpXG4gIH1cblxuICAvLyBIVE1MIGF0dHJpYnV0ZXNcbiAgc2V0SFRNTEF0cmlidXRlQXRQb3NpdGlvbihwb3NpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLmNvbXBvc2l0aW9uLnNldEhUTUxBdHJpYnV0ZUF0UG9zaXRpb24ocG9zaXRpb24sIG5hbWUsIHZhbHVlKVxuICB9XG5cbiAgLy8gTmVzdGluZyBsZXZlbFxuXG4gIGNhbkRlY3JlYXNlTmVzdGluZ0xldmVsKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmNhbkRlY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgfVxuXG4gIGNhbkluY3JlYXNlTmVzdGluZ0xldmVsKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmNhbkluY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgfVxuXG4gIGRlY3JlYXNlTmVzdGluZ0xldmVsKCkge1xuICAgIGlmICh0aGlzLmNhbkRlY3JlYXNlTmVzdGluZ0xldmVsKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmRlY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgICB9XG4gIH1cblxuICBpbmNyZWFzZU5lc3RpbmdMZXZlbCgpIHtcbiAgICBpZiAodGhpcy5jYW5JbmNyZWFzZU5lc3RpbmdMZXZlbCgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5pbmNyZWFzZU5lc3RpbmdMZXZlbCgpXG4gICAgfVxuICB9XG5cbiAgLy8gVW5kby9yZWRvXG5cbiAgY2FuUmVkbygpIHtcbiAgICByZXR1cm4gdGhpcy51bmRvTWFuYWdlci5jYW5SZWRvKClcbiAgfVxuXG4gIGNhblVuZG8oKSB7XG4gICAgcmV0dXJuIHRoaXMudW5kb01hbmFnZXIuY2FuVW5kbygpXG4gIH1cblxuICByZWNvcmRVbmRvRW50cnkoZGVzY3JpcHRpb24sIHsgY29udGV4dCwgY29uc29saWRhdGFibGUgfSA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMudW5kb01hbmFnZXIucmVjb3JkVW5kb0VudHJ5KGRlc2NyaXB0aW9uLCB7IGNvbnRleHQsIGNvbnNvbGlkYXRhYmxlIH0pXG4gIH1cblxuICByZWRvKCkge1xuICAgIGlmICh0aGlzLmNhblJlZG8oKSkge1xuICAgICAgcmV0dXJuIHRoaXMudW5kb01hbmFnZXIucmVkbygpXG4gICAgfVxuICB9XG5cbiAgdW5kbygpIHtcbiAgICBpZiAodGhpcy5jYW5VbmRvKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnVuZG9NYW5hZ2VyLnVuZG8oKVxuICAgIH1cbiAgfVxufVxuIiwgIi8qIGVzbGludC1kaXNhYmxlXG4gICAgbm8tdmFyLFxuICAgIHByZWZlci1jb25zdCxcbiovXG5pbXBvcnQge1xuICBlbGVtZW50Q29udGFpbnNOb2RlLFxuICBmaW5kQ2hpbGRJbmRleE9mTm9kZSxcbiAgbm9kZUlzQXR0YWNobWVudEVsZW1lbnQsXG4gIG5vZGVJc0Jsb2NrQ29udGFpbmVyLFxuICBub2RlSXNCbG9ja1N0YXJ0LFxuICBub2RlSXNCbG9ja1N0YXJ0Q29tbWVudCxcbiAgbm9kZUlzQ3Vyc29yVGFyZ2V0LFxuICBub2RlSXNFbXB0eVRleHROb2RlLFxuICBub2RlSXNUZXh0Tm9kZSxcbiAgdGFnTmFtZSxcbiAgd2Fsa1RyZWUsXG59IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvY2F0aW9uTWFwcGVyIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgfVxuXG4gIGZpbmRMb2NhdGlvbkZyb21Db250YWluZXJBbmRPZmZzZXQoY29udGFpbmVyLCBvZmZzZXQsIHsgc3RyaWN0IH0gPSB7IHN0cmljdDogdHJ1ZSB9KSB7XG4gICAgbGV0IGNoaWxkSW5kZXggPSAwXG4gICAgbGV0IGZvdW5kQmxvY2sgPSBmYWxzZVxuICAgIGNvbnN0IGxvY2F0aW9uID0geyBpbmRleDogMCwgb2Zmc2V0OiAwIH1cbiAgICBjb25zdCBhdHRhY2htZW50RWxlbWVudCA9IHRoaXMuZmluZEF0dGFjaG1lbnRFbGVtZW50UGFyZW50Rm9yTm9kZShjb250YWluZXIpXG5cbiAgICBpZiAoYXR0YWNobWVudEVsZW1lbnQpIHtcbiAgICAgIGNvbnRhaW5lciA9IGF0dGFjaG1lbnRFbGVtZW50LnBhcmVudE5vZGVcbiAgICAgIG9mZnNldCA9IGZpbmRDaGlsZEluZGV4T2ZOb2RlKGF0dGFjaG1lbnRFbGVtZW50KVxuICAgIH1cblxuICAgIGNvbnN0IHdhbGtlciA9IHdhbGtUcmVlKHRoaXMuZWxlbWVudCwgeyB1c2luZ0ZpbHRlcjogcmVqZWN0QXR0YWNobWVudENvbnRlbnRzIH0pXG5cbiAgICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB3YWxrZXIuY3VycmVudE5vZGVcblxuICAgICAgaWYgKG5vZGUgPT09IGNvbnRhaW5lciAmJiBub2RlSXNUZXh0Tm9kZShjb250YWluZXIpKSB7XG4gICAgICAgIGlmICghbm9kZUlzQ3Vyc29yVGFyZ2V0KG5vZGUpKSB7XG4gICAgICAgICAgbG9jYXRpb24ub2Zmc2V0ICs9IG9mZnNldFxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlID09PSBjb250YWluZXIpIHtcbiAgICAgICAgICBpZiAoY2hpbGRJbmRleCsrID09PSBvZmZzZXQpIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFlbGVtZW50Q29udGFpbnNOb2RlKGNvbnRhaW5lciwgbm9kZSkpIHtcbiAgICAgICAgICBpZiAoY2hpbGRJbmRleCA+IDApIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vZGVJc0Jsb2NrU3RhcnQobm9kZSwgeyBzdHJpY3QgfSkpIHtcbiAgICAgICAgICBpZiAoZm91bmRCbG9jaykge1xuICAgICAgICAgICAgbG9jYXRpb24uaW5kZXgrK1xuICAgICAgICAgIH1cbiAgICAgICAgICBsb2NhdGlvbi5vZmZzZXQgPSAwXG4gICAgICAgICAgZm91bmRCbG9jayA9IHRydWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2NhdGlvbi5vZmZzZXQgKz0gbm9kZUxlbmd0aChub2RlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvY2F0aW9uXG4gIH1cblxuICBmaW5kQ29udGFpbmVyQW5kT2Zmc2V0RnJvbUxvY2F0aW9uKGxvY2F0aW9uKSB7XG4gICAgbGV0IGNvbnRhaW5lciwgb2Zmc2V0XG4gICAgaWYgKGxvY2F0aW9uLmluZGV4ID09PSAwICYmIGxvY2F0aW9uLm9mZnNldCA9PT0gMCkge1xuICAgICAgY29udGFpbmVyID0gdGhpcy5lbGVtZW50XG4gICAgICBvZmZzZXQgPSAwXG5cbiAgICAgIHdoaWxlIChjb250YWluZXIuZmlyc3RDaGlsZCkge1xuICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIuZmlyc3RDaGlsZFxuICAgICAgICBpZiAobm9kZUlzQmxvY2tDb250YWluZXIoY29udGFpbmVyKSkge1xuICAgICAgICAgIG9mZnNldCA9IDFcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbIGNvbnRhaW5lciwgb2Zmc2V0IF1cbiAgICB9XG5cbiAgICBsZXQgWyBub2RlLCBub2RlT2Zmc2V0IF0gPSB0aGlzLmZpbmROb2RlQW5kT2Zmc2V0RnJvbUxvY2F0aW9uKGxvY2F0aW9uKVxuICAgIGlmICghbm9kZSkgcmV0dXJuXG5cbiAgICBpZiAobm9kZUlzVGV4dE5vZGUobm9kZSkpIHtcbiAgICAgIGlmIChub2RlTGVuZ3RoKG5vZGUpID09PSAwKSB7XG4gICAgICAgIGNvbnRhaW5lciA9IG5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlXG4gICAgICAgIG9mZnNldCA9IGZpbmRDaGlsZEluZGV4T2ZOb2RlKG5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgaWYgKG5vZGVJc0N1cnNvclRhcmdldChub2RlLCB7IG5hbWU6IFwicmlnaHRcIiB9KSkge1xuICAgICAgICAgIG9mZnNldCsrXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRhaW5lciA9IG5vZGVcbiAgICAgICAgb2Zmc2V0ID0gbG9jYXRpb24ub2Zmc2V0IC0gbm9kZU9mZnNldFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWluZXIgPSBub2RlLnBhcmVudE5vZGVcblxuICAgICAgaWYgKCFub2RlSXNCbG9ja1N0YXJ0KG5vZGUucHJldmlvdXNTaWJsaW5nKSkge1xuICAgICAgICBpZiAoIW5vZGVJc0Jsb2NrQ29udGFpbmVyKGNvbnRhaW5lcikpIHtcbiAgICAgICAgICB3aGlsZSAobm9kZSA9PT0gY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgICAgICAgICAgbm9kZSA9IGNvbnRhaW5lclxuICAgICAgICAgICAgY29udGFpbmVyID0gY29udGFpbmVyLnBhcmVudE5vZGVcbiAgICAgICAgICAgIGlmIChub2RlSXNCbG9ja0NvbnRhaW5lcihjb250YWluZXIpKSB7XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9mZnNldCA9IGZpbmRDaGlsZEluZGV4T2ZOb2RlKG5vZGUpXG4gICAgICBpZiAobG9jYXRpb24ub2Zmc2V0ICE9PSAwKSB7XG4gICAgICAgIG9mZnNldCsrXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFsgY29udGFpbmVyLCBvZmZzZXQgXVxuICB9XG5cbiAgZmluZE5vZGVBbmRPZmZzZXRGcm9tTG9jYXRpb24obG9jYXRpb24pIHtcbiAgICBsZXQgbm9kZSwgbm9kZU9mZnNldFxuICAgIGxldCBvZmZzZXQgPSAwXG5cbiAgICBmb3IgKGNvbnN0IGN1cnJlbnROb2RlIG9mIHRoaXMuZ2V0U2lnbmlmaWNhbnROb2Rlc0ZvckluZGV4KGxvY2F0aW9uLmluZGV4KSkge1xuICAgICAgY29uc3QgbGVuZ3RoID0gbm9kZUxlbmd0aChjdXJyZW50Tm9kZSlcblxuICAgICAgaWYgKGxvY2F0aW9uLm9mZnNldCA8PSBvZmZzZXQgKyBsZW5ndGgpIHtcbiAgICAgICAgaWYgKG5vZGVJc1RleHROb2RlKGN1cnJlbnROb2RlKSkge1xuICAgICAgICAgIG5vZGUgPSBjdXJyZW50Tm9kZVxuICAgICAgICAgIG5vZGVPZmZzZXQgPSBvZmZzZXRcbiAgICAgICAgICBpZiAobG9jYXRpb24ub2Zmc2V0ID09PSBub2RlT2Zmc2V0ICYmIG5vZGVJc0N1cnNvclRhcmdldChub2RlKSkge1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIW5vZGUpIHtcbiAgICAgICAgICBub2RlID0gY3VycmVudE5vZGVcbiAgICAgICAgICBub2RlT2Zmc2V0ID0gb2Zmc2V0XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgb2Zmc2V0ICs9IGxlbmd0aFxuICAgICAgaWYgKG9mZnNldCA+IGxvY2F0aW9uLm9mZnNldCkge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbIG5vZGUsIG5vZGVPZmZzZXQgXVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIGZpbmRBdHRhY2htZW50RWxlbWVudFBhcmVudEZvck5vZGUobm9kZSkge1xuICAgIHdoaWxlIChub2RlICYmIG5vZGUgIT09IHRoaXMuZWxlbWVudCkge1xuICAgICAgaWYgKG5vZGVJc0F0dGFjaG1lbnRFbGVtZW50KG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBub2RlXG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlXG4gICAgfVxuICB9XG5cbiAgZ2V0U2lnbmlmaWNhbnROb2Rlc0ZvckluZGV4KGluZGV4KSB7XG4gICAgY29uc3Qgbm9kZXMgPSBbXVxuICAgIGNvbnN0IHdhbGtlciA9IHdhbGtUcmVlKHRoaXMuZWxlbWVudCwgeyB1c2luZ0ZpbHRlcjogYWNjZXB0U2lnbmlmaWNhbnROb2RlcyB9KVxuICAgIGxldCByZWNvcmRpbmdOb2RlcyA9IGZhbHNlXG5cbiAgICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB3YWxrZXIuY3VycmVudE5vZGVcbiAgICAgIGlmIChub2RlSXNCbG9ja1N0YXJ0Q29tbWVudChub2RlKSkge1xuICAgICAgICB2YXIgYmxvY2tJbmRleFxuICAgICAgICBpZiAoYmxvY2tJbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgYmxvY2tJbmRleCsrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmxvY2tJbmRleCA9IDBcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChibG9ja0luZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgIHJlY29yZGluZ05vZGVzID0gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZGluZ05vZGVzKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWNvcmRpbmdOb2Rlcykge1xuICAgICAgICBub2Rlcy5wdXNoKG5vZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuY29uc3Qgbm9kZUxlbmd0aCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgaWYgKG5vZGVJc0N1cnNvclRhcmdldChub2RlKSkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3RyaW5nID0gbm9kZS50ZXh0Q29udGVudFxuICAgICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgICB9XG4gIH0gZWxzZSBpZiAodGFnTmFtZShub2RlKSA9PT0gXCJiclwiIHx8IG5vZGVJc0F0dGFjaG1lbnRFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIDFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMFxuICB9XG59XG5cbmNvbnN0IGFjY2VwdFNpZ25pZmljYW50Tm9kZXMgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmIChyZWplY3RFbXB0eVRleHROb2Rlcyhub2RlKSA9PT0gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUKSB7XG4gICAgcmV0dXJuIHJlamVjdEF0dGFjaG1lbnRDb250ZW50cyhub2RlKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9SRUpFQ1RcbiAgfVxufVxuXG5jb25zdCByZWplY3RFbXB0eVRleHROb2RlcyA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKG5vZGVJc0VtcHR5VGV4dE5vZGUobm9kZSkpIHtcbiAgICByZXR1cm4gTm9kZUZpbHRlci5GSUxURVJfUkVKRUNUXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVFxuICB9XG59XG5cbmNvbnN0IHJlamVjdEF0dGFjaG1lbnRDb250ZW50cyA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKG5vZGVJc0F0dGFjaG1lbnRFbGVtZW50KG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICByZXR1cm4gTm9kZUZpbHRlci5GSUxURVJfUkVKRUNUXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVFxuICB9XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiAgICBpZC1sZW5ndGgsXG4gICAgbm8tZW1wdHksXG4qL1xuaW1wb3J0IHsgZ2V0RE9NUmFuZ2UsIHNldERPTVJhbmdlIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9pbnRNYXBwZXIge1xuICBjcmVhdGVET01SYW5nZUZyb21Qb2ludCh7IHgsIHkgfSkge1xuICAgIGxldCBkb21SYW5nZVxuICAgIGlmIChkb2N1bWVudC5jYXJldFBvc2l0aW9uRnJvbVBvaW50KSB7XG4gICAgICBjb25zdCB7IG9mZnNldE5vZGUsIG9mZnNldCB9ID0gZG9jdW1lbnQuY2FyZXRQb3NpdGlvbkZyb21Qb2ludCh4LCB5KVxuICAgICAgZG9tUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpXG4gICAgICBkb21SYW5nZS5zZXRTdGFydChvZmZzZXROb2RlLCBvZmZzZXQpXG4gICAgICByZXR1cm4gZG9tUmFuZ2VcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmNhcmV0UmFuZ2VGcm9tUG9pbnQpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jYXJldFJhbmdlRnJvbVBvaW50KHgsIHkpXG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5ib2R5LmNyZWF0ZVRleHRSYW5nZSkge1xuICAgICAgY29uc3Qgb3JpZ2luYWxET01SYW5nZSA9IGdldERPTVJhbmdlKClcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIElFIDExIHRocm93cyBcIlVuc3BlY2lmaWVkIGVycm9yXCIgd2hlbiB1c2luZyBtb3ZlVG9Qb2ludFxuICAgICAgICAvLyBkdXJpbmcgYSBkcmFnLWFuZC1kcm9wIG9wZXJhdGlvbi5cbiAgICAgICAgY29uc3QgdGV4dFJhbmdlID0gZG9jdW1lbnQuYm9keS5jcmVhdGVUZXh0UmFuZ2UoKVxuICAgICAgICB0ZXh0UmFuZ2UubW92ZVRvUG9pbnQoeCwgeSlcbiAgICAgICAgdGV4dFJhbmdlLnNlbGVjdCgpXG4gICAgICB9IGNhdGNoIChlcnJvcikge31cbiAgICAgIGRvbVJhbmdlID0gZ2V0RE9NUmFuZ2UoKVxuICAgICAgc2V0RE9NUmFuZ2Uob3JpZ2luYWxET01SYW5nZSlcbiAgICAgIHJldHVybiBkb21SYW5nZVxuICAgIH1cbiAgfVxuXG4gIGdldENsaWVudFJlY3RzRm9yRE9NUmFuZ2UoZG9tUmFuZ2UpIHtcbiAgICBjb25zdCBhcnJheSA9IEFycmF5LmZyb20oZG9tUmFuZ2UuZ2V0Q2xpZW50UmVjdHMoKSlcbiAgICBjb25zdCBzdGFydCA9IGFycmF5WzBdXG4gICAgY29uc3QgZW5kID0gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV1cblxuICAgIHJldHVybiBbIHN0YXJ0LCBlbmQgXVxuICB9XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiovXG5pbXBvcnQgQmFzaWNPYmplY3QgZnJvbSBcInRyaXgvY29yZS9iYXNpY19vYmplY3RcIlxuXG5pbXBvcnQgTG9jYXRpb25NYXBwZXIgZnJvbSBcInRyaXgvbW9kZWxzL2xvY2F0aW9uX21hcHBlclwiXG5pbXBvcnQgUG9pbnRNYXBwZXIgZnJvbSBcInRyaXgvbW9kZWxzL3BvaW50X21hcHBlclwiXG5cbmltcG9ydCB7XG4gIGVsZW1lbnRDb250YWluc05vZGUsXG4gIGdldERPTVJhbmdlLFxuICBnZXRET01TZWxlY3Rpb24sXG4gIGhhbmRsZUV2ZW50LFxuICBpbm5lckVsZW1lbnRJc0FjdGl2ZSxcbiAgbm9kZUlzQ3Vyc29yVGFyZ2V0LFxuICBub3JtYWxpemVSYW5nZSxcbiAgcmFuZ2VJc0NvbGxhcHNlZCxcbiAgcmFuZ2VzQXJlRXF1YWwsXG4gIHNldERPTVJhbmdlLFxufSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWxlY3Rpb25NYW5hZ2VyIGV4dGVuZHMgQmFzaWNPYmplY3Qge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMuZGlkTW91c2VEb3duID0gdGhpcy5kaWRNb3VzZURvd24uYmluZCh0aGlzKVxuICAgIHRoaXMuc2VsZWN0aW9uRGlkQ2hhbmdlID0gdGhpcy5zZWxlY3Rpb25EaWRDaGFuZ2UuYmluZCh0aGlzKVxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLmxvY2F0aW9uTWFwcGVyID0gbmV3IExvY2F0aW9uTWFwcGVyKHRoaXMuZWxlbWVudClcbiAgICB0aGlzLnBvaW50TWFwcGVyID0gbmV3IFBvaW50TWFwcGVyKClcbiAgICB0aGlzLmxvY2tDb3VudCA9IDBcbiAgICBoYW5kbGVFdmVudChcIm1vdXNlZG93blwiLCB7IG9uRWxlbWVudDogdGhpcy5lbGVtZW50LCB3aXRoQ2FsbGJhY2s6IHRoaXMuZGlkTW91c2VEb3duIH0pXG4gIH1cblxuICBnZXRMb2NhdGlvblJhbmdlKG9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChvcHRpb25zLnN0cmljdCA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUxvY2F0aW9uUmFuZ2VGcm9tRE9NUmFuZ2UoZ2V0RE9NUmFuZ2UoKSlcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaWdub3JlTG9jaykge1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudExvY2F0aW9uUmFuZ2VcbiAgICB9IGVsc2UgaWYgKHRoaXMubG9ja2VkTG9jYXRpb25SYW5nZSkge1xuICAgICAgcmV0dXJuIHRoaXMubG9ja2VkTG9jYXRpb25SYW5nZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50TG9jYXRpb25SYW5nZVxuICAgIH1cbiAgfVxuXG4gIHNldExvY2F0aW9uUmFuZ2UobG9jYXRpb25SYW5nZSkge1xuICAgIGlmICh0aGlzLmxvY2tlZExvY2F0aW9uUmFuZ2UpIHJldHVyblxuICAgIGxvY2F0aW9uUmFuZ2UgPSBub3JtYWxpemVSYW5nZShsb2NhdGlvblJhbmdlKVxuXG4gICAgY29uc3QgZG9tUmFuZ2UgPSB0aGlzLmNyZWF0ZURPTVJhbmdlRnJvbUxvY2F0aW9uUmFuZ2UobG9jYXRpb25SYW5nZSlcbiAgICBpZiAoZG9tUmFuZ2UpIHtcbiAgICAgIHNldERPTVJhbmdlKGRvbVJhbmdlKVxuICAgICAgdGhpcy51cGRhdGVDdXJyZW50TG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKVxuICAgIH1cbiAgfVxuXG4gIHNldExvY2F0aW9uUmFuZ2VGcm9tUG9pbnRSYW5nZShwb2ludFJhbmdlKSB7XG4gICAgcG9pbnRSYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHBvaW50UmFuZ2UpXG4gICAgY29uc3Qgc3RhcnRMb2NhdGlvbiA9IHRoaXMuZ2V0TG9jYXRpb25BdFBvaW50KHBvaW50UmFuZ2VbMF0pXG4gICAgY29uc3QgZW5kTG9jYXRpb24gPSB0aGlzLmdldExvY2F0aW9uQXRQb2ludChwb2ludFJhbmdlWzFdKVxuICAgIHRoaXMuc2V0TG9jYXRpb25SYW5nZShbIHN0YXJ0TG9jYXRpb24sIGVuZExvY2F0aW9uIF0pXG4gIH1cblxuICBnZXRDbGllbnRSZWN0QXRMb2NhdGlvblJhbmdlKGxvY2F0aW9uUmFuZ2UpIHtcbiAgICBjb25zdCBkb21SYW5nZSA9IHRoaXMuY3JlYXRlRE9NUmFuZ2VGcm9tTG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKVxuICAgIGlmIChkb21SYW5nZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2xpZW50UmVjdHNGb3JET01SYW5nZShkb21SYW5nZSlbMV1cbiAgICB9XG4gIH1cblxuICBsb2NhdGlvbklzQ3Vyc29yVGFyZ2V0KGxvY2F0aW9uKSB7XG4gICAgY29uc3Qgbm9kZSA9IEFycmF5LmZyb20odGhpcy5maW5kTm9kZUFuZE9mZnNldEZyb21Mb2NhdGlvbihsb2NhdGlvbikpWzBdXG4gICAgcmV0dXJuIG5vZGVJc0N1cnNvclRhcmdldChub2RlKVxuICB9XG5cbiAgbG9jaygpIHtcbiAgICBpZiAodGhpcy5sb2NrQ291bnQrKyA9PT0gMCkge1xuICAgICAgdGhpcy51cGRhdGVDdXJyZW50TG9jYXRpb25SYW5nZSgpXG4gICAgICB0aGlzLmxvY2tlZExvY2F0aW9uUmFuZ2UgPSB0aGlzLmdldExvY2F0aW9uUmFuZ2UoKVxuICAgIH1cbiAgfVxuXG4gIHVubG9jaygpIHtcbiAgICBpZiAoLS10aGlzLmxvY2tDb3VudCA9PT0gMCkge1xuICAgICAgY29uc3QgeyBsb2NrZWRMb2NhdGlvblJhbmdlIH0gPSB0aGlzXG4gICAgICB0aGlzLmxvY2tlZExvY2F0aW9uUmFuZ2UgPSBudWxsXG4gICAgICBpZiAobG9ja2VkTG9jYXRpb25SYW5nZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExvY2F0aW9uUmFuZ2UobG9ja2VkTG9jYXRpb25SYW5nZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjbGVhclNlbGVjdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0RE9NU2VsZWN0aW9uKCk/LnJlbW92ZUFsbFJhbmdlcygpXG4gIH1cblxuICBzZWxlY3Rpb25Jc0NvbGxhcHNlZCgpIHtcbiAgICByZXR1cm4gZ2V0RE9NUmFuZ2UoKT8uY29sbGFwc2VkID09PSB0cnVlXG4gIH1cblxuICBzZWxlY3Rpb25Jc0V4cGFuZGVkKCkge1xuICAgIHJldHVybiAhdGhpcy5zZWxlY3Rpb25Jc0NvbGxhcHNlZCgpXG4gIH1cblxuICBjcmVhdGVMb2NhdGlvblJhbmdlRnJvbURPTVJhbmdlKGRvbVJhbmdlLCBvcHRpb25zKSB7XG4gICAgaWYgKGRvbVJhbmdlID09IG51bGwgfHwgIXRoaXMuZG9tUmFuZ2VXaXRoaW5FbGVtZW50KGRvbVJhbmdlKSkgcmV0dXJuXG5cbiAgICBjb25zdCBzdGFydCA9IHRoaXMuZmluZExvY2F0aW9uRnJvbUNvbnRhaW5lckFuZE9mZnNldChkb21SYW5nZS5zdGFydENvbnRhaW5lciwgZG9tUmFuZ2Uuc3RhcnRPZmZzZXQsIG9wdGlvbnMpXG4gICAgaWYgKCFzdGFydCkgcmV0dXJuXG5cbiAgICBjb25zdCBlbmQgPSBkb21SYW5nZS5jb2xsYXBzZWRcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IHRoaXMuZmluZExvY2F0aW9uRnJvbUNvbnRhaW5lckFuZE9mZnNldChkb21SYW5nZS5lbmRDb250YWluZXIsIGRvbVJhbmdlLmVuZE9mZnNldCwgb3B0aW9ucylcblxuICAgIHJldHVybiBub3JtYWxpemVSYW5nZShbIHN0YXJ0LCBlbmQgXSlcbiAgfVxuXG4gIGRpZE1vdXNlRG93bigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXVzZVRlbXBvcmFyaWx5KClcbiAgfVxuXG4gIHBhdXNlVGVtcG9yYXJpbHkoKSB7XG4gICAgbGV0IHJlc3VtZUhhbmRsZXJzXG4gICAgdGhpcy5wYXVzZWQgPSB0cnVlXG5cbiAgICBjb25zdCByZXN1bWUgPSAoKSA9PiB7XG4gICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlXG4gICAgICBjbGVhclRpbWVvdXQocmVzdW1lVGltZW91dClcblxuICAgICAgQXJyYXkuZnJvbShyZXN1bWVIYW5kbGVycykuZm9yRWFjaCgoaGFuZGxlcikgPT4ge1xuICAgICAgICBoYW5kbGVyLmRlc3Ryb3koKVxuICAgICAgfSlcblxuICAgICAgaWYgKGVsZW1lbnRDb250YWluc05vZGUoZG9jdW1lbnQsIHRoaXMuZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uRGlkQ2hhbmdlKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXN1bWVUaW1lb3V0ID0gc2V0VGltZW91dChyZXN1bWUsIDIwMClcblxuICAgIHJlc3VtZUhhbmRsZXJzID0gWyBcIm1vdXNlbW92ZVwiLCBcImtleWRvd25cIiBdLm1hcCgoZXZlbnROYW1lKSA9PlxuICAgICAgaGFuZGxlRXZlbnQoZXZlbnROYW1lLCB7IG9uRWxlbWVudDogZG9jdW1lbnQsIHdpdGhDYWxsYmFjazogcmVzdW1lIH0pXG4gICAgKVxuICB9XG5cbiAgc2VsZWN0aW9uRGlkQ2hhbmdlKCkge1xuICAgIGlmICghdGhpcy5wYXVzZWQgJiYgIWlubmVyRWxlbWVudElzQWN0aXZlKHRoaXMuZWxlbWVudCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUN1cnJlbnRMb2NhdGlvblJhbmdlKClcbiAgICB9XG4gIH1cblxuICB1cGRhdGVDdXJyZW50TG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKSB7XG4gICAgaWYgKGxvY2F0aW9uUmFuZ2UgIT0gbnVsbCA/IGxvY2F0aW9uUmFuZ2UgOiBsb2NhdGlvblJhbmdlID0gdGhpcy5jcmVhdGVMb2NhdGlvblJhbmdlRnJvbURPTVJhbmdlKGdldERPTVJhbmdlKCkpKSB7XG4gICAgICBpZiAoIXJhbmdlc0FyZUVxdWFsKGxvY2F0aW9uUmFuZ2UsIHRoaXMuY3VycmVudExvY2F0aW9uUmFuZ2UpKSB7XG4gICAgICAgIHRoaXMuY3VycmVudExvY2F0aW9uUmFuZ2UgPSBsb2NhdGlvblJhbmdlXG4gICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5sb2NhdGlvblJhbmdlRGlkQ2hhbmdlPy4odGhpcy5jdXJyZW50TG9jYXRpb25SYW5nZS5zbGljZSgwKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjcmVhdGVET01SYW5nZUZyb21Mb2NhdGlvblJhbmdlKGxvY2F0aW9uUmFuZ2UpIHtcbiAgICBjb25zdCByYW5nZVN0YXJ0ID0gdGhpcy5maW5kQ29udGFpbmVyQW5kT2Zmc2V0RnJvbUxvY2F0aW9uKGxvY2F0aW9uUmFuZ2VbMF0pXG4gICAgY29uc3QgcmFuZ2VFbmQgPSByYW5nZUlzQ29sbGFwc2VkKGxvY2F0aW9uUmFuZ2UpXG4gICAgICA/IHJhbmdlU3RhcnRcbiAgICAgIDogdGhpcy5maW5kQ29udGFpbmVyQW5kT2Zmc2V0RnJvbUxvY2F0aW9uKGxvY2F0aW9uUmFuZ2VbMV0pIHx8IHJhbmdlU3RhcnRcblxuICAgIGlmIChyYW5nZVN0YXJ0ICE9IG51bGwgJiYgcmFuZ2VFbmQgIT0gbnVsbCkge1xuICAgICAgY29uc3QgZG9tUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpXG4gICAgICBkb21SYW5nZS5zZXRTdGFydCguLi5BcnJheS5mcm9tKHJhbmdlU3RhcnQgfHwgW10pKVxuICAgICAgZG9tUmFuZ2Uuc2V0RW5kKC4uLkFycmF5LmZyb20ocmFuZ2VFbmQgfHwgW10pKVxuICAgICAgcmV0dXJuIGRvbVJhbmdlXG4gICAgfVxuICB9XG5cbiAgZ2V0TG9jYXRpb25BdFBvaW50KHBvaW50KSB7XG4gICAgY29uc3QgZG9tUmFuZ2UgPSB0aGlzLmNyZWF0ZURPTVJhbmdlRnJvbVBvaW50KHBvaW50KVxuICAgIGlmIChkb21SYW5nZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTG9jYXRpb25SYW5nZUZyb21ET01SYW5nZShkb21SYW5nZSk/LlswXVxuICAgIH1cbiAgfVxuXG4gIGRvbVJhbmdlV2l0aGluRWxlbWVudChkb21SYW5nZSkge1xuICAgIGlmIChkb21SYW5nZS5jb2xsYXBzZWQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Q29udGFpbnNOb2RlKHRoaXMuZWxlbWVudCwgZG9tUmFuZ2Uuc3RhcnRDb250YWluZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGVsZW1lbnRDb250YWluc05vZGUodGhpcy5lbGVtZW50LCBkb21SYW5nZS5zdGFydENvbnRhaW5lcikgJiZcbiAgICAgICAgZWxlbWVudENvbnRhaW5zTm9kZSh0aGlzLmVsZW1lbnQsIGRvbVJhbmdlLmVuZENvbnRhaW5lcilcbiAgICAgIClcbiAgICB9XG4gIH1cbn1cblxuU2VsZWN0aW9uTWFuYWdlci5wcm94eU1ldGhvZChcImxvY2F0aW9uTWFwcGVyLmZpbmRMb2NhdGlvbkZyb21Db250YWluZXJBbmRPZmZzZXRcIilcblNlbGVjdGlvbk1hbmFnZXIucHJveHlNZXRob2QoXCJsb2NhdGlvbk1hcHBlci5maW5kQ29udGFpbmVyQW5kT2Zmc2V0RnJvbUxvY2F0aW9uXCIpXG5TZWxlY3Rpb25NYW5hZ2VyLnByb3h5TWV0aG9kKFwibG9jYXRpb25NYXBwZXIuZmluZE5vZGVBbmRPZmZzZXRGcm9tTG9jYXRpb25cIilcblNlbGVjdGlvbk1hbmFnZXIucHJveHlNZXRob2QoXCJwb2ludE1hcHBlci5jcmVhdGVET01SYW5nZUZyb21Qb2ludFwiKVxuU2VsZWN0aW9uTWFuYWdlci5wcm94eU1ldGhvZChcInBvaW50TWFwcGVyLmdldENsaWVudFJlY3RzRm9yRE9NUmFuZ2VcIilcblxuIiwgImltcG9ydCB7IHJlbW92ZU5vZGUgfSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5pbXBvcnQgKiBhcyBjb25maWcgZnJvbSBcInRyaXgvY29uZmlnXCJcbmltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5cbmltcG9ydCB7IGRlZmVyLCBoYW5kbGVFdmVudCwgbWFrZUVsZW1lbnQsIHRhZ05hbWUsIHRyaWdnZXJFdmVudCB9IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5jb25zdCB7IGxhbmcsIGNzcywga2V5TmFtZXMgfSA9IGNvbmZpZ1xuXG5jb25zdCB1bmRvYWJsZSA9IGZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBjb21tYW5kcyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICBjb21tYW5kcy5kbygpXG4gICAgaWYgKCF0aGlzLnVuZG9zKSB7XG4gICAgICB0aGlzLnVuZG9zID0gW11cbiAgICB9XG4gICAgdGhpcy51bmRvcy5wdXNoKGNvbW1hbmRzLnVuZG8pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXR0YWNobWVudEVkaXRvckNvbnRyb2xsZXIgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGNvbnN0cnVjdG9yKGF0dGFjaG1lbnRQaWVjZSwgZWxlbWVudCwgY29udGFpbmVyLCBvcHRpb25zID0ge30pIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5kaWRDbGlja1Rvb2xiYXIgPSB0aGlzLmRpZENsaWNrVG9vbGJhci5iaW5kKHRoaXMpXG4gICAgdGhpcy5kaWRDbGlja0FjdGlvbkJ1dHRvbiA9IHRoaXMuZGlkQ2xpY2tBY3Rpb25CdXR0b24uYmluZCh0aGlzKVxuICAgIHRoaXMuZGlkS2V5RG93bkNhcHRpb24gPSB0aGlzLmRpZEtleURvd25DYXB0aW9uLmJpbmQodGhpcylcbiAgICB0aGlzLmRpZElucHV0Q2FwdGlvbiA9IHRoaXMuZGlkSW5wdXRDYXB0aW9uLmJpbmQodGhpcylcbiAgICB0aGlzLmRpZENoYW5nZUNhcHRpb24gPSB0aGlzLmRpZENoYW5nZUNhcHRpb24uYmluZCh0aGlzKVxuICAgIHRoaXMuZGlkQmx1ckNhcHRpb24gPSB0aGlzLmRpZEJsdXJDYXB0aW9uLmJpbmQodGhpcylcbiAgICB0aGlzLmF0dGFjaG1lbnRQaWVjZSA9IGF0dGFjaG1lbnRQaWVjZVxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lclxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgICB0aGlzLmF0dGFjaG1lbnQgPSB0aGlzLmF0dGFjaG1lbnRQaWVjZS5hdHRhY2htZW50XG4gICAgaWYgKHRhZ05hbWUodGhpcy5lbGVtZW50KSA9PT0gXCJhXCIpIHtcbiAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuZWxlbWVudC5maXJzdENoaWxkXG4gICAgfVxuICAgIHRoaXMuaW5zdGFsbCgpXG4gIH1cblxuICBpbnN0YWxsKCkge1xuICAgIHRoaXMubWFrZUVsZW1lbnRNdXRhYmxlKClcbiAgICB0aGlzLmFkZFRvb2xiYXIoKVxuICAgIGlmICh0aGlzLmF0dGFjaG1lbnQuaXNQcmV2aWV3YWJsZSgpKSB7XG4gICAgICB0aGlzLmluc3RhbGxDYXB0aW9uRWRpdG9yKClcbiAgICB9XG4gIH1cblxuICB1bmluc3RhbGwoKSB7XG4gICAgbGV0IHVuZG8gPSB0aGlzLnVuZG9zLnBvcCgpXG4gICAgdGhpcy5zYXZlUGVuZGluZ0NhcHRpb24oKVxuICAgIHdoaWxlICh1bmRvKSB7XG4gICAgICB1bmRvKClcbiAgICAgIHVuZG8gPSB0aGlzLnVuZG9zLnBvcCgpXG4gICAgfVxuICAgIHRoaXMuZGVsZWdhdGU/LmRpZFVuaW5zdGFsbEF0dGFjaG1lbnRFZGl0b3IodGhpcylcbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBzYXZlUGVuZGluZ0NhcHRpb24oKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZ0NhcHRpb24gIT0gbnVsbCkge1xuICAgICAgY29uc3QgY2FwdGlvbiA9IHRoaXMucGVuZGluZ0NhcHRpb25cbiAgICAgIHRoaXMucGVuZGluZ0NhcHRpb24gPSBudWxsXG4gICAgICBpZiAoY2FwdGlvbikge1xuICAgICAgICB0aGlzLmRlbGVnYXRlPy5hdHRhY2htZW50RWRpdG9yRGlkUmVxdWVzdFVwZGF0aW5nQXR0cmlidXRlc0ZvckF0dGFjaG1lbnQ/Lih7IGNhcHRpb24gfSwgdGhpcy5hdHRhY2htZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uYXR0YWNobWVudEVkaXRvckRpZFJlcXVlc3RSZW1vdmluZ0F0dHJpYnV0ZUZvckF0dGFjaG1lbnQ/LihcImNhcHRpb25cIiwgdGhpcy5hdHRhY2htZW50KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEluc3RhbGxpbmcgYW5kIHVuaW5zdGFsbGluZ1xuXG4gIG1ha2VFbGVtZW50TXV0YWJsZSA9IHVuZG9hYmxlKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgZG86ICgpID0+IHtcbiAgICAgICAgdGhpcy5lbGVtZW50LmRhdGFzZXQudHJpeE11dGFibGUgPSB0cnVlXG4gICAgICB9LFxuICAgICAgdW5kbzogKCkgPT4gZGVsZXRlIHRoaXMuZWxlbWVudC5kYXRhc2V0LnRyaXhNdXRhYmxlLFxuICAgIH1cbiAgfSlcblxuICBhZGRUb29sYmFyID0gdW5kb2FibGUoKCkgPT4ge1xuICAgIC8vIDxkaXYgY2xhc3M9XCIje2Nzcy5hdHRhY2htZW50TWV0YWRhdGFDb250YWluZXJ9XCIgZGF0YS10cml4LW11dGFibGU9XCJ0cnVlXCI+XG4gICAgLy8gICA8ZGl2IGNsYXNzPVwidHJpeC1idXR0b24tcm93XCI+XG4gICAgLy8gICAgIDxzcGFuIGNsYXNzPVwidHJpeC1idXR0b24tZ3JvdXAgdHJpeC1idXR0b24tZ3JvdXAtLWFjdGlvbnNcIj5cbiAgICAvLyAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1yZW1vdmVcIiB0aXRsZT1cIiN7bGFuZy5yZW1vdmV9XCIgZGF0YS10cml4LWFjdGlvbj1cInJlbW92ZVwiPiN7bGFuZy5yZW1vdmV9PC9idXR0b24+XG4gICAgLy8gICAgIDwvc3Bhbj5cbiAgICAvLyAgIDwvZGl2PlxuICAgIC8vIDwvZGl2PlxuICAgIGNvbnN0IGVsZW1lbnQgPSBtYWtlRWxlbWVudCh7XG4gICAgICB0YWdOYW1lOiBcImRpdlwiLFxuICAgICAgY2xhc3NOYW1lOiBjc3MuYXR0YWNobWVudFRvb2xiYXIsXG4gICAgICBkYXRhOiB7IHRyaXhNdXRhYmxlOiB0cnVlIH0sXG4gICAgICBjaGlsZE5vZGVzOiBtYWtlRWxlbWVudCh7XG4gICAgICAgIHRhZ05hbWU6IFwiZGl2XCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJ0cml4LWJ1dHRvbi1yb3dcIixcbiAgICAgICAgY2hpbGROb2RlczogbWFrZUVsZW1lbnQoe1xuICAgICAgICAgIHRhZ05hbWU6IFwic3BhblwiLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJ0cml4LWJ1dHRvbi1ncm91cCB0cml4LWJ1dHRvbi1ncm91cC0tYWN0aW9uc1wiLFxuICAgICAgICAgIGNoaWxkTm9kZXM6IG1ha2VFbGVtZW50KHtcbiAgICAgICAgICAgIHRhZ05hbWU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidHJpeC1idXR0b24gdHJpeC1idXR0b24tLXJlbW92ZVwiLFxuICAgICAgICAgICAgdGV4dENvbnRlbnQ6IGxhbmcucmVtb3ZlLFxuICAgICAgICAgICAgYXR0cmlidXRlczogeyB0aXRsZTogbGFuZy5yZW1vdmUgfSxcbiAgICAgICAgICAgIGRhdGE6IHsgdHJpeEFjdGlvbjogXCJyZW1vdmVcIiB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KSxcbiAgICAgIH0pLFxuICAgIH0pXG5cbiAgICBpZiAodGhpcy5hdHRhY2htZW50LmlzUHJldmlld2FibGUoKSkge1xuICAgICAgLy8gPGRpdiBjbGFzcz1cIiN7Y3NzLmF0dGFjaG1lbnRNZXRhZGF0YUNvbnRhaW5lcn1cIj5cbiAgICAgIC8vICAgPHNwYW4gY2xhc3M9XCIje2Nzcy5hdHRhY2htZW50TWV0YWRhdGF9XCI+XG4gICAgICAvLyAgICAgPHNwYW4gY2xhc3M9XCIje2Nzcy5hdHRhY2htZW50TmFtZX1cIiB0aXRsZT1cIiN7bmFtZX1cIj4je25hbWV9PC9zcGFuPlxuICAgICAgLy8gICAgIDxzcGFuIGNsYXNzPVwiI3tjc3MuYXR0YWNobWVudFNpemV9XCI+I3tzaXplfTwvc3Bhbj5cbiAgICAgIC8vICAgPC9zcGFuPlxuICAgICAgLy8gPC9kaXY+XG4gICAgICBlbGVtZW50LmFwcGVuZENoaWxkKFxuICAgICAgICBtYWtlRWxlbWVudCh7XG4gICAgICAgICAgdGFnTmFtZTogXCJkaXZcIixcbiAgICAgICAgICBjbGFzc05hbWU6IGNzcy5hdHRhY2htZW50TWV0YWRhdGFDb250YWluZXIsXG4gICAgICAgICAgY2hpbGROb2RlczogbWFrZUVsZW1lbnQoe1xuICAgICAgICAgICAgdGFnTmFtZTogXCJzcGFuXCIsXG4gICAgICAgICAgICBjbGFzc05hbWU6IGNzcy5hdHRhY2htZW50TWV0YWRhdGEsXG4gICAgICAgICAgICBjaGlsZE5vZGVzOiBbXG4gICAgICAgICAgICAgIG1ha2VFbGVtZW50KHtcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiBcInNwYW5cIixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNzcy5hdHRhY2htZW50TmFtZSxcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogdGhpcy5hdHRhY2htZW50LmdldEZpbGVuYW1lKCksXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogeyB0aXRsZTogdGhpcy5hdHRhY2htZW50LmdldEZpbGVuYW1lKCkgfSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIG1ha2VFbGVtZW50KHtcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiBcInNwYW5cIixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNzcy5hdHRhY2htZW50U2l6ZSxcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogdGhpcy5hdHRhY2htZW50LmdldEZvcm1hdHRlZEZpbGVzaXplKCksXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG5cbiAgICBoYW5kbGVFdmVudChcImNsaWNrXCIsIHsgb25FbGVtZW50OiBlbGVtZW50LCB3aXRoQ2FsbGJhY2s6IHRoaXMuZGlkQ2xpY2tUb29sYmFyIH0pXG4gICAgaGFuZGxlRXZlbnQoXCJjbGlja1wiLCB7XG4gICAgICBvbkVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICBtYXRjaGluZ1NlbGVjdG9yOiBcIltkYXRhLXRyaXgtYWN0aW9uXVwiLFxuICAgICAgd2l0aENhbGxiYWNrOiB0aGlzLmRpZENsaWNrQWN0aW9uQnV0dG9uLFxuICAgIH0pXG5cbiAgICB0cmlnZ2VyRXZlbnQoXCJ0cml4LWF0dGFjaG1lbnQtYmVmb3JlLXRvb2xiYXJcIiwgeyBvbkVsZW1lbnQ6IHRoaXMuZWxlbWVudCwgYXR0cmlidXRlczogeyB0b29sYmFyOiBlbGVtZW50LCBhdHRhY2htZW50OiB0aGlzLmF0dGFjaG1lbnQgfSB9KVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRvOiAoKSA9PiB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCksXG4gICAgICB1bmRvOiAoKSA9PiByZW1vdmVOb2RlKGVsZW1lbnQpLFxuICAgIH1cbiAgfSlcblxuICBpbnN0YWxsQ2FwdGlvbkVkaXRvciA9IHVuZG9hYmxlKCgpID0+IHtcbiAgICBjb25zdCB0ZXh0YXJlYSA9IG1ha2VFbGVtZW50KHtcbiAgICAgIHRhZ05hbWU6IFwidGV4dGFyZWFcIixcbiAgICAgIGNsYXNzTmFtZTogY3NzLmF0dGFjaG1lbnRDYXB0aW9uRWRpdG9yLFxuICAgICAgYXR0cmlidXRlczogeyBwbGFjZWhvbGRlcjogbGFuZy5jYXB0aW9uUGxhY2Vob2xkZXIgfSxcbiAgICAgIGRhdGE6IHsgdHJpeE11dGFibGU6IHRydWUgfSxcbiAgICB9KVxuICAgIHRleHRhcmVhLnZhbHVlID0gdGhpcy5hdHRhY2htZW50UGllY2UuZ2V0Q2FwdGlvbigpXG5cbiAgICBjb25zdCB0ZXh0YXJlYUNsb25lID0gdGV4dGFyZWEuY2xvbmVOb2RlKClcbiAgICB0ZXh0YXJlYUNsb25lLmNsYXNzTGlzdC5hZGQoXCJ0cml4LWF1dG9yZXNpemUtY2xvbmVcIilcbiAgICB0ZXh0YXJlYUNsb25lLnRhYkluZGV4ID0gLTFcblxuICAgIGNvbnN0IGF1dG9yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRleHRhcmVhQ2xvbmUudmFsdWUgPSB0ZXh0YXJlYS52YWx1ZVxuICAgICAgdGV4dGFyZWEuc3R5bGUuaGVpZ2h0ID0gdGV4dGFyZWFDbG9uZS5zY3JvbGxIZWlnaHQgKyBcInB4XCJcbiAgICB9XG5cbiAgICBoYW5kbGVFdmVudChcImlucHV0XCIsIHsgb25FbGVtZW50OiB0ZXh0YXJlYSwgd2l0aENhbGxiYWNrOiBhdXRvcmVzaXplIH0pXG4gICAgaGFuZGxlRXZlbnQoXCJpbnB1dFwiLCB7IG9uRWxlbWVudDogdGV4dGFyZWEsIHdpdGhDYWxsYmFjazogdGhpcy5kaWRJbnB1dENhcHRpb24gfSlcbiAgICBoYW5kbGVFdmVudChcImtleWRvd25cIiwgeyBvbkVsZW1lbnQ6IHRleHRhcmVhLCB3aXRoQ2FsbGJhY2s6IHRoaXMuZGlkS2V5RG93bkNhcHRpb24gfSlcbiAgICBoYW5kbGVFdmVudChcImNoYW5nZVwiLCB7IG9uRWxlbWVudDogdGV4dGFyZWEsIHdpdGhDYWxsYmFjazogdGhpcy5kaWRDaGFuZ2VDYXB0aW9uIH0pXG4gICAgaGFuZGxlRXZlbnQoXCJibHVyXCIsIHsgb25FbGVtZW50OiB0ZXh0YXJlYSwgd2l0aENhbGxiYWNrOiB0aGlzLmRpZEJsdXJDYXB0aW9uIH0pXG5cbiAgICBjb25zdCBmaWdjYXB0aW9uID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJmaWdjYXB0aW9uXCIpXG4gICAgY29uc3QgZWRpdGluZ0ZpZ2NhcHRpb24gPSBmaWdjYXB0aW9uLmNsb25lTm9kZSgpXG5cbiAgICByZXR1cm4ge1xuICAgICAgZG86ICgpID0+IHtcbiAgICAgICAgZmlnY2FwdGlvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcbiAgICAgICAgZWRpdGluZ0ZpZ2NhcHRpb24uYXBwZW5kQ2hpbGQodGV4dGFyZWEpXG4gICAgICAgIGVkaXRpbmdGaWdjYXB0aW9uLmFwcGVuZENoaWxkKHRleHRhcmVhQ2xvbmUpXG4gICAgICAgIGVkaXRpbmdGaWdjYXB0aW9uLmNsYXNzTGlzdC5hZGQoYCR7Y3NzLmF0dGFjaG1lbnRDYXB0aW9ufS0tZWRpdGluZ2ApXG4gICAgICAgIGZpZ2NhcHRpb24ucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWRpdGluZ0ZpZ2NhcHRpb24sIGZpZ2NhcHRpb24pXG4gICAgICAgIGF1dG9yZXNpemUoKVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVkaXRDYXB0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmVyKCgpID0+IHRleHRhcmVhLmZvY3VzKCkpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1bmRvKCkge1xuICAgICAgICByZW1vdmVOb2RlKGVkaXRpbmdGaWdjYXB0aW9uKVxuICAgICAgICBmaWdjYXB0aW9uLnN0eWxlLmRpc3BsYXkgPSBudWxsXG4gICAgICB9LFxuICAgIH1cbiAgfSlcblxuICAvLyBFdmVudCBoYW5kbGVyc1xuXG4gIGRpZENsaWNrVG9vbGJhcihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICByZXR1cm4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgfVxuXG4gIGRpZENsaWNrQWN0aW9uQnV0dG9uKGV2ZW50KSB7XG4gICAgY29uc3QgYWN0aW9uID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdHJpeC1hY3Rpb25cIilcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSBcInJlbW92ZVwiOlxuICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uYXR0YWNobWVudEVkaXRvckRpZFJlcXVlc3RSZW1vdmFsT2ZBdHRhY2htZW50KHRoaXMuYXR0YWNobWVudClcbiAgICB9XG4gIH1cblxuICBkaWRLZXlEb3duQ2FwdGlvbihldmVudCkge1xuICAgIGlmIChrZXlOYW1lc1tldmVudC5rZXlDb2RlXSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgdGhpcy5zYXZlUGVuZGluZ0NhcHRpb24oKVxuICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmF0dGFjaG1lbnRFZGl0b3JEaWRSZXF1ZXN0RGVzZWxlY3RpbmdBdHRhY2htZW50Py4odGhpcy5hdHRhY2htZW50KVxuICAgIH1cbiAgfVxuXG4gIGRpZElucHV0Q2FwdGlvbihldmVudCkge1xuICAgIHRoaXMucGVuZGluZ0NhcHRpb24gPSBldmVudC50YXJnZXQudmFsdWUucmVwbGFjZSgvXFxzL2csIFwiIFwiKS50cmltKClcbiAgfVxuXG4gIGRpZENoYW5nZUNhcHRpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5zYXZlUGVuZGluZ0NhcHRpb24oKVxuICB9XG5cbiAgZGlkQmx1ckNhcHRpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5zYXZlUGVuZGluZ0NhcHRpb24oKVxuICB9XG59XG4iLCAiaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcbmltcG9ydCBEb2N1bWVudFZpZXcgZnJvbSBcInRyaXgvdmlld3MvZG9jdW1lbnRfdmlld1wiXG5pbXBvcnQgQXR0YWNobWVudEVkaXRvckNvbnRyb2xsZXIgZnJvbSBcInRyaXgvY29udHJvbGxlcnMvYXR0YWNobWVudF9lZGl0b3JfY29udHJvbGxlclwiXG5cbmltcG9ydCB7IGRlZmVyLCBmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZSwgaGFuZGxlRXZlbnQsIGlubmVyRWxlbWVudElzQWN0aXZlIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcbmltcG9ydCB7IGF0dGFjaG1lbnRTZWxlY3RvciB9IGZyb20gXCJ0cml4L2NvbmZpZy9hdHRhY2htZW50c1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvc2l0aW9uQ29udHJvbGxlciBleHRlbmRzIEJhc2ljT2JqZWN0IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29tcG9zaXRpb24pIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5kaWRGb2N1cyA9IHRoaXMuZGlkRm9jdXMuYmluZCh0aGlzKVxuICAgIHRoaXMuZGlkQmx1ciA9IHRoaXMuZGlkQmx1ci5iaW5kKHRoaXMpXG4gICAgdGhpcy5kaWRDbGlja0F0dGFjaG1lbnQgPSB0aGlzLmRpZENsaWNrQXR0YWNobWVudC5iaW5kKHRoaXMpXG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy5jb21wb3NpdGlvbiA9IGNvbXBvc2l0aW9uXG4gICAgdGhpcy5kb2N1bWVudFZpZXcgPSBuZXcgRG9jdW1lbnRWaWV3KHRoaXMuY29tcG9zaXRpb24uZG9jdW1lbnQsIHsgZWxlbWVudDogdGhpcy5lbGVtZW50IH0pXG5cbiAgICBoYW5kbGVFdmVudChcImZvY3VzXCIsIHsgb25FbGVtZW50OiB0aGlzLmVsZW1lbnQsIHdpdGhDYWxsYmFjazogdGhpcy5kaWRGb2N1cyB9KVxuICAgIGhhbmRsZUV2ZW50KFwiYmx1clwiLCB7IG9uRWxlbWVudDogdGhpcy5lbGVtZW50LCB3aXRoQ2FsbGJhY2s6IHRoaXMuZGlkQmx1ciB9KVxuICAgIGhhbmRsZUV2ZW50KFwiY2xpY2tcIiwge1xuICAgICAgb25FbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICBtYXRjaGluZ1NlbGVjdG9yOiBcImFbY29udGVudGVkaXRhYmxlPWZhbHNlXVwiLFxuICAgICAgcHJldmVudERlZmF1bHQ6IHRydWUsXG4gICAgfSlcbiAgICBoYW5kbGVFdmVudChcIm1vdXNlZG93blwiLCB7XG4gICAgICBvbkVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAgIG1hdGNoaW5nU2VsZWN0b3I6IGF0dGFjaG1lbnRTZWxlY3RvcixcbiAgICAgIHdpdGhDYWxsYmFjazogdGhpcy5kaWRDbGlja0F0dGFjaG1lbnQsXG4gICAgfSlcbiAgICBoYW5kbGVFdmVudChcImNsaWNrXCIsIHsgb25FbGVtZW50OiB0aGlzLmVsZW1lbnQsIG1hdGNoaW5nU2VsZWN0b3I6IGBhJHthdHRhY2htZW50U2VsZWN0b3J9YCwgcHJldmVudERlZmF1bHQ6IHRydWUgfSlcbiAgfVxuXG4gIGRpZEZvY3VzKGV2ZW50KSB7XG4gICAgY29uc3QgcGVyZm9ybSA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5mb2N1c2VkKSB7XG4gICAgICAgIHRoaXMuZm9jdXNlZCA9IHRydWVcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uQ29udHJvbGxlckRpZEZvY3VzPy4oKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmJsdXJQcm9taXNlPy50aGVuKHBlcmZvcm0pIHx8IHBlcmZvcm0oKVxuICB9XG5cbiAgZGlkQmx1cihldmVudCkge1xuICAgIHRoaXMuYmx1clByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgcmV0dXJuIGRlZmVyKCgpID0+IHtcbiAgICAgICAgaWYgKCFpbm5lckVsZW1lbnRJc0FjdGl2ZSh0aGlzLmVsZW1lbnQpKSB7XG4gICAgICAgICAgdGhpcy5mb2N1c2VkID0gbnVsbFxuICAgICAgICAgIHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uQ29udHJvbGxlckRpZEJsdXI/LigpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ibHVyUHJvbWlzZSA9IG51bGxcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgZGlkQ2xpY2tBdHRhY2htZW50KGV2ZW50LCB0YXJnZXQpIHtcbiAgICBjb25zdCBhdHRhY2htZW50ID0gdGhpcy5maW5kQXR0YWNobWVudEZvckVsZW1lbnQodGFyZ2V0KVxuICAgIGNvbnN0IGVkaXRDYXB0aW9uID0gISFmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZShldmVudC50YXJnZXQsIHsgbWF0Y2hpbmdTZWxlY3RvcjogXCJmaWdjYXB0aW9uXCIgfSlcbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25Db250cm9sbGVyRGlkU2VsZWN0QXR0YWNobWVudD8uKGF0dGFjaG1lbnQsIHsgZWRpdENhcHRpb24gfSlcbiAgfVxuXG4gIGdldFNlcmlhbGl6YWJsZUVsZW1lbnQoKSB7XG4gICAgaWYgKHRoaXMuaXNFZGl0aW5nQXR0YWNobWVudCgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb2N1bWVudFZpZXcuc2hhZG93RWxlbWVudFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnJldmlzaW9uICE9PSB0aGlzLmNvbXBvc2l0aW9uLnJldmlzaW9uKSB7XG4gICAgICB0aGlzLmRvY3VtZW50Vmlldy5zZXREb2N1bWVudCh0aGlzLmNvbXBvc2l0aW9uLmRvY3VtZW50KVxuICAgICAgdGhpcy5kb2N1bWVudFZpZXcucmVuZGVyKClcbiAgICAgIHRoaXMucmV2aXNpb24gPSB0aGlzLmNvbXBvc2l0aW9uLnJldmlzaW9uXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2FuU3luY0RvY3VtZW50VmlldygpICYmICF0aGlzLmRvY3VtZW50Vmlldy5pc1N5bmNlZCgpKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkNvbnRyb2xsZXJXaWxsU3luY0RvY3VtZW50Vmlldz8uKClcbiAgICAgIHRoaXMuZG9jdW1lbnRWaWV3LnN5bmMoKVxuICAgICAgdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25Db250cm9sbGVyRGlkU3luY0RvY3VtZW50Vmlldz8uKClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25Db250cm9sbGVyRGlkUmVuZGVyPy4oKVxuICB9XG5cbiAgcmVyZW5kZXJWaWV3Rm9yT2JqZWN0KG9iamVjdCkge1xuICAgIHRoaXMuaW52YWxpZGF0ZVZpZXdGb3JPYmplY3Qob2JqZWN0KVxuICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gIH1cblxuICBpbnZhbGlkYXRlVmlld0Zvck9iamVjdChvYmplY3QpIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudFZpZXcuaW52YWxpZGF0ZVZpZXdGb3JPYmplY3Qob2JqZWN0KVxuICB9XG5cbiAgaXNWaWV3Q2FjaGluZ0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRWaWV3LmlzVmlld0NhY2hpbmdFbmFibGVkKClcbiAgfVxuXG4gIGVuYWJsZVZpZXdDYWNoaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50Vmlldy5lbmFibGVWaWV3Q2FjaGluZygpXG4gIH1cblxuICBkaXNhYmxlVmlld0NhY2hpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRWaWV3LmRpc2FibGVWaWV3Q2FjaGluZygpXG4gIH1cblxuICByZWZyZXNoVmlld0NhY2hlKCkge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50Vmlldy5nYXJiYWdlQ29sbGVjdENhY2hlZFZpZXdzKClcbiAgfVxuXG4gIC8vIEF0dGFjaG1lbnQgZWRpdG9yIG1hbmFnZW1lbnRcblxuICBpc0VkaXRpbmdBdHRhY2htZW50KCkge1xuICAgIHJldHVybiAhIXRoaXMuYXR0YWNobWVudEVkaXRvclxuICB9XG5cbiAgaW5zdGFsbEF0dGFjaG1lbnRFZGl0b3JGb3JBdHRhY2htZW50KGF0dGFjaG1lbnQsIG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcy5hdHRhY2htZW50RWRpdG9yPy5hdHRhY2htZW50ID09PSBhdHRhY2htZW50KSByZXR1cm5cbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5kb2N1bWVudFZpZXcuZmluZEVsZW1lbnRGb3JPYmplY3QoYXR0YWNobWVudClcbiAgICBpZiAoIWVsZW1lbnQpIHJldHVyblxuXG4gICAgdGhpcy51bmluc3RhbGxBdHRhY2htZW50RWRpdG9yKClcbiAgICBjb25zdCBhdHRhY2htZW50UGllY2UgPSB0aGlzLmNvbXBvc2l0aW9uLmRvY3VtZW50LmdldEF0dGFjaG1lbnRQaWVjZUZvckF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICB0aGlzLmF0dGFjaG1lbnRFZGl0b3IgPSBuZXcgQXR0YWNobWVudEVkaXRvckNvbnRyb2xsZXIoYXR0YWNobWVudFBpZWNlLCBlbGVtZW50LCB0aGlzLmVsZW1lbnQsIG9wdGlvbnMpXG4gICAgdGhpcy5hdHRhY2htZW50RWRpdG9yLmRlbGVnYXRlID0gdGhpc1xuICB9XG5cbiAgdW5pbnN0YWxsQXR0YWNobWVudEVkaXRvcigpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRhY2htZW50RWRpdG9yPy51bmluc3RhbGwoKVxuICB9XG5cbiAgLy8gQXR0YWNobWVudCBjb250cm9sbGVyIGRlbGVnYXRlXG5cbiAgZGlkVW5pbnN0YWxsQXR0YWNobWVudEVkaXRvcigpIHtcbiAgICB0aGlzLmF0dGFjaG1lbnRFZGl0b3IgPSBudWxsXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKClcbiAgfVxuXG4gIGF0dGFjaG1lbnRFZGl0b3JEaWRSZXF1ZXN0VXBkYXRpbmdBdHRyaWJ1dGVzRm9yQXR0YWNobWVudChhdHRyaWJ1dGVzLCBhdHRhY2htZW50KSB7XG4gICAgdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25Db250cm9sbGVyV2lsbFVwZGF0ZUF0dGFjaG1lbnQ/LihhdHRhY2htZW50KVxuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLnVwZGF0ZUF0dHJpYnV0ZXNGb3JBdHRhY2htZW50KGF0dHJpYnV0ZXMsIGF0dGFjaG1lbnQpXG4gIH1cblxuICBhdHRhY2htZW50RWRpdG9yRGlkUmVxdWVzdFJlbW92aW5nQXR0cmlidXRlRm9yQXR0YWNobWVudChhdHRyaWJ1dGUsIGF0dGFjaG1lbnQpIHtcbiAgICB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkNvbnRyb2xsZXJXaWxsVXBkYXRlQXR0YWNobWVudD8uKGF0dGFjaG1lbnQpXG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24ucmVtb3ZlQXR0cmlidXRlRm9yQXR0YWNobWVudChhdHRyaWJ1dGUsIGF0dGFjaG1lbnQpXG4gIH1cblxuICBhdHRhY2htZW50RWRpdG9yRGlkUmVxdWVzdFJlbW92YWxPZkF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRSZXF1ZXN0UmVtb3ZhbE9mQXR0YWNobWVudD8uKGF0dGFjaG1lbnQpXG4gIH1cblxuICBhdHRhY2htZW50RWRpdG9yRGlkUmVxdWVzdERlc2VsZWN0aW5nQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uQ29udHJvbGxlckRpZFJlcXVlc3REZXNlbGVjdGluZ0F0dGFjaG1lbnQ/LihhdHRhY2htZW50KVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIGNhblN5bmNEb2N1bWVudFZpZXcoKSB7XG4gICAgcmV0dXJuICF0aGlzLmlzRWRpdGluZ0F0dGFjaG1lbnQoKVxuICB9XG5cbiAgZmluZEF0dGFjaG1lbnRGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5kb2N1bWVudC5nZXRBdHRhY2htZW50QnlJZChwYXJzZUludChlbGVtZW50LmRhdGFzZXQudHJpeElkLCAxMCkpXG4gIH1cbn1cbiIsICJpbXBvcnQgXCJ0cml4L3ZpZXdzL29iamVjdF92aWV3XCJcbmltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xsZXIgZXh0ZW5kcyBCYXNpY09iamVjdCB7fVxuIiwgImltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5cbmltcG9ydCB7XG4gIGZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlLFxuICBub2RlSXNCbG9ja1N0YXJ0Q29tbWVudCxcbiAgbm9kZUlzRW1wdHlUZXh0Tm9kZSxcbiAgbm9ybWFsaXplU3BhY2VzLFxuICBzdW1tYXJpemVTdHJpbmdDaGFuZ2UsXG4gIHRhZ05hbWUsXG59IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5cbmNvbnN0IG11dGFibGVBdHRyaWJ1dGVOYW1lID0gXCJkYXRhLXRyaXgtbXV0YWJsZVwiXG5jb25zdCBtdXRhYmxlU2VsZWN0b3IgPSBgWyR7bXV0YWJsZUF0dHJpYnV0ZU5hbWV9XWBcblxuY29uc3Qgb3B0aW9ucyA9IHtcbiAgYXR0cmlidXRlczogdHJ1ZSxcbiAgY2hpbGRMaXN0OiB0cnVlLFxuICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICBjaGFyYWN0ZXJEYXRhT2xkVmFsdWU6IHRydWUsXG4gIHN1YnRyZWU6IHRydWUsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE11dGF0aW9uT2JzZXJ2ZXIgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KVxuICAgIHRoaXMuZGlkTXV0YXRlID0gdGhpcy5kaWRNdXRhdGUuYmluZCh0aGlzKVxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLm9ic2VydmVyID0gbmV3IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyKHRoaXMuZGlkTXV0YXRlKVxuICAgIHRoaXMuc3RhcnQoKVxuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5yZXNldCgpXG4gICAgcmV0dXJuIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQsIG9wdGlvbnMpXG4gIH1cblxuICBzdG9wKCkge1xuICAgIHJldHVybiB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKVxuICB9XG5cbiAgZGlkTXV0YXRlKG11dGF0aW9ucykge1xuICAgIHRoaXMubXV0YXRpb25zLnB1c2goLi4uQXJyYXkuZnJvbSh0aGlzLmZpbmRTaWduaWZpY2FudE11dGF0aW9ucyhtdXRhdGlvbnMpIHx8IFtdKSlcblxuICAgIGlmICh0aGlzLm11dGF0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmVsZW1lbnREaWRNdXRhdGU/Lih0aGlzLmdldE11dGF0aW9uU3VtbWFyeSgpKVxuICAgICAgcmV0dXJuIHRoaXMucmVzZXQoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICByZXNldCgpIHtcbiAgICB0aGlzLm11dGF0aW9ucyA9IFtdXG4gIH1cblxuICBmaW5kU2lnbmlmaWNhbnRNdXRhdGlvbnMobXV0YXRpb25zKSB7XG4gICAgcmV0dXJuIG11dGF0aW9ucy5maWx0ZXIoKG11dGF0aW9uKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5tdXRhdGlvbklzU2lnbmlmaWNhbnQobXV0YXRpb24pXG4gICAgfSlcbiAgfVxuXG4gIG11dGF0aW9uSXNTaWduaWZpY2FudChtdXRhdGlvbikge1xuICAgIGlmICh0aGlzLm5vZGVJc011dGFibGUobXV0YXRpb24udGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBBcnJheS5mcm9tKHRoaXMubm9kZXNNb2RpZmllZEJ5TXV0YXRpb24obXV0YXRpb24pKSkge1xuICAgICAgaWYgKHRoaXMubm9kZUlzU2lnbmlmaWNhbnQobm9kZSkpIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgbm9kZUlzU2lnbmlmaWNhbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlICE9PSB0aGlzLmVsZW1lbnQgJiYgIXRoaXMubm9kZUlzTXV0YWJsZShub2RlKSAmJiAhbm9kZUlzRW1wdHlUZXh0Tm9kZShub2RlKVxuICB9XG5cbiAgbm9kZUlzTXV0YWJsZShub2RlKSB7XG4gICAgcmV0dXJuIGZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlKG5vZGUsIHsgbWF0Y2hpbmdTZWxlY3RvcjogbXV0YWJsZVNlbGVjdG9yIH0pXG4gIH1cblxuICBub2Rlc01vZGlmaWVkQnlNdXRhdGlvbihtdXRhdGlvbikge1xuICAgIGNvbnN0IG5vZGVzID0gW11cbiAgICBzd2l0Y2ggKG11dGF0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJhdHRyaWJ1dGVzXCI6XG4gICAgICAgIGlmIChtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lICE9PSBtdXRhYmxlQXR0cmlidXRlTmFtZSkge1xuICAgICAgICAgIG5vZGVzLnB1c2gobXV0YXRpb24udGFyZ2V0KVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwiY2hhcmFjdGVyRGF0YVwiOlxuICAgICAgICAvLyBDaGFuZ2VzIHRvIHRleHQgbm9kZXMgc2hvdWxkIGNvbnNpZGVyIHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAgICBub2Rlcy5wdXNoKG11dGF0aW9uLnRhcmdldC5wYXJlbnROb2RlKVxuICAgICAgICBub2Rlcy5wdXNoKG11dGF0aW9uLnRhcmdldClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgXCJjaGlsZExpc3RcIjpcbiAgICAgICAgLy8gQ29uc2lkZXIgZWFjaCBhZGRlZCBvciByZW1vdmVkIG5vZGVcbiAgICAgICAgbm9kZXMucHVzaCguLi5BcnJheS5mcm9tKG11dGF0aW9uLmFkZGVkTm9kZXMgfHwgW10pKVxuICAgICAgICBub2Rlcy5wdXNoKC4uLkFycmF5LmZyb20obXV0YXRpb24ucmVtb3ZlZE5vZGVzIHx8IFtdKSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cblxuICBnZXRNdXRhdGlvblN1bW1hcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGV4dE11dGF0aW9uU3VtbWFyeSgpXG4gIH1cblxuICBnZXRUZXh0TXV0YXRpb25TdW1tYXJ5KCkge1xuICAgIGNvbnN0IHsgYWRkaXRpb25zLCBkZWxldGlvbnMgfSA9IHRoaXMuZ2V0VGV4dENoYW5nZXNGcm9tQ2hhcmFjdGVyRGF0YSgpXG4gICAgY29uc3QgdGV4dENoYW5nZXMgPSB0aGlzLmdldFRleHRDaGFuZ2VzRnJvbUNoaWxkTGlzdCgpXG5cbiAgICBBcnJheS5mcm9tKHRleHRDaGFuZ2VzLmFkZGl0aW9ucykuZm9yRWFjaCgoYWRkaXRpb24pID0+IHtcbiAgICAgIGlmICghQXJyYXkuZnJvbShhZGRpdGlvbnMpLmluY2x1ZGVzKGFkZGl0aW9uKSkge1xuICAgICAgICBhZGRpdGlvbnMucHVzaChhZGRpdGlvbilcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgZGVsZXRpb25zLnB1c2goLi4uQXJyYXkuZnJvbSh0ZXh0Q2hhbmdlcy5kZWxldGlvbnMgfHwgW10pKVxuXG4gICAgY29uc3Qgc3VtbWFyeSA9IHt9XG5cbiAgICBjb25zdCBhZGRlZCA9IGFkZGl0aW9ucy5qb2luKFwiXCIpXG4gICAgaWYgKGFkZGVkKSB7XG4gICAgICBzdW1tYXJ5LnRleHRBZGRlZCA9IGFkZGVkXG4gICAgfVxuXG4gICAgY29uc3QgZGVsZXRlZCA9IGRlbGV0aW9ucy5qb2luKFwiXCIpXG4gICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgIHN1bW1hcnkudGV4dERlbGV0ZWQgPSBkZWxldGVkXG4gICAgfVxuXG4gICAgcmV0dXJuIHN1bW1hcnlcbiAgfVxuXG4gIGdldE11dGF0aW9uc0J5VHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5tdXRhdGlvbnMpLmZpbHRlcigobXV0YXRpb24pID0+IG11dGF0aW9uLnR5cGUgPT09IHR5cGUpXG4gIH1cblxuICBnZXRUZXh0Q2hhbmdlc0Zyb21DaGlsZExpc3QoKSB7XG4gICAgbGV0IHRleHRBZGRlZCwgdGV4dFJlbW92ZWRcbiAgICBjb25zdCBhZGRlZE5vZGVzID0gW11cbiAgICBjb25zdCByZW1vdmVkTm9kZXMgPSBbXVxuXG4gICAgQXJyYXkuZnJvbSh0aGlzLmdldE11dGF0aW9uc0J5VHlwZShcImNoaWxkTGlzdFwiKSkuZm9yRWFjaCgobXV0YXRpb24pID0+IHtcbiAgICAgIGFkZGVkTm9kZXMucHVzaCguLi5BcnJheS5mcm9tKG11dGF0aW9uLmFkZGVkTm9kZXMgfHwgW10pKVxuICAgICAgcmVtb3ZlZE5vZGVzLnB1c2goLi4uQXJyYXkuZnJvbShtdXRhdGlvbi5yZW1vdmVkTm9kZXMgfHwgW10pKVxuICAgIH0pXG5cbiAgICBjb25zdCBzaW5nbGVCbG9ja0NvbW1lbnRSZW1vdmVkID1cbiAgICAgIGFkZGVkTm9kZXMubGVuZ3RoID09PSAwICYmIHJlbW92ZWROb2Rlcy5sZW5ndGggPT09IDEgJiYgbm9kZUlzQmxvY2tTdGFydENvbW1lbnQocmVtb3ZlZE5vZGVzWzBdKVxuXG4gICAgaWYgKHNpbmdsZUJsb2NrQ29tbWVudFJlbW92ZWQpIHtcbiAgICAgIHRleHRBZGRlZCA9IFtdXG4gICAgICB0ZXh0UmVtb3ZlZCA9IFsgXCJcXG5cIiBdXG4gICAgfSBlbHNlIHtcbiAgICAgIHRleHRBZGRlZCA9IGdldFRleHRGb3JOb2RlcyhhZGRlZE5vZGVzKVxuICAgICAgdGV4dFJlbW92ZWQgPSBnZXRUZXh0Rm9yTm9kZXMocmVtb3ZlZE5vZGVzKVxuICAgIH1cblxuICAgIGNvbnN0IGFkZGl0aW9ucyA9IHRleHRBZGRlZC5maWx0ZXIoKHRleHQsIGluZGV4KSA9PiB0ZXh0ICE9PSB0ZXh0UmVtb3ZlZFtpbmRleF0pLm1hcChub3JtYWxpemVTcGFjZXMpXG4gICAgY29uc3QgZGVsZXRpb25zID0gdGV4dFJlbW92ZWQuZmlsdGVyKCh0ZXh0LCBpbmRleCkgPT4gdGV4dCAhPT0gdGV4dEFkZGVkW2luZGV4XSkubWFwKG5vcm1hbGl6ZVNwYWNlcylcblxuICAgIHJldHVybiB7IGFkZGl0aW9ucywgZGVsZXRpb25zIH1cbiAgfVxuXG4gIGdldFRleHRDaGFuZ2VzRnJvbUNoYXJhY3RlckRhdGEoKSB7XG4gICAgbGV0IGFkZGVkLCByZW1vdmVkXG4gICAgY29uc3QgY2hhcmFjdGVyTXV0YXRpb25zID0gdGhpcy5nZXRNdXRhdGlvbnNCeVR5cGUoXCJjaGFyYWN0ZXJEYXRhXCIpXG5cbiAgICBpZiAoY2hhcmFjdGVyTXV0YXRpb25zLmxlbmd0aCkge1xuICAgICAgY29uc3Qgc3RhcnRNdXRhdGlvbiA9IGNoYXJhY3Rlck11dGF0aW9uc1swXSxcbiAgICAgICAgZW5kTXV0YXRpb24gPSBjaGFyYWN0ZXJNdXRhdGlvbnNbY2hhcmFjdGVyTXV0YXRpb25zLmxlbmd0aCAtIDFdXG5cbiAgICAgIGNvbnN0IG9sZFN0cmluZyA9IG5vcm1hbGl6ZVNwYWNlcyhzdGFydE11dGF0aW9uLm9sZFZhbHVlKVxuICAgICAgY29uc3QgbmV3U3RyaW5nID0gbm9ybWFsaXplU3BhY2VzKGVuZE11dGF0aW9uLnRhcmdldC5kYXRhKVxuICAgICAgY29uc3Qgc3VtbWFyaXplZCA9IHN1bW1hcml6ZVN0cmluZ0NoYW5nZShvbGRTdHJpbmcsIG5ld1N0cmluZylcbiAgICAgIGFkZGVkID0gc3VtbWFyaXplZC5hZGRlZFxuICAgICAgcmVtb3ZlZCA9IHN1bW1hcml6ZWQucmVtb3ZlZFxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhZGRpdGlvbnM6IGFkZGVkID8gWyBhZGRlZCBdIDogW10sXG4gICAgICBkZWxldGlvbnM6IHJlbW92ZWQgPyBbIHJlbW92ZWQgXSA6IFtdLFxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBnZXRUZXh0Rm9yTm9kZXMgPSBmdW5jdGlvbihub2RlcyA9IFtdKSB7XG4gIGNvbnN0IHRleHQgPSBbXVxuICBmb3IgKGNvbnN0IG5vZGUgb2YgQXJyYXkuZnJvbShub2RlcykpIHtcbiAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICAgIGNhc2UgTm9kZS5URVhUX05PREU6XG4gICAgICAgIHRleHQucHVzaChub2RlLmRhdGEpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFOlxuICAgICAgICBpZiAodGFnTmFtZShub2RlKSA9PT0gXCJiclwiKSB7XG4gICAgICAgICAgdGV4dC5wdXNoKFwiXFxuXCIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dC5wdXNoKC4uLkFycmF5LmZyb20oZ2V0VGV4dEZvck5vZGVzKG5vZGUuY2hpbGROb2RlcykgfHwgW10pKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiB0ZXh0XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiAgICBuby1lbXB0eSxcbiovXG5pbXBvcnQgT3BlcmF0aW9uIGZyb20gXCJ0cml4L2NvcmUvdXRpbGl0aWVzL29wZXJhdGlvblwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbGVWZXJpZmljYXRpb25PcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3RvcihmaWxlKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMuZmlsZSA9IGZpbGVcbiAgfVxuXG4gIHBlcmZvcm0oY2FsbGJhY2spIHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG5cbiAgICByZWFkZXIub25lcnJvciA9ICgpID0+IGNhbGxiYWNrKGZhbHNlKVxuXG4gICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIHJlYWRlci5vbmVycm9yID0gbnVsbFxuICAgICAgdHJ5IHtcbiAgICAgICAgcmVhZGVyLmFib3J0KClcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKHRydWUsIHRoaXMuZmlsZSlcbiAgICB9XG5cbiAgICByZXR1cm4gcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHRoaXMuZmlsZSlcbiAgfVxufVxuIiwgImltcG9ydCAqIGFzIGNvbmZpZyBmcm9tIFwidHJpeC9jb25maWdcIlxuaW1wb3J0IHsgTk9OX0JSRUFLSU5HX1NQQUNFLCBPQkpFQ1RfUkVQTEFDRU1FTlRfQ0hBUkFDVEVSLCBaRVJPX1dJRFRIX1NQQUNFIH0gZnJvbSBcInRyaXgvY29uc3RhbnRzXCJcblxuLy8gRWFjaCBzb2Z0d2FyZSBrZXlib2FyZCBvbiBBbmRyb2lkIGVtaXRzIGl0cyBvd24gc2V0IG9mIGV2ZW50cyBhbmQgc29tZSBvZiB0aGVtIGNhbiBiZSBidWdneS5cbi8vIFRoaXMgY2xhc3MgZGV0ZWN0cyB3aGVuIHNvbWUgYnVnZ3kgZXZlbnRzIGFyZSBiZWluZyBlbWl0dGVkIGFuZCBsZXRzIGtub3cgdGhlIGlucHV0IGNvbnRyb2xsZXJcbi8vIHRoYXQgdGhleSBzaG91bGQgYmUgaWdub3JlZC5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZsYWt5QW5kcm9pZEtleWJvYXJkRGV0ZWN0b3Ige1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICB9XG5cbiAgc2hvdWxkSWdub3JlKGV2ZW50KSB7XG4gICAgaWYgKCFjb25maWcuYnJvd3Nlci5zYW1zdW5nQW5kcm9pZCkgcmV0dXJuIGZhbHNlXG5cbiAgICB0aGlzLnByZXZpb3VzRXZlbnQgPSB0aGlzLmV2ZW50XG4gICAgdGhpcy5ldmVudCA9IGV2ZW50XG5cbiAgICB0aGlzLmNoZWNrU2Ftc3VuZ0tleWJvYXJkQnVnZ3lNb2RlU3RhcnQoKVxuICAgIHRoaXMuY2hlY2tTYW1zdW5nS2V5Ym9hcmRCdWdneU1vZGVFbmQoKVxuXG4gICAgcmV0dXJuIHRoaXMuYnVnZ3lNb2RlXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgLy8gVGhlIFNhbXN1bmcga2V5Ym9hcmQgb24gQW5kcm9pZCBjYW4gZW50ZXIgYSBidWdneSBzdGF0ZSBpbiB3aGljaCBpdCBlbWl0cyBhIGZsdXJyeSBvZiBjb25mdXNlZCBldmVudHMgdGhhdCxcbiAgLy8gaWYgcHJvY2Vzc2VkLCBjb3JydXB0cyB0aGUgZWRpdG9yLiBUaGUgYnVnZ3kgbW9kZSBhbHdheXMgc3RhcnRzIHdpdGggYW4gaW5zZXJ0VGV4dCBldmVudCwgcmlnaHQgYWZ0ZXIgYVxuICAvLyBrZXlkb3duIGV2ZW50IHdpdGggZm9yIGFuIFwiVW5pZGVudGlmaWVkXCIga2V5LCB3aXRoIHRoZSBzYW1lIHRleHQgYXMgdGhlIGVkaXRvciBlbGVtZW50LCBleGNlcHQgZm9yIGEgZmV3XG4gIC8vIGV4dHJhIHdoaXRlc3BhY2UsIG9yIGV4b3RpYyB1dGY4LCBjaGFyYWN0ZXJzLlxuICBjaGVja1NhbXN1bmdLZXlib2FyZEJ1Z2d5TW9kZVN0YXJ0KCkge1xuICAgIGlmICh0aGlzLmluc2VydGluZ0xvbmdUZXh0QWZ0ZXJVbmlkZW50aWZpZWRDaGFyKCkgJiYgZGlmZmVyc0luV2hpdGVzcGFjZSh0aGlzLmVsZW1lbnQuaW5uZXJUZXh0LCB0aGlzLmV2ZW50LmRhdGEpKSB7XG4gICAgICB0aGlzLmJ1Z2d5TW9kZSA9IHRydWVcbiAgICAgIHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFRoZSBmbHVycnkgb2YgYnVnZ3kgZXZlbnRzIGFyZSBhbHdheXMgaW5zZXJ0VGV4dC4gSWYgd2Ugc2VlIGFueSBvdGhlciB0eXBlLCBpdCBtZWFucyBpdCdzIG92ZXIuXG4gIGNoZWNrU2Ftc3VuZ0tleWJvYXJkQnVnZ3lNb2RlRW5kKCkge1xuICAgIGlmICh0aGlzLmJ1Z2d5TW9kZSAmJiB0aGlzLmV2ZW50LmlucHV0VHlwZSAhPT0gXCJpbnNlcnRUZXh0XCIpIHtcbiAgICAgIHRoaXMuYnVnZ3lNb2RlID0gZmFsc2VcbiAgICB9XG4gIH1cblxuICBpbnNlcnRpbmdMb25nVGV4dEFmdGVyVW5pZGVudGlmaWVkQ2hhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc0JlZm9yZUlucHV0SW5zZXJ0VGV4dCgpICYmIHRoaXMucHJldmlvdXNFdmVudFdhc1VuaWRlbnRpZmllZEtleWRvd24oKSAmJiB0aGlzLmV2ZW50LmRhdGE/Lmxlbmd0aCA+IDUwXG4gIH1cblxuICBpc0JlZm9yZUlucHV0SW5zZXJ0VGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudC50eXBlID09PSBcImJlZm9yZWlucHV0XCIgJiYgdGhpcy5ldmVudC5pbnB1dFR5cGUgPT09IFwiaW5zZXJ0VGV4dFwiXG4gIH1cblxuICBwcmV2aW91c0V2ZW50V2FzVW5pZGVudGlmaWVkS2V5ZG93bigpIHtcbiAgICByZXR1cm4gdGhpcy5wcmV2aW91c0V2ZW50Py50eXBlID09PSBcImtleWRvd25cIiAmJiB0aGlzLnByZXZpb3VzRXZlbnQ/LmtleSA9PT0gXCJVbmlkZW50aWZpZWRcIlxuICB9XG59XG5cbmNvbnN0IGRpZmZlcnNJbldoaXRlc3BhY2UgPSAodGV4dDEsIHRleHQyKSA9PiB7XG4gIHJldHVybiBub3JtYWxpemUodGV4dDEpID09PSBub3JtYWxpemUodGV4dDIpXG59XG5cbmNvbnN0IHdoaXRlU3BhY2VOb3JtYWxpemVyUmVnZXhwID0gbmV3IFJlZ0V4cChgKCR7T0JKRUNUX1JFUExBQ0VNRU5UX0NIQVJBQ1RFUn18JHtaRVJPX1dJRFRIX1NQQUNFfXwke05PTl9CUkVBS0lOR19TUEFDRX18XFxcXHMpK2AsIFwiZ1wiKVxuY29uc3Qgbm9ybWFsaXplID0gKHRleHQpID0+IHRleHQucmVwbGFjZSh3aGl0ZVNwYWNlTm9ybWFsaXplclJlZ2V4cCwgXCIgXCIpLnRyaW0oKVxuIiwgImltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5pbXBvcnQgTXV0YXRpb25PYnNlcnZlciBmcm9tIFwidHJpeC9vYnNlcnZlcnMvbXV0YXRpb25fb2JzZXJ2ZXJcIlxuaW1wb3J0IEZpbGVWZXJpZmljYXRpb25PcGVyYXRpb24gZnJvbSBcInRyaXgvb3BlcmF0aW9ucy9maWxlX3ZlcmlmaWNhdGlvbl9vcGVyYXRpb25cIlxuaW1wb3J0IEZsYWt5QW5kcm9pZEtleWJvYXJkRGV0ZWN0b3IgZnJvbSBcIi4uL21vZGVscy9mbGFreV9hbmRyb2lkX2tleWJvYXJkX2RldGVjdG9yXCJcblxuaW1wb3J0IHsgaGFuZGxlRXZlbnQsIGlubmVyRWxlbWVudElzQWN0aXZlIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5wdXRDb250cm9sbGVyIGV4dGVuZHMgQmFzaWNPYmplY3Qge1xuXG4gIHN0YXRpYyBldmVudHMgPSB7fVxuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICAgIHRoaXMubXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuZWxlbWVudClcbiAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuZGVsZWdhdGUgPSB0aGlzXG4gICAgdGhpcy5mbGFreUtleWJvYXJkRGV0ZWN0b3IgPSBuZXcgRmxha3lBbmRyb2lkS2V5Ym9hcmREZXRlY3Rvcih0aGlzLmVsZW1lbnQpXG4gICAgZm9yIChjb25zdCBldmVudE5hbWUgaW4gdGhpcy5jb25zdHJ1Y3Rvci5ldmVudHMpIHtcbiAgICAgIGhhbmRsZUV2ZW50KGV2ZW50TmFtZSwgeyBvbkVsZW1lbnQ6IHRoaXMuZWxlbWVudCwgd2l0aENhbGxiYWNrOiB0aGlzLmhhbmRsZXJGb3IoZXZlbnROYW1lKSB9KVxuICAgIH1cbiAgfVxuXG4gIGVsZW1lbnREaWRNdXRhdGUobXV0YXRpb25TdW1tYXJ5KSB7fVxuXG4gIGVkaXRvcldpbGxTeW5jRG9jdW1lbnRWaWV3KCkge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuc3RvcCgpXG4gIH1cblxuICBlZGl0b3JEaWRTeW5jRG9jdW1lbnRWaWV3KCkge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuc3RhcnQoKVxuICB9XG5cbiAgcmVxdWVzdFJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkUmVxdWVzdFJlbmRlcj8uKClcbiAgfVxuXG4gIHJlcXVlc3RSZXBhcnNlKCkge1xuICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZFJlcXVlc3RSZXBhcnNlPy4oKVxuICAgIHJldHVybiB0aGlzLnJlcXVlc3RSZW5kZXIoKVxuICB9XG5cbiAgYXR0YWNoRmlsZXMoZmlsZXMpIHtcbiAgICBjb25zdCBvcGVyYXRpb25zID0gQXJyYXkuZnJvbShmaWxlcykubWFwKChmaWxlKSA9PiBuZXcgRmlsZVZlcmlmaWNhdGlvbk9wZXJhdGlvbihmaWxlKSlcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwob3BlcmF0aW9ucykudGhlbigoZmlsZXMpID0+IHtcbiAgICAgIHRoaXMuaGFuZGxlSW5wdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxBdHRhY2hGaWxlcygpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRGaWxlcyhmaWxlcylcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgaGFuZGxlckZvcihldmVudE5hbWUpIHtcbiAgICByZXR1cm4gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVJbnB1dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCFpbm5lckVsZW1lbnRJc0FjdGl2ZSh0aGlzLmVsZW1lbnQpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5mbGFreUtleWJvYXJkRGV0ZWN0b3Iuc2hvdWxkSWdub3JlKGV2ZW50KSkgcmV0dXJuXG5cbiAgICAgICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lXG4gICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLmV2ZW50c1tldmVudE5hbWVdLmNhbGwodGhpcywgZXZlbnQpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUlucHV0KGNhbGxiYWNrKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxIYW5kbGVJbnB1dCgpXG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXMpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZEhhbmRsZUlucHV0KClcbiAgICB9XG4gIH1cblxuICBjcmVhdGVMaW5rSFRNTChocmVmLCB0ZXh0KSB7XG4gICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpXG4gICAgbGluay5ocmVmID0gaHJlZlxuICAgIGxpbmsudGV4dENvbnRlbnQgPSB0ZXh0ID8gdGV4dCA6IGhyZWZcbiAgICByZXR1cm4gbGluay5vdXRlckhUTUxcbiAgfVxufVxuXG4iLCAiaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5pbXBvcnQgVVRGMTZTdHJpbmcgZnJvbSBcInRyaXgvY29yZS91dGlsaXRpZXMvdXRmMTZfc3RyaW5nXCJcbmltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5pbXBvcnQgSW5wdXRDb250cm9sbGVyIGZyb20gXCJ0cml4L2NvbnRyb2xsZXJzL2lucHV0X2NvbnRyb2xsZXJcIlxuaW1wb3J0IERvY3VtZW50VmlldyBmcm9tIFwidHJpeC92aWV3cy9kb2N1bWVudF92aWV3XCJcbmltcG9ydCBEb2N1bWVudCBmcm9tIFwidHJpeC9tb2RlbHMvZG9jdW1lbnRcIlxuXG5pbXBvcnQge1xuICBkYXRhVHJhbnNmZXJJc1BsYWluVGV4dCxcbiAgZGF0YVRyYW5zZmVySXNXcml0YWJsZSxcbiAga2V5RXZlbnRJc0tleWJvYXJkQ29tbWFuZCxcbiAgbWFrZUVsZW1lbnQsXG4gIG9iamVjdHNBcmVFcXVhbCxcbiAgcmVtb3ZlTm9kZSxcbiAgc3F1aXNoQnJlYWthYmxlV2hpdGVzcGFjZSxcbn0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuaW1wb3J0IHsgc2VsZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIgfSBmcm9tIFwidHJpeC9vYnNlcnZlcnMvc2VsZWN0aW9uX2NoYW5nZV9vYnNlcnZlclwiXG5cbmNvbnN0IHsgYnJvd3Nlciwga2V5TmFtZXMgfSA9IGNvbmZpZ1xubGV0IHBhc3RlZEZpbGVDb3VudCA9IDBcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGV2ZWwwSW5wdXRDb250cm9sbGVyIGV4dGVuZHMgSW5wdXRDb250cm9sbGVyIHtcblxuICBzdGF0aWMgZXZlbnRzID0ge1xuICAgIGtleWRvd24oZXZlbnQpIHtcbiAgICAgIGlmICghdGhpcy5pc0NvbXBvc2luZygpKSB7XG4gICAgICAgIHRoaXMucmVzZXRJbnB1dFN1bW1hcnkoKVxuICAgICAgfVxuICAgICAgdGhpcy5pbnB1dFN1bW1hcnkuZGlkSW5wdXQgPSB0cnVlXG5cbiAgICAgIGNvbnN0IGtleU5hbWUgPSBrZXlOYW1lc1tldmVudC5rZXlDb2RlXVxuICAgICAgaWYgKGtleU5hbWUpIHtcbiAgICAgICAgbGV0IGNvbnRleHQgPSB0aGlzLmtleXNcblxuICAgICAgICA7WyBcImN0cmxcIiwgXCJhbHRcIiwgXCJzaGlmdFwiLCBcIm1ldGFcIiBdLmZvckVhY2goKG1vZGlmaWVyKSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50W2Ake21vZGlmaWVyfUtleWBdKSB7XG4gICAgICAgICAgICBpZiAobW9kaWZpZXIgPT09IFwiY3RybFwiKSB7XG4gICAgICAgICAgICAgIG1vZGlmaWVyID0gXCJjb250cm9sXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0Py5bbW9kaWZpZXJdXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmIChjb250ZXh0Py5ba2V5TmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuc2V0SW5wdXRTdW1tYXJ5KHsga2V5TmFtZSB9KVxuICAgICAgICAgIHNlbGVjdGlvbkNoYW5nZU9ic2VydmVyLnJlc2V0KClcbiAgICAgICAgICBjb250ZXh0W2tleU5hbWVdLmNhbGwodGhpcywgZXZlbnQpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGtleUV2ZW50SXNLZXlib2FyZENvbW1hbmQoZXZlbnQpKSB7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZXZlbnQua2V5Q29kZSkudG9Mb3dlckNhc2UoKVxuICAgICAgICBpZiAoY2hhcmFjdGVyKSB7XG4gICAgICAgICAgY29uc3Qga2V5cyA9IFsgXCJhbHRcIiwgXCJzaGlmdFwiIF0ubWFwKChtb2RpZmllcikgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50W2Ake21vZGlmaWVyfUtleWBdKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtb2RpZmllclxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLmZpbHRlcihrZXkgPT4ga2V5KVxuICAgICAgICAgIGtleXMucHVzaChjaGFyYWN0ZXIpXG4gICAgICAgICAgaWYgKHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZFJlY2VpdmVLZXlib2FyZENvbW1hbmQoa2V5cykpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAga2V5cHJlc3MoZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLmlucHV0U3VtbWFyeS5ldmVudE5hbWUgIT0gbnVsbCkgcmV0dXJuXG4gICAgICBpZiAoZXZlbnQubWV0YUtleSkgcmV0dXJuXG4gICAgICBpZiAoZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYWx0S2V5KSByZXR1cm5cblxuICAgICAgY29uc3Qgc3RyaW5nID0gc3RyaW5nRnJvbUtleUV2ZW50KGV2ZW50KVxuICAgICAgaWYgKHN0cmluZykge1xuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRTdHJpbmcoc3RyaW5nKVxuICAgICAgICByZXR1cm4gdGhpcy5zZXRJbnB1dFN1bW1hcnkoeyB0ZXh0QWRkZWQ6IHN0cmluZywgZGlkRGVsZXRlOiB0aGlzLnNlbGVjdGlvbklzRXhwYW5kZWQoKSB9KVxuICAgICAgfVxuICAgIH0sXG5cbiAgICB0ZXh0SW5wdXQoZXZlbnQpIHtcbiAgICAgIC8vIEhhbmRsZSBhdXRvY2FwaXRhbGl6YXRpb25cbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gZXZlbnRcbiAgICAgIGNvbnN0IHsgdGV4dEFkZGVkIH0gPSB0aGlzLmlucHV0U3VtbWFyeVxuICAgICAgaWYgKHRleHRBZGRlZCAmJiB0ZXh0QWRkZWQgIT09IGRhdGEgJiYgdGV4dEFkZGVkLnRvVXBwZXJDYXNlKCkgPT09IGRhdGEpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKVxuICAgICAgICB0aGlzLnNldFNlbGVjdGVkUmFuZ2UoWyByYW5nZVswXSwgcmFuZ2VbMV0gKyB0ZXh0QWRkZWQubGVuZ3RoIF0pXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRTdHJpbmcoZGF0YSlcbiAgICAgICAgdGhpcy5zZXRJbnB1dFN1bW1hcnkoeyB0ZXh0QWRkZWQ6IGRhdGEgfSlcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0ZWRSYW5nZShyYW5nZSlcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZHJhZ2VudGVyKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfSxcblxuICAgIGRyYWdzdGFydChldmVudCkge1xuICAgICAgdGhpcy5zZXJpYWxpemVTZWxlY3Rpb25Ub0RhdGFUcmFuc2ZlcihldmVudC5kYXRhVHJhbnNmZXIpXG4gICAgICB0aGlzLmRyYWdnZWRSYW5nZSA9IHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpXG4gICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkU3RhcnREcmFnPy4oKVxuICAgIH0sXG5cbiAgICBkcmFnb3ZlcihldmVudCkge1xuICAgICAgaWYgKHRoaXMuZHJhZ2dlZFJhbmdlIHx8IHRoaXMuY2FuQWNjZXB0RGF0YVRyYW5zZmVyKGV2ZW50LmRhdGFUcmFuc2ZlcikpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICBjb25zdCBkcmFnZ2luZ1BvaW50ID0geyB4OiBldmVudC5jbGllbnRYLCB5OiBldmVudC5jbGllbnRZIH1cbiAgICAgICAgaWYgKCFvYmplY3RzQXJlRXF1YWwoZHJhZ2dpbmdQb2ludCwgdGhpcy5kcmFnZ2luZ1BvaW50KSkge1xuICAgICAgICAgIHRoaXMuZHJhZ2dpbmdQb2ludCA9IGRyYWdnaW5nUG9pbnRcbiAgICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkUmVjZWl2ZURyYWdPdmVyUG9pbnQ/Lih0aGlzLmRyYWdnaW5nUG9pbnQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZHJhZ2VuZChldmVudCkge1xuICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkQ2FuY2VsRHJhZz8uKClcbiAgICAgIHRoaXMuZHJhZ2dlZFJhbmdlID0gbnVsbFxuICAgICAgdGhpcy5kcmFnZ2luZ1BvaW50ID0gbnVsbFxuICAgIH0sXG5cbiAgICBkcm9wKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBjb25zdCBmaWxlcyA9IGV2ZW50LmRhdGFUcmFuc2Zlcj8uZmlsZXNcbiAgICAgIGNvbnN0IGRvY3VtZW50SlNPTiA9IGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwiYXBwbGljYXRpb24veC10cml4LWRvY3VtZW50XCIpXG5cbiAgICAgIGNvbnN0IHBvaW50ID0geyB4OiBldmVudC5jbGllbnRYLCB5OiBldmVudC5jbGllbnRZIH1cbiAgICAgIHRoaXMucmVzcG9uZGVyPy5zZXRMb2NhdGlvblJhbmdlRnJvbVBvaW50UmFuZ2UocG9pbnQpXG5cbiAgICAgIGlmIChmaWxlcz8ubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYXR0YWNoRmlsZXMoZmlsZXMpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZHJhZ2dlZFJhbmdlKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxNb3ZlVGV4dCgpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5tb3ZlVGV4dEZyb21SYW5nZSh0aGlzLmRyYWdnZWRSYW5nZSlcbiAgICAgICAgdGhpcy5kcmFnZ2VkUmFuZ2UgPSBudWxsXG4gICAgICAgIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICB9IGVsc2UgaWYgKGRvY3VtZW50SlNPTikge1xuICAgICAgICBjb25zdCBkb2N1bWVudCA9IERvY3VtZW50LmZyb21KU09OU3RyaW5nKGRvY3VtZW50SlNPTilcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/Lmluc2VydERvY3VtZW50KGRvY3VtZW50KVxuICAgICAgICB0aGlzLnJlcXVlc3RSZW5kZXIoKVxuICAgICAgfVxuXG4gICAgICB0aGlzLmRyYWdnZWRSYW5nZSA9IG51bGxcbiAgICAgIHRoaXMuZHJhZ2dpbmdQb2ludCA9IG51bGxcbiAgICB9LFxuXG4gICAgY3V0KGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5yZXNwb25kZXI/LnNlbGVjdGlvbklzRXhwYW5kZWQoKSkge1xuICAgICAgICBpZiAodGhpcy5zZXJpYWxpemVTZWxlY3Rpb25Ub0RhdGFUcmFuc2ZlcihldmVudC5jbGlwYm9hcmREYXRhKSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxDdXRUZXh0KClcbiAgICAgICAgdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpXG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY29weShldmVudCkge1xuICAgICAgaWYgKHRoaXMucmVzcG9uZGVyPy5zZWxlY3Rpb25Jc0V4cGFuZGVkKCkpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VyaWFsaXplU2VsZWN0aW9uVG9EYXRhVHJhbnNmZXIoZXZlbnQuY2xpcGJvYXJkRGF0YSkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcGFzdGUoZXZlbnQpIHtcbiAgICAgIGNvbnN0IGNsaXBib2FyZCA9IGV2ZW50LmNsaXBib2FyZERhdGEgfHwgZXZlbnQudGVzdENsaXBib2FyZERhdGFcbiAgICAgIGNvbnN0IHBhc3RlID0geyBjbGlwYm9hcmQgfVxuXG4gICAgICBpZiAoIWNsaXBib2FyZCB8fCBwYXN0ZUV2ZW50SXNDcmlwcGxlZFNhZmFyaUhUTUxQYXN0ZShldmVudCkpIHtcbiAgICAgICAgdGhpcy5nZXRQYXN0ZWRIVE1MVXNpbmdIaWRkZW5FbGVtZW50KChodG1sKSA9PiB7XG4gICAgICAgICAgcGFzdGUudHlwZSA9IFwidGV4dC9odG1sXCJcbiAgICAgICAgICBwYXN0ZS5odG1sID0gaHRtbFxuICAgICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQYXN0ZShwYXN0ZSlcbiAgICAgICAgICB0aGlzLnJlc3BvbmRlcj8uaW5zZXJ0SFRNTChwYXN0ZS5odG1sKVxuICAgICAgICAgIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZFBhc3RlKHBhc3RlKVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgaHJlZiA9IGNsaXBib2FyZC5nZXREYXRhKFwiVVJMXCIpXG4gICAgICBjb25zdCBodG1sID0gY2xpcGJvYXJkLmdldERhdGEoXCJ0ZXh0L2h0bWxcIilcbiAgICAgIGNvbnN0IG5hbWUgPSBjbGlwYm9hcmQuZ2V0RGF0YShcInB1YmxpYy51cmwtbmFtZVwiKVxuXG4gICAgICBpZiAoaHJlZikge1xuICAgICAgICBsZXQgc3RyaW5nXG4gICAgICAgIHBhc3RlLnR5cGUgPSBcInRleHQvaHRtbFwiXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgc3RyaW5nID0gc3F1aXNoQnJlYWthYmxlV2hpdGVzcGFjZShuYW1lKS50cmltKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJpbmcgPSBocmVmXG4gICAgICAgIH1cbiAgICAgICAgcGFzdGUuaHRtbCA9IHRoaXMuY3JlYXRlTGlua0hUTUwoaHJlZiwgc3RyaW5nKVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGFzdGUocGFzdGUpXG4gICAgICAgIHRoaXMuc2V0SW5wdXRTdW1tYXJ5KHsgdGV4dEFkZGVkOiBzdHJpbmcsIGRpZERlbGV0ZTogdGhpcy5zZWxlY3Rpb25Jc0V4cGFuZGVkKCkgfSlcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/Lmluc2VydEhUTUwocGFzdGUuaHRtbClcbiAgICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyKClcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkUGFzdGUocGFzdGUpXG4gICAgICB9IGVsc2UgaWYgKGRhdGFUcmFuc2ZlcklzUGxhaW5UZXh0KGNsaXBib2FyZCkpIHtcbiAgICAgICAgcGFzdGUudHlwZSA9IFwidGV4dC9wbGFpblwiXG4gICAgICAgIHBhc3RlLnN0cmluZyA9IGNsaXBib2FyZC5nZXREYXRhKFwidGV4dC9wbGFpblwiKVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGFzdGUocGFzdGUpXG4gICAgICAgIHRoaXMuc2V0SW5wdXRTdW1tYXJ5KHsgdGV4dEFkZGVkOiBwYXN0ZS5zdHJpbmcsIGRpZERlbGV0ZTogdGhpcy5zZWxlY3Rpb25Jc0V4cGFuZGVkKCkgfSlcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/Lmluc2VydFN0cmluZyhwYXN0ZS5zdHJpbmcpXG4gICAgICAgIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZFBhc3RlKHBhc3RlKVxuICAgICAgfSBlbHNlIGlmIChodG1sKSB7XG4gICAgICAgIHBhc3RlLnR5cGUgPSBcInRleHQvaHRtbFwiXG4gICAgICAgIHBhc3RlLmh0bWwgPSBodG1sXG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQYXN0ZShwYXN0ZSlcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/Lmluc2VydEhUTUwocGFzdGUuaHRtbClcbiAgICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyKClcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkUGFzdGUocGFzdGUpXG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmZyb20oY2xpcGJvYXJkLnR5cGVzKS5pbmNsdWRlcyhcIkZpbGVzXCIpKSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBjbGlwYm9hcmQuaXRlbXM/LlswXT8uZ2V0QXNGaWxlPy4oKVxuICAgICAgICBpZiAoZmlsZSkge1xuICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbkZvckZpbGUoZmlsZSlcbiAgICAgICAgICBpZiAoIWZpbGUubmFtZSAmJiBleHRlbnNpb24pIHtcbiAgICAgICAgICAgIGZpbGUubmFtZSA9IGBwYXN0ZWQtZmlsZS0keysrcGFzdGVkRmlsZUNvdW50fS4ke2V4dGVuc2lvbn1gXG4gICAgICAgICAgfVxuICAgICAgICAgIHBhc3RlLnR5cGUgPSBcIkZpbGVcIlxuICAgICAgICAgIHBhc3RlLmZpbGUgPSBmaWxlXG4gICAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyV2lsbEF0dGFjaEZpbGVzKClcbiAgICAgICAgICB0aGlzLnJlc3BvbmRlcj8uaW5zZXJ0RmlsZShwYXN0ZS5maWxlKVxuICAgICAgICAgIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkUGFzdGUocGFzdGUpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIH0sXG5cbiAgICBjb21wb3NpdGlvbnN0YXJ0KGV2ZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRDb21wb3NpdGlvbklucHV0KCkuc3RhcnQoZXZlbnQuZGF0YSlcbiAgICB9LFxuXG4gICAgY29tcG9zaXRpb251cGRhdGUoZXZlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldENvbXBvc2l0aW9uSW5wdXQoKS51cGRhdGUoZXZlbnQuZGF0YSlcbiAgICB9LFxuXG4gICAgY29tcG9zaXRpb25lbmQoZXZlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldENvbXBvc2l0aW9uSW5wdXQoKS5lbmQoZXZlbnQuZGF0YSlcbiAgICB9LFxuXG4gICAgYmVmb3JlaW5wdXQoZXZlbnQpIHtcbiAgICAgIHRoaXMuaW5wdXRTdW1tYXJ5LmRpZElucHV0ID0gdHJ1ZVxuICAgIH0sXG5cbiAgICBpbnB1dChldmVudCkge1xuICAgICAgdGhpcy5pbnB1dFN1bW1hcnkuZGlkSW5wdXQgPSB0cnVlXG4gICAgICByZXR1cm4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICB9LFxuICB9XG5cbiAgc3RhdGljIGtleXMgPSB7XG4gICAgYmFja3NwYWNlKGV2ZW50KSB7XG4gICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIsIGV2ZW50KVxuICAgIH0sXG5cbiAgICBkZWxldGUoZXZlbnQpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtVHlwaW5nKClcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUluRGlyZWN0aW9uKFwiZm9yd2FyZFwiLCBldmVudClcbiAgICB9LFxuXG4gICAgcmV0dXJuKGV2ZW50KSB7XG4gICAgICB0aGlzLnNldElucHV0U3VtbWFyeSh7IHByZWZlckRvY3VtZW50OiB0cnVlIH0pXG4gICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICByZXR1cm4gdGhpcy5yZXNwb25kZXI/Lmluc2VydExpbmVCcmVhaygpXG4gICAgfSxcblxuICAgIHRhYihldmVudCkge1xuICAgICAgaWYgKHRoaXMucmVzcG9uZGVyPy5jYW5JbmNyZWFzZU5lc3RpbmdMZXZlbCgpKSB7XG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbmNyZWFzZU5lc3RpbmdMZXZlbCgpXG4gICAgICAgIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbGVmdChldmVudCkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uSXNJbkN1cnNvclRhcmdldCgpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5tb3ZlQ3Vyc29ySW5EaXJlY3Rpb24oXCJiYWNrd2FyZFwiKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICByaWdodChldmVudCkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uSXNJbkN1cnNvclRhcmdldCgpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5tb3ZlQ3Vyc29ySW5EaXJlY3Rpb24oXCJmb3J3YXJkXCIpXG4gICAgICB9XG4gICAgfSxcblxuICAgIGNvbnRyb2w6IHtcbiAgICAgIGQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyV2lsbFBlcmZvcm1UeXBpbmcoKVxuICAgICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImZvcndhcmRcIiwgZXZlbnQpXG4gICAgICB9LFxuXG4gICAgICBoKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtVHlwaW5nKClcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlSW5EaXJlY3Rpb24oXCJiYWNrd2FyZFwiLCBldmVudClcbiAgICAgIH0sXG5cbiAgICAgIG8oZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRTdHJpbmcoXCJcXG5cIiwgeyB1cGRhdGVQb3NpdGlvbjogZmFsc2UgfSlcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICB9LFxuICAgIH0sXG5cbiAgICBzaGlmdDoge1xuICAgICAgcmV0dXJuKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtVHlwaW5nKClcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/Lmluc2VydFN0cmluZyhcIlxcblwiKVxuICAgICAgICB0aGlzLnJlcXVlc3RSZW5kZXIoKVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB9LFxuXG4gICAgICB0YWIoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMucmVzcG9uZGVyPy5jYW5EZWNyZWFzZU5lc3RpbmdMZXZlbCgpKSB7XG4gICAgICAgICAgdGhpcy5yZXNwb25kZXI/LmRlY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgICAgICAgICB0aGlzLnJlcXVlc3RSZW5kZXIoKVxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgbGVmdChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25Jc0luQ3Vyc29yVGFyZ2V0KCkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXhwYW5kU2VsZWN0aW9uSW5EaXJlY3Rpb24oXCJiYWNrd2FyZFwiKVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICByaWdodChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25Jc0luQ3Vyc29yVGFyZ2V0KCkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXhwYW5kU2VsZWN0aW9uSW5EaXJlY3Rpb24oXCJmb3J3YXJkXCIpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcblxuICAgIGFsdDoge1xuICAgICAgYmFja3NwYWNlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuc2V0SW5wdXRTdW1tYXJ5KHsgcHJlZmVyRG9jdW1lbnQ6IGZhbHNlIH0pXG4gICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICB9LFxuICAgIH0sXG5cbiAgICBtZXRhOiB7XG4gICAgICBiYWNrc3BhY2UoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5zZXRJbnB1dFN1bW1hcnkoeyBwcmVmZXJEb2N1bWVudDogZmFsc2UgfSlcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtVHlwaW5nKClcbiAgICAgIH0sXG4gICAgfSxcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLnJlc2V0SW5wdXRTdW1tYXJ5KClcbiAgfVxuXG4gIHNldElucHV0U3VtbWFyeShzdW1tYXJ5ID0ge30pIHtcbiAgICB0aGlzLmlucHV0U3VtbWFyeS5ldmVudE5hbWUgPSB0aGlzLmV2ZW50TmFtZVxuICAgIGZvciAoY29uc3Qga2V5IGluIHN1bW1hcnkpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gc3VtbWFyeVtrZXldXG4gICAgICB0aGlzLmlucHV0U3VtbWFyeVtrZXldID0gdmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRTdW1tYXJ5XG4gIH1cblxuICByZXNldElucHV0U3VtbWFyeSgpIHtcbiAgICB0aGlzLmlucHV0U3VtbWFyeSA9IHt9XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnJlc2V0SW5wdXRTdW1tYXJ5KClcbiAgICByZXR1cm4gc2VsZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIucmVzZXQoKVxuICB9XG5cbiAgLy8gTXV0YXRpb24gb2JzZXJ2ZXIgZGVsZWdhdGVcblxuICBlbGVtZW50RGlkTXV0YXRlKG11dGF0aW9uU3VtbWFyeSkge1xuICAgIGlmICh0aGlzLmlzQ29tcG9zaW5nKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJEaWRBbGxvd1VuaGFuZGxlZElucHV0Py4oKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVJbnB1dChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMubXV0YXRpb25Jc1NpZ25pZmljYW50KG11dGF0aW9uU3VtbWFyeSkpIHtcbiAgICAgICAgICBpZiAodGhpcy5tdXRhdGlvbklzRXhwZWN0ZWQobXV0YXRpb25TdW1tYXJ5KSkge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyKClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UmVwYXJzZSgpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlc2V0KClcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgbXV0YXRpb25Jc0V4cGVjdGVkKHsgdGV4dEFkZGVkLCB0ZXh0RGVsZXRlZCB9KSB7XG4gICAgaWYgKHRoaXMuaW5wdXRTdW1tYXJ5LnByZWZlckRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IG11dGF0aW9uQWRkaXRpb25NYXRjaGVzU3VtbWFyeSA9XG4gICAgICB0ZXh0QWRkZWQgIT0gbnVsbCA/IHRleHRBZGRlZCA9PT0gdGhpcy5pbnB1dFN1bW1hcnkudGV4dEFkZGVkIDogIXRoaXMuaW5wdXRTdW1tYXJ5LnRleHRBZGRlZFxuICAgIGNvbnN0IG11dGF0aW9uRGVsZXRpb25NYXRjaGVzU3VtbWFyeSA9XG4gICAgICB0ZXh0RGVsZXRlZCAhPSBudWxsID8gdGhpcy5pbnB1dFN1bW1hcnkuZGlkRGVsZXRlIDogIXRoaXMuaW5wdXRTdW1tYXJ5LmRpZERlbGV0ZVxuXG4gICAgY29uc3QgdW5leHBlY3RlZE5ld2xpbmVBZGRpdGlvbiA9IFsgXCJcXG5cIiwgXCIgXFxuXCIgXS5pbmNsdWRlcyh0ZXh0QWRkZWQpICYmICFtdXRhdGlvbkFkZGl0aW9uTWF0Y2hlc1N1bW1hcnlcbiAgICBjb25zdCB1bmV4cGVjdGVkTmV3bGluZURlbGV0aW9uID0gdGV4dERlbGV0ZWQgPT09IFwiXFxuXCIgJiYgIW11dGF0aW9uRGVsZXRpb25NYXRjaGVzU3VtbWFyeVxuICAgIGNvbnN0IHNpbmdsZVVuZXhwZWN0ZWROZXdsaW5lID1cbiAgICAgIHVuZXhwZWN0ZWROZXdsaW5lQWRkaXRpb24gJiYgIXVuZXhwZWN0ZWROZXdsaW5lRGVsZXRpb24gfHxcbiAgICAgIHVuZXhwZWN0ZWROZXdsaW5lRGVsZXRpb24gJiYgIXVuZXhwZWN0ZWROZXdsaW5lQWRkaXRpb25cblxuICAgIGlmIChzaW5nbGVVbmV4cGVjdGVkTmV3bGluZSkge1xuICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKVxuICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHVuZXhwZWN0ZWROZXdsaW5lQWRkaXRpb24gPyB0ZXh0QWRkZWQucmVwbGFjZSgvXFxuJC8sIFwiXCIpLmxlbmd0aCB8fCAtMSA6IHRleHRBZGRlZD8ubGVuZ3RoIHx8IDFcbiAgICAgICAgaWYgKHRoaXMucmVzcG9uZGVyPy5wb3NpdGlvbklzQmxvY2tCcmVhayhyYW5nZVsxXSArIG9mZnNldCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG11dGF0aW9uQWRkaXRpb25NYXRjaGVzU3VtbWFyeSAmJiBtdXRhdGlvbkRlbGV0aW9uTWF0Y2hlc1N1bW1hcnlcbiAgfVxuXG4gIG11dGF0aW9uSXNTaWduaWZpY2FudChtdXRhdGlvblN1bW1hcnkpIHtcbiAgICBjb25zdCB0ZXh0Q2hhbmdlZCA9IE9iamVjdC5rZXlzKG11dGF0aW9uU3VtbWFyeSkubGVuZ3RoID4gMFxuICAgIGNvbnN0IGNvbXBvc2VkRW1wdHlTdHJpbmcgPSB0aGlzLmNvbXBvc2l0aW9uSW5wdXQ/LmdldEVuZERhdGEoKSA9PT0gXCJcIlxuICAgIHJldHVybiB0ZXh0Q2hhbmdlZCB8fCAhY29tcG9zZWRFbXB0eVN0cmluZ1xuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIGdldENvbXBvc2l0aW9uSW5wdXQoKSB7XG4gICAgaWYgKHRoaXMuaXNDb21wb3NpbmcoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb25JbnB1dFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbXBvc2l0aW9uSW5wdXQgPSBuZXcgQ29tcG9zaXRpb25JbnB1dCh0aGlzKVxuICAgIH1cbiAgfVxuXG4gIGlzQ29tcG9zaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uSW5wdXQgJiYgIXRoaXMuY29tcG9zaXRpb25JbnB1dC5pc0VuZGVkKClcbiAgfVxuXG4gIGRlbGV0ZUluRGlyZWN0aW9uKGRpcmVjdGlvbiwgZXZlbnQpIHtcbiAgICBpZiAodGhpcy5yZXNwb25kZXI/LmRlbGV0ZUluRGlyZWN0aW9uKGRpcmVjdGlvbikgPT09IGZhbHNlKSB7XG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0UmVuZGVyKClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0SW5wdXRTdW1tYXJ5KHsgZGlkRGVsZXRlOiB0cnVlIH0pXG4gICAgfVxuICB9XG5cbiAgc2VyaWFsaXplU2VsZWN0aW9uVG9EYXRhVHJhbnNmZXIoZGF0YVRyYW5zZmVyKSB7XG4gICAgaWYgKCFkYXRhVHJhbnNmZXJJc1dyaXRhYmxlKGRhdGFUcmFuc2ZlcikpIHJldHVyblxuICAgIGNvbnN0IGRvY3VtZW50ID0gdGhpcy5yZXNwb25kZXI/LmdldFNlbGVjdGVkRG9jdW1lbnQoKS50b1NlcmlhbGl6YWJsZURvY3VtZW50KClcblxuICAgIGRhdGFUcmFuc2Zlci5zZXREYXRhKFwiYXBwbGljYXRpb24veC10cml4LWRvY3VtZW50XCIsIEpTT04uc3RyaW5naWZ5KGRvY3VtZW50KSlcbiAgICBkYXRhVHJhbnNmZXIuc2V0RGF0YShcInRleHQvaHRtbFwiLCBEb2N1bWVudFZpZXcucmVuZGVyKGRvY3VtZW50KS5pbm5lckhUTUwpXG4gICAgZGF0YVRyYW5zZmVyLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIGRvY3VtZW50LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxuJC8sIFwiXCIpKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBjYW5BY2NlcHREYXRhVHJhbnNmZXIoZGF0YVRyYW5zZmVyKSB7XG4gICAgY29uc3QgdHlwZXMgPSB7fVxuICAgIEFycmF5LmZyb20oZGF0YVRyYW5zZmVyPy50eXBlcyB8fCBbXSkuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgdHlwZXNbdHlwZV0gPSB0cnVlXG4gICAgfSlcbiAgICByZXR1cm4gdHlwZXMuRmlsZXMgfHwgdHlwZXNbXCJhcHBsaWNhdGlvbi94LXRyaXgtZG9jdW1lbnRcIl0gfHwgdHlwZXNbXCJ0ZXh0L2h0bWxcIl0gfHwgdHlwZXNbXCJ0ZXh0L3BsYWluXCJdXG4gIH1cblxuICBnZXRQYXN0ZWRIVE1MVXNpbmdIaWRkZW5FbGVtZW50KGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRSYW5nZSA9IHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpXG5cbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICBsZWZ0OiBgJHt3aW5kb3cucGFnZVhPZmZzZXR9cHhgLFxuICAgICAgdG9wOiBgJHt3aW5kb3cucGFnZVlPZmZzZXR9cHhgLFxuICAgICAgb3BhY2l0eTogMCxcbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50ID0gbWFrZUVsZW1lbnQoeyBzdHlsZSwgdGFnTmFtZTogXCJkaXZcIiwgZWRpdGFibGU6IHRydWUgfSlcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpXG4gICAgZWxlbWVudC5mb2N1cygpXG5cbiAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGNvbnN0IGh0bWwgPSBlbGVtZW50LmlubmVySFRNTFxuICAgICAgcmVtb3ZlTm9kZShlbGVtZW50KVxuICAgICAgdGhpcy5zZXRTZWxlY3RlZFJhbmdlKHNlbGVjdGVkUmFuZ2UpXG4gICAgICByZXR1cm4gY2FsbGJhY2soaHRtbClcbiAgICB9KVxuICB9XG59XG5cbkxldmVsMElucHV0Q29udHJvbGxlci5wcm94eU1ldGhvZChcInJlc3BvbmRlcj8uZ2V0U2VsZWN0ZWRSYW5nZVwiKVxuTGV2ZWwwSW5wdXRDb250cm9sbGVyLnByb3h5TWV0aG9kKFwicmVzcG9uZGVyPy5zZXRTZWxlY3RlZFJhbmdlXCIpXG5MZXZlbDBJbnB1dENvbnRyb2xsZXIucHJveHlNZXRob2QoXCJyZXNwb25kZXI/LmV4cGFuZFNlbGVjdGlvbkluRGlyZWN0aW9uXCIpXG5MZXZlbDBJbnB1dENvbnRyb2xsZXIucHJveHlNZXRob2QoXCJyZXNwb25kZXI/LnNlbGVjdGlvbklzSW5DdXJzb3JUYXJnZXRcIilcbkxldmVsMElucHV0Q29udHJvbGxlci5wcm94eU1ldGhvZChcInJlc3BvbmRlcj8uc2VsZWN0aW9uSXNFeHBhbmRlZFwiKVxuXG5jb25zdCBleHRlbnNpb25Gb3JGaWxlID0gKGZpbGUpID0+IGZpbGUudHlwZT8ubWF0Y2goL1xcLyhcXHcrKSQvKT8uWzFdXG5cbmNvbnN0IGhhc1N0cmluZ0NvZGVQb2ludEF0ID0gISFcIiBcIi5jb2RlUG9pbnRBdD8uKDApXG5cbmNvbnN0IHN0cmluZ0Zyb21LZXlFdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmIChldmVudC5rZXkgJiYgaGFzU3RyaW5nQ29kZVBvaW50QXQgJiYgZXZlbnQua2V5LmNvZGVQb2ludEF0KDApID09PSBldmVudC5rZXlDb2RlKSB7XG4gICAgcmV0dXJuIGV2ZW50LmtleVxuICB9IGVsc2Uge1xuICAgIGxldCBjb2RlXG4gICAgaWYgKGV2ZW50LndoaWNoID09PSBudWxsKSB7XG4gICAgICBjb2RlID0gZXZlbnQua2V5Q29kZVxuICAgIH0gZWxzZSBpZiAoZXZlbnQud2hpY2ggIT09IDAgJiYgZXZlbnQuY2hhckNvZGUgIT09IDApIHtcbiAgICAgIGNvZGUgPSBldmVudC5jaGFyQ29kZVxuICAgIH1cblxuICAgIGlmIChjb2RlICE9IG51bGwgJiYga2V5TmFtZXNbY29kZV0gIT09IFwiZXNjYXBlXCIpIHtcbiAgICAgIHJldHVybiBVVEYxNlN0cmluZy5mcm9tQ29kZXBvaW50cyhbIGNvZGUgXSkudG9TdHJpbmcoKVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBwYXN0ZUV2ZW50SXNDcmlwcGxlZFNhZmFyaUhUTUxQYXN0ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGNvbnN0IHBhc3RlID0gZXZlbnQuY2xpcGJvYXJkRGF0YVxuICBpZiAocGFzdGUpIHtcbiAgICBpZiAocGFzdGUudHlwZXMuaW5jbHVkZXMoXCJ0ZXh0L2h0bWxcIikpIHtcbiAgICAgIC8vIEFuc3dlciBpcyB5ZXMgaWYgdGhlcmUncyBhbnkgcG9zc2liaWxpdHkgb2YgUGFzdGUgYW5kIE1hdGNoIFN0eWxlIGluIFNhZmFyaSxcbiAgICAgIC8vIHdoaWNoIGlzIG5lYXJseSBpbXBvc3NpYmxlIHRvIGRldGVjdCBjb25maWRlbnRseTogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE3NDE2NVxuICAgICAgZm9yIChjb25zdCB0eXBlIG9mIHBhc3RlLnR5cGVzKSB7XG4gICAgICAgIGNvbnN0IGhhc1Bhc3RlYm9hcmRGbGF2b3IgPSAvXkNvcmVQYXN0ZWJvYXJkRmxhdm9yVHlwZS8udGVzdCh0eXBlKVxuICAgICAgICBjb25zdCBoYXNSZWFkYWJsZUR5bmFtaWNEYXRhID0gL15keW5cXC4vLnRlc3QodHlwZSkgJiYgcGFzdGUuZ2V0RGF0YSh0eXBlKVxuICAgICAgICBjb25zdCBtaWdodEJlUGFzdGVBbmRNYXRjaFN0eWxlID0gaGFzUGFzdGVib2FyZEZsYXZvciB8fCBoYXNSZWFkYWJsZUR5bmFtaWNEYXRhXG4gICAgICAgIGlmIChtaWdodEJlUGFzdGVBbmRNYXRjaFN0eWxlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGlzRXh0ZXJuYWxIVE1MUGFzdGUgPSBwYXN0ZS50eXBlcy5pbmNsdWRlcyhcImNvbS5hcHBsZS53ZWJhcmNoaXZlXCIpXG4gICAgICBjb25zdCBpc0V4dGVybmFsUmljaFRleHRQYXN0ZSA9IHBhc3RlLnR5cGVzLmluY2x1ZGVzKFwiY29tLmFwcGxlLmZsYXQtcnRmZFwiKVxuICAgICAgcmV0dXJuIGlzRXh0ZXJuYWxIVE1MUGFzdGUgfHwgaXNFeHRlcm5hbFJpY2hUZXh0UGFzdGVcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgQ29tcG9zaXRpb25JbnB1dCBleHRlbmRzIEJhc2ljT2JqZWN0IHtcbiAgY29uc3RydWN0b3IoaW5wdXRDb250cm9sbGVyKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMuaW5wdXRDb250cm9sbGVyID0gaW5wdXRDb250cm9sbGVyXG4gICAgdGhpcy5yZXNwb25kZXIgPSB0aGlzLmlucHV0Q29udHJvbGxlci5yZXNwb25kZXJcbiAgICB0aGlzLmRlbGVnYXRlID0gdGhpcy5pbnB1dENvbnRyb2xsZXIuZGVsZWdhdGVcbiAgICB0aGlzLmlucHV0U3VtbWFyeSA9IHRoaXMuaW5wdXRDb250cm9sbGVyLmlucHV0U3VtbWFyeVxuICAgIHRoaXMuZGF0YSA9IHt9XG4gIH1cblxuICBzdGFydChkYXRhKSB7XG4gICAgdGhpcy5kYXRhLnN0YXJ0ID0gZGF0YVxuXG4gICAgaWYgKHRoaXMuaXNTaWduaWZpY2FudCgpKSB7XG4gICAgICBpZiAodGhpcy5pbnB1dFN1bW1hcnkuZXZlbnROYW1lID09PSBcImtleXByZXNzXCIgJiYgdGhpcy5pbnB1dFN1bW1hcnkudGV4dEFkZGVkKSB7XG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5kZWxldGVJbkRpcmVjdGlvbihcImxlZnRcIilcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbklzRXhwYW5kZWQoKSkge1xuICAgICAgICB0aGlzLmluc2VydFBsYWNlaG9sZGVyKClcbiAgICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyKClcbiAgICAgIH1cblxuICAgICAgdGhpcy5yYW5nZSA9IHRoaXMucmVzcG9uZGVyPy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICB9XG4gIH1cblxuICB1cGRhdGUoZGF0YSkge1xuICAgIHRoaXMuZGF0YS51cGRhdGUgPSBkYXRhXG5cbiAgICBpZiAodGhpcy5pc1NpZ25pZmljYW50KCkpIHtcbiAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5zZWxlY3RQbGFjZWhvbGRlcigpXG4gICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgdGhpcy5mb3JnZXRQbGFjZWhvbGRlcigpXG4gICAgICAgIHRoaXMucmFuZ2UgPSByYW5nZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVuZChkYXRhKSB7XG4gICAgdGhpcy5kYXRhLmVuZCA9IGRhdGFcblxuICAgIGlmICh0aGlzLmlzU2lnbmlmaWNhbnQoKSkge1xuICAgICAgdGhpcy5mb3JnZXRQbGFjZWhvbGRlcigpXG5cbiAgICAgIGlmICh0aGlzLmNhbkFwcGx5VG9Eb2N1bWVudCgpKSB7XG4gICAgICAgIHRoaXMuc2V0SW5wdXRTdW1tYXJ5KHsgcHJlZmVyRG9jdW1lbnQ6IHRydWUsIGRpZElucHV0OiBmYWxzZSB9KVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5zZXRTZWxlY3RlZFJhbmdlKHRoaXMucmFuZ2UpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRTdHJpbmcodGhpcy5kYXRhLmVuZClcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5zZXRTZWxlY3RlZFJhbmdlKHRoaXMucmFuZ2VbMF0gKyB0aGlzLmRhdGEuZW5kLmxlbmd0aClcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLnN0YXJ0ICE9IG51bGwgfHwgdGhpcy5kYXRhLnVwZGF0ZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdFJlcGFyc2UoKVxuICAgICAgICByZXR1cm4gdGhpcy5pbnB1dENvbnRyb2xsZXIucmVzZXQoKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnB1dENvbnRyb2xsZXIucmVzZXQoKVxuICAgIH1cbiAgfVxuXG4gIGdldEVuZERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5lbmRcbiAgfVxuXG4gIGlzRW5kZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW5kRGF0YSgpICE9IG51bGxcbiAgfVxuXG4gIGlzU2lnbmlmaWNhbnQoKSB7XG4gICAgaWYgKGJyb3dzZXIuY29tcG9zZXNFeGlzdGluZ1RleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmlucHV0U3VtbWFyeS5kaWRJbnB1dFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBjYW5BcHBseVRvRG9jdW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5zdGFydD8ubGVuZ3RoID09PSAwICYmIHRoaXMuZGF0YS5lbmQ/Lmxlbmd0aCA+IDAgJiYgdGhpcy5yYW5nZVxuICB9XG59XG5cbkNvbXBvc2l0aW9uSW5wdXQucHJveHlNZXRob2QoXCJpbnB1dENvbnRyb2xsZXIuc2V0SW5wdXRTdW1tYXJ5XCIpXG5Db21wb3NpdGlvbklucHV0LnByb3h5TWV0aG9kKFwiaW5wdXRDb250cm9sbGVyLnJlcXVlc3RSZW5kZXJcIilcbkNvbXBvc2l0aW9uSW5wdXQucHJveHlNZXRob2QoXCJpbnB1dENvbnRyb2xsZXIucmVxdWVzdFJlcGFyc2VcIilcbkNvbXBvc2l0aW9uSW5wdXQucHJveHlNZXRob2QoXCJyZXNwb25kZXI/LnNlbGVjdGlvbklzRXhwYW5kZWRcIilcbkNvbXBvc2l0aW9uSW5wdXQucHJveHlNZXRob2QoXCJyZXNwb25kZXI/Lmluc2VydFBsYWNlaG9sZGVyXCIpXG5Db21wb3NpdGlvbklucHV0LnByb3h5TWV0aG9kKFwicmVzcG9uZGVyPy5zZWxlY3RQbGFjZWhvbGRlclwiKVxuQ29tcG9zaXRpb25JbnB1dC5wcm94eU1ldGhvZChcInJlc3BvbmRlcj8uZm9yZ2V0UGxhY2Vob2xkZXJcIilcbiIsICJpbXBvcnQgeyBnZXRBbGxBdHRyaWJ1dGVOYW1lcywgc2hvdWxkUmVuZGVySW5tbWVkaWF0ZWx5VG9EZWFsV2l0aElPU0RpY3RhdGlvbiwgc3F1aXNoQnJlYWthYmxlV2hpdGVzcGFjZSB9IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5pbXBvcnQgSW5wdXRDb250cm9sbGVyIGZyb20gXCJ0cml4L2NvbnRyb2xsZXJzL2lucHV0X2NvbnRyb2xsZXJcIlxuaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5cbmltcG9ydCB7IGRhdGFUcmFuc2ZlcklzTXNPZmZpY2VQYXN0ZSwgZGF0YVRyYW5zZmVySXNQbGFpblRleHQsIGtleUV2ZW50SXNLZXlib2FyZENvbW1hbmQsIG9iamVjdHNBcmVFcXVhbCB9IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5cbmltcG9ydCB7IHNlbGVjdGlvbkNoYW5nZU9ic2VydmVyIH0gZnJvbSBcInRyaXgvb2JzZXJ2ZXJzL3NlbGVjdGlvbl9jaGFuZ2Vfb2JzZXJ2ZXJcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMZXZlbDJJbnB1dENvbnRyb2xsZXIgZXh0ZW5kcyBJbnB1dENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcbiAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcylcbiAgfVxuXG4gIHN0YXRpYyBldmVudHMgPSB7XG4gICAga2V5ZG93bihldmVudCkge1xuICAgICAgaWYgKGtleUV2ZW50SXNLZXlib2FyZENvbW1hbmQoZXZlbnQpKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBrZXlib2FyZENvbW1hbmRGcm9tS2V5RXZlbnQoZXZlbnQpXG4gICAgICAgIGlmICh0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJEaWRSZWNlaXZlS2V5Ym9hcmRDb21tYW5kKGNvbW1hbmQpKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbmFtZSA9IGV2ZW50LmtleVxuICAgICAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgbmFtZSArPSBcIitBbHRcIlxuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgIG5hbWUgKz0gXCIrU2hpZnRcIlxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmNvbnN0cnVjdG9yLmtleXNbbmFtZV1cbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy53aXRoRXZlbnQoZXZlbnQsIGhhbmRsZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gSGFuZGxlIHBhc3RlIGV2ZW50IHRvIHdvcmsgYXJvdW5kIGJlZm9yZWlucHV0Lmluc2VydEZyb21QYXN0ZSBicm93c2VyIGJ1Z3MuXG4gICAgLy8gU2FmZSB0byByZW1vdmUgZWFjaCBjb25kaXRpb24gb25jZSBmaXhlZCB1cHN0cmVhbS5cbiAgICBwYXN0ZShldmVudCkge1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE5NDkyMVxuICAgICAgbGV0IHBhc3RlXG4gICAgICBjb25zdCBocmVmID0gZXZlbnQuY2xpcGJvYXJkRGF0YT8uZ2V0RGF0YShcIlVSTFwiKVxuICAgICAgaWYgKHBhc3RlRXZlbnRIYXNGaWxlc09ubHkoZXZlbnQpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0YWNoRmlsZXMoZXZlbnQuY2xpcGJvYXJkRGF0YS5maWxlcylcblxuICAgICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD05MzQ0NDhcbiAgICAgIH0gZWxzZSBpZiAocGFzdGVFdmVudEhhc1BsYWluVGV4dE9ubHkoZXZlbnQpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgcGFzdGUgPSB7XG4gICAgICAgICAgdHlwZTogXCJ0ZXh0L3BsYWluXCIsXG4gICAgICAgICAgc3RyaW5nOiBldmVudC5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpLFxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQYXN0ZShwYXN0ZSlcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/Lmluc2VydFN0cmluZyhwYXN0ZS5zdHJpbmcpXG4gICAgICAgIHRoaXMucmVuZGVyKClcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZFBhc3RlKHBhc3RlKVxuXG4gICAgICAgIC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xOTY3MDJcbiAgICAgIH0gZWxzZSBpZiAoaHJlZikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHBhc3RlID0ge1xuICAgICAgICAgIHR5cGU6IFwidGV4dC9odG1sXCIsXG4gICAgICAgICAgaHRtbDogdGhpcy5jcmVhdGVMaW5rSFRNTChocmVmKSxcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGFzdGUocGFzdGUpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRIVE1MKHBhc3RlLmh0bWwpXG4gICAgICAgIHRoaXMucmVuZGVyKClcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZFBhc3RlKHBhc3RlKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBiZWZvcmVpbnB1dChldmVudCkge1xuICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMuY29uc3RydWN0b3IuaW5wdXRUeXBlc1tldmVudC5pbnB1dFR5cGVdXG5cbiAgICAgIGNvbnN0IGltbW1lZGlhdGVSZW5kZXIgPSBzaG91bGRSZW5kZXJJbm1tZWRpYXRlbHlUb0RlYWxXaXRoSU9TRGljdGF0aW9uKGV2ZW50KVxuXG4gICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLndpdGhFdmVudChldmVudCwgaGFuZGxlcilcblxuICAgICAgICBpZiAoIWltbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICB0aGlzLnNjaGVkdWxlUmVuZGVyKClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaW1tbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICB0aGlzLnJlbmRlcigpXG4gICAgICB9XG4gICAgfSxcblxuICAgIGlucHV0KGV2ZW50KSB7XG4gICAgICBzZWxlY3Rpb25DaGFuZ2VPYnNlcnZlci5yZXNldCgpXG4gICAgfSxcblxuICAgIGRyYWdzdGFydChldmVudCkge1xuICAgICAgaWYgKHRoaXMucmVzcG9uZGVyPy5zZWxlY3Rpb25Db250YWluc0F0dGFjaG1lbnRzKCkpIHtcbiAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJhcHBsaWNhdGlvbi94LXRyaXgtZHJhZ2dpbmdcIiwgdHJ1ZSlcblxuICAgICAgICB0aGlzLmRyYWdnaW5nID0ge1xuICAgICAgICAgIHJhbmdlOiB0aGlzLnJlc3BvbmRlcj8uZ2V0U2VsZWN0ZWRSYW5nZSgpLFxuICAgICAgICAgIHBvaW50OiBwb2ludEZyb21FdmVudChldmVudCksXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZHJhZ2VudGVyKGV2ZW50KSB7XG4gICAgICBpZiAoZHJhZ0V2ZW50SGFzRmlsZXMoZXZlbnQpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZHJhZ292ZXIoZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLmRyYWdnaW5nKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludEZyb21FdmVudChldmVudClcbiAgICAgICAgaWYgKCFvYmplY3RzQXJlRXF1YWwocG9pbnQsIHRoaXMuZHJhZ2dpbmcucG9pbnQpKSB7XG4gICAgICAgICAgdGhpcy5kcmFnZ2luZy5wb2ludCA9IHBvaW50XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5zZXRMb2NhdGlvblJhbmdlRnJvbVBvaW50UmFuZ2UocG9pbnQpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZHJhZ0V2ZW50SGFzRmlsZXMoZXZlbnQpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZHJvcChldmVudCkge1xuICAgICAgaWYgKHRoaXMuZHJhZ2dpbmcpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsTW92ZVRleHQoKVxuICAgICAgICB0aGlzLnJlc3BvbmRlcj8ubW92ZVRleHRGcm9tUmFuZ2UodGhpcy5kcmFnZ2luZy5yYW5nZSlcbiAgICAgICAgdGhpcy5kcmFnZ2luZyA9IG51bGxcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NoZWR1bGVSZW5kZXIoKVxuICAgICAgfSBlbHNlIGlmIChkcmFnRXZlbnRIYXNGaWxlcyhldmVudCkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50RnJvbUV2ZW50KGV2ZW50KVxuICAgICAgICB0aGlzLnJlc3BvbmRlcj8uc2V0TG9jYXRpb25SYW5nZUZyb21Qb2ludFJhbmdlKHBvaW50KVxuICAgICAgICByZXR1cm4gdGhpcy5hdHRhY2hGaWxlcyhldmVudC5kYXRhVHJhbnNmZXIuZmlsZXMpXG4gICAgICB9XG4gICAgfSxcblxuICAgIGRyYWdlbmQoKSB7XG4gICAgICBpZiAodGhpcy5kcmFnZ2luZykge1xuICAgICAgICB0aGlzLnJlc3BvbmRlcj8uc2V0U2VsZWN0ZWRSYW5nZSh0aGlzLmRyYWdnaW5nLnJhbmdlKVxuICAgICAgICB0aGlzLmRyYWdnaW5nID0gbnVsbFxuICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wb3NpdGlvbmVuZChldmVudCkge1xuICAgICAgaWYgKHRoaXMuY29tcG9zaW5nKSB7XG4gICAgICAgIHRoaXMuY29tcG9zaW5nID0gZmFsc2VcbiAgICAgICAgaWYgKCFjb25maWcuYnJvd3Nlci5yZWNlbnRBbmRyb2lkKSB0aGlzLnNjaGVkdWxlUmVuZGVyKClcbiAgICAgIH1cbiAgICB9LFxuICB9XG5cbiAgc3RhdGljIGtleXMgPSB7XG4gICAgQXJyb3dMZWZ0KCkge1xuICAgICAgaWYgKHRoaXMucmVzcG9uZGVyPy5zaG91bGRNYW5hZ2VNb3ZpbmdDdXJzb3JJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpKSB7XG4gICAgICAgIHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25kZXI/Lm1vdmVDdXJzb3JJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpXG4gICAgICB9XG4gICAgfSxcblxuICAgIEFycm93UmlnaHQoKSB7XG4gICAgICBpZiAodGhpcy5yZXNwb25kZXI/LnNob3VsZE1hbmFnZU1vdmluZ0N1cnNvckluRGlyZWN0aW9uKFwiZm9yd2FyZFwiKSkge1xuICAgICAgICB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5tb3ZlQ3Vyc29ySW5EaXJlY3Rpb24oXCJmb3J3YXJkXCIpXG4gICAgICB9XG4gICAgfSxcblxuICAgIEJhY2tzcGFjZSgpIHtcbiAgICAgIGlmICh0aGlzLnJlc3BvbmRlcj8uc2hvdWxkTWFuYWdlRGVsZXRpbmdJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpKSB7XG4gICAgICAgIHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5kZWxldGVJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpXG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gICAgICB9XG4gICAgfSxcblxuICAgIFRhYigpIHtcbiAgICAgIGlmICh0aGlzLnJlc3BvbmRlcj8uY2FuSW5jcmVhc2VOZXN0aW5nTGV2ZWwoKSkge1xuICAgICAgICB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/LmluY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJUYWIrU2hpZnRcIigpIHtcbiAgICAgIGlmICh0aGlzLnJlc3BvbmRlcj8uY2FuRGVjcmVhc2VOZXN0aW5nTGV2ZWwoKSkge1xuICAgICAgICB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/LmRlY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKClcbiAgICAgIH1cbiAgICB9LFxuICB9XG5cbiAgc3RhdGljIGlucHV0VHlwZXMgPSB7XG4gICAgZGVsZXRlQnlDb21wb3NpdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUluRGlyZWN0aW9uKFwiYmFja3dhcmRcIiwgeyByZWNvcmRVbmRvRW50cnk6IGZhbHNlIH0pXG4gICAgfSxcblxuICAgIGRlbGV0ZUJ5Q3V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlSW5EaXJlY3Rpb24oXCJiYWNrd2FyZFwiKVxuICAgIH0sXG5cbiAgICBkZWxldGVCeURyYWcoKSB7XG4gICAgICB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIHJldHVybiB0aGlzLndpdGhUYXJnZXRET01SYW5nZShmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kZWxldGVCeURyYWdSYW5nZSA9IHRoaXMucmVzcG9uZGVyPy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIGRlbGV0ZUNvbXBvc2l0aW9uVGV4dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUluRGlyZWN0aW9uKFwiYmFja3dhcmRcIiwgeyByZWNvcmRVbmRvRW50cnk6IGZhbHNlIH0pXG4gICAgfSxcblxuICAgIGRlbGV0ZUNvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpXG4gICAgfSxcblxuICAgIGRlbGV0ZUNvbnRlbnRCYWNrd2FyZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUluRGlyZWN0aW9uKFwiYmFja3dhcmRcIilcbiAgICB9LFxuXG4gICAgZGVsZXRlQ29udGVudEZvcndhcmQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImZvcndhcmRcIilcbiAgICB9LFxuXG4gICAgZGVsZXRlRW50aXJlU29mdExpbmUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImZvcndhcmRcIilcbiAgICB9LFxuXG4gICAgZGVsZXRlSGFyZExpbmVCYWNrd2FyZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUluRGlyZWN0aW9uKFwiYmFja3dhcmRcIilcbiAgICB9LFxuXG4gICAgZGVsZXRlSGFyZExpbmVGb3J3YXJkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlSW5EaXJlY3Rpb24oXCJmb3J3YXJkXCIpXG4gICAgfSxcblxuICAgIGRlbGV0ZVNvZnRMaW5lQmFja3dhcmQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpXG4gICAgfSxcblxuICAgIGRlbGV0ZVNvZnRMaW5lRm9yd2FyZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUluRGlyZWN0aW9uKFwiZm9yd2FyZFwiKVxuICAgIH0sXG5cbiAgICBkZWxldGVXb3JkQmFja3dhcmQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpXG4gICAgfSxcblxuICAgIGRlbGV0ZVdvcmRGb3J3YXJkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlSW5EaXJlY3Rpb24oXCJmb3J3YXJkXCIpXG4gICAgfSxcblxuICAgIGZvcm1hdEJhY2tDb2xvcigpIHtcbiAgICAgIHJldHVybiB0aGlzLmFjdGl2YXRlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJiYWNrZ3JvdW5kQ29sb3JcIiwgdGhpcy5ldmVudC5kYXRhKVxuICAgIH0sXG5cbiAgICBmb3JtYXRCb2xkKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJib2xkXCIpXG4gICAgfSxcblxuICAgIGZvcm1hdEZvbnRDb2xvcigpIHtcbiAgICAgIHJldHVybiB0aGlzLmFjdGl2YXRlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJjb2xvclwiLCB0aGlzLmV2ZW50LmRhdGEpXG4gICAgfSxcblxuICAgIGZvcm1hdEZvbnROYW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChcImZvbnRcIiwgdGhpcy5ldmVudC5kYXRhKVxuICAgIH0sXG5cbiAgICBmb3JtYXRJbmRlbnQoKSB7XG4gICAgICBpZiAodGhpcy5yZXNwb25kZXI/LmNhbkluY3JlYXNlTmVzdGluZ0xldmVsKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlc3BvbmRlcj8uaW5jcmVhc2VOZXN0aW5nTGV2ZWwoKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBmb3JtYXRJdGFsaWMoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b2dnbGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChcIml0YWxpY1wiKVxuICAgIH0sXG5cbiAgICBmb3JtYXRKdXN0aWZ5Q2VudGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJqdXN0aWZ5Q2VudGVyXCIpXG4gICAgfSxcblxuICAgIGZvcm1hdEp1c3RpZnlGdWxsKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJqdXN0aWZ5RnVsbFwiKVxuICAgIH0sXG5cbiAgICBmb3JtYXRKdXN0aWZ5TGVmdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvZ2dsZUF0dHJpYnV0ZUlmU3VwcG9ydGVkKFwianVzdGlmeUxlZnRcIilcbiAgICB9LFxuXG4gICAgZm9ybWF0SnVzdGlmeVJpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJqdXN0aWZ5UmlnaHRcIilcbiAgICB9LFxuXG4gICAgZm9ybWF0T3V0ZGVudCgpIHtcbiAgICAgIGlmICh0aGlzLnJlc3BvbmRlcj8uY2FuRGVjcmVhc2VOZXN0aW5nTGV2ZWwoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoVGFyZ2V0RE9NUmFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5kZWNyZWFzZU5lc3RpbmdMZXZlbCgpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcblxuICAgIGZvcm1hdFJlbW92ZSgpIHtcbiAgICAgIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZU5hbWUgaW4gdGhpcy5yZXNwb25kZXI/LmdldEN1cnJlbnRBdHRyaWJ1dGVzKCkpIHtcbiAgICAgICAgICB0aGlzLnJlc3BvbmRlcj8ucmVtb3ZlQ3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG5cbiAgICBmb3JtYXRTZXRCbG9ja1RleHREaXJlY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5hY3RpdmF0ZUF0dHJpYnV0ZUlmU3VwcG9ydGVkKFwiYmxvY2tEaXJcIiwgdGhpcy5ldmVudC5kYXRhKVxuICAgIH0sXG5cbiAgICBmb3JtYXRTZXRJbmxpbmVUZXh0RGlyZWN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChcInRleHREaXJcIiwgdGhpcy5ldmVudC5kYXRhKVxuICAgIH0sXG5cbiAgICBmb3JtYXRTdHJpa2VUaHJvdWdoKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJzdHJpa2VcIilcbiAgICB9LFxuXG4gICAgZm9ybWF0U3Vic2NyaXB0KCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJzdWJcIilcbiAgICB9LFxuXG4gICAgZm9ybWF0U3VwZXJzY3JpcHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b2dnbGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChcInN1cFwiKVxuICAgIH0sXG5cbiAgICBmb3JtYXRVbmRlcmxpbmUoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b2dnbGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChcInVuZGVybGluZVwiKVxuICAgIH0sXG5cbiAgICBoaXN0b3J5UmVkbygpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVJlZG8oKVxuICAgIH0sXG5cbiAgICBoaXN0b3J5VW5kbygpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVVuZG8oKVxuICAgIH0sXG5cbiAgICBpbnNlcnRDb21wb3NpdGlvblRleHQoKSB7XG4gICAgICB0aGlzLmNvbXBvc2luZyA9IHRydWVcbiAgICAgIHJldHVybiB0aGlzLmluc2VydFN0cmluZyh0aGlzLmV2ZW50LmRhdGEpXG4gICAgfSxcblxuICAgIGluc2VydEZyb21Db21wb3NpdGlvbigpIHtcbiAgICAgIHRoaXMuY29tcG9zaW5nID0gZmFsc2VcbiAgICAgIHJldHVybiB0aGlzLmluc2VydFN0cmluZyh0aGlzLmV2ZW50LmRhdGEpXG4gICAgfSxcblxuICAgIGluc2VydEZyb21Ecm9wKCkge1xuICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmRlbGV0ZUJ5RHJhZ1JhbmdlXG4gICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgdGhpcy5kZWxldGVCeURyYWdSYW5nZSA9IG51bGxcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyV2lsbE1vdmVUZXh0KClcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlc3BvbmRlcj8ubW92ZVRleHRGcm9tUmFuZ2UocmFuZ2UpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcblxuICAgIGluc2VydEZyb21QYXN0ZSgpIHtcbiAgICAgIGNvbnN0IHsgZGF0YVRyYW5zZmVyIH0gPSB0aGlzLmV2ZW50XG4gICAgICBjb25zdCBwYXN0ZSA9IHsgZGF0YVRyYW5zZmVyIH1cblxuICAgICAgY29uc3QgaHJlZiA9IGRhdGFUcmFuc2Zlci5nZXREYXRhKFwiVVJMXCIpXG4gICAgICBjb25zdCBodG1sID0gZGF0YVRyYW5zZmVyLmdldERhdGEoXCJ0ZXh0L2h0bWxcIilcblxuICAgICAgaWYgKGhyZWYpIHtcbiAgICAgICAgbGV0IHN0cmluZ1xuICAgICAgICB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgcGFzdGUudHlwZSA9IFwidGV4dC9odG1sXCJcbiAgICAgICAgY29uc3QgbmFtZSA9IGRhdGFUcmFuc2Zlci5nZXREYXRhKFwicHVibGljLnVybC1uYW1lXCIpXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgc3RyaW5nID0gc3F1aXNoQnJlYWthYmxlV2hpdGVzcGFjZShuYW1lKS50cmltKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJpbmcgPSBocmVmXG4gICAgICAgIH1cbiAgICAgICAgcGFzdGUuaHRtbCA9IHRoaXMuY3JlYXRlTGlua0hUTUwoaHJlZiwgc3RyaW5nKVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGFzdGUocGFzdGUpXG4gICAgICAgIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlc3BvbmRlcj8uaW5zZXJ0SFRNTChwYXN0ZS5odG1sKVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyID0gKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJEaWRQYXN0ZShwYXN0ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkYXRhVHJhbnNmZXJJc1BsYWluVGV4dChkYXRhVHJhbnNmZXIpKSB7XG4gICAgICAgIHBhc3RlLnR5cGUgPSBcInRleHQvcGxhaW5cIlxuICAgICAgICBwYXN0ZS5zdHJpbmcgPSBkYXRhVHJhbnNmZXIuZ2V0RGF0YShcInRleHQvcGxhaW5cIilcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyV2lsbFBhc3RlKHBhc3RlKVxuICAgICAgICB0aGlzLndpdGhUYXJnZXRET01SYW5nZShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25kZXI/Lmluc2VydFN0cmluZyhwYXN0ZS5zdHJpbmcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5hZnRlclJlbmRlciA9ICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkUGFzdGUocGFzdGUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzc2FibGVGaWxlUGFzdGUodGhpcy5ldmVudCkpIHtcbiAgICAgICAgcGFzdGUudHlwZSA9IFwiRmlsZVwiXG4gICAgICAgIHBhc3RlLmZpbGUgPSBkYXRhVHJhbnNmZXIuZmlsZXNbMF1cbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyV2lsbFBhc3RlKHBhc3RlKVxuICAgICAgICB0aGlzLndpdGhUYXJnZXRET01SYW5nZShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25kZXI/Lmluc2VydEZpbGUocGFzdGUuZmlsZSlcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyID0gKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJEaWRQYXN0ZShwYXN0ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChodG1sKSB7XG4gICAgICAgIHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICBwYXN0ZS50eXBlID0gXCJ0ZXh0L2h0bWxcIlxuICAgICAgICBwYXN0ZS5odG1sID0gaHRtbFxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGFzdGUocGFzdGUpXG4gICAgICAgIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlc3BvbmRlcj8uaW5zZXJ0SFRNTChwYXN0ZS5odG1sKVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyID0gKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJEaWRQYXN0ZShwYXN0ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBpbnNlcnRGcm9tWWFuaygpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc2VydFN0cmluZyh0aGlzLmV2ZW50LmRhdGEpXG4gICAgfSxcblxuICAgIGluc2VydExpbmVCcmVhaygpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc2VydFN0cmluZyhcIlxcblwiKVxuICAgIH0sXG5cbiAgICBpbnNlcnRMaW5rKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChcImhyZWZcIiwgdGhpcy5ldmVudC5kYXRhKVxuICAgIH0sXG5cbiAgICBpbnNlcnRPcmRlcmVkTGlzdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvZ2dsZUF0dHJpYnV0ZUlmU3VwcG9ydGVkKFwibnVtYmVyXCIpXG4gICAgfSxcblxuICAgIGluc2VydFBhcmFncmFwaCgpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtVHlwaW5nKClcbiAgICAgIHJldHVybiB0aGlzLndpdGhUYXJnZXRET01SYW5nZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRMaW5lQnJlYWsoKVxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgaW5zZXJ0UmVwbGFjZW1lbnRUZXh0KCkge1xuICAgICAgY29uc3QgcmVwbGFjZW1lbnQgPSB0aGlzLmV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwidGV4dC9wbGFpblwiKVxuICAgICAgY29uc3QgZG9tUmFuZ2UgPSB0aGlzLmV2ZW50LmdldFRhcmdldFJhbmdlcygpWzBdXG5cbiAgICAgIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGRvbVJhbmdlLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaW5zZXJ0U3RyaW5nKHJlcGxhY2VtZW50LCB7IHVwZGF0ZVBvc2l0aW9uOiBmYWxzZSB9KVxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgaW5zZXJ0VGV4dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc2VydFN0cmluZyh0aGlzLmV2ZW50LmRhdGEgfHwgdGhpcy5ldmVudC5kYXRhVHJhbnNmZXI/LmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpKVxuICAgIH0sXG5cbiAgICBpbnNlcnRUcmFuc3Bvc2UoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnRTdHJpbmcodGhpcy5ldmVudC5kYXRhKVxuICAgIH0sXG5cbiAgICBpbnNlcnRVbm9yZGVyZWRMaXN0KCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJidWxsZXRcIilcbiAgICB9LFxuICB9XG5cbiAgZWxlbWVudERpZE11dGF0ZSgpIHtcbiAgICBpZiAodGhpcy5zY2hlZHVsZWRSZW5kZXIpIHtcbiAgICAgIGlmICh0aGlzLmNvbXBvc2luZykge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkQWxsb3dVbmhhbmRsZWRJbnB1dD8uKClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVwYXJzZSgpXG4gICAgfVxuICB9XG5cbiAgc2NoZWR1bGVSZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NoZWR1bGVkUmVuZGVyID8gdGhpcy5zY2hlZHVsZWRSZW5kZXIgOiB0aGlzLnNjaGVkdWxlZFJlbmRlciA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnJlbmRlcilcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlZFJlbmRlcilcbiAgICB0aGlzLnNjaGVkdWxlZFJlbmRlciA9IG51bGxcbiAgICBpZiAoIXRoaXMuY29tcG9zaW5nKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlPy5yZW5kZXIoKVxuICAgIH1cbiAgICB0aGlzLmFmdGVyUmVuZGVyPy4oKVxuICAgIHRoaXMuYWZ0ZXJSZW5kZXIgPSBudWxsXG4gIH1cblxuICByZXBhcnNlKCkge1xuICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5yZXBhcnNlKClcbiAgfVxuXG4gIC8vIFJlc3BvbmRlciBoZWxwZXJzXG5cbiAgaW5zZXJ0U3RyaW5nKHN0cmluZyA9IFwiXCIsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgcmV0dXJuIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRTdHJpbmcoc3RyaW5nLCBvcHRpb25zKVxuICAgIH0pXG4gIH1cblxuICB0b2dnbGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgaWYgKGdldEFsbEF0dHJpYnV0ZU5hbWVzKCkuaW5jbHVkZXMoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtRm9ybWF0dGluZyhhdHRyaWJ1dGVOYW1lKVxuICAgICAgcmV0dXJuIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25kZXI/LnRvZ2dsZUN1cnJlbnRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgYWN0aXZhdGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChhdHRyaWJ1dGVOYW1lLCB2YWx1ZSkge1xuICAgIGlmIChnZXRBbGxBdHRyaWJ1dGVOYW1lcygpLmluY2x1ZGVzKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybUZvcm1hdHRpbmcoYXR0cmlidXRlTmFtZSlcbiAgICAgIHJldHVybiB0aGlzLndpdGhUYXJnZXRET01SYW5nZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5zZXRDdXJyZW50QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIHZhbHVlKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBkZWxldGVJbkRpcmVjdGlvbihkaXJlY3Rpb24sIHsgcmVjb3JkVW5kb0VudHJ5IH0gPSB7IHJlY29yZFVuZG9FbnRyeTogdHJ1ZSB9KSB7XG4gICAgaWYgKHJlY29yZFVuZG9FbnRyeSkge1xuICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyV2lsbFBlcmZvcm1UeXBpbmcoKVxuICAgIH1cbiAgICBjb25zdCBwZXJmb3JtID0gKCkgPT4gdGhpcy5yZXNwb25kZXI/LmRlbGV0ZUluRGlyZWN0aW9uKGRpcmVjdGlvbilcbiAgICBjb25zdCBkb21SYW5nZSA9IHRoaXMuZ2V0VGFyZ2V0RE9NUmFuZ2UoeyBtaW5MZW5ndGg6IHRoaXMuY29tcG9zaW5nID8gMSA6IDIgfSlcbiAgICBpZiAoZG9tUmFuZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzLndpdGhUYXJnZXRET01SYW5nZShkb21SYW5nZSwgcGVyZm9ybSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBlcmZvcm0oKVxuICAgIH1cbiAgfVxuXG4gIC8vIFNlbGVjdGlvbiBoZWxwZXJzXG5cbiAgd2l0aFRhcmdldERPTVJhbmdlKGRvbVJhbmdlLCBmbikge1xuICAgIGlmICh0eXBlb2YgZG9tUmFuZ2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZm4gPSBkb21SYW5nZVxuICAgICAgZG9tUmFuZ2UgPSB0aGlzLmdldFRhcmdldERPTVJhbmdlKClcbiAgICB9XG4gICAgaWYgKGRvbVJhbmdlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNwb25kZXI/LndpdGhUYXJnZXRET01SYW5nZShkb21SYW5nZSwgZm4uYmluZCh0aGlzKSlcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIucmVzZXQoKVxuICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcylcbiAgICB9XG4gIH1cblxuICBnZXRUYXJnZXRET01SYW5nZSh7IG1pbkxlbmd0aCB9ID0geyBtaW5MZW5ndGg6IDAgfSkge1xuICAgIGNvbnN0IHRhcmdldFJhbmdlcyA9IHRoaXMuZXZlbnQuZ2V0VGFyZ2V0UmFuZ2VzPy4oKVxuICAgIGlmICh0YXJnZXRSYW5nZXMpIHtcbiAgICAgIGlmICh0YXJnZXRSYW5nZXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGRvbVJhbmdlID0gc3RhdGljUmFuZ2VUb1JhbmdlKHRhcmdldFJhbmdlc1swXSlcbiAgICAgICAgaWYgKG1pbkxlbmd0aCA9PT0gMCB8fCBkb21SYW5nZS50b1N0cmluZygpLmxlbmd0aCA+PSBtaW5MZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gZG9tUmFuZ2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdpdGhFdmVudChldmVudCwgZm4pIHtcbiAgICBsZXQgcmVzdWx0XG4gICAgdGhpcy5ldmVudCA9IGV2ZW50XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZuLmNhbGwodGhpcylcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5ldmVudCA9IG51bGxcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbmNvbnN0IHN0YXRpY1JhbmdlVG9SYW5nZSA9IGZ1bmN0aW9uKHN0YXRpY1JhbmdlKSB7XG4gIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKVxuICByYW5nZS5zZXRTdGFydChzdGF0aWNSYW5nZS5zdGFydENvbnRhaW5lciwgc3RhdGljUmFuZ2Uuc3RhcnRPZmZzZXQpXG4gIHJhbmdlLnNldEVuZChzdGF0aWNSYW5nZS5lbmRDb250YWluZXIsIHN0YXRpY1JhbmdlLmVuZE9mZnNldClcbiAgcmV0dXJuIHJhbmdlXG59XG5cbi8vIEV2ZW50IGhlbHBlcnNcblxuY29uc3QgZHJhZ0V2ZW50SGFzRmlsZXMgPSAoZXZlbnQpID0+IEFycmF5LmZyb20oZXZlbnQuZGF0YVRyYW5zZmVyPy50eXBlcyB8fCBbXSkuaW5jbHVkZXMoXCJGaWxlc1wiKVxuXG5jb25zdCBwcm9jZXNzYWJsZUZpbGVQYXN0ZSA9IChldmVudCkgPT4ge1xuICAvLyBQYXN0ZSBldmVudHMgdGhhdCBvbmx5IGhhdmUgZmlsZXMgYXJlIGhhbmRsZWQgYnkgdGhlIHBhc3RlIGV2ZW50IGhhbmRsZXIsXG4gIC8vIHRvIHdvcmsgYXJvdW5kIFNhZmFyaSBub3Qgc3VwcG9ydGluZyBiZWZvcmVpbnB1dC5pbnNlcnRGcm9tUGFzdGUgZm9yIGZpbGVzLlxuXG4gIC8vIE1TIE9mZmljZSB0ZXh0IHBhc3RlcyBpbmNsdWRlIGEgZmlsZSB3aXRoIGEgc2NyZWVuc2hvdCBvZiB0aGUgdGV4dCwgYnV0IHdlIHNob3VsZFxuICAvLyBoYW5kbGUgdGhlbSBhcyB0ZXh0IHBhc3Rlcy5cbiAgcmV0dXJuIGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlcz8uWzBdICYmICFwYXN0ZUV2ZW50SGFzRmlsZXNPbmx5KGV2ZW50KSAmJiAhZGF0YVRyYW5zZmVySXNNc09mZmljZVBhc3RlKGV2ZW50KVxufVxuXG5jb25zdCBwYXN0ZUV2ZW50SGFzRmlsZXNPbmx5ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgY29uc3QgY2xpcGJvYXJkID0gZXZlbnQuY2xpcGJvYXJkRGF0YVxuICBpZiAoY2xpcGJvYXJkKSB7XG4gICAgY29uc3QgZmlsZVR5cGVzID0gQXJyYXkuZnJvbShjbGlwYm9hcmQudHlwZXMpLmZpbHRlcigodHlwZSkgPT4gdHlwZS5tYXRjaCgvZmlsZS9pKSkgLy8gXCJGaWxlc1wiLCBcImFwcGxpY2F0aW9uL3gtbW96LWZpbGVcIlxuICAgIHJldHVybiBmaWxlVHlwZXMubGVuZ3RoID09PSBjbGlwYm9hcmQudHlwZXMubGVuZ3RoICYmIGNsaXBib2FyZC5maWxlcy5sZW5ndGggPj0gMVxuICB9XG59XG5cbmNvbnN0IHBhc3RlRXZlbnRIYXNQbGFpblRleHRPbmx5ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgY29uc3QgY2xpcGJvYXJkID0gZXZlbnQuY2xpcGJvYXJkRGF0YVxuICBpZiAoY2xpcGJvYXJkKSB7XG4gICAgcmV0dXJuIGNsaXBib2FyZC50eXBlcy5pbmNsdWRlcyhcInRleHQvcGxhaW5cIikgJiYgY2xpcGJvYXJkLnR5cGVzLmxlbmd0aCA9PT0gMVxuICB9XG59XG5cbmNvbnN0IGtleWJvYXJkQ29tbWFuZEZyb21LZXlFdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGNvbnN0IGNvbW1hbmQgPSBbXVxuICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgY29tbWFuZC5wdXNoKFwiYWx0XCIpXG4gIH1cbiAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgY29tbWFuZC5wdXNoKFwic2hpZnRcIilcbiAgfVxuICBjb21tYW5kLnB1c2goZXZlbnQua2V5KVxuICByZXR1cm4gY29tbWFuZFxufVxuXG5jb25zdCBwb2ludEZyb21FdmVudCA9IChldmVudCkgPT4gKHtcbiAgeDogZXZlbnQuY2xpZW50WCxcbiAgeTogZXZlbnQuY2xpZW50WSxcbn0pXG4iLCAiaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcblxuaW1wb3J0IHsgZmluZENsb3Nlc3RFbGVtZW50RnJvbU5vZGUsIGhhbmRsZUV2ZW50LCB0cmlnZ2VyRXZlbnQgfSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5pbXBvcnQgRE9NUHVyaWZ5IGZyb20gXCJkb21wdXJpZnlcIlxuXG5jb25zdCBhdHRyaWJ1dGVCdXR0b25TZWxlY3RvciA9IFwiW2RhdGEtdHJpeC1hdHRyaWJ1dGVdXCJcbmNvbnN0IGFjdGlvbkJ1dHRvblNlbGVjdG9yID0gXCJbZGF0YS10cml4LWFjdGlvbl1cIlxuY29uc3QgdG9vbGJhckJ1dHRvblNlbGVjdG9yID0gYCR7YXR0cmlidXRlQnV0dG9uU2VsZWN0b3J9LCAke2FjdGlvbkJ1dHRvblNlbGVjdG9yfWBcbmNvbnN0IGRpYWxvZ1NlbGVjdG9yID0gXCJbZGF0YS10cml4LWRpYWxvZ11cIlxuY29uc3QgYWN0aXZlRGlhbG9nU2VsZWN0b3IgPSBgJHtkaWFsb2dTZWxlY3Rvcn1bZGF0YS10cml4LWFjdGl2ZV1gXG5jb25zdCBkaWFsb2dCdXR0b25TZWxlY3RvciA9IGAke2RpYWxvZ1NlbGVjdG9yfSBbZGF0YS10cml4LW1ldGhvZF1gXG5jb25zdCBkaWFsb2dJbnB1dFNlbGVjdG9yID0gYCR7ZGlhbG9nU2VsZWN0b3J9IFtkYXRhLXRyaXgtaW5wdXRdYFxuY29uc3QgZ2V0SW5wdXRGb3JEaWFsb2cgPSAoZWxlbWVudCwgYXR0cmlidXRlTmFtZSkgPT4ge1xuICBpZiAoIWF0dHJpYnV0ZU5hbWUpIHsgYXR0cmlidXRlTmFtZSA9IGdldEF0dHJpYnV0ZU5hbWUoZWxlbWVudCkgfVxuICByZXR1cm4gZWxlbWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS10cml4LWlucHV0XVtuYW1lPScke2F0dHJpYnV0ZU5hbWV9J11gKVxufVxuY29uc3QgZ2V0QWN0aW9uTmFtZSA9IChlbGVtZW50KSA9PiBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdHJpeC1hY3Rpb25cIilcbmNvbnN0IGdldEF0dHJpYnV0ZU5hbWUgPSAoZWxlbWVudCkgPT4ge1xuICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRyaXgtYXR0cmlidXRlXCIpIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10cml4LWRpYWxvZy1hdHRyaWJ1dGVcIilcbn1cbmNvbnN0IGdldERpYWxvZ05hbWUgPSAoZWxlbWVudCkgPT4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRyaXgtZGlhbG9nXCIpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xiYXJDb250cm9sbGVyIGV4dGVuZHMgQmFzaWNPYmplY3Qge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudClcbiAgICB0aGlzLmRpZENsaWNrQWN0aW9uQnV0dG9uID0gdGhpcy5kaWRDbGlja0FjdGlvbkJ1dHRvbi5iaW5kKHRoaXMpXG4gICAgdGhpcy5kaWRDbGlja0F0dHJpYnV0ZUJ1dHRvbiA9IHRoaXMuZGlkQ2xpY2tBdHRyaWJ1dGVCdXR0b24uYmluZCh0aGlzKVxuICAgIHRoaXMuZGlkQ2xpY2tEaWFsb2dCdXR0b24gPSB0aGlzLmRpZENsaWNrRGlhbG9nQnV0dG9uLmJpbmQodGhpcylcbiAgICB0aGlzLmRpZEtleURvd25EaWFsb2dJbnB1dCA9IHRoaXMuZGlkS2V5RG93bkRpYWxvZ0lucHV0LmJpbmQodGhpcylcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0ge31cbiAgICB0aGlzLmFjdGlvbnMgPSB7fVxuICAgIHRoaXMucmVzZXREaWFsb2dJbnB1dHMoKVxuXG4gICAgaGFuZGxlRXZlbnQoXCJtb3VzZWRvd25cIiwge1xuICAgICAgb25FbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICBtYXRjaGluZ1NlbGVjdG9yOiBhY3Rpb25CdXR0b25TZWxlY3RvcixcbiAgICAgIHdpdGhDYWxsYmFjazogdGhpcy5kaWRDbGlja0FjdGlvbkJ1dHRvbixcbiAgICB9KVxuICAgIGhhbmRsZUV2ZW50KFwibW91c2Vkb3duXCIsIHtcbiAgICAgIG9uRWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgbWF0Y2hpbmdTZWxlY3RvcjogYXR0cmlidXRlQnV0dG9uU2VsZWN0b3IsXG4gICAgICB3aXRoQ2FsbGJhY2s6IHRoaXMuZGlkQ2xpY2tBdHRyaWJ1dGVCdXR0b24sXG4gICAgfSlcbiAgICBoYW5kbGVFdmVudChcImNsaWNrXCIsIHsgb25FbGVtZW50OiB0aGlzLmVsZW1lbnQsIG1hdGNoaW5nU2VsZWN0b3I6IHRvb2xiYXJCdXR0b25TZWxlY3RvciwgcHJldmVudERlZmF1bHQ6IHRydWUgfSlcbiAgICBoYW5kbGVFdmVudChcImNsaWNrXCIsIHtcbiAgICAgIG9uRWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgbWF0Y2hpbmdTZWxlY3RvcjogZGlhbG9nQnV0dG9uU2VsZWN0b3IsXG4gICAgICB3aXRoQ2FsbGJhY2s6IHRoaXMuZGlkQ2xpY2tEaWFsb2dCdXR0b24sXG4gICAgfSlcbiAgICBoYW5kbGVFdmVudChcImtleWRvd25cIiwge1xuICAgICAgb25FbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICBtYXRjaGluZ1NlbGVjdG9yOiBkaWFsb2dJbnB1dFNlbGVjdG9yLFxuICAgICAgd2l0aENhbGxiYWNrOiB0aGlzLmRpZEtleURvd25EaWFsb2dJbnB1dCxcbiAgICB9KVxuICB9XG5cbiAgLy8gRXZlbnQgaGFuZGxlcnNcblxuICBkaWRDbGlja0FjdGlvbkJ1dHRvbihldmVudCwgZWxlbWVudCkge1xuICAgIHRoaXMuZGVsZWdhdGU/LnRvb2xiYXJEaWRDbGlja0J1dHRvbigpXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGFjdGlvbk5hbWUgPSBnZXRBY3Rpb25OYW1lKGVsZW1lbnQpXG5cbiAgICBpZiAodGhpcy5nZXREaWFsb2coYWN0aW9uTmFtZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvZ2dsZURpYWxvZyhhY3Rpb25OYW1lKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8udG9vbGJhckRpZEludm9rZUFjdGlvbihhY3Rpb25OYW1lLCBlbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIGRpZENsaWNrQXR0cmlidXRlQnV0dG9uKGV2ZW50LCBlbGVtZW50KSB7XG4gICAgdGhpcy5kZWxlZ2F0ZT8udG9vbGJhckRpZENsaWNrQnV0dG9uKClcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGdldEF0dHJpYnV0ZU5hbWUoZWxlbWVudClcblxuICAgIGlmICh0aGlzLmdldERpYWxvZyhhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgdGhpcy50b2dnbGVEaWFsb2coYXR0cmlidXRlTmFtZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWxlZ2F0ZT8udG9vbGJhckRpZFRvZ2dsZUF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlZnJlc2hBdHRyaWJ1dGVCdXR0b25zKClcbiAgfVxuXG4gIGRpZENsaWNrRGlhbG9nQnV0dG9uKGV2ZW50LCBlbGVtZW50KSB7XG4gICAgY29uc3QgZGlhbG9nRWxlbWVudCA9IGZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlKGVsZW1lbnQsIHsgbWF0Y2hpbmdTZWxlY3RvcjogZGlhbG9nU2VsZWN0b3IgfSlcbiAgICBjb25zdCBtZXRob2QgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdHJpeC1tZXRob2RcIilcbiAgICByZXR1cm4gdGhpc1ttZXRob2RdLmNhbGwodGhpcywgZGlhbG9nRWxlbWVudClcbiAgfVxuXG4gIGRpZEtleURvd25EaWFsb2dJbnB1dChldmVudCwgZWxlbWVudCkge1xuICAgIGlmIChldmVudC5rZXlDb2RlID09PSAxMykge1xuICAgICAgLy8gRW50ZXIga2V5XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBjb25zdCBhdHRyaWJ1dGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcIm5hbWVcIilcbiAgICAgIGNvbnN0IGRpYWxvZyA9IHRoaXMuZ2V0RGlhbG9nKGF0dHJpYnV0ZSlcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGRpYWxvZylcbiAgICB9XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDI3KSB7XG4gICAgICAvLyBFc2NhcGUga2V5XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICByZXR1cm4gdGhpcy5oaWRlRGlhbG9nKClcbiAgICB9XG4gIH1cblxuICAvLyBBY3Rpb24gYnV0dG9uc1xuXG4gIHVwZGF0ZUFjdGlvbnMoYWN0aW9ucykge1xuICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNcbiAgICByZXR1cm4gdGhpcy5yZWZyZXNoQWN0aW9uQnV0dG9ucygpXG4gIH1cblxuICByZWZyZXNoQWN0aW9uQnV0dG9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoQWN0aW9uQnV0dG9uKChlbGVtZW50LCBhY3Rpb25OYW1lKSA9PiB7XG4gICAgICBlbGVtZW50LmRpc2FibGVkID0gdGhpcy5hY3Rpb25zW2FjdGlvbk5hbWVdID09PSBmYWxzZVxuICAgIH0pXG4gIH1cblxuICBlYWNoQWN0aW9uQnV0dG9uKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYWN0aW9uQnV0dG9uU2VsZWN0b3IpKS5tYXAoKGVsZW1lbnQpID0+XG4gICAgICBjYWxsYmFjayhlbGVtZW50LCBnZXRBY3Rpb25OYW1lKGVsZW1lbnQpKVxuICAgIClcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZSBidXR0b25zXG5cbiAgdXBkYXRlQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlc1xuICAgIHJldHVybiB0aGlzLnJlZnJlc2hBdHRyaWJ1dGVCdXR0b25zKClcbiAgfVxuXG4gIHJlZnJlc2hBdHRyaWJ1dGVCdXR0b25zKCkge1xuICAgIHJldHVybiB0aGlzLmVhY2hBdHRyaWJ1dGVCdXR0b24oKGVsZW1lbnQsIGF0dHJpYnV0ZU5hbWUpID0+IHtcbiAgICAgIGVsZW1lbnQuZGlzYWJsZWQgPSB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0gPT09IGZhbHNlXG4gICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdIHx8IHRoaXMuZGlhbG9nSXNWaXNpYmxlKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS10cml4LWFjdGl2ZVwiLCBcIlwiKVxuICAgICAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidHJpeC1hY3RpdmVcIilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS10cml4LWFjdGl2ZVwiKVxuICAgICAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidHJpeC1hY3RpdmVcIilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZWFjaEF0dHJpYnV0ZUJ1dHRvbihjYWxsYmFjaykge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGF0dHJpYnV0ZUJ1dHRvblNlbGVjdG9yKSkubWFwKChlbGVtZW50KSA9PlxuICAgICAgY2FsbGJhY2soZWxlbWVudCwgZ2V0QXR0cmlidXRlTmFtZShlbGVtZW50KSlcbiAgICApXG4gIH1cblxuICBhcHBseUtleWJvYXJkQ29tbWFuZChrZXlzKSB7XG4gICAgY29uc3Qga2V5U3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoa2V5cy5zb3J0KCkpXG4gICAgZm9yIChjb25zdCBidXR0b24gb2YgQXJyYXkuZnJvbSh0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXRyaXgta2V5XVwiKSkpIHtcbiAgICAgIGNvbnN0IGJ1dHRvbktleXMgPSBidXR0b24uZ2V0QXR0cmlidXRlKFwiZGF0YS10cml4LWtleVwiKS5zcGxpdChcIitcIilcbiAgICAgIGNvbnN0IGJ1dHRvbktleVN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGJ1dHRvbktleXMuc29ydCgpKVxuICAgICAgaWYgKGJ1dHRvbktleVN0cmluZyA9PT0ga2V5U3RyaW5nKSB7XG4gICAgICAgIHRyaWdnZXJFdmVudChcIm1vdXNlZG93blwiLCB7IG9uRWxlbWVudDogYnV0dG9uIH0pXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gRGlhbG9nc1xuXG4gIGRpYWxvZ0lzVmlzaWJsZShkaWFsb2dOYW1lKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZ2V0RGlhbG9nKGRpYWxvZ05hbWUpXG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lmhhc0F0dHJpYnV0ZShcImRhdGEtdHJpeC1hY3RpdmVcIilcbiAgICB9XG4gIH1cblxuICB0b2dnbGVEaWFsb2coZGlhbG9nTmFtZSkge1xuICAgIGlmICh0aGlzLmRpYWxvZ0lzVmlzaWJsZShkaWFsb2dOYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGlkZURpYWxvZygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnNob3dEaWFsb2coZGlhbG9nTmFtZSlcbiAgICB9XG4gIH1cblxuICBzaG93RGlhbG9nKGRpYWxvZ05hbWUpIHtcbiAgICB0aGlzLmhpZGVEaWFsb2coKVxuICAgIHRoaXMuZGVsZWdhdGU/LnRvb2xiYXJXaWxsU2hvd0RpYWxvZygpXG5cbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5nZXREaWFsb2coZGlhbG9nTmFtZSlcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtdHJpeC1hY3RpdmVcIiwgXCJcIilcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0cml4LWFjdGl2ZVwiKVxuXG4gICAgQXJyYXkuZnJvbShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtkaXNhYmxlZF1cIikpLmZvckVhY2goKGRpc2FibGVkSW5wdXQpID0+IHtcbiAgICAgIGRpc2FibGVkSW5wdXQucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIilcbiAgICB9KVxuXG4gICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGdldEF0dHJpYnV0ZU5hbWUoZWxlbWVudClcbiAgICBpZiAoYXR0cmlidXRlTmFtZSkge1xuICAgICAgY29uc3QgaW5wdXQgPSBnZXRJbnB1dEZvckRpYWxvZyhlbGVtZW50LCBkaWFsb2dOYW1lKVxuICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgIGlucHV0LnZhbHVlID0gdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdIHx8IFwiXCJcbiAgICAgICAgaW5wdXQuc2VsZWN0KClcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8udG9vbGJhckRpZFNob3dEaWFsb2coZGlhbG9nTmFtZSlcbiAgfVxuXG4gIHNldEF0dHJpYnV0ZShkaWFsb2dFbGVtZW50KSB7XG4gICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGdldEF0dHJpYnV0ZU5hbWUoZGlhbG9nRWxlbWVudClcbiAgICBjb25zdCBpbnB1dCA9IGdldElucHV0Rm9yRGlhbG9nKGRpYWxvZ0VsZW1lbnQsIGF0dHJpYnV0ZU5hbWUpXG5cbiAgICBpZiAoaW5wdXQud2lsbFZhbGlkYXRlKSB7XG4gICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlwiKVxuICAgICAgaWYgKCFpbnB1dC5jaGVja1ZhbGlkaXR5KCkgfHwgIXRoaXMuaXNTYWZlQXR0cmlidXRlKGlucHV0KSkge1xuICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIkludmFsaWQgdmFsdWVcIilcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiZGF0YS10cml4LXZhbGlkYXRlXCIsIFwiXCIpXG4gICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoXCJ0cml4LXZhbGlkYXRlXCIpXG4gICAgICAgIHJldHVybiBpbnB1dC5mb2N1cygpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZGVsZWdhdGU/LnRvb2xiYXJEaWRVcGRhdGVBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgaW5wdXQudmFsdWUpXG4gICAgcmV0dXJuIHRoaXMuaGlkZURpYWxvZygpXG4gIH1cblxuICBpc1NhZmVBdHRyaWJ1dGUoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQuaGFzQXR0cmlidXRlKFwiZGF0YS10cml4LXZhbGlkYXRlLWhyZWZcIikpIHtcbiAgICAgIHJldHVybiBET01QdXJpZnkuaXNWYWxpZEF0dHJpYnV0ZShcImFcIiwgXCJocmVmXCIsIGlucHV0LnZhbHVlKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZShkaWFsb2dFbGVtZW50KSB7XG4gICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGdldEF0dHJpYnV0ZU5hbWUoZGlhbG9nRWxlbWVudClcbiAgICB0aGlzLmRlbGVnYXRlPy50b29sYmFyRGlkUmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpXG4gICAgcmV0dXJuIHRoaXMuaGlkZURpYWxvZygpXG4gIH1cblxuICBoaWRlRGlhbG9nKCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihhY3RpdmVEaWFsb2dTZWxlY3RvcilcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXRyaXgtYWN0aXZlXCIpXG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0cml4LWFjdGl2ZVwiKVxuICAgICAgdGhpcy5yZXNldERpYWxvZ0lucHV0cygpXG4gICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8udG9vbGJhckRpZEhpZGVEaWFsb2coZ2V0RGlhbG9nTmFtZShlbGVtZW50KSlcbiAgICB9XG4gIH1cblxuICByZXNldERpYWxvZ0lucHV0cygpIHtcbiAgICBBcnJheS5mcm9tKHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGRpYWxvZ0lucHV0U2VsZWN0b3IpKS5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKVxuICAgICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS10cml4LXZhbGlkYXRlXCIpXG4gICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKFwidHJpeC12YWxpZGF0ZVwiKVxuICAgIH0pXG4gIH1cblxuICBnZXREaWFsb2coZGlhbG9nTmFtZSkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtdHJpeC1kaWFsb2c9JHtkaWFsb2dOYW1lfV1gKVxuICB9XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiAgICBpZC1sZW5ndGgsXG4qL1xuaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5cbmltcG9ydCB7IHNlcmlhbGl6ZVRvQ29udGVudFR5cGUgfSBmcm9tIFwidHJpeC9jb3JlL3NlcmlhbGl6YXRpb25cIlxuXG5pbXBvcnQgQ29udHJvbGxlciBmcm9tIFwidHJpeC9jb250cm9sbGVycy9jb250cm9sbGVyXCJcbmltcG9ydCBMZXZlbDBJbnB1dENvbnRyb2xsZXIgZnJvbSBcInRyaXgvY29udHJvbGxlcnMvbGV2ZWxfMF9pbnB1dF9jb250cm9sbGVyXCJcbmltcG9ydCBMZXZlbDJJbnB1dENvbnRyb2xsZXIgZnJvbSBcInRyaXgvY29udHJvbGxlcnMvbGV2ZWxfMl9pbnB1dF9jb250cm9sbGVyXCJcbmltcG9ydCBDb21wb3NpdGlvbkNvbnRyb2xsZXIgZnJvbSBcInRyaXgvY29udHJvbGxlcnMvY29tcG9zaXRpb25fY29udHJvbGxlclwiXG5pbXBvcnQgVG9vbGJhckNvbnRyb2xsZXIgZnJvbSBcInRyaXgvY29udHJvbGxlcnMvdG9vbGJhcl9jb250cm9sbGVyXCJcbmltcG9ydCBDb21wb3NpdGlvbiBmcm9tIFwidHJpeC9tb2RlbHMvY29tcG9zaXRpb25cIlxuaW1wb3J0IEVkaXRvciBmcm9tIFwidHJpeC9tb2RlbHMvZWRpdG9yXCJcbmltcG9ydCBBdHRhY2htZW50TWFuYWdlciBmcm9tIFwidHJpeC9tb2RlbHMvYXR0YWNobWVudF9tYW5hZ2VyXCJcbmltcG9ydCBTZWxlY3Rpb25NYW5hZ2VyIGZyb20gXCJ0cml4L21vZGVscy9zZWxlY3Rpb25fbWFuYWdlclwiXG5cbmltcG9ydCB7IGdldEJsb2NrQ29uZmlnLCBvYmplY3RzQXJlRXF1YWwsIHJhbmdlSXNDb2xsYXBzZWQsIHJhbmdlc0FyZUVxdWFsIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcbmltcG9ydCB7IHNlbGVjdGlvbkNoYW5nZU9ic2VydmVyIH0gZnJvbSBcInRyaXgvb2JzZXJ2ZXJzL3NlbGVjdGlvbl9jaGFuZ2Vfb2JzZXJ2ZXJcIlxuXG5jb25zdCBzbmFwc2hvdHNBcmVFcXVhbCA9IChhLCBiKSA9PiByYW5nZXNBcmVFcXVhbChhLnNlbGVjdGVkUmFuZ2UsIGIuc2VsZWN0ZWRSYW5nZSkgJiYgYS5kb2N1bWVudC5pc0VxdWFsVG8oYi5kb2N1bWVudClcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWRpdG9yQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIge1xuICBzdGF0aWMgYWN0aW9ucyA9IHtcbiAgICB1bmRvOiB7XG4gICAgICB0ZXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3IuY2FuVW5kbygpXG4gICAgICB9LFxuICAgICAgcGVyZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLnVuZG8oKVxuICAgICAgfSxcbiAgICB9LFxuICAgIHJlZG86IHtcbiAgICAgIHRlc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5jYW5SZWRvKClcbiAgICAgIH0sXG4gICAgICBwZXJmb3JtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3IucmVkbygpXG4gICAgICB9LFxuICAgIH0sXG4gICAgbGluazoge1xuICAgICAgdGVzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmNhbkFjdGl2YXRlQXR0cmlidXRlKFwiaHJlZlwiKVxuICAgICAgfSxcbiAgICB9LFxuICAgIGluY3JlYXNlTmVzdGluZ0xldmVsOiB7XG4gICAgICB0ZXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3IuY2FuSW5jcmVhc2VOZXN0aW5nTGV2ZWwoKVxuICAgICAgfSxcbiAgICAgIHBlcmZvcm0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5pbmNyZWFzZU5lc3RpbmdMZXZlbCgpICYmIHRoaXMucmVuZGVyKClcbiAgICAgIH0sXG4gICAgfSxcbiAgICBkZWNyZWFzZU5lc3RpbmdMZXZlbDoge1xuICAgICAgdGVzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmNhbkRlY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgICAgIH0sXG4gICAgICBwZXJmb3JtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3IuZGVjcmVhc2VOZXN0aW5nTGV2ZWwoKSAmJiB0aGlzLnJlbmRlcigpXG4gICAgICB9LFxuICAgIH0sXG4gICAgYXR0YWNoRmlsZXM6IHtcbiAgICAgIHRlc3QoKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9LFxuICAgICAgcGVyZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5pbnB1dC5waWNrRmlsZXModGhpcy5lZGl0b3IuaW5zZXJ0RmlsZXMpXG4gICAgICB9LFxuICAgIH0sXG4gIH1cblxuICBjb25zdHJ1Y3Rvcih7IGVkaXRvckVsZW1lbnQsIGRvY3VtZW50LCBodG1sIH0pIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50ID0gZWRpdG9yRWxlbWVudFxuICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlciA9IG5ldyBTZWxlY3Rpb25NYW5hZ2VyKHRoaXMuZWRpdG9yRWxlbWVudClcbiAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuZGVsZWdhdGUgPSB0aGlzXG5cbiAgICB0aGlzLmNvbXBvc2l0aW9uID0gbmV3IENvbXBvc2l0aW9uKClcbiAgICB0aGlzLmNvbXBvc2l0aW9uLmRlbGVnYXRlID0gdGhpc1xuXG4gICAgdGhpcy5hdHRhY2htZW50TWFuYWdlciA9IG5ldyBBdHRhY2htZW50TWFuYWdlcih0aGlzLmNvbXBvc2l0aW9uLmdldEF0dGFjaG1lbnRzKCkpXG4gICAgdGhpcy5hdHRhY2htZW50TWFuYWdlci5kZWxlZ2F0ZSA9IHRoaXNcblxuICAgIHRoaXMuaW5wdXRDb250cm9sbGVyID1cbiAgICAgIGNvbmZpZy5pbnB1dC5nZXRMZXZlbCgpID09PSAyXG4gICAgICAgID8gbmV3IExldmVsMklucHV0Q29udHJvbGxlcih0aGlzLmVkaXRvckVsZW1lbnQpXG4gICAgICAgIDogbmV3IExldmVsMElucHV0Q29udHJvbGxlcih0aGlzLmVkaXRvckVsZW1lbnQpXG5cbiAgICB0aGlzLmlucHV0Q29udHJvbGxlci5kZWxlZ2F0ZSA9IHRoaXNcbiAgICB0aGlzLmlucHV0Q29udHJvbGxlci5yZXNwb25kZXIgPSB0aGlzLmNvbXBvc2l0aW9uXG5cbiAgICB0aGlzLmNvbXBvc2l0aW9uQ29udHJvbGxlciA9IG5ldyBDb21wb3NpdGlvbkNvbnRyb2xsZXIodGhpcy5lZGl0b3JFbGVtZW50LCB0aGlzLmNvbXBvc2l0aW9uKVxuICAgIHRoaXMuY29tcG9zaXRpb25Db250cm9sbGVyLmRlbGVnYXRlID0gdGhpc1xuXG4gICAgdGhpcy50b29sYmFyQ29udHJvbGxlciA9IG5ldyBUb29sYmFyQ29udHJvbGxlcih0aGlzLmVkaXRvckVsZW1lbnQudG9vbGJhckVsZW1lbnQpXG4gICAgdGhpcy50b29sYmFyQ29udHJvbGxlci5kZWxlZ2F0ZSA9IHRoaXNcblxuICAgIHRoaXMuZWRpdG9yID0gbmV3IEVkaXRvcih0aGlzLmNvbXBvc2l0aW9uLCB0aGlzLnNlbGVjdGlvbk1hbmFnZXIsIHRoaXMuZWRpdG9yRWxlbWVudClcbiAgICBpZiAoZG9jdW1lbnQpIHtcbiAgICAgIHRoaXMuZWRpdG9yLmxvYWREb2N1bWVudChkb2N1bWVudClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lZGl0b3IubG9hZEhUTUwoaHRtbClcbiAgICB9XG4gIH1cblxuICByZWdpc3RlclNlbGVjdGlvbk1hbmFnZXIoKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvbkNoYW5nZU9ic2VydmVyLnJlZ2lzdGVyU2VsZWN0aW9uTWFuYWdlcih0aGlzLnNlbGVjdGlvbk1hbmFnZXIpXG4gIH1cblxuICB1bnJlZ2lzdGVyU2VsZWN0aW9uTWFuYWdlcigpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIudW5yZWdpc3RlclNlbGVjdGlvbk1hbmFnZXIodGhpcy5zZWxlY3Rpb25NYW5hZ2VyKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uQ29udHJvbGxlci5yZW5kZXIoKVxuICB9XG5cbiAgcmVwYXJzZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5yZXBsYWNlSFRNTCh0aGlzLmVkaXRvckVsZW1lbnQuaW5uZXJIVE1MKVxuICB9XG5cbiAgLy8gQ29tcG9zaXRpb24gZGVsZWdhdGVcblxuICBjb21wb3NpdGlvbkRpZENoYW5nZURvY3VtZW50KGRvY3VtZW50KSB7XG4gICAgdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwiZG9jdW1lbnQtY2hhbmdlXCIpXG4gICAgaWYgKCF0aGlzLmhhbmRsaW5nSW5wdXQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gICAgfVxuICB9XG5cbiAgY29tcG9zaXRpb25EaWRDaGFuZ2VDdXJyZW50QXR0cmlidXRlcyhjdXJyZW50QXR0cmlidXRlcykge1xuICAgIHRoaXMuY3VycmVudEF0dHJpYnV0ZXMgPSBjdXJyZW50QXR0cmlidXRlc1xuICAgIHRoaXMudG9vbGJhckNvbnRyb2xsZXIudXBkYXRlQXR0cmlidXRlcyh0aGlzLmN1cnJlbnRBdHRyaWJ1dGVzKVxuICAgIHRoaXMudXBkYXRlQ3VycmVudEFjdGlvbnMoKVxuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJhdHRyaWJ1dGVzLWNoYW5nZVwiLCB7IGF0dHJpYnV0ZXM6IHRoaXMuY3VycmVudEF0dHJpYnV0ZXMgfSlcbiAgfVxuXG4gIGNvbXBvc2l0aW9uRGlkUGVyZm9ybUluc2VydGlvbkF0UmFuZ2UocmFuZ2UpIHtcbiAgICBpZiAodGhpcy5wYXN0aW5nKSB7XG4gICAgICB0aGlzLnBhc3RlZFJhbmdlID0gcmFuZ2VcbiAgICB9XG4gIH1cblxuICBjb21wb3NpdGlvblNob3VsZEFjY2VwdEZpbGUoZmlsZSkge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJmaWxlLWFjY2VwdFwiLCB7IGZpbGUgfSlcbiAgfVxuXG4gIGNvbXBvc2l0aW9uRGlkQWRkQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgY29uc3QgbWFuYWdlZEF0dGFjaG1lbnQgPSB0aGlzLmF0dGFjaG1lbnRNYW5hZ2VyLm1hbmFnZUF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwiYXR0YWNobWVudC1hZGRcIiwgeyBhdHRhY2htZW50OiBtYW5hZ2VkQXR0YWNobWVudCB9KVxuICB9XG5cbiAgY29tcG9zaXRpb25EaWRFZGl0QXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgdGhpcy5jb21wb3NpdGlvbkNvbnRyb2xsZXIucmVyZW5kZXJWaWV3Rm9yT2JqZWN0KGF0dGFjaG1lbnQpXG4gICAgY29uc3QgbWFuYWdlZEF0dGFjaG1lbnQgPSB0aGlzLmF0dGFjaG1lbnRNYW5hZ2VyLm1hbmFnZUF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJhdHRhY2htZW50LWVkaXRcIiwgeyBhdHRhY2htZW50OiBtYW5hZ2VkQXR0YWNobWVudCB9KVxuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJjaGFuZ2VcIilcbiAgfVxuXG4gIGNvbXBvc2l0aW9uRGlkQ2hhbmdlQXR0YWNobWVudFByZXZpZXdVUkwoYXR0YWNobWVudCkge1xuICAgIHRoaXMuY29tcG9zaXRpb25Db250cm9sbGVyLmludmFsaWRhdGVWaWV3Rm9yT2JqZWN0KGF0dGFjaG1lbnQpXG4gICAgcmV0dXJuIHRoaXMubm90aWZ5RWRpdG9yRWxlbWVudChcImNoYW5nZVwiKVxuICB9XG5cbiAgY29tcG9zaXRpb25EaWRSZW1vdmVBdHRhY2htZW50KGF0dGFjaG1lbnQpIHtcbiAgICBjb25zdCBtYW5hZ2VkQXR0YWNobWVudCA9IHRoaXMuYXR0YWNobWVudE1hbmFnZXIudW5tYW5hZ2VBdHRhY2htZW50KGF0dGFjaG1lbnQpXG4gICAgcmV0dXJuIHRoaXMubm90aWZ5RWRpdG9yRWxlbWVudChcImF0dGFjaG1lbnQtcmVtb3ZlXCIsIHsgYXR0YWNobWVudDogbWFuYWdlZEF0dGFjaG1lbnQgfSlcbiAgfVxuXG4gIGNvbXBvc2l0aW9uRGlkU3RhcnRFZGl0aW5nQXR0YWNobWVudChhdHRhY2htZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5hdHRhY2htZW50TG9jYXRpb25SYW5nZSA9IHRoaXMuY29tcG9zaXRpb24uZG9jdW1lbnQuZ2V0TG9jYXRpb25SYW5nZU9mQXR0YWNobWVudChhdHRhY2htZW50KVxuICAgIHRoaXMuY29tcG9zaXRpb25Db250cm9sbGVyLmluc3RhbGxBdHRhY2htZW50RWRpdG9yRm9yQXR0YWNobWVudChhdHRhY2htZW50LCBvcHRpb25zKVxuICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuc2V0TG9jYXRpb25SYW5nZSh0aGlzLmF0dGFjaG1lbnRMb2NhdGlvblJhbmdlKVxuICB9XG5cbiAgY29tcG9zaXRpb25EaWRTdG9wRWRpdGluZ0F0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIHRoaXMuY29tcG9zaXRpb25Db250cm9sbGVyLnVuaW5zdGFsbEF0dGFjaG1lbnRFZGl0b3IoKVxuICAgIHRoaXMuYXR0YWNobWVudExvY2F0aW9uUmFuZ2UgPSBudWxsXG4gIH1cblxuICBjb21wb3NpdGlvbkRpZFJlcXVlc3RDaGFuZ2luZ1NlbGVjdGlvblRvTG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKSB7XG4gICAgaWYgKHRoaXMubG9hZGluZ1NuYXBzaG90ICYmICF0aGlzLmlzRm9jdXNlZCgpKSByZXR1cm5cbiAgICB0aGlzLnJlcXVlc3RlZExvY2F0aW9uUmFuZ2UgPSBsb2NhdGlvblJhbmdlXG4gICAgdGhpcy5jb21wb3NpdGlvblJldmlzaW9uV2hlbkxvY2F0aW9uUmFuZ2VSZXF1ZXN0ZWQgPSB0aGlzLmNvbXBvc2l0aW9uLnJldmlzaW9uXG4gICAgaWYgKCF0aGlzLmhhbmRsaW5nSW5wdXQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gICAgfVxuICB9XG5cbiAgY29tcG9zaXRpb25XaWxsTG9hZFNuYXBzaG90KCkge1xuICAgIHRoaXMubG9hZGluZ1NuYXBzaG90ID0gdHJ1ZVxuICB9XG5cbiAgY29tcG9zaXRpb25EaWRMb2FkU25hcHNob3QoKSB7XG4gICAgdGhpcy5jb21wb3NpdGlvbkNvbnRyb2xsZXIucmVmcmVzaFZpZXdDYWNoZSgpXG4gICAgdGhpcy5yZW5kZXIoKVxuICAgIHRoaXMubG9hZGluZ1NuYXBzaG90ID0gZmFsc2VcbiAgfVxuXG4gIGdldFNlbGVjdGlvbk1hbmFnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTWFuYWdlclxuICB9XG5cbiAgLy8gQXR0YWNobWVudCBtYW5hZ2VyIGRlbGVnYXRlXG5cbiAgYXR0YWNobWVudE1hbmFnZXJEaWRSZXF1ZXN0UmVtb3ZhbE9mQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlQXR0YWNobWVudChhdHRhY2htZW50KVxuICB9XG5cbiAgLy8gRG9jdW1lbnQgY29udHJvbGxlciBkZWxlZ2F0ZVxuXG4gIGNvbXBvc2l0aW9uQ29udHJvbGxlcldpbGxTeW5jRG9jdW1lbnRWaWV3KCkge1xuICAgIHRoaXMuaW5wdXRDb250cm9sbGVyLmVkaXRvcldpbGxTeW5jRG9jdW1lbnRWaWV3KClcbiAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIubG9jaygpXG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5jbGVhclNlbGVjdGlvbigpXG4gIH1cblxuICBjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRTeW5jRG9jdW1lbnRWaWV3KCkge1xuICAgIHRoaXMuaW5wdXRDb250cm9sbGVyLmVkaXRvckRpZFN5bmNEb2N1bWVudFZpZXcoKVxuICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci51bmxvY2soKVxuICAgIHRoaXMudXBkYXRlQ3VycmVudEFjdGlvbnMoKVxuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJzeW5jXCIpXG4gIH1cblxuICBjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRSZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMucmVxdWVzdGVkTG9jYXRpb25SYW5nZSkge1xuICAgICAgaWYgKHRoaXMuY29tcG9zaXRpb25SZXZpc2lvbldoZW5Mb2NhdGlvblJhbmdlUmVxdWVzdGVkID09PSB0aGlzLmNvbXBvc2l0aW9uLnJldmlzaW9uKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5zZXRMb2NhdGlvblJhbmdlKHRoaXMucmVxdWVzdGVkTG9jYXRpb25SYW5nZSlcbiAgICAgIH1cbiAgICAgIHRoaXMucmVxdWVzdGVkTG9jYXRpb25SYW5nZSA9IG51bGxcbiAgICAgIHRoaXMuY29tcG9zaXRpb25SZXZpc2lvbldoZW5Mb2NhdGlvblJhbmdlUmVxdWVzdGVkID0gbnVsbFxuICAgIH1cblxuICAgIGlmICh0aGlzLnJlbmRlcmVkQ29tcG9zaXRpb25SZXZpc2lvbiAhPT0gdGhpcy5jb21wb3NpdGlvbi5yZXZpc2lvbikge1xuICAgICAgdGhpcy5ydW5FZGl0b3JGaWx0ZXJzKClcbiAgICAgIHRoaXMuY29tcG9zaXRpb24udXBkYXRlQ3VycmVudEF0dHJpYnV0ZXMoKVxuICAgICAgdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwicmVuZGVyXCIpXG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJlZENvbXBvc2l0aW9uUmV2aXNpb24gPSB0aGlzLmNvbXBvc2l0aW9uLnJldmlzaW9uXG4gIH1cblxuICBjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRGb2N1cygpIHtcbiAgICBpZiAodGhpcy5pc0ZvY3VzZWRJbnZpc2libHkoKSkge1xuICAgICAgdGhpcy5zZXRMb2NhdGlvblJhbmdlKHsgaW5kZXg6IDAsIG9mZnNldDogMCB9KVxuICAgIH1cbiAgICB0aGlzLnRvb2xiYXJDb250cm9sbGVyLmhpZGVEaWFsb2coKVxuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJmb2N1c1wiKVxuICB9XG5cbiAgY29tcG9zaXRpb25Db250cm9sbGVyRGlkQmx1cigpIHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwiYmx1clwiKVxuICB9XG5cbiAgY29tcG9zaXRpb25Db250cm9sbGVyRGlkU2VsZWN0QXR0YWNobWVudChhdHRhY2htZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy50b29sYmFyQ29udHJvbGxlci5oaWRlRGlhbG9nKClcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5lZGl0QXR0YWNobWVudChhdHRhY2htZW50LCBvcHRpb25zKVxuICB9XG5cbiAgY29tcG9zaXRpb25Db250cm9sbGVyRGlkUmVxdWVzdERlc2VsZWN0aW5nQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgY29uc3QgbG9jYXRpb25SYW5nZSA9IHRoaXMuYXR0YWNobWVudExvY2F0aW9uUmFuZ2UgfHwgdGhpcy5jb21wb3NpdGlvbi5kb2N1bWVudC5nZXRMb2NhdGlvblJhbmdlT2ZBdHRhY2htZW50KGF0dGFjaG1lbnQpXG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5zZXRMb2NhdGlvblJhbmdlKGxvY2F0aW9uUmFuZ2VbMV0pXG4gIH1cblxuICBjb21wb3NpdGlvbkNvbnRyb2xsZXJXaWxsVXBkYXRlQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yLnJlY29yZFVuZG9FbnRyeShcIkVkaXQgQXR0YWNobWVudFwiLCB7IGNvbnRleHQ6IGF0dGFjaG1lbnQuaWQsIGNvbnNvbGlkYXRhYmxlOiB0cnVlIH0pXG4gIH1cblxuICBjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRSZXF1ZXN0UmVtb3ZhbE9mQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlQXR0YWNobWVudChhdHRhY2htZW50KVxuICB9XG5cbiAgLy8gSW5wdXQgY29udHJvbGxlciBkZWxlZ2F0ZVxuXG4gIGlucHV0Q29udHJvbGxlcldpbGxIYW5kbGVJbnB1dCgpIHtcbiAgICB0aGlzLmhhbmRsaW5nSW5wdXQgPSB0cnVlXG4gICAgdGhpcy5yZXF1ZXN0ZWRSZW5kZXIgPSBmYWxzZVxuICB9XG5cbiAgaW5wdXRDb250cm9sbGVyRGlkUmVxdWVzdFJlbmRlcigpIHtcbiAgICB0aGlzLnJlcXVlc3RlZFJlbmRlciA9IHRydWVcbiAgfVxuXG4gIGlucHV0Q29udHJvbGxlckRpZEhhbmRsZUlucHV0KCkge1xuICAgIHRoaXMuaGFuZGxpbmdJbnB1dCA9IGZhbHNlXG4gICAgaWYgKHRoaXMucmVxdWVzdGVkUmVuZGVyKSB7XG4gICAgICB0aGlzLnJlcXVlc3RlZFJlbmRlciA9IGZhbHNlXG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXIoKVxuICAgIH1cbiAgfVxuXG4gIGlucHV0Q29udHJvbGxlckRpZEFsbG93VW5oYW5kbGVkSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm90aWZ5RWRpdG9yRWxlbWVudChcImNoYW5nZVwiKVxuICB9XG5cbiAgaW5wdXRDb250cm9sbGVyRGlkUmVxdWVzdFJlcGFyc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwYXJzZSgpXG4gIH1cblxuICBpbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5yZWNvcmRUeXBpbmdVbmRvRW50cnkoKVxuICB9XG5cbiAgaW5wdXRDb250cm9sbGVyV2lsbFBlcmZvcm1Gb3JtYXR0aW5nKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5yZWNvcmRGb3JtYXR0aW5nVW5kb0VudHJ5KGF0dHJpYnV0ZU5hbWUpXG4gIH1cblxuICBpbnB1dENvbnRyb2xsZXJXaWxsQ3V0VGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5lZGl0b3IucmVjb3JkVW5kb0VudHJ5KFwiQ3V0XCIpXG4gIH1cblxuICBpbnB1dENvbnRyb2xsZXJXaWxsUGFzdGUocGFzdGUpIHtcbiAgICB0aGlzLmVkaXRvci5yZWNvcmRVbmRvRW50cnkoXCJQYXN0ZVwiKVxuICAgIHRoaXMucGFzdGluZyA9IHRydWVcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwiYmVmb3JlLXBhc3RlXCIsIHsgcGFzdGUgfSlcbiAgfVxuXG4gIGlucHV0Q29udHJvbGxlckRpZFBhc3RlKHBhc3RlKSB7XG4gICAgcGFzdGUucmFuZ2UgPSB0aGlzLnBhc3RlZFJhbmdlXG4gICAgdGhpcy5wYXN0ZWRSYW5nZSA9IG51bGxcbiAgICB0aGlzLnBhc3RpbmcgPSBudWxsXG4gICAgcmV0dXJuIHRoaXMubm90aWZ5RWRpdG9yRWxlbWVudChcInBhc3RlXCIsIHsgcGFzdGUgfSlcbiAgfVxuXG4gIGlucHV0Q29udHJvbGxlcldpbGxNb3ZlVGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5lZGl0b3IucmVjb3JkVW5kb0VudHJ5KFwiTW92ZVwiKVxuICB9XG5cbiAgaW5wdXRDb250cm9sbGVyV2lsbEF0dGFjaEZpbGVzKCkge1xuICAgIHJldHVybiB0aGlzLmVkaXRvci5yZWNvcmRVbmRvRW50cnkoXCJEcm9wIEZpbGVzXCIpXG4gIH1cblxuICBpbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVVuZG8oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yLnVuZG8oKVxuICB9XG5cbiAgaW5wdXRDb250cm9sbGVyV2lsbFBlcmZvcm1SZWRvKCkge1xuICAgIHJldHVybiB0aGlzLmVkaXRvci5yZWRvKClcbiAgfVxuXG4gIGlucHV0Q29udHJvbGxlckRpZFJlY2VpdmVLZXlib2FyZENvbW1hbmQoa2V5cykge1xuICAgIHJldHVybiB0aGlzLnRvb2xiYXJDb250cm9sbGVyLmFwcGx5S2V5Ym9hcmRDb21tYW5kKGtleXMpXG4gIH1cblxuICBpbnB1dENvbnRyb2xsZXJEaWRTdGFydERyYWcoKSB7XG4gICAgdGhpcy5sb2NhdGlvblJhbmdlQmVmb3JlRHJhZyA9IHRoaXMuc2VsZWN0aW9uTWFuYWdlci5nZXRMb2NhdGlvblJhbmdlKClcbiAgfVxuXG4gIGlucHV0Q29udHJvbGxlckRpZFJlY2VpdmVEcmFnT3ZlclBvaW50KHBvaW50KSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5zZXRMb2NhdGlvblJhbmdlRnJvbVBvaW50UmFuZ2UocG9pbnQpXG4gIH1cblxuICBpbnB1dENvbnRyb2xsZXJEaWRDYW5jZWxEcmFnKCkge1xuICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5zZXRMb2NhdGlvblJhbmdlKHRoaXMubG9jYXRpb25SYW5nZUJlZm9yZURyYWcpXG4gICAgdGhpcy5sb2NhdGlvblJhbmdlQmVmb3JlRHJhZyA9IG51bGxcbiAgfVxuXG4gIC8vIFNlbGVjdGlvbiBtYW5hZ2VyIGRlbGVnYXRlXG5cbiAgbG9jYXRpb25SYW5nZURpZENoYW5nZShsb2NhdGlvblJhbmdlKSB7XG4gICAgdGhpcy5jb21wb3NpdGlvbi51cGRhdGVDdXJyZW50QXR0cmlidXRlcygpXG4gICAgdGhpcy51cGRhdGVDdXJyZW50QWN0aW9ucygpXG4gICAgaWYgKHRoaXMuYXR0YWNobWVudExvY2F0aW9uUmFuZ2UgJiYgIXJhbmdlc0FyZUVxdWFsKHRoaXMuYXR0YWNobWVudExvY2F0aW9uUmFuZ2UsIGxvY2F0aW9uUmFuZ2UpKSB7XG4gICAgICB0aGlzLmNvbXBvc2l0aW9uLnN0b3BFZGl0aW5nQXR0YWNobWVudCgpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJzZWxlY3Rpb24tY2hhbmdlXCIpXG4gIH1cblxuICAvLyBUb29sYmFyIGNvbnRyb2xsZXIgZGVsZWdhdGVcblxuICB0b29sYmFyRGlkQ2xpY2tCdXR0b24oKSB7XG4gICAgaWYgKCF0aGlzLmdldExvY2F0aW9uUmFuZ2UoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0TG9jYXRpb25SYW5nZSh7IGluZGV4OiAwLCBvZmZzZXQ6IDAgfSlcbiAgICB9XG4gIH1cblxuICB0b29sYmFyRGlkSW52b2tlQWN0aW9uKGFjdGlvbk5hbWUsIGludm9raW5nRWxlbWVudCkge1xuICAgIHJldHVybiB0aGlzLmludm9rZUFjdGlvbihhY3Rpb25OYW1lLCBpbnZva2luZ0VsZW1lbnQpXG4gIH1cblxuICB0b29sYmFyRGlkVG9nZ2xlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICB0aGlzLnJlY29yZEZvcm1hdHRpbmdVbmRvRW50cnkoYXR0cmlidXRlTmFtZSlcbiAgICB0aGlzLmNvbXBvc2l0aW9uLnRvZ2dsZUN1cnJlbnRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSlcbiAgICB0aGlzLnJlbmRlcigpXG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbkZyb3plbikge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yRWxlbWVudC5mb2N1cygpXG4gICAgfVxuICB9XG5cbiAgdG9vbGJhckRpZFVwZGF0ZUF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMucmVjb3JkRm9ybWF0dGluZ1VuZG9FbnRyeShhdHRyaWJ1dGVOYW1lKVxuICAgIHRoaXMuY29tcG9zaXRpb24uc2V0Q3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCB2YWx1ZSlcbiAgICB0aGlzLnJlbmRlcigpXG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbkZyb3plbikge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yRWxlbWVudC5mb2N1cygpXG4gICAgfVxuICB9XG5cbiAgdG9vbGJhckRpZFJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgdGhpcy5yZWNvcmRGb3JtYXR0aW5nVW5kb0VudHJ5KGF0dHJpYnV0ZU5hbWUpXG4gICAgdGhpcy5jb21wb3NpdGlvbi5yZW1vdmVDdXJyZW50QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpXG4gICAgdGhpcy5yZW5kZXIoKVxuICAgIGlmICghdGhpcy5zZWxlY3Rpb25Gcm96ZW4pIHtcbiAgICAgIHJldHVybiB0aGlzLmVkaXRvckVsZW1lbnQuZm9jdXMoKVxuICAgIH1cbiAgfVxuXG4gIHRvb2xiYXJXaWxsU2hvd0RpYWxvZyhkaWFsb2dFbGVtZW50KSB7XG4gICAgdGhpcy5jb21wb3NpdGlvbi5leHBhbmRTZWxlY3Rpb25Gb3JFZGl0aW5nKClcbiAgICByZXR1cm4gdGhpcy5mcmVlemVTZWxlY3Rpb24oKVxuICB9XG5cbiAgdG9vbGJhckRpZFNob3dEaWFsb2coZGlhbG9nTmFtZSkge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJ0b29sYmFyLWRpYWxvZy1zaG93XCIsIHsgZGlhbG9nTmFtZSB9KVxuICB9XG5cbiAgdG9vbGJhckRpZEhpZGVEaWFsb2coZGlhbG9nTmFtZSkge1xuICAgIHRoaXMudGhhd1NlbGVjdGlvbigpXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50LmZvY3VzKClcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwidG9vbGJhci1kaWFsb2ctaGlkZVwiLCB7IGRpYWxvZ05hbWUgfSlcbiAgfVxuXG4gIC8vIFNlbGVjdGlvblxuXG4gIGZyZWV6ZVNlbGVjdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuc2VsZWN0aW9uRnJvemVuKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIubG9jaygpXG4gICAgICB0aGlzLmNvbXBvc2l0aW9uLmZyZWV6ZVNlbGVjdGlvbigpXG4gICAgICB0aGlzLnNlbGVjdGlvbkZyb3plbiA9IHRydWVcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gICAgfVxuICB9XG5cbiAgdGhhd1NlbGVjdGlvbigpIHtcbiAgICBpZiAodGhpcy5zZWxlY3Rpb25Gcm96ZW4pIHtcbiAgICAgIHRoaXMuY29tcG9zaXRpb24udGhhd1NlbGVjdGlvbigpXG4gICAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIudW5sb2NrKClcbiAgICAgIHRoaXMuc2VsZWN0aW9uRnJvemVuID0gZmFsc2VcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gICAgfVxuICB9XG5cbiAgY2FuSW52b2tlQWN0aW9uKGFjdGlvbk5hbWUpIHtcbiAgICBpZiAodGhpcy5hY3Rpb25Jc0V4dGVybmFsKGFjdGlvbk5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gISF0aGlzLmFjdGlvbnNbYWN0aW9uTmFtZV0/LnRlc3Q/LmNhbGwodGhpcylcbiAgICB9XG4gIH1cblxuICBpbnZva2VBY3Rpb24oYWN0aW9uTmFtZSwgaW52b2tpbmdFbGVtZW50KSB7XG4gICAgaWYgKHRoaXMuYWN0aW9uSXNFeHRlcm5hbChhY3Rpb25OYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXMubm90aWZ5RWRpdG9yRWxlbWVudChcImFjdGlvbi1pbnZva2VcIiwgeyBhY3Rpb25OYW1lLCBpbnZva2luZ0VsZW1lbnQgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uc1thY3Rpb25OYW1lXT8ucGVyZm9ybT8uY2FsbCh0aGlzKVxuICAgIH1cbiAgfVxuXG4gIGFjdGlvbklzRXh0ZXJuYWwoYWN0aW9uTmFtZSkge1xuICAgIHJldHVybiAvXngtLi8udGVzdChhY3Rpb25OYW1lKVxuICB9XG5cbiAgZ2V0Q3VycmVudEFjdGlvbnMoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge31cbiAgICBmb3IgKGNvbnN0IGFjdGlvbk5hbWUgaW4gdGhpcy5hY3Rpb25zKSB7XG4gICAgICByZXN1bHRbYWN0aW9uTmFtZV0gPSB0aGlzLmNhbkludm9rZUFjdGlvbihhY3Rpb25OYW1lKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICB1cGRhdGVDdXJyZW50QWN0aW9ucygpIHtcbiAgICBjb25zdCBjdXJyZW50QWN0aW9ucyA9IHRoaXMuZ2V0Q3VycmVudEFjdGlvbnMoKVxuICAgIGlmICghb2JqZWN0c0FyZUVxdWFsKGN1cnJlbnRBY3Rpb25zLCB0aGlzLmN1cnJlbnRBY3Rpb25zKSkge1xuICAgICAgdGhpcy5jdXJyZW50QWN0aW9ucyA9IGN1cnJlbnRBY3Rpb25zXG4gICAgICB0aGlzLnRvb2xiYXJDb250cm9sbGVyLnVwZGF0ZUFjdGlvbnModGhpcy5jdXJyZW50QWN0aW9ucylcbiAgICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJhY3Rpb25zLWNoYW5nZVwiLCB7IGFjdGlvbnM6IHRoaXMuY3VycmVudEFjdGlvbnMgfSlcbiAgICB9XG4gIH1cblxuICAvLyBFZGl0b3IgZmlsdGVyc1xuXG4gIHJ1bkVkaXRvckZpbHRlcnMoKSB7XG4gICAgbGV0IHNuYXBzaG90ID0gdGhpcy5jb21wb3NpdGlvbi5nZXRTbmFwc2hvdCgpXG5cbiAgICBBcnJheS5mcm9tKHRoaXMuZWRpdG9yLmZpbHRlcnMpLmZvckVhY2goKGZpbHRlcikgPT4ge1xuICAgICAgY29uc3QgeyBkb2N1bWVudCwgc2VsZWN0ZWRSYW5nZSB9ID0gc25hcHNob3RcbiAgICAgIHNuYXBzaG90ID0gZmlsdGVyLmNhbGwodGhpcy5lZGl0b3IsIHNuYXBzaG90KSB8fCB7fVxuICAgICAgaWYgKCFzbmFwc2hvdC5kb2N1bWVudCkge1xuICAgICAgICBzbmFwc2hvdC5kb2N1bWVudCA9IGRvY3VtZW50XG4gICAgICB9XG4gICAgICBpZiAoIXNuYXBzaG90LnNlbGVjdGVkUmFuZ2UpIHtcbiAgICAgICAgc25hcHNob3Quc2VsZWN0ZWRSYW5nZSA9IHNlbGVjdGVkUmFuZ2VcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYgKCFzbmFwc2hvdHNBcmVFcXVhbChzbmFwc2hvdCwgdGhpcy5jb21wb3NpdGlvbi5nZXRTbmFwc2hvdCgpKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24ubG9hZFNuYXBzaG90KHNuYXBzaG90KVxuICAgIH1cbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICB1cGRhdGVJbnB1dEVsZW1lbnQoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuY29tcG9zaXRpb25Db250cm9sbGVyLmdldFNlcmlhbGl6YWJsZUVsZW1lbnQoKVxuICAgIGNvbnN0IHZhbHVlID0gc2VyaWFsaXplVG9Db250ZW50VHlwZShlbGVtZW50LCBcInRleHQvaHRtbFwiKVxuICAgIHJldHVybiB0aGlzLmVkaXRvckVsZW1lbnQuc2V0Rm9ybVZhbHVlKHZhbHVlKVxuICB9XG5cbiAgbm90aWZ5RWRpdG9yRWxlbWVudChtZXNzYWdlLCBkYXRhKSB7XG4gICAgc3dpdGNoIChtZXNzYWdlKSB7XG4gICAgICBjYXNlIFwiZG9jdW1lbnQtY2hhbmdlXCI6XG4gICAgICAgIHRoaXMuZG9jdW1lbnRDaGFuZ2VkU2luY2VMYXN0UmVuZGVyID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcInJlbmRlclwiOlxuICAgICAgICBpZiAodGhpcy5kb2N1bWVudENoYW5nZWRTaW5jZUxhc3RSZW5kZXIpIHtcbiAgICAgICAgICB0aGlzLmRvY3VtZW50Q2hhbmdlZFNpbmNlTGFzdFJlbmRlciA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwiY2hhbmdlXCIpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgXCJjaGFuZ2VcIjpcbiAgICAgIGNhc2UgXCJhdHRhY2htZW50LWFkZFwiOlxuICAgICAgY2FzZSBcImF0dGFjaG1lbnQtZWRpdFwiOlxuICAgICAgY2FzZSBcImF0dGFjaG1lbnQtcmVtb3ZlXCI6XG4gICAgICAgIHRoaXMudXBkYXRlSW5wdXRFbGVtZW50KClcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lZGl0b3JFbGVtZW50Lm5vdGlmeShtZXNzYWdlLCBkYXRhKVxuICB9XG5cbiAgcmVtb3ZlQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgdGhpcy5lZGl0b3IucmVjb3JkVW5kb0VudHJ5KFwiRGVsZXRlIEF0dGFjaG1lbnRcIilcbiAgICB0aGlzLmNvbXBvc2l0aW9uLnJlbW92ZUF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICByZXR1cm4gdGhpcy5yZW5kZXIoKVxuICB9XG5cbiAgcmVjb3JkRm9ybWF0dGluZ1VuZG9FbnRyeShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgY29uc3QgYmxvY2tDb25maWcgPSBnZXRCbG9ja0NvbmZpZyhhdHRyaWJ1dGVOYW1lKVxuICAgIGNvbnN0IGxvY2F0aW9uUmFuZ2UgPSB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuZ2V0TG9jYXRpb25SYW5nZSgpXG4gICAgaWYgKGJsb2NrQ29uZmlnIHx8ICFyYW5nZUlzQ29sbGFwc2VkKGxvY2F0aW9uUmFuZ2UpKSB7XG4gICAgICByZXR1cm4gdGhpcy5lZGl0b3IucmVjb3JkVW5kb0VudHJ5KFwiRm9ybWF0dGluZ1wiLCB7IGNvbnRleHQ6IHRoaXMuZ2V0VW5kb0NvbnRleHQoKSwgY29uc29saWRhdGFibGU6IHRydWUgfSlcbiAgICB9XG4gIH1cblxuICByZWNvcmRUeXBpbmdVbmRvRW50cnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yLnJlY29yZFVuZG9FbnRyeShcIlR5cGluZ1wiLCB7XG4gICAgICBjb250ZXh0OiB0aGlzLmdldFVuZG9Db250ZXh0KHRoaXMuY3VycmVudEF0dHJpYnV0ZXMpLFxuICAgICAgY29uc29saWRhdGFibGU6IHRydWUsXG4gICAgfSlcbiAgfVxuXG4gIGdldFVuZG9Db250ZXh0KC4uLmNvbnRleHQpIHtcbiAgICByZXR1cm4gWyB0aGlzLmdldExvY2F0aW9uQ29udGV4dCgpLCB0aGlzLmdldFRpbWVDb250ZXh0KCksIC4uLkFycmF5LmZyb20oY29udGV4dCkgXVxuICB9XG5cbiAgZ2V0TG9jYXRpb25Db250ZXh0KCkge1xuICAgIGNvbnN0IGxvY2F0aW9uUmFuZ2UgPSB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuZ2V0TG9jYXRpb25SYW5nZSgpXG4gICAgaWYgKHJhbmdlSXNDb2xsYXBzZWQobG9jYXRpb25SYW5nZSkpIHtcbiAgICAgIHJldHVybiBsb2NhdGlvblJhbmdlWzBdLmluZGV4XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsb2NhdGlvblJhbmdlXG4gICAgfVxuICB9XG5cbiAgZ2V0VGltZUNvbnRleHQoKSB7XG4gICAgaWYgKGNvbmZpZy51bmRvLmludGVydmFsID4gMCkge1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyBjb25maWcudW5kby5pbnRlcnZhbClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gIH1cblxuICBpc0ZvY3VzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yRWxlbWVudCA9PT0gdGhpcy5lZGl0b3JFbGVtZW50Lm93bmVyRG9jdW1lbnQ/LmFjdGl2ZUVsZW1lbnRcbiAgfVxuXG4gIC8vIERldGVjdCBcIkN1cnNvciBkaXNhcHBlYXJzIHNwb3JhZGljYWxseVwiIEZpcmVmb3ggYnVnLlxuICAvLyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTIyNjMwMVxuICBpc0ZvY3VzZWRJbnZpc2libHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNGb2N1c2VkKCkgJiYgIXRoaXMuZ2V0TG9jYXRpb25SYW5nZSgpXG4gIH1cblxuICBnZXQgYWN0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5hY3Rpb25zXG4gIH1cbn1cblxuRWRpdG9yQ29udHJvbGxlci5wcm94eU1ldGhvZChcImdldFNlbGVjdGlvbk1hbmFnZXIoKS5zZXRMb2NhdGlvblJhbmdlXCIpXG5FZGl0b3JDb250cm9sbGVyLnByb3h5TWV0aG9kKFwiZ2V0U2VsZWN0aW9uTWFuYWdlcigpLmdldExvY2F0aW9uUmFuZ2VcIilcbiIsICJpbXBvcnQgKiBhcyBjb25maWcgZnJvbSBcInRyaXgvY29uZmlnXCJcblxuaW1wb3J0IHsgaW5zdGFsbERlZmF1bHRDU1NGb3JUYWdOYW1lIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuaW5zdGFsbERlZmF1bHRDU1NGb3JUYWdOYW1lKFwidHJpeC10b29sYmFyXCIsIGBcXFxuJXQge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuJXQge1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xufVxuXG4ldCBbZGF0YS10cml4LWRpYWxvZ10ge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4ldCBbZGF0YS10cml4LWRpYWxvZ11bZGF0YS10cml4LWFjdGl2ZV0ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuJXQgW2RhdGEtdHJpeC1kaWFsb2ddIFtkYXRhLXRyaXgtdmFsaWRhdGVdOmludmFsaWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZkZGRkO1xufWApXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyaXhUb29sYmFyRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcblxuICAvLyBFbGVtZW50IGxpZmVjeWNsZVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLmlubmVySFRNTCA9PT0gXCJcIikge1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSBjb25maWcudG9vbGJhci5nZXREZWZhdWx0SFRNTCgpXG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5cbmltcG9ydCB7XG4gIGZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlLFxuICBoYW5kbGVFdmVudCxcbiAgaGFuZGxlRXZlbnRPbmNlLFxuICBpbnN0YWxsRGVmYXVsdENTU0ZvclRhZ05hbWUsXG4gIG1ha2VFbGVtZW50LFxuICB0cmlnZ2VyRXZlbnQsXG59IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5cbmltcG9ydCB7IGF0dGFjaG1lbnRTZWxlY3RvciB9IGZyb20gXCJ0cml4L2NvbmZpZy9hdHRhY2htZW50c1wiXG5pbXBvcnQgRWRpdG9yQ29udHJvbGxlciBmcm9tIFwidHJpeC9jb250cm9sbGVycy9lZGl0b3JfY29udHJvbGxlclwiXG5pbXBvcnQgXCJ0cml4L2VsZW1lbnRzL3RyaXhfdG9vbGJhcl9lbGVtZW50XCJcblxubGV0IGlkID0gMFxuXG4vLyBDb250ZW50ZWRpdGFibGUgc3VwcG9ydCBoZWxwZXJzXG5cbmNvbnN0IGF1dG9mb2N1cyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiOmZvY3VzXCIpKSB7XG4gICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKFwiYXV0b2ZvY3VzXCIpICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbYXV0b2ZvY3VzXVwiKSA9PT0gZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuZm9jdXMoKVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBtYWtlRWRpdGFibGUgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiKSkge1xuICAgIHJldHVyblxuICB9XG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIsIFwiXCIpXG4gIHJldHVybiBoYW5kbGVFdmVudE9uY2UoXCJmb2N1c1wiLCB7XG4gICAgb25FbGVtZW50OiBlbGVtZW50LFxuICAgIHdpdGhDYWxsYmFjaygpIHtcbiAgICAgIHJldHVybiBjb25maWd1cmVDb250ZW50RWRpdGFibGUoZWxlbWVudClcbiAgICB9LFxuICB9KVxufVxuXG5jb25zdCBjb25maWd1cmVDb250ZW50RWRpdGFibGUgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGRpc2FibGVPYmplY3RSZXNpemluZyhlbGVtZW50KVxuICByZXR1cm4gc2V0RGVmYXVsdFBhcmFncmFwaFNlcGFyYXRvcihlbGVtZW50KVxufVxuXG5jb25zdCBkaXNhYmxlT2JqZWN0UmVzaXppbmcgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGlmIChkb2N1bWVudC5xdWVyeUNvbW1hbmRTdXBwb3J0ZWQ/LihcImVuYWJsZU9iamVjdFJlc2l6aW5nXCIpKSB7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJlbmFibGVPYmplY3RSZXNpemluZ1wiLCBmYWxzZSwgZmFsc2UpXG4gICAgcmV0dXJuIGhhbmRsZUV2ZW50KFwibXNjb250cm9sc2VsZWN0XCIsIHsgb25FbGVtZW50OiBlbGVtZW50LCBwcmV2ZW50RGVmYXVsdDogdHJ1ZSB9KVxuICB9XG59XG5cbmNvbnN0IHNldERlZmF1bHRQYXJhZ3JhcGhTZXBhcmF0b3IgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGlmIChkb2N1bWVudC5xdWVyeUNvbW1hbmRTdXBwb3J0ZWQ/LihcIkRlZmF1bHRQYXJhZ3JhcGhTZXBhcmF0b3JcIikpIHtcbiAgICBjb25zdCB7IHRhZ05hbWUgfSA9IGNvbmZpZy5ibG9ja0F0dHJpYnV0ZXMuZGVmYXVsdFxuICAgIGlmIChbIFwiZGl2XCIsIFwicFwiIF0uaW5jbHVkZXModGFnTmFtZSkpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5leGVjQ29tbWFuZChcIkRlZmF1bHRQYXJhZ3JhcGhTZXBhcmF0b3JcIiwgZmFsc2UsIHRhZ05hbWUpXG4gICAgfVxuICB9XG59XG5cbi8vIEFjY2Vzc2liaWxpdHkgaGVscGVyc1xuXG5jb25zdCBhZGRBY2Nlc3NpYmlsaXR5Um9sZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKFwicm9sZVwiKSkge1xuICAgIHJldHVyblxuICB9XG4gIHJldHVybiBlbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJ0ZXh0Ym94XCIpXG59XG5cbmNvbnN0IGVuc3VyZUFyaWFMYWJlbCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiKSB8fCBlbGVtZW50Lmhhc0F0dHJpYnV0ZShcImFyaWEtbGFiZWxsZWRieVwiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgdXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgdGV4dHMgPSBBcnJheS5mcm9tKGVsZW1lbnQubGFiZWxzKS5tYXAoKGxhYmVsKSA9PiB7XG4gICAgICBpZiAoIWxhYmVsLmNvbnRhaW5zKGVsZW1lbnQpKSByZXR1cm4gbGFiZWwudGV4dENvbnRlbnRcbiAgICB9KS5maWx0ZXIodGV4dCA9PiB0ZXh0KVxuXG4gICAgY29uc3QgdGV4dCA9IHRleHRzLmpvaW4oXCIgXCIpXG4gICAgaWYgKHRleHQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdGV4dClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiKVxuICAgIH1cbiAgfVxuICB1cGRhdGUoKVxuICByZXR1cm4gaGFuZGxlRXZlbnQoXCJmb2N1c1wiLCB7IG9uRWxlbWVudDogZWxlbWVudCwgd2l0aENhbGxiYWNrOiB1cGRhdGUgfSlcbn1cblxuLy8gU3R5bGVcblxuY29uc3QgY3Vyc29yVGFyZ2V0U3R5bGVzID0gKGZ1bmN0aW9uKCkge1xuICBpZiAoY29uZmlnLmJyb3dzZXIuZm9yY2VzT2JqZWN0UmVzaXppbmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGxheTogXCJpbmxpbmVcIixcbiAgICAgIHdpZHRoOiBcImF1dG9cIixcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCIsXG4gICAgICB3aWR0aDogXCIxcHhcIixcbiAgICB9XG4gIH1cbn0pKClcblxuaW5zdGFsbERlZmF1bHRDU1NGb3JUYWdOYW1lKFwidHJpeC1lZGl0b3JcIiwgYFxcXG4ldCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG59XG5cbiV0OmVtcHR5OjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IGF0dHIocGxhY2Vob2xkZXIpO1xuICAgIGNvbG9yOiBncmF5dGV4dDtcbiAgICBjdXJzb3I6IHRleHQ7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgd2hpdGUtc3BhY2U6IHByZS1saW5lO1xufVxuXG4ldCBhW2NvbnRlbnRlZGl0YWJsZT1mYWxzZV0ge1xuICAgIGN1cnNvcjogdGV4dDtcbn1cblxuJXQgaW1nIHtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiBhdXRvO1xufVxuXG4ldCAke2F0dGFjaG1lbnRTZWxlY3Rvcn0gZmlnY2FwdGlvbiB0ZXh0YXJlYSB7XG4gICAgcmVzaXplOiBub25lO1xufVxuXG4ldCAke2F0dGFjaG1lbnRTZWxlY3Rvcn0gZmlnY2FwdGlvbiB0ZXh0YXJlYS50cml4LWF1dG9yZXNpemUtY2xvbmUge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAtOTk5OXB4O1xuICAgIG1heC1oZWlnaHQ6IDBweDtcbn1cblxuJXQgJHthdHRhY2htZW50U2VsZWN0b3J9IGZpZ2NhcHRpb25bZGF0YS10cml4LXBsYWNlaG9sZGVyXTplbXB0eTo6YmVmb3JlIHtcbiAgICBjb250ZW50OiBhdHRyKGRhdGEtdHJpeC1wbGFjZWhvbGRlcik7XG4gICAgY29sb3I6IGdyYXl0ZXh0O1xufVxuXG4ldCBbZGF0YS10cml4LWN1cnNvci10YXJnZXRdIHtcbiAgICBkaXNwbGF5OiAke2N1cnNvclRhcmdldFN0eWxlcy5kaXNwbGF5fSAhaW1wb3J0YW50O1xuICAgIHdpZHRoOiAke2N1cnNvclRhcmdldFN0eWxlcy53aWR0aH0gIWltcG9ydGFudDtcbiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XG4gICAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7XG4gICAgYm9yZGVyOiBub25lICFpbXBvcnRhbnQ7XG59XG5cbiV0IFtkYXRhLXRyaXgtY3Vyc29yLXRhcmdldD1sZWZ0XSB7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcCAhaW1wb3J0YW50O1xuICAgIG1hcmdpbi1sZWZ0OiAtMXB4ICFpbXBvcnRhbnQ7XG59XG5cbiV0IFtkYXRhLXRyaXgtY3Vyc29yLXRhcmdldD1yaWdodF0ge1xuICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b20gIWltcG9ydGFudDtcbiAgICBtYXJnaW4tcmlnaHQ6IC0xcHggIWltcG9ydGFudDtcbn1gKVxuXG5jbGFzcyBFbGVtZW50SW50ZXJuYWxzRGVsZWdhdGUge1xuICAjaW50ZXJuYWxzXG5cbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLiNpbnRlcm5hbHMgPSBlbGVtZW50LmF0dGFjaEludGVybmFscygpXG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLiN2YWxpZGF0ZSgpXG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgfVxuXG4gIGdldCBsYWJlbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2ludGVybmFscy5sYWJlbHNcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmlucHV0RWxlbWVudD8uZGlzYWJsZWRcbiAgfVxuXG4gIHNldCBkaXNhYmxlZCh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC50b2dnbGVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCByZXF1aXJlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50Lmhhc0F0dHJpYnV0ZShcInJlcXVpcmVkXCIpXG4gIH1cblxuICBzZXQgcmVxdWlyZWQodmFsdWUpIHtcbiAgICB0aGlzLmVsZW1lbnQudG9nZ2xlQXR0cmlidXRlKFwicmVxdWlyZWRcIiwgdmFsdWUpXG4gICAgdGhpcy4jdmFsaWRhdGUoKVxuICB9XG5cbiAgZ2V0IHZhbGlkaXR5KCkge1xuICAgIHJldHVybiB0aGlzLiNpbnRlcm5hbHMudmFsaWRpdHlcbiAgfVxuXG4gIGdldCB2YWxpZGF0aW9uTWVzc2FnZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jaW50ZXJuYWxzLnZhbGlkYXRpb25NZXNzYWdlXG4gIH1cblxuICBnZXQgd2lsbFZhbGlkYXRlKCkge1xuICAgIHJldHVybiB0aGlzLiNpbnRlcm5hbHMud2lsbFZhbGlkYXRlXG4gIH1cblxuICBzZXRGb3JtVmFsdWUodmFsdWUpIHtcbiAgICB0aGlzLiN2YWxpZGF0ZSgpXG4gIH1cblxuICBjaGVja1ZhbGlkaXR5KCkge1xuICAgIHJldHVybiB0aGlzLiNpbnRlcm5hbHMuY2hlY2tWYWxpZGl0eSgpXG4gIH1cblxuICByZXBvcnRWYWxpZGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy4jaW50ZXJuYWxzLnJlcG9ydFZhbGlkaXR5KClcbiAgfVxuXG4gIHNldEN1c3RvbVZhbGlkaXR5KHZhbGlkYXRpb25NZXNzYWdlKSB7XG4gICAgdGhpcy4jdmFsaWRhdGUodmFsaWRhdGlvbk1lc3NhZ2UpXG4gIH1cblxuICAjdmFsaWRhdGUoY3VzdG9tVmFsaWRhdGlvbk1lc3NhZ2UgPSBcIlwiKSB7XG4gICAgY29uc3QgeyByZXF1aXJlZCwgdmFsdWUgfSA9IHRoaXMuZWxlbWVudFxuICAgIGNvbnN0IHZhbHVlTWlzc2luZyA9IHJlcXVpcmVkICYmICF2YWx1ZVxuICAgIGNvbnN0IGN1c3RvbUVycm9yID0gISFjdXN0b21WYWxpZGF0aW9uTWVzc2FnZVxuICAgIGNvbnN0IGlucHV0ID0gbWFrZUVsZW1lbnQoXCJpbnB1dFwiLCB7IHJlcXVpcmVkIH0pXG4gICAgY29uc3QgdmFsaWRhdGlvbk1lc3NhZ2UgPSBjdXN0b21WYWxpZGF0aW9uTWVzc2FnZSB8fCBpbnB1dC52YWxpZGF0aW9uTWVzc2FnZVxuXG4gICAgdGhpcy4jaW50ZXJuYWxzLnNldFZhbGlkaXR5KHsgdmFsdWVNaXNzaW5nLCBjdXN0b21FcnJvciB9LCB2YWxpZGF0aW9uTWVzc2FnZSlcbiAgfVxufVxuXG5jbGFzcyBMZWdhY3lEZWxlZ2F0ZSB7XG4gICNmb2N1c0hhbmRsZXJcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy4jZm9jdXNIYW5kbGVyID0gZW5zdXJlQXJpYUxhYmVsKHRoaXMuZWxlbWVudClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2V0XCIsIHRoaXMuI3Jlc2V0QnViYmxlZCwgZmFsc2UpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLiNjbGlja0J1YmJsZWQsIGZhbHNlKVxuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy4jZm9jdXNIYW5kbGVyPy5kZXN0cm95KClcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2V0XCIsIHRoaXMuI3Jlc2V0QnViYmxlZCwgZmFsc2UpXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLiNjbGlja0J1YmJsZWQsIGZhbHNlKVxuICB9XG5cbiAgZ2V0IGxhYmVscygpIHtcbiAgICBjb25zdCBsYWJlbHMgPSBbXVxuICAgIGlmICh0aGlzLmVsZW1lbnQuaWQgJiYgdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQpIHtcbiAgICAgIGxhYmVscy5wdXNoKC4uLkFycmF5LmZyb20odGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgbGFiZWxbZm9yPScke3RoaXMuZWxlbWVudC5pZH0nXWApIHx8IFtdKSlcbiAgICB9XG5cbiAgICBjb25zdCBsYWJlbCA9IGZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlKHRoaXMuZWxlbWVudCwgeyBtYXRjaGluZ1NlbGVjdG9yOiBcImxhYmVsXCIgfSlcbiAgICBpZiAobGFiZWwpIHtcbiAgICAgIGlmIChbIHRoaXMuZWxlbWVudCwgbnVsbCBdLmluY2x1ZGVzKGxhYmVsLmNvbnRyb2wpKSB7XG4gICAgICAgIGxhYmVscy5wdXNoKGxhYmVsKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsYWJlbHNcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpIHtcbiAgICBjb25zb2xlLndhcm4oXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgW2Rpc2FibGVkXSBhdHRyaWJ1dGUgZm9yIHRyaXgtZWRpdG9yIGVsZW1lbnRzLlwiKVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBzZXQgZGlzYWJsZWQodmFsdWUpIHtcbiAgICBjb25zb2xlLndhcm4oXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgW2Rpc2FibGVkXSBhdHRyaWJ1dGUgZm9yIHRyaXgtZWRpdG9yIGVsZW1lbnRzLlwiKVxuICB9XG5cbiAgZ2V0IHJlcXVpcmVkKCkge1xuICAgIGNvbnNvbGUud2FybihcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSBbcmVxdWlyZWRdIGF0dHJpYnV0ZSBmb3IgdHJpeC1lZGl0b3IgZWxlbWVudHMuXCIpXG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHNldCByZXF1aXJlZCh2YWx1ZSkge1xuICAgIGNvbnNvbGUud2FybihcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSBbcmVxdWlyZWRdIGF0dHJpYnV0ZSBmb3IgdHJpeC1lZGl0b3IgZWxlbWVudHMuXCIpXG4gIH1cblxuICBnZXQgdmFsaWRpdHkoKSB7XG4gICAgY29uc29sZS53YXJuKFwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIHZhbGlkaXR5IHByb3BlcnR5IGZvciB0cml4LWVkaXRvciBlbGVtZW50cy5cIilcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHZhbGlkYXRpb25NZXNzYWdlKCkge1xuICAgIGNvbnNvbGUud2FybihcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSB2YWxpZGF0aW9uTWVzc2FnZSBwcm9wZXJ0eSBmb3IgdHJpeC1lZGl0b3IgZWxlbWVudHMuXCIpXG5cbiAgICByZXR1cm4gXCJcIlxuICB9XG5cbiAgZ2V0IHdpbGxWYWxpZGF0ZSgpIHtcbiAgICBjb25zb2xlLndhcm4oXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgd2lsbFZhbGlkYXRlIHByb3BlcnR5IGZvciB0cml4LWVkaXRvciBlbGVtZW50cy5cIilcblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgc2V0Rm9ybVZhbHVlKHZhbHVlKSB7XG4gIH1cblxuICBjaGVja1ZhbGlkaXR5KCkge1xuICAgIGNvbnNvbGUud2FybihcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGNoZWNrVmFsaWRpdHkoKSBmb3IgdHJpeC1lZGl0b3IgZWxlbWVudHMuXCIpXG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgcmVwb3J0VmFsaWRpdHkoKSB7XG4gICAgY29uc29sZS53YXJuKFwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgcmVwb3J0VmFsaWRpdHkoKSBmb3IgdHJpeC1lZGl0b3IgZWxlbWVudHMuXCIpXG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgc2V0Q3VzdG9tVmFsaWRpdHkodmFsaWRhdGlvbk1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLndhcm4oXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBzZXRDdXN0b21WYWxpZGl0eSh2YWxpZGF0aW9uTWVzc2FnZSkgZm9yIHRyaXgtZWRpdG9yIGVsZW1lbnRzLlwiKVxuICB9XG5cbiAgI3Jlc2V0QnViYmxlZCA9IChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSB0aGlzLmVsZW1lbnQuZm9ybSkgcmV0dXJuXG4gICAgdGhpcy5lbGVtZW50LnJlc2V0KClcbiAgfVxuXG4gICNjbGlja0J1YmJsZWQgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuXG4gICAgaWYgKHRoaXMuZWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpKSByZXR1cm5cblxuICAgIGNvbnN0IGxhYmVsID0gZmluZENsb3Nlc3RFbGVtZW50RnJvbU5vZGUoZXZlbnQudGFyZ2V0LCB7IG1hdGNoaW5nU2VsZWN0b3I6IFwibGFiZWxcIiB9KVxuICAgIGlmICghbGFiZWwpIHJldHVyblxuXG4gICAgaWYgKCFBcnJheS5mcm9tKHRoaXMubGFiZWxzKS5pbmNsdWRlcyhsYWJlbCkpIHJldHVyblxuXG4gICAgdGhpcy5lbGVtZW50LmZvY3VzKClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcml4RWRpdG9yRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgc3RhdGljIGZvcm1Bc3NvY2lhdGVkID0gXCJFbGVtZW50SW50ZXJuYWxzXCIgaW4gd2luZG93XG5cbiAgI2RlbGVnYXRlXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuI2RlbGVnYXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5mb3JtQXNzb2NpYXRlZCA/XG4gICAgICBuZXcgRWxlbWVudEludGVybmFsc0RlbGVnYXRlKHRoaXMpIDpcbiAgICAgIG5ldyBMZWdhY3lEZWxlZ2F0ZSh0aGlzKVxuICB9XG5cbiAgLy8gUHJvcGVydGllc1xuXG4gIGdldCB0cml4SWQoKSB7XG4gICAgaWYgKHRoaXMuaGFzQXR0cmlidXRlKFwidHJpeC1pZFwiKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKFwidHJpeC1pZFwiKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShcInRyaXgtaWRcIiwgKytpZClcbiAgICAgIHJldHVybiB0aGlzLnRyaXhJZFxuICAgIH1cbiAgfVxuXG4gIGdldCBsYWJlbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2RlbGVnYXRlLmxhYmVsc1xuICB9XG5cbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLiNkZWxlZ2F0ZS5kaXNhYmxlZFxuICB9XG5cbiAgc2V0IGRpc2FibGVkKHZhbHVlKSB7XG4gICAgdGhpcy4jZGVsZWdhdGUuZGlzYWJsZWQgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IHJlcXVpcmVkKCkge1xuICAgIHJldHVybiB0aGlzLiNkZWxlZ2F0ZS5yZXF1aXJlZFxuICB9XG5cbiAgc2V0IHJlcXVpcmVkKHZhbHVlKSB7XG4gICAgdGhpcy4jZGVsZWdhdGUucmVxdWlyZWQgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IHZhbGlkaXR5KCkge1xuICAgIHJldHVybiB0aGlzLiNkZWxlZ2F0ZS52YWxpZGl0eVxuICB9XG5cbiAgZ2V0IHZhbGlkYXRpb25NZXNzYWdlKCkge1xuICAgIHJldHVybiB0aGlzLiNkZWxlZ2F0ZS52YWxpZGF0aW9uTWVzc2FnZVxuICB9XG5cbiAgZ2V0IHdpbGxWYWxpZGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jZGVsZWdhdGUud2lsbFZhbGlkYXRlXG4gIH1cblxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbE5hbWVcbiAgfVxuXG4gIGdldCB0b29sYmFyRWxlbWVudCgpIHtcbiAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoXCJ0b29sYmFyXCIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50Py5nZXRFbGVtZW50QnlJZCh0aGlzLmdldEF0dHJpYnV0ZShcInRvb2xiYXJcIikpXG4gICAgfSBlbHNlIGlmICh0aGlzLnBhcmVudE5vZGUpIHtcbiAgICAgIGNvbnN0IHRvb2xiYXJJZCA9IGB0cml4LXRvb2xiYXItJHt0aGlzLnRyaXhJZH1gXG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShcInRvb2xiYXJcIiwgdG9vbGJhcklkKVxuICAgICAgY29uc3QgZWxlbWVudCA9IG1ha2VFbGVtZW50KFwidHJpeC10b29sYmFyXCIsIHsgaWQ6IHRvb2xiYXJJZCB9KVxuICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50LCB0aGlzKVxuICAgICAgcmV0dXJuIGVsZW1lbnRcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgfVxuXG4gIGdldCBmb3JtKCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0RWxlbWVudD8uZm9ybVxuICB9XG5cbiAgZ2V0IGlucHV0RWxlbWVudCgpIHtcbiAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoXCJpbnB1dFwiKSkge1xuICAgICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudD8uZ2V0RWxlbWVudEJ5SWQodGhpcy5nZXRBdHRyaWJ1dGUoXCJpbnB1dFwiKSlcbiAgICB9IGVsc2UgaWYgKHRoaXMucGFyZW50Tm9kZSkge1xuICAgICAgY29uc3QgaW5wdXRJZCA9IGB0cml4LWlucHV0LSR7dGhpcy50cml4SWR9YFxuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJpbnB1dFwiLCBpbnB1dElkKVxuICAgICAgY29uc3QgZWxlbWVudCA9IG1ha2VFbGVtZW50KFwiaW5wdXRcIiwgeyB0eXBlOiBcImhpZGRlblwiLCBpZDogaW5wdXRJZCB9KVxuICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50LCB0aGlzLm5leHRFbGVtZW50U2libGluZylcbiAgICAgIHJldHVybiBlbGVtZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICBnZXQgZWRpdG9yKCkge1xuICAgIHJldHVybiB0aGlzLmVkaXRvckNvbnRyb2xsZXI/LmVkaXRvclxuICB9XG5cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRFbGVtZW50Py5uYW1lXG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRFbGVtZW50Py52YWx1ZVxuICB9XG5cbiAgc2V0IHZhbHVlKGRlZmF1bHRWYWx1ZSkge1xuICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlXG4gICAgdGhpcy5lZGl0b3I/LmxvYWRIVE1MKHRoaXMuZGVmYXVsdFZhbHVlKVxuICB9XG5cbiAgLy8gQ29udHJvbGxlciBkZWxlZ2F0ZSBtZXRob2RzXG5cbiAgbm90aWZ5KG1lc3NhZ2UsIGRhdGEpIHtcbiAgICBpZiAodGhpcy5lZGl0b3JDb250cm9sbGVyKSB7XG4gICAgICByZXR1cm4gdHJpZ2dlckV2ZW50KGB0cml4LSR7bWVzc2FnZX1gLCB7IG9uRWxlbWVudDogdGhpcywgYXR0cmlidXRlczogZGF0YSB9KVxuICAgIH1cbiAgfVxuXG4gIHNldEZvcm1WYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0aGlzLmlucHV0RWxlbWVudCkge1xuICAgICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUgPSB2YWx1ZVxuICAgICAgdGhpcy4jZGVsZWdhdGUuc2V0Rm9ybVZhbHVlKHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIC8vIEVsZW1lbnQgbGlmZWN5Y2xlXG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgaWYgKCF0aGlzLmhhc0F0dHJpYnV0ZShcImRhdGEtdHJpeC1pbnRlcm5hbFwiKSkge1xuICAgICAgbWFrZUVkaXRhYmxlKHRoaXMpXG4gICAgICBhZGRBY2Nlc3NpYmlsaXR5Um9sZSh0aGlzKVxuXG4gICAgICBpZiAoIXRoaXMuZWRpdG9yQ29udHJvbGxlcikge1xuICAgICAgICB0cmlnZ2VyRXZlbnQoXCJ0cml4LWJlZm9yZS1pbml0aWFsaXplXCIsIHsgb25FbGVtZW50OiB0aGlzIH0pXG4gICAgICAgIHRoaXMuZWRpdG9yQ29udHJvbGxlciA9IG5ldyBFZGl0b3JDb250cm9sbGVyKHtcbiAgICAgICAgICBlZGl0b3JFbGVtZW50OiB0aGlzLFxuICAgICAgICAgIGh0bWw6IHRoaXMuZGVmYXVsdFZhbHVlID0gdGhpcy52YWx1ZSxcbiAgICAgICAgfSlcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRyaWdnZXJFdmVudChcInRyaXgtaW5pdGlhbGl6ZVwiLCB7IG9uRWxlbWVudDogdGhpcyB9KSlcbiAgICAgIH1cbiAgICAgIHRoaXMuZWRpdG9yQ29udHJvbGxlci5yZWdpc3RlclNlbGVjdGlvbk1hbmFnZXIoKVxuICAgICAgdGhpcy4jZGVsZWdhdGUuY29ubmVjdGVkQ2FsbGJhY2soKVxuICAgICAgYXV0b2ZvY3VzKHRoaXMpXG4gICAgfVxuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5lZGl0b3JDb250cm9sbGVyPy51bnJlZ2lzdGVyU2VsZWN0aW9uTWFuYWdlcigpXG4gICAgdGhpcy4jZGVsZWdhdGUuZGlzY29ubmVjdGVkQ2FsbGJhY2soKVxuICB9XG5cbiAgLy8gRm9ybSBzdXBwb3J0XG5cbiAgY2hlY2tWYWxpZGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy4jZGVsZWdhdGUuY2hlY2tWYWxpZGl0eSgpXG4gIH1cblxuICByZXBvcnRWYWxpZGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy4jZGVsZWdhdGUucmVwb3J0VmFsaWRpdHkoKVxuICB9XG5cbiAgc2V0Q3VzdG9tVmFsaWRpdHkodmFsaWRhdGlvbk1lc3NhZ2UpIHtcbiAgICB0aGlzLiNkZWxlZ2F0ZS5zZXRDdXN0b21WYWxpZGl0eSh2YWxpZGF0aW9uTWVzc2FnZSlcbiAgfVxuXG4gIGZvcm1EaXNhYmxlZENhbGxiYWNrKGRpc2FibGVkKSB7XG4gICAgaWYgKHRoaXMuaW5wdXRFbGVtZW50KSB7XG4gICAgICB0aGlzLmlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGRpc2FibGVkXG4gICAgfVxuICAgIHRoaXMudG9nZ2xlQXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIsICFkaXNhYmxlZClcbiAgfVxuXG4gIGZvcm1SZXNldENhbGxiYWNrKCkge1xuICAgIHRoaXMucmVzZXQoKVxuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuZGVmYXVsdFZhbHVlXG4gIH1cbn1cbiIsICJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uLy4uL3BhY2thZ2UuanNvblwiXG5cbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tIFwidHJpeC9jb25maWdcIlxuaW1wb3J0ICogYXMgY29yZSBmcm9tIFwidHJpeC9jb3JlXCJcbmltcG9ydCAqIGFzIG1vZGVscyBmcm9tIFwidHJpeC9tb2RlbHNcIlxuaW1wb3J0ICogYXMgdmlld3MgZnJvbSBcInRyaXgvdmlld3NcIlxuaW1wb3J0ICogYXMgY29udHJvbGxlcnMgZnJvbSBcInRyaXgvY29udHJvbGxlcnNcIlxuaW1wb3J0ICogYXMgb2JzZXJ2ZXJzIGZyb20gXCJ0cml4L29ic2VydmVyc1wiXG5pbXBvcnQgKiBhcyBvcGVyYXRpb25zIGZyb20gXCJ0cml4L29wZXJhdGlvbnNcIlxuaW1wb3J0ICogYXMgZWxlbWVudHMgZnJvbSBcInRyaXgvZWxlbWVudHNcIlxuaW1wb3J0ICogYXMgZmlsdGVycyBmcm9tIFwidHJpeC9maWx0ZXJzXCJcblxuY29uc3QgVHJpeCA9IHtcbiAgVkVSU0lPTjogdmVyc2lvbixcbiAgY29uZmlnLFxuICBjb3JlLFxuICBtb2RlbHMsXG4gIHZpZXdzLFxuICBjb250cm9sbGVycyxcbiAgb2JzZXJ2ZXJzLFxuICBvcGVyYXRpb25zLFxuICBlbGVtZW50cyxcbiAgZmlsdGVyc1xufVxuXG4vLyBFeHBvc2UgbW9kZWxzIHVuZGVyIHRoZSBUcml4IGNvbnN0YW50IGZvciBjb21wYXRpYmlsaXR5IHdpdGggdjFcbk9iamVjdC5hc3NpZ24oVHJpeCwgbW9kZWxzKVxuXG5mdW5jdGlvbiBzdGFydCgpIHtcbiAgaWYgKCFjdXN0b21FbGVtZW50cy5nZXQoXCJ0cml4LXRvb2xiYXJcIikpIHtcbiAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ0cml4LXRvb2xiYXJcIiwgZWxlbWVudHMuVHJpeFRvb2xiYXJFbGVtZW50KVxuICB9XG5cbiAgaWYgKCFjdXN0b21FbGVtZW50cy5nZXQoXCJ0cml4LWVkaXRvclwiKSkge1xuICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZShcInRyaXgtZWRpdG9yXCIsIGVsZW1lbnRzLlRyaXhFZGl0b3JFbGVtZW50KVxuICB9XG59XG5cbndpbmRvdy5Ucml4ID0gVHJpeFxuc2V0VGltZW91dChzdGFydCwgMClcblxuZXhwb3J0IGRlZmF1bHQgVHJpeFxuIiwgImNvbnN0IFMzVXBsb2FkZXIgPSBmdW5jdGlvbiAoZW50cmllcywgb25WaWV3RXJyb3IpIHtcbiAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcbiAgICBvblZpZXdFcnJvcigoKSA9PiB4aHIuYWJvcnQoKSlcbiAgICB4aHIub25sb2FkID0gKCkgPT4geGhyLnN0YXR1cyA9PT0gMjAwID8gZW50cnkucHJvZ3Jlc3MoMTAwKSA6IGVudHJ5LmVycm9yKClcbiAgICB4aHIub25lcnJvciA9ICgpID0+IGVudHJ5LmVycm9yKClcblxuICAgIHhoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsIChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50Lmxlbmd0aENvbXB1dGFibGUpIHtcbiAgICAgICAgbGV0IHBlcmNlbnQgPSBNYXRoLnJvdW5kKChldmVudC5sb2FkZWQgLyBldmVudC50b3RhbCkgKiAxMDApXG4gICAgICAgIGlmIChwZXJjZW50IDwgMTAwKSB7IGVudHJ5LnByb2dyZXNzKHBlcmNlbnQpIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgbGV0IHVybCA9IGVudHJ5Lm1ldGEudXJsXG4gICAgeGhyLm9wZW4oXCJQVVRcIiwgdXJsLCB0cnVlKVxuICAgIHhoci5zZW5kKGVudHJ5LmZpbGUpXG4gIH0pXG59XG5leHBvcnQgZGVmYXVsdCBTM1VwbG9hZGVyXG4iLCAiY29uc3QgTG9jYWxlSW5Mb2NhbFN0b3JhZ2UgPSB7XG4gIG1vdW50ZWQoKSB7XG4gICAgaWYgKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2xvY2FsZScpKSB7XG4gICAgICB0aGlzLnB1c2hFdmVudFRvKHRoaXMuZWwsIFwiZ290LWxvY2FsZVwiLCB7IGxvY2FsZTogc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnbG9jYWxlJykgfSlcbiAgICB9XG5cbiAgICB0aGlzLmhhbmRsZUV2ZW50KFwic2V0LWxvY2FsZVwiLCAoeyBsb2NhbGUgfSkgPT5cbiAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJsb2NhbGVcIiwgbG9jYWxlKVxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMb2NhbGVJbkxvY2FsU3RvcmFnZVxuIiwgIi8vIEF0dHJpYnV0ZSB3aGljaCB3ZSB1c2UgdG8gcmUtdHJpZ2dlciB0aGUgY2xpY2sgZXZlbnRcbmNvbnN0IENPTkZJUk1fQVRUUklCVVRFID0gXCJkYXRhLWNvbmZpcm0tZmlyZWRcIlxuXG4vLyBvdXIgZGlhbG9nIGZyb20gdGhlIGByb290Lmh0bWwuaGVleGBcbmNvbnN0IERBTkdFUl9ESUFMT0cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRhbmdlcl9kaWFsb2dcIik7XG5cbmNvbnN0IGV4ZWNBdHRyID0gKGVsLCBhdHRyTmFtZSkgPT4ge1xuICBjb25zdCBhdHRyID0gZWwuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgYXR0ciAmJiBsaXZlU29ja2V0LmV4ZWNKUyhlbCwgYXR0cik7XG59XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidWx0cmEtY29uZmlybVwiLCAoZXZlbnQpID0+IHtcbiAgY29uc3QgeyBkZXRhaWwsIHNyY0VsZW1lbnQgfSA9IGV2ZW50XG4gIGNvbnN0IHsgbWVzc2FnZSB9ID0gZGV0YWlsO1xuXG4gIGNvbnN0IHRhcmdldEJ1dHRvbiA9IGV2ZW50LnRhcmdldFxuXG4gIC8vIFdlIGRvIHRoaXMgc2luY2UgYHdpbmRvdy5jb25maXJtYCBwcmV2ZW50cyBhbGwgZXhlY3V0aW9uIGJ5IGRlZmF1bHQuXG4gIC8vIFRvIHJlY3JlYXRlIHRoaXMgYmVoYXZpb3VyIHdlIGBwcmV2ZW50RGVmYXVsdGBcbiAgLy8gVGhlbiBhZGQgYW4gYXR0cmlidXRlIHdoaWNoIHdpbGwgYWxsb3cgdXMgdG8gcmUtdHJpZ2dlciB0aGUgY2xpY2sgZXZlbnQgd2hpbGUgc2tpcHBpbmcgdGhlIGRpYWxvZ1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIHRhcmdldEJ1dHRvbi5zZXRBdHRyaWJ1dGUoQ09ORklSTV9BVFRSSUJVVEUsIFwiXCIpXG5cblxuICBEQU5HRVJfRElBTE9HLnJldHVyblZhbHVlID0gXCJjYW5jZWxcIjtcbiAgREFOR0VSX0RJQUxPRy5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtcmVmPSd0aXRsZSddXCIpLmlubmVyVGV4dCA9IG1lc3NhZ2U7XG5cbiAgLy8gPGRpYWxvZz4gaXMgYSB2ZXJ5IGNvb2wgZWxlbWVudCBhbmQgcHJvdmlkZXMgYSBsb3Qgb2YgY29vbCB0aGluZ3Mgb3V0IG9mIHRoZSBib3gsIGxpa2Ugc2hvd2luZyB0aGUgbW9kYWwgaW4gdGhlICN0b3AtbGF5ZXJcbiAgREFOR0VSX0RJQUxPRy5zaG93TW9kYWwoKTtcblxuICAvLyBSZS10cmlnZ2VyaW5nIGxvZ2ljXG4gIERBTkdFUl9ESUFMT0cuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoeyB0YXJnZXQgfSkgPT4ge1xuICAgIGlmICh0YXJnZXQucmV0dXJuVmFsdWUgPT09IFwiY29uZmlybVwiKSB7XG4gICAgICBleGVjQXR0cihzcmNFbGVtZW50LCBcInBoeC11bHRyYS1jb25maXJtLW9rXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGVjQXR0cihzcmNFbGVtZW50LCBcInBoeC11bHRyYS1jb25maXJtLWNhbmNlbFwiKTtcbiAgICAgIHRhcmdldEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoQ09ORklSTV9BVFRSSUJVVEUpO1xuICAgIH1cbiAgfSlcbn0pXG4iXSwKICAibWFwcGluZ3MiOiAiZ2lCQUFBLElBQUFBLEdBQUFDLEdBQUEsQ0FBQUMsR0FBQUMsS0FBQSxFQU1DLFNBQVVDLEVBQVFDLEVBQVUsQ0FDM0IsY0FHQyxVQUFZLENBR1gsUUFGSUMsRUFBVyxFQUNYQyxFQUFVLENBQUMsS0FBTSxNQUFPLFNBQVUsR0FBRyxFQUNoQ0MsRUFBSSxFQUFHQSxFQUFJRCxFQUFRLFFBQVUsQ0FBQ0gs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Q0FDQSxDQUNBLFNBQUFDLEdBQUFGLEVBQUFDLEVBQUEsQ0FDQSxPQUFBRixHQUFBQyxFQUFBQyxFQUFBLENBQUEsQ0FDQSxDQUNBLFNBQUFFLEdBQUFILEVBQUFDLEVBQUEsQ0FHQSxJQUFBSCxFQUFBLElBQUEsS0FBQUUsQ0FBQSxFQUNBSSxFQUFBTixFQUFBLFNBQUEsRUFBQUcsRUFDQUksRUFBQUQsRUFBQSxHQUNBQyxFQUFBLElBQ0FBLEdBQUEsSUFFQSxJQUFBQyxFQUFBUixFQUFBLFNBQUFNLENBQUEsRUFDQSxPQUFBTixFQUFBLFNBQUEsSUFBQU8sRUFBQVAsRUFBQSxRQUFBLENBQUEsRUFBQVEsQ0FDQSxDQUNBLFNBQUFDLEdBQUFQLEVBQUFDLEVBQUEsQ0FHQSxJQUFBSCxFQUFBLElBQUEsS0FBQUUsQ0FBQSxFQUNBSyxFQUFBUCxFQUFBLFNBQUEsRUFDQVEsRUFBQVIsRUFBQSxZQUFBQSxFQUFBLFlBQUEsRUFBQUcsQ0FBQSxFQUNBLE9BQUFJLElBQUEsR0FBQVAsRUFBQSxTQUFBLElBQUEsRUFBQUEsRUFBQSxRQUFBLENBQUEsRUFBQVEsQ0FDQSxDQUdBLFNBQUFFLEdBQUFDLEVBQUFDLEVBQUEsQ0FDQSxPQUFBRCxFQUFBQyxFQUFBLEdBQUEsQ0FDQSxDQUdBLFNBQUFDLEdBQUFDLEVBQUFDLEVBQUEsQ0FDQSxJQUFBQyxFQUFBLFVBQUEsT0FBQSxHQUFBLFVBQUEsQ0FBQSxJQUFBLE9BQUEsVUFBQSxDQUFBLEVBQUEsRUFDQUMsRUFBQSxJQUFBLEtBQUFILENBQUEsRUFBQSxPQUFBLEVBQ0EsT0FBQWIsR0FBQWEsRUFBQUosR0FBQUssRUFBQUMsQ0FBQSxFQUFBTixHQUFBTyxFQUFBRCxDQUFBLENBQUEsQ0FDQSxDQUdBLFNBQUFFLEdBQUFoQixFQUFBLENBRUEsSUFBQWlCLEVBQUFOLEdBQUFYLEVBQUEsRUFBQSxDQUFBLEVBRUFrQixFQUFBUCxHQUFBLElBQUEsS0FBQU0sQ0FBQSxFQUFBLFNBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLEVBQ0EsT0FBQSxLQUFBLE9BQUFBLEVBQUFDLEdBQUEsTUFBQSxFQUFBLENBQ0EsQ0FJQSxTQUFBQyxHQUFBbkIsRUFBQW9CLEVBQUEsQ0FFQSxJQUFBQyxFQUFBLElBQUEsS0FBQXJCLENBQUEsRUFBQSxZQUFBLEVBQ0EsT0FBQSxLQUFBLE1BQUFxQixFQUFBRCxDQUFBLEVBQUFBLENBQ0EsQ0FHQSxJQUFBRSxHQUFBLDZCQUVBQyxHQUFBLHVCQUVBQyxHQUFBLENBQUEsRUFFQUMsR0FBQSxDQUNBLEVBQUEsU0FBQXpCLEVBQUFxQixFQUFBLENBQ0EsT0FBQSxJQUFBLEtBQUFyQixDQUFBLEVBQUEsWUFBQSxTQUFBcUIsRUFBQSxFQUFBLENBQUEsQ0FDQSxFQUNBLEVBQUEsU0FBQXJCLEVBQUEwQixFQUFBQyxFQUFBLENBQ0EsSUFBQTdCLEVBQUEsSUFBQSxLQUFBRSxDQUFBLEVBQ0E0QixFQUFBLFNBQUFGLEVBQUEsRUFBQSxFQUFBLEVBQ0EsR0FBQSxNQUFBRSxDQUFBLEVBQUEsQ0FDQSxHQUFBLENBQUFGLEVBQ0EsTUFBQSxLQUVBLElBQUFHLEVBQUFILEVBQUEsWUFBQSxFQUNBSSxFQUFBLFNBQUEzYyxFQUFBLENBQ0EsT0FBQUEsRUFBQSxZQUFBLEVBQUEsV0FBQTBjLENBQUEsQ0FDQSxFQU9BLEdBSkFELEVBQUFELEVBQUEsWUFBQSxVQUFBRyxDQUFBLEVBQ0FGLEVBQUEsSUFDQUEsRUFBQUQsRUFBQSxPQUFBLFVBQUFHLENBQUEsR0FFQUYsRUFBQSxFQUNBLE1BQUEsS0FHQSxPQUFBOUIsRUFBQSxTQUFBOEIsQ0FBQSxFQUNBOUIsRUFBQSxTQUFBLElBQUFpQyxHQUFBSCxDQUFBLEVBQUE5QixFQUFBLFFBQUEsQ0FBQSxFQUFBQSxFQUFBLFFBQUEsQ0FDQSxFQUNBLEVBQUEsU0FBQUUsRUFBQVMsRUFBQSxDQUNBLE9BQUEsSUFBQSxLQUFBVCxDQUFBLEVBQUEsUUFBQSxTQUFBUyxFQUFBLEVBQUEsQ0FBQSxDQUNBLENBQ0EsRUFFQXVCLEdBQUEsQ0FDQSxFQUFBLFNBQUFoQyxFQUFBLENBQ0EsT0FBQUEsRUFBQSxRQUFBLENBQ0EsRUFDQSxHQUFBLFNBQUFBLEVBQUEsQ0FDQSxPQUFBaUMsR0FBQWpDLEVBQUEsUUFBQSxFQUFBLENBQUEsQ0FDQSxFQUNBLEVBQUEsU0FBQUEsRUFBQTJCLEVBQUEsQ0FDQSxPQUFBQSxFQUFBLFVBQUEzQixFQUFBLE9BQUEsQ0FBQSxDQUNBLEVBQ0EsR0FBQSxTQUFBQSxFQUFBMkIsRUFBQSxDQUNBLE9BQUFBLEVBQUEsS0FBQTNCLEVBQUEsT0FBQSxDQUFBLENBQ0EsRUFDQSxFQUFBLFNBQUFBLEVBQUEsQ0FDQSxPQUFBQSxFQUFBLFNBQUEsRUFBQSxDQUNBLEVBQ0EsR0FBQSxTQUFBQSxFQUFBLENBQ0EsT0FBQWlDLEdBQUFqQyxFQUFBLFNBQUEsRUFBQSxFQUFBLENBQUEsQ0FDQSxFQUNBLEVBQUEsU0FBQUEsRUFBQTJCLEVBQUEsQ0FDQSxPQUFBQSxFQUFBLFlBQUEzQixFQUFBLFNBQUEsQ0FBQSxDQUNBLEVBQ0EsR0FBQSxTQUFBQSxFQUFBMkIsRUFBQSxDQUNBLE9BQUFBLEVBQUEsT0FBQTNCLEVBQUEsU0FBQSxDQUFBLENBQ0EsRUFDQSxFQUFBLFNBQUFBLEVBQUEsQ0FDQSxPQUFBQSxFQUFBLFlBQUEsQ0FDQSxFQUNBLEdBQUEsU0FBQUEsRUFBQSxDQUNBLE9BQUFpQyxHQUFBakMsRUFBQSxZQUFBLEVBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxDQUNBLEVBQ0EsS0FBQSxTQUFBQSxFQUFBLENBQ0EsT0FBQWlDLEdBQUFqQyxFQUFBLFlBQUEsRUFBQSxDQUFBLENBQ0EsQ0FDQSxFQUdBLFNBQUErQixHQUFBSCxFQUFBLENBQ0EsT0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFHLEdBQUFILEVBQUEsRUFBQSxDQUNBLENBQ0EsU0FBQUssR0FBQUMsRUFBQUMsRUFBQSxDQUNBLE9BQUFELEVBQUEsU0FBQSxFQUFBLFNBQUFDLEVBQUEsR0FBQSxDQUNBLENBQ0EsU0FBQUMsR0FBQUMsRUFBQSxDQUNBLEdBQUEsT0FBQUEsR0FBQSxTQUNBLE1BQUEsSUFBQSxNQUFBLHNCQUFBLEVBRUEsR0FB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QyxHQUFBRCxHQUFBLGlCQUNBRSxHQUFBRixHQUFBLG9CQU1BLFNBQUFHLEdBQUFDLEVBQUFDLEVBQUEsQ0FDQSxJQUFBQyxFQUFBUCxHQUFBLElBQUFLLENBQUEsRUFDQUUsSUFDQUEsRUFBQSxDQUFBLEVBQ0FQLEdBQUEsSUFBQUssRUFBQUUsQ0FBQSxHQUVBRCxFQUFBLFFBQUEsU0FBQUUsRUFBQSxDQUNBTixHQUFBLEtBQUEsTUFBQUEsR0FBQXRGLEVBQUE0RixDQUFBLENBQUEsRUFDQUQsRUFBQSxLQUFBQyxDQUFBLENBQ0EsQ0FBRyxDQUNILENBQ0EsU0FBQUMsR0FBQUosRUFBQSxDQUNBLElBQUFDLEVBQUFOLEdBQUEsSUFBQUssQ0FBQSxFQUNBQyxJQUdBQSxFQUFBLFFBQUEsU0FBQUUsRUFBQSxDQUNBTCxHQUFBLEtBQUEsTUFBQUEsR0FBQXZGLEVBQUE0RixDQUFBLENBQUEsQ0FDQSxDQUFHLEVBQ0hSLEdBQUEsT0FBQUssQ0FBQSxFQUNBLENBSUEsR0FBQSxDQUFBLE1BQUEsVUFBQSxhQUFBLENBQ0EsSUFBQUssR0FBQSxTQUFBQSxFQUFBcGYsRUFBQSxDQUNBLElBQUFxZixFQUFBLFVBQUEsT0FBQSxHQUFBLFVBQUEsQ0FBQSxJQUFBLE9BQUEsVUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUNBQSxFQUFBLEtBQUFyZixDQUFBLEVBQ0EsSUFBQTBDLEVBQ0EsT0FBQTFDLEVBQUEsV0FDQTBDLEVBQUExQyxFQUFBLFdBQ01BLEVBQUEsS0FFTjBDLEVBQUExQyxFQUFBLEtBQ01BLEVBQUEsY0FFTjBDLEVBQUExQyxFQUFBLGFBRUEwQyxFQUFBMGMsRUFBQTFjLEVBQUEyYyxDQUFBLEVBQUFBLENBQ0EsRUFDQSxNQUFBLFVBQUEsYUFBQSxVQUFBLENBQ0EsT0FBQUQsR0FBQSxLQUFBLE1BQUEsQ0FDQSxFQUVBLFNBQUFFLEdBQUFELEVBQUFFLEVBQUFDLEVBQUEsQ0FDQSxJQUFBM0ksRUFBQSxVQUFBLE9BQUEsR0FBQSxVQUFBLENBQUEsSUFBQSxPQUFBLFVBQUEsQ0FBQSxFQUFBLEVBQ0E0SSxFQUFBSixFQUFBeEksQ0FBQSxFQUNBLE9BQUEwSSxFQUFBRSxDQUFBLEVBQ0FBLEVBQ0lBLElBQUFELEdBQUEsQ0FBQUMsRUFBQSxjQUVKLE9BRUFILEdBQUFELEVBQUFFLEVBQUFDLEVBQUEzSSxFQUFBLENBQUEsQ0FDQSxDQUdBLFNBQUE2SSxHQUFBQyxFQUFBQyxFQUFBLENBQ0EsSUFBQUwsRUFBQSxPQUFBSyxHQUFBLFdBQUFBLEVBQUEsU0FBQUgsRUFBQSxDQUNBLE9BQUFBLEVBQUEsUUFBQUcsQ0FBQSxDQUNBLEVBQ0EsT0FBQU4sR0FBQUssRUFBQSxhQUFBLEVBQUFKLEVBQUFJLEVBQUEsYUFBQSxDQUNBLENBR0EsSUFBQUUsR0FBQSxDQUNBLEdBQUEsQ0FDQSxLQUFBLENBQUEsU0FBQSxTQUFBLFVBQUEsWUFBQSxXQUFBLFNBQUEsVUFBQSxFQUNBLFVBQUEsQ0FBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxLQUFBLEVBQ0EsUUFBQSxDQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLElBQUEsRUFDQSxPQUFBLENBQUEsVUFBQSxXQUFBLFFBQUEsUUFBQSxNQUFBLE9BQUEsT0FBQSxTQUFBLFlBQUEsVUFBQSxXQUFBLFVBQUEsRUFDQSxZQUFBLENBQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLEtBQUEsRUFDQSxNQUFBLFFBQ0EsTUFBQSxRQUNBLFlBQUEsTUFDQSxDQUNBLEVBR0E5SixHQUFBLENBQ0EsU0FBQSxHQUNBLGNBQUEsS0FDQSxpQkFBQSxLQUNBLGdCQUFBLEtBQ0EsZUFBQSxLQUNBLGNBQUEsR0FDQSxTQUFBLEdBQ0EsY0FBQSxJQUNBLGNBQUEsQ0FBQSxFQUNBLG1CQUFBLENBQUEsRUFDQSxzQkFBQSxDQUFBLEVBQ0EsZ0JBQUEsT0FFQSxxQkFBQSxHQUNBLE9BQUEsYUFDQSxTQUFBLEtBQ0EsUUFBQSxLQUNBLGlCQUFBLEVBQ0EsUUFBQSxFQUNBLFFBQUEsS0FDQSxVQUFBLDBSQUNBLFlBQUEsT0FDQSxVQUFBLEVBQ0EsVUFBQSwwUkFDQSxlQUFBLEdBQ0EsWUFBQSxHQUNBLFlBQUEsR0FDQSxVQUFBLEVBQ0EsTUFBQSxHQUNBLFNBQUEsR0FDQSxhQUFBLEVBQ0EsZUFBQSxHQUNBLGFBQUEsR0FDQSxVQUFBLENBQ0EsRUFFQStKLEdBQUEsU0FBQSxZQUFBLEVBQ0EsU0FBQUMsR0FBQXBXLEVBQUEsQ0FDQSxPQUFBbVcsR0FBQSx5QkFBQW5XLENBQUEsQ0FDQSxDQUNBLFNBQUFxVyxHQUFBUCxFQUFBLENBQ0FBLEVBQUEsTUFBQSxVQUFBLFNBSUFBLEVBQUEsTUFBQSxVQUNBQSxFQUFBLFFBQUEsYUFBQUEsRUFBQSxNQUFBLFNBRUFBLEVBQUEsTUFBQSxRQUFBLE9BQ0EsQ0FDQSxTQUFBUSxHQUFBUixFQUFBLENBQ0FBLEVBQUEsTUFBQSxVQUFBLFNBR0FBLEVBQUEsUUFBQSxjQUVBQSxFQUFBLE1BQUEsUUFBQUEsRUFBQSxRQUFBLGFBQ0EsT0FBQUEsRUFBQSxRQUFBLGNBRUFBLEVBQUEsTUFBQSxRQUFBLEdBRUEsQ0FDQSxTQUFBUyxHQUFBVCxFQUFBLENBQ0FBLEVBQUEsYUFDQUEsRUFBQSxZQUFBQSxFQUFBLFVBQUEsRUFDQVMsR0FBQVQsQ0FBQSxFQUVBLENBQ0EsU0FBQVUsR0FBQVYsRUFBQVcsRUFBQSxDQUNBRixHQUFBVCxDQUFBLEVBQ0FXLGFBQUEsaUJBQ0FYLEVBQUEsWUFBQVcsQ0FBQSxFQUNJLE9BQUFBLEdBQUEsU0FDSlgsRUFBQSxZQUFBTSxHQUFBSyxDQUFBLENBQUEsRUFDSSxPQUFBQSxFQUFBLFNBQUEsWUFDSkEsRUFBQSxRQUFBLFNBQUFwZ0IsRUFBQSxDQUNBeWYsRUFBQSxZQUFBemYsQ0FBQSxDQUNBLENBQUssQ0FFTCxDQUVBLElBQUFxZ0IsR0FBQXRLLEdBQUEsU0FDQXVLLEdBQUF2SyxHQUFBLE9BQ0F3SyxHQUFBeEssR0FBQSxVQUdBLFNBQUF5SyxHQUFBQyxFQUFBMUUsRUFBQSxDQUNBLE9BQUEwRSxFQUFBLE9BQUEsR0FBQTFFLEdBQUEsR0FBQUEsRUFBQSxFQUFBakMsRUFBQTJHLEVBQUExRSxDQUFBLEVBQUEwRSxDQUNBLENBQ0EsU0FBQUMsR0FBQUMsRUFBQSxDQUNBLE9BQUFBLEVBQUEsR0FBQSxDQUNBLENBR0EsU0FBQUMsR0FBQWhnQixFQUFBK2MsRUFBQVYsRUFBQTRELEVBQUEsQ0FDQSxJQUFBdkYsRUFBQWdELEdBQUExZCxFQUFBK2MsRUFBQVYsQ0FBQSxFQUNBLE9BQUEzQixJQUFBLE9BQUFBLEVBQUF1RixDQUNBLENBR0EsU0FBQUMsR0FBQWxnQixFQUFBaWdCLEVBQUEsQ0FDQSxJQUFBOWMsRUFBQSxVQUFBLE9BQUEsR0FBQSxVQUFBLENBQUEsSUFBQSxPQUFBLFVBQUEsQ0FBQSxFQUFBLEVBQ0FnZCxFQUFBLFNBQUFuZ0IsRUFBQSxFQUFBLEVBQ0EsT0FBQW1nQixHQUFBLEdBQUFBLEdBQUFoZCxFQUFBZ2QsRUFBQUYsQ0FDQSxDQUdBLFNBQUFHLEdBQUFuYyxFQUFBb2MsRUFBQSxDQUNBLElBQUFDLEVBQUEsT0FBQSxPQUFBLENBQUEsRUFBK0JyYyxDQUFBLEVBQy9Cc2MsRUFBQSxDQUFBLEVBQ0F0QixFQUFBb0IsRUFBQSxZQUFBLFFBQ0ExZ0IsRUFBQTBnQixFQUFBLFFBQUEsQ0FBQSxFQUNBdEQsRUFBQXBkLEVBQUEsT0FDQTZnQixFQUFBN2dCLEVBQUEsU0FDQTBjLEVBQUExYyxFQUFBLE9BQ0E4Z0IsRUFBQTlnQixFQUFBLFFBQ0ErZ0IsRUFBQS9nQixFQUFBLFFBQ0FnaEIsRUFBQWhoQixFQUFBLFFBQ0FpaEIsR0FBQWpoQixFQUFBLFVBQ0FraEIsR0FBQWxoQixFQUFBLFVBQ0E2YixHQUFBN2IsRUFBQSxVQUNBLEdBQUEyZ0IsRUFBQSxTQUFBLENBQ0EsSUFBQVEsR0FjQSxHQWJBUixFQUFBLFdBQUFFLElBQ0F2QixFQUFBcUIsRUFBQSxRQUFBLEVBQ0FRLEdBQUFSLEVBQUEsVUFJQVEsR0FBQVIsRUFBQSxTQUFBLE1BQUEsR0FBQSxFQUFBLENBQUEsRUFDQXJCLEVBQUE2QixFQUFBLElBQUEsU0FDQUEsR0FBQSxNQUlBLE9BQUFSLEVBQUEsU0FDQVEsR0FBQSxDQUNBTixFQUFBRCxFQUFBLFNBQUFPLEdBR0EsSUFBQUMsR0FBQTFFLEdBQUE0QyxFQUFBUSxFQUFBLEVBRUFwRCxFQUFBLE9BQUEsT0FBQSxDQUNBLE9BQUFxRCxHQUNBLFVBQUFDLEVBQ0EsRUFBT1YsRUFBQVEsRUFBQSxDQUFBLEVBQ1BlLElBQUFmLElBQ0EsT0FBQSxPQUFBcEQsRUFBQTRDLEVBQUF1QixDQUFBLENBQUEsRUFFQUQsRUFBQSxPQUFBbEUsRUFHQVUsSUFBQWdFLEdBQUEsU0FDQWhFLEVBQUF3RCxFQUFBLE9BQUFsRSxFQUFBLFFBRUFiLEtBQUF1RixHQUFBLFlBQ0F2RixHQUFBK0UsRUFBQSxVQUFBbEUsRUFBQSxVQUNBa0UsRUFBQSxRQUFBVCxHQUFBekQsRUFBQSxTQUFBLElBSUEsR0FBQWlFLEVBQUEsT0FBQSxDQUNBLElBQUFVLEdBQUEsT0FBQVYsRUFBQSxPQUFBLFdBQUEsV0FDQVcsR0FBQSxPQUFBWCxFQUFBLE9BQUEsU0FBQSxXQUNBWSxHQUFBbEYsR0FBQSxLQUFBc0UsRUFBQSxNQUFBLEdBQ0FVLElBQUFDLElBQUFDLE1BQ0FuRSxFQUFBd0QsRUFBQSxPQUFBRCxFQUFBLFFBRUEsT0FBQUEsRUFBQSxPQU9BLElBQUFhLEdBQUFSLEVBQ0FTLEdBQUFYLEVBNEJBLEdBM0JBSCxFQUFBLFVBQUEsU0FDQWEsR0FBQWIsRUFBQSxVQUFBLEtBQUEvRixHQUFBLEVBQUEsRUFBQSxDQUFBLEVBQ0F5RixHQUFBTSxFQUFBLFFBQUF2RCxFQUFBVixFQUFBOEUsRUFBQSxFQUNBLE9BQUFiLEVBQUEsU0FFQUEsRUFBQSxVQUFBLFNBQ0FjLEdBQUFkLEVBQUEsVUFBQSxLQUFBLE9BQUFOLEdBQUFNLEVBQUEsUUFBQXZELEVBQUFWLEVBQUErRSxFQUFBLEVBQ0EsT0FBQWQsRUFBQSxTQUVBYyxHQUFBRCxJQUNBUixFQUFBSixFQUFBLFFBQUFhLEdBQ0FYLEVBQUFGLEVBQUEsUUFBQVksS0FFQVIsSUFBQVEsS0FDQVIsRUFBQUosRUFBQSxRQUFBWSxJQUVBVixJQUFBVyxLQUNBWCxFQUFBRixFQUFBLFFBQUFhLEtBR0FkLEVBQUEsZ0JBQ0FDLEVBQUEsY0FBQUQsRUFBQSxjQUFBLE9BQUEsU0FBQWUsR0FBQUMsR0FBQSxDQUNBLElBQUE1RyxHQUFBZ0QsR0FBQTRELEdBQUF2RSxFQUFBVixDQUFBLEVBQ0EsT0FBQTNCLEtBQUEsT0FBQXhCLEVBQUFtSSxHQUFBM0csRUFBQSxFQUFBMkcsRUFDQSxFQUFLLENBQUEsQ0FBQSxFQUNMLE9BQUFmLEVBQUEsZUFFQUEsRUFBQSxrQkFBQSxPQUFBLENBQ0EsSUFBQWlCLEdBQUE3RCxHQUFBNEMsRUFBQSxnQkFBQXZELEVBQUFWLENBQUEsRUFDQWtGLEtBQUEsU0FDQWhCLEVBQUEsZ0JBQUFnQixJQUVBLE9BQUFqQixFQUFBLGdCQUlBLEdBQUFBLEVBQUEsWUFBQSxPQUFBLENBQ0EsSUFBQWtCLEdBQUEsT0FBQWxCLEVBQUEsU0FBQSxFQUFBLEVBQ0EsTUFBQWtCLEVBQUEsSUFDQWhHLEdBQUErRSxFQUFBLFVBQUFpQixHQUNBakIsRUFBQSxRQUFBVCxHQUFBMEIsRUFBQSxHQUVBLE9BQUFsQixFQUFBLFVBWUEsR0FWQUEsRUFBQSxxQkFDQUMsRUFBQSxtQkFBQUQsRUFBQSxtQkFBQSxPQUFBVixHQUFBLENBQUEsQ0FBQSxFQUNBLE9BQUFVLEVBQUEsb0JBRUFBLEVBQUEsd0JBQ0FDLEVBQUEsc0JBQUFELEVBQUEsc0JBQUEsT0FBQVYsR0FBQSxDQUFBLENBQUEsRUFDQSxPQUFBVSxFQUFBLHVCQUlBQSxFQUFBLG1CQUFBLE9BQUEsQ0FDQSxJQUFBbUIsR0FBQSxTQUFBbkIsRUFBQSxpQkFBQSxFQUFBLEVBQ0FtQixJQUFBLElBQ0FsQixFQUFBLGlCQUFBa0IsR0FDQWxCLEVBQUEsVUFBQWtCLEtBQUEsR0FFQSxPQUFBbkIsRUFBQSxpQkFFQUEsRUFBQSxnQkFDQUMsRUFBQSxjQUFBLE9BQUFELEVBQUEsYUFBQSxFQUNBLE9BQUFBLEVBQUEsZUFJQSxJQUFBb0IsR0FBQWQsR0FDQU4sRUFBQSxZQUFBLFNBQ0FvQixHQUFBeEIsR0FBQUksRUFBQSxVQUFBLENBQUEsRUFDQSxPQUFBQSxFQUFBLFdBRUFvQixLQUFBZCxLQUNBQSxHQUFBTCxFQUFBLFVBQUFtQixJQUVBLElBQUFDLEdBQUFqQixFQUNBSixFQUFBLFVBQUEsU0FDQXFCLEdBQUF6QixHQUFBSSxFQUFBLFFBQUFJLENBQUEsRUFDQSxPQUFBSixFQUFBLFNBR0FxQixHQUFBZixHQUFBZSxHQUFBZixHQUFBZSxHQUNBQSxLQUFBakIsSUFDQUEsRUFBQUgsRUFBQSxRQUFBb0IsSUFFQSxJQUFBQyxHQUFBZixHQWdCQSxHQWZBUCxFQUFBLFlBQUEsU0FDQXNCLEdBQUExQixHQUFBSSxFQUFBLFVBQUFzQixFQUFBLEVBQ0EsT0FBQXRCLEVBQUEsV0FHQXNCLEdBQUFoQixHQUNBZ0IsR0FBQWhCLEdBQ0lnQixHQUFBbEIsSUFDSmtCLEdBQUFsQixHQUVBa0IsS0FBQWYsS0FDQU4sRUFBQSxVQUFBcUIsSUFJQXRCLEVBQUEsVUFBQSxDQUNBLElBQUF1QixHQUFBMUMsR0FBQW1CLEVBQUEsU0FBQSxFQUNBdUIsR0FBQSxXQUFBLE9BQUEsSUFDQXRCLEVBQUEsVUFBQXNCLEdBQUEsWUFFQSxPQUFBdkIsRUFBQSxVQUVBLEdBQUFBLEVBQUEsVUFBQSxDQUNBLElBQUF3QixHQUFBM0MsR0FBQW1CLEVBQUEsU0FBQSxFQUNBd0IsR0FBQSxXQUFBLE9BQUEsSUFDQXZCLEVBQUEsVUFBQXVCLEdBQUEsWUFFQSxPQUFBeEIsRUFBQSxVQVFBLEdBSkFBLEVBQUEsdUJBQUEsU0FDQUMsRUFBQSxxQkFBQSxpQkFBQSxVQUFBLENBQUEsQ0FBQUQsRUFBQSxxQkFDQSxPQUFBQSxFQUFBLHNCQUVBQSxFQUFBLFlBQUEsQ0FDQSxJQUFBeUIsR0FBQXpCLEVBQUEsWUFBQSxZQUFBLEVBQUEsTUFBQSxNQUFBLEVBQ0FDLEVBQUEsWUFBQSxDQUNBLEVBQUF3QixHQUFBLEtBQUEsU0FBQXZnQixHQUFBLENBQ0EsT0FBQUEsS0FBQSxRQUFBQSxLQUFBLE9BQ0EsQ0FBTyxHQUFBLE9BQ1AsRUFBQXVnQixHQUFBLEtBQUEsU0FBQXRnQixHQUFBLENBQ0EsT0FBQUEsS0FBQSxPQUFBQSxLQUFBLFFBQ0EsQ0FBTyxHQUFBLE1BQ1AsRUFDQSxPQUFBNmUsRUFBQSxZQUVBLEdBQUFBLEVBQUEsZUFBQSxPQUFBLENBQ0EsT0FBQUEsRUFBQSxhQUFBLENBQ0EsSUFBQSxHQUNBLElBQUEsR0FDQUMsRUFBQSxhQUFBRCxFQUFBLFlBQ0EsQ0FDQSxPQUFBQSxFQUFBLGFBSUEsY0FBQSxLQUFBQSxDQUFBLEVBQUEsUUFBQSxTQUFBMWMsR0FBQSxDQUNBMGMsRUFBQTFjLEVBQUEsSUFBQSxRQUFBaVYsRUFBQTFELEdBQUF2UixFQUFBLElBQ0EyYyxFQUFBM2MsRUFBQSxFQUFBMGMsRUFBQTFjLEVBQUEsRUFFQSxDQUFHLEVBQ0gyYyxDQUNBLENBRUEsSUFBQXlCLEdBQUE3SCxHQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FBQSxFQUVBOEgsR0FBQTlILEdBQUE7b0RBQUEsT0FBQU4sR0FBQSxPQUFBLEVBQUEsQ0FDQSxNQUFBLCtHQUNBLENBQUMsRUFBQTtzREFBQSxFQUFBLE9BQUFBLEdBQUEsT0FBQSxHQUFBLENBQ0QsTUFBQSw4S0FDQSxDQUFDLEVBQUE7T0FBQSxDQUFBLEVBRURxSSxHQUFBL0gsR0FBQTs7dUJBQUEsT0FBQU4sR0FBQSxPQUFBLEVBQUEsQ0FDQSxNQUFBLGdIQUNBLENBQUMsRUFBQTtPQUFBLENBQUEsRUFHRHNJLEdBQUEsVUFBQSxDQUNBLFNBQUFBLEVBQUFDLEVBQUE3QixFQUFBLENBQ0EvSSxFQUFBLEtBQUEySyxDQUFBLEVBQ0EsT0FBQSxPQUFBLEtBQUE1QixFQUFBLENBQ0EsT0FBQTZCLEVBQ0EsUUFBQWpELEdBQUEsMENBQUEsRUFBQSxXQUNBLFNBQUEsQ0FBQSxDQUNBLENBQUssRUFDTCxLQUFBLEtBQUEsS0FBQSxPQUFBLFdBQUEsTUFBQSxDQUNBLENBQ0EsT0FBQXhILEVBQUF3SyxFQUFBLENBQUEsQ0FDQSxJQUFBLE9BQ0EsTUFBQSxTQUFBbGUsRUFBQSxDQUNBQSxFQUFBLFlBQUEsU0FDQSxLQUFBLFVBQUEsS0FBQSxLQUFBQSxFQUFBLFdBRUEsS0FBQSxXQUFBQSxDQUFBLEVBQ0EsS0FBQSxZQUFBLEVBQ0EsS0FBQSxnQkFBQSxDQUNBLENBTUEsRUFBRyxDQUNILElBQUEsb0JBQ0EsTUFBQSxTQUFBNGEsRUFBQXhLLEVBQUFnRyxFQUFBLENBQ0EsSUFBQS9HLEVBQUEsS0FBQSxXQUFBLElBQUEsS0FBQStHLENBQUEsQ0FBQSxFQUNBLE9BQUF6QixFQUFBdEYsQ0FBQSxFQUFBLENBQ0EsSUFBQSxVQUNBQSxFQUFBLENBQ0EsUUFBQUEsQ0FDQSxFQUNBLE1BQ0EsSUFBQSxTQUNBQSxFQUFBLENBQ0EsUUFBQUEsQ0FDQSxDQUNBLENBQ0EsR0FBQUEsRUFBQSxDQUtBLEdBSkFBLEVBQUEsVUFBQSxLQUNBdUwsRUFBQSxVQUFBLElBQUEsVUFBQSxFQUNBM0YsRUFBQSxLQUFBLFNBQUE3RSxDQUFBLEdBRUFmLEVBQUEsUUFBQSxDQUNBLElBQUErTyxFQUNBQyxFQUFBaFAsRUFBQSxRQUFBLE1BQUEsS0FBQSxHQUNBK08sRUFBQXhELEVBQUEsV0FBQSxJQUFBLE1BQUF3RCxFQUFBM0osRUFBQTRKLENBQUEsQ0FBQSxFQUNBQSxFQUFBLFNBQUEsVUFBQSxHQUNBcEosRUFBQSxLQUFBLFNBQUE3RSxDQUFBLEVBR0FmLEVBQUEsU0FDQWlNLEdBQUFWLEVBQUF2TCxFQUFBLE9BQUEsRUFHQSxDQUNBLENBQUcsQ0FBQSxDQUNILEVBQUMsRUFFRGlQLEdBQUEsU0FBQUMsRUFBQSxDQUNBLFNBQUFELEVBQUFILEVBQUEsQ0FDQSxPQUFBNUssRUFBQSxLQUFBK0ssQ0FBQSxFQUNBckwsRUFBQSxLQUFBcUwsRUFBQSxDQUFBSCxFQUFBLENBQ0EsR0FBQSxFQUNBLEtBQUEsT0FDQSxVQUFBLEtBQ0EsQ0FBSyxDQUFBLENBQ0wsQ0FDQSxPQUFBckssRUFBQXdLLEVBQUFDLENBQUEsRUFDQTdLLEVBQUE0SyxFQUFBLENBQUEsQ0FDQSxJQUFBLE9BQ0EsTUFBQSxTQUFBdGUsRUFBQSxDQUNBLElBQUF3ZSxFQUFBLFVBQUEsT0FBQSxHQUFBLFVBQUEsQ0FBQSxJQUFBLE9BQUEsVUFBQSxDQUFBLEVBQUEsR0FDQSxHQUFBQSxFQUFBLENBQ0EsSUFBQUMsRUFBQXZELEdBQUE4QyxFQUFBLEVBQUEsV0FDQSxLQUFBLElBQUFTLEVBQUEsV0FDQSxLQUFBLEtBQUFBLEVBQUEsVUFDQSxLQUFBLFFBQUEsWUFBQUEsQ0FBQSxFQUVBOUssRUFBQVAsRUFBQWtMLEVBQUEsU0FBQSxFQUFBLE9BQUEsSUFBQSxFQUFBLEtBQUEsS0FBQXRlLENBQUEsQ0FDQSxDQUNBLEVBQUcsQ0FDSCxJQUFBLGFBQ0EsTUFBQSxTQUFBQSxFQUFBLENBQ0EsSUFBQTBlLEVBQUEsS0FDQUMsRUF5QkEsR0F4QkEvSixFQUFBNVUsRUFBQSxTQUFBLElBQ0EsS0FBQSxRQUFBQSxFQUFBLFNBRUE0VSxFQUFBNVUsRUFBQSxTQUFBLElBQ0EsS0FBQSxRQUFBQSxFQUFBLFNBRUFBLEVBQUEsZ0JBQ0EsS0FBQSxjQUFBQSxFQUFBLGVBRUFBLEVBQUEscUJBQ0EsS0FBQSxtQkFBQUEsRUFBQSxtQkFDQTJlLEVBQUEsSUFFQTNlLEVBQUEsd0JBQ0EsS0FBQSxzQkFBQUEsRUFBQSx1QkFFQUEsRUFBQSxpQkFBQSxTQUNBLEtBQUEsZUFBQUEsRUFBQSxnQkFFQUEsRUFBQSxZQUFBLFNBQ0EsS0FBQSxVQUFBQSxFQUFBLFVBQ0EsS0FBQSxRQUFBQSxFQUFBLFFBQ0EyZSxFQUFBLElBRUEzZSxFQUFBLE9BQUEsQ0FDQSxJQUFBb1ksRUFBQSxLQUFBLE9BQUFwWSxFQUFBLE9BQ0EsS0FBQSxTQUFBb1ksRUFBQSxRQUNBLEtBQUEsa0JBQUFBLEVBQUEsWUFDQXVHLEVBQUEsR0FLQSxHQUhBM2UsRUFBQSxnQkFBQSxTQUNBLEtBQUEsV0FBQSxPQUFBQSxFQUFBLGVBQUEsV0FBQUEsRUFBQSxjQUFBLFFBRUFBLEVBQUEsZ0JBQUEsT0FDQSxHQUFBQSxFQUFBLGVBQUEsQ0FBQSxLQUFBLGNBQUEsQ0FDQSxJQUFBNGUsRUFBQTFELEdBQUErQyxFQUFBLEVBQUEsV0FDQSxLQUFBLGNBQUEsQ0FDQSxRQUFBVyxFQUNBLElBQUFBLEVBQUEsV0FDQSxNQUFBQSxFQUFBLFNBQ0EsRUFDQSxLQUFBLFFBQUEsYUFBQUEsRUFBQSxLQUFBLFFBQUEsVUFBQSxPQUNVLEtBQUEsZUFBQSxDQUFBNWUsRUFBQSxnQkFDVixLQUFBLFFBQUEsWUFBQSxLQUFBLGNBQUEsT0FBQSxFQUNBLEtBQUEsY0FBQSxNQUdBQSxFQUFBLGlCQUFBLFNBQ0FBLEVBQUEsZ0JBQ0FvYixHQUFBLEtBQUEsR0FBQSxFQUNBLEtBQUEsZUFDQUEsR0FBQSxLQUFBLGNBQUEsR0FBQSxJQUdBRCxHQUFBLEtBQUEsR0FBQSxFQUNBLEtBQUEsZUFDQUEsR0FBQSxLQUFBLGNBQUEsR0FBQSxJQU1Bd0QsR0FDQSxNQUFBLEtBQUEsS0FBQSxJQUFBLFFBQUEsRUFBQSxRQUFBLFNBQUEvRCxFQUFBNUksRUFBQSxDQUNBLElBQUE0SixHQUFBOEMsRUFBQSxVQUFBMU0sR0FBQSxFQUNBNEksRUFBQSxZQUFBOEQsRUFBQSxTQUFBOUMsQ0FBQSxFQUNBaEIsRUFBQSxVQUFBOEQsRUFBQSxtQkFBQSxTQUFBOUMsQ0FBQSxFQUFBLGlIQUFBLG9GQUNBLENBQVMsQ0FFVCxDQUdBLEVBQUcsQ0FDSCxJQUFBLGNBQ0EsTUFBQSxVQUFBLENBQ0EsSUFBQTBCLEVBQUEsSUFBQSxLQUFBLEtBQUEsT0FBQSxRQUFBLEVBQ0F1QixFQUFBdkIsRUFBQSxZQUFBLEVBQ0F3QixFQUFBeEIsRUFBQSxTQUFBLEVBQ0F5QixFQUFBekksR0FBQXVJLEVBQUFDLEVBQUEsQ0FBQSxFQUNBbGxCLEVBQUF3ZCxHQUFBMkgsRUFBQSxLQUFBLFVBQUEsS0FBQSxTQUFBLEVBQ0EsS0FBQSxNQUFBQSxFQUNBLEtBQUEsS0FBQXpJLEdBQUF1SSxFQUFBQyxFQUFBLEVBQUEsQ0FBQSxFQUNBLEtBQUEsTUFBQWxsQixFQUNBLEtBQUEsUUFBQSxLQUFBLE9BQUEsUUFDQSxDQUdBLEVBQUcsQ0FDSCxJQUFBLGtCQUNBLE1BQUEsVUFBQSxDQUNBLElBQUFvbEIsRUFBQSxLQUFBLE9BQUEsV0FDQTVCLEVBQUE0QixFQUFBLE1BQ0FDLEVBQUFELEVBQUEsWUFDQSxLQUFBLFNBQUE1QixFQUNBNkIsSUFDQSxLQUFBLE1BQUFBLEVBQUEsTUFFQSxDQUdBLEVBQUcsQ0FDSCxJQUFBLFNBQ0EsTUFBQSxVQUFBLENBQ0EsSUFBQUMsRUFBQSxLQUVBLEtBQUEsTUFBQSxLQUFBLGVBQUE3SSxHQUFBLEVBQUEsT0FHQSxLQUFBLFNBQUE1QixFQUFBLEtBQUEsYUFBQSxFQUNBLElBQUEwSyxFQUFBeEYsR0FBQSxLQUFBLFFBQUEsS0FBQSxrQkFBQSxLQUFBLE1BQUEsRUFJQSxHQUhBLEtBQUEsT0FBQSxtQkFBQXdGLENBQUEsRUFDQSxLQUFBLE9BQUEsbUJBQUEsS0FBQSxPQUFBLEtBQUEsT0FBQSxFQUNBLEtBQUEsT0FBQSxtQkFBQSxLQUFBLE1BQUEsS0FBQSxPQUFBLEVBQ0EsS0FBQSxjQUFBLENBRUEsSUFBQXJELEVBQUExRSxHQUFBLEtBQUEsTUFBQSxFQUFBLENBQUEsRUFDQSxNQUFBLEtBQUEsS0FBQSxjQUFBLE1BQUEsUUFBQSxFQUFBLFFBQUEsU0FBQXdELEVBQUE1SSxFQUFBLENBQ0E0SSxFQUFBLFlBQUFuRCxHQUFBZCxHQUFBbUYsRUFBQTlKLENBQUEsQ0FBQSxDQUNBLENBQVMsRUFFVCxNQUFBLEtBQUEsS0FBQSxLQUFBLFFBQUEsRUFBQSxRQUFBLFNBQUE0SSxFQUFBNUksRUFBQSxDQUNBLElBQUFvTixFQUFBeEUsRUFBQSxVQUNBeEssRUFBQW9HLEdBQUEwSSxFQUFBLE1BQUFsTixDQUFBLEVBQ0F5RSxFQUFBLElBQUEsS0FBQXJHLENBQUEsRUFDQThHLEVBQUFULEVBQUEsT0FBQSxFQXdCQSxHQXZCQW1FLEVBQUEsVUFBQSxzTEFBQSxPQUFBc0UsRUFBQSxTQUFBLEVBQ0F0RSxFQUFBLFFBQUEsS0FBQXhLLEVBQ0F3SyxFQUFBLFlBQUFuRSxFQUFBLFFBQUEsRUFDQXJHLEVBQUE4TyxFQUFBLE1BQ0FFLEVBQUEsSUFBQSxPQUFBLGdCQUFBLGlCQUFBLEVBQ1VoUCxFQUFBOE8sRUFBQSxNQUNWRSxFQUFBLElBQUEsT0FBQSxnQkFBQSxpQkFBQSxFQUVBRixFQUFBLFFBQUE5TyxHQUNBZ1AsRUFBQSxJQUFBLFFBQUEsY0FBQSxrQkFBQSxHQUVBaFAsRUFBQThPLEVBQUEsU0FBQTlPLEVBQUE4TyxFQUFBLFNBQUFBLEVBQUEsU0FBQSxTQUFBOU8sQ0FBQSxLQUNBZ1AsRUFBQSxJQUFBLFdBQUEscUJBQUEsZ0JBQUEsb0JBQUEsRUFDQUEsRUFBQSxPQUFBLG9CQUFBLHlCQUFBLGdCQUFBLGtCQUFBLGdCQUFBLEdBRUFGLEVBQUEsbUJBQUEsU0FBQWhJLENBQUEsSUFDQWtJLEVBQUEsSUFBQSxXQUFBLHFCQUFBLGdCQUFBLG9CQUFBLEVBQ0FBLEVBQUEsT0FBQSxvQkFBQSx5QkFBQSxnQkFBQSxrQkFBQSxnQkFBQSxFQUNBbkssRUFBQWlLLEVBQUEsU0FBQTlPLENBQUEsR0FFQThPLEVBQUEsc0JBQUEsU0FBQWhJLENBQUEsR0FDQWtJLEVBQUEsSUFBQSxhQUFBLEVBRUFGLEVBQUEsTUFBQSxDQUNBLElBQUFHLEdBQUE5SyxFQUFBMkssRUFBQSxNQUFBLENBQUEsRUFDQUksR0FBQUQsR0FBQSxDQUFBLEVBQ0FFLEdBQUFGLEdBQUEsQ0FBQSxFQUNBalAsRUFBQWtQLElBQUFsUCxFQUFBbVAsS0FDQUgsRUFBQSxJQUFBLFFBQUEsY0FBQSxrQkFBQSxFQUNBQSxFQUFBLE9BQUEsYUFBQSxlQUFBLGNBQUEsR0FFQWhQLElBQUFrUCxLQUNBRixFQUFBLElBQUEsY0FBQSxjQUFBLG1CQUFBLGNBQUEsRUFDQUEsRUFBQSxPQUFBLGFBQUEsY0FBQSxHQUVBaFAsSUFBQW1QLEtBQ0FILEVBQUEsSUFBQSxZQUFBLGNBQUEsbUJBQUEsY0FBQSxFQUNBQSxFQUFBLE9BQUEsYUFBQSxjQUFBLEdBR0FGLEVBQUEsU0FBQSxTQUFBOU8sQ0FBQSxJQUNBZ1AsRUFBQSxJQUFBLFdBQUEsY0FBQSxrQkFBQSxhQUFBLG1CQUFBLHVCQUFBLGlCQUFBLEVBQ0FBLEVBQUEsT0FBQSxnQkFBQSxnQkFBQSxvQkFBQSxrQkFBQSx5QkFBQSxtQkFBQSxjQUFBLGFBQUEsR0FFQWhQLElBQUE4TyxFQUFBLFNBQ0FFLEVBQUEsSUFBQSxTQUFBLEVBRUFGLEVBQUEsWUFDQUEsRUFBQSxrQkFBQXRFLEVBQUF4SyxFQUFBQSxDQUFBLENBRUEsQ0FBTyxDQUNQLENBR0EsRUFBRyxDQUNILElBQUEsVUFDQSxNQUFBLFVBQUEsQ0FDQSxJQUFBb1AsRUFBQSxLQUNBOWpCLEVBQUEsS0FBQSxPQUFBLENBQUEsRUFDQU8sRUFBQXNZLEVBQUE3WSxFQUFBLENBQUEsRUFDQTRqQixFQUFBcmpCLEVBQUEsQ0FBQSxFQUNBc2pCLEVBQUF0akIsRUFBQSxDQUFBLEVBQ0EsS0FBQSxLQUFBLGlCQUFBLHVEQUFBLEVBQUEsUUFBQSxTQUFBMmUsRUFBQSxDQUNBQSxFQUFBLFVBQUEsT0FBQSxRQUFBLGNBQUEsWUFBQSxXQUFBLGNBQUEsa0JBQUEsYUFBQSxtQkFBQSx1QkFBQSxrQkFBQSxTQUFBLEVBQ0FBLEVBQUEsVUFBQSxJQUFBLGdCQUFBLGFBQUEsaUJBQUEsQ0FDQSxDQUFPLEVBQ1AsTUFBQSxLQUFBLEtBQUEsS0FBQSxRQUFBLEVBQUEsUUFBQSxTQUFBQSxFQUFBLENBQ0EsSUFBQXhLLEVBQUEsT0FBQXdLLEVBQUEsUUFBQSxJQUFBLEVBQ0F3RSxFQUFBeEUsRUFBQSxVQUNBd0UsRUFBQSxPQUFBLGNBQUEsbUJBQUEsZUFBQSxjQUFBLEVBQ0FoUCxFQUFBa1AsR0FBQWxQLEVBQUFtUCxJQUNBSCxFQUFBLElBQUEsUUFBQSxjQUFBLGtCQUFBLEVBQ0FBLEVBQUEsT0FBQSxZQUFBLEdBRUFoUCxJQUFBa1AsSUFDQUYsRUFBQSxJQUFBLGNBQUEsY0FBQSxtQkFBQSxjQUFBLEVBQ0FBLEVBQUEsT0FBQSxZQUFBLEdBRUFoUCxJQUFBbVAsSUFDQUgsRUFBQSxJQUFBLFlBQUEsY0FBQSxtQkFBQSxjQUFBLEVBQ0FBLEVBQUEsT0FBQSxZQUFBLEdBRUFJLEVBQUEsU0FBQSxTQUFBcFAsQ0FBQSxJQUNBZ1AsRUFBQSxJQUFBLFdBQUEsY0FBQSxrQkFBQSxhQUFBLG1CQUFBLHVCQUFBLGlCQUFBLEVBQ0FBLEVBQUEsT0FBQSxnQkFBQSxvQkFBQSxrQkFBQSx5QkFBQSxjQUFBLGNBQUEsa0JBQUEsR0FFQWhQLElBQUFvUCxFQUFBLFNBQ0FKLEVBQUEsSUFBQSxTQUFBLENBRUEsQ0FBTyxDQUNQLENBR0EsRUFBRyxDQUNILElBQUEsZUFDQSxNQUFBLFVBQUEsQ0FDQSxJQUFBcE4sRUFBQSxLQUFBLE9BQUEsS0FBQSxRQUFBLEtBQUEsT0FBQSxLQUFBLEVBQ0EsS0FBQSxLQUFBLGlCQUFBLFVBQUEsRUFBQSxRQUFBLFNBQUE0SSxFQUFBLENBQ0FBLEVBQUEsVUFBQSxPQUFBLFNBQUEsQ0FDQSxDQUFPLEVBQ1AsS0FBQSxLQUFBLFNBQUE1SSxDQUFBLEVBQUEsVUFBQSxJQUFBLFNBQUEsQ0FDQSxDQUNBLENBQUcsQ0FBQSxDQUNILEVBQUNrTSxFQUFBLEVBRUQsU0FBQXVCLEdBQUF4RSxFQUFBeUUsRUFBQSxDQUNBLEdBQUEsR0FBQXpFLEdBQUEsQ0FBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQUEsRUFBQSxDQUFBLEdBR0EsS0FBQTBFLEVBQUFwTCxFQUFBMEcsRUFBQSxDQUFBLEVBQ0EyRSxFQUFBckwsRUFBQW9MLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFDQUUsRUFBQUQsRUFBQSxDQUFBLEVBQ0FFLEVBQUFGLEVBQUEsQ0FBQSxFQUNBRyxFQUFBeEwsRUFBQW9MLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFDQUssRUFBQUQsRUFBQSxDQUFBLEVBQ0FFLEVBQUFGLEVBQUEsQ0FBQSxFQUNBLEdBQUEsRUFBQUYsRUFBQUgsR0FBQU0sRUFBQU4sR0FHQSxNQUFBLENBQUFHLElBQUFILEVBQUFJLEVBQUEsR0FBQUUsSUFBQU4sRUFBQU8sRUFBQSxFQUFBLEVBQ0EsQ0FDQSxJQUFBQyxHQUFBLFNBQUEzQixFQUFBLENBQ0EsU0FBQTJCLEVBQUEvQixFQUFBLENBQ0EsT0FBQTVLLEVBQUEsS0FBQTJNLENBQUEsRUFDQWpOLEVBQUEsS0FBQWlOLEVBQUEsQ0FBQS9CLEVBQUEsQ0FDQSxHQUFBLEVBQ0EsS0FBQSxTQUNBLFVBQUEsT0FDQSxDQUFLLENBQUEsQ0FDTCxDQUNBLE9BQUFySyxFQUFBb00sRUFBQTNCLENBQUEsRUFDQTdLLEVBQUF3TSxFQUFBLENBQUEsQ0FDQSxJQUFBLE9BQ0EsTUFBQSxTQUFBbGdCLEVBQUEsQ0FDQSxJQUFBd2UsRUFBQSxVQUFBLE9BQUEsR0FBQSxVQUFBLENBQUEsSUFBQSxPQUFBLFVBQUEsQ0FBQSxFQUFBLEdBQ0FBLElBQ0EsS0FBQSxLQUFBLEtBQUEsUUFDQSxLQUFBLFFBQUEsVUFBQSxJQUFBLFNBQUEsa0JBQUEsT0FBQSxPQUFBLGFBQUEsRUFDQSxLQUFBLEtBQUEsWUFBQXRELEdBQUF0RixHQUFBLE9BQUEsR0FBQSxDQUNBLGFBQUEsU0FBQXVLLEVBQUEsQ0FDQSxPQUFBQSxDQUNBLENBQ0EsQ0FBUyxDQUFBLENBQUEsR0FFVHhNLEVBQUFQLEVBQUE4TSxFQUFBLFNBQUEsRUFBQSxPQUFBLElBQUEsRUFBQSxLQUFBLEtBQUFsZ0IsQ0FBQSxDQUNBLENBQ0EsRUFBRyxDQUNILElBQUEsYUFDQSxNQUFBLFNBQUFBLEVBQUEsQ0FJQSxHQUhBQSxFQUFBLFNBQ0EsS0FBQSxXQUFBQSxFQUFBLE9BQUEsYUFFQTRVLEVBQUE1VSxFQUFBLFNBQUEsRUFDQSxHQUFBQSxFQUFBLFVBQUEsT0FDQSxLQUFBLFFBQUEsS0FBQSxTQUFBLEtBQUEsUUFBQSxXQUNVLENBQ1YsSUFBQW9nQixFQUFBLElBQUEsS0FBQXBnQixFQUFBLE9BQUEsRUFDQSxLQUFBLFFBQUFvZ0IsRUFBQSxZQUFBLEVBQ0EsS0FBQSxTQUFBQSxFQUFBLFNBQUEsRUFDQSxLQUFBLFFBQUFBLEVBQUEsUUFBQSxDQUFBLEVBR0EsR0FBQXhMLEVBQUE1VSxFQUFBLFNBQUEsRUFDQSxHQUFBQSxFQUFBLFVBQUEsT0FDQSxLQUFBLFFBQUEsS0FBQSxTQUFBLEtBQUEsUUFBQSxXQUNVLENBQ1YsSUFBQXFnQixFQUFBLElBQUEsS0FBQXJnQixFQUFBLE9BQUEsRUFDQSxLQUFBLFFBQUFxZ0IsRUFBQSxZQUFBLEVBQ0EsS0FBQSxTQUFBQSxFQUFBLFNBQUEsRUFDQSxLQUFBLFFBQUEvSixHQUFBLEtBQUEsUUFBQSxLQUFBLFNBQUEsRUFBQSxDQUFBLEVBR0F0VyxFQUFBLGtCQUFBLFNBQ0EsS0FBQSxXQUFBLE9BQUFBLEVBQUEsaUJBQUEsV0FBQUEsRUFBQSxnQkFBQSxPQUVBLENBR0EsRUFBRyxDQUNILElBQUEsY0FDQSxNQUFBLFVBQUEsQ0FDQSxJQUFBc2QsRUFBQSxJQUFBLEtBQUEsS0FBQSxPQUFBLFFBQUEsRUFDQSxLQUFBLEtBQUFBLEVBQUEsWUFBQSxFQUNBLEtBQUEsUUFBQUEsRUFBQSxTQUFBLENBQ0EsQ0FHQSxFQUFHLENBQ0gsSUFBQSxrQkFDQSxNQUFBLFVBQUEsQ0FDQSxJQUFBMEIsRUFBQSxLQUFBLE9BQUEsV0FDQTVCLEVBQUE0QixFQUFBLE1BQ0FDLEVBQUFELEVBQUEsWUFDQSxLQUFBLFNBQUE1QixFQUFBLE9BQUEsU0FBQWtELEVBQUFsSyxFQUFBLENBQ0EsSUFBQUssRUFBQSxJQUFBLEtBQUFMLENBQUEsRUFDQTBCLEVBQUFyQixFQUFBLFlBQUEsRUFDQTBCLEVBQUExQixFQUFBLFNBQUEsRUFDQSxPQUFBNkosRUFBQXhJLENBQUEsSUFBQSxPQUNBd0ksRUFBQXhJLENBQUEsRUFBQSxDQUFBSyxDQUFBLEVBRUFsRCxFQUFBcUwsRUFBQXhJLENBQUEsRUFBQUssQ0FBQSxFQUVBbUksQ0FDQSxFQUFPLENBQUEsQ0FBSSxFQUNYckIsR0FBQUEsRUFBQSxRQUNBLEtBQUEsTUFBQUEsRUFBQSxNQUFBLElBQUEsU0FBQTdJLEVBQUEsQ0FDQSxJQUFBSyxFQUFBLElBQUEsS0FBQUwsQ0FBQSxFQUNBLE9BQUEsTUFBQUssQ0FBQSxFQUFBLE9BQUEsQ0FBQUEsRUFBQSxZQUFBLEVBQUFBLEVBQUEsU0FBQSxDQUFBLENBQ0EsQ0FBUyxFQUVULENBR0EsRUFBRyxDQUNILElBQUEsU0FDQSxNQUFBLFVBQUEsQ0FDQSxJQUFBaUksRUFBQSxLQUdBLEtBQUEsU0FBQSxDQUFBLEVBQ0EsS0FBQSxPQUFBLG1CQUFBLEtBQUEsSUFBQSxFQUNBLEtBQUEsT0FBQSxtQkFBQSxLQUFBLE1BQUEsS0FBQSxPQUFBLEVBQ0EsS0FBQSxPQUFBLG1CQUFBLEtBQUEsTUFBQSxLQUFBLE9BQUEsRUFDQSxJQUFBNEIsRUFBQSxLQUFBLFNBQUEsS0FBQSxJQUFBLEdBQUEsQ0FBQSxFQUNBQyxFQUFBLEtBQUEsS0FBQSxLQUFBLFNBQUEsS0FBQSxLQUFBLEtBQUEsUUFDQUMsRUFBQSxLQUFBLE9BQUEsS0FBQSxRQUNBQyxFQUFBLEtBQUEsT0FBQSxLQUFBLFFBQ0F4RixFQUFBd0UsR0FBQSxLQUFBLE1BQUEsS0FBQSxJQUFBLEVBQ0EsTUFBQSxLQUFBLEtBQUEsS0FBQSxRQUFBLEVBQUEsUUFBQSxTQUFBN0UsRUFBQTVJLEVBQUEsQ0FDQSxJQUFBb04sRUFBQXhFLEVBQUEsVUFDQW5FLEdBQUFILEdBQUFvSSxFQUFBLEtBQUExTSxFQUFBLENBQUEsRUFXQSxHQVZBNEksRUFBQSxVQUFBLHNMQUFBLE9BQUE4RCxFQUFBLFNBQUEsRUFDQUEsRUFBQSxZQUNBOUQsRUFBQSxRQUFBLEtBQUFuRSxJQUlBbUUsRUFBQSxZQUFBOEQsRUFBQSxXQUFBMU0sQ0FBQSxHQUNBdU8sR0FBQUMsR0FBQXhPLEVBQUEwTSxFQUFBLFVBQUErQixHQUFBek8sRUFBQTBNLEVBQUEsV0FDQVUsRUFBQSxJQUFBLFVBQUEsRUFFQW5FLEVBQUEsQ0FDQSxJQUFBeUYsR0FBQW5NLEVBQUEwRyxFQUFBLENBQUEsRUFDQXFFLEdBQUFvQixHQUFBLENBQUEsRUFDQW5CLEdBQUFtQixHQUFBLENBQUEsRUFDQTFPLEVBQUFzTixJQUFBdE4sRUFBQXVOLElBQ0FILEVBQUEsSUFBQSxPQUFBLEVBRUFwTixJQUFBc04sSUFDQUYsRUFBQSxJQUFBLGFBQUEsRUFFQXBOLElBQUF1TixJQUNBSCxFQUFBLElBQUEsV0FBQSxFQUdBa0IsRUFBQSxTQUFBdE8sQ0FBQSxJQUNBb04sRUFBQSxJQUFBLFdBQUEsY0FBQSxrQkFBQSxhQUFBLG1CQUFBLHVCQUFBLGlCQUFBLEVBQ0FBLEVBQUEsT0FBQSxnQkFBQSxvQkFBQSxrQkFBQSx3QkFBQSxHQUVBcE4sSUFBQTBNLEVBQUEsU0FDQVUsRUFBQSxJQUFBLFNBQUEsRUFFQVYsRUFBQSxZQUNBQSxFQUFBLGtCQUFBOUQsRUFBQTVJLEVBQUF5RSxFQUFBLENBRUEsQ0FBTyxDQUNQLENBR0EsRUFBRyxDQUNILElBQUEsVUFDQSxNQUFBLFVBQUEsQ0FDQSxJQUFBeUksRUFBQSxLQUNBb0IsRUFBQSxLQUFBLFNBQUEsS0FBQSxJQUFBLEdBQUEsQ0FBQSxFQUNBNWtCLEVBQUErakIsR0FBQSxLQUFBLE1BQUEsS0FBQSxJQUFBLEdBQUEsQ0FBQSxFQUNBeGpCLEVBQUFzWSxFQUFBN1ksRUFBQSxDQUFBLEVBQ0E0akIsRUFBQXJqQixFQUFBLENBQUEsRUFDQXNqQixFQUFBdGpCLEVBQUEsQ0FBQSxFQUNBLEtBQUEsS0FBQSxpQkFBQSx1REFBQSxFQUFBLFFBQUEsU0FBQTJlLEVBQUEsQ0FDQUEsRUFBQSxVQUFBLE9BQUEsUUFBQSxjQUFBLFlBQUEsV0FBQSxjQUFBLGtCQUFBLG1CQUFBLHVCQUFBLGtCQUFBLGFBQUEsU0FBQSxFQUNBQSxFQUFBLFVBQUEsSUFBQSxnQkFBQSxvQkFBQSxrQkFBQSx3QkFBQSxDQUNBLENBQU8sRUFDUCxNQUFBLEtBQUEsS0FBQSxLQUFBLFFBQUEsRUFBQSxRQUFBLFNBQUFBLEVBQUE1SSxFQUFBLENBQ0EsSUFBQW9OLEVBQUF4RSxFQUFBLFVBQ0E1SSxFQUFBc04sR0FBQXROLEVBQUF1TixHQUNBSCxFQUFBLElBQUEsT0FBQSxFQUVBcE4sSUFBQXNOLEdBQ0FGLEVBQUEsSUFBQSxhQUFBLEVBRUFwTixJQUFBdU4sR0FDQUgsRUFBQSxJQUFBLFdBQUEsRUFFQWtCLEVBQUEsU0FBQXRPLENBQUEsSUFDQW9OLEVBQUEsSUFBQSxXQUFBLGNBQUEsa0JBQUEsYUFBQSxtQkFBQSx1QkFBQSxpQkFBQSxFQUNBQSxFQUFBLE9BQUEsZ0JBQUEsb0JBQUEsa0JBQUEsd0JBQUEsR0FFQXBOLElBQUFrTixFQUFBLFNBQ0FFLEVBQUEsSUFBQSxTQUFBLENBRUEsQ0FBTyxDQUNQLENBR0EsRUFBRyxDQUNILElBQUEsZUFDQSxNQUFBLFVBQUEsQ0FDQSxLQUFBLEtBQUEsaUJBQUEsVUFBQSxFQUFBLFFBQUEsU0FBQXhFLEVBQUEsQ0FDQUEsRUFBQSxVQUFBLE9BQUEsU0FBQSxDQUNBLENBQU8sRUFDUCxLQUFBLEtBQUEsU0FBQSxLQUFBLE9BQUEsRUFBQSxVQUFBLElBQUEsU0FBQSxDQUNBLENBQ0EsQ0FBRyxDQUFBLENBQ0gsRUFBQ3NELEVBQUEsRUFFRCxTQUFBeUMsR0FBQUMsRUFBQSxDQUNBLE9BQUFuTSxFQUFBbU0sQ0FBQSxFQUFBLE9BQUEsU0FBQXhMLEVBQUF5TCxFQUFBVixFQUFBLENBQ0EsT0FBQS9LLEdBQUErSyxFQUFBVSxFQUFBQSxFQUFBLFlBQUEsQ0FDQSxFQUFHLEVBQUEsQ0FDSCxDQUdBLElBQUFDLEdBQUEsU0FBQXZDLEVBQUEsQ0FDQSxTQUFBdUMsRUFBQTNDLEVBQUE3QixFQUFBLENBQ0EsT0FBQS9JLEVBQUEsS0FBQXVOLENBQUEsRUFDQTdOLEVBQUEsS0FBQTZOLEVBQUEsQ0FBQTNDLEVBQUE3QixDQUFBLENBQUEsQ0FDQSxDQUNBLE9BQUF4SSxFQUFBZ04sRUFBQXZDLENBQUEsRUFDQTdLLEVBQUFvTixFQUFBLENBQUEsQ0FDQSxJQUFBLE9BQ0EsTUFBQSxTQUFBOWdCLEVBQUEsQ0FDQSxJQUFBd2UsRUFBQSxVQUFBLE9BQUEsR0FBQSxVQUFBLENBQUEsSUFBQSxPQUFBLFVBQUEsQ0FBQSxFQUFBLEdBQ0FBLElBQ0EsS0FBQSxRQUFBLEtBQUEsS0FBQSxHQUNBLEtBQUEsaUJBQUEsYUFBQSxPQUFBbUMsR0FBQSxLQUFBLFNBQUEsQ0FBQSxFQUNBLEtBQUEsS0FBQSxLQUFBLFFBQ0EsS0FBQSxRQUFBLFVBQUEsSUFBQSxLQUFBLEtBQUEsa0JBQUEsT0FBQSxPQUFBLGFBQUEsRUFDQSxLQUFBLEtBQUEsWUFBQXpGLEdBQUF0RixHQUFBLE9BQUEsRUFBQSxDQUFBLENBQUEsR0FFQWpDLEVBQUFQLEVBQUEwTixFQUFBLFNBQUEsRUFBQSxPQUFBLElBQUEsRUFBQSxLQUFBLEtBQUE5Z0IsQ0FBQSxDQUNBLENBQ0EsRUFBRyxDQUNILElBQUEsYUFDQSxNQUFBLFNBQUFBLEVBQUEsQ0FpQkEsR0FoQkE0VSxFQUFBNVUsRUFBQSxTQUFBLElBQ0FBLEVBQUEsVUFBQSxPQUNBLEtBQUEsUUFBQSxLQUFBLFFBQUEsUUFFQSxLQUFBLFFBQUE0WCxHQUFBNVgsRUFBQSxRQUFBLEtBQUEsSUFBQSxFQUNBLEtBQUEsUUFBQXNXLEdBQUEsS0FBQSxRQUFBLEVBQUEsQ0FBQSxJQUdBMUIsRUFBQTVVLEVBQUEsU0FBQSxJQUNBQSxFQUFBLFVBQUEsT0FDQSxLQUFBLFFBQUEsS0FBQSxRQUFBLFFBRUEsS0FBQSxRQUFBNFgsR0FBQTVYLEVBQUEsUUFBQSxLQUFBLElBQUEsRUFDQSxLQUFBLFFBQUFzVyxHQUFBLEtBQUEsUUFBQSxHQUFBLEVBQUEsSUFHQXRXLEVBQUEsS0FBQSxnQkFBQSxJQUFBLE9BQUEsQ0FDQSxJQUFBK2dCLEVBQUEvZ0IsRUFBQSxLQUFBLGdCQUFBLEVBQ0EsS0FBQSxXQUFBLE9BQUErZ0IsR0FBQSxXQUFBQSxFQUFBLE9BRUEsQ0FHQSxFQUFHLENBQ0gsSUFBQSxjQUNBLE1BQUEsVUFBQSxDQUNBLElBQUF6RCxFQUFBLElBQUEsS0FBQSxLQUFBLE9BQUEsUUFBQSxFQUNBMEQsRUFBQXBKLEdBQUEwRixFQUFBLEtBQUEsT0FBQSxFQUNBMkQsRUFBQUQsRUFBQSxFQUFBLEtBQUEsS0FDQSxLQUFBLE1BQUFBLEVBQ0EsS0FBQSxLQUFBQyxFQUNBLEtBQUEsTUFBQUQsRUFBQSxLQUFBLEtBQ0EsS0FBQSxRQUFBcEosR0FBQTBGLEVBQUEsS0FBQSxJQUFBLENBQ0EsQ0FHQSxFQUFHLENBQ0gsSUFBQSxrQkFDQSxNQUFBLFVBQUEsQ0FDQSxJQUFBb0IsRUFBQSxLQUNBTSxFQUFBLEtBQUEsT0FBQSxXQUNBNUIsRUFBQTRCLEVBQUEsTUFDQUMsRUFBQUQsRUFBQSxZQUNBLEtBQUEsU0FBQTVCLEVBQUEsT0FBQSxTQUFBdkYsRUFBQXpCLEVBQUEsQ0FDQSxPQUFBbkIsRUFBQTRDLEVBQUFELEdBQUF4QixFQUFBc0ksRUFBQSxJQUFBLENBQUEsQ0FDQSxFQUFPLENBQUEsQ0FBQSxFQUNQTyxHQUFBQSxFQUFBLFFBQ0EsS0FBQSxNQUFBQSxFQUFBLE1BQUEsSUFBQSxTQUFBN0ksRUFBQSxDQUNBLEdBQUFBLElBQUEsT0FDQSxPQUFBd0IsR0FBQXhCLEVBQUFzSSxFQUFBLElBQUEsQ0FFQSxDQUFTLEVBRVQsQ0FHQSxFQUFHLENBQ0gsSUFBQSxTQUNBLE1BQUEsVUFBQSxDQUNBLElBQUFRLEVBQUEsS0FHQSxLQUFBLFNBQUEsQ0FBQSxFQUNBLEtBQUEsT0FBQSxtQkFBQSxHQUFBLE9BQUEsS0FBQSxNQUFBLEdBQUEsRUFBQSxPQUFBLEtBQUEsSUFBQSxDQUFBLEVBQ0EsS0FBQSxPQUFBLG1CQUFBLEtBQUEsT0FBQSxLQUFBLE9BQUEsRUFDQSxLQUFBLE9BQUEsbUJBQUEsS0FBQSxNQUFBLEtBQUEsT0FBQSxFQUNBLE1BQUEsS0FBQSxLQUFBLEtBQUEsUUFBQSxFQUFBLFFBQUEsU0FBQXRFLEVBQUE1SSxFQUFBLENBQ0EsSUFBQW9OLEVBQUF4RSxFQUFBLFVBQ0F4SyxFQUFBOE8sRUFBQSxNQUFBbE4sRUFBQWtOLEVBQUEsS0FDQXpJLEVBQUFILEdBQUFsRyxFQUFBLEVBQUEsQ0FBQSxFQWNBLEdBYkF3SyxFQUFBLFVBQUEsc0xBQUEsT0FBQXNFLEVBQUEsU0FBQSxFQUNBQSxFQUFBLFlBQ0F0RSxFQUFBLFFBQUEsS0FBQW5FLEdBRUFtRSxFQUFBLFlBQUFBLEVBQUEsUUFBQSxLQUFBeEssRUFDQTRCLElBQUEsRUFDQW9OLEVBQUEsSUFBQSxNQUFBLEVBQ1VwTixJQUFBLElBQ1ZvTixFQUFBLElBQUEsTUFBQSxHQUVBaFAsRUFBQThPLEVBQUEsU0FBQTlPLEVBQUE4TyxFQUFBLFVBQ0FFLEVBQUEsSUFBQSxVQUFBLEVBRUFGLEVBQUEsTUFBQSxDQUNBLElBQUFHLEVBQUE5SyxFQUFBMkssRUFBQSxNQUFBLENBQUEsRUFDQUksRUFBQUQsRUFBQSxDQUFBLEVBQ0FFLEVBQUFGLEVBQUEsQ0FBQSxFQUNBalAsRUFBQWtQLEdBQUFsUCxFQUFBbVAsR0FDQUgsRUFBQSxJQUFBLE9BQUEsRUFFQWhQLElBQUFrUCxHQUNBRixFQUFBLElBQUEsYUFBQSxFQUVBaFAsSUFBQW1QLEdBQ0FILEVBQUEsSUFBQSxXQUFBLEVBR0FGLEVBQUEsU0FBQSxTQUFBOU8sQ0FBQSxJQUNBZ1AsRUFBQSxJQUFBLFdBQUEsY0FBQSxrQkFBQSxhQUFBLG1CQUFBLHVCQUFBLGlCQUFBLEVBQ0FBLEVBQUEsT0FBQSxnQkFBQSxvQkFBQSxrQkFBQSx3QkFBQSxHQUVBaFAsSUFBQThPLEVBQUEsU0FDQUUsRUFBQSxJQUFBLFNBQUEsRUFFQUYsRUFBQSxZQUNBQSxFQUFBLGtCQUFBdEUsRUFBQXhLLEVBQUFxRyxDQUFBLENBRUEsQ0FBTyxDQUNQLENBR0EsRUFBRyxDQUNILElBQUEsVUFDQSxNQUFBLFVBQUEsQ0FDQSxJQUFBK0ksRUFBQSxLQUNBOWpCLEVBQUEsS0FBQSxPQUFBLENBQUEsRUFDQU8sRUFBQXNZLEVBQUE3WSxFQUFBLENBQUEsRUFDQTRqQixFQUFBcmpCLEVBQUEsQ0FBQSxFQUNBc2pCLEVBQUF0akIsRUFBQSxDQUFBLEVBQ0EsS0FBQSxLQUFBLGlCQUFBLHVEQUFBLEVBQUEsUUFBQSxTQUFBMmUsRUFBQSxDQUNBQSxFQUFBLFVBQUEsT0FBQSxRQUFBLGNBQUEsWUFBQSxXQUFBLGNBQUEsa0JBQUEsYUFBQSxtQkFBQSxzQkFBQSxrQkFBQSxTQUFBLENBQ0EsQ0FBTyxFQUNQLE1BQUEsS0FBQSxLQUFBLEtBQUEsUUFBQSxFQUFBLFFBQUEsU0FBQUEsRUFBQSxDQUNBLElBQUF4SyxFQUFBLE9BQUF3SyxFQUFBLFdBQUEsRUFDQXdFLEVBQUF4RSxFQUFBLFVBQ0F4SyxFQUFBa1AsR0FBQWxQLEVBQUFtUCxHQUNBSCxFQUFBLElBQUEsT0FBQSxFQUVBaFAsSUFBQWtQLEdBQ0FGLEVBQUEsSUFBQSxhQUFBLEVBRUFoUCxJQUFBbVAsR0FDQUgsRUFBQSxJQUFBLFdBQUEsRUFFQUksRUFBQSxTQUFBLFNBQUFwUCxDQUFBLElBQ0FnUCxFQUFBLElBQUEsV0FBQSxjQUFBLGtCQUFBLGFBQUEsbUJBQUEsdUJBQUEsaUJBQUEsRUFDQUEsRUFBQSxPQUFBLGdCQUFBLG9CQUFBLGtCQUFBLHdCQUFBLEdBRUFoUCxJQUFBb1AsRUFBQSxTQUNBSixFQUFBLElBQUEsU0FBQSxDQUVBLENBQU8sQ0FDUCxDQUdBLEVBQUcsQ0FDSCxJQUFBLGVBQ0EsTUFBQSxVQUFBLENBQ0EsSUFBQXBOLEVBQUEsS0FBQSxPQUFBLEtBQUEsUUFBQSxLQUFBLE9BQUEsS0FBQSxJQUFBLEVBQ0EsS0FBQSxLQUFBLGlCQUFBLFVBQUEsRUFBQSxRQUFBLFNBQUE0SSxFQUFBLENBQ0FBLEVBQUEsVUFBQSxPQUFBLFNBQUEsQ0FDQSxDQUFPLEVBQ1AsS0FBQSxLQUFBLFNBQUE1SSxDQUFBLEVBQUEsVUFBQSxJQUFBLFNBQUEsQ0FDQSxDQUNBLENBQUcsQ0FBQSxDQUNILEVBQUNrTSxFQUFBLEVBRUQsU0FBQWdELEdBQUE5RSxFQUFBK0UsRUFBQSxDQUNBLElBQUFDLEVBQUEsQ0FDQSxLQUFBaEYsRUFBQSxRQUFBLEVBQ0EsU0FBQSxJQUFBLEtBQUFBLEVBQUEsT0FBQSxRQUFBLEVBQ0EsT0FBQUEsRUFBQSxPQUFBLFlBQUEsR0FDQSxXQUFBQSxDQUNBLEVBQ0FBLEVBQUEsUUFBQSxjQUFBLElBQUEsWUFBQStFLEVBQUEsQ0FDQSxPQUFBQyxDQUNBLENBQUcsQ0FBQSxDQUNILENBR0EsU0FBQUMsR0FBQWpGLEVBQUFrRixFQUFBLENBQ0EsSUFBQUMsRUFBQW5GLEVBQUEsT0FDQU0sRUFBQTZFLEVBQUEsUUFDQS9FLEVBQUErRSxFQUFBLFFBQ0FDLEVBQUFwRixFQUFBLE9BQ0FxRixFQUFBRCxFQUFBLFlBQ0FsRSxFQUFBa0UsRUFBQSxTQUNBRSxFQUNBLE9BQUFELEVBQUEsR0FBQSxDQUNBLElBQUEsR0FDQUMsRUFBQTlLLEdBQUEwRyxFQUFBZ0UsQ0FBQSxFQUNBLE1BQ0EsSUFBQSxHQUNBSSxFQUFBMUssR0FBQXNHLEVBQUFnRSxDQUFBLEVBQ0EsTUFDQSxRQUNBSSxFQUFBMUssR0FBQXNHLEVBQUFnRSxFQUFBRyxFQUFBLE9BQUEsQ0FDQSxDQUNBQyxFQUFBaE0sRUFBQWdNLEVBQUFoRixFQUFBRixDQUFBLEVBQ0FKLEVBQUEsT0FBQSxZQUFBc0YsQ0FBQSxFQUFBLE9BQUEsQ0FDQSxDQUNBLFNBQUFDLEdBQUF2RixFQUFBLENBQ0EsSUFBQUYsRUFBQUUsRUFBQSxPQUFBLFlBQUEsR0FDQUYsSUFBQUUsRUFBQSxPQUFBLFNBR0FBLEVBQUEsT0FBQSxXQUFBRixFQUFBLENBQUEsRUFBQSxPQUFBLENBQ0EsQ0FDQSxTQUFBMEYsR0FBQXhGLEVBQUEsQ0FDQUEsRUFBQSxPQUFBLGFBQ0FBLEVBQUEsT0FBQSxDQUNBLFNBQUEsRUFDQSxDQUFLLEdBRUxBLEVBQUEsUUFBQSxPQUFBLEVBQ0FBLEVBQUEsS0FBQSxFQUVBLENBRUEsU0FBQXlGLEdBQUF6RixFQUFBMEYsRUFBQSxDQUNBLElBQUEzRCxFQUFBL0IsRUFBQSxPQUNBa0IsRUFBQSxJQUFBLEtBQUFhLEVBQUEsUUFBQSxFQUNBakMsRUFBQWlDLEVBQUEsWUFBQSxHQUNBNUgsRUFBQTJGLElBQUEsRUFBQXRGLEdBQUEwRyxFQUFBd0UsRUFBQXhFLEVBQUEsU0FBQSxDQUFBLEVBQUF0RyxHQUFBc0csRUFBQXdFLEVBQUF4RSxFQUFBLFlBQUEsQ0FBQSxFQUNBYSxFQUFBLFlBQUE1SCxDQUFBLEVBQUEsV0FBQTJGLEVBQUEsQ0FBQSxFQUFBLE9BQUEsQ0FDQSxDQUNBLFNBQUE2RixFQUFBM0YsRUFBQSxDQUNBLElBQUErQixFQUFBL0IsRUFBQSxPQUNBNEYsRUFBQTNMLEdBQUEsRUFDQSxHQUFBK0YsRUFBQSxPQUFBLGVBQUEsRUFBQSxDQUNBLEdBQUFBLEVBQUEsT0FBQSxTQUFBLENBQ0FBLEVBQUEsUUFBQTRGLENBQUEsRUFDQSxPQUVBNUYsRUFBQSxRQUFBNEYsRUFBQSxDQUNBLE9BQUEsRUFDQSxDQUFLLEVBQ0w3RCxFQUFBLE9BQUEsRUFFQUEsRUFBQSxXQUFBNkQsR0FDQTdELEVBQUEsWUFBQTZELENBQUEsRUFFQTdELEVBQUEsV0FBQSxDQUFBLEVBQUEsT0FBQSxDQUNBLENBQ0EsU0FBQThELEdBQUE3RixFQUFBLENBQ0FBLEVBQUEsUUFBQSxDQUNBLE1BQUEsRUFDQSxDQUFHLENBQ0gsQ0FDQSxTQUFBOEYsRUFBQTlGLEVBQUEsQ0FDQXVGLEdBQUF2RixDQUFBLENBQ0EsQ0FDQSxTQUFBK0YsR0FBQS9GLEVBQUEsQ0FDQWlGLEdBQUFqRixFQUFBLEVBQUEsQ0FDQSxDQUNBLFNBQUFnRyxHQUFBaEcsRUFBQSxDQUNBaUYsR0FBQWpGLEVBQUEsQ0FBQSxDQUNBLENBR0EsU0FBQWlHLEdBQUFqRyxFQUFBdEIsRUFBQSxDQUNBLElBQUFqVixFQUFBZ1YsR0FBQUMsRUFBQSxrQkFBQSxFQUNBLEdBQUEsR0FBQWpWLEdBQUFBLEVBQUEsVUFBQSxTQUFBLFVBQUEsR0FHQSxLQUFBeWMsRUFBQWxHLEVBQUEsT0FBQSxZQUNBbUcsRUFBQUQsRUFBQSxHQUNBRSxFQUFBRixFQUFBLFVBQ0FFLEVBQ0FwRyxFQUFBLFFBQUEsT0FBQXZXLEVBQUEsUUFBQSxJQUFBLENBQUEsRUFDSTBjLElBQUEsRUFDSlYsR0FBQXpGLEVBQUEsT0FBQXZXLEVBQUEsUUFBQSxLQUFBLENBQUEsRUFFQWdjLEdBQUF6RixFQUFBLE9BQUF2VyxFQUFBLFFBQUEsSUFBQSxDQUFBLEVBRUEsQ0FDQSxTQUFBNGMsR0FBQXJHLEVBQUEsQ0FDQSxDQUFBQSxFQUFBLFFBQUEsQ0FBQUEsRUFBQSxPQUFBLHNCQUNBQSxFQUFBLFdBQUEsTUFBQSxDQUVBLENBRUEsU0FBQXNHLEdBQUF2RSxFQUFBbmUsRUFBQSxDQVVBLEdBVEFBLEVBQUEsUUFBQSxTQUNBQSxFQUFBLE9BQ0FtZSxFQUFBLFNBQUEsTUFBQSxZQUFBbmUsRUFBQSxNQUNBb2IsR0FBQStDLEVBQUEsU0FBQSxLQUFBLElBRUFBLEVBQUEsU0FBQSxNQUFBLFlBQUEsR0FDQWhELEdBQUFnRCxFQUFBLFNBQUEsS0FBQSxJQUdBbmUsRUFBQSxVQUFBLENBQ0EsSUFBQTJpQixFQUFBeEUsRUFBQSxTQUFBLFFBQ0E5QyxHQUFBc0gsQ0FBQSxFQUNBM2lCLEVBQUEsVUFBQSxRQUFBLFNBQUE3RSxFQUFBLENBQ0F3bkIsRUFBQSxZQUFBeG5CLEVBQUEsVUFBQSxFQUFBLENBQUEsQ0FDQSxDQUFLLEVBRUwsR0FBQTZFLEVBQUEsVUFBQSxDQUNBLElBQUE0aUIsRUFBQXpFLEVBQUEsU0FBQSxRQUNBOUMsR0FBQXVILENBQUEsRUFDQTVpQixFQUFBLFVBQUEsUUFBQSxTQUFBN0UsRUFBQSxDQUNBeW5CLEVBQUEsWUFBQXpuQixFQUFBLFVBQUEsRUFBQSxDQUFBLENBQ0EsQ0FBSyxFQWFMLEdBWEE2RSxFQUFBLFNBQ0FtZSxFQUFBLFNBQUEsU0FBQSxZQUFBbmUsRUFBQSxPQUFBLE1BQ0FtZSxFQUFBLFNBQUEsU0FBQSxZQUFBbmUsRUFBQSxPQUFBLE9BRUFBLEVBQUEsV0FBQSxTQUNBQSxFQUFBLFNBQ0FvYixHQUFBK0MsRUFBQSxTQUFBLFFBQUEsRUFFQWhELEdBQUFnRCxFQUFBLFNBQUEsUUFBQSxHQUdBdkosRUFBQTVVLEVBQUEsU0FBQSxHQUFBNFUsRUFBQTVVLEVBQUEsU0FBQSxFQUFBLENBQ0EsSUFBQTZpQixFQUFBMUUsRUFBQSxXQUFBLE9BQ0F6QixFQUFBbUcsRUFBQSxRQUNBckcsRUFBQXFHLEVBQUEsUUFDQTFFLEVBQUEsU0FBQSxTQUFBLFNBQUEsQ0FBQTdJLEdBQUFlLEdBQUEsRUFBQXFHLEVBQUFGLENBQUEsRUFFQXhjLEVBQUEsV0FBQSxTQUNBQSxFQUFBLFNBQ0FvYixHQUFBK0MsRUFBQSxTQUFBLFFBQUEsRUFFQWhELEdBQUFnRCxFQUFBLFNBQUEsUUFBQSxFQUdBLENBS0EsU0FBQTJFLEdBQUExRyxFQUFBLENBQ0EsSUFBQWdCLEVBQUFoQixFQUFBLE1BQ0FFLEVBQUFGLEVBQUEsT0FDQWtCLEVBQUFGLEVBQUEsT0FBQSxFQUFBckksRUFBQXFJLENBQUEsRUFBQWQsRUFBQSxnQkFDQSxPQUFBNUcsRUFBQTRILEVBQUFoQixFQUFBLFFBQUFBLEVBQUEsT0FBQSxDQUNBLENBR0EsU0FBQXlHLEdBQUE1RSxFQUFBNUgsRUFBQSxDQUNBLElBQUF5TSxFQUFBLElBQUEsS0FBQTdFLEVBQUEsUUFBQSxFQUNBdUQsRUFBQSxJQUFBLEtBQUFuTCxDQUFBLEVBQ0EwTSxFQUFBOUUsRUFBQSxZQUNBb0UsRUFBQVUsRUFBQSxHQUNBbkwsRUFBQW1MLEVBQUEsS0FDQWpDLEVBQUFpQyxFQUFBLE1BQ0FoQyxFQUFBZ0MsRUFBQSxLQUNBcEUsRUFBQTZDLEVBQUEsWUFBQSxFQVlBLE9BWEF2RCxFQUFBLFNBQUE1SCxFQUNBc0ksSUFBQW1FLEVBQUEsWUFBQSxHQUNBOUIsR0FBQS9DLEVBQUEsV0FBQSxZQUFBLEVBRUF1RCxFQUFBLFNBQUEsSUFBQXNCLEVBQUEsU0FBQSxHQUNBOUIsR0FBQS9DLEVBQUEsV0FBQSxhQUFBLEVBTUFvRSxFQUFBLENBQ0EsSUFBQSxHQUNBLE9BQUFoTSxFQUFBeUssR0FBQXpLLEVBQUEwSyxFQUNBLElBQUEsR0FDQSxPQUFBcEMsSUFBQS9HLEVBQ0EsUUFDQSxPQUFBK0csRUFBQW1DLEdBQUFuQyxFQUFBb0MsQ0FDQSxDQUNBLENBQ0EsU0FBQWlDLEdBQUF0SSxFQUFBLENBQ0EsT0FBQSxPQUFBLGlCQUFBQSxDQUFBLEVBQUEsU0FDQSxDQUdBLElBQUF1SSxHQUFBLFVBQUEsQ0FDQSxTQUFBQSxFQUFBL0csRUFBQSxDQUNBN0ksRUFBQSxLQUFBNFAsQ0FBQSxFQUNBLEtBQUEsV0FBQS9HLEVBQ0EsSUFBQWdILEVBQUFyRixHQUFBLFFBQUEsaUJBQUEzQixFQUFBLE9BQUEsV0FBQSxFQUNBbmhCLEVBQUEsS0FBQSxRQUFBaWdCLEdBQUFrSSxDQUFBLEVBQUEsV0FDQUMsRUFBQTlPLEVBQUF0WixFQUFBLFdBQUEsU0FBQSxDQUFBLEVBQ0Fxb0IsRUFBQUQsRUFBQSxDQUFBLEVBQ0Ezb0IsRUFBQTJvQixFQUFBLENBQUEsRUFDQUUsRUFBQUYsRUFBQSxDQUFBLEVBQ0FHLEVBQUFGLEVBQUEsa0JBQ0FHLEVBQUFsUCxFQUFBK08sRUFBQSxpQkFBQSxTQUFBLENBQUEsRUFDQVgsRUFBQWMsRUFBQSxDQUFBLEVBQ0FDLEVBQUFELEVBQUEsQ0FBQSxFQUNBYixHQUFBYSxFQUFBLENBQUEsRUFDQUUsR0FBQXBQLEVBQUFnUCxFQUFBLFdBQUEsU0FBQSxDQUFBLEVBQ0FLLEdBQUFELEdBQUEsQ0FBQSxFQUNBRSxHQUFBRixHQUFBLENBQUEsRUFDQUcsR0FBQSxDQUNBLE1BQUFOLEVBQ0EsUUFBQWIsRUFDQSxXQUFBZSxFQUNBLFFBQUFkLEdBQ0EsU0FBQWdCLEdBQ0EsU0FBQUMsRUFDQSxFQUNBLEtBQUEsS0FBQW5wQixFQUNBLEtBQUEsU0FBQW9wQixHQUNBLElBQUFDLEdBQUEzSCxFQUFBLE9BQUEsU0FBQSxXQUNBbmhCLEVBQUEsVUFBQSxJQUFBLGNBQUEsT0FBQThvQixFQUFBLENBQUEsRUFDQUEsS0FBQSxZQUFBOW9CLEVBQUEsVUFBQSxJQUFBLFdBQUEsV0FBQSxRQUFBLFNBQUEsT0FBQSxNQUFBLEVBQ0F5bkIsR0FBQSxLQUFBdEcsRUFBQSxNQUFBLEVBQ0EsS0FBQSxTQUFBMEcsR0FBQTFHLENBQUEsRUFHQW5DLEdBQUFtQyxFQUFBLENBQUEsQ0FBQW5oQixFQUFBLFFBQUF3bkIsR0FBQSxLQUFBLEtBQUFyRyxDQUFBLEVBQUEsQ0FDQSxRQUFBLEVBQ0EsQ0FBSyxFQUFBLENBQUExaEIsRUFBQSxRQUFBMm5CLEdBQUEsS0FBQSxLQUFBakcsQ0FBQSxDQUFBLEVBQUEsQ0FBQTBILEdBQUEsV0FBQSxRQUFBNUIsRUFBQSxLQUFBLEtBQUE5RixDQUFBLENBQUEsRUFBQSxDQUFBMEgsR0FBQSxRQUFBLFFBQUEzQixHQUFBLEtBQUEsS0FBQS9GLENBQUEsQ0FBQSxFQUFBLENBQUEwSCxHQUFBLFFBQUEsUUFBQTFCLEdBQUEsS0FBQSxLQUFBaEcsQ0FBQSxDQUFBLEVBQUEsQ0FBQTBILEdBQUEsU0FBQSxRQUFBL0IsRUFBQSxLQUFBLEtBQUEzRixDQUFBLENBQUEsRUFBQSxDQUFBMEgsR0FBQSxTQUFBLFFBQUE3QixHQUFBLEtBQUEsS0FBQTdGLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFHTCxLQUFBLE1BQUEsQ0FBQSxJQUFBa0MsR0FBQSxJQUFBLEVBQUEsSUFBQTRCLEdBQUEsSUFBQSxFQUFBLElBQUFZLEdBQUEsS0FBQSxDQUNBLEdBQUEsRUFDQSxLQUFBLFFBQ0EsVUFBQSxPQUNBLEtBQUEsQ0FDQSxDQUFLLEVBQUEsSUFBQUEsR0FBQSxLQUFBLENBQ0wsR0FBQSxFQUNBLEtBQUEsVUFDQSxVQUFBLFNBQ0EsS0FBQSxFQUNBLENBQUssQ0FBQSxFQUNMLEtBQUEsWUFBQSxLQUFBLE1BQUExRSxFQUFBLE9BQUEsU0FBQSxFQUNBLEtBQUEsWUFBQSxPQUFBLEVBQ0EsS0FBQSxLQUFBLFlBQUEsS0FBQSxZQUFBLE9BQUEsRUFDQUEsRUFBQSxPQUFBLFVBQUEsWUFBQSxLQUFBLE9BQUEsQ0FDQSxDQUNBLE9BQUExSSxFQUFBeVAsRUFBQSxDQUFBLENBQ0EsSUFBQSxhQUNBLE1BQUEsU0FBQW5qQixFQUFBLENBQ0EwaUIsR0FBQSxLQUFBMWlCLENBQUEsRUFDQSxLQUFBLE1BQUEsUUFBQSxTQUFBZ2tCLEVBQUEsQ0FDQUEsRUFBQSxLQUFBaGtCLEVBQUEsRUFBQSxDQUNBLENBQU8sRUFDUCxLQUFBLFlBQUEsT0FBQSxDQUNBLENBQ0EsRUFBRyxDQUNILElBQUEsU0FDQSxNQUFBLFVBQUEsQ0FDQSxLQUFBLFdBQUEsT0FBQSxVQUFBLFlBQUEsS0FBQSxPQUFBLENBQ0EsQ0FDQSxFQUFHLENBQ0gsSUFBQSxPQUNBLE1BQUEsVUFBQSxDQUNBLEdBQUEsTUFBQSxPQUdBLE1BQUEsUUFBQSxVQUFBLElBQUEsU0FBQSxPQUFBLEVBQ0EsS0FBQSxRQUFBLFVBQUEsT0FBQSxRQUFBLEVBQ0EsS0FBQSxPQUFBLEdBQ0EsSUFBQW9jLEVBQUEsS0FBQSxXQUNBLEdBQUEsQ0FBQUEsRUFBQSxPQUFBLENBRUEsSUFBQTZILEVBQUFmLEdBQUE5RyxFQUFBLFVBQUEsRUFDQTZILElBQUFmLEdBQUE5RyxFQUFBLE9BQUEsU0FBQSxFQUNBLEtBQUEsUUFBQSxJQUFBNkgsRUFDVSxLQUFBLFFBQUEsS0FDVixLQUFBLFFBQUEsZ0JBQUEsS0FBQSxFQUVBLEtBQUEsTUFBQSxFQUNBN0gsRUFBQSxPQUFBLHNCQUNBQSxFQUFBLFdBQUEsS0FBQSxFQUdBOEUsR0FBQTlFLEVBQUEsTUFBQSxFQUNBLENBQ0EsRUFBRyxDQUNILElBQUEsT0FDQSxNQUFBLFVBQUEsQ0FDQSxLQUFBLFNBR0EsS0FBQSxXQUFBLGFBQUEsRUFDQSxLQUFBLFFBQUEsVUFBQSxPQUFBLFNBQUEsT0FBQSxFQUNBLEtBQUEsUUFBQSxVQUFBLElBQUEsU0FBQSxRQUFBLFFBQUEsRUFDQSxLQUFBLE9BQUEsR0FDQThFLEdBQUEsS0FBQSxXQUFBLE1BQUEsRUFDQSxDQUNBLEVBQUcsQ0FDSCxJQUFBLFFBQ0EsTUFBQSxVQUFBLENBQ0EsSUFBQWdELEVBQUEsS0FBQSxRQUNBOUUsRUFBQThFLEVBQUEsVUFDQXJvQixFQUFBcW9CLEVBQUEsTUFDQUMsRUFBQSxLQUFBLFdBQ0E3SCxFQUFBNkgsRUFBQSxPQUNBQyxFQUFBRCxFQUFBLFdBQ0FFLEVBQUEvSCxFQUFBLFVBQ0FnSSxFQUFBLEtBQUEsUUFBQSxzQkFBQSxFQUNBQyxFQUFBRCxFQUFBLE1BQ0FFLEVBQUFGLEVBQUEsT0FDQUcsR0FBQUosRUFBQSxzQkFBQSxFQUNBSyxHQUFBRCxHQUFBLEtBQ0FFLEdBQUFGLEdBQUEsSUFDQUcsR0FBQUgsR0FBQSxNQUNBSSxHQUFBVCxFQUFBLHNCQUFBLEVBQ0FVLEdBQUFELEdBQUEsS0FDQUUsR0FBQUYsR0FBQSxJQUNBRyxHQUFBSCxHQUFBLE1BQ0FJLEdBQUFKLEdBQUEsT0FDQUssR0FBQTVJLEVBQUEsWUFDQTZJLEdBQUFELEdBQUEsRUFDQUUsR0FBQUYsR0FBQSxFQUNBeGdCLEdBQ0FqTCxHQUNBNHJCLEdBQ0FoQixJQUFBLFNBQUEsTUFDQTNmLEdBQUEsT0FBQSxRQUNBakwsR0FBQXFyQixHQUFBLE9BQUEsUUFDQU8sR0FBQU4sR0FBQXJnQixLQUVBQSxHQUFBMmYsRUFBQSxVQUNBNXFCLEdBQUFxckIsR0FBQUosR0FDQVcsR0FBQU4sR0FBQUosR0FBQWpnQixJQUVBeWdCLEtBQUEsU0FDQTFyQixHQUFBLEdBRUEwckIsR0FBQSxPQUNBMXJCLEdBQUEsSUFDVUEsR0FBQThxQixFQUFBSyxHQUVWTyxHQUFBLFFBRUFBLEdBQUFqQyxHQUFBa0IsQ0FBQSxJQUFBLE1BQUEsUUFBQSxRQUdBZSxLQUFBLFVBQ0ExckIsSUFBQThxQixFQUFBUyxJQUVBSSxLQUFBLFNBQ0FBLEdBQUFDLEdBQUFiLEVBQUE5ZixHQUFBLFNBQUEsT0FFQTBnQixLQUFBLE1BQ0FDLElBQUFiLEVBRUFhLElBQUFKLEdBRUE3RixFQUFBLE9BQUEsd0JBQUEsMkJBQUEsMEJBQUEsd0JBQUEsRUFDQUEsRUFBQSxJQUFBLHFCQUFBLE9BQUFnRyxFQUFBLEVBQUEscUJBQUEsT0FBQUQsRUFBQSxDQUFBLEVBQ0F0cEIsRUFBQSxJQUFBd3BCLElBQUEsR0FBQSxPQUFBQSxHQUFBLElBQUEsRUFDQXhwQixFQUFBLEtBQUFwQyxJQUFBLEdBQUEsT0FBQUEsR0FBQSxJQUFBLENBQ0EsQ0FDQSxFQUFHLENBQ0gsSUFBQSxxQkFDQSxNQUFBLFNBQUE2ckIsRUFBQSxDQUNBLEtBQUEsU0FBQSxXQUFBLFlBQUFBLENBQ0EsQ0FDQSxFQUFHLENBQ0gsSUFBQSxxQkFDQSxNQUFBLFNBQUFDLEVBQUEsQ0FDQSxLQUFBLFNBQUEsUUFBQSxTQUFBQSxDQUNBLENBQ0EsRUFBRyxDQUNILElBQUEscUJBQ0EsTUFBQSxTQUFBQSxFQUFBLENBQ0EsS0FBQSxTQUFBLFFBQUEsU0FBQUEsQ0FDQSxDQUNBLEVBQUcsQ0FDSCxJQUFBLGFBQ0EsTUFBQSxTQUFBckosRUFBQSxDQUNBLElBQUFzSixFQUFBLEtBQUEsWUFDQUMsRUFBQSxLQUFBLE1BQUF2SixDQUFBLEVBQ0EsT0FBQXVKLEVBQUEsS0FBQUQsRUFBQSxLQUNBLEtBQUEsWUFBQUMsRUFDQSxLQUFBLGNBQUEsU0FDQXZFLEdBQUEsS0FBQSxXQUFBLFlBQUEsRUFDQSxLQUFBLEtBQUEsYUFBQXVFLEVBQUEsUUFBQUQsRUFBQSxPQUFBLEdBRUEsSUFDQSxDQUdBLEVBQUcsQ0FDSCxJQUFBLGNBQ0EsTUFBQSxTQUFBOUQsRUFBQSxDQUNBLFlBQUEsY0FBQXFCLEdBQUEsS0FBQXJCLENBQUEsRUFBQSxTQUFBLGVBQ0EsS0FBQSxNQUFBLFFBQUEsU0FBQXNDLEVBQUEsQ0FDQUEsRUFBQSxZQUFBLENBQ0EsQ0FBTyxFQUNQLElBQ0EsQ0FHQSxFQUFHLENBQ0gsSUFBQSxTQUNBLE1BQUEsVUFBQSxDQUNBLElBQUF0QyxFQUFBb0IsR0FBQSxLQUFBLFVBQUEsRUFDQSxZQUFBLGNBQUFDLEdBQUEsS0FBQXJCLENBQUEsRUFBQSxTQUFBLFVBQ0EsS0FBQSxNQUFBLFFBQUEsU0FBQXNDLEVBQUEsQ0FDQUEsRUFBQSxZQUFBLEVBQ0FBLEVBQUEsZ0JBQUEsQ0FDQSxDQUFPLEVBQ1AsSUFDQSxDQUdBLEVBQUcsQ0FDSCxJQUFBLFNBQ0EsTUFBQSxVQUFBLENBQ0EsSUFBQTBCLEVBQUEsVUFBQSxPQUFBLEdBQUEsVUFBQSxDQUFBLElBQUEsT0FBQSxVQUFBLENBQUEsRUFBQSxHQUNBQyxFQUFBRCxHQUFBLEtBQUEsZUFBQSxTQUNBLE9BQUEsS0FBQSxjQUNBLEtBQUEsWUFBQUMsQ0FBQSxFQUFBLENBQ0EsQ0FDQSxDQUFHLENBQUEsQ0FDSCxFQUFDLEVBU0QsU0FBQUMsR0FBQW5QLEVBQUFvUCxFQUFBQyxFQUFBQyxFQUFBOW1CLEVBQUFDLEVBQUEsQ0FDQSxHQUFBb1csR0FBQW1CLEVBQUF4WCxFQUFBQyxDQUFBLEVBR0EsSUFBQTZtQixFQUFBdFAsQ0FBQSxFQUFBLENBQ0EsSUFBQUYsRUFBQXNQLEVBQUFwUCxFQUFBcVAsQ0FBQSxFQUNBLE9BQUFGLEdBQUFyUCxFQUFBc1AsRUFBQUMsRUFBQUMsRUFBQTltQixFQUFBQyxDQUFBLEVBRUEsT0FBQXVYLEVBQ0EsQ0FJQSxTQUFBdVAsR0FBQTVKLEVBQUF0QixFQUFBd0csRUFBQTJFLEVBQUEsQ0FDQSxJQUFBOUgsRUFBQS9CLEVBQUEsT0FDQXFGLEVBQUF0RCxFQUFBLFlBQ0ErSCxFQUFBekUsRUFBQSxNQUFBLEVBQ0FuRSxFQUFBYSxFQUFBLFNBQ0EwSCxFQUNBRSxFQUNBLE9BQUF0RSxFQUFBLEdBQUEsQ0FDQSxJQUFBLEdBQ0F3RSxFQUNBM0ksRUFBQTlHLEdBQUE4RyxFQUFBZ0UsRUFBQSxDQUFBLEVBQ1F4RyxFQUFBLFNBQUFBLEVBQUEsUUFDUndDLEVBQUF0RyxHQUFBc0csRUFBQWdFLENBQUEsRUFFQWhFLEVBQUE5RyxHQUFBOEcsRUFBQWdFLENBQUEsRUFFQXVFLEVBQUFyUCxHQUNBdVAsRUFBQSxTQUFBdFAsRUFBQSxDQUNBLE9BQUFnTCxFQUFBLFNBQUEsU0FBQWhMLENBQUEsQ0FDQSxFQUNBLE1BQ0EsSUFBQSxHQUNBNkcsRUFBQTFHLEdBQUEwRyxFQUFBMkksRUFBQTNFLEVBQUEsRUFBQUEsQ0FBQSxFQUNBdUUsRUFBQWpQLEdBQ0FtUCxFQUFBLFNBQUF0UCxFQUFBLENBQ0EsSUFBQTRHLEdBQUEsSUFBQSxLQUFBNUcsQ0FBQSxFQUNBcUIsR0FBQTJKLEVBQUEsS0FDQThELEdBQUE5RCxFQUFBLFNBQ0EsT0FBQXBFLEdBQUEsWUFBQSxJQUFBdkYsSUFBQXlOLEdBQUEsU0FBQWxJLEdBQUEsU0FBQSxDQUFBLENBQ0EsRUFDQSxNQUNBLFFBQ0FDLEVBQUF0RyxHQUFBc0csRUFBQWdFLEdBQUEyRSxFQUFBLEVBQUEsR0FBQUMsQ0FBQSxFQUNBTCxFQUFBN08sR0FDQStPLEVBQUEsU0FBQXRQLEVBQUEsQ0FDQSxPQUFBZ0wsRUFBQSxTQUFBLFNBQUE3SixHQUFBbkIsRUFBQXlQLENBQUEsQ0FBQSxDQUNBLENBQ0EsQ0FDQTVJLEVBQUFzSSxHQUFBdEksRUFBQXVJLEVBQUF2RSxFQUFBLEVBQUEsQ0FBQTRFLEVBQUFBLEVBQUFILEVBQUF0RSxFQUFBLFFBQUFBLEVBQUEsT0FBQSxFQUNBbkUsSUFBQSxRQUNBYSxFQUFBLFlBQUFiLENBQUEsRUFBQSxPQUFBLENBRUEsQ0FDQSxTQUFBNkksR0FBQS9KLEVBQUF0QixFQUFBLENBQ0EsR0FBQUEsRUFBQSxNQUFBLE1BQUEsQ0FDQThHLEdBQUF4RixDQUFBLEVBQ0EsT0FFQSxJQUFBK0IsRUFBQS9CLEVBQUEsT0FDQTZHLEVBQUE5RSxFQUFBLFlBQ0FvRSxFQUFBVSxFQUFBLEdBQ0FULEVBQUFTLEVBQUEsVUFDQSxHQUFBOUUsRUFBQSxPQVlJLEdBQUEvQixFQUFBLFNBQ0osT0FBQXRCLEVBQUEsSUFBQSxDQUNBLElBQUEsU0FDQXFELEVBQUEsS0FBQSxFQUNBLE1BQ0EsSUFBQSxRQUNBL0IsRUFBQSxhQUFBLENBQ0EsT0FBQSxHQUNBLFNBQUFBLEVBQUEsT0FBQSxRQUNBLENBQVMsRUFDVCxNQUNBLFFBQ0EsTUFDQSxLQUVBLFFBQUF0QixFQUFBLElBQUEsQ0FDQSxJQUFBLFNBQ0FxRCxFQUFBLEtBQUEsRUFDQSxNQUNBLElBQUEsWUFDQSxHQUFBckQsRUFBQSxTQUFBQSxFQUFBLFFBQ0F1RyxHQUFBakYsRUFBQSxFQUFBLFVBQ1V0QixFQUFBLFNBQUEsQ0FDVnNCLEVBQUEsY0FBQSxFQUNBLFlBRUE0SixHQUFBNUosRUFBQXRCLEVBQUEsR0FBQSxFQUFBLEVBRUEsTUFDQSxJQUFBLGFBQ0EsR0FBQUEsRUFBQSxTQUFBQSxFQUFBLFFBQ0F1RyxHQUFBakYsRUFBQSxDQUFBLFVBQ1V0QixFQUFBLFNBQUEsQ0FDVnNCLEVBQUEsY0FBQSxFQUNBLFlBRUE0SixHQUFBNUosRUFBQXRCLEVBQUEsRUFBQSxFQUFBLEVBRUEsTUFDQSxJQUFBLFVBQ0EsR0FBQUEsRUFBQSxTQUFBQSxFQUFBLFFBQ0E2RyxHQUFBdkYsQ0FBQSxVQUNVdEIsRUFBQSxTQUFBLENBQ1ZzQixFQUFBLGNBQUEsRUFDQSxZQUVBNEosR0FBQTVKLEVBQUF0QixFQUFBLEdBQUEsRUFBQSxFQUVBLE1BQ0EsSUFBQSxZQUNBLEdBQUFBLEVBQUEsVUFBQSxDQUFBQSxFQUFBLFNBQUEsQ0FBQUEsRUFBQSxRQUFBLENBQ0FzQixFQUFBLGNBQUEsRUFDQSxPQUVBNEosR0FBQTVKLEVBQUF0QixFQUFBLEVBQUEsRUFBQSxFQUNBLE1BQ0EsSUFBQSxRQUNBMEgsRUFDQXBHLEVBQUEsUUFBQStCLEVBQUEsUUFBQSxFQUVBQSxFQUFBLFdBQUFvRSxFQUFBLENBQUEsRUFBQSxPQUFBLEVBRUEsTUFDQSxJQUFBLFlBQ0EsSUFBQSxTQUNBbkcsRUFBQSxjQUFBLEVBQ0EsT0FDQSxRQUNBdEIsRUFBQSxJQUFBLFNBQUEsR0FBQSxDQUFBQSxFQUFBLFNBQUEsQ0FBQUEsRUFBQSxTQUNBc0IsRUFBQSxjQUFBLEVBRUEsTUFDQSxLQW5GQSxRQUFBdEIsRUFBQSxJQUFBLENBQ0EsSUFBQSxZQUNBLElBQUEsU0FDQXFELEVBQUEsS0FBQSxFQUNBLE1BQ0EsSUFBQSxRQUNBL0IsRUFBQSxPQUFBLEVBQ0EsTUFDQSxRQUNBLE1BQ0EsQ0EyRUF0QixFQUFBLGVBQUEsRUFDQUEsRUFBQSxnQkFBQSxDQUNBLENBQ0EsU0FBQXNMLEdBQUFoSyxFQUFBLENBQ0FBLEVBQUEsT0FBQSxhQUFBLENBQUFBLEVBQUEsVUFDQUEsRUFBQSxLQUFBLENBRUEsQ0FHQSxTQUFBaUssR0FBQWpLLEVBQUF0QixFQUFBLENBQ0EsSUFBQUYsRUFBQUUsRUFBQSxRQUNBc0IsRUFBQSxPQUFBLFFBQUFBLEVBQUEsT0FBQSxlQUNBeEIsRUFBQSxRQUFBQSxJQUFBLFNBQUEsY0FDQUEsRUFBQSxVQUFBLFdBQUEsVUFBQSxDQUNBLE9BQUFBLEVBQUEsUUFDQSxPQUFBQSxFQUFBLFNBQ0EsRUFBSyxHQUFBLEVBRUwsQ0FDQSxTQUFBMEwsR0FBQWxLLEVBQUF0QixFQUFBLENBQ0EsSUFBQUYsRUFBQUUsRUFBQSxPQUNBRixFQUFBLFlBR0EsYUFBQUEsRUFBQSxTQUFBLEVBQ0EsT0FBQUEsRUFBQSxVQUNBQSxFQUFBLFNBQ0F3QixFQUFBLGNBQUEsRUFFQSxPQUFBeEIsRUFBQSxRQUNBd0IsRUFBQSxPQUFBLGFBQ0FBLEVBQUEsS0FBQSxFQUVBLENBQ0EsU0FBQW1LLEdBQUFuSyxFQUFBdEIsRUFBQSxDQUNBQSxFQUFBLGNBQUEsTUFBQSxTQUFBLFlBQUEsR0FDQXNCLEVBQUEsY0FBQSxDQUVBLENBR0EsU0FBQW9LLEdBQUFwSyxFQUFBdEIsRUFBQSxDQUNBLElBQUE3ZixFQUFBbWhCLEVBQUEsUUFDQSxHQUFBbmhCLElBQUEsU0FBQSxjQUdBLEtBQUF3ckIsRUFBQXJLLEVBQUEsT0FBQSxRQUNBdkIsR0FBQUMsRUFBQSxTQUFBRixFQUFBLENBQ0EsT0FBQUEsSUFBQTNmLEdBQUEyZixJQUFBNkwsQ0FDQSxDQUFHLEdBR0g3RSxHQUFBeEYsQ0FBQSxFQUNBLENBRUEsU0FBQXNLLEdBQUF0SixFQUFBZCxFQUFBLENBQ0EsT0FBQWMsRUFBQSxJQUFBLFNBQUFDLEVBQUEsQ0FDQSxPQUFBMUQsR0FBQTBELEVBQUFmLEVBQUEsT0FBQUEsRUFBQSxNQUFBLENBQ0EsQ0FBRyxFQUFBLEtBQUFBLEVBQUEsYUFBQSxDQUNILENBTUEsU0FBQXFLLEdBQUF2SyxFQUFBd0ssRUFBQSxDQUNBLElBQUFDLEVBQUEsVUFBQSxPQUFBLEdBQUEsVUFBQSxDQUFBLElBQUEsT0FBQSxVQUFBLENBQUEsRUFBQSxHQUNBdkssRUFBQUYsRUFBQSxPQUNBMEssRUFBQTFLLEVBQUEsTUFDQTZDLEVBQUE3QyxFQUFBLFlBQ0EsR0FBQXdLLEVBQUEsU0FBQSxFQUVBLE9BQUFDLEVBQUEsQ0FBQSxFQUFBLE9BRUEsSUFBQXRILEVBQUFOLEdBQUE3QyxJQUFBNkMsRUFBQSxZQUFBLENBQUEsRUFDQThILEVBQUFILEVBQUEsT0FBQSxTQUFBeEosRUFBQUMsRUFBQSxDQUNBLElBQUE1RyxFQUFBZ0QsR0FBQTRELEVBQUFmLEVBQUEsT0FBQUEsRUFBQSxNQUFBLEVBQ0EsR0FBQTdGLElBQUEsT0FDQSxPQUFBMkcsRUFFQSxHQUFBZCxFQUFBLFVBQUEsRUFBQSxDQUlBLElBQUEwSyxFQUFBLElBQUEsS0FBQXZRLENBQUEsRUFDQTZGLEVBQUEsWUFBQSxFQUNBN0YsRUFBQThJLEVBQUF5SCxFQUFBLFNBQUFBLEVBQUEsU0FBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBQSxFQUFBLFFBQUEsQ0FBQSxFQUVBdlEsRUFBQThJLEVBQUF5SCxFQUFBLFlBQUFBLEVBQUEsWUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUFBLEVBQUEsU0FBQSxFQUFBLENBQUEsRUFHQSxPQUFBMVIsR0FBQW1CLEVBQUE2RixFQUFBLFFBQUFBLEVBQUEsT0FBQSxHQUFBLENBQUFjLEVBQUEsU0FBQTNHLENBQUEsR0FBQSxDQUFBNkYsRUFBQSxjQUFBLFNBQUE3RixDQUFBLEdBQUEsQ0FBQTZGLEVBQUEsbUJBQUEsU0FBQSxJQUFBLEtBQUE3RixDQUFBLEVBQUEsT0FBQSxDQUFBLEdBQ0EyRyxFQUFBLEtBQUEzRyxDQUFBLEVBRUEyRyxDQUNBLEVBQUcsQ0FBQSxDQUFBLEVBQ0gsR0FBQTJKLEVBQUEsU0FBQSxFQUdBLE9BQUF6SyxFQUFBLFdBQUEsQ0FBQXVLLElBRUFFLEVBQUFBLEVBQUEsT0FBQSxTQUFBM0osRUFBQTNHLEVBQUEsQ0FDQSxPQUFBcVEsRUFBQSxTQUFBclEsQ0FBQSxHQUNBMkcsRUFBQSxLQUFBM0csQ0FBQSxFQUVBMkcsQ0FDQSxFQUFLMEosRUFBQSxPQUFBLFNBQUFyUSxFQUFBLENBQ0wsTUFBQSxDQUFBc1EsRUFBQSxTQUFBdFEsQ0FBQSxDQUNBLENBQUssQ0FBQSxHQUdMNkYsRUFBQSxrQkFBQXlLLEVBQUEsT0FBQXpLLEVBQUEsaUJBQUF5SyxFQUFBLE1BQUF6SyxFQUFBLGlCQUFBLEVBQUEsRUFBQXlLLENBQ0EsQ0FJQSxTQUFBRSxHQUFBN0ssRUFBQSxDQUNBLElBQUE4SyxFQUFBLFVBQUEsT0FBQSxHQUFBLFVBQUEsQ0FBQSxJQUFBLE9BQUEsVUFBQSxDQUFBLEVBQUEsRUFDQXhCLEVBQUEsVUFBQSxPQUFBLEdBQUEsVUFBQSxDQUFBLElBQUEsT0FBQSxVQUFBLENBQUEsRUFBQSxHQUNBcEosRUFBQUYsRUFBQSxPQUNBK0IsRUFBQS9CLEVBQUEsT0FDQWdJLEVBQUFoSSxFQUFBLFdBQ0EsR0FBQThLLEVBQUEsRUFBQSxDQUNBLElBQUF6QixFQUFBdEgsRUFBQSxPQUFBN0IsRUFBQSxVQUFBQSxFQUFBLFVBQ0E2QixFQUFBLE9BQUEsRUFBQSxXQUFBc0gsQ0FBQSxFQUFBLE9BQUFDLENBQUEsRUFFQXdCLEVBQUEsR0FBQTlDLElBQ0FBLEVBQUEsTUFBQXNDLEdBQUF0SyxFQUFBLE1BQUFFLENBQUEsRUFFQSxDQUNBLFNBQUE2SyxHQUFBL0ssRUFBQXdLLEVBQUE1bUIsRUFBQSxDQUNBLElBQUE2bUIsRUFBQTdtQixFQUFBLE1BQ0FvbkIsRUFBQXBuQixFQUFBLE9BQ0FxbkIsRUFBQXJuQixFQUFBLFNBQ0FvbkIsSUFBQSxTQUNBQSxFQUFBLElBRUFBLEVBRUlDLElBQUEsU0FDSkEsRUFBQWpMLEVBQUEsT0FBQSxVQUZBaUwsRUFBQSxHQUlBLElBQUFOLEVBQUFKLEdBQUF2SyxFQUFBd0ssRUFBQUMsQ0FBQSxFQUNBRSxJQUdBQSxFQUFBLFNBQUEsSUFBQTNLLEVBQUEsTUFBQSxTQUFBLEdBQ0FBLEVBQUEsTUFBQTJLLEVBQ0FFLEdBQUE3SyxFQUFBZ0wsRUFBQSxFQUFBLENBQUEsRUFDQWxHLEdBQUE5RSxFQUFBLFlBQUEsR0FFQTZLLEdBQUE3SyxFQUFBLENBQUEsRUFFQWlMLEdBQ0FqTCxFQUFBLEtBQUEsRUFFQSxDQUtBLElBQUFrTCxHQUFBLFVBQUEsQ0FTQSxTQUFBQSxFQUFBcnNCLEVBQUEsQ0FDQSxJQUFBK0UsRUFBQSxVQUFBLE9BQUEsR0FBQSxVQUFBLENBQUEsSUFBQSxPQUFBLFVBQUEsQ0FBQSxFQUFBLENBQUEsRUFDQWlmLEVBQUEsVUFBQSxPQUFBLEdBQUEsVUFBQSxDQUFBLElBQUEsT0FBQSxVQUFBLENBQUEsRUFBQSxPQUNBMUwsRUFBQSxLQUFBK1QsQ0FBQSxFQUNBcnNCLEVBQUEsV0FBQSxLQUNBLEtBQUEsUUFBQUEsRUFHQSxJQUFBcWhCLEVBQUEsS0FBQSxPQUFBLE9BQUEsT0FBQSxDQUNBLFlBQUF0YyxFQUFBLGFBQUEsT0FBQUEsRUFBQSxXQUFBLEdBQUEsU0FDQSxVQUFBLFNBQUEsS0FDQSxnQkFBQXFXLEdBQUEsRUFDQSxRQUFBLE9BQ0EsUUFBQSxNQUNBLEVBQUs4RixHQUFBakwsR0FBQSxJQUFBLENBQUEsRUFDTCxLQUFBLFNBQUFsUixFQUNBLE9BQUEsT0FBQXNjLEVBQUFILEdBQUFuYyxFQUFBLElBQUEsQ0FBQSxFQUdBLElBQUF1bkIsRUFBQSxLQUFBLE9BQUF0c0IsRUFBQSxVQUFBLFFBQ0FtcEIsRUFDQW9ELEVBQ0EsR0FBQUQsRUFDQWpMLEVBQUEsVUFBQXJoQixFQUNBdXNCLEVBQUFyUyxFQUFBbGEsRUFBQSxRQUFBLEtBQUFxaEIsRUFBQSxhQUFBLEVBQ0EsT0FBQXJoQixFQUFBLFFBQUEsU0FDTSxDQUNOLElBQUFvcEIsRUFBQXJrQixFQUFBLFVBQUEsU0FBQSxjQUFBQSxFQUFBLFNBQUEsRUFBQSxLQUNBcWtCLElBQ0EvSCxFQUFBLFVBQUErSCxHQUVBRCxFQUFBLEtBQUEsV0FBQW5wQixFQUNBbXBCLEVBQUEsVUFBQSxJQUFBLGtCQUFBLEVBQ0FvRCxFQUFBclMsRUFBQWlQLEVBQUEsTUFBQTlILEVBQUEsYUFBQSxFQUVBLEdBQUEyQyxFQUFBLENBRUEsSUFBQWpOLEVBQUFpTixFQUFBLE9BQUEsUUFBQW1GLENBQUEsRUFDQXFELEVBQUF4SSxFQUFBLFlBQ0EsR0FBQWpOLEVBQUEsR0FBQUEsRUFBQSxHQUFBLENBQUEsTUFBQSxRQUFBeVYsQ0FBQSxFQUNBLE1BQUEsTUFBQSw2QkFBQSxFQUtBQSxFQUFBelYsQ0FBQSxFQUFBLEtBRUEsT0FBQSxlQUFBLEtBQUEsY0FBQSxDQUNBLElBQUEsVUFBQSxDQUNBLE9BQUFpTixDQUNBLENBQ0EsQ0FBTyxFQUlQLEtBQUEsTUFBQSxDQUFBLEVBRUEsSUFBQXlJLEVBQUFmLEdBQUEsS0FBQWEsQ0FBQSxFQUNBRSxHQUFBQSxFQUFBLE9BQUEsSUFDQSxLQUFBLE1BQUFBLEdBRUF0RCxJQUNBQSxFQUFBLE1BQUFzQyxHQUFBLEtBQUEsTUFBQXBLLENBQUEsR0FFQSxJQUFBNkIsR0FBQSxLQUFBLE9BQUEsSUFBQWdGLEdBQUEsSUFBQSxFQUNBLEdBQUFvRSxFQUNBLEtBQUEsS0FBQSxNQUNNLENBRU4sSUFBQUksR0FBQW5CLEdBQUEsS0FBQSxLQUFBLElBQUEsRUFDQXJNLEdBQUEsQ0FBQSxDQUFBaUssRUFBQSxVQUFBK0IsR0FBQSxLQUFBLEtBQUEsSUFBQSxDQUFBLEVBQUEsQ0FBQS9CLEVBQUEsUUFBQWdDLEdBQUEsS0FBQSxLQUFBLElBQUEsQ0FBQSxFQUFBLENBQUFoQyxFQUFBLFlBQUFpQyxHQUFBLEtBQUEsS0FBQSxJQUFBLENBQUEsRUFBQSxDQUFBakMsRUFBQSxRQUFBa0MsR0FBQSxLQUFBLEtBQUEsSUFBQSxDQUFBLEVBQUEsQ0FBQWxDLEVBQUEsUUFBQW1DLEdBQUEsS0FBQSxLQUFBLElBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxZQUFBb0IsRUFBQSxFQUFBLENBQUEsU0FBQSxhQUFBQSxFQUFBLEVBQUEsQ0FBQSxPQUFBLFNBQUF4SixHQUFBLE1BQUEsS0FBQUEsRUFBQSxDQUFBLENBQUEsRUFDQWxFLEdBQUEsS0FBQUUsRUFBQSxFQUVBLENBZ0JBLE9BQUF6RyxFQUFBNFQsRUFBQSxDQUFBLENBQ0EsSUFBQSxTQUNBLElBSUEsVUFBQSxDQUNBLE1BQUEsQ0FBQSxFQUFBLEtBQUEsUUFBQSxLQUFBLE9BQUEsT0FDQSxDQUtBLEVBQUcsQ0FDSCxJQUFBLGdCQUNBLElBQUEsVUFBQSxDQUNBLE9BQUEsS0FBQSxPQUFBLEtBQUEsT0FBQSxRQUFBLE1BQ0EsQ0FNQSxFQUFHLENBQ0gsSUFBQSxhQUNBLE1BQUEsU0FBQXRuQixFQUFBLENBQ0EsSUFBQW1lLEVBQUEsS0FBQSxPQUNBeUosRUFBQXpMLEdBQUFuYyxFQUFBLElBQUEsRUFDQSxPQUFBLE9BQUEsS0FBQSxTQUFBQSxDQUFBLEVBQ0EsT0FBQSxPQUFBLEtBQUEsT0FBQTRuQixDQUFBLEVBQ0F6SixFQUFBLFdBQUF5SixDQUFBLEVBQ0FYLEdBQUEsS0FBQSxDQUFBLENBQ0EsQ0FLQSxFQUFHLENBQ0gsSUFBQSxPQUNBLE1BQUEsVUFBQSxDQUNBLEdBQUEsS0FBQSxXQUFBLENBQ0EsR0FBQSxLQUFBLFdBQUEsU0FDQSxPQUVBLEtBQUEsYUFBQSxTQUFBLGdCQUNBLEtBQUEsU0FBQSxHQUNBLEtBQUEsV0FBQSxNQUFBLEVBQ0EsT0FBQSxLQUFBLFVBR0EsS0FBQSxPQUFBLEtBQUEsQ0FDQSxDQU1BLEVBQUcsQ0FDSCxJQUFBLE9BQ0EsTUFBQSxVQUFBLENBQ0EsS0FBQSxTQUdBLEtBQUEsT0FBQSxLQUFBLEVBQ0EsS0FBQSxPQUFBLE9BQUEsRUFBQSxXQUFBLEtBQUEsT0FBQSxTQUFBLEVBQUEsT0FBQSxFQUNBLENBTUEsRUFBRyxDQUNILElBQUEsVUFDQSxNQUFBLFVBQUEsQ0FDQSxZQUFBLEtBQUEsRUFDQTNNLEdBQUEsSUFBQSxFQUNBLEtBQUEsT0FBQSxPQUFBLEVBQ0EsS0FBQSxRQUNBLEtBQUEsV0FBQSxVQUFBLE9BQUEsa0JBQUEsRUFFQSxPQUFBLEtBQUEsUUFBQSxXQUNBLElBQ0EsQ0FhQSxFQUFHLENBQ0gsSUFBQSxVQUNBLE1BQUEsVUFBQSxDQUNBLElBQUFvRSxFQUFBLEtBQ0E1RixFQUFBLFVBQUEsT0FBQSxHQUFBLFVBQUEsQ0FBQSxJQUFBLE9BQUEsVUFBQSxDQUFBLEVBQUEsT0FDQStPLEVBQUEvTyxFQUFBLFNBQUFyQyxFQUFBLENBQ0EsT0FBQWtELEdBQUFsRCxFQUFBcUMsRUFBQTRGLEVBQUEsT0FBQSxNQUFBLENBQ0EsRUFBUSxTQUFBakksRUFBQSxDQUNSLE9BQUEsSUFBQSxLQUFBQSxDQUFBLENBQ0EsRUFDQSxHQUFBLEtBQUEsT0FBQSxVQUNBLE9BQUEsS0FBQSxNQUFBLElBQUFvUixDQUFBLEVBRUEsR0FBQSxLQUFBLE1BQUEsT0FBQSxFQUNBLE9BQUFBLEVBQUEsS0FBQSxNQUFBLENBQUEsQ0FBQSxDQUVBLENBeUNBLEVBQUcsQ0FDSCxJQUFBLFVBQ0EsTUFBQSxVQUFBLENBQ0EsUUFBQTdaLEVBQUEsVUFBQSxPQUFBMEMsRUFBQSxJQUFBLE1BQUExQyxDQUFBLEVBQUEyQyxFQUFBLEVBQTBFQSxFQUFBM0MsRUFBYTJDLElBQ3ZGRCxFQUFBQyxDQUFBLEVBQUEsVUFBQUEsQ0FBQSxFQUVBLElBQUF5TSxFQUFBLENBQUEsRUFBQSxPQUFBMU0sQ0FBQSxFQUNBb1gsRUFBQSxDQUFBLEVBQ0FDLEVBQUFoVCxFQUFBckUsQ0FBQSxFQUNBaUUsRUFBQW9ULENBQUEsSUFBQSxVQUFBLENBQUEsTUFBQSxRQUFBQSxDQUFBLEdBQUEsRUFBQUEsYUFBQSxPQUFBQSxHQUNBLE9BQUEsT0FBQUQsRUFBQTFLLEVBQUEsSUFBQSxDQUFBLEVBRUEsSUFBQXdKLEVBQUEsTUFBQSxRQUFBeEosRUFBQSxDQUFBLENBQUEsRUFBQUEsRUFBQSxDQUFBLEVBQUFBLEVBQ0ErSixHQUFBLEtBQUFQLEVBQUFrQixDQUFBLENBQ0EsQ0FZQSxFQUFHLENBQ0gsSUFBQSxTQUNBLE1BQUEsVUFBQSxDQUNBLElBQUE5bkIsRUFBQSxVQUFBLE9BQUEsR0FBQSxVQUFBLENBQUEsSUFBQSxPQUFBLFVBQUEsQ0FBQSxFQUFBLE9BQ0EsR0FBQSxNQUFBLE9BR0EsS0FBQThuQixFQUFBLENBQ0EsTUFBQSxHQUNBLFNBQUEsQ0FBQSxFQUFBOW5CLEdBQUFBLEVBQUEsU0FDQSxFQUNBNG1CLEVBQUF6UixFQUFBLEtBQUEsV0FBQSxNQUFBLEtBQUEsT0FBQSxhQUFBLEVBQ0FnUyxHQUFBLEtBQUFQLEVBQUFrQixDQUFBLEVBQ0EsQ0FTQSxFQUFHLENBQ0gsSUFBQSxVQUNBLE1BQUEsVUFBQSxDQUNBLElBQUFqaUIsRUFBQSxVQUFBLE9BQUEsR0FBQSxVQUFBLENBQUEsSUFBQSxPQUFBLFVBQUEsQ0FBQSxFQUFBLE9BQ0FtaUIsRUFBQSxVQUFBLE9BQUEsR0FBQSxVQUFBLENBQUEsSUFBQSxPQUFBLFVBQUEsQ0FBQSxFQUFBLEdBQ0FuaUIsR0FBQSxPQUFBQSxHQUFBLFdBQ0FtaUIsRUFBQW5pQixFQUNBQSxFQUFBLFFBRUEsSUFBQXFoQixFQUNBcmhCLElBQUEsU0FDQXFoQixFQUFBLEVBQ1FyaEIsSUFBQSxRQUNScWhCLEVBQUEsRUFFQUEsRUFBQSxFQUVBRCxHQUFBLEtBQUFDLEVBQUEsQ0FBQWMsQ0FBQSxDQUNBLENBTUEsRUFBRyxDQUNILElBQUEsZ0JBQ0EsTUFBQSxVQUFBLENBQ0EsS0FBQSxRQUFBLENBQUEsS0FBQSxPQUFBLFFBQUEsS0FBQSxXQUdBLEtBQUEsU0FBQSxHQUNBLEtBQUEsV0FBQSxVQUFBLElBQUEsVUFBQSxrQkFBQSxxQkFBQSxFQUNBLENBVUEsRUFBRyxDQUNILElBQUEsZUFDQSxNQUFBLFVBQUEsQ0FDQSxJQUFBaG9CLEVBQUEsVUFBQSxPQUFBLEdBQUEsVUFBQSxDQUFBLElBQUEsT0FBQSxVQUFBLENBQUEsRUFBQSxPQUNBLEdBQUEsT0FBQSxRQUFBLENBQUEsS0FBQSxVQUdBLEtBQUE4bkIsRUFBQSxPQUFBLE9BQUEsQ0FDQSxPQUFBLEVBQ0EsRUFBTzluQixDQUFBLEVBQ1AsT0FBQSxLQUFBLFNBQ0EsS0FBQSxXQUFBLFVBQUEsT0FBQSxVQUFBLGtCQUFBLHFCQUFBLEVBQ0E4bkIsRUFBQSxRQUNBLEtBQUEsT0FBQUEsQ0FBQSxFQUVBLENBQ0EsQ0FBRyxFQUFBLENBQUEsQ0FDSCxJQUFBLGFBQ0EsTUFBQSxTQUFBclIsRUFBQXFDLEVBQUErRCxFQUFBLENBQ0EsT0FBQWxELEdBQUFsRCxFQUFBcUMsRUFBQStELEdBQUE3QixHQUFBNkIsQ0FBQSxHQUFBN0IsR0FBQSxFQUFBLENBQ0EsQ0FpQkEsRUFBRyxDQUNILElBQUEsWUFDQSxNQUFBLFNBQUEzQixFQUFBUCxFQUFBK0QsRUFBQSxDQUNBLE9BQUFwRCxHQUFBSixFQUFBUCxFQUFBK0QsR0FBQTdCLEdBQUE2QixDQUFBLEdBQUE3QixHQUFBLEVBQUEsQ0FDQSxDQU1BLEVBQUcsQ0FDSCxJQUFBLFVBQ0EsSUFBQSxVQUFBLENBQ0EsT0FBQUEsRUFDQSxDQUNBLENBQUcsQ0FBQSxDQUNILEVBQUMsRUFHRCxTQUFBaU4sR0FBQWpvQixFQUFBLENBQ0EsSUFBQWtvQixFQUFBLE9BQUEsT0FBQSxDQUFBLEVBQWdDbG9CLENBQUEsRUFDaEMsY0FBQWtvQixFQUFBLE9BQ0EsT0FBQUEsRUFBQSxtQkFDQSxPQUFBQSxFQUFBLGlCQUVBQSxDQUNBLENBQ0EsU0FBQUMsR0FBQWxKLEVBQUFtSixFQUFBeE4sRUFBQTVhLEVBQUEsQ0FDQWlhLEdBQUFnRixFQUFBLENBQUEsQ0FBQXJFLEVBQUEsYUFBQXdOLENBQUEsQ0FBQSxDQUFBLEVBQ0EsSUFBQWQsR0FBQTFNLEVBQUE1YSxFQUFBaWYsQ0FBQSxDQUNBLENBQ0EsU0FBQW9KLEVBQUFwSixFQUFBbkUsRUFBQSxDQUVBLEdBQUEsQ0FBQW1FLEVBQUEsVUFHQSxDQUFBQSxFQUFBLFVBQUEsR0FDQSxJQUFBcFosRUFBQWlWLEVBQUEsT0FDQSxHQUFBalYsRUFBQSxhQUFBLE9BR0EsS0FBQTRoQixFQUFBeEksRUFBQSxZQUNBcUosRUFBQSxDQUNBLE9BQUEsRUFDQSxFQUNBQyxFQUFBdEosRUFBQSxPQUFBLFFBQUFwWixDQUFBLEVBQ0EyaUIsRUFBQUQsSUFBQSxFQUFBLEVBQUEsRUFDQUUsRUFBQWhCLEVBQUFjLENBQUEsRUFBQSxNQUFBLENBQUEsRUFDQUcsRUFBQWpCLEVBQUFlLENBQUEsRUFBQSxNQUFBLENBQUEsRUFDQUMsSUFBQSxRQUFBQyxJQUFBLE9BRUFILElBQUEsR0FBQUUsRUFBQUMsR0FDQWpCLEVBQUEsQ0FBQSxFQUFBLFFBQUFpQixFQUFBSixDQUFBLEVBQ0FiLEVBQUEsQ0FBQSxFQUFBLFFBQUFnQixFQUFBSCxDQUFBLEdBQ01DLElBQUEsR0FBQUUsRUFBQUMsSUFDTmpCLEVBQUEsQ0FBQSxFQUFBLFFBQUFnQixFQUFBSCxDQUFBLEVBQ0FiLEVBQUEsQ0FBQSxFQUFBLFFBQUFpQixFQUFBSixDQUFBLEdBRUlySixFQUFBLHFCQUdKd0osSUFBQSxRQUFBQyxJQUFBLFVBQ0FKLEVBQUEsTUFBQSxHQUNBYixFQUFBZSxDQUFBLEVBQUEsUUFBQWYsRUFBQWMsQ0FBQSxFQUFBLE1BQUFELENBQUEsR0FHQWIsRUFBQSxDQUFBLEVBQUEsT0FBQSxPQUFBLEVBQUEsT0FBQSxFQUNBQSxFQUFBLENBQUEsRUFBQSxPQUFBLE9BQUEsRUFBQSxPQUFBLEVBQ0EsT0FBQXhJLEVBQUEsV0FDQSxDQUtBLElBQUEwSixFQUFBLFVBQUEsQ0FNQSxTQUFBQSxFQUFBMXRCLEVBQUEsQ0FDQSxJQUFBK0UsRUFBQSxVQUFBLE9BQUEsR0FBQSxVQUFBLENBQUEsSUFBQSxPQUFBLFVBQUEsQ0FBQSxFQUFBLENBQUEsRUFDQXVULEVBQUEsS0FBQW9WLENBQUEsRUFDQSxJQUFBQyxFQUFBLE1BQUEsUUFBQTVvQixFQUFBLE1BQUEsRUFBQUEsRUFBQSxPQUFBLE1BQUEsS0FBQS9FLEVBQUEsaUJBQUEsT0FBQSxDQUFBLEVBQ0EsR0FBQSxFQUFBMnRCLEVBQUEsT0FBQSxHQUdBLENBQUEzdEIsRUFBQSxZQUFBLEtBQ0EsS0FBQSxRQUFBQSxFQUNBLEtBQUEsT0FBQTJ0QixFQUFBLE1BQUEsRUFBQSxDQUFBLEVBQ0EsS0FBQSxtQkFBQSxDQUFBLENBQUE1b0IsRUFBQSxtQkFDQSxJQUFBb29CLEVBQUFDLEVBQUEsS0FBQSxLQUFBLElBQUEsRUFDQVEsRUFBQVosR0FBQWpvQixDQUFBLEVBR0F5bkIsRUFBQSxDQUFBLEVBQ0EsT0FBQSxlQUFBLEtBQUEsY0FBQSxDQUNBLElBQUEsVUFBQSxDQUNBLE9BQUFBLENBQ0EsQ0FDQSxDQUFLLEVBQ0xVLEdBQUEsS0FBQUMsRUFBQSxLQUFBLE9BQUEsQ0FBQSxFQUFBUyxDQUFBLEVBQ0FWLEdBQUEsS0FBQUMsRUFBQSxLQUFBLE9BQUEsQ0FBQSxFQUFBUyxDQUFBLEVBQ0EsT0FBQSxPQUFBcEIsQ0FBQSxFQUVBQSxFQUFBLENBQUEsRUFBQSxNQUFBLE9BQUEsRUFDQVksRUFBQSxLQUFBLENBQ0EsT0FBQSxLQUFBLE9BQUEsQ0FBQSxDQUNBLENBQU8sRUFDRFosRUFBQSxDQUFBLEVBQUEsTUFBQSxPQUFBLEdBQ05ZLEVBQUEsS0FBQSxDQUNBLE9BQUEsS0FBQSxPQUFBLENBQUEsQ0FDQSxDQUFPLEVBRVAsQ0FLQSxPQUFBM1UsRUFBQWlWLEVBQUEsQ0FBQSxDQUNBLElBQUEsUUFDQSxJQUFBLFVBQUEsQ0FDQSxPQUFBLEtBQUEsWUFBQSxTQUFBLEVBQUEsQ0FBQSxLQUFBLFlBQUEsQ0FBQSxFQUFBLE1BQUEsQ0FBQSxFQUFBLEtBQUEsWUFBQSxDQUFBLEVBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxNQUNBLENBTUEsRUFBRyxDQUNILElBQUEsYUFDQSxNQUFBLFNBQUEzb0IsRUFBQSxDQUNBLEtBQUEsbUJBQUEsQ0FBQSxDQUFBQSxFQUFBLG1CQUNBLElBQUE2b0IsRUFBQVosR0FBQWpvQixDQUFBLEVBQ0EsS0FBQSxZQUFBLENBQUEsRUFBQSxXQUFBNm9CLENBQUEsRUFDQSxLQUFBLFlBQUEsQ0FBQSxFQUFBLFdBQUFBLENBQUEsQ0FDQSxDQU1BLEVBQUcsQ0FDSCxJQUFBLFVBQ0EsTUFBQSxVQUFBLENBQ0EsS0FBQSxZQUFBLENBQUEsRUFBQSxRQUFBLEVBQ0EsS0FBQSxZQUFBLENBQUEsRUFBQSxRQUFBLEVBQ0F2TyxHQUFBLElBQUEsRUFDQSxPQUFBLEtBQUEsUUFBQSxXQUNBLENBZ0JBLEVBQUcsQ0FDSCxJQUFBLFdBQ0EsTUFBQSxVQUFBLENBQ0EsSUFBQW9FLEVBQUEsS0FDQTVGLEVBQUEsVUFBQSxPQUFBLEdBQUEsVUFBQSxDQUFBLElBQUEsT0FBQSxVQUFBLENBQUEsRUFBQSxPQUNBK08sRUFBQS9PLEVBQUEsU0FBQXJDLEVBQUEsQ0FDQSxPQUFBa0QsR0FBQWxELEVBQUFxQyxFQUFBNEYsRUFBQSxZQUFBLENBQUEsRUFBQSxPQUFBLE1BQUEsQ0FDQSxFQUFRLFNBQUFqSSxFQUFBLENBQ1IsT0FBQSxJQUFBLEtBQUFBLENBQUEsQ0FDQSxFQUNBLE9BQUEsS0FBQSxNQUFBLElBQUEsU0FBQUEsRUFBQSxDQUNBLE9BQUFBLElBQUEsT0FBQUEsRUFBQW9SLEVBQUFwUixDQUFBLENBQ0EsQ0FBTyxDQUNQLENBNEJBLEVBQUcsQ0FDSCxJQUFBLFdBQ0EsTUFBQSxTQUFBNkksRUFBQUMsRUFBQSxDQUNBLElBQUF1SixFQUFBdlUsRUFBQSxLQUFBLFlBQUEsQ0FBQSxFQUNBd1UsRUFBQUQsRUFBQSxDQUFBLEVBQ0FFLEVBQUFGLEVBQUEsQ0FBQSxFQUNBaEMsRUFBQSxLQUFBLE1BT0EsS0FBQSxVQUFBLEdBQ0FpQyxFQUFBLFFBQUF6SixDQUFBLEVBQ0EwSixFQUFBLFFBQUF6SixDQUFBLEVBQ0EsT0FBQSxLQUFBLFVBQ0F5SixFQUFBLE1BQUEsQ0FBQSxJQUFBbEMsRUFBQSxDQUFBLEVBQ0F1QixFQUFBLEtBQUEsQ0FDQSxPQUFBLEtBQUEsT0FBQSxDQUFBLENBQ0EsQ0FBUyxFQUNEVSxFQUFBLE1BQUEsQ0FBQSxJQUFBakMsRUFBQSxDQUFBLEdBQ1J1QixFQUFBLEtBQUEsQ0FDQSxPQUFBLEtBQUEsT0FBQSxDQUFBLENBQ0EsQ0FBUyxDQUVULENBQ0EsQ0FBRyxDQUFBLENBQ0gsRUFBQyxFQUVEbnZCLEVBQUEsZ0JBQXVCeXZCLEVBQ3ZCenZCLEVBQUEsV0FBa0JvdUIsNlVDLzZGbEIsSUFBQTJCLEVBQUFDLEVBQUEsR0FBQSxFQUVNQyxFQUE0QixDQUM5QixXQUFZLEdBQ1osY0FBZSw2REFDZixnQkFBaUIsbUNBQ2pCLE9BQVEsVUFBQSxDQUFPLEVBQ2YsUUFBUyxVQUFBLENBQU8sRUFDaEIsU0FBVSxVQUFBLENBQU8sR0FHZkMsRUFBMEMsQ0FDNUMsR0FBSSxLQUNKLFNBQVUsSUFHZEMsRUFBQSxVQUFBLENBUUksU0FBQUEsRUFDSUMsRUFDQXBVLEVBQ0FsVixFQUNBdXBCLEVBQXlELENBSHpERCxJQUFBLFNBQUFBLEVBQUEsTUFDQXBVLElBQUEsU0FBQUEsRUFBQSxDQUFBLEdBQ0FsVixJQUFBLFNBQUFBLEVBQUFtcEIsR0FDQUksSUFBQSxTQUFBQSxFQUFBSCxHQUVBLEtBQUssWUFBY0csRUFBZ0IsR0FDN0JBLEVBQWdCLEdBQ2hCRCxFQUFZLEdBQ2xCLEtBQUssYUFBZUEsRUFDcEIsS0FBSyxPQUFTcFUsRUFDZCxLQUFLLFNBQVFzVSxFQUFBQSxFQUFBLENBQUEsRUFBUUwsQ0FBTyxFQUFLbnBCLENBQU8sRUFDeEMsS0FBSyxhQUFlLEdBQ3BCLEtBQUssS0FBSSxFQUNUaXBCLEVBQUEsUUFBVSxZQUNOLFlBQ0EsS0FDQSxLQUFLLFlBQ0xNLEVBQWdCLFFBQVEsQ0FFaEMsQ0FFQSxPQUFBRixFQUFBLFVBQUEsS0FBQSxVQUFBLENBQUEsSUFBQTNLLEVBQUEsS0FDUSxLQUFLLE9BQU8sUUFBVSxDQUFDLEtBQUssZUFFNUIsS0FBSyxPQUFPLFFBQVEsU0FBQzdoQixFQUFJLENBQ2pCQSxFQUFLLFFBQ0w2aEIsRUFBSyxLQUFLN2hCLEVBQUssRUFBRSxFQUdyQixJQUFNNHNCLEVBQWUsVUFBQSxDQUNqQi9LLEVBQUssT0FBTzdoQixFQUFLLEVBQUUsQ0FDdkIsRUFFQUEsRUFBSyxVQUFVLGlCQUFpQixRQUFTNHNCLENBQVksRUFHckQ1c0IsRUFBSyxhQUFlNHNCLENBQ3hCLENBQUMsRUFDRCxLQUFLLGFBQWUsR0FFNUIsRUFFQUosRUFBQSxVQUFBLFFBQUEsVUFBQSxDQUNRLEtBQUssT0FBTyxRQUFVLEtBQUssZUFDM0IsS0FBSyxPQUFPLFFBQVEsU0FBQ3hzQixFQUFJLENBQ3JCQSxFQUFLLFVBQVUsb0JBQW9CLFFBQVNBLEVBQUssWUFBWSxFQUc3RCxPQUFPQSxFQUFLLFlBQ2hCLENBQUMsRUFDRCxLQUFLLGFBQWUsR0FFNUIsRUFFQXdzQixFQUFBLFVBQUEsZUFBQSxVQUFBLENBQ0lKLEVBQUEsUUFBVSxlQUFlLFlBQWEsS0FBSyxXQUFXLENBQzFELEVBRUFJLEVBQUEsVUFBQSx5QkFBQSxVQUFBLENBQ0ksS0FBSyxRQUFPLEVBQ1osS0FBSyxlQUFjLENBQ3ZCLEVBRUFBLEVBQUEsVUFBQSxRQUFBLFNBQVE5RyxFQUFVLENBQ2QsT0FBTyxLQUFLLE9BQU8sT0FBTyxTQUFDMWxCLEVBQUksQ0FBSyxPQUFBQSxFQUFLLEtBQU8wbEIsQ0FBWixDQUFjLEVBQUUsQ0FBQyxDQUN6RCxFQUVBOEcsRUFBQSxVQUFBLEtBQUEsU0FBSzlHLEVBQVUsU0FBZjdELEVBQUEsS0FDVTdoQixFQUFPLEtBQUssUUFBUTBsQixDQUFFLEVBR3ZCLEtBQUssU0FBUyxZQUNmLEtBQUssT0FBTyxJQUFJLFNBQUN6WSxFQUFDLFNBQ1ZBLElBQU1qTixLQUNONnNCLEVBQUE1ZixFQUFFLFVBQVUsV0FBVSxPQUFNLE1BQUE0ZixFQUNyQmhMLEVBQUssU0FBUyxjQUFjLE1BQU0sR0FBRyxDQUFDLEdBRTdDaUwsRUFBQTdmLEVBQUUsVUFBVSxXQUFVLElBQUcsTUFBQTZmLEVBQ2xCakwsRUFBSyxTQUFTLGdCQUFnQixNQUFNLEdBQUcsQ0FBQyxFQUUvQzVVLEVBQUUsU0FBUyxVQUFVLElBQUksUUFBUSxFQUNqQ0EsRUFBRSxVQUFVLGFBQWEsZ0JBQWlCLE9BQU8sRUFDakRBLEVBQUUsT0FBUyxHQUdQQSxFQUFFLFFBQ0ZBLEVBQUUsT0FBTyxVQUFVLElBQUksWUFBWSxFQUcvQyxDQUFDLEdBSUw0ZixFQUFBN3NCLEVBQUssVUFBVSxXQUFVLElBQUcsTUFBQTZzQixFQUFJLEtBQUssU0FBUyxjQUFjLE1BQU0sR0FBRyxDQUFDLEdBQ3RFQyxFQUFBOXNCLEVBQUssVUFBVSxXQUFVLE9BQU0sTUFBQThzQixFQUN4QixLQUFLLFNBQVMsZ0JBQWdCLE1BQU0sR0FBRyxDQUFDLEVBRS9DOXNCLEVBQUssVUFBVSxhQUFhLGdCQUFpQixNQUFNLEVBQ25EQSxFQUFLLFNBQVMsVUFBVSxPQUFPLFFBQVEsRUFDdkNBLEVBQUssT0FBUyxHQUdWQSxFQUFLLFFBQ0xBLEVBQUssT0FBTyxVQUFVLE9BQU8sWUFBWSxFQUk3QyxLQUFLLFNBQVMsT0FBTyxLQUFNQSxDQUFJLENBQ25DLEVBRUF3c0IsRUFBQSxVQUFBLE9BQUEsU0FBTzlHLEVBQVUsQ0FDYixJQUFNMWxCLEVBQU8sS0FBSyxRQUFRMGxCLENBQUUsRUFFeEIxbEIsRUFBSyxPQUNMLEtBQUssTUFBTTBsQixDQUFFLEVBRWIsS0FBSyxLQUFLQSxDQUFFLEVBSWhCLEtBQUssU0FBUyxTQUFTLEtBQU0xbEIsQ0FBSSxDQUNyQyxFQUVBd3NCLEVBQUEsVUFBQSxNQUFBLFNBQU05RyxFQUFVLFNBQ04xbEIsRUFBTyxLQUFLLFFBQVEwbEIsQ0FBRSxHQUU1Qm1ILEVBQUE3c0IsRUFBSyxVQUFVLFdBQVUsT0FBTSxNQUFBNnNCLEVBQ3hCLEtBQUssU0FBUyxjQUFjLE1BQU0sR0FBRyxDQUFDLEdBRTdDQyxFQUFBOXNCLEVBQUssVUFBVSxXQUFVLElBQUcsTUFBQThzQixFQUNyQixLQUFLLFNBQVMsZ0JBQWdCLE1BQU0sR0FBRyxDQUFDLEVBRS9DOXNCLEVBQUssU0FBUyxVQUFVLElBQUksUUFBUSxFQUNwQ0EsRUFBSyxVQUFVLGFBQWEsZ0JBQWlCLE9BQU8sRUFDcERBLEVBQUssT0FBUyxHQUdWQSxFQUFLLFFBQ0xBLEVBQUssT0FBTyxVQUFVLElBQUksWUFBWSxFQUkxQyxLQUFLLFNBQVMsUUFBUSxLQUFNQSxDQUFJLENBQ3BDLEVBRUF3c0IsRUFBQSxVQUFBLGFBQUEsU0FBYXhCLEVBQW9CLENBQzdCLEtBQUssU0FBUyxPQUFTQSxDQUMzQixFQUVBd0IsRUFBQSxVQUFBLGNBQUEsU0FBY3hCLEVBQW9CLENBQzlCLEtBQUssU0FBUyxRQUFVQSxDQUM1QixFQUVBd0IsRUFBQSxVQUFBLGVBQUEsU0FBZXhCLEVBQW9CLENBQy9CLEtBQUssU0FBUyxTQUFXQSxDQUM3QixFQUNKd0IsQ0FBQSxFQUFDLEVBRUQsU0FBZ0JPLEdBQWMsQ0FDMUIsU0FBUyxpQkFBaUIsa0JBQWtCLEVBQUUsUUFBUSxTQUFDQyxFQUFZLENBQy9ELElBQU1DLEVBQWFELEVBQWEsYUFBYSxnQkFBZ0IsRUFDdkRFLEVBQWdCRixFQUFhLGFBQWEscUJBQXFCLEVBQy9ERyxFQUFrQkgsRUFBYSxhQUNqQyx1QkFBdUIsRUFHckIzVSxFQUFRLENBQUEsRUFDZDJVLEVBQ0ssaUJBQWlCLHlCQUF5QixFQUMxQyxRQUFRLFNBQUNJLEVBQVUsQ0FHaEIsR0FBSUEsRUFBVyxRQUFRLGtCQUFrQixJQUFNSixFQUFjLENBQ3pELElBQU1odEIsRUFBTyxDQUNULEdBQUlvdEIsRUFBVyxhQUFhLHVCQUF1QixFQUNuRCxVQUFXQSxFQUNYLFNBQVUsU0FBUyxjQUNmQSxFQUFXLGFBQWEsdUJBQXVCLENBQUMsRUFFcEQsT0FBUUEsRUFBVyxjQUNmLHVCQUF1QixFQUUzQixPQUNJQSxFQUFXLGFBQWEsZUFBZSxJQUFNLFFBSXJEL1UsRUFBTSxLQUFLclksQ0FBSSxFQUV2QixDQUFDLEVBRUwsSUFBSXdzQixFQUFVUSxFQUE2QjNVLEVBQU8sQ0FDOUMsV0FBWTRVLElBQWUsT0FDM0IsY0FBZUMsR0FFVFosRUFBUSxjQUNkLGdCQUFpQmEsR0FFWGIsRUFBUSxnQkFDRyxDQUN6QixDQUFDLENBQ0wsQ0EzQ0Fqd0IsRUFBQSxlQUFBMHdCLEVBNkNJLE9BQU8sT0FBVyxNQUNsQixPQUFPLFVBQVlQLEVBQ25CLE9BQU8sZUFBaUJPLEdBRzVCMXdCLEVBQUEsUUFBZW13QiwwVUNwT2YsSUFBQUosRUFBQUMsRUFBQSxHQUFBLEVBRU1DLEVBQTJCLENBQzdCLGdCQUFpQixFQUNqQixXQUFZLENBQ1IsTUFBTyxDQUFBLEVBQ1AsY0FBZSw0QkFDZixnQkFDSSx5RUFFUixTQUFVLElBQ1YsT0FBUSxVQUFBLENBQU8sRUFDZixPQUFRLFVBQUEsQ0FBTyxFQUNmLFNBQVUsVUFBQSxDQUFPLEdBR2ZDLEVBQTBDLENBQzVDLEdBQUksS0FDSixTQUFVLElBR2RjLEVBQUEsVUFBQSxDQVdJLFNBQUFBLEVBQ0lDLEVBQ0FqVixFQUNBbFYsRUFDQXVwQixFQUF5RCxDQUh6RFksSUFBQSxTQUFBQSxFQUFBLE1BQ0FqVixJQUFBLFNBQUFBLEVBQUEsQ0FBQSxHQUNBbFYsSUFBQSxTQUFBQSxFQUFBbXBCLEdBQ0FJLElBQUEsU0FBQUEsRUFBQUgsR0FFQSxLQUFLLFlBQWNHLEVBQWdCLEdBQzdCQSxFQUFnQixHQUNoQlksRUFBVyxHQUNqQixLQUFLLFlBQWNBLEVBQ25CLEtBQUssT0FBU2pWLEVBQ2QsS0FBSyxTQUFRc1UsRUFBQUEsRUFBQUEsRUFBQSxDQUFBLEVBQ05MLENBQU8sRUFDUG5wQixDQUFPLEVBQUEsQ0FDVixXQUFVd3BCLEVBQUFBLEVBQUEsQ0FBQSxFQUFPTCxFQUFRLFVBQVUsRUFBS25wQixFQUFRLFVBQVUsQ0FBQSxDQUFBLEVBRTlELEtBQUssWUFBYyxLQUFLLFFBQVEsS0FBSyxTQUFTLGVBQWUsRUFDN0QsS0FBSyxZQUFjLEtBQUssU0FBUyxXQUFXLE1BQzVDLEtBQUssa0JBQW9CLEtBQUssU0FBUyxTQUN2QyxLQUFLLGtCQUFvQixLQUN6QixLQUFLLGFBQWUsR0FDcEIsS0FBSyxLQUFJLEVBQ1RpcEIsRUFBQSxRQUFVLFlBQ04sV0FDQSxLQUNBLEtBQUssWUFDTE0sRUFBZ0IsUUFBUSxDQUVoQyxDQUtBLE9BQUFXLEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FBQSxJQUFBeEwsRUFBQSxLQUNRLEtBQUssT0FBTyxRQUFVLENBQUMsS0FBSyxlQUM1QixLQUFLLE9BQU8sSUFBSSxTQUFDN2hCLEVBQWtCLENBQy9CQSxFQUFLLEdBQUcsVUFBVSxJQUNkLFdBQ0EsVUFDQSx1QkFDQSxXQUFXLENBRW5CLENBQUMsRUFHRyxLQUFLLGNBQWEsRUFDbEIsS0FBSyxRQUFRLEtBQUssY0FBYSxFQUFHLFFBQVEsRUFFMUMsS0FBSyxRQUFRLENBQUMsRUFHbEIsS0FBSyxZQUFZLElBQUksU0FBQ3V0QixFQUFXcm9CLEVBQVEsQ0FDckNxb0IsRUFBVSxHQUFHLGlCQUFpQixRQUFTLFVBQUEsQ0FDbkMxTCxFQUFLLFFBQVEzYyxDQUFRLENBQ3pCLENBQUMsQ0FDTCxDQUFDLEVBRUQsS0FBSyxhQUFlLEdBRTVCLEVBRUFtb0IsRUFBQSxVQUFBLFFBQUEsVUFBQSxDQUNRLEtBQUssZUFDTCxLQUFLLGFBQWUsR0FFNUIsRUFFQUEsRUFBQSxVQUFBLGVBQUEsVUFBQSxDQUNJakIsRUFBQSxRQUFVLGVBQWUsV0FBWSxLQUFLLFdBQVcsQ0FDekQsRUFFQWlCLEVBQUEsVUFBQSx5QkFBQSxVQUFBLENBQ0ksS0FBSyxRQUFPLEVBQ1osS0FBSyxlQUFjLENBQ3ZCLEVBRUFBLEVBQUEsVUFBQSxRQUFBLFNBQVFub0IsRUFBZ0IsQ0FDcEIsT0FBTyxLQUFLLE9BQU9BLENBQVEsQ0FDL0IsRUFNQW1vQixFQUFBLFVBQUEsUUFBQSxTQUFRbm9CLEVBQWdCLENBQ3BCLElBQU1zb0IsRUFBeUIsS0FBSyxPQUFPdG9CLENBQVEsRUFDN0N1b0IsRUFBK0IsQ0FDakMsS0FDSUQsRUFBUyxXQUFhLEVBQ2hCLEtBQUssT0FBTyxLQUFLLE9BQU8sT0FBUyxDQUFDLEVBQ2xDLEtBQUssT0FBT0EsRUFBUyxTQUFXLENBQUMsRUFDM0MsT0FBUUEsRUFDUixNQUNJQSxFQUFTLFdBQWEsS0FBSyxPQUFPLE9BQVMsRUFDckMsS0FBSyxPQUFPLENBQUMsRUFDYixLQUFLLE9BQU9BLEVBQVMsU0FBVyxDQUFDLEdBRS9DLEtBQUssUUFBUUMsQ0FBYSxFQUMxQixLQUFLLGVBQWVELENBQVEsRUFDeEIsS0FBSyxvQkFDTCxLQUFLLE1BQUssRUFDVixLQUFLLE1BQUssR0FHZCxLQUFLLFNBQVMsU0FBUyxJQUFJLENBQy9CLEVBS0FILEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FDSSxJQUFNSyxFQUFhLEtBQUssY0FBYSxFQUNqQ0YsRUFBVyxLQUdYRSxFQUFXLFdBQWEsS0FBSyxPQUFPLE9BQVMsRUFDN0NGLEVBQVcsS0FBSyxPQUFPLENBQUMsRUFFeEJBLEVBQVcsS0FBSyxPQUFPRSxFQUFXLFNBQVcsQ0FBQyxFQUdsRCxLQUFLLFFBQVFGLEVBQVMsUUFBUSxFQUc5QixLQUFLLFNBQVMsT0FBTyxJQUFJLENBQzdCLEVBS0FILEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FDSSxJQUFNSyxFQUFhLEtBQUssY0FBYSxFQUNqQ0MsRUFBVyxLQUdYRCxFQUFXLFdBQWEsRUFDeEJDLEVBQVcsS0FBSyxPQUFPLEtBQUssT0FBTyxPQUFTLENBQUMsRUFFN0NBLEVBQVcsS0FBSyxPQUFPRCxFQUFXLFNBQVcsQ0FBQyxFQUdsRCxLQUFLLFFBQVFDLEVBQVMsUUFBUSxFQUc5QixLQUFLLFNBQVMsT0FBTyxJQUFJLENBQzdCLEVBTUFOLEVBQUEsVUFBQSxRQUFBLFNBQVFJLEVBQTRCLENBT2hDLEdBTEEsS0FBSyxPQUFPLElBQUksU0FBQ3p0QixFQUFrQixDQUMvQkEsRUFBSyxHQUFHLFVBQVUsSUFBSSxRQUFRLENBQ2xDLENBQUMsRUFHRyxLQUFLLE9BQU8sU0FBVyxFQUFHLENBQzFCeXRCLEVBQWMsT0FBTyxHQUFHLFVBQVUsT0FDOUIsb0JBQ0EsbUJBQ0EsZ0JBQ0EsU0FDQSxNQUFNLEVBRVZBLEVBQWMsT0FBTyxHQUFHLFVBQVUsSUFBSSxnQkFBaUIsTUFBTSxFQUM3RCxPQUlKQSxFQUFjLEtBQUssR0FBRyxVQUFVLE9BQzVCLG9CQUNBLG1CQUNBLGdCQUNBLFNBQ0EsTUFBTSxFQUdWQSxFQUFjLEtBQUssR0FBRyxVQUFVLElBQUksb0JBQXFCLE1BQU0sRUFHL0RBLEVBQWMsT0FBTyxHQUFHLFVBQVUsT0FDOUIsb0JBQ0EsbUJBQ0EsZ0JBQ0EsU0FDQSxNQUFNLEVBRVZBLEVBQWMsT0FBTyxHQUFHLFVBQVUsSUFBSSxnQkFBaUIsTUFBTSxFQUc3REEsRUFBYyxNQUFNLEdBQUcsVUFBVSxPQUM3QixvQkFDQSxtQkFDQSxnQkFDQSxTQUNBLE1BQU0sRUFFVkEsRUFBYyxNQUFNLEdBQUcsVUFBVSxJQUFJLG1CQUFvQixNQUFNLENBQ25FLEVBS0FKLEVBQUEsVUFBQSxNQUFBLFVBQUEsQ0FBQSxJQUFBeEwsRUFBQSxLQUNRLE9BQU8sT0FBVyxNQUNsQixLQUFLLGtCQUFvQixPQUFPLFlBQVksVUFBQSxDQUN4Q0EsRUFBSyxLQUFJLENBQ2IsRUFBRyxLQUFLLGlCQUFpQixFQUVqQyxFQUtBd0wsRUFBQSxVQUFBLE1BQUEsVUFBQSxDQUNJLGNBQWMsS0FBSyxpQkFBaUIsQ0FDeEMsRUFLQUEsRUFBQSxVQUFBLGNBQUEsVUFBQSxDQUNJLE9BQU8sS0FBSyxXQUNoQixFQU1BQSxFQUFBLFVBQUEsZUFBQSxTQUFlcnRCLEVBQWtCLFNBQWpDNmhCLEVBQUEsS0FDSSxLQUFLLFlBQWM3aEIsRUFDbkIsSUFBTWtGLEVBQVdsRixFQUFLLFNBR2xCLEtBQUssWUFBWSxTQUNqQixLQUFLLFlBQVksSUFBSSxTQUFDdXRCLEVBQVMsU0FDM0JBLEVBQVUsR0FBRyxhQUFhLGVBQWdCLE9BQU8sR0FDakRWLEVBQUFVLEVBQVUsR0FBRyxXQUFVLE9BQU0sTUFBQVYsRUFDdEJoTCxFQUFLLFNBQVMsV0FBVyxjQUFjLE1BQU0sR0FBRyxDQUFDLEdBRXhEaUwsRUFBQVMsRUFBVSxHQUFHLFdBQVUsSUFBRyxNQUFBVCxFQUNuQmpMLEVBQUssU0FBUyxXQUFXLGdCQUFnQixNQUFNLEdBQUcsQ0FBQyxDQUU5RCxDQUFDLEdBQ0RnTCxFQUFBLEtBQUssWUFBWTNuQixDQUFRLEVBQUUsR0FBRyxXQUFVLElBQUcsTUFBQTJuQixFQUNwQyxLQUFLLFNBQVMsV0FBVyxjQUFjLE1BQU0sR0FBRyxDQUFDLEdBRXhEQyxFQUFBLEtBQUssWUFBWTVuQixDQUFRLEVBQUUsR0FBRyxXQUFVLE9BQU0sTUFBQTRuQixFQUN2QyxLQUFLLFNBQVMsV0FBVyxnQkFBZ0IsTUFBTSxHQUFHLENBQUMsRUFFMUQsS0FBSyxZQUFZNW5CLENBQVEsRUFBRSxHQUFHLGFBQWEsZUFBZ0IsTUFBTSxFQUV6RSxFQUVBbW9CLEVBQUEsVUFBQSxhQUFBLFNBQWFyQyxFQUFvQixDQUM3QixLQUFLLFNBQVMsT0FBU0EsQ0FDM0IsRUFFQXFDLEVBQUEsVUFBQSxhQUFBLFNBQWFyQyxFQUFvQixDQUM3QixLQUFLLFNBQVMsT0FBU0EsQ0FDM0IsRUFFQXFDLEVBQUEsVUFBQSxlQUFBLFNBQWVyQyxFQUFvQixDQUMvQixLQUFLLFNBQVMsU0FBV0EsQ0FDN0IsRUFDSnFDLENBQUEsRUFBQyxFQUVELFNBQWdCTyxHQUFhLENBQ3pCLFNBQVMsaUJBQWlCLGlCQUFpQixFQUFFLFFBQVEsU0FBQ0MsRUFBVyxDQUM3RCxJQUFNQyxFQUFXRCxFQUFZLGFBQWEsd0JBQXdCLEVBQzVERSxFQUNGRixFQUFZLGFBQWEsZUFBZSxJQUFNLFFBSTVDeFYsRUFBd0IsQ0FBQSxFQUMxQjJWLEVBQWtCLEVBQ2xCSCxFQUFZLGlCQUFpQixzQkFBc0IsRUFBRSxRQUNyRCxNQUFNLEtBQ0ZBLEVBQVksaUJBQWlCLHNCQUFzQixDQUFDLEVBQ3RELElBQUksU0FBQ0ksRUFBOEIvb0IsRUFBZ0IsQ0FDakRtVCxFQUFNLEtBQUssQ0FDUCxTQUFVblQsRUFDVixHQUFJK29CLEVBQ1AsRUFHR0EsRUFBZ0IsYUFBYSxvQkFBb0IsSUFDakQsV0FFQUQsRUFBa0I5b0IsRUFFMUIsQ0FBQyxFQUdMLElBQU1ncEIsRUFBOEIsQ0FBQSxFQUNoQ0wsRUFBWSxpQkFBaUIsMEJBQTBCLEVBQUUsUUFDekQsTUFBTSxLQUNGQSxFQUFZLGlCQUFpQiwwQkFBMEIsQ0FBQyxFQUMxRCxJQUFJLFNBQUNNLEVBQXlCLENBQzVCRCxFQUFXLEtBQUssQ0FDWixTQUFVLFNBQ05DLEVBQWEsYUFBYSx3QkFBd0IsQ0FBQyxFQUV2RCxHQUFJQSxFQUNQLENBQ0wsQ0FBQyxFQUdMLElBQU1DLEVBQVcsSUFBSWYsRUFBU1EsRUFBNEJ4VixFQUFPLENBQzdELGdCQUFpQjJWLEVBQ2pCLFdBQVksQ0FDUixNQUFPRSxHQUVYLFNBQVVKLEdBQXNCeEIsRUFBUSxTQUN4QixFQUVoQnlCLEdBQ0FLLEVBQVMsTUFBSyxFQUlsQixJQUFNQyxFQUFpQlIsRUFBWSxjQUMvQixzQkFBc0IsRUFFcEJTLEVBQWlCVCxFQUFZLGNBQy9CLHNCQUFzQixFQUd0QlEsR0FDQUEsRUFBZSxpQkFBaUIsUUFBUyxVQUFBLENBQ3JDRCxFQUFTLEtBQUksQ0FDakIsQ0FBQyxFQUdERSxHQUNBQSxFQUFlLGlCQUFpQixRQUFTLFVBQUEsQ0FDckNGLEVBQVMsS0FBSSxDQUNqQixDQUFDLENBRVQsQ0FBQyxDQUNMLENBMUVBL3hCLEVBQUEsY0FBQXV4QixFQTRFSSxPQUFPLE9BQVcsTUFDbEIsT0FBTyxTQUFXUCxFQUNsQixPQUFPLGNBQWdCTyxHQUczQnZ4QixFQUFBLFFBQWVneEIsZ1ZDbllmLElBQUFqQixFQUFBQyxFQUFBLEdBQUEsRUFFTUMsRUFBZ0MsQ0FDbEMsYUFBYyxHQUNkLFlBQWEsUUFDYixPQUFRLFVBQUEsQ0FBTyxHQUdiQyxFQUEwQyxDQUM1QyxHQUFJLEtBQ0osU0FBVSxJQUdkZ0MsRUFBQSxVQUFBLENBU0ksU0FBQUEsRUFDSUMsRUFDQUMsRUFDQXRyQixFQUNBdXBCLEVBQXlELENBSHpEOEIsSUFBQSxTQUFBQSxFQUFBLE1BQ0FDLElBQUEsU0FBQUEsRUFBQSxNQUNBdHJCLElBQUEsU0FBQUEsRUFBQW1wQixHQUNBSSxJQUFBLFNBQUFBLEVBQUFILEdBRUEsS0FBSyxZQUFjRyxFQUFnQixHQUM3QkEsRUFBZ0IsR0FDaEIrQixFQUFTLEdBRWYsS0FBSyxXQUFhRCxFQUNsQixLQUFLLFVBQVlDLEVBQ2pCLEtBQUssU0FBUTlCLEVBQUFBLEVBQUEsQ0FBQSxFQUFRTCxDQUFPLEVBQUtucEIsQ0FBTyxFQUN4QyxLQUFLLGFBQWUsR0FFcEIsS0FBSyxLQUFJLEVBQ1RpcEIsRUFBQSxRQUFVLFlBQ04sZ0JBQ0EsS0FDQSxLQUFLLFlBQ0xNLEVBQWdCLFFBQVEsQ0FFaEMsQ0FFQSxPQUFBNkIsRUFBQSxVQUFBLEtBQUEsVUFBQSxDQUFBLElBQUExTSxFQUFBLEtBQ1EsS0FBSyxXQUFhLEtBQUssWUFBYyxDQUFDLEtBQUssZUFDM0MsS0FBSyx1QkFBeUIsVUFBQSxDQUMxQkEsRUFBSyxLQUFJLENBQ2IsRUFHSSxLQUFLLFlBQ0wsS0FBSyxXQUFXLGlCQUNaLFFBQ0EsS0FBSyxzQkFBc0IsRUFJbkMsS0FBSyxhQUFlLEdBRTVCLEVBRUEwTSxFQUFBLFVBQUEsUUFBQSxVQUFBLENBQ1EsS0FBSyxZQUFjLEtBQUssV0FBYSxLQUFLLGVBQ3RDLEtBQUssWUFDTCxLQUFLLFdBQVcsb0JBQ1osUUFDQSxLQUFLLHNCQUFzQixFQUduQyxLQUFLLGFBQWUsR0FFNUIsRUFFQUEsRUFBQSxVQUFBLGVBQUEsVUFBQSxDQUNJbkMsRUFBQSxRQUFVLGVBQWUsZ0JBQWlCLEtBQUssV0FBVyxDQUM5RCxFQUVBbUMsRUFBQSxVQUFBLHlCQUFBLFVBQUEsQ0FDSSxLQUFLLFFBQU8sRUFDWixLQUFLLGVBQWMsQ0FDdkIsRUFFQUEsRUFBQSxVQUFBLGVBQUEsVUFBQSxDQUNJLEdBQUksS0FBSyxTQUFTLGNBQWdCLFFBQzlCLE9BQU8sS0FBSyxVQUFVLE1BRzFCLEdBQUksS0FBSyxTQUFTLGNBQWdCLFlBQzlCLE9BQU8sS0FBSyxVQUFVLFVBRzFCLEdBQUksS0FBSyxTQUFTLGNBQWdCLGNBQzlCLE9BQU8sS0FBSyxVQUFVLFlBQVksUUFBUSxPQUFRLEdBQUcsRUFBRSxLQUFJLENBRW5FLEVBRUFBLEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FDSSxJQUFJRyxFQUFhLEtBQUssZUFBYyxFQUdoQyxLQUFLLFNBQVMsZUFFZEEsRUFBYSxLQUFLLFdBQVdBLENBQVUsR0FJM0MsSUFBTUMsRUFBZSxTQUFTLGNBQWMsVUFBVSxFQUN0RCxPQUFBQSxFQUFhLE1BQVFELEVBQ3JCLFNBQVMsS0FBSyxZQUFZQyxDQUFZLEVBR3RDQSxFQUFhLE9BQU0sRUFDbkIsU0FBUyxZQUFZLE1BQU0sRUFHM0IsU0FBUyxLQUFLLFlBQVlBLENBQVksRUFHdEMsS0FBSyxTQUFTLE9BQU8sSUFBSSxFQUVsQkQsQ0FDWCxFQUdBSCxFQUFBLFVBQUEsV0FBQSxTQUFXdG1CLEVBQVksQ0FDbkIsSUFBTTJtQixFQUFXLFNBQVMsY0FBYyxVQUFVLEVBQ2xELE9BQUFBLEVBQVMsVUFBWTNtQixFQUNkMm1CLEVBQVMsV0FDcEIsRUFFQUwsRUFBQSxVQUFBLHFCQUFBLFNBQXFCdkQsRUFBb0IsQ0FDckMsS0FBSyxTQUFTLE9BQVNBLENBQzNCLEVBQ0p1RCxDQUFBLEVBQUMsRUFFRCxTQUFnQk0sR0FBa0IsQ0FDOUIsU0FDSyxpQkFBaUIsaUNBQWlDLEVBQ2xELFFBQVEsU0FBQ3pCLEVBQVUsQ0FDaEIsSUFBTTBCLEVBQVcxQixFQUFXLGFBQ3hCLCtCQUErQixFQUU3QjJCLEVBQVksU0FBUyxlQUFlRCxDQUFRLEVBQzVDRSxFQUFjNUIsRUFBVyxhQUMzQixxQ0FBcUMsRUFFbkM2QixFQUFlN0IsRUFBVyxhQUM1QixzQ0FBc0MsRUFJdEMyQixFQUVLM0MsRUFBQSxRQUFVLGVBQ1AsZ0JBQ0EyQyxFQUFVLGFBQWEsSUFBSSxDQUFDLEdBR2hDLElBQUlSLEVBQ0FuQixFQUNBMkIsRUFDQSxDQUNJLGFBQ0lFLEdBQWdCQSxJQUFpQixPQUMzQixHQUNBM0MsRUFBUSxhQUNsQixZQUFhMEMsR0FFUDFDLEVBQVEsWUFDTyxFQUlqQyxRQUFRLE1BQ0osK0JBQUEsT0FBK0J3QyxFQUFRLDZFQUFBLENBQTZFLENBR2hJLENBQUMsQ0FDVCxDQTNDQXp5QixFQUFBLG1CQUFBd3lCLEVBNkNJLE9BQU8sT0FBVyxNQUNsQixPQUFPLGNBQWdCTixFQUN2QixPQUFPLGVBQWlCTSxHQUc1Qnh5QixFQUFBLFFBQWVreUIsMlVDNUxmLElBQUFuQyxFQUFBQyxFQUFBLEdBQUEsRUFFTUMsRUFBMkIsQ0FDN0IsV0FBWSxVQUFBLENBQU8sRUFDbkIsU0FBVSxVQUFBLENBQU8sRUFDakIsU0FBVSxVQUFBLENBQU8sR0FHZkMsRUFBMEMsQ0FDNUMsR0FBSSxLQUNKLFNBQVUsSUFHZDJDLEVBQUEsVUFBQSxDQVNJLFNBQUFBLEVBQ0lULEVBQ0FELEVBQ0FyckIsRUFDQXVwQixFQUF5RCxDQUh6RCtCLElBQUEsU0FBQUEsRUFBQSxNQUNBRCxJQUFBLFNBQUFBLEVBQUEsTUFDQXJyQixJQUFBLFNBQUFBLEVBQUFtcEIsR0FDQUksSUFBQSxTQUFBQSxFQUFBSCxHQUVBLEtBQUssWUFBY0csRUFBZ0IsR0FDN0JBLEVBQWdCLEdBQ2hCK0IsRUFBUyxHQUNmLEtBQUssVUFBWUEsRUFDakIsS0FBSyxXQUFhRCxFQUNsQixLQUFLLFNBQVE3QixFQUFBQSxFQUFBLENBQUEsRUFBUUwsQ0FBTyxFQUFLbnBCLENBQU8sRUFDeEMsS0FBSyxTQUFXLEdBQ2hCLEtBQUssYUFBZSxHQUNwQixLQUFLLEtBQUksRUFDVGlwQixFQUFBLFFBQVUsWUFDTixXQUNBLEtBQ0EsS0FBSyxZQUNMTSxFQUFnQixRQUFRLENBRWhDLENBRUEsT0FBQXdDLEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FBQSxJQUFBck4sRUFBQSxLQUNRLEtBQUssWUFBYyxLQUFLLFdBQWEsQ0FBQyxLQUFLLGVBQ3ZDLEtBQUssV0FBVyxhQUFhLGVBQWUsRUFDNUMsS0FBSyxTQUNELEtBQUssV0FBVyxhQUFhLGVBQWUsSUFBTSxPQUd0RCxLQUFLLFNBQVcsQ0FBQyxLQUFLLFVBQVUsVUFBVSxTQUFTLFFBQVEsRUFHL0QsS0FBSyxjQUFnQixVQUFBLENBQ2pCQSxFQUFLLE9BQU0sQ0FDZixFQUVBLEtBQUssV0FBVyxpQkFBaUIsUUFBUyxLQUFLLGFBQWEsRUFDNUQsS0FBSyxhQUFlLEdBRTVCLEVBRUFxTixFQUFBLFVBQUEsUUFBQSxVQUFBLENBQ1EsS0FBSyxZQUFjLEtBQUssZUFDeEIsS0FBSyxXQUFXLG9CQUFvQixRQUFTLEtBQUssYUFBYSxFQUMvRCxLQUFLLGFBQWUsR0FFNUIsRUFFQUEsRUFBQSxVQUFBLGVBQUEsVUFBQSxDQUNJOUMsRUFBQSxRQUFVLGVBQWUsV0FBWSxLQUFLLFdBQVcsQ0FDekQsRUFFQThDLEVBQUEsVUFBQSx5QkFBQSxVQUFBLENBQ0ksS0FBSyxRQUFPLEVBQ1osS0FBSyxlQUFjLENBQ3ZCLEVBRUFBLEVBQUEsVUFBQSxTQUFBLFVBQUEsQ0FDSSxLQUFLLFVBQVUsVUFBVSxJQUFJLFFBQVEsRUFDakMsS0FBSyxZQUNMLEtBQUssV0FBVyxhQUFhLGdCQUFpQixPQUFPLEVBRXpELEtBQUssU0FBVyxHQUdoQixLQUFLLFNBQVMsV0FBVyxJQUFJLENBQ2pDLEVBRUFBLEVBQUEsVUFBQSxPQUFBLFVBQUEsQ0FDSSxLQUFLLFVBQVUsVUFBVSxPQUFPLFFBQVEsRUFDcEMsS0FBSyxZQUNMLEtBQUssV0FBVyxhQUFhLGdCQUFpQixNQUFNLEVBRXhELEtBQUssU0FBVyxHQUdoQixLQUFLLFNBQVMsU0FBUyxJQUFJLENBQy9CLEVBRUFBLEVBQUEsVUFBQSxPQUFBLFVBQUEsQ0FDUSxLQUFLLFNBQ0wsS0FBSyxTQUFRLEVBRWIsS0FBSyxPQUFNLEVBR2YsS0FBSyxTQUFTLFNBQVMsSUFBSSxDQUMvQixFQUVBQSxFQUFBLFVBQUEsaUJBQUEsU0FBaUJsRSxFQUFvQixDQUNqQyxLQUFLLFNBQVMsV0FBYUEsQ0FDL0IsRUFFQWtFLEVBQUEsVUFBQSxlQUFBLFNBQWVsRSxFQUFvQixDQUMvQixLQUFLLFNBQVMsU0FBV0EsQ0FDN0IsRUFFQWtFLEVBQUEsVUFBQSxlQUFBLFNBQWVsRSxFQUFvQixDQUMvQixLQUFLLFNBQVMsU0FBV0EsQ0FDN0IsRUFDSmtFLENBQUEsRUFBQyxFQUVELFNBQWdCQyxHQUFhLENBQ3pCLFNBQ0ssaUJBQWlCLHdCQUF3QixFQUN6QyxRQUFRLFNBQUMvQixFQUFVLENBQ2hCLElBQU0wQixFQUFXMUIsRUFBVyxhQUFhLHNCQUFzQixFQUN6RDJCLEVBQVksU0FBUyxlQUFlRCxDQUFRLEVBRzlDQyxFQUVLM0MsRUFBQSxRQUFVLGVBQ1AsV0FDQTJDLEVBQVUsYUFBYSxJQUFJLENBQUMsRUFTaEMsSUFBSUcsRUFDQUgsRUFDQTNCLEVBQ0EsQ0FBQSxFQUNBLENBQ0ksR0FDSTJCLEVBQVUsYUFBYSxJQUFJLEVBQzNCLElBQ0EzQyxFQUFBLFFBQVUsa0JBQWlCLEVBQ2xDLEVBZkwsSUFBSThDLEVBQ0FILEVBQ0EzQixDQUF5QixFQWlCakMsUUFBUSxNQUNKLCtCQUFBLE9BQStCMEIsRUFBUSxvRUFBQSxDQUFvRSxDQUd2SCxDQUFDLENBQ1QsQ0F2Q0F6eUIsRUFBQSxjQUFBOHlCLEVBeUNJLE9BQU8sT0FBVyxNQUNsQixPQUFPLFNBQVdELEVBQ2xCLE9BQU8sY0FBZ0JDLEdBRzNCOXlCLEVBQUEsUUFBZTZ5Qiw2VUMxS2YsSUFBQTlDLEVBQUFDLEVBQUEsR0FBQSxFQUVBK0MsRUFBQS9DLEVBQUEsR0FBQSxFQUtNQyxFQUE2QixDQUMvQixvQkFBcUIsS0FDckIsU0FBVSxHQUNWLE9BQVEsYUFDUixRQUFTLEtBQ1QsUUFBUyxLQUNULFlBQWEsU0FDYixRQUFTLEdBQ1QsZ0JBQWlCLEVBQ2pCLE1BQU8sS0FDUCxTQUFVLEtBQ1YsWUFBYSxHQUNiLE9BQVEsVUFBQSxDQUFPLEVBQ2YsT0FBUSxVQUFBLENBQU8sR0FHYkMsRUFBMEMsQ0FDNUMsR0FBSSxLQUNKLFNBQVUsSUFHZDlCLEVBQUEsVUFBQSxDQU9JLFNBQUFBLEVBQ0k0RSxFQUNBbHNCLEVBQ0F1cEIsRUFBeUQsQ0FGekQyQyxJQUFBLFNBQUFBLEVBQUEsTUFDQWxzQixJQUFBLFNBQUFBLEVBQUFtcEIsR0FDQUksSUFBQSxTQUFBQSxFQUFBSCxHQUVBLEtBQUssWUFBY0csRUFBZ0IsR0FDN0JBLEVBQWdCLEdBQ2hCMkMsRUFBYSxHQUNuQixLQUFLLGNBQWdCQSxFQUNyQixLQUFLLG9CQUFzQixLQUMzQixLQUFLLFNBQVExQyxFQUFBQSxFQUFBLENBQUEsRUFBUUwsQ0FBTyxFQUFLbnBCLENBQU8sRUFDeEMsS0FBSyxhQUFlLEdBQ3BCLEtBQUssS0FBSSxFQUNUaXBCLEVBQUEsUUFBVSxZQUNOLGFBQ0EsS0FDQSxLQUFLLFlBQ0xNLEVBQWdCLFFBQVEsQ0FFaEMsQ0FFQSxPQUFBakMsRUFBQSxVQUFBLEtBQUEsVUFBQSxDQUNRLEtBQUssZUFBaUIsQ0FBQyxLQUFLLGVBQ3hCLEtBQUssU0FBUyxZQUNkLEtBQUssb0JBQXNCLElBQUkyRSxFQUFBLGdCQUMzQixLQUFLLGNBQ0wsS0FBSyxzQkFBc0IsS0FBSyxRQUFRLENBQUMsRUFHN0MsS0FBSyxvQkFBc0IsSUFBSUEsRUFBQSxXQUMzQixLQUFLLGNBQ0wsS0FBSyxzQkFBc0IsS0FBSyxRQUFRLENBQUMsRUFJakQsS0FBSyxhQUFlLEdBRTVCLEVBRUEzRSxFQUFBLFVBQUEsUUFBQSxVQUFBLENBQ1EsS0FBSyxlQUNMLEtBQUssYUFBZSxHQUNwQixLQUFLLG9CQUFvQixRQUFPLEVBRXhDLEVBRUFBLEVBQUEsVUFBQSxlQUFBLFVBQUEsQ0FDSSxLQUFLLFFBQU8sRUFDWjJCLEVBQUEsUUFBVSxlQUFlLGFBQWMsS0FBSyxXQUFXLENBQzNELEVBRUEzQixFQUFBLFVBQUEseUJBQUEsVUFBQSxDQUNJLEtBQUssUUFBTyxFQUNaLEtBQUssZUFBYyxDQUN2QixFQUVBQSxFQUFBLFVBQUEsc0JBQUEsVUFBQSxDQUNJLE9BQU8sS0FBSyxtQkFDaEIsRUFFQUEsRUFBQSxVQUFBLFFBQUEsVUFBQSxDQUNJLEdBQ0ksS0FBSyxTQUFTLGFBQ2QsS0FBSywrQkFBK0IyRSxFQUFBLGdCQUVwQyxPQUFPLEtBQUssb0JBQW9CLFNBQVEsRUFHNUMsR0FDSSxDQUFDLEtBQUssU0FBUyxhQUNmLEtBQUssK0JBQStCQSxFQUFBLFdBRXBDLE9BQU8sS0FBSyxvQkFBb0IsUUFBTyxDQUUvQyxFQUVBM0UsRUFBQSxVQUFBLFFBQUEsU0FBUTdRLEVBQVMsQ0FDYixHQUNJLEtBQUssU0FBUyxhQUNkLEtBQUssK0JBQStCd1YsRUFBQSxnQkFFcEMsT0FBTyxLQUFLLG9CQUFvQixTQUFTeFYsQ0FBSSxFQUdqRCxHQUNJLENBQUMsS0FBSyxTQUFTLGFBQ2YsS0FBSywrQkFBK0J3VixFQUFBLFdBRXBDLE9BQU8sS0FBSyxvQkFBb0IsUUFBUXhWLENBQUksQ0FFcEQsRUFFQTZRLEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FDSSxLQUFLLG9CQUFvQixLQUFJLEVBQzdCLEtBQUssU0FBUyxPQUFPLElBQUksQ0FDN0IsRUFFQUEsRUFBQSxVQUFBLEtBQUEsVUFBQSxDQUNJLEtBQUssb0JBQW9CLEtBQUksRUFDN0IsS0FBSyxTQUFTLE9BQU8sSUFBSSxDQUM3QixFQUVBQSxFQUFBLFVBQUEsc0JBQUEsU0FBc0J0bkIsRUFBMEIsQ0FDNUMsSUFBTW1zQixFQUFvQixDQUFBLEVBRTFCLE9BQUluc0IsRUFBUSxVQUNSbXNCLEVBQWtCLFNBQVcsR0FDN0JBLEVBQWtCLFNBQVcsR0FFekJuc0IsRUFBUSxrQkFDUm1zQixFQUFrQixhQUFlLElBSXJDbnNCLEVBQVEsV0FDUm1zQixFQUFrQixTQUFXLElBRzdCbnNCLEVBQVEsU0FDUm1zQixFQUFrQixPQUFTbnNCLEVBQVEsUUFHbkNBLEVBQVEsVUFDUm1zQixFQUFrQixRQUFVbnNCLEVBQVEsU0FHcENBLEVBQVEsVUFDUm1zQixFQUFrQixRQUFVbnNCLEVBQVEsU0FHcENBLEVBQVEsY0FDUm1zQixFQUFrQixZQUFjbnNCLEVBQVEsYUFHeENBLEVBQVEsUUFDUm1zQixFQUFrQixNQUFRbnNCLEVBQVEsT0FHbENBLEVBQVEsV0FDUm1zQixFQUFrQixTQUFXbnNCLEVBQVEsVUFHbENtc0IsQ0FDWCxFQUVBN0UsRUFBQSxVQUFBLGFBQUEsU0FBYU8sRUFBb0IsQ0FDN0IsS0FBSyxTQUFTLE9BQVNBLENBQzNCLEVBRUFQLEVBQUEsVUFBQSxhQUFBLFNBQWFPLEVBQW9CLENBQzdCLEtBQUssU0FBUyxPQUFTQSxDQUMzQixFQUNKUCxDQUFBLEVBQUMsRUFFRCxTQUFnQjhFLEdBQWUsQ0FDM0IsU0FDSyxpQkFDRyx1REFBdUQsRUFFMUQsUUFBUSxTQUFDQyxFQUFhLENBQ25CLEdBQUlBLEVBQWUsQ0FDZixJQUFNQyxFQUNGRCxFQUFjLGFBQWEsb0JBQW9CLEVBQzdDRSxFQUFrQkYsRUFBYyxhQUNsQyw2QkFBNkIsRUFFM0JoRixFQUFXZ0YsRUFBYyxhQUMzQixxQkFBcUIsRUFFbkJ2VCxFQUFTdVQsRUFBYyxhQUFhLG1CQUFtQixFQUN2RDdQLEVBQVU2UCxFQUFjLGFBQzFCLHFCQUFxQixFQUVuQjNQLEVBQVUyUCxFQUFjLGFBQzFCLHFCQUFxQixFQUVuQnZPLEVBQWN1TyxFQUFjLGFBQzlCLHdCQUF3QixFQUV0QjdJLEVBQVE2SSxFQUFjLGFBQWEsa0JBQWtCLEVBQ3JEOVAsRUFBVzhQLEVBQWMsYUFDM0IscUJBQXFCLEVBRW5CRyxFQUNGSCxFQUFjLGFBQWEsa0JBQWtCLEVBQ2pELElBQUkvRSxFQUNBK0UsRUFDQSxDQUNJLFFBQVNDLEdBQW9CbkQsRUFBUSxRQUNyQyxnQkFBaUJvRCxHQUVYcEQsRUFBUSxnQkFDZCxTQUFVOUIsR0FBc0I4QixFQUFRLFNBQ3hDLE9BQVFyUSxHQUFrQnFRLEVBQVEsT0FDbEMsUUFBUzNNLEdBQW9CMk0sRUFBUSxRQUNyQyxRQUFTek0sR0FBb0J5TSxFQUFRLFFBQ3JDLFlBQWFyTCxHQUVQcUwsRUFBUSxZQUNkLE1BQU8zRixHQUFnQjJGLEVBQVEsTUFDL0IsU0FBVTVNLEdBQXNCNE0sRUFBUSxTQUN4QyxZQUFhcUQsR0FFUHJELEVBQVEsWUFDSSxPQUcxQixRQUFRLE1BQ0osK0VBQStFLENBRzNGLENBQUMsQ0FDVCxDQTFEQWp3QixFQUFBLGdCQUFBa3pCLEVBNERJLE9BQU8sT0FBVyxNQUNsQixPQUFPLFdBQWE5RSxFQUNwQixPQUFPLGdCQUFrQjhFLEdBRzdCbHpCLEVBQUEsUUFBZW91Qix1VUMvUGYsSUFBQTJCLEVBQUFDLEVBQUEsR0FBQSxFQUVNQyxFQUF1QixDQUN6QixZQUFhLFFBQ2IsT0FBUSxVQUFBLENBQU8sRUFDZixPQUFRLFVBQUEsQ0FBTyxFQUNmLFNBQVUsVUFBQSxDQUFPLEdBR2ZDLEVBQTBDLENBQzVDLEdBQUksS0FDSixTQUFVLElBR2RxRCxFQUFBLFVBQUEsQ0FXSSxTQUFBQSxFQUNJQyxFQUNBckIsRUFDQUMsRUFDQXRyQixFQUNBdXBCLEVBQXlELENBSnpEbUQsSUFBQSxTQUFBQSxFQUFBLE1BQ0FyQixJQUFBLFNBQUFBLEVBQUEsTUFDQUMsSUFBQSxTQUFBQSxFQUFBLE1BQ0F0ckIsSUFBQSxTQUFBQSxFQUFBbXBCLEdBQ0FJLElBQUEsU0FBQUEsRUFBQUgsR0FFQSxLQUFLLFlBQWNHLEVBQWdCLEdBQzdCQSxFQUFnQixHQUNoQitCLEVBQVMsR0FDZixLQUFLLFVBQVlvQixFQUNqQixLQUFLLFdBQWFyQixFQUNsQixLQUFLLFVBQVlDLEVBQ2pCLEtBQUssU0FBUTlCLEVBQUFBLEVBQUEsQ0FBQSxFQUFRTCxDQUFPLEVBQUtucEIsQ0FBTyxFQUN4QyxLQUFLLFNBQVcsR0FDaEIsS0FBSyxhQUFlLEdBQ3BCLEtBQUssS0FBSSxFQUNUaXBCLEVBQUEsUUFBVSxZQUNOLE9BQ0EsS0FDQSxLQUFLLFlBQ0xNLEVBQWdCLFFBQVEsQ0FFaEMsQ0FFQSxPQUFBa0QsRUFBQSxVQUFBLEtBQUEsVUFBQSxDQUFBLElBQUEvTixFQUFBLEtBQ0ksR0FBSSxLQUFLLFlBQWMsS0FBSyxXQUFhLENBQUMsS0FBSyxhQUFjLENBQ3pELElBQU1pTyxFQUFvQixLQUFLLHNCQUMzQixLQUFLLFNBQVMsV0FBVyxFQUc3QixLQUFLLGtCQUFvQixVQUFBLENBQ3JCak8sRUFBSyxLQUFJLENBQ2IsRUFFQWlPLEVBQWtCLFdBQVcsUUFBUSxTQUFDN1IsRUFBVSxDQUM1QzRELEVBQUssV0FBVyxpQkFBaUI1RCxFQUFJNEQsRUFBSyxpQkFBaUIsRUFDM0RBLEVBQUssVUFBVSxpQkFBaUI1RCxFQUFJNEQsRUFBSyxpQkFBaUIsQ0FDOUQsQ0FBQyxFQUVELEtBQUssa0JBQW9CLFVBQUEsQ0FDaEJBLEVBQUssVUFBVSxRQUFRLFFBQVEsR0FDaENBLEVBQUssS0FBSSxDQUVqQixFQUVBaU8sRUFBa0IsV0FBVyxRQUFRLFNBQUM3UixFQUFVLENBQzVDNEQsRUFBSyxVQUFVLGlCQUFpQjVELEVBQUk0RCxFQUFLLGlCQUFpQixDQUM5RCxDQUFDLEVBQ0QsS0FBSyxhQUFlLEdBRTVCLEVBRUErTixFQUFBLFVBQUEsUUFBQSxVQUFBLENBQUEsSUFBQS9OLEVBQUEsS0FDSSxHQUFJLEtBQUssYUFBYyxDQUNuQixJQUFNaU8sRUFBb0IsS0FBSyxzQkFDM0IsS0FBSyxTQUFTLFdBQVcsRUFHN0JBLEVBQWtCLFdBQVcsUUFBUSxTQUFDN1IsRUFBVSxDQUM1QzRELEVBQUssV0FBVyxvQkFBb0I1RCxFQUFJNEQsRUFBSyxpQkFBaUIsRUFDOURBLEVBQUssVUFBVSxvQkFBb0I1RCxFQUFJNEQsRUFBSyxpQkFBaUIsQ0FDakUsQ0FBQyxFQUVEaU8sRUFBa0IsV0FBVyxRQUFRLFNBQUM3UixFQUFVLENBQzVDNEQsRUFBSyxVQUFVLG9CQUFvQjVELEVBQUk0RCxFQUFLLGlCQUFpQixDQUNqRSxDQUFDLEVBRUQsS0FBSyxhQUFlLEdBRTVCLEVBRUErTixFQUFBLFVBQUEsZUFBQSxVQUFBLENBQ0l4RCxFQUFBLFFBQVUsZUFBZSxPQUFRLEtBQUssV0FBVyxDQUNyRCxFQUVBd0QsRUFBQSxVQUFBLHlCQUFBLFVBQUEsQ0FDSSxLQUFLLFFBQU8sRUFDWixLQUFLLGVBQWMsQ0FDdkIsRUFFQUEsRUFBQSxVQUFBLEtBQUEsVUFBQSxDQUNJLEtBQUssVUFBVSxVQUFVLElBQUksUUFBUSxFQUNqQyxLQUFLLFlBQ0wsS0FBSyxXQUFXLGFBQWEsZ0JBQWlCLE9BQU8sRUFFekQsS0FBSyxTQUFXLEdBR2hCLEtBQUssU0FBUyxPQUFPLElBQUksQ0FDN0IsRUFFQUEsRUFBQSxVQUFBLEtBQUEsVUFBQSxDQUNJLEtBQUssVUFBVSxVQUFVLE9BQU8sUUFBUSxFQUNwQyxLQUFLLFlBQ0wsS0FBSyxXQUFXLGFBQWEsZ0JBQWlCLE1BQU0sRUFFeEQsS0FBSyxTQUFXLEdBR2hCLEtBQUssU0FBUyxPQUFPLElBQUksQ0FDN0IsRUFFQUEsRUFBQSxVQUFBLE9BQUEsVUFBQSxDQUNRLEtBQUssU0FDTCxLQUFLLEtBQUksRUFFVCxLQUFLLEtBQUksQ0FFakIsRUFFQUEsRUFBQSxVQUFBLFNBQUEsVUFBQSxDQUNJLE1BQU8sQ0FBQyxLQUFLLFFBQ2pCLEVBRUFBLEVBQUEsVUFBQSxVQUFBLFVBQUEsQ0FDSSxPQUFPLEtBQUssUUFDaEIsRUFFQUEsRUFBQSxVQUFBLHNCQUFBLFNBQXNCRyxFQUE0QixDQUM5QyxPQUFRQSxFQUFhLENBQ2pCLElBQUssUUFDRCxNQUFPLENBQ0gsV0FBWSxDQUFDLGFBQWMsT0FBTyxFQUNsQyxXQUFZLENBQUMsYUFBYyxNQUFNLEdBRXpDLElBQUssUUFDRCxNQUFPLENBQ0gsV0FBWSxDQUFDLFFBQVMsT0FBTyxFQUM3QixXQUFZLENBQUMsV0FBWSxNQUFNLEdBRXZDLElBQUssT0FDRCxNQUFPLENBQ0gsV0FBWSxDQUFBLEVBQ1osV0FBWSxDQUFBLEdBRXBCLFFBQ0ksTUFBTyxDQUNILFdBQVksQ0FBQyxhQUFjLE9BQU8sRUFDbEMsV0FBWSxDQUFDLGFBQWMsTUFBTSxHQUdqRCxFQUVBSCxFQUFBLFVBQUEsYUFBQSxTQUFhNUUsRUFBb0IsQ0FDN0IsS0FBSyxTQUFTLE9BQVNBLENBQzNCLEVBRUE0RSxFQUFBLFVBQUEsYUFBQSxTQUFhNUUsRUFBb0IsQ0FDN0IsS0FBSyxTQUFTLE9BQVNBLENBQzNCLEVBRUE0RSxFQUFBLFVBQUEsZUFBQSxTQUFlNUUsRUFBb0IsQ0FDL0IsS0FBSyxTQUFTLFNBQVdBLENBQzdCLEVBQ0o0RSxDQUFBLEVBQUMsRUFFRCxTQUFnQkksR0FBUyxDQUNyQixTQUFTLGlCQUFpQixrQkFBa0IsRUFBRSxRQUFRLFNBQUNDLEVBQVMsQ0FDNUQsSUFBTTdDLEVBQWE2QyxFQUFVLGNBQWMsb0JBQW9CLEVBRS9ELEdBQUk3QyxFQUFZLENBQ1osSUFBTThDLEVBQVM5QyxFQUFXLGFBQWEsa0JBQWtCLEVBQ25EK0MsRUFBVSxTQUFTLGVBQWVELENBQU0sRUFFOUMsR0FBSUMsRUFBUyxDQUNULElBQU1KLEVBQ0YzQyxFQUFXLGFBQWEsbUJBQW1CLEVBQy9DLElBQUl3QyxFQUNBSyxFQUNBN0MsRUFDQStDLEVBQ0EsQ0FDSSxZQUFhSixHQUVQekQsRUFBUSxZQUNGLE9BR3BCLFFBQVEsTUFDSixnQkFBQSxPQUFnQjRELEVBQU0sbUdBQUEsQ0FBbUcsT0FJakksUUFBUSxNQUNKLGdCQUFBLE9BQWdCRCxFQUFVLEdBQUUsNEZBQUEsQ0FBNEYsQ0FHcEksQ0FBQyxDQUNMLENBaENBNXpCLEVBQUEsVUFBQTJ6QixFQWtDSSxPQUFPLE9BQVcsTUFDbEIsT0FBTyxLQUFPSixFQUNkLE9BQU8sVUFBWUksR0FHdkIzekIsRUFBQSxRQUFldXpCLDJVQzdOZixJQUFBeEQsRUFBQUMsRUFBQSxHQUFBLEVBRU1DLEVBQTBCLENBQzVCLFdBQVkscUJBQ1osU0FBVSxJQUNWLE9BQVEsV0FDUixPQUFRLFVBQUEsQ0FBTyxHQUdiQyxFQUEwQyxDQUM1QyxHQUFJLEtBQ0osU0FBVSxJQUdkNkQsRUFBQSxVQUFBLENBUUksU0FBQUEsRUFDSTNCLEVBQ0FELEVBQ0FyckIsRUFDQXVwQixFQUF5RCxDQUh6RCtCLElBQUEsU0FBQUEsRUFBQSxNQUNBRCxJQUFBLFNBQUFBLEVBQUEsTUFDQXJyQixJQUFBLFNBQUFBLEVBQUFtcEIsR0FDQUksSUFBQSxTQUFBQSxFQUFBSCxHQUVBLEtBQUssWUFBY0csRUFBZ0IsR0FDN0JBLEVBQWdCLEdBQ2hCK0IsRUFBUyxHQUNmLEtBQUssVUFBWUEsRUFDakIsS0FBSyxXQUFhRCxFQUNsQixLQUFLLFNBQVE3QixFQUFBQSxFQUFBLENBQUEsRUFBUUwsQ0FBTyxFQUFLbnBCLENBQU8sRUFDeEMsS0FBSyxhQUFlLEdBQ3BCLEtBQUssS0FBSSxFQUNUaXBCLEVBQUEsUUFBVSxZQUNOLFVBQ0EsS0FDQSxLQUFLLFlBQ0xNLEVBQWdCLFFBQVEsQ0FFaEMsQ0FFQSxPQUFBMEQsRUFBQSxVQUFBLEtBQUEsVUFBQSxDQUFBLElBQUF2TyxFQUFBLEtBQ1EsS0FBSyxZQUFjLEtBQUssV0FBYSxDQUFDLEtBQUssZUFDM0MsS0FBSyxjQUFnQixVQUFBLENBQ2pCQSxFQUFLLEtBQUksQ0FDYixFQUNBLEtBQUssV0FBVyxpQkFBaUIsUUFBUyxLQUFLLGFBQWEsRUFDNUQsS0FBSyxhQUFlLEdBRTVCLEVBRUF1TyxFQUFBLFVBQUEsUUFBQSxVQUFBLENBQ1EsS0FBSyxZQUFjLEtBQUssZUFDeEIsS0FBSyxXQUFXLG9CQUFvQixRQUFTLEtBQUssYUFBYSxFQUMvRCxLQUFLLGFBQWUsR0FFNUIsRUFFQUEsRUFBQSxVQUFBLGVBQUEsVUFBQSxDQUNJaEUsRUFBQSxRQUFVLGVBQWUsVUFBVyxLQUFLLFdBQVcsQ0FDeEQsRUFFQWdFLEVBQUEsVUFBQSx5QkFBQSxVQUFBLENBQ0ksS0FBSyxRQUFPLEVBQ1osS0FBSyxlQUFjLENBQ3ZCLEVBRUFBLEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FBQSxJQUFBdk8sRUFBQSxLQUNJLEtBQUssVUFBVSxVQUFVLElBQ3JCLEtBQUssU0FBUyxXQUNkLFlBQUEsT0FBWSxLQUFLLFNBQVMsUUFBUSxFQUNsQyxLQUFLLFNBQVMsT0FDZCxXQUFXLEVBRWYsV0FBVyxVQUFBLENBQ1BBLEVBQUssVUFBVSxVQUFVLElBQUksUUFBUSxDQUN6QyxFQUFHLEtBQUssU0FBUyxRQUFRLEVBR3pCLEtBQUssU0FBUyxPQUFPLEtBQU0sS0FBSyxTQUFTLENBQzdDLEVBRUF1TyxFQUFBLFVBQUEsYUFBQSxTQUFhcEYsRUFBb0IsQ0FDN0IsS0FBSyxTQUFTLE9BQVNBLENBQzNCLEVBQ0pvRixDQUFBLEVBQUMsRUFFRCxTQUFnQkMsR0FBYSxDQUN6QixTQUFTLGlCQUFpQix1QkFBdUIsRUFBRSxRQUFRLFNBQUNqRCxFQUFVLENBQ2xFLElBQU0wQixFQUFXMUIsRUFBVyxhQUFhLHFCQUFxQixFQUN4RGtELEVBQWEsU0FBUyxjQUFjeEIsQ0FBUSxFQUU5Q3dCLEVBQ0EsSUFBSUYsRUFBUUUsRUFBMkJsRCxDQUF5QixFQUVoRSxRQUFRLE1BQ0osZ0NBQUEsT0FBZ0MwQixFQUFRLG1FQUFBLENBQW1FLENBR3ZILENBQUMsQ0FDTCxDQWJBenlCLEVBQUEsY0FBQWcwQixFQWVJLE9BQU8sT0FBVyxNQUNsQixPQUFPLFFBQVVELEVBQ2pCLE9BQU8sY0FBZ0JDLEdBRzNCaDBCLEVBQUEsUUFBZSt6Qix5VUM5R2YsSUFBQWhFLEVBQUFDLEVBQUEsR0FBQSxFQUVNQyxFQUF5QixDQUMzQixVQUFXLE9BQ1gsY0FBZSxHQUNmLFNBQVUsR0FDVixLQUFNLEdBQ04sV0FBWSxnQkFDWixnQkFBaUIsd0RBQ2pCLE9BQVEsVUFBQSxDQUFPLEVBQ2YsT0FBUSxVQUFBLENBQU8sRUFDZixTQUFVLFVBQUEsQ0FBTyxHQUdmQyxFQUEwQyxDQUM1QyxHQUFJLEtBQ0osU0FBVSxJQUdkZ0UsRUFBQSxVQUFBLENBVUksU0FBQUEsRUFDSTlCLEVBQ0F0ckIsRUFDQXVwQixFQUF5RCxDQUZ6RCtCLElBQUEsU0FBQUEsRUFBQSxNQUNBdHJCLElBQUEsU0FBQUEsRUFBQW1wQixHQUNBSSxJQUFBLFNBQUFBLEVBQUFILEdBUEosS0FBQSx3QkFBbUQsQ0FBQSxFQVMvQyxLQUFLLFlBQWNHLEVBQWdCLEdBQzdCQSxFQUFnQixHQUNoQitCLEVBQVMsR0FDZixLQUFLLFVBQVlBLEVBQ2pCLEtBQUssU0FBUTlCLEVBQUFBLEVBQUEsQ0FBQSxFQUFRTCxDQUFPLEVBQUtucEIsQ0FBTyxFQUN4QyxLQUFLLFNBQVcsR0FDaEIsS0FBSyxhQUFlLEdBQ3BCLEtBQUssS0FBSSxFQUNUaXBCLEVBQUEsUUFBVSxZQUNOLFNBQ0EsS0FDQSxLQUFLLFlBQ0xNLEVBQWdCLFFBQVEsQ0FFaEMsQ0FFQSxPQUFBNkQsRUFBQSxVQUFBLEtBQUEsVUFBQSxDQUFBLElBQUExTyxFQUFBLEtBRVEsS0FBSyxXQUFhLENBQUMsS0FBSyxlQUN4QixLQUFLLFVBQVUsYUFBYSxjQUFlLE1BQU0sRUFDakQsS0FBSyxVQUFVLFVBQVUsSUFBSSxzQkFBc0IsRUFHbkQsS0FBSyxxQkFBcUIsS0FBSyxTQUFTLFNBQVMsRUFBRSxLQUFLLElBQUksU0FBQzJPLEVBQUMsQ0FDMUQzTyxFQUFLLFVBQVUsVUFBVSxJQUFJMk8sQ0FBQyxDQUNsQyxDQUFDLEVBRUQsS0FBSyxpQkFBbUIsU0FBQ0MsRUFBb0IsQ0FDckNBLEVBQU0sTUFBUSxVQUVWNU8sRUFBSyxVQUFTLEdBRWRBLEVBQUssS0FBSSxDQUdyQixFQUdBLFNBQVMsaUJBQWlCLFVBQVcsS0FBSyxnQkFBZ0IsRUFFMUQsS0FBSyxhQUFlLEdBRTVCLEVBRUEwTyxFQUFBLFVBQUEsUUFBQSxVQUFBLENBQ1EsS0FBSyxlQUNMLEtBQUssZ0NBQStCLEVBQ3BDLEtBQUssbUJBQWtCLEVBR3ZCLFNBQVMsb0JBQW9CLFVBQVcsS0FBSyxnQkFBZ0IsRUFFN0QsS0FBSyxhQUFlLEdBRTVCLEVBRUFBLEVBQUEsVUFBQSxlQUFBLFVBQUEsQ0FDSW5FLEVBQUEsUUFBVSxlQUFlLFNBQVUsS0FBSyxXQUFXLENBQ3ZELEVBRUFtRSxFQUFBLFVBQUEseUJBQUEsVUFBQSxDQUNJLEtBQUssUUFBTyxFQUNaLEtBQUssZUFBYyxDQUN2QixFQUVBQSxFQUFBLFVBQUEsS0FBQSxVQUFBLENBQUEsSUFBQTFPLEVBQUEsS0FFUSxLQUFLLFNBQVMsTUFDZCxLQUFLLHFCQUNELEtBQUssU0FBUyxVQUFZLE9BQU8sRUFDbkMsT0FBTyxJQUFJLFNBQUMyTyxFQUFDLENBQ1gzTyxFQUFLLFVBQVUsVUFBVSxPQUFPMk8sQ0FBQyxDQUNyQyxDQUFDLEVBQ0QsS0FBSyxxQkFDRCxLQUFLLFNBQVMsVUFBWSxPQUFPLEVBQ25DLFNBQVMsSUFBSSxTQUFDQSxFQUFDLENBQ2IzTyxFQUFLLFVBQVUsVUFBVSxJQUFJMk8sQ0FBQyxDQUNsQyxDQUFDLElBRUQsS0FBSyxxQkFBcUIsS0FBSyxTQUFTLFNBQVMsRUFBRSxPQUFPLElBQ3RELFNBQUNBLEVBQUMsQ0FDRTNPLEVBQUssVUFBVSxVQUFVLE9BQU8yTyxDQUFDLENBQ3JDLENBQUMsRUFFTCxLQUFLLHFCQUFxQixLQUFLLFNBQVMsU0FBUyxFQUFFLFNBQVMsSUFDeEQsU0FBQ0EsRUFBQyxDQUNFM08sRUFBSyxVQUFVLFVBQVUsSUFBSTJPLENBQUMsQ0FDbEMsQ0FBQyxHQUtULEtBQUssVUFBVSxhQUFhLGNBQWUsTUFBTSxFQUNqRCxLQUFLLFVBQVUsZ0JBQWdCLFlBQVksRUFDM0MsS0FBSyxVQUFVLGdCQUFnQixNQUFNLEVBR2hDLEtBQUssU0FBUyxlQUNmLFNBQVMsS0FBSyxVQUFVLE9BQU8saUJBQWlCLEVBSWhELEtBQUssU0FBUyxVQUNkLEtBQUssbUJBQWtCLEVBRzNCLEtBQUssU0FBVyxHQUdoQixLQUFLLFNBQVMsT0FBTyxJQUFJLENBQzdCLEVBRUFELEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FBQSxJQUFBMU8sRUFBQSxLQUNRLEtBQUssU0FBUyxNQUNkLEtBQUsscUJBQ0QsS0FBSyxTQUFTLFVBQVksT0FBTyxFQUNuQyxPQUFPLElBQUksU0FBQzJPLEVBQUMsQ0FDWDNPLEVBQUssVUFBVSxVQUFVLElBQUkyTyxDQUFDLENBQ2xDLENBQUMsRUFDRCxLQUFLLHFCQUNELEtBQUssU0FBUyxVQUFZLE9BQU8sRUFDbkMsU0FBUyxJQUFJLFNBQUNBLEVBQUMsQ0FDYjNPLEVBQUssVUFBVSxVQUFVLE9BQU8yTyxDQUFDLENBQ3JDLENBQUMsSUFFRCxLQUFLLHFCQUFxQixLQUFLLFNBQVMsU0FBUyxFQUFFLE9BQU8sSUFDdEQsU0FBQ0EsRUFBQyxDQUNFM08sRUFBSyxVQUFVLFVBQVUsSUFBSTJPLENBQUMsQ0FDbEMsQ0FBQyxFQUVMLEtBQUsscUJBQXFCLEtBQUssU0FBUyxTQUFTLEVBQUUsU0FBUyxJQUN4RCxTQUFDQSxFQUFDLENBQ0UzTyxFQUFLLFVBQVUsVUFBVSxPQUFPMk8sQ0FBQyxDQUNyQyxDQUFDLEdBS1QsS0FBSyxVQUFVLGFBQWEsYUFBYyxNQUFNLEVBQ2hELEtBQUssVUFBVSxhQUFhLE9BQVEsUUFBUSxFQUM1QyxLQUFLLFVBQVUsZ0JBQWdCLGFBQWEsRUFHdkMsS0FBSyxTQUFTLGVBQ2YsU0FBUyxLQUFLLFVBQVUsSUFBSSxpQkFBaUIsRUFJN0MsS0FBSyxTQUFTLFVBQ2QsS0FBSyxnQkFBZSxFQUd4QixLQUFLLFNBQVcsR0FHaEIsS0FBSyxTQUFTLE9BQU8sSUFBSSxDQUM3QixFQUVBRCxFQUFBLFVBQUEsT0FBQSxVQUFBLENBQ1EsS0FBSyxVQUFTLEVBQ2QsS0FBSyxLQUFJLEVBRVQsS0FBSyxLQUFJLENBRWpCLEVBRUFBLEVBQUEsVUFBQSxnQkFBQSxVQUFBLE9BQUExTyxFQUFBLEtBQ0ksR0FBSSxDQUFDLEtBQUssU0FBVSxDQUNoQixJQUFNNk8sRUFBYSxTQUFTLGNBQWMsS0FBSyxFQUMvQ0EsRUFBVyxhQUFhLGtCQUFtQixFQUFFLEdBQzdDN0QsRUFBQTZELEVBQVcsV0FBVSxJQUFHLE1BQUE3RCxFQUNqQixLQUFLLFNBQVMsZ0JBQWdCLE1BQU0sR0FBRyxDQUFDLEVBRS9DLFNBQVMsY0FBYyxNQUFNLEVBQUUsT0FBTzZELENBQVUsRUFDaERBLEVBQVcsaUJBQWlCLFFBQVMsVUFBQSxDQUNqQzdPLEVBQUssS0FBSSxDQUNiLENBQUMsRUFFVCxFQUVBME8sRUFBQSxVQUFBLG1CQUFBLFVBQUEsQ0FFUSxLQUFLLFVBQ0wsU0FBUyxjQUFjLG1CQUFtQixJQUFNLE1BRWhELFNBQVMsY0FBYyxtQkFBbUIsRUFBRSxPQUFNLENBRTFELEVBRUFBLEVBQUEsVUFBQSxxQkFBQSxTQUFxQmh6QixFQUFpQixDQUNsQyxPQUFRQSxFQUFXLENBQ2YsSUFBSyxNQUNELE1BQU8sQ0FDSCxLQUFNLENBQUMsUUFBUyxTQUFVLFNBQVMsRUFDbkMsT0FBUSxDQUFDLGdCQUFnQixFQUN6QixTQUFVLENBQUMsbUJBQW1CLEdBRXRDLElBQUssUUFDRCxNQUFPLENBQ0gsS0FBTSxDQUFDLFVBQVcsT0FBTyxFQUN6QixPQUFRLENBQUMsZ0JBQWdCLEVBQ3pCLFNBQVUsQ0FBQyxrQkFBa0IsR0FFckMsSUFBSyxTQUNELE1BQU8sQ0FDSCxLQUFNLENBQUMsV0FBWSxTQUFVLFNBQVMsRUFDdEMsT0FBUSxDQUFDLGdCQUFnQixFQUN6QixTQUFVLENBQUMsa0JBQWtCLEdBRXJDLElBQUssT0FDRCxNQUFPLENBQ0gsS0FBTSxDQUFDLFNBQVUsT0FBTyxFQUN4QixPQUFRLENBQUMsZ0JBQWdCLEVBQ3pCLFNBQVUsQ0FBQyxtQkFBbUIsR0FFdEMsSUFBSyxjQUNELE1BQU8sQ0FDSCxLQUFNLENBQUMsU0FBVSxPQUFPLEVBQ3hCLE9BQVEsQ0FBQyxnQkFBZ0IsRUFDekIsU0FBVSxDQUFDLG1CQUFvQixLQUFLLFNBQVMsVUFBVSxHQUUvRCxRQUNJLE1BQU8sQ0FDSCxLQUFNLENBQUMsU0FBVSxPQUFPLEVBQ3hCLE9BQVEsQ0FBQyxnQkFBZ0IsRUFDekIsU0FBVSxDQUFDLG1CQUFtQixHQUc5QyxFQUVBZ3pCLEVBQUEsVUFBQSxTQUFBLFVBQUEsQ0FDSSxNQUFPLENBQUMsS0FBSyxRQUNqQixFQUVBQSxFQUFBLFVBQUEsVUFBQSxVQUFBLENBQ0ksT0FBTyxLQUFLLFFBQ2hCLEVBRUFBLEVBQUEsVUFBQSx5QkFBQSxTQUNJbnlCLEVBQ0FrbUIsRUFDQXFNLEVBQTJDLENBRTNDLEtBQUssd0JBQXdCLEtBQUssQ0FDOUIsUUFBU3Z5QixFQUNULEtBQU1rbUIsRUFDTixRQUFTcU0sRUFDWixDQUNMLEVBRUFKLEVBQUEsVUFBQSxnQ0FBQSxVQUFBLENBQ0ksS0FBSyx3QkFBd0IsSUFBSSxTQUFDSyxFQUFxQixDQUNuREEsRUFBc0IsUUFBUSxvQkFDMUJBLEVBQXNCLEtBQ3RCQSxFQUFzQixPQUFPLENBRXJDLENBQUMsRUFDRCxLQUFLLHdCQUEwQixDQUFBLENBQ25DLEVBRUFMLEVBQUEsVUFBQSw2QkFBQSxVQUFBLENBQ0ksT0FBTyxLQUFLLHVCQUNoQixFQUVBQSxFQUFBLFVBQUEsYUFBQSxTQUFhdkYsRUFBb0IsQ0FDN0IsS0FBSyxTQUFTLE9BQVNBLENBQzNCLEVBRUF1RixFQUFBLFVBQUEsYUFBQSxTQUFhdkYsRUFBb0IsQ0FDN0IsS0FBSyxTQUFTLE9BQVNBLENBQzNCLEVBRUF1RixFQUFBLFVBQUEsZUFBQSxTQUFldkYsRUFBb0IsQ0FDL0IsS0FBSyxTQUFTLFNBQVdBLENBQzdCLEVBQ0p1RixDQUFBLEVBQUMsRUFFRCxTQUFnQk0sR0FBVyxDQUN2QixTQUFTLGlCQUFpQixzQkFBc0IsRUFBRSxRQUFRLFNBQUN6RCxFQUFVLENBRWpFLElBQU0wRCxFQUFXMUQsRUFBVyxhQUFhLG9CQUFvQixFQUN2RDJELEVBQVksU0FBUyxlQUFlRCxDQUFRLEVBRWxELEdBQUlDLEVBQVcsQ0FDWCxJQUFNeHpCLEVBQVk2dkIsRUFBVyxhQUFhLHVCQUF1QixFQUMzRDRELEVBQWdCNUQsRUFBVyxhQUM3Qiw0QkFBNEIsRUFFMUI2RCxFQUFXN0QsRUFBVyxhQUFhLHNCQUFzQixFQUN6RDhELEVBQU85RCxFQUFXLGFBQWEsa0JBQWtCLEVBQ2pEK0QsRUFBYS9ELEVBQVcsYUFDMUIseUJBQXlCLEVBRzdCLElBQUltRCxFQUFPUSxFQUFXLENBQ2xCLFVBQVd4ekIsR0FBd0IrdUIsRUFBUSxVQUMzQyxjQUFlMEUsRUFDVEEsSUFBa0IsT0FHbEIxRSxFQUFRLGNBQ2QsU0FBVTJFLEVBQ0pBLElBQWEsT0FHYjNFLEVBQVEsU0FDZCxLQUFNNEUsRUFBUUEsSUFBUyxPQUF5QjVFLEVBQVEsS0FDeEQsV0FBWTZFLEdBQTBCN0UsRUFBUSxXQUNoQyxPQUVsQixRQUFRLE1BQ0osa0JBQUEsT0FBa0J3RSxFQUFRLGlHQUFBLENBQWlHLENBR3ZJLENBQUMsRUFFRCxTQUFTLGlCQUFpQixzQkFBc0IsRUFBRSxRQUFRLFNBQUMxRCxFQUFVLENBQ2pFLElBQU0wRCxFQUFXMUQsRUFBVyxhQUFhLG9CQUFvQixFQUN2RDJELEVBQVksU0FBUyxlQUFlRCxDQUFRLEVBRWxELEdBQUlDLEVBQVcsQ0FDWCxJQUFNSyxFQUEwQmhGLEVBQUEsUUFBVSxZQUN0QyxTQUNBMEUsQ0FBUSxFQUdaLEdBQUlNLEVBQVEsQ0FDUixJQUFNQyxFQUFlLFVBQUEsQ0FDakJELEVBQU8sT0FBTSxDQUNqQixFQUNBaEUsRUFBVyxpQkFBaUIsUUFBU2lFLENBQVksRUFDakRELEVBQU8seUJBQ0hoRSxFQUNBLFFBQ0FpRSxDQUFZLE9BR2hCLFFBQVEsTUFDSixrQkFBQSxPQUFrQlAsRUFBUSx5RkFBQSxDQUF5RixPQUkzSCxRQUFRLE1BQ0osa0JBQUEsT0FBa0JBLEVBQVEsaUdBQUEsQ0FBaUcsQ0FHdkksQ0FBQyxFQUVELFNBQ0ssaUJBQWlCLDJDQUEyQyxFQUM1RCxRQUFRLFNBQUMxRCxFQUFVLENBQ2hCLElBQU0wRCxFQUFXMUQsRUFBVyxhQUFhLHFCQUFxQixFQUN4REEsRUFBVyxhQUFhLHFCQUFxQixFQUM3Q0EsRUFBVyxhQUFhLGtCQUFrQixFQUMxQzJELEVBQVksU0FBUyxlQUFlRCxDQUFRLEVBRWxELEdBQUlDLEVBQVcsQ0FDWCxJQUFNTyxFQUEwQmxGLEVBQUEsUUFBVSxZQUN0QyxTQUNBMEUsQ0FBUSxFQUdaLEdBQUlRLEVBQVEsQ0FDUixJQUFNQyxFQUFhLFVBQUEsQ0FDZkQsRUFBTyxLQUFJLENBQ2YsRUFDQWxFLEVBQVcsaUJBQWlCLFFBQVNtRSxDQUFVLEVBQy9DRCxFQUFPLHlCQUNIbEUsRUFDQSxRQUNBbUUsQ0FBVSxPQUdkLFFBQVEsTUFDSixrQkFBQSxPQUFrQlQsRUFBUSx5RkFBQSxDQUF5RixPQUkzSCxRQUFRLE1BQ0osa0JBQUEsT0FBa0JBLEVBQVEsZ0dBQUEsQ0FBZ0csQ0FHdEksQ0FBQyxFQUVMLFNBQVMsaUJBQWlCLG9CQUFvQixFQUFFLFFBQVEsU0FBQzFELEVBQVUsQ0FDL0QsSUFBTTBELEVBQVcxRCxFQUFXLGFBQWEsa0JBQWtCLEVBQ3JEMkQsRUFBWSxTQUFTLGVBQWVELENBQVEsRUFFbEQsR0FBSUMsRUFBVyxDQUNYLElBQU1TLEVBQTBCcEYsRUFBQSxRQUFVLFlBQ3RDLFNBQ0EwRSxDQUFRLEVBR1osR0FBSVUsRUFBUSxDQUNSLElBQU1DLEVBQWEsVUFBQSxDQUNmRCxFQUFPLEtBQUksQ0FDZixFQUNBcEUsRUFBVyxpQkFBaUIsUUFBU3FFLENBQVUsRUFDL0NELEVBQU8seUJBQ0hwRSxFQUNBLFFBQ0FxRSxDQUFVLE9BR2QsUUFBUSxNQUNKLGtCQUFBLE9BQWtCWCxFQUFRLHlGQUFBLENBQXlGLE9BSTNILFFBQVEsTUFDSixrQkFBQSxPQUFrQkEsRUFBUSxpR0FBQSxDQUFpRyxDQUd2SSxDQUFDLENBQ0wsQ0ExSUF6MEIsRUFBQSxZQUFBdzBCLEVBNElJLE9BQU8sT0FBVyxNQUNsQixPQUFPLE9BQVNOLEVBQ2hCLE9BQU8sWUFBY00sR0FHekJ4MEIsRUFBQSxRQUFlazBCLDJpQkMzY2YsSUFBQW1CLEVBQUFyRixFQUFBLEdBQUEsRUFRQUQsRUFBQUMsRUFBQSxHQUFBLEVBRU1DLEVBQTJCLENBQzdCLFVBQVcsU0FDWCxZQUFhLFFBQ2IsZUFBZ0IsRUFDaEIsZUFBZ0IsR0FDaEIsTUFBTyxJQUNQLHdCQUF5QixHQUN6QixPQUFRLFVBQUEsQ0FBTyxFQUNmLE9BQVEsVUFBQSxDQUFPLEVBQ2YsU0FBVSxVQUFBLENBQU8sR0FHZkMsRUFBMEMsQ0FDNUMsR0FBSSxLQUNKLFNBQVUsSUFHZG9GLEVBQUEsVUFBQSxDQWNJLFNBQUFBLEVBQ0lDLEVBQ0FDLEVBQ0ExdUIsRUFDQXVwQixFQUF5RCxDQUh6RGtGLElBQUEsU0FBQUEsRUFBQSxNQUNBQyxJQUFBLFNBQUFBLEVBQUEsTUFDQTF1QixJQUFBLFNBQUFBLEVBQUFtcEIsR0FDQUksSUFBQSxTQUFBQSxFQUFBSCxHQUVBLEtBQUssWUFBY0csRUFBZ0IsR0FDN0JBLEVBQWdCLEdBQ2hCa0YsRUFBYyxHQUNwQixLQUFLLFVBQVlBLEVBQ2pCLEtBQUssV0FBYUMsRUFDbEIsS0FBSyxTQUFRbEYsRUFBQUEsRUFBQSxDQUFBLEVBQVFMLENBQU8sRUFBS25wQixDQUFPLEVBQ3hDLEtBQUssZ0JBQWtCLEtBQ3ZCLEtBQUssU0FBVyxHQUNoQixLQUFLLGFBQWUsR0FDcEIsS0FBSyxLQUFJLEVBQ1RpcEIsRUFBQSxRQUFVLFlBQ04sV0FDQSxLQUNBLEtBQUssWUFDTE0sRUFBZ0IsUUFBUSxDQUVoQyxDQUVBLE9BQUFpRixFQUFBLFVBQUEsS0FBQSxVQUFBLENBQ1EsS0FBSyxZQUFjLEtBQUssV0FBYSxDQUFDLEtBQUssZUFDM0MsS0FBSyxnQkFBa0IsS0FBSyxzQkFBcUIsRUFDakQsS0FBSyxxQkFBb0IsRUFDekIsS0FBSyxhQUFlLEdBRTVCLEVBRUFBLEVBQUEsVUFBQSxRQUFBLFVBQUEsQ0FBQSxJQUFBOVAsRUFBQSxLQUNVaVEsRUFBZ0IsS0FBSyxrQkFBaUIsRUFHeEMsS0FBSyxTQUFTLGNBQWdCLFNBQzlCQSxFQUFjLFdBQVcsUUFBUSxTQUFDN1QsRUFBRSxDQUNoQzRELEVBQUssV0FBVyxvQkFBb0I1RCxFQUFJNEQsRUFBSyxhQUFhLENBQzlELENBQUMsRUFJRCxLQUFLLFNBQVMsY0FBZ0IsVUFDOUJpUSxFQUFjLFdBQVcsUUFBUSxTQUFDN1QsRUFBRSxDQUNoQzRELEVBQUssV0FBVyxvQkFDWjVELEVBQ0E0RCxFQUFLLDBCQUEwQixFQUVuQ0EsRUFBSyxVQUFVLG9CQUNYNUQsRUFDQTRELEVBQUsseUJBQXlCLENBRXRDLENBQUMsRUFFRGlRLEVBQWMsV0FBVyxRQUFRLFNBQUM3VCxFQUFFLENBQ2hDNEQsRUFBSyxXQUFXLG9CQUFvQjVELEVBQUk0RCxFQUFLLGlCQUFpQixFQUM5REEsRUFBSyxVQUFVLG9CQUFvQjVELEVBQUk0RCxFQUFLLGlCQUFpQixDQUNqRSxDQUFDLEdBR0wsS0FBSyxnQkFBZ0IsUUFBTyxFQUM1QixLQUFLLGFBQWUsRUFDeEIsRUFFQThQLEVBQUEsVUFBQSxlQUFBLFVBQUEsQ0FDSXZGLEVBQUEsUUFBVSxlQUFlLFdBQVksS0FBSyxXQUFXLENBQ3pELEVBRUF1RixFQUFBLFVBQUEseUJBQUEsVUFBQSxDQUNJLEtBQUssUUFBTyxFQUNaLEtBQUssZUFBYyxDQUN2QixFQUVBQSxFQUFBLFVBQUEscUJBQUEsVUFBQSxDQUFBLElBQUE5UCxFQUFBLEtBQ1VpUSxFQUFnQixLQUFLLGtCQUFpQixFQUU1QyxLQUFLLGNBQWdCLFVBQUEsQ0FDakJqUSxFQUFLLE9BQU0sQ0FDZixFQUdJLEtBQUssU0FBUyxjQUFnQixTQUM5QmlRLEVBQWMsV0FBVyxRQUFRLFNBQUM3VCxFQUFFLENBQ2hDNEQsRUFBSyxXQUFXLGlCQUFpQjVELEVBQUk0RCxFQUFLLGFBQWEsQ0FDM0QsQ0FBQyxFQUdMLEtBQUssMkJBQTZCLFNBQUM1RCxFQUFFLENBQzdCQSxFQUFHLE9BQVMsUUFDWjRELEVBQUssT0FBTSxFQUVYLFdBQVcsVUFBQSxDQUNQQSxFQUFLLEtBQUksQ0FDYixFQUFHQSxFQUFLLFNBQVMsS0FBSyxDQUU5QixFQUNBLEtBQUssMEJBQTRCLFVBQUEsQ0FDN0JBLEVBQUssS0FBSSxDQUNiLEVBRUEsS0FBSyxrQkFBb0IsVUFBQSxDQUNyQixXQUFXLFVBQUEsQ0FDRkEsRUFBSyxVQUFVLFFBQVEsUUFBUSxHQUNoQ0EsRUFBSyxLQUFJLENBRWpCLEVBQUdBLEVBQUssU0FBUyxLQUFLLENBQzFCLEVBR0ksS0FBSyxTQUFTLGNBQWdCLFVBQzlCaVEsRUFBYyxXQUFXLFFBQVEsU0FBQzdULEVBQUUsQ0FDaEM0RCxFQUFLLFdBQVcsaUJBQ1o1RCxFQUNBNEQsRUFBSywwQkFBMEIsRUFFbkNBLEVBQUssVUFBVSxpQkFDWDVELEVBQ0E0RCxFQUFLLHlCQUF5QixDQUV0QyxDQUFDLEVBRURpUSxFQUFjLFdBQVcsUUFBUSxTQUFDN1QsRUFBRSxDQUNoQzRELEVBQUssV0FBVyxpQkFBaUI1RCxFQUFJNEQsRUFBSyxpQkFBaUIsRUFDM0RBLEVBQUssVUFBVSxpQkFBaUI1RCxFQUFJNEQsRUFBSyxpQkFBaUIsQ0FDOUQsQ0FBQyxFQUVULEVBRUE4UCxFQUFBLFVBQUEsc0JBQUEsVUFBQSxDQUNJLFNBQU9ELEVBQUEsY0FBYSxLQUFLLFdBQVksS0FBSyxVQUFXLENBQ2pELFVBQVcsS0FBSyxTQUFTLFVBQ3pCLFVBQVcsQ0FDUCxDQUNJLEtBQU0sU0FDTixRQUFTLENBQ0wsT0FBUSxDQUNKLEtBQUssU0FBUyxlQUNkLEtBQUssU0FBUyxtQkFLakMsQ0FDTCxFQUVBQyxFQUFBLFVBQUEsMkJBQUEsVUFBQSxDQUFBLElBQUE5UCxFQUFBLEtBQ0ksS0FBSywyQkFBNkIsU0FBQzVELEVBQWMsQ0FDN0M0RCxFQUFLLG9CQUFvQjVELEVBQUk0RCxFQUFLLFNBQVMsQ0FDL0MsRUFDQSxTQUFTLEtBQUssaUJBQ1YsUUFDQSxLQUFLLDJCQUNMLEVBQUksQ0FFWixFQUVBOFAsRUFBQSxVQUFBLDRCQUFBLFVBQUEsQ0FDSSxTQUFTLEtBQUssb0JBQ1YsUUFDQSxLQUFLLDJCQUNMLEVBQUksQ0FFWixFQUVBQSxFQUFBLFVBQUEsb0JBQUEsU0FBb0IxVCxFQUFXd1EsRUFBcUIsQ0FDaEQsSUFBTXNELEVBQVk5VCxFQUFHLE9BR2YrVCxFQUEwQixLQUFLLFNBQVMsd0JBRTFDQyxFQUFZLEdBQ2hCLEdBQUlELEVBQXlCLENBQ3pCLElBQU1FLEVBQXlCLFNBQVMsaUJBQ3BDLElBQUEsT0FBSUYsQ0FBdUIsQ0FBRSxFQUVqQ0UsRUFBdUIsUUFBUSxTQUFDblUsRUFBRSxDQUM5QixHQUFJQSxFQUFHLFNBQVNnVSxDQUFTLEVBQUcsQ0FDeEJFLEVBQVksR0FDWixPQUVSLENBQUMsRUFLREYsSUFBY3RELEdBQ2QsQ0FBQ0EsRUFBUyxTQUFTc0QsQ0FBUyxHQUM1QixDQUFDLEtBQUssV0FBVyxTQUFTQSxDQUFTLEdBQ25DLENBQUNFLEdBQ0QsS0FBSyxVQUFTLEdBRWQsS0FBSyxLQUFJLENBRWpCLEVBRUFOLEVBQUEsVUFBQSxrQkFBQSxVQUFBLENBQ0ksT0FBUSxLQUFLLFNBQVMsWUFBYSxDQUMvQixJQUFLLFFBQ0QsTUFBTyxDQUNILFdBQVksQ0FBQyxhQUFjLE9BQU8sRUFDbEMsV0FBWSxDQUFDLFlBQVksR0FFakMsSUFBSyxRQUNELE1BQU8sQ0FDSCxXQUFZLENBQUMsT0FBTyxFQUNwQixXQUFZLENBQUEsR0FFcEIsSUFBSyxPQUNELE1BQU8sQ0FDSCxXQUFZLENBQUEsRUFDWixXQUFZLENBQUEsR0FFcEIsUUFDSSxNQUFPLENBQ0gsV0FBWSxDQUFDLE9BQU8sRUFDcEIsV0FBWSxDQUFBLEdBRzVCLEVBRUFBLEVBQUEsVUFBQSxPQUFBLFVBQUEsQ0FDUSxLQUFLLFVBQVMsRUFDZCxLQUFLLEtBQUksRUFFVCxLQUFLLEtBQUksRUFFYixLQUFLLFNBQVMsU0FBUyxJQUFJLENBQy9CLEVBRUFBLEVBQUEsVUFBQSxVQUFBLFVBQUEsQ0FDSSxPQUFPLEtBQUssUUFDaEIsRUFFQUEsRUFBQSxVQUFBLEtBQUEsVUFBQSxDQUNJLEtBQUssVUFBVSxVQUFVLE9BQU8sUUFBUSxFQUN4QyxLQUFLLFVBQVUsVUFBVSxJQUFJLE9BQU8sRUFDcEMsS0FBSyxVQUFVLGdCQUFnQixhQUFhLEVBRzVDLEtBQUssZ0JBQWdCLFdBQVcsU0FBQ3h1QixFQUFzQixDQUFLLE9BQUF3cEIsRUFBQUEsRUFBQSxDQUFBLEVBQ3JEeHBCLENBQU8sRUFBQSxDQUNWLFVBQVNndkIsRUFBQUEsRUFBQSxDQUFBLEVBQ0ZodkIsRUFBUSxVQUFTLEVBQUEsRUFBQSxDQUNwQixDQUFFLEtBQU0saUJBQWtCLFFBQVMsRUFBSSxRQUphLENBTTFELEVBRUYsS0FBSywyQkFBMEIsRUFHL0IsS0FBSyxnQkFBZ0IsT0FBTSxFQUMzQixLQUFLLFNBQVcsR0FHaEIsS0FBSyxTQUFTLE9BQU8sSUFBSSxDQUM3QixFQUVBd3VCLEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FDSSxLQUFLLFVBQVUsVUFBVSxPQUFPLE9BQU8sRUFDdkMsS0FBSyxVQUFVLFVBQVUsSUFBSSxRQUFRLEVBQ3JDLEtBQUssVUFBVSxhQUFhLGNBQWUsTUFBTSxFQUdqRCxLQUFLLGdCQUFnQixXQUFXLFNBQUN4dUIsRUFBc0IsQ0FBSyxPQUFBd3BCLEVBQUFBLEVBQUEsQ0FBQSxFQUNyRHhwQixDQUFPLEVBQUEsQ0FDVixVQUFTZ3ZCLEVBQUFBLEVBQUEsQ0FBQSxFQUNGaHZCLEVBQVEsVUFBUyxFQUFBLEVBQUEsQ0FDcEIsQ0FBRSxLQUFNLGlCQUFrQixRQUFTLEVBQUssUUFKWSxDQU0xRCxFQUVGLEtBQUssU0FBVyxHQUVoQixLQUFLLDRCQUEyQixFQUdoQyxLQUFLLFNBQVMsT0FBTyxJQUFJLENBQzdCLEVBRUF3dUIsRUFBQSxVQUFBLGFBQUEsU0FBYTNHLEVBQW9CLENBQzdCLEtBQUssU0FBUyxPQUFTQSxDQUMzQixFQUVBMkcsRUFBQSxVQUFBLGFBQUEsU0FBYTNHLEVBQW9CLENBQzdCLEtBQUssU0FBUyxPQUFTQSxDQUMzQixFQUVBMkcsRUFBQSxVQUFBLGVBQUEsU0FBZTNHLEVBQW9CLENBQy9CLEtBQUssU0FBUyxTQUFXQSxDQUM3QixFQUNKMkcsQ0FBQSxFQUFDLEVBRUQsU0FBZ0JTLEdBQWEsQ0FDekIsU0FDSyxpQkFBaUIsd0JBQXdCLEVBQ3pDLFFBQVEsU0FBQ2hGLEVBQVUsQ0FDaEIsSUFBTWlGLEVBQWFqRixFQUFXLGFBQWEsc0JBQXNCLEVBQzNEa0YsRUFBYyxTQUFTLGVBQWVELENBQVUsRUFFdEQsR0FBSUMsRUFBYSxDQUNiLElBQU0vMEIsRUFBWTZ2QixFQUFXLGFBQ3pCLHlCQUF5QixFQUV2Qm1GLEVBQWlCbkYsRUFBVyxhQUM5QiwrQkFBK0IsRUFFN0JvRixFQUFpQnBGLEVBQVcsYUFDOUIsK0JBQStCLEVBRTdCMkMsRUFBYzNDLEVBQVcsYUFDM0IsdUJBQXVCLEVBRXJCcUYsRUFBUXJGLEVBQVcsYUFBYSxxQkFBcUIsRUFDckQ0RSxFQUEwQjVFLEVBQVcsYUFDdkMsMENBQTBDLEVBRzlDLElBQUl1RSxFQUNBVyxFQUNBbEYsRUFDQSxDQUNJLFVBQVc3dkIsR0FBd0IrdUIsRUFBUSxVQUMzQyxZQUFheUQsR0FFUHpELEVBQVEsWUFDZCxlQUFnQmlHLEVBQ1YsU0FBU0EsQ0FBYyxFQUN2QmpHLEVBQVEsZUFDZCxlQUFnQmtHLEVBQ1YsU0FBU0EsQ0FBYyxFQUN2QmxHLEVBQVEsZUFDZCxNQUFPbUcsRUFBUSxTQUFTQSxDQUFLLEVBQUluRyxFQUFRLE1BQ3pDLHdCQUF5QjBGLEdBRW5CMUYsRUFBUSx3QkFDRSxPQUd4QixRQUFRLE1BQ0osaUNBQUEsT0FBaUMrRixFQUFVLG9FQUFBLENBQW9FLENBRzNILENBQUMsQ0FDVCxDQW5EQWgyQixFQUFBLGNBQUErMUIsRUFxREksT0FBTyxPQUFXLE1BQ2xCLE9BQU8sU0FBV1QsRUFDbEIsT0FBTyxjQUFnQlMsR0FHM0IvMUIsRUFBQSxRQUFlczFCLDhGQ3pZZixJQUFBZSxFQUFBckcsRUFBQSxHQUFBLEVBQ0FzRyxFQUFBdEcsRUFBQSxFQUFBLEVBQ0F1RyxFQUFBdkcsRUFBQSxHQUFBLEVBQ0F3RyxFQUFBeEcsRUFBQSxHQUFBLEVBQ0F5RyxFQUFBekcsRUFBQSxHQUFBLEVBQ0EwRyxFQUFBMUcsRUFBQSxHQUFBLEVBQ0ErRSxFQUFBL0UsRUFBQSxHQUFBLEVBQ0EyRyxFQUFBM0csRUFBQSxHQUFBLEVBQ0E0RyxFQUFBNUcsRUFBQSxHQUFBLEVBQ0E2RyxFQUFBN0csRUFBQSxFQUFBLEVBQ0E4RyxFQUFBOUcsRUFBQSxHQUFBLEVBQ0ErRyxFQUFBL0csRUFBQSxHQUFBLEVBQ0FnSCxFQUFBaEgsRUFBQSxHQUFBLEVBQ0FpSCxFQUFBakgsRUFBQSxHQUFBLEVBRUEsU0FBZ0JrSCxHQUFZLElBQ3hCYixFQUFBLGdCQUFjLEtBQ2RHLEVBQUEsZUFBYSxLQUNiRixFQUFBLGVBQWEsS0FDYkksRUFBQSxlQUFhLEtBQ2JDLEVBQUEsZUFBYSxLQUNiRSxFQUFBLFlBQVUsS0FDVjlCLEVBQUEsYUFBVyxLQUNYZ0MsRUFBQSxVQUFRLEtBQ1JDLEVBQUEsY0FBWSxLQUNaRixFQUFBLGNBQVksS0FDWkwsRUFBQSxXQUFTLEtBQ1RHLEVBQUEsbUJBQWlCLEtBQ2pCTCxFQUFBLG9CQUFrQixLQUNsQlUsRUFBQSxpQkFBZSxDQUNuQixDQWZBajNCLEVBQUEsYUFBQWszQixFQWlCSSxPQUFPLE9BQVcsTUFDbEIsT0FBTyxhQUFlQSxnVkM3QjFCLElBQUFuSCxFQUFBQyxFQUFBLEdBQUEsRUFFTUMsRUFBK0IsQ0FDakMsU0FBVSxLQUNWLFNBQVUsS0FDVixZQUFhLFVBQUEsQ0FBTyxFQUNwQixZQUFhLFVBQUEsQ0FBTyxHQUdsQkMsRUFBMEMsQ0FDNUMsR0FBSSxLQUNKLFNBQVUsSUFHZGlILEVBQUEsVUFBQSxDQVdJLFNBQUFBLEVBQ0kvRSxFQUNBZ0YsRUFDQUMsRUFDQXZ3QixFQUNBdXBCLEVBQXlELENBSnpEK0IsSUFBQSxTQUFBQSxFQUFBLE1BQ0FnRixJQUFBLFNBQUFBLEVBQUEsTUFDQUMsSUFBQSxTQUFBQSxFQUFBLE1BQ0F2d0IsSUFBQSxTQUFBQSxFQUFBbXBCLEdBQ0FJLElBQUEsU0FBQUEsRUFBQUgsR0FFQSxLQUFLLFlBQWNHLEVBQWdCLEdBQzdCQSxFQUFnQixHQUNoQitCLEVBQVMsR0FFZixLQUFLLFVBQVlBLEVBQ2pCLEtBQUssYUFBZWdGLEVBQ3BCLEtBQUssYUFBZUMsRUFDcEIsS0FBSyxTQUFRL0csRUFBQUEsRUFBQSxDQUFBLEVBQVFMLENBQU8sRUFBS25wQixDQUFPLEVBQ3hDLEtBQUssYUFBZSxHQUVwQixLQUFLLEtBQUksRUFDVGlwQixFQUFBLFFBQVUsWUFDTixlQUNBLEtBQ0EsS0FBSyxZQUNMTSxFQUFnQixRQUFRLENBRWhDLENBRUEsT0FBQThHLEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FBQSxJQUFBM1IsRUFBQSxLQUNRLEtBQUssV0FBYSxDQUFDLEtBQUssZUFDeEIsS0FBSyxjQUFnQixTQUFDNE8sRUFBSyxDQUN2QixDQUNJLElBQU16bkIsRUFBU3luQixFQUFNLE9BR2hCLFFBQVEsS0FBS3puQixFQUFPLEtBQUssSUFFMUJBLEVBQU8sTUFBUUEsRUFBTyxNQUFNLFFBQVEsU0FBVSxFQUFFLEdBS2hENlksRUFBSyxTQUFTLFdBQWEsTUFDM0IsU0FBUzdZLEVBQU8sS0FBSyxFQUFJNlksRUFBSyxTQUFTLFdBRXZDN1ksRUFBTyxNQUFRNlksRUFBSyxTQUFTLFNBQVMsU0FBUSxHQUs5Q0EsRUFBSyxTQUFTLFdBQWEsTUFDM0IsU0FBUzdZLEVBQU8sS0FBSyxFQUFJNlksRUFBSyxTQUFTLFdBRXZDN1ksRUFBTyxNQUFRNlksRUFBSyxTQUFTLFNBQVMsU0FBUSxHQUcxRCxFQUVBLEtBQUssdUJBQXlCLFVBQUEsQ0FDMUJBLEVBQUssVUFBUyxDQUNsQixFQUVBLEtBQUssdUJBQXlCLFVBQUEsQ0FDMUJBLEVBQUssVUFBUyxDQUNsQixFQUdBLEtBQUssVUFBVSxpQkFBaUIsUUFBUyxLQUFLLGFBQWEsRUFFdkQsS0FBSyxjQUNMLEtBQUssYUFBYSxpQkFDZCxRQUNBLEtBQUssc0JBQXNCLEVBSS9CLEtBQUssY0FDTCxLQUFLLGFBQWEsaUJBQ2QsUUFDQSxLQUFLLHNCQUFzQixFQUluQyxLQUFLLGFBQWUsR0FFNUIsRUFFQTJSLEVBQUEsVUFBQSxRQUFBLFVBQUEsQ0FDUSxLQUFLLFdBQWEsS0FBSyxlQUN2QixLQUFLLFVBQVUsb0JBQW9CLFFBQVMsS0FBSyxhQUFhLEVBRTFELEtBQUssY0FDTCxLQUFLLGFBQWEsb0JBQ2QsUUFDQSxLQUFLLHNCQUFzQixFQUcvQixLQUFLLGNBQ0wsS0FBSyxhQUFhLG9CQUNkLFFBQ0EsS0FBSyxzQkFBc0IsRUFHbkMsS0FBSyxhQUFlLEdBRTVCLEVBRUFBLEVBQUEsVUFBQSxlQUFBLFVBQUEsQ0FDSXBILEVBQUEsUUFBVSxlQUFlLGVBQWdCLEtBQUssV0FBVyxDQUM3RCxFQUVBb0gsRUFBQSxVQUFBLHlCQUFBLFVBQUEsQ0FDSSxLQUFLLFFBQU8sRUFDWixLQUFLLGVBQWMsQ0FDdkIsRUFFQUEsRUFBQSxVQUFBLGdCQUFBLFVBQUEsQ0FDSSxPQUFPLFNBQVMsS0FBSyxVQUFVLEtBQUssR0FBSyxDQUM3QyxFQUVBQSxFQUFBLFVBQUEsVUFBQSxVQUFBLENBR1EsS0FBSyxTQUFTLFdBQWEsTUFDM0IsS0FBSyxnQkFBZSxHQUFNLEtBQUssU0FBUyxXQUs1QyxLQUFLLFVBQVUsT0FBUyxLQUFLLGdCQUFlLEVBQUssR0FBRyxTQUFRLEVBQzVELEtBQUssU0FBUyxZQUFZLElBQUksRUFDbEMsRUFFQUEsRUFBQSxVQUFBLFVBQUEsVUFBQSxDQUdRLEtBQUssU0FBUyxXQUFhLE1BQzNCLEtBQUssZ0JBQWUsR0FBTSxLQUFLLFNBQVMsV0FLNUMsS0FBSyxVQUFVLE9BQVMsS0FBSyxnQkFBZSxFQUFLLEdBQUcsU0FBUSxFQUM1RCxLQUFLLFNBQVMsWUFBWSxJQUFJLEVBQ2xDLEVBRUFBLEVBQUEsVUFBQSxrQkFBQSxTQUFrQnhJLEVBQW9CLENBQ2xDLEtBQUssU0FBUyxZQUFjQSxDQUNoQyxFQUVBd0ksRUFBQSxVQUFBLGtCQUFBLFNBQWtCeEksRUFBb0IsQ0FDbEMsS0FBSyxTQUFTLFlBQWNBLENBQ2hDLEVBQ0p3SSxDQUFBLEVBQUMsRUFFRCxTQUFnQkcsR0FBaUIsQ0FDN0IsU0FBUyxpQkFBaUIsc0JBQXNCLEVBQUUsUUFBUSxTQUFDNUUsRUFBUyxDQUNoRSxJQUFNRCxFQUFXQyxFQUFVLEdBRXJCNkUsRUFBZSxTQUFTLGNBQzFCLGtDQUFvQzlFLEVBQVcsSUFBSSxFQUdqRCtFLEVBQWUsU0FBUyxjQUMxQixrQ0FBb0MvRSxFQUFXLElBQUksRUFHakRnRixFQUFXL0UsRUFBVSxhQUFhLHdCQUF3QixFQUMxRGdGLEVBQVdoRixFQUFVLGFBQWEsd0JBQXdCLEVBRzVEQSxFQUVLM0MsRUFBQSxRQUFVLGVBQ1AsZUFDQTJDLEVBQVUsYUFBYSxJQUFJLENBQUMsR0FHaEMsSUFBSXlFLEVBQ0F6RSxFQUNBNkUsR0FBK0MsS0FDL0NDLEdBQStDLEtBQy9DLENBQ0ksU0FBVUMsRUFBVyxTQUFTQSxDQUFRLEVBQUksS0FDMUMsU0FBVUMsRUFBVyxTQUFTQSxDQUFRLEVBQUksS0FDdEIsRUFJaEMsUUFBUSxNQUNKLCtCQUFBLE9BQStCakYsRUFBUSxrRUFBQSxDQUFrRSxDQUdySCxDQUFDLENBQ0wsQ0F2Q0F6eUIsRUFBQSxrQkFBQXMzQixFQXlDSSxPQUFPLE9BQVcsTUFDbEIsT0FBTyxhQUFlSCxFQUN0QixPQUFPLGtCQUFvQkcsR0FHL0J0M0IsRUFBQSxRQUFlbTNCLHVVQ2hPZixJQUFBcEgsRUFBQUMsRUFBQSxHQUFBLEVBRU1DLEVBQXdCLENBQzFCLFVBQVcsU0FDWCxnQkFBaUIsd0RBQ2pCLFNBQVUsVUFDVixTQUFVLEdBQ1YsT0FBUSxVQUFBLENBQU8sRUFDZixPQUFRLFVBQUEsQ0FBTyxFQUNmLFNBQVUsVUFBQSxDQUFPLEdBR2ZDLEVBQTBDLENBQzVDLEdBQUksS0FDSixTQUFVLElBR2R5SCxFQUFBLFVBQUEsQ0FXSSxTQUFBQSxFQUNJdkYsRUFDQXRyQixFQUNBdXBCLEVBQXlELENBRnpEK0IsSUFBQSxTQUFBQSxFQUFBLE1BQ0F0ckIsSUFBQSxTQUFBQSxFQUFBbXBCLEdBQ0FJLElBQUEsU0FBQUEsRUFBQUgsR0FOSixLQUFBLHdCQUFtRCxDQUFBLEVBUS9DLEtBQUssWUFBY0csRUFBZ0IsR0FDN0JBLEVBQWdCLEdBQ2hCK0IsRUFBUyxHQUNmLEtBQUssVUFBWUEsRUFDakIsS0FBSyxTQUFROUIsRUFBQUEsRUFBQSxDQUFBLEVBQVFMLENBQU8sRUFBS25wQixDQUFPLEVBQ3hDLEtBQUssVUFBWSxHQUNqQixLQUFLLFlBQWMsS0FDbkIsS0FBSyxhQUFlLEdBQ3BCLEtBQUssS0FBSSxFQUNUaXBCLEVBQUEsUUFBVSxZQUNOLFFBQ0EsS0FDQSxLQUFLLFlBQ0xNLEVBQWdCLFFBQVEsQ0FFaEMsQ0FFQSxPQUFBc0gsRUFBQSxVQUFBLEtBQUEsVUFBQSxDQUFBLElBQUFuUyxFQUFBLEtBQ1EsS0FBSyxXQUFhLENBQUMsS0FBSyxlQUN4QixLQUFLLHFCQUFvQixFQUFHLElBQUksU0FBQzJPLEVBQUMsQ0FDOUIzTyxFQUFLLFVBQVUsVUFBVSxJQUFJMk8sQ0FBQyxDQUNsQyxDQUFDLEVBQ0QsS0FBSyxhQUFlLEdBRTVCLEVBRUF3RCxFQUFBLFVBQUEsUUFBQSxVQUFBLENBQ1EsS0FBSyxlQUNMLEtBQUssZ0NBQStCLEVBQ3BDLEtBQUssbUJBQWtCLEVBQ3ZCLEtBQUssYUFBZSxHQUU1QixFQUVBQSxFQUFBLFVBQUEsZUFBQSxVQUFBLENBQ0k1SCxFQUFBLFFBQVUsZUFBZSxRQUFTLEtBQUssV0FBVyxDQUN0RCxFQUVBNEgsRUFBQSxVQUFBLHlCQUFBLFVBQUEsQ0FDSSxLQUFLLFFBQU8sRUFDWixLQUFLLGVBQWMsQ0FDdkIsRUFFQUEsRUFBQSxVQUFBLGdCQUFBLFVBQUEsT0FDSSxHQUFJLEtBQUssVUFBVyxDQUNoQixJQUFNdEQsRUFBYSxTQUFTLGNBQWMsS0FBSyxHQUMvQzdELEVBQUE2RCxFQUFXLFdBQVUsSUFBRyxNQUFBN0QsRUFDakIsS0FBSyxTQUFTLGdCQUFnQixNQUFNLEdBQUcsQ0FBQyxFQUUvQyxTQUFTLGNBQWMsTUFBTSxFQUFFLE9BQU82RCxDQUFVLEVBQ2hELEtBQUssWUFBY0EsRUFFM0IsRUFFQXNELEVBQUEsVUFBQSxtQkFBQSxVQUFBLENBQ1EsQ0FBQyxLQUFLLFdBQWEsS0FBSyxjQUN4QixLQUFLLFlBQVksT0FBTSxFQUN2QixLQUFLLFlBQWMsS0FFM0IsRUFFQUEsRUFBQSxVQUFBLCtCQUFBLFVBQUEsQ0FBQSxJQUFBblMsRUFBQSxLQUNRLEtBQUssU0FBUyxXQUFhLFlBQzNCLEtBQUssMkJBQTZCLFNBQUM1RCxFQUFjLENBQzdDNEQsRUFBSyxvQkFBb0I1RCxFQUFHLE1BQU0sQ0FDdEMsRUFDQSxLQUFLLFVBQVUsaUJBQ1gsUUFDQSxLQUFLLDJCQUNMLEVBQUksR0FJWixLQUFLLHNCQUF3QixTQUFDQSxFQUFpQixDQUN2Q0EsRUFBRyxNQUFRLFVBQ1g0RCxFQUFLLEtBQUksQ0FFakIsRUFDQSxTQUFTLEtBQUssaUJBQ1YsVUFDQSxLQUFLLHNCQUNMLEVBQUksQ0FFWixFQUVBbVMsRUFBQSxVQUFBLGdDQUFBLFVBQUEsQ0FDUSxLQUFLLFNBQVMsV0FBYSxXQUMzQixLQUFLLFVBQVUsb0JBQ1gsUUFDQSxLQUFLLDJCQUNMLEVBQUksRUFHWixTQUFTLEtBQUssb0JBQ1YsVUFDQSxLQUFLLHNCQUNMLEVBQUksQ0FFWixFQUVBQSxFQUFBLFVBQUEsb0JBQUEsU0FBb0JockIsRUFBbUIsRUFFL0JBLElBQVcsS0FBSyxXQUNmQSxJQUFXLEtBQUssYUFBZSxLQUFLLFVBQVMsSUFFOUMsS0FBSyxLQUFJLENBRWpCLEVBRUFnckIsRUFBQSxVQUFBLHFCQUFBLFVBQUEsQ0FDSSxPQUFRLEtBQUssU0FBUyxVQUFXLENBRTdCLElBQUssV0FDRCxNQUFPLENBQUMsZ0JBQWlCLGFBQWEsRUFDMUMsSUFBSyxhQUNELE1BQU8sQ0FBQyxpQkFBa0IsYUFBYSxFQUMzQyxJQUFLLFlBQ0QsTUFBTyxDQUFDLGNBQWUsYUFBYSxFQUd4QyxJQUFLLGNBQ0QsTUFBTyxDQUFDLGdCQUFpQixjQUFjLEVBQzNDLElBQUssU0FDRCxNQUFPLENBQUMsaUJBQWtCLGNBQWMsRUFDNUMsSUFBSyxlQUNELE1BQU8sQ0FBQyxjQUFlLGNBQWMsRUFHekMsSUFBSyxjQUNELE1BQU8sQ0FBQyxnQkFBaUIsV0FBVyxFQUN4QyxJQUFLLGdCQUNELE1BQU8sQ0FBQyxpQkFBa0IsV0FBVyxFQUN6QyxJQUFLLGVBQ0QsTUFBTyxDQUFDLGNBQWUsV0FBVyxFQUV0QyxRQUNJLE1BQU8sQ0FBQyxpQkFBa0IsY0FBYyxFQUVwRCxFQUVBQSxFQUFBLFVBQUEsT0FBQSxVQUFBLENBQ1EsS0FBSyxVQUNMLEtBQUssS0FBSSxFQUVULEtBQUssS0FBSSxFQUliLEtBQUssU0FBUyxTQUFTLElBQUksQ0FDL0IsRUFFQUEsRUFBQSxVQUFBLEtBQUEsVUFBQSxDQUNRLEtBQUssV0FDTCxLQUFLLFVBQVUsVUFBVSxJQUFJLE1BQU0sRUFDbkMsS0FBSyxVQUFVLFVBQVUsT0FBTyxRQUFRLEVBQ3hDLEtBQUssVUFBVSxhQUFhLGFBQWMsTUFBTSxFQUNoRCxLQUFLLFVBQVUsYUFBYSxPQUFRLFFBQVEsRUFDNUMsS0FBSyxVQUFVLGdCQUFnQixhQUFhLEVBQzVDLEtBQUssZ0JBQWUsRUFDcEIsS0FBSyxVQUFZLEdBR2IsS0FBSyxTQUFTLFVBQ2QsS0FBSywrQkFBOEIsRUFJdkMsU0FBUyxLQUFLLFVBQVUsSUFBSSxpQkFBaUIsRUFHN0MsS0FBSyxTQUFTLE9BQU8sSUFBSSxFQUVqQyxFQUVBQSxFQUFBLFVBQUEsS0FBQSxVQUFBLENBQ1EsS0FBSyxZQUNMLEtBQUssVUFBVSxVQUFVLElBQUksUUFBUSxFQUNyQyxLQUFLLFVBQVUsVUFBVSxPQUFPLE1BQU0sRUFDdEMsS0FBSyxVQUFVLGFBQWEsY0FBZSxNQUFNLEVBQ2pELEtBQUssVUFBVSxnQkFBZ0IsWUFBWSxFQUMzQyxLQUFLLFVBQVUsZ0JBQWdCLE1BQU0sRUFDckMsS0FBSyxtQkFBa0IsRUFDdkIsS0FBSyxVQUFZLEdBR2pCLFNBQVMsS0FBSyxVQUFVLE9BQU8saUJBQWlCLEVBRTVDLEtBQUssU0FBUyxVQUNkLEtBQUssZ0NBQStCLEVBSXhDLEtBQUssU0FBUyxPQUFPLElBQUksRUFFakMsRUFFQUEsRUFBQSxVQUFBLFVBQUEsVUFBQSxDQUNJLE1BQU8sQ0FBQyxLQUFLLFNBQ2pCLEVBRUFBLEVBQUEsVUFBQSxTQUFBLFVBQUEsQ0FDSSxPQUFPLEtBQUssU0FDaEIsRUFFQUEsRUFBQSxVQUFBLHlCQUFBLFNBQ0k1MUIsRUFDQWttQixFQUNBcU0sRUFBMkMsQ0FFM0MsS0FBSyx3QkFBd0IsS0FBSyxDQUM5QixRQUFTdnlCLEVBQ1QsS0FBTWttQixFQUNOLFFBQVNxTSxFQUNaLENBQ0wsRUFFQXFELEVBQUEsVUFBQSxnQ0FBQSxVQUFBLENBQ0ksS0FBSyx3QkFBd0IsSUFBSSxTQUFDcEQsRUFBcUIsQ0FDbkRBLEVBQXNCLFFBQVEsb0JBQzFCQSxFQUFzQixLQUN0QkEsRUFBc0IsT0FBTyxDQUVyQyxDQUFDLEVBQ0QsS0FBSyx3QkFBMEIsQ0FBQSxDQUNuQyxFQUVBb0QsRUFBQSxVQUFBLDZCQUFBLFVBQUEsQ0FDSSxPQUFPLEtBQUssdUJBQ2hCLEVBRUFBLEVBQUEsVUFBQSxhQUFBLFNBQWFoSixFQUFvQixDQUM3QixLQUFLLFNBQVMsT0FBU0EsQ0FDM0IsRUFFQWdKLEVBQUEsVUFBQSxhQUFBLFNBQWFoSixFQUFvQixDQUM3QixLQUFLLFNBQVMsT0FBU0EsQ0FDM0IsRUFFQWdKLEVBQUEsVUFBQSxlQUFBLFNBQWVoSixFQUFvQixDQUMvQixLQUFLLFNBQVMsU0FBV0EsQ0FDN0IsRUFDSmdKLENBQUEsRUFBQyxFQUVELFNBQWdCQyxHQUFVLENBRXRCLFNBQVMsaUJBQWlCLHFCQUFxQixFQUFFLFFBQVEsU0FBQzdHLEVBQVUsQ0FDaEUsSUFBTThHLEVBQVU5RyxFQUFXLGFBQWEsbUJBQW1CLEVBQ3JEK0csRUFBVyxTQUFTLGVBQWVELENBQU8sRUFFaEQsR0FBSUMsRUFBVSxDQUNWLElBQU01MkIsRUFBWTQyQixFQUFTLGFBQWEsc0JBQXNCLEVBQ3hEbEQsRUFBV2tELEVBQVMsYUFBYSxxQkFBcUIsRUFDNUQsSUFBSUgsRUFDQUcsRUFDQSxDQUNJLFVBQVc1MkIsR0FBd0IrdUIsRUFBUSxVQUMzQyxTQUFVMkUsR0FBc0IzRSxFQUFRLFNBQzNCLE9BR3JCLFFBQVEsTUFDSixpQkFBQSxPQUFpQjRILEVBQU8scUdBQUEsQ0FBcUcsQ0FHekksQ0FBQyxFQUdELFNBQVMsaUJBQWlCLHFCQUFxQixFQUFFLFFBQVEsU0FBQzlHLEVBQVUsQ0FDaEUsSUFBTThHLEVBQVU5RyxFQUFXLGFBQWEsbUJBQW1CLEVBQ3JEK0csRUFBVyxTQUFTLGVBQWVELENBQU8sRUFFaEQsR0FBSUMsRUFBVSxDQUNWLElBQU1qQixFQUF3QjlHLEVBQUEsUUFBVSxZQUNwQyxRQUNBOEgsQ0FBTyxFQUdYLEdBQUloQixFQUFPLENBQ1AsSUFBTWtCLEVBQWMsVUFBQSxDQUNoQmxCLEVBQU0sT0FBTSxDQUNoQixFQUNBOUYsRUFBVyxpQkFBaUIsUUFBU2dILENBQVcsRUFDaERsQixFQUFNLHlCQUNGOUYsRUFDQSxRQUNBZ0gsQ0FBVyxPQUdmLFFBQVEsTUFDSixpQkFBQSxPQUFpQkYsRUFBTyx3RkFBQSxDQUF3RixPQUl4SCxRQUFRLE1BQ0osaUJBQUEsT0FBaUJBLEVBQU8sb0dBQUEsQ0FBb0csQ0FHeEksQ0FBQyxFQUdELFNBQVMsaUJBQWlCLG1CQUFtQixFQUFFLFFBQVEsU0FBQzlHLEVBQVUsQ0FDOUQsSUFBTThHLEVBQVU5RyxFQUFXLGFBQWEsaUJBQWlCLEVBQ25EK0csRUFBVyxTQUFTLGVBQWVELENBQU8sRUFFaEQsR0FBSUMsRUFBVSxDQUNWLElBQU1FLEVBQXdCakksRUFBQSxRQUFVLFlBQ3BDLFFBQ0E4SCxDQUFPLEVBR1gsR0FBSUcsRUFBTyxDQUNQLElBQU1DLEVBQVksVUFBQSxDQUNkRCxFQUFNLEtBQUksQ0FDZCxFQUNBakgsRUFBVyxpQkFBaUIsUUFBU2tILENBQVMsRUFDOUNELEVBQU0seUJBQ0ZqSCxFQUNBLFFBQ0FrSCxDQUFTLE9BR2IsUUFBUSxNQUNKLGlCQUFBLE9BQWlCSixFQUFPLHdGQUFBLENBQXdGLE9BSXhILFFBQVEsTUFDSixpQkFBQSxPQUFpQkEsRUFBTyxrR0FBQSxDQUFrRyxDQUd0SSxDQUFDLEVBR0QsU0FBUyxpQkFBaUIsbUJBQW1CLEVBQUUsUUFBUSxTQUFDOUcsRUFBVSxDQUM5RCxJQUFNOEcsRUFBVTlHLEVBQVcsYUFBYSxpQkFBaUIsRUFDbkQrRyxFQUFXLFNBQVMsZUFBZUQsQ0FBTyxFQUVoRCxHQUFJQyxFQUFVLENBQ1YsSUFBTUksRUFBd0JuSSxFQUFBLFFBQVUsWUFDcEMsUUFDQThILENBQU8sRUFHWCxHQUFJSyxFQUFPLENBQ1AsSUFBTUMsRUFBWSxVQUFBLENBQ2RELEVBQU0sS0FBSSxDQUNkLEVBQ0FuSCxFQUFXLGlCQUFpQixRQUFTb0gsQ0FBUyxFQUM5Q0QsRUFBTSx5QkFDRm5ILEVBQ0EsUUFDQW9ILENBQVMsT0FHYixRQUFRLE1BQ0osaUJBQUEsT0FBaUJOLEVBQU8sd0ZBQUEsQ0FBd0YsT0FJeEgsUUFBUSxNQUNKLGlCQUFBLE9BQWlCQSxFQUFPLGtHQUFBLENBQWtHLENBR3RJLENBQUMsQ0FDTCxDQXpIQTczQixFQUFBLFdBQUE0M0IsRUEySEksT0FBTyxPQUFXLE1BQ2xCLE9BQU8sTUFBUUQsRUFDZixPQUFPLFdBQWFDLEdBR3hCNTNCLEVBQUEsUUFBZTIzQiwwaUJDdlpmLElBQUF0QyxFQUFBckYsRUFBQSxHQUFBLEVBUUFELEVBQUFDLEVBQUEsR0FBQSxFQUVNQyxFQUEwQixDQUM1QixVQUFXLE1BQ1gsT0FBUSxHQUNSLFlBQWEsUUFDYixPQUFRLFVBQUEsQ0FBTyxFQUNmLE9BQVEsVUFBQSxDQUFPLEVBQ2YsU0FBVSxVQUFBLENBQU8sR0FHZkMsRUFBMEMsQ0FDNUMsR0FBSSxLQUNKLFNBQVUsSUFHZGtJLEVBQUEsVUFBQSxDQWFJLFNBQUFBLEVBQ0loRyxFQUNBRCxFQUNBcnJCLEVBQ0F1cEIsRUFBeUQsQ0FIekQrQixJQUFBLFNBQUFBLEVBQUEsTUFDQUQsSUFBQSxTQUFBQSxFQUFBLE1BQ0FyckIsSUFBQSxTQUFBQSxFQUFBbXBCLEdBQ0FJLElBQUEsU0FBQUEsRUFBQUgsR0FFQSxLQUFLLFlBQWNHLEVBQWdCLEdBQzdCQSxFQUFnQixHQUNoQitCLEVBQVMsR0FDZixLQUFLLFVBQVlBLEVBQ2pCLEtBQUssV0FBYUQsRUFDbEIsS0FBSyxTQUFRN0IsRUFBQUEsRUFBQSxDQUFBLEVBQVFMLENBQU8sRUFBS25wQixDQUFPLEVBQ3hDLEtBQUssZ0JBQWtCLEtBQ3ZCLEtBQUssU0FBVyxHQUNoQixLQUFLLGFBQWUsR0FDcEIsS0FBSyxLQUFJLEVBQ1RpcEIsRUFBQSxRQUFVLFlBQ04sVUFDQSxLQUNBTSxFQUFnQixHQUFLQSxFQUFnQixHQUFLLEtBQUssVUFBVSxHQUN6REEsRUFBZ0IsUUFBUSxDQUVoQyxDQUVBLE9BQUErSCxFQUFBLFVBQUEsS0FBQSxVQUFBLENBQ1EsS0FBSyxZQUFjLEtBQUssV0FBYSxDQUFDLEtBQUssZUFDM0MsS0FBSyxxQkFBb0IsRUFDekIsS0FBSyxnQkFBa0IsS0FBSyxzQkFBcUIsRUFDakQsS0FBSyxhQUFlLEdBRTVCLEVBRUFBLEVBQUEsVUFBQSxRQUFBLFVBQUEsQ0FBQSxJQUFBNVMsRUFBQSxLQUNJLEdBQUksS0FBSyxhQUFjLENBRW5CLElBQU1pUSxFQUFnQixLQUFLLGtCQUFpQixFQUU1Q0EsRUFBYyxXQUFXLFFBQVEsU0FBQzdULEVBQUUsQ0FDaEM0RCxFQUFLLFdBQVcsb0JBQW9CNUQsRUFBSTRELEVBQUssWUFBWSxFQUN6REEsRUFBSyxVQUFVLG9CQUFvQjVELEVBQUk0RCxFQUFLLFlBQVksQ0FDNUQsQ0FBQyxFQUVEaVEsRUFBYyxXQUFXLFFBQVEsU0FBQzdULEVBQUUsQ0FDaEM0RCxFQUFLLFdBQVcsb0JBQW9CNUQsRUFBSTRELEVBQUssWUFBWSxFQUN6REEsRUFBSyxVQUFVLG9CQUFvQjVELEVBQUk0RCxFQUFLLFlBQVksQ0FDNUQsQ0FBQyxFQUdELEtBQUssdUJBQXNCLEVBRzNCLEtBQUssNEJBQTJCLEVBRzVCLEtBQUssaUJBQ0wsS0FBSyxnQkFBZ0IsUUFBTyxFQUdoQyxLQUFLLGFBQWUsR0FFNUIsRUFFQTRTLEVBQUEsVUFBQSxlQUFBLFVBQUEsQ0FDSXJJLEVBQUEsUUFBVSxlQUFlLFVBQVcsS0FBSyxXQUFXLENBQ3hELEVBRUFxSSxFQUFBLFVBQUEseUJBQUEsVUFBQSxDQUNJLEtBQUssUUFBTyxFQUNaLEtBQUssZUFBYyxDQUN2QixFQUVBQSxFQUFBLFVBQUEscUJBQUEsVUFBQSxDQUFBLElBQUE1UyxFQUFBLEtBQ1VpUSxFQUFnQixLQUFLLGtCQUFpQixFQUU1QyxLQUFLLGFBQWUsVUFBQSxDQUNoQmpRLEVBQUssS0FBSSxDQUNiLEVBRUEsS0FBSyxhQUFlLFVBQUEsQ0FDaEIsV0FBVyxVQUFBLENBQ0ZBLEVBQUssVUFBVSxRQUFRLFFBQVEsR0FDaENBLEVBQUssS0FBSSxDQUVqQixFQUFHLEdBQUcsQ0FDVixFQUVBaVEsRUFBYyxXQUFXLFFBQVEsU0FBQzdULEVBQUUsQ0FDaEM0RCxFQUFLLFdBQVcsaUJBQWlCNUQsRUFBSTRELEVBQUssWUFBWSxFQUN0REEsRUFBSyxVQUFVLGlCQUFpQjVELEVBQUk0RCxFQUFLLFlBQVksQ0FDekQsQ0FBQyxFQUVEaVEsRUFBYyxXQUFXLFFBQVEsU0FBQzdULEVBQUUsQ0FDaEM0RCxFQUFLLFdBQVcsaUJBQWlCNUQsRUFBSTRELEVBQUssWUFBWSxFQUN0REEsRUFBSyxVQUFVLGlCQUFpQjVELEVBQUk0RCxFQUFLLFlBQVksQ0FDekQsQ0FBQyxDQUNMLEVBRUE0UyxFQUFBLFVBQUEsc0JBQUEsVUFBQSxDQUNJLFNBQU8vQyxFQUFBLGNBQWEsS0FBSyxXQUFZLEtBQUssVUFBVyxDQUNqRCxVQUFXLEtBQUssU0FBUyxVQUN6QixVQUFXLENBQ1AsQ0FDSSxLQUFNLFNBQ04sUUFBUyxDQUNMLE9BQVEsQ0FBQyxFQUFHLEtBQUssU0FBUyxNQUFNLEtBSS9DLENBQ0wsRUFFQStDLEVBQUEsVUFBQSxrQkFBQSxVQUFBLENBQ0ksT0FBUSxLQUFLLFNBQVMsWUFBYSxDQUMvQixJQUFLLFFBQ0QsTUFBTyxDQUNILFdBQVksQ0FBQyxhQUFjLE9BQU8sRUFDbEMsV0FBWSxDQUFDLGFBQWMsTUFBTSxHQUV6QyxJQUFLLFFBQ0QsTUFBTyxDQUNILFdBQVksQ0FBQyxRQUFTLE9BQU8sRUFDN0IsV0FBWSxDQUFDLFdBQVksTUFBTSxHQUV2QyxJQUFLLE9BQ0QsTUFBTyxDQUNILFdBQVksQ0FBQSxFQUNaLFdBQVksQ0FBQSxHQUVwQixRQUNJLE1BQU8sQ0FDSCxXQUFZLENBQUMsYUFBYyxPQUFPLEVBQ2xDLFdBQVksQ0FBQyxhQUFjLE1BQU0sR0FHakQsRUFFQUEsRUFBQSxVQUFBLHNCQUFBLFVBQUEsQ0FBQSxJQUFBNVMsRUFBQSxLQUNJLEtBQUssc0JBQXdCLFNBQUM1RCxFQUFpQixDQUN2Q0EsRUFBRyxNQUFRLFVBQ1g0RCxFQUFLLEtBQUksQ0FFakIsRUFDQSxTQUFTLEtBQUssaUJBQ1YsVUFDQSxLQUFLLHNCQUNMLEVBQUksQ0FFWixFQUVBNFMsRUFBQSxVQUFBLHVCQUFBLFVBQUEsQ0FDSSxTQUFTLEtBQUssb0JBQ1YsVUFDQSxLQUFLLHNCQUNMLEVBQUksQ0FFWixFQUVBQSxFQUFBLFVBQUEsMkJBQUEsVUFBQSxDQUFBLElBQUE1UyxFQUFBLEtBQ0ksS0FBSywyQkFBNkIsU0FBQzVELEVBQWMsQ0FDN0M0RCxFQUFLLG9CQUFvQjVELEVBQUk0RCxFQUFLLFNBQVMsQ0FDL0MsRUFDQSxTQUFTLEtBQUssaUJBQ1YsUUFDQSxLQUFLLDJCQUNMLEVBQUksQ0FFWixFQUVBNFMsRUFBQSxVQUFBLDRCQUFBLFVBQUEsQ0FDSSxTQUFTLEtBQUssb0JBQ1YsUUFDQSxLQUFLLDJCQUNMLEVBQUksQ0FFWixFQUVBQSxFQUFBLFVBQUEsb0JBQUEsU0FBb0J4VyxFQUFXd1EsRUFBcUIsQ0FDaEQsSUFBTXNELEVBQVk5VCxFQUFHLE9BRWpCOFQsSUFBY3RELEdBQ2QsQ0FBQ0EsRUFBUyxTQUFTc0QsQ0FBUyxHQUM1QixDQUFDLEtBQUssV0FBVyxTQUFTQSxDQUFTLEdBQ25DLEtBQUssVUFBUyxHQUVkLEtBQUssS0FBSSxDQUVqQixFQUVBMEMsRUFBQSxVQUFBLFVBQUEsVUFBQSxDQUNJLE9BQU8sS0FBSyxRQUNoQixFQUVBQSxFQUFBLFVBQUEsT0FBQSxVQUFBLENBQ1EsS0FBSyxVQUFTLEVBQ2QsS0FBSyxLQUFJLEVBRVQsS0FBSyxLQUFJLEVBRWIsS0FBSyxTQUFTLFNBQVMsSUFBSSxDQUMvQixFQUVBQSxFQUFBLFVBQUEsS0FBQSxVQUFBLENBQ0ksS0FBSyxVQUFVLFVBQVUsT0FBTyxZQUFhLFdBQVcsRUFDeEQsS0FBSyxVQUFVLFVBQVUsSUFBSSxjQUFlLFNBQVMsRUFHckQsS0FBSyxnQkFBZ0IsV0FBVyxTQUFDdHhCLEVBQXNCLENBQUssT0FBQXdwQixFQUFBQSxFQUFBLENBQUEsRUFDckR4cEIsQ0FBTyxFQUFBLENBQ1YsVUFBU2d2QixFQUFBQSxFQUFBLENBQUEsRUFDRmh2QixFQUFRLFVBQVMsRUFBQSxFQUFBLENBQ3BCLENBQUUsS0FBTSxpQkFBa0IsUUFBUyxFQUFJLFFBSmEsQ0FNMUQsRUFHRixLQUFLLDJCQUEwQixFQUcvQixLQUFLLHNCQUFxQixFQUcxQixLQUFLLGdCQUFnQixPQUFNLEVBRzNCLEtBQUssU0FBVyxHQUdoQixLQUFLLFNBQVMsT0FBTyxJQUFJLENBQzdCLEVBRUFzeEIsRUFBQSxVQUFBLEtBQUEsVUFBQSxDQUNJLEtBQUssVUFBVSxVQUFVLE9BQU8sY0FBZSxTQUFTLEVBQ3hELEtBQUssVUFBVSxVQUFVLElBQUksWUFBYSxXQUFXLEVBR3JELEtBQUssZ0JBQWdCLFdBQVcsU0FBQ3R4QixFQUFzQixDQUFLLE9BQUF3cEIsRUFBQUEsRUFBQSxDQUFBLEVBQ3JEeHBCLENBQU8sRUFBQSxDQUNWLFVBQVNndkIsRUFBQUEsRUFBQSxDQUFBLEVBQ0ZodkIsRUFBUSxVQUFTLEVBQUEsRUFBQSxDQUNwQixDQUFFLEtBQU0saUJBQWtCLFFBQVMsRUFBSyxRQUpZLENBTTFELEVBR0YsS0FBSyw0QkFBMkIsRUFHaEMsS0FBSyx1QkFBc0IsRUFHM0IsS0FBSyxTQUFXLEdBR2hCLEtBQUssU0FBUyxPQUFPLElBQUksQ0FDN0IsRUFFQXN4QixFQUFBLFVBQUEsYUFBQSxTQUFhekosRUFBb0IsQ0FDN0IsS0FBSyxTQUFTLE9BQVNBLENBQzNCLEVBRUF5SixFQUFBLFVBQUEsYUFBQSxTQUFhekosRUFBb0IsQ0FDN0IsS0FBSyxTQUFTLE9BQVNBLENBQzNCLEVBRUF5SixFQUFBLFVBQUEsZUFBQSxTQUFlekosRUFBb0IsQ0FDL0IsS0FBSyxTQUFTLFNBQVdBLENBQzdCLEVBQ0p5SixDQUFBLEVBQUMsRUFFRCxTQUFnQkMsR0FBWSxDQUN4QixTQUFTLGlCQUFpQix1QkFBdUIsRUFBRSxRQUFRLFNBQUN0SCxFQUFVLENBQ2xFLElBQU11SCxFQUFZdkgsRUFBVyxhQUFhLHFCQUFxQixFQUN6RHdILEVBQWEsU0FBUyxlQUFlRCxDQUFTLEVBRXBELEdBQUlDLEVBQVksQ0FDWixJQUFNN0UsRUFBYzNDLEVBQVcsYUFBYSxzQkFBc0IsRUFDNUQ3dkIsRUFBWTZ2QixFQUFXLGFBQWEsd0JBQXdCLEVBQzVEanBCLEVBQVNpcEIsRUFBVyxhQUFhLHFCQUFxQixFQUU1RCxJQUFJcUgsRUFDQUcsRUFDQXhILEVBQ0EsQ0FDSSxVQUFXN3ZCLEdBQXdCK3VCLEVBQVEsVUFDM0MsT0FBUW5vQixFQUFTLFNBQVNBLENBQU0sRUFBSW1vQixFQUFRLE9BQzVDLFlBQWF5RCxHQUVQekQsRUFBUSxZQUNDLE9BR3ZCLFFBQVEsTUFDSixnQ0FBQSxPQUFnQ3FJLEVBQVMsbUVBQUEsQ0FBbUUsQ0FHeEgsQ0FBQyxDQUNMLENBM0JBdDRCLEVBQUEsYUFBQXE0QixFQTZCSSxPQUFPLE9BQVcsTUFDbEIsT0FBTyxRQUFVRCxFQUNqQixPQUFPLGFBQWVDLEdBRzFCcjRCLEVBQUEsUUFBZW80QixzVUNqVmYsSUFBQXJJLEVBQUFDLEVBQUEsR0FBQSxFQUVNQyxFQUF1QixDQUN6QixhQUFjLEtBQ2QsY0FDSSxxSEFDSixnQkFDSSxtS0FDSixPQUFRLFVBQUEsQ0FBTyxHQUdiQyxFQUEwQyxDQUM1QyxHQUFJLEtBQ0osU0FBVSxJQUdkc0ksRUFBQSxVQUFBLENBUUksU0FBQUEsRUFDSUMsRUFDQXpjLEVBQ0FsVixFQUNBdXBCLEVBQXlELENBSHpEb0ksSUFBQSxTQUFBQSxFQUFBLE1BQ0F6YyxJQUFBLFNBQUFBLEVBQUEsQ0FBQSxHQUNBbFYsSUFBQSxTQUFBQSxFQUFBbXBCLEdBQ0FJLElBQUEsU0FBQUEsRUFBQUgsR0FFQSxLQUFLLFlBQWNHLEVBQWdCLEdBQUtBLEVBQWdCLEdBQUtvSSxFQUFPLEdBQ3BFLEtBQUssUUFBVUEsRUFDZixLQUFLLE9BQVN6YyxFQUNkLEtBQUssV0FBYWxWLEVBQVUsS0FBSyxPQUFPQSxFQUFRLFlBQVksRUFBSSxLQUNoRSxLQUFLLFNBQVF3cEIsRUFBQUEsRUFBQSxDQUFBLEVBQVFMLENBQU8sRUFBS25wQixDQUFPLEVBQ3hDLEtBQUssYUFBZSxHQUNwQixLQUFLLEtBQUksRUFDVGlwQixFQUFBLFFBQVUsWUFDTixPQUNBLEtBQ0EsS0FBSyxZQUNMTSxFQUFnQixRQUFRLENBRWhDLENBRUEsT0FBQW1JLEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FBQSxJQUFBaFQsRUFBQSxLQUNRLEtBQUssT0FBTyxRQUFVLENBQUMsS0FBSyxlQUV2QixLQUFLLFlBQ04sS0FBSyxhQUFhLEtBQUssT0FBTyxDQUFDLENBQUMsRUFJcEMsS0FBSyxLQUFLLEtBQUssV0FBVyxHQUFJLEVBQUksRUFHbEMsS0FBSyxPQUFPLElBQUksU0FBQ2tULEVBQUcsQ0FDaEJBLEVBQUksVUFBVSxpQkFBaUIsUUFBUyxTQUFDdEUsRUFBSyxDQUMxQ0EsRUFBTSxlQUFjLEVBQ3BCNU8sRUFBSyxLQUFLa1QsRUFBSSxFQUFFLENBQ3BCLENBQUMsQ0FDTCxDQUFDLEVBRVQsRUFFQUYsRUFBQSxVQUFBLFFBQUEsVUFBQSxDQUNRLEtBQUssZUFDTCxLQUFLLGFBQWUsR0FFNUIsRUFFQUEsRUFBQSxVQUFBLGVBQUEsVUFBQSxDQUNJLEtBQUssUUFBTyxFQUNaekksRUFBQSxRQUFVLGVBQWUsT0FBUSxLQUFLLFdBQVcsQ0FDckQsRUFFQXlJLEVBQUEsVUFBQSx5QkFBQSxVQUFBLENBQ0ksS0FBSyxRQUFPLEVBQ1osS0FBSyxlQUFjLENBQ3ZCLEVBRUFBLEVBQUEsVUFBQSxhQUFBLFVBQUEsQ0FDSSxPQUFPLEtBQUssVUFDaEIsRUFFQUEsRUFBQSxVQUFBLGFBQUEsU0FBYUUsRUFBWSxDQUNyQixLQUFLLFdBQWFBLENBQ3RCLEVBRUFGLEVBQUEsVUFBQSxPQUFBLFNBQU9uUCxFQUFVLENBQ2IsT0FBTyxLQUFLLE9BQU8sT0FBTyxTQUFDclAsRUFBQyxDQUFLLE9BQUFBLEVBQUUsS0FBT3FQLENBQVQsQ0FBVyxFQUFFLENBQUMsQ0FDbkQsRUFFQW1QLEVBQUEsVUFBQSxLQUFBLFNBQUtuUCxFQUFZc1AsRUFBaUIsU0FBbENuVCxFQUFBLEtBQWlCbVQsSUFBQSxTQUFBQSxFQUFBLElBQ2IsSUFBTUQsRUFBTSxLQUFLLE9BQU9yUCxDQUFFLEVBR3RCcVAsSUFBUSxLQUFLLFlBQWMsQ0FBQ0MsSUFLaEMsS0FBSyxPQUFPLElBQUksU0FBQzNlLEVBQVUsU0FDbkJBLElBQU0wZSxLQUNObEksRUFBQXhXLEVBQUUsVUFBVSxXQUFVLE9BQU0sTUFBQXdXLEVBQ3JCaEwsRUFBSyxTQUFTLGNBQWMsTUFBTSxHQUFHLENBQUMsR0FFN0NpTCxFQUFBelcsRUFBRSxVQUFVLFdBQVUsSUFBRyxNQUFBeVcsRUFDbEJqTCxFQUFLLFNBQVMsZ0JBQWdCLE1BQU0sR0FBRyxDQUFDLEVBRS9DeEwsRUFBRSxTQUFTLFVBQVUsSUFBSSxRQUFRLEVBQ2pDQSxFQUFFLFVBQVUsYUFBYSxnQkFBaUIsT0FBTyxFQUV6RCxDQUFDLEdBR0R3VyxFQUFBa0ksRUFBSSxVQUFVLFdBQVUsSUFBRyxNQUFBbEksRUFBSSxLQUFLLFNBQVMsY0FBYyxNQUFNLEdBQUcsQ0FBQyxHQUNyRUMsRUFBQWlJLEVBQUksVUFBVSxXQUFVLE9BQU0sTUFBQWpJLEVBQ3ZCLEtBQUssU0FBUyxnQkFBZ0IsTUFBTSxHQUFHLENBQUMsRUFFL0NpSSxFQUFJLFVBQVUsYUFBYSxnQkFBaUIsTUFBTSxFQUNsREEsRUFBSSxTQUFTLFVBQVUsT0FBTyxRQUFRLEVBRXRDLEtBQUssYUFBYUEsQ0FBRyxFQUdyQixLQUFLLFNBQVMsT0FBTyxLQUFNQSxDQUFHLEVBQ2xDLEVBRUFGLEVBQUEsVUFBQSxhQUFBLFNBQWE3SixFQUFvQixDQUM3QixLQUFLLFNBQVMsT0FBU0EsQ0FDM0IsRUFDSjZKLENBQUEsRUFBQyxFQUVELFNBQWdCSSxHQUFRLENBQ3BCLFNBQVMsaUJBQWlCLG9CQUFvQixFQUFFLFFBQVEsU0FBQ2hGLEVBQVMsQ0FDOUQsSUFBTWlGLEVBQXNCLENBQUEsRUFDdEJoSSxFQUFnQitDLEVBQVUsYUFDNUIsMEJBQTBCLEVBRXhCOUMsRUFBa0I4QyxFQUFVLGFBQzlCLDRCQUE0QixFQUU1QmtGLEVBQWUsS0FDbkJsRixFQUNLLGlCQUFpQixjQUFjLEVBQy9CLFFBQVEsU0FBQzdDLEVBQXVCLENBQzdCLElBQU1nSSxFQUNGaEksRUFBVyxhQUFhLGVBQWUsSUFBTSxPQUMzQzJILEVBQWUsQ0FDakIsR0FBSTNILEVBQVcsYUFBYSxrQkFBa0IsRUFDOUMsVUFBV0EsRUFDWCxTQUFVLFNBQVMsY0FDZkEsRUFBVyxhQUFhLGtCQUFrQixDQUFDLEdBR25EOEgsRUFBUyxLQUFLSCxDQUFHLEVBRWJLLElBQ0FELEVBQWVKLEVBQUksR0FFM0IsQ0FBQyxFQUVMLElBQUlGLEVBQUs1RSxFQUEwQmlGLEVBQVUsQ0FDekMsYUFBY0MsRUFDZCxjQUFlakksR0FFVFosRUFBUSxjQUNkLGdCQUFpQmEsR0FFWGIsRUFBUSxnQkFDRixDQUNwQixDQUFDLENBQ0wsQ0F2Q0Fqd0IsRUFBQSxTQUFBNDRCLEVBeUNJLE9BQU8sT0FBVyxNQUNsQixPQUFPLEtBQU9KLEVBQ2QsT0FBTyxTQUFXSSxHQUd0QjU0QixFQUFBLFFBQWV3NEIsMGlCQ3ZMZixJQUFBbkQsRUFBQXJGLEVBQUEsR0FBQSxFQVFBRCxFQUFBQyxFQUFBLEdBQUEsRUFFTUMsRUFBMEIsQ0FDNUIsVUFBVyxNQUNYLFlBQWEsUUFDYixPQUFRLFVBQUEsQ0FBTyxFQUNmLE9BQVEsVUFBQSxDQUFPLEVBQ2YsU0FBVSxVQUFBLENBQU8sR0FHZkMsRUFBMEMsQ0FDNUMsR0FBSSxLQUNKLFNBQVUsSUFHZDhJLEVBQUEsVUFBQSxDQWFJLFNBQUFBLEVBQ0k1RyxFQUNBRCxFQUNBcnJCLEVBQ0F1cEIsRUFBeUQsQ0FIekQrQixJQUFBLFNBQUFBLEVBQUEsTUFDQUQsSUFBQSxTQUFBQSxFQUFBLE1BQ0FyckIsSUFBQSxTQUFBQSxFQUFBbXBCLEdBQ0FJLElBQUEsU0FBQUEsRUFBQUgsR0FFQSxLQUFLLFlBQWNHLEVBQWdCLEdBQzdCQSxFQUFnQixHQUNoQitCLEVBQVMsR0FDZixLQUFLLFVBQVlBLEVBQ2pCLEtBQUssV0FBYUQsRUFDbEIsS0FBSyxTQUFRN0IsRUFBQUEsRUFBQSxDQUFBLEVBQVFMLENBQU8sRUFBS25wQixDQUFPLEVBQ3hDLEtBQUssZ0JBQWtCLEtBQ3ZCLEtBQUssU0FBVyxHQUNoQixLQUFLLGFBQWUsR0FDcEIsS0FBSyxLQUFJLEVBQ1RpcEIsRUFBQSxRQUFVLFlBQ04sVUFDQSxLQUNBLEtBQUssWUFDTE0sRUFBZ0IsUUFBUSxDQUVoQyxDQUVBLE9BQUEySSxFQUFBLFVBQUEsS0FBQSxVQUFBLENBQ1EsS0FBSyxZQUFjLEtBQUssV0FBYSxDQUFDLEtBQUssZUFDM0MsS0FBSyxxQkFBb0IsRUFDekIsS0FBSyxnQkFBa0IsS0FBSyxzQkFBcUIsRUFDakQsS0FBSyxhQUFlLEdBRTVCLEVBRUFBLEVBQUEsVUFBQSxRQUFBLFVBQUEsQ0FBQSxJQUFBeFQsRUFBQSxLQUNJLEdBQUksS0FBSyxhQUFjLENBRW5CLElBQU1pUSxFQUFnQixLQUFLLGtCQUFpQixFQUU1Q0EsRUFBYyxXQUFXLFFBQVEsU0FBQzdULEVBQUUsQ0FDaEM0RCxFQUFLLFdBQVcsb0JBQW9CNUQsRUFBSTRELEVBQUssWUFBWSxDQUM3RCxDQUFDLEVBRURpUSxFQUFjLFdBQVcsUUFBUSxTQUFDN1QsRUFBRSxDQUNoQzRELEVBQUssV0FBVyxvQkFBb0I1RCxFQUFJNEQsRUFBSyxZQUFZLENBQzdELENBQUMsRUFHRCxLQUFLLHVCQUFzQixFQUczQixLQUFLLDRCQUEyQixFQUc1QixLQUFLLGlCQUNMLEtBQUssZ0JBQWdCLFFBQU8sRUFFaEMsS0FBSyxhQUFlLEdBRTVCLEVBRUF3VCxFQUFBLFVBQUEsZUFBQSxVQUFBLENBQ0lqSixFQUFBLFFBQVUsZUFBZSxVQUFXLEtBQUssV0FBVyxDQUN4RCxFQUVBaUosRUFBQSxVQUFBLHlCQUFBLFVBQUEsQ0FDSSxLQUFLLFFBQU8sRUFDWixLQUFLLGVBQWMsQ0FDdkIsRUFFQUEsRUFBQSxVQUFBLHFCQUFBLFVBQUEsQ0FBQSxJQUFBeFQsRUFBQSxLQUNVaVEsRUFBZ0IsS0FBSyxrQkFBaUIsRUFFNUMsS0FBSyxhQUFlLFVBQUEsQ0FDaEJqUSxFQUFLLEtBQUksQ0FDYixFQUVBLEtBQUssYUFBZSxVQUFBLENBQ2hCQSxFQUFLLEtBQUksQ0FDYixFQUVBaVEsRUFBYyxXQUFXLFFBQVEsU0FBQzdULEVBQUUsQ0FDaEM0RCxFQUFLLFdBQVcsaUJBQWlCNUQsRUFBSTRELEVBQUssWUFBWSxDQUMxRCxDQUFDLEVBRURpUSxFQUFjLFdBQVcsUUFBUSxTQUFDN1QsRUFBRSxDQUNoQzRELEVBQUssV0FBVyxpQkFBaUI1RCxFQUFJNEQsRUFBSyxZQUFZLENBQzFELENBQUMsQ0FDTCxFQUVBd1QsRUFBQSxVQUFBLHNCQUFBLFVBQUEsQ0FDSSxTQUFPM0QsRUFBQSxjQUFhLEtBQUssV0FBWSxLQUFLLFVBQVcsQ0FDakQsVUFBVyxLQUFLLFNBQVMsVUFDekIsVUFBVyxDQUNQLENBQ0ksS0FBTSxTQUNOLFFBQVMsQ0FDTCxPQUFRLENBQUMsRUFBRyxDQUFDLEtBSTVCLENBQ0wsRUFFQTJELEVBQUEsVUFBQSxrQkFBQSxVQUFBLENBQ0ksT0FBUSxLQUFLLFNBQVMsWUFBYSxDQUMvQixJQUFLLFFBQ0QsTUFBTyxDQUNILFdBQVksQ0FBQyxhQUFjLE9BQU8sRUFDbEMsV0FBWSxDQUFDLGFBQWMsTUFBTSxHQUV6QyxJQUFLLFFBQ0QsTUFBTyxDQUNILFdBQVksQ0FBQyxRQUFTLE9BQU8sRUFDN0IsV0FBWSxDQUFDLFdBQVksTUFBTSxHQUV2QyxJQUFLLE9BQ0QsTUFBTyxDQUNILFdBQVksQ0FBQSxFQUNaLFdBQVksQ0FBQSxHQUVwQixRQUNJLE1BQU8sQ0FDSCxXQUFZLENBQUMsYUFBYyxPQUFPLEVBQ2xDLFdBQVksQ0FBQyxhQUFjLE1BQU0sR0FHakQsRUFFQUEsRUFBQSxVQUFBLHNCQUFBLFVBQUEsQ0FBQSxJQUFBeFQsRUFBQSxLQUNJLEtBQUssc0JBQXdCLFNBQUM1RCxFQUFpQixDQUN2Q0EsRUFBRyxNQUFRLFVBQ1g0RCxFQUFLLEtBQUksQ0FFakIsRUFDQSxTQUFTLEtBQUssaUJBQ1YsVUFDQSxLQUFLLHNCQUNMLEVBQUksQ0FFWixFQUVBd1QsRUFBQSxVQUFBLHVCQUFBLFVBQUEsQ0FDSSxTQUFTLEtBQUssb0JBQ1YsVUFDQSxLQUFLLHNCQUNMLEVBQUksQ0FFWixFQUVBQSxFQUFBLFVBQUEsMkJBQUEsVUFBQSxDQUFBLElBQUF4VCxFQUFBLEtBQ0ksS0FBSywyQkFBNkIsU0FBQzVELEVBQWMsQ0FDN0M0RCxFQUFLLG9CQUFvQjVELEVBQUk0RCxFQUFLLFNBQVMsQ0FDL0MsRUFDQSxTQUFTLEtBQUssaUJBQ1YsUUFDQSxLQUFLLDJCQUNMLEVBQUksQ0FFWixFQUVBd1QsRUFBQSxVQUFBLDRCQUFBLFVBQUEsQ0FDSSxTQUFTLEtBQUssb0JBQ1YsUUFDQSxLQUFLLDJCQUNMLEVBQUksQ0FFWixFQUVBQSxFQUFBLFVBQUEsb0JBQUEsU0FBb0JwWCxFQUFXd1EsRUFBcUIsQ0FDaEQsSUFBTXNELEVBQVk5VCxFQUFHLE9BRWpCOFQsSUFBY3RELEdBQ2QsQ0FBQ0EsRUFBUyxTQUFTc0QsQ0FBUyxHQUM1QixDQUFDLEtBQUssV0FBVyxTQUFTQSxDQUFTLEdBQ25DLEtBQUssVUFBUyxHQUVkLEtBQUssS0FBSSxDQUVqQixFQUVBc0QsRUFBQSxVQUFBLFVBQUEsVUFBQSxDQUNJLE9BQU8sS0FBSyxRQUNoQixFQUVBQSxFQUFBLFVBQUEsT0FBQSxVQUFBLENBQ1EsS0FBSyxVQUFTLEVBQ2QsS0FBSyxLQUFJLEVBRVQsS0FBSyxLQUFJLENBRWpCLEVBRUFBLEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FDSSxLQUFLLFVBQVUsVUFBVSxPQUFPLFlBQWEsV0FBVyxFQUN4RCxLQUFLLFVBQVUsVUFBVSxJQUFJLGNBQWUsU0FBUyxFQUdyRCxLQUFLLGdCQUFnQixXQUFXLFNBQUNseUIsRUFBc0IsQ0FBSyxPQUFBd3BCLEVBQUFBLEVBQUEsQ0FBQSxFQUNyRHhwQixDQUFPLEVBQUEsQ0FDVixVQUFTZ3ZCLEVBQUFBLEVBQUEsQ0FBQSxFQUNGaHZCLEVBQVEsVUFBUyxFQUFBLEVBQUEsQ0FDcEIsQ0FBRSxLQUFNLGlCQUFrQixRQUFTLEVBQUksUUFKYSxDQU0xRCxFQUdGLEtBQUssMkJBQTBCLEVBRy9CLEtBQUssc0JBQXFCLEVBRzFCLEtBQUssZ0JBQWdCLE9BQU0sRUFHM0IsS0FBSyxTQUFXLEdBR2hCLEtBQUssU0FBUyxPQUFPLElBQUksQ0FDN0IsRUFFQWt5QixFQUFBLFVBQUEsS0FBQSxVQUFBLENBQ0ksS0FBSyxVQUFVLFVBQVUsT0FBTyxjQUFlLFNBQVMsRUFDeEQsS0FBSyxVQUFVLFVBQVUsSUFBSSxZQUFhLFdBQVcsRUFHckQsS0FBSyxnQkFBZ0IsV0FBVyxTQUFDbHlCLEVBQXNCLENBQUssT0FBQXdwQixFQUFBQSxFQUFBLENBQUEsRUFDckR4cEIsQ0FBTyxFQUFBLENBQ1YsVUFBU2d2QixFQUFBQSxFQUFBLENBQUEsRUFDRmh2QixFQUFRLFVBQVMsRUFBQSxFQUFBLENBQ3BCLENBQUUsS0FBTSxpQkFBa0IsUUFBUyxFQUFLLFFBSlksQ0FNMUQsRUFHRixLQUFLLDRCQUEyQixFQUdoQyxLQUFLLHVCQUFzQixFQUczQixLQUFLLFNBQVcsR0FHaEIsS0FBSyxTQUFTLE9BQU8sSUFBSSxDQUM3QixFQUVBa3lCLEVBQUEsVUFBQSxhQUFBLFNBQWFySyxFQUFvQixDQUM3QixLQUFLLFNBQVMsT0FBU0EsQ0FDM0IsRUFFQXFLLEVBQUEsVUFBQSxhQUFBLFNBQWFySyxFQUFvQixDQUM3QixLQUFLLFNBQVMsT0FBU0EsQ0FDM0IsRUFFQXFLLEVBQUEsVUFBQSxlQUFBLFNBQWVySyxFQUFvQixDQUMvQixLQUFLLFNBQVMsU0FBV0EsQ0FDN0IsRUFDSnFLLENBQUEsRUFBQyxFQUVELFNBQWdCQyxHQUFZLENBQ3hCLFNBQVMsaUJBQWlCLHVCQUF1QixFQUFFLFFBQVEsU0FBQ2xJLEVBQVUsQ0FDbEUsSUFBTW1JLEVBQVluSSxFQUFXLGFBQWEscUJBQXFCLEVBQ3pEb0ksRUFBYSxTQUFTLGVBQWVELENBQVMsRUFFcEQsR0FBSUMsRUFBWSxDQUNaLElBQU16RixFQUFjM0MsRUFBVyxhQUFhLHNCQUFzQixFQUM1RDd2QixFQUFZNnZCLEVBQVcsYUFBYSx3QkFBd0IsRUFFbEUsSUFBSWlJLEVBQ0FHLEVBQ0FwSSxFQUNBLENBQ0ksVUFBVzd2QixHQUF3Qit1QixFQUFRLFVBQzNDLFlBQWF5RCxHQUVQekQsRUFBUSxZQUNDLE9BR3ZCLFFBQVEsTUFDSixnQ0FBQSxPQUFnQ2lKLEVBQVMsbUVBQUEsQ0FBbUUsQ0FHeEgsQ0FBQyxDQUNMLENBekJBbDVCLEVBQUEsYUFBQWk1QixFQTJCSSxPQUFPLE9BQVcsTUFDbEIsT0FBTyxRQUFVRCxFQUNqQixPQUFPLGFBQWVDLEdBRzFCajVCLEVBQUEsUUFBZWc1QixzRUN4VWYsSUFBQUksRUFBQSxVQUFBLENBSUksU0FBQUEsRUFBWUMsRUFBbUJDLEVBQW9DLENBQXBDQSxJQUFBLFNBQUFBLEVBQUEsQ0FBQSxHQUMzQixLQUFLLFdBQWFELEVBQ2xCLEtBQUssZ0JBQWtCQyxDQUMzQixDQUVBLE9BQUFGLEVBQUEsVUFBQSxLQUFBLFVBQUEsQ0FBQSxJQUFBNVQsRUFBQSxLQUNJLEtBQUssZ0JBQWdCLFFBQVEsU0FBQytULEVBQWEsQ0FDbkMsT0FBTyxPQUFXLEtBQ2xCLE9BQU8saUJBQWlCL1QsRUFBSyxXQUFZK1QsQ0FBYSxDQUU5RCxDQUFDLENBQ0wsRUFDSkgsQ0FBQSxFQUFDLEVBRURwNUIsRUFBQSxRQUFlbzVCLHNFQ0hmLElBQUFJLEVBQUEsVUFBQSxDQWtCSSxTQUFBQSxHQUFBLENBQ0ksS0FBSyxXQUFhLENBQ2QsVUFBVyxDQUFBLEVBQ1gsU0FBVSxDQUFBLEVBQ1YsU0FBVSxDQUFBLEVBQ1YsS0FBTSxDQUFBLEVBQ04sUUFBUyxDQUFBLEVBQ1QsT0FBUSxDQUFBLEVBQ1IsU0FBVSxDQUFBLEVBQ1YsTUFBTyxDQUFBLEVBQ1AsUUFBUyxDQUFBLEVBQ1QsS0FBTSxDQUFBLEVBQ04sUUFBUyxDQUFBLEVBQ1QsYUFBYyxDQUFBLEVBQ2QsY0FBZSxDQUFBLEVBQ2YsV0FBWSxDQUFBLEVBRXBCLENBRUEsT0FBQUEsRUFBQSxVQUFBLFlBQUEsU0FDSUMsRUFDQWh2QixFQUNBNGUsRUFDQXFRLEVBQWdCLENBRWhCLEdBRkFBLElBQUEsU0FBQUEsRUFBQSxJQUVJLENBQUMsS0FBSyxXQUFXRCxDQUFTLEVBQzFCLGVBQVEsS0FBSyx1QkFBQSxPQUF1QkEsRUFBUyxrQkFBQSxDQUFrQixFQUN4RCxHQUdYLEdBQUksS0FBSyxXQUFXQSxDQUFTLEVBQUVwUSxDQUFFLEdBQUssQ0FBQ3FRLEVBQVUsQ0FDN0MsUUFBUSxLQUFLLDhCQUFBLE9BQThCclEsRUFBRSxrQkFBQSxDQUFrQixFQUMvRCxPQUdBcVEsR0FBWSxLQUFLLFdBQVdELENBQVMsRUFBRXBRLENBQUUsR0FDekMsS0FBSyxXQUFXb1EsQ0FBUyxFQUFFcFEsQ0FBRSxFQUFFLHlCQUF3QixFQUczRCxLQUFLLFdBQVdvUSxDQUFTLEVBQUVwUSxHQUFVLEtBQUssa0JBQWlCLENBQUUsRUFDekQ1ZSxDQUNSLEVBRUErdUIsRUFBQSxVQUFBLGdCQUFBLFVBQUEsQ0FDSSxPQUFPLEtBQUssVUFDaEIsRUFFQUEsRUFBQSxVQUFBLGFBQUEsU0FBYUMsRUFBd0MsQ0FDakQsT0FBSyxLQUFLLFdBQVdBLENBQVMsRUFJdkIsS0FBSyxXQUFXQSxDQUFTLEdBSDVCLFFBQVEsS0FBSyx1QkFBQSxPQUF1QkEsRUFBUyxrQkFBQSxDQUFrQixFQUN4RCxHQUdmLEVBRUFELEVBQUEsVUFBQSxZQUFBLFNBQVlDLEVBQTBDcFEsRUFBVSxDQUM1RCxHQUFLLEtBQUssMkJBQTJCb1EsRUFBV3BRLENBQUUsRUFJbEQsSUFBSSxDQUFDLEtBQUssV0FBV29RLENBQVMsRUFBRXBRLENBQUUsRUFBRyxDQUNqQyxRQUFRLEtBQUssOEJBQUEsT0FBOEJBLEVBQUUsa0JBQUEsQ0FBa0IsRUFDL0QsT0FFSixPQUFPLEtBQUssV0FBV29RLENBQVMsRUFBRXBRLENBQUUsRUFDeEMsRUFFQW1RLEVBQUEsVUFBQSx5QkFBQSxTQUNJQyxFQUNBcFEsRUFBVSxDQUVMLEtBQUssMkJBQTJCb1EsRUFBV3BRLENBQUUsSUFHbEQsS0FBSyxzQkFBc0JvUSxFQUFXcFEsQ0FBRSxFQUN4QyxLQUFLLGVBQWVvUSxFQUFXcFEsQ0FBRSxFQUNyQyxFQUVBbVEsRUFBQSxVQUFBLGVBQUEsU0FBZUMsRUFBMENwUSxFQUFVLENBQzFELEtBQUssMkJBQTJCb1EsRUFBV3BRLENBQUUsR0FHbEQsT0FBTyxLQUFLLFdBQVdvUSxDQUFTLEVBQUVwUSxDQUFFLENBQ3hDLEVBRUFtUSxFQUFBLFVBQUEsc0JBQUEsU0FDSUMsRUFDQXBRLEVBQVUsQ0FFTCxLQUFLLDJCQUEyQm9RLEVBQVdwUSxDQUFFLEdBR2xELEtBQUssV0FBV29RLENBQVMsRUFBRXBRLENBQUUsRUFBRSxRQUFPLENBQzFDLEVBRUFtUSxFQUFBLFVBQUEsZUFBQSxTQUFlQyxFQUEwQ3BRLEVBQVUsQ0FLL0QsTUFKSSxHQUFDLEtBQUssV0FBV29RLENBQVMsR0FJMUIsQ0FBQyxLQUFLLFdBQVdBLENBQVMsRUFBRXBRLENBQUUsRUFLdEMsRUFFQW1RLEVBQUEsVUFBQSxrQkFBQSxVQUFBLENBQ0ksT0FBTyxLQUFLLE9BQU0sRUFBRyxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUcsQ0FBQyxDQUNqRCxFQUVRQSxFQUFBLFVBQUEsMkJBQVIsU0FDSUMsRUFDQXBRLEVBQVUsQ0FFVixPQUFLLEtBQUssV0FBV29RLENBQVMsRUFLekIsS0FBSyxXQUFXQSxDQUFTLEVBQUVwUSxDQUFFLEVBSzNCLElBSkgsUUFBUSxLQUFLLDhCQUFBLE9BQThCQSxFQUFFLGtCQUFBLENBQWtCLEVBQ3hELEtBTlAsUUFBUSxLQUFLLHVCQUFBLE9BQXVCb1EsRUFBUyxrQkFBQSxDQUFrQixFQUN4RCxHQVNmLEVBQ0pELENBQUEsRUFBQyxFQUVLRyxFQUFZLElBQUlILEVBRXRCeDVCLEVBQUEsUUFBZTI1QixFQUVYLE9BQU8sT0FBVyxNQUNsQixPQUFPLGtCQUFvQkEsS0N0Sy9CQyxFQUFBLENBQUEsRUFHQSxTQUFBNUosRUFBQTZKLEVBQUEsQ0FFQSxJQUFBQyxFQUFBRixFQUFBQyxDQUFBLEVBQ0EsR0FBQUMsSUFBQSxPQUNBLE9BQUFBLEVBQUEsUUFHQSxJQUFBNzVCLEVBQUEyNUIsRUFBQUMsQ0FBQSxFQUFBLENBR0EsUUFBQSxDQUFBLENBQ0EsRUFHQSxPQUFBRSxFQUFBRixDQUFBLEVBQUEsS0FBQTU1QixFQUFBLFFBQUFBLEVBQUFBLEVBQUEsUUFBQSt2QixDQUFBLEVBR0EvdkIsRUFBQSxPQUNBLGFDckJBK3ZCLEVBQUEsRUFBQSxTQUFBaHdCLEVBQUFnNkIsRUFBQSxDQUNBLFFBQUF2ekIsS0FBQXV6QixFQUNBaEssRUFBQSxFQUFBZ0ssRUFBQXZ6QixDQUFBLEdBQUEsQ0FBQXVwQixFQUFBLEVBQUFod0IsRUFBQXlHLENBQUEsR0FDQSxPQUFBLGVBQUF6RyxFQUFBeUcsRUFBQSxDQUF5QyxXQUFBLEdBQUEsSUFBQXV6QixFQUFBdnpCLENBQUEsQ0FBQSxDQUF3QyxDQUdqRixpQkNQQXVwQixFQUFBLEVBQUEsU0FBQXJVLEVBQUFDLEVBQUEsQ0FBOEMsT0FBQSxPQUFBLFVBQUEsZUFBQSxLQUFBRCxFQUFBQyxDQUFBLENBQUEsZ0JDQzlDb1UsRUFBQSxFQUFBLFNBQUFod0IsRUFBQSxDQUNBLE9BQUEsT0FBQSxLQUFBLE9BQUEsYUFDQSxPQUFBLGVBQUFBLEVBQUEsT0FBQSxZQUFBLENBQXVELE1BQUEsUUFBQSxDQUFpQixFQUV4RSxPQUFBLGVBQUFBLEVBQUEsYUFBQSxDQUFnRCxNQUFBLEVBQUEsQ0FBYSxDQUM3RCx5RkNMQSxJQUFBcTJCLEVBQUFyRyxFQUFBLEdBQUEsRUFDQXNHLEVBQUF0RyxFQUFBLEVBQUEsRUFDQXdHLEVBQUF4RyxFQUFBLEdBQUEsRUFDQXlHLEVBQUF6RyxFQUFBLEdBQUEsRUFDQTBHLEVBQUExRyxFQUFBLEdBQUEsRUFDQStFLEVBQUEvRSxFQUFBLEdBQUEsRUFDQTJHLEVBQUEzRyxFQUFBLEdBQUEsRUFDQTZHLEVBQUE3RyxFQUFBLEVBQUEsRUFDQThHLEVBQUE5RyxFQUFBLEdBQUEsRUFDQStHLEVBQUEvRyxFQUFBLEdBQUEsRUFDQWdILEVBQUFoSCxFQUFBLEdBQUEsRUFDQTRHLEVBQUE1RyxFQUFBLEdBQUEsRUFDQXVHLEVBQUF2RyxFQUFBLEdBQUEsRUFDQWlILEVBQUFqSCxFQUFBLEdBQUEsRUFDQUEsRUFBQSxHQUFBLEVBQ0EsSUFBQWlLLEVBQUFqSyxFQUFBLEdBQUEsRUFFTWtLLEVBQXFCLElBQUlELEVBQUEsUUFBTyx3QkFBeUIsQ0FDM0Q1RCxFQUFBLGVBQ0FHLEVBQUEsY0FDQUYsRUFBQSxjQUNBSSxFQUFBLGNBQ0FDLEVBQUEsY0FDQUUsRUFBQSxXQUNBOUIsRUFBQSxZQUNBZ0MsRUFBQSxTQUNBQyxFQUFBLGFBQ0FGLEVBQUEsYUFDQUwsRUFBQSxVQUNBRyxFQUFBLGtCQUNBTCxFQUFBLG1CQUNBVSxFQUFBLGdCQUNILEVBQ0RpRCxFQUFtQixLQUFJLEVBRXZCLElBQU1DLEVBQXdCLElBQUlGLEVBQUEsUUFBTyxPQUFRLENBQzdDNUQsRUFBQSxlQUNBRyxFQUFBLGNBQ0FGLEVBQUEsY0FDQUksRUFBQSxjQUNBQyxFQUFBLGNBQ0FFLEVBQUEsV0FDQTlCLEVBQUEsWUFDQWdDLEVBQUEsU0FDQUMsRUFBQSxhQUNBRixFQUFBLGFBQ0FMLEVBQUEsVUFDQUcsRUFBQSxrQkFDQUwsRUFBQSxtQkFDQVUsRUFBQSxnQkFDSCxFQUNEa0QsRUFBc0IsS0FBSSxFQUUxQm42QixFQUFBLFFBQWUsQ0FDWCxVQUFTcTJCLEVBQUEsUUFDVCxTQUFRQyxFQUFBLFFBQ1IsU0FBUUUsRUFBQSxRQUNSLEtBQUlDLEVBQUEsUUFDSixPQUFNMUIsRUFBQSxRQUNOLFFBQU8yQixFQUFBLFFBQ1AsU0FBUUMsRUFBQSxRQUNSLE1BQUtFLEVBQUEsUUFDTCxRQUFPQyxFQUFBLFFBQ1AsS0FBSUMsRUFBQSxRQUNKLFFBQU9DLEVBQUEsUUFDUCxhQUFZSixFQUFBLFFBQ1osY0FBYUwsRUFBQSxRQUNiLFdBQVVVLEVBQUEsUUFDVixPQUFNZ0QsRUFBQSxzQkNuRVQsVUFBVyxDQUNWLElBQUlHLEVBQWdCQyxFQUFpQixFQUVyQyxTQUFTQSxHQUFtQixDQUMxQixHQUFJLE9BQU8sT0FBTyxhQUFnQixXQUFZLE9BQU8sT0FBTyxZQUU1RCxTQUFTQyxFQUFZQyxFQUFPQyxFQUFRLENBQ2xDQSxFQUFTQSxHQUFVLENBQUMsUUFBUyxHQUFPLFdBQVksR0FBTyxPQUFRLE1BQVMsRUFDeEUsSUFBSUMsRUFBTSxTQUFTLFlBQVksYUFBYSxFQUM1QyxPQUFBQSxFQUFJLGdCQUFnQkYsRUFBT0MsRUFBTyxRQUFTQSxFQUFPLFdBQVlBLEVBQU8sTUFBTSxFQUNwRUMsQ0FDVCxDQUNBLE9BQUFILEVBQVksVUFBWSxPQUFPLE1BQU0sVUFDOUJBLENBQ1QsQ0FFQSxTQUFTSSxFQUFpQkMsRUFBTUMsRUFBTyxDQUNyQyxJQUFJQyxFQUFRLFNBQVMsY0FBYyxPQUFPLEVBQzFDLE9BQUFBLEVBQU0sS0FBTyxTQUNiQSxFQUFNLEtBQU9GLEVBQ2JFLEVBQU0sTUFBUUQsRUFDUEMsQ0FDVCxDQUVBLFNBQVNDLEVBQVlDLEVBQVNDLEVBQW1CLENBQy9DLElBQUlDLEVBQUtGLEVBQVEsYUFBYSxTQUFTLEVBQ25DRyxFQUFTUixFQUFpQixVQUFXSyxFQUFRLGFBQWEsYUFBYSxDQUFDLEVBQ3hFSSxFQUFPVCxFQUFpQixjQUFlSyxFQUFRLGFBQWEsV0FBVyxDQUFDLEVBQ3hFSyxFQUFPLFNBQVMsY0FBYyxNQUFNLEVBQ3BDQyxFQUFTLFNBQVMsY0FBYyxPQUFPLEVBQ3ZDQyxFQUFTUCxFQUFRLGFBQWEsUUFBUSxFQUUxQ0ssRUFBSyxPQUFVTCxFQUFRLGFBQWEsYUFBYSxJQUFNLE1BQVMsTUFBUSxPQUN4RUssRUFBSyxPQUFTSCxFQUNkRyxFQUFLLE1BQU0sUUFBVSxPQUVqQkUsRUFBUUYsRUFBSyxPQUFTRSxFQUNqQk4sSUFBbUJJLEVBQUssT0FBUyxVQUUxQ0EsRUFBSyxZQUFZRCxDQUFJLEVBQ3JCQyxFQUFLLFlBQVlGLENBQU0sRUFDdkIsU0FBUyxLQUFLLFlBQVlFLENBQUksRUFJOUJDLEVBQU8sS0FBTyxTQUNkRCxFQUFLLFlBQVlDLENBQU0sRUFDdkJBLEVBQU8sTUFBTSxDQUNmLENBRUEsT0FBTyxpQkFBaUIsUUFBUyxTQUFTRSxFQUFHLENBQzNDLElBQUlSLEVBQVVRLEVBQUUsT0FDaEIsR0FBSSxDQUFBQSxFQUFFLGlCQUVOLEtBQU9SLEdBQVdBLEVBQVEsY0FBYyxDQUN0QyxJQUFJUyxFQUFtQixJQUFJcEIsRUFBYyxxQkFBc0IsQ0FDN0QsUUFBVyxHQUFNLFdBQWMsRUFDakMsQ0FBQyxFQUVELEdBQUksQ0FBQ1csRUFBUSxjQUFjUyxDQUFnQixFQUN6QyxPQUFBRCxFQUFFLGVBQWUsRUFDakJBLEVBQUUseUJBQXlCLEVBQ3BCLEdBR1QsR0FBSVIsRUFBUSxhQUFhLGFBQWEsR0FBS0EsRUFBUSxhQUFhLFNBQVMsRUFDdkUsT0FBQUQsRUFBWUMsRUFBU1EsRUFBRSxTQUFXQSxFQUFFLFFBQVEsRUFDNUNBLEVBQUUsZUFBZSxFQUNWLEdBRVBSLEVBQVVBLEVBQVEsV0FHeEIsRUFBRyxFQUFLLEVBRVIsT0FBTyxpQkFBaUIscUJBQXNCLFNBQVVRLEVBQUcsQ0FDekQsSUFBSUUsRUFBVUYsRUFBRSxPQUFPLGFBQWEsY0FBYyxFQUMvQ0UsR0FBVyxDQUFDLE9BQU8sUUFBUUEsQ0FBTyxHQUNuQ0YsRUFBRSxlQUFlLENBRXJCLEVBQUcsRUFBSyxDQUNWLEdBQUcsRUNsRkksSUFBSUcsR0FBV0MsR0FDakIsT0FBT0EsR0FBVSxXQUNYQSxFQUVPLFVBQVcsQ0FBRSxPQUFPQSxDQUFNLEVDTC9CQyxHQUFhLE9BQU8sS0FBUyxJQUFjLEtBQU8sS0FDbERDLEdBQVksT0FBTyxPQUFXLElBQWMsT0FBUyxLQUNyREMsR0FBU0YsSUFBY0MsSUFBYUMsR0FDcENDLEdBQWMsUUFDZEMsR0FBZ0IsQ0FBQyxXQUFZLEVBQUcsS0FBTSxFQUFHLFFBQVMsRUFBRyxPQUFRLENBQUMsRUFDOURDLEdBQWtCLElBQ2xCQyxHQUFrQixJQUNsQkMsR0FBaUIsQ0FDNUIsT0FBUSxTQUNSLFFBQVMsVUFDVCxPQUFRLFNBQ1IsUUFBUyxVQUNULFFBQVMsU0FDWCxFQUNhQyxHQUFpQixDQUM1QixNQUFPLFlBQ1AsTUFBTyxZQUNQLEtBQU0sV0FDTixNQUFPLFlBQ1AsTUFBTyxXQUNULEVBRWFDLEdBQWEsQ0FDeEIsU0FBVSxXQUNWLFVBQVcsV0FDYixFQUNhQyxHQUFhLENBQ3hCLFNBQVUsQ0FDWixFQ3JCcUJDLEdBQXJCLEtBQTBCLENBQ3hCLFlBQVlDLEVBQVNDLEVBQU9DLEVBQVNDLEVBQVEsQ0FDM0MsS0FBSyxRQUFVSCxFQUNmLEtBQUssTUFBUUMsRUFDYixLQUFLLFFBQVVDLEdBQVcsVUFBVyxDQUFFLE1BQU8sQ0FBQyxDQUFFLEVBQ2pELEtBQUssYUFBZSxLQUNwQixLQUFLLFFBQVVDLEVBQ2YsS0FBSyxhQUFlLEtBQ3BCLEtBQUssU0FBVyxDQUFDLEVBQ2pCLEtBQUssS0FBTyxFQUNkLENBTUEsT0FBT0EsRUFBUSxDQUNiLEtBQUssUUFBVUEsRUFDZixLQUFLLE1BQU0sRUFDWCxLQUFLLEtBQUssQ0FDWixDQUtBLE1BQU0sQ0FDRCxLQUFLLFlBQVksU0FBUyxJQUM3QixLQUFLLGFBQWEsRUFDbEIsS0FBSyxLQUFPLEdBQ1osS0FBSyxRQUFRLE9BQU8sS0FBSyxDQUN2QixNQUFPLEtBQUssUUFBUSxNQUNwQixNQUFPLEtBQUssTUFDWixRQUFTLEtBQUssUUFBUSxFQUN0QixJQUFLLEtBQUssSUFDVixTQUFVLEtBQUssUUFBUSxRQUFRLENBQ2pDLENBQUMsRUFDSCxDQU9BLFFBQVFDLEVBQVFDLEVBQVMsQ0FDdkIsT0FBRyxLQUFLLFlBQVlELENBQU0sR0FDeEJDLEVBQVMsS0FBSyxhQUFhLFFBQVEsRUFHckMsS0FBSyxTQUFTLEtBQUssQ0FBQyxPQUFBRCxFQUFRLFNBQUFDLENBQVEsQ0FBQyxFQUM5QixJQUNULENBS0EsT0FBTyxDQUNMLEtBQUssZUFBZSxFQUNwQixLQUFLLElBQU0sS0FDWCxLQUFLLFNBQVcsS0FDaEIsS0FBSyxhQUFlLEtBQ3BCLEtBQUssS0FBTyxFQUNkLENBS0EsYUFBYSxDQUFDLE9BQUFELEVBQVEsU0FBQUUsRUFBVSxLQUFBQyxDQUFJLEVBQUUsQ0FDcEMsS0FBSyxTQUFTLE9BQU9DLEdBQUtBLEVBQUUsU0FBV0osQ0FBTSxFQUMxQyxRQUFRSSxHQUFLQSxFQUFFLFNBQVNGLENBQVEsQ0FBQyxDQUN0QyxDQUtBLGdCQUFnQixDQUNWLEtBQUssVUFDVCxLQUFLLFFBQVEsSUFBSSxLQUFLLFFBQVEsQ0FDaEMsQ0FLQSxlQUFlLENBQ2IsYUFBYSxLQUFLLFlBQVksRUFDOUIsS0FBSyxhQUFlLElBQ3RCLENBS0EsY0FBYyxDQUNULEtBQUssY0FBZSxLQUFLLGNBQWMsRUFDMUMsS0FBSyxJQUFNLEtBQUssUUFBUSxPQUFPLFFBQVEsRUFDdkMsS0FBSyxTQUFXLEtBQUssUUFBUSxlQUFlLEtBQUssR0FBRyxFQUVwRCxLQUFLLFFBQVEsR0FBRyxLQUFLLFNBQVVKLEdBQVcsQ0FDeEMsS0FBSyxlQUFlLEVBQ3BCLEtBQUssY0FBYyxFQUNuQixLQUFLLGFBQWVBLEVBQ3BCLEtBQUssYUFBYUEsQ0FBTyxDQUMzQixDQUFDLEVBRUQsS0FBSyxhQUFlLFdBQVcsSUFBTSxDQUNuQyxLQUFLLFFBQVEsVUFBVyxDQUFDLENBQUMsQ0FDNUIsRUFBRyxLQUFLLE9BQU8sQ0FDakIsQ0FLQSxZQUFZRSxFQUFPLENBQ2pCLE9BQU8sS0FBSyxjQUFnQixLQUFLLGFBQWEsU0FBV0EsQ0FDM0QsQ0FLQSxRQUFRQSxFQUFRRSxFQUFTLENBQ3ZCLEtBQUssUUFBUSxRQUFRLEtBQUssU0FBVSxDQUFDLE9BQUFGLEVBQVEsU0FBQUUsQ0FBUSxDQUFDLENBQ3hELENBQ0YsRUM5R3FCRyxHQUFyQixLQUEyQixDQUN6QixZQUFZSixFQUFVSyxFQUFVLENBQzlCLEtBQUssU0FBV0wsRUFDaEIsS0FBSyxVQUFZSyxFQUNqQixLQUFLLE1BQVEsS0FDYixLQUFLLE1BQVEsQ0FDZixDQUVBLE9BQU8sQ0FDTCxLQUFLLE1BQVEsRUFDYixhQUFhLEtBQUssS0FBSyxDQUN6QixDQUtBLGlCQUFpQixDQUNmLGFBQWEsS0FBSyxLQUFLLEVBRXZCLEtBQUssTUFBUSxXQUFXLElBQU0sQ0FDNUIsS0FBSyxNQUFRLEtBQUssTUFBUSxFQUMxQixLQUFLLFNBQVMsQ0FDaEIsRUFBRyxLQUFLLFVBQVUsS0FBSyxNQUFRLENBQUMsQ0FBQyxDQUNuQyxDQUNGLEVDMUJxQkMsR0FBckIsS0FBNkIsQ0FDM0IsWUFBWUMsRUFBT0MsRUFBUUMsRUFBTyxDQUNoQyxLQUFLLE1BQVFuQixHQUFlLE9BQzVCLEtBQUssTUFBUWlCLEVBQ2IsS0FBSyxPQUFTMUIsR0FBUTJCLEdBQVUsQ0FBQyxDQUFDLEVBQ2xDLEtBQUssT0FBU0MsRUFDZCxLQUFLLFNBQVcsQ0FBQyxFQUNqQixLQUFLLFdBQWEsRUFDbEIsS0FBSyxRQUFVLEtBQUssT0FBTyxRQUMzQixLQUFLLFdBQWEsR0FDbEIsS0FBSyxTQUFXLElBQUlmLEdBQUssS0FBTUgsR0FBZSxLQUFNLEtBQUssT0FBUSxLQUFLLE9BQU8sRUFDN0UsS0FBSyxXQUFhLENBQUMsRUFDbkIsS0FBSyxnQkFBa0IsQ0FBQyxFQUV4QixLQUFLLFlBQWMsSUFBSWEsR0FBTSxJQUFNLENBQzlCLEtBQUssT0FBTyxZQUFZLEdBQUksS0FBSyxPQUFPLENBQzdDLEVBQUcsS0FBSyxPQUFPLGFBQWEsRUFDNUIsS0FBSyxnQkFBZ0IsS0FBSyxLQUFLLE9BQU8sUUFBUSxJQUFNLEtBQUssWUFBWSxNQUFNLENBQUMsQ0FBQyxFQUM3RSxLQUFLLGdCQUFnQixLQUFLLEtBQUssT0FBTyxPQUFPLElBQU0sQ0FDakQsS0FBSyxZQUFZLE1BQU0sRUFDcEIsS0FBSyxVQUFVLEdBQUksS0FBSyxPQUFPLENBQ3BDLENBQUMsQ0FDRCxFQUNBLEtBQUssU0FBUyxRQUFRLEtBQU0sSUFBTSxDQUNoQyxLQUFLLE1BQVFkLEdBQWUsT0FDNUIsS0FBSyxZQUFZLE1BQU0sRUFDdkIsS0FBSyxXQUFXLFFBQVFvQixHQUFhQSxFQUFVLEtBQUssQ0FBQyxFQUNyRCxLQUFLLFdBQWEsQ0FBQyxDQUNyQixDQUFDLEVBQ0QsS0FBSyxTQUFTLFFBQVEsUUFBUyxJQUFNLENBQ25DLEtBQUssTUFBUXBCLEdBQWUsUUFDekIsS0FBSyxPQUFPLFlBQVksR0FBSSxLQUFLLFlBQVksZ0JBQWdCLENBQ2xFLENBQUMsRUFDRCxLQUFLLFFBQVEsSUFBTSxDQUNqQixLQUFLLFlBQVksTUFBTSxFQUNwQixLQUFLLE9BQU8sVUFBVSxHQUFHLEtBQUssT0FBTyxJQUFJLFVBQVcsU0FBUyxLQUFLLFNBQVMsS0FBSyxRQUFRLEdBQUcsRUFDOUYsS0FBSyxNQUFRQSxHQUFlLE9BQzVCLEtBQUssT0FBTyxPQUFPLElBQUksQ0FDekIsQ0FBQyxFQUNELEtBQUssUUFBUXFCLEdBQVUsQ0FDbEIsS0FBSyxPQUFPLFVBQVUsR0FBRyxLQUFLLE9BQU8sSUFBSSxVQUFXLFNBQVMsS0FBSyxRQUFTQSxDQUFNLEVBQ2pGLEtBQUssVUFBVSxHQUFJLEtBQUssU0FBUyxNQUFNLEVBQzFDLEtBQUssTUFBUXJCLEdBQWUsUUFDekIsS0FBSyxPQUFPLFlBQVksR0FBSSxLQUFLLFlBQVksZ0JBQWdCLENBQ2xFLENBQUMsRUFDRCxLQUFLLFNBQVMsUUFBUSxVQUFXLElBQU0sQ0FDbEMsS0FBSyxPQUFPLFVBQVUsR0FBRyxLQUFLLE9BQU8sSUFBSSxVQUFXLFdBQVcsS0FBSyxVQUFVLEtBQUssUUFBUSxLQUFNLEtBQUssU0FBUyxPQUFPLEVBQ3pHLElBQUlJLEdBQUssS0FBTUgsR0FBZSxNQUFPVixHQUFRLENBQUMsQ0FBQyxFQUFHLEtBQUssT0FBTyxFQUNwRSxLQUFLLEVBQ2YsS0FBSyxNQUFRUyxHQUFlLFFBQzVCLEtBQUssU0FBUyxNQUFNLEVBQ2pCLEtBQUssT0FBTyxZQUFZLEdBQUksS0FBSyxZQUFZLGdCQUFnQixDQUNsRSxDQUFDLEVBQ0QsS0FBSyxHQUFHQyxHQUFlLE1BQU8sQ0FBQ00sRUFBU2UsSUFBUSxDQUM5QyxLQUFLLFFBQVEsS0FBSyxlQUFlQSxDQUFHLEVBQUdmLENBQU8sQ0FDaEQsQ0FBQyxDQUNILENBT0EsS0FBS0MsRUFBVSxLQUFLLFFBQVEsQ0FDMUIsR0FBRyxLQUFLLFdBQ04sTUFBTSxJQUFJLE1BQU0sNEZBQTRGLEVBRTVHLFlBQUssUUFBVUEsRUFDZixLQUFLLFdBQWEsR0FDbEIsS0FBSyxPQUFPLEVBQ0wsS0FBSyxRQUVoQixDQU1BLFFBQVFFLEVBQVMsQ0FDZixLQUFLLEdBQUdULEdBQWUsTUFBT1MsQ0FBUSxDQUN4QyxDQU1BLFFBQVFBLEVBQVMsQ0FDZixPQUFPLEtBQUssR0FBR1QsR0FBZSxNQUFPb0IsR0FBVVgsRUFBU1csQ0FBTSxDQUFDLENBQ2pFLENBbUJBLEdBQUdmLEVBQU9JLEVBQVMsQ0FDakIsSUFBSVksRUFBTSxLQUFLLGFBQ2YsWUFBSyxTQUFTLEtBQUssQ0FBQyxNQUFBaEIsRUFBTyxJQUFBZ0IsRUFBSyxTQUFBWixDQUFRLENBQUMsRUFDbENZLENBQ1QsQ0FvQkEsSUFBSWhCLEVBQU9nQixFQUFJLENBQ2IsS0FBSyxTQUFXLEtBQUssU0FBUyxPQUFRQyxHQUM3QixFQUFFQSxFQUFLLFFBQVVqQixJQUFVLE9BQU9nQixFQUFRLEtBQWVBLElBQVFDLEVBQUssS0FDOUUsQ0FDSCxDQUtBLFNBQVMsQ0FBRSxPQUFPLEtBQUssT0FBTyxZQUFZLEdBQUssS0FBSyxTQUFTLENBQUUsQ0FrQi9ELEtBQUtqQixFQUFPQyxFQUFTQyxFQUFVLEtBQUssUUFBUSxDQUUxQyxHQURBRCxFQUFVQSxHQUFXLENBQUMsRUFDbkIsQ0FBQyxLQUFLLFdBQ1AsTUFBTSxJQUFJLE1BQU0sa0JBQWtCRCxVQUFjLEtBQUssaUVBQWlFLEVBRXhILElBQUljLEVBQVksSUFBSWhCLEdBQUssS0FBTUUsRUFBTyxVQUFXLENBQUUsT0FBT0MsQ0FBUSxFQUFHQyxDQUFPLEVBQzVFLE9BQUcsS0FBSyxRQUFRLEVBQ2RZLEVBQVUsS0FBSyxHQUVmQSxFQUFVLGFBQWEsRUFDdkIsS0FBSyxXQUFXLEtBQUtBLENBQVMsR0FHekJBLENBQ1QsQ0FrQkEsTUFBTVosRUFBVSxLQUFLLFFBQVEsQ0FDM0IsS0FBSyxZQUFZLE1BQU0sRUFDdkIsS0FBSyxTQUFTLGNBQWMsRUFFNUIsS0FBSyxNQUFRUixHQUFlLFFBQzVCLElBQUl3QixFQUFVLElBQU0sQ0FDZixLQUFLLE9BQU8sVUFBVSxHQUFHLEtBQUssT0FBTyxJQUFJLFVBQVcsU0FBUyxLQUFLLE9BQU8sRUFDNUUsS0FBSyxRQUFRdkIsR0FBZSxNQUFPLE9BQU8sQ0FDNUMsRUFDSXdCLEVBQVksSUFBSXJCLEdBQUssS0FBTUgsR0FBZSxNQUFPVixHQUFRLENBQUMsQ0FBQyxFQUFHaUIsQ0FBTyxFQUN6RSxPQUFBaUIsRUFBVSxRQUFRLEtBQU0sSUFBTUQsRUFBUSxDQUFDLEVBQ3BDLFFBQVEsVUFBVyxJQUFNQSxFQUFRLENBQUMsRUFDckNDLEVBQVUsS0FBSyxFQUNYLEtBQUssUUFBUSxHQUFJQSxFQUFVLFFBQVEsS0FBTSxDQUFDLENBQUMsRUFFeENBLENBQ1QsQ0FjQSxVQUFVQyxFQUFRbkIsRUFBU0ssRUFBSyxDQUFFLE9BQU9MLENBQVEsQ0FLakQsU0FBU1UsRUFBT1gsRUFBT0MsRUFBU29CLEVBQVEsQ0FDdEMsT0FBRyxLQUFLLFFBQVVWLEVBQWUsR0FFOUJVLEdBQVdBLElBQVksS0FBSyxRQUFRLEdBQ2xDLEtBQUssT0FBTyxVQUFVLEdBQUcsS0FBSyxPQUFPLElBQUksVUFBVyw0QkFBNkIsQ0FBQyxNQUFBVixFQUFPLE1BQUFYLEVBQU8sUUFBQUMsRUFBUyxRQUFBb0IsQ0FBTyxDQUFDLEVBQzdHLElBRUEsRUFFWCxDQUtBLFNBQVMsQ0FBRSxPQUFPLEtBQUssU0FBUyxHQUFJLENBS3BDLE9BQU9uQixFQUFVLEtBQUssUUFBUSxDQUN6QixLQUFLLFVBQVUsSUFDbEIsS0FBSyxPQUFPLGVBQWUsS0FBSyxLQUFLLEVBQ3JDLEtBQUssTUFBUVIsR0FBZSxRQUM1QixLQUFLLFNBQVMsT0FBT1EsQ0FBTyxFQUM5QixDQUtBLFFBQVFGLEVBQU9DLEVBQVNlLEVBQUtLLEVBQVEsQ0FDbkMsSUFBSUMsRUFBaUIsS0FBSyxVQUFVdEIsRUFBT0MsRUFBU2UsRUFBS0ssQ0FBTyxFQUNoRSxHQUFHcEIsR0FBVyxDQUFDcUIsRUFBaUIsTUFBTSxJQUFJLE1BQU0sNkVBQTZFLEVBRTdILElBQUlDLEVBQWdCLEtBQUssU0FBUyxPQUFPTixHQUFRQSxFQUFLLFFBQVVqQixDQUFLLEVBRXJFLFFBQVF3QixFQUFJLEVBQUdBLEVBQUlELEVBQWMsT0FBUUMsSUFDNUJELEVBQWNDLENBQUMsRUFDckIsU0FBU0YsRUFBZ0JOLEVBQUtLLEdBQVcsS0FBSyxRQUFRLENBQUMsQ0FFaEUsQ0FLQSxlQUFlTCxFQUFJLENBQUUsTUFBTyxjQUFjQSxHQUFNLENBS2hELFVBQVUsQ0FBRSxPQUFPLEtBQUssUUFBVXRCLEdBQWUsTUFBTyxDQUt4RCxXQUFXLENBQUUsT0FBTyxLQUFLLFFBQVVBLEdBQWUsT0FBUSxDQUsxRCxVQUFVLENBQUUsT0FBTyxLQUFLLFFBQVVBLEdBQWUsTUFBTyxDQUt4RCxXQUFXLENBQUUsT0FBTyxLQUFLLFFBQVVBLEdBQWUsT0FBUSxDQUsxRCxXQUFXLENBQUUsT0FBTyxLQUFLLFFBQVVBLEdBQWUsT0FBUSxDQUM1RCxFQ2pUcUIrQixHQUFyQixLQUEwQixDQUV4QixPQUFPLFFBQVFDLEVBQVFDLEVBQVVDLEVBQVFDLEVBQU0zQixFQUFTNEIsRUFBVzFCLEVBQVMsQ0FDMUUsR0FBR2YsR0FBTyxlQUFlLENBQ3ZCLElBQUkwQyxFQUFNLElBQUkxQyxHQUFPLGVBQ3JCLE9BQU8sS0FBSyxlQUFlMEMsRUFBS0wsRUFBUUMsRUFBVUUsRUFBTTNCLEVBQVM0QixFQUFXMUIsQ0FBUSxNQUMvRSxDQUNMLElBQUkyQixFQUFNLElBQUkxQyxHQUFPLGVBQ3JCLE9BQU8sS0FBSyxXQUFXMEMsRUFBS0wsRUFBUUMsRUFBVUMsRUFBUUMsRUFBTTNCLEVBQVM0QixFQUFXMUIsQ0FBUSxFQUU1RixDQUVBLE9BQU8sZUFBZTJCLEVBQUtMLEVBQVFDLEVBQVVFLEVBQU0zQixFQUFTNEIsRUFBVzFCLEVBQVMsQ0FDOUUsT0FBQTJCLEVBQUksUUFBVTdCLEVBQ2Q2QixFQUFJLEtBQUtMLEVBQVFDLENBQVEsRUFDekJJLEVBQUksT0FBUyxJQUFNLENBQ2pCLElBQUkxQixFQUFXLEtBQUssVUFBVTBCLEVBQUksWUFBWSxFQUM5QzNCLEdBQVlBLEVBQVNDLENBQVEsQ0FDL0IsRUFDR3lCLElBQVlDLEVBQUksVUFBWUQsR0FHL0JDLEVBQUksV0FBYSxJQUFNLENBQUUsRUFFekJBLEVBQUksS0FBS0YsQ0FBSSxFQUNORSxDQUNULENBRUEsT0FBTyxXQUFXQSxFQUFLTCxFQUFRQyxFQUFVQyxFQUFRQyxFQUFNM0IsRUFBUzRCLEVBQVcxQixFQUFTLENBQ2xGLE9BQUEyQixFQUFJLEtBQUtMLEVBQVFDLEVBQVUsRUFBSSxFQUMvQkksRUFBSSxRQUFVN0IsRUFDZDZCLEVBQUksaUJBQWlCLGVBQWdCSCxDQUFNLEVBQzNDRyxFQUFJLFFBQVUsSUFBTTNCLEdBQVlBLEVBQVMsSUFBSSxFQUM3QzJCLEVBQUksbUJBQXFCLElBQU0sQ0FDN0IsR0FBR0EsRUFBSSxhQUFlbEMsR0FBVyxVQUFZTyxFQUFTLENBQ3BELElBQUlDLEVBQVcsS0FBSyxVQUFVMEIsRUFBSSxZQUFZLEVBQzlDM0IsRUFBU0MsQ0FBUSxFQUVyQixFQUNHeUIsSUFBWUMsRUFBSSxVQUFZRCxHQUUvQkMsRUFBSSxLQUFLRixDQUFJLEVBQ05FLENBQ1QsQ0FFQSxPQUFPLFVBQVVDLEVBQUssQ0FDcEIsR0FBRyxDQUFDQSxHQUFRQSxJQUFTLEdBQUssT0FBTyxLQUVqQyxHQUFJLENBQ0YsT0FBTyxLQUFLLE1BQU1BLENBQUksQ0FDeEIsTUFBQSxDQUNFLGdCQUFXLFFBQVEsSUFBSSxnQ0FBaUNBLENBQUksRUFDckQsSUFDVCxDQUNGLENBRUEsT0FBTyxVQUFVQyxFQUFLQyxFQUFVLENBQzlCLElBQUlDLEVBQVcsQ0FBQyxFQUNoQixRQUFRQyxLQUFPSCxFQUFJLENBQ2pCLEdBQUcsQ0FBQyxPQUFPLFVBQVUsZUFBZSxLQUFLQSxFQUFLRyxDQUFHLEVBQUksU0FDckQsSUFBSUMsRUFBV0gsRUFBWSxHQUFHQSxLQUFhRSxLQUFTQSxFQUNoREUsRUFBV0wsRUFBSUcsQ0FBRyxFQUNuQixPQUFPRSxHQUFhLFNBQ3JCSCxFQUFTLEtBQUssS0FBSyxVQUFVRyxFQUFVRCxDQUFRLENBQUMsRUFFaERGLEVBQVMsS0FBSyxtQkFBbUJFLENBQVEsRUFBSSxJQUFNLG1CQUFtQkMsQ0FBUSxDQUFDLEVBR25GLE9BQU9ILEVBQVMsS0FBSyxHQUFHLENBQzFCLENBRUEsT0FBTyxhQUFhSSxFQUFLM0IsRUFBTyxDQUM5QixHQUFHLE9BQU8sS0FBS0EsQ0FBTSxFQUFFLFNBQVcsRUFBSSxPQUFPMkIsRUFFN0MsSUFBSUMsRUFBU0QsRUFBSSxNQUFNLElBQUksRUFBSSxJQUFNLElBQ3JDLE1BQU8sR0FBR0EsSUFBTUMsSUFBUyxLQUFLLFVBQVU1QixDQUFNLEdBQ2hELENBQ0YsRUMzRUk2QixHQUF1QkMsR0FBVyxDQUNwQyxJQUFJQyxFQUFTLEdBQ1RDLEVBQVEsSUFBSSxXQUFXRixDQUFNLEVBQzdCRyxFQUFNRCxFQUFNLFdBQ2hCLFFBQVFwQixFQUFJLEVBQUdBLEVBQUlxQixFQUFLckIsSUFBTW1CLEdBQVUsT0FBTyxhQUFhQyxFQUFNcEIsQ0FBQyxDQUFDLEVBQ3BFLE9BQU8sS0FBS21CLENBQU0sQ0FDcEIsRUFFcUJHLEdBQXJCLEtBQThCLENBRTVCLFlBQVluQixFQUFTLENBQ25CLEtBQUssU0FBVyxLQUNoQixLQUFLLE1BQVEsS0FDYixLQUFLLGNBQWdCLEdBQ3JCLEtBQUssS0FBTyxJQUFJLElBQ2hCLEtBQUssaUJBQW1CLEdBQ3hCLEtBQUssYUFBZSxLQUNwQixLQUFLLGtCQUFvQixLQUN6QixLQUFLLFlBQWMsQ0FBQyxFQUNwQixLQUFLLE9BQVMsVUFBVyxDQUFFLEVBQzNCLEtBQUssUUFBVSxVQUFXLENBQUUsRUFDNUIsS0FBSyxVQUFZLFVBQVcsQ0FBRSxFQUM5QixLQUFLLFFBQVUsVUFBVyxDQUFFLEVBQzVCLEtBQUssYUFBZSxLQUFLLGtCQUFrQkEsQ0FBUSxFQUNuRCxLQUFLLFdBQWFwQyxHQUFjLFdBRWhDLFdBQVcsSUFBTSxLQUFLLEtBQUssRUFBRyxDQUFDLENBQ2pDLENBRUEsa0JBQWtCb0MsRUFBUyxDQUN6QixPQUFRQSxFQUNMLFFBQVEsUUFBUyxTQUFTLEVBQzFCLFFBQVEsU0FBVSxVQUFVLEVBQzVCLFFBQVEsSUFBSSxPQUFPLFFBQVcvQixHQUFXLFNBQVMsRUFBRyxNQUFRQSxHQUFXLFFBQVEsQ0FDckYsQ0FFQSxhQUFhLENBQ1gsT0FBTzZCLEdBQUssYUFBYSxLQUFLLGFBQWMsQ0FBQyxNQUFPLEtBQUssS0FBSyxDQUFDLENBQ2pFLENBRUEsY0FBY3NCLEVBQU1oQyxFQUFRaUMsRUFBUyxDQUNuQyxLQUFLLE1BQU1ELEVBQU1oQyxFQUFRaUMsQ0FBUSxFQUNqQyxLQUFLLFdBQWF6RCxHQUFjLFVBQ2xDLENBRUEsV0FBVyxDQUNULEtBQUssUUFBUSxTQUFTLEVBQ3RCLEtBQUssY0FBYyxLQUFNLFVBQVcsRUFBSyxDQUMzQyxDQUVBLFVBQVUsQ0FBRSxPQUFPLEtBQUssYUFBZUEsR0FBYyxNQUFRLEtBQUssYUFBZUEsR0FBYyxVQUFXLENBRTFHLE1BQU0sQ0FDSixLQUFLLEtBQUssTUFBTyxtQkFBb0IsS0FBTSxJQUFNLEtBQUssVUFBVSxFQUFHeUMsR0FBUSxDQUN6RSxHQUFHQSxFQUFLLENBQ04sR0FBSSxDQUFDLE9BQUE3QixFQUFRLE1BQUE4QyxFQUFPLFNBQUFDLENBQVEsRUFBSWxCLEVBQ2hDLEtBQUssTUFBUWlCLE9BRWI5QyxFQUFTLEVBR1gsT0FBT0EsRUFBTyxDQUNaLElBQUssS0FDSCtDLEVBQVMsUUFBUUMsR0FBTyxDQW1CdEIsV0FBVyxJQUFNLEtBQUssVUFBVSxDQUFDLEtBQU1BLENBQUcsQ0FBQyxFQUFHLENBQUMsQ0FDakQsQ0FBQyxFQUNELEtBQUssS0FBSyxFQUNWLE1BQ0YsSUFBSyxLQUNILEtBQUssS0FBSyxFQUNWLE1BQ0YsSUFBSyxLQUNILEtBQUssV0FBYTVELEdBQWMsS0FDaEMsS0FBSyxPQUFPLENBQUMsQ0FBQyxFQUNkLEtBQUssS0FBSyxFQUNWLE1BQ0YsSUFBSyxLQUNILEtBQUssUUFBUSxHQUFHLEVBQ2hCLEtBQUssTUFBTSxLQUFNLFlBQWEsRUFBSyxFQUNuQyxNQUNGLElBQUssR0FDTCxJQUFLLEtBQ0gsS0FBSyxRQUFRLEdBQUcsRUFDaEIsS0FBSyxjQUFjLEtBQU0sd0JBQXlCLEdBQUcsRUFDckQsTUFDRixRQUFTLE1BQU0sSUFBSSxNQUFNLHlCQUF5QlksR0FBUSxDQUM1RCxDQUNGLENBQUMsQ0FDSCxDQU1BLEtBQUswQixFQUFLLENBQ0wsT0FBT0EsR0FBVSxXQUFXQSxFQUFPWSxHQUFvQlosQ0FBSSxHQUMzRCxLQUFLLGFBQ04sS0FBSyxhQUFhLEtBQUtBLENBQUksRUFDbkIsS0FBSyxpQkFDYixLQUFLLFlBQVksS0FBS0EsQ0FBSSxHQUUxQixLQUFLLGFBQWUsQ0FBQ0EsQ0FBSSxFQUN6QixLQUFLLGtCQUFvQixXQUFXLElBQU0sQ0FDeEMsS0FBSyxVQUFVLEtBQUssWUFBWSxFQUNoQyxLQUFLLGFBQWUsSUFDdEIsRUFBRyxDQUFDLEVBRVIsQ0FFQSxVQUFVcUIsRUFBUyxDQUNqQixLQUFLLGlCQUFtQixHQUN4QixLQUFLLEtBQUssT0FBUSx1QkFBd0JBLEVBQVMsS0FBSztDQUFJLEVBQUcsSUFBTSxLQUFLLFFBQVEsU0FBUyxFQUFHbEIsR0FBUSxDQUNwRyxLQUFLLGlCQUFtQixHQUNyQixDQUFDQSxHQUFRQSxFQUFLLFNBQVcsS0FDMUIsS0FBSyxRQUFRQSxHQUFRQSxFQUFLLE1BQU0sRUFDaEMsS0FBSyxjQUFjLEtBQU0sd0JBQXlCLEVBQUssR0FDL0MsS0FBSyxZQUFZLE9BQVMsSUFDbEMsS0FBSyxVQUFVLEtBQUssV0FBVyxFQUMvQixLQUFLLFlBQWMsQ0FBQyxFQUV4QixDQUFDLENBQ0gsQ0FFQSxNQUFNZSxFQUFNaEMsRUFBUWlDLEVBQVMsQ0FDM0IsUUFBUWpCLEtBQU8sS0FBSyxLQUFPQSxFQUFJLE1BQU0sRUFDckMsS0FBSyxXQUFheEMsR0FBYyxPQUNoQyxJQUFJNkQsRUFBTyxPQUFPLE9BQU8sQ0FBQyxLQUFNLElBQU0sT0FBUSxPQUFXLFNBQVUsRUFBSSxFQUFHLENBQUMsS0FBQUwsRUFBTSxPQUFBaEMsRUFBUSxTQUFBaUMsQ0FBUSxDQUFDLEVBQ2xHLEtBQUssWUFBYyxDQUFDLEVBQ3BCLGFBQWEsS0FBSyxpQkFBaUIsRUFDbkMsS0FBSyxrQkFBb0IsS0FDdEIsT0FBTyxXQUFnQixJQUN4QixLQUFLLFFBQVEsSUFBSSxXQUFXLFFBQVNJLENBQUksQ0FBQyxFQUUxQyxLQUFLLFFBQVFBLENBQUksQ0FFckIsQ0FFQSxLQUFLMUIsRUFBUTJCLEVBQWF4QixFQUFNeUIsRUFBaUJsRCxFQUFTLENBQ3hELElBQUkyQixFQUNBRCxFQUFZLElBQU0sQ0FDcEIsS0FBSyxLQUFLLE9BQU9DLENBQUcsRUFDcEJ1QixFQUFnQixDQUNsQixFQUNBdkIsRUFBTU4sR0FBSyxRQUFRQyxFQUFRLEtBQUssWUFBWSxFQUFHMkIsRUFBYXhCLEVBQU0sS0FBSyxRQUFTQyxFQUFXRSxHQUFRLENBQ2pHLEtBQUssS0FBSyxPQUFPRCxDQUFHLEVBQ2pCLEtBQUssU0FBUyxHQUFJM0IsRUFBUzRCLENBQUksQ0FDcEMsQ0FBQyxFQUNELEtBQUssS0FBSyxJQUFJRCxDQUFHLENBQ25CLENBQ0YsRUV6S0EsSUFBT3dCLEdBQVEsQ0FDYixjQUFlLEVBQ2YsWUFBYSxFQUNiLE1BQU8sQ0FBQyxLQUFNLEVBQUcsTUFBTyxFQUFHLFVBQVcsQ0FBQyxFQUV2QyxPQUFPQyxFQUFLQyxFQUFTLENBQ25CLEdBQUdELEVBQUksUUFBUSxjQUFnQixZQUM3QixPQUFPQyxFQUFTLEtBQUssYUFBYUQsQ0FBRyxDQUFDLEVBQ2pDLENBQ0wsSUFBSUUsRUFBVSxDQUFDRixFQUFJLFNBQVVBLEVBQUksSUFBS0EsRUFBSSxNQUFPQSxFQUFJLE1BQU9BLEVBQUksT0FBTyxFQUN2RSxPQUFPQyxFQUFTLEtBQUssVUFBVUMsQ0FBTyxDQUFDLEVBRTNDLEVBRUEsT0FBT0MsRUFBWUYsRUFBUyxDQUMxQixHQUFHRSxFQUFXLGNBQWdCLFlBQzVCLE9BQU9GLEVBQVMsS0FBSyxhQUFhRSxDQUFVLENBQUMsRUFDeEMsQ0FDTCxHQUFJLENBQUNDLEVBQVVDLEVBQUtDLEVBQU9DLEVBQU9MLENBQU8sRUFBSSxLQUFLLE1BQU1DLENBQVUsRUFDbEUsT0FBT0YsRUFBUyxDQUFDLFNBQUFHLEVBQVUsSUFBQUMsRUFBSyxNQUFBQyxFQUFPLE1BQUFDLEVBQU8sUUFBQUwsQ0FBTyxDQUFDLEVBRTFELEVBSUEsYUFBYU0sRUFBUSxDQUNuQixHQUFJLENBQUMsU0FBQUosRUFBVSxJQUFBQyxFQUFLLE1BQUFFLEVBQU8sTUFBQUQsRUFBTyxRQUFBSixDQUFPLEVBQUlNLEVBQ3pDQyxFQUFhLEtBQUssWUFBY0wsRUFBUyxPQUFTQyxFQUFJLE9BQVNDLEVBQU0sT0FBU0MsRUFBTSxPQUNwRkcsRUFBUyxJQUFJLFlBQVksS0FBSyxjQUFnQkQsQ0FBVSxFQUN4REUsRUFBTyxJQUFJLFNBQVNELENBQU0sRUFDMUJFLEVBQVMsRUFFYkQsRUFBSyxTQUFTQyxJQUFVLEtBQUssTUFBTSxJQUFJLEVBQ3ZDRCxFQUFLLFNBQVNDLElBQVVSLEVBQVMsTUFBTSxFQUN2Q08sRUFBSyxTQUFTQyxJQUFVUCxFQUFJLE1BQU0sRUFDbENNLEVBQUssU0FBU0MsSUFBVU4sRUFBTSxNQUFNLEVBQ3BDSyxFQUFLLFNBQVNDLElBQVVMLEVBQU0sTUFBTSxFQUNwQyxNQUFNLEtBQUtILEVBQVVTLEdBQVFGLEVBQUssU0FBU0MsSUFBVUMsRUFBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQ3hFLE1BQU0sS0FBS1IsRUFBS1EsR0FBUUYsRUFBSyxTQUFTQyxJQUFVQyxFQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFDbkUsTUFBTSxLQUFLUCxFQUFPTyxHQUFRRixFQUFLLFNBQVNDLElBQVVDLEVBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUNyRSxNQUFNLEtBQUtOLEVBQU9NLEdBQVFGLEVBQUssU0FBU0MsSUFBVUMsRUFBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBRXJFLElBQUlDLEVBQVcsSUFBSSxXQUFXSixFQUFPLFdBQWFSLEVBQVEsVUFBVSxFQUNwRSxPQUFBWSxFQUFTLElBQUksSUFBSSxXQUFXSixDQUFNLEVBQUcsQ0FBQyxFQUN0Q0ksRUFBUyxJQUFJLElBQUksV0FBV1osQ0FBTyxFQUFHUSxFQUFPLFVBQVUsRUFFaERJLEVBQVMsTUFDbEIsRUFFQSxhQUFhQyxFQUFPLENBQ2xCLElBQUlKLEVBQU8sSUFBSSxTQUFTSSxDQUFNLEVBQzFCQyxFQUFPTCxFQUFLLFNBQVMsQ0FBQyxFQUN0Qk0sRUFBVSxJQUFJLFlBQ2xCLE9BQU9ELEVBQUssQ0FDVixLQUFLLEtBQUssTUFBTSxLQUFNLE9BQU8sS0FBSyxXQUFXRCxFQUFRSixFQUFNTSxDQUFPLEVBQ2xFLEtBQUssS0FBSyxNQUFNLE1BQU8sT0FBTyxLQUFLLFlBQVlGLEVBQVFKLEVBQU1NLENBQU8sRUFDcEUsS0FBSyxLQUFLLE1BQU0sVUFBVyxPQUFPLEtBQUssZ0JBQWdCRixFQUFRSixFQUFNTSxDQUFPLENBQzlFLENBQ0YsRUFFQSxXQUFXRixFQUFRSixFQUFNTSxFQUFRLENBQy9CLElBQUlDLEVBQWNQLEVBQUssU0FBUyxDQUFDLEVBQzdCUSxFQUFZUixFQUFLLFNBQVMsQ0FBQyxFQUMzQlMsRUFBWVQsRUFBSyxTQUFTLENBQUMsRUFDM0JDLEVBQVMsS0FBSyxjQUFnQixLQUFLLFlBQWMsRUFDakRTLEVBQVVKLEVBQVEsT0FBT0YsRUFBTyxNQUFNSCxFQUFRQSxFQUFTTSxDQUFXLENBQUMsRUFDdkVOLEVBQVNBLEVBQVNNLEVBQ2xCLElBQUlaLEVBQVFXLEVBQVEsT0FBT0YsRUFBTyxNQUFNSCxFQUFRQSxFQUFTTyxDQUFTLENBQUMsRUFDbkVQLEVBQVNBLEVBQVNPLEVBQ2xCLElBQUlaLEVBQVFVLEVBQVEsT0FBT0YsRUFBTyxNQUFNSCxFQUFRQSxFQUFTUSxDQUFTLENBQUMsRUFDbkVSLEVBQVNBLEVBQVNRLEVBQ2xCLElBQUlFLEVBQU9QLEVBQU8sTUFBTUgsRUFBUUcsRUFBTyxVQUFVLEVBQ2pELE1BQU8sQ0FBQyxTQUFVTSxFQUFTLElBQUssS0FBTSxNQUFBZixFQUFjLE1BQUFDLEVBQWMsUUFBU2UsQ0FBSSxDQUNqRixFQUVBLFlBQVlQLEVBQVFKLEVBQU1NLEVBQVEsQ0FDaEMsSUFBSUMsRUFBY1AsRUFBSyxTQUFTLENBQUMsRUFDN0JZLEVBQVVaLEVBQUssU0FBUyxDQUFDLEVBQ3pCUSxFQUFZUixFQUFLLFNBQVMsQ0FBQyxFQUMzQlMsRUFBWVQsRUFBSyxTQUFTLENBQUMsRUFDM0JDLEVBQVMsS0FBSyxjQUFnQixLQUFLLFlBQ25DUyxFQUFVSixFQUFRLE9BQU9GLEVBQU8sTUFBTUgsRUFBUUEsRUFBU00sQ0FBVyxDQUFDLEVBQ3ZFTixFQUFTQSxFQUFTTSxFQUNsQixJQUFJYixFQUFNWSxFQUFRLE9BQU9GLEVBQU8sTUFBTUgsRUFBUUEsRUFBU1csQ0FBTyxDQUFDLEVBQy9EWCxFQUFTQSxFQUFTVyxFQUNsQixJQUFJakIsRUFBUVcsRUFBUSxPQUFPRixFQUFPLE1BQU1ILEVBQVFBLEVBQVNPLENBQVMsQ0FBQyxFQUNuRVAsRUFBU0EsRUFBU08sRUFDbEIsSUFBSVosRUFBUVUsRUFBUSxPQUFPRixFQUFPLE1BQU1ILEVBQVFBLEVBQVNRLENBQVMsQ0FBQyxFQUNuRVIsRUFBU0EsRUFBU1EsRUFDbEIsSUFBSUUsRUFBT1AsRUFBTyxNQUFNSCxFQUFRRyxFQUFPLFVBQVUsRUFDN0NiLEVBQVUsQ0FBQyxPQUFRSyxFQUFPLFNBQVVlLENBQUksRUFDNUMsTUFBTyxDQUFDLFNBQVVELEVBQVMsSUFBQWhCLEVBQVUsTUFBQUMsRUFBYyxNQUFPa0IsR0FBZSxNQUFPLFFBQUF0QixDQUFnQixDQUNsRyxFQUVBLGdCQUFnQmEsRUFBUUosRUFBTU0sRUFBUSxDQUNwQyxJQUFJRSxFQUFZUixFQUFLLFNBQVMsQ0FBQyxFQUMzQlMsRUFBWVQsRUFBSyxTQUFTLENBQUMsRUFDM0JDLEVBQVMsS0FBSyxjQUFnQixFQUM5Qk4sRUFBUVcsRUFBUSxPQUFPRixFQUFPLE1BQU1ILEVBQVFBLEVBQVNPLENBQVMsQ0FBQyxFQUNuRVAsRUFBU0EsRUFBU08sRUFDbEIsSUFBSVosRUFBUVUsRUFBUSxPQUFPRixFQUFPLE1BQU1ILEVBQVFBLEVBQVNRLENBQVMsQ0FBQyxFQUNuRVIsRUFBU0EsRUFBU1EsRUFDbEIsSUFBSUUsRUFBT1AsRUFBTyxNQUFNSCxFQUFRRyxFQUFPLFVBQVUsRUFFakQsTUFBTyxDQUFDLFNBQVUsS0FBTSxJQUFLLEtBQU0sTUFBQVQsRUFBYyxNQUFBQyxFQUFjLFFBQVNlLENBQUksQ0FDOUUsQ0FDRixFQ0ZxQkcsR0FBckIsS0FBNEIsQ0FDMUIsWUFBWUMsRUFBVUMsRUFBTyxDQUFDLEVBQUUsQ0FDOUIsS0FBSyxxQkFBdUIsQ0FBQyxLQUFNLENBQUMsRUFBRyxNQUFPLENBQUMsRUFBRyxNQUFPLENBQUMsRUFBRyxRQUFTLENBQUMsQ0FBQyxFQUN4RSxLQUFLLFNBQVcsQ0FBQyxFQUNqQixLQUFLLFdBQWEsQ0FBQyxFQUNuQixLQUFLLElBQU0sRUFDWCxLQUFLLFFBQVVBLEVBQUssU0FBV0MsR0FDL0IsS0FBSyxVQUFZRCxFQUFLLFdBQWFFLEdBQU8sV0FBYUMsR0FDdkQsS0FBSyx5QkFBMkIsR0FDaEMsS0FBSyxtQkFBcUJILEVBQUssbUJBQy9CLEtBQUssY0FBZ0IsS0FDckIsS0FBSyxhQUFlQSxFQUFLLGdCQUFtQkUsSUFBVUEsR0FBTyxlQUM3RCxLQUFLLHVCQUF5QixFQUM5QixLQUFLLGVBQWlCOUIsR0FBVyxPQUFPLEtBQUtBLEVBQVUsRUFDdkQsS0FBSyxlQUFpQkEsR0FBVyxPQUFPLEtBQUtBLEVBQVUsRUFDdkQsS0FBSyxjQUFnQixHQUNyQixLQUFLLFdBQWE0QixFQUFLLFlBQWMsY0FDckMsS0FBSyxhQUFlLEVBQ2pCLEtBQUssWUFBY0csSUFDcEIsS0FBSyxPQUFTSCxFQUFLLFFBQVUsS0FBSyxlQUNsQyxLQUFLLE9BQVNBLEVBQUssUUFBVSxLQUFLLGlCQUVsQyxLQUFLLE9BQVMsS0FBSyxlQUNuQixLQUFLLE9BQVMsS0FBSyxnQkFFckIsSUFBSUksRUFBK0IsS0FDaENDLElBQWFBLEdBQVUsbUJBQ3hCQSxHQUFVLGlCQUFpQixXQUFZQyxHQUFNLENBQ3hDLEtBQUssT0FDTixLQUFLLFdBQVcsRUFDaEJGLEVBQStCLEtBQUssYUFFeEMsQ0FBQyxFQUNEQyxHQUFVLGlCQUFpQixXQUFZQyxHQUFNLENBQ3hDRixJQUFpQyxLQUFLLGVBQ3ZDQSxFQUErQixLQUMvQixLQUFLLFFBQVEsRUFFakIsQ0FBQyxHQUVILEtBQUssb0JBQXNCSixFQUFLLHFCQUF1QixJQUN2RCxLQUFLLGNBQWlCTyxHQUNqQlAsRUFBSyxjQUNDQSxFQUFLLGNBQWNPLENBQUssRUFFeEIsQ0FBQyxJQUFNLElBQU0sR0FBSSxFQUFFQSxFQUFRLENBQUMsR0FBSyxJQUc1QyxLQUFLLGlCQUFvQkEsR0FDcEJQLEVBQUssaUJBQ0NBLEVBQUssaUJBQWlCTyxDQUFLLEVBRTNCLENBQUMsR0FBSSxHQUFJLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFNLEdBQUksRUFBRUEsRUFBUSxDQUFDLEdBQUssSUFHdkUsS0FBSyxPQUFTUCxFQUFLLFFBQVUsS0FDMUIsQ0FBQyxLQUFLLFFBQVVBLEVBQUssUUFDdEIsS0FBSyxPQUFTLENBQUNYLEVBQU1oQixFQUFLc0IsSUFBUyxDQUFFLFFBQVEsSUFBSSxHQUFHTixNQUFTaEIsSUFBT3NCLENBQUksQ0FBRSxHQUU1RSxLQUFLLGtCQUFvQkssRUFBSyxtQkFBcUIsSUFDbkQsS0FBSyxPQUFTUSxHQUFRUixFQUFLLFFBQVUsQ0FBQyxDQUFDLEVBQ3ZDLEtBQUssU0FBVyxHQUFHRCxLQUFZVSxHQUFXLFlBQzFDLEtBQUssSUFBTVQsRUFBSyxLQUFPVSxHQUN2QixLQUFLLHNCQUF3QixLQUM3QixLQUFLLGVBQWlCLEtBQ3RCLEtBQUssb0JBQXNCLEtBQzNCLEtBQUssZUFBaUIsSUFBSUMsR0FBTSxJQUFNLENBQ3BDLEtBQUssU0FBUyxJQUFNLEtBQUssUUFBUSxDQUFDLENBQ3BDLEVBQUcsS0FBSyxnQkFBZ0IsQ0FDMUIsQ0FLQSxzQkFBc0IsQ0FBRSxPQUFPUixFQUFTLENBUXhDLGlCQUFpQlMsRUFBYSxDQUM1QixLQUFLLGVBQ0wsS0FBSyxjQUFnQixHQUNyQixhQUFhLEtBQUssYUFBYSxFQUMvQixLQUFLLGVBQWUsTUFBTSxFQUN2QixLQUFLLE9BQ04sS0FBSyxLQUFLLE1BQU0sRUFDaEIsS0FBSyxLQUFPLE1BRWQsS0FBSyxVQUFZQSxDQUNuQixDQU9BLFVBQVUsQ0FBRSxPQUFPLFNBQVMsU0FBUyxNQUFNLFFBQVEsRUFBSSxNQUFRLElBQUssQ0FPcEUsYUFBYSxDQUNYLElBQUlDLEVBQU1DLEdBQUssYUFDYkEsR0FBSyxhQUFhLEtBQUssU0FBVSxLQUFLLE9BQU8sQ0FBQyxFQUFHLENBQUMsSUFBSyxLQUFLLEdBQUcsQ0FBQyxFQUNsRSxPQUFHRCxFQUFJLE9BQU8sQ0FBQyxJQUFNLElBQWFBLEVBQy9CQSxFQUFJLE9BQU8sQ0FBQyxJQUFNLElBQWEsR0FBRyxLQUFLLFNBQVMsS0FBS0EsSUFFakQsR0FBRyxLQUFLLFNBQVMsT0FBTyxTQUFTLE9BQU9BLEdBQ2pELENBV0EsV0FBV3ZDLEVBQVV5QyxFQUFNQyxFQUFPLENBQ2hDLEtBQUssZUFDTCxLQUFLLGNBQWdCLEdBQ3JCLGFBQWEsS0FBSyxhQUFhLEVBQy9CLEtBQUssZUFBZSxNQUFNLEVBQzFCLEtBQUssU0FBUzFDLEVBQVV5QyxFQUFNQyxDQUFNLENBQ3RDLENBU0EsUUFBUUMsRUFBTyxDQUNWQSxJQUNELFNBQVcsUUFBUSxJQUFJLHlGQUF5RixFQUNoSCxLQUFLLE9BQVNULEdBQVFTLENBQU0sR0FFM0IsTUFBSyxPQUNMLEtBQUssb0JBQXNCLEtBQUssWUFBY2QsR0FDL0MsS0FBSyxvQkFBb0JBLEdBQVUsS0FBSyxrQkFBa0IsRUFFMUQsS0FBSyxpQkFBaUIsRUFFMUIsQ0FRQSxJQUFJZCxFQUFNaEIsRUFBS3NCLEVBQUssQ0FBRSxLQUFLLFFBQVUsS0FBSyxPQUFPTixFQUFNaEIsRUFBS3NCLENBQUksQ0FBRSxDQUtsRSxXQUFXLENBQUUsT0FBTyxLQUFLLFNBQVcsSUFBSyxDQVN6QyxPQUFPckIsRUFBUyxDQUNkLElBQUlJLEVBQU0sS0FBSyxRQUFRLEVBQ3ZCLFlBQUsscUJBQXFCLEtBQUssS0FBSyxDQUFDQSxFQUFLSixDQUFRLENBQUMsRUFDNUNJLENBQ1QsQ0FNQSxRQUFRSixFQUFTLENBQ2YsSUFBSUksRUFBTSxLQUFLLFFBQVEsRUFDdkIsWUFBSyxxQkFBcUIsTUFBTSxLQUFLLENBQUNBLEVBQUtKLENBQVEsQ0FBQyxFQUM3Q0ksQ0FDVCxDQVNBLFFBQVFKLEVBQVMsQ0FDZixJQUFJSSxFQUFNLEtBQUssUUFBUSxFQUN2QixZQUFLLHFCQUFxQixNQUFNLEtBQUssQ0FBQ0EsRUFBS0osQ0FBUSxDQUFDLEVBQzdDSSxDQUNULENBTUEsVUFBVUosRUFBUyxDQUNqQixJQUFJSSxFQUFNLEtBQUssUUFBUSxFQUN2QixZQUFLLHFCQUFxQixRQUFRLEtBQUssQ0FBQ0EsRUFBS0osQ0FBUSxDQUFDLEVBQy9DSSxDQUNULENBUUEsS0FBS0osRUFBUyxDQUNaLEdBQUcsQ0FBQyxLQUFLLFlBQVksRUFBSSxNQUFPLEdBQ2hDLElBQUlJLEVBQU0sS0FBSyxRQUFRLEVBQ25Cd0MsRUFBWSxLQUFLLElBQUksRUFDekIsS0FBSyxLQUFLLENBQUMsTUFBTyxVQUFXLE1BQU8sWUFBYSxRQUFTLENBQUMsRUFBRyxJQUFBeEMsQ0FBUSxDQUFDLEVBQ3ZFLElBQUl5QyxFQUFXLEtBQUssVUFBVTlDLEdBQU8sQ0FDaENBLEVBQUksTUFBUUssSUFDYixLQUFLLElBQUksQ0FBQ3lDLENBQVEsQ0FBQyxFQUNuQjdDLEVBQVMsS0FBSyxJQUFJLEVBQUk0QyxDQUFTLEVBRW5DLENBQUMsRUFDRCxNQUFPLEVBQ1QsQ0FNQSxrQkFBa0IsQ0FDaEIsS0FBSyxlQUNMLEtBQUssY0FBZ0IsR0FDckIsS0FBSyxLQUFPLElBQUksS0FBSyxVQUFVLEtBQUssWUFBWSxDQUFDLEVBQ2pELEtBQUssS0FBSyxXQUFhLEtBQUssV0FDNUIsS0FBSyxLQUFLLFFBQVUsS0FBSyxrQkFDekIsS0FBSyxLQUFLLE9BQVMsSUFBTSxLQUFLLFdBQVcsRUFDekMsS0FBSyxLQUFLLFFBQVVFLEdBQVMsS0FBSyxZQUFZQSxDQUFLLEVBQ25ELEtBQUssS0FBSyxVQUFZeEMsR0FBUyxLQUFLLGNBQWNBLENBQUssRUFDdkQsS0FBSyxLQUFLLFFBQVVBLEdBQVMsS0FBSyxZQUFZQSxDQUFLLENBQ3JELENBRUEsV0FBV3lDLEVBQUksQ0FBRSxPQUFPLEtBQUssY0FBZ0IsS0FBSyxhQUFhLFFBQVFBLENBQUcsQ0FBRSxDQUU1RSxhQUFhQSxFQUFLQyxFQUFJLENBQUUsS0FBSyxjQUFnQixLQUFLLGFBQWEsUUFBUUQsRUFBS0MsQ0FBRyxDQUFFLENBRWpGLG9CQUFvQkMsRUFBbUJDLEVBQW9CLEtBQUssQ0FDOUQsYUFBYSxLQUFLLGFBQWEsRUFDL0IsSUFBSUMsRUFBYyxHQUNkQyxFQUFtQixHQUNuQkMsRUFBU0MsRUFDVEMsRUFBWWIsR0FBVyxDQUN6QixLQUFLLElBQUksWUFBYSxtQkFBbUJPLEVBQWtCLFVBQVdQLENBQU0sRUFDNUUsS0FBSyxJQUFJLENBQUNXLEVBQVNDLENBQVEsQ0FBQyxFQUM1QkYsRUFBbUIsR0FDbkIsS0FBSyxpQkFBaUJILENBQWlCLEVBQ3ZDLEtBQUssaUJBQWlCLENBQ3hCLEVBQ0EsR0FBRyxLQUFLLFdBQVcsZ0JBQWdCQSxFQUFrQixNQUFNLEVBQUksT0FBT00sRUFBUyxXQUFXLEVBRTFGLEtBQUssY0FBZ0IsV0FBV0EsRUFBVUwsQ0FBaUIsRUFFM0RJLEVBQVcsS0FBSyxRQUFRWixHQUFVLENBQ2hDLEtBQUssSUFBSSxZQUFhLFFBQVNBLENBQU0sRUFDbENVLEdBQW9CLENBQUNELElBQ3RCLGFBQWEsS0FBSyxhQUFhLEVBQy9CSSxFQUFTYixDQUFNLEVBRW5CLENBQUMsRUFDRCxLQUFLLE9BQU8sSUFBTSxDQUVoQixHQURBUyxFQUFjLEdBQ1gsQ0FBQ0MsRUFFRixPQUFJLEtBQUssMEJBQTJCLEtBQUssYUFBYSxnQkFBZ0JILEVBQWtCLE9BQVEsTUFBTSxFQUMvRixLQUFLLElBQUksWUFBYSxlQUFlQSxFQUFrQixlQUFlLEVBRy9FLGFBQWEsS0FBSyxhQUFhLEVBQy9CLEtBQUssY0FBZ0IsV0FBV00sRUFBVUwsQ0FBaUIsRUFDM0QsS0FBSyxLQUFLTSxHQUFPLENBQ2YsS0FBSyxJQUFJLFlBQWEsNkJBQThCQSxDQUFHLEVBQ3ZELEtBQUsseUJBQTJCLEdBQ2hDLGFBQWEsS0FBSyxhQUFhLENBQ2pDLENBQUMsQ0FDSCxDQUFDLEVBQ0QsS0FBSyxpQkFBaUIsQ0FDeEIsQ0FFQSxpQkFBaUIsQ0FDZixhQUFhLEtBQUssY0FBYyxFQUNoQyxhQUFhLEtBQUsscUJBQXFCLENBQ3pDLENBRUEsWUFBWSxDQUNQLEtBQUssVUFBVSxHQUFHLEtBQUssSUFBSSxZQUFhLEdBQUcsS0FBSyxVQUFVLHFCQUFxQixLQUFLLFlBQVksR0FBRyxFQUN0RyxLQUFLLGNBQWdCLEdBQ3JCLEtBQUsseUJBQ0wsS0FBSyxnQkFBZ0IsRUFDckIsS0FBSyxlQUFlLE1BQU0sRUFDMUIsS0FBSyxlQUFlLEVBQ3BCLEtBQUsscUJBQXFCLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBRXhELENBQVEsSUFBTUEsRUFBUyxDQUFDLENBQ3JFLENBTUEsa0JBQWtCLENBQ2IsS0FBSyxzQkFDTixLQUFLLG9CQUFzQixLQUN4QixLQUFLLFVBQVUsR0FBSSxLQUFLLElBQUksWUFBYSwwREFBMEQsRUFDdEcsS0FBSyxpQkFBaUIsRUFDdEIsS0FBSyxjQUFnQixHQUNyQixLQUFLLFNBQVMsSUFBTSxLQUFLLGVBQWUsZ0JBQWdCLEVBQUd5RCxHQUFpQixtQkFBbUIsRUFFbkcsQ0FFQSxnQkFBZ0IsQ0FDWCxLQUFLLE1BQVEsS0FBSyxLQUFLLGdCQUMxQixLQUFLLG9CQUFzQixLQUMzQixLQUFLLGdCQUFnQixFQUNyQixLQUFLLGVBQWlCLFdBQVcsSUFBTSxLQUFLLGNBQWMsRUFBRyxLQUFLLG1CQUFtQixFQUN2RixDQUVBLFNBQVN6RCxFQUFVeUMsRUFBTUMsRUFBTyxDQUM5QixHQUFHLENBQUMsS0FBSyxLQUNQLE9BQU8xQyxHQUFZQSxFQUFTLEVBRzlCLEtBQUssa0JBQWtCLElBQU0sQ0FDeEIsS0FBSyxPQUNIeUMsRUFBTyxLQUFLLEtBQUssTUFBTUEsRUFBTUMsR0FBVSxFQUFFLEVBQVcsS0FBSyxLQUFLLE1BQU0sR0FHekUsS0FBSyxvQkFBb0IsSUFBTSxDQUMxQixLQUFLLE9BQ04sS0FBSyxLQUFLLE9BQVMsVUFBVyxDQUFFLEVBQ2hDLEtBQUssS0FBSyxRQUFVLFVBQVcsQ0FBRSxFQUNqQyxLQUFLLEtBQUssVUFBWSxVQUFXLENBQUUsRUFDbkMsS0FBSyxLQUFLLFFBQVUsVUFBVyxDQUFFLEVBQ2pDLEtBQUssS0FBTyxNQUdkMUMsR0FBWUEsRUFBUyxDQUN2QixDQUFDLENBQ0gsQ0FBQyxDQUNILENBRUEsa0JBQWtCQSxFQUFVaUMsRUFBUSxFQUFFLENBQ3BDLEdBQUdBLElBQVUsR0FBSyxDQUFDLEtBQUssTUFBUSxDQUFDLEtBQUssS0FBSyxlQUFlLENBQ3hEakMsRUFBUyxFQUNULE9BR0YsV0FBVyxJQUFNLENBQ2YsS0FBSyxrQkFBa0JBLEVBQVVpQyxFQUFRLENBQUMsQ0FDNUMsRUFBRyxJQUFNQSxDQUFLLENBQ2hCLENBRUEsb0JBQW9CakMsRUFBVWlDLEVBQVEsRUFBRSxDQUN0QyxHQUFHQSxJQUFVLEdBQUssQ0FBQyxLQUFLLE1BQVEsS0FBSyxLQUFLLGFBQWV5QixHQUFjLE9BQU8sQ0FDNUUxRCxFQUFTLEVBQ1QsT0FHRixXQUFXLElBQU0sQ0FDZixLQUFLLG9CQUFvQkEsRUFBVWlDLEVBQVEsQ0FBQyxDQUM5QyxFQUFHLElBQU1BLENBQUssQ0FDaEIsQ0FFQSxZQUFZM0IsRUFBTSxDQUNoQixJQUFJcUQsRUFBWXJELEdBQVNBLEVBQU0sS0FDNUIsS0FBSyxVQUFVLEdBQUcsS0FBSyxJQUFJLFlBQWEsUUFBU0EsQ0FBSyxFQUN6RCxLQUFLLGlCQUFpQixFQUN0QixLQUFLLGdCQUFnQixFQUNsQixDQUFDLEtBQUssZUFBaUJxRCxJQUFjLEtBQ3RDLEtBQUssZUFBZSxnQkFBZ0IsRUFFdEMsS0FBSyxxQkFBcUIsTUFBTSxRQUFRLENBQUMsQ0FBQyxDQUFFM0QsQ0FBUSxJQUFNQSxFQUFTTSxDQUFLLENBQUMsQ0FDM0UsQ0FLQSxZQUFZd0MsRUFBTSxDQUNiLEtBQUssVUFBVSxHQUFHLEtBQUssSUFBSSxZQUFhQSxDQUFLLEVBQ2hELElBQUljLEVBQWtCLEtBQUssVUFDdkJDLEVBQW9CLEtBQUssdUJBQzdCLEtBQUsscUJBQXFCLE1BQU0sUUFBUSxDQUFDLENBQUMsQ0FBRTdELENBQVEsSUFBTSxDQUN4REEsRUFBUzhDLEVBQU9jLEVBQWlCQyxDQUFpQixDQUNwRCxDQUFDLEdBQ0VELElBQW9CLEtBQUssV0FBYUMsRUFBb0IsSUFDM0QsS0FBSyxpQkFBaUIsQ0FFMUIsQ0FLQSxrQkFBa0IsQ0FDaEIsS0FBSyxTQUFTLFFBQVFDLEdBQVcsQ0FDMUJBLEVBQVEsVUFBVSxHQUFLQSxFQUFRLFVBQVUsR0FBS0EsRUFBUSxTQUFTLEdBQ2xFQSxFQUFRLFFBQVF2QyxHQUFlLEtBQUssQ0FFeEMsQ0FBQyxDQUNILENBS0EsaUJBQWlCLENBQ2YsT0FBTyxLQUFLLE1BQVEsS0FBSyxLQUFLLFdBQVcsQ0FDdkMsS0FBS21DLEdBQWMsV0FBWSxNQUFPLGFBQ3RDLEtBQUtBLEdBQWMsS0FBTSxNQUFPLE9BQ2hDLEtBQUtBLEdBQWMsUUFBUyxNQUFPLFVBQ25DLFFBQVMsTUFBTyxRQUNsQixDQUNGLENBS0EsYUFBYSxDQUFFLE9BQU8sS0FBSyxnQkFBZ0IsSUFBTSxNQUFPLENBT3hELE9BQU9JLEVBQVEsQ0FDYixLQUFLLElBQUlBLEVBQVEsZUFBZSxFQUNoQyxLQUFLLFNBQVcsS0FBSyxTQUFTLE9BQU9DLEdBQUtBLElBQU1ELENBQU8sQ0FDekQsQ0FRQSxJQUFJRSxFQUFLLENBQ1AsUUFBUWpCLEtBQU8sS0FBSyxxQkFDbEIsS0FBSyxxQkFBcUJBLENBQUcsRUFBSSxLQUFLLHFCQUFxQkEsQ0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDM0MsQ0FBRyxJQUNuRTRELEVBQUssUUFBUTVELENBQUcsSUFBTSxFQUM5QixDQUVMLENBU0EsUUFBUUMsRUFBTzRELEVBQWEsQ0FBQyxFQUFFLENBQzdCLElBQUlDLEVBQU8sSUFBSUMsR0FBUTlELEVBQU80RCxFQUFZLElBQUksRUFDOUMsWUFBSyxTQUFTLEtBQUtDLENBQUksRUFDaEJBLENBQ1QsQ0FLQSxLQUFLN0MsRUFBSyxDQUNSLEdBQUcsS0FBSyxVQUFVLEVBQUUsQ0FDbEIsR0FBSSxDQUFDLE1BQUFoQixFQUFPLE1BQUFDLEVBQU8sUUFBQUwsRUFBUyxJQUFBRyxFQUFLLFNBQUFELENBQVEsRUFBSWtCLEVBQzdDLEtBQUssSUFBSSxPQUFRLEdBQUdoQixLQUFTQyxNQUFVSCxNQUFhQyxLQUFRSCxDQUFPLEVBR2xFLEtBQUssWUFBWSxFQUNsQixLQUFLLE9BQU9vQixFQUFNK0MsR0FBVSxLQUFLLEtBQUssS0FBS0EsQ0FBTSxDQUFDLEVBRWxELEtBQUssV0FBVyxLQUFLLElBQU0sS0FBSyxPQUFPL0MsRUFBTStDLEdBQVUsS0FBSyxLQUFLLEtBQUtBLENBQU0sQ0FBQyxDQUFDLENBRWxGLENBTUEsU0FBUyxDQUNQLElBQUlDLEVBQVMsS0FBSyxJQUFNLEVBQ3hCLE9BQUdBLElBQVcsS0FBSyxJQUFNLEtBQUssSUFBTSxFQUFXLEtBQUssSUFBTUEsRUFFbkQsS0FBSyxJQUFJLFNBQVMsQ0FDM0IsQ0FFQSxlQUFlLENBQ1YsS0FBSyxxQkFBdUIsQ0FBQyxLQUFLLFlBQVksSUFDakQsS0FBSyxvQkFBc0IsS0FBSyxRQUFRLEVBQ3hDLEtBQUssS0FBSyxDQUFDLE1BQU8sVUFBVyxNQUFPLFlBQWEsUUFBUyxDQUFDLEVBQUcsSUFBSyxLQUFLLG1CQUFtQixDQUFDLEVBQzVGLEtBQUssc0JBQXdCLFdBQVcsSUFBTSxLQUFLLGlCQUFpQixFQUFHLEtBQUssbUJBQW1CLEVBQ2pHLENBRUEsaUJBQWlCLENBQ1osS0FBSyxZQUFZLEdBQUssS0FBSyxXQUFXLE9BQVMsSUFDaEQsS0FBSyxXQUFXLFFBQVFyRSxHQUFZQSxFQUFTLENBQUMsRUFDOUMsS0FBSyxXQUFhLENBQUMsRUFFdkIsQ0FFQSxjQUFjc0UsRUFBVyxDQUN2QixLQUFLLE9BQU9BLEVBQVcsS0FBTXZFLEdBQU8sQ0FDbEMsR0FBSSxDQUFDLE1BQUFNLEVBQU8sTUFBQUMsRUFBTyxRQUFBTCxFQUFTLElBQUFHLEVBQUssU0FBQUQsQ0FBUSxFQUFJSixFQUMxQ0ssR0FBT0EsSUFBUSxLQUFLLHNCQUNyQixLQUFLLGdCQUFnQixFQUNyQixLQUFLLG9CQUFzQixLQUMzQixLQUFLLGVBQWlCLFdBQVcsSUFBTSxLQUFLLGNBQWMsRUFBRyxLQUFLLG1CQUFtQixHQUdwRixLQUFLLFVBQVUsR0FBRyxLQUFLLElBQUksVUFBVyxHQUFHSCxFQUFRLFFBQVUsTUFBTUksS0FBU0MsS0FBU0YsR0FBTyxJQUFNQSxFQUFNLEtBQU8sS0FBTUgsQ0FBTyxFQUU3SCxRQUFRc0UsRUFBSSxFQUFHQSxFQUFJLEtBQUssU0FBUyxPQUFRQSxJQUFJLENBQzNDLElBQU1ULEVBQVUsS0FBSyxTQUFTUyxDQUFDLEVBQzNCVCxFQUFRLFNBQVN6RCxFQUFPQyxFQUFPTCxFQUFTRSxDQUFRLEdBQ3BEMkQsRUFBUSxRQUFReEQsRUFBT0wsRUFBU0csRUFBS0QsQ0FBUSxFQUcvQyxRQUFRb0UsRUFBSSxFQUFHQSxFQUFJLEtBQUsscUJBQXFCLFFBQVEsT0FBUUEsSUFBSSxDQUMvRCxHQUFJLENBQUMsQ0FBRXZFLENBQVEsRUFBSSxLQUFLLHFCQUFxQixRQUFRdUUsQ0FBQyxFQUN0RHZFLEVBQVNELENBQUcsRUFFaEIsQ0FBQyxDQUNILENBRUEsZUFBZU0sRUFBTSxDQUNuQixJQUFJbUUsRUFBYSxLQUFLLFNBQVMsS0FBS1QsR0FBS0EsRUFBRSxRQUFVMUQsSUFBVTBELEVBQUUsU0FBUyxHQUFLQSxFQUFFLFVBQVUsRUFBRSxFQUMxRlMsSUFDRSxLQUFLLFVBQVUsR0FBRyxLQUFLLElBQUksWUFBYSw0QkFBNEJuRSxJQUFRLEVBQy9FbUUsRUFBVyxNQUFNLEVBRXJCLENBQ0YsRUN2b0JPLElBQU1DLEdBQXNCLHNCQUN0QkMsR0FBYyxHQUNkQyxHQUFvQixJQUNwQkMsR0FBb0IsSUFDcEJDLEdBQWtCLElBQ2xCQyxHQUFvQixDQUMvQixvQkFBcUIscUJBQXNCLHFCQUMzQyxzQkFBdUIsb0JBQXFCLG1CQUFvQixvQkFDaEUsa0JBQ0YsRUFDYUMsR0FBZ0IscUJBQ2hCQyxHQUFnQixnQkFDaEJDLEdBQW1CLGVBQ25CQyxHQUFpQixzQkFDakJDLEdBQWtCLHVCQUNsQkMsR0FBYyxtQkFDZEMsR0FBZSxvQkFDZkMsR0FBb0IsZ0JBQ3BCQyxHQUFpQixzQkFDakJDLEdBQXVCLDRCQUN2QkMsR0FBZ0IscUJBQ2hCQyxHQUFrQixjQUNsQkMsR0FBd0IsdUJBQ3hCQyxHQUF3Qix3QkFDeEJDLEdBQVcsZ0JBQ1hDLEdBQWUsY0FDZkMsR0FBWSxpQkFDWkMsR0FBc0IsZ0JBQ3RCQyxHQUFvQixjQUNwQkMsR0FBa0IsWUFDbEJDLEdBQXlCLG1CQUN6QkMsR0FBeUIsbUJBQ3pCQyxHQUFnQixxQkFDaEJDLEdBQVcsZ0JBQ1hDLEdBQWMsbUJBQ2RDLEdBQW1CLGVBQ25CQyxHQUFzQixrQkFDdEJDLEdBQXFCLGlCQUNyQkMsR0FBa0Isa0JBQ2xCQyxHQUFtQixDQUFDLE9BQVEsV0FBWSxTQUFVLFFBQVMsV0FBWSxTQUFVLE1BQU8sTUFBTyxPQUFRLE9BQVEsaUJBQWtCLFFBQVMsT0FBTyxFQUNqSkMsR0FBbUIsQ0FBQyxXQUFZLE9BQU8sRUFDdkNDLEdBQW9CLG9CQUNwQkMsR0FBYyxtQkFDZEMsR0FBb0IsSUFBSUQsTUFDeEJFLEdBQWEsa0JBQ2JDLEdBQWEsa0JBQ2JDLEdBQWUsb0JBQ2ZDLEdBQWUsb0JBQ2ZDLEdBQW1CLGVBQ25CQyxHQUEyQixnQ0FDM0JDLEdBQVcsT0FDWEMsR0FBZSxXQUNmQyxHQUFlLFdBQ2ZDLEdBQWEsU0FDYkMsR0FBYSxTQUNiQyxHQUFpQixrQkFDakJDLEdBQVUsTUFDVkMsR0FBYyxhQUNkQyxHQUFtQixlQUNuQkMsR0FBZSx3QkFDZkMsR0FBaUIsNEJBQ2pCQyxHQUFxQiw4QkFDckJDLEdBQTBCLDJCQUMxQkMsR0FBZSxXQUNmQyxHQUFjLFVBQ2RDLEdBQW9CLDRCQUNwQkMsR0FBaUIsRUFDakJDLEdBQTBCLEVBQzFCQyxHQUErQixJQUMvQkMsR0FBaUIsT0FDakJDLEdBQWUsSUFHZkMsR0FBbUIsbUJBQ25CQyxHQUFZLFlBQ1pDLEdBQW9CLG9CQUNwQkMsR0FBVyxDQUN0QixTQUFVLElBQ1YsU0FBVSxHQUNaLEVBQ2FDLEdBQW9CLENBQUM3RCxHQUFpQkMsR0FBYUMsRUFBWSxFQUUvRDRELEdBQVcsSUFDWEMsR0FBUyxJQUNUQyxHQUFPLElBQ1BDLEdBQWEsSUFDYkMsR0FBUyxJQUNUQyxHQUFRLElBQ1JDLEdBQVEsSUFDUkMsR0FBWSxJQUNaQyxHQUFTLFNDdEZEQyxHQUFyQixLQUFtQyxDQUNqQyxZQUFZQyxFQUFPQyxFQUFRQyxFQUFXLENBQ3BDLEdBQUksQ0FBQyxXQUFBQyxFQUFZLGNBQUFDLENBQWEsRUFBSUgsRUFDbEMsS0FBSyxXQUFhQyxFQUNsQixLQUFLLE1BQVFGLEVBQ2IsS0FBSyxPQUFTLEVBQ2QsS0FBSyxVQUFZRyxFQUNqQixLQUFLLGFBQWVDLEVBQ3BCLEtBQUssV0FBYSxLQUNsQixLQUFLLFFBQVUsR0FDZixLQUFLLGNBQWdCRixFQUFXLFFBQVEsT0FBT0YsRUFBTSxNQUFPLENBQUMsTUFBT0EsRUFBTSxTQUFTLENBQUMsQ0FBQyxDQUN2RixDQUVBLE1BQU1LLEVBQU8sQ0FDUixLQUFLLFVBQ1IsS0FBSyxjQUFjLE1BQU0sRUFDekIsS0FBSyxRQUFVLEdBQ2YsYUFBYSxLQUFLLFVBQVUsRUFDNUIsS0FBSyxNQUFNLE1BQU1BLENBQU0sRUFDekIsQ0FFQSxRQUFRLENBQ04sS0FBSyxjQUFjLFFBQVFBLEdBQVUsS0FBSyxNQUFNQSxDQUFNLENBQUMsRUFDdkQsS0FBSyxjQUFjLEtBQUssRUFDckIsUUFBUSxLQUFNQyxHQUFTLEtBQUssY0FBYyxDQUFDLEVBQzNDLFFBQVEsUUFBU0QsR0FBVSxLQUFLLE1BQU1BLENBQU0sQ0FBQyxDQUNsRCxDQUVBLFFBQVEsQ0FBRSxPQUFPLEtBQUssUUFBVSxLQUFLLE1BQU0sS0FBSyxJQUFLLENBRXJELGVBQWUsQ0FDYixJQUFJRSxFQUFTLElBQUksT0FBTyxXQUNwQkMsRUFBTyxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssT0FBUSxLQUFLLFVBQVksS0FBSyxNQUFNLEVBQzFFRCxFQUFPLE9BQVVFLEdBQU0sQ0FDckIsR0FBR0EsRUFBRSxPQUFPLFFBQVUsS0FDcEIsS0FBSyxRQUFVQSxFQUFFLE9BQU8sT0FBTyxXQUMvQixLQUFLLFVBQVVBLEVBQUUsT0FBTyxNQUFNLE1BRTlCLFFBQU9DLEdBQVMsZUFBaUJELEVBQUUsT0FBTyxLQUFLLENBRW5ELEVBQ0FGLEVBQU8sa0JBQWtCQyxDQUFJLENBQy9CLENBRUEsVUFBVUcsRUFBTSxDQUNWLEtBQUssY0FBYyxTQUFTLEdBQ2hDLEtBQUssY0FBYyxLQUFLLFFBQVNBLEVBQU8sS0FBSyxZQUFZLEVBQ3RELFFBQVEsS0FBTSxJQUFNLENBQ25CLEtBQUssTUFBTSxTQUFVLEtBQUssT0FBUyxLQUFLLE1BQU0sS0FBSyxLQUFRLEdBQUcsRUFDMUQsS0FBSyxPQUFPLElBQ2QsS0FBSyxXQUFhLFdBQVcsSUFBTSxLQUFLLGNBQWMsRUFBRyxLQUFLLFdBQVcsY0FBYyxHQUFLLENBQUMsRUFFakcsQ0FBQyxFQUNBLFFBQVEsUUFBUyxDQUFDLENBQUMsT0FBQU4sQ0FBTSxJQUFNLEtBQUssTUFBTUEsQ0FBTSxDQUFDLENBQ3RELENBQ0YsRUNyRFdLLEdBQVcsQ0FBQ0UsRUFBS0MsSUFBUSxRQUFRLE9BQVMsUUFBUSxNQUFNRCxFQUFLQyxDQUFHLEVBRWhFQyxHQUFTQyxHQUFRLENBQzFCLElBQUlDLEVBQU8sT0FBT0QsRUFDbEIsT0FBT0MsSUFBUyxVQUFhQSxJQUFTLFVBQVksaUJBQWlCLEtBQUtELENBQUcsQ0FDN0UsRUFFTyxTQUFTRSxJQUFvQixDQUNsQyxJQUFJQyxFQUFNLElBQUksSUFDVkMsRUFBUSxTQUFTLGlCQUFpQixPQUFPLEVBQzdDLFFBQVFDLEVBQUksRUFBR0MsRUFBTUYsRUFBTSxPQUFRQyxFQUFJQyxFQUFLRCxJQUN2Q0YsRUFBSSxJQUFJQyxFQUFNQyxDQUFDLEVBQUUsRUFBRSxFQUNwQixRQUFRLE1BQU0sMEJBQTBCRCxFQUFNQyxDQUFDLEVBQUUsZ0NBQWdDLEVBRWpGRixFQUFJLElBQUlDLEVBQU1DLENBQUMsRUFBRSxFQUFFLENBR3pCLENBRU8sU0FBU0UsR0FBMkJDLEVBQVEsQ0FDakQsSUFBTUMsRUFBUyxJQUFJLElBQ25CLE9BQU8sS0FBS0QsQ0FBTyxFQUFFLFFBQVNFLEdBQU8sQ0FDbkMsSUFBTUMsRUFBVyxTQUFTLGVBQWVELENBQUUsRUFDeENDLEdBQVlBLEVBQVMsZUFBaUJBLEVBQVMsY0FBYyxhQUFhLFlBQVksSUFBTSxVQUM3RkYsRUFBTyxJQUFJLGlDQUFpQ0UsRUFBUyxjQUFjLGtHQUFrRyxDQUV6SyxDQUFDLEVBQ0RGLEVBQU8sUUFBUUcsR0FBUyxRQUFRLE1BQU1BLENBQUssQ0FBQyxDQUM5QyxDQUVPLElBQUlDLEdBQVEsQ0FBQ0MsRUFBTUMsRUFBTWxCLEVBQUtDLElBQVEsQ0FDeENnQixFQUFLLFdBQVcsZUFBZSxHQUNoQyxRQUFRLElBQUksR0FBR0EsRUFBSyxNQUFNQyxNQUFTbEIsT0FBVUMsQ0FBRyxDQUVwRCxFQUdXa0IsR0FBV0MsR0FBUSxPQUFPQSxHQUFRLFdBQWFBLEVBQU0sVUFBVyxDQUFFLE9BQU9BLENBQUksRUFFN0VDLEdBQVNwQixHQUFpQixLQUFLLE1BQU0sS0FBSyxVQUFVQSxDQUFHLENBQUMsRUFFeERxQixHQUFvQixDQUFDQyxFQUFJQyxFQUFTQyxJQUFhLENBQ3hELEVBQUcsQ0FDRCxHQUFHRixFQUFHLFFBQVEsSUFBSUMsSUFBVSxHQUFLLENBQUNELEVBQUcsU0FBVyxPQUFPQSxFQUN2REEsRUFBS0EsRUFBRyxlQUFpQkEsRUFBRyxpQkFDdEJBLElBQU8sTUFBUUEsRUFBRyxXQUFhLEdBQUssRUFBR0UsR0FBWUEsRUFBUyxXQUFXRixDQUFFLEdBQU1BLEVBQUcsUUFBUTlFLEVBQWlCLElBQ25ILE9BQU8sSUFDVCxFQUVXaUYsR0FBWXpCLEdBQ2RBLElBQVEsTUFBUSxPQUFPQSxHQUFRLFVBQVksRUFBRUEsYUFBZSxPQUcxRDBCLEdBQWEsQ0FBQ0MsRUFBTUMsSUFBUyxLQUFLLFVBQVVELENBQUksSUFBTSxLQUFLLFVBQVVDLENBQUksRUFFekVDLEdBQVc3QixHQUFRLENBQzVCLFFBQVE4QixLQUFLOUIsRUFBTSxNQUFPLEdBQzFCLE1BQU8sRUFDVCxFQUVXK0IsR0FBUSxDQUFDVCxFQUFJVSxJQUFhVixHQUFNVSxFQUFTVixDQUFFLEVBRTNDVyxHQUFrQixTQUFVQyxFQUFTQyxFQUFTQyxFQUFNL0MsRUFBVyxDQUN4RTZDLEVBQVEsUUFBUS9DLEdBQVMsQ0FDSCxJQUFJRCxHQUFjQyxFQUFPaUQsRUFBSyxPQUFRL0MsQ0FBVSxFQUN0RCxPQUFPLENBQ3ZCLENBQUMsQ0FDSCxFQ3pFSWdELEdBQVUsQ0FDWixjQUFjLENBQUUsT0FBUSxPQUFRLFFBQVEsVUFBZSxHQUFhLEVBRXBFLFVBQVVDLEVBQWNDLEVBQVdDLEVBQU8sQ0FDeEMsT0FBT0YsRUFBYSxXQUFXLEtBQUssU0FBU0MsRUFBV0MsQ0FBTSxDQUFDLENBQ2pFLEVBRUEsWUFBWUYsRUFBY0MsRUFBV0MsRUFBUUMsRUFBU0MsRUFBSyxDQUN6RCxJQUFJQyxFQUFVLEtBQUssU0FBU0wsRUFBY0MsRUFBV0MsQ0FBTSxFQUN2REksRUFBTSxLQUFLLFNBQVNMLEVBQVdDLENBQU0sRUFDckNLLEVBQVNGLElBQVksS0FBT0YsRUFBVUMsRUFBS0MsQ0FBTyxFQUN0RCxPQUFBTCxFQUFhLFFBQVFNLEVBQUssS0FBSyxVQUFVQyxDQUFNLENBQUMsRUFDekNBLENBQ1QsRUFFQSxTQUFTUCxFQUFjQyxFQUFXQyxFQUFPLENBQ3ZDLE9BQU8sS0FBSyxNQUFNRixFQUFhLFFBQVEsS0FBSyxTQUFTQyxFQUFXQyxDQUFNLENBQUMsQ0FBQyxDQUMxRSxFQUVBLG1CQUFtQlIsRUFBUyxDQUN0QixLQUFLLGFBQWEsR0FDdEIsUUFBUSxhQUFhQSxFQUFTLFFBQVEsT0FBUyxDQUFDLENBQUMsRUFBRyxHQUFJLE9BQU8sU0FBUyxJQUFJLENBQzlFLEVBRUEsVUFBVWYsRUFBTTZCLEVBQU1DLEVBQUcsQ0FDdkIsR0FBRyxLQUFLLGFBQWEsR0FDbkIsR0FBR0EsSUFBTyxPQUFPLFNBQVMsS0FBSyxDQUM3QixHQUFHRCxFQUFLLE1BQVEsWUFBY0EsRUFBSyxPQUFPLENBRXhDLElBQUlFLEVBQWUsUUFBUSxPQUFTLENBQUMsRUFDckNBLEVBQWEsT0FBU0YsRUFBSyxPQUMzQixRQUFRLGFBQWFFLEVBQWMsR0FBSSxPQUFPLFNBQVMsSUFBSSxFQUc3RCxPQUFPRixFQUFLLE9BQ1osUUFBUTdCLEVBQU8sT0FBTyxFQUFFNkIsRUFBTSxHQUFJQyxHQUFNLElBQUksRUFNNUMsT0FBTyxzQkFBc0IsSUFBTSxDQUNqQyxJQUFJRSxFQUFTLEtBQUssZ0JBQWdCLE9BQU8sU0FBUyxJQUFJLEVBRW5EQSxFQUNEQSxFQUFPLGVBQWUsRUFDZEgsRUFBSyxPQUFTLFlBQ3RCLE9BQU8sT0FBTyxFQUFHLENBQUMsQ0FFdEIsQ0FBQyxRQUdILEtBQUssU0FBU0MsQ0FBRSxDQUVwQixFQUVBLFVBQVVHLEVBQU1DLEVBQU9DLEVBQWMsQ0FDbkMsSUFBSUMsRUFBVSxPQUFPRCxHQUFtQixTQUFXLFlBQVlBLEtBQW1CLEdBQ2xGLFNBQVMsT0FBUyxHQUFHRixLQUFRQyxLQUFTRSxVQUN4QyxFQUVBLFVBQVVILEVBQUssQ0FDYixPQUFPLFNBQVMsT0FBTyxRQUFRLElBQUksT0FBTyxpQkFBa0JBLHdCQUE4QixFQUFHLElBQUksQ0FDbkcsRUFFQSxhQUFhQSxFQUFLLENBQ2hCLFNBQVMsT0FBUyxHQUFHQSx3QkFDdkIsRUFFQSxTQUFTSSxFQUFPQyxFQUFNLENBQ2pCQSxHQUFRLEtBQUssVUFBVSxvQkFBcUJBLEVBQU8sRUFBRSxFQUN4RCxPQUFPLFNBQVdELENBQ3BCLEVBRUEsU0FBU2YsRUFBV0MsRUFBTyxDQUFFLE1BQU8sR0FBR0QsS0FBYUMsR0FBUyxFQUU3RCxnQkFBZ0JnQixFQUFVLENBQ3hCLElBQUlDLEVBQU9ELEVBQVUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxFQUMzQyxHQUFHQyxJQUFTLEdBQ1osT0FBTyxTQUFTLGVBQWVBLENBQUksR0FBSyxTQUFTLGNBQWMsV0FBV0EsS0FBUSxDQUNwRixDQUNGLEVBRU9DLEdBQVFyQixHQ3ZEWHNCLEdBQU0sQ0FDUixLQUFLL0MsRUFBRyxDQUFFLE9BQU8sU0FBUyxlQUFlQSxDQUFFLEdBQUtmLEdBQVMsbUJBQW1CZSxHQUFJLENBQUUsRUFFbEYsWUFBWVUsRUFBSXNDLEVBQVUsQ0FDeEJ0QyxFQUFHLFVBQVUsT0FBT3NDLENBQVMsRUFDMUJ0QyxFQUFHLFVBQVUsU0FBVyxHQUFJQSxFQUFHLGdCQUFnQixPQUFPLENBQzNELEVBRUEsSUFBSXVDLEVBQU1DLEVBQU85QixFQUFTLENBQ3hCLEdBQUcsQ0FBQzZCLEVBQU8sTUFBTyxDQUFDLEVBQ25CLElBQUlFLEVBQVEsTUFBTSxLQUFLRixFQUFLLGlCQUFpQkMsQ0FBSyxDQUFDLEVBQ25ELE9BQU85QixFQUFXK0IsRUFBTSxRQUFRL0IsQ0FBUSxFQUFJK0IsQ0FDOUMsRUFFQSxnQkFBZ0JDLEVBQUssQ0FDbkIsSUFBSUMsRUFBVyxTQUFTLGNBQWMsVUFBVSxFQUNoRCxPQUFBQSxFQUFTLFVBQVlELEVBQ2RDLEVBQVMsUUFBUSxpQkFDMUIsRUFFQSxjQUFjM0MsRUFBRyxDQUFFLE9BQU9BLEVBQUcsT0FBUyxRQUFVQSxFQUFHLGFBQWF2RyxFQUFjLElBQU0sSUFBSyxFQUV6RixhQUFhbUosRUFBUSxDQUFFLE9BQU9BLEVBQVEsYUFBYSxzQkFBc0IsQ0FBRSxFQUUzRSxpQkFBaUJMLEVBQUssQ0FDcEIsSUFBTU0sRUFBU04sRUFBSyxHQUNkTyxFQUFvQixLQUFLLElBQUksU0FBVSxzQkFBc0JySixhQUF5Qm9KLEtBQVUsRUFDdEcsT0FBTyxLQUFLLElBQUlOLEVBQU0sc0JBQXNCOUksS0FBaUIsRUFBRSxPQUFPcUosQ0FBaUIsQ0FDekYsRUFFQSxzQkFBc0JQLEVBQU0zRCxFQUFJLENBQzlCLE9BQU8sS0FBSyx5QkFBeUIsS0FBSyxJQUFJMkQsRUFBTSxJQUFJdEosT0FBa0IyRixLQUFPLEVBQUcyRCxDQUFJLENBQzFGLEVBRUEsZUFBZUEsRUFBSyxDQUNsQixNQUFPLEdBQUFBLEVBQUssSUFBTUYsR0FBSSxRQUFRRSxFQUFNLFdBQVcsRUFDakQsRUFFQSxZQUFZakUsRUFBRSxDQUNaLElBQUl5RSxFQUFjekUsRUFBRSxTQUFXQSxFQUFFLFVBQVlBLEVBQUUsU0FBWUEsRUFBRSxRQUFVQSxFQUFFLFNBQVcsRUFDaEYwRSxFQUFjMUUsRUFBRSxrQkFBa0IsbUJBQXFCQSxFQUFFLE9BQU8sYUFBYSxVQUFVLEVBQ3ZGMkUsRUFBZ0IzRSxFQUFFLE9BQU8sYUFBYSxRQUFRLEdBQUtBLEVBQUUsT0FBTyxhQUFhLFFBQVEsRUFBRSxZQUFZLElBQU0sU0FDckc0RSxFQUFtQjVFLEVBQUUsT0FBTyxhQUFhLFFBQVEsR0FBSyxDQUFDQSxFQUFFLE9BQU8sYUFBYSxRQUFRLEVBQUUsV0FBVyxHQUFHLEVBQ3pHLE9BQU95RSxHQUFlRSxHQUFpQkQsR0FBY0UsQ0FDdkQsRUFFQSx1QkFBdUI1RSxFQUFFLENBTXZCLE9BSHNCQSxFQUFFLFFBQVVBLEVBQUUsT0FBTyxhQUFhLFFBQVEsSUFBTSxVQUNuRUEsRUFBRSxXQUFhQSxFQUFFLFVBQVUsYUFBYSxZQUFZLElBQU0sU0FHcEQsR0FFQSxDQUFDQSxFQUFFLGtCQUFvQixDQUFDLEtBQUssWUFBWUEsQ0FBQyxDQUVyRCxFQUVBLGVBQWVBLEVBQUc2RSxFQUFnQixDQUNoQyxJQUFJQyxFQUFPOUUsRUFBRSxrQkFBa0Isa0JBQW9CQSxFQUFFLE9BQU8sYUFBYSxNQUFNLEVBQUksS0FDL0UrRSxFQUlKLEdBRkcvRSxFQUFFLGtCQUFvQjhFLElBQVMsTUFBUSxLQUFLLFlBQVk5RSxDQUFDLEdBQ3pEOEUsRUFBSyxXQUFXLFNBQVMsR0FBS0EsRUFBSyxXQUFXLE1BQU0sR0FDcEQ5RSxFQUFFLE9BQU8sa0JBQW9CLE1BQU8sR0FFdkMsR0FBSSxDQUNGK0UsRUFBTSxJQUFJLElBQUlELENBQUksQ0FDcEIsTUFBQSxDQUNFLEdBQUksQ0FDRkMsRUFBTSxJQUFJLElBQUlELEVBQU1ELENBQWUsQ0FDckMsTUFBQSxDQUVFLE1BQU8sRUFDVCxDQUNGLENBRUEsT0FBR0UsRUFBSSxPQUFTRixFQUFnQixNQUFRRSxFQUFJLFdBQWFGLEVBQWdCLFVBQ3BFRSxFQUFJLFdBQWFGLEVBQWdCLFVBQVlFLEVBQUksU0FBV0YsRUFBZ0IsT0FDdEVFLEVBQUksT0FBUyxJQUFNLENBQUNBLEVBQUksS0FBSyxTQUFTLEdBQUcsRUFHN0NBLEVBQUksU0FBUyxXQUFXLE1BQU0sQ0FDdkMsRUFFQSxzQkFBc0JyRCxFQUFHLENBQ3BCLEtBQUssV0FBV0EsQ0FBRSxHQUFJQSxFQUFHLGFBQWEvRSxHQUFhLEVBQUUsRUFDeEQsS0FBSyxXQUFXK0UsRUFBSSxZQUFhLEVBQUksQ0FDdkMsRUFFQSwwQkFBMEIwQyxFQUFNWSxFQUFTLENBQ3ZDLElBQUlYLEVBQVcsU0FBUyxjQUFjLFVBQVUsRUFDaEQsT0FBQUEsRUFBUyxVQUFZRCxFQUNkLEtBQUssZ0JBQWdCQyxFQUFTLFFBQVNXLENBQVEsQ0FDeEQsRUFFQSxVQUFVdEQsRUFBSXVELEVBQVUsQ0FDdEIsT0FBUXZELEVBQUcsYUFBYXVELENBQVMsR0FBS3ZELEVBQUcsYUFBYSxpQkFBaUIsS0FBTyxRQUNoRixFQUVBLFlBQVlBLEVBQUl1RCxFQUFXQyxFQUFZLENBQ3JDLE9BQU94RCxFQUFHLGNBQWdCd0QsRUFBWSxRQUFReEQsRUFBRyxhQUFhdUQsQ0FBUyxDQUFDLEdBQUssQ0FDL0UsRUFFQSxjQUFjdkQsRUFBRyxDQUFFLE9BQU8sS0FBSyxJQUFJQSxFQUFJLElBQUk3RSxLQUFhLENBQUUsRUFFMUQsZ0JBQWdCNkUsRUFBSXNELEVBQVMsQ0FDM0IsT0FBTyxLQUFLLElBQUl0RCxFQUFJLEdBQUc5RSxNQUFxQlgsT0FBa0IrSSxLQUFZLENBQzVFLEVBRUEsdUJBQXVCZixFQUFNa0IsRUFBSyxDQU1oQyxJQUFJQyxFQUFhLElBQUksSUFDakJDLEVBQWUsSUFBSSxJQUV2QixPQUFBRixFQUFLLFFBQVE3RSxHQUFPLENBQ2xCLEtBQUsseUJBQXlCLEtBQUssSUFBSTJELEVBQU0sSUFBSXRKLE9BQWtCMkYsS0FBTyxFQUFHMkQsQ0FBSSxFQUFFLFFBQVFxQixHQUFVLENBQ25HRixFQUFXLElBQUk5RSxDQUFHLEVBQ2xCLEtBQUsseUJBQXlCLEtBQUssSUFBSWdGLEVBQVEsSUFBSTNLLEtBQWdCLEVBQUcySyxDQUFNLEVBQ3pFLElBQUk1RCxHQUFNLFNBQVNBLEVBQUcsYUFBYS9HLEVBQWEsQ0FBQyxDQUFDLEVBQ2xELFFBQVE0SyxHQUFZRixFQUFhLElBQUlFLENBQVEsQ0FBQyxDQUNuRCxDQUFDLENBQ0gsQ0FBQyxFQUVERixFQUFhLFFBQVFHLEdBQVlKLEVBQVcsT0FBT0ksQ0FBUSxDQUFDLEVBRXJESixDQUNULEVBRUEseUJBQXlCSyxFQUFPSCxFQUFPLENBQ3JDLE9BQUdBLEVBQU8sY0FBYzFJLEVBQWlCLEVBQ2hDNkksRUFBTSxPQUFPL0QsR0FBTSxLQUFLLG1CQUFtQkEsRUFBSTRELENBQU0sQ0FBQyxFQUV0REcsQ0FFWCxFQUVBLG1CQUFtQnhCLEVBQU1xQixFQUFPLENBQzlCLEtBQU1yQixFQUFPQSxFQUFLLFlBQVcsQ0FDM0IsR0FBR0EsRUFBSyxXQUFXcUIsQ0FBTSxFQUFJLE1BQU8sR0FDcEMsR0FBR3JCLEVBQUssYUFBYXRILEVBQVcsSUFBTSxLQUFPLE1BQU8sR0FFeEQsRUFFQSxRQUFRK0UsRUFBSXNCLEVBQUksQ0FBRSxPQUFPdEIsRUFBR2hFLEVBQVcsR0FBS2dFLEVBQUdoRSxFQUFXLEVBQUVzRixDQUFHLENBQUUsRUFFakUsY0FBY3RCLEVBQUlzQixFQUFJLENBQUV0QixFQUFHaEUsRUFBVyxHQUFLLE9BQVFnRSxFQUFHaEUsRUFBVyxFQUFFc0YsQ0FBRyxDQUFHLEVBRXpFLFdBQVd0QixFQUFJc0IsRUFBS08sRUFBTSxDQUNwQjdCLEVBQUdoRSxFQUFXLElBQUlnRSxFQUFHaEUsRUFBVyxFQUFJLENBQUMsR0FDekNnRSxFQUFHaEUsRUFBVyxFQUFFc0YsQ0FBRyxFQUFJTyxDQUN6QixFQUVBLGNBQWM3QixFQUFJc0IsRUFBSzBDLEVBQVlDLEVBQVcsQ0FDNUMsSUFBSUMsRUFBVyxLQUFLLFFBQVFsRSxFQUFJc0IsQ0FBRyxFQUNoQzRDLElBQWEsT0FDZCxLQUFLLFdBQVdsRSxFQUFJc0IsRUFBSzJDLEVBQVdELENBQVUsQ0FBQyxFQUUvQyxLQUFLLFdBQVdoRSxFQUFJc0IsRUFBSzJDLEVBQVdDLENBQVEsQ0FBQyxDQUVqRCxFQUVBLGlCQUFpQkMsRUFBUUMsRUFBSyxDQUN4QkQsRUFBTyxhQUFhN0ssRUFBVyxJQUNuQ04sR0FBa0IsUUFBUXNKLEdBQWEsQ0FDckM2QixFQUFPLFVBQVUsU0FBUzdCLENBQVMsR0FBSzhCLEVBQUssVUFBVSxJQUFJOUIsQ0FBUyxDQUN0RSxDQUFDLEVBQ0RwRixHQUFrQixPQUFPbUgsR0FBUUYsRUFBTyxhQUFhRSxDQUFJLENBQUMsRUFBRSxRQUFRQSxHQUFRLENBQzFFRCxFQUFLLGFBQWFDLEVBQU1GLEVBQU8sYUFBYUUsQ0FBSSxDQUFDLENBQ25ELENBQUMsRUFDSCxFQUVBLGFBQWFDLEVBQVFDLEVBQU8sQ0FDdkJBLEVBQU92SSxFQUFXLElBQ25Cc0ksRUFBT3RJLEVBQVcsRUFBSXVJLEVBQU92SSxFQUFXLEVBRTVDLEVBRUEsU0FBU3dJLEVBQUksQ0FDWCxJQUFJQyxFQUFVLFNBQVMsY0FBYyxPQUFPLEVBQzVDLEdBQUdBLEVBQVEsQ0FDVCxHQUFJLENBQUMsT0FBQUMsRUFBUSxPQUFBQyxFQUFRLFFBQVNDLENBQVksRUFBSUgsRUFBUSxRQUNsRGxFLEVBQVUsT0FBT2lFLEdBQVMsVUFBWUEsRUFBSSxLQUFLLElBQU0sR0FDekQsR0FBR2pFLEdBQVcsT0FBT3FFLEdBQWtCLFNBQVcsT0FFbEQsSUFBSUMsRUFBUXRFLEVBQVVxRSxFQUFlSixFQUNyQyxTQUFTLE1BQVEsR0FBR0UsR0FBVSxLQUFLRyxHQUFTLEtBQUtGLEdBQVUsVUFFM0QsU0FBUyxNQUFRSCxDQUVyQixFQUVBLFNBQVN4RSxFQUFJOEUsRUFBT0MsRUFBYUMsRUFBaUJDLEVBQWFDLEVBQWlCQyxFQUFhekUsRUFBUyxDQUNwRyxJQUFJMEUsRUFBV3BGLEVBQUcsYUFBYStFLENBQVcsRUFDdENNLEVBQVdyRixFQUFHLGFBQWFpRixDQUFXLEVBRXZDRyxJQUFhLEtBQUtBLEVBQVdKLEdBQzdCSyxJQUFhLEtBQUtBLEVBQVdILEdBQ2hDLElBQUlyRCxFQUFRdUQsR0FBWUMsRUFDeEIsT0FBT3hELEVBQU0sQ0FDWCxLQUFLLEtBQU0sT0FBT25CLEVBQVMsRUFFM0IsSUFBSyxPQUNBLEtBQUssS0FBS1YsRUFBSSxlQUFlLEdBQzlCQSxFQUFHLGlCQUFpQixPQUFRLElBQU0sQ0FDN0JtRixFQUFZLEdBQUl6RSxFQUFTLENBQzlCLENBQUMsRUFFSCxPQUVGLFFBQ0UsSUFBSTRFLEVBQVUsU0FBU3pELENBQUssRUFDeEIwRCxFQUFVLElBQU1GLEVBQVcsS0FBSyxjQUFjckYsRUFBSWpELEVBQVMsRUFBSTJELEVBQVMsRUFDeEU4RSxFQUFlLEtBQUssU0FBU3hGLEVBQUlsRCxHQUFrQnlJLENBQU8sRUFDOUQsR0FBRyxNQUFNRCxDQUFPLEVBQUksT0FBTy9HLEdBQVMsb0NBQW9Dc0QsR0FBTyxFQUMvRSxHQUFHd0QsRUFBUyxDQUNWLElBQUlJLEVBQWEsR0FDakIsR0FBR1gsRUFBTSxPQUFTLFVBQVUsQ0FDMUIsSUFBSVksRUFBVSxLQUFLLFFBQVExRixFQUFJaEQsRUFBaUIsRUFDaEQsS0FBSyxXQUFXZ0QsRUFBSWhELEdBQW1COEgsRUFBTSxHQUFHLEVBQ2hEVyxFQUFhQyxJQUFZWixFQUFNLElBR2pDLEdBQUcsQ0FBQ1csR0FBYyxLQUFLLFFBQVF6RixFQUFJakQsRUFBUyxFQUMxQyxNQUFPLEdBQ0YsQ0FDTDJELEVBQVMsRUFDVCxJQUFNaUYsRUFBSSxXQUFXLElBQU0sQ0FDdEJSLEVBQVksR0FBSSxLQUFLLGFBQWFuRixFQUFJbEQsRUFBZ0IsQ0FDM0QsRUFBR3dJLENBQU8sRUFDVixLQUFLLFdBQVd0RixFQUFJakQsR0FBVzRJLENBQUMsUUFHbEMsV0FBVyxJQUFNLENBQ1pSLEVBQVksR0FBSSxLQUFLLGFBQWFuRixFQUFJbEQsR0FBa0IwSSxDQUFZLENBQ3pFLEVBQUdGLENBQU8sRUFHWixJQUFJTSxFQUFPNUYsRUFBRyxLQUNYNEYsR0FBUSxLQUFLLEtBQUtBLEVBQU0sZUFBZSxHQUN4Q0EsRUFBSyxpQkFBaUIsU0FBVSxJQUFNLENBQ3BDLE1BQU0sS0FBTSxJQUFJLFNBQVNBLENBQUksRUFBRyxRQUFRLEVBQUcsQ0FBQyxDQUFDaEUsQ0FBSSxJQUFNLENBQ3JELElBQUlpRSxFQUFRRCxFQUFLLGNBQWMsVUFBVWhFLEtBQVEsRUFDakQsS0FBSyxTQUFTaUUsRUFBTy9JLEVBQWdCLEVBQ3JDLEtBQUssY0FBYytJLEVBQU85SSxFQUFTLENBQ3JDLENBQUMsQ0FDSCxDQUFDLEVBRUEsS0FBSyxLQUFLaUQsRUFBSSxlQUFlLEdBQzlCQSxFQUFHLGlCQUFpQixPQUFRLElBQU0sQ0FJaEMsYUFBYSxLQUFLLFFBQVFBLEVBQUlqRCxFQUFTLENBQUMsRUFDeEMsS0FBSyxhQUFhaUQsRUFBSWxELEVBQWdCLENBQ3hDLENBQUMsQ0FFUCxDQUNGLEVBRUEsYUFBYWtELEVBQUlzQixFQUFLa0UsRUFBYSxDQUNqQyxHQUFJLENBQUNNLEVBQU9QLENBQU8sRUFBSSxLQUFLLFFBQVF2RixFQUFJc0IsQ0FBRyxFQUN2Q2tFLElBQWVBLEVBQWVNLEdBQy9CTixJQUFpQk0sSUFDbEIsS0FBSyxTQUFTOUYsRUFBSXNCLENBQUcsRUFDckJpRSxFQUFRLEVBRVosRUFFQSxLQUFLdkYsRUFBSXNCLEVBQUksQ0FDWCxPQUFHLEtBQUssUUFBUXRCLEVBQUlzQixDQUFHLElBQU0sR0FBYyxJQUMzQyxLQUFLLFdBQVd0QixFQUFJc0IsRUFBSyxFQUFJLEVBQ3RCLEdBQ1QsRUFFQSxTQUFTdEIsRUFBSXNCLEVBQUtpRSxFQUFVLFVBQVcsQ0FBRSxFQUFFLENBQ3pDLEdBQUksQ0FBQ0MsQ0FBWSxFQUFJLEtBQUssUUFBUXhGLEVBQUlzQixDQUFHLEdBQUssQ0FBQyxFQUFHaUUsQ0FBTyxFQUN6RCxPQUFBQyxJQUNBLEtBQUssV0FBV3hGLEVBQUlzQixFQUFLLENBQUNrRSxFQUFjRCxDQUFPLENBQUMsRUFDekNDLENBQ1QsRUFLQSxxQkFBcUJyQixFQUFRQyxFQUFNMkIsRUFBZ0JDLEVBQWtCLENBRWhFN0IsRUFBTyxjQUFnQkEsRUFBTyxhQUFhLGVBQWUsR0FBSyxDQUFDQyxFQUFLLGFBQWEsZUFBZSxHQUNsR0EsRUFBSyxhQUFhLGdCQUFpQkQsRUFBTyxhQUFhLGVBQWUsQ0FBQyxFQUd0RUMsRUFBSyxlQUFpQkEsRUFBSyxhQUFhMkIsQ0FBYyxHQUFLM0IsRUFBSyxhQUFhNEIsQ0FBaUIsSUFDL0Y1QixFQUFLLGFBQWEsZ0JBQWlCLHdCQUF3QixDQUUvRCxFQUVBLGdCQUFnQnBFLEVBQUlpRyxFQUFLLENBQ3BCakcsRUFBRyxZQUNKQSxFQUFHLGFBQWEsZ0JBQWlCLEVBQUUsRUFFbkMsUUFBUSxNQUFNOzsyRUFFdURBLEVBQUc7T0FDdkUsRUFFSCxLQUFLLFdBQVdBLEVBQUksaUJBQWtCaUcsQ0FBSSxDQUM1QyxFQUVBLGdCQUFnQmpHLEVBQUcsQ0FBRSxPQUFPLEtBQUssUUFBUUEsRUFBSSxnQkFBZ0IsQ0FBRSxFQUUvRCxZQUFZQSxFQUFHLENBQ2IsT0FBUUEsRUFBRyxXQUFhLEtBQUssZUFDMUIsS0FBSyxRQUFRQSxFQUFJbkYsRUFBZSxHQUFLLEtBQUssUUFBUW1GLEVBQUloRixFQUFpQixFQUM1RSxFQUVBLFVBQVU0SyxFQUFLLENBQ2IsTUFBTSxLQUFLQSxFQUFLLFFBQVEsRUFBRSxRQUFRQyxHQUFTLENBQ3pDLEtBQUssY0FBY0EsRUFBT2hMLEVBQWUsRUFDekMsS0FBSyxjQUFjZ0wsRUFBTzdLLEVBQWlCLENBQzdDLENBQUMsQ0FDSCxFQUVBLFdBQVd1SCxFQUFLLENBQ2QsT0FBT0EsRUFBSyxjQUFnQkEsRUFBSyxhQUFhaEksRUFBYSxDQUM3RCxFQUVBLFlBQVlnSSxFQUFLLENBQ2YsT0FBT0EsRUFBSyxjQUFnQkEsRUFBSyxhQUFhcEgsRUFBVSxJQUFNLElBQ2hFLEVBRUEsYUFBYTZFLEVBQUlrRyxFQUFRLENBQ3ZCLE1BQU8sQ0FBQyxDQUFDQSxFQUFRLEtBQUt0QyxHQUFVQSxFQUFPLFNBQVM1RCxDQUFFLENBQUMsQ0FDckQsRUFFQSxjQUFjQSxFQUFHLENBQ2YsT0FBTyxLQUFLLFdBQVdBLENBQUUsRUFBSUEsRUFBSyxLQUFLLElBQUlBLEVBQUksSUFBSXpGLEtBQWdCLEVBQUUsQ0FBQyxDQUN4RSxFQUVBLGNBQWMrSixFQUFRMUMsRUFBTXVFLEVBQU8sQ0FBQyxFQUFFLENBQ3BDLElBQUlDLEVBQWdCLEdBQ0M5QixFQUFPLFdBQWEsU0FBV0EsRUFBTyxPQUFTLFFBQy9DMUMsSUFBUyxVQUM1QndFLEVBQWdCLElBR2xCLElBQUlDLEVBQVksQ0FBQyxRQURIRixFQUFLLFVBQVksT0FBWUMsRUFBZ0IsQ0FBQyxDQUFDRCxFQUFLLFFBQy9CLFdBQVksR0FBTSxPQUFRQSxFQUFLLFFBQVUsQ0FBQyxDQUFDLEVBQzFFckIsRUFBUWxELElBQVMsUUFBVSxJQUFJLFdBQVcsUUFBU3lFLENBQVMsRUFBSSxJQUFJLFlBQVl6RSxFQUFNeUUsQ0FBUyxFQUNuRy9CLEVBQU8sY0FBY1EsQ0FBSyxDQUM1QixFQUVBLFVBQVV2QyxFQUFNRyxFQUFLLENBQ25CLEdBQUcsT0FBUUEsRUFBVSxJQUNuQixPQUFPSCxFQUFLLFVBQVUsRUFBSSxFQUNyQixDQUNMLElBQUkrRCxFQUFTL0QsRUFBSyxVQUFVLEVBQUssRUFDakMsT0FBQStELEVBQU8sVUFBWTVELEVBQ1o0RCxFQUVYLEVBS0EsV0FBV2hDLEVBQVFDLEVBQVE0QixFQUFPLENBQUMsRUFBRSxDQUNuQyxJQUFJSSxFQUFVLElBQUksSUFBSUosRUFBSyxTQUFXLENBQUMsQ0FBQyxFQUNwQ0ssRUFBWUwsRUFBSyxVQUNqQk0sRUFBY2xDLEVBQU8sV0FDekIsUUFBUXRGLEVBQUl3SCxFQUFZLE9BQVMsRUFBR3hILEdBQUssRUFBR0EsSUFBSSxDQUM5QyxJQUFJMkMsRUFBTzZFLEVBQVl4SCxDQUFDLEVBQUUsS0FDMUIsR0FBSXNILEVBQVEsSUFBSTNFLENBQUksRUFhZkEsSUFBUyxTQUFXMEMsRUFBTyxRQUFVQyxFQUFPLE9BRTdDRCxFQUFPLGFBQWEsUUFBU0MsRUFBTyxhQUFhM0MsQ0FBSSxDQUFDLE1BZnBDLENBQ3BCLElBQU04RSxFQUFjbkMsRUFBTyxhQUFhM0MsQ0FBSSxFQUN6QzBDLEVBQU8sYUFBYTFDLENBQUksSUFBTThFLElBQWdCLENBQUNGLEdBQWNBLEdBQWE1RSxFQUFLLFdBQVcsT0FBTyxJQUNsRzBDLEVBQU8sYUFBYTFDLEVBQU04RSxDQUFXLEdBaUIzQyxJQUFJQyxFQUFjckMsRUFBTyxXQUN6QixRQUFRckYsRUFBSTBILEVBQVksT0FBUyxFQUFHMUgsR0FBSyxFQUFHQSxJQUFJLENBQzlDLElBQUkyQyxFQUFPK0UsRUFBWTFILENBQUMsRUFBRSxLQUN2QnVILEVBQ0U1RSxFQUFLLFdBQVcsT0FBTyxHQUFLLENBQUMyQyxFQUFPLGFBQWEzQyxDQUFJLEdBQUssQ0FBQzFFLEdBQWtCLFNBQVMwRSxDQUFJLEdBQUkwQyxFQUFPLGdCQUFnQjFDLENBQUksRUFFeEgyQyxFQUFPLGFBQWEzQyxDQUFJLEdBQUkwQyxFQUFPLGdCQUFnQjFDLENBQUksRUFHakUsRUFFQSxrQkFBa0IwQyxFQUFRQyxFQUFPLENBRTFCRCxhQUFrQixtQkFBcUJqQyxHQUFJLFdBQVdpQyxFQUFRQyxFQUFRLENBQUMsUUFBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBRTVGQSxFQUFPLFNBQ1JELEVBQU8sYUFBYSxXQUFZLEVBQUksRUFFcENBLEVBQU8sZ0JBQWdCLFVBQVUsQ0FFckMsRUFFQSxrQkFBa0J0RSxFQUFHLENBQ25CLE9BQU9BLEVBQUcsb0JBQXNCQSxFQUFHLE9BQVMsUUFBVUEsRUFBRyxPQUFTLFdBQ3BFLEVBRUEsYUFBYTRHLEVBQVNDLEVBQWdCQyxFQUFhLENBRWpELEdBREdGLGFBQW1CLG1CQUFvQkEsRUFBUSxNQUFNLEVBQ3JELENBQUN2RSxHQUFJLGVBQWV1RSxDQUFPLEVBQUksT0FFakJBLEVBQVEsUUFBUSxRQUFRLEdBQ3hCQSxFQUFRLE1BQU0sRUFDNUIsS0FBSyxrQkFBa0JBLENBQU8sR0FDL0JBLEVBQVEsa0JBQWtCQyxFQUFnQkMsQ0FBWSxDQUUxRCxFQUVBLFlBQVk5RyxFQUFHLENBQUUsTUFBTywrQkFBK0IsS0FBS0EsRUFBRyxPQUFPLEdBQUtBLEVBQUcsT0FBUyxRQUFTLEVBRWhHLGlCQUFpQkEsRUFBRyxDQUNmQSxhQUFjLGtCQUFvQmpGLEdBQWlCLFFBQVFpRixFQUFHLEtBQUssa0JBQWtCLENBQUMsR0FBSyxJQUM1RkEsRUFBRyxRQUFVQSxFQUFHLGFBQWEsU0FBUyxJQUFNLEtBRWhELEVBRUEsZUFBZUEsRUFBRyxDQUFFLE9BQU9sRixHQUFpQixRQUFRa0YsRUFBRyxJQUFJLEdBQUssQ0FBRSxFQUVsRSx5QkFBeUJBLEVBQUkrRyxFQUFtQixDQUM5QyxPQUFPL0csRUFBRyxjQUFnQkEsRUFBRyxhQUFhK0csQ0FBa0IsSUFBTSxNQUFRLFNBQVMsS0FBSyxTQUFTL0csQ0FBRSxDQUNyRyxFQUVBLGdCQUFnQmdILEVBQVd6RCxFQUFVLENBQ25DLEdBQUdsQixHQUFJLFlBQVkyRSxFQUFXekQsRUFBVyxDQUFDLFNBQVUsU0FBUyxDQUFDLEVBQUUsQ0FDOUQsSUFBSTBELEVBQVcsQ0FBQyxFQUNoQkQsRUFBVSxXQUFXLFFBQVFFLEdBQWEsQ0FDcENBLEVBQVUsS0FHVCxFQURtQkEsRUFBVSxXQUFhLEtBQUssV0FBYUEsRUFBVSxVQUFVLEtBQUssSUFBTSxLQUN2RUEsRUFBVSxXQUFhLEtBQUssY0FDakQzSSxHQUFTOzsyQkFDcUIySSxFQUFVLFdBQWFBLEVBQVUsV0FBVyxLQUFLOztDQUFRLEVBRXpGRCxFQUFTLEtBQUtDLENBQVMsRUFFM0IsQ0FBQyxFQUNERCxFQUFTLFFBQVFDLEdBQWFBLEVBQVUsT0FBTyxDQUFDLEVBRXBELEVBRUEscUJBQXFCRixFQUFXRyxFQUFTQyxFQUFNLENBQzdDLElBQUlDLEVBQWdCLElBQUksSUFBSSxDQUFDLEtBQU1wTSxHQUFhRyxHQUFZWixHQUFVQyxFQUFXLENBQUMsRUFDbEYsR0FBR3VNLEVBQVUsUUFBUSxZQUFZLElBQU1HLEVBQVEsWUFBWSxFQUN6RCxhQUFNLEtBQUtILEVBQVUsVUFBVSxFQUM1QixPQUFPM0MsR0FBUSxDQUFDZ0QsRUFBYyxJQUFJaEQsRUFBSyxLQUFLLFlBQVksQ0FBQyxDQUFDLEVBQzFELFFBQVFBLEdBQVEyQyxFQUFVLGdCQUFnQjNDLEVBQUssSUFBSSxDQUFDLEVBRXZELE9BQU8sS0FBSytDLENBQUssRUFDZCxPQUFPeEYsR0FBUSxDQUFDeUYsRUFBYyxJQUFJekYsRUFBSyxZQUFZLENBQUMsQ0FBQyxFQUNyRCxRQUFReUMsR0FBUTJDLEVBQVUsYUFBYTNDLEVBQU0rQyxFQUFNL0MsQ0FBSSxDQUFDLENBQUMsRUFFckQyQyxFQUVGLENBQ0wsSUFBSU0sRUFBZSxTQUFTLGNBQWNILENBQU8sRUFDakQsY0FBTyxLQUFLQyxDQUFLLEVBQUUsUUFBUS9DLEdBQVFpRCxFQUFhLGFBQWFqRCxFQUFNK0MsRUFBTS9DLENBQUksQ0FBQyxDQUFDLEVBQy9FZ0QsRUFBYyxRQUFRaEQsR0FBUWlELEVBQWEsYUFBYWpELEVBQU0yQyxFQUFVLGFBQWEzQyxDQUFJLENBQUMsQ0FBQyxFQUMzRmlELEVBQWEsVUFBWU4sRUFBVSxVQUNuQ0EsRUFBVSxZQUFZTSxDQUFZLEVBQzNCQSxFQUVYLEVBRUEsVUFBVXRILEVBQUk0QixFQUFNb0MsRUFBVyxDQUM3QixJQUFJdUQsR0FBTWxGLEdBQUksUUFBUXJDLEVBQUksUUFBUSxHQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQ3dILENBQWEsSUFBTTVGLElBQVM0RixDQUFZLEVBQzFGLEdBQUdELEVBQUcsQ0FDSixHQUFJLENBQUNFLEVBQU9DLEVBQUtDLENBQWEsRUFBSUosRUFDbEMsT0FBT0ksTUFFUCxRQUFPLE9BQU8zRCxHQUFnQixXQUFhQSxFQUFXLEVBQUlBLENBRTlELEVBRUEsYUFBYWhFLEVBQUk0QixFQUFLLENBQ3BCLEtBQUssY0FBYzVCLEVBQUksU0FBVSxDQUFDLEVBQUc0SCxHQUM1QkEsRUFBSSxPQUFPLENBQUMsQ0FBQ0osRUFBY0ssQ0FBQyxJQUFNTCxJQUFpQjVGLENBQUksQ0FDL0QsQ0FDSCxFQUVBLFVBQVU1QixFQUFJNEIsRUFBTTJGLEVBQUcsQ0FDckIsSUFBSUksRUFBZ0JKLEVBQUd2SCxDQUFFLEVBQ3pCLEtBQUssY0FBY0EsRUFBSSxTQUFVLENBQUMsRUFBRzRILEdBQU8sQ0FDMUMsSUFBSUUsRUFBZ0JGLEVBQUksVUFBVSxDQUFDLENBQUNKLENBQWEsSUFBTTVGLElBQVM0RixDQUFZLEVBQzVFLE9BQUdNLEdBQWlCLEVBQ2xCRixFQUFJRSxDQUFhLEVBQUksQ0FBQ2xHLEVBQU0yRixFQUFJSSxDQUFhLEVBRTdDQyxFQUFJLEtBQUssQ0FBQ2hHLEVBQU0yRixFQUFJSSxDQUFhLENBQUMsRUFFN0JDLENBQ1QsQ0FBQyxDQUNILEVBRUEsc0JBQXNCNUgsRUFBRyxDQUN2QixJQUFJNEgsRUFBTXZGLEdBQUksUUFBUXJDLEVBQUksUUFBUSxFQUM5QjRILEdBRUpBLEVBQUksUUFBUSxDQUFDLENBQUNoRyxFQUFNMkYsRUFBSVEsQ0FBUSxJQUFNLEtBQUssVUFBVS9ILEVBQUk0QixFQUFNMkYsQ0FBRSxDQUFDLENBQ3BFLEVBRUEsU0FBU3ZILEVBQUcsQ0FDVixPQUFPQSxFQUFHLGNBQWdCQSxFQUFHLGFBQWF6RyxFQUFZLENBQ3hELENBQ0YsRUFFT3lPLEVBQVEzRixHQzloQk00RixHQUFyQixLQUFpQyxDQUMvQixPQUFPLFNBQVNDLEVBQVFDLEVBQUssQ0FDM0IsSUFBSUMsRUFBUUQsRUFBSyxVQUFZLE9BRXpCRSxFQURhSCxFQUFPLGFBQWFyTyxFQUFxQixFQUFFLE1BQU0sR0FBRyxFQUMzQyxRQUFReU8sR0FBYSxXQUFXSCxDQUFJLENBQUMsR0FBSyxFQUNwRSxPQUFPQSxFQUFLLEtBQU8sSUFBTUMsR0FBU0MsRUFDcEMsQ0FFQSxPQUFPLGNBQWNILEVBQVFDLEVBQUssQ0FHaEMsT0FGc0JELEVBQU8sYUFBYXhPLEVBQW9CLEVBQUUsTUFBTSxHQUFHLEVBQ3JDLFFBQVE0TyxHQUFhLFdBQVdILENBQUksQ0FBQyxHQUFLLEdBQ3RELEtBQUssU0FBU0QsRUFBUUMsQ0FBSSxDQUNwRCxDQUVBLE9BQU8sc0JBQXNCQSxFQUFLLENBQ2hDLE9BQU9BLEVBQUssdUJBQXlCLEVBQ3ZDLENBRUEsT0FBTyx3QkFBd0JBLEVBQUssQ0FDbENBLEVBQUsscUJBQXVCLEVBQzlCLENBRUEsWUFBWUQsRUFBUUMsRUFBTXpJLEVBQU02SSxFQUFXLENBQ3pDLEtBQUssSUFBTUQsR0FBYSxXQUFXSCxDQUFJLEVBQ3ZDLEtBQUssT0FBU0QsRUFDZCxLQUFLLEtBQU9DLEVBQ1osS0FBSyxLQUFPekksRUFDWixLQUFLLEtBQU8sS0FDWixLQUFLLGFBQWUsR0FDcEIsS0FBSyxRQUFVLEdBQ2YsS0FBSyxVQUFZLEVBQ2pCLEtBQUssa0JBQW9CLEdBQ3pCLEtBQUssUUFBVSxVQUFVLENBQUUsRUFDM0IsS0FBSyxhQUFlLEtBQUssWUFBWSxLQUFLLElBQUksRUFDOUMsS0FBSyxPQUFPLGlCQUFpQjVGLEdBQXVCLEtBQUssWUFBWSxFQUNyRSxLQUFLLFdBQWF5TyxDQUNwQixDQUVBLFVBQVUsQ0FBRSxPQUFPLEtBQUssSUFBSyxDQUU3QixTQUFTQyxFQUFTLENBQ2hCLEtBQUssVUFBWSxLQUFLLE1BQU1BLENBQVEsRUFDakMsS0FBSyxVQUFZLEtBQUssb0JBQ3BCLEtBQUssV0FBYSxLQUNuQixLQUFLLFVBQVksSUFDakIsS0FBSyxrQkFBb0IsSUFDekIsS0FBSyxRQUFVLEdBQ2YsS0FBSyxLQUFLLGlCQUFpQixLQUFLLE9BQVEsS0FBSyxJQUFLLElBQUssSUFBTSxDQUMzREYsR0FBYSxZQUFZLEtBQUssT0FBUSxLQUFLLElBQUksRUFDL0MsS0FBSyxRQUFRLENBQ2YsQ0FBQyxJQUVELEtBQUssa0JBQW9CLEtBQUssVUFDOUIsS0FBSyxLQUFLLGlCQUFpQixLQUFLLE9BQVEsS0FBSyxJQUFLLEtBQUssU0FBUyxHQUd0RSxDQUVBLGFBQWEsQ0FBRSxPQUFPLEtBQUssWUFBYSxDQUV4QyxRQUFRLENBQ04sS0FBSyxLQUFLLHFCQUF1QixHQUNqQyxLQUFLLGFBQWUsR0FDcEIsS0FBSyxRQUFVLEdBQ2YsS0FBSyxRQUFRLENBQ2YsQ0FFQSxRQUFRLENBQUUsT0FBTyxLQUFLLE9BQVEsQ0FFOUIsTUFBTXBLLEVBQVMsU0FBUyxDQUN0QixLQUFLLE9BQU8sb0JBQW9CcEUsR0FBdUIsS0FBSyxZQUFZLEVBQ3hFLEtBQUssS0FBSyxpQkFBaUIsS0FBSyxPQUFRLEtBQUssSUFBSyxDQUFDLE1BQU9vRSxDQUFNLENBQUMsRUFDN0QsS0FBSyxhQUFhLEdBQUlvSyxHQUFhLFdBQVcsS0FBSyxNQUFNLENBQy9ELENBRUEsY0FBYyxDQUFFLE9BQU8sS0FBSyxVQUFXLENBSXZDLE9BQU81SCxFQUFTLENBQ2QsS0FBSyxRQUFVLElBQU0sQ0FDbkIsS0FBSyxPQUFPLG9CQUFvQjVHLEdBQXVCLEtBQUssWUFBWSxFQUN4RTRHLEVBQVMsQ0FDWCxDQUNGLENBRUEsYUFBYSxDQUNNLEtBQUssT0FBTyxhQUFhN0csRUFBcUIsRUFBRSxNQUFNLEdBQUcsRUFDNUQsUUFBUSxLQUFLLEdBQUcsSUFBTSxLQUNsQ3lPLEdBQWEsWUFBWSxLQUFLLE9BQVEsS0FBSyxJQUFJLEVBQy9DLEtBQUssT0FBTyxFQUVoQixDQUVBLG9CQUFvQixDQUNsQixNQUFPLENBQ0wsY0FBZSxLQUFLLEtBQUssYUFDekIsS0FBTSxLQUFLLEtBQUssS0FDaEIsY0FBZSxLQUFLLEtBQUssbUJBQ3pCLEtBQU0sS0FBSyxLQUFLLEtBQ2hCLEtBQU0sS0FBSyxLQUFLLEtBQ2hCLElBQUssS0FBSyxJQUNWLEtBQU0sT0FBTyxLQUFLLEtBQUssTUFBVSxXQUFhLEtBQUssS0FBSyxLQUFLLEVBQUksTUFDbkUsQ0FDRixDQUVBLFNBQVNHLEVBQVUsQ0FDakIsR0FBRyxLQUFLLEtBQUssU0FBUyxDQUNwQixJQUFJL0gsRUFBVytILEVBQVUsS0FBSyxLQUFLLFFBQVEsR0FBS2xLLEdBQVMsOEJBQThCLEtBQUssS0FBSyxVQUFVLEVBQzNHLE1BQU8sQ0FBQyxLQUFNLEtBQUssS0FBSyxTQUFVLFNBQUFtQyxDQUFrQixNQUVwRCxPQUFPLENBQUMsS0FBTSxVQUFXLFNBQVVDLEVBQWUsQ0FFdEQsQ0FFQSxjQUFjRyxFQUFLLENBQ2pCLEtBQUssS0FBT0EsRUFBSyxRQUFRLEtBQUssR0FBRyxFQUM3QixLQUFLLE1BQU92QyxHQUFTLGtEQUFrRCxLQUFLLE1BQU8sQ0FBQyxNQUFPLEtBQUssT0FBUSxTQUFVdUMsQ0FBSSxDQUFDLENBQzdILENBQ0YsRUN4SEk0SCxHQUFzQixFQUVMSixHQUFyQixNQUFxQkssRUFBYSxDQUNoQyxPQUFPLFdBQVdSLEVBQUssQ0FDckIsSUFBSVMsRUFBTVQsRUFBSyxRQUNmLE9BQUdTLElBQVEsT0FDRkEsR0FFUFQsRUFBSyxTQUFXTyxNQUF1QixTQUFTLEVBQ3pDUCxFQUFLLFFBRWhCLENBRUEsT0FBTyxnQkFBZ0J2RixFQUFTZ0csRUFBS2xJLEVBQVMsQ0FDNUMsSUFBSXlILEVBQU8sS0FBSyxZQUFZdkYsQ0FBTyxFQUFFLEtBQUt1RixHQUFRLEtBQUssV0FBV0EsQ0FBSSxJQUFNUyxDQUFHLEVBQy9FbEksRUFBUyxJQUFJLGdCQUFnQnlILENBQUksQ0FBQyxDQUNwQyxDQUVBLE9BQU8scUJBQXFCVSxFQUFPLENBQ2pDLElBQUlDLEVBQVMsRUFDYixPQUFBZCxFQUFJLGlCQUFpQmEsQ0FBTSxFQUFFLFFBQVFoRCxHQUFTLENBQ3pDQSxFQUFNLGFBQWFuTSxFQUFvQixJQUFNbU0sRUFBTSxhQUFhbE0sRUFBYSxHQUM5RW1QLEdBRUosQ0FBQyxFQUNNQSxFQUFTLENBQ2xCLENBRUEsT0FBTyxpQkFBaUJsRyxFQUFRLENBQzlCLElBQUltRyxFQUFRLEtBQUssWUFBWW5HLENBQU8sRUFDaENvRyxFQUFXLENBQUMsRUFDaEIsT0FBQUQsRUFBTSxRQUFRWixHQUFRLENBQ3BCLElBQUl0SyxFQUFRLENBQUMsS0FBTStFLEVBQVEsSUFBSSxFQUMzQnFHLEVBQVlyRyxFQUFRLGFBQWFuSixFQUFjLEVBQ25EdVAsRUFBU0MsQ0FBUyxFQUFJRCxFQUFTQyxDQUFTLEdBQUssQ0FBQyxFQUM5Q3BMLEVBQU0sSUFBTSxLQUFLLFdBQVdzSyxDQUFJLEVBQ2hDdEssRUFBTSxjQUFnQnNLLEVBQUssYUFDM0J0SyxFQUFNLEtBQU9zSyxFQUFLLE1BQVF0SyxFQUFNLElBQ2hDQSxFQUFNLGNBQWdCc0ssRUFBSyxtQkFDM0J0SyxFQUFNLEtBQU9zSyxFQUFLLEtBQ2xCdEssRUFBTSxLQUFPc0ssRUFBSyxLQUNmLE9BQU9BLEVBQUssTUFBVSxhQUFhdEssRUFBTSxLQUFPc0ssRUFBSyxLQUFLLEdBQzdEYSxFQUFTQyxDQUFTLEVBQUUsS0FBS3BMLENBQUssQ0FDaEMsQ0FBQyxFQUNNbUwsQ0FDVCxDQUVBLE9BQU8sV0FBV3BHLEVBQVEsQ0FDeEJBLEVBQVEsTUFBUSxLQUNoQkEsRUFBUSxnQkFBZ0JuSixFQUFjLEVBQ3RDdU8sRUFBSSxXQUFXcEYsRUFBUyxRQUFTLENBQUMsQ0FBQyxDQUNyQyxDQUVBLE9BQU8sWUFBWUEsRUFBU3VGLEVBQUssQ0FDL0JILEVBQUksV0FBV3BGLEVBQVMsUUFBU29GLEVBQUksUUFBUXBGLEVBQVMsT0FBTyxFQUFFLE9BQU9zRyxHQUFLLENBQUMsT0FBTyxHQUFHQSxFQUFHZixDQUFJLENBQUMsQ0FBQyxDQUNqRyxDQUVBLE9BQU8sV0FBV3ZGLEVBQVNtRyxFQUFPSSxFQUFhLENBQzdDLEdBQUd2RyxFQUFRLGFBQWEsVUFBVSxJQUFNLEtBQUssQ0FDM0MsSUFBSXdHLEVBQVdMLEVBQU0sT0FBT1osR0FBUSxDQUFDLEtBQUssWUFBWXZGLENBQU8sRUFBRSxLQUFLc0csR0FBSyxPQUFPLEdBQUdBLEVBQUdmLENBQUksQ0FBQyxDQUFDLEVBQzVGSCxFQUFJLGNBQWNwRixFQUFTLFFBQVMsQ0FBQyxFQUFJc0IsR0FBYUEsRUFBUyxPQUFPa0YsQ0FBUSxDQUFDLEVBQy9FeEcsRUFBUSxNQUFRLFVBR2J1RyxHQUFnQkEsRUFBYSxNQUFNLE9BQVMsSUFBSXZHLEVBQVEsTUFBUXVHLEVBQWEsT0FDaEZuQixFQUFJLFdBQVdwRixFQUFTLFFBQVNtRyxDQUFLLENBRTFDLENBRUEsT0FBTyxpQkFBaUJGLEVBQU8sQ0FDN0IsSUFBSVEsRUFBYXJCLEVBQUksaUJBQWlCYSxDQUFNLEVBQzVDLE9BQU8sTUFBTSxLQUFLUSxDQUFVLEVBQUUsT0FBT3JKLEdBQU1BLEVBQUcsT0FBUyxLQUFLLFlBQVlBLENBQUUsRUFBRSxPQUFTLENBQUMsQ0FDeEYsQ0FFQSxPQUFPLFlBQVk2RixFQUFNLENBQ3ZCLE9BQVFtQyxFQUFJLFFBQVFuQyxFQUFPLE9BQU8sR0FBSyxDQUFDLEdBQUcsT0FBT3FELEdBQUtqQixHQUFZLFNBQVNwQyxFQUFPcUQsQ0FBQyxDQUFDLENBQ3ZGLENBRUEsT0FBTyx3QkFBd0JMLEVBQU8sQ0FDcEMsSUFBSVEsRUFBYXJCLEVBQUksaUJBQWlCYSxDQUFNLEVBQzVDLE9BQU8sTUFBTSxLQUFLUSxDQUFVLEVBQUUsT0FBT3hELEdBQVMsS0FBSyx1QkFBdUJBLENBQUssRUFBRSxPQUFTLENBQUMsQ0FDN0YsQ0FFQSxPQUFPLHVCQUF1QkEsRUFBTSxDQUNsQyxPQUFPLEtBQUssWUFBWUEsQ0FBSyxFQUFFLE9BQU9xRCxHQUFLLENBQUNqQixHQUFZLGNBQWNwQyxFQUFPcUQsQ0FBQyxHQUFLLENBQUNqQixHQUFZLHNCQUFzQmlCLENBQUMsQ0FBQyxDQUMxSCxDQUVBLE9BQU8sd0JBQXdCdEksRUFBUSxDQUNyQ0EsRUFBUSxRQUFRL0MsR0FBU29LLEdBQVksd0JBQXdCcEssRUFBTSxJQUFJLENBQUMsQ0FDMUUsQ0FFQSxZQUFZK0UsRUFBU2xELEVBQU00SixFQUFXLENBQ3BDLEtBQUssV0FBYXRCLEVBQUksYUFBYXBGLENBQU8sRUFDMUMsS0FBSyxLQUFPbEQsRUFDWixLQUFLLFdBQWE0SixFQUNsQixLQUFLLFNBQ0gsTUFBTSxLQUFLWCxHQUFhLHVCQUF1Qi9GLENBQU8sR0FBSyxDQUFDLENBQUMsRUFDMUQsSUFBSXVGLEdBQVEsSUFBSUYsR0FBWXJGLEVBQVN1RixFQUFNekksRUFBTSxLQUFLLFVBQVUsQ0FBQyxFQUd0RWlKLEdBQWEsd0JBQXdCLEtBQUssUUFBUSxFQUVsRCxLQUFLLHFCQUF1QixLQUFLLFNBQVMsTUFDNUMsQ0FFQSxjQUFjLENBQUUsT0FBTyxLQUFLLFVBQVcsQ0FFdkMsU0FBUyxDQUFFLE9BQU8sS0FBSyxRQUFTLENBRWhDLGtCQUFrQjdILEVBQU1ELEVBQVM5QyxFQUFXLENBQzFDLEtBQUssU0FDSCxLQUFLLFNBQVMsSUFBSUYsSUFDYkEsRUFBTSxZQUFZLEdBQ25CLEtBQUssdUJBQ0YsS0FBSyx1QkFBeUIsR0FBSSxLQUFLLFdBQVcsSUFFckRBLEVBQU0sY0FBY2lELENBQUksRUFDeEJqRCxFQUFNLE9BQU8sSUFBTSxDQUNqQixLQUFLLHVCQUNGLEtBQUssdUJBQXlCLEdBQUksS0FBSyxXQUFXLENBQ3ZELENBQUMsR0FFSUEsRUFDUixFQUVILElBQUkwTCxFQUFpQixLQUFLLFNBQVMsT0FBTyxDQUFDQyxFQUFLM0wsSUFBVSxDQUN4RCxHQUFHLENBQUNBLEVBQU0sS0FBTyxPQUFPMkwsRUFDeEIsR0FBSSxDQUFDLEtBQUE1SCxFQUFNLFNBQUFsQixDQUFRLEVBQUk3QyxFQUFNLFNBQVNFLEVBQVcsU0FBUyxFQUMxRCxPQUFBeUwsRUFBSTVILENBQUksRUFBSTRILEVBQUk1SCxDQUFJLEdBQUssQ0FBQyxTQUFBbEIsRUFBb0IsUUFBUyxDQUFDLENBQUMsRUFDekQ4SSxFQUFJNUgsQ0FBSSxFQUFFLFFBQVEsS0FBSy9ELENBQUssRUFDckIyTCxDQUNULEVBQUcsQ0FBQyxDQUFDLEVBRUwsUUFBUTVILEtBQVEySCxFQUFlLENBQzdCLEdBQUksQ0FBQyxTQUFBN0ksRUFBVSxRQUFBRSxDQUFPLEVBQUkySSxFQUFlM0gsQ0FBSSxFQUM3Q2xCLEVBQVNFLEVBQVNDLEVBQVNDLEVBQU0vQyxDQUFVLEVBRS9DLENBQ0YsRUN0SkkwTCxHQUFPLENBQ1QsTUFBTUMsRUFBVUMsRUFBUSxDQUFFLE9BQU9BLEVBQVEsS0FBSy9ILEdBQVE4SCxhQUFvQjlILENBQUksQ0FBRSxFQUVoRixZQUFZNUIsRUFBSTRKLEVBQWdCLENBQzlCLE9BQ0c1SixhQUFjLG1CQUFxQkEsRUFBRyxNQUFRLFVBQzlDQSxhQUFjLGlCQUFtQkEsRUFBRyxPQUFTLFFBQzdDLENBQUNBLEVBQUcsVUFBYSxLQUFLLE1BQU1BLEVBQUksQ0FBQyxpQkFBa0Isa0JBQW1CLG9CQUFxQixpQkFBaUIsQ0FBQyxHQUM3R0EsYUFBYyxtQkFDZEEsRUFBRyxTQUFXLEdBQU0sQ0FBQzRKLEdBQW1CNUosRUFBRyxhQUFhLFVBQVUsSUFBTSxNQUFRQSxFQUFHLGFBQWEsYUFBYSxJQUFNLE1BRXhILEVBRUEsYUFBYUEsRUFBSTRKLEVBQWdCLENBQy9CLEdBQUcsS0FBSyxZQUFZNUosRUFBSTRKLENBQWUsRUFBSSxHQUFJLENBQUU1SixFQUFHLE1BQU0sQ0FBRSxNQUFBLENBQVMsQ0FDckUsTUFBTyxDQUFDLENBQUMsU0FBUyxlQUFpQixTQUFTLGNBQWMsV0FBV0EsQ0FBRSxDQUN6RSxFQUVBLHNCQUFzQkEsRUFBRyxDQUN2QixJQUFJNkosRUFBUTdKLEVBQUcsa0JBQ2YsS0FBTTZKLEdBQU0sQ0FDVixHQUFHLEtBQUssYUFBYUEsRUFBTyxFQUFJLEdBQUssS0FBSyxzQkFBc0JBLEVBQU8sRUFBSSxFQUN6RSxNQUFPLEdBRVRBLEVBQVFBLEVBQU0sbUJBRWxCLEVBRUEsV0FBVzdKLEVBQUcsQ0FDWixJQUFJNkosRUFBUTdKLEVBQUcsa0JBQ2YsS0FBTTZKLEdBQU0sQ0FDVixHQUFHLEtBQUssYUFBYUEsQ0FBSyxHQUFLLEtBQUssV0FBV0EsQ0FBSyxFQUNsRCxNQUFPLEdBRVRBLEVBQVFBLEVBQU0sbUJBRWxCLEVBRUEsVUFBVTdKLEVBQUcsQ0FDWCxJQUFJNkosRUFBUTdKLEVBQUcsaUJBQ2YsS0FBTTZKLEdBQU0sQ0FDVixHQUFHLEtBQUssYUFBYUEsQ0FBSyxHQUFLLEtBQUssVUFBVUEsQ0FBSyxFQUNqRCxNQUFPLEdBRVRBLEVBQVFBLEVBQU0sdUJBRWxCLENBQ0YsRUFDT0MsR0FBUUwsR0N0Q1hNLEdBQVEsQ0FDVixlQUFnQixDQUNkLFlBQVksQ0FBRSxPQUFPLEtBQUssR0FBRyxhQUFhbFEsRUFBcUIsQ0FBRSxFQUVqRSxpQkFBaUIsQ0FBRSxPQUFPLEtBQUssR0FBRyxhQUFhSCxFQUFvQixDQUFFLEVBRXJFLFNBQVMsQ0FBRSxLQUFLLGVBQWlCLEtBQUssZ0JBQWdCLENBQUUsRUFFeEQsU0FBUyxDQUNQLElBQUlzUSxFQUFnQixLQUFLLGdCQUFnQixFQUN0QyxLQUFLLGlCQUFtQkEsSUFDekIsS0FBSyxlQUFpQkEsRUFDbkJBLElBQWtCLElBQ25CLEtBQUssT0FBTyxFQUFFLGFBQWEsS0FBSyxHQUFHLElBQUksR0FJeEMsS0FBSyxXQUFXLElBQU0sS0FBSyxLQUFLLEdBQUcsTUFBUSxNQUM5QyxLQUFLLEdBQUcsY0FBYyxJQUFJLFlBQVlsUSxFQUFxQixDQUFDLENBQzlELENBQ0YsRUFFQSxlQUFnQixDQUNkLFNBQVMsQ0FDUCxLQUFLLElBQU0sS0FBSyxHQUFHLGFBQWEsb0JBQW9CLEVBQ3BELEtBQUssUUFBVSxTQUFTLGVBQWUsS0FBSyxHQUFHLGFBQWFMLEVBQWMsQ0FBQyxFQUMzRTZPLEdBQWEsZ0JBQWdCLEtBQUssUUFBUyxLQUFLLElBQUtqRixHQUFPLENBQzFELEtBQUssSUFBTUEsRUFDWCxLQUFLLEdBQUcsSUFBTUEsQ0FDaEIsQ0FBQyxDQUNILEVBQ0EsV0FBVyxDQUNULElBQUksZ0JBQWdCLEtBQUssR0FBRyxDQUM5QixDQUNGLEVBQ0EsVUFBVyxDQUNULFNBQVMsQ0FDUCxLQUFLLFdBQWEsS0FBSyxHQUFHLGtCQUMxQixLQUFLLFNBQVcsS0FBSyxHQUFHLGlCQUN4QixLQUFLLFdBQVcsaUJBQWlCLFFBQVUvRSxHQUFNLENBQy9DLEdBQUcsQ0FBQ0EsRUFBRSxlQUFpQixDQUFDLEtBQUssR0FBRyxTQUFTQSxFQUFFLGFBQWEsRUFBRSxDQUd4RCxJQUFNMkwsRUFBWTNMLEVBQUUsT0FBTyxtQkFDM0J3TCxHQUFLLGFBQWFHLENBQVMsR0FBS0gsR0FBSyxXQUFXRyxDQUFTLE9BRXpESCxHQUFLLFVBQVUsS0FBSyxFQUFFLENBRTFCLENBQUMsRUFDRCxLQUFLLFNBQVMsaUJBQWlCLFFBQVV4TCxHQUFNLENBQzdDLEdBQUcsQ0FBQ0EsRUFBRSxlQUFpQixDQUFDLEtBQUssR0FBRyxTQUFTQSxFQUFFLGFBQWEsRUFBRSxDQUd4RCxJQUFNMkwsRUFBWTNMLEVBQUUsT0FBTyx1QkFDM0J3TCxHQUFLLGFBQWFHLENBQVMsR0FBS0gsR0FBSyxVQUFVRyxDQUFTLE9BRXhESCxHQUFLLFdBQVcsS0FBSyxFQUFFLENBRTNCLENBQUMsRUFDRCxLQUFLLEdBQUcsaUJBQWlCLGVBQWdCLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUMzRCxPQUFPLGlCQUFpQixLQUFLLEVBQUUsRUFBRSxVQUFZLFFBQzlDQSxHQUFLLFdBQVcsS0FBSyxFQUFFLENBRTNCLENBQ0YsQ0FDRixFQUVJSSxHQUF1QmxLLEdBR3RCLENBQUMsT0FBUSxNQUFNLEVBQUUsUUFBUUEsRUFBRyxTQUFTLFlBQVksQ0FBQyxHQUFLLEVBQVUsS0FDakUsQ0FBQyxTQUFVLE1BQU0sRUFBRSxRQUFRLGlCQUFpQkEsQ0FBRSxFQUFFLFNBQVMsR0FBSyxFQUFVQSxFQUNwRWtLLEdBQW9CbEssRUFBRyxhQUFhLEVBR3pDbUssR0FBYUMsR0FDWkEsRUFDTUEsRUFBZ0IsVUFFaEIsU0FBUyxnQkFBZ0IsV0FBYSxTQUFTLEtBQUssVUFJM0RDLEdBQVVELEdBQ1RBLEVBQ01BLEVBQWdCLHNCQUFzQixFQUFFLE9BSXhDLE9BQU8sYUFBZSxTQUFTLGdCQUFnQixhQUl0REUsR0FBT0YsR0FDTkEsRUFDTUEsRUFBZ0Isc0JBQXNCLEVBQUUsSUFJeEMsRUFJUEcsR0FBa0IsQ0FBQ3ZLLEVBQUlvSyxJQUFvQixDQUM3QyxJQUFJSSxFQUFPeEssRUFBRyxzQkFBc0IsRUFDcEMsT0FBTyxLQUFLLEtBQUt3SyxFQUFLLEdBQUcsR0FBS0YsR0FBSUYsQ0FBZSxHQUFLLEtBQUssS0FBS0ksRUFBSyxJQUFJLEdBQUssR0FBSyxLQUFLLE1BQU1BLEVBQUssR0FBRyxHQUFLSCxHQUFPRCxDQUFlLENBQ25JLEVBRUlLLEdBQXFCLENBQUN6SyxFQUFJb0ssSUFBb0IsQ0FDaEQsSUFBSUksRUFBT3hLLEVBQUcsc0JBQXNCLEVBQ3BDLE9BQU8sS0FBSyxLQUFLd0ssRUFBSyxNQUFNLEdBQUtGLEdBQUlGLENBQWUsR0FBSyxLQUFLLEtBQUtJLEVBQUssSUFBSSxHQUFLLEdBQUssS0FBSyxNQUFNQSxFQUFLLE1BQU0sR0FBS0gsR0FBT0QsQ0FBZSxDQUN6SSxFQUVJTSxHQUFtQixDQUFDMUssRUFBSW9LLElBQW9CLENBQzlDLElBQUlJLEVBQU94SyxFQUFHLHNCQUFzQixFQUNwQyxPQUFPLEtBQUssS0FBS3dLLEVBQUssR0FBRyxHQUFLRixHQUFJRixDQUFlLEdBQUssS0FBSyxLQUFLSSxFQUFLLElBQUksR0FBSyxHQUFLLEtBQUssTUFBTUEsRUFBSyxHQUFHLEdBQUtILEdBQU9ELENBQWUsQ0FDbkksRUFFQUwsR0FBTSxlQUFpQixDQUNyQixTQUFTLENBQ1AsS0FBSyxnQkFBa0JHLEdBQW9CLEtBQUssRUFBRSxFQUNsRCxJQUFJUyxFQUFlUixHQUFVLEtBQUssZUFBZSxFQUM3Q1MsRUFBYSxHQUNiQyxFQUFtQixJQUNuQkMsRUFBWSxLQUVaQyxFQUFlLEtBQUssU0FBU0YsRUFBa0IsQ0FBQ0csRUFBVUMsSUFBZSxDQUMzRUgsRUFBWSxJQUFNLEdBQ2xCLEtBQUssV0FBVyxlQUFlLEtBQUssR0FBSUUsRUFBVSxDQUFDLEdBQUlDLEVBQVcsR0FBSSxTQUFVLEVBQUksRUFBRyxJQUFNLENBQzNGSCxFQUFZLElBQ2QsQ0FBQyxDQUNILENBQUMsRUFFR0ksRUFBb0IsS0FBSyxTQUFTTCxFQUFrQixDQUFDRyxFQUFVQyxJQUFlLENBQ2hGSCxFQUFZLElBQU1HLEVBQVcsZUFBZSxDQUFDLE1BQU8sT0FBTyxDQUFDLEVBQzVELEtBQUssV0FBVyxlQUFlLEtBQUssR0FBSUQsRUFBVSxDQUFDLEdBQUlDLEVBQVcsRUFBRSxFQUFHLElBQU0sQ0FDM0VILEVBQVksS0FFWixPQUFPLHNCQUFzQixJQUFNLENBQzdCSixHQUFpQk8sRUFBWSxLQUFLLGVBQWUsR0FDbkRBLEVBQVcsZUFBZSxDQUFDLE1BQU8sT0FBTyxDQUFDLENBRTlDLENBQUMsQ0FDSCxDQUFDLENBQ0gsQ0FBQyxFQUVHRSxFQUFzQixLQUFLLFNBQVNOLEVBQWtCLENBQUNPLEVBQWFDLElBQWMsQ0FDcEZQLEVBQVksSUFBTU8sRUFBVSxlQUFlLENBQUMsTUFBTyxLQUFLLENBQUMsRUFDekQsS0FBSyxXQUFXLGVBQWUsS0FBSyxHQUFJRCxFQUFhLENBQUMsR0FBSUMsRUFBVSxFQUFFLEVBQUcsSUFBTSxDQUM3RVAsRUFBWSxLQUVaLE9BQU8sc0JBQXNCLElBQU0sQ0FDN0JKLEdBQWlCVyxFQUFXLEtBQUssZUFBZSxHQUNsREEsRUFBVSxlQUFlLENBQUMsTUFBTyxLQUFLLENBQUMsQ0FFM0MsQ0FBQyxDQUNILENBQUMsQ0FDSCxDQUFDLEVBRUQsS0FBSyxTQUFZQyxHQUFPLENBQ3RCLElBQUlDLEVBQVlwQixHQUFVLEtBQUssZUFBZSxFQUU5QyxHQUFHVyxFQUNELE9BQUFILEVBQWVZLEVBQ1JULEVBQVUsRUFFbkIsSUFBSU4sRUFBTyxLQUFLLEdBQUcsc0JBQXNCLEVBQ3JDUSxFQUFXLEtBQUssR0FBRyxhQUFhLEtBQUssV0FBVyxRQUFRLGNBQWMsQ0FBQyxFQUN2RUksRUFBYyxLQUFLLEdBQUcsYUFBYSxLQUFLLFdBQVcsUUFBUSxpQkFBaUIsQ0FBQyxFQUM3RUMsRUFBWSxLQUFLLEdBQUcsaUJBQ3BCSixFQUFhLEtBQUssR0FBRyxrQkFDckJPLEVBQWdCRCxFQUFZWixFQUM1QmMsRUFBa0JGLEVBQVlaLEVBRy9CYSxHQUFpQlIsR0FBWSxDQUFDSixHQUFjSixFQUFLLEtBQU8sR0FDekRJLEVBQWEsR0FDYkcsRUFBYUMsRUFBVUMsQ0FBVSxHQUN6QlEsR0FBbUJiLEdBQWNKLEVBQUssS0FBTyxJQUNyREksRUFBYSxJQUdaSSxHQUFZUSxHQUFpQmpCLEdBQWdCVSxFQUFZLEtBQUssZUFBZSxFQUM5RUMsRUFBa0JGLEVBQVVDLENBQVUsRUFDOUJHLEdBQWVLLEdBQW1CaEIsR0FBbUJZLEVBQVcsS0FBSyxlQUFlLEdBQzVGRixFQUFvQkMsRUFBYUMsQ0FBUyxFQUU1Q1YsRUFBZVksQ0FDakIsRUFFRyxLQUFLLGdCQUNOLEtBQUssZ0JBQWdCLGlCQUFpQixTQUFVLEtBQUssUUFBUSxFQUU3RCxPQUFPLGlCQUFpQixTQUFVLEtBQUssUUFBUSxDQUVuRCxFQUVBLFdBQVcsQ0FDTixLQUFLLGdCQUNOLEtBQUssZ0JBQWdCLG9CQUFvQixTQUFVLEtBQUssUUFBUSxFQUVoRSxPQUFPLG9CQUFvQixTQUFVLEtBQUssUUFBUSxDQUV0RCxFQUVBLFNBQVNHLEVBQVVoTCxFQUFTLENBQzFCLElBQUlpTCxFQUFhLEVBQ2JDLEVBRUosTUFBTyxJQUFJQyxJQUFTLENBQ2xCLElBQUlDLEVBQU0sS0FBSyxJQUFJLEVBQ2ZDLEVBQWdCTCxHQUFZSSxFQUFNSCxHQUVuQ0ksR0FBaUIsR0FBS0EsRUFBZ0JMLEdBQ3BDRSxJQUNELGFBQWFBLENBQUssRUFDbEJBLEVBQVEsTUFFVkQsRUFBYUcsRUFDYnBMLEVBQVMsR0FBR21MLENBQUksR0FDUEQsSUFDVEEsRUFBUSxXQUFXLElBQU0sQ0FDdkJELEVBQWEsS0FBSyxJQUFJLEVBQ3RCQyxFQUFRLEtBQ1JsTCxFQUFTLEdBQUdtTCxDQUFJLENBQ2xCLEVBQUdFLENBQWEsRUFFcEIsQ0FDRixDQUNGLEVBQ0EsSUFBT0MsR0FBUWpDLEdDcE9Na0MsR0FBckIsS0FBZ0MsQ0FDOUIsT0FBTyxTQUFTak0sRUFBSVUsRUFBUyxDQUMzQixHQUFHLENBQUNzSCxFQUFJLFNBQVNoSSxDQUFFLEdBQUssQ0FBQ0EsRUFBRyxRQUFRLElBQUl6RyxLQUFlLEVBQUksT0FBT21ILEVBQVMsRUFDM0UsSUFBTXdMLEVBQWNsTSxFQUFHLFFBQVEsSUFBSXpHLEtBQWUsRUFDNUNxUCxFQUFNc0QsRUFBWSxRQUFRLElBQUkzUyxLQUFlLEVBQUUsYUFBYUEsRUFBWSxFQUM5RTJTLEVBQVksaUJBQWlCLGlCQUFpQnRELElBQU8sSUFBTSxDQUN6RGxJLEVBQVMsQ0FDWCxFQUFHLENBQUMsS0FBTSxFQUFJLENBQUMsQ0FDakIsQ0FFQSxZQUFZVixFQUFHLENBQ2IsS0FBSyxHQUFLQSxFQUNWLEtBQUssV0FBYUEsRUFBRyxhQUFhM0csRUFBZSxFQUFJLFNBQVMyRyxFQUFHLGFBQWEzRyxFQUFlLEVBQUcsRUFBRSxFQUFJLEtBQ3RHLEtBQUssUUFBVTJHLEVBQUcsYUFBYXpHLEVBQVksRUFBSSxTQUFTeUcsRUFBRyxhQUFhekcsRUFBWSxFQUFHLEVBQUUsRUFBSSxJQUMvRixDQUlBLFVBQVVxUCxFQUFLdUQsRUFBVUMsRUFBa0IsQ0FDckMsS0FBSyxTQUFTeEQsQ0FBRyxJQUdyQixLQUFLLFVBQVVBLEVBQUt1RCxFQUFVQyxDQUFpQixFQUcvQyxLQUFLLFlBQVl4RCxFQUFLdUQsQ0FBUSxFQUczQixLQUFLLGtCQUFrQnZELENBQUcsR0FBSSxLQUFLLEdBQUcsZ0JBQWdCdFAsRUFBVyxFQUN0RSxDQUlBLFNBQVNzUCxFQUFJLENBQ1gsTUFBTyxFQUFHLEtBQUssYUFBZSxNQUFRLEtBQUssV0FBYUEsR0FBUyxLQUFLLFVBQVksTUFBUSxLQUFLLFFBQVVBLEVBQzNHLENBUUEsVUFBVUEsRUFBS3VELEVBQVVDLEVBQWtCLENBQ3pDLEdBQUcsQ0FBQyxLQUFLLGVBQWV4RCxDQUFHLEVBQUksT0FFL0IsSUFBSXlELEVBQWFyRSxFQUFJLFFBQVEsS0FBSyxHQUFJek8sRUFBWSxFQUMvQzhTLElBQ0RELEVBQWtCQyxDQUFVLEVBQzVCckUsRUFBSSxjQUFjLEtBQUssR0FBSXpPLEVBQVksR0FFekMsS0FBSyxHQUFHLGdCQUFnQkEsRUFBWSxFQUVwQyxJQUFJNE0sRUFBTyxDQUFDLE9BQVEsQ0FBQyxJQUFBeUMsRUFBVSxNQUFPdUQsQ0FBUSxFQUFHLFFBQVMsR0FBTSxXQUFZLEVBQUssRUFDakYsS0FBSyxHQUFHLGNBQWMsSUFBSSxZQUFZLGlCQUFpQixLQUFLLFVBQVdoRyxDQUFJLENBQUMsQ0FDOUUsQ0FFQSxZQUFZeUMsRUFBS3VELEVBQVMsQ0FDeEIsR0FBRyxDQUFDLEtBQUssa0JBQWtCdkQsQ0FBRyxFQUFFLENBQzNCLEtBQUssZUFBZUEsQ0FBRyxHQUFLLEtBQUssR0FBRyxVQUFVLFNBQVMsb0JBQW9CLEdBQzVFLEtBQUssR0FBRyxVQUFVLE9BQU8sb0JBQW9CLEVBRS9DLE9BR0YsR0FBRyxLQUFLLGVBQWVBLENBQUcsRUFBRSxDQUMxQixLQUFLLEdBQUcsZ0JBQWdCdlAsRUFBZSxFQUN2QyxJQUFJaVQsRUFBYyxLQUFLLEdBQUcsYUFBYWhSLEVBQVksRUFDL0NpUixFQUFjLEtBQUssR0FBRyxhQUFhbFIsRUFBWSxFQUVoRGtSLElBQWdCLE9BQ2pCLEtBQUssR0FBRyxTQUFXQSxJQUFnQixPQUNuQyxLQUFLLEdBQUcsZ0JBQWdCbFIsRUFBWSxHQUVuQ2lSLElBQWdCLE9BQ2pCLEtBQUssR0FBRyxTQUFXQSxJQUFnQixPQUNuQyxLQUFLLEdBQUcsZ0JBQWdCaFIsRUFBWSxHQUd0QyxJQUFJa1IsRUFBaUIsS0FBSyxHQUFHLGFBQWFoUixFQUF3QixFQUMvRGdSLElBQW1CLE9BQ3BCLEtBQUssR0FBRyxVQUFZQSxFQUNwQixLQUFLLEdBQUcsZ0JBQWdCaFIsRUFBd0IsR0FHbEQsSUFBSTJLLEVBQU8sQ0FBQyxPQUFRLENBQUMsSUFBQXlDLEVBQVUsTUFBT3VELENBQVEsRUFBRyxRQUFTLEdBQU0sV0FBWSxFQUFLLEVBQ2pGLEtBQUssR0FBRyxjQUFjLElBQUksWUFBWSxvQkFBb0IsS0FBSyxhQUFjaEcsQ0FBSSxDQUFDLEVBSXBGbk4sR0FBa0IsUUFBUTRJLEdBQVEsRUFDN0JBLElBQVMsc0JBQXdCLEtBQUssZUFBZWdILENBQUcsSUFDekRaLEVBQUksWUFBWSxLQUFLLEdBQUlwRyxDQUFJLENBRWpDLENBQUMsQ0FDSCxDQUVBLGtCQUFrQmdILEVBQUksQ0FBRSxPQUFPLEtBQUssYUFBZSxLQUFPLEdBQVEsS0FBSyxZQUFjQSxDQUFJLENBQ3pGLGVBQWVBLEVBQUksQ0FBRSxPQUFPLEtBQUssVUFBWSxLQUFPLEdBQVEsS0FBSyxTQUFXQSxDQUFJLENBRWhGLGtCQUFrQkEsRUFBSSxDQUNwQixPQUFRLEtBQUssYUFBZSxNQUFRLEtBQUssWUFBY0EsS0FBUyxLQUFLLFVBQVksTUFBUSxLQUFLLFNBQVdBLEVBQzNHLENBR0EsZUFBZUEsRUFBSSxDQUFFLE9BQU8sS0FBSyxVQUFZLE1BQVEsS0FBSyxTQUFXQSxDQUFJLENBQzNFLEVDaEhxQjZELEdBQXJCLEtBQTBDLENBQ3hDLFlBQVlDLEVBQWlCQyxFQUFnQkMsRUFBVyxDQUN0RCxJQUFJQyxFQUFZLElBQUksSUFDaEJDLEVBQVcsSUFBSSxJQUFJLENBQUMsR0FBR0gsRUFBZSxRQUFRLEVBQUUsSUFBSTlDLEdBQVNBLEVBQU0sRUFBRSxDQUFDLEVBRXRFa0QsRUFBbUIsQ0FBQyxFQUV4QixNQUFNLEtBQUtMLEVBQWdCLFFBQVEsRUFBRSxRQUFRN0MsR0FBUyxDQUNwRCxHQUFHQSxFQUFNLEtBQ1BnRCxFQUFVLElBQUloRCxFQUFNLEVBQUUsRUFDbkJpRCxFQUFTLElBQUlqRCxFQUFNLEVBQUUsR0FBRSxDQUN4QixJQUFJbUQsRUFBb0JuRCxFQUFNLHdCQUEwQkEsRUFBTSx1QkFBdUIsR0FDckZrRCxFQUFpQixLQUFLLENBQUMsVUFBV2xELEVBQU0sR0FBSSxrQkFBQW1ELENBQW9DLENBQUMsRUFHdkYsQ0FBQyxFQUVELEtBQUssWUFBY0wsRUFBZSxHQUNsQyxLQUFLLFdBQWFDLEVBQ2xCLEtBQUssaUJBQW1CRyxFQUN4QixLQUFLLGdCQUFrQixDQUFDLEdBQUdELENBQVEsRUFBRSxPQUFPeE4sR0FBTSxDQUFDdU4sRUFBVSxJQUFJdk4sQ0FBRSxDQUFDLENBQ3RFLENBUUEsU0FBUyxDQUNQLElBQUkwSCxFQUFZZ0IsRUFBSSxLQUFLLEtBQUssV0FBVyxFQUN6QyxLQUFLLGlCQUFpQixRQUFRaUYsR0FBbUIsQ0FDNUNBLEVBQWdCLGtCQUNqQnhNLEdBQU0sU0FBUyxlQUFld00sRUFBZ0IsaUJBQWlCLEVBQUdDLEdBQWdCLENBQ2hGek0sR0FBTSxTQUFTLGVBQWV3TSxFQUFnQixTQUFTLEVBQUdFLEdBQVEsQ0FDM0NBLEVBQUssd0JBQTBCQSxFQUFLLHVCQUF1QixJQUFNRCxFQUFhLElBRWpHQSxFQUFhLHNCQUFzQixXQUFZQyxDQUFJLENBRXZELENBQUMsQ0FDSCxDQUFDLEVBR0QxTSxHQUFNLFNBQVMsZUFBZXdNLEVBQWdCLFNBQVMsRUFBR0UsR0FBUSxDQUMzQ0EsRUFBSyx3QkFBMEIsTUFFbERuRyxFQUFVLHNCQUFzQixhQUFjbUcsQ0FBSSxDQUV0RCxDQUFDLENBRUwsQ0FBQyxFQUVFLEtBQUssWUFBYyxXQUNwQixLQUFLLGdCQUFnQixRQUFRLEVBQUUsUUFBUUMsR0FBVSxDQUMvQzNNLEdBQU0sU0FBUyxlQUFlMk0sQ0FBTSxFQUFHRCxHQUFRbkcsRUFBVSxzQkFBc0IsYUFBY21HLENBQUksQ0FBQyxDQUNwRyxDQUFDLENBRUwsQ0FDRixFQ2hFSUUsR0FBeUIsR0FFN0IsU0FBU0MsR0FBV0MsRUFBVUMsRUFBUSxDQUNsQyxJQUFJQyxFQUFjRCxFQUFPLFdBQ3JCbkosRUFDQXFKLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBR0osR0FBSSxFQUFBTCxFQUFPLFdBQWFILElBQTBCRSxFQUFTLFdBQWFGLElBS3hFLFNBQVNwTyxFQUFJd08sRUFBWSxPQUFTLEVBQUd4TyxHQUFLLEVBQUdBLElBQ3pDb0YsRUFBT29KLEVBQVl4TyxDQUFDLEVBQ3BCeU8sRUFBV3JKLEVBQUssS0FDaEJzSixFQUFtQnRKLEVBQUssYUFDeEJ1SixFQUFZdkosRUFBSyxNQUVic0osR0FDQUQsRUFBV3JKLEVBQUssV0FBYXFKLEVBQzdCRyxFQUFZTixFQUFTLGVBQWVJLEVBQWtCRCxDQUFRLEVBRTFERyxJQUFjRCxJQUNWdkosRUFBSyxTQUFXLFVBQ2hCcUosRUFBV3JKLEVBQUssTUFFcEJrSixFQUFTLGVBQWVJLEVBQWtCRCxFQUFVRSxDQUFTLEtBR2pFQyxFQUFZTixFQUFTLGFBQWFHLENBQVEsRUFFdENHLElBQWNELEdBQ2RMLEVBQVMsYUFBYUcsRUFBVUUsQ0FBUyxHQVNyRCxRQUZJRSxFQUFnQlAsRUFBUyxXQUVwQlEsRUFBSUQsRUFBYyxPQUFTLEVBQUdDLEdBQUssRUFBR0EsSUFDM0MxSixFQUFPeUosRUFBY0MsQ0FBQyxFQUN0QkwsRUFBV3JKLEVBQUssS0FDaEJzSixFQUFtQnRKLEVBQUssYUFFcEJzSixHQUNBRCxFQUFXckosRUFBSyxXQUFhcUosRUFFeEJGLEVBQU8sZUFBZUcsRUFBa0JELENBQVEsR0FDakRILEVBQVMsa0JBQWtCSSxFQUFrQkQsQ0FBUSxHQUdwREYsRUFBTyxhQUFhRSxDQUFRLEdBQzdCSCxFQUFTLGdCQUFnQkcsQ0FBUSxFQUlqRCxDQUVBLElBQUlNLEdBQ0FDLEdBQVcsK0JBRVhDLEdBQU0sT0FBTyxTQUFhLElBQWMsT0FBWSxTQUNwREMsR0FBdUIsQ0FBQyxDQUFDRCxJQUFPLFlBQWFBLEdBQUksY0FBYyxVQUFVLEVBQ3pFRSxHQUFvQixDQUFDLENBQUNGLElBQU9BLEdBQUksYUFBZSw2QkFBOEJBLEdBQUksWUFBWSxFQUVsRyxTQUFTRyxHQUEyQjdKLEVBQUssQ0FDckMsSUFBSTdCLEVBQVd1TCxHQUFJLGNBQWMsVUFBVSxFQUMzQyxPQUFBdkwsRUFBUyxVQUFZNkIsRUFDZDdCLEVBQVMsUUFBUSxXQUFXLENBQUMsQ0FDeEMsQ0FFQSxTQUFTMkwsR0FBd0I5SixFQUFLLENBQzdCd0osS0FDREEsR0FBUUUsR0FBSSxZQUFZLEVBQ3hCRixHQUFNLFdBQVdFLEdBQUksSUFBSSxHQUc3QixJQUFJSyxFQUFXUCxHQUFNLHlCQUF5QnhKLENBQUcsRUFDakQsT0FBTytKLEVBQVMsV0FBVyxDQUFDLENBQ2hDLENBRUEsU0FBU0MsR0FBdUJoSyxFQUFLLENBQ2pDLElBQUkrSixFQUFXTCxHQUFJLGNBQWMsTUFBTSxFQUN2QyxPQUFBSyxFQUFTLFVBQVkvSixFQUNkK0osRUFBUyxXQUFXLENBQUMsQ0FDaEMsQ0FVQSxTQUFTRSxHQUFVakssRUFBSyxDQUVwQixPQURBQSxFQUFNQSxFQUFJLEtBQUssRUFDWDJKLEdBSUtFLEdBQTJCN0osQ0FBRyxFQUM1QjRKLEdBQ0ZFLEdBQXdCOUosQ0FBRyxFQUc3QmdLLEdBQXVCaEssQ0FBRyxDQUNyQyxDQVlBLFNBQVNrSyxHQUFpQnZLLEVBQVFDLEVBQU0sQ0FDcEMsSUFBSXVLLEVBQWV4SyxFQUFPLFNBQ3RCeUssRUFBYXhLLEVBQUssU0FDbEJ5SyxFQUFlQyxFQUVuQixPQUFJSCxJQUFpQkMsRUFDVixJQUdYQyxFQUFnQkYsRUFBYSxXQUFXLENBQUMsRUFDekNHLEVBQWNGLEVBQVcsV0FBVyxDQUFDLEVBTWpDQyxHQUFpQixJQUFNQyxHQUFlLEdBQy9CSCxJQUFpQkMsRUFBVyxZQUFZLEVBQ3hDRSxHQUFlLElBQU1ELEdBQWlCLEdBQ3RDRCxJQUFlRCxFQUFhLFlBQVksRUFFeEMsR0FFZixDQVdBLFNBQVNJLEdBQWdCbk4sRUFBTW9OLEVBQWMsQ0FDekMsTUFBTyxDQUFDQSxHQUFnQkEsSUFBaUJmLEdBQ3JDQyxHQUFJLGNBQWN0TSxDQUFJLEVBQ3RCc00sR0FBSSxnQkFBZ0JjLEVBQWNwTixDQUFJLENBQzlDLENBS0EsU0FBU3FOLEdBQWE5SyxFQUFRQyxFQUFNLENBRWhDLFFBREk4SyxFQUFXL0ssRUFBTyxXQUNmK0ssR0FBVSxDQUNiLElBQUlDLEVBQVlELEVBQVMsWUFDekI5SyxFQUFLLFlBQVk4SyxDQUFRLEVBQ3pCQSxFQUFXQyxFQUVmLE9BQU8vSyxDQUNYLENBRUEsU0FBU2dMLEdBQW9CakwsRUFBUUMsRUFBTXhDLEVBQU0sQ0FDekN1QyxFQUFPdkMsQ0FBSSxJQUFNd0MsRUFBS3hDLENBQUksSUFDMUJ1QyxFQUFPdkMsQ0FBSSxFQUFJd0MsRUFBS3hDLENBQUksRUFDcEJ1QyxFQUFPdkMsQ0FBSSxFQUNYdUMsRUFBTyxhQUFhdkMsRUFBTSxFQUFFLEVBRTVCdUMsRUFBTyxnQkFBZ0J2QyxDQUFJLEVBR3ZDLENBRUEsSUFBSXlOLEdBQW9CLENBQ3BCLE9BQVEsU0FBU2xMLEVBQVFDLEVBQU0sQ0FDM0IsSUFBSWtMLEVBQWFuTCxFQUFPLFdBQ3hCLEdBQUltTCxFQUFZLENBQ1osSUFBSUMsRUFBYUQsRUFBVyxTQUFTLFlBQVksRUFDN0NDLElBQWUsYUFDZkQsRUFBYUEsRUFBVyxXQUN4QkMsRUFBYUQsR0FBY0EsRUFBVyxTQUFTLFlBQVksR0FFM0RDLElBQWUsVUFBWSxDQUFDRCxFQUFXLGFBQWEsVUFBVSxJQUMxRG5MLEVBQU8sYUFBYSxVQUFVLEdBQUssQ0FBQ0MsRUFBSyxXQUl6Q0QsRUFBTyxhQUFhLFdBQVksVUFBVSxFQUMxQ0EsRUFBTyxnQkFBZ0IsVUFBVSxHQUtyQ21MLEVBQVcsY0FBZ0IsSUFHbkNGLEdBQW9CakwsRUFBUUMsRUFBTSxVQUFVLENBQ2hELEVBT0EsTUFBTyxTQUFTRCxFQUFRQyxFQUFNLENBQzFCZ0wsR0FBb0JqTCxFQUFRQyxFQUFNLFNBQVMsRUFDM0NnTCxHQUFvQmpMLEVBQVFDLEVBQU0sVUFBVSxFQUV4Q0QsRUFBTyxRQUFVQyxFQUFLLFFBQ3RCRCxFQUFPLE1BQVFDLEVBQUssT0FHbkJBLEVBQUssYUFBYSxPQUFPLEdBQzFCRCxFQUFPLGdCQUFnQixPQUFPLENBRXRDLEVBRUEsU0FBVSxTQUFTQSxFQUFRQyxFQUFNLENBQzdCLElBQUlvTCxFQUFXcEwsRUFBSyxNQUNoQkQsRUFBTyxRQUFVcUwsSUFDakJyTCxFQUFPLE1BQVFxTCxHQUduQixJQUFJdkUsRUFBYTlHLEVBQU8sV0FDeEIsR0FBSThHLEVBQVksQ0FHWixJQUFJd0UsRUFBV3hFLEVBQVcsVUFFMUIsR0FBSXdFLEdBQVlELEdBQWEsQ0FBQ0EsR0FBWUMsR0FBWXRMLEVBQU8sWUFDekQsT0FHSjhHLEVBQVcsVUFBWXVFLEVBRS9CLEVBQ0EsT0FBUSxTQUFTckwsRUFBUUMsRUFBTSxDQUMzQixHQUFJLENBQUNBLEVBQUssYUFBYSxVQUFVLEVBQUcsQ0FVaEMsUUFUSXNMLEVBQWdCLEdBQ2hCelEsRUFBSSxFQUtKaVEsRUFBVy9LLEVBQU8sV0FDbEJ3TCxFQUNBQyxFQUNFVixHQUVGLEdBREFVLEVBQVdWLEVBQVMsVUFBWUEsRUFBUyxTQUFTLFlBQVksRUFDMURVLElBQWEsV0FDYkQsRUFBV1QsRUFDWEEsRUFBV1MsRUFBUyxlQUNqQixDQUNILEdBQUlDLElBQWEsU0FBVSxDQUN2QixHQUFJVixFQUFTLGFBQWEsVUFBVSxFQUFHLENBQ25DUSxFQUFnQnpRLEVBQ2hCLE1BRUpBLElBRUppUSxFQUFXQSxFQUFTLFlBQ2hCLENBQUNBLEdBQVlTLElBQ2JULEVBQVdTLEVBQVMsWUFDcEJBLEVBQVcsTUFLdkJ4TCxFQUFPLGNBQWdCdUwsRUFFL0IsQ0FDSixFQUVJRyxHQUFlLEVBQ2ZDLEdBQTJCLEdBQzNCQyxHQUFZLEVBQ1pDLEdBQWUsRUFFbkIsU0FBU0MsSUFBTyxDQUFDLENBRWpCLFNBQVNDLEdBQWtCM04sRUFBTSxDQUMvQixHQUFJQSxFQUNGLE9BQVFBLEVBQUssY0FBZ0JBLEVBQUssYUFBYSxJQUFJLEdBQU1BLEVBQUssRUFFbEUsQ0FFQSxTQUFTNE4sR0FBZ0I3QyxFQUFZLENBRW5DLE9BQU8sU0FBa0JDLEVBQVVDLEVBQVE0QyxFQUFTLENBS2xELEdBSktBLElBQ0hBLEVBQVUsQ0FBQyxHQUdULE9BQU81QyxHQUFXLFNBQ3BCLEdBQUlELEVBQVMsV0FBYSxhQUFlQSxFQUFTLFdBQWEsUUFBVUEsRUFBUyxXQUFhLE9BQVEsQ0FDckcsSUFBSThDLEVBQWE3QyxFQUNqQkEsRUFBU1UsR0FBSSxjQUFjLE1BQU0sRUFDakNWLEVBQU8sVUFBWTZDLE9BRW5CN0MsRUFBU2lCLEdBQVVqQixDQUFNLE9BRWxCQSxFQUFPLFdBQWFzQyxLQUM3QnRDLEVBQVNBLEVBQU8sbUJBR2xCLElBQUk4QyxFQUFhRixFQUFRLFlBQWNGLEdBQ25DSyxFQUFvQkgsRUFBUSxtQkFBcUJILEdBQ2pETyxFQUFjSixFQUFRLGFBQWVILEdBQ3JDUSxFQUFvQkwsRUFBUSxtQkFBcUJILEdBQ2pEUyxFQUFjTixFQUFRLGFBQWVILEdBQ3JDVSxFQUF3QlAsRUFBUSx1QkFBeUJILEdBQ3pEVyxFQUFrQlIsRUFBUSxpQkFBbUJILEdBQzdDWSxFQUE0QlQsRUFBUSwyQkFBNkJILEdBQ2pFYSxFQUFtQlYsRUFBUSxrQkFBb0JILEdBQy9DYyxFQUFXWCxFQUFRLFVBQVksU0FBU3hNLEVBQVFpRyxFQUFNLENBQUUsT0FBT2pHLEVBQU8sWUFBWWlHLENBQUssQ0FBRyxFQUMxRm1ILEVBQWVaLEVBQVEsZUFBaUIsR0FHeENhLEVBQWtCLE9BQU8sT0FBTyxJQUFJLEVBQ3BDQyxFQUFtQixDQUFDLEVBRXhCLFNBQVNDLEVBQWdCN1AsRUFBSyxDQUM1QjRQLEVBQWlCLEtBQUs1UCxDQUFHLENBQzNCLENBRUEsU0FBUzhQLEVBQXdCN08sRUFBTThPLEVBQWdCLENBQ3JELEdBQUk5TyxFQUFLLFdBQWFzTixHQUVwQixRQURJWCxHQUFXM00sRUFBSyxXQUNiMk0sSUFBVSxDQUVmLElBQUk1TixFQUFNLE9BRU4rUCxJQUFtQi9QLEVBQU1nUCxFQUFXcEIsRUFBUSxHQUc5Q2lDLEVBQWdCN1AsQ0FBRyxHQUtuQnNQLEVBQWdCMUIsRUFBUSxFQUNwQkEsR0FBUyxZQUNYa0MsRUFBd0JsQyxHQUFVbUMsQ0FBYyxHQUlwRG5DLEdBQVdBLEdBQVMsWUFHMUIsQ0FVQSxTQUFTb0MsRUFBVy9PLEVBQU0rTSxFQUFZK0IsR0FBZ0IsQ0FDaERWLEVBQXNCcE8sQ0FBSSxJQUFNLEtBSWhDK00sR0FDRkEsRUFBVyxZQUFZL00sQ0FBSSxFQUc3QnFPLEVBQWdCck8sQ0FBSSxFQUNwQjZPLEVBQXdCN08sRUFBTThPLEVBQWMsRUFDOUMsQ0E4QkEsU0FBU0UsRUFBVWhQLEVBQU0sQ0FDdkIsR0FBSUEsRUFBSyxXQUFhc04sSUFBZ0J0TixFQUFLLFdBQWF1TixHQUV0RCxRQURJWixFQUFXM00sRUFBSyxXQUNiMk0sR0FBVSxDQUNmLElBQUk1TixHQUFNZ1AsRUFBV3BCLENBQVEsRUFDekI1TixLQUNGMlAsRUFBZ0IzUCxFQUFHLEVBQUk0TixHQUl6QnFDLEVBQVVyQyxDQUFRLEVBRWxCQSxFQUFXQSxFQUFTLFlBRzFCLENBRUFxQyxFQUFVaEUsQ0FBUSxFQUVsQixTQUFTaUUsRUFBZ0J4UixFQUFJLENBQzNCd1EsRUFBWXhRLENBQUUsRUFHZCxRQURJa1AsRUFBV2xQLEVBQUcsV0FDWGtQLEdBQVUsQ0FDZixJQUFJdUMsR0FBY3ZDLEVBQVMsWUFFdkI1TixFQUFNZ1AsRUFBV3BCLENBQVEsRUFDN0IsR0FBSTVOLEVBQUssQ0FDUCxJQUFJb1EsR0FBa0JULEVBQWdCM1AsQ0FBRyxFQUdyQ29RLElBQW1CaEQsR0FBaUJRLEVBQVV3QyxFQUFlLEdBQy9EeEMsRUFBUyxXQUFXLGFBQWF3QyxHQUFpQnhDLENBQVEsRUFDMUR5QyxFQUFRRCxHQUFpQnhDLENBQVEsR0FFakNzQyxFQUFnQnRDLENBQVEsT0FLMUJzQyxFQUFnQnRDLENBQVEsRUFHMUJBLEVBQVd1QyxHQUVmLENBRUEsU0FBU0csRUFBY3pOLEVBQVEwTixFQUFrQkMsR0FBZ0IsQ0FJL0QsS0FBT0QsR0FBa0IsQ0FDdkIsSUFBSUUsRUFBa0JGLEVBQWlCLGFBQ2xDQyxHQUFpQnhCLEVBQVd1QixDQUFnQixHQUcvQ1YsRUFBZ0JXLEVBQWMsRUFJOUJSLEVBQVdPLEVBQWtCMU4sRUFBUSxFQUEyQixFQUVsRTBOLEVBQW1CRSxFQUV2QixDQUVBLFNBQVNKLEVBQVF4TixFQUFRQyxFQUFNNE0sR0FBYyxDQUMzQyxJQUFJZ0IsRUFBVTFCLEVBQVdsTSxDQUFJLEVBUTdCLEdBTkk0TixHQUdGLE9BQU9mLEVBQWdCZSxDQUFPLEVBRzVCLENBQUNoQixHQUFjLENBRWpCLElBQUlpQixHQUFxQnhCLEVBQWtCdE0sRUFBUUMsQ0FBSSxFQWlCdkQsR0FoQkk2TixLQUF1QixLQUVoQkEsY0FBOEIsY0FDdkM5TixFQUFTOE4sR0FLVFYsRUFBVXBOLENBQU0sR0FJbEJtSixFQUFXbkosRUFBUUMsQ0FBSSxFQUV2QnNNLEVBQVl2TSxDQUFNLEVBRWQwTSxFQUEwQjFNLEVBQVFDLENBQUksSUFBTSxJQUM5QyxPQUlBRCxFQUFPLFdBQWEsV0FDdEIrTixFQUFjL04sRUFBUUMsQ0FBSSxFQUUxQmlMLEdBQWtCLFNBQVNsTCxFQUFRQyxDQUFJLENBRTNDLENBRUEsU0FBUzhOLEVBQWMvTixFQUFRQyxFQUFNLENBQ25DLElBQUkrTixHQUFXckIsRUFBaUIzTSxFQUFRQyxDQUFJLEVBQ3hDZ08sRUFBaUJoTyxFQUFLLFdBQ3RCeU4sR0FBbUIxTixFQUFPLFdBQzFCa08sR0FDQVAsR0FFQUMsR0FDQU8sR0FDQUMsR0FHSkMsRUFBTyxLQUFPSixHQUFnQixDQUs1QixJQUpBRSxHQUFnQkYsRUFBZSxZQUMvQkMsR0FBZS9CLEVBQVc4QixDQUFjLEVBR2pDLENBQUNELElBQVlOLElBQWtCLENBR3BDLEdBRkFFLEdBQWtCRixHQUFpQixZQUUvQk8sRUFBZSxZQUFjQSxFQUFlLFdBQVdQLEVBQWdCLEVBQUcsQ0FDNUVPLEVBQWlCRSxHQUNqQlQsR0FBbUJFLEdBQ25CLFNBQVNTLEVBR1hWLEdBQWlCeEIsRUFBV3VCLEVBQWdCLEVBRTVDLElBQUlZLEdBQWtCWixHQUFpQixTQUduQ2EsR0FBZSxPQThFbkIsR0E1RUlELEtBQW9CTCxFQUFlLFdBQ2pDSyxLQUFvQjVDLElBR2xCd0MsR0FHRUEsS0FBaUJQLE1BSWRTLEdBQWlCdEIsRUFBZ0JvQixFQUFZLEdBQzVDTixLQUFvQlEsR0FNdEJHLEdBQWUsSUFTZnZPLEVBQU8sYUFBYW9PLEdBQWdCVixFQUFnQixFQUloREMsR0FHRlgsRUFBZ0JXLEVBQWMsRUFJOUJSLEVBQVdPLEdBQWtCMU4sRUFBUSxFQUEyQixFQUdsRTBOLEdBQW1CVSxHQUNuQlQsR0FBaUJ4QixFQUFXdUIsRUFBZ0IsR0FLOUNhLEdBQWUsSUFHVlosS0FFVFksR0FBZSxJQUdqQkEsR0FBZUEsS0FBaUIsSUFBU2hFLEdBQWlCbUQsR0FBa0JPLENBQWMsRUFDdEZNLElBS0ZmLEVBQVFFLEdBQWtCTyxDQUFjLElBR2pDSyxLQUFvQjFDLElBQWEwQyxJQUFtQnpDLE1BRTdEMEMsR0FBZSxHQUdYYixHQUFpQixZQUFjTyxFQUFlLFlBQ2hEUCxHQUFpQixVQUFZTyxFQUFlLGFBTTlDTSxHQUFjLENBR2hCTixFQUFpQkUsR0FDakJULEdBQW1CRSxHQUNuQixTQUFTUyxFQVNQVixHQUdGWCxFQUFnQlcsRUFBYyxFQUk5QlIsRUFBV08sR0FBa0IxTixFQUFRLEVBQTJCLEVBR2xFME4sR0FBbUJFLEdBT3JCLEdBQUlNLEtBQWlCRSxHQUFpQnRCLEVBQWdCb0IsRUFBWSxJQUFNM0QsR0FBaUI2RCxHQUFnQkgsQ0FBYyxFQUVqSEQsSUFBV3BCLEVBQVM1TSxFQUFRb08sRUFBYyxFQUM5Q1osRUFBUVksR0FBZ0JILENBQWMsTUFDakMsQ0FDTCxJQUFJTyxHQUEwQnBDLEVBQWtCNkIsQ0FBYyxFQUMxRE8sS0FBNEIsS0FDMUJBLEtBQ0ZQLEVBQWlCTyxJQUdmUCxFQUFlLFlBQ2pCQSxFQUFpQkEsRUFBZSxVQUFVak8sRUFBTyxlQUFpQitKLEVBQUcsR0FFdkU2QyxFQUFTNU0sRUFBUWlPLENBQWMsRUFDL0JaLEVBQWdCWSxDQUFjLEdBSWxDQSxFQUFpQkUsR0FDakJULEdBQW1CRSxHQUdyQkgsRUFBY3pOLEVBQVEwTixHQUFrQkMsRUFBYyxFQUV0RCxJQUFJYyxHQUFtQnZELEdBQWtCbEwsRUFBTyxRQUFRLEVBQ3BEeU8sSUFDRkEsR0FBaUJ6TyxFQUFRQyxDQUFJLENBRWpDLENBRUEsSUFBSXlPLEVBQWN0RixFQUNkdUYsRUFBa0JELEVBQVksU0FDOUJFLEVBQWF2RixFQUFPLFNBRXhCLEdBQUksQ0FBQ3dELEdBR0gsR0FBSThCLElBQW9CakQsR0FDbEJrRCxJQUFlbEQsR0FDWm5CLEdBQWlCbkIsRUFBVUMsQ0FBTSxJQUNwQ29ELEVBQWdCckQsQ0FBUSxFQUN4QnNGLEVBQWM1RCxHQUFhMUIsRUFBVXdCLEdBQWdCdkIsRUFBTyxTQUFVQSxFQUFPLFlBQVksQ0FBQyxHQUk1RnFGLEVBQWNyRixVQUVQc0YsSUFBb0IvQyxJQUFhK0MsSUFBb0I5QyxHQUFjLENBQzVFLEdBQUkrQyxJQUFlRCxFQUNqQixPQUFJRCxFQUFZLFlBQWNyRixFQUFPLFlBQ25DcUYsRUFBWSxVQUFZckYsRUFBTyxXQUcxQnFGLEVBR1BBLEVBQWNyRixHQUtwQixHQUFJcUYsSUFBZ0JyRixFQUdsQm9ELEVBQWdCckQsQ0FBUSxNQUNuQixDQUNMLEdBQUlDLEVBQU8sWUFBY0EsRUFBTyxXQUFXcUYsQ0FBVyxFQUNwRCxPQVVGLEdBUEFsQixFQUFRa0IsRUFBYXJGLEVBQVF3RCxDQUFZLEVBT3JDRSxFQUNGLFFBQVNqUyxFQUFFLEVBQUdDLEVBQUlnUyxFQUFpQixPQUFRalMsRUFBRUMsRUFBS0QsSUFBSyxDQUNyRCxJQUFJK1QsRUFBYS9CLEVBQWdCQyxFQUFpQmpTLENBQUMsQ0FBQyxFQUNoRCtULEdBQ0YxQixFQUFXMEIsRUFBWUEsRUFBVyxXQUFZLEVBQUssR0FNM0QsTUFBSSxDQUFDaEMsR0FBZ0I2QixJQUFnQnRGLEdBQVlBLEVBQVMsYUFDcERzRixFQUFZLFlBQ2RBLEVBQWNBLEVBQVksVUFBVXRGLEVBQVMsZUFBaUJXLEVBQUcsR0FPbkVYLEVBQVMsV0FBVyxhQUFhc0YsRUFBYXRGLENBQVEsR0FHakRzRixDQUNULENBQ0YsQ0FFQSxJQUFJSSxHQUFXOUMsR0FBZ0I3QyxFQUFVLEVBRWxDNEYsR0FBUUQsR0NwdUJNRSxHQUFyQixLQUE4QixDQUM1QixZQUFZelQsRUFBTXNILEVBQVcxSCxFQUFJb0QsRUFBTTBRLEVBQVNDLEVBQVdsTixFQUFLLENBQUMsRUFBRSxDQUNqRSxLQUFLLEtBQU96RyxFQUNaLEtBQUssV0FBYUEsRUFBSyxXQUN2QixLQUFLLFVBQVlzSCxFQUNqQixLQUFLLEdBQUsxSCxFQUNWLEtBQUssT0FBU0ksRUFBSyxLQUFLLEdBQ3hCLEtBQUssS0FBT2dELEVBQ1osS0FBSyxRQUFVMFEsRUFDZixLQUFLLGNBQWdCLENBQUMsRUFDdEIsS0FBSyx1QkFBeUIsQ0FBQyxFQUMvQixLQUFLLFVBQVlDLEVBQ2pCLEtBQUssU0FBVzFVLEdBQU0sS0FBSyxTQUFTLEVBQ3BDLEtBQUssZUFBaUIsQ0FBQyxFQUN2QixLQUFLLFVBQVksS0FBSyxXQUFXLFFBQVEsUUFBUSxFQUNqRCxLQUFLLGdCQUFrQixLQUFLLFdBQVcsRUFBSSxLQUFLLG1CQUFtQitELENBQUksRUFBSXNFLEVBQzNFLEtBQUssVUFBWSxDQUNmLFlBQWEsQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLG9CQUFxQixDQUFDLEVBQzFELFdBQVksQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGVBQWdCLENBQUMsRUFBRyxtQkFBb0IsQ0FBQyxFQUMzRSwwQkFBMkIsQ0FBQyxDQUM5QixFQUNBLEtBQUssYUFBZWIsRUFBSyxjQUFnQkEsRUFBSyxTQUFXLEdBQ3pELEtBQUssUUFBVUEsRUFBSyxPQUN0QixDQUVBLE9BQU94RyxFQUFNZSxFQUFTLENBQUUsS0FBSyxVQUFVLFNBQVNmLEdBQU0sRUFBRSxLQUFLZSxDQUFRLENBQUUsQ0FDdkUsTUFBTWYsRUFBTWUsRUFBUyxDQUFFLEtBQUssVUFBVSxRQUFRZixHQUFNLEVBQUUsS0FBS2UsQ0FBUSxDQUFFLENBRXJFLFlBQVlmLEtBQVNrTSxFQUFLLENBQ3hCLEtBQUssVUFBVSxTQUFTbE0sR0FBTSxFQUFFLFFBQVFlLEdBQVlBLEVBQVMsR0FBR21MLENBQUksQ0FBQyxDQUN2RSxDQUVBLFdBQVdsTSxLQUFTa00sRUFBSyxDQUN2QixLQUFLLFVBQVUsUUFBUWxNLEdBQU0sRUFBRSxRQUFRZSxHQUFZQSxFQUFTLEdBQUdtTCxDQUFJLENBQUMsQ0FDdEUsQ0FFQSwrQkFBK0IsQ0FDN0IsSUFBSXRJLEVBQVksS0FBSyxXQUFXLFFBQVEzSCxFQUFVLEVBQ2xEb00sRUFBSSxJQUFJLEtBQUssVUFBVyxJQUFJekUsbUJBQTJCQSxpQkFBMEJ2RCxHQUFNLENBQ3JGQSxFQUFHLGFBQWEvRixHQUFXLEVBQUUsQ0FDL0IsQ0FBQyxDQUNILENBRUEsUUFBUXFaLEVBQVksQ0FDbEIsR0FBSSxDQUFDLEtBQUE1VCxFQUFNLFdBQUEzQixFQUFZLEtBQUEyRSxFQUFNLFVBQUFzRSxFQUFXLGdCQUFBdU0sQ0FBZSxFQUFJLEtBQzNELEdBQUcsS0FBSyxXQUFXLEdBQUssQ0FBQ0EsRUFBa0IsT0FFM0MsSUFBSTNNLEVBQVU3SSxFQUFXLGlCQUFpQixFQUN0QyxDQUFDLGVBQUE4SSxFQUFnQixhQUFBQyxDQUFZLEVBQUlGLEdBQVdvQixFQUFJLGtCQUFrQnBCLENBQU8sRUFBSUEsRUFBVSxDQUFDLEVBQ3hGckQsRUFBWXhGLEVBQVcsUUFBUW5DLEVBQVUsRUFDekNtSyxFQUFpQmhJLEVBQVcsUUFBUXJELEVBQWdCLEVBQ3BEc0wsRUFBb0JqSSxFQUFXLFFBQVFwRCxFQUFtQixFQUMxRG9NLEVBQXFCaEosRUFBVyxRQUFRbkQsRUFBa0IsRUFDMUQ0WSxFQUFRLENBQUMsRUFDVEMsRUFBVSxDQUFDLEVBQ1hDLEVBQXVCLENBQUMsRUFFeEJDLEVBQXdCLEtBRTVCLFNBQVNDLEVBQU1MLEVBQWlCaFAsRUFBUXNQLEVBQWEsS0FBSyxhQUFhLENBQ3JFLElBQUlDLEVBQWlCLENBS25CLGFBQWNQLEVBQWdCLGFBQWF0YSxFQUFhLElBQU0sTUFBUSxDQUFDNGEsRUFDdkUsV0FBYXRSLEdBQ1J5RixFQUFJLGVBQWV6RixDQUFJLEVBQVcsS0FHbEMrUSxFQUFxQi9RLEVBQUssR0FDdEJBLEVBQUssSUFBT0EsRUFBSyxjQUFnQkEsRUFBSyxhQUFhdkksRUFBWSxFQUd4RSxpQkFBbUIrWixHQUFrQkEsRUFBSyxhQUFheFEsQ0FBUyxJQUFNMUgsR0FFdEUsU0FBVSxDQUFDK0gsRUFBUWlHLElBQVUsQ0FDM0IsR0FBSSxDQUFDLElBQUFqQixFQUFLLFNBQUFvTCxDQUFRLEVBQUksS0FBSyxnQkFBZ0JuSyxDQUFLLEVBQ2hELEdBQUdqQixJQUFRLE9BQVksT0FBT2hGLEVBQU8sWUFBWWlHLENBQUssRUFLdEQsR0FIQSxLQUFLLGFBQWFBLEVBQU9qQixDQUFHLEVBR3pCb0wsSUFBYSxFQUNkcFEsRUFBTyxzQkFBc0IsYUFBY2lHLENBQUssVUFDeENtSyxJQUFhLEdBQUcsQ0FDeEIsSUFBSTNJLEVBQVl6SCxFQUFPLGlCQUN2QixHQUFHeUgsR0FBYSxDQUFDQSxFQUFVLGFBQWF2UCxFQUFjLEVBQUUsQ0FDdEQsSUFBSW1ZLEVBQWlCLE1BQU0sS0FBS3JRLEVBQU8sUUFBUSxFQUFFLEtBQUtzUSxHQUFLLENBQUNBLEVBQUUsYUFBYXBZLEVBQWMsQ0FBQyxFQUMxRjhILEVBQU8sYUFBYWlHLEVBQU9vSyxDQUFjLE9BRXpDclEsRUFBTyxZQUFZaUcsQ0FBSyxVQUVsQm1LLEVBQVcsRUFBRSxDQUNyQixJQUFJRyxFQUFVLE1BQU0sS0FBS3ZRLEVBQU8sUUFBUSxFQUFFb1EsQ0FBUSxFQUNsRHBRLEVBQU8sYUFBYWlHLEVBQU9zSyxDQUFPLEVBRXRDLEVBQ0Esa0JBQW9CblUsR0FBTyxDQUN6QmdJLEVBQUkscUJBQXFCaEksRUFBSUEsRUFBSStGLEVBQWdCQyxDQUFpQixFQUNsRSxLQUFLLFlBQVksUUFBU2hHLENBQUUsRUFFNUIsSUFBSW9VLEVBQVlwVSxFQUVoQixPQUFHLEtBQUssdUJBQXVCQSxFQUFHLEVBQUUsSUFDbENvVSxFQUFZLEtBQUssdUJBQXVCcFUsRUFBRyxFQUFFLEVBQzdDLE9BQU8sS0FBSyx1QkFBdUJBLEVBQUcsRUFBRSxFQUN4QzRULEVBQU0sS0FBSyxLQUFNUSxFQUFXcFUsRUFBSSxFQUFJLEdBRy9Cb1UsQ0FDVCxFQUNBLFlBQWNwVSxHQUFPLENBQ2hCQSxFQUFHLGNBQWUsS0FBSyxtQkFBbUJBLEVBQUksRUFBSSxFQUdsREEsYUFBYyxrQkFBb0JBLEVBQUcsT0FDdENBLEVBQUcsT0FBU0EsRUFBRyxPQUNQQSxhQUFjLGtCQUFvQkEsRUFBRyxVQUM3Q0EsRUFBRyxLQUFLLEVBRVBnSSxFQUFJLHlCQUF5QmhJLEVBQUkrRyxDQUFrQixJQUNwRDRNLEVBQXdCM1QsSUFJdEJnSSxFQUFJLFdBQVdoSSxDQUFFLEdBQUtOLEVBQUssWUFBWU0sQ0FBRSxHQUFNZ0ksRUFBSSxZQUFZaEksQ0FBRSxHQUFLTixFQUFLLFlBQVlNLEVBQUcsVUFBVSxJQUN0RyxLQUFLLFdBQVcsZ0JBQWlCQSxDQUFFLEVBRXJDd1QsRUFBTSxLQUFLeFQsQ0FBRSxDQUNmLEVBQ0EsZ0JBQWtCQSxHQUFPLEtBQUssZ0JBQWdCQSxDQUFFLEVBQ2hELHNCQUF3QkEsR0FDbkJBLEVBQUcsY0FBZ0JBLEVBQUcsYUFBYS9GLEVBQVMsSUFBTSxLQUFjLEdBQ2hFLEVBQUErRixFQUFHLGdCQUFrQixNQUFRQSxFQUFHLElBQ2pDZ0ksRUFBSSxZQUFZaEksRUFBRyxjQUFldUQsRUFBVyxDQUFDMUgsR0FBWSxTQUFVLFNBQVMsQ0FBQyxHQUc3RSxLQUFLLG1CQUFtQm1FLENBQUUsR0FDMUIsS0FBSyxlQUFlQSxDQUFFLEdBSTNCLFlBQWNBLEdBQU8sQ0FDaEJnSSxFQUFJLHlCQUF5QmhJLEVBQUkrRyxDQUFrQixJQUNwRDRNLEVBQXdCM1QsR0FFMUJ5VCxFQUFRLEtBQUt6VCxDQUFFLEVBQ2YsS0FBSyxtQkFBbUJBLEVBQUksRUFBSyxDQUNuQyxFQUNBLGtCQUFtQixDQUFDbUUsRUFBUUMsSUFBUyxDQUduQyxHQUFHRCxFQUFPLElBQU1BLEVBQU8sV0FBV29QLENBQWUsR0FBS3BQLEVBQU8sS0FBT0MsRUFBSyxHQUN2RSxPQUFBMFAsRUFBZSxnQkFBZ0IzUCxDQUFNLEVBQ3JDQSxFQUFPLFlBQVlDLENBQUksRUFDaEIwUCxFQUFlLFlBQVkxUCxDQUFJLEVBS3hDLEdBSEE0RCxFQUFJLGlCQUFpQjdELEVBQVFDLENBQUksRUFDakM0RCxFQUFJLHFCQUFxQjdELEVBQVFDLEVBQU0yQixFQUFnQkMsQ0FBaUIsRUFDeEVnQyxFQUFJLGdCQUFnQjVELEVBQU1iLENBQVMsRUFDaEMsS0FBSyxlQUFlYSxDQUFJLEVBRXpCLFlBQUssbUJBQW1CRCxDQUFNLEVBQ3ZCLEdBRVQsR0FBRzZELEVBQUksWUFBWTdELENBQU0sRUFDdkIsT0FBQ2xKLEdBQWFHLEdBQVlYLEVBQVcsRUFDbEMsSUFBSTRKLEdBQVEsQ0FBQ0EsRUFBTUYsRUFBTyxhQUFhRSxDQUFJLEVBQUdELEVBQUssYUFBYUMsQ0FBSSxDQUFDLENBQUMsRUFDdEUsUUFBUSxDQUFDLENBQUNBLEVBQU1nUSxFQUFTQyxDQUFLLElBQU0sQ0FDaENBLEdBQVNELElBQVlDLEdBQVFuUSxFQUFPLGFBQWFFLEVBQU1pUSxDQUFLLENBQ2pFLENBQUMsRUFFSSxHQUVULEdBQUd0TSxFQUFJLFVBQVU3RCxFQUFRWixDQUFTLEdBQU1ZLEVBQU8sTUFBUUEsRUFBTyxLQUFLLFdBQVd3UCxDQUFxQixFQUNqRyxZQUFLLFlBQVksVUFBV3hQLEVBQVFDLENBQUksRUFDeEM0RCxFQUFJLFdBQVc3RCxFQUFRQyxFQUFNLENBQUMsVUFBVzRELEVBQUksVUFBVTdELEVBQVFaLENBQVMsQ0FBQyxDQUFDLEVBQzFFa1EsRUFBUSxLQUFLdFAsQ0FBTSxFQUNuQjZELEVBQUksc0JBQXNCN0QsQ0FBTSxFQUN6QixHQUVULEdBQUdBLEVBQU8sT0FBUyxVQUFhQSxFQUFPLFVBQVlBLEVBQU8sU0FBUyxTQUFZLE1BQU8sR0FPdEYsSUFBSW9RLEVBQWtCM04sR0FBV3pDLEVBQU8sV0FBV3lDLENBQU8sR0FBS29CLEVBQUksWUFBWTdELENBQU0sRUFDakZxUSxFQUF1QkQsR0FBbUIsS0FBSyxnQkFBZ0JwUSxFQUFRQyxDQUFJLEVBRS9FLEdBQUdELEVBQU8sYUFBYTdLLEVBQVcsR0FBSzZLLEVBQU8sYUFBYTVLLEVBQVksR0FBSyxLQUFLLFFBQVEsQ0FDcEZ5TyxFQUFJLGNBQWM3RCxDQUFNLElBQ3pCNkQsRUFBSSxXQUFXN0QsRUFBUUMsRUFBTSxDQUFDLFVBQVcsRUFBSSxDQUFDLEVBQzlDLEtBQUssWUFBWSxVQUFXRCxFQUFRQyxDQUFJLEVBQ3hDcVAsRUFBUSxLQUFLdFAsQ0FBTSxHQUVyQjZELEVBQUksc0JBQXNCN0QsQ0FBTSxFQUVoQyxJQUFJckUsRUFEV3FFLEVBQU8sYUFBYTVLLEVBQVksRUFDeEJ5TyxFQUFJLFFBQVE3RCxFQUFRNUssRUFBWSxHQUFLNEssRUFBTyxVQUFVLEVBQUksRUFBSSxLQUNsRnJFLElBQ0RrSSxFQUFJLFdBQVc3RCxFQUFRNUssR0FBY3VHLENBQUssRUFDdEN5VSxJQUNGcFEsRUFBU3JFLElBTWYsR0FBR2tJLEVBQUksV0FBVzVELENBQUksRUFBRSxDQUN0QixJQUFJcVEsRUFBY3RRLEVBQU8sYUFBYWxKLEVBQVcsRUFDakQsT0FBQStNLEVBQUksV0FBVzdELEVBQVFDLEVBQU0sQ0FBQyxRQUFTLENBQUNoSixFQUFVLENBQUMsQ0FBQyxFQUNqRHFaLElBQWdCLElBQUt0USxFQUFPLGFBQWFsSixHQUFhd1osQ0FBVyxFQUNwRXRRLEVBQU8sYUFBYTFKLEdBQWEsS0FBSyxNQUFNLEVBQzVDdU4sRUFBSSxzQkFBc0I3RCxDQUFNLEVBQ3pCLEdBT1QsT0FIQTZELEVBQUksYUFBYTVELEVBQU1ELENBQU0sRUFHMUJvUSxHQUFtQnBRLEVBQU8sT0FBUyxVQUFZLENBQUNxUSxHQUNqRCxLQUFLLFlBQVksVUFBV3JRLEVBQVFDLENBQUksRUFDeEM0RCxFQUFJLGtCQUFrQjdELEVBQVFDLENBQUksRUFDbEM0RCxFQUFJLGlCQUFpQjdELENBQU0sRUFDM0JzUCxFQUFRLEtBQUt0UCxDQUFNLEVBQ25CNkQsRUFBSSxzQkFBc0I3RCxDQUFNLEVBQ3pCLEtBR0pxUSxHQUF1QnJRLEVBQU8sS0FBSyxFQUNuQzZELEVBQUksWUFBWTVELEVBQU1iLEVBQVcsQ0FBQyxTQUFVLFNBQVMsQ0FBQyxHQUN2RG1RLEVBQXFCLEtBQUssSUFBSWpILEdBQXFCdEksRUFBUUMsRUFBTUEsRUFBSyxhQUFhYixDQUFTLENBQUMsQ0FBQyxFQUdoR3lFLEVBQUksaUJBQWlCNUQsQ0FBSSxFQUN6QjRELEVBQUksc0JBQXNCNUQsQ0FBSSxFQUM5QixLQUFLLFlBQVksVUFBV0QsRUFBUUMsQ0FBSSxFQUNqQ0QsRUFFWCxDQUNGLEVBQ0ErTyxHQUFTSyxFQUFpQmhQLEVBQVF1UCxDQUFjLENBQ2xELENBRUEsWUFBSyxZQUFZLFFBQVM5TSxDQUFTLEVBQ25DLEtBQUssWUFBWSxVQUFXQSxFQUFXQSxDQUFTLEVBRWhEakosRUFBVyxLQUFLLFdBQVksSUFBTSxDQUNoQyxLQUFLLFFBQVEsUUFBUSxDQUFDLENBQUM2SyxFQUFLeEosRUFBU3NWLEVBQVdDLENBQUssSUFBTSxDQUN6RHZWLEVBQVEsUUFBUSxDQUFDLENBQUNrQyxFQUFLMFMsRUFBVVksQ0FBSyxJQUFNLENBQzFDLEtBQUssY0FBY3RULENBQUcsRUFBSSxDQUFDLElBQUFzSCxFQUFLLFNBQUFvTCxFQUFVLE1BQUFZLEVBQU8sTUFBQUQsQ0FBSyxDQUN4RCxDQUFDLEVBQ0VBLElBQVUsUUFDWDNNLEVBQUksSUFBSWhCLEVBQVcsSUFBSWxMLE9BQW1COE0sTUFBU2lCLEdBQVMsQ0FDMUQsS0FBSyx5QkFBeUJBLENBQUssQ0FDckMsQ0FBQyxFQUVINkssRUFBVSxRQUFRcFYsR0FBTSxDQUN0QixJQUFJdUssRUFBUTdDLEVBQVUsY0FBYyxRQUFRMUgsS0FBTSxFQUMvQ3VLLEdBQVEsS0FBSyx5QkFBeUJBLENBQUssQ0FDaEQsQ0FBQyxDQUNILENBQUMsRUFHRXlKLEdBQ0R0TCxFQUFJLElBQUksS0FBSyxVQUFXLElBQUl6RSxLQUFhMUgsTUFBZW1FLEdBQU0sQ0FHNUQsS0FBSyxXQUFXLE1BQU1BLEVBQUtOLEdBQVMsQ0FDL0JBLElBQVMsS0FBSyxNQUNmLE1BQU0sS0FBS00sRUFBRyxRQUFRLEVBQUUsUUFBUTZKLEdBQVMsQ0FDdkMsS0FBSyx5QkFBeUJBLENBQUssQ0FDckMsQ0FBQyxDQUVMLENBQUMsQ0FDSCxDQUFDLEVBR0grSixFQUFNLEtBQUssS0FBTUwsRUFBaUI3USxDQUFJLENBQ3hDLENBQUMsRUFFRTNFLEVBQVcsZUFBZSxJQUMzQmUsR0FBbUIsRUFDbkJLLEdBQTJCLEtBQUssYUFBYSxFQUU3QyxNQUFNLEtBQUssU0FBUyxpQkFBaUIsZ0JBQWdCLENBQUMsRUFBRSxRQUFRb0QsR0FBUSxDQUNuRUEsRUFBSyxNQUNOLFFBQVEsTUFBTTtFQUF1R0EsQ0FBSSxDQUU3SCxDQUFDLEdBR0FtUixFQUFxQixPQUFTLEdBQy9CM1YsRUFBVyxLQUFLLHdDQUF5QyxJQUFNLENBQzdEMlYsRUFBcUIsUUFBUW1CLEdBQVVBLEVBQU8sUUFBUSxDQUFDLENBQ3pELENBQUMsRUFHSDlXLEVBQVcsY0FBYyxJQUFNaUssRUFBSSxhQUFhcEIsRUFBU0MsRUFBZ0JDLENBQVksQ0FBQyxFQUN0RmtCLEVBQUksY0FBYyxTQUFVLFlBQVksRUFDeEN3TCxFQUFNLFFBQVF4VCxHQUFNLEtBQUssV0FBVyxRQUFTQSxDQUFFLENBQUMsRUFDaER5VCxFQUFRLFFBQVF6VCxHQUFNLEtBQUssV0FBVyxVQUFXQSxDQUFFLENBQUMsRUFFcEQsS0FBSyx5QkFBeUIsRUFFM0IyVCxJQUNENVYsRUFBVyxPQUFPLEVBR2xCLE9BQU8sZUFBZTRWLENBQXFCLEVBQUUsT0FBTyxLQUFLQSxDQUFxQixHQUV6RSxFQUNULENBRUEsZ0JBQWdCM1QsRUFBRyxFQUVkZ0ksRUFBSSxXQUFXaEksQ0FBRSxHQUFLZ0ksRUFBSSxZQUFZaEksQ0FBRSxJQUFJLEtBQUssV0FBVyxnQkFBZ0JBLENBQUUsRUFDakYsS0FBSyxXQUFXLFlBQWFBLENBQUUsQ0FDakMsQ0FFQSxtQkFBbUJ1QyxFQUFLLENBQ3RCLE9BQUdBLEVBQUssY0FBZ0JBLEVBQUssYUFBYSxLQUFLLFNBQVMsSUFBTSxNQUM1RCxLQUFLLGVBQWUsS0FBS0EsQ0FBSSxFQUN0QixJQUVBLEVBRVgsQ0FFQSx5QkFBeUJzSCxFQUFNLENBRzFCLEtBQUssY0FBY0EsRUFBTSxFQUFFLEdBQzVCLEtBQUssdUJBQXVCQSxFQUFNLEVBQUUsRUFBSUEsRUFDeENBLEVBQU0sT0FBTyxHQUdULEtBQUssbUJBQW1CQSxDQUFLLElBQy9CQSxFQUFNLE9BQU8sRUFDYixLQUFLLGdCQUFnQkEsQ0FBSyxFQUdoQyxDQUVBLGdCQUFnQjdKLEVBQUcsQ0FFakIsT0FEYUEsRUFBRyxHQUFLLEtBQUssY0FBY0EsRUFBRyxFQUFFLEVBQUksQ0FBQyxJQUNqQyxDQUFDLENBQ3BCLENBRUEsYUFBYUEsRUFBSTRJLEVBQUksQ0FDbkJaLEVBQUksVUFBVWhJLEVBQUlsRSxHQUFnQmtFLEdBQU1BLEVBQUcsYUFBYWxFLEdBQWdCOE0sQ0FBRyxDQUFDLENBQzlFLENBRUEsbUJBQW1CNUksRUFBSW9JLEVBQU0sQ0FDM0IsR0FBSSxDQUFDLElBQUFRLEVBQUssU0FBQW9MLEVBQVUsTUFBQVcsQ0FBSyxFQUFJLEtBQUssZ0JBQWdCM1UsQ0FBRSxFQUNwRCxHQUFHZ1UsSUFBYSxTQUdoQixLQUFLLGFBQWFoVSxFQUFJNEksQ0FBRyxFQUV0QixHQUFDK0wsR0FBUyxDQUFDdk0sSUFTVnBJLEVBQUcsZUFFUCxJQUFHZ1UsSUFBYSxFQUNkaFUsRUFBRyxjQUFjLGFBQWFBLEVBQUlBLEVBQUcsY0FBYyxpQkFBaUIsVUFDNURnVSxFQUFXLEVBQUUsQ0FDckIsSUFBSWMsRUFBVyxNQUFNLEtBQUs5VSxFQUFHLGNBQWMsUUFBUSxFQUMvQytVLEVBQVdELEVBQVMsUUFBUTlVLENBQUUsRUFDbEMsR0FBR2dVLEdBQVljLEVBQVMsT0FBUyxFQUMvQjlVLEVBQUcsY0FBYyxZQUFZQSxDQUFFLE1BQzFCLENBQ0wsSUFBSW1VLEVBQVVXLEVBQVNkLENBQVEsRUFDNUJlLEVBQVdmLEVBQ1poVSxFQUFHLGNBQWMsYUFBYUEsRUFBSW1VLENBQU8sRUFFekNuVSxFQUFHLGNBQWMsYUFBYUEsRUFBSW1VLEVBQVEsa0JBQWtCLEdBS2xFLEtBQUssaUJBQWlCblUsQ0FBRSxFQUMxQixDQUVBLGlCQUFpQkEsRUFBRyxDQUNsQixHQUFJLENBQUMsTUFBQTRVLENBQUssRUFBSSxLQUFLLGdCQUFnQjVVLENBQUUsRUFDakM4VSxFQUFXRixJQUFVLE1BQVEsTUFBTSxLQUFLNVUsRUFBRyxjQUFjLFFBQVEsRUFDbEU0VSxHQUFTQSxFQUFRLEdBQUtFLEVBQVMsT0FBU0YsRUFBUSxHQUNqREUsRUFBUyxNQUFNLEVBQUdBLEVBQVMsT0FBU0YsQ0FBSyxFQUFFLFFBQVEvSyxHQUFTLEtBQUsseUJBQXlCQSxDQUFLLENBQUMsRUFDeEYrSyxHQUFTQSxHQUFTLEdBQUtFLEVBQVMsT0FBU0YsR0FDakRFLEVBQVMsTUFBTUYsQ0FBSyxFQUFFLFFBQVEvSyxHQUFTLEtBQUsseUJBQXlCQSxDQUFLLENBQUMsQ0FFL0UsQ0FFQSwwQkFBMEIsQ0FDeEIsR0FBSSxDQUFDLGVBQUFtTCxFQUFnQixXQUFBalgsQ0FBVSxFQUFJLEtBQ2hDaVgsRUFBZSxPQUFTLEdBQ3pCalgsRUFBVyxrQkFBa0JpWCxFQUFnQixHQUFPLElBQU0sQ0FDeERBLEVBQWUsUUFBUWhWLEdBQU0sQ0FDM0IsSUFBSTZKLEVBQVE3QixFQUFJLGNBQWNoSSxDQUFFLEVBQzdCNkosR0FBUTlMLEVBQVcsZ0JBQWdCOEwsQ0FBSyxFQUMzQzdKLEVBQUcsT0FBTyxDQUNaLENBQUMsRUFDRCxLQUFLLFdBQVcsdUJBQXdCZ1YsQ0FBYyxDQUN4RCxDQUFDLENBRUwsQ0FFQSxnQkFBZ0I3USxFQUFRQyxFQUFLLENBQzNCLE1BQUcsRUFBRUQsYUFBa0Isb0JBQXNCQSxFQUFPLFNBQWtCLEdBQ25FQSxFQUFPLFFBQVEsU0FBV0MsRUFBSyxRQUFRLE9BQWdCLElBRzFEQSxFQUFLLE1BQVFELEVBQU8sTUFJYixDQUFDQSxFQUFPLFlBQVlDLENBQUksRUFDakMsQ0FFQSxZQUFZLENBQUUsT0FBTyxLQUFLLFFBQVMsQ0FFbkMsZUFBZXBFLEVBQUcsQ0FDaEIsT0FBT0EsRUFBRyxXQUFhLEtBQUssY0FBZ0JBLEVBQUcsYUFBYWpHLEVBQVEsQ0FDdEUsQ0FFQSxtQkFBbUIySSxFQUFLLENBQ3RCLEdBQUcsQ0FBQyxLQUFLLFdBQVcsRUFBSSxPQUN4QixHQUFJLENBQUN1UyxFQUFPLEdBQUdDLENBQUksRUFBSWxOLEVBQUksc0JBQXNCLEtBQUssVUFBVyxLQUFLLFNBQVMsRUFDL0UsT0FBR2tOLEVBQUssU0FBVyxHQUFLbE4sRUFBSSxnQkFBZ0J0RixDQUFJLElBQU0sRUFDN0N1UyxFQUVBQSxHQUFTQSxFQUFNLFVBRTFCLENBRUEsUUFBUXJSLEVBQVFpRyxFQUFNLENBQUUsT0FBTyxNQUFNLEtBQUtqRyxFQUFPLFFBQVEsRUFBRSxRQUFRaUcsQ0FBSyxDQUFFLENBQzVFLEVDdGNNc0wsR0FBWSxJQUFJLElBQUksQ0FDeEIsT0FDQSxPQUNBLEtBQ0EsTUFDQSxVQUNBLFFBQ0EsS0FDQSxNQUNBLFFBQ0EsU0FDQSxPQUNBLE9BQ0EsUUFDQSxTQUNBLFFBQ0EsS0FDRixDQUFDLEVBQ0tDLEdBQWEsSUFBSSxJQUFJLENBQUMsSUFBSyxHQUFJLENBQUMsRUFFM0JDLEdBQWEsQ0FBQzNTLEVBQU0wRSxFQUFPa08sSUFBbUIsQ0FDdkQsSUFBSXJXLEVBQUksRUFDSnNXLEVBQWdCLEdBQ2hCQyxFQUFXQyxFQUFVQyxFQUFLQyxFQUFlclcsRUFBSXNXLEVBRTdDQyxFQUFZblQsRUFBSyxNQUFNLHNDQUFzQyxFQUNqRSxHQUFHbVQsSUFBYyxLQUFPLE1BQU0sSUFBSSxNQUFNLGtCQUFrQm5ULEdBQU0sRUFRaEUsSUFOQXpELEVBQUk0VyxFQUFVLENBQUMsRUFBRSxPQUNqQkwsRUFBWUssRUFBVSxDQUFDLEVBQ3ZCSCxFQUFNRyxFQUFVLENBQUMsRUFDakJGLEVBQWdCMVcsRUFHWkEsRUFBR0EsRUFBSXlELEVBQUssUUFDWEEsRUFBSyxPQUFPekQsQ0FBQyxJQUFNLElBREFBLElBRXRCLEdBQUd5RCxFQUFLLE9BQU96RCxDQUFDLElBQU0sSUFBSSxDQUN4QixJQUFJNlcsRUFBT3BULEVBQUssTUFBTXpELEVBQUksRUFBR0EsQ0FBQyxJQUFNLE1BQ3BDQSxJQUNBLElBQUk4VyxFQUFPclQsRUFBSyxPQUFPekQsQ0FBQyxFQUN4QixHQUFHbVcsR0FBVyxJQUFJVyxDQUFJLEVBQUUsQ0FDdEIsSUFBSUMsRUFBZS9XLEVBRW5CLElBREFBLElBQ0lBLEVBQUdBLEVBQUl5RCxFQUFLLFFBQ1hBLEVBQUssT0FBT3pELENBQUMsSUFBTThXLEVBREE5VyxJQUN0QixDQUVGLEdBQUc2VyxFQUFLLENBQ054VyxFQUFLb0QsRUFBSyxNQUFNc1QsRUFBZSxFQUFHL1csQ0FBQyxFQUNuQyxRQU1SLElBQUlnWCxFQUFVdlQsRUFBSyxPQUFTLEVBRTVCLElBREE2UyxFQUFnQixHQUNWVSxHQUFXVCxFQUFVLE9BQVNFLEVBQUksUUFBTyxDQUM3QyxJQUFJSyxFQUFPclQsRUFBSyxPQUFPdVQsQ0FBTyxFQUM5QixHQUFHVixFQUNFUSxJQUFTLEtBQU9yVCxFQUFLLE1BQU11VCxFQUFVLEVBQUdBLENBQU8sSUFBTSxPQUN0RFYsRUFBZ0IsR0FDaEJVLEdBQVcsR0FFWEEsR0FBVyxVQUVMRixJQUFTLEtBQU9yVCxFQUFLLE1BQU11VCxFQUFVLEVBQUdBLENBQU8sSUFBTSxLQUM3RFYsRUFBZ0IsR0FDaEJVLEdBQVcsTUFDYixJQUFVRixJQUFTLElBQ2pCLE1BRUFFLEdBQVcsR0FHZlIsRUFBVy9TLEVBQUssTUFBTXVULEVBQVUsRUFBR3ZULEVBQUssTUFBTSxFQUU5QyxJQUFJd1QsRUFDRixPQUFPLEtBQUs5TyxDQUFLLEVBQ2QsSUFBSS9DLEdBQVErQyxFQUFNL0MsQ0FBSSxJQUFNLEdBQU9BLEVBQU8sR0FBR0EsTUFBUytDLEVBQU0vQyxDQUFJLElBQUksRUFDcEUsS0FBSyxHQUFHLEVBRWIsR0FBR2lSLEVBQWUsQ0FFaEIsSUFBSWEsRUFBWTdXLEVBQUssUUFBUUEsS0FBUSxHQUNsQzZWLEdBQVUsSUFBSU8sQ0FBRyxFQUNsQkUsRUFBVSxJQUFJRixJQUFNUyxJQUFZRCxJQUFhLEdBQUssR0FBSyxNQUFNQSxNQUU3RE4sRUFBVSxJQUFJRixJQUFNUyxJQUFZRCxJQUFhLEdBQUssR0FBSyxNQUFNQSxPQUFjUixTQUV4RSxDQUNMLElBQUlSLEVBQU94UyxFQUFLLE1BQU1pVCxFQUFlTSxFQUFVLENBQUMsRUFDaERMLEVBQVUsSUFBSUYsSUFBTVEsSUFBYSxHQUFLLEdBQUssTUFBTUEsSUFBV2hCLElBRzlELE1BQU8sQ0FBQ1UsRUFBU0osRUFBV0MsQ0FBUSxDQUN0QyxFQUVxQlcsR0FBckIsS0FBOEIsQ0FDNUIsT0FBTyxRQUFRQyxFQUFLLENBQ2xCLEdBQUksQ0FBQyxDQUFDN1ksRUFBSyxFQUFHOFksRUFBTyxDQUFDL1ksRUFBTSxFQUFHZ1osRUFBUSxDQUFDOVksRUFBSyxFQUFHK1ksQ0FBSyxFQUFJSCxFQUN6RCxjQUFPQSxFQUFLN1ksRUFBSyxFQUNqQixPQUFPNlksRUFBSzlZLEVBQU0sRUFDbEIsT0FBTzhZLEVBQUs1WSxFQUFLLEVBQ1YsQ0FBQyxLQUFBNFksRUFBTSxNQUFBRyxFQUFPLE1BQU9GLEdBQVMsS0FBTSxPQUFRQyxHQUFVLENBQUMsQ0FBQyxDQUNqRSxDQUVBLFlBQVlFLEVBQVFDLEVBQVMsQ0FDM0IsS0FBSyxPQUFTRCxFQUNkLEtBQUssU0FBVyxDQUFDLEVBQ2pCLEtBQUssUUFBVSxFQUNmLEtBQUssVUFBVUMsQ0FBUSxDQUN6QixDQUVBLGNBQWMsQ0FBRSxPQUFPLEtBQUssTUFBTyxDQUVuQyxTQUFTQyxFQUFTLENBQ2hCLEdBQUksQ0FBQ25TLEVBQUs0TyxDQUFPLEVBQUksS0FBSyxrQkFBa0IsS0FBSyxTQUFVLEtBQUssU0FBUzlWLEVBQVUsRUFBR3FaLEVBQVUsR0FBTSxDQUFDLENBQUMsRUFDeEcsTUFBTyxDQUFDblMsRUFBSzRPLENBQU8sQ0FDdEIsQ0FFQSxrQkFBa0JzRCxFQUFVRSxFQUFhRixFQUFTcFosRUFBVSxFQUFHcVosRUFBVUUsRUFBZ0JDLEVBQVUsQ0FDakdILEVBQVdBLEVBQVcsSUFBSSxJQUFJQSxDQUFRLEVBQUksS0FDMUMsSUFBSUksRUFBUyxDQUFDLE9BQVEsR0FBSSxXQUFBSCxFQUF3QixTQUFBRCxFQUFvQixRQUFTLElBQUksR0FBSyxFQUN4RixZQUFLLGVBQWVELEVBQVUsS0FBTUssRUFBUUYsRUFBZ0JDLENBQVMsRUFDOUQsQ0FBQ0MsRUFBTyxPQUFRQSxFQUFPLE9BQU8sQ0FDdkMsQ0FFQSxjQUFjVixFQUFLLENBQUUsT0FBTyxPQUFPLEtBQUtBLEVBQUsvWSxFQUFVLEdBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSTJCLEdBQUssU0FBU0EsQ0FBQyxDQUFDLENBQUUsQ0FFdEYsb0JBQW9Cb1gsRUFBSyxDQUN2QixPQUFJQSxFQUFLL1ksRUFBVSxFQUNaLE9BQU8sS0FBSytZLENBQUksRUFBRSxTQUFXLEVBRE4sRUFFaEMsQ0FFQSxhQUFhQSxFQUFNelgsRUFBSSxDQUFFLE9BQU95WCxFQUFLL1ksRUFBVSxFQUFFc0IsQ0FBRyxDQUFFLENBRXRELFlBQVlBLEVBQUksQ0FHWCxLQUFLLFNBQVN0QixFQUFVLEVBQUVzQixDQUFHLElBQzlCLEtBQUssU0FBU3RCLEVBQVUsRUFBRXNCLENBQUcsRUFBRSxNQUFRLEdBRTNDLENBRUEsVUFBVXlYLEVBQUssQ0FDYixJQUFJVyxFQUFPWCxFQUFLL1ksRUFBVSxFQUN0QjJaLEVBQVEsQ0FBQyxFQUtiLEdBSkEsT0FBT1osRUFBSy9ZLEVBQVUsRUFDdEIsS0FBSyxTQUFXLEtBQUssYUFBYSxLQUFLLFNBQVUrWSxDQUFJLEVBQ3JELEtBQUssU0FBUy9ZLEVBQVUsRUFBSSxLQUFLLFNBQVNBLEVBQVUsR0FBSyxDQUFDLEVBRXZEMFosRUFBSyxDQUNOLElBQUlFLEVBQU8sS0FBSyxTQUFTNVosRUFBVSxFQUVuQyxRQUFRc0IsS0FBT29ZLEVBQ2JBLEVBQUtwWSxDQUFHLEVBQUksS0FBSyxvQkFBb0JBLEVBQUtvWSxFQUFLcFksQ0FBRyxFQUFHc1ksRUFBTUYsRUFBTUMsQ0FBSyxFQUd4RSxRQUFRclksS0FBT29ZLEVBQU9FLEVBQUt0WSxDQUFHLEVBQUlvWSxFQUFLcFksQ0FBRyxFQUMxQ3lYLEVBQUsvWSxFQUFVLEVBQUkwWixFQUV2QixDQUVBLG9CQUFvQnBZLEVBQUt1WSxFQUFPRCxFQUFNRixFQUFNQyxFQUFNLENBQ2hELEdBQUdBLEVBQU1yWSxDQUFHLEVBQ1YsT0FBT3FZLEVBQU1yWSxDQUFHLEVBQ1gsQ0FDTCxJQUFJd1ksRUFBT0MsRUFBTUMsRUFBT0gsRUFBTS9aLEVBQU0sRUFFcEMsR0FBR3VCLEdBQU0yWSxDQUFJLEVBQUUsQ0FDYixJQUFJQyxFQUVERCxFQUFPLEVBQ1JDLEVBQVEsS0FBSyxvQkFBb0JELEVBQU1OLEVBQUtNLENBQUksRUFBR0osRUFBTUYsRUFBTUMsQ0FBSyxFQUVwRU0sRUFBUUwsRUFBSyxDQUFDSSxDQUFJLEVBR3BCRCxFQUFPRSxFQUFNbmEsRUFBTSxFQUNuQmdhLEVBQVEsS0FBSyxXQUFXRyxFQUFPSixFQUFPLEVBQUksRUFDMUNDLEVBQU1oYSxFQUFNLEVBQUlpYSxPQUVoQkQsRUFBUUQsRUFBTS9aLEVBQU0sSUFBTSxRQUFhOFosRUFBS3RZLENBQUcsSUFBTSxPQUNuRHVZLEVBQVEsS0FBSyxXQUFXRCxFQUFLdFksQ0FBRyxFQUFHdVksRUFBTyxFQUFLLEVBR25ELE9BQUFGLEVBQU1yWSxDQUFHLEVBQUl3WSxFQUNOQSxFQUVYLENBRUEsYUFBYTlTLEVBQVFDLEVBQU8sQ0FDMUIsT0FBR0EsRUFBT25ILEVBQU0sSUFBTSxPQUNibUgsR0FFUCxLQUFLLGVBQWVELEVBQVFDLENBQU0sRUFDM0JELEVBRVgsQ0FFQSxlQUFlQSxFQUFRQyxFQUFPLENBQzVCLFFBQVFqRCxLQUFPaUQsRUFBTyxDQUNwQixJQUFJMUUsRUFBTTBFLEVBQU9qRCxDQUFHLEVBQ2hCa1csRUFBWWxULEVBQU9oRCxDQUFHLEVBQ1huQixHQUFTTixDQUFHLEdBQ1pBLEVBQUl6QyxFQUFNLElBQU0sUUFBYStDLEdBQVNxWCxDQUFTLEVBQzVELEtBQUssZUFBZUEsRUFBVzNYLENBQUcsRUFFbEN5RSxFQUFPaEQsQ0FBRyxFQUFJekIsRUFHZnlFLEVBQU9qSCxFQUFJLElBQ1ppSCxFQUFPLFVBQVksR0FFdkIsQ0FVQSxXQUFXQSxFQUFRQyxFQUFRa1QsRUFBYSxDQUN0QyxJQUFJQyxFQUFTLENBQUMsR0FBR3BULEVBQVEsR0FBR0MsQ0FBTSxFQUNsQyxRQUFRakQsS0FBT29XLEVBQU8sQ0FDcEIsSUFBSTdYLEVBQU0wRSxFQUFPakQsQ0FBRyxFQUNoQmtXLEVBQVlsVCxFQUFPaEQsQ0FBRyxFQUN2Qm5CLEdBQVNOLENBQUcsR0FBS0EsRUFBSXpDLEVBQU0sSUFBTSxRQUFhK0MsR0FBU3FYLENBQVMsRUFDakVFLEVBQU9wVyxDQUFHLEVBQUksS0FBSyxXQUFXa1csRUFBVzNYLEVBQUs0WCxDQUFZLEVBQ2xENVgsSUFBUSxRQUFhTSxHQUFTcVgsQ0FBUyxJQUMvQ0UsRUFBT3BXLENBQUcsRUFBSSxLQUFLLFdBQVdrVyxFQUFXLENBQUMsRUFBR0MsQ0FBWSxHQUc3RCxPQUFHQSxHQUNELE9BQU9DLEVBQU8sUUFDZCxPQUFPQSxFQUFPLFdBQ05wVCxFQUFPakgsRUFBSSxJQUNuQnFhLEVBQU8sVUFBWSxJQUVkQSxDQUNULENBRUEsa0JBQWtCOVksRUFBSSxDQUNwQixHQUFJLENBQUM0RixFQUFLNE8sQ0FBTyxFQUFJLEtBQUsscUJBQXFCLEtBQUssU0FBUzlWLEVBQVUsRUFBR3NCLEVBQUssSUFBSSxFQUMvRSxDQUFDK1ksRUFBY0MsRUFBU0MsQ0FBTSxFQUFJeEMsR0FBVzdRLEVBQUssQ0FBQyxDQUFDLEVBQ3hELE1BQU8sQ0FBQ21ULEVBQWN2RSxDQUFPLENBQy9CLENBRUEsVUFBVTNQLEVBQUssQ0FDYkEsRUFBSyxRQUFRN0UsR0FBTyxPQUFPLEtBQUssU0FBU3RCLEVBQVUsRUFBRXNCLENBQUcsQ0FBQyxDQUMzRCxDQUlBLEtBQUssQ0FBRSxPQUFPLEtBQUssUUFBUyxDQUU1QixpQkFBaUJ5WCxFQUFPLENBQUMsRUFBRSxDQUFFLE1BQU8sQ0FBQyxDQUFDQSxFQUFLalosRUFBTSxDQUFFLENBRW5ELGVBQWUwYSxFQUFNQyxFQUFVLENBQzdCLE9BQUcsT0FBUUQsR0FBVSxTQUNaQyxFQUFVRCxDQUFJLEVBRWRBLENBRVgsQ0FFQSxhQUFhLENBQ1gsWUFBSyxVQUNFLElBQUksS0FBSyxXQUFXLEtBQUssYUFBYSxHQUMvQyxDQU9BLGVBQWVwQixFQUFVcUIsRUFBV2hCLEVBQVFGLEVBQWdCQyxFQUFZLENBQUMsRUFBRSxDQUN6RSxHQUFHSixFQUFTdlosRUFBUSxFQUFJLE9BQU8sS0FBSyxzQkFBc0J1WixFQUFVcUIsRUFBV2hCLENBQU0sRUFDckYsR0FBSSxDQUFDLENBQUMzWixFQUFNLEVBQUc0YSxDQUFPLEVBQUl0QixFQUMxQnNCLEVBQVUsS0FBSyxlQUFlQSxFQUFTRCxDQUFTLEVBQ2hELElBQUlFLEVBQVN2QixFQUFTclosRUFBSSxFQUN0QjZhLEVBQWFuQixFQUFPLE9BQ3JCa0IsSUFBU2xCLEVBQU8sT0FBUyxJQUl6QkYsR0FBa0JvQixHQUFVLENBQUN2QixFQUFTLFVBQ3ZDQSxFQUFTLFVBQVksR0FDckJBLEVBQVMsUUFBVSxLQUFLLFlBQVksR0FHdENLLEVBQU8sUUFBVWlCLEVBQVEsQ0FBQyxFQUMxQixRQUFRL1ksRUFBSSxFQUFHQSxFQUFJK1ksRUFBUSxPQUFRL1ksSUFDakMsS0FBSyxnQkFBZ0J5WCxFQUFTelgsRUFBSSxDQUFDLEVBQUc4WSxFQUFXaEIsRUFBUUYsQ0FBYyxFQUN2RUUsRUFBTyxRQUFVaUIsRUFBUS9ZLENBQUMsRUFPNUIsR0FBR2daLEVBQU8sQ0FDUixJQUFJRSxFQUFPLEdBQ1AvUSxFQUtEeVAsR0FBa0JILEVBQVMsU0FDNUJ5QixFQUFPdEIsR0FBa0IsQ0FBQ0gsRUFBUyxVQUNuQ3RQLEVBQVEsQ0FBQyxDQUFDcE4sRUFBWSxFQUFHMGMsRUFBUyxRQUFTLEdBQUdJLENBQVMsR0FFdkQxUCxFQUFRMFAsRUFFUHFCLElBQU8vUSxFQUFNck4sRUFBUSxFQUFJLElBQzVCLEdBQUksQ0FBQ3FlLEVBQVNDLEVBQWVDLENBQVksRUFBSWpELEdBQVcwQixFQUFPLE9BQVEzUCxFQUFPK1EsQ0FBSSxFQUNsRnpCLEVBQVMsVUFBWSxHQUNyQkssRUFBTyxPQUFTbUIsRUFBYUcsRUFBZ0JELEVBQVVFLEVBRTNELENBRUEsc0JBQXNCNUIsRUFBVXFCLEVBQVdoQixFQUFPLENBQ2hELEdBQUksQ0FBQyxDQUFDNVosRUFBUSxFQUFHb2IsRUFBVSxDQUFDbmIsRUFBTSxFQUFHNGEsRUFBUyxDQUFDcmEsRUFBTSxFQUFHNmEsQ0FBTSxFQUFJOUIsRUFDOUQsQ0FBQytCLEVBQU1DLEVBQVVoRSxFQUFXQyxDQUFLLEVBQUk2RCxHQUFVLENBQUMsS0FBTSxDQUFDLEVBQUcsQ0FBQyxFQUFHLElBQUksRUFDdEVSLEVBQVUsS0FBSyxlQUFlQSxFQUFTRCxDQUFTLEVBQ2hELElBQUlZLEVBQWdCWixHQUFhckIsRUFBU2haLEVBQVMsRUFDbkQsUUFBUXFRLEVBQUksRUFBR0EsRUFBSXdLLEVBQVMsT0FBUXhLLElBQUksQ0FDdEMsSUFBSTZLLEVBQVVMLEVBQVN4SyxDQUFDLEVBQ3hCZ0osRUFBTyxRQUFVaUIsRUFBUSxDQUFDLEVBQzFCLFFBQVEvWSxFQUFJLEVBQUdBLEVBQUkrWSxFQUFRLE9BQVEvWSxJQUFJLENBS3JDLElBQUk0WCxFQUFpQixHQUNyQixLQUFLLGdCQUFnQitCLEVBQVEzWixFQUFJLENBQUMsRUFBRzBaLEVBQWU1QixFQUFRRixDQUFjLEVBQzFFRSxFQUFPLFFBQVVpQixFQUFRL1ksQ0FBQyxHQUkzQnVaLElBQVcsU0FBYzlCLEVBQVN2WixFQUFRLEVBQUUsT0FBUyxHQUFLdVgsRUFBVSxPQUFTLEdBQUtDLEtBQ25GLE9BQU8rQixFQUFTL1ksRUFBTSxFQUN0QitZLEVBQVN2WixFQUFRLEVBQUksQ0FBQyxFQUN0QjRaLEVBQU8sUUFBUSxJQUFJeUIsQ0FBTSxFQUU3QixDQUVBLGdCQUFnQjlCLEVBQVVxQixFQUFXaEIsRUFBUUYsRUFBZSxDQUMxRCxHQUFHLE9BQVFILEdBQWMsU0FBUyxDQUNoQyxHQUFJLENBQUNsUyxFQUFLNE8sQ0FBTyxFQUFJLEtBQUsscUJBQXFCMkQsRUFBTyxXQUFZTCxFQUFVSyxFQUFPLFFBQVEsRUFDM0ZBLEVBQU8sUUFBVXZTLEVBQ2pCdVMsRUFBTyxRQUFVLElBQUksSUFBSSxDQUFDLEdBQUdBLEVBQU8sUUFBUyxHQUFHM0QsQ0FBTyxDQUFDLE9BQ2hEalQsR0FBU3VXLENBQVEsRUFDekIsS0FBSyxlQUFlQSxFQUFVcUIsRUFBV2hCLEVBQVFGLEVBQWdCLENBQUMsQ0FBQyxFQUVuRUUsRUFBTyxRQUFVTCxDQUVyQixDQUVBLHFCQUFxQkUsRUFBWWhZLEVBQUsrWCxFQUFTLENBQzdDLElBQUlrQyxFQUFZakMsRUFBV2hZLENBQUcsR0FBS0wsR0FBUyx3QkFBd0JLLElBQU9nWSxDQUFVLEVBQ2pGeFAsRUFBUSxDQUFDLENBQUNuTyxFQUFhLEVBQUcyRixDQUFHLEVBQzdCdVosRUFBT3hCLEdBQVksQ0FBQ0EsRUFBUyxJQUFJL1gsQ0FBRyxFQXNCeENpYSxFQUFVLFVBQVksQ0FBQ1YsRUFDdkJVLEVBQVUsUUFBVSxJQUFJamEsS0FBTyxLQUFLLGFBQWEsSUFFakQsSUFBSWlZLEVBQWlCLENBQUNnQyxFQUFVLE1BQzVCLENBQUNuVyxFQUFNMFEsQ0FBTyxFQUFJLEtBQUssa0JBQWtCeUYsRUFBV2pDLEVBQVlELEVBQVVFLEVBQWdCelAsQ0FBSyxFQUVuRyxjQUFPeVIsRUFBVSxNQUVWLENBQUNuVyxFQUFNMFEsQ0FBTyxDQUN2QixDQUNGLEVDOVpJMEYsR0FBYSxDQUFDLEVBQ2RDLEdBQTBCLElBRTFCQyxHQUFLLENBRVAsS0FBSzFhLEVBQUcyYSxFQUFXOU0sRUFBVXpNLEVBQU13WixFQUFVQyxFQUFTLENBQ3BELEdBQUksQ0FBQ0MsRUFBYUMsQ0FBVyxFQUFJRixHQUFZLENBQUMsS0FBTSxDQUFDLFNBQVVBLEdBQVlBLEVBQVMsUUFBUSxDQUFDLEdBQzlFaE4sRUFBUyxPQUFPLENBQUMsSUFBTSxJQUNwQyxLQUFLLE1BQU1BLENBQVEsRUFBSSxDQUFDLENBQUNpTixFQUFhQyxDQUFXLENBQUMsR0FFM0MsUUFBUSxDQUFDLENBQUMxWixFQUFNa00sQ0FBSSxJQUFNLENBQzlCbE0sSUFBU3laLElBRVZ2TixFQUFPLENBQUMsR0FBR3dOLEVBQWEsR0FBR3hOLENBQUksRUFDL0JBLEVBQUssU0FBV0EsRUFBSyxVQUFZd04sRUFBWSxVQUUvQyxLQUFLLFlBQVkzWixFQUFLLFdBQVl3WixFQUFVck4sQ0FBSSxFQUFFLFFBQVE3TCxHQUFNLENBQzlELEtBQUssUUFBUUwsR0FBTSxFQUFFckIsRUFBRzJhLEVBQVc5TSxFQUFVek0sRUFBTXdaLEVBQVVsWixFQUFJNkwsQ0FBSSxDQUN2RSxDQUFDLENBQ0gsQ0FBQyxDQUNILEVBRUEsVUFBVTdMLEVBQUcsQ0FDWCxNQUFPLENBQUMsRUFBRUEsRUFBRyxhQUFlQSxFQUFHLGNBQWdCQSxFQUFHLGVBQWUsRUFBRSxPQUFTLEVBQzlFLEVBR0EsYUFBYUEsRUFBRyxDQUNkLElBQU13SyxFQUFPeEssRUFBRyxzQkFBc0IsRUFDaENzWixFQUFlLE9BQU8sYUFBZSxTQUFTLGdCQUFnQixhQUM5REMsRUFBYyxPQUFPLFlBQWMsU0FBUyxnQkFBZ0IsWUFFbEUsT0FDRS9PLEVBQUssTUFBUSxHQUNiQSxFQUFLLE9BQVMsR0FDZEEsRUFBSyxLQUFPK08sR0FDWi9PLEVBQUssSUFBTThPLENBRWYsRUFNQSxVQUFVaGIsRUFBRzJhLEVBQVc5TSxFQUFVek0sRUFBTXdaLEVBQVVsWixFQUFJLENBQUMsS0FBQXFFLEVBQU0sR0FBQTVDLENBQUUsRUFBRSxFQUNuREEsRUFBS3VHLEVBQUksSUFBSSxTQUFVdkcsQ0FBRSxFQUFJLENBQUN5WCxDQUFRLEdBQzVDLFFBQVEzVyxHQUFRLENBQ3BCLElBQUlpWCxFQUFZalgsRUFBSyxhQUFhOEIsQ0FBSSxFQUN0QyxHQUFHLENBQUNtVixFQUFZLE1BQU0sSUFBSSxNQUFNLFlBQVluViwrQkFBa0M1QyxJQUFLLEVBQ25GL0IsRUFBSyxXQUFXLE9BQU82QyxFQUFNaVgsRUFBV1AsQ0FBUyxDQUNuRCxDQUFDLENBQ0gsRUFFQSxjQUFjM2EsRUFBRzJhLEVBQVc5TSxFQUFVek0sRUFBTXdaLEVBQVVsWixFQUFJLENBQUMsTUFBQThFLEVBQU8sT0FBQTJVLEVBQVEsUUFBQUMsQ0FBTyxFQUFFLENBQ2pGRCxFQUFTQSxHQUFVLENBQUMsRUFDcEJBLEVBQU8sV0FBYVAsRUFDcEJsUixFQUFJLGNBQWNoSSxFQUFJOEUsRUFBTyxDQUFDLE9BQUEyVSxFQUFRLFFBQUFDLENBQU8sQ0FBQyxDQUNoRCxFQUVBLFVBQVVwYixFQUFHMmEsRUFBVzlNLEVBQVV6TSxFQUFNd1osRUFBVWxaLEVBQUk2TCxFQUFLLENBQ3pELEdBQUksQ0FBQyxNQUFBL0csRUFBTyxLQUFBNlUsRUFBTSxPQUFBclYsRUFBUSxhQUFBc1YsRUFBYyxRQUFBQyxFQUFTLE1BQUFoWSxFQUFPLFdBQUFpWSxFQUFZLFNBQUFwWixDQUFRLEVBQUltTCxFQUM1RWtPLEVBQVcsQ0FBQyxRQUFBRixFQUFTLE1BQUFoWSxFQUFPLE9BQUF5QyxFQUFRLGFBQWMsQ0FBQyxDQUFDc1YsQ0FBWSxFQUNoRUksRUFBWWYsSUFBYyxVQUFZYSxFQUFhQSxFQUFhWixFQUNoRWUsRUFBWTNWLEdBQVUwVixFQUFVLGFBQWF0YSxFQUFLLFFBQVEsUUFBUSxDQUFDLEdBQUtzYSxFQUN0RUUsRUFBVSxDQUFDQyxFQUFZQyxJQUFjLENBQ3pDLEdBQUlELEVBQVcsWUFBWSxFQUMzQixHQUFHbEIsSUFBYyxTQUFTLENBQ3hCLEdBQUksQ0FBQyxPQUFBb0IsRUFBUSxRQUFBQyxDQUFPLEVBQUl6TyxFQUN4QnlPLEVBQVVBLElBQVl0UyxFQUFJLFlBQVlrUixDQUFRLEVBQUlBLEVBQVMsS0FBTyxRQUMvRG9CLElBQVVQLEVBQVMsUUFBVU8sR0FDaENILEVBQVcsVUFBVWpCLEVBQVVrQixFQUFXQyxFQUFRdlYsR0FBU3FILEVBQVU0TixFQUFVclosQ0FBUSxVQUMvRXVZLElBQWMsU0FBUyxDQUMvQixHQUFJLENBQUMsVUFBQXNCLENBQVMsRUFBSTFPLEVBQ2xCc08sRUFBVyxXQUFXakIsRUFBVWtCLEVBQVd0VixHQUFTcUgsRUFBVW9PLEVBQVdSLEVBQVVyWixDQUFRLE9BRTNGeVosRUFBVyxVQUFVbEIsRUFBV0MsRUFBVWtCLEVBQVd0VixHQUFTcUgsRUFBVXdOLEVBQU1JLEVBQVVyWixDQUFRLENBRXBHLEVBR0dtTCxFQUFLLFlBQWNBLEVBQUssVUFDekJxTyxFQUFRck8sRUFBSyxXQUFZQSxFQUFLLFNBQVMsRUFFdkNuTSxFQUFLLGNBQWN1YSxFQUFXQyxDQUFPLENBRXpDLEVBRUEsY0FBYzViLEVBQUcyYSxFQUFXOU0sRUFBVXpNLEVBQU13WixFQUFVbFosRUFBSSxDQUFDLEtBQUFvRCxFQUFNLFFBQUFvWCxDQUFPLEVBQUUsQ0FDeEU5YSxFQUFLLFdBQVcsZ0JBQWdCcEIsRUFBRzhFLEVBQU1vWCxFQUFVLFVBQVksT0FBUSxLQUFNdEIsQ0FBUSxDQUN2RixFQUVBLFdBQVc1YSxFQUFHMmEsRUFBVzlNLEVBQVV6TSxFQUFNd1osRUFBVWxaLEVBQUksQ0FBQyxLQUFBb0QsRUFBTSxRQUFBb1gsQ0FBTyxFQUFFLENBQ3JFOWEsRUFBSyxXQUFXLGlCQUFpQnBCLEVBQUc4RSxFQUFNb1gsRUFBVSxVQUFZLE9BQVF0QixDQUFRLENBQ2xGLEVBRUEsV0FBVzVhLEVBQUcyYSxFQUFXOU0sRUFBVXpNLEVBQU13WixFQUFVbFosRUFBRyxDQUNwRCxPQUFPLHNCQUFzQixJQUFNOEosR0FBSyxhQUFhOUosQ0FBRSxDQUFDLENBQzFELEVBRUEsaUJBQWlCMUIsRUFBRzJhLEVBQVc5TSxFQUFVek0sRUFBTXdaLEVBQVVsWixFQUFHLENBQzFELE9BQU8sc0JBQXNCLElBQU04SixHQUFLLHNCQUFzQjlKLENBQUUsR0FBSzhKLEdBQUssV0FBVzlKLENBQUUsQ0FBQyxDQUMxRixFQUVBLGdCQUFnQjFCLEVBQUcyYSxFQUFXOU0sRUFBVXpNLEVBQU13WixFQUFVbFosRUFBRyxDQUN6RCxPQUFPLHNCQUFzQixJQUFNOFksR0FBVyxLQUFLOVksR0FBTWtaLENBQVEsQ0FBQyxDQUNwRSxFQUVBLGVBQWU1TixFQUFJbVAsRUFBWUMsRUFBV0MsRUFBT0MsRUFBV0MsRUFBSSxDQUM5RCxPQUFPLHNCQUFzQixJQUFNLENBQ2pDLElBQU03YSxFQUFLOFksR0FBVyxJQUFJLEVBQ3ZCOVksR0FBS0EsRUFBRyxNQUFNLENBQ25CLENBQUMsQ0FDSCxFQUVBLGVBQWUxQixFQUFHMmEsRUFBVzlNLEVBQVV6TSxFQUFNd1osRUFBVWxaLEVBQUksQ0FBQyxNQUFBOGEsRUFBTyxXQUFBQyxFQUFZLEtBQUFDLEVBQU0sU0FBQUMsQ0FBUSxFQUFFLENBQzdGLEtBQUssbUJBQW1CamIsRUFBSThhLEVBQU8sQ0FBQyxFQUFHQyxFQUFZQyxFQUFNdGIsRUFBTXViLENBQVEsQ0FDekUsRUFFQSxrQkFBa0IzYyxFQUFHMmEsRUFBVzlNLEVBQVV6TSxFQUFNd1osRUFBVWxaLEVBQUksQ0FBQyxNQUFBOGEsRUFBTyxXQUFBQyxFQUFZLEtBQUFDLEVBQU0sU0FBQUMsQ0FBUSxFQUFFLENBQ2hHLEtBQUssbUJBQW1CamIsRUFBSSxDQUFDLEVBQUc4YSxFQUFPQyxFQUFZQyxFQUFNdGIsRUFBTXViLENBQVEsQ0FDekUsRUFFQSxrQkFBa0IzYyxFQUFHMmEsRUFBVzlNLEVBQVV6TSxFQUFNd1osRUFBVWxaLEVBQUksQ0FBQyxNQUFBOGEsRUFBTyxXQUFBQyxFQUFZLEtBQUFDLEVBQU0sU0FBQUMsQ0FBUSxFQUFFLENBQ2hHLEtBQUssY0FBY2piLEVBQUk4YSxFQUFPQyxFQUFZQyxFQUFNdGIsRUFBTXViLENBQVEsQ0FDaEUsRUFFQSxpQkFBaUIzYyxFQUFHMmEsRUFBVzlNLEVBQVV6TSxFQUFNd1osRUFBVWxaLEVBQUksQ0FBQyxLQUFNLENBQUNxRSxFQUFNNlcsRUFBTUMsQ0FBSSxDQUFDLEVBQUUsQ0FDdEYsS0FBSyxXQUFXbmIsRUFBSXFFLEVBQU02VyxFQUFNQyxDQUFJLENBQ3RDLEVBRUEsZ0JBQWdCN2MsRUFBRzJhLEVBQVc5TSxFQUFVek0sRUFBTXdaLEVBQVVsWixFQUFJLENBQUMsS0FBQWdiLEVBQU0sV0FBQUQsRUFBWSxTQUFBRSxDQUFRLEVBQUUsQ0FDdkYsS0FBSyxtQkFBbUJqYixFQUFJLENBQUMsRUFBRyxDQUFDLEVBQUcrYSxFQUFZQyxFQUFNdGIsRUFBTXViLENBQVEsQ0FDdEUsRUFFQSxZQUFZM2MsRUFBRzJhLEVBQVc5TSxFQUFVek0sRUFBTXdaLEVBQVVsWixFQUFJLENBQUMsUUFBQW9iLEVBQVMsSUFBQUMsRUFBSyxLQUFBQyxFQUFNLEtBQUFOLEVBQU0sU0FBQUMsQ0FBUSxFQUFFLENBQzNGLEtBQUssT0FBT2hDLEVBQVd2WixFQUFNTSxFQUFJb2IsRUFBU0MsRUFBS0MsRUFBTU4sRUFBTUMsQ0FBUSxDQUNyRSxFQUVBLFVBQVUzYyxFQUFHMmEsRUFBVzlNLEVBQVV6TSxFQUFNd1osRUFBVWxaLEVBQUksQ0FBQyxRQUFBb2IsRUFBUyxXQUFBTCxFQUFZLEtBQUFDLEVBQU0sU0FBQUMsQ0FBUSxFQUFFLENBQzFGLEtBQUssS0FBS2hDLEVBQVd2WixFQUFNTSxFQUFJb2IsRUFBU0wsRUFBWUMsRUFBTUMsQ0FBUSxDQUNwRSxFQUVBLFVBQVUzYyxFQUFHMmEsRUFBVzlNLEVBQVV6TSxFQUFNd1osRUFBVWxaLEVBQUksQ0FBQyxRQUFBb2IsRUFBUyxXQUFBTCxFQUFZLEtBQUFDLEVBQU0sU0FBQUMsQ0FBUSxFQUFFLENBQzFGLEtBQUssS0FBS2hDLEVBQVd2WixFQUFNTSxFQUFJb2IsRUFBU0wsRUFBWUMsRUFBTUMsQ0FBUSxDQUNwRSxFQUVBLGNBQWMzYyxFQUFHMmEsRUFBVzlNLEVBQVV6TSxFQUFNd1osRUFBVWxaLEVBQUksQ0FBQyxLQUFNLENBQUNxRSxFQUFNeEUsQ0FBRyxDQUFDLEVBQUUsQ0FDNUUsS0FBSyxpQkFBaUJHLEVBQUksQ0FBQyxDQUFDcUUsRUFBTXhFLENBQUcsQ0FBQyxFQUFHLENBQUMsQ0FBQyxDQUM3QyxFQUVBLGlCQUFpQnZCLEVBQUcyYSxFQUFXOU0sRUFBVXpNLEVBQU13WixFQUFVbFosRUFBSSxDQUFDLEtBQUFxRSxDQUFJLEVBQUUsQ0FDbEUsS0FBSyxpQkFBaUJyRSxFQUFJLENBQUMsRUFBRyxDQUFDcUUsQ0FBSSxDQUFDLENBQ3RDLEVBSUEsS0FBSzRVLEVBQVd2WixFQUFNTSxFQUFJb2IsRUFBU0wsRUFBWUMsRUFBTUMsRUFBUyxDQUN4RCxLQUFLLFVBQVVqYixDQUFFLEdBQ25CLEtBQUssT0FBT2laLEVBQVd2WixFQUFNTSxFQUFJb2IsRUFBU0wsRUFBWSxLQUFNQyxFQUFNQyxDQUFRLENBRTlFLEVBRUEsS0FBS2hDLEVBQVd2WixFQUFNTSxFQUFJb2IsRUFBU0wsRUFBWUMsRUFBTUMsRUFBUyxDQUN6RCxLQUFLLFVBQVVqYixDQUFFLEdBQ2xCLEtBQUssT0FBT2laLEVBQVd2WixFQUFNTSxFQUFJb2IsRUFBUyxLQUFNTCxFQUFZQyxFQUFNQyxDQUFRLENBRTlFLEVBRUEsT0FBT2hDLEVBQVd2WixFQUFNTSxFQUFJb2IsRUFBU0MsRUFBS0MsRUFBTU4sRUFBTUMsRUFBUyxDQUM3REQsRUFBT0EsR0FBUWpDLEdBQ2YsR0FBSSxDQUFDd0MsRUFBV0MsRUFBZ0JDLENBQVksRUFBSUosR0FBTyxDQUFDLENBQUMsRUFBRyxDQUFDLEVBQUcsQ0FBQyxDQUFDLEVBQzlELENBQUNLLEVBQVlDLEVBQWlCQyxDQUFhLEVBQUlOLEdBQVEsQ0FBQyxDQUFDLEVBQUcsQ0FBQyxFQUFHLENBQUMsQ0FBQyxFQUN0RSxHQUFHQyxFQUFVLE9BQVMsR0FBS0csRUFBVyxPQUFTLEVBQzdDLEdBQUcsS0FBSyxVQUFVMWIsQ0FBRSxFQUFFLENBQ3BCLElBQUk2YixFQUFVLElBQU0sQ0FDbEIsS0FBSyxtQkFBbUI3YixFQUFJMmIsRUFBaUJKLEVBQVUsT0FBT0MsQ0FBYyxFQUFFLE9BQU9DLENBQVksQ0FBQyxFQUNsRyxPQUFPLHNCQUFzQixJQUFNLENBQ2pDLEtBQUssbUJBQW1CemIsRUFBSTBiLEVBQVksQ0FBQyxDQUFDLEVBQzFDLE9BQU8sc0JBQXNCLElBQU0sS0FBSyxtQkFBbUIxYixFQUFJNGIsRUFBZUQsQ0FBZSxDQUFDLENBQ2hHLENBQUMsQ0FDSCxFQUNJRyxFQUFRLElBQU0sQ0FDaEIsS0FBSyxtQkFBbUI5YixFQUFJLENBQUMsRUFBRzBiLEVBQVcsT0FBT0UsQ0FBYSxDQUFDLEVBQ2hFNVQsRUFBSSxVQUFVaEksRUFBSSxTQUFVK2IsR0FBYUEsRUFBVSxNQUFNLFFBQVUsTUFBTSxFQUN6RS9iLEVBQUcsY0FBYyxJQUFJLE1BQU0sY0FBYyxDQUFDLENBQzVDLEVBQ0FBLEVBQUcsY0FBYyxJQUFJLE1BQU0sZ0JBQWdCLENBQUMsRUFDekNpYixJQUFhLElBQ2RZLEVBQVEsRUFDUixXQUFXQyxFQUFPZCxDQUFJLEdBRXRCdGIsRUFBSyxXQUFXc2IsRUFBTWEsRUFBU0MsQ0FBSyxNQUVqQyxDQUNMLEdBQUc3QyxJQUFjLFNBQVcsT0FDNUIsSUFBSTRDLEVBQVUsSUFBTSxDQUNsQixLQUFLLG1CQUFtQjdiLEVBQUl3YixFQUFnQkUsRUFBVyxPQUFPQyxDQUFlLEVBQUUsT0FBT0MsQ0FBYSxDQUFDLEVBQ3BHLElBQUlJLEVBQWdCWixHQUFXLEtBQUssZUFBZXBiLENBQUUsRUFDckRnSSxFQUFJLFVBQVVoSSxFQUFJLFNBQVUrYixHQUFhQSxFQUFVLE1BQU0sUUFBVUMsQ0FBYSxFQUNoRixPQUFPLHNCQUFzQixJQUFNLENBQ2pDLEtBQUssbUJBQW1CaGMsRUFBSXViLEVBQVcsQ0FBQyxDQUFDLEVBQ3pDLE9BQU8sc0JBQXNCLElBQU0sS0FBSyxtQkFBbUJ2YixFQUFJeWIsRUFBY0QsQ0FBYyxDQUFDLENBQzlGLENBQUMsQ0FDSCxFQUNJTSxFQUFRLElBQU0sQ0FDaEIsS0FBSyxtQkFBbUI5YixFQUFJLENBQUMsRUFBR3ViLEVBQVUsT0FBT0UsQ0FBWSxDQUFDLEVBQzlEemIsRUFBRyxjQUFjLElBQUksTUFBTSxjQUFjLENBQUMsQ0FDNUMsRUFDQUEsRUFBRyxjQUFjLElBQUksTUFBTSxnQkFBZ0IsQ0FBQyxFQUN6Q2liLElBQWEsSUFDZFksRUFBUSxFQUNSLFdBQVdDLEVBQU9kLENBQUksR0FFdEJ0YixFQUFLLFdBQVdzYixFQUFNYSxFQUFTQyxDQUFLLE9BSXJDLEtBQUssVUFBVTliLENBQUUsRUFDbEIsT0FBTyxzQkFBc0IsSUFBTSxDQUNqQ0EsRUFBRyxjQUFjLElBQUksTUFBTSxnQkFBZ0IsQ0FBQyxFQUM1Q2dJLEVBQUksVUFBVWhJLEVBQUksU0FBVStiLEdBQWFBLEVBQVUsTUFBTSxRQUFVLE1BQU0sRUFDekUvYixFQUFHLGNBQWMsSUFBSSxNQUFNLGNBQWMsQ0FBQyxDQUM1QyxDQUFDLEVBRUQsT0FBTyxzQkFBc0IsSUFBTSxDQUNqQ0EsRUFBRyxjQUFjLElBQUksTUFBTSxnQkFBZ0IsQ0FBQyxFQUM1QyxJQUFJZ2MsRUFBZ0JaLEdBQVcsS0FBSyxlQUFlcGIsQ0FBRSxFQUNyRGdJLEVBQUksVUFBVWhJLEVBQUksU0FBVStiLEdBQWFBLEVBQVUsTUFBTSxRQUFVQyxDQUFhLEVBQ2hGaGMsRUFBRyxjQUFjLElBQUksTUFBTSxjQUFjLENBQUMsQ0FDNUMsQ0FBQyxDQUdQLEVBRUEsY0FBY0EsRUFBSTJKLEVBQVNvUixFQUFZQyxFQUFNdGIsRUFBTXViLEVBQVMsQ0FDMUQsT0FBTyxzQkFBc0IsSUFBTSxDQUNqQyxHQUFJLENBQUNnQixFQUFVQyxDQUFXLEVBQUlsVSxFQUFJLFVBQVVoSSxFQUFJLFVBQVcsQ0FBQyxDQUFDLEVBQUcsQ0FBQyxDQUFDLENBQUMsRUFDL0RtYyxFQUFVeFMsRUFBUSxPQUFPL0gsR0FBUXFhLEVBQVMsUUFBUXJhLENBQUksRUFBSSxHQUFLLENBQUM1QixFQUFHLFVBQVUsU0FBUzRCLENBQUksQ0FBQyxFQUMzRndhLEVBQWF6UyxFQUFRLE9BQU8vSCxHQUFRc2EsRUFBWSxRQUFRdGEsQ0FBSSxFQUFJLEdBQUs1QixFQUFHLFVBQVUsU0FBUzRCLENBQUksQ0FBQyxFQUNwRyxLQUFLLG1CQUFtQjVCLEVBQUltYyxFQUFTQyxFQUFZckIsRUFBWUMsRUFBTXRiLEVBQU11YixDQUFRLENBQ25GLENBQUMsQ0FDSCxFQUVBLFdBQVdqYixFQUFJcUUsRUFBTTZXLEVBQU1DLEVBQUssQ0FDM0JuYixFQUFHLGFBQWFxRSxDQUFJLEVBQ2xCOFcsSUFBUyxPQUVQbmIsRUFBRyxhQUFhcUUsQ0FBSSxJQUFNNlcsRUFDM0IsS0FBSyxpQkFBaUJsYixFQUFJLENBQUMsQ0FBQ3FFLEVBQU04VyxDQUFJLENBQUMsRUFBRyxDQUFDLENBQUMsRUFFNUMsS0FBSyxpQkFBaUJuYixFQUFJLENBQUMsQ0FBQ3FFLEVBQU02VyxDQUFJLENBQUMsRUFBRyxDQUFDLENBQUMsRUFJOUMsS0FBSyxpQkFBaUJsYixFQUFJLENBQUMsRUFBRyxDQUFDcUUsQ0FBSSxDQUFDLEVBR3RDLEtBQUssaUJBQWlCckUsRUFBSSxDQUFDLENBQUNxRSxFQUFNNlcsQ0FBSSxDQUFDLEVBQUcsQ0FBQyxDQUFDLENBRWhELEVBRUEsbUJBQW1CbGIsRUFBSXFjLEVBQU1DLEVBQVN2QixFQUFZQyxFQUFNdGIsRUFBTXViLEVBQVMsQ0FDckVELEVBQU9BLEdBQVFqQyxHQUNmLEdBQUksQ0FBQ3dELEVBQWVDLEVBQWlCQyxDQUFhLEVBQUkxQixHQUFjLENBQUMsQ0FBQyxFQUFHLENBQUMsRUFBRyxDQUFDLENBQUMsRUFDL0UsR0FBR3dCLEVBQWMsT0FBUyxFQUFFLENBQzFCLElBQUlWLEVBQVUsSUFBTSxDQUNsQixLQUFLLG1CQUFtQjdiLEVBQUl3YyxFQUFpQixDQUFDLEVBQUUsT0FBT0QsQ0FBYSxFQUFFLE9BQU9FLENBQWEsQ0FBQyxFQUMzRixPQUFPLHNCQUFzQixJQUFNLENBQ2pDLEtBQUssbUJBQW1CemMsRUFBSXVjLEVBQWUsQ0FBQyxDQUFDLEVBQzdDLE9BQU8sc0JBQXNCLElBQU0sS0FBSyxtQkFBbUJ2YyxFQUFJeWMsRUFBZUQsQ0FBZSxDQUFDLENBQ2hHLENBQUMsQ0FDSCxFQUNJRSxFQUFTLElBQU0sS0FBSyxtQkFBbUIxYyxFQUFJcWMsRUFBSyxPQUFPSSxDQUFhLEVBQUdILEVBQVEsT0FBT0MsQ0FBYSxFQUFFLE9BQU9DLENBQWUsQ0FBQyxFQUM3SHZCLElBQWEsSUFDZFksRUFBUSxFQUNSLFdBQVdhLEVBQVExQixDQUFJLEdBRXZCdGIsRUFBSyxXQUFXc2IsRUFBTWEsRUFBU2EsQ0FBTSxFQUV2QyxPQUdGLE9BQU8sc0JBQXNCLElBQU0sQ0FDakMsR0FBSSxDQUFDVCxFQUFVQyxDQUFXLEVBQUlsVSxFQUFJLFVBQVVoSSxFQUFJLFVBQVcsQ0FBQyxDQUFDLEVBQUcsQ0FBQyxDQUFDLENBQUMsRUFDL0QyYyxFQUFXTixFQUFLLE9BQU96YSxHQUFRcWEsRUFBUyxRQUFRcmEsQ0FBSSxFQUFJLEdBQUssQ0FBQzVCLEVBQUcsVUFBVSxTQUFTNEIsQ0FBSSxDQUFDLEVBQ3pGZ2IsRUFBY04sRUFBUSxPQUFPMWEsR0FBUXNhLEVBQVksUUFBUXRhLENBQUksRUFBSSxHQUFLNUIsRUFBRyxVQUFVLFNBQVM0QixDQUFJLENBQUMsRUFDakd1YSxFQUFVRixFQUFTLE9BQU9yYSxHQUFRMGEsRUFBUSxRQUFRMWEsQ0FBSSxFQUFJLENBQUMsRUFBRSxPQUFPK2EsQ0FBUSxFQUM1RVAsRUFBYUYsRUFBWSxPQUFPdGEsR0FBUXlhLEVBQUssUUFBUXphLENBQUksRUFBSSxDQUFDLEVBQUUsT0FBT2diLENBQVcsRUFFdEY1VSxFQUFJLFVBQVVoSSxFQUFJLFVBQVcrYixJQUMzQkEsRUFBVSxVQUFVLE9BQU8sR0FBR0ssQ0FBVSxFQUN4Q0wsRUFBVSxVQUFVLElBQUksR0FBR0ksQ0FBTyxFQUMzQixDQUFDQSxFQUFTQyxDQUFVLEVBQzVCLENBQ0gsQ0FBQyxDQUNILEVBRUEsaUJBQWlCcGMsRUFBSTZjLEVBQU1QLEVBQVEsQ0FDakMsR0FBSSxDQUFDUSxFQUFVWixDQUFXLEVBQUlsVSxFQUFJLFVBQVVoSSxFQUFJLFFBQVMsQ0FBQyxDQUFDLEVBQUcsQ0FBQyxDQUFDLENBQUMsRUFFN0QrYyxFQUFlRixFQUFLLElBQUksQ0FBQyxDQUFDeFksRUFBTTJZLENBQUksSUFBTTNZLENBQUksRUFBRSxPQUFPaVksQ0FBTyxFQUM5RFcsRUFBVUgsRUFBUyxPQUFPLENBQUMsQ0FBQ3pZLEVBQU0yWSxDQUFJLElBQU0sQ0FBQ0QsRUFBYSxTQUFTMVksQ0FBSSxDQUFDLEVBQUUsT0FBT3dZLENBQUksRUFDckZULEVBQWFGLEVBQVksT0FBUTdYLEdBQVMsQ0FBQzBZLEVBQWEsU0FBUzFZLENBQUksQ0FBQyxFQUFFLE9BQU9pWSxDQUFPLEVBRTFGdFUsRUFBSSxVQUFVaEksRUFBSSxRQUFTK2IsSUFDekJLLEVBQVcsUUFBUS9YLEdBQVEwWCxFQUFVLGdCQUFnQjFYLENBQUksQ0FBQyxFQUMxRDRZLEVBQVEsUUFBUSxDQUFDLENBQUM1WSxFQUFNeEUsQ0FBRyxJQUFNa2MsRUFBVSxhQUFhMVgsRUFBTXhFLENBQUcsQ0FBQyxFQUMzRCxDQUFDb2QsRUFBU2IsQ0FBVSxFQUM1QixDQUNILEVBRUEsY0FBY3BjLEVBQUkySixFQUFRLENBQUUsT0FBT0EsRUFBUSxNQUFNL0gsR0FBUTVCLEVBQUcsVUFBVSxTQUFTNEIsQ0FBSSxDQUFDLENBQUUsRUFFdEYsYUFBYTVCLEVBQUkwYixFQUFXLENBQzFCLE1BQU8sQ0FBQyxLQUFLLFVBQVUxYixDQUFFLEdBQUssS0FBSyxjQUFjQSxFQUFJMGIsQ0FBVSxDQUNqRSxFQUVBLFlBQVkzZCxFQUFZbWIsRUFBVSxDQUFDLEdBQUF6WCxDQUFFLEVBQUUsQ0FDckMsSUFBSXliLEVBQWUsSUFBTSxDQUN2QixHQUFHLE9BQU96YixHQUFRLFNBQ2hCLE9BQU8sU0FBUyxpQkFBaUJBLENBQUUsRUFDckMsR0FBVUEsRUFBRyxRQUFRLENBQ25CLElBQUkyQyxFQUFPOFUsRUFBUyxRQUFRelgsRUFBRyxPQUFPLEVBQ3RDLE9BQU8yQyxFQUFPLENBQUNBLENBQUksRUFBSSxDQUFDLFVBQ2hCM0MsRUFBRyxNQUNYLE9BQU95WCxFQUFTLGlCQUFpQnpYLEVBQUcsS0FBSyxDQUU3QyxFQUNBLE9BQU9BLEVBQUsxRCxFQUFXLG1CQUFtQm1iLEVBQVV6WCxFQUFJeWIsQ0FBWSxFQUFJLENBQUNoRSxDQUFRLENBQ25GLEVBRUEsZUFBZWxaLEVBQUcsQ0FDaEIsTUFBTyxDQUFDLEdBQUksWUFBYSxHQUFJLFlBQVksRUFBRUEsRUFBRyxRQUFRLFlBQVksQ0FBQyxHQUFLLE9BQzFFLEVBRUEsa0JBQWtCSCxFQUFJLENBQ3BCLEdBQUcsQ0FBQ0EsRUFBTSxPQUFPLEtBRWpCLEdBQUksQ0FBQ3NkLEVBQU9DLEVBQVFDLENBQUksRUFBSSxNQUFNLFFBQVF4ZCxDQUFHLEVBQUlBLEVBQU0sQ0FBQ0EsRUFBSSxNQUFNLEdBQUcsRUFBRyxDQUFDLEVBQUcsQ0FBQyxDQUFDLEVBQzlFLE9BQUFzZCxFQUFRLE1BQU0sUUFBUUEsQ0FBSyxFQUFJQSxFQUFRQSxFQUFNLE1BQU0sR0FBRyxFQUN0REMsRUFBUyxNQUFNLFFBQVFBLENBQU0sRUFBSUEsRUFBU0EsRUFBTyxNQUFNLEdBQUcsRUFDMURDLEVBQU8sTUFBTSxRQUFRQSxDQUFJLEVBQUlBLEVBQU9BLEVBQUssTUFBTSxHQUFHLEVBQzNDLENBQUNGLEVBQU9DLEVBQVFDLENBQUksQ0FDN0IsQ0FDRixFQUVPQyxHQUFRdEUsR0MxVlR1RSxHQUFVLFNBRVpDLEdBQWEsRUFDSUMsR0FBckIsS0FBOEIsQ0FDNUIsT0FBTyxRQUFRLENBQUUsT0FBT0QsSUFBYSxDQUNyQyxPQUFPLFVBQVV4ZCxFQUFHLENBQUUsT0FBT2dJLEVBQUksUUFBUWhJLEVBQUl1ZCxFQUFPLENBQUUsQ0FFdEQsWUFBWTdkLEVBQU1NLEVBQUkwZCxFQUFVLENBQzlCLEtBQUssR0FBSzFkLEVBQ1YsS0FBSyxhQUFhTixDQUFJLEVBQ3RCLEtBQUssWUFBY2dlLEVBQ25CLEtBQUssWUFBYyxJQUFJLElBQ3ZCLEtBQUssaUJBQW1CLEdBQ3hCMVYsRUFBSSxXQUFXLEtBQUssR0FBSXVWLEdBQVMsS0FBSyxZQUFZLE9BQU8sQ0FBQyxFQUMxRCxRQUFRamMsS0FBTyxLQUFLLFlBQWMsS0FBS0EsQ0FBRyxFQUFJLEtBQUssWUFBWUEsQ0FBRyxDQUNwRSxDQUVBLGFBQWE1QixFQUFLLENBQ2JBLEdBQ0QsS0FBSyxPQUFTLElBQU1BLEVBQ3BCLEtBQUssV0FBYUEsRUFBSyxhQUV2QixLQUFLLE9BQVMsSUFBTSxDQUNsQixNQUFNLElBQUksTUFBTSx5Q0FBeUMsS0FBSyxHQUFHLFdBQVcsQ0FDOUUsRUFDQSxLQUFLLFdBQWEsS0FFdEIsQ0FFQSxXQUFXLENBQUUsS0FBSyxTQUFXLEtBQUssUUFBUSxDQUFFLENBQzVDLFdBQVcsQ0FBRSxLQUFLLFNBQVcsS0FBSyxRQUFRLENBQUUsQ0FDNUMsZ0JBQWdCLENBQUUsS0FBSyxjQUFnQixLQUFLLGFBQWEsQ0FBRSxDQUMzRCxhQUFhLENBQ1gsS0FBSyxXQUFhLEtBQUssVUFBVSxFQUNqQ3NJLEVBQUksY0FBYyxLQUFLLEdBQUl1VixFQUFPLENBQ3BDLENBQ0EsZUFBZSxDQUNWLEtBQUssbUJBQ04sS0FBSyxpQkFBbUIsR0FDeEIsS0FBSyxhQUFlLEtBQUssWUFBWSxFQUV6QyxDQUNBLGdCQUFnQixDQUNkLEtBQUssaUJBQW1CLEdBQ3hCLEtBQUssY0FBZ0IsS0FBSyxhQUFhLENBQ3pDLENBU0EsSUFBSSxDQUNGLElBQUl0WCxFQUFPLEtBRVgsTUFBTyxDQU1MLEtBQUt1VCxFQUFVLENBQ2J2VCxFQUFLLE9BQU8sRUFBRSxXQUFXLE9BQU9BLEVBQUssR0FBSXVULEVBQVcsTUFBTSxDQUM1RCxFQWFBLEtBQUt4WixFQUFJbUcsRUFBTyxDQUFDLEVBQUUsQ0FDakIsSUFBSXdYLEVBQVExWCxFQUFLLE9BQU8sRUFBRSxXQUFXLE1BQU1qRyxDQUFFLEVBQzdDc2QsR0FBRyxLQUFLLE9BQVFLLEVBQU8zZCxFQUFJbUcsRUFBSyxRQUFTQSxFQUFLLFdBQVlBLEVBQUssS0FBTUEsRUFBSyxRQUFRLENBQ3BGLEVBWUEsS0FBS25HLEVBQUltRyxFQUFPLENBQUMsRUFBRSxDQUNqQixJQUFJd1gsRUFBUTFYLEVBQUssT0FBTyxFQUFFLFdBQVcsTUFBTWpHLENBQUUsRUFDN0NzZCxHQUFHLEtBQUssT0FBUUssRUFBTzNkLEVBQUksS0FBTW1HLEVBQUssV0FBWUEsRUFBSyxLQUFNQSxFQUFLLFFBQVEsQ0FDNUUsRUEyQkEsT0FBT25HLEVBQUltRyxFQUFPLENBQUMsRUFBRSxDQUNuQixJQUFJd1gsRUFBUTFYLEVBQUssT0FBTyxFQUFFLFdBQVcsTUFBTWpHLENBQUUsRUFDN0NtRyxFQUFLLEdBQUttWCxHQUFHLGtCQUFrQm5YLEVBQUssRUFBRSxFQUN0Q0EsRUFBSyxJQUFNbVgsR0FBRyxrQkFBa0JuWCxFQUFLLEdBQUcsRUFDeENtWCxHQUFHLE9BQU8sT0FBUUssRUFBTzNkLEVBQUltRyxFQUFLLFFBQVNBLEVBQUssR0FBSUEsRUFBSyxJQUFLQSxFQUFLLEtBQU1BLEVBQUssUUFBUSxDQUN4RixFQW1CQSxTQUFTbkcsRUFBSThhLEVBQU8zVSxFQUFPLENBQUMsRUFBRSxDQUM1QjJVLEVBQVEsTUFBTSxRQUFRQSxDQUFLLEVBQUlBLEVBQVFBLEVBQU0sTUFBTSxHQUFHLEVBQ3RELElBQUk2QyxFQUFRMVgsRUFBSyxPQUFPLEVBQUUsV0FBVyxNQUFNakcsQ0FBRSxFQUM3Q3NkLEdBQUcsbUJBQW1CdGQsRUFBSThhLEVBQU8sQ0FBQyxFQUFHM1UsRUFBSyxXQUFZQSxFQUFLLEtBQU13WCxFQUFPeFgsRUFBSyxRQUFRLENBQ3ZGLEVBbUJBLFlBQVluRyxFQUFJOGEsRUFBTzNVLEVBQU8sQ0FBQyxFQUFFLENBQy9CQSxFQUFLLFdBQWFtWCxHQUFHLGtCQUFrQm5YLEVBQUssVUFBVSxFQUN0RDJVLEVBQVEsTUFBTSxRQUFRQSxDQUFLLEVBQUlBLEVBQVFBLEVBQU0sTUFBTSxHQUFHLEVBQ3RELElBQUk2QyxFQUFRMVgsRUFBSyxPQUFPLEVBQUUsV0FBVyxNQUFNakcsQ0FBRSxFQUM3Q3NkLEdBQUcsbUJBQW1CdGQsRUFBSSxDQUFDLEVBQUc4YSxFQUFPM1UsRUFBSyxXQUFZQSxFQUFLLEtBQU13WCxFQUFPeFgsRUFBSyxRQUFRLENBQ3ZGLEVBbUJBLFlBQVluRyxFQUFJOGEsRUFBTzNVLEVBQU8sQ0FBQyxFQUFFLENBQy9CQSxFQUFLLFdBQWFtWCxHQUFHLGtCQUFrQm5YLEVBQUssVUFBVSxFQUN0RDJVLEVBQVEsTUFBTSxRQUFRQSxDQUFLLEVBQUlBLEVBQVFBLEVBQU0sTUFBTSxHQUFHLEVBQ3RELElBQUk2QyxFQUFRMVgsRUFBSyxPQUFPLEVBQUUsV0FBVyxNQUFNakcsQ0FBRSxFQUM3Q3NkLEdBQUcsY0FBY3RkLEVBQUk4YSxFQUFPM1UsRUFBSyxXQUFZQSxFQUFLLEtBQU13WCxFQUFPeFgsRUFBSyxRQUFRLENBQzlFLEVBa0JBLFdBQVduRyxFQUFJK2EsRUFBWTVVLEVBQU8sQ0FBQyxFQUFFLENBQ25DLElBQUl3WCxFQUFRMVgsRUFBSyxPQUFPLEVBQUUsV0FBVyxNQUFNakcsQ0FBRSxFQUM3Q3NkLEdBQUcsbUJBQW1CdGQsRUFBSSxDQUFDLEVBQUcsQ0FBQyxFQUFHc2QsR0FBRyxrQkFBa0J2QyxDQUFVLEVBQUc1VSxFQUFLLEtBQU13WCxFQUFPeFgsRUFBSyxRQUFRLENBQ3JHLEVBU0EsYUFBYW5HLEVBQUlxRSxFQUFNeEUsRUFBSSxDQUFFeWQsR0FBRyxpQkFBaUJ0ZCxFQUFJLENBQUMsQ0FBQ3FFLEVBQU14RSxDQUFHLENBQUMsRUFBRyxDQUFDLENBQUMsQ0FBRSxFQVF4RSxnQkFBZ0JHLEVBQUlxRSxFQUFLLENBQUVpWixHQUFHLGlCQUFpQnRkLEVBQUksQ0FBQyxFQUFHLENBQUNxRSxDQUFJLENBQUMsQ0FBRSxFQVUvRCxnQkFBZ0JyRSxFQUFJcUUsRUFBTTZXLEVBQU1DLEVBQUssQ0FBRW1DLEdBQUcsV0FBV3RkLEVBQUlxRSxFQUFNNlcsRUFBTUMsQ0FBSSxDQUFFLENBQzdFLENBQ0YsQ0FFQSxVQUFVclcsRUFBTzhZLEVBQVUsQ0FBQyxFQUFHQyxFQUFRLENBQ3JDLE9BQUdBLElBQVksT0FDTixJQUFJLFFBQVEsQ0FBQ0MsRUFBU0MsSUFBVyxDQUN0QyxHQUFJLENBQ1UsS0FBSyxPQUFPLEVBQUUsY0FBYyxLQUFLLEdBQUksS0FBTWpaLEVBQU84WSxFQUFTLENBQUN0SCxFQUFPbUMsSUFBU3FGLEVBQVF4SCxDQUFLLENBQUMsSUFDM0YsSUFDVHlILEVBQU8sSUFBSSxNQUFNLG1EQUFtRCxDQUFDLENBRXpFLE9BQVN2ZSxFQUFULENBQ0V1ZSxFQUFPdmUsQ0FBSyxDQUNkLENBQ0YsQ0FBQyxFQUVJLEtBQUssT0FBTyxFQUFFLGNBQWMsS0FBSyxHQUFJLEtBQU1zRixFQUFPOFksRUFBU0MsQ0FBTyxDQUMzRSxDQUVBLFlBQVk1RCxFQUFXblYsRUFBTzhZLEVBQVUsQ0FBQyxFQUFHQyxFQUFRLENBQ2xELE9BQUdBLElBQVksT0FDTixJQUFJLFFBQVEsQ0FBQ0MsRUFBU0MsSUFBVyxDQUN0QyxHQUFJLENBQ0YsS0FBSyxPQUFPLEVBQUUsY0FBYzlELEVBQVcsQ0FBQ3ZhLEVBQU0wYSxJQUFjLENBQzlDMWEsRUFBSyxjQUFjLEtBQUssR0FBSTBhLEVBQVd0VixFQUFPOFksRUFBUyxDQUFDdEgsRUFBT21DLElBQVNxRixFQUFReEgsQ0FBSyxDQUFDLElBQ3ZGLElBQ1R5SCxFQUFPLElBQUksTUFBTSxtREFBbUQsQ0FBQyxDQUV6RSxDQUFDLENBQ0gsT0FBU3ZlLEVBQVQsQ0FDRXVlLEVBQU92ZSxDQUFLLENBQ2QsQ0FDRixDQUFDLEVBRUksS0FBSyxPQUFPLEVBQUUsY0FBY3lhLEVBQVcsQ0FBQ3ZhLEVBQU0wYSxJQUM1QzFhLEVBQUssY0FBYyxLQUFLLEdBQUkwYSxFQUFXdFYsRUFBTzhZLEVBQVNDLENBQU8sQ0FDdEUsQ0FDSCxDQUVBLFlBQVkvWSxFQUFPcEUsRUFBUyxDQUMxQixJQUFJc2QsRUFBYyxDQUFDQyxFQUFhQyxJQUFXQSxFQUFTcFosRUFBUXBFLEVBQVN1ZCxFQUFZLE1BQU0sRUFDdkYsY0FBTyxpQkFBaUIsT0FBT25aLElBQVNrWixDQUFXLEVBQ25ELEtBQUssWUFBWSxJQUFJQSxDQUFXLEVBQ3pCQSxDQUNULENBRUEsa0JBQWtCQSxFQUFZLENBQzVCLElBQUlsWixFQUFRa1osRUFBWSxLQUFNLEVBQUksRUFDbEMsT0FBTyxvQkFBb0IsT0FBT2xaLElBQVNrWixDQUFXLEVBQ3RELEtBQUssWUFBWSxPQUFPQSxDQUFXLENBQ3JDLENBRUEsT0FBT3BjLEVBQU1tSCxFQUFNLENBQ2pCLE9BQU8sS0FBSyxPQUFPLEVBQUUsZ0JBQWdCLEtBQU1uSCxFQUFNbUgsQ0FBSyxDQUN4RCxDQUVBLFNBQVNrUixFQUFXclksRUFBTW1ILEVBQU0sQ0FDOUIsT0FBTyxLQUFLLE9BQU8sRUFBRSxjQUFja1IsRUFBVyxDQUFDdmEsRUFBTTBhLElBQWMsQ0FDakUxYSxFQUFLLGdCQUFnQjBhLEVBQVd4WSxFQUFNbUgsQ0FBSyxDQUM3QyxDQUFDLENBQ0gsQ0FFQSxhQUFhLENBQ1gsS0FBSyxZQUFZLFFBQVFpVixHQUFlLEtBQUssa0JBQWtCQSxDQUFXLENBQUMsQ0FDN0UsQ0FDRixFQ2xRV0csR0FBcUIsQ0FBQzdjLEVBQUtvRCxJQUFXLENBQy9DLElBQUkwWixFQUFVOWMsRUFBSSxTQUFTLElBQUksRUFFM0IrYyxFQUFVRCxFQUFVOWMsRUFBSSxNQUFNLEVBQUcsRUFBRSxFQUFJQSxFQUUzQyxPQUFBK2MsRUFBVUEsRUFBUSxRQUFRLG1CQUFvQixHQUFHM1osT0FBWSxFQUUxRDBaLElBQVVDLEdBQVcsTUFDakJBLENBQ1QsRUFFSUMsR0FBZ0IsQ0FBQzFZLEVBQU0yWSxFQUFVQyxFQUFZLENBQUMsSUFBTSxDQUN0RCxHQUFNLENBQUMsVUFBQWpFLEVBQVcsR0FBRy9ZLENBQUksRUFBSStjLEVBSXpCRSxFQUNKLEdBQUdsRSxHQUFhQSxFQUFVLEtBQUssQ0FDN0IsSUFBTTFVLEVBQVEsU0FBUyxjQUFjLE9BQU8sRUFDNUNBLEVBQU0sS0FBTyxTQUdiLElBQU1oRCxFQUFTMFgsRUFBVSxhQUFhLE1BQU0sRUFDekMxWCxHQUNEZ0QsRUFBTSxhQUFhLE9BQVFoRCxDQUFNLEVBRW5DZ0QsRUFBTSxLQUFPMFUsRUFBVSxLQUN2QjFVLEVBQU0sTUFBUTBVLEVBQVUsTUFDeEJBLEVBQVUsY0FBYyxhQUFhMVUsRUFBTzBVLENBQVMsRUFDckRrRSxFQUFrQjVZLEVBR3BCLElBQU02WSxFQUFXLElBQUksU0FBUzlZLENBQUksRUFDNUJxQixFQUFXLENBQUMsRUFFbEJ5WCxFQUFTLFFBQVEsQ0FBQzdlLEVBQUt5QixFQUFLcWQsSUFBVyxDQUNsQzllLGFBQWUsTUFBT29ILEVBQVMsS0FBSzNGLENBQUcsQ0FDNUMsQ0FBQyxFQUdEMkYsRUFBUyxRQUFRM0YsR0FBT29kLEVBQVMsT0FBT3BkLENBQUcsQ0FBQyxFQUU1QyxJQUFNc2QsRUFBUyxJQUFJLGdCQUVmQyxFQUFXLE1BQU0sS0FBS2paLEVBQUssUUFBUSxFQUN2QyxPQUFRLENBQUN0RSxFQUFLekIsQ0FBRyxJQUFLNmUsRUFBUyxRQUFRLEVBQ3JDLEdBQUdGLEVBQVUsU0FBVyxHQUFLQSxFQUFVLFFBQVFsZCxDQUFHLEdBQUssRUFBRSxDQUN2RCxJQUFJd2QsRUFBU0QsRUFBUyxPQUFPaFosR0FBU0EsRUFBTSxPQUFTdkUsQ0FBRyxFQUNwRHlkLEVBQVcsQ0FBQ0QsRUFBTyxLQUFLalosR0FBVW1DLEVBQUksUUFBUW5DLEVBQU9oTCxFQUFlLEdBQUttTixFQUFJLFFBQVFuQyxFQUFPN0ssRUFBaUIsQ0FBRSxFQUMvR2drQixFQUFTRixFQUFPLE1BQU1qWixHQUFTQSxFQUFNLE9BQVMsUUFBUSxFQUN2RGtaLEdBQVksRUFBRXhFLEdBQWFBLEVBQVUsTUFBUWpaLElBQVEsQ0FBQzBkLEdBQ3ZESixFQUFPLE9BQU9ULEdBQW1CN2MsRUFBSyxVQUFVLEVBQUcsRUFBRSxFQUV2RHNkLEVBQU8sT0FBT3RkLEVBQUt6QixDQUFHLEVBTXZCMGEsR0FBYWtFLEdBQ2RsRSxFQUFVLGNBQWMsWUFBWWtFLENBQWUsRUFHckQsUUFBUVEsS0FBV3pkLEVBQU9vZCxFQUFPLE9BQU9LLEVBQVN6ZCxFQUFLeWQsQ0FBTyxDQUFDLEVBRTlELE9BQU9MLEVBQU8sU0FBUyxDQUN6QixFQUVxQk0sR0FBckIsTUFBcUJDLEVBQUssQ0FDeEIsT0FBTyxZQUFZbmYsRUFBRyxDQUNwQixJQUFJb2YsRUFBYXBmLEVBQUcsUUFBUTlFLEVBQWlCLEVBQzdDLE9BQU9ra0IsRUFBYXBYLEVBQUksUUFBUW9YLEVBQVksTUFBTSxFQUFJLElBQ3hELENBRUEsWUFBWXBmLEVBQUlqQyxFQUFZc2hCLEVBQVlwZCxFQUFPcWQsRUFBWSxDQUN6RCxLQUFLLE9BQVMsR0FDZCxLQUFLLFdBQWF2aEIsRUFDbEIsS0FBSyxNQUFRa0UsRUFDYixLQUFLLE9BQVNvZCxFQUNkLEtBQUssS0FBT0EsRUFBYUEsRUFBVyxLQUFPLEtBQzNDLEtBQUssR0FBS3JmLEVBQ1ZnSSxFQUFJLFdBQVcsS0FBSyxHQUFJLE9BQVEsSUFBSSxFQUNwQyxLQUFLLEdBQUssS0FBSyxHQUFHLEdBQ2xCLEtBQUssSUFBTSxFQUNYLEtBQUssV0FBYSxLQUNsQixLQUFLLFdBQWEsRUFDbEIsS0FBSyxZQUFjLEtBQ25CLEtBQUssYUFBZSxDQUFDLEVBQ3JCLEtBQUssYUFBZSxJQUFJLElBQ3hCLEtBQUssU0FBVyxHQUNoQixLQUFLLEtBQU8sS0FDWixLQUFLLFVBQVksS0FBSyxPQUFTLEtBQUssT0FBTyxVQUFZLEVBQUksRUFDM0QsS0FBSyxhQUFlLEVBQ3BCLEtBQUssWUFBYyxHQUNuQixLQUFLLFVBQVksR0FDakIsS0FBSyxhQUFlLFNBQVMwVSxFQUFPLENBQUVBLEdBQVVBLEVBQU8sQ0FBRSxFQUN6RCxLQUFLLGFBQWUsVUFBVSxDQUFFLEVBQ2hDLEtBQUssZUFBaUIsS0FBSyxPQUFTLEtBQU8sQ0FBQyxFQUM1QyxLQUFLLFVBQVksQ0FBQyxFQUNsQixLQUFLLFlBQWMsQ0FBQyxFQUNwQixLQUFLLFNBQVcsS0FBSyxPQUFTLEtBQU8sQ0FBQyxFQUN0QyxLQUFLLEtBQUssU0FBUyxLQUFLLEVBQUUsRUFBSSxDQUFDLEVBQy9CLEtBQUssaUJBQW1CLENBQUMsRUFDekIsS0FBSyxRQUFVLEtBQUssV0FBVyxRQUFRLE1BQU0sS0FBSyxLQUFNLElBQU0sQ0FDNUQsSUFBSXJaLEVBQU0sS0FBSyxNQUFRLEtBQUssVUFBVSxLQUFLLElBQUksRUFDL0MsTUFBTyxDQUNMLFNBQVUsS0FBSyxTQUFXQSxFQUFNLE9BQ2hDLElBQUssS0FBSyxTQUFXLE9BQVlBLEdBQU8sT0FDeEMsT0FBUSxLQUFLLGNBQWNpYyxDQUFXLEVBQ3RDLFFBQVMsS0FBSyxXQUFXLEVBQ3pCLE9BQVEsS0FBSyxVQUFVLEVBQ3ZCLE1BQU8sS0FBSyxLQUNkLENBQ0YsQ0FBQyxDQUNILENBRUEsUUFBUWxjLEVBQUssQ0FBRSxLQUFLLEtBQU9BLENBQUssQ0FFaEMsWUFBWUEsRUFBSyxDQUNmLEtBQUssU0FBVyxHQUNoQixLQUFLLEtBQU9BLENBQ2QsQ0FFQSxRQUFRLENBQUUsT0FBTyxLQUFLLEdBQUcsYUFBYTVJLEVBQVEsQ0FBRSxDQUVoRCxjQUFjOGtCLEVBQVksQ0FDeEIsSUFBSVYsRUFBUyxLQUFLLFdBQVcsT0FBTyxLQUFLLEVBQUUsRUFDdkNXLEVBQ0Z2WCxFQUFJLElBQUksU0FBVSxJQUFJLEtBQUssUUFBUTdPLEVBQWdCLElBQUksRUFDcEQsSUFBSW9KLEdBQVFBLEVBQUssS0FBT0EsRUFBSyxJQUFJLEVBQUUsT0FBT2MsR0FBTyxPQUFRQSxHQUFTLFFBQVEsRUFFL0UsT0FBR2tjLEVBQVMsT0FBUyxJQUFJWCxFQUFPLGNBQW1CVyxHQUNuRFgsRUFBTyxRQUFhLEtBQUssVUFDekJBLEVBQU8sZ0JBQXFCLEtBQUssYUFDakNBLEVBQU8sY0FBbUJVLEVBQzFCLEtBQUssZUFFRVYsQ0FDVCxDQUVBLGFBQWEsQ0FBRSxPQUFPLEtBQUssUUFBUSxRQUFRLENBQUUsQ0FFN0MsWUFBWSxDQUFFLE9BQU8sS0FBSyxHQUFHLGFBQWEzakIsRUFBVyxDQUFFLENBRXZELFdBQVcsQ0FDVCxJQUFJNEUsRUFBTSxLQUFLLEdBQUcsYUFBYXpFLEVBQVUsRUFDekMsT0FBT3lFLElBQVEsR0FBSyxLQUFPQSxDQUM3QixDQUVBLFFBQVFhLEVBQVcsVUFBVyxDQUFFLEVBQUUsQ0FDaEMsS0FBSyxtQkFBbUIsRUFDeEIsS0FBSyxVQUFZLEdBQ2pCLE9BQU8sS0FBSyxLQUFLLFNBQVMsS0FBSyxFQUFFLEVBQzlCLEtBQUssUUFBUyxPQUFPLEtBQUssS0FBSyxTQUFTLEtBQUssT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQ2xFLGFBQWEsS0FBSyxXQUFXLEVBQzdCLElBQUk4ZSxFQUFhLElBQU0sQ0FDckI5ZSxFQUFTLEVBQ1QsUUFBUXBCLEtBQU0sS0FBSyxVQUNqQixLQUFLLFlBQVksS0FBSyxVQUFVQSxDQUFFLENBQUMsQ0FFdkMsRUFFQTBJLEVBQUksc0JBQXNCLEtBQUssRUFBRSxFQUVqQyxLQUFLLElBQUksWUFBYSxJQUFNLENBQUMsNENBQTRDLENBQUMsRUFDMUUsS0FBSyxRQUFRLE1BQU0sRUFDaEIsUUFBUSxLQUFNd1gsQ0FBVSxFQUN4QixRQUFRLFFBQVNBLENBQVUsRUFDM0IsUUFBUSxVQUFXQSxDQUFVLENBQ2xDLENBRUEsdUJBQXVCN1YsRUFBUSxDQUM3QixLQUFLLEdBQUcsVUFBVSxPQUNoQnpQLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEVBQ0YsRUFDQSxLQUFLLEdBQUcsVUFBVSxJQUFJLEdBQUdxUCxDQUFPLENBQ2xDLENBRUEsV0FBV3JFLEVBQVEsQ0FFakIsR0FEQSxhQUFhLEtBQUssV0FBVyxFQUMxQkEsRUFDRCxLQUFLLFlBQWMsV0FBVyxJQUFNLEtBQUssV0FBVyxFQUFHQSxDQUFPLE1BQ3pELENBQ0wsUUFBUWhHLEtBQU0sS0FBSyxVQUFZLEtBQUssVUFBVUEsQ0FBRSxFQUFFLGVBQWUsRUFDakUsS0FBSyxvQkFBb0JuRixFQUFpQixFQUU5QyxDQUVBLFFBQVE4RixFQUFRLENBQ2QrSCxFQUFJLElBQUksS0FBSyxHQUFJLElBQUkvSCxLQUFZRCxHQUFNLEtBQUssV0FBVyxPQUFPQSxFQUFJQSxFQUFHLGFBQWFDLENBQU8sQ0FBQyxDQUFDLENBQzdGLENBRUEsWUFBWSxDQUNWLGFBQWEsS0FBSyxXQUFXLEVBQzdCLEtBQUssb0JBQW9CL0YsRUFBbUIsRUFDNUMsS0FBSyxRQUFRLEtBQUssUUFBUSxXQUFXLENBQUMsQ0FDeEMsQ0FFQSxvQkFBb0IsQ0FDbEIsUUFBUW9GLEtBQU0sS0FBSyxVQUFZLEtBQUssVUFBVUEsQ0FBRSxFQUFFLGNBQWMsQ0FDbEUsQ0FFQSxJQUFJSyxFQUFNOGYsRUFBWSxDQUNwQixLQUFLLFdBQVcsSUFBSSxLQUFNOWYsRUFBTThmLENBQVcsQ0FDN0MsQ0FFQSxXQUFXekUsRUFBTWEsRUFBU2EsRUFBUyxVQUFVLENBQUMsRUFBRSxDQUM5QyxLQUFLLFdBQVcsV0FBVzFCLEVBQU1hLEVBQVNhLENBQU0sQ0FDbEQsQ0FRQSxjQUFjekMsRUFBV3ZaLEVBQVVnZixFQUFNLFNBQVVDLEVBQU8sQ0FJeEQsR0FBRzFGLGFBQXFCLGFBQWVBLGFBQXFCLFdBQzFELE9BQU8sS0FBSyxXQUFXLE1BQU1BLEVBQVd2YSxHQUFRZ0IsRUFBU2hCLEVBQU11YSxDQUFTLENBQUMsRUFHM0UsR0FBR3RiLEdBQU1zYixDQUFTLEVBQ0ZqUyxFQUFJLHNCQUFzQjJYLEdBQVUsS0FBSyxHQUFJMUYsQ0FBUyxFQUN6RCxTQUFXLEVBQ3BCMWIsR0FBUyw2Q0FBNkMwYixHQUFXLEVBRWpFdlosRUFBUyxLQUFNLFNBQVN1WixDQUFTLENBQUMsTUFFL0IsQ0FDTCxJQUFJMkYsRUFBVSxNQUFNLEtBQUtGLEVBQUksaUJBQWlCekYsQ0FBUyxDQUFDLEVBQ3JEMkYsRUFBUSxTQUFXLEdBQUlyaEIsR0FBUyxtREFBbUQwYixJQUFZLEVBQ2xHMkYsRUFBUSxRQUFRdGIsR0FBVSxLQUFLLFdBQVcsTUFBTUEsRUFBUTVFLEdBQVFnQixFQUFTaEIsRUFBTTRFLENBQU0sQ0FBQyxDQUFDLEVBRTNGLENBRUEsVUFBVXpGLEVBQU1naEIsRUFBU25mLEVBQVMsQ0FDaEMsS0FBSyxJQUFJN0IsRUFBTSxJQUFNLENBQUMsR0FBSWlCLEdBQU0rZixDQUFPLENBQUMsQ0FBQyxFQUN6QyxHQUFJLENBQUMsS0FBQXhKLEVBQU0sTUFBQUMsRUFBTyxPQUFBQyxFQUFRLE1BQUFDLENBQUssRUFBSUosR0FBUyxRQUFReUosQ0FBTyxFQUMzRG5mLEVBQVMsQ0FBQyxLQUFBMlYsRUFBTSxNQUFBQyxFQUFPLE9BQUFDLENBQU0sQ0FBQyxHQUMzQixPQUFPQyxHQUFVLFVBQVkzWCxHQUFRLFVBQVUsT0FBTyxzQkFBc0IsSUFBTW1KLEVBQUksU0FBU3dPLENBQUssQ0FBQyxDQUMxRyxDQUVBLE9BQU8xVixFQUFLLENBQ1YsR0FBSSxDQUFDLFNBQUE0VixFQUFVLFVBQUExUCxFQUFXLGlCQUFBOFksQ0FBZ0IsRUFBSWhmLEVBQzlDLEdBQUdrRyxFQUFVLENBQ1gsR0FBSSxDQUFDME8sRUFBS3RPLENBQUssRUFBSUosRUFDbkIsS0FBSyxHQUFLZ0IsRUFBSSxxQkFBcUIsS0FBSyxHQUFJME4sRUFBS3RPLENBQUssRUFFeEQsS0FBSyxXQUFhLEVBQ2xCLEtBQUssWUFBYyxHQUNuQixLQUFLLE1BQVEsS0FDVixLQUFLLE9BQVMsT0FDZixLQUFLLGlCQUFtQixLQUFLLG9CQUFvQixHQUVoRCxLQUFLLE9BQU8sR0FBSyxPQUFPLFFBQVEsUUFBVSxNQUUzQ2hGLEdBQVEsVUFBVSxVQUFXLENBQzNCLEtBQU0sUUFDTixHQUFJLEtBQUssR0FDVCxTQUFVLEtBQUssV0FBVyxzQkFDNUIsQ0FBQyxFQUdBMGQsSUFBcUIsS0FBSyxXQUFXLFFBQVEsR0FDOUMsUUFBUSxNQUFNLHVEQUF1RCxLQUFLLFdBQVcsUUFBUSxnQkFBZ0JBLHdGQUF1RyxFQUd0TjFkLEdBQVEsVUFBVSxLQUFLLFdBQVcsYUFBYyxPQUFPLFNBQVMsU0FBVXpKLEVBQW1CLEVBQzdGLEtBQUssVUFBVSxRQUFTK2QsRUFBVSxDQUFDLENBQUMsS0FBQUwsRUFBTSxPQUFBRSxDQUFNLElBQU0sQ0FDcEQsS0FBSyxTQUFXLElBQUlILEdBQVMsS0FBSyxHQUFJQyxDQUFJLEVBQzFDLEdBQUksQ0FBQzNULEVBQU0wUSxDQUFPLEVBQUksS0FBSyxnQkFBZ0IsS0FBTSxNQUFNLEVBQ3ZELEtBQUssZ0JBQWdCLEVBQ3JCLEtBQUssWUFDTCxLQUFLLGFBQWUsRUFFcEIsS0FBSyxrQkFBa0IxUSxFQUFNLElBQU0sQ0FDakMsS0FBSyxlQUFlNUIsRUFBTTRCLEVBQU0wUSxFQUFTbUQsQ0FBTSxDQUNqRCxDQUFDLENBQ0gsQ0FBQyxDQUNILENBRUEsaUJBQWlCLENBQ2Z2TyxFQUFJLElBQUksU0FBVSxJQUFJMU8sT0FBZ0IsS0FBSyxPQUFPLE1BQU8wRyxHQUFNLENBQzdEQSxFQUFHLGdCQUFnQjNHLEVBQWUsRUFDbEMyRyxFQUFHLGdCQUFnQjFHLEVBQVcsRUFDOUIwRyxFQUFHLGdCQUFnQnpHLEVBQVksQ0FDakMsQ0FBQyxDQUNILENBRUEsZUFBZSxDQUFDLFdBQUF3bUIsQ0FBVSxFQUFHcmQsRUFBTTBRLEVBQVNtRCxFQUFPLENBR2pELEdBQUcsS0FBSyxVQUFZLEdBQU0sS0FBSyxRQUFVLENBQUMsS0FBSyxPQUFPLGNBQWMsRUFDbEUsT0FBTyxLQUFLLGVBQWV3SixFQUFZcmQsRUFBTTBRLEVBQVNtRCxDQUFNLEVBTzVDdk8sRUFBSSwwQkFBMEJ0RixFQUFNLEtBQUssRUFBRSxFQUFFLE9BQU8wQixHQUFRLENBQzVFLElBQUlELEVBQVNDLEVBQUssSUFBTSxLQUFLLEdBQUcsY0FBYyxRQUFRQSxFQUFLLE1BQU0sRUFDN0Q0YixFQUFZN2IsR0FBVUEsRUFBTyxhQUFhL0ksRUFBVSxFQUN4RCxPQUFHNGtCLEdBQVk1YixFQUFLLGFBQWFoSixHQUFZNGtCLENBQVMsRUFHbkQ3YixHQUFTQSxFQUFPLGFBQWExSixHQUFhLEtBQUssS0FBSyxFQUFFLEVBQ2xELEtBQUssVUFBVTJKLENBQUksQ0FDNUIsQ0FBQyxFQUVjLFNBQVcsRUFDckIsS0FBSyxRQUNOLEtBQUssS0FBSyxlQUFlLEtBQUssQ0FBQyxLQUFNLElBQU0sS0FBSyxlQUFlMmIsRUFBWXJkLEVBQU0wUSxFQUFTbUQsQ0FBTSxDQUFDLENBQUMsRUFDbEcsS0FBSyxPQUFPLFFBQVEsSUFBSSxJQUV4QixLQUFLLHdCQUF3QixFQUM3QixLQUFLLGVBQWV3SixFQUFZcmQsRUFBTTBRLEVBQVNtRCxDQUFNLEdBR3ZELEtBQUssS0FBSyxlQUFlLEtBQUssQ0FBQyxLQUFNLElBQU0sS0FBSyxlQUFld0osRUFBWXJkLEVBQU0wUSxFQUFTbUQsQ0FBTSxDQUFDLENBQUMsQ0FFdEcsQ0FFQSxpQkFBaUIsQ0FDZixLQUFLLEdBQUt2TyxFQUFJLEtBQUssS0FBSyxFQUFFLEVBQzFCLEtBQUssR0FBRyxhQUFhdk4sR0FBYSxLQUFLLEtBQUssRUFBRSxDQUNoRCxDQU1BLGVBQWVtSixFQUFTLEtBQUssR0FBRyxDQUM5QixJQUFJbUMsRUFBaUIsS0FBSyxRQUFRckwsRUFBZ0IsRUFDOUNzTCxFQUFvQixLQUFLLFFBQVFyTCxFQUFtQixFQUN4RHFOLEVBQUksSUFBSXBFLEVBQVEsSUFBSW1DLFFBQXFCQyxLQUFzQmlhLEdBQVUsQ0FDcEUsS0FBSyxZQUFZQSxDQUFNLElBQ3hCalksRUFBSSxxQkFBcUJpWSxFQUFRQSxFQUFRbGEsRUFBZ0JDLENBQWlCLEVBQzFFLEtBQUssZ0JBQWdCaWEsQ0FBTSxFQUUvQixDQUFDLEVBQ0RqWSxFQUFJLElBQUlwRSxFQUFRLElBQUksS0FBSyxRQUFRbkksRUFBUSxpQkFBaUJBLE1BQWF3a0IsR0FBVSxDQUM1RSxLQUFLLFlBQVlBLENBQU0sR0FDeEIsS0FBSyxnQkFBZ0JBLENBQU0sQ0FFL0IsQ0FBQyxFQUNEalksRUFBSSxJQUFJcEUsRUFBUSxJQUFJLEtBQUssUUFBUXJILEVBQVcsS0FBTXlELEdBQU0sQ0FDbkQsS0FBSyxZQUFZQSxDQUFFLEdBQ3BCLEtBQUssYUFBYUEsQ0FBRSxDQUV4QixDQUFDLENBQ0gsQ0FFQSxlQUFlK2YsRUFBWXJkLEVBQU0wUSxFQUFTbUQsRUFBTyxDQUMvQyxLQUFLLGdCQUFnQixFQUNyQixJQUFJMkosRUFBUSxJQUFJL00sR0FBUyxLQUFNLEtBQUssR0FBSSxLQUFLLEdBQUl6USxFQUFNMFEsRUFBUyxJQUFJLEVBVXBFLEdBVEE4TSxFQUFNLDhCQUE4QixFQUNwQyxLQUFLLGFBQWFBLEVBQU8sR0FBTyxFQUFJLEVBQ3BDLEtBQUssZ0JBQWdCLEVBQ3JCLEtBQUssZUFBZSxFQUVwQixLQUFLLFlBQWMsR0FDbkIsS0FBSyxXQUFXLGVBQWUzSixDQUFNLEVBQ3JDLEtBQUssb0JBQW9CLEVBRXRCd0osRUFBVyxDQUNaLEdBQUksQ0FBQyxLQUFBcGdCLEVBQU0sR0FBQThCLENBQUUsRUFBSXNlLEVBQ2pCLEtBQUssV0FBVyxhQUFhdGUsRUFBSTlCLENBQUksRUFFdkMsS0FBSyxXQUFXLEVBQ2IsS0FBSyxVQUFZLEdBQUksS0FBSyxtQkFBbUIsRUFDaEQsS0FBSyxhQUFhLENBQ3BCLENBRUEsd0JBQXdCd0UsRUFBUUMsRUFBSyxDQUNuQyxLQUFLLFdBQVcsV0FBVyxvQkFBcUIsQ0FBQ0QsRUFBUUMsQ0FBSSxDQUFDLEVBQzlELElBQUk2QixFQUFPLEtBQUssUUFBUTlCLENBQU0sRUFDMUJxQyxFQUFZUCxHQUFRK0IsRUFBSSxVQUFVN0QsRUFBUSxLQUFLLFFBQVF2SSxFQUFVLENBQUMsRUFDdEUsR0FBR3FLLEdBQVEsQ0FBQzlCLEVBQU8sWUFBWUMsQ0FBSSxHQUFLLEVBQUVvQyxHQUFhcEcsR0FBVytELEVBQU8sUUFBU0MsRUFBSyxPQUFPLEdBQzVGLE9BQUE2QixFQUFLLGVBQWUsRUFDYkEsQ0FFWCxDQUVBLGFBQWFqRyxFQUFHLENBQ2QsSUFBSW1nQixFQUFhbmdCLEVBQUcsYUFBYSxLQUFLLFFBQVF6RCxFQUFXLENBQUMsRUFDdEQ2akIsRUFBaUJELEdBQWNuWSxFQUFJLFFBQVFoSSxFQUFJLFNBQVMsRUFDekRtZ0IsR0FBYyxDQUFDQyxJQUNoQixLQUFLLFdBQVcsT0FBT3BnQixFQUFJbWdCLENBQVUsRUFDckNuWSxFQUFJLFdBQVdoSSxFQUFJLFVBQVcsRUFBSSxFQUV0QyxDQUVBLGdCQUFnQkEsRUFBRyxDQUNqQixJQUFJcWdCLEVBQVUsS0FBSyxRQUFRcmdCLENBQUUsRUFDMUJxZ0IsR0FBVUEsRUFBUSxVQUFVLENBQ2pDLENBRUEsYUFBYUgsRUFBT0ksRUFBV2hOLEVBQWMsR0FBTSxDQUNqRCxJQUFJaU4sRUFBYSxDQUFDLEVBQ2RDLEVBQW1CLEdBQ25CQyxFQUFpQixJQUFJLElBRXpCLFlBQUssV0FBVyxXQUFXLGVBQWdCLENBQUNQLEVBQU0sZUFBZSxDQUFDLEVBRWxFQSxFQUFNLE1BQU0sUUFBU2xnQixHQUFNLENBQ3pCLEtBQUssV0FBVyxXQUFXLGNBQWUsQ0FBQ0EsQ0FBRSxDQUFDLEVBQzlDLElBQUkrRixFQUFpQixLQUFLLFFBQVFyTCxFQUFnQixFQUM5Q3NMLEVBQW9CLEtBQUssUUFBUXJMLEVBQW1CLEVBQ3hEcU4sRUFBSSxxQkFBcUJoSSxFQUFJQSxFQUFJK0YsRUFBZ0JDLENBQWlCLEVBQ2xFLEtBQUssZ0JBQWdCaEcsQ0FBRSxFQUNwQkEsRUFBRyxjQUFlLEtBQUssYUFBYUEsQ0FBRSxDQUMzQyxDQUFDLEVBRURrZ0IsRUFBTSxNQUFNLGdCQUFpQmxnQixHQUFNLENBQzlCZ0ksRUFBSSxZQUFZaEksQ0FBRSxFQUNuQixLQUFLLFdBQVcsY0FBYyxFQUU5QndnQixFQUFtQixFQUV2QixDQUFDLEVBRUROLEVBQU0sT0FBTyxVQUFXLENBQUMvYixFQUFRQyxJQUFTLENBQzdCLEtBQUssd0JBQXdCRCxFQUFRQyxDQUFJLEdBQzFDcWMsRUFBZSxJQUFJdGMsRUFBTyxFQUFFLENBQ3hDLENBQUMsRUFFRCtiLEVBQU0sTUFBTSxVQUFXbGdCLEdBQU0sQ0FDeEJ5Z0IsRUFBZSxJQUFJemdCLEVBQUcsRUFBRSxHQUFJLEtBQUssUUFBUUEsQ0FBRSxFQUFFLFVBQVUsQ0FDNUQsQ0FBQyxFQUVEa2dCLEVBQU0sTUFBTSxZQUFjbGdCLEdBQU8sQ0FDNUJBLEVBQUcsV0FBYSxLQUFLLGNBQWV1Z0IsRUFBVyxLQUFLdmdCLENBQUUsQ0FDM0QsQ0FBQyxFQUVEa2dCLEVBQU0sTUFBTSx1QkFBd0JRLEdBQU8sS0FBSyxxQkFBcUJBLEVBQUtKLENBQVMsQ0FBQyxFQUNwRkosRUFBTSxRQUFRNU0sQ0FBVyxFQUN6QixLQUFLLHFCQUFxQmlOLEVBQVlELENBQVMsRUFFL0MsS0FBSyxXQUFXLFdBQVcsYUFBYyxDQUFDSixFQUFNLGVBQWUsQ0FBQyxFQUN6RE0sQ0FDVCxDQUVBLHFCQUFxQjNCLEVBQVV5QixFQUFVLENBQ3ZDLElBQUlLLEVBQWdCLENBQUMsRUFDckI5QixFQUFTLFFBQVFqYixHQUFVLENBQ3pCLElBQUlnVCxFQUFhNU8sRUFBSSxJQUFJcEUsRUFBUSxJQUFJM0ssS0FBZ0IsRUFDakQybkIsRUFBUTVZLEVBQUksSUFBSXBFLEVBQVEsSUFBSSxLQUFLLFFBQVFuSSxFQUFRLHFCQUFxQixFQUMxRW1iLEVBQVcsT0FBT2hULENBQU0sRUFBRSxRQUFRNUQsR0FBTSxDQUN0QyxJQUFJcEIsRUFBTSxLQUFLLFlBQVlvQixDQUFFLEVBQzFCckIsR0FBTUMsQ0FBRyxHQUFLK2hCLEVBQWMsUUFBUS9oQixDQUFHLElBQU0sSUFBSytoQixFQUFjLEtBQUsvaEIsQ0FBRyxDQUM3RSxDQUFDLEVBQ0RnaUIsRUFBTSxPQUFPaGQsQ0FBTSxFQUFFLFFBQVFxYyxHQUFVLENBQ3JDLElBQUloYSxFQUFPLEtBQUssUUFBUWdhLENBQU0sRUFDOUJoYSxHQUFRLEtBQUssWUFBWUEsQ0FBSSxDQUMvQixDQUFDLENBQ0gsQ0FBQyxFQUlFcWEsR0FDRCxLQUFLLDZCQUE2QkssQ0FBYSxDQUVuRCxDQUVBLGlCQUFpQixDQUNmM1ksRUFBSSxnQkFBZ0IsS0FBSyxHQUFJLEtBQUssRUFBRSxFQUFFLFFBQVFoSSxHQUFNLEtBQUssVUFBVUEsQ0FBRSxDQUFDLENBQ3hFLENBRUEsa0JBQWtCMEMsRUFBTWhDLEVBQVMsQ0FDL0IsSUFBTW1nQixFQUFZLEtBQUssUUFBUSxRQUFRLEVBQ2pDQyxFQUFXLEtBQUssS0FBSyxpQkFRdkJuZSxFQUFXLFNBQVMsY0FBYyxVQUFVLEVBQ2hEQSxFQUFTLFVBQVlELEVBR3JCLElBQU1xZSxFQUFTcGUsRUFBUyxRQUFRLGtCQUNoQ29lLEVBQU8sR0FBSyxLQUFLLEdBQ2pCQSxFQUFPLGFBQWF0bUIsR0FBYSxLQUFLLEtBQUssRUFBRSxFQUM3Q3NtQixFQUFPLGFBQWE5bEIsR0FBYSxLQUFLLFdBQVcsQ0FBQyxFQUNsRDhsQixFQUFPLGFBQWEzbEIsR0FBWSxLQUFLLFVBQVUsQ0FBQyxFQUNoRDJsQixFQUFPLGFBQWF4bUIsR0FBZSxLQUFLLE9BQVMsS0FBSyxPQUFPLEdBQUssSUFBSSxFQUt0RSxJQUFNeW1CLEVBR0poWixFQUFJLElBQUlyRixFQUFTLFFBQVMsTUFBTSxFQUU3QixPQUFPc2UsR0FBV0EsRUFBUSxJQUFNSCxFQUFTRyxFQUFRLEVBQUUsQ0FBQyxFQUVwRCxPQUFPQSxHQUFXLENBQUMsS0FBSyxhQUFhLElBQUlBLEVBQVEsRUFBRSxDQUFDLEVBRXBELE9BQU9BLEdBQVdILEVBQVNHLEVBQVEsRUFBRSxFQUFFLGFBQWFKLENBQVMsSUFBTUksRUFBUSxhQUFhSixDQUFTLENBQUMsRUFDbEcsSUFBSUksR0FDSSxDQUFDSCxFQUFTRyxFQUFRLEVBQUUsRUFBR0EsQ0FBTyxDQUN0QyxFQUVMLEdBQUdELEVBQWUsU0FBVyxFQUMzQixPQUFPdGdCLEVBQVMsRUFHbEJzZ0IsRUFBZSxRQUFRLENBQUMsQ0FBQ0UsRUFBU0QsQ0FBTyxFQUFHaGlCLElBQU0sQ0FDaEQsS0FBSyxhQUFhLElBQUlnaUIsRUFBUSxFQUFFLEVBS2hDLEtBQUssaUJBQWlCQyxFQUFTRCxFQUFTdGUsRUFBUyxRQUFRLGtCQUFtQixJQUFNLENBQ2hGLEtBQUssYUFBYSxPQUFPc2UsRUFBUSxFQUFFLEVBRWhDaGlCLElBQU0raEIsRUFBZSxPQUFTLEdBQy9CdGdCLEVBQVMsQ0FFYixDQUFDLENBQ0gsQ0FBQyxDQUNILENBRUEsYUFBYXBCLEVBQUcsQ0FBRSxPQUFPLEtBQUssS0FBSyxTQUFTLEtBQUssRUFBRSxFQUFFQSxDQUFFLENBQUUsQ0FFekQsa0JBQWtCVSxFQUFHLENBQ25CLE9BQUdBLEVBQUcsS0FBTyxLQUFLLEdBQ1QsS0FFQSxLQUFLLFNBQVNBLEVBQUcsYUFBYXpGLEVBQWEsQ0FBQyxJQUFJeUYsRUFBRyxFQUFFLENBRWhFLENBRUEsa0JBQWtCVixFQUFHLENBQ25CLFFBQVFnRSxLQUFZLEtBQUssS0FBSyxTQUM1QixRQUFRNmQsS0FBVyxLQUFLLEtBQUssU0FBUzdkLENBQVEsRUFDNUMsR0FBRzZkLElBQVk3aEIsRUFBSyxPQUFPLEtBQUssS0FBSyxTQUFTZ0UsQ0FBUSxFQUFFNmQsQ0FBTyxFQUFFLFFBQVEsQ0FHL0UsQ0FFQSxVQUFVbmhCLEVBQUcsQ0FFWCxHQUFHLENBRFMsS0FBSyxhQUFhQSxFQUFHLEVBQUUsRUFDekIsQ0FDUixJQUFJTixFQUFPLElBQUl5ZixHQUFLbmYsRUFBSSxLQUFLLFdBQVksSUFBSSxFQUM3QyxZQUFLLEtBQUssU0FBUyxLQUFLLEVBQUUsRUFBRU4sRUFBSyxFQUFFLEVBQUlBLEVBQ3ZDQSxFQUFLLEtBQUssRUFDVixLQUFLLGFBQ0UsR0FFWCxDQUVBLGVBQWUsQ0FBRSxPQUFPLEtBQUssV0FBWSxDQUV6QyxRQUFRMGhCLEVBQU8sQ0FDYixLQUFLLGFBRUYsS0FBSyxhQUFlLElBQ2xCLEtBQUssT0FDTixLQUFLLE9BQU8sUUFBUSxJQUFJLEVBRXhCLEtBQUssd0JBQXdCLEVBR25DLENBRUEseUJBQXlCLENBR3ZCLEtBQUssYUFBYSxNQUFNLEVBRXhCLEtBQUssaUJBQW1CLENBQUMsRUFDekIsS0FBSyxhQUFhLElBQU0sQ0FDdEIsS0FBSyxlQUFlLFFBQVEsQ0FBQyxDQUFDMWhCLEVBQU02SCxDQUFFLElBQU0sQ0FDdEM3SCxFQUFLLFlBQVksR0FBSTZILEVBQUcsQ0FDOUIsQ0FBQyxFQUNELEtBQUssZUFBaUIsQ0FBQyxDQUN6QixDQUFDLENBQ0gsQ0FFQSxPQUFPOE8sRUFBTUUsRUFBTyxDQUNsQixHQUFHLEtBQUssY0FBYyxHQUFNLEtBQUssV0FBVyxlQUFlLEdBQUssS0FBSyxLQUFLLE9BQU8sRUFDL0UsT0FBTyxLQUFLLGFBQWEsS0FBSyxDQUFDLEtBQUFGLEVBQU0sT0FBQUUsQ0FBTSxDQUFDLEVBRzlDLEtBQUssU0FBUyxVQUFVRixDQUFJLEVBQzVCLElBQUltSyxFQUFtQixHQUtwQixLQUFLLFNBQVMsb0JBQW9CbkssQ0FBSSxFQUN2QyxLQUFLLFdBQVcsS0FBSywyQkFBNEIsSUFBTSxDQUNwQ3JPLEVBQUksdUJBQXVCLEtBQUssR0FBSSxLQUFLLFNBQVMsY0FBY3FPLENBQUksQ0FBQyxFQUMzRSxRQUFRZ0wsR0FBYSxDQUMzQixLQUFLLGVBQWUsS0FBSyxTQUFTLGFBQWFoTCxFQUFNZ0wsQ0FBUyxFQUFHQSxDQUFTLElBQUliLEVBQW1CLEdBQ3RHLENBQUMsQ0FDSCxDQUFDLEVBQ1FqZ0IsR0FBUThWLENBQUksR0FDckIsS0FBSyxXQUFXLEtBQUssc0JBQXVCLElBQU0sQ0FDaEQsR0FBSSxDQUFDM1QsRUFBTTBRLENBQU8sRUFBSSxLQUFLLGdCQUFnQmlELEVBQU0sUUFBUSxFQUNyRDZKLEVBQVEsSUFBSS9NLEdBQVMsS0FBTSxLQUFLLEdBQUksS0FBSyxHQUFJelEsRUFBTTBRLEVBQVMsSUFBSSxFQUNwRW9OLEVBQW1CLEtBQUssYUFBYU4sRUFBTyxFQUFJLENBQ2xELENBQUMsRUFHSCxLQUFLLFdBQVcsZUFBZTNKLENBQU0sRUFDbENpSyxHQUFtQixLQUFLLGdCQUFnQixDQUM3QyxDQUVBLGdCQUFnQm5LLEVBQU0xVyxFQUFLLENBQ3pCLE9BQU8sS0FBSyxXQUFXLEtBQUssa0JBQWtCQSxLQUFTLElBQU0sQ0FDM0QsSUFBSStWLEVBQU0sS0FBSyxHQUFHLFFBR2RqUyxFQUFPNFMsRUFBTyxLQUFLLFNBQVMsY0FBY0EsQ0FBSSxFQUFJLEtBQ2xELENBQUMzVCxFQUFNMFEsQ0FBTyxFQUFJLEtBQUssU0FBUyxTQUFTM1AsQ0FBSSxFQUNqRCxNQUFPLENBQUMsSUFBSWlTLEtBQU9oVCxNQUFTZ1QsS0FBUXRDLENBQU8sQ0FDN0MsQ0FBQyxDQUNILENBRUEsZUFBZWlELEVBQU16WCxFQUFJLENBQ3ZCLEdBQUcyQixHQUFROFYsQ0FBSSxFQUFHLE1BQU8sR0FDekIsR0FBSSxDQUFDM1QsRUFBTTBRLENBQU8sRUFBSSxLQUFLLFNBQVMsa0JBQWtCeFUsQ0FBRyxFQUNyRHNoQixFQUFRLElBQUkvTSxHQUFTLEtBQU0sS0FBSyxHQUFJLEtBQUssR0FBSXpRLEVBQU0wUSxFQUFTeFUsQ0FBRyxFQUVuRSxPQURvQixLQUFLLGFBQWFzaEIsRUFBTyxFQUFJLENBRW5ELENBRUEsUUFBUWxnQixFQUFHLENBQUUsT0FBTyxLQUFLLFVBQVV5ZCxHQUFTLFVBQVV6ZCxDQUFFLENBQUMsQ0FBRSxDQUUzRCxRQUFRQSxFQUFHLENBQ1QsSUFBSXNoQixFQUFXN0QsR0FBUyxVQUFVemQsQ0FBRSxFQUdwQyxHQUFHLEVBQUFBLEVBQUcsY0FBZ0IsQ0FBQyxLQUFLLFlBQVlBLENBQUUsR0FFMUMsR0FBR3NoQixHQUFZLENBQUMsS0FBSyxVQUFVQSxDQUFRLEVBQUUsQ0FFdkMsSUFBSXJiLEVBQU8rQixFQUFJLGdCQUFnQmhJLENBQUUsR0FBS3pCLEdBQVMscUNBQXFDeUIsRUFBRyxJQUFJLEVBQzNGLFlBQUssVUFBVXNoQixDQUFRLEVBQUlyYixFQUMzQkEsRUFBSyxhQUFhLElBQUksRUFDZkEsTUFDVCxJQUNRcWIsR0FBWSxDQUFDdGhCLEVBQUcsYUFFdEIsT0FDSyxDQUVMLElBQUl1aEIsRUFBV3ZoQixFQUFHLGFBQWEsWUFBWXZFLElBQVUsR0FBS3VFLEVBQUcsYUFBYSxLQUFLLFFBQVF2RSxFQUFRLENBQUMsRUFDNUZpaUIsRUFBWSxLQUFLLFdBQVcsaUJBQWlCNkQsQ0FBUSxFQUV6RCxHQUFHN0QsRUFBVSxDQUNQMWQsRUFBRyxJQUFLekIsR0FBUyx1QkFBdUJnakIsaURBQXlEdmhCLENBQUUsRUFDdkcsSUFBSWlHLEVBQU8sSUFBSXdYLEdBQVMsS0FBTXpkLEVBQUkwZCxDQUFTLEVBQzNDLFlBQUssVUFBVUQsR0FBUyxVQUFVeFgsRUFBSyxFQUFFLENBQUMsRUFBSUEsRUFDdkNBLE9BQ0NzYixJQUFhLE1BQ3JCaGpCLEdBQVMsMkJBQTJCZ2pCLEtBQWF2aEIsQ0FBRSxHQUd6RCxDQUVBLFlBQVlpRyxFQUFLLENBR2YsSUFBTXViLEVBQVMvRCxHQUFTLFVBQVV4WCxFQUFLLEVBQUUsRUFDekNBLEVBQUssWUFBWSxFQUNqQkEsRUFBSyxZQUFZLEVBQ2pCLE9BQU8sS0FBSyxVQUFVdWIsQ0FBTSxDQUM5QixDQUVBLHFCQUFxQixDQUNuQixLQUFLLGFBQWEsUUFBUSxDQUFDLENBQUMsS0FBQW5MLEVBQU0sT0FBQUUsQ0FBTSxJQUFNLEtBQUssT0FBT0YsRUFBTUUsQ0FBTSxDQUFDLEVBQ3ZFLEtBQUssYUFBZSxDQUFDLEVBQ3JCLEtBQUssVUFBVTFNLEdBQVNBLEVBQU0sb0JBQW9CLENBQUMsQ0FDckQsQ0FFQSxVQUFVbkosRUFBUyxDQUNqQixJQUFJb1UsRUFBVyxLQUFLLEtBQUssU0FBUyxLQUFLLEVBQUUsR0FBSyxDQUFDLEVBQy9DLFFBQVF4VixLQUFNd1YsRUFBV3BVLEVBQVMsS0FBSyxhQUFhcEIsQ0FBRSxDQUFDLENBQ3pELENBRUEsVUFBVXdGLEVBQU8yYyxFQUFHLENBQ2xCLEtBQUssV0FBVyxVQUFVLEtBQUssUUFBUzNjLEVBQU9oRSxHQUFRLENBQ2xELEtBQUssY0FBYyxFQUNwQixLQUFLLEtBQUssZUFBZSxLQUFLLENBQUMsS0FBTSxJQUFNMmdCLEVBQUczZ0IsQ0FBSSxDQUFDLENBQUMsRUFFcEQsS0FBSyxXQUFXLGlCQUFpQixJQUFNMmdCLEVBQUczZ0IsQ0FBSSxDQUFDLENBRW5ELENBQUMsQ0FDSCxDQUVBLGFBQWEsQ0FHWCxLQUFLLFdBQVcsVUFBVSxLQUFLLFFBQVMsT0FBUytlLEdBQVksQ0FDM0QsS0FBSyxXQUFXLGlCQUFpQixJQUFNLENBQ3JDLEtBQUssVUFBVSxTQUFVQSxFQUFTLENBQUMsQ0FBQyxLQUFBeEosRUFBTSxPQUFBRSxDQUFNLElBQU0sS0FBSyxPQUFPRixFQUFNRSxDQUFNLENBQUMsQ0FDakYsQ0FBQyxDQUNILENBQUMsRUFDRCxLQUFLLFVBQVUsV0FBWSxDQUFDLENBQUMsR0FBQTlVLEVBQUksTUFBQVEsQ0FBSyxJQUFNLEtBQUssV0FBVyxDQUFDLEdBQUFSLEVBQUksTUFBQVEsQ0FBSyxDQUFDLENBQUMsRUFDeEUsS0FBSyxVQUFVLGFBQWV5ZixHQUFVLEtBQUssWUFBWUEsQ0FBSyxDQUFDLEVBQy9ELEtBQUssVUFBVSxnQkFBa0JBLEdBQVUsS0FBSyxlQUFlQSxDQUFLLENBQUMsRUFDckUsS0FBSyxRQUFRLFFBQVF4akIsR0FBVSxLQUFLLFFBQVFBLENBQU0sQ0FBQyxFQUNuRCxLQUFLLFFBQVEsUUFBUUEsR0FBVSxLQUFLLFFBQVFBLENBQU0sQ0FBQyxDQUNyRCxDQUVBLG9CQUFvQixDQUFFLEtBQUssVUFBVTJMLEdBQVNBLEVBQU0sUUFBUSxDQUFDLENBQUUsQ0FFL0QsZUFBZTZYLEVBQU0sQ0FDbkIsR0FBSSxDQUFDLEdBQUFqZ0IsRUFBSSxLQUFBOUIsRUFBTSxNQUFBc0MsQ0FBSyxFQUFJeWYsRUFDcEJyZSxFQUFNLEtBQUssVUFBVTVCLENBQUUsRUFDdkJuRCxFQUFJLElBQUksWUFBWSxzQkFBdUIsQ0FBQyxPQUFRLENBQUMsR0FBQW1ELEVBQUksS0FBQTlCLEVBQU0sTUFBQXNDLENBQUssQ0FBQyxDQUFDLEVBQzFFLEtBQUssV0FBVyxnQkFBZ0IzRCxFQUFHK0UsRUFBSzFELEVBQU1zQyxDQUFLLENBQ3JELENBRUEsWUFBWXlmLEVBQU0sQ0FDaEIsR0FBSSxDQUFDLEdBQUFqZ0IsRUFBSSxLQUFBOUIsQ0FBSSxFQUFJK2hCLEVBQ2pCLEtBQUssS0FBTyxLQUFLLFVBQVVqZ0IsQ0FBRSxFQUM3QixLQUFLLFdBQVcsYUFBYUEsRUFBSTlCLENBQUksQ0FDdkMsQ0FFQSxVQUFVOEIsRUFBRyxDQUNYLE9BQU9BLEVBQUcsV0FBVyxHQUFHLEVBQUksR0FBRyxPQUFPLFNBQVMsYUFBYSxPQUFPLFNBQVMsT0FBT0EsSUFBT0EsQ0FDNUYsQ0FFQSxXQUFXLENBQUMsR0FBQUEsRUFBSSxNQUFBUSxFQUFPLFlBQUEwZixDQUFXLEVBQUUsQ0FBRSxLQUFLLFdBQVcsU0FBU2xnQixFQUFJUSxFQUFPMGYsQ0FBVyxDQUFFLENBRXZGLGFBQWEsQ0FBRSxPQUFPLEtBQUssU0FBVSxDQUVyQyxVQUFVLENBQUUsS0FBSyxPQUFTLEVBQUssQ0FFL0IsVUFBVSxDQUNSLFlBQUssU0FBVyxLQUFLLFVBQVksS0FBSyxRQUFRLEtBQUssRUFDNUMsS0FBSyxRQUNkLENBRUEsS0FBS2poQixFQUFTLENBQ1osS0FBSyxXQUFXLEtBQUssV0FBVyxhQUFhLEVBQzdDLEtBQUssWUFBWSxFQUNkLEtBQUssT0FBTyxJQUNiLEtBQUssYUFBZSxLQUFLLFdBQVcsZ0JBQWdCLENBQUMsR0FBSSxLQUFLLEtBQU0sS0FBTSxTQUFTLENBQUMsR0FFdEYsS0FBSyxhQUFnQmdjLEdBQVcsQ0FDOUJBLEVBQVNBLEdBQVUsVUFBVSxDQUFDLEVBQzlCaGMsRUFBV0EsRUFBUyxLQUFLLFVBQVdnYyxDQUFNLEVBQUlBLEVBQU8sQ0FDdkQsRUFFQSxLQUFLLFNBQVMsSUFBTSxLQUFLLFFBQVEsS0FBSyxFQUFHLENBQ3ZDLEdBQUs1YixHQUFTLEtBQUssV0FBVyxpQkFBaUIsSUFBTSxLQUFLLE9BQU9BLENBQUksQ0FBQyxFQUN0RSxNQUFRdEIsR0FBVSxLQUFLLFlBQVlBLENBQUssRUFDeEMsUUFBUyxJQUFNLEtBQUssWUFBWSxDQUFDLE9BQVEsU0FBUyxDQUFDLENBQ3JELENBQUMsQ0FDSCxDQUVBLFlBQVlzQixFQUFLLENBQ2YsR0FBR0EsRUFBSyxTQUFXLFNBQVMsQ0FDMUIsS0FBSyxJQUFJLFFBQVMsSUFBTSxDQUFDLHFCQUFxQkEsRUFBSyxzQ0FBdUNBLENBQUksQ0FBQyxFQUMvRixLQUFLLFdBQVcsQ0FBQyxHQUFJLEtBQUssS0FBSyxLQUFNLFlBQWFBLEVBQUssS0FBSyxDQUFDLEVBQzdELGVBQ1FBLEVBQUssU0FBVyxnQkFBa0JBLEVBQUssU0FBVyxRQUFRLENBQ2xFLEtBQUssSUFBSSxRQUFTLElBQU0sQ0FBQywyREFBNERBLENBQUksQ0FBQyxFQUMxRixLQUFLLFdBQVcsQ0FBQyxHQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsRUFDcEMsT0FNRixJQUpHQSxFQUFLLFVBQVlBLEVBQUssaUJBQ3ZCLEtBQUssWUFBYyxHQUNuQixLQUFLLFFBQVEsTUFBTSxHQUVsQkEsRUFBSyxTQUFXLE9BQU8sS0FBSyxXQUFXQSxFQUFLLFFBQVEsRUFDdkQsR0FBR0EsRUFBSyxjQUFnQixPQUFPLEtBQUssZUFBZUEsRUFBSyxhQUFhLEVBRXJFLEdBREEsS0FBSyxJQUFJLFFBQVMsSUFBTSxDQUFDLGlCQUFrQkEsQ0FBSSxDQUFDLEVBQzdDLEtBQUssT0FBTyxFQUNiLEtBQUssYUFBYSxDQUFDM0csR0FBbUJDLEdBQWlCRSxFQUFzQixDQUFDLEVBQzNFLEtBQUssV0FBVyxZQUFZLEdBQUksS0FBSyxXQUFXLGlCQUFpQixJQUFJLE1BQ25FLENBQ0YsS0FBSyxjQUFnQm9DLEtBRXRCLEtBQUssS0FBSyxhQUFhLENBQUN2QyxHQUFtQkMsR0FBaUJFLEVBQXNCLENBQUMsRUFDbkYsS0FBSyxJQUFJLFFBQVMsSUFBTSxDQUFDLG1DQUFtQ29DLFdBQWlDb0UsQ0FBSSxDQUFDLEVBQ2xHLEtBQUssUUFBUSxHQUVmLElBQUk4Z0IsRUFBYzVaLEVBQUksS0FBSyxLQUFLLEdBQUcsRUFBRSxFQUNsQzRaLEdBQ0Q1WixFQUFJLFdBQVc0WixFQUFhLEtBQUssRUFBRSxFQUNuQyxLQUFLLGFBQWEsQ0FBQ3puQixHQUFtQkMsR0FBaUJFLEVBQXNCLENBQUMsRUFDOUUsS0FBSyxHQUFLc25CLEdBRVYsS0FBSyxRQUFRLEVBR25CLENBRUEsUUFBUTFqQixFQUFPLENBQ2IsR0FBRyxNQUFLLFlBQVksRUFDcEIsSUFBRyxLQUFLLE9BQU8sR0FBSyxLQUFLLFdBQVcsZUFBZSxHQUFLQSxJQUFXLFFBQ2pFLE9BQU8sS0FBSyxXQUFXLGlCQUFpQixJQUFJLEVBRTlDLEtBQUssbUJBQW1CLEVBQ3hCLEtBQUssV0FBVyxrQkFBa0IsSUFBSSxFQUVuQyxTQUFTLGVBQWdCLFNBQVMsY0FBYyxLQUFLLEVBQ3JELEtBQUssV0FBVyxXQUFXLEdBQzVCLEtBQUssV0FBV3ZCLEVBQTRCLEVBRWhELENBRUEsUUFBUXVCLEVBQU8sQ0FDYixLQUFLLFFBQVFBLENBQU0sRUFDaEIsS0FBSyxXQUFXLFlBQVksR0FBSSxLQUFLLElBQUksUUFBUyxJQUFNLENBQUMsZUFBZ0JBLENBQU0sQ0FBQyxFQUMvRSxLQUFLLFdBQVcsV0FBVyxJQUMxQixLQUFLLFdBQVcsWUFBWSxFQUM3QixLQUFLLGFBQWEsQ0FBQy9ELEdBQW1CQyxHQUFpQkUsRUFBc0IsQ0FBQyxFQUU5RSxLQUFLLGFBQWEsQ0FBQ0gsR0FBbUJDLEdBQWlCQyxFQUFzQixDQUFDLEVBR3BGLENBRUEsYUFBYXNQLEVBQVEsQ0FDaEIsS0FBSyxPQUFPLEdBQUkzQixFQUFJLGNBQWMsT0FBUSx5QkFBMEIsQ0FBQyxPQUFRLENBQUMsR0FBSSxLQUFLLEtBQU0sS0FBTSxPQUFPLENBQUMsQ0FBQyxFQUMvRyxLQUFLLFdBQVcsRUFDaEIsS0FBSyxvQkFBb0IsR0FBRzJCLENBQU8sRUFDbkMsS0FBSyxRQUFRLEtBQUssUUFBUSxjQUFjLENBQUMsQ0FDM0MsQ0FFQSxTQUFTa1ksRUFBWUMsRUFBUyxDQUM1QixJQUFJQyxFQUFVLEtBQUssV0FBVyxjQUFjLEVBQ3hDQyxFQUFjRCxFQUNmTixHQUFPLFdBQVcsSUFBTSxDQUFDLEtBQUssWUFBWSxHQUFLQSxFQUFHLEVBQUdNLENBQU8sRUFDNUROLEdBQU8sQ0FBQyxLQUFLLFlBQVksR0FBS0EsRUFBRyxFQUVwQ08sRUFBWSxJQUFNLENBQ2hCSCxFQUFXLEVBQ1IsUUFBUSxLQUFNL2dCLEdBQVFraEIsRUFBWSxJQUFNRixFQUFTLElBQU1BLEVBQVMsR0FBR2hoQixDQUFJLENBQUMsQ0FBQyxFQUN6RSxRQUFRLFFBQVM1QyxHQUFVOGpCLEVBQVksSUFBTUYsRUFBUyxPQUFTQSxFQUFTLE1BQU01akIsQ0FBTSxDQUFDLENBQUMsRUFDdEYsUUFBUSxVQUFXLElBQU04akIsRUFBWSxJQUFNRixFQUFTLFNBQVdBLEVBQVMsUUFBUSxDQUFDLENBQUMsQ0FDdkYsQ0FBQyxDQUNILENBRUEsY0FBY0csRUFBY25kLEVBQU84WSxFQUFRLENBQ3pDLEdBQUcsQ0FBQyxLQUFLLFlBQVksRUFBSSxPQUFPLFFBQVEsT0FBTyxDQUFDLE1BQU8sY0FBYyxDQUFDLEVBRXRFLEdBQUksQ0FBQ2hWLEVBQUssQ0FBQzVJLENBQUUsRUFBR21HLENBQUksRUFBSThiLEVBQWVBLEVBQWEsRUFBSSxDQUFDLEtBQU0sQ0FBQyxFQUFHLENBQUMsQ0FBQyxFQUNqRUMsRUFBZSxLQUFLLFVBQ3BCQyxFQUFnQixVQUFVLENBQUMsRUFDL0IsT0FBR2hjLEVBQUssZUFDTmdjLEVBQWdCLEtBQUssV0FBVyxnQkFBZ0IsQ0FBQyxLQUFNLFVBQVcsT0FBUW5pQixDQUFFLENBQUMsR0FHNUUsT0FBUTRkLEVBQVEsS0FBUyxVQUFXLE9BQU9BLEVBQVEsSUFFL0MsSUFBSSxRQUFRLENBQUNFLEVBQVNDLElBQVcsQ0FDdEMsS0FBSyxTQUFTLElBQU0sS0FBSyxRQUFRLEtBQUtqWixFQUFPOFksRUFBUy9nQixFQUFZLEVBQUcsQ0FDbkUsR0FBS2lFLEdBQVMsQ0FDVDhILElBQVEsT0FBTyxLQUFLLFdBQWFBLEdBQ3BDLElBQUl3WixFQUFVQyxHQUFjLENBQ3ZCdmhCLEVBQUssVUFBVyxLQUFLLFdBQVdBLEVBQUssUUFBUSxFQUM3Q0EsRUFBSyxZQUFhLEtBQUssWUFBWUEsRUFBSyxVQUFVLEVBQ2xEQSxFQUFLLGVBQWdCLEtBQUssZUFBZUEsRUFBSyxhQUFhLEVBQzlEcWhCLEVBQWMsRUFDZHJFLEVBQVEsQ0FBQyxLQUFBaGQsRUFBWSxNQUFPdWhCLENBQVMsQ0FBQyxDQUN4QyxFQUNHdmhCLEVBQUssS0FDTixLQUFLLFdBQVcsaUJBQWlCLElBQU0sQ0FDckMsS0FBSyxVQUFVLFNBQVVBLEVBQUssS0FBTSxDQUFDLENBQUMsS0FBQXVWLEVBQU0sTUFBQUMsRUFBTyxPQUFBQyxDQUFNLElBQU0sQ0FDMUQzTixJQUFRLE1BQ1QsS0FBSyxTQUFTQSxFQUFLZ1YsRUFBUSxLQUFLLEVBRWxDLEtBQUssT0FBT3ZILEVBQU1FLENBQU0sRUFDeEI2TCxFQUFPOUwsQ0FBSyxDQUNkLENBQUMsQ0FDSCxDQUFDLEdBRUUxTixJQUFRLE1BQU8sS0FBSyxTQUFTQSxFQUFLZ1YsRUFBUSxLQUFLLEVBQ2xEd0UsRUFBTyxJQUFJLEVBRWYsRUFDQSxNQUFRbGtCLEdBQVc2ZixFQUFPLENBQUMsTUFBTzdmLENBQU0sQ0FBQyxFQUN6QyxRQUFTLElBQU0sQ0FDYjZmLEVBQU8sQ0FBQyxRQUFTLEVBQUksQ0FBQyxFQUNuQixLQUFLLFlBQWNtRSxHQUNwQixLQUFLLFdBQVcsaUJBQWlCLEtBQU0sSUFBTSxDQUMzQyxLQUFLLElBQUksVUFBVyxJQUFNLENBQUMsNkZBQTZGLENBQUMsQ0FDM0gsQ0FBQyxDQUVMLENBQ0YsQ0FBQyxDQUNILENBQUMsQ0FDSCxDQUVBLFNBQVN0WixFQUFLdUQsRUFBVW1XLEVBQVEsQ0FDOUIsR0FBRyxDQUFDLEtBQUssWUFBWSxFQUFJLE9BQ3pCLElBQUlDLEVBQVcsSUFBSWpwQixPQUFnQixLQUFLLE9BQU8sTUFFNUNncEIsR0FDREEsRUFBVSxJQUFJLElBQUlBLENBQU8sRUFDekJ0YSxFQUFJLElBQUksU0FBVXVhLEVBQVUzZSxHQUFVLENBQ2pDMGUsR0FBVyxDQUFDQSxFQUFRLElBQUkxZSxDQUFNLElBRWpDb0UsRUFBSSxJQUFJcEUsRUFBUTJlLEVBQVUxWSxHQUFTLEtBQUssVUFBVUEsRUFBT2pCLEVBQUt1RCxDQUFRLENBQUMsRUFDdkUsS0FBSyxVQUFVdkksRUFBUWdGLEVBQUt1RCxDQUFRLEVBQ3RDLENBQUMsR0FFRG5FLEVBQUksSUFBSSxTQUFVdWEsRUFBVXZpQixHQUFNLEtBQUssVUFBVUEsRUFBSTRJLEVBQUt1RCxDQUFRLENBQUMsQ0FFdkUsQ0FFQSxVQUFVbk0sRUFBSTRJLEVBQUt1RCxFQUFTLENBQ2QsSUFBSUYsR0FBV2pNLENBQUUsRUFFdkIsVUFBVTRJLEVBQUt1RCxFQUFVRSxHQUFjLENBRzNDLElBQUk2VCxFQUFRLElBQUkvTSxHQUFTLEtBQU1uVCxFQUFJLEtBQUssR0FBSXFNLEVBQVksQ0FBQyxFQUFHLEtBQU0sQ0FBQyxRQUFTekQsQ0FBRyxDQUFDLEVBQzFFNFgsRUFBbUIsS0FBSyxhQUFhTixFQUFPLEVBQUksRUFDdERsWSxFQUFJLElBQUloSSxFQUFJLElBQUkxRyxPQUFnQixLQUFLLE9BQU8sTUFBT3VRLEdBQVMsS0FBSyxVQUFVQSxFQUFPakIsRUFBS3VELENBQVEsQ0FBQyxFQUM3RnFVLEdBQW1CLEtBQUssZ0JBQWdCLENBQzdDLENBQUMsQ0FDSCxDQUVBLFFBQVEsQ0FBRSxPQUFPLEtBQUssR0FBRyxFQUFHLENBRTVCLE9BQU8zQixFQUFVMVMsRUFBVThNLEVBQVc5UyxFQUFPLENBQUMsRUFBRSxDQUM5QyxJQUFJcWMsRUFBUyxLQUFLLE1BQ2RDLEVBQWMsS0FBSyxRQUFRbG5CLEVBQWdCLEVBQy9DLEdBQUc0SyxFQUFLLFFBQVEsQ0FDZCxJQUFJdWMsRUFBYTFhLEVBQUksSUFBSSxTQUFVN0IsRUFBSyxPQUFPLEVBQUUsSUFBSW5HLElBQzVDLENBQUMsR0FBQUEsRUFBSSxLQUFNLEdBQU0sUUFBUyxFQUFJLEVBQ3RDLEVBQ0Q2ZSxFQUFXQSxFQUFTLE9BQU82RCxDQUFVLEVBR3ZDLE9BQVEsQ0FBQyxHQUFBMWlCLEVBQUksS0FBQTJpQixFQUFNLFFBQUE5SSxDQUFPLElBQUtnRixFQUFTLENBQ3RDLEdBQUcsQ0FBQzhELEdBQVEsQ0FBQzlJLEVBQVUsTUFBTSxJQUFJLE1BQU0saUNBQWlDLEVBS3hFLEdBSkE3WixFQUFHLGFBQWExRyxHQUFhLEtBQUssT0FBTyxDQUFDLEVBQ3ZDdWdCLEdBQVU3WixFQUFHLGFBQWEzRyxHQUFpQm1wQixDQUFNLEVBQ2pERyxHQUFPM2lCLEVBQUcsYUFBYXpHLEdBQWNpcEIsQ0FBTSxFQUUzQyxDQUFDM0ksR0FBWTFULEVBQUssV0FBYSxFQUFFbkcsSUFBT21HLEVBQUssV0FBYW5HLElBQU9tRyxFQUFLLE1BQVMsU0FFbEYsSUFBSXljLEVBQXNCLElBQUksUUFBUTlFLEdBQVcsQ0FDL0M5ZCxFQUFHLGlCQUFpQixpQkFBaUJ3aUIsSUFBVSxJQUFNMUUsRUFBUXJFLENBQU0sRUFBRyxDQUFDLEtBQU0sRUFBSSxDQUFDLENBQ3BGLENBQUMsRUFFR29KLEVBQXlCLElBQUksUUFBUS9FLEdBQVcsQ0FDbEQ5ZCxFQUFHLGlCQUFpQixvQkFBb0J3aUIsSUFBVSxJQUFNMUUsRUFBUXJFLENBQU0sRUFBRyxDQUFDLEtBQU0sRUFBSSxDQUFDLENBQ3ZGLENBQUMsRUFFRHpaLEVBQUcsVUFBVSxJQUFJLE9BQU9pWixXQUFtQixFQUMzQyxJQUFJNkosRUFBYzlpQixFQUFHLGFBQWF5aUIsQ0FBVyxFQUMxQ0ssSUFBZ0IsT0FDYjlpQixFQUFHLGFBQWF4RSxFQUF3QixHQUMxQ3dFLEVBQUcsYUFBYXhFLEdBQTBCd0UsRUFBRyxTQUFTLEVBRXJEOGlCLElBQWdCLEtBQUs5aUIsRUFBRyxVQUFZOGlCLEdBRXZDOWlCLEVBQUcsYUFBYTFFLEdBQWMwRSxFQUFHLGFBQWExRSxFQUFZLEdBQUswRSxFQUFHLFFBQVEsRUFDMUVBLEVBQUcsYUFBYSxXQUFZLEVBQUUsR0FHaEMsSUFBSXlaLEVBQVMsQ0FDWCxNQUFPdE4sRUFDUCxVQUFBOE0sRUFDQSxJQUFLdUosRUFDTCxVQUFXM0ksRUFDWCxTQUFVOEksRUFDVixhQUFjOUQsRUFBUyxPQUFPLENBQUMsQ0FBQyxLQUFBOEQsQ0FBSSxJQUFNQSxDQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBQTNpQixDQUFFLElBQU1BLENBQUUsRUFDaEUsZ0JBQWlCNmUsRUFBUyxPQUFPLENBQUMsQ0FBQyxRQUFBaEYsQ0FBTyxJQUFNQSxDQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBQTdaLENBQUUsSUFBTUEsQ0FBRSxFQUN6RSxPQUFTMGdCLEdBQVEsQ0FDZkEsRUFBTSxNQUFNLFFBQVFBLENBQUcsRUFBSUEsRUFBTSxDQUFDQSxDQUFHLEVBQ3JDLEtBQUssU0FBUzhCLEVBQVFyVyxFQUFVdVUsQ0FBRyxDQUNyQyxFQUNBLGFBQWNrQyxFQUNkLGdCQUFpQkMsRUFDakIsS0FBT0UsR0FDRSxJQUFJLFFBQVFqRixHQUFXLENBQzVCLEdBQUcsS0FBSyxRQUFRMEUsQ0FBTSxFQUFJLE9BQU8xRSxFQUFRckUsQ0FBTSxFQUMvQ3NKLEVBQU8sYUFBYXhwQixHQUFjaXBCLENBQU0sRUFDeENPLEVBQU8sYUFBYXpwQixHQUFhLEtBQUssT0FBTyxDQUFDLEVBQzlDeXBCLEVBQU8saUJBQWlCLGlCQUFpQlAsSUFBVSxJQUFNMUUsRUFBUXJFLENBQU0sRUFBRyxDQUFDLEtBQU0sRUFBSSxDQUFDLENBQ3hGLENBQUMsQ0FFTCxFQUNBelosRUFBRyxjQUFjLElBQUksWUFBWSxXQUFZLENBQzNDLE9BQUF5WixFQUNBLFFBQVMsR0FDVCxXQUFZLEVBQ2QsQ0FBQyxDQUFDLEVBQ0N0TixHQUNEbk0sRUFBRyxjQUFjLElBQUksWUFBWSxZQUFZbU0sSUFBWSxDQUN2RCxPQUFBc04sRUFDQSxRQUFTLEdBQ1QsV0FBWSxFQUNkLENBQUMsQ0FBQyxFQUdOLE1BQU8sQ0FBQytJLEVBQVEzRCxFQUFTLElBQUksQ0FBQyxDQUFDLEdBQUE3ZSxDQUFFLElBQU1BLENBQUUsRUFBR21HLENBQUksQ0FDbEQsQ0FFQSxRQUFReUMsRUFBSSxDQUFFLE9BQU8sS0FBSyxhQUFlLE1BQVEsS0FBSyxZQUFjQSxDQUFJLENBRXhFLFlBQVk1SSxFQUFHLENBQ2IsSUFBSXBCLEVBQU1vQixFQUFHLGNBQWdCQSxFQUFHLGFBQWEvRyxFQUFhLEVBQzFELE9BQU8yRixFQUFNLFNBQVNBLENBQUcsRUFBSSxJQUMvQixDQUVBLGtCQUFrQjBGLEVBQVE4VixFQUFXalUsRUFBTyxDQUFDLEVBQUUsQ0FDN0MsR0FBR3hILEdBQU15YixDQUFTLEVBQUksT0FBT0EsRUFFN0IsSUFBSTRJLEVBQWdCN2MsRUFBSyxRQUFVN0IsRUFBTyxhQUFhLEtBQUssUUFBUSxRQUFRLENBQUMsRUFDN0UsT0FBRzNGLEdBQU1xa0IsQ0FBYSxFQUNiLFNBQVNBLENBQWEsRUFDckI1SSxJQUFjNEksSUFBa0IsTUFBUTdjLEVBQUssUUFDOUMsS0FBSyxtQkFBbUJpVSxDQUFTLEVBRWpDLElBRVgsQ0FFQSxtQkFBbUJBLEVBQVUsQ0FDM0IsT0FBR3piLEdBQU15YixDQUFTLEVBQ1RBLEVBQ0NBLEVBQ0QzWixHQUFNMlosRUFBVSxRQUFRLElBQUluaEIsS0FBZ0IsRUFBRytHLEdBQU0sS0FBSyxZQUFZQSxDQUFFLEdBQUssS0FBSyxZQUFZQSxDQUFFLENBQUMsRUFFakcsSUFFWCxDQUVBLGNBQWNBLEVBQUlvYSxFQUFXdFYsRUFBTzhZLEVBQVNDLEVBQVEsQ0FDbkQsR0FBRyxDQUFDLEtBQUssWUFBWSxFQUNuQixZQUFLLElBQUksT0FBUSxJQUFNLENBQUMsb0RBQXFEL1ksRUFBTzhZLENBQU8sQ0FBQyxFQUNyRixHQUVULEdBQUksQ0FBQ2hWLEVBQUs4WCxFQUFLdmEsQ0FBSSxFQUFJLEtBQUssT0FBTyxDQUFDLENBQUMsR0FBQW5HLEVBQUksUUFBUyxHQUFNLEtBQU0sRUFBSSxDQUFDLEVBQUc4RSxFQUFPLE1BQU0sRUFDbkYsWUFBSyxjQUFjLElBQU0sQ0FBQzhELEVBQUs4WCxFQUFLdmEsQ0FBSSxFQUFHLFFBQVMsQ0FDbEQsS0FBTSxPQUNOLE1BQUFyQixFQUNBLE1BQU84WSxFQUNQLElBQUssS0FBSyxtQkFBbUJ4RCxDQUFTLENBQ3hDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxLQUFNNkksRUFBTyxNQUFPWixDQUFTLElBQU14RSxFQUFRd0UsRUFBV3paLENBQUcsQ0FBQyxFQUU3REEsQ0FDVCxDQUVBLFlBQVk1SSxFQUFJd0IsRUFBTUssRUFBTSxDQUMxQixJQUFJNkMsRUFBUyxLQUFLLFFBQVEsUUFBUSxFQUNsQyxRQUFRekYsRUFBSSxFQUFHQSxFQUFJZSxFQUFHLFdBQVcsT0FBUWYsSUFBSSxDQUN2Q3VDLElBQU9BLEVBQU8sQ0FBQyxHQUNuQixJQUFJSSxFQUFPNUIsRUFBRyxXQUFXZixDQUFDLEVBQUUsS0FDekIyQyxFQUFLLFdBQVc4QyxDQUFNLElBQUlsRCxFQUFLSSxFQUFLLFFBQVE4QyxFQUFRLEVBQUUsQ0FBQyxFQUFJMUUsRUFBRyxhQUFhNEIsQ0FBSSxHQVVwRixHQVJHNUIsRUFBRyxRQUFVLFFBQWEsRUFBRUEsYUFBYyxtQkFDdkN3QixJQUFPQSxFQUFPLENBQUMsR0FDbkJBLEVBQUssTUFBUXhCLEVBQUcsTUFFYkEsRUFBRyxVQUFZLFNBQVdqRixHQUFpQixRQUFRaUYsRUFBRyxJQUFJLEdBQUssR0FBSyxDQUFDQSxFQUFHLFNBQ3pFLE9BQU93QixFQUFLLE9BR2JLLEVBQU0sQ0FDSEwsSUFBT0EsRUFBTyxDQUFDLEdBQ25CLFFBQVFGLEtBQU9PLEVBQVFMLEVBQUtGLENBQUcsRUFBSU8sRUFBTVAsQ0FBRyxFQUU5QyxPQUFPRSxDQUNULENBRUEsVUFBVTNDLEVBQU1tQixFQUFJb2EsRUFBV2pPLEVBQVUzSyxFQUFNMkUsRUFBTyxDQUFDLEVBQUcwWCxFQUFRLENBQ2hFLEtBQUssY0FBYyxJQUFNLEtBQUssT0FBTyxDQUFDLENBQUMsR0FBQTdkLEVBQUksUUFBUyxHQUFNLEtBQU0sRUFBSSxDQUFDLEVBQUdtTSxFQUFVdE4sRUFBTXNILENBQUksRUFBRyxRQUFTLENBQ3RHLEtBQUF0SCxFQUNBLE1BQU9zTixFQUNQLE1BQU8sS0FBSyxZQUFZbk0sRUFBSXdCLEVBQU0yRSxFQUFLLEtBQUssRUFDNUMsSUFBSyxLQUFLLGtCQUFrQm5HLEVBQUlvYSxFQUFXalUsQ0FBSSxDQUNqRCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsTUFBQW1RLENBQUssSUFBTXVILEdBQVdBLEVBQVF2SCxDQUFLLENBQUMsQ0FDaEQsQ0FFQSxpQkFBaUJwTyxFQUFRZ2IsRUFBVTFhLEVBQVVxVixFQUFVLFVBQVcsQ0FBRSxFQUFFLENBQ3BFLEtBQUssV0FBVyxhQUFhM1YsRUFBTyxLQUFNLENBQUN4SSxFQUFNMGEsSUFBYyxDQUM3RDFhLEVBQUssY0FBYyxLQUFNLFdBQVksQ0FDbkMsTUFBT3dJLEVBQU8sYUFBYXhJLEVBQUssUUFBUXBELEVBQVksQ0FBQyxFQUNyRCxJQUFLNEwsRUFBTyxhQUFhek8sRUFBYyxFQUN2QyxVQUFXeXBCLEVBQ1gsU0FBQTFhLEVBQ0EsSUFBSzlJLEVBQUssa0JBQWtCd0ksRUFBTyxLQUFNa1MsQ0FBUyxDQUNwRCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBQXRaLENBQUksSUFBTStjLEVBQVEvYyxDQUFJLENBQUMsQ0FDbkMsQ0FBQyxDQUNILENBRUEsVUFBVThCLEVBQVN3WCxFQUFXK0ksRUFBVWhYLEVBQVVoRyxFQUFNekYsRUFBUyxDQUMvRCxHQUFHLENBQUNrQyxFQUFRLEtBQ1YsTUFBTSxJQUFJLE1BQU0sbURBQW1ELEVBR3JFLElBQUl3Z0IsRUFDQXhrQixFQUFNRCxHQUFNd2tCLENBQVEsRUFBSUEsRUFBVyxLQUFLLGtCQUFrQnZnQixFQUFRLEtBQU13WCxFQUFXalUsQ0FBSSxFQUN2RjhiLEVBQWUsSUFDVixLQUFLLE9BQU8sQ0FDakIsQ0FBQyxHQUFJcmYsRUFBUyxRQUFTLEdBQU0sS0FBTSxFQUFJLEVBQ3ZDLENBQUMsR0FBSUEsRUFBUSxLQUFNLFFBQVMsR0FBTSxLQUFNLEVBQUksQ0FDOUMsRUFBR3VKLEVBQVUsU0FBVWhHLENBQUksRUFFekJ1WSxFQUNBbGQsRUFBUSxLQUFLLFlBQVlvQixFQUFRLElBQUksRUFDdENBLGFBQW1CLG9CQUFvQnBCLEVBQUssVUFBWW9CLEdBQ3hEQSxFQUFRLGFBQWEsS0FBSyxRQUFRLFFBQVEsQ0FBQyxFQUM1QzhiLEVBQVdKLEdBQWMxYixFQUFRLEtBQU0sQ0FBQyxRQUFTdUQsRUFBSyxRQUFTLEdBQUczRSxDQUFJLEVBQUcsQ0FBQ29CLEVBQVEsSUFBSSxDQUFDLEVBRXZGOGIsRUFBV0osR0FBYzFiLEVBQVEsS0FBTSxDQUFDLFFBQVN1RCxFQUFLLFFBQVMsR0FBRzNFLENBQUksQ0FBQyxFQUV0RXdHLEVBQUksY0FBY3BGLENBQU8sR0FBS0EsRUFBUSxPQUFTQSxFQUFRLE1BQU0sT0FBUyxHQUN2RTBGLEdBQWEsV0FBVzFGLEVBQVMsTUFBTSxLQUFLQSxFQUFRLEtBQUssQ0FBQyxFQUU1RHdnQixFQUFVOWEsR0FBYSxpQkFBaUIxRixDQUFPLEVBRS9DLElBQUlrQyxFQUFRLENBQ1YsS0FBTSxPQUNOLE1BQU9xSCxFQUNQLE1BQU91UyxFQUNQLFFBQUEwRSxFQUNBLElBQUF4a0IsQ0FDRixFQUNBLEtBQUssY0FBY3FqQixFQUFjLFFBQVNuZCxDQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBQWhFLENBQUksSUFBTSxDQUM3RGtILEVBQUksY0FBY3BGLENBQU8sR0FBS29GLEVBQUksYUFBYXBGLENBQU8sRUFJdkRxSixHQUFXLFNBQVNySixFQUFTLElBQU0sQ0FDakMsR0FBRzBGLEdBQWEsdUJBQXVCMUYsQ0FBTyxFQUFFLE9BQVMsRUFBRSxDQUN6RCxHQUFJLENBQUNnRyxFQUFLeWEsQ0FBSSxFQUFJcEIsRUFBYSxFQUMvQixLQUFLLFNBQVNyWixFQUFLdUQsRUFBVSxDQUFDdkosRUFBUSxJQUFJLENBQUMsRUFDM0MsS0FBSyxZQUFZQSxFQUFRLEtBQU11SixFQUFVaU8sRUFBV3hSLEVBQUtoSyxFQUFNMGtCLEdBQWEsQ0FDMUU1aUIsR0FBWUEsRUFBU0ksQ0FBSSxFQUN6QixLQUFLLHNCQUFzQjhCLEVBQVEsS0FBTXVKLENBQVEsRUFDakQsS0FBSyxTQUFTdkQsRUFBS3VELENBQVEsQ0FDN0IsQ0FBQyxFQUVMLENBQUMsRUFFRHpMLEdBQVlBLEVBQVNJLENBQUksQ0FFN0IsQ0FBQyxDQUNILENBRUEsc0JBQXNCK0gsRUFBUXNELEVBQVMsQ0FDckMsSUFBSW9YLEVBQWlCLEtBQUssbUJBQW1CMWEsQ0FBTSxFQUNuRCxHQUFHMGEsRUFBZSxDQUNoQixHQUFJLENBQUMxSSxFQUFLcEMsRUFBTStLLEVBQU85aUIsQ0FBUSxFQUFJNmlCLEVBQ25DLEtBQUssYUFBYTFhLEVBQVFzRCxDQUFRLEVBQ2xDekwsRUFBUyxFQUViLENBRUEsbUJBQW1CbUksRUFBTyxDQUN4QixPQUFPLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQzdJLEVBQUl5WSxFQUFNK0ssRUFBT0MsQ0FBUyxJQUFNempCLEVBQUcsV0FBVzZJLENBQU0sQ0FBQyxDQUN0RixDQUVBLGVBQWVBLEVBQVFELEVBQUt6QyxFQUFNekYsRUFBUyxDQUN6QyxHQUFHLEtBQUssbUJBQW1CbUksQ0FBTSxFQUFJLE1BQU8sR0FDNUMsS0FBSyxZQUFZLEtBQUssQ0FBQ0EsRUFBUUQsRUFBS3pDLEVBQU16RixDQUFRLENBQUMsQ0FDckQsQ0FFQSxhQUFhbUksRUFBUXNELEVBQVMsQ0FDNUIsS0FBSyxZQUFjLEtBQUssWUFBWSxPQUFPLENBQUMsQ0FBQ25NLEVBQUk0SSxFQUFLNGEsRUFBT0MsQ0FBUyxJQUNqRXpqQixFQUFHLFdBQVc2SSxDQUFNLEdBQ3JCLEtBQUssU0FBU0QsRUFBS3VELENBQVEsRUFDcEIsSUFFQSxFQUVWLENBQ0gsQ0FFQSxZQUFZdEQsRUFBUXNELEVBQVVoRyxFQUFPLENBQUMsRUFBRSxDQUN0QyxJQUFJdWQsRUFBZ0IxakIsR0FFWCxFQURXRCxHQUFrQkMsRUFBSSxHQUFHLEtBQUssUUFBUXBFLEVBQVUsV0FBWW9FLEVBQUcsSUFBSSxHQUM3REQsR0FBa0JDLEVBQUkseUJBQTBCQSxFQUFHLElBQUksR0FFN0UyakIsRUFBaUIzakIsR0FDWkEsRUFBRyxhQUFhLEtBQUssUUFBUXpFLEVBQWdCLENBQUMsRUFFbkRxb0IsRUFBZTVqQixHQUFNQSxFQUFHLFNBQVcsU0FFbkM2akIsRUFBYzdqQixHQUFNLENBQUMsUUFBUyxXQUFZLFFBQVEsRUFBRSxTQUFTQSxFQUFHLE9BQU8sRUFFdkU4akIsRUFBZSxNQUFNLEtBQUtqYixFQUFPLFFBQVEsRUFDekNrYixFQUFXRCxFQUFhLE9BQU9ILENBQWMsRUFDN0NLLEVBQVVGLEVBQWEsT0FBT0YsQ0FBWSxFQUFFLE9BQU9GLENBQWEsRUFDaEU1RSxFQUFTZ0YsRUFBYSxPQUFPRCxDQUFXLEVBQUUsT0FBT0gsQ0FBYSxFQUVsRU0sRUFBUSxRQUFRQyxHQUFVLENBQ3hCQSxFQUFPLGFBQWEzb0IsR0FBYzJvQixFQUFPLFFBQVEsRUFDakRBLEVBQU8sU0FBVyxFQUNwQixDQUFDLEVBQ0RuRixFQUFPLFFBQVFqWixHQUFTLENBQ3RCQSxFQUFNLGFBQWF4SyxHQUFjd0ssRUFBTSxRQUFRLEVBQy9DQSxFQUFNLFNBQVcsR0FDZEEsRUFBTSxRQUNQQSxFQUFNLGFBQWF2SyxHQUFjdUssRUFBTSxRQUFRLEVBQy9DQSxFQUFNLFNBQVcsR0FFckIsQ0FBQyxFQUNELElBQUlxZSxFQUFVSCxFQUFTLE9BQU9DLENBQU8sRUFBRSxPQUFPbEYsQ0FBTSxFQUFFLElBQUk5ZSxJQUNqRCxDQUFDLEdBQUFBLEVBQUksUUFBUyxHQUFNLEtBQU0sRUFBSSxFQUN0QyxFQUlHMGdCLEVBQU0sQ0FBQyxDQUFDLEdBQUk3WCxFQUFRLFFBQVMsR0FBTSxLQUFNLEVBQUssQ0FBQyxFQUFFLE9BQU9xYixDQUFPLEVBQUUsUUFBUSxFQUM3RSxPQUFPLEtBQUssT0FBT3hELEVBQUt2VSxFQUFVLFNBQVVoRyxDQUFJLENBQ2xELENBRUEsZUFBZTBDLEVBQVF1UixFQUFXak8sRUFBVW9PLEVBQVdwVSxFQUFNMFgsRUFBUSxDQUNuRSxJQUFJb0UsRUFBZSxJQUFNLEtBQUssWUFBWXBaLEVBQVFzRCxFQUFVLENBQzFELEdBQUdoRyxFQUNILEtBQU0wQyxFQUNOLFVBQUEwUixDQUNGLENBQUMsRUFDRzNiLEVBQU0sS0FBSyxrQkFBa0JpSyxFQUFRdVIsQ0FBUyxFQUNsRCxHQUFHOVIsR0FBYSxxQkFBcUJPLENBQU0sRUFBRSxDQUMzQyxHQUFJLENBQUNELEVBQUt5YSxDQUFJLEVBQUlwQixFQUFhLEVBQzNCa0MsRUFBTyxJQUFNLEtBQUssZUFBZXRiLEVBQVF1UixFQUFXak8sRUFBVW9PLEVBQVdwVSxFQUFNMFgsQ0FBTyxFQUMxRixPQUFPLEtBQUssZUFBZWhWLEVBQVFELEVBQUt6QyxFQUFNZ2UsQ0FBSSxVQUMxQzdiLEdBQWEsd0JBQXdCTyxDQUFNLEVBQUUsT0FBUyxFQUFFLENBQ2hFLEdBQUksQ0FBQ0QsRUFBSzhYLENBQUcsRUFBSXVCLEVBQWEsRUFDMUJtQyxFQUFjLElBQU0sQ0FBQ3hiLEVBQUs4WCxFQUFLdmEsQ0FBSSxFQUN2QyxLQUFLLFlBQVkwQyxFQUFRc0QsRUFBVWlPLEVBQVd4UixFQUFLaEssRUFBTTBrQixHQUFhLENBR3BFLEdBQUdoYixHQUFhLHdCQUF3Qk8sQ0FBTSxFQUFFLE9BQVMsRUFDdkQsT0FBTyxLQUFLLFNBQVNELEVBQUt1RCxDQUFRLEVBRXBDLElBQUkzSyxFQUFPLEtBQUssWUFBWXFILENBQU0sRUFDOUI2VixFQUFXSixHQUFjelYsRUFBUSxDQUFDLFVBQUEwUixFQUFXLEdBQUcvWSxDQUFJLENBQUMsRUFDekQsS0FBSyxjQUFjNGlCLEVBQWEsUUFBUyxDQUN2QyxLQUFNLE9BQ04sTUFBT2pZLEVBQ1AsTUFBT3VTLEVBQ1AsSUFBQTlmLENBQ0YsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUFrQyxDQUFJLElBQU0rYyxFQUFRL2MsQ0FBSSxDQUFDLENBQ25DLENBQUMsVUFDTyxFQUFFK0gsRUFBTyxhQUFhdlAsRUFBVyxHQUFLdVAsRUFBTyxVQUFVLFNBQVMsb0JBQW9CLEdBQUcsQ0FDL0YsSUFBSXJILEVBQU8sS0FBSyxZQUFZcUgsQ0FBTSxFQUM5QjZWLEVBQVdKLEdBQWN6VixFQUFRLENBQUMsVUFBQTBSLEVBQVcsR0FBRy9ZLENBQUksQ0FBQyxFQUN6RCxLQUFLLGNBQWN5Z0IsRUFBYyxRQUFTLENBQ3hDLEtBQU0sT0FDTixNQUFPOVYsRUFDUCxNQUFPdVMsRUFDUCxJQUFBOWYsQ0FDRixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBQWtDLENBQUksSUFBTStjLEVBQVEvYyxDQUFJLENBQUMsRUFFckMsQ0FFQSxZQUFZK0gsRUFBUXNELEVBQVVpTyxFQUFXeFIsRUFBS2hLLEVBQUswSyxFQUFXLENBQzVELElBQUkrYSxFQUFvQixLQUFLLFVBQ3pCQyxFQUFXaGMsR0FBYSxpQkFBaUJPLENBQU0sRUFDL0MwYixFQUEwQkQsRUFBUyxPQUd2Q0EsRUFBUyxRQUFRMWhCLEdBQVcsQ0FDMUIsSUFBSTRoQixFQUFXLElBQUlsYyxHQUFhMUYsRUFBUyxLQUFNLElBQU0sQ0FDbkQyaEIsSUFDR0EsSUFBNEIsR0FBSWpiLEVBQVcsQ0FDaEQsQ0FBQyxFQUVHMUksRUFBVTRqQixFQUFTLFFBQVEsRUFBRSxJQUFJM21CLEdBQVNBLEVBQU0sbUJBQW1CLENBQUMsRUFFeEUsR0FBRytDLEVBQVEsU0FBVyxFQUFFLENBQ3RCMmpCLElBQ0EsT0FHRixJQUFJM0csRUFBVSxDQUNaLElBQUtoYixFQUFRLGFBQWFuSixFQUFjLEVBQ3hDLFFBQUFtSCxFQUNBLElBQUssS0FBSyxrQkFBa0JnQyxFQUFRLEtBQU13WCxDQUFTLENBQ3JELEVBRUEsS0FBSyxJQUFJLFNBQVUsSUFBTSxDQUFDLDRCQUE2QndELENBQU8sQ0FBQyxFQUUvRCxLQUFLLGNBQWMsS0FBTSxlQUFnQkEsQ0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUE5YyxDQUFJLElBQU0sQ0FXakUsR0FWQSxLQUFLLElBQUksU0FBVSxJQUFNLENBQUMseUJBQTBCQSxDQUFJLENBQUMsRUFHekQwakIsRUFBUyxRQUFRLEVBQUUsUUFBUTNtQixHQUFTLENBQy9CaUQsRUFBSyxTQUFXLENBQUNBLEVBQUssUUFBUWpELEVBQU0sR0FBRyxHQUN4QyxLQUFLLDJCQUEyQkEsRUFBTSxJQUFLLG1CQUFvQjJtQixDQUFRLENBRTNFLENBQUMsRUFHRTFqQixFQUFLLE9BQVMsT0FBTyxLQUFLQSxFQUFLLE9BQU8sRUFBRSxTQUFXLEVBQ3BELEtBQUssU0FBUzhILEVBQUt1RCxDQUFRLEdBQ2RyTCxFQUFLLE9BQVMsQ0FBQyxHQUNyQixJQUFJLENBQUMsQ0FBQzJqQixFQUFXdm1CLENBQU0sSUFBTSxDQUNsQyxLQUFLLDJCQUEyQnVtQixFQUFXdm1CLEVBQVFzbUIsQ0FBUSxDQUM3RCxDQUFDLE1BQ0ksQ0FDTCxJQUFJM2pCLEVBQVdILEdBQWEsQ0FDMUIsS0FBSyxRQUFRLFFBQVEsSUFBTSxDQUN0QixLQUFLLFlBQWMyakIsR0FBb0IzakIsRUFBUyxDQUNyRCxDQUFDLENBQ0gsRUFDQThqQixFQUFTLGtCQUFrQjFqQixFQUFNRCxFQUFTLEtBQUssVUFBVSxFQUU3RCxDQUFDLENBQ0gsQ0FBQyxDQUNILENBRUEsMkJBQTJCb0ksRUFBVy9LLEVBQVFzbUIsRUFBUyxDQUNyRCxHQUFHQSxFQUFTLGFBQWEsRUFBRSxDQUV6QixJQUFJM21CLEVBQVEybUIsRUFBUyxRQUFRLEVBQUUsS0FBSzNtQixHQUFTQSxFQUFNLE1BQVFvTCxFQUFVLFNBQVMsQ0FBQyxFQUM1RXBMLEdBQVFBLEVBQU0sT0FBTyxPQUV4QjJtQixFQUFTLFFBQVEsRUFBRSxJQUFJM21CLEdBQVNBLEVBQU0sT0FBTyxDQUFDLEVBRWhELEtBQUssSUFBSSxTQUFVLElBQU0sQ0FBQyxtQkFBbUJvTCxJQUFhL0ssQ0FBTSxDQUFDLENBQ25FLENBRUEsZ0JBQWdCa2MsRUFBV3hZLEVBQU04aUIsRUFBYSxDQUM1QyxJQUFJQyxFQUFnQixLQUFLLGlCQUFpQnZLLENBQVMsR0FBSyxLQUFLLEdBQ3pEMEUsRUFBUzlXLEVBQUksaUJBQWlCMmMsQ0FBYSxFQUFFLE9BQU8za0IsR0FBTUEsRUFBRyxPQUFTNEIsQ0FBSSxFQUMzRWtkLEVBQU8sU0FBVyxFQUFJdmdCLEdBQVMsZ0RBQWdEcUQsSUFBTyxFQUNqRmtkLEVBQU8sT0FBUyxFQUFJdmdCLEdBQVMsdURBQXVEcUQsSUFBTyxFQUM1Rm9HLEVBQUksY0FBYzhXLEVBQU8sQ0FBQyxFQUFHdGxCLEdBQW1CLENBQUMsT0FBUSxDQUFDLE1BQU9rckIsQ0FBWSxDQUFDLENBQUMsQ0FDeEYsQ0FFQSxpQkFBaUJ0SyxFQUFVLENBQ3pCLEdBQUd6YixHQUFNeWIsQ0FBUyxFQUFFLENBQ2xCLEdBQUksQ0FBQzlWLENBQU0sRUFBSTBELEVBQUksc0JBQXNCLEtBQUssR0FBSW9TLENBQVMsRUFDM0QsT0FBTzlWLE1BQ1QsUUFBVThWLEdBR0QsSUFFWCxDQUVBLGlCQUFpQjhHLEVBQVNELEVBQVMyRCxFQUFhbGtCLEVBQVMsQ0FHdkQsSUFBTW1nQixFQUFZLEtBQUssUUFBUSxRQUFRLEVBQ2pDNUcsRUFBWWdILEVBQVEsYUFBYSxLQUFLLFFBQVEsUUFBUSxDQUFDLEdBQUtBLEVBQzVEOVUsRUFBVzhVLEVBQVEsYUFBYSxLQUFLLFFBQVFobEIsRUFBZ0IsQ0FBQyxHQUFLZ2xCLEVBQVEsYUFBYSxLQUFLLFFBQVEsUUFBUSxDQUFDLEVBQzlHbkMsRUFBUyxNQUFNLEtBQUtvQyxFQUFRLFFBQVEsRUFBRSxPQUFPbGhCLEdBQU1nSSxFQUFJLFlBQVloSSxDQUFFLEdBQUtBLEVBQUcsTUFBUSxDQUFDQSxFQUFHLGFBQWE2Z0IsQ0FBUyxDQUFDLEVBQ3RILEdBQUcvQixFQUFPLFNBQVcsRUFBSSxPQUd6QkEsRUFBTyxRQUFRalosR0FBU0EsRUFBTSxhQUFhcE0sRUFBYyxHQUFLNk8sR0FBYSxXQUFXekMsQ0FBSyxDQUFDLEVBRzVGLElBQUlBLEVBQVFpWixFQUFPLEtBQUs5ZSxHQUFNQSxFQUFHLE9BQVMsUUFBUSxHQUFLOGUsRUFBTyxDQUFDLEVBSTNEK0YsRUFBVSxFQUVkLEtBQUssY0FBYzVLLEVBQVcsQ0FBQ0UsRUFBWUMsSUFBYyxDQUN2RCxJQUFNeGIsRUFBTSxLQUFLLGtCQUFrQnFpQixFQUFTN0csQ0FBUyxFQUNyRHlLLElBQ0EsSUFBSXZtQixFQUFJLElBQUksWUFBWSxvQkFBcUIsQ0FBQyxPQUFRLENBQUMsY0FBZTRpQixDQUFPLENBQUMsQ0FBQyxFQUMvRTVELEdBQUcsS0FBS2hmLEVBQUcsU0FBVTZOLEVBQVUsS0FBTXRHLEVBQU8sQ0FBQyxPQUFRLENBQ25ELFFBQVNBLEVBQU0sS0FDZixXQUFBc1UsRUFDQSxVQUFBQyxFQUNBLE9BQVF4YixFQUNSLFNBQVUsSUFBTSxDQUNkaW1CLElBQ0dBLElBQVksR0FBSW5rQixFQUFTLENBQzlCLENBQ0YsQ0FBQyxDQUFDLENBQ0osRUFBR2trQixFQUFhQSxDQUFXLENBQzdCLENBRUEsY0FBYyxFQUFHeGhCLEVBQU0waEIsRUFBVXBrQixFQUFTLENBQ3hDLElBQUlxa0IsRUFBVSxLQUFLLFdBQVcsZUFBZTNoQixDQUFJLEVBRzdDeVcsRUFBVSxFQUFFLFdBQWEsRUFBRSxPQUFTLFdBQ3BDbUwsRUFBU0YsRUFBVyxJQUFNLEtBQUssT0FBTyxDQUFDLENBQUMsR0FBSUEsRUFBVSxRQUFBakwsRUFBa0IsS0FBTSxFQUFJLENBQUMsRUFBRyxLQUFNLE9BQU8sRUFBSSxLQUN2R29MLEVBQVcsSUFBTSxLQUFLLFdBQVcsU0FBUyxPQUFPLFNBQVMsSUFBSSxFQUM5RDVoQixFQUFNRCxFQUFLLFdBQVcsR0FBRyxFQUFJLEdBQUcsU0FBUyxhQUFhLFNBQVMsT0FBT0EsSUFBU0EsRUFFbkYsS0FBSyxjQUFjNGhCLEVBQVEsYUFBYyxDQUFDLElBQUEzaEIsQ0FBRyxDQUFDLEVBQUUsS0FDOUMsQ0FBQyxDQUFDLEtBQUF2QyxDQUFJLElBQU0sQ0FDVixLQUFLLFdBQVcsaUJBQWlCLElBQU0sQ0FDbENBLEVBQUssY0FDTixLQUFLLFdBQVcsWUFBWXNDLEVBQU0sS0FBTTFDLEVBQVVxa0IsQ0FBTyxHQUV0RCxLQUFLLFdBQVcsa0JBQWtCQSxDQUFPLElBQzFDLEtBQUssS0FBTzNoQixHQUVkLEtBQUssb0JBQW9CLEVBQ3pCMUMsR0FBWUEsRUFBU3FrQixDQUFPLEVBRWhDLENBQUMsQ0FDSCxFQUNBLENBQUMsQ0FBQyxNQUFPRyxFQUFRLFFBQVNDLENBQVEsSUFBTUYsRUFBUyxDQUNuRCxDQUNGLENBRUEscUJBQXFCLENBQ25CLEdBQUcsS0FBSyxZQUFjLEVBQUksTUFBTyxDQUFDLEVBRWxDLElBQUlwRSxFQUFZLEtBQUssUUFBUSxRQUFRLEVBRXJDLE9BQU83WSxFQUFJLElBQUksS0FBSyxHQUFJLFFBQVE2WSxJQUFZLEVBQ3pDLE9BQU9qYixHQUFRQSxFQUFLLEVBQUUsRUFDdEIsT0FBT0EsR0FBUUEsRUFBSyxTQUFTLE9BQVMsQ0FBQyxFQUN2QyxPQUFPQSxHQUFRQSxFQUFLLGFBQWEsS0FBSyxRQUFRM0osRUFBZ0IsQ0FBQyxJQUFNLFFBQVEsRUFDN0UsSUFBSTJKLEdBQVFBLEVBQUssVUFBVSxFQUFJLENBQUMsRUFDaEMsT0FBTyxDQUFDNEQsRUFBSzVELEtBQ1o0RCxFQUFJNUQsRUFBSyxFQUFFLEVBQUlBLEVBQ1I0RCxHQUNOLENBQUMsQ0FBQyxDQUNULENBRUEsNkJBQTZCbVgsRUFBYyxDQUN6QyxJQUFJeUUsRUFBa0J6RSxFQUFjLE9BQU8vaEIsR0FDbENvSixFQUFJLHNCQUFzQixLQUFLLEdBQUlwSixDQUFHLEVBQUUsU0FBVyxDQUMzRCxFQUVFd21CLEVBQWdCLE9BQVMsSUFHMUJBLEVBQWdCLFFBQVF4bUIsR0FBTyxLQUFLLFNBQVMsWUFBWUEsQ0FBRyxDQUFDLEVBRTdELEtBQUssY0FBYyxLQUFNLG9CQUFxQixDQUFDLEtBQU13bUIsQ0FBZSxDQUFDLEVBQUUsS0FBSyxJQUFNLENBR2hGLEtBQUssV0FBVyxpQkFBaUIsSUFBTSxDQUdyQyxJQUFJQyxFQUF3QkQsRUFBZ0IsT0FBT3htQixHQUMxQ29KLEVBQUksc0JBQXNCLEtBQUssR0FBSXBKLENBQUcsRUFBRSxTQUFXLENBQzNELEVBRUV5bUIsRUFBc0IsT0FBUyxHQUNoQyxLQUFLLGNBQWMsS0FBTSxpQkFBa0IsQ0FBQyxLQUFNQSxDQUFxQixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBQXZrQixDQUFJLElBQU0sQ0FDekYsS0FBSyxTQUFTLFVBQVVBLEVBQUssSUFBSSxDQUNuQyxDQUFDLENBRUwsQ0FBQyxDQUNILENBQUMsRUFFTCxDQUVBLFlBQVlkLEVBQUcsQ0FDYixJQUFJc2xCLEVBQWV0bEIsRUFBRyxRQUFROUUsRUFBaUIsRUFDL0MsT0FBTzhFLEVBQUcsYUFBYXpGLEVBQWEsSUFBTSxLQUFLLElBQzVDK3FCLEdBQWdCQSxFQUFhLEtBQU8sS0FBSyxJQUN6QyxDQUFDQSxHQUFnQixLQUFLLE1BQzNCLENBRUEsV0FBVzFmLEVBQU13VSxFQUFXak8sRUFBVW9PLEVBQVdwVSxFQUFPLENBQUMsRUFBRSxDQUN6RDZCLEVBQUksV0FBV3BDLEVBQU01SyxHQUFtQixFQUFJLEVBQzdCLE1BQU0sS0FBSzRLLEVBQUssUUFBUSxFQUNoQyxRQUFRQyxHQUFTbUMsRUFBSSxXQUFXbkMsRUFBTzdLLEdBQW1CLEVBQUksQ0FBQyxFQUN0RSxLQUFLLFdBQVcsa0JBQWtCLElBQUksRUFDdEMsS0FBSyxlQUFlNEssRUFBTXdVLEVBQVdqTyxFQUFVb08sRUFBV3BVLEVBQU0sSUFBTSxDQUNwRSxLQUFLLFdBQVcsNkJBQTZCLENBQy9DLENBQUMsQ0FDSCxDQUVBLFFBQVF4RyxFQUFLLENBQUUsT0FBTyxLQUFLLFdBQVcsUUFBUUEsQ0FBSSxDQUFFLENBQ3RELEVDdjRDQSxJQUFxQjRsQixHQUFyQixLQUFnQyxDQUM5QixZQUFZQyxFQUFLQyxFQUFXQyxFQUFPLENBQUMsRUFBRSxDQUVwQyxHQURBLEtBQUssU0FBVyxHQUNiLENBQUNELEdBQWFBLEVBQVUsWUFBWSxPQUFTLFNBQzlDLE1BQU0sSUFBSSxNQUFNOzs7Ozs7T0FNZixFQUVILEtBQUssT0FBUyxJQUFJQSxFQUFVRCxFQUFLRSxDQUFJLEVBQ3JDLEtBQUssY0FBZ0JBLEVBQUssZUFBaUJDLEdBQzNDLEtBQUssS0FBT0QsRUFDWixLQUFLLE9BQVNFLEdBQVFGLEVBQUssUUFBVSxDQUFDLENBQUMsRUFDdkMsS0FBSyxXQUFhQSxFQUFLLFdBQ3ZCLEtBQUssa0JBQW9CQSxFQUFLLFVBQVksQ0FBQyxFQUMzQyxLQUFLLFNBQVcsT0FBTyxPQUFPRyxHQUFNQyxFQUFRLEVBQUdKLEVBQUssVUFBWSxDQUFDLENBQUMsRUFDbEUsS0FBSyxjQUFnQixLQUNyQixLQUFLLFdBQWEsS0FDbEIsS0FBSyxTQUFXLEdBQ2hCLEtBQUssS0FBTyxLQUNaLEtBQUssZUFBaUIsS0FDdEIsS0FBSyxxQkFBdUIsS0FDNUIsS0FBSyxRQUFVLEVBQ2YsS0FBSyxNQUFRLENBQUMsRUFDZCxLQUFLLEtBQU8sT0FBTyxTQUFTLEtBQzVCLEtBQUssWUFBYyxLQUNuQixLQUFLLGdCQUFrQkcsR0FBTSxPQUFPLFFBQVEsRUFDNUMsS0FBSyxNQUFRSCxFQUFLLE9BQVMsQ0FBQyxFQUM1QixLQUFLLFVBQVlBLEVBQUssV0FBYSxDQUFDLEVBQ3BDLEtBQUssY0FBZ0JBLEVBQUssZUFBaUJLLEdBQzNDLEtBQUssc0JBQXdCLEtBQzdCLEtBQUssV0FBYUwsRUFBSyxZQUFjTSxHQUNyQyxLQUFLLGdCQUFrQk4sRUFBSyxpQkFBbUJPLEdBQy9DLEtBQUssZ0JBQWtCUCxFQUFLLGlCQUFtQlEsR0FDL0MsS0FBSyxlQUFpQlIsRUFBSyxnQkFBa0JTLEdBQzdDLEtBQUssYUFBZVQsRUFBSyxjQUFnQixPQUFPLGFBQ2hELEtBQUssZUFBaUJBLEVBQUssZ0JBQWtCLE9BQU8sZUFDcEQsS0FBSyxvQkFBc0IsR0FDM0IsS0FBSyxnQkFBa0IsSUFBSSxJQUMzQixLQUFLLGVBQWlCLEtBQ3RCLEtBQUssYUFBZSxPQUFPLE9BQU8sQ0FDaEMsbUJBQW9CLEtBQ3BCLGFBQWNFLEdBQVEsRUFDdEIsV0FBWUEsR0FBUSxFQUNwQixZQUFhQSxHQUFRLEVBQ3JCLGtCQUFtQkEsR0FBUSxDQUFDLEVBQzlCRixFQUFLLEtBQU8sQ0FBQyxDQUFDLEVBQ2QsS0FBSyxZQUFjLElBQUlVLEdBQ3ZCLEtBQUssdUJBQXlCLFNBQVMsS0FBSyxlQUFlLFFBQVFDLEVBQXVCLENBQUMsR0FBSyxFQUNoRyxPQUFPLGlCQUFpQixXQUFZQyxHQUFNLENBQ3hDLEtBQUssU0FBVyxFQUNsQixDQUFDLEVBQ0QsS0FBSyxPQUFPLE9BQU8sSUFBTSxDQUNwQixLQUFLLFdBQVcsR0FFakIsT0FBTyxTQUFTLE9BQU8sQ0FFM0IsQ0FBQyxDQUNILENBSUEsU0FBUyxDQUFFLE1BQU8sT0FBTyxDQUV6QixrQkFBa0IsQ0FBRSxPQUFPLEtBQUssZUFBZSxRQUFRQyxFQUFjLElBQU0sTUFBTyxDQUVsRixnQkFBZ0IsQ0FBRSxPQUFPLEtBQUssZUFBZSxRQUFRQyxFQUFZLElBQU0sTUFBTyxDQUU5RSxpQkFBaUIsQ0FBRSxPQUFPLEtBQUssZUFBZSxRQUFRQSxFQUFZLElBQU0sT0FBUSxDQUVoRixhQUFhLENBQUUsS0FBSyxlQUFlLFFBQVFBLEdBQWMsTUFBTSxDQUFFLENBRWpFLGlCQUFpQixDQUFFLEtBQUssZUFBZSxRQUFRRCxHQUFnQixNQUFNLENBQUUsQ0FFdkUsY0FBYyxDQUFFLEtBQUssZUFBZSxRQUFRQyxHQUFjLE9BQU8sQ0FBRSxDQUVuRSxrQkFBa0IsQ0FBRSxLQUFLLGVBQWUsV0FBV0QsRUFBYyxDQUFFLENBRW5FLGlCQUFpQkUsRUFBYSxDQUM1QixLQUFLLFlBQVksRUFDakIsUUFBUSxJQUFJLHlHQUF5RyxFQUNySCxLQUFLLGVBQWUsUUFBUUMsR0FBb0JELENBQVksQ0FDOUQsQ0FFQSxtQkFBbUIsQ0FBRSxLQUFLLGVBQWUsV0FBV0MsRUFBa0IsQ0FBRSxDQUV4RSxlQUFlLENBQ2IsSUFBSUMsRUFBTSxLQUFLLGVBQWUsUUFBUUQsRUFBa0IsRUFDeEQsT0FBT0MsRUFBTSxTQUFTQSxDQUFHLEVBQUksSUFDL0IsQ0FFQSxXQUFXLENBQUUsT0FBTyxLQUFLLE1BQU8sQ0FFaEMsU0FBUyxDQUVKLE9BQU8sU0FBUyxXQUFhLGFBQWUsQ0FBQyxLQUFLLGdCQUFnQixHQUFJLEtBQUssWUFBWSxFQUMxRixJQUFJQyxFQUFZLElBQU0sQ0FDcEIsS0FBSyxrQkFBa0IsRUFDcEIsS0FBSyxjQUFjLEdBQ3BCLEtBQUssbUJBQW1CLEVBQ3hCLEtBQUssT0FBTyxRQUFRLEdBQ1osS0FBSyxLQUNiLEtBQUssT0FBTyxRQUFRLEVBRXBCLEtBQUssbUJBQW1CLENBQUMsS0FBTSxFQUFJLENBQUMsRUFFdEMsS0FBSyxhQUFhLENBQ3BCLEVBQ0csQ0FBQyxXQUFZLFNBQVUsYUFBYSxFQUFFLFFBQVEsU0FBUyxVQUFVLEdBQUssRUFDdkVBLEVBQVUsRUFFVixTQUFTLGlCQUFpQixtQkFBb0IsSUFBTUEsRUFBVSxDQUFDLENBRW5FLENBRUEsV0FBV0MsRUFBUyxDQUNsQixhQUFhLEtBQUsscUJBQXFCLEVBR3BDLEtBQUssaUJBQ04sS0FBSyxPQUFPLElBQUksS0FBSyxjQUFjLEVBQ25DLEtBQUssZUFBaUIsTUFFeEIsS0FBSyxPQUFPLFdBQVdBLENBQVEsQ0FDakMsQ0FFQSxpQkFBaUJDLEVBQVUsQ0FDekIsYUFBYSxLQUFLLHFCQUFxQixFQUN2QyxLQUFLLE9BQU8saUJBQWlCQSxDQUFTLEVBQ3RDLEtBQUssUUFBUSxDQUNmLENBRUEsT0FBT0MsRUFBSUMsRUFBV0MsRUFBWSxLQUFLLENBQ3JDLElBQUlDLEVBQUksSUFBSSxZQUFZLFdBQVksQ0FBQyxPQUFRLENBQUMsY0FBZUgsQ0FBRSxDQUFDLENBQUMsRUFDakUsS0FBSyxNQUFNQSxFQUFJSSxHQUFRQyxHQUFHLEtBQUtGLEVBQUdELEVBQVdELEVBQVdHLEVBQU1KLENBQUUsQ0FBQyxDQUNuRSxDQUlBLGVBQWVBLEVBQUlNLEVBQVVDLEVBQU1ULEVBQVMsQ0FDMUMsS0FBSyxhQUFhRSxFQUFJSSxHQUFRLENBQzVCLElBQUlELEVBQUksSUFBSSxZQUFZLFdBQVksQ0FBQyxPQUFRLENBQUMsY0FBZUgsQ0FBRSxDQUFDLENBQUMsRUFDakVLLEdBQUcsS0FBS0YsRUFBRyxPQUFRRyxFQUFVRixFQUFNSixFQUFJLENBQUMsT0FBUSxDQUFDLEtBQUFPLEVBQU0sU0FBQVQsQ0FBUSxDQUFDLENBQUMsQ0FDbkUsQ0FBQyxDQUNILENBRUEsUUFBUSxDQUNILEtBQUssV0FDTCxLQUFLLE1BQVEsS0FBSyxZQUFZLEdBQUksS0FBSyxJQUFJLEtBQUssS0FBTSxTQUFVLElBQU0sQ0FBQyx5QkFBeUIsQ0FBQyxFQUNwRyxLQUFLLFNBQVcsR0FDaEIsS0FBSyxnQkFBZ0IsRUFDckIsS0FBSyxXQUFXLEVBQ2xCLENBRUEsV0FBV1UsRUFBTUMsRUFBSyxDQUFFLEtBQUssYUFBYUQsQ0FBSSxFQUFFLEdBQUdDLENBQUksQ0FBRSxDQUV6RCxLQUFLQyxFQUFNQyxFQUFLLENBQ2QsR0FBRyxDQUFDLEtBQUssaUJBQWlCLEdBQUssQ0FBQyxRQUFRLEtBQU8sT0FBT0EsRUFBSyxFQUMzRCxRQUFRLEtBQUtELENBQUksRUFDakIsSUFBSUUsRUFBU0QsRUFBSyxFQUNsQixlQUFRLFFBQVFELENBQUksRUFDYkUsQ0FDVCxDQUVBLElBQUlSLEVBQU1JLEVBQU1LLEVBQVksQ0FDMUIsR0FBRyxLQUFLLFdBQVcsQ0FDakIsR0FBSSxDQUFDQyxFQUFLQyxDQUFHLEVBQUlGLEVBQVksRUFDN0IsS0FBSyxXQUFXVCxFQUFNSSxFQUFNTSxFQUFLQyxDQUFHLFVBQzVCLEtBQUssZUFBZSxFQUFFLENBQzlCLEdBQUksQ0FBQ0QsRUFBS0MsQ0FBRyxFQUFJRixFQUFZLEVBQzdCRyxHQUFNWixFQUFNSSxFQUFNTSxFQUFLQyxDQUFHLEVBRTlCLENBRUEsaUJBQWlCakIsRUFBUyxDQUN4QixLQUFLLFlBQVksTUFBTUEsQ0FBUSxDQUNqQyxDQUVBLFdBQVdtQixFQUFNQyxFQUFTQyxFQUFTLFVBQVUsQ0FBQyxFQUFFLENBQzlDLEtBQUssWUFBWSxjQUFjRixFQUFNQyxFQUFTQyxDQUFNLENBQ3RELENBRUEsVUFBVUMsRUFBU0MsRUFBT0MsRUFBRyxDQUMzQkYsRUFBUSxHQUFHQyxFQUFPZCxHQUFRLENBQ3hCLElBQUlnQixFQUFVLEtBQUssY0FBYyxFQUM3QkEsRUFHRixXQUFXLElBQU1ELEVBQUdmLENBQUksRUFBR2dCLENBQU8sRUFGbENELEVBQUdmLENBQUksQ0FJWCxDQUFDLENBQ0gsQ0FFQSxpQkFBaUJILEVBQU1vQixFQUFJLENBQ3pCLGFBQWEsS0FBSyxxQkFBcUIsRUFDdkMsS0FBSyxXQUFXLEVBQ2hCLElBQUlDLEVBQVEsS0FBSyxnQkFDYkMsRUFBUSxLQUFLLGdCQUNiQyxFQUFVLEtBQUssTUFBTSxLQUFLLE9BQU8sR0FBS0QsRUFBUUQsRUFBUSxFQUFFLEVBQUlBLEVBQzVERyxFQUFRQyxHQUFRLFlBQVksS0FBSyxhQUFjLE9BQU8sU0FBUyxTQUFVQyxHQUFxQixFQUFHQyxHQUFTQSxFQUFRLENBQUMsRUFDcEhILEdBQVMsS0FBSyxhQUNmRCxFQUFVLEtBQUssZ0JBRWpCLEtBQUssc0JBQXdCLFdBQVcsSUFBTSxDQUV6Q3ZCLEVBQUssWUFBWSxHQUFLQSxFQUFLLFlBQVksSUFDMUNBLEVBQUssUUFBUSxFQUNib0IsRUFBTUEsRUFBSSxFQUFJLEtBQUssSUFBSXBCLEVBQU0sT0FBUSxJQUFNLENBQUMsZUFBZXdCLHVCQUEyQixDQUFDLEVBQ3BGQSxHQUFTLEtBQUssWUFDZixLQUFLLElBQUl4QixFQUFNLE9BQVEsSUFBTSxDQUFDLFlBQVksS0FBSyx3REFBd0QsQ0FBQyxFQUV2RyxLQUFLLGVBQWUsRUFDckIsT0FBTyxTQUFXLEtBQUssWUFFdkIsT0FBTyxTQUFTLE9BQU8sRUFFM0IsRUFBR3VCLENBQU8sQ0FDWixDQUVBLGlCQUFpQmpCLEVBQUssQ0FDcEIsT0FBT0EsR0FBUUEsRUFBSyxXQUFXLFVBQVUsRUFBSXNCLEdBQU10QixFQUFLLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFJLEtBQUssTUFBTUEsQ0FBSSxDQUMxRixDQUVBLFlBQVksQ0FBRSxPQUFPLEtBQUssUUFBUyxDQUVuQyxhQUFhLENBQUUsT0FBTyxLQUFLLE9BQU8sWUFBWSxDQUFFLENBRWhELGtCQUFrQixDQUFFLE9BQU8sS0FBSyxhQUFjLENBRTlDLFFBQVFGLEVBQUssQ0FBRSxNQUFPLEdBQUcsS0FBSyxpQkFBaUIsSUFBSUEsR0FBTyxDQUUxRCxRQUFReUIsRUFBT0MsRUFBTyxDQUFFLE9BQU8sS0FBSyxPQUFPLFFBQVFELEVBQU9DLENBQU0sQ0FBRSxDQUVsRSxjQUFjLENBQ1osSUFBSUMsRUFBTyxTQUFTLEtBQ3BCLEdBQUdBLEdBQVEsQ0FBQyxLQUFLLFVBQVVBLENBQUksR0FBSyxDQUFDLEtBQUssVUFBVSxTQUFTLGlCQUFpQixFQUFFLENBQzlFLElBQUkvQixFQUFPLEtBQUssWUFBWStCLENBQUksRUFDaEMvQixFQUFLLFFBQVEsS0FBSyxRQUFRLENBQUMsRUFDM0JBLEVBQUssU0FBUyxFQUNWLEtBQUssT0FBTyxLQUFLLEtBQU9BLEdBQzVCLE9BQU8sc0JBQXNCLElBQU0sQ0FDakNBLEVBQUssZUFBZSxFQUVwQixLQUFLLFlBQVksUUFBUSxPQUFPLE1BQU0sQ0FDeEMsQ0FBQyxFQUVMLENBRUEsZUFBZSxDQUNiLElBQUlnQyxFQUFhLEdBQ2pCLE9BQUFDLEVBQUksSUFBSSxTQUFVLEdBQUdDLFdBQTBCQyxPQUFtQkMsR0FBVSxDQUMxRSxHQUFHLENBQUMsS0FBSyxZQUFZQSxFQUFPLEVBQUUsRUFBRSxDQUM5QixJQUFJcEMsRUFBTyxLQUFLLFlBQVlvQyxDQUFNLEVBRzlCSCxFQUFJLFlBQVlHLENBQU0sR0FBSXBDLEVBQUssUUFBUSxLQUFLLFFBQVEsQ0FBQyxFQUN6REEsRUFBSyxLQUFLLEVBQ1BvQyxFQUFPLGFBQWFDLEVBQVEsSUFBSSxLQUFLLEtBQU9yQyxHQUVqRGdDLEVBQWEsRUFDZixDQUFDLEVBQ01BLENBQ1QsQ0FFQSxTQUFTTSxFQUFJQyxFQUFPQyxFQUFZLENBQzNCQSxHQUFjZixHQUFRLFVBQVVnQixHQUFtQkQsRUFBYSxFQUFFLEVBQ3JFLEtBQUssT0FBTyxFQUNaZixHQUFRLFNBQVNhLEVBQUlDLENBQUssQ0FDNUIsQ0FFQSxZQUFZRyxFQUFNSCxFQUFPN0MsRUFBVyxLQUFNaUQsRUFBVSxLQUFLLGVBQWVELENBQUksRUFBRSxDQUM1RSxJQUFJRSxFQUFjLEtBQUssZ0JBQWdCLEtBQ3ZDLEtBQUssZUFBaUIsS0FBSyxnQkFBa0IsS0FBSyxLQUFLLEdBQ3ZELElBQUlDLEVBQVlaLEVBQUksSUFBSSxLQUFLLGVBQWdCLElBQUksS0FBSyxRQUFRLFFBQVEsSUFBSSxFQUN0RWEsRUFBWWIsRUFBSSxVQUFVLEtBQUssZUFBZ0IsRUFBRSxFQUNyRCxLQUFLLEtBQUssV0FBVyxLQUFLLGFBQWEsRUFDdkMsS0FBSyxLQUFLLFFBQVEsRUFFbEIsS0FBSyxLQUFPLEtBQUssWUFBWWEsRUFBV1AsRUFBT0ssQ0FBVyxFQUMxRCxLQUFLLEtBQUssWUFBWUYsQ0FBSSxFQUMxQixLQUFLLGtCQUFrQkcsRUFBVyxFQUFJLEVBQ3RDLEtBQUssS0FBSyxLQUFLLENBQUNFLEVBQVdoQyxJQUFXLENBQ2pDZ0MsSUFBYyxHQUFLLEtBQUssa0JBQWtCSixDQUFPLEdBQ2xELEtBQUssaUJBQWlCLElBQU0sQ0FFMUJFLEVBQVUsUUFBUWpELEdBQU1BLEVBQUcsT0FBTyxDQUFDLEVBQ25DcUMsRUFBSSxjQUFjLFFBQVEsRUFBRSxRQUFRckMsR0FBTWtELEVBQVUsWUFBWWxELENBQUUsQ0FBQyxFQUNuRSxLQUFLLGVBQWUsWUFBWWtELENBQVMsRUFDekMsS0FBSyxlQUFpQixLQUN0QnBELEdBQVlBLEVBQVNpRCxDQUFPLEVBQzVCNUIsRUFBTyxDQUNULENBQUMsQ0FFTCxDQUFDLENBQ0gsQ0FFQSxrQkFBa0JpQyxFQUFVQyxFQUFZdkQsRUFBUyxDQUMvQyxJQUFJd0QsRUFBYSxLQUFLLFFBQVEsUUFBUSxFQUN0QyxHQUFHRCxFQUFXLENBQ1osSUFBTUUsRUFBV2xCLEVBQUksY0FBYyxRQUFRLEdBQUssQ0FBQyxFQUNqRGUsRUFBV0EsRUFBUyxPQUFPcEQsR0FBTSxDQUFDcUMsRUFBSSxhQUFhckMsRUFBSXVELENBQVEsQ0FBQyxFQUVsRSxJQUFJQyxFQUFpQnJELEdBQU0sQ0FDekJBLEVBQUUsZUFBZSxFQUNqQkEsRUFBRSx5QkFBeUIsQ0FDN0IsRUFDQWlELEVBQVMsUUFBUXBELEdBQU0sQ0FHckIsUUFBUXFCLEtBQVMsS0FBSyxnQkFDcEJyQixFQUFHLGlCQUFpQnFCLEVBQU9tQyxFQUFlLEVBQUksRUFFaEQsS0FBSyxPQUFPeEQsRUFBSUEsRUFBRyxhQUFhc0QsQ0FBVSxFQUFHLFFBQVEsQ0FDdkQsQ0FBQyxFQUdELEtBQUssaUJBQWlCLElBQU0sQ0FDMUJGLEVBQVMsUUFBUXBELEdBQU0sQ0FDckIsUUFBUXFCLEtBQVMsS0FBSyxnQkFDcEJyQixFQUFHLG9CQUFvQnFCLEVBQU9tQyxFQUFlLEVBQUksQ0FFckQsQ0FBQyxFQUNEMUQsR0FBWUEsRUFBUyxDQUN2QixDQUFDLENBQ0gsQ0FFQSxVQUFVRSxFQUFHLENBQUUsT0FBT0EsRUFBRyxjQUFnQkEsRUFBRyxhQUFheUQsRUFBVyxJQUFNLElBQUssQ0FFL0UsWUFBWXpELEVBQUkyQyxFQUFPSyxFQUFZLENBQ2pDLElBQUk1QyxFQUFPLElBQUlzRCxHQUFLMUQsRUFBSSxLQUFNLEtBQU0yQyxFQUFPSyxDQUFXLEVBQ3RELFlBQUssTUFBTTVDLEVBQUssRUFBRSxFQUFJQSxFQUNmQSxDQUNULENBRUEsTUFBTXVELEVBQVM3RCxFQUFTLENBQ3RCLElBQUlNLEVBQU93RCxHQUFNRCxFQUFRLFFBQVFyQixFQUFpQixFQUFHdEMsR0FBTSxLQUFLLFlBQVlBLENBQUUsQ0FBQyxHQUFLLEtBQUssS0FDekYsT0FBT0ksR0FBUU4sRUFBV0EsRUFBU00sQ0FBSSxFQUFJQSxDQUM3QyxDQUVBLGFBQWF1RCxFQUFTN0QsRUFBUyxDQUM3QixLQUFLLE1BQU02RCxFQUFTdkQsR0FBUU4sRUFBU00sRUFBTXVELENBQU8sQ0FBQyxDQUNyRCxDQUVBLFlBQVkzRCxFQUFHLENBQ2IsSUFBSTZELEVBQVM3RCxFQUFHLGFBQWE4RCxFQUFXLEVBQ3hDLE9BQU9GLEdBQU0sS0FBSyxZQUFZQyxDQUFNLEVBQUdFLEdBQVFBLEVBQUssa0JBQWtCL0QsQ0FBRSxDQUFDLENBQzNFLENBRUEsWUFBWWdFLEVBQUcsQ0FBRSxPQUFPLEtBQUssTUFBTUEsQ0FBRSxDQUFFLENBRXZDLGlCQUFpQixDQUNmLFFBQVFBLEtBQU0sS0FBSyxNQUNqQixLQUFLLE1BQU1BLENBQUUsRUFBRSxRQUFRLEVBQ3ZCLE9BQU8sS0FBSyxNQUFNQSxDQUFFLEVBRXRCLEtBQUssS0FBTyxJQUNkLENBRUEsZ0JBQWdCaEUsRUFBRyxDQUNqQixJQUFJK0QsRUFBTyxLQUFLLFlBQVkvRCxFQUFHLGFBQWE4RCxFQUFXLENBQUMsRUFDckRDLEdBQVFBLEVBQUssS0FBTy9ELEVBQUcsSUFDeEIrRCxFQUFLLFFBQVEsRUFDYixPQUFPLEtBQUssTUFBTUEsRUFBSyxFQUFFLEdBQ2pCQSxHQUNSQSxFQUFLLGtCQUFrQi9ELEVBQUcsRUFBRSxDQUVoQyxDQUVBLGtCQUFrQixDQUNoQixPQUFPLFNBQVMsYUFDbEIsQ0FFQSxrQkFBa0JJLEVBQUssQ0FDbEIsS0FBSyxZQUFjQSxFQUFLLFlBQVksS0FBSyxVQUFVLElBQ3BELEtBQUssV0FBYSxLQUV0QixDQUVBLDhCQUE4QixDQUN6QixLQUFLLFlBQWMsS0FBSyxhQUFlLFNBQVMsTUFDakQsS0FBSyxXQUFXLE1BQU0sQ0FFMUIsQ0FFQSxtQkFBbUIsQ0FDakIsS0FBSyxXQUFhLEtBQUssaUJBQWlCLEVBQ3JDLEtBQUssYUFBZSxTQUFTLE1BQU8sS0FBSyxXQUFXLEtBQUssQ0FDOUQsQ0FFQSxtQkFBbUIsQ0FBQyxLQUFBNkQsQ0FBSSxFQUFJLENBQUMsRUFBRSxDQUMxQixLQUFLLHNCQUVSLEtBQUssb0JBQXNCLEdBRTNCLEtBQUssZUFBaUIsS0FBSyxPQUFPLFFBQVE1QyxHQUFTLENBRWpELEdBQUdBLEdBQVNBLEVBQU0sT0FBUyxLQUFRLEtBQUssS0FBTyxPQUFPLEtBQUssaUJBQWlCLEtBQUssSUFBSSxDQUN2RixDQUFDLEVBQ0QsU0FBUyxLQUFLLGlCQUFpQixRQUFTLFVBQVcsQ0FBRSxDQUFDLEVBQ3RELE9BQU8saUJBQWlCLFdBQVksR0FBSyxDQUNwQyxFQUFFLFlBQ0gsS0FBSyxVQUFVLEVBQUUsV0FBVyxFQUM1QixLQUFLLGdCQUFnQixDQUFDLEdBQUksT0FBTyxTQUFTLEtBQU0sS0FBTSxVQUFVLENBQUMsRUFDakUsT0FBTyxTQUFTLE9BQU8sRUFFM0IsRUFBRyxFQUFJLEVBQ0g0QyxHQUFPLEtBQUssUUFBUSxFQUN4QixLQUFLLFdBQVcsRUFDWkEsR0FBTyxLQUFLLFVBQVUsRUFDMUIsS0FBSyxLQUFLLENBQUMsTUFBTyxRQUFTLFFBQVMsU0FBUyxFQUFHLENBQUMsRUFBR0MsRUFBTTlELEVBQU0rRCxFQUFVN0QsRUFBVThELElBQWUsQ0FDakcsSUFBSUMsRUFBV0YsRUFBUyxhQUFhLEtBQUssUUFBUUcsRUFBTyxDQUFDLEVBQ3REQyxFQUFhLEVBQUUsS0FBTyxFQUFFLElBQUksWUFBWSxFQUM1QyxHQUFHRixHQUFZQSxFQUFTLFlBQVksSUFBTUUsRUFBYSxPQUV2RCxJQUFJaEUsRUFBTyxDQUFDLElBQUssRUFBRSxJQUFLLEdBQUcsS0FBSyxVQUFVMkQsRUFBTSxFQUFHQyxDQUFRLENBQUMsRUFDNUQ5RCxHQUFHLEtBQUssRUFBRzZELEVBQU01RCxFQUFVRixFQUFNK0QsRUFBVSxDQUFDLE9BQVEsQ0FBQyxLQUFBNUQsQ0FBSSxDQUFDLENBQUMsQ0FDN0QsQ0FBQyxFQUNELEtBQUssS0FBSyxDQUFDLEtBQU0sV0FBWSxNQUFPLFNBQVMsRUFBRyxDQUFDLEVBQUcyRCxFQUFNOUQsRUFBTStELEVBQVU3RCxFQUFVa0UsSUFBYyxDQUNoRyxHQUFHLENBQUNBLEVBQVUsQ0FDWixJQUFJakUsRUFBTyxDQUFDLElBQUssRUFBRSxJQUFLLEdBQUcsS0FBSyxVQUFVMkQsRUFBTSxFQUFHQyxDQUFRLENBQUMsRUFDNUQ5RCxHQUFHLEtBQUssRUFBRzZELEVBQU01RCxFQUFVRixFQUFNK0QsRUFBVSxDQUFDLE9BQVEsQ0FBQyxLQUFBNUQsQ0FBSSxDQUFDLENBQUMsRUFFL0QsQ0FBQyxFQUNELEtBQUssS0FBSyxDQUFDLEtBQU0sT0FBUSxNQUFPLE9BQU8sRUFBRyxDQUFDLEVBQUcyRCxFQUFNOUQsRUFBTStELEVBQVU3RCxFQUFVa0UsSUFBYyxDQUUxRixHQUFHQSxJQUFjLFNBQVMsQ0FDeEIsSUFBSWpFLEVBQU8sS0FBSyxVQUFVMkQsRUFBTSxFQUFHQyxDQUFRLEVBQzNDOUQsR0FBRyxLQUFLLEVBQUc2RCxFQUFNNUQsRUFBVUYsRUFBTStELEVBQVUsQ0FBQyxPQUFRLENBQUMsS0FBQTVELENBQUksQ0FBQyxDQUFDLEVBRS9ELENBQUMsRUFDRCxLQUFLLEdBQUcsV0FBWSxHQUFLLEVBQUUsZUFBZSxDQUFDLEVBQzNDLEtBQUssR0FBRyxPQUFRLEdBQUssQ0FDbkIsRUFBRSxlQUFlLEVBQ2pCLElBQUlrRSxFQUFlYixHQUFNYyxHQUFrQixFQUFFLE9BQVEsS0FBSyxRQUFRQyxFQUFlLENBQUMsRUFBR0MsR0FDNUVBLEVBQVcsYUFBYSxLQUFLLFFBQVFELEVBQWUsQ0FBQyxDQUM3RCxFQUNHRSxFQUFhSixHQUFnQixTQUFTLGVBQWVBLENBQVksRUFDakVLLEVBQVEsTUFBTSxLQUFLLEVBQUUsYUFBYSxPQUFTLENBQUMsQ0FBQyxFQUM5QyxDQUFDRCxHQUFjQSxFQUFXLFVBQVlDLEVBQU0sU0FBVyxHQUFLLEVBQUVELEVBQVcsaUJBQWlCLFlBRTdGRSxHQUFhLFdBQVdGLEVBQVlDLEVBQU8sRUFBRSxZQUFZLEVBQ3pERCxFQUFXLGNBQWMsSUFBSSxNQUFNLFFBQVMsQ0FBQyxRQUFTLEVBQUksQ0FBQyxDQUFDLEVBQzlELENBQUMsRUFDRCxLQUFLLEdBQUdHLEdBQW1CLEdBQUssQ0FDOUIsSUFBSUMsRUFBZSxFQUFFLE9BQ3JCLEdBQUcsQ0FBQzVDLEVBQUksY0FBYzRDLENBQVksRUFBSSxPQUN0QyxJQUFJSCxFQUFRLE1BQU0sS0FBSyxFQUFFLE9BQU8sT0FBUyxDQUFDLENBQUMsRUFBRSxPQUFPSSxHQUFLQSxhQUFhLE1BQVFBLGFBQWEsSUFBSSxFQUMvRkgsR0FBYSxXQUFXRSxFQUFjSCxDQUFLLEVBQzNDRyxFQUFhLGNBQWMsSUFBSSxNQUFNLFFBQVMsQ0FBQyxRQUFTLEVBQUksQ0FBQyxDQUFDLENBQ2hFLENBQUMsRUFDSCxDQUVBLFVBQVVFLEVBQVcsRUFBR2hCLEVBQVMsQ0FDL0IsSUFBSXJFLEVBQVcsS0FBSyxrQkFBa0JxRixDQUFTLEVBQy9DLE9BQU9yRixFQUFXQSxFQUFTLEVBQUdxRSxDQUFRLEVBQUksQ0FBQyxDQUM3QyxDQUVBLGVBQWVyQixFQUFLLENBQ2xCLFlBQUssVUFDTCxLQUFLLFlBQWNBLEVBQ25CLEtBQUssa0JBQWtCLEVBQ2hCLEtBQUssT0FDZCxDQUlBLG1CQUFtQixDQUFFakIsR0FBUSxhQUFhZ0IsRUFBaUIsQ0FBRSxDQUU3RCxrQkFBa0JFLEVBQVEsQ0FDeEIsT0FBRyxLQUFLLFVBQVlBLEVBQ1gsSUFFUCxLQUFLLEtBQU8sS0FBSyxZQUNqQixLQUFLLFlBQWMsS0FDWixHQUVYLENBRUEsU0FBUyxDQUFFLE9BQU8sS0FBSyxJQUFLLENBRTVCLGdCQUFnQixDQUFFLE1BQU8sQ0FBQyxDQUFDLEtBQUssV0FBWSxDQUU1QyxLQUFLcUMsRUFBUXRGLEVBQVMsQ0FDcEIsUUFBUXVCLEtBQVMrRCxFQUFPLENBQ3RCLElBQUlDLEVBQW1CRCxFQUFPL0QsQ0FBSyxFQUVuQyxLQUFLLEdBQUdnRSxFQUFrQmxGLEdBQUssQ0FDN0IsSUFBSW1GLEVBQVUsS0FBSyxRQUFRakUsQ0FBSyxFQUM1QmtFLEVBQWdCLEtBQUssUUFBUSxVQUFVbEUsR0FBTyxFQUM5Q21FLEVBQWlCckYsRUFBRSxPQUFPLGNBQWdCQSxFQUFFLE9BQU8sYUFBYW1GLENBQU8sRUFDeEVFLEVBQ0QsS0FBSyxTQUFTckYsRUFBRSxPQUFRQSxFQUFHa0YsRUFBa0IsSUFBTSxDQUNqRCxLQUFLLGFBQWFsRixFQUFFLE9BQVFDLEdBQVEsQ0FDbENOLEVBQVNLLEVBQUdrQixFQUFPakIsRUFBTUQsRUFBRSxPQUFRcUYsRUFBZ0IsSUFBSSxDQUN6RCxDQUFDLENBQ0gsQ0FBQyxFQUVEbkQsRUFBSSxJQUFJLFNBQVUsSUFBSWtELEtBQWtCdkYsR0FBTSxDQUM1QyxJQUFJTSxFQUFXTixFQUFHLGFBQWF1RixDQUFhLEVBQzVDLEtBQUssU0FBU3ZGLEVBQUlHLEVBQUdrRixFQUFrQixJQUFNLENBQzNDLEtBQUssYUFBYXJGLEVBQUlJLEdBQVEsQ0FDNUJOLEVBQVNLLEVBQUdrQixFQUFPakIsRUFBTUosRUFBSU0sRUFBVSxRQUFRLENBQ2pELENBQUMsQ0FDSCxDQUFDLENBQ0gsQ0FBQyxDQUVMLENBQUMsRUFFTCxDQUVBLFlBQVksQ0FDVixLQUFLLEdBQUcsWUFBYUgsR0FBSyxLQUFLLHFCQUF1QkEsRUFBRSxNQUFNLEVBQzlELEtBQUssVUFBVSxRQUFTLE9BQU8sQ0FDakMsQ0FFQSxVQUFVZ0YsRUFBV00sRUFBWSxDQUMvQixJQUFJQyxFQUFRLEtBQUssUUFBUUQsQ0FBVyxFQUNwQyxPQUFPLGlCQUFpQk4sRUFBV2hGLEdBQUssQ0FDdEMsSUFBSXdGLEVBQVMsS0FHVnhGLEVBQUUsU0FBVyxJQUFHLEtBQUsscUJBQXVCQSxFQUFFLFFBQ2pELElBQUl5RixFQUF1QixLQUFLLHNCQUF3QnpGLEVBQUUsT0FHMUR3RixFQUFTakIsR0FBa0J2RSxFQUFFLE9BQVF1RixDQUFLLEVBQzFDLEtBQUssa0JBQWtCdkYsRUFBR3lGLENBQW9CLEVBQzlDLEtBQUsscUJBQXVCLEtBQzVCLElBQUl0RixFQUFXcUYsR0FBVUEsRUFBTyxhQUFhRCxDQUFLLEVBQ2xELEdBQUcsQ0FBQ3BGLEVBQVMsQ0FDUitCLEVBQUksZUFBZWxDLEVBQUcsT0FBTyxRQUFRLEdBQUksS0FBSyxPQUFPLEVBQ3hELE9BR0N3RixFQUFPLGFBQWEsTUFBTSxJQUFNLEtBQU14RixFQUFFLGVBQWUsRUFHdkQsQ0FBQXdGLEVBQU8sYUFBYUUsRUFBVyxHQUVsQyxLQUFLLFNBQVNGLEVBQVF4RixFQUFHLFFBQVMsSUFBTSxDQUN0QyxLQUFLLGFBQWF3RixFQUFRdkYsR0FBUSxDQUNoQ0MsR0FBRyxLQUFLRixFQUFHLFFBQVNHLEVBQVVGLEVBQU11RixFQUFRLENBQUMsT0FBUSxDQUFDLEtBQU0sS0FBSyxVQUFVLFFBQVN4RixFQUFHd0YsQ0FBTSxDQUFDLENBQUMsQ0FBQyxDQUNsRyxDQUFDLENBQ0gsQ0FBQyxDQUNILEVBQUcsRUFBSyxDQUNWLENBRUEsa0JBQWtCeEYsRUFBRzJGLEVBQWUsQ0FDbEMsSUFBSUMsRUFBZSxLQUFLLFFBQVEsWUFBWSxFQUM1QzFELEVBQUksSUFBSSxTQUFVLElBQUkwRCxLQUFpQi9GLEdBQU0sQ0FDdENBLEVBQUcsV0FBVzhGLENBQWMsR0FBSzlGLEVBQUcsU0FBUzhGLENBQWMsR0FDOUQsS0FBSyxhQUFhOUYsRUFBSUksR0FBUSxDQUM1QixJQUFJRSxFQUFXTixFQUFHLGFBQWErRixDQUFZLEVBQ3hDMUYsR0FBRyxVQUFVTCxDQUFFLEdBQUtLLEdBQUcsYUFBYUwsQ0FBRSxHQUN2Q0ssR0FBRyxLQUFLRixFQUFHLFFBQVNHLEVBQVVGLEVBQU1KLEVBQUksQ0FBQyxPQUFRLENBQUMsS0FBTSxLQUFLLFVBQVUsUUFBU0csRUFBR0EsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBRWxHLENBQUMsQ0FFTCxDQUFDLENBQ0gsQ0FFQSxTQUFTLENBQ1AsR0FBRyxDQUFDMEIsR0FBUSxhQUFhLEVBQUksT0FDMUIsUUFBUSxvQkFBb0IsUUFBUSxrQkFBb0IsVUFDM0QsSUFBSW1FLEVBQWMsS0FDbEIsT0FBTyxpQkFBaUIsU0FBVXpHLEdBQU0sQ0FDdEMsYUFBYXlHLENBQVcsRUFDeEJBLEVBQWMsV0FBVyxJQUFNLENBQzdCbkUsR0FBUSxtQkFBbUJvRSxHQUFTLE9BQU8sT0FBT0EsRUFBTyxDQUFDLE9BQVEsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUNwRixFQUFHLEdBQUcsQ0FDUixDQUFDLEVBQ0QsT0FBTyxpQkFBaUIsV0FBWTVFLEdBQVMsQ0FDM0MsR0FBRyxDQUFDLEtBQUssb0JBQW9CLE9BQU8sUUFBUSxFQUFJLE9BQ2hELEdBQUksQ0FBQyxLQUFBNkMsRUFBTSxTQUFBZ0MsRUFBVSxHQUFBbEMsRUFBSSxPQUFBbUMsRUFBUSxTQUFBQyxDQUFRLEVBQUkvRSxFQUFNLE9BQVMsQ0FBQyxFQUN6RHlCLEVBQU8sT0FBTyxTQUFTLEtBR3ZCdUQsRUFBWUQsRUFBVyxLQUFLLHVCQUVoQ2xDLEVBQU9tQyxFQUFZbkMsRUFBUWdDLEdBQVloQyxFQUd2QyxLQUFLLHVCQUF5QmtDLEdBQVksRUFDMUMsS0FBSyxlQUFlLFFBQVE5RyxHQUF5QixLQUFLLHVCQUF1QixTQUFTLENBQUMsRUFFM0YrQyxFQUFJLGNBQWMsT0FBUSxlQUFnQixDQUFDLE9BQVEsQ0FBQyxLQUFBUyxFQUFNLE1BQU9vQixJQUFTLFFBQVMsSUFBSyxHQUFNLFVBQVdtQyxFQUFZLFVBQVksVUFBVSxDQUFDLENBQUMsRUFDN0ksS0FBSyxpQkFBaUIsSUFBTSxDQUMxQixJQUFNdkcsRUFBVyxJQUFNLENBQUUsS0FBSyxZQUFZcUcsQ0FBTSxDQUFFLEVBQy9DLEtBQUssS0FBSyxZQUFZLEdBQU1qQyxJQUFTLFNBQVdGLElBQU8sS0FBSyxLQUFLLEdBQ2xFLEtBQUssS0FBSyxjQUFjM0MsRUFBT3lCLEVBQU0sS0FBTWhELENBQVEsRUFFbkQsS0FBSyxZQUFZZ0QsRUFBTSxLQUFNaEQsQ0FBUSxDQUV6QyxDQUFDLENBQ0gsRUFBRyxFQUFLLEVBQ1IsT0FBTyxpQkFBaUIsUUFBUyxHQUFLLENBQ3BDLElBQUk2RixFQUFTakIsR0FBa0IsRUFBRSxPQUFRNEIsRUFBYSxFQUNsRHBDLEVBQU95QixHQUFVQSxFQUFPLGFBQWFXLEVBQWEsRUFDdEQsR0FBRyxDQUFDcEMsR0FBUSxDQUFDLEtBQUssWUFBWSxHQUFLLENBQUMsS0FBSyxNQUFRN0IsRUFBSSxZQUFZLENBQUMsRUFBSSxPQUd0RSxJQUFJUyxFQUFPNkMsRUFBTyxnQkFBZ0Isa0JBQW9CQSxFQUFPLEtBQUssUUFBVUEsRUFBTyxLQUUvRVksRUFBWVosRUFBTyxhQUFhYSxFQUFjLEVBQ2xELEVBQUUsZUFBZSxFQUNqQixFQUFFLHlCQUF5QixFQUN4QixLQUFLLGNBQWdCMUQsR0FFeEIsS0FBSyxpQkFBaUIsSUFBTSxDQUMxQixHQUFHb0IsSUFBUyxRQUNWLEtBQUssaUJBQWlCLEVBQUdwQixFQUFNeUQsRUFBV1osQ0FBTSxVQUN4Q3pCLElBQVMsV0FDakIsS0FBSyxnQkFBZ0IsRUFBR3BCLEVBQU15RCxFQUFXLEtBQU1aLENBQU0sTUFFckQsT0FBTSxJQUFJLE1BQU0sWUFBWVcsd0NBQW1EcEMsR0FBTSxFQUV2RixJQUFJdUMsRUFBV2QsRUFBTyxhQUFhLEtBQUssUUFBUSxPQUFPLENBQUMsRUFDckRjLEdBQ0QsS0FBSyxpQkFBaUIsSUFBTSxLQUFLLE9BQU9kLEVBQVFjLEVBQVUsT0FBTyxDQUFDLENBRXRFLENBQUMsQ0FDSCxFQUFHLEVBQUssQ0FDVixDQUVBLFlBQVlOLEVBQU8sQ0FDZCxPQUFPQSxHQUFZLFVBQ3BCLHNCQUFzQixJQUFNLENBQzFCLE9BQU8sU0FBUyxFQUFHQSxDQUFNLENBQzNCLENBQUMsQ0FFTCxDQUVBLGNBQWM5RSxFQUFPcUYsRUFBVSxDQUFDLEVBQUUsQ0FDaENyRSxFQUFJLGNBQWMsT0FBUSxPQUFPaEIsSUFBUyxDQUFDLE9BQVFxRixDQUFPLENBQUMsQ0FDN0QsQ0FFQSxlQUFldEIsRUFBTyxDQUNwQkEsRUFBTyxRQUFRLENBQUMsQ0FBQy9ELEVBQU9xRixDQUFPLElBQU0sS0FBSyxjQUFjckYsRUFBT3FGLENBQU8sQ0FBQyxDQUN6RSxDQUVBLGdCQUFnQkMsRUFBTTdHLEVBQVMsQ0FDN0J1QyxFQUFJLGNBQWMsT0FBUSx5QkFBMEIsQ0FBQyxPQUFRc0UsQ0FBSSxDQUFDLEVBQ2xFLElBQUlDLEVBQU8sSUFBTXZFLEVBQUksY0FBYyxPQUFRLHdCQUF5QixDQUFDLE9BQVFzRSxDQUFJLENBQUMsRUFDbEYsT0FBTzdHLEVBQVdBLEVBQVM4RyxDQUFJLEVBQUlBLENBQ3JDLENBRUEsaUJBQWlCekcsRUFBRzJDLEVBQU15RCxFQUFXcEMsRUFBUyxDQUM1QyxHQUFHLENBQUMsS0FBSyxZQUFZLEdBQUssQ0FBQyxLQUFLLEtBQUssT0FBTyxFQUFJLE9BQU90QyxHQUFRLFNBQVNpQixDQUFJLEVBRTVFLEtBQUssZ0JBQWdCLENBQUMsR0FBSUEsRUFBTSxLQUFNLE9BQU8sRUFBRzhELEdBQVEsQ0FDdEQsS0FBSyxLQUFLLGNBQWN6RyxFQUFHMkMsRUFBTXFCLEVBQVVwQixHQUFXLENBQ3BELEtBQUssYUFBYUQsRUFBTXlELEVBQVd4RCxDQUFPLEVBQzFDNkQsRUFBSyxDQUNQLENBQUMsQ0FDSCxDQUFDLENBQ0gsQ0FFQSxhQUFhOUQsRUFBTXlELEVBQVd4RCxFQUFVLEtBQUssZUFBZUQsQ0FBSSxFQUFFLENBQzVELEtBQUssa0JBQWtCQyxDQUFPLElBR2xDLEtBQUsseUJBQ0wsS0FBSyxlQUFlLFFBQVF6RCxHQUF5QixLQUFLLHVCQUF1QixTQUFTLENBQUMsRUFHM0Z1QyxHQUFRLG1CQUFvQm9FLElBQVcsQ0FBQyxHQUFHQSxFQUFPLFNBQVUsT0FBTyxFQUFFLEVBRXJFcEUsR0FBUSxVQUFVMEUsRUFBVyxDQUMzQixLQUFNLFFBQ04sR0FBSSxLQUFLLEtBQUssR0FDZCxTQUFVLEtBQUssc0JBQ2pCLEVBQUd6RCxDQUFJLEVBRVBULEVBQUksY0FBYyxPQUFRLGVBQWdCLENBQUMsT0FBUSxDQUFDLE1BQU8sR0FBTSxLQUFBUyxFQUFNLElBQUssR0FBTyxVQUFXLFNBQVMsQ0FBQyxDQUFDLEVBQ3pHLEtBQUssb0JBQW9CLE9BQU8sUUFBUSxFQUMxQyxDQUVBLGdCQUFnQjNDLEVBQUcyQyxFQUFNeUQsRUFBVzVELEVBQU93QixFQUFTLENBRWxELEdBREdBLEdBQVloRSxFQUFFLFdBQWFBLEVBQUUsT0FBUyxZQUFhZ0UsRUFBUyxVQUFVLElBQUksbUJBQW1CLEVBQzdGLENBQUMsS0FBSyxZQUFZLEdBQUssQ0FBQyxLQUFLLEtBQUssT0FBTyxFQUFJLE9BQU90QyxHQUFRLFNBQVNpQixFQUFNSCxDQUFLLEVBR25GLEdBQUcsb0JBQW9CLEtBQUtHLENBQUksRUFBRSxDQUNoQyxHQUFJLENBQUMsU0FBQStELEVBQVUsS0FBQUMsQ0FBSSxFQUFJLE9BQU8sU0FDOUJoRSxFQUFPLEdBQUcrRCxNQUFhQyxJQUFPaEUsSUFFaEMsSUFBSXFELEVBQVMsT0FBTyxRQUNwQixLQUFLLGdCQUFnQixDQUFDLEdBQUlyRCxFQUFNLEtBQU0sVUFBVSxFQUFHOEQsR0FBUSxDQUN6RCxLQUFLLFlBQVk5RCxFQUFNSCxFQUFRSSxHQUFZLENBQ3RDQSxJQUFZLEtBQUssVUFFbEIsS0FBSyx5QkFDTCxLQUFLLGVBQWUsUUFBUXpELEdBQXlCLEtBQUssdUJBQXVCLFNBQVMsQ0FBQyxFQUczRnVDLEdBQVEsbUJBQW9Cb0UsSUFBVyxDQUFDLEdBQUdBLEVBQU8sU0FBVSxVQUFVLEVBQUUsRUFFeEVwRSxHQUFRLFVBQVUwRSxFQUFXLENBQzNCLEtBQU0sV0FDTixHQUFJLEtBQUssS0FBSyxHQUNkLE9BQUFKLEVBQ0EsU0FBVSxLQUFLLHNCQUNqQixFQUFHckQsQ0FBSSxFQUVQVCxFQUFJLGNBQWMsT0FBUSxlQUFnQixDQUFDLE9BQVEsQ0FBQyxLQUFBUyxFQUFNLE1BQU8sR0FBTyxJQUFLLEdBQU8sVUFBVyxTQUFTLENBQUMsQ0FBQyxFQUMxRyxLQUFLLG9CQUFvQixPQUFPLFFBQVEsR0FFMUM4RCxFQUFLLENBQ1AsQ0FBQyxDQUNILENBQUMsQ0FDSCxDQUVBLG9CQUFvQkcsRUFBWSxDQUM5QixHQUFJLENBQUMsU0FBQUMsRUFBVSxPQUFBQyxDQUFNLEVBQUksS0FBSyxnQkFDOUIsT0FBR0QsRUFBV0MsSUFBV0YsRUFBWSxTQUFXQSxFQUFZLE9BQ25ELElBRVAsS0FBSyxnQkFBa0JqSSxHQUFNaUksQ0FBVyxFQUNqQyxHQUVYLENBRUEsV0FBVyxDQUNULElBQUlHLEVBQWEsRUFDYkMsRUFBd0IsR0FHNUIsS0FBSyxHQUFHLFNBQVVoSCxHQUFLLENBQ3JCLElBQUlpSCxFQUFZakgsRUFBRSxPQUFPLGFBQWEsS0FBSyxRQUFRLFFBQVEsQ0FBQyxFQUN4RGtILEVBQVlsSCxFQUFFLE9BQU8sYUFBYSxLQUFLLFFBQVEsUUFBUSxDQUFDLEVBQ3pELENBQUNnSCxHQUF5QkUsR0FBYSxDQUFDRCxJQUN6Q0QsRUFBd0IsR0FDeEJoSCxFQUFFLGVBQWUsRUFDakIsS0FBSyxhQUFhQSxFQUFFLE9BQVFDLEdBQVEsQ0FDbENBLEVBQUssWUFBWUQsRUFBRSxNQUFNLEVBRXpCLE9BQU8sc0JBQXNCLElBQU0sQ0FDOUJrQyxFQUFJLHVCQUF1QmxDLENBQUMsR0FBSSxLQUFLLE9BQU8sRUFDL0NBLEVBQUUsT0FBTyxPQUFPLENBQ2xCLENBQUMsQ0FDSCxDQUFDLEVBRUwsQ0FBQyxFQUVELEtBQUssR0FBRyxTQUFVQSxHQUFLLENBQ3JCLElBQUlHLEVBQVdILEVBQUUsT0FBTyxhQUFhLEtBQUssUUFBUSxRQUFRLENBQUMsRUFDM0QsR0FBRyxDQUFDRyxFQUFTLENBQ1IrQixFQUFJLHVCQUF1QmxDLENBQUMsR0FBSSxLQUFLLE9BQU8sRUFDL0MsT0FFRkEsRUFBRSxlQUFlLEVBQ2pCQSxFQUFFLE9BQU8sU0FBVyxHQUNwQixLQUFLLGFBQWFBLEVBQUUsT0FBUUMsR0FBUSxDQUNsQ0MsR0FBRyxLQUFLRixFQUFHLFNBQVVHLEVBQVVGLEVBQU1ELEVBQUUsT0FBUSxDQUFDLE9BQVEsQ0FBQyxVQUFXQSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQ25GLENBQUMsQ0FDSCxDQUFDLEVBRUQsUUFBUStELElBQVEsQ0FBQyxTQUFVLE9BQU8sRUFDaEMsS0FBSyxHQUFHQSxFQUFNL0QsR0FBSyxDQUNqQixHQUFHQSxhQUFhLGFBQWVBLEVBQUUsT0FBTyxPQUFTLE9BQVUsQ0FFekQsR0FBR0EsRUFBRSxRQUFVQSxFQUFFLE9BQU8sV0FDdEIsTUFBTSxJQUFJLE1BQU0sd0JBQXdCK0QsMkRBQThELEVBRXhHLE9BRUYsSUFBSW1ELEVBQVksS0FBSyxRQUFRLFFBQVEsRUFDakNDLEVBQVFuSCxFQUFFLE9BS2QsR0FBR0EsRUFBRSxZQUFZLENBQ2YsSUFBTW9ILEVBQU0sd0JBQXdCckQsSUFDaEM3QixFQUFJLFFBQVFpRixFQUFPQyxDQUFHLElBQ3hCbEYsRUFBSSxXQUFXaUYsRUFBT0MsRUFBSyxFQUFJLEVBQy9CRCxFQUFNLGlCQUFpQixpQkFBa0IsSUFBTSxDQUU3Q0EsRUFBTSxjQUFjLElBQUksTUFBTXBELEVBQU0sQ0FBQyxRQUFTLEVBQUksQ0FBQyxDQUFDLEVBQ3BEN0IsRUFBSSxjQUFjaUYsRUFBT0MsQ0FBRyxDQUM5QixFQUFHLENBQUMsS0FBTSxFQUFJLENBQUMsR0FFakIsT0FFRixJQUFJQyxFQUFhRixFQUFNLGFBQWFELENBQVMsRUFDekNJLEVBQVlILEVBQU0sTUFBUUEsRUFBTSxLQUFLLGFBQWFELENBQVMsRUFDM0QvRyxFQUFXa0gsR0FBY0MsRUFFN0IsR0FERyxDQUFDbkgsR0FDRGdILEVBQU0sT0FBUyxVQUFZQSxFQUFNLFVBQVlBLEVBQU0sU0FBUyxTQUFXLE9BRTFFLElBQUlJLEVBQWFGLEVBQWFGLEVBQVFBLEVBQU0sS0FDeENLLEVBQW9CVCxFQUN4QkEsSUFDQSxHQUFJLENBQUMsR0FBQVUsRUFBUSxLQUFNQyxDQUFRLEVBQUl4RixFQUFJLFFBQVFpRixFQUFPLGdCQUFnQixHQUFLLENBQUMsRUFJckVNLElBQU9ELEVBQW9CLEdBQUt6RCxJQUFTLFVBQVkyRCxJQUFhLFVBRXJFeEYsRUFBSSxXQUFXaUYsRUFBTyxpQkFBa0IsQ0FBQyxHQUFJSyxFQUFtQixLQUFBekQsQ0FBVSxDQUFDLEVBRTNFLEtBQUssU0FBU29ELEVBQU9uSCxFQUFHK0QsRUFBTSxJQUFNLENBQ2xDLEtBQUssYUFBYXdELEVBQVl0SCxHQUFRLENBQ3BDaUMsRUFBSSxXQUFXaUYsRUFBT1EsR0FBaUIsRUFBSSxFQUMzQ3pILEdBQUcsS0FBS0YsRUFBRyxTQUFVRyxFQUFVRixFQUFNa0gsRUFBTyxDQUFDLE9BQVEsQ0FBQyxRQUFTbkgsRUFBRSxPQUFPLEtBQU0sV0FBQXVILENBQXNCLENBQUMsQ0FBQyxDQUN4RyxDQUFDLENBQ0gsQ0FBQyxFQUNILENBQUMsRUFFSCxLQUFLLEdBQUcsUUFBVXZILEdBQU0sQ0FDdEIsSUFBSTRILEVBQU81SCxFQUFFLE9BQ2JrQyxFQUFJLFVBQVUwRixDQUFJLEVBQ2xCLElBQUlULEVBQVEsTUFBTSxLQUFLUyxFQUFLLFFBQVEsRUFBRSxLQUFLL0gsR0FBTUEsRUFBRyxPQUFTLE9BQU8sRUFDakVzSCxHQUVELE9BQU8sc0JBQXNCLElBQU0sQ0FDakNBLEVBQU0sY0FBYyxJQUFJLE1BQU0sUUFBUyxDQUFDLFFBQVMsR0FBTSxXQUFZLEVBQUssQ0FBQyxDQUFDLENBQzVFLENBQUMsQ0FFTCxDQUFDLENBQ0gsQ0FFQSxTQUFTdEgsRUFBSXFCLEVBQU9uQixFQUFXSixFQUFTLENBQ3RDLEdBQUdJLElBQWMsUUFBVUEsSUFBYyxXQUFhLE9BQU9KLEVBQVMsRUFFdEUsSUFBSWtJLEVBQWMsS0FBSyxRQUFRQyxFQUFZLEVBQ3ZDQyxFQUFjLEtBQUssUUFBUUMsRUFBWSxFQUN2Q0MsRUFBa0IsS0FBSyxTQUFTLFNBQVMsU0FBUyxFQUNsREMsRUFBa0IsS0FBSyxTQUFTLFNBQVMsU0FBUyxFQUV0RCxLQUFLLGFBQWFySSxFQUFJSSxHQUFRLENBQzVCLElBQUlrSSxFQUFjLElBQU0sQ0FBQ2xJLEVBQUssWUFBWSxHQUFLLFNBQVMsS0FBSyxTQUFTSixDQUFFLEVBQ3hFcUMsRUFBSSxTQUFTckMsRUFBSXFCLEVBQU8yRyxFQUFhSSxFQUFpQkYsRUFBYUcsRUFBaUJDLEVBQWEsSUFBTSxDQUNyR3hJLEVBQVMsQ0FDWCxDQUFDLENBQ0gsQ0FBQyxDQUNILENBRUEsY0FBY0EsRUFBUyxDQUNyQixLQUFLLFNBQVcsR0FDaEJBLEVBQVMsRUFDVCxLQUFLLFNBQVcsRUFDbEIsQ0FFQSxHQUFHdUIsRUFBT3ZCLEVBQVMsQ0FDakIsS0FBSyxnQkFBZ0IsSUFBSXVCLENBQUssRUFDOUIsT0FBTyxpQkFBaUJBLEVBQU9sQixHQUFLLENBQzlCLEtBQUssVUFBV0wsRUFBU0ssQ0FBQyxDQUNoQyxDQUFDLENBQ0gsQ0FFQSxtQkFBbUJvSSxFQUFVQyxFQUFPQyxFQUFhLENBQy9DLElBQUlDLEVBQU0sS0FBSyxhQUFhLG1CQUM1QixPQUFPQSxFQUFNQSxFQUFJSCxFQUFVQyxFQUFPQyxDQUFZLEVBQUlBLEVBQWEsQ0FDakUsQ0FDRixFQUVNcEosR0FBTixLQUFvQixDQUNsQixhQUFhLENBQ1gsS0FBSyxZQUFjLElBQUksSUFDdkIsS0FBSyxXQUFhLENBQUMsQ0FDckIsQ0FFQSxPQUFPLENBQ0wsS0FBSyxZQUFZLFFBQVFzSixHQUFTLENBQ2hDLGFBQWFBLENBQUssRUFDbEIsS0FBSyxZQUFZLE9BQU9BLENBQUssQ0FDL0IsQ0FBQyxFQUNELEtBQUssZ0JBQWdCLENBQ3ZCLENBRUEsTUFBTTdJLEVBQVMsQ0FDVixLQUFLLEtBQUssSUFBTSxFQUNqQkEsRUFBUyxFQUVULEtBQUssY0FBY0EsQ0FBUSxDQUUvQixDQUVBLGNBQWNtQixFQUFNQyxFQUFTQyxFQUFPLENBQ2xDRCxFQUFRLEVBQ1IsSUFBSXlILEVBQVEsV0FBVyxJQUFNLENBQzNCLEtBQUssWUFBWSxPQUFPQSxDQUFLLEVBQzdCeEgsRUFBTyxFQUNQLEtBQUssZ0JBQWdCLENBQ3ZCLEVBQUdGLENBQUksRUFDUCxLQUFLLFlBQVksSUFBSTBILENBQUssQ0FDNUIsQ0FFQSxjQUFjQyxFQUFHLENBQUUsS0FBSyxXQUFXLEtBQUtBLENBQUUsQ0FBRSxDQUU1QyxNQUFNLENBQUUsT0FBTyxLQUFLLFlBQVksSUFBSyxDQUVyQyxpQkFBaUIsQ0FDZixHQUFHLEtBQUssS0FBSyxFQUFJLEVBQUksT0FDckIsSUFBSUEsRUFBSyxLQUFLLFdBQVcsTUFBTSxFQUM1QkEsSUFDREEsRUFBRyxFQUNILEtBQUssZ0JBQWdCLEVBRXpCLENBQ0YsRUUzK0JBLElBQUFDLEdBQW1CLFNDaEJuQixTQUFTQyxHQUFRQyxFQUFRQyxFQUFnQixDQUN2QyxJQUFJQyxFQUFPLE9BQU8sS0FBS0YsQ0FBTSxFQUM3QixHQUFJLE9BQU8sc0JBQXVCLENBQ2hDLElBQUlHLEVBQVUsT0FBTyxzQkFBc0JILENBQU0sRUFDN0NDLElBQ0ZFLEVBQVVBLEVBQVEsT0FBTyxTQUFVQyxFQUFLLENBQ3RDLE9BQU8sT0FBTyx5QkFBeUJKLEVBQVFJLENBQUcsRUFBRSxVQUN0RCxDQUFDLEdBRUhGLEVBQUssS0FBSyxNQUFNQSxFQUFNQyxDQUFPLEVBRS9CLE9BQU9ELENBQ1QsQ0FDQSxTQUFTRyxHQUFlQyxFQUFRLENBQzlCLFFBQVNDLEVBQUksRUFBR0EsRUFBSSxVQUFVLE9BQVFBLElBQUssQ0FDekMsSUFBSUMsRUFBUyxVQUFVRCxDQUFDLEdBQUssS0FBTyxVQUFVQSxDQUFDLEVBQUksQ0FBQyxFQUNoREEsRUFBSSxFQUNOUixHQUFRLE9BQU9TLENBQU0sRUFBRyxFQUFJLEVBQUUsUUFBUSxTQUFVQyxFQUFLLENBQ25EQyxHQUFnQkosRUFBUUcsRUFBS0QsRUFBT0MsQ0FBRyxDQUFDLENBQzFDLENBQUMsRUFDUSxPQUFPLDBCQUNoQixPQUFPLGlCQUFpQkgsRUFBUSxPQUFPLDBCQUEwQkUsQ0FBTSxDQUFDLEVBRXhFVCxHQUFRLE9BQU9TLENBQU0sQ0FBQyxFQUFFLFFBQVEsU0FBVUMsRUFBSyxDQUM3QyxPQUFPLGVBQWVILEVBQVFHLEVBQUssT0FBTyx5QkFBeUJELEVBQVFDLENBQUcsQ0FBQyxDQUNqRixDQUFDLEVBR0wsT0FBT0gsQ0FDVCxDQUNBLFNBQVNLLEdBQVFDLEVBQUssQ0FHcEIsT0FBSSxPQUFPLFFBQVcsWUFBYyxPQUFPLE9BQU8sVUFBYSxTQUM3REQsR0FBVSxTQUFVQyxFQUFLLENBQ3ZCLE9BQU8sT0FBT0EsQ0FDaEIsRUFFQUQsR0FBVSxTQUFVQyxFQUFLLENBQ3ZCLE9BQU9BLEdBQU8sT0FBTyxRQUFXLFlBQWNBLEVBQUksY0FBZ0IsUUFBVUEsSUFBUSxPQUFPLFVBQVksU0FBVyxPQUFPQSxDQUMzSCxFQUVLRCxHQUFRQyxDQUFHLENBQ3BCLENBQ0EsU0FBU0YsR0FBZ0JFLEVBQUtILEVBQUtJLEVBQU8sQ0FDeEMsT0FBSUosS0FBT0csRUFDVCxPQUFPLGVBQWVBLEVBQUtILEVBQUssQ0FDOUIsTUFBT0ksRUFDUCxXQUFZLEdBQ1osYUFBYyxHQUNkLFNBQVUsRUFDWixDQUFDLEVBRURELEVBQUlILENBQUcsRUFBSUksRUFFTkQsQ0FDVCxDQUNBLFNBQVNFLElBQVcsQ0FDbEIsT0FBQUEsR0FBVyxPQUFPLFFBQVUsU0FBVVIsRUFBUSxDQUM1QyxRQUFTQyxFQUFJLEVBQUdBLEVBQUksVUFBVSxPQUFRQSxJQUFLLENBQ3pDLElBQUlDLEVBQVMsVUFBVUQsQ0FBQyxFQUN4QixRQUFTRSxLQUFPRCxFQUNWLE9BQU8sVUFBVSxlQUFlLEtBQUtBLEVBQVFDLENBQUcsSUFDbERILEVBQU9HLENBQUcsRUFBSUQsRUFBT0MsQ0FBRyxHQUk5QixPQUFPSCxDQUNULEVBQ09RLEdBQVMsTUFBTSxLQUFNLFNBQVMsQ0FDdkMsQ0FDQSxTQUFTQyxHQUE4QlAsRUFBUVEsRUFBVSxDQUN2RCxHQUFJUixHQUFVLEtBQU0sTUFBTyxDQUFDLEVBQzVCLElBQUlGLEVBQVMsQ0FBQyxFQUNWVyxFQUFhLE9BQU8sS0FBS1QsQ0FBTSxFQUMvQkMsRUFBS0YsRUFDVCxJQUFLQSxFQUFJLEVBQUdBLEVBQUlVLEVBQVcsT0FBUVYsSUFDakNFLEVBQU1RLEVBQVdWLENBQUMsRUFDZCxFQUFBUyxFQUFTLFFBQVFQLENBQUcsR0FBSyxLQUM3QkgsRUFBT0csQ0FBRyxFQUFJRCxFQUFPQyxDQUFHLEdBRTFCLE9BQU9ILENBQ1QsQ0FDQSxTQUFTWSxHQUF5QlYsRUFBUVEsRUFBVSxDQUNsRCxHQUFJUixHQUFVLEtBQU0sTUFBTyxDQUFDLEVBQzVCLElBQUlGLEVBQVNTLEdBQThCUCxFQUFRUSxDQUFRLEVBQ3ZEUCxFQUFLRixFQUNULEdBQUksT0FBTyxzQkFBdUIsQ0FDaEMsSUFBSVksRUFBbUIsT0FBTyxzQkFBc0JYLENBQU0sRUFDMUQsSUFBS0QsRUFBSSxFQUFHQSxFQUFJWSxFQUFpQixPQUFRWixJQUN2Q0UsRUFBTVUsRUFBaUJaLENBQUMsRUFDcEIsRUFBQVMsRUFBUyxRQUFRUCxDQUFHLEdBQUssSUFDeEIsT0FBTyxVQUFVLHFCQUFxQixLQUFLRCxFQUFRQyxDQUFHLElBQzNESCxFQUFPRyxDQUFHLEVBQUlELEVBQU9DLENBQUcsR0FHNUIsT0FBT0gsQ0FDVCxDQTJCQSxJQUFJYyxHQUFVLFNBRWQsU0FBU0MsR0FBVUMsRUFBUyxDQUMxQixHQUFJLE9BQU8sT0FBVyxLQUFlLE9BQU8sVUFDMUMsTUFBTyxDQUFDLENBQWUsVUFBVSxVQUFVLE1BQU1BLENBQU8sQ0FFNUQsQ0FDQSxJQUFJQyxHQUFhRixHQUFVLHVEQUF1RCxFQUM5RUcsR0FBT0gsR0FBVSxPQUFPLEVBQ3hCSSxHQUFVSixHQUFVLFVBQVUsRUFDOUJLLEdBQVNMLEdBQVUsU0FBUyxHQUFLLENBQUNBLEdBQVUsU0FBUyxHQUFLLENBQUNBLEdBQVUsVUFBVSxFQUMvRU0sR0FBTU4sR0FBVSxpQkFBaUIsRUFDakNPLEdBQW1CUCxHQUFVLFNBQVMsR0FBS0EsR0FBVSxVQUFVLEVBRS9EUSxHQUFjLENBQ2hCLFFBQVMsR0FDVCxRQUFTLEVBQ1gsRUFDQSxTQUFTQyxHQUFHQyxFQUFJQyxFQUFPQyxFQUFJLENBQ3pCRixFQUFHLGlCQUFpQkMsRUFBT0MsRUFBSSxDQUFDVixJQUFjTSxFQUFXLENBQzNELENBQ0EsU0FBU0ssR0FBSUgsRUFBSUMsRUFBT0MsRUFBSSxDQUMxQkYsRUFBRyxvQkFBb0JDLEVBQU9DLEVBQUksQ0FBQ1YsSUFBY00sRUFBVyxDQUM5RCxDQUNBLFNBQVNNLEdBQXlCSixFQUFlSyxFQUFVLENBQ3pELEdBQUtBLEVBRUwsSUFEQUEsRUFBUyxDQUFDLElBQU0sTUFBUUEsRUFBV0EsRUFBUyxVQUFVLENBQUMsR0FDbkRMLEVBQ0YsR0FBSSxDQUNGLEdBQUlBLEVBQUcsUUFDTCxPQUFPQSxFQUFHLFFBQVFLLENBQVEsRUFDckIsR0FBSUwsRUFBRyxrQkFDWixPQUFPQSxFQUFHLGtCQUFrQkssQ0FBUSxFQUMvQixHQUFJTCxFQUFHLHNCQUNaLE9BQU9BLEVBQUcsc0JBQXNCSyxDQUFRLENBRTVDLE1BQUUsQ0FDQSxNQUFPLEVBQ1QsQ0FFRixNQUFPLEdBQ1QsQ0FDQSxTQUFTQyxHQUFnQk4sRUFBSSxDQUMzQixPQUFPQSxFQUFHLE1BQVFBLElBQU8sVUFBWUEsRUFBRyxLQUFLLFNBQVdBLEVBQUcsS0FBT0EsRUFBRyxVQUN2RSxDQUNBLFNBQVNPLEdBQXlCUCxFQUFlSyxFQUEwQkcsRUFBS0MsRUFBWSxDQUMxRixHQUFJVCxFQUFJLENBQ05RLEVBQU1BLEdBQU8sU0FDYixFQUFHLENBQ0QsR0FBSUgsR0FBWSxPQUFTQSxFQUFTLENBQUMsSUFBTSxJQUFNTCxFQUFHLGFBQWVRLEdBQU9KLEdBQVFKLEVBQUlLLENBQVEsRUFBSUQsR0FBUUosRUFBSUssQ0FBUSxJQUFNSSxHQUFjVCxJQUFPUSxFQUM3SSxPQUFPUixFQUVULEdBQUlBLElBQU9RLEVBQUssWUFFVFIsRUFBS00sR0FBZ0JOLENBQUUsR0FFbEMsT0FBTyxJQUNULENBQ0EsSUFBSVUsR0FBVSxPQUNkLFNBQVNDLEdBQVlYLEVBQUlZLEVBQU1DLEVBQU8sQ0FDcEMsR0FBSWIsR0FBTVksRUFDUixHQUFJWixFQUFHLFVBQ0xBLEVBQUcsVUFBVWEsRUFBUSxNQUFRLFFBQVEsRUFBRUQsQ0FBSSxNQUN0QyxDQUNMLElBQUlFLEdBQWEsSUFBTWQsRUFBRyxVQUFZLEtBQUssUUFBUVUsR0FBUyxHQUFHLEVBQUUsUUFBUSxJQUFNRSxFQUFPLElBQUssR0FBRyxFQUM5RlosRUFBRyxXQUFhYyxHQUFhRCxFQUFRLElBQU1ELEVBQU8sS0FBSyxRQUFRRixHQUFTLEdBQUcsRUFHakYsQ0FDQSxTQUFTSyxHQUFJZixFQUFJZ0IsRUFBTUMsRUFBSyxDQUMxQixJQUFJQyxFQUFRbEIsR0FBTUEsRUFBRyxNQUNyQixHQUFJa0IsRUFBTyxDQUNULEdBQUlELElBQVEsT0FDVixPQUFJLFNBQVMsYUFBZSxTQUFTLFlBQVksaUJBQy9DQSxFQUFNLFNBQVMsWUFBWSxpQkFBaUJqQixFQUFJLEVBQUUsRUFDekNBLEVBQUcsZUFDWmlCLEVBQU1qQixFQUFHLGNBRUpnQixJQUFTLE9BQVNDLEVBQU1BLEVBQUlELENBQUksRUFFbkMsRUFBRUEsS0FBUUUsSUFBVUYsRUFBSyxRQUFRLFFBQVEsSUFBTSxLQUNqREEsRUFBTyxXQUFhQSxHQUV0QkUsRUFBTUYsQ0FBSSxFQUFJQyxHQUFPLE9BQU9BLEdBQVEsU0FBVyxHQUFLLE1BRzFELENBQ0EsU0FBU0UsR0FBT25CLEVBQUlvQixFQUFVLENBQzVCLElBQUlDLEVBQW9CLEdBQ3hCLEdBQUksT0FBT3JCLEdBQU8sU0FDaEJxQixFQUFvQnJCLE1BRXBCLEdBQUcsQ0FDRCxJQUFJc0IsRUFBWVAsR0FBSWYsRUFBSSxXQUFXLEVBQy9Cc0IsR0FBYUEsSUFBYyxTQUM3QkQsRUFBb0JDLEVBQVksSUFBTUQsU0FHakMsQ0FBQ0QsSUFBYXBCLEVBQUtBLEVBQUcsYUFFakMsSUFBSXVCLEVBQVcsT0FBTyxXQUFhLE9BQU8saUJBQW1CLE9BQU8sV0FBYSxPQUFPLFlBRXhGLE9BQU9BLEdBQVksSUFBSUEsRUFBU0YsQ0FBaUIsQ0FDbkQsQ0FDQSxTQUFTRyxHQUFLaEIsRUFBS2lCLEVBQVNDLEVBQVUsQ0FDcEMsR0FBSWxCLEVBQUssQ0FDUCxJQUFJbUIsRUFBT25CLEVBQUkscUJBQXFCaUIsQ0FBTyxFQUN6Q0csRUFBSSxFQUNKQyxFQUFJRixFQUFLLE9BQ1gsR0FBSUQsRUFDRixLQUFPRSxFQUFJQyxFQUFHRCxJQUNaRixFQUFTQyxFQUFLQyxDQUFDLEVBQUdBLENBQUMsRUFHdkIsT0FBT0QsRUFFVCxNQUFPLENBQUMsQ0FDVixDQUNBLFNBQVNHLElBQTRCLENBQ25DLElBQUlDLEVBQW1CLFNBQVMsaUJBQ2hDLE9BQUlBLEdBR0ssU0FBUyxlQUVwQixDQVdBLFNBQVNDLEdBQVFoQyxFQUFJaUMsRUFBMkJDLEVBQTJCQyxFQUFXQyxFQUFXLENBQy9GLEdBQUksR0FBQ3BDLEVBQUcsdUJBQXlCQSxJQUFPLFFBQ3hDLEtBQUlxQyxFQUFRQyxFQUFLQyxFQUFNQyxFQUFRQyxFQUFPQyxFQUFRQyxFQWlCOUMsR0FoQkkzQyxJQUFPLFFBQVVBLEVBQUcsWUFBY0EsSUFBTzhCLEdBQTBCLEdBQ3JFTyxFQUFTckMsRUFBRyxzQkFBc0IsRUFDbENzQyxFQUFNRCxFQUFPLElBQ2JFLEVBQU9GLEVBQU8sS0FDZEcsRUFBU0gsRUFBTyxPQUNoQkksRUFBUUosRUFBTyxNQUNmSyxFQUFTTCxFQUFPLE9BQ2hCTSxFQUFRTixFQUFPLFFBRWZDLEVBQU0sRUFDTkMsRUFBTyxFQUNQQyxFQUFTLE9BQU8sWUFDaEJDLEVBQVEsT0FBTyxXQUNmQyxFQUFTLE9BQU8sWUFDaEJDLEVBQVEsT0FBTyxhQUVaVixHQUE2QkMsSUFBOEJsQyxJQUFPLFNBRXJFb0MsRUFBWUEsR0FBYXBDLEVBQUcsV0FJeEIsQ0FBQ1IsSUFDSCxFQUNFLElBQUk0QyxHQUFhQSxFQUFVLHdCQUEwQnJCLEdBQUlxQixFQUFXLFdBQVcsSUFBTSxRQUFVRixHQUE2Qm5CLEdBQUlxQixFQUFXLFVBQVUsSUFBTSxVQUFXLENBQ3BLLElBQUlRLEVBQWdCUixFQUFVLHNCQUFzQixFQUdwREUsR0FBT00sRUFBYyxJQUFNLFNBQVM3QixHQUFJcUIsRUFBVyxrQkFBa0IsQ0FBQyxFQUN0RUcsR0FBUUssRUFBYyxLQUFPLFNBQVM3QixHQUFJcUIsRUFBVyxtQkFBbUIsQ0FBQyxFQUN6RUksRUFBU0YsRUFBTUQsRUFBTyxPQUN0QkksRUFBUUYsRUFBT0YsRUFBTyxNQUN0QixZQUdLRCxFQUFZQSxFQUFVLFlBR25DLEdBQUlELEdBQWFuQyxJQUFPLE9BQVEsQ0FFOUIsSUFBSTZDLEVBQVcxQixHQUFPaUIsR0FBYXBDLENBQUUsRUFDbkM4QyxFQUFTRCxHQUFZQSxFQUFTLEVBQzlCRSxFQUFTRixHQUFZQSxFQUFTLEVBQzVCQSxJQUNGUCxHQUFPUyxFQUNQUixHQUFRTyxFQUNSSCxHQUFTRyxFQUNUSixHQUFVSyxFQUNWUCxFQUFTRixFQUFNSSxFQUNmRCxFQUFRRixFQUFPSSxHQUduQixNQUFPLENBQ0wsSUFBS0wsRUFDTCxLQUFNQyxFQUNOLE9BQVFDLEVBQ1IsTUFBT0MsRUFDUCxNQUFPRSxFQUNQLE9BQVFELENBQ1YsRUFDRixDQVNBLFNBQVNNLEdBQWVoRCxFQUFJaUQsRUFBUUMsRUFBWSxDQUs5QyxRQUpJQyxFQUFTQyxHQUEyQnBELEVBQUksRUFBSSxFQUM5Q3FELEVBQVlyQixHQUFRaEMsQ0FBRSxFQUFFaUQsQ0FBTSxFQUd6QkUsR0FBUSxDQUNiLElBQUlHLEVBQWdCdEIsR0FBUW1CLENBQU0sRUFBRUQsQ0FBVSxFQUM1Q0ssRUFBVSxPQU1aLEdBTElMLElBQWUsT0FBU0EsSUFBZSxPQUN6Q0ssRUFBVUYsR0FBYUMsRUFFdkJDLEVBQVVGLEdBQWFDLEVBRXJCLENBQUNDLEVBQVMsT0FBT0osRUFDckIsR0FBSUEsSUFBV3JCLEdBQTBCLEVBQUcsTUFDNUNxQixFQUFTQyxHQUEyQkQsRUFBUSxFQUFLLEVBRW5ELE1BQU8sRUFDVCxDQVVBLFNBQVNLLEdBQVN4RCxFQUFJeUQsRUFBVUMsRUFBU0MsRUFBZSxDQUl0RCxRQUhJQyxFQUFlLEVBQ2pCaEMsRUFBSSxFQUNKaUMsRUFBVzdELEVBQUcsU0FDVDRCLEVBQUlpQyxFQUFTLFFBQVEsQ0FDMUIsR0FBSUEsRUFBU2pDLENBQUMsRUFBRSxNQUFNLFVBQVksUUFBVWlDLEVBQVNqQyxDQUFDLElBQU1rQyxHQUFTLFFBQVVILEdBQWlCRSxFQUFTakMsQ0FBQyxJQUFNa0MsR0FBUyxVQUFZdkQsR0FBUXNELEVBQVNqQyxDQUFDLEVBQUc4QixFQUFRLFVBQVcxRCxFQUFJLEVBQUssRUFBRyxDQUN2TCxHQUFJNEQsSUFBaUJILEVBQ25CLE9BQU9JLEVBQVNqQyxDQUFDLEVBRW5CZ0MsSUFFRmhDLElBRUYsT0FBTyxJQUNULENBUUEsU0FBU21DLEdBQVUvRCxFQUFJSyxFQUFVLENBRS9CLFFBREkyRCxFQUFPaEUsRUFBRyxpQkFDUGdFLElBQVNBLElBQVNGLEdBQVMsT0FBUy9DLEdBQUlpRCxFQUFNLFNBQVMsSUFBTSxRQUFVM0QsR0FBWSxDQUFDRCxHQUFRNEQsRUFBTTNELENBQVEsSUFDL0cyRCxFQUFPQSxFQUFLLHVCQUVkLE9BQU9BLEdBQVEsSUFDakIsQ0FTQSxTQUFTQyxHQUFNakUsRUFBSUssRUFBVSxDQUMzQixJQUFJNEQsRUFBUSxFQUNaLEdBQUksQ0FBQ2pFLEdBQU0sQ0FBQ0EsRUFBRyxXQUNiLE1BQU8sR0FJVCxLQUFPQSxFQUFLQSxFQUFHLHdCQUNUQSxFQUFHLFNBQVMsWUFBWSxJQUFNLFlBQWNBLElBQU84RCxHQUFTLFFBQVUsQ0FBQ3pELEdBQVlELEdBQVFKLEVBQUlLLENBQVEsSUFDekc0RCxJQUdKLE9BQU9BLENBQ1QsQ0FRQSxTQUFTQyxHQUF3QmxFLEVBQUksQ0FDbkMsSUFBSW1FLEVBQWEsRUFDZkMsRUFBWSxFQUNaQyxFQUFjdkMsR0FBMEIsRUFDMUMsR0FBSTlCLEVBQ0YsRUFBRyxDQUNELElBQUk2QyxFQUFXMUIsR0FBT25CLENBQUUsRUFDdEI4QyxFQUFTRCxFQUFTLEVBQ2xCRSxFQUFTRixFQUFTLEVBQ3BCc0IsR0FBY25FLEVBQUcsV0FBYThDLEVBQzlCc0IsR0FBYXBFLEVBQUcsVUFBWStDLFFBQ3JCL0MsSUFBT3FFLElBQWdCckUsRUFBS0EsRUFBRyxhQUUxQyxNQUFPLENBQUNtRSxFQUFZQyxDQUFTLENBQy9CLENBUUEsU0FBU0UsR0FBY0MsRUFBS0MsRUFBSyxDQUMvQixRQUFTNUMsS0FBSzJDLEVBQ1osR0FBS0EsRUFBSSxlQUFlM0MsQ0FBQyxHQUN6QixRQUFTNkMsS0FBT0QsRUFDZCxHQUFJQSxFQUFJLGVBQWVDLENBQUcsR0FBS0QsRUFBSUMsQ0FBRyxJQUFNRixFQUFJM0MsQ0FBQyxFQUFFNkMsQ0FBRyxFQUFHLE9BQU8sT0FBTzdDLENBQUMsRUFHNUUsTUFBTyxFQUNULENBQ0EsU0FBU3dCLEdBQTJCcEQsRUFBSTBFLEVBQWEsQ0FFbkQsR0FBSSxDQUFDMUUsR0FBTSxDQUFDQSxFQUFHLHNCQUF1QixPQUFPOEIsR0FBMEIsRUFDdkUsSUFBSTZDLEVBQU8zRSxFQUNQNEUsRUFBVSxHQUNkLEVBRUUsSUFBSUQsRUFBSyxZQUFjQSxFQUFLLGFBQWVBLEVBQUssYUFBZUEsRUFBSyxhQUFjLENBQ2hGLElBQUlFLEVBQVU5RCxHQUFJNEQsQ0FBSSxFQUN0QixHQUFJQSxFQUFLLFlBQWNBLEVBQUssY0FBZ0JFLEVBQVEsV0FBYSxRQUFVQSxFQUFRLFdBQWEsV0FBYUYsRUFBSyxhQUFlQSxFQUFLLGVBQWlCRSxFQUFRLFdBQWEsUUFBVUEsRUFBUSxXQUFhLFVBQVcsQ0FDcE4sR0FBSSxDQUFDRixFQUFLLHVCQUF5QkEsSUFBUyxTQUFTLEtBQU0sT0FBTzdDLEdBQTBCLEVBQzVGLEdBQUk4QyxHQUFXRixFQUFhLE9BQU9DLEVBQ25DQyxFQUFVLFVBSVBELEVBQU9BLEVBQUssWUFDckIsT0FBTzdDLEdBQTBCLENBQ25DLENBQ0EsU0FBU2dELEdBQU9DLEVBQUtDLEVBQUssQ0FDeEIsR0FBSUQsR0FBT0MsRUFDVCxRQUFTUCxLQUFPTyxFQUNWQSxFQUFJLGVBQWVQLENBQUcsSUFDeEJNLEVBQUlOLENBQUcsRUFBSU8sRUFBSVAsQ0FBRyxHQUl4QixPQUFPTSxDQUNULENBQ0EsU0FBU0UsR0FBWUMsRUFBT0MsRUFBTyxDQUNqQyxPQUFPLEtBQUssTUFBTUQsRUFBTSxHQUFHLElBQU0sS0FBSyxNQUFNQyxFQUFNLEdBQUcsR0FBSyxLQUFLLE1BQU1ELEVBQU0sSUFBSSxJQUFNLEtBQUssTUFBTUMsRUFBTSxJQUFJLEdBQUssS0FBSyxNQUFNRCxFQUFNLE1BQU0sSUFBTSxLQUFLLE1BQU1DLEVBQU0sTUFBTSxHQUFLLEtBQUssTUFBTUQsRUFBTSxLQUFLLElBQU0sS0FBSyxNQUFNQyxFQUFNLEtBQUssQ0FDNU4sQ0FDQSxJQUFJQyxHQUNKLFNBQVNDLEdBQVNDLEVBQVVDLEVBQUksQ0FDOUIsT0FBTyxVQUFZLENBQ2pCLEdBQUksQ0FBQ0gsR0FBa0IsQ0FDckIsSUFBSUksRUFBTyxVQUNUQyxFQUFRLEtBQ05ELEVBQUssU0FBVyxFQUNsQkYsRUFBUyxLQUFLRyxFQUFPRCxFQUFLLENBQUMsQ0FBQyxFQUU1QkYsRUFBUyxNQUFNRyxFQUFPRCxDQUFJLEVBRTVCSixHQUFtQixXQUFXLFVBQVksQ0FDeENBLEdBQW1CLE1BQ3JCLEVBQUdHLENBQUUsRUFFVCxDQUNGLENBQ0EsU0FBU0csSUFBaUIsQ0FDeEIsYUFBYU4sRUFBZ0IsRUFDN0JBLEdBQW1CLE1BQ3JCLENBQ0EsU0FBU08sR0FBUzNGLEVBQUk0RixFQUFHQyxFQUFHLENBQzFCN0YsRUFBRyxZQUFjNEYsRUFDakI1RixFQUFHLFdBQWE2RixDQUNsQixDQUNBLFNBQVNDLEdBQU05RixFQUFJLENBQ2pCLElBQUkrRixFQUFVLE9BQU8sUUFDakJDLEVBQUksT0FBTyxRQUFVLE9BQU8sTUFDaEMsT0FBSUQsR0FBV0EsRUFBUSxJQUNkQSxFQUFRLElBQUkvRixDQUFFLEVBQUUsVUFBVSxFQUFJLEVBQzVCZ0csRUFDRkEsRUFBRWhHLENBQUUsRUFBRSxNQUFNLEVBQUksRUFBRSxDQUFDLEVBRW5CQSxFQUFHLFVBQVUsRUFBSSxDQUU1QixDQWVBLFNBQVNpRyxHQUFrQ0MsRUFBV0MsRUFBU0MsRUFBUyxDQUN0RSxJQUFJQyxFQUFPLENBQUMsRUFDWixhQUFNLEtBQUtILEVBQVUsUUFBUSxFQUFFLFFBQVEsU0FBVUksRUFBTyxDQUN0RCxJQUFJQyxFQUFZQyxFQUFXQyxFQUFhQyxFQUN4QyxHQUFJLEdBQUNDLEdBQVFMLEVBQU9ILEVBQVEsVUFBV0QsRUFBVyxFQUFLLEdBQUtJLEVBQU0sVUFBWUEsSUFBVUYsR0FDeEYsS0FBSVEsRUFBWUMsR0FBUVAsQ0FBSyxFQUM3QkQsRUFBSyxLQUFPLEtBQUssS0FBS0UsRUFBYUYsRUFBSyxRQUFVLE1BQVFFLElBQWUsT0FBU0EsRUFBYSxJQUFVSyxFQUFVLElBQUksRUFDdkhQLEVBQUssSUFBTSxLQUFLLEtBQUtHLEVBQVlILEVBQUssT0FBUyxNQUFRRyxJQUFjLE9BQVNBLEVBQVksSUFBVUksRUFBVSxHQUFHLEVBQ2pIUCxFQUFLLE1BQVEsS0FBSyxLQUFLSSxFQUFjSixFQUFLLFNBQVcsTUFBUUksSUFBZ0IsT0FBU0EsRUFBYyxLQUFXRyxFQUFVLEtBQUssRUFDOUhQLEVBQUssT0FBUyxLQUFLLEtBQUtLLEVBQWVMLEVBQUssVUFBWSxNQUFRSyxJQUFpQixPQUFTQSxFQUFlLEtBQVdFLEVBQVUsTUFBTSxFQUN0SSxDQUFDLEVBQ0RQLEVBQUssTUFBUUEsRUFBSyxNQUFRQSxFQUFLLEtBQy9CQSxFQUFLLE9BQVNBLEVBQUssT0FBU0EsRUFBSyxJQUNqQ0EsRUFBSyxFQUFJQSxFQUFLLEtBQ2RBLEVBQUssRUFBSUEsRUFBSyxJQUNQQSxDQUNULENBQ0EsSUFBSVMsR0FBVSxXQUFhLElBQUksS0FBSyxFQUFFLFFBQVEsRUFFOUMsU0FBU0MsSUFBd0IsQ0FDL0IsSUFBSUMsRUFBa0IsQ0FBQyxFQUNyQkMsRUFDRixNQUFPLENBQ0wsc0JBQXVCLFVBQWlDLENBRXRELEdBREFELEVBQWtCLENBQUMsRUFDZixFQUFDLEtBQUssUUFBUSxVQUNsQixLQUFJRSxFQUFXLENBQUMsRUFBRSxNQUFNLEtBQUssS0FBSyxHQUFHLFFBQVEsRUFDN0NBLEVBQVMsUUFBUSxTQUFVWixFQUFPLENBQ2hDLEdBQUksRUFBQWEsR0FBSWIsRUFBTyxTQUFTLElBQU0sUUFBVUEsSUFBVWMsR0FBUyxPQUMzRCxDQUFBSixFQUFnQixLQUFLLENBQ25CLE9BQVFWLEVBQ1IsS0FBTU8sR0FBUVAsQ0FBSyxDQUNyQixDQUFDLEVBQ0QsSUFBSWUsRUFBV0MsR0FBZSxDQUFDLEVBQUdOLEVBQWdCQSxFQUFnQixPQUFTLENBQUMsRUFBRSxJQUFJLEVBR2xGLEdBQUlWLEVBQU0sc0JBQXVCLENBQy9CLElBQUlpQixFQUFjQyxHQUFPbEIsRUFBTyxFQUFJLEVBQ2hDaUIsSUFDRkYsRUFBUyxLQUFPRSxFQUFZLEVBQzVCRixFQUFTLE1BQVFFLEVBQVksR0FHakNqQixFQUFNLFNBQVdlLEVBQ25CLENBQUMsRUFDSCxFQUNBLGtCQUFtQixTQUEyQkksRUFBTyxDQUNuRFQsRUFBZ0IsS0FBS1MsQ0FBSyxDQUM1QixFQUNBLHFCQUFzQixTQUE4QkMsRUFBUSxDQUMxRFYsRUFBZ0IsT0FBT1csR0FBY1gsRUFBaUIsQ0FDcEQsT0FBUVUsQ0FDVixDQUFDLEVBQUcsQ0FBQyxDQUNQLEVBQ0EsV0FBWSxTQUFvQkUsRUFBVSxDQUN4QyxJQUFJQyxFQUFRLEtBQ1osR0FBSSxDQUFDLEtBQUssUUFBUSxVQUFXLENBQzNCLGFBQWFaLENBQW1CLEVBQzVCLE9BQU9XLEdBQWEsWUFBWUEsRUFBUyxFQUM3QyxPQUVGLElBQUlFLEVBQVksR0FDZEMsRUFBZ0IsRUFDbEJmLEVBQWdCLFFBQVEsU0FBVVMsRUFBTyxDQUN2QyxJQUFJTyxFQUFPLEVBQ1ROLEVBQVNELEVBQU0sT0FDZkosRUFBV0ssRUFBTyxTQUNsQk8sRUFBU3BCLEdBQVFhLENBQU0sRUFDdkJRLEVBQWVSLEVBQU8sYUFDdEJTLEVBQWFULEVBQU8sV0FDcEJVLEVBQWdCWCxFQUFNLEtBQ3RCWSxFQUFlYixHQUFPRSxFQUFRLEVBQUksRUFDaENXLElBRUZKLEVBQU8sS0FBT0ksRUFBYSxFQUMzQkosRUFBTyxNQUFRSSxFQUFhLEdBRTlCWCxFQUFPLE9BQVNPLEVBQ1pQLEVBQU8sdUJBRUxZLEdBQVlKLEVBQWNELENBQU0sR0FBSyxDQUFDSyxHQUFZakIsRUFBVVksQ0FBTSxJQUVyRUcsRUFBYyxJQUFNSCxFQUFPLE1BQVFHLEVBQWMsS0FBT0gsRUFBTyxTQUFXWixFQUFTLElBQU1ZLEVBQU8sTUFBUVosRUFBUyxLQUFPWSxFQUFPLFFBRTlIRCxFQUFPTyxHQUFrQkgsRUFBZUYsRUFBY0MsRUFBWU4sRUFBTSxPQUFPLEdBSzlFUyxHQUFZTCxFQUFRWixDQUFRLElBQy9CSyxFQUFPLGFBQWVMLEVBQ3RCSyxFQUFPLFdBQWFPLEVBQ2ZELElBQ0hBLEVBQU9ILEVBQU0sUUFBUSxXQUV2QkEsRUFBTSxRQUFRSCxFQUFRVSxFQUFlSCxFQUFRRCxDQUFJLEdBRS9DQSxJQUNGRixFQUFZLEdBQ1pDLEVBQWdCLEtBQUssSUFBSUEsRUFBZUMsQ0FBSSxFQUM1QyxhQUFhTixFQUFPLG1CQUFtQixFQUN2Q0EsRUFBTyxvQkFBc0IsV0FBVyxVQUFZLENBQ2xEQSxFQUFPLGNBQWdCLEVBQ3ZCQSxFQUFPLGFBQWUsS0FDdEJBLEVBQU8sU0FBVyxLQUNsQkEsRUFBTyxXQUFhLEtBQ3BCQSxFQUFPLHNCQUF3QixJQUNqQyxFQUFHTSxDQUFJLEVBQ1BOLEVBQU8sc0JBQXdCTSxFQUVuQyxDQUFDLEVBQ0QsYUFBYWYsQ0FBbUIsRUFDM0JhLEVBR0hiLEVBQXNCLFdBQVcsVUFBWSxDQUN2QyxPQUFPVyxHQUFhLFlBQVlBLEVBQVMsQ0FDL0MsRUFBR0csQ0FBYSxFQUpaLE9BQU9ILEdBQWEsWUFBWUEsRUFBUyxFQU0vQ1osRUFBa0IsQ0FBQyxDQUNyQixFQUNBLFFBQVMsU0FBaUJVLEVBQVFjLEVBQWFQLEVBQVFRLEVBQVUsQ0FDL0QsR0FBSUEsRUFBVSxDQUNadEIsR0FBSU8sRUFBUSxhQUFjLEVBQUUsRUFDNUJQLEdBQUlPLEVBQVEsWUFBYSxFQUFFLEVBQzNCLElBQUlnQixFQUFXbEIsR0FBTyxLQUFLLEVBQUUsRUFDM0JtQixFQUFTRCxHQUFZQSxFQUFTLEVBQzlCRSxFQUFTRixHQUFZQSxFQUFTLEVBQzlCRyxHQUFjTCxFQUFZLEtBQU9QLEVBQU8sT0FBU1UsR0FBVSxHQUMzREcsR0FBY04sRUFBWSxJQUFNUCxFQUFPLE1BQVFXLEdBQVUsR0FDM0RsQixFQUFPLFdBQWEsQ0FBQyxDQUFDbUIsRUFDdEJuQixFQUFPLFdBQWEsQ0FBQyxDQUFDb0IsRUFDdEIzQixHQUFJTyxFQUFRLFlBQWEsZUFBaUJtQixFQUFhLE1BQVFDLEVBQWEsT0FBTyxFQUNuRixLQUFLLGdCQUFrQkMsR0FBUXJCLENBQU0sRUFFckNQLEdBQUlPLEVBQVEsYUFBYyxhQUFlZSxFQUFXLE1BQVEsS0FBSyxRQUFRLE9BQVMsSUFBTSxLQUFLLFFBQVEsT0FBUyxHQUFHLEVBQ2pIdEIsR0FBSU8sRUFBUSxZQUFhLG9CQUFvQixFQUM3QyxPQUFPQSxFQUFPLFVBQWEsVUFBWSxhQUFhQSxFQUFPLFFBQVEsRUFDbkVBLEVBQU8sU0FBVyxXQUFXLFVBQVksQ0FDdkNQLEdBQUlPLEVBQVEsYUFBYyxFQUFFLEVBQzVCUCxHQUFJTyxFQUFRLFlBQWEsRUFBRSxFQUMzQkEsRUFBTyxTQUFXLEdBQ2xCQSxFQUFPLFdBQWEsR0FDcEJBLEVBQU8sV0FBYSxFQUN0QixFQUFHZSxDQUFRLEVBRWYsQ0FDRixDQUNGLENBQ0EsU0FBU00sR0FBUXJCLEVBQVEsQ0FDdkIsT0FBT0EsRUFBTyxXQUNoQixDQUNBLFNBQVNhLEdBQWtCSCxFQUFlZixFQUFVWSxFQUFROUIsRUFBUyxDQUNuRSxPQUFPLEtBQUssS0FBSyxLQUFLLElBQUlrQixFQUFTLElBQU1lLEVBQWMsSUFBSyxDQUFDLEVBQUksS0FBSyxJQUFJZixFQUFTLEtBQU9lLEVBQWMsS0FBTSxDQUFDLENBQUMsRUFBSSxLQUFLLEtBQUssS0FBSyxJQUFJZixFQUFTLElBQU1ZLEVBQU8sSUFBSyxDQUFDLEVBQUksS0FBSyxJQUFJWixFQUFTLEtBQU9ZLEVBQU8sS0FBTSxDQUFDLENBQUMsRUFBSTlCLEVBQVEsU0FDN04sQ0FFQSxJQUFJNkMsR0FBVSxDQUFDLEVBQ1hDLEdBQVcsQ0FDYixvQkFBcUIsRUFDdkIsRUFDSUMsR0FBZ0IsQ0FDbEIsTUFBTyxTQUFlQyxFQUFRLENBRTVCLFFBQVNDLEtBQVVILEdBQ2JBLEdBQVMsZUFBZUcsQ0FBTSxHQUFLLEVBQUVBLEtBQVVELEtBQ2pEQSxFQUFPQyxDQUFNLEVBQUlILEdBQVNHLENBQU0sR0FHcENKLEdBQVEsUUFBUSxTQUFVSyxFQUFHLENBQzNCLEdBQUlBLEVBQUUsYUFBZUYsRUFBTyxXQUMxQixLQUFNLGlDQUFpQyxPQUFPQSxFQUFPLFdBQVksaUJBQWlCLENBRXRGLENBQUMsRUFDREgsR0FBUSxLQUFLRyxDQUFNLENBQ3JCLEVBQ0EsWUFBYSxTQUFxQkcsRUFBV0MsRUFBVUMsRUFBSyxDQUMxRCxJQUFJM0IsRUFBUSxLQUNaLEtBQUssY0FBZ0IsR0FDckIyQixFQUFJLE9BQVMsVUFBWSxDQUN2QjNCLEVBQU0sY0FBZ0IsRUFDeEIsRUFDQSxJQUFJNEIsRUFBa0JILEVBQVksU0FDbENOLEdBQVEsUUFBUSxTQUFVRyxFQUFRLENBQzNCSSxFQUFTSixFQUFPLFVBQVUsSUFFM0JJLEVBQVNKLEVBQU8sVUFBVSxFQUFFTSxDQUFlLEdBQzdDRixFQUFTSixFQUFPLFVBQVUsRUFBRU0sQ0FBZSxFQUFFbkMsR0FBZSxDQUMxRCxTQUFVaUMsQ0FDWixFQUFHQyxDQUFHLENBQUMsRUFLTEQsRUFBUyxRQUFRSixFQUFPLFVBQVUsR0FBS0ksRUFBU0osRUFBTyxVQUFVLEVBQUVHLENBQVMsR0FDOUVDLEVBQVNKLEVBQU8sVUFBVSxFQUFFRyxDQUFTLEVBQUVoQyxHQUFlLENBQ3BELFNBQVVpQyxDQUNaLEVBQUdDLENBQUcsQ0FBQyxFQUVYLENBQUMsQ0FDSCxFQUNBLGtCQUFtQixTQUEyQkQsRUFBVUcsRUFBSVQsRUFBVTlDLEVBQVMsQ0FDN0U2QyxHQUFRLFFBQVEsU0FBVUcsRUFBUSxDQUNoQyxJQUFJUSxFQUFhUixFQUFPLFdBQ3hCLEdBQUksR0FBQ0ksRUFBUyxRQUFRSSxDQUFVLEdBQUssQ0FBQ1IsRUFBTyxxQkFDN0MsS0FBSVMsRUFBYyxJQUFJVCxFQUFPSSxFQUFVRyxFQUFJSCxFQUFTLE9BQU8sRUFDM0RLLEVBQVksU0FBV0wsRUFDdkJLLEVBQVksUUFBVUwsRUFBUyxRQUMvQkEsRUFBU0ksQ0FBVSxFQUFJQyxFQUd2QkMsR0FBU1osRUFBVVcsRUFBWSxRQUFRLEVBQ3pDLENBQUMsRUFDRCxRQUFTUixLQUFVRyxFQUFTLFFBQzFCLEdBQUtBLEVBQVMsUUFBUSxlQUFlSCxDQUFNLEVBQzNDLEtBQUlVLEVBQVcsS0FBSyxhQUFhUCxFQUFVSCxFQUFRRyxFQUFTLFFBQVFILENBQU0sQ0FBQyxFQUN2RSxPQUFPVSxFQUFhLE1BQ3RCUCxFQUFTLFFBQVFILENBQU0sRUFBSVUsR0FHakMsRUFDQSxtQkFBb0IsU0FBNEJDLEVBQU1SLEVBQVUsQ0FDOUQsSUFBSVMsRUFBa0IsQ0FBQyxFQUN2QixPQUFBaEIsR0FBUSxRQUFRLFNBQVVHLEVBQVEsQ0FDNUIsT0FBT0EsRUFBTyxpQkFBb0IsWUFDdENVLEdBQVNHLEVBQWlCYixFQUFPLGdCQUFnQixLQUFLSSxFQUFTSixFQUFPLFVBQVUsRUFBR1ksQ0FBSSxDQUFDLENBQzFGLENBQUMsRUFDTUMsQ0FDVCxFQUNBLGFBQWMsU0FBc0JULEVBQVVRLEVBQU1FLEVBQU8sQ0FDekQsSUFBSUMsRUFDSixPQUFBbEIsR0FBUSxRQUFRLFNBQVVHLEVBQVEsQ0FFM0JJLEVBQVNKLEVBQU8sVUFBVSxHQUczQkEsRUFBTyxpQkFBbUIsT0FBT0EsRUFBTyxnQkFBZ0JZLENBQUksR0FBTSxhQUNwRUcsRUFBZ0JmLEVBQU8sZ0JBQWdCWSxDQUFJLEVBQUUsS0FBS1IsRUFBU0osRUFBTyxVQUFVLEVBQUdjLENBQUssRUFFeEYsQ0FBQyxFQUNNQyxDQUNULENBQ0YsRUFFQSxTQUFTQyxHQUFjQyxFQUFNLENBQzNCLElBQUliLEVBQVdhLEVBQUssU0FDbEJDLEVBQVNELEVBQUssT0FDZEwsRUFBT0ssRUFBSyxLQUNaRSxFQUFXRixFQUFLLFNBQ2hCRyxFQUFVSCxFQUFLLFFBQ2ZJLEVBQU9KLEVBQUssS0FDWkssRUFBU0wsRUFBSyxPQUNkTSxFQUFXTixFQUFLLFNBQ2hCTyxFQUFXUCxFQUFLLFNBQ2hCUSxFQUFvQlIsRUFBSyxrQkFDekJTLEVBQW9CVCxFQUFLLGtCQUN6QlUsRUFBZ0JWLEVBQUssY0FDckJXLEVBQWNYLEVBQUssWUFDbkJZLEVBQXVCWixFQUFLLHFCQUU5QixHQURBYixFQUFXQSxHQUFZYyxHQUFVQSxFQUFPdkQsRUFBTyxFQUMzQyxFQUFDeUMsRUFDTCxLQUFJQyxFQUNGckQsRUFBVW9ELEVBQVMsUUFDbkIwQixFQUFTLEtBQU9sQixFQUFLLE9BQU8sQ0FBQyxFQUFFLFlBQVksRUFBSUEsRUFBSyxPQUFPLENBQUMsRUFFMUQsT0FBTyxhQUFlLENBQUNtQixJQUFjLENBQUNDLEdBQ3hDM0IsRUFBTSxJQUFJLFlBQVlPLEVBQU0sQ0FDMUIsUUFBUyxHQUNULFdBQVksRUFDZCxDQUFDLEdBRURQLEVBQU0sU0FBUyxZQUFZLE9BQU8sRUFDbENBLEVBQUksVUFBVU8sRUFBTSxHQUFNLEVBQUksR0FFaENQLEVBQUksR0FBS2dCLEdBQVFILEVBQ2pCYixFQUFJLEtBQU9pQixHQUFVSixFQUNyQmIsRUFBSSxLQUFPYyxHQUFZRCxFQUN2QmIsRUFBSSxNQUFRZSxFQUNaZixFQUFJLFNBQVdrQixFQUNmbEIsRUFBSSxTQUFXbUIsRUFDZm5CLEVBQUksa0JBQW9Cb0IsRUFDeEJwQixFQUFJLGtCQUFvQnFCLEVBQ3hCckIsRUFBSSxjQUFnQnNCLEVBQ3BCdEIsRUFBSSxTQUFXdUIsRUFBY0EsRUFBWSxZQUFjLE9BQ3ZELElBQUlLLEVBQXFCOUQsR0FBZUEsR0FBZSxDQUFDLEVBQUcwRCxDQUFvQixFQUFHOUIsR0FBYyxtQkFBbUJhLEVBQU1SLENBQVEsQ0FBQyxFQUNsSSxRQUFTSCxLQUFVZ0MsRUFDakI1QixFQUFJSixDQUFNLEVBQUlnQyxFQUFtQmhDLENBQU0sRUFFckNpQixHQUNGQSxFQUFPLGNBQWNiLENBQUcsRUFFdEJyRCxFQUFROEUsQ0FBTSxHQUNoQjlFLEVBQVE4RSxDQUFNLEVBQUUsS0FBSzFCLEVBQVVDLENBQUcsRUFFdEMsQ0FFQSxJQUFJNkIsR0FBWSxDQUFDLEtBQUssRUFDbEJDLEdBQWMsU0FBcUJoQyxFQUFXQyxFQUFVLENBQzFELElBQUlhLEVBQU8sVUFBVSxPQUFTLEdBQUssVUFBVSxDQUFDLElBQU0sT0FBWSxVQUFVLENBQUMsRUFBSSxDQUFDLEVBQzlFVSxFQUFnQlYsRUFBSyxJQUNyQm1CLEVBQU9DLEdBQXlCcEIsRUFBTWlCLEVBQVMsRUFDakRuQyxHQUFjLFlBQVksS0FBSzlCLEVBQVEsRUFBRWtDLEVBQVdDLEVBQVVqQyxHQUFlLENBQzNFLE9BQVFtRSxFQUNSLFNBQVVDLEdBQ1YsUUFBU3RGLEdBQ1QsT0FBUWlFLEdBQ1IsT0FBUXNCLEdBQ1IsV0FBWUMsR0FDWixRQUFTckIsR0FDVCxZQUFhc0IsR0FDYixZQUFhQyxHQUNiLFlBQWFmLEdBQ2IsZUFBZ0IzRCxHQUFTLE9BQ3pCLGNBQWUwRCxFQUNmLFNBQVVKLEdBQ1Ysa0JBQW1CRSxHQUNuQixTQUFVRCxHQUNWLGtCQUFtQkUsR0FDbkIsbUJBQW9Ca0IsR0FDcEIscUJBQXNCQyxHQUN0QixlQUFnQixVQUEwQixDQUN4Q0gsR0FBYyxFQUNoQixFQUNBLGNBQWUsVUFBeUIsQ0FDdENBLEdBQWMsRUFDaEIsRUFDQSxzQkFBdUIsU0FBK0I5QixFQUFNLENBQzFEa0MsR0FBZSxDQUNiLFNBQVUxQyxFQUNWLEtBQU1RLEVBQ04sY0FBZWUsQ0FDakIsQ0FBQyxDQUNILENBQ0YsRUFBR1MsQ0FBSSxDQUFDLENBQ1YsRUFDQSxTQUFTVSxHQUFlQyxFQUFNLENBQzVCL0IsR0FBYzdDLEdBQWUsQ0FDM0IsWUFBYXlELEdBQ2IsUUFBU1IsR0FDVCxTQUFVa0IsRUFDVixPQUFRcEIsR0FDUixTQUFVSyxHQUNWLGtCQUFtQkUsR0FDbkIsU0FBVUQsR0FDVixrQkFBbUJFLEVBQ3JCLEVBQUdxQixDQUFJLENBQUMsQ0FDVixDQUNBLElBQUlULEVBQ0ZDLEdBQ0F0RixHQUNBaUUsR0FDQXNCLEdBQ0FDLEdBQ0FyQixHQUNBc0IsR0FDQW5CLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FzQixHQUNBcEIsR0FDQXFCLEdBQXNCLEdBQ3RCQyxHQUFrQixHQUNsQkMsR0FBWSxDQUFDLEVBQ2JDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FkLEdBQ0FlLEdBQ0FDLEdBQ0FDLEdBQXdCLEdBQ3hCQyxHQUF5QixHQUN6QkMsR0FFQUMsR0FDQUMsR0FBbUMsQ0FBQyxFQUdwQ0MsR0FBVSxHQUNWQyxHQUFvQixDQUFDLEVBR25CQyxHQUFpQixPQUFPLFNBQWEsSUFDdkNDLEdBQTBCQyxHQUMxQkMsR0FBbUJ0QyxJQUFRRCxHQUFhLFdBQWEsUUFFckR3QyxHQUFtQkosSUFBa0IsQ0FBQ0ssSUFBb0IsQ0FBQ0gsSUFBTyxjQUFlLFNBQVMsY0FBYyxLQUFLLEVBQzdHSSxHQUEwQixVQUFZLENBQ3BDLEdBQUtOLEdBRUwsSUFBSXBDLEdBQ0YsTUFBTyxHQUVULElBQUl4QixFQUFLLFNBQVMsY0FBYyxHQUFHLEVBQ25DLE9BQUFBLEVBQUcsTUFBTSxRQUFVLHNCQUNaQSxFQUFHLE1BQU0sZ0JBQWtCLE9BQ3BDLEVBQUUsRUFDRm1FLEdBQW1CLFNBQTBCbkUsRUFBSXZELEVBQVMsQ0FDeEQsSUFBSTJILEVBQVEzRyxHQUFJdUMsQ0FBRSxFQUNoQnFFLEVBQVUsU0FBU0QsRUFBTSxLQUFLLEVBQUksU0FBU0EsRUFBTSxXQUFXLEVBQUksU0FBU0EsRUFBTSxZQUFZLEVBQUksU0FBU0EsRUFBTSxlQUFlLEVBQUksU0FBU0EsRUFBTSxnQkFBZ0IsRUFDaEtFLEVBQVNDLEdBQVN2RSxFQUFJLEVBQUd2RCxDQUFPLEVBQ2hDK0gsRUFBU0QsR0FBU3ZFLEVBQUksRUFBR3ZELENBQU8sRUFDaENnSSxFQUFnQkgsR0FBVTdHLEdBQUk2RyxDQUFNLEVBQ3BDSSxFQUFpQkYsR0FBVS9HLEdBQUkrRyxDQUFNLEVBQ3JDRyxFQUFrQkYsR0FBaUIsU0FBU0EsRUFBYyxVQUFVLEVBQUksU0FBU0EsRUFBYyxXQUFXLEVBQUl0SCxHQUFRbUgsQ0FBTSxFQUFFLE1BQzlITSxFQUFtQkYsR0FBa0IsU0FBU0EsRUFBZSxVQUFVLEVBQUksU0FBU0EsRUFBZSxXQUFXLEVBQUl2SCxHQUFRcUgsQ0FBTSxFQUFFLE1BQ3BJLEdBQUlKLEVBQU0sVUFBWSxPQUNwQixPQUFPQSxFQUFNLGdCQUFrQixVQUFZQSxFQUFNLGdCQUFrQixpQkFBbUIsV0FBYSxhQUVyRyxHQUFJQSxFQUFNLFVBQVksT0FDcEIsT0FBT0EsRUFBTSxvQkFBb0IsTUFBTSxHQUFHLEVBQUUsUUFBVSxFQUFJLFdBQWEsYUFFekUsR0FBSUUsR0FBVUcsRUFBYyxPQUFZQSxFQUFjLFFBQWEsT0FBUSxDQUN6RSxJQUFJSSxFQUFxQkosRUFBYyxRQUFhLE9BQVMsT0FBUyxRQUN0RSxPQUFPRCxJQUFXRSxFQUFlLFFBQVUsUUFBVUEsRUFBZSxRQUFVRyxHQUFzQixXQUFhLGFBRW5ILE9BQU9QLElBQVdHLEVBQWMsVUFBWSxTQUFXQSxFQUFjLFVBQVksUUFBVUEsRUFBYyxVQUFZLFNBQVdBLEVBQWMsVUFBWSxRQUFVRSxHQUFtQk4sR0FBV0QsRUFBTUwsRUFBZ0IsSUFBTSxRQUFVUyxHQUFVSixFQUFNTCxFQUFnQixJQUFNLFFBQVVZLEVBQWtCQyxFQUFtQlAsR0FBVyxXQUFhLFlBQ3ZWLEVBQ0FTLEdBQXFCLFNBQTRCQyxFQUFVQyxFQUFZQyxFQUFVLENBQy9FLElBQUlDLEVBQWNELEVBQVdGLEVBQVMsS0FBT0EsRUFBUyxJQUNwREksRUFBY0YsRUFBV0YsRUFBUyxNQUFRQSxFQUFTLE9BQ25ESyxFQUFrQkgsRUFBV0YsRUFBUyxNQUFRQSxFQUFTLE9BQ3ZETSxFQUFjSixFQUFXRCxFQUFXLEtBQU9BLEVBQVcsSUFDdERNLEVBQWNMLEVBQVdELEVBQVcsTUFBUUEsRUFBVyxPQUN2RE8sRUFBa0JOLEVBQVdELEVBQVcsTUFBUUEsRUFBVyxPQUM3RCxPQUFPRSxJQUFnQkcsR0FBZUYsSUFBZ0JHLEdBQWVKLEVBQWNFLEVBQWtCLElBQU1DLEVBQWNFLEVBQWtCLENBQzdJLEVBT0FDLEdBQThCLFNBQXFDQyxFQUFHQyxFQUFHLENBQ3ZFLElBQUlDLEVBQ0osT0FBQS9DLEdBQVUsS0FBSyxTQUFVL0MsRUFBVSxDQUNqQyxJQUFJK0YsRUFBWS9GLEVBQVN6QyxFQUFPLEVBQUUsUUFBUSxxQkFDMUMsR0FBSSxHQUFDd0ksR0FBYUMsR0FBVWhHLENBQVEsR0FDcEMsS0FBSWxELEVBQU9RLEdBQVEwQyxDQUFRLEVBQ3pCaUcsRUFBcUJMLEdBQUs5SSxFQUFLLEtBQU9pSixHQUFhSCxHQUFLOUksRUFBSyxNQUFRaUosRUFDckVHLEVBQW1CTCxHQUFLL0ksRUFBSyxJQUFNaUosR0FBYUYsR0FBSy9JLEVBQUssT0FBU2lKLEVBQ3JFLEdBQUlFLEdBQXNCQyxFQUN4QixPQUFPSixFQUFNOUYsRUFFakIsQ0FBQyxFQUNNOEYsQ0FDVCxFQUNBSyxHQUFnQixTQUF1QnZKLEVBQVMsQ0FDOUMsU0FBU3dKLEVBQUsxRixFQUFPMkYsRUFBTSxDQUN6QixPQUFPLFNBQVVDLEVBQUlDLEVBQU1yRSxFQUFRakMsRUFBSyxDQUN0QyxJQUFJdUcsRUFBWUYsRUFBRyxRQUFRLE1BQU0sTUFBUUMsRUFBSyxRQUFRLE1BQU0sTUFBUUQsRUFBRyxRQUFRLE1BQU0sT0FBU0MsRUFBSyxRQUFRLE1BQU0sS0FDakgsR0FBSTdGLEdBQVMsT0FBUzJGLEdBQVFHLEdBRzVCLE1BQU8sR0FDRixHQUFJOUYsR0FBUyxNQUFRQSxJQUFVLEdBQ3BDLE1BQU8sR0FDRixHQUFJMkYsR0FBUTNGLElBQVUsUUFDM0IsT0FBT0EsRUFDRixHQUFJLE9BQU9BLEdBQVUsV0FDMUIsT0FBTzBGLEVBQUsxRixFQUFNNEYsRUFBSUMsRUFBTXJFLEVBQVFqQyxDQUFHLEVBQUdvRyxDQUFJLEVBQUVDLEVBQUlDLEVBQU1yRSxFQUFRakMsQ0FBRyxFQUVyRSxJQUFJd0csR0FBY0osRUFBT0MsRUFBS0MsR0FBTSxRQUFRLE1BQU0sS0FDbEQsT0FBTzdGLElBQVUsSUFBUSxPQUFPQSxHQUFVLFVBQVlBLElBQVUrRixHQUFjL0YsRUFBTSxNQUFRQSxFQUFNLFFBQVErRixDQUFVLEVBQUksRUFFNUgsQ0FDRixDQUNBLElBQUlDLEVBQVEsQ0FBQyxFQUNUQyxFQUFnQi9KLEVBQVEsT0FDeEIsQ0FBQytKLEdBQWlCQyxHQUFRRCxDQUFhLEdBQUssWUFDOUNBLEVBQWdCLENBQ2QsS0FBTUEsQ0FDUixHQUVGRCxFQUFNLEtBQU9DLEVBQWMsS0FDM0JELEVBQU0sVUFBWU4sRUFBS08sRUFBYyxLQUFNLEVBQUksRUFDL0NELEVBQU0sU0FBV04sRUFBS08sRUFBYyxHQUFHLEVBQ3ZDRCxFQUFNLFlBQWNDLEVBQWMsWUFDbEMvSixFQUFRLE1BQVE4SixDQUNsQixFQUNBbEUsR0FBc0IsVUFBK0IsQ0FDL0MsQ0FBQzZCLElBQTJCeEgsSUFDOUJlLEdBQUlmLEdBQVMsVUFBVyxNQUFNLENBRWxDLEVBQ0E0RixHQUF3QixVQUFpQyxDQUNuRCxDQUFDNEIsSUFBMkJ4SCxJQUM5QmUsR0FBSWYsR0FBUyxVQUFXLEVBQUUsQ0FFOUIsRUFHRWtILElBQWtCLENBQUNLLElBQ3JCLFNBQVMsaUJBQWlCLFFBQVMsU0FBVW5FLEVBQUssQ0FDaEQsR0FBSTZDLEdBQ0YsT0FBQTdDLEVBQUksZUFBZSxFQUNuQkEsRUFBSSxpQkFBbUJBLEVBQUksZ0JBQWdCLEVBQzNDQSxFQUFJLDBCQUE0QkEsRUFBSSx5QkFBeUIsRUFDN0Q2QyxHQUFrQixHQUNYLEVBRVgsRUFBRyxFQUFJLEVBRVQsSUFBSStELEdBQWdDLFNBQXVDNUcsRUFBSyxDQUM5RSxHQUFJaUMsRUFBUSxDQUNWakMsRUFBTUEsRUFBSSxRQUFVQSxFQUFJLFFBQVEsQ0FBQyxFQUFJQSxFQUNyQyxJQUFJNkcsRUFBVW5CLEdBQTRCMUYsRUFBSSxRQUFTQSxFQUFJLE9BQU8sRUFDbEUsR0FBSTZHLEVBQVMsQ0FFWCxJQUFJQyxFQUFRLENBQUMsRUFDYixRQUFTQyxLQUFLL0csRUFDUkEsRUFBSSxlQUFlK0csQ0FBQyxJQUN0QkQsRUFBTUMsQ0FBQyxFQUFJL0csRUFBSStHLENBQUMsR0FHcEJELEVBQU0sT0FBU0EsRUFBTSxPQUFTRCxFQUM5QkMsRUFBTSxlQUFpQixPQUN2QkEsRUFBTSxnQkFBa0IsT0FDeEJELEVBQVF2SixFQUFPLEVBQUUsWUFBWXdKLENBQUssR0FHeEMsRUFDSUUsR0FBd0IsU0FBK0JoSCxFQUFLLENBQzFEaUMsR0FDRkEsRUFBTyxXQUFXM0UsRUFBTyxFQUFFLGlCQUFpQjBDLEVBQUksTUFBTSxDQUUxRCxFQU9BLFNBQVNwQyxHQUFTc0MsRUFBSXZELEVBQVMsQ0FDN0IsR0FBSSxFQUFFdUQsR0FBTUEsRUFBRyxVQUFZQSxFQUFHLFdBQWEsR0FDekMsS0FBTSw4Q0FBOEMsT0FBTyxDQUFDLEVBQUUsU0FBUyxLQUFLQSxDQUFFLENBQUMsRUFFakYsS0FBSyxHQUFLQSxFQUNWLEtBQUssUUFBVXZELEVBQVUwRCxHQUFTLENBQUMsRUFBRzFELENBQU8sRUFHN0N1RCxFQUFHNUMsRUFBTyxFQUFJLEtBQ2QsSUFBSW1DLEVBQVcsQ0FDYixNQUFPLEtBQ1AsS0FBTSxHQUNOLFNBQVUsR0FDVixNQUFPLEtBQ1AsT0FBUSxLQUNSLFVBQVcsV0FBVyxLQUFLUyxFQUFHLFFBQVEsRUFBSSxNQUFRLEtBQ2xELGNBQWUsRUFFZixXQUFZLEdBRVosc0JBQXVCLEtBRXZCLGtCQUFtQixHQUNuQixVQUFXLFVBQXFCLENBQzlCLE9BQU9tRSxHQUFpQm5FLEVBQUksS0FBSyxPQUFPLENBQzFDLEVBQ0EsV0FBWSxpQkFDWixZQUFhLGtCQUNiLFVBQVcsZ0JBQ1gsT0FBUSxTQUNSLE9BQVEsS0FDUixnQkFBaUIsR0FDakIsVUFBVyxFQUNYLE9BQVEsS0FDUixRQUFTLFNBQWlCK0csRUFBY2hGLEVBQVEsQ0FDOUNnRixFQUFhLFFBQVEsT0FBUWhGLEVBQU8sV0FBVyxDQUNqRCxFQUNBLFdBQVksR0FDWixlQUFnQixHQUNoQixXQUFZLFVBQ1osTUFBTyxFQUNQLGlCQUFrQixHQUNsQixxQkFBc0IsT0FBTyxTQUFXLE9BQVMsUUFBUSxTQUFTLE9BQU8saUJBQWtCLEVBQUUsR0FBSyxFQUNsRyxjQUFlLEdBQ2YsY0FBZSxvQkFDZixlQUFnQixHQUNoQixrQkFBbUIsRUFDbkIsZUFBZ0IsQ0FDZCxFQUFHLEVBQ0gsRUFBRyxDQUNMLEVBQ0EsZUFBZ0JyRSxHQUFTLGlCQUFtQixJQUFTLGlCQUFrQixRQUFVLENBQUNzSixHQUNsRixxQkFBc0IsQ0FDeEIsRUFDQXhILEdBQWMsa0JBQWtCLEtBQU1RLEVBQUlULENBQVEsRUFHbEQsUUFBU2MsS0FBUWQsRUFDZixFQUFFYyxLQUFRNUQsS0FBYUEsRUFBUTRELENBQUksRUFBSWQsRUFBU2MsQ0FBSSxHQUV0RDJGLEdBQWN2SixDQUFPLEVBR3JCLFFBQVN3SyxLQUFNLEtBQ1RBLEVBQUcsT0FBTyxDQUFDLElBQU0sS0FBTyxPQUFPLEtBQUtBLENBQUUsR0FBTSxhQUM5QyxLQUFLQSxDQUFFLEVBQUksS0FBS0EsQ0FBRSxFQUFFLEtBQUssSUFBSSxHQUtqQyxLQUFLLGdCQUFrQnhLLEVBQVEsY0FBZ0IsR0FBUXVILEdBQ25ELEtBQUssa0JBRVAsS0FBSyxRQUFRLG9CQUFzQixHQUlqQ3ZILEVBQVEsZUFDVnlLLEdBQUdsSCxFQUFJLGNBQWUsS0FBSyxXQUFXLEdBRXRDa0gsR0FBR2xILEVBQUksWUFBYSxLQUFLLFdBQVcsRUFDcENrSCxHQUFHbEgsRUFBSSxhQUFjLEtBQUssV0FBVyxHQUVuQyxLQUFLLGtCQUNQa0gsR0FBR2xILEVBQUksV0FBWSxJQUFJLEVBQ3ZCa0gsR0FBR2xILEVBQUksWUFBYSxJQUFJLEdBRTFCNEMsR0FBVSxLQUFLLEtBQUssRUFBRSxFQUd0Qm5HLEVBQVEsT0FBU0EsRUFBUSxNQUFNLEtBQU8sS0FBSyxLQUFLQSxFQUFRLE1BQU0sSUFBSSxJQUFJLEdBQUssQ0FBQyxDQUFDLEVBRzdFMEQsR0FBUyxLQUFNOUMsR0FBc0IsQ0FBQyxDQUN4QyxDQUNBSyxHQUFTLFVBQTRDLENBQ25ELFlBQWFBLEdBQ2IsaUJBQWtCLFNBQTBCTSxFQUFRLENBQzlDLENBQUMsS0FBSyxHQUFHLFNBQVNBLENBQU0sR0FBS0EsSUFBVyxLQUFLLEtBQy9DbUYsR0FBYSxLQUVqQixFQUNBLGNBQWUsU0FBdUJyRCxFQUFLOUIsRUFBUSxDQUNqRCxPQUFPLE9BQU8sS0FBSyxRQUFRLFdBQWMsV0FBYSxLQUFLLFFBQVEsVUFBVSxLQUFLLEtBQU04QixFQUFLOUIsRUFBUStELENBQU0sRUFBSSxLQUFLLFFBQVEsU0FDOUgsRUFDQSxZQUFhLFNBQTZDakMsRUFBSyxDQUM3RCxHQUFLQSxFQUFJLFdBQ1QsS0FBSTNCLEVBQVEsS0FDVjZCLEVBQUssS0FBSyxHQUNWdkQsRUFBVSxLQUFLLFFBQ2YwSyxFQUFrQjFLLEVBQVEsZ0JBQzFCMkssRUFBT3RILEVBQUksS0FDWHVILEVBQVF2SCxFQUFJLFNBQVdBLEVBQUksUUFBUSxDQUFDLEdBQUtBLEVBQUksYUFBZUEsRUFBSSxjQUFnQixTQUFXQSxFQUMzRjlCLEdBQVVxSixHQUFTdkgsR0FBSyxPQUN4QndILEVBQWlCeEgsRUFBSSxPQUFPLGFBQWVBLEVBQUksTUFBUUEsRUFBSSxLQUFLLENBQUMsR0FBS0EsRUFBSSxjQUFnQkEsRUFBSSxhQUFhLEVBQUUsQ0FBQyxJQUFNOUIsRUFDcEh1SixFQUFTOUssRUFBUSxPQUluQixHQUhBK0ssR0FBdUJ4SCxDQUFFLEVBR3JCLENBQUErQixHQUdBLDBCQUF3QixLQUFLcUYsQ0FBSSxHQUFLdEgsRUFBSSxTQUFXLEdBQUtyRCxFQUFRLFdBS2xFLENBQUE2SyxFQUFlLG1CQUtmLEdBQUMsS0FBSyxpQkFBbUJOLElBQVVoSixHQUFVQSxFQUFPLFFBQVEsWUFBWSxJQUFNLFlBR2xGQSxFQUFTZixHQUFRZSxFQUFRdkIsRUFBUSxVQUFXdUQsRUFBSSxFQUFLLEVBQ2pELEVBQUFoQyxHQUFVQSxFQUFPLFdBR2pCa0UsS0FBZWxFLEdBVW5CLElBSkFnRCxHQUFXeUcsR0FBTXpKLENBQU0sRUFDdkJrRCxHQUFvQnVHLEdBQU16SixFQUFRdkIsRUFBUSxTQUFTLEVBRy9DLE9BQU84SyxHQUFXLFlBQ3BCLEdBQUlBLEVBQU8sS0FBSyxLQUFNekgsRUFBSzlCLEVBQVEsSUFBSSxFQUFHLENBQ3hDdUUsR0FBZSxDQUNiLFNBQVVwRSxFQUNWLE9BQVFtSixFQUNSLEtBQU0sU0FDTixTQUFVdEosRUFDVixLQUFNZ0MsRUFDTixPQUFRQSxDQUNWLENBQUMsRUFDRDRCLEdBQVksU0FBVXpELEVBQU8sQ0FDM0IsSUFBSzJCLENBQ1AsQ0FBQyxFQUNEcUgsR0FBbUJySCxFQUFJLGVBQWUsRUFDdEMsZ0JBRU95SCxJQUNUQSxFQUFTQSxFQUFPLE1BQU0sR0FBRyxFQUFFLEtBQUssU0FBVUcsRUFBVSxDQUVsRCxHQURBQSxFQUFXekssR0FBUXFLLEVBQWdCSSxFQUFTLEtBQUssRUFBRzFILEVBQUksRUFBSyxFQUN6RDBILEVBQ0YsT0FBQW5GLEdBQWUsQ0FDYixTQUFVcEUsRUFDVixPQUFRdUosRUFDUixLQUFNLFNBQ04sU0FBVTFKLEVBQ1YsT0FBUWdDLEVBQ1IsS0FBTUEsQ0FDUixDQUFDLEVBQ0Q0QixHQUFZLFNBQVV6RCxFQUFPLENBQzNCLElBQUsyQixDQUNQLENBQUMsRUFDTSxFQUVYLENBQUMsRUFDR3lILEdBQVEsQ0FDVkosR0FBbUJySCxFQUFJLGVBQWUsRUFDdEMsT0FHQXJELEVBQVEsUUFBVSxDQUFDUSxHQUFRcUssRUFBZ0I3SyxFQUFRLE9BQVF1RCxFQUFJLEVBQUssR0FLeEUsS0FBSyxrQkFBa0JGLEVBQUt1SCxFQUFPckosQ0FBTSxHQUMzQyxFQUNBLGtCQUFtQixTQUF3QzhCLEVBQWlCdUgsRUFBeUJySixFQUFRLENBQzNHLElBQUlHLEVBQVEsS0FDVjZCLEVBQUs3QixFQUFNLEdBQ1gxQixFQUFVMEIsRUFBTSxRQUNoQndKLEVBQWdCM0gsRUFBRyxjQUNuQjRILEVBQ0YsR0FBSTVKLEdBQVUsQ0FBQytELEdBQVUvRCxFQUFPLGFBQWVnQyxFQUFJLENBQ2pELElBQUkrRSxFQUFXNUgsR0FBUWEsQ0FBTSxFQTBFN0IsR0F6RUEyQyxHQUFTWCxFQUNUK0IsRUFBUy9ELEVBQ1RnRSxHQUFXRCxFQUFPLFdBQ2xCRSxHQUFTRixFQUFPLFlBQ2hCRyxHQUFhbEUsRUFDYnlFLEdBQWNoRyxFQUFRLE1BQ3RCaUIsR0FBUyxRQUFVcUUsRUFDbkJjLEdBQVMsQ0FDUCxPQUFRZCxFQUNSLFNBQVVzRixHQUFTdkgsR0FBSyxRQUN4QixTQUFVdUgsR0FBU3ZILEdBQUssT0FDMUIsRUFDQW1ELEdBQWtCSixHQUFPLFFBQVVrQyxFQUFTLEtBQzVDN0IsR0FBaUJMLEdBQU8sUUFBVWtDLEVBQVMsSUFDM0MsS0FBSyxRQUFVc0MsR0FBU3ZILEdBQUssUUFDN0IsS0FBSyxRQUFVdUgsR0FBU3ZILEdBQUssUUFDN0JpQyxFQUFPLE1BQU0sYUFBYSxFQUFJLE1BQzlCNkYsRUFBYyxVQUF1QixDQUluQyxHQUhBaEcsR0FBWSxhQUFjekQsRUFBTyxDQUMvQixJQUFLMkIsQ0FDUCxDQUFDLEVBQ0dwQyxHQUFTLGNBQWUsQ0FDMUJTLEVBQU0sUUFBUSxFQUNkLE9BSUZBLEVBQU0sMEJBQTBCLEVBQzVCLENBQUMwSixJQUFXMUosRUFBTSxrQkFDcEI0RCxFQUFPLFVBQVksSUFJckI1RCxFQUFNLGtCQUFrQjJCLEVBQUt1SCxDQUFLLEVBR2xDOUUsR0FBZSxDQUNiLFNBQVVwRSxFQUNWLEtBQU0sU0FDTixjQUFlMkIsQ0FDakIsQ0FBQyxFQUdEZ0ksR0FBWS9GLEVBQVF0RixFQUFRLFlBQWEsRUFBSSxDQUMvQyxFQUdBQSxFQUFRLE9BQU8sTUFBTSxHQUFHLEVBQUUsUUFBUSxTQUFVaUwsRUFBVSxDQUNwREssR0FBS2hHLEVBQVEyRixFQUFTLEtBQUssRUFBR00sRUFBaUIsQ0FDakQsQ0FBQyxFQUNEZCxHQUFHUyxFQUFlLFdBQVlqQixFQUE2QixFQUMzRFEsR0FBR1MsRUFBZSxZQUFhakIsRUFBNkIsRUFDNURRLEdBQUdTLEVBQWUsWUFBYWpCLEVBQTZCLEVBQ3hEakssRUFBUSxnQkFDVnlLLEdBQUdTLEVBQWUsWUFBYXhKLEVBQU0sT0FBTyxFQUU1QyxDQUFDLEtBQUssaUJBQW1CK0ksR0FBR1MsRUFBZSxnQkFBaUJ4SixFQUFNLE9BQU8sSUFFekUrSSxHQUFHUyxFQUFlLFVBQVd4SixFQUFNLE9BQU8sRUFDMUMrSSxHQUFHUyxFQUFlLFdBQVl4SixFQUFNLE9BQU8sRUFDM0MrSSxHQUFHUyxFQUFlLGNBQWV4SixFQUFNLE9BQU8sR0FJNUMwSixJQUFXLEtBQUssa0JBQ2xCLEtBQUssUUFBUSxvQkFBc0IsRUFDbkM5RixFQUFPLFVBQVksSUFFckJILEdBQVksYUFBYyxLQUFNLENBQzlCLElBQUs5QixDQUNQLENBQUMsRUFHR3JELEVBQVEsUUFBVSxDQUFDQSxFQUFRLGtCQUFvQjRLLEtBQVcsQ0FBQyxLQUFLLGlCQUFtQixFQUFFNUYsSUFBUUQsS0FBYyxDQUM3RyxHQUFJOUQsR0FBUyxjQUFlLENBQzFCLEtBQUssUUFBUSxFQUNiLE9BS0VqQixFQUFRLGdCQUNWeUssR0FBR1MsRUFBZSxZQUFheEosRUFBTSxtQkFBbUIsRUFDeEQrSSxHQUFHUyxFQUFlLGdCQUFpQnhKLEVBQU0sbUJBQW1CLElBRTVEK0ksR0FBR1MsRUFBZSxVQUFXeEosRUFBTSxtQkFBbUIsRUFDdEQrSSxHQUFHUyxFQUFlLFdBQVl4SixFQUFNLG1CQUFtQixFQUN2RCtJLEdBQUdTLEVBQWUsY0FBZXhKLEVBQU0sbUJBQW1CLEdBRTVEK0ksR0FBR1MsRUFBZSxZQUFheEosRUFBTSw0QkFBNEIsRUFDakUrSSxHQUFHUyxFQUFlLFlBQWF4SixFQUFNLDRCQUE0QixFQUNqRTFCLEVBQVEsZ0JBQWtCeUssR0FBR1MsRUFBZSxjQUFleEosRUFBTSw0QkFBNEIsRUFDN0ZBLEVBQU0sZ0JBQWtCLFdBQVd5SixFQUFhbkwsRUFBUSxLQUFLLE9BRTdEbUwsRUFBWSxFQUdsQixFQUNBLDZCQUE4QixTQUFzRSxFQUFHLENBQ3JHLElBQUlQLEVBQVEsRUFBRSxRQUFVLEVBQUUsUUFBUSxDQUFDLEVBQUksRUFDbkMsS0FBSyxJQUFJLEtBQUssSUFBSUEsRUFBTSxRQUFVLEtBQUssTUFBTSxFQUFHLEtBQUssSUFBSUEsRUFBTSxRQUFVLEtBQUssTUFBTSxDQUFDLEdBQUssS0FBSyxNQUFNLEtBQUssUUFBUSxxQkFBdUIsS0FBSyxpQkFBbUIsT0FBTyxrQkFBb0IsRUFBRSxHQUNoTSxLQUFLLG9CQUFvQixDQUU3QixFQUNBLG9CQUFxQixVQUErQixDQUNsRHRGLEdBQVVpRyxHQUFrQmpHLENBQU0sRUFDbEMsYUFBYSxLQUFLLGVBQWUsRUFDakMsS0FBSywwQkFBMEIsQ0FDakMsRUFDQSwwQkFBMkIsVUFBcUMsQ0FDOUQsSUFBSTRGLEVBQWdCLEtBQUssR0FBRyxjQUM1Qk0sR0FBSU4sRUFBZSxVQUFXLEtBQUssbUJBQW1CLEVBQ3RETSxHQUFJTixFQUFlLFdBQVksS0FBSyxtQkFBbUIsRUFDdkRNLEdBQUlOLEVBQWUsY0FBZSxLQUFLLG1CQUFtQixFQUMxRE0sR0FBSU4sRUFBZSxZQUFhLEtBQUssbUJBQW1CLEVBQ3hETSxHQUFJTixFQUFlLGdCQUFpQixLQUFLLG1CQUFtQixFQUM1RE0sR0FBSU4sRUFBZSxZQUFhLEtBQUssNEJBQTRCLEVBQ2pFTSxHQUFJTixFQUFlLFlBQWEsS0FBSyw0QkFBNEIsRUFDakVNLEdBQUlOLEVBQWUsY0FBZSxLQUFLLDRCQUE0QixDQUNyRSxFQUNBLGtCQUFtQixTQUF3QzdILEVBQWlCdUgsRUFBTyxDQUNqRkEsRUFBUUEsR0FBU3ZILEVBQUksYUFBZSxTQUFXQSxFQUMzQyxDQUFDLEtBQUssaUJBQW1CdUgsRUFDdkIsS0FBSyxRQUFRLGVBQ2ZILEdBQUcsU0FBVSxjQUFlLEtBQUssWUFBWSxFQUNwQ0csRUFDVEgsR0FBRyxTQUFVLFlBQWEsS0FBSyxZQUFZLEVBRTNDQSxHQUFHLFNBQVUsWUFBYSxLQUFLLFlBQVksR0FHN0NBLEdBQUduRixFQUFRLFVBQVcsSUFBSSxFQUMxQm1GLEdBQUd2RyxHQUFRLFlBQWEsS0FBSyxZQUFZLEdBRTNDLEdBQUksQ0FDRnVILEdBQVUsVUFBWSxDQUNoQixTQUFTLFVBQ1gsU0FBUyxVQUFVLE1BQU0sRUFFekIsT0FBTyxhQUFhLEVBQUUsZ0JBQWdCLENBRTFDLENBQUMsQ0FDSCxNQUFFLENBQWEsQ0FDakIsRUFDQSxhQUFjLFNBQXNCQyxFQUFVckksRUFBSyxDQUVqRCxHQURBNEMsR0FBc0IsR0FDbEIvQixJQUFVb0IsRUFBUSxDQUNwQkgsR0FBWSxjQUFlLEtBQU0sQ0FDL0IsSUFBSzlCLENBQ1AsQ0FBQyxFQUNHLEtBQUssaUJBQ1BvSCxHQUFHLFNBQVUsV0FBWUosRUFBcUIsRUFFaEQsSUFBSXJLLEVBQVUsS0FBSyxRQUduQixDQUFDMEwsR0FBWUwsR0FBWS9GLEVBQVF0RixFQUFRLFVBQVcsRUFBSyxFQUN6RHFMLEdBQVkvRixFQUFRdEYsRUFBUSxXQUFZLEVBQUksRUFDNUNpQixHQUFTLE9BQVMsS0FDbEJ5SyxHQUFZLEtBQUssYUFBYSxFQUc5QjVGLEdBQWUsQ0FDYixTQUFVLEtBQ1YsS0FBTSxRQUNOLGNBQWV6QyxDQUNqQixDQUFDLE9BRUQsS0FBSyxTQUFTLENBRWxCLEVBQ0EsaUJBQWtCLFVBQTRCLENBQzVDLEdBQUlnRCxHQUFVLENBQ1osS0FBSyxPQUFTQSxHQUFTLFFBQ3ZCLEtBQUssT0FBU0EsR0FBUyxRQUN2QlQsR0FBb0IsRUFHcEIsUUFGSXJFLEVBQVMsU0FBUyxpQkFBaUI4RSxHQUFTLFFBQVNBLEdBQVMsT0FBTyxFQUNyRXNGLEVBQVNwSyxFQUNOQSxHQUFVQSxFQUFPLGFBQ3RCQSxFQUFTQSxFQUFPLFdBQVcsaUJBQWlCOEUsR0FBUyxRQUFTQSxHQUFTLE9BQU8sRUFDMUU5RSxJQUFXb0ssSUFDZkEsRUFBU3BLLEVBR1gsR0FEQStELEVBQU8sV0FBVzNFLEVBQU8sRUFBRSxpQkFBaUJZLENBQU0sRUFDOUNvSyxFQUNGLEVBQUcsQ0FDRCxHQUFJQSxFQUFPaEwsRUFBTyxFQUFHLENBQ25CLElBQUlpTCxFQUFXLE9BT2YsR0FOQUEsRUFBV0QsRUFBT2hMLEVBQU8sRUFBRSxZQUFZLENBQ3JDLFFBQVMwRixHQUFTLFFBQ2xCLFFBQVNBLEdBQVMsUUFDbEIsT0FBUTlFLEVBQ1IsT0FBUW9LLENBQ1YsQ0FBQyxFQUNHQyxHQUFZLENBQUMsS0FBSyxRQUFRLGVBQzVCLE1BR0pySyxFQUFTb0ssUUFFbUJBLEVBQVNFLEdBQWdCRixDQUFNLEdBRS9EOUYsR0FBc0IsRUFFMUIsRUFDQSxhQUFjLFNBQXNDeEMsRUFBSyxDQUN2RCxHQUFJK0MsR0FBUSxDQUNWLElBQUlwRyxFQUFVLEtBQUssUUFDakI4TCxFQUFvQjlMLEVBQVEsa0JBQzVCK0wsRUFBaUIvTCxFQUFRLGVBQ3pCNEssRUFBUXZILEVBQUksUUFBVUEsRUFBSSxRQUFRLENBQUMsRUFBSUEsRUFDdkMySSxFQUFjL0wsSUFBV29CLEdBQU9wQixHQUFTLEVBQUksRUFDN0N1QyxFQUFTdkMsSUFBVytMLEdBQWVBLEVBQVksRUFDL0N2SixFQUFTeEMsSUFBVytMLEdBQWVBLEVBQVksRUFDL0NDLEVBQXVCN0UsSUFBMkJMLElBQXVCbUYsR0FBd0JuRixFQUFtQixFQUNwSG9GLEdBQU12QixFQUFNLFFBQVV4RSxHQUFPLFFBQVUyRixFQUFlLElBQU12SixHQUFVLElBQU15SixFQUF1QkEsRUFBcUIsQ0FBQyxFQUFJakYsR0FBaUMsQ0FBQyxFQUFJLElBQU14RSxHQUFVLEdBQ25MNEosR0FBTXhCLEVBQU0sUUFBVXhFLEdBQU8sUUFBVTJGLEVBQWUsSUFBTXRKLEdBQVUsSUFBTXdKLEVBQXVCQSxFQUFxQixDQUFDLEVBQUlqRixHQUFpQyxDQUFDLEVBQUksSUFBTXZFLEdBQVUsR0FHckwsR0FBSSxDQUFDeEIsR0FBUyxRQUFVLENBQUNnRixHQUFxQixDQUM1QyxHQUFJNkYsR0FBcUIsS0FBSyxJQUFJLEtBQUssSUFBSWxCLEVBQU0sUUFBVSxLQUFLLE1BQU0sRUFBRyxLQUFLLElBQUlBLEVBQU0sUUFBVSxLQUFLLE1BQU0sQ0FBQyxFQUFJa0IsRUFDaEgsT0FFRixLQUFLLGFBQWF6SSxFQUFLLEVBQUksRUFFN0IsR0FBSXBELEdBQVMsQ0FDUCtMLEdBQ0ZBLEVBQVksR0FBS0csR0FBTTdGLElBQVUsR0FDakMwRixFQUFZLEdBQUtJLEdBQU03RixJQUFVLElBRWpDeUYsRUFBYyxDQUNaLEVBQUcsRUFDSCxFQUFHLEVBQ0gsRUFBRyxFQUNILEVBQUcsRUFDSCxFQUFHRyxFQUNILEVBQUdDLENBQ0wsRUFFRixJQUFJQyxFQUFZLFVBQVUsT0FBT0wsRUFBWSxFQUFHLEdBQUcsRUFBRSxPQUFPQSxFQUFZLEVBQUcsR0FBRyxFQUFFLE9BQU9BLEVBQVksRUFBRyxHQUFHLEVBQUUsT0FBT0EsRUFBWSxFQUFHLEdBQUcsRUFBRSxPQUFPQSxFQUFZLEVBQUcsR0FBRyxFQUFFLE9BQU9BLEVBQVksRUFBRyxHQUFHLEVBQzFMaEwsR0FBSWYsR0FBUyxrQkFBbUJvTSxDQUFTLEVBQ3pDckwsR0FBSWYsR0FBUyxlQUFnQm9NLENBQVMsRUFDdENyTCxHQUFJZixHQUFTLGNBQWVvTSxDQUFTLEVBQ3JDckwsR0FBSWYsR0FBUyxZQUFhb00sQ0FBUyxFQUNuQy9GLEdBQVM2RixFQUNUNUYsR0FBUzZGLEVBQ1QvRixHQUFXdUUsRUFFYnZILEVBQUksWUFBY0EsRUFBSSxlQUFlLEVBRXpDLEVBQ0EsYUFBYyxVQUF3QixDQUdwQyxHQUFJLENBQUNwRCxHQUFTLENBQ1osSUFBSUYsRUFBWSxLQUFLLFFBQVEsZUFBaUIsU0FBUyxLQUFPbUUsR0FDNURoRSxFQUFPUSxHQUFRNEUsRUFBUSxHQUFNOEIsR0FBeUIsR0FBTXJILENBQVMsRUFDckVDLEVBQVUsS0FBSyxRQUdqQixHQUFJb0gsR0FBeUIsQ0FHM0IsSUFEQUwsR0FBc0JoSCxFQUNmaUIsR0FBSStGLEdBQXFCLFVBQVUsSUFBTSxVQUFZL0YsR0FBSStGLEdBQXFCLFdBQVcsSUFBTSxRQUFVQSxLQUF3QixVQUN0SUEsR0FBc0JBLEdBQW9CLFdBRXhDQSxLQUF3QixTQUFTLE1BQVFBLEtBQXdCLFNBQVMsaUJBQ3hFQSxLQUF3QixXQUFVQSxHQUFzQnVGLEdBQTBCLEdBQ3RGcE0sRUFBSyxLQUFPNkcsR0FBb0IsVUFDaEM3RyxFQUFLLE1BQVE2RyxHQUFvQixZQUVqQ0EsR0FBc0J1RixHQUEwQixFQUVsRHRGLEdBQW1Da0YsR0FBd0JuRixFQUFtQixFQUVoRjlHLEdBQVVxRixFQUFPLFVBQVUsRUFBSSxFQUMvQitGLEdBQVlwTCxHQUFTRCxFQUFRLFdBQVksRUFBSyxFQUM5Q3FMLEdBQVlwTCxHQUFTRCxFQUFRLGNBQWUsRUFBSSxFQUNoRHFMLEdBQVlwTCxHQUFTRCxFQUFRLFVBQVcsRUFBSSxFQUM1Q2dCLEdBQUlmLEdBQVMsYUFBYyxFQUFFLEVBQzdCZSxHQUFJZixHQUFTLFlBQWEsRUFBRSxFQUM1QmUsR0FBSWYsR0FBUyxhQUFjLFlBQVksRUFDdkNlLEdBQUlmLEdBQVMsU0FBVSxDQUFDLEVBQ3hCZSxHQUFJZixHQUFTLE1BQU9DLEVBQUssR0FBRyxFQUM1QmMsR0FBSWYsR0FBUyxPQUFRQyxFQUFLLElBQUksRUFDOUJjLEdBQUlmLEdBQVMsUUFBU0MsRUFBSyxLQUFLLEVBQ2hDYyxHQUFJZixHQUFTLFNBQVVDLEVBQUssTUFBTSxFQUNsQ2MsR0FBSWYsR0FBUyxVQUFXLEtBQUssRUFDN0JlLEdBQUlmLEdBQVMsV0FBWW1ILEdBQTBCLFdBQWEsT0FBTyxFQUN2RXBHLEdBQUlmLEdBQVMsU0FBVSxRQUFRLEVBQy9CZSxHQUFJZixHQUFTLGdCQUFpQixNQUFNLEVBQ3BDZ0IsR0FBUyxNQUFRaEIsR0FDakJGLEVBQVUsWUFBWUUsRUFBTyxFQUc3QmUsR0FBSWYsR0FBUyxtQkFBb0J1RyxHQUFrQixTQUFTdkcsR0FBUSxNQUFNLEtBQUssRUFBSSxJQUFNLEtBQU93RyxHQUFpQixTQUFTeEcsR0FBUSxNQUFNLE1BQU0sRUFBSSxJQUFNLEdBQUcsRUFFL0osRUFDQSxhQUFjLFNBQWlDb0QsRUFBaUJxSSxFQUFVLENBQ3hFLElBQUloSyxFQUFRLEtBQ1I0SSxFQUFlakgsRUFBSSxhQUNuQnJELEVBQVUwQixFQUFNLFFBSXBCLEdBSEF5RCxHQUFZLFlBQWEsS0FBTSxDQUM3QixJQUFLOUIsQ0FDUCxDQUFDLEVBQ0dwQyxHQUFTLGNBQWUsQ0FDMUIsS0FBSyxRQUFRLEVBQ2IsT0FFRmtFLEdBQVksYUFBYyxJQUFJLEVBQ3pCbEUsR0FBUyxnQkFDWm1ELEdBQVVtSSxHQUFNakgsQ0FBTSxFQUN0QmxCLEdBQVEsZ0JBQWdCLElBQUksRUFDNUJBLEdBQVEsVUFBWSxHQUNwQkEsR0FBUSxNQUFNLGFBQWEsRUFBSSxHQUMvQixLQUFLLFdBQVcsRUFDaEJpSCxHQUFZakgsR0FBUyxLQUFLLFFBQVEsWUFBYSxFQUFLLEVBQ3BEbkQsR0FBUyxNQUFRbUQsSUFJbkIxQyxFQUFNLFFBQVUrSixHQUFVLFVBQVksQ0FDcEN0RyxHQUFZLFFBQVN6RCxDQUFLLEVBQ3RCLENBQUFULEdBQVMsZ0JBQ1JTLEVBQU0sUUFBUSxtQkFDakJ3QyxHQUFPLGFBQWFFLEdBQVNrQixDQUFNLEVBRXJDNUQsRUFBTSxXQUFXLEVBQ2pCb0UsR0FBZSxDQUNiLFNBQVVwRSxFQUNWLEtBQU0sT0FDUixDQUFDLEVBQ0gsQ0FBQyxFQUNELENBQUNnSyxHQUFZTCxHQUFZL0YsRUFBUXRGLEVBQVEsVUFBVyxFQUFJLEVBR3BEMEwsR0FDRnhGLEdBQWtCLEdBQ2xCeEUsRUFBTSxRQUFVLFlBQVlBLEVBQU0saUJBQWtCLEVBQUUsSUFHdEQ4SixHQUFJLFNBQVUsVUFBVzlKLEVBQU0sT0FBTyxFQUN0QzhKLEdBQUksU0FBVSxXQUFZOUosRUFBTSxPQUFPLEVBQ3ZDOEosR0FBSSxTQUFVLGNBQWU5SixFQUFNLE9BQU8sRUFDdEM0SSxJQUNGQSxFQUFhLGNBQWdCLE9BQzdCdEssRUFBUSxTQUFXQSxFQUFRLFFBQVEsS0FBSzBCLEVBQU80SSxFQUFjaEYsQ0FBTSxHQUVyRW1GLEdBQUcsU0FBVSxPQUFRL0ksQ0FBSyxFQUcxQlYsR0FBSXNFLEVBQVEsWUFBYSxlQUFlLEdBRTFDVyxHQUFzQixHQUN0QnZFLEVBQU0sYUFBZStKLEdBQVUvSixFQUFNLGFBQWEsS0FBS0EsRUFBT2dLLEVBQVVySSxDQUFHLENBQUMsRUFDNUVvSCxHQUFHLFNBQVUsY0FBZS9JLENBQUssRUFDakNpRSxHQUFRLEdBQ0o0RSxJQUNGdkosR0FBSSxTQUFTLEtBQU0sY0FBZSxNQUFNLENBRTVDLEVBRUEsWUFBYSxTQUFnQ3FDLEVBQUssQ0FDaEQsSUFBSUUsRUFBSyxLQUFLLEdBQ1poQyxFQUFTOEIsRUFBSSxPQUNiaUYsRUFDQUMsRUFDQWlFLEVBQ0F4TSxFQUFVLEtBQUssUUFDZjhKLEVBQVE5SixFQUFRLE1BQ2hCeU0sRUFBaUJ4TCxHQUFTLE9BQzFCeUwsRUFBVTFHLEtBQWdCOEQsRUFDMUI2QyxFQUFVM00sRUFBUSxLQUNsQjRNLEVBQWVoSSxJQUFlNkgsRUFDOUJqRSxFQUNBOUcsRUFBUSxLQUNSbUwsRUFBaUIsR0FDbkIsR0FBSTVGLEdBQVMsT0FDYixTQUFTNkYsRUFBY2xKLEVBQU1tSixHQUFPLENBQ2xDNUgsR0FBWXZCLEVBQU1sQyxFQUFPUCxHQUFlLENBQ3RDLElBQUtrQyxFQUNMLFFBQVNxSixFQUNULEtBQU1sRSxFQUFXLFdBQWEsYUFDOUIsT0FBUWdFLEVBQ1IsU0FBVWxFLEVBQ1YsV0FBWUMsRUFDWixRQUFTb0UsRUFDVCxhQUFjQyxFQUNkLE9BQVFyTCxFQUNSLFVBQVd5TCxFQUNYLE9BQVEsU0FBZ0J6TCxHQUFRMEwsR0FBTyxDQUNyQyxPQUFPQyxHQUFRaEosR0FBUVgsRUFBSStCLEVBQVFnRCxFQUFVL0csR0FBUWIsR0FBUWEsRUFBTSxFQUFHOEIsRUFBSzRKLEVBQUssQ0FDbEYsRUFDQSxRQUFTRSxDQUNYLEVBQUdKLEVBQUssQ0FBQyxDQUNYLENBR0EsU0FBU0ssR0FBVSxDQUNqQk4sRUFBYywwQkFBMEIsRUFDeENwTCxFQUFNLHNCQUFzQixFQUN4QkEsSUFBVWtMLEdBQ1pBLEVBQWEsc0JBQXNCLENBRXZDLENBR0EsU0FBU0ksRUFBVUssRUFBVyxDQUM1QixPQUFBUCxFQUFjLG9CQUFxQixDQUNqQyxVQUFXTyxDQUNiLENBQUMsRUFDR0EsSUFFRVgsRUFDRkQsRUFBZSxXQUFXLEVBRTFCQSxFQUFlLFdBQVcvSyxDQUFLLEVBRTdCQSxJQUFVa0wsSUFFWnZCLEdBQVkvRixFQUFRVixHQUFjQSxHQUFZLFFBQVEsV0FBYTZILEVBQWUsUUFBUSxXQUFZLEVBQUssRUFDM0dwQixHQUFZL0YsRUFBUXRGLEVBQVEsV0FBWSxFQUFJLEdBRTFDNEUsS0FBZ0JsRCxHQUFTQSxJQUFVVCxHQUFTLE9BQzlDMkQsR0FBY2xELEVBQ0xBLElBQVVULEdBQVMsUUFBVTJELEtBQ3RDQSxHQUFjLE1BSVpnSSxJQUFpQmxMLElBQ25CQSxFQUFNLHNCQUF3QkgsR0FFaENHLEVBQU0sV0FBVyxVQUFZLENBQzNCb0wsRUFBYywyQkFBMkIsRUFDekNwTCxFQUFNLHNCQUF3QixJQUNoQyxDQUFDLEVBQ0dBLElBQVVrTCxJQUNaQSxFQUFhLFdBQVcsRUFDeEJBLEVBQWEsc0JBQXdCLFFBS3JDckwsSUFBVytELEdBQVUsQ0FBQ0EsRUFBTyxVQUFZL0QsSUFBV2dDLEdBQU0sQ0FBQ2hDLEVBQU8sWUFDcEVtRixHQUFhLE1BSVgsQ0FBQzFHLEVBQVEsZ0JBQWtCLENBQUNxRCxFQUFJLFFBQVU5QixJQUFXLFdBQ3ZEK0QsRUFBTyxXQUFXM0UsRUFBTyxFQUFFLGlCQUFpQjBDLEVBQUksTUFBTSxFQUd0RCxDQUFDZ0ssR0FBYXBELEdBQThCNUcsQ0FBRyxHQUVqRCxDQUFDckQsRUFBUSxnQkFBa0JxRCxFQUFJLGlCQUFtQkEsRUFBSSxnQkFBZ0IsRUFDL0R3SixFQUFpQixFQUMxQixDQUdBLFNBQVNNLEdBQVUsQ0FDakIzSSxHQUFXd0csR0FBTTFGLENBQU0sRUFDdkJaLEdBQW9Cc0csR0FBTTFGLEVBQVF0RixFQUFRLFNBQVMsRUFDbkQ4RixHQUFlLENBQ2IsU0FBVXBFLEVBQ1YsS0FBTSxTQUNOLEtBQU02QixFQUNOLFNBQVVpQixHQUNWLGtCQUFtQkUsR0FDbkIsY0FBZXJCLENBQ2pCLENBQUMsQ0FDSCxDQU1BLEdBTElBLEVBQUksaUJBQW1CLFFBQ3pCQSxFQUFJLFlBQWNBLEVBQUksZUFBZSxFQUV2QzlCLEVBQVNmLEdBQVFlLEVBQVF2QixFQUFRLFVBQVd1RCxFQUFJLEVBQUksRUFDcER1SixFQUFjLFVBQVUsRUFDcEI3TCxHQUFTLGNBQWUsT0FBTzRMLEVBQ25DLEdBQUl2SCxFQUFPLFNBQVNqQyxFQUFJLE1BQU0sR0FBSzlCLEVBQU8sVUFBWUEsRUFBTyxZQUFjQSxFQUFPLFlBQWNHLEVBQU0sd0JBQTBCSCxFQUM5SCxPQUFPeUwsRUFBVSxFQUFLLEVBR3hCLEdBREE5RyxHQUFrQixHQUNkdUcsR0FBa0IsQ0FBQ3pNLEVBQVEsV0FBYTBNLEVBQVVDLElBQVlILEVBQVNqSCxLQUFhckIsSUFDdEZVLEtBQWdCLE9BQVMsS0FBSyxZQUFjb0IsR0FBWSxVQUFVLEtBQU15RyxFQUFnQm5ILEVBQVFqQyxDQUFHLElBQU15RyxFQUFNLFNBQVMsS0FBTTJDLEVBQWdCbkgsRUFBUWpDLENBQUcsR0FBSSxDQUk3SixHQUhBbUYsRUFBVyxLQUFLLGNBQWNuRixFQUFLOUIsQ0FBTSxJQUFNLFdBQy9DK0csRUFBVzVILEdBQVE0RSxDQUFNLEVBQ3pCd0gsRUFBYyxlQUFlLEVBQ3pCN0wsR0FBUyxjQUFlLE9BQU80TCxFQUNuQyxHQUFJTCxFQUNGLE9BQUFqSCxHQUFXckIsR0FDWGtKLEVBQVEsRUFDUixLQUFLLFdBQVcsRUFDaEJOLEVBQWMsUUFBUSxFQUNqQjdMLEdBQVMsZ0JBQ1J1RSxHQUNGdEIsR0FBTyxhQUFhb0IsRUFBUUUsRUFBTSxFQUVsQ3RCLEdBQU8sWUFBWW9CLENBQU0sR0FHdEIwSCxFQUFVLEVBQUksRUFFdkIsSUFBSU0sRUFBY2xFLEdBQVU3RixFQUFJdkQsRUFBUSxTQUFTLEVBQ2pELEdBQUksQ0FBQ3NOLEdBQWVDLEdBQWFsSyxFQUFLbUYsRUFBVSxJQUFJLEdBQUssQ0FBQzhFLEVBQVksU0FBVSxDQUk5RSxHQUFJQSxJQUFnQmhJLEVBQ2xCLE9BQU8wSCxFQUFVLEVBQUssRUFVeEIsR0FOSU0sR0FBZS9KLElBQU9GLEVBQUksU0FDNUI5QixFQUFTK0wsR0FFUC9MLElBQ0ZnSCxFQUFhN0gsR0FBUWEsQ0FBTSxHQUV6QjJMLEdBQVFoSixHQUFRWCxFQUFJK0IsRUFBUWdELEVBQVUvRyxFQUFRZ0gsRUFBWWxGLEVBQUssQ0FBQyxDQUFDOUIsQ0FBTSxJQUFNLEdBQy9FLE9BQUE2TCxFQUFRLEVBQ0pFLEdBQWVBLEVBQVksWUFFN0IvSixFQUFHLGFBQWErQixFQUFRZ0ksRUFBWSxXQUFXLEVBRS9DL0osRUFBRyxZQUFZK0IsQ0FBTSxFQUV2QkMsR0FBV2hDLEVBRVg0SixFQUFRLEVBQ0RILEVBQVUsRUFBSSxVQUVkTSxHQUFlRSxHQUFjbkssRUFBS21GLEVBQVUsSUFBSSxFQUFHLENBRTVELElBQUlpRixFQUFhM0YsR0FBU3ZFLEVBQUksRUFBR3ZELEVBQVMsRUFBSSxFQUM5QyxHQUFJeU4sSUFBZW5JLEVBQ2pCLE9BQU8wSCxFQUFVLEVBQUssRUFJeEIsR0FGQXpMLEVBQVNrTSxFQUNUbEYsRUFBYTdILEdBQVFhLENBQU0sRUFDdkIyTCxHQUFRaEosR0FBUVgsRUFBSStCLEVBQVFnRCxFQUFVL0csRUFBUWdILEVBQVlsRixFQUFLLEVBQUssSUFBTSxHQUM1RSxPQUFBK0osRUFBUSxFQUNSN0osRUFBRyxhQUFhK0IsRUFBUW1JLENBQVUsRUFDbENsSSxHQUFXaEMsRUFFWDRKLEVBQVEsRUFDREgsRUFBVSxFQUFJLFVBRWR6TCxFQUFPLGFBQWVnQyxFQUFJLENBQ25DZ0YsRUFBYTdILEdBQVFhLENBQU0sRUFDM0IsSUFBSW1NLEVBQVksRUFDZEMsRUFDQUMsRUFBaUJ0SSxFQUFPLGFBQWUvQixFQUN2Q3NLLEVBQWtCLENBQUN4RixHQUFtQi9DLEVBQU8sVUFBWUEsRUFBTyxRQUFVZ0QsRUFBVS9HLEVBQU8sVUFBWUEsRUFBTyxRQUFVZ0gsRUFBWUMsQ0FBUSxFQUM1SXNGLEVBQVF0RixFQUFXLE1BQVEsT0FDM0J1RixFQUFrQkMsR0FBZXpNLEVBQVEsTUFBTyxLQUFLLEdBQUt5TSxHQUFlMUksRUFBUSxNQUFPLEtBQUssRUFDN0YySSxFQUFlRixFQUFrQkEsRUFBZ0IsVUFBWSxPQUMzRHJILEtBQWVuRixJQUNqQm9NLEVBQXdCcEYsRUFBV3VGLENBQUssRUFDeENsSCxHQUF3QixHQUN4QkMsR0FBeUIsQ0FBQ2dILEdBQW1CN04sRUFBUSxZQUFjNE4sR0FFckVGLEVBQVlRLEdBQWtCN0ssRUFBSzlCLEVBQVFnSCxFQUFZQyxFQUFVcUYsRUFBa0IsRUFBSTdOLEVBQVEsY0FBZUEsRUFBUSx1QkFBeUIsS0FBT0EsRUFBUSxjQUFnQkEsRUFBUSxzQkFBdUI2RyxHQUF3QkgsS0FBZW5GLENBQU0sRUFDMVAsSUFBSTRNLEVBQ0osR0FBSVQsSUFBYyxFQUFHLENBRW5CLElBQUlVLEVBQVlwRCxHQUFNMUYsQ0FBTSxFQUM1QixHQUNFOEksR0FBYVYsRUFDYlMsRUFBVTVJLEdBQVMsU0FBUzZJLENBQVMsUUFDOUJELElBQVluTixHQUFJbU4sRUFBUyxTQUFTLElBQU0sUUFBVUEsSUFBWWxPLEtBR3pFLEdBQUl5TixJQUFjLEdBQUtTLElBQVk1TSxFQUNqQyxPQUFPeUwsRUFBVSxFQUFLLEVBRXhCdEcsR0FBYW5GLEVBQ2JvRixHQUFnQitHLEVBQ2hCLElBQUlXLEVBQWM5TSxFQUFPLG1CQUN2QjBMLEVBQVEsR0FDVkEsRUFBUVMsSUFBYyxFQUN0QixJQUFJWSxFQUFhcEIsR0FBUWhKLEdBQVFYLEVBQUkrQixFQUFRZ0QsRUFBVS9HLEVBQVFnSCxFQUFZbEYsRUFBSzRKLENBQUssRUFDckYsR0FBSXFCLElBQWUsR0FDakIsT0FBSUEsSUFBZSxHQUFLQSxJQUFlLE1BQ3JDckIsRUFBUXFCLElBQWUsR0FFekJySCxHQUFVLEdBQ1YsV0FBV3NILEdBQVcsRUFBRSxFQUN4Qm5CLEVBQVEsRUFDSkgsR0FBUyxDQUFDb0IsRUFDWjlLLEVBQUcsWUFBWStCLENBQU0sRUFFckIvRCxFQUFPLFdBQVcsYUFBYStELEVBQVEySCxFQUFRb0IsRUFBYzlNLENBQU0sRUFJakV3TSxHQUNGUyxHQUFTVCxFQUFpQixFQUFHRSxFQUFlRixFQUFnQixTQUFTLEVBRXZFeEksR0FBV0QsRUFBTyxXQUdkcUksSUFBMEIsUUFBYSxDQUFDOUcsS0FDMUNDLEdBQXFCLEtBQUssSUFBSTZHLEVBQXdCak4sR0FBUWEsQ0FBTSxFQUFFdU0sQ0FBSyxDQUFDLEdBRTlFWCxFQUFRLEVBQ0RILEVBQVUsRUFBSSxFQUd6QixHQUFJekosRUFBRyxTQUFTK0IsQ0FBTSxFQUNwQixPQUFPMEgsRUFBVSxFQUFLLEVBRzFCLE1BQU8sRUFDVCxFQUNBLHNCQUF1QixLQUN2QixlQUFnQixVQUEwQixDQUN4Q3hCLEdBQUksU0FBVSxZQUFhLEtBQUssWUFBWSxFQUM1Q0EsR0FBSSxTQUFVLFlBQWEsS0FBSyxZQUFZLEVBQzVDQSxHQUFJLFNBQVUsY0FBZSxLQUFLLFlBQVksRUFDOUNBLEdBQUksU0FBVSxXQUFZdkIsRUFBNkIsRUFDdkR1QixHQUFJLFNBQVUsWUFBYXZCLEVBQTZCLEVBQ3hEdUIsR0FBSSxTQUFVLFlBQWF2QixFQUE2QixDQUMxRCxFQUNBLGFBQWMsVUFBd0IsQ0FDcEMsSUFBSWlCLEVBQWdCLEtBQUssR0FBRyxjQUM1Qk0sR0FBSU4sRUFBZSxVQUFXLEtBQUssT0FBTyxFQUMxQ00sR0FBSU4sRUFBZSxXQUFZLEtBQUssT0FBTyxFQUMzQ00sR0FBSU4sRUFBZSxZQUFhLEtBQUssT0FBTyxFQUM1Q00sR0FBSU4sRUFBZSxnQkFBaUIsS0FBSyxPQUFPLEVBQ2hETSxHQUFJTixFQUFlLGNBQWUsS0FBSyxPQUFPLEVBQzlDTSxHQUFJLFNBQVUsY0FBZSxJQUFJLENBQ25DLEVBQ0EsUUFBUyxTQUE0Qm5JLEVBQUssQ0FDeEMsSUFBSUUsRUFBSyxLQUFLLEdBQ1p2RCxFQUFVLEtBQUssUUFhakIsR0FWQXdFLEdBQVd3RyxHQUFNMUYsQ0FBTSxFQUN2QlosR0FBb0JzRyxHQUFNMUYsRUFBUXRGLEVBQVEsU0FBUyxFQUNuRG1GLEdBQVksT0FBUSxLQUFNLENBQ3hCLElBQUs5QixDQUNQLENBQUMsRUFDRGtDLEdBQVdELEdBQVVBLEVBQU8sV0FHNUJkLEdBQVd3RyxHQUFNMUYsQ0FBTSxFQUN2QlosR0FBb0JzRyxHQUFNMUYsRUFBUXRGLEVBQVEsU0FBUyxFQUMvQ2lCLEdBQVMsY0FBZSxDQUMxQixLQUFLLFNBQVMsRUFDZCxPQUVGZ0YsR0FBc0IsR0FDdEJZLEdBQXlCLEdBQ3pCRCxHQUF3QixHQUN4QixjQUFjLEtBQUssT0FBTyxFQUMxQixhQUFhLEtBQUssZUFBZSxFQUNqQzZILEdBQWdCLEtBQUssT0FBTyxFQUM1QkEsR0FBZ0IsS0FBSyxZQUFZLEVBRzdCLEtBQUssa0JBQ1BqRCxHQUFJLFNBQVUsT0FBUSxJQUFJLEVBQzFCQSxHQUFJakksRUFBSSxZQUFhLEtBQUssWUFBWSxHQUV4QyxLQUFLLGVBQWUsRUFDcEIsS0FBSyxhQUFhLEVBQ2RnSCxJQUNGdkosR0FBSSxTQUFTLEtBQU0sY0FBZSxFQUFFLEVBRXRDQSxHQUFJc0UsRUFBUSxZQUFhLEVBQUUsRUFDdkJqQyxJQUNFc0MsS0FDRnRDLEVBQUksWUFBY0EsRUFBSSxlQUFlLEVBQ3JDLENBQUNyRCxFQUFRLFlBQWNxRCxFQUFJLGdCQUFnQixHQUU3Q3BELElBQVdBLEdBQVEsWUFBY0EsR0FBUSxXQUFXLFlBQVlBLEVBQU8sR0FDbkVpRSxLQUFXcUIsSUFBWVgsSUFBZUEsR0FBWSxjQUFnQixVQUVwRVIsSUFBV0EsR0FBUSxZQUFjQSxHQUFRLFdBQVcsWUFBWUEsRUFBTyxFQUVyRWtCLElBQ0UsS0FBSyxpQkFDUGtHLEdBQUlsRyxFQUFRLFVBQVcsSUFBSSxFQUU3QmlHLEdBQWtCakcsQ0FBTSxFQUN4QkEsRUFBTyxNQUFNLGFBQWEsRUFBSSxHQUkxQkssSUFBUyxDQUFDTSxJQUNab0YsR0FBWS9GLEVBQVFWLEdBQWNBLEdBQVksUUFBUSxXQUFhLEtBQUssUUFBUSxXQUFZLEVBQUssRUFFbkd5RyxHQUFZL0YsRUFBUSxLQUFLLFFBQVEsWUFBYSxFQUFLLEVBR25EUSxHQUFlLENBQ2IsU0FBVSxLQUNWLEtBQU0sV0FDTixLQUFNUCxHQUNOLFNBQVUsS0FDVixrQkFBbUIsS0FDbkIsY0FBZWxDLENBQ2pCLENBQUMsRUFDR2EsS0FBV3FCLElBQ1RmLElBQVksSUFFZHNCLEdBQWUsQ0FDYixPQUFRUCxHQUNSLEtBQU0sTUFDTixLQUFNQSxHQUNOLE9BQVFyQixHQUNSLGNBQWViLENBQ2pCLENBQUMsRUFHRHlDLEdBQWUsQ0FDYixTQUFVLEtBQ1YsS0FBTSxTQUNOLEtBQU1QLEdBQ04sY0FBZWxDLENBQ2pCLENBQUMsRUFHRHlDLEdBQWUsQ0FDYixPQUFRUCxHQUNSLEtBQU0sT0FDTixLQUFNQSxHQUNOLE9BQVFyQixHQUNSLGNBQWViLENBQ2pCLENBQUMsRUFDRHlDLEdBQWUsQ0FDYixTQUFVLEtBQ1YsS0FBTSxPQUNOLEtBQU1QLEdBQ04sY0FBZWxDLENBQ2pCLENBQUMsR0FFSHVCLElBQWVBLEdBQVksS0FBSyxHQUU1QkosS0FBYUQsSUFDWEMsSUFBWSxJQUVkc0IsR0FBZSxDQUNiLFNBQVUsS0FDVixLQUFNLFNBQ04sS0FBTVAsR0FDTixjQUFlbEMsQ0FDakIsQ0FBQyxFQUNEeUMsR0FBZSxDQUNiLFNBQVUsS0FDVixLQUFNLE9BQ04sS0FBTVAsR0FDTixjQUFlbEMsQ0FDakIsQ0FBQyxHQUlIcEMsR0FBUyxVQUVQdUQsSUFBWSxNQUFRQSxLQUFhLE1BQ25DQSxHQUFXRCxHQUNYRyxHQUFvQkQsSUFFdEJxQixHQUFlLENBQ2IsU0FBVSxLQUNWLEtBQU0sTUFDTixLQUFNUCxHQUNOLGNBQWVsQyxDQUNqQixDQUFDLEVBR0QsS0FBSyxLQUFLLEtBSWhCLEtBQUssU0FBUyxDQUNoQixFQUNBLFNBQVUsVUFBb0IsQ0FDNUI4QixHQUFZLFVBQVcsSUFBSSxFQUMzQmpCLEdBQVNvQixFQUFTQyxHQUFXdEYsR0FBVXVGLEdBQVNwQixHQUFVcUIsR0FBYUMsR0FBY1UsR0FBU0MsR0FBV1YsR0FBUW5CLEdBQVdFLEdBQW9CSCxHQUFXRSxHQUFvQmlDLEdBQWFDLEdBQWdCL0IsR0FBY29CLEdBQWMvRSxHQUFTLFFBQVVBLEdBQVMsTUFBUUEsR0FBUyxNQUFRQSxHQUFTLE9BQVMsS0FDL1NpRyxHQUFrQixRQUFRLFNBQVUzRCxFQUFJLENBQ3RDQSxFQUFHLFFBQVUsRUFDZixDQUFDLEVBQ0QyRCxHQUFrQixPQUFTWixHQUFTQyxHQUFTLENBQy9DLEVBQ0EsWUFBYSxTQUFnQ2xELEVBQUssQ0FDaEQsT0FBUUEsRUFBSSxLQUFNLENBQ2hCLElBQUssT0FDTCxJQUFLLFVBQ0gsS0FBSyxRQUFRQSxDQUFHLEVBQ2hCLE1BQ0YsSUFBSyxZQUNMLElBQUssV0FDQ2lDLElBQ0YsS0FBSyxZQUFZakMsQ0FBRyxFQUNwQnFMLEdBQWdCckwsQ0FBRyxHQUVyQixNQUNGLElBQUssY0FDSEEsRUFBSSxlQUFlLEVBQ25CLEtBQ0osQ0FDRixFQUtBLFFBQVMsVUFBbUIsQ0FPMUIsUUFOSXNMLEVBQVEsQ0FBQyxFQUNYcEwsRUFDQXhDLEVBQVcsS0FBSyxHQUFHLFNBQ25CcUosRUFBSSxFQUNKd0UsRUFBSTdOLEVBQVMsT0FDYmYsRUFBVSxLQUFLLFFBQ1ZvSyxFQUFJd0UsRUFBR3hFLElBQ1o3RyxFQUFLeEMsRUFBU3FKLENBQUMsRUFDWDVKLEdBQVErQyxFQUFJdkQsRUFBUSxVQUFXLEtBQUssR0FBSSxFQUFLLEdBQy9DMk8sRUFBTSxLQUFLcEwsRUFBRyxhQUFhdkQsRUFBUSxVQUFVLEdBQUs2TyxHQUFZdEwsQ0FBRSxDQUFDLEVBR3JFLE9BQU9vTCxDQUNULEVBS0EsS0FBTSxTQUFjQSxFQUFPRyxFQUFjLENBQ3ZDLElBQUlDLEVBQVEsQ0FBQyxFQUNYN0ssRUFBUyxLQUFLLEdBQ2hCLEtBQUssUUFBUSxFQUFFLFFBQVEsU0FBVThLLEVBQUk1RSxFQUFHLENBQ3RDLElBQUk3RyxFQUFLVyxFQUFPLFNBQVNrRyxDQUFDLEVBQ3RCNUosR0FBUStDLEVBQUksS0FBSyxRQUFRLFVBQVdXLEVBQVEsRUFBSyxJQUNuRDZLLEVBQU1DLENBQUUsRUFBSXpMLEVBRWhCLEVBQUcsSUFBSSxFQUNQdUwsR0FBZ0IsS0FBSyxzQkFBc0IsRUFDM0NILEVBQU0sUUFBUSxTQUFVSyxFQUFJLENBQ3RCRCxFQUFNQyxDQUFFLElBQ1Y5SyxFQUFPLFlBQVk2SyxFQUFNQyxDQUFFLENBQUMsRUFDNUI5SyxFQUFPLFlBQVk2SyxFQUFNQyxDQUFFLENBQUMsRUFFaEMsQ0FBQyxFQUNERixHQUFnQixLQUFLLFdBQVcsQ0FDbEMsRUFJQSxLQUFNLFVBQWdCLENBQ3BCLElBQUlHLEVBQVEsS0FBSyxRQUFRLE1BQ3pCQSxHQUFTQSxFQUFNLEtBQU9BLEVBQU0sSUFBSSxJQUFJLENBQ3RDLEVBT0EsUUFBUyxTQUFtQjFMLEVBQUkyTCxFQUFVLENBQ3hDLE9BQU8xTyxHQUFRK0MsRUFBSTJMLEdBQVksS0FBSyxRQUFRLFVBQVcsS0FBSyxHQUFJLEVBQUssQ0FDdkUsRUFPQSxPQUFRLFNBQWdCdEwsRUFBTUUsRUFBTyxDQUNuQyxJQUFJOUQsRUFBVSxLQUFLLFFBQ25CLEdBQUk4RCxJQUFVLE9BQ1osT0FBTzlELEVBQVE0RCxDQUFJLEVBRW5CLElBQUlHLEVBQWdCaEIsR0FBYyxhQUFhLEtBQU1hLEVBQU1FLENBQUssRUFDNUQsT0FBT0MsRUFBa0IsSUFDM0IvRCxFQUFRNEQsQ0FBSSxFQUFJRyxFQUVoQi9ELEVBQVE0RCxDQUFJLEVBQUlFLEVBRWRGLElBQVMsU0FDWDJGLEdBQWN2SixDQUFPLENBRzNCLEVBSUEsUUFBUyxVQUFtQixDQUMxQm1GLEdBQVksVUFBVyxJQUFJLEVBQzNCLElBQUk1QixFQUFLLEtBQUssR0FDZEEsRUFBRzVDLEVBQU8sRUFBSSxLQUNkNkssR0FBSWpJLEVBQUksWUFBYSxLQUFLLFdBQVcsRUFDckNpSSxHQUFJakksRUFBSSxhQUFjLEtBQUssV0FBVyxFQUN0Q2lJLEdBQUlqSSxFQUFJLGNBQWUsS0FBSyxXQUFXLEVBQ25DLEtBQUssa0JBQ1BpSSxHQUFJakksRUFBSSxXQUFZLElBQUksRUFDeEJpSSxHQUFJakksRUFBSSxZQUFhLElBQUksR0FHM0IsTUFBTSxVQUFVLFFBQVEsS0FBS0EsRUFBRyxpQkFBaUIsYUFBYSxFQUFHLFNBQVVBLEVBQUksQ0FDN0VBLEVBQUcsZ0JBQWdCLFdBQVcsQ0FDaEMsQ0FBQyxFQUNELEtBQUssUUFBUSxFQUNiLEtBQUssMEJBQTBCLEVBQy9CNEMsR0FBVSxPQUFPQSxHQUFVLFFBQVEsS0FBSyxFQUFFLEVBQUcsQ0FBQyxFQUM5QyxLQUFLLEdBQUs1QyxFQUFLLElBQ2pCLEVBQ0EsV0FBWSxVQUFzQixDQUNoQyxHQUFJLENBQUNtQyxHQUFhLENBRWhCLEdBREFQLEdBQVksWUFBYSxJQUFJLEVBQ3pCbEUsR0FBUyxjQUFlLE9BQzVCRCxHQUFJb0QsR0FBUyxVQUFXLE1BQU0sRUFDMUIsS0FBSyxRQUFRLG1CQUFxQkEsR0FBUSxZQUM1Q0EsR0FBUSxXQUFXLFlBQVlBLEVBQU8sRUFFeENzQixHQUFjLEdBRWxCLEVBQ0EsV0FBWSxTQUFvQmQsRUFBYSxDQUMzQyxHQUFJQSxFQUFZLGNBQWdCLFFBQVMsQ0FDdkMsS0FBSyxXQUFXLEVBQ2hCLE9BRUYsR0FBSWMsR0FBYSxDQUVmLEdBREFQLEdBQVksWUFBYSxJQUFJLEVBQ3pCbEUsR0FBUyxjQUFlLE9BR3hCcUUsRUFBTyxZQUFjcEIsSUFBVSxDQUFDLEtBQUssUUFBUSxNQUFNLFlBQ3JEQSxHQUFPLGFBQWFFLEdBQVNrQixDQUFNLEVBQzFCRSxHQUNUdEIsR0FBTyxhQUFhRSxHQUFTb0IsRUFBTSxFQUVuQ3RCLEdBQU8sWUFBWUUsRUFBTyxFQUV4QixLQUFLLFFBQVEsTUFBTSxhQUNyQixLQUFLLFFBQVFrQixFQUFRbEIsRUFBTyxFQUU5QnBELEdBQUlvRCxHQUFTLFVBQVcsRUFBRSxFQUMxQnNCLEdBQWMsR0FFbEIsQ0FDRixFQUNBLFNBQVNnSixHQUEyQnJMLEVBQUssQ0FDbkNBLEVBQUksZUFDTkEsRUFBSSxhQUFhLFdBQWEsUUFFaENBLEVBQUksWUFBY0EsRUFBSSxlQUFlLENBQ3ZDLENBQ0EsU0FBUzZKLEdBQVE1SSxFQUFRRCxFQUFNaUIsRUFBUWdELEVBQVVuRSxFQUFVb0UsRUFBWTVELEVBQWV3SyxFQUFpQixDQUNyRyxJQUFJOUwsRUFDRkQsRUFBV2tCLEVBQU8zRCxFQUFPLEVBQ3pCeU8sRUFBV2hNLEVBQVMsUUFBUSxPQUM1QmlNLEVBRUYsT0FBSSxPQUFPLGFBQWUsQ0FBQ3RLLElBQWMsQ0FBQ0MsR0FDeEMzQixFQUFNLElBQUksWUFBWSxPQUFRLENBQzVCLFFBQVMsR0FDVCxXQUFZLEVBQ2QsQ0FBQyxHQUVEQSxFQUFNLFNBQVMsWUFBWSxPQUFPLEVBQ2xDQSxFQUFJLFVBQVUsT0FBUSxHQUFNLEVBQUksR0FFbENBLEVBQUksR0FBS2dCLEVBQ1RoQixFQUFJLEtBQU9pQixFQUNYakIsRUFBSSxRQUFVaUMsRUFDZGpDLEVBQUksWUFBY2lGLEVBQ2xCakYsRUFBSSxRQUFVYyxHQUFZRSxFQUMxQmhCLEVBQUksWUFBY2tGLEdBQWM3SCxHQUFRMkQsQ0FBSSxFQUM1Q2hCLEVBQUksZ0JBQWtCOEwsRUFDdEI5TCxFQUFJLGNBQWdCc0IsRUFDcEJMLEVBQU8sY0FBY2pCLENBQUcsRUFDcEIrTCxJQUNGQyxFQUFTRCxFQUFTLEtBQUtoTSxFQUFVQyxFQUFLc0IsQ0FBYSxHQUU5QzBLLENBQ1QsQ0FDQSxTQUFTOUQsR0FBa0JoSSxFQUFJLENBQzdCQSxFQUFHLFVBQVksRUFDakIsQ0FDQSxTQUFTZ0wsSUFBWSxDQUNuQnRILEdBQVUsRUFDWixDQUNBLFNBQVN1RyxHQUFjbkssRUFBS21GLEVBQVVwRixFQUFVLENBQzlDLElBQUlrTSxFQUFjNU8sR0FBUW9ILEdBQVMxRSxFQUFTLEdBQUksRUFBR0EsRUFBUyxRQUFTLEVBQUksQ0FBQyxFQUN0RW1NLEVBQXNCelAsR0FBa0NzRCxFQUFTLEdBQUlBLEVBQVMsUUFBU25ELEVBQU8sRUFDOUZ1UCxFQUFTLEdBQ2IsT0FBT2hILEVBQVduRixFQUFJLFFBQVVrTSxFQUFvQixLQUFPQyxHQUFVbk0sRUFBSSxRQUFVaU0sRUFBWSxLQUFPak0sRUFBSSxRQUFVaU0sRUFBWSxNQUFRak0sRUFBSSxRQUFVa00sRUFBb0IsSUFBTUMsR0FBVW5NLEVBQUksUUFBVWlNLEVBQVksUUFBVWpNLEVBQUksUUFBVWlNLEVBQVksSUFDMVAsQ0FDQSxTQUFTL0IsR0FBYWxLLEVBQUttRixFQUFVcEYsRUFBVSxDQUM3QyxJQUFJcU0sRUFBYS9PLEdBQVEwSSxHQUFVaEcsRUFBUyxHQUFJQSxFQUFTLFFBQVEsU0FBUyxDQUFDLEVBQ3ZFbU0sRUFBc0J6UCxHQUFrQ3NELEVBQVMsR0FBSUEsRUFBUyxRQUFTbkQsRUFBTyxFQUM5RnVQLEVBQVMsR0FDYixPQUFPaEgsRUFBV25GLEVBQUksUUFBVWtNLEVBQW9CLE1BQVFDLEdBQVVuTSxFQUFJLFFBQVVvTSxFQUFXLFFBQVVwTSxFQUFJLFFBQVVvTSxFQUFXLEtBQU9wTSxFQUFJLFFBQVVrTSxFQUFvQixPQUFTQyxHQUFVbk0sRUFBSSxRQUFVb00sRUFBVyxPQUFTcE0sRUFBSSxRQUFVb00sRUFBVyxHQUMzUCxDQUNBLFNBQVN2QixHQUFrQjdLLEVBQUs5QixFQUFRZ0gsRUFBWUMsRUFBVWtILEVBQWVDLEVBQXVCQyxFQUFZQyxFQUFjLENBQzVILElBQUlDLEVBQWN0SCxFQUFXbkYsRUFBSSxRQUFVQSxFQUFJLFFBQzdDME0sRUFBZXZILEVBQVdELEVBQVcsT0FBU0EsRUFBVyxNQUN6RHlILEVBQVd4SCxFQUFXRCxFQUFXLElBQU1BLEVBQVcsS0FDbEQwSCxFQUFXekgsRUFBV0QsRUFBVyxPQUFTQSxFQUFXLE1BQ3JEMkgsRUFBUyxHQUNYLEdBQUksQ0FBQ04sR0FFSCxHQUFJQyxHQUFnQi9JLEdBQXFCaUosRUFBZUwsR0FPdEQsR0FKSSxDQUFDOUksS0FBMEJELEtBQWtCLEVBQUltSixFQUFjRSxFQUFXRCxFQUFlSixFQUF3QixFQUFJRyxFQUFjRyxFQUFXRixFQUFlSixFQUF3QixLQUV2TC9JLEdBQXdCLElBRXJCQSxHQU9Ic0osRUFBUyxXQUxMdkosS0FBa0IsRUFBSW1KLEVBQWNFLEVBQVdsSixHQUNqRGdKLEVBQWNHLEVBQVduSixHQUN6QixNQUFPLENBQUNILFdBT1JtSixFQUFjRSxFQUFXRCxHQUFnQixFQUFJTCxHQUFpQixHQUFLSSxFQUFjRyxFQUFXRixHQUFnQixFQUFJTCxHQUFpQixFQUNuSSxPQUFPUyxHQUFvQjVPLENBQU0sRUFLdkMsT0FEQTJPLEVBQVNBLEdBQVVOLEVBQ2ZNLElBRUVKLEVBQWNFLEVBQVdELEVBQWVKLEVBQXdCLEdBQUtHLEVBQWNHLEVBQVdGLEVBQWVKLEVBQXdCLEdBQ2hJRyxFQUFjRSxFQUFXRCxFQUFlLEVBQUksRUFBSSxHQUdwRCxDQUNULENBUUEsU0FBU0ksR0FBb0I1TyxFQUFRLENBQ25DLE9BQUl5SixHQUFNMUYsQ0FBTSxFQUFJMEYsR0FBTXpKLENBQU0sRUFDdkIsRUFFQSxFQUVYLENBUUEsU0FBU3NOLEdBQVl0TCxFQUFJLENBSXZCLFFBSEk2TSxFQUFNN00sRUFBRyxRQUFVQSxFQUFHLFVBQVlBLEVBQUcsSUFBTUEsRUFBRyxLQUFPQSxFQUFHLFlBQzFENkcsRUFBSWdHLEVBQUksT0FDUkMsRUFBTSxFQUNEakcsS0FDTGlHLEdBQU9ELEVBQUksV0FBV2hHLENBQUMsRUFFekIsT0FBT2lHLEVBQUksU0FBUyxFQUFFLENBQ3hCLENBQ0EsU0FBU3RGLEdBQXVCdUYsRUFBTSxDQUNwQ3BKLEdBQWtCLE9BQVMsRUFHM0IsUUFGSXFKLEVBQVNELEVBQUsscUJBQXFCLE9BQU8sRUFDMUNFLEVBQU1ELEVBQU8sT0FDVkMsS0FBTyxDQUNaLElBQUlqTixFQUFLZ04sRUFBT0MsQ0FBRyxFQUNuQmpOLEVBQUcsU0FBVzJELEdBQWtCLEtBQUszRCxDQUFFLEVBRTNDLENBQ0EsU0FBU2tJLEdBQVVqQixFQUFJLENBQ3JCLE9BQU8sV0FBV0EsRUFBSSxDQUFDLENBQ3pCLENBQ0EsU0FBU2lFLEdBQWdCTyxFQUFJLENBQzNCLE9BQU8sYUFBYUEsQ0FBRSxDQUN4QixDQUdJN0gsSUFDRnNELEdBQUcsU0FBVSxZQUFhLFNBQVVwSCxFQUFLLEVBQ2xDcEMsR0FBUyxRQUFVZ0YsS0FBd0I1QyxFQUFJLFlBQ2xEQSxFQUFJLGVBQWUsQ0FFdkIsQ0FBQyxFQUlIcEMsR0FBUyxNQUFRLENBQ2YsR0FBSXdKLEdBQ0osSUFBS2UsR0FDTCxJQUFLeEssR0FDTCxLQUFNc0ssR0FDTixHQUFJLFNBQVkvSCxFQUFJMkwsRUFBVSxDQUM1QixNQUFPLENBQUMsQ0FBQzFPLEdBQVErQyxFQUFJMkwsRUFBVTNMLEVBQUksRUFBSyxDQUMxQyxFQUNBLE9BQVFrTixHQUNSLFNBQVVDLEdBQ1YsUUFBU2xRLEdBQ1QsWUFBYTZLLEdBQ2IsTUFBT2tCLEdBQ1AsTUFBT3ZCLEdBQ1AsU0FBVVMsR0FDVixlQUFnQmdELEdBQ2hCLGdCQUFpQi9HLEdBQ2pCLFNBQVVJLEdBQ1YsUUFBU25ILEVBQ1gsRUFPQU0sR0FBUyxJQUFNLFNBQVUwUCxFQUFTLENBQ2hDLE9BQU9BLEVBQVFoUSxFQUFPLENBQ3hCLEVBTUFNLEdBQVMsTUFBUSxVQUFZLENBQzNCLFFBQVMyUCxFQUFPLFVBQVUsT0FBUS9OLEVBQVUsSUFBSSxNQUFNK04sQ0FBSSxFQUFHQyxFQUFPLEVBQUdBLEVBQU9ELEVBQU1DLElBQ2xGaE8sRUFBUWdPLENBQUksRUFBSSxVQUFVQSxDQUFJLEVBRTVCaE8sRUFBUSxDQUFDLEVBQUUsY0FBZ0IsUUFBT0EsRUFBVUEsRUFBUSxDQUFDLEdBQ3pEQSxFQUFRLFFBQVEsU0FBVUcsRUFBUSxDQUNoQyxHQUFJLENBQUNBLEVBQU8sV0FBYSxDQUFDQSxFQUFPLFVBQVUsWUFDekMsS0FBTSxnRUFBZ0UsT0FBTyxDQUFDLEVBQUUsU0FBUyxLQUFLQSxDQUFNLENBQUMsRUFFbkdBLEVBQU8sUUFBTy9CLEdBQVMsTUFBUUUsR0FBZUEsR0FBZSxDQUFDLEVBQUdGLEdBQVMsS0FBSyxFQUFHK0IsRUFBTyxLQUFLLEdBQ2xHRCxHQUFjLE1BQU1DLENBQU0sQ0FDNUIsQ0FBQyxDQUNILEVBT0EvQixHQUFTLE9BQVMsU0FBVXNDLEVBQUl2RCxFQUFTLENBQ3ZDLE9BQU8sSUFBSWlCLEdBQVNzQyxFQUFJdkQsQ0FBTyxDQUNqQyxFQUdBaUIsR0FBUyxRQUFVNlAsR0FFbkIsSUFBSUMsR0FBYyxDQUFDLEVBQ2pCQyxHQUNBQyxHQUNBQyxHQUFZLEdBQ1pDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0YsU0FBU0MsSUFBbUIsQ0FDMUIsU0FBU0MsR0FBYSxDQUNwQixLQUFLLFNBQVcsQ0FDZCxPQUFRLEdBQ1Isd0JBQXlCLEdBQ3pCLGtCQUFtQixHQUNuQixZQUFhLEdBQ2IsYUFBYyxFQUNoQixFQUdBLFFBQVNoSCxLQUFNLEtBQ1RBLEVBQUcsT0FBTyxDQUFDLElBQU0sS0FBTyxPQUFPLEtBQUtBLENBQUUsR0FBTSxhQUM5QyxLQUFLQSxDQUFFLEVBQUksS0FBS0EsQ0FBRSxFQUFFLEtBQUssSUFBSSxFQUduQyxDQUNBLE9BQUFnSCxFQUFXLFVBQVksQ0FDckIsWUFBYSxTQUFxQnZOLEVBQU0sQ0FDdEMsSUFBSVUsRUFBZ0JWLEVBQUssY0FDckIsS0FBSyxTQUFTLGdCQUNoQndHLEdBQUcsU0FBVSxXQUFZLEtBQUssaUJBQWlCLEVBRTNDLEtBQUssUUFBUSxlQUNmQSxHQUFHLFNBQVUsY0FBZSxLQUFLLHlCQUF5QixFQUNqRDlGLEVBQWMsUUFDdkI4RixHQUFHLFNBQVUsWUFBYSxLQUFLLHlCQUF5QixFQUV4REEsR0FBRyxTQUFVLFlBQWEsS0FBSyx5QkFBeUIsQ0FHOUQsRUFDQSxrQkFBbUIsU0FBMkJnSCxFQUFPLENBQ25ELElBQUk5TSxFQUFnQjhNLEVBQU0sY0FFdEIsQ0FBQyxLQUFLLFFBQVEsZ0JBQWtCLENBQUM5TSxFQUFjLFFBQ2pELEtBQUssa0JBQWtCQSxDQUFhLENBRXhDLEVBQ0EsS0FBTSxVQUFnQixDQUNoQixLQUFLLFNBQVMsZ0JBQ2hCNkcsR0FBSSxTQUFVLFdBQVksS0FBSyxpQkFBaUIsR0FFaERBLEdBQUksU0FBVSxjQUFlLEtBQUsseUJBQXlCLEVBQzNEQSxHQUFJLFNBQVUsWUFBYSxLQUFLLHlCQUF5QixFQUN6REEsR0FBSSxTQUFVLFlBQWEsS0FBSyx5QkFBeUIsR0FFM0RrRyxHQUFnQyxFQUNoQ0MsR0FBaUIsRUFDakJDLEdBQWUsQ0FDakIsRUFDQSxRQUFTLFVBQW1CLENBQzFCUCxHQUFhSixHQUFlRCxHQUFXRSxHQUFZSSxHQUE2QkgsR0FBa0JDLEdBQWtCLEtBQ3BITCxHQUFZLE9BQVMsQ0FDdkIsRUFDQSwwQkFBMkIsU0FBbUMxTixFQUFLLENBQ2pFLEtBQUssa0JBQWtCQSxFQUFLLEVBQUksQ0FDbEMsRUFDQSxrQkFBbUIsU0FBMkJBLEVBQUtxSSxFQUFVLENBQzNELElBQUloSyxFQUFRLEtBQ1JzSCxHQUFLM0YsRUFBSSxRQUFVQSxFQUFJLFFBQVEsQ0FBQyxFQUFJQSxHQUFLLFFBQzNDNEYsR0FBSzVGLEVBQUksUUFBVUEsRUFBSSxRQUFRLENBQUMsRUFBSUEsR0FBSyxRQUN6Q3dPLEVBQU8sU0FBUyxpQkFBaUI3SSxFQUFHQyxDQUFDLEVBT3ZDLEdBTkFvSSxHQUFhaE8sRUFNVHFJLEdBQVksS0FBSyxRQUFRLHlCQUEyQjFHLElBQVFELElBQWN3RixHQUFRLENBQ3BGdUgsR0FBV3pPLEVBQUssS0FBSyxRQUFTd08sRUFBTW5HLENBQVEsRUFHNUMsSUFBSXFHLEVBQWlCQyxHQUEyQkgsRUFBTSxFQUFJLEVBQ3REWCxLQUFjLENBQUNJLElBQThCdEksSUFBTW1JLElBQW1CbEksSUFBTW1JLE1BQzlFRSxJQUE4QkksR0FBZ0MsRUFFOURKLEdBQTZCLFlBQVksVUFBWSxDQUNuRCxJQUFJVyxFQUFVRCxHQUEyQixTQUFTLGlCQUFpQmhKLEVBQUdDLENBQUMsRUFBRyxFQUFJLEVBQzFFZ0osSUFBWUYsSUFDZEEsRUFBaUJFLEVBQ2pCTixHQUFpQixHQUVuQkcsR0FBV3pPLEVBQUszQixFQUFNLFFBQVN1USxFQUFTdkcsQ0FBUSxDQUNsRCxFQUFHLEVBQUUsRUFDTHlGLEdBQWtCbkksRUFDbEJvSSxHQUFrQm5JLE9BRWYsQ0FFTCxHQUFJLENBQUMsS0FBSyxRQUFRLGNBQWdCK0ksR0FBMkJILEVBQU0sRUFBSSxJQUFNdkYsR0FBMEIsRUFBRyxDQUN4R3FGLEdBQWlCLEVBQ2pCLE9BRUZHLEdBQVd6TyxFQUFLLEtBQUssUUFBUzJPLEdBQTJCSCxFQUFNLEVBQUssRUFBRyxFQUFLLEVBRWhGLENBQ0YsRUFDT25PLEdBQVM4TixFQUFZLENBQzFCLFdBQVksU0FDWixvQkFBcUIsRUFDdkIsQ0FBQyxDQUNILENBQ0EsU0FBU0csSUFBbUIsQ0FDMUJaLEdBQVksUUFBUSxTQUFVZSxFQUFZLENBQ3hDLGNBQWNBLEVBQVcsR0FBRyxDQUM5QixDQUFDLEVBQ0RmLEdBQWMsQ0FBQyxDQUNqQixDQUNBLFNBQVNXLElBQWtDLENBQ3pDLGNBQWNKLEVBQTBCLENBQzFDLENBQ0EsSUFBSVEsR0FBYXBCLEdBQVMsU0FBVXJOLEVBQUtyRCxFQUFTa0UsRUFBUWdPLEVBQVksQ0FFcEUsR0FBS2xTLEVBQVEsT0FDYixLQUFJZ0osR0FBSzNGLEVBQUksUUFBVUEsRUFBSSxRQUFRLENBQUMsRUFBSUEsR0FBSyxRQUMzQzRGLEdBQUs1RixFQUFJLFFBQVVBLEVBQUksUUFBUSxDQUFDLEVBQUlBLEdBQUssUUFDekM4TyxFQUFPblMsRUFBUSxrQkFDZm9TLEVBQVFwUyxFQUFRLFlBQ2hCcVMsRUFBYy9GLEdBQTBCLEVBQ3RDZ0csRUFBcUIsR0FDdkJDLEVBR0V0QixLQUFpQi9NLElBQ25CK00sR0FBZS9NLEVBQ2Z5TixHQUFpQixFQUNqQlgsR0FBV2hSLEVBQVEsT0FDbkJ1UyxFQUFpQnZTLEVBQVEsU0FDckJnUixLQUFhLEtBQ2ZBLEdBQVdnQixHQUEyQjlOLEVBQVEsRUFBSSxJQUd0RCxJQUFJc08sRUFBWSxFQUNaQyxFQUFnQnpCLEdBQ3BCLEVBQUcsQ0FDRCxJQUFJek4sRUFBS2tQLEVBQ1B2UyxFQUFPUSxHQUFRNkMsQ0FBRSxFQUNqQm1QLEVBQU14UyxFQUFLLElBQ1h5UyxFQUFTelMsRUFBSyxPQUNkMFMsRUFBTzFTLEVBQUssS0FDWjJTLEVBQVEzUyxFQUFLLE1BQ2I0UyxFQUFRNVMsRUFBSyxNQUNiNlMsRUFBUzdTLEVBQUssT0FDZDhTLEVBQWEsT0FDYkMsRUFBYSxPQUNiQyxFQUFjM1AsRUFBRyxZQUNqQjRQLEVBQWU1UCxFQUFHLGFBQ2xCb0UsRUFBUTNHLEdBQUl1QyxDQUFFLEVBQ2Q2UCxFQUFhN1AsRUFBRyxXQUNoQjhQLEVBQWE5UCxFQUFHLFVBQ2RBLElBQU84TyxHQUNUVyxFQUFhRixFQUFRSSxJQUFnQnZMLEVBQU0sWUFBYyxRQUFVQSxFQUFNLFlBQWMsVUFBWUEsRUFBTSxZQUFjLFdBQ3ZIc0wsRUFBYUYsRUFBU0ksSUFBaUJ4TCxFQUFNLFlBQWMsUUFBVUEsRUFBTSxZQUFjLFVBQVlBLEVBQU0sWUFBYyxhQUV6SHFMLEVBQWFGLEVBQVFJLElBQWdCdkwsRUFBTSxZQUFjLFFBQVVBLEVBQU0sWUFBYyxVQUN2RnNMLEVBQWFGLEVBQVNJLElBQWlCeEwsRUFBTSxZQUFjLFFBQVVBLEVBQU0sWUFBYyxXQUUzRixJQUFJMkwsRUFBS04sSUFBZSxLQUFLLElBQUlILEVBQVE3SixDQUFDLEdBQUttSixHQUFRaUIsRUFBYU4sRUFBUUksSUFBZ0IsS0FBSyxJQUFJTixFQUFPNUosQ0FBQyxHQUFLbUosR0FBUSxDQUFDLENBQUNpQixHQUN4SEcsRUFBS04sSUFBZSxLQUFLLElBQUlOLEVBQVMxSixDQUFDLEdBQUtrSixHQUFRa0IsRUFBYU4sRUFBU0ksSUFBaUIsS0FBSyxJQUFJVCxFQUFNekosQ0FBQyxHQUFLa0osR0FBUSxDQUFDLENBQUNrQixHQUM5SCxHQUFJLENBQUN0QyxHQUFZeUIsQ0FBUyxFQUN4QixRQUFTcEksRUFBSSxFQUFHQSxHQUFLb0ksRUFBV3BJLElBQ3pCMkcsR0FBWTNHLENBQUMsSUFDaEIyRyxHQUFZM0csQ0FBQyxFQUFJLENBQUMsSUFJcEIyRyxHQUFZeUIsQ0FBUyxFQUFFLElBQU1jLEdBQU12QyxHQUFZeUIsQ0FBUyxFQUFFLElBQU1lLEdBQU14QyxHQUFZeUIsQ0FBUyxFQUFFLEtBQU9qUCxLQUN0R3dOLEdBQVl5QixDQUFTLEVBQUUsR0FBS2pQLEVBQzVCd04sR0FBWXlCLENBQVMsRUFBRSxHQUFLYyxFQUM1QnZDLEdBQVl5QixDQUFTLEVBQUUsR0FBS2UsRUFDNUIsY0FBY3hDLEdBQVl5QixDQUFTLEVBQUUsR0FBRyxHQUNwQ2MsR0FBTSxHQUFLQyxHQUFNLEtBQ25CakIsRUFBcUIsR0FFckJ2QixHQUFZeUIsQ0FBUyxFQUFFLElBQU0sWUFBWSxVQUFZLENBRS9DTixHQUFjLEtBQUssUUFBVSxHQUMvQmpSLEdBQVMsT0FBTyxhQUFhb1EsRUFBVSxFQUV6QyxJQUFJbUMsRUFBZ0J6QyxHQUFZLEtBQUssS0FBSyxFQUFFLEdBQUtBLEdBQVksS0FBSyxLQUFLLEVBQUUsR0FBS3FCLEVBQVEsRUFDbEZxQixFQUFnQjFDLEdBQVksS0FBSyxLQUFLLEVBQUUsR0FBS0EsR0FBWSxLQUFLLEtBQUssRUFBRSxHQUFLcUIsRUFBUSxFQUNsRixPQUFPRyxHQUFtQixZQUN4QkEsRUFBZSxLQUFLdFIsR0FBUyxRQUFRLFdBQVdOLEVBQU8sRUFBRzhTLEVBQWVELEVBQWVuUSxFQUFLZ08sR0FBWU4sR0FBWSxLQUFLLEtBQUssRUFBRSxFQUFFLElBQU0sWUFJL0l2QyxHQUFTdUMsR0FBWSxLQUFLLEtBQUssRUFBRSxHQUFJMEMsRUFBZUQsQ0FBYSxDQUNuRSxFQUFFLEtBQUssQ0FDTCxNQUFPaEIsQ0FDVCxDQUFDLEVBQUcsRUFBRSxJQUdWQSxVQUNPeFMsRUFBUSxjQUFnQnlTLElBQWtCSixJQUFnQkksRUFBZ0JULEdBQTJCUyxFQUFlLEVBQUssSUFDbEl2QixHQUFZb0IsRUFDZCxFQUFHLEVBQUUsRUFFRG9CLEdBQU8sU0FBY3pQLEVBQU0sQ0FDN0IsSUFBSVUsRUFBZ0JWLEVBQUssY0FDdkJXLEVBQWNYLEVBQUssWUFDbkJxQixFQUFTckIsRUFBSyxPQUNkd0ksRUFBaUJ4SSxFQUFLLGVBQ3RCMFAsRUFBd0IxUCxFQUFLLHNCQUM3QjJQLEVBQXFCM1AsRUFBSyxtQkFDMUI0UCxFQUF1QjVQLEVBQUsscUJBQzlCLEdBQUtVLEVBQ0wsS0FBSW1QLEVBQWFsUCxHQUFlNkgsRUFDaENtSCxFQUFtQixFQUNuQixJQUFJaEosRUFBUWpHLEVBQWMsZ0JBQWtCQSxFQUFjLGVBQWUsT0FBU0EsRUFBYyxlQUFlLENBQUMsRUFBSUEsRUFDaEhwRCxFQUFTLFNBQVMsaUJBQWlCcUosRUFBTSxRQUFTQSxFQUFNLE9BQU8sRUFDbkVpSixFQUFxQixFQUNqQkMsR0FBYyxDQUFDQSxFQUFXLEdBQUcsU0FBU3ZTLENBQU0sSUFDOUNvUyxFQUFzQixPQUFPLEVBQzdCLEtBQUssUUFBUSxDQUNYLE9BQVFyTyxFQUNSLFlBQWFWLENBQ2YsQ0FBQyxHQUVMLEVBQ0EsU0FBU21QLElBQVMsQ0FBQyxDQUNuQkEsR0FBTyxVQUFZLENBQ2pCLFdBQVksS0FDWixVQUFXLFNBQW1CdEMsRUFBTyxDQUNuQyxJQUFJaE4sRUFBb0JnTixFQUFNLGtCQUM5QixLQUFLLFdBQWFoTixDQUNwQixFQUNBLFFBQVMsU0FBaUJ1UCxFQUFPLENBQy9CLElBQUkxTyxFQUFTME8sRUFBTSxPQUNqQnBQLEVBQWNvUCxFQUFNLFlBQ3RCLEtBQUssU0FBUyxzQkFBc0IsRUFDaENwUCxHQUNGQSxFQUFZLHNCQUFzQixFQUVwQyxJQUFJeUosRUFBY3ZHLEdBQVMsS0FBSyxTQUFTLEdBQUksS0FBSyxXQUFZLEtBQUssT0FBTyxFQUN0RXVHLEVBQ0YsS0FBSyxTQUFTLEdBQUcsYUFBYS9JLEVBQVErSSxDQUFXLEVBRWpELEtBQUssU0FBUyxHQUFHLFlBQVkvSSxDQUFNLEVBRXJDLEtBQUssU0FBUyxXQUFXLEVBQ3JCVixHQUNGQSxFQUFZLFdBQVcsQ0FFM0IsRUFDQSxLQUFNOE8sRUFDUixFQUNBaFEsR0FBU3FRLEdBQVEsQ0FDZixXQUFZLGVBQ2QsQ0FBQyxFQUNELFNBQVNFLElBQVMsQ0FBQyxDQUNuQkEsR0FBTyxVQUFZLENBQ2pCLFFBQVMsU0FBaUJDLEVBQU8sQ0FDL0IsSUFBSTVPLEVBQVM0TyxFQUFNLE9BQ2pCdFAsRUFBY3NQLEVBQU0sWUFDbEJDLEVBQWlCdlAsR0FBZSxLQUFLLFNBQ3pDdVAsRUFBZSxzQkFBc0IsRUFDckM3TyxFQUFPLFlBQWNBLEVBQU8sV0FBVyxZQUFZQSxDQUFNLEVBQ3pENk8sRUFBZSxXQUFXLENBQzVCLEVBQ0EsS0FBTVQsRUFDUixFQUNBaFEsR0FBU3VRLEdBQVEsQ0FDZixXQUFZLGVBQ2QsQ0FBQyxFQWtxQkRHLEdBQVMsTUFBTSxJQUFJQyxFQUFrQixFQUNyQ0QsR0FBUyxNQUFNRSxHQUFRQyxFQUFNLEVBRTdCLElBQU9DLEdBQVFKLEdDNXlHZixJQUFPSyxHQUFRLENBQ2IsU0FBVSxDQUNSLElBQU1DLEVBQVcsSUFBSUMsR0FBUyxLQUFLLEdBQUksQ0FDckMsVUFBVyxFQUNYLE1BQU8sRUFDUCxpQkFBa0IsR0FDbEIsTUFBTyxTQUNQLFVBQVcsYUFDWCxXQUFZLGtCQUNaLE9BQVEsZUFDUixNQUFRQyxHQUFRLENBRWRBLEVBQUksZUFBZSxFQUNuQixRQUFRLElBQUksT0FBTyxFQUVuQixLQUFLLFVBQVUsVUFBVyxDQUN4QixVQUFXQSxFQUFJLEtBQUssR0FDcEIsYUFBY0EsRUFBSSxHQUFHLEdBQ3JCLGVBQWdCQSxFQUFJLEtBQUssR0FDekIsa0JBQW1CQSxFQUFJLGtCQUN2QixrQkFBbUJBLEVBQUksa0JBQ3ZCLFNBQVVGLEVBQVMsUUFBUSxDQUM3QixDQUFDLENBQ0gsQ0FDRixDQUFDLENBQ0gsQ0FDRixFQzVCQSxJQUFBRyxHQUFxQixTQ0FyQixTQUFTQyxHQUFRQyxFQUFhLENBQzVCLFFBQVNDLEVBQUksRUFBR0EsRUFBSSxVQUFVLE9BQVFBLElBQUssQ0FDekMsSUFBSUMsRUFBUyxVQUFVRCxDQUFDLEVBQ3hCLFFBQVNFLEtBQU9ELEVBQ1ZBLEVBQU8sZUFBZUMsQ0FBRyxJQUFHSCxFQUFZRyxDQUFHLEVBQUlELEVBQU9DLENBQUcsR0FHakUsT0FBT0gsQ0FDVCxDQUVBLFNBQVNJLEdBQVFDLEVBQVdDLEVBQU8sQ0FDakMsT0FBTyxNQUFNQSxFQUFRLENBQUMsRUFBRSxLQUFLRCxDQUFTLENBQ3hDLENBRUEsU0FBU0UsR0FBcUJDLEVBQVEsQ0FDcEMsT0FBT0EsRUFBTyxRQUFRLE9BQVEsRUFBRSxDQUNsQyxDQUVBLFNBQVNDLEdBQXNCRCxFQUFRLENBR3JDLFFBRElFLEVBQVdGLEVBQU8sT0FDZkUsRUFBVyxHQUFLRixFQUFPRSxFQUFXLENBQUMsSUFBTTtBQUFBLEdBQU1BLElBQ3RELE9BQU9GLEVBQU8sVUFBVSxFQUFHRSxDQUFRLENBQ3JDLENBRUEsSUFBSUMsR0FBZ0IsQ0FDbEIsVUFBVyxVQUFXLFFBQVMsUUFBUyxhQUFjLE9BQVEsU0FDOUQsU0FBVSxLQUFNLE1BQU8sTUFBTyxLQUFNLEtBQU0sV0FBWSxhQUFjLFNBQ3BFLFNBQVUsT0FBUSxXQUFZLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLFNBQ2xFLFNBQVUsS0FBTSxPQUFRLFVBQVcsS0FBTSxPQUFRLE9BQVEsTUFBTyxXQUNoRSxXQUFZLEtBQU0sU0FBVSxJQUFLLE1BQU8sVUFBVyxRQUFTLFFBQVMsS0FDckUsUUFBUyxLQUFNLFFBQVMsS0FBTSxJQUNoQyxFQUVBLFNBQVNDLEdBQVNDLEVBQU0sQ0FDdEIsT0FBT0MsR0FBR0QsRUFBTUYsRUFBYSxDQUMvQixDQUVBLElBQUlJLEdBQWUsQ0FDakIsT0FBUSxPQUFRLEtBQU0sTUFBTyxVQUFXLFFBQVMsS0FBTSxNQUFPLFFBQzlELFNBQVUsT0FBUSxPQUFRLFFBQVMsU0FBVSxRQUFTLEtBQ3hELEVBRUEsU0FBU0MsR0FBUUgsRUFBTSxDQUNyQixPQUFPQyxHQUFHRCxFQUFNRSxFQUFZLENBQzlCLENBRUEsU0FBU0UsR0FBU0osRUFBTSxDQUN0QixPQUFPSyxHQUFJTCxFQUFNRSxFQUFZLENBQy9CLENBRUEsSUFBSUksR0FBOEIsQ0FDaEMsSUFBSyxRQUFTLFFBQVMsUUFBUyxRQUFTLEtBQU0sS0FBTSxTQUFVLFNBQy9ELFFBQVMsT0FDWCxFQUVBLFNBQVNDLEdBQXVCUCxFQUFNLENBQ3BDLE9BQU9DLEdBQUdELEVBQU1NLEVBQTJCLENBQzdDLENBRUEsU0FBU0UsR0FBd0JSLEVBQU0sQ0FDckMsT0FBT0ssR0FBSUwsRUFBTU0sRUFBMkIsQ0FDOUMsQ0FFQSxTQUFTTCxHQUFJRCxFQUFNUyxFQUFVLENBQzNCLE9BQU9BLEVBQVMsUUFBUVQsRUFBSyxRQUFRLEdBQUssQ0FDNUMsQ0FFQSxTQUFTSyxHQUFLTCxFQUFNUyxFQUFVLENBQzVCLE9BQ0VULEVBQUssc0JBQ0xTLEVBQVMsS0FBSyxTQUFVQyxFQUFTLENBQy9CLE9BQU9WLEVBQUsscUJBQXFCVSxDQUFPLEVBQUUsTUFDNUMsQ0FBQyxDQUVMLENBRUEsSUFBSUMsR0FBUSxDQUFDLEVBRWJBLEdBQU0sVUFBWSxDQUNoQixPQUFRLElBRVIsWUFBYSxTQUFVQyxFQUFTLENBQzlCLE1BQU87QUFBQTtBQUFBLEVBQVNBLEVBQVU7QUFBQTtBQUFBLENBQzVCLENBQ0YsRUFFQUQsR0FBTSxVQUFZLENBQ2hCLE9BQVEsS0FFUixZQUFhLFNBQVVDLEVBQVNaLEVBQU1hLEVBQVMsQ0FDN0MsT0FBT0EsRUFBUSxHQUFLO0FBQUEsQ0FDdEIsQ0FDRixFQUVBRixHQUFNLFFBQVUsQ0FDZCxPQUFRLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLElBQUksRUFFM0MsWUFBYSxTQUFVQyxFQUFTWixFQUFNYSxFQUFTLENBQzdDLElBQUlDLEVBQVMsT0FBT2QsRUFBSyxTQUFTLE9BQU8sQ0FBQyxDQUFDLEVBRTNDLEdBQUlhLEVBQVEsZUFBaUIsVUFBWUMsRUFBUyxFQUFHLENBQ25ELElBQUlDLEVBQVl4QixHQUFRdUIsSUFBVyxFQUFJLElBQU0sSUFBTUYsRUFBUSxNQUFNLEVBQ2pFLE1BQ0U7QUFBQTtBQUFBLEVBQVNBLEVBQVU7QUFBQSxFQUFPRyxFQUFZO0FBQUE7QUFBQSxNQUd4QyxPQUFPO0FBQUE7QUFBQSxFQUFTeEIsR0FBTyxJQUFLdUIsQ0FBTSxFQUFJLElBQU1GLEVBQVU7QUFBQTtBQUFBLENBRTFELENBQ0YsRUFFQUQsR0FBTSxXQUFhLENBQ2pCLE9BQVEsYUFFUixZQUFhLFNBQVVDLEVBQVMsQ0FDOUIsT0FBQUEsRUFBVUEsRUFBUSxRQUFRLGFBQWMsRUFBRSxFQUMxQ0EsRUFBVUEsRUFBUSxRQUFRLE1BQU8sSUFBSSxFQUM5QjtBQUFBO0FBQUEsRUFBU0EsRUFBVTtBQUFBO0FBQUEsQ0FDNUIsQ0FDRixFQUVBRCxHQUFNLEtBQU8sQ0FDWCxPQUFRLENBQUMsS0FBTSxJQUFJLEVBRW5CLFlBQWEsU0FBVUMsRUFBU1osRUFBTSxDQUNwQyxJQUFJZ0IsRUFBU2hCLEVBQUssV0FDbEIsT0FBSWdCLEVBQU8sV0FBYSxNQUFRQSxFQUFPLG1CQUFxQmhCLEVBQ25EO0FBQUEsRUFBT1ksRUFFUDtBQUFBO0FBQUEsRUFBU0EsRUFBVTtBQUFBO0FBQUEsQ0FFOUIsQ0FDRixFQUVBRCxHQUFNLFNBQVcsQ0FDZixPQUFRLEtBRVIsWUFBYSxTQUFVQyxFQUFTWixFQUFNYSxFQUFTLENBQzdDRCxFQUFVQSxFQUNQLFFBQVEsT0FBUSxFQUFFLEVBQ2xCLFFBQVEsT0FBUTtBQUFBLENBQUksRUFDcEIsUUFBUSxPQUFRO0FBQUEsS0FBUSxFQUMzQixJQUFJSyxFQUFTSixFQUFRLGlCQUFtQixNQUNwQ0csRUFBU2hCLEVBQUssV0FDbEIsR0FBSWdCLEVBQU8sV0FBYSxLQUFNLENBQzVCLElBQUlFLEVBQVFGLEVBQU8sYUFBYSxPQUFPLEVBQ25DRyxFQUFRLE1BQU0sVUFBVSxRQUFRLEtBQUtILEVBQU8sU0FBVWhCLENBQUksRUFDOURpQixHQUFVQyxFQUFRLE9BQU9BLENBQUssRUFBSUMsRUFBUUEsRUFBUSxHQUFLLE1BRXpELE9BQ0VGLEVBQVNMLEdBQVdaLEVBQUssYUFBZSxDQUFDLE1BQU0sS0FBS1ksQ0FBTyxFQUFJO0FBQUEsRUFBTyxHQUUxRSxDQUNGLEVBRUFELEdBQU0sa0JBQW9CLENBQ3hCLE9BQVEsU0FBVVgsRUFBTWEsRUFBUyxDQUMvQixPQUNFQSxFQUFRLGlCQUFtQixZQUMzQmIsRUFBSyxXQUFhLE9BQ2xCQSxFQUFLLFlBQ0xBLEVBQUssV0FBVyxXQUFhLE1BRWpDLEVBRUEsWUFBYSxTQUFVWSxFQUFTWixFQUFNYSxFQUFTLENBQzdDLE1BQ0U7QUFBQTtBQUFBLE1BQ0FiLEVBQUssV0FBVyxZQUFZLFFBQVEsTUFBTztBQUFBLEtBQVEsRUFDbkQ7QUFBQTtBQUFBLENBRUosQ0FDRixFQUVBVyxHQUFNLGdCQUFrQixDQUN0QixPQUFRLFNBQVVYLEVBQU1hLEVBQVMsQ0FDL0IsT0FDRUEsRUFBUSxpQkFBbUIsVUFDM0JiLEVBQUssV0FBYSxPQUNsQkEsRUFBSyxZQUNMQSxFQUFLLFdBQVcsV0FBYSxNQUVqQyxFQUVBLFlBQWEsU0FBVVksRUFBU1osRUFBTWEsRUFBUyxDQVU3QyxRQVRJTyxFQUFZcEIsRUFBSyxXQUFXLGFBQWEsT0FBTyxHQUFLLEdBQ3JEcUIsR0FBWUQsRUFBVSxNQUFNLGdCQUFnQixHQUFLLENBQUMsS0FBTSxFQUFFLEdBQUcsQ0FBQyxFQUM5REUsRUFBT3RCLEVBQUssV0FBVyxZQUV2QnVCLEVBQVlWLEVBQVEsTUFBTSxPQUFPLENBQUMsRUFDbENXLEVBQVksRUFDWkMsRUFBbUIsSUFBSSxPQUFPLElBQU1GLEVBQVksT0FBUSxJQUFJLEVBRTVERyxFQUNJQSxFQUFRRCxFQUFpQixLQUFLSCxDQUFJLEdBQ3BDSSxFQUFNLENBQUMsRUFBRSxRQUFVRixJQUNyQkEsRUFBWUUsRUFBTSxDQUFDLEVBQUUsT0FBUyxHQUlsQyxJQUFJQyxFQUFRcEMsR0FBT2dDLEVBQVdDLENBQVMsRUFFdkMsTUFDRTtBQUFBO0FBQUEsRUFBU0csRUFBUU4sRUFBVztBQUFBLEVBQzVCQyxFQUFLLFFBQVEsTUFBTyxFQUFFLEVBQ3RCO0FBQUEsRUFBT0ssRUFBUTtBQUFBO0FBQUEsQ0FFbkIsQ0FDRixFQUVBaEIsR0FBTSxlQUFpQixDQUNyQixPQUFRLEtBRVIsWUFBYSxTQUFVQyxFQUFTWixFQUFNYSxFQUFTLENBQzdDLE1BQU87QUFBQTtBQUFBLEVBQVNBLEVBQVEsR0FBSztBQUFBO0FBQUEsQ0FDL0IsQ0FDRixFQUVBRixHQUFNLFdBQWEsQ0FDakIsT0FBUSxTQUFVWCxFQUFNYSxFQUFTLENBQy9CLE9BQ0VBLEVBQVEsWUFBYyxXQUN0QmIsRUFBSyxXQUFhLEtBQ2xCQSxFQUFLLGFBQWEsTUFBTSxDQUU1QixFQUVBLFlBQWEsU0FBVVksRUFBU1osRUFBTSxDQUNwQyxJQUFJNEIsRUFBTzVCLEVBQUssYUFBYSxNQUFNLEVBQy9CNEIsSUFBTUEsRUFBT0EsRUFBSyxRQUFRLFVBQVcsTUFBTSxHQUMvQyxJQUFJQyxFQUFRQyxHQUFlOUIsRUFBSyxhQUFhLE9BQU8sQ0FBQyxFQUNyRCxPQUFJNkIsSUFBT0EsRUFBUSxLQUFPQSxFQUFNLFFBQVEsS0FBTSxLQUFLLEVBQUksS0FDaEQsSUFBTWpCLEVBQVUsS0FBT2dCLEVBQU9DLEVBQVEsR0FDL0MsQ0FDRixFQUVBbEIsR0FBTSxjQUFnQixDQUNwQixPQUFRLFNBQVVYLEVBQU1hLEVBQVMsQ0FDL0IsT0FDRUEsRUFBUSxZQUFjLGNBQ3RCYixFQUFLLFdBQWEsS0FDbEJBLEVBQUssYUFBYSxNQUFNLENBRTVCLEVBRUEsWUFBYSxTQUFVWSxFQUFTWixFQUFNYSxFQUFTLENBQzdDLElBQUllLEVBQU81QixFQUFLLGFBQWEsTUFBTSxFQUMvQjZCLEVBQVFDLEdBQWU5QixFQUFLLGFBQWEsT0FBTyxDQUFDLEVBQ2pENkIsSUFBT0EsRUFBUSxLQUFPQSxFQUFRLEtBQ2xDLElBQUlFLEVBQ0FDLEVBRUosT0FBUW5CLEVBQVEsbUJBQW9CLENBQ2xDLElBQUssWUFDSGtCLEVBQWMsSUFBTW5CLEVBQVUsTUFDOUJvQixFQUFZLElBQU1wQixFQUFVLE1BQVFnQixFQUFPQyxFQUMzQyxNQUNGLElBQUssV0FDSEUsRUFBYyxJQUFNbkIsRUFBVSxJQUM5Qm9CLEVBQVksSUFBTXBCLEVBQVUsTUFBUWdCLEVBQU9DLEVBQzNDLE1BQ0YsUUFDRSxJQUFJSSxFQUFLLEtBQUssV0FBVyxPQUFTLEVBQ2xDRixFQUFjLElBQU1uQixFQUFVLEtBQU9xQixFQUFLLElBQzFDRCxFQUFZLElBQU1DLEVBQUssTUFBUUwsRUFBT0MsQ0FDMUMsQ0FFQSxZQUFLLFdBQVcsS0FBS0csQ0FBUyxFQUN2QkQsQ0FDVCxFQUVBLFdBQVksQ0FBQyxFQUViLE9BQVEsU0FBVWxCLEVBQVMsQ0FDekIsSUFBSXFCLEVBQWEsR0FDakIsT0FBSSxLQUFLLFdBQVcsU0FDbEJBLEVBQWE7QUFBQTtBQUFBLEVBQVMsS0FBSyxXQUFXLEtBQUs7QUFBQSxDQUFJLEVBQUk7QUFBQTtBQUFBLEVBQ25ELEtBQUssV0FBYSxDQUFDLEdBRWRBLENBQ1QsQ0FDRixFQUVBdkIsR0FBTSxTQUFXLENBQ2YsT0FBUSxDQUFDLEtBQU0sR0FBRyxFQUVsQixZQUFhLFNBQVVDLEVBQVNaLEVBQU1hLEVBQVMsQ0FDN0MsT0FBS0QsRUFBUSxLQUFLLEVBQ1hDLEVBQVEsWUFBY0QsRUFBVUMsRUFBUSxZQURuQixFQUU5QixDQUNGLEVBRUFGLEdBQU0sT0FBUyxDQUNiLE9BQVEsQ0FBQyxTQUFVLEdBQUcsRUFFdEIsWUFBYSxTQUFVQyxFQUFTWixFQUFNYSxFQUFTLENBQzdDLE9BQUtELEVBQVEsS0FBSyxFQUNYQyxFQUFRLGdCQUFrQkQsRUFBVUMsRUFBUSxnQkFEdkIsRUFFOUIsQ0FDRixFQUVBRixHQUFNLEtBQU8sQ0FDWCxPQUFRLFNBQVVYLEVBQU0sQ0FDdEIsSUFBSW1DLEVBQWNuQyxFQUFLLGlCQUFtQkEsRUFBSyxZQUMzQ29DLEVBQWNwQyxFQUFLLFdBQVcsV0FBYSxPQUFTLENBQUNtQyxFQUV6RCxPQUFPbkMsRUFBSyxXQUFhLFFBQVUsQ0FBQ29DLENBQ3RDLEVBRUEsWUFBYSxTQUFVeEIsRUFBUyxDQUM5QixHQUFJLENBQUNBLEVBQVMsTUFBTyxHQUNyQkEsRUFBVUEsRUFBUSxRQUFRLFlBQWEsR0FBRyxFQUsxQyxRQUhJeUIsRUFBYSxzQkFBc0IsS0FBS3pCLENBQU8sRUFBSSxJQUFNLEdBQ3pEMEIsRUFBWSxJQUNaQyxFQUFVM0IsRUFBUSxNQUFNLE1BQU0sR0FBSyxDQUFDLEVBQ2pDMkIsRUFBUSxRQUFRRCxDQUFTLElBQU0sSUFBSUEsRUFBWUEsRUFBWSxJQUVsRSxPQUFPQSxFQUFZRCxFQUFhekIsRUFBVXlCLEVBQWFDLENBQ3pELENBQ0YsRUFFQTNCLEdBQU0sTUFBUSxDQUNaLE9BQVEsTUFFUixZQUFhLFNBQVVDLEVBQVNaLEVBQU0sQ0FDcEMsSUFBSXdDLEVBQU1WLEdBQWU5QixFQUFLLGFBQWEsS0FBSyxDQUFDLEVBQzdDeUMsRUFBTXpDLEVBQUssYUFBYSxLQUFLLEdBQUssR0FDbEM2QixFQUFRQyxHQUFlOUIsRUFBSyxhQUFhLE9BQU8sQ0FBQyxFQUNqRDBDLEVBQVliLEVBQVEsS0FBT0EsRUFBUSxJQUFNLEdBQzdDLE9BQU9ZLEVBQU0sS0FBT0QsRUFBTSxLQUFZQyxFQUFNQyxFQUFZLElBQU0sRUFDaEUsQ0FDRixFQUVBLFNBQVNaLEdBQWdCYSxFQUFXLENBQ2xDLE9BQU9BLEVBQVlBLEVBQVUsUUFBUSxhQUFjO0FBQUEsQ0FBSSxFQUFJLEVBQzdELENBTUEsU0FBU0MsR0FBTy9CLEVBQVMsQ0FDdkIsS0FBSyxRQUFVQSxFQUNmLEtBQUssTUFBUSxDQUFDLEVBQ2QsS0FBSyxRQUFVLENBQUMsRUFFaEIsS0FBSyxVQUFZLENBQ2YsWUFBYUEsRUFBUSxnQkFDdkIsRUFFQSxLQUFLLGdCQUFrQkEsRUFBUSxnQkFFL0IsS0FBSyxZQUFjLENBQ2pCLFlBQWFBLEVBQVEsa0JBQ3ZCLEVBRUEsS0FBSyxNQUFRLENBQUMsRUFDZCxRQUFTdkIsS0FBT3VCLEVBQVEsTUFBTyxLQUFLLE1BQU0sS0FBS0EsRUFBUSxNQUFNdkIsQ0FBRyxDQUFDLENBQ25FLENBRUFzRCxHQUFNLFVBQVksQ0FDaEIsSUFBSyxTQUFVdEQsRUFBS3VELEVBQU0sQ0FDeEIsS0FBSyxNQUFNLFFBQVFBLENBQUksQ0FDekIsRUFFQSxLQUFNLFNBQVVDLEVBQVEsQ0FDdEIsS0FBSyxNQUFNLFFBQVEsQ0FDakIsT0FBUUEsRUFDUixZQUFhLEtBQUssZUFDcEIsQ0FBQyxDQUNILEVBRUEsT0FBUSxTQUFVQSxFQUFRLENBQ3hCLEtBQUssUUFBUSxRQUFRLENBQ25CLE9BQVFBLEVBQ1IsWUFBYSxVQUFZLENBQ3ZCLE1BQU8sRUFDVCxDQUNGLENBQUMsQ0FDSCxFQUVBLFFBQVMsU0FBVTlDLEVBQU0sQ0FDdkIsR0FBSUEsRUFBSyxRQUFTLE9BQU8sS0FBSyxVQUM5QixJQUFJNkMsRUFJSixPQUZLQSxFQUFPRSxHQUFTLEtBQUssTUFBTy9DLEVBQU0sS0FBSyxPQUFPLEtBQzlDNkMsRUFBT0UsR0FBUyxLQUFLLE1BQU8vQyxFQUFNLEtBQUssT0FBTyxLQUM5QzZDLEVBQU9FLEdBQVMsS0FBSyxRQUFTL0MsRUFBTSxLQUFLLE9BQU8sR0FBVzZDLEVBRXpELEtBQUssV0FDZCxFQUVBLFFBQVMsU0FBVUcsRUFBSSxDQUNyQixRQUFTNUQsRUFBSSxFQUFHQSxFQUFJLEtBQUssTUFBTSxPQUFRQSxJQUFLNEQsRUFBRyxLQUFLLE1BQU01RCxDQUFDLEVBQUdBLENBQUMsQ0FDakUsQ0FDRixFQUVBLFNBQVMyRCxHQUFVcEMsRUFBT1gsRUFBTWEsRUFBUyxDQUN2QyxRQUFTekIsRUFBSSxFQUFHQSxFQUFJdUIsRUFBTSxPQUFRdkIsSUFBSyxDQUNyQyxJQUFJeUQsRUFBT2xDLEVBQU12QixDQUFDLEVBQ2xCLEdBQUk2RCxHQUFZSixFQUFNN0MsRUFBTWEsQ0FBTyxFQUFHLE9BQU9nQyxFQUdqRCxDQUVBLFNBQVNJLEdBQWFKLEVBQU03QyxFQUFNYSxFQUFTLENBQ3pDLElBQUlpQyxFQUFTRCxFQUFLLE9BQ2xCLEdBQUksT0FBT0MsR0FBVyxVQUNwQixHQUFJQSxJQUFXOUMsRUFBSyxTQUFTLFlBQVksRUFBRyxNQUFPLFdBQzFDLE1BQU0sUUFBUThDLENBQU0sR0FDN0IsR0FBSUEsRUFBTyxRQUFROUMsRUFBSyxTQUFTLFlBQVksQ0FBQyxFQUFJLEdBQUksTUFBTyxXQUNwRCxPQUFPOEMsR0FBVyxZQUMzQixHQUFJQSxFQUFPLEtBQUtELEVBQU03QyxFQUFNYSxDQUFPLEVBQUcsTUFBTyxPQUU3QyxPQUFNLElBQUksVUFBVSxtREFBbUQsQ0FFM0UsQ0FrQ0EsU0FBU3FDLEdBQW9CckMsRUFBUyxDQUNwQyxJQUFJc0MsRUFBVXRDLEVBQVEsUUFDbEJkLEVBQVVjLEVBQVEsUUFDbEJWLEVBQVNVLEVBQVEsT0FDakJ1QyxFQUFRdkMsRUFBUSxPQUFTLFNBQVViLEVBQU0sQ0FDM0MsT0FBT0EsRUFBSyxXQUFhLEtBQzNCLEVBRUEsR0FBSSxHQUFDbUQsRUFBUSxZQUFjQyxFQUFNRCxDQUFPLEdBUXhDLFNBTklFLEVBQVcsS0FDWEMsRUFBZ0IsR0FFaEJDLEVBQU8sS0FDUHZELEVBQU93RCxHQUFLRCxFQUFNSixFQUFTQyxDQUFLLEVBRTdCcEQsSUFBU21ELEdBQVMsQ0FDdkIsR0FBSW5ELEVBQUssV0FBYSxHQUFLQSxFQUFLLFdBQWEsRUFBRyxDQUM5QyxJQUFJeUQsRUFBT3pELEVBQUssS0FBSyxRQUFRLGNBQWUsR0FBRyxFQVEvQyxJQU5LLENBQUNxRCxHQUFZLEtBQUssS0FBS0EsRUFBUyxJQUFJLElBQ3JDLENBQUNDLEdBQWlCRyxFQUFLLENBQUMsSUFBTSxNQUNoQ0EsRUFBT0EsRUFBSyxPQUFPLENBQUMsR0FJbEIsQ0FBQ0EsRUFBTSxDQUNUekQsRUFBTzBELEdBQU8xRCxDQUFJLEVBQ2xCLFNBR0ZBLEVBQUssS0FBT3lELEVBRVpKLEVBQVdyRCxVQUNGQSxFQUFLLFdBQWEsRUFDdkJELEVBQVFDLENBQUksR0FBS0EsRUFBSyxXQUFhLE1BQ2pDcUQsSUFDRkEsRUFBUyxLQUFPQSxFQUFTLEtBQUssUUFBUSxLQUFNLEVBQUUsR0FHaERBLEVBQVcsS0FDWEMsRUFBZ0IsSUFDUG5ELEVBQU9ILENBQUksR0FBS29ELEVBQU1wRCxDQUFJLEdBRW5DcUQsRUFBVyxLQUNYQyxFQUFnQixJQUNQRCxJQUVUQyxFQUFnQixRQUViLENBQ0x0RCxFQUFPMEQsR0FBTzFELENBQUksRUFDbEIsU0FHRixJQUFJMkQsRUFBV0gsR0FBS0QsRUFBTXZELEVBQU1vRCxDQUFLLEVBQ3JDRyxFQUFPdkQsRUFDUEEsRUFBTzJELEVBR0xOLElBQ0ZBLEVBQVMsS0FBT0EsRUFBUyxLQUFLLFFBQVEsS0FBTSxFQUFFLEVBQ3pDQSxFQUFTLE1BQ1pLLEdBQU9MLENBQVEsR0FHckIsQ0FTQSxTQUFTSyxHQUFRMUQsRUFBTSxDQUNyQixJQUFJd0QsRUFBT3hELEVBQUssYUFBZUEsRUFBSyxXQUVwQyxPQUFBQSxFQUFLLFdBQVcsWUFBWUEsQ0FBSSxFQUV6QndELENBQ1QsQ0FXQSxTQUFTQSxHQUFNRCxFQUFNSyxFQUFTUixFQUFPLENBQ25DLE9BQUtHLEdBQVFBLEVBQUssYUFBZUssR0FBWVIsRUFBTVEsQ0FBTyxFQUNqREEsRUFBUSxhQUFlQSxFQUFRLFdBR2pDQSxFQUFRLFlBQWNBLEVBQVEsYUFBZUEsRUFBUSxVQUM5RCxDQU1BLElBQUlDLEdBQVEsT0FBTyxPQUFXLElBQWMsT0FBUyxDQUFDLEVBTXRELFNBQVNDLElBQXdCLENBQy9CLElBQUlDLEVBQVNGLEdBQUssVUFDZEcsRUFBVyxHQUlmLEdBQUksQ0FFRSxJQUFJRCxFQUFPLEVBQUUsZ0JBQWdCLEdBQUksV0FBVyxJQUM5Q0MsRUFBVyxHQUVmLE1BQUUsQ0FBVyxDQUViLE9BQU9BLENBQ1QsQ0FFQSxTQUFTQyxJQUFvQixDQUMzQixJQUFJRixFQUFTLFVBQVksQ0FBQyxFQUd4QixPQUFJRyxHQUFpQixFQUNuQkgsRUFBTyxVQUFVLGdCQUFrQixTQUFVcEUsRUFBUSxDQUNuRCxJQUFJd0UsRUFBTSxJQUFJLE9BQU8sY0FBYyxVQUFVLEVBQzdDLE9BQUFBLEVBQUksV0FBYSxLQUNqQkEsRUFBSSxLQUFLLEVBQ1RBLEVBQUksTUFBTXhFLENBQU0sRUFDaEJ3RSxFQUFJLE1BQU0sRUFDSEEsQ0FDVCxFQUVBSixFQUFPLFVBQVUsZ0JBQWtCLFNBQVVwRSxFQUFRLENBQ25ELElBQUl3RSxFQUFNLFNBQVMsZUFBZSxtQkFBbUIsRUFBRSxFQUN2RCxPQUFBQSxFQUFJLEtBQUssRUFDVEEsRUFBSSxNQUFNeEUsQ0FBTSxFQUNoQndFLEVBQUksTUFBTSxFQUNIQSxDQUNULEVBR0dKLENBQ1QsQ0FFQSxTQUFTRyxJQUFvQixDQUMzQixJQUFJRSxFQUFhLEdBQ2pCLEdBQUksQ0FDRixTQUFTLGVBQWUsbUJBQW1CLEVBQUUsRUFBRSxLQUFLLENBQ3RELE1BQUUsQ0FDSVAsR0FBSyxnQkFBZU8sRUFBYSxHQUN2QyxDQUNBLE9BQU9BLENBQ1QsQ0FFQSxJQUFJQyxHQUFhUCxHQUFxQixFQUFJRCxHQUFLLFVBQVlJLEdBQWlCLEVBRTVFLFNBQVNLLEdBQVVDLEVBQU8xRCxFQUFTLENBQ2pDLElBQUlnRCxFQUNKLEdBQUksT0FBT1UsR0FBVSxTQUFVLENBQzdCLElBQUlKLEVBQU1LLEdBQVcsRUFBRSxnQkFJckIsa0NBQW9DRCxFQUFRLGdCQUM1QyxXQUNGLEVBQ0FWLEVBQU9NLEVBQUksZUFBZSxlQUFlLE9BRXpDTixFQUFPVSxFQUFNLFVBQVUsRUFBSSxFQUU3QixPQUFBckIsR0FBbUIsQ0FDakIsUUFBU1csRUFDVCxRQUFTOUQsR0FDVCxPQUFRSSxHQUNSLE1BQU9VLEVBQVEsaUJBQW1CNEQsR0FBYyxJQUNsRCxDQUFDLEVBRU1aLENBQ1QsQ0FFQSxJQUFJYSxHQUNKLFNBQVNGLElBQWMsQ0FDckIsT0FBQUUsR0FBY0EsSUFBZSxJQUFJTCxHQUMxQkssRUFDVCxDQUVBLFNBQVNELEdBQWF6RSxFQUFNLENBQzFCLE9BQU9BLEVBQUssV0FBYSxPQUFTQSxFQUFLLFdBQWEsTUFDdEQsQ0FFQSxTQUFTMkUsR0FBTTNFLEVBQU1hLEVBQVMsQ0FDNUIsT0FBQWIsRUFBSyxRQUFVRCxHQUFRQyxDQUFJLEVBQzNCQSxFQUFLLE9BQVNBLEVBQUssV0FBYSxRQUFVQSxFQUFLLFdBQVcsT0FDMURBLEVBQUssUUFBVTRFLEdBQVE1RSxDQUFJLEVBQzNCQSxFQUFLLG1CQUFxQjZFLEdBQW1CN0UsRUFBTWEsQ0FBTyxFQUNuRGIsQ0FDVCxDQUVBLFNBQVM0RSxHQUFTNUUsRUFBTSxDQUN0QixNQUNFLENBQUNHLEdBQU9ILENBQUksR0FDWixDQUFDTyxHQUFzQlAsQ0FBSSxHQUMzQixTQUFTLEtBQUtBLEVBQUssV0FBVyxHQUM5QixDQUFDSSxHQUFRSixDQUFJLEdBQ2IsQ0FBQ1EsR0FBdUJSLENBQUksQ0FFaEMsQ0FFQSxTQUFTNkUsR0FBb0I3RSxFQUFNYSxFQUFTLENBQzFDLEdBQUliLEVBQUssU0FBWWEsRUFBUSxrQkFBb0JiLEVBQUssT0FDcEQsTUFBTyxDQUFFLFFBQVMsR0FBSSxTQUFVLEVBQUcsRUFHckMsSUFBSThFLEVBQVFDLEdBQWUvRSxFQUFLLFdBQVcsRUFHM0MsT0FBSThFLEVBQU0sY0FBZ0JFLEdBQXNCLE9BQVFoRixFQUFNYSxDQUFPLElBQ25FaUUsRUFBTSxRQUFVQSxFQUFNLGlCQUlwQkEsRUFBTSxlQUFpQkUsR0FBc0IsUUFBU2hGLEVBQU1hLENBQU8sSUFDckVpRSxFQUFNLFNBQVdBLEVBQU0sa0JBR2xCLENBQUUsUUFBU0EsRUFBTSxRQUFTLFNBQVVBLEVBQU0sUUFBUyxDQUM1RCxDQUVBLFNBQVNDLEdBQWdCcEYsRUFBUSxDQUMvQixJQUFJc0YsRUFBSXRGLEVBQU8sTUFBTSwrREFBK0QsRUFDcEYsTUFBTyxDQUNMLFFBQVNzRixFQUFFLENBQUMsRUFDWixhQUFjQSxFQUFFLENBQUMsRUFDakIsZ0JBQWlCQSxFQUFFLENBQUMsRUFDcEIsU0FBVUEsRUFBRSxDQUFDLEVBQ2IsaUJBQWtCQSxFQUFFLENBQUMsRUFDckIsY0FBZUEsRUFBRSxDQUFDLENBQ3BCLENBQ0YsQ0FFQSxTQUFTRCxHQUF1QkUsRUFBTWxGLEVBQU1hLEVBQVMsQ0FDbkQsSUFBSXNFLEVBQ0FDLEVBQ0FDLEVBRUosT0FBSUgsSUFBUyxRQUNYQyxFQUFVbkYsRUFBSyxnQkFDZm9GLEVBQVMsT0FFVEQsRUFBVW5GLEVBQUssWUFDZm9GLEVBQVMsTUFHUEQsSUFDRUEsRUFBUSxXQUFhLEVBQ3ZCRSxFQUFZRCxFQUFPLEtBQUtELEVBQVEsU0FBUyxFQUNoQ3RFLEVBQVEsa0JBQW9Cc0UsRUFBUSxXQUFhLE9BQzFERSxFQUFZLEdBQ0hGLEVBQVEsV0FBYSxHQUFLLENBQUNwRixHQUFRb0YsQ0FBTyxJQUNuREUsRUFBWUQsRUFBTyxLQUFLRCxFQUFRLFdBQVcsSUFHeENFLENBQ1QsQ0FFQSxJQUFJQyxHQUFTLE1BQU0sVUFBVSxPQUN6QkMsR0FBVSxDQUNaLENBQUMsTUFBTyxNQUFNLEVBQ2QsQ0FBQyxNQUFPLEtBQUssRUFDYixDQUFDLE1BQU8sS0FBSyxFQUNiLENBQUMsUUFBUyxNQUFNLEVBQ2hCLENBQUMsU0FBVSxNQUFNLEVBQ2pCLENBQUMsY0FBZSxPQUFPLEVBQ3ZCLENBQUMsS0FBTSxLQUFLLEVBQ1osQ0FBQyxRQUFTLE9BQU8sRUFDakIsQ0FBQyxNQUFPLEtBQUssRUFDYixDQUFDLE1BQU8sS0FBSyxFQUNiLENBQUMsTUFBTyxLQUFLLEVBQ2IsQ0FBQyxLQUFNLEtBQUssRUFDWixDQUFDLGFBQWMsUUFBUSxDQUN6QixFQUVBLFNBQVNDLEdBQWlCM0UsRUFBUyxDQUNqQyxHQUFJLEVBQUUsZ0JBQWdCMkUsSUFBa0IsT0FBTyxJQUFJQSxHQUFnQjNFLENBQU8sRUFFMUUsSUFBSTRFLEVBQVcsQ0FDYixNQUFPOUUsR0FDUCxhQUFjLFNBQ2QsR0FBSSxRQUNKLGlCQUFrQixJQUNsQixlQUFnQixXQUNoQixNQUFPLE1BQ1AsWUFBYSxJQUNiLGdCQUFpQixLQUNqQixVQUFXLFVBQ1gsbUJBQW9CLE9BQ3BCLEdBQUksS0FDSixpQkFBa0IsR0FDbEIsaUJBQWtCLFNBQVVDLEVBQVNaLEVBQU0sQ0FDekMsT0FBT0EsRUFBSyxRQUFVO0FBQUE7QUFBQSxFQUFTLEVBQ2pDLEVBQ0EsZ0JBQWlCLFNBQVVZLEVBQVNaLEVBQU0sQ0FDeEMsT0FBT0EsRUFBSyxRQUFVO0FBQUE7QUFBQSxFQUFTQSxFQUFLLFVBQVk7QUFBQTtBQUFBLEVBQVNBLEVBQUssU0FDaEUsRUFDQSxtQkFBb0IsU0FBVVksRUFBU1osRUFBTSxDQUMzQyxPQUFPQSxFQUFLLFFBQVU7QUFBQTtBQUFBLEVBQVNZLEVBQVU7QUFBQTtBQUFBLEVBQVNBLENBQ3BELENBQ0YsRUFDQSxLQUFLLFFBQVUxQixHQUFPLENBQUMsRUFBR3VHLEVBQVU1RSxDQUFPLEVBQzNDLEtBQUssTUFBUSxJQUFJK0IsR0FBTSxLQUFLLE9BQU8sQ0FDckMsQ0FFQTRDLEdBQWdCLFVBQVksQ0FTMUIsU0FBVSxTQUFVakIsRUFBTyxDQUN6QixHQUFJLENBQUNtQixHQUFXbkIsQ0FBSyxFQUNuQixNQUFNLElBQUksVUFDUkEsRUFBUSx5REFDVixFQUdGLEdBQUlBLElBQVUsR0FBSSxNQUFPLEdBRXpCLElBQUlvQixFQUFTQyxHQUFRLEtBQUssS0FBTSxJQUFJdEIsR0FBU0MsRUFBTyxLQUFLLE9BQU8sQ0FBQyxFQUNqRSxPQUFPc0IsR0FBWSxLQUFLLEtBQU1GLENBQU0sQ0FDdEMsRUFVQSxJQUFLLFNBQVVHLEVBQVEsQ0FDckIsR0FBSSxNQUFNLFFBQVFBLENBQU0sRUFDdEIsUUFBUzFHLEVBQUksRUFBR0EsRUFBSTBHLEVBQU8sT0FBUTFHLElBQUssS0FBSyxJQUFJMEcsRUFBTzFHLENBQUMsQ0FBQyxVQUNqRCxPQUFPMEcsR0FBVyxXQUMzQkEsRUFBTyxJQUFJLE1BRVgsT0FBTSxJQUFJLFVBQVUsb0RBQW9ELEVBRTFFLE9BQU8sSUFDVCxFQVdBLFFBQVMsU0FBVXhHLEVBQUt1RCxFQUFNLENBQzVCLFlBQUssTUFBTSxJQUFJdkQsRUFBS3VELENBQUksRUFDakIsSUFDVCxFQVVBLEtBQU0sU0FBVUMsRUFBUSxDQUN0QixZQUFLLE1BQU0sS0FBS0EsQ0FBTSxFQUNmLElBQ1QsRUFVQSxPQUFRLFNBQVVBLEVBQVEsQ0FDeEIsWUFBSyxNQUFNLE9BQU9BLENBQU0sRUFDakIsSUFDVCxFQVVBLE9BQVEsU0FBVW5ELEVBQVEsQ0FDeEIsT0FBTzRGLEdBQVEsT0FBTyxTQUFVUSxFQUFhQyxFQUFRLENBQ25ELE9BQU9ELEVBQVksUUFBUUMsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxDQUFDLENBQ2pELEVBQUdyRyxDQUFNLENBQ1gsQ0FDRixFQVVBLFNBQVNpRyxHQUFTSyxFQUFZLENBQzVCLElBQUlDLEVBQU8sS0FDWCxPQUFPWixHQUFPLEtBQUtXLEVBQVcsV0FBWSxTQUFVTixFQUFRM0YsRUFBTSxDQUNoRUEsRUFBTyxJQUFJMkUsR0FBSzNFLEVBQU1rRyxFQUFLLE9BQU8sRUFFbEMsSUFBSW5FLEVBQWMsR0FDbEIsT0FBSS9CLEVBQUssV0FBYSxFQUNwQitCLEVBQWMvQixFQUFLLE9BQVNBLEVBQUssVUFBWWtHLEVBQUssT0FBT2xHLEVBQUssU0FBUyxFQUM5REEsRUFBSyxXQUFhLElBQzNCK0IsRUFBY29FLEdBQW1CLEtBQUtELEVBQU1sRyxDQUFJLEdBRzNDb0csR0FBS1QsRUFBUTVELENBQVcsQ0FDakMsRUFBRyxFQUFFLENBQ1AsQ0FVQSxTQUFTOEQsR0FBYUYsRUFBUSxDQUM1QixJQUFJTyxFQUFPLEtBQ1gsWUFBSyxNQUFNLFFBQVEsU0FBVXJELEVBQU0sQ0FDN0IsT0FBT0EsRUFBSyxRQUFXLGFBQ3pCOEMsRUFBU1MsR0FBS1QsRUFBUTlDLEVBQUssT0FBT3FELEVBQUssT0FBTyxDQUFDLEVBRW5ELENBQUMsRUFFTVAsRUFBTyxRQUFRLGFBQWMsRUFBRSxFQUFFLFFBQVEsZUFBZ0IsRUFBRSxDQUNwRSxDQVVBLFNBQVNRLEdBQW9CbkcsRUFBTSxDQUNqQyxJQUFJNkMsRUFBTyxLQUFLLE1BQU0sUUFBUTdDLENBQUksRUFDOUJZLEVBQVVnRixHQUFRLEtBQUssS0FBTTVGLENBQUksRUFDakNxRyxFQUFhckcsRUFBSyxtQkFDdEIsT0FBSXFHLEVBQVcsU0FBV0EsRUFBVyxZQUFVekYsRUFBVUEsRUFBUSxLQUFLLEdBRXBFeUYsRUFBVyxRQUNYeEQsRUFBSyxZQUFZakMsRUFBU1osRUFBTSxLQUFLLE9BQU8sRUFDNUNxRyxFQUFXLFFBRWYsQ0FXQSxTQUFTRCxHQUFNVCxFQUFRNUQsRUFBYSxDQUNsQyxJQUFJdUUsRUFBSzFHLEdBQXFCK0YsQ0FBTSxFQUNoQ1ksRUFBSzdHLEdBQW9CcUMsQ0FBVyxFQUNwQ3lFLEVBQU0sS0FBSyxJQUFJYixFQUFPLE9BQVNXLEVBQUcsT0FBUXZFLEVBQVksT0FBU3dFLEVBQUcsTUFBTSxFQUN4RUUsRUFBWTtBQUFBO0FBQUEsRUFBTyxVQUFVLEVBQUdELENBQUcsRUFFdkMsT0FBT0YsRUFBS0csRUFBWUYsQ0FDMUIsQ0FVQSxTQUFTYixHQUFZbkIsRUFBTyxDQUMxQixPQUNFQSxHQUFTLE9BQ1AsT0FBT0EsR0FBVSxVQUNoQkEsRUFBTSxXQUNMQSxFQUFNLFdBQWEsR0FBS0EsRUFBTSxXQUFhLEdBQUtBLEVBQU0sV0FBYSxJQUkzRSxDQUVBLElBQU9tQyxHQUFRbEIsbUJDeDhCRm1CLEdBQXFCLHlCQUU1QkMsR0FBYyxDQUNsQkMsUUFBUyxDQUNQQyxhQUFjLFVBQ2RDLFFBQVMsQ0FDUEMsS0FBQUEsR0FDQUMsS0FBQUEsRUFBTSxDQUFBLEVBR1ZDLEtBQU0sQ0FDSkgsUUFBUyxDQUNQRSxLQUFBQSxFQUFNLENBQUEsQ0FBQSxFQ1pORSxHQUFhLENBQ2pCQyxRQUFTLENBQ1BDLFFBQVMsTUFDVEMsTUFBQUEsRUFBTyxFQUVUQyxNQUFPLENBQ0xGLFFBQVMsYUFDVEcsU0FBQUEsRUFBVSxFQUVaQyxTQUFVLENBQ1JKLFFBQVMsS0FDVEssU0FBQUEsR0FDQUMsY0FBQUEsR0FDQUMsTUFBQUEsRUFBTyxFQUVUQyxLQUFNLENBQ0pSLFFBQVMsTUFDVEssU0FBQUEsR0FDQUksZUFBZ0IsQ0FBRSxVQUFBLEVBQ2xCQyxLQUFNLENBQ0pDLFVBQUFBLEVBQVcsQ0FBQSxFQUdmQyxXQUFZLENBQ1ZaLFFBQVMsS0FDVEMsTUFBQUEsRUFBTyxFQUVUWSxPQUFRLENBQ05iLFFBQVMsS0FDVGMsY0FBZSxhQUNmUCxNQUFBQSxHQUNBSixTQUFBQSxHQUNBWSxLQUFLQyxFQUFBQSxDQUNILE9BQU9oQixHQUFRZ0IsRUFBUUMsVUFBQUEsSUFBZ0JuQixHQUFXb0IsS0FBS0osYUFBQUEsRUFBZWQsT0FDeEUsQ0FBQSxFQUVGbUIsV0FBWSxDQUNWbkIsUUFBUyxLQUNUQyxNQUFBQSxFQUFPLEVBRVRtQixPQUFRLENBQ05wQixRQUFTLEtBQ1RjLGNBQWUsYUFDZlAsTUFBQUEsR0FDQUosU0FBQUEsR0FDQVksS0FBS0MsRUFBQUEsQ0FDSCxPQUFPaEIsR0FBUWdCLEVBQVFDLFVBQUFBLElBQWdCbkIsR0FBV29CLEtBQUtKLGFBQUFBLEVBQWVkLE9BQ3hFLENBQUEsRUFFRnFCLGtCQUFtQixDQUNqQnJCLFFBQVMsTUFDVHNCLFVBQUFBLEdBQ0FqQixTQUFBQSxHQUNBSixNQUFBQSxHQUNBTSxNQUFBQSxFQUFPLENBQUEsRUFJTFAsR0FBV2dCLEdBQUFBLENBQU8sSUFBQU8sRUFBQSxPQUFLUCxHQUFBQSxPQUFPTyxFQUFQUCxFQUFTaEIsV0FBTyxNQUFBdUIsSUFBUHZCLE9BQU91QixPQUFoQkEsRUFBa0JDLFlBQUFBLENBQWEsRUMxRHREQyxHQUFzQkMsVUFBVUMsVUFBVUMsTUFBTSw0QkFBQSxFQUNoREMsR0FBaUJKLElBQXVCSyxTQUFTTCxHQUFvQixDQUFBLENBQUEsRUFFNURNLEdBQUEsQ0FHYkMscUJBQXNCLGtCQUFrQmpCLEtBQUtXLFVBQVVDLFNBQUFBLEVBS3ZETSxjQUFlSixJQUFrQkEsR0FBaUIsR0FDbERLLGVBQWdCTCxJQUFrQkgsVUFBVUMsVUFBVUMsTUFBTSxjQUFBLEVBRzVETyxxQkFBc0IsaUJBQWlCcEIsS0FBS1csVUFBVUMsU0FBQUEsRUFFdERTLG9CQUEyQyxPQUFmQyxXQUFlLEtBQ3pDLENBQUUsT0FBUSxrQkFBbUIsV0FBQSxFQUFjQyxNQUFNQyxHQUFRQSxLQUFRRixXQUFXRyxTQUFBQSxDQUFBQSxFQ2xCakVDLEdBQUEsQ0FDYkMsU0FBVSxDQUFFLFVBQUEsRUFDWkMsYUFBQUEsR0FDQUMsV0FBQUEsRUFBWSxFQ0hDQyxHQUFBLENBQ2JDLFlBQWEsZUFDYkMsS0FBTSxPQUNOQyxRQUFTLFVBQ1RDLEtBQU0sT0FDTkMsTUFBTyxRQUNQQyxtQkFBb0Isc0JBQ3BCM0MsS0FBTSxPQUNOSixTQUFVLFVBQ1ZnRCxPQUFRLGlCQUNSQyxPQUFRLFNBQ1JDLEtBQU0sT0FDTkMsUUFBUyxVQUNUQyxRQUFTLGlCQUNUdEQsTUFBTyxRQUNQdUQsS0FBTSxPQUNOQyxPQUFRLFNBQ1JDLE9BQVEsZ0JBQ1JDLEtBQU0sT0FDTkMsT0FBUSxTQUNSQyxJQUFLLE1BQ0xDLGVBQWdCLG9CQUNoQkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxHQUFJLElBQUEsRUNyQkFDLEdBQVEsQ0FBRUMsR0FBS3BCLE1BQU9vQixHQUFLTCxHQUFJSyxHQUFLSixHQUFJSSxHQUFLTixHQUFJTSxHQUFLRixHQUFJRSxHQUFLSCxFQUFBQSxFQUV0REksR0FBQSxDQUNiQyxPQUFRLE1BQ1JDLFVBQVcsRUFFWEMsVUFBVXRELEVBQUFBLENBQ1IsT0FBUUEsRUFBQUEsQ0FDTixJQUFLLEdBQ0gsTUFBQSxLQUFBdUQsT0FBWUwsR0FBS3BCLEtBQUFBLEVBQ25CLElBQUssR0FDSCxNQUFBLEtBQUF5QixPQUFZTCxHQUFLckIsSUFBQUEsRUFDbkIsUUFDRSxJQUFJMkIsRUFFQTFELEtBQUtzRCxTQUFXLEtBQ2xCSSxFQUFPLElBQ0UxRCxLQUFLc0QsU0FBVyxRQUN6QkksRUFBTyxNQUdULElBQU1DLEVBQU1DLEtBQUtDLE1BQU1ELEtBQUtFLElBQUk1RCxDQUFBQSxFQUFVMEQsS0FBS0UsSUFBSUosQ0FBQUEsQ0FBQUEsRUFHN0NLLEdBRlk3RCxFQUFTMEQsS0FBS0ksSUFBSU4sRUFBTUMsQ0FBQUEsR0FDakJNLFFBQVFqRSxLQUFLdUQsU0FBQUEsRUFDR1csUUFBUSxNQUFPLEVBQUEsRUFBSUEsUUFBUSxNQUFPLEVBQUEsRUFDM0UsTUFBQVQsR0FBQUEsT0FBVU0sRUFBeUIsR0FBQSxFQUFBTixPQUFJTixHQUFNUSxDQUFBQSxDQUFBQSxDQUFBQSxDQUVuRCxDQUFBLEVDaENXUSxHQUFtQixTQUNuQkMsR0FBcUIsT0NEckJDLEdBQVMsU0FBU0MsRUFBQUEsQ0FDN0IsUUFBV0MsS0FBT0QsRUFBWSxDQUM1QixJQUFNRSxFQUFRRixFQUFXQyxDQUFBQSxFQUN6QnZFLEtBQUt1RSxDQUFBQSxFQUFPQyxFQUVkLE9BQU94RSxJQUNULEVDRE15RSxHQUFPQyxTQUFTQyxnQkFDaEJqRSxHQUFRK0QsR0FBS0csUUFFTkMsR0FBYyxTQUFTQyxFQUFBQSxDQUErRixHQUFBLENBQXBGQyxVQUFFQSxFQUFTQyxpQkFBRUEsRUFBZ0JDLGFBQUVBLEVBQVlDLFFBQUVBLEVBQU9DLGVBQUVBLEVBQWNDLE1BQUVBLENBQUFBLEVBQU9DLFVBQUFDLE9BQUFELEdBQUFBLFVBQUFFLENBQUFBLElBQUFGLE9BQUFBLFVBQUcsQ0FBQSxFQUFBLENBQUEsRUFDdkh2RixFQUFVaUYsR0FBd0JOLEdBQ2xDZSxFQUFXUixFQUNYUyxFQUFhUCxJQUFZLFlBRXpCUSxFQUFVLFNBQVNDLEVBQUFBLENBQ25CUCxHQUFTLE1BQW9CLEVBQVZBLEdBQVUsR0FDL0JNLEVBQVFFLFFBQUFBLEVBRVYsSUFBTUMsRUFBU0MsR0FBMkJILEVBQU1FLE9BQVEsQ0FBRWIsaUJBQWtCUSxDQUFBQSxDQUFBQSxFQUN4RUssR0FBVSxPQUNaWixHQUFjYyxLQUFLRixFQUFRRixFQUFPRSxDQUFBQSxFQUM5QlYsR0FDRlEsRUFBTVIsZUFBQUEsRUFBQUEsRUFRWixPQUhBTyxFQUFRRSxRQUFVLElBQU05RixFQUFRa0csb0JBQW9CbEIsRUFBV1ksRUFBU0QsQ0FBQUEsRUFFeEUzRixFQUFRbUcsaUJBQWlCbkIsRUFBV1ksRUFBU0QsQ0FBQUEsRUFDdENDLENBQ1QsRUFPYVEsR0FBZSxTQUFTcEIsRUFBQUEsQ0FBZ0UsR0FBQSxDQUFyREMsVUFBRUEsRUFBU29CLFFBQUVBLEVBQU9DLFdBQUVBLEVBQVV4SCxXQUFFQSxDQUFBQSxFQUFZeUcsVUFBQUMsT0FBQUQsR0FBQUEsVUFBQUUsQ0FBQUEsSUFBQUYsT0FBQUEsVUFBRyxDQUFBLEVBQUEsQ0FBQSxFQUN6RnZGLEVBQVVpRixHQUFnQ04sR0FDaEQwQixFQUFVQSxJQUFWQSxHQUNBQyxFQUFhQSxJQUFiQSxHQUVBLElBQU1ULEVBQVFqQixTQUFTMkIsWUFBWSxRQUFBLEVBS25DLE9BSkFWLEVBQU1XLFVBQVV4QixFQUFXcUIsRUFBU0MsQ0FBQUEsRUFDaEN4SCxHQUFjLE1BQ2hCeUYsR0FBTzBCLEtBQUtKLEVBQU8vRyxDQUFBQSxFQUVka0IsRUFBUXlHLGNBQWNaLENBQUFBLENBQy9CLEVBRWFhLEdBQXlCLFNBQVMxRyxFQUFTMEYsRUFBQUEsQ0FDdEQsR0FBSTFGLEdBQVMyRyxXQUFhLEVBQ3hCLE9BQU8vRixHQUFNcUYsS0FBS2pHLEVBQVMwRixDQUFBQSxDQUUvQixFQUVhTSxHQUE2QixTQUFTWSxFQUFBQSxDQUE0QyxHQUFBLENBQXRDMUIsaUJBQUVBLEVBQWdCMkIsVUFBRUEsQ0FBQUEsRUFBV3RCLFVBQUFDLE9BQUFELEdBQUFBLFVBQUFFLENBQUFBLElBQUFGLE9BQUFBLFVBQUcsQ0FBQSxFQUFBLENBQUEsRUFDekYsS0FBT3FCLEdBQVFBLEVBQUtELFdBQWFHLEtBQUtDLGNBQ3BDSCxFQUFPQSxFQUFLM0csV0FFZCxHQUFJMkcsR0FBUSxLQUFaLENBSUEsR0FBSTFCLEdBQW9CLEtBWXRCLE9BQU8wQixFQVhQLEdBQUlBLEVBQUtJLFNBQVdILEdBQWEsS0FDL0IsT0FBT0QsRUFBS0ksUUFBUTlCLENBQUFBLEVBRXBCLEtBQU8wQixHQUFRQSxJQUFTQyxHQUFXLENBQ2pDLEdBQUlILEdBQXVCRSxFQUFNMUIsQ0FBQUEsRUFDL0IsT0FBTzBCLEVBRVRBLEVBQU9BLEVBQUszRyxZQU1wQixFQVNhZ0gsR0FBd0JqSCxHQUNuQzRFLFNBQVNzQyxnQkFBa0JsSCxHQUFXbUgsR0FBb0JuSCxFQUFTNEUsU0FBU3NDLGFBQUFBLEVBRWpFQyxHQUFzQixTQUFTbkgsRUFBUzRHLEVBQUFBLENBQ25ELEdBQUs1RyxHQUFZNEcsRUFHakIsS0FBT0EsR0FBTSxDQUNYLEdBQUlBLElBQVM1RyxFQUNYLE1BQUEsR0FFRjRHLEVBQU9BLEVBQUszRyxXQUVoQixFQW9CYW1ILEdBQXVCLFNBQVNSLEVBQUFBLENBQU0sSUFBQVMsRUFDakQsSUFBSUEsRUFBQ1QsS0FBSSxNQUFBUyxJQUFKVCxRQUFJUyxDQUFKQSxFQUFNcEgsV0FDVCxPQUVGLElBQUlxSCxFQUFhLEVBRWpCLElBREFWLEVBQU9BLEVBQUtXLGdCQUNMWCxHQUNMVSxJQUNBVixFQUFPQSxFQUFLVyxnQkFFZCxPQUFPRCxDQUNULEVBRWFFLEdBQWNaLEdBQUFBLENBQUksSUFBQWEsRUFBQSxPQUFLYixHQUFBQSxPQUFJYSxFQUFKYixFQUFNM0csY0FBVSxNQUFBd0gsSUFBVnhILE9BQVV3SCxPQUFoQkEsRUFBa0JDLFlBQVlkLENBQUFBLENBQUssRUFFMURlLEdBQVcsU0FBU0MsRUFBQUEsQ0FBcUUsR0FBQSxDQUEvREMsZ0JBQUVBLEVBQWVDLFlBQUVBLEVBQVdDLHVCQUFFQSxDQUFBQSxFQUF3QnhDLFVBQUFDLE9BQUFELEdBQUFBLFVBQUFFLENBQUFBLElBQUFGLE9BQUFBLFVBQUcsQ0FBQSxFQUFBLENBQUEsRUFDMUZ5QyxHQUFhLElBQUEsQ0FDakIsT0FBUUgsRUFBQUEsQ0FDTixJQUFLLFVBQ0gsT0FBT0ksV0FBV0MsYUFDcEIsSUFBSyxPQUNILE9BQU9ELFdBQVdFLFVBQ3BCLElBQUssVUFDSCxPQUFPRixXQUFXRyxhQUNwQixRQUNFLE9BQU9ILFdBQVdJLFFBQUFBLENBRXZCLEdBWGtCLEVBYW5CLE9BQU96RCxTQUFTMEQsaUJBQ2RWLEVBQ0FJLEVBQ0FGLEdBQW9DLEtBQ3BDQyxJQURvQyxFQUNwQ0EsQ0FFSixFQUVhL0ksR0FBV2dCLEdBQUFBLENBQU8sSUFBQU8sRUFBQSxPQUFLUCxHQUFBQSxPQUFPTyxFQUFQUCxFQUFTaEIsV0FBTyxNQUFBdUIsSUFBUHZCLE9BQU91QixPQUFoQkEsRUFBa0JDLFlBQUFBLENBQWEsRUFFdEQrSCxHQUFjLFNBQVNDLEVBQUFBLENBQW1CLElBQ2pEL0QsRUFBS0MsRUFEOEIrRCxFQUFPbEQsVUFBQUMsT0FBQSxHQUFBRCxVQUFBLENBQUEsSUFBQSxPQUFBQSxVQUFBLENBQUEsRUFBRyxDQUFBLEVBRTlCLE9BQVJpRCxHQUFRLFVBQ2pCQyxFQUFVRCxFQUNWQSxFQUFNQyxFQUFRekosU0FFZHlKLEVBQVUsQ0FBRTNKLFdBQVkySixDQUFBQSxFQUcxQixJQUFNekksRUFBVTRFLFNBQVM4RCxjQUFjRixDQUFBQSxFQVN2QyxHQVBJQyxFQUFRRSxVQUFZLE9BQ2xCRixFQUFRM0osWUFBYyxPQUN4QjJKLEVBQVEzSixXQUFhLENBQUEsR0FFdkIySixFQUFRM0osV0FBVzhKLGdCQUFrQkgsRUFBUUUsVUFHM0NGLEVBQVEzSixXQUNWLElBQUsyRixLQUFPZ0UsRUFBUTNKLFdBQ2xCNEYsRUFBUStELEVBQVEzSixXQUFXMkYsQ0FBQUEsRUFDM0J6RSxFQUFRNkksYUFBYXBFLEVBQUtDLENBQUFBLEVBSTlCLEdBQUkrRCxFQUFRSyxNQUNWLElBQUtyRSxLQUFPZ0UsRUFBUUssTUFDbEJwRSxFQUFRK0QsRUFBUUssTUFBTXJFLENBQUFBLEVBQ3RCekUsRUFBUThJLE1BQU1yRSxDQUFBQSxFQUFPQyxFQUl6QixHQUFJK0QsRUFBUU0sS0FDVixJQUFLdEUsS0FBT2dFLEVBQVFNLEtBQ2xCckUsRUFBUStELEVBQVFNLEtBQUt0RSxDQUFBQSxFQUNyQnpFLEVBQVFnSixRQUFRdkUsQ0FBQUEsRUFBT0MsRUFvQjNCLE9BaEJJK0QsRUFBUVEsV0FDVlIsRUFBUVEsVUFBVUMsTUFBTSxHQUFBLEVBQUtDLFFBQVNGLEdBQUFBLENBQ3BDakosRUFBUW9KLFVBQVVDLElBQUlKLENBQUFBLENBQVUsQ0FBQSxFQUloQ1IsRUFBUWEsY0FDVnRKLEVBQVFzSixZQUFjYixFQUFRYSxhQUc1QmIsRUFBUWMsWUFDVixDQUFBLEVBQUc1RixPQUFPOEUsRUFBUWMsVUFBQUEsRUFBWUosUUFBU0ssR0FBQUEsQ0FDckN4SixFQUFReUosWUFBWUQsQ0FBQUEsQ0FBVSxDQUFBLEVBSTNCeEosQ0FDVCxFQUVJMEosR0FFU0MsR0FBbUIsVUFBQSxDQUM5QixHQUFJRCxJQUFpQixLQUNuQixPQUFPQSxHQUdUQSxHQUFnQixDQUFBLEVBQ2hCLFFBQVdqRixLQUFPbUYsR0FBaUIsQ0FDakMsSUFBTTlLLEVBQWE4SyxHQUFnQm5GLENBQUFBLEVBQy9CM0YsRUFBV0UsU0FDYjBLLEdBQWNHLEtBQUsvSyxFQUFXRSxPQUFBQSxFQUlsQyxPQUFPMEssRUFDVCxFQUVhSSxHQUF3QmxELEdBQVNtRCxHQUF3Qm5ELEdBQU1vRCxVQUFBQSxFQU0vREMsR0FBbUIsU0FBU3JELEVBQUFBLENBQXFDLEdBQUEsQ0FBL0JzRCxPQUFFQSxDQUFBQSxFQUFRM0UsVUFBQUMsT0FBQSxHQUFBRCxVQUFBRSxDQUFBQSxJQUFBLE9BQUFGLFVBQUcsQ0FBQSxFQUFBLENBQUUyRSxPQUFBQSxFQUFRLEVBQ3BFLE9BQUlBLEVBQ0tILEdBQXdCbkQsQ0FBQUEsRUFHN0JtRCxHQUF3Qm5ELENBQUFBLEdBQUFBLENBQVVtRCxHQUF3Qm5ELEVBQUtvRCxVQUFBQSxHQVR6QixTQUFTcEQsRUFBQUEsQ0FDbkQsT0FBTytDLEdBQUFBLEVBQW1CUSxTQUFTbkwsR0FBUTRILENBQUFBLENBQUFBLEdBQUFBLENBQVcrQyxHQUFBQSxFQUFtQlEsU0FBU25MLEdBQVE0SCxFQUFLb0QsVUFBQUEsQ0FBQUEsQ0FDakcsRUFPaUhwRCxDQUFBQSxDQUdqSCxFQUVhbUQsR0FBMkJuRCxHQUFTd0QsR0FBa0J4RCxDQUFBQSxHQUFTQSxHQUFNbUMsT0FBUyxRQUU5RXFCLEdBQXFCeEQsR0FBU0EsR0FBTUQsV0FBYUcsS0FBS3VELGFBRXREQyxHQUFxQixTQUFTMUQsRUFBQUEsQ0FBcUIsR0FBQSxDQUFmakksS0FBRUEsQ0FBQUEsRUFBTTRHLFVBQUFDLE9BQUFELEdBQUFBLFVBQUFFLENBQUFBLElBQUFGLE9BQUFBLFVBQUcsQ0FBQSxFQUFBLENBQUEsRUFDMUQsR0FBS3FCLEVBR0wsT0FBSTJELEdBQWUzRCxDQUFBQSxFQUNiQSxFQUFLbUMsT0FBUzFFLEdBQUFBLENBQ1oxRixHQUNLaUksRUFBSzNHLFdBQVcrSSxRQUFRd0IsbUJBQXFCN0wsRUFBQUEsT0FNakQyTCxHQUFtQjFELEVBQUtvRCxVQUFBQSxDQUVuQyxFQUVhUyxHQUEyQjdELEdBQVNGLEdBQXVCRSxFQUFNdEksRUFBQUEsRUFFakVvTSxHQUF1QjlELEdBQVMyRCxHQUFlM0QsQ0FBQUEsR0FBU0EsR0FBTW1DLE9BQVMsR0FFdkV3QixHQUFrQjNELEdBQVNBLEdBQU1ELFdBQWFHLEtBQUs2RCxVQ2pSMURDLEdBQVEsQ0FDWkMsY0FBQUEsR0FFQUMsVUFBQUEsQ0FDRSxPQUFJNUssS0FBSzJLLGVBQWlCRSxHQUFRM0osb0JBQ3pCLEVBRUEsQ0FFVixFQUNENEosVUFBVUMsRUFBQUEsQ0FDUixJQUFNTCxFQUFRckMsR0FBWSxRQUFTLENBQUUyQyxLQUFNLE9BQVFDLFNBQUFBLEdBQWdCQyxPQUFBQSxHQUFjQyxHQUFJbkwsS0FBS29MLFdBQUFBLENBQUFBLEVBRTFGVixFQUFNekUsaUJBQWlCLFNBQVUsSUFBQSxDQUMvQjhFLEVBQVNMLEVBQU1XLEtBQUFBLEVBQ2YvRCxHQUFXb0QsQ0FBQUEsQ0FBTSxDQUFBLEVBR25CcEQsR0FBVzVDLFNBQVM0RyxlQUFldEwsS0FBS29MLFdBQUFBLENBQUFBLEVBQ3hDMUcsU0FBUzZHLEtBQUtoQyxZQUFZbUIsQ0FBQUEsRUFDMUJBLEVBQU1jLE1BQUFBLENBQ1IsQ0FBQSxFRXhCYUMsR0FBQSxDQUNiQyxzQkFBQUEsR0FDQUMsbUJBQW9CLE1BQ3BCQyxrQkFBbUI7Q0FBQSxFQ0ROQyxHQUFBLENBQ2JoSyxLQUFNLENBQ0ovQyxRQUFTLFNBQ1RnTixZQUFBQSxHQUNBTCxPQUFPM0wsRUFBQUEsQ0FDTCxJQUFNOEksRUFBUW1ELE9BQU9DLGlCQUFpQmxNLENBQUFBLEVBQ3RDLE9BQU84SSxFQUFNcUQsYUFBZSxRQUFVckQsRUFBTXFELFlBQWMsR0FDNUQsQ0FBQSxFQUVGOUosT0FBUSxDQUNOckQsUUFBUyxLQUNUZ04sWUFBQUEsR0FDQUwsT0FBTzNMLEdBQ1NpTSxPQUFPQyxpQkFBaUJsTSxDQUFBQSxFQUN6Qm9NLFlBQWMsUUFBZEEsRUFHakJDLEtBQU0sQ0FDSkMsYUFBYyxJQUNkWCxPQUFPM0wsRUFBQUEsQ0FDTCxJQUFNa0YsRUFBZ0IsU0FBQXZCLE9BQVlyRixHQUFxQixHQUFBLEVBQ2pEZ0UsRUFBT3RDLEVBQVFnSCxRQUFROUIsQ0FBQUEsRUFDN0IsR0FBSTVDLEVBQ0YsT0FBT0EsRUFBS2lLLGFBQWEsTUFBQSxDQUU3QixDQUFBLEVBRUY1SixPQUFRLENBQ04zRCxRQUFTLE1BQ1RnTixZQUFBQSxFQUFhLEVBRWZRLE9BQVEsQ0FDTjFELE1BQU8sQ0FBRTJELGdCQUFpQixXQUFBLENBQUEsQ0FBQSxFQ2hDZkMsR0FBQSxDQUNiQyxlQUFjQSxJQUNaaEo7O2lKQUFBQSxPQUU2SUwsR0FBS3ZCLEtBQUk0QixrQkFBQUEsRUFBQUEsT0FBbUJMLEdBQUt2QixLQUFJNEI7b0pBQUFBLEVBQUFBLE9BQ2pDTCxHQUFLakIsT0FBTXNCLGtCQUFBQSxFQUFBQSxPQUFtQkwsR0FBS2pCLE9BQU1zQjtrSUFBQUEsRUFBQUEsT0FDM0RMLEdBQUtYLE9BQU1nQixrQkFBQUEsRUFBQUEsT0FBbUJMLEdBQUtYLE9BQU1nQjt3S0FBQUEsRUFBQUEsT0FDSEwsR0FBS2hCLEtBQUlxQixrQkFBQUEsRUFBQUEsT0FBbUJMLEdBQUtoQixLQUFJcUI7Ozs7dUlBQUFBLEVBQUFBLE9BSXRFTCxHQUFLbEUsU0FBUXVFLGtCQUFBQSxFQUFBQSxPQUFtQkwsR0FBS2xFLFNBQVF1RTtnSUFBQUEsRUFBQUEsT0FDcERMLEdBQUtwRSxNQUFLeUUsa0JBQUFBLEVBQUFBLE9BQW1CTCxHQUFLcEUsTUFBS3lFOzhIQUFBQSxFQUFBQSxPQUN6Q0wsR0FBSzlELEtBQUltRSxrQkFBQUEsRUFBQUEsT0FBbUJMLEdBQUs5RCxLQUFJbUU7dUlBQUFBLEVBQUFBLE9BQzVCTCxHQUFLdEIsUUFBTzJCLGtCQUFBQSxFQUFBQSxPQUFtQkwsR0FBS3RCLFFBQUFBO3VJQUFBQSxFQUFPMkIsT0FDM0NMLEdBQUtmLFFBQUFBLGtCQUFBQSxFQUFPb0IsT0FBbUJMLEdBQUtmLFFBQUFBOzZKQUFBQSxFQUFPb0IsT0FDckJMLEdBQUtkLFFBQUFBLGtCQUFBQSxFQUFPbUIsT0FBbUJMLEdBQUtkLFFBQUFBOzZKQUFBQSxFQUFPbUIsT0FDM0NMLEdBQUtsQixPQUFBQSxrQkFBQUEsRUFBTXVCLE9BQW1CTCxHQUFLbEIsT0FBQUE7Ozs7b0lBQUFBLEVBQU11QixPQUlsRUwsR0FBS3hCLFlBQUFBLGtCQUFBQSxFQUFXNkIsT0FBbUJMLEdBQUt4QixZQUFBQTs7Ozs7OzZJQUFBQSxFQUFXNkIsT0FNMUNMLEdBQUtWLEtBQUFBLGtCQUFBQSxFQUFJZSxPQUFtQkwsR0FBS1YsS0FBQUE7bUpBQUFBLEVBQUllLE9BQy9CTCxHQUFLYixLQUFBQSxrQkFBQUEsRUFBSWtCLE9BQW1CTCxHQUFLYixLQUFBQTs7Ozs7Ozs0RkFBQUEsRUFBSWtCLE9BTzVGTCxHQUFLUCxlQUFBQSxnQkFBQUEsRUFBY1ksT0FBaUJMLEdBQUtSLElBQUFBOztpRkFBQUEsRUFBR2EsT0FFdkRMLEdBQUtoQixLQUFBQTtpRkFBQUEsRUFBSXFCLE9BQ1RMLEdBQUtULE9BQU07Ozs7V0FBQSxDQUFBLEVDeEN2RkQsR0FBTyxDQUFFZ0ssU0FBVSxHQUFBLEVBQUFDLEdBQUEsT0FBQSxPQUFBLENBQUEsVUFBQSxLQUFBLFlBQUFDLEdBQUEsZ0JBQUFDLEdBQUEsUUFBQUMsR0FBQSxJQ0FWLENBQ2JDLFdBQVksYUFDWkMsa0JBQW1CLHNCQUNuQkMsd0JBQXlCLDZCQUN6QkMsbUJBQW9CLHVCQUNwQkMsNEJBQTZCLGlDQUM3QkMsZUFBZ0IsbUJBQ2hCQyxtQkFBb0IsdUJBQ3BCQyxlQUFnQixtQkFDaEJDLGtCQUFtQixzQkFDbkJwTixrQkFBbUIsb0JBQUEsRUFBQSxVQUFBcU4sR0FBQSxTQUFBQyxHQUFBLE1BQUFDLEdBQUEsU0xWTixDQUNiLEVBQUcsWUFDSCxFQUFHLE1BQ0gsR0FBSSxTQUNKLEdBQUksU0FDSixHQUFJLE9BQ0osR0FBSSxRQUNKLEdBQUksU0FDSixHQUFJLElBQ0osR0FBSSxJQUNKLEdBQUksR0FBQSxFQUFBLEtBQUFDLEdBQUEsT0FBQUMsR0FBQSxlQUFBQyxHQUFBLFFBQUFDLEdBQUEsS0FBQUMsRUFBQSxDQUFBLEVNVmVDLEdBQU4sS0FBTUEsQ0FDbkIsT0FBQSxZQUFtQkMsRUFBQUEsQ0FDakIsR0FBQSxDQUFNeFAsS0FBRUEsRUFBSXlQLFNBQUVBLEVBQVFDLFdBQUVBLEVBQVVDLFNBQUVBLENBQUFBLEVBQWFDLEdBQTJCSixDQUFBQSxFQUU1RWpPLEtBQUtzQixVQUFVN0MsQ0FBQUEsRUFBUSxVQUFBLENBQ3JCLElBQUk2UCxFQUNBQyxFQUdZLElBQUFDLEVBU0ZDLEVBVlZQLE9BQUFBLEVBRUFLLEVBREVILEdBQ0lJLEVBQUd4TyxLQUFLa08sQ0FBQUEsS0FBU00sTUFBQUEsSUFBVE4sT0FBU00sT0FBZEEsRUFBQXpJLEtBQUFBLElBQUFBLEVBRUEvRixLQUFLa08sQ0FBQUEsRUFBQUEsRUFFUEMsSUFDVEksRUFBU3ZPLEtBQUttTyxDQUFBQSxHQUdaQyxHQUNGRSxHQUFPRyxFQUFHRixLQUFNLE1BQUFFLElBQU5GLE9BQU1FLE9BQU5BLEVBQVNoUSxDQUFBQSxFQUNmNlAsRUFDS0ksR0FBTTNJLEtBQUt1SSxFQUFTQyxFQUFRbEosU0FBQUEsRUFBQUEsU0FHckNpSixFQUFVQyxFQUFPOVAsQ0FBQUEsRUFDVmlRLEdBQU0zSSxLQUFLdUksRUFBU0MsRUFBUWxKLFNBQUFBLEVBQUFBLENBR3pDLENBQUEsRUFHSWdKLEdBQTZCLFNBQVNKLEVBQUFBLENBQzFDLElBQU12TixFQUFRdU4sRUFBV3ZOLE1BQU1pTyxFQUFBQSxFQUMvQixHQUFBLENBQUtqTyxFQUNILE1BQU0sSUFBSWtPLE1BQUssd0NBQUFuTCxPQUF5Q3dLLENBQUFBLENBQUFBLEVBRzFELElBQU1ZLEVBQU8sQ0FBRXBRLEtBQU1pQyxFQUFNLENBQUEsQ0FBQSxFQVkzQixPQVZJQSxFQUFNLENBQUEsR0FBTSxLQUNkbU8sRUFBS1gsU0FBV3hOLEVBQU0sQ0FBQSxFQUV0Qm1PLEVBQUtWLFdBQWF6TixFQUFNLENBQUEsRUFHdEJBLEVBQU0sQ0FBQSxHQUFNLE9BQ2RtTyxFQUFLVCxTQUFBQSxJQUdBUyxDQUNULEVBQUEsQ0FFUUgsTUFBQUEsRUFBQUEsRUFBVUksU0FBU3hOLFVBRXJCcU4sR0FBK0IsSUFBSUksT0FBTyxnQ0FBQSxFQUFBQyxHQUFBQyxHQUFBQyxHQ3BEM0JDLEdBQU4sY0FBMEJuQixFQUFBQSxDQUN2QyxPQUFBLEtBQU9vQixDQUFnQixJQUFaNUssRUFBS2EsVUFBQUMsT0FBQSxHQUFBRCxVQUFBLENBQUEsSUFBQSxPQUFBQSxVQUFBLENBQUEsRUFBRyxHQUNqQixPQUFJYixhQUFpQnhFLEtBQ1p3RSxFQUVBeEUsS0FBS3FQLGVBQWU3SyxHQUFPOEssU0FBQUEsQ0FBQUEsQ0FFdEMsQ0FFQSxPQUFBLGVBQXNCQyxFQUFBQSxDQUNwQixPQUFPLElBQUl2UCxLQUFLdVAsRUFBWUMsR0FBV0QsQ0FBQUEsQ0FBQUEsQ0FDekMsQ0FFQSxPQUFBLGVBQXNCRSxFQUFBQSxDQUNwQixPQUFPLElBQUl6UCxLQUFLMFAsR0FBV0QsQ0FBQUEsRUFBYUEsQ0FBQUEsQ0FDMUMsQ0FFQUUsWUFBWUosRUFBWUUsRUFBQUEsQ0FDdEJHLE1BQUFBLEdBQVN2SyxTQUFBQSxFQUNUckYsS0FBS3VQLFdBQWFBLEVBQ2xCdlAsS0FBS3lQLFdBQWFBLEVBQ2xCelAsS0FBS3NGLE9BQVN0RixLQUFLeVAsV0FBV25LLE9BQzlCdEYsS0FBSzZQLFdBQWE3UCxLQUFLdVAsV0FBV2pLLE1BQ3BDLENBRUF3SyxtQkFBbUJDLEVBQUFBLENBQ2pCLE9BQU9MLEdBQVcxUCxLQUFLeVAsV0FBV08sTUFBTSxFQUFHcE0sS0FBS3FNLElBQUksRUFBR0YsQ0FBQUEsQ0FBQUEsQ0FBQUEsRUFBVXpLLE1BQ25FLENBRUE0SyxxQkFBcUJDLEVBQUFBLENBQ25CLE9BQU9YLEdBQVd4UCxLQUFLdVAsV0FBV1MsTUFBTSxFQUFHcE0sS0FBS3FNLElBQUksRUFBR0UsQ0FBQUEsQ0FBQUEsQ0FBQUEsRUFBYzdLLE1BQ3ZFLENBRUEwSyxPQUFBQSxDQUNFLE9BQU9oUSxLQUFLMlAsWUFBWVMsZUFBZXBRLEtBQUt5UCxXQUFXTyxNQUFBQSxHQUFTM0ssU0FBQUEsQ0FBQUEsQ0FDbEUsQ0FFQWdMLE9BQU9OLEVBQUFBLENBQ0wsT0FBTy9QLEtBQUtnUSxNQUFNRCxFQUFRQSxFQUFTLENBQUEsQ0FDckMsQ0FFQU8sVUFBVTlMLEVBQUFBLENBQ1IsT0FBT3hFLEtBQUsyUCxZQUFZUCxJQUFJNUssQ0FBQUEsRUFBTytLLGFBQWV2UCxLQUFLdVAsVUFDekQsQ0FFQWdCLFFBQUFBLENBQ0UsT0FBT3ZRLEtBQUt1UCxVQUNkLENBRUFpQixhQUFBQSxDQUNFLE9BQU94USxLQUFLdVAsVUFDZCxDQUVBRCxVQUFBQSxDQUNFLE9BQU90UCxLQUFLdVAsVUFDZCxDQUFBLEVBR0lrQixLQUFlQyxHQUFBQyxNQUFNQyxRQUFJLE1BQUFGLEtBQUpFLE9BQUlGLE9BQVZBLEdBQUEzSyxLQUFBNEssTUFBYSxXQUFBLEVBQWdCckwsVUFBVyxFQUN2RHVMLEtBQXVCQyxHQUFBLElBQUlDLGVBQVcsTUFBQUQsS0FBWEMsT0FBV0QsT0FBZkEsR0FBQS9LLEtBQUEsSUFBa0IsQ0FBQSxJQUFNLEtBQy9DaUwsS0FBeUJDLEdBQUFDLE9BQU9DLGlCQUFhLE1BQUFGLEtBQWJFLE9BQWFGLE9BQXBCQSxHQUFBbEwsS0FBQW1MLE9BQXVCLEdBQUksTUFBQSxLQUFZLGFBS2xFMUIsR0FBWUUsR0FRZEYsR0FERWlCLElBQWdCSSxHQUNKTyxHQUFXVCxNQUFNQyxLQUFLUSxDQUFBQSxFQUFRQyxJQUFLQyxHQUFTQSxFQUFLUCxZQUFZLENBQUEsQ0FBQSxFQUU5RCxTQUFTSyxFQUFBQSxDQUNwQixJQUFNRyxFQUFTLENBQUEsRUFDWEMsRUFBVSxFQUNkLENBQU1sTSxPQUFFQSxDQUFBQSxFQUFXOEwsRUFFbkIsS0FBT0ksRUFBVWxNLEdBQVEsQ0FDdkIsSUFBSWQsRUFBUTRNLEVBQU9LLFdBQVdELEdBQUFBLEVBQzlCLEdBQUksT0FBVWhOLEdBQVNBLEdBQVMsT0FBVWdOLEVBQVVsTSxFQUFRLENBRTFELElBQU1vTSxFQUFRTixFQUFPSyxXQUFXRCxHQUFBQSxHQUNuQixNQUFSRSxJQUFvQixNQUV2QmxOLElBQWtCLEtBQVJBLElBQWtCLEtBQWUsS0FBUmtOLEdBQWlCLE1BSXBERixJQUdKRCxFQUFPNUgsS0FBS25GLENBQUFBLEVBR2QsT0FBTytNLENBQUFBLEVBTVQ3QixHQURFc0IsR0FDWVcsR0FBVVQsT0FBT0MsY0FBQUEsR0FBaUJSLE1BQU1DLEtBQUtlLEdBQVMsQ0FBQSxDQUFBLENBQUEsRUFFdkQsU0FBU0EsRUFBQUEsQ0FpQnBCLE9BaEJtQixJQUFBLENBQ2pCLElBQU1DLEVBQVMsQ0FBQSxFQVlmLE9BVkFqQixNQUFNQyxLQUFLZSxDQUFBQSxFQUFPMUksUUFBU3pFLEdBQUFBLENBQ3pCLElBQUkrTSxFQUFTLEdBQ1QvTSxFQUFRLFFBQ1ZBLEdBQVMsTUFDVCtNLEdBQVVMLE9BQU9XLGFBQWFyTixJQUFVLEdBQUssS0FBUSxLQUFBLEVBQ3JEQSxFQUFRLE1BQWlCLEtBQVJBLEdBRW5Cb04sRUFBT2pJLEtBQUs0SCxFQUFTTCxPQUFPVyxhQUFhck4sQ0FBQUEsQ0FBQUEsQ0FBTyxDQUFBLEVBRzNDb04sQ0FDUixHQWRrQixFQWdCREUsS0FBSyxFQUFBLENBQUEsRUN6SDNCLElBQUkzRyxHQUFLLEVBRVk0RyxHQUFOLGNBQXlCL0QsRUFBQUEsQ0FDdEMsT0FBQSxlQUFzQmdFLEVBQUFBLENBQ3BCLE9BQU9oUyxLQUFLaVMsU0FBU0MsS0FBS25ULE1BQU1pVCxDQUFBQSxDQUFBQSxDQUNsQyxDQUVBckMsYUFBQUEsQ0FDRUMsTUFBQUEsR0FBU3ZLLFNBQUFBLEVBQ1RyRixLQUFLbUwsR0FBQUEsRUFBT0EsRUFDZCxDQUVBZ0gscUJBQXFCNUQsRUFBQUEsQ0FDbkIsT0FBT3ZPLEtBQUsyUCxjQUFnQnBCLEdBQVFvQixXQUN0QyxDQUVBVyxVQUFVL0IsRUFBQUEsQ0FDUixPQUFPdk8sT0FBU3VPLENBQ2xCLENBRUE2RCxTQUFBQSxDQUNFLElBQU1DLEVBQVEsQ0FBQSxFQUNSQyxFQUFXdFMsS0FBS3VTLHNCQUFBQSxHQUEyQixDQUFBLEVBRWpELFFBQVdoTyxLQUFPK04sRUFBVSxDQUMxQixJQUFNOU4sRUFBUThOLEVBQVMvTixDQUFBQSxFQUN2QjhOLEVBQU0xSSxLQUFJLEdBQUFsRyxPQUFJYyxFQUFHLEdBQUEsRUFBQWQsT0FBSWUsQ0FBQUEsQ0FBQUEsRUFHdkIsTUFBQSxLQUFBZixPQUFZekQsS0FBSzJQLFlBQVlsUixLQUFJLEdBQUEsRUFBQWdGLE9BQUl6RCxLQUFLbUwsRUFBQUEsRUFBRTFILE9BQUc0TyxFQUFNL00sT0FBTSxJQUFBN0IsT0FBTzRPLEVBQU1QLEtBQUssSUFBQSxDQUFBLEVBQVUsR0FBRSxHQUFBLENBQzNGLENBRUFTLHVCQUFBQSxDQUF5QixDQUV6QkMsY0FBQUEsQ0FDRSxPQUFPTixLQUFLTyxVQUFVelMsSUFBQUEsQ0FDeEIsQ0FFQTBTLGVBQUFBLENBQ0UsT0FBT3ZELEdBQVlDLElBQUlwUCxJQUFBQSxDQUN6QixDQUVBd1EsYUFBQUEsQ0FDRSxPQUFPeFEsS0FBS21MLEdBQUdtRSxTQUFBQSxDQUNqQixDQUFBLEVDNUNXcUQsR0FBaUIsVUFBQSxDQUF5QixJQUFoQjdGLEVBQUN6SCxVQUFBQyxPQUFBLEdBQUFELFVBQUEsQ0FBQSxJQUFBLE9BQUFBLFVBQUEsQ0FBQSxFQUFHLENBQUEsRUFBSXVOLEVBQUN2TixVQUFBQyxPQUFBLEdBQUFELFVBQUEsQ0FBQSxJQUFBLE9BQUFBLFVBQUEsQ0FBQSxFQUFHLENBQUEsRUFDakQsR0FBSXlILEVBQUV4SCxTQUFXc04sRUFBRXROLE9BQ2pCLE1BQUEsR0FFRixRQUFTdU4sRUFBUSxFQUFHQSxFQUFRL0YsRUFBRXhILE9BQVF1TixJQUVwQyxHQURjL0YsRUFBRStGLENBQUFBLElBQ0ZELEVBQUVDLENBQUFBLEVBQ2QsTUFBQSxHQUdKLE1BQUEsRUFDRixFQUlhQyxHQUFjLFNBQVNuQixFQUFBQSxDQUNsQyxJQUFNQyxFQUFTRCxFQUFNM0IsTUFBTSxDQUFBLEVBQUUsUUFBQStDLEVBQUExTixVQUFBQyxPQURldUosRUFBQUEsSUFBSThCLE1BQUFvQyxFQUFBQSxFQUFBQSxFQUFBQSxFQUFBQSxDQUFBQSxFQUFBQyxFQUFBLEVBQUFBLEVBQUFELEVBQUFDLElBQUpuRSxFQUFJbUUsRUFBQTNOLENBQUFBLEVBQUFBLFVBQUEyTixDQUFBQSxFQUdoRCxPQURBcEIsRUFBT3FCLE9BQUFBLEdBQVVwRSxDQUFBQSxFQUNWK0MsQ0FDVCxFQ25CTXNCLEdBQ0oscVZBRVdDLEdBQWdCLFVBQUEsQ0FDM0IsSUFBTXpJLEVBQVFyQyxHQUFZLFFBQVMsQ0FBRStLLElBQUssT0FBUTNVLEtBQU0sSUFBSzRVLFFBQVMsT0FBQSxDQUFBLEVBQ2hFQyxFQUFXakwsR0FBWSxXQUFZLENBQUUrSyxJQUFLLE9BQVEzVSxLQUFNLElBQUs0VSxRQUFTLE9BQUEsQ0FBQSxFQUN0RUUsRUFBT2xMLEdBQVksTUFBQSxFQUN6QmtMLEVBQUtoSyxZQUFZbUIsQ0FBQUEsRUFDakI2SSxFQUFLaEssWUFBWStKLENBQUFBLEVBRWpCLElBQU1FLEVBQW1CLFVBQUEsQ0FDdkIsR0FBQSxDQUNFLE9BQU8sSUFBSUMsU0FBU0YsQ0FBQUEsRUFBTUcsSUFBSUosRUFBU0QsT0FBQUEsQ0FDeEMsTUFBQyxDQUNBLE1BQUEsRUFDRixDQUNGLEVBTnlCLEVBUW5CTSxFQUF1QixVQUFBLENBQzNCLEdBQUEsQ0FDRSxPQUFPakosRUFBTTlGLFFBQVEscUJBQUEsQ0FDdEIsTUFBQyxDQUNBLE1BQUEsRUFDRixDQUNGLEVBTjZCLEVBUTdCLE9BQUk0TyxFQUNLLFNBQVNwQyxFQUFBQSxDQUVkLE9BREFrQyxFQUFTOU8sTUFBUTRNLEVBQ1YsSUFBSXFDLFNBQVNGLENBQUFBLEVBQU1LLElBQUlOLEVBQVNELE9BQUFBLENBQUFBLEVBRWhDTSxFQUNGLFNBQVN2QyxFQUFBQSxDQUVkLE9BREExRyxFQUFNbEcsTUFBUTRNLEVBQ1YxRyxFQUFNOUYsUUFBUSxXQUFBLEVBQ1QsTUFFQSxLQUFBLEVBSUosU0FBU3dNLEVBQUFBLENBQ2QsSUFBTUUsRUFBT0YsRUFBT3lDLEtBQUFBLEVBQU94RCxPQUFPLENBQUEsRUFDbEMsT0FBSTZDLEdBQVlyVCxLQUFLeVIsQ0FBQUEsRUFDWixNQUVBLEtBQUEsQ0FJZixFQS9DNkIsRUNKekJ3QyxHQUFvQixLQUNwQkMsR0FBc0IsS0FDdEJDLEdBQXFCLEtBQ3JCQyxHQUFxQixLQUVaQyxHQUF1QkEsS0FDN0JKLEtBQ0hBLEdBQW9CSyxHQUFBQSxFQUF3QjFRLE9BQU8yUSxHQUFBQSxDQUFBQSxHQUU5Q04sSUFHSU8sR0FBa0JDLEdBQWtCQyxHQUF1QkQsQ0FBQUEsRUFFM0RGLEdBQXlCQSxLQUMvQkwsS0FDSEEsR0FBc0JTLE9BQU9DLEtBQUtGLEVBQUFBLEdBRTdCUixJQUdJVyxHQUFpQkosR0FBa0JDLEdBQXNCRCxDQUFBQSxFQUV6REgsR0FBd0JBLEtBQzlCSCxLQUNIQSxHQUFxQlEsT0FBT0MsS0FBS0YsRUFBQUEsR0FFNUJQLElDM0JJVyxHQUE4QixTQUFTN1YsRUFBUzhWLEVBQUFBLENBQ3RDQyxHQUE2Qi9WLENBQUFBLEVBQ3JDc0ssWUFBY3dMLEVBQVcxUSxRQUFRLE1BQU9wRixDQUFBQSxDQUN2RCxFQUVNK1YsR0FBK0IsU0FBUy9WLEVBQUFBLENBQzVDLElBQU1nQixFQUFVNEUsU0FBUzhELGNBQWMsT0FBQSxFQUN2QzFJLEVBQVE2SSxhQUFhLE9BQVEsVUFBQSxFQUM3QjdJLEVBQVE2SSxhQUFhLGdCQUFpQjdKLEVBQVF3QixZQUFBQSxDQUFBQSxFQUM5QyxJQUFNd1UsRUFBUUMsR0FBQUEsRUFLZCxPQUpJRCxHQUNGaFYsRUFBUTZJLGFBQWEsUUFBU21NLENBQUFBLEVBRWhDcFEsU0FBU3NRLEtBQUtDLGFBQWFuVixFQUFTNEUsU0FBU3NRLEtBQUtsTCxVQUFBQSxFQUMzQ2hLLENBQ1QsRUFFTWlWLEdBQWMsVUFBQSxDQUNsQixJQUFNalYsRUFBVW9WLEdBQWUsZ0JBQUEsR0FBcUJBLEdBQWUsV0FBQSxFQUNuRSxHQUFJcFYsRUFBUyxDQUNYLEdBQUEsQ0FBTWdWLE1BQUVBLEVBQUtLLFFBQUVBLENBQUFBLEVBQVlyVixFQUMzQixPQUFPZ1YsR0FBUyxHQUFLSyxFQUFVTCxFQUVuQyxFQUVNSSxHQUFrQnpXLEdBQVNpRyxTQUFTc1EsS0FBS0ksY0FBYTNSLGFBQUFBLE9BQWNoRixFQUFBQSxHQUFBQSxDQUFBQSxFQzNCcEU0VyxHQUFtQixDQUFFLHVDQUF3QyxNQUFBLEVBRXREQyxHQUEwQixTQUFTQyxFQUFBQSxDQUM5QyxJQUFNL1YsRUFBTytWLEVBQWFDLFFBQVEsWUFBQSxFQUM1Qi9RLEVBQU84USxFQUFhQyxRQUFRLFdBQUEsRUFFbEMsR0FBQSxDQUFJaFcsR0FBQUEsQ0FBUWlGLEVBTVYsT0FBT2pGLEdBQU04RixPQU5HLENBQ2hCLEdBQUEsQ0FBTWlHLEtBQUVBLENBQUFBLEVBQVMsSUFBSWtLLFlBQVlDLGdCQUFnQmpSLEVBQU0sV0FBQSxFQUN2RCxHQUFJOEcsRUFBS25DLGNBQWdCNUosRUFDdkIsTUFBQSxDQUFRK0wsRUFBSzZKLGNBQWMsR0FBQSxDQUUvQixDQUdGLEVBd0JhTyxHQUNQLFVBQVU5VixLQUFLVyxVQUFVb1YsUUFBQUEsRUFDbkJqUSxHQUFVQSxFQUFNa1EsUUFFaEJsUSxHQUFVQSxFQUFNbVEsUUMxQ2ZDLEdBQVNDLEdBQU9DLFdBQVdELEVBQUksQ0FBQSxFQ0cvQkUsR0FBYSxVQUFBLENBQXNCLElBQWIzSCxFQUFNbEosVUFBQUMsT0FBQSxHQUFBRCxVQUFBLENBQUEsSUFBQSxPQUFBQSxVQUFBLENBQUEsRUFBRyxDQUFBLEVBQ3BDdU0sRUFBUyxDQUFBLEVBQ2YsUUFBV3JOLEtBQU9nSyxFQUFRLENBQ3hCLElBQU0vSixFQUFRK0osRUFBT2hLLENBQUFBLEVBQ3JCcU4sRUFBT3JOLENBQUFBLEVBQU9DLEVBRWhCLE9BQU9vTixDQUNULEVBRWF1RSxHQUFrQixVQUFBLENBQXlCLElBQWhCckosRUFBQ3pILFVBQUFDLE9BQUEsR0FBQUQsVUFBQSxDQUFBLElBQUEsT0FBQUEsVUFBQSxDQUFBLEVBQUcsQ0FBQSxFQUFJdU4sRUFBQ3ZOLFVBQUFDLE9BQUEsR0FBQUQsVUFBQSxDQUFBLElBQUEsT0FBQUEsVUFBQSxDQUFBLEVBQUcsQ0FBQSxFQUNsRCxHQUFJbVAsT0FBT0MsS0FBSzNILENBQUFBLEVBQUd4SCxTQUFXa1AsT0FBT0MsS0FBSzdCLENBQUFBLEVBQUd0TixPQUMzQyxNQUFBLEdBRUYsUUFBV2YsS0FBT3VJLEVBRWhCLEdBRGNBLEVBQUV2SSxDQUFBQSxJQUNGcU8sRUFBRXJPLENBQUFBLEVBQ2QsTUFBQSxHQUdKLE1BQUEsRUFDRixFQ3JCYTZSLEdBQWlCLFNBQVNDLEVBQUFBLENBQ3JDLEdBQUlBLEdBQVMsS0FLYixPQUhLMUYsTUFBTTJGLFFBQVFELENBQUFBLElBQ2pCQSxFQUFRLENBQUVBLEVBQU9BLENBQUFBLEdBRVosQ0FBRUUsR0FBVUYsRUFBTSxDQUFBLENBQUEsRUFBS0UsR0FBVUYsRUFBTSxDQUFBLEdBQU0sS0FBT0EsRUFBTSxDQUFBLEVBQUtBLEVBQU0sQ0FBQSxDQUFBLENBQUEsQ0FDOUUsRUFFYUcsR0FBbUIsU0FBU0gsRUFBQUEsQ0FDdkMsR0FBSUEsR0FBUyxLQUFNLE9BRW5CLEdBQUEsQ0FBUUksRUFBT0MsQ0FBQUEsRUFBUU4sR0FBZUMsQ0FBQUEsRUFDdEMsT0FBT00sR0FBb0JGLEVBQU9DLENBQUFBLENBQ3BDLEVBRWFFLEdBQWlCLFNBQVNDLEVBQVdDLEVBQUFBLENBQ2hELEdBQUlELEdBQWEsTUFBUUMsR0FBYyxLQUFNLE9BRTdDLEdBQUEsQ0FBUUMsRUFBV0MsQ0FBQUEsRUFBWVosR0FBZVMsQ0FBQUEsRUFBQUEsQ0FDdENJLEVBQVlDLENBQUFBLEVBQWFkLEdBQWVVLENBQUFBLEVBQ2hELE9BQU9ILEdBQW9CSSxFQUFXRSxDQUFBQSxHQUFlTixHQUFvQkssRUFBU0UsQ0FBQUEsQ0FDcEYsRUFFTVgsR0FBWSxTQUFTL1IsRUFBQUEsQ0FDekIsT0FBcUIsT0FBVkEsR0FBVSxTQUNaQSxFQUVBMFIsR0FBVzFSLENBQUFBLENBRXRCLEVBRU1tUyxHQUFzQixTQUFTUSxFQUFNQyxFQUFBQSxDQUN6QyxPQUFvQixPQUFURCxHQUFTLFNBQ1hBLElBQVNDLEVBRVRqQixHQUFnQmdCLEVBQU1DLENBQUFBLENBRWpDLEVDdENxQkMsR0FBTixjQUFzQ3JKLEVBQUFBLENBQ25EMkIsYUFBQUEsQ0FDRUMsTUFBQUEsR0FBU3ZLLFNBQUFBLEVBQ1RyRixLQUFLc1gsT0FBU3RYLEtBQUtzWCxPQUFPQyxLQUFLdlgsSUFBQUEsRUFDL0JBLEtBQUt3WCxrQkFBb0IsQ0FBQSxDQUMzQixDQUVBZixPQUFBQSxDQUNPelcsS0FBS3lYLFVBQ1J6WCxLQUFLeVgsUUFBQUEsR0FDTC9TLFNBQVN1QixpQkFBaUIsa0JBQW1CakcsS0FBS3NYLE9BQUFBLEVBQVEsRUFFOUQsQ0FFQUksTUFBQUEsQ0FDRSxHQUFJMVgsS0FBS3lYLFFBRVAsT0FEQXpYLEtBQUt5WCxRQUFBQSxHQUNFL1MsU0FBU3NCLG9CQUFvQixrQkFBbUJoRyxLQUFLc1gsT0FBQUEsRUFBUSxDQUV4RSxDQUVBSyx5QkFBeUJDLEVBQUFBLENBQ3ZCLEdBQUEsQ0FBSzVYLEtBQUt3WCxrQkFBa0J2TixTQUFTMk4sQ0FBQUEsRUFFbkMsT0FEQTVYLEtBQUt3WCxrQkFBa0I3TixLQUFLaU8sQ0FBQUEsRUFDckI1WCxLQUFLeVcsTUFBQUEsQ0FFaEIsQ0FFQW9CLDJCQUEyQkQsRUFBQUEsQ0FFekIsR0FEQTVYLEtBQUt3WCxrQkFBb0J4WCxLQUFLd1gsa0JBQWtCTSxPQUFRQyxHQUFPQSxJQUFPSCxDQUFBQSxFQUNsRTVYLEtBQUt3WCxrQkFBa0JsUyxTQUFXLEVBQ3BDLE9BQU90RixLQUFLMFgsS0FBQUEsQ0FFaEIsQ0FFQU0sMENBQUFBLENBQ0UsT0FBT2hZLEtBQUt3WCxrQkFBa0JuRyxJQUFLdUcsR0FBcUJBLEVBQWlCSyxtQkFBQUEsQ0FBQUEsQ0FDM0UsQ0FFQVgsUUFBQUEsQ0FDRXRYLEtBQUtnWSx5Q0FBQUEsQ0FDUCxDQUVBRSxPQUFBQSxDQUNFbFksS0FBS3NYLE9BQUFBLENBQ1AsQ0FBQSxFQUdXYSxHQUEwQixJQUFJZCxHQUU5QmUsR0FBa0IsVUFBQSxDQUM3QixJQUFNQyxFQUFZdE0sT0FBT3VNLGFBQUFBLEVBQ3pCLEdBQUlELEVBQVVFLFdBQWEsRUFDekIsT0FBT0YsQ0FFWCxFQUVhRyxHQUFjLFVBQUEsQ0FBVyxJQUFBQyxFQUNwQyxJQUFNQyxHQUFRRCxFQUFHTCxHQUFBQSxLQUFpQkssTUFBQUEsSUFBakJMLE9BQWlCSyxPQUFqQkEsRUFBbUJFLFdBQVcsQ0FBQSxFQUMvQyxHQUFJRCxHQUFBQSxDQUNHRSxHQUFrQkYsQ0FBQUEsRUFDckIsT0FBT0EsQ0FHYixFQUVhRyxHQUFjLFNBQVNILEVBQUFBLENBQ2xDLElBQU1MLEVBQVl0TSxPQUFPdU0sYUFBQUEsRUFHekIsT0FGQUQsRUFBVVMsZ0JBQUFBLEVBQ1ZULEVBQVVVLFNBQVNMLENBQUFBLEVBQ1pQLEdBQXdCYixPQUFBQSxDQUNqQyxFQU1Nc0IsR0FBcUJGLEdBQWFNLEdBQWNOLEVBQVNPLGNBQUFBLEdBQW1CRCxHQUFjTixFQUFTUSxZQUFBQSxFQUVuR0YsR0FBaUJ0UyxHQUFBQSxDQUFVOE4sT0FBTzJFLGVBQWV6UyxDQUFBQSxFQzFFMUMwUyxHQUFtQmhJLEdBQzlCQSxFQUFPbE4sUUFBUSxJQUFJNkssT0FBTSxHQUFBdEwsT0FBSVUsRUFBQUEsRUFBb0IsR0FBQSxFQUFNLEVBQUEsRUFBSUQsUUFBUSxJQUFJNkssT0FBTSxHQUFBdEwsT0FBSVcsRUFBQUEsRUFBc0IsR0FBQSxFQUFNLEdBQUEsRUFJbEdpVixHQUE2QixJQUFJdEssT0FBQUEsUUFBTXRMLE9BQVNXLEdBQWtCLEdBQUEsQ0FBQSxFQUVsRWtWLEdBQTZCbEksR0FDeENBLEVBRUdsTixRQUFRLElBQUk2SyxPQUFBQSxHQUFNdEwsT0FBSTRWLEdBQTJCRSxNQUFBQSxFQUFVLEdBQUEsRUFBTSxHQUFBLEVBRWpFclYsUUFBUSxVQUFXLEdBQUEsRUFnQmxCc1YsR0FBeUIsU0FBUzFNLEVBQUc4RixFQUFBQSxDQUN6QyxHQUFJOUYsRUFBRXdELFVBQVVzQyxDQUFBQSxFQUNkLE1BQU8sQ0FBRSxHQUFJLEVBQUEsRUFHZixJQUFNNkcsRUFBUUMsR0FBc0I1TSxFQUFHOEYsQ0FBQUEsRUFBQUEsQ0FDakN0TixPQUFFQSxDQUFBQSxFQUFXbVUsRUFBTUUsWUFFckJDLEVBRUosR0FBSXRVLEVBQVEsQ0FDVixHQUFBLENBQU15SyxPQUFFQSxDQUFBQSxFQUFXMEosRUFDYmhLLEVBQWEzQyxFQUFFMkMsV0FBV08sTUFBTSxFQUFHRCxDQUFBQSxFQUFRdE0sT0FBT3FKLEVBQUUyQyxXQUFXTyxNQUFNRCxFQUFTekssQ0FBQUEsQ0FBQUEsRUFDcEZzVSxFQUFRRixHQUFzQjlHLEVBQUd6RCxHQUFZaUIsZUFBZVgsQ0FBQUEsQ0FBQUEsT0FFNURtSyxFQUFRRixHQUFzQjlHLEVBQUc5RixDQUFBQSxFQUduQyxNQUFPLENBQUUyTSxFQUFNRSxZQUFZckssU0FBQUEsRUFBWXNLLEVBQU1ELFlBQVlySyxTQUFBQSxDQUFBQSxDQUMzRCxFQUVNb0ssR0FBd0IsU0FBUzVNLEVBQUc4RixFQUFBQSxDQUN4QyxJQUFJaUgsRUFBWSxFQUNaQyxFQUFjaE4sRUFBRXhILE9BQ2hCeVUsRUFBY25ILEVBQUV0TixPQUVwQixLQUFPdVUsRUFBWUMsR0FBZWhOLEVBQUV1RCxPQUFPd0osQ0FBQUEsRUFBV3ZKLFVBQVVzQyxFQUFFdkMsT0FBT3dKLENBQUFBLENBQUFBLEdBQ3ZFQSxJQUdGLEtBQU9DLEVBQWNELEVBQVksR0FBSy9NLEVBQUV1RCxPQUFPeUosRUFBYyxDQUFBLEVBQUd4SixVQUFVc0MsRUFBRXZDLE9BQU8wSixFQUFjLENBQUEsQ0FBQSxHQUMvRkQsSUFDQUMsSUFHRixNQUFPLENBQ0xKLFlBQWE3TSxFQUFFa0QsTUFBTTZKLEVBQVdDLENBQUFBLEVBQ2hDL0osT0FBUThKLENBQUFBLENBRVosRUN2RXFCRyxHQUFOLGNBQW1CakksRUFBQUEsQ0FDaEMsT0FBQSwrQkFBT2tJLENBQTRDLElBQWRDLEVBQU83VSxVQUFBQyxPQUFBLEdBQUFELFVBQUEsQ0FBQSxJQUFBLE9BQUFBLFVBQUEsQ0FBQSxFQUFHLENBQUEsRUFDN0MsR0FBQSxDQUFLNlUsRUFBUTVVLE9BQ1gsT0FBTyxJQUFJdEYsS0FFYixJQUFJbWEsRUFBTy9LLEdBQUk4SyxFQUFRLENBQUEsQ0FBQSxFQUNuQnpGLEVBQU8wRixFQUFLQyxRQUFBQSxFQU9oQixPQUxBRixFQUFRbEssTUFBTSxDQUFBLEVBQUcvRyxRQUFTc0YsR0FBQUEsQ0FDeEJrRyxFQUFPMEYsRUFBS0Usb0JBQW9CakwsR0FBSWIsQ0FBQUEsQ0FBQUEsRUFDcEM0TCxFQUFPQSxFQUFLbkssTUFBTXlFLENBQUFBLENBQUssQ0FBQSxFQUdsQjBGLENBQ1QsQ0FFQSxPQUFBLElBQVdHLEVBQUFBLENBQ1QsT0FBT2xMLEdBQUlrTCxDQUFBQSxDQUNiLENBRUEzSyxhQUFBQSxDQUF5QixJQUFiMkssRUFBTWpWLFVBQUFDLE9BQUEsR0FBQUQsVUFBQSxDQUFBLElBQUEsT0FBQUEsVUFBQSxDQUFBLEVBQUcsQ0FBQSxFQUNuQnVLLE1BQUFBLEdBQVN2SyxTQUFBQSxFQUNUckYsS0FBS3NhLE9BQVNDLEdBQUtELENBQUFBLENBQ3JCLENBRUFuUixJQUFJNUUsRUFBS0MsRUFBQUEsQ0FDUCxPQUFPeEUsS0FBS3dhLE1BQU1qTSxHQUFPaEssRUFBS0MsQ0FBQUEsQ0FBQUEsQ0FDaEMsQ0FFQWhDLE9BQU8rQixFQUFBQSxDQUNMLE9BQU8sSUFBSXlWLEdBQUtPLEdBQUt2YSxLQUFLc2EsT0FBUS9WLENBQUFBLENBQUFBLENBQ3BDLENBRUFxUCxJQUFJclAsRUFBQUEsQ0FDRixPQUFPdkUsS0FBS3NhLE9BQU8vVixDQUFBQSxDQUNyQixDQUVBbVAsSUFBSW5QLEVBQUFBLENBQ0YsT0FBT0EsS0FBT3ZFLEtBQUtzYSxNQUNyQixDQUVBRSxNQUFNRixFQUFBQSxDQUNKLE9BQU8sSUFBSU4sR0FBS1EsR0FBTXhhLEtBQUtzYSxPQUFRRyxHQUFNSCxDQUFBQSxDQUFBQSxDQUFBQSxDQUMzQyxDQUVBdEssTUFBTXlFLEVBQUFBLENBQ0osSUFBTTZGLEVBQVMsQ0FBQSxFQVFmLE9BTkEzSixNQUFNQyxLQUFLNkQsQ0FBQUEsRUFBTXhMLFFBQVMxRSxHQUFBQSxDQUNwQnZFLEtBQUswVCxJQUFJblAsQ0FBQUEsSUFDWCtWLEVBQU8vVixDQUFBQSxFQUFPdkUsS0FBS3NhLE9BQU8vVixDQUFBQSxFQUM1QixDQUFBLEVBR0ssSUFBSXlWLEdBQUtNLENBQUFBLENBQ2xCLENBRUFGLFNBQUFBLENBQ0UsT0FBTzVGLE9BQU9DLEtBQUt6VSxLQUFLc2EsTUFBQUEsQ0FDMUIsQ0FFQUQsb0JBQW9CRixFQUFBQSxDQUVsQixPQURBQSxFQUFPL0ssR0FBSStLLENBQUFBLEVBQ0puYSxLQUFLb2EsUUFBQUEsRUFBVXRDLE9BQVF2VCxHQUFRdkUsS0FBS3NhLE9BQU8vVixDQUFBQSxJQUFTNFYsRUFBS0csT0FBTy9WLENBQUFBLENBQUFBLENBQ3pFLENBRUErTCxVQUFVZ0ssRUFBQUEsQ0FDUixPQUFPM0gsR0FBZTNTLEtBQUswYSxRQUFBQSxFQUFXdEwsR0FBSWtMLENBQUFBLEVBQVFJLFFBQUFBLENBQUFBLENBQ3BELENBRUFDLFNBQUFBLENBQ0UsT0FBTzNhLEtBQUtvYSxRQUFBQSxFQUFVOVUsU0FBVyxDQUNuQyxDQUVBb1YsU0FBQUEsQ0FDRSxHQUFBLENBQUsxYSxLQUFLMlIsTUFBTyxDQUNmLElBQU1DLEVBQVMsQ0FBQSxFQUNmLFFBQVdyTixLQUFPdkUsS0FBS3NhLE9BQVEsQ0FDN0IsSUFBTTlWLEVBQVF4RSxLQUFLc2EsT0FBTy9WLENBQUFBLEVBQzFCcU4sRUFBT2pJLEtBQUtpSSxFQUFPakksS0FBS3BGLEVBQUtDLENBQUFBLENBQUFBLEVBRS9CeEUsS0FBSzJSLE1BQVFDLEVBQU81QixNQUFNLENBQUEsRUFHNUIsT0FBT2hRLEtBQUsyUixLQUNkLENBRUFpSixVQUFBQSxDQUNFLE9BQU9MLEdBQUt2YSxLQUFLc2EsTUFBQUEsQ0FDbkIsQ0FFQS9KLFFBQUFBLENBQ0UsT0FBT3ZRLEtBQUs0YSxTQUFBQSxDQUNkLENBRUFySSx1QkFBQUEsQ0FDRSxNQUFPLENBQUUrSCxPQUFRcEksS0FBS08sVUFBVXpTLEtBQUtzYSxNQUFBQSxDQUFBQSxDQUN2QyxDQUFBLEVBR0kvTCxHQUFTLFNBQVNoSyxFQUFLQyxFQUFBQSxDQUMzQixJQUFNb04sRUFBUyxDQUFBLEVBRWYsT0FEQUEsRUFBT3JOLENBQUFBLEVBQU9DLEVBQ1BvTixDQUNULEVBRU00SSxHQUFRLFNBQVNqTSxFQUFRK0wsRUFBQUEsQ0FDN0IsSUFBTTFJLEVBQVMySSxHQUFLaE0sQ0FBQUEsRUFDcEIsUUFBV2hLLEtBQU8rVixFQUFRLENBQ3hCLElBQU05VixFQUFROFYsRUFBTy9WLENBQUFBLEVBQ3JCcU4sRUFBT3JOLENBQUFBLEVBQU9DLEVBRWhCLE9BQU9vTixDQUNULEVBRU0ySSxHQUFPLFNBQVNoTSxFQUFRc00sRUFBQUEsQ0FDNUIsSUFBTWpKLEVBQVMsQ0FBQSxFQVNmLE9BUm1CNEMsT0FBT0MsS0FBS2xHLENBQUFBLEVBQVF1TSxLQUFBQSxFQUU1QjdSLFFBQVMxRSxHQUFBQSxDQUNkQSxJQUFRc1csSUFDVmpKLEVBQU9yTixDQUFBQSxFQUFPZ0ssRUFBT2hLLENBQUFBLEVBQ3ZCLENBQUEsRUFHS3FOLENBQ1QsRUFFTXhDLEdBQU0sU0FBU2IsRUFBQUEsQ0FDbkIsT0FBSUEsYUFBa0J5TCxHQUNiekwsRUFFQSxJQUFJeUwsR0FBS3pMLENBQUFBLENBRXBCLEVBRU1rTSxHQUFRLFNBQVNsTSxFQUFBQSxDQUNyQixPQUFJQSxhQUFrQnlMLEdBQ2J6TCxFQUFPK0wsT0FFUC9MLENBRVgsRUNqSnFCd00sR0FBTixLQUFNQSxDQUNuQixPQUFBLGNBQU9DLENBQTRELElBQzdEM2IsRUFEYzRiLEVBQWdCNVYsVUFBQUMsT0FBQSxHQUFBRCxVQUFBLENBQUEsSUFBQSxPQUFBQSxVQUFBLENBQUEsRUFBRyxDQUFBLEVBQUEsQ0FBSTZWLE1BQUVBLEVBQUtDLE9BQUVBLENBQUFBLEVBQVE5VixVQUFBQyxPQUFBRCxHQUFBQSxVQUFBRSxDQUFBQSxJQUFBRixPQUFBQSxVQUFHLENBQUEsRUFBQSxDQUFBLEVBRXpEOFYsR0FDRUQsR0FBUyxPQUNYQSxFQUFRLEdBR1osSUFBTWhCLEVBQVUsQ0FBQSxFQXVCaEIsT0FyQkF2SixNQUFNQyxLQUFLcUssQ0FBQUEsRUFBa0JoUyxRQUFTc0YsR0FBQUEsQ0FBVyxJQUFBNk0sRUFDL0MsR0FBSS9iLEVBQU8sQ0FBQSxJQUFBZ2MsRUFBQUMsRUFBQUMsRUFDVCxJQUFJRixFQUFBOU0sRUFBT2lOLGdCQUFZLE1BQUFILElBQVpHLFFBQVBILEVBQUF0VixLQUFBd0ksRUFBc0IyTSxDQUFBQSxJQUFNSSxHQUFJQyxFQUFBbGMsRUFBTUEsRUFBTWlHLE9BQVMsQ0FBQSxHQUFHbVcsb0JBQWdCSCxNQUFBQSxJQUFoQkcsUUFBeEJILEVBQUF2VixLQUFBd1YsRUFBMkNoTixFQUFRMk0sQ0FBQUEsRUFFckYsT0FBQSxLQURBN2IsRUFBTXNLLEtBQUs0RSxDQUFBQSxFQUdYMkwsRUFBUXZRLEtBQUssSUFBSTNKLEtBQUtYLEVBQU8sQ0FBRTZiLE1BQUFBLEVBQU9DLE9BQUFBLENBQUFBLENBQUFBLENBQUFBLEVBQ3RDOWIsRUFBUSxNQUlaK2IsRUFBSTdNLEVBQU9pTixnQkFGWCxNQUV1QkosSUFBWkksUUFBUEosRUFBQXJWLEtBQUF3SSxFQUFzQjJNLENBQUFBLEVBQ3hCN2IsRUFBUSxDQUFFa1AsQ0FBQUEsRUFFVjJMLEVBQVF2USxLQUFLNEUsQ0FBQUEsQ0FDZixDQUFBLEVBR0VsUCxHQUNGNmEsRUFBUXZRLEtBQUssSUFBSTNKLEtBQUtYLEVBQU8sQ0FBRTZiLE1BQUFBLEVBQU9DLE9BQUFBLENBQUFBLENBQUFBLENBQUFBLEVBRWpDakIsQ0FDVCxDQUVBdkssYUFBQUEsQ0FBNkMsSUFBakN1SyxFQUFPN1UsVUFBQUMsT0FBQSxHQUFBRCxVQUFBLENBQUEsSUFBQSxPQUFBQSxVQUFBLENBQUEsRUFBRyxDQUFBLEVBQUEsQ0FBSTZWLE1BQUVBLEVBQUtDLE9BQUVBLENBQUFBLEVBQVE5VixVQUFBQyxPQUFBRCxFQUFBQSxVQUFBQSxDQUFBQSxFQUFBQSxPQUN6Q3JGLEtBQUtrYSxRQUFVQSxFQUNYaUIsSUFDRm5iLEtBQUtrYixNQUFRQSxFQUNibGIsS0FBS2thLFFBQVVsYSxLQUFLMlAsWUFBWXFMLGFBQWFoYixLQUFLa2EsUUFBUyxDQUFFaUIsT0FBQUEsRUFBUUQsTUFBT2xiLEtBQUtrYixNQUFRLENBQUEsQ0FBQSxFQUU3RixDQUVBUSxZQUFBQSxDQUNFLE9BQU8xYixLQUFLa2EsT0FDZCxDQUVBeUIsVUFBQUEsQ0FDRSxPQUFPM2IsS0FBS2tiLEtBQ2QsQ0FFQTFLLGFBQUFBLENBQ0UsSUFBTWlFLEVBQU8sQ0FBRSxhQUFBLEVBSWYsT0FIQTlELE1BQU1DLEtBQUs1USxLQUFLMGIsV0FBQUEsQ0FBQUEsRUFBY3pTLFFBQVNzRixHQUFBQSxDQUNyQ2tHLEVBQUs5SyxLQUFLNEUsRUFBT2lDLFlBQUFBLENBQUFBLENBQWMsQ0FBQSxFQUUxQmlFLEVBQUszQyxLQUFLLEdBQUEsQ0FDbkIsQ0FBQSxFQ3REbUI4SixHQUFOLGNBQXdCNU4sRUFBQUEsQ0FDckMyQixhQUFBQSxDQUEwQixJQUFkdUssRUFBTzdVLFVBQUFDLE9BQUEsR0FBQUQsVUFBQSxDQUFBLElBQUEsT0FBQUEsVUFBQSxDQUFBLEVBQUcsQ0FBQSxFQUNwQnVLLE1BQUFBLEdBQVN2SyxTQUFBQSxFQUNUckYsS0FBS2thLFFBQVUsQ0FBQSxFQUVmdkosTUFBTUMsS0FBS3NKLENBQUFBLEVBQVNqUixRQUFTc0YsR0FBQUEsQ0FDM0IsSUFBTTRMLEVBQU9qSSxLQUFLTyxVQUFVbEUsQ0FBQUEsRUFDeEJ2TyxLQUFLa2EsUUFBUUMsQ0FBQUEsR0FBUyxPQUN4Qm5hLEtBQUtrYSxRQUFRQyxDQUFBQSxFQUFRNUwsRUFDdkIsQ0FBQSxDQUVKLENBRUFzTixLQUFLdE4sRUFBQUEsQ0FDSCxJQUFNNEwsRUFBT2pJLEtBQUtPLFVBQVVsRSxDQUFBQSxFQUM1QixPQUFPdk8sS0FBS2thLFFBQVFDLENBQUFBLENBQ3RCLENBQUEsRUNsQm1CMkIsR0FBTixLQUFNQSxDQUNuQm5NLFlBQVlvTSxFQUFBQSxDQUNWL2IsS0FBS2tZLE1BQU02RCxDQUFBQSxDQUNiLENBRUE1UyxJQUFJckosRUFBQUEsQ0FDRixJQUFNeUUsRUFBTXlYLEdBQU9sYyxDQUFBQSxFQUNuQkUsS0FBSytiLFNBQVN4WCxDQUFBQSxFQUFPekUsQ0FDdkIsQ0FFQTBDLE9BQU8xQyxFQUFBQSxDQUNMLElBQU15RSxFQUFNeVgsR0FBT2xjLENBQUFBLEVBQ2IwRSxFQUFReEUsS0FBSytiLFNBQVN4WCxDQUFBQSxFQUM1QixHQUFJQyxFQUVGLE9BQUEsT0FET3hFLEtBQUsrYixTQUFTeFgsQ0FBQUEsRUFDZEMsQ0FFWCxDQUVBMFQsT0FBQUEsQ0FBcUIsSUFBZjZELEVBQVExVyxVQUFBQyxPQUFBLEdBQUFELFVBQUEsQ0FBQSxJQUFBLE9BQUFBLFVBQUEsQ0FBQSxFQUFHLENBQUEsRUFLZixPQUpBckYsS0FBSytiLFNBQVcsQ0FBQSxFQUNoQnBMLE1BQU1DLEtBQUttTCxDQUFBQSxFQUFVOVMsUUFBU25KLEdBQUFBLENBQzVCRSxLQUFLbUosSUFBSXJKLENBQUFBLENBQVEsQ0FBQSxFQUVaaWMsQ0FDVCxDQUFBLEVBR0lDLEdBQVVsYyxHQUFZQSxFQUFRZ0osUUFBUW1ULGFDMUJ2QkMsR0FBTixjQUF3QmxPLEVBQUFBLENBQ3JDbU8sY0FBQUEsQ0FDRSxPQUFPbmMsS0FBS29jLGFBQVosRUFDRixDQUVBQyxjQUFBQSxDQUNFLE9BQU9yYyxLQUFLc2MsWUFBWixFQUNGLENBRUFDLGNBQUFBLENBQ0UsT0FBT3ZjLEtBQUtzYyxXQUFhdGMsS0FBS3djLFNBQ2hDLENBRUFDLFdBQUFBLENBQ0UsT0FBT3pjLEtBQUtzYyxXQUFBQSxDQUFjdGMsS0FBS3djLFNBQ2pDLENBRUFFLFlBQUFBLENBa0JFLE9BakJLMWMsS0FBSzJjLFVBQ1IzYyxLQUFLMmMsUUFBVSxJQUFJQyxRQUFRLENBQUNDLEVBQVNDLEtBQ25DOWMsS0FBS29jLFdBQUFBLEdBQ0VwYyxLQUFLK2MsUUFBUSxDQUFDUCxFQUFXNUssSUFBQUEsQ0FDOUI1UixLQUFLd2MsVUFBWUEsRUFDakJ4YyxLQUFLb2MsV0FBQUEsR0FDTHBjLEtBQUtzYyxVQUFBQSxHQUVEdGMsS0FBS3djLFVBQ1BLLEVBQVFqTCxDQUFBQSxFQUVSa0wsRUFBT2xMLENBQUFBLENBQ1QsQ0FBQSxFQUFBLEdBS0M1UixLQUFLMmMsT0FDZCxDQUVBSSxRQUFRaFMsRUFBQUEsQ0FDTixPQUFPQSxFQUFBQSxFQUFTLENBQ2xCLENBRUFpUyxTQUFBQSxDQUFVLElBQUFDLEVBQUFDLEdBQ1JELEVBQUFBLEtBQUtOLFdBREdPLE1BQ0lELElBQVBOLFNBQU9PLEVBQVpELEVBQWNFLFVBQU0sTUFBQUQsSUFBTkMsUUFBZEQsRUFBQW5YLEtBQUFrWCxDQUFBQSxFQUNBamQsS0FBSzJjLFFBQVUsS0FDZjNjLEtBQUtvYyxXQUFhLEtBQ2xCcGMsS0FBS3NjLFVBQVksS0FDakJ0YyxLQUFLd2MsVUFBWSxJQUNuQixDQUFBLEVBR0ZOLEdBQVVrQixZQUFZLG1CQUFBLEVBQ3RCbEIsR0FBVWtCLFlBQVksb0JBQUEsRUNuRFAsSUFBTUMsR0FBTixjQUF5QnJQLEVBQUFBLENBQ3RDMkIsWUFBWXBCLEVBQUFBLENBQXNCLElBQWRoRyxFQUFPbEQsVUFBQUMsT0FBQSxHQUFBRCxVQUFBLENBQUEsSUFBQSxPQUFBQSxVQUFBLENBQUEsRUFBRyxDQUFBLEVBQzVCdUssTUFBQUEsR0FBU3ZLLFNBQUFBLEVBQ1RyRixLQUFLdU8sT0FBU0EsRUFDZHZPLEtBQUt1SSxRQUFVQSxFQUNmdkksS0FBS3NkLFdBQWEsQ0FBQSxFQUNsQnRkLEtBQUt1ZCxTQUFXdmQsSUFDbEIsQ0FFQXdkLFVBQUFBLENBRUUsT0FES3hkLEtBQUt5ZCxRQUFTemQsS0FBS3lkLE1BQVF6ZCxLQUFLMGQsWUFBQUEsR0FDOUIxZCxLQUFLeWQsTUFBTXBNLElBQUszSyxHQUFTQSxFQUFLaVgsVUFBQUEsRUFBVSxDQUFBLENBQ2pELENBRUFDLFlBQUFBLENBQWEsSUFBQUMsRUFHWCxPQUZBN2QsS0FBS3lkLE1BQVEsS0FDYnpkLEtBQUtzZCxXQUFhLENBQUEsR0FDbEJPLEVBQU83ZCxLQUFLOGQsY0FBVSxNQUFBRCxJQUFWQyxPQUFVRCxPQUFmQSxFQUFpQkQsV0FBQUEsQ0FDMUIsQ0FFQUcsd0JBQXdCeFAsRUFBQUEsQ0FBUSxJQUFBeVAsRUFDOUIsT0FBQUEsRUFBT2hlLEtBQUtpZSxrQkFBa0IxUCxDQUFBQSxLQUFPLE1BQUF5UCxJQUFQelAsT0FBT3lQLE9BQTlCQSxFQUFnQ0osV0FBQUEsQ0FDekMsQ0FFQU0sNEJBQTRCQyxFQUFXNVAsRUFBUWhHLEVBQUFBLENBQzdDLElBQUk2VixFQUFPcGUsS0FBS3FlLHVCQUF1QjlQLENBQUFBLEVBT3ZDLE9BTkk2UCxFQUNGcGUsS0FBS3NlLGdCQUFnQkYsQ0FBQUEsR0FFckJBLEVBQU9wZSxLQUFLdWUsZ0JBQUFBLEdBQW1CbFosU0FBQUEsRUFDL0JyRixLQUFLd2UsbUJBQW1CSixFQUFNN1AsQ0FBQUEsR0FFekI2UCxDQUNULENBRUFHLGdCQUFnQkosRUFBVzVQLEVBQUFBLENBQXNCLElBQWRoRyxFQUFPbEQsVUFBQUMsT0FBQSxHQUFBRCxVQUFBLENBQUEsSUFBQSxPQUFBQSxVQUFBLENBQUEsRUFBRyxDQUFBLEVBQ3ZDa0osYUFBa0J3TSxLQUNwQnhTLEVBQVE0VixVQUFZQSxFQUNwQkEsRUFBWU0sSUFHZCxJQUFNTCxFQUFPLElBQUlELEVBQVU1UCxFQUFRaEcsQ0FBQUEsRUFDbkMsT0FBT3ZJLEtBQUtzZSxnQkFBZ0JGLENBQUFBLENBQzlCLENBRUFFLGdCQUFnQkYsRUFBQUEsQ0FJZCxPQUhBQSxFQUFLTixXQUFhOWQsS0FDbEJvZSxFQUFLYixTQUFXdmQsS0FBS3VkLFNBQ3JCdmQsS0FBS3NkLFdBQVczVCxLQUFLeVUsQ0FBQUEsRUFDZEEsQ0FDVCxDQUVBTSxrQkFBQUEsQ0FDRSxJQUFJQyxFQUFRLENBQUEsRUFPWixPQUxBM2UsS0FBS3NkLFdBQVdyVSxRQUFTMlYsR0FBQUEsQ0FDdkJELEVBQU1oVixLQUFLaVYsQ0FBQUEsRUFDWEQsRUFBUUEsRUFBTWxiLE9BQU9tYixFQUFVRixpQkFBQUEsQ0FBQUEsQ0FBbUIsQ0FBQSxFQUc3Q0MsQ0FDVCxDQUVBRSxhQUFBQSxDQUNFLE9BQU83ZSxLQUFLOGUscUJBQXFCOWUsS0FBS3VPLE1BQUFBLENBQ3hDLENBRUF1USxxQkFBcUJ2USxFQUFBQSxDQUNuQixJQUFNcEQsRUFBS29ELEdBQVFwRCxHQUNuQixHQUFJQSxFQUNGLE9BQU9uTCxLQUFLdWQsU0FBU3pkLFFBQVFzVixjQUFhLGtCQUFBM1IsT0FBbUIwSCxFQUFFLElBQUEsQ0FBQSxDQUVuRSxDQUVBOFMsa0JBQWtCMVAsRUFBQUEsQ0FDaEIsUUFBVzZQLEtBQVFwZSxLQUFLMGUsaUJBQUFBLEVBQ3RCLEdBQUlOLEVBQUs3UCxTQUFXQSxFQUNsQixPQUFPNlAsQ0FHYixDQUVBVyxjQUFBQSxDQUNFLE9BQUkvZSxLQUFLdWQsV0FBYXZkLEtBTWJBLEtBQUt1ZCxTQUFTd0IsYUFBQUEsRUFMakIvZSxLQUFLZ2YscUJBQUFBLEdBQ0ZoZixLQUFLaWYsWUFBYWpmLEtBQUtpZixVQUFZLENBQUEsR0FDakNqZixLQUFLaWYsV0FBQUEsTUFLbEIsQ0FFQUQsc0JBQUFBLENBQ0UsT0FBT2hmLEtBQUtrZixtQkFBWixFQUNGLENBRUFDLG1CQUFBQSxDQUNFbmYsS0FBS2tmLGlCQUFBQSxFQUNQLENBRUFFLG9CQUFBQSxDQUNFcGYsS0FBS2tmLGlCQUFBQSxFQUNQLENBRUFiLHVCQUF1QjlQLEVBQUFBLENBQVEsSUFBQThRLEVBQzdCLE9BQUFBLEVBQU9yZixLQUFLK2UsYUFBQUEsS0FBYyxNQUFBTSxJQUFkTixPQUFjTSxPQUFuQkEsRUFBc0I5USxFQUFPaUMsWUFBQUEsQ0FBQUEsQ0FDdEMsQ0FFQWdPLG1CQUFtQkosRUFBTTdQLEVBQUFBLENBQ3ZCLElBQU0rUSxFQUFRdGYsS0FBSytlLGFBQUFBLEVBQ2ZPLElBQ0ZBLEVBQU0vUSxFQUFPaUMsWUFBQUEsQ0FBQUEsRUFBaUI0TixFQUVsQyxDQUVBbUIsMkJBQUFBLENBQ0UsSUFBTUQsRUFBUXRmLEtBQUsrZSxhQUFBQSxFQUNuQixHQUFJTyxFQUFPLENBQ1QsSUFDTUUsRUFEUXhmLEtBQUswZSxpQkFBQUEsRUFBbUJqYixPQUFPekQsSUFBQUEsRUFDcEJxUixJQUFLK00sR0FBU0EsRUFBSzdQLE9BQU9pQyxZQUFBQSxDQUFBQSxFQUNuRCxRQUFXak0sS0FBTythLEVBQ1hFLEVBQVd2VixTQUFTMUYsQ0FBQUEsR0FBQUEsT0FDaEIrYSxFQUFNL2EsQ0FBQUEsRUFJckIsQ0FBQSxFQUdXa2EsR0FBTixjQUE4QnBCLEVBQUFBLENBQ25DMU4sYUFBQUEsQ0FDRUMsTUFBQUEsR0FBU3ZLLFNBQUFBLEVBQ1RyRixLQUFLeWYsWUFBY3pmLEtBQUt1TyxPQUN4QnZPLEtBQUttZSxVQUFZbmUsS0FBS3VJLFFBQVE0VixVQUFBQSxPQUN2Qm5lLEtBQUt1SSxRQUFRNFYsU0FDdEIsQ0FFQXVCLGVBQUFBLENBTUUsT0FMSzFmLEtBQUtzZCxXQUFXaFksUUFDbkJxTCxNQUFNQyxLQUFLNVEsS0FBS3lmLFlBQVkvRCxXQUFBQSxDQUFBQSxFQUFjelMsUUFBU3NGLEdBQUFBLENBQ2pEdk8sS0FBS2tlLDRCQUE0QmxlLEtBQUttZSxVQUFXNVAsRUFBUXZPLEtBQUt1SSxPQUFBQSxDQUFRLENBQUEsRUFHbkV2SSxLQUFLc2QsVUFDZCxDQUVBSSxhQUFBQSxDQUNFLElBQU01ZCxFQUFVRSxLQUFLMmYsdUJBQUFBLEVBUXJCLE9BTkEzZixLQUFLMGYsY0FBQUEsRUFBZ0J6VyxRQUFTbVYsR0FBQUEsQ0FDNUJ6TixNQUFNQyxLQUFLd04sRUFBS1osU0FBQUEsQ0FBQUEsRUFBWXZVLFFBQVN2QyxHQUFBQSxDQUNuQzVHLEVBQVF5SixZQUFZN0MsQ0FBQUEsQ0FBSyxDQUFBLENBQ3pCLENBQUEsRUFHRyxDQUFFNUcsQ0FBQUEsQ0FDWCxDQUVBNmYsd0JBQUFBLENBQTRELElBQXJDekUsRUFBSzdWLFVBQUFDLE9BQUEsR0FBQUQsVUFBQUUsQ0FBQUEsSUFBQSxPQUFBRixVQUFBQSxDQUFBQSxFQUFHckYsS0FBS3lmLFlBQVk5RCxTQUFBQSxFQUM5QyxPQUFPM2IsS0FBSzBmLGNBQUFBLEVBQWdCLENBQUEsRUFBR0MsdUJBQXVCekUsQ0FBQUEsQ0FDeEQsQ0FBQTsrckJDOUpGMEUsR0FBVUMsUUFBUSx3QkFBeUIsU0FBVW5aLEVBQU1tQyxFQUFBQSxDQUN6QixjQUNKaEosS0FBS2dKLEVBQUtpWCxRQUFBQSxJQUNwQ2pYLEVBQUtrWCxjQUFBQSxHQUVULENBQUEsRUFFQSxJQUFNQyxHQUE2Qiw2Q0FBNkNoWCxNQUFNLEdBQUEsRUFDaEZpWCxHQUE4QixjQUFjalgsTUFBTSxHQUFBLEVBQ2xEa1gsR0FBNkIsOEJBQThCbFgsTUFBTSxHQUFBLEVBRWxEbVgsR0FBTixjQUE0Qm5TLEVBQUFBLENBQ3pDLE9BQUEsUUFBZWxPLEVBQVMyRSxFQUFBQSxDQUN0QixJQUFNMmIsRUFBbUIsSUFBSXBnQixLQUFLeUUsQ0FBQUEsRUFBTTRiLFNBQUFBLEVBQ2xDQyxFQUFnQkYsRUFBaUJHLFFBQVVILEVBQWlCRyxRQUFBQSxFQUFZSCxFQUFpQkksVUFDL0YxZ0IsRUFBUTJnQixVQUFZSCxDQUN0QixDQUVBLE9BQUEsU0FBZ0I3YixFQUFNOEQsRUFBQUEsQ0FDcEIsSUFBTW1ZLEVBQVksSUFBSTFnQixLQUFLeUUsRUFBTThELENBQUFBLEVBRWpDLE9BREFtWSxFQUFVTCxTQUFBQSxFQUNISyxDQUNULENBRUEvUSxZQUFZbEwsRUFBQUEsQ0FBeUUsR0FBQSxDQUFuRWtjLGtCQUFFQSxFQUFpQkMsbUJBQUVBLEVBQWtCQyxrQkFBRUEsQ0FBQUEsRUFBbUJ4YixVQUFBQyxPQUFBRCxHQUFBQSxVQUFBRSxDQUFBQSxJQUFBRixPQUFBQSxVQUFHLENBQUEsRUFBQSxDQUFBLEVBQy9FdUssTUFBQUEsR0FBU3ZLLFNBQUFBLEVBQ1RyRixLQUFLMmdCLGtCQUFvQkEsR0FBcUJYLEdBQzlDaGdCLEtBQUs0Z0IsbUJBQXFCQSxHQUFzQlgsR0FDaERqZ0IsS0FBSzZnQixrQkFBb0JBLEdBQXFCWCxHQUM5Q2xnQixLQUFLdUwsS0FBT3VWLEdBQXlCcmMsQ0FBQUEsQ0FDdkMsQ0FFQTRiLFVBQUFBLENBTUUsT0FMQXJnQixLQUFLK2dCLGlCQUFBQSxFQUNML2dCLEtBQUtnaEIsNEJBQUFBLEVBQ0xwQixHQUFVcUIsVUFBVTFNLEVBQUFBLEVBQ3BCdlUsS0FBS3VMLEtBQU9xVSxHQUFVUyxTQUFTcmdCLEtBQUt1TCxJQUFBQSxFQUU3QnZMLEtBQUt1TCxJQUNkLENBRUFnVixTQUFBQSxDQUNFLE9BQU92Z0IsS0FBS3VMLEtBQUtrVixTQUNuQixDQUVBUyxTQUFBQSxDQUNFLE9BQU9saEIsS0FBS3VMLElBQ2QsQ0FJQXdWLGtCQUFBQSxDQUNFLElBQU1JLEVBQVMxWixHQUFTekgsS0FBS3VMLElBQUFBLEVBQ3ZCNlYsRUFBZ0IsQ0FBQSxFQUV0QixLQUFPRCxFQUFPRSxTQUFBQSxHQUFZLENBQ3hCLElBQU0zYSxFQUFPeWEsRUFBT0csWUFDcEIsT0FBUTVhLEVBQUtELFNBQUFBLENBQ1gsS0FBS0csS0FBS0MsYUFDSjdHLEtBQUt1aEIsbUJBQW1CN2EsQ0FBQUEsRUFDMUIwYSxFQUFjelgsS0FBS2pELENBQUFBLEVBRW5CMUcsS0FBS3doQixnQkFBZ0I5YSxDQUFBQSxFQUV2QixNQUNGLEtBQUtFLEtBQUt1RCxhQUNSaVgsRUFBY3pYLEtBQUtqRCxDQUFBQSxDQUFBQSxFQU96QixPQUZBMGEsRUFBY25ZLFFBQVN2QyxHQUFTWSxHQUFXWixDQUFBQSxDQUFBQSxFQUVwQzFHLEtBQUt1TCxJQUNkLENBRUFpVyxnQkFBZ0IxaEIsRUFBQUEsQ0FhZCxPQVpJQSxFQUFRMmhCLGFBQWEsTUFBQSxHQUNuQnpoQixLQUFLNGdCLG1CQUFtQjNXLFNBQVNuSyxFQUFRNGhCLFFBQUFBLEdBQzNDNWhCLEVBQVE2aEIsZ0JBQWdCLE1BQUEsRUFJNUJoUixNQUFNQyxLQUFLOVEsRUFBUWxCLFVBQUFBLEVBQVlxSyxRQUFRMlksR0FBQUEsQ0FBYyxHQUFBLENBQWJuakIsS0FBRUEsQ0FBQUEsRUFBTW1qQixFQUN6QzVoQixLQUFLMmdCLGtCQUFrQjFXLFNBQVN4TCxDQUFBQSxHQUFTQSxFQUFLb2pCLFFBQVEsV0FBQSxJQUFpQixHQUMxRS9oQixFQUFRNmhCLGdCQUFnQmxqQixDQUFBQSxDQUMxQixDQUFBLEVBR0txQixDQUNULENBRUFraEIsNkJBQUFBLENBVUUsT0FUQXJRLE1BQU1DLEtBQUs1USxLQUFLdUwsS0FBS3VXLGlCQUFpQixPQUFBLENBQUEsRUFBVTdZLFFBQVM4WSxHQUFBQSxDQUN2RCxJQUFNQyxFQUFrQkQsRUFBWUUsdUJBQ2hDRCxHQUNFbGpCLEdBQVFrakIsQ0FBQUEsSUFBcUIsTUFDL0JBLEVBQWdCelksWUFBWXdZLENBQUFBLENBRWhDLENBQUEsRUFHSy9oQixLQUFLdUwsSUFDZCxDQUVBZ1csbUJBQW1CemhCLEVBQUFBLENBQ2pCLEdBQUlBLEdBQVMyRyxXQUFhRyxLQUFLQyxhQUMvQixPQUFPN0csS0FBS2tpQixtQkFBbUJwaUIsQ0FBQUEsR0FBWUUsS0FBS21pQix3QkFBd0JyaUIsQ0FBQUEsQ0FDMUUsQ0FFQW9pQixtQkFBbUJwaUIsRUFBQUEsQ0FDakIsT0FBT0UsS0FBSzZnQixrQkFBa0I1VyxTQUFTbkwsR0FBUWdCLENBQUFBLENBQUFBLENBQ2pELENBRUFxaUIsd0JBQXdCcmlCLEVBQUFBLENBQ3RCLE9BQU9BLEVBQVF1TSxhQUFhLHFCQUFBLElBQTJCLFNBQTNCLENBQXVDOUIsR0FBd0J6SyxDQUFBQSxDQUM3RixDQUFBLEVBR0lnaEIsR0FBMkIsVUFBQSxDQUFvQixJQUFYcmMsRUFBSVksVUFBQUMsT0FBQSxHQUFBRCxVQUFBLENBQUEsSUFBQSxPQUFBQSxVQUFBLENBQUEsRUFBRyxHQUUvQ1osRUFBT0EsRUFBS1AsUUFBUSxzQkFBdUIsU0FBQSxFQUMzQyxJQUFNa2UsRUFBTTFkLFNBQVMyZCxlQUFlQyxtQkFBbUIsRUFBQSxFQU92RCxPQU5BRixFQUFJemQsZ0JBQWdCOGIsVUFBWWhjLEVBRWhDa00sTUFBTUMsS0FBS3dSLEVBQUlwTixLQUFLOE0saUJBQWlCLE9BQUEsQ0FBQSxFQUFVN1ksUUFBU25KLEdBQUFBLENBQ3REc2lCLEVBQUk3VyxLQUFLaEMsWUFBWXpKLENBQUFBLENBQVEsQ0FBQSxFQUd4QnNpQixFQUFJN1csSUFDYixFQUFBLENDbElRZ1gsSUFBQUEsRUFBQUEsRUFBUWhPLEdBRUtpTyxHQUFOLGNBQTZCbkYsRUFBQUEsQ0FDMUMxTixhQUFBQSxDQUNFQyxNQUFBQSxHQUFTdkssU0FBQUEsRUFDVHJGLEtBQUsrTSxXQUFhL00sS0FBS3VPLE9BQ3ZCdk8sS0FBSytNLFdBQVcwVix1QkFBeUJ6aUIsS0FDekNBLEtBQUswaUIsZ0JBQWtCMWlCLEtBQUt1SSxRQUFRb2EsS0FDdEMsQ0FFQUMsb0JBQUFBLENBQ0UsTUFBTyxDQUFBLENBQ1QsQ0FFQWxGLGFBQUFBLENBQ0UsSUFBSW1GLEVBQ0VDLEVBQVNELEVBQWV4YSxHQUFZLENBQ3hDdkosUUFBUyxTQUNUaUssVUFBVy9JLEtBQUsraUIsYUFBQUEsRUFDaEJsYSxLQUFNN0ksS0FBS3dWLFFBQUFBLEVBQ1gvTSxTQUFBQSxFQUFVLENBQUEsRUFHTjBELEVBQU9uTSxLQUFLZ2pCLFFBQUFBLEVBaUNsQixPQWhDSTdXLElBQ0YwVyxFQUFleGEsR0FBWSxDQUFFdkosUUFBUyxJQUFLMkosU0FBQUEsR0FBaUI3SixXQUFZLENBQUV1TixLQUFBQSxFQUFNOFcsU0FBQUEsRUFBVyxDQUFBLENBQUEsRUFDM0ZILEVBQU92WixZQUFZc1osQ0FBQUEsR0FHakI3aUIsS0FBSytNLFdBQVdtVyxXQUFBQSxFQUNsQi9DLEdBQWNnRCxRQUFRTixFQUFjN2lCLEtBQUsrTSxXQUFXcVcsV0FBQUEsQ0FBQUEsRUFFcERwakIsS0FBSzRpQixtQkFBQUEsRUFBcUIzWixRQUFTdkMsR0FBQUEsQ0FDakNtYyxFQUFhdFosWUFBWTdDLENBQUFBLENBQUssQ0FBQSxFQUlsQ21jLEVBQWF0WixZQUFZdkosS0FBS3FqQixxQkFBQUEsQ0FBQUEsRUFFMUJyakIsS0FBSytNLFdBQVd1VyxVQUFBQSxJQUNsQnRqQixLQUFLdWpCLGdCQUFrQmxiLEdBQVksQ0FDakN2SixRQUFTLFdBQ1RGLFdBQVksQ0FDVjRrQixNQUFPakIsR0FBSWxWLG1CQUNYN0ksTUFBT3hFLEtBQUsrTSxXQUFXMFcsa0JBQUFBLEVBQ3ZCeFQsSUFBSyxHQUFBLEVBRVBwSCxLQUFNLENBQ0o2YSxZQUFBQSxHQUNBekgsYUFBYyxDQUFFLGtCQUFtQmpjLEtBQUsrTSxXQUFXNUIsRUFBQUEsRUFBSzJHLEtBQUssR0FBQSxDQUFBLENBQUEsQ0FBQSxFQUlqRWdSLEVBQU92WixZQUFZdkosS0FBS3VqQixlQUFBQSxHQUduQixDQUFFSSxHQUFtQixNQUFBLEVBQVNiLEVBQVFhLEdBQW1CLE9BQUEsQ0FBQSxDQUNsRSxDQUVBTixzQkFBQUEsQ0FDRSxJQUFNTyxFQUFhdmIsR0FBWSxDQUFFdkosUUFBUyxhQUFjaUssVUFBV3daLEdBQUl2VixpQkFBQUEsQ0FBQUEsRUFDakV4TyxFQUFVd0IsS0FBSzBpQixnQkFBZ0JtQixXQUFBQSxFQUNyQyxHQUFJcmxCLEVBQ0ZvbEIsRUFBVzFhLFVBQVVDLElBQUcsR0FBQTFGLE9BQUk4ZSxHQUFJdlYsa0JBQWlCLFVBQUEsQ0FBQSxFQUNqRDRXLEVBQVd4YSxZQUFjNUssTUFDcEIsQ0FDTCxJQUFJQyxFQUFNQyxFQUNKb2xCLEVBQWdCOWpCLEtBQUsrakIsaUJBQUFBLEVBUTNCLEdBUElELEVBQWNybEIsT0FDaEJBLEVBQU91QixLQUFLK00sV0FBV2lYLFlBQUFBLEdBRXJCRixFQUFjcGxCLE9BQ2hCQSxFQUFPc0IsS0FBSytNLFdBQVdrWCxxQkFBQUEsR0FHckJ4bEIsRUFBTSxDQUNSLElBQU15bEIsRUFBYzdiLEdBQVksQ0FBRXZKLFFBQVMsT0FBUWlLLFVBQVd3WixHQUFJblYsZUFBZ0JoRSxZQUFhM0ssQ0FBQUEsQ0FBQUEsRUFDL0ZtbEIsRUFBV3JhLFlBQVkyYSxDQUFBQSxFQUd6QixHQUFJeGxCLEVBQU0sQ0FDSkQsR0FDRm1sQixFQUFXcmEsWUFBWTdFLFNBQVN5ZixlQUFlLEdBQUEsQ0FBQSxFQUVqRCxJQUFNQyxFQUFjL2IsR0FBWSxDQUFFdkosUUFBUyxPQUFRaUssVUFBV3daLEdBQUlqVixlQUFnQmxFLFlBQWExSyxDQUFBQSxDQUFBQSxFQUMvRmtsQixFQUFXcmEsWUFBWTZhLENBQUFBLEdBSTNCLE9BQU9SLENBQ1QsQ0FFQWIsY0FBQUEsQ0FDRSxJQUFNc0IsRUFBUSxDQUFFOUIsR0FBSXhWLFdBQVUsR0FBQXRKLE9BQUs4ZSxHQUFJeFYsV0FBVXRKLElBQUFBLEVBQUFBLE9BQUt6RCxLQUFLK00sV0FBV3VYLFFBQUFBLENBQUFBLENBQUFBLEVBQ2hFQyxFQUFZdmtCLEtBQUsrTSxXQUFXeVgsYUFBQUEsRUFJbEMsT0FISUQsR0FDRkYsRUFBTTFhLEtBQUlsRyxHQUFBQSxPQUFJOGUsR0FBSXhWLFdBQVV0SixJQUFBQSxFQUFBQSxPQUFLOGdCLENBQUFBLENBQUFBLEVBRTVCRixFQUFNdlMsS0FBSyxHQUFBLENBQ3BCLENBRUEwRCxTQUFBQSxDQUNFLElBQU0zTSxFQUFPLENBQ1g0YixlQUFnQnZTLEtBQUtPLFVBQVV6UyxLQUFLK00sVUFBQUEsRUFDcEMyWCxnQkFBaUIxa0IsS0FBSytNLFdBQVc0WCxlQUFBQSxFQUNqQ0MsT0FBUTVrQixLQUFLK00sV0FBVzVCLEVBQUFBLEVBQUFBLENBR3BCdk0sV0FBRUEsQ0FBQUEsRUFBZW9CLEtBQUswaUIsZ0JBUzVCLE9BUks5akIsRUFBVytiLFFBQUFBLElBQ2Q5UixFQUFLZ2MsZUFBaUIzUyxLQUFLTyxVQUFVN1QsQ0FBQUEsR0FHbkNvQixLQUFLK00sV0FBV3VXLFVBQUFBLElBQ2xCemEsRUFBS2ljLGNBQUFBLElBR0FqYyxDQUNULENBRUFtYSxTQUFBQSxDQUNFLEdBQUEsQ0FBSytCLEdBQW9CL2tCLEtBQUsrTSxXQUFXcVcsV0FBQUEsRUFBYyxHQUFBLEVBQ3JELE9BQU9wakIsS0FBSytNLFdBQVdpVyxRQUFBQSxDQUUzQixDQUVBZSxrQkFBQUEsQ0FBbUIsSUFBQWlCLEVBQ2pCLElBQU1oYSxFQUFPaEwsS0FBSytNLFdBQVd1WCxRQUFBQSxFQUN2QlIsRUFBZ0I1TixJQUFVOE8sRUFBQ3pRLEdBQW1CdkosQ0FBQUEsS0FBS2dhLE1BQUFBLElBQUxoYSxPQUFLZ2EsT0FBeEJBLEVBQTBCeG1CLE9BQUFBLEVBSTNELE9BSEl3TSxJQUFTLFNBQ1g4WSxFQUFjcmxCLEtBQUFBLElBRVRxbEIsQ0FDVCxDQUVBbUIscUJBQUFBLENBQXNCLElBQUFDLEVBQ3BCLE9BQUFBLEVBQU9sbEIsS0FBSzZlLFlBQUFBLEtBQWFxRyxNQUFBQSxJQUFickcsT0FBYXFHLE9BQWxCQSxFQUFvQjlQLGNBQWMsVUFBQSxDQUMzQyxDQUlBK1AsbUNBQUFBLENBQ0UsSUFBTTNnQixFQUFReEUsS0FBSytNLFdBQVcwVyxrQkFBQUEsRUFDeEJGLEVBQWtCdmpCLEtBQUtpbEIsb0JBQUFBLEVBQ3pCMUIsSUFDRkEsRUFBZ0IvZSxNQUFRQSxFQUU1QixDQUFBLEVBR0ltZixHQUFzQmxsQixHQUMxQjRKLEdBQVksQ0FDVnZKLFFBQVMsT0FDVHNLLFlBQWFqRixHQUNiMEUsS0FBTSxDQUNKeUIsaUJBQWtCN0wsRUFDbEJxbUIsY0FBQUEsRUFBZSxDQUFBLENBQUEsRUFJZkMsR0FBc0IsU0FBU3RnQixFQUFNM0YsRUFBQUEsQ0FDekMsSUFBTXNtQixFQUFNL2MsR0FBWSxLQUFBLEVBRXhCLE9BREE4WCxHQUFjZ0QsUUFBUWlDLEVBQUszZ0IsR0FBUSxFQUFBLEVBQzVCMmdCLEVBQUloUSxjQUFjdFcsQ0FBQUEsQ0FDM0IsRUNyS3FCdW1CLEdBQU4sY0FBd0M3QyxFQUFBQSxDQUNyRDdTLGFBQUFBLENBQ0VDLE1BQUFBLEdBQVN2SyxTQUFBQSxFQUNUckYsS0FBSytNLFdBQVd1WSxnQkFBa0J0bEIsSUFDcEMsQ0FFQTRpQixvQkFBQUEsQ0FZRSxPQVhBNWlCLEtBQUt1bEIsTUFBUWxkLEdBQVksQ0FDdkJ2SixRQUFTLE1BQ1RGLFdBQVksQ0FDVjRtQixJQUFLLEVBQUEsRUFFUDNjLEtBQU0sQ0FDSjZhLFlBQUFBLEVBQWEsQ0FBQSxDQUFBLEVBSWpCMWpCLEtBQUt5bEIsUUFBUXpsQixLQUFLdWxCLEtBQUFBLEVBQ1gsQ0FBRXZsQixLQUFLdWxCLEtBQUFBLENBQ2hCLENBRUFsQyxzQkFBQUEsQ0FDRSxJQUFNTyxFQUFhaFUsTUFBTXlULHFCQUFBQSxHQUF3QmhlLFNBQUFBLEVBSWpELE9BSEt1ZSxFQUFXeGEsYUFDZHdhLEVBQVdqYixhQUFhLHdCQUF5QjRMLEdBQVl0UyxrQkFBQUEsRUFFeEQyaEIsQ0FDVCxDQUVBNkIsUUFBUUYsRUFBQUEsQ0FDTSxJQUFBTCxFQUNaLEdBREtLLElBQVNBLEdBQUtMLEVBQUdsbEIsS0FBSzZlLFlBQUFBLEtBQWFxRyxNQUFBQSxJQUFickcsT0FBYXFHLE9BQWxCQSxFQUFvQjlQLGNBQWMsS0FBQSxHQUNwRG1RLEVBQ0YsT0FBT3ZsQixLQUFLMGxCLHlCQUF5QkgsQ0FBQUEsQ0FFekMsQ0FFQUcseUJBQXlCSCxFQUFBQSxDQUN2QixJQUFNM2lCLEVBQU01QyxLQUFLK00sV0FBVzRZLE9BQUFBLEVBQ3RCQyxFQUFhNWxCLEtBQUsrTSxXQUFXOFksY0FBQUEsRUFHbkMsR0FGQU4sRUFBTUMsSUFBTUksR0FBY2hqQixFQUV0QmdqQixJQUFlaGpCLEVBQ2pCMmlCLEVBQU01RCxnQkFBZ0IsaUNBQUEsTUFDakIsQ0FDTCxJQUFNbUUsRUFBdUI1VCxLQUFLTyxVQUFVLENBQUUrUyxJQUFLNWlCLENBQUFBLENBQUFBLEVBQ25EMmlCLEVBQU01YyxhQUFhLGtDQUFtQ21kLENBQUFBLEVBR3hELElBQU1DLEVBQVEvbEIsS0FBSytNLFdBQVdpWixTQUFBQSxFQUN4QkMsRUFBU2ptQixLQUFLK00sV0FBV21aLFVBQUFBLEVBRTNCSCxHQUFTLE9BQ1hSLEVBQU1RLE1BQVFBLEdBRVpFLEdBQVUsT0FDWlYsRUFBTVUsT0FBU0EsR0FHakIsSUFBTUUsRUFBVyxDQUFFLGVBQWdCbm1CLEtBQUsrTSxXQUFXNUIsR0FBSW9hLEVBQU1DLElBQUtELEVBQU1RLE1BQU9SLEVBQU1VLE1BQUFBLEVBQVNuVSxLQUFLLEdBQUEsRUFDbkd5VCxFQUFNemMsUUFBUW1ULGFBQWVrSyxDQUMvQixDQUlBQywrQkFBQUEsQ0FFRSxPQURBcG1CLEtBQUt5bEIsUUFBUXpsQixLQUFLdWxCLEtBQUFBLEVBQ1h2bEIsS0FBS3lsQixRQUFBQSxDQUNkLENBQUEsRUM1RG1CWSxHQUFOLGNBQXdCaEosRUFBQUEsQ0FDckMxTixhQUFBQSxDQUNFQyxNQUFBQSxHQUFTdkssU0FBQUEsRUFDVHJGLEtBQUsyaUIsTUFBUTNpQixLQUFLdU8sT0FDbEJ2TyxLQUFLcEIsV0FBYW9CLEtBQUsyaUIsTUFBTTJELGNBQUFBLEVBQzdCdG1CLEtBQUt1bUIsV0FBYXZtQixLQUFLdUksUUFBUWdlLFdBQy9Cdm1CLEtBQUt3bUIsUUFBVXhtQixLQUFLdUksUUFBUWllLFFBRXhCeG1CLEtBQUsyaUIsTUFBTTVWLFdBQ2IvTSxLQUFLK00sV0FBYS9NLEtBQUsyaUIsTUFBTTVWLFdBRTdCL00sS0FBS29SLE9BQVNwUixLQUFLMmlCLE1BQU1yVCxTQUFBQSxDQUU3QixDQUVBb08sYUFBQUEsQ0FDRSxJQUFJRCxFQUFRemQsS0FBSytNLFdBQWEvTSxLQUFLeW1CLHNCQUFBQSxFQUEwQnptQixLQUFLMG1CLGtCQUFBQSxFQUM1RDVtQixFQUFVRSxLQUFLd0ksY0FBQUEsRUFDckIsR0FBSTFJLEVBQVMsQ0FDWCxJQUFNK2lCLEU5QmlEb0IsU0FBUy9pQixFQUFBQSxDQUN2QyxNQUFBNm1CLEVBQU83bUIsS0FBTyxNQUFBNm1CLElBQVA3bUIsUUFBQTZtQixFQUFTQyxtQkFBbUIsQ0FBQSxJQUFBRCxFQUNqQzdtQixFQUFVQSxFQUFROG1CLGtCQUVwQixPQUFPOW1CLENBQ1QsRThCdEQ0Q0EsQ0FBQUEsRUFDdEM2USxNQUFNQyxLQUFLNk0sQ0FBQUEsRUFBT3hVLFFBQVN2QyxHQUFBQSxDQUN6Qm1jLEVBQWF0WixZQUFZN0MsQ0FBQUEsQ0FBSyxDQUFBLEVBRWhDK1csRUFBUSxDQUFFM2QsQ0FBQUEsRUFFWixPQUFPMmQsQ0FDVCxDQUVBZ0osdUJBQUFBLENBQ0UsSUFBTTlXLEVBQWMzUCxLQUFLK00sV0FBVzhaLGNBQUFBLEVBQWtCeEIsR0FBNEI3QyxHQUdsRixPQURheGlCLEtBQUt1ZSxnQkFBZ0I1TyxFQUFhM1AsS0FBSzJpQixNQUFNNVYsV0FBWSxDQUFFNFYsTUFBTzNpQixLQUFLMmlCLEtBQUFBLENBQUFBLEVBQ3hFbkYsU0FBQUEsQ0FDZCxDQUVBa0osbUJBQUFBLENBQW9CLElBQUFJLEVBQ2xCLElBQUFBLEVBQUk5bUIsS0FBS3VtQixjQUFVTyxNQUFBQSxJQUFWUCxRQUFMTyxFQUFpQnJuQixVQUNuQixNQUFPLENBQUVpRixTQUFTeWYsZUFBZW5rQixLQUFLb1IsTUFBQUEsQ0FBQUEsRUFDakMsQ0FDTCxJQUFNcU0sRUFBUSxDQUFBLEVBQ1JzSixFQUFXL21CLEtBQUtvUixPQUFPcEksTUFBTTtDQUFBLEVBQ25DLFFBQVM2SixFQUFRLEVBQUdBLEVBQVFrVSxFQUFTemhCLE9BQVF1TixJQUFTLENBQ3BELElBQU1tVSxFQUFZRCxFQUFTbFUsQ0FBQUEsRUFDM0IsR0FBSUEsRUFBUSxFQUFHLENBQ2IsSUFBTS9TLEVBQVV1SSxHQUFZLElBQUEsRUFDNUJvVixFQUFNOVQsS0FBSzdKLENBQUFBLEVBR2IsR0FBSWtuQixFQUFVMWhCLE9BQVEsQ0FDcEIsSUFBTW9CLEVBQU9oQyxTQUFTeWYsZUFBZW5rQixLQUFLaW5CLGVBQWVELENBQUFBLENBQUFBLEVBQ3pEdkosRUFBTTlULEtBQUtqRCxDQUFBQSxHQUdmLE9BQU8rVyxDQUNULENBQ0YsQ0FFQWpWLGVBQUFBLENBQ0UsSUFBSTFJLEVBQVN5RSxFQUFLQyxFQUNaMGlCLEVBQVMsQ0FBQSxFQUVmLElBQUszaUIsS0FBT3ZFLEtBQUtwQixXQUFZLENBQzNCNEYsRUFBUXhFLEtBQUtwQixXQUFXMkYsQ0FBQUEsRUFDeEIsSUFBTWdRLEVBQVNHLEdBQWNuUSxDQUFBQSxFQUM3QixHQUFJZ1EsRUFBUSxDQUNWLEdBQUlBLEVBQU96VixRQUFTLENBQ2xCLElBQUkrakIsRUFDSixJQUFNc0UsRUFBaUI5ZSxHQUFZa00sRUFBT3pWLE9BQUFBLEVBRXRDK2pCLEdBQ0ZBLEVBQWF0WixZQUFZNGQsQ0FBQUEsRUFDekJ0RSxFQUFlc0UsR0FFZnJuQixFQUFVK2lCLEVBQWVzRSxFQVE3QixHQUpJNVMsRUFBTzZTLGdCQUNURixFQUFPM1MsRUFBTzZTLGFBQUFBLEVBQWlCNWlCLEdBRzdCK1AsRUFBTzNMLE1BQ1QsSUFBS3JFLEtBQU9nUSxFQUFPM0wsTUFDakJwRSxFQUFRK1AsRUFBTzNMLE1BQU1yRSxDQUFBQSxFQUNyQjJpQixFQUFPM2lCLENBQUFBLEVBQU9DLEdBTXRCLEdBQUlnUSxPQUFPQyxLQUFLeVMsQ0FBQUEsRUFBUTVoQixPQUV0QixJQUFLZixLQURBekUsSUFBV0EsRUFBVXVJLEdBQVksTUFBQSxHQUMxQjZlLEVBQ1YxaUIsRUFBUTBpQixFQUFPM2lCLENBQUFBLEVBQ2Z6RSxFQUFROEksTUFBTXJFLENBQUFBLEVBQU9DLEVBR3pCLE9BQU8xRSxDQUNULENBRUE2Zix3QkFBQUEsQ0FDRSxRQUFXcGIsS0FBT3ZFLEtBQUtwQixXQUFZLENBQ2pDLElBQU00RixFQUFReEUsS0FBS3BCLFdBQVcyRixDQUFBQSxFQUN4QmdRLEVBQVNHLEdBQWNuUSxDQUFBQSxFQUM3QixHQUFJZ1EsR0FDRUEsRUFBT25JLGFBQWMsQ0FDdkIsSUFBTXhOLEVBQWEsQ0FBQSxFQUVuQixPQURBQSxFQUFXMkYsQ0FBQUEsRUFBT0MsRUFDWDZELEdBQVlrTSxFQUFPbkksYUFBY3hOLENBQUFBLEdBSWhELENBRUFxb0IsZUFBZTdWLEVBQUFBLENBY2IsT0FiSXBSLEtBQUt3bUIsUUFBUWEsU0FDZmpXLEVBQVNBLEVBQU9sTixRQUFRLE1BQU9FLEVBQUFBLEdBR2pDZ04sRUFBU0EsRUFDTmxOLFFBQVEsaUJBQWdCVCxNQUFBQSxPQUFRVyxHQUF1QixLQUFBLENBQUEsRUFDdkRGLFFBQVEsU0FBUSxHQUFBVCxPQUFLVyxHQUFrQixHQUFBLENBQUEsRUFDdkNGLFFBQVEsU0FBUVQsSUFBQUEsT0FBTVcsRUFBQUEsQ0FBQUEsR0FFckJwRSxLQUFLd21CLFFBQVFjLFNBQVd0bkIsS0FBS3dtQixRQUFRZSxxQkFDdkNuVyxFQUFTQSxFQUFPbE4sUUFBUSxNQUFPRSxFQUFBQSxHQUcxQmdOLENBQ1QsQ0FBQSxFQ3RJbUJvVyxHQUFOLGNBQXVCbkssRUFBQUEsQ0FDcEMxTixhQUFBQSxDQUNFQyxNQUFBQSxHQUFTdkssU0FBQUEsRUFDVHJGLEtBQUtSLEtBQU9RLEtBQUt1TyxPQUNqQnZPLEtBQUt1bUIsV0FBYXZtQixLQUFLdUksUUFBUWdlLFVBQ2pDLENBRUE3SSxhQUFBQSxDQUNFLElBQU1ELEVBQVEsQ0FBQSxFQUNSZ0ssRUFBUzFNLEdBQVlDLGFBQWFoYixLQUFLMG5CLFVBQUFBLENBQUFBLEVBQ3ZDQyxFQUFZRixFQUFPbmlCLE9BQVMsRUFFbEMsUUFBU3VOLEVBQVEsRUFBR0EsRUFBUTRVLEVBQU9uaUIsT0FBUXVOLElBQVMsQ0FDbEQsSUFBTThQLEVBQVE4RSxFQUFPNVUsQ0FBQUEsRUFDZjJULEVBQVUsQ0FBQSxFQUNaM1QsSUFBVSxJQUNaMlQsRUFBUWMsUUFBQUEsSUFFTnpVLElBQVU4VSxJQUNabkIsRUFBUWEsT0FBQUEsSUFFTk8sR0FBbUJDLENBQUFBLElBQ3JCckIsRUFBUWUsa0JBQUFBLElBR1YsSUFBTW5KLEVBQU9wZSxLQUFLa2UsNEJBQTRCbUksR0FBVzFELEVBQU8sQ0FBRTRELFdBQVl2bUIsS0FBS3VtQixXQUFZQyxRQUFBQSxDQUFBQSxDQUFBQSxFQUMvRi9JLEVBQU05VCxLQUFBQSxHQUFRZ0gsTUFBTUMsS0FBS3dOLEVBQUtaLFNBQUFBLEdBQWMsQ0FBQSxDQUFBLENBQUEsRUFFNUMsSUFBSXFLLEVBQWdCbEYsRUFFdEIsT0FBT2xGLENBQ1QsQ0FFQWlLLFdBQUFBLENBQ0UsT0FBTy9XLE1BQU1DLEtBQUs1USxLQUFLUixLQUFLa29CLFVBQUFBLENBQUFBLEVBQWE1UCxPQUFRNkssR0FBQUEsQ0FBV0EsRUFBTWxCLGFBQWEsWUFBQSxDQUFBLENBQ2pGLENBQUEsRUFHSW1HLEdBQXNCakYsR0FBVSxNQUFNOWlCLEtBQUs4aUIsR0FBT3JULFNBQUFBLENBQUFBLEVBQUFBLENDeENoRGlULElBQUFBLEVBQUFBLEVBQVFoTyxHQUVLdVQsR0FBTixjQUF3QnpLLEVBQUFBLENBQ3JDMU4sYUFBQUEsQ0FDRUMsTUFBQUEsR0FBU3ZLLFNBQUFBLEVBQ1RyRixLQUFLK25CLE1BQVEvbkIsS0FBS3VPLE9BQ2xCdk8sS0FBS3BCLFdBQWFvQixLQUFLK25CLE1BQU16QixjQUFBQSxDQUMvQixDQUVBNUksYUFBQUEsQ0FDRSxJQUNNRCxFQUFRLENBREUvWSxTQUFTc2pCLGNBQWMsT0FBQSxDQUFBLEVBRXZDLEdBQUlob0IsS0FBSytuQixNQUFNcE4sUUFBQUEsRUFDYjhDLEVBQU05VCxLQUFLdEIsR0FBWSxJQUFBLENBQUEsTUFDbEIsQ0FBQSxJQUFBNGYsRUFDTCxJQUFNMUIsR0FBVTBCLEVBQUc1VCxHQUFlclUsS0FBSytuQixNQUFNRyxpQkFBQUEsQ0FBQUEsS0FBbUIsTUFBQUQsSUFBbkJDLE9BQW1CRCxPQUE3Q0EsRUFBK0N6b0IsS0FDNUQyb0IsRUFBV25vQixLQUFLa2UsNEJBQTRCc0osR0FBVXhuQixLQUFLK25CLE1BQU12b0IsS0FBTSxDQUFFK21CLFdBQUFBLENBQUFBLENBQUFBLEVBQy9FOUksRUFBTTlULEtBQUFBLEdBQVFnSCxNQUFNQyxLQUFLdVgsRUFBUzNLLFNBQUFBLEdBQWMsQ0FBQSxDQUFBLENBQUEsRUFDNUN4ZCxLQUFLb29CLDZCQUFBQSxHQUNQM0ssRUFBTTlULEtBQUt0QixHQUFZLElBQUEsQ0FBQSxFQUkzQixHQUFJckksS0FBS3BCLFdBQVcwRyxPQUNsQixPQUFPbVksRUFDRixDQUNMLElBQUk3ZSxFQUNKLENBQU1FLFFBQUVBLENBQUFBLEVBQVl5VixHQUF1QjFWLFFBQ3ZDbUIsS0FBSytuQixNQUFNTSxNQUFBQSxJQUNienBCLEVBQWEsQ0FBRXdVLElBQUssS0FBQSxHQUd0QixJQUFNdFQsRUFBVXVJLEdBQVksQ0FBRXZKLFFBQUFBLEVBQVNGLFdBQUFBLENBQUFBLENBQUFBLEVBRXZDLE9BREE2ZSxFQUFNeFUsUUFBU3ZDLEdBQVM1RyxFQUFReUosWUFBWTdDLENBQUFBLENBQUFBLEVBQ3JDLENBQUU1RyxDQUFBQSxDQUNYLENBQ0YsQ0FFQTZmLHVCQUF1QnpFLEVBQUFBLENBQ3JCLElBQU10YyxFQUFhLENBQUEsRUFDZm1LLEVBQ0V1TCxFQUFnQnRVLEtBQUtwQixXQUFXc2MsQ0FBQUEsRUFBQUEsQ0FFaENwYyxRQUFFQSxFQUFPUyxlQUFFQSxFQUFpQixDQUFBLENBQUEsRUFBTzhVLEdBQWVDLENBQUFBLEVBTXhELEdBSkk0RyxJQUFVLEdBQUtsYixLQUFLK25CLE1BQU1NLE1BQUFBLEdBQzVCN1QsT0FBTzhULE9BQU8xcEIsRUFBWSxDQUFFd1UsSUFBSyxLQUFBLENBQUEsRUFHL0JrQixJQUFrQixvQkFBcUIsQ0FDekMsSUFBTTVWLEVBQU9zQixLQUFLK25CLE1BQU1RLHNCQUFBQSxFQUN4QnhmLEVBQUFBLEdBQVN0RixPQUFNOGUsR0FBSXBpQixrQkFBaUJzRCxHQUFBQSxFQUFBQSxPQUFJOGUsR0FBSXBpQixrQkFBaUIsSUFBQSxFQUFBc0QsT0FBSy9FLENBQUFBLEVBU3BFLE9BTkE4VixPQUFPZ1UsUUFBUXhvQixLQUFLK25CLE1BQU14b0IsY0FBQUEsRUFBZ0IwSixRQUFRMlksR0FBQUEsQ0FBcUIsR0FBQSxDQUFsQm5qQixFQUFNK0YsQ0FBQUEsRUFBT29kLEVBQzVEcmlCLEVBQWUwSyxTQUFTeEwsQ0FBQUEsSUFDMUJHLEVBQVdILENBQUFBLEVBQVErRixFQUNyQixDQUFBLEVBR0s2RCxHQUFZLENBQUV2SixRQUFBQSxFQUFTaUssVUFBQUEsRUFBV25LLFdBQUFBLENBQUFBLENBQUFBLENBQzNDLENBSUF3cEIsOEJBQUFBLENBQ0UsTUFBTyxRQUFRdm9CLEtBQUtHLEtBQUsrbkIsTUFBTXpZLFNBQUFBLENBQUFBLENBQ2pDLENBQUEsRUMvRG1CbVosR0FBTixjQUEyQnBMLEVBQUFBLENBQ3hDLE9BQUEsT0FBYzNZLEVBQUFBLENBQ1osSUFBTTVFLEVBQVV1SSxHQUFZLEtBQUEsRUFDdEIrVixFQUFPLElBQUlwZSxLQUFLMEUsRUFBVSxDQUFFNUUsUUFBQUEsQ0FBQUEsQ0FBQUEsRUFHbEMsT0FGQXNlLEVBQUtzSyxPQUFBQSxFQUNMdEssRUFBS3VLLEtBQUFBLEVBQ0U3b0IsQ0FDVCxDQUVBNlAsYUFBQUEsQ0FDRUMsTUFBQUEsR0FBU3ZLLFNBQUFBLEVBQ1RyRixLQUFLRixRQUFVRSxLQUFLdUksUUFBUXpJLFFBQzVCRSxLQUFLNG9CLGFBQWUsSUFBSTlNLEdBQ3hCOWIsS0FBSzZvQixZQUFZN29CLEtBQUt1TyxNQUFBQSxDQUN4QixDQUVBc2EsWUFBWW5rQixFQUFBQSxDQUNMQSxFQUFTNEwsVUFBVXRRLEtBQUswRSxRQUFBQSxJQUMzQjFFLEtBQUswRSxTQUFXMUUsS0FBS3VPLE9BQVM3SixFQUVsQyxDQUVBZ2tCLFFBQUFBLENBS0UsR0FKQTFvQixLQUFLc2QsV0FBYSxDQUFBLEVBRWxCdGQsS0FBSzhvQixjQUFnQnpnQixHQUFZLEtBQUEsRUFBQSxDQUU1QnJJLEtBQUswRSxTQUFTaVcsUUFBQUEsRUFBVyxDQUM1QixJQUFNVCxFQUFVYSxHQUFZQyxhQUFhaGIsS0FBSzBFLFNBQVNxa0IsVUFBQUEsRUFBYSxDQUFFNU4sT0FBQUEsRUFBUSxDQUFBLEVBRTlFeEssTUFBTUMsS0FBS3NKLENBQUFBLEVBQVNqUixRQUFTc0YsR0FBQUEsQ0FDM0IsSUFBTTZQLEVBQU9wZSxLQUFLa2UsNEJBQTRCNEosR0FBV3ZaLENBQUFBLEVBQ3pEb0MsTUFBTUMsS0FBS3dOLEVBQUtaLFNBQUFBLENBQUFBLEVBQVluTSxJQUFLM0ssR0FBUzFHLEtBQUs4b0IsY0FBY3ZmLFlBQVk3QyxDQUFBQSxDQUFBQSxDQUFNLENBQUEsRUFHckYsQ0FFQXNpQixVQUFBQSxDQUNFLE9BQU9DLEdBQXNCanBCLEtBQUs4b0IsY0FBZTlvQixLQUFLRixPQUFBQSxDQUN4RCxDQUVBNm9CLE1BQUFBLENBQ0UsSUFBTU8sRUFBV2xwQixLQUFLbXBCLDhCQUFBQSxFQUN0QixLQUFPbnBCLEtBQUtGLFFBQVFzcEIsV0FDbEJwcEIsS0FBS0YsUUFBUTBILFlBQVl4SCxLQUFLRixRQUFRc3BCLFNBQUFBLEVBR3hDLE9BREFwcEIsS0FBS0YsUUFBUXlKLFlBQVkyZixDQUFBQSxFQUNsQmxwQixLQUFLcXBCLFFBQUFBLENBQ2QsQ0FJQUEsU0FBQUEsQ0FFRSxPQURBcnBCLEtBQUs0b0IsYUFBYTFRLE1BQU1vUixHQUFtQnRwQixLQUFLRixPQUFBQSxDQUFBQSxFQUN6Q2lXLEdBQU0sSUFBTS9WLEtBQUt1ZiwwQkFBQUEsQ0FBQUEsQ0FDMUIsQ0FFQTRKLCtCQUFBQSxDQUNFLElBQU1ELEVBQVd4a0IsU0FBUzZrQix1QkFBQUEsRUFhMUIsT0FYQTVZLE1BQU1DLEtBQUs1USxLQUFLOG9CLGNBQWN6ZixVQUFBQSxFQUFZSixRQUFTdkMsR0FBQUEsQ0FDakR3aUIsRUFBUzNmLFlBQVk3QyxFQUFLaVgsVUFBQUEsRUFBVSxDQUFBLENBQU0sQ0FBQSxFQUc1Q2hOLE1BQU1DLEtBQUswWSxHQUFtQkosQ0FBQUEsQ0FBQUEsRUFBV2pnQixRQUFTbkosR0FBQUEsQ0FDaEQsSUFBTTBwQixFQUFnQnhwQixLQUFLNG9CLGFBQWFwbUIsT0FBTzFDLENBQUFBLEVBQzNDMHBCLEdBQ0YxcEIsRUFBUUMsV0FBVzBwQixhQUFhRCxFQUFlMXBCLENBQUFBLENBQ2pELENBQUEsRUFHS29wQixDQUNULENBQUEsRUFHSUksR0FBc0J4cEIsR0FBWUEsRUFBUWdpQixpQkFBaUIsdUJBQUEsRUFFM0RtSCxHQUF3QkEsQ0FBQ25wQixFQUFTNHBCLElBQ3RDQyxHQUFhN3BCLEVBQVEyZ0IsU0FBQUEsSUFBZWtKLEdBQWFELEVBQWFqSixTQUFBQSxFQUUxRGtKLEdBQWdCbGxCLEdBQVNBLEVBQUtQLFFBQVEsVUFBVyxHQUFBLEVBQUEsU0FBQTBsQixHQUFBQyxFQUFBLENBQUEsSUFBQSxFQUFBamQsRUFBQSxTQUFBLEVBQUFrZCxFQUFBbGQsRUFBQSxDQUFBLEdBQUEsQ0FBQSxJQUFBbWQsRUFBQUYsRUFBQUMsQ0FBQSxFQUFBbGQsQ0FBQSxFQUFBb2QsRUFBQUQsRUFBQSxNQUFBamQsRUFBQWtkLGFBQUFDLEdBQUEsUUFBQSxRQUFBbmQsRUFBQWtkLEVBQUEsRUFBQUEsQ0FBQSxFQUFBLEtBQUEsU0FBQXBkLEVBQUEsQ0FBQSxHQUFBRSxFQUFBLENBQUEsSUFBQVUsRUFBQXNjLElBQUEsU0FBQSxTQUFBLE9BQUEsR0FBQSxDQUFBRSxFQUFBLEdBQUFwZCxFQUFBLEtBQUEsT0FBQSxFQUFBWSxFQUFBWixDQUFBLEVBQUFBLEVBQUFpZCxFQUFBcmMsQ0FBQSxFQUFBWixDQUFBLEVBQUEsTUFBQSxFQUFBbWQsRUFBQSxLQUFBLFNBQUEsU0FBQW5kLENBQUEsQ0FBQSxFQUFBLFNBQUFpZCxFQUFBLENBQUEsRUFBQSxRQUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLE9BQUFBLEVBQUEsQ0FBQSxFQUFBLFFBQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsU0FBQSxFQUFBQSxFQUFBSyxFQUFBLENBQUEsT0FBQUwsRUFBQSxDQUFBLElBQUEsU0FBQSxFQUFBLFFBQUEsQ0FBQSxNQUFBSyxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsTUFBQSxJQUFBLFFBQUEsRUFBQSxPQUFBQSxDQUFBLEVBQUEsTUFBQSxRQUFBLEVBQUEsUUFBQSxDQUFBLE1BQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxNQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBdGQsRUFBQSxJQUFBLENBQUEsS0FBQSxRQUFBLFNBQUFpZCxFQUFBSyxFQUFBLENBQUEsT0FBQSxJQUFBLFFBQUEsU0FBQUgsRUFBQUMsRUFBQSxDQUFBLElBQUFsZCxFQUFBLENBQUEsSUFBQStjLEVBQUEsSUFBQUssRUFBQSxRQUFBSCxFQUFBLE9BQUFDLEVBQUEsS0FBQSxJQUFBLEVBQUFwZCxFQUFBQSxFQUFBQSxFQUFBLEtBQUFFLEdBQUEsRUFBQUYsRUFBQUUsRUFBQSxFQUFBK2MsRUFBQUssQ0FBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLE9BQUFMLEVBQUEsUUFBQSxhQUFBLEtBQUEsT0FBQSxPQUFBLENBQUEsU0FBQUksR0FBQUosRUFBQSxFQUFBLENBQUEsS0FBQSxFQUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLENBQUEsU0FBQU0sR0FBQU4sRUFBQSxFQUFBamQsRUFBQSxDQUFBLE9BQUEsRUFBQXdkLEdBQUEsQ0FBQSxLQUFBUCxFQUFBLE9BQUEsZUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQWpkLEVBQUEsV0FBQSxHQUFBLGFBQUEsR0FBQSxTQUFBLEVBQUEsQ0FBQSxFQUFBaWQsRUFBQSxDQUFBLEVBQUFqZCxFQUFBaWQsQ0FBQSxDQUFBLFNBQUFPLEdBQUFQLEVBQUEsQ0FBQSxJQUFBLEVBQUEsU0FBQSxFQUFBQyxFQUFBLENBQUEsR0FBQSxPQUFBLEdBQUEsVUFBQSxJQUFBLEtBQUEsT0FBQSxFQUFBLElBQUFsZCxFQUFBLEVBQUEsT0FBQSxXQUFBLEVBQUEsR0FBQUEsSUFBQSxPQUFBLENBQUEsSUFBQUMsRUFBQUQsRUFBQSxLQUFBLEVBQUFrZCxHQUFBLFNBQUEsRUFBQSxHQUFBLE9BQUFqZCxHQUFBLFNBQUEsT0FBQUEsRUFBQSxNQUFBLElBQUEsVUFBQSw4Q0FBQSxFQUFBLE9BQUFpZCxJQUFBLFNBQUEsT0FBQSxRQUFBLENBQUEsQ0FBQSxFQUFBRCxFQUFBLFFBQUEsRUFBQSxPQUFBLE9BQUEsR0FBQSxTQUFBLEVBQUEsT0FBQSxDQUFBLENBQUEsQ0FBQUQsR0FBQSxVQUFBLE9BQUEsUUFBQSxZQUFBLE9BQUEsZUFBQSxpQkFBQSxFQUFBLFVBQUEsQ0FBQSxPQUFBLElBQUEsRUFBQUEsR0FBQSxVQUFBLEtBQUEsU0FBQUMsRUFBQSxDQUFBLE9BQUEsS0FBQSxRQUFBLE9BQUFBLENBQUEsQ0FBQSxFQUFBRCxHQUFBLFVBQUEsTUFBQSxTQUFBQyxFQUFBLENBQUEsT0FBQSxLQUFBLFFBQUEsUUFBQUEsQ0FBQSxDQUFBLEVBQUFELEdBQUEsVUFBQSxPQUFBLFNBQUFDLEVBQUEsQ0FBQSxPQUFBLEtBQUEsUUFBQSxTQUFBQSxDQUFBLENBQUEsRUFBQSxTQUFBUSxHQUFBUixFQUFBLEVBQUEsQ0FBQSxPQUFBUyxHQUFBVCxFQUFBVSxHQUFBVixFQUFBLEVBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxTQUFBVyxHQUFBWCxFQUFBLEVBQUFqZCxFQUFBLENBQUEsT0FBQTZkLEdBQUFaLEVBQUFVLEdBQUFWLEVBQUEsRUFBQSxLQUFBLEVBQUFqZCxDQUFBLEVBQUFBLENBQUEsQ0FBQSxTQUFBMmQsR0FBQVYsRUFBQSxFQUFBamQsRUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUFpZCxDQUFBLEVBQUEsTUFBQSxJQUFBLFVBQUEsZ0JBQUFqZCxFQUFBLGdDQUFBLEVBQUEsT0FBQSxFQUFBLElBQUFpZCxDQUFBLENBQUEsQ0FBQSxTQUFBUyxHQUFBVCxFQUFBLEVBQUEsQ0FBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsS0FBQUEsQ0FBQSxFQUFBLEVBQUEsS0FBQSxDQUFBLFNBQUFZLEdBQUFaLEVBQUEsRUFBQWpkLEVBQUEsQ0FBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElB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YW1lcyI6IFsicmVxdWlyZV90b3BiYXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJ3aW5kb3ciLCAiZG9jdW1lbnQiLCAibGFzdFRpbWUiLCAidmVuZG9ycyIsICJ4IiwgImNhbGxiYWNrIiwgImVsZW1lbnQiLCAiY3VyclRpbWUiLCAidGltZVRvQ2FsbCIsICJpZCIsICJjYW52YXMiLCAiY3VycmVudFByb2dyZXNzIiwgInNob3dpbmciLCAicHJvZ3Jlc3NUaW1lcklkIiwgImZhZGVUaW1lcklkIiwgImRlbGF5VGltZXJJZCIsICJhZGRFdmVudCIsICJlbGVtIiwgInR5cGUiLCAiaGFuZGxlciIsICJvcHRpb25zIiwgInJlcGFpbnQiLCAiY3R4IiwgImxpbmVHcmFkaWVudCIsICJzdG9wIiwgImNyZWF0ZUNhbnZhcyIsICJzdHlsZSIsICJ0b3BiYXIiLCAib3B0cyIsICJrZXkiLCAiZGVsYXkiLCAibG9vcCIsICJ0byIsICJnZXREZWZhdWx0T3B0cyIsICJzaW1wbGUiLCAiZGVmYXVsdE9wdGlvbnMiLCAicmV0IiwgIm9wdCIsICJhbGxPcHRpb25zT24iLCAib3B0aW9ucyIsICJzaG93ZG93biIsICJwYXJzZXJzIiwgImV4dGVuc2lvbnMiLCAiZ2xvYmFsT3B0aW9ucyIsICJzZXRGbGF2b3IiLCAiZmxhdm9yIiwgImtleSIsICJ2YWx1ZSIsICJuYW1lIiwgInByZXNldCIsICJvcHRpb24iLCAiZnVuYyIsICJleHQiLCAidmFsaWRFeHRlbnNpb24iLCAidmFsaWRhdGUiLCAiZXh0ZW5zaW9uIiwgImVyck1zZyIsICJpIiwgImJhc2VNc2ciLCAidHlwZSIsICJsbiIsICJ2YWxpZGF0ZUV4dGVuc2lvbiIsICJhIiwgImdldFR5cGUiLCAib2JqIiwgImNhbGxiYWNrIiwgInByb3AiLCAicyIsICJlc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2siLCAid2hvbGVNYXRjaCIsICJtMSIsICJjaGFyQ29kZVRvRXNjYXBlIiwgInRleHQiLCAiY2hhcnNUb0VzY2FwZSIsICJhZnRlckJhY2tzbGFzaCIsICJyZWdleFN0cmluZyIsICJyZWdleCIsICJ0eHQiLCAicmd4RmluZE1hdGNoUG9zIiwgInN0ciIsICJsZWZ0IiwgInJpZ2h0IiwgImZsYWdzIiwgImYiLCAiZyIsICJ4IiwgImwiLCAicG9zIiwgInQiLCAibSIsICJzdGFydCIsICJlbmQiLCAibWF0Y2hQb3MiLCAicmVzdWx0cyIsICJyZXBsYWNlbWVudCIsICJyZXBTdHIiLCAiZmluYWxTdHIiLCAibG5nIiwgImJpdHMiLCAiZnJvbUluZGV4IiwgImluZGV4T2YiLCAiaW5kZXgiLCAibWFpbCIsICJlbmNvZGUiLCAiY2giLCAiciIsICJ0YXJnZXRMZW5ndGgiLCAicGFkU3RyaW5nIiwgIm1zZyIsICJjb252ZXJ0ZXJPcHRpb25zIiwgImxhbmdFeHRlbnNpb25zIiwgIm91dHB1dE1vZGlmaWVycyIsICJsaXN0ZW5lcnMiLCAic2V0Q29udkZsYXZvciIsICJtZXRhZGF0YSIsICJfY29uc3RydWN0b3IiLCAiZ09wdCIsICJfcGFyc2VFeHRlbnNpb24iLCAibGVnYWN5RXh0ZW5zaW9uTG9hZGluZyIsICJ2YWxpZEV4dCIsICJsaXN0ZW4iLCAidmFsaWQiLCAiclRyaW1JbnB1dFRleHQiLCAicnNwIiwgInJneCIsICJldnROYW1lIiwgImdsb2JhbHMiLCAiZWkiLCAiblRleHQiLCAic3JjIiwgIkhUTUxQYXJzZXIiLCAiZG9jIiwgInN1YnN0aXR1dGVQcmVDb2RlVGFncyIsICJjbGVhbiIsICJub2RlcyIsICJtZERvYyIsICJub2RlIiwgIm4iLCAiY2hpbGQiLCAicHJlcyIsICJwcmVzUEgiLCAiY29udGVudCIsICJsYW5ndWFnZSIsICJjbGFzc2VzIiwgImMiLCAibWF0Y2hlcyIsICJleHRlbnNpb25OYW1lIiwgImlpIiwgInJhdyIsICJmb3JtYXQiLCAid3JpdGVBbmNob3JUYWciLCAibGlua1RleHQiLCAibGlua0lkIiwgInVybCIsICJtNSIsICJtNiIsICJ0aXRsZSIsICJyZXN1bHQiLCAid20iLCAic3QiLCAiZXNjYXBlIiwgIm1lbnRpb25zIiwgInVzZXJuYW1lIiwgImxuayIsICJ0YXJnZXQiLCAic2ltcGxlVVJMUmVnZXgiLCAic2ltcGxlVVJMUmVnZXgyIiwgImRlbGltVXJsUmVnZXgiLCAic2ltcGxlTWFpbFJlZ2V4IiwgImRlbGltTWFpbFJlZ2V4IiwgInJlcGxhY2VMaW5rIiwgImxlYWRpbmdNYWdpY0NoYXJzIiwgImxpbmsiLCAibTIiLCAibTMiLCAidHJhaWxpbmdQdW5jdHVhdGlvbiIsICJ0cmFpbGluZ01hZ2ljQ2hhcnMiLCAibG5rVHh0IiwgImFwcGVuZCIsICJsbWMiLCAidG1jIiwgInJlcGxhY2VNYWlsIiwgImIiLCAiaHJlZiIsICJicSIsICJwcmUiLCAicGF0dGVybiIsICJjb2RlYmxvY2siLCAibmV4dENoYXIiLCAiZG9jdHlwZSIsICJkb2N0eXBlUGFyc2VkIiwgImNoYXJzZXQiLCAibGFuZyIsICJtZXRhIiwgImxlYWRpbmdUZXh0IiwgIm51bVNwYWNlcyIsICJlbW9qaVJneCIsICJlbW9qaUNvZGUiLCAidGFncyIsICJjb21tZW50cyIsICJkZWxpbSIsICJyZXBGdW5jIiwgIm1hdGNoIiwgImJsb2NrVGV4dCIsICJibG9ja1RhZ3MiLCAiaW5zaWRlIiwgIm9wVGFnUG9zIiwgInJneDEiLCAicGF0TGVmdCIsICJwYXRSaWdodCIsICJzdWJUZXh0cyIsICJuZXdTdWJUZXh0MSIsICJoYXNoSFRNTFNwYW4iLCAiaHRtbCIsICJyZXBUZXh0IiwgImxpbWl0IiwgIm51bSIsICJoZWFkZXJMZXZlbFN0YXJ0IiwgInNldGV4dFJlZ2V4SDEiLCAic2V0ZXh0UmVnZXhIMiIsICJzcGFuR2FtdXQiLCAiaElEIiwgImhlYWRlcklkIiwgImhMZXZlbCIsICJoYXNoQmxvY2siLCAibWF0Y2hGb3VuZCIsICJhdHhTdHlsZSIsICJoVGV4dCIsICJzcGFuIiwgImhlYWRlciIsICJwcmVmaXgiLCAiaW5saW5lUmVnRXhwIiwgImNyYXp5UmVnRXhwIiwgImJhc2U2NFJlZ0V4cCIsICJyZWZlcmVuY2VSZWdFeHAiLCAicmVmU2hvcnRjdXRSZWdFeHAiLCAid3JpdGVJbWFnZVRhZ0Jhc2U2NCIsICJhbHRUZXh0IiwgIndpZHRoIiwgImhlaWdodCIsICJ3cml0ZUltYWdlVGFnIiwgImdVcmxzIiwgImdUaXRsZXMiLCAiZ0RpbXMiLCAicGFyc2VJbnNpZGUiLCAibGVhZCIsICJwcm9jZXNzTGlzdEl0ZW1zIiwgImxpc3RTdHIiLCAidHJpbVRyYWlsaW5nIiwgImlzUGFyYWdyYXBoZWQiLCAibTQiLCAidGFza2J0biIsICJjaGVja2VkIiwgIml0ZW0iLCAiYnVsbGV0U3R5bGUiLCAib3RwIiwgIndtMiIsICJzdHlsZVN0YXJ0TnVtYmVyIiwgImxpc3QiLCAibGlzdFR5cGUiLCAicmVzIiwgInBhcnNlQ29uc2VjdXRpdmVMaXN0cyIsICJvbFJneCIsICJ1bFJneCIsICJjb3VudGVyUnhnIiwgInBhcnNlQ0wiLCAic3R5bGUiLCAicGFyc2VNZXRhZGF0YUNvbnRlbnRzIiwgIndob2xlbWF0Y2giLCAiZ3JhZnMiLCAiZ3JhZnNPdXQiLCAiZ3JhZnNPdXRJdCIsICJjb2RlRmxhZyIsICJyZSIsICJiYXNlNjRSZWdleCIsICJyZXBsYWNlRnVuYyIsICJibGFua0xpbmVzIiwgInRhYmxlUmd4IiwgInNpbmdlQ29sVGJsUmd4IiwgInBhcnNlU3R5bGVzIiwgInNMaW5lIiwgInBhcnNlSGVhZGVycyIsICJpZCIsICJwYXJzZUNlbGxzIiwgImNlbGwiLCAic3ViVGV4dCIsICJidWlsZFRhYmxlIiwgImhlYWRlcnMiLCAiY2VsbHMiLCAidGIiLCAidGJsTGduIiwgInBhcnNlVGFibGUiLCAicmF3VGFibGUiLCAidGFibGVMaW5lcyIsICJyYXdIZWFkZXJzIiwgInJhd1N0eWxlcyIsICJyYXdDZWxscyIsICJzdHlsZXMiLCAicm93IiwgImNoYXJDb2RlVG9SZXBsYWNlIiwgImNoaWxkcmVuIiwgImNoaWxkcmVuTGVuZ3RoIiwgImlubmVyVHh0IiwgImhlYWRlckxldmVsIiwgImhlYWRlck1hcmsiLCAibGlzdEl0ZW1zIiwgImxpc3RJdGVtc0xlbmdodCIsICJsaXN0TnVtIiwgImJ1bGxldCIsICJsaXN0SXRlbVR4dCIsICJjaGlsZHJlbkxlbmdodCIsICJzcGFuc09ubHkiLCAidGFnTmFtZSIsICJ0YWJsZUFycmF5IiwgImhlYWRpbmdzIiwgInJvd3MiLCAiaGVhZENvbnRlbnQiLCAiYWxsaWduIiwgImNvbHMiLCAiY2VsbENvbnRlbnQiLCAiY2VsbFNwYWNlc0NvdW50IiwgInN0ckxlbiIsICJyb290IiwgIm1vZHVsZSIsICJyZXF1aXJlX2Zsb3diaXRlX3Bob2VuaXgiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyb290IiwgImZhY3RvcnkiLCAiZW51bXNfdG9wIiwgImJvdHRvbSIsICJyaWdodCIsICJsZWZ0IiwgImF1dG8iLCAiYmFzZVBsYWNlbWVudHMiLCAic3RhcnQiLCAiZW5kIiwgImNsaXBwaW5nUGFyZW50cyIsICJ2aWV3cG9ydCIsICJwb3BwZXIiLCAicmVmZXJlbmNlIiwgInZhcmlhdGlvblBsYWNlbWVudHMiLCAiYWNjIiwgInBsYWNlbWVudCIsICJlbnVtc19wbGFjZW1lbnRzIiwgImJlZm9yZVJlYWQiLCAicmVhZCIsICJhZnRlclJlYWQiLCAiYmVmb3JlTWFpbiIsICJtYWluIiwgImFmdGVyTWFpbiIsICJiZWZvcmVXcml0ZSIsICJ3cml0ZSIsICJhZnRlcldyaXRlIiwgIm1vZGlmaWVyUGhhc2VzIiwgImdldE5vZGVOYW1lIiwgImVsZW1lbnQiLCAiZ2V0V2luZG93IiwgIm5vZGUiLCAib3duZXJEb2N1bWVudCIsICJpc0VsZW1lbnQiLCAiT3duRWxlbWVudCIsICJpc0hUTUxFbGVtZW50IiwgImlzU2hhZG93Um9vdCIsICJhcHBseVN0eWxlcyIsICJfcmVmIiwgInN0YXRlIiwgIm5hbWUiLCAic3R5bGUiLCAiYXR0cmlidXRlcyIsICJ2YWx1ZSIsICJlZmZlY3QiLCAiX3JlZjIiLCAiaW5pdGlhbFN0eWxlcyIsICJzdHlsZVByb3BlcnRpZXMiLCAicHJvcGVydHkiLCAiYXR0cmlidXRlIiwgIm1vZGlmaWVyc19hcHBseVN0eWxlcyIsICJnZXRCYXNlUGxhY2VtZW50IiwgIm1hdGhfbWF4IiwgIm1hdGhfbWluIiwgInJvdW5kIiwgImdldFVBU3RyaW5nIiwgInVhRGF0YSIsICJpdGVtIiwgImlzTGF5b3V0Vmlld3BvcnQiLCAiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwgImluY2x1ZGVTY2FsZSIsICJpc0ZpeGVkU3RyYXRlZ3kiLCAiY2xpZW50UmVjdCIsICJzY2FsZVgiLCAic2NhbGVZIiwgInZpc3VhbFZpZXdwb3J0IiwgImFkZFZpc3VhbE9mZnNldHMiLCAieCIsICJ5IiwgIndpZHRoIiwgImhlaWdodCIsICJnZXRMYXlvdXRSZWN0IiwgImNvbnRhaW5zIiwgInBhcmVudCIsICJjaGlsZCIsICJyb290Tm9kZSIsICJuZXh0IiwgImdldENvbXB1dGVkU3R5bGUiLCAiaXNUYWJsZUVsZW1lbnQiLCAiZ2V0RG9jdW1lbnRFbGVtZW50IiwgImdldFBhcmVudE5vZGUiLCAiZ2V0VHJ1ZU9mZnNldFBhcmVudCIsICJnZXRDb250YWluaW5nQmxvY2siLCAiaXNGaXJlZm94IiwgImlzSUUiLCAiZWxlbWVudENzcyIsICJjdXJyZW50Tm9kZSIsICJjc3MiLCAiZ2V0T2Zmc2V0UGFyZW50IiwgIndpbmRvdyIsICJvZmZzZXRQYXJlbnQiLCAiZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IiwgIndpdGhpbiIsICJtaW4iLCAibWF4IiwgIndpdGhpbk1heENsYW1wIiwgInYiLCAiZ2V0RnJlc2hTaWRlT2JqZWN0IiwgIm1lcmdlUGFkZGluZ09iamVjdCIsICJwYWRkaW5nT2JqZWN0IiwgImV4cGFuZFRvSGFzaE1hcCIsICJrZXlzIiwgImhhc2hNYXAiLCAia2V5IiwgInRvUGFkZGluZ09iamVjdCIsICJwYWRkaW5nIiwgImFycm93IiwgIl9zdGF0ZSRtb2RpZmllcnNEYXRhJCIsICJvcHRpb25zIiwgImFycm93RWxlbWVudCIsICJwb3BwZXJPZmZzZXRzIiwgImJhc2VQbGFjZW1lbnQiLCAiYXhpcyIsICJpc1ZlcnRpY2FsIiwgImxlbiIsICJhcnJvd1JlY3QiLCAibWluUHJvcCIsICJtYXhQcm9wIiwgImVuZERpZmYiLCAic3RhcnREaWZmIiwgImFycm93T2Zmc2V0UGFyZW50IiwgImNsaWVudFNpemUiLCAiY2VudGVyVG9SZWZlcmVuY2UiLCAiY2VudGVyIiwgIm9mZnNldCIsICJheGlzUHJvcCIsICJhcnJvd19lZmZlY3QiLCAiX29wdGlvbnMkZWxlbWVudCIsICJtb2RpZmllcnNfYXJyb3ciLCAiZ2V0VmFyaWF0aW9uIiwgInVuc2V0U2lkZXMiLCAicm91bmRPZmZzZXRzQnlEUFIiLCAid2luIiwgImRwciIsICJtYXBUb1N0eWxlcyIsICJfT2JqZWN0JGFzc2lnbjIiLCAicG9wcGVyUmVjdCIsICJ2YXJpYXRpb24iLCAib2Zmc2V0cyIsICJwb3NpdGlvbiIsICJncHVBY2NlbGVyYXRpb24iLCAiYWRhcHRpdmUiLCAicm91bmRPZmZzZXRzIiwgImlzRml4ZWQiLCAiX29mZnNldHMkeCIsICJfb2Zmc2V0cyR5IiwgIl9yZWYzIiwgImhhc1giLCAiaGFzWSIsICJzaWRlWCIsICJzaWRlWSIsICJoZWlnaHRQcm9wIiwgIndpZHRoUHJvcCIsICJvZmZzZXRZIiwgIm9mZnNldFgiLCAiY29tbW9uU3R5bGVzIiwgIl9yZWY0IiwgIl9PYmplY3QkYXNzaWduIiwgImNvbXB1dGVTdHlsZXMiLCAiX3JlZjUiLCAiX29wdGlvbnMkZ3B1QWNjZWxlcmF0IiwgIl9vcHRpb25zJGFkYXB0aXZlIiwgIl9vcHRpb25zJHJvdW5kT2Zmc2V0cyIsICJ0cmFuc2l0aW9uUHJvcGVydHkiLCAibW9kaWZpZXJzX2NvbXB1dGVTdHlsZXMiLCAicGFzc2l2ZSIsICJldmVudExpc3RlbmVyc19lZmZlY3QiLCAiaW5zdGFuY2UiLCAiX29wdGlvbnMkc2Nyb2xsIiwgInNjcm9sbCIsICJfb3B0aW9ucyRyZXNpemUiLCAicmVzaXplIiwgInNjcm9sbFBhcmVudHMiLCAic2Nyb2xsUGFyZW50IiwgImV2ZW50TGlzdGVuZXJzIiwgImhhc2giLCAiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCAibWF0Y2hlZCIsICJnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudF9oYXNoIiwgImdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IiwgImdldFdpbmRvd1Njcm9sbCIsICJzY3JvbGxMZWZ0IiwgInNjcm9sbFRvcCIsICJnZXRXaW5kb3dTY3JvbGxCYXJYIiwgImdldFZpZXdwb3J0UmVjdCIsICJzdHJhdGVneSIsICJodG1sIiwgImxheW91dFZpZXdwb3J0IiwgImdldERvY3VtZW50UmVjdCIsICJfZWxlbWVudCRvd25lckRvY3VtZW4iLCAid2luU2Nyb2xsIiwgImJvZHkiLCAiaXNTY3JvbGxQYXJlbnQiLCAiX2dldENvbXB1dGVkU3R5bGUiLCAib3ZlcmZsb3ciLCAib3ZlcmZsb3dYIiwgIm92ZXJmbG93WSIsICJnZXRTY3JvbGxQYXJlbnQiLCAibGlzdFNjcm9sbFBhcmVudHMiLCAibGlzdCIsICJpc0JvZHkiLCAidGFyZ2V0IiwgInVwZGF0ZWRMaXN0IiwgInJlY3RUb0NsaWVudFJlY3QiLCAicmVjdCIsICJnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdCIsICJnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZSIsICJjbGlwcGluZ1BhcmVudCIsICJnZXRDbGlwcGluZ1BhcmVudHMiLCAiY2FuRXNjYXBlQ2xpcHBpbmciLCAiY2xpcHBlckVsZW1lbnQiLCAiZ2V0Q2xpcHBpbmdSZWN0IiwgImJvdW5kYXJ5IiwgInJvb3RCb3VuZGFyeSIsICJtYWluQ2xpcHBpbmdQYXJlbnRzIiwgImZpcnN0Q2xpcHBpbmdQYXJlbnQiLCAiY2xpcHBpbmdSZWN0IiwgImFjY1JlY3QiLCAiY29tcHV0ZU9mZnNldHMiLCAiY29tbW9uWCIsICJjb21tb25ZIiwgIm1haW5BeGlzIiwgImRldGVjdE92ZXJmbG93IiwgIl9vcHRpb25zIiwgIl9vcHRpb25zJHBsYWNlbWVudCIsICJfb3B0aW9ucyRzdHJhdGVneSIsICJfb3B0aW9ucyRib3VuZGFyeSIsICJfb3B0aW9ucyRyb290Qm91bmRhcnkiLCAiX29wdGlvbnMkZWxlbWVudENvbnRlIiwgImVsZW1lbnRDb250ZXh0IiwgIl9vcHRpb25zJGFsdEJvdW5kYXJ5IiwgImFsdEJvdW5kYXJ5IiwgIl9vcHRpb25zJHBhZGRpbmciLCAiYWx0Q29udGV4dCIsICJjbGlwcGluZ0NsaWVudFJlY3QiLCAicmVmZXJlbmNlQ2xpZW50UmVjdCIsICJwb3BwZXJDbGllbnRSZWN0IiwgImVsZW1lbnRDbGllbnRSZWN0IiwgIm92ZXJmbG93T2Zmc2V0cyIsICJvZmZzZXREYXRhIiwgIm11bHRpcGx5IiwgImNvbXB1dGVBdXRvUGxhY2VtZW50IiwgImZsaXBWYXJpYXRpb25zIiwgIl9vcHRpb25zJGFsbG93ZWRBdXRvUCIsICJhbGxvd2VkQXV0b1BsYWNlbWVudHMiLCAicGxhY2VtZW50cyIsICJhbGxvd2VkUGxhY2VtZW50cyIsICJvdmVyZmxvd3MiLCAiYSIsICJiIiwgImdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzIiwgIm9wcG9zaXRlUGxhY2VtZW50IiwgImZsaXAiLCAiX29wdGlvbnMkbWFpbkF4aXMiLCAiY2hlY2tNYWluQXhpcyIsICJfb3B0aW9ucyRhbHRBeGlzIiwgImNoZWNrQWx0QXhpcyIsICJzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMiLCAiX29wdGlvbnMkZmxpcFZhcmlhdGlvIiwgInByZWZlcnJlZFBsYWNlbWVudCIsICJpc0Jhc2VQbGFjZW1lbnQiLCAiZmFsbGJhY2tQbGFjZW1lbnRzIiwgInJlZmVyZW5jZVJlY3QiLCAiY2hlY2tzTWFwIiwgIm1ha2VGYWxsYmFja0NoZWNrcyIsICJmaXJzdEZpdHRpbmdQbGFjZW1lbnQiLCAiaSIsICJfYmFzZVBsYWNlbWVudCIsICJpc1N0YXJ0VmFyaWF0aW9uIiwgIm1haW5WYXJpYXRpb25TaWRlIiwgImFsdFZhcmlhdGlvblNpZGUiLCAiY2hlY2tzIiwgImNoZWNrIiwgIm51bWJlck9mQ2hlY2tzIiwgIl9sb29wIiwgIl9pIiwgImZpdHRpbmdQbGFjZW1lbnQiLCAiX3JldCIsICJtb2RpZmllcnNfZmxpcCIsICJnZXRTaWRlT2Zmc2V0cyIsICJwcmV2ZW50ZWRPZmZzZXRzIiwgImlzQW55U2lkZUZ1bGx5Q2xpcHBlZCIsICJzaWRlIiwgImhpZGUiLCAicmVmZXJlbmNlT3ZlcmZsb3ciLCAicG9wcGVyQWx0T3ZlcmZsb3ciLCAicmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzIiwgInBvcHBlckVzY2FwZU9mZnNldHMiLCAiaXNSZWZlcmVuY2VIaWRkZW4iLCAiaGFzUG9wcGVyRXNjYXBlZCIsICJtb2RpZmllcnNfaGlkZSIsICJkaXN0YW5jZUFuZFNraWRkaW5nVG9YWSIsICJyZWN0cyIsICJpbnZlcnREaXN0YW5jZSIsICJza2lkZGluZyIsICJkaXN0YW5jZSIsICJfb3B0aW9ucyRvZmZzZXQiLCAiZGF0YSIsICJfZGF0YSRzdGF0ZSRwbGFjZW1lbnQiLCAibW9kaWZpZXJzX29mZnNldCIsICJtb2RpZmllcnNfcG9wcGVyT2Zmc2V0cyIsICJnZXRBbHRBeGlzIiwgInByZXZlbnRPdmVyZmxvdyIsICJfb3B0aW9ucyR0ZXRoZXIiLCAidGV0aGVyIiwgIl9vcHRpb25zJHRldGhlck9mZnNldCIsICJ0ZXRoZXJPZmZzZXQiLCAiYWx0QXhpcyIsICJ0ZXRoZXJPZmZzZXRWYWx1ZSIsICJub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUiLCAib2Zmc2V0TW9kaWZpZXJTdGF0ZSIsICJfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQiLCAibWFpblNpZGUiLCAiYWx0U2lkZSIsICJhZGRpdGl2ZSIsICJtaW5MZW4iLCAibWF4TGVuIiwgImFycm93UGFkZGluZ09iamVjdCIsICJhcnJvd1BhZGRpbmdNaW4iLCAiYXJyb3dQYWRkaW5nTWF4IiwgImFycm93TGVuIiwgIm1pbk9mZnNldCIsICJtYXhPZmZzZXQiLCAiY2xpZW50T2Zmc2V0IiwgIm9mZnNldE1vZGlmaWVyVmFsdWUiLCAidGV0aGVyTWluIiwgInRldGhlck1heCIsICJwcmV2ZW50ZWRPZmZzZXQiLCAiX29mZnNldE1vZGlmaWVyU3RhdGUkMiIsICJfbWFpblNpZGUiLCAiX2FsdFNpZGUiLCAiX29mZnNldCIsICJfbGVuIiwgIl9taW4iLCAiX21heCIsICJpc09yaWdpblNpZGUiLCAiX29mZnNldE1vZGlmaWVyVmFsdWUiLCAiX3RldGhlck1pbiIsICJfdGV0aGVyTWF4IiwgIl9wcmV2ZW50ZWRPZmZzZXQiLCAibW9kaWZpZXJzX3ByZXZlbnRPdmVyZmxvdyIsICJnZXRIVE1MRWxlbWVudFNjcm9sbCIsICJnZXROb2RlU2Nyb2xsIiwgImlzRWxlbWVudFNjYWxlZCIsICJnZXRDb21wb3NpdGVSZWN0IiwgImVsZW1lbnRPclZpcnR1YWxFbGVtZW50IiwgImlzT2Zmc2V0UGFyZW50QW5FbGVtZW50IiwgIm9mZnNldFBhcmVudElzU2NhbGVkIiwgImRvY3VtZW50RWxlbWVudCIsICJvcmRlciIsICJtb2RpZmllcnMiLCAibWFwIiwgInZpc2l0ZWQiLCAicmVzdWx0IiwgIm1vZGlmaWVyIiwgInNvcnQiLCAicmVxdWlyZXMiLCAiZGVwIiwgImRlcE1vZGlmaWVyIiwgIm9yZGVyTW9kaWZpZXJzIiwgIm9yZGVyZWRNb2RpZmllcnMiLCAicGhhc2UiLCAiZGVib3VuY2UiLCAiZm4iLCAicGVuZGluZyIsICJyZXNvbHZlIiwgIm1lcmdlQnlOYW1lIiwgIm1lcmdlZCIsICJjdXJyZW50IiwgImV4aXN0aW5nIiwgIklOVkFMSURfRUxFTUVOVF9FUlJPUiIsICJJTkZJTklURV9MT09QX0VSUk9SIiwgIkRFRkFVTFRfT1BUSU9OUyIsICJhcmVWYWxpZEVsZW1lbnRzIiwgImFyZ3MiLCAiX2tleSIsICJwb3BwZXJHZW5lcmF0b3IiLCAiZ2VuZXJhdG9yT3B0aW9ucyIsICJfZ2VuZXJhdG9yT3B0aW9ucyIsICJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYiLCAiZGVmYXVsdE1vZGlmaWVycyIsICJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyIiwgImRlZmF1bHRPcHRpb25zIiwgImVmZmVjdENsZWFudXBGbnMiLCAiaXNEZXN0cm95ZWQiLCAic2V0T3B0aW9uc0FjdGlvbiIsICJjbGVhbnVwTW9kaWZpZXJFZmZlY3RzIiwgIm0iLCAibWFyZ2luVG9wIiwgIm1hcmdpblJpZ2h0IiwgIm1hcmdpbkJvdHRvbSIsICJtYXJnaW5MZWZ0IiwgImZsaXBNb2RpZmllciIsICJydW5Nb2RpZmllckVmZmVjdHMiLCAiX3N0YXRlJGVsZW1lbnRzIiwgIl9fZGVidWdfbG9vcHNfXyIsICJpbmRleCIsICJfc3RhdGUkb3JkZXJlZE1vZGlmaWUiLCAiX3N0YXRlJG9yZGVyZWRNb2RpZmllMiIsICJfcmVmMyRvcHRpb25zIiwgImNsZWFudXBGbiIsICJub29wRm4iLCAiY3JlYXRlUG9wcGVyIiwgInBvcHBlcl9jcmVhdGVQb3BwZXIiLCAicG9wcGVyX2xpdGVfZGVmYXVsdE1vZGlmaWVycyIsICJwb3BwZXJfbGl0ZV9jcmVhdGVQb3BwZXIiLCAiX2FycmF5TGlrZVRvQXJyYXkiLCAiciIsICJlIiwgIm4iLCAiX2FycmF5V2l0aEhvbGVzIiwgIl9hcnJheVdpdGhvdXRIb2xlcyIsICJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwgIl9jYWxsU3VwZXIiLCAidCIsICJvIiwgIl9nZXRQcm90b3R5cGVPZiIsICJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsICJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwgIl9jbGFzc0NhbGxDaGVjayIsICJfZGVmaW5lUHJvcGVydGllcyIsICJfdG9Qcm9wZXJ0eUtleSIsICJfY3JlYXRlQ2xhc3MiLCAiX2dldCIsICJwIiwgIl9zdXBlclByb3BCYXNlIiwgIl9pbmhlcml0cyIsICJfc2V0UHJvdG90eXBlT2YiLCAiX2l0ZXJhYmxlVG9BcnJheSIsICJfaXRlcmFibGVUb0FycmF5TGltaXQiLCAibCIsICJ1IiwgImYiLCAiX25vbkl0ZXJhYmxlUmVzdCIsICJfbm9uSXRlcmFibGVTcHJlYWQiLCAiX3NsaWNlZFRvQXJyYXkiLCAiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwgIl90b0NvbnN1bWFibGVBcnJheSIsICJfdG9QcmltaXRpdmUiLCAiX3R5cGVvZiIsICJoYXNQcm9wZXJ0eSIsICJvYmoiLCAicHJvcCIsICJsYXN0SXRlbU9mIiwgImFyciIsICJwdXNoVW5pcXVlIiwgIml0ZW1zIiwgInN0cmluZ1RvQXJyYXkiLCAic3RyIiwgInNlcGFyYXRvciIsICJpc0luUmFuZ2UiLCAidGVzdFZhbCIsICJtaW5PSyIsICJtYXhPSyIsICJsaW1pdFRvUmFuZ2UiLCAidmFsIiwgImNyZWF0ZVRhZ1JlcGVhdCIsICJ0YWdOYW1lIiwgInJlcGVhdCIsICJvcGVuVGFnU3JjIiwgInNyYyIsICJhdHRyIiwgIm9wdGltaXplVGVtcGxhdGVIVE1MIiwgInN0cmlwVGltZSIsICJ0aW1lVmFsdWUiLCAidG9kYXkiLCAiZGF0ZVZhbHVlIiwgIm5ld0RhdGUiLCAiYWRkRGF5cyIsICJkYXRlIiwgImFtb3VudCIsICJhZGRXZWVrcyIsICJhZGRNb250aHMiLCAibW9udGhzVG9TZXQiLCAiZXhwZWN0ZWRNb250aCIsICJ0aW1lIiwgImFkZFllYXJzIiwgImRheURpZmYiLCAiZGF5IiwgImZyb20iLCAiZGF5T2ZUaGVXZWVrT2YiLCAiYmFzZURhdGUiLCAiZGF5T2ZXZWVrIiwgIndlZWtTdGFydCIsICJiYXNlRGF5IiwgImdldFdlZWsiLCAidGh1T2ZUaGVXZWVrIiwgImZpcnN0VGh1IiwgInN0YXJ0T2ZZZWFyUGVyaW9kIiwgInllYXJzIiwgInllYXIiLCAicmVGb3JtYXRUb2tlbnMiLCAicmVOb25EYXRlUGFydHMiLCAia25vd25Gb3JtYXRzIiwgInBhcnNlRm5zIiwgIm1vbnRoIiwgImxvY2FsZSIsICJtb250aEluZGV4IiwgIm1vbnRoTmFtZSIsICJjb21wYXJlTmFtZXMiLCAibm9ybWFsaXplTW9udGgiLCAiZm9ybWF0Rm5zIiwgInBhZFplcm8iLCAibnVtIiwgImxlbmd0aCIsICJwYXJzZUZvcm1hdFN0cmluZyIsICJmb3JtYXQiLCAic2VwYXJhdG9ycyIsICJwYXJ0cyIsICJwYXJ0Rm9ybWF0dGVycyIsICJ0b2tlbiIsICJwYXJ0UGFyc2VyS2V5cyIsICJwYXJ0IiwgImRhdGVTdHIiLCAiZGF0ZVBhcnRzIiwgImR0UGFydHMiLCAib3JpZ0RhdGUiLCAicGFyc2VEYXRlIiwgIl9kYXRlIiwgImZvcm1hdERhdGUiLCAiZGF0ZU9iaiIsICJsaXN0ZW5lclJlZ2lzdHJ5IiwgIl9FdmVudFRhcmdldCRwcm90b3R5cCIsICJhZGRFdmVudExpc3RlbmVyIiwgInJlbW92ZUV2ZW50TGlzdGVuZXIiLCAicmVnaXN0ZXJMaXN0ZW5lcnMiLCAia2V5T2JqIiwgImxpc3RlbmVycyIsICJyZWdpc3RlcmVkIiwgImxpc3RlbmVyIiwgInVucmVnaXN0ZXJMaXN0ZW5lcnMiLCAiZ2V0Q29tcG9zZWRQYXRoIiwgInBhdGgiLCAiZmluZEZyb21QYXRoIiwgImNyaXRlcmlhIiwgImN1cnJlbnRUYXJnZXQiLCAiZWwiLCAiZmluZEVsZW1lbnRJbkV2ZW50UGF0aCIsICJldiIsICJzZWxlY3RvciIsICJsb2NhbGVzIiwgInJhbmdlIiwgInBhcnNlSFRNTCIsICJoaWRlRWxlbWVudCIsICJzaG93RWxlbWVudCIsICJlbXB0eUNoaWxkTm9kZXMiLCAicmVwbGFjZUNoaWxkTm9kZXMiLCAibmV3Q2hpbGROb2RlcyIsICJkZWZhdWx0TGFuZyIsICJkZWZhdWx0Rm9ybWF0IiwgImRlZmF1bHRXZWVrU3RhcnQiLCAic2FuaXRpemVET1ciLCAiZG93IiwgImNhbGNFbmRPZldlZWsiLCAic3RhcnRPZldlZWsiLCAidmFsaWRhdGVEYXRlIiwgIm9yaWdWYWx1ZSIsICJ2YWxpZGF0ZVZpZXdJZCIsICJ2aWV3SWQiLCAicHJvY2Vzc09wdGlvbnMiLCAiZGF0ZXBpY2tlciIsICJpbk9wdHMiLCAiY29uZmlnIiwgImxhbmd1YWdlIiwgIm1heERhdGUiLCAibWF4VmlldyIsICJtaW5EYXRlIiwgInBpY2tMZXZlbCIsICJzdGFydFZpZXciLCAibGFuZyIsICJvcmlnTG9jYWxlIiwgImhhc1RvRGlzcGxheSIsICJoYXNUb1ZhbHVlIiwgInZhbGlkRm9ybWF0U3RyaW5nIiwgIm1pbkR0IiwgIm1heER0IiwgImRhdGVzIiwgImR0IiwgInZpZXdEYXRlIiwgIndrU3RhcnQiLCAibWF4TnVtYmVyT2ZEYXRlcyIsICJuZXdQaWNrTGV2ZWwiLCAibmV3TWF4VmlldyIsICJuZXdTdGFydFZpZXciLCAicHJldkFycm93IiwgIm5leHRBcnJvdyIsICJvcmllbnRhdGlvbiIsICJwaWNrZXJUZW1wbGF0ZSIsICJkYXlzVGVtcGxhdGUiLCAiY2FsZW5kYXJXZWVrc1RlbXBsYXRlIiwgIlZpZXciLCAicGlja2VyIiwgIl9lbCRjbGFzc0xpc3QiLCAiZXh0cmFDbGFzc2VzIiwgIkRheXNWaWV3IiwgIl9WaWV3IiwgIm9uQ29uc3RydWN0aW9uIiwgImlubmVyIiwgIl90aGlzIiwgInVwZGF0ZURPVyIsICJ3ZWVrc0VsZW0iLCAidmlld1llYXIiLCAidmlld01vbnRoIiwgImZpcnN0T2ZNb250aCIsICJfdGhpcyRwaWNrZXIkZGF0ZXBpY2siLCAicmFuZ2VwaWNrZXIiLCAiX3RoaXMyIiwgInN3aXRjaExhYmVsIiwgImNsYXNzTGlzdCIsICJfdGhpczIkcmFuZ2UiLCAicmFuZ2VTdGFydCIsICJyYW5nZUVuZCIsICJfdGhpczMiLCAiY29tcHV0ZU1vbnRoUmFuZ2UiLCAidGhpc1llYXIiLCAiX3JhbmdlIiwgIl9yYW5nZSQiLCAic3RhcnRZIiwgInN0YXJ0TSIsICJfcmFuZ2UkMiIsICJlbmRZIiwgImVuZE0iLCAiTW9udGhzVmlldyIsICJpeCIsICJtaW5EYXRlT2JqIiwgIm1heERhdGVPYmoiLCAic2VsZWN0ZWQiLCAieXJPdXRPZlJhbmdlIiwgImlzTWluWWVhciIsICJpc01heFllYXIiLCAiX3JhbmdlMiIsICJ0b1RpdGxlQ2FzZSIsICJ3b3JkIiwgImNoIiwgIlllYXJzVmlldyIsICJiZWZvcmVTaG93IiwgImZpcnN0IiwgImxhc3QiLCAidHJpZ2dlckRhdGVwaWNrZXJFdmVudCIsICJ0eXBlIiwgImRldGFpbCIsICJnb1RvUHJldk9yTmV4dCIsICJkaXJlY3Rpb24iLCAiX2RhdGVwaWNrZXIkY29uZmlnIiwgIl9kYXRlcGlja2VyJHBpY2tlciIsICJjdXJyZW50VmlldyIsICJuZXdWaWV3RGF0ZSIsICJzd2l0Y2hWaWV3IiwgInVuZm9jdXMiLCAiZ29Ub1NlbGVjdGVkTW9udGhPclllYXIiLCAic2VsZWN0aW9uIiwgIm9uQ2xpY2tUb2RheUJ0biIsICJjdXJyZW50RGF0ZSIsICJvbkNsaWNrQ2xlYXJCdG4iLCAib25DbGlja1ZpZXdTd2l0Y2giLCAib25DbGlja1ByZXZCdG4iLCAib25DbGlja05leHRCdG4iLCAib25DbGlja1ZpZXciLCAiX2RhdGVwaWNrZXIkcGlja2VyJGN1IiwgImlkIiwgImlzTWluVmlldyIsICJvbkNsaWNrUGlja2VyIiwgInByb2Nlc3NQaWNrZXJPcHRpb25zIiwgInByZXZCdG4iLCAibmV4dEJ0biIsICJfcGlja2VyJGRhdGVwaWNrZXIkY28iLCAiY29tcHV0ZVJlc2V0Vmlld0RhdGUiLCAic2V0Vmlld0RhdGUiLCAib2xkVmlld0RhdGUiLCAiX3BpY2tlciRjdXJyZW50VmlldyIsICJnZXRUZXh0RGlyZWN0aW9uIiwgIlBpY2tlciIsICJ0ZW1wbGF0ZSIsICJfZWxlbWVudCRmaXJzdENoaWxkJGMiLCAiaGVhZGVyIiwgImZvb3RlciIsICJ0aXRsZSIsICJfaGVhZGVyJGxhc3RFbGVtZW50Q2giLCAidmlld1N3aXRjaCIsICJfZm9vdGVyJGZpcnN0Q2hpbGQkY2giLCAidG9kYXlCdG4iLCAiY2xlYXJCdG4iLCAiY29udHJvbHMiLCAiZWxlbWVudENsYXNzIiwgInZpZXciLCAiaW5wdXREaXJlY3Rpb24iLCAiX3RoaXMkZWxlbWVudCIsICJfdGhpcyRkYXRlcGlja2VyIiwgImlucHV0RmllbGQiLCAiY29udGFpbmVyIiwgIl90aGlzJGVsZW1lbnQkZ2V0Qm91biIsICJjYWxlbmRhcldpZHRoIiwgImNhbGVuZGFySGVpZ2h0IiwgIl9jb250YWluZXIkZ2V0Qm91bmRpbiIsICJjb250YWluZXJMZWZ0IiwgImNvbnRhaW5lclRvcCIsICJjb250YWluZXJXaWR0aCIsICJfaW5wdXRGaWVsZCRnZXRCb3VuZGkiLCAiaW5wdXRMZWZ0IiwgImlucHV0VG9wIiwgImlucHV0V2lkdGgiLCAiaW5wdXRIZWlnaHQiLCAiX2NvbmZpZyRvcmllbnRhdGlvbiIsICJvcmllbnRYIiwgIm9yaWVudFkiLCAidG9wIiwgImxhYmVsVGV4dCIsICJkaXNhYmxlZCIsICJvbGRWaWV3IiwgIm5ld1ZpZXciLCAicXVpY2tSZW5kZXIiLCAicmVuZGVyTWV0aG9kIiwgImZpbmROZXh0QXZhaWxhYmxlT25lIiwgImFkZEZuIiwgImluY3JlYXNlIiwgInRlc3RGbiIsICJtb3ZlQnlBcnJvd0tleSIsICJ2ZXJ0aWNhbCIsICJzdGVwIiwgIm9uS2V5ZG93biIsICJvbkZvY3VzIiwgIm9uTW91c2Vkb3duIiwgIm9uQ2xpY2tJbnB1dCIsICJvblBhc3RlIiwgIm9uQ2xpY2tPdXRzaWRlIiwgInBpY2tlckVsZW0iLCAic3RyaW5naWZ5RGF0ZXMiLCAicHJvY2Vzc0lucHV0RGF0ZXMiLCAiaW5wdXREYXRlcyIsICJjbGVhciIsICJvcmlnRGF0ZXMiLCAibmV3RGF0ZXMiLCAiX2R0IiwgInJlZnJlc2hVSSIsICJtb2RlIiwgIl9zZXREYXRlIiwgInJlbmRlciIsICJhdXRvaGlkZSIsICJEYXRlcGlja2VyIiwgImlubGluZSIsICJpbml0aWFsRGF0ZXMiLCAiZGF0ZXBpY2tlcnMiLCAiaW5wdXREYXRlVmFsdWVzIiwgIm9uTW91c2Vkb3duRG9jdW1lbnQiLCAibmV3T3B0aW9ucyIsICJjYWxsYmFjayIsICJvcHRzIiwgImxhc3RBcmciLCAiZm9yY2VSZW5kZXIiLCAiZmlsdGVyT3B0aW9ucyIsICJuZXdPcHRzIiwgInNldHVwRGF0ZXBpY2tlciIsICJjaGFuZ2VEYXRlTGlzdGVuZXIiLCAib25DaGFuZ2VEYXRlIiwgInNldERhdGVPcHRpb25zIiwgImNoYW5nZWRTaWRlIiwgIm90aGVyU2lkZSIsICJjaGFuZ2VkRGF0ZSIsICJvdGhlckRhdGUiLCAiRGF0ZVJhbmdlUGlja2VyIiwgImlucHV0cyIsICJjbGVhbk9wdGlvbnMiLCAiX3RoaXMkZGF0ZXBpY2tlcnMiLCAiZGF0ZXBpY2tlcjAiLCAiZGF0ZXBpY2tlcjEiLCAiaW5zdGFuY2VzXzEiLCAiX193ZWJwYWNrX3JlcXVpcmVfXyIsICJEZWZhdWx0IiwgIkRlZmF1bHRJbnN0YW5jZU9wdGlvbnMiLCAiQWNjb3JkaW9uIiwgImFjY29yZGlvbkVsIiwgImluc3RhbmNlT3B0aW9ucyIsICJfX2Fzc2lnbiIsICJjbGlja0hhbmRsZXIiLCAiX2EiLCAiX2IiLCAiaW5pdEFjY29yZGlvbnMiLCAiJGFjY29yZGlvbkVsIiwgImFsd2F5c09wZW4iLCAiYWN0aXZlQ2xhc3NlcyIsICJpbmFjdGl2ZUNsYXNzZXMiLCAiJHRyaWdnZXJFbCIsICJDYXJvdXNlbCIsICJjYXJvdXNlbEVsIiwgImluZGljYXRvciIsICJuZXh0SXRlbSIsICJyb3RhdGlvbkl0ZW1zIiwgImFjdGl2ZUl0ZW0iLCAicHJldkl0ZW0iLCAiaW5pdENhcm91c2VscyIsICIkY2Fyb3VzZWxFbCIsICJpbnRlcnZhbCIsICJzbGlkZSIsICJkZWZhdWx0UG9zaXRpb24iLCAiJGNhcm91c2VsSXRlbUVsIiwgImluZGljYXRvcnMiLCAiJGluZGljYXRvckVsIiwgImNhcm91c2VsIiwgImNhcm91c2VsTmV4dEVsIiwgImNhcm91c2VsUHJldkVsIiwgIkNvcHlDbGlwYm9hcmQiLCAidHJpZ2dlckVsIiwgInRhcmdldEVsIiwgInRleHRUb0NvcHkiLCAidGVtcFRleHRBcmVhIiwgInRleHRhcmVhIiwgImluaXRDb3B5Q2xpcGJvYXJkcyIsICJ0YXJnZXRJZCIsICIkdGFyZ2V0RWwiLCAiY29udGVudFR5cGUiLCAiaHRtbEVudGl0aWVzIiwgIkNvbGxhcHNlIiwgImluaXRDb2xsYXBzZXMiLCAiZmxvd2JpdGVfZGF0ZXBpY2tlcl8xIiwgImRhdGVwaWNrZXJFbCIsICJkYXRlcGlja2VyT3B0aW9ucyIsICJpbml0RGF0ZXBpY2tlcnMiLCAiJGRhdGVwaWNrZXJFbCIsICJidXR0b25zIiwgImF1dG9zZWxlY3RUb2RheSIsICJyYW5nZVBpY2tlciIsICJEaWFsIiwgInBhcmVudEVsIiwgInRyaWdnZXJFdmVudFR5cGVzIiwgInRyaWdnZXJUeXBlIiwgImluaXREaWFscyIsICIkcGFyZW50RWwiLCAiZGlhbElkIiwgIiRkaWFsRWwiLCAiRGlzbWlzcyIsICJpbml0RGlzbWlzc2VzIiwgIiRkaXNtaXNzRWwiLCAiRHJhd2VyIiwgImMiLCAiZXZlbnQiLCAiYmFja2Ryb3BFbCIsICJoYW5kbGVyIiwgImV2ZW50TGlzdGVuZXJJbnN0YW5jZSIsICJpbml0RHJhd2VycyIsICJkcmF3ZXJJZCIsICIkZHJhd2VyRWwiLCAiYm9keVNjcm9sbGluZyIsICJiYWNrZHJvcCIsICJlZGdlIiwgImVkZ2VPZmZzZXQiLCAiZHJhd2VyXzEiLCAidG9nZ2xlRHJhd2VyIiwgImRyYXdlcl8yIiwgImhpZGVEcmF3ZXIiLCAiZHJhd2VyXzMiLCAic2hvd0RyYXdlciIsICJjb3JlXzEiLCAiRHJvcGRvd24iLCAidGFyZ2V0RWxlbWVudCIsICJ0cmlnZ2VyRWxlbWVudCIsICJ0cmlnZ2VyRXZlbnRzIiwgImNsaWNrZWRFbCIsICJpZ25vcmVDbGlja091dHNpZGVDbGFzcyIsICJpc0lnbm9yZWQiLCAiaWdub3JlZENsaWNrT3V0c2lkZUVscyIsICJfX3NwcmVhZEFycmF5IiwgImluaXREcm9wZG93bnMiLCAiZHJvcGRvd25JZCIsICIkZHJvcGRvd25FbCIsICJvZmZzZXRTa2lkZGluZyIsICJvZmZzZXREaXN0YW5jZSIsICJkZWxheSIsICJhY2NvcmRpb25fMSIsICJjYXJvdXNlbF8xIiwgImNsaXBib2FyZF8xIiwgImNvbGxhcHNlXzEiLCAiZGlhbF8xIiwgImRpc21pc3NfMSIsICJkcm9wZG93bl8xIiwgImlucHV0X2NvdW50ZXJfMSIsICJtb2RhbF8xIiwgInBvcG92ZXJfMSIsICJ0YWJzXzEiLCAidG9vbHRpcF8xIiwgImRhdGVwaWNrZXJfMSIsICJpbml0Rmxvd2JpdGUiLCAiSW5wdXRDb3VudGVyIiwgImluY3JlbWVudEVsIiwgImRlY3JlbWVudEVsIiwgImluaXRJbnB1dENvdW50ZXJzIiwgIiRpbmNyZW1lbnRFbCIsICIkZGVjcmVtZW50RWwiLCAibWluVmFsdWUiLCAibWF4VmFsdWUiLCAiTW9kYWwiLCAiaW5pdE1vZGFscyIsICJtb2RhbElkIiwgIiRtb2RhbEVsIiwgInRvZ2dsZU1vZGFsIiwgIm1vZGFsXzIiLCAic2hvd01vZGFsIiwgIm1vZGFsXzMiLCAiaGlkZU1vZGFsIiwgIlBvcG92ZXIiLCAiaW5pdFBvcG92ZXJzIiwgInBvcG92ZXJJRCIsICIkcG9wb3ZlckVsIiwgIlRhYnMiLCAidGFic0VsIiwgInRhYiIsICJmb3JjZVNob3ciLCAiaW5pdFRhYnMiLCAidGFiSXRlbXMiLCAiZGVmYXVsdFRhYklkIiwgImlzQWN0aXZlIiwgIlRvb2x0aXAiLCAiaW5pdFRvb2x0aXBzIiwgInRvb2x0aXBJZCIsICIkdG9vbHRpcEVsIiwgIkV2ZW50cyIsICJldmVudFR5cGUiLCAiZXZlbnRGdW5jdGlvbnMiLCAiZXZlbnRGdW5jdGlvbiIsICJJbnN0YW5jZXMiLCAiY29tcG9uZW50IiwgIm92ZXJyaWRlIiwgImluc3RhbmNlcyIsICJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCAibW9kdWxlSWQiLCAiY2FjaGVkTW9kdWxlIiwgIl9fd2VicGFja19tb2R1bGVzX18iLCAiZGVmaW5pdGlvbiIsICJldmVudHNfMSIsICJsaXZlVmlld0xvYWRFdmVudHMiLCAicmVndWxhclZpZXdMb2FkRXZlbnRzIiwgIlBvbHlmaWxsRXZlbnQiLCAiZXZlbnRDb25zdHJ1Y3RvciIsICJDdXN0b21FdmVudCIsICJldmVudCIsICJwYXJhbXMiLCAiZXZ0IiwgImJ1aWxkSGlkZGVuSW5wdXQiLCAibmFtZSIsICJ2YWx1ZSIsICJpbnB1dCIsICJoYW5kbGVDbGljayIsICJlbGVtZW50IiwgInRhcmdldE1vZGlmaWVyS2V5IiwgInRvIiwgIm1ldGhvZCIsICJjc3JmIiwgImZvcm0iLCAic3VibWl0IiwgInRhcmdldCIsICJlIiwgInBob2VuaXhMaW5rRXZlbnQiLCAibWVzc2FnZSIsICJjbG9zdXJlIiwgInZhbHVlIiwgImdsb2JhbFNlbGYiLCAicGh4V2luZG93IiwgImdsb2JhbCIsICJERUZBVUxUX1ZTTiIsICJTT0NLRVRfU1RBVEVTIiwgIkRFRkFVTFRfVElNRU9VVCIsICJXU19DTE9TRV9OT1JNQUwiLCAiQ0hBTk5FTF9TVEFURVMiLCAiQ0hBTk5FTF9FVkVOVFMiLCAiVFJBTlNQT1JUUyIsICJYSFJfU1RBVEVTIiwgIlB1c2giLCAiY2hhbm5lbCIsICJldmVudCIsICJwYXlsb2FkIiwgInRpbWVvdXQiLCAic3RhdHVzIiwgImNhbGxiYWNrIiwgInJlc3BvbnNlIiwgIl9yZWYiLCAiaCIsICJUaW1lciIsICJ0aW1lckNhbGMiLCAiQ2hhbm5lbCIsICJ0b3BpYyIsICJwYXJhbXMiLCAic29ja2V0IiwgInB1c2hFdmVudCIsICJyZWFzb24iLCAicmVmIiwgImJpbmQiLCAib25DbG9zZSIsICJsZWF2ZVB1c2giLCAiX2V2ZW50IiwgImpvaW5SZWYiLCAiaGFuZGxlZFBheWxvYWQiLCAiZXZlbnRCaW5kaW5ncyIsICJpIiwgIkFqYXgiLCAibWV0aG9kIiwgImVuZFBvaW50IiwgImFjY2VwdCIsICJib2R5IiwgIm9udGltZW91dCIsICJyZXEiLCAicmVzcCIsICJvYmoiLCAicGFyZW50S2V5IiwgInF1ZXJ5U3RyIiwgImtleSIsICJwYXJhbUtleSIsICJwYXJhbVZhbCIsICJ1cmwiLCAicHJlZml4IiwgImFycmF5QnVmZmVyVG9CYXNlNjQiLCAiYnVmZmVyIiwgImJpbmFyeSIsICJieXRlcyIsICJsZW4iLCAiTG9uZ1BvbGwiLCAiY29kZSIsICJ3YXNDbGVhbiIsICJ0b2tlbiIsICJtZXNzYWdlcyIsICJtc2ciLCAib3B0cyIsICJjb250ZW50VHlwZSIsICJvbkNhbGxlclRpbWVvdXQiLCAic2VyaWFsaXplcl9kZWZhdWx0IiwgIm1zZyIsICJjYWxsYmFjayIsICJwYXlsb2FkIiwgInJhd1BheWxvYWQiLCAiam9pbl9yZWYiLCAicmVmIiwgInRvcGljIiwgImV2ZW50IiwgIm1lc3NhZ2UiLCAibWV0YUxlbmd0aCIsICJoZWFkZXIiLCAidmlldyIsICJvZmZzZXQiLCAiY2hhciIsICJjb21iaW5lZCIsICJidWZmZXIiLCAia2luZCIsICJkZWNvZGVyIiwgImpvaW5SZWZTaXplIiwgInRvcGljU2l6ZSIsICJldmVudFNpemUiLCAiam9pblJlZiIsICJkYXRhIiwgInJlZlNpemUiLCAiQ0hBTk5FTF9FVkVOVFMiLCAiU29ja2V0IiwgImVuZFBvaW50IiwgIm9wdHMiLCAiREVGQVVMVF9USU1FT1VUIiwgImdsb2JhbCIsICJMb25nUG9sbCIsICJhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93IiwgInBoeFdpbmRvdyIsICJfZSIsICJ0cmllcyIsICJjbG9zdXJlIiwgIlRSQU5TUE9SVFMiLCAiREVGQVVMVF9WU04iLCAiVGltZXIiLCAibmV3VHJhbnNwb3J0IiwgInVyaSIsICJBamF4IiwgImNvZGUiLCAicmVhc29uIiwgInBhcmFtcyIsICJzdGFydFRpbWUiLCAib25Nc2dSZWYiLCAiZXJyb3IiLCAia2V5IiwgInZhbCIsICJmYWxsYmFja1RyYW5zcG9ydCIsICJmYWxsYmFja1RocmVzaG9sZCIsICJlc3RhYmxpc2hlZCIsICJwcmltYXJ5VHJhbnNwb3J0IiwgIm9wZW5SZWYiLCAiZXJyb3JSZWYiLCAiZmFsbGJhY2siLCAicnR0IiwgIldTX0NMT1NFX05PUk1BTCIsICJTT0NLRVRfU1RBVEVTIiwgImNsb3NlQ29kZSIsICJ0cmFuc3BvcnRCZWZvcmUiLCAiZXN0YWJsaXNoZWRCZWZvcmUiLCAiY2hhbm5lbCIsICJjIiwgInJlZnMiLCAiY2hhblBhcmFtcyIsICJjaGFuIiwgIkNoYW5uZWwiLCAicmVzdWx0IiwgIm5ld1JlZiIsICJyYXdNZXNzYWdlIiwgImkiLCAiZHVwQ2hhbm5lbCIsICJDT05TRUNVVElWRV9SRUxPQURTIiwgIk1BWF9SRUxPQURTIiwgIlJFTE9BRF9KSVRURVJfTUlOIiwgIlJFTE9BRF9KSVRURVJfTUFYIiwgIkZBSUxTQUZFX0pJVFRFUiIsICJQSFhfRVZFTlRfQ0xBU1NFUyIsICJQSFhfQ09NUE9ORU5UIiwgIlBIWF9MSVZFX0xJTksiLCAiUEhYX1RSQUNLX1NUQVRJQyIsICJQSFhfTElOS19TVEFURSIsICJQSFhfUkVGX0xPQURJTkciLCAiUEhYX1JFRl9TUkMiLCAiUEhYX1JFRl9MT0NLIiwgIlBIWF9UUkFDS19VUExPQURTIiwgIlBIWF9VUExPQURfUkVGIiwgIlBIWF9QUkVGTElHSFRFRF9SRUZTIiwgIlBIWF9ET05FX1JFRlMiLCAiUEhYX0RST1BfVEFSR0VUIiwgIlBIWF9BQ1RJVkVfRU5UUllfUkVGUyIsICJQSFhfTElWRV9GSUxFX1VQREFURUQiLCAiUEhYX1NLSVAiLCAiUEhYX01BR0lDX0lEIiwgIlBIWF9QUlVORSIsICJQSFhfQ09OTkVDVEVEX0NMQVNTIiwgIlBIWF9MT0FESU5HX0NMQVNTIiwgIlBIWF9FUlJPUl9DTEFTUyIsICJQSFhfQ0xJRU5UX0VSUk9SX0NMQVNTIiwgIlBIWF9TRVJWRVJfRVJST1JfQ0xBU1MiLCAiUEhYX1BBUkVOVF9JRCIsICJQSFhfTUFJTiIsICJQSFhfUk9PVF9JRCIsICJQSFhfVklFV1BPUlRfVE9QIiwgIlBIWF9WSUVXUE9SVF9CT1RUT00iLCAiUEhYX1RSSUdHRVJfQUNUSU9OIiwgIlBIWF9IQVNfRk9DVVNFRCIsICJGT0NVU0FCTEVfSU5QVVRTIiwgIkNIRUNLQUJMRV9JTlBVVFMiLCAiUEhYX0hBU19TVUJNSVRURUQiLCAiUEhYX1NFU1NJT04iLCAiUEhYX1ZJRVdfU0VMRUNUT1IiLCAiUEhYX1NUSUNLWSIsICJQSFhfU1RBVElDIiwgIlBIWF9SRUFET05MWSIsICJQSFhfRElTQUJMRUQiLCAiUEhYX0RJU0FCTEVfV0lUSCIsICJQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUiLCAiUEhYX0hPT0siLCAiUEhYX0RFQk9VTkNFIiwgIlBIWF9USFJPVFRMRSIsICJQSFhfVVBEQVRFIiwgIlBIWF9TVFJFQU0iLCAiUEhYX1NUUkVBTV9SRUYiLCAiUEhYX0tFWSIsICJQSFhfUFJJVkFURSIsICJQSFhfQVVUT19SRUNPVkVSIiwgIlBIWF9MVl9ERUJVRyIsICJQSFhfTFZfUFJPRklMRSIsICJQSFhfTFZfTEFURU5DWV9TSU0iLCAiUEhYX0xWX0hJU1RPUllfUE9TSVRJT04iLCAiUEhYX1BST0dSRVNTIiwgIlBIWF9NT1VOVEVEIiwgIlBIWF9SRUxPQURfU1RBVFVTIiwgIkxPQURFUl9USU1FT1VUIiwgIk1BWF9DSElMRF9KT0lOX0FUVEVNUFRTIiwgIkJFRk9SRV9VTkxPQURfTE9BREVSX1RJTUVPVVQiLCAiQklORElOR19QUkVGSVgiLCAiUFVTSF9USU1FT1VUIiwgIkRFQk9VTkNFX1RSSUdHRVIiLCAiVEhST1RUTEVEIiwgIkRFQk9VTkNFX1BSRVZfS0VZIiwgIkRFRkFVTFRTIiwgIlBIWF9QRU5ESU5HX0FUVFJTIiwgIkRZTkFNSUNTIiwgIlNUQVRJQyIsICJST09UIiwgIkNPTVBPTkVOVFMiLCAiRVZFTlRTIiwgIlJFUExZIiwgIlRJVExFIiwgIlRFTVBMQVRFUyIsICJTVFJFQU0iLCAiRW50cnlVcGxvYWRlciIsICJlbnRyeSIsICJjb25maWciLCAibGl2ZVNvY2tldCIsICJjaHVua19zaXplIiwgImNodW5rX3RpbWVvdXQiLCAicmVhc29uIiwgIl9kYXRhIiwgInJlYWRlciIsICJibG9iIiwgImUiLCAibG9nRXJyb3IiLCAiY2h1bmsiLCAibXNnIiwgIm9iaiIsICJpc0NpZCIsICJjaWQiLCAidHlwZSIsICJkZXRlY3REdXBsaWNhdGVJZHMiLCAiaWRzIiwgImVsZW1zIiwgImkiLCAibGVuIiwgImRldGVjdEludmFsaWRTdHJlYW1JbnNlcnRzIiwgImluc2VydHMiLCAiZXJyb3JzIiwgImlkIiwgInN0cmVhbUVsIiwgImVycm9yIiwgImRlYnVnIiwgInZpZXciLCAia2luZCIsICJjbG9zdXJlIiwgInZhbCIsICJjbG9uZSIsICJjbG9zZXN0UGh4QmluZGluZyIsICJlbCIsICJiaW5kaW5nIiwgImJvcmRlckVsIiwgImlzT2JqZWN0IiwgImlzRXF1YWxPYmoiLCAib2JqMSIsICJvYmoyIiwgImlzRW1wdHkiLCAieCIsICJtYXliZSIsICJjYWxsYmFjayIsICJjaGFubmVsVXBsb2FkZXIiLCAiZW50cmllcyIsICJvbkVycm9yIiwgInJlc3AiLCAiQnJvd3NlciIsICJsb2NhbFN0b3JhZ2UiLCAibmFtZXNwYWNlIiwgInN1YmtleSIsICJpbml0aWFsIiwgImZ1bmMiLCAiY3VycmVudCIsICJrZXkiLCAibmV3VmFsIiwgIm1ldGEiLCAidG8iLCAiY3VycmVudFN0YXRlIiwgImhhc2hFbCIsICJuYW1lIiwgInZhbHVlIiwgIm1heEFnZVNlY29uZHMiLCAiZXhwaXJlcyIsICJ0b1VSTCIsICJmbGFzaCIsICJtYXliZUhhc2giLCAiaGFzaCIsICJicm93c2VyX2RlZmF1bHQiLCAiRE9NIiwgImNsYXNzTmFtZSIsICJub2RlIiwgInF1ZXJ5IiwgImFycmF5IiwgImh0bWwiLCAidGVtcGxhdGUiLCAiaW5wdXRFbCIsICJmb3JtSWQiLCAiaW5wdXRzT3V0c2lkZUZvcm0iLCAid2FudHNOZXdUYWIiLCAiaXNEb3dubG9hZCIsICJpc1RhcmdldEJsYW5rIiwgImlzVGFyZ2V0TmFtZWRUYWIiLCAiY3VycmVudExvY2F0aW9uIiwgImhyZWYiLCAidXJsIiwgInBhcmVudElkIiwgInBoeFVwZGF0ZSIsICJ1cGRhdGVUeXBlcyIsICJjaWRzIiwgInBhcmVudENpZHMiLCAiY2hpbGRyZW5DaWRzIiwgInBhcmVudCIsICJjaGlsZENJRCIsICJjaGlsZENpZCIsICJub2RlcyIsICJkZWZhdWx0VmFsIiwgInVwZGF0ZUZ1bmMiLCAiZXhpc3RpbmciLCAiZnJvbUVsIiwgInRvRWwiLCAiYXR0ciIsICJ0YXJnZXQiLCAic291cmNlIiwgInN0ciIsICJ0aXRsZUVsIiwgInByZWZpeCIsICJzdWZmaXgiLCAiZGVmYXVsdFRpdGxlIiwgImlubmVyIiwgImV2ZW50IiwgInBoeERlYm91bmNlIiwgImRlZmF1bHREZWJvdW5jZSIsICJwaHhUaHJvdHRsZSIsICJkZWZhdWx0VGhyb3R0bGUiLCAiYXN5bmNGaWx0ZXIiLCAiZGVib3VuY2UiLCAidGhyb3R0bGUiLCAidGltZW91dCIsICJ0cmlnZ2VyIiwgImN1cnJlbnRDeWNsZSIsICJuZXdLZXlEb3duIiwgInByZXZLZXkiLCAidCIsICJmb3JtIiwgImlucHV0IiwgImN5Y2xlIiwgInBoeFZpZXdwb3J0VG9wIiwgInBoeFZpZXdwb3J0Qm90dG9tIiwgImhvb2siLCAicGFyZW50cyIsICJvcHRzIiwgImRlZmF1bHRCdWJibGUiLCAiZXZlbnRPcHRzIiwgImNsb25lZCIsICJleGNsdWRlIiwgImlzSWdub3JlZCIsICJzb3VyY2VBdHRycyIsICJzb3VyY2VWYWx1ZSIsICJ0YXJnZXRBdHRycyIsICJmb2N1c2VkIiwgInNlbGVjdGlvblN0YXJ0IiwgInNlbGVjdGlvbkVuZCIsICJwaHhUcmlnZ2VyRXh0ZXJuYWwiLCAiY29udGFpbmVyIiwgInRvUmVtb3ZlIiwgImNoaWxkTm9kZSIsICJ0YWdOYW1lIiwgImF0dHJzIiwgInJldGFpbmVkQXR0cnMiLCAibmV3Q29udGFpbmVyIiwgIm9wIiwgImV4aXN0aW5nTmFtZSIsICJfbmFtZSIsICJfb3AiLCAic3Rhc2hlZFJlc3VsdCIsICJvcHMiLCAiXyIsICJleGlzdGluZ0luZGV4IiwgIl9zdGFzaGVkIiwgImRvbV9kZWZhdWx0IiwgIlVwbG9hZEVudHJ5IiwgImZpbGVFbCIsICJmaWxlIiwgImlzTmV3IiwgImlzQWN0aXZlIiwgIkxpdmVVcGxvYWRlciIsICJhdXRvVXBsb2FkIiwgInByb2dyZXNzIiwgInVwbG9hZGVycyIsICJsaXZlVXBsb2FkZXJGaWxlUmVmIiwgIl9MaXZlVXBsb2FkZXIiLCAicmVmIiwgImZvcm1FbCIsICJhY3RpdmUiLCAiZmlsZXMiLCAiZmlsZURhdGEiLCAidXBsb2FkUmVmIiwgImYiLCAiZGF0YVRyYW5zZmVyIiwgIm5ld0ZpbGVzIiwgImZpbGVJbnB1dHMiLCAib25Db21wbGV0ZSIsICJncm91cGVkRW50cmllcyIsICJhY2MiLCAiQVJJQSIsICJpbnN0YW5jZSIsICJjbGFzc2VzIiwgImludGVyYWN0aXZlT25seSIsICJjaGlsZCIsICJhcmlhX2RlZmF1bHQiLCAiSG9va3MiLCAibmV3UHJlZmxpZ2h0cyIsICJuZXh0Rm9jdXMiLCAiZmluZFNjcm9sbENvbnRhaW5lciIsICJzY3JvbGxUb3AiLCAic2Nyb2xsQ29udGFpbmVyIiwgImJvdHRvbSIsICJ0b3AiLCAiaXNBdFZpZXdwb3J0VG9wIiwgInJlY3QiLCAiaXNBdFZpZXdwb3J0Qm90dG9tIiwgImlzV2l0aGluVmlld3BvcnQiLCAic2Nyb2xsQmVmb3JlIiwgInRvcE92ZXJyYW4iLCAidGhyb3R0bGVJbnRlcnZhbCIsICJwZW5kaW5nT3AiLCAib25Ub3BPdmVycnVuIiwgInRvcEV2ZW50IiwgImZpcnN0Q2hpbGQiLCAib25GaXJzdENoaWxkQXRUb3AiLCAib25MYXN0Q2hpbGRBdEJvdHRvbSIsICJib3R0b21FdmVudCIsICJsYXN0Q2hpbGQiLCAiX2UiLCAic2Nyb2xsTm93IiwgImlzU2Nyb2xsaW5nVXAiLCAiaXNTY3JvbGxpbmdEb3duIiwgImludGVydmFsIiwgImxhc3RDYWxsQXQiLCAidGltZXIiLCAiYXJncyIsICJub3ciLCAicmVtYWluaW5nVGltZSIsICJob29rc19kZWZhdWx0IiwgIkVsZW1lbnRSZWYiLCAiY2xvc2VzdExvY2siLCAicGh4RXZlbnQiLCAiZWFjaENsb25lQ2FsbGJhY2siLCAiY2xvbmVkVHJlZSIsICJkaXNhYmxlZFZhbCIsICJyZWFkT25seVZhbCIsICJkaXNhYmxlUmVzdG9yZSIsICJET01Qb3N0TW9ycGhSZXN0b3JlciIsICJjb250YWluZXJCZWZvcmUiLCAiY29udGFpbmVyQWZ0ZXIiLCAidXBkYXRlVHlwZSIsICJpZHNCZWZvcmUiLCAiaWRzQWZ0ZXIiLCAiZWxlbWVudHNUb01vZGlmeSIsICJwcmV2aW91c0VsZW1lbnRJZCIsICJlbGVtZW50VG9Nb2RpZnkiLCAicHJldmlvdXNFbGVtIiwgImVsZW0iLCAiZWxlbUlkIiwgIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCAibW9ycGhBdHRycyIsICJmcm9tTm9kZSIsICJ0b05vZGUiLCAidG9Ob2RlQXR0cnMiLCAiYXR0ck5hbWUiLCAiYXR0ck5hbWVzcGFjZVVSSSIsICJhdHRyVmFsdWUiLCAiZnJvbVZhbHVlIiwgImZyb21Ob2RlQXR0cnMiLCAiZCIsICJyYW5nZSIsICJOU19YSFRNTCIsICJkb2MiLCAiSEFTX1RFTVBMQVRFX1NVUFBPUlQiLCAiSEFTX1JBTkdFX1NVUFBPUlQiLCAiY3JlYXRlRnJhZ21lbnRGcm9tVGVtcGxhdGUiLCAiY3JlYXRlRnJhZ21lbnRGcm9tUmFuZ2UiLCAiZnJhZ21lbnQiLCAiY3JlYXRlRnJhZ21lbnRGcm9tV3JhcCIsICJ0b0VsZW1lbnQiLCAiY29tcGFyZU5vZGVOYW1lcyIsICJmcm9tTm9kZU5hbWUiLCAidG9Ob2RlTmFtZSIsICJmcm9tQ29kZVN0YXJ0IiwgInRvQ29kZVN0YXJ0IiwgImNyZWF0ZUVsZW1lbnROUyIsICJuYW1lc3BhY2VVUkkiLCAibW92ZUNoaWxkcmVuIiwgImN1ckNoaWxkIiwgIm5leHRDaGlsZCIsICJzeW5jQm9vbGVhbkF0dHJQcm9wIiwgInNwZWNpYWxFbEhhbmRsZXJzIiwgInBhcmVudE5vZGUiLCAicGFyZW50TmFtZSIsICJuZXdWYWx1ZSIsICJvbGRWYWx1ZSIsICJzZWxlY3RlZEluZGV4IiwgIm9wdGdyb3VwIiwgIm5vZGVOYW1lIiwgIkVMRU1FTlRfTk9ERSIsICJET0NVTUVOVF9GUkFHTUVOVF9OT0RFJDEiLCAiVEVYVF9OT0RFIiwgIkNPTU1FTlRfTk9ERSIsICJub29wIiwgImRlZmF1bHRHZXROb2RlS2V5IiwgIm1vcnBoZG9tRmFjdG9yeSIsICJvcHRpb25zIiwgInRvTm9kZUh0bWwiLCAiZ2V0Tm9kZUtleSIsICJvbkJlZm9yZU5vZGVBZGRlZCIsICJvbk5vZGVBZGRlZCIsICJvbkJlZm9yZUVsVXBkYXRlZCIsICJvbkVsVXBkYXRlZCIsICJvbkJlZm9yZU5vZGVEaXNjYXJkZWQiLCAib25Ob2RlRGlzY2FyZGVkIiwgIm9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQiLCAic2tpcEZyb21DaGlsZHJlbiIsICJhZGRDaGlsZCIsICJjaGlsZHJlbk9ubHkiLCAiZnJvbU5vZGVzTG9va3VwIiwgImtleWVkUmVtb3ZhbExpc3QiLCAiYWRkS2V5ZWRSZW1vdmFsIiwgIndhbGtEaXNjYXJkZWRDaGlsZE5vZGVzIiwgInNraXBLZXllZE5vZGVzIiwgInJlbW92ZU5vZGUiLCAiaW5kZXhUcmVlIiwgImhhbmRsZU5vZGVBZGRlZCIsICJuZXh0U2libGluZyIsICJ1bm1hdGNoZWRGcm9tRWwiLCAibW9ycGhFbCIsICJjbGVhbnVwRnJvbUVsIiwgImN1ckZyb21Ob2RlQ2hpbGQiLCAiY3VyRnJvbU5vZGVLZXkiLCAiZnJvbU5leHRTaWJsaW5nIiwgInRvRWxLZXkiLCAiYmVmb3JlVXBkYXRlUmVzdWx0IiwgIm1vcnBoQ2hpbGRyZW4iLCAic2tpcEZyb20iLCAiY3VyVG9Ob2RlQ2hpbGQiLCAiY3VyVG9Ob2RlS2V5IiwgInRvTmV4dFNpYmxpbmciLCAibWF0Y2hpbmdGcm9tRWwiLCAib3V0ZXIiLCAiY3VyRnJvbU5vZGVUeXBlIiwgImlzQ29tcGF0aWJsZSIsICJvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCIsICJzcGVjaWFsRWxIYW5kbGVyIiwgIm1vcnBoZWROb2RlIiwgIm1vcnBoZWROb2RlVHlwZSIsICJ0b05vZGVUeXBlIiwgImVsVG9SZW1vdmUiLCAibW9ycGhkb20iLCAibW9ycGhkb21fZXNtX2RlZmF1bHQiLCAiRE9NUGF0Y2giLCAic3RyZWFtcyIsICJ0YXJnZXRDSUQiLCAiaXNKb2luUGF0Y2giLCAidGFyZ2V0Q29udGFpbmVyIiwgImFkZGVkIiwgInVwZGF0ZXMiLCAiYXBwZW5kUHJlcGVuZFVwZGF0ZXMiLCAiZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkIiwgIm1vcnBoIiwgIndpdGhDaGlsZHJlbiIsICJtb3JwaENhbGxiYWNrcyIsICJmcm9tIiwgInN0cmVhbUF0IiwgIm5vblN0cmVhbUNoaWxkIiwgImMiLCAic2libGluZyIsICJtb3JwaGVkRWwiLCAiZnJvbVZhbCIsICJ0b1ZhbCIsICJpc0ZvY3VzZWRGb3JtRWwiLCAiZm9jdXNlZFNlbGVjdENoYW5nZWQiLCAicHJldlNlc3Npb24iLCAiZGVsZXRlSWRzIiwgInJlc2V0IiwgImxpbWl0IiwgInVwZGF0ZSIsICJjaGlsZHJlbiIsICJvbGRJbmRleCIsICJwZW5kaW5nUmVtb3ZlcyIsICJmaXJzdCIsICJyZXN0IiwgIlZPSURfVEFHUyIsICJxdW90ZUNoYXJzIiwgIm1vZGlmeVJvb3QiLCAiY2xlYXJJbm5lckhUTUwiLCAiaW5zaWRlQ29tbWVudCIsICJiZWZvcmVUYWciLCAiYWZ0ZXJUYWciLCAidGFnIiwgInRhZ05hbWVFbmRzQXQiLCAibmV3SFRNTCIsICJsb29rYWhlYWQiLCAiaXNJZCIsICJjaGFyIiwgImF0dHJTdGFydHNBdCIsICJjbG9zZUF0IiwgImF0dHJzU3RyIiwgImlkQXR0clN0ciIsICJSZW5kZXJlZCIsICJkaWZmIiwgInJlcGx5IiwgImV2ZW50cyIsICJ0aXRsZSIsICJ2aWV3SWQiLCAicmVuZGVyZWQiLCAib25seUNpZHMiLCAiY29tcG9uZW50cyIsICJjaGFuZ2VUcmFja2luZyIsICJyb290QXR0cnMiLCAib3V0cHV0IiwgIm5ld2MiLCAiY2FjaGUiLCAib2xkYyIsICJjZGlmZiIsICJuZGlmZiIsICJzdGF0IiwgInNjaWQiLCAidGRpZmYiLCAidGFyZ2V0VmFsIiwgInBydW5lTWFnaWNJZCIsICJtZXJnZWQiLCAic3RyaXBwZWRIVE1MIiwgIl9iZWZvcmUiLCAiX2FmdGVyIiwgInBhcnQiLCAidGVtcGxhdGVzIiwgInN0YXRpY3MiLCAiaXNSb290IiwgInByZXZCdWZmZXIiLCAic2tpcCIsICJuZXdSb290IiwgImNvbW1lbnRCZWZvcmUiLCAiY29tbWVudEFmdGVyIiwgImR5bmFtaWNzIiwgInN0cmVhbSIsICJfcmVmIiwgIl9pbnNlcnRzIiwgImNvbXBUZW1wbGF0ZXMiLCAiZHluYW1pYyIsICJjb21wb25lbnQiLCAiZm9jdXNTdGFjayIsICJkZWZhdWx0X3RyYW5zaXRpb25fdGltZSIsICJKUyIsICJldmVudFR5cGUiLCAic291cmNlRWwiLCAiZGVmYXVsdHMiLCAiZGVmYXVsdEtpbmQiLCAiZGVmYXVsdEFyZ3MiLCAid2luZG93SGVpZ2h0IiwgIndpbmRvd1dpZHRoIiwgImVuY29kZWRKUyIsICJkZXRhaWwiLCAiYnViYmxlcyIsICJkYXRhIiwgInBhZ2VfbG9hZGluZyIsICJsb2FkaW5nIiwgImRpc3BhdGNoZXIiLCAicHVzaE9wdHMiLCAidGFyZ2V0U3JjIiwgInBoeFRhcmdldCIsICJoYW5kbGVyIiwgInRhcmdldFZpZXciLCAidGFyZ2V0Q3R4IiwgIm5ld0NpZCIsICJfdGFyZ2V0IiwgInN1Ym1pdHRlciIsICJyZXBsYWNlIiwgIl9ldmVudFR5cGUiLCAiX3BoeEV2ZW50IiwgIl92aWV3IiwgIl9zb3VyY2VFbCIsICJfZWwiLCAibmFtZXMiLCAidHJhbnNpdGlvbiIsICJ0aW1lIiwgImJsb2NraW5nIiwgInZhbDEiLCAidmFsMiIsICJkaXNwbGF5IiwgImlucyIsICJvdXRzIiwgImluQ2xhc3NlcyIsICJpblN0YXJ0Q2xhc3NlcyIsICJpbkVuZENsYXNzZXMiLCAib3V0Q2xhc3NlcyIsICJvdXRTdGFydENsYXNzZXMiLCAib3V0RW5kQ2xhc3NlcyIsICJvblN0YXJ0IiwgIm9uRW5kIiwgImN1cnJlbnRFbCIsICJzdGlja3lEaXNwbGF5IiwgInByZXZBZGRzIiwgInByZXZSZW1vdmVzIiwgIm5ld0FkZHMiLCAibmV3UmVtb3ZlcyIsICJhZGRzIiwgInJlbW92ZXMiLCAidHJhbnNpdGlvblJ1biIsICJ0cmFuc2l0aW9uU3RhcnQiLCAidHJhbnNpdGlvbkVuZCIsICJvbkRvbmUiLCAia2VlcEFkZHMiLCAia2VlcFJlbW92ZXMiLCAic2V0cyIsICJwcmV2U2V0cyIsICJhbHRlcmVkQXR0cnMiLCAiX3ZhbCIsICJuZXdTZXRzIiwgImRlZmF1bHRRdWVyeSIsICJ0cmFucyIsICJ0U3RhcnQiLCAidEVuZCIsICJqc19kZWZhdWx0IiwgIkhPT0tfSUQiLCAidmlld0hvb2tJRCIsICJWaWV3SG9vayIsICJjYWxsYmFja3MiLCAib3duZXIiLCAicGF5bG9hZCIsICJvblJlcGx5IiwgInJlc29sdmUiLCAicmVqZWN0IiwgImNhbGxiYWNrUmVmIiwgImN1c3RvbUV2ZW50IiwgImJ5cGFzcyIsICJwcmVwZW5kRm9ybURhdGFLZXkiLCAiaXNBcnJheSIsICJiYXNlS2V5IiwgInNlcmlhbGl6ZUZvcm0iLCAibWV0YWRhdGEiLCAib25seU5hbWVzIiwgImluamVjdGVkRWxlbWVudCIsICJmb3JtRGF0YSIsICJfaW5kZXgiLCAicGFyYW1zIiwgImVsZW1lbnRzIiwgImlucHV0cyIsICJpc1VudXNlZCIsICJoaWRkZW4iLCAibWV0YUtleSIsICJWaWV3IiwgIl9WaWV3IiwgImxpdmVWaWV3RWwiLCAicGFyZW50VmlldyIsICJsaXZlUmVmZXJlciIsICJtYW5pZmVzdCIsICJvbkZpbmlzaGVkIiwgIm1zZ0NhbGxiYWNrIiwgImRvbSIsICJ2aWV3RWwiLCAidGFyZ2V0cyIsICJyYXdEaWZmIiwgImxpdmV2aWV3X3ZlcnNpb24iLCAibGl2ZV9wYXRjaCIsICJwaHhTdGF0aWMiLCAiaG9va0VsIiwgInBhdGNoIiwgInBoeE1vdW50ZWQiLCAiaGFzQmVlbkludm9rZWQiLCAibmV3SG9vayIsICJwcnVuZUNpZHMiLCAicmVtb3ZlZEVscyIsICJwaHhDaGlsZHJlbkFkZGVkIiwgInVwZGF0ZWRIb29rSWRzIiwgImVscyIsICJkZXN0cm95ZWRDSURzIiwgImhvb2tzIiwgInBoeENoYW5nZSIsICJvbGRGb3JtcyIsICJyb290RWwiLCAiZm9ybXNUb1JlY292ZXIiLCAibmV3Rm9ybSIsICJvbGRGb3JtIiwgImNoaWxkSWQiLCAiX2NoaWxkIiwgInBhcmVudENJRCIsICJob29rRWxJZCIsICJob29rTmFtZSIsICJob29rSWQiLCAiY2IiLCAicmVkaXIiLCAicmVsb2FkVG9rZW4iLCAidHJ1ZUNoaWxkRWwiLCAiY2FsbGVyUHVzaCIsICJyZWNlaXZlcyIsICJsYXRlbmN5IiwgIndpdGhMYXRlbmN5IiwgInJlZkdlbmVyYXRvciIsICJvbGRKb2luQ291bnQiLCAib25Mb2FkaW5nRG9uZSIsICJmaW5pc2giLCAiaG9va1JlcGx5IiwgIm9ubHlFbHMiLCAic2VsZWN0b3IiLCAibmV3UmVmIiwgImRpc2FibGVXaXRoIiwgImxvYWRpbmdFbHMiLCAibG9jayIsICJsb2NrQ29tcGxldGVQcm9taXNlIiwgImxvYWRpbmdDb21wbGV0ZVByb21pc2UiLCAiZGlzYWJsZVRleHQiLCAibG9ja0VsIiwgImNpZE9yU2VsZWN0b3IiLCAiX3Jlc3AiLCAiZW50cnlSZWYiLCAiZm9yY2VDaWQiLCAidXBsb2FkcyIsICJfZWxzIiwgIl91cGxvYWRzIiwgImF3YWl0aW5nU3VibWl0IiwgIl9vcHRzIiwgIl9jYWxsYmFjayIsICJmaWx0ZXJJZ25vcmVkIiwgImZpbHRlckRpc2FibGVzIiwgImZpbHRlckJ1dHRvbiIsICJmaWx0ZXJJbnB1dCIsICJmb3JtRWxlbWVudHMiLCAiZGlzYWJsZXMiLCAiYnV0dG9ucyIsICJidXR0b24iLCAiZm9ybUVscyIsICJwdXNoIiwgInByb3h5UmVmR2VuIiwgImpvaW5Db3VudEF0VXBsb2FkIiwgImlucHV0RWxzIiwgIm51bUZpbGVJbnB1dHNJblByb2dyZXNzIiwgInVwbG9hZGVyIiwgImVudHJ5X3JlZiIsICJmaWxlc09yQmxvYnMiLCAidGFyZ2V0RWxlbWVudCIsICJ0ZW1wbGF0ZURvbSIsICJwZW5kaW5nIiwgInRhcmdldEVsIiwgImxpbmtSZWYiLCAicmVmR2VuIiwgImZhbGxiYWNrIiwgIl9lcnJvciIsICJfdGltZW91dCIsICJ3aWxsRGVzdHJveUNJRHMiLCAiY29tcGxldGVseURlc3Ryb3lDSURzIiwgInBhcmVudFZpZXdFbCIsICJMaXZlU29ja2V0IiwgInVybCIsICJwaHhTb2NrZXQiLCAib3B0cyIsICJCSU5ESU5HX1BSRUZJWCIsICJjbG9zdXJlIiwgImNsb25lIiwgIkRFRkFVTFRTIiwgIkxPQURFUl9USU1FT1VUIiwgIk1BWF9SRUxPQURTIiwgIlJFTE9BRF9KSVRURVJfTUlOIiwgIlJFTE9BRF9KSVRURVJfTUFYIiwgIkZBSUxTQUZFX0pJVFRFUiIsICJUcmFuc2l0aW9uU2V0IiwgIlBIWF9MVl9ISVNUT1JZX1BPU0lUSU9OIiwgIl9lIiwgIlBIWF9MVl9QUk9GSUxFIiwgIlBIWF9MVl9ERUJVRyIsICJ1cHBlckJvdW5kTXMiLCAiUEhYX0xWX0xBVEVOQ1lfU0lNIiwgInN0ciIsICJkb0Nvbm5lY3QiLCAiY2FsbGJhY2siLCAidHJhbnNwb3J0IiwgImVsIiwgImVuY29kZWRKUyIsICJldmVudFR5cGUiLCAiZSIsICJ2aWV3IiwgImpzX2RlZmF1bHQiLCAicGh4RXZlbnQiLCAiZGF0YSIsICJraW5kIiwgImFyZ3MiLCAibmFtZSIsICJmdW5jIiwgInJlc3VsdCIsICJtc2dDYWxsYmFjayIsICJtc2ciLCAib2JqIiwgImRlYnVnIiwgInRpbWUiLCAib25TdGFydCIsICJvbkRvbmUiLCAiY2hhbm5lbCIsICJldmVudCIsICJjYiIsICJsYXRlbmN5IiwgImxvZyIsICJtaW5NcyIsICJtYXhNcyIsICJhZnRlck1zIiwgInRyaWVzIiwgImJyb3dzZXJfZGVmYXVsdCIsICJDT05TRUNVVElWRV9SRUxPQURTIiwgImNvdW50IiwgImhvb2tzX2RlZmF1bHQiLCAidG9waWMiLCAicGFyYW1zIiwgImJvZHkiLCAicm9vdHNGb3VuZCIsICJkb21fZGVmYXVsdCIsICJQSFhfVklFV19TRUxFQ1RPUiIsICJQSFhfUEFSRU5UX0lEIiwgInJvb3RFbCIsICJQSFhfTUFJTiIsICJ0byIsICJmbGFzaCIsICJyZWxvYWRUb2tlbiIsICJQSFhfUkVMT0FEX1NUQVRVUyIsICJocmVmIiwgImxpbmtSZWYiLCAibGl2ZVJlZmVyZXIiLCAicmVtb3ZlRWxzIiwgIm5ld01haW5FbCIsICJqb2luQ291bnQiLCAiZWxlbWVudHMiLCAic2tpcFN0aWNreSIsICJyZW1vdmVBdHRyIiwgInN0aWNraWVzIiwgInNpbGVuY2VFdmVudHMiLCAiUEhYX1NFU1NJT04iLCAiVmlldyIsICJjaGlsZEVsIiwgIm1heWJlIiwgInJvb3RJZCIsICJQSFhfUk9PVF9JRCIsICJyb290IiwgImlkIiwgImRlYWQiLCAidHlwZSIsICJ0YXJnZXRFbCIsICJfcGh4VGFyZ2V0IiwgIm1hdGNoS2V5IiwgIlBIWF9LRVkiLCAicHJlc3NlZEtleSIsICJwaHhUYXJnZXQiLCAiZHJvcFRhcmdldElkIiwgImNsb3Nlc3RQaHhCaW5kaW5nIiwgIlBIWF9EUk9QX1RBUkdFVCIsICJ0cnVlVGFyZ2V0IiwgImRyb3BUYXJnZXQiLCAiZmlsZXMiLCAiTGl2ZVVwbG9hZGVyIiwgIlBIWF9UUkFDS19VUExPQURTIiwgInVwbG9hZFRhcmdldCIsICJmIiwgImV2ZW50TmFtZSIsICJldmVudHMiLCAiYnJvd3NlckV2ZW50TmFtZSIsICJiaW5kaW5nIiwgIndpbmRvd0JpbmRpbmciLCAidGFyZ2V0UGh4RXZlbnQiLCAiYmluZGluZ05hbWUiLCAiY2xpY2siLCAidGFyZ2V0IiwgImNsaWNrU3RhcnRlZEF0VGFyZ2V0IiwgIlBIWF9SRUZfU1JDIiwgImNsaWNrU3RhcnRlZEF0IiwgInBoeENsaWNrQXdheSIsICJzY3JvbGxUaW1lciIsICJzdGF0ZSIsICJiYWNrVHlwZSIsICJzY3JvbGwiLCAicG9zaXRpb24iLCAiaXNGb3J3YXJkIiwgIlBIWF9MSVZFX0xJTksiLCAibGlua1N0YXRlIiwgIlBIWF9MSU5LX1NUQVRFIiwgInBoeENsaWNrIiwgInBheWxvYWQiLCAiaW5mbyIsICJkb25lIiwgInByb3RvY29sIiwgImhvc3QiLCAibmV3TG9jYXRpb24iLCAicGF0aG5hbWUiLCAic2VhcmNoIiwgIml0ZXJhdGlvbnMiLCAiZXh0ZXJuYWxGb3JtU3VibWl0dGVkIiwgInBoeFN1Ym1pdCIsICJwaHhDaGFuZ2UiLCAiaW5wdXQiLCAia2V5IiwgImlucHV0RXZlbnQiLCAiZm9ybUV2ZW50IiwgImRpc3BhdGNoZXIiLCAiY3VycmVudEl0ZXJhdGlvbnMiLCAiYXQiLCAibGFzdFR5cGUiLCAiUEhYX0hBU19GT0NVU0VEIiwgImZvcm0iLCAicGh4RGVib3VuY2UiLCAiUEhYX0RFQk9VTkNFIiwgInBoeFRocm90dGxlIiwgIlBIWF9USFJPVFRMRSIsICJkZWZhdWx0RGVib3VuY2UiLCAiZGVmYXVsdFRocm90dGxlIiwgImFzeW5jRmlsdGVyIiwgInNvdXJjZUVsIiwgInF1ZXJ5IiwgImRlZmF1bHRRdWVyeSIsICJhbGwiLCAidGltZXIiLCAib3AiLCAiaW1wb3J0X3RvcGJhciIsICJvd25LZXlzIiwgIm9iamVjdCIsICJlbnVtZXJhYmxlT25seSIsICJrZXlzIiwgInN5bWJvbHMiLCAic3ltIiwgIl9vYmplY3RTcHJlYWQyIiwgInRhcmdldCIsICJpIiwgInNvdXJjZSIsICJrZXkiLCAiX2RlZmluZVByb3BlcnR5IiwgIl90eXBlb2YiLCAib2JqIiwgInZhbHVlIiwgIl9leHRlbmRzIiwgIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwgImV4Y2x1ZGVkIiwgInNvdXJjZUtleXMiLCAiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwgInNvdXJjZVN5bWJvbEtleXMiLCAidmVyc2lvbiIsICJ1c2VyQWdlbnQiLCAicGF0dGVybiIsICJJRTExT3JMZXNzIiwgIkVkZ2UiLCAiRmlyZUZveCIsICJTYWZhcmkiLCAiSU9TIiwgIkNocm9tZUZvckFuZHJvaWQiLCAiY2FwdHVyZU1vZGUiLCAib24iLCAiZWwiLCAiZXZlbnQiLCAiZm4iLCAib2ZmIiwgIm1hdGNoZXMiLCAic2VsZWN0b3IiLCAiZ2V0UGFyZW50T3JIb3N0IiwgImNsb3Nlc3QiLCAiY3R4IiwgImluY2x1ZGVDVFgiLCAiUl9TUEFDRSIsICJ0b2dnbGVDbGFzcyIsICJuYW1lIiwgInN0YXRlIiwgImNsYXNzTmFtZSIsICJjc3MiLCAicHJvcCIsICJ2YWwiLCAic3R5bGUiLCAibWF0cml4IiwgInNlbGZPbmx5IiwgImFwcGxpZWRUcmFuc2Zvcm1zIiwgInRyYW5zZm9ybSIsICJtYXRyaXhGbiIsICJmaW5kIiwgInRhZ05hbWUiLCAiaXRlcmF0b3IiLCAibGlzdCIsICJpIiwgIm4iLCAiZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCIsICJzY3JvbGxpbmdFbGVtZW50IiwgImdldFJlY3QiLCAicmVsYXRpdmVUb0NvbnRhaW5pbmdCbG9jayIsICJyZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50IiwgInVuZG9TY2FsZSIsICJjb250YWluZXIiLCAiZWxSZWN0IiwgInRvcCIsICJsZWZ0IiwgImJvdHRvbSIsICJyaWdodCIsICJoZWlnaHQiLCAid2lkdGgiLCAiY29udGFpbmVyUmVjdCIsICJlbE1hdHJpeCIsICJzY2FsZVgiLCAic2NhbGVZIiwgImlzU2Nyb2xsZWRQYXN0IiwgImVsU2lkZSIsICJwYXJlbnRTaWRlIiwgInBhcmVudCIsICJnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudCIsICJlbFNpZGVWYWwiLCAicGFyZW50U2lkZVZhbCIsICJ2aXNpYmxlIiwgImdldENoaWxkIiwgImNoaWxkTnVtIiwgIm9wdGlvbnMiLCAiaW5jbHVkZURyYWdFbCIsICJjdXJyZW50Q2hpbGQiLCAiY2hpbGRyZW4iLCAiU29ydGFibGUiLCAibGFzdENoaWxkIiwgImxhc3QiLCAiaW5kZXgiLCAiZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQiLCAib2Zmc2V0TGVmdCIsICJvZmZzZXRUb3AiLCAid2luU2Nyb2xsZXIiLCAiaW5kZXhPZk9iamVjdCIsICJhcnIiLCAib2JqIiwgImtleSIsICJpbmNsdWRlU2VsZiIsICJlbGVtIiwgImdvdFNlbGYiLCAiZWxlbUNTUyIsICJleHRlbmQiLCAiZHN0IiwgInNyYyIsICJpc1JlY3RFcXVhbCIsICJyZWN0MSIsICJyZWN0MiIsICJfdGhyb3R0bGVUaW1lb3V0IiwgInRocm90dGxlIiwgImNhbGxiYWNrIiwgIm1zIiwgImFyZ3MiLCAiX3RoaXMiLCAiY2FuY2VsVGhyb3R0bGUiLCAic2Nyb2xsQnkiLCAieCIsICJ5IiwgImNsb25lIiwgIlBvbHltZXIiLCAiJCIsICJnZXRDaGlsZENvbnRhaW5pbmdSZWN0RnJvbUVsZW1lbnQiLCAiY29udGFpbmVyIiwgIm9wdGlvbnMiLCAiZ2hvc3RFbCIsICJyZWN0IiwgImNoaWxkIiwgIl9yZWN0JGxlZnQiLCAiX3JlY3QkdG9wIiwgIl9yZWN0JHJpZ2h0IiwgIl9yZWN0JGJvdHRvbSIsICJjbG9zZXN0IiwgImNoaWxkUmVjdCIsICJnZXRSZWN0IiwgImV4cGFuZG8iLCAiQW5pbWF0aW9uU3RhdGVNYW5hZ2VyIiwgImFuaW1hdGlvblN0YXRlcyIsICJhbmltYXRpb25DYWxsYmFja0lkIiwgImNoaWxkcmVuIiwgImNzcyIsICJTb3J0YWJsZSIsICJmcm9tUmVjdCIsICJfb2JqZWN0U3ByZWFkMiIsICJjaGlsZE1hdHJpeCIsICJtYXRyaXgiLCAic3RhdGUiLCAidGFyZ2V0IiwgImluZGV4T2ZPYmplY3QiLCAiY2FsbGJhY2siLCAiX3RoaXMiLCAiYW5pbWF0aW5nIiwgImFuaW1hdGlvblRpbWUiLCAidGltZSIsICJ0b1JlY3QiLCAicHJldkZyb21SZWN0IiwgInByZXZUb1JlY3QiLCAiYW5pbWF0aW5nUmVjdCIsICJ0YXJnZXRNYXRyaXgiLCAiaXNSZWN0RXF1YWwiLCAiY2FsY3VsYXRlUmVhbFRpbWUiLCAiY3VycmVudFJlY3QiLCAiZHVyYXRpb24iLCAiZWxNYXRyaXgiLCAic2NhbGVYIiwgInNjYWxlWSIsICJ0cmFuc2xhdGVYIiwgInRyYW5zbGF0ZVkiLCAicmVwYWludCIsICJwbHVnaW5zIiwgImRlZmF1bHRzIiwgIlBsdWdpbk1hbmFnZXIiLCAicGx1Z2luIiwgIm9wdGlvbiIsICJwIiwgImV2ZW50TmFtZSIsICJzb3J0YWJsZSIsICJldnQiLCAiZXZlbnROYW1lR2xvYmFsIiwgImVsIiwgInBsdWdpbk5hbWUiLCAiaW5pdGlhbGl6ZWQiLCAiX2V4dGVuZHMiLCAibW9kaWZpZWQiLCAibmFtZSIsICJldmVudFByb3BlcnRpZXMiLCAidmFsdWUiLCAibW9kaWZpZWRWYWx1ZSIsICJkaXNwYXRjaEV2ZW50IiwgIl9yZWYiLCAicm9vdEVsIiwgInRhcmdldEVsIiwgImNsb25lRWwiLCAidG9FbCIsICJmcm9tRWwiLCAib2xkSW5kZXgiLCAibmV3SW5kZXgiLCAib2xkRHJhZ2dhYmxlSW5kZXgiLCAibmV3RHJhZ2dhYmxlSW5kZXgiLCAib3JpZ2luYWxFdmVudCIsICJwdXRTb3J0YWJsZSIsICJleHRyYUV2ZW50UHJvcGVydGllcyIsICJvbk5hbWUiLCAiSUUxMU9yTGVzcyIsICJFZGdlIiwgImFsbEV2ZW50UHJvcGVydGllcyIsICJfZXhjbHVkZWQiLCAicGx1Z2luRXZlbnQiLCAiZGF0YSIsICJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCAiZHJhZ0VsIiwgInBhcmVudEVsIiwgIm5leHRFbCIsICJsYXN0RG93bkVsIiwgImNsb25lSGlkZGVuIiwgIm1vdmVkIiwgIl9oaWRlR2hvc3RGb3JUYXJnZXQiLCAiX3VuaGlkZUdob3N0Rm9yVGFyZ2V0IiwgIl9kaXNwYXRjaEV2ZW50IiwgImluZm8iLCAiYWN0aXZlR3JvdXAiLCAiYXdhaXRpbmdEcmFnU3RhcnRlZCIsICJpZ25vcmVOZXh0Q2xpY2siLCAic29ydGFibGVzIiwgInRhcEV2dCIsICJ0b3VjaEV2dCIsICJsYXN0RHgiLCAibGFzdER5IiwgInRhcERpc3RhbmNlTGVmdCIsICJ0YXBEaXN0YW5jZVRvcCIsICJsYXN0VGFyZ2V0IiwgImxhc3REaXJlY3Rpb24iLCAicGFzdEZpcnN0SW52ZXJ0VGhyZXNoIiwgImlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQiLCAidGFyZ2V0TW92ZURpc3RhbmNlIiwgImdob3N0UmVsYXRpdmVQYXJlbnQiLCAiZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGwiLCAiX3NpbGVudCIsICJzYXZlZElucHV0Q2hlY2tlZCIsICJkb2N1bWVudEV4aXN0cyIsICJQb3NpdGlvbkdob3N0QWJzb2x1dGVseSIsICJJT1MiLCAiQ1NTRmxvYXRQcm9wZXJ0eSIsICJzdXBwb3J0RHJhZ2dhYmxlIiwgIkNocm9tZUZvckFuZHJvaWQiLCAic3VwcG9ydENzc1BvaW50ZXJFdmVudHMiLCAiX2RldGVjdERpcmVjdGlvbiIsICJlbENTUyIsICJlbFdpZHRoIiwgImNoaWxkMSIsICJnZXRDaGlsZCIsICJjaGlsZDIiLCAiZmlyc3RDaGlsZENTUyIsICJzZWNvbmRDaGlsZENTUyIsICJmaXJzdENoaWxkV2lkdGgiLCAic2Vjb25kQ2hpbGRXaWR0aCIsICJ0b3VjaGluZ1NpZGVDaGlsZDIiLCAiX2RyYWdFbEluUm93Q29sdW1uIiwgImRyYWdSZWN0IiwgInRhcmdldFJlY3QiLCAidmVydGljYWwiLCAiZHJhZ0VsUzFPcHAiLCAiZHJhZ0VsUzJPcHAiLCAiZHJhZ0VsT3BwTGVuZ3RoIiwgInRhcmdldFMxT3BwIiwgInRhcmdldFMyT3BwIiwgInRhcmdldE9wcExlbmd0aCIsICJfZGV0ZWN0TmVhcmVzdEVtcHR5U29ydGFibGUiLCAieCIsICJ5IiwgInJldCIsICJ0aHJlc2hvbGQiLCAibGFzdENoaWxkIiwgImluc2lkZUhvcml6b250YWxseSIsICJpbnNpZGVWZXJ0aWNhbGx5IiwgIl9wcmVwYXJlR3JvdXAiLCAidG9GbiIsICJwdWxsIiwgInRvIiwgImZyb20iLCAic2FtZUdyb3VwIiwgIm90aGVyR3JvdXAiLCAiZ3JvdXAiLCAib3JpZ2luYWxHcm91cCIsICJfdHlwZW9mIiwgIm5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50IiwgIm5lYXJlc3QiLCAiZXZlbnQiLCAiaSIsICJfY2hlY2tPdXRzaWRlVGFyZ2V0RWwiLCAiZGF0YVRyYW5zZmVyIiwgIlNhZmFyaSIsICJmbiIsICJvbiIsICJwcmV2ZW50T25GaWx0ZXIiLCAidHlwZSIsICJ0b3VjaCIsICJvcmlnaW5hbFRhcmdldCIsICJmaWx0ZXIiLCAiX3NhdmVJbnB1dENoZWNrZWRTdGF0ZSIsICJpbmRleCIsICJjcml0ZXJpYSIsICJvd25lckRvY3VtZW50IiwgImRyYWdTdGFydEZuIiwgIkZpcmVGb3giLCAidG9nZ2xlQ2xhc3MiLCAiZmluZCIsICJfZGlzYWJsZURyYWdnYWJsZSIsICJvZmYiLCAiX25leHRUaWNrIiwgImZhbGxiYWNrIiwgInBhcmVudCIsICJpbnNlcnRlZCIsICJnZXRQYXJlbnRPckhvc3QiLCAiZmFsbGJhY2tUb2xlcmFuY2UiLCAiZmFsbGJhY2tPZmZzZXQiLCAiZ2hvc3RNYXRyaXgiLCAicmVsYXRpdmVTY3JvbGxPZmZzZXQiLCAiZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQiLCAiZHgiLCAiZHkiLCAiY3NzTWF0cml4IiwgImdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQiLCAiY2xvbmUiLCAicmV2ZXJ0IiwgImFjdGl2ZVNvcnRhYmxlIiwgImlzT3duZXIiLCAiY2FuU29ydCIsICJmcm9tU29ydGFibGUiLCAiY29tcGxldGVkRmlyZWQiLCAiZHJhZ092ZXJFdmVudCIsICJleHRyYSIsICJjb21wbGV0ZWQiLCAiYWZ0ZXIiLCAiX29uTW92ZSIsICJjaGFuZ2VkIiwgImNhcHR1cmUiLCAiaW5zZXJ0aW9uIiwgImVsTGFzdENoaWxkIiwgIl9naG9zdElzTGFzdCIsICJfZ2hvc3RJc0ZpcnN0IiwgImZpcnN0Q2hpbGQiLCAiZGlyZWN0aW9uIiwgInRhcmdldEJlZm9yZUZpcnN0U3dhcCIsICJkaWZmZXJlbnRMZXZlbCIsICJkaWZmZXJlbnRSb3dDb2wiLCAic2lkZTEiLCAic2Nyb2xsZWRQYXN0VG9wIiwgImlzU2Nyb2xsZWRQYXN0IiwgInNjcm9sbEJlZm9yZSIsICJfZ2V0U3dhcERpcmVjdGlvbiIsICJzaWJsaW5nIiwgImRyYWdJbmRleCIsICJuZXh0U2libGluZyIsICJtb3ZlVmVjdG9yIiwgIl91bnNpbGVudCIsICJzY3JvbGxCeSIsICJfY2FuY2VsTmV4dFRpY2siLCAiX2dsb2JhbERyYWdPdmVyIiwgIm9yZGVyIiwgIm4iLCAiX2dlbmVyYXRlSWQiLCAidXNlQW5pbWF0aW9uIiwgIml0ZW1zIiwgImlkIiwgInN0b3JlIiwgInNlbGVjdG9yIiwgIndpbGxJbnNlcnRBZnRlciIsICJvbk1vdmVGbiIsICJyZXRWYWwiLCAiZmlyc3RFbFJlY3QiLCAiY2hpbGRDb250YWluaW5nUmVjdCIsICJzcGFjZXIiLCAibGFzdEVsUmVjdCIsICJzd2FwVGhyZXNob2xkIiwgImludmVydGVkU3dhcFRocmVzaG9sZCIsICJpbnZlcnRTd2FwIiwgImlzTGFzdFRhcmdldCIsICJtb3VzZU9uQXhpcyIsICJ0YXJnZXRMZW5ndGgiLCAidGFyZ2V0UzEiLCAidGFyZ2V0UzIiLCAiaW52ZXJ0IiwgIl9nZXRJbnNlcnREaXJlY3Rpb24iLCAic3RyIiwgInN1bSIsICJyb290IiwgImlucHV0cyIsICJpZHgiLCAiZXh0ZW5kIiwgInRocm90dGxlIiwgImVsZW1lbnQiLCAiX2xlbiIsICJfa2V5IiwgInZlcnNpb24iLCAiYXV0b1Njcm9sbHMiLCAic2Nyb2xsRWwiLCAic2Nyb2xsUm9vdEVsIiwgInNjcm9sbGluZyIsICJsYXN0QXV0b1Njcm9sbFgiLCAibGFzdEF1dG9TY3JvbGxZIiwgInRvdWNoRXZ0JDEiLCAicG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwiLCAiQXV0b1Njcm9sbFBsdWdpbiIsICJBdXRvU2Nyb2xsIiwgIl9yZWYyIiwgImNsZWFyUG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwiLCAiY2xlYXJBdXRvU2Nyb2xscyIsICJjYW5jZWxUaHJvdHRsZSIsICJlbGVtIiwgImF1dG9TY3JvbGwiLCAib2dFbGVtU2Nyb2xsZXIiLCAiZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQiLCAibmV3RWxlbSIsICJpc0ZhbGxiYWNrIiwgInNlbnMiLCAic3BlZWQiLCAid2luU2Nyb2xsZXIiLCAic2Nyb2xsVGhpc0luc3RhbmNlIiwgInNjcm9sbEN1c3RvbUZuIiwgImxheWVyc091dCIsICJjdXJyZW50UGFyZW50IiwgInRvcCIsICJib3R0b20iLCAibGVmdCIsICJyaWdodCIsICJ3aWR0aCIsICJoZWlnaHQiLCAiY2FuU2Nyb2xsWCIsICJjYW5TY3JvbGxZIiwgInNjcm9sbFdpZHRoIiwgInNjcm9sbEhlaWdodCIsICJzY3JvbGxQb3NYIiwgInNjcm9sbFBvc1kiLCAidngiLCAidnkiLCAic2Nyb2xsT2Zmc2V0WSIsICJzY3JvbGxPZmZzZXRYIiwgImRyb3AiLCAiZGlzcGF0Y2hTb3J0YWJsZUV2ZW50IiwgImhpZGVHaG9zdEZvclRhcmdldCIsICJ1bmhpZGVHaG9zdEZvclRhcmdldCIsICJ0b1NvcnRhYmxlIiwgIlJldmVydCIsICJfcmVmMyIsICJSZW1vdmUiLCAiX3JlZjQiLCAicGFyZW50U29ydGFibGUiLCAiU29ydGFibGUiLCAiQXV0b1Njcm9sbFBsdWdpbiIsICJSZW1vdmUiLCAiUmV2ZXJ0IiwgInNvcnRhYmxlX2VzbV9kZWZhdWx0IiwgInNvcnRhYmxlX2RlZmF1bHQiLCAic29ydGFibGUiLCAic29ydGFibGVfZXNtX2RlZmF1bHQiLCAiZXZ0IiwgImltcG9ydF9zaG93ZG93biIsICJleHRlbmQiLCAiZGVzdGluYXRpb24iLCAiaSIsICJzb3VyY2UiLCAia2V5IiwgInJlcGVhdCIsICJjaGFyYWN0ZXIiLCAiY291bnQiLCAidHJpbUxlYWRpbmdOZXdsaW5lcyIsICJzdHJpbmciLCAidHJpbVRyYWlsaW5nTmV3bGluZXMiLCAiaW5kZXhFbmQiLCAiYmxvY2tFbGVtZW50cyIsICJpc0Jsb2NrIiwgIm5vZGUiLCAiaXMiLCAidm9pZEVsZW1lbnRzIiwgImlzVm9pZCIsICJoYXNWb2lkIiwgImhhcyIsICJtZWFuaW5nZnVsV2hlbkJsYW5rRWxlbWVudHMiLCAiaXNNZWFuaW5nZnVsV2hlbkJsYW5rIiwgImhhc01lYW5pbmdmdWxXaGVuQmxhbmsiLCAidGFnTmFtZXMiLCAidGFnTmFtZSIsICJydWxlcyIsICJjb250ZW50IiwgIm9wdGlvbnMiLCAiaExldmVsIiwgInVuZGVybGluZSIsICJwYXJlbnQiLCAicHJlZml4IiwgInN0YXJ0IiwgImluZGV4IiwgImNsYXNzTmFtZSIsICJsYW5ndWFnZSIsICJjb2RlIiwgImZlbmNlQ2hhciIsICJmZW5jZVNpemUiLCAiZmVuY2VJbkNvZGVSZWdleCIsICJtYXRjaCIsICJmZW5jZSIsICJocmVmIiwgInRpdGxlIiwgImNsZWFuQXR0cmlidXRlIiwgInJlcGxhY2VtZW50IiwgInJlZmVyZW5jZSIsICJpZCIsICJyZWZlcmVuY2VzIiwgImhhc1NpYmxpbmdzIiwgImlzQ29kZUJsb2NrIiwgImV4dHJhU3BhY2UiLCAiZGVsaW1pdGVyIiwgIm1hdGNoZXMiLCAiYWx0IiwgInNyYyIsICJ0aXRsZVBhcnQiLCAiYXR0cmlidXRlIiwgIlJ1bGVzIiwgInJ1bGUiLCAiZmlsdGVyIiwgImZpbmRSdWxlIiwgImZuIiwgImZpbHRlclZhbHVlIiwgImNvbGxhcHNlV2hpdGVzcGFjZSIsICJlbGVtZW50IiwgImlzUHJlIiwgInByZXZUZXh0IiwgImtlZXBMZWFkaW5nV3MiLCAicHJldiIsICJuZXh0IiwgInRleHQiLCAicmVtb3ZlIiwgIm5leHROb2RlIiwgImN1cnJlbnQiLCAicm9vdCIsICJjYW5QYXJzZUhUTUxOYXRpdmVseSIsICJQYXJzZXIiLCAiY2FuUGFyc2UiLCAiY3JlYXRlSFRNTFBhcnNlciIsICJzaG91bGRVc2VBY3RpdmVYIiwgImRvYyIsICJ1c2VBY3RpdmVYIiwgIkhUTUxQYXJzZXIiLCAiUm9vdE5vZGUiLCAiaW5wdXQiLCAiaHRtbFBhcnNlciIsICJpc1ByZU9yQ29kZSIsICJfaHRtbFBhcnNlciIsICJOb2RlIiwgImlzQmxhbmsiLCAiZmxhbmtpbmdXaGl0ZXNwYWNlIiwgImVkZ2VzIiwgImVkZ2VXaGl0ZXNwYWNlIiwgImlzRmxhbmtlZEJ5V2hpdGVzcGFjZSIsICJtIiwgInNpZGUiLCAic2libGluZyIsICJyZWdFeHAiLCAiaXNGbGFua2VkIiwgInJlZHVjZSIsICJlc2NhcGVzIiwgIlR1cm5kb3duU2VydmljZSIsICJkZWZhdWx0cyIsICJjYW5Db252ZXJ0IiwgIm91dHB1dCIsICJwcm9jZXNzIiwgInBvc3RQcm9jZXNzIiwgInBsdWdpbiIsICJhY2N1bXVsYXRvciIsICJlc2NhcGUiLCAicGFyZW50Tm9kZSIsICJzZWxmIiwgInJlcGxhY2VtZW50Rm9yTm9kZSIsICJqb2luIiwgIndoaXRlc3BhY2UiLCAiczEiLCAiczIiLCAibmxzIiwgInNlcGFyYXRvciIsICJ0dXJuZG93bl9icm93c2VyX2VzX2RlZmF1bHQiLCAiYXR0YWNobWVudFNlbGVjdG9yIiwgImF0dGFjaG1lbnRzIiwgInByZXZpZXciLCAicHJlc2VudGF0aW9uIiwgImNhcHRpb24iLCAibmFtZSIsICJzaXplIiwgImZpbGUiLCAiYXR0cmlidXRlcyIsICJkZWZhdWx0IiwgInRhZ05hbWUiLCAicGFyc2UiLCAicXVvdGUiLCAibmVzdGFibGUiLCAiaGVhZGluZzEiLCAidGVybWluYWwiLCAiYnJlYWtPblJldHVybiIsICJncm91cCIsICJjb2RlIiwgImh0bWxBdHRyaWJ1dGVzIiwgInRleHQiLCAicGxhaW50ZXh0IiwgImJ1bGxldExpc3QiLCAiYnVsbGV0IiwgImxpc3RBdHRyaWJ1dGUiLCAidGVzdCIsICJlbGVtZW50IiwgInBhcmVudE5vZGUiLCAidGhpcyIsICJudW1iZXJMaXN0IiwgIm51bWJlciIsICJhdHRhY2htZW50R2FsbGVyeSIsICJleGNsdXNpdmUiLCAiX2VsZW1lbnQkdGFnTmFtZSIsICJ0b0xvd2VyQ2FzZSIsICJhbmRyb2lkVmVyc2lvbk1hdGNoIiwgIm5hdmlnYXRvciIsICJ1c2VyQWdlbnQiLCAibWF0Y2giLCAiYW5kcm9pZFZlcnNpb24iLCAicGFyc2VJbnQiLCAiYnJvd3NlciQxIiwgImNvbXBvc2VzRXhpc3RpbmdUZXh0IiwgInJlY2VudEFuZHJvaWQiLCAic2Ftc3VuZ0FuZHJvaWQiLCAiZm9yY2VzT2JqZWN0UmVzaXppbmciLCAic3VwcG9ydHNJbnB1dEV2ZW50cyIsICJJbnB1dEV2ZW50IiwgImV2ZXJ5IiwgInByb3AiLCAicHJvdG90eXBlIiwgImRvbXB1cmlmeSIsICJBRERfQVRUUiIsICJTQUZFX0ZPUl9YTUwiLCAiUkVUVVJOX0RPTSIsICJsYW5nJDEiLCAiYXR0YWNoRmlsZXMiLCAiYm9sZCIsICJidWxsZXRzIiwgImJ5dGUiLCAiYnl0ZXMiLCAiY2FwdGlvblBsYWNlaG9sZGVyIiwgImluZGVudCIsICJpdGFsaWMiLCAibGluayIsICJudW1iZXJzIiwgIm91dGRlbnQiLCAicmVkbyIsICJyZW1vdmUiLCAic3RyaWtlIiwgInVuZG8iLCAidW5saW5rIiwgInVybCIsICJ1cmxQbGFjZWhvbGRlciIsICJHQiIsICJLQiIsICJNQiIsICJQQiIsICJUQiIsICJzaXplcyIsICJsYW5nIiwgImZpbGVfc2l6ZV9mb3JtYXR0aW5nIiwgInByZWZpeCIsICJwcmVjaXNpb24iLCAiZm9ybWF0dGVyIiwgImNvbmNhdCIsICJiYXNlIiwgImV4cCIsICJNYXRoIiwgImZsb29yIiwgImxvZyIsICJ3aXRob3V0SW5zaWduaWZpY2FudFplcm9zIiwgInBvdyIsICJ0b0ZpeGVkIiwgInJlcGxhY2UiLCAiWkVST19XSURUSF9TUEFDRSIsICJOT05fQlJFQUtJTkdfU1BBQ0UiLCAiZXh0ZW5kIiwgInByb3BlcnRpZXMiLCAia2V5IiwgInZhbHVlIiwgImh0bWwiLCAiZG9jdW1lbnQiLCAiZG9jdW1lbnRFbGVtZW50IiwgIm1hdGNoZXMiLCAiaGFuZGxlRXZlbnQiLCAiZXZlbnROYW1lIiwgIm9uRWxlbWVudCIsICJtYXRjaGluZ1NlbGVjdG9yIiwgIndpdGhDYWxsYmFjayIsICJpblBoYXNlIiwgInByZXZlbnREZWZhdWx0IiwgInRpbWVzIiwgImFyZ3VtZW50cyIsICJsZW5ndGgiLCAidW5kZWZpbmVkIiwgInNlbGVjdG9yIiwgInVzZUNhcHR1cmUiLCAiaGFuZGxlciIsICJldmVudCIsICJkZXN0cm95IiwgInRhcmdldCIsICJmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZSIsICJjYWxsIiwgInJlbW92ZUV2ZW50TGlzdGVuZXIiLCAiYWRkRXZlbnRMaXN0ZW5lciIsICJ0cmlnZ2VyRXZlbnQiLCAiYnViYmxlcyIsICJjYW5jZWxhYmxlIiwgImNyZWF0ZUV2ZW50IiwgImluaXRFdmVudCIsICJkaXNwYXRjaEV2ZW50IiwgImVsZW1lbnRNYXRjaGVzU2VsZWN0b3IiLCAibm9kZVR5cGUiLCAibm9kZSIsICJ1bnRpbE5vZGUiLCAiTm9kZSIsICJFTEVNRU5UX05PREUiLCAiY2xvc2VzdCIsICJpbm5lckVsZW1lbnRJc0FjdGl2ZSIsICJhY3RpdmVFbGVtZW50IiwgImVsZW1lbnRDb250YWluc05vZGUiLCAiZmluZENoaWxkSW5kZXhPZk5vZGUiLCAiX25vZGUiLCAiY2hpbGRJbmRleCIsICJwcmV2aW91c1NpYmxpbmciLCAicmVtb3ZlTm9kZSIsICJfbm9kZSRwYXJlbnROb2RlIiwgInJlbW92ZUNoaWxkIiwgIndhbGtUcmVlIiwgInRyZWUiLCAib25seU5vZGVzT2ZUeXBlIiwgInVzaW5nRmlsdGVyIiwgImV4cGFuZEVudGl0eVJlZmVyZW5jZXMiLCAid2hhdFRvU2hvdyIsICJOb2RlRmlsdGVyIiwgIlNIT1dfRUxFTUVOVCIsICJTSE9XX1RFWFQiLCAiU0hPV19DT01NRU5UIiwgIlNIT1dfQUxMIiwgImNyZWF0ZVRyZWVXYWxrZXIiLCAibWFrZUVsZW1lbnQiLCAidGFnIiwgIm9wdGlvbnMiLCAiY3JlYXRlRWxlbWVudCIsICJlZGl0YWJsZSIsICJjb250ZW50ZWRpdGFibGUiLCAic2V0QXR0cmlidXRlIiwgInN0eWxlIiwgImRhdGEiLCAiZGF0YXNldCIsICJjbGFzc05hbWUiLCAic3BsaXQiLCAiZm9yRWFjaCIsICJjbGFzc0xpc3QiLCAiYWRkIiwgInRleHRDb250ZW50IiwgImNoaWxkTm9kZXMiLCAiY2hpbGROb2RlIiwgImFwcGVuZENoaWxkIiwgImJsb2NrVGFnTmFtZXMiLCAiZ2V0QmxvY2tUYWdOYW1lcyIsICJibG9ja0F0dHJpYnV0ZXMiLCAicHVzaCIsICJub2RlSXNCbG9ja0NvbnRhaW5lciIsICJub2RlSXNCbG9ja1N0YXJ0Q29tbWVudCIsICJmaXJzdENoaWxkIiwgIm5vZGVJc0Jsb2NrU3RhcnQiLCAic3RyaWN0IiwgImluY2x1ZGVzIiwgIm5vZGVJc0NvbW1lbnROb2RlIiwgIkNPTU1FTlRfTk9ERSIsICJub2RlSXNDdXJzb3JUYXJnZXQiLCAibm9kZUlzVGV4dE5vZGUiLCAidHJpeEN1cnNvclRhcmdldCIsICJub2RlSXNBdHRhY2htZW50RWxlbWVudCIsICJub2RlSXNFbXB0eVRleHROb2RlIiwgIlRFWFRfTk9ERSIsICJpbnB1dCIsICJsZXZlbDJFbmFibGVkIiwgImdldExldmVsIiwgImJyb3dzZXIiLCAicGlja0ZpbGVzIiwgImNhbGxiYWNrIiwgInR5cGUiLCAibXVsdGlwbGUiLCAiaGlkZGVuIiwgImlkIiwgImZpbGVJbnB1dElkIiwgImZpbGVzIiwgImdldEVsZW1lbnRCeUlkIiwgImJvZHkiLCAiY2xpY2siLCAicGFyc2VyIiwgInJlbW92ZUJsYW5rVGFibGVDZWxscyIsICJ0YWJsZUNlbGxTZXBhcmF0b3IiLCAidGFibGVSb3dTZXBhcmF0b3IiLCAidGV4dF9hdHRyaWJ1dGVzIiwgImluaGVyaXRhYmxlIiwgIndpbmRvdyIsICJnZXRDb21wdXRlZFN0eWxlIiwgImZvbnRXZWlnaHQiLCAiZm9udFN0eWxlIiwgImhyZWYiLCAiZ3JvdXBUYWdOYW1lIiwgImdldEF0dHJpYnV0ZSIsICJmcm96ZW4iLCAiYmFja2dyb3VuZENvbG9yIiwgInRvb2xiYXIiLCAiZ2V0RGVmYXVsdEhUTUwiLCAiaW50ZXJ2YWwiLCAieiIsICJpIiwgIm4iLCAiYSIsICJhdHRhY2htZW50IiwgImF0dGFjaG1lbnRDYXB0aW9uIiwgImF0dGFjaG1lbnRDYXB0aW9uRWRpdG9yIiwgImF0dGFjaG1lbnRNZXRhZGF0YSIsICJhdHRhY2htZW50TWV0YWRhdGFDb250YWluZXIiLCAiYXR0YWNobWVudE5hbWUiLCAiYXR0YWNobWVudFByb2dyZXNzIiwgImF0dGFjaG1lbnRTaXplIiwgImF0dGFjaG1lbnRUb29sYmFyIiwgImwiLCAiaCIsICJfIiwgImMiLCAiaiIsICJXIiwgIlUiLCAiViIsICJCYXNpY09iamVjdCIsICJleHByZXNzaW9uIiwgInRvTWV0aG9kIiwgInRvUHJvcGVydHkiLCAib3B0aW9uYWwiLCAicGFyc2VQcm94eU1ldGhvZEV4cHJlc3Npb24iLCAic3ViamVjdCIsICJvYmplY3QiLCAiX3RoaXMkdG9NZXRob2QiLCAiX29iamVjdCIsICJhcHBseSIsICJwcm94eU1ldGhvZEV4cHJlc3Npb25QYXR0ZXJuIiwgIkVycm9yIiwgImFyZ3MiLCAiRnVuY3Rpb24iLCAiUmVnRXhwIiwgIkciLCAiWSIsICIkIiwgIlVURjE2U3RyaW5nIiwgImJveCIsICJmcm9tVUNTMlN0cmluZyIsICJ0b1N0cmluZyIsICJ1Y3MyU3RyaW5nIiwgInVjczJkZWNvZGUiLCAiY29kZXBvaW50cyIsICJ1Y3MyZW5jb2RlIiwgImNvbnN0cnVjdG9yIiwgInN1cGVyIiwgInVjczJMZW5ndGgiLCAib2Zmc2V0VG9VQ1MyT2Zmc2V0IiwgIm9mZnNldCIsICJzbGljZSIsICJtYXgiLCAib2Zmc2V0RnJvbVVDUzJPZmZzZXQiLCAidWNzMk9mZnNldCIsICJmcm9tQ29kZXBvaW50cyIsICJjaGFyQXQiLCAiaXNFcXVhbFRvIiwgInRvSlNPTiIsICJnZXRDYWNoZUtleSIsICJoYXNBcnJheUZyb20iLCAiX0FycmF5JGZyb20iLCAiQXJyYXkiLCAiZnJvbSIsICJoYXNTdHJpbmdDb2RlUG9pbnRBdCIsICJfJGNvZGVQb2ludEF0IiwgImNvZGVQb2ludEF0IiwgImhhc1N0cmluZ0Zyb21Db2RlUG9pbnQiLCAiX1N0cmluZyRmcm9tQ29kZVBvaW50IiwgIlN0cmluZyIsICJmcm9tQ29kZVBvaW50IiwgInN0cmluZyIsICJtYXAiLCAiY2hhciIsICJvdXRwdXQiLCAiY291bnRlciIsICJjaGFyQ29kZUF0IiwgImV4dHJhIiwgImFycmF5IiwgInJlc3VsdCIsICJmcm9tQ2hhckNvZGUiLCAiam9pbiIsICJUcml4T2JqZWN0IiwgImpzb25TdHJpbmciLCAiZnJvbUpTT04iLCAiSlNPTiIsICJoYXNTYW1lQ29uc3RydWN0b3JBcyIsICJpbnNwZWN0IiwgInBhcnRzIiwgImNvbnRlbnRzIiwgImNvbnRlbnRzRm9ySW5zcGVjdGlvbiIsICJ0b0pTT05TdHJpbmciLCAic3RyaW5naWZ5IiwgInRvVVRGMTZTdHJpbmciLCAiYXJyYXlzQXJlRXF1YWwiLCAiYiIsICJpbmRleCIsICJzcGxpY2VBcnJheSIsICJfbGVuIiwgIl9rZXkiLCAic3BsaWNlIiwgIlJUTF9QQVRURVJOIiwgImdldERpcmVjdGlvbiIsICJkaXIiLCAiZGlyTmFtZSIsICJ0ZXh0QXJlYSIsICJmb3JtIiwgInN1cHBvcnRzRGlyTmFtZSIsICJGb3JtRGF0YSIsICJoYXMiLCAic3VwcG9ydHNEaXJTZWxlY3RvciIsICJnZXQiLCAidHJpbSIsICJhbGxBdHRyaWJ1dGVOYW1lcyIsICJibG9ja0F0dHJpYnV0ZU5hbWVzIiwgInRleHRBdHRyaWJ1dGVOYW1lcyIsICJsaXN0QXR0cmlidXRlTmFtZXMiLCAiZ2V0QWxsQXR0cmlidXRlTmFtZXMiLCAiZ2V0VGV4dEF0dHJpYnV0ZU5hbWVzIiwgImdldEJsb2NrQXR0cmlidXRlTmFtZXMiLCAiZ2V0QmxvY2tDb25maWciLCAiYXR0cmlidXRlTmFtZSIsICJjb25maWciLCAiT2JqZWN0IiwgImtleXMiLCAiZ2V0VGV4dENvbmZpZyIsICJpbnN0YWxsRGVmYXVsdENTU0ZvclRhZ05hbWUiLCAiZGVmYXVsdENTUyIsICJpbnNlcnRTdHlsZUVsZW1lbnRGb3JUYWdOYW1lIiwgIm5vbmNlIiwgImdldENTUE5vbmNlIiwgImhlYWQiLCAiaW5zZXJ0QmVmb3JlIiwgImdldE1ldGFFbGVtZW50IiwgImNvbnRlbnQiLCAicXVlcnlTZWxlY3RvciIsICJ0ZXN0VHJhbnNmZXJEYXRhIiwgImRhdGFUcmFuc2ZlcklzUGxhaW5UZXh0IiwgImRhdGFUcmFuc2ZlciIsICJnZXREYXRhIiwgIkRPTVBhcnNlciIsICJwYXJzZUZyb21TdHJpbmciLCAia2V5RXZlbnRJc0tleWJvYXJkQ29tbWFuZCIsICJwbGF0Zm9ybSIsICJtZXRhS2V5IiwgImN0cmxLZXkiLCAiZGVmZXIiLCAiZm4iLCAic2V0VGltZW91dCIsICJjb3B5T2JqZWN0IiwgIm9iamVjdHNBcmVFcXVhbCIsICJub3JtYWxpemVSYW5nZSIsICJyYW5nZSIsICJpc0FycmF5IiwgImNvcHlWYWx1ZSIsICJyYW5nZUlzQ29sbGFwc2VkIiwgInN0YXJ0IiwgImVuZCIsICJyYW5nZVZhbHVlc0FyZUVxdWFsIiwgInJhbmdlc0FyZUVxdWFsIiwgImxlZnRSYW5nZSIsICJyaWdodFJhbmdlIiwgImxlZnRTdGFydCIsICJsZWZ0RW5kIiwgInJpZ2h0U3RhcnQiLCAicmlnaHRFbmQiLCAibGVmdCIsICJyaWdodCIsICJTZWxlY3Rpb25DaGFuZ2VPYnNlcnZlciIsICJ1cGRhdGUiLCAiYmluZCIsICJzZWxlY3Rpb25NYW5hZ2VycyIsICJzdGFydGVkIiwgInN0b3AiLCAicmVnaXN0ZXJTZWxlY3Rpb25NYW5hZ2VyIiwgInNlbGVjdGlvbk1hbmFnZXIiLCAidW5yZWdpc3RlclNlbGVjdGlvbk1hbmFnZXIiLCAiZmlsdGVyIiwgInNtIiwgIm5vdGlmeVNlbGVjdGlvbk1hbmFnZXJzT2ZTZWxlY3Rpb25DaGFuZ2UiLCAic2VsZWN0aW9uRGlkQ2hhbmdlIiwgInJlc2V0IiwgInNlbGVjdGlvbkNoYW5nZU9ic2VydmVyIiwgImdldERPTVNlbGVjdGlvbiIsICJzZWxlY3Rpb24iLCAiZ2V0U2VsZWN0aW9uIiwgInJhbmdlQ291bnQiLCAiZ2V0RE9NUmFuZ2UiLCAiX2dldERPTVNlbGVjdGlvbiIsICJkb21SYW5nZSIsICJnZXRSYW5nZUF0IiwgImRvbVJhbmdlSXNQcml2YXRlIiwgInNldERPTVJhbmdlIiwgInJlbW92ZUFsbFJhbmdlcyIsICJhZGRSYW5nZSIsICJub2RlSXNQcml2YXRlIiwgInN0YXJ0Q29udGFpbmVyIiwgImVuZENvbnRhaW5lciIsICJnZXRQcm90b3R5cGVPZiIsICJub3JtYWxpemVTcGFjZXMiLCAiYnJlYWthYmxlV2hpdGVzcGFjZVBhdHRlcm4iLCAic3F1aXNoQnJlYWthYmxlV2hpdGVzcGFjZSIsICJzb3VyY2UiLCAidXRmMTZTdHJpbmdEaWZmZXJlbmNlcyIsICJkaWZmQSIsICJ1dGYxNlN0cmluZ0RpZmZlcmVuY2UiLCAidXRmMTZTdHJpbmciLCAiZGlmZkIiLCAibGVmdEluZGV4IiwgInJpZ2h0SW5kZXhBIiwgInJpZ2h0SW5kZXhCIiwgIkhhc2giLCAiZnJvbUNvbW1vbkF0dHJpYnV0ZXNPZk9iamVjdHMiLCAib2JqZWN0cyIsICJoYXNoIiwgImdldEtleXMiLCAiZ2V0S2V5c0NvbW1vblRvSGFzaCIsICJ2YWx1ZXMiLCAiY29weSIsICJtZXJnZSIsICJ1bmJveCIsICJ0b0FycmF5IiwgImlzRW1wdHkiLCAidG9PYmplY3QiLCAia2V5VG9SZW1vdmUiLCAic29ydCIsICJPYmplY3RHcm91cCIsICJncm91cE9iamVjdHMiLCAidW5ncm91cGVkT2JqZWN0cyIsICJkZXB0aCIsICJhc1RyZWUiLCAiX29iamVjdCRjYW5CZUdyb3VwZWQyIiwgIl9vYmplY3QkY2FuQmVHcm91cGVkIiwgIl9ncm91cCRjYW5CZUdyb3VwZWRXaSIsICJfZ3JvdXAiLCAiY2FuQmVHcm91cGVkIiwgImNhbkJlR3JvdXBlZFdpdGgiLCAiZ2V0T2JqZWN0cyIsICJnZXREZXB0aCIsICJPYmplY3RNYXAiLCAiZmluZCIsICJFbGVtZW50U3RvcmUiLCAiZWxlbWVudHMiLCAiZ2V0S2V5IiwgInRyaXhTdG9yZUtleSIsICJPcGVyYXRpb24iLCAiaXNQZXJmb3JtaW5nIiwgInBlcmZvcm1pbmciLCAiaGFzUGVyZm9ybWVkIiwgInBlcmZvcm1lZCIsICJoYXNTdWNjZWVkZWQiLCAic3VjY2VlZGVkIiwgImhhc0ZhaWxlZCIsICJnZXRQcm9taXNlIiwgInByb21pc2UiLCAiUHJvbWlzZSIsICJyZXNvbHZlIiwgInJlamVjdCIsICJwZXJmb3JtIiwgInJlbGVhc2UiLCAiX3RoaXMkcHJvbWlzZSIsICJfdGhpcyRwcm9taXNlJGNhbmNlbCIsICJjYW5jZWwiLCAicHJveHlNZXRob2QiLCAiT2JqZWN0VmlldyIsICJjaGlsZFZpZXdzIiwgInJvb3RWaWV3IiwgImdldE5vZGVzIiwgIm5vZGVzIiwgImNyZWF0ZU5vZGVzIiwgImNsb25lTm9kZSIsICJpbnZhbGlkYXRlIiwgIl90aGlzJHBhcmVudFZpZXciLCAicGFyZW50VmlldyIsICJpbnZhbGlkYXRlVmlld0Zvck9iamVjdCIsICJfdGhpcyRmaW5kVmlld0Zvck9iamUiLCAiZmluZFZpZXdGb3JPYmplY3QiLCAiZmluZE9yQ3JlYXRlQ2FjaGVkQ2hpbGRWaWV3IiwgInZpZXdDbGFzcyIsICJ2aWV3IiwgImdldENhY2hlZFZpZXdGb3JPYmplY3QiLCAicmVjb3JkQ2hpbGRWaWV3IiwgImNyZWF0ZUNoaWxkVmlldyIsICJjYWNoZVZpZXdGb3JPYmplY3QiLCAiT2JqZWN0R3JvdXBWaWV3IiwgImdldEFsbENoaWxkVmlld3MiLCAidmlld3MiLCAiY2hpbGRWaWV3IiwgImZpbmRFbGVtZW50IiwgImZpbmRFbGVtZW50Rm9yT2JqZWN0IiwgImdldFZpZXdDYWNoZSIsICJpc1ZpZXdDYWNoaW5nRW5hYmxlZCIsICJ2aWV3Q2FjaGUiLCAic2hvdWxkQ2FjaGVWaWV3cyIsICJlbmFibGVWaWV3Q2FjaGluZyIsICJkaXNhYmxlVmlld0NhY2hpbmciLCAiX3RoaXMkZ2V0Vmlld0NhY2hlIiwgImNhY2hlIiwgImdhcmJhZ2VDb2xsZWN0Q2FjaGVkVmlld3MiLCAib2JqZWN0S2V5cyIsICJvYmplY3RHcm91cCIsICJnZXRDaGlsZFZpZXdzIiwgImNyZWF0ZUNvbnRhaW5lckVsZW1lbnQiLCAiRE9NUHVyaWZ5IiwgImFkZEhvb2siLCAiYXR0ck5hbWUiLCAiZm9yY2VLZWVwQXR0ciIsICJERUZBVUxUX0FMTE9XRURfQVRUUklCVVRFUyIsICJERUZBVUxUX0ZPUkJJRERFTl9QUk9UT0NPTFMiLCAiREVGQVVMVF9GT1JCSURERU5fRUxFTUVOVFMiLCAiSFRNTFNhbml0aXplciIsICJzYW5pdGl6ZWRFbGVtZW50IiwgInNhbml0aXplIiwgInNhbml0aXplZEh0bWwiLCAiZ2V0SFRNTCIsICJvdXRlckhUTUwiLCAiaW5uZXJIVE1MIiwgInNhbml0aXplciIsICJhbGxvd2VkQXR0cmlidXRlcyIsICJmb3JiaWRkZW5Qcm90b2NvbHMiLCAiZm9yYmlkZGVuRWxlbWVudHMiLCAiY3JlYXRlQm9keUVsZW1lbnRGb3JIVE1MIiwgInNhbml0aXplRWxlbWVudHMiLCAibm9ybWFsaXplTGlzdEVsZW1lbnROZXN0aW5nIiwgInNldENvbmZpZyIsICJnZXRCb2R5IiwgIndhbGtlciIsICJub2Rlc1RvUmVtb3ZlIiwgIm5leHROb2RlIiwgImN1cnJlbnROb2RlIiwgImVsZW1lbnRJc1JlbW92YWJsZSIsICJzYW5pdGl6ZUVsZW1lbnQiLCAiaGFzQXR0cmlidXRlIiwgInByb3RvY29sIiwgInJlbW92ZUF0dHJpYnV0ZSIsICJfcmVmIiwgImluZGV4T2YiLCAicXVlcnlTZWxlY3RvckFsbCIsICJsaXN0RWxlbWVudCIsICJwcmV2aW91c0VsZW1lbnQiLCAicHJldmlvdXNFbGVtZW50U2libGluZyIsICJlbGVtZW50SXNGb3JiaWRkZW4iLCAiZWxlbWVudElzbnRTZXJpYWxpemFibGUiLCAiZG9jIiwgImltcGxlbWVudGF0aW9uIiwgImNyZWF0ZUhUTUxEb2N1bWVudCIsICJjc3MiLCAiQXR0YWNobWVudFZpZXciLCAidXBsb2FkUHJvZ3Jlc3NEZWxlZ2F0ZSIsICJhdHRhY2htZW50UGllY2UiLCAicGllY2UiLCAiY3JlYXRlQ29udGVudE5vZGVzIiwgImlubmVyRWxlbWVudCIsICJmaWd1cmUiLCAiZ2V0Q2xhc3NOYW1lIiwgImdldEhyZWYiLCAidGFiaW5kZXgiLCAiaGFzQ29udGVudCIsICJzZXRIVE1MIiwgImdldENvbnRlbnQiLCAiY3JlYXRlQ2FwdGlvbkVsZW1lbnQiLCAiaXNQZW5kaW5nIiwgInByb2dyZXNzRWxlbWVudCIsICJjbGFzcyIsICJnZXRVcGxvYWRQcm9ncmVzcyIsICJ0cml4TXV0YWJsZSIsICJjcmVhdGVDdXJzb3JUYXJnZXQiLCAiZmlnY2FwdGlvbiIsICJnZXRDYXB0aW9uIiwgImNhcHRpb25Db25maWciLCAiZ2V0Q2FwdGlvbkNvbmZpZyIsICJnZXRGaWxlbmFtZSIsICJnZXRGb3JtYXR0ZWRGaWxlc2l6ZSIsICJuYW1lRWxlbWVudCIsICJjcmVhdGVUZXh0Tm9kZSIsICJzaXplRWxlbWVudCIsICJuYW1lcyIsICJnZXRUeXBlIiwgImV4dGVuc2lvbiIsICJnZXRFeHRlbnNpb24iLCAidHJpeEF0dGFjaG1lbnQiLCAidHJpeENvbnRlbnRUeXBlIiwgImdldENvbnRlbnRUeXBlIiwgInRyaXhJZCIsICJ0cml4QXR0cmlidXRlcyIsICJ0cml4U2VyaWFsaXplIiwgImh0bWxDb250YWluc1RhZ05hbWUiLCAiX2NvbmZpZyRhdHRhY2htZW50cyR0IiwgImZpbmRQcm9ncmVzc0VsZW1lbnQiLCAiX3RoaXMkZmluZEVsZW1lbnQiLCAiYXR0YWNobWVudERpZENoYW5nZVVwbG9hZFByb2dyZXNzIiwgImRpdiIsICJQcmV2aWV3YWJsZUF0dGFjaG1lbnRWaWV3IiwgInByZXZpZXdEZWxlZ2F0ZSIsICJpbWFnZSIsICJzcmMiLCAicmVmcmVzaCIsICJ1cGRhdGVBdHRyaWJ1dGVzRm9ySW1hZ2UiLCAiZ2V0VVJMIiwgInByZXZpZXdVUkwiLCAiZ2V0UHJldmlld1VSTCIsICJzZXJpYWxpemVkQXR0cmlidXRlcyIsICJ3aWR0aCIsICJnZXRXaWR0aCIsICJoZWlnaHQiLCAiZ2V0SGVpZ2h0IiwgInN0b3JlS2V5IiwgImF0dGFjaG1lbnREaWRDaGFuZ2VBdHRyaWJ1dGVzIiwgIlBpZWNlVmlldyIsICJnZXRBdHRyaWJ1dGVzIiwgInRleHRDb25maWciLCAiY29udGV4dCIsICJjcmVhdGVBdHRhY2htZW50Tm9kZXMiLCAiY3JlYXRlU3RyaW5nTm9kZXMiLCAiX2VsZW1lbnQiLCAiZmlyc3RFbGVtZW50Q2hpbGQiLCAiaXNQcmV2aWV3YWJsZSIsICJfdGhpcyR0ZXh0Q29uZmlnIiwgIml0ZXJhYmxlIiwgInN1YnN0cmluZyIsICJwcmVzZXJ2ZVNwYWNlcyIsICJzdHlsZXMiLCAicGVuZGluZ0VsZW1lbnQiLCAic3R5bGVQcm9wZXJ0eSIsICJpc0xhc3QiLCAiaXNGaXJzdCIsICJmb2xsb3dzV2hpdGVzcGFjZSIsICJUZXh0VmlldyIsICJwaWVjZXMiLCAiZ2V0UGllY2VzIiwgImxhc3RJbmRleCIsICJlbmRzV2l0aFdoaXRlc3BhY2UiLCAicHJldmlvdXNQaWVjZSIsICJCbG9ja1ZpZXciLCAiYmxvY2siLCAiY3JlYXRlQ29tbWVudCIsICJfZ2V0QmxvY2tDb25maWciLCAiZ2V0TGFzdEF0dHJpYnV0ZSIsICJ0ZXh0VmlldyIsICJzaG91bGRBZGRFeHRyYU5ld2xpbmVFbGVtZW50IiwgImlzUlRMIiwgImFzc2lnbiIsICJnZXRCbG9ja0JyZWFrUG9zaXRpb24iLCAiZW50cmllcyIsICJEb2N1bWVudFZpZXciLCAicmVuZGVyIiwgInN5bmMiLCAiZWxlbWVudFN0b3JlIiwgInNldERvY3VtZW50IiwgInNoYWRvd0VsZW1lbnQiLCAiZ2V0QmxvY2tzIiwgImlzU3luY2VkIiwgImVsZW1lbnRzSGF2ZUVxdWFsSFRNTCIsICJmcmFnbWVudCIsICJjcmVhdGVEb2N1bWVudEZyYWdtZW50Rm9yU3luYyIsICJsYXN0Q2hpbGQiLCAiZGlkU3luYyIsICJmaW5kU3RvcmVkRWxlbWVudHMiLCAiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsICJzdG9yZWRFbGVtZW50IiwgInJlcGxhY2VDaGlsZCIsICJvdGhlckVsZW1lbnQiLCAiaWdub3JlU3BhY2VzIiwgImtpIiwgInQiLCAiZSIsICJvIiwgInMiLCAiVGkiLCAiciIsICJ3aSIsICJMaSIsICJEaSIsICJPaSIsICJJaSIsICJOaSIsICJGaSIsICJQaSIsICJNaSIsICJCaSIsICJQaWVjZSIsICJ0eXBlcyIsICJwaWVjZUpTT04iLCAiY29weVdpdGhBdHRyaWJ1dGVzIiwgImdldFZhbHVlIiwgImNvcHlXaXRoQWRkaXRpb25hbEF0dHJpYnV0ZXMiLCAiY29weVdpdGhvdXRBdHRyaWJ1dGUiLCAiYXR0cmlidXRlIiwgImdldEF0dHJpYnV0ZXNIYXNoIiwgImhhc1NhbWVTdHJpbmdWYWx1ZUFzUGllY2UiLCAiaGFzU2FtZUF0dHJpYnV0ZXNBc1BpZWNlIiwgImlzQmxvY2tCcmVhayIsICJpc1NlcmlhbGl6YWJsZSIsICJnZXRMZW5ndGgiLCAiY2FuQmVDb25zb2xpZGF0ZWRXaXRoIiwgIl9kZWZpbmVQcm9wZXJ0eSIsICJJbWFnZVByZWxvYWRPcGVyYXRpb24iLCAiSW1hZ2UiLCAib25sb2FkIiwgIm5hdHVyYWxXaWR0aCIsICJuYXR1cmFsSGVpZ2h0IiwgIm9uZXJyb3IiLCAiQXR0YWNobWVudCIsICJhdHRyaWJ1dGVzRm9yRmlsZSIsICJzZXRGaWxlIiwgImZpbGVuYW1lIiwgImZpbGVzaXplIiwgImNvbnRlbnRUeXBlIiwgImF0dGFjaG1lbnRKU09OIiwgInJlbGVhc2VGaWxlIiwgImRpZENoYW5nZUF0dHJpYnV0ZXMiLCAic2V0QXR0cmlidXRlcyIsICJuZXdBdHRyaWJ1dGVzIiwgIl90aGlzJHByZXZpZXdEZWxlZ2F0ZSIsICJfdGhpcyRwcmV2aWV3RGVsZWdhdGUyIiwgIl90aGlzJGRlbGVnYXRlIiwgIl90aGlzJGRlbGVnYXRlJGF0dGFjaCIsICJkZWxlZ2F0ZSIsICJwcmVsb2FkVVJMIiwgInByZXZpZXdhYmxlUGF0dGVybiIsICJnZXRGaWxlc2l6ZSIsICJfdGhpcyRnZXRGaWxlbmFtZSRtYXQiLCAiZ2V0RmlsZSIsICJwcmVsb2FkRmlsZSIsICJyZWxlYXNlUHJlbG9hZGVkRmlsZSIsICJ1cGxvYWRQcm9ncmVzcyIsICJzZXRVcGxvYWRQcm9ncmVzcyIsICJfdGhpcyR1cGxvYWRQcm9ncmVzc0QiLCAiX3RoaXMkdXBsb2FkUHJvZ3Jlc3NEMiIsICJwcmVsb2FkaW5nVVJMIiwgInNldFByZXZpZXdVUkwiLCAiX3RoaXMkcHJldmlld0RlbGVnYXRlMyIsICJfdGhpcyRwcmV2aWV3RGVsZWdhdGU0IiwgIl90aGlzJGRlbGVnYXRlMiIsICJfdGhpcyRkZWxlZ2F0ZTIkYXR0YWMiLCAiYXR0YWNobWVudERpZENoYW5nZVByZXZpZXdVUkwiLCAicHJlbG9hZCIsICJmaWxlT2JqZWN0VVJMIiwgIlVSTCIsICJjcmVhdGVPYmplY3RVUkwiLCAicmV2b2tlT2JqZWN0VVJMIiwgInRoZW4iLCAiY2F0Y2giLCAiQXR0YWNobWVudFBpZWNlIiwgImVuc3VyZUF0dGFjaG1lbnRFeGNsdXNpdmVseUhhc0F0dHJpYnV0ZSIsICJyZW1vdmVQcm9oaWJpdGVkQXR0cmlidXRlcyIsICJwZXJtaXR0ZWRBdHRyaWJ1dGVzIiwgIl9waWVjZSRhdHRhY2htZW50IiwgImpzb24iLCAidG9Db25zb2xlIiwgInJlZ2lzdGVyVHlwZSIsICJTdHJpbmdQaWVjZSIsICJjb25zb2xpZGF0ZVdpdGgiLCAic3BsaXRBdE9mZnNldCIsICJTcGxpdHRhYmxlTGlzdCIsICJlYWNoT2JqZWN0IiwgImluc2VydE9iamVjdEF0SW5kZXgiLCAiaW5zZXJ0U3BsaXR0YWJsZUxpc3RBdEluZGV4IiwgInNwbGl0dGFibGVMaXN0IiwgImluc2VydFNwbGl0dGFibGVMaXN0QXRQb3NpdGlvbiIsICJwb3NpdGlvbiIsICJzcGxpdE9iamVjdEF0UG9zaXRpb24iLCAiZWRpdE9iamVjdEF0SW5kZXgiLCAicmVwbGFjZU9iamVjdEF0SW5kZXgiLCAicmVtb3ZlT2JqZWN0QXRJbmRleCIsICJnZXRPYmplY3RBdEluZGV4IiwgImdldFNwbGl0dGFibGVMaXN0SW5SYW5nZSIsICJyaWdodEluZGV4IiwgInNwbGl0T2JqZWN0c0F0UmFuZ2UiLCAic2VsZWN0U3BsaXR0YWJsZUxpc3QiLCAicmVtb3ZlT2JqZWN0c0luUmFuZ2UiLCAidHJhbnNmb3JtT2JqZWN0c0luUmFuZ2UiLCAidHJhbnNmb3JtIiwgInRyYW5zZm9ybWVkT2JqZWN0cyIsICJyaWdodE91dGVySW5kZXgiLCAibGVmdElubmVySW5kZXgiLCAic3RhcnRPZlJhbmdlIiwgImVuZE9mUmFuZ2UiLCAiZ2V0T2JqZWN0QXRQb3NpdGlvbiIsICJmaW5kSW5kZXhBbmRPZmZzZXRBdFBvc2l0aW9uIiwgInNwbGl0SW5kZXgiLCAic3BsaXRPZmZzZXQiLCAibGVmdE9iamVjdCIsICJyaWdodE9iamVjdCIsICJjb25zb2xpZGF0ZSIsICJwZW5kaW5nT2JqZWN0IiwgIl9wZW5kaW5nT2JqZWN0JGNhbkJlQyIsICJfcGVuZGluZ09iamVjdCIsICJjb25zb2xpZGF0ZUZyb21JbmRleFRvSW5kZXgiLCAic3RhcnRJbmRleCIsICJlbmRJbmRleCIsICJvYmplY3RzSW5SYW5nZSIsICJjb25zb2xpZGF0ZWRJblJhbmdlIiwgImN1cnJlbnRQb3NpdGlvbiIsICJuZXh0UG9zaXRpb24iLCAiZmluZFBvc2l0aW9uQXRJbmRleEFuZE9mZnNldCIsICJjdXJyZW50SW5kZXgiLCAiZ2V0RW5kUG9zaXRpb24iLCAiZW5kUG9zaXRpb24iLCAib2JqZWN0QXJyYXlzQXJlRXF1YWwiLCAiVGV4dCIsICJ0ZXh0SlNPTiIsICJub3RFbXB0eSIsICJwaWVjZUxpc3QiLCAiY29weVdpdGhQaWVjZUxpc3QiLCAiY29weVVzaW5nT2JqZWN0TWFwIiwgIm9iamVjdE1hcCIsICJhcHBlbmRUZXh0IiwgImluc2VydFRleHRBdFBvc2l0aW9uIiwgInJlbW92ZVRleHRBdFJhbmdlIiwgInJlcGxhY2VUZXh0QXRSYW5nZSIsICJtb3ZlVGV4dEZyb21SYW5nZVRvUG9zaXRpb24iLCAiZ2V0VGV4dEF0UmFuZ2UiLCAiYWRkQXR0cmlidXRlQXRSYW5nZSIsICJhZGRBdHRyaWJ1dGVzQXRSYW5nZSIsICJyZW1vdmVBdHRyaWJ1dGVBdFJhbmdlIiwgInNldEF0dHJpYnV0ZXNBdFJhbmdlIiwgImdldEF0dHJpYnV0ZXNBdFBvc2l0aW9uIiwgIl90aGlzJHBpZWNlTGlzdCRnZXRPYiIsICJnZXRDb21tb25BdHRyaWJ1dGVzIiwgImdldENvbW1vbkF0dHJpYnV0ZXNBdFJhbmdlIiwgImdldEV4cGFuZGVkUmFuZ2VGb3JBdHRyaWJ1dGVBdE9mZnNldCIsICJnZXRTdHJpbmdBdFJhbmdlIiwgImdldFN0cmluZ0F0UG9zaXRpb24iLCAic3RhcnRzV2l0aFN0cmluZyIsICJlbmRzV2l0aFN0cmluZyIsICJnZXRBdHRhY2htZW50UGllY2VzIiwgImdldEF0dGFjaG1lbnRzIiwgImdldEF0dGFjaG1lbnRBbmRQb3NpdGlvbkJ5SWQiLCAiYXR0YWNobWVudElkIiwgImdldEF0dGFjaG1lbnRCeUlkIiwgImdldFJhbmdlT2ZBdHRhY2htZW50IiwgImF0dGFjaG1lbnRBbmRQb3NpdGlvbiIsICJ1cGRhdGVBdHRyaWJ1dGVzRm9yQXR0YWNobWVudCIsICJfdGV4dCRwaWVjZUxpc3QiLCAiZWFjaFBpZWNlIiwgImdldFBpZWNlQXRQb3NpdGlvbiIsICJ0b1NlcmlhbGl6YWJsZVRleHQiLCAiQmxvY2siLCAiYmxvY2tKU09OIiwgImFwcGx5QmxvY2tCcmVha1RvVGV4dCIsICJjb3B5V2l0aFRleHQiLCAiY29weVdpdGhvdXRUZXh0IiwgImNvcHlXaXRob3V0QXR0cmlidXRlcyIsICJtYXBwZWRUZXh0IiwgImFkZEF0dHJpYnV0ZSIsICJleHBhbmRBdHRyaWJ1dGUiLCAiYWRkSFRNTEF0dHJpYnV0ZSIsICJyZW1vdmVMYXN0VmFsdWUiLCAicmVtb3ZlTGFzdEF0dHJpYnV0ZSIsICJnZXRMYXN0RWxlbWVudCIsICJnZXRBdHRyaWJ1dGVMZXZlbCIsICJnZXRBdHRyaWJ1dGVBdExldmVsIiwgImxldmVsIiwgImhhc0F0dHJpYnV0ZXMiLCAiZ2V0TGFzdE5lc3RhYmxlQXR0cmlidXRlIiwgImdldE5lc3RhYmxlQXR0cmlidXRlcyIsICJnZXROZXN0aW5nTGV2ZWwiLCAiZGVjcmVhc2VOZXN0aW5nTGV2ZWwiLCAiaW5jcmVhc2VOZXN0aW5nTGV2ZWwiLCAibGFzdEluZGV4T2YiLCAiZ2V0TGlzdEl0ZW1BdHRyaWJ1dGVzIiwgImlzTGlzdEl0ZW0iLCAiaXNUZXJtaW5hbEJsb2NrIiwgIl9nZXRCbG9ja0NvbmZpZzIiLCAiYnJlYWtzT25SZXR1cm4iLCAiX2dldEJsb2NrQ29uZmlnMyIsICJmaW5kTGluZUJyZWFrSW5EaXJlY3Rpb25Gcm9tUG9zaXRpb24iLCAiZGlyZWN0aW9uIiwgIm5ld2xpbmVUZXh0IiwgInRleHRGb3JTdHJpbmdXaXRoQXR0cmlidXRlcyIsICJnZXRUZXh0V2l0aG91dEJsb2NrQnJlYWsiLCAidGV4dEVuZHNJbkJsb2NrQnJlYWsiLCAib3RoZXJCbG9jayIsICJvdGhlckF0dHJpYnV0ZXMiLCAib3RoZXJBdHRyaWJ1dGUiLCAiZ2V0TGlzdEF0dHJpYnV0ZU5hbWVzIiwgInVubWFya0V4aXN0aW5nSW5uZXJCbG9ja0JyZWFrc0luVGV4dCIsICJhZGRCbG9ja0JyZWFrVG9UZXh0IiwgIm1vZGlmaWVkIiwgImlubmVyUGllY2VzIiwgImxhc3RQaWVjZSIsICJ1bm1hcmtCbG9ja0JyZWFrUGllY2UiLCAiYmxvY2tCcmVha1RleHQiLCAiYmxvY2tCcmVhayIsICJEb2N1bWVudCIsICJkb2N1bWVudEpTT04iLCAidGV4dEF0dHJpYnV0ZXMiLCAiYmxvY2tzIiwgImJsb2NrTGlzdCIsICJnZXRCbG9ja0F0SW5kZXgiLCAiY29uc29saWRhdGVCbG9ja3MiLCAiY29weVVzaW5nT2JqZWN0c0Zyb21Eb2N1bWVudCIsICJzb3VyY2VEb2N1bWVudCIsICJjb3B5V2l0aEJhc2VCbG9ja0F0dHJpYnV0ZXMiLCAicmVwbGFjZUJsb2NrIiwgIm9sZEJsb2NrIiwgIm5ld0Jsb2NrIiwgImluc2VydERvY3VtZW50QXRSYW5nZSIsICJsb2NhdGlvbkZyb21Qb3NpdGlvbiIsICJnZXRCbG9ja0F0UG9zaXRpb24iLCAibWVyZ2VEb2N1bWVudEF0UmFuZ2UiLCAiZm9ybWF0dGVkRG9jdW1lbnQiLCAic3RhcnRQb3NpdGlvbiIsICJzdGFydExvY2F0aW9uIiwgImJhc2VCbG9ja0F0dHJpYnV0ZXMiLCAiZ2V0QmFzZUJsb2NrQXR0cmlidXRlcyIsICJ0cmFpbGluZ0Jsb2NrQXR0cmlidXRlcyIsICJsZWFkaW5nQmxvY2tBdHRyaWJ1dGVzIiwgImJsb2NrQ291bnQiLCAiZ2V0QmxvY2tDb3VudCIsICJmaXJzdEJsb2NrIiwgImZpcnN0VGV4dCIsICJpbnNlcnRUZXh0QXRSYW5nZSIsICJsZWZ0UG9zaXRpb24iLCAicmlnaHRQb3NpdGlvbiIsICJsZWZ0TG9jYXRpb24iLCAicmlnaHRMb2NhdGlvbiIsICJsb2NhdGlvblJhbmdlRnJvbVJhbmdlIiwgImxlZnRPZmZzZXQiLCAibGVmdEJsb2NrIiwgInJpZ2h0T2Zmc2V0IiwgInJpZ2h0QmxvY2siLCAibGVmdFRleHQiLCAicmlnaHRUZXh0IiwgImFmZmVjdGVkQmxvY2tDb3VudCIsICJnZXREb2N1bWVudEF0UmFuZ2UiLCAibW92aW5nUmlnaHR3YXJkIiwgImVhY2hCbG9ja0F0UmFuZ2UiLCAidGV4dFJhbmdlIiwgImVhY2hCbG9jayIsICJnZXRUZXh0QXRJbmRleCIsICJyZW1vdmVBdHRyaWJ1dGVGb3JBdHRhY2htZW50IiwgInNldEhUTUxBdHRyaWJ1dGVBdFBvc2l0aW9uIiwgInVwZGF0ZWRCbG9jayIsICJpbnNlcnRCbG9ja0JyZWFrQXRSYW5nZSIsICJhcHBseUJsb2NrQXR0cmlidXRlQXRSYW5nZSIsICJleHBhbmRlZCIsICJleHBhbmRSYW5nZVRvTGluZUJyZWFrc0FuZFNwbGl0QmxvY2tzIiwgImJsb2NrQ29uZmlnIiwgInJlbW92ZUxhc3RMaXN0QXR0cmlidXRlQXRSYW5nZSIsICJleGNlcHRBdHRyaWJ1dGVOYW1lIiwgImNvbnZlcnRlZCIsICJjb252ZXJ0TGluZUJyZWFrc1RvQmxvY2tCcmVha3NJblJhbmdlIiwgInJlbW92ZUJsb2NrQXR0cmlidXRlc0F0UmFuZ2UiLCAicmVtb3ZlTGFzdFRlcm1pbmFsQXR0cmlidXRlQXRSYW5nZSIsICJjb25zb2xpZGF0ZUJsb2Nrc0F0UmFuZ2UiLCAibGFzdEF0dHJpYnV0ZU5hbWUiLCAiZW5kTG9jYXRpb24iLCAic3RhcnRCbG9jayIsICJwb3NpdGlvbkZyb21Mb2NhdGlvbiIsICJlbmRCbG9jayIsICJfdGhpcyRnZXRCbG9ja0F0SW5kZXgiLCAiZ2V0VGV4dEF0UG9zaXRpb24iLCAiZ2V0Q2hhcmFjdGVyQXRQb3NpdGlvbiIsICJnZXRFZGl0Q291bnQiLCAiZWRpdENvdW50IiwgImdldENvbW1vbkF0dHJpYnV0ZXNBdFBvc2l0aW9uIiwgImF0dHJpYnV0ZXNGb3JCbG9jayIsICJjb21tb25BdHRyaWJ1dGVzIiwgImF0dHJpYnV0ZXNMZWZ0IiwgImluaGVyaXRhYmxlQXR0cmlidXRlcyIsICJnZXRSYW5nZU9mQ29tbW9uQXR0cmlidXRlQXRQb3NpdGlvbiIsICJzdGFydE9mZnNldCIsICJlbmRPZmZzZXQiLCAiYmxvY2tJbmRleCIsICJsYXN0QXR0cmlidXRlSW5kZXgiLCAibWluIiwgImF0dGFjaG1lbnRQaWVjZXMiLCAiZ2V0TG9jYXRpb25SYW5nZU9mQXR0YWNobWVudCIsICJnZXRBdHRhY2htZW50UGllY2VGb3JBdHRhY2htZW50IiwgImZpbmRSYW5nZXNGb3JCbG9ja0F0dHJpYnV0ZSIsICJyYW5nZXMiLCAiZmluZFJhbmdlc0ZvclRleHRBdHRyaWJ1dGUiLCAid2l0aFZhbHVlIiwgImxvY2F0aW9uIiwgImxvY2F0aW9uUmFuZ2VGcm9tUG9zaXRpb24iLCAicmFuZ2VGcm9tTG9jYXRpb25SYW5nZSIsICJsb2NhdGlvblJhbmdlIiwgImdldFRleHRzIiwgInRvU2VyaWFsaXphYmxlRG9jdW1lbnQiLCAicGllY2VGb3JTdHJpbmciLCAicGFyc2VUcml4RGF0YUF0dHJpYnV0ZSIsICJIVE1MUGFyc2VyIiwgInJlZmVyZW5jZUVsZW1lbnQiLCAiYmxvY2tFbGVtZW50cyIsICJwcm9jZXNzZWRFbGVtZW50cyIsICJnZXREb2N1bWVudCIsICJjcmVhdGVIaWRkZW5Db250YWluZXIiLCAiY29udGFpbmVyRWxlbWVudCIsICJub2RlRmlsdGVyIiwgInByb2Nlc3NOb2RlIiwgInRyYW5zbGF0ZUJsb2NrRWxlbWVudE1hcmdpbnNUb05ld2xpbmVzIiwgInJlbW92ZUhpZGRlbkNvbnRhaW5lciIsICJkaXNwbGF5IiwgIm5leHRTaWJsaW5nIiwgImlzSW5zaWduaWZpY2FudFRleHROb2RlIiwgImFwcGVuZEJsb2NrRm9yVGV4dE5vZGUiLCAicHJvY2Vzc1RleHROb2RlIiwgImFwcGVuZEJsb2NrRm9yRWxlbWVudCIsICJwcm9jZXNzRWxlbWVudCIsICJjdXJyZW50QmxvY2tFbGVtZW50IiwgImlzQmxvY2tFbGVtZW50IiwgImFwcGVuZFN0cmluZ1dpdGhBdHRyaWJ1dGVzIiwgIl90aGlzJGN1cnJlbnRCbG9jayIsICJnZXRCbG9ja0F0dHJpYnV0ZXMiLCAiZ2V0QmxvY2tIVE1MQXR0cmlidXRlcyIsICJjdXJyZW50QmxvY2siLCAiYXBwZW5kQmxvY2tGb3JBdHRyaWJ1dGVzV2l0aEVsZW1lbnQiLCAiZWxlbWVudElzQmxvY2tFbGVtZW50IiwgImN1cnJlbnRCbG9ja0NvbnRhaW5zRWxlbWVudCIsICJwYXJlbnRCbG9ja0VsZW1lbnQiLCAiZmluZFBhcmVudEJsb2NrRWxlbWVudCIsICJhcHBlbmRFbXB0eUJsb2NrIiwgInBhcmVudEVsZW1lbnQiLCAiX25vZGUkcHJldmlvdXNTaWJsaW5nIiwgImVsZW1lbnRDYW5EaXNwbGF5UHJlZm9ybWF0dGVkVGV4dCIsICJzdHJpbmdFbmRzV2l0aFdoaXRlc3BhY2UiLCAibGVmdFRyaW1CcmVha2FibGVXaGl0ZXNwYWNlIiwgImdldFRleHRBdHRyaWJ1dGVzIiwgImFwcGVuZEF0dGFjaG1lbnRXaXRoQXR0cmlidXRlcyIsICJpc0V4dHJhQlIiLCAiZGltZW5zaW9ucyIsICJuZWVkc1RhYmxlU2VwYXJhdG9yIiwgImFwcGVuZFBpZWNlIiwgImFwcGVuZFN0cmluZ1RvVGV4dEF0SW5kZXgiLCAicHJlcGVuZFN0cmluZ1RvVGV4dEF0SW5kZXgiLCAidW5zaGlmdCIsICJjb25maWdBdHRyIiwgImF0dHJpYnV0ZUluaGVyaXRlZEZyb21CbG9jayIsICJibG9ja0VsZW1lbnQiLCAiZmluZEJsb2NrRWxlbWVudEFuY2VzdG9ycyIsICJhdHRyQ29uZmlnIiwgIl9hdHRyQ29uZmlnJHRlc3QiLCAicmV2ZXJzZSIsICJzZXR0aW5ncyIsICJhbmNlc3RvcnMiLCAic3RyaW5nSXNBbGxCcmVha2FibGVXaGl0ZXNwYWNlIiwgIm5vZGVFbmRzV2l0aE5vbldoaXRlc3BhY2UiLCAiX2VsZW1lbnQkcHJldmlvdXNTaWJsIiwgImRlZmF1bHRNYXJnaW4iLCAiZ2V0TWFyZ2luT2ZEZWZhdWx0QmxvY2tFbGVtZW50IiwgIm1hcmdpbiIsICJnZXRNYXJnaW5PZkJsb2NrRWxlbWVudEF0SW5kZXgiLCAidG9wIiwgImJvdHRvbSIsICJnZXRCbG9ja0VsZW1lbnRNYXJnaW4iLCAid2hpdGVTcGFjZSIsICJtYXJnaW5Ub3AiLCAibWFyZ2luQm90dG9tIiwgIkZJTFRFUl9SRUpFQ1QiLCAiRklMVEVSX0FDQ0VQVCIsICJ1bnNlcmlhbGl6YWJsZUF0dHJpYnV0ZU5hbWVzIiwgInNlcmlhbGl6ZWRBdHRyaWJ1dGVzQXR0cmlidXRlIiwgInNlcmlhbGl6ZWRBdHRyaWJ1dGVzU2VsZWN0b3IiLCAiYmxvY2tDb21tZW50UGF0dGVybiIsICJzZXJpYWxpemVycyIsICJzZXJpYWxpemFibGUiLCAiSFRNTEVsZW1lbnQiLCAiZWwiLCAiQ24iLCAiTWFuYWdlZEF0dGFjaG1lbnQiLCAiYXR0YWNobWVudE1hbmFnZXIiLCAicmVxdWVzdFJlbW92YWxPZkF0dGFjaG1lbnQiLCAiQXR0YWNobWVudE1hbmFnZXIiLCAibWFuYWdlZEF0dGFjaG1lbnRzIiwgIm1hbmFnZUF0dGFjaG1lbnQiLCAiYXR0YWNobWVudElzTWFuYWdlZCIsICJhdHRhY2htZW50TWFuYWdlckRpZFJlcXVlc3RSZW1vdmFsT2ZBdHRhY2htZW50IiwgInVubWFuYWdlQXR0YWNobWVudCIsICJtYW5hZ2VkQXR0YWNobWVudCIsICJMaW5lQnJlYWtJbnNlcnRpb24iLCAiY29tcG9zaXRpb24iLCAic2VsZWN0ZWRSYW5nZSIsICJnZXRTZWxlY3RlZFJhbmdlIiwgInByZXZpb3VzQ2hhcmFjdGVyIiwgIm5leHRDaGFyYWN0ZXIiLCAic2hvdWxkSW5zZXJ0QmxvY2tCcmVhayIsICJzaG91bGRCcmVha0Zvcm1hdHRlZEJsb2NrIiwgInNob3VsZERlY3JlYXNlTGlzdExldmVsIiwgInNob3VsZFByZXBlbmRMaXN0SXRlbSIsICJzaG91bGRSZW1vdmVMYXN0QmxvY2tBdHRyaWJ1dGUiLCAiQ29tcG9zaXRpb24iLCAiY3VycmVudEF0dHJpYnV0ZXMiLCAicmV2aXNpb24iLCAiX3RoaXMkZGVsZWdhdGUkY29tcG9zIiwgInJlZnJlc2hBdHRhY2htZW50cyIsICJjb21wb3NpdGlvbkRpZENoYW5nZURvY3VtZW50IiwgImdldFNuYXBzaG90IiwgImxvYWRTbmFwc2hvdCIsICJfdGhpcyRkZWxlZ2F0ZTIkY29tcG8iLCAiX3RoaXMkZGVsZWdhdGUzIiwgIl90aGlzJGRlbGVnYXRlMyRjb21wbyIsICJjb21wb3NpdGlvbldpbGxMb2FkU25hcHNob3QiLCAic2V0U2VsZWN0aW9uIiwgImNvbXBvc2l0aW9uRGlkTG9hZFNuYXBzaG90IiwgImluc2VydFRleHQiLCAidXBkYXRlUG9zaXRpb24iLCAibm90aWZ5RGVsZWdhdGVPZkluc2VydGlvbkF0UmFuZ2UiLCAiaW5zZXJ0QmxvY2siLCAiaW5zZXJ0RG9jdW1lbnQiLCAiaW5zZXJ0U3RyaW5nIiwgImdldEN1cnJlbnRUZXh0QXR0cmlidXRlcyIsICJpbnNlcnRCbG9ja0JyZWFrIiwgImluc2VydExpbmVCcmVhayIsICJpbnNlcnRpb24iLCAiZGVjcmVhc2VMaXN0TGV2ZWwiLCAicmVtb3ZlTGFzdEJsb2NrQXR0cmlidXRlIiwgImJyZWFrRm9ybWF0dGVkQmxvY2siLCAiaW5zZXJ0SFRNTCIsICJyZXBsYWNlSFRNTCIsICJnZXRMb2NhdGlvblJhbmdlIiwgImluc2VydEZpbGUiLCAiaW5zZXJ0RmlsZXMiLCAiX3RoaXMkZGVsZWdhdGU0IiwgImNvbXBvc2l0aW9uU2hvdWxkQWNjZXB0RmlsZSIsICJhdHRhY2htZW50Rm9yRmlsZSIsICJpbnNlcnRBdHRhY2htZW50cyIsICJpbnNlcnRBdHRhY2htZW50IiwgImF0dGFjaG1lbnRUZXh0IiwgInRleHRGb3JBdHRhY2htZW50V2l0aEF0dHJpYnV0ZXMiLCAic2hvdWxkTWFuYWdlRGVsZXRpbmdJbkRpcmVjdGlvbiIsICJzaG91bGRNYW5hZ2VNb3ZpbmdDdXJzb3JJbkRpcmVjdGlvbiIsICJkZWxldGVJbkRpcmVjdGlvbiIsICJkZWxldGluZ0ludG9QcmV2aW91c0Jsb2NrIiwgInNlbGVjdGlvblNwYW5zQmxvY2tzIiwgInNlbGVjdGlvbklzQ29sbGFwc2VkIiwgImNhbkRlY3JlYXNlQmxvY2tBdHRyaWJ1dGVMZXZlbCIsICJnZXRCbG9jayIsICJkZWNyZWFzZUJsb2NrQXR0cmlidXRlTGV2ZWwiLCAiZ2V0RXhwYW5kZWRSYW5nZUluRGlyZWN0aW9uIiwgImdldEF0dGFjaG1lbnRBdFJhbmdlIiwgImVkaXRBdHRhY2htZW50IiwgIm1vdmVUZXh0RnJvbVJhbmdlIiwgInJlbW92ZUF0dGFjaG1lbnQiLCAic3RvcEVkaXRpbmdBdHRhY2htZW50IiwgInJlbW92ZUN1cnJlbnRBdHRyaWJ1dGUiLCAiaW5zZXJ0UGxhY2Vob2xkZXIiLCAicGxhY2Vob2xkZXJQb3NpdGlvbiIsICJnZXRQb3NpdGlvbiIsICJzZWxlY3RQbGFjZWhvbGRlciIsICJzZXRTZWxlY3RlZFJhbmdlIiwgIlBMQUNFSE9MREVSIiwgImZvcmdldFBsYWNlaG9sZGVyIiwgImhhc0N1cnJlbnRBdHRyaWJ1dGUiLCAidG9nZ2xlQ3VycmVudEF0dHJpYnV0ZSIsICJzZXRDdXJyZW50QXR0cmlidXRlIiwgImNhblNldEN1cnJlbnRBdHRyaWJ1dGUiLCAiY2FuU2V0Q3VycmVudEJsb2NrQXR0cmlidXRlIiwgImNhblNldEN1cnJlbnRUZXh0QXR0cmlidXRlIiwgImdldFNlbGVjdGVkRG9jdW1lbnQiLCAic2V0QmxvY2tBdHRyaWJ1dGUiLCAic2V0VGV4dEF0dHJpYnV0ZSIsICJub3RpZnlEZWxlZ2F0ZU9mQ3VycmVudEF0dHJpYnV0ZXNDaGFuZ2UiLCAic2V0SFRNTEF0cmlidXRlQXRQb3NpdGlvbiIsICJhbGxvd2VkSFRNTEF0dHJpYnV0ZXMiLCAibmV3RG9jdW1lbnQiLCAicmVtb3ZlQmxvY2tBdHRyaWJ1dGUiLCAidXBkYXRlQ3VycmVudEF0dHJpYnV0ZXMiLCAicmVtb3ZlVGV4dEF0dHJpYnV0ZSIsICJjYW5EZWNyZWFzZU5lc3RpbmdMZXZlbCIsICJfdGhpcyRnZXRCbG9jayIsICJjYW5JbmNyZWFzZU5lc3RpbmdMZXZlbCIsICJwcmV2aW91c0Jsb2NrIiwgImdldFByZXZpb3VzQmxvY2siLCAiX3RoaXMkZ2V0QmxvY2syIiwgIl90aGlzJGdldEJsb2NrMyIsICJhdHRyaWJ1dGVMZXZlbCIsICJpZ25vcmVMb2NrIiwgImdldEN1cnJlbnRBdHRyaWJ1dGVzIiwgImZyZWV6ZVNlbGVjdGlvbiIsICJ0aGF3U2VsZWN0aW9uIiwgImhhc0Zyb3plblNlbGVjdGlvbiIsICJfdGhpcyRkZWxlZ2F0ZTUiLCAiY29tcG9zaXRpb25EaWRSZXF1ZXN0Q2hhbmdpbmdTZWxlY3Rpb25Ub0xvY2F0aW9uUmFuZ2UiLCAiZ2V0U2VsZWN0aW9uTWFuYWdlciIsICJzZXRMb2NhdGlvblJhbmdlIiwgInRhcmdldExvY2F0aW9uUmFuZ2UiLCAid2l0aFRhcmdldExvY2F0aW9uUmFuZ2UiLCAid2l0aFRhcmdldFJhbmdlIiwgIndpdGhUYXJnZXRET01SYW5nZSIsICJjcmVhdGVMb2NhdGlvblJhbmdlRnJvbURPTVJhbmdlIiwgInRyYW5zbGF0ZVVURjE2UG9zaXRpb25Gcm9tT2Zmc2V0IiwgImVkaXRpbmdBdHRhY2htZW50IiwgIm1vdmVDdXJzb3JJbkRpcmVjdGlvbiIsICJjYW5FZGl0QXR0YWNobWVudCIsICJleHBhbmRTZWxlY3Rpb25JbkRpcmVjdGlvbiIsICJleHBhbmRTZWxlY3Rpb25Gb3JFZGl0aW5nIiwgImV4cGFuZFNlbGVjdGlvbkFyb3VuZENvbW1vbkF0dHJpYnV0ZSIsICJzZWxlY3Rpb25Db250YWluc0F0dGFjaG1lbnRzIiwgIl90aGlzJGdldFNlbGVjdGVkQXR0YSIsICJnZXRTZWxlY3RlZEF0dGFjaG1lbnRzIiwgInNlbGVjdGlvbklzSW5DdXJzb3JUYXJnZXQiLCAicG9zaXRpb25Jc0N1cnNvclRhcmdldCIsICJsb2NhdGlvbklzQ3Vyc29yVGFyZ2V0IiwgInBvc2l0aW9uSXNCbG9ja0JyZWFrIiwgIl90aGlzJGRvY3VtZW50JGdldFBpZSIsICJfdGhpcyRnZXRTZWxlY3RlZERvY3UiLCAiYWRkZWQiLCAicmVtb3ZlZCIsICJvbGRBcnJheSIsICJuZXdBcnJheSIsICJleGlzdGluZ1ZhbHVlcyIsICJTZXQiLCAiY3VycmVudFZhbHVlcyIsICJfdGhpcyRkZWxlZ2F0ZTYiLCAiX3RoaXMkZGVsZWdhdGU2JGNvbXBvIiwgImNvbXBvc2l0aW9uRGlkUmVtb3ZlQXR0YWNobWVudCIsICJfdGhpcyRkZWxlZ2F0ZTciLCAiX3RoaXMkZGVsZWdhdGU3JGNvbXBvIiwgImNvbXBvc2l0aW9uRGlkQWRkQXR0YWNobWVudCIsICJfdGhpcyRkZWxlZ2F0ZTgiLCAiX3RoaXMkZGVsZWdhdGU4JGNvbXBvIiwgImNvbXBvc2l0aW9uRGlkRWRpdEF0dGFjaG1lbnQiLCAiX3RoaXMkZGVsZWdhdGU5IiwgIl90aGlzJGRlbGVnYXRlOSRjb21wbyIsICJjb21wb3NpdGlvbkRpZENoYW5nZUF0dGFjaG1lbnRQcmV2aWV3VVJMIiwgIl90aGlzJGRlbGVnYXRlMTAiLCAiX3RoaXMkZGVsZWdhdGUxMCRjb21wIiwgImNvbXBvc2l0aW9uRGlkU3RhcnRFZGl0aW5nQXR0YWNobWVudCIsICJfdGhpcyRkZWxlZ2F0ZTExIiwgIl90aGlzJGRlbGVnYXRlMTEkY29tcCIsICJjb21wb3NpdGlvbkRpZFN0b3BFZGl0aW5nQXR0YWNobWVudCIsICJfdGhpcyRkZWxlZ2F0ZTEyIiwgIl90aGlzJGRlbGVnYXRlMTIkY29tcCIsICJjb21wb3NpdGlvbkRpZENoYW5nZUN1cnJlbnRBdHRyaWJ1dGVzIiwgIl90aGlzJGRlbGVnYXRlMTMiLCAiX3RoaXMkZGVsZWdhdGUxMyRjb21wIiwgImNvbXBvc2l0aW9uRGlkUGVyZm9ybUluc2VydGlvbkF0UmFuZ2UiLCAidXRmMTZzdHJpbmciLCAidXRmMTZwb3NpdGlvbiIsICJVbmRvTWFuYWdlciIsICJ1bmRvRW50cmllcyIsICJyZWRvRW50cmllcyIsICJyZWNvcmRVbmRvRW50cnkiLCAiZGVzY3JpcHRpb24iLCAiY29uc29saWRhdGFibGUiLCAicHJldmlvdXNFbnRyeSIsICJlbnRyeUhhc0Rlc2NyaXB0aW9uQW5kQ29udGV4dCIsICJ1bmRvRW50cnkiLCAiY3JlYXRlRW50cnkiLCAicG9wIiwgInJlZG9FbnRyeSIsICJzbmFwc2hvdCIsICJjYW5VbmRvIiwgImNhblJlZG8iLCAiZW50cnkiLCAiQkxPQ0tfQVRUUklCVVRFX05BTUUiLCAiRmlsdGVyIiwgImFwcGx5QmxvY2tBdHRyaWJ1dGUiLCAiZmluZFJhbmdlc09mQmxvY2tzIiwgImZpbmRSYW5nZXNPZlBpZWNlcyIsICJtb3ZlU2VsZWN0ZWRSYW5nZUZvcndhcmQiLCAiYXR0YWNobWVudEdhbGxlcnlGaWx0ZXIiLCAiREVGQVVMVF9GSUxURVJTIiwgIkVkaXRvciIsICJ1bmRvTWFuYWdlciIsICJmaWx0ZXJzIiwgImxvYWREb2N1bWVudCIsICJsb2FkSFRNTCIsICJsb2FkSlNPTiIsICJnZXRDbGllbnRSZWN0QXRQb3NpdGlvbiIsICJnZXRDbGllbnRSZWN0QXRMb2NhdGlvblJhbmdlIiwgImFjdGl2YXRlQXR0cmlidXRlIiwgImF0dHJpYnV0ZUlzQWN0aXZlIiwgImNhbkFjdGl2YXRlQXR0cmlidXRlIiwgImRlYWN0aXZhdGVBdHRyaWJ1dGUiLCAiTG9jYXRpb25NYXBwZXIiLCAiZmluZExvY2F0aW9uRnJvbUNvbnRhaW5lckFuZE9mZnNldCIsICJjb250YWluZXIiLCAiZm91bmRCbG9jayIsICJhdHRhY2htZW50RWxlbWVudCIsICJmaW5kQXR0YWNobWVudEVsZW1lbnRQYXJlbnRGb3JOb2RlIiwgInJlamVjdEF0dGFjaG1lbnRDb250ZW50cyIsICJub2RlTGVuZ3RoIiwgImZpbmRDb250YWluZXJBbmRPZmZzZXRGcm9tTG9jYXRpb24iLCAibm9kZU9mZnNldCIsICJmaW5kTm9kZUFuZE9mZnNldEZyb21Mb2NhdGlvbiIsICJnZXRTaWduaWZpY2FudE5vZGVzRm9ySW5kZXgiLCAiYWNjZXB0U2lnbmlmaWNhbnROb2RlcyIsICJyZWNvcmRpbmdOb2RlcyIsICJyZWplY3RFbXB0eVRleHROb2RlcyIsICJQb2ludE1hcHBlciIsICJjcmVhdGVET01SYW5nZUZyb21Qb2ludCIsICJ4IiwgInkiLCAiY2FyZXRQb3NpdGlvbkZyb21Qb2ludCIsICJvZmZzZXROb2RlIiwgImNyZWF0ZVJhbmdlIiwgInNldFN0YXJ0IiwgImNhcmV0UmFuZ2VGcm9tUG9pbnQiLCAiY3JlYXRlVGV4dFJhbmdlIiwgIm9yaWdpbmFsRE9NUmFuZ2UiLCAibW92ZVRvUG9pbnQiLCAic2VsZWN0IiwgImdldENsaWVudFJlY3RzRm9yRE9NUmFuZ2UiLCAiZ2V0Q2xpZW50UmVjdHMiLCAiU2VsZWN0aW9uTWFuYWdlciIsICJkaWRNb3VzZURvd24iLCAibG9jYXRpb25NYXBwZXIiLCAicG9pbnRNYXBwZXIiLCAibG9ja0NvdW50IiwgImN1cnJlbnRMb2NhdGlvblJhbmdlIiwgImxvY2tlZExvY2F0aW9uUmFuZ2UiLCAiY3JlYXRlRE9NUmFuZ2VGcm9tTG9jYXRpb25SYW5nZSIsICJ1cGRhdGVDdXJyZW50TG9jYXRpb25SYW5nZSIsICJzZXRMb2NhdGlvblJhbmdlRnJvbVBvaW50UmFuZ2UiLCAicG9pbnRSYW5nZSIsICJnZXRMb2NhdGlvbkF0UG9pbnQiLCAibG9jayIsICJ1bmxvY2siLCAiY2xlYXJTZWxlY3Rpb24iLCAiX2dldERPTVJhbmdlIiwgImNvbGxhcHNlZCIsICJzZWxlY3Rpb25Jc0V4cGFuZGVkIiwgImRvbVJhbmdlV2l0aGluRWxlbWVudCIsICJwYXVzZVRlbXBvcmFyaWx5IiwgInJlc3VtZUhhbmRsZXJzIiwgInBhdXNlZCIsICJyZXN1bWUiLCAiY2xlYXJUaW1lb3V0IiwgInJlc3VtZVRpbWVvdXQiLCAiX3RoaXMkZGVsZWdhdGUkbG9jYXRpIiwgImxvY2F0aW9uUmFuZ2VEaWRDaGFuZ2UiLCAicmFuZ2VTdGFydCIsICJyYW5nZUVuZCIsICJzZXRFbmQiLCAicG9pbnQiLCAiX3RoaXMkY3JlYXRlTG9jYXRpb25SIiwgIlVuIiwgIldpIiwgIlNuIiwgIlVpIiwgIkdpIiwgImtuIiwgIm9uIiwgIk9uIiwgImNuIiwgInVpIiwgIlJuIiwgIkZuIiwgIkVuIiwgIl9pIiwgImpuIiwgIlduIiwgInppIiwgIlZpIiwgIktpIiwgIlRuIiwgIlZuIiwgImllIiwgImdpIiwgInhpIiwgIkNpIiwgImJpIiwgImZpIiwgInZpIiwgImtleU5hbWVzIiwgInVuZG9hYmxlIiwgImNvbW1hbmRzIiwgImRvIiwgInVuZG9zIiwgIkF0dGFjaG1lbnRFZGl0b3JDb250cm9sbGVyIiwgInRpdGxlIiwgInRyaXhBY3Rpb24iLCAiZGlkQ2xpY2tUb29sYmFyIiwgImRpZENsaWNrQWN0aW9uQnV0dG9uIiwgInRleHRhcmVhIiwgInBsYWNlaG9sZGVyIiwgInRleHRhcmVhQ2xvbmUiLCAidGFiSW5kZXgiLCAiYXV0b3Jlc2l6ZSIsICJzY3JvbGxIZWlnaHQiLCAiZGlkSW5wdXRDYXB0aW9uIiwgImRpZEtleURvd25DYXB0aW9uIiwgImRpZENoYW5nZUNhcHRpb24iLCAiZGlkQmx1ckNhcHRpb24iLCAiZWRpdGluZ0ZpZ2NhcHRpb24iLCAiZWRpdENhcHRpb24iLCAiZm9jdXMiLCAiaW5zdGFsbCIsICJtYWtlRWxlbWVudE11dGFibGUiLCAiYWRkVG9vbGJhciIsICJpbnN0YWxsQ2FwdGlvbkVkaXRvciIsICJ1bmluc3RhbGwiLCAic2F2ZVBlbmRpbmdDYXB0aW9uIiwgImRpZFVuaW5zdGFsbEF0dGFjaG1lbnRFZGl0b3IiLCAicGVuZGluZ0NhcHRpb24iLCAiX3RoaXMkZGVsZWdhdGUzJGF0dGFjIiwgImF0dGFjaG1lbnRFZGl0b3JEaWRSZXF1ZXN0VXBkYXRpbmdBdHRyaWJ1dGVzRm9yQXR0YWNobWVudCIsICJhdHRhY2htZW50RWRpdG9yRGlkUmVxdWVzdFJlbW92aW5nQXR0cmlidXRlRm9yQXR0YWNobWVudCIsICJzdG9wUHJvcGFnYXRpb24iLCAiYXR0YWNobWVudEVkaXRvckRpZFJlcXVlc3RSZW1vdmFsT2ZBdHRhY2htZW50IiwgIl90aGlzJGRlbGVnYXRlNSRhdHRhYyIsICJrZXlDb2RlIiwgImF0dGFjaG1lbnRFZGl0b3JEaWRSZXF1ZXN0RGVzZWxlY3RpbmdBdHRhY2htZW50IiwgIkNvbXBvc2l0aW9uQ29udHJvbGxlciIsICJkaWRGb2N1cyIsICJkaWRCbHVyIiwgImRpZENsaWNrQXR0YWNobWVudCIsICJkb2N1bWVudFZpZXciLCAiX3RoaXMkYmx1clByb21pc2UiLCAiZm9jdXNlZCIsICJjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRGb2N1cyIsICJibHVyUHJvbWlzZSIsICJjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRCbHVyIiwgImZpbmRBdHRhY2htZW50Rm9yRWxlbWVudCIsICJjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRTZWxlY3RBdHRhY2htZW50IiwgImdldFNlcmlhbGl6YWJsZUVsZW1lbnQiLCAiaXNFZGl0aW5nQXR0YWNobWVudCIsICJfdGhpcyRkZWxlZ2F0ZTQkY29tcG8iLCAiX3RoaXMkZGVsZWdhdGU1JGNvbXBvIiwgImNhblN5bmNEb2N1bWVudFZpZXciLCAiY29tcG9zaXRpb25Db250cm9sbGVyV2lsbFN5bmNEb2N1bWVudFZpZXciLCAiY29tcG9zaXRpb25Db250cm9sbGVyRGlkU3luY0RvY3VtZW50VmlldyIsICJjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRSZW5kZXIiLCAicmVyZW5kZXJWaWV3Rm9yT2JqZWN0IiwgInJlZnJlc2hWaWV3Q2FjaGUiLCAiYXR0YWNobWVudEVkaXRvciIsICJpbnN0YWxsQXR0YWNobWVudEVkaXRvckZvckF0dGFjaG1lbnQiLCAiX3RoaXMkYXR0YWNobWVudEVkaXRvIiwgInVuaW5zdGFsbEF0dGFjaG1lbnRFZGl0b3IiLCAiX3RoaXMkYXR0YWNobWVudEVkaXRvMiIsICJjb21wb3NpdGlvbkNvbnRyb2xsZXJXaWxsVXBkYXRlQXR0YWNobWVudCIsICJjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRSZXF1ZXN0UmVtb3ZhbE9mQXR0YWNobWVudCIsICJjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRSZXF1ZXN0RGVzZWxlY3RpbmdBdHRhY2htZW50IiwgIkNvbnRyb2xsZXIiLCAibXV0YWJsZUF0dHJpYnV0ZU5hbWUiLCAibXV0YWJsZVNlbGVjdG9yIiwgImNoaWxkTGlzdCIsICJjaGFyYWN0ZXJEYXRhIiwgImNoYXJhY3RlckRhdGFPbGRWYWx1ZSIsICJzdWJ0cmVlIiwgIk11dGF0aW9uT2JzZXJ2ZXIiLCAiZGlkTXV0YXRlIiwgIm9ic2VydmVyIiwgIm9ic2VydmUiLCAiZGlzY29ubmVjdCIsICJtdXRhdGlvbnMiLCAiX3RoaXMkZGVsZWdhdGUkZWxlbWVuIiwgImZpbmRTaWduaWZpY2FudE11dGF0aW9ucyIsICJlbGVtZW50RGlkTXV0YXRlIiwgImdldE11dGF0aW9uU3VtbWFyeSIsICJtdXRhdGlvbiIsICJtdXRhdGlvbklzU2lnbmlmaWNhbnQiLCAibm9kZUlzTXV0YWJsZSIsICJub2Rlc01vZGlmaWVkQnlNdXRhdGlvbiIsICJub2RlSXNTaWduaWZpY2FudCIsICJhZGRlZE5vZGVzIiwgInJlbW92ZWROb2RlcyIsICJnZXRUZXh0TXV0YXRpb25TdW1tYXJ5IiwgImFkZGl0aW9ucyIsICJkZWxldGlvbnMiLCAiZ2V0VGV4dENoYW5nZXNGcm9tQ2hhcmFjdGVyRGF0YSIsICJ0ZXh0Q2hhbmdlcyIsICJnZXRUZXh0Q2hhbmdlc0Zyb21DaGlsZExpc3QiLCAiYWRkaXRpb24iLCAic3VtbWFyeSIsICJ0ZXh0QWRkZWQiLCAiZGVsZXRlZCIsICJ0ZXh0RGVsZXRlZCIsICJnZXRNdXRhdGlvbnNCeVR5cGUiLCAidGV4dFJlbW92ZWQiLCAiZ2V0VGV4dEZvck5vZGVzIiwgImNoYXJhY3Rlck11dGF0aW9ucyIsICJzdGFydE11dGF0aW9uIiwgImVuZE11dGF0aW9uIiwgInN1bW1hcml6ZWQiLCAib2xkU3RyaW5nIiwgIm5ld1N0cmluZyIsICJvbGRWYWx1ZSIsICJGaWxlVmVyaWZpY2F0aW9uT3BlcmF0aW9uIiwgInJlYWRlciIsICJGaWxlUmVhZGVyIiwgImFib3J0IiwgInJlYWRBc0FycmF5QnVmZmVyIiwgIkZsYWt5QW5kcm9pZEtleWJvYXJkRGV0ZWN0b3IiLCAic2hvdWxkSWdub3JlIiwgInByZXZpb3VzRXZlbnQiLCAiY2hlY2tTYW1zdW5nS2V5Ym9hcmRCdWdneU1vZGVTdGFydCIsICJjaGVja1NhbXN1bmdLZXlib2FyZEJ1Z2d5TW9kZUVuZCIsICJidWdneU1vZGUiLCAiaW5zZXJ0aW5nTG9uZ1RleHRBZnRlclVuaWRlbnRpZmllZENoYXIiLCAiZGlmZmVyc0luV2hpdGVzcGFjZSIsICJpbm5lclRleHQiLCAiaW5wdXRUeXBlIiwgIl90aGlzJGV2ZW50JGRhdGEiLCAiaXNCZWZvcmVJbnB1dEluc2VydFRleHQiLCAicHJldmlvdXNFdmVudFdhc1VuaWRlbnRpZmllZEtleWRvd24iLCAiX3RoaXMkcHJldmlvdXNFdmVudCIsICJfdGhpcyRwcmV2aW91c0V2ZW50MiIsICJ0ZXh0MSIsICJ0ZXh0MiIsICJub3JtYWxpemUiLCAid2hpdGVTcGFjZU5vcm1hbGl6ZXJSZWdleHAiLCAiSW5wdXRDb250cm9sbGVyIiwgIm11dGF0aW9uT2JzZXJ2ZXIiLCAiZmxha3lLZXlib2FyZERldGVjdG9yIiwgImV2ZW50cyIsICJoYW5kbGVyRm9yIiwgIm11dGF0aW9uU3VtbWFyeSIsICJlZGl0b3JXaWxsU3luY0RvY3VtZW50VmlldyIsICJlZGl0b3JEaWRTeW5jRG9jdW1lbnRWaWV3IiwgInJlcXVlc3RSZW5kZXIiLCAiX3RoaXMkZGVsZWdhdGUkaW5wdXRDIiwgImlucHV0Q29udHJvbGxlckRpZFJlcXVlc3RSZW5kZXIiLCAicmVxdWVzdFJlcGFyc2UiLCAiX3RoaXMkZGVsZWdhdGUyJGlucHV0IiwgImlucHV0Q29udHJvbGxlckRpZFJlcXVlc3RSZXBhcnNlIiwgIm9wZXJhdGlvbnMiLCAiYWxsIiwgImhhbmRsZUlucHV0IiwgIl90aGlzJHJlc3BvbmRlciIsICJpbnB1dENvbnRyb2xsZXJXaWxsQXR0YWNoRmlsZXMiLCAicmVzcG9uZGVyIiwgImRlZmF1bHRQcmV2ZW50ZWQiLCAiaW5wdXRDb250cm9sbGVyV2lsbEhhbmRsZUlucHV0IiwgImlucHV0Q29udHJvbGxlckRpZEhhbmRsZUlucHV0IiwgImNyZWF0ZUxpbmtIVE1MIiwgImFyIiwgInBhc3RlZEZpbGVDb3VudCIsICJMZXZlbDBJbnB1dENvbnRyb2xsZXIiLCAicmVzZXRJbnB1dFN1bW1hcnkiLCAic2V0SW5wdXRTdW1tYXJ5IiwgImlucHV0U3VtbWFyeSIsICJpc0NvbXBvc2luZyIsICJpbnB1dENvbnRyb2xsZXJEaWRBbGxvd1VuaGFuZGxlZElucHV0IiwgIm11dGF0aW9uSXNFeHBlY3RlZCIsICJwcmVmZXJEb2N1bWVudCIsICJtdXRhdGlvbkFkZGl0aW9uTWF0Y2hlc1N1bW1hcnkiLCAibXV0YXRpb25EZWxldGlvbk1hdGNoZXNTdW1tYXJ5IiwgImRpZERlbGV0ZSIsICJ1bmV4cGVjdGVkTmV3bGluZUFkZGl0aW9uIiwgInVuZXhwZWN0ZWROZXdsaW5lRGVsZXRpb24iLCAiX3RoaXMkY29tcG9zaXRpb25JbnB1IiwgInRleHRDaGFuZ2VkIiwgImNvbXBvc2VkRW1wdHlTdHJpbmciLCAiY29tcG9zaXRpb25JbnB1dCIsICJnZXRFbmREYXRhIiwgImdldENvbXBvc2l0aW9uSW5wdXQiLCAiQ29tcG9zaXRpb25JbnB1dCIsICJpc0VuZGVkIiwgIl90aGlzJHJlc3BvbmRlcjIiLCAic2VyaWFsaXplU2VsZWN0aW9uVG9EYXRhVHJhbnNmZXIiLCAiX3RoaXMkcmVzcG9uZGVyMyIsICJzZXREYXRhIiwgImNhbkFjY2VwdERhdGFUcmFuc2ZlciIsICJGaWxlcyIsICJnZXRQYXN0ZWRIVE1MVXNpbmdIaWRkZW5FbGVtZW50IiwgInBhZ2VYT2Zmc2V0IiwgInBhZ2VZT2Zmc2V0IiwgIm9wYWNpdHkiLCAicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwgImtleWRvd24iLCAiZGlkSW5wdXQiLCAia2V5TmFtZSIsICJfY29udGV4dDIiLCAibW9kaWZpZXIiLCAiX2NvbnRleHQiLCAiY2hhcmFjdGVyIiwgImlucHV0Q29udHJvbGxlckRpZFJlY2VpdmVLZXlib2FyZENvbW1hbmQiLCAia2V5cHJlc3MiLCAiYWx0S2V5IiwgInN0cmluZ0Zyb21LZXlFdmVudCIsICJfdGhpcyRyZXNwb25kZXI5IiwgImlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtVHlwaW5nIiwgInRleHRJbnB1dCIsICJ0b1VwcGVyQ2FzZSIsICJfdGhpcyRyZXNwb25kZXIxMCIsICJkcmFnZW50ZXIiLCAiZHJhZ3N0YXJ0IiwgIl90aGlzJGRlbGVnYXRlNSRpbnB1dCIsICJkcmFnZ2VkUmFuZ2UiLCAiaW5wdXRDb250cm9sbGVyRGlkU3RhcnREcmFnIiwgImRyYWdvdmVyIiwgImRyYWdnaW5nUG9pbnQiLCAiY2xpZW50WCIsICJjbGllbnRZIiwgIl90aGlzJGRlbGVnYXRlNiRpbnB1dCIsICJpbnB1dENvbnRyb2xsZXJEaWRSZWNlaXZlRHJhZ092ZXJQb2ludCIsICJkcmFnZW5kIiwgIl90aGlzJGRlbGVnYXRlNyRpbnB1dCIsICJpbnB1dENvbnRyb2xsZXJEaWRDYW5jZWxEcmFnIiwgImRyb3AiLCAiX2V2ZW50JGRhdGFUcmFuc2ZlciIsICJfdGhpcyRyZXNwb25kZXIxMSIsICJfdGhpcyRyZXNwb25kZXIxMiIsICJpbnB1dENvbnRyb2xsZXJXaWxsTW92ZVRleHQiLCAiX3RoaXMkcmVzcG9uZGVyMTMiLCAiZnJvbUpTT05TdHJpbmciLCAiY3V0IiwgIl90aGlzJHJlc3BvbmRlcjE0IiwgImNsaXBib2FyZERhdGEiLCAiaW5wdXRDb250cm9sbGVyV2lsbEN1dFRleHQiLCAiX3RoaXMkcmVzcG9uZGVyMTUiLCAicGFzdGUiLCAiY2xpcGJvYXJkIiwgInRlc3RDbGlwYm9hcmREYXRhIiwgInBhc3RlRXZlbnRJc0NyaXBwbGVkU2FmYXJpSFRNTFBhc3RlIiwgIl90aGlzJHJlc3BvbmRlcjE2IiwgImlucHV0Q29udHJvbGxlcldpbGxQYXN0ZSIsICJpbnB1dENvbnRyb2xsZXJEaWRQYXN0ZSIsICJfdGhpcyRyZXNwb25kZXIxNyIsICJfdGhpcyRkZWxlZ2F0ZTE0IiwgIl90aGlzJHJlc3BvbmRlcjE4IiwgIl90aGlzJGRlbGVnYXRlMTUiLCAiX3RoaXMkZGVsZWdhdGUxNiIsICJfdGhpcyRyZXNwb25kZXIxOSIsICJfdGhpcyRkZWxlZ2F0ZTE3IiwgIl9jbGlwYm9hcmQkaXRlbXMiLCAiX2NsaXBib2FyZCRpdGVtcyRnZXRBIiwgIml0ZW1zIiwgImdldEFzRmlsZSIsICJfdGhpcyRkZWxlZ2F0ZTE4IiwgIl90aGlzJHJlc3BvbmRlcjIwIiwgIl90aGlzJGRlbGVnYXRlMTkiLCAiZXh0ZW5zaW9uRm9yRmlsZSIsICJjb21wb3NpdGlvbnN0YXJ0IiwgImNvbXBvc2l0aW9udXBkYXRlIiwgImNvbXBvc2l0aW9uZW5kIiwgImJlZm9yZWlucHV0IiwgImJhY2tzcGFjZSIsICJfdGhpcyRkZWxlZ2F0ZTIwIiwgImRlbGV0ZSIsICJfdGhpcyRkZWxlZ2F0ZTIxIiwgInJldHVybiIsICJfdGhpcyRkZWxlZ2F0ZTIyIiwgIl90aGlzJHJlc3BvbmRlcjIxIiwgInRhYiIsICJfdGhpcyRyZXNwb25kZXIyMiIsICJfdGhpcyRyZXNwb25kZXIyMyIsICJfdGhpcyRyZXNwb25kZXIyNCIsICJfdGhpcyRyZXNwb25kZXIyNSIsICJjb250cm9sIiwgImQiLCAiX3RoaXMkZGVsZWdhdGUyMyIsICJfdGhpcyRkZWxlZ2F0ZTI0IiwgIl90aGlzJGRlbGVnYXRlMjUiLCAiX3RoaXMkcmVzcG9uZGVyMjYiLCAic2hpZnQiLCAiX3RoaXMkZGVsZWdhdGUyNiIsICJfdGhpcyRyZXNwb25kZXIyNyIsICJfdGhpcyRyZXNwb25kZXIyOCIsICJfdGhpcyRyZXNwb25kZXIyOSIsICJhbHQiLCAiX3RoaXMkZGVsZWdhdGUyNyIsICJtZXRhIiwgIl90aGlzJGRlbGVnYXRlMjgiLCAiX2ZpbGUkdHlwZSIsICJ3aGljaCIsICJjaGFyQ29kZSIsICJoYXNQYXN0ZWJvYXJkRmxhdm9yIiwgImhhc1JlYWRhYmxlRHluYW1pY0RhdGEiLCAiaXNFeHRlcm5hbEhUTUxQYXN0ZSIsICJpc0V4dGVybmFsUmljaFRleHRQYXN0ZSIsICJpbnB1dENvbnRyb2xsZXIiLCAiaXNTaWduaWZpY2FudCIsICJfdGhpcyRyZXNwb25kZXI1IiwgIl90aGlzJHJlc3BvbmRlcjQiLCAiY2FuQXBwbHlUb0RvY3VtZW50IiwgIl90aGlzJHJlc3BvbmRlcjYiLCAiX3RoaXMkcmVzcG9uZGVyNyIsICJfdGhpcyRyZXNwb25kZXI4IiwgIl90aGlzJGRhdGEkc3RhcnQiLCAiX3RoaXMkZGF0YSRlbmQiLCAiTGV2ZWwySW5wdXRDb250cm9sbGVyIiwgInNjaGVkdWxlZFJlbmRlciIsICJjb21wb3NpbmciLCAicmVwYXJzZSIsICJzY2hlZHVsZVJlbmRlciIsICJfdGhpcyRhZnRlclJlbmRlciIsICJjYW5jZWxBbmltYXRpb25GcmFtZSIsICJhZnRlclJlbmRlciIsICJ0b2dnbGVBdHRyaWJ1dGVJZlN1cHBvcnRlZCIsICJpbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybUZvcm1hdHRpbmciLCAiYWN0aXZhdGVBdHRyaWJ1dGVJZlN1cHBvcnRlZCIsICJnZXRUYXJnZXRET01SYW5nZSIsICJtaW5MZW5ndGgiLCAiX3RoaXMkZXZlbnQkZ2V0VGFyZ2V0IiwgIl90aGlzJGV2ZW50IiwgInRhcmdldFJhbmdlcyIsICJnZXRUYXJnZXRSYW5nZXMiLCAic3RhdGljUmFuZ2VUb1JhbmdlIiwgIndpdGhFdmVudCIsICJjb21tYW5kIiwgImtleWJvYXJkQ29tbWFuZEZyb21LZXlFdmVudCIsICJzaGlmdEtleSIsICJfZXZlbnQkY2xpcGJvYXJkRGF0YSIsICJwYXN0ZUV2ZW50SGFzRmlsZXNPbmx5IiwgInBhc3RlRXZlbnRIYXNQbGFpblRleHRPbmx5IiwgImlucHV0VHlwZXMiLCAiaW1tbWVkaWF0ZVJlbmRlciIsICJpbnB1dEV2ZW50IiwgImRyYWdnaW5nIiwgInBvaW50RnJvbUV2ZW50IiwgImRyYWdFdmVudEhhc0ZpbGVzIiwgIkFycm93TGVmdCIsICJBcnJvd1JpZ2h0IiwgIkJhY2tzcGFjZSIsICJUYWIiLCAiZGVsZXRlQnlDb21wb3NpdGlvbiIsICJkZWxldGVCeUN1dCIsICJkZWxldGVCeURyYWciLCAiZGVsZXRlQnlEcmFnUmFuZ2UiLCAiZGVsZXRlQ29tcG9zaXRpb25UZXh0IiwgImRlbGV0ZUNvbnRlbnQiLCAiZGVsZXRlQ29udGVudEJhY2t3YXJkIiwgImRlbGV0ZUNvbnRlbnRGb3J3YXJkIiwgImRlbGV0ZUVudGlyZVNvZnRMaW5lIiwgImRlbGV0ZUhhcmRMaW5lQmFja3dhcmQiLCAiZGVsZXRlSGFyZExpbmVGb3J3YXJkIiwgImRlbGV0ZVNvZnRMaW5lQmFja3dhcmQiLCAiZGVsZXRlU29mdExpbmVGb3J3YXJkIiwgImRlbGV0ZVdvcmRCYWNrd2FyZCIsICJkZWxldGVXb3JkRm9yd2FyZCIsICJmb3JtYXRCYWNrQ29sb3IiLCAiZm9ybWF0Qm9sZCIsICJmb3JtYXRGb250Q29sb3IiLCAiZm9ybWF0Rm9udE5hbWUiLCAiZm9ybWF0SW5kZW50IiwgImZvcm1hdEl0YWxpYyIsICJmb3JtYXRKdXN0aWZ5Q2VudGVyIiwgImZvcm1hdEp1c3RpZnlGdWxsIiwgImZvcm1hdEp1c3RpZnlMZWZ0IiwgImZvcm1hdEp1c3RpZnlSaWdodCIsICJmb3JtYXRPdXRkZW50IiwgImZvcm1hdFJlbW92ZSIsICJfdGhpcyRyZXNwb25kZXIzMCIsICJmb3JtYXRTZXRCbG9ja1RleHREaXJlY3Rpb24iLCAiZm9ybWF0U2V0SW5saW5lVGV4dERpcmVjdGlvbiIsICJmb3JtYXRTdHJpa2VUaHJvdWdoIiwgImZvcm1hdFN1YnNjcmlwdCIsICJmb3JtYXRTdXBlcnNjcmlwdCIsICJmb3JtYXRVbmRlcmxpbmUiLCAiaGlzdG9yeVJlZG8iLCAiaW5wdXRDb250cm9sbGVyV2lsbFBlcmZvcm1SZWRvIiwgImhpc3RvcnlVbmRvIiwgImlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtVW5kbyIsICJpbnNlcnRDb21wb3NpdGlvblRleHQiLCAiaW5zZXJ0RnJvbUNvbXBvc2l0aW9uIiwgImluc2VydEZyb21Ecm9wIiwgIl90aGlzJHJlc3BvbmRlcjMxIiwgImluc2VydEZyb21QYXN0ZSIsICJfdGhpcyRyZXNwb25kZXIzMiIsICJfdGhpcyRyZXNwb25kZXIzMyIsICJwcm9jZXNzYWJsZUZpbGVQYXN0ZSIsICJfdGhpcyRyZXNwb25kZXIzNCIsICJfdGhpcyRyZXNwb25kZXIzNSIsICJpbnNlcnRGcm9tWWFuayIsICJpbnNlcnRMaW5rIiwgImluc2VydE9yZGVyZWRMaXN0IiwgImluc2VydFBhcmFncmFwaCIsICJfdGhpcyRyZXNwb25kZXIzNiIsICJpbnNlcnRSZXBsYWNlbWVudFRleHQiLCAicmVwbGFjZW1lbnQiLCAiX3RoaXMkZXZlbnQkZGF0YVRyYW5zIiwgImluc2VydFRyYW5zcG9zZSIsICJpbnNlcnRVbm9yZGVyZWRMaXN0IiwgInN0YXRpY1JhbmdlIiwgIl9ldmVudCRkYXRhVHJhbnNmZXIkZiIsICJhdHRyaWJ1dGVCdXR0b25TZWxlY3RvciIsICJhY3Rpb25CdXR0b25TZWxlY3RvciIsICJ0b29sYmFyQnV0dG9uU2VsZWN0b3IiLCAiZGlhbG9nU2VsZWN0b3IiLCAiYWN0aXZlRGlhbG9nU2VsZWN0b3IiLCAiZGlhbG9nQnV0dG9uU2VsZWN0b3IiLCAiZGlhbG9nSW5wdXRTZWxlY3RvciIsICJnZXRJbnB1dEZvckRpYWxvZyIsICJnZXRBdHRyaWJ1dGVOYW1lIiwgImdldEFjdGlvbk5hbWUiLCAiVG9vbGJhckNvbnRyb2xsZXIiLCAiZGlkQ2xpY2tBdHRyaWJ1dGVCdXR0b24iLCAiZGlkQ2xpY2tEaWFsb2dCdXR0b24iLCAiZGlkS2V5RG93bkRpYWxvZ0lucHV0IiwgImFjdGlvbnMiLCAicmVzZXREaWFsb2dJbnB1dHMiLCAidG9vbGJhckRpZENsaWNrQnV0dG9uIiwgImFjdGlvbk5hbWUiLCAiZ2V0RGlhbG9nIiwgInRvZ2dsZURpYWxvZyIsICJ0b29sYmFyRGlkSW52b2tlQWN0aW9uIiwgInRvb2xiYXJEaWRUb2dnbGVBdHRyaWJ1dGUiLCAicmVmcmVzaEF0dHJpYnV0ZUJ1dHRvbnMiLCAiZGlhbG9nRWxlbWVudCIsICJkaWFsb2ciLCAiaGlkZURpYWxvZyIsICJ1cGRhdGVBY3Rpb25zIiwgInJlZnJlc2hBY3Rpb25CdXR0b25zIiwgImVhY2hBY3Rpb25CdXR0b24iLCAiZGlzYWJsZWQiLCAidXBkYXRlQXR0cmlidXRlcyIsICJlYWNoQXR0cmlidXRlQnV0dG9uIiwgImRpYWxvZ0lzVmlzaWJsZSIsICJhcHBseUtleWJvYXJkQ29tbWFuZCIsICJrZXlTdHJpbmciLCAiYnV0dG9uIiwgImJ1dHRvbktleXMiLCAiZGlhbG9nTmFtZSIsICJzaG93RGlhbG9nIiwgInRvb2xiYXJXaWxsU2hvd0RpYWxvZyIsICJkaXNhYmxlZElucHV0IiwgInRvb2xiYXJEaWRTaG93RGlhbG9nIiwgIndpbGxWYWxpZGF0ZSIsICJzZXRDdXN0b21WYWxpZGl0eSIsICJjaGVja1ZhbGlkaXR5IiwgImlzU2FmZUF0dHJpYnV0ZSIsICJ0b29sYmFyRGlkVXBkYXRlQXR0cmlidXRlIiwgImlzVmFsaWRBdHRyaWJ1dGUiLCAidG9vbGJhckRpZFJlbW92ZUF0dHJpYnV0ZSIsICJ0b29sYmFyRGlkSGlkZURpYWxvZyIsICJFZGl0b3JDb250cm9sbGVyIiwgImVkaXRvckVsZW1lbnQiLCAiY29tcG9zaXRpb25Db250cm9sbGVyIiwgInRvb2xiYXJDb250cm9sbGVyIiwgInRvb2xiYXJFbGVtZW50IiwgImVkaXRvciIsICJub3RpZnlFZGl0b3JFbGVtZW50IiwgImhhbmRsaW5nSW5wdXQiLCAidXBkYXRlQ3VycmVudEFjdGlvbnMiLCAicGFzdGluZyIsICJwYXN0ZWRSYW5nZSIsICJhdHRhY2htZW50TG9jYXRpb25SYW5nZSIsICJsb2FkaW5nU25hcHNob3QiLCAiaXNGb2N1c2VkIiwgInJlcXVlc3RlZExvY2F0aW9uUmFuZ2UiLCAiY29tcG9zaXRpb25SZXZpc2lvbldoZW5Mb2NhdGlvblJhbmdlUmVxdWVzdGVkIiwgInJlbmRlcmVkQ29tcG9zaXRpb25SZXZpc2lvbiIsICJydW5FZGl0b3JGaWx0ZXJzIiwgImlzRm9jdXNlZEludmlzaWJseSIsICJyZXF1ZXN0ZWRSZW5kZXIiLCAicmVjb3JkVHlwaW5nVW5kb0VudHJ5IiwgInJlY29yZEZvcm1hdHRpbmdVbmRvRW50cnkiLCAibG9jYXRpb25SYW5nZUJlZm9yZURyYWciLCAiaW52b2tpbmdFbGVtZW50IiwgImludm9rZUFjdGlvbiIsICJzZWxlY3Rpb25Gcm96ZW4iLCAiY2FuSW52b2tlQWN0aW9uIiwgImFjdGlvbklzRXh0ZXJuYWwiLCAiX3RoaXMkYWN0aW9ucyRhY3Rpb25OIiwgIl90aGlzJGFjdGlvbnMkYWN0aW9uTjIiLCAiZ2V0Q3VycmVudEFjdGlvbnMiLCAiY3VycmVudEFjdGlvbnMiLCAic25hcHNob3RzQXJlRXF1YWwiLCAidXBkYXRlSW5wdXRFbGVtZW50IiwgInNlcmlhbGl6ZXIiLCAic2V0Rm9ybVZhbHVlIiwgIm1lc3NhZ2UiLCAiZG9jdW1lbnRDaGFuZ2VkU2luY2VMYXN0UmVuZGVyIiwgIm5vdGlmeSIsICJnZXRVbmRvQ29udGV4dCIsICJnZXRMb2NhdGlvbkNvbnRleHQiLCAiZ2V0VGltZUNvbnRleHQiLCAiRGF0ZSIsICJnZXRUaW1lIiwgIl90aGlzJGVkaXRvckVsZW1lbnQkbyIsICJvd25lckRvY3VtZW50IiwgIkJyIiwgIktuIiwgIkduIiwgIlluIiwgIk1yIiwgInNyIiwgImhyIiwgImJyIiwgIlByIiwgIl9yIiwgIlFuIiwgIk90IiwgImpyIiwgImVyIiwgImppIiwgIlRyaXhUb29sYmFyRWxlbWVudCIsICJjb25uZWN0ZWRDYWxsYmFjayIsICJtYWtlRWRpdGFibGUiLCAiY29uZmlndXJlQ29udGVudEVkaXRhYmxlIiwgImRpc2FibGVPYmplY3RSZXNpemluZyIsICJzZXREZWZhdWx0UGFyYWdyYXBoU2VwYXJhdG9yIiwgIl9kb2N1bWVudCRxdWVyeUNvbW1hbiIsICJfZG9jdW1lbnQiLCAicXVlcnlDb21tYW5kU3VwcG9ydGVkIiwgImV4ZWNDb21tYW5kIiwgIl9kb2N1bWVudCRxdWVyeUNvbW1hbjIiLCAiX2RvY3VtZW50MiIsICJjdXJzb3JUYXJnZXRTdHlsZXMiLCAiX2ludGVybmFscyIsICJXZWFrTWFwIiwgIl92YWxpZGF0ZSIsICJXZWFrU2V0IiwgIkVsZW1lbnRJbnRlcm5hbHNEZWxlZ2F0ZSIsICJfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyIsICJ3cml0YWJsZSIsICJfY2xhc3NQcml2YXRlRmllbGRTZXQiLCAiYXR0YWNoSW50ZXJuYWxzIiwgIl9jbGFzc1ByaXZhdGVNZXRob2RHZXQiLCAiX3ZhbGlkYXRlMiIsICJkaXNjb25uZWN0ZWRDYWxsYmFjayIsICJsYWJlbHMiLCAiX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwgIl90aGlzJGVsZW1lbnQkaW5wdXRFbCIsICJpbnB1dEVsZW1lbnQiLCAidG9nZ2xlQXR0cmlidXRlIiwgInJlcXVpcmVkIiwgInZhbGlkaXR5IiwgInZhbGlkYXRpb25NZXNzYWdlIiwgInJlcG9ydFZhbGlkaXR5IiwgImN1c3RvbVZhbGlkYXRpb25NZXNzYWdlIiwgInZhbHVlTWlzc2luZyIsICJjdXN0b21FcnJvciIsICJzZXRWYWxpZGl0eSIsICJfZm9jdXNIYW5kbGVyIiwgIl9yZXNldEJ1YmJsZWQiLCAiX2NsaWNrQnViYmxlZCIsICJMZWdhY3lEZWxlZ2F0ZSIsICJjb250YWlucyIsICJsYWJlbCIsICJ0ZXh0cyIsICJfY2xhc3NQcml2YXRlRmllbGRHZXQyIiwgImNvbnNvbGUiLCAid2FybiIsICJfZGVsZWdhdGUiLCAiVHJpeEVkaXRvckVsZW1lbnQiLCAiZm9ybUFzc29jaWF0ZWQiLCAibG9jYWxOYW1lIiwgIl90aGlzJG93bmVyRG9jdW1lbnQiLCAidG9vbGJhcklkIiwgIl90aGlzJGlucHV0RWxlbWVudCIsICJfdGhpcyRvd25lckRvY3VtZW50MiIsICJpbnB1dElkIiwgIm5leHRFbGVtZW50U2libGluZyIsICJfdGhpcyRlZGl0b3JDb250cm9sbGUiLCAiZWRpdG9yQ29udHJvbGxlciIsICJfdGhpcyRpbnB1dEVsZW1lbnQyIiwgIl90aGlzJGlucHV0RWxlbWVudDMiLCAiZGVmYXVsdFZhbHVlIiwgIl90aGlzJGVkaXRvciIsICJfdGhpcyRlZGl0b3JDb250cm9sbGUyIiwgImZvcm1EaXNhYmxlZENhbGxiYWNrIiwgImZvcm1SZXNldENhbGxiYWNrIiwgIlRyaXgiLCAiVkVSU0lPTiIsICJ2ZXJzaW9uIiwgImNvcmUiLCAibW9kZWxzIiwgImNvbnRyb2xsZXJzIiwgIm9ic2VydmVycyIsICJjdXN0b21FbGVtZW50cyIsICJkZWZpbmUiLCAiY29udmVydGVyIiwgInNob3dkb3duIiwgInR1cm5kb3duU2VydmljZSIsICJ0dXJuZG93bl9icm93c2VyX2VzX2RlZmF1bHQiLCAibm8iLCAibWFya2Rvd25fZGVmYXVsdCIsICJ0YXJnZXROb2RlIiwgImVkaXRvciIsICJpbnB1dFRhcmdldCIsICJldmVudCIsICJtYXJrZG93biIsICJTM1VwbG9hZGVyIiwgImVudHJpZXMiLCAib25WaWV3RXJyb3IiLCAiZW50cnkiLCAieGhyIiwgImV2ZW50IiwgInBlcmNlbnQiLCAidXJsIiwgInMzX2RlZmF1bHQiLCAiTG9jYWxlSW5Mb2NhbFN0b3JhZ2UiLCAibG9jYWxlIiwgImxvY2FsX2xvY2FsZV9zdG9yYWdlX2RlZmF1bHQiLCAiaW1wb3J0X2Zsb3diaXRlX3Bob2VuaXgiLCAiQ09ORklSTV9BVFRSSUJVVEUiLCAiREFOR0VSX0RJQUxPRyIsICJleGVjQXR0ciIsICJlbCIsICJhdHRyTmFtZSIsICJhdHRyIiwgImV2ZW50IiwgImRldGFpbCIsICJzcmNFbGVtZW50IiwgIm1lc3NhZ2UiLCAidGFyZ2V0QnV0dG9uIiwgInRhcmdldCIsICJIb29rcyIsICJzb3J0YWJsZV9kZWZhdWx0IiwgIm1hcmtkb3duX2RlZmF1bHQiLCAibG9jYWxfbG9jYWxlX3N0b3JhZ2VfZGVmYXVsdCIsICJjc3JmVG9rZW4iLCAibGl2ZVNvY2tldCIsICJMaXZlU29ja2V0IiwgIlNvY2tldCIsICJzM19kZWZhdWx0IiwgInRvcGJhciIsICJfaW5mbyJdCn0K
