(()=>{var Ic=Object.create;var Hu=Object.defineProperty;var Oc=Object.getOwnPropertyDescriptor;var Mc=Object.getOwnPropertyNames;var Nc=Object.getPrototypeOf,Bc=Object.prototype.hasOwnProperty;var Ha=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports);var Fc=(i,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of Mc(e))!Bc.call(i,r)&&r!==t&&Hu(i,r,{get:()=>e[r],enumerable:!(n=Oc(e,r))||n.enumerable});return i};var za=(i,e,t)=>(t=i!=null?Ic(Nc(i)):{},Fc(e||!i||!i.__esModule?Hu(t,"default",{value:i,enumerable:!0}):t,i));var xl=Ha((Tl,Is)=>{(function(i,e){"use strict";(function(){for(var y=0,d=["ms","moz","webkit","o"],g=0;g<d.length&&!i.requestAnimationFrame;++g)i.requestAnimationFrame=i[d[g]+"RequestAnimationFrame"],i.cancelAnimationFrame=i[d[g]+"CancelAnimationFrame"]||i[d[g]+"CancelRequestAnimationFrame"];i.requestAnimationFrame||(i.requestAnimationFrame=function(b,E){var P=new Date().getTime(),o=Math.max(0,16-(P-y)),h=i.setTimeout(function(){b(P+o)},o);return y=P+o,h}),i.cancelAnimationFrame||(i.cancelAnimationFrame=function(b){clearTimeout(b)})})();var t,n,r,s=null,a=null,u=null,c=function(y,d,g){y.addEventListener?y.addEventListener(d,g,!1):y.attachEvent?y.attachEvent("on"+d,g):y["on"+d]=g},v={autoRun:!0,barThickness:3,barColors:{0:"rgba(26,  188, 156, .9)",".25":"rgba(52,  152, 219, .9)",".50":"rgba(241, 196, 15,  .9)",".75":"rgba(230, 126, 34,  .9)","1.0":"rgba(211, 84,  0,   .9)"},shadowBlur:10,shadowColor:"rgba(0,   0,   0,   .6)",className:null},k=function(){t.width=i.innerWidth,t.height=v.barThickness*5;var y=t.getContext("2d");y.shadowBlur=v.shadowBlur,y.shadowColor=v.shadowColor;var d=y.createLinearGradient(0,0,t.width,0);for(var g in v.barColors)d.addColorStop(g,v.barColors[g]);y.lineWidth=v.barThickness,y.beginPath(),y.moveTo(0,v.barThickness/2),y.lineTo(Math.ceil(n*t.width),v.barThickness/2),y.strokeStyle=d,y.stroke()},A=function(){t=e.createElement("canvas");var y=t.style;y.position="fixed",y.top=y.left=y.right=y.margin=y.padding=0,y.zIndex=100001,y.display="none",v.className&&t.classList.add(v.className),e.body.appendChild(t),c(i,"resize",k)},N={config:function(y){for(var d in y)v.hasOwnProperty(d)&&(v[d]=y[d])},show:function(y){if(!r)if(y){if(u)return;u=setTimeout(()=>N.show(),y)}else r=!0,a!==null&&i.cancelAnimationFrame(a),t||A(),t.style.opacity=1,t.style.display="block",N.progress(0),v.autoRun&&function d(){s=i.requestAnimationFrame(d),N.progress("+"+.05*Math.pow(1-Math.sqrt(n),2))}()},progress:function(y){return typeof y>"u"||(typeof y=="string"&&(y=(y.indexOf("+")>=0||y.indexOf("-")>=0?n:0)+parseFloat(y)),n=y>1?1:y,k()),n},hide:function(){clearTimeout(u),u=null,r&&(r=!1,s!=null&&(i.cancelAnimationFrame(s),s=null),function y(){if(N.progress("+.1")>=1&&(t.style.opacity-=.05,t.style.opacity<=.05)){t.style.display="none",a=null;return}a=i.requestAnimationFrame(y)}())}};typeof Is=="object"&&typeof Is.exports=="object"?Is.exports=N:typeof define=="function"&&define.amd?define(function(){return N}):this.topbar=N}).call(Tl,window,document)});var nd=Ha((id,Gs)=>{(function(){function i(o){"use strict";var h={omitExtraWLInCodeBlocks:{defaultValue:!1,describe:"Omit the default extra whiteline added to code blocks",type:"boolean"},noHeaderId:{defaultValue:!1,describe:"Turn on/off generated header id",type:"boolean"},prefixHeaderId:{defaultValue:!1,describe:"Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",type:"string"},rawPrefixHeaderId:{defaultValue:!1,describe:'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',type:"boolean"},ghCompatibleHeaderId:{defaultValue:!1,describe:"Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)",type:"boolean"},rawHeaderId:{defaultValue:!1,describe:`Remove only spaces, ' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids`,type:"boolean"},headerLevelStart:{defaultValue:!1,describe:"The header blocks level start",type:"integer"},parseImgDimensions:{defaultValue:!1,describe:"Turn on/off image dimension parsing",type:"boolean"},simplifiedAutoLink:{defaultValue:!1,describe:"Turn on/off GFM autolink style",type:"boolean"},excludeTrailingPunctuationFromURLs:{defaultValue:!1,describe:"Excludes trailing punctuation from links generated with autoLinking",type:"boolean"},literalMidWordUnderscores:{defaultValue:!1,describe:"Parse midword underscores as literal underscores",type:"boolean"},literalMidWordAsterisks:{defaultValue:!1,describe:"Parse midword asterisks as literal asterisks",type:"boolean"},strikethrough:{defaultValue:!1,describe:"Turn on/off strikethrough support",type:"boolean"},tables:{defaultValue:!1,describe:"Turn on/off tables support",type:"boolean"},tablesHeaderId:{defaultValue:!1,describe:"Add an id to table headers",type:"boolean"},ghCodeBlocks:{defaultValue:!0,describe:"Turn on/off GFM fenced code blocks support",type:"boolean"},tasklists:{defaultValue:!1,describe:"Turn on/off GFM tasklist support",type:"boolean"},smoothLivePreview:{defaultValue:!1,describe:"Prevents weird effects in live previews due to incomplete input",type:"boolean"},smartIndentationFix:{defaultValue:!1,describe:"Tries to smartly fix indentation in es6 strings",type:"boolean"},disableForced4SpacesIndentedSublists:{defaultValue:!1,describe:"Disables the requirement of indenting nested sublists by 4 spaces",type:"boolean"},simpleLineBreaks:{defaultValue:!1,describe:"Parses simple line breaks as <br> (GFM Style)",type:"boolean"},requireSpaceBeforeHeadingText:{defaultValue:!1,describe:"Makes adding a space between `#` and the header text mandatory (GFM Style)",type:"boolean"},ghMentions:{defaultValue:!1,describe:"Enables github @mentions",type:"boolean"},ghMentionsLink:{defaultValue:"https://github.com/{u}",describe:"Changes the link generated by @mentions. Only applies if ghMentions option is enabled.",type:"string"},encodeEmails:{defaultValue:!0,describe:"Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities",type:"boolean"},openLinksInNewWindow:{defaultValue:!1,describe:"Open all links in new windows",type:"boolean"},backslashEscapesHTMLTags:{defaultValue:!1,describe:"Support for HTML Tag escaping. ex: <div>foo</div>",type:"boolean"},emoji:{defaultValue:!1,describe:"Enable emoji support. Ex: `this is a :smile: emoji`",type:"boolean"},underline:{defaultValue:!1,describe:"Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`",type:"boolean"},ellipsis:{defaultValue:!0,describe:"Replaces three dots with the ellipsis unicode character",type:"boolean"},completeHTMLDocument:{defaultValue:!1,describe:"Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags",type:"boolean"},metadata:{defaultValue:!1,describe:"Enable support for document metadata (defined at the top of the document between `\xAB\xAB\xAB` and `\xBB\xBB\xBB` or between `---` and `---`).",type:"boolean"},splitAdjacentBlockquotes:{defaultValue:!1,describe:"Split adjacent blockquote blocks",type:"boolean"}};if(o===!1)return JSON.parse(JSON.stringify(h));var f={};for(var _ in h)h.hasOwnProperty(_)&&(f[_]=h[_].defaultValue);return f}function e(){"use strict";var o=i(!0),h={};for(var f in o)o.hasOwnProperty(f)&&(h[f]=!0);return h}var t={},n={},r={},s=i(!0),a="vanilla",u={github:{omitExtraWLInCodeBlocks:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,disableForced4SpacesIndentedSublists:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghCompatibleHeaderId:!0,ghMentions:!0,backslashEscapesHTMLTags:!0,emoji:!0,splitAdjacentBlockquotes:!0},original:{noHeaderId:!0,ghCodeBlocks:!1},ghost:{omitExtraWLInCodeBlocks:!0,parseImgDimensions:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,smoothLivePreview:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghMentions:!1,encodeEmails:!0},vanilla:i(!0),allOn:e()};t.helper={},t.extensions={},t.setOption=function(o,h){"use strict";return s[o]=h,this},t.getOption=function(o){"use strict";return s[o]},t.getOptions=function(){"use strict";return s},t.resetOptions=function(){"use strict";s=i(!0)},t.setFlavor=function(o){"use strict";if(!u.hasOwnProperty(o))throw Error(o+" flavor was not found");t.resetOptions();var h=u[o];a=o;for(var f in h)h.hasOwnProperty(f)&&(s[f]=h[f])},t.getFlavor=function(){"use strict";return a},t.getFlavorOptions=function(o){"use strict";if(u.hasOwnProperty(o))return u[o]},t.getDefaultOptions=function(o){"use strict";return i(o)},t.subParser=function(o,h){"use strict";if(t.helper.isString(o))if(typeof h<"u")n[o]=h;else{if(n.hasOwnProperty(o))return n[o];throw Error("SubParser named "+o+" not registered!")}},t.extension=function(o,h){"use strict";if(!t.helper.isString(o))throw Error("Extension 'name' must be a string");if(o=t.helper.stdExtName(o),t.helper.isUndefined(h)){if(!r.hasOwnProperty(o))throw Error("Extension named "+o+" is not registered!");return r[o]}else{typeof h=="function"&&(h=h()),t.helper.isArray(h)||(h=[h]);var f=c(h,o);if(f.valid)r[o]=h;else throw Error(f.error)}},t.getAllExtensions=function(){"use strict";return r},t.removeExtension=function(o){"use strict";delete r[o]},t.resetExtensions=function(){"use strict";r={}};function c(o,h){"use strict";var f=h?"Error in "+h+" extension->":"Error in unnamed extension",_={valid:!0,error:""};t.helper.isArray(o)||(o=[o]);for(var C=0;C<o.length;++C){var I=f+" sub-extension "+C+": ",L=o[C];if(typeof L!="object")return _.valid=!1,_.error=I+"must be an object, but "+typeof L+" given",_;if(!t.helper.isString(L.type))return _.valid=!1,_.error=I+'property "type" must be a string, but '+typeof L.type+" given",_;var F=L.type=L.type.toLowerCase();if(F==="language"&&(F=L.type="lang"),F==="html"&&(F=L.type="output"),F!=="lang"&&F!=="output"&&F!=="listener")return _.valid=!1,_.error=I+"type "+F+' is not recognized. Valid values: "lang/language", "output/html" or "listener"',_;if(F==="listener"){if(t.helper.isUndefined(L.listeners))return _.valid=!1,_.error=I+'. Extensions of type "listener" must have a property called "listeners"',_}else if(t.helper.isUndefined(L.filter)&&t.helper.isUndefined(L.regex))return _.valid=!1,_.error=I+F+' extensions must define either a "regex" property or a "filter" method',_;if(L.listeners){if(typeof L.listeners!="object")return _.valid=!1,_.error=I+'"listeners" property must be an object but '+typeof L.listeners+" given",_;for(var K in L.listeners)if(L.listeners.hasOwnProperty(K)&&typeof L.listeners[K]!="function")return _.valid=!1,_.error=I+'"listeners" property must be an hash of [event name]: [callback]. listeners.'+K+" must be a function but "+typeof L.listeners[K]+" given",_}if(L.filter){if(typeof L.filter!="function")return _.valid=!1,_.error=I+'"filter" must be a function, but '+typeof L.filter+" given",_}else if(L.regex){if(t.helper.isString(L.regex)&&(L.regex=new RegExp(L.regex,"g")),!(L.regex instanceof RegExp))return _.valid=!1,_.error=I+'"regex" property must either be a string or a RegExp object, but '+typeof L.regex+" given",_;if(t.helper.isUndefined(L.replace))return _.valid=!1,_.error=I+'"regex" extensions must implement a replace string or function',_}}return _}t.validateExtension=function(o){"use strict";var h=c(o,null);return h.valid?!0:(console.warn(h.error),!1)},t.hasOwnProperty("helper")||(t.helper={}),t.helper.isString=function(o){"use strict";return typeof o=="string"||o instanceof String},t.helper.isFunction=function(o){"use strict";var h={};return o&&h.toString.call(o)==="[object Function]"},t.helper.isArray=function(o){"use strict";return Array.isArray(o)},t.helper.isUndefined=function(o){"use strict";return typeof o>"u"},t.helper.forEach=function(o,h){"use strict";if(t.helper.isUndefined(o))throw new Error("obj param is required");if(t.helper.isUndefined(h))throw new Error("callback param is required");if(!t.helper.isFunction(h))throw new Error("callback param must be a function/closure");if(typeof o.forEach=="function")o.forEach(h);else if(t.helper.isArray(o))for(var f=0;f<o.length;f++)h(o[f],f,o);else if(typeof o=="object")for(var _ in o)o.hasOwnProperty(_)&&h(o[_],_,o);else throw new Error("obj does not seem to be an array or an iterable object")},t.helper.stdExtName=function(o){"use strict";return o.replace(/[_?*+\/\\.^-]/g,"").replace(/\s/g,"").toLowerCase()};function v(o,h){"use strict";var f=h.charCodeAt(0);return"\xA8E"+f+"E"}t.helper.escapeCharactersCallback=v,t.helper.escapeCharacters=function(o,h,f){"use strict";var _="(["+h.replace(/([\[\]\\])/g,"\\$1")+"])";f&&(_="\\\\"+_);var C=new RegExp(_,"g");return o=o.replace(C,v),o},t.helper.unescapeHTMLEntities=function(o){"use strict";return o.replace(/&quot;/g,'"').replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")};var k=function(o,h,f,_){"use strict";var C=_||"",I=C.indexOf("g")>-1,L=new RegExp(h+"|"+f,"g"+C.replace(/g/g,"")),F=new RegExp(h,C.replace(/g/g,"")),K=[],W,q,G,x,U;do for(W=0;G=L.exec(o);)if(F.test(G[0]))W++||(q=L.lastIndex,x=q-G[0].length);else if(W&&!--W){U=G.index+G[0].length;var z={left:{start:x,end:q},match:{start:q,end:G.index},right:{start:G.index,end:U},wholeMatch:{start:x,end:U}};if(K.push(z),!I)return K}while(W&&(L.lastIndex=q));return K};t.helper.matchRecursiveRegExp=function(o,h,f,_){"use strict";for(var C=k(o,h,f,_),I=[],L=0;L<C.length;++L)I.push([o.slice(C[L].wholeMatch.start,C[L].wholeMatch.end),o.slice(C[L].match.start,C[L].match.end),o.slice(C[L].left.start,C[L].left.end),o.slice(C[L].right.start,C[L].right.end)]);return I},t.helper.replaceRecursiveRegExp=function(o,h,f,_,C){"use strict";if(!t.helper.isFunction(h)){var I=h;h=function(){return I}}var L=k(o,f,_,C),F=o,K=L.length;if(K>0){var W=[];L[0].wholeMatch.start!==0&&W.push(o.slice(0,L[0].wholeMatch.start));for(var q=0;q<K;++q)W.push(h(o.slice(L[q].wholeMatch.start,L[q].wholeMatch.end),o.slice(L[q].match.start,L[q].match.end),o.slice(L[q].left.start,L[q].left.end),o.slice(L[q].right.start,L[q].right.end))),q<K-1&&W.push(o.slice(L[q].wholeMatch.end,L[q+1].wholeMatch.start));L[K-1].wholeMatch.end<o.length&&W.push(o.slice(L[K-1].wholeMatch.end)),F=W.join("")}return F},t.helper.regexIndexOf=function(o,h,f){"use strict";if(!t.helper.isString(o))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";if(!(h instanceof RegExp))throw"InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";var _=o.substring(f||0).search(h);return _>=0?_+(f||0):_},t.helper.splitAtIndex=function(o,h){"use strict";if(!t.helper.isString(o))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";return[o.substring(0,h),o.substring(h)]},t.helper.encodeEmailAddress=function(o){"use strict";var h=[function(f){return"&#"+f.charCodeAt(0)+";"},function(f){return"&#x"+f.charCodeAt(0).toString(16)+";"},function(f){return f}];return o=o.replace(/./g,function(f){if(f==="@")f=h[Math.floor(Math.random()*2)](f);else{var _=Math.random();f=_>.9?h[2](f):_>.45?h[1](f):h[0](f)}return f}),o},t.helper.padEnd=function(h,f,_){"use strict";return f=f>>0,_=String(_||" "),h.length>f?String(h):(f=f-h.length,f>_.length&&(_+=_.repeat(f/_.length)),String(h)+_.slice(0,f))},typeof console>"u"&&(console={warn:function(o){"use strict";alert(o)},log:function(o){"use strict";alert(o)},error:function(o){"use strict";throw o}}),t.helper.regexes={asteriskDashAndColon:/([*_:~])/g},t.helper.emojis={"+1":"\u{1F44D}","-1":"\u{1F44E}",100:"\u{1F4AF}",1234:"\u{1F522}","1st_place_medal":"\u{1F947}","2nd_place_medal":"\u{1F948}","3rd_place_medal":"\u{1F949}","8ball":"\u{1F3B1}",a:"\u{1F170}\uFE0F",ab:"\u{1F18E}",abc:"\u{1F524}",abcd:"\u{1F521}",accept:"\u{1F251}",aerial_tramway:"\u{1F6A1}",airplane:"\u2708\uFE0F",alarm_clock:"\u23F0",alembic:"\u2697\uFE0F",alien:"\u{1F47D}",ambulance:"\u{1F691}",amphora:"\u{1F3FA}",anchor:"\u2693\uFE0F",angel:"\u{1F47C}",anger:"\u{1F4A2}",angry:"\u{1F620}",anguished:"\u{1F627}",ant:"\u{1F41C}",apple:"\u{1F34E}",aquarius:"\u2652\uFE0F",aries:"\u2648\uFE0F",arrow_backward:"\u25C0\uFE0F",arrow_double_down:"\u23EC",arrow_double_up:"\u23EB",arrow_down:"\u2B07\uFE0F",arrow_down_small:"\u{1F53D}",arrow_forward:"\u25B6\uFE0F",arrow_heading_down:"\u2935\uFE0F",arrow_heading_up:"\u2934\uFE0F",arrow_left:"\u2B05\uFE0F",arrow_lower_left:"\u2199\uFE0F",arrow_lower_right:"\u2198\uFE0F",arrow_right:"\u27A1\uFE0F",arrow_right_hook:"\u21AA\uFE0F",arrow_up:"\u2B06\uFE0F",arrow_up_down:"\u2195\uFE0F",arrow_up_small:"\u{1F53C}",arrow_upper_left:"\u2196\uFE0F",arrow_upper_right:"\u2197\uFE0F",arrows_clockwise:"\u{1F503}",arrows_counterclockwise:"\u{1F504}",art:"\u{1F3A8}",articulated_lorry:"\u{1F69B}",artificial_satellite:"\u{1F6F0}",astonished:"\u{1F632}",athletic_shoe:"\u{1F45F}",atm:"\u{1F3E7}",atom_symbol:"\u269B\uFE0F",avocado:"\u{1F951}",b:"\u{1F171}\uFE0F",baby:"\u{1F476}",baby_bottle:"\u{1F37C}",baby_chick:"\u{1F424}",baby_symbol:"\u{1F6BC}",back:"\u{1F519}",bacon:"\u{1F953}",badminton:"\u{1F3F8}",baggage_claim:"\u{1F6C4}",baguette_bread:"\u{1F956}",balance_scale:"\u2696\uFE0F",balloon:"\u{1F388}",ballot_box:"\u{1F5F3}",ballot_box_with_check:"\u2611\uFE0F",bamboo:"\u{1F38D}",banana:"\u{1F34C}",bangbang:"\u203C\uFE0F",bank:"\u{1F3E6}",bar_chart:"\u{1F4CA}",barber:"\u{1F488}",baseball:"\u26BE\uFE0F",basketball:"\u{1F3C0}",basketball_man:"\u26F9\uFE0F",basketball_woman:"\u26F9\uFE0F&zwj;\u2640\uFE0F",bat:"\u{1F987}",bath:"\u{1F6C0}",bathtub:"\u{1F6C1}",battery:"\u{1F50B}",beach_umbrella:"\u{1F3D6}",bear:"\u{1F43B}",bed:"\u{1F6CF}",bee:"\u{1F41D}",beer:"\u{1F37A}",beers:"\u{1F37B}",beetle:"\u{1F41E}",beginner:"\u{1F530}",bell:"\u{1F514}",bellhop_bell:"\u{1F6CE}",bento:"\u{1F371}",biking_man:"\u{1F6B4}",bike:"\u{1F6B2}",biking_woman:"\u{1F6B4}&zwj;\u2640\uFE0F",bikini:"\u{1F459}",biohazard:"\u2623\uFE0F",bird:"\u{1F426}",birthday:"\u{1F382}",black_circle:"\u26AB\uFE0F",black_flag:"\u{1F3F4}",black_heart:"\u{1F5A4}",black_joker:"\u{1F0CF}",black_large_square:"\u2B1B\uFE0F",black_medium_small_square:"\u25FE\uFE0F",black_medium_square:"\u25FC\uFE0F",black_nib:"\u2712\uFE0F",black_small_square:"\u25AA\uFE0F",black_square_button:"\u{1F532}",blonde_man:"\u{1F471}",blonde_woman:"\u{1F471}&zwj;\u2640\uFE0F",blossom:"\u{1F33C}",blowfish:"\u{1F421}",blue_book:"\u{1F4D8}",blue_car:"\u{1F699}",blue_heart:"\u{1F499}",blush:"\u{1F60A}",boar:"\u{1F417}",boat:"\u26F5\uFE0F",bomb:"\u{1F4A3}",book:"\u{1F4D6}",bookmark:"\u{1F516}",bookmark_tabs:"\u{1F4D1}",books:"\u{1F4DA}",boom:"\u{1F4A5}",boot:"\u{1F462}",bouquet:"\u{1F490}",bowing_man:"\u{1F647}",bow_and_arrow:"\u{1F3F9}",bowing_woman:"\u{1F647}&zwj;\u2640\uFE0F",bowling:"\u{1F3B3}",boxing_glove:"\u{1F94A}",boy:"\u{1F466}",bread:"\u{1F35E}",bride_with_veil:"\u{1F470}",bridge_at_night:"\u{1F309}",briefcase:"\u{1F4BC}",broken_heart:"\u{1F494}",bug:"\u{1F41B}",building_construction:"\u{1F3D7}",bulb:"\u{1F4A1}",bullettrain_front:"\u{1F685}",bullettrain_side:"\u{1F684}",burrito:"\u{1F32F}",bus:"\u{1F68C}",business_suit_levitating:"\u{1F574}",busstop:"\u{1F68F}",bust_in_silhouette:"\u{1F464}",busts_in_silhouette:"\u{1F465}",butterfly:"\u{1F98B}",cactus:"\u{1F335}",cake:"\u{1F370}",calendar:"\u{1F4C6}",call_me_hand:"\u{1F919}",calling:"\u{1F4F2}",camel:"\u{1F42B}",camera:"\u{1F4F7}",camera_flash:"\u{1F4F8}",camping:"\u{1F3D5}",cancer:"\u264B\uFE0F",candle:"\u{1F56F}",candy:"\u{1F36C}",canoe:"\u{1F6F6}",capital_abcd:"\u{1F520}",capricorn:"\u2651\uFE0F",car:"\u{1F697}",card_file_box:"\u{1F5C3}",card_index:"\u{1F4C7}",card_index_dividers:"\u{1F5C2}",carousel_horse:"\u{1F3A0}",carrot:"\u{1F955}",cat:"\u{1F431}",cat2:"\u{1F408}",cd:"\u{1F4BF}",chains:"\u26D3",champagne:"\u{1F37E}",chart:"\u{1F4B9}",chart_with_downwards_trend:"\u{1F4C9}",chart_with_upwards_trend:"\u{1F4C8}",checkered_flag:"\u{1F3C1}",cheese:"\u{1F9C0}",cherries:"\u{1F352}",cherry_blossom:"\u{1F338}",chestnut:"\u{1F330}",chicken:"\u{1F414}",children_crossing:"\u{1F6B8}",chipmunk:"\u{1F43F}",chocolate_bar:"\u{1F36B}",christmas_tree:"\u{1F384}",church:"\u26EA\uFE0F",cinema:"\u{1F3A6}",circus_tent:"\u{1F3AA}",city_sunrise:"\u{1F307}",city_sunset:"\u{1F306}",cityscape:"\u{1F3D9}",cl:"\u{1F191}",clamp:"\u{1F5DC}",clap:"\u{1F44F}",clapper:"\u{1F3AC}",classical_building:"\u{1F3DB}",clinking_glasses:"\u{1F942}",clipboard:"\u{1F4CB}",clock1:"\u{1F550}",clock10:"\u{1F559}",clock1030:"\u{1F565}",clock11:"\u{1F55A}",clock1130:"\u{1F566}",clock12:"\u{1F55B}",clock1230:"\u{1F567}",clock130:"\u{1F55C}",clock2:"\u{1F551}",clock230:"\u{1F55D}",clock3:"\u{1F552}",clock330:"\u{1F55E}",clock4:"\u{1F553}",clock430:"\u{1F55F}",clock5:"\u{1F554}",clock530:"\u{1F560}",clock6:"\u{1F555}",clock630:"\u{1F561}",clock7:"\u{1F556}",clock730:"\u{1F562}",clock8:"\u{1F557}",clock830:"\u{1F563}",clock9:"\u{1F558}",clock930:"\u{1F564}",closed_book:"\u{1F4D5}",closed_lock_with_key:"\u{1F510}",closed_umbrella:"\u{1F302}",cloud:"\u2601\uFE0F",cloud_with_lightning:"\u{1F329}",cloud_with_lightning_and_rain:"\u26C8",cloud_with_rain:"\u{1F327}",cloud_with_snow:"\u{1F328}",clown_face:"\u{1F921}",clubs:"\u2663\uFE0F",cocktail:"\u{1F378}",coffee:"\u2615\uFE0F",coffin:"\u26B0\uFE0F",cold_sweat:"\u{1F630}",comet:"\u2604\uFE0F",computer:"\u{1F4BB}",computer_mouse:"\u{1F5B1}",confetti_ball:"\u{1F38A}",confounded:"\u{1F616}",confused:"\u{1F615}",congratulations:"\u3297\uFE0F",construction:"\u{1F6A7}",construction_worker_man:"\u{1F477}",construction_worker_woman:"\u{1F477}&zwj;\u2640\uFE0F",control_knobs:"\u{1F39B}",convenience_store:"\u{1F3EA}",cookie:"\u{1F36A}",cool:"\u{1F192}",policeman:"\u{1F46E}",copyright:"\xA9\uFE0F",corn:"\u{1F33D}",couch_and_lamp:"\u{1F6CB}",couple:"\u{1F46B}",couple_with_heart_woman_man:"\u{1F491}",couple_with_heart_man_man:"\u{1F468}&zwj;\u2764\uFE0F&zwj;\u{1F468}",couple_with_heart_woman_woman:"\u{1F469}&zwj;\u2764\uFE0F&zwj;\u{1F469}",couplekiss_man_man:"\u{1F468}&zwj;\u2764\uFE0F&zwj;\u{1F48B}&zwj;\u{1F468}",couplekiss_man_woman:"\u{1F48F}",couplekiss_woman_woman:"\u{1F469}&zwj;\u2764\uFE0F&zwj;\u{1F48B}&zwj;\u{1F469}",cow:"\u{1F42E}",cow2:"\u{1F404}",cowboy_hat_face:"\u{1F920}",crab:"\u{1F980}",crayon:"\u{1F58D}",credit_card:"\u{1F4B3}",crescent_moon:"\u{1F319}",cricket:"\u{1F3CF}",crocodile:"\u{1F40A}",croissant:"\u{1F950}",crossed_fingers:"\u{1F91E}",crossed_flags:"\u{1F38C}",crossed_swords:"\u2694\uFE0F",crown:"\u{1F451}",cry:"\u{1F622}",crying_cat_face:"\u{1F63F}",crystal_ball:"\u{1F52E}",cucumber:"\u{1F952}",cupid:"\u{1F498}",curly_loop:"\u27B0",currency_exchange:"\u{1F4B1}",curry:"\u{1F35B}",custard:"\u{1F36E}",customs:"\u{1F6C3}",cyclone:"\u{1F300}",dagger:"\u{1F5E1}",dancer:"\u{1F483}",dancing_women:"\u{1F46F}",dancing_men:"\u{1F46F}&zwj;\u2642\uFE0F",dango:"\u{1F361}",dark_sunglasses:"\u{1F576}",dart:"\u{1F3AF}",dash:"\u{1F4A8}",date:"\u{1F4C5}",deciduous_tree:"\u{1F333}",deer:"\u{1F98C}",department_store:"\u{1F3EC}",derelict_house:"\u{1F3DA}",desert:"\u{1F3DC}",desert_island:"\u{1F3DD}",desktop_computer:"\u{1F5A5}",male_detective:"\u{1F575}\uFE0F",diamond_shape_with_a_dot_inside:"\u{1F4A0}",diamonds:"\u2666\uFE0F",disappointed:"\u{1F61E}",disappointed_relieved:"\u{1F625}",dizzy:"\u{1F4AB}",dizzy_face:"\u{1F635}",do_not_litter:"\u{1F6AF}",dog:"\u{1F436}",dog2:"\u{1F415}",dollar:"\u{1F4B5}",dolls:"\u{1F38E}",dolphin:"\u{1F42C}",door:"\u{1F6AA}",doughnut:"\u{1F369}",dove:"\u{1F54A}",dragon:"\u{1F409}",dragon_face:"\u{1F432}",dress:"\u{1F457}",dromedary_camel:"\u{1F42A}",drooling_face:"\u{1F924}",droplet:"\u{1F4A7}",drum:"\u{1F941}",duck:"\u{1F986}",dvd:"\u{1F4C0}","e-mail":"\u{1F4E7}",eagle:"\u{1F985}",ear:"\u{1F442}",ear_of_rice:"\u{1F33E}",earth_africa:"\u{1F30D}",earth_americas:"\u{1F30E}",earth_asia:"\u{1F30F}",egg:"\u{1F95A}",eggplant:"\u{1F346}",eight_pointed_black_star:"\u2734\uFE0F",eight_spoked_asterisk:"\u2733\uFE0F",electric_plug:"\u{1F50C}",elephant:"\u{1F418}",email:"\u2709\uFE0F",end:"\u{1F51A}",envelope_with_arrow:"\u{1F4E9}",euro:"\u{1F4B6}",european_castle:"\u{1F3F0}",european_post_office:"\u{1F3E4}",evergreen_tree:"\u{1F332}",exclamation:"\u2757\uFE0F",expressionless:"\u{1F611}",eye:"\u{1F441}",eye_speech_bubble:"\u{1F441}&zwj;\u{1F5E8}",eyeglasses:"\u{1F453}",eyes:"\u{1F440}",face_with_head_bandage:"\u{1F915}",face_with_thermometer:"\u{1F912}",fist_oncoming:"\u{1F44A}",factory:"\u{1F3ED}",fallen_leaf:"\u{1F342}",family_man_woman_boy:"\u{1F46A}",family_man_boy:"\u{1F468}&zwj;\u{1F466}",family_man_boy_boy:"\u{1F468}&zwj;\u{1F466}&zwj;\u{1F466}",family_man_girl:"\u{1F468}&zwj;\u{1F467}",family_man_girl_boy:"\u{1F468}&zwj;\u{1F467}&zwj;\u{1F466}",family_man_girl_girl:"\u{1F468}&zwj;\u{1F467}&zwj;\u{1F467}",family_man_man_boy:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F466}",family_man_man_boy_boy:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F466}&zwj;\u{1F466}",family_man_man_girl:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}",family_man_man_girl_boy:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}&zwj;\u{1F466}",family_man_man_girl_girl:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}&zwj;\u{1F467}",family_man_woman_boy_boy:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",family_man_woman_girl:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}",family_man_woman_girl_boy:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",family_man_woman_girl_girl:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",family_woman_boy:"\u{1F469}&zwj;\u{1F466}",family_woman_boy_boy:"\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",family_woman_girl:"\u{1F469}&zwj;\u{1F467}",family_woman_girl_boy:"\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",family_woman_girl_girl:"\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",family_woman_woman_boy:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F466}",family_woman_woman_boy_boy:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",family_woman_woman_girl:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}",family_woman_woman_girl_boy:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",family_woman_woman_girl_girl:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",fast_forward:"\u23E9",fax:"\u{1F4E0}",fearful:"\u{1F628}",feet:"\u{1F43E}",female_detective:"\u{1F575}\uFE0F&zwj;\u2640\uFE0F",ferris_wheel:"\u{1F3A1}",ferry:"\u26F4",field_hockey:"\u{1F3D1}",file_cabinet:"\u{1F5C4}",file_folder:"\u{1F4C1}",film_projector:"\u{1F4FD}",film_strip:"\u{1F39E}",fire:"\u{1F525}",fire_engine:"\u{1F692}",fireworks:"\u{1F386}",first_quarter_moon:"\u{1F313}",first_quarter_moon_with_face:"\u{1F31B}",fish:"\u{1F41F}",fish_cake:"\u{1F365}",fishing_pole_and_fish:"\u{1F3A3}",fist_raised:"\u270A",fist_left:"\u{1F91B}",fist_right:"\u{1F91C}",flags:"\u{1F38F}",flashlight:"\u{1F526}",fleur_de_lis:"\u269C\uFE0F",flight_arrival:"\u{1F6EC}",flight_departure:"\u{1F6EB}",floppy_disk:"\u{1F4BE}",flower_playing_cards:"\u{1F3B4}",flushed:"\u{1F633}",fog:"\u{1F32B}",foggy:"\u{1F301}",football:"\u{1F3C8}",footprints:"\u{1F463}",fork_and_knife:"\u{1F374}",fountain:"\u26F2\uFE0F",fountain_pen:"\u{1F58B}",four_leaf_clover:"\u{1F340}",fox_face:"\u{1F98A}",framed_picture:"\u{1F5BC}",free:"\u{1F193}",fried_egg:"\u{1F373}",fried_shrimp:"\u{1F364}",fries:"\u{1F35F}",frog:"\u{1F438}",frowning:"\u{1F626}",frowning_face:"\u2639\uFE0F",frowning_man:"\u{1F64D}&zwj;\u2642\uFE0F",frowning_woman:"\u{1F64D}",middle_finger:"\u{1F595}",fuelpump:"\u26FD\uFE0F",full_moon:"\u{1F315}",full_moon_with_face:"\u{1F31D}",funeral_urn:"\u26B1\uFE0F",game_die:"\u{1F3B2}",gear:"\u2699\uFE0F",gem:"\u{1F48E}",gemini:"\u264A\uFE0F",ghost:"\u{1F47B}",gift:"\u{1F381}",gift_heart:"\u{1F49D}",girl:"\u{1F467}",globe_with_meridians:"\u{1F310}",goal_net:"\u{1F945}",goat:"\u{1F410}",golf:"\u26F3\uFE0F",golfing_man:"\u{1F3CC}\uFE0F",golfing_woman:"\u{1F3CC}\uFE0F&zwj;\u2640\uFE0F",gorilla:"\u{1F98D}",grapes:"\u{1F347}",green_apple:"\u{1F34F}",green_book:"\u{1F4D7}",green_heart:"\u{1F49A}",green_salad:"\u{1F957}",grey_exclamation:"\u2755",grey_question:"\u2754",grimacing:"\u{1F62C}",grin:"\u{1F601}",grinning:"\u{1F600}",guardsman:"\u{1F482}",guardswoman:"\u{1F482}&zwj;\u2640\uFE0F",guitar:"\u{1F3B8}",gun:"\u{1F52B}",haircut_woman:"\u{1F487}",haircut_man:"\u{1F487}&zwj;\u2642\uFE0F",hamburger:"\u{1F354}",hammer:"\u{1F528}",hammer_and_pick:"\u2692",hammer_and_wrench:"\u{1F6E0}",hamster:"\u{1F439}",hand:"\u270B",handbag:"\u{1F45C}",handshake:"\u{1F91D}",hankey:"\u{1F4A9}",hatched_chick:"\u{1F425}",hatching_chick:"\u{1F423}",headphones:"\u{1F3A7}",hear_no_evil:"\u{1F649}",heart:"\u2764\uFE0F",heart_decoration:"\u{1F49F}",heart_eyes:"\u{1F60D}",heart_eyes_cat:"\u{1F63B}",heartbeat:"\u{1F493}",heartpulse:"\u{1F497}",hearts:"\u2665\uFE0F",heavy_check_mark:"\u2714\uFE0F",heavy_division_sign:"\u2797",heavy_dollar_sign:"\u{1F4B2}",heavy_heart_exclamation:"\u2763\uFE0F",heavy_minus_sign:"\u2796",heavy_multiplication_x:"\u2716\uFE0F",heavy_plus_sign:"\u2795",helicopter:"\u{1F681}",herb:"\u{1F33F}",hibiscus:"\u{1F33A}",high_brightness:"\u{1F506}",high_heel:"\u{1F460}",hocho:"\u{1F52A}",hole:"\u{1F573}",honey_pot:"\u{1F36F}",horse:"\u{1F434}",horse_racing:"\u{1F3C7}",hospital:"\u{1F3E5}",hot_pepper:"\u{1F336}",hotdog:"\u{1F32D}",hotel:"\u{1F3E8}",hotsprings:"\u2668\uFE0F",hourglass:"\u231B\uFE0F",hourglass_flowing_sand:"\u23F3",house:"\u{1F3E0}",house_with_garden:"\u{1F3E1}",houses:"\u{1F3D8}",hugs:"\u{1F917}",hushed:"\u{1F62F}",ice_cream:"\u{1F368}",ice_hockey:"\u{1F3D2}",ice_skate:"\u26F8",icecream:"\u{1F366}",id:"\u{1F194}",ideograph_advantage:"\u{1F250}",imp:"\u{1F47F}",inbox_tray:"\u{1F4E5}",incoming_envelope:"\u{1F4E8}",tipping_hand_woman:"\u{1F481}",information_source:"\u2139\uFE0F",innocent:"\u{1F607}",interrobang:"\u2049\uFE0F",iphone:"\u{1F4F1}",izakaya_lantern:"\u{1F3EE}",jack_o_lantern:"\u{1F383}",japan:"\u{1F5FE}",japanese_castle:"\u{1F3EF}",japanese_goblin:"\u{1F47A}",japanese_ogre:"\u{1F479}",jeans:"\u{1F456}",joy:"\u{1F602}",joy_cat:"\u{1F639}",joystick:"\u{1F579}",kaaba:"\u{1F54B}",key:"\u{1F511}",keyboard:"\u2328\uFE0F",keycap_ten:"\u{1F51F}",kick_scooter:"\u{1F6F4}",kimono:"\u{1F458}",kiss:"\u{1F48B}",kissing:"\u{1F617}",kissing_cat:"\u{1F63D}",kissing_closed_eyes:"\u{1F61A}",kissing_heart:"\u{1F618}",kissing_smiling_eyes:"\u{1F619}",kiwi_fruit:"\u{1F95D}",koala:"\u{1F428}",koko:"\u{1F201}",label:"\u{1F3F7}",large_blue_circle:"\u{1F535}",large_blue_diamond:"\u{1F537}",large_orange_diamond:"\u{1F536}",last_quarter_moon:"\u{1F317}",last_quarter_moon_with_face:"\u{1F31C}",latin_cross:"\u271D\uFE0F",laughing:"\u{1F606}",leaves:"\u{1F343}",ledger:"\u{1F4D2}",left_luggage:"\u{1F6C5}",left_right_arrow:"\u2194\uFE0F",leftwards_arrow_with_hook:"\u21A9\uFE0F",lemon:"\u{1F34B}",leo:"\u264C\uFE0F",leopard:"\u{1F406}",level_slider:"\u{1F39A}",libra:"\u264E\uFE0F",light_rail:"\u{1F688}",link:"\u{1F517}",lion:"\u{1F981}",lips:"\u{1F444}",lipstick:"\u{1F484}",lizard:"\u{1F98E}",lock:"\u{1F512}",lock_with_ink_pen:"\u{1F50F}",lollipop:"\u{1F36D}",loop:"\u27BF",loud_sound:"\u{1F50A}",loudspeaker:"\u{1F4E2}",love_hotel:"\u{1F3E9}",love_letter:"\u{1F48C}",low_brightness:"\u{1F505}",lying_face:"\u{1F925}",m:"\u24C2\uFE0F",mag:"\u{1F50D}",mag_right:"\u{1F50E}",mahjong:"\u{1F004}\uFE0F",mailbox:"\u{1F4EB}",mailbox_closed:"\u{1F4EA}",mailbox_with_mail:"\u{1F4EC}",mailbox_with_no_mail:"\u{1F4ED}",man:"\u{1F468}",man_artist:"\u{1F468}&zwj;\u{1F3A8}",man_astronaut:"\u{1F468}&zwj;\u{1F680}",man_cartwheeling:"\u{1F938}&zwj;\u2642\uFE0F",man_cook:"\u{1F468}&zwj;\u{1F373}",man_dancing:"\u{1F57A}",man_facepalming:"\u{1F926}&zwj;\u2642\uFE0F",man_factory_worker:"\u{1F468}&zwj;\u{1F3ED}",man_farmer:"\u{1F468}&zwj;\u{1F33E}",man_firefighter:"\u{1F468}&zwj;\u{1F692}",man_health_worker:"\u{1F468}&zwj;\u2695\uFE0F",man_in_tuxedo:"\u{1F935}",man_judge:"\u{1F468}&zwj;\u2696\uFE0F",man_juggling:"\u{1F939}&zwj;\u2642\uFE0F",man_mechanic:"\u{1F468}&zwj;\u{1F527}",man_office_worker:"\u{1F468}&zwj;\u{1F4BC}",man_pilot:"\u{1F468}&zwj;\u2708\uFE0F",man_playing_handball:"\u{1F93E}&zwj;\u2642\uFE0F",man_playing_water_polo:"\u{1F93D}&zwj;\u2642\uFE0F",man_scientist:"\u{1F468}&zwj;\u{1F52C}",man_shrugging:"\u{1F937}&zwj;\u2642\uFE0F",man_singer:"\u{1F468}&zwj;\u{1F3A4}",man_student:"\u{1F468}&zwj;\u{1F393}",man_teacher:"\u{1F468}&zwj;\u{1F3EB}",man_technologist:"\u{1F468}&zwj;\u{1F4BB}",man_with_gua_pi_mao:"\u{1F472}",man_with_turban:"\u{1F473}",tangerine:"\u{1F34A}",mans_shoe:"\u{1F45E}",mantelpiece_clock:"\u{1F570}",maple_leaf:"\u{1F341}",martial_arts_uniform:"\u{1F94B}",mask:"\u{1F637}",massage_woman:"\u{1F486}",massage_man:"\u{1F486}&zwj;\u2642\uFE0F",meat_on_bone:"\u{1F356}",medal_military:"\u{1F396}",medal_sports:"\u{1F3C5}",mega:"\u{1F4E3}",melon:"\u{1F348}",memo:"\u{1F4DD}",men_wrestling:"\u{1F93C}&zwj;\u2642\uFE0F",menorah:"\u{1F54E}",mens:"\u{1F6B9}",metal:"\u{1F918}",metro:"\u{1F687}",microphone:"\u{1F3A4}",microscope:"\u{1F52C}",milk_glass:"\u{1F95B}",milky_way:"\u{1F30C}",minibus:"\u{1F690}",minidisc:"\u{1F4BD}",mobile_phone_off:"\u{1F4F4}",money_mouth_face:"\u{1F911}",money_with_wings:"\u{1F4B8}",moneybag:"\u{1F4B0}",monkey:"\u{1F412}",monkey_face:"\u{1F435}",monorail:"\u{1F69D}",moon:"\u{1F314}",mortar_board:"\u{1F393}",mosque:"\u{1F54C}",motor_boat:"\u{1F6E5}",motor_scooter:"\u{1F6F5}",motorcycle:"\u{1F3CD}",motorway:"\u{1F6E3}",mount_fuji:"\u{1F5FB}",mountain:"\u26F0",mountain_biking_man:"\u{1F6B5}",mountain_biking_woman:"\u{1F6B5}&zwj;\u2640\uFE0F",mountain_cableway:"\u{1F6A0}",mountain_railway:"\u{1F69E}",mountain_snow:"\u{1F3D4}",mouse:"\u{1F42D}",mouse2:"\u{1F401}",movie_camera:"\u{1F3A5}",moyai:"\u{1F5FF}",mrs_claus:"\u{1F936}",muscle:"\u{1F4AA}",mushroom:"\u{1F344}",musical_keyboard:"\u{1F3B9}",musical_note:"\u{1F3B5}",musical_score:"\u{1F3BC}",mute:"\u{1F507}",nail_care:"\u{1F485}",name_badge:"\u{1F4DB}",national_park:"\u{1F3DE}",nauseated_face:"\u{1F922}",necktie:"\u{1F454}",negative_squared_cross_mark:"\u274E",nerd_face:"\u{1F913}",neutral_face:"\u{1F610}",new:"\u{1F195}",new_moon:"\u{1F311}",new_moon_with_face:"\u{1F31A}",newspaper:"\u{1F4F0}",newspaper_roll:"\u{1F5DE}",next_track_button:"\u23ED",ng:"\u{1F196}",no_good_man:"\u{1F645}&zwj;\u2642\uFE0F",no_good_woman:"\u{1F645}",night_with_stars:"\u{1F303}",no_bell:"\u{1F515}",no_bicycles:"\u{1F6B3}",no_entry:"\u26D4\uFE0F",no_entry_sign:"\u{1F6AB}",no_mobile_phones:"\u{1F4F5}",no_mouth:"\u{1F636}",no_pedestrians:"\u{1F6B7}",no_smoking:"\u{1F6AD}","non-potable_water":"\u{1F6B1}",nose:"\u{1F443}",notebook:"\u{1F4D3}",notebook_with_decorative_cover:"\u{1F4D4}",notes:"\u{1F3B6}",nut_and_bolt:"\u{1F529}",o:"\u2B55\uFE0F",o2:"\u{1F17E}\uFE0F",ocean:"\u{1F30A}",octopus:"\u{1F419}",oden:"\u{1F362}",office:"\u{1F3E2}",oil_drum:"\u{1F6E2}",ok:"\u{1F197}",ok_hand:"\u{1F44C}",ok_man:"\u{1F646}&zwj;\u2642\uFE0F",ok_woman:"\u{1F646}",old_key:"\u{1F5DD}",older_man:"\u{1F474}",older_woman:"\u{1F475}",om:"\u{1F549}",on:"\u{1F51B}",oncoming_automobile:"\u{1F698}",oncoming_bus:"\u{1F68D}",oncoming_police_car:"\u{1F694}",oncoming_taxi:"\u{1F696}",open_file_folder:"\u{1F4C2}",open_hands:"\u{1F450}",open_mouth:"\u{1F62E}",open_umbrella:"\u2602\uFE0F",ophiuchus:"\u26CE",orange_book:"\u{1F4D9}",orthodox_cross:"\u2626\uFE0F",outbox_tray:"\u{1F4E4}",owl:"\u{1F989}",ox:"\u{1F402}",package:"\u{1F4E6}",page_facing_up:"\u{1F4C4}",page_with_curl:"\u{1F4C3}",pager:"\u{1F4DF}",paintbrush:"\u{1F58C}",palm_tree:"\u{1F334}",pancakes:"\u{1F95E}",panda_face:"\u{1F43C}",paperclip:"\u{1F4CE}",paperclips:"\u{1F587}",parasol_on_ground:"\u26F1",parking:"\u{1F17F}\uFE0F",part_alternation_mark:"\u303D\uFE0F",partly_sunny:"\u26C5\uFE0F",passenger_ship:"\u{1F6F3}",passport_control:"\u{1F6C2}",pause_button:"\u23F8",peace_symbol:"\u262E\uFE0F",peach:"\u{1F351}",peanuts:"\u{1F95C}",pear:"\u{1F350}",pen:"\u{1F58A}",pencil2:"\u270F\uFE0F",penguin:"\u{1F427}",pensive:"\u{1F614}",performing_arts:"\u{1F3AD}",persevere:"\u{1F623}",person_fencing:"\u{1F93A}",pouting_woman:"\u{1F64E}",phone:"\u260E\uFE0F",pick:"\u26CF",pig:"\u{1F437}",pig2:"\u{1F416}",pig_nose:"\u{1F43D}",pill:"\u{1F48A}",pineapple:"\u{1F34D}",ping_pong:"\u{1F3D3}",pisces:"\u2653\uFE0F",pizza:"\u{1F355}",place_of_worship:"\u{1F6D0}",plate_with_cutlery:"\u{1F37D}",play_or_pause_button:"\u23EF",point_down:"\u{1F447}",point_left:"\u{1F448}",point_right:"\u{1F449}",point_up:"\u261D\uFE0F",point_up_2:"\u{1F446}",police_car:"\u{1F693}",policewoman:"\u{1F46E}&zwj;\u2640\uFE0F",poodle:"\u{1F429}",popcorn:"\u{1F37F}",post_office:"\u{1F3E3}",postal_horn:"\u{1F4EF}",postbox:"\u{1F4EE}",potable_water:"\u{1F6B0}",potato:"\u{1F954}",pouch:"\u{1F45D}",poultry_leg:"\u{1F357}",pound:"\u{1F4B7}",rage:"\u{1F621}",pouting_cat:"\u{1F63E}",pouting_man:"\u{1F64E}&zwj;\u2642\uFE0F",pray:"\u{1F64F}",prayer_beads:"\u{1F4FF}",pregnant_woman:"\u{1F930}",previous_track_button:"\u23EE",prince:"\u{1F934}",princess:"\u{1F478}",printer:"\u{1F5A8}",purple_heart:"\u{1F49C}",purse:"\u{1F45B}",pushpin:"\u{1F4CC}",put_litter_in_its_place:"\u{1F6AE}",question:"\u2753",rabbit:"\u{1F430}",rabbit2:"\u{1F407}",racehorse:"\u{1F40E}",racing_car:"\u{1F3CE}",radio:"\u{1F4FB}",radio_button:"\u{1F518}",radioactive:"\u2622\uFE0F",railway_car:"\u{1F683}",railway_track:"\u{1F6E4}",rainbow:"\u{1F308}",rainbow_flag:"\u{1F3F3}\uFE0F&zwj;\u{1F308}",raised_back_of_hand:"\u{1F91A}",raised_hand_with_fingers_splayed:"\u{1F590}",raised_hands:"\u{1F64C}",raising_hand_woman:"\u{1F64B}",raising_hand_man:"\u{1F64B}&zwj;\u2642\uFE0F",ram:"\u{1F40F}",ramen:"\u{1F35C}",rat:"\u{1F400}",record_button:"\u23FA",recycle:"\u267B\uFE0F",red_circle:"\u{1F534}",registered:"\xAE\uFE0F",relaxed:"\u263A\uFE0F",relieved:"\u{1F60C}",reminder_ribbon:"\u{1F397}",repeat:"\u{1F501}",repeat_one:"\u{1F502}",rescue_worker_helmet:"\u26D1",restroom:"\u{1F6BB}",revolving_hearts:"\u{1F49E}",rewind:"\u23EA",rhinoceros:"\u{1F98F}",ribbon:"\u{1F380}",rice:"\u{1F35A}",rice_ball:"\u{1F359}",rice_cracker:"\u{1F358}",rice_scene:"\u{1F391}",right_anger_bubble:"\u{1F5EF}",ring:"\u{1F48D}",robot:"\u{1F916}",rocket:"\u{1F680}",rofl:"\u{1F923}",roll_eyes:"\u{1F644}",roller_coaster:"\u{1F3A2}",rooster:"\u{1F413}",rose:"\u{1F339}",rosette:"\u{1F3F5}",rotating_light:"\u{1F6A8}",round_pushpin:"\u{1F4CD}",rowing_man:"\u{1F6A3}",rowing_woman:"\u{1F6A3}&zwj;\u2640\uFE0F",rugby_football:"\u{1F3C9}",running_man:"\u{1F3C3}",running_shirt_with_sash:"\u{1F3BD}",running_woman:"\u{1F3C3}&zwj;\u2640\uFE0F",sa:"\u{1F202}\uFE0F",sagittarius:"\u2650\uFE0F",sake:"\u{1F376}",sandal:"\u{1F461}",santa:"\u{1F385}",satellite:"\u{1F4E1}",saxophone:"\u{1F3B7}",school:"\u{1F3EB}",school_satchel:"\u{1F392}",scissors:"\u2702\uFE0F",scorpion:"\u{1F982}",scorpius:"\u264F\uFE0F",scream:"\u{1F631}",scream_cat:"\u{1F640}",scroll:"\u{1F4DC}",seat:"\u{1F4BA}",secret:"\u3299\uFE0F",see_no_evil:"\u{1F648}",seedling:"\u{1F331}",selfie:"\u{1F933}",shallow_pan_of_food:"\u{1F958}",shamrock:"\u2618\uFE0F",shark:"\u{1F988}",shaved_ice:"\u{1F367}",sheep:"\u{1F411}",shell:"\u{1F41A}",shield:"\u{1F6E1}",shinto_shrine:"\u26E9",ship:"\u{1F6A2}",shirt:"\u{1F455}",shopping:"\u{1F6CD}",shopping_cart:"\u{1F6D2}",shower:"\u{1F6BF}",shrimp:"\u{1F990}",signal_strength:"\u{1F4F6}",six_pointed_star:"\u{1F52F}",ski:"\u{1F3BF}",skier:"\u26F7",skull:"\u{1F480}",skull_and_crossbones:"\u2620\uFE0F",sleeping:"\u{1F634}",sleeping_bed:"\u{1F6CC}",sleepy:"\u{1F62A}",slightly_frowning_face:"\u{1F641}",slightly_smiling_face:"\u{1F642}",slot_machine:"\u{1F3B0}",small_airplane:"\u{1F6E9}",small_blue_diamond:"\u{1F539}",small_orange_diamond:"\u{1F538}",small_red_triangle:"\u{1F53A}",small_red_triangle_down:"\u{1F53B}",smile:"\u{1F604}",smile_cat:"\u{1F638}",smiley:"\u{1F603}",smiley_cat:"\u{1F63A}",smiling_imp:"\u{1F608}",smirk:"\u{1F60F}",smirk_cat:"\u{1F63C}",smoking:"\u{1F6AC}",snail:"\u{1F40C}",snake:"\u{1F40D}",sneezing_face:"\u{1F927}",snowboarder:"\u{1F3C2}",snowflake:"\u2744\uFE0F",snowman:"\u26C4\uFE0F",snowman_with_snow:"\u2603\uFE0F",sob:"\u{1F62D}",soccer:"\u26BD\uFE0F",soon:"\u{1F51C}",sos:"\u{1F198}",sound:"\u{1F509}",space_invader:"\u{1F47E}",spades:"\u2660\uFE0F",spaghetti:"\u{1F35D}",sparkle:"\u2747\uFE0F",sparkler:"\u{1F387}",sparkles:"\u2728",sparkling_heart:"\u{1F496}",speak_no_evil:"\u{1F64A}",speaker:"\u{1F508}",speaking_head:"\u{1F5E3}",speech_balloon:"\u{1F4AC}",speedboat:"\u{1F6A4}",spider:"\u{1F577}",spider_web:"\u{1F578}",spiral_calendar:"\u{1F5D3}",spiral_notepad:"\u{1F5D2}",spoon:"\u{1F944}",squid:"\u{1F991}",stadium:"\u{1F3DF}",star:"\u2B50\uFE0F",star2:"\u{1F31F}",star_and_crescent:"\u262A\uFE0F",star_of_david:"\u2721\uFE0F",stars:"\u{1F320}",station:"\u{1F689}",statue_of_liberty:"\u{1F5FD}",steam_locomotive:"\u{1F682}",stew:"\u{1F372}",stop_button:"\u23F9",stop_sign:"\u{1F6D1}",stopwatch:"\u23F1",straight_ruler:"\u{1F4CF}",strawberry:"\u{1F353}",stuck_out_tongue:"\u{1F61B}",stuck_out_tongue_closed_eyes:"\u{1F61D}",stuck_out_tongue_winking_eye:"\u{1F61C}",studio_microphone:"\u{1F399}",stuffed_flatbread:"\u{1F959}",sun_behind_large_cloud:"\u{1F325}",sun_behind_rain_cloud:"\u{1F326}",sun_behind_small_cloud:"\u{1F324}",sun_with_face:"\u{1F31E}",sunflower:"\u{1F33B}",sunglasses:"\u{1F60E}",sunny:"\u2600\uFE0F",sunrise:"\u{1F305}",sunrise_over_mountains:"\u{1F304}",surfing_man:"\u{1F3C4}",surfing_woman:"\u{1F3C4}&zwj;\u2640\uFE0F",sushi:"\u{1F363}",suspension_railway:"\u{1F69F}",sweat:"\u{1F613}",sweat_drops:"\u{1F4A6}",sweat_smile:"\u{1F605}",sweet_potato:"\u{1F360}",swimming_man:"\u{1F3CA}",swimming_woman:"\u{1F3CA}&zwj;\u2640\uFE0F",symbols:"\u{1F523}",synagogue:"\u{1F54D}",syringe:"\u{1F489}",taco:"\u{1F32E}",tada:"\u{1F389}",tanabata_tree:"\u{1F38B}",taurus:"\u2649\uFE0F",taxi:"\u{1F695}",tea:"\u{1F375}",telephone_receiver:"\u{1F4DE}",telescope:"\u{1F52D}",tennis:"\u{1F3BE}",tent:"\u26FA\uFE0F",thermometer:"\u{1F321}",thinking:"\u{1F914}",thought_balloon:"\u{1F4AD}",ticket:"\u{1F3AB}",tickets:"\u{1F39F}",tiger:"\u{1F42F}",tiger2:"\u{1F405}",timer_clock:"\u23F2",tipping_hand_man:"\u{1F481}&zwj;\u2642\uFE0F",tired_face:"\u{1F62B}",tm:"\u2122\uFE0F",toilet:"\u{1F6BD}",tokyo_tower:"\u{1F5FC}",tomato:"\u{1F345}",tongue:"\u{1F445}",top:"\u{1F51D}",tophat:"\u{1F3A9}",tornado:"\u{1F32A}",trackball:"\u{1F5B2}",tractor:"\u{1F69C}",traffic_light:"\u{1F6A5}",train:"\u{1F68B}",train2:"\u{1F686}",tram:"\u{1F68A}",triangular_flag_on_post:"\u{1F6A9}",triangular_ruler:"\u{1F4D0}",trident:"\u{1F531}",triumph:"\u{1F624}",trolleybus:"\u{1F68E}",trophy:"\u{1F3C6}",tropical_drink:"\u{1F379}",tropical_fish:"\u{1F420}",truck:"\u{1F69A}",trumpet:"\u{1F3BA}",tulip:"\u{1F337}",tumbler_glass:"\u{1F943}",turkey:"\u{1F983}",turtle:"\u{1F422}",tv:"\u{1F4FA}",twisted_rightwards_arrows:"\u{1F500}",two_hearts:"\u{1F495}",two_men_holding_hands:"\u{1F46C}",two_women_holding_hands:"\u{1F46D}",u5272:"\u{1F239}",u5408:"\u{1F234}",u55b6:"\u{1F23A}",u6307:"\u{1F22F}\uFE0F",u6708:"\u{1F237}\uFE0F",u6709:"\u{1F236}",u6e80:"\u{1F235}",u7121:"\u{1F21A}\uFE0F",u7533:"\u{1F238}",u7981:"\u{1F232}",u7a7a:"\u{1F233}",umbrella:"\u2614\uFE0F",unamused:"\u{1F612}",underage:"\u{1F51E}",unicorn:"\u{1F984}",unlock:"\u{1F513}",up:"\u{1F199}",upside_down_face:"\u{1F643}",v:"\u270C\uFE0F",vertical_traffic_light:"\u{1F6A6}",vhs:"\u{1F4FC}",vibration_mode:"\u{1F4F3}",video_camera:"\u{1F4F9}",video_game:"\u{1F3AE}",violin:"\u{1F3BB}",virgo:"\u264D\uFE0F",volcano:"\u{1F30B}",volleyball:"\u{1F3D0}",vs:"\u{1F19A}",vulcan_salute:"\u{1F596}",walking_man:"\u{1F6B6}",walking_woman:"\u{1F6B6}&zwj;\u2640\uFE0F",waning_crescent_moon:"\u{1F318}",waning_gibbous_moon:"\u{1F316}",warning:"\u26A0\uFE0F",wastebasket:"\u{1F5D1}",watch:"\u231A\uFE0F",water_buffalo:"\u{1F403}",watermelon:"\u{1F349}",wave:"\u{1F44B}",wavy_dash:"\u3030\uFE0F",waxing_crescent_moon:"\u{1F312}",wc:"\u{1F6BE}",weary:"\u{1F629}",wedding:"\u{1F492}",weight_lifting_man:"\u{1F3CB}\uFE0F",weight_lifting_woman:"\u{1F3CB}\uFE0F&zwj;\u2640\uFE0F",whale:"\u{1F433}",whale2:"\u{1F40B}",wheel_of_dharma:"\u2638\uFE0F",wheelchair:"\u267F\uFE0F",white_check_mark:"\u2705",white_circle:"\u26AA\uFE0F",white_flag:"\u{1F3F3}\uFE0F",white_flower:"\u{1F4AE}",white_large_square:"\u2B1C\uFE0F",white_medium_small_square:"\u25FD\uFE0F",white_medium_square:"\u25FB\uFE0F",white_small_square:"\u25AB\uFE0F",white_square_button:"\u{1F533}",wilted_flower:"\u{1F940}",wind_chime:"\u{1F390}",wind_face:"\u{1F32C}",wine_glass:"\u{1F377}",wink:"\u{1F609}",wolf:"\u{1F43A}",woman:"\u{1F469}",woman_artist:"\u{1F469}&zwj;\u{1F3A8}",woman_astronaut:"\u{1F469}&zwj;\u{1F680}",woman_cartwheeling:"\u{1F938}&zwj;\u2640\uFE0F",woman_cook:"\u{1F469}&zwj;\u{1F373}",woman_facepalming:"\u{1F926}&zwj;\u2640\uFE0F",woman_factory_worker:"\u{1F469}&zwj;\u{1F3ED}",woman_farmer:"\u{1F469}&zwj;\u{1F33E}",woman_firefighter:"\u{1F469}&zwj;\u{1F692}",woman_health_worker:"\u{1F469}&zwj;\u2695\uFE0F",woman_judge:"\u{1F469}&zwj;\u2696\uFE0F",woman_juggling:"\u{1F939}&zwj;\u2640\uFE0F",woman_mechanic:"\u{1F469}&zwj;\u{1F527}",woman_office_worker:"\u{1F469}&zwj;\u{1F4BC}",woman_pilot:"\u{1F469}&zwj;\u2708\uFE0F",woman_playing_handball:"\u{1F93E}&zwj;\u2640\uFE0F",woman_playing_water_polo:"\u{1F93D}&zwj;\u2640\uFE0F",woman_scientist:"\u{1F469}&zwj;\u{1F52C}",woman_shrugging:"\u{1F937}&zwj;\u2640\uFE0F",woman_singer:"\u{1F469}&zwj;\u{1F3A4}",woman_student:"\u{1F469}&zwj;\u{1F393}",woman_teacher:"\u{1F469}&zwj;\u{1F3EB}",woman_technologist:"\u{1F469}&zwj;\u{1F4BB}",woman_with_turban:"\u{1F473}&zwj;\u2640\uFE0F",womans_clothes:"\u{1F45A}",womans_hat:"\u{1F452}",women_wrestling:"\u{1F93C}&zwj;\u2640\uFE0F",womens:"\u{1F6BA}",world_map:"\u{1F5FA}",worried:"\u{1F61F}",wrench:"\u{1F527}",writing_hand:"\u270D\uFE0F",x:"\u274C",yellow_heart:"\u{1F49B}",yen:"\u{1F4B4}",yin_yang:"\u262F\uFE0F",yum:"\u{1F60B}",zap:"\u26A1\uFE0F",zipper_mouth_face:"\u{1F910}",zzz:"\u{1F4A4}",octocat:'<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',showdown:`<span style="font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>`},t.Converter=function(o){"use strict";var h={},f=[],_=[],C={},I=a,L={parsed:{},raw:"",format:""};F();function F(){o=o||{};for(var x in s)s.hasOwnProperty(x)&&(h[x]=s[x]);if(typeof o=="object")for(var U in o)o.hasOwnProperty(U)&&(h[U]=o[U]);else throw Error("Converter expects the passed parameter to be an object, but "+typeof o+" was passed instead.");h.extensions&&t.helper.forEach(h.extensions,K)}function K(x,U){if(U=U||null,t.helper.isString(x))if(x=t.helper.stdExtName(x),U=x,t.extensions[x]){console.warn("DEPRECATION WARNING: "+x+" is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!"),W(t.extensions[x],x);return}else if(!t.helper.isUndefined(r[x]))x=r[x];else throw Error('Extension "'+x+'" could not be loaded. It was either not found or is not a valid extension.');typeof x=="function"&&(x=x()),t.helper.isArray(x)||(x=[x]);var z=c(x,U);if(!z.valid)throw Error(z.error);for(var $=0;$<x.length;++$){switch(x[$].type){case"lang":f.push(x[$]);break;case"output":_.push(x[$]);break}if(x[$].hasOwnProperty("listeners"))for(var ee in x[$].listeners)x[$].listeners.hasOwnProperty(ee)&&q(ee,x[$].listeners[ee])}}function W(x,U){typeof x=="function"&&(x=x(new t.Converter)),t.helper.isArray(x)||(x=[x]);var z=c(x,U);if(!z.valid)throw Error(z.error);for(var $=0;$<x.length;++$)switch(x[$].type){case"lang":f.push(x[$]);break;case"output":_.push(x[$]);break;default:throw Error("Extension loader error: Type unrecognized!!!")}}function q(x,U){if(!t.helper.isString(x))throw Error("Invalid argument in converter.listen() method: name must be a string, but "+typeof x+" given");if(typeof U!="function")throw Error("Invalid argument in converter.listen() method: callback must be a function, but "+typeof U+" given");C.hasOwnProperty(x)||(C[x]=[]),C[x].push(U)}function G(x){var U=x.match(/^\s*/)[0].length,z=new RegExp("^\\s{0,"+U+"}","gm");return x.replace(z,"")}this._dispatch=function(U,z,$,ee){if(C.hasOwnProperty(U))for(var X=0;X<C[U].length;++X){var ie=C[U][X](U,z,this,$,ee);ie&&typeof ie<"u"&&(z=ie)}return z},this.listen=function(x,U){return q(x,U),this},this.makeHtml=function(x){if(!x)return x;var U={gHtmlBlocks:[],gHtmlMdBlocks:[],gHtmlSpans:[],gUrls:{},gTitles:{},gDimensions:{},gListLevel:0,hashLinkCounts:{},langExtensions:f,outputModifiers:_,converter:this,ghCodeBlocks:[],metadata:{parsed:{},raw:"",format:""}};return x=x.replace(/¨/g,"\xA8T"),x=x.replace(/\$/g,"\xA8D"),x=x.replace(/\r\n/g,`
`),x=x.replace(/\r/g,`
`),x=x.replace(/\u00A0/g,"&nbsp;"),h.smartIndentationFix&&(x=G(x)),x=`

`+x+`

`,x=t.subParser("detab")(x,h,U),x=x.replace(/^[ \t]+$/mg,""),t.helper.forEach(f,function(z){x=t.subParser("runExtension")(z,x,h,U)}),x=t.subParser("metadata")(x,h,U),x=t.subParser("hashPreCodeTags")(x,h,U),x=t.subParser("githubCodeBlocks")(x,h,U),x=t.subParser("hashHTMLBlocks")(x,h,U),x=t.subParser("hashCodeTags")(x,h,U),x=t.subParser("stripLinkDefinitions")(x,h,U),x=t.subParser("blockGamut")(x,h,U),x=t.subParser("unhashHTMLSpans")(x,h,U),x=t.subParser("unescapeSpecialChars")(x,h,U),x=x.replace(/¨D/g,"$$"),x=x.replace(/¨T/g,"\xA8"),x=t.subParser("completeHTMLDocument")(x,h,U),t.helper.forEach(_,function(z){x=t.subParser("runExtension")(z,x,h,U)}),L=U.metadata,x},this.makeMarkdown=this.makeMd=function(x,U){if(x=x.replace(/\r\n/g,`
`),x=x.replace(/\r/g,`
`),x=x.replace(/>[ \t]+</,">\xA8NBSP;<"),!U)if(window&&window.document)U=window.document;else throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");var z=U.createElement("div");z.innerHTML=x;var $={preList:me(z)};ae(z);for(var ee=z.childNodes,X="",ie=0;ie<ee.length;ie++)X+=t.subParser("makeMarkdown.node")(ee[ie],$);function ae(re){for(var ye=0;ye<re.childNodes.length;++ye){var ne=re.childNodes[ye];ne.nodeType===3?!/\S/.test(ne.nodeValue)&&!/^[ ]+$/.test(ne.nodeValue)?(re.removeChild(ne),--ye):(ne.nodeValue=ne.nodeValue.split(`
`).join(" "),ne.nodeValue=ne.nodeValue.replace(/(\s)+/g,"$1")):ne.nodeType===1&&ae(ne)}}function me(re){for(var ye=re.querySelectorAll("pre"),ne=[],xe=0;xe<ye.length;++xe)if(ye[xe].childElementCount===1&&ye[xe].firstChild.tagName.toLowerCase()==="code"){var je=ye[xe].firstChild.innerHTML.trim(),He=ye[xe].firstChild.getAttribute("data-language")||"";if(He==="")for(var rt=ye[xe].firstChild.className.split(" "),kt=0;kt<rt.length;++kt){var it=rt[kt].match(/^language-(.+)$/);if(it!==null){He=it[1];break}}je=t.helper.unescapeHTMLEntities(je),ne.push(je),ye[xe].outerHTML='<precode language="'+He+'" precodenum="'+xe.toString()+'"></precode>'}else ne.push(ye[xe].innerHTML),ye[xe].innerHTML="",ye[xe].setAttribute("prenum",xe.toString());return ne}return X},this.setOption=function(x,U){h[x]=U},this.getOption=function(x){return h[x]},this.getOptions=function(){return h},this.addExtension=function(x,U){U=U||null,K(x,U)},this.useExtension=function(x){K(x)},this.setFlavor=function(x){if(!u.hasOwnProperty(x))throw Error(x+" flavor was not found");var U=u[x];I=x;for(var z in U)U.hasOwnProperty(z)&&(h[z]=U[z])},this.getFlavor=function(){return I},this.removeExtension=function(x){t.helper.isArray(x)||(x=[x]);for(var U=0;U<x.length;++U){for(var z=x[U],$=0;$<f.length;++$)f[$]===z&&f.splice($,1);for(var ee=0;ee<_.length;++ee)_[ee]===z&&_.splice(ee,1)}},this.getAllExtensions=function(){return{language:f,output:_}},this.getMetadata=function(x){return x?L.raw:L.parsed},this.getMetadataFormat=function(){return L.format},this._setMetadataPair=function(x,U){L.parsed[x]=U},this._setMetadataFormat=function(x){L.format=x},this._setMetadataRaw=function(x){L.raw=x}},t.subParser("anchors",function(o,h,f){"use strict";o=f.converter._dispatch("anchors.before",o,h,f);var _=function(C,I,L,F,K,W,q){if(t.helper.isUndefined(q)&&(q=""),L=L.toLowerCase(),C.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)F="";else if(!F)if(L||(L=I.toLowerCase().replace(/ ?\n/g," ")),F="#"+L,!t.helper.isUndefined(f.gUrls[L]))F=f.gUrls[L],t.helper.isUndefined(f.gTitles[L])||(q=f.gTitles[L]);else return C;F=F.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var G='<a href="'+F+'"';return q!==""&&q!==null&&(q=q.replace(/"/g,"&quot;"),q=q.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),G+=' title="'+q+'"'),h.openLinksInNewWindow&&!/^#/.test(F)&&(G+=' rel="noopener noreferrer" target="\xA8E95Eblank"'),G+=">"+I+"</a>",G};return o=o.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g,_),o=o.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,_),o=o.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,_),o=o.replace(/\[([^\[\]]+)]()()()()()/g,_),h.ghMentions&&(o=o.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gmi,function(C,I,L,F,K){if(L==="\\")return I+F;if(!t.helper.isString(h.ghMentionsLink))throw new Error("ghMentionsLink option must be a string");var W=h.ghMentionsLink.replace(/\{u}/g,K),q="";return h.openLinksInNewWindow&&(q=' rel="noopener noreferrer" target="\xA8E95Eblank"'),I+'<a href="'+W+'"'+q+">"+F+"</a>"})),o=f.converter._dispatch("anchors.after",o,h,f),o});var A=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,N=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,y=/()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,d=/(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gmi,g=/<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,b=function(o){"use strict";return function(h,f,_,C,I,L,F){_=_.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var K=_,W="",q="",G=f||"",x=F||"";return/^www\./i.test(_)&&(_=_.replace(/^www\./i,"http://www.")),o.excludeTrailingPunctuationFromURLs&&L&&(W=L),o.openLinksInNewWindow&&(q=' rel="noopener noreferrer" target="\xA8E95Eblank"'),G+'<a href="'+_+'"'+q+">"+K+"</a>"+W+x}},E=function(o,h){"use strict";return function(f,_,C){var I="mailto:";return _=_||"",C=t.subParser("unescapeSpecialChars")(C,o,h),o.encodeEmails?(I=t.helper.encodeEmailAddress(I+C),C=t.helper.encodeEmailAddress(C)):I=I+C,_+'<a href="'+I+'">'+C+"</a>"}};t.subParser("autoLinks",function(o,h,f){"use strict";return o=f.converter._dispatch("autoLinks.before",o,h,f),o=o.replace(y,b(h)),o=o.replace(g,E(h,f)),o=f.converter._dispatch("autoLinks.after",o,h,f),o}),t.subParser("simplifiedAutoLinks",function(o,h,f){"use strict";return h.simplifiedAutoLink&&(o=f.converter._dispatch("simplifiedAutoLinks.before",o,h,f),h.excludeTrailingPunctuationFromURLs?o=o.replace(N,b(h)):o=o.replace(A,b(h)),o=o.replace(d,E(h,f)),o=f.converter._dispatch("simplifiedAutoLinks.after",o,h,f)),o}),t.subParser("blockGamut",function(o,h,f){"use strict";return o=f.converter._dispatch("blockGamut.before",o,h,f),o=t.subParser("blockQuotes")(o,h,f),o=t.subParser("headers")(o,h,f),o=t.subParser("horizontalRule")(o,h,f),o=t.subParser("lists")(o,h,f),o=t.subParser("codeBlocks")(o,h,f),o=t.subParser("tables")(o,h,f),o=t.subParser("hashHTMLBlocks")(o,h,f),o=t.subParser("paragraphs")(o,h,f),o=f.converter._dispatch("blockGamut.after",o,h,f),o}),t.subParser("blockQuotes",function(o,h,f){"use strict";o=f.converter._dispatch("blockQuotes.before",o,h,f),o=o+`

`;var _=/(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;return h.splitAdjacentBlockquotes&&(_=/^ {0,3}>[\s\S]*?(?:\n\n)/gm),o=o.replace(_,function(C){return C=C.replace(/^[ \t]*>[ \t]?/gm,""),C=C.replace(/¨0/g,""),C=C.replace(/^[ \t]+$/gm,""),C=t.subParser("githubCodeBlocks")(C,h,f),C=t.subParser("blockGamut")(C,h,f),C=C.replace(/(^|\n)/g,"$1  "),C=C.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm,function(I,L){var F=L;return F=F.replace(/^  /mg,"\xA80"),F=F.replace(/¨0/g,""),F}),t.subParser("hashBlock")(`<blockquote>
`+C+`
</blockquote>`,h,f)}),o=f.converter._dispatch("blockQuotes.after",o,h,f),o}),t.subParser("codeBlocks",function(o,h,f){"use strict";o=f.converter._dispatch("codeBlocks.before",o,h,f),o+="\xA80";var _=/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g;return o=o.replace(_,function(C,I,L){var F=I,K=L,W=`
`;return F=t.subParser("outdent")(F,h,f),F=t.subParser("encodeCode")(F,h,f),F=t.subParser("detab")(F,h,f),F=F.replace(/^\n+/g,""),F=F.replace(/\n+$/g,""),h.omitExtraWLInCodeBlocks&&(W=""),F="<pre><code>"+F+W+"</code></pre>",t.subParser("hashBlock")(F,h,f)+K}),o=o.replace(/¨0/,""),o=f.converter._dispatch("codeBlocks.after",o,h,f),o}),t.subParser("codeSpans",function(o,h,f){"use strict";return o=f.converter._dispatch("codeSpans.before",o,h,f),typeof o>"u"&&(o=""),o=o.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,function(_,C,I,L){var F=L;return F=F.replace(/^([ \t]*)/g,""),F=F.replace(/[ \t]*$/g,""),F=t.subParser("encodeCode")(F,h,f),F=C+"<code>"+F+"</code>",F=t.subParser("hashHTMLSpans")(F,h,f),F}),o=f.converter._dispatch("codeSpans.after",o,h,f),o}),t.subParser("completeHTMLDocument",function(o,h,f){"use strict";if(!h.completeHTMLDocument)return o;o=f.converter._dispatch("completeHTMLDocument.before",o,h,f);var _="html",C=`<!DOCTYPE HTML>
`,I="",L=`<meta charset="utf-8">
`,F="",K="";typeof f.metadata.parsed.doctype<"u"&&(C="<!DOCTYPE "+f.metadata.parsed.doctype+`>
`,_=f.metadata.parsed.doctype.toString().toLowerCase(),(_==="html"||_==="html5")&&(L='<meta charset="utf-8">'));for(var W in f.metadata.parsed)if(f.metadata.parsed.hasOwnProperty(W))switch(W.toLowerCase()){case"doctype":break;case"title":I="<title>"+f.metadata.parsed.title+`</title>
`;break;case"charset":_==="html"||_==="html5"?L='<meta charset="'+f.metadata.parsed.charset+`">
`:L='<meta name="charset" content="'+f.metadata.parsed.charset+`">
`;break;case"language":case"lang":F=' lang="'+f.metadata.parsed[W]+'"',K+='<meta name="'+W+'" content="'+f.metadata.parsed[W]+`">
`;break;default:K+='<meta name="'+W+'" content="'+f.metadata.parsed[W]+`">
`}return o=C+"<html"+F+`>
<head>
`+I+L+K+`</head>
<body>
`+o.trim()+`
</body>
</html>`,o=f.converter._dispatch("completeHTMLDocument.after",o,h,f),o}),t.subParser("detab",function(o,h,f){"use strict";return o=f.converter._dispatch("detab.before",o,h,f),o=o.replace(/\t(?=\t)/g,"    "),o=o.replace(/\t/g,"\xA8A\xA8B"),o=o.replace(/¨B(.+?)¨A/g,function(_,C){for(var I=C,L=4-I.length%4,F=0;F<L;F++)I+=" ";return I}),o=o.replace(/¨A/g,"    "),o=o.replace(/¨B/g,""),o=f.converter._dispatch("detab.after",o,h,f),o}),t.subParser("ellipsis",function(o,h,f){"use strict";return h.ellipsis&&(o=f.converter._dispatch("ellipsis.before",o,h,f),o=o.replace(/\.\.\./g,"\u2026"),o=f.converter._dispatch("ellipsis.after",o,h,f)),o}),t.subParser("emoji",function(o,h,f){"use strict";if(!h.emoji)return o;o=f.converter._dispatch("emoji.before",o,h,f);var _=/:([\S]+?):/g;return o=o.replace(_,function(C,I){return t.helper.emojis.hasOwnProperty(I)?t.helper.emojis[I]:C}),o=f.converter._dispatch("emoji.after",o,h,f),o}),t.subParser("encodeAmpsAndAngles",function(o,h,f){"use strict";return o=f.converter._dispatch("encodeAmpsAndAngles.before",o,h,f),o=o.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,"&amp;"),o=o.replace(/<(?![a-z\/?$!])/gi,"&lt;"),o=o.replace(/</g,"&lt;"),o=o.replace(/>/g,"&gt;"),o=f.converter._dispatch("encodeAmpsAndAngles.after",o,h,f),o}),t.subParser("encodeBackslashEscapes",function(o,h,f){"use strict";return o=f.converter._dispatch("encodeBackslashEscapes.before",o,h,f),o=o.replace(/\\(\\)/g,t.helper.escapeCharactersCallback),o=o.replace(/\\([`*_{}\[\]()>#+.!~=|:-])/g,t.helper.escapeCharactersCallback),o=f.converter._dispatch("encodeBackslashEscapes.after",o,h,f),o}),t.subParser("encodeCode",function(o,h,f){"use strict";return o=f.converter._dispatch("encodeCode.before",o,h,f),o=o.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/([*_{}\[\]\\=~-])/g,t.helper.escapeCharactersCallback),o=f.converter._dispatch("encodeCode.after",o,h,f),o}),t.subParser("escapeSpecialCharsWithinTagAttributes",function(o,h,f){"use strict";o=f.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before",o,h,f);var _=/<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,C=/<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;return o=o.replace(_,function(I){return I.replace(/(.)<\/?code>(?=.)/g,"$1`").replace(/([\\`*_~=|])/g,t.helper.escapeCharactersCallback)}),o=o.replace(C,function(I){return I.replace(/([\\`*_~=|])/g,t.helper.escapeCharactersCallback)}),o=f.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after",o,h,f),o}),t.subParser("githubCodeBlocks",function(o,h,f){"use strict";return h.ghCodeBlocks?(o=f.converter._dispatch("githubCodeBlocks.before",o,h,f),o+="\xA80",o=o.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g,function(_,C,I,L){var F=h.omitExtraWLInCodeBlocks?"":`
`;return L=t.subParser("encodeCode")(L,h,f),L=t.subParser("detab")(L,h,f),L=L.replace(/^\n+/g,""),L=L.replace(/\n+$/g,""),L="<pre><code"+(I?' class="'+I+" language-"+I+'"':"")+">"+L+F+"</code></pre>",L=t.subParser("hashBlock")(L,h,f),`

\xA8G`+(f.ghCodeBlocks.push({text:_,codeblock:L})-1)+`G

`}),o=o.replace(/¨0/,""),f.converter._dispatch("githubCodeBlocks.after",o,h,f)):o}),t.subParser("hashBlock",function(o,h,f){"use strict";return o=f.converter._dispatch("hashBlock.before",o,h,f),o=o.replace(/(^\n+|\n+$)/g,""),o=`

\xA8K`+(f.gHtmlBlocks.push(o)-1)+`K

`,o=f.converter._dispatch("hashBlock.after",o,h,f),o}),t.subParser("hashCodeTags",function(o,h,f){"use strict";o=f.converter._dispatch("hashCodeTags.before",o,h,f);var _=function(C,I,L,F){var K=L+t.subParser("encodeCode")(I,h,f)+F;return"\xA8C"+(f.gHtmlSpans.push(K)-1)+"C"};return o=t.helper.replaceRecursiveRegExp(o,_,"<code\\b[^>]*>","</code>","gim"),o=f.converter._dispatch("hashCodeTags.after",o,h,f),o}),t.subParser("hashElement",function(o,h,f){"use strict";return function(_,C){var I=C;return I=I.replace(/\n\n/g,`
`),I=I.replace(/^\n/,""),I=I.replace(/\n+$/g,""),I=`

\xA8K`+(f.gHtmlBlocks.push(I)-1)+`K

`,I}}),t.subParser("hashHTMLBlocks",function(o,h,f){"use strict";o=f.converter._dispatch("hashHTMLBlocks.before",o,h,f);var _=["pre","div","h1","h2","h3","h4","h5","h6","blockquote","table","dl","ol","ul","script","noscript","form","fieldset","iframe","math","style","section","header","footer","nav","article","aside","address","audio","canvas","figure","hgroup","output","video","p"],C=function(x,U,z,$){var ee=x;return z.search(/\bmarkdown\b/)!==-1&&(ee=z+f.converter.makeHtml(U)+$),`

\xA8K`+(f.gHtmlBlocks.push(ee)-1)+`K

`};h.backslashEscapesHTMLTags&&(o=o.replace(/\\<(\/?[^>]+?)>/g,function(x,U){return"&lt;"+U+"&gt;"}));for(var I=0;I<_.length;++I)for(var L,F=new RegExp("^ {0,3}(<"+_[I]+"\\b[^>]*>)","im"),K="<"+_[I]+"\\b[^>]*>",W="</"+_[I]+">";(L=t.helper.regexIndexOf(o,F))!==-1;){var q=t.helper.splitAtIndex(o,L),G=t.helper.replaceRecursiveRegExp(q[1],C,K,W,"im");if(G===q[1])break;o=q[0].concat(G)}return o=o.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,t.subParser("hashElement")(o,h,f)),o=t.helper.replaceRecursiveRegExp(o,function(x){return`

\xA8K`+(f.gHtmlBlocks.push(x)-1)+`K

`},"^ {0,3}<!--","-->","gm"),o=o.replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,t.subParser("hashElement")(o,h,f)),o=f.converter._dispatch("hashHTMLBlocks.after",o,h,f),o}),t.subParser("hashHTMLSpans",function(o,h,f){"use strict";o=f.converter._dispatch("hashHTMLSpans.before",o,h,f);function _(C){return"\xA8C"+(f.gHtmlSpans.push(C)-1)+"C"}return o=o.replace(/<[^>]+?\/>/gi,function(C){return _(C)}),o=o.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g,function(C){return _(C)}),o=o.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g,function(C){return _(C)}),o=o.replace(/<[^>]+?>/gi,function(C){return _(C)}),o=f.converter._dispatch("hashHTMLSpans.after",o,h,f),o}),t.subParser("unhashHTMLSpans",function(o,h,f){"use strict";o=f.converter._dispatch("unhashHTMLSpans.before",o,h,f);for(var _=0;_<f.gHtmlSpans.length;++_){for(var C=f.gHtmlSpans[_],I=0;/¨C(\d+)C/.test(C);){var L=RegExp.$1;if(C=C.replace("\xA8C"+L+"C",f.gHtmlSpans[L]),I===10){console.error("maximum nesting of 10 spans reached!!!");break}++I}o=o.replace("\xA8C"+_+"C",C)}return o=f.converter._dispatch("unhashHTMLSpans.after",o,h,f),o}),t.subParser("hashPreCodeTags",function(o,h,f){"use strict";o=f.converter._dispatch("hashPreCodeTags.before",o,h,f);var _=function(C,I,L,F){var K=L+t.subParser("encodeCode")(I,h,f)+F;return`

\xA8G`+(f.ghCodeBlocks.push({text:C,codeblock:K})-1)+`G

`};return o=t.helper.replaceRecursiveRegExp(o,_,"^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>","^ {0,3}</code>\\s*</pre>","gim"),o=f.converter._dispatch("hashPreCodeTags.after",o,h,f),o}),t.subParser("headers",function(o,h,f){"use strict";o=f.converter._dispatch("headers.before",o,h,f);var _=isNaN(parseInt(h.headerLevelStart))?1:parseInt(h.headerLevelStart),C=h.smoothLivePreview?/^(.+)[ \t]*\n={2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n=+[ \t]*\n+/gm,I=h.smoothLivePreview?/^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n-+[ \t]*\n+/gm;o=o.replace(C,function(K,W){var q=t.subParser("spanGamut")(W,h,f),G=h.noHeaderId?"":' id="'+F(W)+'"',x=_,U="<h"+x+G+">"+q+"</h"+x+">";return t.subParser("hashBlock")(U,h,f)}),o=o.replace(I,function(K,W){var q=t.subParser("spanGamut")(W,h,f),G=h.noHeaderId?"":' id="'+F(W)+'"',x=_+1,U="<h"+x+G+">"+q+"</h"+x+">";return t.subParser("hashBlock")(U,h,f)});var L=h.requireSpaceBeforeHeadingText?/^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm:/^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;o=o.replace(L,function(K,W,q){var G=q;h.customizedHeaderId&&(G=q.replace(/\s?\{([^{]+?)}\s*$/,""));var x=t.subParser("spanGamut")(G,h,f),U=h.noHeaderId?"":' id="'+F(q)+'"',z=_-1+W.length,$="<h"+z+U+">"+x+"</h"+z+">";return t.subParser("hashBlock")($,h,f)});function F(K){var W,q;if(h.customizedHeaderId){var G=K.match(/\{([^{]+?)}\s*$/);G&&G[1]&&(K=G[1])}return W=K,t.helper.isString(h.prefixHeaderId)?q=h.prefixHeaderId:h.prefixHeaderId===!0?q="section-":q="",h.rawPrefixHeaderId||(W=q+W),h.ghCompatibleHeaderId?W=W.replace(/ /g,"-").replace(/&amp;/g,"").replace(/¨T/g,"").replace(/¨D/g,"").replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g,"").toLowerCase():h.rawHeaderId?W=W.replace(/ /g,"-").replace(/&amp;/g,"&").replace(/¨T/g,"\xA8").replace(/¨D/g,"$").replace(/["']/g,"-").toLowerCase():W=W.replace(/[^\w]/g,"").toLowerCase(),h.rawPrefixHeaderId&&(W=q+W),f.hashLinkCounts[W]?W=W+"-"+f.hashLinkCounts[W]++:f.hashLinkCounts[W]=1,W}return o=f.converter._dispatch("headers.after",o,h,f),o}),t.subParser("horizontalRule",function(o,h,f){"use strict";o=f.converter._dispatch("horizontalRule.before",o,h,f);var _=t.subParser("hashBlock")("<hr />",h,f);return o=o.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm,_),o=o.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm,_),o=o.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm,_),o=f.converter._dispatch("horizontalRule.after",o,h,f),o}),t.subParser("images",function(o,h,f){"use strict";o=f.converter._dispatch("images.before",o,h,f);var _=/!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,C=/!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,I=/!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,L=/!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,F=/!\[([^\[\]]+)]()()()()()/g;function K(q,G,x,U,z,$,ee,X){return U=U.replace(/\s/g,""),W(q,G,x,U,z,$,ee,X)}function W(q,G,x,U,z,$,ee,X){var ie=f.gUrls,ae=f.gTitles,me=f.gDimensions;if(x=x.toLowerCase(),X||(X=""),q.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)U="";else if(U===""||U===null)if((x===""||x===null)&&(x=G.toLowerCase().replace(/ ?\n/g," ")),U="#"+x,!t.helper.isUndefined(ie[x]))U=ie[x],t.helper.isUndefined(ae[x])||(X=ae[x]),t.helper.isUndefined(me[x])||(z=me[x].width,$=me[x].height);else return q;G=G.replace(/"/g,"&quot;").replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),U=U.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var re='<img src="'+U+'" alt="'+G+'"';return X&&t.helper.isString(X)&&(X=X.replace(/"/g,"&quot;").replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),re+=' title="'+X+'"'),z&&$&&(z=z==="*"?"auto":z,$=$==="*"?"auto":$,re+=' width="'+z+'"',re+=' height="'+$+'"'),re+=" />",re}return o=o.replace(L,W),o=o.replace(I,K),o=o.replace(C,W),o=o.replace(_,W),o=o.replace(F,W),o=f.converter._dispatch("images.after",o,h,f),o}),t.subParser("italicsAndBold",function(o,h,f){"use strict";o=f.converter._dispatch("italicsAndBold.before",o,h,f);function _(C,I,L){return I+C+L}return h.literalMidWordUnderscores?(o=o.replace(/\b___(\S[\s\S]*?)___\b/g,function(C,I){return _(I,"<strong><em>","</em></strong>")}),o=o.replace(/\b__(\S[\s\S]*?)__\b/g,function(C,I){return _(I,"<strong>","</strong>")}),o=o.replace(/\b_(\S[\s\S]*?)_\b/g,function(C,I){return _(I,"<em>","</em>")})):(o=o.replace(/___(\S[\s\S]*?)___/g,function(C,I){return/\S$/.test(I)?_(I,"<strong><em>","</em></strong>"):C}),o=o.replace(/__(\S[\s\S]*?)__/g,function(C,I){return/\S$/.test(I)?_(I,"<strong>","</strong>"):C}),o=o.replace(/_([^\s_][\s\S]*?)_/g,function(C,I){return/\S$/.test(I)?_(I,"<em>","</em>"):C})),h.literalMidWordAsterisks?(o=o.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g,function(C,I,L){return _(L,I+"<strong><em>","</em></strong>")}),o=o.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g,function(C,I,L){return _(L,I+"<strong>","</strong>")}),o=o.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g,function(C,I,L){return _(L,I+"<em>","</em>")})):(o=o.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g,function(C,I){return/\S$/.test(I)?_(I,"<strong><em>","</em></strong>"):C}),o=o.replace(/\*\*(\S[\s\S]*?)\*\*/g,function(C,I){return/\S$/.test(I)?_(I,"<strong>","</strong>"):C}),o=o.replace(/\*([^\s*][\s\S]*?)\*/g,function(C,I){return/\S$/.test(I)?_(I,"<em>","</em>"):C})),o=f.converter._dispatch("italicsAndBold.after",o,h,f),o}),t.subParser("lists",function(o,h,f){"use strict";function _(L,F){f.gListLevel++,L=L.replace(/\n{2,}$/,`
`),L+="\xA80";var K=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,W=/\n[ \t]*\n(?!¨0)/.test(L);return h.disableForced4SpacesIndentedSublists&&(K=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm),L=L.replace(K,function(q,G,x,U,z,$,ee){ee=ee&&ee.trim()!=="";var X=t.subParser("outdent")(z,h,f),ie="";return $&&h.tasklists&&(ie=' class="task-list-item" style="list-style-type: none;"',X=X.replace(/^[ \t]*\[(x|X| )?]/m,function(){var ae='<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';return ee&&(ae+=" checked"),ae+=">",ae})),X=X.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g,function(ae){return"\xA8A"+ae}),G||X.search(/\n{2,}/)>-1?(X=t.subParser("githubCodeBlocks")(X,h,f),X=t.subParser("blockGamut")(X,h,f)):(X=t.subParser("lists")(X,h,f),X=X.replace(/\n$/,""),X=t.subParser("hashHTMLBlocks")(X,h,f),X=X.replace(/\n\n+/g,`

`),W?X=t.subParser("paragraphs")(X,h,f):X=t.subParser("spanGamut")(X,h,f)),X=X.replace("\xA8A",""),X="<li"+ie+">"+X+`</li>
`,X}),L=L.replace(/¨0/g,""),f.gListLevel--,F&&(L=L.replace(/\s+$/,"")),L}function C(L,F){if(F==="ol"){var K=L.match(/^ *(\d+)\./);if(K&&K[1]!=="1")return' start="'+K[1]+'"'}return""}function I(L,F,K){var W=h.disableForced4SpacesIndentedSublists?/^ ?\d+\.[ \t]/gm:/^ {0,3}\d+\.[ \t]/gm,q=h.disableForced4SpacesIndentedSublists?/^ ?[*+-][ \t]/gm:/^ {0,3}[*+-][ \t]/gm,G=F==="ul"?W:q,x="";if(L.search(G)!==-1)(function z($){var ee=$.search(G),X=C(L,F);ee!==-1?(x+=`

<`+F+X+`>
`+_($.slice(0,ee),!!K)+"</"+F+`>
`,F=F==="ul"?"ol":"ul",G=F==="ul"?W:q,z($.slice(ee))):x+=`

<`+F+X+`>
`+_($,!!K)+"</"+F+`>
`})(L);else{var U=C(L,F);x=`

<`+F+U+`>
`+_(L,!!K)+"</"+F+`>
`}return x}return o=f.converter._dispatch("lists.before",o,h,f),o+="\xA80",f.gListLevel?o=o.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(L,F,K){var W=K.search(/[*+-]/g)>-1?"ul":"ol";return I(F,W,!0)}):o=o.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(L,F,K,W){var q=W.search(/[*+-]/g)>-1?"ul":"ol";return I(K,q,!1)}),o=o.replace(/¨0/,""),o=f.converter._dispatch("lists.after",o,h,f),o}),t.subParser("metadata",function(o,h,f){"use strict";if(!h.metadata)return o;o=f.converter._dispatch("metadata.before",o,h,f);function _(C){f.metadata.raw=C,C=C.replace(/&/g,"&amp;").replace(/"/g,"&quot;"),C=C.replace(/\n {4}/g," "),C.replace(/^([\S ]+): +([\s\S]+?)$/gm,function(I,L,F){return f.metadata.parsed[L]=F,""})}return o=o.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/,function(C,I,L){return _(L),"\xA8M"}),o=o.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/,function(C,I,L){return I&&(f.metadata.format=I),_(L),"\xA8M"}),o=o.replace(/¨M/g,""),o=f.converter._dispatch("metadata.after",o,h,f),o}),t.subParser("outdent",function(o,h,f){"use strict";return o=f.converter._dispatch("outdent.before",o,h,f),o=o.replace(/^(\t|[ ]{1,4})/gm,"\xA80"),o=o.replace(/¨0/g,""),o=f.converter._dispatch("outdent.after",o,h,f),o}),t.subParser("paragraphs",function(o,h,f){"use strict";o=f.converter._dispatch("paragraphs.before",o,h,f),o=o.replace(/^\n+/g,""),o=o.replace(/\n+$/g,"");for(var _=o.split(/\n{2,}/g),C=[],I=_.length,L=0;L<I;L++){var F=_[L];F.search(/¨(K|G)(\d+)\1/g)>=0?C.push(F):F.search(/\S/)>=0&&(F=t.subParser("spanGamut")(F,h,f),F=F.replace(/^([ \t]*)/g,"<p>"),F+="</p>",C.push(F))}for(I=C.length,L=0;L<I;L++){for(var K="",W=C[L],q=!1;/¨(K|G)(\d+)\1/.test(W);){var G=RegExp.$1,x=RegExp.$2;G==="K"?K=f.gHtmlBlocks[x]:q?K=t.subParser("encodeCode")(f.ghCodeBlocks[x].text,h,f):K=f.ghCodeBlocks[x].codeblock,K=K.replace(/\$/g,"$$$$"),W=W.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/,K),/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(W)&&(q=!0)}C[L]=W}return o=C.join(`
`),o=o.replace(/^\n+/g,""),o=o.replace(/\n+$/g,""),f.converter._dispatch("paragraphs.after",o,h,f)}),t.subParser("runExtension",function(o,h,f,_){"use strict";if(o.filter)h=o.filter(h,_.converter,f);else if(o.regex){var C=o.regex;C instanceof RegExp||(C=new RegExp(C,"g")),h=h.replace(C,o.replace)}return h}),t.subParser("spanGamut",function(o,h,f){"use strict";return o=f.converter._dispatch("spanGamut.before",o,h,f),o=t.subParser("codeSpans")(o,h,f),o=t.subParser("escapeSpecialCharsWithinTagAttributes")(o,h,f),o=t.subParser("encodeBackslashEscapes")(o,h,f),o=t.subParser("images")(o,h,f),o=t.subParser("anchors")(o,h,f),o=t.subParser("autoLinks")(o,h,f),o=t.subParser("simplifiedAutoLinks")(o,h,f),o=t.subParser("emoji")(o,h,f),o=t.subParser("underline")(o,h,f),o=t.subParser("italicsAndBold")(o,h,f),o=t.subParser("strikethrough")(o,h,f),o=t.subParser("ellipsis")(o,h,f),o=t.subParser("hashHTMLSpans")(o,h,f),o=t.subParser("encodeAmpsAndAngles")(o,h,f),h.simpleLineBreaks?/\n\n¨K/.test(o)||(o=o.replace(/\n+/g,`<br />
`)):o=o.replace(/  +\n/g,`<br />
`),o=f.converter._dispatch("spanGamut.after",o,h,f),o}),t.subParser("strikethrough",function(o,h,f){"use strict";function _(C){return h.simplifiedAutoLink&&(C=t.subParser("simplifiedAutoLinks")(C,h,f)),"<del>"+C+"</del>"}return h.strikethrough&&(o=f.converter._dispatch("strikethrough.before",o,h,f),o=o.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g,function(C,I){return _(I)}),o=f.converter._dispatch("strikethrough.after",o,h,f)),o}),t.subParser("stripLinkDefinitions",function(o,h,f){"use strict";var _=/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,C=/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm;o+="\xA80";var I=function(L,F,K,W,q,G,x){return F=F.toLowerCase(),o.toLowerCase().split(F).length-1<2?L:(K.match(/^data:.+?\/.+?;base64,/)?f.gUrls[F]=K.replace(/\s/g,""):f.gUrls[F]=t.subParser("encodeAmpsAndAngles")(K,h,f),G?G+x:(x&&(f.gTitles[F]=x.replace(/"|'/g,"&quot;")),h.parseImgDimensions&&W&&q&&(f.gDimensions[F]={width:W,height:q}),""))};return o=o.replace(C,I),o=o.replace(_,I),o=o.replace(/¨0/,""),o}),t.subParser("tables",function(o,h,f){"use strict";if(!h.tables)return o;var _=/^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,C=/^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm;function I(q){return/^:[ \t]*--*$/.test(q)?' style="text-align:left;"':/^--*[ \t]*:[ \t]*$/.test(q)?' style="text-align:right;"':/^:[ \t]*--*[ \t]*:$/.test(q)?' style="text-align:center;"':""}function L(q,G){var x="";return q=q.trim(),(h.tablesHeaderId||h.tableHeaderId)&&(x=' id="'+q.replace(/ /g,"_").toLowerCase()+'"'),q=t.subParser("spanGamut")(q,h,f),"<th"+x+G+">"+q+`</th>
`}function F(q,G){var x=t.subParser("spanGamut")(q,h,f);return"<td"+G+">"+x+`</td>
`}function K(q,G){for(var x=`<table>
<thead>
<tr>
`,U=q.length,z=0;z<U;++z)x+=q[z];for(x+=`</tr>
</thead>
<tbody>
`,z=0;z<G.length;++z){x+=`<tr>
`;for(var $=0;$<U;++$)x+=G[z][$];x+=`</tr>
`}return x+=`</tbody>
</table>
`,x}function W(q){var G,x=q.split(`
`);for(G=0;G<x.length;++G)/^ {0,3}\|/.test(x[G])&&(x[G]=x[G].replace(/^ {0,3}\|/,"")),/\|[ \t]*$/.test(x[G])&&(x[G]=x[G].replace(/\|[ \t]*$/,"")),x[G]=t.subParser("codeSpans")(x[G],h,f);var U=x[0].split("|").map(function(re){return re.trim()}),z=x[1].split("|").map(function(re){return re.trim()}),$=[],ee=[],X=[],ie=[];for(x.shift(),x.shift(),G=0;G<x.length;++G)x[G].trim()!==""&&$.push(x[G].split("|").map(function(re){return re.trim()}));if(U.length<z.length)return q;for(G=0;G<z.length;++G)X.push(I(z[G]));for(G=0;G<U.length;++G)t.helper.isUndefined(X[G])&&(X[G]=""),ee.push(L(U[G],X[G]));for(G=0;G<$.length;++G){for(var ae=[],me=0;me<ee.length;++me)t.helper.isUndefined($[G][me]),ae.push(F($[G][me],X[me]));ie.push(ae)}return K(ee,ie)}return o=f.converter._dispatch("tables.before",o,h,f),o=o.replace(/\\(\|)/g,t.helper.escapeCharactersCallback),o=o.replace(_,W),o=o.replace(C,W),o=f.converter._dispatch("tables.after",o,h,f),o}),t.subParser("underline",function(o,h,f){"use strict";return h.underline&&(o=f.converter._dispatch("underline.before",o,h,f),h.literalMidWordUnderscores?(o=o.replace(/\b___(\S[\s\S]*?)___\b/g,function(_,C){return"<u>"+C+"</u>"}),o=o.replace(/\b__(\S[\s\S]*?)__\b/g,function(_,C){return"<u>"+C+"</u>"})):(o=o.replace(/___(\S[\s\S]*?)___/g,function(_,C){return/\S$/.test(C)?"<u>"+C+"</u>":_}),o=o.replace(/__(\S[\s\S]*?)__/g,function(_,C){return/\S$/.test(C)?"<u>"+C+"</u>":_})),o=o.replace(/(_)/g,t.helper.escapeCharactersCallback),o=f.converter._dispatch("underline.after",o,h,f)),o}),t.subParser("unescapeSpecialChars",function(o,h,f){"use strict";return o=f.converter._dispatch("unescapeSpecialChars.before",o,h,f),o=o.replace(/¨E(\d+)E/g,function(_,C){var I=parseInt(C);return String.fromCharCode(I)}),o=f.converter._dispatch("unescapeSpecialChars.after",o,h,f),o}),t.subParser("makeMarkdown.blockquote",function(o,h){"use strict";var f="";if(o.hasChildNodes())for(var _=o.childNodes,C=_.length,I=0;I<C;++I){var L=t.subParser("makeMarkdown.node")(_[I],h);L!==""&&(f+=L)}return f=f.trim(),f="> "+f.split(`
`).join(`
> `),f}),t.subParser("makeMarkdown.codeBlock",function(o,h){"use strict";var f=o.getAttribute("language"),_=o.getAttribute("precodenum");return"```"+f+`
`+h.preList[_]+"\n```"}),t.subParser("makeMarkdown.codeSpan",function(o){"use strict";return"`"+o.innerHTML+"`"}),t.subParser("makeMarkdown.emphasis",function(o,h){"use strict";var f="";if(o.hasChildNodes()){f+="*";for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);f+="*"}return f}),t.subParser("makeMarkdown.header",function(o,h,f){"use strict";var _=new Array(f+1).join("#"),C="";if(o.hasChildNodes()){C=_+" ";for(var I=o.childNodes,L=I.length,F=0;F<L;++F)C+=t.subParser("makeMarkdown.node")(I[F],h)}return C}),t.subParser("makeMarkdown.hr",function(){"use strict";return"---"}),t.subParser("makeMarkdown.image",function(o){"use strict";var h="";return o.hasAttribute("src")&&(h+="!["+o.getAttribute("alt")+"](",h+="<"+o.getAttribute("src")+">",o.hasAttribute("width")&&o.hasAttribute("height")&&(h+=" ="+o.getAttribute("width")+"x"+o.getAttribute("height")),o.hasAttribute("title")&&(h+=' "'+o.getAttribute("title")+'"'),h+=")"),h}),t.subParser("makeMarkdown.links",function(o,h){"use strict";var f="";if(o.hasChildNodes()&&o.hasAttribute("href")){var _=o.childNodes,C=_.length;f="[";for(var I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);f+="](",f+="<"+o.getAttribute("href")+">",o.hasAttribute("title")&&(f+=' "'+o.getAttribute("title")+'"'),f+=")"}return f}),t.subParser("makeMarkdown.list",function(o,h,f){"use strict";var _="";if(!o.hasChildNodes())return"";for(var C=o.childNodes,I=C.length,L=o.getAttribute("start")||1,F=0;F<I;++F)if(!(typeof C[F].tagName>"u"||C[F].tagName.toLowerCase()!=="li")){var K="";f==="ol"?K=L.toString()+". ":K="- ",_+=K+t.subParser("makeMarkdown.listItem")(C[F],h),++L}return _+=`
<!-- -->
`,_.trim()}),t.subParser("makeMarkdown.listItem",function(o,h){"use strict";for(var f="",_=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);return/\n$/.test(f)?f=f.split(`
`).join(`
    `).replace(/^ {4}$/gm,"").replace(/\n\n+/g,`

`):f+=`
`,f}),t.subParser("makeMarkdown.node",function(o,h,f){"use strict";f=f||!1;var _="";if(o.nodeType===3)return t.subParser("makeMarkdown.txt")(o,h);if(o.nodeType===8)return"<!--"+o.data+`-->

`;if(o.nodeType!==1)return"";var C=o.tagName.toLowerCase();switch(C){case"h1":f||(_=t.subParser("makeMarkdown.header")(o,h,1)+`

`);break;case"h2":f||(_=t.subParser("makeMarkdown.header")(o,h,2)+`

`);break;case"h3":f||(_=t.subParser("makeMarkdown.header")(o,h,3)+`

`);break;case"h4":f||(_=t.subParser("makeMarkdown.header")(o,h,4)+`

`);break;case"h5":f||(_=t.subParser("makeMarkdown.header")(o,h,5)+`

`);break;case"h6":f||(_=t.subParser("makeMarkdown.header")(o,h,6)+`

`);break;case"p":f||(_=t.subParser("makeMarkdown.paragraph")(o,h)+`

`);break;case"blockquote":f||(_=t.subParser("makeMarkdown.blockquote")(o,h)+`

`);break;case"hr":f||(_=t.subParser("makeMarkdown.hr")(o,h)+`

`);break;case"ol":f||(_=t.subParser("makeMarkdown.list")(o,h,"ol")+`

`);break;case"ul":f||(_=t.subParser("makeMarkdown.list")(o,h,"ul")+`

`);break;case"precode":f||(_=t.subParser("makeMarkdown.codeBlock")(o,h)+`

`);break;case"pre":f||(_=t.subParser("makeMarkdown.pre")(o,h)+`

`);break;case"table":f||(_=t.subParser("makeMarkdown.table")(o,h)+`

`);break;case"code":_=t.subParser("makeMarkdown.codeSpan")(o,h);break;case"em":case"i":_=t.subParser("makeMarkdown.emphasis")(o,h);break;case"strong":case"b":_=t.subParser("makeMarkdown.strong")(o,h);break;case"del":_=t.subParser("makeMarkdown.strikethrough")(o,h);break;case"a":_=t.subParser("makeMarkdown.links")(o,h);break;case"img":_=t.subParser("makeMarkdown.image")(o,h);break;default:_=o.outerHTML+`

`}return _}),t.subParser("makeMarkdown.paragraph",function(o,h){"use strict";var f="";if(o.hasChildNodes())for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);return f=f.trim(),f}),t.subParser("makeMarkdown.pre",function(o,h){"use strict";var f=o.getAttribute("prenum");return"<pre>"+h.preList[f]+"</pre>"}),t.subParser("makeMarkdown.strikethrough",function(o,h){"use strict";var f="";if(o.hasChildNodes()){f+="~~";for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);f+="~~"}return f}),t.subParser("makeMarkdown.strong",function(o,h){"use strict";var f="";if(o.hasChildNodes()){f+="**";for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);f+="**"}return f}),t.subParser("makeMarkdown.table",function(o,h){"use strict";var f="",_=[[],[]],C=o.querySelectorAll("thead>tr>th"),I=o.querySelectorAll("tbody>tr"),L,F;for(L=0;L<C.length;++L){var K=t.subParser("makeMarkdown.tableCell")(C[L],h),W="---";if(C[L].hasAttribute("style")){var q=C[L].getAttribute("style").toLowerCase().replace(/\s/g,"");switch(q){case"text-align:left;":W=":---";break;case"text-align:right;":W="---:";break;case"text-align:center;":W=":---:";break}}_[0][L]=K.trim(),_[1][L]=W}for(L=0;L<I.length;++L){var G=_.push([])-1,x=I[L].getElementsByTagName("td");for(F=0;F<C.length;++F){var U=" ";typeof x[F]<"u"&&(U=t.subParser("makeMarkdown.tableCell")(x[F],h)),_[G].push(U)}}var z=3;for(L=0;L<_.length;++L)for(F=0;F<_[L].length;++F){var $=_[L][F].length;$>z&&(z=$)}for(L=0;L<_.length;++L){for(F=0;F<_[L].length;++F)L===1?_[L][F].slice(-1)===":"?_[L][F]=t.helper.padEnd(_[L][F].slice(-1),z-1,"-")+":":_[L][F]=t.helper.padEnd(_[L][F],z,"-"):_[L][F]=t.helper.padEnd(_[L][F],z);f+="| "+_[L].join(" | ")+` |
`}return f.trim()}),t.subParser("makeMarkdown.tableCell",function(o,h){"use strict";var f="";if(!o.hasChildNodes())return"";for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h,!0);return f.trim()}),t.subParser("makeMarkdown.txt",function(o){"use strict";var h=o.nodeValue;return h=h.replace(/ +/g," "),h=h.replace(/¨NBSP;/g," "),h=t.helper.unescapeHTMLEntities(h),h=h.replace(/([*_~|`])/g,"\\$1"),h=h.replace(/^(\s*)>/g,"\\$1>"),h=h.replace(/^#/gm,"\\#"),h=h.replace(/^(\s*)([-=]{3,})(\s*)$/,"$1\\$2$3"),h=h.replace(/^( {0,3}\d+)\./gm,"$1\\."),h=h.replace(/^( {0,3})([+-])/gm,"$1\\$2"),h=h.replace(/]([\s]*)\(/g,"\\]$1\\("),h=h.replace(/^ {0,3}\[([\S \t]*?)]:/gm,"\\[$1]:"),h});var P=this;typeof define=="function"&&define.amd?define(function(){"use strict";return t}):typeof Gs<"u"&&Gs.exports?Gs.exports=t:P.showdown=t}).call(id)});var Cc=Ha((Ra,Tu)=>{(function(e,t){typeof Ra=="object"&&typeof Tu=="object"?Tu.exports=t():typeof define=="function"&&define.amd?define("Flowbite",[],t):typeof Ra=="object"?Ra.Flowbite=t():e.Flowbite=t()})(self,function(){return function(){"use strict";var i={853:function(r,s,a){a.r(s),a.d(s,{afterMain:function(){return F},afterRead:function(){return C},afterWrite:function(){return q},applyStyles:function(){return ae},arrow:function(){return Ci},auto:function(){return A},basePlacements:function(){return N},beforeMain:function(){return I},beforeRead:function(){return f},beforeWrite:function(){return K},bottom:function(){return c},clippingParents:function(){return g},computeStyles:function(){return et},createPopper:function(){return hs},createPopperBase:function(){return qn},createPopperLite:function(){return ps},detectOverflow:function(){return Jt},end:function(){return d},eventListeners:function(){return Bt},flip:function(){return fi},hide:function(){return M},left:function(){return k},main:function(){return L},modifierPhases:function(){return G},offset:function(){return pe},placements:function(){return h},popper:function(){return E},popperGenerator:function(){return gn},popperOffsets:function(){return he},preventOverflow:function(){return ot},read:function(){return _},reference:function(){return P},right:function(){return v},start:function(){return y},top:function(){return u},variationPlacements:function(){return o},viewport:function(){return b},write:function(){return W}});var u="top",c="bottom",v="right",k="left",A="auto",N=[u,c,v,k],y="start",d="end",g="clippingParents",b="viewport",E="popper",P="reference",o=N.reduce(function(S,T){return S.concat([T+"-"+y,T+"-"+d])},[]),h=[].concat(N,[A]).reduce(function(S,T){return S.concat([T,T+"-"+y,T+"-"+d])},[]),f="beforeRead",_="read",C="afterRead",I="beforeMain",L="main",F="afterMain",K="beforeWrite",W="write",q="afterWrite",G=[f,_,C,I,L,F,K,W,q];function x(S){return S?(S.nodeName||"").toLowerCase():null}function U(S){if(S==null)return window;if(S.toString()!=="[object Window]"){var T=S.ownerDocument;return T&&T.defaultView||window}return S}function z(S){var T=U(S).Element;return S instanceof T||S instanceof Element}function $(S){var T=U(S).HTMLElement;return S instanceof T||S instanceof HTMLElement}function ee(S){if(typeof ShadowRoot>"u")return!1;var T=U(S).ShadowRoot;return S instanceof T||S instanceof ShadowRoot}function X(S){var T=S.state;Object.keys(T.elements).forEach(function(l){var m=T.styles[l]||{},p=T.attributes[l]||{},w=T.elements[l];!$(w)||!x(w)||(Object.assign(w.style,m),Object.keys(p).forEach(function(D){var R=p[D];R===!1?w.removeAttribute(D):w.setAttribute(D,R===!0?"":R)}))})}function ie(S){var T=S.state,l={popper:{position:T.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(T.elements.popper.style,l.popper),T.styles=l,T.elements.arrow&&Object.assign(T.elements.arrow.style,l.arrow),function(){Object.keys(T.elements).forEach(function(m){var p=T.elements[m],w=T.attributes[m]||{},D=Object.keys(T.styles.hasOwnProperty(m)?T.styles[m]:l[m]),R=D.reduce(function(O,j){return O[j]="",O},{});!$(p)||!x(p)||(Object.assign(p.style,R),Object.keys(w).forEach(function(O){p.removeAttribute(O)}))})}}var ae={name:"applyStyles",enabled:!0,phase:"write",fn:X,effect:ie,requires:["computeStyles"]};function me(S){return S.split("-")[0]}var re=Math.max,ye=Math.min,ne=Math.round;function xe(){var S=navigator.userAgentData;return S!=null&&S.brands?S.brands.map(function(T){return T.brand+"/"+T.version}).join(" "):navigator.userAgent}function je(){return!/^((?!chrome|android).)*safari/i.test(xe())}function He(S,T,l){T===void 0&&(T=!1),l===void 0&&(l=!1);var m=S.getBoundingClientRect(),p=1,w=1;T&&$(S)&&(p=S.offsetWidth>0&&ne(m.width)/S.offsetWidth||1,w=S.offsetHeight>0&&ne(m.height)/S.offsetHeight||1);var D=z(S)?U(S):window,R=D.visualViewport,O=!je()&&l,j=(m.left+(O&&R?R.offsetLeft:0))/p,B=(m.top+(O&&R?R.offsetTop:0))/w,V=m.width/p,J=m.height/w;return{width:V,height:J,top:B,right:j+V,bottom:B+J,left:j,x:j,y:B}}function rt(S){var T=He(S),l=S.offsetWidth,m=S.offsetHeight;return Math.abs(T.width-l)<=1&&(l=T.width),Math.abs(T.height-m)<=1&&(m=T.height),{x:S.offsetLeft,y:S.offsetTop,width:l,height:m}}function kt(S,T){var l=T.getRootNode&&T.getRootNode();if(S.contains(T))return!0;if(l&&ee(l)){var m=T;do{if(m&&S.isSameNode(m))return!0;m=m.parentNode||m.host}while(m)}return!1}function it(S){return U(S).getComputedStyle(S)}function st(S){return["table","td","th"].indexOf(x(S))>=0}function at(S){return((z(S)?S.ownerDocument:S.document)||window.document).documentElement}function At(S){return x(S)==="html"?S:S.assignedSlot||S.parentNode||(ee(S)?S.host:null)||at(S)}function di(S){return!$(S)||it(S).position==="fixed"?null:S.offsetParent}function zi(S){var T=/firefox/i.test(xe()),l=/Trident/i.test(xe());if(l&&$(S)){var m=it(S);if(m.position==="fixed")return null}var p=At(S);for(ee(p)&&(p=p.host);$(p)&&["html","body"].indexOf(x(p))<0;){var w=it(p);if(w.transform!=="none"||w.perspective!=="none"||w.contain==="paint"||["transform","perspective"].indexOf(w.willChange)!==-1||T&&w.willChange==="filter"||T&&w.filter&&w.filter!=="none")return p;p=p.parentNode}return null}function Et(S){for(var T=U(S),l=di(S);l&&st(l)&&it(l).position==="static";)l=di(l);return l&&(x(l)==="html"||x(l)==="body"&&it(l).position==="static")?T:l||zi(S)||T}function Qt(S){return["top","bottom"].indexOf(S)>=0?"x":"y"}function ht(S,T,l){return re(S,ye(T,l))}function dn(S,T,l){var m=ht(S,T,l);return m>l?l:m}function ei(){return{top:0,right:0,bottom:0,left:0}}function $t(S){return Object.assign({},ei(),S)}function Mt(S,T){return T.reduce(function(l,m){return l[m]=S,l},{})}var ti=function(T,l){return T=typeof T=="function"?T(Object.assign({},l.rects,{placement:l.placement})):T,$t(typeof T!="number"?T:Mt(T,N))};function ii(S){var T,l=S.state,m=S.name,p=S.options,w=l.elements.arrow,D=l.modifiersData.popperOffsets,R=me(l.placement),O=Qt(R),j=[k,v].indexOf(R)>=0,B=j?"height":"width";if(!(!w||!D)){var V=ti(p.padding,l),J=rt(w),Y=O==="y"?u:k,se=O==="y"?c:v,oe=l.rects.reference[B]+l.rects.reference[O]-D[O]-l.rects.popper[B],ue=D[O]-l.rects.reference[O],ge=Et(w),_e=ge?O==="y"?ge.clientHeight||0:ge.clientWidth||0:0,Le=oe/2-ue/2,ke=V[Y],De=_e-J[B]-V[se],ve=_e/2-J[B]/2+Le,Te=ht(ke,ve,De),Re=O;l.modifiersData[m]=(T={},T[Re]=Te,T.centerOffset=Te-ve,T)}}function cn(S){var T=S.state,l=S.options,m=l.element,p=m===void 0?"[data-popper-arrow]":m;p!=null&&(typeof p=="string"&&(p=T.elements.popper.querySelector(p),!p)||kt(T.elements.popper,p)&&(T.elements.arrow=p))}var Ci={name:"arrow",enabled:!0,phase:"main",fn:ii,effect:cn,requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function qt(S){return S.split("-")[1]}var hn={top:"auto",right:"auto",bottom:"auto",left:"auto"};function fn(S){var T=S.x,l=S.y,m=window,p=m.devicePixelRatio||1;return{x:ne(T*p)/p||0,y:ne(l*p)/p||0}}function ci(S){var T,l=S.popper,m=S.popperRect,p=S.placement,w=S.variation,D=S.offsets,R=S.position,O=S.gpuAcceleration,j=S.adaptive,B=S.roundOffsets,V=S.isFixed,J=D.x,Y=J===void 0?0:J,se=D.y,oe=se===void 0?0:se,ue=typeof B=="function"?B({x:Y,y:oe}):{x:Y,y:oe};Y=ue.x,oe=ue.y;var ge=D.hasOwnProperty("x"),_e=D.hasOwnProperty("y"),Le=k,ke=u,De=window;if(j){var ve=Et(l),Te="clientHeight",Re="clientWidth";if(ve===U(l)&&(ve=at(l),it(ve).position!=="static"&&R==="absolute"&&(Te="scrollHeight",Re="scrollWidth")),ve=ve,p===u||(p===k||p===v)&&w===d){ke=c;var Oe=V&&ve===De&&De.visualViewport?De.visualViewport.height:ve[Te];oe-=Oe-m.height,oe*=O?1:-1}if(p===k||(p===u||p===c)&&w===d){Le=v;var Pe=V&&ve===De&&De.visualViewport?De.visualViewport.width:ve[Re];Y-=Pe-m.width,Y*=O?1:-1}}var Ce=Object.assign({position:R},j&&hn),Me=B===!0?fn({x:Y,y:oe}):{x:Y,y:oe};if(Y=Me.x,oe=Me.y,O){var ze;return Object.assign({},Ce,(ze={},ze[ke]=_e?"0":"",ze[Le]=ge?"0":"",ze.transform=(De.devicePixelRatio||1)<=1?"translate("+Y+"px, "+oe+"px)":"translate3d("+Y+"px, "+oe+"px, 0)",ze))}return Object.assign({},Ce,(T={},T[ke]=_e?oe+"px":"",T[Le]=ge?Y+"px":"",T.transform="",T))}function Kt(S){var T=S.state,l=S.options,m=l.gpuAcceleration,p=m===void 0?!0:m,w=l.adaptive,D=w===void 0?!0:w,R=l.roundOffsets,O=R===void 0?!0:R;if(!1)var j;var B={placement:me(T.placement),variation:qt(T.placement),popper:T.elements.popper,popperRect:T.rects.popper,gpuAcceleration:p,isFixed:T.options.strategy==="fixed"};T.modifiersData.popperOffsets!=null&&(T.styles.popper=Object.assign({},T.styles.popper,ci(Object.assign({},B,{offsets:T.modifiersData.popperOffsets,position:T.options.strategy,adaptive:D,roundOffsets:O})))),T.modifiersData.arrow!=null&&(T.styles.arrow=Object.assign({},T.styles.arrow,ci(Object.assign({},B,{offsets:T.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:O})))),T.attributes.popper=Object.assign({},T.attributes.popper,{"data-popper-placement":T.placement})}var et={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:Kt,data:{}},Nt={passive:!0};function ft(S){var T=S.state,l=S.instance,m=S.options,p=m.scroll,w=p===void 0?!0:p,D=m.resize,R=D===void 0?!0:D,O=U(T.elements.popper),j=[].concat(T.scrollParents.reference,T.scrollParents.popper);return w&&j.forEach(function(B){B.addEventListener("scroll",l.update,Nt)}),R&&O.addEventListener("resize",l.update,Nt),function(){w&&j.forEach(function(B){B.removeEventListener("scroll",l.update,Nt)}),R&&O.removeEventListener("resize",l.update,Nt)}}var Bt={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:ft,data:{}},Si={left:"right",right:"left",bottom:"top",top:"bottom"};function Ct(S){return S.replace(/left|right|bottom|top/g,function(T){return Si[T]})}var Vi={start:"end",end:"start"};function Ui(S){return S.replace(/start|end/g,function(T){return Vi[T]})}function ni(S){var T=U(S),l=T.pageXOffset,m=T.pageYOffset;return{scrollLeft:l,scrollTop:m}}function pn(S){return He(at(S)).left+ni(S).scrollLeft}function Ue(S,T){var l=U(S),m=at(S),p=l.visualViewport,w=m.clientWidth,D=m.clientHeight,R=0,O=0;if(p){w=p.width,D=p.height;var j=je();(j||!j&&T==="fixed")&&(R=p.offsetLeft,O=p.offsetTop)}return{width:w,height:D,x:R+pn(S),y:O}}function ri(S){var T,l=at(S),m=ni(S),p=(T=S.ownerDocument)==null?void 0:T.body,w=re(l.scrollWidth,l.clientWidth,p?p.scrollWidth:0,p?p.clientWidth:0),D=re(l.scrollHeight,l.clientHeight,p?p.scrollHeight:0,p?p.clientHeight:0),R=-m.scrollLeft+pn(S),O=-m.scrollTop;return it(p||l).direction==="rtl"&&(R+=re(l.clientWidth,p?p.clientWidth:0)-w),{width:w,height:D,x:R,y:O}}function Wi(S){var T=it(S),l=T.overflow,m=T.overflowX,p=T.overflowY;return/auto|scroll|overlay|hidden/.test(l+p+m)}function Di(S){return["html","body","#document"].indexOf(x(S))>=0?S.ownerDocument.body:$(S)&&Wi(S)?S:Di(At(S))}function Ft(S,T){var l;T===void 0&&(T=[]);var m=Di(S),p=m===((l=S.ownerDocument)==null?void 0:l.body),w=U(m),D=p?[w].concat(w.visualViewport||[],Wi(m)?m:[]):m,R=T.concat(D);return p?R:R.concat(Ft(At(D)))}function $i(S){return Object.assign({},S,{left:S.x,top:S.y,right:S.x+S.width,bottom:S.y+S.height})}function Hn(S,T){var l=He(S,!1,T==="fixed");return l.top=l.top+S.clientTop,l.left=l.left+S.clientLeft,l.bottom=l.top+S.clientHeight,l.right=l.left+S.clientWidth,l.width=S.clientWidth,l.height=S.clientHeight,l.x=l.left,l.y=l.top,l}function pt(S,T,l){return T===b?$i(Ue(S,l)):z(T)?Hn(T,l):$i(ri(at(S)))}function hi(S){var T=Ft(At(S)),l=["absolute","fixed"].indexOf(it(S).position)>=0,m=l&&$(S)?Et(S):S;return z(m)?T.filter(function(p){return z(p)&&kt(p,m)&&x(p)!=="body"}):[]}function zn(S,T,l,m){var p=T==="clippingParents"?hi(S):[].concat(T),w=[].concat(p,[l]),D=w[0],R=w.reduce(function(O,j){var B=pt(S,j,m);return O.top=re(B.top,O.top),O.right=ye(B.right,O.right),O.bottom=ye(B.bottom,O.bottom),O.left=re(B.left,O.left),O},pt(S,D,m));return R.width=R.right-R.left,R.height=R.bottom-R.top,R.x=R.left,R.y=R.top,R}function qi(S){var T=S.reference,l=S.element,m=S.placement,p=m?me(m):null,w=m?qt(m):null,D=T.x+T.width/2-l.width/2,R=T.y+T.height/2-l.height/2,O;switch(p){case u:O={x:D,y:T.y-l.height};break;case c:O={x:D,y:T.y+T.height};break;case v:O={x:T.x+T.width,y:R};break;case k:O={x:T.x-l.width,y:R};break;default:O={x:T.x,y:T.y}}var j=p?Qt(p):null;if(j!=null){var B=j==="y"?"height":"width";switch(w){case y:O[j]=O[j]-(T[B]/2-l[B]/2);break;case d:O[j]=O[j]+(T[B]/2-l[B]/2);break;default:}}return O}function Jt(S,T){T===void 0&&(T={});var l=T,m=l.placement,p=m===void 0?S.placement:m,w=l.strategy,D=w===void 0?S.strategy:w,R=l.boundary,O=R===void 0?g:R,j=l.rootBoundary,B=j===void 0?b:j,V=l.elementContext,J=V===void 0?E:V,Y=l.altBoundary,se=Y===void 0?!1:Y,oe=l.padding,ue=oe===void 0?0:oe,ge=$t(typeof ue!="number"?ue:Mt(ue,N)),_e=J===E?P:E,Le=S.rects.popper,ke=S.elements[se?_e:J],De=zn(z(ke)?ke:ke.contextElement||at(S.elements.popper),O,B,D),ve=He(S.elements.reference),Te=qi({reference:ve,element:Le,strategy:"absolute",placement:p}),Re=$i(Object.assign({},Le,Te)),Oe=J===E?Re:ve,Pe={top:De.top-Oe.top+ge.top,bottom:Oe.bottom-De.bottom+ge.bottom,left:De.left-Oe.left+ge.left,right:Oe.right-De.right+ge.right},Ce=S.modifiersData.offset;if(J===E&&Ce){var Me=Ce[p];Object.keys(Pe).forEach(function(ze){var pi=[v,c].indexOf(ze)>=0?1:-1,gi=[u,c].indexOf(ze)>=0?"y":"x";Pe[ze]+=Me[gi]*pi})}return Pe}function Vn(S,T){T===void 0&&(T={});var l=T,m=l.placement,p=l.boundary,w=l.rootBoundary,D=l.padding,R=l.flipVariations,O=l.allowedAutoPlacements,j=O===void 0?h:O,B=qt(m),V=B?R?o:o.filter(function(se){return qt(se)===B}):N,J=V.filter(function(se){return j.indexOf(se)>=0});J.length===0&&(J=V);var Y=J.reduce(function(se,oe){return se[oe]=Jt(S,{placement:oe,boundary:p,rootBoundary:w,padding:D})[me(oe)],se},{});return Object.keys(Y).sort(function(se,oe){return Y[se]-Y[oe]})}function St(S){if(me(S)===A)return[];var T=Ct(S);return[Ui(S),T,Ui(T)]}function si(S){var T=S.state,l=S.options,m=S.name;if(!T.modifiersData[m]._skip){for(var p=l.mainAxis,w=p===void 0?!0:p,D=l.altAxis,R=D===void 0?!0:D,O=l.fallbackPlacements,j=l.padding,B=l.boundary,V=l.rootBoundary,J=l.altBoundary,Y=l.flipVariations,se=Y===void 0?!0:Y,oe=l.allowedAutoPlacements,ue=T.options.placement,ge=me(ue),_e=ge===ue,Le=O||(_e||!se?[Ct(ue)]:St(ue)),ke=[ue].concat(Le).reduce(function(Jn,Xi){return Jn.concat(me(Xi)===A?Vn(T,{placement:Xi,boundary:B,rootBoundary:V,padding:j,flipVariations:se,allowedAutoPlacements:oe}):Xi)},[]),De=T.rects.reference,ve=T.rects.popper,Te=new Map,Re=!0,Oe=ke[0],Pe=0;Pe<ke.length;Pe++){var Ce=ke[Pe],Me=me(Ce),ze=qt(Ce)===y,pi=[u,c].indexOf(Me)>=0,gi=pi?"width":"height",ut=Jt(T,{placement:Ce,boundary:B,rootBoundary:V,altBoundary:J,padding:j}),Fe=pi?ze?v:k:ze?c:u;De[gi]>ve[gi]&&(Fe=Ct(Fe));var Kn=Ct(Fe),mi=[];if(w&&mi.push(ut[Me]<=0),R&&mi.push(ut[Fe]<=0,ut[Kn]<=0),mi.every(function(Jn){return Jn})){Oe=Ce,Re=!1;break}Te.set(Ce,mi)}if(Re)for(var gs=se?3:1,Na=function(Xi){var vr=ke.find(function(vs){var mn=Te.get(vs);if(mn)return mn.slice(0,Xi).every(function(Ba){return Ba})});if(vr)return Oe=vr,"break"},mr=gs;mr>0;mr--){var ms=Na(mr);if(ms==="break")break}T.placement!==Oe&&(T.modifiersData[m]._skip=!0,T.placement=Oe,T.reset=!0)}}var fi={name:"flip",enabled:!0,phase:"main",fn:si,requiresIfExists:["offset"],data:{_skip:!1}};function Ki(S,T,l){return l===void 0&&(l={x:0,y:0}),{top:S.top-T.height-l.y,right:S.right-T.width+l.x,bottom:S.bottom-T.height+l.y,left:S.left-T.width-l.x}}function Ji(S){return[u,v,c,k].some(function(T){return S[T]>=0})}function Un(S){var T=S.state,l=S.name,m=T.rects.reference,p=T.rects.popper,w=T.modifiersData.preventOverflow,D=Jt(T,{elementContext:"reference"}),R=Jt(T,{altBoundary:!0}),O=Ki(D,m),j=Ki(R,p,w),B=Ji(O),V=Ji(j);T.modifiersData[l]={referenceClippingOffsets:O,popperEscapeOffsets:j,isReferenceHidden:B,hasPopperEscaped:V},T.attributes.popper=Object.assign({},T.attributes.popper,{"data-popper-reference-hidden":B,"data-popper-escaped":V})}var M={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:Un};function te(S,T,l){var m=me(S),p=[k,u].indexOf(m)>=0?-1:1,w=typeof l=="function"?l(Object.assign({},T,{placement:S})):l,D=w[0],R=w[1];return D=D||0,R=(R||0)*p,[k,v].indexOf(m)>=0?{x:R,y:D}:{x:D,y:R}}function Q(S){var T=S.state,l=S.options,m=S.name,p=l.offset,w=p===void 0?[0,0]:p,D=h.reduce(function(B,V){return B[V]=te(V,T.rects,w),B},{}),R=D[T.placement],O=R.x,j=R.y;T.modifiersData.popperOffsets!=null&&(T.modifiersData.popperOffsets.x+=O,T.modifiersData.popperOffsets.y+=j),T.modifiersData[m]=D}var pe={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:Q};function Ee(S){var T=S.state,l=S.name;T.modifiersData[l]=qi({reference:T.rects.reference,element:T.rects.popper,strategy:"absolute",placement:T.placement})}var he={name:"popperOffsets",enabled:!0,phase:"read",fn:Ee,data:{}};function We(S){return S==="x"?"y":"x"}function Dt(S){var T=S.state,l=S.options,m=S.name,p=l.mainAxis,w=p===void 0?!0:p,D=l.altAxis,R=D===void 0?!1:D,O=l.boundary,j=l.rootBoundary,B=l.altBoundary,V=l.padding,J=l.tether,Y=J===void 0?!0:J,se=l.tetherOffset,oe=se===void 0?0:se,ue=Jt(T,{boundary:O,rootBoundary:j,padding:V,altBoundary:B}),ge=me(T.placement),_e=qt(T.placement),Le=!_e,ke=Qt(ge),De=We(ke),ve=T.modifiersData.popperOffsets,Te=T.rects.reference,Re=T.rects.popper,Oe=typeof oe=="function"?oe(Object.assign({},T.rects,{placement:T.placement})):oe,Pe=typeof Oe=="number"?{mainAxis:Oe,altAxis:Oe}:Object.assign({mainAxis:0,altAxis:0},Oe),Ce=T.modifiersData.offset?T.modifiersData.offset[T.placement]:null,Me={x:0,y:0};if(ve){if(w){var ze,pi=ke==="y"?u:k,gi=ke==="y"?c:v,ut=ke==="y"?"height":"width",Fe=ve[ke],Kn=Fe+ue[pi],mi=Fe-ue[gi],gs=Y?-Re[ut]/2:0,Na=_e===y?Te[ut]:Re[ut],mr=_e===y?-Re[ut]:-Te[ut],ms=T.elements.arrow,Jn=Y&&ms?rt(ms):{width:0,height:0},Xi=T.modifiersData["arrow#persistent"]?T.modifiersData["arrow#persistent"].padding:ei(),vr=Xi[pi],vs=Xi[gi],mn=ht(0,Te[ut],Jn[ut]),Ba=Le?Te[ut]/2-gs-mn-vr-Pe.mainAxis:Na-mn-vr-Pe.mainAxis,Dc=Le?-Te[ut]/2+gs+mn+vs+Pe.mainAxis:mr+mn+vs+Pe.mainAxis,Fa=T.elements.arrow&&Et(T.elements.arrow),Tc=Fa?ke==="y"?Fa.clientTop||0:Fa.clientLeft||0:0,Ru=(ze=Ce?.[ke])!=null?ze:0,xc=Fe+Ba-Ru-Tc,Lc=Fe+Dc-Ru,Pu=ht(Y?ye(Kn,xc):Kn,Fe,Y?re(mi,Lc):mi);ve[ke]=Pu,Me[ke]=Pu-Fe}if(R){var Iu,Rc=ke==="x"?u:k,Pc=ke==="x"?c:v,vn=ve[De],bs=De==="y"?"height":"width",Ou=vn+ue[Rc],Mu=vn-ue[Pc],ja=[u,k].indexOf(ge)!==-1,Nu=(Iu=Ce?.[De])!=null?Iu:0,Bu=ja?Ou:vn-Te[bs]-Re[bs]-Nu+Pe.altAxis,Fu=ja?vn+Te[bs]+Re[bs]-Nu-Pe.altAxis:Mu,ju=Y&&ja?dn(Bu,vn,Fu):ht(Y?Bu:Ou,vn,Y?Fu:Mu);ve[De]=ju,Me[De]=ju-vn}T.modifiersData[m]=Me}}var ot={name:"preventOverflow",enabled:!0,phase:"main",fn:Dt,requiresIfExists:["offset"]};function Ye(S){return{scrollLeft:S.scrollLeft,scrollTop:S.scrollTop}}function Gi(S){return S===U(S)||!$(S)?ni(S):Ye(S)}function Wn(S){var T=S.getBoundingClientRect(),l=ne(T.width)/S.offsetWidth||1,m=ne(T.height)/S.offsetHeight||1;return l!==1||m!==1}function ls(S,T,l){l===void 0&&(l=!1);var m=$(T),p=$(T)&&Wn(T),w=at(T),D=He(S,p,l),R={scrollLeft:0,scrollTop:0},O={x:0,y:0};return(m||!m&&!l)&&((x(T)!=="body"||Wi(w))&&(R=Gi(T)),$(T)?(O=He(T,!0),O.x+=T.clientLeft,O.y+=T.clientTop):w&&(O.x=pn(w))),{x:D.left+R.scrollLeft-O.x,y:D.top+R.scrollTop-O.y,width:D.width,height:D.height}}function $n(S){var T=new Map,l=new Set,m=[];S.forEach(function(w){T.set(w.name,w)});function p(w){l.add(w.name);var D=[].concat(w.requires||[],w.requiresIfExists||[]);D.forEach(function(R){if(!l.has(R)){var O=T.get(R);O&&p(O)}}),m.push(w)}return S.forEach(function(w){l.has(w.name)||p(w)}),m}function Ia(S){var T=$n(S);return G.reduce(function(l,m){return l.concat(T.filter(function(p){return p.phase===m}))},[])}function Oa(S){var T;return function(){return T||(T=new Promise(function(l){Promise.resolve().then(function(){T=void 0,l(S())})})),T}}function Ma(S){var T=S.reduce(function(l,m){var p=l[m.name];return l[m.name]=p?Object.assign({},p,m,{options:Object.assign({},p.options,m.options),data:Object.assign({},p.data,m.data)}):m,l},{});return Object.keys(T).map(function(l){return T[l]})}var xu="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",Lu="Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.",ds={placement:"bottom",modifiers:[],strategy:"absolute"};function gr(){for(var S=arguments.length,T=new Array(S),l=0;l<S;l++)T[l]=arguments[l];return!T.some(function(m){return!(m&&typeof m.getBoundingClientRect=="function")})}function gn(S){S===void 0&&(S={});var T=S,l=T.defaultModifiers,m=l===void 0?[]:l,p=T.defaultOptions,w=p===void 0?ds:p;return function(R,O,j){j===void 0&&(j=w);var B={placement:"bottom",orderedModifiers:[],options:Object.assign({},ds,w),modifiersData:{},elements:{reference:R,popper:O},attributes:{},styles:{}},V=[],J=!1,Y={state:B,setOptions:function(ge){var _e=typeof ge=="function"?ge(B.options):ge;oe(),B.options=Object.assign({},w,B.options,_e),B.scrollParents={reference:z(R)?Ft(R):R.contextElement?Ft(R.contextElement):[],popper:Ft(O)};var Le=Ia(Ma([].concat(m,B.options.modifiers)));if(B.orderedModifiers=Le.filter(function(Ce){return Ce.enabled}),!1)var ke,De,ve,Te,Re,Oe,Pe;return se(),Y.update()},forceUpdate:function(){if(!J){var ge=B.elements,_e=ge.reference,Le=ge.popper;if(gr(_e,Le)){B.rects={reference:ls(_e,Et(Le),B.options.strategy==="fixed"),popper:rt(Le)},B.reset=!1,B.placement=B.options.placement,B.orderedModifiers.forEach(function(Ce){return B.modifiersData[Ce.name]=Object.assign({},Ce.data)});for(var ke=0,De=0;De<B.orderedModifiers.length;De++){if(B.reset===!0){B.reset=!1,De=-1;continue}var ve=B.orderedModifiers[De],Te=ve.fn,Re=ve.options,Oe=Re===void 0?{}:Re,Pe=ve.name;typeof Te=="function"&&(B=Te({state:B,options:Oe,name:Pe,instance:Y})||B)}}}},update:Oa(function(){return new Promise(function(ue){Y.forceUpdate(),ue(B)})}),destroy:function(){oe(),J=!0}};if(!gr(R,O))return Y;Y.setOptions(j).then(function(ue){!J&&j.onFirstUpdate&&j.onFirstUpdate(ue)});function se(){B.orderedModifiers.forEach(function(ue){var ge=ue.name,_e=ue.options,Le=_e===void 0?{}:_e,ke=ue.effect;if(typeof ke=="function"){var De=ke({state:B,name:ge,instance:Y,options:Le}),ve=function(){};V.push(De||ve)}})}function oe(){V.forEach(function(ue){return ue()}),V=[]}return Y}}var qn=gn(),cs=[Bt,he,et,ae,pe,fi,ot,Ci,M],hs=gn({defaultModifiers:cs}),fs=[Bt,he,et,ae],ps=gn({defaultModifiers:fs})},554:function(r,s){Object.defineProperty(s,"__esModule",{value:!0});function a(l,m){(m==null||m>l.length)&&(m=l.length);for(var p=0,w=Array(m);p<m;p++)w[p]=l[p];return w}function u(l){if(Array.isArray(l))return l}function c(l){if(Array.isArray(l))return a(l)}function v(l){if(l===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return l}function k(l,m,p){return m=g(m),_(l,E()?Reflect.construct(m,p||[],g(l).constructor):m.apply(l,p))}function A(l,m){if(!(l instanceof m))throw new TypeError("Cannot call a class as a function")}function N(l,m){for(var p=0;p<m.length;p++){var w=m[p];w.enumerable=w.enumerable||!1,w.configurable=!0,"value"in w&&(w.writable=!0),Object.defineProperty(l,W(w.key),w)}}function y(l,m,p){return m&&N(l.prototype,m),p&&N(l,p),Object.defineProperty(l,"prototype",{writable:!1}),l}function d(){return d=typeof Reflect<"u"&&Reflect.get?Reflect.get.bind():function(l,m,p){var w=L(l,m);if(w){var D=Object.getOwnPropertyDescriptor(w,m);return D.get?D.get.call(arguments.length<3?l:p):D.value}},d.apply(null,arguments)}function g(l){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(m){return m.__proto__||Object.getPrototypeOf(m)},g(l)}function b(l,m){if(typeof m!="function"&&m!==null)throw new TypeError("Super expression must either be null or a function");l.prototype=Object.create(m&&m.prototype,{constructor:{value:l,writable:!0,configurable:!0}}),Object.defineProperty(l,"prototype",{writable:!1}),m&&C(l,m)}function E(){try{var l=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch{}return(E=function(){return!!l})()}function P(l){if(typeof Symbol<"u"&&l[Symbol.iterator]!=null||l["@@iterator"]!=null)return Array.from(l)}function o(l,m){var p=l==null?null:typeof Symbol<"u"&&l[Symbol.iterator]||l["@@iterator"];if(p!=null){var w,D,R,O,j=[],B=!0,V=!1;try{if(R=(p=p.call(l)).next,m===0){if(Object(p)!==p)return;B=!1}else for(;!(B=(w=R.call(p)).done)&&(j.push(w.value),j.length!==m);B=!0);}catch(J){V=!0,D=J}finally{try{if(!B&&p.return!=null&&(O=p.return(),Object(O)!==O))return}finally{if(V)throw D}}return j}}function h(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function f(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _(l,m){if(m&&(typeof m=="object"||typeof m=="function"))return m;if(m!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return v(l)}function C(l,m){return C=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(p,w){return p.__proto__=w,p},C(l,m)}function I(l,m){return u(l)||o(l,m)||G(l,m)||h()}function L(l,m){for(;!{}.hasOwnProperty.call(l,m)&&(l=g(l))!==null;);return l}function F(l){return c(l)||P(l)||G(l)||f()}function K(l,m){if(typeof l!="object"||!l)return l;var p=l[Symbol.toPrimitive];if(p!==void 0){var w=p.call(l,m||"default");if(typeof w!="object")return w;throw new TypeError("@@toPrimitive must return a primitive value.")}return(m==="string"?String:Number)(l)}function W(l){var m=K(l,"string");return typeof m=="symbol"?m:m+""}function q(l){return q=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(m){return typeof m}:function(m){return m&&typeof Symbol=="function"&&m.constructor===Symbol&&m!==Symbol.prototype?"symbol":typeof m},q(l)}function G(l,m){if(l){if(typeof l=="string")return a(l,m);var p={}.toString.call(l).slice(8,-1);return p==="Object"&&l.constructor&&(p=l.constructor.name),p==="Map"||p==="Set"?Array.from(l):p==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(p)?a(l,m):void 0}}function x(l,m){return Object.prototype.hasOwnProperty.call(l,m)}function U(l){return l[l.length-1]}function z(l){for(var m=arguments.length,p=new Array(m>1?m-1:0),w=1;w<m;w++)p[w-1]=arguments[w];return p.forEach(function(D){l.includes(D)||l.push(D)}),l}function $(l,m){return l?l.split(m):[]}function ee(l,m,p){var w=m===void 0||l>=m,D=p===void 0||l<=p;return w&&D}function X(l,m,p){return l<m?m:l>p?p:l}function ie(l,m){var p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},w=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,D=arguments.length>4&&arguments[4]!==void 0?arguments[4]:"",R=Object.keys(p).reduce(function(j,B){var V=p[B];return typeof V=="function"&&(V=V(w)),"".concat(j," ").concat(B,'="').concat(V,'"')},l);D+="<".concat(R,"></").concat(l,">");var O=w+1;return O<m?ie(l,m,p,O,D):D}function ae(l){return l.replace(/>\s+/g,">").replace(/\s+</,"<")}function me(l){return new Date(l).setHours(0,0,0,0)}function re(){return new Date().setHours(0,0,0,0)}function ye(){switch(arguments.length){case 0:return re();case 1:return me(arguments.length<=0?void 0:arguments[0])}var l=new Date(0);return l.setFullYear.apply(l,arguments),l.setHours(0,0,0,0)}function ne(l,m){var p=new Date(l);return p.setDate(p.getDate()+m)}function xe(l,m){return ne(l,m*7)}function je(l,m){var p=new Date(l),w=p.getMonth()+m,D=w%12;D<0&&(D+=12);var R=p.setMonth(w);return p.getMonth()!==D?p.setDate(0):R}function He(l,m){var p=new Date(l),w=p.getMonth(),D=p.setFullYear(p.getFullYear()+m);return w===1&&p.getMonth()===2?p.setDate(0):D}function rt(l,m){return(l-m+7)%7}function kt(l,m){var p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:0,w=new Date(l).getDay();return ne(l,rt(m,p)-rt(w,p))}function it(l){var m=kt(l,4,1),p=kt(new Date(m).setMonth(0,4),4,1);return Math.round((m-p)/6048e5)+1}function st(l,m){var p=new Date(l).getFullYear();return Math.floor(p/m)*m}var at=/dd?|DD?|mm?|MM?|yy?(?:yy)?/,At=/[\s!-/:-@[-`{-~年月日]+/,di={},zi={y:function(m,p){return new Date(m).setFullYear(parseInt(p,10))},m:function(m,p,w){var D=new Date(m),R=parseInt(p,10)-1;if(isNaN(R)){if(!p)return NaN;var O=p.toLowerCase(),j=function(V){return V.toLowerCase().startsWith(O)};if(R=w.monthsShort.findIndex(j),R<0&&(R=w.months.findIndex(j)),R<0)return NaN}return D.setMonth(R),D.getMonth()!==Qt(R)?D.setDate(0):D.getTime()},d:function(m,p){return new Date(m).setDate(parseInt(p,10))}},Et={d:function(m){return m.getDate()},dd:function(m){return ht(m.getDate(),2)},D:function(m,p){return p.daysShort[m.getDay()]},DD:function(m,p){return p.days[m.getDay()]},m:function(m){return m.getMonth()+1},mm:function(m){return ht(m.getMonth()+1,2)},M:function(m,p){return p.monthsShort[m.getMonth()]},MM:function(m,p){return p.months[m.getMonth()]},y:function(m){return m.getFullYear()},yy:function(m){return ht(m.getFullYear(),2).slice(-2)},yyyy:function(m){return ht(m.getFullYear(),4)}};function Qt(l){return l>-1?l%12:Qt(l+12)}function ht(l,m){return l.toString().padStart(m,"0")}function dn(l){if(typeof l!="string")throw new Error("Invalid date format.");if(l in di)return di[l];var m=l.split(at),p=l.match(new RegExp(at,"g"));if(m.length===0||!p)throw new Error("Invalid date format.");var w=p.map(function(R){return Et[R]}),D=Object.keys(zi).reduce(function(R,O){var j=p.find(function(B){return B[0]!=="D"&&B[0].toLowerCase()===O});return j&&R.push(O),R},[]);return di[l]={parser:function(O,j){var B=O.split(At).reduce(function(V,J,Y){if(J.length>0&&p[Y]){var se=p[Y][0];se==="M"?V.m=J:se!=="D"&&(V[se]=J)}return V},{});return D.reduce(function(V,J){var Y=zi[J](V,B[J],j);return isNaN(Y)?V:Y},re())},formatter:function(O,j){var B=w.reduce(function(V,J,Y){return V+="".concat(m[Y]).concat(J(O,j))},"");return B+=U(m)}}}function ei(l,m,p){if(l instanceof Date||typeof l=="number"){var w=me(l);return isNaN(w)?void 0:w}if(l){if(l==="today")return re();if(m&&m.toValue){var D=m.toValue(l,m,p);return isNaN(D)?void 0:me(D)}return dn(m).parser(l,p)}}function $t(l,m,p){if(isNaN(l)||!l&&l!==0)return"";var w=typeof l=="number"?new Date(l):l;return m.toDisplay?m.toDisplay(w,m,p):dn(m).formatter(w,p)}var Mt=new WeakMap,ti=EventTarget.prototype,ii=ti.addEventListener,cn=ti.removeEventListener;function Ci(l,m){var p=Mt.get(l);p||(p=[],Mt.set(l,p)),m.forEach(function(w){ii.call.apply(ii,F(w)),p.push(w)})}function qt(l){var m=Mt.get(l);m&&(m.forEach(function(p){cn.call.apply(cn,F(p))}),Mt.delete(l))}if(!Event.prototype.composedPath){var hn=function l(m){var p=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];p.push(m);var w;return m.parentNode?w=m.parentNode:m.host?w=m.host:m.defaultView&&(w=m.defaultView),w?l(w,p):p};Event.prototype.composedPath=function(){return hn(this.target)}}function fn(l,m,p){var w=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,D=l[w];return m(D)?D:D===p||!D.parentElement?void 0:fn(l,m,p,w+1)}function ci(l,m){var p=typeof m=="function"?m:function(w){return w.matches(m)};return fn(l.composedPath(),p,l.currentTarget)}var Kt={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear",titleFormat:"MM y"}},et={autohide:!1,beforeShowDay:null,beforeShowDecade:null,beforeShowMonth:null,beforeShowYear:null,calendarWeeks:!1,clearBtn:!1,dateDelimiter:",",datesDisabled:[],daysOfWeekDisabled:[],daysOfWeekHighlighted:[],defaultViewDate:void 0,disableTouchKeyboard:!1,format:"mm/dd/yyyy",language:"en",maxDate:null,maxNumberOfDates:1,maxView:3,minDate:null,nextArrow:'<svg class="w-4 h-4 rtl:rotate-180 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/></svg>',orientation:"auto",pickLevel:0,prevArrow:'<svg class="w-4 h-4 rtl:rotate-180 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5H1m0 0 4 4M1 5l4-4"/></svg>',showDaysOfWeek:!0,showOnClick:!0,showOnFocus:!0,startView:0,title:"",todayBtn:!1,todayBtnMode:0,todayHighlight:!1,updateOnBlur:!0,weekStart:0},Nt=document.createRange();function ft(l){return Nt.createContextualFragment(l)}function Bt(l){l.style.display!=="none"&&(l.style.display&&(l.dataset.styleDisplay=l.style.display),l.style.display="none")}function Si(l){l.style.display==="none"&&(l.dataset.styleDisplay?(l.style.display=l.dataset.styleDisplay,delete l.dataset.styleDisplay):l.style.display="")}function Ct(l){l.firstChild&&(l.removeChild(l.firstChild),Ct(l))}function Vi(l,m){Ct(l),m instanceof DocumentFragment?l.appendChild(m):typeof m=="string"?l.appendChild(ft(m)):typeof m.forEach=="function"&&m.forEach(function(p){l.appendChild(p)})}var Ui=et.language,ni=et.format,pn=et.weekStart;function Ue(l,m){return l.length<6&&m>=0&&m<7?z(l,m):l}function ri(l){return(l+6)%7}function Wi(l,m,p,w){var D=ei(l,m,p);return D!==void 0?D:w}function Di(l,m){var p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:3,w=parseInt(l,10);return w>=0&&w<=p?w:m}function Ft(l,m){var p=Object.assign({},l),w={},D=m.constructor.locales,R=m.config||{},O=R.format,j=R.language,B=R.locale,V=R.maxDate,J=R.maxView,Y=R.minDate,se=R.pickLevel,oe=R.startView,ue=R.weekStart;if(p.language){var ge;if(p.language!==j&&(D[p.language]?ge=p.language:(ge=p.language.split("-")[0],D[ge]===void 0&&(ge=!1))),delete p.language,ge){j=w.language=ge;var _e=B||D[Ui];B=Object.assign({format:ni,weekStart:pn},D[Ui]),j!==Ui&&Object.assign(B,D[j]),w.locale=B,O===_e.format&&(O=w.format=B.format),ue===_e.weekStart&&(ue=w.weekStart=B.weekStart,w.weekEnd=ri(B.weekStart))}}if(p.format){var Le=typeof p.format.toDisplay=="function",ke=typeof p.format.toValue=="function",De=at.test(p.format);(Le&&ke||De)&&(O=w.format=p.format),delete p.format}var ve=Y,Te=V;if(p.minDate!==void 0&&(ve=p.minDate===null?ye(0,0,1):Wi(p.minDate,O,B,ve),delete p.minDate),p.maxDate!==void 0&&(Te=p.maxDate===null?void 0:Wi(p.maxDate,O,B,Te),delete p.maxDate),Te<ve?(Y=w.minDate=Te,V=w.maxDate=ve):(Y!==ve&&(Y=w.minDate=ve),V!==Te&&(V=w.maxDate=Te)),p.datesDisabled&&(w.datesDisabled=p.datesDisabled.reduce(function(Fe,Kn){var mi=ei(Kn,O,B);return mi!==void 0?z(Fe,mi):Fe},[]),delete p.datesDisabled),p.defaultViewDate!==void 0){var Re=ei(p.defaultViewDate,O,B);Re!==void 0&&(w.defaultViewDate=Re),delete p.defaultViewDate}if(p.weekStart!==void 0){var Oe=Number(p.weekStart)%7;isNaN(Oe)||(ue=w.weekStart=Oe,w.weekEnd=ri(Oe)),delete p.weekStart}if(p.daysOfWeekDisabled&&(w.daysOfWeekDisabled=p.daysOfWeekDisabled.reduce(Ue,[]),delete p.daysOfWeekDisabled),p.daysOfWeekHighlighted&&(w.daysOfWeekHighlighted=p.daysOfWeekHighlighted.reduce(Ue,[]),delete p.daysOfWeekHighlighted),p.maxNumberOfDates!==void 0){var Pe=parseInt(p.maxNumberOfDates,10);Pe>=0&&(w.maxNumberOfDates=Pe,w.multidate=Pe!==1),delete p.maxNumberOfDates}p.dateDelimiter&&(w.dateDelimiter=String(p.dateDelimiter),delete p.dateDelimiter);var Ce=se;p.pickLevel!==void 0&&(Ce=Di(p.pickLevel,2),delete p.pickLevel),Ce!==se&&(se=w.pickLevel=Ce);var Me=J;p.maxView!==void 0&&(Me=Di(p.maxView,J),delete p.maxView),Me=se>Me?se:Me,Me!==J&&(J=w.maxView=Me);var ze=oe;if(p.startView!==void 0&&(ze=Di(p.startView,ze),delete p.startView),ze<se?ze=se:ze>J&&(ze=J),ze!==oe&&(w.startView=ze),p.prevArrow){var pi=ft(p.prevArrow);pi.childNodes.length>0&&(w.prevArrow=pi.childNodes),delete p.prevArrow}if(p.nextArrow){var gi=ft(p.nextArrow);gi.childNodes.length>0&&(w.nextArrow=gi.childNodes),delete p.nextArrow}if(p.disableTouchKeyboard!==void 0&&(w.disableTouchKeyboard="ontouchstart"in document&&!!p.disableTouchKeyboard,delete p.disableTouchKeyboard),p.orientation){var ut=p.orientation.toLowerCase().split(/\s+/g);w.orientation={x:ut.find(function(Fe){return Fe==="left"||Fe==="right"})||"auto",y:ut.find(function(Fe){return Fe==="top"||Fe==="bottom"})||"auto"},delete p.orientation}if(p.todayBtnMode!==void 0){switch(p.todayBtnMode){case 0:case 1:w.todayBtnMode=p.todayBtnMode}delete p.todayBtnMode}return Object.keys(p).forEach(function(Fe){p[Fe]!==void 0&&x(et,Fe)&&(w[Fe]=p[Fe])}),w}var $i=ae(`<div class="datepicker hidden">
  <div class="datepicker-picker inline-block rounded-lg bg-white dark:bg-gray-700 shadow-lg p-4">
    <div class="datepicker-header">
      <div class="datepicker-title bg-white dark:bg-gray-700 dark:text-white px-2 py-3 text-center font-semibold"></div>
      <div class="datepicker-controls flex justify-between mb-2">
        <button type="button" class="bg-white dark:bg-gray-700 rounded-lg text-gray-500 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-600 hover:text-gray-900 dark:hover:text-white text-lg p-2.5 focus:outline-none focus:ring-2 focus:ring-gray-200 prev-btn"></button>
        <button type="button" class="text-sm rounded-lg text-gray-900 dark:text-white bg-white dark:bg-gray-700 font-semibold py-2.5 px-5 hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-200 view-switch"></button>
        <button type="button" class="bg-white dark:bg-gray-700 rounded-lg text-gray-500 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-600 hover:text-gray-900 dark:hover:text-white text-lg p-2.5 focus:outline-none focus:ring-2 focus:ring-gray-200 next-btn"></button>
      </div>
    </div>
    <div class="datepicker-main p-1"></div>
    <div class="datepicker-footer">
      <div class="datepicker-controls flex space-x-2 rtl:space-x-reverse mt-2">
        <button type="button" class="%buttonClass% today-btn text-white bg-blue-700 !bg-primary-700 dark:bg-blue-600 dark:!bg-primary-600 hover:bg-blue-800 hover:!bg-primary-800 dark:hover:bg-blue-700 dark:hover:!bg-primary-700 focus:ring-4 focus:ring-blue-300 focus:!ring-primary-300 font-medium rounded-lg text-sm px-5 py-2 text-center w-1/2"></button>
        <button type="button" class="%buttonClass% clear-btn text-gray-900 dark:text-white bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600 focus:ring-4 focus:ring-blue-300 focus:!ring-primary-300 font-medium rounded-lg text-sm px-5 py-2 text-center w-1/2"></button>
      </div>
    </div>
  </div>
</div>`),Hn=ae(`<div class="days">
  <div class="days-of-week grid grid-cols-7 mb-1">`.concat(ie("span",7,{class:"dow block flex-1 leading-9 border-0 rounded-lg cursor-default text-center text-gray-900 font-semibold text-sm"}),`</div>
  <div class="datepicker-grid w-64 grid grid-cols-7">`).concat(ie("span",42,{class:"block flex-1 leading-9 border-0 rounded-lg cursor-default text-center text-gray-900 font-semibold text-sm h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400"}),`</div>
</div>`)),pt=ae(`<div class="calendar-weeks">
  <div class="days-of-week flex"><span class="dow h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400"></span></div>
  <div class="weeks">`.concat(ie("span",6,{class:"week block flex-1 leading-9 border-0 rounded-lg cursor-default text-center text-gray-900 font-semibold text-sm"}),`</div>
</div>`)),hi=function(){function l(m,p){A(this,l),Object.assign(this,p,{picker:m,element:ft('<div class="datepicker-view flex"></div>').firstChild,selected:[]}),this.init(this.picker.datepicker.config)}return y(l,[{key:"init",value:function(p){p.pickLevel!==void 0&&(this.isMinView=this.id===p.pickLevel),this.setOptions(p),this.updateFocus(),this.updateSelection()}},{key:"performBeforeHook",value:function(p,w,D){var R=this.beforeShow(new Date(D));switch(q(R)){case"boolean":R={enabled:R};break;case"string":R={classes:R}}if(R){if(R.enabled===!1&&(p.classList.add("disabled"),z(this.disabled,w)),R.classes){var O,j=R.classes.split(/\s+/);(O=p.classList).add.apply(O,F(j)),j.includes("disabled")&&z(this.disabled,w)}R.content&&Vi(p,R.content)}}}])}(),zn=function(l){function m(p){return A(this,m),k(this,m,[p,{id:0,name:"days",cellClass:"day"}])}return b(m,l),y(m,[{key:"init",value:function(w){var D=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;if(D){var R=ft(Hn).firstChild;this.dow=R.firstChild,this.grid=R.lastChild,this.element.appendChild(R)}d(g(m.prototype),"init",this).call(this,w)}},{key:"setOptions",value:function(w){var D=this,R;if(x(w,"minDate")&&(this.minDate=w.minDate),x(w,"maxDate")&&(this.maxDate=w.maxDate),w.datesDisabled&&(this.datesDisabled=w.datesDisabled),w.daysOfWeekDisabled&&(this.daysOfWeekDisabled=w.daysOfWeekDisabled,R=!0),w.daysOfWeekHighlighted&&(this.daysOfWeekHighlighted=w.daysOfWeekHighlighted),w.todayHighlight!==void 0&&(this.todayHighlight=w.todayHighlight),w.weekStart!==void 0&&(this.weekStart=w.weekStart,this.weekEnd=w.weekEnd,R=!0),w.locale){var O=this.locale=w.locale;this.dayNames=O.daysMin,this.switchLabelFormat=O.titleFormat,R=!0}if(w.beforeShowDay!==void 0&&(this.beforeShow=typeof w.beforeShowDay=="function"?w.beforeShowDay:void 0),w.calendarWeeks!==void 0)if(w.calendarWeeks&&!this.calendarWeeks){var j=ft(pt).firstChild;this.calendarWeeks={element:j,dow:j.firstChild,weeks:j.lastChild},this.element.insertBefore(j,this.element.firstChild)}else this.calendarWeeks&&!w.calendarWeeks&&(this.element.removeChild(this.calendarWeeks.element),this.calendarWeeks=null);w.showDaysOfWeek!==void 0&&(w.showDaysOfWeek?(Si(this.dow),this.calendarWeeks&&Si(this.calendarWeeks.dow)):(Bt(this.dow),this.calendarWeeks&&Bt(this.calendarWeeks.dow))),R&&Array.from(this.dow.children).forEach(function(B,V){var J=(D.weekStart+V)%7;B.textContent=D.dayNames[J],B.className=D.daysOfWeekDisabled.includes(J)?"dow disabled text-center h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400 cursor-not-allowed":"dow text-center h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400"})}},{key:"updateFocus",value:function(){var w=new Date(this.picker.viewDate),D=w.getFullYear(),R=w.getMonth(),O=ye(D,R,1),j=kt(O,this.weekStart,this.weekStart);this.first=O,this.last=ye(D,R+1,0),this.start=j,this.focused=this.picker.viewDate}},{key:"updateSelection",value:function(){var w=this.picker.datepicker,D=w.dates,R=w.rangepicker;this.selected=D,R&&(this.range=R.dates)}},{key:"render",value:function(){var w=this;this.today=this.todayHighlight?re():void 0,this.disabled=F(this.datesDisabled);var D=$t(this.focused,this.switchLabelFormat,this.locale);if(this.picker.setViewSwitchLabel(D),this.picker.setPrevBtnDisabled(this.first<=this.minDate),this.picker.setNextBtnDisabled(this.last>=this.maxDate),this.calendarWeeks){var R=kt(this.first,1,1);Array.from(this.calendarWeeks.weeks.children).forEach(function(O,j){O.textContent=it(xe(R,j))})}Array.from(this.grid.children).forEach(function(O,j){var B=O.classList,V=ne(w.start,j),J=new Date(V),Y=J.getDay();if(O.className="datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ".concat(w.cellClass),O.dataset.date=V,O.textContent=J.getDate(),V<w.first?B.add("prev","text-gray-500","dark:text-white"):V>w.last&&B.add("next","text-gray-500","dark:text-white"),w.today===V&&B.add("today","bg-gray-100","dark:bg-gray-600"),(V<w.minDate||V>w.maxDate||w.disabled.includes(V))&&(B.add("disabled","cursor-not-allowed","text-gray-400","dark:text-gray-500"),B.remove("hover:bg-gray-100","dark:hover:bg-gray-600","text-gray-900","dark:text-white","cursor-pointer")),w.daysOfWeekDisabled.includes(Y)&&(B.add("disabled","cursor-not-allowed","text-gray-400","dark:text-gray-500"),B.remove("hover:bg-gray-100","dark:hover:bg-gray-600","text-gray-900","dark:text-white","cursor-pointer"),z(w.disabled,V)),w.daysOfWeekHighlighted.includes(Y)&&B.add("highlighted"),w.range){var se=I(w.range,2),oe=se[0],ue=se[1];V>oe&&V<ue&&(B.add("range","bg-gray-200","dark:bg-gray-600"),B.remove("rounded-lg","rounded-l-lg","rounded-r-lg")),V===oe&&(B.add("range-start","bg-gray-100","dark:bg-gray-600","rounded-l-lg"),B.remove("rounded-lg","rounded-r-lg")),V===ue&&(B.add("range-end","bg-gray-100","dark:bg-gray-600","rounded-r-lg"),B.remove("rounded-lg","rounded-l-lg"))}w.selected.includes(V)&&(B.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),B.remove("text-gray-900","text-gray-500","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600","dark:bg-gray-600","bg-gray-100","bg-gray-200")),V===w.focused&&B.add("focused"),w.beforeShow&&w.performBeforeHook(O,V,V)})}},{key:"refresh",value:function(){var w=this,D=this.range||[],R=I(D,2),O=R[0],j=R[1];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach(function(B){B.classList.remove("range","range-start","range-end","selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white","focused"),B.classList.add("text-gray-900","rounded-lg","dark:text-white")}),Array.from(this.grid.children).forEach(function(B){var V=Number(B.dataset.date),J=B.classList;J.remove("bg-gray-200","dark:bg-gray-600","rounded-l-lg","rounded-r-lg"),V>O&&V<j&&(J.add("range","bg-gray-200","dark:bg-gray-600"),J.remove("rounded-lg")),V===O&&(J.add("range-start","bg-gray-200","dark:bg-gray-600","rounded-l-lg"),J.remove("rounded-lg")),V===j&&(J.add("range-end","bg-gray-200","dark:bg-gray-600","rounded-r-lg"),J.remove("rounded-lg")),w.selected.includes(V)&&(J.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),J.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600","bg-gray-100","bg-gray-200","dark:bg-gray-600")),V===w.focused&&J.add("focused")})}},{key:"refreshFocus",value:function(){var w=Math.round((this.focused-this.start)/864e5);this.grid.querySelectorAll(".focused").forEach(function(D){D.classList.remove("focused")}),this.grid.children[w].classList.add("focused")}}])}(hi);function qi(l,m){if(!(!l||!l[0]||!l[1])){var p=I(l,2),w=I(p[0],2),D=w[0],R=w[1],O=I(p[1],2),j=O[0],B=O[1];if(!(D>m||j<m))return[D===m?R:-1,j===m?B:12]}}var Jt=function(l){function m(p){return A(this,m),k(this,m,[p,{id:1,name:"months",cellClass:"month"}])}return b(m,l),y(m,[{key:"init",value:function(w){var D=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;D&&(this.grid=this.element,this.element.classList.add("months","datepicker-grid","w-64","grid","grid-cols-4"),this.grid.appendChild(ft(ie("span",12,{"data-month":function(O){return O}})))),d(g(m.prototype),"init",this).call(this,w)}},{key:"setOptions",value:function(w){if(w.locale&&(this.monthNames=w.locale.monthsShort),x(w,"minDate"))if(w.minDate===void 0)this.minYear=this.minMonth=this.minDate=void 0;else{var D=new Date(w.minDate);this.minYear=D.getFullYear(),this.minMonth=D.getMonth(),this.minDate=D.setDate(1)}if(x(w,"maxDate"))if(w.maxDate===void 0)this.maxYear=this.maxMonth=this.maxDate=void 0;else{var R=new Date(w.maxDate);this.maxYear=R.getFullYear(),this.maxMonth=R.getMonth(),this.maxDate=ye(this.maxYear,this.maxMonth+1,0)}w.beforeShowMonth!==void 0&&(this.beforeShow=typeof w.beforeShowMonth=="function"?w.beforeShowMonth:void 0)}},{key:"updateFocus",value:function(){var w=new Date(this.picker.viewDate);this.year=w.getFullYear(),this.focused=w.getMonth()}},{key:"updateSelection",value:function(){var w=this.picker.datepicker,D=w.dates,R=w.rangepicker;this.selected=D.reduce(function(O,j){var B=new Date(j),V=B.getFullYear(),J=B.getMonth();return O[V]===void 0?O[V]=[J]:z(O[V],J),O},{}),R&&R.dates&&(this.range=R.dates.map(function(O){var j=new Date(O);return isNaN(j)?void 0:[j.getFullYear(),j.getMonth()]}))}},{key:"render",value:function(){var w=this;this.disabled=[],this.picker.setViewSwitchLabel(this.year),this.picker.setPrevBtnDisabled(this.year<=this.minYear),this.picker.setNextBtnDisabled(this.year>=this.maxYear);var D=this.selected[this.year]||[],R=this.year<this.minYear||this.year>this.maxYear,O=this.year===this.minYear,j=this.year===this.maxYear,B=qi(this.range,this.year);Array.from(this.grid.children).forEach(function(V,J){var Y=V.classList,se=ye(w.year,J,1);if(V.className="datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ".concat(w.cellClass),w.isMinView&&(V.dataset.date=se),V.textContent=w.monthNames[J],(R||O&&J<w.minMonth||j&&J>w.maxMonth)&&Y.add("disabled"),B){var oe=I(B,2),ue=oe[0],ge=oe[1];J>ue&&J<ge&&Y.add("range"),J===ue&&Y.add("range-start"),J===ge&&Y.add("range-end")}D.includes(J)&&(Y.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),Y.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")),J===w.focused&&Y.add("focused"),w.beforeShow&&w.performBeforeHook(V,J,se)})}},{key:"refresh",value:function(){var w=this,D=this.selected[this.year]||[],R=qi(this.range,this.year)||[],O=I(R,2),j=O[0],B=O[1];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach(function(V){V.classList.remove("range","range-start","range-end","selected","bg-blue-700","!bg-primary-700","dark:bg-blue-600","dark:!bg-primary-700","dark:text-white","text-white","focused"),V.classList.add("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")}),Array.from(this.grid.children).forEach(function(V,J){var Y=V.classList;J>j&&J<B&&Y.add("range"),J===j&&Y.add("range-start"),J===B&&Y.add("range-end"),D.includes(J)&&(Y.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),Y.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")),J===w.focused&&Y.add("focused")})}},{key:"refreshFocus",value:function(){this.grid.querySelectorAll(".focused").forEach(function(w){w.classList.remove("focused")}),this.grid.children[this.focused].classList.add("focused")}}])}(hi);function Vn(l){return F(l).reduce(function(m,p,w){return m+=w?p:p.toUpperCase()},"")}var St=function(l){function m(p,w){return A(this,m),k(this,m,[p,w])}return b(m,l),y(m,[{key:"init",value:function(w){var D=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;D&&(this.navStep=this.step*10,this.beforeShowOption="beforeShow".concat(Vn(this.cellClass)),this.grid=this.element,this.element.classList.add(this.name,"datepicker-grid","w-64","grid","grid-cols-4"),this.grid.appendChild(ft(ie("span",12)))),d(g(m.prototype),"init",this).call(this,w)}},{key:"setOptions",value:function(w){if(x(w,"minDate")&&(w.minDate===void 0?this.minYear=this.minDate=void 0:(this.minYear=st(w.minDate,this.step),this.minDate=ye(this.minYear,0,1))),x(w,"maxDate")&&(w.maxDate===void 0?this.maxYear=this.maxDate=void 0:(this.maxYear=st(w.maxDate,this.step),this.maxDate=ye(this.maxYear,11,31))),w[this.beforeShowOption]!==void 0){var D=w[this.beforeShowOption];this.beforeShow=typeof D=="function"?D:void 0}}},{key:"updateFocus",value:function(){var w=new Date(this.picker.viewDate),D=st(w,this.navStep),R=D+9*this.step;this.first=D,this.last=R,this.start=D-this.step,this.focused=st(w,this.step)}},{key:"updateSelection",value:function(){var w=this,D=this.picker.datepicker,R=D.dates,O=D.rangepicker;this.selected=R.reduce(function(j,B){return z(j,st(B,w.step))},[]),O&&O.dates&&(this.range=O.dates.map(function(j){if(j!==void 0)return st(j,w.step)}))}},{key:"render",value:function(){var w=this;this.disabled=[],this.picker.setViewSwitchLabel("".concat(this.first,"-").concat(this.last)),this.picker.setPrevBtnDisabled(this.first<=this.minYear),this.picker.setNextBtnDisabled(this.last>=this.maxYear),Array.from(this.grid.children).forEach(function(D,R){var O=D.classList,j=w.start+R*w.step,B=ye(j,0,1);if(D.className="datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ".concat(w.cellClass),w.isMinView&&(D.dataset.date=B),D.textContent=D.dataset.year=j,R===0?O.add("prev"):R===11&&O.add("next"),(j<w.minYear||j>w.maxYear)&&O.add("disabled"),w.range){var V=I(w.range,2),J=V[0],Y=V[1];j>J&&j<Y&&O.add("range"),j===J&&O.add("range-start"),j===Y&&O.add("range-end")}w.selected.includes(j)&&(O.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),O.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")),j===w.focused&&O.add("focused"),w.beforeShow&&w.performBeforeHook(D,j,B)})}},{key:"refresh",value:function(){var w=this,D=this.range||[],R=I(D,2),O=R[0],j=R[1];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach(function(B){B.classList.remove("range","range-start","range-end","selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark!bg-primary-600","dark:text-white","focused")}),Array.from(this.grid.children).forEach(function(B){var V=Number(B.textContent),J=B.classList;V>O&&V<j&&J.add("range"),V===O&&J.add("range-start"),V===j&&J.add("range-end"),w.selected.includes(V)&&(J.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),J.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")),V===w.focused&&J.add("focused")})}},{key:"refreshFocus",value:function(){var w=Math.round((this.focused-this.start)/this.step);this.grid.querySelectorAll(".focused").forEach(function(D){D.classList.remove("focused")}),this.grid.children[w].classList.add("focused")}}])}(hi);function si(l,m){var p={date:l.getDate(),viewDate:new Date(l.picker.viewDate),viewId:l.picker.currentView.id,datepicker:l};l.element.dispatchEvent(new CustomEvent(m,{detail:p}))}function fi(l,m){var p=l.config,w=p.minDate,D=p.maxDate,R=l.picker,O=R.currentView,j=R.viewDate,B;switch(O.id){case 0:B=je(j,m);break;case 1:B=He(j,m);break;default:B=He(j,m*O.navStep)}B=X(B,w,D),l.picker.changeFocus(B).render()}function Ki(l){var m=l.picker.currentView.id;m!==l.config.maxView&&l.picker.changeView(m+1).render()}function Ji(l){l.config.updateOnBlur?l.update({autohide:!0}):(l.refresh("input"),l.hide())}function Un(l,m){var p=l.picker,w=new Date(p.viewDate),D=p.currentView.id,R=D===1?je(w,m-w.getMonth()):He(w,m-w.getFullYear());p.changeFocus(R).changeView(D-1).render()}function M(l){var m=l.picker,p=re();if(l.config.todayBtnMode===1){if(l.config.autohide){l.setDate(p);return}l.setDate(p,{render:!1}),m.update()}m.viewDate!==p&&m.changeFocus(p),m.changeView(0).render()}function te(l){l.setDate({clear:!0})}function Q(l){Ki(l)}function pe(l){fi(l,-1)}function Ee(l){fi(l,1)}function he(l,m){var p=ci(m,".datepicker-cell");if(!(!p||p.classList.contains("disabled"))){var w=l.picker.currentView,D=w.id,R=w.isMinView;R?l.setDate(Number(p.dataset.date)):D===1?Un(l,Number(p.dataset.month)):Un(l,Number(p.dataset.year))}}function We(l){!l.inline&&!l.config.disableTouchKeyboard&&l.inputField.focus()}function Dt(l,m){if(m.title!==void 0&&(m.title?(l.controls.title.textContent=m.title,Si(l.controls.title)):(l.controls.title.textContent="",Bt(l.controls.title))),m.prevArrow){var p=l.controls.prevBtn;Ct(p),m.prevArrow.forEach(function(j){p.appendChild(j.cloneNode(!0))})}if(m.nextArrow){var w=l.controls.nextBtn;Ct(w),m.nextArrow.forEach(function(j){w.appendChild(j.cloneNode(!0))})}if(m.locale&&(l.controls.todayBtn.textContent=m.locale.today,l.controls.clearBtn.textContent=m.locale.clear),m.todayBtn!==void 0&&(m.todayBtn?Si(l.controls.todayBtn):Bt(l.controls.todayBtn)),x(m,"minDate")||x(m,"maxDate")){var D=l.datepicker.config,R=D.minDate,O=D.maxDate;l.controls.todayBtn.disabled=!ee(re(),R,O)}m.clearBtn!==void 0&&(m.clearBtn?Si(l.controls.clearBtn):Bt(l.controls.clearBtn))}function ot(l){var m=l.dates,p=l.config,w=m.length>0?U(m):p.defaultViewDate;return X(w,p.minDate,p.maxDate)}function Ye(l,m){var p=new Date(l.viewDate),w=new Date(m),D=l.currentView,R=D.id,O=D.year,j=D.first,B=D.last,V=w.getFullYear();switch(l.viewDate=m,V!==p.getFullYear()&&si(l.datepicker,"changeYear"),w.getMonth()!==p.getMonth()&&si(l.datepicker,"changeMonth"),R){case 0:return m<j||m>B;case 1:return V!==O;default:return V<j||V>B}}function Gi(l){return window.getComputedStyle(l).direction}var Wn=function(){function l(m){A(this,l),this.datepicker=m;var p=$i.replace(/%buttonClass%/g,m.config.buttonClass),w=this.element=ft(p).firstChild,D=I(w.firstChild.children,3),R=D[0],O=D[1],j=D[2],B=R.firstElementChild,V=I(R.lastElementChild.children,3),J=V[0],Y=V[1],se=V[2],oe=I(j.firstChild.children,2),ue=oe[0],ge=oe[1],_e={title:B,prevBtn:J,viewSwitch:Y,nextBtn:se,todayBtn:ue,clearBtn:ge};this.main=O,this.controls=_e;var Le=m.inline?"inline":"dropdown";w.classList.add("datepicker-".concat(Le)),Le==="dropdown"&&w.classList.add("dropdown","absolute","top-0","left-0","z-50","pt-2"),Dt(this,m.config),this.viewDate=ot(m),Ci(m,[[w,"click",We.bind(null,m),{capture:!0}],[O,"click",he.bind(null,m)],[_e.viewSwitch,"click",Q.bind(null,m)],[_e.prevBtn,"click",pe.bind(null,m)],[_e.nextBtn,"click",Ee.bind(null,m)],[_e.todayBtn,"click",M.bind(null,m)],[_e.clearBtn,"click",te.bind(null,m)]]),this.views=[new zn(this),new Jt(this),new St(this,{id:2,name:"years",cellClass:"year",step:1}),new St(this,{id:3,name:"decades",cellClass:"decade",step:10})],this.currentView=this.views[m.config.startView],this.currentView.render(),this.main.appendChild(this.currentView.element),m.config.container.appendChild(this.element)}return y(l,[{key:"setOptions",value:function(p){Dt(this,p),this.views.forEach(function(w){w.init(p,!1)}),this.currentView.render()}},{key:"detach",value:function(){this.datepicker.config.container.removeChild(this.element)}},{key:"show",value:function(){if(!this.active){this.element.classList.add("active","block"),this.element.classList.remove("hidden"),this.active=!0;var p=this.datepicker;if(!p.inline){var w=Gi(p.inputField);w!==Gi(p.config.container)?this.element.dir=w:this.element.dir&&this.element.removeAttribute("dir"),this.place(),p.config.disableTouchKeyboard&&p.inputField.blur()}si(p,"show")}}},{key:"hide",value:function(){this.active&&(this.datepicker.exitEditMode(),this.element.classList.remove("active","block"),this.element.classList.add("active","block","hidden"),this.active=!1,si(this.datepicker,"hide"))}},{key:"place",value:function(){var p=this.element,w=p.classList,D=p.style,R=this.datepicker,O=R.config,j=R.inputField,B=O.container,V=this.element.getBoundingClientRect(),J=V.width,Y=V.height,se=B.getBoundingClientRect(),oe=se.left,ue=se.top,ge=se.width,_e=j.getBoundingClientRect(),Le=_e.left,ke=_e.top,De=_e.width,ve=_e.height,Te=O.orientation,Re=Te.x,Oe=Te.y,Pe,Ce,Me;B===document.body?(Pe=window.scrollY,Ce=Le+window.scrollX,Me=ke+Pe):(Pe=B.scrollTop,Ce=Le-oe,Me=ke-ue+Pe),Re==="auto"&&(Ce<0?(Re="left",Ce=10):Ce+J>ge?Re="right":Re=Gi(j)==="rtl"?"right":"left"),Re==="right"&&(Ce-=J-De),Oe==="auto"&&(Oe=Me-Y<Pe?"bottom":"top"),Oe==="top"?Me-=Y:Me+=ve,w.remove("datepicker-orient-top","datepicker-orient-bottom","datepicker-orient-right","datepicker-orient-left"),w.add("datepicker-orient-".concat(Oe),"datepicker-orient-".concat(Re)),D.top=Me&&"".concat(Me,"px"),D.left=Ce&&"".concat(Ce,"px")}},{key:"setViewSwitchLabel",value:function(p){this.controls.viewSwitch.textContent=p}},{key:"setPrevBtnDisabled",value:function(p){this.controls.prevBtn.disabled=p}},{key:"setNextBtnDisabled",value:function(p){this.controls.nextBtn.disabled=p}},{key:"changeView",value:function(p){var w=this.currentView,D=this.views[p];return D.id!==w.id&&(this.currentView=D,this._renderMethod="render",si(this.datepicker,"changeView"),this.main.replaceChild(D.element,w.element)),this}},{key:"changeFocus",value:function(p){return this._renderMethod=Ye(this,p)?"render":"refreshFocus",this.views.forEach(function(w){w.updateFocus()}),this}},{key:"update",value:function(){var p=ot(this.datepicker);return this._renderMethod=Ye(this,p)?"render":"refresh",this.views.forEach(function(w){w.updateFocus(),w.updateSelection()}),this}},{key:"render",value:function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0,w=p&&this._renderMethod||"render";delete this._renderMethod,this.currentView[w]()}}])}();function ls(l,m,p,w,D,R){if(ee(l,D,R)){if(w(l)){var O=m(l,p);return ls(O,m,p,w,D,R)}return l}}function $n(l,m,p,w){var D=l.picker,R=D.currentView,O=R.step||1,j=D.viewDate,B,V;switch(R.id){case 0:w?j=ne(j,p*7):m.ctrlKey||m.metaKey?j=He(j,p):j=ne(j,p),B=ne,V=function(Y){return R.disabled.includes(Y)};break;case 1:j=je(j,w?p*4:p),B=je,V=function(Y){var se=new Date(Y),oe=R.year,ue=R.disabled;return se.getFullYear()===oe&&ue.includes(se.getMonth())};break;default:j=He(j,p*(w?4:1)*O),B=He,V=function(Y){return R.disabled.includes(st(Y,O))}}j=ls(j,B,p<0?-O:O,V,R.minDate,R.maxDate),j!==void 0&&D.changeFocus(j).render()}function Ia(l,m){if(m.key==="Tab"){Ji(l);return}var p=l.picker,w=p.currentView,D=w.id,R=w.isMinView;if(p.active)if(l.editMode)switch(m.key){case"Escape":p.hide();break;case"Enter":l.exitEditMode({update:!0,autohide:l.config.autohide});break;default:return}else switch(m.key){case"Escape":p.hide();break;case"ArrowLeft":if(m.ctrlKey||m.metaKey)fi(l,-1);else if(m.shiftKey){l.enterEditMode();return}else $n(l,m,-1,!1);break;case"ArrowRight":if(m.ctrlKey||m.metaKey)fi(l,1);else if(m.shiftKey){l.enterEditMode();return}else $n(l,m,1,!1);break;case"ArrowUp":if(m.ctrlKey||m.metaKey)Ki(l);else if(m.shiftKey){l.enterEditMode();return}else $n(l,m,-1,!0);break;case"ArrowDown":if(m.shiftKey&&!m.ctrlKey&&!m.metaKey){l.enterEditMode();return}$n(l,m,1,!0);break;case"Enter":R?l.setDate(p.viewDate):p.changeView(D-1).render();break;case"Backspace":case"Delete":l.enterEditMode();return;default:m.key.length===1&&!m.ctrlKey&&!m.metaKey&&l.enterEditMode();return}else switch(m.key){case"ArrowDown":case"Escape":p.show();break;case"Enter":l.update();break;default:return}m.preventDefault(),m.stopPropagation()}function Oa(l){l.config.showOnFocus&&!l._showing&&l.show()}function Ma(l,m){var p=m.target;(l.picker.active||l.config.showOnClick)&&(p._active=p===document.activeElement,p._clicking=setTimeout(function(){delete p._active,delete p._clicking},2e3))}function xu(l,m){var p=m.target;p._clicking&&(clearTimeout(p._clicking),delete p._clicking,p._active&&l.enterEditMode(),delete p._active,l.config.showOnClick&&l.show())}function Lu(l,m){m.clipboardData.types.includes("text/plain")&&l.enterEditMode()}function ds(l,m){var p=l.element;if(p===document.activeElement){var w=l.picker.element;ci(m,function(D){return D===p||D===w})||Ji(l)}}function gr(l,m){return l.map(function(p){return $t(p,m.format,m.locale)}).join(m.dateDelimiter)}function gn(l,m){var p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1,w=l.config,D=l.dates,R=l.rangepicker;if(m.length===0)return p?[]:void 0;var O=R&&l===R.datepickers[1],j=m.reduce(function(B,V){var J=ei(V,w.format,w.locale);if(J===void 0)return B;if(w.pickLevel>0){var Y=new Date(J);w.pickLevel===1?J=O?Y.setMonth(Y.getMonth()+1,0):Y.setDate(1):J=O?Y.setFullYear(Y.getFullYear()+1,0,0):Y.setMonth(0,1)}return ee(J,w.minDate,w.maxDate)&&!B.includes(J)&&!w.datesDisabled.includes(J)&&!w.daysOfWeekDisabled.includes(new Date(J).getDay())&&B.push(J),B},[]);if(j.length!==0)return w.multidate&&!p&&(j=j.reduce(function(B,V){return D.includes(V)||B.push(V),B},D.filter(function(B){return!j.includes(B)}))),w.maxNumberOfDates&&j.length>w.maxNumberOfDates?j.slice(w.maxNumberOfDates*-1):j}function qn(l){var m=arguments.length>1&&arguments[1]!==void 0?arguments[1]:3,p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0,w=l.config,D=l.picker,R=l.inputField;if(m&2){var O=D.active?w.pickLevel:w.startView;D.update().changeView(O).render(p)}m&1&&R&&(R.value=gr(l.dates,w))}function cs(l,m,p){var w=p.clear,D=p.render,R=p.autohide;D===void 0&&(D=!0),D?R===void 0&&(R=l.config.autohide):R=!1;var O=gn(l,m,w);O&&(O.toString()!==l.dates.toString()?(l.dates=O,qn(l,D?3:1),si(l,"changeDate")):qn(l,1),R&&l.hide())}var hs=function(){function l(m){var p=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},w=arguments.length>2&&arguments[2]!==void 0?arguments[2]:void 0;A(this,l),m.datepicker=this,this.element=m;var D=this.config=Object.assign({buttonClass:p.buttonClass&&String(p.buttonClass)||"button",container:document.body,defaultViewDate:re(),maxDate:void 0,minDate:void 0},Ft(et,this));this._options=p,Object.assign(D,Ft(p,this));var R=this.inline=m.tagName!=="INPUT",O,j;if(R)D.container=m,j=$(m.dataset.date,D.dateDelimiter),delete m.dataset.date;else{var B=p.container?document.querySelector(p.container):null;B&&(D.container=B),O=this.inputField=m,O.classList.add("datepicker-input"),j=$(O.value,D.dateDelimiter)}if(w){var V=w.inputs.indexOf(O),J=w.datepickers;if(V<0||V>1||!Array.isArray(J))throw Error("Invalid rangepicker object.");J[V]=this,Object.defineProperty(this,"rangepicker",{get:function(){return w}})}this.dates=[];var Y=gn(this,j);Y&&Y.length>0&&(this.dates=Y),O&&(O.value=gr(this.dates,D));var se=this.picker=new Wn(this);if(R)this.show();else{var oe=ds.bind(null,this),ue=[[O,"keydown",Ia.bind(null,this)],[O,"focus",Oa.bind(null,this)],[O,"mousedown",Ma.bind(null,this)],[O,"click",xu.bind(null,this)],[O,"paste",Lu.bind(null,this)],[document,"mousedown",oe],[document,"touchstart",oe],[window,"resize",se.place.bind(se)]];Ci(this,ue)}}return y(l,[{key:"active",get:function(){return!!(this.picker&&this.picker.active)}},{key:"pickerElement",get:function(){return this.picker?this.picker.element:void 0}},{key:"setOptions",value:function(p){var w=this.picker,D=Ft(p,this);Object.assign(this._options,p),Object.assign(this.config,D),w.setOptions(D),qn(this,3)}},{key:"show",value:function(){if(this.inputField){if(this.inputField.disabled)return;this.inputField!==document.activeElement&&(this._showing=!0,this.inputField.focus(),delete this._showing)}this.picker.show()}},{key:"hide",value:function(){this.inline||(this.picker.hide(),this.picker.update().changeView(this.config.startView).render())}},{key:"destroy",value:function(){return this.hide(),qt(this),this.picker.detach(),this.inline||this.inputField.classList.remove("datepicker-input"),delete this.element.datepicker,this}},{key:"getDate",value:function(){var p=this,w=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0,D=w?function(R){return $t(R,w,p.config.locale)}:function(R){return new Date(R)};if(this.config.multidate)return this.dates.map(D);if(this.dates.length>0)return D(this.dates[0])}},{key:"setDate",value:function(){for(var p=arguments.length,w=new Array(p),D=0;D<p;D++)w[D]=arguments[D];var R=[].concat(w),O={},j=U(w);q(j)==="object"&&!Array.isArray(j)&&!(j instanceof Date)&&j&&Object.assign(O,R.pop());var B=Array.isArray(R[0])?R[0]:R;cs(this,B,O)}},{key:"update",value:function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0;if(!this.inline){var w={clear:!0,autohide:!!(p&&p.autohide)},D=$(this.inputField.value,this.config.dateDelimiter);cs(this,D,w)}}},{key:"refresh",value:function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0,w=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;p&&typeof p!="string"&&(w=p,p=void 0);var D;p==="picker"?D=2:p==="input"?D=1:D=3,qn(this,D,!w)}},{key:"enterEditMode",value:function(){this.inline||!this.picker.active||this.editMode||(this.editMode=!0,this.inputField.classList.add("in-edit","border-blue-700","!border-primary-700"))}},{key:"exitEditMode",value:function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0;if(!(this.inline||!this.editMode)){var w=Object.assign({update:!1},p);delete this.editMode,this.inputField.classList.remove("in-edit","border-blue-700","!border-primary-700"),w.update&&this.update(w)}}}],[{key:"formatDate",value:function(p,w,D){return $t(p,w,D&&Kt[D]||Kt.en)}},{key:"parseDate",value:function(p,w,D){return ei(p,w,D&&Kt[D]||Kt.en)}},{key:"locales",get:function(){return Kt}}])}();function fs(l){var m=Object.assign({},l);return delete m.inputs,delete m.allowOneSidedRange,delete m.maxNumberOfDates,m}function ps(l,m,p,w){Ci(l,[[p,"changeDate",m]]),new hs(p,w,l)}function S(l,m){if(!l._updating){l._updating=!0;var p=m.target;if(p.datepicker!==void 0){var w=l.datepickers,D={render:!1},R=l.inputs.indexOf(p),O=R===0?1:0,j=w[R].dates[0],B=w[O].dates[0];j!==void 0&&B!==void 0?R===0&&j>B?(w[0].setDate(B,D),w[1].setDate(j,D)):R===1&&j<B&&(w[0].setDate(j,D),w[1].setDate(B,D)):l.allowOneSidedRange||(j!==void 0||B!==void 0)&&(D.clear=!0,w[O].setDate(w[R].dates,D)),w[0].picker.update().render(),w[1].picker.update().render(),delete l._updating}}}var T=function(){function l(m){var p=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};A(this,l);var w=Array.isArray(p.inputs)?p.inputs:Array.from(m.querySelectorAll("input"));if(!(w.length<2)){m.rangepicker=this,this.element=m,this.inputs=w.slice(0,2),this.allowOneSidedRange=!!p.allowOneSidedRange;var D=S.bind(null,this),R=fs(p),O=[];Object.defineProperty(this,"datepickers",{get:function(){return O}}),ps(this,D,this.inputs[0],R),ps(this,D,this.inputs[1],R),Object.freeze(O),O[0].dates.length>0?S(this,{target:this.inputs[0]}):O[1].dates.length>0&&S(this,{target:this.inputs[1]})}}return y(l,[{key:"dates",get:function(){return this.datepickers.length===2?[this.datepickers[0].dates[0],this.datepickers[1].dates[0]]:void 0}},{key:"setOptions",value:function(p){this.allowOneSidedRange=!!p.allowOneSidedRange;var w=fs(p);this.datepickers[0].setOptions(w),this.datepickers[1].setOptions(w)}},{key:"destroy",value:function(){this.datepickers[0].destroy(),this.datepickers[1].destroy(),qt(this),delete this.element.rangepicker}},{key:"getDates",value:function(){var p=this,w=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0,D=w?function(R){return $t(R,w,p.datepickers[0].config.locale)}:function(R){return new Date(R)};return this.dates.map(function(R){return R===void 0?R:D(R)})}},{key:"setDates",value:function(p,w){var D=I(this.datepickers,2),R=D[0],O=D[1],j=this.dates;this._updating=!0,R.setDate(p),O.setDate(w),delete this._updating,O.dates[0]!==j[1]?S(this,{target:this.inputs[1]}):R.dates[0]!==j[0]&&S(this,{target:this.inputs[0]})}}])}();s.DateRangePicker=T,s.Datepicker=hs},902:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initAccordions=void 0;var c=a(423),v={alwaysOpen:!1,activeClasses:"bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white",inactiveClasses:"text-gray-500 dark:text-gray-400",onOpen:function(){},onClose:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=[]),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._accordionEl=d,this._items=g,this._options=u(u({},v),b),this._initialized=!1,this.init(),c.default.addInstance("Accordion",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._items.length&&!this._initialized&&(this._items.forEach(function(g){g.active&&d.open(g.id);var b=function(){d.toggle(g.id)};g.triggerEl.addEventListener("click",b),g.clickHandler=b}),this._initialized=!0)},y.prototype.destroy=function(){this._items.length&&this._initialized&&(this._items.forEach(function(d){d.triggerEl.removeEventListener("click",d.clickHandler),delete d.clickHandler}),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Accordion",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getItem=function(d){return this._items.filter(function(g){return g.id===d})[0]},y.prototype.open=function(d){var g,b,E=this,P=this.getItem(d);this._options.alwaysOpen||this._items.map(function(o){var h,f;o!==P&&((h=o.triggerEl.classList).remove.apply(h,E._options.activeClasses.split(" ")),(f=o.triggerEl.classList).add.apply(f,E._options.inactiveClasses.split(" ")),o.targetEl.classList.add("hidden"),o.triggerEl.setAttribute("aria-expanded","false"),o.active=!1,o.iconEl&&o.iconEl.classList.add("rotate-180"))}),(g=P.triggerEl.classList).add.apply(g,this._options.activeClasses.split(" ")),(b=P.triggerEl.classList).remove.apply(b,this._options.inactiveClasses.split(" ")),P.triggerEl.setAttribute("aria-expanded","true"),P.targetEl.classList.remove("hidden"),P.active=!0,P.iconEl&&P.iconEl.classList.remove("rotate-180"),this._options.onOpen(this,P)},y.prototype.toggle=function(d){var g=this.getItem(d);g.active?this.close(d):this.open(d),this._options.onToggle(this,g)},y.prototype.close=function(d){var g,b,E=this.getItem(d);(g=E.triggerEl.classList).remove.apply(g,this._options.activeClasses.split(" ")),(b=E.triggerEl.classList).add.apply(b,this._options.inactiveClasses.split(" ")),E.targetEl.classList.add("hidden"),E.triggerEl.setAttribute("aria-expanded","false"),E.active=!1,E.iconEl&&E.iconEl.classList.add("rotate-180"),this._options.onClose(this,E)},y.prototype.updateOnOpen=function(d){this._options.onOpen=d},y.prototype.updateOnClose=function(d){this._options.onClose=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-accordion]").forEach(function(y){var d=y.getAttribute("data-accordion"),g=y.getAttribute("data-active-classes"),b=y.getAttribute("data-inactive-classes"),E=[];y.querySelectorAll("[data-accordion-target]").forEach(function(P){if(P.closest("[data-accordion]")===y){var o={id:P.getAttribute("data-accordion-target"),triggerEl:P,targetEl:document.querySelector(P.getAttribute("data-accordion-target")),iconEl:P.querySelector("[data-accordion-icon]"),active:P.getAttribute("aria-expanded")==="true"};E.push(o)}}),new A(y,E,{alwaysOpen:d==="open",activeClasses:g||v.activeClasses,inactiveClasses:b||v.inactiveClasses})})}s.initAccordions=N,typeof window<"u"&&(window.Accordion=A,window.initAccordions=N),s.default=A},33:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initCarousels=void 0;var c=a(423),v={defaultPosition:0,indicators:{items:[],activeClasses:"bg-white dark:bg-gray-800",inactiveClasses:"bg-white/50 dark:bg-gray-800/50 hover:bg-white dark:hover:bg-gray-800"},interval:3e3,onNext:function(){},onPrev:function(){},onChange:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=[]),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._carouselEl=d,this._items=g,this._options=u(u(u({},v),b),{indicators:u(u({},v.indicators),b.indicators)}),this._activeItem=this.getItem(this._options.defaultPosition),this._indicators=this._options.indicators.items,this._intervalDuration=this._options.interval,this._intervalInstance=null,this._initialized=!1,this.init(),c.default.addInstance("Carousel",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._items.length&&!this._initialized&&(this._items.map(function(g){g.el.classList.add("absolute","inset-0","transition-transform","transform")}),this.getActiveItem()?this.slideTo(this.getActiveItem().position):this.slideTo(0),this._indicators.map(function(g,b){g.el.addEventListener("click",function(){d.slideTo(b)})}),this._initialized=!0)},y.prototype.destroy=function(){this._initialized&&(this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Carousel",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getItem=function(d){return this._items[d]},y.prototype.slideTo=function(d){var g=this._items[d],b={left:g.position===0?this._items[this._items.length-1]:this._items[g.position-1],middle:g,right:g.position===this._items.length-1?this._items[0]:this._items[g.position+1]};this._rotate(b),this._setActiveItem(g),this._intervalInstance&&(this.pause(),this.cycle()),this._options.onChange(this)},y.prototype.next=function(){var d=this.getActiveItem(),g=null;d.position===this._items.length-1?g=this._items[0]:g=this._items[d.position+1],this.slideTo(g.position),this._options.onNext(this)},y.prototype.prev=function(){var d=this.getActiveItem(),g=null;d.position===0?g=this._items[this._items.length-1]:g=this._items[d.position-1],this.slideTo(g.position),this._options.onPrev(this)},y.prototype._rotate=function(d){if(this._items.map(function(g){g.el.classList.add("hidden")}),this._items.length===1){d.middle.el.classList.remove("-translate-x-full","translate-x-full","translate-x-0","hidden","z-10"),d.middle.el.classList.add("translate-x-0","z-20");return}d.left.el.classList.remove("-translate-x-full","translate-x-full","translate-x-0","hidden","z-20"),d.left.el.classList.add("-translate-x-full","z-10"),d.middle.el.classList.remove("-translate-x-full","translate-x-full","translate-x-0","hidden","z-10"),d.middle.el.classList.add("translate-x-0","z-30"),d.right.el.classList.remove("-translate-x-full","translate-x-full","translate-x-0","hidden","z-30"),d.right.el.classList.add("translate-x-full","z-20")},y.prototype.cycle=function(){var d=this;typeof window<"u"&&(this._intervalInstance=window.setInterval(function(){d.next()},this._intervalDuration))},y.prototype.pause=function(){clearInterval(this._intervalInstance)},y.prototype.getActiveItem=function(){return this._activeItem},y.prototype._setActiveItem=function(d){var g,b,E=this;this._activeItem=d;var P=d.position;this._indicators.length&&(this._indicators.map(function(o){var h,f;o.el.setAttribute("aria-current","false"),(h=o.el.classList).remove.apply(h,E._options.indicators.activeClasses.split(" ")),(f=o.el.classList).add.apply(f,E._options.indicators.inactiveClasses.split(" "))}),(g=this._indicators[P].el.classList).add.apply(g,this._options.indicators.activeClasses.split(" ")),(b=this._indicators[P].el.classList).remove.apply(b,this._options.indicators.inactiveClasses.split(" ")),this._indicators[P].el.setAttribute("aria-current","true"))},y.prototype.updateOnNext=function(d){this._options.onNext=d},y.prototype.updateOnPrev=function(d){this._options.onPrev=d},y.prototype.updateOnChange=function(d){this._options.onChange=d},y}();function N(){document.querySelectorAll("[data-carousel]").forEach(function(y){var d=y.getAttribute("data-carousel-interval"),g=y.getAttribute("data-carousel")==="slide",b=[],E=0;y.querySelectorAll("[data-carousel-item]").length&&Array.from(y.querySelectorAll("[data-carousel-item]")).map(function(_,C){b.push({position:C,el:_}),_.getAttribute("data-carousel-item")==="active"&&(E=C)});var P=[];y.querySelectorAll("[data-carousel-slide-to]").length&&Array.from(y.querySelectorAll("[data-carousel-slide-to]")).map(function(_){P.push({position:parseInt(_.getAttribute("data-carousel-slide-to")),el:_})});var o=new A(y,b,{defaultPosition:E,indicators:{items:P},interval:d||v.interval});g&&o.cycle();var h=y.querySelector("[data-carousel-next]"),f=y.querySelector("[data-carousel-prev]");h&&h.addEventListener("click",function(){o.next()}),f&&f.addEventListener("click",function(){o.prev()})})}s.initCarousels=N,typeof window<"u"&&(window.Carousel=A,window.initCarousels=N),s.default=A},673:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initCopyClipboards=void 0;var c=a(423),v={htmlEntities:!1,contentType:"input",onCopy:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:g.id,this._triggerEl=d,this._targetEl=g,this._options=u(u({},v),b),this._initialized=!1,this.init(),c.default.addInstance("CopyClipboard",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._targetEl&&this._triggerEl&&!this._initialized&&(this._triggerElClickHandler=function(){d.copy()},this._triggerEl&&this._triggerEl.addEventListener("click",this._triggerElClickHandler),this._initialized=!0)},y.prototype.destroy=function(){this._triggerEl&&this._targetEl&&this._initialized&&(this._triggerEl&&this._triggerEl.removeEventListener("click",this._triggerElClickHandler),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("CopyClipboard",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getTargetValue=function(){if(this._options.contentType==="input")return this._targetEl.value;if(this._options.contentType==="innerHTML")return this._targetEl.innerHTML;if(this._options.contentType==="textContent")return this._targetEl.textContent.replace(/\s+/g," ").trim()},y.prototype.copy=function(){var d=this.getTargetValue();this._options.htmlEntities&&(d=this.decodeHTML(d));var g=document.createElement("textarea");return g.value=d,document.body.appendChild(g),g.select(),document.execCommand("copy"),document.body.removeChild(g),this._options.onCopy(this),d},y.prototype.decodeHTML=function(d){var g=document.createElement("textarea");return g.innerHTML=d,g.textContent},y.prototype.updateOnCopyCallback=function(d){this._options.onCopy=d},y}();function N(){document.querySelectorAll("[data-copy-to-clipboard-target]").forEach(function(y){var d=y.getAttribute("data-copy-to-clipboard-target"),g=document.getElementById(d),b=y.getAttribute("data-copy-to-clipboard-content-type"),E=y.getAttribute("data-copy-to-clipboard-html-entities");g?c.default.instanceExists("CopyClipboard",g.getAttribute("id"))||new A(y,g,{htmlEntities:E&&E==="true"?!0:v.htmlEntities,contentType:b||v.contentType}):console.error('The target element with id "'.concat(d,'" does not exist. Please check the data-copy-to-clipboard-target attribute.'))})}s.initCopyClipboards=N,typeof window<"u"&&(window.CopyClipboard=A,window.initClipboards=N),s.default=A},922:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initCollapses=void 0;var c=a(423),v={onCollapse:function(){},onExpand:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._targetEl=d,this._triggerEl=g,this._options=u(u({},v),b),this._visible=!1,this._initialized=!1,this.init(),c.default.addInstance("Collapse",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._triggerEl&&this._targetEl&&!this._initialized&&(this._triggerEl.hasAttribute("aria-expanded")?this._visible=this._triggerEl.getAttribute("aria-expanded")==="true":this._visible=!this._targetEl.classList.contains("hidden"),this._clickHandler=function(){d.toggle()},this._triggerEl.addEventListener("click",this._clickHandler),this._initialized=!0)},y.prototype.destroy=function(){this._triggerEl&&this._initialized&&(this._triggerEl.removeEventListener("click",this._clickHandler),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Collapse",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.collapse=function(){this._targetEl.classList.add("hidden"),this._triggerEl&&this._triggerEl.setAttribute("aria-expanded","false"),this._visible=!1,this._options.onCollapse(this)},y.prototype.expand=function(){this._targetEl.classList.remove("hidden"),this._triggerEl&&this._triggerEl.setAttribute("aria-expanded","true"),this._visible=!0,this._options.onExpand(this)},y.prototype.toggle=function(){this._visible?this.collapse():this.expand(),this._options.onToggle(this)},y.prototype.updateOnCollapse=function(d){this._options.onCollapse=d},y.prototype.updateOnExpand=function(d){this._options.onExpand=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-collapse-toggle]").forEach(function(y){var d=y.getAttribute("data-collapse-toggle"),g=document.getElementById(d);g?c.default.instanceExists("Collapse",g.getAttribute("id"))?new A(g,y,{},{id:g.getAttribute("id")+"_"+c.default._generateRandomId()}):new A(g,y):console.error('The target element with id "'.concat(d,'" does not exist. Please check the data-collapse-toggle attribute.'))})}s.initCollapses=N,typeof window<"u"&&(window.Collapse=A,window.initCollapses=N),s.default=A},132:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(d){for(var g,b=1,E=arguments.length;b<E;b++){g=arguments[b];for(var P in g)Object.prototype.hasOwnProperty.call(g,P)&&(d[P]=g[P])}return d},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initDatepickers=void 0;var c=a(423),v=a(554),k={defaultDatepickerId:null,autohide:!1,format:"mm/dd/yyyy",maxDate:null,minDate:null,orientation:"bottom",buttons:!1,autoSelectToday:0,title:null,language:"en",rangePicker:!1,onShow:function(){},onHide:function(){}},A={id:null,override:!0},N=function(){function d(g,b,E){g===void 0&&(g=null),b===void 0&&(b=k),E===void 0&&(E=A),this._instanceId=E.id?E.id:g.id,this._datepickerEl=g,this._datepickerInstance=null,this._options=u(u({},k),b),this._initialized=!1,this.init(),c.default.addInstance("Datepicker",this,this._instanceId,E.override)}return d.prototype.init=function(){this._datepickerEl&&!this._initialized&&(this._options.rangePicker?this._datepickerInstance=new v.DateRangePicker(this._datepickerEl,this._getDatepickerOptions(this._options)):this._datepickerInstance=new v.Datepicker(this._datepickerEl,this._getDatepickerOptions(this._options)),this._initialized=!0)},d.prototype.destroy=function(){this._initialized&&(this._initialized=!1,this._datepickerInstance.destroy())},d.prototype.removeInstance=function(){this.destroy(),c.default.removeInstance("Datepicker",this._instanceId)},d.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},d.prototype.getDatepickerInstance=function(){return this._datepickerInstance},d.prototype.getDate=function(){if(this._options.rangePicker&&this._datepickerInstance instanceof v.DateRangePicker)return this._datepickerInstance.getDates();if(!this._options.rangePicker&&this._datepickerInstance instanceof v.Datepicker)return this._datepickerInstance.getDate()},d.prototype.setDate=function(g){if(this._options.rangePicker&&this._datepickerInstance instanceof v.DateRangePicker)return this._datepickerInstance.setDates(g);if(!this._options.rangePicker&&this._datepickerInstance instanceof v.Datepicker)return this._datepickerInstance.setDate(g)},d.prototype.show=function(){this._datepickerInstance.show(),this._options.onShow(this)},d.prototype.hide=function(){this._datepickerInstance.hide(),this._options.onHide(this)},d.prototype._getDatepickerOptions=function(g){var b={};return g.buttons&&(b.todayBtn=!0,b.clearBtn=!0,g.autoSelectToday&&(b.todayBtnMode=1)),g.autohide&&(b.autohide=!0),g.format&&(b.format=g.format),g.maxDate&&(b.maxDate=g.maxDate),g.minDate&&(b.minDate=g.minDate),g.orientation&&(b.orientation=g.orientation),g.title&&(b.title=g.title),g.language&&(b.language=g.language),b},d.prototype.updateOnShow=function(g){this._options.onShow=g},d.prototype.updateOnHide=function(g){this._options.onHide=g},d}();function y(){document.querySelectorAll("[datepicker], [inline-datepicker], [date-rangepicker]").forEach(function(d){if(d){var g=d.hasAttribute("datepicker-buttons"),b=d.hasAttribute("datepicker-autoselect-today"),E=d.hasAttribute("datepicker-autohide"),P=d.getAttribute("datepicker-format"),o=d.getAttribute("datepicker-max-date"),h=d.getAttribute("datepicker-min-date"),f=d.getAttribute("datepicker-orientation"),_=d.getAttribute("datepicker-title"),C=d.getAttribute("datepicker-language"),I=d.hasAttribute("date-rangepicker");new N(d,{buttons:g||k.buttons,autoSelectToday:b||k.autoSelectToday,autohide:E||k.autohide,format:P||k.format,maxDate:o||k.maxDate,minDate:h||k.minDate,orientation:f||k.orientation,title:_||k.title,language:C||k.language,rangePicker:I||k.rangePicker})}else console.error("The datepicker element does not exist. Please check the datepicker attribute.")})}s.initDatepickers=y,typeof window<"u"&&(window.Datepicker=N,window.initDatepickers=y),s.default=N},556:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initDials=void 0;var c=a(423),v={triggerType:"hover",onShow:function(){},onHide:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E,P){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=null),E===void 0&&(E=v),P===void 0&&(P=k),this._instanceId=P.id?P.id:b.id,this._parentEl=d,this._triggerEl=g,this._targetEl=b,this._options=u(u({},v),E),this._visible=!1,this._initialized=!1,this.init(),c.default.addInstance("Dial",this,this._instanceId,P.override)}return y.prototype.init=function(){var d=this;if(this._triggerEl&&this._targetEl&&!this._initialized){var g=this._getTriggerEventTypes(this._options.triggerType);this._showEventHandler=function(){d.show()},g.showEvents.forEach(function(b){d._triggerEl.addEventListener(b,d._showEventHandler),d._targetEl.addEventListener(b,d._showEventHandler)}),this._hideEventHandler=function(){d._parentEl.matches(":hover")||d.hide()},g.hideEvents.forEach(function(b){d._parentEl.addEventListener(b,d._hideEventHandler)}),this._initialized=!0}},y.prototype.destroy=function(){var d=this;if(this._initialized){var g=this._getTriggerEventTypes(this._options.triggerType);g.showEvents.forEach(function(b){d._triggerEl.removeEventListener(b,d._showEventHandler),d._targetEl.removeEventListener(b,d._showEventHandler)}),g.hideEvents.forEach(function(b){d._parentEl.removeEventListener(b,d._hideEventHandler)}),this._initialized=!1}},y.prototype.removeInstance=function(){c.default.removeInstance("Dial",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.hide=function(){this._targetEl.classList.add("hidden"),this._triggerEl&&this._triggerEl.setAttribute("aria-expanded","false"),this._visible=!1,this._options.onHide(this)},y.prototype.show=function(){this._targetEl.classList.remove("hidden"),this._triggerEl&&this._triggerEl.setAttribute("aria-expanded","true"),this._visible=!0,this._options.onShow(this)},y.prototype.toggle=function(){this._visible?this.hide():this.show()},y.prototype.isHidden=function(){return!this._visible},y.prototype.isVisible=function(){return this._visible},y.prototype._getTriggerEventTypes=function(d){switch(d){case"hover":return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]};case"click":return{showEvents:["click","focus"],hideEvents:["focusout","blur"]};case"none":return{showEvents:[],hideEvents:[]};default:return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]}}},y.prototype.updateOnShow=function(d){this._options.onShow=d},y.prototype.updateOnHide=function(d){this._options.onHide=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-dial-init]").forEach(function(y){var d=y.querySelector("[data-dial-toggle]");if(d){var g=d.getAttribute("data-dial-toggle"),b=document.getElementById(g);if(b){var E=d.getAttribute("data-dial-trigger");new A(y,d,b,{triggerType:E||v.triggerType})}else console.error("Dial with id ".concat(g," does not exist. Are you sure that the data-dial-toggle attribute points to the correct modal id?"))}else console.error("Dial with id ".concat(y.id," does not have a trigger element. Are you sure that the data-dial-toggle attribute exists?"))})}s.initDials=N,typeof window<"u"&&(window.Dial=A,window.initDials=N),s.default=A},791:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initDismisses=void 0;var c=a(423),v={transition:"transition-opacity",duration:300,timing:"ease-out",onHide:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._targetEl=d,this._triggerEl=g,this._options=u(u({},v),b),this._initialized=!1,this.init(),c.default.addInstance("Dismiss",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._triggerEl&&this._targetEl&&!this._initialized&&(this._clickHandler=function(){d.hide()},this._triggerEl.addEventListener("click",this._clickHandler),this._initialized=!0)},y.prototype.destroy=function(){this._triggerEl&&this._initialized&&(this._triggerEl.removeEventListener("click",this._clickHandler),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Dismiss",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.hide=function(){var d=this;this._targetEl.classList.add(this._options.transition,"duration-".concat(this._options.duration),this._options.timing,"opacity-0"),setTimeout(function(){d._targetEl.classList.add("hidden")},this._options.duration),this._options.onHide(this,this._targetEl)},y.prototype.updateOnHide=function(d){this._options.onHide=d},y}();function N(){document.querySelectorAll("[data-dismiss-target]").forEach(function(y){var d=y.getAttribute("data-dismiss-target"),g=document.querySelector(d);g?new A(g,y):console.error('The dismiss element with id "'.concat(d,'" does not exist. Please check the data-dismiss-target attribute.'))})}s.initDismisses=N,typeof window<"u"&&(window.Dismiss=A,window.initDismisses=N),s.default=A},340:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initDrawers=void 0;var c=a(423),v={placement:"left",bodyScrolling:!1,backdrop:!0,edge:!1,edgeOffset:"bottom-[60px]",backdropClasses:"bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-30",onShow:function(){},onHide:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b){d===void 0&&(d=null),g===void 0&&(g=v),b===void 0&&(b=k),this._eventListenerInstances=[],this._instanceId=b.id?b.id:d.id,this._targetEl=d,this._options=u(u({},v),g),this._visible=!1,this._initialized=!1,this.init(),c.default.addInstance("Drawer",this,this._instanceId,b.override)}return y.prototype.init=function(){var d=this;this._targetEl&&!this._initialized&&(this._targetEl.setAttribute("aria-hidden","true"),this._targetEl.classList.add("transition-transform"),this._getPlacementClasses(this._options.placement).base.map(function(g){d._targetEl.classList.add(g)}),this._handleEscapeKey=function(g){g.key==="Escape"&&d.isVisible()&&d.hide()},document.addEventListener("keydown",this._handleEscapeKey),this._initialized=!0)},y.prototype.destroy=function(){this._initialized&&(this.removeAllEventListenerInstances(),this._destroyBackdropEl(),document.removeEventListener("keydown",this._handleEscapeKey),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Drawer",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.hide=function(){var d=this;this._options.edge?(this._getPlacementClasses(this._options.placement+"-edge").active.map(function(g){d._targetEl.classList.remove(g)}),this._getPlacementClasses(this._options.placement+"-edge").inactive.map(function(g){d._targetEl.classList.add(g)})):(this._getPlacementClasses(this._options.placement).active.map(function(g){d._targetEl.classList.remove(g)}),this._getPlacementClasses(this._options.placement).inactive.map(function(g){d._targetEl.classList.add(g)})),this._targetEl.setAttribute("aria-hidden","true"),this._targetEl.removeAttribute("aria-modal"),this._targetEl.removeAttribute("role"),this._options.bodyScrolling||document.body.classList.remove("overflow-hidden"),this._options.backdrop&&this._destroyBackdropEl(),this._visible=!1,this._options.onHide(this)},y.prototype.show=function(){var d=this;this._options.edge?(this._getPlacementClasses(this._options.placement+"-edge").active.map(function(g){d._targetEl.classList.add(g)}),this._getPlacementClasses(this._options.placement+"-edge").inactive.map(function(g){d._targetEl.classList.remove(g)})):(this._getPlacementClasses(this._options.placement).active.map(function(g){d._targetEl.classList.add(g)}),this._getPlacementClasses(this._options.placement).inactive.map(function(g){d._targetEl.classList.remove(g)})),this._targetEl.setAttribute("aria-modal","true"),this._targetEl.setAttribute("role","dialog"),this._targetEl.removeAttribute("aria-hidden"),this._options.bodyScrolling||document.body.classList.add("overflow-hidden"),this._options.backdrop&&this._createBackdrop(),this._visible=!0,this._options.onShow(this)},y.prototype.toggle=function(){this.isVisible()?this.hide():this.show()},y.prototype._createBackdrop=function(){var d,g=this;if(!this._visible){var b=document.createElement("div");b.setAttribute("drawer-backdrop",""),(d=b.classList).add.apply(d,this._options.backdropClasses.split(" ")),document.querySelector("body").append(b),b.addEventListener("click",function(){g.hide()})}},y.prototype._destroyBackdropEl=function(){this._visible&&document.querySelector("[drawer-backdrop]")!==null&&document.querySelector("[drawer-backdrop]").remove()},y.prototype._getPlacementClasses=function(d){switch(d){case"top":return{base:["top-0","left-0","right-0"],active:["transform-none"],inactive:["-translate-y-full"]};case"right":return{base:["right-0","top-0"],active:["transform-none"],inactive:["translate-x-full"]};case"bottom":return{base:["bottom-0","left-0","right-0"],active:["transform-none"],inactive:["translate-y-full"]};case"left":return{base:["left-0","top-0"],active:["transform-none"],inactive:["-translate-x-full"]};case"bottom-edge":return{base:["left-0","top-0"],active:["transform-none"],inactive:["translate-y-full",this._options.edgeOffset]};default:return{base:["left-0","top-0"],active:["transform-none"],inactive:["-translate-x-full"]}}},y.prototype.isHidden=function(){return!this._visible},y.prototype.isVisible=function(){return this._visible},y.prototype.addEventListenerInstance=function(d,g,b){this._eventListenerInstances.push({element:d,type:g,handler:b})},y.prototype.removeAllEventListenerInstances=function(){this._eventListenerInstances.map(function(d){d.element.removeEventListener(d.type,d.handler)}),this._eventListenerInstances=[]},y.prototype.getAllEventListenerInstances=function(){return this._eventListenerInstances},y.prototype.updateOnShow=function(d){this._options.onShow=d},y.prototype.updateOnHide=function(d){this._options.onHide=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-drawer-target]").forEach(function(y){var d=y.getAttribute("data-drawer-target"),g=document.getElementById(d);if(g){var b=y.getAttribute("data-drawer-placement"),E=y.getAttribute("data-drawer-body-scrolling"),P=y.getAttribute("data-drawer-backdrop"),o=y.getAttribute("data-drawer-edge"),h=y.getAttribute("data-drawer-edge-offset");new A(g,{placement:b||v.placement,bodyScrolling:E?E==="true":v.bodyScrolling,backdrop:P?P==="true":v.backdrop,edge:o?o==="true":v.edge,edgeOffset:h||v.edgeOffset})}else console.error("Drawer with id ".concat(d," not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"))}),document.querySelectorAll("[data-drawer-toggle]").forEach(function(y){var d=y.getAttribute("data-drawer-toggle"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Drawer",d);if(b){var E=function(){b.toggle()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Drawer with id ".concat(d," has not been initialized. Please initialize it using the data-drawer-target attribute."))}else console.error("Drawer with id ".concat(d," not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"))}),document.querySelectorAll("[data-drawer-dismiss], [data-drawer-hide]").forEach(function(y){var d=y.getAttribute("data-drawer-dismiss")?y.getAttribute("data-drawer-dismiss"):y.getAttribute("data-drawer-hide"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Drawer",d);if(b){var E=function(){b.hide()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Drawer with id ".concat(d," has not been initialized. Please initialize it using the data-drawer-target attribute."))}else console.error("Drawer with id ".concat(d," not found. Are you sure that the data-drawer-target attribute points to the correct drawer id"))}),document.querySelectorAll("[data-drawer-show]").forEach(function(y){var d=y.getAttribute("data-drawer-show"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Drawer",d);if(b){var E=function(){b.show()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Drawer with id ".concat(d," has not been initialized. Please initialize it using the data-drawer-target attribute."))}else console.error("Drawer with id ".concat(d," not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"))})}s.initDrawers=N,typeof window<"u"&&(window.Drawer=A,window.initDrawers=N),s.default=A},316:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(g){for(var b,E=1,P=arguments.length;E<P;E++){b=arguments[E];for(var o in b)Object.prototype.hasOwnProperty.call(b,o)&&(g[o]=b[o])}return g},u.apply(this,arguments)},c=this&&this.__spreadArray||function(g,b,E){if(E||arguments.length===2)for(var P=0,o=b.length,h;P<o;P++)(h||!(P in b))&&(h||(h=Array.prototype.slice.call(b,0,P)),h[P]=b[P]);return g.concat(h||Array.prototype.slice.call(b))};Object.defineProperty(s,"__esModule",{value:!0}),s.initDropdowns=void 0;var v=a(853),k=a(423),A={placement:"bottom",triggerType:"click",offsetSkidding:0,offsetDistance:10,delay:300,ignoreClickOutsideClass:!1,onShow:function(){},onHide:function(){},onToggle:function(){}},N={id:null,override:!0},y=function(){function g(b,E,P,o){b===void 0&&(b=null),E===void 0&&(E=null),P===void 0&&(P=A),o===void 0&&(o=N),this._instanceId=o.id?o.id:b.id,this._targetEl=b,this._triggerEl=E,this._options=u(u({},A),P),this._popperInstance=null,this._visible=!1,this._initialized=!1,this.init(),k.default.addInstance("Dropdown",this,this._instanceId,o.override)}return g.prototype.init=function(){this._triggerEl&&this._targetEl&&!this._initialized&&(this._popperInstance=this._createPopperInstance(),this._setupEventListeners(),this._initialized=!0)},g.prototype.destroy=function(){var b=this,E=this._getTriggerEvents();this._options.triggerType==="click"&&E.showEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._clickHandler)}),this._options.triggerType==="hover"&&(E.showEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._hoverShowTriggerElHandler),b._targetEl.removeEventListener(P,b._hoverShowTargetElHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._hoverHideHandler),b._targetEl.removeEventListener(P,b._hoverHideHandler)})),this._popperInstance.destroy(),this._initialized=!1},g.prototype.removeInstance=function(){k.default.removeInstance("Dropdown",this._instanceId)},g.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},g.prototype._setupEventListeners=function(){var b=this,E=this._getTriggerEvents();this._clickHandler=function(){b.toggle()},this._options.triggerType==="click"&&E.showEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._clickHandler)}),this._hoverShowTriggerElHandler=function(P){P.type==="click"?b.toggle():setTimeout(function(){b.show()},b._options.delay)},this._hoverShowTargetElHandler=function(){b.show()},this._hoverHideHandler=function(){setTimeout(function(){b._targetEl.matches(":hover")||b.hide()},b._options.delay)},this._options.triggerType==="hover"&&(E.showEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._hoverShowTriggerElHandler),b._targetEl.addEventListener(P,b._hoverShowTargetElHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._hoverHideHandler),b._targetEl.addEventListener(P,b._hoverHideHandler)}))},g.prototype._createPopperInstance=function(){return(0,v.createPopper)(this._triggerEl,this._targetEl,{placement:this._options.placement,modifiers:[{name:"offset",options:{offset:[this._options.offsetSkidding,this._options.offsetDistance]}}]})},g.prototype._setupClickOutsideListener=function(){var b=this;this._clickOutsideEventListener=function(E){b._handleClickOutside(E,b._targetEl)},document.body.addEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._removeClickOutsideListener=function(){document.body.removeEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._handleClickOutside=function(b,E){var P=b.target,o=this._options.ignoreClickOutsideClass,h=!1;if(o){var f=document.querySelectorAll(".".concat(o));f.forEach(function(_){if(_.contains(P)){h=!0;return}})}P!==E&&!E.contains(P)&&!this._triggerEl.contains(P)&&!h&&this.isVisible()&&this.hide()},g.prototype._getTriggerEvents=function(){switch(this._options.triggerType){case"hover":return{showEvents:["mouseenter","click"],hideEvents:["mouseleave"]};case"click":return{showEvents:["click"],hideEvents:[]};case"none":return{showEvents:[],hideEvents:[]};default:return{showEvents:["click"],hideEvents:[]}}},g.prototype.toggle=function(){this.isVisible()?this.hide():this.show(),this._options.onToggle(this)},g.prototype.isVisible=function(){return this._visible},g.prototype.show=function(){this._targetEl.classList.remove("hidden"),this._targetEl.classList.add("block"),this._targetEl.removeAttribute("aria-hidden"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!0}],!1)})}),this._setupClickOutsideListener(),this._popperInstance.update(),this._visible=!0,this._options.onShow(this)},g.prototype.hide=function(){this._targetEl.classList.remove("block"),this._targetEl.classList.add("hidden"),this._targetEl.setAttribute("aria-hidden","true"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!1}],!1)})}),this._visible=!1,this._removeClickOutsideListener(),this._options.onHide(this)},g.prototype.updateOnShow=function(b){this._options.onShow=b},g.prototype.updateOnHide=function(b){this._options.onHide=b},g.prototype.updateOnToggle=function(b){this._options.onToggle=b},g}();function d(){document.querySelectorAll("[data-dropdown-toggle]").forEach(function(g){var b=g.getAttribute("data-dropdown-toggle"),E=document.getElementById(b);if(E){var P=g.getAttribute("data-dropdown-placement"),o=g.getAttribute("data-dropdown-offset-skidding"),h=g.getAttribute("data-dropdown-offset-distance"),f=g.getAttribute("data-dropdown-trigger"),_=g.getAttribute("data-dropdown-delay"),C=g.getAttribute("data-dropdown-ignore-click-outside-class");new y(E,g,{placement:P||A.placement,triggerType:f||A.triggerType,offsetSkidding:o?parseInt(o):A.offsetSkidding,offsetDistance:h?parseInt(h):A.offsetDistance,delay:_?parseInt(_):A.delay,ignoreClickOutsideClass:C||A.ignoreClickOutsideClass})}else console.error('The dropdown element with id "'.concat(b,'" does not exist. Please check the data-dropdown-toggle attribute.'))})}s.initDropdowns=d,typeof window<"u"&&(window.Dropdown=y,window.initDropdowns=d),s.default=y},311:function(r,s,a){Object.defineProperty(s,"__esModule",{value:!0}),s.initFlowbite=void 0;var u=a(902),c=a(33),v=a(673),k=a(922),A=a(556),N=a(791),y=a(340),d=a(316),g=a(656),b=a(16),E=a(903),P=a(247),o=a(671),h=a(132);function f(){(0,u.initAccordions)(),(0,k.initCollapses)(),(0,c.initCarousels)(),(0,N.initDismisses)(),(0,d.initDropdowns)(),(0,b.initModals)(),(0,y.initDrawers)(),(0,P.initTabs)(),(0,o.initTooltips)(),(0,E.initPopovers)(),(0,A.initDials)(),(0,g.initInputCounters)(),(0,v.initCopyClipboards)(),(0,h.initDatepickers)()}s.initFlowbite=f,typeof window<"u"&&(window.initFlowbite=f)},656:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initInputCounters=void 0;var c=a(423),v={minValue:null,maxValue:null,onIncrement:function(){},onDecrement:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E,P){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=null),E===void 0&&(E=v),P===void 0&&(P=k),this._instanceId=P.id?P.id:d.id,this._targetEl=d,this._incrementEl=g,this._decrementEl=b,this._options=u(u({},v),E),this._initialized=!1,this.init(),c.default.addInstance("InputCounter",this,this._instanceId,P.override)}return y.prototype.init=function(){var d=this;this._targetEl&&!this._initialized&&(this._inputHandler=function(g){{var b=g.target;/^\d*$/.test(b.value)||(b.value=b.value.replace(/[^\d]/g,"")),d._options.maxValue!==null&&parseInt(b.value)>d._options.maxValue&&(b.value=d._options.maxValue.toString()),d._options.minValue!==null&&parseInt(b.value)<d._options.minValue&&(b.value=d._options.minValue.toString())}},this._incrementClickHandler=function(){d.increment()},this._decrementClickHandler=function(){d.decrement()},this._targetEl.addEventListener("input",this._inputHandler),this._incrementEl&&this._incrementEl.addEventListener("click",this._incrementClickHandler),this._decrementEl&&this._decrementEl.addEventListener("click",this._decrementClickHandler),this._initialized=!0)},y.prototype.destroy=function(){this._targetEl&&this._initialized&&(this._targetEl.removeEventListener("input",this._inputHandler),this._incrementEl&&this._incrementEl.removeEventListener("click",this._incrementClickHandler),this._decrementEl&&this._decrementEl.removeEventListener("click",this._decrementClickHandler),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("InputCounter",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getCurrentValue=function(){return parseInt(this._targetEl.value)||0},y.prototype.increment=function(){this._options.maxValue!==null&&this.getCurrentValue()>=this._options.maxValue||(this._targetEl.value=(this.getCurrentValue()+1).toString(),this._options.onIncrement(this))},y.prototype.decrement=function(){this._options.minValue!==null&&this.getCurrentValue()<=this._options.minValue||(this._targetEl.value=(this.getCurrentValue()-1).toString(),this._options.onDecrement(this))},y.prototype.updateOnIncrement=function(d){this._options.onIncrement=d},y.prototype.updateOnDecrement=function(d){this._options.onDecrement=d},y}();function N(){document.querySelectorAll("[data-input-counter]").forEach(function(y){var d=y.id,g=document.querySelector('[data-input-counter-increment="'+d+'"]'),b=document.querySelector('[data-input-counter-decrement="'+d+'"]'),E=y.getAttribute("data-input-counter-min"),P=y.getAttribute("data-input-counter-max");y?c.default.instanceExists("InputCounter",y.getAttribute("id"))||new A(y,g||null,b||null,{minValue:E?parseInt(E):null,maxValue:P?parseInt(P):null}):console.error('The target element with id "'.concat(d,'" does not exist. Please check the data-input-counter attribute.'))})}s.initInputCounters=N,typeof window<"u"&&(window.InputCounter=A,window.initInputCounters=N),s.default=A},16:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initModals=void 0;var c=a(423),v={placement:"center",backdropClasses:"bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-40",backdrop:"dynamic",closable:!0,onHide:function(){},onShow:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b){d===void 0&&(d=null),g===void 0&&(g=v),b===void 0&&(b=k),this._eventListenerInstances=[],this._instanceId=b.id?b.id:d.id,this._targetEl=d,this._options=u(u({},v),g),this._isHidden=!0,this._backdropEl=null,this._initialized=!1,this.init(),c.default.addInstance("Modal",this,this._instanceId,b.override)}return y.prototype.init=function(){var d=this;this._targetEl&&!this._initialized&&(this._getPlacementClasses().map(function(g){d._targetEl.classList.add(g)}),this._initialized=!0)},y.prototype.destroy=function(){this._initialized&&(this.removeAllEventListenerInstances(),this._destroyBackdropEl(),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Modal",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype._createBackdrop=function(){var d;if(this._isHidden){var g=document.createElement("div");(d=g.classList).add.apply(d,this._options.backdropClasses.split(" ")),document.querySelector("body").append(g),this._backdropEl=g}},y.prototype._destroyBackdropEl=function(){!this._isHidden&&this._backdropEl&&(this._backdropEl.remove(),this._backdropEl=null)},y.prototype._setupModalCloseEventListeners=function(){var d=this;this._options.backdrop==="dynamic"&&(this._clickOutsideEventListener=function(g){d._handleOutsideClick(g.target)},this._targetEl.addEventListener("click",this._clickOutsideEventListener,!0)),this._keydownEventListener=function(g){g.key==="Escape"&&d.hide()},document.body.addEventListener("keydown",this._keydownEventListener,!0)},y.prototype._removeModalCloseEventListeners=function(){this._options.backdrop==="dynamic"&&this._targetEl.removeEventListener("click",this._clickOutsideEventListener,!0),document.body.removeEventListener("keydown",this._keydownEventListener,!0)},y.prototype._handleOutsideClick=function(d){(d===this._targetEl||d===this._backdropEl&&this.isVisible())&&this.hide()},y.prototype._getPlacementClasses=function(){switch(this._options.placement){case"top-left":return["justify-start","items-start"];case"top-center":return["justify-center","items-start"];case"top-right":return["justify-end","items-start"];case"center-left":return["justify-start","items-center"];case"center":return["justify-center","items-center"];case"center-right":return["justify-end","items-center"];case"bottom-left":return["justify-start","items-end"];case"bottom-center":return["justify-center","items-end"];case"bottom-right":return["justify-end","items-end"];default:return["justify-center","items-center"]}},y.prototype.toggle=function(){this._isHidden?this.show():this.hide(),this._options.onToggle(this)},y.prototype.show=function(){this.isHidden&&(this._targetEl.classList.add("flex"),this._targetEl.classList.remove("hidden"),this._targetEl.setAttribute("aria-modal","true"),this._targetEl.setAttribute("role","dialog"),this._targetEl.removeAttribute("aria-hidden"),this._createBackdrop(),this._isHidden=!1,this._options.closable&&this._setupModalCloseEventListeners(),document.body.classList.add("overflow-hidden"),this._options.onShow(this))},y.prototype.hide=function(){this.isVisible&&(this._targetEl.classList.add("hidden"),this._targetEl.classList.remove("flex"),this._targetEl.setAttribute("aria-hidden","true"),this._targetEl.removeAttribute("aria-modal"),this._targetEl.removeAttribute("role"),this._destroyBackdropEl(),this._isHidden=!0,document.body.classList.remove("overflow-hidden"),this._options.closable&&this._removeModalCloseEventListeners(),this._options.onHide(this))},y.prototype.isVisible=function(){return!this._isHidden},y.prototype.isHidden=function(){return this._isHidden},y.prototype.addEventListenerInstance=function(d,g,b){this._eventListenerInstances.push({element:d,type:g,handler:b})},y.prototype.removeAllEventListenerInstances=function(){this._eventListenerInstances.map(function(d){d.element.removeEventListener(d.type,d.handler)}),this._eventListenerInstances=[]},y.prototype.getAllEventListenerInstances=function(){return this._eventListenerInstances},y.prototype.updateOnShow=function(d){this._options.onShow=d},y.prototype.updateOnHide=function(d){this._options.onHide=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-modal-target]").forEach(function(y){var d=y.getAttribute("data-modal-target"),g=document.getElementById(d);if(g){var b=g.getAttribute("data-modal-placement"),E=g.getAttribute("data-modal-backdrop");new A(g,{placement:b||v.placement,backdrop:E||v.backdrop})}else console.error("Modal with id ".concat(d," does not exist. Are you sure that the data-modal-target attribute points to the correct modal id?."))}),document.querySelectorAll("[data-modal-toggle]").forEach(function(y){var d=y.getAttribute("data-modal-toggle"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Modal",d);if(b){var E=function(){b.toggle()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Modal with id ".concat(d," has not been initialized. Please initialize it using the data-modal-target attribute."))}else console.error("Modal with id ".concat(d," does not exist. Are you sure that the data-modal-toggle attribute points to the correct modal id?"))}),document.querySelectorAll("[data-modal-show]").forEach(function(y){var d=y.getAttribute("data-modal-show"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Modal",d);if(b){var E=function(){b.show()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Modal with id ".concat(d," has not been initialized. Please initialize it using the data-modal-target attribute."))}else console.error("Modal with id ".concat(d," does not exist. Are you sure that the data-modal-show attribute points to the correct modal id?"))}),document.querySelectorAll("[data-modal-hide]").forEach(function(y){var d=y.getAttribute("data-modal-hide"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Modal",d);if(b){var E=function(){b.hide()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Modal with id ".concat(d," has not been initialized. Please initialize it using the data-modal-target attribute."))}else console.error("Modal with id ".concat(d," does not exist. Are you sure that the data-modal-hide attribute points to the correct modal id?"))})}s.initModals=N,typeof window<"u"&&(window.Modal=A,window.initModals=N),s.default=A},903:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(g){for(var b,E=1,P=arguments.length;E<P;E++){b=arguments[E];for(var o in b)Object.prototype.hasOwnProperty.call(b,o)&&(g[o]=b[o])}return g},u.apply(this,arguments)},c=this&&this.__spreadArray||function(g,b,E){if(E||arguments.length===2)for(var P=0,o=b.length,h;P<o;P++)(h||!(P in b))&&(h||(h=Array.prototype.slice.call(b,0,P)),h[P]=b[P]);return g.concat(h||Array.prototype.slice.call(b))};Object.defineProperty(s,"__esModule",{value:!0}),s.initPopovers=void 0;var v=a(853),k=a(423),A={placement:"top",offset:10,triggerType:"hover",onShow:function(){},onHide:function(){},onToggle:function(){}},N={id:null,override:!0},y=function(){function g(b,E,P,o){b===void 0&&(b=null),E===void 0&&(E=null),P===void 0&&(P=A),o===void 0&&(o=N),this._instanceId=o.id?o.id:b.id,this._targetEl=b,this._triggerEl=E,this._options=u(u({},A),P),this._popperInstance=null,this._visible=!1,this._initialized=!1,this.init(),k.default.addInstance("Popover",this,o.id?o.id:this._targetEl.id,o.override)}return g.prototype.init=function(){this._triggerEl&&this._targetEl&&!this._initialized&&(this._setupEventListeners(),this._popperInstance=this._createPopperInstance(),this._initialized=!0)},g.prototype.destroy=function(){var b=this;if(this._initialized){var E=this._getTriggerEvents();E.showEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._showHandler),b._targetEl.removeEventListener(P,b._showHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._hideHandler),b._targetEl.removeEventListener(P,b._hideHandler)}),this._removeKeydownListener(),this._removeClickOutsideListener(),this._popperInstance&&this._popperInstance.destroy(),this._initialized=!1}},g.prototype.removeInstance=function(){k.default.removeInstance("Popover",this._instanceId)},g.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},g.prototype._setupEventListeners=function(){var b=this,E=this._getTriggerEvents();this._showHandler=function(){b.show()},this._hideHandler=function(){setTimeout(function(){b._targetEl.matches(":hover")||b.hide()},100)},E.showEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._showHandler),b._targetEl.addEventListener(P,b._showHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._hideHandler),b._targetEl.addEventListener(P,b._hideHandler)})},g.prototype._createPopperInstance=function(){return(0,v.createPopper)(this._triggerEl,this._targetEl,{placement:this._options.placement,modifiers:[{name:"offset",options:{offset:[0,this._options.offset]}}]})},g.prototype._getTriggerEvents=function(){switch(this._options.triggerType){case"hover":return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]};case"click":return{showEvents:["click","focus"],hideEvents:["focusout","blur"]};case"none":return{showEvents:[],hideEvents:[]};default:return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]}}},g.prototype._setupKeydownListener=function(){var b=this;this._keydownEventListener=function(E){E.key==="Escape"&&b.hide()},document.body.addEventListener("keydown",this._keydownEventListener,!0)},g.prototype._removeKeydownListener=function(){document.body.removeEventListener("keydown",this._keydownEventListener,!0)},g.prototype._setupClickOutsideListener=function(){var b=this;this._clickOutsideEventListener=function(E){b._handleClickOutside(E,b._targetEl)},document.body.addEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._removeClickOutsideListener=function(){document.body.removeEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._handleClickOutside=function(b,E){var P=b.target;P!==E&&!E.contains(P)&&!this._triggerEl.contains(P)&&this.isVisible()&&this.hide()},g.prototype.isVisible=function(){return this._visible},g.prototype.toggle=function(){this.isVisible()?this.hide():this.show(),this._options.onToggle(this)},g.prototype.show=function(){this._targetEl.classList.remove("opacity-0","invisible"),this._targetEl.classList.add("opacity-100","visible"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!0}],!1)})}),this._setupClickOutsideListener(),this._setupKeydownListener(),this._popperInstance.update(),this._visible=!0,this._options.onShow(this)},g.prototype.hide=function(){this._targetEl.classList.remove("opacity-100","visible"),this._targetEl.classList.add("opacity-0","invisible"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!1}],!1)})}),this._removeClickOutsideListener(),this._removeKeydownListener(),this._visible=!1,this._options.onHide(this)},g.prototype.updateOnShow=function(b){this._options.onShow=b},g.prototype.updateOnHide=function(b){this._options.onHide=b},g.prototype.updateOnToggle=function(b){this._options.onToggle=b},g}();function d(){document.querySelectorAll("[data-popover-target]").forEach(function(g){var b=g.getAttribute("data-popover-target"),E=document.getElementById(b);if(E){var P=g.getAttribute("data-popover-trigger"),o=g.getAttribute("data-popover-placement"),h=g.getAttribute("data-popover-offset");new y(E,g,{placement:o||A.placement,offset:h?parseInt(h):A.offset,triggerType:P||A.triggerType})}else console.error('The popover element with id "'.concat(b,'" does not exist. Please check the data-popover-target attribute.'))})}s.initPopovers=d,typeof window<"u"&&(window.Popover=y,window.initPopovers=d),s.default=y},247:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initTabs=void 0;var c=a(423),v={defaultTabId:null,activeClasses:"text-blue-600 hover:text-blue-600 dark:text-blue-500 dark:hover:text-blue-500 border-blue-600 dark:border-blue-500",inactiveClasses:"dark:border-transparent text-gray-500 hover:text-gray-600 dark:text-gray-400 border-gray-100 hover:border-gray-300 dark:border-gray-700 dark:hover:text-gray-300",onShow:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=[]),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._tabsEl=d,this._items=g,this._activeTab=b?this.getTab(b.defaultTabId):null,this._options=u(u({},v),b),this._initialized=!1,this.init(),c.default.addInstance("Tabs",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._items.length&&!this._initialized&&(this._activeTab||this.setActiveTab(this._items[0]),this.show(this._activeTab.id,!0),this._items.map(function(g){g.triggerEl.addEventListener("click",function(b){b.preventDefault(),d.show(g.id)})}))},y.prototype.destroy=function(){this._initialized&&(this._initialized=!1)},y.prototype.removeInstance=function(){this.destroy(),c.default.removeInstance("Tabs",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getActiveTab=function(){return this._activeTab},y.prototype.setActiveTab=function(d){this._activeTab=d},y.prototype.getTab=function(d){return this._items.filter(function(g){return g.id===d})[0]},y.prototype.show=function(d,g){var b,E,P=this;g===void 0&&(g=!1);var o=this.getTab(d);o===this._activeTab&&!g||(this._items.map(function(h){var f,_;h!==o&&((f=h.triggerEl.classList).remove.apply(f,P._options.activeClasses.split(" ")),(_=h.triggerEl.classList).add.apply(_,P._options.inactiveClasses.split(" ")),h.targetEl.classList.add("hidden"),h.triggerEl.setAttribute("aria-selected","false"))}),(b=o.triggerEl.classList).add.apply(b,this._options.activeClasses.split(" ")),(E=o.triggerEl.classList).remove.apply(E,this._options.inactiveClasses.split(" ")),o.triggerEl.setAttribute("aria-selected","true"),o.targetEl.classList.remove("hidden"),this.setActiveTab(o),this._options.onShow(this,o))},y.prototype.updateOnShow=function(d){this._options.onShow=d},y}();function N(){document.querySelectorAll("[data-tabs-toggle]").forEach(function(y){var d=[],g=y.getAttribute("data-tabs-active-classes"),b=y.getAttribute("data-tabs-inactive-classes"),E=null;y.querySelectorAll('[role="tab"]').forEach(function(P){var o=P.getAttribute("aria-selected")==="true",h={id:P.getAttribute("data-tabs-target"),triggerEl:P,targetEl:document.querySelector(P.getAttribute("data-tabs-target"))};d.push(h),o&&(E=h.id)}),new A(y,d,{defaultTabId:E,activeClasses:g||v.activeClasses,inactiveClasses:b||v.inactiveClasses})})}s.initTabs=N,typeof window<"u"&&(window.Tabs=A,window.initTabs=N),s.default=A},671:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(g){for(var b,E=1,P=arguments.length;E<P;E++){b=arguments[E];for(var o in b)Object.prototype.hasOwnProperty.call(b,o)&&(g[o]=b[o])}return g},u.apply(this,arguments)},c=this&&this.__spreadArray||function(g,b,E){if(E||arguments.length===2)for(var P=0,o=b.length,h;P<o;P++)(h||!(P in b))&&(h||(h=Array.prototype.slice.call(b,0,P)),h[P]=b[P]);return g.concat(h||Array.prototype.slice.call(b))};Object.defineProperty(s,"__esModule",{value:!0}),s.initTooltips=void 0;var v=a(853),k=a(423),A={placement:"top",triggerType:"hover",onShow:function(){},onHide:function(){},onToggle:function(){}},N={id:null,override:!0},y=function(){function g(b,E,P,o){b===void 0&&(b=null),E===void 0&&(E=null),P===void 0&&(P=A),o===void 0&&(o=N),this._instanceId=o.id?o.id:b.id,this._targetEl=b,this._triggerEl=E,this._options=u(u({},A),P),this._popperInstance=null,this._visible=!1,this._initialized=!1,this.init(),k.default.addInstance("Tooltip",this,this._instanceId,o.override)}return g.prototype.init=function(){this._triggerEl&&this._targetEl&&!this._initialized&&(this._setupEventListeners(),this._popperInstance=this._createPopperInstance(),this._initialized=!0)},g.prototype.destroy=function(){var b=this;if(this._initialized){var E=this._getTriggerEvents();E.showEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._showHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._hideHandler)}),this._removeKeydownListener(),this._removeClickOutsideListener(),this._popperInstance&&this._popperInstance.destroy(),this._initialized=!1}},g.prototype.removeInstance=function(){k.default.removeInstance("Tooltip",this._instanceId)},g.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},g.prototype._setupEventListeners=function(){var b=this,E=this._getTriggerEvents();this._showHandler=function(){b.show()},this._hideHandler=function(){b.hide()},E.showEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._showHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._hideHandler)})},g.prototype._createPopperInstance=function(){return(0,v.createPopper)(this._triggerEl,this._targetEl,{placement:this._options.placement,modifiers:[{name:"offset",options:{offset:[0,8]}}]})},g.prototype._getTriggerEvents=function(){switch(this._options.triggerType){case"hover":return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]};case"click":return{showEvents:["click","focus"],hideEvents:["focusout","blur"]};case"none":return{showEvents:[],hideEvents:[]};default:return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]}}},g.prototype._setupKeydownListener=function(){var b=this;this._keydownEventListener=function(E){E.key==="Escape"&&b.hide()},document.body.addEventListener("keydown",this._keydownEventListener,!0)},g.prototype._removeKeydownListener=function(){document.body.removeEventListener("keydown",this._keydownEventListener,!0)},g.prototype._setupClickOutsideListener=function(){var b=this;this._clickOutsideEventListener=function(E){b._handleClickOutside(E,b._targetEl)},document.body.addEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._removeClickOutsideListener=function(){document.body.removeEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._handleClickOutside=function(b,E){var P=b.target;P!==E&&!E.contains(P)&&!this._triggerEl.contains(P)&&this.isVisible()&&this.hide()},g.prototype.isVisible=function(){return this._visible},g.prototype.toggle=function(){this.isVisible()?this.hide():this.show()},g.prototype.show=function(){this._targetEl.classList.remove("opacity-0","invisible"),this._targetEl.classList.add("opacity-100","visible"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!0}],!1)})}),this._setupClickOutsideListener(),this._setupKeydownListener(),this._popperInstance.update(),this._visible=!0,this._options.onShow(this)},g.prototype.hide=function(){this._targetEl.classList.remove("opacity-100","visible"),this._targetEl.classList.add("opacity-0","invisible"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!1}],!1)})}),this._removeClickOutsideListener(),this._removeKeydownListener(),this._visible=!1,this._options.onHide(this)},g.prototype.updateOnShow=function(b){this._options.onShow=b},g.prototype.updateOnHide=function(b){this._options.onHide=b},g.prototype.updateOnToggle=function(b){this._options.onToggle=b},g}();function d(){document.querySelectorAll("[data-tooltip-target]").forEach(function(g){var b=g.getAttribute("data-tooltip-target"),E=document.getElementById(b);if(E){var P=g.getAttribute("data-tooltip-trigger"),o=g.getAttribute("data-tooltip-placement");new y(E,g,{placement:o||A.placement,triggerType:P||A.triggerType})}else console.error('The tooltip element with id "'.concat(b,'" does not exist. Please check the data-tooltip-target attribute.'))})}s.initTooltips=d,typeof window<"u"&&(window.Tooltip=y,window.initTooltips=d),s.default=y},947:function(r,s){Object.defineProperty(s,"__esModule",{value:!0});var a=function(){function u(c,v){v===void 0&&(v=[]),this._eventType=c,this._eventFunctions=v}return u.prototype.init=function(){var c=this;this._eventFunctions.forEach(function(v){typeof window<"u"&&window.addEventListener(c._eventType,v)})},u}();s.default=a},423:function(r,s){Object.defineProperty(s,"__esModule",{value:!0});var a=function(){function c(){this._instances={Accordion:{},Carousel:{},Collapse:{},Dial:{},Dismiss:{},Drawer:{},Dropdown:{},Modal:{},Popover:{},Tabs:{},Tooltip:{},InputCounter:{},CopyClipboard:{},Datepicker:{}}}return c.prototype.addInstance=function(v,k,A,N){if(N===void 0&&(N=!1),!this._instances[v])return console.warn("Flowbite: Component ".concat(v," does not exist.")),!1;if(this._instances[v][A]&&!N){console.warn("Flowbite: Instance with ID ".concat(A," already exists."));return}N&&this._instances[v][A]&&this._instances[v][A].destroyAndRemoveInstance(),this._instances[v][A||this._generateRandomId()]=k},c.prototype.getAllInstances=function(){return this._instances},c.prototype.getInstances=function(v){return this._instances[v]?this._instances[v]:(console.warn("Flowbite: Component ".concat(v," does not exist.")),!1)},c.prototype.getInstance=function(v,k){if(this._componentAndInstanceCheck(v,k)){if(!this._instances[v][k]){console.warn("Flowbite: Instance with ID ".concat(k," does not exist."));return}return this._instances[v][k]}},c.prototype.destroyAndRemoveInstance=function(v,k){this._componentAndInstanceCheck(v,k)&&(this.destroyInstanceObject(v,k),this.removeInstance(v,k))},c.prototype.removeInstance=function(v,k){this._componentAndInstanceCheck(v,k)&&delete this._instances[v][k]},c.prototype.destroyInstanceObject=function(v,k){this._componentAndInstanceCheck(v,k)&&this._instances[v][k].destroy()},c.prototype.instanceExists=function(v,k){return!(!this._instances[v]||!this._instances[v][k])},c.prototype._generateRandomId=function(){return Math.random().toString(36).substr(2,9)},c.prototype._componentAndInstanceCheck=function(v,k){return this._instances[v]?this._instances[v][k]?!0:(console.warn("Flowbite: Instance with ID ".concat(k," does not exist.")),!1):(console.warn("Flowbite: Component ".concat(v," does not exist.")),!1)},c}(),u=new a;s.default=u,typeof window<"u"&&(window.FlowbiteInstances=u)}},e={};function t(r){var s=e[r];if(s!==void 0)return s.exports;var a=e[r]={exports:{}};return i[r].call(a.exports,a,a.exports,t),a.exports}(function(){t.d=function(r,s){for(var a in s)t.o(s,a)&&!t.o(r,a)&&Object.defineProperty(r,a,{enumerable:!0,get:s[a]})}})(),function(){t.o=function(r,s){return Object.prototype.hasOwnProperty.call(r,s)}}(),function(){t.r=function(r){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})}}();var n={};return function(){var r=n;Object.defineProperty(r,"__esModule",{value:!0});var s=t(902),a=t(33),u=t(922),c=t(556),v=t(791),k=t(340),A=t(316),N=t(16),y=t(903),d=t(247),g=t(671),b=t(656),E=t(673),P=t(132);t(311);var o=t(947),h=new o.default("phx:page-loading-stop",[s.initAccordions,u.initCollapses,a.initCarousels,v.initDismisses,A.initDropdowns,N.initModals,k.initDrawers,d.initTabs,g.initTooltips,y.initPopovers,c.initDials,b.initInputCounters,E.initCopyClipboards,P.initDatepickers]);h.init();var f=new o.default("load",[s.initAccordions,u.initCollapses,a.initCarousels,v.initDismisses,A.initDropdowns,N.initModals,k.initDrawers,d.initTabs,g.initTooltips,y.initPopovers,c.initDials,b.initInputCounters,E.initCopyClipboards,P.initDatepickers]);f.init(),r.default={Accordion:s.default,Carousel:a.default,Collapse:u.default,Dial:c.default,Drawer:k.default,Dismiss:v.default,Dropdown:A.default,Modal:N.default,Popover:y.default,Tabs:d.default,Tooltip:g.default,InputCounter:b.default,CopyClipboard:E.default,Datepicker:P.default,Events:o.default}}(),n}()})});(function(){var i=e();function e(){if(typeof window.CustomEvent=="function")return window.CustomEvent;function r(s,a){a=a||{bubbles:!1,cancelable:!1,detail:void 0};var u=document.createEvent("CustomEvent");return u.initCustomEvent(s,a.bubbles,a.cancelable,a.detail),u}return r.prototype=window.Event.prototype,r}function t(r,s){var a=document.createElement("input");return a.type="hidden",a.name=r,a.value=s,a}function n(r,s){var a=r.getAttribute("data-to"),u=t("_method",r.getAttribute("data-method")),c=t("_csrf_token",r.getAttribute("data-csrf")),v=document.createElement("form"),k=document.createElement("input"),A=r.getAttribute("target");v.method=r.getAttribute("data-method")==="get"?"get":"post",v.action=a,v.style.display="none",A?v.target=A:s&&(v.target="_blank"),v.appendChild(c),v.appendChild(u),document.body.appendChild(v),k.type="submit",v.appendChild(k),k.click()}window.addEventListener("click",function(r){var s=r.target;if(!r.defaultPrevented)for(;s&&s.getAttribute;){var a=new i("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!s.dispatchEvent(a))return r.preventDefault(),r.stopImmediatePropagation(),!1;if(s.getAttribute("data-method")&&s.getAttribute("data-to"))return n(s,r.metaKey||r.shiftKey),r.preventDefault(),!1;s=s.parentNode}},!1),window.addEventListener("phoenix.link.click",function(r){var s=r.target.getAttribute("data-confirm");s&&!window.confirm(s)&&r.preventDefault()},!1)})();var wr=i=>typeof i=="function"?i:function(){return i},jc=typeof self<"u"?self:null,yr=typeof window<"u"?window:null,bn=jc||yr||bn,Hc="2.0.0",vi={connecting:0,open:1,closing:2,closed:3},zc=1e4,Vc=1e3,jt={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},Ti={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},Va={longpoll:"longpoll",websocket:"websocket"},Uc={complete:4},ys=class{constructor(i,e,t,n){this.channel=i,this.event=e,this.payload=t||function(){return{}},this.receivedResp=null,this.timeout=n,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}resend(i){this.timeout=i,this.reset(),this.send()}send(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}receive(i,e){return this.hasReceived(i)&&e(this.receivedResp.response),this.recHooks.push({status:i,callback:e}),this}reset(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}matchReceive({status:i,response:e,_ref:t}){this.recHooks.filter(n=>n.status===i).forEach(n=>n.callback(e))}cancelRefEvent(){this.refEvent&&this.channel.off(this.refEvent)}cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}startTimeout(){this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,i=>{this.cancelRefEvent(),this.cancelTimeout(),this.receivedResp=i,this.matchReceive(i)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}hasReceived(i){return this.receivedResp&&this.receivedResp.status===i}trigger(i,e){this.channel.trigger(this.refEvent,{status:i,response:e})}},zu=class{constructor(i,e){this.callback=i,this.timerCalc=e,this.timer=null,this.tries=0}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}},Wc=class{constructor(i,e,t){this.state=jt.closed,this.topic=i,this.params=wr(e||{}),this.socket=t,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new ys(this,Ti.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new zu(()=>{this.socket.isConnected()&&this.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(()=>this.rejoinTimer.reset())),this.stateChangeRefs.push(this.socket.onOpen(()=>{this.rejoinTimer.reset(),this.isErrored()&&this.rejoin()})),this.joinPush.receive("ok",()=>{this.state=jt.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(n=>n.send()),this.pushBuffer=[]}),this.joinPush.receive("error",()=>{this.state=jt.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.onClose(()=>{this.rejoinTimer.reset(),this.socket.hasLogger()&&this.socket.log("channel",`close ${this.topic} ${this.joinRef()}`),this.state=jt.closed,this.socket.remove(this)}),this.onError(n=>{this.socket.hasLogger()&&this.socket.log("channel",`error ${this.topic}`,n),this.isJoining()&&this.joinPush.reset(),this.state=jt.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",()=>{this.socket.hasLogger()&&this.socket.log("channel",`timeout ${this.topic} (${this.joinRef()})`,this.joinPush.timeout),new ys(this,Ti.leave,wr({}),this.timeout).send(),this.state=jt.errored,this.joinPush.reset(),this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.on(Ti.reply,(n,r)=>{this.trigger(this.replyEventName(r),n)})}join(i=this.timeout){if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=i,this.joinedOnce=!0,this.rejoin(),this.joinPush}onClose(i){this.on(Ti.close,i)}onError(i){return this.on(Ti.error,e=>i(e))}on(i,e){let t=this.bindingRef++;return this.bindings.push({event:i,ref:t,callback:e}),t}off(i,e){this.bindings=this.bindings.filter(t=>!(t.event===i&&(typeof e>"u"||e===t.ref)))}canPush(){return this.socket.isConnected()&&this.isJoined()}push(i,e,t=this.timeout){if(e=e||{},!this.joinedOnce)throw new Error(`tried to push '${i}' to '${this.topic}' before joining. Use channel.join() before pushing events`);let n=new ys(this,i,function(){return e},t);return this.canPush()?n.send():(n.startTimeout(),this.pushBuffer.push(n)),n}leave(i=this.timeout){this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=jt.leaving;let e=()=>{this.socket.hasLogger()&&this.socket.log("channel",`leave ${this.topic}`),this.trigger(Ti.close,"leave")},t=new ys(this,Ti.leave,wr({}),i);return t.receive("ok",()=>e()).receive("timeout",()=>e()),t.send(),this.canPush()||t.trigger("ok",{}),t}onMessage(i,e,t){return e}isMember(i,e,t,n){return this.topic!==i?!1:n&&n!==this.joinRef()?(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:i,event:e,payload:t,joinRef:n}),!1):!0}joinRef(){return this.joinPush.ref}rejoin(i=this.timeout){this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=jt.joining,this.joinPush.resend(i))}trigger(i,e,t,n){let r=this.onMessage(i,e,t,n);if(e&&!r)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");let s=this.bindings.filter(a=>a.event===i);for(let a=0;a<s.length;a++)s[a].callback(r,t,n||this.joinRef())}replyEventName(i){return`chan_reply_${i}`}isClosed(){return this.state===jt.closed}isErrored(){return this.state===jt.errored}isJoined(){return this.state===jt.joined}isJoining(){return this.state===jt.joining}isLeaving(){return this.state===jt.leaving}},_s=class{static request(i,e,t,n,r,s,a){if(bn.XDomainRequest){let u=new bn.XDomainRequest;return this.xdomainRequest(u,i,e,n,r,s,a)}else{let u=new bn.XMLHttpRequest;return this.xhrRequest(u,i,e,t,n,r,s,a)}}static xdomainRequest(i,e,t,n,r,s,a){return i.timeout=r,i.open(e,t),i.onload=()=>{let u=this.parseJSON(i.responseText);a&&a(u)},s&&(i.ontimeout=s),i.onprogress=()=>{},i.send(n),i}static xhrRequest(i,e,t,n,r,s,a,u){return i.open(e,t,!0),i.timeout=s,i.setRequestHeader("Content-Type",n),i.onerror=()=>u&&u(null),i.onreadystatechange=()=>{if(i.readyState===Uc.complete&&u){let c=this.parseJSON(i.responseText);u(c)}},a&&(i.ontimeout=a),i.send(r),i}static parseJSON(i){if(!i||i==="")return null;try{return JSON.parse(i)}catch{return console&&console.log("failed to parse JSON response",i),null}}static serialize(i,e){let t=[];for(var n in i){if(!Object.prototype.hasOwnProperty.call(i,n))continue;let r=e?`${e}[${n}]`:n,s=i[n];typeof s=="object"?t.push(this.serialize(s,r)):t.push(encodeURIComponent(r)+"="+encodeURIComponent(s))}return t.join("&")}static appendParams(i,e){if(Object.keys(e).length===0)return i;let t=i.match(/\?/)?"&":"?";return`${i}${t}${this.serialize(e)}`}},$c=i=>{let e="",t=new Uint8Array(i),n=t.byteLength;for(let r=0;r<n;r++)e+=String.fromCharCode(t[r]);return btoa(e)},br=class{constructor(i){this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.reqs=new Set,this.awaitingBatchAck=!1,this.currentBatch=null,this.currentBatchTimer=null,this.batchBuffer=[],this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(i),this.readyState=vi.connecting,setTimeout(()=>this.poll(),0)}normalizeEndpoint(i){return i.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+Va.websocket),"$1/"+Va.longpoll)}endpointURL(){return _s.appendParams(this.pollEndpoint,{token:this.token})}closeAndRetry(i,e,t){this.close(i,e,t),this.readyState=vi.connecting}ontimeout(){this.onerror("timeout"),this.closeAndRetry(1005,"timeout",!1)}isActive(){return this.readyState===vi.open||this.readyState===vi.connecting}poll(){this.ajax("GET","application/json",null,()=>this.ontimeout(),i=>{if(i){var{status:e,token:t,messages:n}=i;this.token=t}else e=0;switch(e){case 200:n.forEach(r=>{setTimeout(()=>this.onmessage({data:r}),0)}),this.poll();break;case 204:this.poll();break;case 410:this.readyState=vi.open,this.onopen({}),this.poll();break;case 403:this.onerror(403),this.close(1008,"forbidden",!1);break;case 0:case 500:this.onerror(500),this.closeAndRetry(1011,"internal server error",500);break;default:throw new Error(`unhandled poll status ${e}`)}})}send(i){typeof i!="string"&&(i=$c(i)),this.currentBatch?this.currentBatch.push(i):this.awaitingBatchAck?this.batchBuffer.push(i):(this.currentBatch=[i],this.currentBatchTimer=setTimeout(()=>{this.batchSend(this.currentBatch),this.currentBatch=null},0))}batchSend(i){this.awaitingBatchAck=!0,this.ajax("POST","application/x-ndjson",i.join(`
`),()=>this.onerror("timeout"),e=>{this.awaitingBatchAck=!1,!e||e.status!==200?(this.onerror(e&&e.status),this.closeAndRetry(1011,"internal server error",!1)):this.batchBuffer.length>0&&(this.batchSend(this.batchBuffer),this.batchBuffer=[])})}close(i,e,t){for(let r of this.reqs)r.abort();this.readyState=vi.closed;let n=Object.assign({code:1e3,reason:void 0,wasClean:!0},{code:i,reason:e,wasClean:t});this.batchBuffer=[],clearTimeout(this.currentBatchTimer),this.currentBatchTimer=null,typeof CloseEvent<"u"?this.onclose(new CloseEvent("close",n)):this.onclose(n)}ajax(i,e,t,n,r){let s,a=()=>{this.reqs.delete(s),n()};s=_s.request(i,this.endpointURL(),e,t,this.timeout,a,u=>{this.reqs.delete(s),this.isActive()&&r(u)}),this.reqs.add(s)}};var ws={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode(i,e){if(i.payload.constructor===ArrayBuffer)return e(this.binaryEncode(i));{let t=[i.join_ref,i.ref,i.topic,i.event,i.payload];return e(JSON.stringify(t))}},decode(i,e){if(i.constructor===ArrayBuffer)return e(this.binaryDecode(i));{let[t,n,r,s,a]=JSON.parse(i);return e({join_ref:t,ref:n,topic:r,event:s,payload:a})}},binaryEncode(i){let{join_ref:e,ref:t,event:n,topic:r,payload:s}=i,a=this.META_LENGTH+e.length+t.length+r.length+n.length,u=new ArrayBuffer(this.HEADER_LENGTH+a),c=new DataView(u),v=0;c.setUint8(v++,this.KINDS.push),c.setUint8(v++,e.length),c.setUint8(v++,t.length),c.setUint8(v++,r.length),c.setUint8(v++,n.length),Array.from(e,A=>c.setUint8(v++,A.charCodeAt(0))),Array.from(t,A=>c.setUint8(v++,A.charCodeAt(0))),Array.from(r,A=>c.setUint8(v++,A.charCodeAt(0))),Array.from(n,A=>c.setUint8(v++,A.charCodeAt(0)));var k=new Uint8Array(u.byteLength+s.byteLength);return k.set(new Uint8Array(u),0),k.set(new Uint8Array(s),u.byteLength),k.buffer},binaryDecode(i){let e=new DataView(i),t=e.getUint8(0),n=new TextDecoder;switch(t){case this.KINDS.push:return this.decodePush(i,e,n);case this.KINDS.reply:return this.decodeReply(i,e,n);case this.KINDS.broadcast:return this.decodeBroadcast(i,e,n)}},decodePush(i,e,t){let n=e.getUint8(1),r=e.getUint8(2),s=e.getUint8(3),a=this.HEADER_LENGTH+this.META_LENGTH-1,u=t.decode(i.slice(a,a+n));a=a+n;let c=t.decode(i.slice(a,a+r));a=a+r;let v=t.decode(i.slice(a,a+s));a=a+s;let k=i.slice(a,i.byteLength);return{join_ref:u,ref:null,topic:c,event:v,payload:k}},decodeReply(i,e,t){let n=e.getUint8(1),r=e.getUint8(2),s=e.getUint8(3),a=e.getUint8(4),u=this.HEADER_LENGTH+this.META_LENGTH,c=t.decode(i.slice(u,u+n));u=u+n;let v=t.decode(i.slice(u,u+r));u=u+r;let k=t.decode(i.slice(u,u+s));u=u+s;let A=t.decode(i.slice(u,u+a));u=u+a;let N=i.slice(u,i.byteLength),y={status:A,response:N};return{join_ref:c,ref:v,topic:k,event:Ti.reply,payload:y}},decodeBroadcast(i,e,t){let n=e.getUint8(1),r=e.getUint8(2),s=this.HEADER_LENGTH+2,a=t.decode(i.slice(s,s+n));s=s+n;let u=t.decode(i.slice(s,s+r));s=s+r;let c=i.slice(s,i.byteLength);return{join_ref:null,ref:null,topic:a,event:u,payload:c}}},Vu=class{constructor(i,e={}){this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=e.timeout||zc,this.transport=e.transport||bn.WebSocket||br,this.primaryPassedHealthCheck=!1,this.longPollFallbackMs=e.longPollFallbackMs,this.fallbackTimer=null,this.sessionStore=e.sessionStorage||bn&&bn.sessionStorage,this.establishedConnections=0,this.defaultEncoder=ws.encode.bind(ws),this.defaultDecoder=ws.decode.bind(ws),this.closeWasClean=!1,this.binaryType=e.binaryType||"arraybuffer",this.connectClock=1,this.transport!==br?(this.encode=e.encode||this.defaultEncoder,this.decode=e.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder);let t=null;yr&&yr.addEventListener&&(yr.addEventListener("pagehide",n=>{this.conn&&(this.disconnect(),t=this.connectClock)}),yr.addEventListener("pageshow",n=>{t===this.connectClock&&(t=null,this.connect())})),this.heartbeatIntervalMs=e.heartbeatIntervalMs||3e4,this.rejoinAfterMs=n=>e.rejoinAfterMs?e.rejoinAfterMs(n):[1e3,2e3,5e3][n-1]||1e4,this.reconnectAfterMs=n=>e.reconnectAfterMs?e.reconnectAfterMs(n):[10,50,100,150,200,250,500,1e3,2e3][n-1]||5e3,this.logger=e.logger||null,!this.logger&&e.debug&&(this.logger=(n,r,s)=>{console.log(`${n}: ${r}`,s)}),this.longpollerTimeout=e.longpollerTimeout||2e4,this.params=wr(e.params||{}),this.endPoint=`${i}/${Va.websocket}`,this.vsn=e.vsn||Hc,this.heartbeatTimeoutTimer=null,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new zu(()=>{this.teardown(()=>this.connect())},this.reconnectAfterMs)}getLongPollTransport(){return br}replaceTransport(i){this.connectClock++,this.closeWasClean=!0,clearTimeout(this.fallbackTimer),this.reconnectTimer.reset(),this.conn&&(this.conn.close(),this.conn=null),this.transport=i}protocol(){return location.protocol.match(/^https/)?"wss":"ws"}endPointURL(){let i=_s.appendParams(_s.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return i.charAt(0)!=="/"?i:i.charAt(1)==="/"?`${this.protocol()}:${i}`:`${this.protocol()}://${location.host}${i}`}disconnect(i,e,t){this.connectClock++,this.closeWasClean=!0,clearTimeout(this.fallbackTimer),this.reconnectTimer.reset(),this.teardown(i,e,t)}connect(i){i&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=wr(i)),!this.conn&&(this.longPollFallbackMs&&this.transport!==br?this.connectWithFallback(br,this.longPollFallbackMs):this.transportConnect())}log(i,e,t){this.logger&&this.logger(i,e,t)}hasLogger(){return this.logger!==null}onOpen(i){let e=this.makeRef();return this.stateChangeCallbacks.open.push([e,i]),e}onClose(i){let e=this.makeRef();return this.stateChangeCallbacks.close.push([e,i]),e}onError(i){let e=this.makeRef();return this.stateChangeCallbacks.error.push([e,i]),e}onMessage(i){let e=this.makeRef();return this.stateChangeCallbacks.message.push([e,i]),e}ping(i){if(!this.isConnected())return!1;let e=this.makeRef(),t=Date.now();this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:e});let n=this.onMessage(r=>{r.ref===e&&(this.off([n]),i(Date.now()-t))});return!0}transportConnect(){this.connectClock++,this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=()=>this.onConnOpen(),this.conn.onerror=i=>this.onConnError(i),this.conn.onmessage=i=>this.onConnMessage(i),this.conn.onclose=i=>this.onConnClose(i)}getSession(i){return this.sessionStore&&this.sessionStore.getItem(i)}storeSession(i,e){this.sessionStore&&this.sessionStore.setItem(i,e)}connectWithFallback(i,e=2500){clearTimeout(this.fallbackTimer);let t=!1,n=!0,r,s,a=u=>{this.log("transport",`falling back to ${i.name}...`,u),this.off([r,s]),n=!1,this.replaceTransport(i),this.transportConnect()};if(this.getSession(`phx:fallback:${i.name}`))return a("memorized");this.fallbackTimer=setTimeout(a,e),s=this.onError(u=>{this.log("transport","error",u),n&&!t&&(clearTimeout(this.fallbackTimer),a(u))}),this.onOpen(()=>{if(t=!0,!n)return this.primaryPassedHealthCheck||this.storeSession(`phx:fallback:${i.name}`,"true"),this.log("transport",`established ${i.name} fallback`);clearTimeout(this.fallbackTimer),this.fallbackTimer=setTimeout(a,e),this.ping(u=>{this.log("transport","connected to primary after",u),this.primaryPassedHealthCheck=!0,clearTimeout(this.fallbackTimer)})}),this.transportConnect()}clearHeartbeats(){clearTimeout(this.heartbeatTimer),clearTimeout(this.heartbeatTimeoutTimer)}onConnOpen(){this.hasLogger()&&this.log("transport",`${this.transport.name} connected to ${this.endPointURL()}`),this.closeWasClean=!1,this.establishedConnections++,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(([,i])=>i())}heartbeatTimeout(){this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.triggerChanError(),this.closeWasClean=!1,this.teardown(()=>this.reconnectTimer.scheduleTimeout(),Vc,"heartbeat timeout"))}resetHeartbeat(){this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,this.clearHeartbeats(),this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs))}teardown(i,e,t){if(!this.conn)return i&&i();this.waitForBufferDone(()=>{this.conn&&(e?this.conn.close(e,t||""):this.conn.close()),this.waitForSocketClosed(()=>{this.conn&&(this.conn.onopen=function(){},this.conn.onerror=function(){},this.conn.onmessage=function(){},this.conn.onclose=function(){},this.conn=null),i&&i()})})}waitForBufferDone(i,e=1){if(e===5||!this.conn||!this.conn.bufferedAmount){i();return}setTimeout(()=>{this.waitForBufferDone(i,e+1)},150*e)}waitForSocketClosed(i,e=1){if(e===5||!this.conn||this.conn.readyState===vi.closed){i();return}setTimeout(()=>{this.waitForSocketClosed(i,e+1)},150*e)}onConnClose(i){let e=i&&i.code;this.hasLogger()&&this.log("transport","close",i),this.triggerChanError(),this.clearHeartbeats(),!this.closeWasClean&&e!==1e3&&this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(([,t])=>t(i))}onConnError(i){this.hasLogger()&&this.log("transport",i);let e=this.transport,t=this.establishedConnections;this.stateChangeCallbacks.error.forEach(([,n])=>{n(i,e,t)}),(e===this.transport||t>0)&&this.triggerChanError()}triggerChanError(){this.channels.forEach(i=>{i.isErrored()||i.isLeaving()||i.isClosed()||i.trigger(Ti.error)})}connectionState(){switch(this.conn&&this.conn.readyState){case vi.connecting:return"connecting";case vi.open:return"open";case vi.closing:return"closing";default:return"closed"}}isConnected(){return this.connectionState()==="open"}remove(i){this.off(i.stateChangeRefs),this.channels=this.channels.filter(e=>e!==i)}off(i){for(let e in this.stateChangeCallbacks)this.stateChangeCallbacks[e]=this.stateChangeCallbacks[e].filter(([t])=>i.indexOf(t)===-1)}channel(i,e={}){let t=new Wc(i,e,this);return this.channels.push(t),t}push(i){if(this.hasLogger()){let{topic:e,event:t,payload:n,ref:r,join_ref:s}=i;this.log("push",`${e} ${t} (${s}, ${r})`,n)}this.isConnected()?this.encode(i,e=>this.conn.send(e)):this.sendBuffer.push(()=>this.encode(i,e=>this.conn.send(e)))}makeRef(){let i=this.ref+1;return i===this.ref?this.ref=0:this.ref=i,this.ref.toString()}sendHeartbeat(){this.pendingHeartbeatRef&&!this.isConnected()||(this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatTimeoutTimer=setTimeout(()=>this.heartbeatTimeout(),this.heartbeatIntervalMs))}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(i=>i()),this.sendBuffer=[])}onConnMessage(i){this.decode(i.data,e=>{let{topic:t,event:n,payload:r,ref:s,join_ref:a}=e;s&&s===this.pendingHeartbeatRef&&(this.clearHeartbeats(),this.pendingHeartbeatRef=null,this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)),this.hasLogger()&&this.log("receive",`${r.status||""} ${t} ${n} ${s&&"("+s+")"||""}`,r);for(let u=0;u<this.channels.length;u++){let c=this.channels[u];c.isMember(t,n,r,a)&&c.trigger(n,r,s,a)}for(let u=0;u<this.stateChangeCallbacks.message.length;u++){let[,c]=this.stateChangeCallbacks.message[u];c(e)}})}leaveOpenTopic(i){let e=this.channels.find(t=>t.topic===i&&(t.isJoined()||t.isJoining()));e&&(this.hasLogger()&&this.log("transport",`leaving duplicate topic "${i}"`),e.leave())}};var bl="consecutive-reloads",qc=10,Kc=5e3,Jc=1e4,Gc=3e4,yl=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading","phx-hook-loading"],Li="data-phx-component",Ua="data-phx-link",Xc="track-static",Yc="data-phx-link-state",Zn="data-phx-ref-loading",Gt="data-phx-ref-src",Ht="data-phx-ref-lock",wl="track-uploads",Ri="data-phx-upload-ref",to="data-phx-preflighted-refs",Zc="data-phx-done-refs",Uu="drop-target",Xa="data-phx-active-refs",xs="phx:live-file:updated",_l="data-phx-skip",kl="data-phx-id",Wu="data-phx-prune",$u="phx-connected",yn="phx-loading",Gn="phx-error",qu="phx-client-error",_r="phx-server-error",kn="data-phx-parent-id",io="data-phx-main",Qi="data-phx-root-id",Ya="viewport-top",Za="viewport-bottom",Qc="trigger-action",Rs="phx-has-focused",eh=["text","textarea","number","email","password","search","tel","url","date","time","datetime-local","color","range"],Al=["checkbox","radio"],Pr="phx-has-submitted",wi="data-phx-session",An=`[${wi}]`,Ku="data-phx-sticky",_n="data-phx-static",Qa="data-phx-readonly",Yn="data-phx-disabled",Ju="disable-with",Ps="data-phx-disable-with-restore",kr="hook",th="debounce",ih="throttle",Lr="update",Wa="stream",Ar="data-phx-stream",nh="key",bi="phxPrivate",Gu="auto-recover",ks="phx:live-socket:debug",$a="phx:live-socket:profiling",qa="phx:live-socket:latency-sim",As="phx:nav-history-position",rh="progress",Xu="mounted",Yu="__phoenix_reload_status__",sh=1,Zu=3,ah=200,oh="phx-",uh=3e4,Er="debounce-trigger",Cr="throttled",Qu="debounce-prev-key",lh={debounce:300,throttle:300},el=[Zn,Gt,Ht],Es="d",yi="s",Ka="r",gt="c",tl="e",il="r",nl="t",dh="p",rl="stream",ch=class{constructor(i,e,t){let{chunk_size:n,chunk_timeout:r}=e;this.liveSocket=t,this.entry=i,this.offset=0,this.chunkSize=n,this.chunkTimeout=r,this.chunkTimer=null,this.errored=!1,this.uploadChannel=t.channel(`lvu:${i.ref}`,{token:i.metadata()})}error(i){this.errored||(this.uploadChannel.leave(),this.errored=!0,clearTimeout(this.chunkTimer),this.entry.error(i))}upload(){this.uploadChannel.onError(i=>this.error(i)),this.uploadChannel.join().receive("ok",i=>this.readNextChunk()).receive("error",i=>this.error(i))}isDone(){return this.offset>=this.entry.file.size}readNextChunk(){let i=new window.FileReader,e=this.entry.file.slice(this.offset,this.chunkSize+this.offset);i.onload=t=>{if(t.target.error===null)this.offset+=t.target.result.byteLength,this.pushChunk(t.target.result);else return xt("Read error: "+t.target.error)},i.readAsArrayBuffer(e)}pushChunk(i){this.uploadChannel.isJoined()&&this.uploadChannel.push("chunk",i,this.chunkTimeout).receive("ok",()=>{this.entry.progress(this.offset/this.entry.file.size*100),this.isDone()||(this.chunkTimer=setTimeout(()=>this.readNextChunk(),this.liveSocket.getLatencySim()||0))}).receive("error",({reason:e})=>this.error(e))}},xt=(i,e)=>console.error&&console.error(i,e),xi=i=>{let e=typeof i;return e==="number"||e==="string"&&/^(0|[1-9]\d*)$/.test(i)};function hh(){let i=new Set,e=document.querySelectorAll("*[id]");for(let t=0,n=e.length;t<n;t++)i.has(e[t].id)?console.error(`Multiple IDs detected: ${e[t].id}. Ensure unique element ids.`):i.add(e[t].id)}var fh=(i,e,t,n)=>{i.liveSocket.isDebugEnabled()&&console.log(`${i.id} ${e}: ${t} - `,n)},Sr=i=>typeof i=="function"?i:function(){return i},Ls=i=>JSON.parse(JSON.stringify(i)),Rr=(i,e,t)=>{do{if(i.matches(`[${e}]`)&&!i.disabled)return i;i=i.parentElement||i.parentNode}while(i!==null&&i.nodeType===1&&!(t&&t.isSameNode(i)||i.matches(An)));return null},Xn=i=>i!==null&&typeof i=="object"&&!(i instanceof Array),ph=(i,e)=>JSON.stringify(i)===JSON.stringify(e),sl=i=>{for(let e in i)return!1;return!0},Zi=(i,e)=>i&&e(i),gh=function(i,e,t,n){i.forEach(r=>{new ch(r,t.config,n).upload()})},mh={canPushState(){return typeof history.pushState<"u"},dropLocal(i,e,t){return i.removeItem(this.localKey(e,t))},updateLocal(i,e,t,n,r){let s=this.getLocal(i,e,t),a=this.localKey(e,t),u=s===null?n:r(s);return i.setItem(a,JSON.stringify(u)),u},getLocal(i,e,t){return JSON.parse(i.getItem(this.localKey(e,t)))},updateCurrentState(i){this.canPushState()&&history.replaceState(i(history.state||{}),"",window.location.href)},pushState(i,e,t){if(this.canPushState()){if(t!==window.location.href){if(e.type=="redirect"&&e.scroll){let n=history.state||{};n.scroll=e.scroll,history.replaceState(n,"",window.location.href)}delete e.scroll,history[i+"State"](e,"",t||null),window.requestAnimationFrame(()=>{let n=this.getHashTargetEl(window.location.hash);n?n.scrollIntoView():e.type==="redirect"&&window.scroll(0,0)})}}else this.redirect(t)},setCookie(i,e,t){let n=typeof t=="number"?` max-age=${t};`:"";document.cookie=`${i}=${e};${n} path=/`},getCookie(i){return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${i}s*=s*([^;]*).*$)|^.*$`),"$1")},deleteCookie(i){document.cookie=`${i}=; max-age=-1; path=/`},redirect(i,e){e&&this.setCookie("__phoenix_flash__",e,60),window.location=i},localKey(i,e){return`${i}-${e}`},getHashTargetEl(i){let e=i.toString().substring(1);if(e!=="")return document.getElementById(e)||document.querySelector(`a[name="${e}"]`)}},Tt=mh,wn={byId(i){return document.getElementById(i)||xt(`no id found for ${i}`)},removeClass(i,e){i.classList.remove(e),i.classList.length===0&&i.removeAttribute("class")},all(i,e,t){if(!i)return[];let n=Array.from(i.querySelectorAll(e));return t?n.forEach(t):n},childNodeLength(i){let e=document.createElement("template");return e.innerHTML=i,e.content.childElementCount},isUploadInput(i){return i.type==="file"&&i.getAttribute(Ri)!==null},isAutoUpload(i){return i.hasAttribute("data-phx-auto-upload")},findUploadInputs(i){let e=i.id,t=this.all(document,`input[type="file"][${Ri}][form="${e}"]`);return this.all(i,`input[type="file"][${Ri}]`).concat(t)},findComponentNodeList(i,e){return this.filterWithinSameLiveView(this.all(i,`[${Li}="${e}"]`),i)},isPhxDestroyed(i){return!!(i.id&&wn.private(i,"destroyed"))},wantsNewTab(i){let e=i.ctrlKey||i.shiftKey||i.metaKey||i.button&&i.button===1,t=i.target instanceof HTMLAnchorElement&&i.target.hasAttribute("download"),n=i.target.hasAttribute("target")&&i.target.getAttribute("target").toLowerCase()==="_blank",r=i.target.hasAttribute("target")&&!i.target.getAttribute("target").startsWith("_");return e||n||t||r},isUnloadableFormSubmit(i){return i.target&&i.target.getAttribute("method")==="dialog"||i.submitter&&i.submitter.getAttribute("formmethod")==="dialog"?!1:!i.defaultPrevented&&!this.wantsNewTab(i)},isNewPageClick(i,e){let t=i.target instanceof HTMLAnchorElement?i.target.getAttribute("href"):null,n;if(i.defaultPrevented||t===null||this.wantsNewTab(i)||t.startsWith("mailto:")||t.startsWith("tel:")||i.target.isContentEditable)return!1;try{n=new URL(t)}catch{try{n=new URL(t,e)}catch{return!0}}return n.host===e.host&&n.protocol===e.protocol&&n.pathname===e.pathname&&n.search===e.search?n.hash===""&&!n.href.endsWith("#"):n.protocol.startsWith("http")},markPhxChildDestroyed(i){this.isPhxChild(i)&&i.setAttribute(wi,""),this.putPrivate(i,"destroyed",!0)},findPhxChildrenInFragment(i,e){let t=document.createElement("template");return t.innerHTML=i,this.findPhxChildren(t.content,e)},isIgnored(i,e){return(i.getAttribute(e)||i.getAttribute("data-phx-update"))==="ignore"},isPhxUpdate(i,e,t){return i.getAttribute&&t.indexOf(i.getAttribute(e))>=0},findPhxSticky(i){return this.all(i,`[${Ku}]`)},findPhxChildren(i,e){return this.all(i,`${An}[${kn}="${e}"]`)},findExistingParentCIDs(i,e){let t=new Set,n=new Set;return e.forEach(r=>{this.filterWithinSameLiveView(this.all(i,`[${Li}="${r}"]`),i).forEach(s=>{t.add(r),this.all(s,`[${Li}]`).map(a=>parseInt(a.getAttribute(Li))).forEach(a=>n.add(a))})}),n.forEach(r=>t.delete(r)),t},filterWithinSameLiveView(i,e){return e.querySelector(An)?i.filter(t=>this.withinSameLiveView(t,e)):i},withinSameLiveView(i,e){for(;i=i.parentNode;){if(i.isSameNode(e))return!0;if(i.getAttribute(wi)!==null)return!1}},private(i,e){return i[bi]&&i[bi][e]},deletePrivate(i,e){i[bi]&&delete i[bi][e]},putPrivate(i,e,t){i[bi]||(i[bi]={}),i[bi][e]=t},updatePrivate(i,e,t,n){let r=this.private(i,e);r===void 0?this.putPrivate(i,e,n(t)):this.putPrivate(i,e,n(r))},syncPendingAttrs(i,e){i.hasAttribute(Gt)&&(yl.forEach(t=>{i.classList.contains(t)&&e.classList.add(t)}),el.filter(t=>i.hasAttribute(t)).forEach(t=>{e.setAttribute(t,i.getAttribute(t))}))},copyPrivates(i,e){e[bi]&&(i[bi]=e[bi])},putTitle(i){let e=document.querySelector("title");if(e){let{prefix:t,suffix:n,default:r}=e.dataset,s=typeof i!="string"||i.trim()==="";if(s&&typeof r!="string")return;let a=s?r:i;document.title=`${t||""}${a||""}${n||""}`}else document.title=i},debounce(i,e,t,n,r,s,a,u){let c=i.getAttribute(t),v=i.getAttribute(r);c===""&&(c=n),v===""&&(v=s);let k=c||v;switch(k){case null:return u();case"blur":this.once(i,"debounce-blur")&&i.addEventListener("blur",()=>{a()&&u()});return;default:let A=parseInt(k),N=()=>v?this.deletePrivate(i,Cr):u(),y=this.incCycle(i,Er,N);if(isNaN(A))return xt(`invalid throttle/debounce value: ${k}`);if(v){let g=!1;if(e.type==="keydown"){let b=this.private(i,Qu);this.putPrivate(i,Qu,e.key),g=b!==e.key}if(!g&&this.private(i,Cr))return!1;{u();let b=setTimeout(()=>{a()&&this.triggerCycle(i,Er)},A);this.putPrivate(i,Cr,b)}}else setTimeout(()=>{a()&&this.triggerCycle(i,Er,y)},A);let d=i.form;d&&this.once(d,"bind-debounce")&&d.addEventListener("submit",()=>{Array.from(new FormData(d).entries(),([g])=>{let b=d.querySelector(`[name="${g}"]`);this.incCycle(b,Er),this.deletePrivate(b,Cr)})}),this.once(i,"bind-debounce")&&i.addEventListener("blur",()=>{clearTimeout(this.private(i,Cr)),this.triggerCycle(i,Er)})}},triggerCycle(i,e,t){let[n,r]=this.private(i,e);t||(t=n),t===n&&(this.incCycle(i,e),r())},once(i,e){return this.private(i,e)===!0?!1:(this.putPrivate(i,e,!0),!0)},incCycle(i,e,t=function(){}){let[n]=this.private(i,e)||[0,t];return n++,this.putPrivate(i,e,[n,t]),n},maintainPrivateHooks(i,e,t,n){i.hasAttribute&&i.hasAttribute("data-phx-hook")&&!e.hasAttribute("data-phx-hook")&&e.setAttribute("data-phx-hook",i.getAttribute("data-phx-hook")),e.hasAttribute&&(e.hasAttribute(t)||e.hasAttribute(n))&&e.setAttribute("data-phx-hook","Phoenix.InfiniteScroll")},putCustomElHook(i,e){i.isConnected?i.setAttribute("data-phx-hook",""):console.error(`
        hook attached to non-connected DOM element
        ensure you are calling createHook within your connectedCallback. ${i.outerHTML}
      `),this.putPrivate(i,"custom-el-hook",e)},getCustomElHook(i){return this.private(i,"custom-el-hook")},isUsedInput(i){return i.nodeType===Node.ELEMENT_NODE&&(this.private(i,Rs)||this.private(i,Pr))},resetForm(i){Array.from(i.elements).forEach(e=>{this.deletePrivate(e,Rs),this.deletePrivate(e,Pr)})},isPhxChild(i){return i.getAttribute&&i.getAttribute(kn)},isPhxSticky(i){return i.getAttribute&&i.getAttribute(Ku)!==null},isChildOfAny(i,e){return!!e.find(t=>t.contains(i))},firstPhxChild(i){return this.isPhxChild(i)?i:this.all(i,`[${kn}]`)[0]},dispatchEvent(i,e,t={}){let n=!0;i.nodeName==="INPUT"&&i.type==="file"&&e==="click"&&(n=!1);let a={bubbles:t.bubbles===void 0?n:!!t.bubbles,cancelable:!0,detail:t.detail||{}},u=e==="click"?new MouseEvent("click",a):new CustomEvent(e,a);i.dispatchEvent(u)},cloneNode(i,e){if(typeof e>"u")return i.cloneNode(!0);{let t=i.cloneNode(!1);return t.innerHTML=e,t}},mergeAttrs(i,e,t={}){let n=new Set(t.exclude||[]),r=t.isIgnored,s=e.attributes;for(let u=s.length-1;u>=0;u--){let c=s[u].name;if(n.has(c))c==="value"&&i.value===e.value&&i.setAttribute("value",e.getAttribute(c));else{let v=e.getAttribute(c);i.getAttribute(c)!==v&&(!r||r&&c.startsWith("data-"))&&i.setAttribute(c,v)}}let a=i.attributes;for(let u=a.length-1;u>=0;u--){let c=a[u].name;r?c.startsWith("data-")&&!e.hasAttribute(c)&&!el.includes(c)&&i.removeAttribute(c):e.hasAttribute(c)||i.removeAttribute(c)}},mergeFocusedInput(i,e){i instanceof HTMLSelectElement||wn.mergeAttrs(i,e,{exclude:["value"]}),e.readOnly?i.setAttribute("readonly",!0):i.removeAttribute("readonly")},hasSelectionRange(i){return i.setSelectionRange&&(i.type==="text"||i.type==="textarea")},restoreFocus(i,e,t){if(i instanceof HTMLSelectElement&&i.focus(),!wn.isTextualInput(i))return;i.matches(":focus")||i.focus(),this.hasSelectionRange(i)&&i.setSelectionRange(e,t)},isFormInput(i){return/^(?:input|select|textarea)$/i.test(i.tagName)&&i.type!=="button"},syncAttrsToProps(i){i instanceof HTMLInputElement&&Al.indexOf(i.type.toLocaleLowerCase())>=0&&(i.checked=i.getAttribute("checked")!==null)},isTextualInput(i){return eh.indexOf(i.type)>=0},isNowTriggerFormExternal(i,e){return i.getAttribute&&i.getAttribute(e)!==null},cleanChildNodes(i,e){if(wn.isPhxUpdate(i,e,["append","prepend"])){let t=[];i.childNodes.forEach(n=>{n.id||(!(n.nodeType===Node.TEXT_NODE&&n.nodeValue.trim()==="")&&n.nodeType!==Node.COMMENT_NODE&&xt(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(n.outerHTML||n.nodeValue).trim()}"

`),t.push(n))}),t.forEach(n=>n.remove())}},replaceRootContainer(i,e,t){let n=new Set(["id",wi,_n,io,Qi]);if(i.tagName.toLowerCase()===e.toLowerCase())return Array.from(i.attributes).filter(r=>!n.has(r.name.toLowerCase())).forEach(r=>i.removeAttribute(r.name)),Object.keys(t).filter(r=>!n.has(r.toLowerCase())).forEach(r=>i.setAttribute(r,t[r])),i;{let r=document.createElement(e);return Object.keys(t).forEach(s=>r.setAttribute(s,t[s])),n.forEach(s=>r.setAttribute(s,i.getAttribute(s))),r.innerHTML=i.innerHTML,i.replaceWith(r),r}},getSticky(i,e,t){let n=(wn.private(i,"sticky")||[]).find(([r])=>e===r);if(n){let[r,s,a]=n;return a}else return typeof t=="function"?t():t},deleteSticky(i,e){this.updatePrivate(i,"sticky",[],t=>t.filter(([n,r])=>n!==e))},putSticky(i,e,t){let n=t(i);this.updatePrivate(i,"sticky",[],r=>{let s=r.findIndex(([a])=>e===a);return s>=0?r[s]=[e,t,n]:r.push([e,t,n]),r})},applyStickyOperations(i){let e=wn.private(i,"sticky");e&&e.forEach(([t,n,r])=>this.putSticky(i,t,n))}},H=wn,Dr=class{static isActive(i,e){let t=e._phxRef===void 0,r=i.getAttribute(Xa).split(",").indexOf(tt.genFileRef(e))>=0;return e.size>0&&(t||r)}static isPreflighted(i,e){return i.getAttribute(to).split(",").indexOf(tt.genFileRef(e))>=0&&this.isActive(i,e)}static isPreflightInProgress(i){return i._preflightInProgress===!0}static markPreflightInProgress(i){i._preflightInProgress=!0}constructor(i,e,t,n){this.ref=tt.genFileRef(e),this.fileEl=i,this.file=e,this.view=t,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._lastProgressSent=-1,this._onDone=function(){},this._onElUpdated=this.onElUpdated.bind(this),this.fileEl.addEventListener(xs,this._onElUpdated),this.autoUpload=n}metadata(){return this.meta}progress(i){this._progress=Math.floor(i),this._progress>this._lastProgressSent&&(this._progress>=100?(this._progress=100,this._lastProgressSent=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,()=>{tt.untrackFile(this.fileEl,this.file),this._onDone()})):(this._lastProgressSent=this._progress,this.view.pushFileProgress(this.fileEl,this.ref,this._progress)))}isCancelled(){return this._isCancelled}cancel(){this.file._preflightInProgress=!1,this._isCancelled=!0,this._isDone=!0,this._onDone()}isDone(){return this._isDone}error(i="failed"){this.fileEl.removeEventListener(xs,this._onElUpdated),this.view.pushFileProgress(this.fileEl,this.ref,{error:i}),this.isAutoUpload()||tt.clearFiles(this.fileEl)}isAutoUpload(){return this.autoUpload}onDone(i){this._onDone=()=>{this.fileEl.removeEventListener(xs,this._onElUpdated),i()}}onElUpdated(){this.fileEl.getAttribute(Xa).split(",").indexOf(this.ref)===-1&&(tt.untrackFile(this.fileEl,this.file),this.cancel())}toPreflightPayload(){return{last_modified:this.file.lastModified,name:this.file.name,relative_path:this.file.webkitRelativePath,size:this.file.size,type:this.file.type,ref:this.ref,meta:typeof this.file.meta=="function"?this.file.meta():void 0}}uploader(i){if(this.meta.uploader){let e=i[this.meta.uploader]||xt(`no uploader configured for ${this.meta.uploader}`);return{name:this.meta.uploader,callback:e}}else return{name:"channel",callback:gh}}zipPostFlight(i){this.meta=i.entries[this.ref],this.meta||xt(`no preflight upload response returned with ref ${this.ref}`,{input:this.fileEl,response:i})}},vh=0,tt=class eo{static genFileRef(e){let t=e._phxRef;return t!==void 0?t:(e._phxRef=(vh++).toString(),e._phxRef)}static getEntryDataURL(e,t,n){let r=this.activeFiles(e).find(s=>this.genFileRef(s)===t);n(URL.createObjectURL(r))}static hasUploadsInProgress(e){let t=0;return H.findUploadInputs(e).forEach(n=>{n.getAttribute(to)!==n.getAttribute(Zc)&&t++}),t>0}static serializeUploads(e){let t=this.activeFiles(e),n={};return t.forEach(r=>{let s={path:e.name},a=e.getAttribute(Ri);n[a]=n[a]||[],s.ref=this.genFileRef(r),s.last_modified=r.lastModified,s.name=r.name||s.ref,s.relative_path=r.webkitRelativePath,s.type=r.type,s.size=r.size,typeof r.meta=="function"&&(s.meta=r.meta()),n[a].push(s)}),n}static clearFiles(e){e.value=null,e.removeAttribute(Ri),H.putPrivate(e,"files",[])}static untrackFile(e,t){H.putPrivate(e,"files",H.private(e,"files").filter(n=>!Object.is(n,t)))}static trackFiles(e,t,n){if(e.getAttribute("multiple")!==null){let r=t.filter(s=>!this.activeFiles(e).find(a=>Object.is(a,s)));H.updatePrivate(e,"files",[],s=>s.concat(r)),e.value=null}else n&&n.files.length>0&&(e.files=n.files),H.putPrivate(e,"files",t)}static activeFileInputs(e){let t=H.findUploadInputs(e);return Array.from(t).filter(n=>n.files&&this.activeFiles(n).length>0)}static activeFiles(e){return(H.private(e,"files")||[]).filter(t=>Dr.isActive(e,t))}static inputsAwaitingPreflight(e){let t=H.findUploadInputs(e);return Array.from(t).filter(n=>this.filesAwaitingPreflight(n).length>0)}static filesAwaitingPreflight(e){return this.activeFiles(e).filter(t=>!Dr.isPreflighted(e,t)&&!Dr.isPreflightInProgress(t))}static markPreflightInProgress(e){e.forEach(t=>Dr.markPreflightInProgress(t.file))}constructor(e,t,n){this.autoUpload=H.isAutoUpload(e),this.view=t,this.onComplete=n,this._entries=Array.from(eo.filesAwaitingPreflight(e)||[]).map(r=>new Dr(e,r,t,this.autoUpload)),eo.markPreflightInProgress(this._entries),this.numEntriesInProgress=this._entries.length}isAutoUpload(){return this.autoUpload}entries(){return this._entries}initAdapterUpload(e,t,n){this._entries=this._entries.map(s=>(s.isCancelled()?(this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()):(s.zipPostFlight(e),s.onDone(()=>{this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()})),s));let r=this._entries.reduce((s,a)=>{if(!a.meta)return s;let{name:u,callback:c}=a.uploader(n.uploaders);return s[u]=s[u]||{callback:c,entries:[]},s[u].entries.push(a),s},{});for(let s in r){let{callback:a,entries:u}=r[s];a(u,t,e,n)}}},bh={anyOf(i,e){return e.find(t=>i instanceof t)},isFocusable(i,e){return i instanceof HTMLAnchorElement&&i.rel!=="ignore"||i instanceof HTMLAreaElement&&i.href!==void 0||!i.disabled&&this.anyOf(i,[HTMLInputElement,HTMLSelectElement,HTMLTextAreaElement,HTMLButtonElement])||i instanceof HTMLIFrameElement||i.tabIndex>0||!e&&i.getAttribute("tabindex")!==null&&i.getAttribute("aria-hidden")!=="true"},attemptFocus(i,e){if(this.isFocusable(i,e))try{i.focus()}catch{}return!!document.activeElement&&document.activeElement.isSameNode(i)},focusFirstInteractive(i){let e=i.firstElementChild;for(;e;){if(this.attemptFocus(e,!0)||this.focusFirstInteractive(e,!0))return!0;e=e.nextElementSibling}},focusFirst(i){let e=i.firstElementChild;for(;e;){if(this.attemptFocus(e)||this.focusFirst(e))return!0;e=e.nextElementSibling}},focusLast(i){let e=i.lastElementChild;for(;e;){if(this.attemptFocus(e)||this.focusLast(e))return!0;e=e.previousElementSibling}}},Qn=bh,El={LiveFileUpload:{activeRefs(){return this.el.getAttribute(Xa)},preflightedRefs(){return this.el.getAttribute(to)},mounted(){this.preflightedWas=this.preflightedRefs()},updated(){let i=this.preflightedRefs();this.preflightedWas!==i&&(this.preflightedWas=i,i===""&&this.__view().cancelSubmit(this.el.form)),this.activeRefs()===""&&(this.el.value=null),this.el.dispatchEvent(new CustomEvent(xs))}},LiveImgPreview:{mounted(){this.ref=this.el.getAttribute("data-phx-entry-ref"),this.inputEl=document.getElementById(this.el.getAttribute(Ri)),tt.getEntryDataURL(this.inputEl,this.ref,i=>{this.url=i,this.el.src=i})},destroyed(){URL.revokeObjectURL(this.url)}},FocusWrap:{mounted(){this.focusStart=this.el.firstElementChild,this.focusEnd=this.el.lastElementChild,this.focusStart.addEventListener("focus",()=>Qn.focusLast(this.el)),this.focusEnd.addEventListener("focus",()=>Qn.focusFirst(this.el)),this.el.addEventListener("phx:show-end",()=>this.el.focus()),window.getComputedStyle(this.el).display!=="none"&&Qn.focusFirst(this.el)}}},Cl=i=>["HTML","BODY"].indexOf(i.nodeName.toUpperCase())>=0?null:["scroll","auto"].indexOf(getComputedStyle(i).overflowY)>=0?i:Cl(i.parentElement),al=i=>i?i.scrollTop:document.documentElement.scrollTop||document.body.scrollTop,no=i=>i?i.getBoundingClientRect().bottom:window.innerHeight||document.documentElement.clientHeight,ro=i=>i?i.getBoundingClientRect().top:0,yh=(i,e)=>{let t=i.getBoundingClientRect();return Math.ceil(t.top)>=ro(e)&&Math.ceil(t.left)>=0&&Math.floor(t.top)<=no(e)},wh=(i,e)=>{let t=i.getBoundingClientRect();return Math.ceil(t.bottom)>=ro(e)&&Math.ceil(t.left)>=0&&Math.floor(t.bottom)<=no(e)},ol=(i,e)=>{let t=i.getBoundingClientRect();return Math.ceil(t.top)>=ro(e)&&Math.ceil(t.left)>=0&&Math.floor(t.top)<=no(e)};El.InfiniteScroll={mounted(){this.scrollContainer=Cl(this.el);let i=al(this.scrollContainer),e=!1,t=500,n=null,r=this.throttle(t,(u,c)=>{n=()=>!0,this.liveSocket.execJSHookPush(this.el,u,{id:c.id,_overran:!0},()=>{n=null})}),s=this.throttle(t,(u,c)=>{n=()=>c.scrollIntoView({block:"start"}),this.liveSocket.execJSHookPush(this.el,u,{id:c.id},()=>{n=null,window.requestAnimationFrame(()=>{ol(c,this.scrollContainer)||c.scrollIntoView({block:"start"})})})}),a=this.throttle(t,(u,c)=>{n=()=>c.scrollIntoView({block:"end"}),this.liveSocket.execJSHookPush(this.el,u,{id:c.id},()=>{n=null,window.requestAnimationFrame(()=>{ol(c,this.scrollContainer)||c.scrollIntoView({block:"end"})})})});this.onScroll=u=>{let c=al(this.scrollContainer);if(n)return i=c,n();let v=this.el.getBoundingClientRect(),k=this.el.getAttribute(this.liveSocket.binding("viewport-top")),A=this.el.getAttribute(this.liveSocket.binding("viewport-bottom")),N=this.el.lastElementChild,y=this.el.firstElementChild,d=c<i,g=c>i;d&&k&&!e&&v.top>=0?(e=!0,r(k,y)):g&&e&&v.top<=0&&(e=!1),k&&d&&yh(y,this.scrollContainer)?s(k,y):A&&g&&wh(N,this.scrollContainer)&&a(A,N),i=c},this.scrollContainer?this.scrollContainer.addEventListener("scroll",this.onScroll):window.addEventListener("scroll",this.onScroll)},destroyed(){this.scrollContainer?this.scrollContainer.removeEventListener("scroll",this.onScroll):window.removeEventListener("scroll",this.onScroll)},throttle(i,e){let t=0,n;return(...r)=>{let s=Date.now(),a=i-(s-t);a<=0||a>i?(n&&(clearTimeout(n),n=null),t=s,e(...r)):n||(n=setTimeout(()=>{t=Date.now(),n=null,e(...r)},a))}}};var _h=El,kh=class{constructor(i){this.el=i,this.loadingRef=i.hasAttribute(Zn)?parseInt(i.getAttribute(Zn),10):null,this.lockRef=i.hasAttribute(Ht)?parseInt(i.getAttribute(Ht),10):null}maybeUndo(i,e,t){this.isWithin(i)&&(this.undoLocks(i,e,t),this.undoLoading(i,e),this.isFullyResolvedBy(i)&&this.el.removeAttribute(Gt))}isWithin(i){return!(this.loadingRef!==null&&this.loadingRef>i&&this.lockRef!==null&&this.lockRef>i)}undoLocks(i,e,t){if(!this.isLockUndoneBy(i))return;let n=H.private(this.el,Ht);n&&(t(n),H.deletePrivate(this.el,Ht)),this.el.removeAttribute(Ht);let r={detail:{ref:i,event:e},bubbles:!0,cancelable:!1};this.el.dispatchEvent(new CustomEvent(`phx:undo-lock:${this.lockRef}`,r))}undoLoading(i,e){if(!this.isLoadingUndoneBy(i)){this.canUndoLoading(i)&&this.el.classList.contains("phx-submit-loading")&&this.el.classList.remove("phx-change-loading");return}if(this.canUndoLoading(i)){this.el.removeAttribute(Zn);let t=this.el.getAttribute(Yn),n=this.el.getAttribute(Qa);n!==null&&(this.el.readOnly=n==="true",this.el.removeAttribute(Qa)),t!==null&&(this.el.disabled=t==="true",this.el.removeAttribute(Yn));let r=this.el.getAttribute(Ps);r!==null&&(this.el.innerText=r,this.el.removeAttribute(Ps));let s={detail:{ref:i,event:e},bubbles:!0,cancelable:!1};this.el.dispatchEvent(new CustomEvent(`phx:undo-loading:${this.loadingRef}`,s))}yl.forEach(t=>{(t!=="phx-submit-loading"||this.canUndoLoading(i))&&H.removeClass(this.el,t)})}isLoadingUndoneBy(i){return this.loadingRef===null?!1:this.loadingRef<=i}isLockUndoneBy(i){return this.lockRef===null?!1:this.lockRef<=i}isFullyResolvedBy(i){return(this.loadingRef===null||this.loadingRef<=i)&&(this.lockRef===null||this.lockRef<=i)}canUndoLoading(i){return this.lockRef===null||this.lockRef<=i}},Ah=class{constructor(i,e,t){let n=new Set,r=new Set([...e.children].map(a=>a.id)),s=[];Array.from(i.children).forEach(a=>{if(a.id&&(n.add(a.id),r.has(a.id))){let u=a.previousElementSibling&&a.previousElementSibling.id;s.push({elementId:a.id,previousElementId:u})}}),this.containerId=e.id,this.updateType=t,this.elementsToModify=s,this.elementIdsToAdd=[...r].filter(a=>!n.has(a))}perform(){let i=H.byId(this.containerId);this.elementsToModify.forEach(e=>{e.previousElementId?Zi(document.getElementById(e.previousElementId),t=>{Zi(document.getElementById(e.elementId),n=>{n.previousElementSibling&&n.previousElementSibling.id==t.id||t.insertAdjacentElement("afterend",n)})}):Zi(document.getElementById(e.elementId),t=>{t.previousElementSibling==null||i.insertAdjacentElement("afterbegin",t)})}),this.updateType=="prepend"&&this.elementIdsToAdd.reverse().forEach(e=>{Zi(document.getElementById(e),t=>i.insertAdjacentElement("afterbegin",t))})}},ul=11;function Eh(i,e){var t=e.attributes,n,r,s,a,u;if(!(e.nodeType===ul||i.nodeType===ul)){for(var c=t.length-1;c>=0;c--)n=t[c],r=n.name,s=n.namespaceURI,a=n.value,s?(r=n.localName||r,u=i.getAttributeNS(s,r),u!==a&&(n.prefix==="xmlns"&&(r=n.name),i.setAttributeNS(s,r,a))):(u=i.getAttribute(r),u!==a&&i.setAttribute(r,a));for(var v=i.attributes,k=v.length-1;k>=0;k--)n=v[k],r=n.name,s=n.namespaceURI,s?(r=n.localName||r,e.hasAttributeNS(s,r)||i.removeAttributeNS(s,r)):e.hasAttribute(r)||i.removeAttribute(r)}}var Cs,Ch="http://www.w3.org/1999/xhtml",Lt=typeof document>"u"?void 0:document,Sh=!!Lt&&"content"in Lt.createElement("template"),Dh=!!Lt&&Lt.createRange&&"createContextualFragment"in Lt.createRange();function Th(i){var e=Lt.createElement("template");return e.innerHTML=i,e.content.childNodes[0]}function xh(i){Cs||(Cs=Lt.createRange(),Cs.selectNode(Lt.body));var e=Cs.createContextualFragment(i);return e.childNodes[0]}function Lh(i){var e=Lt.createElement("body");return e.innerHTML=i,e.childNodes[0]}function Rh(i){return i=i.trim(),Sh?Th(i):Dh?xh(i):Lh(i)}function Ss(i,e){var t=i.nodeName,n=e.nodeName,r,s;return t===n?!0:(r=t.charCodeAt(0),s=n.charCodeAt(0),r<=90&&s>=97?t===n.toUpperCase():s<=90&&r>=97?n===t.toUpperCase():!1)}function Ph(i,e){return!e||e===Ch?Lt.createElement(i):Lt.createElementNS(e,i)}function Ih(i,e){for(var t=i.firstChild;t;){var n=t.nextSibling;e.appendChild(t),t=n}return e}function Ja(i,e,t){i[t]!==e[t]&&(i[t]=e[t],i[t]?i.setAttribute(t,""):i.removeAttribute(t))}var ll={OPTION:function(i,e){var t=i.parentNode;if(t){var n=t.nodeName.toUpperCase();n==="OPTGROUP"&&(t=t.parentNode,n=t&&t.nodeName.toUpperCase()),n==="SELECT"&&!t.hasAttribute("multiple")&&(i.hasAttribute("selected")&&!e.selected&&(i.setAttribute("selected","selected"),i.removeAttribute("selected")),t.selectedIndex=-1)}Ja(i,e,"selected")},INPUT:function(i,e){Ja(i,e,"checked"),Ja(i,e,"disabled"),i.value!==e.value&&(i.value=e.value),e.hasAttribute("value")||i.removeAttribute("value")},TEXTAREA:function(i,e){var t=e.value;i.value!==t&&(i.value=t);var n=i.firstChild;if(n){var r=n.nodeValue;if(r==t||!t&&r==i.placeholder)return;n.nodeValue=t}},SELECT:function(i,e){if(!e.hasAttribute("multiple")){for(var t=-1,n=0,r=i.firstChild,s,a;r;)if(a=r.nodeName&&r.nodeName.toUpperCase(),a==="OPTGROUP")s=r,r=s.firstChild;else{if(a==="OPTION"){if(r.hasAttribute("selected")){t=n;break}n++}r=r.nextSibling,!r&&s&&(r=s.nextSibling,s=null)}i.selectedIndex=t}}},Tr=1,dl=11,cl=3,hl=8;function Yi(){}function Oh(i){if(i)return i.getAttribute&&i.getAttribute("id")||i.id}function Mh(i){return function(t,n,r){if(r||(r={}),typeof n=="string")if(t.nodeName==="#document"||t.nodeName==="HTML"||t.nodeName==="BODY"){var s=n;n=Lt.createElement("html"),n.innerHTML=s}else n=Rh(n);else n.nodeType===dl&&(n=n.firstElementChild);var a=r.getNodeKey||Oh,u=r.onBeforeNodeAdded||Yi,c=r.onNodeAdded||Yi,v=r.onBeforeElUpdated||Yi,k=r.onElUpdated||Yi,A=r.onBeforeNodeDiscarded||Yi,N=r.onNodeDiscarded||Yi,y=r.onBeforeElChildrenUpdated||Yi,d=r.skipFromChildren||Yi,g=r.addChild||function(z,$){return z.appendChild($)},b=r.childrenOnly===!0,E=Object.create(null),P=[];function o(z){P.push(z)}function h(z,$){if(z.nodeType===Tr)for(var ee=z.firstChild;ee;){var X=void 0;$&&(X=a(ee))?o(X):(N(ee),ee.firstChild&&h(ee,$)),ee=ee.nextSibling}}function f(z,$,ee){A(z)!==!1&&($&&$.removeChild(z),N(z),h(z,ee))}function _(z){if(z.nodeType===Tr||z.nodeType===dl)for(var $=z.firstChild;$;){var ee=a($);ee&&(E[ee]=$),_($),$=$.nextSibling}}_(t);function C(z){c(z);for(var $=z.firstChild;$;){var ee=$.nextSibling,X=a($);if(X){var ie=E[X];ie&&Ss($,ie)?($.parentNode.replaceChild(ie,$),L(ie,$)):C($)}else C($);$=ee}}function I(z,$,ee){for(;$;){var X=$.nextSibling;(ee=a($))?o(ee):f($,z,!0),$=X}}function L(z,$,ee){var X=a($);if(X&&delete E[X],!ee){var ie=v(z,$);if(ie===!1||(ie instanceof HTMLElement&&(z=ie,_(z)),i(z,$),k(z),y(z,$)===!1))return}z.nodeName!=="TEXTAREA"?F(z,$):ll.TEXTAREA(z,$)}function F(z,$){var ee=d(z,$),X=$.firstChild,ie=z.firstChild,ae,me,re,ye,ne;e:for(;X;){for(ye=X.nextSibling,ae=a(X);!ee&&ie;){if(re=ie.nextSibling,X.isSameNode&&X.isSameNode(ie)){X=ye,ie=re;continue e}me=a(ie);var xe=ie.nodeType,je=void 0;if(xe===X.nodeType&&(xe===Tr?(ae?ae!==me&&((ne=E[ae])?re===ne?je=!1:(z.insertBefore(ne,ie),me?o(me):f(ie,z,!0),ie=ne,me=a(ie)):je=!1):me&&(je=!1),je=je!==!1&&Ss(ie,X),je&&L(ie,X)):(xe===cl||xe==hl)&&(je=!0,ie.nodeValue!==X.nodeValue&&(ie.nodeValue=X.nodeValue))),je){X=ye,ie=re;continue e}me?o(me):f(ie,z,!0),ie=re}if(ae&&(ne=E[ae])&&Ss(ne,X))ee||g(z,ne),L(ne,X);else{var He=u(X);He!==!1&&(He&&(X=He),X.actualize&&(X=X.actualize(z.ownerDocument||Lt)),g(z,X),C(X))}X=ye,ie=re}I(z,ie,me);var rt=ll[z.nodeName];rt&&rt(z,$)}var K=t,W=K.nodeType,q=n.nodeType;if(!b){if(W===Tr)q===Tr?Ss(t,n)||(N(t),K=Ih(t,Ph(n.nodeName,n.namespaceURI))):K=n;else if(W===cl||W===hl){if(q===W)return K.nodeValue!==n.nodeValue&&(K.nodeValue=n.nodeValue),K;K=n}}if(K===n)N(t);else{if(n.isSameNode&&n.isSameNode(K))return;if(L(K,n,b),P)for(var G=0,x=P.length;G<x;G++){var U=E[P[G]];U&&f(U,U.parentNode,!1)}}return!b&&K!==t&&t.parentNode&&(K.actualize&&(K=K.actualize(t.ownerDocument||Lt)),t.parentNode.replaceChild(K,t)),K}}var Nh=Mh(Eh),fl=Nh,Ds=class{static patchWithClonedTree(i,e,t){let n=t.getActiveElement(),{selectionStart:r,selectionEnd:s}=n&&H.hasSelectionRange(n)?n:{},a=t.binding(Lr);fl(i,e,{childrenOnly:!1,onBeforeElUpdated:(u,c)=>{if(H.syncPendingAttrs(u,c),!i.isSameNode(u)&&u.hasAttribute(Ht)||H.isIgnored(u,a))return!1;if(n&&n.isSameNode(u)&&H.isFormInput(u))return H.mergeFocusedInput(u,c),!1}}),t.silenceEvents(()=>H.restoreFocus(n,r,s))}constructor(i,e,t,n,r,s){this.view=i,this.liveSocket=i.liveSocket,this.container=e,this.id=t,this.rootID=i.root.id,this.html=n,this.streams=r,this.streamInserts={},this.streamComponentRestore={},this.targetCID=s,this.cidPatch=xi(this.targetCID),this.pendingRemoves=[],this.phxRemove=this.liveSocket.binding("remove"),this.targetContainer=this.isCIDPatch()?this.targetCIDContainer(n):e,this.callbacks={beforeadded:[],beforeupdated:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[],aftertransitionsDiscarded:[]}}before(i,e){this.callbacks[`before${i}`].push(e)}after(i,e){this.callbacks[`after${i}`].push(e)}trackBefore(i,...e){this.callbacks[`before${i}`].forEach(t=>t(...e))}trackAfter(i,...e){this.callbacks[`after${i}`].forEach(t=>t(...e))}markPrunableContentForRemoval(){let i=this.liveSocket.binding(Lr);H.all(this.container,`[${i}=append] > *, [${i}=prepend] > *`,e=>{e.setAttribute(Wu,"")})}perform(i){let{view:e,liveSocket:t,html:n,container:r,targetContainer:s}=this;if(this.isCIDPatch()&&!s)return;let a=t.getActiveElement(),{selectionStart:u,selectionEnd:c}=a&&H.hasSelectionRange(a)?a:{},v=t.binding(Lr),k=t.binding(Ya),A=t.binding(Za),N=t.binding(Qc),y=[],d=[],g=[],b=null;function E(P,o,h=!1){let f={childrenOnly:P.getAttribute(Li)===null&&!h,getNodeKey:_=>H.isPhxDestroyed(_)?null:i?_.id:_.id||_.getAttribute&&_.getAttribute(kl),skipFromChildren:_=>_.getAttribute(v)===Wa,addChild:(_,C)=>{let{ref:I,streamAt:L}=this.getStreamInsert(C);if(I===void 0)return _.appendChild(C);if(this.setStreamRef(C,I),L===0)_.insertAdjacentElement("afterbegin",C);else if(L===-1){let F=_.lastElementChild;if(F&&!F.hasAttribute(Ar)){let K=Array.from(_.children).find(W=>!W.hasAttribute(Ar));_.insertBefore(C,K)}else _.appendChild(C)}else if(L>0){let F=Array.from(_.children)[L];_.insertBefore(C,F)}},onBeforeNodeAdded:_=>{H.maintainPrivateHooks(_,_,k,A),this.trackBefore("added",_);let C=_;return this.streamComponentRestore[_.id]&&(C=this.streamComponentRestore[_.id],delete this.streamComponentRestore[_.id],E.call(this,C,_,!0)),C},onNodeAdded:_=>{_.getAttribute&&this.maybeReOrderStream(_,!0),_ instanceof HTMLImageElement&&_.srcset?_.srcset=_.srcset:_ instanceof HTMLVideoElement&&_.autoplay&&_.play(),H.isNowTriggerFormExternal(_,N)&&(b=_),(H.isPhxChild(_)&&e.ownsElement(_)||H.isPhxSticky(_)&&e.ownsElement(_.parentNode))&&this.trackAfter("phxChildAdded",_),y.push(_)},onNodeDiscarded:_=>this.onNodeDiscarded(_),onBeforeNodeDiscarded:_=>_.getAttribute&&_.getAttribute(Wu)!==null?!0:!(_.parentElement!==null&&_.id&&H.isPhxUpdate(_.parentElement,v,[Wa,"append","prepend"])||this.maybePendingRemove(_)||this.skipCIDSibling(_)),onElUpdated:_=>{H.isNowTriggerFormExternal(_,N)&&(b=_),d.push(_),this.maybeReOrderStream(_,!1)},onBeforeElUpdated:(_,C)=>{if(_.id&&_.isSameNode(P)&&_.id!==C.id)return f.onNodeDiscarded(_),_.replaceWith(C),f.onNodeAdded(C);if(H.syncPendingAttrs(_,C),H.maintainPrivateHooks(_,C,k,A),H.cleanChildNodes(C,v),this.skipCIDSibling(C))return this.maybeReOrderStream(_),!1;if(H.isPhxSticky(_))return[wi,_n,Qi].map(F=>[F,_.getAttribute(F),C.getAttribute(F)]).forEach(([F,K,W])=>{W&&K!==W&&_.setAttribute(F,W)}),!1;if(H.isIgnored(_,v)||_.form&&_.form.isSameNode(b))return this.trackBefore("updated",_,C),H.mergeAttrs(_,C,{isIgnored:H.isIgnored(_,v)}),d.push(_),H.applyStickyOperations(_),!1;if(_.type==="number"&&_.validity&&_.validity.badInput)return!1;let I=a&&_.isSameNode(a)&&H.isFormInput(_),L=I&&this.isChangedSelect(_,C);if(_.hasAttribute(Gt)){H.isUploadInput(_)&&(H.mergeAttrs(_,C,{isIgnored:!0}),this.trackBefore("updated",_,C),d.push(_)),H.applyStickyOperations(_);let K=_.hasAttribute(Ht)?H.private(_,Ht)||_.cloneNode(!0):null;K&&(H.putPrivate(_,Ht,K),I||(_=K))}if(H.isPhxChild(C)){let F=_.getAttribute(wi);return H.mergeAttrs(_,C,{exclude:[_n]}),F!==""&&_.setAttribute(wi,F),_.setAttribute(Qi,this.rootID),H.applyStickyOperations(_),!1}return H.copyPrivates(C,_),I&&_.type!=="hidden"&&!L?(this.trackBefore("updated",_,C),H.mergeFocusedInput(_,C),H.syncAttrsToProps(_),d.push(_),H.applyStickyOperations(_),!1):(L&&_.blur(),H.isPhxUpdate(C,v,["append","prepend"])&&g.push(new Ah(_,C,C.getAttribute(v))),H.syncAttrsToProps(C),H.applyStickyOperations(C),this.trackBefore("updated",_,C),_)}};fl(P,o,f)}return this.trackBefore("added",r),this.trackBefore("updated",r,r),t.time("morphdom",()=>{this.streams.forEach(([P,o,h,f])=>{o.forEach(([_,C,I])=>{this.streamInserts[_]={ref:P,streamAt:C,limit:I,reset:f}}),f!==void 0&&H.all(r,`[${Ar}="${P}"]`,_=>{this.removeStreamChildElement(_)}),h.forEach(_=>{let C=r.querySelector(`[id="${_}"]`);C&&this.removeStreamChildElement(C)})}),i&&H.all(this.container,`[${v}=${Wa}]`,P=>{this.liveSocket.owner(P,o=>{o===this.view&&Array.from(P.children).forEach(h=>{this.removeStreamChildElement(h)})})}),E.call(this,s,n)}),t.isDebugEnabled()&&(hh(),Array.from(document.querySelectorAll("input[name=id]")).forEach(P=>{P.form&&console.error(`Detected an input with name="id" inside a form! This will cause problems when patching the DOM.
`,P)})),g.length>0&&t.time("post-morph append/prepend restoration",()=>{g.forEach(P=>P.perform())}),t.silenceEvents(()=>H.restoreFocus(a,u,c)),H.dispatchEvent(document,"phx:update"),y.forEach(P=>this.trackAfter("added",P)),d.forEach(P=>this.trackAfter("updated",P)),this.transitionPendingRemoves(),b&&(t.unload(),Object.getPrototypeOf(b).submit.call(b)),!0}onNodeDiscarded(i){(H.isPhxChild(i)||H.isPhxSticky(i))&&this.liveSocket.destroyViewByEl(i),this.trackAfter("discarded",i)}maybePendingRemove(i){return i.getAttribute&&i.getAttribute(this.phxRemove)!==null?(this.pendingRemoves.push(i),!0):!1}removeStreamChildElement(i){this.streamInserts[i.id]?(this.streamComponentRestore[i.id]=i,i.remove()):this.maybePendingRemove(i)||(i.remove(),this.onNodeDiscarded(i))}getStreamInsert(i){return(i.id?this.streamInserts[i.id]:{})||{}}setStreamRef(i,e){H.putSticky(i,Ar,t=>t.setAttribute(Ar,e))}maybeReOrderStream(i,e){let{ref:t,streamAt:n,reset:r}=this.getStreamInsert(i);if(n!==void 0&&(this.setStreamRef(i,t),!(!r&&!e)&&i.parentElement)){if(n===0)i.parentElement.insertBefore(i,i.parentElement.firstElementChild);else if(n>0){let s=Array.from(i.parentElement.children),a=s.indexOf(i);if(n>=s.length-1)i.parentElement.appendChild(i);else{let u=s[n];a>n?i.parentElement.insertBefore(i,u):i.parentElement.insertBefore(i,u.nextElementSibling)}}this.maybeLimitStream(i)}}maybeLimitStream(i){let{limit:e}=this.getStreamInsert(i),t=e!==null&&Array.from(i.parentElement.children);e&&e<0&&t.length>e*-1?t.slice(0,t.length+e).forEach(n=>this.removeStreamChildElement(n)):e&&e>=0&&t.length>e&&t.slice(e).forEach(n=>this.removeStreamChildElement(n))}transitionPendingRemoves(){let{pendingRemoves:i,liveSocket:e}=this;i.length>0&&e.transitionRemoves(i,!1,()=>{i.forEach(t=>{let n=H.firstPhxChild(t);n&&e.destroyViewByEl(n),t.remove()}),this.trackAfter("transitionsDiscarded",i)})}isChangedSelect(i,e){return!(i instanceof HTMLSelectElement)||i.multiple?!1:i.options.length!==e.options.length?!0:(e.value=i.value,!i.isEqualNode(e))}isCIDPatch(){return this.cidPatch}skipCIDSibling(i){return i.nodeType===Node.ELEMENT_NODE&&i.hasAttribute(_l)}targetCIDContainer(i){if(!this.isCIDPatch())return;let[e,...t]=H.findComponentNodeList(this.container,this.targetCID);return t.length===0&&H.childNodeLength(i)===1?e:e&&e.parentNode}indexOf(i,e){return Array.from(i.children).indexOf(e)}},Bh=new Set(["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"]),Fh=new Set(["'",'"']),pl=(i,e,t)=>{let n=0,r=!1,s,a,u,c,v,k,A=i.match(/^(\s*(?:<!--.*?-->\s*)*)<([^\s\/>]+)/);if(A===null)throw new Error(`malformed html ${i}`);for(n=A[0].length,s=A[1],u=A[2],c=n,n;n<i.length&&i.charAt(n)!==">";n++)if(i.charAt(n)==="="){let d=i.slice(n-3,n)===" id";n++;let g=i.charAt(n);if(Fh.has(g)){let b=n;for(n++,n;n<i.length&&i.charAt(n)!==g;n++);if(d){v=i.slice(b+1,n);break}}}let N=i.length-1;for(r=!1;N>=s.length+u.length;){let d=i.charAt(N);if(r)d==="-"&&i.slice(N-3,N)==="<!-"?(r=!1,N-=4):N-=1;else if(d===">"&&i.slice(N-2,N)==="--")r=!0,N-=3;else{if(d===">")break;N-=1}}a=i.slice(N+1,i.length);let y=Object.keys(e).map(d=>e[d]===!0?d:`${d}="${e[d]}"`).join(" ");if(t){let d=v?` id="${v}"`:"";Bh.has(u)?k=`<${u}${d}${y===""?"":" "}${y}/>`:k=`<${u}${d}${y===""?"":" "}${y}></${u}>`}else{let d=i.slice(c,N+1);k=`<${u}${y===""?"":" "}${y}${d}`}return[k,s,a]},gl=class{static extract(i){let{[il]:e,[tl]:t,[nl]:n}=i;return delete i[il],delete i[tl],delete i[nl],{diff:i,title:n,reply:e||null,events:t||[]}}constructor(i,e){this.viewId=i,this.rendered={},this.magicId=0,this.mergeDiff(e)}parentViewId(){return this.viewId}toString(i){let[e,t]=this.recursiveToString(this.rendered,this.rendered[gt],i,!0,{});return[e,t]}recursiveToString(i,e=i[gt],t,n,r){t=t?new Set(t):null;let s={buffer:"",components:e,onlyCids:t,streams:new Set};return this.toOutputBuffer(i,null,s,n,r),[s.buffer,s.streams]}componentCIDs(i){return Object.keys(i[gt]||{}).map(e=>parseInt(e))}isComponentOnlyDiff(i){return i[gt]?Object.keys(i).length===1:!1}getComponent(i,e){return i[gt][e]}resetRender(i){this.rendered[gt][i]&&(this.rendered[gt][i].reset=!0)}mergeDiff(i){let e=i[gt],t={};if(delete i[gt],this.rendered=this.mutableMerge(this.rendered,i),this.rendered[gt]=this.rendered[gt]||{},e){let n=this.rendered[gt];for(let r in e)e[r]=this.cachedFindComponent(r,e[r],n,e,t);for(let r in e)n[r]=e[r];i[gt]=e}}cachedFindComponent(i,e,t,n,r){if(r[i])return r[i];{let s,a,u=e[yi];if(xi(u)){let c;u>0?c=this.cachedFindComponent(u,n[u],t,n,r):c=t[-u],a=c[yi],s=this.cloneMerge(c,e,!0),s[yi]=a}else s=e[yi]!==void 0||t[i]===void 0?e:this.cloneMerge(t[i],e,!1);return r[i]=s,s}}mutableMerge(i,e){return e[yi]!==void 0?e:(this.doMutableMerge(i,e),i)}doMutableMerge(i,e){for(let t in e){let n=e[t],r=i[t];Xn(n)&&n[yi]===void 0&&Xn(r)?this.doMutableMerge(r,n):i[t]=n}i[Ka]&&(i.newRender=!0)}cloneMerge(i,e,t){let n={...i,...e};for(let r in n){let s=e[r],a=i[r];Xn(s)&&s[yi]===void 0&&Xn(a)?n[r]=this.cloneMerge(a,s,t):s===void 0&&Xn(a)&&(n[r]=this.cloneMerge(a,{},t))}return t?(delete n.magicId,delete n.newRender):i[Ka]&&(n.newRender=!0),n}componentToString(i){let[e,t]=this.recursiveCIDToString(this.rendered[gt],i,null),[n,r,s]=pl(e,{});return[n,t]}pruneCIDs(i){i.forEach(e=>delete this.rendered[gt][e])}get(){return this.rendered}isNewFingerprint(i={}){return!!i[yi]}templateStatic(i,e){return typeof i=="number"?e[i]:i}nextMagicID(){return this.magicId++,`m${this.magicId}-${this.parentViewId()}`}toOutputBuffer(i,e,t,n,r={}){if(i[Es])return this.comprehensionToBuffer(i,e,t);let{[yi]:s}=i;s=this.templateStatic(s,e);let a=i[Ka],u=t.buffer;a&&(t.buffer=""),n&&a&&!i.magicId&&(i.newRender=!0,i.magicId=this.nextMagicID()),t.buffer+=s[0];for(let c=1;c<s.length;c++)this.dynamicToBuffer(i[c-1],e,t,n),t.buffer+=s[c];if(a){let c=!1,v;n||i.magicId?(c=n&&!i.newRender,v={[kl]:i.magicId,...r}):v=r,c&&(v[_l]=!0);let[k,A,N]=pl(t.buffer,v,c);i.newRender=!1,t.buffer=u+A+k+N}}comprehensionToBuffer(i,e,t){let{[Es]:n,[yi]:r,[rl]:s}=i,[a,u,c,v]=s||[null,{},[],null];r=this.templateStatic(r,e);let k=e||i[dh];for(let A=0;A<n.length;A++){let N=n[A];t.buffer+=r[0];for(let y=1;y<r.length;y++){let d=!1;this.dynamicToBuffer(N[y-1],k,t,d),t.buffer+=r[y]}}s!==void 0&&(i[Es].length>0||c.length>0||v)&&(delete i[rl],i[Es]=[],t.streams.add(s))}dynamicToBuffer(i,e,t,n){if(typeof i=="number"){let[r,s]=this.recursiveCIDToString(t.components,i,t.onlyCids);t.buffer+=r,t.streams=new Set([...t.streams,...s])}else Xn(i)?this.toOutputBuffer(i,e,t,n,{}):t.buffer+=i}recursiveCIDToString(i,e,t){let n=i[e]||xt(`no component for CID ${e}`,i),r={[Li]:e},s=t&&!t.has(e);n.newRender=!s,n.magicId=`c${e}-${this.parentViewId()}`;let a=!n.reset,[u,c]=this.recursiveToString(n,i,t,a,r);return delete n.reset,[u,c]}},ml=[],vl=200,jh={exec(i,e,t,n,r,s){let[a,u]=s||[null,{callback:s&&s.callback}];(t.charAt(0)==="["?JSON.parse(t):[[a,u]]).forEach(([v,k])=>{v===a&&(k={...u,...k},k.callback=k.callback||u.callback),this.filterToEls(n.liveSocket,r,k).forEach(A=>{this[`exec_${v}`](i,e,t,n,r,A,k)})})},isVisible(i){return!!(i.offsetWidth||i.offsetHeight||i.getClientRects().length>0)},isInViewport(i){let e=i.getBoundingClientRect(),t=window.innerHeight||document.documentElement.clientHeight,n=window.innerWidth||document.documentElement.clientWidth;return e.right>0&&e.bottom>0&&e.left<n&&e.top<t},exec_exec(i,e,t,n,r,s,{attr:a,to:u}){(u?H.all(document,u):[r]).forEach(v=>{let k=v.getAttribute(a);if(!k)throw new Error(`expected ${a} to contain JS command on "${u}"`);n.liveSocket.execJS(v,k,e)})},exec_dispatch(i,e,t,n,r,s,{event:a,detail:u,bubbles:c}){u=u||{},u.dispatcher=r,H.dispatchEvent(s,a,{detail:u,bubbles:c})},exec_push(i,e,t,n,r,s,a){let{event:u,data:c,target:v,page_loading:k,loading:A,value:N,dispatcher:y,callback:d}=a,g={loading:A,value:N,target:v,page_loading:!!k},b=e==="change"&&y?y:r,E=v||b.getAttribute(n.binding("target"))||b;n.withinTargets(E,(P,o)=>{if(P.isConnected())if(e==="change"){let{newCid:h,_target:f}=a;f=f||(H.isFormInput(r)?r.name:void 0),f&&(g._target=f),P.pushInput(r,o,h,u||t,g,d)}else if(e==="submit"){let{submitter:h}=a;P.submitForm(r,o,u||t,h,g,d)}else P.pushEvent(e,r,o,u||t,c,g,d)})},exec_navigate(i,e,t,n,r,s,{href:a,replace:u}){n.liveSocket.historyRedirect(i,a,u?"replace":"push",null,r)},exec_patch(i,e,t,n,r,s,{href:a,replace:u}){n.liveSocket.pushHistoryPatch(i,a,u?"replace":"push",r)},exec_focus(i,e,t,n,r,s){window.requestAnimationFrame(()=>Qn.attemptFocus(s))},exec_focus_first(i,e,t,n,r,s){window.requestAnimationFrame(()=>Qn.focusFirstInteractive(s)||Qn.focusFirst(s))},exec_push_focus(i,e,t,n,r,s){window.requestAnimationFrame(()=>ml.push(s||r))},exec_pop_focus(i,e,t,n,r,s){window.requestAnimationFrame(()=>{let a=ml.pop();a&&a.focus()})},exec_add_class(i,e,t,n,r,s,{names:a,transition:u,time:c,blocking:v}){this.addOrRemoveClasses(s,a,[],u,c,n,v)},exec_remove_class(i,e,t,n,r,s,{names:a,transition:u,time:c,blocking:v}){this.addOrRemoveClasses(s,[],a,u,c,n,v)},exec_toggle_class(i,e,t,n,r,s,{names:a,transition:u,time:c,blocking:v}){this.toggleClasses(s,a,u,c,n,v)},exec_toggle_attr(i,e,t,n,r,s,{attr:[a,u,c]}){this.toggleAttr(s,a,u,c)},exec_transition(i,e,t,n,r,s,{time:a,transition:u,blocking:c}){this.addOrRemoveClasses(s,[],[],u,a,n,c)},exec_toggle(i,e,t,n,r,s,{display:a,ins:u,outs:c,time:v,blocking:k}){this.toggle(e,n,s,a,u,c,v,k)},exec_show(i,e,t,n,r,s,{display:a,transition:u,time:c,blocking:v}){this.show(e,n,s,a,u,c,v)},exec_hide(i,e,t,n,r,s,{display:a,transition:u,time:c,blocking:v}){this.hide(e,n,s,a,u,c,v)},exec_set_attr(i,e,t,n,r,s,{attr:[a,u]}){this.setOrRemoveAttrs(s,[[a,u]],[])},exec_remove_attr(i,e,t,n,r,s,{attr:a}){this.setOrRemoveAttrs(s,[],[a])},show(i,e,t,n,r,s,a){this.isVisible(t)||this.toggle(i,e,t,n,r,null,s,a)},hide(i,e,t,n,r,s,a){this.isVisible(t)&&this.toggle(i,e,t,n,null,r,s,a)},toggle(i,e,t,n,r,s,a,u){a=a||vl;let[c,v,k]=r||[[],[],[]],[A,N,y]=s||[[],[],[]];if(c.length>0||A.length>0)if(this.isVisible(t)){let d=()=>{this.addOrRemoveClasses(t,N,c.concat(v).concat(k)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(t,A,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(t,y,N))})},g=()=>{this.addOrRemoveClasses(t,[],A.concat(y)),H.putSticky(t,"toggle",b=>b.style.display="none"),t.dispatchEvent(new Event("phx:hide-end"))};t.dispatchEvent(new Event("phx:hide-start")),u===!1?(d(),setTimeout(g,a)):e.transition(a,d,g)}else{if(i==="remove")return;let d=()=>{this.addOrRemoveClasses(t,v,A.concat(N).concat(y));let b=n||this.defaultDisplay(t);H.putSticky(t,"toggle",E=>E.style.display=b),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(t,c,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(t,k,v))})},g=()=>{this.addOrRemoveClasses(t,[],c.concat(k)),t.dispatchEvent(new Event("phx:show-end"))};t.dispatchEvent(new Event("phx:show-start")),u===!1?(d(),setTimeout(g,a)):e.transition(a,d,g)}else this.isVisible(t)?window.requestAnimationFrame(()=>{t.dispatchEvent(new Event("phx:hide-start")),H.putSticky(t,"toggle",d=>d.style.display="none"),t.dispatchEvent(new Event("phx:hide-end"))}):window.requestAnimationFrame(()=>{t.dispatchEvent(new Event("phx:show-start"));let d=n||this.defaultDisplay(t);H.putSticky(t,"toggle",g=>g.style.display=d),t.dispatchEvent(new Event("phx:show-end"))})},toggleClasses(i,e,t,n,r,s){window.requestAnimationFrame(()=>{let[a,u]=H.getSticky(i,"classes",[[],[]]),c=e.filter(k=>a.indexOf(k)<0&&!i.classList.contains(k)),v=e.filter(k=>u.indexOf(k)<0&&i.classList.contains(k));this.addOrRemoveClasses(i,c,v,t,n,r,s)})},toggleAttr(i,e,t,n){i.hasAttribute(e)?n!==void 0?i.getAttribute(e)===t?this.setOrRemoveAttrs(i,[[e,n]],[]):this.setOrRemoveAttrs(i,[[e,t]],[]):this.setOrRemoveAttrs(i,[],[e]):this.setOrRemoveAttrs(i,[[e,t]],[])},addOrRemoveClasses(i,e,t,n,r,s,a){r=r||vl;let[u,c,v]=n||[[],[],[]];if(u.length>0){let k=()=>{this.addOrRemoveClasses(i,c,[].concat(u).concat(v)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,u,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,v,c))})},A=()=>this.addOrRemoveClasses(i,e.concat(v),t.concat(u).concat(c));a===!1?(k(),setTimeout(A,r)):s.transition(r,k,A);return}window.requestAnimationFrame(()=>{let[k,A]=H.getSticky(i,"classes",[[],[]]),N=e.filter(b=>k.indexOf(b)<0&&!i.classList.contains(b)),y=t.filter(b=>A.indexOf(b)<0&&i.classList.contains(b)),d=k.filter(b=>t.indexOf(b)<0).concat(N),g=A.filter(b=>e.indexOf(b)<0).concat(y);H.putSticky(i,"classes",b=>(b.classList.remove(...g),b.classList.add(...d),[d,g]))})},setOrRemoveAttrs(i,e,t){let[n,r]=H.getSticky(i,"attrs",[[],[]]),s=e.map(([c,v])=>c).concat(t),a=n.filter(([c,v])=>!s.includes(c)).concat(e),u=r.filter(c=>!s.includes(c)).concat(t);H.putSticky(i,"attrs",c=>(u.forEach(v=>c.removeAttribute(v)),a.forEach(([v,k])=>c.setAttribute(v,k)),[a,u]))},hasAllClasses(i,e){return e.every(t=>i.classList.contains(t))},isToggledOut(i,e){return!this.isVisible(i)||this.hasAllClasses(i,e)},filterToEls(i,e,{to:t}){let n=()=>{if(typeof t=="string")return document.querySelectorAll(t);if(t.closest){let r=e.closest(t.closest);return r?[r]:[]}else if(t.inner)return e.querySelectorAll(t.inner)};return t?i.jsQuerySelectorAll(e,t,n):[e]},defaultDisplay(i){return{tr:"table-row",td:"table-cell"}[i.tagName.toLowerCase()]||"block"},transitionClasses(i){if(!i)return null;let[e,t,n]=Array.isArray(i)?i:[i.split(" "),[],[]];return e=Array.isArray(e)?e:e.split(" "),t=Array.isArray(t)?t:t.split(" "),n=Array.isArray(n)?n:n.split(" "),[e,t,n]}},Ne=jh,Ga="hookId",Hh=1,xr=class{static makeID(){return Hh++}static elementID(i){return H.private(i,Ga)}constructor(i,e,t){this.el=e,this.__attachView(i),this.__callbacks=t,this.__listeners=new Set,this.__isDisconnected=!1,H.putPrivate(this.el,Ga,this.constructor.makeID());for(let n in this.__callbacks)this[n]=this.__callbacks[n]}__attachView(i){i?(this.__view=()=>i,this.liveSocket=i.liveSocket):(this.__view=()=>{throw new Error(`hook not yet attached to a live view: ${this.el.outerHTML}`)},this.liveSocket=null)}__mounted(){this.mounted&&this.mounted()}__updated(){this.updated&&this.updated()}__beforeUpdate(){this.beforeUpdate&&this.beforeUpdate()}__destroyed(){this.destroyed&&this.destroyed(),H.deletePrivate(this.el,Ga)}__reconnected(){this.__isDisconnected&&(this.__isDisconnected=!1,this.reconnected&&this.reconnected())}__disconnected(){this.__isDisconnected=!0,this.disconnected&&this.disconnected()}js(){let i=this;return{exec(e){i.__view().liveSocket.execJS(i.el,e,"hook")},show(e,t={}){let n=i.__view().liveSocket.owner(e);Ne.show("hook",n,e,t.display,t.transition,t.time,t.blocking)},hide(e,t={}){let n=i.__view().liveSocket.owner(e);Ne.hide("hook",n,e,null,t.transition,t.time,t.blocking)},toggle(e,t={}){let n=i.__view().liveSocket.owner(e);t.in=Ne.transitionClasses(t.in),t.out=Ne.transitionClasses(t.out),Ne.toggle("hook",n,e,t.display,t.in,t.out,t.time,t.blocking)},addClass(e,t,n={}){t=Array.isArray(t)?t:t.split(" ");let r=i.__view().liveSocket.owner(e);Ne.addOrRemoveClasses(e,t,[],n.transition,n.time,r,n.blocking)},removeClass(e,t,n={}){n.transition=Ne.transitionClasses(n.transition),t=Array.isArray(t)?t:t.split(" ");let r=i.__view().liveSocket.owner(e);Ne.addOrRemoveClasses(e,[],t,n.transition,n.time,r,n.blocking)},toggleClass(e,t,n={}){n.transition=Ne.transitionClasses(n.transition),t=Array.isArray(t)?t:t.split(" ");let r=i.__view().liveSocket.owner(e);Ne.toggleClasses(e,t,n.transition,n.time,r,n.blocking)},transition(e,t,n={}){let r=i.__view().liveSocket.owner(e);Ne.addOrRemoveClasses(e,[],[],Ne.transitionClasses(t),n.time,r,n.blocking)},setAttribute(e,t,n){Ne.setOrRemoveAttrs(e,[[t,n]],[])},removeAttribute(e,t){Ne.setOrRemoveAttrs(e,[],[t])},toggleAttribute(e,t,n,r){Ne.toggleAttr(e,t,n,r)}}}pushEvent(i,e={},t){return t===void 0?new Promise((n,r)=>{try{this.__view().pushHookEvent(this.el,null,i,e,(a,u)=>n(a))===!1&&r(new Error("unable to push hook event. LiveView not connected"))}catch(s){r(s)}}):this.__view().pushHookEvent(this.el,null,i,e,t)}pushEventTo(i,e,t={},n){return n===void 0?new Promise((r,s)=>{try{this.__view().withinTargets(i,(a,u)=>{a.pushHookEvent(this.el,u,e,t,(v,k)=>r(v))===!1&&s(new Error("unable to push hook event. LiveView not connected"))})}catch(a){s(a)}}):this.__view().withinTargets(i,(r,s)=>r.pushHookEvent(this.el,s,e,t,n))}handleEvent(i,e){let t=(n,r)=>r?i:e(n.detail);return window.addEventListener(`phx:${i}`,t),this.__listeners.add(t),t}removeHandleEvent(i){let e=i(null,!0);window.removeEventListener(`phx:${e}`,i),this.__listeners.delete(i)}upload(i,e){return this.__view().dispatchUploads(null,i,e)}uploadTo(i,e,t){return this.__view().withinTargets(i,(n,r)=>{n.dispatchUploads(r,e,t)})}__cleanup__(){this.__listeners.forEach(i=>this.removeHandleEvent(i))}},zh=(i,e)=>{let t=i.endsWith("[]"),n=t?i.slice(0,-2):i;return n=n.replace(/([^\[\]]+)(\]?$)/,`${e}$1$2`),t&&(n+="[]"),n},Ts=(i,e,t=[])=>{let{submitter:n,...r}=e,s;if(n&&n.name){let k=document.createElement("input");k.type="hidden";let A=n.getAttribute("form");A&&k.setAttribute("form",A),k.name=n.name,k.value=n.value,n.parentElement.insertBefore(k,n),s=k}let a=new FormData(i),u=[];a.forEach((k,A,N)=>{k instanceof File&&u.push(A)}),u.forEach(k=>a.delete(k));let c=new URLSearchParams,v=Array.from(i.elements);for(let[k,A]of a.entries())if(t.length===0||t.indexOf(k)>=0){let N=v.filter(g=>g.name===k),y=!N.some(g=>H.private(g,Rs)||H.private(g,Pr)),d=N.every(g=>g.type==="hidden");y&&!(n&&n.name==k)&&!d&&c.append(zh(k,"_unused_"),""),c.append(k,A)}n&&s&&n.parentElement.removeChild(s);for(let k in r)c.append(k,r[k]);return c.toString()},Vh=class Sl{static closestView(e){let t=e.closest(An);return t?H.private(t,"view"):null}constructor(e,t,n,r,s){this.isDead=!1,this.liveSocket=t,this.flash=r,this.parent=n,this.root=n?n.root:this,this.el=e,H.putPrivate(this.el,"view",this),this.id=this.el.id,this.ref=0,this.lastAckRef=null,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.pendingForms=new Set,this.redirect=!1,this.href=null,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinAttempts=0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(a){a&&a()},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.formsForRecovery={},this.channel=this.liveSocket.channel(`lv:${this.id}`,()=>{let a=this.href&&this.expandURL(this.href);return{redirect:this.redirect?a:void 0,url:this.redirect?void 0:a||void 0,params:this.connectParams(s),session:this.getSession(),static:this.getStatic(),flash:this.flash}})}setHref(e){this.href=e}setRedirect(e){this.redirect=!0,this.href=e}isMain(){return this.el.hasAttribute(io)}connectParams(e){let t=this.liveSocket.params(this.el),n=H.all(document,`[${this.binding(Xc)}]`).map(r=>r.src||r.href).filter(r=>typeof r=="string");return n.length>0&&(t._track_static=n),t._mounts=this.joinCount,t._mount_attempts=this.joinAttempts,t._live_referer=e,this.joinAttempts++,t}isConnected(){return this.channel.canPush()}getSession(){return this.el.getAttribute(wi)}getStatic(){let e=this.el.getAttribute(_n);return e===""?null:e}destroy(e=function(){}){this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);let t=()=>{e();for(let n in this.viewHooks)this.destroyHook(this.viewHooks[n])};H.markPhxChildDestroyed(this.el),this.log("destroyed",()=>["the child has been removed from the parent"]),this.channel.leave().receive("ok",t).receive("error",t).receive("timeout",t)}setContainerClasses(...e){this.el.classList.remove($u,yn,Gn,qu,_r),this.el.classList.add(...e)}showLoader(e){if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout(()=>this.showLoader(),e);else{for(let t in this.viewHooks)this.viewHooks[t].__disconnected();this.setContainerClasses(yn)}}execAll(e){H.all(this.el,`[${e}]`,t=>this.liveSocket.execJS(t,t.getAttribute(e)))}hideLoader(){clearTimeout(this.loaderTimer),this.setContainerClasses($u),this.execAll(this.binding("connected"))}triggerReconnected(){for(let e in this.viewHooks)this.viewHooks[e].__reconnected()}log(e,t){this.liveSocket.log(this,e,t)}transition(e,t,n=function(){}){this.liveSocket.transition(e,t,n)}withinTargets(e,t,n=document,r){if(e instanceof HTMLElement||e instanceof SVGElement)return this.liveSocket.owner(e,s=>t(s,e));if(xi(e))H.findComponentNodeList(r||this.el,e).length===0?xt(`no component found matching phx-target of ${e}`):t(this,parseInt(e));else{let s=Array.from(n.querySelectorAll(e));s.length===0&&xt(`nothing found matching the phx-target selector "${e}"`),s.forEach(a=>this.liveSocket.owner(a,u=>t(u,a)))}}applyDiff(e,t,n){this.log(e,()=>["",Ls(t)]);let{diff:r,reply:s,events:a,title:u}=gl.extract(t);n({diff:r,reply:s,events:a}),(typeof u=="string"||e=="mount")&&window.requestAnimationFrame(()=>H.putTitle(u))}onJoin(e){let{rendered:t,container:n,liveview_version:r}=e;if(n){let[s,a]=n;this.el=H.replaceRootContainer(this.el,s,a)}this.childJoins=0,this.joinPending=!0,this.flash=null,this.root===this&&(this.formsForRecovery=this.getFormsForRecovery()),this.isMain()&&window.history.state===null&&this.liveSocket.replaceRootHistory(),r!==this.liveSocket.version()&&console.error(`LiveView asset version mismatch. JavaScript version ${this.liveSocket.version()} vs. server ${r}. To avoid issues, please ensure that your assets use the same version as the server.`),Tt.dropLocal(this.liveSocket.localStorage,window.location.pathname,bl),this.applyDiff("mount",t,({diff:s,events:a})=>{this.rendered=new gl(this.id,s);let[u,c]=this.renderContainer(null,"join");this.dropPendingRefs(),this.joinCount++,this.joinAttempts=0,this.maybeRecoverForms(u,()=>{this.onJoinComplete(e,u,c,a)})})}dropPendingRefs(){H.all(document,`[${Gt}="${this.refSrc()}"]`,e=>{e.removeAttribute(Zn),e.removeAttribute(Gt),e.removeAttribute(Ht)})}onJoinComplete({live_patch:e},t,n,r){if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(e,t,n,r);H.findPhxChildrenInFragment(t,this.id).filter(a=>{let u=a.id&&this.el.querySelector(`[id="${a.id}"]`),c=u&&u.getAttribute(_n);return c&&a.setAttribute(_n,c),u&&u.setAttribute(Qi,this.root.id),this.joinChild(a)}).length===0?this.parent?(this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,n,r)]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(e,t,n,r)):this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,n,r)])}attachTrueDocEl(){this.el=H.byId(this.id),this.el.setAttribute(Qi,this.root.id)}execNewMounted(e=this.el){let t=this.binding(Ya),n=this.binding(Za);H.all(e,`[${t}], [${n}]`,r=>{this.ownsElement(r)&&(H.maintainPrivateHooks(r,r,t,n),this.maybeAddNewHook(r))}),H.all(e,`[${this.binding(kr)}], [data-phx-${kr}]`,r=>{this.ownsElement(r)&&this.maybeAddNewHook(r)}),H.all(e,`[${this.binding(Xu)}]`,r=>{this.ownsElement(r)&&this.maybeMounted(r)})}applyJoinPatch(e,t,n,r){this.attachTrueDocEl();let s=new Ds(this,this.el,this.id,t,n,null);if(s.markPrunableContentForRemoval(),this.performPatch(s,!1,!0),this.joinNewChildren(),this.execNewMounted(),this.joinPending=!1,this.liveSocket.dispatchEvents(r),this.applyPendingUpdates(),e){let{kind:a,to:u}=e;this.liveSocket.historyPatch(u,a)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}triggerBeforeUpdateHook(e,t){this.liveSocket.triggerDOM("onBeforeElUpdated",[e,t]);let n=this.getHook(e),r=n&&H.isIgnored(e,this.binding(Lr));if(n&&!e.isEqualNode(t)&&!(r&&ph(e.dataset,t.dataset)))return n.__beforeUpdate(),n}maybeMounted(e){let t=e.getAttribute(this.binding(Xu)),n=t&&H.private(e,"mounted");t&&!n&&(this.liveSocket.execJS(e,t),H.putPrivate(e,"mounted",!0))}maybeAddNewHook(e){let t=this.addHook(e);t&&t.__mounted()}performPatch(e,t,n=!1){let r=[],s=!1,a=new Set;return this.liveSocket.triggerDOM("onPatchStart",[e.targetContainer]),e.after("added",u=>{this.liveSocket.triggerDOM("onNodeAdded",[u]);let c=this.binding(Ya),v=this.binding(Za);H.maintainPrivateHooks(u,u,c,v),this.maybeAddNewHook(u),u.getAttribute&&this.maybeMounted(u)}),e.after("phxChildAdded",u=>{H.isPhxSticky(u)?this.liveSocket.joinRootViews():s=!0}),e.before("updated",(u,c)=>{this.triggerBeforeUpdateHook(u,c)&&a.add(u.id)}),e.after("updated",u=>{a.has(u.id)&&this.getHook(u).__updated()}),e.after("discarded",u=>{u.nodeType===Node.ELEMENT_NODE&&r.push(u)}),e.after("transitionsDiscarded",u=>this.afterElementsRemoved(u,t)),e.perform(n),this.afterElementsRemoved(r,t),this.liveSocket.triggerDOM("onPatchEnd",[e.targetContainer]),s}afterElementsRemoved(e,t){let n=[];e.forEach(r=>{let s=H.all(r,`[${Li}]`),a=H.all(r,`[${this.binding(kr)}], [data-phx-hook]`);s.concat(r).forEach(u=>{let c=this.componentID(u);xi(c)&&n.indexOf(c)===-1&&n.push(c)}),a.concat(r).forEach(u=>{let c=this.getHook(u);c&&this.destroyHook(c)})}),t&&this.maybePushComponentsDestroyed(n)}joinNewChildren(){H.findPhxChildren(this.el,this.id).forEach(e=>this.joinChild(e))}maybeRecoverForms(e,t){let n=this.binding("change"),r=this.root.formsForRecovery,s=document.createElement("template");s.innerHTML=e;let a=s.content.firstElementChild;a.id=this.id,a.setAttribute(Qi,this.root.id),a.setAttribute(wi,this.getSession()),a.setAttribute(_n,this.getStatic()),a.setAttribute(kn,this.parent?this.parent.id:null);let u=H.all(s.content,"form").filter(c=>c.id&&r[c.id]).filter(c=>!this.pendingForms.has(c.id)).filter(c=>r[c.id].getAttribute(n)===c.getAttribute(n)).map(c=>[r[c.id],c]);if(u.length===0)return t();u.forEach(([c,v],k)=>{this.pendingForms.add(v.id),this.pushFormRecovery(c,v,s.content.firstElementChild,()=>{this.pendingForms.delete(v.id),k===u.length-1&&t()})})}getChildById(e){return this.root.children[this.id][e]}getDescendentByEl(e){return e.id===this.id?this:this.children[e.getAttribute(kn)]?.[e.id]}destroyDescendent(e){for(let t in this.root.children)for(let n in this.root.children[t])if(n===e)return this.root.children[t][n].destroy()}joinChild(e){if(!this.getChildById(e.id)){let n=new Sl(e,this.liveSocket,this);return this.root.children[this.id][n.id]=n,n.join(),this.childJoins++,!0}}isJoinPending(){return this.joinPending}ackJoin(e){this.childJoins--,this.childJoins===0&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}onAllChildJoinsComplete(){this.pendingForms.clear(),this.formsForRecovery={},this.joinCallback(()=>{this.pendingJoinOps.forEach(([e,t])=>{e.isDestroyed()||t()}),this.pendingJoinOps=[]})}update(e,t){if(this.isJoinPending()||this.liveSocket.hasPendingLink()&&this.root.isMain())return this.pendingDiffs.push({diff:e,events:t});this.rendered.mergeDiff(e);let n=!1;this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time("component patch complete",()=>{H.findExistingParentCIDs(this.el,this.rendered.componentCIDs(e)).forEach(s=>{this.componentPatch(this.rendered.getComponent(e,s),s)&&(n=!0)})}):sl(e)||this.liveSocket.time("full patch complete",()=>{let[r,s]=this.renderContainer(e,"update"),a=new Ds(this,this.el,this.id,r,s,null);n=this.performPatch(a,!0)}),this.liveSocket.dispatchEvents(t),n&&this.joinNewChildren()}renderContainer(e,t){return this.liveSocket.time(`toString diff (${t})`,()=>{let n=this.el.tagName,r=e?this.rendered.componentCIDs(e):null,[s,a]=this.rendered.toString(r);return[`<${n}>${s}</${n}>`,a]})}componentPatch(e,t){if(sl(e))return!1;let[n,r]=this.rendered.componentToString(t),s=new Ds(this,this.el,this.id,n,r,t);return this.performPatch(s,!0)}getHook(e){return this.viewHooks[xr.elementID(e)]}addHook(e){let t=xr.elementID(e);if(t&&!this.viewHooks[t]){let n=H.getCustomElHook(e)||xt(`no hook found for custom element: ${e.id}`);return this.viewHooks[t]=n,n.__attachView(this),n}else{if(t||!e.getAttribute)return;{let n=e.getAttribute(`data-phx-${kr}`)||e.getAttribute(this.binding(kr));if(n&&!this.ownsElement(e))return;let r=this.liveSocket.getHookCallbacks(n);if(r){e.id||xt(`no DOM ID for hook "${n}". Hooks require a unique ID on each element.`,e);let s=new xr(this,e,r);return this.viewHooks[xr.elementID(s.el)]=s,s}else n!==null&&xt(`unknown hook found for "${n}"`,e)}}}destroyHook(e){e.__destroyed(),e.__cleanup__(),delete this.viewHooks[xr.elementID(e.el)]}applyPendingUpdates(){this.pendingDiffs.forEach(({diff:e,events:t})=>this.update(e,t)),this.pendingDiffs=[],this.eachChild(e=>e.applyPendingUpdates())}eachChild(e){let t=this.root.children[this.id]||{};for(let n in t)e(this.getChildById(n))}onChannel(e,t){this.liveSocket.onChannel(this.channel,e,n=>{this.isJoinPending()?this.root.pendingJoinOps.push([this,()=>t(n)]):this.liveSocket.requestDOMUpdate(()=>t(n))})}bindChannel(){this.liveSocket.onChannel(this.channel,"diff",e=>{this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",e,({diff:t,events:n})=>this.update(t,n))})}),this.onChannel("redirect",({to:e,flash:t})=>this.onRedirect({to:e,flash:t})),this.onChannel("live_patch",e=>this.onLivePatch(e)),this.onChannel("live_redirect",e=>this.onLiveRedirect(e)),this.channel.onError(e=>this.onError(e)),this.channel.onClose(e=>this.onClose(e))}destroyAllChildren(){this.eachChild(e=>e.destroy())}onLiveRedirect(e){let{to:t,kind:n,flash:r}=e,s=this.expandURL(t),a=new CustomEvent("phx:server-navigate",{detail:{to:t,kind:n,flash:r}});this.liveSocket.historyRedirect(a,s,n,r)}onLivePatch(e){let{to:t,kind:n}=e;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,n)}expandURL(e){return e.startsWith("/")?`${window.location.protocol}//${window.location.host}${e}`:e}onRedirect({to:e,flash:t,reloadToken:n}){this.liveSocket.redirect(e,t,n)}isDestroyed(){return this.destroyed}joinDead(){this.isDead=!0}joinPush(){return this.joinPush=this.joinPush||this.channel.join(),this.joinPush}join(e){this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel(),this.isMain()&&(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=t=>{t=t||function(){},e?e(this.joinCount,t):t()},this.wrapPush(()=>this.channel.join(),{ok:t=>this.liveSocket.requestDOMUpdate(()=>this.onJoin(t)),error:t=>this.onJoinError(t),timeout:()=>this.onJoinError({reason:"timeout"})})}onJoinError(e){if(e.reason==="reload"){this.log("error",()=>[`failed mount with ${e.status}. Falling back to page reload`,e]),this.onRedirect({to:this.root.href,reloadToken:e.token});return}else if(e.reason==="unauthorized"||e.reason==="stale"){this.log("error",()=>["unauthorized live_redirect. Falling back to page request",e]),this.onRedirect({to:this.root.href});return}if((e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect)return this.onRedirect(e.redirect);if(e.live_redirect)return this.onLiveRedirect(e.live_redirect);if(this.log("error",()=>["unable to join",e]),this.isMain())this.displayError([yn,Gn,_r]),this.liveSocket.isConnected()&&this.liveSocket.reloadWithJitter(this);else{this.joinAttempts>=Zu&&(this.root.displayError([yn,Gn,_r]),this.log("error",()=>[`giving up trying to mount after ${Zu} tries`,e]),this.destroy());let t=H.byId(this.el.id);t?(H.mergeAttrs(t,this.el),this.displayError([yn,Gn,_r]),this.el=t):this.destroy()}}onClose(e){if(!this.isDestroyed()){if(this.isMain()&&this.liveSocket.hasPendingLink()&&e!=="leave")return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(ah)}}onError(e){this.onClose(e),this.liveSocket.isConnected()&&this.log("error",()=>["view crashed",e]),this.liveSocket.isUnloaded()||(this.liveSocket.isConnected()?this.displayError([yn,Gn,_r]):this.displayError([yn,Gn,qu]))}displayError(e){this.isMain()&&H.dispatchEvent(window,"phx:page-loading-start",{detail:{to:this.href,kind:"error"}}),this.showLoader(),this.setContainerClasses(...e),this.execAll(this.binding("disconnected"))}wrapPush(e,t){let n=this.liveSocket.getLatencySim(),r=n?s=>setTimeout(()=>!this.isDestroyed()&&s(),n):s=>!this.isDestroyed()&&s();r(()=>{e().receive("ok",s=>r(()=>t.ok&&t.ok(s))).receive("error",s=>r(()=>t.error&&t.error(s))).receive("timeout",()=>r(()=>t.timeout&&t.timeout()))})}pushWithReply(e,t,n){if(!this.isConnected())return Promise.reject({error:"noconnection"});let[r,[s],a]=e?e():[null,[],{}],u=this.joinCount,c=function(){};return a.page_loading&&(c=this.liveSocket.withPageLoading({kind:"element",target:s})),typeof n.cid!="number"&&delete n.cid,new Promise((v,k)=>{this.wrapPush(()=>this.channel.push(t,n,uh),{ok:A=>{r!==null&&(this.lastAckRef=r);let N=y=>{A.redirect&&this.onRedirect(A.redirect),A.live_patch&&this.onLivePatch(A.live_patch),A.live_redirect&&this.onLiveRedirect(A.live_redirect),c(),v({resp:A,reply:y})};A.diff?this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",A.diff,({diff:y,reply:d,events:g})=>{r!==null&&this.undoRefs(r,n.event),this.update(y,g),N(d)})}):(r!==null&&this.undoRefs(r,n.event),N(null))},error:A=>k({error:A}),timeout:()=>{k({timeout:!0}),this.joinCount===u&&this.liveSocket.reloadWithJitter(this,()=>{this.log("timeout",()=>["received timeout while communicating with server. Falling back to hard refresh for recovery"])})}})})}undoRefs(e,t,n){if(!this.isConnected())return;let r=`[${Gt}="${this.refSrc()}"]`;n?(n=new Set(n),H.all(document,r,s=>{n&&!n.has(s)||(H.all(s,r,a=>this.undoElRef(a,e,t)),this.undoElRef(s,e,t))})):H.all(document,r,s=>this.undoElRef(s,e,t))}undoElRef(e,t,n){new kh(e).maybeUndo(t,n,s=>{let a=this.triggerBeforeUpdateHook(e,s);Ds.patchWithClonedTree(e,s,this.liveSocket),H.all(e,`[${Gt}="${this.refSrc()}"]`,u=>this.undoElRef(u,t,n)),this.execNewMounted(e),a&&a.__updated()})}refSrc(){return this.el.id}putRef(e,t,n,r={}){let s=this.ref++,a=this.binding(Ju);if(r.loading){let u=H.all(document,r.loading).map(c=>({el:c,lock:!0,loading:!0}));e=e.concat(u)}for(let{el:u,lock:c,loading:v}of e){if(!c&&!v)throw new Error("putRef requires lock or loading");if(u.setAttribute(Gt,this.refSrc()),v&&u.setAttribute(Zn,s),c&&u.setAttribute(Ht,s),!v||r.submitter&&!(u===r.submitter||u===r.form))continue;let k=new Promise(d=>{u.addEventListener(`phx:undo-lock:${s}`,()=>d(y),{once:!0})}),A=new Promise(d=>{u.addEventListener(`phx:undo-loading:${s}`,()=>d(y),{once:!0})});u.classList.add(`phx-${n}-loading`);let N=u.getAttribute(a);N!==null&&(u.getAttribute(Ps)||u.setAttribute(Ps,u.innerText),N!==""&&(u.innerText=N),u.setAttribute(Yn,u.getAttribute(Yn)||u.disabled),u.setAttribute("disabled",""));let y={event:t,eventType:n,ref:s,isLoading:v,isLocked:c,lockElements:e.filter(({lock:d})=>d).map(({el:d})=>d),loadingElements:e.filter(({loading:d})=>d).map(({el:d})=>d),unlock:d=>{d=Array.isArray(d)?d:[d],this.undoRefs(s,t,d)},lockComplete:k,loadingComplete:A,lock:d=>new Promise(g=>{if(this.isAcked(s))return g(y);d.setAttribute(Ht,s),d.setAttribute(Gt,this.refSrc()),d.addEventListener(`phx:lock-stop:${s}`,()=>g(y),{once:!0})})};u.dispatchEvent(new CustomEvent("phx:push",{detail:y,bubbles:!0,cancelable:!1})),t&&u.dispatchEvent(new CustomEvent(`phx:push:${t}`,{detail:y,bubbles:!0,cancelable:!1}))}return[s,e.map(({el:u})=>u),r]}isAcked(e){return this.lastAckRef!==null&&this.lastAckRef>=e}componentID(e){let t=e.getAttribute&&e.getAttribute(Li);return t?parseInt(t):null}targetComponentID(e,t,n={}){if(xi(t))return t;let r=n.target||e.getAttribute(this.binding("target"));return xi(r)?parseInt(r):t&&(r!==null||n.target)?this.closestComponentID(t):null}closestComponentID(e){return xi(e)?e:e?Zi(e.closest(`[${Li}]`),t=>this.ownsElement(t)&&this.componentID(t)):null}pushHookEvent(e,t,n,r,s){if(!this.isConnected())return this.log("hook",()=>["unable to push hook event. LiveView not connected",n,r]),!1;let[a,u,c]=this.putRef([{el:e,loading:!0,lock:!0}],n,"hook");return this.pushWithReply(()=>[a,u,c],"event",{type:"hook",event:n,value:r,cid:this.closestComponentID(t)}).then(({resp:v,reply:k})=>s(k,a)),a}extractMeta(e,t,n){let r=this.binding("value-");for(let s=0;s<e.attributes.length;s++){t||(t={});let a=e.attributes[s].name;a.startsWith(r)&&(t[a.replace(r,"")]=e.getAttribute(a))}if(e.value!==void 0&&!(e instanceof HTMLFormElement)&&(t||(t={}),t.value=e.value,e.tagName==="INPUT"&&Al.indexOf(e.type)>=0&&!e.checked&&delete t.value),n){t||(t={});for(let s in n)t[s]=n[s]}return t}pushEvent(e,t,n,r,s,a={},u){this.pushWithReply(()=>this.putRef([{el:t,loading:!0,lock:!0}],r,e,a),"event",{type:e,event:r,value:this.extractMeta(t,s,a.value),cid:this.targetComponentID(t,n,a)}).then(({reply:c})=>u&&u(c))}pushFileProgress(e,t,n,r=function(){}){this.liveSocket.withinOwners(e.form,(s,a)=>{s.pushWithReply(null,"progress",{event:e.getAttribute(s.binding(rh)),ref:e.getAttribute(Ri),entry_ref:t,progress:n,cid:s.targetComponentID(e.form,a)}).then(({resp:u})=>r(u))})}pushInput(e,t,n,r,s,a){if(!e.form)throw new Error("form events require the input to be inside a form");let u,c=xi(n)?n:this.targetComponentID(e.form,t,s),v=()=>this.putRef([{el:e,loading:!0,lock:!0},{el:e.form,loading:!0,lock:!0}],r,"change",s),k,A=this.extractMeta(e.form);e instanceof HTMLButtonElement&&(A.submitter=e),e.getAttribute(this.binding("change"))?k=Ts(e.form,{_target:s._target,...A},[e.name]):k=Ts(e.form,{_target:s._target,...A}),H.isUploadInput(e)&&e.files&&e.files.length>0&&tt.trackFiles(e,Array.from(e.files)),u=tt.serializeUploads(e);let N={type:"form",event:r,value:k,uploads:u,cid:c};this.pushWithReply(v,"event",N).then(({resp:y})=>{if(H.isUploadInput(e)&&H.isAutoUpload(e)){if(tt.filesAwaitingPreflight(e).length>0){let[d,g]=v();this.undoRefs(d,r,[e.form]),this.uploadFiles(e.form,r,t,d,c,b=>{a&&a(y),this.triggerAwaitingSubmit(e.form,r),this.undoRefs(d,r)})}}else a&&a(y)})}triggerAwaitingSubmit(e,t){let n=this.getScheduledSubmit(e);if(n){let[r,s,a,u]=n;this.cancelSubmit(e,t),u()}}getScheduledSubmit(e){return this.formSubmits.find(([t,n,r,s])=>t.isSameNode(e))}scheduleSubmit(e,t,n,r){if(this.getScheduledSubmit(e))return!0;this.formSubmits.push([e,t,n,r])}cancelSubmit(e,t){this.formSubmits=this.formSubmits.filter(([n,r,s,a])=>n.isSameNode(e)?(this.undoRefs(r,t),!1):!0)}disableForm(e,t,n={}){let r=d=>!(Rr(d,`${this.binding(Lr)}=ignore`,d.form)||Rr(d,"data-phx-update=ignore",d.form)),s=d=>d.hasAttribute(this.binding(Ju)),a=d=>d.tagName=="BUTTON",u=d=>["INPUT","TEXTAREA","SELECT"].includes(d.tagName),c=Array.from(e.elements),v=c.filter(s),k=c.filter(a).filter(r),A=c.filter(u).filter(r);k.forEach(d=>{d.setAttribute(Yn,d.disabled),d.disabled=!0}),A.forEach(d=>{d.setAttribute(Qa,d.readOnly),d.readOnly=!0,d.files&&(d.setAttribute(Yn,d.disabled),d.disabled=!0)});let N=v.concat(k).concat(A).map(d=>({el:d,loading:!0,lock:!0})),y=[{el:e,loading:!0,lock:!1}].concat(N).reverse();return this.putRef(y,t,"submit",n)}pushFormSubmit(e,t,n,r,s,a){let u=()=>this.disableForm(e,n,{...s,form:e,submitter:r}),c=this.targetComponentID(e,t);if(tt.hasUploadsInProgress(e)){let[v,k]=u(),A=()=>this.pushFormSubmit(e,t,n,r,s,a);return this.scheduleSubmit(e,v,s,A)}else if(tt.inputsAwaitingPreflight(e).length>0){let[v,k]=u(),A=()=>[v,k,s];this.uploadFiles(e,n,t,v,c,N=>{if(tt.inputsAwaitingPreflight(e).length>0)return this.undoRefs(v,n);let y=this.extractMeta(e),d=Ts(e,{submitter:r,...y});this.pushWithReply(A,"event",{type:"form",event:n,value:d,cid:c}).then(({resp:g})=>a(g))})}else if(!(e.hasAttribute(Gt)&&e.classList.contains("phx-submit-loading"))){let v=this.extractMeta(e),k=Ts(e,{submitter:r,...v});this.pushWithReply(u,"event",{type:"form",event:n,value:k,cid:c}).then(({resp:A})=>a(A))}}uploadFiles(e,t,n,r,s,a){let u=this.joinCount,c=tt.activeFileInputs(e),v=c.length;c.forEach(k=>{let A=new tt(k,this,()=>{v--,v===0&&a()}),N=A.entries().map(d=>d.toPreflightPayload());if(N.length===0){v--;return}let y={ref:k.getAttribute(Ri),entries:N,cid:this.targetComponentID(k.form,n)};this.log("upload",()=>["sending preflight request",y]),this.pushWithReply(null,"allow_upload",y).then(({resp:d})=>{if(this.log("upload",()=>["got preflight response",d]),A.entries().forEach(g=>{d.entries&&!d.entries[g.ref]&&this.handleFailedEntryPreflight(g.ref,"failed preflight",A)}),d.error||Object.keys(d.entries).length===0)this.undoRefs(r,t),(d.error||[]).map(([b,E])=>{this.handleFailedEntryPreflight(b,E,A)});else{let g=b=>{this.channel.onError(()=>{this.joinCount===u&&b()})};A.initAdapterUpload(d,g,this.liveSocket)}})})}handleFailedEntryPreflight(e,t,n){if(n.isAutoUpload()){let r=n.entries().find(s=>s.ref===e.toString());r&&r.cancel()}else n.entries().map(r=>r.cancel());this.log("upload",()=>[`error for entry ${e}`,t])}dispatchUploads(e,t,n){let r=this.targetCtxElement(e)||this.el,s=H.findUploadInputs(r).filter(a=>a.name===t);s.length===0?xt(`no live file inputs found matching the name "${t}"`):s.length>1?xt(`duplicate live file inputs found matching the name "${t}"`):H.dispatchEvent(s[0],wl,{detail:{files:n}})}targetCtxElement(e){if(xi(e)){let[t]=H.findComponentNodeList(this.el,e);return t}else return e||null}pushFormRecovery(e,t,n,r){let s=this.binding("change"),a=t.getAttribute(this.binding("target"))||t,u=t.getAttribute(this.binding(Gu))||t.getAttribute(this.binding("change")),c=Array.from(e.elements).filter(A=>H.isFormInput(A)&&A.name&&!A.hasAttribute(s));if(c.length===0)return;c.forEach(A=>A.hasAttribute(Ri)&&tt.clearFiles(A));let v=c.find(A=>A.type!=="hidden")||c[0],k=0;this.withinTargets(a,(A,N)=>{let y=this.targetComponentID(t,N);k++,A.pushInput(v,N,y,u,{_target:v.name},()=>{k--,k===0&&r()})},n,n)}pushLinkPatch(e,t,n,r){let s=this.liveSocket.setPendingLink(t),a=e.isTrusted&&e.type!=="popstate",u=n?()=>this.putRef([{el:n,loading:a,lock:!0}],null,"click"):null,c=()=>this.liveSocket.redirect(window.location.href),v=t.startsWith("/")?`${location.protocol}//${location.host}${t}`:t;this.pushWithReply(u,"live_patch",{url:v}).then(({resp:k})=>{this.liveSocket.requestDOMUpdate(()=>{k.link_redirect?this.liveSocket.replaceMain(t,null,r,s):(this.liveSocket.commitPendingLink(s)&&(this.href=t),this.applyPendingUpdates(),r&&r(s))})},({error:k,timeout:A})=>c())}getFormsForRecovery(){if(this.joinCount===0)return{};let e=this.binding("change");return H.all(this.el,`form[${e}]`).filter(t=>t.id).filter(t=>t.elements.length>0).filter(t=>t.getAttribute(this.binding(Gu))!=="ignore").map(t=>t.cloneNode(!0)).reduce((t,n)=>(t[n.id]=n,t),{})}maybePushComponentsDestroyed(e){let t=e.filter(n=>H.findComponentNodeList(this.el,n).length===0);t.length>0&&(t.forEach(n=>this.rendered.resetRender(n)),this.pushWithReply(null,"cids_will_destroy",{cids:t}).then(()=>{this.liveSocket.requestDOMUpdate(()=>{let n=t.filter(r=>H.findComponentNodeList(this.el,r).length===0);n.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:n}).then(({resp:r})=>{this.rendered.pruneCIDs(r.cids)})})}))}ownsElement(e){let t=e.closest(An);return e.getAttribute(kn)===this.id||t&&t.id===this.id||!t&&this.isDead}submitForm(e,t,n,r,s={}){H.putPrivate(e,Pr,!0),Array.from(e.elements).forEach(u=>H.putPrivate(u,Pr,!0)),this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,n,r,s,()=>{this.liveSocket.restorePreviouslyActiveFocus()})}binding(e){return this.liveSocket.binding(e)}};var Dl=class{constructor(i,e,t={}){if(this.unloaded=!1,!e||e.constructor.name==="Object")throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);this.socket=new e(i,t),this.bindingPrefix=t.bindingPrefix||oh,this.opts=t,this.params=Sr(t.params||{}),this.viewLogger=t.viewLogger,this.metadataCallbacks=t.metadata||{},this.defaults=Object.assign(Ls(lh),t.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.outgoingMainEl=null,this.clickStartedAtTarget=null,this.linkRef=1,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=Ls(window.location),this.hooks=t.hooks||{},this.uploaders=t.uploaders||{},this.loaderTimeout=t.loaderTimeout||sh,this.reloadWithJitterTimer=null,this.maxReloads=t.maxReloads||qc,this.reloadJitterMin=t.reloadJitterMin||Kc,this.reloadJitterMax=t.reloadJitterMax||Jc,this.failsafeJitter=t.failsafeJitter||Gc,this.localStorage=t.localStorage||window.localStorage,this.sessionStorage=t.sessionStorage||window.sessionStorage,this.boundTopLevelEvents=!1,this.boundEventNames=new Set,this.serverCloseRef=null,this.domCallbacks=Object.assign({jsQuerySelectorAll:null,onPatchStart:Sr(),onPatchEnd:Sr(),onNodeAdded:Sr(),onBeforeElUpdated:Sr()},t.dom||{}),this.transitions=new Uh,this.currentHistoryPosition=parseInt(this.sessionStorage.getItem(As))||0,window.addEventListener("pagehide",n=>{this.unloaded=!0}),this.socket.onOpen(()=>{this.isUnloaded()&&window.location.reload()})}version(){return"1.0.1"}isProfileEnabled(){return this.sessionStorage.getItem($a)==="true"}isDebugEnabled(){return this.sessionStorage.getItem(ks)==="true"}isDebugDisabled(){return this.sessionStorage.getItem(ks)==="false"}enableDebug(){this.sessionStorage.setItem(ks,"true")}enableProfiling(){this.sessionStorage.setItem($a,"true")}disableDebug(){this.sessionStorage.setItem(ks,"false")}disableProfiling(){this.sessionStorage.removeItem($a)}enableLatencySim(i){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),this.sessionStorage.setItem(qa,i)}disableLatencySim(){this.sessionStorage.removeItem(qa)}getLatencySim(){let i=this.sessionStorage.getItem(qa);return i?parseInt(i):null}getSocket(){return this.socket}connect(){window.location.hostname==="localhost"&&!this.isDebugDisabled()&&this.enableDebug();let i=()=>{this.resetReloadStatus(),this.joinRootViews()?(this.bindTopLevelEvents(),this.socket.connect()):this.main?this.socket.connect():this.bindTopLevelEvents({dead:!0}),this.joinDeadView()};["complete","loaded","interactive"].indexOf(document.readyState)>=0?i():document.addEventListener("DOMContentLoaded",()=>i())}disconnect(i){clearTimeout(this.reloadWithJitterTimer),this.serverCloseRef&&(this.socket.off(this.serverCloseRef),this.serverCloseRef=null),this.socket.disconnect(i)}replaceTransport(i){clearTimeout(this.reloadWithJitterTimer),this.socket.replaceTransport(i),this.connect()}execJS(i,e,t=null){let n=new CustomEvent("phx:exec",{detail:{sourceElement:i}});this.owner(i,r=>Ne.exec(n,t,e,r,i))}execJSHookPush(i,e,t,n){this.withinOwners(i,r=>{let s=new CustomEvent("phx:exec",{detail:{sourceElement:i}});Ne.exec(s,"hook",e,r,i,["push",{data:t,callback:n}])})}unload(){this.unloaded||(this.main&&this.isConnected()&&this.log(this.main,"socket",()=>["disconnect for page nav"]),this.unloaded=!0,this.destroyAllViews(),this.disconnect())}triggerDOM(i,e){this.domCallbacks[i](...e)}time(i,e){if(!this.isProfileEnabled()||!console.time)return e();console.time(i);let t=e();return console.timeEnd(i),t}log(i,e,t){if(this.viewLogger){let[n,r]=t();this.viewLogger(i,e,n,r)}else if(this.isDebugEnabled()){let[n,r]=t();fh(i,e,n,r)}}requestDOMUpdate(i){this.transitions.after(i)}transition(i,e,t=function(){}){this.transitions.addTransition(i,e,t)}onChannel(i,e,t){i.on(e,n=>{let r=this.getLatencySim();r?setTimeout(()=>t(n),r):t(n)})}reloadWithJitter(i,e){clearTimeout(this.reloadWithJitterTimer),this.disconnect();let t=this.reloadJitterMin,n=this.reloadJitterMax,r=Math.floor(Math.random()*(n-t+1))+t,s=Tt.updateLocal(this.localStorage,window.location.pathname,bl,0,a=>a+1);s>=this.maxReloads&&(r=this.failsafeJitter),this.reloadWithJitterTimer=setTimeout(()=>{i.isDestroyed()||i.isConnected()||(i.destroy(),e?e():this.log(i,"join",()=>[`encountered ${s} consecutive reloads`]),s>=this.maxReloads&&this.log(i,"join",()=>[`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]),this.hasPendingLink()?window.location=this.pendingLink:window.location.reload())},r)}getHookCallbacks(i){return i&&i.startsWith("Phoenix.")?_h[i.split(".")[1]]:this.hooks[i]}isUnloaded(){return this.unloaded}isConnected(){return this.socket.isConnected()}getBindingPrefix(){return this.bindingPrefix}binding(i){return`${this.getBindingPrefix()}${i}`}channel(i,e){return this.socket.channel(i,e)}joinDeadView(){let i=document.body;if(i&&!this.isPhxView(i)&&!this.isPhxView(document.firstElementChild)){let e=this.newRootView(i);e.setHref(this.getHref()),e.joinDead(),this.main||(this.main=e),window.requestAnimationFrame(()=>e.execNewMounted())}}joinRootViews(){let i=!1;return H.all(document,`${An}:not([${kn}])`,e=>{if(!this.getRootById(e.id)){let t=this.newRootView(e);t.setHref(this.getHref()),t.join(),e.hasAttribute(io)&&(this.main=t)}i=!0}),i}redirect(i,e,t){t&&Tt.setCookie(Yu,t,60),this.unload(),Tt.redirect(i,e)}replaceMain(i,e,t=null,n=this.setPendingLink(i)){let r=this.currentLocation.href;this.outgoingMainEl=this.outgoingMainEl||this.main.el;let s=H.all(this.outgoingMainEl,`[${this.binding("remove")}]`),a=H.cloneNode(this.outgoingMainEl,"");this.main.showLoader(this.loaderTimeout),this.main.destroy(),this.main=this.newRootView(a,e,r),this.main.setRedirect(i),this.transitionRemoves(s,!0),this.main.join((u,c)=>{u===1&&this.commitPendingLink(n)&&this.requestDOMUpdate(()=>{s.forEach(v=>v.remove()),H.findPhxSticky(document).forEach(v=>a.appendChild(v)),this.outgoingMainEl.replaceWith(a),this.outgoingMainEl=null,t&&t(n),c()})})}transitionRemoves(i,e,t){let n=this.binding("remove");if(e){let s=H.findPhxSticky(document)||[];i=i.filter(a=>!H.isChildOfAny(a,s))}let r=s=>{s.preventDefault(),s.stopImmediatePropagation()};i.forEach(s=>{for(let a of this.boundEventNames)s.addEventListener(a,r,!0);this.execJS(s,s.getAttribute(n),"remove")}),this.requestDOMUpdate(()=>{i.forEach(s=>{for(let a of this.boundEventNames)s.removeEventListener(a,r,!0)}),t&&t()})}isPhxView(i){return i.getAttribute&&i.getAttribute(wi)!==null}newRootView(i,e,t){let n=new Vh(i,this,null,e,t);return this.roots[n.id]=n,n}owner(i,e){let t=Zi(i.closest(An),n=>this.getViewByEl(n))||this.main;return t&&e?e(t):t}withinOwners(i,e){this.owner(i,t=>e(t,i))}getViewByEl(i){let e=i.getAttribute(Qi);return Zi(this.getRootById(e),t=>t.getDescendentByEl(i))}getRootById(i){return this.roots[i]}destroyAllViews(){for(let i in this.roots)this.roots[i].destroy(),delete this.roots[i];this.main=null}destroyViewByEl(i){let e=this.getRootById(i.getAttribute(Qi));e&&e.id===i.id?(e.destroy(),delete this.roots[e.id]):e&&e.destroyDescendent(i.id)}getActiveElement(){return document.activeElement}dropActiveElement(i){this.prevActive&&i.ownsElement(this.prevActive)&&(this.prevActive=null)}restorePreviouslyActiveFocus(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}blurActiveElement(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}bindTopLevelEvents({dead:i}={}){this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,this.serverCloseRef=this.socket.onClose(e=>{if(e&&e.code===1e3&&this.main)return this.reloadWithJitter(this.main)}),document.body.addEventListener("click",function(){}),window.addEventListener("pageshow",e=>{e.persisted&&(this.getSocket().disconnect(),this.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())},!0),i||this.bindNav(),this.bindClicks(),i||this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(e,t,n,r,s,a)=>{let u=r.getAttribute(this.binding(nh)),c=e.key&&e.key.toLowerCase();if(u&&u.toLowerCase()!==c)return;let v={key:e.key,...this.eventMeta(t,e,r)};Ne.exec(e,t,s,n,r,["push",{data:v}])}),this.bind({blur:"focusout",focus:"focusin"},(e,t,n,r,s,a)=>{if(!a){let u={key:e.key,...this.eventMeta(t,e,r)};Ne.exec(e,t,s,n,r,["push",{data:u}])}}),this.bind({blur:"blur",focus:"focus"},(e,t,n,r,s,a)=>{if(a==="window"){let u=this.eventMeta(t,e,r);Ne.exec(e,t,s,n,r,["push",{data:u}])}}),this.on("dragover",e=>e.preventDefault()),this.on("drop",e=>{e.preventDefault();let t=Zi(Rr(e.target,this.binding(Uu)),s=>s.getAttribute(this.binding(Uu))),n=t&&document.getElementById(t),r=Array.from(e.dataTransfer.files||[]);!n||n.disabled||r.length===0||!(n.files instanceof FileList)||(tt.trackFiles(n,r,e.dataTransfer),n.dispatchEvent(new Event("input",{bubbles:!0})))}),this.on(wl,e=>{let t=e.target;if(!H.isUploadInput(t))return;let n=Array.from(e.detail.files||[]).filter(r=>r instanceof File||r instanceof Blob);tt.trackFiles(t,n),t.dispatchEvent(new Event("input",{bubbles:!0}))}))}eventMeta(i,e,t){let n=this.metadataCallbacks[i];return n?n(e,t):{}}setPendingLink(i){return this.linkRef++,this.pendingLink=i,this.resetReloadStatus(),this.linkRef}resetReloadStatus(){Tt.deleteCookie(Yu)}commitPendingLink(i){return this.linkRef!==i?!1:(this.href=this.pendingLink,this.pendingLink=null,!0)}getHref(){return this.href}hasPendingLink(){return!!this.pendingLink}bind(i,e){for(let t in i){let n=i[t];this.on(n,r=>{let s=this.binding(t),a=this.binding(`window-${t}`),u=r.target.getAttribute&&r.target.getAttribute(s);u?this.debounce(r.target,r,n,()=>{this.withinOwners(r.target,c=>{e(r,t,c,r.target,u,null)})}):H.all(document,`[${a}]`,c=>{let v=c.getAttribute(a);this.debounce(c,r,n,()=>{this.withinOwners(c,k=>{e(r,t,k,c,v,"window")})})})})}}bindClicks(){this.on("mousedown",i=>this.clickStartedAtTarget=i.target),this.bindClick("click","click")}bindClick(i,e){let t=this.binding(e);window.addEventListener(i,n=>{let r=null;n.detail===0&&(this.clickStartedAtTarget=n.target);let s=this.clickStartedAtTarget||n.target;r=Rr(n.target,t),this.dispatchClickAway(n,s),this.clickStartedAtTarget=null;let a=r&&r.getAttribute(t);if(!a){H.isNewPageClick(n,window.location)&&this.unload();return}r.getAttribute("href")==="#"&&n.preventDefault(),!r.hasAttribute(Gt)&&this.debounce(r,n,"click",()=>{this.withinOwners(r,u=>{Ne.exec(n,"click",a,u,r,["push",{data:this.eventMeta("click",n,r)}])})})},!1)}dispatchClickAway(i,e){let t=this.binding("click-away");H.all(document,`[${t}]`,n=>{n.isSameNode(e)||n.contains(e)||this.withinOwners(n,r=>{let s=n.getAttribute(t);Ne.isVisible(n)&&Ne.isInViewport(n)&&Ne.exec(i,"click",s,r,n,["push",{data:this.eventMeta("click",i,i.target)}])})})}bindNav(){if(!Tt.canPushState())return;history.scrollRestoration&&(history.scrollRestoration="manual");let i=null;window.addEventListener("scroll",e=>{clearTimeout(i),i=setTimeout(()=>{Tt.updateCurrentState(t=>Object.assign(t,{scroll:window.scrollY}))},100)}),window.addEventListener("popstate",e=>{if(!this.registerNewLocation(window.location))return;let{type:t,backType:n,id:r,root:s,scroll:a,position:u}=e.state||{},c=window.location.href,v=u>this.currentHistoryPosition;t=v?t:n||t,this.currentHistoryPosition=u||0,this.sessionStorage.setItem(As,this.currentHistoryPosition.toString()),H.dispatchEvent(window,"phx:navigate",{detail:{href:c,patch:t==="patch",pop:!0,direction:v?"forward":"backward"}}),this.requestDOMUpdate(()=>{this.main.isConnected()&&t==="patch"&&r===this.main.id?this.main.pushLinkPatch(e,c,null,()=>{this.maybeScroll(a)}):this.replaceMain(c,null,()=>{s&&this.replaceRootHistory(),this.maybeScroll(a)})})},!1),window.addEventListener("click",e=>{let t=Rr(e.target,Ua),n=t&&t.getAttribute(Ua);if(!n||!this.isConnected()||!this.main||H.wantsNewTab(e))return;let r=t.href instanceof SVGAnimatedString?t.href.baseVal:t.href,s=t.getAttribute(Yc);e.preventDefault(),e.stopImmediatePropagation(),this.pendingLink!==r&&this.requestDOMUpdate(()=>{if(n==="patch")this.pushHistoryPatch(e,r,s,t);else if(n==="redirect")this.historyRedirect(e,r,s,null,t);else throw new Error(`expected ${Ua} to be "patch" or "redirect", got: ${n}`);let a=t.getAttribute(this.binding("click"));a&&this.requestDOMUpdate(()=>this.execJS(t,a,"click"))})},!1)}maybeScroll(i){typeof i=="number"&&requestAnimationFrame(()=>{window.scrollTo(0,i)})}dispatchEvent(i,e={}){H.dispatchEvent(window,`phx:${i}`,{detail:e})}dispatchEvents(i){i.forEach(([e,t])=>this.dispatchEvent(e,t))}withPageLoading(i,e){H.dispatchEvent(window,"phx:page-loading-start",{detail:i});let t=()=>H.dispatchEvent(window,"phx:page-loading-stop",{detail:i});return e?e(t):t}pushHistoryPatch(i,e,t,n){if(!this.isConnected()||!this.main.isMain())return Tt.redirect(e);this.withPageLoading({to:e,kind:"patch"},r=>{this.main.pushLinkPatch(i,e,n,s=>{this.historyPatch(e,t,s),r()})})}historyPatch(i,e,t=this.setPendingLink(i)){this.commitPendingLink(t)&&(this.currentHistoryPosition++,this.sessionStorage.setItem(As,this.currentHistoryPosition.toString()),Tt.updateCurrentState(n=>({...n,backType:"patch"})),Tt.pushState(e,{type:"patch",id:this.main.id,position:this.currentHistoryPosition},i),H.dispatchEvent(window,"phx:navigate",{detail:{patch:!0,href:i,pop:!1,direction:"forward"}}),this.registerNewLocation(window.location))}historyRedirect(i,e,t,n,r){if(r&&i.isTrusted&&i.type!=="popstate"&&r.classList.add("phx-click-loading"),!this.isConnected()||!this.main.isMain())return Tt.redirect(e,n);if(/^\/$|^\/[^\/]+.*$/.test(e)){let{protocol:a,host:u}=window.location;e=`${a}//${u}${e}`}let s=window.scrollY;this.withPageLoading({to:e,kind:"redirect"},a=>{this.replaceMain(e,n,u=>{u===this.linkRef&&(this.currentHistoryPosition++,this.sessionStorage.setItem(As,this.currentHistoryPosition.toString()),Tt.updateCurrentState(c=>({...c,backType:"redirect"})),Tt.pushState(t,{type:"redirect",id:this.main.id,scroll:s,position:this.currentHistoryPosition},e),H.dispatchEvent(window,"phx:navigate",{detail:{href:e,patch:!1,pop:!1,direction:"forward"}}),this.registerNewLocation(window.location)),a()})})}replaceRootHistory(){Tt.pushState("replace",{root:!0,type:"patch",id:this.main.id,position:this.currentHistoryPosition})}registerNewLocation(i){let{pathname:e,search:t}=this.currentLocation;return e+t===i.pathname+i.search?!1:(this.currentLocation=Ls(i),!0)}bindForms(){let i=0,e=!1;this.on("submit",t=>{let n=t.target.getAttribute(this.binding("submit")),r=t.target.getAttribute(this.binding("change"));!e&&r&&!n&&(e=!0,t.preventDefault(),this.withinOwners(t.target,s=>{s.disableForm(t.target),window.requestAnimationFrame(()=>{H.isUnloadableFormSubmit(t)&&this.unload(),t.target.submit()})}))}),this.on("submit",t=>{let n=t.target.getAttribute(this.binding("submit"));if(!n){H.isUnloadableFormSubmit(t)&&this.unload();return}t.preventDefault(),t.target.disabled=!0,this.withinOwners(t.target,r=>{Ne.exec(t,"submit",n,r,t.target,["push",{submitter:t.submitter}])})});for(let t of["change","input"])this.on(t,n=>{if(n instanceof CustomEvent&&n.target.form===void 0){if(n.detail&&n.detail.dispatcher)throw new Error(`dispatching a custom ${t} event is only supported on input elements inside a form`);return}let r=this.binding("change"),s=n.target;if(n.isComposing){let y=`composition-listener-${t}`;H.private(s,y)||(H.putPrivate(s,y,!0),s.addEventListener("compositionend",()=>{s.dispatchEvent(new Event(t,{bubbles:!0})),H.deletePrivate(s,y)},{once:!0}));return}let a=s.getAttribute(r),u=s.form&&s.form.getAttribute(r),c=a||u;if(!c||s.type==="number"&&s.validity&&s.validity.badInput)return;let v=a?s:s.form,k=i;i++;let{at:A,type:N}=H.private(s,"prev-iteration")||{};A===k-1&&t==="change"&&N==="input"||(H.putPrivate(s,"prev-iteration",{at:k,type:t}),this.debounce(s,n,t,()=>{this.withinOwners(v,y=>{H.putPrivate(s,Rs,!0),Ne.exec(n,"change",c,y,s,["push",{_target:n.target.name,dispatcher:v}])})}))});this.on("reset",t=>{let n=t.target;H.resetForm(n);let r=Array.from(n.elements).find(s=>s.type==="reset");r&&window.requestAnimationFrame(()=>{r.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!1}))})})}debounce(i,e,t,n){if(t==="blur"||t==="focusout")return n();let r=this.binding(th),s=this.binding(ih),a=this.defaults.debounce.toString(),u=this.defaults.throttle.toString();this.withinOwners(i,c=>{let v=()=>!c.isDestroyed()&&document.body.contains(i);H.debounce(i,e,r,a,s,u,v,()=>{n()})})}silenceEvents(i){this.silenced=!0,i(),this.silenced=!1}on(i,e){this.boundEventNames.add(i),window.addEventListener(i,t=>{this.silenced||e(t)})}jsQuerySelectorAll(i,e,t){let n=this.domCallbacks.jsQuerySelectorAll;return n?n(i,e,t):t()}},Uh=class{constructor(){this.transitions=new Set,this.pendingOps=[]}reset(){this.transitions.forEach(i=>{clearTimeout(i),this.transitions.delete(i)}),this.flushPendingOps()}after(i){this.size()===0?i():this.pushPendingOp(i)}addTransition(i,e,t){e();let n=setTimeout(()=>{this.transitions.delete(n),t(),this.flushPendingOps()},i);this.transitions.add(n)}pushPendingOp(i){this.pendingOps.push(i)}size(){return this.transitions.size}flushPendingOps(){if(this.size()>0)return;let i=this.pendingOps.shift();i&&(i(),this.flushPendingOps())}};var Pa=za(xl());function Ll(i,e){var t=Object.keys(i);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(i);e&&(n=n.filter(function(r){return Object.getOwnPropertyDescriptor(i,r).enumerable})),t.push.apply(t,n)}return t}function ki(i){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?Ll(Object(t),!0).forEach(function(n){Wh(i,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(t)):Ll(Object(t)).forEach(function(n){Object.defineProperty(i,n,Object.getOwnPropertyDescriptor(t,n))})}return i}function Fs(i){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Fs=function(e){return typeof e}:Fs=function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fs(i)}function Wh(i,e,t){return e in i?Object.defineProperty(i,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):i[e]=t,i}function Ii(){return Ii=Object.assign||function(i){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(i[n]=t[n])}return i},Ii.apply(this,arguments)}function $h(i,e){if(i==null)return{};var t={},n=Object.keys(i),r,s;for(s=0;s<n.length;s++)r=n[s],!(e.indexOf(r)>=0)&&(t[r]=i[r]);return t}function qh(i,e){if(i==null)return{};var t=$h(i,e),n,r;if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(i);for(r=0;r<s.length;r++)n=s[r],!(e.indexOf(n)>=0)&&Object.prototype.propertyIsEnumerable.call(i,n)&&(t[n]=i[n])}return t}var Kh="1.15.4";function Pi(i){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(i)}var Oi=Pi(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),zr=Pi(/Edge/i),Rl=Pi(/firefox/i),Nr=Pi(/safari/i)&&!Pi(/chrome/i)&&!Pi(/android/i),jl=Pi(/iP(ad|od|hone)/i),Hl=Pi(/chrome/i)&&Pi(/android/i),zl={capture:!1,passive:!1};function Se(i,e,t){i.addEventListener(e,t,!Oi&&zl)}function Ae(i,e,t){i.removeEventListener(e,t,!Oi&&zl)}function Us(i,e){if(e){if(e[0]===">"&&(e=e.substring(1)),i)try{if(i.matches)return i.matches(e);if(i.msMatchesSelector)return i.msMatchesSelector(e);if(i.webkitMatchesSelector)return i.webkitMatchesSelector(e)}catch{return!1}return!1}}function Vl(i){return i.host&&i!==document&&i.host.nodeType?i.host:i.parentNode}function oi(i,e,t,n){if(i){t=t||document;do{if(e!=null&&(e[0]===">"?i.parentNode===t&&Us(i,e):Us(i,e))||n&&i===t)return i;if(i===t)break}while(i=Vl(i))}return null}var Pl=/\s+/g;function zt(i,e,t){if(i&&e)if(i.classList)i.classList[t?"add":"remove"](e);else{var n=(" "+i.className+" ").replace(Pl," ").replace(" "+e+" "," ");i.className=(n+(t?" "+e:"")).replace(Pl," ")}}function le(i,e,t){var n=i&&i.style;if(n){if(t===void 0)return document.defaultView&&document.defaultView.getComputedStyle?t=document.defaultView.getComputedStyle(i,""):i.currentStyle&&(t=i.currentStyle),e===void 0?t:t[e];!(e in n)&&e.indexOf("webkit")===-1&&(e="-webkit-"+e),n[e]=t+(typeof t=="string"?"":"px")}}function rr(i,e){var t="";if(typeof i=="string")t=i;else do{var n=le(i,"transform");n&&n!=="none"&&(t=n+" "+t)}while(!e&&(i=i.parentNode));var r=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return r&&new r(t)}function Ul(i,e,t){if(i){var n=i.getElementsByTagName(e),r=0,s=n.length;if(t)for(;r<s;r++)t(n[r],r);return n}return[]}function _i(){var i=document.scrollingElement;return i||document.documentElement}function Qe(i,e,t,n,r){if(!(!i.getBoundingClientRect&&i!==window)){var s,a,u,c,v,k,A;if(i!==window&&i.parentNode&&i!==_i()?(s=i.getBoundingClientRect(),a=s.top,u=s.left,c=s.bottom,v=s.right,k=s.height,A=s.width):(a=0,u=0,c=window.innerHeight,v=window.innerWidth,k=window.innerHeight,A=window.innerWidth),(e||t)&&i!==window&&(r=r||i.parentNode,!Oi))do if(r&&r.getBoundingClientRect&&(le(r,"transform")!=="none"||t&&le(r,"position")!=="static")){var N=r.getBoundingClientRect();a-=N.top+parseInt(le(r,"border-top-width")),u-=N.left+parseInt(le(r,"border-left-width")),c=a+s.height,v=u+s.width;break}while(r=r.parentNode);if(n&&i!==window){var y=rr(r||i),d=y&&y.a,g=y&&y.d;y&&(a/=g,u/=d,A/=d,k/=g,c=a+k,v=u+A)}return{top:a,left:u,bottom:c,right:v,width:A,height:k}}}function Il(i,e,t){for(var n=nn(i,!0),r=Qe(i)[e];n;){var s=Qe(n)[t],a=void 0;if(t==="top"||t==="left"?a=r>=s:a=r<=s,!a)return n;if(n===_i())break;n=nn(n,!1)}return!1}function sr(i,e,t,n){for(var r=0,s=0,a=i.children;s<a.length;){if(a[s].style.display!=="none"&&a[s]!==de.ghost&&(n||a[s]!==de.dragged)&&oi(a[s],t.draggable,i,!1)){if(r===e)return a[s];r++}s++}return null}function yo(i,e){for(var t=i.lastElementChild;t&&(t===de.ghost||le(t,"display")==="none"||e&&!Us(t,e));)t=t.previousElementSibling;return t||null}function Xt(i,e){var t=0;if(!i||!i.parentNode)return-1;for(;i=i.previousElementSibling;)i.nodeName.toUpperCase()!=="TEMPLATE"&&i!==de.clone&&(!e||Us(i,e))&&t++;return t}function Ol(i){var e=0,t=0,n=_i();if(i)do{var r=rr(i),s=r.a,a=r.d;e+=i.scrollLeft*s,t+=i.scrollTop*a}while(i!==n&&(i=i.parentNode));return[e,t]}function Jh(i,e){for(var t in i)if(i.hasOwnProperty(t)){for(var n in e)if(e.hasOwnProperty(n)&&e[n]===i[t][n])return Number(t)}return-1}function nn(i,e){if(!i||!i.getBoundingClientRect)return _i();var t=i,n=!1;do if(t.clientWidth<t.scrollWidth||t.clientHeight<t.scrollHeight){var r=le(t);if(t.clientWidth<t.scrollWidth&&(r.overflowX=="auto"||r.overflowX=="scroll")||t.clientHeight<t.scrollHeight&&(r.overflowY=="auto"||r.overflowY=="scroll")){if(!t.getBoundingClientRect||t===document.body)return _i();if(n||e)return t;n=!0}}while(t=t.parentNode);return _i()}function Gh(i,e){if(i&&e)for(var t in e)e.hasOwnProperty(t)&&(i[t]=e[t]);return i}function so(i,e){return Math.round(i.top)===Math.round(e.top)&&Math.round(i.left)===Math.round(e.left)&&Math.round(i.height)===Math.round(e.height)&&Math.round(i.width)===Math.round(e.width)}var Br;function Wl(i,e){return function(){if(!Br){var t=arguments,n=this;t.length===1?i.call(n,t[0]):i.apply(n,t),Br=setTimeout(function(){Br=void 0},e)}}}function Xh(){clearTimeout(Br),Br=void 0}function $l(i,e,t){i.scrollLeft+=e,i.scrollTop+=t}function ql(i){var e=window.Polymer,t=window.jQuery||window.Zepto;return e&&e.dom?e.dom(i).cloneNode(!0):t?t(i).clone(!0)[0]:i.cloneNode(!0)}function Kl(i,e,t){var n={};return Array.from(i.children).forEach(function(r){var s,a,u,c;if(!(!oi(r,e.draggable,i,!1)||r.animated||r===t)){var v=Qe(r);n.left=Math.min((s=n.left)!==null&&s!==void 0?s:1/0,v.left),n.top=Math.min((a=n.top)!==null&&a!==void 0?a:1/0,v.top),n.right=Math.max((u=n.right)!==null&&u!==void 0?u:-1/0,v.right),n.bottom=Math.max((c=n.bottom)!==null&&c!==void 0?c:-1/0,v.bottom)}}),n.width=n.right-n.left,n.height=n.bottom-n.top,n.x=n.left,n.y=n.top,n}var Pt="Sortable"+new Date().getTime();function Yh(){var i=[],e;return{captureAnimationState:function(){if(i=[],!!this.options.animation){var n=[].slice.call(this.el.children);n.forEach(function(r){if(!(le(r,"display")==="none"||r===de.ghost)){i.push({target:r,rect:Qe(r)});var s=ki({},i[i.length-1].rect);if(r.thisAnimationDuration){var a=rr(r,!0);a&&(s.top-=a.f,s.left-=a.e)}r.fromRect=s}})}},addAnimationState:function(n){i.push(n)},removeAnimationState:function(n){i.splice(Jh(i,{target:n}),1)},animateAll:function(n){var r=this;if(!this.options.animation){clearTimeout(e),typeof n=="function"&&n();return}var s=!1,a=0;i.forEach(function(u){var c=0,v=u.target,k=v.fromRect,A=Qe(v),N=v.prevFromRect,y=v.prevToRect,d=u.rect,g=rr(v,!0);g&&(A.top-=g.f,A.left-=g.e),v.toRect=A,v.thisAnimationDuration&&so(N,A)&&!so(k,A)&&(d.top-A.top)/(d.left-A.left)===(k.top-A.top)/(k.left-A.left)&&(c=Qh(d,N,y,r.options)),so(A,k)||(v.prevFromRect=k,v.prevToRect=A,c||(c=r.options.animation),r.animate(v,d,A,c)),c&&(s=!0,a=Math.max(a,c),clearTimeout(v.animationResetTimer),v.animationResetTimer=setTimeout(function(){v.animationTime=0,v.prevFromRect=null,v.fromRect=null,v.prevToRect=null,v.thisAnimationDuration=null},c),v.thisAnimationDuration=c)}),clearTimeout(e),s?e=setTimeout(function(){typeof n=="function"&&n()},a):typeof n=="function"&&n(),i=[]},animate:function(n,r,s,a){if(a){le(n,"transition",""),le(n,"transform","");var u=rr(this.el),c=u&&u.a,v=u&&u.d,k=(r.left-s.left)/(c||1),A=(r.top-s.top)/(v||1);n.animatingX=!!k,n.animatingY=!!A,le(n,"transform","translate3d("+k+"px,"+A+"px,0)"),this.forRepaintDummy=Zh(n),le(n,"transition","transform "+a+"ms"+(this.options.easing?" "+this.options.easing:"")),le(n,"transform","translate3d(0,0,0)"),typeof n.animated=="number"&&clearTimeout(n.animated),n.animated=setTimeout(function(){le(n,"transition",""),le(n,"transform",""),n.animated=!1,n.animatingX=!1,n.animatingY=!1},a)}}}}function Zh(i){return i.offsetWidth}function Qh(i,e,t,n){return Math.sqrt(Math.pow(e.top-i.top,2)+Math.pow(e.left-i.left,2))/Math.sqrt(Math.pow(e.top-t.top,2)+Math.pow(e.left-t.left,2))*n.animation}var er=[],ao={initializeByDefault:!0},Vr={mount:function(e){for(var t in ao)ao.hasOwnProperty(t)&&!(t in e)&&(e[t]=ao[t]);er.forEach(function(n){if(n.pluginName===e.pluginName)throw"Sortable: Cannot mount plugin ".concat(e.pluginName," more than once")}),er.push(e)},pluginEvent:function(e,t,n){var r=this;this.eventCanceled=!1,n.cancel=function(){r.eventCanceled=!0};var s=e+"Global";er.forEach(function(a){t[a.pluginName]&&(t[a.pluginName][s]&&t[a.pluginName][s](ki({sortable:t},n)),t.options[a.pluginName]&&t[a.pluginName][e]&&t[a.pluginName][e](ki({sortable:t},n)))})},initializePlugins:function(e,t,n,r){er.forEach(function(u){var c=u.pluginName;if(!(!e.options[c]&&!u.initializeByDefault)){var v=new u(e,t,e.options);v.sortable=e,v.options=e.options,e[c]=v,Ii(n,v.defaults)}});for(var s in e.options)if(e.options.hasOwnProperty(s)){var a=this.modifyOption(e,s,e.options[s]);typeof a<"u"&&(e.options[s]=a)}},getEventProperties:function(e,t){var n={};return er.forEach(function(r){typeof r.eventProperties=="function"&&Ii(n,r.eventProperties.call(t[r.pluginName],e))}),n},modifyOption:function(e,t,n){var r;return er.forEach(function(s){e[s.pluginName]&&s.optionListeners&&typeof s.optionListeners[t]=="function"&&(r=s.optionListeners[t].call(e[s.pluginName],n))}),r}};function ef(i){var e=i.sortable,t=i.rootEl,n=i.name,r=i.targetEl,s=i.cloneEl,a=i.toEl,u=i.fromEl,c=i.oldIndex,v=i.newIndex,k=i.oldDraggableIndex,A=i.newDraggableIndex,N=i.originalEvent,y=i.putSortable,d=i.extraEventProperties;if(e=e||t&&t[Pt],!!e){var g,b=e.options,E="on"+n.charAt(0).toUpperCase()+n.substr(1);window.CustomEvent&&!Oi&&!zr?g=new CustomEvent(n,{bubbles:!0,cancelable:!0}):(g=document.createEvent("Event"),g.initEvent(n,!0,!0)),g.to=a||t,g.from=u||t,g.item=r||t,g.clone=s,g.oldIndex=c,g.newIndex=v,g.oldDraggableIndex=k,g.newDraggableIndex=A,g.originalEvent=N,g.pullMode=y?y.lastPutMode:void 0;var P=ki(ki({},d),Vr.getEventProperties(n,e));for(var o in P)g[o]=P[o];t&&t.dispatchEvent(g),b[E]&&b[E].call(e,g)}}var tf=["evt"],Rt=function(e,t){var n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},r=n.evt,s=qh(n,tf);Vr.pluginEvent.bind(de)(e,t,ki({dragEl:Z,parentEl:Je,ghostEl:ce,rootEl:Ve,nextEl:Sn,lastDownEl:js,cloneEl:$e,cloneHidden:tn,dragStarted:Ir,putSortable:nt,activeSortable:de.active,originalEvent:r,oldIndex:nr,oldDraggableIndex:Fr,newIndex:Vt,newDraggableIndex:en,hideGhostForTarget:Yl,unhideGhostForTarget:Zl,cloneNowHidden:function(){tn=!0},cloneNowShown:function(){tn=!1},dispatchSortableEvent:function(u){mt({sortable:t,name:u,originalEvent:r})}},s))};function mt(i){ef(ki({putSortable:nt,cloneEl:$e,targetEl:Z,rootEl:Ve,oldIndex:nr,oldDraggableIndex:Fr,newIndex:Vt,newDraggableIndex:en},i))}var Z,Je,ce,Ve,Sn,js,$e,tn,nr,Vt,Fr,en,Os,nt,ir=!1,Ws=!1,$s=[],En,ai,oo,uo,Ml,Nl,Ir,tr,jr,Hr=!1,Ms=!1,Hs,lt,lo=[],go=!1,qs=[],Js=typeof document<"u",Ns=jl,Bl=zr||Oi?"cssFloat":"float",nf=Js&&!Hl&&!jl&&"draggable"in document.createElement("div"),Jl=function(){if(Js){if(Oi)return!1;var i=document.createElement("x");return i.style.cssText="pointer-events:auto",i.style.pointerEvents==="auto"}}(),Gl=function(e,t){var n=le(e),r=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),s=sr(e,0,t),a=sr(e,1,t),u=s&&le(s),c=a&&le(a),v=u&&parseInt(u.marginLeft)+parseInt(u.marginRight)+Qe(s).width,k=c&&parseInt(c.marginLeft)+parseInt(c.marginRight)+Qe(a).width;if(n.display==="flex")return n.flexDirection==="column"||n.flexDirection==="column-reverse"?"vertical":"horizontal";if(n.display==="grid")return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(s&&u.float&&u.float!=="none"){var A=u.float==="left"?"left":"right";return a&&(c.clear==="both"||c.clear===A)?"vertical":"horizontal"}return s&&(u.display==="block"||u.display==="flex"||u.display==="table"||u.display==="grid"||v>=r&&n[Bl]==="none"||a&&n[Bl]==="none"&&v+k>r)?"vertical":"horizontal"},rf=function(e,t,n){var r=n?e.left:e.top,s=n?e.right:e.bottom,a=n?e.width:e.height,u=n?t.left:t.top,c=n?t.right:t.bottom,v=n?t.width:t.height;return r===u||s===c||r+a/2===u+v/2},sf=function(e,t){var n;return $s.some(function(r){var s=r[Pt].options.emptyInsertThreshold;if(!(!s||yo(r))){var a=Qe(r),u=e>=a.left-s&&e<=a.right+s,c=t>=a.top-s&&t<=a.bottom+s;if(u&&c)return n=r}}),n},Xl=function(e){function t(s,a){return function(u,c,v,k){var A=u.options.group.name&&c.options.group.name&&u.options.group.name===c.options.group.name;if(s==null&&(a||A))return!0;if(s==null||s===!1)return!1;if(a&&s==="clone")return s;if(typeof s=="function")return t(s(u,c,v,k),a)(u,c,v,k);var N=(a?u:c).options.group.name;return s===!0||typeof s=="string"&&s===N||s.join&&s.indexOf(N)>-1}}var n={},r=e.group;(!r||Fs(r)!="object")&&(r={name:r}),n.name=r.name,n.checkPull=t(r.pull,!0),n.checkPut=t(r.put),n.revertClone=r.revertClone,e.group=n},Yl=function(){!Jl&&ce&&le(ce,"display","none")},Zl=function(){!Jl&&ce&&le(ce,"display","")};Js&&!Hl&&document.addEventListener("click",function(i){if(Ws)return i.preventDefault(),i.stopPropagation&&i.stopPropagation(),i.stopImmediatePropagation&&i.stopImmediatePropagation(),Ws=!1,!1},!0);var Cn=function(e){if(Z){e=e.touches?e.touches[0]:e;var t=sf(e.clientX,e.clientY);if(t){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);n.target=n.rootEl=t,n.preventDefault=void 0,n.stopPropagation=void 0,t[Pt]._onDragOver(n)}}},af=function(e){Z&&Z.parentNode[Pt]._isOutsideThisEl(e.target)};function de(i,e){if(!(i&&i.nodeType&&i.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(i));this.el=i,this.options=e=Ii({},e),i[Pt]=this;var t={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(i.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Gl(i,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(a,u){a.setData("Text",u.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:de.supportPointer!==!1&&"PointerEvent"in window&&!Nr,emptyInsertThreshold:5};Vr.initializePlugins(this,i,t);for(var n in t)!(n in e)&&(e[n]=t[n]);Xl(e);for(var r in this)r.charAt(0)==="_"&&typeof this[r]=="function"&&(this[r]=this[r].bind(this));this.nativeDraggable=e.forceFallback?!1:nf,this.nativeDraggable&&(this.options.touchStartThreshold=1),e.supportPointer?Se(i,"pointerdown",this._onTapStart):(Se(i,"mousedown",this._onTapStart),Se(i,"touchstart",this._onTapStart)),this.nativeDraggable&&(Se(i,"dragover",this),Se(i,"dragenter",this)),$s.push(this.el),e.store&&e.store.get&&this.sort(e.store.get(this)||[]),Ii(this,Yh())}de.prototype={constructor:de,_isOutsideThisEl:function(e){!this.el.contains(e)&&e!==this.el&&(tr=null)},_getDirection:function(e,t){return typeof this.options.direction=="function"?this.options.direction.call(this,e,t,Z):this.options.direction},_onTapStart:function(e){if(e.cancelable){var t=this,n=this.el,r=this.options,s=r.preventOnFilter,a=e.type,u=e.touches&&e.touches[0]||e.pointerType&&e.pointerType==="touch"&&e,c=(u||e).target,v=e.target.shadowRoot&&(e.path&&e.path[0]||e.composedPath&&e.composedPath()[0])||c,k=r.filter;if(pf(n),!Z&&!(/mousedown|pointerdown/.test(a)&&e.button!==0||r.disabled)&&!v.isContentEditable&&!(!this.nativeDraggable&&Nr&&c&&c.tagName.toUpperCase()==="SELECT")&&(c=oi(c,r.draggable,n,!1),!(c&&c.animated)&&js!==c)){if(nr=Xt(c),Fr=Xt(c,r.draggable),typeof k=="function"){if(k.call(this,e,c,this)){mt({sortable:t,rootEl:v,name:"filter",targetEl:c,toEl:n,fromEl:n}),Rt("filter",t,{evt:e}),s&&e.preventDefault();return}}else if(k&&(k=k.split(",").some(function(A){if(A=oi(v,A.trim(),n,!1),A)return mt({sortable:t,rootEl:A,name:"filter",targetEl:c,fromEl:n,toEl:n}),Rt("filter",t,{evt:e}),!0}),k)){s&&e.preventDefault();return}r.handle&&!oi(v,r.handle,n,!1)||this._prepareDragStart(e,u,c)}}},_prepareDragStart:function(e,t,n){var r=this,s=r.el,a=r.options,u=s.ownerDocument,c;if(n&&!Z&&n.parentNode===s){var v=Qe(n);if(Ve=s,Z=n,Je=Z.parentNode,Sn=Z.nextSibling,js=n,Os=a.group,de.dragged=Z,En={target:Z,clientX:(t||e).clientX,clientY:(t||e).clientY},Ml=En.clientX-v.left,Nl=En.clientY-v.top,this._lastX=(t||e).clientX,this._lastY=(t||e).clientY,Z.style["will-change"]="all",c=function(){if(Rt("delayEnded",r,{evt:e}),de.eventCanceled){r._onDrop();return}r._disableDelayedDragEvents(),!Rl&&r.nativeDraggable&&(Z.draggable=!0),r._triggerDragStart(e,t),mt({sortable:r,name:"choose",originalEvent:e}),zt(Z,a.chosenClass,!0)},a.ignore.split(",").forEach(function(k){Ul(Z,k.trim(),co)}),Se(u,"dragover",Cn),Se(u,"mousemove",Cn),Se(u,"touchmove",Cn),a.supportPointer?(Se(u,"pointerup",r._onDrop),!this.nativeDraggable&&Se(u,"pointercancel",r._onDrop)):(Se(u,"mouseup",r._onDrop),Se(u,"touchend",r._onDrop),Se(u,"touchcancel",r._onDrop)),Rl&&this.nativeDraggable&&(this.options.touchStartThreshold=4,Z.draggable=!0),Rt("delayStart",this,{evt:e}),a.delay&&(!a.delayOnTouchOnly||t)&&(!this.nativeDraggable||!(zr||Oi))){if(de.eventCanceled){this._onDrop();return}a.supportPointer?(Se(u,"pointerup",r._disableDelayedDrag),Se(u,"pointercancel",r._disableDelayedDrag)):(Se(u,"mouseup",r._disableDelayedDrag),Se(u,"touchend",r._disableDelayedDrag),Se(u,"touchcancel",r._disableDelayedDrag)),Se(u,"mousemove",r._delayedDragTouchMoveHandler),Se(u,"touchmove",r._delayedDragTouchMoveHandler),a.supportPointer&&Se(u,"pointermove",r._delayedDragTouchMoveHandler),r._dragStartTimer=setTimeout(c,a.delay)}else c()}},_delayedDragTouchMoveHandler:function(e){var t=e.touches?e.touches[0]:e;Math.max(Math.abs(t.clientX-this._lastX),Math.abs(t.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){Z&&co(Z),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var e=this.el.ownerDocument;Ae(e,"mouseup",this._disableDelayedDrag),Ae(e,"touchend",this._disableDelayedDrag),Ae(e,"touchcancel",this._disableDelayedDrag),Ae(e,"pointerup",this._disableDelayedDrag),Ae(e,"pointercancel",this._disableDelayedDrag),Ae(e,"mousemove",this._delayedDragTouchMoveHandler),Ae(e,"touchmove",this._delayedDragTouchMoveHandler),Ae(e,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(e,t){t=t||e.pointerType=="touch"&&e,!this.nativeDraggable||t?this.options.supportPointer?Se(document,"pointermove",this._onTouchMove):t?Se(document,"touchmove",this._onTouchMove):Se(document,"mousemove",this._onTouchMove):(Se(Z,"dragend",this),Se(Ve,"dragstart",this._onDragStart));try{zs(function(){document.selection?document.selection.empty():window.getSelection().removeAllRanges()})}catch{}},_dragStarted:function(e,t){if(ir=!1,Ve&&Z){Rt("dragStarted",this,{evt:t}),this.nativeDraggable&&Se(document,"dragover",af);var n=this.options;!e&&zt(Z,n.dragClass,!1),zt(Z,n.ghostClass,!0),de.active=this,e&&this._appendGhost(),mt({sortable:this,name:"start",originalEvent:t})}else this._nulling()},_emulateDragOver:function(){if(ai){this._lastX=ai.clientX,this._lastY=ai.clientY,Yl();for(var e=document.elementFromPoint(ai.clientX,ai.clientY),t=e;e&&e.shadowRoot&&(e=e.shadowRoot.elementFromPoint(ai.clientX,ai.clientY),e!==t);)t=e;if(Z.parentNode[Pt]._isOutsideThisEl(e),t)do{if(t[Pt]){var n=void 0;if(n=t[Pt]._onDragOver({clientX:ai.clientX,clientY:ai.clientY,target:e,rootEl:t}),n&&!this.options.dragoverBubble)break}e=t}while(t=Vl(t));Zl()}},_onTouchMove:function(e){if(En){var t=this.options,n=t.fallbackTolerance,r=t.fallbackOffset,s=e.touches?e.touches[0]:e,a=ce&&rr(ce,!0),u=ce&&a&&a.a,c=ce&&a&&a.d,v=Ns&&lt&&Ol(lt),k=(s.clientX-En.clientX+r.x)/(u||1)+(v?v[0]-lo[0]:0)/(u||1),A=(s.clientY-En.clientY+r.y)/(c||1)+(v?v[1]-lo[1]:0)/(c||1);if(!de.active&&!ir){if(n&&Math.max(Math.abs(s.clientX-this._lastX),Math.abs(s.clientY-this._lastY))<n)return;this._onDragStart(e,!0)}if(ce){a?(a.e+=k-(oo||0),a.f+=A-(uo||0)):a={a:1,b:0,c:0,d:1,e:k,f:A};var N="matrix(".concat(a.a,",").concat(a.b,",").concat(a.c,",").concat(a.d,",").concat(a.e,",").concat(a.f,")");le(ce,"webkitTransform",N),le(ce,"mozTransform",N),le(ce,"msTransform",N),le(ce,"transform",N),oo=k,uo=A,ai=s}e.cancelable&&e.preventDefault()}},_appendGhost:function(){if(!ce){var e=this.options.fallbackOnBody?document.body:Ve,t=Qe(Z,!0,Ns,!0,e),n=this.options;if(Ns){for(lt=e;le(lt,"position")==="static"&&le(lt,"transform")==="none"&&lt!==document;)lt=lt.parentNode;lt!==document.body&&lt!==document.documentElement?(lt===document&&(lt=_i()),t.top+=lt.scrollTop,t.left+=lt.scrollLeft):lt=_i(),lo=Ol(lt)}ce=Z.cloneNode(!0),zt(ce,n.ghostClass,!1),zt(ce,n.fallbackClass,!0),zt(ce,n.dragClass,!0),le(ce,"transition",""),le(ce,"transform",""),le(ce,"box-sizing","border-box"),le(ce,"margin",0),le(ce,"top",t.top),le(ce,"left",t.left),le(ce,"width",t.width),le(ce,"height",t.height),le(ce,"opacity","0.8"),le(ce,"position",Ns?"absolute":"fixed"),le(ce,"zIndex","100000"),le(ce,"pointerEvents","none"),de.ghost=ce,e.appendChild(ce),le(ce,"transform-origin",Ml/parseInt(ce.style.width)*100+"% "+Nl/parseInt(ce.style.height)*100+"%")}},_onDragStart:function(e,t){var n=this,r=e.dataTransfer,s=n.options;if(Rt("dragStart",this,{evt:e}),de.eventCanceled){this._onDrop();return}Rt("setupClone",this),de.eventCanceled||($e=ql(Z),$e.removeAttribute("id"),$e.draggable=!1,$e.style["will-change"]="",this._hideClone(),zt($e,this.options.chosenClass,!1),de.clone=$e),n.cloneId=zs(function(){Rt("clone",n),!de.eventCanceled&&(n.options.removeCloneOnHide||Ve.insertBefore($e,Z),n._hideClone(),mt({sortable:n,name:"clone"}))}),!t&&zt(Z,s.dragClass,!0),t?(Ws=!0,n._loopId=setInterval(n._emulateDragOver,50)):(Ae(document,"mouseup",n._onDrop),Ae(document,"touchend",n._onDrop),Ae(document,"touchcancel",n._onDrop),r&&(r.effectAllowed="move",s.setData&&s.setData.call(n,r,Z)),Se(document,"drop",n),le(Z,"transform","translateZ(0)")),ir=!0,n._dragStartId=zs(n._dragStarted.bind(n,t,e)),Se(document,"selectstart",n),Ir=!0,Nr&&le(document.body,"user-select","none")},_onDragOver:function(e){var t=this.el,n=e.target,r,s,a,u=this.options,c=u.group,v=de.active,k=Os===c,A=u.sort,N=nt||v,y,d=this,g=!1;if(go)return;function b($,ee){Rt($,d,ki({evt:e,isOwner:k,axis:y?"vertical":"horizontal",revert:a,dragRect:r,targetRect:s,canSort:A,fromSortable:N,target:n,completed:P,onMove:function(ie,ae){return Bs(Ve,t,Z,r,ie,Qe(ie),e,ae)},changed:o},ee))}function E(){b("dragOverAnimationCapture"),d.captureAnimationState(),d!==N&&N.captureAnimationState()}function P($){return b("dragOverCompleted",{insertion:$}),$&&(k?v._hideClone():v._showClone(d),d!==N&&(zt(Z,nt?nt.options.ghostClass:v.options.ghostClass,!1),zt(Z,u.ghostClass,!0)),nt!==d&&d!==de.active?nt=d:d===de.active&&nt&&(nt=null),N===d&&(d._ignoreWhileAnimating=n),d.animateAll(function(){b("dragOverAnimationComplete"),d._ignoreWhileAnimating=null}),d!==N&&(N.animateAll(),N._ignoreWhileAnimating=null)),(n===Z&&!Z.animated||n===t&&!n.animated)&&(tr=null),!u.dragoverBubble&&!e.rootEl&&n!==document&&(Z.parentNode[Pt]._isOutsideThisEl(e.target),!$&&Cn(e)),!u.dragoverBubble&&e.stopPropagation&&e.stopPropagation(),g=!0}function o(){Vt=Xt(Z),en=Xt(Z,u.draggable),mt({sortable:d,name:"change",toEl:t,newIndex:Vt,newDraggableIndex:en,originalEvent:e})}if(e.preventDefault!==void 0&&e.cancelable&&e.preventDefault(),n=oi(n,u.draggable,t,!0),b("dragOver"),de.eventCanceled)return g;if(Z.contains(e.target)||n.animated&&n.animatingX&&n.animatingY||d._ignoreWhileAnimating===n)return P(!1);if(Ws=!1,v&&!u.disabled&&(k?A||(a=Je!==Ve):nt===this||(this.lastPutMode=Os.checkPull(this,v,Z,e))&&c.checkPut(this,v,Z,e))){if(y=this._getDirection(e,n)==="vertical",r=Qe(Z),b("dragOverValid"),de.eventCanceled)return g;if(a)return Je=Ve,E(),this._hideClone(),b("revert"),de.eventCanceled||(Sn?Ve.insertBefore(Z,Sn):Ve.appendChild(Z)),P(!0);var h=yo(t,u.draggable);if(!h||df(e,y,this)&&!h.animated){if(h===Z)return P(!1);if(h&&t===e.target&&(n=h),n&&(s=Qe(n)),Bs(Ve,t,Z,r,n,s,e,!!n)!==!1)return E(),h&&h.nextSibling?t.insertBefore(Z,h.nextSibling):t.appendChild(Z),Je=t,o(),P(!0)}else if(h&&lf(e,y,this)){var f=sr(t,0,u,!0);if(f===Z)return P(!1);if(n=f,s=Qe(n),Bs(Ve,t,Z,r,n,s,e,!1)!==!1)return E(),t.insertBefore(Z,f),Je=t,o(),P(!0)}else if(n.parentNode===t){s=Qe(n);var _=0,C,I=Z.parentNode!==t,L=!rf(Z.animated&&Z.toRect||r,n.animated&&n.toRect||s,y),F=y?"top":"left",K=Il(n,"top","top")||Il(Z,"top","top"),W=K?K.scrollTop:void 0;tr!==n&&(C=s[F],Hr=!1,Ms=!L&&u.invertSwap||I),_=cf(e,n,s,y,L?1:u.swapThreshold,u.invertedSwapThreshold==null?u.swapThreshold:u.invertedSwapThreshold,Ms,tr===n);var q;if(_!==0){var G=Xt(Z);do G-=_,q=Je.children[G];while(q&&(le(q,"display")==="none"||q===ce))}if(_===0||q===n)return P(!1);tr=n,jr=_;var x=n.nextElementSibling,U=!1;U=_===1;var z=Bs(Ve,t,Z,r,n,s,e,U);if(z!==!1)return(z===1||z===-1)&&(U=z===1),go=!0,setTimeout(uf,30),E(),U&&!x?t.appendChild(Z):n.parentNode.insertBefore(Z,U?x:n),K&&$l(K,0,W-K.scrollTop),Je=Z.parentNode,C!==void 0&&!Ms&&(Hs=Math.abs(C-Qe(n)[F])),o(),P(!0)}if(t.contains(Z))return P(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){Ae(document,"mousemove",this._onTouchMove),Ae(document,"touchmove",this._onTouchMove),Ae(document,"pointermove",this._onTouchMove),Ae(document,"dragover",Cn),Ae(document,"mousemove",Cn),Ae(document,"touchmove",Cn)},_offUpEvents:function(){var e=this.el.ownerDocument;Ae(e,"mouseup",this._onDrop),Ae(e,"touchend",this._onDrop),Ae(e,"pointerup",this._onDrop),Ae(e,"pointercancel",this._onDrop),Ae(e,"touchcancel",this._onDrop),Ae(document,"selectstart",this)},_onDrop:function(e){var t=this.el,n=this.options;if(Vt=Xt(Z),en=Xt(Z,n.draggable),Rt("drop",this,{evt:e}),Je=Z&&Z.parentNode,Vt=Xt(Z),en=Xt(Z,n.draggable),de.eventCanceled){this._nulling();return}ir=!1,Ms=!1,Hr=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),mo(this.cloneId),mo(this._dragStartId),this.nativeDraggable&&(Ae(document,"drop",this),Ae(t,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),Nr&&le(document.body,"user-select",""),le(Z,"transform",""),e&&(Ir&&(e.cancelable&&e.preventDefault(),!n.dropBubble&&e.stopPropagation()),ce&&ce.parentNode&&ce.parentNode.removeChild(ce),(Ve===Je||nt&&nt.lastPutMode!=="clone")&&$e&&$e.parentNode&&$e.parentNode.removeChild($e),Z&&(this.nativeDraggable&&Ae(Z,"dragend",this),co(Z),Z.style["will-change"]="",Ir&&!ir&&zt(Z,nt?nt.options.ghostClass:this.options.ghostClass,!1),zt(Z,this.options.chosenClass,!1),mt({sortable:this,name:"unchoose",toEl:Je,newIndex:null,newDraggableIndex:null,originalEvent:e}),Ve!==Je?(Vt>=0&&(mt({rootEl:Je,name:"add",toEl:Je,fromEl:Ve,originalEvent:e}),mt({sortable:this,name:"remove",toEl:Je,originalEvent:e}),mt({rootEl:Je,name:"sort",toEl:Je,fromEl:Ve,originalEvent:e}),mt({sortable:this,name:"sort",toEl:Je,originalEvent:e})),nt&&nt.save()):Vt!==nr&&Vt>=0&&(mt({sortable:this,name:"update",toEl:Je,originalEvent:e}),mt({sortable:this,name:"sort",toEl:Je,originalEvent:e})),de.active&&((Vt==null||Vt===-1)&&(Vt=nr,en=Fr),mt({sortable:this,name:"end",toEl:Je,originalEvent:e}),this.save()))),this._nulling()},_nulling:function(){Rt("nulling",this),Ve=Z=Je=ce=Sn=$e=js=tn=En=ai=Ir=Vt=en=nr=Fr=tr=jr=nt=Os=de.dragged=de.ghost=de.clone=de.active=null,qs.forEach(function(e){e.checked=!0}),qs.length=oo=uo=0},handleEvent:function(e){switch(e.type){case"drop":case"dragend":this._onDrop(e);break;case"dragenter":case"dragover":Z&&(this._onDragOver(e),of(e));break;case"selectstart":e.preventDefault();break}},toArray:function(){for(var e=[],t,n=this.el.children,r=0,s=n.length,a=this.options;r<s;r++)t=n[r],oi(t,a.draggable,this.el,!1)&&e.push(t.getAttribute(a.dataIdAttr)||ff(t));return e},sort:function(e,t){var n={},r=this.el;this.toArray().forEach(function(s,a){var u=r.children[a];oi(u,this.options.draggable,r,!1)&&(n[s]=u)},this),t&&this.captureAnimationState(),e.forEach(function(s){n[s]&&(r.removeChild(n[s]),r.appendChild(n[s]))}),t&&this.animateAll()},save:function(){var e=this.options.store;e&&e.set&&e.set(this)},closest:function(e,t){return oi(e,t||this.options.draggable,this.el,!1)},option:function(e,t){var n=this.options;if(t===void 0)return n[e];var r=Vr.modifyOption(this,e,t);typeof r<"u"?n[e]=r:n[e]=t,e==="group"&&Xl(n)},destroy:function(){Rt("destroy",this);var e=this.el;e[Pt]=null,Ae(e,"mousedown",this._onTapStart),Ae(e,"touchstart",this._onTapStart),Ae(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(Ae(e,"dragover",this),Ae(e,"dragenter",this)),Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),function(t){t.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),$s.splice($s.indexOf(this.el),1),this.el=e=null},_hideClone:function(){if(!tn){if(Rt("hideClone",this),de.eventCanceled)return;le($e,"display","none"),this.options.removeCloneOnHide&&$e.parentNode&&$e.parentNode.removeChild($e),tn=!0}},_showClone:function(e){if(e.lastPutMode!=="clone"){this._hideClone();return}if(tn){if(Rt("showClone",this),de.eventCanceled)return;Z.parentNode==Ve&&!this.options.group.revertClone?Ve.insertBefore($e,Z):Sn?Ve.insertBefore($e,Sn):Ve.appendChild($e),this.options.group.revertClone&&this.animate(Z,$e),le($e,"display",""),tn=!1}}};function of(i){i.dataTransfer&&(i.dataTransfer.dropEffect="move"),i.cancelable&&i.preventDefault()}function Bs(i,e,t,n,r,s,a,u){var c,v=i[Pt],k=v.options.onMove,A;return window.CustomEvent&&!Oi&&!zr?c=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(c=document.createEvent("Event"),c.initEvent("move",!0,!0)),c.to=e,c.from=i,c.dragged=t,c.draggedRect=n,c.related=r||e,c.relatedRect=s||Qe(e),c.willInsertAfter=u,c.originalEvent=a,i.dispatchEvent(c),k&&(A=k.call(v,c,a)),A}function co(i){i.draggable=!1}function uf(){go=!1}function lf(i,e,t){var n=Qe(sr(t.el,0,t.options,!0)),r=Kl(t.el,t.options,ce),s=10;return e?i.clientX<r.left-s||i.clientY<n.top&&i.clientX<n.right:i.clientY<r.top-s||i.clientY<n.bottom&&i.clientX<n.left}function df(i,e,t){var n=Qe(yo(t.el,t.options.draggable)),r=Kl(t.el,t.options,ce),s=10;return e?i.clientX>r.right+s||i.clientY>n.bottom&&i.clientX>n.left:i.clientY>r.bottom+s||i.clientX>n.right&&i.clientY>n.top}function cf(i,e,t,n,r,s,a,u){var c=n?i.clientY:i.clientX,v=n?t.height:t.width,k=n?t.top:t.left,A=n?t.bottom:t.right,N=!1;if(!a){if(u&&Hs<v*r){if(!Hr&&(jr===1?c>k+v*s/2:c<A-v*s/2)&&(Hr=!0),Hr)N=!0;else if(jr===1?c<k+Hs:c>A-Hs)return-jr}else if(c>k+v*(1-r)/2&&c<A-v*(1-r)/2)return hf(e)}return N=N||a,N&&(c<k+v*s/2||c>A-v*s/2)?c>k+v/2?1:-1:0}function hf(i){return Xt(Z)<Xt(i)?1:-1}function ff(i){for(var e=i.tagName+i.className+i.src+i.href+i.textContent,t=e.length,n=0;t--;)n+=e.charCodeAt(t);return n.toString(36)}function pf(i){qs.length=0;for(var e=i.getElementsByTagName("input"),t=e.length;t--;){var n=e[t];n.checked&&qs.push(n)}}function zs(i){return setTimeout(i,0)}function mo(i){return clearTimeout(i)}Js&&Se(document,"touchmove",function(i){(de.active||ir)&&i.cancelable&&i.preventDefault()});de.utils={on:Se,off:Ae,css:le,find:Ul,is:function(e,t){return!!oi(e,t,e,!1)},extend:Gh,throttle:Wl,closest:oi,toggleClass:zt,clone:ql,index:Xt,nextTick:zs,cancelNextTick:mo,detectDirection:Gl,getChild:sr,expando:Pt};de.get=function(i){return i[Pt]};de.mount=function(){for(var i=arguments.length,e=new Array(i),t=0;t<i;t++)e[t]=arguments[t];e[0].constructor===Array&&(e=e[0]),e.forEach(function(n){if(!n.prototype||!n.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(n));n.utils&&(de.utils=ki(ki({},de.utils),n.utils)),Vr.mount(n)})};de.create=function(i,e){return new de(i,e)};de.version=Kh;var Ze=[],Or,vo,bo=!1,ho,fo,Ks,Mr;function gf(){function i(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var e in this)e.charAt(0)==="_"&&typeof this[e]=="function"&&(this[e]=this[e].bind(this))}return i.prototype={dragStarted:function(t){var n=t.originalEvent;this.sortable.nativeDraggable?Se(document,"dragover",this._handleAutoScroll):this.options.supportPointer?Se(document,"pointermove",this._handleFallbackAutoScroll):n.touches?Se(document,"touchmove",this._handleFallbackAutoScroll):Se(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(t){var n=t.originalEvent;!this.options.dragOverBubble&&!n.rootEl&&this._handleAutoScroll(n)},drop:function(){this.sortable.nativeDraggable?Ae(document,"dragover",this._handleAutoScroll):(Ae(document,"pointermove",this._handleFallbackAutoScroll),Ae(document,"touchmove",this._handleFallbackAutoScroll),Ae(document,"mousemove",this._handleFallbackAutoScroll)),Fl(),Vs(),Xh()},nulling:function(){Ks=vo=Or=bo=Mr=ho=fo=null,Ze.length=0},_handleFallbackAutoScroll:function(t){this._handleAutoScroll(t,!0)},_handleAutoScroll:function(t,n){var r=this,s=(t.touches?t.touches[0]:t).clientX,a=(t.touches?t.touches[0]:t).clientY,u=document.elementFromPoint(s,a);if(Ks=t,n||this.options.forceAutoScrollFallback||zr||Oi||Nr){po(t,this.options,u,n);var c=nn(u,!0);bo&&(!Mr||s!==ho||a!==fo)&&(Mr&&Fl(),Mr=setInterval(function(){var v=nn(document.elementFromPoint(s,a),!0);v!==c&&(c=v,Vs()),po(t,r.options,v,n)},10),ho=s,fo=a)}else{if(!this.options.bubbleScroll||nn(u,!0)===_i()){Vs();return}po(t,this.options,nn(u,!1),!1)}}},Ii(i,{pluginName:"scroll",initializeByDefault:!0})}function Vs(){Ze.forEach(function(i){clearInterval(i.pid)}),Ze=[]}function Fl(){clearInterval(Mr)}var po=Wl(function(i,e,t,n){if(e.scroll){var r=(i.touches?i.touches[0]:i).clientX,s=(i.touches?i.touches[0]:i).clientY,a=e.scrollSensitivity,u=e.scrollSpeed,c=_i(),v=!1,k;vo!==t&&(vo=t,Vs(),Or=e.scroll,k=e.scrollFn,Or===!0&&(Or=nn(t,!0)));var A=0,N=Or;do{var y=N,d=Qe(y),g=d.top,b=d.bottom,E=d.left,P=d.right,o=d.width,h=d.height,f=void 0,_=void 0,C=y.scrollWidth,I=y.scrollHeight,L=le(y),F=y.scrollLeft,K=y.scrollTop;y===c?(f=o<C&&(L.overflowX==="auto"||L.overflowX==="scroll"||L.overflowX==="visible"),_=h<I&&(L.overflowY==="auto"||L.overflowY==="scroll"||L.overflowY==="visible")):(f=o<C&&(L.overflowX==="auto"||L.overflowX==="scroll"),_=h<I&&(L.overflowY==="auto"||L.overflowY==="scroll"));var W=f&&(Math.abs(P-r)<=a&&F+o<C)-(Math.abs(E-r)<=a&&!!F),q=_&&(Math.abs(b-s)<=a&&K+h<I)-(Math.abs(g-s)<=a&&!!K);if(!Ze[A])for(var G=0;G<=A;G++)Ze[G]||(Ze[G]={});(Ze[A].vx!=W||Ze[A].vy!=q||Ze[A].el!==y)&&(Ze[A].el=y,Ze[A].vx=W,Ze[A].vy=q,clearInterval(Ze[A].pid),(W!=0||q!=0)&&(v=!0,Ze[A].pid=setInterval(function(){n&&this.layer===0&&de.active._onTouchMove(Ks);var x=Ze[this.layer].vy?Ze[this.layer].vy*u:0,U=Ze[this.layer].vx?Ze[this.layer].vx*u:0;typeof k=="function"&&k.call(de.dragged.parentNode[Pt],U,x,i,Ks,Ze[this.layer].el)!=="continue"||$l(Ze[this.layer].el,U,x)}.bind({layer:A}),24))),A++}while(e.bubbleScroll&&N!==c&&(N=nn(N,!1)));bo=v}},30),Ql=function(e){var t=e.originalEvent,n=e.putSortable,r=e.dragEl,s=e.activeSortable,a=e.dispatchSortableEvent,u=e.hideGhostForTarget,c=e.unhideGhostForTarget;if(t){var v=n||s;u();var k=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,A=document.elementFromPoint(k.clientX,k.clientY);c(),v&&!v.el.contains(A)&&(a("spill"),this.onSpill({dragEl:r,putSortable:n}))}};function wo(){}wo.prototype={startIndex:null,dragStart:function(e){var t=e.oldDraggableIndex;this.startIndex=t},onSpill:function(e){var t=e.dragEl,n=e.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var r=sr(this.sortable.el,this.startIndex,this.options);r?this.sortable.el.insertBefore(t,r):this.sortable.el.appendChild(t),this.sortable.animateAll(),n&&n.animateAll()},drop:Ql};Ii(wo,{pluginName:"revertOnSpill"});function _o(){}_o.prototype={onSpill:function(e){var t=e.dragEl,n=e.putSortable,r=n||this.sortable;r.captureAnimationState(),t.parentNode&&t.parentNode.removeChild(t),r.animateAll()},drop:Ql};Ii(_o,{pluginName:"removeOnSpill"});de.mount(new gf);de.mount(_o,wo);var ed=de;var td={mounted(){let i=new ed(this.el,{animation:1,delay:4,delayOnTouchOnly:!0,group:"shared",draggable:".draggable",ghostClass:".sortable-ghost",handle:".drag-handle",onEnd:e=>{e.preventDefault(),console.log("onEnd"),this.pushEvent("dropped",{draggedId:e.item.id,toDropzoneId:e.to.id,fromDropzoneId:e.from.id,newDraggableIndex:e.newDraggableIndex,oldDraggableIndex:e.oldDraggableIndex,newOrder:i.toArray()})}})}};var _c=za(nd());function mf(i){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)t.hasOwnProperty(n)&&(i[n]=t[n])}return i}function Co(i,e){return Array(e+1).join(i)}function vf(i){return i.replace(/^\n*/,"")}function bf(i){for(var e=i.length;e>0&&i[e-1]===`
`;)e--;return i.substring(0,e)}var yf=["ADDRESS","ARTICLE","ASIDE","AUDIO","BLOCKQUOTE","BODY","CANVAS","CENTER","DD","DIR","DIV","DL","DT","FIELDSET","FIGCAPTION","FIGURE","FOOTER","FORM","FRAMESET","H1","H2","H3","H4","H5","H6","HEADER","HGROUP","HR","HTML","ISINDEX","LI","MAIN","MENU","NAV","NOFRAMES","NOSCRIPT","OL","OUTPUT","P","PRE","SECTION","TABLE","TBODY","TD","TFOOT","TH","THEAD","TR","UL"];function So(i){return Do(i,yf)}var ad=["AREA","BASE","BR","COL","COMMAND","EMBED","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR"];function od(i){return Do(i,ad)}function wf(i){return ld(i,ad)}var ud=["A","TABLE","THEAD","TBODY","TFOOT","TH","TD","IFRAME","SCRIPT","AUDIO","VIDEO"];function _f(i){return Do(i,ud)}function kf(i){return ld(i,ud)}function Do(i,e){return e.indexOf(i.nodeName)>=0}function ld(i,e){return i.getElementsByTagName&&e.some(function(t){return i.getElementsByTagName(t).length})}var dt={};dt.paragraph={filter:"p",replacement:function(i){return`

`+i+`

`}};dt.lineBreak={filter:"br",replacement:function(i,e,t){return t.br+`
`}};dt.heading={filter:["h1","h2","h3","h4","h5","h6"],replacement:function(i,e,t){var n=Number(e.nodeName.charAt(1));if(t.headingStyle==="setext"&&n<3){var r=Co(n===1?"=":"-",i.length);return`

`+i+`
`+r+`

`}else return`

`+Co("#",n)+" "+i+`

`}};dt.blockquote={filter:"blockquote",replacement:function(i){return i=i.replace(/^\n+|\n+$/g,""),i=i.replace(/^/gm,"> "),`

`+i+`

`}};dt.list={filter:["ul","ol"],replacement:function(i,e){var t=e.parentNode;return t.nodeName==="LI"&&t.lastElementChild===e?`
`+i:`

`+i+`

`}};dt.listItem={filter:"li",replacement:function(i,e,t){i=i.replace(/^\n+/,"").replace(/\n+$/,`
`).replace(/\n/gm,`
    `);var n=t.bulletListMarker+"   ",r=e.parentNode;if(r.nodeName==="OL"){var s=r.getAttribute("start"),a=Array.prototype.indexOf.call(r.children,e);n=(s?Number(s)+a:a+1)+".  "}return n+i+(e.nextSibling&&!/\n$/.test(i)?`
`:"")}};dt.indentedCodeBlock={filter:function(i,e){return e.codeBlockStyle==="indented"&&i.nodeName==="PRE"&&i.firstChild&&i.firstChild.nodeName==="CODE"},replacement:function(i,e,t){return`

    `+e.firstChild.textContent.replace(/\n/g,`
    `)+`

`}};dt.fencedCodeBlock={filter:function(i,e){return e.codeBlockStyle==="fenced"&&i.nodeName==="PRE"&&i.firstChild&&i.firstChild.nodeName==="CODE"},replacement:function(i,e,t){for(var n=e.firstChild.getAttribute("class")||"",r=(n.match(/language-(\S+)/)||[null,""])[1],s=e.firstChild.textContent,a=t.fence.charAt(0),u=3,c=new RegExp("^"+a+"{3,}","gm"),v;v=c.exec(s);)v[0].length>=u&&(u=v[0].length+1);var k=Co(a,u);return`

`+k+r+`
`+s.replace(/\n$/,"")+`
`+k+`

`}};dt.horizontalRule={filter:"hr",replacement:function(i,e,t){return`

`+t.hr+`

`}};dt.inlineLink={filter:function(i,e){return e.linkStyle==="inlined"&&i.nodeName==="A"&&i.getAttribute("href")},replacement:function(i,e){var t=e.getAttribute("href");t&&(t=t.replace(/([()])/g,"\\$1"));var n=Xs(e.getAttribute("title"));return n&&(n=' "'+n.replace(/"/g,'\\"')+'"'),"["+i+"]("+t+n+")"}};dt.referenceLink={filter:function(i,e){return e.linkStyle==="referenced"&&i.nodeName==="A"&&i.getAttribute("href")},replacement:function(i,e,t){var n=e.getAttribute("href"),r=Xs(e.getAttribute("title"));r&&(r=' "'+r+'"');var s,a;switch(t.linkReferenceStyle){case"collapsed":s="["+i+"][]",a="["+i+"]: "+n+r;break;case"shortcut":s="["+i+"]",a="["+i+"]: "+n+r;break;default:var u=this.references.length+1;s="["+i+"]["+u+"]",a="["+u+"]: "+n+r}return this.references.push(a),s},references:[],append:function(i){var e="";return this.references.length&&(e=`

`+this.references.join(`
`)+`

`,this.references=[]),e}};dt.emphasis={filter:["em","i"],replacement:function(i,e,t){return i.trim()?t.emDelimiter+i+t.emDelimiter:""}};dt.strong={filter:["strong","b"],replacement:function(i,e,t){return i.trim()?t.strongDelimiter+i+t.strongDelimiter:""}};dt.code={filter:function(i){var e=i.previousSibling||i.nextSibling,t=i.parentNode.nodeName==="PRE"&&!e;return i.nodeName==="CODE"&&!t},replacement:function(i){if(!i)return"";i=i.replace(/\r?\n|\r/g," ");for(var e=/^`|^ .*?[^ ].* $|`$/.test(i)?" ":"",t="`",n=i.match(/`+/gm)||[];n.indexOf(t)!==-1;)t=t+"`";return t+e+i+e+t}};dt.image={filter:"img",replacement:function(i,e){var t=Xs(e.getAttribute("alt")),n=e.getAttribute("src")||"",r=Xs(e.getAttribute("title")),s=r?' "'+r+'"':"";return n?"!["+t+"]("+n+s+")":""}};function Xs(i){return i?i.replace(/(\n+\s*)+/g,`
`):""}function dd(i){this.options=i,this._keep=[],this._remove=[],this.blankRule={replacement:i.blankReplacement},this.keepReplacement=i.keepReplacement,this.defaultRule={replacement:i.defaultReplacement},this.array=[];for(var e in i.rules)this.array.push(i.rules[e])}dd.prototype={add:function(i,e){this.array.unshift(e)},keep:function(i){this._keep.unshift({filter:i,replacement:this.keepReplacement})},remove:function(i){this._remove.unshift({filter:i,replacement:function(){return""}})},forNode:function(i){if(i.isBlank)return this.blankRule;var e;return(e=ko(this.array,i,this.options))||(e=ko(this._keep,i,this.options))||(e=ko(this._remove,i,this.options))?e:this.defaultRule},forEach:function(i){for(var e=0;e<this.array.length;e++)i(this.array[e],e)}};function ko(i,e,t){for(var n=0;n<i.length;n++){var r=i[n];if(Af(r,e,t))return r}}function Af(i,e,t){var n=i.filter;if(typeof n=="string"){if(n===e.nodeName.toLowerCase())return!0}else if(Array.isArray(n)){if(n.indexOf(e.nodeName.toLowerCase())>-1)return!0}else if(typeof n=="function"){if(n.call(i,e,t))return!0}else throw new TypeError("`filter` needs to be a string, array, or function")}function Ef(i){var e=i.element,t=i.isBlock,n=i.isVoid,r=i.isPre||function(A){return A.nodeName==="PRE"};if(!(!e.firstChild||r(e))){for(var s=null,a=!1,u=null,c=rd(u,e,r);c!==e;){if(c.nodeType===3||c.nodeType===4){var v=c.data.replace(/[ \r\n\t]+/g," ");if((!s||/ $/.test(s.data))&&!a&&v[0]===" "&&(v=v.substr(1)),!v){c=Ao(c);continue}c.data=v,s=c}else if(c.nodeType===1)t(c)||c.nodeName==="BR"?(s&&(s.data=s.data.replace(/ $/,"")),s=null,a=!1):n(c)||r(c)?(s=null,a=!0):s&&(a=!1);else{c=Ao(c);continue}var k=rd(u,c,r);u=c,c=k}s&&(s.data=s.data.replace(/ $/,""),s.data||Ao(s))}}function Ao(i){var e=i.nextSibling||i.parentNode;return i.parentNode.removeChild(i),e}function rd(i,e,t){return i&&i.parentNode===e||t(e)?e.nextSibling||e.parentNode:e.firstChild||e.nextSibling||e.parentNode}var To=typeof window<"u"?window:{};function Cf(){var i=To.DOMParser,e=!1;try{new i().parseFromString("","text/html")&&(e=!0)}catch{}return e}function Sf(){var i=function(){};return Df()?i.prototype.parseFromString=function(e){var t=new window.ActiveXObject("htmlfile");return t.designMode="on",t.open(),t.write(e),t.close(),t}:i.prototype.parseFromString=function(e){var t=document.implementation.createHTMLDocument("");return t.open(),t.write(e),t.close(),t},i}function Df(){var i=!1;try{document.implementation.createHTMLDocument("").open()}catch{To.ActiveXObject&&(i=!0)}return i}var Tf=Cf()?To.DOMParser:Sf();function xf(i,e){var t;if(typeof i=="string"){var n=Lf().parseFromString('<x-turndown id="turndown-root">'+i+"</x-turndown>","text/html");t=n.getElementById("turndown-root")}else t=i.cloneNode(!0);return Ef({element:t,isBlock:So,isVoid:od,isPre:e.preformattedCode?Rf:null}),t}var Eo;function Lf(){return Eo=Eo||new Tf,Eo}function Rf(i){return i.nodeName==="PRE"||i.nodeName==="CODE"}function Pf(i,e){return i.isBlock=So(i),i.isCode=i.nodeName==="CODE"||i.parentNode.isCode,i.isBlank=If(i),i.flankingWhitespace=Of(i,e),i}function If(i){return!od(i)&&!_f(i)&&/^\s*$/i.test(i.textContent)&&!wf(i)&&!kf(i)}function Of(i,e){if(i.isBlock||e.preformattedCode&&i.isCode)return{leading:"",trailing:""};var t=Mf(i.textContent);return t.leadingAscii&&sd("left",i,e)&&(t.leading=t.leadingNonAscii),t.trailingAscii&&sd("right",i,e)&&(t.trailing=t.trailingNonAscii),{leading:t.leading,trailing:t.trailing}}function Mf(i){var e=i.match(/^(([ \t\r\n]*)(\s*))(?:(?=\S)[\s\S]*\S)?((\s*?)([ \t\r\n]*))$/);return{leading:e[1],leadingAscii:e[2],leadingNonAscii:e[3],trailing:e[4],trailingNonAscii:e[5],trailingAscii:e[6]}}function sd(i,e,t){var n,r,s;return i==="left"?(n=e.previousSibling,r=/ $/):(n=e.nextSibling,r=/^ /),n&&(n.nodeType===3?s=r.test(n.nodeValue):t.preformattedCode&&n.nodeName==="CODE"?s=!1:n.nodeType===1&&!So(n)&&(s=r.test(n.textContent))),s}var Nf=Array.prototype.reduce,Bf=[[/\\/g,"\\\\"],[/\*/g,"\\*"],[/^-/g,"\\-"],[/^\+ /g,"\\+ "],[/^(=+)/g,"\\$1"],[/^(#{1,6}) /g,"\\$1 "],[/`/g,"\\`"],[/^~~~/g,"\\~~~"],[/\[/g,"\\["],[/\]/g,"\\]"],[/^>/g,"\\>"],[/_/g,"\\_"],[/^(\d+)\. /g,"$1\\. "]];function Ys(i){if(!(this instanceof Ys))return new Ys(i);var e={rules:dt,headingStyle:"setext",hr:"* * *",bulletListMarker:"*",codeBlockStyle:"indented",fence:"```",emDelimiter:"_",strongDelimiter:"**",linkStyle:"inlined",linkReferenceStyle:"full",br:"  ",preformattedCode:!1,blankReplacement:function(t,n){return n.isBlock?`

`:""},keepReplacement:function(t,n){return n.isBlock?`

`+n.outerHTML+`

`:n.outerHTML},defaultReplacement:function(t,n){return n.isBlock?`

`+t+`

`:t}};this.options=mf({},e,i),this.rules=new dd(this.options)}Ys.prototype={turndown:function(i){if(!Hf(i))throw new TypeError(i+" is not a string, or an element/document/fragment node.");if(i==="")return"";var e=cd.call(this,new xf(i,this.options));return Ff.call(this,e)},use:function(i){if(Array.isArray(i))for(var e=0;e<i.length;e++)this.use(i[e]);else if(typeof i=="function")i(this);else throw new TypeError("plugin must be a Function or an Array of Functions");return this},addRule:function(i,e){return this.rules.add(i,e),this},keep:function(i){return this.rules.keep(i),this},remove:function(i){return this.rules.remove(i),this},escape:function(i){return Bf.reduce(function(e,t){return e.replace(t[0],t[1])},i)}};function cd(i){var e=this;return Nf.call(i.childNodes,function(t,n){n=new Pf(n,e.options);var r="";return n.nodeType===3?r=n.isCode?n.nodeValue:e.escape(n.nodeValue):n.nodeType===1&&(r=jf.call(e,n)),hd(t,r)},"")}function Ff(i){var e=this;return this.rules.forEach(function(t){typeof t.append=="function"&&(i=hd(i,t.append(e.options)))}),i.replace(/^[\t\r\n]+/,"").replace(/[\t\r\n\s]+$/,"")}function jf(i){var e=this.rules.forNode(i),t=cd.call(this,i),n=i.flankingWhitespace;return(n.leading||n.trailing)&&(t=t.trim()),n.leading+e.replacement(t,i,this.options)+n.trailing}function hd(i,e){var t=bf(i),n=vf(e),r=Math.max(i.length-t.length,e.length-n.length),s=`

`.substring(0,r);return t+s+n}function Hf(i){return i!=null&&(typeof i=="string"||i.nodeType&&(i.nodeType===1||i.nodeType===9||i.nodeType===11))}var fd=Ys;var zf="2.1.12",Ln="[data-trix-attachment]",yu={preview:{presentation:"gallery",caption:{name:!0,size:!0}},file:{caption:{size:!0}}},yt={default:{tagName:"div",parse:!1},quote:{tagName:"blockquote",nestable:!0},heading1:{tagName:"h1",terminal:!0,breakOnReturn:!0,group:!1},code:{tagName:"pre",terminal:!0,htmlAttributes:["language"],text:{plaintext:!0}},bulletList:{tagName:"ul",parse:!1},bullet:{tagName:"li",listAttribute:"bulletList",group:!1,nestable:!0,test(i){return pd(i.parentNode)===yt[this.listAttribute].tagName}},numberList:{tagName:"ol",parse:!1},number:{tagName:"li",listAttribute:"numberList",group:!1,nestable:!0,test(i){return pd(i.parentNode)===yt[this.listAttribute].tagName}},attachmentGallery:{tagName:"div",exclusive:!0,terminal:!0,parse:!1,group:!1}},pd=i=>{var e;return i==null||(e=i.tagName)===null||e===void 0?void 0:e.toLowerCase()},gd=navigator.userAgent.match(/android\s([0-9]+.*Chrome)/i),xo=gd&&parseInt(gd[1]),os={composesExistingText:/Android.*Chrome/.test(navigator.userAgent),recentAndroid:xo&&xo>12,samsungAndroid:xo&&navigator.userAgent.match(/Android.*SM-/),forcesObjectResizing:/Trident.*rv:11/.test(navigator.userAgent),supportsInputEvents:typeof InputEvent<"u"&&["data","getTargetRanges","inputType"].every(i=>i in InputEvent.prototype)},Gd={ADD_ATTR:["language"],SAFE_FOR_XML:!1,RETURN_DOM:!0},fe={attachFiles:"Attach Files",bold:"Bold",bullets:"Bullets",byte:"Byte",bytes:"Bytes",captionPlaceholder:"Add a caption\u2026",code:"Code",heading1:"Heading",indent:"Increase Level",italic:"Italic",link:"Link",numbers:"Numbers",outdent:"Decrease Level",quote:"Quote",redo:"Redo",remove:"Remove",strike:"Strikethrough",undo:"Undo",unlink:"Unlink",url:"URL",urlPlaceholder:"Enter a URL\u2026",GB:"GB",KB:"KB",MB:"MB",PB:"PB",TB:"TB"},Vf=[fe.bytes,fe.KB,fe.MB,fe.GB,fe.TB,fe.PB],Xd={prefix:"IEC",precision:2,formatter(i){switch(i){case 0:return"0 ".concat(fe.bytes);case 1:return"1 ".concat(fe.byte);default:let e;this.prefix==="SI"?e=1e3:this.prefix==="IEC"&&(e=1024);let t=Math.floor(Math.log(i)/Math.log(e)),n=(i/Math.pow(e,t)).toFixed(this.precision).replace(/0*$/,"").replace(/\.$/,"");return"".concat(n," ").concat(Vf[t])}}},xa="\uFEFF",sn="\xA0",Yd=function(i){for(let e in i){let t=i[e];this[e]=t}return this},wu=document.documentElement,Uf=wu.matches,Ke=function(i){let{onElement:e,matchingSelector:t,withCallback:n,inPhase:r,preventDefault:s,times:a}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},u=e||wu,c=t,v=r==="capturing",k=function(A){a!=null&&--a==0&&k.destroy();let N=an(A.target,{matchingSelector:c});N!=null&&(n?.call(N,A,N),s&&A.preventDefault())};return k.destroy=()=>u.removeEventListener(i,k,v),u.addEventListener(i,k,v),k},Yr=function(i){let{onElement:e,bubbles:t,cancelable:n,attributes:r}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},s=e??wu;t=t!==!1,n=n!==!1;let a=document.createEvent("Events");return a.initEvent(i,t,n),r!=null&&Yd.call(a,r),s.dispatchEvent(a)},Zd=function(i,e){if(i?.nodeType===1)return Uf.call(i,e)},an=function(i){let{matchingSelector:e,untilNode:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};for(;i&&i.nodeType!==Node.ELEMENT_NODE;)i=i.parentNode;if(i!=null){if(e==null)return i;if(i.closest&&t==null)return i.closest(e);for(;i&&i!==t;){if(Zd(i,e))return i;i=i.parentNode}}},_u=i=>document.activeElement!==i&&xn(i,document.activeElement),xn=function(i,e){if(i&&e)for(;e;){if(e===i)return!0;e=e.parentNode}},Lo=function(i){var e;if((e=i)===null||e===void 0||!e.parentNode)return;let t=0;for(i=i.previousSibling;i;)t++,i=i.previousSibling;return t},on=i=>{var e;return i==null||(e=i.parentNode)===null||e===void 0?void 0:e.removeChild(i)},oa=function(i){let{onlyNodesOfType:e,usingFilter:t,expandEntityReferences:n}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=(()=>{switch(e){case"element":return NodeFilter.SHOW_ELEMENT;case"text":return NodeFilter.SHOW_TEXT;case"comment":return NodeFilter.SHOW_COMMENT;default:return NodeFilter.SHOW_ALL}})();return document.createTreeWalker(i,r,t??null,n===!0)},bt=i=>{var e;return i==null||(e=i.tagName)===null||e===void 0?void 0:e.toLowerCase()},be=function(i){let e,t,n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};typeof i=="object"?(n=i,i=n.tagName):n={attributes:n};let r=document.createElement(i);if(n.editable!=null&&(n.attributes==null&&(n.attributes={}),n.attributes.contenteditable=n.editable),n.attributes)for(e in n.attributes)t=n.attributes[e],r.setAttribute(e,t);if(n.style)for(e in n.style)t=n.style[e],r.style[e]=t;if(n.data)for(e in n.data)t=n.data[e],r.dataset[e]=t;return n.className&&n.className.split(" ").forEach(s=>{r.classList.add(s)}),n.textContent&&(r.textContent=n.textContent),n.childNodes&&[].concat(n.childNodes).forEach(s=>{r.appendChild(s)}),r},Ur,Zr=function(){if(Ur!=null)return Ur;Ur=[];for(let i in yt){let e=yt[i];e.tagName&&Ur.push(e.tagName)}return Ur},Ro=i=>or(i?.firstChild),md=function(i){let{strict:e}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{strict:!0};return e?or(i):or(i)||!or(i.firstChild)&&function(t){return Zr().includes(bt(t))&&!Zr().includes(bt(t.firstChild))}(i)},or=i=>Wf(i)&&i?.data==="block",Wf=i=>i?.nodeType===Node.COMMENT_NODE,ur=function(i){let{name:e}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(i)return Qr(i)?i.data===xa?!e||i.parentNode.dataset.trixCursorTarget===e:void 0:ur(i.firstChild)},Rn=i=>Zd(i,Ln),Qd=i=>Qr(i)&&i?.data==="",Qr=i=>i?.nodeType===Node.TEXT_NODE,ku={level2Enabled:!0,getLevel(){return this.level2Enabled&&os.supportsInputEvents?2:0},pickFiles(i){let e=be("input",{type:"file",multiple:!0,hidden:!0,id:this.fileInputId});e.addEventListener("change",()=>{i(e.files),on(e)}),on(document.getElementById(this.fileInputId)),document.body.appendChild(e),e.click()}},ra={removeBlankTableCells:!1,tableCellSeparator:" | ",tableRowSeparator:`
`},On={bold:{tagName:"strong",inheritable:!0,parser(i){let e=window.getComputedStyle(i);return e.fontWeight==="bold"||e.fontWeight>=600}},italic:{tagName:"em",inheritable:!0,parser:i=>window.getComputedStyle(i).fontStyle==="italic"},href:{groupTagName:"a",parser(i){let e="a:not(".concat(Ln,")"),t=i.closest(e);if(t)return t.getAttribute("href")}},strike:{tagName:"del",inheritable:!0},frozen:{style:{backgroundColor:"highlight"}}},ec={getDefaultHTML:()=>`<div class="trix-button-row">
      <span class="trix-button-group trix-button-group--text-tools" data-trix-button-group="text-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-bold" data-trix-attribute="bold" data-trix-key="b" title="`.concat(fe.bold,'" tabindex="-1">').concat(fe.bold,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-italic" data-trix-attribute="italic" data-trix-key="i" title="`).concat(fe.italic,'" tabindex="-1">').concat(fe.italic,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-strike" data-trix-attribute="strike" title="`).concat(fe.strike,'" tabindex="-1">').concat(fe.strike,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-link" data-trix-attribute="href" data-trix-action="link" data-trix-key="k" title="`).concat(fe.link,'" tabindex="-1">').concat(fe.link,`</button>
      </span>

      <span class="trix-button-group trix-button-group--block-tools" data-trix-button-group="block-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-heading-1" data-trix-attribute="heading1" title="`).concat(fe.heading1,'" tabindex="-1">').concat(fe.heading1,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-quote" data-trix-attribute="quote" title="`).concat(fe.quote,'" tabindex="-1">').concat(fe.quote,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-code" data-trix-attribute="code" title="`).concat(fe.code,'" tabindex="-1">').concat(fe.code,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-bullet-list" data-trix-attribute="bullet" title="`).concat(fe.bullets,'" tabindex="-1">').concat(fe.bullets,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-number-list" data-trix-attribute="number" title="`).concat(fe.numbers,'" tabindex="-1">').concat(fe.numbers,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-decrease-nesting-level" data-trix-action="decreaseNestingLevel" title="`).concat(fe.outdent,'" tabindex="-1">').concat(fe.outdent,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-increase-nesting-level" data-trix-action="increaseNestingLevel" title="`).concat(fe.indent,'" tabindex="-1">').concat(fe.indent,`</button>
      </span>

      <span class="trix-button-group trix-button-group--file-tools" data-trix-button-group="file-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-attach" data-trix-action="attachFiles" title="`).concat(fe.attachFiles,'" tabindex="-1">').concat(fe.attachFiles,`</button>
      </span>

      <span class="trix-button-group-spacer"></span>

      <span class="trix-button-group trix-button-group--history-tools" data-trix-button-group="history-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-undo" data-trix-action="undo" data-trix-key="z" title="`).concat(fe.undo,'" tabindex="-1">').concat(fe.undo,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-redo" data-trix-action="redo" data-trix-key="shift+z" title="`).concat(fe.redo,'" tabindex="-1">').concat(fe.redo,`</button>
      </span>
    </div>

    <div class="trix-dialogs" data-trix-dialogs>
      <div class="trix-dialog trix-dialog--link" data-trix-dialog="href" data-trix-dialog-attribute="href">
        <div class="trix-dialog__link-fields">
          <input type="url" name="href" class="trix-input trix-input--dialog" placeholder="`).concat(fe.urlPlaceholder,'" aria-label="').concat(fe.url,`" data-trix-validate-href required data-trix-input>
          <div class="trix-button-group">
            <input type="button" class="trix-button trix-button--dialog" value="`).concat(fe.link,`" data-trix-method="setAttribute">
            <input type="button" class="trix-button trix-button--dialog" value="`).concat(fe.unlink,`" data-trix-method="removeAttribute">
          </div>
        </div>
      </div>
    </div>`)},tu={interval:5e3},us=Object.freeze({__proto__:null,attachments:yu,blockAttributes:yt,browser:os,css:{attachment:"attachment",attachmentCaption:"attachment__caption",attachmentCaptionEditor:"attachment__caption-editor",attachmentMetadata:"attachment__metadata",attachmentMetadataContainer:"attachment__metadata-container",attachmentName:"attachment__name",attachmentProgress:"attachment__progress",attachmentSize:"attachment__size",attachmentToolbar:"attachment__toolbar",attachmentGallery:"attachment-gallery"},dompurify:Gd,fileSize:Xd,input:ku,keyNames:{8:"backspace",9:"tab",13:"return",27:"escape",37:"left",39:"right",46:"delete",68:"d",72:"h",79:"o"},lang:fe,parser:ra,textAttributes:On,toolbar:ec,undo:tu}),Ge=class{static proxyMethod(e){let{name:t,toMethod:n,toProperty:r,optional:s}=$f(e);this.prototype[t]=function(){let a,u;var c,v;return n?u=s?(c=this[n])===null||c===void 0?void 0:c.call(this):this[n]():r&&(u=this[r]),s?(a=(v=u)===null||v===void 0?void 0:v[t],a?vd.call(a,u,arguments):void 0):(a=u[t],vd.call(a,u,arguments))}}},$f=function(i){let e=i.match(qf);if(!e)throw new Error("can't parse @proxyMethod expression: ".concat(i));let t={name:e[4]};return e[2]!=null?t.toMethod=e[1]:t.toProperty=e[1],e[3]!=null&&(t.optional=!0),t},{apply:vd}=Function.prototype,qf=new RegExp("^(.+?)(\\(\\))?(\\?)?\\.(.+?)$"),Po,Io,Oo,Mn=class extends Ge{static box(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";return e instanceof this?e:this.fromUCS2String(e?.toString())}static fromUCS2String(e){return new this(e,iu(e))}static fromCodepoints(e){return new this(nu(e),e)}constructor(e,t){super(...arguments),this.ucs2String=e,this.codepoints=t,this.length=this.codepoints.length,this.ucs2Length=this.ucs2String.length}offsetToUCS2Offset(e){return nu(this.codepoints.slice(0,Math.max(0,e))).length}offsetFromUCS2Offset(e){return iu(this.ucs2String.slice(0,Math.max(0,e))).length}slice(){return this.constructor.fromCodepoints(this.codepoints.slice(...arguments))}charAt(e){return this.slice(e,e+1)}isEqualTo(e){return this.constructor.box(e).ucs2String===this.ucs2String}toJSON(){return this.ucs2String}getCacheKey(){return this.ucs2String}toString(){return this.ucs2String}},Kf=((Po=Array.from)===null||Po===void 0?void 0:Po.call(Array,"\u{1F47C}").length)===1,Jf=((Io=" ".codePointAt)===null||Io===void 0?void 0:Io.call(" ",0))!=null,Gf=((Oo=String.fromCodePoint)===null||Oo===void 0?void 0:Oo.call(String,32,128124))===" \u{1F47C}",iu,nu;iu=Kf&&Jf?i=>Array.from(i).map(e=>e.codePointAt(0)):function(i){let e=[],t=0,{length:n}=i;for(;t<n;){let r=i.charCodeAt(t++);if(55296<=r&&r<=56319&&t<n){let s=i.charCodeAt(t++);(64512&s)==56320?r=((1023&r)<<10)+(1023&s)+65536:t--}e.push(r)}return e},nu=Gf?i=>String.fromCodePoint(...Array.from(i||[])):function(i){return(()=>{let e=[];return Array.from(i).forEach(t=>{let n="";t>65535&&(t-=65536,n+=String.fromCharCode(t>>>10&1023|55296),t=56320|1023&t),e.push(n+String.fromCharCode(t))}),e})().join("")};var Xf=0,Fi=class extends Ge{static fromJSONString(e){return this.fromJSON(JSON.parse(e))}constructor(){super(...arguments),this.id=++Xf}hasSameConstructorAs(e){return this.constructor===e?.constructor}isEqualTo(e){return this===e}inspect(){let e=[],t=this.contentsForInspection()||{};for(let n in t){let r=t[n];e.push("".concat(n,"=").concat(r))}return"#<".concat(this.constructor.name,":").concat(this.id).concat(e.length?" ".concat(e.join(", ")):"",">")}contentsForInspection(){}toJSONString(){return JSON.stringify(this)}toUTF16String(){return Mn.box(this)}getCacheKey(){return this.id.toString()}},Nn=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];if(i.length!==e.length)return!1;for(let t=0;t<i.length;t++)if(i[t]!==e[t])return!1;return!0},Au=function(i){let e=i.slice(0);for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return e.splice(...n),e},Yf=/[\u05BE\u05C0\u05C3\u05D0-\u05EA\u05F0-\u05F4\u061B\u061F\u0621-\u063A\u0640-\u064A\u066D\u0671-\u06B7\u06BA-\u06BE\u06C0-\u06CE\u06D0-\u06D5\u06E5\u06E6\u200F\u202B\u202E\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE72\uFE74\uFE76-\uFEFC]/,Zf=function(){let i=be("input",{dir:"auto",name:"x",dirName:"x.dir"}),e=be("textarea",{dir:"auto",name:"y",dirName:"y.dir"}),t=be("form");t.appendChild(i),t.appendChild(e);let n=function(){try{return new FormData(t).has(e.dirName)}catch{return!1}}(),r=function(){try{return i.matches(":dir(ltr),:dir(rtl)")}catch{return!1}}();return n?function(s){return e.value=s,new FormData(t).get(e.dirName)}:r?function(s){return i.value=s,i.matches(":dir(rtl)")?"rtl":"ltr"}:function(s){let a=s.trim().charAt(0);return Yf.test(a)?"rtl":"ltr"}}(),Mo=null,No=null,Bo=null,Zs=null,ru=()=>(Mo||(Mo=ep().concat(Qf())),Mo),Xe=i=>yt[i],Qf=()=>(No||(No=Object.keys(yt)),No),su=i=>On[i],ep=()=>(Bo||(Bo=Object.keys(On)),Bo),tc=function(i,e){tp(i).textContent=e.replace(/%t/g,i)},tp=function(i){let e=document.createElement("style");e.setAttribute("type","text/css"),e.setAttribute("data-tag-name",i.toLowerCase());let t=ip();return t&&e.setAttribute("nonce",t),document.head.insertBefore(e,document.head.firstChild),e},ip=function(){let i=bd("trix-csp-nonce")||bd("csp-nonce");if(i){let{nonce:e,content:t}=i;return e==""?t:e}},bd=i=>document.head.querySelector("meta[name=".concat(i,"]")),yd={"application/x-trix-feature-detection":"test"},ic=function(i){let e=i.getData("text/plain"),t=i.getData("text/html");if(!e||!t)return e?.length;{let{body:n}=new DOMParser().parseFromString(t,"text/html");if(n.textContent===e)return!n.querySelector("*")}},nc=/Mac|^iP/.test(navigator.platform)?i=>i.metaKey:i=>i.ctrlKey,Eu=i=>setTimeout(i,1),rc=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e={};for(let t in i){let n=i[t];e[t]=n}return e},pr=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(Object.keys(i).length!==Object.keys(e).length)return!1;for(let t in i)if(i[t]!==e[t])return!1;return!0},Ie=function(i){if(i!=null)return Array.isArray(i)||(i=[i,i]),[wd(i[0]),wd(i[1]!=null?i[1]:i[0])]},Bi=function(i){if(i==null)return;let[e,t]=Ie(i);return au(e,t)},ua=function(i,e){if(i==null||e==null)return;let[t,n]=Ie(i),[r,s]=Ie(e);return au(t,r)&&au(n,s)},wd=function(i){return typeof i=="number"?i:rc(i)},au=function(i,e){return typeof i=="number"?i===e:pr(i,e)},la=class extends Ge{constructor(){super(...arguments),this.update=this.update.bind(this),this.selectionManagers=[]}start(){this.started||(this.started=!0,document.addEventListener("selectionchange",this.update,!0))}stop(){if(this.started)return this.started=!1,document.removeEventListener("selectionchange",this.update,!0)}registerSelectionManager(e){if(!this.selectionManagers.includes(e))return this.selectionManagers.push(e),this.start()}unregisterSelectionManager(e){if(this.selectionManagers=this.selectionManagers.filter(t=>t!==e),this.selectionManagers.length===0)return this.stop()}notifySelectionManagersOfSelectionChange(){return this.selectionManagers.map(e=>e.selectionDidChange())}update(){this.notifySelectionManagersOfSelectionChange()}reset(){this.update()}},Bn=new la,sc=function(){let i=window.getSelection();if(i.rangeCount>0)return i},es=function(){var i;let e=(i=sc())===null||i===void 0?void 0:i.getRangeAt(0);if(e&&!np(e))return e},ac=function(i){let e=window.getSelection();return e.removeAllRanges(),e.addRange(i),Bn.update()},np=i=>_d(i.startContainer)||_d(i.endContainer),_d=i=>!Object.getPrototypeOf(i),Xr=i=>i.replace(new RegExp("".concat(xa),"g"),"").replace(new RegExp("".concat(sn),"g")," "),Cu=new RegExp("[^\\S".concat(sn,"]")),Su=i=>i.replace(new RegExp("".concat(Cu.source),"g")," ").replace(/\ {2,}/g," "),kd=function(i,e){if(i.isEqualTo(e))return["",""];let t=Fo(i,e),{length:n}=t.utf16String,r;if(n){let{offset:s}=t,a=i.codepoints.slice(0,s).concat(i.codepoints.slice(s+n));r=Fo(e,Mn.fromCodepoints(a))}else r=Fo(e,i);return[t.utf16String.toString(),r.utf16String.toString()]},Fo=function(i,e){let t=0,n=i.length,r=e.length;for(;t<n&&i.charAt(t).isEqualTo(e.charAt(t));)t++;for(;n>t+1&&i.charAt(n-1).isEqualTo(e.charAt(r-1));)n--,r--;return{utf16String:i.slice(t,n),offset:t}},wt=class extends Fi{static fromCommonAttributesOfObjects(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];if(!e.length)return new this;let t=Wr(e[0]),n=t.getKeys();return e.slice(1).forEach(r=>{n=t.getKeysCommonToHash(Wr(r)),t=t.slice(n)}),t}static box(e){return Wr(e)}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};super(...arguments),this.values=sa(e)}add(e,t){return this.merge(rp(e,t))}remove(e){return new wt(sa(this.values,e))}get(e){return this.values[e]}has(e){return e in this.values}merge(e){return new wt(sp(this.values,ap(e)))}slice(e){let t={};return Array.from(e).forEach(n=>{this.has(n)&&(t[n]=this.values[n])}),new wt(t)}getKeys(){return Object.keys(this.values)}getKeysCommonToHash(e){return e=Wr(e),this.getKeys().filter(t=>this.values[t]===e.values[t])}isEqualTo(e){return Nn(this.toArray(),Wr(e).toArray())}isEmpty(){return this.getKeys().length===0}toArray(){if(!this.array){let e=[];for(let t in this.values){let n=this.values[t];e.push(e.push(t,n))}this.array=e.slice(0)}return this.array}toObject(){return sa(this.values)}toJSON(){return this.toObject()}contentsForInspection(){return{values:JSON.stringify(this.values)}}},rp=function(i,e){let t={};return t[i]=e,t},sp=function(i,e){let t=sa(i);for(let n in e){let r=e[n];t[n]=r}return t},sa=function(i,e){let t={};return Object.keys(i).sort().forEach(n=>{n!==e&&(t[n]=i[n])}),t},Wr=function(i){return i instanceof wt?i:new wt(i)},ap=function(i){return i instanceof wt?i.values:i},is=class{static groupObjects(){let e,t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],{depth:n,asTree:r}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};r&&n==null&&(n=0);let s=[];return Array.from(t).forEach(a=>{var u;if(e){var c,v,k;if((c=a.canBeGrouped)!==null&&c!==void 0&&c.call(a,n)&&(v=(k=e[e.length-1]).canBeGroupedWith)!==null&&v!==void 0&&v.call(k,a,n))return void e.push(a);s.push(new this(e,{depth:n,asTree:r})),e=null}(u=a.canBeGrouped)!==null&&u!==void 0&&u.call(a,n)?e=[a]:s.push(a)}),e&&s.push(new this(e,{depth:n,asTree:r})),s}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],{depth:t,asTree:n}=arguments.length>1?arguments[1]:void 0;this.objects=e,n&&(this.depth=t,this.objects=this.constructor.groupObjects(this.objects,{asTree:n,depth:this.depth+1}))}getObjects(){return this.objects}getDepth(){return this.depth}getCacheKey(){let e=["objectGroup"];return Array.from(this.getObjects()).forEach(t=>{e.push(t.getCacheKey())}),e.join("/")}},ou=class extends Ge{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),this.objects={},Array.from(e).forEach(t=>{let n=JSON.stringify(t);this.objects[n]==null&&(this.objects[n]=t)})}find(e){let t=JSON.stringify(e);return this.objects[t]}},uu=class{constructor(e){this.reset(e)}add(e){let t=Ad(e);this.elements[t]=e}remove(e){let t=Ad(e),n=this.elements[t];if(n)return delete this.elements[t],n}reset(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];return this.elements={},Array.from(e).forEach(t=>{this.add(t)}),e}},Ad=i=>i.dataset.trixStoreKey,lr=class extends Ge{isPerforming(){return this.performing===!0}hasPerformed(){return this.performed===!0}hasSucceeded(){return this.performed&&this.succeeded}hasFailed(){return this.performed&&!this.succeeded}getPromise(){return this.promise||(this.promise=new Promise((e,t)=>(this.performing=!0,this.perform((n,r)=>{this.succeeded=n,this.performing=!1,this.performed=!0,this.succeeded?e(r):t(r)})))),this.promise}perform(e){return e(!1)}release(){var e,t;(e=this.promise)===null||e===void 0||(t=e.cancel)===null||t===void 0||t.call(e),this.promise=null,this.performing=null,this.performed=null,this.succeeded=null}};lr.proxyMethod("getPromise().then"),lr.proxyMethod("getPromise().catch");var ji=class extends Ge{constructor(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.object=e,this.options=t,this.childViews=[],this.rootView=this}getNodes(){return this.nodes||(this.nodes=this.createNodes()),this.nodes.map(e=>e.cloneNode(!0))}invalidate(){var e;return this.nodes=null,this.childViews=[],(e=this.parentView)===null||e===void 0?void 0:e.invalidate()}invalidateViewForObject(e){var t;return(t=this.findViewForObject(e))===null||t===void 0?void 0:t.invalidate()}findOrCreateCachedChildView(e,t,n){let r=this.getCachedViewForObject(t);return r?this.recordChildView(r):(r=this.createChildView(...arguments),this.cacheViewForObject(r,t)),r}createChildView(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};t instanceof is&&(n.viewClass=e,e=lu);let r=new e(t,n);return this.recordChildView(r)}recordChildView(e){return e.parentView=this,e.rootView=this.rootView,this.childViews.push(e),e}getAllChildViews(){let e=[];return this.childViews.forEach(t=>{e.push(t),e=e.concat(t.getAllChildViews())}),e}findElement(){return this.findElementForObject(this.object)}findElementForObject(e){let t=e?.id;if(t)return this.rootView.element.querySelector("[data-trix-id='".concat(t,"']"))}findViewForObject(e){for(let t of this.getAllChildViews())if(t.object===e)return t}getViewCache(){return this.rootView!==this?this.rootView.getViewCache():this.isViewCachingEnabled()?(this.viewCache||(this.viewCache={}),this.viewCache):void 0}isViewCachingEnabled(){return this.shouldCacheViews!==!1}enableViewCaching(){this.shouldCacheViews=!0}disableViewCaching(){this.shouldCacheViews=!1}getCachedViewForObject(e){var t;return(t=this.getViewCache())===null||t===void 0?void 0:t[e.getCacheKey()]}cacheViewForObject(e,t){let n=this.getViewCache();n&&(n[t.getCacheKey()]=e)}garbageCollectCachedViews(){let e=this.getViewCache();if(e){let t=this.getAllChildViews().concat(this).map(n=>n.object.getCacheKey());for(let n in e)t.includes(n)||delete e[n]}}},lu=class extends ji{constructor(){super(...arguments),this.objectGroup=this.object,this.viewClass=this.options.viewClass,delete this.options.viewClass}getChildViews(){return this.childViews.length||Array.from(this.objectGroup.getObjects()).forEach(e=>{this.findOrCreateCachedChildView(this.viewClass,e,this.options)}),this.childViews}createNodes(){let e=this.createContainerElement();return this.getChildViews().forEach(t=>{Array.from(t.getNodes()).forEach(n=>{e.appendChild(n)})}),[e]}createContainerElement(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:this.objectGroup.getDepth();return this.getChildViews()[0].createContainerElement(e)}};var{entries:oc,setPrototypeOf:Ed,isFrozen:op,getPrototypeOf:up,getOwnPropertyDescriptor:lp}=Object,{freeze:_t,seal:Zt,create:uc}=Object,{apply:du,construct:cu}=typeof Reflect<"u"&&Reflect;_t||(_t=function(i){return i}),Zt||(Zt=function(i){return i}),du||(du=function(i,e,t){return i.apply(e,t)}),cu||(cu=function(i,e){return new i(...e)});var Qs=Wt(Array.prototype.forEach),Cd=Wt(Array.prototype.pop),$r=Wt(Array.prototype.push),aa=Wt(String.prototype.toLowerCase),jo=Wt(String.prototype.toString),Sd=Wt(String.prototype.match),qr=Wt(String.prototype.replace),dp=Wt(String.prototype.indexOf),cp=Wt(String.prototype.trim),ui=Wt(Object.prototype.hasOwnProperty),vt=Wt(RegExp.prototype.test),Kr=(Dd=TypeError,function(){for(var i=arguments.length,e=new Array(i),t=0;t<i;t++)e[t]=arguments[t];return cu(Dd,e)}),Dd;function Wt(i){return function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return du(i,e,n)}}function we(i,e){let t=arguments.length>2&&arguments[2]!==void 0?arguments[2]:aa;Ed&&Ed(i,null);let n=e.length;for(;n--;){let r=e[n];if(typeof r=="string"){let s=t(r);s!==r&&(op(e)||(e[n]=s),r=s)}i[r]=!0}return i}function hp(i){for(let e=0;e<i.length;e++)ui(i,e)||(i[e]=null);return i}function Tn(i){let e=uc(null);for(let[t,n]of oc(i))ui(i,t)&&(Array.isArray(n)?e[t]=hp(n):n&&typeof n=="object"&&n.constructor===Object?e[t]=Tn(n):e[t]=n);return e}function Jr(i,e){for(;i!==null;){let t=lp(i,e);if(t){if(t.get)return Wt(t.get);if(typeof t.value=="function")return Wt(t.value)}i=up(i)}return function(){return null}}var Td=_t(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),Ho=_t(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),zo=_t(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),fp=_t(["animate","color-profile","cursor","discard","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),Vo=_t(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover","mprescripts"]),pp=_t(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),xd=_t(["#text"]),Ld=_t(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","popover","popovertarget","popovertargetaction","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","wrap","xmlns","slot"]),Uo=_t(["accent-height","accumulate","additive","alignment-baseline","amplitude","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","exponent","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","intercept","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","slope","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","tablevalues","targetx","targety","transform","transform-origin","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),Rd=_t(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),ea=_t(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),gp=Zt(/\{\{[\w\W]*|[\w\W]*\}\}/gm),mp=Zt(/<%[\w\W]*|[\w\W]*%>/gm),vp=Zt(/\$\{[\w\W]*}/gm),bp=Zt(/^data-[\-\w.\u00B7-\uFFFF]+$/),yp=Zt(/^aria-[\-\w]+$/),lc=Zt(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),wp=Zt(/^(?:\w+script|data):/i),_p=Zt(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),dc=Zt(/^html$/i),kp=Zt(/^[a-z][.\w]*(-[.\w]+)+$/i),Pd=Object.freeze({__proto__:null,ARIA_ATTR:yp,ATTR_WHITESPACE:_p,CUSTOM_ELEMENT:kp,DATA_ATTR:bp,DOCTYPE_NAME:dc,ERB_EXPR:mp,IS_ALLOWED_URI:lc,IS_SCRIPT_OR_DATA:wp,MUSTACHE_EXPR:gp,TMPLIT_EXPR:vp}),Ap=1,Ep=3,Cp=7,Sp=8,Dp=9,Tp=function(){return typeof window>"u"?null:window},da=function i(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Tp(),t=M=>i(M);if(t.version="3.2.3",t.removed=[],!e||!e.document||e.document.nodeType!==Dp)return t.isSupported=!1,t;let{document:n}=e,r=n,s=r.currentScript,{DocumentFragment:a,HTMLTemplateElement:u,Node:c,Element:v,NodeFilter:k,NamedNodeMap:A=e.NamedNodeMap||e.MozNamedAttrMap,HTMLFormElement:N,DOMParser:y,trustedTypes:d}=e,g=v.prototype,b=Jr(g,"cloneNode"),E=Jr(g,"remove"),P=Jr(g,"nextSibling"),o=Jr(g,"childNodes"),h=Jr(g,"parentNode");if(typeof u=="function"){let M=n.createElement("template");M.content&&M.content.ownerDocument&&(n=M.content.ownerDocument)}let f,_="",{implementation:C,createNodeIterator:I,createDocumentFragment:L,getElementsByTagName:F}=n,{importNode:K}=r,W={afterSanitizeAttributes:[],afterSanitizeElements:[],afterSanitizeShadowDOM:[],beforeSanitizeAttributes:[],beforeSanitizeElements:[],beforeSanitizeShadowDOM:[],uponSanitizeAttribute:[],uponSanitizeElement:[],uponSanitizeShadowNode:[]};t.isSupported=typeof oc=="function"&&typeof h=="function"&&C&&C.createHTMLDocument!==void 0;let{MUSTACHE_EXPR:q,ERB_EXPR:G,TMPLIT_EXPR:x,DATA_ATTR:U,ARIA_ATTR:z,IS_SCRIPT_OR_DATA:$,ATTR_WHITESPACE:ee,CUSTOM_ELEMENT:X}=Pd,{IS_ALLOWED_URI:ie}=Pd,ae=null,me=we({},[...Td,...Ho,...zo,...Vo,...xd]),re=null,ye=we({},[...Ld,...Uo,...Rd,...ea]),ne=Object.seal(uc(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),xe=null,je=null,He=!0,rt=!0,kt=!1,it=!0,st=!1,at=!0,At=!1,di=!1,zi=!1,Et=!1,Qt=!1,ht=!1,dn=!0,ei=!1,$t=!0,Mt=!1,ti={},ii=null,cn=we({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]),Ci=null,qt=we({},["audio","video","img","source","image","track"]),hn=null,fn=we({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),ci="http://www.w3.org/1998/Math/MathML",Kt="http://www.w3.org/2000/svg",et="http://www.w3.org/1999/xhtml",Nt=et,ft=!1,Bt=null,Si=we({},[ci,Kt,et],jo),Ct=we({},["mi","mo","mn","ms","mtext"]),Vi=we({},["annotation-xml"]),Ui=we({},["title","style","font","a","script"]),ni=null,pn=["application/xhtml+xml","text/html"],Ue=null,ri=null,Wi=n.createElement("form"),Di=function(M){return M instanceof RegExp||M instanceof Function},Ft=function(){let M=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};if(!ri||ri!==M){if(M&&typeof M=="object"||(M={}),M=Tn(M),ni=pn.indexOf(M.PARSER_MEDIA_TYPE)===-1?"text/html":M.PARSER_MEDIA_TYPE,Ue=ni==="application/xhtml+xml"?jo:aa,ae=ui(M,"ALLOWED_TAGS")?we({},M.ALLOWED_TAGS,Ue):me,re=ui(M,"ALLOWED_ATTR")?we({},M.ALLOWED_ATTR,Ue):ye,Bt=ui(M,"ALLOWED_NAMESPACES")?we({},M.ALLOWED_NAMESPACES,jo):Si,hn=ui(M,"ADD_URI_SAFE_ATTR")?we(Tn(fn),M.ADD_URI_SAFE_ATTR,Ue):fn,Ci=ui(M,"ADD_DATA_URI_TAGS")?we(Tn(qt),M.ADD_DATA_URI_TAGS,Ue):qt,ii=ui(M,"FORBID_CONTENTS")?we({},M.FORBID_CONTENTS,Ue):cn,xe=ui(M,"FORBID_TAGS")?we({},M.FORBID_TAGS,Ue):{},je=ui(M,"FORBID_ATTR")?we({},M.FORBID_ATTR,Ue):{},ti=!!ui(M,"USE_PROFILES")&&M.USE_PROFILES,He=M.ALLOW_ARIA_ATTR!==!1,rt=M.ALLOW_DATA_ATTR!==!1,kt=M.ALLOW_UNKNOWN_PROTOCOLS||!1,it=M.ALLOW_SELF_CLOSE_IN_ATTR!==!1,st=M.SAFE_FOR_TEMPLATES||!1,at=M.SAFE_FOR_XML!==!1,At=M.WHOLE_DOCUMENT||!1,Et=M.RETURN_DOM||!1,Qt=M.RETURN_DOM_FRAGMENT||!1,ht=M.RETURN_TRUSTED_TYPE||!1,zi=M.FORCE_BODY||!1,dn=M.SANITIZE_DOM!==!1,ei=M.SANITIZE_NAMED_PROPS||!1,$t=M.KEEP_CONTENT!==!1,Mt=M.IN_PLACE||!1,ie=M.ALLOWED_URI_REGEXP||lc,Nt=M.NAMESPACE||et,Ct=M.MATHML_TEXT_INTEGRATION_POINTS||Ct,Vi=M.HTML_INTEGRATION_POINTS||Vi,ne=M.CUSTOM_ELEMENT_HANDLING||{},M.CUSTOM_ELEMENT_HANDLING&&Di(M.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(ne.tagNameCheck=M.CUSTOM_ELEMENT_HANDLING.tagNameCheck),M.CUSTOM_ELEMENT_HANDLING&&Di(M.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(ne.attributeNameCheck=M.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),M.CUSTOM_ELEMENT_HANDLING&&typeof M.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements=="boolean"&&(ne.allowCustomizedBuiltInElements=M.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),st&&(rt=!1),Qt&&(Et=!0),ti&&(ae=we({},xd),re=[],ti.html===!0&&(we(ae,Td),we(re,Ld)),ti.svg===!0&&(we(ae,Ho),we(re,Uo),we(re,ea)),ti.svgFilters===!0&&(we(ae,zo),we(re,Uo),we(re,ea)),ti.mathMl===!0&&(we(ae,Vo),we(re,Rd),we(re,ea))),M.ADD_TAGS&&(ae===me&&(ae=Tn(ae)),we(ae,M.ADD_TAGS,Ue)),M.ADD_ATTR&&(re===ye&&(re=Tn(re)),we(re,M.ADD_ATTR,Ue)),M.ADD_URI_SAFE_ATTR&&we(hn,M.ADD_URI_SAFE_ATTR,Ue),M.FORBID_CONTENTS&&(ii===cn&&(ii=Tn(ii)),we(ii,M.FORBID_CONTENTS,Ue)),$t&&(ae["#text"]=!0),At&&we(ae,["html","head","body"]),ae.table&&(we(ae,["tbody"]),delete xe.tbody),M.TRUSTED_TYPES_POLICY){if(typeof M.TRUSTED_TYPES_POLICY.createHTML!="function")throw Kr('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');if(typeof M.TRUSTED_TYPES_POLICY.createScriptURL!="function")throw Kr('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');f=M.TRUSTED_TYPES_POLICY,_=f.createHTML("")}else f===void 0&&(f=function(te,Q){if(typeof te!="object"||typeof te.createPolicy!="function")return null;let pe=null,Ee="data-tt-policy-suffix";Q&&Q.hasAttribute(Ee)&&(pe=Q.getAttribute(Ee));let he="dompurify"+(pe?"#"+pe:"");try{return te.createPolicy(he,{createHTML:We=>We,createScriptURL:We=>We})}catch{return console.warn("TrustedTypes policy "+he+" could not be created."),null}}(d,s)),f!==null&&typeof _=="string"&&(_=f.createHTML(""));_t&&_t(M),ri=M}},$i=we({},[...Ho,...zo,...fp]),Hn=we({},[...Vo,...pp]),pt=function(M){$r(t.removed,{element:M});try{h(M).removeChild(M)}catch{E(M)}},hi=function(M,te){try{$r(t.removed,{attribute:te.getAttributeNode(M),from:te})}catch{$r(t.removed,{attribute:null,from:te})}if(te.removeAttribute(M),M==="is")if(Et||Qt)try{pt(te)}catch{}else try{te.setAttribute(M,"")}catch{}},zn=function(M){let te=null,Q=null;if(zi)M="<remove></remove>"+M;else{let he=Sd(M,/^[\r\n\t ]+/);Q=he&&he[0]}ni==="application/xhtml+xml"&&Nt===et&&(M='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+M+"</body></html>");let pe=f?f.createHTML(M):M;if(Nt===et)try{te=new y().parseFromString(pe,ni)}catch{}if(!te||!te.documentElement){te=C.createDocument(Nt,"template",null);try{te.documentElement.innerHTML=ft?_:pe}catch{}}let Ee=te.body||te.documentElement;return M&&Q&&Ee.insertBefore(n.createTextNode(Q),Ee.childNodes[0]||null),Nt===et?F.call(te,At?"html":"body")[0]:At?te.documentElement:Ee},qi=function(M){return I.call(M.ownerDocument||M,M,k.SHOW_ELEMENT|k.SHOW_COMMENT|k.SHOW_TEXT|k.SHOW_PROCESSING_INSTRUCTION|k.SHOW_CDATA_SECTION,null)},Jt=function(M){return M instanceof N&&(typeof M.nodeName!="string"||typeof M.textContent!="string"||typeof M.removeChild!="function"||!(M.attributes instanceof A)||typeof M.removeAttribute!="function"||typeof M.setAttribute!="function"||typeof M.namespaceURI!="string"||typeof M.insertBefore!="function"||typeof M.hasChildNodes!="function")},Vn=function(M){return typeof c=="function"&&M instanceof c};function St(M,te,Q){Qs(M,pe=>{pe.call(t,te,Q,ri)})}let si=function(M){let te=null;if(St(W.beforeSanitizeElements,M,null),Jt(M))return pt(M),!0;let Q=Ue(M.nodeName);if(St(W.uponSanitizeElement,M,{tagName:Q,allowedTags:ae}),M.hasChildNodes()&&!Vn(M.firstElementChild)&&vt(/<[/\w]/g,M.innerHTML)&&vt(/<[/\w]/g,M.textContent)||M.nodeType===Cp||at&&M.nodeType===Sp&&vt(/<[/\w]/g,M.data))return pt(M),!0;if(!ae[Q]||xe[Q]){if(!xe[Q]&&Ki(Q)&&(ne.tagNameCheck instanceof RegExp&&vt(ne.tagNameCheck,Q)||ne.tagNameCheck instanceof Function&&ne.tagNameCheck(Q)))return!1;if($t&&!ii[Q]){let pe=h(M)||M.parentNode,Ee=o(M)||M.childNodes;if(Ee&&pe)for(let he=Ee.length-1;he>=0;--he){let We=b(Ee[he],!0);We.__removalCount=(M.__removalCount||0)+1,pe.insertBefore(We,P(M))}}return pt(M),!0}return M instanceof v&&!function(pe){let Ee=h(pe);Ee&&Ee.tagName||(Ee={namespaceURI:Nt,tagName:"template"});let he=aa(pe.tagName),We=aa(Ee.tagName);return!!Bt[pe.namespaceURI]&&(pe.namespaceURI===Kt?Ee.namespaceURI===et?he==="svg":Ee.namespaceURI===ci?he==="svg"&&(We==="annotation-xml"||Ct[We]):!!$i[he]:pe.namespaceURI===ci?Ee.namespaceURI===et?he==="math":Ee.namespaceURI===Kt?he==="math"&&Vi[We]:!!Hn[he]:pe.namespaceURI===et?!(Ee.namespaceURI===Kt&&!Vi[We])&&!(Ee.namespaceURI===ci&&!Ct[We])&&!Hn[he]&&(Ui[he]||!$i[he]):!(ni!=="application/xhtml+xml"||!Bt[pe.namespaceURI]))}(M)?(pt(M),!0):Q!=="noscript"&&Q!=="noembed"&&Q!=="noframes"||!vt(/<\/no(script|embed|frames)/i,M.innerHTML)?(st&&M.nodeType===Ep&&(te=M.textContent,Qs([q,G,x],pe=>{te=qr(te,pe," ")}),M.textContent!==te&&($r(t.removed,{element:M.cloneNode()}),M.textContent=te)),St(W.afterSanitizeElements,M,null),!1):(pt(M),!0)},fi=function(M,te,Q){if(dn&&(te==="id"||te==="name")&&(Q in n||Q in Wi))return!1;if(!(rt&&!je[te]&&vt(U,te))){if(!(He&&vt(z,te))){if(!re[te]||je[te]){if(!(Ki(M)&&(ne.tagNameCheck instanceof RegExp&&vt(ne.tagNameCheck,M)||ne.tagNameCheck instanceof Function&&ne.tagNameCheck(M))&&(ne.attributeNameCheck instanceof RegExp&&vt(ne.attributeNameCheck,te)||ne.attributeNameCheck instanceof Function&&ne.attributeNameCheck(te))||te==="is"&&ne.allowCustomizedBuiltInElements&&(ne.tagNameCheck instanceof RegExp&&vt(ne.tagNameCheck,Q)||ne.tagNameCheck instanceof Function&&ne.tagNameCheck(Q))))return!1}else if(!hn[te]){if(!vt(ie,qr(Q,ee,""))){if((te!=="src"&&te!=="xlink:href"&&te!=="href"||M==="script"||dp(Q,"data:")!==0||!Ci[M])&&!(kt&&!vt($,qr(Q,ee,"")))){if(Q)return!1}}}}}return!0},Ki=function(M){return M!=="annotation-xml"&&Sd(M,X)},Ji=function(M){St(W.beforeSanitizeAttributes,M,null);let{attributes:te}=M;if(!te||Jt(M))return;let Q={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:re,forceKeepAttr:void 0},pe=te.length;for(;pe--;){let Ee=te[pe],{name:he,namespaceURI:We,value:Dt}=Ee,ot=Ue(he),Ye=he==="value"?Dt:cp(Dt);if(Q.attrName=ot,Q.attrValue=Ye,Q.keepAttr=!0,Q.forceKeepAttr=void 0,St(W.uponSanitizeAttribute,M,Q),Ye=Q.attrValue,!ei||ot!=="id"&&ot!=="name"||(hi(he,M),Ye="user-content-"+Ye),at&&vt(/((--!?|])>)|<\/(style|title)/i,Ye)){hi(he,M);continue}if(Q.forceKeepAttr||(hi(he,M),!Q.keepAttr))continue;if(!it&&vt(/\/>/i,Ye)){hi(he,M);continue}st&&Qs([q,G,x],Wn=>{Ye=qr(Ye,Wn," ")});let Gi=Ue(M.nodeName);if(fi(Gi,ot,Ye)){if(f&&typeof d=="object"&&typeof d.getAttributeType=="function"&&!We)switch(d.getAttributeType(Gi,ot)){case"TrustedHTML":Ye=f.createHTML(Ye);break;case"TrustedScriptURL":Ye=f.createScriptURL(Ye)}try{We?M.setAttributeNS(We,he,Ye):M.setAttribute(he,Ye),Jt(M)?pt(M):Cd(t.removed)}catch{}}}St(W.afterSanitizeAttributes,M,null)},Un=function M(te){let Q=null,pe=qi(te);for(St(W.beforeSanitizeShadowDOM,te,null);Q=pe.nextNode();)St(W.uponSanitizeShadowNode,Q,null),si(Q),Ji(Q),Q.content instanceof a&&M(Q.content);St(W.afterSanitizeShadowDOM,te,null)};return t.sanitize=function(M){let te=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},Q=null,pe=null,Ee=null,he=null;if(ft=!M,ft&&(M="<!-->"),typeof M!="string"&&!Vn(M)){if(typeof M.toString!="function")throw Kr("toString is not a function");if(typeof(M=M.toString())!="string")throw Kr("dirty is not a string, aborting")}if(!t.isSupported)return M;if(di||Ft(te),t.removed=[],typeof M=="string"&&(Mt=!1),Mt){if(M.nodeName){let ot=Ue(M.nodeName);if(!ae[ot]||xe[ot])throw Kr("root node is forbidden and cannot be sanitized in-place")}}else if(M instanceof c)Q=zn("<!---->"),pe=Q.ownerDocument.importNode(M,!0),pe.nodeType===Ap&&pe.nodeName==="BODY"||pe.nodeName==="HTML"?Q=pe:Q.appendChild(pe);else{if(!Et&&!st&&!At&&M.indexOf("<")===-1)return f&&ht?f.createHTML(M):M;if(Q=zn(M),!Q)return Et?null:ht?_:""}Q&&zi&&pt(Q.firstChild);let We=qi(Mt?M:Q);for(;Ee=We.nextNode();)si(Ee),Ji(Ee),Ee.content instanceof a&&Un(Ee.content);if(Mt)return M;if(Et){if(Qt)for(he=L.call(Q.ownerDocument);Q.firstChild;)he.appendChild(Q.firstChild);else he=Q;return(re.shadowroot||re.shadowrootmode)&&(he=K.call(r,he,!0)),he}let Dt=At?Q.outerHTML:Q.innerHTML;return At&&ae["!doctype"]&&Q.ownerDocument&&Q.ownerDocument.doctype&&Q.ownerDocument.doctype.name&&vt(dc,Q.ownerDocument.doctype.name)&&(Dt="<!DOCTYPE "+Q.ownerDocument.doctype.name+`>
`+Dt),st&&Qs([q,G,x],ot=>{Dt=qr(Dt,ot," ")}),f&&ht?f.createHTML(Dt):Dt},t.setConfig=function(){Ft(arguments.length>0&&arguments[0]!==void 0?arguments[0]:{}),di=!0},t.clearConfig=function(){ri=null,di=!1},t.isValidAttribute=function(M,te,Q){ri||Ft({});let pe=Ue(M),Ee=Ue(te);return fi(pe,Ee,Q)},t.addHook=function(M,te){typeof te=="function"&&$r(W[M],te)},t.removeHook=function(M){return Cd(W[M])},t.removeHooks=function(M){W[M]=[]},t.removeAllHooks=function(){W={afterSanitizeAttributes:[],afterSanitizeElements:[],afterSanitizeShadowDOM:[],beforeSanitizeAttributes:[],beforeSanitizeElements:[],beforeSanitizeShadowDOM:[],uponSanitizeAttribute:[],uponSanitizeElement:[],uponSanitizeShadowNode:[]}},t}();da.addHook("uponSanitizeAttribute",function(i,e){/^data-trix-/.test(e.attrName)&&(e.forceKeepAttr=!0)});var xp="style href src width height language class".split(" "),Lp="javascript:".split(" "),Rp="script iframe form noscript".split(" "),dr=class extends Ge{static setHTML(e,t){let n=new this(t).sanitize(),r=n.getHTML?n.getHTML():n.outerHTML;e.innerHTML=r}static sanitize(e,t){let n=new this(e,t);return n.sanitize(),n}constructor(e){let{allowedAttributes:t,forbiddenProtocols:n,forbiddenElements:r}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.allowedAttributes=t||xp,this.forbiddenProtocols=n||Lp,this.forbiddenElements=r||Rp,this.body=Pp(e)}sanitize(){return this.sanitizeElements(),this.normalizeListElementNesting(),da.setConfig(Gd),this.body=da.sanitize(this.body),this.body}getHTML(){return this.body.innerHTML}getBody(){return this.body}sanitizeElements(){let e=oa(this.body),t=[];for(;e.nextNode();){let n=e.currentNode;switch(n.nodeType){case Node.ELEMENT_NODE:this.elementIsRemovable(n)?t.push(n):this.sanitizeElement(n);break;case Node.COMMENT_NODE:t.push(n)}}return t.forEach(n=>on(n)),this.body}sanitizeElement(e){return e.hasAttribute("href")&&this.forbiddenProtocols.includes(e.protocol)&&e.removeAttribute("href"),Array.from(e.attributes).forEach(t=>{let{name:n}=t;this.allowedAttributes.includes(n)||n.indexOf("data-trix")===0||e.removeAttribute(n)}),e}normalizeListElementNesting(){return Array.from(this.body.querySelectorAll("ul,ol")).forEach(e=>{let t=e.previousElementSibling;t&&bt(t)==="li"&&t.appendChild(e)}),this.body}elementIsRemovable(e){if(e?.nodeType===Node.ELEMENT_NODE)return this.elementIsForbidden(e)||this.elementIsntSerializable(e)}elementIsForbidden(e){return this.forbiddenElements.includes(bt(e))}elementIsntSerializable(e){return e.getAttribute("data-trix-serialize")==="false"&&!Rn(e)}},Pp=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";i=i.replace(/<\/html[^>]*>[^]*$/i,"</html>");let e=document.implementation.createHTMLDocument("");return e.documentElement.innerHTML=i,Array.from(e.head.querySelectorAll("style")).forEach(t=>{e.body.appendChild(t)}),e.body},{css:rn}=us,ns=class extends ji{constructor(){super(...arguments),this.attachment=this.object,this.attachment.uploadProgressDelegate=this,this.attachmentPiece=this.options.piece}createContentNodes(){return[]}createNodes(){let e,t=e=be({tagName:"figure",className:this.getClassName(),data:this.getData(),editable:!1}),n=this.getHref();return n&&(e=be({tagName:"a",editable:!1,attributes:{href:n,tabindex:-1}}),t.appendChild(e)),this.attachment.hasContent()?dr.setHTML(e,this.attachment.getContent()):this.createContentNodes().forEach(r=>{e.appendChild(r)}),e.appendChild(this.createCaptionElement()),this.attachment.isPending()&&(this.progressElement=be({tagName:"progress",attributes:{class:rn.attachmentProgress,value:this.attachment.getUploadProgress(),max:100},data:{trixMutable:!0,trixStoreKey:["progressElement",this.attachment.id].join("/")}}),t.appendChild(this.progressElement)),[Id("left"),t,Id("right")]}createCaptionElement(){let e=be({tagName:"figcaption",className:rn.attachmentCaption}),t=this.attachmentPiece.getCaption();if(t)e.classList.add("".concat(rn.attachmentCaption,"--edited")),e.textContent=t;else{let n,r,s=this.getCaptionConfig();if(s.name&&(n=this.attachment.getFilename()),s.size&&(r=this.attachment.getFormattedFilesize()),n){let a=be({tagName:"span",className:rn.attachmentName,textContent:n});e.appendChild(a)}if(r){n&&e.appendChild(document.createTextNode(" "));let a=be({tagName:"span",className:rn.attachmentSize,textContent:r});e.appendChild(a)}}return e}getClassName(){let e=[rn.attachment,"".concat(rn.attachment,"--").concat(this.attachment.getType())],t=this.attachment.getExtension();return t&&e.push("".concat(rn.attachment,"--").concat(t)),e.join(" ")}getData(){let e={trixAttachment:JSON.stringify(this.attachment),trixContentType:this.attachment.getContentType(),trixId:this.attachment.id},{attributes:t}=this.attachmentPiece;return t.isEmpty()||(e.trixAttributes=JSON.stringify(t)),this.attachment.isPending()&&(e.trixSerialize=!1),e}getHref(){if(!Ip(this.attachment.getContent(),"a"))return this.attachment.getHref()}getCaptionConfig(){var e;let t=this.attachment.getType(),n=rc((e=yu[t])===null||e===void 0?void 0:e.caption);return t==="file"&&(n.name=!0),n}findProgressElement(){var e;return(e=this.findElement())===null||e===void 0?void 0:e.querySelector("progress")}attachmentDidChangeUploadProgress(){let e=this.attachment.getUploadProgress(),t=this.findProgressElement();t&&(t.value=e)}},Id=i=>be({tagName:"span",textContent:xa,data:{trixCursorTarget:i,trixSerialize:!1}}),Ip=function(i,e){let t=be("div");return dr.setHTML(t,i||""),t.querySelector(e)},ca=class extends ns{constructor(){super(...arguments),this.attachment.previewDelegate=this}createContentNodes(){return this.image=be({tagName:"img",attributes:{src:""},data:{trixMutable:!0}}),this.refresh(this.image),[this.image]}createCaptionElement(){let e=super.createCaptionElement(...arguments);return e.textContent||e.setAttribute("data-trix-placeholder",fe.captionPlaceholder),e}refresh(e){var t;if(e||(e=(t=this.findElement())===null||t===void 0?void 0:t.querySelector("img")),e)return this.updateAttributesForImage(e)}updateAttributesForImage(e){let t=this.attachment.getURL(),n=this.attachment.getPreviewURL();if(e.src=n||t,n===t)e.removeAttribute("data-trix-serialized-attributes");else{let u=JSON.stringify({src:t});e.setAttribute("data-trix-serialized-attributes",u)}let r=this.attachment.getWidth(),s=this.attachment.getHeight();r!=null&&(e.width=r),s!=null&&(e.height=s);let a=["imageElement",this.attachment.id,e.src,e.width,e.height].join("/");e.dataset.trixStoreKey=a}attachmentDidChangeAttributes(){return this.refresh(this.image),this.refresh()}},ha=class extends ji{constructor(){super(...arguments),this.piece=this.object,this.attributes=this.piece.getAttributes(),this.textConfig=this.options.textConfig,this.context=this.options.context,this.piece.attachment?this.attachment=this.piece.attachment:this.string=this.piece.toString()}createNodes(){let e=this.attachment?this.createAttachmentNodes():this.createStringNodes(),t=this.createElement();if(t){let n=function(r){for(;(s=r)!==null&&s!==void 0&&s.firstElementChild;){var s;r=r.firstElementChild}return r}(t);Array.from(e).forEach(r=>{n.appendChild(r)}),e=[t]}return e}createAttachmentNodes(){let e=this.attachment.isPreviewable()?ca:ns;return this.createChildView(e,this.piece.attachment,{piece:this.piece}).getNodes()}createStringNodes(){var e;if((e=this.textConfig)!==null&&e!==void 0&&e.plaintext)return[document.createTextNode(this.string)];{let t=[],n=this.string.split(`
`);for(let r=0;r<n.length;r++){let s=n[r];if(r>0){let a=be("br");t.push(a)}if(s.length){let a=document.createTextNode(this.preserveSpaces(s));t.push(a)}}return t}}createElement(){let e,t,n,r={};for(t in this.attributes){n=this.attributes[t];let a=su(t);if(a){if(a.tagName){var s;let u=be(a.tagName);s?(s.appendChild(u),s=u):e=s=u}if(a.styleProperty&&(r[a.styleProperty]=n),a.style)for(t in a.style)n=a.style[t],r[t]=n}}if(Object.keys(r).length)for(t in e||(e=be("span")),r)n=r[t],e.style[t]=n;return e}createContainerElement(){for(let e in this.attributes){let t=this.attributes[e],n=su(e);if(n&&n.groupTagName){let r={};return r[e]=t,be(n.groupTagName,r)}}}preserveSpaces(e){return this.context.isLast&&(e=e.replace(/\ $/,sn)),e=e.replace(/(\S)\ {3}(\S)/g,"$1 ".concat(sn," $2")).replace(/\ {2}/g,"".concat(sn," ")).replace(/\ {2}/g," ".concat(sn)),(this.context.isFirst||this.context.followsWhitespace)&&(e=e.replace(/^\ /,sn)),e}},fa=class extends ji{constructor(){super(...arguments),this.text=this.object,this.textConfig=this.options.textConfig}createNodes(){let e=[],t=is.groupObjects(this.getPieces()),n=t.length-1;for(let s=0;s<t.length;s++){let a=t[s],u={};s===0&&(u.isFirst=!0),s===n&&(u.isLast=!0),Op(r)&&(u.followsWhitespace=!0);let c=this.findOrCreateCachedChildView(ha,a,{textConfig:this.textConfig,context:u});e.push(...Array.from(c.getNodes()||[]));var r=a}return e}getPieces(){return Array.from(this.text.getPieces()).filter(e=>!e.hasAttribute("blockBreak"))}},Op=i=>/\s$/.test(i?.toString()),{css:Od}=us,pa=class extends ji{constructor(){super(...arguments),this.block=this.object,this.attributes=this.block.getAttributes()}createNodes(){let e=[document.createComment("block")];if(this.block.isEmpty())e.push(be("br"));else{var t;let n=(t=Xe(this.block.getLastAttribute()))===null||t===void 0?void 0:t.text,r=this.findOrCreateCachedChildView(fa,this.block.text,{textConfig:n});e.push(...Array.from(r.getNodes()||[])),this.shouldAddExtraNewlineElement()&&e.push(be("br"))}if(this.attributes.length)return e;{let n,{tagName:r}=yt.default;this.block.isRTL()&&(n={dir:"rtl"});let s=be({tagName:r,attributes:n});return e.forEach(a=>s.appendChild(a)),[s]}}createContainerElement(e){let t={},n,r=this.attributes[e],{tagName:s,htmlAttributes:a=[]}=Xe(r);if(e===0&&this.block.isRTL()&&Object.assign(t,{dir:"rtl"}),r==="attachmentGallery"){let u=this.block.getBlockBreakPosition();n="".concat(Od.attachmentGallery," ").concat(Od.attachmentGallery,"--").concat(u)}return Object.entries(this.block.htmlAttributes).forEach(u=>{let[c,v]=u;a.includes(c)&&(t[c]=v)}),be({tagName:s,className:n,attributes:t})}shouldAddExtraNewlineElement(){return/\n\n$/.test(this.block.toString())}},cr=class extends ji{static render(e){let t=be("div"),n=new this(e,{element:t});return n.render(),n.sync(),t}constructor(){super(...arguments),this.element=this.options.element,this.elementStore=new uu,this.setDocument(this.object)}setDocument(e){e.isEqualTo(this.document)||(this.document=this.object=e)}render(){if(this.childViews=[],this.shadowElement=be("div"),!this.document.isEmpty()){let e=is.groupObjects(this.document.getBlocks(),{asTree:!0});Array.from(e).forEach(t=>{let n=this.findOrCreateCachedChildView(pa,t);Array.from(n.getNodes()).map(r=>this.shadowElement.appendChild(r))})}}isSynced(){return Mp(this.shadowElement,this.element)}sync(){let e=this.createDocumentFragmentForSync();for(;this.element.lastChild;)this.element.removeChild(this.element.lastChild);return this.element.appendChild(e),this.didSync()}didSync(){return this.elementStore.reset(Md(this.element)),Eu(()=>this.garbageCollectCachedViews())}createDocumentFragmentForSync(){let e=document.createDocumentFragment();return Array.from(this.shadowElement.childNodes).forEach(t=>{e.appendChild(t.cloneNode(!0))}),Array.from(Md(e)).forEach(t=>{let n=this.elementStore.remove(t);n&&t.parentNode.replaceChild(n,t)}),e}},Md=i=>i.querySelectorAll("[data-trix-store-key]"),Mp=(i,e)=>Nd(i.innerHTML)===Nd(e.innerHTML),Nd=i=>i.replace(/&nbsp;/g," ");function ta(i){var e,t;function n(s,a){try{var u=i[s](a),c=u.value,v=c instanceof Np;Promise.resolve(v?c.v:c).then(function(k){if(v){var A=s==="return"?"return":"next";if(!c.k||k.done)return n(A,k);k=i[A](k).value}r(u.done?"return":"normal",k)},function(k){n("throw",k)})}catch(k){r("throw",k)}}function r(s,a){switch(s){case"return":e.resolve({value:a,done:!0});break;case"throw":e.reject(a);break;default:e.resolve({value:a,done:!1})}(e=e.next)?n(e.key,e.arg):t=null}this._invoke=function(s,a){return new Promise(function(u,c){var v={key:s,arg:a,resolve:u,reject:c,next:null};t?t=t.next=v:(e=t=v,n(s,a))})},typeof i.return!="function"&&(this.return=void 0)}function Np(i,e){this.v=i,this.k=e}function Ot(i,e,t){return(e=Bp(e))in i?Object.defineProperty(i,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):i[e]=t,i}function Bp(i){var e=function(t,n){if(typeof t!="object"||t===null)return t;var r=t[Symbol.toPrimitive];if(r!==void 0){var s=r.call(t,n||"default");if(typeof s!="object")return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return(n==="string"?String:Number)(t)}(i,"string");return typeof e=="symbol"?e:String(e)}ta.prototype[typeof Symbol=="function"&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},ta.prototype.next=function(i){return this._invoke("next",i)},ta.prototype.throw=function(i){return this._invoke("throw",i)},ta.prototype.return=function(i){return this._invoke("return",i)};function Be(i,e){return Fp(i,cc(i,e,"get"))}function Du(i,e,t){return jp(i,cc(i,e,"set"),t),t}function cc(i,e,t){if(!e.has(i))throw new TypeError("attempted to "+t+" private field on non-instance");return e.get(i)}function Fp(i,e){return e.get?e.get.call(i):e.value}function jp(i,e,t){if(e.set)e.set.call(i,t);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=t}}function ia(i,e,t){if(!e.has(i))throw new TypeError("attempted to get private field on non-instance");return t}function hc(i,e){if(e.has(i))throw new TypeError("Cannot initialize the same private elements twice on an object")}function ts(i,e,t){hc(i,e),e.set(i,t)}var Hi=class extends Fi{static registerType(e,t){t.type=e,this.types[e]=t}static fromJSON(e){let t=this.types[e.type];if(t)return t.fromJSON(e)}constructor(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.attributes=wt.box(t)}copyWithAttributes(e){return new this.constructor(this.getValue(),e)}copyWithAdditionalAttributes(e){return this.copyWithAttributes(this.attributes.merge(e))}copyWithoutAttribute(e){return this.copyWithAttributes(this.attributes.remove(e))}copy(){return this.copyWithAttributes(this.attributes)}getAttribute(e){return this.attributes.get(e)}getAttributesHash(){return this.attributes}getAttributes(){return this.attributes.toObject()}hasAttribute(e){return this.attributes.has(e)}hasSameStringValueAsPiece(e){return e&&this.toString()===e.toString()}hasSameAttributesAsPiece(e){return e&&(this.attributes===e.attributes||this.attributes.isEqualTo(e.attributes))}isBlockBreak(){return!1}isEqualTo(e){return super.isEqualTo(...arguments)||this.hasSameConstructorAs(e)&&this.hasSameStringValueAsPiece(e)&&this.hasSameAttributesAsPiece(e)}isEmpty(){return this.length===0}isSerializable(){return!0}toJSON(){return{type:this.constructor.type,attributes:this.getAttributes()}}contentsForInspection(){return{type:this.constructor.type,attributes:this.attributes.inspect()}}canBeGrouped(){return this.hasAttribute("href")}canBeGroupedWith(e){return this.getAttribute("href")===e.getAttribute("href")}getLength(){return this.length}canBeConsolidatedWith(e){return!1}};Ot(Hi,"types",{});var ga=class extends lr{constructor(e){super(...arguments),this.url=e}perform(e){let t=new Image;t.onload=()=>(t.width=this.width=t.naturalWidth,t.height=this.height=t.naturalHeight,e(!0,t)),t.onerror=()=>e(!1),t.src=this.url}},un=class extends Fi{static attachmentForFile(e){let t=new this(this.attributesForFile(e));return t.setFile(e),t}static attributesForFile(e){return new wt({filename:e.name,filesize:e.size,contentType:e.type})}static fromJSON(e){return new this(e)}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};super(e),this.releaseFile=this.releaseFile.bind(this),this.attributes=wt.box(e),this.didChangeAttributes()}getAttribute(e){return this.attributes.get(e)}hasAttribute(e){return this.attributes.has(e)}getAttributes(){return this.attributes.toObject()}setAttributes(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=this.attributes.merge(e);var n,r,s,a;if(!this.attributes.isEqualTo(t))return this.attributes=t,this.didChangeAttributes(),(n=this.previewDelegate)===null||n===void 0||(r=n.attachmentDidChangeAttributes)===null||r===void 0||r.call(n,this),(s=this.delegate)===null||s===void 0||(a=s.attachmentDidChangeAttributes)===null||a===void 0?void 0:a.call(s,this)}didChangeAttributes(){if(this.isPreviewable())return this.preloadURL()}isPending(){return this.file!=null&&!(this.getURL()||this.getHref())}isPreviewable(){return this.attributes.has("previewable")?this.attributes.get("previewable"):un.previewablePattern.test(this.getContentType())}getType(){return this.hasContent()?"content":this.isPreviewable()?"preview":"file"}getURL(){return this.attributes.get("url")}getHref(){return this.attributes.get("href")}getFilename(){return this.attributes.get("filename")||""}getFilesize(){return this.attributes.get("filesize")}getFormattedFilesize(){let e=this.attributes.get("filesize");return typeof e=="number"?Xd.formatter(e):""}getExtension(){var e;return(e=this.getFilename().match(/\.(\w+)$/))===null||e===void 0?void 0:e[1].toLowerCase()}getContentType(){return this.attributes.get("contentType")}hasContent(){return this.attributes.has("content")}getContent(){return this.attributes.get("content")}getWidth(){return this.attributes.get("width")}getHeight(){return this.attributes.get("height")}getFile(){return this.file}setFile(e){if(this.file=e,this.isPreviewable())return this.preloadFile()}releaseFile(){this.releasePreloadedFile(),this.file=null}getUploadProgress(){return this.uploadProgress!=null?this.uploadProgress:0}setUploadProgress(e){var t,n;if(this.uploadProgress!==e)return this.uploadProgress=e,(t=this.uploadProgressDelegate)===null||t===void 0||(n=t.attachmentDidChangeUploadProgress)===null||n===void 0?void 0:n.call(t,this)}toJSON(){return this.getAttributes()}getCacheKey(){return[super.getCacheKey(...arguments),this.attributes.getCacheKey(),this.getPreviewURL()].join("/")}getPreviewURL(){return this.previewURL||this.preloadingURL}setPreviewURL(e){var t,n,r,s;if(e!==this.getPreviewURL())return this.previewURL=e,(t=this.previewDelegate)===null||t===void 0||(n=t.attachmentDidChangeAttributes)===null||n===void 0||n.call(t,this),(r=this.delegate)===null||r===void 0||(s=r.attachmentDidChangePreviewURL)===null||s===void 0?void 0:s.call(r,this)}preloadURL(){return this.preload(this.getURL(),this.releaseFile)}preloadFile(){if(this.file)return this.fileObjectURL=URL.createObjectURL(this.file),this.preload(this.fileObjectURL)}releasePreloadedFile(){this.fileObjectURL&&(URL.revokeObjectURL(this.fileObjectURL),this.fileObjectURL=null)}preload(e,t){if(e&&e!==this.getPreviewURL())return this.preloadingURL=e,new ga(e).then(n=>{let{width:r,height:s}=n;return this.getWidth()&&this.getHeight()||this.setAttributes({width:r,height:s}),this.preloadingURL=null,this.setPreviewURL(e),t?.()}).catch(()=>(this.preloadingURL=null,t?.()))}};Ot(un,"previewablePattern",/^image(\/(gif|png|webp|jpe?g)|$)/);var ln=class extends Hi{static fromJSON(e){return new this(un.fromJSON(e.attachment),e.attributes)}constructor(e){super(...arguments),this.attachment=e,this.length=1,this.ensureAttachmentExclusivelyHasAttribute("href"),this.attachment.hasContent()||this.removeProhibitedAttributes()}ensureAttachmentExclusivelyHasAttribute(e){this.hasAttribute(e)&&(this.attachment.hasAttribute(e)||this.attachment.setAttributes(this.attributes.slice([e])),this.attributes=this.attributes.remove(e))}removeProhibitedAttributes(){let e=this.attributes.slice(ln.permittedAttributes);e.isEqualTo(this.attributes)||(this.attributes=e)}getValue(){return this.attachment}isSerializable(){return!this.attachment.isPending()}getCaption(){return this.attributes.get("caption")||""}isEqualTo(e){var t;return super.isEqualTo(e)&&this.attachment.id===(e==null||(t=e.attachment)===null||t===void 0?void 0:t.id)}toString(){return"\uFFFC"}toJSON(){let e=super.toJSON(...arguments);return e.attachment=this.attachment,e}getCacheKey(){return[super.getCacheKey(...arguments),this.attachment.getCacheKey()].join("/")}toConsole(){return JSON.stringify(this.toString())}};Ot(ln,"permittedAttributes",["caption","presentation"]),Hi.registerType("attachment",ln);var rs=class extends Hi{static fromJSON(e){return new this(e.string,e.attributes)}constructor(e){super(...arguments),this.string=(t=>t.replace(/\r\n?/g,`
`))(e),this.length=this.string.length}getValue(){return this.string}toString(){return this.string.toString()}isBlockBreak(){return this.toString()===`
`&&this.getAttribute("blockBreak")===!0}toJSON(){let e=super.toJSON(...arguments);return e.string=this.string,e}canBeConsolidatedWith(e){return e&&this.hasSameConstructorAs(e)&&this.hasSameAttributesAsPiece(e)}consolidateWith(e){return new this.constructor(this.toString()+e.toString(),this.attributes)}splitAtOffset(e){let t,n;return e===0?(t=null,n=this):e===this.length?(t=this,n=null):(t=new this.constructor(this.string.slice(0,e),this.attributes),n=new this.constructor(this.string.slice(e),this.attributes)),[t,n]}toConsole(){let{string:e}=this;return e.length>15&&(e=e.slice(0,14)+"\u2026"),JSON.stringify(e.toString())}};Hi.registerType("string",rs);var hr=class extends Fi{static box(e){return e instanceof this?e:new this(e)}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),this.objects=e.slice(0),this.length=this.objects.length}indexOf(e){return this.objects.indexOf(e)}splice(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return new this.constructor(Au(this.objects,...t))}eachObject(e){return this.objects.map((t,n)=>e(t,n))}insertObjectAtIndex(e,t){return this.splice(t,0,e)}insertSplittableListAtIndex(e,t){return this.splice(t,0,...e.objects)}insertSplittableListAtPosition(e,t){let[n,r]=this.splitObjectAtPosition(t);return new this.constructor(n).insertSplittableListAtIndex(e,r)}editObjectAtIndex(e,t){return this.replaceObjectAtIndex(t(this.objects[e]),e)}replaceObjectAtIndex(e,t){return this.splice(t,1,e)}removeObjectAtIndex(e){return this.splice(e,1)}getObjectAtIndex(e){return this.objects[e]}getSplittableListInRange(e){let[t,n,r]=this.splitObjectsAtRange(e);return new this.constructor(t.slice(n,r+1))}selectSplittableList(e){let t=this.objects.filter(n=>e(n));return new this.constructor(t)}removeObjectsInRange(e){let[t,n,r]=this.splitObjectsAtRange(e);return new this.constructor(t).splice(n,r-n+1)}transformObjectsInRange(e,t){let[n,r,s]=this.splitObjectsAtRange(e),a=n.map((u,c)=>r<=c&&c<=s?t(u):u);return new this.constructor(a)}splitObjectsAtRange(e){let t,[n,r,s]=this.splitObjectAtPosition(zp(e));return[n,t]=new this.constructor(n).splitObjectAtPosition(Vp(e)+s),[n,r,t-1]}getObjectAtPosition(e){let{index:t}=this.findIndexAndOffsetAtPosition(e);return this.objects[t]}splitObjectAtPosition(e){let t,n,{index:r,offset:s}=this.findIndexAndOffsetAtPosition(e),a=this.objects.slice(0);if(r!=null)if(s===0)t=r,n=0;else{let u=this.getObjectAtIndex(r),[c,v]=u.splitAtOffset(s);a.splice(r,1,c,v),t=r+1,n=c.getLength()-s}else t=a.length,n=0;return[a,t,n]}consolidate(){let e=[],t=this.objects[0];return this.objects.slice(1).forEach(n=>{var r,s;(r=(s=t).canBeConsolidatedWith)!==null&&r!==void 0&&r.call(s,n)?t=t.consolidateWith(n):(e.push(t),t=n)}),t&&e.push(t),new this.constructor(e)}consolidateFromIndexToIndex(e,t){let n=this.objects.slice(0).slice(e,t+1),r=new this.constructor(n).consolidate().toArray();return this.splice(e,n.length,...r)}findIndexAndOffsetAtPosition(e){let t,n=0;for(t=0;t<this.objects.length;t++){let r=n+this.objects[t].getLength();if(n<=e&&e<r)return{index:t,offset:e-n};n=r}return{index:null,offset:null}}findPositionAtIndexAndOffset(e,t){let n=0;for(let r=0;r<this.objects.length;r++){let s=this.objects[r];if(r<e)n+=s.getLength();else if(r===e){n+=t;break}}return n}getEndPosition(){return this.endPosition==null&&(this.endPosition=0,this.objects.forEach(e=>this.endPosition+=e.getLength())),this.endPosition}toString(){return this.objects.join("")}toArray(){return this.objects.slice(0)}toJSON(){return this.toArray()}isEqualTo(e){return super.isEqualTo(...arguments)||Hp(this.objects,e?.objects)}contentsForInspection(){return{objects:"[".concat(this.objects.map(e=>e.inspect()).join(", "),"]")}}},Hp=function(i){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];if(i.length!==e.length)return!1;let t=!0;for(let n=0;n<i.length;n++){let r=i[n];t&&!r.isEqualTo(e[n])&&(t=!1)}return t},zp=i=>i[0],Vp=i=>i[1],Ut=class extends Fi{static textForAttachmentWithAttributes(e,t){return new this([new ln(e,t)])}static textForStringWithAttributes(e,t){return new this([new rs(e,t)])}static fromJSON(e){return new this(Array.from(e).map(t=>Hi.fromJSON(t)))}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments);let t=e.filter(n=>!n.isEmpty());this.pieceList=new hr(t)}copy(){return this.copyWithPieceList(this.pieceList)}copyWithPieceList(e){return new this.constructor(e.consolidate().toArray())}copyUsingObjectMap(e){let t=this.getPieces().map(n=>e.find(n)||n);return new this.constructor(t)}appendText(e){return this.insertTextAtPosition(e,this.getLength())}insertTextAtPosition(e,t){return this.copyWithPieceList(this.pieceList.insertSplittableListAtPosition(e.pieceList,t))}removeTextAtRange(e){return this.copyWithPieceList(this.pieceList.removeObjectsInRange(e))}replaceTextAtRange(e,t){return this.removeTextAtRange(t).insertTextAtPosition(e,t[0])}moveTextFromRangeToPosition(e,t){if(e[0]<=t&&t<=e[1])return;let n=this.getTextAtRange(e),r=n.getLength();return e[0]<t&&(t-=r),this.removeTextAtRange(e).insertTextAtPosition(n,t)}addAttributeAtRange(e,t,n){let r={};return r[e]=t,this.addAttributesAtRange(r,n)}addAttributesAtRange(e,t){return this.copyWithPieceList(this.pieceList.transformObjectsInRange(t,n=>n.copyWithAdditionalAttributes(e)))}removeAttributeAtRange(e,t){return this.copyWithPieceList(this.pieceList.transformObjectsInRange(t,n=>n.copyWithoutAttribute(e)))}setAttributesAtRange(e,t){return this.copyWithPieceList(this.pieceList.transformObjectsInRange(t,n=>n.copyWithAttributes(e)))}getAttributesAtPosition(e){var t;return((t=this.pieceList.getObjectAtPosition(e))===null||t===void 0?void 0:t.getAttributes())||{}}getCommonAttributes(){let e=Array.from(this.pieceList.toArray()).map(t=>t.getAttributes());return wt.fromCommonAttributesOfObjects(e).toObject()}getCommonAttributesAtRange(e){return this.getTextAtRange(e).getCommonAttributes()||{}}getExpandedRangeForAttributeAtOffset(e,t){let n,r=n=t,s=this.getLength();for(;r>0&&this.getCommonAttributesAtRange([r-1,n])[e];)r--;for(;n<s&&this.getCommonAttributesAtRange([t,n+1])[e];)n++;return[r,n]}getTextAtRange(e){return this.copyWithPieceList(this.pieceList.getSplittableListInRange(e))}getStringAtRange(e){return this.pieceList.getSplittableListInRange(e).toString()}getStringAtPosition(e){return this.getStringAtRange([e,e+1])}startsWithString(e){return this.getStringAtRange([0,e.length])===e}endsWithString(e){let t=this.getLength();return this.getStringAtRange([t-e.length,t])===e}getAttachmentPieces(){return this.pieceList.toArray().filter(e=>!!e.attachment)}getAttachments(){return this.getAttachmentPieces().map(e=>e.attachment)}getAttachmentAndPositionById(e){let t=0;for(let r of this.pieceList.toArray()){var n;if(((n=r.attachment)===null||n===void 0?void 0:n.id)===e)return{attachment:r.attachment,position:t};t+=r.length}return{attachment:null,position:null}}getAttachmentById(e){let{attachment:t}=this.getAttachmentAndPositionById(e);return t}getRangeOfAttachment(e){let t=this.getAttachmentAndPositionById(e.id),n=t.position;if(e=t.attachment)return[n,n+1]}updateAttributesForAttachment(e,t){let n=this.getRangeOfAttachment(t);return n?this.addAttributesAtRange(e,n):this}getLength(){return this.pieceList.getEndPosition()}isEmpty(){return this.getLength()===0}isEqualTo(e){var t;return super.isEqualTo(e)||(e==null||(t=e.pieceList)===null||t===void 0?void 0:t.isEqualTo(this.pieceList))}isBlockBreak(){return this.getLength()===1&&this.pieceList.getObjectAtIndex(0).isBlockBreak()}eachPiece(e){return this.pieceList.eachObject(e)}getPieces(){return this.pieceList.toArray()}getPieceAtPosition(e){return this.pieceList.getObjectAtPosition(e)}contentsForInspection(){return{pieceList:this.pieceList.inspect()}}toSerializableText(){let e=this.pieceList.selectSplittableList(t=>t.isSerializable());return this.copyWithPieceList(e)}toString(){return this.pieceList.toString()}toJSON(){return this.pieceList.toJSON()}toConsole(){return JSON.stringify(this.pieceList.toArray().map(e=>JSON.parse(e.toConsole())))}getDirection(){return Zf(this.toString())}isRTL(){return this.getDirection()==="rtl"}},Yt=class extends Fi{static fromJSON(e){return new this(Ut.fromJSON(e.text),e.attributes,e.htmlAttributes)}constructor(e,t,n){super(...arguments),this.text=Up(e||new Ut),this.attributes=t||[],this.htmlAttributes=n||{}}isEmpty(){return this.text.isBlockBreak()}isEqualTo(e){return!!super.isEqualTo(e)||this.text.isEqualTo(e?.text)&&Nn(this.attributes,e?.attributes)&&pr(this.htmlAttributes,e?.htmlAttributes)}copyWithText(e){return new Yt(e,this.attributes,this.htmlAttributes)}copyWithoutText(){return this.copyWithText(null)}copyWithAttributes(e){return new Yt(this.text,e,this.htmlAttributes)}copyWithoutAttributes(){return this.copyWithAttributes(null)}copyUsingObjectMap(e){let t=e.find(this.text);return t?this.copyWithText(t):this.copyWithText(this.text.copyUsingObjectMap(e))}addAttribute(e){let t=this.attributes.concat(Bd(e));return this.copyWithAttributes(t)}addHTMLAttribute(e,t){let n=Object.assign({},this.htmlAttributes,{[e]:t});return new Yt(this.text,this.attributes,n)}removeAttribute(e){let{listAttribute:t}=Xe(e),n=jd(jd(this.attributes,e),t);return this.copyWithAttributes(n)}removeLastAttribute(){return this.removeAttribute(this.getLastAttribute())}getLastAttribute(){return Fd(this.attributes)}getAttributes(){return this.attributes.slice(0)}getAttributeLevel(){return this.attributes.length}getAttributeAtLevel(e){return this.attributes[e-1]}hasAttribute(e){return this.attributes.includes(e)}hasAttributes(){return this.getAttributeLevel()>0}getLastNestableAttribute(){return Fd(this.getNestableAttributes())}getNestableAttributes(){return this.attributes.filter(e=>Xe(e).nestable)}getNestingLevel(){return this.getNestableAttributes().length}decreaseNestingLevel(){let e=this.getLastNestableAttribute();return e?this.removeAttribute(e):this}increaseNestingLevel(){let e=this.getLastNestableAttribute();if(e){let t=this.attributes.lastIndexOf(e),n=Au(this.attributes,t+1,0,...Bd(e));return this.copyWithAttributes(n)}return this}getListItemAttributes(){return this.attributes.filter(e=>Xe(e).listAttribute)}isListItem(){var e;return(e=Xe(this.getLastAttribute()))===null||e===void 0?void 0:e.listAttribute}isTerminalBlock(){var e;return(e=Xe(this.getLastAttribute()))===null||e===void 0?void 0:e.terminal}breaksOnReturn(){var e;return(e=Xe(this.getLastAttribute()))===null||e===void 0?void 0:e.breakOnReturn}findLineBreakInDirectionFromPosition(e,t){let n=this.toString(),r;switch(e){case"forward":r=n.indexOf(`
`,t);break;case"backward":r=n.slice(0,t).lastIndexOf(`
`)}if(r!==-1)return r}contentsForInspection(){return{text:this.text.inspect(),attributes:this.attributes}}toString(){return this.text.toString()}toJSON(){return{text:this.text,attributes:this.attributes,htmlAttributes:this.htmlAttributes}}getDirection(){return this.text.getDirection()}isRTL(){return this.text.isRTL()}getLength(){return this.text.getLength()}canBeConsolidatedWith(e){return!this.hasAttributes()&&!e.hasAttributes()&&this.getDirection()===e.getDirection()}consolidateWith(e){let t=Ut.textForStringWithAttributes(`
`),n=this.getTextWithoutBlockBreak().appendText(t);return this.copyWithText(n.appendText(e.text))}splitAtOffset(e){let t,n;return e===0?(t=null,n=this):e===this.getLength()?(t=this,n=null):(t=this.copyWithText(this.text.getTextAtRange([0,e])),n=this.copyWithText(this.text.getTextAtRange([e,this.getLength()]))),[t,n]}getBlockBreakPosition(){return this.text.getLength()-1}getTextWithoutBlockBreak(){return fc(this.text)?this.text.getTextAtRange([0,this.getBlockBreakPosition()]):this.text.copy()}canBeGrouped(e){return this.attributes[e]}canBeGroupedWith(e,t){let n=e.getAttributes(),r=n[t],s=this.attributes[t];return s===r&&!(Xe(s).group===!1&&!(()=>{if(!Zs){Zs=[];for(let a in yt){let{listAttribute:u}=yt[a];u!=null&&Zs.push(u)}}return Zs})().includes(n[t+1]))&&(this.getDirection()===e.getDirection()||e.isEmpty())}},Up=function(i){return i=Wp(i),i=qp(i)},Wp=function(i){let e=!1,t=i.getPieces(),n=t.slice(0,t.length-1),r=t[t.length-1];return r?(n=n.map(s=>s.isBlockBreak()?(e=!0,Kp(s)):s),e?new Ut([...n,r]):i):i},$p=Ut.textForStringWithAttributes(`
`,{blockBreak:!0}),qp=function(i){return fc(i)?i:i.appendText($p)},fc=function(i){let e=i.getLength();return e===0?!1:i.getTextAtRange([e-1,e]).isBlockBreak()},Kp=i=>i.copyWithoutAttribute("blockBreak"),Bd=function(i){let{listAttribute:e}=Xe(i);return e?[e,i]:[i]},Fd=i=>i.slice(-1)[0],jd=function(i,e){let t=i.lastIndexOf(e);return t===-1?i:Au(i,t,1)},It=class extends Fi{static fromJSON(e){return new this(Array.from(e).map(t=>Yt.fromJSON(t)))}static fromString(e,t){let n=Ut.textForStringWithAttributes(e,t);return new this([new Yt(n)])}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),e.length===0&&(e=[new Yt]),this.blockList=hr.box(e)}isEmpty(){let e=this.getBlockAtIndex(0);return this.blockList.length===1&&e.isEmpty()&&!e.hasAttributes()}copy(){let e=(arguments.length>0&&arguments[0]!==void 0?arguments[0]:{}).consolidateBlocks?this.blockList.consolidate().toArray():this.blockList.toArray();return new this.constructor(e)}copyUsingObjectsFromDocument(e){let t=new ou(e.getObjects());return this.copyUsingObjectMap(t)}copyUsingObjectMap(e){let t=this.getBlocks().map(n=>e.find(n)||n.copyUsingObjectMap(e));return new this.constructor(t)}copyWithBaseBlockAttributes(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],t=this.getBlocks().map(n=>{let r=e.concat(n.getAttributes());return n.copyWithAttributes(r)});return new this.constructor(t)}replaceBlock(e,t){let n=this.blockList.indexOf(e);return n===-1?this:new this.constructor(this.blockList.replaceObjectAtIndex(t,n))}insertDocumentAtRange(e,t){let{blockList:n}=e;t=Ie(t);let[r]=t,{index:s,offset:a}=this.locationFromPosition(r),u=this,c=this.getBlockAtPosition(r);return Bi(t)&&c.isEmpty()&&!c.hasAttributes()?u=new this.constructor(u.blockList.removeObjectAtIndex(s)):c.getBlockBreakPosition()===a&&r++,u=u.removeTextAtRange(t),new this.constructor(u.blockList.insertSplittableListAtPosition(n,r))}mergeDocumentAtRange(e,t){let n,r;t=Ie(t);let[s]=t,a=this.locationFromPosition(s),u=this.getBlockAtIndex(a.index).getAttributes(),c=e.getBaseBlockAttributes(),v=u.slice(-c.length);if(Nn(c,v)){let N=u.slice(0,-c.length);n=e.copyWithBaseBlockAttributes(N)}else n=e.copy({consolidateBlocks:!0}).copyWithBaseBlockAttributes(u);let k=n.getBlockCount(),A=n.getBlockAtIndex(0);if(Nn(u,A.getAttributes())){let N=A.getTextWithoutBlockBreak();if(r=this.insertTextAtRange(N,t),k>1){n=new this.constructor(n.getBlocks().slice(1));let y=s+N.getLength();r=r.insertDocumentAtRange(n,y)}}else r=this.insertDocumentAtRange(n,t);return r}insertTextAtRange(e,t){t=Ie(t);let[n]=t,{index:r,offset:s}=this.locationFromPosition(n),a=this.removeTextAtRange(t);return new this.constructor(a.blockList.editObjectAtIndex(r,u=>u.copyWithText(u.text.insertTextAtPosition(e,s))))}removeTextAtRange(e){let t;e=Ie(e);let[n,r]=e;if(Bi(e))return this;let[s,a]=Array.from(this.locationRangeFromRange(e)),u=s.index,c=s.offset,v=this.getBlockAtIndex(u),k=a.index,A=a.offset,N=this.getBlockAtIndex(k);if(r-n==1&&v.getBlockBreakPosition()===c&&N.getBlockBreakPosition()!==A&&N.text.getStringAtPosition(A)===`
`)t=this.blockList.editObjectAtIndex(k,y=>y.copyWithText(y.text.removeTextAtRange([A,A+1])));else{let y,d=v.text.getTextAtRange([0,c]),g=N.text.getTextAtRange([A,N.getLength()]),b=d.appendText(g);y=u!==k&&c===0&&v.getAttributeLevel()>=N.getAttributeLevel()?N.copyWithText(b):v.copyWithText(b);let E=k+1-u;t=this.blockList.splice(u,E,y)}return new this.constructor(t)}moveTextFromRangeToPosition(e,t){let n;e=Ie(e);let[r,s]=e;if(r<=t&&t<=s)return this;let a=this.getDocumentAtRange(e),u=this.removeTextAtRange(e),c=r<t;c&&(t-=a.getLength());let[v,...k]=a.getBlocks();return k.length===0?(n=v.getTextWithoutBlockBreak(),c&&(t+=1)):n=v.text,u=u.insertTextAtRange(n,t),k.length===0?u:(a=new this.constructor(k),t+=n.getLength(),u.insertDocumentAtRange(a,t))}addAttributeAtRange(e,t,n){let{blockList:r}=this;return this.eachBlockAtRange(n,(s,a,u)=>r=r.editObjectAtIndex(u,function(){return Xe(e)?s.addAttribute(e,t):a[0]===a[1]?s:s.copyWithText(s.text.addAttributeAtRange(e,t,a))})),new this.constructor(r)}addAttribute(e,t){let{blockList:n}=this;return this.eachBlock((r,s)=>n=n.editObjectAtIndex(s,()=>r.addAttribute(e,t))),new this.constructor(n)}removeAttributeAtRange(e,t){let{blockList:n}=this;return this.eachBlockAtRange(t,function(r,s,a){Xe(e)?n=n.editObjectAtIndex(a,()=>r.removeAttribute(e)):s[0]!==s[1]&&(n=n.editObjectAtIndex(a,()=>r.copyWithText(r.text.removeAttributeAtRange(e,s))))}),new this.constructor(n)}updateAttributesForAttachment(e,t){let n=this.getRangeOfAttachment(t),[r]=Array.from(n),{index:s}=this.locationFromPosition(r),a=this.getTextAtIndex(s);return new this.constructor(this.blockList.editObjectAtIndex(s,u=>u.copyWithText(a.updateAttributesForAttachment(e,t))))}removeAttributeForAttachment(e,t){let n=this.getRangeOfAttachment(t);return this.removeAttributeAtRange(e,n)}setHTMLAttributeAtPosition(e,t,n){let r=this.getBlockAtPosition(e),s=r.addHTMLAttribute(t,n);return this.replaceBlock(r,s)}insertBlockBreakAtRange(e){let t;e=Ie(e);let[n]=e,{offset:r}=this.locationFromPosition(n),s=this.removeTextAtRange(e);return r===0&&(t=[new Yt]),new this.constructor(s.blockList.insertSplittableListAtPosition(new hr(t),n))}applyBlockAttributeAtRange(e,t,n){let r=this.expandRangeToLineBreaksAndSplitBlocks(n),s=r.document;n=r.range;let a=Xe(e);if(a.listAttribute){s=s.removeLastListAttributeAtRange(n,{exceptAttributeName:e});let u=s.convertLineBreaksToBlockBreaksInRange(n);s=u.document,n=u.range}else s=a.exclusive?s.removeBlockAttributesAtRange(n):a.terminal?s.removeLastTerminalAttributeAtRange(n):s.consolidateBlocksAtRange(n);return s.addAttributeAtRange(e,t,n)}removeLastListAttributeAtRange(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},{blockList:n}=this;return this.eachBlockAtRange(e,function(r,s,a){let u=r.getLastAttribute();u&&Xe(u).listAttribute&&u!==t.exceptAttributeName&&(n=n.editObjectAtIndex(a,()=>r.removeAttribute(u)))}),new this.constructor(n)}removeLastTerminalAttributeAtRange(e){let{blockList:t}=this;return this.eachBlockAtRange(e,function(n,r,s){let a=n.getLastAttribute();a&&Xe(a).terminal&&(t=t.editObjectAtIndex(s,()=>n.removeAttribute(a)))}),new this.constructor(t)}removeBlockAttributesAtRange(e){let{blockList:t}=this;return this.eachBlockAtRange(e,function(n,r,s){n.hasAttributes()&&(t=t.editObjectAtIndex(s,()=>n.copyWithoutAttributes()))}),new this.constructor(t)}expandRangeToLineBreaksAndSplitBlocks(e){let t;e=Ie(e);let[n,r]=e,s=this.locationFromPosition(n),a=this.locationFromPosition(r),u=this,c=u.getBlockAtIndex(s.index);if(s.offset=c.findLineBreakInDirectionFromPosition("backward",s.offset),s.offset!=null&&(t=u.positionFromLocation(s),u=u.insertBlockBreakAtRange([t,t+1]),a.index+=1,a.offset-=u.getBlockAtIndex(s.index).getLength(),s.index+=1),s.offset=0,a.offset===0&&a.index>s.index)a.index-=1,a.offset=u.getBlockAtIndex(a.index).getBlockBreakPosition();else{let v=u.getBlockAtIndex(a.index);v.text.getStringAtRange([a.offset-1,a.offset])===`
`?a.offset-=1:a.offset=v.findLineBreakInDirectionFromPosition("forward",a.offset),a.offset!==v.getBlockBreakPosition()&&(t=u.positionFromLocation(a),u=u.insertBlockBreakAtRange([t,t+1]))}return n=u.positionFromLocation(s),r=u.positionFromLocation(a),{document:u,range:e=Ie([n,r])}}convertLineBreaksToBlockBreaksInRange(e){e=Ie(e);let[t]=e,n=this.getStringAtRange(e).slice(0,-1),r=this;return n.replace(/.*?\n/g,function(s){t+=s.length,r=r.insertBlockBreakAtRange([t-1,t])}),{document:r,range:e}}consolidateBlocksAtRange(e){e=Ie(e);let[t,n]=e,r=this.locationFromPosition(t).index,s=this.locationFromPosition(n).index;return new this.constructor(this.blockList.consolidateFromIndexToIndex(r,s))}getDocumentAtRange(e){e=Ie(e);let t=this.blockList.getSplittableListInRange(e).toArray();return new this.constructor(t)}getStringAtRange(e){let t,n=e=Ie(e);return n[n.length-1]!==this.getLength()&&(t=-1),this.getDocumentAtRange(e).toString().slice(0,t)}getBlockAtIndex(e){return this.blockList.getObjectAtIndex(e)}getBlockAtPosition(e){let{index:t}=this.locationFromPosition(e);return this.getBlockAtIndex(t)}getTextAtIndex(e){var t;return(t=this.getBlockAtIndex(e))===null||t===void 0?void 0:t.text}getTextAtPosition(e){let{index:t}=this.locationFromPosition(e);return this.getTextAtIndex(t)}getPieceAtPosition(e){let{index:t,offset:n}=this.locationFromPosition(e);return this.getTextAtIndex(t).getPieceAtPosition(n)}getCharacterAtPosition(e){let{index:t,offset:n}=this.locationFromPosition(e);return this.getTextAtIndex(t).getStringAtRange([n,n+1])}getLength(){return this.blockList.getEndPosition()}getBlocks(){return this.blockList.toArray()}getBlockCount(){return this.blockList.length}getEditCount(){return this.editCount}eachBlock(e){return this.blockList.eachObject(e)}eachBlockAtRange(e,t){let n,r;e=Ie(e);let[s,a]=e,u=this.locationFromPosition(s),c=this.locationFromPosition(a);if(u.index===c.index)return n=this.getBlockAtIndex(u.index),r=[u.offset,c.offset],t(n,r,u.index);for(let v=u.index;v<=c.index;v++)if(n=this.getBlockAtIndex(v),n){switch(v){case u.index:r=[u.offset,n.text.getLength()];break;case c.index:r=[0,c.offset];break;default:r=[0,n.text.getLength()]}t(n,r,v)}}getCommonAttributesAtRange(e){e=Ie(e);let[t]=e;if(Bi(e))return this.getCommonAttributesAtPosition(t);{let n=[],r=[];return this.eachBlockAtRange(e,function(s,a){if(a[0]!==a[1])return n.push(s.text.getCommonAttributesAtRange(a)),r.push(Hd(s))}),wt.fromCommonAttributesOfObjects(n).merge(wt.fromCommonAttributesOfObjects(r)).toObject()}}getCommonAttributesAtPosition(e){let t,n,{index:r,offset:s}=this.locationFromPosition(e),a=this.getBlockAtIndex(r);if(!a)return{};let u=Hd(a),c=a.text.getAttributesAtPosition(s),v=a.text.getAttributesAtPosition(s-1),k=Object.keys(On).filter(A=>On[A].inheritable);for(t in v)n=v[t],(n===c[t]||k.includes(t))&&(u[t]=n);return u}getRangeOfCommonAttributeAtPosition(e,t){let{index:n,offset:r}=this.locationFromPosition(t),s=this.getTextAtIndex(n),[a,u]=Array.from(s.getExpandedRangeForAttributeAtOffset(e,r)),c=this.positionFromLocation({index:n,offset:a}),v=this.positionFromLocation({index:n,offset:u});return Ie([c,v])}getBaseBlockAttributes(){let e=this.getBlockAtIndex(0).getAttributes();for(let t=1;t<this.getBlockCount();t++){let n=this.getBlockAtIndex(t).getAttributes(),r=Math.min(e.length,n.length);e=(()=>{let s=[];for(let a=0;a<r&&n[a]===e[a];a++)s.push(n[a]);return s})()}return e}getAttachmentById(e){for(let t of this.getAttachments())if(t.id===e)return t}getAttachmentPieces(){let e=[];return this.blockList.eachObject(t=>{let{text:n}=t;return e=e.concat(n.getAttachmentPieces())}),e}getAttachments(){return this.getAttachmentPieces().map(e=>e.attachment)}getRangeOfAttachment(e){let t=0,n=this.blockList.toArray();for(let r=0;r<n.length;r++){let{text:s}=n[r],a=s.getRangeOfAttachment(e);if(a)return Ie([t+a[0],t+a[1]]);t+=s.getLength()}}getLocationRangeOfAttachment(e){let t=this.getRangeOfAttachment(e);return this.locationRangeFromRange(t)}getAttachmentPieceForAttachment(e){for(let t of this.getAttachmentPieces())if(t.attachment===e)return t}findRangesForBlockAttribute(e){let t=0,n=[];return this.getBlocks().forEach(r=>{let s=r.getLength();r.hasAttribute(e)&&n.push([t,t+s]),t+=s}),n}findRangesForTextAttribute(e){let{withValue:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=0,r=[],s=[];return this.getPieces().forEach(a=>{let u=a.getLength();(function(c){return t?c.getAttribute(e)===t:c.hasAttribute(e)})(a)&&(r[1]===n?r[1]=n+u:s.push(r=[n,n+u])),n+=u}),s}locationFromPosition(e){let t=this.blockList.findIndexAndOffsetAtPosition(Math.max(0,e));if(t.index!=null)return t;{let n=this.getBlocks();return{index:n.length-1,offset:n[n.length-1].getLength()}}}positionFromLocation(e){return this.blockList.findPositionAtIndexAndOffset(e.index,e.offset)}locationRangeFromPosition(e){return Ie(this.locationFromPosition(e))}locationRangeFromRange(e){if(!(e=Ie(e)))return;let[t,n]=Array.from(e),r=this.locationFromPosition(t),s=this.locationFromPosition(n);return Ie([r,s])}rangeFromLocationRange(e){let t;e=Ie(e);let n=this.positionFromLocation(e[0]);return Bi(e)||(t=this.positionFromLocation(e[1])),Ie([n,t])}isEqualTo(e){return this.blockList.isEqualTo(e?.blockList)}getTexts(){return this.getBlocks().map(e=>e.text)}getPieces(){let e=[];return Array.from(this.getTexts()).forEach(t=>{e.push(...Array.from(t.getPieces()||[]))}),e}getObjects(){return this.getBlocks().concat(this.getTexts()).concat(this.getPieces())}toSerializableDocument(){let e=[];return this.blockList.eachObject(t=>e.push(t.copyWithText(t.text.toSerializableText()))),new this.constructor(e)}toString(){return this.blockList.toString()}toJSON(){return this.blockList.toJSON()}toConsole(){return JSON.stringify(this.blockList.toArray().map(e=>JSON.parse(e.text.toConsole())))}},Hd=function(i){let e={},t=i.getLastAttribute();return t&&(e[t]=!0),e},Wo=function(i){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return{string:i=Xr(i),attributes:e,type:"string"}},zd=(i,e)=>{try{return JSON.parse(i.getAttribute("data-trix-".concat(e)))}catch{return{}}},Fn=class extends Ge{static parse(e,t){let n=new this(e,t);return n.parse(),n}constructor(e){let{referenceElement:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.html=e,this.referenceElement=t,this.blocks=[],this.blockElements=[],this.processedElements=[]}getDocument(){return It.fromJSON(this.blocks)}parse(){try{this.createHiddenContainer(),dr.setHTML(this.containerElement,this.html);let e=oa(this.containerElement,{usingFilter:Gp});for(;e.nextNode();)this.processNode(e.currentNode);return this.translateBlockElementMarginsToNewlines()}finally{this.removeHiddenContainer()}}createHiddenContainer(){return this.referenceElement?(this.containerElement=this.referenceElement.cloneNode(!1),this.containerElement.removeAttribute("id"),this.containerElement.setAttribute("data-trix-internal",""),this.containerElement.style.display="none",this.referenceElement.parentNode.insertBefore(this.containerElement,this.referenceElement.nextSibling)):(this.containerElement=be({tagName:"div",style:{display:"none"}}),document.body.appendChild(this.containerElement))}removeHiddenContainer(){return on(this.containerElement)}processNode(e){switch(e.nodeType){case Node.TEXT_NODE:if(!this.isInsignificantTextNode(e))return this.appendBlockForTextNode(e),this.processTextNode(e);break;case Node.ELEMENT_NODE:return this.appendBlockForElement(e),this.processElement(e)}}appendBlockForTextNode(e){let t=e.parentNode;if(t===this.currentBlockElement&&this.isBlockElement(e.previousSibling))return this.appendStringWithAttributes(`
`);if(t===this.containerElement||this.isBlockElement(t)){var n;let r=this.getBlockAttributes(t),s=this.getBlockHTMLAttributes(t);Nn(r,(n=this.currentBlock)===null||n===void 0?void 0:n.attributes)||(this.currentBlock=this.appendBlockForAttributesWithElement(r,t,s),this.currentBlockElement=t)}}appendBlockForElement(e){let t=this.isBlockElement(e),n=xn(this.currentBlockElement,e);if(t&&!this.isBlockElement(e.firstChild)){if(!this.isInsignificantTextNode(e.firstChild)||!this.isBlockElement(e.firstElementChild)){let r=this.getBlockAttributes(e),s=this.getBlockHTMLAttributes(e);if(e.firstChild){if(n&&Nn(r,this.currentBlock.attributes))return this.appendStringWithAttributes(`
`);this.currentBlock=this.appendBlockForAttributesWithElement(r,e,s),this.currentBlockElement=e}}}else if(this.currentBlockElement&&!n&&!t){let r=this.findParentBlockElement(e);if(r)return this.appendBlockForElement(r);this.currentBlock=this.appendEmptyBlock(),this.currentBlockElement=null}}findParentBlockElement(e){let{parentElement:t}=e;for(;t&&t!==this.containerElement;){if(this.isBlockElement(t)&&this.blockElements.includes(t))return t;t=t.parentElement}return null}processTextNode(e){let t=e.data;var n;return Vd(e.parentNode)||(t=Su(t),pc((n=e.previousSibling)===null||n===void 0?void 0:n.textContent)&&(t=Xp(t))),this.appendStringWithAttributes(t,this.getTextAttributes(e.parentNode))}processElement(e){let t;if(Rn(e)){if(t=zd(e,"attachment"),Object.keys(t).length){let n=this.getTextAttributes(e);this.appendAttachmentWithAttributes(t,n),e.innerHTML=""}return this.processedElements.push(e)}switch(bt(e)){case"br":return this.isExtraBR(e)||this.isBlockElement(e.nextSibling)||this.appendStringWithAttributes(`
`,this.getTextAttributes(e)),this.processedElements.push(e);case"img":t={url:e.getAttribute("src"),contentType:"image"};let n=(r=>{let s=r.getAttribute("width"),a=r.getAttribute("height"),u={};return s&&(u.width=parseInt(s,10)),a&&(u.height=parseInt(a,10)),u})(e);for(let r in n){let s=n[r];t[r]=s}return this.appendAttachmentWithAttributes(t,this.getTextAttributes(e)),this.processedElements.push(e);case"tr":if(this.needsTableSeparator(e))return this.appendStringWithAttributes(ra.tableRowSeparator);break;case"td":if(this.needsTableSeparator(e))return this.appendStringWithAttributes(ra.tableCellSeparator)}}appendBlockForAttributesWithElement(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};this.blockElements.push(t);let r=function(){return{text:[],attributes:arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},htmlAttributes:arguments.length>1&&arguments[1]!==void 0?arguments[1]:{}}}(e,n);return this.blocks.push(r),r}appendEmptyBlock(){return this.appendBlockForAttributesWithElement([],null)}appendStringWithAttributes(e,t){return this.appendPiece(Wo(e,t))}appendAttachmentWithAttributes(e,t){return this.appendPiece(function(n){return{attachment:n,attributes:arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},type:"attachment"}}(e,t))}appendPiece(e){return this.blocks.length===0&&this.appendEmptyBlock(),this.blocks[this.blocks.length-1].text.push(e)}appendStringToTextAtIndex(e,t){let{text:n}=this.blocks[t],r=n[n.length-1];if(r?.type!=="string")return n.push(Wo(e));r.string+=e}prependStringToTextAtIndex(e,t){let{text:n}=this.blocks[t],r=n[0];if(r?.type!=="string")return n.unshift(Wo(e));r.string=e+r.string}getTextAttributes(e){let t,n={};for(let r in On){let s=On[r];if(s.tagName&&an(e,{matchingSelector:s.tagName,untilNode:this.containerElement}))n[r]=!0;else if(s.parser){if(t=s.parser(e),t){let a=!1;for(let u of this.findBlockElementAncestors(e))if(s.parser(u)===t){a=!0;break}a||(n[r]=t)}}else s.styleProperty&&(t=e.style[s.styleProperty],t&&(n[r]=t))}if(Rn(e)){let r=zd(e,"attributes");for(let s in r)t=r[s],n[s]=t}return n}getBlockAttributes(e){let t=[];for(;e&&e!==this.containerElement;){for(let r in yt){let s=yt[r];var n;s.parse!==!1&&bt(e)===s.tagName&&((n=s.test)!==null&&n!==void 0&&n.call(s,e)||!s.test)&&(t.push(r),s.listAttribute&&t.push(s.listAttribute))}e=e.parentNode}return t.reverse()}getBlockHTMLAttributes(e){let t={},n=Object.values(yt).find(r=>r.tagName===bt(e));return(n?.htmlAttributes||[]).forEach(r=>{e.hasAttribute(r)&&(t[r]=e.getAttribute(r))}),t}findBlockElementAncestors(e){let t=[];for(;e&&e!==this.containerElement;){let n=bt(e);Zr().includes(n)&&t.push(e),e=e.parentNode}return t}isBlockElement(e){if(e?.nodeType===Node.ELEMENT_NODE&&!Rn(e)&&!an(e,{matchingSelector:"td",untilNode:this.containerElement}))return Zr().includes(bt(e))||window.getComputedStyle(e).display==="block"}isInsignificantTextNode(e){if(e?.nodeType!==Node.TEXT_NODE||!Yp(e.data))return;let{parentNode:t,previousSibling:n,nextSibling:r}=e;return Jp(t.previousSibling)&&!this.isBlockElement(t.previousSibling)||Vd(t)?void 0:!n||this.isBlockElement(n)||!r||this.isBlockElement(r)}isExtraBR(e){return bt(e)==="br"&&this.isBlockElement(e.parentNode)&&e.parentNode.lastChild===e}needsTableSeparator(e){if(ra.removeBlankTableCells){var t;let n=(t=e.previousSibling)===null||t===void 0?void 0:t.textContent;return n&&/\S/.test(n)}return e.previousSibling}translateBlockElementMarginsToNewlines(){let e=this.getMarginOfDefaultBlockElement();for(let t=0;t<this.blocks.length;t++){let n=this.getMarginOfBlockElementAtIndex(t);n&&(n.top>2*e.top&&this.prependStringToTextAtIndex(`
`,t),n.bottom>2*e.bottom&&this.appendStringToTextAtIndex(`
`,t))}}getMarginOfBlockElementAtIndex(e){let t=this.blockElements[e];if(t&&t.textContent&&!Zr().includes(bt(t))&&!this.processedElements.includes(t))return Ud(t)}getMarginOfDefaultBlockElement(){let e=be(yt.default.tagName);return this.containerElement.appendChild(e),Ud(e)}},Vd=function(i){let{whiteSpace:e}=window.getComputedStyle(i);return["pre","pre-wrap","pre-line"].includes(e)},Jp=i=>i&&!pc(i.textContent),Ud=function(i){let e=window.getComputedStyle(i);if(e.display==="block")return{top:parseInt(e.marginTop),bottom:parseInt(e.marginBottom)}},Gp=function(i){return bt(i)==="style"?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},Xp=i=>i.replace(new RegExp("^".concat(Cu.source,"+")),""),Yp=i=>new RegExp("^".concat(Cu.source,"*$")).test(i),pc=i=>/\s$/.test(i),Zp=["contenteditable","data-trix-id","data-trix-store-key","data-trix-mutable","data-trix-placeholder","tabindex"],hu="data-trix-serialized-attributes",Qp="[".concat(hu,"]"),eg=new RegExp("<!--block-->","g"),tg={"application/json":function(i){let e;if(i instanceof It)e=i;else{if(!(i instanceof HTMLElement))throw new Error("unserializable object");e=Fn.parse(i.innerHTML).getDocument()}return e.toSerializableDocument().toJSONString()},"text/html":function(i){let e;if(i instanceof It)e=cr.render(i);else{if(!(i instanceof HTMLElement))throw new Error("unserializable object");e=i.cloneNode(!0)}return Array.from(e.querySelectorAll("[data-trix-serialize=false]")).forEach(t=>{on(t)}),Zp.forEach(t=>{Array.from(e.querySelectorAll("[".concat(t,"]"))).forEach(n=>{n.removeAttribute(t)})}),Array.from(e.querySelectorAll(Qp)).forEach(t=>{try{let n=JSON.parse(t.getAttribute(hu));t.removeAttribute(hu);for(let r in n){let s=n[r];t.setAttribute(r,s)}}catch{}}),e.innerHTML.replace(eg,"")}},ig=Object.freeze({__proto__:null}),qe=class extends Ge{constructor(e,t){super(...arguments),this.attachmentManager=e,this.attachment=t,this.id=this.attachment.id,this.file=this.attachment.file}remove(){return this.attachmentManager.requestRemovalOfAttachment(this.attachment)}};qe.proxyMethod("attachment.getAttribute"),qe.proxyMethod("attachment.hasAttribute"),qe.proxyMethod("attachment.setAttribute"),qe.proxyMethod("attachment.getAttributes"),qe.proxyMethod("attachment.setAttributes"),qe.proxyMethod("attachment.isPending"),qe.proxyMethod("attachment.isPreviewable"),qe.proxyMethod("attachment.getURL"),qe.proxyMethod("attachment.getHref"),qe.proxyMethod("attachment.getFilename"),qe.proxyMethod("attachment.getFilesize"),qe.proxyMethod("attachment.getFormattedFilesize"),qe.proxyMethod("attachment.getExtension"),qe.proxyMethod("attachment.getContentType"),qe.proxyMethod("attachment.getFile"),qe.proxyMethod("attachment.setFile"),qe.proxyMethod("attachment.releaseFile"),qe.proxyMethod("attachment.getUploadProgress"),qe.proxyMethod("attachment.setUploadProgress");var ma=class extends Ge{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),this.managedAttachments={},Array.from(e).forEach(t=>{this.manageAttachment(t)})}getAttachments(){let e=[];for(let t in this.managedAttachments){let n=this.managedAttachments[t];e.push(n)}return e}manageAttachment(e){return this.managedAttachments[e.id]||(this.managedAttachments[e.id]=new qe(this,e)),this.managedAttachments[e.id]}attachmentIsManaged(e){return e.id in this.managedAttachments}requestRemovalOfAttachment(e){var t,n;if(this.attachmentIsManaged(e))return(t=this.delegate)===null||t===void 0||(n=t.attachmentManagerDidRequestRemovalOfAttachment)===null||n===void 0?void 0:n.call(t,e)}unmanageAttachment(e){let t=this.managedAttachments[e.id];return delete this.managedAttachments[e.id],t}},va=class{constructor(e){this.composition=e,this.document=this.composition.document;let t=this.composition.getSelectedRange();this.startPosition=t[0],this.endPosition=t[1],this.startLocation=this.document.locationFromPosition(this.startPosition),this.endLocation=this.document.locationFromPosition(this.endPosition),this.block=this.document.getBlockAtIndex(this.endLocation.index),this.breaksOnReturn=this.block.breaksOnReturn(),this.previousCharacter=this.block.text.getStringAtPosition(this.endLocation.offset-1),this.nextCharacter=this.block.text.getStringAtPosition(this.endLocation.offset)}shouldInsertBlockBreak(){return this.block.hasAttributes()&&this.block.isListItem()&&!this.block.isEmpty()?this.startLocation.offset!==0:this.breaksOnReturn&&this.nextCharacter!==`
`}shouldBreakFormattedBlock(){return this.block.hasAttributes()&&!this.block.isListItem()&&(this.breaksOnReturn&&this.nextCharacter===`
`||this.previousCharacter===`
`)}shouldDecreaseListLevel(){return this.block.hasAttributes()&&this.block.isListItem()&&this.block.isEmpty()}shouldPrependListItem(){return this.block.isListItem()&&this.startLocation.offset===0&&!this.block.isEmpty()}shouldRemoveLastBlockAttribute(){return this.block.hasAttributes()&&!this.block.isListItem()&&this.block.isEmpty()}},Ei=class extends Ge{constructor(){super(...arguments),this.document=new It,this.attachments=[],this.currentAttributes={},this.revision=0}setDocument(e){var t,n;if(!e.isEqualTo(this.document))return this.document=e,this.refreshAttachments(),this.revision++,(t=this.delegate)===null||t===void 0||(n=t.compositionDidChangeDocument)===null||n===void 0?void 0:n.call(t,e)}getSnapshot(){return{document:this.document,selectedRange:this.getSelectedRange()}}loadSnapshot(e){var t,n,r,s;let{document:a,selectedRange:u}=e;return(t=this.delegate)===null||t===void 0||(n=t.compositionWillLoadSnapshot)===null||n===void 0||n.call(t),this.setDocument(a??new It),this.setSelection(u??[0,0]),(r=this.delegate)===null||r===void 0||(s=r.compositionDidLoadSnapshot)===null||s===void 0?void 0:s.call(r)}insertText(e){let{updatePosition:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{updatePosition:!0},n=this.getSelectedRange();this.setDocument(this.document.insertTextAtRange(e,n));let r=n[0],s=r+e.getLength();return t&&this.setSelection(s),this.notifyDelegateOfInsertionAtRange([r,s])}insertBlock(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:new Yt,t=new It([e]);return this.insertDocument(t)}insertDocument(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:new It,t=this.getSelectedRange();this.setDocument(this.document.insertDocumentAtRange(e,t));let n=t[0],r=n+e.getLength();return this.setSelection(r),this.notifyDelegateOfInsertionAtRange([n,r])}insertString(e,t){let n=this.getCurrentTextAttributes(),r=Ut.textForStringWithAttributes(e,n);return this.insertText(r,t)}insertBlockBreak(){let e=this.getSelectedRange();this.setDocument(this.document.insertBlockBreakAtRange(e));let t=e[0],n=t+1;return this.setSelection(n),this.notifyDelegateOfInsertionAtRange([t,n])}insertLineBreak(){let e=new va(this);if(e.shouldDecreaseListLevel())return this.decreaseListLevel(),this.setSelection(e.startPosition);if(e.shouldPrependListItem()){let t=new It([e.block.copyWithoutText()]);return this.insertDocument(t)}return e.shouldInsertBlockBreak()?this.insertBlockBreak():e.shouldRemoveLastBlockAttribute()?this.removeLastBlockAttribute():e.shouldBreakFormattedBlock()?this.breakFormattedBlock(e):this.insertString(`
`)}insertHTML(e){let t=Fn.parse(e).getDocument(),n=this.getSelectedRange();this.setDocument(this.document.mergeDocumentAtRange(t,n));let r=n[0],s=r+t.getLength()-1;return this.setSelection(s),this.notifyDelegateOfInsertionAtRange([r,s])}replaceHTML(e){let t=Fn.parse(e).getDocument().copyUsingObjectsFromDocument(this.document),n=this.getLocationRange({strict:!1}),r=this.document.rangeFromLocationRange(n);return this.setDocument(t),this.setSelection(r)}insertFile(e){return this.insertFiles([e])}insertFiles(e){let t=[];return Array.from(e).forEach(n=>{var r;if((r=this.delegate)!==null&&r!==void 0&&r.compositionShouldAcceptFile(n)){let s=un.attachmentForFile(n);t.push(s)}}),this.insertAttachments(t)}insertAttachment(e){return this.insertAttachments([e])}insertAttachments(e){let t=new Ut;return Array.from(e).forEach(n=>{var r;let s=n.getType(),a=(r=yu[s])===null||r===void 0?void 0:r.presentation,u=this.getCurrentTextAttributes();a&&(u.presentation=a);let c=Ut.textForAttachmentWithAttributes(n,u);t=t.appendText(c)}),this.insertText(t)}shouldManageDeletingInDirection(e){let t=this.getLocationRange();if(Bi(t)){if(e==="backward"&&t[0].offset===0||this.shouldManageMovingCursorInDirection(e))return!0}else if(t[0].index!==t[1].index)return!0;return!1}deleteInDirection(e){let t,n,r,{length:s}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},a=this.getLocationRange(),u=this.getSelectedRange(),c=Bi(u);if(c?n=e==="backward"&&a[0].offset===0:r=a[0].index!==a[1].index,n&&this.canDecreaseBlockAttributeLevel()){let v=this.getBlock();if(v.isListItem()?this.decreaseListLevel():this.decreaseBlockAttributeLevel(),this.setSelection(u[0]),v.isEmpty())return!1}return c&&(u=this.getExpandedRangeInDirection(e,{length:s}),e==="backward"&&(t=this.getAttachmentAtRange(u))),t?(this.editAttachment(t),!1):(this.setDocument(this.document.removeTextAtRange(u)),this.setSelection(u[0]),!n&&!r&&void 0)}moveTextFromRange(e){let[t]=Array.from(this.getSelectedRange());return this.setDocument(this.document.moveTextFromRangeToPosition(e,t)),this.setSelection(t)}removeAttachment(e){let t=this.document.getRangeOfAttachment(e);if(t)return this.stopEditingAttachment(),this.setDocument(this.document.removeTextAtRange(t)),this.setSelection(t[0])}removeLastBlockAttribute(){let[e,t]=Array.from(this.getSelectedRange()),n=this.document.getBlockAtPosition(t);return this.removeCurrentAttribute(n.getLastAttribute()),this.setSelection(e)}insertPlaceholder(){return this.placeholderPosition=this.getPosition(),this.insertString(" ")}selectPlaceholder(){if(this.placeholderPosition!=null)return this.setSelectedRange([this.placeholderPosition,this.placeholderPosition+1]),this.getSelectedRange()}forgetPlaceholder(){this.placeholderPosition=null}hasCurrentAttribute(e){let t=this.currentAttributes[e];return t!=null&&t!==!1}toggleCurrentAttribute(e){let t=!this.currentAttributes[e];return t?this.setCurrentAttribute(e,t):this.removeCurrentAttribute(e)}canSetCurrentAttribute(e){return Xe(e)?this.canSetCurrentBlockAttribute(e):this.canSetCurrentTextAttribute(e)}canSetCurrentTextAttribute(e){let t=this.getSelectedDocument();if(t){for(let n of Array.from(t.getAttachments()))if(!n.hasContent())return!1;return!0}}canSetCurrentBlockAttribute(e){let t=this.getBlock();if(t)return!t.isTerminalBlock()}setCurrentAttribute(e,t){return Xe(e)?this.setBlockAttribute(e,t):(this.setTextAttribute(e,t),this.currentAttributes[e]=t,this.notifyDelegateOfCurrentAttributesChange())}setHTMLAtributeAtPosition(e,t,n){var r;let s=this.document.getBlockAtPosition(e),a=(r=Xe(s.getLastAttribute()))===null||r===void 0?void 0:r.htmlAttributes;if(s&&a!=null&&a.includes(t)){let u=this.document.setHTMLAttributeAtPosition(e,t,n);this.setDocument(u)}}setTextAttribute(e,t){let n=this.getSelectedRange();if(!n)return;let[r,s]=Array.from(n);if(r!==s)return this.setDocument(this.document.addAttributeAtRange(e,t,n));if(e==="href"){let a=Ut.textForStringWithAttributes(t,{href:t});return this.insertText(a)}}setBlockAttribute(e,t){let n=this.getSelectedRange();if(this.canSetCurrentAttribute(e))return this.setDocument(this.document.applyBlockAttributeAtRange(e,t,n)),this.setSelection(n)}removeCurrentAttribute(e){return Xe(e)?(this.removeBlockAttribute(e),this.updateCurrentAttributes()):(this.removeTextAttribute(e),delete this.currentAttributes[e],this.notifyDelegateOfCurrentAttributesChange())}removeTextAttribute(e){let t=this.getSelectedRange();if(t)return this.setDocument(this.document.removeAttributeAtRange(e,t))}removeBlockAttribute(e){let t=this.getSelectedRange();if(t)return this.setDocument(this.document.removeAttributeAtRange(e,t))}canDecreaseNestingLevel(){var e;return((e=this.getBlock())===null||e===void 0?void 0:e.getNestingLevel())>0}canIncreaseNestingLevel(){var e;let t=this.getBlock();if(t){if((e=Xe(t.getLastNestableAttribute()))===null||e===void 0||!e.listAttribute)return t.getNestingLevel()>0;{let n=this.getPreviousBlock();if(n)return function(){let r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];return Nn((arguments.length>0&&arguments[0]!==void 0?arguments[0]:[]).slice(0,r.length),r)}(n.getListItemAttributes(),t.getListItemAttributes())}}}decreaseNestingLevel(){let e=this.getBlock();if(e)return this.setDocument(this.document.replaceBlock(e,e.decreaseNestingLevel()))}increaseNestingLevel(){let e=this.getBlock();if(e)return this.setDocument(this.document.replaceBlock(e,e.increaseNestingLevel()))}canDecreaseBlockAttributeLevel(){var e;return((e=this.getBlock())===null||e===void 0?void 0:e.getAttributeLevel())>0}decreaseBlockAttributeLevel(){var e;let t=(e=this.getBlock())===null||e===void 0?void 0:e.getLastAttribute();if(t)return this.removeCurrentAttribute(t)}decreaseListLevel(){let[e]=Array.from(this.getSelectedRange()),{index:t}=this.document.locationFromPosition(e),n=t,r=this.getBlock().getAttributeLevel(),s=this.document.getBlockAtIndex(n+1);for(;s&&s.isListItem()&&!(s.getAttributeLevel()<=r);)n++,s=this.document.getBlockAtIndex(n+1);e=this.document.positionFromLocation({index:t,offset:0});let a=this.document.positionFromLocation({index:n,offset:0});return this.setDocument(this.document.removeLastListAttributeAtRange([e,a]))}updateCurrentAttributes(){let e=this.getSelectedRange({ignoreLock:!0});if(e){let t=this.document.getCommonAttributesAtRange(e);if(Array.from(ru()).forEach(n=>{t[n]||this.canSetCurrentAttribute(n)||(t[n]=!1)}),!pr(t,this.currentAttributes))return this.currentAttributes=t,this.notifyDelegateOfCurrentAttributesChange()}}getCurrentAttributes(){return Yd.call({},this.currentAttributes)}getCurrentTextAttributes(){let e={};for(let t in this.currentAttributes){let n=this.currentAttributes[t];n!==!1&&su(t)&&(e[t]=n)}return e}freezeSelection(){return this.setCurrentAttribute("frozen",!0)}thawSelection(){return this.removeCurrentAttribute("frozen")}hasFrozenSelection(){return this.hasCurrentAttribute("frozen")}setSelection(e){var t;let n=this.document.locationRangeFromRange(e);return(t=this.delegate)===null||t===void 0?void 0:t.compositionDidRequestChangingSelectionToLocationRange(n)}getSelectedRange(){let e=this.getLocationRange();if(e)return this.document.rangeFromLocationRange(e)}setSelectedRange(e){let t=this.document.locationRangeFromRange(e);return this.getSelectionManager().setLocationRange(t)}getPosition(){let e=this.getLocationRange();if(e)return this.document.positionFromLocation(e[0])}getLocationRange(e){return this.targetLocationRange?this.targetLocationRange:this.getSelectionManager().getLocationRange(e)||Ie({index:0,offset:0})}withTargetLocationRange(e,t){let n;this.targetLocationRange=e;try{n=t()}finally{this.targetLocationRange=null}return n}withTargetRange(e,t){let n=this.document.locationRangeFromRange(e);return this.withTargetLocationRange(n,t)}withTargetDOMRange(e,t){let n=this.createLocationRangeFromDOMRange(e,{strict:!1});return this.withTargetLocationRange(n,t)}getExpandedRangeInDirection(e){let{length:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},[n,r]=Array.from(this.getSelectedRange());return e==="backward"?t?n-=t:n=this.translateUTF16PositionFromOffset(n,-1):t?r+=t:r=this.translateUTF16PositionFromOffset(r,1),Ie([n,r])}shouldManageMovingCursorInDirection(e){if(this.editingAttachment)return!0;let t=this.getExpandedRangeInDirection(e);return this.getAttachmentAtRange(t)!=null}moveCursorInDirection(e){let t,n;if(this.editingAttachment)n=this.document.getRangeOfAttachment(this.editingAttachment);else{let r=this.getSelectedRange();n=this.getExpandedRangeInDirection(e),t=!ua(r,n)}if(e==="backward"?this.setSelectedRange(n[0]):this.setSelectedRange(n[1]),t){let r=this.getAttachmentAtRange(n);if(r)return this.editAttachment(r)}}expandSelectionInDirection(e){let{length:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=this.getExpandedRangeInDirection(e,{length:t});return this.setSelectedRange(n)}expandSelectionForEditing(){if(this.hasCurrentAttribute("href"))return this.expandSelectionAroundCommonAttribute("href")}expandSelectionAroundCommonAttribute(e){let t=this.getPosition(),n=this.document.getRangeOfCommonAttributeAtPosition(e,t);return this.setSelectedRange(n)}selectionContainsAttachments(){var e;return((e=this.getSelectedAttachments())===null||e===void 0?void 0:e.length)>0}selectionIsInCursorTarget(){return this.editingAttachment||this.positionIsCursorTarget(this.getPosition())}positionIsCursorTarget(e){let t=this.document.locationFromPosition(e);if(t)return this.locationIsCursorTarget(t)}positionIsBlockBreak(e){var t;return(t=this.document.getPieceAtPosition(e))===null||t===void 0?void 0:t.isBlockBreak()}getSelectedDocument(){let e=this.getSelectedRange();if(e)return this.document.getDocumentAtRange(e)}getSelectedAttachments(){var e;return(e=this.getSelectedDocument())===null||e===void 0?void 0:e.getAttachments()}getAttachments(){return this.attachments.slice(0)}refreshAttachments(){let e=this.document.getAttachments(),{added:t,removed:n}=function(){let r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[],a=[],u=[],c=new Set;r.forEach(k=>{c.add(k)});let v=new Set;return s.forEach(k=>{v.add(k),c.has(k)||a.push(k)}),r.forEach(k=>{v.has(k)||u.push(k)}),{added:a,removed:u}}(this.attachments,e);return this.attachments=e,Array.from(n).forEach(r=>{var s,a;r.delegate=null,(s=this.delegate)===null||s===void 0||(a=s.compositionDidRemoveAttachment)===null||a===void 0||a.call(s,r)}),(()=>{let r=[];return Array.from(t).forEach(s=>{var a,u;s.delegate=this,r.push((a=this.delegate)===null||a===void 0||(u=a.compositionDidAddAttachment)===null||u===void 0?void 0:u.call(a,s))}),r})()}attachmentDidChangeAttributes(e){var t,n;return this.revision++,(t=this.delegate)===null||t===void 0||(n=t.compositionDidEditAttachment)===null||n===void 0?void 0:n.call(t,e)}attachmentDidChangePreviewURL(e){var t,n;return this.revision++,(t=this.delegate)===null||t===void 0||(n=t.compositionDidChangeAttachmentPreviewURL)===null||n===void 0?void 0:n.call(t,e)}editAttachment(e,t){var n,r;if(e!==this.editingAttachment)return this.stopEditingAttachment(),this.editingAttachment=e,(n=this.delegate)===null||n===void 0||(r=n.compositionDidStartEditingAttachment)===null||r===void 0?void 0:r.call(n,this.editingAttachment,t)}stopEditingAttachment(){var e,t;this.editingAttachment&&((e=this.delegate)===null||e===void 0||(t=e.compositionDidStopEditingAttachment)===null||t===void 0||t.call(e,this.editingAttachment),this.editingAttachment=null)}updateAttributesForAttachment(e,t){return this.setDocument(this.document.updateAttributesForAttachment(e,t))}removeAttributeForAttachment(e,t){return this.setDocument(this.document.removeAttributeForAttachment(e,t))}breakFormattedBlock(e){let{document:t}=e,{block:n}=e,r=e.startPosition,s=[r-1,r];n.getBlockBreakPosition()===e.startLocation.offset?(n.breaksOnReturn()&&e.nextCharacter===`
`?r+=1:t=t.removeTextAtRange(s),s=[r,r]):e.nextCharacter===`
`?e.previousCharacter===`
`?s=[r-1,r+1]:(s=[r,r+1],r+=1):e.startLocation.offset-1!=0&&(r+=1);let a=new It([n.removeLastAttribute().copyWithoutText()]);return this.setDocument(t.insertDocumentAtRange(a,s)),this.setSelection(r)}getPreviousBlock(){let e=this.getLocationRange();if(e){let{index:t}=e[0];if(t>0)return this.document.getBlockAtIndex(t-1)}}getBlock(){let e=this.getLocationRange();if(e)return this.document.getBlockAtIndex(e[0].index)}getAttachmentAtRange(e){let t=this.document.getDocumentAtRange(e);if(t.toString()==="".concat("\uFFFC",`
`))return t.getAttachments()[0]}notifyDelegateOfCurrentAttributesChange(){var e,t;return(e=this.delegate)===null||e===void 0||(t=e.compositionDidChangeCurrentAttributes)===null||t===void 0?void 0:t.call(e,this.currentAttributes)}notifyDelegateOfInsertionAtRange(e){var t,n;return(t=this.delegate)===null||t===void 0||(n=t.compositionDidPerformInsertionAtRange)===null||n===void 0?void 0:n.call(t,e)}translateUTF16PositionFromOffset(e,t){let n=this.document.toUTF16String(),r=n.offsetFromUCS2Offset(e);return n.offsetToUCS2Offset(r+t)}};Ei.proxyMethod("getSelectionManager().getPointRange"),Ei.proxyMethod("getSelectionManager().setLocationRangeFromPointRange"),Ei.proxyMethod("getSelectionManager().createLocationRangeFromDOMRange"),Ei.proxyMethod("getSelectionManager().locationIsCursorTarget"),Ei.proxyMethod("getSelectionManager().selectionIsExpanded"),Ei.proxyMethod("delegate?.getSelectionManager");var ss=class extends Ge{constructor(e){super(...arguments),this.composition=e,this.undoEntries=[],this.redoEntries=[]}recordUndoEntry(e){let{context:t,consolidatable:n}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=this.undoEntries.slice(-1)[0];if(!n||!ng(r,e,t)){let s=this.createEntry({description:e,context:t});this.undoEntries.push(s),this.redoEntries=[]}}undo(){let e=this.undoEntries.pop();if(e){let t=this.createEntry(e);return this.redoEntries.push(t),this.composition.loadSnapshot(e.snapshot)}}redo(){let e=this.redoEntries.pop();if(e){let t=this.createEntry(e);return this.undoEntries.push(t),this.composition.loadSnapshot(e.snapshot)}}canUndo(){return this.undoEntries.length>0}canRedo(){return this.redoEntries.length>0}createEntry(){let{description:e,context:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return{description:e?.toString(),context:JSON.stringify(t),snapshot:this.composition.getSnapshot()}}},ng=(i,e,t)=>i?.description===e?.toString()&&i?.context===JSON.stringify(t),$o="attachmentGallery",ba=class{constructor(e){this.document=e.document,this.selectedRange=e.selectedRange}perform(){return this.removeBlockAttribute(),this.applyBlockAttribute()}getSnapshot(){return{document:this.document,selectedRange:this.selectedRange}}removeBlockAttribute(){return this.findRangesOfBlocks().map(e=>this.document=this.document.removeAttributeAtRange($o,e))}applyBlockAttribute(){let e=0;this.findRangesOfPieces().forEach(t=>{t[1]-t[0]>1&&(t[0]+=e,t[1]+=e,this.document.getCharacterAtPosition(t[1])!==`
`&&(this.document=this.document.insertBlockBreakAtRange(t[1]),t[1]<this.selectedRange[1]&&this.moveSelectedRangeForward(),t[1]++,e++),t[0]!==0&&this.document.getCharacterAtPosition(t[0]-1)!==`
`&&(this.document=this.document.insertBlockBreakAtRange(t[0]),t[0]<this.selectedRange[0]&&this.moveSelectedRangeForward(),t[0]++,e++),this.document=this.document.applyBlockAttributeAtRange($o,!0,t))})}findRangesOfBlocks(){return this.document.findRangesForBlockAttribute($o)}findRangesOfPieces(){return this.document.findRangesForTextAttribute("presentation",{withValue:"gallery"})}moveSelectedRangeForward(){this.selectedRange[0]+=1,this.selectedRange[1]+=1}},gc=function(i){let e=new ba(i);return e.perform(),e.getSnapshot()},rg=[gc],ya=class{constructor(e,t,n){this.insertFiles=this.insertFiles.bind(this),this.composition=e,this.selectionManager=t,this.element=n,this.undoManager=new ss(this.composition),this.filters=rg.slice(0)}loadDocument(e){return this.loadSnapshot({document:e,selectedRange:[0,0]})}loadHTML(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",t=Fn.parse(e,{referenceElement:this.element}).getDocument();return this.loadDocument(t)}loadJSON(e){let{document:t,selectedRange:n}=e;return t=It.fromJSON(t),this.loadSnapshot({document:t,selectedRange:n})}loadSnapshot(e){return this.undoManager=new ss(this.composition),this.composition.loadSnapshot(e)}getDocument(){return this.composition.document}getSelectedDocument(){return this.composition.getSelectedDocument()}getSnapshot(){return this.composition.getSnapshot()}toJSON(){return this.getSnapshot()}deleteInDirection(e){return this.composition.deleteInDirection(e)}insertAttachment(e){return this.composition.insertAttachment(e)}insertAttachments(e){return this.composition.insertAttachments(e)}insertDocument(e){return this.composition.insertDocument(e)}insertFile(e){return this.composition.insertFile(e)}insertFiles(e){return this.composition.insertFiles(e)}insertHTML(e){return this.composition.insertHTML(e)}insertString(e){return this.composition.insertString(e)}insertText(e){return this.composition.insertText(e)}insertLineBreak(){return this.composition.insertLineBreak()}getSelectedRange(){return this.composition.getSelectedRange()}getPosition(){return this.composition.getPosition()}getClientRectAtPosition(e){let t=this.getDocument().locationRangeFromRange([e,e+1]);return this.selectionManager.getClientRectAtLocationRange(t)}expandSelectionInDirection(e){return this.composition.expandSelectionInDirection(e)}moveCursorInDirection(e){return this.composition.moveCursorInDirection(e)}setSelectedRange(e){return this.composition.setSelectedRange(e)}activateAttribute(e){let t=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1];return this.composition.setCurrentAttribute(e,t)}attributeIsActive(e){return this.composition.hasCurrentAttribute(e)}canActivateAttribute(e){return this.composition.canSetCurrentAttribute(e)}deactivateAttribute(e){return this.composition.removeCurrentAttribute(e)}setHTMLAtributeAtPosition(e,t,n){this.composition.setHTMLAtributeAtPosition(e,t,n)}canDecreaseNestingLevel(){return this.composition.canDecreaseNestingLevel()}canIncreaseNestingLevel(){return this.composition.canIncreaseNestingLevel()}decreaseNestingLevel(){if(this.canDecreaseNestingLevel())return this.composition.decreaseNestingLevel()}increaseNestingLevel(){if(this.canIncreaseNestingLevel())return this.composition.increaseNestingLevel()}canRedo(){return this.undoManager.canRedo()}canUndo(){return this.undoManager.canUndo()}recordUndoEntry(e){let{context:t,consolidatable:n}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.undoManager.recordUndoEntry(e,{context:t,consolidatable:n})}redo(){if(this.canRedo())return this.undoManager.redo()}undo(){if(this.canUndo())return this.undoManager.undo()}},wa=class{constructor(e){this.element=e}findLocationFromContainerAndOffset(e,t){let{strict:n}=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{strict:!0},r=0,s=!1,a={index:0,offset:0},u=this.findAttachmentElementParentForNode(e);u&&(e=u.parentNode,t=Lo(u));let c=oa(this.element,{usingFilter:mc});for(;c.nextNode();){let v=c.currentNode;if(v===e&&Qr(e)){ur(v)||(a.offset+=t);break}if(v.parentNode===e){if(r++===t)break}else if(!xn(e,v)&&r>0)break;md(v,{strict:n})?(s&&a.index++,a.offset=0,s=!0):a.offset+=qo(v)}return a}findContainerAndOffsetFromLocation(e){let t,n;if(e.index===0&&e.offset===0){for(t=this.element,n=0;t.firstChild;)if(t=t.firstChild,Ro(t)){n=1;break}return[t,n]}let[r,s]=this.findNodeAndOffsetFromLocation(e);if(r){if(Qr(r))qo(r)===0?(t=r.parentNode.parentNode,n=Lo(r.parentNode),ur(r,{name:"right"})&&n++):(t=r,n=e.offset-s);else{if(t=r.parentNode,!md(r.previousSibling)&&!Ro(t))for(;r===t.lastChild&&(r=t,t=t.parentNode,!Ro(t)););n=Lo(r),e.offset!==0&&n++}return[t,n]}}findNodeAndOffsetFromLocation(e){let t,n,r=0;for(let s of this.getSignificantNodesForIndex(e.index)){let a=qo(s);if(e.offset<=r+a)if(Qr(s)){if(t=s,n=r,e.offset===n&&ur(t))break}else t||(t=s,n=r);if(r+=a,r>e.offset)break}return[t,n]}findAttachmentElementParentForNode(e){for(;e&&e!==this.element;){if(Rn(e))return e;e=e.parentNode}}getSignificantNodesForIndex(e){let t=[],n=oa(this.element,{usingFilter:sg}),r=!1;for(;n.nextNode();){let a=n.currentNode;var s;if(or(a)){if(s!=null?s++:s=0,s===e)r=!0;else if(r)break}else r&&t.push(a)}return t}},qo=function(i){return i.nodeType===Node.TEXT_NODE?ur(i)?0:i.textContent.length:bt(i)==="br"||Rn(i)?1:0},sg=function(i){return ag(i)===NodeFilter.FILTER_ACCEPT?mc(i):NodeFilter.FILTER_REJECT},ag=function(i){return Qd(i)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},mc=function(i){return Rn(i.parentNode)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},_a=class{createDOMRangeFromPoint(e){let t,{x:n,y:r}=e;if(document.caretPositionFromPoint){let{offsetNode:s,offset:a}=document.caretPositionFromPoint(n,r);return t=document.createRange(),t.setStart(s,a),t}if(document.caretRangeFromPoint)return document.caretRangeFromPoint(n,r);if(document.body.createTextRange){let s=es();try{let a=document.body.createTextRange();a.moveToPoint(n,r),a.select()}catch{}return t=es(),ac(s),t}}getClientRectsForDOMRange(e){let t=Array.from(e.getClientRects());return[t[0],t[t.length-1]]}},Ni=class extends Ge{constructor(e){super(...arguments),this.didMouseDown=this.didMouseDown.bind(this),this.selectionDidChange=this.selectionDidChange.bind(this),this.element=e,this.locationMapper=new wa(this.element),this.pointMapper=new _a,this.lockCount=0,Ke("mousedown",{onElement:this.element,withCallback:this.didMouseDown})}getLocationRange(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return e.strict===!1?this.createLocationRangeFromDOMRange(es()):e.ignoreLock?this.currentLocationRange:this.lockedLocationRange?this.lockedLocationRange:this.currentLocationRange}setLocationRange(e){if(this.lockedLocationRange)return;e=Ie(e);let t=this.createDOMRangeFromLocationRange(e);t&&(ac(t),this.updateCurrentLocationRange(e))}setLocationRangeFromPointRange(e){e=Ie(e);let t=this.getLocationAtPoint(e[0]),n=this.getLocationAtPoint(e[1]);this.setLocationRange([t,n])}getClientRectAtLocationRange(e){let t=this.createDOMRangeFromLocationRange(e);if(t)return this.getClientRectsForDOMRange(t)[1]}locationIsCursorTarget(e){let t=Array.from(this.findNodeAndOffsetFromLocation(e))[0];return ur(t)}lock(){this.lockCount++==0&&(this.updateCurrentLocationRange(),this.lockedLocationRange=this.getLocationRange())}unlock(){if(--this.lockCount==0){let{lockedLocationRange:e}=this;if(this.lockedLocationRange=null,e!=null)return this.setLocationRange(e)}}clearSelection(){var e;return(e=sc())===null||e===void 0?void 0:e.removeAllRanges()}selectionIsCollapsed(){var e;return((e=es())===null||e===void 0?void 0:e.collapsed)===!0}selectionIsExpanded(){return!this.selectionIsCollapsed()}createLocationRangeFromDOMRange(e,t){if(e==null||!this.domRangeWithinElement(e))return;let n=this.findLocationFromContainerAndOffset(e.startContainer,e.startOffset,t);if(!n)return;let r=e.collapsed?void 0:this.findLocationFromContainerAndOffset(e.endContainer,e.endOffset,t);return Ie([n,r])}didMouseDown(){return this.pauseTemporarily()}pauseTemporarily(){let e;this.paused=!0;let t=()=>{if(this.paused=!1,clearTimeout(n),Array.from(e).forEach(r=>{r.destroy()}),xn(document,this.element))return this.selectionDidChange()},n=setTimeout(t,200);e=["mousemove","keydown"].map(r=>Ke(r,{onElement:document,withCallback:t}))}selectionDidChange(){if(!this.paused&&!_u(this.element))return this.updateCurrentLocationRange()}updateCurrentLocationRange(e){var t,n;if((e??(e=this.createLocationRangeFromDOMRange(es())))&&!ua(e,this.currentLocationRange))return this.currentLocationRange=e,(t=this.delegate)===null||t===void 0||(n=t.locationRangeDidChange)===null||n===void 0?void 0:n.call(t,this.currentLocationRange.slice(0))}createDOMRangeFromLocationRange(e){let t=this.findContainerAndOffsetFromLocation(e[0]),n=Bi(e)?t:this.findContainerAndOffsetFromLocation(e[1])||t;if(t!=null&&n!=null){let r=document.createRange();return r.setStart(...Array.from(t||[])),r.setEnd(...Array.from(n||[])),r}}getLocationAtPoint(e){let t=this.createDOMRangeFromPoint(e);var n;if(t)return(n=this.createLocationRangeFromDOMRange(t))===null||n===void 0?void 0:n[0]}domRangeWithinElement(e){return e.collapsed?xn(this.element,e.startContainer):xn(this.element,e.startContainer)&&xn(this.element,e.endContainer)}};Ni.proxyMethod("locationMapper.findLocationFromContainerAndOffset"),Ni.proxyMethod("locationMapper.findContainerAndOffsetFromLocation"),Ni.proxyMethod("locationMapper.findNodeAndOffsetFromLocation"),Ni.proxyMethod("pointMapper.createDOMRangeFromPoint"),Ni.proxyMethod("pointMapper.getClientRectsForDOMRange");var vc=Object.freeze({__proto__:null,Attachment:un,AttachmentManager:ma,AttachmentPiece:ln,Block:Yt,Composition:Ei,Document:It,Editor:ya,HTMLParser:Fn,HTMLSanitizer:dr,LineBreakInsertion:va,LocationMapper:wa,ManagedAttachment:qe,Piece:Hi,PointMapper:_a,SelectionManager:Ni,SplittableList:hr,StringPiece:rs,Text:Ut,UndoManager:ss}),og=Object.freeze({__proto__:null,ObjectView:ji,AttachmentView:ns,BlockView:pa,DocumentView:cr,PieceView:ha,PreviewableAttachmentView:ca,TextView:fa}),{lang:Ko,css:Dn,keyNames:ug}=us,Jo=function(i){return function(){let e=i.apply(this,arguments);e.do(),this.undos||(this.undos=[]),this.undos.push(e.undo)}},ka=class extends Ge{constructor(e,t,n){let r=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{};super(...arguments),Ot(this,"makeElementMutable",Jo(()=>({do:()=>{this.element.dataset.trixMutable=!0},undo:()=>delete this.element.dataset.trixMutable}))),Ot(this,"addToolbar",Jo(()=>{let s=be({tagName:"div",className:Dn.attachmentToolbar,data:{trixMutable:!0},childNodes:be({tagName:"div",className:"trix-button-row",childNodes:be({tagName:"span",className:"trix-button-group trix-button-group--actions",childNodes:be({tagName:"button",className:"trix-button trix-button--remove",textContent:Ko.remove,attributes:{title:Ko.remove},data:{trixAction:"remove"}})})})});return this.attachment.isPreviewable()&&s.appendChild(be({tagName:"div",className:Dn.attachmentMetadataContainer,childNodes:be({tagName:"span",className:Dn.attachmentMetadata,childNodes:[be({tagName:"span",className:Dn.attachmentName,textContent:this.attachment.getFilename(),attributes:{title:this.attachment.getFilename()}}),be({tagName:"span",className:Dn.attachmentSize,textContent:this.attachment.getFormattedFilesize()})]})})),Ke("click",{onElement:s,withCallback:this.didClickToolbar}),Ke("click",{onElement:s,matchingSelector:"[data-trix-action]",withCallback:this.didClickActionButton}),Yr("trix-attachment-before-toolbar",{onElement:this.element,attributes:{toolbar:s,attachment:this.attachment}}),{do:()=>this.element.appendChild(s),undo:()=>on(s)}})),Ot(this,"installCaptionEditor",Jo(()=>{let s=be({tagName:"textarea",className:Dn.attachmentCaptionEditor,attributes:{placeholder:Ko.captionPlaceholder},data:{trixMutable:!0}});s.value=this.attachmentPiece.getCaption();let a=s.cloneNode();a.classList.add("trix-autoresize-clone"),a.tabIndex=-1;let u=function(){a.value=s.value,s.style.height=a.scrollHeight+"px"};Ke("input",{onElement:s,withCallback:u}),Ke("input",{onElement:s,withCallback:this.didInputCaption}),Ke("keydown",{onElement:s,withCallback:this.didKeyDownCaption}),Ke("change",{onElement:s,withCallback:this.didChangeCaption}),Ke("blur",{onElement:s,withCallback:this.didBlurCaption});let c=this.element.querySelector("figcaption"),v=c.cloneNode();return{do:()=>{if(c.style.display="none",v.appendChild(s),v.appendChild(a),v.classList.add("".concat(Dn.attachmentCaption,"--editing")),c.parentElement.insertBefore(v,c),u(),this.options.editCaption)return Eu(()=>s.focus())},undo(){on(v),c.style.display=null}}})),this.didClickToolbar=this.didClickToolbar.bind(this),this.didClickActionButton=this.didClickActionButton.bind(this),this.didKeyDownCaption=this.didKeyDownCaption.bind(this),this.didInputCaption=this.didInputCaption.bind(this),this.didChangeCaption=this.didChangeCaption.bind(this),this.didBlurCaption=this.didBlurCaption.bind(this),this.attachmentPiece=e,this.element=t,this.container=n,this.options=r,this.attachment=this.attachmentPiece.attachment,bt(this.element)==="a"&&(this.element=this.element.firstChild),this.install()}install(){this.makeElementMutable(),this.addToolbar(),this.attachment.isPreviewable()&&this.installCaptionEditor()}uninstall(){var e;let t=this.undos.pop();for(this.savePendingCaption();t;)t(),t=this.undos.pop();(e=this.delegate)===null||e===void 0||e.didUninstallAttachmentEditor(this)}savePendingCaption(){if(this.pendingCaption!=null){let s=this.pendingCaption;var e,t,n,r;this.pendingCaption=null,s?(e=this.delegate)===null||e===void 0||(t=e.attachmentEditorDidRequestUpdatingAttributesForAttachment)===null||t===void 0||t.call(e,{caption:s},this.attachment):(n=this.delegate)===null||n===void 0||(r=n.attachmentEditorDidRequestRemovingAttributeForAttachment)===null||r===void 0||r.call(n,"caption",this.attachment)}}didClickToolbar(e){return e.preventDefault(),e.stopPropagation()}didClickActionButton(e){var t;if(e.target.getAttribute("data-trix-action")==="remove")return(t=this.delegate)===null||t===void 0?void 0:t.attachmentEditorDidRequestRemovalOfAttachment(this.attachment)}didKeyDownCaption(e){var t,n;if(ug[e.keyCode]==="return")return e.preventDefault(),this.savePendingCaption(),(t=this.delegate)===null||t===void 0||(n=t.attachmentEditorDidRequestDeselectingAttachment)===null||n===void 0?void 0:n.call(t,this.attachment)}didInputCaption(e){this.pendingCaption=e.target.value.replace(/\s/g," ").trim()}didChangeCaption(e){return this.savePendingCaption()}didBlurCaption(e){return this.savePendingCaption()}},Aa=class extends Ge{constructor(e,t){super(...arguments),this.didFocus=this.didFocus.bind(this),this.didBlur=this.didBlur.bind(this),this.didClickAttachment=this.didClickAttachment.bind(this),this.element=e,this.composition=t,this.documentView=new cr(this.composition.document,{element:this.element}),Ke("focus",{onElement:this.element,withCallback:this.didFocus}),Ke("blur",{onElement:this.element,withCallback:this.didBlur}),Ke("click",{onElement:this.element,matchingSelector:"a[contenteditable=false]",preventDefault:!0}),Ke("mousedown",{onElement:this.element,matchingSelector:Ln,withCallback:this.didClickAttachment}),Ke("click",{onElement:this.element,matchingSelector:"a".concat(Ln),preventDefault:!0})}didFocus(e){var t;let n=()=>{var r,s;if(!this.focused)return this.focused=!0,(r=this.delegate)===null||r===void 0||(s=r.compositionControllerDidFocus)===null||s===void 0?void 0:s.call(r)};return((t=this.blurPromise)===null||t===void 0?void 0:t.then(n))||n()}didBlur(e){this.blurPromise=new Promise(t=>Eu(()=>{var n,r;return _u(this.element)||(this.focused=null,(n=this.delegate)===null||n===void 0||(r=n.compositionControllerDidBlur)===null||r===void 0||r.call(n)),this.blurPromise=null,t()}))}didClickAttachment(e,t){var n,r;let s=this.findAttachmentForElement(t),a=!!an(e.target,{matchingSelector:"figcaption"});return(n=this.delegate)===null||n===void 0||(r=n.compositionControllerDidSelectAttachment)===null||r===void 0?void 0:r.call(n,s,{editCaption:a})}getSerializableElement(){return this.isEditingAttachment()?this.documentView.shadowElement:this.element}render(){var e,t,n,r,s,a;return this.revision!==this.composition.revision&&(this.documentView.setDocument(this.composition.document),this.documentView.render(),this.revision=this.composition.revision),this.canSyncDocumentView()&&!this.documentView.isSynced()&&((n=this.delegate)===null||n===void 0||(r=n.compositionControllerWillSyncDocumentView)===null||r===void 0||r.call(n),this.documentView.sync(),(s=this.delegate)===null||s===void 0||(a=s.compositionControllerDidSyncDocumentView)===null||a===void 0||a.call(s)),(e=this.delegate)===null||e===void 0||(t=e.compositionControllerDidRender)===null||t===void 0?void 0:t.call(e)}rerenderViewForObject(e){return this.invalidateViewForObject(e),this.render()}invalidateViewForObject(e){return this.documentView.invalidateViewForObject(e)}isViewCachingEnabled(){return this.documentView.isViewCachingEnabled()}enableViewCaching(){return this.documentView.enableViewCaching()}disableViewCaching(){return this.documentView.disableViewCaching()}refreshViewCache(){return this.documentView.garbageCollectCachedViews()}isEditingAttachment(){return!!this.attachmentEditor}installAttachmentEditorForAttachment(e,t){var n;if(((n=this.attachmentEditor)===null||n===void 0?void 0:n.attachment)===e)return;let r=this.documentView.findElementForObject(e);if(!r)return;this.uninstallAttachmentEditor();let s=this.composition.document.getAttachmentPieceForAttachment(e);this.attachmentEditor=new ka(s,r,this.element,t),this.attachmentEditor.delegate=this}uninstallAttachmentEditor(){var e;return(e=this.attachmentEditor)===null||e===void 0?void 0:e.uninstall()}didUninstallAttachmentEditor(){return this.attachmentEditor=null,this.render()}attachmentEditorDidRequestUpdatingAttributesForAttachment(e,t){var n,r;return(n=this.delegate)===null||n===void 0||(r=n.compositionControllerWillUpdateAttachment)===null||r===void 0||r.call(n,t),this.composition.updateAttributesForAttachment(e,t)}attachmentEditorDidRequestRemovingAttributeForAttachment(e,t){var n,r;return(n=this.delegate)===null||n===void 0||(r=n.compositionControllerWillUpdateAttachment)===null||r===void 0||r.call(n,t),this.composition.removeAttributeForAttachment(e,t)}attachmentEditorDidRequestRemovalOfAttachment(e){var t,n;return(t=this.delegate)===null||t===void 0||(n=t.compositionControllerDidRequestRemovalOfAttachment)===null||n===void 0?void 0:n.call(t,e)}attachmentEditorDidRequestDeselectingAttachment(e){var t,n;return(t=this.delegate)===null||t===void 0||(n=t.compositionControllerDidRequestDeselectingAttachment)===null||n===void 0?void 0:n.call(t,e)}canSyncDocumentView(){return!this.isEditingAttachment()}findAttachmentForElement(e){return this.composition.document.getAttachmentById(parseInt(e.dataset.trixId,10))}},Ea=class extends Ge{},bc="data-trix-mutable",lg="[".concat(bc,"]"),dg={attributes:!0,childList:!0,characterData:!0,characterDataOldValue:!0,subtree:!0},Ca=class extends Ge{constructor(e){super(e),this.didMutate=this.didMutate.bind(this),this.element=e,this.observer=new window.MutationObserver(this.didMutate),this.start()}start(){return this.reset(),this.observer.observe(this.element,dg)}stop(){return this.observer.disconnect()}didMutate(e){var t,n;if(this.mutations.push(...Array.from(this.findSignificantMutations(e)||[])),this.mutations.length)return(t=this.delegate)===null||t===void 0||(n=t.elementDidMutate)===null||n===void 0||n.call(t,this.getMutationSummary()),this.reset()}reset(){this.mutations=[]}findSignificantMutations(e){return e.filter(t=>this.mutationIsSignificant(t))}mutationIsSignificant(e){if(this.nodeIsMutable(e.target))return!1;for(let t of Array.from(this.nodesModifiedByMutation(e)))if(this.nodeIsSignificant(t))return!0;return!1}nodeIsSignificant(e){return e!==this.element&&!this.nodeIsMutable(e)&&!Qd(e)}nodeIsMutable(e){return an(e,{matchingSelector:lg})}nodesModifiedByMutation(e){let t=[];switch(e.type){case"attributes":e.attributeName!==bc&&t.push(e.target);break;case"characterData":t.push(e.target.parentNode),t.push(e.target);break;case"childList":t.push(...Array.from(e.addedNodes||[])),t.push(...Array.from(e.removedNodes||[]))}return t}getMutationSummary(){return this.getTextMutationSummary()}getTextMutationSummary(){let{additions:e,deletions:t}=this.getTextChangesFromCharacterData(),n=this.getTextChangesFromChildList();Array.from(n.additions).forEach(u=>{Array.from(e).includes(u)||e.push(u)}),t.push(...Array.from(n.deletions||[]));let r={},s=e.join("");s&&(r.textAdded=s);let a=t.join("");return a&&(r.textDeleted=a),r}getMutationsByType(e){return Array.from(this.mutations).filter(t=>t.type===e)}getTextChangesFromChildList(){let e,t,n=[],r=[];Array.from(this.getMutationsByType("childList")).forEach(u=>{n.push(...Array.from(u.addedNodes||[])),r.push(...Array.from(u.removedNodes||[]))}),n.length===0&&r.length===1&&or(r[0])?(e=[],t=[`
`]):(e=fu(n),t=fu(r));let s=e.filter((u,c)=>u!==t[c]).map(Xr),a=t.filter((u,c)=>u!==e[c]).map(Xr);return{additions:s,deletions:a}}getTextChangesFromCharacterData(){let e,t,n=this.getMutationsByType("characterData");if(n.length){let r=n[0],s=n[n.length-1],a=function(u,c){let v,k;return u=Mn.box(u),(c=Mn.box(c)).length<u.length?[k,v]=kd(u,c):[v,k]=kd(c,u),{added:v,removed:k}}(Xr(r.oldValue),Xr(s.target.data));e=a.added,t=a.removed}return{additions:e?[e]:[],deletions:t?[t]:[]}}},fu=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],e=[];for(let t of Array.from(i))switch(t.nodeType){case Node.TEXT_NODE:e.push(t.data);break;case Node.ELEMENT_NODE:bt(t)==="br"?e.push(`
`):e.push(...Array.from(fu(t.childNodes)||[]))}return e},Sa=class extends lr{constructor(e){super(...arguments),this.file=e}perform(e){let t=new FileReader;return t.onerror=()=>e(!1),t.onload=()=>{t.onerror=null;try{t.abort()}catch{}return e(!0,this.file)},t.readAsArrayBuffer(this.file)}},pu=class{constructor(e){this.element=e}shouldIgnore(e){return!!os.samsungAndroid&&(this.previousEvent=this.event,this.event=e,this.checkSamsungKeyboardBuggyModeStart(),this.checkSamsungKeyboardBuggyModeEnd(),this.buggyMode)}checkSamsungKeyboardBuggyModeStart(){this.insertingLongTextAfterUnidentifiedChar()&&cg(this.element.innerText,this.event.data)&&(this.buggyMode=!0,this.event.preventDefault())}checkSamsungKeyboardBuggyModeEnd(){this.buggyMode&&this.event.inputType!=="insertText"&&(this.buggyMode=!1)}insertingLongTextAfterUnidentifiedChar(){var e;return this.isBeforeInputInsertText()&&this.previousEventWasUnidentifiedKeydown()&&((e=this.event.data)===null||e===void 0?void 0:e.length)>50}isBeforeInputInsertText(){return this.event.type==="beforeinput"&&this.event.inputType==="insertText"}previousEventWasUnidentifiedKeydown(){var e,t;return((e=this.previousEvent)===null||e===void 0?void 0:e.type)==="keydown"&&((t=this.previousEvent)===null||t===void 0?void 0:t.key)==="Unidentified"}},cg=(i,e)=>Wd(i)===Wd(e),hg=new RegExp("(".concat("\uFFFC","|").concat(xa,"|").concat(sn,"|\\s)+"),"g"),Wd=i=>i.replace(hg," ").trim(),fr=class extends Ge{constructor(e){super(...arguments),this.element=e,this.mutationObserver=new Ca(this.element),this.mutationObserver.delegate=this,this.flakyKeyboardDetector=new pu(this.element);for(let t in this.constructor.events)Ke(t,{onElement:this.element,withCallback:this.handlerFor(t)})}elementDidMutate(e){}editorWillSyncDocumentView(){return this.mutationObserver.stop()}editorDidSyncDocumentView(){return this.mutationObserver.start()}requestRender(){var e,t;return(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidRequestRender)===null||t===void 0?void 0:t.call(e)}requestReparse(){var e,t;return(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidRequestReparse)===null||t===void 0||t.call(e),this.requestRender()}attachFiles(e){let t=Array.from(e).map(n=>new Sa(n));return Promise.all(t).then(n=>{this.handleInput(function(){var r,s;return(r=this.delegate)===null||r===void 0||r.inputControllerWillAttachFiles(),(s=this.responder)===null||s===void 0||s.insertFiles(n),this.requestRender()})})}handlerFor(e){return t=>{t.defaultPrevented||this.handleInput(()=>{if(!_u(this.element)){if(this.flakyKeyboardDetector.shouldIgnore(t))return;this.eventName=e,this.constructor.events[e].call(this,t)}})}}handleInput(e){try{var t;(t=this.delegate)===null||t===void 0||t.inputControllerWillHandleInput(),e.call(this)}finally{var n;(n=this.delegate)===null||n===void 0||n.inputControllerDidHandleInput()}}createLinkHTML(e,t){let n=document.createElement("a");return n.href=e,n.textContent=t||e,n.outerHTML}},Go;Ot(fr,"events",{});var{browser:fg,keyNames:yc}=us,pg=0,li=class extends fr{constructor(){super(...arguments),this.resetInputSummary()}setInputSummary(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};this.inputSummary.eventName=this.eventName;for(let t in e){let n=e[t];this.inputSummary[t]=n}return this.inputSummary}resetInputSummary(){this.inputSummary={}}reset(){return this.resetInputSummary(),Bn.reset()}elementDidMutate(e){var t,n;return this.isComposing()?(t=this.delegate)===null||t===void 0||(n=t.inputControllerDidAllowUnhandledInput)===null||n===void 0?void 0:n.call(t):this.handleInput(function(){return this.mutationIsSignificant(e)&&(this.mutationIsExpected(e)?this.requestRender():this.requestReparse()),this.reset()})}mutationIsExpected(e){let{textAdded:t,textDeleted:n}=e;if(this.inputSummary.preferDocument)return!0;let r=t!=null?t===this.inputSummary.textAdded:!this.inputSummary.textAdded,s=n!=null?this.inputSummary.didDelete:!this.inputSummary.didDelete,a=[`
`,` 
`].includes(t)&&!r,u=n===`
`&&!s;if(a&&!u||u&&!a){let v=this.getSelectedRange();if(v){var c;let k=a?t.replace(/\n$/,"").length||-1:t?.length||1;if((c=this.responder)!==null&&c!==void 0&&c.positionIsBlockBreak(v[1]+k))return!0}}return r&&s}mutationIsSignificant(e){var t;let n=Object.keys(e).length>0,r=((t=this.compositionInput)===null||t===void 0?void 0:t.getEndData())==="";return n||!r}getCompositionInput(){if(this.isComposing())return this.compositionInput;this.compositionInput=new Ai(this)}isComposing(){return this.compositionInput&&!this.compositionInput.isEnded()}deleteInDirection(e,t){var n;return((n=this.responder)===null||n===void 0?void 0:n.deleteInDirection(e))!==!1?this.setInputSummary({didDelete:!0}):t?(t.preventDefault(),this.requestRender()):void 0}serializeSelectionToDataTransfer(e){var t;if(!function(r){if(r==null||!r.setData)return!1;for(let s in yd){let a=yd[s];try{if(r.setData(s,a),!r.getData(s)===a)return!1}catch{return!1}}return!0}(e))return;let n=(t=this.responder)===null||t===void 0?void 0:t.getSelectedDocument().toSerializableDocument();return e.setData("application/x-trix-document",JSON.stringify(n)),e.setData("text/html",cr.render(n).innerHTML),e.setData("text/plain",n.toString().replace(/\n$/,"")),!0}canAcceptDataTransfer(e){let t={};return Array.from(e?.types||[]).forEach(n=>{t[n]=!0}),t.Files||t["application/x-trix-document"]||t["text/html"]||t["text/plain"]}getPastedHTMLUsingHiddenElement(e){let t=this.getSelectedRange(),n={position:"absolute",left:"".concat(window.pageXOffset,"px"),top:"".concat(window.pageYOffset,"px"),opacity:0},r=be({style:n,tagName:"div",editable:!0});return document.body.appendChild(r),r.focus(),requestAnimationFrame(()=>{let s=r.innerHTML;return on(r),this.setSelectedRange(t),e(s)})}};Ot(li,"events",{keydown(i){this.isComposing()||this.resetInputSummary(),this.inputSummary.didInput=!0;let e=yc[i.keyCode];if(e){var t;let r=this.keys;["ctrl","alt","shift","meta"].forEach(s=>{var a;i["".concat(s,"Key")]&&(s==="ctrl"&&(s="control"),r=(a=r)===null||a===void 0?void 0:a[s])}),((t=r)===null||t===void 0?void 0:t[e])!=null&&(this.setInputSummary({keyName:e}),Bn.reset(),r[e].call(this,i))}if(nc(i)){let r=String.fromCharCode(i.keyCode).toLowerCase();if(r){var n;let s=["alt","shift"].map(a=>{if(i["".concat(a,"Key")])return a}).filter(a=>a);s.push(r),(n=this.delegate)!==null&&n!==void 0&&n.inputControllerDidReceiveKeyboardCommand(s)&&i.preventDefault()}}},keypress(i){if(this.inputSummary.eventName!=null||i.metaKey||i.ctrlKey&&!i.altKey)return;let e=vg(i);var t,n;return e?((t=this.delegate)===null||t===void 0||t.inputControllerWillPerformTyping(),(n=this.responder)===null||n===void 0||n.insertString(e),this.setInputSummary({textAdded:e,didDelete:this.selectionIsExpanded()})):void 0},textInput(i){let{data:e}=i,{textAdded:t}=this.inputSummary;if(t&&t!==e&&t.toUpperCase()===e){var n;let r=this.getSelectedRange();return this.setSelectedRange([r[0],r[1]+t.length]),(n=this.responder)===null||n===void 0||n.insertString(e),this.setInputSummary({textAdded:e}),this.setSelectedRange(r)}},dragenter(i){i.preventDefault()},dragstart(i){var e,t;return this.serializeSelectionToDataTransfer(i.dataTransfer),this.draggedRange=this.getSelectedRange(),(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidStartDrag)===null||t===void 0?void 0:t.call(e)},dragover(i){if(this.draggedRange||this.canAcceptDataTransfer(i.dataTransfer)){i.preventDefault();let n={x:i.clientX,y:i.clientY};var e,t;if(!pr(n,this.draggingPoint))return this.draggingPoint=n,(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidReceiveDragOverPoint)===null||t===void 0?void 0:t.call(e,this.draggingPoint)}},dragend(i){var e,t;(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidCancelDrag)===null||t===void 0||t.call(e),this.draggedRange=null,this.draggingPoint=null},drop(i){var e,t;i.preventDefault();let n=(e=i.dataTransfer)===null||e===void 0?void 0:e.files,r=i.dataTransfer.getData("application/x-trix-document"),s={x:i.clientX,y:i.clientY};if((t=this.responder)===null||t===void 0||t.setLocationRangeFromPointRange(s),n!=null&&n.length)this.attachFiles(n);else if(this.draggedRange){var a,u;(a=this.delegate)===null||a===void 0||a.inputControllerWillMoveText(),(u=this.responder)===null||u===void 0||u.moveTextFromRange(this.draggedRange),this.draggedRange=null,this.requestRender()}else if(r){var c;let v=It.fromJSONString(r);(c=this.responder)===null||c===void 0||c.insertDocument(v),this.requestRender()}this.draggedRange=null,this.draggingPoint=null},cut(i){var e,t;if((e=this.responder)!==null&&e!==void 0&&e.selectionIsExpanded()&&(this.serializeSelectionToDataTransfer(i.clipboardData)&&i.preventDefault(),(t=this.delegate)===null||t===void 0||t.inputControllerWillCutText(),this.deleteInDirection("backward"),i.defaultPrevented))return this.requestRender()},copy(i){var e;(e=this.responder)!==null&&e!==void 0&&e.selectionIsExpanded()&&this.serializeSelectionToDataTransfer(i.clipboardData)&&i.preventDefault()},paste(i){let e=i.clipboardData||i.testClipboardData,t={clipboard:e};if(!e||bg(i))return void this.getPastedHTMLUsingHiddenElement(h=>{var f,_,C;return t.type="text/html",t.html=h,(f=this.delegate)===null||f===void 0||f.inputControllerWillPaste(t),(_=this.responder)===null||_===void 0||_.insertHTML(t.html),this.requestRender(),(C=this.delegate)===null||C===void 0?void 0:C.inputControllerDidPaste(t)});let n=e.getData("URL"),r=e.getData("text/html"),s=e.getData("public.url-name");if(n){var a,u,c;let h;t.type="text/html",h=s?Su(s).trim():n,t.html=this.createLinkHTML(n,h),(a=this.delegate)===null||a===void 0||a.inputControllerWillPaste(t),this.setInputSummary({textAdded:h,didDelete:this.selectionIsExpanded()}),(u=this.responder)===null||u===void 0||u.insertHTML(t.html),this.requestRender(),(c=this.delegate)===null||c===void 0||c.inputControllerDidPaste(t)}else if(ic(e)){var v,k,A;t.type="text/plain",t.string=e.getData("text/plain"),(v=this.delegate)===null||v===void 0||v.inputControllerWillPaste(t),this.setInputSummary({textAdded:t.string,didDelete:this.selectionIsExpanded()}),(k=this.responder)===null||k===void 0||k.insertString(t.string),this.requestRender(),(A=this.delegate)===null||A===void 0||A.inputControllerDidPaste(t)}else if(r){var N,y,d;t.type="text/html",t.html=r,(N=this.delegate)===null||N===void 0||N.inputControllerWillPaste(t),(y=this.responder)===null||y===void 0||y.insertHTML(t.html),this.requestRender(),(d=this.delegate)===null||d===void 0||d.inputControllerDidPaste(t)}else if(Array.from(e.types).includes("Files")){var g,b;let h=(g=e.items)===null||g===void 0||(g=g[0])===null||g===void 0||(b=g.getAsFile)===null||b===void 0?void 0:b.call(g);if(h){var E,P,o;let f=gg(h);!h.name&&f&&(h.name="pasted-file-".concat(++pg,".").concat(f)),t.type="File",t.file=h,(E=this.delegate)===null||E===void 0||E.inputControllerWillAttachFiles(),(P=this.responder)===null||P===void 0||P.insertFile(t.file),this.requestRender(),(o=this.delegate)===null||o===void 0||o.inputControllerDidPaste(t)}}i.preventDefault()},compositionstart(i){return this.getCompositionInput().start(i.data)},compositionupdate(i){return this.getCompositionInput().update(i.data)},compositionend(i){return this.getCompositionInput().end(i.data)},beforeinput(i){this.inputSummary.didInput=!0},input(i){return this.inputSummary.didInput=!0,i.stopPropagation()}}),Ot(li,"keys",{backspace(i){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("backward",i)},delete(i){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("forward",i)},return(i){var e,t;return this.setInputSummary({preferDocument:!0}),(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0?void 0:t.insertLineBreak()},tab(i){var e,t;(e=this.responder)!==null&&e!==void 0&&e.canIncreaseNestingLevel()&&((t=this.responder)===null||t===void 0||t.increaseNestingLevel(),this.requestRender(),i.preventDefault())},left(i){var e;if(this.selectionIsInCursorTarget())return i.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("backward")},right(i){var e;if(this.selectionIsInCursorTarget())return i.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("forward")},control:{d(i){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("forward",i)},h(i){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("backward",i)},o(i){var e,t;return i.preventDefault(),(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0||t.insertString(`
`,{updatePosition:!1}),this.requestRender()}},shift:{return(i){var e,t;(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0||t.insertString(`
`),this.requestRender(),i.preventDefault()},tab(i){var e,t;(e=this.responder)!==null&&e!==void 0&&e.canDecreaseNestingLevel()&&((t=this.responder)===null||t===void 0||t.decreaseNestingLevel(),this.requestRender(),i.preventDefault())},left(i){if(this.selectionIsInCursorTarget())return i.preventDefault(),this.expandSelectionInDirection("backward")},right(i){if(this.selectionIsInCursorTarget())return i.preventDefault(),this.expandSelectionInDirection("forward")}},alt:{backspace(i){var e;return this.setInputSummary({preferDocument:!1}),(e=this.delegate)===null||e===void 0?void 0:e.inputControllerWillPerformTyping()}},meta:{backspace(i){var e;return this.setInputSummary({preferDocument:!1}),(e=this.delegate)===null||e===void 0?void 0:e.inputControllerWillPerformTyping()}}}),li.proxyMethod("responder?.getSelectedRange"),li.proxyMethod("responder?.setSelectedRange"),li.proxyMethod("responder?.expandSelectionInDirection"),li.proxyMethod("responder?.selectionIsInCursorTarget"),li.proxyMethod("responder?.selectionIsExpanded");var gg=i=>{var e;return(e=i.type)===null||e===void 0||(e=e.match(/\/(\w+)$/))===null||e===void 0?void 0:e[1]},mg=!((Go=" ".codePointAt)===null||Go===void 0||!Go.call(" ",0)),vg=function(i){if(i.key&&mg&&i.key.codePointAt(0)===i.keyCode)return i.key;{let e;if(i.which===null?e=i.keyCode:i.which!==0&&i.charCode!==0&&(e=i.charCode),e!=null&&yc[e]!=="escape")return Mn.fromCodepoints([e]).toString()}},bg=function(i){let e=i.clipboardData;if(e){if(e.types.includes("text/html")){for(let t of e.types){let n=/^CorePasteboardFlavorType/.test(t),r=/^dyn\./.test(t)&&e.getData(t);if(n||r)return!0}return!1}{let t=e.types.includes("com.apple.webarchive"),n=e.types.includes("com.apple.flat-rtfd");return t||n}}},Ai=class extends Ge{constructor(e){super(...arguments),this.inputController=e,this.responder=this.inputController.responder,this.delegate=this.inputController.delegate,this.inputSummary=this.inputController.inputSummary,this.data={}}start(e){if(this.data.start=e,this.isSignificant()){var t,n;this.inputSummary.eventName==="keypress"&&this.inputSummary.textAdded&&((n=this.responder)===null||n===void 0||n.deleteInDirection("left")),this.selectionIsExpanded()||(this.insertPlaceholder(),this.requestRender()),this.range=(t=this.responder)===null||t===void 0?void 0:t.getSelectedRange()}}update(e){if(this.data.update=e,this.isSignificant()){let t=this.selectPlaceholder();t&&(this.forgetPlaceholder(),this.range=t)}}end(e){return this.data.end=e,this.isSignificant()?(this.forgetPlaceholder(),this.canApplyToDocument()?(this.setInputSummary({preferDocument:!0,didInput:!1}),(t=this.delegate)===null||t===void 0||t.inputControllerWillPerformTyping(),(n=this.responder)===null||n===void 0||n.setSelectedRange(this.range),(r=this.responder)===null||r===void 0||r.insertString(this.data.end),(s=this.responder)===null||s===void 0?void 0:s.setSelectedRange(this.range[0]+this.data.end.length)):this.data.start!=null||this.data.update!=null?(this.requestReparse(),this.inputController.reset()):void 0):this.inputController.reset();var t,n,r,s}getEndData(){return this.data.end}isEnded(){return this.getEndData()!=null}isSignificant(){return!fg.composesExistingText||this.inputSummary.didInput}canApplyToDocument(){var e,t;return((e=this.data.start)===null||e===void 0?void 0:e.length)===0&&((t=this.data.end)===null||t===void 0?void 0:t.length)>0&&this.range}};Ai.proxyMethod("inputController.setInputSummary"),Ai.proxyMethod("inputController.requestRender"),Ai.proxyMethod("inputController.requestReparse"),Ai.proxyMethod("responder?.selectionIsExpanded"),Ai.proxyMethod("responder?.insertPlaceholder"),Ai.proxyMethod("responder?.selectPlaceholder"),Ai.proxyMethod("responder?.forgetPlaceholder");var Pn=class extends fr{constructor(){super(...arguments),this.render=this.render.bind(this)}elementDidMutate(){return this.scheduledRender?this.composing?(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidAllowUnhandledInput)===null||t===void 0?void 0:t.call(e):void 0:this.reparse();var e,t}scheduleRender(){return this.scheduledRender?this.scheduledRender:this.scheduledRender=requestAnimationFrame(this.render)}render(){var e,t;cancelAnimationFrame(this.scheduledRender),this.scheduledRender=null,this.composing||(t=this.delegate)===null||t===void 0||t.render(),(e=this.afterRender)===null||e===void 0||e.call(this),this.afterRender=null}reparse(){var e;return(e=this.delegate)===null||e===void 0?void 0:e.reparse()}insertString(){var e;let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",n=arguments.length>1?arguments[1]:void 0;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.withTargetDOMRange(function(){var r;return(r=this.responder)===null||r===void 0?void 0:r.insertString(t,n)})}toggleAttributeIfSupported(e){var t;if(ru().includes(e))return(t=this.delegate)===null||t===void 0||t.inputControllerWillPerformFormatting(e),this.withTargetDOMRange(function(){var n;return(n=this.responder)===null||n===void 0?void 0:n.toggleCurrentAttribute(e)})}activateAttributeIfSupported(e,t){var n;if(ru().includes(e))return(n=this.delegate)===null||n===void 0||n.inputControllerWillPerformFormatting(e),this.withTargetDOMRange(function(){var r;return(r=this.responder)===null||r===void 0?void 0:r.setCurrentAttribute(e,t)})}deleteInDirection(e){let{recordUndoEntry:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{recordUndoEntry:!0};var n;t&&((n=this.delegate)===null||n===void 0||n.inputControllerWillPerformTyping());let r=()=>{var a;return(a=this.responder)===null||a===void 0?void 0:a.deleteInDirection(e)},s=this.getTargetDOMRange({minLength:this.composing?1:2});return s?this.withTargetDOMRange(s,r):r()}withTargetDOMRange(e,t){var n;return typeof e=="function"&&(t=e,e=this.getTargetDOMRange()),e?(n=this.responder)===null||n===void 0?void 0:n.withTargetDOMRange(e,t.bind(this)):(Bn.reset(),t.call(this))}getTargetDOMRange(){var e,t;let{minLength:n}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{minLength:0},r=(e=(t=this.event).getTargetRanges)===null||e===void 0?void 0:e.call(t);if(r&&r.length){let s=yg(r[0]);if(n===0||s.toString().length>=n)return s}}withEvent(e,t){let n;this.event=e;try{n=t.call(this)}finally{this.event=null}return n}};Ot(Pn,"events",{keydown(i){if(nc(i)){var e;let t=kg(i);(e=this.delegate)!==null&&e!==void 0&&e.inputControllerDidReceiveKeyboardCommand(t)&&i.preventDefault()}else{let t=i.key;i.altKey&&(t+="+Alt"),i.shiftKey&&(t+="+Shift");let n=this.constructor.keys[t];if(n)return this.withEvent(i,n)}},paste(i){var e;let t,n=(e=i.clipboardData)===null||e===void 0?void 0:e.getData("URL");return wc(i)?(i.preventDefault(),this.attachFiles(i.clipboardData.files)):_g(i)?(i.preventDefault(),t={type:"text/plain",string:i.clipboardData.getData("text/plain")},(r=this.delegate)===null||r===void 0||r.inputControllerWillPaste(t),(s=this.responder)===null||s===void 0||s.insertString(t.string),this.render(),(a=this.delegate)===null||a===void 0?void 0:a.inputControllerDidPaste(t)):n?(i.preventDefault(),t={type:"text/html",html:this.createLinkHTML(n)},(u=this.delegate)===null||u===void 0||u.inputControllerWillPaste(t),(c=this.responder)===null||c===void 0||c.insertHTML(t.html),this.render(),(v=this.delegate)===null||v===void 0?void 0:v.inputControllerDidPaste(t)):void 0;var r,s,a,u,c,v},beforeinput(i){let e=this.constructor.inputTypes[i.inputType],t=(n=i,!(!/iPhone|iPad/.test(navigator.userAgent)||n.inputType&&n.inputType!=="insertParagraph"));var n;e&&(this.withEvent(i,e),t||this.scheduleRender()),t&&this.render()},input(i){Bn.reset()},dragstart(i){var e,t;(e=this.responder)!==null&&e!==void 0&&e.selectionContainsAttachments()&&(i.dataTransfer.setData("application/x-trix-dragging",!0),this.dragging={range:(t=this.responder)===null||t===void 0?void 0:t.getSelectedRange(),point:Yo(i)})},dragenter(i){Xo(i)&&i.preventDefault()},dragover(i){if(this.dragging){i.preventDefault();let t=Yo(i);var e;if(!pr(t,this.dragging.point))return this.dragging.point=t,(e=this.responder)===null||e===void 0?void 0:e.setLocationRangeFromPointRange(t)}else Xo(i)&&i.preventDefault()},drop(i){var e,t;if(this.dragging)return i.preventDefault(),(e=this.delegate)===null||e===void 0||e.inputControllerWillMoveText(),(t=this.responder)===null||t===void 0||t.moveTextFromRange(this.dragging.range),this.dragging=null,this.scheduleRender();if(Xo(i)){var n;i.preventDefault();let r=Yo(i);return(n=this.responder)===null||n===void 0||n.setLocationRangeFromPointRange(r),this.attachFiles(i.dataTransfer.files)}},dragend(){var i;this.dragging&&((i=this.responder)===null||i===void 0||i.setSelectedRange(this.dragging.range),this.dragging=null)},compositionend(i){this.composing&&(this.composing=!1,os.recentAndroid||this.scheduleRender())}}),Ot(Pn,"keys",{ArrowLeft(){var i,e;if((i=this.responder)!==null&&i!==void 0&&i.shouldManageMovingCursorInDirection("backward"))return this.event.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("backward")},ArrowRight(){var i,e;if((i=this.responder)!==null&&i!==void 0&&i.shouldManageMovingCursorInDirection("forward"))return this.event.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("forward")},Backspace(){var i,e,t;if((i=this.responder)!==null&&i!==void 0&&i.shouldManageDeletingInDirection("backward"))return this.event.preventDefault(),(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0||t.deleteInDirection("backward"),this.render()},Tab(){var i,e;if((i=this.responder)!==null&&i!==void 0&&i.canIncreaseNestingLevel())return this.event.preventDefault(),(e=this.responder)===null||e===void 0||e.increaseNestingLevel(),this.render()},"Tab+Shift"(){var i,e;if((i=this.responder)!==null&&i!==void 0&&i.canDecreaseNestingLevel())return this.event.preventDefault(),(e=this.responder)===null||e===void 0||e.decreaseNestingLevel(),this.render()}}),Ot(Pn,"inputTypes",{deleteByComposition(){return this.deleteInDirection("backward",{recordUndoEntry:!1})},deleteByCut(){return this.deleteInDirection("backward")},deleteByDrag(){return this.event.preventDefault(),this.withTargetDOMRange(function(){var i;this.deleteByDragRange=(i=this.responder)===null||i===void 0?void 0:i.getSelectedRange()})},deleteCompositionText(){return this.deleteInDirection("backward",{recordUndoEntry:!1})},deleteContent(){return this.deleteInDirection("backward")},deleteContentBackward(){return this.deleteInDirection("backward")},deleteContentForward(){return this.deleteInDirection("forward")},deleteEntireSoftLine(){return this.deleteInDirection("forward")},deleteHardLineBackward(){return this.deleteInDirection("backward")},deleteHardLineForward(){return this.deleteInDirection("forward")},deleteSoftLineBackward(){return this.deleteInDirection("backward")},deleteSoftLineForward(){return this.deleteInDirection("forward")},deleteWordBackward(){return this.deleteInDirection("backward")},deleteWordForward(){return this.deleteInDirection("forward")},formatBackColor(){return this.activateAttributeIfSupported("backgroundColor",this.event.data)},formatBold(){return this.toggleAttributeIfSupported("bold")},formatFontColor(){return this.activateAttributeIfSupported("color",this.event.data)},formatFontName(){return this.activateAttributeIfSupported("font",this.event.data)},formatIndent(){var i;if((i=this.responder)!==null&&i!==void 0&&i.canIncreaseNestingLevel())return this.withTargetDOMRange(function(){var e;return(e=this.responder)===null||e===void 0?void 0:e.increaseNestingLevel()})},formatItalic(){return this.toggleAttributeIfSupported("italic")},formatJustifyCenter(){return this.toggleAttributeIfSupported("justifyCenter")},formatJustifyFull(){return this.toggleAttributeIfSupported("justifyFull")},formatJustifyLeft(){return this.toggleAttributeIfSupported("justifyLeft")},formatJustifyRight(){return this.toggleAttributeIfSupported("justifyRight")},formatOutdent(){var i;if((i=this.responder)!==null&&i!==void 0&&i.canDecreaseNestingLevel())return this.withTargetDOMRange(function(){var e;return(e=this.responder)===null||e===void 0?void 0:e.decreaseNestingLevel()})},formatRemove(){this.withTargetDOMRange(function(){for(let t in(i=this.responder)===null||i===void 0?void 0:i.getCurrentAttributes()){var i,e;(e=this.responder)===null||e===void 0||e.removeCurrentAttribute(t)}})},formatSetBlockTextDirection(){return this.activateAttributeIfSupported("blockDir",this.event.data)},formatSetInlineTextDirection(){return this.activateAttributeIfSupported("textDir",this.event.data)},formatStrikeThrough(){return this.toggleAttributeIfSupported("strike")},formatSubscript(){return this.toggleAttributeIfSupported("sub")},formatSuperscript(){return this.toggleAttributeIfSupported("sup")},formatUnderline(){return this.toggleAttributeIfSupported("underline")},historyRedo(){var i;return(i=this.delegate)===null||i===void 0?void 0:i.inputControllerWillPerformRedo()},historyUndo(){var i;return(i=this.delegate)===null||i===void 0?void 0:i.inputControllerWillPerformUndo()},insertCompositionText(){return this.composing=!0,this.insertString(this.event.data)},insertFromComposition(){return this.composing=!1,this.insertString(this.event.data)},insertFromDrop(){let i=this.deleteByDragRange;var e;if(i)return this.deleteByDragRange=null,(e=this.delegate)===null||e===void 0||e.inputControllerWillMoveText(),this.withTargetDOMRange(function(){var t;return(t=this.responder)===null||t===void 0?void 0:t.moveTextFromRange(i)})},insertFromPaste(){let{dataTransfer:i}=this.event,e={dataTransfer:i},t=i.getData("URL"),n=i.getData("text/html");if(t){var r;let c;this.event.preventDefault(),e.type="text/html";let v=i.getData("public.url-name");c=v?Su(v).trim():t,e.html=this.createLinkHTML(t,c),(r=this.delegate)===null||r===void 0||r.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var k;return(k=this.responder)===null||k===void 0?void 0:k.insertHTML(e.html)}),this.afterRender=()=>{var k;return(k=this.delegate)===null||k===void 0?void 0:k.inputControllerDidPaste(e)}}else if(ic(i)){var s;e.type="text/plain",e.string=i.getData("text/plain"),(s=this.delegate)===null||s===void 0||s.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var c;return(c=this.responder)===null||c===void 0?void 0:c.insertString(e.string)}),this.afterRender=()=>{var c;return(c=this.delegate)===null||c===void 0?void 0:c.inputControllerDidPaste(e)}}else if(wg(this.event)){var a;e.type="File",e.file=i.files[0],(a=this.delegate)===null||a===void 0||a.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var c;return(c=this.responder)===null||c===void 0?void 0:c.insertFile(e.file)}),this.afterRender=()=>{var c;return(c=this.delegate)===null||c===void 0?void 0:c.inputControllerDidPaste(e)}}else if(n){var u;this.event.preventDefault(),e.type="text/html",e.html=n,(u=this.delegate)===null||u===void 0||u.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var c;return(c=this.responder)===null||c===void 0?void 0:c.insertHTML(e.html)}),this.afterRender=()=>{var c;return(c=this.delegate)===null||c===void 0?void 0:c.inputControllerDidPaste(e)}}},insertFromYank(){return this.insertString(this.event.data)},insertLineBreak(){return this.insertString(`
`)},insertLink(){return this.activateAttributeIfSupported("href",this.event.data)},insertOrderedList(){return this.toggleAttributeIfSupported("number")},insertParagraph(){var i;return(i=this.delegate)===null||i===void 0||i.inputControllerWillPerformTyping(),this.withTargetDOMRange(function(){var e;return(e=this.responder)===null||e===void 0?void 0:e.insertLineBreak()})},insertReplacementText(){let i=this.event.dataTransfer.getData("text/plain"),e=this.event.getTargetRanges()[0];this.withTargetDOMRange(e,()=>{this.insertString(i,{updatePosition:!1})})},insertText(){var i;return this.insertString(this.event.data||((i=this.event.dataTransfer)===null||i===void 0?void 0:i.getData("text/plain")))},insertTranspose(){return this.insertString(this.event.data)},insertUnorderedList(){return this.toggleAttributeIfSupported("bullet")}});var yg=function(i){let e=document.createRange();return e.setStart(i.startContainer,i.startOffset),e.setEnd(i.endContainer,i.endOffset),e},Xo=i=>{var e;return Array.from(((e=i.dataTransfer)===null||e===void 0?void 0:e.types)||[]).includes("Files")},wg=i=>{var e;return((e=i.dataTransfer.files)===null||e===void 0?void 0:e[0])&&!wc(i)&&!(t=>{let{dataTransfer:n}=t;return n.types.includes("Files")&&n.types.includes("text/html")&&n.getData("text/html").includes("urn:schemas-microsoft-com:office:office")})(i)},wc=function(i){let e=i.clipboardData;if(e)return Array.from(e.types).filter(t=>t.match(/file/i)).length===e.types.length&&e.files.length>=1},_g=function(i){let e=i.clipboardData;if(e)return e.types.includes("text/plain")&&e.types.length===1},kg=function(i){let e=[];return i.altKey&&e.push("alt"),i.shiftKey&&e.push("shift"),e.push(i.key),e},Yo=i=>({x:i.clientX,y:i.clientY}),gu="[data-trix-attribute]",mu="[data-trix-action]",Ag="".concat(gu,", ").concat(mu),La="[data-trix-dialog]",Eg="".concat(La,"[data-trix-active]"),Cg="".concat(La," [data-trix-method]"),$d="".concat(La," [data-trix-input]"),qd=(i,e)=>(e||(e=ar(i)),i.querySelector("[data-trix-input][name='".concat(e,"']"))),Kd=i=>i.getAttribute("data-trix-action"),ar=i=>i.getAttribute("data-trix-attribute")||i.getAttribute("data-trix-dialog-attribute"),Da=class extends Ge{constructor(e){super(e),this.didClickActionButton=this.didClickActionButton.bind(this),this.didClickAttributeButton=this.didClickAttributeButton.bind(this),this.didClickDialogButton=this.didClickDialogButton.bind(this),this.didKeyDownDialogInput=this.didKeyDownDialogInput.bind(this),this.element=e,this.attributes={},this.actions={},this.resetDialogInputs(),Ke("mousedown",{onElement:this.element,matchingSelector:mu,withCallback:this.didClickActionButton}),Ke("mousedown",{onElement:this.element,matchingSelector:gu,withCallback:this.didClickAttributeButton}),Ke("click",{onElement:this.element,matchingSelector:Ag,preventDefault:!0}),Ke("click",{onElement:this.element,matchingSelector:Cg,withCallback:this.didClickDialogButton}),Ke("keydown",{onElement:this.element,matchingSelector:$d,withCallback:this.didKeyDownDialogInput})}didClickActionButton(e,t){var n;(n=this.delegate)===null||n===void 0||n.toolbarDidClickButton(),e.preventDefault();let r=Kd(t);return this.getDialog(r)?this.toggleDialog(r):(s=this.delegate)===null||s===void 0?void 0:s.toolbarDidInvokeAction(r,t);var s}didClickAttributeButton(e,t){var n;(n=this.delegate)===null||n===void 0||n.toolbarDidClickButton(),e.preventDefault();let r=ar(t);var s;return this.getDialog(r)?this.toggleDialog(r):(s=this.delegate)===null||s===void 0||s.toolbarDidToggleAttribute(r),this.refreshAttributeButtons()}didClickDialogButton(e,t){let n=an(t,{matchingSelector:La});return this[t.getAttribute("data-trix-method")].call(this,n)}didKeyDownDialogInput(e,t){if(e.keyCode===13){e.preventDefault();let n=t.getAttribute("name"),r=this.getDialog(n);this.setAttribute(r)}if(e.keyCode===27)return e.preventDefault(),this.hideDialog()}updateActions(e){return this.actions=e,this.refreshActionButtons()}refreshActionButtons(){return this.eachActionButton((e,t)=>{e.disabled=this.actions[t]===!1})}eachActionButton(e){return Array.from(this.element.querySelectorAll(mu)).map(t=>e(t,Kd(t)))}updateAttributes(e){return this.attributes=e,this.refreshAttributeButtons()}refreshAttributeButtons(){return this.eachAttributeButton((e,t)=>(e.disabled=this.attributes[t]===!1,this.attributes[t]||this.dialogIsVisible(t)?(e.setAttribute("data-trix-active",""),e.classList.add("trix-active")):(e.removeAttribute("data-trix-active"),e.classList.remove("trix-active"))))}eachAttributeButton(e){return Array.from(this.element.querySelectorAll(gu)).map(t=>e(t,ar(t)))}applyKeyboardCommand(e){let t=JSON.stringify(e.sort());for(let n of Array.from(this.element.querySelectorAll("[data-trix-key]"))){let r=n.getAttribute("data-trix-key").split("+");if(JSON.stringify(r.sort())===t)return Yr("mousedown",{onElement:n}),!0}return!1}dialogIsVisible(e){let t=this.getDialog(e);if(t)return t.hasAttribute("data-trix-active")}toggleDialog(e){return this.dialogIsVisible(e)?this.hideDialog():this.showDialog(e)}showDialog(e){var t,n;this.hideDialog(),(t=this.delegate)===null||t===void 0||t.toolbarWillShowDialog();let r=this.getDialog(e);r.setAttribute("data-trix-active",""),r.classList.add("trix-active"),Array.from(r.querySelectorAll("input[disabled]")).forEach(a=>{a.removeAttribute("disabled")});let s=ar(r);if(s){let a=qd(r,e);a&&(a.value=this.attributes[s]||"",a.select())}return(n=this.delegate)===null||n===void 0?void 0:n.toolbarDidShowDialog(e)}setAttribute(e){var t;let n=ar(e),r=qd(e,n);return!r.willValidate||(r.setCustomValidity(""),r.checkValidity()&&this.isSafeAttribute(r))?((t=this.delegate)===null||t===void 0||t.toolbarDidUpdateAttribute(n,r.value),this.hideDialog()):(r.setCustomValidity("Invalid value"),r.setAttribute("data-trix-validate",""),r.classList.add("trix-validate"),r.focus())}isSafeAttribute(e){return!e.hasAttribute("data-trix-validate-href")||da.isValidAttribute("a","href",e.value)}removeAttribute(e){var t;let n=ar(e);return(t=this.delegate)===null||t===void 0||t.toolbarDidRemoveAttribute(n),this.hideDialog()}hideDialog(){let e=this.element.querySelector(Eg);var t;if(e)return e.removeAttribute("data-trix-active"),e.classList.remove("trix-active"),this.resetDialogInputs(),(t=this.delegate)===null||t===void 0?void 0:t.toolbarDidHideDialog((n=>n.getAttribute("data-trix-dialog"))(e))}resetDialogInputs(){Array.from(this.element.querySelectorAll($d)).forEach(e=>{e.setAttribute("disabled","disabled"),e.removeAttribute("data-trix-validate"),e.classList.remove("trix-validate")})}getDialog(e){return this.element.querySelector("[data-trix-dialog=".concat(e,"]"))}},In=class extends Ea{constructor(e){let{editorElement:t,document:n,html:r}=e;super(...arguments),this.editorElement=t,this.selectionManager=new Ni(this.editorElement),this.selectionManager.delegate=this,this.composition=new Ei,this.composition.delegate=this,this.attachmentManager=new ma(this.composition.getAttachments()),this.attachmentManager.delegate=this,this.inputController=ku.getLevel()===2?new Pn(this.editorElement):new li(this.editorElement),this.inputController.delegate=this,this.inputController.responder=this.composition,this.compositionController=new Aa(this.editorElement,this.composition),this.compositionController.delegate=this,this.toolbarController=new Da(this.editorElement.toolbarElement),this.toolbarController.delegate=this,this.editor=new ya(this.composition,this.selectionManager,this.editorElement),n?this.editor.loadDocument(n):this.editor.loadHTML(r)}registerSelectionManager(){return Bn.registerSelectionManager(this.selectionManager)}unregisterSelectionManager(){return Bn.unregisterSelectionManager(this.selectionManager)}render(){return this.compositionController.render()}reparse(){return this.composition.replaceHTML(this.editorElement.innerHTML)}compositionDidChangeDocument(e){if(this.notifyEditorElement("document-change"),!this.handlingInput)return this.render()}compositionDidChangeCurrentAttributes(e){return this.currentAttributes=e,this.toolbarController.updateAttributes(this.currentAttributes),this.updateCurrentActions(),this.notifyEditorElement("attributes-change",{attributes:this.currentAttributes})}compositionDidPerformInsertionAtRange(e){this.pasting&&(this.pastedRange=e)}compositionShouldAcceptFile(e){return this.notifyEditorElement("file-accept",{file:e})}compositionDidAddAttachment(e){let t=this.attachmentManager.manageAttachment(e);return this.notifyEditorElement("attachment-add",{attachment:t})}compositionDidEditAttachment(e){this.compositionController.rerenderViewForObject(e);let t=this.attachmentManager.manageAttachment(e);return this.notifyEditorElement("attachment-edit",{attachment:t}),this.notifyEditorElement("change")}compositionDidChangeAttachmentPreviewURL(e){return this.compositionController.invalidateViewForObject(e),this.notifyEditorElement("change")}compositionDidRemoveAttachment(e){let t=this.attachmentManager.unmanageAttachment(e);return this.notifyEditorElement("attachment-remove",{attachment:t})}compositionDidStartEditingAttachment(e,t){return this.attachmentLocationRange=this.composition.document.getLocationRangeOfAttachment(e),this.compositionController.installAttachmentEditorForAttachment(e,t),this.selectionManager.setLocationRange(this.attachmentLocationRange)}compositionDidStopEditingAttachment(e){this.compositionController.uninstallAttachmentEditor(),this.attachmentLocationRange=null}compositionDidRequestChangingSelectionToLocationRange(e){if(!this.loadingSnapshot||this.isFocused())return this.requestedLocationRange=e,this.compositionRevisionWhenLocationRangeRequested=this.composition.revision,this.handlingInput?void 0:this.render()}compositionWillLoadSnapshot(){this.loadingSnapshot=!0}compositionDidLoadSnapshot(){this.compositionController.refreshViewCache(),this.render(),this.loadingSnapshot=!1}getSelectionManager(){return this.selectionManager}attachmentManagerDidRequestRemovalOfAttachment(e){return this.removeAttachment(e)}compositionControllerWillSyncDocumentView(){return this.inputController.editorWillSyncDocumentView(),this.selectionManager.lock(),this.selectionManager.clearSelection()}compositionControllerDidSyncDocumentView(){return this.inputController.editorDidSyncDocumentView(),this.selectionManager.unlock(),this.updateCurrentActions(),this.notifyEditorElement("sync")}compositionControllerDidRender(){this.requestedLocationRange&&(this.compositionRevisionWhenLocationRangeRequested===this.composition.revision&&this.selectionManager.setLocationRange(this.requestedLocationRange),this.requestedLocationRange=null,this.compositionRevisionWhenLocationRangeRequested=null),this.renderedCompositionRevision!==this.composition.revision&&(this.runEditorFilters(),this.composition.updateCurrentAttributes(),this.notifyEditorElement("render")),this.renderedCompositionRevision=this.composition.revision}compositionControllerDidFocus(){return this.isFocusedInvisibly()&&this.setLocationRange({index:0,offset:0}),this.toolbarController.hideDialog(),this.notifyEditorElement("focus")}compositionControllerDidBlur(){return this.notifyEditorElement("blur")}compositionControllerDidSelectAttachment(e,t){return this.toolbarController.hideDialog(),this.composition.editAttachment(e,t)}compositionControllerDidRequestDeselectingAttachment(e){let t=this.attachmentLocationRange||this.composition.document.getLocationRangeOfAttachment(e);return this.selectionManager.setLocationRange(t[1])}compositionControllerWillUpdateAttachment(e){return this.editor.recordUndoEntry("Edit Attachment",{context:e.id,consolidatable:!0})}compositionControllerDidRequestRemovalOfAttachment(e){return this.removeAttachment(e)}inputControllerWillHandleInput(){this.handlingInput=!0,this.requestedRender=!1}inputControllerDidRequestRender(){this.requestedRender=!0}inputControllerDidHandleInput(){if(this.handlingInput=!1,this.requestedRender)return this.requestedRender=!1,this.render()}inputControllerDidAllowUnhandledInput(){return this.notifyEditorElement("change")}inputControllerDidRequestReparse(){return this.reparse()}inputControllerWillPerformTyping(){return this.recordTypingUndoEntry()}inputControllerWillPerformFormatting(e){return this.recordFormattingUndoEntry(e)}inputControllerWillCutText(){return this.editor.recordUndoEntry("Cut")}inputControllerWillPaste(e){return this.editor.recordUndoEntry("Paste"),this.pasting=!0,this.notifyEditorElement("before-paste",{paste:e})}inputControllerDidPaste(e){return e.range=this.pastedRange,this.pastedRange=null,this.pasting=null,this.notifyEditorElement("paste",{paste:e})}inputControllerWillMoveText(){return this.editor.recordUndoEntry("Move")}inputControllerWillAttachFiles(){return this.editor.recordUndoEntry("Drop Files")}inputControllerWillPerformUndo(){return this.editor.undo()}inputControllerWillPerformRedo(){return this.editor.redo()}inputControllerDidReceiveKeyboardCommand(e){return this.toolbarController.applyKeyboardCommand(e)}inputControllerDidStartDrag(){this.locationRangeBeforeDrag=this.selectionManager.getLocationRange()}inputControllerDidReceiveDragOverPoint(e){return this.selectionManager.setLocationRangeFromPointRange(e)}inputControllerDidCancelDrag(){this.selectionManager.setLocationRange(this.locationRangeBeforeDrag),this.locationRangeBeforeDrag=null}locationRangeDidChange(e){return this.composition.updateCurrentAttributes(),this.updateCurrentActions(),this.attachmentLocationRange&&!ua(this.attachmentLocationRange,e)&&this.composition.stopEditingAttachment(),this.notifyEditorElement("selection-change")}toolbarDidClickButton(){if(!this.getLocationRange())return this.setLocationRange({index:0,offset:0})}toolbarDidInvokeAction(e,t){return this.invokeAction(e,t)}toolbarDidToggleAttribute(e){if(this.recordFormattingUndoEntry(e),this.composition.toggleCurrentAttribute(e),this.render(),!this.selectionFrozen)return this.editorElement.focus()}toolbarDidUpdateAttribute(e,t){if(this.recordFormattingUndoEntry(e),this.composition.setCurrentAttribute(e,t),this.render(),!this.selectionFrozen)return this.editorElement.focus()}toolbarDidRemoveAttribute(e){if(this.recordFormattingUndoEntry(e),this.composition.removeCurrentAttribute(e),this.render(),!this.selectionFrozen)return this.editorElement.focus()}toolbarWillShowDialog(e){return this.composition.expandSelectionForEditing(),this.freezeSelection()}toolbarDidShowDialog(e){return this.notifyEditorElement("toolbar-dialog-show",{dialogName:e})}toolbarDidHideDialog(e){return this.thawSelection(),this.editorElement.focus(),this.notifyEditorElement("toolbar-dialog-hide",{dialogName:e})}freezeSelection(){if(!this.selectionFrozen)return this.selectionManager.lock(),this.composition.freezeSelection(),this.selectionFrozen=!0,this.render()}thawSelection(){if(this.selectionFrozen)return this.composition.thawSelection(),this.selectionManager.unlock(),this.selectionFrozen=!1,this.render()}canInvokeAction(e){return!!this.actionIsExternal(e)||!((t=this.actions[e])===null||t===void 0||(t=t.test)===null||t===void 0||!t.call(this));var t}invokeAction(e,t){return this.actionIsExternal(e)?this.notifyEditorElement("action-invoke",{actionName:e,invokingElement:t}):(n=this.actions[e])===null||n===void 0||(n=n.perform)===null||n===void 0?void 0:n.call(this);var n}actionIsExternal(e){return/^x-./.test(e)}getCurrentActions(){let e={};for(let t in this.actions)e[t]=this.canInvokeAction(t);return e}updateCurrentActions(){let e=this.getCurrentActions();if(!pr(e,this.currentActions))return this.currentActions=e,this.toolbarController.updateActions(this.currentActions),this.notifyEditorElement("actions-change",{actions:this.currentActions})}runEditorFilters(){let e=this.composition.getSnapshot();if(Array.from(this.editor.filters).forEach(r=>{let{document:s,selectedRange:a}=e;e=r.call(this.editor,e)||{},e.document||(e.document=s),e.selectedRange||(e.selectedRange=a)}),t=e,n=this.composition.getSnapshot(),!ua(t.selectedRange,n.selectedRange)||!t.document.isEqualTo(n.document))return this.composition.loadSnapshot(e);var t,n}updateInputElement(){let e=function(t,n){let r=tg[n];if(r)return r(t);throw new Error("unknown content type: ".concat(n))}(this.compositionController.getSerializableElement(),"text/html");return this.editorElement.setFormValue(e)}notifyEditorElement(e,t){switch(e){case"document-change":this.documentChangedSinceLastRender=!0;break;case"render":this.documentChangedSinceLastRender&&(this.documentChangedSinceLastRender=!1,this.notifyEditorElement("change"));break;case"change":case"attachment-add":case"attachment-edit":case"attachment-remove":this.updateInputElement()}return this.editorElement.notify(e,t)}removeAttachment(e){return this.editor.recordUndoEntry("Delete Attachment"),this.composition.removeAttachment(e),this.render()}recordFormattingUndoEntry(e){let t=Xe(e),n=this.selectionManager.getLocationRange();if(t||!Bi(n))return this.editor.recordUndoEntry("Formatting",{context:this.getUndoContext(),consolidatable:!0})}recordTypingUndoEntry(){return this.editor.recordUndoEntry("Typing",{context:this.getUndoContext(this.currentAttributes),consolidatable:!0})}getUndoContext(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return[this.getLocationContext(),this.getTimeContext(),...Array.from(t)]}getLocationContext(){let e=this.selectionManager.getLocationRange();return Bi(e)?e[0].index:e}getTimeContext(){return tu.interval>0?Math.floor(new Date().getTime()/tu.interval):0}isFocused(){var e;return this.editorElement===((e=this.editorElement.ownerDocument)===null||e===void 0?void 0:e.activeElement)}isFocusedInvisibly(){return this.isFocused()&&!this.getLocationRange()}get actions(){return this.constructor.actions}};Ot(In,"actions",{undo:{test(){return this.editor.canUndo()},perform(){return this.editor.undo()}},redo:{test(){return this.editor.canRedo()},perform(){return this.editor.redo()}},link:{test(){return this.editor.canActivateAttribute("href")}},increaseNestingLevel:{test(){return this.editor.canIncreaseNestingLevel()},perform(){return this.editor.increaseNestingLevel()&&this.render()}},decreaseNestingLevel:{test(){return this.editor.canDecreaseNestingLevel()},perform(){return this.editor.decreaseNestingLevel()&&this.render()}},attachFiles:{test:()=>!0,perform(){return ku.pickFiles(this.editor.insertFiles)}}}),In.proxyMethod("getSelectionManager().setLocationRange"),In.proxyMethod("getSelectionManager().getLocationRange");var Sg=Object.freeze({__proto__:null,AttachmentEditorController:ka,CompositionController:Aa,Controller:Ea,EditorController:In,InputController:fr,Level0InputController:li,Level2InputController:Pn,ToolbarController:Da}),Dg=Object.freeze({__proto__:null,MutationObserver:Ca,SelectionChangeObserver:la}),Tg=Object.freeze({__proto__:null,FileVerificationOperation:Sa,ImagePreloadOperation:ga});tc("trix-toolbar",`%t {
  display: block;
}

%t {
  white-space: nowrap;
}

%t [data-trix-dialog] {
  display: none;
}

%t [data-trix-dialog][data-trix-active] {
  display: block;
}

%t [data-trix-dialog] [data-trix-validate]:invalid {
  background-color: #ffdddd;
}`);var Ta=class extends HTMLElement{connectedCallback(){this.innerHTML===""&&(this.innerHTML=ec.getDefaultHTML())}},xg=0,Lg=function(i){if(!i.hasAttribute("contenteditable"))return i.setAttribute("contenteditable",""),function(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return t.times=1,Ke(e,t)}("focus",{onElement:i,withCallback:()=>Rg(i)})},Rg=function(i){return Pg(i),Ig(i)},Pg=function(i){var e,t;if((e=(t=document).queryCommandSupported)!==null&&e!==void 0&&e.call(t,"enableObjectResizing"))return document.execCommand("enableObjectResizing",!1,!1),Ke("mscontrolselect",{onElement:i,preventDefault:!0})},Ig=function(i){var e,t;if((e=(t=document).queryCommandSupported)!==null&&e!==void 0&&e.call(t,"DefaultParagraphSeparator")){let{tagName:n}=yt.default;if(["div","p"].includes(n))return document.execCommand("DefaultParagraphSeparator",!1,n)}},Jd=os.forcesObjectResizing?{display:"inline",width:"auto"}:{display:"inline-block",width:"1px"};tc("trix-editor",`%t {
    display: block;
}

%t:empty::before {
    content: attr(placeholder);
    color: graytext;
    cursor: text;
    pointer-events: none;
    white-space: pre-line;
}

%t a[contenteditable=false] {
    cursor: text;
}

%t img {
    max-width: 100%;
    height: auto;
}

%t `.concat(Ln,` figcaption textarea {
    resize: none;
}

%t `).concat(Ln,` figcaption textarea.trix-autoresize-clone {
    position: absolute;
    left: -9999px;
    max-height: 0px;
}

%t `).concat(Ln,` figcaption[data-trix-placeholder]:empty::before {
    content: attr(data-trix-placeholder);
    color: graytext;
}

%t [data-trix-cursor-target] {
    display: `).concat(Jd.display,` !important;
    width: `).concat(Jd.width,` !important;
    padding: 0 !important;
    margin: 0 !important;
    border: none !important;
}

%t [data-trix-cursor-target=left] {
    vertical-align: top !important;
    margin-left: -1px !important;
}

%t [data-trix-cursor-target=right] {
    vertical-align: bottom !important;
    margin-right: -1px !important;
}`));var Mi=new WeakMap,Gr=new WeakSet,vu=class{constructor(e){var t,n;hc(t=this,n=Gr),n.add(t),ts(this,Mi,{writable:!0,value:void 0}),this.element=e,Du(this,Mi,e.attachInternals())}connectedCallback(){ia(this,Gr,na).call(this)}disconnectedCallback(){}get labels(){return Be(this,Mi).labels}get disabled(){var e;return(e=this.element.inputElement)===null||e===void 0?void 0:e.disabled}set disabled(e){this.element.toggleAttribute("disabled",e)}get required(){return this.element.hasAttribute("required")}set required(e){this.element.toggleAttribute("required",e),ia(this,Gr,na).call(this)}get validity(){return Be(this,Mi).validity}get validationMessage(){return Be(this,Mi).validationMessage}get willValidate(){return Be(this,Mi).willValidate}setFormValue(e){ia(this,Gr,na).call(this)}checkValidity(){return Be(this,Mi).checkValidity()}reportValidity(){return Be(this,Mi).reportValidity()}setCustomValidity(e){ia(this,Gr,na).call(this,e)}};function na(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",{required:e,value:t}=this.element,n=e&&!t,r=!!i,s=be("input",{required:e}),a=i||s.validationMessage;Be(this,Mi).setValidity({valueMissing:n,customError:r},a)}var Zo=new WeakMap,Qo=new WeakMap,eu=new WeakMap,bu=class{constructor(e){ts(this,Zo,{writable:!0,value:void 0}),ts(this,Qo,{writable:!0,value:t=>{t.defaultPrevented||t.target===this.element.form&&this.element.reset()}}),ts(this,eu,{writable:!0,value:t=>{if(t.defaultPrevented||this.element.contains(t.target))return;let n=an(t.target,{matchingSelector:"label"});n&&Array.from(this.labels).includes(n)&&this.element.focus()}}),this.element=e}connectedCallback(){Du(this,Zo,function(e){if(e.hasAttribute("aria-label")||e.hasAttribute("aria-labelledby"))return;let t=function(){let n=Array.from(e.labels).map(s=>{if(!s.contains(e))return s.textContent}).filter(s=>s),r=n.join(" ");return r?e.setAttribute("aria-label",r):e.removeAttribute("aria-label")};return t(),Ke("focus",{onElement:e,withCallback:t})}(this.element)),window.addEventListener("reset",Be(this,Qo),!1),window.addEventListener("click",Be(this,eu),!1)}disconnectedCallback(){var e;(e=Be(this,Zo))===null||e===void 0||e.destroy(),window.removeEventListener("reset",Be(this,Qo),!1),window.removeEventListener("click",Be(this,eu),!1)}get labels(){let e=[];this.element.id&&this.element.ownerDocument&&e.push(...Array.from(this.element.ownerDocument.querySelectorAll("label[for='".concat(this.element.id,"']"))||[]));let t=an(this.element,{matchingSelector:"label"});return t&&[this.element,null].includes(t.control)&&e.push(t),e}get disabled(){return console.warn("This browser does not support the [disabled] attribute for trix-editor elements."),!1}set disabled(e){console.warn("This browser does not support the [disabled] attribute for trix-editor elements.")}get required(){return console.warn("This browser does not support the [required] attribute for trix-editor elements."),!1}set required(e){console.warn("This browser does not support the [required] attribute for trix-editor elements.")}get validity(){return console.warn("This browser does not support the validity property for trix-editor elements."),null}get validationMessage(){return console.warn("This browser does not support the validationMessage property for trix-editor elements."),""}get willValidate(){return console.warn("This browser does not support the willValidate property for trix-editor elements."),!1}setFormValue(e){}checkValidity(){return console.warn("This browser does not support checkValidity() for trix-editor elements."),!0}reportValidity(){return console.warn("This browser does not support reportValidity() for trix-editor elements."),!0}setCustomValidity(e){console.warn("This browser does not support setCustomValidity(validationMessage) for trix-editor elements.")}},ct=new WeakMap,as=class extends HTMLElement{constructor(){super(),ts(this,ct,{writable:!0,value:void 0}),Du(this,ct,this.constructor.formAssociated?new vu(this):new bu(this))}get trixId(){return this.hasAttribute("trix-id")?this.getAttribute("trix-id"):(this.setAttribute("trix-id",++xg),this.trixId)}get labels(){return Be(this,ct).labels}get disabled(){return Be(this,ct).disabled}set disabled(e){Be(this,ct).disabled=e}get required(){return Be(this,ct).required}set required(e){Be(this,ct).required=e}get validity(){return Be(this,ct).validity}get validationMessage(){return Be(this,ct).validationMessage}get willValidate(){return Be(this,ct).willValidate}get type(){return this.localName}get toolbarElement(){var e;if(this.hasAttribute("toolbar"))return(e=this.ownerDocument)===null||e===void 0?void 0:e.getElementById(this.getAttribute("toolbar"));if(this.parentNode){let t="trix-toolbar-".concat(this.trixId);this.setAttribute("toolbar",t);let n=be("trix-toolbar",{id:t});return this.parentNode.insertBefore(n,this),n}}get form(){var e;return(e=this.inputElement)===null||e===void 0?void 0:e.form}get inputElement(){var e;if(this.hasAttribute("input"))return(e=this.ownerDocument)===null||e===void 0?void 0:e.getElementById(this.getAttribute("input"));if(this.parentNode){let t="trix-input-".concat(this.trixId);this.setAttribute("input",t);let n=be("input",{type:"hidden",id:t});return this.parentNode.insertBefore(n,this.nextElementSibling),n}}get editor(){var e;return(e=this.editorController)===null||e===void 0?void 0:e.editor}get name(){var e;return(e=this.inputElement)===null||e===void 0?void 0:e.name}get value(){var e;return(e=this.inputElement)===null||e===void 0?void 0:e.value}set value(e){var t;this.defaultValue=e,(t=this.editor)===null||t===void 0||t.loadHTML(this.defaultValue)}notify(e,t){if(this.editorController)return Yr("trix-".concat(e),{onElement:this,attributes:t})}setFormValue(e){this.inputElement&&(this.inputElement.value=e,Be(this,ct).setFormValue(e))}connectedCallback(){this.hasAttribute("data-trix-internal")||(Lg(this),function(e){e.hasAttribute("role")||e.setAttribute("role","textbox")}(this),this.editorController||(Yr("trix-before-initialize",{onElement:this}),this.editorController=new In({editorElement:this,html:this.defaultValue=this.value}),requestAnimationFrame(()=>Yr("trix-initialize",{onElement:this}))),this.editorController.registerSelectionManager(),Be(this,ct).connectedCallback(),function(e){!document.querySelector(":focus")&&e.hasAttribute("autofocus")&&document.querySelector("[autofocus]")===e&&e.focus()}(this))}disconnectedCallback(){var e;(e=this.editorController)===null||e===void 0||e.unregisterSelectionManager(),Be(this,ct).disconnectedCallback()}checkValidity(){return Be(this,ct).checkValidity()}reportValidity(){return Be(this,ct).reportValidity()}setCustomValidity(e){Be(this,ct).setCustomValidity(e)}formDisabledCallback(e){this.inputElement&&(this.inputElement.disabled=e),this.toggleAttribute("contenteditable",!e)}formResetCallback(){this.reset()}reset(){this.value=this.defaultValue}};Ot(as,"formAssociated","ElementInternals"in window);var jn={VERSION:zf,config:us,core:ig,models:vc,views:og,controllers:Sg,observers:Dg,operations:Tg,elements:Object.freeze({__proto__:null,TrixEditorElement:as,TrixToolbarElement:Ta}),filters:Object.freeze({__proto__:null,Filter:ba,attachmentGalleryFilter:gc})};Object.assign(jn,vc),window.Trix=jn,setTimeout(function(){customElements.get("trix-toolbar")||customElements.define("trix-toolbar",Ta),customElements.get("trix-editor")||customElements.define("trix-editor",as)},0);var Og=new _c.default.Converter,Mg=new fd;jn.config.blockAttributes.heading2={tagName:"h2",terminal:!0,breakOnReturn:!0};jn.config.blockAttributes.heading3={tagName:"h3",terminal:!0,breakOnReturn:!0};jn.config.blockAttributes.heading4={tagName:"h4",terminal:!0,breakOnReturn:!0};jn.config.blockAttributes.heading5={tagName:"h5",terminal:!0,breakOnReturn:!0};var kc={mounted(){let i=this.el.getElementsByTagName("trix-editor")?.[0],e=i.editor,t=document.getElementById(i.id.replace("editor","content"));e.insertHTML(Og.makeHtml(t.value)),this.el.addEventListener("trix-change",n=>{let r=Mg.turndown(i.innerHTML);t.value=r,t.dispatchEvent(new Event("input",{bubbles:!0}))})}};var Ng=function(i,e){i.forEach(t=>{let n=new XMLHttpRequest;e(()=>n.abort()),n.onload=()=>n.status===200?t.progress(100):t.error(),n.onerror=()=>t.error(),n.upload.addEventListener("progress",s=>{if(s.lengthComputable){let a=Math.round(s.loaded/s.total*100);a<100&&t.progress(a)}});let r=t.meta.url;n.open("PUT",r,!0),n.send(t.file)})},Ac=Ng;var Bg={mounted(){sessionStorage.getItem("locale")&&this.pushEventTo(this.el,"got-locale",{locale:sessionStorage.getItem("locale")}),this.handleEvent("set-locale",({locale:i})=>sessionStorage.setItem("locale",i))}},Ec=Bg;var _m=za(Cc()),Fg={Drag:td,Markdown:kc,LocalLocaleStorage:Ec},jg=document.querySelector("meta[name='csrf-token']").getAttribute("content"),Sc=new Dl("/live",Vu,{longPollFallbackMs:2500,params:{_csrf_token:jg},uploaders:{S3:Ac},hooks:Fg});Pa.default.config({barColors:{0:"#29d"},shadowColor:"rgba(0, 0, 0, .3)"});window.addEventListener("phx:page-loading-start",i=>Pa.default.show(300));window.addEventListener("phx:page-loading-stop",i=>Pa.default.hide());Sc.connect();window.liveSocket=Sc;})();
/**
 * @license MIT
 * topbar 2.0.0, 2023-02-04
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
/*! Bundled license information:

showdown/dist/showdown.js:
  (*! showdown v 2.1.0 - 21-04-2022 *)

sortablejs/modular/sortable.esm.js:
  (**!
   * Sortable 1.15.4
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   *)

trix/dist/trix.esm.min.js:
  (*! @license DOMPurify 3.2.3 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.3/LICENSE *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vYXNzZXRzL3ZlbmRvci90b3BiYXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvb3B0aW9ucy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zaG93ZG93bi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9oZWxwZXJzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL2NvbnZlcnRlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2FuY2hvcnMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9hdXRvTGlua3MuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9ibG9ja0dhbXV0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvYmxvY2tRdW90ZXMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9jb2RlQmxvY2tzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvY29kZVNwYW5zLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvY29tcGxldGVIVE1MRG9jdW1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9kZXRhYi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2VsbGlwc2lzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvZW1vamkuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9lbmNvZGVBbXBzQW5kQW5nbGVzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvZW5jb2RlQmFja3NsYXNoRXNjYXBlcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2VuY29kZUNvZGUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9lc2NhcGVTcGVjaWFsQ2hhcnNXaXRoaW5UYWdBdHRyaWJ1dGVzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvZ2l0aHViQ29kZUJsb2Nrcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2hhc2hCbG9jay5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2hhc2hDb2RlVGFncy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2hhc2hFbGVtZW50LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvaGFzaEhUTUxCbG9ja3MuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9oYXNoSFRNTFNwYW5zLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvaGFzaFByZUNvZGVUYWdzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvaGVhZGVycy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL2hvcml6b250YWxSdWxlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvaW1hZ2VzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvaXRhbGljc0FuZEJvbGQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9saXN0cy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ldGFkYXRhLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvb3V0ZGVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL3BhcmFncmFwaHMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9ydW5FeHRlbnNpb24uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9zcGFuR2FtdXQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9zdHJpa2V0aHJvdWdoLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvc3RyaXBMaW5rRGVmaW5pdGlvbnMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy90YWJsZXMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy91bmRlcmxpbmUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy91bmVzY2FwZVNwZWNpYWxDaGFycy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9ibG9ja3F1b3RlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvbWFrZU1hcmtkb3duL2NvZGVCbG9jay5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9jb2RlU3Bhbi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9lbXBoYXNpcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9oZWFkZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vaHIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vaW1hZ2UuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vbGlua3MuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vbGlzdC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9saXN0SXRlbS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9ub2RlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvbWFrZU1hcmtkb3duL3BhcmFncmFwaC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9wcmUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vc3RyaWtldGhyb3VnaC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9zdHJvbmcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vdGFibGUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zaG93ZG93bi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vdGFibGVDZWxsLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc2hvd2Rvd24vc3JjL3N1YlBhcnNlcnMvbWFrZU1hcmtkb3duL3R4dC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3Nob3dkb3duL3NyYy9sb2FkZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9lbnVtcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvdy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tYXRoLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3VzZXJBZ2VudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNMYXlvdXRWaWV3cG9ydC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9jb250YWlucy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNUYWJsZUVsZW1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy93aXRoaW4uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldFZhcmlhdGlvbi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93U2Nyb2xsQmFyWC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Vmlld3BvcnRSZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzU2Nyb2xsUGFyZW50LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRTY3JvbGxQYXJlbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlT2Zmc2V0cy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9kZXRlY3RPdmVyZmxvdy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZmxpcC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvaGlkZS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvb2Zmc2V0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEFsdEF4aXMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvaW5kZXguanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlU2Nyb2xsLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RlYm91bmNlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlQnlOYW1lLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2NyZWF0ZVBvcHBlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9wb3BwZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLWxpdGUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvaW5kZXguanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L25vZGVfbW9kdWxlcy9mbG93Yml0ZS1kYXRlcGlja2VyL2Rpc3QvbWFpbi5janMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2FjY29yZGlvbi9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2NvbXBvbmVudHMvY2Fyb3VzZWwvaW5kZXgudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2NsaXBib2FyZC9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2NvbXBvbmVudHMvY29sbGFwc2UvaW5kZXgudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2RhdGVwaWNrZXIvaW5kZXgudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2RpYWwvaW5kZXgudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2Rpc21pc3MvaW5kZXgudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2RyYXdlci9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vaW5kZXgudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9jb21wb25lbnRzL2luZGV4LnRzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9zcmMvY29tcG9uZW50cy9pbnB1dC1jb3VudGVyL2luZGV4LnRzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9zcmMvY29tcG9uZW50cy9tb2RhbC9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2NvbXBvbmVudHMvdGFicy9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2NvbXBvbmVudHMvdG9vbHRpcC9pbmRleC50cyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovc3JjL2RvbS9ldmVudHMudHMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9mbG93Yml0ZS9kaXN0L3dlYnBhY2s6L3NyYy9kb20vaW5zdGFuY2VzLnRzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi93ZWJwYWNrL2Jvb3RzdHJhcCIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2Zsb3diaXRlL2Rpc3Qvd2VicGFjazovd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0IiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvZmxvd2JpdGUvZGlzdC93ZWJwYWNrOi9zcmMvaW5kZXgucGhvZW5peC50cyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfaHRtbC9wcml2L3N0YXRpYy9waG9lbml4X2h0bWwuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3V0aWxzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9jb25zdGFudHMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3B1c2guanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3RpbWVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9jaGFubmVsLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9hamF4LmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9sb25ncG9sbC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvcHJlc2VuY2UuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3NlcmlhbGl6ZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3NvY2tldC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9jb25zdGFudHMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZW50cnlfdXBsb2FkZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvdXRpbHMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvYnJvd3Nlci5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9kb20uanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvdXBsb2FkX2VudHJ5LmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2xpdmVfdXBsb2FkZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvYXJpYS5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9ob29rcy5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9lbGVtZW50X3JlZi5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9kb21fcG9zdF9tb3JwaF9yZXN0b3Jlci5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9ub2RlX21vZHVsZXMvbW9ycGhkb20vZGlzdC9tb3JwaGRvbS1lc20uanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZG9tX3BhdGNoLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3JlbmRlcmVkLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2pzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3ZpZXdfaG9vay5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy92aWV3LmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2xpdmVfc29ja2V0LmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2luZGV4LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9qcy9hcHAuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zb3J0YWJsZWpzL21vZHVsYXIvc29ydGFibGUuZXNtLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9qcy9ob29rcy9zb3J0YWJsZS5qcyIsICIuLi8uLi8uLi9hc3NldHMvanMvaG9va3MvbWFya2Rvd24uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90dXJuZG93bi9saWIvdHVybmRvd24uYnJvd3Nlci5lcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29uZmlnL2F0dGFjaG1lbnRzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb25maWcvYmxvY2tfYXR0cmlidXRlcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29uZmlnL2Jyb3dzZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbmZpZy9kb21wdXJpZnkuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbmZpZy9sYW5nLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb25maWcvZmlsZV9zaXplX2Zvcm1hdHRpbmcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbnN0YW50cy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL2V4dGVuZC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL2RvbS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29uZmlnL2lucHV0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb25maWcva2V5X25hbWVzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb25maWcvcGFyc2VyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb25maWcvdGV4dF9hdHRyaWJ1dGVzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb25maWcvdG9vbGJhci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29uZmlnL3VuZG8uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbmZpZy9jc3MuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvcmUvYmFzaWNfb2JqZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL3V0aWxpdGllcy91dGYxNl9zdHJpbmcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvcmUvb2JqZWN0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL2hlbHBlcnMvYXJyYXlzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL2hlbHBlcnMvYmlkaS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL2NvbmZpZy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL2N1c3RvbV9lbGVtZW50cy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL2V2ZW50cy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL2Z1bmN0aW9ucy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9oZWxwZXJzL29iamVjdHMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvcmUvaGVscGVycy9yYW5nZXMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L29ic2VydmVycy9zZWxlY3Rpb25fY2hhbmdlX29ic2VydmVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL2hlbHBlcnMvc3RyaW5ncy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9jb2xsZWN0aW9ucy9oYXNoLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL2NvbGxlY3Rpb25zL29iamVjdF9ncm91cC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29yZS9jb2xsZWN0aW9ucy9vYmplY3RfbWFwLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL2NvbGxlY3Rpb25zL2VsZW1lbnRfc3RvcmUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvcmUvdXRpbGl0aWVzL29wZXJhdGlvbi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvdmlld3Mvb2JqZWN0X3ZpZXcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9odG1sX3Nhbml0aXplci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvdmlld3MvYXR0YWNobWVudF92aWV3LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC92aWV3cy9wcmV2aWV3YWJsZV9hdHRhY2htZW50X3ZpZXcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L3ZpZXdzL3BpZWNlX3ZpZXcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L3ZpZXdzL3RleHRfdmlldy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvdmlld3MvYmxvY2tfdmlldy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvdmlld3MvZG9jdW1lbnRfdmlldy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvbW9kZWxzL3BpZWNlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9vcGVyYXRpb25zL2ltYWdlX3ByZWxvYWRfb3BlcmF0aW9uLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvYXR0YWNobWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvbW9kZWxzL2F0dGFjaG1lbnRfcGllY2UuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9zdHJpbmdfcGllY2UuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9zcGxpdHRhYmxlX2xpc3QuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy90ZXh0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvYmxvY2suanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9kb2N1bWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvbW9kZWxzL2h0bWxfcGFyc2VyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb3JlL3NlcmlhbGl6YXRpb24uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9tYW5hZ2VkX2F0dGFjaG1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9hdHRhY2htZW50X21hbmFnZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9saW5lX2JyZWFrX2luc2VydGlvbi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvbW9kZWxzL2NvbXBvc2l0aW9uLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvdW5kb19tYW5hZ2VyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9maWx0ZXJzL2ZpbHRlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvZmlsdGVycy9hdHRhY2htZW50X2dhbGxlcnlfZmlsdGVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvZWRpdG9yLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvbG9jYXRpb25fbWFwcGVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvcG9pbnRfbWFwcGVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9tb2RlbHMvc2VsZWN0aW9uX21hbmFnZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbnRyb2xsZXJzL2F0dGFjaG1lbnRfZWRpdG9yX2NvbnRyb2xsZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbnRyb2xsZXJzL2NvbXBvc2l0aW9uX2NvbnRyb2xsZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L29ic2VydmVycy9tdXRhdGlvbl9vYnNlcnZlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvb3BlcmF0aW9ucy9maWxlX3ZlcmlmaWNhdGlvbl9vcGVyYXRpb24uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L21vZGVscy9mbGFreV9hbmRyb2lkX2tleWJvYXJkX2RldGVjdG9yLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb250cm9sbGVycy9pbnB1dF9jb250cm9sbGVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb250cm9sbGVycy9sZXZlbF8wX2lucHV0X2NvbnRyb2xsZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2NvbnRyb2xsZXJzL2xldmVsXzJfaW5wdXRfY29udHJvbGxlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvY29udHJvbGxlcnMvdG9vbGJhcl9jb250cm9sbGVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvdHJpeC9zcmMvdHJpeC9jb250cm9sbGVycy9lZGl0b3JfY29udHJvbGxlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3RyaXgvc3JjL3RyaXgvZWxlbWVudHMvdHJpeF90b29sYmFyX2VsZW1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L2VsZW1lbnRzL3RyaXhfZWRpdG9yX2VsZW1lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy90cml4L3NyYy90cml4L3RyaXguanMiLCAiLi4vLi4vLi4vYXNzZXRzL2pzL3VwbG9hZGVycy9zMy5qcyIsICIuLi8uLi8uLi9hc3NldHMvanMvaG9va3MvbG9jYWxfbG9jYWxlX3N0b3JhZ2UuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qKlxuICogQGxpY2Vuc2UgTUlUXG4gKiB0b3BiYXIgMi4wLjAsIDIwMjMtMDItMDRcbiAqIGh0dHBzOi8vYnV1bmd1eWVuLmdpdGh1Yi5pby90b3BiYXJcbiAqIENvcHlyaWdodCAoYykgMjAyMSBCdXUgTmd1eWVuXG4gKi9cbihmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9wYXVsaXJpc2gvMTU3OTY3MVxuICAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgdmFyIHZlbmRvcnMgPSBbXCJtc1wiLCBcIm1velwiLCBcIndlYmtpdFwiLCBcIm9cIl07XG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKyt4KSB7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID1cbiAgICAgICAgd2luZG93W3ZlbmRvcnNbeF0gKyBcIlJlcXVlc3RBbmltYXRpb25GcmFtZVwiXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9XG4gICAgICAgIHdpbmRvd1t2ZW5kb3JzW3hdICsgXCJDYW5jZWxBbmltYXRpb25GcmFtZVwiXSB8fFxuICAgICAgICB3aW5kb3dbdmVuZG9yc1t4XSArIFwiQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJdO1xuICAgIH1cbiAgICBpZiAoIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpXG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgdGltZVRvQ2FsbCA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnJUaW1lIC0gbGFzdFRpbWUpKTtcbiAgICAgICAgdmFyIGlkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhbGxiYWNrKGN1cnJUaW1lICsgdGltZVRvQ2FsbCk7XG4gICAgICAgIH0sIHRpbWVUb0NhbGwpO1xuICAgICAgICBsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgfTtcbiAgICBpZiAoIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSlcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgICAgfTtcbiAgfSkoKTtcblxuICB2YXIgY2FudmFzLFxuICAgIGN1cnJlbnRQcm9ncmVzcyxcbiAgICBzaG93aW5nLFxuICAgIHByb2dyZXNzVGltZXJJZCA9IG51bGwsXG4gICAgZmFkZVRpbWVySWQgPSBudWxsLFxuICAgIGRlbGF5VGltZXJJZCA9IG51bGwsXG4gICAgYWRkRXZlbnQgPSBmdW5jdGlvbiAoZWxlbSwgdHlwZSwgaGFuZGxlcikge1xuICAgICAgaWYgKGVsZW0uYWRkRXZlbnRMaXN0ZW5lcikgZWxlbS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICAgIGVsc2UgaWYgKGVsZW0uYXR0YWNoRXZlbnQpIGVsZW0uYXR0YWNoRXZlbnQoXCJvblwiICsgdHlwZSwgaGFuZGxlcik7XG4gICAgICBlbHNlIGVsZW1bXCJvblwiICsgdHlwZV0gPSBoYW5kbGVyO1xuICAgIH0sXG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIGF1dG9SdW46IHRydWUsXG4gICAgICBiYXJUaGlja25lc3M6IDMsXG4gICAgICBiYXJDb2xvcnM6IHtcbiAgICAgICAgMDogXCJyZ2JhKDI2LCAgMTg4LCAxNTYsIC45KVwiLFxuICAgICAgICBcIi4yNVwiOiBcInJnYmEoNTIsICAxNTIsIDIxOSwgLjkpXCIsXG4gICAgICAgIFwiLjUwXCI6IFwicmdiYSgyNDEsIDE5NiwgMTUsICAuOSlcIixcbiAgICAgICAgXCIuNzVcIjogXCJyZ2JhKDIzMCwgMTI2LCAzNCwgIC45KVwiLFxuICAgICAgICBcIjEuMFwiOiBcInJnYmEoMjExLCA4NCwgIDAsICAgLjkpXCIsXG4gICAgICB9LFxuICAgICAgc2hhZG93Qmx1cjogMTAsXG4gICAgICBzaGFkb3dDb2xvcjogXCJyZ2JhKDAsICAgMCwgICAwLCAgIC42KVwiLFxuICAgICAgY2xhc3NOYW1lOiBudWxsLFxuICAgIH0sXG4gICAgcmVwYWludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzICogNTsgLy8gbmVlZCBzcGFjZSBmb3Igc2hhZG93XG5cbiAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgY3R4LnNoYWRvd0JsdXIgPSBvcHRpb25zLnNoYWRvd0JsdXI7XG4gICAgICBjdHguc2hhZG93Q29sb3IgPSBvcHRpb25zLnNoYWRvd0NvbG9yO1xuXG4gICAgICB2YXIgbGluZUdyYWRpZW50ID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIDAsIGNhbnZhcy53aWR0aCwgMCk7XG4gICAgICBmb3IgKHZhciBzdG9wIGluIG9wdGlvbnMuYmFyQ29sb3JzKVxuICAgICAgICBsaW5lR3JhZGllbnQuYWRkQ29sb3JTdG9wKHN0b3AsIG9wdGlvbnMuYmFyQ29sb3JzW3N0b3BdKTtcbiAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRpb25zLmJhclRoaWNrbmVzcztcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8oMCwgb3B0aW9ucy5iYXJUaGlja25lc3MgLyAyKTtcbiAgICAgIGN0eC5saW5lVG8oXG4gICAgICAgIE1hdGguY2VpbChjdXJyZW50UHJvZ3Jlc3MgKiBjYW52YXMud2lkdGgpLFxuICAgICAgICBvcHRpb25zLmJhclRoaWNrbmVzcyAvIDJcbiAgICAgICk7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsaW5lR3JhZGllbnQ7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfSxcbiAgICBjcmVhdGVDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgdmFyIHN0eWxlID0gY2FudmFzLnN0eWxlO1xuICAgICAgc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gICAgICBzdHlsZS50b3AgPSBzdHlsZS5sZWZ0ID0gc3R5bGUucmlnaHQgPSBzdHlsZS5tYXJnaW4gPSBzdHlsZS5wYWRkaW5nID0gMDtcbiAgICAgIHN0eWxlLnpJbmRleCA9IDEwMDAwMTtcbiAgICAgIHN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIGlmIChvcHRpb25zLmNsYXNzTmFtZSkgY2FudmFzLmNsYXNzTGlzdC5hZGQob3B0aW9ucy5jbGFzc05hbWUpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgICAgYWRkRXZlbnQod2luZG93LCBcInJlc2l6ZVwiLCByZXBhaW50KTtcbiAgICB9LFxuICAgIHRvcGJhciA9IHtcbiAgICAgIGNvbmZpZzogZnVuY3Rpb24gKG9wdHMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdHMpXG4gICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSkgb3B0aW9uc1trZXldID0gb3B0c1trZXldO1xuICAgICAgfSxcbiAgICAgIHNob3c6IGZ1bmN0aW9uIChkZWxheSkge1xuICAgICAgICBpZiAoc2hvd2luZykgcmV0dXJuO1xuICAgICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgICBpZiAoZGVsYXlUaW1lcklkKSByZXR1cm47XG4gICAgICAgICAgZGVsYXlUaW1lcklkID0gc2V0VGltZW91dCgoKSA9PiB0b3BiYXIuc2hvdygpLCBkZWxheSk7XG4gICAgICAgIH0gZWxzZSAge1xuICAgICAgICAgIHNob3dpbmcgPSB0cnVlO1xuICAgICAgICAgIGlmIChmYWRlVGltZXJJZCAhPT0gbnVsbCkgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGZhZGVUaW1lcklkKTtcbiAgICAgICAgICBpZiAoIWNhbnZhcykgY3JlYXRlQ2FudmFzKCk7XG4gICAgICAgICAgY2FudmFzLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgICAgIGNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgIHRvcGJhci5wcm9ncmVzcygwKTtcbiAgICAgICAgICBpZiAob3B0aW9ucy5hdXRvUnVuKSB7XG4gICAgICAgICAgICAoZnVuY3Rpb24gbG9vcCgpIHtcbiAgICAgICAgICAgICAgcHJvZ3Jlc3NUaW1lcklkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICAgICAgICAgICAgdG9wYmFyLnByb2dyZXNzKFxuICAgICAgICAgICAgICAgIFwiK1wiICsgMC4wNSAqIE1hdGgucG93KDEgLSBNYXRoLnNxcnQoY3VycmVudFByb2dyZXNzKSwgMilcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvZ3Jlc3M6IGZ1bmN0aW9uICh0bykge1xuICAgICAgICBpZiAodHlwZW9mIHRvID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gY3VycmVudFByb2dyZXNzO1xuICAgICAgICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgdG8gPVxuICAgICAgICAgICAgKHRvLmluZGV4T2YoXCIrXCIpID49IDAgfHwgdG8uaW5kZXhPZihcIi1cIikgPj0gMFxuICAgICAgICAgICAgICA/IGN1cnJlbnRQcm9ncmVzc1xuICAgICAgICAgICAgICA6IDApICsgcGFyc2VGbG9hdCh0byk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFByb2dyZXNzID0gdG8gPiAxID8gMSA6IHRvO1xuICAgICAgICByZXBhaW50KCk7XG4gICAgICAgIHJldHVybiBjdXJyZW50UHJvZ3Jlc3M7XG4gICAgICB9LFxuICAgICAgaGlkZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoZGVsYXlUaW1lcklkKTtcbiAgICAgICAgZGVsYXlUaW1lcklkID0gbnVsbDtcbiAgICAgICAgaWYgKCFzaG93aW5nKSByZXR1cm47XG4gICAgICAgIHNob3dpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHByb2dyZXNzVGltZXJJZCAhPSBudWxsKSB7XG4gICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHByb2dyZXNzVGltZXJJZCk7XG4gICAgICAgICAgcHJvZ3Jlc3NUaW1lcklkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAoZnVuY3Rpb24gbG9vcCgpIHtcbiAgICAgICAgICBpZiAodG9wYmFyLnByb2dyZXNzKFwiKy4xXCIpID49IDEpIHtcbiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS5vcGFjaXR5IC09IDAuMDU7XG4gICAgICAgICAgICBpZiAoY2FudmFzLnN0eWxlLm9wYWNpdHkgPD0gMC4wNSkge1xuICAgICAgICAgICAgICBjYW52YXMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICBmYWRlVGltZXJJZCA9IG51bGw7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZmFkZVRpbWVySWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgICB9KSgpO1xuICAgICAgfSxcbiAgICB9O1xuXG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gdG9wYmFyO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0b3BiYXI7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy50b3BiYXIgPSB0b3BiYXI7XG4gIH1cbn0uY2FsbCh0aGlzLCB3aW5kb3csIGRvY3VtZW50KSk7XG4iLCAiLyoqXG4gKiBDcmVhdGVkIGJ5IFRpdmllIG9uIDEzLTA3LTIwMTUuXG4gKi9cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdHMgKHNpbXBsZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIG9taXRFeHRyYVdMSW5Db2RlQmxvY2tzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdPbWl0IHRoZSBkZWZhdWx0IGV4dHJhIHdoaXRlbGluZSBhZGRlZCB0byBjb2RlIGJsb2NrcycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIG5vSGVhZGVySWQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1R1cm4gb24vb2ZmIGdlbmVyYXRlZCBoZWFkZXIgaWQnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBwcmVmaXhIZWFkZXJJZDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnQWRkIGEgcHJlZml4IHRvIHRoZSBnZW5lcmF0ZWQgaGVhZGVyIGlkcy4gUGFzc2luZyBhIHN0cmluZyB3aWxsIHByZWZpeCB0aGF0IHN0cmluZyB0byB0aGUgaGVhZGVyIGlkLiBTZXR0aW5nIHRvIHRydWUgd2lsbCBhZGQgYSBnZW5lcmljIFxcJ3NlY3Rpb24tXFwnIHByZWZpeCcsXG4gICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAgcmF3UHJlZml4SGVhZGVySWQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1NldHRpbmcgdGhpcyBvcHRpb24gdG8gdHJ1ZSB3aWxsIHByZXZlbnQgc2hvd2Rvd24gZnJvbSBtb2RpZnlpbmcgdGhlIHByZWZpeC4gVGhpcyBtaWdodCByZXN1bHQgaW4gbWFsZm9ybWVkIElEcyAoaWYsIGZvciBpbnN0YW5jZSwgdGhlIFwiIGNoYXIgaXMgdXNlZCBpbiB0aGUgcHJlZml4KScsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGdoQ29tcGF0aWJsZUhlYWRlcklkOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdHZW5lcmF0ZSBoZWFkZXIgaWRzIGNvbXBhdGlibGUgd2l0aCBnaXRodWIgc3R5bGUgKHNwYWNlcyBhcmUgcmVwbGFjZWQgd2l0aCBkYXNoZXMsIGEgYnVuY2ggb2Ygbm9uIGFscGhhbnVtZXJpYyBjaGFycyBhcmUgcmVtb3ZlZCknLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICByYXdIZWFkZXJJZDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnUmVtb3ZlIG9ubHkgc3BhY2VzLCBcXCcgYW5kIFwiIGZyb20gZ2VuZXJhdGVkIGhlYWRlciBpZHMgKGluY2x1ZGluZyBwcmVmaXhlcyksIHJlcGxhY2luZyB0aGVtIHdpdGggZGFzaGVzICgtKS4gV0FSTklORzogVGhpcyBtaWdodCByZXN1bHQgaW4gbWFsZm9ybWVkIGlkcycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGhlYWRlckxldmVsU3RhcnQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1RoZSBoZWFkZXIgYmxvY2tzIGxldmVsIHN0YXJ0JyxcbiAgICAgIHR5cGU6ICdpbnRlZ2VyJ1xuICAgIH0sXG4gICAgcGFyc2VJbWdEaW1lbnNpb25zOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUdXJuIG9uL29mZiBpbWFnZSBkaW1lbnNpb24gcGFyc2luZycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHNpbXBsaWZpZWRBdXRvTGluazoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnVHVybiBvbi9vZmYgR0ZNIGF1dG9saW5rIHN0eWxlJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgZXhjbHVkZVRyYWlsaW5nUHVuY3R1YXRpb25Gcm9tVVJMczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnRXhjbHVkZXMgdHJhaWxpbmcgcHVuY3R1YXRpb24gZnJvbSBsaW5rcyBnZW5lcmF0ZWQgd2l0aCBhdXRvTGlua2luZycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGxpdGVyYWxNaWRXb3JkVW5kZXJzY29yZXM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1BhcnNlIG1pZHdvcmQgdW5kZXJzY29yZXMgYXMgbGl0ZXJhbCB1bmRlcnNjb3JlcycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGxpdGVyYWxNaWRXb3JkQXN0ZXJpc2tzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdQYXJzZSBtaWR3b3JkIGFzdGVyaXNrcyBhcyBsaXRlcmFsIGFzdGVyaXNrcycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHN0cmlrZXRocm91Z2g6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1R1cm4gb24vb2ZmIHN0cmlrZXRocm91Z2ggc3VwcG9ydCcsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHRhYmxlczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnVHVybiBvbi9vZmYgdGFibGVzIHN1cHBvcnQnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICB0YWJsZXNIZWFkZXJJZDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnQWRkIGFuIGlkIHRvIHRhYmxlIGhlYWRlcnMnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBnaENvZGVCbG9ja3M6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZSxcbiAgICAgIGRlc2NyaWJlOiAnVHVybiBvbi9vZmYgR0ZNIGZlbmNlZCBjb2RlIGJsb2NrcyBzdXBwb3J0JyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgdGFza2xpc3RzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUdXJuIG9uL29mZiBHRk0gdGFza2xpc3Qgc3VwcG9ydCcsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHNtb290aExpdmVQcmV2aWV3OiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdQcmV2ZW50cyB3ZWlyZCBlZmZlY3RzIGluIGxpdmUgcHJldmlld3MgZHVlIHRvIGluY29tcGxldGUgaW5wdXQnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBzbWFydEluZGVudGF0aW9uRml4OiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUcmllcyB0byBzbWFydGx5IGZpeCBpbmRlbnRhdGlvbiBpbiBlczYgc3RyaW5ncycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGRpc2FibGVGb3JjZWQ0U3BhY2VzSW5kZW50ZWRTdWJsaXN0czoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnRGlzYWJsZXMgdGhlIHJlcXVpcmVtZW50IG9mIGluZGVudGluZyBuZXN0ZWQgc3VibGlzdHMgYnkgNCBzcGFjZXMnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBzaW1wbGVMaW5lQnJlYWtzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdQYXJzZXMgc2ltcGxlIGxpbmUgYnJlYWtzIGFzIDxicj4gKEdGTSBTdHlsZSknLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICByZXF1aXJlU3BhY2VCZWZvcmVIZWFkaW5nVGV4dDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnTWFrZXMgYWRkaW5nIGEgc3BhY2UgYmV0d2VlbiBgI2AgYW5kIHRoZSBoZWFkZXIgdGV4dCBtYW5kYXRvcnkgKEdGTSBTdHlsZSknLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBnaE1lbnRpb25zOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdFbmFibGVzIGdpdGh1YiBAbWVudGlvbnMnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBnaE1lbnRpb25zTGluazoge1xuICAgICAgZGVmYXVsdFZhbHVlOiAnaHR0cHM6Ly9naXRodWIuY29tL3t1fScsXG4gICAgICBkZXNjcmliZTogJ0NoYW5nZXMgdGhlIGxpbmsgZ2VuZXJhdGVkIGJ5IEBtZW50aW9ucy4gT25seSBhcHBsaWVzIGlmIGdoTWVudGlvbnMgb3B0aW9uIGlzIGVuYWJsZWQuJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgfSxcbiAgICBlbmNvZGVFbWFpbHM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZSxcbiAgICAgIGRlc2NyaWJlOiAnRW5jb2RlIGUtbWFpbCBhZGRyZXNzZXMgdGhyb3VnaCB0aGUgdXNlIG9mIENoYXJhY3RlciBFbnRpdGllcywgdHJhbnNmb3JtaW5nIEFTQ0lJIGUtbWFpbCBhZGRyZXNzZXMgaW50byBpdHMgZXF1aXZhbGVudCBkZWNpbWFsIGVudGl0aWVzJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgb3BlbkxpbmtzSW5OZXdXaW5kb3c6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ09wZW4gYWxsIGxpbmtzIGluIG5ldyB3aW5kb3dzJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgYmFja3NsYXNoRXNjYXBlc0hUTUxUYWdzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdTdXBwb3J0IGZvciBIVE1MIFRhZyBlc2NhcGluZy4gZXg6IFxcPGRpdj5mb29cXDwvZGl2PicsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGVtb2ppOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdFbmFibGUgZW1vamkgc3VwcG9ydC4gRXg6IGB0aGlzIGlzIGEgOnNtaWxlOiBlbW9qaWAnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICB1bmRlcmxpbmU6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ0VuYWJsZSBzdXBwb3J0IGZvciB1bmRlcmxpbmUuIFN5bnRheCBpcyBkb3VibGUgb3IgdHJpcGxlIHVuZGVyc2NvcmVzOiBgX191bmRlcmxpbmUgd29yZF9fYC4gV2l0aCB0aGlzIG9wdGlvbiBlbmFibGVkLCB1bmRlcnNjb3JlcyBubyBsb25nZXIgcGFyc2VzIGludG8gYDxlbT5gIGFuZCBgPHN0cm9uZz5gJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgZWxsaXBzaXM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZSxcbiAgICAgIGRlc2NyaWJlOiAnUmVwbGFjZXMgdGhyZWUgZG90cyB3aXRoIHRoZSBlbGxpcHNpcyB1bmljb2RlIGNoYXJhY3RlcicsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGNvbXBsZXRlSFRNTERvY3VtZW50OiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdPdXRwdXRzIGEgY29tcGxldGUgaHRtbCBkb2N1bWVudCwgaW5jbHVkaW5nIGA8aHRtbD5gLCBgPGhlYWQ+YCBhbmQgYDxib2R5PmAgdGFncycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdFbmFibGUgc3VwcG9ydCBmb3IgZG9jdW1lbnQgbWV0YWRhdGEgKGRlZmluZWQgYXQgdGhlIHRvcCBvZiB0aGUgZG9jdW1lbnQgYmV0d2VlbiBgwqvCq8KrYCBhbmQgYMK7wrvCu2Agb3IgYmV0d2VlbiBgLS0tYCBhbmQgYC0tLWApLicsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHNwbGl0QWRqYWNlbnRCbG9ja3F1b3Rlczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnU3BsaXQgYWRqYWNlbnQgYmxvY2txdW90ZSBibG9ja3MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfVxuICB9O1xuICBpZiAoc2ltcGxlID09PSBmYWxzZSkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRlZmF1bHRPcHRpb25zKSk7XG4gIH1cbiAgdmFyIHJldCA9IHt9O1xuICBmb3IgKHZhciBvcHQgaW4gZGVmYXVsdE9wdGlvbnMpIHtcbiAgICBpZiAoZGVmYXVsdE9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgcmV0W29wdF0gPSBkZWZhdWx0T3B0aW9uc1tvcHRdLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gYWxsT3B0aW9uc09uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgb3B0aW9ucyA9IGdldERlZmF1bHRPcHRzKHRydWUpLFxuICAgICAgcmV0ID0ge307XG4gIGZvciAodmFyIG9wdCBpbiBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgcmV0W29wdF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwgIi8qKlxuICogQ3JlYXRlZCBieSBUaXZpZSBvbiAwNi0wMS0yMDE1LlxuICovXG5cbi8vIFByaXZhdGUgcHJvcGVydGllc1xudmFyIHNob3dkb3duID0ge30sXG4gICAgcGFyc2VycyA9IHt9LFxuICAgIGV4dGVuc2lvbnMgPSB7fSxcbiAgICBnbG9iYWxPcHRpb25zID0gZ2V0RGVmYXVsdE9wdHModHJ1ZSksXG4gICAgc2V0Rmxhdm9yID0gJ3ZhbmlsbGEnLFxuICAgIGZsYXZvciA9IHtcbiAgICAgIGdpdGh1Yjoge1xuICAgICAgICBvbWl0RXh0cmFXTEluQ29kZUJsb2NrczogICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHNpbXBsaWZpZWRBdXRvTGluazogICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgZXhjbHVkZVRyYWlsaW5nUHVuY3R1YXRpb25Gcm9tVVJMczogICB0cnVlLFxuICAgICAgICBsaXRlcmFsTWlkV29yZFVuZGVyc2NvcmVzOiAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHN0cmlrZXRocm91Z2g6ICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGFibGVzOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICB0YWJsZXNIZWFkZXJJZDogICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGdoQ29kZUJsb2NrczogICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGFza2xpc3RzOiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBkaXNhYmxlRm9yY2VkNFNwYWNlc0luZGVudGVkU3VibGlzdHM6IHRydWUsXG4gICAgICAgIHNpbXBsZUxpbmVCcmVha3M6ICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgcmVxdWlyZVNwYWNlQmVmb3JlSGVhZGluZ1RleHQ6ICAgICAgICB0cnVlLFxuICAgICAgICBnaENvbXBhdGlibGVIZWFkZXJJZDogICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGdoTWVudGlvbnM6ICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgYmFja3NsYXNoRXNjYXBlc0hUTUxUYWdzOiAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBlbW9qaTogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHNwbGl0QWRqYWNlbnRCbG9ja3F1b3RlczogICAgICAgICAgICAgdHJ1ZVxuICAgICAgfSxcbiAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgIG5vSGVhZGVySWQ6ICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgZ2hDb2RlQmxvY2tzOiAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgfSxcbiAgICAgIGdob3N0OiB7XG4gICAgICAgIG9taXRFeHRyYVdMSW5Db2RlQmxvY2tzOiAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgcGFyc2VJbWdEaW1lbnNpb25zOiAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBzaW1wbGlmaWVkQXV0b0xpbms6ICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGV4Y2x1ZGVUcmFpbGluZ1B1bmN0dWF0aW9uRnJvbVVSTHM6ICAgdHJ1ZSxcbiAgICAgICAgbGl0ZXJhbE1pZFdvcmRVbmRlcnNjb3JlczogICAgICAgICAgICB0cnVlLFxuICAgICAgICBzdHJpa2V0aHJvdWdoOiAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHRhYmxlczogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGFibGVzSGVhZGVySWQ6ICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBnaENvZGVCbG9ja3M6ICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHRhc2tsaXN0czogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgc21vb3RoTGl2ZVByZXZpZXc6ICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBzaW1wbGVMaW5lQnJlYWtzOiAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHJlcXVpcmVTcGFjZUJlZm9yZUhlYWRpbmdUZXh0OiAgICAgICAgdHJ1ZSxcbiAgICAgICAgZ2hNZW50aW9uczogICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgZW5jb2RlRW1haWxzOiAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICB9LFxuICAgICAgdmFuaWxsYTogZ2V0RGVmYXVsdE9wdHModHJ1ZSksXG4gICAgICBhbGxPbjogYWxsT3B0aW9uc09uKClcbiAgICB9O1xuXG4vKipcbiAqIGhlbHBlciBuYW1lc3BhY2VcbiAqIEB0eXBlIHt7fX1cbiAqL1xuc2hvd2Rvd24uaGVscGVyID0ge307XG5cbi8qKlxuICogVE9ETyBMRUdBQ1kgU1VQUE9SVCBDT0RFXG4gKiBAdHlwZSB7e319XG4gKi9cbnNob3dkb3duLmV4dGVuc2lvbnMgPSB7fTtcblxuLyoqXG4gKiBTZXQgYSBnbG9iYWwgb3B0aW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcmV0dXJucyB7c2hvd2Rvd259XG4gKi9cbnNob3dkb3duLnNldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ2xvYmFsT3B0aW9uc1trZXldID0gdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBHZXQgYSBnbG9iYWwgb3B0aW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuc2hvd2Rvd24uZ2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnbG9iYWxPcHRpb25zW2tleV07XG59O1xuXG4vKipcbiAqIEdldCB0aGUgZ2xvYmFsIG9wdGlvbnNcbiAqIEBzdGF0aWNcbiAqIEByZXR1cm5zIHt7fX1cbiAqL1xuc2hvd2Rvd24uZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZ2xvYmFsT3B0aW9ucztcbn07XG5cbi8qKlxuICogUmVzZXQgZ2xvYmFsIG9wdGlvbnMgdG8gdGhlIGRlZmF1bHQgdmFsdWVzXG4gKiBAc3RhdGljXG4gKi9cbnNob3dkb3duLnJlc2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnbG9iYWxPcHRpb25zID0gZ2V0RGVmYXVsdE9wdHModHJ1ZSk7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgZmxhdm9yIHNob3dkb3duIHNob3VsZCB1c2UgYXMgZGVmYXVsdFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqL1xuc2hvd2Rvd24uc2V0Rmxhdm9yID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIWZsYXZvci5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHRocm93IEVycm9yKG5hbWUgKyAnIGZsYXZvciB3YXMgbm90IGZvdW5kJyk7XG4gIH1cbiAgc2hvd2Rvd24ucmVzZXRPcHRpb25zKCk7XG4gIHZhciBwcmVzZXQgPSBmbGF2b3JbbmFtZV07XG4gIHNldEZsYXZvciA9IG5hbWU7XG4gIGZvciAodmFyIG9wdGlvbiBpbiBwcmVzZXQpIHtcbiAgICBpZiAocHJlc2V0Lmhhc093blByb3BlcnR5KG9wdGlvbikpIHtcbiAgICAgIGdsb2JhbE9wdGlvbnNbb3B0aW9uXSA9IHByZXNldFtvcHRpb25dO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnRseSBzZXQgZmxhdm9yXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5zaG93ZG93bi5nZXRGbGF2b3IgPSBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHNldEZsYXZvcjtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBvcHRpb25zIG9mIGEgc3BlY2lmaWVkIGZsYXZvci4gUmV0dXJucyB1bmRlZmluZWQgaWYgdGhlIGZsYXZvciB3YXMgbm90IGZvdW5kXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBmbGF2b3JcbiAqIEByZXR1cm5zIHt7fXx1bmRlZmluZWR9XG4gKi9cbnNob3dkb3duLmdldEZsYXZvck9wdGlvbnMgPSBmdW5jdGlvbiAobmFtZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChmbGF2b3IuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICByZXR1cm4gZmxhdm9yW25hbWVdO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBvcHRpb25zXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtzaW1wbGU9dHJ1ZV1cbiAqIEByZXR1cm5zIHt7fX1cbiAqL1xuc2hvd2Rvd24uZ2V0RGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiAoc2ltcGxlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdldERlZmF1bHRPcHRzKHNpbXBsZSk7XG59O1xuXG4vKipcbiAqIEdldCBvciBzZXQgYSBzdWJQYXJzZXJcbiAqXG4gKiBzdWJQYXJzZXIobmFtZSkgICAgICAgLSBHZXQgYSByZWdpc3RlcmVkIHN1YlBhcnNlclxuICogc3ViUGFyc2VyKG5hbWUsIGZ1bmMpIC0gUmVnaXN0ZXIgYSBzdWJQYXJzZXJcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZnVuY11cbiAqIEByZXR1cm5zIHsqfVxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIgPSBmdW5jdGlvbiAobmFtZSwgZnVuYykge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcobmFtZSkpIHtcbiAgICBpZiAodHlwZW9mIGZ1bmMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYXJzZXJzW25hbWVdID0gZnVuYztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcnNlcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlcnNbbmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcignU3ViUGFyc2VyIG5hbWVkICcgKyBuYW1lICsgJyBub3QgcmVnaXN0ZXJlZCEnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogR2V0cyBvciByZWdpc3RlcnMgYW4gZXh0ZW5zaW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtvYmplY3R8b2JqZWN0W118ZnVuY3Rpb249fSBleHRcbiAqIEByZXR1cm5zIHsqfVxuICovXG5zaG93ZG93bi5leHRlbnNpb24gPSBmdW5jdGlvbiAobmFtZSwgZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1N0cmluZyhuYW1lKSkge1xuICAgIHRocm93IEVycm9yKCdFeHRlbnNpb24gXFwnbmFtZVxcJyBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBuYW1lID0gc2hvd2Rvd24uaGVscGVyLnN0ZEV4dE5hbWUobmFtZSk7XG5cbiAgLy8gR2V0dGVyXG4gIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0KSkge1xuICAgIGlmICghZXh0ZW5zaW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0V4dGVuc2lvbiBuYW1lZCAnICsgbmFtZSArICcgaXMgbm90IHJlZ2lzdGVyZWQhJyk7XG4gICAgfVxuICAgIHJldHVybiBleHRlbnNpb25zW25hbWVdO1xuXG4gICAgLy8gU2V0dGVyXG4gIH0gZWxzZSB7XG4gICAgLy8gRXhwYW5kIGV4dGVuc2lvbiBpZiBpdCdzIHdyYXBwZWQgaW4gYSBmdW5jdGlvblxuICAgIGlmICh0eXBlb2YgZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBleHQgPSBleHQoKTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgZXh0ZW5zaW9uIGlzIGFuIGFycmF5XG4gICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHQpKSB7XG4gICAgICBleHQgPSBbZXh0XTtcbiAgICB9XG5cbiAgICB2YXIgdmFsaWRFeHRlbnNpb24gPSB2YWxpZGF0ZShleHQsIG5hbWUpO1xuXG4gICAgaWYgKHZhbGlkRXh0ZW5zaW9uLnZhbGlkKSB7XG4gICAgICBleHRlbnNpb25zW25hbWVdID0gZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcih2YWxpZEV4dGVuc2lvbi5lcnJvcik7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEdldHMgYWxsIGV4dGVuc2lvbnMgcmVnaXN0ZXJlZFxuICogQHJldHVybnMge3t9fVxuICovXG5zaG93ZG93bi5nZXRBbGxFeHRlbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBleHRlbnNpb25zO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gZXh0ZW5zaW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5zaG93ZG93bi5yZW1vdmVFeHRlbnNpb24gPSBmdW5jdGlvbiAobmFtZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGRlbGV0ZSBleHRlbnNpb25zW25hbWVdO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBleHRlbnNpb25zXG4gKi9cbnNob3dkb3duLnJlc2V0RXh0ZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBleHRlbnNpb25zID0ge307XG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGV4dGVuc2lvblxuICogQHBhcmFtIHthcnJheX0gZXh0ZW5zaW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge3t2YWxpZDogYm9vbGVhbiwgZXJyb3I6IHN0cmluZ319XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlIChleHRlbnNpb24sIG5hbWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBlcnJNc2cgPSAobmFtZSkgPyAnRXJyb3IgaW4gJyArIG5hbWUgKyAnIGV4dGVuc2lvbi0+JyA6ICdFcnJvciBpbiB1bm5hbWVkIGV4dGVuc2lvbicsXG4gICAgICByZXQgPSB7XG4gICAgICAgIHZhbGlkOiB0cnVlLFxuICAgICAgICBlcnJvcjogJydcbiAgICAgIH07XG5cbiAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHRlbnNpb24pKSB7XG4gICAgZXh0ZW5zaW9uID0gW2V4dGVuc2lvbl07XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dGVuc2lvbi5sZW5ndGg7ICsraSkge1xuICAgIHZhciBiYXNlTXNnID0gZXJyTXNnICsgJyBzdWItZXh0ZW5zaW9uICcgKyBpICsgJzogJyxcbiAgICAgICAgZXh0ID0gZXh0ZW5zaW9uW2ldO1xuICAgIGlmICh0eXBlb2YgZXh0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ211c3QgYmUgYW4gb2JqZWN0LCBidXQgJyArIHR5cGVvZiBleHQgKyAnIGdpdmVuJztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcoZXh0LnR5cGUpKSB7XG4gICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAncHJvcGVydHkgXCJ0eXBlXCIgbXVzdCBiZSBhIHN0cmluZywgYnV0ICcgKyB0eXBlb2YgZXh0LnR5cGUgKyAnIGdpdmVuJztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSBleHQudHlwZSA9IGV4dC50eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBub3JtYWxpemUgZXh0ZW5zaW9uIHR5cGVcbiAgICBpZiAodHlwZSA9PT0gJ2xhbmd1YWdlJykge1xuICAgICAgdHlwZSA9IGV4dC50eXBlID0gJ2xhbmcnO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSAnaHRtbCcpIHtcbiAgICAgIHR5cGUgPSBleHQudHlwZSA9ICdvdXRwdXQnO1xuICAgIH1cblxuICAgIGlmICh0eXBlICE9PSAnbGFuZycgJiYgdHlwZSAhPT0gJ291dHB1dCcgJiYgdHlwZSAhPT0gJ2xpc3RlbmVyJykge1xuICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ3R5cGUgJyArIHR5cGUgKyAnIGlzIG5vdCByZWNvZ25pemVkLiBWYWxpZCB2YWx1ZXM6IFwibGFuZy9sYW5ndWFnZVwiLCBcIm91dHB1dC9odG1sXCIgb3IgXCJsaXN0ZW5lclwiJztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09ICdsaXN0ZW5lcicpIHtcbiAgICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0Lmxpc3RlbmVycykpIHtcbiAgICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnLiBFeHRlbnNpb25zIG9mIHR5cGUgXCJsaXN0ZW5lclwiIG11c3QgaGF2ZSBhIHByb3BlcnR5IGNhbGxlZCBcImxpc3RlbmVyc1wiJztcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChleHQuZmlsdGVyKSAmJiBzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0LnJlZ2V4KSkge1xuICAgICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArIHR5cGUgKyAnIGV4dGVuc2lvbnMgbXVzdCBkZWZpbmUgZWl0aGVyIGEgXCJyZWdleFwiIHByb3BlcnR5IG9yIGEgXCJmaWx0ZXJcIiBtZXRob2QnO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHQubGlzdGVuZXJzKSB7XG4gICAgICBpZiAodHlwZW9mIGV4dC5saXN0ZW5lcnMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ1wibGlzdGVuZXJzXCIgcHJvcGVydHkgbXVzdCBiZSBhbiBvYmplY3QgYnV0ICcgKyB0eXBlb2YgZXh0Lmxpc3RlbmVycyArICcgZ2l2ZW4nO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbG4gaW4gZXh0Lmxpc3RlbmVycykge1xuICAgICAgICBpZiAoZXh0Lmxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShsbikpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGV4dC5saXN0ZW5lcnNbbG5dICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnXCJsaXN0ZW5lcnNcIiBwcm9wZXJ0eSBtdXN0IGJlIGFuIGhhc2ggb2YgW2V2ZW50IG5hbWVdOiBbY2FsbGJhY2tdLiBsaXN0ZW5lcnMuJyArIGxuICtcbiAgICAgICAgICAgICAgJyBtdXN0IGJlIGEgZnVuY3Rpb24gYnV0ICcgKyB0eXBlb2YgZXh0Lmxpc3RlbmVyc1tsbl0gKyAnIGdpdmVuJztcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV4dC5maWx0ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZXh0LmZpbHRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArICdcImZpbHRlclwiIG11c3QgYmUgYSBmdW5jdGlvbiwgYnV0ICcgKyB0eXBlb2YgZXh0LmZpbHRlciArICcgZ2l2ZW4nO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXh0LnJlZ2V4KSB7XG4gICAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKGV4dC5yZWdleCkpIHtcbiAgICAgICAgZXh0LnJlZ2V4ID0gbmV3IFJlZ0V4cChleHQucmVnZXgsICdnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIShleHQucmVnZXggaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ1wicmVnZXhcIiBwcm9wZXJ0eSBtdXN0IGVpdGhlciBiZSBhIHN0cmluZyBvciBhIFJlZ0V4cCBvYmplY3QsIGJ1dCAnICsgdHlwZW9mIGV4dC5yZWdleCArICcgZ2l2ZW4nO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChleHQucmVwbGFjZSkpIHtcbiAgICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnXCJyZWdleFwiIGV4dGVuc2lvbnMgbXVzdCBpbXBsZW1lbnQgYSByZXBsYWNlIHN0cmluZyBvciBmdW5jdGlvbic7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgZXh0ZW5zaW9uXG4gKiBAcGFyYW0ge29iamVjdH0gZXh0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuc2hvd2Rvd24udmFsaWRhdGVFeHRlbnNpb24gPSBmdW5jdGlvbiAoZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdmFsaWRhdGVFeHRlbnNpb24gPSB2YWxpZGF0ZShleHQsIG51bGwpO1xuICBpZiAoIXZhbGlkYXRlRXh0ZW5zaW9uLnZhbGlkKSB7XG4gICAgY29uc29sZS53YXJuKHZhbGlkYXRlRXh0ZW5zaW9uLmVycm9yKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwgIi8qKlxuICogc2hvd2Rvd25qcyBoZWxwZXIgZnVuY3Rpb25zXG4gKi9cblxuaWYgKCFzaG93ZG93bi5oYXNPd25Qcm9wZXJ0eSgnaGVscGVyJykpIHtcbiAgc2hvd2Rvd24uaGVscGVyID0ge307XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFyIGlzIHN0cmluZ1xuICogQHN0YXRpY1xuICogQHBhcmFtIHtzdHJpbmd9IGFcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5zaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcgPSBmdW5jdGlvbiAoYSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiAodHlwZW9mIGEgPT09ICdzdHJpbmcnIHx8IGEgaW5zdGFuY2VvZiBTdHJpbmcpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiB2YXIgaXMgYSBmdW5jdGlvblxuICogQHN0YXRpY1xuICogQHBhcmFtIHsqfSBhXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuc2hvd2Rvd24uaGVscGVyLmlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoYSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBnZXRUeXBlID0ge307XG4gIHJldHVybiBhICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChhKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbi8qKlxuICogaXNBcnJheSBoZWxwZXIgZnVuY3Rpb25cbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7Kn0gYVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbnNob3dkb3duLmhlbHBlci5pc0FycmF5ID0gZnVuY3Rpb24gKGEpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gKi9cbnNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xufTtcblxuLyoqXG4gKiBGb3JFYWNoIGhlbHBlciBmdW5jdGlvblxuICogSXRlcmF0ZXMgb3ZlciBBcnJheXMgYW5kIE9iamVjdHMgKG93biBwcm9wZXJ0aWVzIG9ubHkpXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQWNjZXB0cyAzIHBhcmFtczogMS4gdmFsdWUsIDIuIGtleSwgMy4gdGhlIG9yaWdpbmFsIGFycmF5L29iamVjdFxuICovXG5zaG93ZG93bi5oZWxwZXIuZm9yRWFjaCA9IGZ1bmN0aW9uIChvYmosIGNhbGxiYWNrKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gY2hlY2sgaWYgb2JqIGlzIGRlZmluZWRcbiAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChvYmopKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdvYmogcGFyYW0gaXMgcmVxdWlyZWQnKTtcbiAgfVxuXG4gIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoY2FsbGJhY2spKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsYmFjayBwYXJhbSBpcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbGxiYWNrIHBhcmFtIG11c3QgYmUgYSBmdW5jdGlvbi9jbG9zdXJlJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iai5mb3JFYWNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2JqLmZvckVhY2goY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKHNob3dkb3duLmhlbHBlci5pc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgY2FsbGJhY2sob2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgKG9iaikgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgY2FsbGJhY2sob2JqW3Byb3BdLCBwcm9wLCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ29iaiBkb2VzIG5vdCBzZWVtIHRvIGJlIGFuIGFycmF5IG9yIGFuIGl0ZXJhYmxlIG9iamVjdCcpO1xuICB9XG59O1xuXG4vKipcbiAqIFN0YW5kYXJkaWRpemUgZXh0ZW5zaW9uIG5hbWVcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7c3RyaW5nfSBzIGV4dGVuc2lvbiBuYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5zaG93ZG93bi5oZWxwZXIuc3RkRXh0TmFtZSA9IGZ1bmN0aW9uIChzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHMucmVwbGFjZSgvW18/KitcXC9cXFxcLl4tXS9nLCAnJykucmVwbGFjZSgvXFxzL2csICcnKS50b0xvd2VyQ2FzZSgpO1xufTtcblxuZnVuY3Rpb24gZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrICh3aG9sZU1hdGNoLCBtMSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBjaGFyQ29kZVRvRXNjYXBlID0gbTEuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuICfCqEUnICsgY2hhckNvZGVUb0VzY2FwZSArICdFJztcbn1cblxuLyoqXG4gKiBDYWxsYmFjayB1c2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIHdoZW4gcGFzc2luZyB0aHJvdWdoIFN0cmluZy5yZXBsYWNlXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gd2hvbGVNYXRjaFxuICogQHBhcmFtIHtzdHJpbmd9IG0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5zaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrID0gZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrO1xuXG4vKipcbiAqIEVzY2FwZSBjaGFyYWN0ZXJzIGluIGEgc3RyaW5nXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHBhcmFtIHtzdHJpbmd9IGNoYXJzVG9Fc2NhcGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWZ0ZXJCYWNrc2xhc2hcbiAqIEByZXR1cm5zIHtYTUx8c3RyaW5nfHZvaWR8Kn1cbiAqL1xuc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnMgPSBmdW5jdGlvbiAodGV4dCwgY2hhcnNUb0VzY2FwZSwgYWZ0ZXJCYWNrc2xhc2gpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBGaXJzdCB3ZSBoYXZlIHRvIGVzY2FwZSB0aGUgZXNjYXBlIGNoYXJhY3RlcnMgc28gdGhhdFxuICAvLyB3ZSBjYW4gYnVpbGQgYSBjaGFyYWN0ZXIgY2xhc3Mgb3V0IG9mIHRoZW1cbiAgdmFyIHJlZ2V4U3RyaW5nID0gJyhbJyArIGNoYXJzVG9Fc2NhcGUucmVwbGFjZSgvKFtcXFtcXF1cXFxcXSkvZywgJ1xcXFwkMScpICsgJ10pJztcblxuICBpZiAoYWZ0ZXJCYWNrc2xhc2gpIHtcbiAgICByZWdleFN0cmluZyA9ICdcXFxcXFxcXCcgKyByZWdleFN0cmluZztcbiAgfVxuXG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTdHJpbmcsICdnJyk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UocmVnZXgsIGVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG5cbiAgcmV0dXJuIHRleHQ7XG59O1xuXG4vKipcbiAqIFVuZXNjYXBlIEhUTUwgZW50aXRpZXNcbiAqIEBwYXJhbSB0eHRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnNob3dkb3duLmhlbHBlci51bmVzY2FwZUhUTUxFbnRpdGllcyA9IGZ1bmN0aW9uICh0eHQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHJldHVybiB0eHRcbiAgICAucmVwbGFjZSgvJnF1b3Q7L2csICdcIicpXG4gICAgLnJlcGxhY2UoLyZsdDsvZywgJzwnKVxuICAgIC5yZXBsYWNlKC8mZ3Q7L2csICc+JylcbiAgICAucmVwbGFjZSgvJmFtcDsvZywgJyYnKTtcbn07XG5cbnZhciByZ3hGaW5kTWF0Y2hQb3MgPSBmdW5jdGlvbiAoc3RyLCBsZWZ0LCByaWdodCwgZmxhZ3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgZiA9IGZsYWdzIHx8ICcnLFxuICAgICAgZyA9IGYuaW5kZXhPZignZycpID4gLTEsXG4gICAgICB4ID0gbmV3IFJlZ0V4cChsZWZ0ICsgJ3wnICsgcmlnaHQsICdnJyArIGYucmVwbGFjZSgvZy9nLCAnJykpLFxuICAgICAgbCA9IG5ldyBSZWdFeHAobGVmdCwgZi5yZXBsYWNlKC9nL2csICcnKSksXG4gICAgICBwb3MgPSBbXSxcbiAgICAgIHQsIHMsIG0sIHN0YXJ0LCBlbmQ7XG5cbiAgZG8ge1xuICAgIHQgPSAwO1xuICAgIHdoaWxlICgobSA9IHguZXhlYyhzdHIpKSkge1xuICAgICAgaWYgKGwudGVzdChtWzBdKSkge1xuICAgICAgICBpZiAoISh0KyspKSB7XG4gICAgICAgICAgcyA9IHgubGFzdEluZGV4O1xuICAgICAgICAgIHN0YXJ0ID0gcyAtIG1bMF0ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHQpIHtcbiAgICAgICAgaWYgKCEtLXQpIHtcbiAgICAgICAgICBlbmQgPSBtLmluZGV4ICsgbVswXS5sZW5ndGg7XG4gICAgICAgICAgdmFyIG9iaiA9IHtcbiAgICAgICAgICAgIGxlZnQ6IHtzdGFydDogc3RhcnQsIGVuZDogc30sXG4gICAgICAgICAgICBtYXRjaDoge3N0YXJ0OiBzLCBlbmQ6IG0uaW5kZXh9LFxuICAgICAgICAgICAgcmlnaHQ6IHtzdGFydDogbS5pbmRleCwgZW5kOiBlbmR9LFxuICAgICAgICAgICAgd2hvbGVNYXRjaDoge3N0YXJ0OiBzdGFydCwgZW5kOiBlbmR9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBwb3MucHVzaChvYmopO1xuICAgICAgICAgIGlmICghZykge1xuICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gd2hpbGUgKHQgJiYgKHgubGFzdEluZGV4ID0gcykpO1xuXG4gIHJldHVybiBwb3M7XG59O1xuXG4vKipcbiAqIG1hdGNoUmVjdXJzaXZlUmVnRXhwXG4gKlxuICogKGMpIDIwMDcgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+XG4gKiBNSVQgTGljZW5zZVxuICpcbiAqIEFjY2VwdHMgYSBzdHJpbmcgdG8gc2VhcmNoLCBhIGxlZnQgYW5kIHJpZ2h0IGZvcm1hdCBkZWxpbWl0ZXJcbiAqIGFzIHJlZ2V4IHBhdHRlcm5zLCBhbmQgb3B0aW9uYWwgcmVnZXggZmxhZ3MuIFJldHVybnMgYW4gYXJyYXlcbiAqIG9mIG1hdGNoZXMsIGFsbG93aW5nIG5lc3RlZCBpbnN0YW5jZXMgb2YgbGVmdC9yaWdodCBkZWxpbWl0ZXJzLlxuICogVXNlIHRoZSBcImdcIiBmbGFnIHRvIHJldHVybiBhbGwgbWF0Y2hlcywgb3RoZXJ3aXNlIG9ubHkgdGhlXG4gKiBmaXJzdCBpcyByZXR1cm5lZC4gQmUgY2FyZWZ1bCB0byBlbnN1cmUgdGhhdCB0aGUgbGVmdCBhbmRcbiAqIHJpZ2h0IGZvcm1hdCBkZWxpbWl0ZXJzIHByb2R1Y2UgbXV0dWFsbHkgZXhjbHVzaXZlIG1hdGNoZXMuXG4gKiBCYWNrcmVmZXJlbmNlcyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoaW4gdGhlIHJpZ2h0IGRlbGltaXRlclxuICogZHVlIHRvIGhvdyBpdCBpcyBpbnRlcm5hbGx5IGNvbWJpbmVkIHdpdGggdGhlIGxlZnQgZGVsaW1pdGVyLlxuICogV2hlbiBtYXRjaGluZyBzdHJpbmdzIHdob3NlIGZvcm1hdCBkZWxpbWl0ZXJzIGFyZSB1bmJhbGFuY2VkXG4gKiB0byB0aGUgbGVmdCBvciByaWdodCwgdGhlIG91dHB1dCBpcyBpbnRlbnRpb25hbGx5IGFzIGFcbiAqIGNvbnZlbnRpb25hbCByZWdleCBsaWJyYXJ5IHdpdGggcmVjdXJzaW9uIHN1cHBvcnQgd291bGRcbiAqIHByb2R1Y2UsIGUuZy4gXCI8PHg+XCIgYW5kIFwiPHg+PlwiIGJvdGggcHJvZHVjZSBbXCJ4XCJdIHdoZW4gdXNpbmdcbiAqIFwiPFwiIGFuZCBcIj5cIiBhcyB0aGUgZGVsaW1pdGVycyAoYm90aCBzdHJpbmdzIGNvbnRhaW4gYSBzaW5nbGUsXG4gKiBiYWxhbmNlZCBpbnN0YW5jZSBvZiBcIjx4PlwiKS5cbiAqXG4gKiBleGFtcGxlczpcbiAqIG1hdGNoUmVjdXJzaXZlUmVnRXhwKFwidGVzdFwiLCBcIlxcXFwoXCIsIFwiXFxcXClcIilcbiAqIHJldHVybnM6IFtdXG4gKiBtYXRjaFJlY3Vyc2l2ZVJlZ0V4cChcIjx0PDxlPj48cz4+dDw+XCIsIFwiPFwiLCBcIj5cIiwgXCJnXCIpXG4gKiByZXR1cm5zOiBbXCJ0PDxlPj48cz5cIiwgXCJcIl1cbiAqIG1hdGNoUmVjdXJzaXZlUmVnRXhwKFwiPGRpdiBpZD1cXFwieFxcXCI+dGVzdDwvZGl2PlwiLCBcIjxkaXZcXFxcYltePl0qPlwiLCBcIjwvZGl2PlwiLCBcImdpXCIpXG4gKiByZXR1cm5zOiBbXCJ0ZXN0XCJdXG4gKi9cbnNob3dkb3duLmhlbHBlci5tYXRjaFJlY3Vyc2l2ZVJlZ0V4cCA9IGZ1bmN0aW9uIChzdHIsIGxlZnQsIHJpZ2h0LCBmbGFncykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIG1hdGNoUG9zID0gcmd4RmluZE1hdGNoUG9zIChzdHIsIGxlZnQsIHJpZ2h0LCBmbGFncyksXG4gICAgICByZXN1bHRzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaFBvcy5sZW5ndGg7ICsraSkge1xuICAgIHJlc3VsdHMucHVzaChbXG4gICAgICBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ud2hvbGVNYXRjaC5zdGFydCwgbWF0Y2hQb3NbaV0ud2hvbGVNYXRjaC5lbmQpLFxuICAgICAgc3RyLnNsaWNlKG1hdGNoUG9zW2ldLm1hdGNoLnN0YXJ0LCBtYXRjaFBvc1tpXS5tYXRjaC5lbmQpLFxuICAgICAgc3RyLnNsaWNlKG1hdGNoUG9zW2ldLmxlZnQuc3RhcnQsIG1hdGNoUG9zW2ldLmxlZnQuZW5kKSxcbiAgICAgIHN0ci5zbGljZShtYXRjaFBvc1tpXS5yaWdodC5zdGFydCwgbWF0Y2hQb3NbaV0ucmlnaHQuZW5kKVxuICAgIF0pO1xuICB9XG4gIHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IHJlcGxhY2VtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gbGVmdFxuICogQHBhcmFtIHtzdHJpbmd9IHJpZ2h0XG4gKiBAcGFyYW0ge3N0cmluZ30gZmxhZ3NcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnNob3dkb3duLmhlbHBlci5yZXBsYWNlUmVjdXJzaXZlUmVnRXhwID0gZnVuY3Rpb24gKHN0ciwgcmVwbGFjZW1lbnQsIGxlZnQsIHJpZ2h0LCBmbGFncykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNGdW5jdGlvbihyZXBsYWNlbWVudCkpIHtcbiAgICB2YXIgcmVwU3RyID0gcmVwbGFjZW1lbnQ7XG4gICAgcmVwbGFjZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVwU3RyO1xuICAgIH07XG4gIH1cblxuICB2YXIgbWF0Y2hQb3MgPSByZ3hGaW5kTWF0Y2hQb3Moc3RyLCBsZWZ0LCByaWdodCwgZmxhZ3MpLFxuICAgICAgZmluYWxTdHIgPSBzdHIsXG4gICAgICBsbmcgPSBtYXRjaFBvcy5sZW5ndGg7XG5cbiAgaWYgKGxuZyA+IDApIHtcbiAgICB2YXIgYml0cyA9IFtdO1xuICAgIGlmIChtYXRjaFBvc1swXS53aG9sZU1hdGNoLnN0YXJ0ICE9PSAwKSB7XG4gICAgICBiaXRzLnB1c2goc3RyLnNsaWNlKDAsIG1hdGNoUG9zWzBdLndob2xlTWF0Y2guc3RhcnQpKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsbmc7ICsraSkge1xuICAgICAgYml0cy5wdXNoKFxuICAgICAgICByZXBsYWNlbWVudChcbiAgICAgICAgICBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ud2hvbGVNYXRjaC5zdGFydCwgbWF0Y2hQb3NbaV0ud2hvbGVNYXRjaC5lbmQpLFxuICAgICAgICAgIHN0ci5zbGljZShtYXRjaFBvc1tpXS5tYXRjaC5zdGFydCwgbWF0Y2hQb3NbaV0ubWF0Y2guZW5kKSxcbiAgICAgICAgICBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ubGVmdC5zdGFydCwgbWF0Y2hQb3NbaV0ubGVmdC5lbmQpLFxuICAgICAgICAgIHN0ci5zbGljZShtYXRjaFBvc1tpXS5yaWdodC5zdGFydCwgbWF0Y2hQb3NbaV0ucmlnaHQuZW5kKVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgaWYgKGkgPCBsbmcgLSAxKSB7XG4gICAgICAgIGJpdHMucHVzaChzdHIuc2xpY2UobWF0Y2hQb3NbaV0ud2hvbGVNYXRjaC5lbmQsIG1hdGNoUG9zW2kgKyAxXS53aG9sZU1hdGNoLnN0YXJ0KSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtYXRjaFBvc1tsbmcgLSAxXS53aG9sZU1hdGNoLmVuZCA8IHN0ci5sZW5ndGgpIHtcbiAgICAgIGJpdHMucHVzaChzdHIuc2xpY2UobWF0Y2hQb3NbbG5nIC0gMV0ud2hvbGVNYXRjaC5lbmQpKTtcbiAgICB9XG4gICAgZmluYWxTdHIgPSBiaXRzLmpvaW4oJycpO1xuICB9XG4gIHJldHVybiBmaW5hbFN0cjtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW5kZXggd2l0aGluIHRoZSBwYXNzZWQgU3RyaW5nIG9iamVjdCBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiB0aGUgc3BlY2lmaWVkIHJlZ2V4LFxuICogc3RhcnRpbmcgdGhlIHNlYXJjaCBhdCBmcm9tSW5kZXguIFJldHVybnMgLTEgaWYgdGhlIHZhbHVlIGlzIG5vdCBmb3VuZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIHN0cmluZyB0byBzZWFyY2hcbiAqIEBwYXJhbSB7UmVnRXhwfSByZWdleCBSZWd1bGFyIGV4cHJlc3Npb24gdG8gc2VhcmNoXG4gKiBAcGFyYW0ge2ludH0gW2Zyb21JbmRleCA9IDBdIEluZGV4IHRvIHN0YXJ0IHRoZSBzZWFyY2hcbiAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gKiBAdGhyb3dzIEludmFsaWRBcmd1bWVudEVycm9yXG4gKi9cbnNob3dkb3duLmhlbHBlci5yZWdleEluZGV4T2YgPSBmdW5jdGlvbiAoc3RyLCByZWdleCwgZnJvbUluZGV4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcoc3RyKSkge1xuICAgIHRocm93ICdJbnZhbGlkQXJndW1lbnRFcnJvcjogZmlyc3QgcGFyYW1ldGVyIG9mIHNob3dkb3duLmhlbHBlci5yZWdleEluZGV4T2YgZnVuY3Rpb24gbXVzdCBiZSBhIHN0cmluZyc7XG4gIH1cbiAgaWYgKHJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwID09PSBmYWxzZSkge1xuICAgIHRocm93ICdJbnZhbGlkQXJndW1lbnRFcnJvcjogc2Vjb25kIHBhcmFtZXRlciBvZiBzaG93ZG93bi5oZWxwZXIucmVnZXhJbmRleE9mIGZ1bmN0aW9uIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVnRXhwJztcbiAgfVxuICB2YXIgaW5kZXhPZiA9IHN0ci5zdWJzdHJpbmcoZnJvbUluZGV4IHx8IDApLnNlYXJjaChyZWdleCk7XG4gIHJldHVybiAoaW5kZXhPZiA+PSAwKSA/IChpbmRleE9mICsgKGZyb21JbmRleCB8fCAwKSkgOiBpbmRleE9mO1xufTtcblxuLyoqXG4gKiBTcGxpdHMgdGhlIHBhc3NlZCBzdHJpbmcgb2JqZWN0IGF0IHRoZSBkZWZpbmVkIGluZGV4LCBhbmQgcmV0dXJucyBhbiBhcnJheSBjb21wb3NlZCBvZiB0aGUgdHdvIHN1YnN0cmluZ3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgc3RyaW5nIHRvIHNwbGl0XG4gKiBAcGFyYW0ge2ludH0gaW5kZXggaW5kZXggdG8gc3BsaXQgc3RyaW5nIGF0XG4gKiBAcmV0dXJucyB7W3N0cmluZyxzdHJpbmddfVxuICogQHRocm93cyBJbnZhbGlkQXJndW1lbnRFcnJvclxuICovXG5zaG93ZG93bi5oZWxwZXIuc3BsaXRBdEluZGV4ID0gZnVuY3Rpb24gKHN0ciwgaW5kZXgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1N0cmluZyhzdHIpKSB7XG4gICAgdGhyb3cgJ0ludmFsaWRBcmd1bWVudEVycm9yOiBmaXJzdCBwYXJhbWV0ZXIgb2Ygc2hvd2Rvd24uaGVscGVyLnJlZ2V4SW5kZXhPZiBmdW5jdGlvbiBtdXN0IGJlIGEgc3RyaW5nJztcbiAgfVxuICByZXR1cm4gW3N0ci5zdWJzdHJpbmcoMCwgaW5kZXgpLCBzdHIuc3Vic3RyaW5nKGluZGV4KV07XG59O1xuXG4vKipcbiAqIE9iZnVzY2F0ZSBhbiBlLW1haWwgYWRkcmVzcyB0aHJvdWdoIHRoZSB1c2Ugb2YgQ2hhcmFjdGVyIEVudGl0aWVzLFxuICogdHJhbnNmb3JtaW5nIEFTQ0lJIGNoYXJhY3RlcnMgaW50byB0aGVpciBlcXVpdmFsZW50IGRlY2ltYWwgb3IgaGV4IGVudGl0aWVzLlxuICpcbiAqIFNpbmNlIGl0IGhhcyBhIHJhbmRvbSBjb21wb25lbnQsIHN1YnNlcXVlbnQgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbiBwcm9kdWNlIGRpZmZlcmVudCByZXN1bHRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1haWxcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnNob3dkb3duLmhlbHBlci5lbmNvZGVFbWFpbEFkZHJlc3MgPSBmdW5jdGlvbiAobWFpbCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBlbmNvZGUgPSBbXG4gICAgZnVuY3Rpb24gKGNoKSB7XG4gICAgICByZXR1cm4gJyYjJyArIGNoLmNoYXJDb2RlQXQoMCkgKyAnOyc7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoY2gpIHtcbiAgICAgIHJldHVybiAnJiN4JyArIGNoLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpICsgJzsnO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gKGNoKSB7XG4gICAgICByZXR1cm4gY2g7XG4gICAgfVxuICBdO1xuXG4gIG1haWwgPSBtYWlsLnJlcGxhY2UoLy4vZywgZnVuY3Rpb24gKGNoKSB7XG4gICAgaWYgKGNoID09PSAnQCcpIHtcbiAgICAgIC8vIHRoaXMgKm11c3QqIGJlIGVuY29kZWQuIEkgaW5zaXN0LlxuICAgICAgY2ggPSBlbmNvZGVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMildKGNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgLy8gcm91Z2hseSAxMCUgcmF3LCA0NSUgaGV4LCA0NSUgZGVjXG4gICAgICBjaCA9IChcbiAgICAgICAgciA+IDAuOSA/IGVuY29kZVsyXShjaCkgOiByID4gMC40NSA/IGVuY29kZVsxXShjaCkgOiBlbmNvZGVbMF0oY2gpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY2g7XG4gIH0pO1xuXG4gIHJldHVybiBtYWlsO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHN0clxuICogQHBhcmFtIHRhcmdldExlbmd0aFxuICogQHBhcmFtIHBhZFN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuc2hvd2Rvd24uaGVscGVyLnBhZEVuZCA9IGZ1bmN0aW9uIHBhZEVuZCAoc3RyLCB0YXJnZXRMZW5ndGgsIHBhZFN0cmluZykge1xuICAndXNlIHN0cmljdCc7XG4gIC8qanNoaW50IGJpdHdpc2U6IGZhbHNlKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHNwYWNlLWluZml4LW9wc1xuICB0YXJnZXRMZW5ndGggPSB0YXJnZXRMZW5ndGg+PjA7IC8vZmxvb3IgaWYgbnVtYmVyIG9yIGNvbnZlcnQgbm9uLW51bWJlciB0byAwO1xuICAvKmpzaGludCBiaXR3aXNlOiB0cnVlKi9cbiAgcGFkU3RyaW5nID0gU3RyaW5nKHBhZFN0cmluZyB8fCAnICcpO1xuICBpZiAoc3RyLmxlbmd0aCA+IHRhcmdldExlbmd0aCkge1xuICAgIHJldHVybiBTdHJpbmcoc3RyKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRMZW5ndGggPSB0YXJnZXRMZW5ndGggLSBzdHIubGVuZ3RoO1xuICAgIGlmICh0YXJnZXRMZW5ndGggPiBwYWRTdHJpbmcubGVuZ3RoKSB7XG4gICAgICBwYWRTdHJpbmcgKz0gcGFkU3RyaW5nLnJlcGVhdCh0YXJnZXRMZW5ndGggLyBwYWRTdHJpbmcubGVuZ3RoKTsgLy9hcHBlbmQgdG8gb3JpZ2luYWwgdG8gZW5zdXJlIHdlIGFyZSBsb25nZXIgdGhhbiBuZWVkZWRcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhzdHIpICsgcGFkU3RyaW5nLnNsaWNlKDAsdGFyZ2V0TGVuZ3RoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQT0xZRklMTFNcbiAqL1xuLy8gdXNlIHRoaXMgaW5zdGVhZCBvZiBidWlsdGluIGlzIHVuZGVmaW5lZCBmb3IgSUU4IGNvbXBhdGliaWxpdHlcbmlmICh0eXBlb2YgKGNvbnNvbGUpID09PSAndW5kZWZpbmVkJykge1xuICBjb25zb2xlID0ge1xuICAgIHdhcm46IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIGFsZXJ0KG1zZyk7XG4gICAgfSxcbiAgICBsb2c6IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIGFsZXJ0KG1zZyk7XG4gICAgfSxcbiAgICBlcnJvcjogZnVuY3Rpb24gKG1zZykge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdGhyb3cgbXNnO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBDb21tb24gcmVnZXhlcy5cbiAqIFdlIGRlY2xhcmUgc29tZSBjb21tb24gcmVnZXhlcyB0byBpbXByb3ZlIHBlcmZvcm1hbmNlXG4gKi9cbnNob3dkb3duLmhlbHBlci5yZWdleGVzID0ge1xuICBhc3Rlcmlza0Rhc2hBbmRDb2xvbjogLyhbKl86fl0pL2dcbn07XG5cbi8qKlxuICogRU1PSklTIExJU1RcbiAqL1xuc2hvd2Rvd24uaGVscGVyLmVtb2ppcyA9IHtcbiAgJysxJzonXFx1ZDgzZFxcdWRjNGQnLFxuICAnLTEnOidcXHVkODNkXFx1ZGM0ZScsXG4gICcxMDAnOidcXHVkODNkXFx1ZGNhZicsXG4gICcxMjM0JzonXFx1ZDgzZFxcdWRkMjInLFxuICAnMXN0X3BsYWNlX21lZGFsJzonXFx1ZDgzZVxcdWRkNDcnLFxuICAnMm5kX3BsYWNlX21lZGFsJzonXFx1ZDgzZVxcdWRkNDgnLFxuICAnM3JkX3BsYWNlX21lZGFsJzonXFx1ZDgzZVxcdWRkNDknLFxuICAnOGJhbGwnOidcXHVkODNjXFx1ZGZiMScsXG4gICdhJzonXFx1ZDgzY1xcdWRkNzBcXHVmZTBmJyxcbiAgJ2FiJzonXFx1ZDgzY1xcdWRkOGUnLFxuICAnYWJjJzonXFx1ZDgzZFxcdWRkMjQnLFxuICAnYWJjZCc6J1xcdWQ4M2RcXHVkZDIxJyxcbiAgJ2FjY2VwdCc6J1xcdWQ4M2NcXHVkZTUxJyxcbiAgJ2FlcmlhbF90cmFtd2F5JzonXFx1ZDgzZFxcdWRlYTEnLFxuICAnYWlycGxhbmUnOidcXHUyNzA4XFx1ZmUwZicsXG4gICdhbGFybV9jbG9jayc6J1xcdTIzZjAnLFxuICAnYWxlbWJpYyc6J1xcdTI2OTdcXHVmZTBmJyxcbiAgJ2FsaWVuJzonXFx1ZDgzZFxcdWRjN2QnLFxuICAnYW1idWxhbmNlJzonXFx1ZDgzZFxcdWRlOTEnLFxuICAnYW1waG9yYSc6J1xcdWQ4M2NcXHVkZmZhJyxcbiAgJ2FuY2hvcic6J1xcdTI2OTNcXHVmZTBmJyxcbiAgJ2FuZ2VsJzonXFx1ZDgzZFxcdWRjN2MnLFxuICAnYW5nZXInOidcXHVkODNkXFx1ZGNhMicsXG4gICdhbmdyeSc6J1xcdWQ4M2RcXHVkZTIwJyxcbiAgJ2FuZ3Vpc2hlZCc6J1xcdWQ4M2RcXHVkZTI3JyxcbiAgJ2FudCc6J1xcdWQ4M2RcXHVkYzFjJyxcbiAgJ2FwcGxlJzonXFx1ZDgzY1xcdWRmNGUnLFxuICAnYXF1YXJpdXMnOidcXHUyNjUyXFx1ZmUwZicsXG4gICdhcmllcyc6J1xcdTI2NDhcXHVmZTBmJyxcbiAgJ2Fycm93X2JhY2t3YXJkJzonXFx1MjVjMFxcdWZlMGYnLFxuICAnYXJyb3dfZG91YmxlX2Rvd24nOidcXHUyM2VjJyxcbiAgJ2Fycm93X2RvdWJsZV91cCc6J1xcdTIzZWInLFxuICAnYXJyb3dfZG93bic6J1xcdTJiMDdcXHVmZTBmJyxcbiAgJ2Fycm93X2Rvd25fc21hbGwnOidcXHVkODNkXFx1ZGQzZCcsXG4gICdhcnJvd19mb3J3YXJkJzonXFx1MjViNlxcdWZlMGYnLFxuICAnYXJyb3dfaGVhZGluZ19kb3duJzonXFx1MjkzNVxcdWZlMGYnLFxuICAnYXJyb3dfaGVhZGluZ191cCc6J1xcdTI5MzRcXHVmZTBmJyxcbiAgJ2Fycm93X2xlZnQnOidcXHUyYjA1XFx1ZmUwZicsXG4gICdhcnJvd19sb3dlcl9sZWZ0JzonXFx1MjE5OVxcdWZlMGYnLFxuICAnYXJyb3dfbG93ZXJfcmlnaHQnOidcXHUyMTk4XFx1ZmUwZicsXG4gICdhcnJvd19yaWdodCc6J1xcdTI3YTFcXHVmZTBmJyxcbiAgJ2Fycm93X3JpZ2h0X2hvb2snOidcXHUyMWFhXFx1ZmUwZicsXG4gICdhcnJvd191cCc6J1xcdTJiMDZcXHVmZTBmJyxcbiAgJ2Fycm93X3VwX2Rvd24nOidcXHUyMTk1XFx1ZmUwZicsXG4gICdhcnJvd191cF9zbWFsbCc6J1xcdWQ4M2RcXHVkZDNjJyxcbiAgJ2Fycm93X3VwcGVyX2xlZnQnOidcXHUyMTk2XFx1ZmUwZicsXG4gICdhcnJvd191cHBlcl9yaWdodCc6J1xcdTIxOTdcXHVmZTBmJyxcbiAgJ2Fycm93c19jbG9ja3dpc2UnOidcXHVkODNkXFx1ZGQwMycsXG4gICdhcnJvd3NfY291bnRlcmNsb2Nrd2lzZSc6J1xcdWQ4M2RcXHVkZDA0JyxcbiAgJ2FydCc6J1xcdWQ4M2NcXHVkZmE4JyxcbiAgJ2FydGljdWxhdGVkX2xvcnJ5JzonXFx1ZDgzZFxcdWRlOWInLFxuICAnYXJ0aWZpY2lhbF9zYXRlbGxpdGUnOidcXHVkODNkXFx1ZGVmMCcsXG4gICdhc3RvbmlzaGVkJzonXFx1ZDgzZFxcdWRlMzInLFxuICAnYXRobGV0aWNfc2hvZSc6J1xcdWQ4M2RcXHVkYzVmJyxcbiAgJ2F0bSc6J1xcdWQ4M2NcXHVkZmU3JyxcbiAgJ2F0b21fc3ltYm9sJzonXFx1MjY5YlxcdWZlMGYnLFxuICAnYXZvY2Fkbyc6J1xcdWQ4M2VcXHVkZDUxJyxcbiAgJ2InOidcXHVkODNjXFx1ZGQ3MVxcdWZlMGYnLFxuICAnYmFieSc6J1xcdWQ4M2RcXHVkYzc2JyxcbiAgJ2JhYnlfYm90dGxlJzonXFx1ZDgzY1xcdWRmN2MnLFxuICAnYmFieV9jaGljayc6J1xcdWQ4M2RcXHVkYzI0JyxcbiAgJ2JhYnlfc3ltYm9sJzonXFx1ZDgzZFxcdWRlYmMnLFxuICAnYmFjayc6J1xcdWQ4M2RcXHVkZDE5JyxcbiAgJ2JhY29uJzonXFx1ZDgzZVxcdWRkNTMnLFxuICAnYmFkbWludG9uJzonXFx1ZDgzY1xcdWRmZjgnLFxuICAnYmFnZ2FnZV9jbGFpbSc6J1xcdWQ4M2RcXHVkZWM0JyxcbiAgJ2JhZ3VldHRlX2JyZWFkJzonXFx1ZDgzZVxcdWRkNTYnLFxuICAnYmFsYW5jZV9zY2FsZSc6J1xcdTI2OTZcXHVmZTBmJyxcbiAgJ2JhbGxvb24nOidcXHVkODNjXFx1ZGY4OCcsXG4gICdiYWxsb3RfYm94JzonXFx1ZDgzZFxcdWRkZjMnLFxuICAnYmFsbG90X2JveF93aXRoX2NoZWNrJzonXFx1MjYxMVxcdWZlMGYnLFxuICAnYmFtYm9vJzonXFx1ZDgzY1xcdWRmOGQnLFxuICAnYmFuYW5hJzonXFx1ZDgzY1xcdWRmNGMnLFxuICAnYmFuZ2JhbmcnOidcXHUyMDNjXFx1ZmUwZicsXG4gICdiYW5rJzonXFx1ZDgzY1xcdWRmZTYnLFxuICAnYmFyX2NoYXJ0JzonXFx1ZDgzZFxcdWRjY2EnLFxuICAnYmFyYmVyJzonXFx1ZDgzZFxcdWRjODgnLFxuICAnYmFzZWJhbGwnOidcXHUyNmJlXFx1ZmUwZicsXG4gICdiYXNrZXRiYWxsJzonXFx1ZDgzY1xcdWRmYzAnLFxuICAnYmFza2V0YmFsbF9tYW4nOidcXHUyNmY5XFx1ZmUwZicsXG4gICdiYXNrZXRiYWxsX3dvbWFuJzonXFx1MjZmOVxcdWZlMGYmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ2JhdCc6J1xcdWQ4M2VcXHVkZDg3JyxcbiAgJ2JhdGgnOidcXHVkODNkXFx1ZGVjMCcsXG4gICdiYXRodHViJzonXFx1ZDgzZFxcdWRlYzEnLFxuICAnYmF0dGVyeSc6J1xcdWQ4M2RcXHVkZDBiJyxcbiAgJ2JlYWNoX3VtYnJlbGxhJzonXFx1ZDgzY1xcdWRmZDYnLFxuICAnYmVhcic6J1xcdWQ4M2RcXHVkYzNiJyxcbiAgJ2JlZCc6J1xcdWQ4M2RcXHVkZWNmJyxcbiAgJ2JlZSc6J1xcdWQ4M2RcXHVkYzFkJyxcbiAgJ2JlZXInOidcXHVkODNjXFx1ZGY3YScsXG4gICdiZWVycyc6J1xcdWQ4M2NcXHVkZjdiJyxcbiAgJ2JlZXRsZSc6J1xcdWQ4M2RcXHVkYzFlJyxcbiAgJ2JlZ2lubmVyJzonXFx1ZDgzZFxcdWRkMzAnLFxuICAnYmVsbCc6J1xcdWQ4M2RcXHVkZDE0JyxcbiAgJ2JlbGxob3BfYmVsbCc6J1xcdWQ4M2RcXHVkZWNlJyxcbiAgJ2JlbnRvJzonXFx1ZDgzY1xcdWRmNzEnLFxuICAnYmlraW5nX21hbic6J1xcdWQ4M2RcXHVkZWI0JyxcbiAgJ2Jpa2UnOidcXHVkODNkXFx1ZGViMicsXG4gICdiaWtpbmdfd29tYW4nOidcXHVkODNkXFx1ZGViNCZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnYmlraW5pJzonXFx1ZDgzZFxcdWRjNTknLFxuICAnYmlvaGF6YXJkJzonXFx1MjYyM1xcdWZlMGYnLFxuICAnYmlyZCc6J1xcdWQ4M2RcXHVkYzI2JyxcbiAgJ2JpcnRoZGF5JzonXFx1ZDgzY1xcdWRmODInLFxuICAnYmxhY2tfY2lyY2xlJzonXFx1MjZhYlxcdWZlMGYnLFxuICAnYmxhY2tfZmxhZyc6J1xcdWQ4M2NcXHVkZmY0JyxcbiAgJ2JsYWNrX2hlYXJ0JzonXFx1ZDgzZFxcdWRkYTQnLFxuICAnYmxhY2tfam9rZXInOidcXHVkODNjXFx1ZGNjZicsXG4gICdibGFja19sYXJnZV9zcXVhcmUnOidcXHUyYjFiXFx1ZmUwZicsXG4gICdibGFja19tZWRpdW1fc21hbGxfc3F1YXJlJzonXFx1MjVmZVxcdWZlMGYnLFxuICAnYmxhY2tfbWVkaXVtX3NxdWFyZSc6J1xcdTI1ZmNcXHVmZTBmJyxcbiAgJ2JsYWNrX25pYic6J1xcdTI3MTJcXHVmZTBmJyxcbiAgJ2JsYWNrX3NtYWxsX3NxdWFyZSc6J1xcdTI1YWFcXHVmZTBmJyxcbiAgJ2JsYWNrX3NxdWFyZV9idXR0b24nOidcXHVkODNkXFx1ZGQzMicsXG4gICdibG9uZGVfbWFuJzonXFx1ZDgzZFxcdWRjNzEnLFxuICAnYmxvbmRlX3dvbWFuJzonXFx1ZDgzZFxcdWRjNzEmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ2Jsb3Nzb20nOidcXHVkODNjXFx1ZGYzYycsXG4gICdibG93ZmlzaCc6J1xcdWQ4M2RcXHVkYzIxJyxcbiAgJ2JsdWVfYm9vayc6J1xcdWQ4M2RcXHVkY2Q4JyxcbiAgJ2JsdWVfY2FyJzonXFx1ZDgzZFxcdWRlOTknLFxuICAnYmx1ZV9oZWFydCc6J1xcdWQ4M2RcXHVkYzk5JyxcbiAgJ2JsdXNoJzonXFx1ZDgzZFxcdWRlMGEnLFxuICAnYm9hcic6J1xcdWQ4M2RcXHVkYzE3JyxcbiAgJ2JvYXQnOidcXHUyNmY1XFx1ZmUwZicsXG4gICdib21iJzonXFx1ZDgzZFxcdWRjYTMnLFxuICAnYm9vayc6J1xcdWQ4M2RcXHVkY2Q2JyxcbiAgJ2Jvb2ttYXJrJzonXFx1ZDgzZFxcdWRkMTYnLFxuICAnYm9va21hcmtfdGFicyc6J1xcdWQ4M2RcXHVkY2QxJyxcbiAgJ2Jvb2tzJzonXFx1ZDgzZFxcdWRjZGEnLFxuICAnYm9vbSc6J1xcdWQ4M2RcXHVkY2E1JyxcbiAgJ2Jvb3QnOidcXHVkODNkXFx1ZGM2MicsXG4gICdib3VxdWV0JzonXFx1ZDgzZFxcdWRjOTAnLFxuICAnYm93aW5nX21hbic6J1xcdWQ4M2RcXHVkZTQ3JyxcbiAgJ2Jvd19hbmRfYXJyb3cnOidcXHVkODNjXFx1ZGZmOScsXG4gICdib3dpbmdfd29tYW4nOidcXHVkODNkXFx1ZGU0NyZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnYm93bGluZyc6J1xcdWQ4M2NcXHVkZmIzJyxcbiAgJ2JveGluZ19nbG92ZSc6J1xcdWQ4M2VcXHVkZDRhJyxcbiAgJ2JveSc6J1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2JyZWFkJzonXFx1ZDgzY1xcdWRmNWUnLFxuICAnYnJpZGVfd2l0aF92ZWlsJzonXFx1ZDgzZFxcdWRjNzAnLFxuICAnYnJpZGdlX2F0X25pZ2h0JzonXFx1ZDgzY1xcdWRmMDknLFxuICAnYnJpZWZjYXNlJzonXFx1ZDgzZFxcdWRjYmMnLFxuICAnYnJva2VuX2hlYXJ0JzonXFx1ZDgzZFxcdWRjOTQnLFxuICAnYnVnJzonXFx1ZDgzZFxcdWRjMWInLFxuICAnYnVpbGRpbmdfY29uc3RydWN0aW9uJzonXFx1ZDgzY1xcdWRmZDcnLFxuICAnYnVsYic6J1xcdWQ4M2RcXHVkY2ExJyxcbiAgJ2J1bGxldHRyYWluX2Zyb250JzonXFx1ZDgzZFxcdWRlODUnLFxuICAnYnVsbGV0dHJhaW5fc2lkZSc6J1xcdWQ4M2RcXHVkZTg0JyxcbiAgJ2J1cnJpdG8nOidcXHVkODNjXFx1ZGYyZicsXG4gICdidXMnOidcXHVkODNkXFx1ZGU4YycsXG4gICdidXNpbmVzc19zdWl0X2xldml0YXRpbmcnOidcXHVkODNkXFx1ZGQ3NCcsXG4gICdidXNzdG9wJzonXFx1ZDgzZFxcdWRlOGYnLFxuICAnYnVzdF9pbl9zaWxob3VldHRlJzonXFx1ZDgzZFxcdWRjNjQnLFxuICAnYnVzdHNfaW5fc2lsaG91ZXR0ZSc6J1xcdWQ4M2RcXHVkYzY1JyxcbiAgJ2J1dHRlcmZseSc6J1xcdWQ4M2VcXHVkZDhiJyxcbiAgJ2NhY3R1cyc6J1xcdWQ4M2NcXHVkZjM1JyxcbiAgJ2Nha2UnOidcXHVkODNjXFx1ZGY3MCcsXG4gICdjYWxlbmRhcic6J1xcdWQ4M2RcXHVkY2M2JyxcbiAgJ2NhbGxfbWVfaGFuZCc6J1xcdWQ4M2VcXHVkZDE5JyxcbiAgJ2NhbGxpbmcnOidcXHVkODNkXFx1ZGNmMicsXG4gICdjYW1lbCc6J1xcdWQ4M2RcXHVkYzJiJyxcbiAgJ2NhbWVyYSc6J1xcdWQ4M2RcXHVkY2Y3JyxcbiAgJ2NhbWVyYV9mbGFzaCc6J1xcdWQ4M2RcXHVkY2Y4JyxcbiAgJ2NhbXBpbmcnOidcXHVkODNjXFx1ZGZkNScsXG4gICdjYW5jZXInOidcXHUyNjRiXFx1ZmUwZicsXG4gICdjYW5kbGUnOidcXHVkODNkXFx1ZGQ2ZicsXG4gICdjYW5keSc6J1xcdWQ4M2NcXHVkZjZjJyxcbiAgJ2Nhbm9lJzonXFx1ZDgzZFxcdWRlZjYnLFxuICAnY2FwaXRhbF9hYmNkJzonXFx1ZDgzZFxcdWRkMjAnLFxuICAnY2Fwcmljb3JuJzonXFx1MjY1MVxcdWZlMGYnLFxuICAnY2FyJzonXFx1ZDgzZFxcdWRlOTcnLFxuICAnY2FyZF9maWxlX2JveCc6J1xcdWQ4M2RcXHVkZGMzJyxcbiAgJ2NhcmRfaW5kZXgnOidcXHVkODNkXFx1ZGNjNycsXG4gICdjYXJkX2luZGV4X2RpdmlkZXJzJzonXFx1ZDgzZFxcdWRkYzInLFxuICAnY2Fyb3VzZWxfaG9yc2UnOidcXHVkODNjXFx1ZGZhMCcsXG4gICdjYXJyb3QnOidcXHVkODNlXFx1ZGQ1NScsXG4gICdjYXQnOidcXHVkODNkXFx1ZGMzMScsXG4gICdjYXQyJzonXFx1ZDgzZFxcdWRjMDgnLFxuICAnY2QnOidcXHVkODNkXFx1ZGNiZicsXG4gICdjaGFpbnMnOidcXHUyNmQzJyxcbiAgJ2NoYW1wYWduZSc6J1xcdWQ4M2NcXHVkZjdlJyxcbiAgJ2NoYXJ0JzonXFx1ZDgzZFxcdWRjYjknLFxuICAnY2hhcnRfd2l0aF9kb3dud2FyZHNfdHJlbmQnOidcXHVkODNkXFx1ZGNjOScsXG4gICdjaGFydF93aXRoX3Vwd2FyZHNfdHJlbmQnOidcXHVkODNkXFx1ZGNjOCcsXG4gICdjaGVja2VyZWRfZmxhZyc6J1xcdWQ4M2NcXHVkZmMxJyxcbiAgJ2NoZWVzZSc6J1xcdWQ4M2VcXHVkZGMwJyxcbiAgJ2NoZXJyaWVzJzonXFx1ZDgzY1xcdWRmNTInLFxuICAnY2hlcnJ5X2Jsb3Nzb20nOidcXHVkODNjXFx1ZGYzOCcsXG4gICdjaGVzdG51dCc6J1xcdWQ4M2NcXHVkZjMwJyxcbiAgJ2NoaWNrZW4nOidcXHVkODNkXFx1ZGMxNCcsXG4gICdjaGlsZHJlbl9jcm9zc2luZyc6J1xcdWQ4M2RcXHVkZWI4JyxcbiAgJ2NoaXBtdW5rJzonXFx1ZDgzZFxcdWRjM2YnLFxuICAnY2hvY29sYXRlX2Jhcic6J1xcdWQ4M2NcXHVkZjZiJyxcbiAgJ2NocmlzdG1hc190cmVlJzonXFx1ZDgzY1xcdWRmODQnLFxuICAnY2h1cmNoJzonXFx1MjZlYVxcdWZlMGYnLFxuICAnY2luZW1hJzonXFx1ZDgzY1xcdWRmYTYnLFxuICAnY2lyY3VzX3RlbnQnOidcXHVkODNjXFx1ZGZhYScsXG4gICdjaXR5X3N1bnJpc2UnOidcXHVkODNjXFx1ZGYwNycsXG4gICdjaXR5X3N1bnNldCc6J1xcdWQ4M2NcXHVkZjA2JyxcbiAgJ2NpdHlzY2FwZSc6J1xcdWQ4M2NcXHVkZmQ5JyxcbiAgJ2NsJzonXFx1ZDgzY1xcdWRkOTEnLFxuICAnY2xhbXAnOidcXHVkODNkXFx1ZGRkYycsXG4gICdjbGFwJzonXFx1ZDgzZFxcdWRjNGYnLFxuICAnY2xhcHBlcic6J1xcdWQ4M2NcXHVkZmFjJyxcbiAgJ2NsYXNzaWNhbF9idWlsZGluZyc6J1xcdWQ4M2NcXHVkZmRiJyxcbiAgJ2NsaW5raW5nX2dsYXNzZXMnOidcXHVkODNlXFx1ZGQ0MicsXG4gICdjbGlwYm9hcmQnOidcXHVkODNkXFx1ZGNjYicsXG4gICdjbG9jazEnOidcXHVkODNkXFx1ZGQ1MCcsXG4gICdjbG9jazEwJzonXFx1ZDgzZFxcdWRkNTknLFxuICAnY2xvY2sxMDMwJzonXFx1ZDgzZFxcdWRkNjUnLFxuICAnY2xvY2sxMSc6J1xcdWQ4M2RcXHVkZDVhJyxcbiAgJ2Nsb2NrMTEzMCc6J1xcdWQ4M2RcXHVkZDY2JyxcbiAgJ2Nsb2NrMTInOidcXHVkODNkXFx1ZGQ1YicsXG4gICdjbG9jazEyMzAnOidcXHVkODNkXFx1ZGQ2NycsXG4gICdjbG9jazEzMCc6J1xcdWQ4M2RcXHVkZDVjJyxcbiAgJ2Nsb2NrMic6J1xcdWQ4M2RcXHVkZDUxJyxcbiAgJ2Nsb2NrMjMwJzonXFx1ZDgzZFxcdWRkNWQnLFxuICAnY2xvY2szJzonXFx1ZDgzZFxcdWRkNTInLFxuICAnY2xvY2szMzAnOidcXHVkODNkXFx1ZGQ1ZScsXG4gICdjbG9jazQnOidcXHVkODNkXFx1ZGQ1MycsXG4gICdjbG9jazQzMCc6J1xcdWQ4M2RcXHVkZDVmJyxcbiAgJ2Nsb2NrNSc6J1xcdWQ4M2RcXHVkZDU0JyxcbiAgJ2Nsb2NrNTMwJzonXFx1ZDgzZFxcdWRkNjAnLFxuICAnY2xvY2s2JzonXFx1ZDgzZFxcdWRkNTUnLFxuICAnY2xvY2s2MzAnOidcXHVkODNkXFx1ZGQ2MScsXG4gICdjbG9jazcnOidcXHVkODNkXFx1ZGQ1NicsXG4gICdjbG9jazczMCc6J1xcdWQ4M2RcXHVkZDYyJyxcbiAgJ2Nsb2NrOCc6J1xcdWQ4M2RcXHVkZDU3JyxcbiAgJ2Nsb2NrODMwJzonXFx1ZDgzZFxcdWRkNjMnLFxuICAnY2xvY2s5JzonXFx1ZDgzZFxcdWRkNTgnLFxuICAnY2xvY2s5MzAnOidcXHVkODNkXFx1ZGQ2NCcsXG4gICdjbG9zZWRfYm9vayc6J1xcdWQ4M2RcXHVkY2Q1JyxcbiAgJ2Nsb3NlZF9sb2NrX3dpdGhfa2V5JzonXFx1ZDgzZFxcdWRkMTAnLFxuICAnY2xvc2VkX3VtYnJlbGxhJzonXFx1ZDgzY1xcdWRmMDInLFxuICAnY2xvdWQnOidcXHUyNjAxXFx1ZmUwZicsXG4gICdjbG91ZF93aXRoX2xpZ2h0bmluZyc6J1xcdWQ4M2NcXHVkZjI5JyxcbiAgJ2Nsb3VkX3dpdGhfbGlnaHRuaW5nX2FuZF9yYWluJzonXFx1MjZjOCcsXG4gICdjbG91ZF93aXRoX3JhaW4nOidcXHVkODNjXFx1ZGYyNycsXG4gICdjbG91ZF93aXRoX3Nub3cnOidcXHVkODNjXFx1ZGYyOCcsXG4gICdjbG93bl9mYWNlJzonXFx1ZDgzZVxcdWRkMjEnLFxuICAnY2x1YnMnOidcXHUyNjYzXFx1ZmUwZicsXG4gICdjb2NrdGFpbCc6J1xcdWQ4M2NcXHVkZjc4JyxcbiAgJ2NvZmZlZSc6J1xcdTI2MTVcXHVmZTBmJyxcbiAgJ2NvZmZpbic6J1xcdTI2YjBcXHVmZTBmJyxcbiAgJ2NvbGRfc3dlYXQnOidcXHVkODNkXFx1ZGUzMCcsXG4gICdjb21ldCc6J1xcdTI2MDRcXHVmZTBmJyxcbiAgJ2NvbXB1dGVyJzonXFx1ZDgzZFxcdWRjYmInLFxuICAnY29tcHV0ZXJfbW91c2UnOidcXHVkODNkXFx1ZGRiMScsXG4gICdjb25mZXR0aV9iYWxsJzonXFx1ZDgzY1xcdWRmOGEnLFxuICAnY29uZm91bmRlZCc6J1xcdWQ4M2RcXHVkZTE2JyxcbiAgJ2NvbmZ1c2VkJzonXFx1ZDgzZFxcdWRlMTUnLFxuICAnY29uZ3JhdHVsYXRpb25zJzonXFx1MzI5N1xcdWZlMGYnLFxuICAnY29uc3RydWN0aW9uJzonXFx1ZDgzZFxcdWRlYTcnLFxuICAnY29uc3RydWN0aW9uX3dvcmtlcl9tYW4nOidcXHVkODNkXFx1ZGM3NycsXG4gICdjb25zdHJ1Y3Rpb25fd29ya2VyX3dvbWFuJzonXFx1ZDgzZFxcdWRjNzcmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ2NvbnRyb2xfa25vYnMnOidcXHVkODNjXFx1ZGY5YicsXG4gICdjb252ZW5pZW5jZV9zdG9yZSc6J1xcdWQ4M2NcXHVkZmVhJyxcbiAgJ2Nvb2tpZSc6J1xcdWQ4M2NcXHVkZjZhJyxcbiAgJ2Nvb2wnOidcXHVkODNjXFx1ZGQ5MicsXG4gICdwb2xpY2VtYW4nOidcXHVkODNkXFx1ZGM2ZScsXG4gICdjb3B5cmlnaHQnOidcXHUwMGE5XFx1ZmUwZicsXG4gICdjb3JuJzonXFx1ZDgzY1xcdWRmM2QnLFxuICAnY291Y2hfYW5kX2xhbXAnOidcXHVkODNkXFx1ZGVjYicsXG4gICdjb3VwbGUnOidcXHVkODNkXFx1ZGM2YicsXG4gICdjb3VwbGVfd2l0aF9oZWFydF93b21hbl9tYW4nOidcXHVkODNkXFx1ZGM5MScsXG4gICdjb3VwbGVfd2l0aF9oZWFydF9tYW5fbWFuJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdTI3NjRcXHVmZTBmJnp3ajtcXHVkODNkXFx1ZGM2OCcsXG4gICdjb3VwbGVfd2l0aF9oZWFydF93b21hbl93b21hbic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHUyNzY0XFx1ZmUwZiZ6d2o7XFx1ZDgzZFxcdWRjNjknLFxuICAnY291cGxla2lzc19tYW5fbWFuJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdTI3NjRcXHVmZTBmJnp3ajtcXHVkODNkXFx1ZGM4YiZ6d2o7XFx1ZDgzZFxcdWRjNjgnLFxuICAnY291cGxla2lzc19tYW5fd29tYW4nOidcXHVkODNkXFx1ZGM4ZicsXG4gICdjb3VwbGVraXNzX3dvbWFuX3dvbWFuJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdTI3NjRcXHVmZTBmJnp3ajtcXHVkODNkXFx1ZGM4YiZ6d2o7XFx1ZDgzZFxcdWRjNjknLFxuICAnY293JzonXFx1ZDgzZFxcdWRjMmUnLFxuICAnY293Mic6J1xcdWQ4M2RcXHVkYzA0JyxcbiAgJ2Nvd2JveV9oYXRfZmFjZSc6J1xcdWQ4M2VcXHVkZDIwJyxcbiAgJ2NyYWInOidcXHVkODNlXFx1ZGQ4MCcsXG4gICdjcmF5b24nOidcXHVkODNkXFx1ZGQ4ZCcsXG4gICdjcmVkaXRfY2FyZCc6J1xcdWQ4M2RcXHVkY2IzJyxcbiAgJ2NyZXNjZW50X21vb24nOidcXHVkODNjXFx1ZGYxOScsXG4gICdjcmlja2V0JzonXFx1ZDgzY1xcdWRmY2YnLFxuICAnY3JvY29kaWxlJzonXFx1ZDgzZFxcdWRjMGEnLFxuICAnY3JvaXNzYW50JzonXFx1ZDgzZVxcdWRkNTAnLFxuICAnY3Jvc3NlZF9maW5nZXJzJzonXFx1ZDgzZVxcdWRkMWUnLFxuICAnY3Jvc3NlZF9mbGFncyc6J1xcdWQ4M2NcXHVkZjhjJyxcbiAgJ2Nyb3NzZWRfc3dvcmRzJzonXFx1MjY5NFxcdWZlMGYnLFxuICAnY3Jvd24nOidcXHVkODNkXFx1ZGM1MScsXG4gICdjcnknOidcXHVkODNkXFx1ZGUyMicsXG4gICdjcnlpbmdfY2F0X2ZhY2UnOidcXHVkODNkXFx1ZGUzZicsXG4gICdjcnlzdGFsX2JhbGwnOidcXHVkODNkXFx1ZGQyZScsXG4gICdjdWN1bWJlcic6J1xcdWQ4M2VcXHVkZDUyJyxcbiAgJ2N1cGlkJzonXFx1ZDgzZFxcdWRjOTgnLFxuICAnY3VybHlfbG9vcCc6J1xcdTI3YjAnLFxuICAnY3VycmVuY3lfZXhjaGFuZ2UnOidcXHVkODNkXFx1ZGNiMScsXG4gICdjdXJyeSc6J1xcdWQ4M2NcXHVkZjViJyxcbiAgJ2N1c3RhcmQnOidcXHVkODNjXFx1ZGY2ZScsXG4gICdjdXN0b21zJzonXFx1ZDgzZFxcdWRlYzMnLFxuICAnY3ljbG9uZSc6J1xcdWQ4M2NcXHVkZjAwJyxcbiAgJ2RhZ2dlcic6J1xcdWQ4M2RcXHVkZGUxJyxcbiAgJ2RhbmNlcic6J1xcdWQ4M2RcXHVkYzgzJyxcbiAgJ2RhbmNpbmdfd29tZW4nOidcXHVkODNkXFx1ZGM2ZicsXG4gICdkYW5jaW5nX21lbic6J1xcdWQ4M2RcXHVkYzZmJnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdkYW5nbyc6J1xcdWQ4M2NcXHVkZjYxJyxcbiAgJ2Rhcmtfc3VuZ2xhc3Nlcyc6J1xcdWQ4M2RcXHVkZDc2JyxcbiAgJ2RhcnQnOidcXHVkODNjXFx1ZGZhZicsXG4gICdkYXNoJzonXFx1ZDgzZFxcdWRjYTgnLFxuICAnZGF0ZSc6J1xcdWQ4M2RcXHVkY2M1JyxcbiAgJ2RlY2lkdW91c190cmVlJzonXFx1ZDgzY1xcdWRmMzMnLFxuICAnZGVlcic6J1xcdWQ4M2VcXHVkZDhjJyxcbiAgJ2RlcGFydG1lbnRfc3RvcmUnOidcXHVkODNjXFx1ZGZlYycsXG4gICdkZXJlbGljdF9ob3VzZSc6J1xcdWQ4M2NcXHVkZmRhJyxcbiAgJ2Rlc2VydCc6J1xcdWQ4M2NcXHVkZmRjJyxcbiAgJ2Rlc2VydF9pc2xhbmQnOidcXHVkODNjXFx1ZGZkZCcsXG4gICdkZXNrdG9wX2NvbXB1dGVyJzonXFx1ZDgzZFxcdWRkYTUnLFxuICAnbWFsZV9kZXRlY3RpdmUnOidcXHVkODNkXFx1ZGQ3NVxcdWZlMGYnLFxuICAnZGlhbW9uZF9zaGFwZV93aXRoX2FfZG90X2luc2lkZSc6J1xcdWQ4M2RcXHVkY2EwJyxcbiAgJ2RpYW1vbmRzJzonXFx1MjY2NlxcdWZlMGYnLFxuICAnZGlzYXBwb2ludGVkJzonXFx1ZDgzZFxcdWRlMWUnLFxuICAnZGlzYXBwb2ludGVkX3JlbGlldmVkJzonXFx1ZDgzZFxcdWRlMjUnLFxuICAnZGl6enknOidcXHVkODNkXFx1ZGNhYicsXG4gICdkaXp6eV9mYWNlJzonXFx1ZDgzZFxcdWRlMzUnLFxuICAnZG9fbm90X2xpdHRlcic6J1xcdWQ4M2RcXHVkZWFmJyxcbiAgJ2RvZyc6J1xcdWQ4M2RcXHVkYzM2JyxcbiAgJ2RvZzInOidcXHVkODNkXFx1ZGMxNScsXG4gICdkb2xsYXInOidcXHVkODNkXFx1ZGNiNScsXG4gICdkb2xscyc6J1xcdWQ4M2NcXHVkZjhlJyxcbiAgJ2RvbHBoaW4nOidcXHVkODNkXFx1ZGMyYycsXG4gICdkb29yJzonXFx1ZDgzZFxcdWRlYWEnLFxuICAnZG91Z2hudXQnOidcXHVkODNjXFx1ZGY2OScsXG4gICdkb3ZlJzonXFx1ZDgzZFxcdWRkNGEnLFxuICAnZHJhZ29uJzonXFx1ZDgzZFxcdWRjMDknLFxuICAnZHJhZ29uX2ZhY2UnOidcXHVkODNkXFx1ZGMzMicsXG4gICdkcmVzcyc6J1xcdWQ4M2RcXHVkYzU3JyxcbiAgJ2Ryb21lZGFyeV9jYW1lbCc6J1xcdWQ4M2RcXHVkYzJhJyxcbiAgJ2Ryb29saW5nX2ZhY2UnOidcXHVkODNlXFx1ZGQyNCcsXG4gICdkcm9wbGV0JzonXFx1ZDgzZFxcdWRjYTcnLFxuICAnZHJ1bSc6J1xcdWQ4M2VcXHVkZDQxJyxcbiAgJ2R1Y2snOidcXHVkODNlXFx1ZGQ4NicsXG4gICdkdmQnOidcXHVkODNkXFx1ZGNjMCcsXG4gICdlLW1haWwnOidcXHVkODNkXFx1ZGNlNycsXG4gICdlYWdsZSc6J1xcdWQ4M2VcXHVkZDg1JyxcbiAgJ2Vhcic6J1xcdWQ4M2RcXHVkYzQyJyxcbiAgJ2Vhcl9vZl9yaWNlJzonXFx1ZDgzY1xcdWRmM2UnLFxuICAnZWFydGhfYWZyaWNhJzonXFx1ZDgzY1xcdWRmMGQnLFxuICAnZWFydGhfYW1lcmljYXMnOidcXHVkODNjXFx1ZGYwZScsXG4gICdlYXJ0aF9hc2lhJzonXFx1ZDgzY1xcdWRmMGYnLFxuICAnZWdnJzonXFx1ZDgzZVxcdWRkNWEnLFxuICAnZWdncGxhbnQnOidcXHVkODNjXFx1ZGY0NicsXG4gICdlaWdodF9wb2ludGVkX2JsYWNrX3N0YXInOidcXHUyNzM0XFx1ZmUwZicsXG4gICdlaWdodF9zcG9rZWRfYXN0ZXJpc2snOidcXHUyNzMzXFx1ZmUwZicsXG4gICdlbGVjdHJpY19wbHVnJzonXFx1ZDgzZFxcdWRkMGMnLFxuICAnZWxlcGhhbnQnOidcXHVkODNkXFx1ZGMxOCcsXG4gICdlbWFpbCc6J1xcdTI3MDlcXHVmZTBmJyxcbiAgJ2VuZCc6J1xcdWQ4M2RcXHVkZDFhJyxcbiAgJ2VudmVsb3BlX3dpdGhfYXJyb3cnOidcXHVkODNkXFx1ZGNlOScsXG4gICdldXJvJzonXFx1ZDgzZFxcdWRjYjYnLFxuICAnZXVyb3BlYW5fY2FzdGxlJzonXFx1ZDgzY1xcdWRmZjAnLFxuICAnZXVyb3BlYW5fcG9zdF9vZmZpY2UnOidcXHVkODNjXFx1ZGZlNCcsXG4gICdldmVyZ3JlZW5fdHJlZSc6J1xcdWQ4M2NcXHVkZjMyJyxcbiAgJ2V4Y2xhbWF0aW9uJzonXFx1Mjc1N1xcdWZlMGYnLFxuICAnZXhwcmVzc2lvbmxlc3MnOidcXHVkODNkXFx1ZGUxMScsXG4gICdleWUnOidcXHVkODNkXFx1ZGM0MScsXG4gICdleWVfc3BlZWNoX2J1YmJsZSc6J1xcdWQ4M2RcXHVkYzQxJnp3ajtcXHVkODNkXFx1ZGRlOCcsXG4gICdleWVnbGFzc2VzJzonXFx1ZDgzZFxcdWRjNTMnLFxuICAnZXllcyc6J1xcdWQ4M2RcXHVkYzQwJyxcbiAgJ2ZhY2Vfd2l0aF9oZWFkX2JhbmRhZ2UnOidcXHVkODNlXFx1ZGQxNScsXG4gICdmYWNlX3dpdGhfdGhlcm1vbWV0ZXInOidcXHVkODNlXFx1ZGQxMicsXG4gICdmaXN0X29uY29taW5nJzonXFx1ZDgzZFxcdWRjNGEnLFxuICAnZmFjdG9yeSc6J1xcdWQ4M2NcXHVkZmVkJyxcbiAgJ2ZhbGxlbl9sZWFmJzonXFx1ZDgzY1xcdWRmNDInLFxuICAnZmFtaWx5X21hbl93b21hbl9ib3knOidcXHVkODNkXFx1ZGM2YScsXG4gICdmYW1pbHlfbWFuX2JveSc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX2JveV9ib3knOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjYmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV9tYW5fZ2lybCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NycsXG4gICdmYW1pbHlfbWFuX2dpcmxfYm95JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX2dpcmxfZ2lybCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X21hbl9tYW5fYm95JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX21hbl9ib3lfYm95JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NiZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X21hbl9tYW5fZ2lybCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X21hbl9tYW5fZ2lybF9ib3knOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX21hbl9naXJsX2dpcmwnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NycsXG4gICdmYW1pbHlfbWFuX3dvbWFuX2JveV9ib3knOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY2Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX3dvbWFuX2dpcmwnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2ZhbWlseV9tYW5fd29tYW5fZ2lybF9ib3knOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX3dvbWFuX2dpcmxfZ2lybCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjcmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2ZhbWlseV93b21hbl9ib3knOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X3dvbWFuX2JveV9ib3knOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjYmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV93b21hbl9naXJsJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2ZhbWlseV93b21hbl9naXJsX2JveSc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X3dvbWFuX2dpcmxfZ2lybCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X3dvbWFuX3dvbWFuX2JveSc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X3dvbWFuX3dvbWFuX2JveV9ib3knOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY2Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfd29tYW5fd29tYW5fZ2lybCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X3dvbWFuX3dvbWFuX2dpcmxfYm95JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X3dvbWFuX3dvbWFuX2dpcmxfZ2lybCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjcmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2Zhc3RfZm9yd2FyZCc6J1xcdTIzZTknLFxuICAnZmF4JzonXFx1ZDgzZFxcdWRjZTAnLFxuICAnZmVhcmZ1bCc6J1xcdWQ4M2RcXHVkZTI4JyxcbiAgJ2ZlZXQnOidcXHVkODNkXFx1ZGMzZScsXG4gICdmZW1hbGVfZGV0ZWN0aXZlJzonXFx1ZDgzZFxcdWRkNzVcXHVmZTBmJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdmZXJyaXNfd2hlZWwnOidcXHVkODNjXFx1ZGZhMScsXG4gICdmZXJyeSc6J1xcdTI2ZjQnLFxuICAnZmllbGRfaG9ja2V5JzonXFx1ZDgzY1xcdWRmZDEnLFxuICAnZmlsZV9jYWJpbmV0JzonXFx1ZDgzZFxcdWRkYzQnLFxuICAnZmlsZV9mb2xkZXInOidcXHVkODNkXFx1ZGNjMScsXG4gICdmaWxtX3Byb2plY3Rvcic6J1xcdWQ4M2RcXHVkY2ZkJyxcbiAgJ2ZpbG1fc3RyaXAnOidcXHVkODNjXFx1ZGY5ZScsXG4gICdmaXJlJzonXFx1ZDgzZFxcdWRkMjUnLFxuICAnZmlyZV9lbmdpbmUnOidcXHVkODNkXFx1ZGU5MicsXG4gICdmaXJld29ya3MnOidcXHVkODNjXFx1ZGY4NicsXG4gICdmaXJzdF9xdWFydGVyX21vb24nOidcXHVkODNjXFx1ZGYxMycsXG4gICdmaXJzdF9xdWFydGVyX21vb25fd2l0aF9mYWNlJzonXFx1ZDgzY1xcdWRmMWInLFxuICAnZmlzaCc6J1xcdWQ4M2RcXHVkYzFmJyxcbiAgJ2Zpc2hfY2FrZSc6J1xcdWQ4M2NcXHVkZjY1JyxcbiAgJ2Zpc2hpbmdfcG9sZV9hbmRfZmlzaCc6J1xcdWQ4M2NcXHVkZmEzJyxcbiAgJ2Zpc3RfcmFpc2VkJzonXFx1MjcwYScsXG4gICdmaXN0X2xlZnQnOidcXHVkODNlXFx1ZGQxYicsXG4gICdmaXN0X3JpZ2h0JzonXFx1ZDgzZVxcdWRkMWMnLFxuICAnZmxhZ3MnOidcXHVkODNjXFx1ZGY4ZicsXG4gICdmbGFzaGxpZ2h0JzonXFx1ZDgzZFxcdWRkMjYnLFxuICAnZmxldXJfZGVfbGlzJzonXFx1MjY5Y1xcdWZlMGYnLFxuICAnZmxpZ2h0X2Fycml2YWwnOidcXHVkODNkXFx1ZGVlYycsXG4gICdmbGlnaHRfZGVwYXJ0dXJlJzonXFx1ZDgzZFxcdWRlZWInLFxuICAnZmxvcHB5X2Rpc2snOidcXHVkODNkXFx1ZGNiZScsXG4gICdmbG93ZXJfcGxheWluZ19jYXJkcyc6J1xcdWQ4M2NcXHVkZmI0JyxcbiAgJ2ZsdXNoZWQnOidcXHVkODNkXFx1ZGUzMycsXG4gICdmb2cnOidcXHVkODNjXFx1ZGYyYicsXG4gICdmb2dneSc6J1xcdWQ4M2NcXHVkZjAxJyxcbiAgJ2Zvb3RiYWxsJzonXFx1ZDgzY1xcdWRmYzgnLFxuICAnZm9vdHByaW50cyc6J1xcdWQ4M2RcXHVkYzYzJyxcbiAgJ2ZvcmtfYW5kX2tuaWZlJzonXFx1ZDgzY1xcdWRmNzQnLFxuICAnZm91bnRhaW4nOidcXHUyNmYyXFx1ZmUwZicsXG4gICdmb3VudGFpbl9wZW4nOidcXHVkODNkXFx1ZGQ4YicsXG4gICdmb3VyX2xlYWZfY2xvdmVyJzonXFx1ZDgzY1xcdWRmNDAnLFxuICAnZm94X2ZhY2UnOidcXHVkODNlXFx1ZGQ4YScsXG4gICdmcmFtZWRfcGljdHVyZSc6J1xcdWQ4M2RcXHVkZGJjJyxcbiAgJ2ZyZWUnOidcXHVkODNjXFx1ZGQ5MycsXG4gICdmcmllZF9lZ2cnOidcXHVkODNjXFx1ZGY3MycsXG4gICdmcmllZF9zaHJpbXAnOidcXHVkODNjXFx1ZGY2NCcsXG4gICdmcmllcyc6J1xcdWQ4M2NcXHVkZjVmJyxcbiAgJ2Zyb2cnOidcXHVkODNkXFx1ZGMzOCcsXG4gICdmcm93bmluZyc6J1xcdWQ4M2RcXHVkZTI2JyxcbiAgJ2Zyb3duaW5nX2ZhY2UnOidcXHUyNjM5XFx1ZmUwZicsXG4gICdmcm93bmluZ19tYW4nOidcXHVkODNkXFx1ZGU0ZCZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnZnJvd25pbmdfd29tYW4nOidcXHVkODNkXFx1ZGU0ZCcsXG4gICdtaWRkbGVfZmluZ2VyJzonXFx1ZDgzZFxcdWRkOTUnLFxuICAnZnVlbHB1bXAnOidcXHUyNmZkXFx1ZmUwZicsXG4gICdmdWxsX21vb24nOidcXHVkODNjXFx1ZGYxNScsXG4gICdmdWxsX21vb25fd2l0aF9mYWNlJzonXFx1ZDgzY1xcdWRmMWQnLFxuICAnZnVuZXJhbF91cm4nOidcXHUyNmIxXFx1ZmUwZicsXG4gICdnYW1lX2RpZSc6J1xcdWQ4M2NcXHVkZmIyJyxcbiAgJ2dlYXInOidcXHUyNjk5XFx1ZmUwZicsXG4gICdnZW0nOidcXHVkODNkXFx1ZGM4ZScsXG4gICdnZW1pbmknOidcXHUyNjRhXFx1ZmUwZicsXG4gICdnaG9zdCc6J1xcdWQ4M2RcXHVkYzdiJyxcbiAgJ2dpZnQnOidcXHVkODNjXFx1ZGY4MScsXG4gICdnaWZ0X2hlYXJ0JzonXFx1ZDgzZFxcdWRjOWQnLFxuICAnZ2lybCc6J1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2dsb2JlX3dpdGhfbWVyaWRpYW5zJzonXFx1ZDgzY1xcdWRmMTAnLFxuICAnZ29hbF9uZXQnOidcXHVkODNlXFx1ZGQ0NScsXG4gICdnb2F0JzonXFx1ZDgzZFxcdWRjMTAnLFxuICAnZ29sZic6J1xcdTI2ZjNcXHVmZTBmJyxcbiAgJ2dvbGZpbmdfbWFuJzonXFx1ZDgzY1xcdWRmY2NcXHVmZTBmJyxcbiAgJ2dvbGZpbmdfd29tYW4nOidcXHVkODNjXFx1ZGZjY1xcdWZlMGYmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ2dvcmlsbGEnOidcXHVkODNlXFx1ZGQ4ZCcsXG4gICdncmFwZXMnOidcXHVkODNjXFx1ZGY0NycsXG4gICdncmVlbl9hcHBsZSc6J1xcdWQ4M2NcXHVkZjRmJyxcbiAgJ2dyZWVuX2Jvb2snOidcXHVkODNkXFx1ZGNkNycsXG4gICdncmVlbl9oZWFydCc6J1xcdWQ4M2RcXHVkYzlhJyxcbiAgJ2dyZWVuX3NhbGFkJzonXFx1ZDgzZVxcdWRkNTcnLFxuICAnZ3JleV9leGNsYW1hdGlvbic6J1xcdTI3NTUnLFxuICAnZ3JleV9xdWVzdGlvbic6J1xcdTI3NTQnLFxuICAnZ3JpbWFjaW5nJzonXFx1ZDgzZFxcdWRlMmMnLFxuICAnZ3Jpbic6J1xcdWQ4M2RcXHVkZTAxJyxcbiAgJ2dyaW5uaW5nJzonXFx1ZDgzZFxcdWRlMDAnLFxuICAnZ3VhcmRzbWFuJzonXFx1ZDgzZFxcdWRjODInLFxuICAnZ3VhcmRzd29tYW4nOidcXHVkODNkXFx1ZGM4MiZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnZ3VpdGFyJzonXFx1ZDgzY1xcdWRmYjgnLFxuICAnZ3VuJzonXFx1ZDgzZFxcdWRkMmInLFxuICAnaGFpcmN1dF93b21hbic6J1xcdWQ4M2RcXHVkYzg3JyxcbiAgJ2hhaXJjdXRfbWFuJzonXFx1ZDgzZFxcdWRjODcmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ2hhbWJ1cmdlcic6J1xcdWQ4M2NcXHVkZjU0JyxcbiAgJ2hhbW1lcic6J1xcdWQ4M2RcXHVkZDI4JyxcbiAgJ2hhbW1lcl9hbmRfcGljayc6J1xcdTI2OTInLFxuICAnaGFtbWVyX2FuZF93cmVuY2gnOidcXHVkODNkXFx1ZGVlMCcsXG4gICdoYW1zdGVyJzonXFx1ZDgzZFxcdWRjMzknLFxuICAnaGFuZCc6J1xcdTI3MGInLFxuICAnaGFuZGJhZyc6J1xcdWQ4M2RcXHVkYzVjJyxcbiAgJ2hhbmRzaGFrZSc6J1xcdWQ4M2VcXHVkZDFkJyxcbiAgJ2hhbmtleSc6J1xcdWQ4M2RcXHVkY2E5JyxcbiAgJ2hhdGNoZWRfY2hpY2snOidcXHVkODNkXFx1ZGMyNScsXG4gICdoYXRjaGluZ19jaGljayc6J1xcdWQ4M2RcXHVkYzIzJyxcbiAgJ2hlYWRwaG9uZXMnOidcXHVkODNjXFx1ZGZhNycsXG4gICdoZWFyX25vX2V2aWwnOidcXHVkODNkXFx1ZGU0OScsXG4gICdoZWFydCc6J1xcdTI3NjRcXHVmZTBmJyxcbiAgJ2hlYXJ0X2RlY29yYXRpb24nOidcXHVkODNkXFx1ZGM5ZicsXG4gICdoZWFydF9leWVzJzonXFx1ZDgzZFxcdWRlMGQnLFxuICAnaGVhcnRfZXllc19jYXQnOidcXHVkODNkXFx1ZGUzYicsXG4gICdoZWFydGJlYXQnOidcXHVkODNkXFx1ZGM5MycsXG4gICdoZWFydHB1bHNlJzonXFx1ZDgzZFxcdWRjOTcnLFxuICAnaGVhcnRzJzonXFx1MjY2NVxcdWZlMGYnLFxuICAnaGVhdnlfY2hlY2tfbWFyayc6J1xcdTI3MTRcXHVmZTBmJyxcbiAgJ2hlYXZ5X2RpdmlzaW9uX3NpZ24nOidcXHUyNzk3JyxcbiAgJ2hlYXZ5X2RvbGxhcl9zaWduJzonXFx1ZDgzZFxcdWRjYjInLFxuICAnaGVhdnlfaGVhcnRfZXhjbGFtYXRpb24nOidcXHUyNzYzXFx1ZmUwZicsXG4gICdoZWF2eV9taW51c19zaWduJzonXFx1Mjc5NicsXG4gICdoZWF2eV9tdWx0aXBsaWNhdGlvbl94JzonXFx1MjcxNlxcdWZlMGYnLFxuICAnaGVhdnlfcGx1c19zaWduJzonXFx1Mjc5NScsXG4gICdoZWxpY29wdGVyJzonXFx1ZDgzZFxcdWRlODEnLFxuICAnaGVyYic6J1xcdWQ4M2NcXHVkZjNmJyxcbiAgJ2hpYmlzY3VzJzonXFx1ZDgzY1xcdWRmM2EnLFxuICAnaGlnaF9icmlnaHRuZXNzJzonXFx1ZDgzZFxcdWRkMDYnLFxuICAnaGlnaF9oZWVsJzonXFx1ZDgzZFxcdWRjNjAnLFxuICAnaG9jaG8nOidcXHVkODNkXFx1ZGQyYScsXG4gICdob2xlJzonXFx1ZDgzZFxcdWRkNzMnLFxuICAnaG9uZXlfcG90JzonXFx1ZDgzY1xcdWRmNmYnLFxuICAnaG9yc2UnOidcXHVkODNkXFx1ZGMzNCcsXG4gICdob3JzZV9yYWNpbmcnOidcXHVkODNjXFx1ZGZjNycsXG4gICdob3NwaXRhbCc6J1xcdWQ4M2NcXHVkZmU1JyxcbiAgJ2hvdF9wZXBwZXInOidcXHVkODNjXFx1ZGYzNicsXG4gICdob3Rkb2cnOidcXHVkODNjXFx1ZGYyZCcsXG4gICdob3RlbCc6J1xcdWQ4M2NcXHVkZmU4JyxcbiAgJ2hvdHNwcmluZ3MnOidcXHUyNjY4XFx1ZmUwZicsXG4gICdob3VyZ2xhc3MnOidcXHUyMzFiXFx1ZmUwZicsXG4gICdob3VyZ2xhc3NfZmxvd2luZ19zYW5kJzonXFx1MjNmMycsXG4gICdob3VzZSc6J1xcdWQ4M2NcXHVkZmUwJyxcbiAgJ2hvdXNlX3dpdGhfZ2FyZGVuJzonXFx1ZDgzY1xcdWRmZTEnLFxuICAnaG91c2VzJzonXFx1ZDgzY1xcdWRmZDgnLFxuICAnaHVncyc6J1xcdWQ4M2VcXHVkZDE3JyxcbiAgJ2h1c2hlZCc6J1xcdWQ4M2RcXHVkZTJmJyxcbiAgJ2ljZV9jcmVhbSc6J1xcdWQ4M2NcXHVkZjY4JyxcbiAgJ2ljZV9ob2NrZXknOidcXHVkODNjXFx1ZGZkMicsXG4gICdpY2Vfc2thdGUnOidcXHUyNmY4JyxcbiAgJ2ljZWNyZWFtJzonXFx1ZDgzY1xcdWRmNjYnLFxuICAnaWQnOidcXHVkODNjXFx1ZGQ5NCcsXG4gICdpZGVvZ3JhcGhfYWR2YW50YWdlJzonXFx1ZDgzY1xcdWRlNTAnLFxuICAnaW1wJzonXFx1ZDgzZFxcdWRjN2YnLFxuICAnaW5ib3hfdHJheSc6J1xcdWQ4M2RcXHVkY2U1JyxcbiAgJ2luY29taW5nX2VudmVsb3BlJzonXFx1ZDgzZFxcdWRjZTgnLFxuICAndGlwcGluZ19oYW5kX3dvbWFuJzonXFx1ZDgzZFxcdWRjODEnLFxuICAnaW5mb3JtYXRpb25fc291cmNlJzonXFx1MjEzOVxcdWZlMGYnLFxuICAnaW5ub2NlbnQnOidcXHVkODNkXFx1ZGUwNycsXG4gICdpbnRlcnJvYmFuZyc6J1xcdTIwNDlcXHVmZTBmJyxcbiAgJ2lwaG9uZSc6J1xcdWQ4M2RcXHVkY2YxJyxcbiAgJ2l6YWtheWFfbGFudGVybic6J1xcdWQ4M2NcXHVkZmVlJyxcbiAgJ2phY2tfb19sYW50ZXJuJzonXFx1ZDgzY1xcdWRmODMnLFxuICAnamFwYW4nOidcXHVkODNkXFx1ZGRmZScsXG4gICdqYXBhbmVzZV9jYXN0bGUnOidcXHVkODNjXFx1ZGZlZicsXG4gICdqYXBhbmVzZV9nb2JsaW4nOidcXHVkODNkXFx1ZGM3YScsXG4gICdqYXBhbmVzZV9vZ3JlJzonXFx1ZDgzZFxcdWRjNzknLFxuICAnamVhbnMnOidcXHVkODNkXFx1ZGM1NicsXG4gICdqb3knOidcXHVkODNkXFx1ZGUwMicsXG4gICdqb3lfY2F0JzonXFx1ZDgzZFxcdWRlMzknLFxuICAnam95c3RpY2snOidcXHVkODNkXFx1ZGQ3OScsXG4gICdrYWFiYSc6J1xcdWQ4M2RcXHVkZDRiJyxcbiAgJ2tleSc6J1xcdWQ4M2RcXHVkZDExJyxcbiAgJ2tleWJvYXJkJzonXFx1MjMyOFxcdWZlMGYnLFxuICAna2V5Y2FwX3Rlbic6J1xcdWQ4M2RcXHVkZDFmJyxcbiAgJ2tpY2tfc2Nvb3Rlcic6J1xcdWQ4M2RcXHVkZWY0JyxcbiAgJ2tpbW9ubyc6J1xcdWQ4M2RcXHVkYzU4JyxcbiAgJ2tpc3MnOidcXHVkODNkXFx1ZGM4YicsXG4gICdraXNzaW5nJzonXFx1ZDgzZFxcdWRlMTcnLFxuICAna2lzc2luZ19jYXQnOidcXHVkODNkXFx1ZGUzZCcsXG4gICdraXNzaW5nX2Nsb3NlZF9leWVzJzonXFx1ZDgzZFxcdWRlMWEnLFxuICAna2lzc2luZ19oZWFydCc6J1xcdWQ4M2RcXHVkZTE4JyxcbiAgJ2tpc3Npbmdfc21pbGluZ19leWVzJzonXFx1ZDgzZFxcdWRlMTknLFxuICAna2l3aV9mcnVpdCc6J1xcdWQ4M2VcXHVkZDVkJyxcbiAgJ2tvYWxhJzonXFx1ZDgzZFxcdWRjMjgnLFxuICAna29rbyc6J1xcdWQ4M2NcXHVkZTAxJyxcbiAgJ2xhYmVsJzonXFx1ZDgzY1xcdWRmZjcnLFxuICAnbGFyZ2VfYmx1ZV9jaXJjbGUnOidcXHVkODNkXFx1ZGQzNScsXG4gICdsYXJnZV9ibHVlX2RpYW1vbmQnOidcXHVkODNkXFx1ZGQzNycsXG4gICdsYXJnZV9vcmFuZ2VfZGlhbW9uZCc6J1xcdWQ4M2RcXHVkZDM2JyxcbiAgJ2xhc3RfcXVhcnRlcl9tb29uJzonXFx1ZDgzY1xcdWRmMTcnLFxuICAnbGFzdF9xdWFydGVyX21vb25fd2l0aF9mYWNlJzonXFx1ZDgzY1xcdWRmMWMnLFxuICAnbGF0aW5fY3Jvc3MnOidcXHUyNzFkXFx1ZmUwZicsXG4gICdsYXVnaGluZyc6J1xcdWQ4M2RcXHVkZTA2JyxcbiAgJ2xlYXZlcyc6J1xcdWQ4M2NcXHVkZjQzJyxcbiAgJ2xlZGdlcic6J1xcdWQ4M2RcXHVkY2QyJyxcbiAgJ2xlZnRfbHVnZ2FnZSc6J1xcdWQ4M2RcXHVkZWM1JyxcbiAgJ2xlZnRfcmlnaHRfYXJyb3cnOidcXHUyMTk0XFx1ZmUwZicsXG4gICdsZWZ0d2FyZHNfYXJyb3dfd2l0aF9ob29rJzonXFx1MjFhOVxcdWZlMGYnLFxuICAnbGVtb24nOidcXHVkODNjXFx1ZGY0YicsXG4gICdsZW8nOidcXHUyNjRjXFx1ZmUwZicsXG4gICdsZW9wYXJkJzonXFx1ZDgzZFxcdWRjMDYnLFxuICAnbGV2ZWxfc2xpZGVyJzonXFx1ZDgzY1xcdWRmOWEnLFxuICAnbGlicmEnOidcXHUyNjRlXFx1ZmUwZicsXG4gICdsaWdodF9yYWlsJzonXFx1ZDgzZFxcdWRlODgnLFxuICAnbGluayc6J1xcdWQ4M2RcXHVkZDE3JyxcbiAgJ2xpb24nOidcXHVkODNlXFx1ZGQ4MScsXG4gICdsaXBzJzonXFx1ZDgzZFxcdWRjNDQnLFxuICAnbGlwc3RpY2snOidcXHVkODNkXFx1ZGM4NCcsXG4gICdsaXphcmQnOidcXHVkODNlXFx1ZGQ4ZScsXG4gICdsb2NrJzonXFx1ZDgzZFxcdWRkMTInLFxuICAnbG9ja193aXRoX2lua19wZW4nOidcXHVkODNkXFx1ZGQwZicsXG4gICdsb2xsaXBvcCc6J1xcdWQ4M2NcXHVkZjZkJyxcbiAgJ2xvb3AnOidcXHUyN2JmJyxcbiAgJ2xvdWRfc291bmQnOidcXHVkODNkXFx1ZGQwYScsXG4gICdsb3Vkc3BlYWtlcic6J1xcdWQ4M2RcXHVkY2UyJyxcbiAgJ2xvdmVfaG90ZWwnOidcXHVkODNjXFx1ZGZlOScsXG4gICdsb3ZlX2xldHRlcic6J1xcdWQ4M2RcXHVkYzhjJyxcbiAgJ2xvd19icmlnaHRuZXNzJzonXFx1ZDgzZFxcdWRkMDUnLFxuICAnbHlpbmdfZmFjZSc6J1xcdWQ4M2VcXHVkZDI1JyxcbiAgJ20nOidcXHUyNGMyXFx1ZmUwZicsXG4gICdtYWcnOidcXHVkODNkXFx1ZGQwZCcsXG4gICdtYWdfcmlnaHQnOidcXHVkODNkXFx1ZGQwZScsXG4gICdtYWhqb25nJzonXFx1ZDgzY1xcdWRjMDRcXHVmZTBmJyxcbiAgJ21haWxib3gnOidcXHVkODNkXFx1ZGNlYicsXG4gICdtYWlsYm94X2Nsb3NlZCc6J1xcdWQ4M2RcXHVkY2VhJyxcbiAgJ21haWxib3hfd2l0aF9tYWlsJzonXFx1ZDgzZFxcdWRjZWMnLFxuICAnbWFpbGJveF93aXRoX25vX21haWwnOidcXHVkODNkXFx1ZGNlZCcsXG4gICdtYW4nOidcXHVkODNkXFx1ZGM2OCcsXG4gICdtYW5fYXJ0aXN0JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2NcXHVkZmE4JyxcbiAgJ21hbl9hc3Ryb25hdXQnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRlODAnLFxuICAnbWFuX2NhcnR3aGVlbGluZyc6J1xcdWQ4M2VcXHVkZDM4Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtYW5fY29vayc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNjXFx1ZGY3MycsXG4gICdtYW5fZGFuY2luZyc6J1xcdWQ4M2RcXHVkZDdhJyxcbiAgJ21hbl9mYWNlcGFsbWluZyc6J1xcdWQ4M2VcXHVkZDI2Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtYW5fZmFjdG9yeV93b3JrZXInOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzY1xcdWRmZWQnLFxuICAnbWFuX2Zhcm1lcic6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNjXFx1ZGYzZScsXG4gICdtYW5fZmlyZWZpZ2h0ZXInOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRlOTInLFxuICAnbWFuX2hlYWx0aF93b3JrZXInOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1MjY5NVxcdWZlMGYnLFxuICAnbWFuX2luX3R1eGVkbyc6J1xcdWQ4M2VcXHVkZDM1JyxcbiAgJ21hbl9qdWRnZSc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHUyNjk2XFx1ZmUwZicsXG4gICdtYW5fanVnZ2xpbmcnOidcXHVkODNlXFx1ZGQzOSZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnbWFuX21lY2hhbmljJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkZDI3JyxcbiAgJ21hbl9vZmZpY2Vfd29ya2VyJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkY2JjJyxcbiAgJ21hbl9waWxvdCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHUyNzA4XFx1ZmUwZicsXG4gICdtYW5fcGxheWluZ19oYW5kYmFsbCc6J1xcdWQ4M2VcXHVkZDNlJnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtYW5fcGxheWluZ193YXRlcl9wb2xvJzonXFx1ZDgzZVxcdWRkM2QmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ21hbl9zY2llbnRpc3QnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRkMmMnLFxuICAnbWFuX3NocnVnZ2luZyc6J1xcdWQ4M2VcXHVkZDM3Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtYW5fc2luZ2VyJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2NcXHVkZmE0JyxcbiAgJ21hbl9zdHVkZW50JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2NcXHVkZjkzJyxcbiAgJ21hbl90ZWFjaGVyJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2NcXHVkZmViJyxcbiAgJ21hbl90ZWNobm9sb2dpc3QnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjYmInLFxuICAnbWFuX3dpdGhfZ3VhX3BpX21hbyc6J1xcdWQ4M2RcXHVkYzcyJyxcbiAgJ21hbl93aXRoX3R1cmJhbic6J1xcdWQ4M2RcXHVkYzczJyxcbiAgJ3RhbmdlcmluZSc6J1xcdWQ4M2NcXHVkZjRhJyxcbiAgJ21hbnNfc2hvZSc6J1xcdWQ4M2RcXHVkYzVlJyxcbiAgJ21hbnRlbHBpZWNlX2Nsb2NrJzonXFx1ZDgzZFxcdWRkNzAnLFxuICAnbWFwbGVfbGVhZic6J1xcdWQ4M2NcXHVkZjQxJyxcbiAgJ21hcnRpYWxfYXJ0c191bmlmb3JtJzonXFx1ZDgzZVxcdWRkNGInLFxuICAnbWFzayc6J1xcdWQ4M2RcXHVkZTM3JyxcbiAgJ21hc3NhZ2Vfd29tYW4nOidcXHVkODNkXFx1ZGM4NicsXG4gICdtYXNzYWdlX21hbic6J1xcdWQ4M2RcXHVkYzg2Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtZWF0X29uX2JvbmUnOidcXHVkODNjXFx1ZGY1NicsXG4gICdtZWRhbF9taWxpdGFyeSc6J1xcdWQ4M2NcXHVkZjk2JyxcbiAgJ21lZGFsX3Nwb3J0cyc6J1xcdWQ4M2NcXHVkZmM1JyxcbiAgJ21lZ2EnOidcXHVkODNkXFx1ZGNlMycsXG4gICdtZWxvbic6J1xcdWQ4M2NcXHVkZjQ4JyxcbiAgJ21lbW8nOidcXHVkODNkXFx1ZGNkZCcsXG4gICdtZW5fd3Jlc3RsaW5nJzonXFx1ZDgzZVxcdWRkM2MmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ21lbm9yYWgnOidcXHVkODNkXFx1ZGQ0ZScsXG4gICdtZW5zJzonXFx1ZDgzZFxcdWRlYjknLFxuICAnbWV0YWwnOidcXHVkODNlXFx1ZGQxOCcsXG4gICdtZXRybyc6J1xcdWQ4M2RcXHVkZTg3JyxcbiAgJ21pY3JvcGhvbmUnOidcXHVkODNjXFx1ZGZhNCcsXG4gICdtaWNyb3Njb3BlJzonXFx1ZDgzZFxcdWRkMmMnLFxuICAnbWlsa19nbGFzcyc6J1xcdWQ4M2VcXHVkZDViJyxcbiAgJ21pbGt5X3dheSc6J1xcdWQ4M2NcXHVkZjBjJyxcbiAgJ21pbmlidXMnOidcXHVkODNkXFx1ZGU5MCcsXG4gICdtaW5pZGlzYyc6J1xcdWQ4M2RcXHVkY2JkJyxcbiAgJ21vYmlsZV9waG9uZV9vZmYnOidcXHVkODNkXFx1ZGNmNCcsXG4gICdtb25leV9tb3V0aF9mYWNlJzonXFx1ZDgzZVxcdWRkMTEnLFxuICAnbW9uZXlfd2l0aF93aW5ncyc6J1xcdWQ4M2RcXHVkY2I4JyxcbiAgJ21vbmV5YmFnJzonXFx1ZDgzZFxcdWRjYjAnLFxuICAnbW9ua2V5JzonXFx1ZDgzZFxcdWRjMTInLFxuICAnbW9ua2V5X2ZhY2UnOidcXHVkODNkXFx1ZGMzNScsXG4gICdtb25vcmFpbCc6J1xcdWQ4M2RcXHVkZTlkJyxcbiAgJ21vb24nOidcXHVkODNjXFx1ZGYxNCcsXG4gICdtb3J0YXJfYm9hcmQnOidcXHVkODNjXFx1ZGY5MycsXG4gICdtb3NxdWUnOidcXHVkODNkXFx1ZGQ0YycsXG4gICdtb3Rvcl9ib2F0JzonXFx1ZDgzZFxcdWRlZTUnLFxuICAnbW90b3Jfc2Nvb3Rlcic6J1xcdWQ4M2RcXHVkZWY1JyxcbiAgJ21vdG9yY3ljbGUnOidcXHVkODNjXFx1ZGZjZCcsXG4gICdtb3RvcndheSc6J1xcdWQ4M2RcXHVkZWUzJyxcbiAgJ21vdW50X2Z1amknOidcXHVkODNkXFx1ZGRmYicsXG4gICdtb3VudGFpbic6J1xcdTI2ZjAnLFxuICAnbW91bnRhaW5fYmlraW5nX21hbic6J1xcdWQ4M2RcXHVkZWI1JyxcbiAgJ21vdW50YWluX2Jpa2luZ193b21hbic6J1xcdWQ4M2RcXHVkZWI1Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdtb3VudGFpbl9jYWJsZXdheSc6J1xcdWQ4M2RcXHVkZWEwJyxcbiAgJ21vdW50YWluX3JhaWx3YXknOidcXHVkODNkXFx1ZGU5ZScsXG4gICdtb3VudGFpbl9zbm93JzonXFx1ZDgzY1xcdWRmZDQnLFxuICAnbW91c2UnOidcXHVkODNkXFx1ZGMyZCcsXG4gICdtb3VzZTInOidcXHVkODNkXFx1ZGMwMScsXG4gICdtb3ZpZV9jYW1lcmEnOidcXHVkODNjXFx1ZGZhNScsXG4gICdtb3lhaSc6J1xcdWQ4M2RcXHVkZGZmJyxcbiAgJ21yc19jbGF1cyc6J1xcdWQ4M2VcXHVkZDM2JyxcbiAgJ211c2NsZSc6J1xcdWQ4M2RcXHVkY2FhJyxcbiAgJ211c2hyb29tJzonXFx1ZDgzY1xcdWRmNDQnLFxuICAnbXVzaWNhbF9rZXlib2FyZCc6J1xcdWQ4M2NcXHVkZmI5JyxcbiAgJ211c2ljYWxfbm90ZSc6J1xcdWQ4M2NcXHVkZmI1JyxcbiAgJ211c2ljYWxfc2NvcmUnOidcXHVkODNjXFx1ZGZiYycsXG4gICdtdXRlJzonXFx1ZDgzZFxcdWRkMDcnLFxuICAnbmFpbF9jYXJlJzonXFx1ZDgzZFxcdWRjODUnLFxuICAnbmFtZV9iYWRnZSc6J1xcdWQ4M2RcXHVkY2RiJyxcbiAgJ25hdGlvbmFsX3BhcmsnOidcXHVkODNjXFx1ZGZkZScsXG4gICduYXVzZWF0ZWRfZmFjZSc6J1xcdWQ4M2VcXHVkZDIyJyxcbiAgJ25lY2t0aWUnOidcXHVkODNkXFx1ZGM1NCcsXG4gICduZWdhdGl2ZV9zcXVhcmVkX2Nyb3NzX21hcmsnOidcXHUyNzRlJyxcbiAgJ25lcmRfZmFjZSc6J1xcdWQ4M2VcXHVkZDEzJyxcbiAgJ25ldXRyYWxfZmFjZSc6J1xcdWQ4M2RcXHVkZTEwJyxcbiAgJ25ldyc6J1xcdWQ4M2NcXHVkZDk1JyxcbiAgJ25ld19tb29uJzonXFx1ZDgzY1xcdWRmMTEnLFxuICAnbmV3X21vb25fd2l0aF9mYWNlJzonXFx1ZDgzY1xcdWRmMWEnLFxuICAnbmV3c3BhcGVyJzonXFx1ZDgzZFxcdWRjZjAnLFxuICAnbmV3c3BhcGVyX3JvbGwnOidcXHVkODNkXFx1ZGRkZScsXG4gICduZXh0X3RyYWNrX2J1dHRvbic6J1xcdTIzZWQnLFxuICAnbmcnOidcXHVkODNjXFx1ZGQ5NicsXG4gICdub19nb29kX21hbic6J1xcdWQ4M2RcXHVkZTQ1Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdub19nb29kX3dvbWFuJzonXFx1ZDgzZFxcdWRlNDUnLFxuICAnbmlnaHRfd2l0aF9zdGFycyc6J1xcdWQ4M2NcXHVkZjAzJyxcbiAgJ25vX2JlbGwnOidcXHVkODNkXFx1ZGQxNScsXG4gICdub19iaWN5Y2xlcyc6J1xcdWQ4M2RcXHVkZWIzJyxcbiAgJ25vX2VudHJ5JzonXFx1MjZkNFxcdWZlMGYnLFxuICAnbm9fZW50cnlfc2lnbic6J1xcdWQ4M2RcXHVkZWFiJyxcbiAgJ25vX21vYmlsZV9waG9uZXMnOidcXHVkODNkXFx1ZGNmNScsXG4gICdub19tb3V0aCc6J1xcdWQ4M2RcXHVkZTM2JyxcbiAgJ25vX3BlZGVzdHJpYW5zJzonXFx1ZDgzZFxcdWRlYjcnLFxuICAnbm9fc21va2luZyc6J1xcdWQ4M2RcXHVkZWFkJyxcbiAgJ25vbi1wb3RhYmxlX3dhdGVyJzonXFx1ZDgzZFxcdWRlYjEnLFxuICAnbm9zZSc6J1xcdWQ4M2RcXHVkYzQzJyxcbiAgJ25vdGVib29rJzonXFx1ZDgzZFxcdWRjZDMnLFxuICAnbm90ZWJvb2tfd2l0aF9kZWNvcmF0aXZlX2NvdmVyJzonXFx1ZDgzZFxcdWRjZDQnLFxuICAnbm90ZXMnOidcXHVkODNjXFx1ZGZiNicsXG4gICdudXRfYW5kX2JvbHQnOidcXHVkODNkXFx1ZGQyOScsXG4gICdvJzonXFx1MmI1NVxcdWZlMGYnLFxuICAnbzInOidcXHVkODNjXFx1ZGQ3ZVxcdWZlMGYnLFxuICAnb2NlYW4nOidcXHVkODNjXFx1ZGYwYScsXG4gICdvY3RvcHVzJzonXFx1ZDgzZFxcdWRjMTknLFxuICAnb2Rlbic6J1xcdWQ4M2NcXHVkZjYyJyxcbiAgJ29mZmljZSc6J1xcdWQ4M2NcXHVkZmUyJyxcbiAgJ29pbF9kcnVtJzonXFx1ZDgzZFxcdWRlZTInLFxuICAnb2snOidcXHVkODNjXFx1ZGQ5NycsXG4gICdva19oYW5kJzonXFx1ZDgzZFxcdWRjNGMnLFxuICAnb2tfbWFuJzonXFx1ZDgzZFxcdWRlNDYmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ29rX3dvbWFuJzonXFx1ZDgzZFxcdWRlNDYnLFxuICAnb2xkX2tleSc6J1xcdWQ4M2RcXHVkZGRkJyxcbiAgJ29sZGVyX21hbic6J1xcdWQ4M2RcXHVkYzc0JyxcbiAgJ29sZGVyX3dvbWFuJzonXFx1ZDgzZFxcdWRjNzUnLFxuICAnb20nOidcXHVkODNkXFx1ZGQ0OScsXG4gICdvbic6J1xcdWQ4M2RcXHVkZDFiJyxcbiAgJ29uY29taW5nX2F1dG9tb2JpbGUnOidcXHVkODNkXFx1ZGU5OCcsXG4gICdvbmNvbWluZ19idXMnOidcXHVkODNkXFx1ZGU4ZCcsXG4gICdvbmNvbWluZ19wb2xpY2VfY2FyJzonXFx1ZDgzZFxcdWRlOTQnLFxuICAnb25jb21pbmdfdGF4aSc6J1xcdWQ4M2RcXHVkZTk2JyxcbiAgJ29wZW5fZmlsZV9mb2xkZXInOidcXHVkODNkXFx1ZGNjMicsXG4gICdvcGVuX2hhbmRzJzonXFx1ZDgzZFxcdWRjNTAnLFxuICAnb3Blbl9tb3V0aCc6J1xcdWQ4M2RcXHVkZTJlJyxcbiAgJ29wZW5fdW1icmVsbGEnOidcXHUyNjAyXFx1ZmUwZicsXG4gICdvcGhpdWNodXMnOidcXHUyNmNlJyxcbiAgJ29yYW5nZV9ib29rJzonXFx1ZDgzZFxcdWRjZDknLFxuICAnb3J0aG9kb3hfY3Jvc3MnOidcXHUyNjI2XFx1ZmUwZicsXG4gICdvdXRib3hfdHJheSc6J1xcdWQ4M2RcXHVkY2U0JyxcbiAgJ293bCc6J1xcdWQ4M2VcXHVkZDg5JyxcbiAgJ294JzonXFx1ZDgzZFxcdWRjMDInLFxuICAncGFja2FnZSc6J1xcdWQ4M2RcXHVkY2U2JyxcbiAgJ3BhZ2VfZmFjaW5nX3VwJzonXFx1ZDgzZFxcdWRjYzQnLFxuICAncGFnZV93aXRoX2N1cmwnOidcXHVkODNkXFx1ZGNjMycsXG4gICdwYWdlcic6J1xcdWQ4M2RcXHVkY2RmJyxcbiAgJ3BhaW50YnJ1c2gnOidcXHVkODNkXFx1ZGQ4YycsXG4gICdwYWxtX3RyZWUnOidcXHVkODNjXFx1ZGYzNCcsXG4gICdwYW5jYWtlcyc6J1xcdWQ4M2VcXHVkZDVlJyxcbiAgJ3BhbmRhX2ZhY2UnOidcXHVkODNkXFx1ZGMzYycsXG4gICdwYXBlcmNsaXAnOidcXHVkODNkXFx1ZGNjZScsXG4gICdwYXBlcmNsaXBzJzonXFx1ZDgzZFxcdWRkODcnLFxuICAncGFyYXNvbF9vbl9ncm91bmQnOidcXHUyNmYxJyxcbiAgJ3BhcmtpbmcnOidcXHVkODNjXFx1ZGQ3ZlxcdWZlMGYnLFxuICAncGFydF9hbHRlcm5hdGlvbl9tYXJrJzonXFx1MzAzZFxcdWZlMGYnLFxuICAncGFydGx5X3N1bm55JzonXFx1MjZjNVxcdWZlMGYnLFxuICAncGFzc2VuZ2VyX3NoaXAnOidcXHVkODNkXFx1ZGVmMycsXG4gICdwYXNzcG9ydF9jb250cm9sJzonXFx1ZDgzZFxcdWRlYzInLFxuICAncGF1c2VfYnV0dG9uJzonXFx1MjNmOCcsXG4gICdwZWFjZV9zeW1ib2wnOidcXHUyNjJlXFx1ZmUwZicsXG4gICdwZWFjaCc6J1xcdWQ4M2NcXHVkZjUxJyxcbiAgJ3BlYW51dHMnOidcXHVkODNlXFx1ZGQ1YycsXG4gICdwZWFyJzonXFx1ZDgzY1xcdWRmNTAnLFxuICAncGVuJzonXFx1ZDgzZFxcdWRkOGEnLFxuICAncGVuY2lsMic6J1xcdTI3MGZcXHVmZTBmJyxcbiAgJ3Blbmd1aW4nOidcXHVkODNkXFx1ZGMyNycsXG4gICdwZW5zaXZlJzonXFx1ZDgzZFxcdWRlMTQnLFxuICAncGVyZm9ybWluZ19hcnRzJzonXFx1ZDgzY1xcdWRmYWQnLFxuICAncGVyc2V2ZXJlJzonXFx1ZDgzZFxcdWRlMjMnLFxuICAncGVyc29uX2ZlbmNpbmcnOidcXHVkODNlXFx1ZGQzYScsXG4gICdwb3V0aW5nX3dvbWFuJzonXFx1ZDgzZFxcdWRlNGUnLFxuICAncGhvbmUnOidcXHUyNjBlXFx1ZmUwZicsXG4gICdwaWNrJzonXFx1MjZjZicsXG4gICdwaWcnOidcXHVkODNkXFx1ZGMzNycsXG4gICdwaWcyJzonXFx1ZDgzZFxcdWRjMTYnLFxuICAncGlnX25vc2UnOidcXHVkODNkXFx1ZGMzZCcsXG4gICdwaWxsJzonXFx1ZDgzZFxcdWRjOGEnLFxuICAncGluZWFwcGxlJzonXFx1ZDgzY1xcdWRmNGQnLFxuICAncGluZ19wb25nJzonXFx1ZDgzY1xcdWRmZDMnLFxuICAncGlzY2VzJzonXFx1MjY1M1xcdWZlMGYnLFxuICAncGl6emEnOidcXHVkODNjXFx1ZGY1NScsXG4gICdwbGFjZV9vZl93b3JzaGlwJzonXFx1ZDgzZFxcdWRlZDAnLFxuICAncGxhdGVfd2l0aF9jdXRsZXJ5JzonXFx1ZDgzY1xcdWRmN2QnLFxuICAncGxheV9vcl9wYXVzZV9idXR0b24nOidcXHUyM2VmJyxcbiAgJ3BvaW50X2Rvd24nOidcXHVkODNkXFx1ZGM0NycsXG4gICdwb2ludF9sZWZ0JzonXFx1ZDgzZFxcdWRjNDgnLFxuICAncG9pbnRfcmlnaHQnOidcXHVkODNkXFx1ZGM0OScsXG4gICdwb2ludF91cCc6J1xcdTI2MWRcXHVmZTBmJyxcbiAgJ3BvaW50X3VwXzInOidcXHVkODNkXFx1ZGM0NicsXG4gICdwb2xpY2VfY2FyJzonXFx1ZDgzZFxcdWRlOTMnLFxuICAncG9saWNld29tYW4nOidcXHVkODNkXFx1ZGM2ZSZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAncG9vZGxlJzonXFx1ZDgzZFxcdWRjMjknLFxuICAncG9wY29ybic6J1xcdWQ4M2NcXHVkZjdmJyxcbiAgJ3Bvc3Rfb2ZmaWNlJzonXFx1ZDgzY1xcdWRmZTMnLFxuICAncG9zdGFsX2hvcm4nOidcXHVkODNkXFx1ZGNlZicsXG4gICdwb3N0Ym94JzonXFx1ZDgzZFxcdWRjZWUnLFxuICAncG90YWJsZV93YXRlcic6J1xcdWQ4M2RcXHVkZWIwJyxcbiAgJ3BvdGF0byc6J1xcdWQ4M2VcXHVkZDU0JyxcbiAgJ3BvdWNoJzonXFx1ZDgzZFxcdWRjNWQnLFxuICAncG91bHRyeV9sZWcnOidcXHVkODNjXFx1ZGY1NycsXG4gICdwb3VuZCc6J1xcdWQ4M2RcXHVkY2I3JyxcbiAgJ3JhZ2UnOidcXHVkODNkXFx1ZGUyMScsXG4gICdwb3V0aW5nX2NhdCc6J1xcdWQ4M2RcXHVkZTNlJyxcbiAgJ3BvdXRpbmdfbWFuJzonXFx1ZDgzZFxcdWRlNGUmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ3ByYXknOidcXHVkODNkXFx1ZGU0ZicsXG4gICdwcmF5ZXJfYmVhZHMnOidcXHVkODNkXFx1ZGNmZicsXG4gICdwcmVnbmFudF93b21hbic6J1xcdWQ4M2VcXHVkZDMwJyxcbiAgJ3ByZXZpb3VzX3RyYWNrX2J1dHRvbic6J1xcdTIzZWUnLFxuICAncHJpbmNlJzonXFx1ZDgzZVxcdWRkMzQnLFxuICAncHJpbmNlc3MnOidcXHVkODNkXFx1ZGM3OCcsXG4gICdwcmludGVyJzonXFx1ZDgzZFxcdWRkYTgnLFxuICAncHVycGxlX2hlYXJ0JzonXFx1ZDgzZFxcdWRjOWMnLFxuICAncHVyc2UnOidcXHVkODNkXFx1ZGM1YicsXG4gICdwdXNocGluJzonXFx1ZDgzZFxcdWRjY2MnLFxuICAncHV0X2xpdHRlcl9pbl9pdHNfcGxhY2UnOidcXHVkODNkXFx1ZGVhZScsXG4gICdxdWVzdGlvbic6J1xcdTI3NTMnLFxuICAncmFiYml0JzonXFx1ZDgzZFxcdWRjMzAnLFxuICAncmFiYml0Mic6J1xcdWQ4M2RcXHVkYzA3JyxcbiAgJ3JhY2Vob3JzZSc6J1xcdWQ4M2RcXHVkYzBlJyxcbiAgJ3JhY2luZ19jYXInOidcXHVkODNjXFx1ZGZjZScsXG4gICdyYWRpbyc6J1xcdWQ4M2RcXHVkY2ZiJyxcbiAgJ3JhZGlvX2J1dHRvbic6J1xcdWQ4M2RcXHVkZDE4JyxcbiAgJ3JhZGlvYWN0aXZlJzonXFx1MjYyMlxcdWZlMGYnLFxuICAncmFpbHdheV9jYXInOidcXHVkODNkXFx1ZGU4MycsXG4gICdyYWlsd2F5X3RyYWNrJzonXFx1ZDgzZFxcdWRlZTQnLFxuICAncmFpbmJvdyc6J1xcdWQ4M2NcXHVkZjA4JyxcbiAgJ3JhaW5ib3dfZmxhZyc6J1xcdWQ4M2NcXHVkZmYzXFx1ZmUwZiZ6d2o7XFx1ZDgzY1xcdWRmMDgnLFxuICAncmFpc2VkX2JhY2tfb2ZfaGFuZCc6J1xcdWQ4M2VcXHVkZDFhJyxcbiAgJ3JhaXNlZF9oYW5kX3dpdGhfZmluZ2Vyc19zcGxheWVkJzonXFx1ZDgzZFxcdWRkOTAnLFxuICAncmFpc2VkX2hhbmRzJzonXFx1ZDgzZFxcdWRlNGMnLFxuICAncmFpc2luZ19oYW5kX3dvbWFuJzonXFx1ZDgzZFxcdWRlNGInLFxuICAncmFpc2luZ19oYW5kX21hbic6J1xcdWQ4M2RcXHVkZTRiJnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdyYW0nOidcXHVkODNkXFx1ZGMwZicsXG4gICdyYW1lbic6J1xcdWQ4M2NcXHVkZjVjJyxcbiAgJ3JhdCc6J1xcdWQ4M2RcXHVkYzAwJyxcbiAgJ3JlY29yZF9idXR0b24nOidcXHUyM2ZhJyxcbiAgJ3JlY3ljbGUnOidcXHUyNjdiXFx1ZmUwZicsXG4gICdyZWRfY2lyY2xlJzonXFx1ZDgzZFxcdWRkMzQnLFxuICAncmVnaXN0ZXJlZCc6J1xcdTAwYWVcXHVmZTBmJyxcbiAgJ3JlbGF4ZWQnOidcXHUyNjNhXFx1ZmUwZicsXG4gICdyZWxpZXZlZCc6J1xcdWQ4M2RcXHVkZTBjJyxcbiAgJ3JlbWluZGVyX3JpYmJvbic6J1xcdWQ4M2NcXHVkZjk3JyxcbiAgJ3JlcGVhdCc6J1xcdWQ4M2RcXHVkZDAxJyxcbiAgJ3JlcGVhdF9vbmUnOidcXHVkODNkXFx1ZGQwMicsXG4gICdyZXNjdWVfd29ya2VyX2hlbG1ldCc6J1xcdTI2ZDEnLFxuICAncmVzdHJvb20nOidcXHVkODNkXFx1ZGViYicsXG4gICdyZXZvbHZpbmdfaGVhcnRzJzonXFx1ZDgzZFxcdWRjOWUnLFxuICAncmV3aW5kJzonXFx1MjNlYScsXG4gICdyaGlub2Nlcm9zJzonXFx1ZDgzZVxcdWRkOGYnLFxuICAncmliYm9uJzonXFx1ZDgzY1xcdWRmODAnLFxuICAncmljZSc6J1xcdWQ4M2NcXHVkZjVhJyxcbiAgJ3JpY2VfYmFsbCc6J1xcdWQ4M2NcXHVkZjU5JyxcbiAgJ3JpY2VfY3JhY2tlcic6J1xcdWQ4M2NcXHVkZjU4JyxcbiAgJ3JpY2Vfc2NlbmUnOidcXHVkODNjXFx1ZGY5MScsXG4gICdyaWdodF9hbmdlcl9idWJibGUnOidcXHVkODNkXFx1ZGRlZicsXG4gICdyaW5nJzonXFx1ZDgzZFxcdWRjOGQnLFxuICAncm9ib3QnOidcXHVkODNlXFx1ZGQxNicsXG4gICdyb2NrZXQnOidcXHVkODNkXFx1ZGU4MCcsXG4gICdyb2ZsJzonXFx1ZDgzZVxcdWRkMjMnLFxuICAncm9sbF9leWVzJzonXFx1ZDgzZFxcdWRlNDQnLFxuICAncm9sbGVyX2NvYXN0ZXInOidcXHVkODNjXFx1ZGZhMicsXG4gICdyb29zdGVyJzonXFx1ZDgzZFxcdWRjMTMnLFxuICAncm9zZSc6J1xcdWQ4M2NcXHVkZjM5JyxcbiAgJ3Jvc2V0dGUnOidcXHVkODNjXFx1ZGZmNScsXG4gICdyb3RhdGluZ19saWdodCc6J1xcdWQ4M2RcXHVkZWE4JyxcbiAgJ3JvdW5kX3B1c2hwaW4nOidcXHVkODNkXFx1ZGNjZCcsXG4gICdyb3dpbmdfbWFuJzonXFx1ZDgzZFxcdWRlYTMnLFxuICAncm93aW5nX3dvbWFuJzonXFx1ZDgzZFxcdWRlYTMmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3J1Z2J5X2Zvb3RiYWxsJzonXFx1ZDgzY1xcdWRmYzknLFxuICAncnVubmluZ19tYW4nOidcXHVkODNjXFx1ZGZjMycsXG4gICdydW5uaW5nX3NoaXJ0X3dpdGhfc2FzaCc6J1xcdWQ4M2NcXHVkZmJkJyxcbiAgJ3J1bm5pbmdfd29tYW4nOidcXHVkODNjXFx1ZGZjMyZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnc2EnOidcXHVkODNjXFx1ZGUwMlxcdWZlMGYnLFxuICAnc2FnaXR0YXJpdXMnOidcXHUyNjUwXFx1ZmUwZicsXG4gICdzYWtlJzonXFx1ZDgzY1xcdWRmNzYnLFxuICAnc2FuZGFsJzonXFx1ZDgzZFxcdWRjNjEnLFxuICAnc2FudGEnOidcXHVkODNjXFx1ZGY4NScsXG4gICdzYXRlbGxpdGUnOidcXHVkODNkXFx1ZGNlMScsXG4gICdzYXhvcGhvbmUnOidcXHVkODNjXFx1ZGZiNycsXG4gICdzY2hvb2wnOidcXHVkODNjXFx1ZGZlYicsXG4gICdzY2hvb2xfc2F0Y2hlbCc6J1xcdWQ4M2NcXHVkZjkyJyxcbiAgJ3NjaXNzb3JzJzonXFx1MjcwMlxcdWZlMGYnLFxuICAnc2NvcnBpb24nOidcXHVkODNlXFx1ZGQ4MicsXG4gICdzY29ycGl1cyc6J1xcdTI2NGZcXHVmZTBmJyxcbiAgJ3NjcmVhbSc6J1xcdWQ4M2RcXHVkZTMxJyxcbiAgJ3NjcmVhbV9jYXQnOidcXHVkODNkXFx1ZGU0MCcsXG4gICdzY3JvbGwnOidcXHVkODNkXFx1ZGNkYycsXG4gICdzZWF0JzonXFx1ZDgzZFxcdWRjYmEnLFxuICAnc2VjcmV0JzonXFx1MzI5OVxcdWZlMGYnLFxuICAnc2VlX25vX2V2aWwnOidcXHVkODNkXFx1ZGU0OCcsXG4gICdzZWVkbGluZyc6J1xcdWQ4M2NcXHVkZjMxJyxcbiAgJ3NlbGZpZSc6J1xcdWQ4M2VcXHVkZDMzJyxcbiAgJ3NoYWxsb3dfcGFuX29mX2Zvb2QnOidcXHVkODNlXFx1ZGQ1OCcsXG4gICdzaGFtcm9jayc6J1xcdTI2MThcXHVmZTBmJyxcbiAgJ3NoYXJrJzonXFx1ZDgzZVxcdWRkODgnLFxuICAnc2hhdmVkX2ljZSc6J1xcdWQ4M2NcXHVkZjY3JyxcbiAgJ3NoZWVwJzonXFx1ZDgzZFxcdWRjMTEnLFxuICAnc2hlbGwnOidcXHVkODNkXFx1ZGMxYScsXG4gICdzaGllbGQnOidcXHVkODNkXFx1ZGVlMScsXG4gICdzaGludG9fc2hyaW5lJzonXFx1MjZlOScsXG4gICdzaGlwJzonXFx1ZDgzZFxcdWRlYTInLFxuICAnc2hpcnQnOidcXHVkODNkXFx1ZGM1NScsXG4gICdzaG9wcGluZyc6J1xcdWQ4M2RcXHVkZWNkJyxcbiAgJ3Nob3BwaW5nX2NhcnQnOidcXHVkODNkXFx1ZGVkMicsXG4gICdzaG93ZXInOidcXHVkODNkXFx1ZGViZicsXG4gICdzaHJpbXAnOidcXHVkODNlXFx1ZGQ5MCcsXG4gICdzaWduYWxfc3RyZW5ndGgnOidcXHVkODNkXFx1ZGNmNicsXG4gICdzaXhfcG9pbnRlZF9zdGFyJzonXFx1ZDgzZFxcdWRkMmYnLFxuICAnc2tpJzonXFx1ZDgzY1xcdWRmYmYnLFxuICAnc2tpZXInOidcXHUyNmY3JyxcbiAgJ3NrdWxsJzonXFx1ZDgzZFxcdWRjODAnLFxuICAnc2t1bGxfYW5kX2Nyb3NzYm9uZXMnOidcXHUyNjIwXFx1ZmUwZicsXG4gICdzbGVlcGluZyc6J1xcdWQ4M2RcXHVkZTM0JyxcbiAgJ3NsZWVwaW5nX2JlZCc6J1xcdWQ4M2RcXHVkZWNjJyxcbiAgJ3NsZWVweSc6J1xcdWQ4M2RcXHVkZTJhJyxcbiAgJ3NsaWdodGx5X2Zyb3duaW5nX2ZhY2UnOidcXHVkODNkXFx1ZGU0MScsXG4gICdzbGlnaHRseV9zbWlsaW5nX2ZhY2UnOidcXHVkODNkXFx1ZGU0MicsXG4gICdzbG90X21hY2hpbmUnOidcXHVkODNjXFx1ZGZiMCcsXG4gICdzbWFsbF9haXJwbGFuZSc6J1xcdWQ4M2RcXHVkZWU5JyxcbiAgJ3NtYWxsX2JsdWVfZGlhbW9uZCc6J1xcdWQ4M2RcXHVkZDM5JyxcbiAgJ3NtYWxsX29yYW5nZV9kaWFtb25kJzonXFx1ZDgzZFxcdWRkMzgnLFxuICAnc21hbGxfcmVkX3RyaWFuZ2xlJzonXFx1ZDgzZFxcdWRkM2EnLFxuICAnc21hbGxfcmVkX3RyaWFuZ2xlX2Rvd24nOidcXHVkODNkXFx1ZGQzYicsXG4gICdzbWlsZSc6J1xcdWQ4M2RcXHVkZTA0JyxcbiAgJ3NtaWxlX2NhdCc6J1xcdWQ4M2RcXHVkZTM4JyxcbiAgJ3NtaWxleSc6J1xcdWQ4M2RcXHVkZTAzJyxcbiAgJ3NtaWxleV9jYXQnOidcXHVkODNkXFx1ZGUzYScsXG4gICdzbWlsaW5nX2ltcCc6J1xcdWQ4M2RcXHVkZTA4JyxcbiAgJ3NtaXJrJzonXFx1ZDgzZFxcdWRlMGYnLFxuICAnc21pcmtfY2F0JzonXFx1ZDgzZFxcdWRlM2MnLFxuICAnc21va2luZyc6J1xcdWQ4M2RcXHVkZWFjJyxcbiAgJ3NuYWlsJzonXFx1ZDgzZFxcdWRjMGMnLFxuICAnc25ha2UnOidcXHVkODNkXFx1ZGMwZCcsXG4gICdzbmVlemluZ19mYWNlJzonXFx1ZDgzZVxcdWRkMjcnLFxuICAnc25vd2JvYXJkZXInOidcXHVkODNjXFx1ZGZjMicsXG4gICdzbm93Zmxha2UnOidcXHUyNzQ0XFx1ZmUwZicsXG4gICdzbm93bWFuJzonXFx1MjZjNFxcdWZlMGYnLFxuICAnc25vd21hbl93aXRoX3Nub3cnOidcXHUyNjAzXFx1ZmUwZicsXG4gICdzb2InOidcXHVkODNkXFx1ZGUyZCcsXG4gICdzb2NjZXInOidcXHUyNmJkXFx1ZmUwZicsXG4gICdzb29uJzonXFx1ZDgzZFxcdWRkMWMnLFxuICAnc29zJzonXFx1ZDgzY1xcdWRkOTgnLFxuICAnc291bmQnOidcXHVkODNkXFx1ZGQwOScsXG4gICdzcGFjZV9pbnZhZGVyJzonXFx1ZDgzZFxcdWRjN2UnLFxuICAnc3BhZGVzJzonXFx1MjY2MFxcdWZlMGYnLFxuICAnc3BhZ2hldHRpJzonXFx1ZDgzY1xcdWRmNWQnLFxuICAnc3BhcmtsZSc6J1xcdTI3NDdcXHVmZTBmJyxcbiAgJ3NwYXJrbGVyJzonXFx1ZDgzY1xcdWRmODcnLFxuICAnc3BhcmtsZXMnOidcXHUyNzI4JyxcbiAgJ3NwYXJrbGluZ19oZWFydCc6J1xcdWQ4M2RcXHVkYzk2JyxcbiAgJ3NwZWFrX25vX2V2aWwnOidcXHVkODNkXFx1ZGU0YScsXG4gICdzcGVha2VyJzonXFx1ZDgzZFxcdWRkMDgnLFxuICAnc3BlYWtpbmdfaGVhZCc6J1xcdWQ4M2RcXHVkZGUzJyxcbiAgJ3NwZWVjaF9iYWxsb29uJzonXFx1ZDgzZFxcdWRjYWMnLFxuICAnc3BlZWRib2F0JzonXFx1ZDgzZFxcdWRlYTQnLFxuICAnc3BpZGVyJzonXFx1ZDgzZFxcdWRkNzcnLFxuICAnc3BpZGVyX3dlYic6J1xcdWQ4M2RcXHVkZDc4JyxcbiAgJ3NwaXJhbF9jYWxlbmRhcic6J1xcdWQ4M2RcXHVkZGQzJyxcbiAgJ3NwaXJhbF9ub3RlcGFkJzonXFx1ZDgzZFxcdWRkZDInLFxuICAnc3Bvb24nOidcXHVkODNlXFx1ZGQ0NCcsXG4gICdzcXVpZCc6J1xcdWQ4M2VcXHVkZDkxJyxcbiAgJ3N0YWRpdW0nOidcXHVkODNjXFx1ZGZkZicsXG4gICdzdGFyJzonXFx1MmI1MFxcdWZlMGYnLFxuICAnc3RhcjInOidcXHVkODNjXFx1ZGYxZicsXG4gICdzdGFyX2FuZF9jcmVzY2VudCc6J1xcdTI2MmFcXHVmZTBmJyxcbiAgJ3N0YXJfb2ZfZGF2aWQnOidcXHUyNzIxXFx1ZmUwZicsXG4gICdzdGFycyc6J1xcdWQ4M2NcXHVkZjIwJyxcbiAgJ3N0YXRpb24nOidcXHVkODNkXFx1ZGU4OScsXG4gICdzdGF0dWVfb2ZfbGliZXJ0eSc6J1xcdWQ4M2RcXHVkZGZkJyxcbiAgJ3N0ZWFtX2xvY29tb3RpdmUnOidcXHVkODNkXFx1ZGU4MicsXG4gICdzdGV3JzonXFx1ZDgzY1xcdWRmNzInLFxuICAnc3RvcF9idXR0b24nOidcXHUyM2Y5JyxcbiAgJ3N0b3Bfc2lnbic6J1xcdWQ4M2RcXHVkZWQxJyxcbiAgJ3N0b3B3YXRjaCc6J1xcdTIzZjEnLFxuICAnc3RyYWlnaHRfcnVsZXInOidcXHVkODNkXFx1ZGNjZicsXG4gICdzdHJhd2JlcnJ5JzonXFx1ZDgzY1xcdWRmNTMnLFxuICAnc3R1Y2tfb3V0X3Rvbmd1ZSc6J1xcdWQ4M2RcXHVkZTFiJyxcbiAgJ3N0dWNrX291dF90b25ndWVfY2xvc2VkX2V5ZXMnOidcXHVkODNkXFx1ZGUxZCcsXG4gICdzdHVja19vdXRfdG9uZ3VlX3dpbmtpbmdfZXllJzonXFx1ZDgzZFxcdWRlMWMnLFxuICAnc3R1ZGlvX21pY3JvcGhvbmUnOidcXHVkODNjXFx1ZGY5OScsXG4gICdzdHVmZmVkX2ZsYXRicmVhZCc6J1xcdWQ4M2VcXHVkZDU5JyxcbiAgJ3N1bl9iZWhpbmRfbGFyZ2VfY2xvdWQnOidcXHVkODNjXFx1ZGYyNScsXG4gICdzdW5fYmVoaW5kX3JhaW5fY2xvdWQnOidcXHVkODNjXFx1ZGYyNicsXG4gICdzdW5fYmVoaW5kX3NtYWxsX2Nsb3VkJzonXFx1ZDgzY1xcdWRmMjQnLFxuICAnc3VuX3dpdGhfZmFjZSc6J1xcdWQ4M2NcXHVkZjFlJyxcbiAgJ3N1bmZsb3dlcic6J1xcdWQ4M2NcXHVkZjNiJyxcbiAgJ3N1bmdsYXNzZXMnOidcXHVkODNkXFx1ZGUwZScsXG4gICdzdW5ueSc6J1xcdTI2MDBcXHVmZTBmJyxcbiAgJ3N1bnJpc2UnOidcXHVkODNjXFx1ZGYwNScsXG4gICdzdW5yaXNlX292ZXJfbW91bnRhaW5zJzonXFx1ZDgzY1xcdWRmMDQnLFxuICAnc3VyZmluZ19tYW4nOidcXHVkODNjXFx1ZGZjNCcsXG4gICdzdXJmaW5nX3dvbWFuJzonXFx1ZDgzY1xcdWRmYzQmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3N1c2hpJzonXFx1ZDgzY1xcdWRmNjMnLFxuICAnc3VzcGVuc2lvbl9yYWlsd2F5JzonXFx1ZDgzZFxcdWRlOWYnLFxuICAnc3dlYXQnOidcXHVkODNkXFx1ZGUxMycsXG4gICdzd2VhdF9kcm9wcyc6J1xcdWQ4M2RcXHVkY2E2JyxcbiAgJ3N3ZWF0X3NtaWxlJzonXFx1ZDgzZFxcdWRlMDUnLFxuICAnc3dlZXRfcG90YXRvJzonXFx1ZDgzY1xcdWRmNjAnLFxuICAnc3dpbW1pbmdfbWFuJzonXFx1ZDgzY1xcdWRmY2EnLFxuICAnc3dpbW1pbmdfd29tYW4nOidcXHVkODNjXFx1ZGZjYSZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnc3ltYm9scyc6J1xcdWQ4M2RcXHVkZDIzJyxcbiAgJ3N5bmFnb2d1ZSc6J1xcdWQ4M2RcXHVkZDRkJyxcbiAgJ3N5cmluZ2UnOidcXHVkODNkXFx1ZGM4OScsXG4gICd0YWNvJzonXFx1ZDgzY1xcdWRmMmUnLFxuICAndGFkYSc6J1xcdWQ4M2NcXHVkZjg5JyxcbiAgJ3RhbmFiYXRhX3RyZWUnOidcXHVkODNjXFx1ZGY4YicsXG4gICd0YXVydXMnOidcXHUyNjQ5XFx1ZmUwZicsXG4gICd0YXhpJzonXFx1ZDgzZFxcdWRlOTUnLFxuICAndGVhJzonXFx1ZDgzY1xcdWRmNzUnLFxuICAndGVsZXBob25lX3JlY2VpdmVyJzonXFx1ZDgzZFxcdWRjZGUnLFxuICAndGVsZXNjb3BlJzonXFx1ZDgzZFxcdWRkMmQnLFxuICAndGVubmlzJzonXFx1ZDgzY1xcdWRmYmUnLFxuICAndGVudCc6J1xcdTI2ZmFcXHVmZTBmJyxcbiAgJ3RoZXJtb21ldGVyJzonXFx1ZDgzY1xcdWRmMjEnLFxuICAndGhpbmtpbmcnOidcXHVkODNlXFx1ZGQxNCcsXG4gICd0aG91Z2h0X2JhbGxvb24nOidcXHVkODNkXFx1ZGNhZCcsXG4gICd0aWNrZXQnOidcXHVkODNjXFx1ZGZhYicsXG4gICd0aWNrZXRzJzonXFx1ZDgzY1xcdWRmOWYnLFxuICAndGlnZXInOidcXHVkODNkXFx1ZGMyZicsXG4gICd0aWdlcjInOidcXHVkODNkXFx1ZGMwNScsXG4gICd0aW1lcl9jbG9jayc6J1xcdTIzZjInLFxuICAndGlwcGluZ19oYW5kX21hbic6J1xcdWQ4M2RcXHVkYzgxJnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICd0aXJlZF9mYWNlJzonXFx1ZDgzZFxcdWRlMmInLFxuICAndG0nOidcXHUyMTIyXFx1ZmUwZicsXG4gICd0b2lsZXQnOidcXHVkODNkXFx1ZGViZCcsXG4gICd0b2t5b190b3dlcic6J1xcdWQ4M2RcXHVkZGZjJyxcbiAgJ3RvbWF0byc6J1xcdWQ4M2NcXHVkZjQ1JyxcbiAgJ3Rvbmd1ZSc6J1xcdWQ4M2RcXHVkYzQ1JyxcbiAgJ3RvcCc6J1xcdWQ4M2RcXHVkZDFkJyxcbiAgJ3RvcGhhdCc6J1xcdWQ4M2NcXHVkZmE5JyxcbiAgJ3Rvcm5hZG8nOidcXHVkODNjXFx1ZGYyYScsXG4gICd0cmFja2JhbGwnOidcXHVkODNkXFx1ZGRiMicsXG4gICd0cmFjdG9yJzonXFx1ZDgzZFxcdWRlOWMnLFxuICAndHJhZmZpY19saWdodCc6J1xcdWQ4M2RcXHVkZWE1JyxcbiAgJ3RyYWluJzonXFx1ZDgzZFxcdWRlOGInLFxuICAndHJhaW4yJzonXFx1ZDgzZFxcdWRlODYnLFxuICAndHJhbSc6J1xcdWQ4M2RcXHVkZThhJyxcbiAgJ3RyaWFuZ3VsYXJfZmxhZ19vbl9wb3N0JzonXFx1ZDgzZFxcdWRlYTknLFxuICAndHJpYW5ndWxhcl9ydWxlcic6J1xcdWQ4M2RcXHVkY2QwJyxcbiAgJ3RyaWRlbnQnOidcXHVkODNkXFx1ZGQzMScsXG4gICd0cml1bXBoJzonXFx1ZDgzZFxcdWRlMjQnLFxuICAndHJvbGxleWJ1cyc6J1xcdWQ4M2RcXHVkZThlJyxcbiAgJ3Ryb3BoeSc6J1xcdWQ4M2NcXHVkZmM2JyxcbiAgJ3Ryb3BpY2FsX2RyaW5rJzonXFx1ZDgzY1xcdWRmNzknLFxuICAndHJvcGljYWxfZmlzaCc6J1xcdWQ4M2RcXHVkYzIwJyxcbiAgJ3RydWNrJzonXFx1ZDgzZFxcdWRlOWEnLFxuICAndHJ1bXBldCc6J1xcdWQ4M2NcXHVkZmJhJyxcbiAgJ3R1bGlwJzonXFx1ZDgzY1xcdWRmMzcnLFxuICAndHVtYmxlcl9nbGFzcyc6J1xcdWQ4M2VcXHVkZDQzJyxcbiAgJ3R1cmtleSc6J1xcdWQ4M2VcXHVkZDgzJyxcbiAgJ3R1cnRsZSc6J1xcdWQ4M2RcXHVkYzIyJyxcbiAgJ3R2JzonXFx1ZDgzZFxcdWRjZmEnLFxuICAndHdpc3RlZF9yaWdodHdhcmRzX2Fycm93cyc6J1xcdWQ4M2RcXHVkZDAwJyxcbiAgJ3R3b19oZWFydHMnOidcXHVkODNkXFx1ZGM5NScsXG4gICd0d29fbWVuX2hvbGRpbmdfaGFuZHMnOidcXHVkODNkXFx1ZGM2YycsXG4gICd0d29fd29tZW5faG9sZGluZ19oYW5kcyc6J1xcdWQ4M2RcXHVkYzZkJyxcbiAgJ3U1MjcyJzonXFx1ZDgzY1xcdWRlMzknLFxuICAndTU0MDgnOidcXHVkODNjXFx1ZGUzNCcsXG4gICd1NTViNic6J1xcdWQ4M2NcXHVkZTNhJyxcbiAgJ3U2MzA3JzonXFx1ZDgzY1xcdWRlMmZcXHVmZTBmJyxcbiAgJ3U2NzA4JzonXFx1ZDgzY1xcdWRlMzdcXHVmZTBmJyxcbiAgJ3U2NzA5JzonXFx1ZDgzY1xcdWRlMzYnLFxuICAndTZlODAnOidcXHVkODNjXFx1ZGUzNScsXG4gICd1NzEyMSc6J1xcdWQ4M2NcXHVkZTFhXFx1ZmUwZicsXG4gICd1NzUzMyc6J1xcdWQ4M2NcXHVkZTM4JyxcbiAgJ3U3OTgxJzonXFx1ZDgzY1xcdWRlMzInLFxuICAndTdhN2EnOidcXHVkODNjXFx1ZGUzMycsXG4gICd1bWJyZWxsYSc6J1xcdTI2MTRcXHVmZTBmJyxcbiAgJ3VuYW11c2VkJzonXFx1ZDgzZFxcdWRlMTInLFxuICAndW5kZXJhZ2UnOidcXHVkODNkXFx1ZGQxZScsXG4gICd1bmljb3JuJzonXFx1ZDgzZVxcdWRkODQnLFxuICAndW5sb2NrJzonXFx1ZDgzZFxcdWRkMTMnLFxuICAndXAnOidcXHVkODNjXFx1ZGQ5OScsXG4gICd1cHNpZGVfZG93bl9mYWNlJzonXFx1ZDgzZFxcdWRlNDMnLFxuICAndic6J1xcdTI3MGNcXHVmZTBmJyxcbiAgJ3ZlcnRpY2FsX3RyYWZmaWNfbGlnaHQnOidcXHVkODNkXFx1ZGVhNicsXG4gICd2aHMnOidcXHVkODNkXFx1ZGNmYycsXG4gICd2aWJyYXRpb25fbW9kZSc6J1xcdWQ4M2RcXHVkY2YzJyxcbiAgJ3ZpZGVvX2NhbWVyYSc6J1xcdWQ4M2RcXHVkY2Y5JyxcbiAgJ3ZpZGVvX2dhbWUnOidcXHVkODNjXFx1ZGZhZScsXG4gICd2aW9saW4nOidcXHVkODNjXFx1ZGZiYicsXG4gICd2aXJnbyc6J1xcdTI2NGRcXHVmZTBmJyxcbiAgJ3ZvbGNhbm8nOidcXHVkODNjXFx1ZGYwYicsXG4gICd2b2xsZXliYWxsJzonXFx1ZDgzY1xcdWRmZDAnLFxuICAndnMnOidcXHVkODNjXFx1ZGQ5YScsXG4gICd2dWxjYW5fc2FsdXRlJzonXFx1ZDgzZFxcdWRkOTYnLFxuICAnd2Fsa2luZ19tYW4nOidcXHVkODNkXFx1ZGViNicsXG4gICd3YWxraW5nX3dvbWFuJzonXFx1ZDgzZFxcdWRlYjYmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3dhbmluZ19jcmVzY2VudF9tb29uJzonXFx1ZDgzY1xcdWRmMTgnLFxuICAnd2FuaW5nX2dpYmJvdXNfbW9vbic6J1xcdWQ4M2NcXHVkZjE2JyxcbiAgJ3dhcm5pbmcnOidcXHUyNmEwXFx1ZmUwZicsXG4gICd3YXN0ZWJhc2tldCc6J1xcdWQ4M2RcXHVkZGQxJyxcbiAgJ3dhdGNoJzonXFx1MjMxYVxcdWZlMGYnLFxuICAnd2F0ZXJfYnVmZmFsbyc6J1xcdWQ4M2RcXHVkYzAzJyxcbiAgJ3dhdGVybWVsb24nOidcXHVkODNjXFx1ZGY0OScsXG4gICd3YXZlJzonXFx1ZDgzZFxcdWRjNGInLFxuICAnd2F2eV9kYXNoJzonXFx1MzAzMFxcdWZlMGYnLFxuICAnd2F4aW5nX2NyZXNjZW50X21vb24nOidcXHVkODNjXFx1ZGYxMicsXG4gICd3Yyc6J1xcdWQ4M2RcXHVkZWJlJyxcbiAgJ3dlYXJ5JzonXFx1ZDgzZFxcdWRlMjknLFxuICAnd2VkZGluZyc6J1xcdWQ4M2RcXHVkYzkyJyxcbiAgJ3dlaWdodF9saWZ0aW5nX21hbic6J1xcdWQ4M2NcXHVkZmNiXFx1ZmUwZicsXG4gICd3ZWlnaHRfbGlmdGluZ193b21hbic6J1xcdWQ4M2NcXHVkZmNiXFx1ZmUwZiZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd2hhbGUnOidcXHVkODNkXFx1ZGMzMycsXG4gICd3aGFsZTInOidcXHVkODNkXFx1ZGMwYicsXG4gICd3aGVlbF9vZl9kaGFybWEnOidcXHUyNjM4XFx1ZmUwZicsXG4gICd3aGVlbGNoYWlyJzonXFx1MjY3ZlxcdWZlMGYnLFxuICAnd2hpdGVfY2hlY2tfbWFyayc6J1xcdTI3MDUnLFxuICAnd2hpdGVfY2lyY2xlJzonXFx1MjZhYVxcdWZlMGYnLFxuICAnd2hpdGVfZmxhZyc6J1xcdWQ4M2NcXHVkZmYzXFx1ZmUwZicsXG4gICd3aGl0ZV9mbG93ZXInOidcXHVkODNkXFx1ZGNhZScsXG4gICd3aGl0ZV9sYXJnZV9zcXVhcmUnOidcXHUyYjFjXFx1ZmUwZicsXG4gICd3aGl0ZV9tZWRpdW1fc21hbGxfc3F1YXJlJzonXFx1MjVmZFxcdWZlMGYnLFxuICAnd2hpdGVfbWVkaXVtX3NxdWFyZSc6J1xcdTI1ZmJcXHVmZTBmJyxcbiAgJ3doaXRlX3NtYWxsX3NxdWFyZSc6J1xcdTI1YWJcXHVmZTBmJyxcbiAgJ3doaXRlX3NxdWFyZV9idXR0b24nOidcXHVkODNkXFx1ZGQzMycsXG4gICd3aWx0ZWRfZmxvd2VyJzonXFx1ZDgzZVxcdWRkNDAnLFxuICAnd2luZF9jaGltZSc6J1xcdWQ4M2NcXHVkZjkwJyxcbiAgJ3dpbmRfZmFjZSc6J1xcdWQ4M2NcXHVkZjJjJyxcbiAgJ3dpbmVfZ2xhc3MnOidcXHVkODNjXFx1ZGY3NycsXG4gICd3aW5rJzonXFx1ZDgzZFxcdWRlMDknLFxuICAnd29sZic6J1xcdWQ4M2RcXHVkYzNhJyxcbiAgJ3dvbWFuJzonXFx1ZDgzZFxcdWRjNjknLFxuICAnd29tYW5fYXJ0aXN0JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2NcXHVkZmE4JyxcbiAgJ3dvbWFuX2FzdHJvbmF1dCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGU4MCcsXG4gICd3b21hbl9jYXJ0d2hlZWxpbmcnOidcXHVkODNlXFx1ZGQzOCZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd29tYW5fY29vayc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNjXFx1ZGY3MycsXG4gICd3b21hbl9mYWNlcGFsbWluZyc6J1xcdWQ4M2VcXHVkZDI2Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICd3b21hbl9mYWN0b3J5X3dvcmtlcic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNjXFx1ZGZlZCcsXG4gICd3b21hbl9mYXJtZXInOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzY1xcdWRmM2UnLFxuICAnd29tYW5fZmlyZWZpZ2h0ZXInOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRlOTInLFxuICAnd29tYW5faGVhbHRoX3dvcmtlcic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHUyNjk1XFx1ZmUwZicsXG4gICd3b21hbl9qdWRnZSc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHUyNjk2XFx1ZmUwZicsXG4gICd3b21hbl9qdWdnbGluZyc6J1xcdWQ4M2VcXHVkZDM5Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICd3b21hbl9tZWNoYW5pYyc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGQyNycsXG4gICd3b21hbl9vZmZpY2Vfd29ya2VyJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkY2JjJyxcbiAgJ3dvbWFuX3BpbG90JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdTI3MDhcXHVmZTBmJyxcbiAgJ3dvbWFuX3BsYXlpbmdfaGFuZGJhbGwnOidcXHVkODNlXFx1ZGQzZSZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd29tYW5fcGxheWluZ193YXRlcl9wb2xvJzonXFx1ZDgzZVxcdWRkM2QmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3dvbWFuX3NjaWVudGlzdCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGQyYycsXG4gICd3b21hbl9zaHJ1Z2dpbmcnOidcXHVkODNlXFx1ZGQzNyZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd29tYW5fc2luZ2VyJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2NcXHVkZmE0JyxcbiAgJ3dvbWFuX3N0dWRlbnQnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzY1xcdWRmOTMnLFxuICAnd29tYW5fdGVhY2hlcic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNjXFx1ZGZlYicsXG4gICd3b21hbl90ZWNobm9sb2dpc3QnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjYmInLFxuICAnd29tYW5fd2l0aF90dXJiYW4nOidcXHVkODNkXFx1ZGM3MyZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd29tYW5zX2Nsb3RoZXMnOidcXHVkODNkXFx1ZGM1YScsXG4gICd3b21hbnNfaGF0JzonXFx1ZDgzZFxcdWRjNTInLFxuICAnd29tZW5fd3Jlc3RsaW5nJzonXFx1ZDgzZVxcdWRkM2MmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3dvbWVucyc6J1xcdWQ4M2RcXHVkZWJhJyxcbiAgJ3dvcmxkX21hcCc6J1xcdWQ4M2RcXHVkZGZhJyxcbiAgJ3dvcnJpZWQnOidcXHVkODNkXFx1ZGUxZicsXG4gICd3cmVuY2gnOidcXHVkODNkXFx1ZGQyNycsXG4gICd3cml0aW5nX2hhbmQnOidcXHUyNzBkXFx1ZmUwZicsXG4gICd4JzonXFx1Mjc0YycsXG4gICd5ZWxsb3dfaGVhcnQnOidcXHVkODNkXFx1ZGM5YicsXG4gICd5ZW4nOidcXHVkODNkXFx1ZGNiNCcsXG4gICd5aW5feWFuZyc6J1xcdTI2MmZcXHVmZTBmJyxcbiAgJ3l1bSc6J1xcdWQ4M2RcXHVkZTBiJyxcbiAgJ3phcCc6J1xcdTI2YTFcXHVmZTBmJyxcbiAgJ3ppcHBlcl9tb3V0aF9mYWNlJzonXFx1ZDgzZVxcdWRkMTAnLFxuICAnenp6JzonXFx1ZDgzZFxcdWRjYTQnLFxuXG4gIC8qIHNwZWNpYWwgZW1vamlzIDpQICovXG4gICdvY3RvY2F0JzogICc8aW1nIGFsdD1cIjpvY3RvY2F0OlwiIGhlaWdodD1cIjIwXCIgd2lkdGg9XCIyMFwiIGFsaWduPVwiYWJzbWlkZGxlXCIgc3JjPVwiaHR0cHM6Ly9hc3NldHMtY2RuLmdpdGh1Yi5jb20vaW1hZ2VzL2ljb25zL2Vtb2ppL29jdG9jYXQucG5nXCI+JyxcbiAgJ3Nob3dkb3duJzogJzxzcGFuIHN0eWxlPVwiZm9udC1mYW1pbHk6IFxcJ0Fub255bW91cyBQcm9cXCcsIG1vbm9zcGFjZTsgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IHRleHQtZGVjb3JhdGlvbi1zdHlsZTogZGFzaGVkOyB0ZXh0LWRlY29yYXRpb24tY29sb3I6ICMzZThiOGE7dGV4dC11bmRlcmxpbmUtcG9zaXRpb246IHVuZGVyO1wiPlM8L3NwYW4+J1xufTtcbiIsICIvKipcbiAqIENyZWF0ZWQgYnkgRXN0ZXZhbyBvbiAzMS0wNS0yMDE1LlxuICovXG5cbi8qKlxuICogU2hvd2Rvd24gQ29udmVydGVyIGNsYXNzXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7b2JqZWN0fSBbY29udmVydGVyT3B0aW9uc11cbiAqIEByZXR1cm5zIHtDb252ZXJ0ZXJ9XG4gKi9cbnNob3dkb3duLkNvbnZlcnRlciA9IGZ1bmN0aW9uIChjb252ZXJ0ZXJPcHRpb25zKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXJcbiAgICAgIC8qKlxuICAgICAgICogT3B0aW9ucyB1c2VkIGJ5IHRoaXMgY29udmVydGVyXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogQHR5cGUge3t9fVxuICAgICAgICovXG4gICAgICBvcHRpb25zID0ge30sXG5cbiAgICAgIC8qKlxuICAgICAgICogTGFuZ3VhZ2UgZXh0ZW5zaW9ucyB1c2VkIGJ5IHRoaXMgY29udmVydGVyXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICovXG4gICAgICBsYW5nRXh0ZW5zaW9ucyA9IFtdLFxuXG4gICAgICAvKipcbiAgICAgICAqIE91dHB1dCBtb2RpZmllcnMgZXh0ZW5zaW9ucyB1c2VkIGJ5IHRoaXMgY29udmVydGVyXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICovXG4gICAgICBvdXRwdXRNb2RpZmllcnMgPSBbXSxcblxuICAgICAgLyoqXG4gICAgICAgKiBFdmVudCBsaXN0ZW5lcnNcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKiBAdHlwZSB7e319XG4gICAgICAgKi9cbiAgICAgIGxpc3RlbmVycyA9IHt9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBmbGF2b3Igc2V0IGluIHRoaXMgY29udmVydGVyXG4gICAgICAgKi9cbiAgICAgIHNldENvbnZGbGF2b3IgPSBzZXRGbGF2b3IsXG5cbiAgICAgIC8qKlxuICAgICAgICogTWV0YWRhdGEgb2YgdGhlIGRvY3VtZW50XG4gICAgICAgKiBAdHlwZSB7e3BhcnNlZDoge30sIHJhdzogc3RyaW5nLCBmb3JtYXQ6IHN0cmluZ319XG4gICAgICAgKi9cbiAgICAgIG1ldGFkYXRhID0ge1xuICAgICAgICBwYXJzZWQ6IHt9LFxuICAgICAgICByYXc6ICcnLFxuICAgICAgICBmb3JtYXQ6ICcnXG4gICAgICB9O1xuXG4gIF9jb25zdHJ1Y3RvcigpO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0ZXIgY29uc3RydWN0b3JcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIF9jb25zdHJ1Y3RvciAoKSB7XG4gICAgY29udmVydGVyT3B0aW9ucyA9IGNvbnZlcnRlck9wdGlvbnMgfHwge307XG5cbiAgICBmb3IgKHZhciBnT3B0IGluIGdsb2JhbE9wdGlvbnMpIHtcbiAgICAgIGlmIChnbG9iYWxPcHRpb25zLmhhc093blByb3BlcnR5KGdPcHQpKSB7XG4gICAgICAgIG9wdGlvbnNbZ09wdF0gPSBnbG9iYWxPcHRpb25zW2dPcHRdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1lcmdlIG9wdGlvbnNcbiAgICBpZiAodHlwZW9mIGNvbnZlcnRlck9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3IgKHZhciBvcHQgaW4gY29udmVydGVyT3B0aW9ucykge1xuICAgICAgICBpZiAoY29udmVydGVyT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHQpKSB7XG4gICAgICAgICAgb3B0aW9uc1tvcHRdID0gY29udmVydGVyT3B0aW9uc1tvcHRdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKCdDb252ZXJ0ZXIgZXhwZWN0cyB0aGUgcGFzc2VkIHBhcmFtZXRlciB0byBiZSBhbiBvYmplY3QsIGJ1dCAnICsgdHlwZW9mIGNvbnZlcnRlck9wdGlvbnMgK1xuICAgICAgJyB3YXMgcGFzc2VkIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZXh0ZW5zaW9ucykge1xuICAgICAgc2hvd2Rvd24uaGVscGVyLmZvckVhY2gob3B0aW9ucy5leHRlbnNpb25zLCBfcGFyc2VFeHRlbnNpb24pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBleHRlbnNpb25cbiAgICogQHBhcmFtIHsqfSBleHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lPScnXVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gX3BhcnNlRXh0ZW5zaW9uIChleHQsIG5hbWUpIHtcblxuICAgIG5hbWUgPSBuYW1lIHx8IG51bGw7XG4gICAgLy8gSWYgaXQncyBhIHN0cmluZywgdGhlIGV4dGVuc2lvbiB3YXMgcHJldmlvdXNseSBsb2FkZWRcbiAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKGV4dCkpIHtcbiAgICAgIGV4dCA9IHNob3dkb3duLmhlbHBlci5zdGRFeHROYW1lKGV4dCk7XG4gICAgICBuYW1lID0gZXh0O1xuXG4gICAgICAvLyBMRUdBQ1lfU1VQUE9SVCBDT0RFXG4gICAgICBpZiAoc2hvd2Rvd24uZXh0ZW5zaW9uc1tleHRdKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignREVQUkVDQVRJT04gV0FSTklORzogJyArIGV4dCArICcgaXMgYW4gb2xkIGV4dGVuc2lvbiB0aGF0IHVzZXMgYSBkZXByZWNhdGVkIGxvYWRpbmcgbWV0aG9kLicgK1xuICAgICAgICAgICdQbGVhc2UgaW5mb3JtIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGUgZXh0ZW5zaW9uIHNob3VsZCBiZSB1cGRhdGVkIScpO1xuICAgICAgICBsZWdhY3lFeHRlbnNpb25Mb2FkaW5nKHNob3dkb3duLmV4dGVuc2lvbnNbZXh0XSwgZXh0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBFTkQgTEVHQUNZIFNVUFBPUlQgQ09ERVxuXG4gICAgICB9IGVsc2UgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0ZW5zaW9uc1tleHRdKSkge1xuICAgICAgICBleHQgPSBleHRlbnNpb25zW2V4dF07XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKCdFeHRlbnNpb24gXCInICsgZXh0ICsgJ1wiIGNvdWxkIG5vdCBiZSBsb2FkZWQuIEl0IHdhcyBlaXRoZXIgbm90IGZvdW5kIG9yIGlzIG5vdCBhIHZhbGlkIGV4dGVuc2lvbi4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZXh0ID0gZXh0KCk7XG4gICAgfVxuXG4gICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHQpKSB7XG4gICAgICBleHQgPSBbZXh0XTtcbiAgICB9XG5cbiAgICB2YXIgdmFsaWRFeHQgPSB2YWxpZGF0ZShleHQsIG5hbWUpO1xuICAgIGlmICghdmFsaWRFeHQudmFsaWQpIHtcbiAgICAgIHRocm93IEVycm9yKHZhbGlkRXh0LmVycm9yKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dC5sZW5ndGg7ICsraSkge1xuICAgICAgc3dpdGNoIChleHRbaV0udHlwZSkge1xuXG4gICAgICAgIGNhc2UgJ2xhbmcnOlxuICAgICAgICAgIGxhbmdFeHRlbnNpb25zLnB1c2goZXh0W2ldKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdvdXRwdXQnOlxuICAgICAgICAgIG91dHB1dE1vZGlmaWVycy5wdXNoKGV4dFtpXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoZXh0W2ldLmhhc093blByb3BlcnR5KCdsaXN0ZW5lcnMnKSkge1xuICAgICAgICBmb3IgKHZhciBsbiBpbiBleHRbaV0ubGlzdGVuZXJzKSB7XG4gICAgICAgICAgaWYgKGV4dFtpXS5saXN0ZW5lcnMuaGFzT3duUHJvcGVydHkobG4pKSB7XG4gICAgICAgICAgICBsaXN0ZW4obG4sIGV4dFtpXS5saXN0ZW5lcnNbbG5dKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBMRUdBQ1lfU1VQUE9SVFxuICAgKiBAcGFyYW0geyp9IGV4dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgZnVuY3Rpb24gbGVnYWN5RXh0ZW5zaW9uTG9hZGluZyAoZXh0LCBuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGV4dCA9IGV4dChuZXcgc2hvd2Rvd24uQ29udmVydGVyKCkpO1xuICAgIH1cbiAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc0FycmF5KGV4dCkpIHtcbiAgICAgIGV4dCA9IFtleHRdO1xuICAgIH1cbiAgICB2YXIgdmFsaWQgPSB2YWxpZGF0ZShleHQsIG5hbWUpO1xuXG4gICAgaWYgKCF2YWxpZC52YWxpZCkge1xuICAgICAgdGhyb3cgRXJyb3IodmFsaWQuZXJyb3IpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXh0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBzd2l0Y2ggKGV4dFtpXS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2xhbmcnOlxuICAgICAgICAgIGxhbmdFeHRlbnNpb25zLnB1c2goZXh0W2ldKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnb3V0cHV0JzpcbiAgICAgICAgICBvdXRwdXRNb2RpZmllcnMucHVzaChleHRbaV0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0Oi8vIHNob3VsZCBuZXZlciByZWFjaCBoZXJlXG4gICAgICAgICAgdGhyb3cgRXJyb3IoJ0V4dGVuc2lvbiBsb2FkZXIgZXJyb3I6IFR5cGUgdW5yZWNvZ25pemVkISEhJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byBhbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgZnVuY3Rpb24gbGlzdGVuIChuYW1lLCBjYWxsYmFjaykge1xuICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKG5hbWUpKSB7XG4gICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBhcmd1bWVudCBpbiBjb252ZXJ0ZXIubGlzdGVuKCkgbWV0aG9kOiBuYW1lIG11c3QgYmUgYSBzdHJpbmcsIGJ1dCAnICsgdHlwZW9mIG5hbWUgKyAnIGdpdmVuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgaW4gY29udmVydGVyLmxpc3RlbigpIG1ldGhvZDogY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uLCBidXQgJyArIHR5cGVvZiBjYWxsYmFjayArICcgZ2l2ZW4nKTtcbiAgICB9XG5cbiAgICBpZiAoIWxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgbGlzdGVuZXJzW25hbWVdID0gW107XG4gICAgfVxuICAgIGxpc3RlbmVyc1tuYW1lXS5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJUcmltSW5wdXRUZXh0ICh0ZXh0KSB7XG4gICAgdmFyIHJzcCA9IHRleHQubWF0Y2goL15cXHMqLylbMF0ubGVuZ3RoLFxuICAgICAgICByZ3ggPSBuZXcgUmVnRXhwKCdeXFxcXHN7MCwnICsgcnNwICsgJ30nLCAnZ20nKTtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHJneCwgJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGFuIGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldnROYW1lIEV2ZW50IG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGV4dFxuICAgKiBAcGFyYW0ge3t9fSBvcHRpb25zIENvbnZlcnRlciBPcHRpb25zXG4gICAqIEBwYXJhbSB7e319IGdsb2JhbHNcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRoaXMuX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2ggKGV2dE5hbWUsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgICBpZiAobGlzdGVuZXJzLmhhc093blByb3BlcnR5KGV2dE5hbWUpKSB7XG4gICAgICBmb3IgKHZhciBlaSA9IDA7IGVpIDwgbGlzdGVuZXJzW2V2dE5hbWVdLmxlbmd0aDsgKytlaSkge1xuICAgICAgICB2YXIgblRleHQgPSBsaXN0ZW5lcnNbZXZ0TmFtZV1bZWldKGV2dE5hbWUsIHRleHQsIHRoaXMsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgICBpZiAoblRleHQgJiYgdHlwZW9mIG5UZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRleHQgPSBuVGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGV4dDtcbiAgfTtcblxuICAvKipcbiAgICogTGlzdGVuIHRvIGFuIGV2ZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEByZXR1cm5zIHtzaG93ZG93bi5Db252ZXJ0ZXJ9XG4gICAqL1xuICB0aGlzLmxpc3RlbiA9IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaykge1xuICAgIGxpc3RlbihuYW1lLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgbWFya2Rvd24gc3RyaW5nIGludG8gSFRNTFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIHRoaXMubWFrZUh0bWwgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIC8vY2hlY2sgaWYgdGV4dCBpcyBub3QgZmFsc3lcbiAgICBpZiAoIXRleHQpIHtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cblxuICAgIHZhciBnbG9iYWxzID0ge1xuICAgICAgZ0h0bWxCbG9ja3M6ICAgICBbXSxcbiAgICAgIGdIdG1sTWRCbG9ja3M6ICAgW10sXG4gICAgICBnSHRtbFNwYW5zOiAgICAgIFtdLFxuICAgICAgZ1VybHM6ICAgICAgICAgICB7fSxcbiAgICAgIGdUaXRsZXM6ICAgICAgICAge30sXG4gICAgICBnRGltZW5zaW9uczogICAgIHt9LFxuICAgICAgZ0xpc3RMZXZlbDogICAgICAwLFxuICAgICAgaGFzaExpbmtDb3VudHM6ICB7fSxcbiAgICAgIGxhbmdFeHRlbnNpb25zOiAgbGFuZ0V4dGVuc2lvbnMsXG4gICAgICBvdXRwdXRNb2RpZmllcnM6IG91dHB1dE1vZGlmaWVycyxcbiAgICAgIGNvbnZlcnRlcjogICAgICAgdGhpcyxcbiAgICAgIGdoQ29kZUJsb2NrczogICAgW10sXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICBwYXJzZWQ6IHt9LFxuICAgICAgICByYXc6ICcnLFxuICAgICAgICBmb3JtYXQ6ICcnXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRoaXMgbGV0cyB1cyB1c2UgwqggdHJlbWEgYXMgYW4gZXNjYXBlIGNoYXIgdG8gYXZvaWQgbWQ1IGhhc2hlc1xuICAgIC8vIFRoZSBjaG9pY2Ugb2YgY2hhcmFjdGVyIGlzIGFyYml0cmFyeTsgYW55dGhpbmcgdGhhdCBpc24ndFxuICAgIC8vIG1hZ2ljIGluIE1hcmtkb3duIHdpbGwgd29yay5cbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqC9nLCAnwqhUJyk7XG5cbiAgICAvLyBSZXBsYWNlICQgd2l0aCDCqERcbiAgICAvLyBSZWdFeHAgaW50ZXJwcmV0cyAkIGFzIGEgc3BlY2lhbCBjaGFyYWN0ZXJcbiAgICAvLyB3aGVuIGl0J3MgaW4gYSByZXBsYWNlbWVudCBzdHJpbmdcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCQvZywgJ8KoRCcpO1xuXG4gICAgLy8gU3RhbmRhcmRpemUgbGluZSBlbmRpbmdzXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxyXFxuL2csICdcXG4nKTsgLy8gRE9TIHRvIFVuaXhcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHIvZywgJ1xcbicpOyAvLyBNYWMgdG8gVW5peFxuXG4gICAgLy8gU3RhcmRhcmRpemUgbGluZSBzcGFjZXNcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHUwMEEwL2csICcmbmJzcDsnKTtcblxuICAgIGlmIChvcHRpb25zLnNtYXJ0SW5kZW50YXRpb25GaXgpIHtcbiAgICAgIHRleHQgPSByVHJpbUlucHV0VGV4dCh0ZXh0KTtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgdGV4dCBiZWdpbnMgYW5kIGVuZHMgd2l0aCBhIGNvdXBsZSBvZiBuZXdsaW5lczpcbiAgICB0ZXh0ID0gJ1xcblxcbicgKyB0ZXh0ICsgJ1xcblxcbic7XG5cbiAgICAvLyBkZXRhYlxuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2RldGFiJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgICAvKipcbiAgICAgKiBTdHJpcCBhbnkgbGluZXMgY29uc2lzdGluZyBvbmx5IG9mIHNwYWNlcyBhbmQgdGFicy5cbiAgICAgKiBUaGlzIG1ha2VzIHN1YnNlcXVlbnQgcmVnZXhzIGVhc2llciB0byB3cml0ZSwgYmVjYXVzZSB3ZSBjYW5cbiAgICAgKiBtYXRjaCBjb25zZWN1dGl2ZSBibGFuayBsaW5lcyB3aXRoIC9cXG4rLyBpbnN0ZWFkIG9mIHNvbWV0aGluZ1xuICAgICAqIGNvbnRvcnRlZCBsaWtlIC9bIFxcdF0qXFxuKy9cbiAgICAgKi9cbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eWyBcXHRdKyQvbWcsICcnKTtcblxuICAgIC8vcnVuIGxhbmd1YWdlRXh0ZW5zaW9uc1xuICAgIHNob3dkb3duLmhlbHBlci5mb3JFYWNoKGxhbmdFeHRlbnNpb25zLCBmdW5jdGlvbiAoZXh0KSB7XG4gICAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdydW5FeHRlbnNpb24nKShleHQsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIH0pO1xuXG4gICAgLy8gcnVuIHRoZSBzdWIgcGFyc2Vyc1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ldGFkYXRhJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaFByZUNvZGVUYWdzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZ2l0aHViQ29kZUJsb2NrcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hIVE1MQmxvY2tzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaENvZGVUYWdzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignc3RyaXBMaW5rRGVmaW5pdGlvbnMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdibG9ja0dhbXV0JykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigndW5oYXNoSFRNTFNwYW5zJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigndW5lc2NhcGVTcGVjaWFsQ2hhcnMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAgIC8vIGF0dGFja2xhYjogUmVzdG9yZSBkb2xsYXIgc2lnbnNcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqEQvZywgJyQkJyk7XG5cbiAgICAvLyBhdHRhY2tsYWI6IFJlc3RvcmUgdHJlbWFzXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqhUL2csICfCqCcpO1xuXG4gICAgLy8gcmVuZGVyIGEgY29tcGxldGUgaHRtbCBkb2N1bWVudCBpbnN0ZWFkIG9mIGEgcGFydGlhbCBpZiB0aGUgb3B0aW9uIGlzIGVuYWJsZWRcbiAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdjb21wbGV0ZUhUTUxEb2N1bWVudCcpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gICAgLy8gUnVuIG91dHB1dCBtb2RpZmllcnNcbiAgICBzaG93ZG93bi5oZWxwZXIuZm9yRWFjaChvdXRwdXRNb2RpZmllcnMsIGZ1bmN0aW9uIChleHQpIHtcbiAgICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3J1bkV4dGVuc2lvbicpKGV4dCwgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgbWV0YWRhdGFcbiAgICBtZXRhZGF0YSA9IGdsb2JhbHMubWV0YWRhdGE7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEhUTUwgc3RyaW5nIGludG8gYSBtYXJrZG93biBzdHJpbmdcbiAgICogQHBhcmFtIHNyY1xuICAgKiBAcGFyYW0gW0hUTUxQYXJzZXJdIEEgV0hBVFdHIERPTSBhbmQgSFRNTCBwYXJzZXIsIHN1Y2ggYXMgSlNET00uIElmIG5vbmUgaXMgc3VwcGxpZWQsIHdpbmRvdy5kb2N1bWVudCB3aWxsIGJlIHVzZWQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLm1ha2VNYXJrZG93biA9IHRoaXMubWFrZU1kID0gZnVuY3Rpb24gKHNyYywgSFRNTFBhcnNlcikge1xuXG4gICAgLy8gcmVwbGFjZSBcXHJcXG4gd2l0aCBcXG5cbiAgICBzcmMgPSBzcmMucmVwbGFjZSgvXFxyXFxuL2csICdcXG4nKTtcbiAgICBzcmMgPSBzcmMucmVwbGFjZSgvXFxyL2csICdcXG4nKTsgLy8gb2xkIG1hY3NcblxuICAgIC8vIGR1ZSB0byBhbiBlZGdlIGNhc2UsIHdlIG5lZWQgdG8gZmluZCB0aGlzOiA+IDxcbiAgICAvLyB0byBwcmV2ZW50IHJlbW92aW5nIG9mIG5vbiBzaWxlbnQgd2hpdGUgc3BhY2VzXG4gICAgLy8gZXg6IDxlbT50aGlzIGlzPC9lbT4gPHN0cm9uZz5zcGFydGE8L3N0cm9uZz5cbiAgICBzcmMgPSBzcmMucmVwbGFjZSgvPlsgXFx0XSs8LywgJz7CqE5CU1A7PCcpO1xuXG4gICAgaWYgKCFIVE1MUGFyc2VyKSB7XG4gICAgICBpZiAod2luZG93ICYmIHdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgICBIVE1MUGFyc2VyID0gd2luZG93LmRvY3VtZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIVE1MUGFyc2VyIGlzIHVuZGVmaW5lZC4gSWYgaW4gYSB3ZWJ3b3JrZXIgb3Igbm9kZWpzIGVudmlyb25tZW50LCB5b3UgbmVlZCB0byBwcm92aWRlIGEgV0hBVFdHIERPTSBhbmQgSFRNTCBzdWNoIGFzIEpTRE9NJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRvYyA9IEhUTUxQYXJzZXIuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZG9jLmlubmVySFRNTCA9IHNyYztcblxuICAgIHZhciBnbG9iYWxzID0ge1xuICAgICAgcHJlTGlzdDogc3Vic3RpdHV0ZVByZUNvZGVUYWdzKGRvYylcbiAgICB9O1xuXG4gICAgLy8gcmVtb3ZlIGFsbCBuZXdsaW5lcyBhbmQgY29sbGFwc2Ugc3BhY2VzXG4gICAgY2xlYW4oZG9jKTtcblxuICAgIC8vIHNvbWUgc3R1ZmYsIGxpa2UgYWNjaWRlbnRhbCByZWZlcmVuY2UgbGlua3MgbXVzdCBub3cgYmUgZXNjYXBlZFxuICAgIC8vIFRPRE9cbiAgICAvLyBkb2MuaW5uZXJIVE1MID0gZG9jLmlubmVySFRNTC5yZXBsYWNlKC9cXFtbXFxTXFx0IF1dLyk7XG5cbiAgICB2YXIgbm9kZXMgPSBkb2MuY2hpbGROb2RlcyxcbiAgICAgICAgbWREb2MgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG1kRG9jICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShub2Rlc1tpXSwgZ2xvYmFscyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW4gKG5vZGUpIHtcbiAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgKytuKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGROb2Rlc1tuXTtcbiAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgaWYgKCEvXFxTLy50ZXN0KGNoaWxkLm5vZGVWYWx1ZSkgJiYgIS9eWyBdKyQvLnRlc3QoY2hpbGQubm9kZVZhbHVlKSkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICAtLW47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoaWxkLm5vZGVWYWx1ZSA9IGNoaWxkLm5vZGVWYWx1ZS5zcGxpdCgnXFxuJykuam9pbignICcpO1xuICAgICAgICAgICAgY2hpbGQubm9kZVZhbHVlID0gY2hpbGQubm9kZVZhbHVlLnJlcGxhY2UoLyhcXHMpKy9nLCAnJDEnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICBjbGVhbihjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaW5kIGFsbCBwcmUgdGFncyBhbmQgcmVwbGFjZSBjb250ZW50cyB3aXRoIHBsYWNlaG9sZGVyXG4gICAgLy8gd2UgbmVlZCB0aGlzIHNvIHRoYXQgd2UgY2FuIHJlbW92ZSBhbGwgaW5kZW50YXRpb24gZnJvbSBodG1sXG4gICAgLy8gdG8gZWFzZSB1cCBwYXJzaW5nXG4gICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVByZUNvZGVUYWdzIChkb2MpIHtcblxuICAgICAgdmFyIHByZXMgPSBkb2MucXVlcnlTZWxlY3RvckFsbCgncHJlJyksXG4gICAgICAgICAgcHJlc1BIID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlcy5sZW5ndGg7ICsraSkge1xuXG4gICAgICAgIGlmIChwcmVzW2ldLmNoaWxkRWxlbWVudENvdW50ID09PSAxICYmIHByZXNbaV0uZmlyc3RDaGlsZC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdjb2RlJykge1xuICAgICAgICAgIHZhciBjb250ZW50ID0gcHJlc1tpXS5maXJzdENoaWxkLmlubmVySFRNTC50cmltKCksXG4gICAgICAgICAgICAgIGxhbmd1YWdlID0gcHJlc1tpXS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgnZGF0YS1sYW5ndWFnZScpIHx8ICcnO1xuXG4gICAgICAgICAgLy8gaWYgZGF0YS1sYW5ndWFnZSBhdHRyaWJ1dGUgaXMgbm90IGRlZmluZWQsIHRoZW4gd2UgbG9vayBmb3IgY2xhc3MgbGFuZ3VhZ2UtKlxuICAgICAgICAgIGlmIChsYW5ndWFnZSA9PT0gJycpIHtcbiAgICAgICAgICAgIHZhciBjbGFzc2VzID0gcHJlc1tpXS5maXJzdENoaWxkLmNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBjbGFzc2VzLmxlbmd0aDsgKytjKSB7XG4gICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gY2xhc3Nlc1tjXS5tYXRjaCgvXmxhbmd1YWdlLSguKykkLyk7XG4gICAgICAgICAgICAgIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2UgPSBtYXRjaGVzWzFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdW5lc2NhcGUgaHRtbCBlbnRpdGllcyBpbiBjb250ZW50XG4gICAgICAgICAgY29udGVudCA9IHNob3dkb3duLmhlbHBlci51bmVzY2FwZUhUTUxFbnRpdGllcyhjb250ZW50KTtcblxuICAgICAgICAgIHByZXNQSC5wdXNoKGNvbnRlbnQpO1xuICAgICAgICAgIHByZXNbaV0ub3V0ZXJIVE1MID0gJzxwcmVjb2RlIGxhbmd1YWdlPVwiJyArIGxhbmd1YWdlICsgJ1wiIHByZWNvZGVudW09XCInICsgaS50b1N0cmluZygpICsgJ1wiPjwvcHJlY29kZT4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXNQSC5wdXNoKHByZXNbaV0uaW5uZXJIVE1MKTtcbiAgICAgICAgICBwcmVzW2ldLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgIHByZXNbaV0uc2V0QXR0cmlidXRlKCdwcmVudW0nLCBpLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJlc1BIO1xuICAgIH1cblxuICAgIHJldHVybiBtZERvYztcbiAgfTtcblxuICAvKipcbiAgICogU2V0IGFuIG9wdGlvbiBvZiB0aGlzIENvbnZlcnRlciBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHRoaXMuc2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBvcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IHRoZSBvcHRpb24gb2YgdGhpcyBDb252ZXJ0ZXIgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIHRoaXMuZ2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBvcHRpb25zW2tleV07XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgb3B0aW9ucyBvZiB0aGlzIENvbnZlcnRlciBpbnN0YW5jZVxuICAgKiBAcmV0dXJucyB7e319XG4gICAqL1xuICB0aGlzLmdldE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBleHRlbnNpb24gdG8gVEhJUyBjb252ZXJ0ZXJcbiAgICogQHBhcmFtIHt7fX0gZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT1udWxsXVxuICAgKi9cbiAgdGhpcy5hZGRFeHRlbnNpb24gPSBmdW5jdGlvbiAoZXh0ZW5zaW9uLCBuYW1lKSB7XG4gICAgbmFtZSA9IG5hbWUgfHwgbnVsbDtcbiAgICBfcGFyc2VFeHRlbnNpb24oZXh0ZW5zaW9uLCBuYW1lKTtcbiAgfTtcblxuICAvKipcbiAgICogVXNlIGEgZ2xvYmFsIHJlZ2lzdGVyZWQgZXh0ZW5zaW9uIHdpdGggVEhJUyBjb252ZXJ0ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV4dGVuc2lvbk5hbWUgTmFtZSBvZiB0aGUgcHJldmlvdXNseSByZWdpc3RlcmVkIGV4dGVuc2lvblxuICAgKi9cbiAgdGhpcy51c2VFeHRlbnNpb24gPSBmdW5jdGlvbiAoZXh0ZW5zaW9uTmFtZSkge1xuICAgIF9wYXJzZUV4dGVuc2lvbihleHRlbnNpb25OYW1lKTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0IHRoZSBmbGF2b3IgVEhJUyBjb252ZXJ0ZXIgc2hvdWxkIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgdGhpcy5zZXRGbGF2b3IgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmICghZmxhdm9yLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICB0aHJvdyBFcnJvcihuYW1lICsgJyBmbGF2b3Igd2FzIG5vdCBmb3VuZCcpO1xuICAgIH1cbiAgICB2YXIgcHJlc2V0ID0gZmxhdm9yW25hbWVdO1xuICAgIHNldENvbnZGbGF2b3IgPSBuYW1lO1xuICAgIGZvciAodmFyIG9wdGlvbiBpbiBwcmVzZXQpIHtcbiAgICAgIGlmIChwcmVzZXQuaGFzT3duUHJvcGVydHkob3B0aW9uKSkge1xuICAgICAgICBvcHRpb25zW29wdGlvbl0gPSBwcmVzZXRbb3B0aW9uXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudGx5IHNldCBmbGF2b3Igb2YgdGhpcyBjb252ZXJ0ZXJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRoaXMuZ2V0Rmxhdm9yID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzZXRDb252Rmxhdm9yO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gZXh0ZW5zaW9uIGZyb20gVEhJUyBjb252ZXJ0ZXIuXG4gICAqIE5vdGU6IFRoaXMgaXMgYSBjb3N0bHkgb3BlcmF0aW9uLiBJdCdzIGJldHRlciB0byBpbml0aWFsaXplIGEgbmV3IGNvbnZlcnRlclxuICAgKiBhbmQgc3BlY2lmeSB0aGUgZXh0ZW5zaW9ucyB5b3Ugd2lzaCB0byB1c2VcbiAgICogQHBhcmFtIHtBcnJheX0gZXh0ZW5zaW9uXG4gICAqL1xuICB0aGlzLnJlbW92ZUV4dGVuc2lvbiA9IGZ1bmN0aW9uIChleHRlbnNpb24pIHtcbiAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc0FycmF5KGV4dGVuc2lvbikpIHtcbiAgICAgIGV4dGVuc2lvbiA9IFtleHRlbnNpb25dO1xuICAgIH1cbiAgICBmb3IgKHZhciBhID0gMDsgYSA8IGV4dGVuc2lvbi5sZW5ndGg7ICsrYSkge1xuICAgICAgdmFyIGV4dCA9IGV4dGVuc2lvblthXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFuZ0V4dGVuc2lvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGxhbmdFeHRlbnNpb25zW2ldID09PSBleHQpIHtcbiAgICAgICAgICBsYW5nRXh0ZW5zaW9ucy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBvdXRwdXRNb2RpZmllcnMubGVuZ3RoOyArK2lpKSB7XG4gICAgICAgIGlmIChvdXRwdXRNb2RpZmllcnNbaWldID09PSBleHQpIHtcbiAgICAgICAgICBvdXRwdXRNb2RpZmllcnMuc3BsaWNlKGlpLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogR2V0IGFsbCBleHRlbnNpb24gb2YgVEhJUyBjb252ZXJ0ZXJcbiAgICogQHJldHVybnMge3tsYW5ndWFnZTogQXJyYXksIG91dHB1dDogQXJyYXl9fVxuICAgKi9cbiAgdGhpcy5nZXRBbGxFeHRlbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsYW5ndWFnZTogbGFuZ0V4dGVuc2lvbnMsXG4gICAgICBvdXRwdXQ6IG91dHB1dE1vZGlmaWVyc1xuICAgIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWV0YWRhdGEgb2YgdGhlIHByZXZpb3VzbHkgcGFyc2VkIGRvY3VtZW50XG4gICAqIEBwYXJhbSByYXdcbiAgICogQHJldHVybnMge3N0cmluZ3x7fX1cbiAgICovXG4gIHRoaXMuZ2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAocmF3KSB7XG4gICAgaWYgKHJhdykge1xuICAgICAgcmV0dXJuIG1ldGFkYXRhLnJhdztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1ldGFkYXRhLnBhcnNlZDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWV0YWRhdGEgZm9ybWF0IG9mIHRoZSBwcmV2aW91c2x5IHBhcnNlZCBkb2N1bWVudFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5nZXRNZXRhZGF0YUZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbWV0YWRhdGEuZm9ybWF0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBQcml2YXRlOiBzZXQgYSBzaW5nbGUga2V5LCB2YWx1ZSBtZXRhZGF0YSBwYWlyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqL1xuICB0aGlzLl9zZXRNZXRhZGF0YVBhaXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIG1ldGFkYXRhLnBhcnNlZFtrZXldID0gdmFsdWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFByaXZhdGU6IHNldCBtZXRhZGF0YSBmb3JtYXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdFxuICAgKi9cbiAgdGhpcy5fc2V0TWV0YWRhdGFGb3JtYXQgPSBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgbWV0YWRhdGEuZm9ybWF0ID0gZm9ybWF0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBQcml2YXRlOiBzZXQgbWV0YWRhdGEgcmF3IHRleHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJhd1xuICAgKi9cbiAgdGhpcy5fc2V0TWV0YWRhdGFSYXcgPSBmdW5jdGlvbiAocmF3KSB7XG4gICAgbWV0YWRhdGEucmF3ID0gcmF3O1xuICB9O1xufTtcbiIsICIvKipcbiAqIFR1cm4gTWFya2Rvd24gbGluayBzaG9ydGN1dHMgaW50byBYSFRNTCA8YT4gdGFncy5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdhbmNob3JzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2FuY2hvcnMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIHdyaXRlQW5jaG9yVGFnID0gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIGxpbmtUZXh0LCBsaW5rSWQsIHVybCwgbTUsIG02LCB0aXRsZSkge1xuICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQodGl0bGUpKSB7XG4gICAgICB0aXRsZSA9ICcnO1xuICAgIH1cbiAgICBsaW5rSWQgPSBsaW5rSWQudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgZXhwbGljaXQgZW1wdHkgdXJsXG4gICAgaWYgKHdob2xlTWF0Y2guc2VhcmNoKC9cXCg8P1xccyo+PyA/KFsnXCJdLipbJ1wiXSk/XFwpJC9tKSA+IC0xKSB7XG4gICAgICB1cmwgPSAnJztcbiAgICB9IGVsc2UgaWYgKCF1cmwpIHtcbiAgICAgIGlmICghbGlua0lkKSB7XG4gICAgICAgIC8vIGxvd2VyLWNhc2UgYW5kIHR1cm4gZW1iZWRkZWQgbmV3bGluZXMgaW50byBzcGFjZXNcbiAgICAgICAgbGlua0lkID0gbGlua1RleHQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gP1xcbi9nLCAnICcpO1xuICAgICAgfVxuICAgICAgdXJsID0gJyMnICsgbGlua0lkO1xuXG4gICAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChnbG9iYWxzLmdVcmxzW2xpbmtJZF0pKSB7XG4gICAgICAgIHVybCA9IGdsb2JhbHMuZ1VybHNbbGlua0lkXTtcbiAgICAgICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZ2xvYmFscy5nVGl0bGVzW2xpbmtJZF0pKSB7XG4gICAgICAgICAgdGl0bGUgPSBnbG9iYWxzLmdUaXRsZXNbbGlua0lkXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHdob2xlTWF0Y2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy91cmwgPSBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyh1cmwsICcqXycsIGZhbHNlKTsgLy8gcmVwbGFjZWQgbGluZSB0byBpbXByb3ZlIHBlcmZvcm1hbmNlXG4gICAgdXJsID0gdXJsLnJlcGxhY2Uoc2hvd2Rvd24uaGVscGVyLnJlZ2V4ZXMuYXN0ZXJpc2tEYXNoQW5kQ29sb24sIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuXG4gICAgdmFyIHJlc3VsdCA9ICc8YSBocmVmPVwiJyArIHVybCArICdcIic7XG5cbiAgICBpZiAodGl0bGUgIT09ICcnICYmIHRpdGxlICE9PSBudWxsKSB7XG4gICAgICB0aXRsZSA9IHRpdGxlLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbiAgICAgIC8vdGl0bGUgPSBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyh0aXRsZSwgJypfJywgZmFsc2UpOyAvLyByZXBsYWNlZCBsaW5lIHRvIGltcHJvdmUgcGVyZm9ybWFuY2VcbiAgICAgIHRpdGxlID0gdGl0bGUucmVwbGFjZShzaG93ZG93bi5oZWxwZXIucmVnZXhlcy5hc3Rlcmlza0Rhc2hBbmRDb2xvbiwgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gICAgICByZXN1bHQgKz0gJyB0aXRsZT1cIicgKyB0aXRsZSArICdcIic7XG4gICAgfVxuXG4gICAgLy8gb3B0aW9uTGlua3NJbk5ld1dpbmRvdyBvbmx5IGFwcGxpZXNcbiAgICAvLyB0byBleHRlcm5hbCBsaW5rcy4gSGFzaCBsaW5rcyAoIykgb3BlbiBpbiBzYW1lIHBhZ2VcbiAgICBpZiAob3B0aW9ucy5vcGVuTGlua3NJbk5ld1dpbmRvdyAmJiAhL14jLy50ZXN0KHVybCkpIHtcbiAgICAgIC8vIGVzY2FwZWQgX1xuICAgICAgcmVzdWx0ICs9ICcgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIsKoRTk1RWJsYW5rXCInO1xuICAgIH1cblxuICAgIHJlc3VsdCArPSAnPicgKyBsaW5rVGV4dCArICc8L2E+JztcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gRmlyc3QsIGhhbmRsZSByZWZlcmVuY2Utc3R5bGUgbGlua3M6IFtsaW5rIHRleHRdIFtpZF1cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxbKCg/OlxcW1teXFxdXSpdfFteXFxbXFxdXSkqKV0gPyg/OlxcbiAqKT9cXFsoLio/KV0oKSgpKCkoKS9nLCB3cml0ZUFuY2hvclRhZyk7XG5cbiAgLy8gTmV4dCwgaW5saW5lLXN0eWxlIGxpbmtzOiBbbGluayB0ZXh0XSh1cmwgXCJvcHRpb25hbCB0aXRsZVwiKVxuICAvLyBjYXNlcyB3aXRoIGNyYXp5IHVybHMgbGlrZSAuL2ltYWdlL2NhdDEpLnBuZ1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFsoKD86XFxbW15cXF1dKl18W15cXFtcXF1dKSopXSgpWyBcXHRdKlxcKFsgXFx0XT88KFtePl0qKT4oPzpbIFxcdF0qKChbXCInXSkoW15cIl0qPylcXDUpKT9bIFxcdF0/XFwpL2csXG4gICAgd3JpdGVBbmNob3JUYWcpO1xuXG4gIC8vIG5vcm1hbCBjYXNlc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFsoKD86XFxbW15cXF1dKl18W15cXFtcXF1dKSopXSgpWyBcXHRdKlxcKFsgXFx0XT88PyhbXFxTXSs/KD86XFwoW1xcU10qP1xcKVtcXFNdKj8pPyk+Pyg/OlsgXFx0XSooKFtcIiddKShbXlwiXSo/KVxcNSkpP1sgXFx0XT9cXCkvZyxcbiAgICB3cml0ZUFuY2hvclRhZyk7XG5cbiAgLy8gaGFuZGxlIHJlZmVyZW5jZS1zdHlsZSBzaG9ydGN1dHM6IFtsaW5rIHRleHRdXG4gIC8vIFRoZXNlIG11c3QgY29tZSBsYXN0IGluIGNhc2UgeW91J3ZlIGFsc28gZ290IFtsaW5rIHRlc3RdWzFdXG4gIC8vIG9yIFtsaW5rIHRlc3RdKC9mb28pXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcWyhbXlxcW1xcXV0rKV0oKSgpKCkoKSgpL2csIHdyaXRlQW5jaG9yVGFnKTtcblxuICAvLyBMYXN0bHkgaGFuZGxlIEdpdGh1Yk1lbnRpb25zIGlmIG9wdGlvbiBpcyBlbmFibGVkXG4gIGlmIChvcHRpb25zLmdoTWVudGlvbnMpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXnxcXHMpKFxcXFwpPyhAKFthLXpcXGRdKyg/OlthLXpcXGQuLV0rP1thLXpcXGRdKykqKSkvZ21pLCBmdW5jdGlvbiAod20sIHN0LCBlc2NhcGUsIG1lbnRpb25zLCB1c2VybmFtZSkge1xuICAgICAgaWYgKGVzY2FwZSA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIHJldHVybiBzdCArIG1lbnRpb25zO1xuICAgICAgfVxuXG4gICAgICAvL2NoZWNrIGlmIG9wdGlvbnMuZ2hNZW50aW9uc0xpbmsgaXMgYSBzdHJpbmdcbiAgICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKG9wdGlvbnMuZ2hNZW50aW9uc0xpbmspKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZ2hNZW50aW9uc0xpbmsgb3B0aW9uIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICAgIH1cbiAgICAgIHZhciBsbmsgPSBvcHRpb25zLmdoTWVudGlvbnNMaW5rLnJlcGxhY2UoL1xce3V9L2csIHVzZXJuYW1lKSxcbiAgICAgICAgICB0YXJnZXQgPSAnJztcbiAgICAgIGlmIChvcHRpb25zLm9wZW5MaW5rc0luTmV3V2luZG93KSB7XG4gICAgICAgIHRhcmdldCA9ICcgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIsKoRTk1RWJsYW5rXCInO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0ICsgJzxhIGhyZWY9XCInICsgbG5rICsgJ1wiJyArIHRhcmdldCArICc+JyArIG1lbnRpb25zICsgJzwvYT4nO1xuICAgIH0pO1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYW5jaG9ycy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8vIHVybCBhbGxvd2VkIGNoYXJzIFthLXpcXGRfLn46Lz8jW11AISQmJygpKissOz0tXVxuXG52YXIgc2ltcGxlVVJMUmVnZXggID0gLyhbKn5fXSt8XFxiKSgoKGh0dHBzP3xmdHB8ZGljdCk6XFwvXFwvfHd3d1xcLilbXidcIj5cXHNdKz9cXC5bXidcIj5cXHNdKz8pKCkoXFwxKT8oPz1cXHN8JCkoPyFbXCI8Pl0pL2dpLFxuICAgIHNpbXBsZVVSTFJlZ2V4MiA9IC8oWyp+X10rfFxcYikoKChodHRwcz98ZnRwfGRpY3QpOlxcL1xcL3x3d3dcXC4pW14nXCI+XFxzXStcXC5bXidcIj5cXHNdKz8pKFsuIT8sKClcXFtcXF1dKT8oXFwxKT8oPz1cXHN8JCkoPyFbXCI8Pl0pL2dpLFxuICAgIGRlbGltVXJsUmVnZXggICA9IC8oKTwoKChodHRwcz98ZnRwfGRpY3QpOlxcL1xcL3x3d3dcXC4pW14nXCI+XFxzXSspKCk+KCkvZ2ksXG4gICAgc2ltcGxlTWFpbFJlZ2V4ID0gLyhefFxccykoPzptYWlsdG86KT8oW0EtWmEtejAtOSEjJCUmJyorLS89P15fYHt8fX4uXStAWy1hLXowLTldKyhcXC5bLWEtejAtOV0rKSpcXC5bYS16XSspKD89JHxcXHMpL2dtaSxcbiAgICBkZWxpbU1haWxSZWdleCAgPSAvPCgpKD86bWFpbHRvOik/KFstLlxcd10rQFstYS16MC05XSsoXFwuWy1hLXowLTldKykqXFwuW2Etel0rKT4vZ2ksXG5cbiAgICByZXBsYWNlTGluayA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHdtLCBsZWFkaW5nTWFnaWNDaGFycywgbGluaywgbTIsIG0zLCB0cmFpbGluZ1B1bmN0dWF0aW9uLCB0cmFpbGluZ01hZ2ljQ2hhcnMpIHtcbiAgICAgICAgbGluayA9IGxpbmsucmVwbGFjZShzaG93ZG93bi5oZWxwZXIucmVnZXhlcy5hc3Rlcmlza0Rhc2hBbmRDb2xvbiwgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gICAgICAgIHZhciBsbmtUeHQgPSBsaW5rLFxuICAgICAgICAgICAgYXBwZW5kID0gJycsXG4gICAgICAgICAgICB0YXJnZXQgPSAnJyxcbiAgICAgICAgICAgIGxtYyAgICA9IGxlYWRpbmdNYWdpY0NoYXJzIHx8ICcnLFxuICAgICAgICAgICAgdG1jICAgID0gdHJhaWxpbmdNYWdpY0NoYXJzIHx8ICcnO1xuICAgICAgICBpZiAoL153d3dcXC4vaS50ZXN0KGxpbmspKSB7XG4gICAgICAgICAgbGluayA9IGxpbmsucmVwbGFjZSgvXnd3d1xcLi9pLCAnaHR0cDovL3d3dy4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5leGNsdWRlVHJhaWxpbmdQdW5jdHVhdGlvbkZyb21VUkxzICYmIHRyYWlsaW5nUHVuY3R1YXRpb24pIHtcbiAgICAgICAgICBhcHBlbmQgPSB0cmFpbGluZ1B1bmN0dWF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm9wZW5MaW5rc0luTmV3V2luZG93KSB7XG4gICAgICAgICAgdGFyZ2V0ID0gJyByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCIgdGFyZ2V0PVwiwqhFOTVFYmxhbmtcIic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxtYyArICc8YSBocmVmPVwiJyArIGxpbmsgKyAnXCInICsgdGFyZ2V0ICsgJz4nICsgbG5rVHh0ICsgJzwvYT4nICsgYXBwZW5kICsgdG1jO1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgcmVwbGFjZU1haWwgPSBmdW5jdGlvbiAob3B0aW9ucywgZ2xvYmFscykge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBiLCBtYWlsKSB7XG4gICAgICAgIHZhciBocmVmID0gJ21haWx0bzonO1xuICAgICAgICBiID0gYiB8fCAnJztcbiAgICAgICAgbWFpbCA9IHNob3dkb3duLnN1YlBhcnNlcigndW5lc2NhcGVTcGVjaWFsQ2hhcnMnKShtYWlsLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZW5jb2RlRW1haWxzKSB7XG4gICAgICAgICAgaHJlZiA9IHNob3dkb3duLmhlbHBlci5lbmNvZGVFbWFpbEFkZHJlc3MoaHJlZiArIG1haWwpO1xuICAgICAgICAgIG1haWwgPSBzaG93ZG93bi5oZWxwZXIuZW5jb2RlRW1haWxBZGRyZXNzKG1haWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhyZWYgPSBocmVmICsgbWFpbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYiArICc8YSBocmVmPVwiJyArIGhyZWYgKyAnXCI+JyArIG1haWwgKyAnPC9hPic7XG4gICAgICB9O1xuICAgIH07XG5cbnNob3dkb3duLnN1YlBhcnNlcignYXV0b0xpbmtzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2F1dG9MaW5rcy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGRlbGltVXJsUmVnZXgsIHJlcGxhY2VMaW5rKG9wdGlvbnMpKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZShkZWxpbU1haWxSZWdleCwgcmVwbGFjZU1haWwob3B0aW9ucywgZ2xvYmFscykpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2F1dG9MaW5rcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHJldHVybiB0ZXh0O1xufSk7XG5cbnNob3dkb3duLnN1YlBhcnNlcignc2ltcGxpZmllZEF1dG9MaW5rcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIW9wdGlvbnMuc2ltcGxpZmllZEF1dG9MaW5rKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdzaW1wbGlmaWVkQXV0b0xpbmtzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIGlmIChvcHRpb25zLmV4Y2x1ZGVUcmFpbGluZ1B1bmN0dWF0aW9uRnJvbVVSTHMpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHNpbXBsZVVSTFJlZ2V4MiwgcmVwbGFjZUxpbmsob3B0aW9ucykpO1xuICB9IGVsc2Uge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uoc2ltcGxlVVJMUmVnZXgsIHJlcGxhY2VMaW5rKG9wdGlvbnMpKTtcbiAgfVxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHNpbXBsZU1haWxSZWdleCwgcmVwbGFjZU1haWwob3B0aW9ucywgZ2xvYmFscykpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3NpbXBsaWZpZWRBdXRvTGlua3MuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8qKlxuICogVGhlc2UgYXJlIGFsbCB0aGUgdHJhbnNmb3JtYXRpb25zIHRoYXQgZm9ybSBibG9jay1sZXZlbFxuICogdGFncyBsaWtlIHBhcmFncmFwaHMsIGhlYWRlcnMsIGFuZCBsaXN0IGl0ZW1zLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2Jsb2NrR2FtdXQnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYmxvY2tHYW11dC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyB3ZSBwYXJzZSBibG9ja3F1b3RlcyBmaXJzdCBzbyB0aGF0IHdlIGNhbiBoYXZlIGhlYWRpbmdzIGFuZCBocnNcbiAgLy8gaW5zaWRlIGJsb2NrcXVvdGVzXG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2Jsb2NrUXVvdGVzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hlYWRlcnMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBEbyBIb3Jpem9udGFsIFJ1bGVzOlxuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdob3Jpem9udGFsUnVsZScpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2xpc3RzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2NvZGVCbG9ja3MnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigndGFibGVzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gV2UgYWxyZWFkeSByYW4gX0hhc2hIVE1MQmxvY2tzKCkgYmVmb3JlLCBpbiBNYXJrZG93bigpLCBidXQgdGhhdFxuICAvLyB3YXMgdG8gZXNjYXBlIHJhdyBIVE1MIGluIHRoZSBvcmlnaW5hbCBNYXJrZG93biBzb3VyY2UuIFRoaXMgdGltZSxcbiAgLy8gd2UncmUgZXNjYXBpbmcgdGhlIG1hcmt1cCB3ZSd2ZSBqdXN0IGNyZWF0ZWQsIHNvIHRoYXQgd2UgZG9uJ3Qgd3JhcFxuICAvLyA8cD4gdGFncyBhcm91bmQgYmxvY2stbGV2ZWwgdGFncy5cbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaEhUTUxCbG9ja3MnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigncGFyYWdyYXBocycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2Jsb2NrR2FtdXQuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignYmxvY2tRdW90ZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYmxvY2tRdW90ZXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gYWRkIGEgY291cGxlIGV4dHJhIGxpbmVzIGFmdGVyIHRoZSB0ZXh0IGFuZCBlbmR0ZXh0IG1hcmtcbiAgdGV4dCA9IHRleHQgKyAnXFxuXFxuJztcblxuICB2YXIgcmd4ID0gLyheIHswLDN9PlsgXFx0XT8uK1xcbiguK1xcbikqXFxuKikrL2dtO1xuXG4gIGlmIChvcHRpb25zLnNwbGl0QWRqYWNlbnRCbG9ja3F1b3Rlcykge1xuICAgIHJneCA9IC9eIHswLDN9PltcXHNcXFNdKj8oPzpcXG5cXG4pL2dtO1xuICB9XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShyZ3gsIGZ1bmN0aW9uIChicSkge1xuICAgIC8vIGF0dGFja2xhYjogaGFjayBhcm91bmQgS29ucXVlcm9yIDMuNS40IGJ1ZzpcbiAgICAvLyBcIi0tLS0tLS0tLS1idWdcIi5yZXBsYWNlKC9eLS9nLFwiXCIpID09IFwiYnVnXCJcbiAgICBicSA9IGJxLnJlcGxhY2UoL15bIFxcdF0qPlsgXFx0XT8vZ20sICcnKTsgLy8gdHJpbSBvbmUgbGV2ZWwgb2YgcXVvdGluZ1xuXG4gICAgLy8gYXR0YWNrbGFiOiBjbGVhbiB1cCBoYWNrXG4gICAgYnEgPSBicS5yZXBsYWNlKC/CqDAvZywgJycpO1xuXG4gICAgYnEgPSBicS5yZXBsYWNlKC9eWyBcXHRdKyQvZ20sICcnKTsgLy8gdHJpbSB3aGl0ZXNwYWNlLW9ubHkgbGluZXNcbiAgICBicSA9IHNob3dkb3duLnN1YlBhcnNlcignZ2l0aHViQ29kZUJsb2NrcycpKGJxLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICBicSA9IHNob3dkb3duLnN1YlBhcnNlcignYmxvY2tHYW11dCcpKGJxLCBvcHRpb25zLCBnbG9iYWxzKTsgLy8gcmVjdXJzZVxuXG4gICAgYnEgPSBicS5yZXBsYWNlKC8oXnxcXG4pL2csICckMSAgJyk7XG4gICAgLy8gVGhlc2UgbGVhZGluZyBzcGFjZXMgc2NyZXcgd2l0aCA8cHJlPiBjb250ZW50LCBzbyB3ZSBuZWVkIHRvIGZpeCB0aGF0OlxuICAgIGJxID0gYnEucmVwbGFjZSgvKFxccyo8cHJlPlteXFxyXSs/PFxcL3ByZT4pL2dtLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEpIHtcbiAgICAgIHZhciBwcmUgPSBtMTtcbiAgICAgIC8vIGF0dGFja2xhYjogaGFjayBhcm91bmQgS29ucXVlcm9yIDMuNS40IGJ1ZzpcbiAgICAgIHByZSA9IHByZS5yZXBsYWNlKC9eICAvbWcsICfCqDAnKTtcbiAgICAgIHByZSA9IHByZS5yZXBsYWNlKC/CqDAvZywgJycpO1xuICAgICAgcmV0dXJuIHByZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKCc8YmxvY2txdW90ZT5cXG4nICsgYnEgKyAnXFxuPC9ibG9ja3F1b3RlPicsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB9KTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdibG9ja1F1b3Rlcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8qKlxuICogUHJvY2VzcyBNYXJrZG93biBgPHByZT48Y29kZT5gIGJsb2Nrcy5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdjb2RlQmxvY2tzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2NvZGVCbG9ja3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gc2VudGluZWwgd29ya2Fyb3VuZHMgZm9yIGxhY2sgb2YgXFxBIGFuZCBcXFosIHNhZmFyaVxca2h0bWwgYnVnXG4gIHRleHQgKz0gJ8KoMCc7XG5cbiAgdmFyIHBhdHRlcm4gPSAvKD86XFxuXFxufF4pKCg/Oig/OlsgXXs0fXxcXHQpLipcXG4rKSspKFxcbipbIF17MCwzfVteIFxcdFxcbl18KD89wqgwKSkvZztcbiAgdGV4dCA9IHRleHQucmVwbGFjZShwYXR0ZXJuLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIG0yKSB7XG4gICAgdmFyIGNvZGVibG9jayA9IG0xLFxuICAgICAgICBuZXh0Q2hhciA9IG0yLFxuICAgICAgICBlbmQgPSAnXFxuJztcblxuICAgIGNvZGVibG9jayA9IHNob3dkb3duLnN1YlBhcnNlcignb3V0ZGVudCcpKGNvZGVibG9jaywgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgY29kZWJsb2NrID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2RldGFiJykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICBjb2RlYmxvY2sgPSBjb2RlYmxvY2sucmVwbGFjZSgvXlxcbisvZywgJycpOyAvLyB0cmltIGxlYWRpbmcgbmV3bGluZXNcbiAgICBjb2RlYmxvY2sgPSBjb2RlYmxvY2sucmVwbGFjZSgvXFxuKyQvZywgJycpOyAvLyB0cmltIHRyYWlsaW5nIG5ld2xpbmVzXG5cbiAgICBpZiAob3B0aW9ucy5vbWl0RXh0cmFXTEluQ29kZUJsb2Nrcykge1xuICAgICAgZW5kID0gJyc7XG4gICAgfVxuXG4gICAgY29kZWJsb2NrID0gJzxwcmU+PGNvZGU+JyArIGNvZGVibG9jayArIGVuZCArICc8L2NvZGU+PC9wcmU+JztcblxuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKGNvZGVibG9jaywgb3B0aW9ucywgZ2xvYmFscykgKyBuZXh0Q2hhcjtcbiAgfSk7XG5cbiAgLy8gc3RyaXAgc2VudGluZWxcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqgwLywgJycpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2NvZGVCbG9ja3MuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqXG4gKiAgICogIEJhY2t0aWNrIHF1b3RlcyBhcmUgdXNlZCBmb3IgPGNvZGU+PC9jb2RlPiBzcGFucy5cbiAqXG4gKiAgICogIFlvdSBjYW4gdXNlIG11bHRpcGxlIGJhY2t0aWNrcyBhcyB0aGUgZGVsaW1pdGVycyBpZiB5b3Ugd2FudCB0b1xuICogICAgIGluY2x1ZGUgbGl0ZXJhbCBiYWNrdGlja3MgaW4gdGhlIGNvZGUgc3Bhbi4gU28sIHRoaXMgaW5wdXQ6XG4gKlxuICogICAgICAgICBKdXN0IHR5cGUgYGBmb28gYGJhcmAgYmF6YGAgYXQgdGhlIHByb21wdC5cbiAqXG4gKiAgICAgICBXaWxsIHRyYW5zbGF0ZSB0bzpcbiAqXG4gKiAgICAgICAgIDxwPkp1c3QgdHlwZSA8Y29kZT5mb28gYGJhcmAgYmF6PC9jb2RlPiBhdCB0aGUgcHJvbXB0LjwvcD5cbiAqXG4gKiAgICBUaGVyZSdzIG5vIGFyYml0cmFyeSBsaW1pdCB0byB0aGUgbnVtYmVyIG9mIGJhY2t0aWNrcyB5b3VcbiAqICAgIGNhbiB1c2UgYXMgZGVsaW10ZXJzLiBJZiB5b3UgbmVlZCB0aHJlZSBjb25zZWN1dGl2ZSBiYWNrdGlja3NcbiAqICAgIGluIHlvdXIgY29kZSwgdXNlIGZvdXIgZm9yIGRlbGltaXRlcnMsIGV0Yy5cbiAqXG4gKiAgKiAgWW91IGNhbiB1c2Ugc3BhY2VzIHRvIGdldCBsaXRlcmFsIGJhY2t0aWNrcyBhdCB0aGUgZWRnZXM6XG4gKlxuICogICAgICAgICAuLi4gdHlwZSBgYCBgYmFyYCBgYCAuLi5cbiAqXG4gKiAgICAgICBUdXJucyB0bzpcbiAqXG4gKiAgICAgICAgIC4uLiB0eXBlIDxjb2RlPmBiYXJgPC9jb2RlPiAuLi5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdjb2RlU3BhbnMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnY29kZVNwYW5zLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIGlmICh0eXBlb2YgKHRleHQpID09PSAndW5kZWZpbmVkJykge1xuICAgIHRleHQgPSAnJztcbiAgfVxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXnxbXlxcXFxdKShgKykoW15cXHJdKj9bXmBdKVxcMig/IWApL2dtLFxuICAgIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSwgbTIsIG0zKSB7XG4gICAgICB2YXIgYyA9IG0zO1xuICAgICAgYyA9IGMucmVwbGFjZSgvXihbIFxcdF0qKS9nLCAnJyk7XHQvLyBsZWFkaW5nIHdoaXRlc3BhY2VcbiAgICAgIGMgPSBjLnJlcGxhY2UoL1sgXFx0XSokL2csICcnKTtcdC8vIHRyYWlsaW5nIHdoaXRlc3BhY2VcbiAgICAgIGMgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnKShjLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgIGMgPSBtMSArICc8Y29kZT4nICsgYyArICc8L2NvZGU+JztcbiAgICAgIGMgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hIVE1MU3BhbnMnKShjLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdjb2RlU3BhbnMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIENyZWF0ZSBhIGZ1bGwgSFRNTCBkb2N1bWVudCBmcm9tIHRoZSBwcm9jZXNzZWQgbWFya2Rvd25cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdjb21wbGV0ZUhUTUxEb2N1bWVudCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIW9wdGlvbnMuY29tcGxldGVIVE1MRG9jdW1lbnQpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2NvbXBsZXRlSFRNTERvY3VtZW50LmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHZhciBkb2N0eXBlID0gJ2h0bWwnLFxuICAgICAgZG9jdHlwZVBhcnNlZCA9ICc8IURPQ1RZUEUgSFRNTD5cXG4nLFxuICAgICAgdGl0bGUgPSAnJyxcbiAgICAgIGNoYXJzZXQgPSAnPG1ldGEgY2hhcnNldD1cInV0Zi04XCI+XFxuJyxcbiAgICAgIGxhbmcgPSAnJyxcbiAgICAgIG1ldGFkYXRhID0gJyc7XG5cbiAgaWYgKHR5cGVvZiBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZC5kb2N0eXBlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRvY3R5cGVQYXJzZWQgPSAnPCFET0NUWVBFICcgKyAgZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWQuZG9jdHlwZSArICc+XFxuJztcbiAgICBkb2N0eXBlID0gZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWQuZG9jdHlwZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGRvY3R5cGUgPT09ICdodG1sJyB8fCBkb2N0eXBlID09PSAnaHRtbDUnKSB7XG4gICAgICBjaGFyc2V0ID0gJzxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiPic7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgbWV0YSBpbiBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZCkge1xuICAgIGlmIChnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZC5oYXNPd25Qcm9wZXJ0eShtZXRhKSkge1xuICAgICAgc3dpdGNoIChtZXRhLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgY2FzZSAnZG9jdHlwZSc6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAndGl0bGUnOlxuICAgICAgICAgIHRpdGxlID0gJzx0aXRsZT4nICsgIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkLnRpdGxlICsgJzwvdGl0bGU+XFxuJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjaGFyc2V0JzpcbiAgICAgICAgICBpZiAoZG9jdHlwZSA9PT0gJ2h0bWwnIHx8IGRvY3R5cGUgPT09ICdodG1sNScpIHtcbiAgICAgICAgICAgIGNoYXJzZXQgPSAnPG1ldGEgY2hhcnNldD1cIicgKyBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZC5jaGFyc2V0ICsgJ1wiPlxcbic7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYXJzZXQgPSAnPG1ldGEgbmFtZT1cImNoYXJzZXRcIiBjb250ZW50PVwiJyArIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkLmNoYXJzZXQgKyAnXCI+XFxuJztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbGFuZ3VhZ2UnOlxuICAgICAgICBjYXNlICdsYW5nJzpcbiAgICAgICAgICBsYW5nID0gJyBsYW5nPVwiJyArIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkW21ldGFdICsgJ1wiJztcbiAgICAgICAgICBtZXRhZGF0YSArPSAnPG1ldGEgbmFtZT1cIicgKyBtZXRhICsgJ1wiIGNvbnRlbnQ9XCInICsgZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWRbbWV0YV0gKyAnXCI+XFxuJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIG1ldGFkYXRhICs9ICc8bWV0YSBuYW1lPVwiJyArIG1ldGEgKyAnXCIgY29udGVudD1cIicgKyBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZFttZXRhXSArICdcIj5cXG4nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRleHQgPSBkb2N0eXBlUGFyc2VkICsgJzxodG1sJyArIGxhbmcgKyAnPlxcbjxoZWFkPlxcbicgKyB0aXRsZSArIGNoYXJzZXQgKyBtZXRhZGF0YSArICc8L2hlYWQ+XFxuPGJvZHk+XFxuJyArIHRleHQudHJpbSgpICsgJ1xcbjwvYm9keT5cXG48L2h0bWw+JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdjb21wbGV0ZUhUTUxEb2N1bWVudC5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8qKlxuICogQ29udmVydCBhbGwgdGFicyB0byBzcGFjZXNcbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdkZXRhYicsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZGV0YWIuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gZXhwYW5kIGZpcnN0IG4tMSB0YWJzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcdCg/PVxcdCkvZywgJyAgICAnKTsgLy8gZ190YWJfd2lkdGhcblxuICAvLyByZXBsYWNlIHRoZSBudGggd2l0aCB0d28gc2VudGluZWxzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcdC9nLCAnwqhBwqhCJyk7XG5cbiAgLy8gdXNlIHRoZSBzZW50aW5lbCB0byBhbmNob3Igb3VyIHJlZ2V4IHNvIGl0IGRvZXNuJ3QgZXhwbG9kZVxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqEIoLis/KcKoQS9nLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEpIHtcbiAgICB2YXIgbGVhZGluZ1RleHQgPSBtMSxcbiAgICAgICAgbnVtU3BhY2VzID0gNCAtIGxlYWRpbmdUZXh0Lmxlbmd0aCAlIDQ7ICAvLyBnX3RhYl93aWR0aFxuXG4gICAgLy8gdGhlcmUgKm11c3QqIGJlIGEgYmV0dGVyIHdheSB0byBkbyB0aGlzOlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtU3BhY2VzOyBpKyspIHtcbiAgICAgIGxlYWRpbmdUZXh0ICs9ICcgJztcbiAgICB9XG5cbiAgICByZXR1cm4gbGVhZGluZ1RleHQ7XG4gIH0pO1xuXG4gIC8vIGNsZWFuIHVwIHNlbnRpbmVsc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqEEvZywgJyAgICAnKTsgIC8vIGdfdGFiX3dpZHRoXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoQi9nLCAnJyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZGV0YWIuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ2VsbGlwc2lzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghb3B0aW9ucy5lbGxpcHNpcykge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZWxsaXBzaXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFwuXFwuXFwuL2csICfigKYnKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlbGxpcHNpcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBUdXJuIGVtb2ppIGNvZGVzIGludG8gZW1vamlzXG4gKlxuICogTGlzdCBvZiBzdXBwb3J0ZWQgZW1vamlzOiBodHRwczovL2dpdGh1Yi5jb20vc2hvd2Rvd25qcy9zaG93ZG93bi93aWtpL0Vtb2ppc1xuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2Vtb2ppJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghb3B0aW9ucy5lbW9qaSkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZW1vamkuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIGVtb2ppUmd4ID0gLzooW1xcU10rPyk6L2c7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShlbW9qaVJneCwgZnVuY3Rpb24gKHdtLCBlbW9qaUNvZGUpIHtcbiAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmVtb2ppcy5oYXNPd25Qcm9wZXJ0eShlbW9qaUNvZGUpKSB7XG4gICAgICByZXR1cm4gc2hvd2Rvd24uaGVscGVyLmVtb2ppc1tlbW9qaUNvZGVdO1xuICAgIH1cbiAgICByZXR1cm4gd207XG4gIH0pO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2Vtb2ppLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIFNtYXJ0IHByb2Nlc3NpbmcgZm9yIGFtcGVyc2FuZHMgYW5kIGFuZ2xlIGJyYWNrZXRzIHRoYXQgbmVlZCB0byBiZSBlbmNvZGVkLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUFtcHNBbmRBbmdsZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VuY29kZUFtcHNBbmRBbmdsZXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gQW1wZXJzYW5kLWVuY29kaW5nIGJhc2VkIGVudGlyZWx5IG9uIE5hdCBJcm9ucydzIEFtcHV0YXRvciBNVCBwbHVnaW46XG4gIC8vIGh0dHA6Ly9idW1wcG8ubmV0L3Byb2plY3RzL2FtcHV0YXRvci9cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvJig/ISM/W3hYXT8oPzpbMC05YS1mQS1GXSt8XFx3Kyk7KS9nLCAnJmFtcDsnKTtcblxuICAvLyBFbmNvZGUgbmFrZWQgPCdzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzwoPyFbYS16XFwvPyQhXSkvZ2ksICcmbHQ7Jyk7XG5cbiAgLy8gRW5jb2RlIDxcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvPC9nLCAnJmx0OycpO1xuXG4gIC8vIEVuY29kZSA+XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLz4vZywgJyZndDsnKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlbmNvZGVBbXBzQW5kQW5nbGVzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBSZXR1cm5zIHRoZSBzdHJpbmcsIHdpdGggYWZ0ZXIgcHJvY2Vzc2luZyB0aGUgZm9sbG93aW5nIGJhY2tzbGFzaCBlc2NhcGUgc2VxdWVuY2VzLlxuICpcbiAqIGF0dGFja2xhYjogVGhlIHBvbGl0ZSB3YXkgdG8gZG8gdGhpcyBpcyB3aXRoIHRoZSBuZXcgZXNjYXBlQ2hhcmFjdGVycygpIGZ1bmN0aW9uOlxuICpcbiAqICAgIHRleHQgPSBlc2NhcGVDaGFyYWN0ZXJzKHRleHQsXCJcXFxcXCIsdHJ1ZSk7XG4gKiAgICB0ZXh0ID0gZXNjYXBlQ2hhcmFjdGVycyh0ZXh0LFwiYCpfe31bXSgpPiMrLS4hXCIsdHJ1ZSk7XG4gKlxuICogLi4uYnV0IHdlJ3JlIHNpZGVzdGVwcGluZyBpdHMgdXNlIG9mIHRoZSAoc2xvdykgUmVnRXhwIGNvbnN0cnVjdG9yXG4gKiBhcyBhbiBvcHRpbWl6YXRpb24gZm9yIEZpcmVmb3guICBUaGlzIGZ1bmN0aW9uIGdldHMgY2FsbGVkIGEgTE9ULlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUJhY2tzbGFzaEVzY2FwZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VuY29kZUJhY2tzbGFzaEVzY2FwZXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxcXChcXFxcKS9nLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxcXChbYCpfe31cXFtcXF0oKT4jKy4hfj18Oi1dKS9nLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlbmNvZGVCYWNrc2xhc2hFc2NhcGVzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBFbmNvZGUvZXNjYXBlIGNlcnRhaW4gY2hhcmFjdGVycyBpbnNpZGUgTWFya2Rvd24gY29kZSBydW5zLlxuICogVGhlIHBvaW50IGlzIHRoYXQgaW4gY29kZSwgdGhlc2UgY2hhcmFjdGVycyBhcmUgbGl0ZXJhbHMsXG4gKiBhbmQgbG9zZSB0aGVpciBzcGVjaWFsIE1hcmtkb3duIG1lYW5pbmdzLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZW5jb2RlQ29kZS5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBFbmNvZGUgYWxsIGFtcGVyc2FuZHM7IEhUTUwgZW50aXRpZXMgYXJlIG5vdFxuICAvLyBlbnRpdGllcyB3aXRoaW4gYSBNYXJrZG93biBjb2RlIHNwYW4uXG4gIHRleHQgPSB0ZXh0XG4gICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgLy8gRG8gdGhlIGFuZ2xlIGJyYWNrZXQgc29uZyBhbmQgZGFuY2U6XG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgLy8gTm93LCBlc2NhcGUgY2hhcmFjdGVycyB0aGF0IGFyZSBtYWdpYyBpbiBNYXJrZG93bjpcbiAgICAucmVwbGFjZSgvKFsqX3t9XFxbXFxdXFxcXD1+LV0pL2csIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VuY29kZUNvZGUuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIFdpdGhpbiB0YWdzIC0tIG1lYW5pbmcgYmV0d2VlbiA8IGFuZCA+IC0tIGVuY29kZSBbXFwgYCAqIF8gfiA9XSBzbyB0aGV5XG4gKiBkb24ndCBjb25mbGljdCB3aXRoIHRoZWlyIHVzZSBpbiBNYXJrZG93biBmb3IgY29kZSwgaXRhbGljcyBhbmQgc3Ryb25nLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2VzY2FwZVNwZWNpYWxDaGFyc1dpdGhpblRhZ0F0dHJpYnV0ZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VzY2FwZVNwZWNpYWxDaGFyc1dpdGhpblRhZ0F0dHJpYnV0ZXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gQnVpbGQgYSByZWdleCB0byBmaW5kIEhUTUwgdGFncy5cbiAgdmFyIHRhZ3MgICAgID0gLzxcXC8/W2EtelxcZF86LV0rKD86W1xcc10rW1xcc1xcU10rPyk/Pi9naSxcbiAgICAgIGNvbW1lbnRzID0gLzwhKC0tKD86KD86W14+LV18LVtePl0pKD86W14tXXwtW14tXSkqKS0tKT4vZ2k7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSh0YWdzLCBmdW5jdGlvbiAod2hvbGVNYXRjaCkge1xuICAgIHJldHVybiB3aG9sZU1hdGNoXG4gICAgICAucmVwbGFjZSgvKC4pPFxcLz9jb2RlPig/PS4pL2csICckMWAnKVxuICAgICAgLnJlcGxhY2UoLyhbXFxcXGAqX349fF0pL2csIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuICB9KTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGNvbW1lbnRzLCBmdW5jdGlvbiAod2hvbGVNYXRjaCkge1xuICAgIHJldHVybiB3aG9sZU1hdGNoXG4gICAgICAucmVwbGFjZSgvKFtcXFxcYCpffj18XSkvZywgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gIH0pO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VzY2FwZVNwZWNpYWxDaGFyc1dpdGhpblRhZ0F0dHJpYnV0ZXMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIEhhbmRsZSBnaXRodWIgY29kZWJsb2NrcyBwcmlvciB0byBydW5uaW5nIEhhc2hIVE1MIHNvIHRoYXRcbiAqIEhUTUwgY29udGFpbmVkIHdpdGhpbiB0aGUgY29kZWJsb2NrIGdldHMgZXNjYXBlZCBwcm9wZXJseVxuICogRXhhbXBsZTpcbiAqIGBgYHJ1YnlcbiAqICAgICBkZWYgaGVsbG9fd29ybGQoeClcbiAqICAgICAgIHB1dHMgXCJIZWxsbywgI3t4fVwiXG4gKiAgICAgZW5kXG4gKiBgYGBcbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdnaXRodWJDb2RlQmxvY2tzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIGVhcmx5IGV4aXQgaWYgb3B0aW9uIGlzIG5vdCBlbmFibGVkXG4gIGlmICghb3B0aW9ucy5naENvZGVCbG9ja3MpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2dpdGh1YkNvZGVCbG9ja3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdGV4dCArPSAnwqgwJztcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oPzpefFxcbikoPzogezAsM30pKGBgYCt8fn5+KykoPzogKikoW15cXHNgfl0qKVxcbihbXFxzXFxTXSo/KVxcbig/OiB7MCwzfSlcXDEvZywgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIGRlbGltLCBsYW5ndWFnZSwgY29kZWJsb2NrKSB7XG4gICAgdmFyIGVuZCA9IChvcHRpb25zLm9taXRFeHRyYVdMSW5Db2RlQmxvY2tzKSA/ICcnIDogJ1xcbic7XG5cbiAgICAvLyBGaXJzdCBwYXJzZSB0aGUgZ2l0aHViIGNvZGUgYmxvY2tcbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnKShjb2RlYmxvY2ssIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIGNvZGVibG9jayA9IHNob3dkb3duLnN1YlBhcnNlcignZGV0YWInKShjb2RlYmxvY2ssIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIGNvZGVibG9jayA9IGNvZGVibG9jay5yZXBsYWNlKC9eXFxuKy9nLCAnJyk7IC8vIHRyaW0gbGVhZGluZyBuZXdsaW5lc1xuICAgIGNvZGVibG9jayA9IGNvZGVibG9jay5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7IC8vIHRyaW0gdHJhaWxpbmcgd2hpdGVzcGFjZVxuXG4gICAgY29kZWJsb2NrID0gJzxwcmU+PGNvZGUnICsgKGxhbmd1YWdlID8gJyBjbGFzcz1cIicgKyBsYW5ndWFnZSArICcgbGFuZ3VhZ2UtJyArIGxhbmd1YWdlICsgJ1wiJyA6ICcnKSArICc+JyArIGNvZGVibG9jayArIGVuZCArICc8L2NvZGU+PC9wcmU+JztcblxuICAgIGNvZGVibG9jayA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAgIC8vIFNpbmNlIEdIQ29kZWJsb2NrcyBjYW4gYmUgZmFsc2UgcG9zaXRpdmVzLCB3ZSBuZWVkIHRvXG4gICAgLy8gc3RvcmUgdGhlIHByaW1pdGl2ZSB0ZXh0IGFuZCB0aGUgcGFyc2VkIHRleHQgaW4gYSBnbG9iYWwgdmFyLFxuICAgIC8vIGFuZCB0aGVuIHJldHVybiBhIHRva2VuXG4gICAgcmV0dXJuICdcXG5cXG7CqEcnICsgKGdsb2JhbHMuZ2hDb2RlQmxvY2tzLnB1c2goe3RleHQ6IHdob2xlTWF0Y2gsIGNvZGVibG9jazogY29kZWJsb2NrfSkgLSAxKSArICdHXFxuXFxuJztcbiAgfSk7XG5cbiAgLy8gYXR0YWNrbGFiOiBzdHJpcCBzZW50aW5lbFxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqDAvLCAnJyk7XG5cbiAgcmV0dXJuIGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZ2l0aHViQ29kZUJsb2Nrcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoQmxvY2snLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hCbG9jay5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKF5cXG4rfFxcbiskKS9nLCAnJyk7XG4gIHRleHQgPSAnXFxuXFxuwqhLJyArIChnbG9iYWxzLmdIdG1sQmxvY2tzLnB1c2godGV4dCkgLSAxKSArICdLXFxuXFxuJztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEJsb2NrLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBIYXNoIGFuZCBlc2NhcGUgPGNvZGU+IGVsZW1lbnRzIHRoYXQgc2hvdWxkIG5vdCBiZSBwYXJzZWQgYXMgbWFya2Rvd25cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoQ29kZVRhZ3MnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hDb2RlVGFncy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB2YXIgcmVwRnVuYyA9IGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtYXRjaCwgbGVmdCwgcmlnaHQpIHtcbiAgICB2YXIgY29kZWJsb2NrID0gbGVmdCArIHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQ29kZScpKG1hdGNoLCBvcHRpb25zLCBnbG9iYWxzKSArIHJpZ2h0O1xuICAgIHJldHVybiAnwqhDJyArIChnbG9iYWxzLmdIdG1sU3BhbnMucHVzaChjb2RlYmxvY2spIC0gMSkgKyAnQyc7XG4gIH07XG5cbiAgLy8gSGFzaCBuYWtlZCA8Y29kZT5cbiAgdGV4dCA9IHNob3dkb3duLmhlbHBlci5yZXBsYWNlUmVjdXJzaXZlUmVnRXhwKHRleHQsIHJlcEZ1bmMsICc8Y29kZVxcXFxiW14+XSo+JywgJzwvY29kZT4nLCAnZ2ltJyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaENvZGVUYWdzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoRWxlbWVudCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICByZXR1cm4gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xKSB7XG4gICAgdmFyIGJsb2NrVGV4dCA9IG0xO1xuXG4gICAgLy8gVW5kbyBkb3VibGUgbGluZXNcbiAgICBibG9ja1RleHQgPSBibG9ja1RleHQucmVwbGFjZSgvXFxuXFxuL2csICdcXG4nKTtcbiAgICBibG9ja1RleHQgPSBibG9ja1RleHQucmVwbGFjZSgvXlxcbi8sICcnKTtcblxuICAgIC8vIHN0cmlwIHRyYWlsaW5nIGJsYW5rIGxpbmVzXG4gICAgYmxvY2tUZXh0ID0gYmxvY2tUZXh0LnJlcGxhY2UoL1xcbiskL2csICcnKTtcblxuICAgIC8vIFJlcGxhY2UgdGhlIGVsZW1lbnQgdGV4dCB3aXRoIGEgbWFya2VyIChcIsKoS3hLXCIgd2hlcmUgeCBpcyBpdHMga2V5KVxuICAgIGJsb2NrVGV4dCA9ICdcXG5cXG7CqEsnICsgKGdsb2JhbHMuZ0h0bWxCbG9ja3MucHVzaChibG9ja1RleHQpIC0gMSkgKyAnS1xcblxcbic7XG5cbiAgICByZXR1cm4gYmxvY2tUZXh0O1xuICB9O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTEJsb2NrcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEhUTUxCbG9ja3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIGJsb2NrVGFncyA9IFtcbiAgICAgICAgJ3ByZScsXG4gICAgICAgICdkaXYnLFxuICAgICAgICAnaDEnLFxuICAgICAgICAnaDInLFxuICAgICAgICAnaDMnLFxuICAgICAgICAnaDQnLFxuICAgICAgICAnaDUnLFxuICAgICAgICAnaDYnLFxuICAgICAgICAnYmxvY2txdW90ZScsXG4gICAgICAgICd0YWJsZScsXG4gICAgICAgICdkbCcsXG4gICAgICAgICdvbCcsXG4gICAgICAgICd1bCcsXG4gICAgICAgICdzY3JpcHQnLFxuICAgICAgICAnbm9zY3JpcHQnLFxuICAgICAgICAnZm9ybScsXG4gICAgICAgICdmaWVsZHNldCcsXG4gICAgICAgICdpZnJhbWUnLFxuICAgICAgICAnbWF0aCcsXG4gICAgICAgICdzdHlsZScsXG4gICAgICAgICdzZWN0aW9uJyxcbiAgICAgICAgJ2hlYWRlcicsXG4gICAgICAgICdmb290ZXInLFxuICAgICAgICAnbmF2JyxcbiAgICAgICAgJ2FydGljbGUnLFxuICAgICAgICAnYXNpZGUnLFxuICAgICAgICAnYWRkcmVzcycsXG4gICAgICAgICdhdWRpbycsXG4gICAgICAgICdjYW52YXMnLFxuICAgICAgICAnZmlndXJlJyxcbiAgICAgICAgJ2hncm91cCcsXG4gICAgICAgICdvdXRwdXQnLFxuICAgICAgICAndmlkZW8nLFxuICAgICAgICAncCdcbiAgICAgIF0sXG4gICAgICByZXBGdW5jID0gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG1hdGNoLCBsZWZ0LCByaWdodCkge1xuICAgICAgICB2YXIgdHh0ID0gd2hvbGVNYXRjaDtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBodG1sIGVsZW1lbnQgaXMgbWFya2VkIGFzIG1hcmtkb3duXG4gICAgICAgIC8vIGlmIHNvLCBpdCdzIGNvbnRlbnRzIHNob3VsZCBiZSBwYXJzZWQgYXMgbWFya2Rvd25cbiAgICAgICAgaWYgKGxlZnQuc2VhcmNoKC9cXGJtYXJrZG93blxcYi8pICE9PSAtMSkge1xuICAgICAgICAgIHR4dCA9IGxlZnQgKyBnbG9iYWxzLmNvbnZlcnRlci5tYWtlSHRtbChtYXRjaCkgKyByaWdodDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ1xcblxcbsKoSycgKyAoZ2xvYmFscy5nSHRtbEJsb2Nrcy5wdXNoKHR4dCkgLSAxKSArICdLXFxuXFxuJztcbiAgICAgIH07XG5cbiAgaWYgKG9wdGlvbnMuYmFja3NsYXNoRXNjYXBlc0hUTUxUYWdzKSB7XG4gICAgLy8gZW5jb2RlIGJhY2tzbGFzaCBlc2NhcGVkIEhUTUwgdGFnc1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcXFw8KFxcLz9bXj5dKz8pPi9nLCBmdW5jdGlvbiAod20sIGluc2lkZSkge1xuICAgICAgcmV0dXJuICcmbHQ7JyArIGluc2lkZSArICcmZ3Q7JztcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGhhc2ggSFRNTCBCbG9ja3NcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja1RhZ3MubGVuZ3RoOyArK2kpIHtcblxuICAgIHZhciBvcFRhZ1BvcyxcbiAgICAgICAgcmd4MSAgICAgPSBuZXcgUmVnRXhwKCdeIHswLDN9KDwnICsgYmxvY2tUYWdzW2ldICsgJ1xcXFxiW14+XSo+KScsICdpbScpLFxuICAgICAgICBwYXRMZWZ0ICA9ICc8JyArIGJsb2NrVGFnc1tpXSArICdcXFxcYltePl0qPicsXG4gICAgICAgIHBhdFJpZ2h0ID0gJzwvJyArIGJsb2NrVGFnc1tpXSArICc+JztcbiAgICAvLyAxLiBMb29rIGZvciB0aGUgZmlyc3QgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9wZW5pbmcgSFRNTCB0YWcgaW4gdGhlIHRleHRcbiAgICB3aGlsZSAoKG9wVGFnUG9zID0gc2hvd2Rvd24uaGVscGVyLnJlZ2V4SW5kZXhPZih0ZXh0LCByZ3gxKSkgIT09IC0xKSB7XG5cbiAgICAgIC8vIGlmIHRoZSBIVE1MIHRhZyBpcyBcXCBlc2NhcGVkLCB3ZSBuZWVkIHRvIGVzY2FwZSBpdCBhbmQgYnJlYWtcblxuXG4gICAgICAvLzIuIFNwbGl0IHRoZSB0ZXh0IGluIHRoYXQgcG9zaXRpb25cbiAgICAgIHZhciBzdWJUZXh0cyA9IHNob3dkb3duLmhlbHBlci5zcGxpdEF0SW5kZXgodGV4dCwgb3BUYWdQb3MpLFxuICAgICAgICAgIC8vMy4gTWF0Y2ggcmVjdXJzaXZlbHlcbiAgICAgICAgICBuZXdTdWJUZXh0MSA9IHNob3dkb3duLmhlbHBlci5yZXBsYWNlUmVjdXJzaXZlUmVnRXhwKHN1YlRleHRzWzFdLCByZXBGdW5jLCBwYXRMZWZ0LCBwYXRSaWdodCwgJ2ltJyk7XG5cbiAgICAgIC8vIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgaWYgKG5ld1N1YlRleHQxID09PSBzdWJUZXh0c1sxXSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRleHQgPSBzdWJUZXh0c1swXS5jb25jYXQobmV3U3ViVGV4dDEpO1xuICAgIH1cbiAgfVxuICAvLyBIUiBTUEVDSUFMIENBU0VcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFxcbiB7MCwzfSg8KGhyKVxcYihbXjw+XSkqP1xcLz8+KVsgXFx0XSooPz1cXG57Mix9KSkvZyxcbiAgICBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hFbGVtZW50JykodGV4dCwgb3B0aW9ucywgZ2xvYmFscykpO1xuXG4gIC8vIFNwZWNpYWwgY2FzZSBmb3Igc3RhbmRhbG9uZSBIVE1MIGNvbW1lbnRzXG4gIHRleHQgPSBzaG93ZG93bi5oZWxwZXIucmVwbGFjZVJlY3Vyc2l2ZVJlZ0V4cCh0ZXh0LCBmdW5jdGlvbiAodHh0KSB7XG4gICAgcmV0dXJuICdcXG5cXG7CqEsnICsgKGdsb2JhbHMuZ0h0bWxCbG9ja3MucHVzaCh0eHQpIC0gMSkgKyAnS1xcblxcbic7XG4gIH0sICdeIHswLDN9PCEtLScsICctLT4nLCAnZ20nKTtcblxuICAvLyBQSFAgYW5kIEFTUC1zdHlsZSBwcm9jZXNzb3IgaW5zdHJ1Y3Rpb25zICg8Py4uLj8+IGFuZCA8JS4uLiU+KVxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oPzpcXG5cXG4pKCB7MCwzfSg/OjwoWz8lXSlbXlxccl0qP1xcMj4pWyBcXHRdKig/PVxcbnsyLH0pKS9nLFxuICAgIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEVsZW1lbnQnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEhUTUxCbG9ja3MuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIEhhc2ggc3BhbiBlbGVtZW50cyB0aGF0IHNob3VsZCBub3QgYmUgcGFyc2VkIGFzIG1hcmtkb3duXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignaGFzaEhUTUxTcGFucycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEhUTUxTcGFucy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICBmdW5jdGlvbiBoYXNoSFRNTFNwYW4gKGh0bWwpIHtcbiAgICByZXR1cm4gJ8KoQycgKyAoZ2xvYmFscy5nSHRtbFNwYW5zLnB1c2goaHRtbCkgLSAxKSArICdDJztcbiAgfVxuXG4gIC8vIEhhc2ggU2VsZiBDbG9zaW5nIHRhZ3NcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvPFtePl0rP1xcLz4vZ2ksIGZ1bmN0aW9uICh3bSkge1xuICAgIHJldHVybiBoYXNoSFRNTFNwYW4od20pO1xuICB9KTtcblxuICAvLyBIYXNoIHRhZ3Mgd2l0aG91dCBwcm9wZXJ0aWVzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzwoW14+XSs/KT5bXFxzXFxTXSo/PFxcL1xcMT4vZywgZnVuY3Rpb24gKHdtKSB7XG4gICAgcmV0dXJuIGhhc2hIVE1MU3Bhbih3bSk7XG4gIH0pO1xuXG4gIC8vIEhhc2ggdGFncyB3aXRoIHByb3BlcnRpZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvPChbXj5dKz8pXFxzW14+XSs/PltcXHNcXFNdKj88XFwvXFwxPi9nLCBmdW5jdGlvbiAod20pIHtcbiAgICByZXR1cm4gaGFzaEhUTUxTcGFuKHdtKTtcbiAgfSk7XG5cbiAgLy8gSGFzaCBzZWxmIGNsb3NpbmcgdGFncyB3aXRob3V0IC8+XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzxbXj5dKz8+L2dpLCBmdW5jdGlvbiAod20pIHtcbiAgICByZXR1cm4gaGFzaEhUTUxTcGFuKHdtKTtcbiAgfSk7XG5cbiAgLypzaG93ZG93bi5oZWxwZXIubWF0Y2hSZWN1cnNpdmVSZWdFeHAodGV4dCwgJzxjb2RlXFxcXGJbXj5dKj4nLCAnPC9jb2RlPicsICdnaScpOyovXG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEhUTUxTcGFucy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuXG4vKipcbiAqIFVuaGFzaCBIVE1MIHNwYW5zXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcigndW5oYXNoSFRNTFNwYW5zJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCd1bmhhc2hIVE1MU3BhbnMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbG9iYWxzLmdIdG1sU3BhbnMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcmVwVGV4dCA9IGdsb2JhbHMuZ0h0bWxTcGFuc1tpXSxcbiAgICAgICAgLy8gbGltaXRlciB0byBwcmV2ZW50IGluZmluaXRlIGxvb3AgKGFzc3VtZSAxMCBhcyBsaW1pdCBmb3IgcmVjdXJzZSlcbiAgICAgICAgbGltaXQgPSAwO1xuXG4gICAgd2hpbGUgKC/CqEMoXFxkKylDLy50ZXN0KHJlcFRleHQpKSB7XG4gICAgICB2YXIgbnVtID0gUmVnRXhwLiQxO1xuICAgICAgcmVwVGV4dCA9IHJlcFRleHQucmVwbGFjZSgnwqhDJyArIG51bSArICdDJywgZ2xvYmFscy5nSHRtbFNwYW5zW251bV0pO1xuICAgICAgaWYgKGxpbWl0ID09PSAxMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdtYXhpbXVtIG5lc3Rpbmcgb2YgMTAgc3BhbnMgcmVhY2hlZCEhIScpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgICsrbGltaXQ7XG4gICAgfVxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoJ8KoQycgKyBpICsgJ0MnLCByZXBUZXh0KTtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3VuaGFzaEhUTUxTcGFucy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwgIi8qKlxuICogSGFzaCBhbmQgZXNjYXBlIDxwcmU+PGNvZGU+IGVsZW1lbnRzIHRoYXQgc2hvdWxkIG5vdCBiZSBwYXJzZWQgYXMgbWFya2Rvd25cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoUHJlQ29kZVRhZ3MnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hQcmVDb2RlVGFncy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB2YXIgcmVwRnVuYyA9IGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtYXRjaCwgbGVmdCwgcmlnaHQpIHtcbiAgICAvLyBlbmNvZGUgaHRtbCBlbnRpdGllc1xuICAgIHZhciBjb2RlYmxvY2sgPSBsZWZ0ICsgc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykobWF0Y2gsIG9wdGlvbnMsIGdsb2JhbHMpICsgcmlnaHQ7XG4gICAgcmV0dXJuICdcXG5cXG7CqEcnICsgKGdsb2JhbHMuZ2hDb2RlQmxvY2tzLnB1c2goe3RleHQ6IHdob2xlTWF0Y2gsIGNvZGVibG9jazogY29kZWJsb2NrfSkgLSAxKSArICdHXFxuXFxuJztcbiAgfTtcblxuICAvLyBIYXNoIDxwcmU+PGNvZGU+XG4gIHRleHQgPSBzaG93ZG93bi5oZWxwZXIucmVwbGFjZVJlY3Vyc2l2ZVJlZ0V4cCh0ZXh0LCByZXBGdW5jLCAnXiB7MCwzfTxwcmVcXFxcYltePl0qPlxcXFxzKjxjb2RlXFxcXGJbXj5dKj4nLCAnXiB7MCwzfTwvY29kZT5cXFxccyo8L3ByZT4nLCAnZ2ltJyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaFByZUNvZGVUYWdzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdoZWFkZXJzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hlYWRlcnMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIGhlYWRlckxldmVsU3RhcnQgPSAoaXNOYU4ocGFyc2VJbnQob3B0aW9ucy5oZWFkZXJMZXZlbFN0YXJ0KSkpID8gMSA6IHBhcnNlSW50KG9wdGlvbnMuaGVhZGVyTGV2ZWxTdGFydCksXG5cbiAgICAgIC8vIFNldCB0ZXh0LXN0eWxlIGhlYWRlcnM6XG4gICAgICAvL1x0SGVhZGVyIDFcbiAgICAgIC8vXHQ9PT09PT09PVxuICAgICAgLy9cbiAgICAgIC8vXHRIZWFkZXIgMlxuICAgICAgLy9cdC0tLS0tLS0tXG4gICAgICAvL1xuICAgICAgc2V0ZXh0UmVnZXhIMSA9IChvcHRpb25zLnNtb290aExpdmVQcmV2aWV3KSA/IC9eKC4rKVsgXFx0XSpcXG49ezIsfVsgXFx0XSpcXG4rL2dtIDogL14oLispWyBcXHRdKlxcbj0rWyBcXHRdKlxcbisvZ20sXG4gICAgICBzZXRleHRSZWdleEgyID0gKG9wdGlvbnMuc21vb3RoTGl2ZVByZXZpZXcpID8gL14oLispWyBcXHRdKlxcbi17Mix9WyBcXHRdKlxcbisvZ20gOiAvXiguKylbIFxcdF0qXFxuLStbIFxcdF0qXFxuKy9nbTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHNldGV4dFJlZ2V4SDEsIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSkge1xuXG4gICAgdmFyIHNwYW5HYW11dCA9IHNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JykobTEsIG9wdGlvbnMsIGdsb2JhbHMpLFxuICAgICAgICBoSUQgPSAob3B0aW9ucy5ub0hlYWRlcklkKSA/ICcnIDogJyBpZD1cIicgKyBoZWFkZXJJZChtMSkgKyAnXCInLFxuICAgICAgICBoTGV2ZWwgPSBoZWFkZXJMZXZlbFN0YXJ0LFxuICAgICAgICBoYXNoQmxvY2sgPSAnPGgnICsgaExldmVsICsgaElEICsgJz4nICsgc3BhbkdhbXV0ICsgJzwvaCcgKyBoTGV2ZWwgKyAnPic7XG4gICAgcmV0dXJuIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoaGFzaEJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgfSk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShzZXRleHRSZWdleEgyLCBmdW5jdGlvbiAobWF0Y2hGb3VuZCwgbTEpIHtcbiAgICB2YXIgc3BhbkdhbXV0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnKShtMSwgb3B0aW9ucywgZ2xvYmFscyksXG4gICAgICAgIGhJRCA9IChvcHRpb25zLm5vSGVhZGVySWQpID8gJycgOiAnIGlkPVwiJyArIGhlYWRlcklkKG0xKSArICdcIicsXG4gICAgICAgIGhMZXZlbCA9IGhlYWRlckxldmVsU3RhcnQgKyAxLFxuICAgICAgICBoYXNoQmxvY2sgPSAnPGgnICsgaExldmVsICsgaElEICsgJz4nICsgc3BhbkdhbXV0ICsgJzwvaCcgKyBoTGV2ZWwgKyAnPic7XG4gICAgcmV0dXJuIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoaGFzaEJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgfSk7XG5cbiAgLy8gYXR4LXN0eWxlIGhlYWRlcnM6XG4gIC8vICAjIEhlYWRlciAxXG4gIC8vICAjIyBIZWFkZXIgMlxuICAvLyAgIyMgSGVhZGVyIDIgd2l0aCBjbG9zaW5nIGhhc2hlcyAjI1xuICAvLyAgLi4uXG4gIC8vICAjIyMjIyMgSGVhZGVyIDZcbiAgLy9cbiAgdmFyIGF0eFN0eWxlID0gKG9wdGlvbnMucmVxdWlyZVNwYWNlQmVmb3JlSGVhZGluZ1RleHQpID8gL14oI3sxLDZ9KVsgXFx0XSsoLis/KVsgXFx0XSojKlxcbisvZ20gOiAvXigjezEsNn0pWyBcXHRdKiguKz8pWyBcXHRdKiMqXFxuKy9nbTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGF0eFN0eWxlLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIG0yKSB7XG4gICAgdmFyIGhUZXh0ID0gbTI7XG4gICAgaWYgKG9wdGlvbnMuY3VzdG9taXplZEhlYWRlcklkKSB7XG4gICAgICBoVGV4dCA9IG0yLnJlcGxhY2UoL1xccz9cXHsoW157XSs/KX1cXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICB2YXIgc3BhbiA9IHNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JykoaFRleHQsIG9wdGlvbnMsIGdsb2JhbHMpLFxuICAgICAgICBoSUQgPSAob3B0aW9ucy5ub0hlYWRlcklkKSA/ICcnIDogJyBpZD1cIicgKyBoZWFkZXJJZChtMikgKyAnXCInLFxuICAgICAgICBoTGV2ZWwgPSBoZWFkZXJMZXZlbFN0YXJ0IC0gMSArIG0xLmxlbmd0aCxcbiAgICAgICAgaGVhZGVyID0gJzxoJyArIGhMZXZlbCArIGhJRCArICc+JyArIHNwYW4gKyAnPC9oJyArIGhMZXZlbCArICc+JztcblxuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKGhlYWRlciwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGhlYWRlcklkIChtKSB7XG4gICAgdmFyIHRpdGxlLFxuICAgICAgICBwcmVmaXg7XG5cbiAgICAvLyBJdCBpcyBzZXBhcmF0ZSBmcm9tIG90aGVyIG9wdGlvbnMgdG8gYWxsb3cgY29tYmluaW5nIHByZWZpeCBhbmQgY3VzdG9taXplZFxuICAgIGlmIChvcHRpb25zLmN1c3RvbWl6ZWRIZWFkZXJJZCkge1xuICAgICAgdmFyIG1hdGNoID0gbS5tYXRjaCgvXFx7KFtee10rPyl9XFxzKiQvKTtcbiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xuICAgICAgICBtID0gbWF0Y2hbMV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGl0bGUgPSBtO1xuXG4gICAgLy8gUHJlZml4IGlkIHRvIHByZXZlbnQgY2F1c2luZyBpbmFkdmVydGVudCBwcmUtZXhpc3Rpbmcgc3R5bGUgbWF0Y2hlcy5cbiAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKG9wdGlvbnMucHJlZml4SGVhZGVySWQpKSB7XG4gICAgICBwcmVmaXggPSBvcHRpb25zLnByZWZpeEhlYWRlcklkO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wcmVmaXhIZWFkZXJJZCA9PT0gdHJ1ZSkge1xuICAgICAgcHJlZml4ID0gJ3NlY3Rpb24tJztcbiAgICB9IGVsc2Uge1xuICAgICAgcHJlZml4ID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLnJhd1ByZWZpeEhlYWRlcklkKSB7XG4gICAgICB0aXRsZSA9IHByZWZpeCArIHRpdGxlO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmdoQ29tcGF0aWJsZUhlYWRlcklkKSB7XG4gICAgICB0aXRsZSA9IHRpdGxlXG4gICAgICAgIC5yZXBsYWNlKC8gL2csICctJylcbiAgICAgICAgLy8gcmVwbGFjZSBwcmV2aW91c2x5IGVzY2FwZWQgY2hhcnMgKCYsIMKoIGFuZCAkKVxuICAgICAgICAucmVwbGFjZSgvJmFtcDsvZywgJycpXG4gICAgICAgIC5yZXBsYWNlKC/CqFQvZywgJycpXG4gICAgICAgIC5yZXBsYWNlKC/CqEQvZywgJycpXG4gICAgICAgIC8vIHJlcGxhY2UgcmVzdCBvZiB0aGUgY2hhcnMgKCZ+JCBhcmUgcmVwZWF0ZWQgYXMgdGhleSBtaWdodCBoYXZlIGJlZW4gZXNjYXBlZClcbiAgICAgICAgLy8gYm9ycm93ZWQgZnJvbSBnaXRodWIncyByZWRjYXJwZXQgKHNvbWUgdGhleSBzaG91bGQgcHJvZHVjZSBzaW1pbGFyIHJlc3VsdHMpXG4gICAgICAgIC5yZXBsYWNlKC9bJiskLFxcLzo7PT9AXCIje318XsKoflxcW1xcXWBcXFxcKikoJS4hJzw+XS9nLCAnJylcbiAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnJhd0hlYWRlcklkKSB7XG4gICAgICB0aXRsZSA9IHRpdGxlXG4gICAgICAgIC5yZXBsYWNlKC8gL2csICctJylcbiAgICAgICAgLy8gcmVwbGFjZSBwcmV2aW91c2x5IGVzY2FwZWQgY2hhcnMgKCYsIMKoIGFuZCAkKVxuICAgICAgICAucmVwbGFjZSgvJmFtcDsvZywgJyYnKVxuICAgICAgICAucmVwbGFjZSgvwqhUL2csICfCqCcpXG4gICAgICAgIC5yZXBsYWNlKC/CqEQvZywgJyQnKVxuICAgICAgICAvLyByZXBsYWNlIFwiIGFuZCAnXG4gICAgICAgIC5yZXBsYWNlKC9bXCInXS9nLCAnLScpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZSA9IHRpdGxlXG4gICAgICAgIC5yZXBsYWNlKC9bXlxcd10vZywgJycpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnJhd1ByZWZpeEhlYWRlcklkKSB7XG4gICAgICB0aXRsZSA9IHByZWZpeCArIHRpdGxlO1xuICAgIH1cblxuICAgIGlmIChnbG9iYWxzLmhhc2hMaW5rQ291bnRzW3RpdGxlXSkge1xuICAgICAgdGl0bGUgPSB0aXRsZSArICctJyArIChnbG9iYWxzLmhhc2hMaW5rQ291bnRzW3RpdGxlXSsrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2xvYmFscy5oYXNoTGlua0NvdW50c1t0aXRsZV0gPSAxO1xuICAgIH1cbiAgICByZXR1cm4gdGl0bGU7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdoZWFkZXJzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBUdXJuIE1hcmtkb3duIGxpbmsgc2hvcnRjdXRzIGludG8gWEhUTUwgPGE+IHRhZ3MuXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignaG9yaXpvbnRhbFJ1bGUnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hvcml6b250YWxSdWxlLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHZhciBrZXkgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKCc8aHIgLz4nLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXiB7MCwyfSggPy0pezMsfVsgXFx0XSokL2dtLCBrZXkpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eIHswLDJ9KCA/XFwqKXszLH1bIFxcdF0qJC9nbSwga2V5KTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXiB7MCwyfSggP18pezMsfVsgXFx0XSokL2dtLCBrZXkpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hvcml6b250YWxSdWxlLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBUdXJuIE1hcmtkb3duIGltYWdlIHNob3J0Y3V0cyBpbnRvIDxpbWc+IHRhZ3MuXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignaW1hZ2VzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2ltYWdlcy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB2YXIgaW5saW5lUmVnRXhwICAgICAgPSAvIVxcWyhbXlxcXV0qPyldWyBcXHRdKigpXFwoWyBcXHRdPzw/KFtcXFNdKz8oPzpcXChbXFxTXSo/XFwpW1xcU10qPyk/KT4/KD86ID0oWypcXGRdK1tBLVphLXolXXswLDR9KXgoWypcXGRdK1tBLVphLXolXXswLDR9KSk/WyBcXHRdKig/OihbXCInXSkoW15cIl0qPylcXDYpP1sgXFx0XT9cXCkvZyxcbiAgICAgIGNyYXp5UmVnRXhwICAgICAgID0gLyFcXFsoW15cXF1dKj8pXVsgXFx0XSooKVxcKFsgXFx0XT88KFtePl0qKT4oPzogPShbKlxcZF0rW0EtWmEteiVdezAsNH0peChbKlxcZF0rW0EtWmEteiVdezAsNH0pKT9bIFxcdF0qKD86KD86KFtcIiddKShbXlwiXSo/KVxcNikpP1sgXFx0XT9cXCkvZyxcbiAgICAgIGJhc2U2NFJlZ0V4cCAgICAgID0gLyFcXFsoW15cXF1dKj8pXVsgXFx0XSooKVxcKFsgXFx0XT88PyhkYXRhOi4rP1xcLy4rPztiYXNlNjQsW0EtWmEtejAtOSsvPVxcbl0rPyk+Pyg/OiA9KFsqXFxkXStbQS1aYS16JV17MCw0fSl4KFsqXFxkXStbQS1aYS16JV17MCw0fSkpP1sgXFx0XSooPzooW1wiJ10pKFteXCJdKj8pXFw2KT9bIFxcdF0/XFwpL2csXG4gICAgICByZWZlcmVuY2VSZWdFeHAgICA9IC8hXFxbKFteXFxdXSo/KV0gPyg/OlxcbiAqKT9cXFsoW1xcc1xcU10qPyldKCkoKSgpKCkoKS9nLFxuICAgICAgcmVmU2hvcnRjdXRSZWdFeHAgPSAvIVxcWyhbXlxcW1xcXV0rKV0oKSgpKCkoKSgpL2c7XG5cbiAgZnVuY3Rpb24gd3JpdGVJbWFnZVRhZ0Jhc2U2NCAod2hvbGVNYXRjaCwgYWx0VGV4dCwgbGlua0lkLCB1cmwsIHdpZHRoLCBoZWlnaHQsIG01LCB0aXRsZSkge1xuICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgIHJldHVybiB3cml0ZUltYWdlVGFnICh3aG9sZU1hdGNoLCBhbHRUZXh0LCBsaW5rSWQsIHVybCwgd2lkdGgsIGhlaWdodCwgbTUsIHRpdGxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW1hZ2VUYWcgKHdob2xlTWF0Y2gsIGFsdFRleHQsIGxpbmtJZCwgdXJsLCB3aWR0aCwgaGVpZ2h0LCBtNSwgdGl0bGUpIHtcblxuICAgIHZhciBnVXJscyAgID0gZ2xvYmFscy5nVXJscyxcbiAgICAgICAgZ1RpdGxlcyA9IGdsb2JhbHMuZ1RpdGxlcyxcbiAgICAgICAgZ0RpbXMgICA9IGdsb2JhbHMuZ0RpbWVuc2lvbnM7XG5cbiAgICBsaW5rSWQgPSBsaW5rSWQudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmICghdGl0bGUpIHtcbiAgICAgIHRpdGxlID0gJyc7XG4gICAgfVxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgZXhwbGljaXQgZW1wdHkgdXJsXG4gICAgaWYgKHdob2xlTWF0Y2guc2VhcmNoKC9cXCg8P1xccyo+PyA/KFsnXCJdLipbJ1wiXSk/XFwpJC9tKSA+IC0xKSB7XG4gICAgICB1cmwgPSAnJztcblxuICAgIH0gZWxzZSBpZiAodXJsID09PSAnJyB8fCB1cmwgPT09IG51bGwpIHtcbiAgICAgIGlmIChsaW5rSWQgPT09ICcnIHx8IGxpbmtJZCA9PT0gbnVsbCkge1xuICAgICAgICAvLyBsb3dlci1jYXNlIGFuZCB0dXJuIGVtYmVkZGVkIG5ld2xpbmVzIGludG8gc3BhY2VzXG4gICAgICAgIGxpbmtJZCA9IGFsdFRleHQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gP1xcbi9nLCAnICcpO1xuICAgICAgfVxuICAgICAgdXJsID0gJyMnICsgbGlua0lkO1xuXG4gICAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChnVXJsc1tsaW5rSWRdKSkge1xuICAgICAgICB1cmwgPSBnVXJsc1tsaW5rSWRdO1xuICAgICAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChnVGl0bGVzW2xpbmtJZF0pKSB7XG4gICAgICAgICAgdGl0bGUgPSBnVGl0bGVzW2xpbmtJZF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZ0RpbXNbbGlua0lkXSkpIHtcbiAgICAgICAgICB3aWR0aCA9IGdEaW1zW2xpbmtJZF0ud2lkdGg7XG4gICAgICAgICAgaGVpZ2h0ID0gZ0RpbXNbbGlua0lkXS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB3aG9sZU1hdGNoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFsdFRleHQgPSBhbHRUZXh0XG4gICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXG4gICAgLy9hbHRUZXh0ID0gc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnMoYWx0VGV4dCwgJypfJywgZmFsc2UpO1xuICAgICAgLnJlcGxhY2Uoc2hvd2Rvd24uaGVscGVyLnJlZ2V4ZXMuYXN0ZXJpc2tEYXNoQW5kQ29sb24sIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuICAgIC8vdXJsID0gc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnModXJsLCAnKl8nLCBmYWxzZSk7XG4gICAgdXJsID0gdXJsLnJlcGxhY2Uoc2hvd2Rvd24uaGVscGVyLnJlZ2V4ZXMuYXN0ZXJpc2tEYXNoQW5kQ29sb24sIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuICAgIHZhciByZXN1bHQgPSAnPGltZyBzcmM9XCInICsgdXJsICsgJ1wiIGFsdD1cIicgKyBhbHRUZXh0ICsgJ1wiJztcblxuICAgIGlmICh0aXRsZSAmJiBzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcodGl0bGUpKSB7XG4gICAgICB0aXRsZSA9IHRpdGxlXG4gICAgICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcbiAgICAgIC8vdGl0bGUgPSBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyh0aXRsZSwgJypfJywgZmFsc2UpO1xuICAgICAgICAucmVwbGFjZShzaG93ZG93bi5oZWxwZXIucmVnZXhlcy5hc3Rlcmlza0Rhc2hBbmRDb2xvbiwgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gICAgICByZXN1bHQgKz0gJyB0aXRsZT1cIicgKyB0aXRsZSArICdcIic7XG4gICAgfVxuXG4gICAgaWYgKHdpZHRoICYmIGhlaWdodCkge1xuICAgICAgd2lkdGggID0gKHdpZHRoID09PSAnKicpID8gJ2F1dG8nIDogd2lkdGg7XG4gICAgICBoZWlnaHQgPSAoaGVpZ2h0ID09PSAnKicpID8gJ2F1dG8nIDogaGVpZ2h0O1xuXG4gICAgICByZXN1bHQgKz0gJyB3aWR0aD1cIicgKyB3aWR0aCArICdcIic7XG4gICAgICByZXN1bHQgKz0gJyBoZWlnaHQ9XCInICsgaGVpZ2h0ICsgJ1wiJztcbiAgICB9XG5cbiAgICByZXN1bHQgKz0gJyAvPic7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gRmlyc3QsIGhhbmRsZSByZWZlcmVuY2Utc3R5bGUgbGFiZWxlZCBpbWFnZXM6ICFbYWx0IHRleHRdW2lkXVxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHJlZmVyZW5jZVJlZ0V4cCwgd3JpdGVJbWFnZVRhZyk7XG5cbiAgLy8gTmV4dCwgaGFuZGxlIGlubGluZSBpbWFnZXM6ICAhW2FsdCB0ZXh0XSh1cmwgPTx3aWR0aD54PGhlaWdodD4gXCJvcHRpb25hbCB0aXRsZVwiKVxuXG4gIC8vIGJhc2U2NCBlbmNvZGVkIGltYWdlc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGJhc2U2NFJlZ0V4cCwgd3JpdGVJbWFnZVRhZ0Jhc2U2NCk7XG5cbiAgLy8gY2FzZXMgd2l0aCBjcmF6eSB1cmxzIGxpa2UgLi9pbWFnZS9jYXQxKS5wbmdcbiAgdGV4dCA9IHRleHQucmVwbGFjZShjcmF6eVJlZ0V4cCwgd3JpdGVJbWFnZVRhZyk7XG5cbiAgLy8gbm9ybWFsIGNhc2VzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoaW5saW5lUmVnRXhwLCB3cml0ZUltYWdlVGFnKTtcblxuICAvLyBoYW5kbGUgcmVmZXJlbmNlLXN0eWxlIHNob3J0Y3V0czogIVtpbWcgdGV4dF1cbiAgdGV4dCA9IHRleHQucmVwbGFjZShyZWZTaG9ydGN1dFJlZ0V4cCwgd3JpdGVJbWFnZVRhZyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaW1hZ2VzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdpdGFsaWNzQW5kQm9sZCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdpdGFsaWNzQW5kQm9sZC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBpdCdzIGZhc3RlciB0byBoYXZlIDMgc2VwYXJhdGUgcmVnZXhlcyBmb3IgZWFjaCBjYXNlIHRoYW4gaGF2ZSBqdXN0IG9uZVxuICAvLyBiZWNhdXNlIG9mIGJhY2t0cmFjaW5nLCBpbiBzb21lIGNhc2VzLCBpdCBjb3VsZCBsZWFkIHRvIGFuIGV4cG9uZW50aWFsIGVmZmVjdFxuICAvLyBjYWxsZWQgXCJjYXRhc3Ryb3BoaWMgYmFja3RyYWNlXCIuIE9taW5vdXMhXG5cbiAgZnVuY3Rpb24gcGFyc2VJbnNpZGUgKHR4dCwgbGVmdCwgcmlnaHQpIHtcbiAgICAvKlxuICAgIGlmIChvcHRpb25zLnNpbXBsaWZpZWRBdXRvTGluaykge1xuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzaW1wbGlmaWVkQXV0b0xpbmtzJykodHh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB9XG4gICAgKi9cbiAgICByZXR1cm4gbGVmdCArIHR4dCArIHJpZ2h0O1xuICB9XG5cbiAgLy8gUGFyc2UgdW5kZXJzY29yZXNcbiAgaWYgKG9wdGlvbnMubGl0ZXJhbE1pZFdvcmRVbmRlcnNjb3Jlcykge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcYl9fXyhcXFNbXFxzXFxTXSo/KV9fX1xcYi9nLCBmdW5jdGlvbiAod20sIHR4dCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW5zaWRlICh0eHQsICc8c3Ryb25nPjxlbT4nLCAnPC9lbT48L3N0cm9uZz4nKTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXGJfXyhcXFNbXFxzXFxTXSo/KV9fXFxiL2csIGZ1bmN0aW9uICh3bSwgdHh0KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnNpZGUgKHR4dCwgJzxzdHJvbmc+JywgJzwvc3Ryb25nPicpO1xuICAgIH0pO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcYl8oXFxTW1xcc1xcU10qPylfXFxiL2csIGZ1bmN0aW9uICh3bSwgdHh0KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnNpZGUgKHR4dCwgJzxlbT4nLCAnPC9lbT4nKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9fX18oXFxTW1xcc1xcU10qPylfX18vZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/IHBhcnNlSW5zaWRlIChtLCAnPHN0cm9uZz48ZW0+JywgJzwvZW0+PC9zdHJvbmc+JykgOiB3bTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9fXyhcXFNbXFxzXFxTXSo/KV9fL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgcmV0dXJuICgvXFxTJC8udGVzdChtKSkgPyBwYXJzZUluc2lkZSAobSwgJzxzdHJvbmc+JywgJzwvc3Ryb25nPicpIDogd207XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXyhbXlxcc19dW1xcc1xcU10qPylfL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgLy8gIS9eX1teX10vLnRlc3QobSkgLSB0ZXN0IGlmIGl0IGRvZXNuJ3Qgc3RhcnQgd2l0aCBfXyAoc2luY2UgaXQgc2VlbXMgcmVkdW5kYW50LCB3ZSByZW1vdmVkIGl0KVxuICAgICAgcmV0dXJuICgvXFxTJC8udGVzdChtKSkgPyBwYXJzZUluc2lkZSAobSwgJzxlbT4nLCAnPC9lbT4nKSA6IHdtO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gTm93IHBhcnNlIGFzdGVyaXNrc1xuICBpZiAob3B0aW9ucy5saXRlcmFsTWlkV29yZEFzdGVyaXNrcykge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyhbXipdfF4pXFxCXFwqXFwqXFwqKFxcU1tcXHNcXFNdKj8pXFwqXFwqXFwqXFxCKD8hXFwqKS9nLCBmdW5jdGlvbiAod20sIGxlYWQsIHR4dCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW5zaWRlICh0eHQsIGxlYWQgKyAnPHN0cm9uZz48ZW0+JywgJzwvZW0+PC9zdHJvbmc+Jyk7XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFteKl18XilcXEJcXCpcXCooXFxTW1xcc1xcU10qPylcXCpcXCpcXEIoPyFcXCopL2csIGZ1bmN0aW9uICh3bSwgbGVhZCwgdHh0KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnNpZGUgKHR4dCwgbGVhZCArICc8c3Ryb25nPicsICc8L3N0cm9uZz4nKTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oW14qXXxeKVxcQlxcKihcXFNbXFxzXFxTXSo/KVxcKlxcQig/IVxcKikvZywgZnVuY3Rpb24gKHdtLCBsZWFkLCB0eHQpIHtcbiAgICAgIHJldHVybiBwYXJzZUluc2lkZSAodHh0LCBsZWFkICsgJzxlbT4nLCAnPC9lbT4nKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCpcXCpcXCooXFxTW1xcc1xcU10qPylcXCpcXCpcXCovZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/IHBhcnNlSW5zaWRlIChtLCAnPHN0cm9uZz48ZW0+JywgJzwvZW0+PC9zdHJvbmc+JykgOiB3bTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCpcXCooXFxTW1xcc1xcU10qPylcXCpcXCovZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/IHBhcnNlSW5zaWRlIChtLCAnPHN0cm9uZz4nLCAnPC9zdHJvbmc+JykgOiB3bTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCooW15cXHMqXVtcXHNcXFNdKj8pXFwqL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgLy8gIS9eXFwqW14qXS8udGVzdChtKSAtIHRlc3QgaWYgaXQgZG9lc24ndCBzdGFydCB3aXRoICoqIChzaW5jZSBpdCBzZWVtcyByZWR1bmRhbnQsIHdlIHJlbW92ZWQgaXQpXG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/IHBhcnNlSW5zaWRlIChtLCAnPGVtPicsICc8L2VtPicpIDogd207XG4gICAgfSk7XG4gIH1cblxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2l0YWxpY3NBbmRCb2xkLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBGb3JtIEhUTUwgb3JkZXJlZCAobnVtYmVyZWQpIGFuZCB1bm9yZGVyZWQgKGJ1bGxldGVkKSBsaXN0cy5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdsaXN0cycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogUHJvY2VzcyB0aGUgY29udGVudHMgb2YgYSBzaW5nbGUgb3JkZXJlZCBvciB1bm9yZGVyZWQgbGlzdCwgc3BsaXR0aW5nIGl0XG4gICAqIGludG8gaW5kaXZpZHVhbCBsaXN0IGl0ZW1zLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGlzdFN0clxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHRyaW1UcmFpbGluZ1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gcHJvY2Vzc0xpc3RJdGVtcyAobGlzdFN0ciwgdHJpbVRyYWlsaW5nKSB7XG4gICAgLy8gVGhlICRnX2xpc3RfbGV2ZWwgZ2xvYmFsIGtlZXBzIHRyYWNrIG9mIHdoZW4gd2UncmUgaW5zaWRlIGEgbGlzdC5cbiAgICAvLyBFYWNoIHRpbWUgd2UgZW50ZXIgYSBsaXN0LCB3ZSBpbmNyZW1lbnQgaXQ7IHdoZW4gd2UgbGVhdmUgYSBsaXN0LFxuICAgIC8vIHdlIGRlY3JlbWVudC4gSWYgaXQncyB6ZXJvLCB3ZSdyZSBub3QgaW4gYSBsaXN0IGFueW1vcmUuXG4gICAgLy9cbiAgICAvLyBXZSBkbyB0aGlzIGJlY2F1c2Ugd2hlbiB3ZSdyZSBub3QgaW5zaWRlIGEgbGlzdCwgd2Ugd2FudCB0byB0cmVhdFxuICAgIC8vIHNvbWV0aGluZyBsaWtlIHRoaXM6XG4gICAgLy9cbiAgICAvLyAgICBJIHJlY29tbWVuZCB1cGdyYWRpbmcgdG8gdmVyc2lvblxuICAgIC8vICAgIDguIE9vcHMsIG5vdyB0aGlzIGxpbmUgaXMgdHJlYXRlZFxuICAgIC8vICAgIGFzIGEgc3ViLWxpc3QuXG4gICAgLy9cbiAgICAvLyBBcyBhIHNpbmdsZSBwYXJhZ3JhcGgsIGRlc3BpdGUgdGhlIGZhY3QgdGhhdCB0aGUgc2Vjb25kIGxpbmUgc3RhcnRzXG4gICAgLy8gd2l0aCBhIGRpZ2l0LXBlcmlvZC1zcGFjZSBzZXF1ZW5jZS5cbiAgICAvL1xuICAgIC8vIFdoZXJlYXMgd2hlbiB3ZSdyZSBpbnNpZGUgYSBsaXN0IChvciBzdWItbGlzdCksIHRoYXQgbGluZSB3aWxsIGJlXG4gICAgLy8gdHJlYXRlZCBhcyB0aGUgc3RhcnQgb2YgYSBzdWItbGlzdC4gV2hhdCBhIGtsdWRnZSwgaHVoPyBUaGlzIGlzXG4gICAgLy8gYW4gYXNwZWN0IG9mIE1hcmtkb3duJ3Mgc3ludGF4IHRoYXQncyBoYXJkIHRvIHBhcnNlIHBlcmZlY3RseVxuICAgIC8vIHdpdGhvdXQgcmVzb3J0aW5nIHRvIG1pbmQtcmVhZGluZy4gUGVyaGFwcyB0aGUgc29sdXRpb24gaXMgdG9cbiAgICAvLyBjaGFuZ2UgdGhlIHN5bnRheCBydWxlcyBzdWNoIHRoYXQgc3ViLWxpc3RzIG11c3Qgc3RhcnQgd2l0aCBhXG4gICAgLy8gc3RhcnRpbmcgY2FyZGluYWwgbnVtYmVyOyBlLmcuIFwiMS5cIiBvciBcImEuXCIuXG4gICAgZ2xvYmFscy5nTGlzdExldmVsKys7XG5cbiAgICAvLyB0cmltIHRyYWlsaW5nIGJsYW5rIGxpbmVzOlxuICAgIGxpc3RTdHIgPSBsaXN0U3RyLnJlcGxhY2UoL1xcbnsyLH0kLywgJ1xcbicpO1xuXG4gICAgLy8gYXR0YWNrbGFiOiBhZGQgc2VudGluZWwgdG8gZW11bGF0ZSBcXHpcbiAgICBsaXN0U3RyICs9ICfCqDAnO1xuXG4gICAgdmFyIHJneCA9IC8oXFxuKT8oXiB7MCwzfSkoWyorLV18XFxkK1suXSlbIFxcdF0rKChcXFsoeHxYfCApP10pP1sgXFx0XSpbXlxccl0rPyhcXG57MSwyfSkpKD89XFxuKijCqDB8IHswLDN9KFsqKy1dfFxcZCtbLl0pWyBcXHRdKykpL2dtLFxuICAgICAgICBpc1BhcmFncmFwaGVkID0gKC9cXG5bIFxcdF0qXFxuKD8hwqgwKS8udGVzdChsaXN0U3RyKSk7XG5cbiAgICAvLyBTaW5jZSB2ZXJzaW9uIDEuNSwgbmVzdGluZyBzdWJsaXN0cyByZXF1aXJlcyA0IHNwYWNlcyAob3IgMSB0YWIpIGluZGVudGF0aW9uLFxuICAgIC8vIHdoaWNoIGlzIGEgc3ludGF4IGJyZWFraW5nIGNoYW5nZVxuICAgIC8vIGFjdGl2YXRpbmcgdGhpcyBvcHRpb24gcmV2ZXJ0cyB0byBvbGQgYmVoYXZpb3JcbiAgICBpZiAob3B0aW9ucy5kaXNhYmxlRm9yY2VkNFNwYWNlc0luZGVudGVkU3VibGlzdHMpIHtcbiAgICAgIHJneCA9IC8oXFxuKT8oXiB7MCwzfSkoWyorLV18XFxkK1suXSlbIFxcdF0rKChcXFsoeHxYfCApP10pP1sgXFx0XSpbXlxccl0rPyhcXG57MSwyfSkpKD89XFxuKijCqDB8XFwyKFsqKy1dfFxcZCtbLl0pWyBcXHRdKykpL2dtO1xuICAgIH1cblxuICAgIGxpc3RTdHIgPSBsaXN0U3RyLnJlcGxhY2Uocmd4LCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIG0yLCBtMywgbTQsIHRhc2tidG4sIGNoZWNrZWQpIHtcbiAgICAgIGNoZWNrZWQgPSAoY2hlY2tlZCAmJiBjaGVja2VkLnRyaW0oKSAhPT0gJycpO1xuXG4gICAgICB2YXIgaXRlbSA9IHNob3dkb3duLnN1YlBhcnNlcignb3V0ZGVudCcpKG00LCBvcHRpb25zLCBnbG9iYWxzKSxcbiAgICAgICAgICBidWxsZXRTdHlsZSA9ICcnO1xuXG4gICAgICAvLyBTdXBwb3J0IGZvciBnaXRodWIgdGFza2xpc3RzXG4gICAgICBpZiAodGFza2J0biAmJiBvcHRpb25zLnRhc2tsaXN0cykge1xuICAgICAgICBidWxsZXRTdHlsZSA9ICcgY2xhc3M9XCJ0YXNrLWxpc3QtaXRlbVwiIHN0eWxlPVwibGlzdC1zdHlsZS10eXBlOiBub25lO1wiJztcbiAgICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvXlsgXFx0XSpcXFsoeHxYfCApP10vbSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBvdHAgPSAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGRpc2FibGVkIHN0eWxlPVwibWFyZ2luOiAwcHggMC4zNWVtIDAuMjVlbSAtMS42ZW07IHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XCInO1xuICAgICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICBvdHAgKz0gJyBjaGVja2VkJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3RwICs9ICc+JztcbiAgICAgICAgICByZXR1cm4gb3RwO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSVNTVUUgIzMxMlxuICAgICAgLy8gVGhpcyBpbnB1dDogLSAtIC0gYVxuICAgICAgLy8gY2F1c2VzIHRyb3VibGUgdG8gdGhlIHBhcnNlciwgc2luY2UgaXQgaW50ZXJwcmV0cyBpdCBhczpcbiAgICAgIC8vIDx1bD48bGk+PGxpPjxsaT5hPC9saT48L2xpPjwvbGk+PC91bD5cbiAgICAgIC8vIGluc3RlYWQgb2Y6XG4gICAgICAvLyA8dWw+PGxpPi0gLSBhPC9saT48L3VsPlxuICAgICAgLy8gU28sIHRvIHByZXZlbnQgaXQsIHdlIHdpbGwgcHV0IGEgbWFya2VyICjCqEEpaW4gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGluZVxuICAgICAgLy8gS2luZCBvZiBoYWNraXNoL21vbmtleSBwYXRjaGluZywgYnV0IHNlZW1zIG1vcmUgZWZmZWN0aXZlIHRoYW4gb3ZlcmNvbXBsaWNhdGluZyB0aGUgbGlzdCBwYXJzZXJcbiAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoL14oWy0qK118XFxkXFwuKVsgXFx0XStbXFxTXFxuIF0qL2csIGZ1bmN0aW9uICh3bTIpIHtcbiAgICAgICAgcmV0dXJuICfCqEEnICsgd20yO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIG0xIC0gTGVhZGluZyBsaW5lIG9yXG4gICAgICAvLyBIYXMgYSBkb3VibGUgcmV0dXJuIChtdWx0aSBwYXJhZ3JhcGgpIG9yXG4gICAgICAvLyBIYXMgc3VibGlzdFxuICAgICAgaWYgKG0xIHx8IChpdGVtLnNlYXJjaCgvXFxuezIsfS8pID4gLTEpKSB7XG4gICAgICAgIGl0ZW0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2dpdGh1YkNvZGVCbG9ja3MnKShpdGVtLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgaXRlbSA9IHNob3dkb3duLnN1YlBhcnNlcignYmxvY2tHYW11dCcpKGl0ZW0sIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVjdXJzaW9uIGZvciBzdWItbGlzdHM6XG4gICAgICAgIGl0ZW0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2xpc3RzJykoaXRlbSwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoL1xcbiQvLCAnJyk7IC8vIGNob21wKGl0ZW0pXG4gICAgICAgIGl0ZW0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hIVE1MQmxvY2tzJykoaXRlbSwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgICAgICAgLy8gQ29sYXBzZSBkb3VibGUgbGluZWJyZWFrc1xuICAgICAgICBpdGVtID0gaXRlbS5yZXBsYWNlKC9cXG5cXG4rL2csICdcXG5cXG4nKTtcbiAgICAgICAgaWYgKGlzUGFyYWdyYXBoZWQpIHtcbiAgICAgICAgICBpdGVtID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdwYXJhZ3JhcGhzJykoaXRlbSwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbSA9IHNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JykoaXRlbSwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBtYXJrZXIgKMKoQSlcbiAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoJ8KoQScsICcnKTtcbiAgICAgIC8vIHdlIGNhbiBmaW5hbGx5IHdyYXAgdGhlIGxpbmUgaW4gbGlzdCBpdGVtIHRhZ3NcbiAgICAgIGl0ZW0gPSAgJzxsaScgKyBidWxsZXRTdHlsZSArICc+JyArIGl0ZW0gKyAnPC9saT5cXG4nO1xuXG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9KTtcblxuICAgIC8vIGF0dGFja2xhYjogc3RyaXAgc2VudGluZWxcbiAgICBsaXN0U3RyID0gbGlzdFN0ci5yZXBsYWNlKC/CqDAvZywgJycpO1xuXG4gICAgZ2xvYmFscy5nTGlzdExldmVsLS07XG5cbiAgICBpZiAodHJpbVRyYWlsaW5nKSB7XG4gICAgICBsaXN0U3RyID0gbGlzdFN0ci5yZXBsYWNlKC9cXHMrJC8sICcnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdFN0cjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlU3RhcnROdW1iZXIgKGxpc3QsIGxpc3RUeXBlKSB7XG4gICAgLy8gY2hlY2sgaWYgb2wgYW5kIHN0YXJ0cyBieSBhIG51bWJlciBkaWZmZXJlbnQgdGhhbiAxXG4gICAgaWYgKGxpc3RUeXBlID09PSAnb2wnKSB7XG4gICAgICB2YXIgcmVzID0gbGlzdC5tYXRjaCgvXiAqKFxcZCspXFwuLyk7XG4gICAgICBpZiAocmVzICYmIHJlc1sxXSAhPT0gJzEnKSB7XG4gICAgICAgIHJldHVybiAnIHN0YXJ0PVwiJyArIHJlc1sxXSArICdcIic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBhbmQgcGFyc2UgY29uc2VjdXRpdmUgbGlzdHMgKGJldHRlciBmaXggZm9yIGlzc3VlICMxNDIpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaXN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaXN0VHlwZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHRyaW1UcmFpbGluZ1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VDb25zZWN1dGl2ZUxpc3RzIChsaXN0LCBsaXN0VHlwZSwgdHJpbVRyYWlsaW5nKSB7XG4gICAgLy8gY2hlY2sgaWYgd2UgY2F1Z2h0IDIgb3IgbW9yZSBjb25zZWN1dGl2ZSBsaXN0cyBieSBtaXN0YWtlXG4gICAgLy8gd2UgdXNlIHRoZSBjb3VudGVyUmd4LCBtZWFuaW5nIGlmIGxpc3RUeXBlIGlzIFVMIHdlIGxvb2sgZm9yIE9MIGFuZCB2aWNlIHZlcnNhXG4gICAgdmFyIG9sUmd4ID0gKG9wdGlvbnMuZGlzYWJsZUZvcmNlZDRTcGFjZXNJbmRlbnRlZFN1Ymxpc3RzKSA/IC9eID9cXGQrXFwuWyBcXHRdL2dtIDogL14gezAsM31cXGQrXFwuWyBcXHRdL2dtLFxuICAgICAgICB1bFJneCA9IChvcHRpb25zLmRpc2FibGVGb3JjZWQ0U3BhY2VzSW5kZW50ZWRTdWJsaXN0cykgPyAvXiA/WyorLV1bIFxcdF0vZ20gOiAvXiB7MCwzfVsqKy1dWyBcXHRdL2dtLFxuICAgICAgICBjb3VudGVyUnhnID0gKGxpc3RUeXBlID09PSAndWwnKSA/IG9sUmd4IDogdWxSZ3gsXG4gICAgICAgIHJlc3VsdCA9ICcnO1xuXG4gICAgaWYgKGxpc3Quc2VhcmNoKGNvdW50ZXJSeGcpICE9PSAtMSkge1xuICAgICAgKGZ1bmN0aW9uIHBhcnNlQ0wgKHR4dCkge1xuICAgICAgICB2YXIgcG9zID0gdHh0LnNlYXJjaChjb3VudGVyUnhnKSxcbiAgICAgICAgICAgIHN0eWxlID0gc3R5bGVTdGFydE51bWJlcihsaXN0LCBsaXN0VHlwZSk7XG4gICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgLy8gc2xpY2VcbiAgICAgICAgICByZXN1bHQgKz0gJ1xcblxcbjwnICsgbGlzdFR5cGUgKyBzdHlsZSArICc+XFxuJyArIHByb2Nlc3NMaXN0SXRlbXModHh0LnNsaWNlKDAsIHBvcyksICEhdHJpbVRyYWlsaW5nKSArICc8LycgKyBsaXN0VHlwZSArICc+XFxuJztcblxuICAgICAgICAgIC8vIGludmVydCBjb3VudGVyVHlwZSBhbmQgbGlzdFR5cGVcbiAgICAgICAgICBsaXN0VHlwZSA9IChsaXN0VHlwZSA9PT0gJ3VsJykgPyAnb2wnIDogJ3VsJztcbiAgICAgICAgICBjb3VudGVyUnhnID0gKGxpc3RUeXBlID09PSAndWwnKSA/IG9sUmd4IDogdWxSZ3g7XG5cbiAgICAgICAgICAvL3JlY3Vyc2VcbiAgICAgICAgICBwYXJzZUNMKHR4dC5zbGljZShwb3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgKz0gJ1xcblxcbjwnICsgbGlzdFR5cGUgKyBzdHlsZSArICc+XFxuJyArIHByb2Nlc3NMaXN0SXRlbXModHh0LCAhIXRyaW1UcmFpbGluZykgKyAnPC8nICsgbGlzdFR5cGUgKyAnPlxcbic7XG4gICAgICAgIH1cbiAgICAgIH0pKGxpc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3R5bGUgPSBzdHlsZVN0YXJ0TnVtYmVyKGxpc3QsIGxpc3RUeXBlKTtcbiAgICAgIHJlc3VsdCA9ICdcXG5cXG48JyArIGxpc3RUeXBlICsgc3R5bGUgKyAnPlxcbicgKyBwcm9jZXNzTGlzdEl0ZW1zKGxpc3QsICEhdHJpbVRyYWlsaW5nKSArICc8LycgKyBsaXN0VHlwZSArICc+XFxuJztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqIFN0YXJ0IG9mIGxpc3QgcGFyc2luZyAqKi9cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnbGlzdHMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIC8vIGFkZCBzZW50aW5lbCB0byBoYWNrIGFyb3VuZCBraHRtbC9zYWZhcmkgYnVnOlxuICAvLyBodHRwOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMTIzMVxuICB0ZXh0ICs9ICfCqDAnO1xuXG4gIGlmIChnbG9iYWxzLmdMaXN0TGV2ZWwpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eKCggezAsM30oWyorLV18XFxkK1suXSlbIFxcdF0rKVteXFxyXSs/KMKoMHxcXG57Mix9KD89XFxTKSg/IVsgXFx0XSooPzpbKistXXxcXGQrWy5dKVsgXFx0XSspKSkvZ20sXG4gICAgICBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbGlzdCwgbTIpIHtcbiAgICAgICAgdmFyIGxpc3RUeXBlID0gKG0yLnNlYXJjaCgvWyorLV0vZykgPiAtMSkgPyAndWwnIDogJ29sJztcbiAgICAgICAgcmV0dXJuIHBhcnNlQ29uc2VjdXRpdmVMaXN0cyhsaXN0LCBsaXN0VHlwZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXFxuXFxufF5cXG4/KSgoIHswLDN9KFsqKy1dfFxcZCtbLl0pWyBcXHRdKylbXlxccl0rPyjCqDB8XFxuezIsfSg/PVxcUykoPyFbIFxcdF0qKD86WyorLV18XFxkK1suXSlbIFxcdF0rKSkpL2dtLFxuICAgICAgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xLCBsaXN0LCBtMykge1xuICAgICAgICB2YXIgbGlzdFR5cGUgPSAobTMuc2VhcmNoKC9bKistXS9nKSA+IC0xKSA/ICd1bCcgOiAnb2wnO1xuICAgICAgICByZXR1cm4gcGFyc2VDb25zZWN1dGl2ZUxpc3RzKGxpc3QsIGxpc3RUeXBlLCBmYWxzZSk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIC8vIHN0cmlwIHNlbnRpbmVsXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoMC8sICcnKTtcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnbGlzdHMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIFBhcnNlIG1ldGFkYXRhIGF0IHRoZSB0b3Agb2YgdGhlIGRvY3VtZW50XG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignbWV0YWRhdGEnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCFvcHRpb25zLm1ldGFkYXRhKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdtZXRhZGF0YS5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICBmdW5jdGlvbiBwYXJzZU1ldGFkYXRhQ29udGVudHMgKGNvbnRlbnQpIHtcbiAgICAvLyByYXcgaXMgcmF3IHNvIGl0J3Mgbm90IGNoYW5nZWQgaW4gYW55IHdheVxuICAgIGdsb2JhbHMubWV0YWRhdGEucmF3ID0gY29udGVudDtcblxuICAgIC8vIGVzY2FwZSBjaGFycyBmb3JiaWRkZW4gaW4gaHRtbCBhdHRyaWJ1dGVzXG4gICAgLy8gZG91YmxlIHF1b3Rlc1xuICAgIGNvbnRlbnQgPSBjb250ZW50XG4gICAgICAvLyBhbXBlcnNhbmQgZmlyc3RcbiAgICAgIC5yZXBsYWNlKC8mL2csICcmYW1wOycpXG4gICAgICAvLyBkb3VibGUgcXVvdGVzXG4gICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xuXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvXFxuIHs0fS9nLCAnICcpO1xuICAgIGNvbnRlbnQucmVwbGFjZSgvXihbXFxTIF0rKTogKyhbXFxzXFxTXSs/KSQvZ20sIGZ1bmN0aW9uICh3bSwga2V5LCB2YWx1ZSkge1xuICAgICAgZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWRba2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICB9XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxccyrCq8KrwqsrKFxcUyo/KVxcbihbXFxzXFxTXSs/KVxcbsK7wrvCuytcXG4vLCBmdW5jdGlvbiAod2hvbGVtYXRjaCwgZm9ybWF0LCBjb250ZW50KSB7XG4gICAgcGFyc2VNZXRhZGF0YUNvbnRlbnRzKGNvbnRlbnQpO1xuICAgIHJldHVybiAnwqhNJztcbiAgfSk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxccyotLS0rKFxcUyo/KVxcbihbXFxzXFxTXSs/KVxcbi0tLStcXG4vLCBmdW5jdGlvbiAod2hvbGVtYXRjaCwgZm9ybWF0LCBjb250ZW50KSB7XG4gICAgaWYgKGZvcm1hdCkge1xuICAgICAgZ2xvYmFscy5tZXRhZGF0YS5mb3JtYXQgPSBmb3JtYXQ7XG4gICAgfVxuICAgIHBhcnNlTWV0YWRhdGFDb250ZW50cyhjb250ZW50KTtcbiAgICByZXR1cm4gJ8KoTSc7XG4gIH0pO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoTS9nLCAnJyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnbWV0YWRhdGEuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIFJlbW92ZSBvbmUgbGV2ZWwgb2YgbGluZS1sZWFkaW5nIHRhYnMgb3Igc3BhY2VzXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignb3V0ZGVudCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnb3V0ZGVudC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBhdHRhY2tsYWI6IGhhY2sgYXJvdW5kIEtvbnF1ZXJvciAzLjUuNCBidWc6XG4gIC8vIFwiLS0tLS0tLS0tLWJ1Z1wiLnJlcGxhY2UoL14tL2csXCJcIikgPT0gXCJidWdcIlxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eKFxcdHxbIF17MSw0fSkvZ20sICfCqDAnKTsgLy8gYXR0YWNrbGFiOiBnX3RhYl93aWR0aFxuXG4gIC8vIGF0dGFja2xhYjogY2xlYW4gdXAgaGFja1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqDAvZywgJycpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ291dGRlbnQuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcigncGFyYWdyYXBocycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdwYXJhZ3JhcGhzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAvLyBTdHJpcCBsZWFkaW5nIGFuZCB0cmFpbGluZyBsaW5lczpcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxcbisvZywgJycpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7XG5cbiAgdmFyIGdyYWZzID0gdGV4dC5zcGxpdCgvXFxuezIsfS9nKSxcbiAgICAgIGdyYWZzT3V0ID0gW10sXG4gICAgICBlbmQgPSBncmFmcy5sZW5ndGg7IC8vIFdyYXAgPHA+IHRhZ3NcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgdmFyIHN0ciA9IGdyYWZzW2ldO1xuICAgIC8vIGlmIHRoaXMgaXMgYW4gSFRNTCBtYXJrZXIsIGNvcHkgaXRcbiAgICBpZiAoc3RyLnNlYXJjaCgvwqgoS3xHKShcXGQrKVxcMS9nKSA+PSAwKSB7XG4gICAgICBncmFmc091dC5wdXNoKHN0cik7XG5cbiAgICAvLyB0ZXN0IGZvciBwcmVzZW5jZSBvZiBjaGFyYWN0ZXJzIHRvIHByZXZlbnQgZW1wdHkgbGluZXMgYmVpbmcgcGFyc2VkXG4gICAgLy8gYXMgcGFyYWdyYXBocyAocmVzdWx0aW5nIGluIHVuZGVzaXJlZCBleHRyYSBlbXB0eSBwYXJhZ3JhcGhzKVxuICAgIH0gZWxzZSBpZiAoc3RyLnNlYXJjaCgvXFxTLykgPj0gMCkge1xuICAgICAgc3RyID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnKShzdHIsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL14oWyBcXHRdKikvZywgJzxwPicpO1xuICAgICAgc3RyICs9ICc8L3A+JztcbiAgICAgIGdyYWZzT3V0LnB1c2goc3RyKTtcbiAgICB9XG4gIH1cblxuICAvKiogVW5oYXNoaWZ5IEhUTUwgYmxvY2tzICovXG4gIGVuZCA9IGdyYWZzT3V0Lmxlbmd0aDtcbiAgZm9yIChpID0gMDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgdmFyIGJsb2NrVGV4dCA9ICcnLFxuICAgICAgICBncmFmc091dEl0ID0gZ3JhZnNPdXRbaV0sXG4gICAgICAgIGNvZGVGbGFnID0gZmFsc2U7XG4gICAgLy8gaWYgdGhpcyBpcyBhIG1hcmtlciBmb3IgYW4gaHRtbCBibG9jay4uLlxuICAgIC8vIHVzZSBSZWdFeHAudGVzdCBpbnN0ZWFkIG9mIHN0cmluZy5zZWFyY2ggYmVjYXVzZSBvZiBRTUwgYnVnXG4gICAgd2hpbGUgKC/CqChLfEcpKFxcZCspXFwxLy50ZXN0KGdyYWZzT3V0SXQpKSB7XG4gICAgICB2YXIgZGVsaW0gPSBSZWdFeHAuJDEsXG4gICAgICAgICAgbnVtICAgPSBSZWdFeHAuJDI7XG5cbiAgICAgIGlmIChkZWxpbSA9PT0gJ0snKSB7XG4gICAgICAgIGJsb2NrVGV4dCA9IGdsb2JhbHMuZ0h0bWxCbG9ja3NbbnVtXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gY2hlY2sgaWYgZ2hCbG9jayBpcyBhIGZhbHNlIHBvc2l0aXZlXG4gICAgICAgIGlmIChjb2RlRmxhZykge1xuICAgICAgICAgIC8vIHVzZSBlbmNvZGVkIHZlcnNpb24gb2YgYWxsIHRleHRcbiAgICAgICAgICBibG9ja1RleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnKShnbG9iYWxzLmdoQ29kZUJsb2Nrc1tudW1dLnRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJsb2NrVGV4dCA9IGdsb2JhbHMuZ2hDb2RlQmxvY2tzW251bV0uY29kZWJsb2NrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBibG9ja1RleHQgPSBibG9ja1RleHQucmVwbGFjZSgvXFwkL2csICckJCQkJyk7IC8vIEVzY2FwZSBhbnkgZG9sbGFyIHNpZ25zXG5cbiAgICAgIGdyYWZzT3V0SXQgPSBncmFmc091dEl0LnJlcGxhY2UoLyhcXG5cXG4pP8KoKEt8RylcXGQrXFwyKFxcblxcbik/LywgYmxvY2tUZXh0KTtcbiAgICAgIC8vIENoZWNrIGlmIGdyYWZzT3V0SXQgaXMgYSBwcmUtPmNvZGVcbiAgICAgIGlmICgvXjxwcmVcXGJbXj5dKj5cXHMqPGNvZGVcXGJbXj5dKj4vLnRlc3QoZ3JhZnNPdXRJdCkpIHtcbiAgICAgICAgY29kZUZsYWcgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBncmFmc091dFtpXSA9IGdyYWZzT3V0SXQ7XG4gIH1cbiAgdGV4dCA9IGdyYWZzT3V0LmpvaW4oJ1xcbicpO1xuICAvLyBTdHJpcCBsZWFkaW5nIGFuZCB0cmFpbGluZyBsaW5lczpcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxcbisvZywgJycpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7XG4gIHJldHVybiBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3BhcmFncmFwaHMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbn0pO1xuIiwgIi8qKlxuICogUnVuIGV4dGVuc2lvblxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3J1bkV4dGVuc2lvbicsIGZ1bmN0aW9uIChleHQsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmIChleHQuZmlsdGVyKSB7XG4gICAgdGV4dCA9IGV4dC5maWx0ZXIodGV4dCwgZ2xvYmFscy5jb252ZXJ0ZXIsIG9wdGlvbnMpO1xuXG4gIH0gZWxzZSBpZiAoZXh0LnJlZ2V4KSB7XG4gICAgLy8gVE9ETyByZW1vdmUgdGhpcyB3aGVuIG9sZCBleHRlbnNpb24gbG9hZGluZyBtZWNoYW5pc20gaXMgZGVwcmVjYXRlZFxuICAgIHZhciByZSA9IGV4dC5yZWdleDtcbiAgICBpZiAoIShyZSBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICAgIHJlID0gbmV3IFJlZ0V4cChyZSwgJ2cnKTtcbiAgICB9XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZShyZSwgZXh0LnJlcGxhY2UpO1xuICB9XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIFRoZXNlIGFyZSBhbGwgdGhlIHRyYW5zZm9ybWF0aW9ucyB0aGF0IG9jY3VyICp3aXRoaW4qIGJsb2NrLWxldmVsXG4gKiB0YWdzIGxpa2UgcGFyYWdyYXBocywgaGVhZGVycywgYW5kIGxpc3QgaXRlbXMuXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3NwYW5HYW11dC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignY29kZVNwYW5zJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VzY2FwZVNwZWNpYWxDaGFyc1dpdGhpblRhZ0F0dHJpYnV0ZXMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQmFja3NsYXNoRXNjYXBlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIFByb2Nlc3MgYW5jaG9yIGFuZCBpbWFnZSB0YWdzLiBJbWFnZXMgbXVzdCBjb21lIGZpcnN0LFxuICAvLyBiZWNhdXNlICFbZm9vXVtmXSBsb29rcyBsaWtlIGFuIGFuY2hvci5cbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaW1hZ2VzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2FuY2hvcnMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBNYWtlIGxpbmtzIG91dCBvZiB0aGluZ3MgbGlrZSBgPGh0dHA6Ly9leGFtcGxlLmNvbS8+YFxuICAvLyBNdXN0IGNvbWUgYWZ0ZXIgYW5jaG9ycywgYmVjYXVzZSB5b3UgY2FuIHVzZSA8IGFuZCA+XG4gIC8vIGRlbGltaXRlcnMgaW4gaW5saW5lIGxpbmtzIGxpa2UgW3RoaXNdKDx1cmw+KS5cbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignYXV0b0xpbmtzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NpbXBsaWZpZWRBdXRvTGlua3MnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZW1vamknKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigndW5kZXJsaW5lJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2l0YWxpY3NBbmRCb2xkJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3N0cmlrZXRocm91Z2gnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZWxsaXBzaXMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyB3ZSBuZWVkIHRvIGhhc2ggSFRNTCB0YWdzIGluc2lkZSBzcGFuc1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTFNwYW5zJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gbm93IHdlIGVuY29kZSBhbXBzIGFuZCBhbmdsZXNcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQW1wc0FuZEFuZ2xlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIERvIGhhcmQgYnJlYWtzXG4gIGlmIChvcHRpb25zLnNpbXBsZUxpbmVCcmVha3MpIHtcbiAgICAvLyBHRk0gc3R5bGUgaGFyZCBicmVha3NcbiAgICAvLyBvbmx5IGFkZCBsaW5lIGJyZWFrcyBpZiB0aGUgdGV4dCBkb2VzIG5vdCBjb250YWluIGEgYmxvY2sgKHNwZWNpYWwgY2FzZSBmb3IgbGlzdHMpXG4gICAgaWYgKCEvXFxuXFxuwqhLLy50ZXN0KHRleHQpKSB7XG4gICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXG4rL2csICc8YnIgLz5cXG4nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVmFuaWxsYSBoYXJkIGJyZWFrc1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyAgK1xcbi9nLCAnPGJyIC8+XFxuJyk7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdzcGFuR2FtdXQuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ3N0cmlrZXRocm91Z2gnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gcGFyc2VJbnNpZGUgKHR4dCkge1xuICAgIGlmIChvcHRpb25zLnNpbXBsaWZpZWRBdXRvTGluaykge1xuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzaW1wbGlmaWVkQXV0b0xpbmtzJykodHh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB9XG4gICAgcmV0dXJuICc8ZGVsPicgKyB0eHQgKyAnPC9kZWw+JztcbiAgfVxuXG4gIGlmIChvcHRpb25zLnN0cmlrZXRocm91Z2gpIHtcbiAgICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdzdHJpa2V0aHJvdWdoLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyg/On4pezJ9KFtcXHNcXFNdKz8pKD86fil7Mn0vZywgZnVuY3Rpb24gKHdtLCB0eHQpIHsgcmV0dXJuIHBhcnNlSW5zaWRlKHR4dCk7IH0pO1xuICAgIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3N0cmlrZXRocm91Z2guYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgfVxuXG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAiLyoqXG4gKiBTdHJpcHMgbGluayBkZWZpbml0aW9ucyBmcm9tIHRleHQsIHN0b3JlcyB0aGUgVVJMcyBhbmQgdGl0bGVzIGluXG4gKiBoYXNoIHJlZmVyZW5jZXMuXG4gKiBMaW5rIGRlZnMgYXJlIGluIHRoZSBmb3JtOiBeW2lkXTogdXJsIFwib3B0aW9uYWwgdGl0bGVcIlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3N0cmlwTGlua0RlZmluaXRpb25zJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciByZWdleCAgICAgICA9IC9eIHswLDN9XFxbKFteXFxdXSspXTpbIFxcdF0qXFxuP1sgXFx0XSo8PyhbXj5cXHNdKyk+Pyg/OiA9KFsqXFxkXStbQS1aYS16JV17MCw0fSl4KFsqXFxkXStbQS1aYS16JV17MCw0fSkpP1sgXFx0XSpcXG4/WyBcXHRdKig/OihcXG4qKVtcInwnKF0oLis/KVtcInwnKV1bIFxcdF0qKT8oPzpcXG4rfCg/PcKoMCkpL2dtLFxuICAgICAgYmFzZTY0UmVnZXggPSAvXiB7MCwzfVxcWyhbXlxcXV0rKV06WyBcXHRdKlxcbj9bIFxcdF0qPD8oZGF0YTouKz9cXC8uKz87YmFzZTY0LFtBLVphLXowLTkrLz1cXG5dKz8pPj8oPzogPShbKlxcZF0rW0EtWmEteiVdezAsNH0peChbKlxcZF0rW0EtWmEteiVdezAsNH0pKT9bIFxcdF0qXFxuP1sgXFx0XSooPzooXFxuKilbXCJ8JyhdKC4rPylbXCJ8JyldWyBcXHRdKik/KD86XFxuXFxufCg/PcKoMCl8KD89XFxuXFxbKSkvZ207XG5cbiAgLy8gYXR0YWNrbGFiOiBzZW50aW5lbCB3b3JrYXJvdW5kcyBmb3IgbGFjayBvZiBcXEEgYW5kIFxcWiwgc2FmYXJpXFxraHRtbCBidWdcbiAgdGV4dCArPSAnwqgwJztcblxuICB2YXIgcmVwbGFjZUZ1bmMgPSBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbGlua0lkLCB1cmwsIHdpZHRoLCBoZWlnaHQsIGJsYW5rTGluZXMsIHRpdGxlKSB7XG5cbiAgICAvLyBpZiB0aGVyZSBhcmVuJ3QgdHdvIGluc3RhbmNlcyBvZiBsaW5rSWQgaXQgbXVzdCBub3QgYmUgYSByZWZlcmVuY2UgbGluayBzbyBiYWNrIG91dFxuICAgIGxpbmtJZCA9IGxpbmtJZC50b0xvd2VyQ2FzZSgpO1xuICAgIGlmICh0ZXh0LnRvTG93ZXJDYXNlKCkuc3BsaXQobGlua0lkKS5sZW5ndGggLSAxIDwgMikge1xuICAgICAgcmV0dXJuIHdob2xlTWF0Y2g7XG4gICAgfVxuICAgIGlmICh1cmwubWF0Y2goL15kYXRhOi4rP1xcLy4rPztiYXNlNjQsLykpIHtcbiAgICAgIC8vIHJlbW92ZSBuZXdsaW5lc1xuICAgICAgZ2xvYmFscy5nVXJsc1tsaW5rSWRdID0gdXJsLnJlcGxhY2UoL1xccy9nLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsb2JhbHMuZ1VybHNbbGlua0lkXSA9IHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQW1wc0FuZEFuZ2xlcycpKHVybCwgb3B0aW9ucywgZ2xvYmFscyk7ICAvLyBMaW5rIElEcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuICAgIH1cblxuICAgIGlmIChibGFua0xpbmVzKSB7XG4gICAgICAvLyBPb3BzLCBmb3VuZCBibGFuayBsaW5lcywgc28gaXQncyBub3QgYSB0aXRsZS5cbiAgICAgIC8vIFB1dCBiYWNrIHRoZSBwYXJlbnRoZXRpY2FsIHN0YXRlbWVudCB3ZSBzdG9sZS5cbiAgICAgIHJldHVybiBibGFua0xpbmVzICsgdGl0bGU7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgIGdsb2JhbHMuZ1RpdGxlc1tsaW5rSWRdID0gdGl0bGUucmVwbGFjZSgvXCJ8Jy9nLCAnJnF1b3Q7Jyk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5wYXJzZUltZ0RpbWVuc2lvbnMgJiYgd2lkdGggJiYgaGVpZ2h0KSB7XG4gICAgICAgIGdsb2JhbHMuZ0RpbWVuc2lvbnNbbGlua0lkXSA9IHtcbiAgICAgICAgICB3aWR0aDogIHdpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIC8vIENvbXBsZXRlbHkgcmVtb3ZlIHRoZSBkZWZpbml0aW9uIGZyb20gdGhlIHRleHRcbiAgICByZXR1cm4gJyc7XG4gIH07XG5cbiAgLy8gZmlyc3Qgd2UgdHJ5IHRvIGZpbmQgYmFzZTY0IGxpbmsgcmVmZXJlbmNlc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGJhc2U2NFJlZ2V4LCByZXBsYWNlRnVuYyk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShyZWdleCwgcmVwbGFjZUZ1bmMpO1xuXG4gIC8vIGF0dGFja2xhYjogc3RyaXAgc2VudGluZWxcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqgwLywgJycpO1xuXG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCd0YWJsZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCFvcHRpb25zLnRhYmxlcykge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdmFyIHRhYmxlUmd4ICAgICAgID0gL14gezAsM31cXHw/LitcXHwuK1xcbiB7MCwzfVxcfD9bIFxcdF0qOj9bIFxcdF0qKD86Wy09XSl7Mix9WyBcXHRdKjo/WyBcXHRdKlxcfFsgXFx0XSo6P1sgXFx0XSooPzpbLT1dKXsyLH1bXFxzXFxTXSs/KD86XFxuXFxufMKoMCkvZ20sXG4gICAgICAvL3NpbmdlQ29sVGJsUmd4ID0gL14gezAsM31cXHwuK1xcfFxcbiB7MCwzfVxcfFsgXFx0XSo6P1sgXFx0XSooPzpbLT1dKXsyLH1bIFxcdF0qOj9bIFxcdF0qXFx8WyBcXHRdKlxcbig/OiB7MCwzfVxcfC4rXFx8XFxuKSsoPzpcXG5cXG58wqgwKS9nbTtcbiAgICAgIHNpbmdlQ29sVGJsUmd4ID0gL14gezAsM31cXHwuK1xcfFsgXFx0XSpcXG4gezAsM31cXHxbIFxcdF0qOj9bIFxcdF0qKD86Wy09XSl7Mix9WyBcXHRdKjo/WyBcXHRdKlxcfFsgXFx0XSpcXG4oIHswLDN9XFx8LitcXHxbIFxcdF0qXFxuKSooPzpcXG58wqgwKS9nbTtcblxuICBmdW5jdGlvbiBwYXJzZVN0eWxlcyAoc0xpbmUpIHtcbiAgICBpZiAoL146WyBcXHRdKi0tKiQvLnRlc3Qoc0xpbmUpKSB7XG4gICAgICByZXR1cm4gJyBzdHlsZT1cInRleHQtYWxpZ246bGVmdDtcIic7XG4gICAgfSBlbHNlIGlmICgvXi0tKlsgXFx0XSo6WyBcXHRdKiQvLnRlc3Qoc0xpbmUpKSB7XG4gICAgICByZXR1cm4gJyBzdHlsZT1cInRleHQtYWxpZ246cmlnaHQ7XCInO1xuICAgIH0gZWxzZSBpZiAoL146WyBcXHRdKi0tKlsgXFx0XSo6JC8udGVzdChzTGluZSkpIHtcbiAgICAgIHJldHVybiAnIHN0eWxlPVwidGV4dC1hbGlnbjpjZW50ZXI7XCInO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzIChoZWFkZXIsIHN0eWxlKSB7XG4gICAgdmFyIGlkID0gJyc7XG4gICAgaGVhZGVyID0gaGVhZGVyLnRyaW0oKTtcbiAgICAvLyBzdXBwb3J0IGJvdGggdGFibGVzSGVhZGVySWQgYW5kIHRhYmxlSGVhZGVySWQgZHVlIHRvIGVycm9yIGluIGRvY3VtZW50YXRpb24gc28gd2UgZG9uJ3QgYnJlYWsgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICBpZiAob3B0aW9ucy50YWJsZXNIZWFkZXJJZCB8fCBvcHRpb25zLnRhYmxlSGVhZGVySWQpIHtcbiAgICAgIGlkID0gJyBpZD1cIicgKyBoZWFkZXIucmVwbGFjZSgvIC9nLCAnXycpLnRvTG93ZXJDYXNlKCkgKyAnXCInO1xuICAgIH1cbiAgICBoZWFkZXIgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NwYW5HYW11dCcpKGhlYWRlciwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgICByZXR1cm4gJzx0aCcgKyBpZCArIHN0eWxlICsgJz4nICsgaGVhZGVyICsgJzwvdGg+XFxuJztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlQ2VsbHMgKGNlbGwsIHN0eWxlKSB7XG4gICAgdmFyIHN1YlRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NwYW5HYW11dCcpKGNlbGwsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHJldHVybiAnPHRkJyArIHN0eWxlICsgJz4nICsgc3ViVGV4dCArICc8L3RkPlxcbic7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZFRhYmxlIChoZWFkZXJzLCBjZWxscykge1xuICAgIHZhciB0YiA9ICc8dGFibGU+XFxuPHRoZWFkPlxcbjx0cj5cXG4nLFxuICAgICAgICB0YmxMZ24gPSBoZWFkZXJzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGJsTGduOyArK2kpIHtcbiAgICAgIHRiICs9IGhlYWRlcnNbaV07XG4gICAgfVxuICAgIHRiICs9ICc8L3RyPlxcbjwvdGhlYWQ+XFxuPHRib2R5Plxcbic7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY2VsbHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHRiICs9ICc8dHI+XFxuJztcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB0YmxMZ247ICsraWkpIHtcbiAgICAgICAgdGIgKz0gY2VsbHNbaV1baWldO1xuICAgICAgfVxuICAgICAgdGIgKz0gJzwvdHI+XFxuJztcbiAgICB9XG4gICAgdGIgKz0gJzwvdGJvZHk+XFxuPC90YWJsZT5cXG4nO1xuICAgIHJldHVybiB0YjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVGFibGUgKHJhd1RhYmxlKSB7XG4gICAgdmFyIGksIHRhYmxlTGluZXMgPSByYXdUYWJsZS5zcGxpdCgnXFxuJyk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGFibGVMaW5lcy5sZW5ndGg7ICsraSkge1xuICAgICAgLy8gc3RyaXAgd3JvbmcgZmlyc3QgYW5kIGxhc3QgY29sdW1uIGlmIHdyYXBwZWQgdGFibGVzIGFyZSB1c2VkXG4gICAgICBpZiAoL14gezAsM31cXHwvLnRlc3QodGFibGVMaW5lc1tpXSkpIHtcbiAgICAgICAgdGFibGVMaW5lc1tpXSA9IHRhYmxlTGluZXNbaV0ucmVwbGFjZSgvXiB7MCwzfVxcfC8sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICgvXFx8WyBcXHRdKiQvLnRlc3QodGFibGVMaW5lc1tpXSkpIHtcbiAgICAgICAgdGFibGVMaW5lc1tpXSA9IHRhYmxlTGluZXNbaV0ucmVwbGFjZSgvXFx8WyBcXHRdKiQvLCAnJyk7XG4gICAgICB9XG4gICAgICAvLyBwYXJzZSBjb2RlIHNwYW5zIGZpcnN0LCBidXQgd2Ugb25seSBzdXBwb3J0IG9uZSBsaW5lIGNvZGUgc3BhbnNcbiAgICAgIHRhYmxlTGluZXNbaV0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2NvZGVTcGFucycpKHRhYmxlTGluZXNbaV0sIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIH1cblxuICAgIHZhciByYXdIZWFkZXJzID0gdGFibGVMaW5lc1swXS5zcGxpdCgnfCcpLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gcy50cmltKCk7fSksXG4gICAgICAgIHJhd1N0eWxlcyA9IHRhYmxlTGluZXNbMV0uc3BsaXQoJ3wnKS5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMudHJpbSgpO30pLFxuICAgICAgICByYXdDZWxscyA9IFtdLFxuICAgICAgICBoZWFkZXJzID0gW10sXG4gICAgICAgIHN0eWxlcyA9IFtdLFxuICAgICAgICBjZWxscyA9IFtdO1xuXG4gICAgdGFibGVMaW5lcy5zaGlmdCgpO1xuICAgIHRhYmxlTGluZXMuc2hpZnQoKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YWJsZUxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAodGFibGVMaW5lc1tpXS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmF3Q2VsbHMucHVzaChcbiAgICAgICAgdGFibGVMaW5lc1tpXVxuICAgICAgICAgIC5zcGxpdCgnfCcpXG4gICAgICAgICAgLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIHMudHJpbSgpO1xuICAgICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChyYXdIZWFkZXJzLmxlbmd0aCA8IHJhd1N0eWxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiByYXdUYWJsZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3U3R5bGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBzdHlsZXMucHVzaChwYXJzZVN0eWxlcyhyYXdTdHlsZXNbaV0pKTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3SGVhZGVycy5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChzdHlsZXNbaV0pKSB7XG4gICAgICAgIHN0eWxlc1tpXSA9ICcnO1xuICAgICAgfVxuICAgICAgaGVhZGVycy5wdXNoKHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzW2ldLCBzdHlsZXNbaV0pKTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3Q2VsbHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBoZWFkZXJzLmxlbmd0aDsgKytpaSkge1xuICAgICAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKHJhd0NlbGxzW2ldW2lpXSkpIHtcblxuICAgICAgICB9XG4gICAgICAgIHJvdy5wdXNoKHBhcnNlQ2VsbHMocmF3Q2VsbHNbaV1baWldLCBzdHlsZXNbaWldKSk7XG4gICAgICB9XG4gICAgICBjZWxscy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1aWxkVGFibGUoaGVhZGVycywgY2VsbHMpO1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndGFibGVzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIGZpbmQgZXNjYXBlZCBwaXBlIGNoYXJhY3RlcnNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxcXChcXHwpL2csIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuXG4gIC8vIHBhcnNlIG11bHRpIGNvbHVtbiB0YWJsZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSh0YWJsZVJneCwgcGFyc2VUYWJsZSk7XG5cbiAgLy8gcGFyc2Ugb25lIGNvbHVtbiB0YWJsZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZShzaW5nZUNvbFRibFJneCwgcGFyc2VUYWJsZSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndGFibGVzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ3VuZGVybGluZScsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIW9wdGlvbnMudW5kZXJsaW5lKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCd1bmRlcmxpbmUuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgaWYgKG9wdGlvbnMubGl0ZXJhbE1pZFdvcmRVbmRlcnNjb3Jlcykge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcYl9fXyhcXFNbXFxzXFxTXSo/KV9fX1xcYi9nLCBmdW5jdGlvbiAod20sIHR4dCkge1xuICAgICAgcmV0dXJuICc8dT4nICsgdHh0ICsgJzwvdT4nO1xuICAgIH0pO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcYl9fKFxcU1tcXHNcXFNdKj8pX19cXGIvZywgZnVuY3Rpb24gKHdtLCB0eHQpIHtcbiAgICAgIHJldHVybiAnPHU+JyArIHR4dCArICc8L3U+JztcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9fX18oXFxTW1xcc1xcU10qPylfX18vZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/ICc8dT4nICsgbSArICc8L3U+JyA6IHdtO1xuICAgIH0pO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL19fKFxcU1tcXHNcXFNdKj8pX18vZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/ICc8dT4nICsgbSArICc8L3U+JyA6IHdtO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gZXNjYXBlIHJlbWFpbmluZyB1bmRlcnNjb3JlcyB0byBwcmV2ZW50IHRoZW0gYmVpbmcgcGFyc2VkIGJ5IGl0YWxpYyBhbmQgYm9sZFxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXykvZywgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndW5kZXJsaW5lLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICIvKipcbiAqIFN3YXAgYmFjayBpbiBhbGwgdGhlIHNwZWNpYWwgY2hhcmFjdGVycyB3ZSd2ZSBoaWRkZW4uXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcigndW5lc2NhcGVTcGVjaWFsQ2hhcnMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3VuZXNjYXBlU3BlY2lhbENoYXJzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoRShcXGQrKUUvZywgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xKSB7XG4gICAgdmFyIGNoYXJDb2RlVG9SZXBsYWNlID0gcGFyc2VJbnQobTEpO1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlVG9SZXBsYWNlKTtcbiAgfSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndW5lc2NhcGVTcGVjaWFsQ2hhcnMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ibG9ja3F1b3RlJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGlubmVyVHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzKTtcblxuICAgICAgaWYgKGlubmVyVHh0ID09PSAnJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHR4dCArPSBpbm5lclR4dDtcbiAgICB9XG4gIH1cbiAgLy8gY2xlYW51cFxuICB0eHQgPSB0eHQudHJpbSgpO1xuICB0eHQgPSAnPiAnICsgdHh0LnNwbGl0KCdcXG4nKS5qb2luKCdcXG4+ICcpO1xuICByZXR1cm4gdHh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uY29kZUJsb2NrJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBsYW5nID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2xhbmd1YWdlJyksXG4gICAgICBudW0gID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3ByZWNvZGVudW0nKTtcbiAgcmV0dXJuICdgYGAnICsgbGFuZyArICdcXG4nICsgZ2xvYmFscy5wcmVMaXN0W251bV0gKyAnXFxuYGBgJztcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmNvZGVTcGFuJywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHJldHVybiAnYCcgKyBub2RlLmlubmVySFRNTCArICdgJztcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmVtcGhhc2lzJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdHh0ICs9ICcqJztcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXMsXG4gICAgICAgIGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7ICsraSkge1xuICAgICAgdHh0ICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShjaGlsZHJlbltpXSwgZ2xvYmFscyk7XG4gICAgfVxuICAgIHR4dCArPSAnKic7XG4gIH1cbiAgcmV0dXJuIHR4dDtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmhlYWRlcicsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzLCBoZWFkZXJMZXZlbCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGhlYWRlck1hcmsgPSBuZXcgQXJyYXkoaGVhZGVyTGV2ZWwgKyAxKS5qb2luKCcjJyksXG4gICAgICB0eHQgPSAnJztcblxuICBpZiAobm9kZS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICB0eHQgPSBoZWFkZXJNYXJrICsgJyAnO1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGROb2RlcyxcbiAgICAgICAgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyArK2kpIHtcbiAgICAgIHR4dCArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykoY2hpbGRyZW5baV0sIGdsb2JhbHMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uaHInLCBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICByZXR1cm4gJy0tLSc7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5pbWFnZScsIGZ1bmN0aW9uIChub2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdHh0ID0gJyc7XG4gIGlmIChub2RlLmhhc0F0dHJpYnV0ZSgnc3JjJykpIHtcbiAgICB0eHQgKz0gJyFbJyArIG5vZGUuZ2V0QXR0cmlidXRlKCdhbHQnKSArICddKCc7XG4gICAgdHh0ICs9ICc8JyArIG5vZGUuZ2V0QXR0cmlidXRlKCdzcmMnKSArICc+JztcbiAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoJ3dpZHRoJykgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoJ2hlaWdodCcpKSB7XG4gICAgICB0eHQgKz0gJyA9JyArIG5vZGUuZ2V0QXR0cmlidXRlKCd3aWR0aCcpICsgJ3gnICsgbm9kZS5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICAgIH1cblxuICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZSgndGl0bGUnKSkge1xuICAgICAgdHh0ICs9ICcgXCInICsgbm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgKyAnXCInO1xuICAgIH1cbiAgICB0eHQgKz0gJyknO1xuICB9XG4gIHJldHVybiB0eHQ7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5saW5rcycsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdHh0ID0gJyc7XG4gIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSAmJiBub2RlLmhhc0F0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICB0eHQgPSAnWyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgKytpKSB7XG4gICAgICB0eHQgKz0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzKTtcbiAgICB9XG4gICAgdHh0ICs9ICddKCc7XG4gICAgdHh0ICs9ICc8JyArIG5vZGUuZ2V0QXR0cmlidXRlKCdocmVmJykgKyAnPic7XG4gICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKCd0aXRsZScpKSB7XG4gICAgICB0eHQgKz0gJyBcIicgKyBub2RlLmdldEF0dHJpYnV0ZSgndGl0bGUnKSArICdcIic7XG4gICAgfVxuICAgIHR4dCArPSAnKSc7XG4gIH1cbiAgcmV0dXJuIHR4dDtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmxpc3QnLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscywgdHlwZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9ICcnO1xuICBpZiAoIW5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHZhciBsaXN0SXRlbXMgICAgICAgPSBub2RlLmNoaWxkTm9kZXMsXG4gICAgICBsaXN0SXRlbXNMZW5naHQgPSBsaXN0SXRlbXMubGVuZ3RoLFxuICAgICAgbGlzdE51bSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdzdGFydCcpIHx8IDE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0SXRlbXNMZW5naHQ7ICsraSkge1xuICAgIGlmICh0eXBlb2YgbGlzdEl0ZW1zW2ldLnRhZ05hbWUgPT09ICd1bmRlZmluZWQnIHx8IGxpc3RJdGVtc1tpXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdsaScpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGRlZmluZSB0aGUgYnVsbGV0IHRvIHVzZSBpbiBsaXN0XG4gICAgdmFyIGJ1bGxldCA9ICcnO1xuICAgIGlmICh0eXBlID09PSAnb2wnKSB7XG4gICAgICBidWxsZXQgPSBsaXN0TnVtLnRvU3RyaW5nKCkgKyAnLiAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWxsZXQgPSAnLSAnO1xuICAgIH1cblxuICAgIC8vIHBhcnNlIGxpc3QgaXRlbVxuICAgIHR4dCArPSBidWxsZXQgKyBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5saXN0SXRlbScpKGxpc3RJdGVtc1tpXSwgZ2xvYmFscyk7XG4gICAgKytsaXN0TnVtO1xuICB9XG5cbiAgLy8gYWRkIGNvbW1lbnQgYXQgdGhlIGVuZCB0byBwcmV2ZW50IGNvbnNlY3V0aXZlIGxpc3RzIHRvIGJlIHBhcnNlZCBhcyBvbmVcbiAgdHh0ICs9ICdcXG48IS0tIC0tPlxcbic7XG4gIHJldHVybiB0eHQudHJpbSgpO1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubGlzdEl0ZW0nLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGxpc3RJdGVtVHh0ID0gJyc7XG5cbiAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgY2hpbGRyZW5MZW5naHQgPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmdodDsgKytpKSB7XG4gICAgbGlzdEl0ZW1UeHQgKz0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzKTtcbiAgfVxuICAvLyBpZiBpdCdzIG9ubHkgb25lIGxpbmVyLCB3ZSBuZWVkIHRvIGFkZCBhIG5ld2xpbmUgYXQgdGhlIGVuZFxuICBpZiAoIS9cXG4kLy50ZXN0KGxpc3RJdGVtVHh0KSkge1xuICAgIGxpc3RJdGVtVHh0ICs9ICdcXG4nO1xuICB9IGVsc2Uge1xuICAgIC8vIGl0J3MgbXVsdGlwYXJhZ3JhcGgsIHNvIHdlIG5lZWQgdG8gaW5kZW50XG4gICAgbGlzdEl0ZW1UeHQgPSBsaXN0SXRlbVR4dFxuICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgLmpvaW4oJ1xcbiAgICAnKVxuICAgICAgLnJlcGxhY2UoL14gezR9JC9nbSwgJycpXG4gICAgICAucmVwbGFjZSgvXFxuXFxuKy9nLCAnXFxuXFxuJyk7XG4gIH1cblxuICByZXR1cm4gbGlzdEl0ZW1UeHQ7XG59KTtcbiIsICJcblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzLCBzcGFuc09ubHkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHNwYW5zT25seSA9IHNwYW5zT25seSB8fCBmYWxzZTtcblxuICB2YXIgdHh0ID0gJyc7XG5cbiAgLy8gZWRnZSBjYXNlIG9mIHRleHQgd2l0aG91dCB3cmFwcGVyIHBhcmFncmFwaFxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi50eHQnKShub2RlLCBnbG9iYWxzKTtcbiAgfVxuXG4gIC8vIEhUTUwgY29tbWVudFxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCkge1xuICAgIHJldHVybiAnPCEtLScgKyBub2RlLmRhdGEgKyAnLS0+XFxuXFxuJztcbiAgfVxuXG4gIC8vIHByb2Nlc3Mgb25seSBub2RlIGVsZW1lbnRzXG4gIGlmIChub2RlLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIHRhZ05hbWUgPSBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcblxuICBzd2l0Y2ggKHRhZ05hbWUpIHtcblxuICAgIC8vXG4gICAgLy8gQkxPQ0tTXG4gICAgLy9cbiAgICBjYXNlICdoMSc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInKShub2RlLCBnbG9iYWxzLCAxKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdoMic6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInKShub2RlLCBnbG9iYWxzLCAyKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdoMyc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInKShub2RlLCBnbG9iYWxzLCAzKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdoNCc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInKShub2RlLCBnbG9iYWxzLCA0KSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdoNSc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInKShub2RlLCBnbG9iYWxzLCA1KSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdoNic6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInKShub2RlLCBnbG9iYWxzLCA2KSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3AnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ucGFyYWdyYXBoJykobm9kZSwgZ2xvYmFscykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdibG9ja3F1b3RlJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmJsb2NrcXVvdGUnKShub2RlLCBnbG9iYWxzKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2hyJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmhyJykobm9kZSwgZ2xvYmFscykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdvbCc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5saXN0Jykobm9kZSwgZ2xvYmFscywgJ29sJykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd1bCc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5saXN0Jykobm9kZSwgZ2xvYmFscywgJ3VsJykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwcmVjb2RlJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmNvZGVCbG9jaycpKG5vZGUsIGdsb2JhbHMpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncHJlJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnByZScpKG5vZGUsIGdsb2JhbHMpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndGFibGUnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24udGFibGUnKShub2RlLCBnbG9iYWxzKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcblxuICAgIC8vXG4gICAgLy8gU1BBTlNcbiAgICAvL1xuICAgIGNhc2UgJ2NvZGUnOlxuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uY29kZVNwYW4nKShub2RlLCBnbG9iYWxzKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnZW0nOlxuICAgIGNhc2UgJ2knOlxuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uZW1waGFzaXMnKShub2RlLCBnbG9iYWxzKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnc3Ryb25nJzpcbiAgICBjYXNlICdiJzpcbiAgICAgIHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnN0cm9uZycpKG5vZGUsIGdsb2JhbHMpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdkZWwnOlxuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uc3RyaWtldGhyb3VnaCcpKG5vZGUsIGdsb2JhbHMpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdhJzpcbiAgICAgIHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmxpbmtzJykobm9kZSwgZ2xvYmFscyk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2ltZyc6XG4gICAgICB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5pbWFnZScpKG5vZGUsIGdsb2JhbHMpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdHh0ID0gbm9kZS5vdXRlckhUTUwgKyAnXFxuXFxuJztcbiAgfVxuXG4gIC8vIGNvbW1vbiBub3JtYWxpemF0aW9uXG4gIC8vIFRPRE8gZXZlbnR1YWxseVxuXG4gIHJldHVybiB0eHQ7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5wYXJhZ3JhcGgnLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9ICcnO1xuICBpZiAobm9kZS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXMsXG4gICAgICAgIGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7ICsraSkge1xuICAgICAgdHh0ICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShjaGlsZHJlbltpXSwgZ2xvYmFscyk7XG4gICAgfVxuICB9XG5cbiAgLy8gc29tZSB0ZXh0IG5vcm1hbGl6YXRpb25cbiAgdHh0ID0gdHh0LnRyaW0oKTtcblxuICByZXR1cm4gdHh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ucHJlJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBudW0gID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3ByZW51bScpO1xuICByZXR1cm4gJzxwcmU+JyArIGdsb2JhbHMucHJlTGlzdFtudW1dICsgJzwvcHJlPic7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5zdHJpa2V0aHJvdWdoJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdHh0ICs9ICd+fic7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyArK2kpIHtcbiAgICAgIHR4dCArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykoY2hpbGRyZW5baV0sIGdsb2JhbHMpO1xuICAgIH1cbiAgICB0eHQgKz0gJ35+JztcbiAgfVxuICByZXR1cm4gdHh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uc3Ryb25nJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdHh0ICs9ICcqKic7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyArK2kpIHtcbiAgICAgIHR4dCArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykoY2hpbGRyZW5baV0sIGdsb2JhbHMpO1xuICAgIH1cbiAgICB0eHQgKz0gJyoqJztcbiAgfVxuICByZXR1cm4gdHh0O1xufSk7XG4iLCAic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24udGFibGUnLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9ICcnLFxuICAgICAgdGFibGVBcnJheSA9IFtbXSwgW11dLFxuICAgICAgaGVhZGluZ3MgICA9IG5vZGUucXVlcnlTZWxlY3RvckFsbCgndGhlYWQ+dHI+dGgnKSxcbiAgICAgIHJvd3MgICAgICAgPSBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rib2R5PnRyJyksXG4gICAgICBpLCBpaTtcbiAgZm9yIChpID0gMDsgaSA8IGhlYWRpbmdzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGhlYWRDb250ZW50ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24udGFibGVDZWxsJykoaGVhZGluZ3NbaV0sIGdsb2JhbHMpLFxuICAgICAgICBhbGxpZ24gPSAnLS0tJztcblxuICAgIGlmIChoZWFkaW5nc1tpXS5oYXNBdHRyaWJ1dGUoJ3N0eWxlJykpIHtcbiAgICAgIHZhciBzdHlsZSA9IGhlYWRpbmdzW2ldLmdldEF0dHJpYnV0ZSgnc3R5bGUnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJyk7XG4gICAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICAgIGNhc2UgJ3RleHQtYWxpZ246bGVmdDsnOlxuICAgICAgICAgIGFsbGlnbiA9ICc6LS0tJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndGV4dC1hbGlnbjpyaWdodDsnOlxuICAgICAgICAgIGFsbGlnbiA9ICctLS06JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndGV4dC1hbGlnbjpjZW50ZXI7JzpcbiAgICAgICAgICBhbGxpZ24gPSAnOi0tLTonO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0YWJsZUFycmF5WzBdW2ldID0gaGVhZENvbnRlbnQudHJpbSgpO1xuICAgIHRhYmxlQXJyYXlbMV1baV0gPSBhbGxpZ247XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7ICsraSkge1xuICAgIHZhciByID0gdGFibGVBcnJheS5wdXNoKFtdKSAtIDEsXG4gICAgICAgIGNvbHMgPSByb3dzW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZCcpO1xuXG4gICAgZm9yIChpaSA9IDA7IGlpIDwgaGVhZGluZ3MubGVuZ3RoOyArK2lpKSB7XG4gICAgICB2YXIgY2VsbENvbnRlbnQgPSAnICc7XG4gICAgICBpZiAodHlwZW9mIGNvbHNbaWldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjZWxsQ29udGVudCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnRhYmxlQ2VsbCcpKGNvbHNbaWldLCBnbG9iYWxzKTtcbiAgICAgIH1cbiAgICAgIHRhYmxlQXJyYXlbcl0ucHVzaChjZWxsQ29udGVudCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNlbGxTcGFjZXNDb3VudCA9IDM7XG4gIGZvciAoaSA9IDA7IGkgPCB0YWJsZUFycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgZm9yIChpaSA9IDA7IGlpIDwgdGFibGVBcnJheVtpXS5sZW5ndGg7ICsraWkpIHtcbiAgICAgIHZhciBzdHJMZW4gPSB0YWJsZUFycmF5W2ldW2lpXS5sZW5ndGg7XG4gICAgICBpZiAoc3RyTGVuID4gY2VsbFNwYWNlc0NvdW50KSB7XG4gICAgICAgIGNlbGxTcGFjZXNDb3VudCA9IHN0ckxlbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgdGFibGVBcnJheS5sZW5ndGg7ICsraSkge1xuICAgIGZvciAoaWkgPSAwOyBpaSA8IHRhYmxlQXJyYXlbaV0ubGVuZ3RoOyArK2lpKSB7XG4gICAgICBpZiAoaSA9PT0gMSkge1xuICAgICAgICBpZiAodGFibGVBcnJheVtpXVtpaV0uc2xpY2UoLTEpID09PSAnOicpIHtcbiAgICAgICAgICB0YWJsZUFycmF5W2ldW2lpXSA9IHNob3dkb3duLmhlbHBlci5wYWRFbmQodGFibGVBcnJheVtpXVtpaV0uc2xpY2UoLTEpLCBjZWxsU3BhY2VzQ291bnQgLSAxLCAnLScpICsgJzonO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhYmxlQXJyYXlbaV1baWldID0gc2hvd2Rvd24uaGVscGVyLnBhZEVuZCh0YWJsZUFycmF5W2ldW2lpXSwgY2VsbFNwYWNlc0NvdW50LCAnLScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YWJsZUFycmF5W2ldW2lpXSA9IHNob3dkb3duLmhlbHBlci5wYWRFbmQodGFibGVBcnJheVtpXVtpaV0sIGNlbGxTcGFjZXNDb3VudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHR4dCArPSAnfCAnICsgdGFibGVBcnJheVtpXS5qb2luKCcgfCAnKSArICcgfFxcbic7XG4gIH1cblxuICByZXR1cm4gdHh0LnRyaW0oKTtcbn0pO1xuIiwgInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnRhYmxlQ2VsbCcsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdHh0ID0gJyc7XG4gIGlmICghbm9kZS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgKytpKSB7XG4gICAgdHh0ICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShjaGlsZHJlbltpXSwgZ2xvYmFscywgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIHR4dC50cmltKCk7XG59KTtcbiIsICJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi50eHQnLCBmdW5jdGlvbiAobm9kZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9IG5vZGUubm9kZVZhbHVlO1xuXG4gIC8vIG11bHRpcGxlIHNwYWNlcyBhcmUgY29sbGFwc2VkXG4gIHR4dCA9IHR4dC5yZXBsYWNlKC8gKy9nLCAnICcpO1xuXG4gIC8vIHJlcGxhY2UgdGhlIGN1c3RvbSDCqE5CU1A7IHdpdGggYSBzcGFjZVxuICB0eHQgPSB0eHQucmVwbGFjZSgvwqhOQlNQOy9nLCAnICcpO1xuXG4gIC8vIFwiLCA8LCA+IGFuZCAmIHNob3VsZCByZXBsYWNlIGVzY2FwZWQgaHRtbCBlbnRpdGllc1xuICB0eHQgPSBzaG93ZG93bi5oZWxwZXIudW5lc2NhcGVIVE1MRW50aXRpZXModHh0KTtcblxuICAvLyBlc2NhcGUgbWFya2Rvd24gbWFnaWMgY2hhcmFjdGVyc1xuICAvLyBlbXBoYXNpcywgc3Ryb25nIGFuZCBzdHJpa2V0aHJvdWdoIC0gY2FuIGFwcGVhciBldmVyeXdoZXJlXG4gIC8vIHdlIGFsc28gZXNjYXBlIHBpcGUgKHwpIGJlY2F1c2Ugb2YgdGFibGVzXG4gIC8vIGFuZCBlc2NhcGUgYCBiZWNhdXNlIG9mIGNvZGUgYmxvY2tzIGFuZCBzcGFuc1xuICB0eHQgPSB0eHQucmVwbGFjZSgvKFsqX358YF0pL2csICdcXFxcJDEnKTtcblxuICAvLyBlc2NhcGUgPiBiZWNhdXNlIG9mIGJsb2NrcXVvdGVzXG4gIHR4dCA9IHR4dC5yZXBsYWNlKC9eKFxccyopPi9nLCAnXFxcXCQxPicpO1xuXG4gIC8vIGhhc2ggY2hhcmFjdGVyLCBvbmx5IHRyb3VibGVzb21lIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBsaW5lIGJlY2F1c2Ugb2YgaGVhZGVyc1xuICB0eHQgPSB0eHQucmVwbGFjZSgvXiMvZ20sICdcXFxcIycpO1xuXG4gIC8vIGhvcml6b250YWwgcnVsZXNcbiAgdHh0ID0gdHh0LnJlcGxhY2UoL14oXFxzKikoWy09XXszLH0pKFxccyopJC8sICckMVxcXFwkMiQzJyk7XG5cbiAgLy8gZG90LCBiZWNhdXNlIG9mIG9yZGVyZWQgbGlzdHMsIG9ubHkgdHJvdWJsZXNvbWUgYXQgdGhlIGJlZ2lubmluZyBvZiBhIGxpbmUgd2hlbiBwcmVjZWRlZCBieSBhbiBpbnRlZ2VyXG4gIHR4dCA9IHR4dC5yZXBsYWNlKC9eKCB7MCwzfVxcZCspXFwuL2dtLCAnJDFcXFxcLicpO1xuXG4gIC8vICssICogYW5kIC0sIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBsaW5lIGJlY29tZXMgYSBsaXN0LCBzbyB3ZSBuZWVkIHRvIGVzY2FwZSB0aGVtIGFsc28gKGFzdGVyaXNrIHdhcyBhbHJlYWR5IGVzY2FwZWQpXG4gIHR4dCA9IHR4dC5yZXBsYWNlKC9eKCB7MCwzfSkoWystXSkvZ20sICckMVxcXFwkMicpO1xuXG4gIC8vIGltYWdlcyBhbmQgbGlua3MsIF0gZm9sbG93ZWQgYnkgKCBpcyBwcm9ibGVtYXRpYywgc28gd2UgZXNjYXBlIGl0XG4gIHR4dCA9IHR4dC5yZXBsYWNlKC9dKFtcXHNdKilcXCgvZywgJ1xcXFxdJDFcXFxcKCcpO1xuXG4gIC8vIHJlZmVyZW5jZSBVUklzIG11c3QgYWxzbyBiZSBlc2NhcGVkXG4gIHR4dCA9IHR4dC5yZXBsYWNlKC9eIHswLDN9XFxbKFtcXFMgXFx0XSo/KV06L2dtLCAnXFxcXFskMV06Jyk7XG5cbiAgcmV0dXJuIHR4dDtcbn0pO1xuIiwgInZhciByb290ID0gdGhpcztcblxuLy8gQU1EIExvYWRlclxuaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4gc2hvd2Rvd247XG4gIH0pO1xuXG4vLyBDb21tb25KUy9ub2RlSlMgTG9hZGVyXG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gc2hvd2Rvd247XG5cbi8vIFJlZ3VsYXIgQnJvd3NlciBsb2FkZXJcbn0gZWxzZSB7XG4gIHJvb3Quc2hvd2Rvd24gPSBzaG93ZG93bjtcbn1cbiIsICIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIkZsb3diaXRlXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkZsb3diaXRlXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkZsb3diaXRlXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwgImV4cG9ydCB2YXIgdG9wID0gJ3RvcCc7XG5leHBvcnQgdmFyIGJvdHRvbSA9ICdib3R0b20nO1xuZXhwb3J0IHZhciByaWdodCA9ICdyaWdodCc7XG5leHBvcnQgdmFyIGxlZnQgPSAnbGVmdCc7XG5leHBvcnQgdmFyIGF1dG8gPSAnYXV0byc7XG5leHBvcnQgdmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG5leHBvcnQgdmFyIHN0YXJ0ID0gJ3N0YXJ0JztcbmV4cG9ydCB2YXIgZW5kID0gJ2VuZCc7XG5leHBvcnQgdmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xuZXhwb3J0IHZhciB2aWV3cG9ydCA9ICd2aWV3cG9ydCc7XG5leHBvcnQgdmFyIHBvcHBlciA9ICdwb3BwZXInO1xuZXhwb3J0IHZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbmV4cG9ydCB2YXIgdmFyaWF0aW9uUGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9iYXNlUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pO1xuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0gLyojX19QVVJFX18qL1tdLmNvbmNhdChiYXNlUGxhY2VtZW50cywgW2F1dG9dKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQsIHBsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7IC8vIG1vZGlmaWVycyB0aGF0IG5lZWQgdG8gcmVhZCB0aGUgRE9NXG5cbmV4cG9ydCB2YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbmV4cG9ydCB2YXIgcmVhZCA9ICdyZWFkJztcbmV4cG9ydCB2YXIgYWZ0ZXJSZWFkID0gJ2FmdGVyUmVhZCc7IC8vIHB1cmUtbG9naWMgbW9kaWZpZXJzXG5cbmV4cG9ydCB2YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbmV4cG9ydCB2YXIgbWFpbiA9ICdtYWluJztcbmV4cG9ydCB2YXIgYWZ0ZXJNYWluID0gJ2FmdGVyTWFpbic7IC8vIG1vZGlmaWVyIHdpdGggdGhlIHB1cnBvc2UgdG8gd3JpdGUgdG8gdGhlIERPTSAob3Igd3JpdGUgaW50byBhIGZyYW1ld29yayBzdGF0ZSlcblxuZXhwb3J0IHZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG5leHBvcnQgdmFyIHdyaXRlID0gJ3dyaXRlJztcbmV4cG9ydCB2YXIgYWZ0ZXJXcml0ZSA9ICdhZnRlcldyaXRlJztcbmV4cG9ydCB2YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVOYW1lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPyAoZWxlbWVudC5ub2RlTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKSA6IG51bGw7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgaWYgKG5vZGUudG9TdHJpbmcoKSAhPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkhUTUxFbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc1NoYWRvd1Jvb3Qobm9kZSkge1xuICAvLyBJRSAxMSBoYXMgbm8gU2hhZG93Um9vdFxuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuU2hhZG93Um9vdDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBTaGFkb3dSb290O1xufVxuXG5leHBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQsIGlzU2hhZG93Um9vdCB9OyIsICJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBUaGlzIG1vZGlmaWVyIHRha2VzIHRoZSBzdHlsZXMgcHJlcGFyZWQgYnkgdGhlIGBjb21wdXRlU3R5bGVzYCBtb2RpZmllclxuLy8gYW5kIGFwcGxpZXMgdGhlbSB0byB0aGUgSFRNTEVsZW1lbnRzIHN1Y2ggYXMgcG9wcGVyIGFuZCBhcnJvd1xuXG5mdW5jdGlvbiBhcHBseVN0eWxlcyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG4gIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUuc3R5bGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0IHRvIGV4dGVuZCB0aGlzIHByb3BlcnR5LCBidXQgaXQncyB0aGUgbW9zdFxuICAgIC8vIGVmZmVjdGl2ZSB3YXkgdG8gYXBwbHkgc3R5bGVzIHRvIGFuIEhUTUxFbGVtZW50XG4gICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cblxuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlO1xuICB2YXIgaW5pdGlhbFN0eWxlcyA9IHtcbiAgICBwb3BwZXI6IHtcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgdG9wOiAnMCcsXG4gICAgICBtYXJnaW46ICcwJ1xuICAgIH0sXG4gICAgYXJyb3c6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcbiAgICByZWZlcmVuY2U6IHt9XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpbml0aWFsU3R5bGVzLnBvcHBlcik7XG4gIHN0YXRlLnN0eWxlcyA9IGluaXRpYWxTdHlsZXM7XG5cbiAgaWYgKHN0YXRlLmVsZW1lbnRzLmFycm93KSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5hcnJvdy5zdHlsZSwgaW5pdGlhbFN0eWxlcy5hcnJvdyk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdO1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgICAgdmFyIHN0eWxlUHJvcGVydGllcyA9IE9iamVjdC5rZXlzKHN0YXRlLnN0eWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHN0YXRlLnN0eWxlc1tuYW1lXSA6IGluaXRpYWxTdHlsZXNbbmFtZV0pOyAvLyBTZXQgYWxsIHZhbHVlcyB0byBhbiBlbXB0eSBzdHJpbmcgdG8gdW5zZXQgdGhlbVxuXG4gICAgICB2YXIgc3R5bGUgPSBzdHlsZVByb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChzdHlsZSwgcHJvcGVydHkpIHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gJyc7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH0sIHt9KTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogYXBwbHlTdHlsZXMsXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ11cbn07IiwgImltcG9ydCB7IGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn0iLCAiZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCB2YXIgbWluID0gTWF0aC5taW47XG5leHBvcnQgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VUFTdHJpbmcoKSB7XG4gIHZhciB1YURhdGEgPSBuYXZpZ2F0b3IudXNlckFnZW50RGF0YTtcblxuICBpZiAodWFEYXRhICE9IG51bGwgJiYgdWFEYXRhLmJyYW5kcykge1xuICAgIHJldHVybiB1YURhdGEuYnJhbmRzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uYnJhbmQgKyBcIi9cIiArIGl0ZW0udmVyc2lvbjtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH1cblxuICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbn0iLCAiaW1wb3J0IGdldFVBU3RyaW5nIGZyb20gXCIuLi91dGlscy91c2VyQWdlbnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTGF5b3V0Vmlld3BvcnQoKSB7XG4gIHJldHVybiAhL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChnZXRVQVN0cmluZygpKTtcbn0iLCAiaW1wb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBpc0xheW91dFZpZXdwb3J0IGZyb20gXCIuL2lzTGF5b3V0Vmlld3BvcnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBpbmNsdWRlU2NhbGUsIGlzRml4ZWRTdHJhdGVneSkge1xuICBpZiAoaW5jbHVkZVNjYWxlID09PSB2b2lkIDApIHtcbiAgICBpbmNsdWRlU2NhbGUgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0ZpeGVkU3RyYXRlZ3kgPT09IHZvaWQgMCkge1xuICAgIGlzRml4ZWRTdHJhdGVneSA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGNsaWVudFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc2NhbGVYID0gMTtcbiAgdmFyIHNjYWxlWSA9IDE7XG5cbiAgaWYgKGluY2x1ZGVTY2FsZSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgc2NhbGVYID0gZWxlbWVudC5vZmZzZXRXaWR0aCA+IDAgPyByb3VuZChjbGllbnRSZWN0LndpZHRoKSAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMSA6IDE7XG4gICAgc2NhbGVZID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgPiAwID8gcm91bmQoY2xpZW50UmVjdC5oZWlnaHQpIC8gZWxlbWVudC5vZmZzZXRIZWlnaHQgfHwgMSA6IDE7XG4gIH1cblxuICB2YXIgX3JlZiA9IGlzRWxlbWVudChlbGVtZW50KSA/IGdldFdpbmRvdyhlbGVtZW50KSA6IHdpbmRvdyxcbiAgICAgIHZpc3VhbFZpZXdwb3J0ID0gX3JlZi52aXN1YWxWaWV3cG9ydDtcblxuICB2YXIgYWRkVmlzdWFsT2Zmc2V0cyA9ICFpc0xheW91dFZpZXdwb3J0KCkgJiYgaXNGaXhlZFN0cmF0ZWd5O1xuICB2YXIgeCA9IChjbGllbnRSZWN0LmxlZnQgKyAoYWRkVmlzdWFsT2Zmc2V0cyAmJiB2aXN1YWxWaWV3cG9ydCA/IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQgOiAwKSkgLyBzY2FsZVg7XG4gIHZhciB5ID0gKGNsaWVudFJlY3QudG9wICsgKGFkZFZpc3VhbE9mZnNldHMgJiYgdmlzdWFsVmlld3BvcnQgPyB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3AgOiAwKSkgLyBzY2FsZVk7XG4gIHZhciB3aWR0aCA9IGNsaWVudFJlY3Qud2lkdGggLyBzY2FsZVg7XG4gIHZhciBoZWlnaHQgPSBjbGllbnRSZWN0LmhlaWdodCAvIHNjYWxlWTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgdG9wOiB5LFxuICAgIHJpZ2h0OiB4ICsgd2lkdGgsXG4gICAgYm90dG9tOiB5ICsgaGVpZ2h0LFxuICAgIGxlZnQ6IHgsXG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG59IiwgImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7IC8vIFJldHVybnMgdGhlIGxheW91dCByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC4gTGF5b3V0XG4vLyBtZWFucyBpdCBkb2Vzbid0IHRha2UgaW50byBhY2NvdW50IHRyYW5zZm9ybXMuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudCkge1xuICB2YXIgY2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTsgLy8gVXNlIHRoZSBjbGllbnRSZWN0IHNpemVzIGlmIGl0J3Mgbm90IGJlZW4gdHJhbnNmb3JtZWQuXG4gIC8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTIyM1xuXG4gIHZhciB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC53aWR0aCAtIHdpZHRoKSA8PSAxKSB7XG4gICAgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3QuaGVpZ2h0IC0gaGVpZ2h0KSA8PSAxKSB7XG4gICAgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn0iLCAiaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMocGFyZW50LCBjaGlsZCkge1xuICB2YXIgcm9vdE5vZGUgPSBjaGlsZC5nZXRSb290Tm9kZSAmJiBjaGlsZC5nZXRSb290Tm9kZSgpOyAvLyBGaXJzdCwgYXR0ZW1wdCB3aXRoIGZhc3RlciBuYXRpdmUgbWV0aG9kXG5cbiAgaWYgKHBhcmVudC5jb250YWlucyhjaGlsZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB0aGVuIGZhbGxiYWNrIHRvIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiB3aXRoIFNoYWRvdyBET00gc3VwcG9ydFxuICBlbHNlIGlmIChyb290Tm9kZSAmJiBpc1NoYWRvd1Jvb3Qocm9vdE5vZGUpKSB7XG4gICAgICB2YXIgbmV4dCA9IGNoaWxkO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuZXh0ICYmIHBhcmVudC5pc1NhbWVOb2RlKG5leHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuXG5cbiAgICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgICB9IHdoaWxlIChuZXh0KTtcbiAgICB9IC8vIEdpdmUgdXAsIHRoZSByZXN1bHQgaXMgZmFsc2VcblxuXG4gIHJldHVybiBmYWxzZTtcbn0iLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59IiwgImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gWyd0YWJsZScsICd0ZCcsICd0aCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpID49IDA7XG59IiwgImltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSB7XG4gIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgcmV0dXJuICgoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudC5vd25lckRvY3VtZW50IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gIGVsZW1lbnQuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50O1xufSIsICJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGdldE5vZGVOYW1lKGVsZW1lbnQpID09PSAnaHRtbCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiAoLy8gdGhpcyBpcyBhIHF1aWNrZXIgKGJ1dCBsZXNzIHR5cGUgc2FmZSkgd2F5IHRvIHNhdmUgcXVpdGUgc29tZSBieXRlcyBmcm9tIHRoZSBidW5kbGVcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgZWxlbWVudC5hc3NpZ25lZFNsb3QgfHwgLy8gc3RlcCBpbnRvIHRoZSBzaGFkb3cgRE9NIG9mIHRoZSBwYXJlbnQgb2YgYSBzbG90dGVkIG5vZGVcbiAgICBlbGVtZW50LnBhcmVudE5vZGUgfHwgKCAvLyBET00gRWxlbWVudCBkZXRlY3RlZFxuICAgIGlzU2hhZG93Um9vdChlbGVtZW50KSA/IGVsZW1lbnQuaG9zdCA6IG51bGwpIHx8IC8vIFNoYWRvd1Jvb3QgZGV0ZWN0ZWRcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogSFRNTEVsZW1lbnQgaXMgYSBOb2RlXG4gICAgZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIC8vIGZhbGxiYWNrXG5cbiAgKTtcbn0iLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGlzVGFibGVFbGVtZW50IGZyb20gXCIuL2lzVGFibGVFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0VUFTdHJpbmcgZnJvbSBcIi4uL3V0aWxzL3VzZXJBZ2VudC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvODM3XG4gIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbn0gLy8gYC5vZmZzZXRQYXJlbnRgIHJlcG9ydHMgYG51bGxgIGZvciBmaXhlZCBlbGVtZW50cywgd2hpbGUgYWJzb2x1dGUgZWxlbWVudHNcbi8vIHJldHVybiB0aGUgY29udGFpbmluZyBibG9ja1xuXG5cbmZ1bmN0aW9uIGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB7XG4gIHZhciBpc0ZpcmVmb3ggPSAvZmlyZWZveC9pLnRlc3QoZ2V0VUFTdHJpbmcoKSk7XG4gIHZhciBpc0lFID0gL1RyaWRlbnQvaS50ZXN0KGdldFVBU3RyaW5nKCkpO1xuXG4gIGlmIChpc0lFICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAvLyBJbiBJRSA5LCAxMCBhbmQgMTEgZml4ZWQgZWxlbWVudHMgY29udGFpbmluZyBibG9jayBpcyBhbHdheXMgZXN0YWJsaXNoZWQgYnkgdGhlIHZpZXdwb3J0XG4gICAgdmFyIGVsZW1lbnRDc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnRDc3MucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG5cbiAgaWYgKGlzU2hhZG93Um9vdChjdXJyZW50Tm9kZSkpIHtcbiAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLmhvc3Q7XG4gIH1cblxuICB3aGlsZSAoaXNIVE1MRWxlbWVudChjdXJyZW50Tm9kZSkgJiYgWydodG1sJywgJ2JvZHknXS5pbmRleE9mKGdldE5vZGVOYW1lKGN1cnJlbnROb2RlKSkgPCAwKSB7XG4gICAgdmFyIGNzcyA9IGdldENvbXB1dGVkU3R5bGUoY3VycmVudE5vZGUpOyAvLyBUaGlzIGlzIG5vbi1leGhhdXN0aXZlIGJ1dCBjb3ZlcnMgdGhlIG1vc3QgY29tbW9uIENTUyBwcm9wZXJ0aWVzIHRoYXRcbiAgICAvLyBjcmVhdGUgYSBjb250YWluaW5nIGJsb2NrLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9Db250YWluaW5nX2Jsb2NrI2lkZW50aWZ5aW5nX3RoZV9jb250YWluaW5nX2Jsb2NrXG5cbiAgICBpZiAoY3NzLnRyYW5zZm9ybSAhPT0gJ25vbmUnIHx8IGNzcy5wZXJzcGVjdGl2ZSAhPT0gJ25vbmUnIHx8IGNzcy5jb250YWluID09PSAncGFpbnQnIHx8IFsndHJhbnNmb3JtJywgJ3BlcnNwZWN0aXZlJ10uaW5kZXhPZihjc3Mud2lsbENoYW5nZSkgIT09IC0xIHx8IGlzRmlyZWZveCAmJiBjc3Mud2lsbENoYW5nZSA9PT0gJ2ZpbHRlcicgfHwgaXNGaXJlZm94ICYmIGNzcy5maWx0ZXIgJiYgY3NzLmZpbHRlciAhPT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm4gY3VycmVudE5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0gLy8gR2V0cyB0aGUgY2xvc2VzdCBhbmNlc3RvciBwb3NpdGlvbmVkIGVsZW1lbnQuIEhhbmRsZXMgc29tZSBlZGdlIGNhc2VzLFxuLy8gc3VjaCBhcyB0YWJsZSBhbmNlc3RvcnMgYW5kIGNyb3NzIGJyb3dzZXIgYnVncy5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KTtcblxuICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGlzVGFibGVFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIGlmIChvZmZzZXRQYXJlbnQgJiYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdodG1sJyB8fCBnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnYm9keScgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkgfHwgd2luZG93O1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgPj0gMCA/ICd4JyA6ICd5Jztcbn0iLCAiaW1wb3J0IHsgbWF4IGFzIG1hdGhNYXgsIG1pbiBhcyBtYXRoTWluIH0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpIHtcbiAgcmV0dXJuIG1hdGhNYXgobWluLCBtYXRoTWluKHZhbHVlLCBtYXgpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aXRoaW5NYXhDbGFtcChtaW4sIHZhbHVlLCBtYXgpIHtcbiAgdmFyIHYgPSB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KTtcbiAgcmV0dXJuIHYgPiBtYXggPyBtYXggOiB2O1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGcmVzaFNpZGVPYmplY3QoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH07XG59IiwgImltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSBcIi4vZ2V0RnJlc2hTaWRlT2JqZWN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZVBhZGRpbmdPYmplY3QocGFkZGluZ09iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZ2V0RnJlc2hTaWRlT2JqZWN0KCksIHBhZGRpbmdPYmplY3QpO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHBhbmRUb0hhc2hNYXAodmFsdWUsIGtleXMpIHtcbiAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uIChoYXNoTWFwLCBrZXkpIHtcbiAgICBoYXNoTWFwW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gaGFzaE1hcDtcbiAgfSwge30pO1xufSIsICJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4uL2RvbS11dGlscy9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB3aXRoaW4gfSBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuLi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4uL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qc1wiO1xuaW1wb3J0IHsgbGVmdCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB0b3AsIGJvdHRvbSB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB0b1BhZGRpbmdPYmplY3QgPSBmdW5jdGlvbiB0b1BhZGRpbmdPYmplY3QocGFkZGluZywgc3RhdGUpIHtcbiAgcGFkZGluZyA9IHR5cGVvZiBwYWRkaW5nID09PSAnZnVuY3Rpb24nID8gcGFkZGluZyhPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHBhZGRpbmc7XG4gIHJldHVybiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xufTtcblxuZnVuY3Rpb24gYXJyb3coX3JlZikge1xuICB2YXIgX3N0YXRlJG1vZGlmaWVyc0RhdGEkO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gdG9QYWRkaW5nT2JqZWN0KG9wdGlvbnMucGFkZGluZywgc3RhdGUpO1xuICB2YXIgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICB2YXIgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIHZhciBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gIHZhciBlbmREaWZmID0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gKyBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIHZhciBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgdmFyIGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMCA6IDA7XG4gIHZhciBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjsgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG5cbiAgdmFyIG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIHZhciBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICB2YXIgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgdmFyIG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTsgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuXG4gIHZhciBheGlzUHJvcCA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSAoX3N0YXRlJG1vZGlmaWVyc0RhdGEkID0ge30sIF9zdGF0ZSRtb2RpZmllcnNEYXRhJFtheGlzUHJvcF0gPSBvZmZzZXQsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJC5jZW50ZXJPZmZzZXQgPSBvZmZzZXQgLSBjZW50ZXIsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJCk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudCxcbiAgICAgIGFycm93RWxlbWVudCA9IF9vcHRpb25zJGVsZW1lbnQgPT09IHZvaWQgMCA/ICdbZGF0YS1wb3BwZXItYXJyb3ddJyA6IF9vcHRpb25zJGVsZW1lbnQ7XG5cbiAgaWYgKGFycm93RWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENTUyBzZWxlY3RvclxuXG5cbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICghaXNIVE1MRWxlbWVudChhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgZWxlbWVudCBtdXN0IGJlIGFuIEhUTUxFbGVtZW50IChub3QgYW4gU1ZHRWxlbWVudCkuJywgJ1RvIHVzZSBhbiBTVkcgYXJyb3csIHdyYXAgaXQgaW4gYW4gSFRNTEVsZW1lbnQgdGhhdCB3aWxsIGJlIHVzZWQgYXMnLCAndGhlIGFycm93LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250YWlucyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIsIGFycm93RWxlbWVudCkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgbW9kaWZpZXJcXCdzIGBlbGVtZW50YCBtdXN0IGJlIGEgY2hpbGQgb2YgdGhlIHBvcHBlcicsICdlbGVtZW50LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUuZWxlbWVudHMuYXJyb3cgPSBhcnJvd0VsZW1lbnQ7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXVxufTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59IiwgImltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdW5zZXRTaWRlcyA9IHtcbiAgdG9wOiAnYXV0bycsXG4gIHJpZ2h0OiAnYXV0bycsXG4gIGJvdHRvbTogJ2F1dG8nLFxuICBsZWZ0OiAnYXV0bydcbn07IC8vIFJvdW5kIHRoZSBvZmZzZXRzIHRvIHRoZSBuZWFyZXN0IHN1aXRhYmxlIHN1YnBpeGVsIGJhc2VkIG9uIHRoZSBEUFIuXG4vLyBab29taW5nIGNhbiBjaGFuZ2UgdGhlIERQUiwgYnV0IGl0IHNlZW1zIHRvIHJlcG9ydCBhIHZhbHVlIHRoYXQgd2lsbFxuLy8gY2xlYW5seSBkaXZpZGUgdGhlIHZhbHVlcyBpbnRvIHRoZSBhcHByb3ByaWF0ZSBzdWJwaXhlbHMuXG5cbmZ1bmN0aW9uIHJvdW5kT2Zmc2V0c0J5RFBSKF9yZWYpIHtcbiAgdmFyIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55O1xuICB2YXIgd2luID0gd2luZG93O1xuICB2YXIgZHByID0gd2luLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgcmV0dXJuIHtcbiAgICB4OiByb3VuZCh4ICogZHByKSAvIGRwciB8fCAwLFxuICAgIHk6IHJvdW5kKHkgKiBkcHIpIC8gZHByIHx8IDBcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvU3R5bGVzKF9yZWYyKSB7XG4gIHZhciBfT2JqZWN0JGFzc2lnbjI7XG5cbiAgdmFyIHBvcHBlciA9IF9yZWYyLnBvcHBlcixcbiAgICAgIHBvcHBlclJlY3QgPSBfcmVmMi5wb3BwZXJSZWN0LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZjIucGxhY2VtZW50LFxuICAgICAgdmFyaWF0aW9uID0gX3JlZjIudmFyaWF0aW9uLFxuICAgICAgb2Zmc2V0cyA9IF9yZWYyLm9mZnNldHMsXG4gICAgICBwb3NpdGlvbiA9IF9yZWYyLnBvc2l0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX3JlZjIuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgYWRhcHRpdmUgPSBfcmVmMi5hZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9yZWYyLnJvdW5kT2Zmc2V0cyxcbiAgICAgIGlzRml4ZWQgPSBfcmVmMi5pc0ZpeGVkO1xuICB2YXIgX29mZnNldHMkeCA9IG9mZnNldHMueCxcbiAgICAgIHggPSBfb2Zmc2V0cyR4ID09PSB2b2lkIDAgPyAwIDogX29mZnNldHMkeCxcbiAgICAgIF9vZmZzZXRzJHkgPSBvZmZzZXRzLnksXG4gICAgICB5ID0gX29mZnNldHMkeSA9PT0gdm9pZCAwID8gMCA6IF9vZmZzZXRzJHk7XG5cbiAgdmFyIF9yZWYzID0gdHlwZW9mIHJvdW5kT2Zmc2V0cyA9PT0gJ2Z1bmN0aW9uJyA/IHJvdW5kT2Zmc2V0cyh7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH0pIDoge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xuXG4gIHggPSBfcmVmMy54O1xuICB5ID0gX3JlZjMueTtcbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuICAgIHZhciBoZWlnaHRQcm9wID0gJ2NsaWVudEhlaWdodCc7XG4gICAgdmFyIHdpZHRoUHJvcCA9ICdjbGllbnRXaWR0aCc7XG5cbiAgICBpZiAob2Zmc2V0UGFyZW50ID09PSBnZXRXaW5kb3cocG9wcGVyKSkge1xuICAgICAgb2Zmc2V0UGFyZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KHBvcHBlcik7XG5cbiAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gIT09ICdzdGF0aWMnICYmIHBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSB7XG4gICAgICAgIGhlaWdodFByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgICAgd2lkdGhQcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdOiBmb3JjZSB0eXBlIHJlZmluZW1lbnQsIHdlIGNvbXBhcmUgb2Zmc2V0UGFyZW50IHdpdGggd2luZG93IGFib3ZlLCBidXQgRmxvdyBkb2Vzbid0IGRldGVjdCBpdFxuXG5cbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQ7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSB0b3AgfHwgKHBsYWNlbWVudCA9PT0gbGVmdCB8fCBwbGFjZW1lbnQgPT09IHJpZ2h0KSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVkgPSBib3R0b207XG4gICAgICB2YXIgb2Zmc2V0WSA9IGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LmhlaWdodCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgb2Zmc2V0UGFyZW50W2hlaWdodFByb3BdO1xuICAgICAgeSAtPSBvZmZzZXRZIC0gcG9wcGVyUmVjdC5oZWlnaHQ7XG4gICAgICB5ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSBsZWZ0IHx8IChwbGFjZW1lbnQgPT09IHRvcCB8fCBwbGFjZW1lbnQgPT09IGJvdHRvbSkgJiYgdmFyaWF0aW9uID09PSBlbmQpIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LndpZHRoIDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBvZmZzZXRQYXJlbnRbd2lkdGhQcm9wXTtcbiAgICAgIHggLT0gb2Zmc2V0WCAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgcG9zaXRpb246IHBvc2l0aW9uXG4gIH0sIGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpO1xuXG4gIHZhciBfcmVmNCA9IHJvdW5kT2Zmc2V0cyA9PT0gdHJ1ZSA/IHJvdW5kT2Zmc2V0c0J5RFBSKHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfSkgOiB7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG5cbiAgeCA9IF9yZWY0Lng7XG4gIHkgPSBfcmVmNC55O1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICB2YXIgX09iamVjdCRhc3NpZ247XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24gPSB7fSwgX09iamVjdCRhc3NpZ25bc2lkZVldID0gaGFzWSA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbltzaWRlWF0gPSBoYXNYID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduLnRyYW5zZm9ybSA9ICh3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSA8PSAxID8gXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweClcIiA6IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweCwgMClcIiwgX09iamVjdCRhc3NpZ24pKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbjIgPSB7fSwgX09iamVjdCRhc3NpZ24yW3NpZGVZXSA9IGhhc1kgPyB5ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMltzaWRlWF0gPSBoYXNYID8geCArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjIudHJhbnNmb3JtID0gJycsIF9PYmplY3QkYXNzaWduMikpO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlU3R5bGVzKF9yZWY1KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY1LnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWY1Lm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPSBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGdwdUFjY2VsZXJhdCxcbiAgICAgIF9vcHRpb25zJGFkYXB0aXZlID0gb3B0aW9ucy5hZGFwdGl2ZSxcbiAgICAgIGFkYXB0aXZlID0gX29wdGlvbnMkYWRhcHRpdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhZGFwdGl2ZSxcbiAgICAgIF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9IG9wdGlvbnMucm91bmRPZmZzZXRzLFxuICAgICAgcm91bmRPZmZzZXRzID0gX29wdGlvbnMkcm91bmRPZmZzZXRzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkcm91bmRPZmZzZXRzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gZ2V0Q29tcHV0ZWRTdHlsZShzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLnRyYW5zaXRpb25Qcm9wZXJ0eSB8fCAnJztcblxuICAgIGlmIChhZGFwdGl2ZSAmJiBbJ3RyYW5zZm9ybScsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5zb21lKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25Qcm9wZXJ0eS5pbmRleE9mKHByb3BlcnR5KSA+PSAwO1xuICAgIH0pKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IERldGVjdGVkIENTUyB0cmFuc2l0aW9ucyBvbiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZycsICdDU1MgcHJvcGVydGllczogXCJ0cmFuc2Zvcm1cIiwgXCJ0b3BcIiwgXCJyaWdodFwiLCBcImJvdHRvbVwiLCBcImxlZnRcIi4nLCAnXFxuXFxuJywgJ0Rpc2FibGUgdGhlIFwiY29tcHV0ZVN0eWxlc1wiIG1vZGlmaWVyXFwncyBgYWRhcHRpdmVgIG9wdGlvbiB0byBhbGxvdycsICdmb3Igc21vb3RoIHRyYW5zaXRpb25zLCBvciByZW1vdmUgdGhlc2UgcHJvcGVydGllcyBmcm9tIHRoZSBDU1MnLCAndHJhbnNpdGlvbiBkZWNsYXJhdGlvbiBvbiB0aGUgcG9wcGVyIGVsZW1lbnQgaWYgb25seSB0cmFuc2l0aW9uaW5nJywgJ29wYWNpdHkgb3IgYmFja2dyb3VuZC1jb2xvciBmb3IgZXhhbXBsZS4nLCAnXFxuXFxuJywgJ1dlIHJlY29tbWVuZCB1c2luZyB0aGUgcG9wcGVyIGVsZW1lbnQgYXMgYSB3cmFwcGVyIGFyb3VuZCBhbiBpbm5lcicsICdlbGVtZW50IHRoYXQgY2FuIGhhdmUgYW55IENTUyBwcm9wZXJ0eSB0cmFuc2l0aW9uZWQgZm9yIGFuaW1hdGlvbnMuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0ge1xuICAgIHBsYWNlbWVudDogZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHZhcmlhdGlvbjogZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCksXG4gICAgcG9wcGVyOiBzdGF0ZS5lbGVtZW50cy5wb3BwZXIsXG4gICAgcG9wcGVyUmVjdDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIGdwdUFjY2VsZXJhdGlvbjogZ3B1QWNjZWxlcmF0aW9uLFxuICAgIGlzRml4ZWQ6IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCdcbiAgfTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLnBvcHBlciwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGFkYXB0aXZlOiBhZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93ICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMuYXJyb3cgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMuYXJyb3csIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYWRhcHRpdmU6IGZhbHNlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1wbGFjZW1lbnQnOiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdjb21wdXRlU3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdiZWZvcmVXcml0ZScsXG4gIGZuOiBjb21wdXRlU3R5bGVzLFxuICBkYXRhOiB7fVxufTsiLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciBwYXNzaXZlID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJHNjcm9sbCA9IG9wdGlvbnMuc2Nyb2xsLFxuICAgICAgc2Nyb2xsID0gX29wdGlvbnMkc2Nyb2xsID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2Nyb2xsLFxuICAgICAgX29wdGlvbnMkcmVzaXplID0gb3B0aW9ucy5yZXNpemUsXG4gICAgICByZXNpemUgPSBfb3B0aW9ucyRyZXNpemUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyZXNpemU7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coc3RhdGUuZWxlbWVudHMucG9wcGVyKTtcbiAgdmFyIHNjcm9sbFBhcmVudHMgPSBbXS5jb25jYXQoc3RhdGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIHN0YXRlLnNjcm9sbFBhcmVudHMucG9wcGVyKTtcblxuICBpZiAoc2Nyb2xsKSB7XG4gICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH1cbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgZGF0YToge31cbn07IiwgInZhciBoYXNoID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICBib3R0b206ICd0b3AnLFxuICB0b3A6ICdib3R0b20nXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSIsICJ2YXIgaGFzaCA9IHtcbiAgc3RhcnQ6ICdlbmQnLFxuICBlbmQ6ICdzdGFydCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwobm9kZSkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KG5vZGUpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IHdpbi5wYWdlWE9mZnNldDtcbiAgdmFyIHNjcm9sbFRvcCA9IHdpbi5wYWdlWU9mZnNldDtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gIH07XG59IiwgImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCkge1xuICAvLyBJZiA8aHRtbD4gaGFzIGEgQ1NTIHdpZHRoIGdyZWF0ZXIgdGhhbiB0aGUgdmlld3BvcnQsIHRoZW4gdGhpcyB3aWxsIGJlXG4gIC8vIGluY29ycmVjdCBmb3IgUlRMLlxuICAvLyBQb3BwZXIgMSBpcyBicm9rZW4gaW4gdGhpcyBjYXNlIGFuZCBuZXZlciBoYWQgYSBidWcgcmVwb3J0IHNvIGxldCdzIGFzc3VtZVxuICAvLyBpdCdzIG5vdCBhbiBpc3N1ZS4gSSBkb24ndCB0aGluayBhbnlvbmUgZXZlciBzcGVjaWZpZXMgd2lkdGggb24gPGh0bWw+XG4gIC8vIGFueXdheS5cbiAgLy8gQnJvd3NlcnMgd2hlcmUgdGhlIGxlZnQgc2Nyb2xsYmFyIGRvZXNuJ3QgY2F1c2UgYW4gaXNzdWUgcmVwb3J0IGAwYCBmb3JcbiAgLy8gdGhpcyAoZS5nLiBFZGdlIDIwMTksIElFMTEsIFNhZmFyaSlcbiAgcmV0dXJuIGdldEJvdW5kaW5nQ2xpZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpLmxlZnQgKyBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCkuc2Nyb2xsTGVmdDtcbn0iLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgaXNMYXlvdXRWaWV3cG9ydCBmcm9tIFwiLi9pc0xheW91dFZpZXdwb3J0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcbiAgdmFyIHdpZHRoID0gaHRtbC5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGh0bWwuY2xpZW50SGVpZ2h0O1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDtcblxuICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDtcbiAgICB2YXIgbGF5b3V0Vmlld3BvcnQgPSBpc0xheW91dFZpZXdwb3J0KCk7XG5cbiAgICBpZiAobGF5b3V0Vmlld3BvcnQgfHwgIWxheW91dFZpZXdwb3J0ICYmIHN0cmF0ZWd5ID09PSAnZml4ZWQnKSB7XG4gICAgICB4ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdDtcbiAgICAgIHkgPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3A7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCksXG4gICAgeTogeVxuICB9O1xufSIsICJpbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCB7IG1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIEdldHMgdGhlIGVudGlyZSBzaXplIG9mIHRoZSBzY3JvbGxhYmxlIGRvY3VtZW50IGFyZWEsIGV2ZW4gZXh0ZW5kaW5nIG91dHNpZGVcbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGVcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHdpblNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbChlbGVtZW50KTtcbiAgdmFyIGJvZHkgPSAoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHk7XG4gIHZhciB3aWR0aCA9IG1heChodG1sLnNjcm9sbFdpZHRoLCBodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5zY3JvbGxXaWR0aCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCk7XG4gIHZhciBoZWlnaHQgPSBtYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5ID8gYm9keS5zY3JvbGxIZWlnaHQgOiAwLCBib2R5ID8gYm9keS5jbGllbnRIZWlnaHQgOiAwKTtcbiAgdmFyIHggPSAtd2luU2Nyb2xsLnNjcm9sbExlZnQgKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpO1xuICB2YXIgeSA9IC13aW5TY3JvbGwuc2Nyb2xsVG9wO1xuXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKGJvZHkgfHwgaHRtbCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHggKz0gbWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCkgLSB3aWR0aDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufSIsICJpbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1Njcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIEZpcmVmb3ggd2FudHMgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcbiAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1k7XG5cbiAgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCk7XG59IiwgImltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KG5vZGUpIHtcbiAgaWYgKFsnaHRtbCcsICdib2R5JywgJyNkb2N1bWVudCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUobm9kZSkpID49IDApIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgaWYgKGlzSFRNTEVsZW1lbnQobm9kZSkgJiYgaXNTY3JvbGxQYXJlbnQobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShub2RlKSk7XG59IiwgImltcG9ydCBnZXRTY3JvbGxQYXJlbnQgZnJvbSBcIi4vZ2V0U2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG4vKlxuZ2l2ZW4gYSBET00gZWxlbWVudCwgcmV0dXJuIHRoZSBsaXN0IG9mIGFsbCBzY3JvbGwgcGFyZW50cywgdXAgdGhlIGxpc3Qgb2YgYW5jZXNvcnNcbnVudGlsIHdlIGdldCB0byB0aGUgdG9wIHdpbmRvdyBvYmplY3QuIFRoaXMgbGlzdCBpcyB3aGF0IHdlIGF0dGFjaCBzY3JvbGwgbGlzdGVuZXJzXG50bywgYmVjYXVzZSBpZiBhbnkgb2YgdGhlc2UgcGFyZW50IGVsZW1lbnRzIHNjcm9sbCwgd2UnbGwgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlXG5yZWZlcmVuY2UgZWxlbWVudCdzIHBvc2l0aW9uLlxuKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCwgbGlzdCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cblxuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpO1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50ID09PSAoKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5KTtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhzY3JvbGxQYXJlbnQpO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gW3dpbl0uY29uY2F0KHdpbi52aXN1YWxWaWV3cG9ydCB8fCBbXSwgaXNTY3JvbGxQYXJlbnQoc2Nyb2xsUGFyZW50KSA/IHNjcm9sbFBhcmVudCA6IFtdKSA6IHNjcm9sbFBhcmVudDtcbiAgdmFyIHVwZGF0ZWRMaXN0ID0gbGlzdC5jb25jYXQodGFyZ2V0KTtcbiAgcmV0dXJuIGlzQm9keSA/IHVwZGF0ZWRMaXN0IDogLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IGlzQm9keSB0ZWxscyB1cyB0YXJnZXQgd2lsbCBiZSBhbiBIVE1MRWxlbWVudCBoZXJlXG4gIHVwZGF0ZWRMaXN0LmNvbmNhdChsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKHRhcmdldCkpKTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWN0LCB7XG4gICAgbGVmdDogcmVjdC54LFxuICAgIHRvcDogcmVjdC55LFxuICAgIHJpZ2h0OiByZWN0LnggKyByZWN0LndpZHRoLFxuICAgIGJvdHRvbTogcmVjdC55ICsgcmVjdC5oZWlnaHRcbiAgfSk7XG59IiwgImltcG9ydCB7IHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0Vmlld3BvcnRSZWN0IGZyb20gXCIuL2dldFZpZXdwb3J0UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50UmVjdCBmcm9tIFwiLi9nZXREb2N1bWVudFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9saXN0U2Nyb2xsUGFyZW50cy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuL2NvbnRhaW5zLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuLi91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBtYXgsIG1pbiB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSB7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGZhbHNlLCBzdHJhdGVneSA9PT0gJ2ZpeGVkJyk7XG4gIHJlY3QudG9wID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudFRvcDtcbiAgcmVjdC5sZWZ0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICByZWN0LmJvdHRvbSA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QucmlnaHQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LndpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC5oZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC54ID0gcmVjdC5sZWZ0O1xuICByZWN0LnkgPSByZWN0LnRvcDtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50LCBzdHJhdGVneSkge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0ID8gcmVjdFRvQ2xpZW50UmVjdChnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpKSA6IGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpIDogcmVjdFRvQ2xpZW50UmVjdChnZXREb2N1bWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKSk7XG59IC8vIEEgXCJjbGlwcGluZyBwYXJlbnRcIiBpcyBhbiBvdmVyZmxvd2FibGUgY29udGFpbmVyIHdpdGggdGhlIGNoYXJhY3RlcmlzdGljIG9mXG4vLyBjbGlwcGluZyAob3IgaGlkaW5nKSBvdmVyZmxvd2luZyBlbGVtZW50cyB3aXRoIGEgcG9zaXRpb24gZGlmZmVyZW50IGZyb21cbi8vIGBpbml0aWFsYFxuXG5cbmZ1bmN0aW9uIGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSB7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbiAgdmFyIGNhbkVzY2FwZUNsaXBwaW5nID0gWydhYnNvbHV0ZScsICdmaXhlZCddLmluZGV4T2YoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbikgPj0gMDtcbiAgdmFyIGNsaXBwZXJFbGVtZW50ID0gY2FuRXNjYXBlQ2xpcHBpbmcgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSA/IGdldE9mZnNldFBhcmVudChlbGVtZW50KSA6IGVsZW1lbnQ7XG5cbiAgaWYgKCFpc0VsZW1lbnQoY2xpcHBlckVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8xNDE0XG5cblxuICByZXR1cm4gY2xpcHBpbmdQYXJlbnRzLmZpbHRlcihmdW5jdGlvbiAoY2xpcHBpbmdQYXJlbnQpIHtcbiAgICByZXR1cm4gaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KSAmJiBjb250YWlucyhjbGlwcGluZ1BhcmVudCwgY2xpcHBlckVsZW1lbnQpICYmIGdldE5vZGVOYW1lKGNsaXBwaW5nUGFyZW50KSAhPT0gJ2JvZHknO1xuICB9KTtcbn0gLy8gR2V0cyB0aGUgbWF4aW11bSBhcmVhIHRoYXQgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiBkdWUgdG8gYW55IG51bWJlciBvZlxuLy8gY2xpcHBpbmcgcGFyZW50c1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENsaXBwaW5nUmVjdChlbGVtZW50LCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5LCBzdHJhdGVneSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGZpcnN0Q2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KSk7XG4gIGNsaXBwaW5nUmVjdC53aWR0aCA9IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QuaGVpZ2h0ID0gY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3A7XG4gIGNsaXBwaW5nUmVjdC54ID0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC55ID0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgcmV0dXJuIGNsaXBwaW5nUmVjdDtcbn0iLCAiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4vZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIHN0YXJ0LCBlbmQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHJlZmVyZW5jZSA9IF9yZWYucmVmZXJlbmNlLFxuICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudCA/IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA6IG51bGw7XG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQgPyBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA6IG51bGw7XG4gIHZhciBjb21tb25YID0gcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGggLyAyIC0gZWxlbWVudC53aWR0aCAvIDI7XG4gIHZhciBjb21tb25ZID0gcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0IC8gMiAtIGVsZW1lbnQuaGVpZ2h0IC8gMjtcbiAgdmFyIG9mZnNldHM7XG5cbiAgc3dpdGNoIChiYXNlUGxhY2VtZW50KSB7XG4gICAgY2FzZSB0b3A6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSAtIGVsZW1lbnQuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIGJvdHRvbTpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSByaWdodDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIGxlZnQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCAtIGVsZW1lbnQud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnlcbiAgICAgIH07XG4gIH1cblxuICB2YXIgbWFpbkF4aXMgPSBiYXNlUGxhY2VtZW50ID8gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpIDogbnVsbDtcblxuICBpZiAobWFpbkF4aXMgIT0gbnVsbCkge1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gICAgc3dpdGNoICh2YXJpYXRpb24pIHtcbiAgICAgIGNhc2Ugc3RhcnQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gLSAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGVuZDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSArIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59IiwgImltcG9ydCBnZXRDbGlwcGluZ1JlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDbGlwcGluZ1JlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tIFwiLi9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSBcIi4vcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgY2xpcHBpbmdQYXJlbnRzLCByZWZlcmVuY2UsIHBvcHBlciwgYm90dG9tLCB0b3AsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdmlld3BvcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4vZXhwYW5kVG9IYXNoTWFwLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IHN0YXRlLnBsYWNlbWVudCA6IF9vcHRpb25zJHBsYWNlbWVudCxcbiAgICAgIF9vcHRpb25zJHN0cmF0ZWd5ID0gX29wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBzdHJhdGVneSA9IF9vcHRpb25zJHN0cmF0ZWd5ID09PSB2b2lkIDAgPyBzdGF0ZS5zdHJhdGVneSA6IF9vcHRpb25zJHN0cmF0ZWd5LFxuICAgICAgX29wdGlvbnMkYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMkYm91bmRhcnkgPT09IHZvaWQgMCA/IGNsaXBwaW5nUGFyZW50cyA6IF9vcHRpb25zJGJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyB2aWV3cG9ydCA6IF9vcHRpb25zJHJvb3RCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGVsZW1lbnRDb250ZSA9IF9vcHRpb25zLmVsZW1lbnRDb250ZXh0LFxuICAgICAgZWxlbWVudENvbnRleHQgPSBfb3B0aW9ucyRlbGVtZW50Q29udGUgPT09IHZvaWQgMCA/IHBvcHBlciA6IF9vcHRpb25zJGVsZW1lbnRDb250ZSxcbiAgICAgIF9vcHRpb25zJGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IF9vcHRpb25zJGFsdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMkcGFkZGluZyA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHBhZGRpbmc7XG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbiAgdmFyIGFsdENvbnRleHQgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcmVmZXJlbmNlIDogcG9wcGVyO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1thbHRCb3VuZGFyeSA/IGFsdENvbnRleHQgOiBlbGVtZW50Q29udGV4dF07XG4gIHZhciBjbGlwcGluZ0NsaWVudFJlY3QgPSBnZXRDbGlwcGluZ1JlY3QoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudCA6IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgfHwgZ2V0RG9jdW1lbnRFbGVtZW50KHN0YXRlLmVsZW1lbnRzLnBvcHBlciksIGJvdW5kYXJ5LCByb290Qm91bmRhcnksIHN0cmF0ZWd5KTtcbiAgdmFyIHJlZmVyZW5jZUNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qoc3RhdGUuZWxlbWVudHMucmVmZXJlbmNlKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiByZWZlcmVuY2VDbGllbnRSZWN0LFxuICAgIGVsZW1lbnQ6IHBvcHBlclJlY3QsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSk7XG4gIHZhciBwb3BwZXJDbGllbnRSZWN0ID0gcmVjdFRvQ2xpZW50UmVjdChPYmplY3QuYXNzaWduKHt9LCBwb3BwZXJSZWN0LCBwb3BwZXJPZmZzZXRzKSk7XG4gIHZhciBlbGVtZW50Q2xpZW50UmVjdCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyBwb3BwZXJDbGllbnRSZWN0IDogcmVmZXJlbmNlQ2xpZW50UmVjdDsgLy8gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgY2xpcHBpbmcgcmVjdFxuICAvLyAwIG9yIG5lZ2F0aXZlID0gd2l0aGluIHRoZSBjbGlwcGluZyByZWN0XG5cbiAgdmFyIG92ZXJmbG93T2Zmc2V0cyA9IHtcbiAgICB0b3A6IGNsaXBwaW5nQ2xpZW50UmVjdC50b3AgLSBlbGVtZW50Q2xpZW50UmVjdC50b3AgKyBwYWRkaW5nT2JqZWN0LnRvcCxcbiAgICBib3R0b206IGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSAtIGNsaXBwaW5nQ2xpZW50UmVjdC5ib3R0b20gKyBwYWRkaW5nT2JqZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiBjbGlwcGluZ0NsaWVudFJlY3QubGVmdCAtIGVsZW1lbnRDbGllbnRSZWN0LmxlZnQgKyBwYWRkaW5nT2JqZWN0LmxlZnQsXG4gICAgcmlnaHQ6IGVsZW1lbnRDbGllbnRSZWN0LnJpZ2h0IC0gY2xpcHBpbmdDbGllbnRSZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodFxuICB9O1xuICB2YXIgb2Zmc2V0RGF0YSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0OyAvLyBPZmZzZXRzIGNhbiBiZSBhcHBsaWVkIG9ubHkgdG8gdGhlIHBvcHBlciBlbGVtZW50XG5cbiAgaWYgKGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgJiYgb2Zmc2V0RGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSBvZmZzZXREYXRhW3BsYWNlbWVudF07XG4gICAgT2JqZWN0LmtleXMob3ZlcmZsb3dPZmZzZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtdWx0aXBseSA9IFtyaWdodCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/IDEgOiAtMTtcbiAgICAgIHZhciBheGlzID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/ICd5JyA6ICd4JztcbiAgICAgIG92ZXJmbG93T2Zmc2V0c1trZXldICs9IG9mZnNldFtheGlzXSAqIG11bHRpcGx5O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG92ZXJmbG93T2Zmc2V0cztcbn0iLCAiaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCB7IHZhcmlhdGlvblBsYWNlbWVudHMsIGJhc2VQbGFjZW1lbnRzLCBwbGFjZW1lbnRzIGFzIGFsbFBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgX29wdGlvbnMkYWxsb3dlZEF1dG9QID0gX29wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gX29wdGlvbnMkYWxsb3dlZEF1dG9QID09PSB2b2lkIDAgPyBhbGxQbGFjZW1lbnRzIDogX29wdGlvbnMkYWxsb3dlZEF1dG9QO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCk7XG4gIHZhciBwbGFjZW1lbnRzID0gdmFyaWF0aW9uID8gZmxpcFZhcmlhdGlvbnMgPyB2YXJpYXRpb25QbGFjZW1lbnRzIDogdmFyaWF0aW9uUGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gdmFyaWF0aW9uO1xuICB9KSA6IGJhc2VQbGFjZW1lbnRzO1xuICB2YXIgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFsbG93ZWRBdXRvUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCkgPj0gMDtcbiAgfSk7XG5cbiAgaWYgKGFsbG93ZWRQbGFjZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFRoZSBgYWxsb3dlZEF1dG9QbGFjZW1lbnRzYCBvcHRpb24gZGlkIG5vdCBhbGxvdyBhbnknLCAncGxhY2VtZW50cy4gRW5zdXJlIHRoZSBgcGxhY2VtZW50YCBvcHRpb24gbWF0Y2hlcyB0aGUgdmFyaWF0aW9uJywgJ29mIHRoZSBhbGxvd2VkIHBsYWNlbWVudHMuJywgJ0ZvciBleGFtcGxlLCBcImF1dG9cIiBjYW5ub3QgYmUgdXNlZCB0byBhbGxvdyBcImJvdHRvbS1zdGFydFwiLicsICdVc2UgXCJhdXRvLXN0YXJ0XCIgaW5zdGVhZC4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXTogRmxvdyBzZWVtcyB0byBoYXZlIHByb2JsZW1zIHdpdGggdHdvIGFycmF5IHVuaW9ucy4uLlxuXG5cbiAgdmFyIG92ZXJmbG93cyA9IGFsbG93ZWRQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pW2dldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmtleXMob3ZlcmZsb3dzKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93c1thXSAtIG92ZXJmbG93c1tiXTtcbiAgfSk7XG59IiwgImltcG9ydCBnZXRPcHBvc2l0ZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyBib3R0b20sIHRvcCwgc3RhcnQsIHJpZ2h0LCBsZWZ0LCBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5mdW5jdGlvbiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwbGFjZW1lbnQpIHtcbiAgaWYgKGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBvcHBvc2l0ZVBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHJldHVybiBbZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSwgb3Bwb3NpdGVQbGFjZW1lbnQsIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KG9wcG9zaXRlUGxhY2VtZW50KV07XG59XG5cbmZ1bmN0aW9uIGZsaXAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgPSBvcHRpb25zLmZhbGxiYWNrUGxhY2VtZW50cyxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9IG9wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGZsaXBWYXJpYXRpbyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IG9wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzO1xuICB2YXIgcHJlZmVycmVkUGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gYmFzZVBsYWNlbWVudCA9PT0gcHJlZmVycmVkUGxhY2VtZW50O1xuICB2YXIgZmFsbGJhY2tQbGFjZW1lbnRzID0gc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIHx8IChpc0Jhc2VQbGFjZW1lbnQgfHwgIWZsaXBWYXJpYXRpb25zID8gW2dldE9wcG9zaXRlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCldIDogZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocHJlZmVycmVkUGxhY2VtZW50KSk7XG4gIHZhciBwbGFjZW1lbnRzID0gW3ByZWZlcnJlZFBsYWNlbWVudF0uY29uY2F0KGZhbGxiYWNrUGxhY2VtZW50cykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0byA/IGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zOiBmbGlwVmFyaWF0aW9ucyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50czogYWxsb3dlZEF1dG9QbGFjZW1lbnRzXG4gICAgfSkgOiBwbGFjZW1lbnQpO1xuICB9LCBbXSk7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGNoZWNrc01hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIG1ha2VGYWxsYmFja0NoZWNrcyA9IHRydWU7XG4gIHZhciBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzWzBdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGxhY2VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwbGFjZW1lbnQgPSBwbGFjZW1lbnRzW2ldO1xuXG4gICAgdmFyIF9iYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIGlzU3RhcnRWYXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gc3RhcnQ7XG4gICAgdmFyIGlzVmVydGljYWwgPSBbdG9wLCBib3R0b21dLmluZGV4T2YoX2Jhc2VQbGFjZW1lbnQpID49IDA7XG4gICAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gICAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSk7XG4gICAgdmFyIG1haW5WYXJpYXRpb25TaWRlID0gaXNWZXJ0aWNhbCA/IGlzU3RhcnRWYXJpYXRpb24gPyByaWdodCA6IGxlZnQgOiBpc1N0YXJ0VmFyaWF0aW9uID8gYm90dG9tIDogdG9wO1xuXG4gICAgaWYgKHJlZmVyZW5jZVJlY3RbbGVuXSA+IHBvcHBlclJlY3RbbGVuXSkge1xuICAgICAgbWFpblZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgfVxuXG4gICAgdmFyIGFsdFZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgdmFyIGNoZWNrcyA9IFtdO1xuXG4gICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W19iYXNlUGxhY2VtZW50XSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1ttYWluVmFyaWF0aW9uU2lkZV0gPD0gMCwgb3ZlcmZsb3dbYWx0VmFyaWF0aW9uU2lkZV0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrcy5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgIHJldHVybiBjaGVjaztcbiAgICB9KSkge1xuICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50O1xuICAgICAgbWFrZUZhbGxiYWNrQ2hlY2tzID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjaGVja3NNYXAuc2V0KHBsYWNlbWVudCwgY2hlY2tzKTtcbiAgfVxuXG4gIGlmIChtYWtlRmFsbGJhY2tDaGVja3MpIHtcbiAgICAvLyBgMmAgbWF5IGJlIGRlc2lyZWQgaW4gc29tZSBjYXNlcyDigJMgcmVzZWFyY2ggbGF0ZXJcbiAgICB2YXIgbnVtYmVyT2ZDaGVja3MgPSBmbGlwVmFyaWF0aW9ucyA/IDMgOiAxO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2kpIHtcbiAgICAgIHZhciBmaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50cy5maW5kKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICAgICAgdmFyIGNoZWNrcyA9IGNoZWNrc01hcC5nZXQocGxhY2VtZW50KTtcblxuICAgICAgICBpZiAoY2hlY2tzKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrcy5zbGljZSgwLCBfaSkuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2s7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZml0dGluZ1BsYWNlbWVudCkge1xuICAgICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBmaXR0aW5nUGxhY2VtZW50O1xuICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBfaSA9IG51bWJlck9mQ2hlY2tzOyBfaSA+IDA7IF9pLS0pIHtcbiAgICAgIHZhciBfcmV0ID0gX2xvb3AoX2kpO1xuXG4gICAgICBpZiAoX3JldCA9PT0gXCJicmVha1wiKSBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUucGxhY2VtZW50ICE9PSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwID0gdHJ1ZTtcbiAgICBzdGF0ZS5wbGFjZW1lbnQgPSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgc3RhdGUucmVzZXQgPSB0cnVlO1xuICB9XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdmbGlwJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGZsaXAsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J10sXG4gIGRhdGE6IHtcbiAgICBfc2tpcDogZmFsc2VcbiAgfVxufTsiLCAiaW1wb3J0IHsgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5cbmZ1bmN0aW9uIGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKSB7XG4gIGlmIChwcmV2ZW50ZWRPZmZzZXRzID09PSB2b2lkIDApIHtcbiAgICBwcmV2ZW50ZWRPZmZzZXRzID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0IC0gcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGggKyBwcmV2ZW50ZWRPZmZzZXRzLngsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCArIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aCAtIHByZXZlbnRlZE9mZnNldHMueFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3cpIHtcbiAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLnNvbWUoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dbc2lkZV0gPj0gMDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhpZGUoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgcHJldmVudGVkT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93O1xuICB2YXIgcmVmZXJlbmNlT3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGVsZW1lbnRDb250ZXh0OiAncmVmZXJlbmNlJ1xuICB9KTtcbiAgdmFyIHBvcHBlckFsdE92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBhbHRCb3VuZGFyeTogdHJ1ZVxuICB9KTtcbiAgdmFyIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHJlZmVyZW5jZU92ZXJmbG93LCByZWZlcmVuY2VSZWN0KTtcbiAgdmFyIHBvcHBlckVzY2FwZU9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhwb3BwZXJBbHRPdmVyZmxvdywgcG9wcGVyUmVjdCwgcHJldmVudGVkT2Zmc2V0cyk7XG4gIHZhciBpc1JlZmVyZW5jZUhpZGRlbiA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMpO1xuICB2YXIgaGFzUG9wcGVyRXNjYXBlZCA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChwb3BwZXJFc2NhcGVPZmZzZXRzKTtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICByZWZlcmVuY2VDbGlwcGluZ09mZnNldHM6IHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyxcbiAgICBwb3BwZXJFc2NhcGVPZmZzZXRzOiBwb3BwZXJFc2NhcGVPZmZzZXRzLFxuICAgIGlzUmVmZXJlbmNlSGlkZGVuOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICBoYXNQb3BwZXJFc2NhcGVkOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH07XG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbic6IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgICdkYXRhLXBvcHBlci1lc2NhcGVkJzogaGFzUG9wcGVyRXNjYXBlZFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2hpZGUnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddLFxuICBmbjogaGlkZVxufTsiLCAiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIHBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCByZWN0cywgb2Zmc2V0KSB7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgaW52ZXJ0RGlzdGFuY2UgPSBbbGVmdCwgdG9wXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyAtMSA6IDE7XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gb2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSkpIDogb2Zmc2V0LFxuICAgICAgc2tpZGRpbmcgPSBfcmVmWzBdLFxuICAgICAgZGlzdGFuY2UgPSBfcmVmWzFdO1xuXG4gIHNraWRkaW5nID0gc2tpZGRpbmcgfHwgMDtcbiAgZGlzdGFuY2UgPSAoZGlzdGFuY2UgfHwgMCkgKiBpbnZlcnREaXN0YW5jZTtcbiAgcmV0dXJuIFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8ge1xuICAgIHg6IGRpc3RhbmNlLFxuICAgIHk6IHNraWRkaW5nXG4gIH0gOiB7XG4gICAgeDogc2tpZGRpbmcsXG4gICAgeTogZGlzdGFuY2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcbiAgdmFyIF9vcHRpb25zJG9mZnNldCA9IG9wdGlvbnMub2Zmc2V0LFxuICAgICAgb2Zmc2V0ID0gX29wdGlvbnMkb2Zmc2V0ID09PSB2b2lkIDAgPyBbMCwgMF0gOiBfb3B0aW9ucyRvZmZzZXQ7XG4gIHZhciBkYXRhID0gcGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHN0YXRlLnJlY3RzLCBvZmZzZXQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgdmFyIF9kYXRhJHN0YXRlJHBsYWNlbWVudCA9IGRhdGFbc3RhdGUucGxhY2VtZW50XSxcbiAgICAgIHggPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueCxcbiAgICAgIHkgPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueCArPSB4O1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy55ICs9IHk7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ29mZnNldCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgZm46IG9mZnNldFxufTsiLCAiaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuLi91dGlscy9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuXG5mdW5jdGlvbiBwb3BwZXJPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIC8vIE9mZnNldHMgYXJlIHRoZSBhY3R1YWwgcG9zaXRpb24gdGhlIHBvcHBlciBuZWVkcyB0byBoYXZlIHRvIGJlXG4gIC8vIHByb3Blcmx5IHBvc2l0aW9uZWQgbmVhciBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBiYXNpYyBwbGFjZW1lbnQsIGFuZCB3aWxsIGJlIGFkanVzdGVkIGJ5XG4gIC8vIHRoZSBtb2RpZmllcnMgaW4gdGhlIG5leHQgc3RlcFxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogc3RhdGUucmVjdHMucmVmZXJlbmNlLFxuICAgIGVsZW1lbnQ6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3BvcHBlck9mZnNldHMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3JlYWQnLFxuICBmbjogcG9wcGVyT2Zmc2V0cyxcbiAgZGF0YToge31cbn07IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFsdEF4aXMoYXhpcykge1xuICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xufSIsICJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHN0YXJ0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QWx0QXhpcyBmcm9tIFwiLi4vdXRpbHMvZ2V0QWx0QXhpcy5qc1wiO1xuaW1wb3J0IHsgd2l0aGluLCB3aXRoaW5NYXhDbGFtcCB9IGZyb20gXCIuLi91dGlscy93aXRoaW4uanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuLi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmltcG9ydCB7IG1pbiBhcyBtYXRoTWluLCBtYXggYXMgbWF0aE1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIF9vcHRpb25zJHRldGhlciA9IG9wdGlvbnMudGV0aGVyLFxuICAgICAgdGV0aGVyID0gX29wdGlvbnMkdGV0aGVyID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkdGV0aGVyLFxuICAgICAgX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID0gb3B0aW9ucy50ZXRoZXJPZmZzZXQsXG4gICAgICB0ZXRoZXJPZmZzZXQgPSBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQ7XG4gIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5XG4gIH0pO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gIXZhcmlhdGlvbjtcbiAgdmFyIG1haW5BeGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgdGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gdGV0aGVyT2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSkpIDogdGV0aGVyT2Zmc2V0O1xuICB2YXIgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldFZhbHVlID09PSAnbnVtYmVyJyA/IHtcbiAgICBtYWluQXhpczogdGV0aGVyT2Zmc2V0VmFsdWUsXG4gICAgYWx0QXhpczogdGV0aGVyT2Zmc2V0VmFsdWVcbiAgfSA6IE9iamVjdC5hc3NpZ24oe1xuICAgIG1haW5BeGlzOiAwLFxuICAgIGFsdEF4aXM6IDBcbiAgfSwgdGV0aGVyT2Zmc2V0VmFsdWUpO1xuICB2YXIgb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0ID8gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXRbc3RhdGUucGxhY2VtZW50XSA6IG51bGw7XG4gIHZhciBkYXRhID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmICghcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclN0YXRlJDtcblxuICAgIHZhciBtYWluU2lkZSA9IG1haW5BeGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICAgIHZhciBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBvZmZzZXQgPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXTtcbiAgICB2YXIgbWluID0gb2Zmc2V0ICsgb3ZlcmZsb3dbbWFpblNpZGVdO1xuICAgIHZhciBtYXggPSBvZmZzZXQgLSBvdmVyZmxvd1thbHRTaWRlXTtcbiAgICB2YXIgYWRkaXRpdmUgPSB0ZXRoZXIgPyAtcG9wcGVyUmVjdFtsZW5dIC8gMiA6IDA7XG4gICAgdmFyIG1pbkxlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gOiBwb3BwZXJSZWN0W2xlbl07XG4gICAgdmFyIG1heExlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyAtcG9wcGVyUmVjdFtsZW5dIDogLXJlZmVyZW5jZVJlY3RbbGVuXTsgLy8gV2UgbmVlZCB0byBpbmNsdWRlIHRoZSBhcnJvdyBpbiB0aGUgY2FsY3VsYXRpb24gc28gdGhlIGFycm93IGRvZXNuJ3QgZ29cbiAgICAvLyBvdXRzaWRlIHRoZSByZWZlcmVuY2UgYm91bmRzXG5cbiAgICB2YXIgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gICAgdmFyIGFycm93UmVjdCA9IHRldGhlciAmJiBhcnJvd0VsZW1lbnQgPyBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgdmFyIGFycm93UGFkZGluZ09iamVjdCA9IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXSA/IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXS5wYWRkaW5nIDogZ2V0RnJlc2hTaWRlT2JqZWN0KCk7XG4gICAgdmFyIGFycm93UGFkZGluZ01pbiA9IGFycm93UGFkZGluZ09iamVjdFttYWluU2lkZV07XG4gICAgdmFyIGFycm93UGFkZGluZ01heCA9IGFycm93UGFkZGluZ09iamVjdFthbHRTaWRlXTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBsZW5ndGggaXMgc21hbGxlciB0aGFuIHRoZSBhcnJvdyBsZW5ndGgsIHdlIGRvbid0IHdhbnRcbiAgICAvLyB0byBpbmNsdWRlIGl0cyBmdWxsIHNpemUgaW4gdGhlIGNhbGN1bGF0aW9uLiBJZiB0aGUgcmVmZXJlbmNlIGlzIHNtYWxsXG4gICAgLy8gYW5kIG5lYXIgdGhlIGVkZ2Ugb2YgYSBib3VuZGFyeSwgdGhlIHBvcHBlciBjYW4gb3ZlcmZsb3cgZXZlbiBpZiB0aGVcbiAgICAvLyByZWZlcmVuY2UgaXMgbm90IG92ZXJmbG93aW5nIGFzIHdlbGwgKGUuZy4gdmlydHVhbCBlbGVtZW50cyB3aXRoIG5vXG4gICAgLy8gd2lkdGggb3IgaGVpZ2h0KVxuXG4gICAgdmFyIGFycm93TGVuID0gd2l0aGluKDAsIHJlZmVyZW5jZVJlY3RbbGVuXSwgYXJyb3dSZWN0W2xlbl0pO1xuICAgIHZhciBtaW5PZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gLyAyIC0gYWRkaXRpdmUgLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcyA6IG1pbkxlbiAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzO1xuICAgIHZhciBtYXhPZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyAtcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiArIGFkZGl0aXZlICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXMgOiBtYXhMZW4gKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcztcbiAgICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdyAmJiBnZXRPZmZzZXRQYXJlbnQoc3RhdGUuZWxlbWVudHMuYXJyb3cpO1xuICAgIHZhciBjbGllbnRPZmZzZXQgPSBhcnJvd09mZnNldFBhcmVudCA/IG1haW5BeGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRUb3AgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudExlZnQgfHwgMCA6IDA7XG4gICAgdmFyIG9mZnNldE1vZGlmaWVyVmFsdWUgPSAoX29mZnNldE1vZGlmaWVyU3RhdGUkID0gb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb2Zmc2V0TW9kaWZpZXJTdGF0ZVttYWluQXhpc10pICE9IG51bGwgPyBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQgOiAwO1xuICAgIHZhciB0ZXRoZXJNaW4gPSBvZmZzZXQgKyBtaW5PZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlIC0gY2xpZW50T2Zmc2V0O1xuICAgIHZhciB0ZXRoZXJNYXggPSBvZmZzZXQgKyBtYXhPZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlO1xuICAgIHZhciBwcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4odGV0aGVyID8gbWF0aE1pbihtaW4sIHRldGhlck1pbikgOiBtaW4sIG9mZnNldCwgdGV0aGVyID8gbWF0aE1heChtYXgsIHRldGhlck1heCkgOiBtYXgpO1xuICAgIHBvcHBlck9mZnNldHNbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0IC0gb2Zmc2V0O1xuICB9XG5cbiAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyO1xuXG4gICAgdmFyIF9tYWluU2lkZSA9IG1haW5BeGlzID09PSAneCcgPyB0b3AgOiBsZWZ0O1xuXG4gICAgdmFyIF9hbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuXG4gICAgdmFyIF9vZmZzZXQgPSBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdO1xuXG4gICAgdmFyIF9sZW4gPSBhbHRBeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICB2YXIgX21pbiA9IF9vZmZzZXQgKyBvdmVyZmxvd1tfbWFpblNpZGVdO1xuXG4gICAgdmFyIF9tYXggPSBfb2Zmc2V0IC0gb3ZlcmZsb3dbX2FsdFNpZGVdO1xuXG4gICAgdmFyIGlzT3JpZ2luU2lkZSA9IFt0b3AsIGxlZnRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclZhbHVlID0gKF9vZmZzZXRNb2RpZmllclN0YXRlJDIgPSBvZmZzZXRNb2RpZmllclN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBvZmZzZXRNb2RpZmllclN0YXRlW2FsdEF4aXNdKSAhPSBudWxsID8gX29mZnNldE1vZGlmaWVyU3RhdGUkMiA6IDA7XG5cbiAgICB2YXIgX3RldGhlck1pbiA9IGlzT3JpZ2luU2lkZSA/IF9taW4gOiBfb2Zmc2V0IC0gcmVmZXJlbmNlUmVjdFtfbGVuXSAtIHBvcHBlclJlY3RbX2xlbl0gLSBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzO1xuXG4gICAgdmFyIF90ZXRoZXJNYXggPSBpc09yaWdpblNpZGUgPyBfb2Zmc2V0ICsgcmVmZXJlbmNlUmVjdFtfbGVuXSArIHBvcHBlclJlY3RbX2xlbl0gLSBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzIDogX21heDtcblxuICAgIHZhciBfcHJldmVudGVkT2Zmc2V0ID0gdGV0aGVyICYmIGlzT3JpZ2luU2lkZSA/IHdpdGhpbk1heENsYW1wKF90ZXRoZXJNaW4sIF9vZmZzZXQsIF90ZXRoZXJNYXgpIDogd2l0aGluKHRldGhlciA/IF90ZXRoZXJNaW4gOiBfbWluLCBfb2Zmc2V0LCB0ZXRoZXIgPyBfdGV0aGVyTWF4IDogX21heCk7XG5cbiAgICBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldCAtIF9vZmZzZXQ7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J11cbn07IiwgImV4cG9ydCB7IGRlZmF1bHQgYXMgYXBwbHlTdHlsZXMgfSBmcm9tIFwiLi9hcHBseVN0eWxlcy5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBhcnJvdyB9IGZyb20gXCIuL2Fycm93LmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNvbXB1dGVTdHlsZXMgfSBmcm9tIFwiLi9jb21wdXRlU3R5bGVzLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGV2ZW50TGlzdGVuZXJzIH0gZnJvbSBcIi4vZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmxpcCB9IGZyb20gXCIuL2ZsaXAuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaGlkZSB9IGZyb20gXCIuL2hpZGUuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb2Zmc2V0IH0gZnJvbSBcIi4vb2Zmc2V0LmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBvcHBlck9mZnNldHMgfSBmcm9tIFwiLi9wb3BwZXJPZmZzZXRzLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHByZXZlbnRPdmVyZmxvdyB9IGZyb20gXCIuL3ByZXZlbnRPdmVyZmxvdy5qc1wiOyIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRIVE1MRWxlbWVudFNjcm9sbChlbGVtZW50KSB7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogZWxlbWVudC5zY3JvbGxUb3BcbiAgfTtcbn0iLCAiaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEhUTUxFbGVtZW50U2Nyb2xsIGZyb20gXCIuL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59IiwgImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZVNjcm9sbCBmcm9tIFwiLi9nZXROb2RlU2Nyb2xsLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudFNjYWxlZChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNjYWxlWCA9IHJvdW5kKHJlY3Qud2lkdGgpIC8gZWxlbWVudC5vZmZzZXRXaWR0aCB8fCAxO1xuICB2YXIgc2NhbGVZID0gcm91bmQocmVjdC5oZWlnaHQpIC8gZWxlbWVudC5vZmZzZXRIZWlnaHQgfHwgMTtcbiAgcmV0dXJuIHNjYWxlWCAhPT0gMSB8fCBzY2FsZVkgIT09IDE7XG59IC8vIFJldHVybnMgdGhlIGNvbXBvc2l0ZSByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC5cbi8vIENvbXBvc2l0ZSBtZWFucyBpdCB0YWtlcyBpbnRvIGFjY291bnQgdHJhbnNmb3JtcyBhcyB3ZWxsIGFzIGxheW91dC5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wb3NpdGVSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50LCBvZmZzZXRQYXJlbnQsIGlzRml4ZWQpIHtcbiAgaWYgKGlzRml4ZWQgPT09IHZvaWQgMCkge1xuICAgIGlzRml4ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciBpc09mZnNldFBhcmVudEFuRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudElzU2NhbGVkID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGlzRWxlbWVudFNjYWxlZChvZmZzZXRQYXJlbnQpO1xuICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50LCBvZmZzZXRQYXJlbnRJc1NjYWxlZCwgaXNGaXhlZCk7XG4gIHZhciBzY3JvbGwgPSB7XG4gICAgc2Nyb2xsTGVmdDogMCxcbiAgICBzY3JvbGxUb3A6IDBcbiAgfTtcbiAgdmFyIG9mZnNldHMgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50IHx8ICFpc09mZnNldFBhcmVudEFuRWxlbWVudCAmJiAhaXNGaXhlZCkge1xuICAgIGlmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpICE9PSAnYm9keScgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy8xMDc4XG4gICAgaXNTY3JvbGxQYXJlbnQoZG9jdW1lbnRFbGVtZW50KSkge1xuICAgICAgc2Nyb2xsID0gZ2V0Tm9kZVNjcm9sbChvZmZzZXRQYXJlbnQpO1xuICAgIH1cblxuICAgIGlmIChpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcbiAgICAgIG9mZnNldHMgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50LCB0cnVlKTtcbiAgICAgIG9mZnNldHMueCArPSBvZmZzZXRQYXJlbnQuY2xpZW50TGVmdDtcbiAgICAgIG9mZnNldHMueSArPSBvZmZzZXRQYXJlbnQuY2xpZW50VG9wO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBvZmZzZXRzLnggPSBnZXRXaW5kb3dTY3JvbGxCYXJYKGRvY3VtZW50RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiByZWN0LmxlZnQgKyBzY3JvbGwuc2Nyb2xsTGVmdCAtIG9mZnNldHMueCxcbiAgICB5OiByZWN0LnRvcCArIHNjcm9sbC5zY3JvbGxUb3AgLSBvZmZzZXRzLnksXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodFxuICB9O1xufSIsICJpbXBvcnQgeyBtb2RpZmllclBoYXNlcyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiOyAvLyBzb3VyY2U6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ5ODc1MjU1XG5cbmZ1bmN0aW9uIG9yZGVyKG1vZGlmaWVycykge1xuICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICB2YXIgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBtYXAuc2V0KG1vZGlmaWVyLm5hbWUsIG1vZGlmaWVyKTtcbiAgfSk7IC8vIE9uIHZpc2l0aW5nIG9iamVjdCwgY2hlY2sgZm9yIGl0cyBkZXBlbmRlbmNpZXMgYW5kIHZpc2l0IHRoZW0gcmVjdXJzaXZlbHlcblxuICBmdW5jdGlvbiBzb3J0KG1vZGlmaWVyKSB7XG4gICAgdmlzaXRlZC5hZGQobW9kaWZpZXIubmFtZSk7XG4gICAgdmFyIHJlcXVpcmVzID0gW10uY29uY2F0KG1vZGlmaWVyLnJlcXVpcmVzIHx8IFtdLCBtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzIHx8IFtdKTtcbiAgICByZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIGlmICghdmlzaXRlZC5oYXMoZGVwKSkge1xuICAgICAgICB2YXIgZGVwTW9kaWZpZXIgPSBtYXAuZ2V0KGRlcCk7XG5cbiAgICAgICAgaWYgKGRlcE1vZGlmaWVyKSB7XG4gICAgICAgICAgc29ydChkZXBNb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXN1bHQucHVzaChtb2RpZmllcik7XG4gIH1cblxuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAoIXZpc2l0ZWQuaGFzKG1vZGlmaWVyLm5hbWUpKSB7XG4gICAgICAvLyBjaGVjayBmb3IgdmlzaXRlZCBvYmplY3RcbiAgICAgIHNvcnQobW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yZGVyTW9kaWZpZXJzKG1vZGlmaWVycykge1xuICAvLyBvcmRlciBiYXNlZCBvbiBkZXBlbmRlbmNpZXNcbiAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcihtb2RpZmllcnMpOyAvLyBvcmRlciBiYXNlZCBvbiBwaGFzZVxuXG4gIHJldHVybiBtb2RpZmllclBoYXNlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGhhc2UpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgIHJldHVybiBtb2RpZmllci5waGFzZSA9PT0gcGhhc2U7XG4gICAgfSkpO1xuICB9LCBbXSk7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlKGZuKSB7XG4gIHZhciBwZW5kaW5nO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVuZGluZztcbiAgfTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIGN1cnJlbnQsIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLm9wdGlvbnMsIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5kYXRhLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59IiwgImltcG9ydCBnZXRDb21wb3NpdGVSZWN0IGZyb20gXCIuL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGxpc3RTY3JvbGxQYXJlbnRzIGZyb20gXCIuL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IG9yZGVyTW9kaWZpZXJzIGZyb20gXCIuL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzXCI7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSBcIi4vdXRpbHMvZGVib3VuY2UuanNcIjtcbmltcG9ydCB2YWxpZGF0ZU1vZGlmaWVycyBmcm9tIFwiLi91dGlscy92YWxpZGF0ZU1vZGlmaWVycy5qc1wiO1xuaW1wb3J0IHVuaXF1ZUJ5IGZyb20gXCIuL3V0aWxzL3VuaXF1ZUJ5LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgbWVyZ2VCeU5hbWUgZnJvbSBcIi4vdXRpbHMvbWVyZ2VCeU5hbWUuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCB7IGF1dG8gfSBmcm9tIFwiLi9lbnVtcy5qc1wiO1xudmFyIElOVkFMSURfRUxFTUVOVF9FUlJPUiA9ICdQb3BwZXI6IEludmFsaWQgcmVmZXJlbmNlIG9yIHBvcHBlciBhcmd1bWVudCBwcm92aWRlZC4gVGhleSBtdXN0IGJlIGVpdGhlciBhIERPTSBlbGVtZW50IG9yIHZpcnR1YWwgZWxlbWVudC4nO1xudmFyIElORklOSVRFX0xPT1BfRVJST1IgPSAnUG9wcGVyOiBBbiBpbmZpbml0ZSBsb29wIGluIHRoZSBtb2RpZmllcnMgY3ljbGUgaGFzIGJlZW4gZGV0ZWN0ZWQhIFRoZSBjeWNsZSBoYXMgYmVlbiBpbnRlcnJ1cHRlZCB0byBwcmV2ZW50IGEgYnJvd3NlciBjcmFzaC4nO1xudmFyIERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgbW9kaWZpZXJzOiBbXSxcbiAgc3RyYXRlZ3k6ICdhYnNvbHV0ZSdcbn07XG5cbmZ1bmN0aW9uIGFyZVZhbGlkRWxlbWVudHMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gIWFyZ3Muc29tZShmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiAhKGVsZW1lbnQgJiYgdHlwZW9mIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ID09PSAnZnVuY3Rpb24nKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3BwZXJHZW5lcmF0b3IoZ2VuZXJhdG9yT3B0aW9ucykge1xuICBpZiAoZ2VuZXJhdG9yT3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgZ2VuZXJhdG9yT3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9nZW5lcmF0b3JPcHRpb25zID0gZ2VuZXJhdG9yT3B0aW9ucyxcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRNb2RpZmllcnMsXG4gICAgICBkZWZhdWx0TW9kaWZpZXJzID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmID09PSB2b2lkIDAgPyBbXSA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZixcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIGRlZmF1bHRPcHRpb25zID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9PT0gdm9pZCAwID8gREVGQVVMVF9PUFRJT05TIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmMjtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlcihyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgb3JkZXJlZE1vZGlmaWVyczogW10sXG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMsIGRlZmF1bHRPcHRpb25zKSxcbiAgICAgIG1vZGlmaWVyc0RhdGE6IHt9LFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgcmVmZXJlbmNlOiByZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlcjogcG9wcGVyXG4gICAgICB9LFxuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBzdHlsZXM6IHt9XG4gICAgfTtcbiAgICB2YXIgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIHZhciBpc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHZhciBpbnN0YW5jZSA9IHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uIHNldE9wdGlvbnMoc2V0T3B0aW9uc0FjdGlvbikge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzZXRPcHRpb25zQWN0aW9uID09PSAnZnVuY3Rpb24nID8gc2V0T3B0aW9uc0FjdGlvbihzdGF0ZS5vcHRpb25zKSA6IHNldE9wdGlvbnNBY3Rpb247XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgc3RhdGUub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBzdGF0ZS5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGlzRWxlbWVudChyZWZlcmVuY2UpID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlKSA6IHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCkgOiBbXSxcbiAgICAgICAgICBwb3BwZXI6IGxpc3RTY3JvbGxQYXJlbnRzKHBvcHBlcilcbiAgICAgICAgfTsgLy8gT3JkZXJzIHRoZSBtb2RpZmllcnMgYmFzZWQgb24gdGhlaXIgZGVwZW5kZW5jaWVzIGFuZCBgcGhhc2VgXG4gICAgICAgIC8vIHByb3BlcnRpZXNcblxuICAgICAgICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyTW9kaWZpZXJzKG1lcmdlQnlOYW1lKFtdLmNvbmNhdChkZWZhdWx0TW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycykpKTsgLy8gU3RyaXAgb3V0IGRpc2FibGVkIG1vZGlmaWVyc1xuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBtLmVuYWJsZWQ7XG4gICAgICAgIH0pOyAvLyBWYWxpZGF0ZSB0aGUgcHJvdmlkZWQgbW9kaWZpZXJzIHNvIHRoYXQgdGhlIGNvbnN1bWVyIHdpbGwgZ2V0IHdhcm5lZFxuICAgICAgICAvLyBpZiBvbmUgb2YgdGhlIG1vZGlmaWVycyBpcyBpbnZhbGlkIGZvciBhbnkgcmVhc29uXG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHZhciBtb2RpZmllcnMgPSB1bmlxdWVCeShbXS5jb25jYXQob3JkZXJlZE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpO1xuXG4gICAgICAgICAgaWYgKGdldEJhc2VQbGFjZW1lbnQoc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgICAgICAgICB2YXIgZmxpcE1vZGlmaWVyID0gc3RhdGUub3JkZXJlZE1vZGlmaWVycy5maW5kKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWU7XG4gICAgICAgICAgICAgIHJldHVybiBuYW1lID09PSAnZmxpcCc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFmbGlwTW9kaWZpZXIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhdXRvXCIgcGxhY2VtZW50cyByZXF1aXJlIHRoZSBcImZsaXBcIiBtb2RpZmllciBiZScsICdwcmVzZW50IGFuZCBlbmFibGVkIHRvIHdvcmsuJ10uam9pbignICcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHBvcHBlciksXG4gICAgICAgICAgICAgIG1hcmdpblRvcCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblRvcCxcbiAgICAgICAgICAgICAgbWFyZ2luUmlnaHQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5SaWdodCxcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luQm90dG9tLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luTGVmdDsgLy8gV2Ugbm8gbG9uZ2VyIHRha2UgaW50byBhY2NvdW50IGBtYXJnaW5zYCBvbiB0aGUgcG9wcGVyLCBhbmQgaXQgY2FuXG4gICAgICAgICAgLy8gY2F1c2UgYnVncyB3aXRoIHBvc2l0aW9uaW5nLCBzbyB3ZSdsbCB3YXJuIHRoZSBjb25zdW1lclxuXG5cbiAgICAgICAgICBpZiAoW21hcmdpblRvcCwgbWFyZ2luUmlnaHQsIG1hcmdpbkJvdHRvbSwgbWFyZ2luTGVmdF0uc29tZShmdW5jdGlvbiAobWFyZ2luKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChtYXJnaW4pO1xuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IENTUyBcIm1hcmdpblwiIHN0eWxlcyBjYW5ub3QgYmUgdXNlZCB0byBhcHBseSBwYWRkaW5nJywgJ2JldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50IG9yIGJvdW5kYXJ5LicsICdUbyByZXBsaWNhdGUgbWFyZ2luLCB1c2UgdGhlIGBvZmZzZXRgIG1vZGlmaWVyLCBhcyB3ZWxsIGFzJywgJ3RoZSBgcGFkZGluZ2Agb3B0aW9uIGluIHRoZSBgcHJldmVudE92ZXJmbG93YCBhbmQgYGZsaXBgJywgJ21vZGlmaWVycy4nXS5qb2luKCcgJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bk1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgLy8gU3luYyB1cGRhdGUg4oCTIGl0IHdpbGwgYWx3YXlzIGJlIGV4ZWN1dGVkLCBldmVuIGlmIG5vdCBuZWNlc3NhcnkuIFRoaXNcbiAgICAgIC8vIGlzIHVzZWZ1bCBmb3IgbG93IGZyZXF1ZW5jeSB1cGRhdGVzIHdoZXJlIHN5bmMgYmVoYXZpb3Igc2ltcGxpZmllcyB0aGVcbiAgICAgIC8vIGxvZ2ljLlxuICAgICAgLy8gRm9yIGhpZ2ggZnJlcXVlbmN5IHVwZGF0ZXMgKGUuZy4gYHJlc2l6ZWAgYW5kIGBzY3JvbGxgIGV2ZW50cyksIGFsd2F5c1xuICAgICAgLy8gcHJlZmVyIHRoZSBhc3luYyBQb3BwZXIjdXBkYXRlIG1ldGhvZFxuICAgICAgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uIGZvcmNlVXBkYXRlKCkge1xuICAgICAgICBpZiAoaXNEZXN0cm95ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3N0YXRlJGVsZW1lbnRzID0gc3RhdGUuZWxlbWVudHMsXG4gICAgICAgICAgICByZWZlcmVuY2UgPSBfc3RhdGUkZWxlbWVudHMucmVmZXJlbmNlLFxuICAgICAgICAgICAgcG9wcGVyID0gX3N0YXRlJGVsZW1lbnRzLnBvcHBlcjsgLy8gRG9uJ3QgcHJvY2VlZCBpZiBgcmVmZXJlbmNlYCBvciBgcG9wcGVyYCBhcmUgbm90IHZhbGlkIGVsZW1lbnRzXG4gICAgICAgIC8vIGFueW1vcmVcblxuICAgICAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBTdG9yZSB0aGUgcmVmZXJlbmNlIGFuZCBwb3BwZXIgcmVjdHMgdG8gYmUgcmVhZCBieSBtb2RpZmllcnNcblxuXG4gICAgICAgIHN0YXRlLnJlY3RzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogZ2V0Q29tcG9zaXRlUmVjdChyZWZlcmVuY2UsIGdldE9mZnNldFBhcmVudChwb3BwZXIpLCBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnKSxcbiAgICAgICAgICBwb3BwZXI6IGdldExheW91dFJlY3QocG9wcGVyKVxuICAgICAgICB9OyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXNldCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUuIFRoZVxuICAgICAgICAvLyBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgdGhpcyBpcyB0aGUgYGZsaXBgIG1vZGlmaWVyIGNoYW5naW5nIHRoZVxuICAgICAgICAvLyBwbGFjZW1lbnQsIHdoaWNoIHRoZW4gbmVlZHMgdG8gcmUtcnVuIGFsbCB0aGUgbW9kaWZpZXJzLCBiZWNhdXNlIHRoZVxuICAgICAgICAvLyBsb2dpYyB3YXMgcHJldmlvdXNseSByYW4gZm9yIHRoZSBwcmV2aW91cyBwbGFjZW1lbnQgYW5kIGlzIHRoZXJlZm9yZVxuICAgICAgICAvLyBzdGFsZS9pbmNvcnJlY3RcblxuICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5wbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDsgLy8gT24gZWFjaCB1cGRhdGUgY3ljbGUsIHRoZSBgbW9kaWZpZXJzRGF0YWAgcHJvcGVydHkgZm9yIGVhY2ggbW9kaWZpZXJcbiAgICAgICAgLy8gaXMgZmlsbGVkIHdpdGggdGhlIGluaXRpYWwgZGF0YSBzcGVjaWZpZWQgYnkgdGhlIG1vZGlmaWVyLiBUaGlzIG1lYW5zXG4gICAgICAgIC8vIGl0IGRvZXNuJ3QgcGVyc2lzdCBhbmQgaXMgZnJlc2ggb24gZWFjaCB1cGRhdGUuXG4gICAgICAgIC8vIFRvIGVuc3VyZSBwZXJzaXN0ZW50IGRhdGEsIHVzZSBgJHtuYW1lfSNwZXJzaXN0ZW50YFxuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUubW9kaWZpZXJzRGF0YVttb2RpZmllci5uYW1lXSA9IE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVyLmRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9fZGVidWdfbG9vcHNfXyA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgX19kZWJ1Z19sb29wc19fICs9IDE7XG5cbiAgICAgICAgICAgIGlmIChfX2RlYnVnX2xvb3BzX18gPiAxMDApIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTkZJTklURV9MT09QX0VSUk9SKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN0YXRlLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfc3RhdGUkb3JkZXJlZE1vZGlmaWUgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzW2luZGV4XSxcbiAgICAgICAgICAgICAgZm4gPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUuZm4sXG4gICAgICAgICAgICAgIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUub3B0aW9ucyxcbiAgICAgICAgICAgICAgX29wdGlvbnMgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID09PSB2b2lkIDAgPyB7fSA6IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIsXG4gICAgICAgICAgICAgIG5hbWUgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUubmFtZTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN0YXRlID0gZm4oe1xuICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICAgIG9wdGlvbnM6IF9vcHRpb25zLFxuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICAgICAgICAgIH0pIHx8IHN0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEFzeW5jIGFuZCBvcHRpbWlzdGljYWxseSBvcHRpbWl6ZWQgdXBkYXRlIOKAkyBpdCB3aWxsIG5vdCBiZSBleGVjdXRlZCBpZlxuICAgICAgLy8gbm90IG5lY2Vzc2FyeSAoZGVib3VuY2VkIHRvIHJ1biBhdCBtb3N0IG9uY2UtcGVyLXRpY2spXG4gICAgICB1cGRhdGU6IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnNldE9wdGlvbnMob3B0aW9ucykudGhlbihmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIGlmICghaXNEZXN0cm95ZWQgJiYgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKSB7XG4gICAgICAgIG9wdGlvbnMub25GaXJzdFVwZGF0ZShzdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgYmVmb3JlIHRoZSBmaXJzdFxuICAgIC8vIHVwZGF0ZSBjeWNsZSBydW5zLiBUaGV5IHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHVwZGF0ZVxuICAgIC8vIGN5Y2xlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgbW9kaWZpZXIgYWRkcyBzb21lIHBlcnNpc3RlbnQgZGF0YSB0aGF0XG4gICAgLy8gb3RoZXIgbW9kaWZpZXJzIG5lZWQgdG8gdXNlLCBidXQgdGhlIG1vZGlmaWVyIGlzIHJ1biBhZnRlciB0aGUgZGVwZW5kZW50XG4gICAgLy8gb25lLlxuXG4gICAgZnVuY3Rpb24gcnVuTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgICAgICBfcmVmMyRvcHRpb25zID0gX3JlZjMub3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfcmVmMyRvcHRpb25zID09PSB2b2lkIDAgPyB7fSA6IF9yZWYzJG9wdGlvbnMsXG4gICAgICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3Q7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlZmZlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgY2xlYW51cEZuID0gZWZmZWN0KHtcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgbm9vcEZuID0gZnVuY3Rpb24gbm9vcEZuKCkge307XG5cbiAgICAgICAgICBlZmZlY3RDbGVhbnVwRm5zLnB1c2goY2xlYW51cEZuIHx8IG5vb3BGbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSk7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xufVxuZXhwb3J0IHZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgZGV0ZWN0T3ZlcmZsb3cgfTsiLCAiaW1wb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdyB9IGZyb20gXCIuL2NyZWF0ZVBvcHBlci5qc1wiO1xuaW1wb3J0IGV2ZW50TGlzdGVuZXJzIGZyb20gXCIuL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qc1wiO1xuaW1wb3J0IHBvcHBlck9mZnNldHMgZnJvbSBcIi4vbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanNcIjtcbmltcG9ydCBjb21wdXRlU3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzXCI7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzXCI7XG5pbXBvcnQgb2Zmc2V0IGZyb20gXCIuL21vZGlmaWVycy9vZmZzZXQuanNcIjtcbmltcG9ydCBmbGlwIGZyb20gXCIuL21vZGlmaWVycy9mbGlwLmpzXCI7XG5pbXBvcnQgcHJldmVudE92ZXJmbG93IGZyb20gXCIuL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBhcnJvdyBmcm9tIFwiLi9tb2RpZmllcnMvYXJyb3cuanNcIjtcbmltcG9ydCBoaWRlIGZyb20gXCIuL21vZGlmaWVycy9oaWRlLmpzXCI7XG52YXIgZGVmYXVsdE1vZGlmaWVycyA9IFtldmVudExpc3RlbmVycywgcG9wcGVyT2Zmc2V0cywgY29tcHV0ZVN0eWxlcywgYXBwbHlTdHlsZXMsIG9mZnNldCwgZmxpcCwgcHJldmVudE92ZXJmbG93LCBhcnJvdywgaGlkZV07XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciwgcG9wcGVyR2VuZXJhdG9yLCBkZWZhdWx0TW9kaWZpZXJzLCBkZXRlY3RPdmVyZmxvdyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciBhcyBjcmVhdGVQb3BwZXJMaXRlIH0gZnJvbSBcIi4vcG9wcGVyLWxpdGUuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgKiBmcm9tIFwiLi9tb2RpZmllcnMvaW5kZXguanNcIjsiLCAiaW1wb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdyB9IGZyb20gXCIuL2NyZWF0ZVBvcHBlci5qc1wiO1xuaW1wb3J0IGV2ZW50TGlzdGVuZXJzIGZyb20gXCIuL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qc1wiO1xuaW1wb3J0IHBvcHBlck9mZnNldHMgZnJvbSBcIi4vbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanNcIjtcbmltcG9ydCBjb21wdXRlU3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzXCI7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzXCI7XG52YXIgZGVmYXVsdE1vZGlmaWVycyA9IFtldmVudExpc3RlbmVycywgcG9wcGVyT2Zmc2V0cywgY29tcHV0ZVN0eWxlcywgYXBwbHlTdHlsZXNdO1xudmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzXG59KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTsiLCAiZXhwb3J0ICogZnJvbSBcIi4vZW51bXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21vZGlmaWVycy9pbmRleC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3csIGNyZWF0ZVBvcHBlciBhcyBjcmVhdGVQb3BwZXJCYXNlIH0gZnJvbSBcIi4vY3JlYXRlUG9wcGVyLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyIH0gZnJvbSBcIi4vcG9wcGVyLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyIGFzIGNyZWF0ZVBvcHBlckxpdGUgfSBmcm9tIFwiLi9wb3BwZXItbGl0ZS5qc1wiOyIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIHtcbiAgKG51bGwgPT0gYSB8fCBhID4gci5sZW5ndGgpICYmIChhID0gci5sZW5ndGgpO1xuICBmb3IgKHZhciBlID0gMCwgbiA9IEFycmF5KGEpOyBlIDwgYTsgZSsrKSBuW2VdID0gcltlXTtcbiAgcmV0dXJuIG47XG59XG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMocikge1xuICBpZiAoQXJyYXkuaXNBcnJheShyKSkgcmV0dXJuIHI7XG59XG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMocikge1xuICBpZiAoQXJyYXkuaXNBcnJheShyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHIpO1xufVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7XG4gIGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHtcbiAgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTtcbn1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7XG4gIGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHtcbiAgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7XG4gICAgdmFyIG8gPSByW3RdO1xuICAgIG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pO1xuICB9XG59XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkge1xuICByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6ICExXG4gIH0pLCBlO1xufVxuZnVuY3Rpb24gX2dldCgpIHtcbiAgcmV0dXJuIF9nZXQgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBSZWZsZWN0ICYmIFJlZmxlY3QuZ2V0ID8gUmVmbGVjdC5nZXQuYmluZCgpIDogZnVuY3Rpb24gKGUsIHQsIHIpIHtcbiAgICB2YXIgcCA9IF9zdXBlclByb3BCYXNlKGUsIHQpO1xuICAgIGlmIChwKSB7XG4gICAgICB2YXIgbiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocCwgdCk7XG4gICAgICByZXR1cm4gbi5nZXQgPyBuLmdldC5jYWxsKGFyZ3VtZW50cy5sZW5ndGggPCAzID8gZSA6IHIpIDogbi52YWx1ZTtcbiAgICB9XG4gIH0sIF9nZXQuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZih0KSB7XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO1xuICB9LCBfZ2V0UHJvdG90eXBlT2YodCk7XG59XG5mdW5jdGlvbiBfaW5oZXJpdHModCwgZSkge1xuICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlICYmIG51bGwgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGUgJiYgZS5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHQsXG4gICAgICB3cml0YWJsZTogITAsXG4gICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfVxuICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogITFcbiAgfSksIGUgJiYgX3NldFByb3RvdHlwZU9mKHQsIGUpO1xufVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gIH0gY2F0Y2ggKHQpIHt9XG4gIHJldHVybiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF0O1xuICB9KSgpO1xufVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShyKSB7XG4gIGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgbnVsbCAhPSByW1N5bWJvbC5pdGVyYXRvcl0gfHwgbnVsbCAhPSByW1wiQEBpdGVyYXRvclwiXSkgcmV0dXJuIEFycmF5LmZyb20ocik7XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQociwgbCkge1xuICB2YXIgdCA9IG51bGwgPT0gciA/IG51bGwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgcltTeW1ib2wuaXRlcmF0b3JdIHx8IHJbXCJAQGl0ZXJhdG9yXCJdO1xuICBpZiAobnVsbCAhPSB0KSB7XG4gICAgdmFyIGUsXG4gICAgICBuLFxuICAgICAgaSxcbiAgICAgIHUsXG4gICAgICBhID0gW10sXG4gICAgICBmID0gITAsXG4gICAgICBvID0gITE7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpID0gKHQgPSB0LmNhbGwocikpLm5leHQsIDAgPT09IGwpIHtcbiAgICAgICAgaWYgKE9iamVjdCh0KSAhPT0gdCkgcmV0dXJuO1xuICAgICAgICBmID0gITE7XG4gICAgICB9IGVsc2UgZm9yICg7ICEoZiA9IChlID0gaS5jYWxsKHQpKS5kb25lKSAmJiAoYS5wdXNoKGUudmFsdWUpLCBhLmxlbmd0aCAhPT0gbCk7IGYgPSAhMCk7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgbyA9ICEwLCBuID0gcjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFmICYmIG51bGwgIT0gdC5yZXR1cm4gJiYgKHUgPSB0LnJldHVybigpLCBPYmplY3QodSkgIT09IHUpKSByZXR1cm47XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAobykgdGhyb3cgbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH1cbn1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkge1xuICBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTtcbiAgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO1xuICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTtcbn1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0O1xuICB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7XG59XG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShyLCBlKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMocikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGUpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBlKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5mdW5jdGlvbiBfc3VwZXJQcm9wQmFzZSh0LCBvKSB7XG4gIGZvciAoOyAhe30uaGFzT3duUHJvcGVydHkuY2FsbCh0LCBvKSAmJiBudWxsICE9PSAodCA9IF9nZXRQcm90b3R5cGVPZih0KSk7KTtcbiAgcmV0dXJuIHQ7XG59XG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkocikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKHIpIHx8IF9pdGVyYWJsZVRvQXJyYXkocikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHtcbiAgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIHQgfHwgIXQpIHJldHVybiB0O1xuICB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHZvaWQgMCAhPT0gZSkge1xuICAgIHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiBpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHtcbiAgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gIHJldHVybiBcInN5bWJvbFwiID09IHR5cGVvZiBpID8gaSA6IGkgKyBcIlwiO1xufVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBhKSB7XG4gIGlmIChyKSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKTtcbiAgICB2YXIgdCA9IHt9LnRvU3RyaW5nLmNhbGwocikuc2xpY2UoOCwgLTEpO1xuICAgIHJldHVybiBcIk9iamVjdFwiID09PSB0ICYmIHIuY29uc3RydWN0b3IgJiYgKHQgPSByLmNvbnN0cnVjdG9yLm5hbWUpLCBcIk1hcFwiID09PSB0IHx8IFwiU2V0XCIgPT09IHQgPyBBcnJheS5mcm9tKHIpIDogXCJBcmd1bWVudHNcIiA9PT0gdCB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KSA/IF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIDogdm9pZCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1Byb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5mdW5jdGlvbiBsYXN0SXRlbU9mKGFycikge1xuICByZXR1cm4gYXJyW2Fyci5sZW5ndGggLSAxXTtcbn1cblxuLy8gcHVzaCBvbmx5IHRoZSBpdGVtcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFycmF5XG5mdW5jdGlvbiBwdXNoVW5pcXVlKGFycikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGl0ZW1zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGFyci5pbmNsdWRlcyhpdGVtKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhcnIucHVzaChpdGVtKTtcbiAgfSk7XG4gIHJldHVybiBhcnI7XG59XG5mdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0ciwgc2VwYXJhdG9yKSB7XG4gIC8vIGNvbnZlcnQgZW1wdHkgc3RyaW5nIHRvIGFuIGVtcHR5IGFycmF5XG4gIHJldHVybiBzdHIgPyBzdHIuc3BsaXQoc2VwYXJhdG9yKSA6IFtdO1xufVxuZnVuY3Rpb24gaXNJblJhbmdlKHRlc3RWYWwsIG1pbiwgbWF4KSB7XG4gIHZhciBtaW5PSyA9IG1pbiA9PT0gdW5kZWZpbmVkIHx8IHRlc3RWYWwgPj0gbWluO1xuICB2YXIgbWF4T0sgPSBtYXggPT09IHVuZGVmaW5lZCB8fCB0ZXN0VmFsIDw9IG1heDtcbiAgcmV0dXJuIG1pbk9LICYmIG1heE9LO1xufVxuZnVuY3Rpb24gbGltaXRUb1JhbmdlKHZhbCwgbWluLCBtYXgpIHtcbiAgaWYgKHZhbCA8IG1pbikge1xuICAgIHJldHVybiBtaW47XG4gIH1cbiAgaWYgKHZhbCA+IG1heCkge1xuICAgIHJldHVybiBtYXg7XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRhZ1JlcGVhdCh0YWdOYW1lLCByZXBlYXQpIHtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gIHZhciBodG1sID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAnJztcbiAgdmFyIG9wZW5UYWdTcmMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKHNyYywgYXR0cikge1xuICAgIHZhciB2YWwgPSBhdHRyaWJ1dGVzW2F0dHJdO1xuICAgIGlmICh0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWwgPSB2YWwoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gXCJcIi5jb25jYXQoc3JjLCBcIiBcIikuY29uY2F0KGF0dHIsIFwiPVxcXCJcIikuY29uY2F0KHZhbCwgXCJcXFwiXCIpO1xuICB9LCB0YWdOYW1lKTtcbiAgaHRtbCArPSBcIjxcIi5jb25jYXQob3BlblRhZ1NyYywgXCI+PC9cIikuY29uY2F0KHRhZ05hbWUsIFwiPlwiKTtcbiAgdmFyIG5leHQgPSBpbmRleCArIDE7XG4gIHJldHVybiBuZXh0IDwgcmVwZWF0ID8gY3JlYXRlVGFnUmVwZWF0KHRhZ05hbWUsIHJlcGVhdCwgYXR0cmlidXRlcywgbmV4dCwgaHRtbCkgOiBodG1sO1xufVxuXG4vLyBSZW1vdmUgdGhlIHNwYWNpbmcgc3Vycm91bmRpbmcgdGFncyBmb3IgSFRNTCBwYXJzZXIgbm90IHRvIGNyZWF0ZSB0ZXh0IG5vZGVzXG4vLyBiZWZvcmUvYWZ0ZXIgZWxlbWVudHNcbmZ1bmN0aW9uIG9wdGltaXplVGVtcGxhdGVIVE1MKGh0bWwpIHtcbiAgcmV0dXJuIGh0bWwucmVwbGFjZSgvPlxccysvZywgJz4nKS5yZXBsYWNlKC9cXHMrPC8sICc8Jyk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwVGltZSh0aW1lVmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVWYWx1ZSkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59XG5mdW5jdGlvbiB0b2RheSgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKCkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59XG5cbi8vIEdldCB0aGUgdGltZSB2YWx1ZSBvZiB0aGUgc3RhcnQgb2YgZ2l2ZW4gZGF0ZSBvciB5ZWFyLCBtb250aCBhbmQgZGF5XG5mdW5jdGlvbiBkYXRlVmFsdWUoKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiB0b2RheSgpO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBzdHJpcFRpbWUoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgfVxuXG4gIC8vIHVzZSBzZXRGdWxsWWVhcigpIHRvIGtlZXAgMi1kaWdpdCB5ZWFyIGZyb20gYmVpbmcgbWFwcGVkIHRvIDE5MDAtMTk5OVxuICB2YXIgbmV3RGF0ZSA9IG5ldyBEYXRlKDApO1xuICBuZXdEYXRlLnNldEZ1bGxZZWFyLmFwcGx5KG5ld0RhdGUsIGFyZ3VtZW50cyk7XG4gIHJldHVybiBuZXdEYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufVxuZnVuY3Rpb24gYWRkRGF5cyhkYXRlLCBhbW91bnQpIHtcbiAgdmFyIG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgcmV0dXJuIG5ld0RhdGUuc2V0RGF0ZShuZXdEYXRlLmdldERhdGUoKSArIGFtb3VudCk7XG59XG5mdW5jdGlvbiBhZGRXZWVrcyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZERheXMoZGF0ZSwgYW1vdW50ICogNyk7XG59XG5mdW5jdGlvbiBhZGRNb250aHMoZGF0ZSwgYW1vdW50KSB7XG4gIC8vIElmIHRoZSBkYXkgb2YgdGhlIGRhdGUgaXMgbm90IGluIHRoZSBuZXcgbW9udGgsIHRoZSBsYXN0IGRheSBvZiB0aGUgbmV3XG4gIC8vIG1vbnRoIHdpbGwgYmUgcmV0dXJuZWQuIGUuZy4gSmFuIDMxICsgMSBtb250aCDihpIgRmViIDI4IChub3QgTWFyIDAzKVxuICB2YXIgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICB2YXIgbW9udGhzVG9TZXQgPSBuZXdEYXRlLmdldE1vbnRoKCkgKyBhbW91bnQ7XG4gIHZhciBleHBlY3RlZE1vbnRoID0gbW9udGhzVG9TZXQgJSAxMjtcbiAgaWYgKGV4cGVjdGVkTW9udGggPCAwKSB7XG4gICAgZXhwZWN0ZWRNb250aCArPSAxMjtcbiAgfVxuICB2YXIgdGltZSA9IG5ld0RhdGUuc2V0TW9udGgobW9udGhzVG9TZXQpO1xuICByZXR1cm4gbmV3RGF0ZS5nZXRNb250aCgpICE9PSBleHBlY3RlZE1vbnRoID8gbmV3RGF0ZS5zZXREYXRlKDApIDogdGltZTtcbn1cbmZ1bmN0aW9uIGFkZFllYXJzKGRhdGUsIGFtb3VudCkge1xuICAvLyBJZiB0aGUgZGF0ZSBpcyBGZWIgMjkgYW5kIHRoZSBuZXcgeWVhciBpcyBub3QgYSBsZWFwIHllYXIsIEZlYiAyOCBvZiB0aGVcbiAgLy8gbmV3IHllYXIgd2lsbCBiZSByZXR1cm5lZC5cbiAgdmFyIG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgdmFyIGV4cGVjdGVkTW9udGggPSBuZXdEYXRlLmdldE1vbnRoKCk7XG4gIHZhciB0aW1lID0gbmV3RGF0ZS5zZXRGdWxsWWVhcihuZXdEYXRlLmdldEZ1bGxZZWFyKCkgKyBhbW91bnQpO1xuICByZXR1cm4gZXhwZWN0ZWRNb250aCA9PT0gMSAmJiBuZXdEYXRlLmdldE1vbnRoKCkgPT09IDIgPyBuZXdEYXRlLnNldERhdGUoMCkgOiB0aW1lO1xufVxuXG4vLyBDYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGJldHR3ZW4gMiBkYXlzIG9mIHRoZSB3ZWVrXG5mdW5jdGlvbiBkYXlEaWZmKGRheSwgZnJvbSkge1xuICByZXR1cm4gKGRheSAtIGZyb20gKyA3KSAlIDc7XG59XG5cbi8vIEdldCB0aGUgZGF0ZSBvZiB0aGUgc3BlY2lmaWVkIGRheSBvZiB0aGUgd2VlayBvZiBnaXZlbiBiYXNlIGRhdGVcbmZ1bmN0aW9uIGRheU9mVGhlV2Vla09mKGJhc2VEYXRlLCBkYXlPZldlZWspIHtcbiAgdmFyIHdlZWtTdGFydCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcbiAgdmFyIGJhc2VEYXkgPSBuZXcgRGF0ZShiYXNlRGF0ZSkuZ2V0RGF5KCk7XG4gIHJldHVybiBhZGREYXlzKGJhc2VEYXRlLCBkYXlEaWZmKGRheU9mV2Vlaywgd2Vla1N0YXJ0KSAtIGRheURpZmYoYmFzZURheSwgd2Vla1N0YXJ0KSk7XG59XG5cbi8vIEdldCB0aGUgSVNPIHdlZWsgb2YgYSBkYXRlXG5mdW5jdGlvbiBnZXRXZWVrKGRhdGUpIHtcbiAgLy8gc3RhcnQgb2YgSVNPIHdlZWsgaXMgTW9uZGF5XG4gIHZhciB0aHVPZlRoZVdlZWsgPSBkYXlPZlRoZVdlZWtPZihkYXRlLCA0LCAxKTtcbiAgLy8gMXN0IHdlZWsgPT0gdGhlIHdlZWsgd2hlcmUgdGhlIDR0aCBvZiBKYW51YXJ5IGlzIGluXG4gIHZhciBmaXJzdFRodSA9IGRheU9mVGhlV2Vla09mKG5ldyBEYXRlKHRodU9mVGhlV2Vlaykuc2V0TW9udGgoMCwgNCksIDQsIDEpO1xuICByZXR1cm4gTWF0aC5yb3VuZCgodGh1T2ZUaGVXZWVrIC0gZmlyc3RUaHUpIC8gNjA0ODAwMDAwKSArIDE7XG59XG5cbi8vIEdldCB0aGUgc3RhcnQgeWVhciBvZiB0aGUgcGVyaW9kIG9mIHllYXJzIHRoYXQgaW5jbHVkZXMgZ2l2ZW4gZGF0ZVxuLy8geWVhcnM6IGxlbmd0aCBvZiB0aGUgeWVhciBwZXJpb2RcbmZ1bmN0aW9uIHN0YXJ0T2ZZZWFyUGVyaW9kKGRhdGUsIHllYXJzKSB7XG4gIC8qIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWWVhcl96ZXJvI0lTT184NjAxICovXG4gIHZhciB5ZWFyID0gbmV3IERhdGUoZGF0ZSkuZ2V0RnVsbFllYXIoKTtcbiAgcmV0dXJuIE1hdGguZmxvb3IoeWVhciAvIHllYXJzKSAqIHllYXJzO1xufVxuXG4vLyBwYXR0ZXJuIGZvciBmb3JtYXQgcGFydHNcbnZhciByZUZvcm1hdFRva2VucyA9IC9kZD98REQ/fG1tP3xNTT98eXk/KD86eXkpPy87XG4vLyBwYXR0ZXJuIGZvciBub24gZGF0ZSBwYXJ0c1xudmFyIHJlTm9uRGF0ZVBhcnRzID0gL1tcXHMhLS86LUBbLWB7LX7lubTmnIjml6VdKy87XG4vLyBjYWNoZSBmb3IgcGVyc2VkIGZvcm1hdHNcbnZhciBrbm93bkZvcm1hdHMgPSB7fTtcbi8vIHBhcnNlIGZ1bnRpb25zIGZvciBkYXRlIHBhcnRzXG52YXIgcGFyc2VGbnMgPSB7XG4gIHk6IGZ1bmN0aW9uIHkoZGF0ZSwgeWVhcikge1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRlKS5zZXRGdWxsWWVhcihwYXJzZUludCh5ZWFyLCAxMCkpO1xuICB9LFxuICBtOiBmdW5jdGlvbiBtKGRhdGUsIG1vbnRoLCBsb2NhbGUpIHtcbiAgICB2YXIgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIHZhciBtb250aEluZGV4ID0gcGFyc2VJbnQobW9udGgsIDEwKSAtIDE7XG4gICAgaWYgKGlzTmFOKG1vbnRoSW5kZXgpKSB7XG4gICAgICBpZiAoIW1vbnRoKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgICB9XG4gICAgICB2YXIgbW9udGhOYW1lID0gbW9udGgudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciBjb21wYXJlTmFtZXMgPSBmdW5jdGlvbiBjb21wYXJlTmFtZXMobmFtZSkge1xuICAgICAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgobW9udGhOYW1lKTtcbiAgICAgIH07XG4gICAgICAvLyBjb21wYXJlIHdpdGggYm90aCBzaG9ydCBhbmQgZnVsbCBuYW1lcyBiZWNhdXNlIHNvbWUgbG9jYWxlcyBoYXZlIHBlcmlvZHNcbiAgICAgIC8vIGluIHRoZSBzaG9ydCBuYW1lcyAobm90IGVxdWFsIHRvIHRoZSBmaXJzdCBYIGxldHRlcnMgb2YgdGhlIGZ1bGwgbmFtZXMpXG4gICAgICBtb250aEluZGV4ID0gbG9jYWxlLm1vbnRoc1Nob3J0LmZpbmRJbmRleChjb21wYXJlTmFtZXMpO1xuICAgICAgaWYgKG1vbnRoSW5kZXggPCAwKSB7XG4gICAgICAgIG1vbnRoSW5kZXggPSBsb2NhbGUubW9udGhzLmZpbmRJbmRleChjb21wYXJlTmFtZXMpO1xuICAgICAgfVxuICAgICAgaWYgKG1vbnRoSW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgICB9XG4gICAgfVxuICAgIG5ld0RhdGUuc2V0TW9udGgobW9udGhJbmRleCk7XG4gICAgcmV0dXJuIG5ld0RhdGUuZ2V0TW9udGgoKSAhPT0gbm9ybWFsaXplTW9udGgobW9udGhJbmRleCkgPyBuZXdEYXRlLnNldERhdGUoMCkgOiBuZXdEYXRlLmdldFRpbWUoKTtcbiAgfSxcbiAgZDogZnVuY3Rpb24gZChkYXRlLCBkYXkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoZGF0ZSkuc2V0RGF0ZShwYXJzZUludChkYXksIDEwKSk7XG4gIH1cbn07XG4vLyBmb3JtYXQgZnVuY3Rpb25zIGZvciBkYXRlIHBhcnRzXG52YXIgZm9ybWF0Rm5zID0ge1xuICBkOiBmdW5jdGlvbiBkKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXREYXRlKCk7XG4gIH0sXG4gIGRkOiBmdW5jdGlvbiBkZChkYXRlKSB7XG4gICAgcmV0dXJuIHBhZFplcm8oZGF0ZS5nZXREYXRlKCksIDIpO1xuICB9LFxuICBEOiBmdW5jdGlvbiBEKGRhdGUsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUuZGF5c1Nob3J0W2RhdGUuZ2V0RGF5KCldO1xuICB9LFxuICBERDogZnVuY3Rpb24gREQoZGF0ZSwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5kYXlzW2RhdGUuZ2V0RGF5KCldO1xuICB9LFxuICBtOiBmdW5jdGlvbiBtKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpICsgMTtcbiAgfSxcbiAgbW06IGZ1bmN0aW9uIG1tKGRhdGUpIHtcbiAgICByZXR1cm4gcGFkWmVybyhkYXRlLmdldE1vbnRoKCkgKyAxLCAyKTtcbiAgfSxcbiAgTTogZnVuY3Rpb24gTShkYXRlLCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1Nob3J0W2RhdGUuZ2V0TW9udGgoKV07XG4gIH0sXG4gIE1NOiBmdW5jdGlvbiBNTShkYXRlLCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1tkYXRlLmdldE1vbnRoKCldO1xuICB9LFxuICB5OiBmdW5jdGlvbiB5KGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB9LFxuICB5eTogZnVuY3Rpb24geXkoZGF0ZSkge1xuICAgIHJldHVybiBwYWRaZXJvKGRhdGUuZ2V0RnVsbFllYXIoKSwgMikuc2xpY2UoLTIpO1xuICB9LFxuICB5eXl5OiBmdW5jdGlvbiB5eXl5KGRhdGUpIHtcbiAgICByZXR1cm4gcGFkWmVybyhkYXRlLmdldEZ1bGxZZWFyKCksIDQpO1xuICB9XG59O1xuXG4vLyBnZXQgbW9udGggaW5kZXggaW4gbm9ybWFsIHJhbmdlICgwIC0gMTEpIGZyb20gYW55IG51bWJlclxuZnVuY3Rpb24gbm9ybWFsaXplTW9udGgobW9udGhJbmRleCkge1xuICByZXR1cm4gbW9udGhJbmRleCA+IC0xID8gbW9udGhJbmRleCAlIDEyIDogbm9ybWFsaXplTW9udGgobW9udGhJbmRleCArIDEyKTtcbn1cbmZ1bmN0aW9uIHBhZFplcm8obnVtLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG51bS50b1N0cmluZygpLnBhZFN0YXJ0KGxlbmd0aCwgJzAnKTtcbn1cbmZ1bmN0aW9uIHBhcnNlRm9ybWF0U3RyaW5nKGZvcm1hdCkge1xuICBpZiAodHlwZW9mIGZvcm1hdCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGRhdGUgZm9ybWF0LlwiKTtcbiAgfVxuICBpZiAoZm9ybWF0IGluIGtub3duRm9ybWF0cykge1xuICAgIHJldHVybiBrbm93bkZvcm1hdHNbZm9ybWF0XTtcbiAgfVxuXG4gIC8vIHNwcml0IHRoZSBmb3JtYXQgc3RyaW5nIGludG8gcGFydHMgYW5kIHNlcHJhdG9yc1xuICB2YXIgc2VwYXJhdG9ycyA9IGZvcm1hdC5zcGxpdChyZUZvcm1hdFRva2Vucyk7XG4gIHZhciBwYXJ0cyA9IGZvcm1hdC5tYXRjaChuZXcgUmVnRXhwKHJlRm9ybWF0VG9rZW5zLCAnZycpKTtcbiAgaWYgKHNlcGFyYXRvcnMubGVuZ3RoID09PSAwIHx8ICFwYXJ0cykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZGF0ZSBmb3JtYXQuXCIpO1xuICB9XG5cbiAgLy8gY29sbGVjdCBmb3JtYXQgZnVuY3Rpb25zIHVzZWQgaW4gdGhlIGZvcm1hdFxuICB2YXIgcGFydEZvcm1hdHRlcnMgPSBwYXJ0cy5tYXAoZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgcmV0dXJuIGZvcm1hdEZuc1t0b2tlbl07XG4gIH0pO1xuXG4gIC8vIGNvbGxlY3QgcGFyc2UgZnVuY3Rpb24ga2V5cyB1c2VkIGluIHRoZSBmb3JtYXRcbiAgLy8gaXRlcmF0ZSBvdmVyIHBhcnNlRm5zJyBrZXlzIGluIG9yZGVyIHRvIGtlZXAgdGhlIG9yZGVyIG9mIHRoZSBrZXlzLlxuICB2YXIgcGFydFBhcnNlcktleXMgPSBPYmplY3Qua2V5cyhwYXJzZUZucykucmVkdWNlKGZ1bmN0aW9uIChrZXlzLCBrZXkpIHtcbiAgICB2YXIgdG9rZW4gPSBwYXJ0cy5maW5kKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICByZXR1cm4gcGFydFswXSAhPT0gJ0QnICYmIHBhcnRbMF0udG9Mb3dlckNhc2UoKSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh0b2tlbikge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xuICB9LCBbXSk7XG4gIHJldHVybiBrbm93bkZvcm1hdHNbZm9ybWF0XSA9IHtcbiAgICBwYXJzZXI6IGZ1bmN0aW9uIHBhcnNlcihkYXRlU3RyLCBsb2NhbGUpIHtcbiAgICAgIHZhciBkYXRlUGFydHMgPSBkYXRlU3RyLnNwbGl0KHJlTm9uRGF0ZVBhcnRzKS5yZWR1Y2UoZnVuY3Rpb24gKGR0UGFydHMsIHBhcnQsIGluZGV4KSB7XG4gICAgICAgIGlmIChwYXJ0Lmxlbmd0aCA+IDAgJiYgcGFydHNbaW5kZXhdKSB7XG4gICAgICAgICAgdmFyIHRva2VuID0gcGFydHNbaW5kZXhdWzBdO1xuICAgICAgICAgIGlmICh0b2tlbiA9PT0gJ00nKSB7XG4gICAgICAgICAgICBkdFBhcnRzLm0gPSBwYXJ0O1xuICAgICAgICAgIH0gZWxzZSBpZiAodG9rZW4gIT09ICdEJykge1xuICAgICAgICAgICAgZHRQYXJ0c1t0b2tlbl0gPSBwYXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZHRQYXJ0cztcbiAgICAgIH0sIHt9KTtcblxuICAgICAgLy8gaXRlcmF0ZSBvdmVyIHBhcnRQYXJzZXJrZXlzIHNvIHRoYXQgdGhlIHBhcnNpbmcgaXMgbWFkZSBpbiB0aGUgb2RlclxuICAgICAgLy8gb2YgeWVhciwgbW9udGggYW5kIGRheSB0byBwcmV2ZW50IHRoZSBkYXkgcGFyc2VyIGZyb20gY29ycmVjdGluZyBsYXN0XG4gICAgICAvLyBkYXkgb2YgbW9udGggd3JvbmdseVxuICAgICAgcmV0dXJuIHBhcnRQYXJzZXJLZXlzLnJlZHVjZShmdW5jdGlvbiAob3JpZ0RhdGUsIGtleSkge1xuICAgICAgICB2YXIgbmV3RGF0ZSA9IHBhcnNlRm5zW2tleV0ob3JpZ0RhdGUsIGRhdGVQYXJ0c1trZXldLCBsb2NhbGUpO1xuICAgICAgICAvLyBpbmdub3JlIHRoZSBwYXJ0IGZhaWxlZCB0byBwYXJzZVxuICAgICAgICByZXR1cm4gaXNOYU4obmV3RGF0ZSkgPyBvcmlnRGF0ZSA6IG5ld0RhdGU7XG4gICAgICB9LCB0b2RheSgpKTtcbiAgICB9LFxuICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gZm9ybWF0dGVyKGRhdGUsIGxvY2FsZSkge1xuICAgICAgdmFyIGRhdGVTdHIgPSBwYXJ0Rm9ybWF0dGVycy5yZWR1Y2UoZnVuY3Rpb24gKHN0ciwgZm4sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBzdHIgKz0gXCJcIi5jb25jYXQoc2VwYXJhdG9yc1tpbmRleF0pLmNvbmNhdChmbihkYXRlLCBsb2NhbGUpKTtcbiAgICAgIH0sICcnKTtcbiAgICAgIC8vIHNlcGFyYXRvcnMnIGxlbmd0aCBpcyBhbHdheXMgcGFydHMnIGxlbmd0aCArIDEsXG4gICAgICByZXR1cm4gZGF0ZVN0ciArPSBsYXN0SXRlbU9mKHNlcGFyYXRvcnMpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlRGF0ZShkYXRlU3RyLCBmb3JtYXQsIGxvY2FsZSkge1xuICBpZiAoZGF0ZVN0ciBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIGRhdGVTdHIgPT09ICdudW1iZXInKSB7XG4gICAgdmFyIGRhdGUgPSBzdHJpcFRpbWUoZGF0ZVN0cik7XG4gICAgcmV0dXJuIGlzTmFOKGRhdGUpID8gdW5kZWZpbmVkIDogZGF0ZTtcbiAgfVxuICBpZiAoIWRhdGVTdHIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChkYXRlU3RyID09PSAndG9kYXknKSB7XG4gICAgcmV0dXJuIHRvZGF5KCk7XG4gIH1cbiAgaWYgKGZvcm1hdCAmJiBmb3JtYXQudG9WYWx1ZSkge1xuICAgIHZhciBfZGF0ZSA9IGZvcm1hdC50b1ZhbHVlKGRhdGVTdHIsIGZvcm1hdCwgbG9jYWxlKTtcbiAgICByZXR1cm4gaXNOYU4oX2RhdGUpID8gdW5kZWZpbmVkIDogc3RyaXBUaW1lKF9kYXRlKTtcbiAgfVxuICByZXR1cm4gcGFyc2VGb3JtYXRTdHJpbmcoZm9ybWF0KS5wYXJzZXIoZGF0ZVN0ciwgbG9jYWxlKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0LCBsb2NhbGUpIHtcbiAgaWYgKGlzTmFOKGRhdGUpIHx8ICFkYXRlICYmIGRhdGUgIT09IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgdmFyIGRhdGVPYmogPSB0eXBlb2YgZGF0ZSA9PT0gJ251bWJlcicgPyBuZXcgRGF0ZShkYXRlKSA6IGRhdGU7XG4gIGlmIChmb3JtYXQudG9EaXNwbGF5KSB7XG4gICAgcmV0dXJuIGZvcm1hdC50b0Rpc3BsYXkoZGF0ZU9iaiwgZm9ybWF0LCBsb2NhbGUpO1xuICB9XG4gIHJldHVybiBwYXJzZUZvcm1hdFN0cmluZyhmb3JtYXQpLmZvcm1hdHRlcihkYXRlT2JqLCBsb2NhbGUpO1xufVxuXG52YXIgbGlzdGVuZXJSZWdpc3RyeSA9IG5ldyBXZWFrTWFwKCk7XG52YXIgX0V2ZW50VGFyZ2V0JHByb3RvdHlwID0gRXZlbnRUYXJnZXQucHJvdG90eXBlLFxuICBhZGRFdmVudExpc3RlbmVyID0gX0V2ZW50VGFyZ2V0JHByb3RvdHlwLmFkZEV2ZW50TGlzdGVuZXIsXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBfRXZlbnRUYXJnZXQkcHJvdG90eXAucmVtb3ZlRXZlbnRMaXN0ZW5lcjtcblxuLy8gUmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXJzIHRvIGEga2V5IG9iamVjdFxuLy8gbGlzdGVuZXJzOiBhcnJheSBvZiBsaXN0ZW5lciBkZWZpbml0aW9ucztcbi8vICAgLSBlYWNoIGRlZmluaXRpb24gbXVzdCBiZSBhIGZsYXQgYXJyYXkgb2YgZXZlbnQgdGFyZ2V0IGFuZCB0aGUgYXJndW1lbnRzXG4vLyAgICAgdXNlZCB0byBjYWxsIGFkZEV2ZW50TGlzdGVuZXIoKSBvbiB0aGUgdGFyZ2V0XG5mdW5jdGlvbiByZWdpc3Rlckxpc3RlbmVycyhrZXlPYmosIGxpc3RlbmVycykge1xuICB2YXIgcmVnaXN0ZXJlZCA9IGxpc3RlbmVyUmVnaXN0cnkuZ2V0KGtleU9iaik7XG4gIGlmICghcmVnaXN0ZXJlZCkge1xuICAgIHJlZ2lzdGVyZWQgPSBbXTtcbiAgICBsaXN0ZW5lclJlZ2lzdHJ5LnNldChrZXlPYmosIHJlZ2lzdGVyZWQpO1xuICB9XG4gIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIuY2FsbC5hcHBseShhZGRFdmVudExpc3RlbmVyLCBfdG9Db25zdW1hYmxlQXJyYXkobGlzdGVuZXIpKTtcbiAgICByZWdpc3RlcmVkLnB1c2gobGlzdGVuZXIpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVucmVnaXN0ZXJMaXN0ZW5lcnMoa2V5T2JqKSB7XG4gIHZhciBsaXN0ZW5lcnMgPSBsaXN0ZW5lclJlZ2lzdHJ5LmdldChrZXlPYmopO1xuICBpZiAoIWxpc3RlbmVycykge1xuICAgIHJldHVybjtcbiAgfVxuICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICByZW1vdmVFdmVudExpc3RlbmVyLmNhbGwuYXBwbHkocmVtb3ZlRXZlbnRMaXN0ZW5lciwgX3RvQ29uc3VtYWJsZUFycmF5KGxpc3RlbmVyKSk7XG4gIH0pO1xuICBsaXN0ZW5lclJlZ2lzdHJ5W1wiZGVsZXRlXCJdKGtleU9iaik7XG59XG5cbi8vIEV2ZW50LmNvbXBvc2VkUGF0aCgpIHBvbHlmaWxsIGZvciBFZGdlXG4vLyBiYXNlZCBvbiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9rbGVpbmZyZXVuZC9lOTc4N2Q3Mzc3NmMwZTM3NTBkY2ZjZGM4OWYxMDBlY1xuaWYgKCFFdmVudC5wcm90b3R5cGUuY29tcG9zZWRQYXRoKSB7XG4gIHZhciBnZXRDb21wb3NlZFBhdGggPSBmdW5jdGlvbiBnZXRDb21wb3NlZFBhdGgobm9kZSkge1xuICAgIHZhciBwYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcbiAgICBwYXRoLnB1c2gobm9kZSk7XG4gICAgdmFyIHBhcmVudDtcbiAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfSBlbHNlIGlmIChub2RlLmhvc3QpIHtcbiAgICAgIC8vIFNoYWRvd1Jvb3RcbiAgICAgIHBhcmVudCA9IG5vZGUuaG9zdDtcbiAgICB9IGVsc2UgaWYgKG5vZGUuZGVmYXVsdFZpZXcpIHtcbiAgICAgIC8vIERvY3VtZW50XG4gICAgICBwYXJlbnQgPSBub2RlLmRlZmF1bHRWaWV3O1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50ID8gZ2V0Q29tcG9zZWRQYXRoKHBhcmVudCwgcGF0aCkgOiBwYXRoO1xuICB9O1xuICBFdmVudC5wcm90b3R5cGUuY29tcG9zZWRQYXRoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRDb21wb3NlZFBhdGgodGhpcy50YXJnZXQpO1xuICB9O1xufVxuZnVuY3Rpb24gZmluZEZyb21QYXRoKHBhdGgsIGNyaXRlcmlhLCBjdXJyZW50VGFyZ2V0KSB7XG4gIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcbiAgdmFyIGVsID0gcGF0aFtpbmRleF07XG4gIGlmIChjcml0ZXJpYShlbCkpIHtcbiAgICByZXR1cm4gZWw7XG4gIH0gZWxzZSBpZiAoZWwgPT09IGN1cnJlbnRUYXJnZXQgfHwgIWVsLnBhcmVudEVsZW1lbnQpIHtcbiAgICAvLyBzdG9wIHdoZW4gcmVhY2hpbmcgY3VycmVudFRhcmdldCBvciA8aHRtbD5cbiAgICByZXR1cm47XG4gIH1cbiAgcmV0dXJuIGZpbmRGcm9tUGF0aChwYXRoLCBjcml0ZXJpYSwgY3VycmVudFRhcmdldCwgaW5kZXggKyAxKTtcbn1cblxuLy8gU2VhcmNoIGZvciB0aGUgYWN0dWFsIHRhcmdldCBvZiBhIGRlbGVnYXRlZCBldmVudFxuZnVuY3Rpb24gZmluZEVsZW1lbnRJbkV2ZW50UGF0aChldiwgc2VsZWN0b3IpIHtcbiAgdmFyIGNyaXRlcmlhID0gdHlwZW9mIHNlbGVjdG9yID09PSAnZnVuY3Rpb24nID8gc2VsZWN0b3IgOiBmdW5jdGlvbiAoZWwpIHtcbiAgICByZXR1cm4gZWwubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG4gIHJldHVybiBmaW5kRnJvbVBhdGgoZXYuY29tcG9zZWRQYXRoKCksIGNyaXRlcmlhLCBldi5jdXJyZW50VGFyZ2V0KTtcbn1cblxuLy8gZGVmYXVsdCBsb2NhbGVzXG52YXIgbG9jYWxlcyA9IHtcbiAgZW46IHtcbiAgICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgICBkYXlzU2hvcnQ6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgICBkYXlzTWluOiBbXCJTdVwiLCBcIk1vXCIsIFwiVHVcIiwgXCJXZVwiLCBcIlRoXCIsIFwiRnJcIiwgXCJTYVwiXSxcbiAgICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICAgIG1vbnRoc1Nob3J0OiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl0sXG4gICAgdG9kYXk6IFwiVG9kYXlcIixcbiAgICBjbGVhcjogXCJDbGVhclwiLFxuICAgIHRpdGxlRm9ybWF0OiBcIk1NIHlcIlxuICB9XG59O1xuXG4vLyBjb25maWcgb3B0aW9ucyB1cGRhdGFibGUgYnkgc2V0T3B0aW9ucygpIGFuZCB0aGVpciBkZWZhdWx0IHZhbHVlc1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBhdXRvaGlkZTogZmFsc2UsXG4gIGJlZm9yZVNob3dEYXk6IG51bGwsXG4gIGJlZm9yZVNob3dEZWNhZGU6IG51bGwsXG4gIGJlZm9yZVNob3dNb250aDogbnVsbCxcbiAgYmVmb3JlU2hvd1llYXI6IG51bGwsXG4gIGNhbGVuZGFyV2Vla3M6IGZhbHNlLFxuICBjbGVhckJ0bjogZmFsc2UsXG4gIGRhdGVEZWxpbWl0ZXI6ICcsJyxcbiAgZGF0ZXNEaXNhYmxlZDogW10sXG4gIGRheXNPZldlZWtEaXNhYmxlZDogW10sXG4gIGRheXNPZldlZWtIaWdobGlnaHRlZDogW10sXG4gIGRlZmF1bHRWaWV3RGF0ZTogdW5kZWZpbmVkLFxuICAvLyBwbGFjZWhvbGRlciwgZGVmYXVsdHMgdG8gdG9kYXkoKSBieSB0aGUgcHJvZ3JhbVxuICBkaXNhYmxlVG91Y2hLZXlib2FyZDogZmFsc2UsXG4gIGZvcm1hdDogJ21tL2RkL3l5eXknLFxuICBsYW5ndWFnZTogJ2VuJyxcbiAgbWF4RGF0ZTogbnVsbCxcbiAgbWF4TnVtYmVyT2ZEYXRlczogMSxcbiAgbWF4VmlldzogMyxcbiAgbWluRGF0ZTogbnVsbCxcbiAgbmV4dEFycm93OiAnPHN2ZyBjbGFzcz1cInctNCBoLTQgcnRsOnJvdGF0ZS0xODAgdGV4dC1ncmF5LTgwMCBkYXJrOnRleHQtd2hpdGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDE0IDEwXCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMSA1aDEybTAgMEw5IDFtNCA0TDkgOVwiLz48L3N2Zz4nLFxuICBvcmllbnRhdGlvbjogJ2F1dG8nLFxuICBwaWNrTGV2ZWw6IDAsXG4gIHByZXZBcnJvdzogJzxzdmcgY2xhc3M9XCJ3LTQgaC00IHJ0bDpyb3RhdGUtMTgwIHRleHQtZ3JheS04MDAgZGFyazp0ZXh0LXdoaXRlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAxNCAxMFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTEzIDVIMW0wIDAgNCA0TTEgNWw0LTRcIi8+PC9zdmc+JyxcbiAgc2hvd0RheXNPZldlZWs6IHRydWUsXG4gIHNob3dPbkNsaWNrOiB0cnVlLFxuICBzaG93T25Gb2N1czogdHJ1ZSxcbiAgc3RhcnRWaWV3OiAwLFxuICB0aXRsZTogJycsXG4gIHRvZGF5QnRuOiBmYWxzZSxcbiAgdG9kYXlCdG5Nb2RlOiAwLFxuICB0b2RheUhpZ2hsaWdodDogZmFsc2UsXG4gIHVwZGF0ZU9uQmx1cjogdHJ1ZSxcbiAgd2Vla1N0YXJ0OiAwXG59O1xuXG52YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuZnVuY3Rpb24gcGFyc2VIVE1MKGh0bWwpIHtcbiAgcmV0dXJuIHJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChodG1sKTtcbn1cbmZ1bmN0aW9uIGhpZGVFbGVtZW50KGVsKSB7XG4gIGlmIChlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gYmFjayB1cCB0aGUgZXhpc3RpbmcgZGlzcGxheSBzZXR0aW5nIGluIGRhdGEtc3R5bGUtZGlzcGxheVxuICBpZiAoZWwuc3R5bGUuZGlzcGxheSkge1xuICAgIGVsLmRhdGFzZXQuc3R5bGVEaXNwbGF5ID0gZWwuc3R5bGUuZGlzcGxheTtcbiAgfVxuICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xufVxuZnVuY3Rpb24gc2hvd0VsZW1lbnQoZWwpIHtcbiAgaWYgKGVsLnN0eWxlLmRpc3BsYXkgIT09ICdub25lJykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZWwuZGF0YXNldC5zdHlsZURpc3BsYXkpIHtcbiAgICAvLyByZXN0b3JlIGJhY2tlZC11cCBkaXNwYXkgcHJvcGVydHlcbiAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuZGF0YXNldC5zdHlsZURpc3BsYXk7XG4gICAgZGVsZXRlIGVsLmRhdGFzZXQuc3R5bGVEaXNwbGF5O1xuICB9IGVsc2Uge1xuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgfVxufVxuZnVuY3Rpb24gZW1wdHlDaGlsZE5vZGVzKGVsKSB7XG4gIGlmIChlbC5maXJzdENoaWxkKSB7XG4gICAgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7XG4gICAgZW1wdHlDaGlsZE5vZGVzKGVsKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVwbGFjZUNoaWxkTm9kZXMoZWwsIG5ld0NoaWxkTm9kZXMpIHtcbiAgZW1wdHlDaGlsZE5vZGVzKGVsKTtcbiAgaWYgKG5ld0NoaWxkTm9kZXMgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XG4gICAgZWwuYXBwZW5kQ2hpbGQobmV3Q2hpbGROb2Rlcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG5ld0NoaWxkTm9kZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgZWwuYXBwZW5kQ2hpbGQocGFyc2VIVE1MKG5ld0NoaWxkTm9kZXMpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbmV3Q2hpbGROb2Rlcy5mb3JFYWNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbmV3Q2hpbGROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBlbC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgZGVmYXVsdExhbmcgPSBkZWZhdWx0T3B0aW9ucy5sYW5ndWFnZSxcbiAgZGVmYXVsdEZvcm1hdCA9IGRlZmF1bHRPcHRpb25zLmZvcm1hdCxcbiAgZGVmYXVsdFdlZWtTdGFydCA9IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydDtcblxuLy8gUmVkdWNlciBmdW5jdGlvbiB0byBmaWx0ZXIgb3V0IGludmFsaWQgZGF5LW9mLXdlZWsgZnJvbSB0aGUgaW5wdXRcbmZ1bmN0aW9uIHNhbml0aXplRE9XKGRvdywgZGF5KSB7XG4gIHJldHVybiBkb3cubGVuZ3RoIDwgNiAmJiBkYXkgPj0gMCAmJiBkYXkgPCA3ID8gcHVzaFVuaXF1ZShkb3csIGRheSkgOiBkb3c7XG59XG5mdW5jdGlvbiBjYWxjRW5kT2ZXZWVrKHN0YXJ0T2ZXZWVrKSB7XG4gIHJldHVybiAoc3RhcnRPZldlZWsgKyA2KSAlIDc7XG59XG5cbi8vIHZhbGlkYXRlIGlucHV0IGRhdGUuIGlmIGludmFsaWQsIGZhbGxiYWNrIHRvIHRoZSBvcmlnaW5hbCB2YWx1ZVxuZnVuY3Rpb24gdmFsaWRhdGVEYXRlKHZhbHVlLCBmb3JtYXQsIGxvY2FsZSwgb3JpZ1ZhbHVlKSB7XG4gIHZhciBkYXRlID0gcGFyc2VEYXRlKHZhbHVlLCBmb3JtYXQsIGxvY2FsZSk7XG4gIHJldHVybiBkYXRlICE9PSB1bmRlZmluZWQgPyBkYXRlIDogb3JpZ1ZhbHVlO1xufVxuXG4vLyBWYWxpZGF0ZSB2aWV3SWQuIGlmIGludmFsaWQsIGZhbGxiYWNrIHRvIHRoZSBvcmlnaW5hbCB2YWx1ZVxuZnVuY3Rpb24gdmFsaWRhdGVWaWV3SWQodmFsdWUsIG9yaWdWYWx1ZSkge1xuICB2YXIgbWF4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAzO1xuICB2YXIgdmlld0lkID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgcmV0dXJuIHZpZXdJZCA+PSAwICYmIHZpZXdJZCA8PSBtYXggPyB2aWV3SWQgOiBvcmlnVmFsdWU7XG59XG5cbi8vIENyZWF0ZSBEYXRlcGlja2VyIGNvbmZpZ3VyYXRpb24gdG8gc2V0XG5mdW5jdGlvbiBwcm9jZXNzT3B0aW9ucyhvcHRpb25zLCBkYXRlcGlja2VyKSB7XG4gIHZhciBpbk9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuICB2YXIgbG9jYWxlcyA9IGRhdGVwaWNrZXIuY29uc3RydWN0b3IubG9jYWxlcztcbiAgdmFyIF9yZWYgPSBkYXRlcGlja2VyLmNvbmZpZyB8fCB7fSxcbiAgICBmb3JtYXQgPSBfcmVmLmZvcm1hdCxcbiAgICBsYW5ndWFnZSA9IF9yZWYubGFuZ3VhZ2UsXG4gICAgbG9jYWxlID0gX3JlZi5sb2NhbGUsXG4gICAgbWF4RGF0ZSA9IF9yZWYubWF4RGF0ZSxcbiAgICBtYXhWaWV3ID0gX3JlZi5tYXhWaWV3LFxuICAgIG1pbkRhdGUgPSBfcmVmLm1pbkRhdGUsXG4gICAgcGlja0xldmVsID0gX3JlZi5waWNrTGV2ZWwsXG4gICAgc3RhcnRWaWV3ID0gX3JlZi5zdGFydFZpZXcsXG4gICAgd2Vla1N0YXJ0ID0gX3JlZi53ZWVrU3RhcnQ7XG4gIGlmIChpbk9wdHMubGFuZ3VhZ2UpIHtcbiAgICB2YXIgbGFuZztcbiAgICBpZiAoaW5PcHRzLmxhbmd1YWdlICE9PSBsYW5ndWFnZSkge1xuICAgICAgaWYgKGxvY2FsZXNbaW5PcHRzLmxhbmd1YWdlXSkge1xuICAgICAgICBsYW5nID0gaW5PcHRzLmxhbmd1YWdlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgbGFuZ2F1Z2UgKyByZWdpb24gdGFnIGNhbiBmYWxsYmFjayB0byB0aGUgb25lIHdpdGhvdXRcbiAgICAgICAgLy8gcmVnaW9uIChlLmcuIGZyLUNBIOKGkiBmcilcbiAgICAgICAgbGFuZyA9IGluT3B0cy5sYW5ndWFnZS5zcGxpdCgnLScpWzBdO1xuICAgICAgICBpZiAobG9jYWxlc1tsYW5nXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbGFuZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGRlbGV0ZSBpbk9wdHMubGFuZ3VhZ2U7XG4gICAgaWYgKGxhbmcpIHtcbiAgICAgIGxhbmd1YWdlID0gY29uZmlnLmxhbmd1YWdlID0gbGFuZztcblxuICAgICAgLy8gdXBkYXRlIGxvY2FsZSBhcyB3ZWxsIHdoZW4gdXBkYXRpbmcgbGFuZ3VhZ2VcbiAgICAgIHZhciBvcmlnTG9jYWxlID0gbG9jYWxlIHx8IGxvY2FsZXNbZGVmYXVsdExhbmddO1xuICAgICAgLy8gdXNlIGRlZmF1bHQgbGFuZ3VhZ2UncyBwcm9wZXJ0aWVzIGZvciB0aGUgZmFsbGJhY2tcbiAgICAgIGxvY2FsZSA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBmb3JtYXQ6IGRlZmF1bHRGb3JtYXQsXG4gICAgICAgIHdlZWtTdGFydDogZGVmYXVsdFdlZWtTdGFydFxuICAgICAgfSwgbG9jYWxlc1tkZWZhdWx0TGFuZ10pO1xuICAgICAgaWYgKGxhbmd1YWdlICE9PSBkZWZhdWx0TGFuZykge1xuICAgICAgICBPYmplY3QuYXNzaWduKGxvY2FsZSwgbG9jYWxlc1tsYW5ndWFnZV0pO1xuICAgICAgfVxuICAgICAgY29uZmlnLmxvY2FsZSA9IGxvY2FsZTtcbiAgICAgIC8vIGlmIGZvcm1hdCBhbmQvb3Igd2Vla1N0YXJ0IGFyZSB0aGUgc2FtZSBhcyBvbGQgbG9jYWxlJ3MgZGVmYXVsdHMsXG4gICAgICAvLyB1cGRhdGUgdGhlbSB0byBuZXcgbG9jYWxlJ3MgZGVmYXVsdHNcbiAgICAgIGlmIChmb3JtYXQgPT09IG9yaWdMb2NhbGUuZm9ybWF0KSB7XG4gICAgICAgIGZvcm1hdCA9IGNvbmZpZy5mb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICAgICAgfVxuICAgICAgaWYgKHdlZWtTdGFydCA9PT0gb3JpZ0xvY2FsZS53ZWVrU3RhcnQpIHtcbiAgICAgICAgd2Vla1N0YXJ0ID0gY29uZmlnLndlZWtTdGFydCA9IGxvY2FsZS53ZWVrU3RhcnQ7XG4gICAgICAgIGNvbmZpZy53ZWVrRW5kID0gY2FsY0VuZE9mV2Vlayhsb2NhbGUud2Vla1N0YXJ0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGluT3B0cy5mb3JtYXQpIHtcbiAgICB2YXIgaGFzVG9EaXNwbGF5ID0gdHlwZW9mIGluT3B0cy5mb3JtYXQudG9EaXNwbGF5ID09PSAnZnVuY3Rpb24nO1xuICAgIHZhciBoYXNUb1ZhbHVlID0gdHlwZW9mIGluT3B0cy5mb3JtYXQudG9WYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICB2YXIgdmFsaWRGb3JtYXRTdHJpbmcgPSByZUZvcm1hdFRva2Vucy50ZXN0KGluT3B0cy5mb3JtYXQpO1xuICAgIGlmIChoYXNUb0Rpc3BsYXkgJiYgaGFzVG9WYWx1ZSB8fCB2YWxpZEZvcm1hdFN0cmluZykge1xuICAgICAgZm9ybWF0ID0gY29uZmlnLmZvcm1hdCA9IGluT3B0cy5mb3JtYXQ7XG4gICAgfVxuICAgIGRlbGV0ZSBpbk9wdHMuZm9ybWF0O1xuICB9XG5cbiAgLy8qKiogZGF0ZXMgKioqLy9cbiAgLy8gd2hpbGUgbWluIGFuZCBtYXhEYXRlIGZvciBcIm5vIGxpbWl0XCIgaW4gdGhlIG9wdGlvbnMgYXJlIGJldHRlciB0byBiZSBudWxsXG4gIC8vIChlc3BlY2lhbGx5IHdoZW4gdXBkYXRpbmcpLCB0aGUgb25lcyBpbiB0aGUgY29uZmlnIGhhdmUgdG8gYmUgdW5kZWZpbmVkXG4gIC8vIGJlY2F1c2UgbnVsbCBpcyB0cmVhdGVkIGFzIDAgKD0gdW5peCBlcG9jaCkgd2hlbiBjb21wYXJpbmcgd2l0aCB0aW1lIHZhbHVlXG4gIHZhciBtaW5EdCA9IG1pbkRhdGU7XG4gIHZhciBtYXhEdCA9IG1heERhdGU7XG4gIGlmIChpbk9wdHMubWluRGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbWluRHQgPSBpbk9wdHMubWluRGF0ZSA9PT0gbnVsbCA/IGRhdGVWYWx1ZSgwLCAwLCAxKSAvLyBzZXQgMDAwMC0wMS0wMSB0byBwcmV2ZW50IG5lZ2F0aXZlIHZhbHVlcyBmb3IgeWVhclxuICAgIDogdmFsaWRhdGVEYXRlKGluT3B0cy5taW5EYXRlLCBmb3JtYXQsIGxvY2FsZSwgbWluRHQpO1xuICAgIGRlbGV0ZSBpbk9wdHMubWluRGF0ZTtcbiAgfVxuICBpZiAoaW5PcHRzLm1heERhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIG1heER0ID0gaW5PcHRzLm1heERhdGUgPT09IG51bGwgPyB1bmRlZmluZWQgOiB2YWxpZGF0ZURhdGUoaW5PcHRzLm1heERhdGUsIGZvcm1hdCwgbG9jYWxlLCBtYXhEdCk7XG4gICAgZGVsZXRlIGluT3B0cy5tYXhEYXRlO1xuICB9XG4gIGlmIChtYXhEdCA8IG1pbkR0KSB7XG4gICAgbWluRGF0ZSA9IGNvbmZpZy5taW5EYXRlID0gbWF4RHQ7XG4gICAgbWF4RGF0ZSA9IGNvbmZpZy5tYXhEYXRlID0gbWluRHQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKG1pbkRhdGUgIT09IG1pbkR0KSB7XG4gICAgICBtaW5EYXRlID0gY29uZmlnLm1pbkRhdGUgPSBtaW5EdDtcbiAgICB9XG4gICAgaWYgKG1heERhdGUgIT09IG1heER0KSB7XG4gICAgICBtYXhEYXRlID0gY29uZmlnLm1heERhdGUgPSBtYXhEdDtcbiAgICB9XG4gIH1cbiAgaWYgKGluT3B0cy5kYXRlc0Rpc2FibGVkKSB7XG4gICAgY29uZmlnLmRhdGVzRGlzYWJsZWQgPSBpbk9wdHMuZGF0ZXNEaXNhYmxlZC5yZWR1Y2UoZnVuY3Rpb24gKGRhdGVzLCBkdCkge1xuICAgICAgdmFyIGRhdGUgPSBwYXJzZURhdGUoZHQsIGZvcm1hdCwgbG9jYWxlKTtcbiAgICAgIHJldHVybiBkYXRlICE9PSB1bmRlZmluZWQgPyBwdXNoVW5pcXVlKGRhdGVzLCBkYXRlKSA6IGRhdGVzO1xuICAgIH0sIFtdKTtcbiAgICBkZWxldGUgaW5PcHRzLmRhdGVzRGlzYWJsZWQ7XG4gIH1cbiAgaWYgKGluT3B0cy5kZWZhdWx0Vmlld0RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciB2aWV3RGF0ZSA9IHBhcnNlRGF0ZShpbk9wdHMuZGVmYXVsdFZpZXdEYXRlLCBmb3JtYXQsIGxvY2FsZSk7XG4gICAgaWYgKHZpZXdEYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbmZpZy5kZWZhdWx0Vmlld0RhdGUgPSB2aWV3RGF0ZTtcbiAgICB9XG4gICAgZGVsZXRlIGluT3B0cy5kZWZhdWx0Vmlld0RhdGU7XG4gIH1cblxuICAvLyoqKiBkYXlzIG9mIHdlZWsgKioqLy9cbiAgaWYgKGluT3B0cy53ZWVrU3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciB3a1N0YXJ0ID0gTnVtYmVyKGluT3B0cy53ZWVrU3RhcnQpICUgNztcbiAgICBpZiAoIWlzTmFOKHdrU3RhcnQpKSB7XG4gICAgICB3ZWVrU3RhcnQgPSBjb25maWcud2Vla1N0YXJ0ID0gd2tTdGFydDtcbiAgICAgIGNvbmZpZy53ZWVrRW5kID0gY2FsY0VuZE9mV2Vlayh3a1N0YXJ0KTtcbiAgICB9XG4gICAgZGVsZXRlIGluT3B0cy53ZWVrU3RhcnQ7XG4gIH1cbiAgaWYgKGluT3B0cy5kYXlzT2ZXZWVrRGlzYWJsZWQpIHtcbiAgICBjb25maWcuZGF5c09mV2Vla0Rpc2FibGVkID0gaW5PcHRzLmRheXNPZldlZWtEaXNhYmxlZC5yZWR1Y2Uoc2FuaXRpemVET1csIFtdKTtcbiAgICBkZWxldGUgaW5PcHRzLmRheXNPZldlZWtEaXNhYmxlZDtcbiAgfVxuICBpZiAoaW5PcHRzLmRheXNPZldlZWtIaWdobGlnaHRlZCkge1xuICAgIGNvbmZpZy5kYXlzT2ZXZWVrSGlnaGxpZ2h0ZWQgPSBpbk9wdHMuZGF5c09mV2Vla0hpZ2hsaWdodGVkLnJlZHVjZShzYW5pdGl6ZURPVywgW10pO1xuICAgIGRlbGV0ZSBpbk9wdHMuZGF5c09mV2Vla0hpZ2hsaWdodGVkO1xuICB9XG5cbiAgLy8qKiogbXVsdGkgZGF0ZSAqKiovL1xuICBpZiAoaW5PcHRzLm1heE51bWJlck9mRGF0ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBtYXhOdW1iZXJPZkRhdGVzID0gcGFyc2VJbnQoaW5PcHRzLm1heE51bWJlck9mRGF0ZXMsIDEwKTtcbiAgICBpZiAobWF4TnVtYmVyT2ZEYXRlcyA+PSAwKSB7XG4gICAgICBjb25maWcubWF4TnVtYmVyT2ZEYXRlcyA9IG1heE51bWJlck9mRGF0ZXM7XG4gICAgICBjb25maWcubXVsdGlkYXRlID0gbWF4TnVtYmVyT2ZEYXRlcyAhPT0gMTtcbiAgICB9XG4gICAgZGVsZXRlIGluT3B0cy5tYXhOdW1iZXJPZkRhdGVzO1xuICB9XG4gIGlmIChpbk9wdHMuZGF0ZURlbGltaXRlcikge1xuICAgIGNvbmZpZy5kYXRlRGVsaW1pdGVyID0gU3RyaW5nKGluT3B0cy5kYXRlRGVsaW1pdGVyKTtcbiAgICBkZWxldGUgaW5PcHRzLmRhdGVEZWxpbWl0ZXI7XG4gIH1cblxuICAvLyoqKiBwaWNrIGxldmVsICYgdmlldyAqKiovL1xuICB2YXIgbmV3UGlja0xldmVsID0gcGlja0xldmVsO1xuICBpZiAoaW5PcHRzLnBpY2tMZXZlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbmV3UGlja0xldmVsID0gdmFsaWRhdGVWaWV3SWQoaW5PcHRzLnBpY2tMZXZlbCwgMik7XG4gICAgZGVsZXRlIGluT3B0cy5waWNrTGV2ZWw7XG4gIH1cbiAgaWYgKG5ld1BpY2tMZXZlbCAhPT0gcGlja0xldmVsKSB7XG4gICAgcGlja0xldmVsID0gY29uZmlnLnBpY2tMZXZlbCA9IG5ld1BpY2tMZXZlbDtcbiAgfVxuICB2YXIgbmV3TWF4VmlldyA9IG1heFZpZXc7XG4gIGlmIChpbk9wdHMubWF4VmlldyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbmV3TWF4VmlldyA9IHZhbGlkYXRlVmlld0lkKGluT3B0cy5tYXhWaWV3LCBtYXhWaWV3KTtcbiAgICBkZWxldGUgaW5PcHRzLm1heFZpZXc7XG4gIH1cbiAgLy8gZW5zdXJlIG1heCB2aWV3ID49IHBpY2sgbGV2ZWxcbiAgbmV3TWF4VmlldyA9IHBpY2tMZXZlbCA+IG5ld01heFZpZXcgPyBwaWNrTGV2ZWwgOiBuZXdNYXhWaWV3O1xuICBpZiAobmV3TWF4VmlldyAhPT0gbWF4Vmlldykge1xuICAgIG1heFZpZXcgPSBjb25maWcubWF4VmlldyA9IG5ld01heFZpZXc7XG4gIH1cbiAgdmFyIG5ld1N0YXJ0VmlldyA9IHN0YXJ0VmlldztcbiAgaWYgKGluT3B0cy5zdGFydFZpZXcgIT09IHVuZGVmaW5lZCkge1xuICAgIG5ld1N0YXJ0VmlldyA9IHZhbGlkYXRlVmlld0lkKGluT3B0cy5zdGFydFZpZXcsIG5ld1N0YXJ0Vmlldyk7XG4gICAgZGVsZXRlIGluT3B0cy5zdGFydFZpZXc7XG4gIH1cbiAgLy8gZW5zdXJlIHBpY2sgbGV2ZWwgPD0gc3RhcnQgdmlldyA8PSBtYXggdmlld1xuICBpZiAobmV3U3RhcnRWaWV3IDwgcGlja0xldmVsKSB7XG4gICAgbmV3U3RhcnRWaWV3ID0gcGlja0xldmVsO1xuICB9IGVsc2UgaWYgKG5ld1N0YXJ0VmlldyA+IG1heFZpZXcpIHtcbiAgICBuZXdTdGFydFZpZXcgPSBtYXhWaWV3O1xuICB9XG4gIGlmIChuZXdTdGFydFZpZXcgIT09IHN0YXJ0Vmlldykge1xuICAgIGNvbmZpZy5zdGFydFZpZXcgPSBuZXdTdGFydFZpZXc7XG4gIH1cblxuICAvLyoqKiB0ZW1wbGF0ZSAqKiovL1xuICBpZiAoaW5PcHRzLnByZXZBcnJvdykge1xuICAgIHZhciBwcmV2QXJyb3cgPSBwYXJzZUhUTUwoaW5PcHRzLnByZXZBcnJvdyk7XG4gICAgaWYgKHByZXZBcnJvdy5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbmZpZy5wcmV2QXJyb3cgPSBwcmV2QXJyb3cuY2hpbGROb2RlcztcbiAgICB9XG4gICAgZGVsZXRlIGluT3B0cy5wcmV2QXJyb3c7XG4gIH1cbiAgaWYgKGluT3B0cy5uZXh0QXJyb3cpIHtcbiAgICB2YXIgbmV4dEFycm93ID0gcGFyc2VIVE1MKGluT3B0cy5uZXh0QXJyb3cpO1xuICAgIGlmIChuZXh0QXJyb3cuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25maWcubmV4dEFycm93ID0gbmV4dEFycm93LmNoaWxkTm9kZXM7XG4gICAgfVxuICAgIGRlbGV0ZSBpbk9wdHMubmV4dEFycm93O1xuICB9XG5cbiAgLy8qKiogbWlzYyAqKiovL1xuICBpZiAoaW5PcHRzLmRpc2FibGVUb3VjaEtleWJvYXJkICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25maWcuZGlzYWJsZVRvdWNoS2V5Ym9hcmQgPSAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudCAmJiAhIWluT3B0cy5kaXNhYmxlVG91Y2hLZXlib2FyZDtcbiAgICBkZWxldGUgaW5PcHRzLmRpc2FibGVUb3VjaEtleWJvYXJkO1xuICB9XG4gIGlmIChpbk9wdHMub3JpZW50YXRpb24pIHtcbiAgICB2YXIgb3JpZW50YXRpb24gPSBpbk9wdHMub3JpZW50YXRpb24udG9Mb3dlckNhc2UoKS5zcGxpdCgvXFxzKy9nKTtcbiAgICBjb25maWcub3JpZW50YXRpb24gPSB7XG4gICAgICB4OiBvcmllbnRhdGlvbi5maW5kKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiB4ID09PSAnbGVmdCcgfHwgeCA9PT0gJ3JpZ2h0JztcbiAgICAgIH0pIHx8ICdhdXRvJyxcbiAgICAgIHk6IG9yaWVudGF0aW9uLmZpbmQoZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgcmV0dXJuIHkgPT09ICd0b3AnIHx8IHkgPT09ICdib3R0b20nO1xuICAgICAgfSkgfHwgJ2F1dG8nXG4gICAgfTtcbiAgICBkZWxldGUgaW5PcHRzLm9yaWVudGF0aW9uO1xuICB9XG4gIGlmIChpbk9wdHMudG9kYXlCdG5Nb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICBzd2l0Y2ggKGluT3B0cy50b2RheUJ0bk1vZGUpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgY29uZmlnLnRvZGF5QnRuTW9kZSA9IGluT3B0cy50b2RheUJ0bk1vZGU7XG4gICAgfVxuICAgIGRlbGV0ZSBpbk9wdHMudG9kYXlCdG5Nb2RlO1xuICB9XG5cbiAgLy8qKiogY29weSB0aGUgcmVzdCAqKiovL1xuICBPYmplY3Qua2V5cyhpbk9wdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChpbk9wdHNba2V5XSAhPT0gdW5kZWZpbmVkICYmIGhhc1Byb3BlcnR5KGRlZmF1bHRPcHRpb25zLCBrZXkpKSB7XG4gICAgICBjb25maWdba2V5XSA9IGluT3B0c1trZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjb25maWc7XG59XG5cbnZhciBwaWNrZXJUZW1wbGF0ZSA9IG9wdGltaXplVGVtcGxhdGVIVE1MKFwiPGRpdiBjbGFzcz1cXFwiZGF0ZXBpY2tlciBoaWRkZW5cXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwiZGF0ZXBpY2tlci1waWNrZXIgaW5saW5lLWJsb2NrIHJvdW5kZWQtbGcgYmctd2hpdGUgZGFyazpiZy1ncmF5LTcwMCBzaGFkb3ctbGcgcC00XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZGF0ZXBpY2tlci1oZWFkZXJcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImRhdGVwaWNrZXItdGl0bGUgYmctd2hpdGUgZGFyazpiZy1ncmF5LTcwMCBkYXJrOnRleHQtd2hpdGUgcHgtMiBweS0zIHRleHQtY2VudGVyIGZvbnQtc2VtaWJvbGRcXFwiPjwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImRhdGVwaWNrZXItY29udHJvbHMgZmxleCBqdXN0aWZ5LWJldHdlZW4gbWItMlxcXCI+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJnLXdoaXRlIGRhcms6YmctZ3JheS03MDAgcm91bmRlZC1sZyB0ZXh0LWdyYXktNTAwIGRhcms6dGV4dC13aGl0ZSBob3ZlcjpiZy1ncmF5LTEwMCBkYXJrOmhvdmVyOmJnLWdyYXktNjAwIGhvdmVyOnRleHQtZ3JheS05MDAgZGFyazpob3Zlcjp0ZXh0LXdoaXRlIHRleHQtbGcgcC0yLjUgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnJpbmctMiBmb2N1czpyaW5nLWdyYXktMjAwIHByZXYtYnRuXFxcIj48L2J1dHRvbj5cXG4gICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwidGV4dC1zbSByb3VuZGVkLWxnIHRleHQtZ3JheS05MDAgZGFyazp0ZXh0LXdoaXRlIGJnLXdoaXRlIGRhcms6YmctZ3JheS03MDAgZm9udC1zZW1pYm9sZCBweS0yLjUgcHgtNSBob3ZlcjpiZy1ncmF5LTEwMCBkYXJrOmhvdmVyOmJnLWdyYXktNjAwIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy1ncmF5LTIwMCB2aWV3LXN3aXRjaFxcXCI+PC9idXR0b24+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJnLXdoaXRlIGRhcms6YmctZ3JheS03MDAgcm91bmRlZC1sZyB0ZXh0LWdyYXktNTAwIGRhcms6dGV4dC13aGl0ZSBob3ZlcjpiZy1ncmF5LTEwMCBkYXJrOmhvdmVyOmJnLWdyYXktNjAwIGhvdmVyOnRleHQtZ3JheS05MDAgZGFyazpob3Zlcjp0ZXh0LXdoaXRlIHRleHQtbGcgcC0yLjUgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnJpbmctMiBmb2N1czpyaW5nLWdyYXktMjAwIG5leHQtYnRuXFxcIj48L2J1dHRvbj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImRhdGVwaWNrZXItbWFpbiBwLTFcXFwiPjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJkYXRlcGlja2VyLWZvb3RlclxcXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZGF0ZXBpY2tlci1jb250cm9scyBmbGV4IHNwYWNlLXgtMiBydGw6c3BhY2UteC1yZXZlcnNlIG10LTJcXFwiPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCIlYnV0dG9uQ2xhc3MlIHRvZGF5LWJ0biB0ZXh0LXdoaXRlIGJnLWJsdWUtNzAwICFiZy1wcmltYXJ5LTcwMCBkYXJrOmJnLWJsdWUtNjAwIGRhcms6IWJnLXByaW1hcnktNjAwIGhvdmVyOmJnLWJsdWUtODAwIGhvdmVyOiFiZy1wcmltYXJ5LTgwMCBkYXJrOmhvdmVyOmJnLWJsdWUtNzAwIGRhcms6aG92ZXI6IWJnLXByaW1hcnktNzAwIGZvY3VzOnJpbmctNCBmb2N1czpyaW5nLWJsdWUtMzAwIGZvY3VzOiFyaW5nLXByaW1hcnktMzAwIGZvbnQtbWVkaXVtIHJvdW5kZWQtbGcgdGV4dC1zbSBweC01IHB5LTIgdGV4dC1jZW50ZXIgdy0xLzJcXFwiPjwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCIlYnV0dG9uQ2xhc3MlIGNsZWFyLWJ0biB0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC13aGl0ZSBiZy13aGl0ZSBkYXJrOmJnLWdyYXktNzAwIGJvcmRlciBib3JkZXItZ3JheS0zMDAgZGFyazpib3JkZXItZ3JheS02MDAgaG92ZXI6YmctZ3JheS0xMDAgZGFyazpob3ZlcjpiZy1ncmF5LTYwMCBmb2N1czpyaW5nLTQgZm9jdXM6cmluZy1ibHVlLTMwMCBmb2N1czohcmluZy1wcmltYXJ5LTMwMCBmb250LW1lZGl1bSByb3VuZGVkLWxnIHRleHQtc20gcHgtNSBweS0yIHRleHQtY2VudGVyIHctMS8yXFxcIj48L2J1dHRvbj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L2Rpdj5cIik7XG5cbnZhciBkYXlzVGVtcGxhdGUgPSBvcHRpbWl6ZVRlbXBsYXRlSFRNTChcIjxkaXYgY2xhc3M9XFxcImRheXNcXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwiZGF5cy1vZi13ZWVrIGdyaWQgZ3JpZC1jb2xzLTcgbWItMVxcXCI+XCIuY29uY2F0KGNyZWF0ZVRhZ1JlcGVhdCgnc3BhbicsIDcsIHtcbiAgXCJjbGFzc1wiOiAnZG93IGJsb2NrIGZsZXgtMSBsZWFkaW5nLTkgYm9yZGVyLTAgcm91bmRlZC1sZyBjdXJzb3ItZGVmYXVsdCB0ZXh0LWNlbnRlciB0ZXh0LWdyYXktOTAwIGZvbnQtc2VtaWJvbGQgdGV4dC1zbSdcbn0pLCBcIjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiZGF0ZXBpY2tlci1ncmlkIHctNjQgZ3JpZCBncmlkLWNvbHMtN1xcXCI+XCIpLmNvbmNhdChjcmVhdGVUYWdSZXBlYXQoJ3NwYW4nLCA0Miwge1xuICBcImNsYXNzXCI6ICdibG9jayBmbGV4LTEgbGVhZGluZy05IGJvcmRlci0wIHJvdW5kZWQtbGcgY3Vyc29yLWRlZmF1bHQgdGV4dC1jZW50ZXIgdGV4dC1ncmF5LTkwMCBmb250LXNlbWlib2xkIHRleHQtc20gaC02IGxlYWRpbmctNiB0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtZ3JheS01MDAgZGFyazp0ZXh0LWdyYXktNDAwJ1xufSksIFwiPC9kaXY+XFxuPC9kaXY+XCIpKTtcblxudmFyIGNhbGVuZGFyV2Vla3NUZW1wbGF0ZSA9IG9wdGltaXplVGVtcGxhdGVIVE1MKFwiPGRpdiBjbGFzcz1cXFwiY2FsZW5kYXItd2Vla3NcXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwiZGF5cy1vZi13ZWVrIGZsZXhcXFwiPjxzcGFuIGNsYXNzPVxcXCJkb3cgaC02IGxlYWRpbmctNiB0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtZ3JheS01MDAgZGFyazp0ZXh0LWdyYXktNDAwXFxcIj48L3NwYW4+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJ3ZWVrc1xcXCI+XCIuY29uY2F0KGNyZWF0ZVRhZ1JlcGVhdCgnc3BhbicsIDYsIHtcbiAgXCJjbGFzc1wiOiAnd2VlayBibG9jayBmbGV4LTEgbGVhZGluZy05IGJvcmRlci0wIHJvdW5kZWQtbGcgY3Vyc29yLWRlZmF1bHQgdGV4dC1jZW50ZXIgdGV4dC1ncmF5LTkwMCBmb250LXNlbWlib2xkIHRleHQtc20nXG59KSwgXCI8L2Rpdj5cXG48L2Rpdj5cIikpO1xuXG4vLyBCYXNlIGNsYXNzIG9mIHRoZSB2aWV3IGNsYXNzZXNcbnZhciBWaWV3ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmlldyhwaWNrZXIsIGNvbmZpZykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaWV3KTtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNvbmZpZywge1xuICAgICAgcGlja2VyOiBwaWNrZXIsXG4gICAgICBlbGVtZW50OiBwYXJzZUhUTUwoXCI8ZGl2IGNsYXNzPVxcXCJkYXRlcGlja2VyLXZpZXcgZmxleFxcXCI+PC9kaXY+XCIpLmZpcnN0Q2hpbGQsXG4gICAgICBzZWxlY3RlZDogW11cbiAgICB9KTtcbiAgICB0aGlzLmluaXQodGhpcy5waWNrZXIuZGF0ZXBpY2tlci5jb25maWcpO1xuICB9XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoVmlldywgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zLnBpY2tMZXZlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuaXNNaW5WaWV3ID0gdGhpcy5pZCA9PT0gb3B0aW9ucy5waWNrTGV2ZWw7XG4gICAgICB9XG4gICAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICB0aGlzLnVwZGF0ZUZvY3VzKCk7XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdGlvbigpO1xuICAgIH1cblxuICAgIC8vIEV4ZWN1dGUgYmVmb3JlU2hvdygpIGNhbGxiYWNrIGFuZCBhcHBseSB0aGUgcmVzdWx0IHRvIHRoZSBlbGVtZW50XG4gICAgLy8gYXJnczpcbiAgICAvLyAtIGN1cnJlbnQgLSBjdXJyZW50IHZhbHVlIG9uIHRoZSBpdGVyYXRpb24gb24gdmlldyByZW5kZXJpbmdcbiAgICAvLyAtIHRpbWVWYWx1ZSAtIHRpbWUgdmFsdWUgb2YgdGhlIGRhdGUgdG8gcGFzcyB0byBiZWZvcmVTaG93KClcbiAgfSwge1xuICAgIGtleTogXCJwZXJmb3JtQmVmb3JlSG9va1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwZXJmb3JtQmVmb3JlSG9vayhlbCwgY3VycmVudCwgdGltZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5iZWZvcmVTaG93KG5ldyBEYXRlKHRpbWVWYWx1ZSkpO1xuICAgICAgc3dpdGNoIChfdHlwZW9mKHJlc3VsdCkpIHtcbiAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgZW5hYmxlZDogcmVzdWx0XG4gICAgICAgICAgfTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICBjbGFzc2VzOiByZXN1bHRcbiAgICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0LmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgICAgICBwdXNoVW5pcXVlKHRoaXMuZGlzYWJsZWQsIGN1cnJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQuY2xhc3Nlcykge1xuICAgICAgICAgIHZhciBfZWwkY2xhc3NMaXN0O1xuICAgICAgICAgIHZhciBleHRyYUNsYXNzZXMgPSByZXN1bHQuY2xhc3Nlcy5zcGxpdCgvXFxzKy8pO1xuICAgICAgICAgIChfZWwkY2xhc3NMaXN0ID0gZWwuY2xhc3NMaXN0KS5hZGQuYXBwbHkoX2VsJGNsYXNzTGlzdCwgX3RvQ29uc3VtYWJsZUFycmF5KGV4dHJhQ2xhc3NlcykpO1xuICAgICAgICAgIGlmIChleHRyYUNsYXNzZXMuaW5jbHVkZXMoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICAgIHB1c2hVbmlxdWUodGhpcy5kaXNhYmxlZCwgY3VycmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQuY29udGVudCkge1xuICAgICAgICAgIHJlcGxhY2VDaGlsZE5vZGVzKGVsLCByZXN1bHQuY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcbn0oKTtcblxudmFyIERheXNWaWV3ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVmlldykge1xuICBmdW5jdGlvbiBEYXlzVmlldyhwaWNrZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF5c1ZpZXcpO1xuICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIERheXNWaWV3LCBbcGlja2VyLCB7XG4gICAgICBpZDogMCxcbiAgICAgIG5hbWU6ICdkYXlzJyxcbiAgICAgIGNlbGxDbGFzczogJ2RheSdcbiAgICB9XSk7XG4gIH1cbiAgX2luaGVyaXRzKERheXNWaWV3LCBfVmlldyk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoRGF5c1ZpZXcsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdChvcHRpb25zKSB7XG4gICAgICB2YXIgb25Db25zdHJ1Y3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgICBpZiAob25Db25zdHJ1Y3Rpb24pIHtcbiAgICAgICAgdmFyIGlubmVyID0gcGFyc2VIVE1MKGRheXNUZW1wbGF0ZSkuZmlyc3RDaGlsZDtcbiAgICAgICAgdGhpcy5kb3cgPSBpbm5lci5maXJzdENoaWxkO1xuICAgICAgICB0aGlzLmdyaWQgPSBpbm5lci5sYXN0Q2hpbGQ7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChpbm5lcik7XG4gICAgICB9XG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihEYXlzVmlldy5wcm90b3R5cGUpLCBcImluaXRcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0T3B0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgdXBkYXRlRE9XO1xuICAgICAgaWYgKGhhc1Byb3BlcnR5KG9wdGlvbnMsICdtaW5EYXRlJykpIHtcbiAgICAgICAgdGhpcy5taW5EYXRlID0gb3B0aW9ucy5taW5EYXRlO1xuICAgICAgfVxuICAgICAgaWYgKGhhc1Byb3BlcnR5KG9wdGlvbnMsICdtYXhEYXRlJykpIHtcbiAgICAgICAgdGhpcy5tYXhEYXRlID0gb3B0aW9ucy5tYXhEYXRlO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZGF0ZXNEaXNhYmxlZCkge1xuICAgICAgICB0aGlzLmRhdGVzRGlzYWJsZWQgPSBvcHRpb25zLmRhdGVzRGlzYWJsZWQ7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5kYXlzT2ZXZWVrRGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5kYXlzT2ZXZWVrRGlzYWJsZWQgPSBvcHRpb25zLmRheXNPZldlZWtEaXNhYmxlZDtcbiAgICAgICAgdXBkYXRlRE9XID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmRheXNPZldlZWtIaWdobGlnaHRlZCkge1xuICAgICAgICB0aGlzLmRheXNPZldlZWtIaWdobGlnaHRlZCA9IG9wdGlvbnMuZGF5c09mV2Vla0hpZ2hsaWdodGVkO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMudG9kYXlIaWdobGlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnRvZGF5SGlnaGxpZ2h0ID0gb3B0aW9ucy50b2RheUhpZ2hsaWdodDtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLndlZWtTdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMud2Vla1N0YXJ0ID0gb3B0aW9ucy53ZWVrU3RhcnQ7XG4gICAgICAgIHRoaXMud2Vla0VuZCA9IG9wdGlvbnMud2Vla0VuZDtcbiAgICAgICAgdXBkYXRlRE9XID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmxvY2FsZSkge1xuICAgICAgICB2YXIgbG9jYWxlID0gdGhpcy5sb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgICAgICAgdGhpcy5kYXlOYW1lcyA9IGxvY2FsZS5kYXlzTWluO1xuICAgICAgICB0aGlzLnN3aXRjaExhYmVsRm9ybWF0ID0gbG9jYWxlLnRpdGxlRm9ybWF0O1xuICAgICAgICB1cGRhdGVET1cgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuYmVmb3JlU2hvd0RheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuYmVmb3JlU2hvdyA9IHR5cGVvZiBvcHRpb25zLmJlZm9yZVNob3dEYXkgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmJlZm9yZVNob3dEYXkgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5jYWxlbmRhcldlZWtzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuY2FsZW5kYXJXZWVrcyAmJiAhdGhpcy5jYWxlbmRhcldlZWtzKSB7XG4gICAgICAgICAgdmFyIHdlZWtzRWxlbSA9IHBhcnNlSFRNTChjYWxlbmRhcldlZWtzVGVtcGxhdGUpLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgdGhpcy5jYWxlbmRhcldlZWtzID0ge1xuICAgICAgICAgICAgZWxlbWVudDogd2Vla3NFbGVtLFxuICAgICAgICAgICAgZG93OiB3ZWVrc0VsZW0uZmlyc3RDaGlsZCxcbiAgICAgICAgICAgIHdlZWtzOiB3ZWVrc0VsZW0ubGFzdENoaWxkXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKHdlZWtzRWxlbSwgdGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY2FsZW5kYXJXZWVrcyAmJiAhb3B0aW9ucy5jYWxlbmRhcldlZWtzKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuY2FsZW5kYXJXZWVrcy5lbGVtZW50KTtcbiAgICAgICAgICB0aGlzLmNhbGVuZGFyV2Vla3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5zaG93RGF5c09mV2VlayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnNob3dEYXlzT2ZXZWVrKSB7XG4gICAgICAgICAgc2hvd0VsZW1lbnQodGhpcy5kb3cpO1xuICAgICAgICAgIGlmICh0aGlzLmNhbGVuZGFyV2Vla3MpIHtcbiAgICAgICAgICAgIHNob3dFbGVtZW50KHRoaXMuY2FsZW5kYXJXZWVrcy5kb3cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWRlRWxlbWVudCh0aGlzLmRvdyk7XG4gICAgICAgICAgaWYgKHRoaXMuY2FsZW5kYXJXZWVrcykge1xuICAgICAgICAgICAgaGlkZUVsZW1lbnQodGhpcy5jYWxlbmRhcldlZWtzLmRvdyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHVwZGF0ZSBkYXlzLW9mLXdlZWsgd2hlbiBsb2NhbGUsIGRheXNPZndlZWtEaXNhYmxlZCBvciB3ZWVrU3RhcnQgaXMgY2hhbmdlZFxuICAgICAgaWYgKHVwZGF0ZURPVykge1xuICAgICAgICBBcnJheS5mcm9tKHRoaXMuZG93LmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICAgICAgICB2YXIgZG93ID0gKF90aGlzLndlZWtTdGFydCArIGluZGV4KSAlIDc7XG4gICAgICAgICAgZWwudGV4dENvbnRlbnQgPSBfdGhpcy5kYXlOYW1lc1tkb3ddO1xuICAgICAgICAgIGVsLmNsYXNzTmFtZSA9IF90aGlzLmRheXNPZldlZWtEaXNhYmxlZC5pbmNsdWRlcyhkb3cpID8gJ2RvdyBkaXNhYmxlZCB0ZXh0LWNlbnRlciBoLTYgbGVhZGluZy02IHRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTUwMCBkYXJrOnRleHQtZ3JheS00MDAgY3Vyc29yLW5vdC1hbGxvd2VkJyA6ICdkb3cgdGV4dC1jZW50ZXIgaC02IGxlYWRpbmctNiB0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtZ3JheS01MDAgZGFyazp0ZXh0LWdyYXktNDAwJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgdXBkYXRlIG9uIHRoZSBmb2N1c2VkIGRhdGUgdG8gdmlldydzIHNldHRpbmdzXG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlRm9jdXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlRm9jdXMoKSB7XG4gICAgICB2YXIgdmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLnBpY2tlci52aWV3RGF0ZSk7XG4gICAgICB2YXIgdmlld1llYXIgPSB2aWV3RGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgdmFyIHZpZXdNb250aCA9IHZpZXdEYXRlLmdldE1vbnRoKCk7XG4gICAgICB2YXIgZmlyc3RPZk1vbnRoID0gZGF0ZVZhbHVlKHZpZXdZZWFyLCB2aWV3TW9udGgsIDEpO1xuICAgICAgdmFyIHN0YXJ0ID0gZGF5T2ZUaGVXZWVrT2YoZmlyc3RPZk1vbnRoLCB0aGlzLndlZWtTdGFydCwgdGhpcy53ZWVrU3RhcnQpO1xuICAgICAgdGhpcy5maXJzdCA9IGZpcnN0T2ZNb250aDtcbiAgICAgIHRoaXMubGFzdCA9IGRhdGVWYWx1ZSh2aWV3WWVhciwgdmlld01vbnRoICsgMSwgMCk7XG4gICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICB0aGlzLmZvY3VzZWQgPSB0aGlzLnBpY2tlci52aWV3RGF0ZTtcbiAgICB9XG5cbiAgICAvLyBBcHBseSB1cGRhdGUgb24gdGhlIHNlbGVjdGVkIGRhdGVzIHRvIHZpZXcncyBzZXR0aW5nc1xuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVNlbGVjdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTZWxlY3Rpb24oKSB7XG4gICAgICB2YXIgX3RoaXMkcGlja2VyJGRhdGVwaWNrID0gdGhpcy5waWNrZXIuZGF0ZXBpY2tlcixcbiAgICAgICAgZGF0ZXMgPSBfdGhpcyRwaWNrZXIkZGF0ZXBpY2suZGF0ZXMsXG4gICAgICAgIHJhbmdlcGlja2VyID0gX3RoaXMkcGlja2VyJGRhdGVwaWNrLnJhbmdlcGlja2VyO1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IGRhdGVzO1xuICAgICAgaWYgKHJhbmdlcGlja2VyKSB7XG4gICAgICAgIHRoaXMucmFuZ2UgPSByYW5nZXBpY2tlci5kYXRlcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdGhlIGVudGlyZSB2aWV3IFVJXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgLy8gdXBkYXRlIHRvZGF5IG1hcmtlciBvbiBldmVyIHJlbmRlclxuICAgICAgdGhpcy50b2RheSA9IHRoaXMudG9kYXlIaWdobGlnaHQgPyB0b2RheSgpIDogdW5kZWZpbmVkO1xuICAgICAgLy8gcmVmcmVzaCBkaXNhYmxlZCBkYXRlcyBvbiBldmVyeSByZW5kZXIgaW4gb3JkZXIgdG8gY2xlYXIgdGhlIG9uZXMgYWRkZWRcbiAgICAgIC8vIGJ5IGJlZm9yZVNob3cgaG9vayBhdCBwcmV2aW91cyByZW5kZXJcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5kYXRlc0Rpc2FibGVkKTtcbiAgICAgIHZhciBzd2l0Y2hMYWJlbCA9IGZvcm1hdERhdGUodGhpcy5mb2N1c2VkLCB0aGlzLnN3aXRjaExhYmVsRm9ybWF0LCB0aGlzLmxvY2FsZSk7XG4gICAgICB0aGlzLnBpY2tlci5zZXRWaWV3U3dpdGNoTGFiZWwoc3dpdGNoTGFiZWwpO1xuICAgICAgdGhpcy5waWNrZXIuc2V0UHJldkJ0bkRpc2FibGVkKHRoaXMuZmlyc3QgPD0gdGhpcy5taW5EYXRlKTtcbiAgICAgIHRoaXMucGlja2VyLnNldE5leHRCdG5EaXNhYmxlZCh0aGlzLmxhc3QgPj0gdGhpcy5tYXhEYXRlKTtcbiAgICAgIGlmICh0aGlzLmNhbGVuZGFyV2Vla3MpIHtcbiAgICAgICAgLy8gc3RhcnQgb2YgdGhlIFVUQyB3ZWVrIChNb25kYXkpIG9mIHRoZSAxc3Qgb2YgdGhlIG1vbnRoXG4gICAgICAgIHZhciBzdGFydE9mV2VlayA9IGRheU9mVGhlV2Vla09mKHRoaXMuZmlyc3QsIDEsIDEpO1xuICAgICAgICBBcnJheS5mcm9tKHRoaXMuY2FsZW5kYXJXZWVrcy53ZWVrcy5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgICAgICAgZWwudGV4dENvbnRlbnQgPSBnZXRXZWVrKGFkZFdlZWtzKHN0YXJ0T2ZXZWVrLCBpbmRleCkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIEFycmF5LmZyb20odGhpcy5ncmlkLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGNsYXNzTGlzdCA9IGVsLmNsYXNzTGlzdDtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBhZGREYXlzKF90aGlzMi5zdGFydCwgaW5kZXgpO1xuICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGN1cnJlbnQpO1xuICAgICAgICB2YXIgZGF5ID0gZGF0ZS5nZXREYXkoKTtcbiAgICAgICAgZWwuY2xhc3NOYW1lID0gXCJkYXRlcGlja2VyLWNlbGwgaG92ZXI6YmctZ3JheS0xMDAgZGFyazpob3ZlcjpiZy1ncmF5LTYwMCBibG9jayBmbGV4LTEgbGVhZGluZy05IGJvcmRlci0wIHJvdW5kZWQtbGcgY3Vyc29yLXBvaW50ZXIgdGV4dC1jZW50ZXIgdGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtd2hpdGUgZm9udC1zZW1pYm9sZCB0ZXh0LXNtIFwiLmNvbmNhdChfdGhpczIuY2VsbENsYXNzKTtcbiAgICAgICAgZWwuZGF0YXNldC5kYXRlID0gY3VycmVudDtcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPSBkYXRlLmdldERhdGUoKTtcbiAgICAgICAgaWYgKGN1cnJlbnQgPCBfdGhpczIuZmlyc3QpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdwcmV2JywgJ3RleHQtZ3JheS01MDAnLCAnZGFyazp0ZXh0LXdoaXRlJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudCA+IF90aGlzMi5sYXN0KSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnbmV4dCcsICd0ZXh0LWdyYXktNTAwJywgJ2Rhcms6dGV4dC13aGl0ZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpczIudG9kYXkgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCd0b2RheScsICdiZy1ncmF5LTEwMCcsICdkYXJrOmJnLWdyYXktNjAwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPCBfdGhpczIubWluRGF0ZSB8fCBjdXJyZW50ID4gX3RoaXMyLm1heERhdGUgfHwgX3RoaXMyLmRpc2FibGVkLmluY2x1ZGVzKGN1cnJlbnQpKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnLCAnY3Vyc29yLW5vdC1hbGxvd2VkJywgJ3RleHQtZ3JheS00MDAnLCAnZGFyazp0ZXh0LWdyYXktNTAwJyk7XG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgnaG92ZXI6YmctZ3JheS0xMDAnLCAnZGFyazpob3ZlcjpiZy1ncmF5LTYwMCcsICd0ZXh0LWdyYXktOTAwJywgJ2Rhcms6dGV4dC13aGl0ZScsICdjdXJzb3ItcG9pbnRlcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpczIuZGF5c09mV2Vla0Rpc2FibGVkLmluY2x1ZGVzKGRheSkpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcsICdjdXJzb3Itbm90LWFsbG93ZWQnLCAndGV4dC1ncmF5LTQwMCcsICdkYXJrOnRleHQtZ3JheS01MDAnKTtcbiAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdob3ZlcjpiZy1ncmF5LTEwMCcsICdkYXJrOmhvdmVyOmJnLWdyYXktNjAwJywgJ3RleHQtZ3JheS05MDAnLCAnZGFyazp0ZXh0LXdoaXRlJywgJ2N1cnNvci1wb2ludGVyJyk7XG4gICAgICAgICAgcHVzaFVuaXF1ZShfdGhpczIuZGlzYWJsZWQsIGN1cnJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpczIuZGF5c09mV2Vla0hpZ2hsaWdodGVkLmluY2x1ZGVzKGRheSkpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdoaWdobGlnaHRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpczIucmFuZ2UpIHtcbiAgICAgICAgICB2YXIgX3RoaXMyJHJhbmdlID0gX3NsaWNlZFRvQXJyYXkoX3RoaXMyLnJhbmdlLCAyKSxcbiAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfdGhpczIkcmFuZ2VbMF0sXG4gICAgICAgICAgICByYW5nZUVuZCA9IF90aGlzMiRyYW5nZVsxXTtcbiAgICAgICAgICBpZiAoY3VycmVudCA+IHJhbmdlU3RhcnQgJiYgY3VycmVudCA8IHJhbmdlRW5kKSB7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZScsICdiZy1ncmF5LTIwMCcsICdkYXJrOmJnLWdyYXktNjAwJyk7XG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdyb3VuZGVkLWxnJywgJ3JvdW5kZWQtbC1sZycsICdyb3VuZGVkLXItbGcnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPT09IHJhbmdlU3RhcnQpIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3JhbmdlLXN0YXJ0JywgJ2JnLWdyYXktMTAwJywgJ2Rhcms6YmctZ3JheS02MDAnLCAncm91bmRlZC1sLWxnJyk7XG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdyb3VuZGVkLWxnJywgJ3JvdW5kZWQtci1sZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3VycmVudCA9PT0gcmFuZ2VFbmQpIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3JhbmdlLWVuZCcsICdiZy1ncmF5LTEwMCcsICdkYXJrOmJnLWdyYXktNjAwJywgJ3JvdW5kZWQtci1sZycpO1xuICAgICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgncm91bmRlZC1sZycsICdyb3VuZGVkLWwtbGcnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90aGlzMi5zZWxlY3RlZC5pbmNsdWRlcyhjdXJyZW50KSkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJywgJ2JnLWJsdWUtNzAwJywgJyFiZy1wcmltYXJ5LTcwMCcsICd0ZXh0LXdoaXRlJywgJ2Rhcms6YmctYmx1ZS02MDAnLCAnZGFyazohYmctcHJpbWFyeS02MDAnLCAnZGFyazp0ZXh0LXdoaXRlJyk7XG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgndGV4dC1ncmF5LTkwMCcsICd0ZXh0LWdyYXktNTAwJywgJ2hvdmVyOmJnLWdyYXktMTAwJywgJ2Rhcms6dGV4dC13aGl0ZScsICdkYXJrOmhvdmVyOmJnLWdyYXktNjAwJywgJ2Rhcms6YmctZ3JheS02MDAnLCAnYmctZ3JheS0xMDAnLCAnYmctZ3JheS0yMDAnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudCA9PT0gX3RoaXMyLmZvY3VzZWQpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdmb2N1c2VkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90aGlzMi5iZWZvcmVTaG93KSB7XG4gICAgICAgICAgX3RoaXMyLnBlcmZvcm1CZWZvcmVIb29rKGVsLCBjdXJyZW50LCBjdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHRoZSB2aWV3IFVJIGJ5IGFwcGx5aW5nIHRoZSBjaGFuZ2VzIG9mIHNlbGVjdGVkIGFuZCBmb2N1c2VkIGl0ZW1zXG4gIH0sIHtcbiAgICBrZXk6IFwicmVmcmVzaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG4gICAgICB2YXIgX3JlZiA9IHRoaXMucmFuZ2UgfHwgW10sXG4gICAgICAgIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgIHJhbmdlU3RhcnQgPSBfcmVmMlswXSxcbiAgICAgICAgcmFuZ2VFbmQgPSBfcmVmMlsxXTtcbiAgICAgIHRoaXMuZ3JpZC5xdWVyeVNlbGVjdG9yQWxsKCcucmFuZ2UsIC5yYW5nZS1zdGFydCwgLnJhbmdlLWVuZCwgLnNlbGVjdGVkLCAuZm9jdXNlZCcpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ3JhbmdlJywgJ3JhbmdlLXN0YXJ0JywgJ3JhbmdlLWVuZCcsICdzZWxlY3RlZCcsICdiZy1ibHVlLTcwMCcsICchYmctcHJpbWFyeS03MDAnLCAndGV4dC13aGl0ZScsICdkYXJrOmJnLWJsdWUtNjAwJywgJ2Rhcms6IWJnLXByaW1hcnktNjAwJywgJ2Rhcms6dGV4dC13aGl0ZScsICdmb2N1c2VkJyk7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3RleHQtZ3JheS05MDAnLCAncm91bmRlZC1sZycsICdkYXJrOnRleHQtd2hpdGUnKTtcbiAgICAgIH0pO1xuICAgICAgQXJyYXkuZnJvbSh0aGlzLmdyaWQuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gTnVtYmVyKGVsLmRhdGFzZXQuZGF0ZSk7XG4gICAgICAgIHZhciBjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3Q7XG4gICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2JnLWdyYXktMjAwJywgJ2Rhcms6YmctZ3JheS02MDAnLCAncm91bmRlZC1sLWxnJywgJ3JvdW5kZWQtci1sZycpO1xuICAgICAgICBpZiAoY3VycmVudCA+IHJhbmdlU3RhcnQgJiYgY3VycmVudCA8IHJhbmdlRW5kKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgncmFuZ2UnLCAnYmctZ3JheS0yMDAnLCAnZGFyazpiZy1ncmF5LTYwMCcpO1xuICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ3JvdW5kZWQtbGcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudCA9PT0gcmFuZ2VTdGFydCkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3JhbmdlLXN0YXJ0JywgJ2JnLWdyYXktMjAwJywgJ2Rhcms6YmctZ3JheS02MDAnLCAncm91bmRlZC1sLWxnJyk7XG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgncm91bmRlZC1sZycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID09PSByYW5nZUVuZCkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3JhbmdlLWVuZCcsICdiZy1ncmF5LTIwMCcsICdkYXJrOmJnLWdyYXktNjAwJywgJ3JvdW5kZWQtci1sZycpO1xuICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ3JvdW5kZWQtbGcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3RoaXMzLnNlbGVjdGVkLmluY2x1ZGVzKGN1cnJlbnQpKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnLCAnYmctYmx1ZS03MDAnLCAnIWJnLXByaW1hcnktNzAwJywgJ3RleHQtd2hpdGUnLCAnZGFyazpiZy1ibHVlLTYwMCcsICdkYXJrOiFiZy1wcmltYXJ5LTYwMCcsICdkYXJrOnRleHQtd2hpdGUnKTtcbiAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCd0ZXh0LWdyYXktOTAwJywgJ2hvdmVyOmJnLWdyYXktMTAwJywgJ2Rhcms6dGV4dC13aGl0ZScsICdkYXJrOmhvdmVyOmJnLWdyYXktNjAwJywgJ2JnLWdyYXktMTAwJywgJ2JnLWdyYXktMjAwJywgJ2Rhcms6YmctZ3JheS02MDAnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudCA9PT0gX3RoaXMzLmZvY3VzZWQpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdmb2N1c2VkJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgdmlldyBVSSBieSBhcHBseWluZyB0aGUgY2hhbmdlIG9mIGZvY3VzZWQgaXRlbVxuICB9LCB7XG4gICAga2V5OiBcInJlZnJlc2hGb2N1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWZyZXNoRm9jdXMoKSB7XG4gICAgICB2YXIgaW5kZXggPSBNYXRoLnJvdW5kKCh0aGlzLmZvY3VzZWQgLSB0aGlzLnN0YXJ0KSAvIDg2NDAwMDAwKTtcbiAgICAgIHRoaXMuZ3JpZC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9jdXNlZCcpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZvY3VzZWQnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5ncmlkLmNoaWxkcmVuW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdmb2N1c2VkJyk7XG4gICAgfVxuICB9XSk7XG59KFZpZXcpO1xuXG5mdW5jdGlvbiBjb21wdXRlTW9udGhSYW5nZShyYW5nZSwgdGhpc1llYXIpIHtcbiAgaWYgKCFyYW5nZSB8fCAhcmFuZ2VbMF0gfHwgIXJhbmdlWzFdKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBfcmFuZ2UgPSBfc2xpY2VkVG9BcnJheShyYW5nZSwgMiksXG4gICAgX3JhbmdlJCA9IF9zbGljZWRUb0FycmF5KF9yYW5nZVswXSwgMiksXG4gICAgc3RhcnRZID0gX3JhbmdlJFswXSxcbiAgICBzdGFydE0gPSBfcmFuZ2UkWzFdLFxuICAgIF9yYW5nZSQyID0gX3NsaWNlZFRvQXJyYXkoX3JhbmdlWzFdLCAyKSxcbiAgICBlbmRZID0gX3JhbmdlJDJbMF0sXG4gICAgZW5kTSA9IF9yYW5nZSQyWzFdO1xuICBpZiAoc3RhcnRZID4gdGhpc1llYXIgfHwgZW5kWSA8IHRoaXNZZWFyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiBbc3RhcnRZID09PSB0aGlzWWVhciA/IHN0YXJ0TSA6IC0xLCBlbmRZID09PSB0aGlzWWVhciA/IGVuZE0gOiAxMl07XG59XG52YXIgTW9udGhzVmlldyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1ZpZXcpIHtcbiAgZnVuY3Rpb24gTW9udGhzVmlldyhwaWNrZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9udGhzVmlldyk7XG4gICAgcmV0dXJuIF9jYWxsU3VwZXIodGhpcywgTW9udGhzVmlldywgW3BpY2tlciwge1xuICAgICAgaWQ6IDEsXG4gICAgICBuYW1lOiAnbW9udGhzJyxcbiAgICAgIGNlbGxDbGFzczogJ21vbnRoJ1xuICAgIH1dKTtcbiAgfVxuICBfaW5oZXJpdHMoTW9udGhzVmlldywgX1ZpZXcpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKE1vbnRoc1ZpZXcsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdChvcHRpb25zKSB7XG4gICAgICB2YXIgb25Db25zdHJ1Y3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgICBpZiAob25Db25zdHJ1Y3Rpb24pIHtcbiAgICAgICAgdGhpcy5ncmlkID0gdGhpcy5lbGVtZW50O1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbW9udGhzJywgJ2RhdGVwaWNrZXItZ3JpZCcsICd3LTY0JywgJ2dyaWQnLCAnZ3JpZC1jb2xzLTQnKTtcbiAgICAgICAgdGhpcy5ncmlkLmFwcGVuZENoaWxkKHBhcnNlSFRNTChjcmVhdGVUYWdSZXBlYXQoJ3NwYW4nLCAxMiwge1xuICAgICAgICAgICdkYXRhLW1vbnRoJzogZnVuY3Rpb24gZGF0YU1vbnRoKGl4KSB7XG4gICAgICAgICAgICByZXR1cm4gaXg7XG4gICAgICAgICAgfVxuICAgICAgICB9KSkpO1xuICAgICAgfVxuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTW9udGhzVmlldy5wcm90b3R5cGUpLCBcImluaXRcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0T3B0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zLmxvY2FsZSkge1xuICAgICAgICB0aGlzLm1vbnRoTmFtZXMgPSBvcHRpb25zLmxvY2FsZS5tb250aHNTaG9ydDtcbiAgICAgIH1cbiAgICAgIGlmIChoYXNQcm9wZXJ0eShvcHRpb25zLCAnbWluRGF0ZScpKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm1pbkRhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMubWluWWVhciA9IHRoaXMubWluTW9udGggPSB0aGlzLm1pbkRhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG1pbkRhdGVPYmogPSBuZXcgRGF0ZShvcHRpb25zLm1pbkRhdGUpO1xuICAgICAgICAgIHRoaXMubWluWWVhciA9IG1pbkRhdGVPYmouZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICB0aGlzLm1pbk1vbnRoID0gbWluRGF0ZU9iai5nZXRNb250aCgpO1xuICAgICAgICAgIHRoaXMubWluRGF0ZSA9IG1pbkRhdGVPYmouc2V0RGF0ZSgxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGhhc1Byb3BlcnR5KG9wdGlvbnMsICdtYXhEYXRlJykpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubWF4RGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5tYXhZZWFyID0gdGhpcy5tYXhNb250aCA9IHRoaXMubWF4RGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbWF4RGF0ZU9iaiA9IG5ldyBEYXRlKG9wdGlvbnMubWF4RGF0ZSk7XG4gICAgICAgICAgdGhpcy5tYXhZZWFyID0gbWF4RGF0ZU9iai5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgIHRoaXMubWF4TW9udGggPSBtYXhEYXRlT2JqLmdldE1vbnRoKCk7XG4gICAgICAgICAgdGhpcy5tYXhEYXRlID0gZGF0ZVZhbHVlKHRoaXMubWF4WWVhciwgdGhpcy5tYXhNb250aCArIDEsIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5iZWZvcmVTaG93TW9udGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmJlZm9yZVNob3cgPSB0eXBlb2Ygb3B0aW9ucy5iZWZvcmVTaG93TW9udGggPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmJlZm9yZVNob3dNb250aCA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdmlldydzIHNldHRpbmdzIHRvIHJlZmxlY3QgdGhlIHZpZXdEYXRlIHNldCBvbiB0aGUgcGlja2VyXG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlRm9jdXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlRm9jdXMoKSB7XG4gICAgICB2YXIgdmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLnBpY2tlci52aWV3RGF0ZSk7XG4gICAgICB0aGlzLnllYXIgPSB2aWV3RGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgdGhpcy5mb2N1c2VkID0gdmlld0RhdGUuZ2V0TW9udGgoKTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdmlldydzIHNldHRpbmdzIHRvIHJlZmxlY3QgdGhlIHNlbGVjdGVkIGRhdGVzXG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlU2VsZWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVNlbGVjdGlvbigpIHtcbiAgICAgIHZhciBfdGhpcyRwaWNrZXIkZGF0ZXBpY2sgPSB0aGlzLnBpY2tlci5kYXRlcGlja2VyLFxuICAgICAgICBkYXRlcyA9IF90aGlzJHBpY2tlciRkYXRlcGljay5kYXRlcyxcbiAgICAgICAgcmFuZ2VwaWNrZXIgPSBfdGhpcyRwaWNrZXIkZGF0ZXBpY2sucmFuZ2VwaWNrZXI7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gZGF0ZXMucmVkdWNlKGZ1bmN0aW9uIChzZWxlY3RlZCwgdGltZVZhbHVlKSB7XG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUodGltZVZhbHVlKTtcbiAgICAgICAgdmFyIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgIHZhciBtb250aCA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgICAgICAgaWYgKHNlbGVjdGVkW3llYXJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzZWxlY3RlZFt5ZWFyXSA9IFttb250aF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaFVuaXF1ZShzZWxlY3RlZFt5ZWFyXSwgbW9udGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICAgIH0sIHt9KTtcbiAgICAgIGlmIChyYW5nZXBpY2tlciAmJiByYW5nZXBpY2tlci5kYXRlcykge1xuICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2VwaWNrZXIuZGF0ZXMubWFwKGZ1bmN0aW9uICh0aW1lVmFsdWUpIHtcbiAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRpbWVWYWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIGlzTmFOKGRhdGUpID8gdW5kZWZpbmVkIDogW2RhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpXTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHRoZSBlbnRpcmUgdmlldyBVSVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgLy8gcmVmcmVzaCBkaXNhYmxlZCBtb250aHMgb24gZXZlcnkgcmVuZGVyIGluIG9yZGVyIHRvIGNsZWFyIHRoZSBvbmVzIGFkZGVkXG4gICAgICAvLyBieSBiZWZvcmVTaG93IGhvb2sgYXQgcHJldmlvdXMgcmVuZGVyXG4gICAgICB0aGlzLmRpc2FibGVkID0gW107XG4gICAgICB0aGlzLnBpY2tlci5zZXRWaWV3U3dpdGNoTGFiZWwodGhpcy55ZWFyKTtcbiAgICAgIHRoaXMucGlja2VyLnNldFByZXZCdG5EaXNhYmxlZCh0aGlzLnllYXIgPD0gdGhpcy5taW5ZZWFyKTtcbiAgICAgIHRoaXMucGlja2VyLnNldE5leHRCdG5EaXNhYmxlZCh0aGlzLnllYXIgPj0gdGhpcy5tYXhZZWFyKTtcbiAgICAgIHZhciBzZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRbdGhpcy55ZWFyXSB8fCBbXTtcbiAgICAgIHZhciB5ck91dE9mUmFuZ2UgPSB0aGlzLnllYXIgPCB0aGlzLm1pblllYXIgfHwgdGhpcy55ZWFyID4gdGhpcy5tYXhZZWFyO1xuICAgICAgdmFyIGlzTWluWWVhciA9IHRoaXMueWVhciA9PT0gdGhpcy5taW5ZZWFyO1xuICAgICAgdmFyIGlzTWF4WWVhciA9IHRoaXMueWVhciA9PT0gdGhpcy5tYXhZZWFyO1xuICAgICAgdmFyIHJhbmdlID0gY29tcHV0ZU1vbnRoUmFuZ2UodGhpcy5yYW5nZSwgdGhpcy55ZWFyKTtcbiAgICAgIEFycmF5LmZyb20odGhpcy5ncmlkLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGNsYXNzTGlzdCA9IGVsLmNsYXNzTGlzdDtcbiAgICAgICAgdmFyIGRhdGUgPSBkYXRlVmFsdWUoX3RoaXMueWVhciwgaW5kZXgsIDEpO1xuICAgICAgICBlbC5jbGFzc05hbWUgPSBcImRhdGVwaWNrZXItY2VsbCBob3ZlcjpiZy1ncmF5LTEwMCBkYXJrOmhvdmVyOmJnLWdyYXktNjAwIGJsb2NrIGZsZXgtMSBsZWFkaW5nLTkgYm9yZGVyLTAgcm91bmRlZC1sZyBjdXJzb3ItcG9pbnRlciB0ZXh0LWNlbnRlciB0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC13aGl0ZSBmb250LXNlbWlib2xkIHRleHQtc20gXCIuY29uY2F0KF90aGlzLmNlbGxDbGFzcyk7XG4gICAgICAgIGlmIChfdGhpcy5pc01pblZpZXcpIHtcbiAgICAgICAgICBlbC5kYXRhc2V0LmRhdGUgPSBkYXRlO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlc2V0IHRleHQgb24gZXZlcnkgcmVuZGVyIHRvIGNsZWFyIHRoZSBjdXN0b20gY29udGVudCBzZXRcbiAgICAgICAgLy8gYnkgYmVmb3JlU2hvdyBob29rIGF0IHByZXZpb3VzIHJlbmRlclxuICAgICAgICBlbC50ZXh0Q29udGVudCA9IF90aGlzLm1vbnRoTmFtZXNbaW5kZXhdO1xuICAgICAgICBpZiAoeXJPdXRPZlJhbmdlIHx8IGlzTWluWWVhciAmJiBpbmRleCA8IF90aGlzLm1pbk1vbnRoIHx8IGlzTWF4WWVhciAmJiBpbmRleCA+IF90aGlzLm1heE1vbnRoKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICB2YXIgX3JhbmdlMiA9IF9zbGljZWRUb0FycmF5KHJhbmdlLCAyKSxcbiAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfcmFuZ2UyWzBdLFxuICAgICAgICAgICAgcmFuZ2VFbmQgPSBfcmFuZ2UyWzFdO1xuICAgICAgICAgIGlmIChpbmRleCA+IHJhbmdlU3RhcnQgJiYgaW5kZXggPCByYW5nZUVuZCkge1xuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCgncmFuZ2UnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGV4ID09PSByYW5nZVN0YXJ0KSB7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZS1zdGFydCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW5kZXggPT09IHJhbmdlRW5kKSB7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZS1lbmQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGVjdGVkLmluY2x1ZGVzKGluZGV4KSkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJywgJ2JnLWJsdWUtNzAwJywgJyFiZy1wcmltYXJ5LTcwMCcsICd0ZXh0LXdoaXRlJywgJ2Rhcms6YmctYmx1ZS02MDAnLCAnZGFyazohYmctcHJpbWFyeS02MDAnLCAnZGFyazp0ZXh0LXdoaXRlJyk7XG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgndGV4dC1ncmF5LTkwMCcsICdob3ZlcjpiZy1ncmF5LTEwMCcsICdkYXJrOnRleHQtd2hpdGUnLCAnZGFyazpob3ZlcjpiZy1ncmF5LTYwMCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCA9PT0gX3RoaXMuZm9jdXNlZCkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ2ZvY3VzZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3RoaXMuYmVmb3JlU2hvdykge1xuICAgICAgICAgIF90aGlzLnBlcmZvcm1CZWZvcmVIb29rKGVsLCBpbmRleCwgZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgdmlldyBVSSBieSBhcHBseWluZyB0aGUgY2hhbmdlcyBvZiBzZWxlY3RlZCBhbmQgZm9jdXNlZCBpdGVtc1xuICB9LCB7XG4gICAga2V5OiBcInJlZnJlc2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIHNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZFt0aGlzLnllYXJdIHx8IFtdO1xuICAgICAgdmFyIF9yZWYgPSBjb21wdXRlTW9udGhSYW5nZSh0aGlzLnJhbmdlLCB0aGlzLnllYXIpIHx8IFtdLFxuICAgICAgICBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICByYW5nZVN0YXJ0ID0gX3JlZjJbMF0sXG4gICAgICAgIHJhbmdlRW5kID0gX3JlZjJbMV07XG4gICAgICB0aGlzLmdyaWQucXVlcnlTZWxlY3RvckFsbCgnLnJhbmdlLCAucmFuZ2Utc3RhcnQsIC5yYW5nZS1lbmQsIC5zZWxlY3RlZCwgLmZvY3VzZWQnKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdyYW5nZScsICdyYW5nZS1zdGFydCcsICdyYW5nZS1lbmQnLCAnc2VsZWN0ZWQnLCAnYmctYmx1ZS03MDAnLCAnIWJnLXByaW1hcnktNzAwJywgJ2Rhcms6YmctYmx1ZS02MDAnLCAnZGFyazohYmctcHJpbWFyeS03MDAnLCAnZGFyazp0ZXh0LXdoaXRlJywgJ3RleHQtd2hpdGUnLCAnZm9jdXNlZCcpO1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCd0ZXh0LWdyYXktOTAwJywgJ2hvdmVyOmJnLWdyYXktMTAwJywgJ2Rhcms6dGV4dC13aGl0ZScsICdkYXJrOmhvdmVyOmJnLWdyYXktNjAwJyk7XG4gICAgICB9KTtcbiAgICAgIEFycmF5LmZyb20odGhpcy5ncmlkLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGNsYXNzTGlzdCA9IGVsLmNsYXNzTGlzdDtcbiAgICAgICAgaWYgKGluZGV4ID4gcmFuZ2VTdGFydCAmJiBpbmRleCA8IHJhbmdlRW5kKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgncmFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggPT09IHJhbmdlU3RhcnQpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZS1zdGFydCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCA9PT0gcmFuZ2VFbmQpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZS1lbmQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0ZWQuaW5jbHVkZXMoaW5kZXgpKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnLCAnYmctYmx1ZS03MDAnLCAnIWJnLXByaW1hcnktNzAwJywgJ3RleHQtd2hpdGUnLCAnZGFyazpiZy1ibHVlLTYwMCcsICdkYXJrOiFiZy1wcmltYXJ5LTYwMCcsICdkYXJrOnRleHQtd2hpdGUnKTtcbiAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCd0ZXh0LWdyYXktOTAwJywgJ2hvdmVyOmJnLWdyYXktMTAwJywgJ2Rhcms6dGV4dC13aGl0ZScsICdkYXJrOmhvdmVyOmJnLWdyYXktNjAwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ID09PSBfdGhpczIuZm9jdXNlZCkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ2ZvY3VzZWQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHRoZSB2aWV3IFVJIGJ5IGFwcGx5aW5nIHRoZSBjaGFuZ2Ugb2YgZm9jdXNlZCBpdGVtXG4gIH0sIHtcbiAgICBrZXk6IFwicmVmcmVzaEZvY3VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZnJlc2hGb2N1cygpIHtcbiAgICAgIHRoaXMuZ3JpZC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9jdXNlZCcpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZvY3VzZWQnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5ncmlkLmNoaWxkcmVuW3RoaXMuZm9jdXNlZF0uY2xhc3NMaXN0LmFkZCgnZm9jdXNlZCcpO1xuICAgIH1cbiAgfV0pO1xufShWaWV3KTtcblxuZnVuY3Rpb24gdG9UaXRsZUNhc2Uod29yZCkge1xuICByZXR1cm4gX3RvQ29uc3VtYWJsZUFycmF5KHdvcmQpLnJlZHVjZShmdW5jdGlvbiAoc3RyLCBjaCwgaXgpIHtcbiAgICByZXR1cm4gc3RyICs9IGl4ID8gY2ggOiBjaC50b1VwcGVyQ2FzZSgpO1xuICB9LCAnJyk7XG59XG5cbi8vIENsYXNzIHJlcHJlc2VudGluZyB0aGUgeWVhcnMgYW5kIGRlY2FkZXMgdmlldyBlbGVtZW50c1xudmFyIFllYXJzVmlldyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1ZpZXcpIHtcbiAgZnVuY3Rpb24gWWVhcnNWaWV3KHBpY2tlciwgY29uZmlnKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFllYXJzVmlldyk7XG4gICAgcmV0dXJuIF9jYWxsU3VwZXIodGhpcywgWWVhcnNWaWV3LCBbcGlja2VyLCBjb25maWddKTtcbiAgfVxuICBfaW5oZXJpdHMoWWVhcnNWaWV3LCBfVmlldyk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoWWVhcnNWaWV3LCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQob3B0aW9ucykge1xuICAgICAgdmFyIG9uQ29uc3RydWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuICAgICAgaWYgKG9uQ29uc3RydWN0aW9uKSB7XG4gICAgICAgIHRoaXMubmF2U3RlcCA9IHRoaXMuc3RlcCAqIDEwO1xuICAgICAgICB0aGlzLmJlZm9yZVNob3dPcHRpb24gPSBcImJlZm9yZVNob3dcIi5jb25jYXQodG9UaXRsZUNhc2UodGhpcy5jZWxsQ2xhc3MpKTtcbiAgICAgICAgdGhpcy5ncmlkID0gdGhpcy5lbGVtZW50O1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLm5hbWUsICdkYXRlcGlja2VyLWdyaWQnLCAndy02NCcsICdncmlkJywgJ2dyaWQtY29scy00Jyk7XG4gICAgICAgIHRoaXMuZ3JpZC5hcHBlbmRDaGlsZChwYXJzZUhUTUwoY3JlYXRlVGFnUmVwZWF0KCdzcGFuJywgMTIpKSk7XG4gICAgICB9XG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihZZWFyc1ZpZXcucHJvdG90eXBlKSwgXCJpbml0XCIsIHRoaXMpLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldE9wdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICBpZiAoaGFzUHJvcGVydHkob3B0aW9ucywgJ21pbkRhdGUnKSkge1xuICAgICAgICBpZiAob3B0aW9ucy5taW5EYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLm1pblllYXIgPSB0aGlzLm1pbkRhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5taW5ZZWFyID0gc3RhcnRPZlllYXJQZXJpb2Qob3B0aW9ucy5taW5EYXRlLCB0aGlzLnN0ZXApO1xuICAgICAgICAgIHRoaXMubWluRGF0ZSA9IGRhdGVWYWx1ZSh0aGlzLm1pblllYXIsIDAsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaGFzUHJvcGVydHkob3B0aW9ucywgJ21heERhdGUnKSkge1xuICAgICAgICBpZiAob3B0aW9ucy5tYXhEYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLm1heFllYXIgPSB0aGlzLm1heERhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tYXhZZWFyID0gc3RhcnRPZlllYXJQZXJpb2Qob3B0aW9ucy5tYXhEYXRlLCB0aGlzLnN0ZXApO1xuICAgICAgICAgIHRoaXMubWF4RGF0ZSA9IGRhdGVWYWx1ZSh0aGlzLm1heFllYXIsIDExLCAzMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zW3RoaXMuYmVmb3JlU2hvd09wdGlvbl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgYmVmb3JlU2hvdyA9IG9wdGlvbnNbdGhpcy5iZWZvcmVTaG93T3B0aW9uXTtcbiAgICAgICAgdGhpcy5iZWZvcmVTaG93ID0gdHlwZW9mIGJlZm9yZVNob3cgPT09ICdmdW5jdGlvbicgPyBiZWZvcmVTaG93IDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB2aWV3J3Mgc2V0dGluZ3MgdG8gcmVmbGVjdCB0aGUgdmlld0RhdGUgc2V0IG9uIHRoZSBwaWNrZXJcbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVGb2N1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVGb2N1cygpIHtcbiAgICAgIHZhciB2aWV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMucGlja2VyLnZpZXdEYXRlKTtcbiAgICAgIHZhciBmaXJzdCA9IHN0YXJ0T2ZZZWFyUGVyaW9kKHZpZXdEYXRlLCB0aGlzLm5hdlN0ZXApO1xuICAgICAgdmFyIGxhc3QgPSBmaXJzdCArIDkgKiB0aGlzLnN0ZXA7XG4gICAgICB0aGlzLmZpcnN0ID0gZmlyc3Q7XG4gICAgICB0aGlzLmxhc3QgPSBsYXN0O1xuICAgICAgdGhpcy5zdGFydCA9IGZpcnN0IC0gdGhpcy5zdGVwO1xuICAgICAgdGhpcy5mb2N1c2VkID0gc3RhcnRPZlllYXJQZXJpb2Qodmlld0RhdGUsIHRoaXMuc3RlcCk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHZpZXcncyBzZXR0aW5ncyB0byByZWZsZWN0IHRoZSBzZWxlY3RlZCBkYXRlc1xuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVNlbGVjdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTZWxlY3Rpb24oKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIF90aGlzJHBpY2tlciRkYXRlcGljayA9IHRoaXMucGlja2VyLmRhdGVwaWNrZXIsXG4gICAgICAgIGRhdGVzID0gX3RoaXMkcGlja2VyJGRhdGVwaWNrLmRhdGVzLFxuICAgICAgICByYW5nZXBpY2tlciA9IF90aGlzJHBpY2tlciRkYXRlcGljay5yYW5nZXBpY2tlcjtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBkYXRlcy5yZWR1Y2UoZnVuY3Rpb24gKHllYXJzLCB0aW1lVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHB1c2hVbmlxdWUoeWVhcnMsIHN0YXJ0T2ZZZWFyUGVyaW9kKHRpbWVWYWx1ZSwgX3RoaXMuc3RlcCkpO1xuICAgICAgfSwgW10pO1xuICAgICAgaWYgKHJhbmdlcGlja2VyICYmIHJhbmdlcGlja2VyLmRhdGVzKSB7XG4gICAgICAgIHRoaXMucmFuZ2UgPSByYW5nZXBpY2tlci5kYXRlcy5tYXAoZnVuY3Rpb24gKHRpbWVWYWx1ZSkge1xuICAgICAgICAgIGlmICh0aW1lVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0T2ZZZWFyUGVyaW9kKHRpbWVWYWx1ZSwgX3RoaXMuc3RlcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdGhlIGVudGlyZSB2aWV3IFVJXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgLy8gcmVmcmVzaCBkaXNhYmxlZCB5ZWFycyBvbiBldmVyeSByZW5kZXIgaW4gb3JkZXIgdG8gY2xlYXIgdGhlIG9uZXMgYWRkZWRcbiAgICAgIC8vIGJ5IGJlZm9yZVNob3cgaG9vayBhdCBwcmV2aW91cyByZW5kZXJcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBbXTtcbiAgICAgIHRoaXMucGlja2VyLnNldFZpZXdTd2l0Y2hMYWJlbChcIlwiLmNvbmNhdCh0aGlzLmZpcnN0LCBcIi1cIikuY29uY2F0KHRoaXMubGFzdCkpO1xuICAgICAgdGhpcy5waWNrZXIuc2V0UHJldkJ0bkRpc2FibGVkKHRoaXMuZmlyc3QgPD0gdGhpcy5taW5ZZWFyKTtcbiAgICAgIHRoaXMucGlja2VyLnNldE5leHRCdG5EaXNhYmxlZCh0aGlzLmxhc3QgPj0gdGhpcy5tYXhZZWFyKTtcbiAgICAgIEFycmF5LmZyb20odGhpcy5ncmlkLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGNsYXNzTGlzdCA9IGVsLmNsYXNzTGlzdDtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBfdGhpczIuc3RhcnQgKyBpbmRleCAqIF90aGlzMi5zdGVwO1xuICAgICAgICB2YXIgZGF0ZSA9IGRhdGVWYWx1ZShjdXJyZW50LCAwLCAxKTtcbiAgICAgICAgZWwuY2xhc3NOYW1lID0gXCJkYXRlcGlja2VyLWNlbGwgaG92ZXI6YmctZ3JheS0xMDAgZGFyazpob3ZlcjpiZy1ncmF5LTYwMCBibG9jayBmbGV4LTEgbGVhZGluZy05IGJvcmRlci0wIHJvdW5kZWQtbGcgY3Vyc29yLXBvaW50ZXIgdGV4dC1jZW50ZXIgdGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtd2hpdGUgZm9udC1zZW1pYm9sZCB0ZXh0LXNtIFwiLmNvbmNhdChfdGhpczIuY2VsbENsYXNzKTtcbiAgICAgICAgaWYgKF90aGlzMi5pc01pblZpZXcpIHtcbiAgICAgICAgICBlbC5kYXRhc2V0LmRhdGUgPSBkYXRlO1xuICAgICAgICB9XG4gICAgICAgIGVsLnRleHRDb250ZW50ID0gZWwuZGF0YXNldC55ZWFyID0gY3VycmVudDtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgncHJldicpO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSAxMSkge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ25leHQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudCA8IF90aGlzMi5taW5ZZWFyIHx8IGN1cnJlbnQgPiBfdGhpczIubWF4WWVhcikge1xuICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90aGlzMi5yYW5nZSkge1xuICAgICAgICAgIHZhciBfdGhpczIkcmFuZ2UgPSBfc2xpY2VkVG9BcnJheShfdGhpczIucmFuZ2UsIDIpLFxuICAgICAgICAgICAgcmFuZ2VTdGFydCA9IF90aGlzMiRyYW5nZVswXSxcbiAgICAgICAgICAgIHJhbmdlRW5kID0gX3RoaXMyJHJhbmdlWzFdO1xuICAgICAgICAgIGlmIChjdXJyZW50ID4gcmFuZ2VTdGFydCAmJiBjdXJyZW50IDwgcmFuZ2VFbmQpIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3JhbmdlJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyZW50ID09PSByYW5nZVN0YXJ0KSB7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZS1zdGFydCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3VycmVudCA9PT0gcmFuZ2VFbmQpIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3JhbmdlLWVuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoX3RoaXMyLnNlbGVjdGVkLmluY2x1ZGVzKGN1cnJlbnQpKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnLCAnYmctYmx1ZS03MDAnLCAnIWJnLXByaW1hcnktNzAwJywgJ3RleHQtd2hpdGUnLCAnZGFyazpiZy1ibHVlLTYwMCcsICdkYXJrOiFiZy1wcmltYXJ5LTYwMCcsICdkYXJrOnRleHQtd2hpdGUnKTtcbiAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCd0ZXh0LWdyYXktOTAwJywgJ2hvdmVyOmJnLWdyYXktMTAwJywgJ2Rhcms6dGV4dC13aGl0ZScsICdkYXJrOmhvdmVyOmJnLWdyYXktNjAwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IF90aGlzMi5mb2N1c2VkKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnZm9jdXNlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpczIuYmVmb3JlU2hvdykge1xuICAgICAgICAgIF90aGlzMi5wZXJmb3JtQmVmb3JlSG9vayhlbCwgY3VycmVudCwgZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgdmlldyBVSSBieSBhcHBseWluZyB0aGUgY2hhbmdlcyBvZiBzZWxlY3RlZCBhbmQgZm9jdXNlZCBpdGVtc1xuICB9LCB7XG4gICAga2V5OiBcInJlZnJlc2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgdmFyIF9yZWYgPSB0aGlzLnJhbmdlIHx8IFtdLFxuICAgICAgICBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICByYW5nZVN0YXJ0ID0gX3JlZjJbMF0sXG4gICAgICAgIHJhbmdlRW5kID0gX3JlZjJbMV07XG4gICAgICB0aGlzLmdyaWQucXVlcnlTZWxlY3RvckFsbCgnLnJhbmdlLCAucmFuZ2Utc3RhcnQsIC5yYW5nZS1lbmQsIC5zZWxlY3RlZCwgLmZvY3VzZWQnKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdyYW5nZScsICdyYW5nZS1zdGFydCcsICdyYW5nZS1lbmQnLCAnc2VsZWN0ZWQnLCAnYmctYmx1ZS03MDAnLCAnIWJnLXByaW1hcnktNzAwJywgJ3RleHQtd2hpdGUnLCAnZGFyazpiZy1ibHVlLTYwMCcsICdkYXJrIWJnLXByaW1hcnktNjAwJywgJ2Rhcms6dGV4dC13aGl0ZScsICdmb2N1c2VkJyk7XG4gICAgICB9KTtcbiAgICAgIEFycmF5LmZyb20odGhpcy5ncmlkLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IE51bWJlcihlbC50ZXh0Q29udGVudCk7XG4gICAgICAgIHZhciBjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3Q7XG4gICAgICAgIGlmIChjdXJyZW50ID4gcmFuZ2VTdGFydCAmJiBjdXJyZW50IDwgcmFuZ2VFbmQpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID09PSByYW5nZVN0YXJ0KSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgncmFuZ2Utc3RhcnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudCA9PT0gcmFuZ2VFbmQpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdyYW5nZS1lbmQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3RoaXMzLnNlbGVjdGVkLmluY2x1ZGVzKGN1cnJlbnQpKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnLCAnYmctYmx1ZS03MDAnLCAnIWJnLXByaW1hcnktNzAwJywgJ3RleHQtd2hpdGUnLCAnZGFyazpiZy1ibHVlLTYwMCcsICdkYXJrOiFiZy1wcmltYXJ5LTYwMCcsICdkYXJrOnRleHQtd2hpdGUnKTtcbiAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCd0ZXh0LWdyYXktOTAwJywgJ2hvdmVyOmJnLWdyYXktMTAwJywgJ2Rhcms6dGV4dC13aGl0ZScsICdkYXJrOmhvdmVyOmJnLWdyYXktNjAwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IF90aGlzMy5mb2N1c2VkKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCgnZm9jdXNlZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdGhlIHZpZXcgVUkgYnkgYXBwbHlpbmcgdGhlIGNoYW5nZSBvZiBmb2N1c2VkIGl0ZW1cbiAgfSwge1xuICAgIGtleTogXCJyZWZyZXNoRm9jdXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaEZvY3VzKCkge1xuICAgICAgdmFyIGluZGV4ID0gTWF0aC5yb3VuZCgodGhpcy5mb2N1c2VkIC0gdGhpcy5zdGFydCkgLyB0aGlzLnN0ZXApO1xuICAgICAgdGhpcy5ncmlkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5mb2N1c2VkJykuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXNlZCcpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmdyaWQuY2hpbGRyZW5baW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzZWQnKTtcbiAgICB9XG4gIH1dKTtcbn0oVmlldyk7XG5cbmZ1bmN0aW9uIHRyaWdnZXJEYXRlcGlja2VyRXZlbnQoZGF0ZXBpY2tlciwgdHlwZSkge1xuICB2YXIgZGV0YWlsID0ge1xuICAgIGRhdGU6IGRhdGVwaWNrZXIuZ2V0RGF0ZSgpLFxuICAgIHZpZXdEYXRlOiBuZXcgRGF0ZShkYXRlcGlja2VyLnBpY2tlci52aWV3RGF0ZSksXG4gICAgdmlld0lkOiBkYXRlcGlja2VyLnBpY2tlci5jdXJyZW50Vmlldy5pZCxcbiAgICBkYXRlcGlja2VyOiBkYXRlcGlja2VyXG4gIH07XG4gIGRhdGVwaWNrZXIuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCh0eXBlLCB7XG4gICAgZGV0YWlsOiBkZXRhaWxcbiAgfSkpO1xufVxuXG4vLyBkaXJlY3Rpb246IC0xICh0byBwcmV2aW91cyksIDEgKHRvIG5leHQpXG5mdW5jdGlvbiBnb1RvUHJldk9yTmV4dChkYXRlcGlja2VyLCBkaXJlY3Rpb24pIHtcbiAgdmFyIF9kYXRlcGlja2VyJGNvbmZpZyA9IGRhdGVwaWNrZXIuY29uZmlnLFxuICAgIG1pbkRhdGUgPSBfZGF0ZXBpY2tlciRjb25maWcubWluRGF0ZSxcbiAgICBtYXhEYXRlID0gX2RhdGVwaWNrZXIkY29uZmlnLm1heERhdGU7XG4gIHZhciBfZGF0ZXBpY2tlciRwaWNrZXIgPSBkYXRlcGlja2VyLnBpY2tlcixcbiAgICBjdXJyZW50VmlldyA9IF9kYXRlcGlja2VyJHBpY2tlci5jdXJyZW50VmlldyxcbiAgICB2aWV3RGF0ZSA9IF9kYXRlcGlja2VyJHBpY2tlci52aWV3RGF0ZTtcbiAgdmFyIG5ld1ZpZXdEYXRlO1xuICBzd2l0Y2ggKGN1cnJlbnRWaWV3LmlkKSB7XG4gICAgY2FzZSAwOlxuICAgICAgbmV3Vmlld0RhdGUgPSBhZGRNb250aHModmlld0RhdGUsIGRpcmVjdGlvbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBuZXdWaWV3RGF0ZSA9IGFkZFllYXJzKHZpZXdEYXRlLCBkaXJlY3Rpb24pO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIG5ld1ZpZXdEYXRlID0gYWRkWWVhcnModmlld0RhdGUsIGRpcmVjdGlvbiAqIGN1cnJlbnRWaWV3Lm5hdlN0ZXApO1xuICB9XG4gIG5ld1ZpZXdEYXRlID0gbGltaXRUb1JhbmdlKG5ld1ZpZXdEYXRlLCBtaW5EYXRlLCBtYXhEYXRlKTtcbiAgZGF0ZXBpY2tlci5waWNrZXIuY2hhbmdlRm9jdXMobmV3Vmlld0RhdGUpLnJlbmRlcigpO1xufVxuZnVuY3Rpb24gc3dpdGNoVmlldyhkYXRlcGlja2VyKSB7XG4gIHZhciB2aWV3SWQgPSBkYXRlcGlja2VyLnBpY2tlci5jdXJyZW50Vmlldy5pZDtcbiAgaWYgKHZpZXdJZCA9PT0gZGF0ZXBpY2tlci5jb25maWcubWF4Vmlldykge1xuICAgIHJldHVybjtcbiAgfVxuICBkYXRlcGlja2VyLnBpY2tlci5jaGFuZ2VWaWV3KHZpZXdJZCArIDEpLnJlbmRlcigpO1xufVxuZnVuY3Rpb24gdW5mb2N1cyhkYXRlcGlja2VyKSB7XG4gIGlmIChkYXRlcGlja2VyLmNvbmZpZy51cGRhdGVPbkJsdXIpIHtcbiAgICBkYXRlcGlja2VyLnVwZGF0ZSh7XG4gICAgICBhdXRvaGlkZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGVwaWNrZXIucmVmcmVzaCgnaW5wdXQnKTtcbiAgICBkYXRlcGlja2VyLmhpZGUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnb1RvU2VsZWN0ZWRNb250aE9yWWVhcihkYXRlcGlja2VyLCBzZWxlY3Rpb24pIHtcbiAgdmFyIHBpY2tlciA9IGRhdGVwaWNrZXIucGlja2VyO1xuICB2YXIgdmlld0RhdGUgPSBuZXcgRGF0ZShwaWNrZXIudmlld0RhdGUpO1xuICB2YXIgdmlld0lkID0gcGlja2VyLmN1cnJlbnRWaWV3LmlkO1xuICB2YXIgbmV3RGF0ZSA9IHZpZXdJZCA9PT0gMSA/IGFkZE1vbnRocyh2aWV3RGF0ZSwgc2VsZWN0aW9uIC0gdmlld0RhdGUuZ2V0TW9udGgoKSkgOiBhZGRZZWFycyh2aWV3RGF0ZSwgc2VsZWN0aW9uIC0gdmlld0RhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHBpY2tlci5jaGFuZ2VGb2N1cyhuZXdEYXRlKS5jaGFuZ2VWaWV3KHZpZXdJZCAtIDEpLnJlbmRlcigpO1xufVxuZnVuY3Rpb24gb25DbGlja1RvZGF5QnRuKGRhdGVwaWNrZXIpIHtcbiAgdmFyIHBpY2tlciA9IGRhdGVwaWNrZXIucGlja2VyO1xuICB2YXIgY3VycmVudERhdGUgPSB0b2RheSgpO1xuICBpZiAoZGF0ZXBpY2tlci5jb25maWcudG9kYXlCdG5Nb2RlID09PSAxKSB7XG4gICAgaWYgKGRhdGVwaWNrZXIuY29uZmlnLmF1dG9oaWRlKSB7XG4gICAgICBkYXRlcGlja2VyLnNldERhdGUoY3VycmVudERhdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkYXRlcGlja2VyLnNldERhdGUoY3VycmVudERhdGUsIHtcbiAgICAgIHJlbmRlcjogZmFsc2VcbiAgICB9KTtcbiAgICBwaWNrZXIudXBkYXRlKCk7XG4gIH1cbiAgaWYgKHBpY2tlci52aWV3RGF0ZSAhPT0gY3VycmVudERhdGUpIHtcbiAgICBwaWNrZXIuY2hhbmdlRm9jdXMoY3VycmVudERhdGUpO1xuICB9XG4gIHBpY2tlci5jaGFuZ2VWaWV3KDApLnJlbmRlcigpO1xufVxuZnVuY3Rpb24gb25DbGlja0NsZWFyQnRuKGRhdGVwaWNrZXIpIHtcbiAgZGF0ZXBpY2tlci5zZXREYXRlKHtcbiAgICBjbGVhcjogdHJ1ZVxuICB9KTtcbn1cbmZ1bmN0aW9uIG9uQ2xpY2tWaWV3U3dpdGNoKGRhdGVwaWNrZXIpIHtcbiAgc3dpdGNoVmlldyhkYXRlcGlja2VyKTtcbn1cbmZ1bmN0aW9uIG9uQ2xpY2tQcmV2QnRuKGRhdGVwaWNrZXIpIHtcbiAgZ29Ub1ByZXZPck5leHQoZGF0ZXBpY2tlciwgLTEpO1xufVxuZnVuY3Rpb24gb25DbGlja05leHRCdG4oZGF0ZXBpY2tlcikge1xuICBnb1RvUHJldk9yTmV4dChkYXRlcGlja2VyLCAxKTtcbn1cblxuLy8gRm9yIHRoZSBwaWNrZXIncyBtYWluIGJsb2NrIHRvIGRlbGVnZXRlIHRoZSBldmVudHMgZnJvbSBgZGF0ZXBpY2tlci1jZWxsYHNcbmZ1bmN0aW9uIG9uQ2xpY2tWaWV3KGRhdGVwaWNrZXIsIGV2KSB7XG4gIHZhciB0YXJnZXQgPSBmaW5kRWxlbWVudEluRXZlbnRQYXRoKGV2LCAnLmRhdGVwaWNrZXItY2VsbCcpO1xuICBpZiAoIXRhcmdldCB8fCB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBfZGF0ZXBpY2tlciRwaWNrZXIkY3UgPSBkYXRlcGlja2VyLnBpY2tlci5jdXJyZW50VmlldyxcbiAgICBpZCA9IF9kYXRlcGlja2VyJHBpY2tlciRjdS5pZCxcbiAgICBpc01pblZpZXcgPSBfZGF0ZXBpY2tlciRwaWNrZXIkY3UuaXNNaW5WaWV3O1xuICBpZiAoaXNNaW5WaWV3KSB7XG4gICAgZGF0ZXBpY2tlci5zZXREYXRlKE51bWJlcih0YXJnZXQuZGF0YXNldC5kYXRlKSk7XG4gIH0gZWxzZSBpZiAoaWQgPT09IDEpIHtcbiAgICBnb1RvU2VsZWN0ZWRNb250aE9yWWVhcihkYXRlcGlja2VyLCBOdW1iZXIodGFyZ2V0LmRhdGFzZXQubW9udGgpKTtcbiAgfSBlbHNlIHtcbiAgICBnb1RvU2VsZWN0ZWRNb250aE9yWWVhcihkYXRlcGlja2VyLCBOdW1iZXIodGFyZ2V0LmRhdGFzZXQueWVhcikpO1xuICB9XG59XG5mdW5jdGlvbiBvbkNsaWNrUGlja2VyKGRhdGVwaWNrZXIpIHtcbiAgaWYgKCFkYXRlcGlja2VyLmlubGluZSAmJiAhZGF0ZXBpY2tlci5jb25maWcuZGlzYWJsZVRvdWNoS2V5Ym9hcmQpIHtcbiAgICBkYXRlcGlja2VyLmlucHV0RmllbGQuZm9jdXMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUGlja2VyT3B0aW9ucyhwaWNrZXIsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMudGl0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChvcHRpb25zLnRpdGxlKSB7XG4gICAgICBwaWNrZXIuY29udHJvbHMudGl0bGUudGV4dENvbnRlbnQgPSBvcHRpb25zLnRpdGxlO1xuICAgICAgc2hvd0VsZW1lbnQocGlja2VyLmNvbnRyb2xzLnRpdGxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGlja2VyLmNvbnRyb2xzLnRpdGxlLnRleHRDb250ZW50ID0gJyc7XG4gICAgICBoaWRlRWxlbWVudChwaWNrZXIuY29udHJvbHMudGl0bGUpO1xuICAgIH1cbiAgfVxuICBpZiAob3B0aW9ucy5wcmV2QXJyb3cpIHtcbiAgICB2YXIgcHJldkJ0biA9IHBpY2tlci5jb250cm9scy5wcmV2QnRuO1xuICAgIGVtcHR5Q2hpbGROb2RlcyhwcmV2QnRuKTtcbiAgICBvcHRpb25zLnByZXZBcnJvdy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBwcmV2QnRuLmFwcGVuZENoaWxkKG5vZGUuY2xvbmVOb2RlKHRydWUpKTtcbiAgICB9KTtcbiAgfVxuICBpZiAob3B0aW9ucy5uZXh0QXJyb3cpIHtcbiAgICB2YXIgbmV4dEJ0biA9IHBpY2tlci5jb250cm9scy5uZXh0QnRuO1xuICAgIGVtcHR5Q2hpbGROb2RlcyhuZXh0QnRuKTtcbiAgICBvcHRpb25zLm5leHRBcnJvdy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBuZXh0QnRuLmFwcGVuZENoaWxkKG5vZGUuY2xvbmVOb2RlKHRydWUpKTtcbiAgICB9KTtcbiAgfVxuICBpZiAob3B0aW9ucy5sb2NhbGUpIHtcbiAgICBwaWNrZXIuY29udHJvbHMudG9kYXlCdG4udGV4dENvbnRlbnQgPSBvcHRpb25zLmxvY2FsZS50b2RheTtcbiAgICBwaWNrZXIuY29udHJvbHMuY2xlYXJCdG4udGV4dENvbnRlbnQgPSBvcHRpb25zLmxvY2FsZS5jbGVhcjtcbiAgfVxuICBpZiAob3B0aW9ucy50b2RheUJ0biAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKG9wdGlvbnMudG9kYXlCdG4pIHtcbiAgICAgIHNob3dFbGVtZW50KHBpY2tlci5jb250cm9scy50b2RheUJ0bik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpZGVFbGVtZW50KHBpY2tlci5jb250cm9scy50b2RheUJ0bik7XG4gICAgfVxuICB9XG4gIGlmIChoYXNQcm9wZXJ0eShvcHRpb25zLCAnbWluRGF0ZScpIHx8IGhhc1Byb3BlcnR5KG9wdGlvbnMsICdtYXhEYXRlJykpIHtcbiAgICB2YXIgX3BpY2tlciRkYXRlcGlja2VyJGNvID0gcGlja2VyLmRhdGVwaWNrZXIuY29uZmlnLFxuICAgICAgbWluRGF0ZSA9IF9waWNrZXIkZGF0ZXBpY2tlciRjby5taW5EYXRlLFxuICAgICAgbWF4RGF0ZSA9IF9waWNrZXIkZGF0ZXBpY2tlciRjby5tYXhEYXRlO1xuICAgIHBpY2tlci5jb250cm9scy50b2RheUJ0bi5kaXNhYmxlZCA9ICFpc0luUmFuZ2UodG9kYXkoKSwgbWluRGF0ZSwgbWF4RGF0ZSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY2xlYXJCdG4gIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChvcHRpb25zLmNsZWFyQnRuKSB7XG4gICAgICBzaG93RWxlbWVudChwaWNrZXIuY29udHJvbHMuY2xlYXJCdG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaWRlRWxlbWVudChwaWNrZXIuY29udHJvbHMuY2xlYXJCdG4pO1xuICAgIH1cbiAgfVxufVxuXG4vLyBDb21wdXRlIHZpZXcgZGF0ZSB0byByZXNldCwgd2hpY2ggd2lsbCBiZS4uLlxuLy8gLSB0aGUgbGFzdCBpdGVtIG9mIHRoZSBzZWxlY3RlZCBkYXRlcyBvciBkZWZhdWx0Vmlld0RhdGUgaWYgbm8gc2VsZWN0aW9uXG4vLyAtIGxpbWl0dGVkIHRvIG1pbkRhdGUgb3IgbWF4RGF0ZSBpZiBpdCBleGNlZWRzIHRoZSByYW5nZVxuZnVuY3Rpb24gY29tcHV0ZVJlc2V0Vmlld0RhdGUoZGF0ZXBpY2tlcikge1xuICB2YXIgZGF0ZXMgPSBkYXRlcGlja2VyLmRhdGVzLFxuICAgIGNvbmZpZyA9IGRhdGVwaWNrZXIuY29uZmlnO1xuICB2YXIgdmlld0RhdGUgPSBkYXRlcy5sZW5ndGggPiAwID8gbGFzdEl0ZW1PZihkYXRlcykgOiBjb25maWcuZGVmYXVsdFZpZXdEYXRlO1xuICByZXR1cm4gbGltaXRUb1JhbmdlKHZpZXdEYXRlLCBjb25maWcubWluRGF0ZSwgY29uZmlnLm1heERhdGUpO1xufVxuXG4vLyBDaGFuZ2UgY3VycmVudCB2aWV3J3MgdmlldyBkYXRlXG5mdW5jdGlvbiBzZXRWaWV3RGF0ZShwaWNrZXIsIG5ld0RhdGUpIHtcbiAgdmFyIG9sZFZpZXdEYXRlID0gbmV3IERhdGUocGlja2VyLnZpZXdEYXRlKTtcbiAgdmFyIG5ld1ZpZXdEYXRlID0gbmV3IERhdGUobmV3RGF0ZSk7XG4gIHZhciBfcGlja2VyJGN1cnJlbnRWaWV3ID0gcGlja2VyLmN1cnJlbnRWaWV3LFxuICAgIGlkID0gX3BpY2tlciRjdXJyZW50Vmlldy5pZCxcbiAgICB5ZWFyID0gX3BpY2tlciRjdXJyZW50Vmlldy55ZWFyLFxuICAgIGZpcnN0ID0gX3BpY2tlciRjdXJyZW50Vmlldy5maXJzdCxcbiAgICBsYXN0ID0gX3BpY2tlciRjdXJyZW50Vmlldy5sYXN0O1xuICB2YXIgdmlld1llYXIgPSBuZXdWaWV3RGF0ZS5nZXRGdWxsWWVhcigpO1xuICBwaWNrZXIudmlld0RhdGUgPSBuZXdEYXRlO1xuICBpZiAodmlld1llYXIgIT09IG9sZFZpZXdEYXRlLmdldEZ1bGxZZWFyKCkpIHtcbiAgICB0cmlnZ2VyRGF0ZXBpY2tlckV2ZW50KHBpY2tlci5kYXRlcGlja2VyLCAnY2hhbmdlWWVhcicpO1xuICB9XG4gIGlmIChuZXdWaWV3RGF0ZS5nZXRNb250aCgpICE9PSBvbGRWaWV3RGF0ZS5nZXRNb250aCgpKSB7XG4gICAgdHJpZ2dlckRhdGVwaWNrZXJFdmVudChwaWNrZXIuZGF0ZXBpY2tlciwgJ2NoYW5nZU1vbnRoJyk7XG4gIH1cblxuICAvLyByZXR1cm4gd2hldGhlciB0aGUgbmV3IGRhdGUgaXMgaW4gZGlmZmVyZW50IHBlcmlvZCBvbiB0aW1lIGZyb20gdGhlIG9uZVxuICAvLyBkaXNwbGF5ZWQgaW4gdGhlIGN1cnJlbnQgdmlld1xuICAvLyB3aGVuIHRydWUsIHRoZSB2aWV3IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkIG9uIHRoZSBuZXh0IFVJIHJlZnJlc2guXG4gIHN3aXRjaCAoaWQpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gbmV3RGF0ZSA8IGZpcnN0IHx8IG5ld0RhdGUgPiBsYXN0O1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiB2aWV3WWVhciAhPT0geWVhcjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHZpZXdZZWFyIDwgZmlyc3QgfHwgdmlld1llYXIgPiBsYXN0O1xuICB9XG59XG5mdW5jdGlvbiBnZXRUZXh0RGlyZWN0aW9uKGVsKSB7XG4gIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZGlyZWN0aW9uO1xufVxuXG4vLyBDbGFzcyByZXByZXNlbnRpbmcgdGhlIHBpY2tlciBVSVxudmFyIFBpY2tlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBpY2tlcihkYXRlcGlja2VyKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBpY2tlcik7XG4gICAgdGhpcy5kYXRlcGlja2VyID0gZGF0ZXBpY2tlcjtcbiAgICB2YXIgdGVtcGxhdGUgPSBwaWNrZXJUZW1wbGF0ZS5yZXBsYWNlKC8lYnV0dG9uQ2xhc3MlL2csIGRhdGVwaWNrZXIuY29uZmlnLmJ1dHRvbkNsYXNzKTtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCA9IHBhcnNlSFRNTCh0ZW1wbGF0ZSkuZmlyc3RDaGlsZDtcbiAgICB2YXIgX2VsZW1lbnQkZmlyc3RDaGlsZCRjID0gX3NsaWNlZFRvQXJyYXkoZWxlbWVudC5maXJzdENoaWxkLmNoaWxkcmVuLCAzKSxcbiAgICAgIGhlYWRlciA9IF9lbGVtZW50JGZpcnN0Q2hpbGQkY1swXSxcbiAgICAgIG1haW4gPSBfZWxlbWVudCRmaXJzdENoaWxkJGNbMV0sXG4gICAgICBmb290ZXIgPSBfZWxlbWVudCRmaXJzdENoaWxkJGNbMl07XG4gICAgdmFyIHRpdGxlID0gaGVhZGVyLmZpcnN0RWxlbWVudENoaWxkO1xuICAgIHZhciBfaGVhZGVyJGxhc3RFbGVtZW50Q2ggPSBfc2xpY2VkVG9BcnJheShoZWFkZXIubGFzdEVsZW1lbnRDaGlsZC5jaGlsZHJlbiwgMyksXG4gICAgICBwcmV2QnRuID0gX2hlYWRlciRsYXN0RWxlbWVudENoWzBdLFxuICAgICAgdmlld1N3aXRjaCA9IF9oZWFkZXIkbGFzdEVsZW1lbnRDaFsxXSxcbiAgICAgIG5leHRCdG4gPSBfaGVhZGVyJGxhc3RFbGVtZW50Q2hbMl07XG4gICAgdmFyIF9mb290ZXIkZmlyc3RDaGlsZCRjaCA9IF9zbGljZWRUb0FycmF5KGZvb3Rlci5maXJzdENoaWxkLmNoaWxkcmVuLCAyKSxcbiAgICAgIHRvZGF5QnRuID0gX2Zvb3RlciRmaXJzdENoaWxkJGNoWzBdLFxuICAgICAgY2xlYXJCdG4gPSBfZm9vdGVyJGZpcnN0Q2hpbGQkY2hbMV07XG4gICAgdmFyIGNvbnRyb2xzID0ge1xuICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgcHJldkJ0bjogcHJldkJ0bixcbiAgICAgIHZpZXdTd2l0Y2g6IHZpZXdTd2l0Y2gsXG4gICAgICBuZXh0QnRuOiBuZXh0QnRuLFxuICAgICAgdG9kYXlCdG46IHRvZGF5QnRuLFxuICAgICAgY2xlYXJCdG46IGNsZWFyQnRuXG4gICAgfTtcbiAgICB0aGlzLm1haW4gPSBtYWluO1xuICAgIHRoaXMuY29udHJvbHMgPSBjb250cm9scztcbiAgICB2YXIgZWxlbWVudENsYXNzID0gZGF0ZXBpY2tlci5pbmxpbmUgPyAnaW5saW5lJyA6ICdkcm9wZG93bic7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZGF0ZXBpY2tlci1cIi5jb25jYXQoZWxlbWVudENsYXNzKSk7XG4gICAgZWxlbWVudENsYXNzID09PSAnZHJvcGRvd24nID8gZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdkcm9wZG93bicsICdhYnNvbHV0ZScsICd0b3AtMCcsICdsZWZ0LTAnLCAnei01MCcsICdwdC0yJykgOiBudWxsO1xuICAgIHByb2Nlc3NQaWNrZXJPcHRpb25zKHRoaXMsIGRhdGVwaWNrZXIuY29uZmlnKTtcbiAgICB0aGlzLnZpZXdEYXRlID0gY29tcHV0ZVJlc2V0Vmlld0RhdGUoZGF0ZXBpY2tlcik7XG5cbiAgICAvLyBzZXQgdXAgZXZlbnQgbGlzdGVuZXJzXG4gICAgcmVnaXN0ZXJMaXN0ZW5lcnMoZGF0ZXBpY2tlciwgW1tlbGVtZW50LCAnY2xpY2snLCBvbkNsaWNrUGlja2VyLmJpbmQobnVsbCwgZGF0ZXBpY2tlciksIHtcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9XSwgW21haW4sICdjbGljaycsIG9uQ2xpY2tWaWV3LmJpbmQobnVsbCwgZGF0ZXBpY2tlcildLCBbY29udHJvbHMudmlld1N3aXRjaCwgJ2NsaWNrJywgb25DbGlja1ZpZXdTd2l0Y2guYmluZChudWxsLCBkYXRlcGlja2VyKV0sIFtjb250cm9scy5wcmV2QnRuLCAnY2xpY2snLCBvbkNsaWNrUHJldkJ0bi5iaW5kKG51bGwsIGRhdGVwaWNrZXIpXSwgW2NvbnRyb2xzLm5leHRCdG4sICdjbGljaycsIG9uQ2xpY2tOZXh0QnRuLmJpbmQobnVsbCwgZGF0ZXBpY2tlcildLCBbY29udHJvbHMudG9kYXlCdG4sICdjbGljaycsIG9uQ2xpY2tUb2RheUJ0bi5iaW5kKG51bGwsIGRhdGVwaWNrZXIpXSwgW2NvbnRyb2xzLmNsZWFyQnRuLCAnY2xpY2snLCBvbkNsaWNrQ2xlYXJCdG4uYmluZChudWxsLCBkYXRlcGlja2VyKV1dKTtcblxuICAgIC8vIHNldCB1cCB2aWV3c1xuICAgIHRoaXMudmlld3MgPSBbbmV3IERheXNWaWV3KHRoaXMpLCBuZXcgTW9udGhzVmlldyh0aGlzKSwgbmV3IFllYXJzVmlldyh0aGlzLCB7XG4gICAgICBpZDogMixcbiAgICAgIG5hbWU6ICd5ZWFycycsXG4gICAgICBjZWxsQ2xhc3M6ICd5ZWFyJyxcbiAgICAgIHN0ZXA6IDFcbiAgICB9KSwgbmV3IFllYXJzVmlldyh0aGlzLCB7XG4gICAgICBpZDogMyxcbiAgICAgIG5hbWU6ICdkZWNhZGVzJyxcbiAgICAgIGNlbGxDbGFzczogJ2RlY2FkZScsXG4gICAgICBzdGVwOiAxMFxuICAgIH0pXTtcbiAgICB0aGlzLmN1cnJlbnRWaWV3ID0gdGhpcy52aWV3c1tkYXRlcGlja2VyLmNvbmZpZy5zdGFydFZpZXddO1xuICAgIHRoaXMuY3VycmVudFZpZXcucmVuZGVyKCk7XG4gICAgdGhpcy5tYWluLmFwcGVuZENoaWxkKHRoaXMuY3VycmVudFZpZXcuZWxlbWVudCk7XG4gICAgZGF0ZXBpY2tlci5jb25maWcuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhQaWNrZXIsIFt7XG4gICAga2V5OiBcInNldE9wdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICBwcm9jZXNzUGlja2VyT3B0aW9ucyh0aGlzLCBvcHRpb25zKTtcbiAgICAgIHRoaXMudmlld3MuZm9yRWFjaChmdW5jdGlvbiAodmlldykge1xuICAgICAgICB2aWV3LmluaXQob3B0aW9ucywgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmN1cnJlbnRWaWV3LnJlbmRlcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZXRhY2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgICAgdGhpcy5kYXRlcGlja2VyLmNvbmZpZy5jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2hvd1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnLCAnYmxvY2snKTtcbiAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgIHZhciBkYXRlcGlja2VyID0gdGhpcy5kYXRlcGlja2VyO1xuICAgICAgaWYgKCFkYXRlcGlja2VyLmlubGluZSkge1xuICAgICAgICAvLyBlbnN1cmUgcGlja2VyJ3MgZGlyZWN0aW9uIG1hdGNoZXMgaW5wdXQnc1xuICAgICAgICB2YXIgaW5wdXREaXJlY3Rpb24gPSBnZXRUZXh0RGlyZWN0aW9uKGRhdGVwaWNrZXIuaW5wdXRGaWVsZCk7XG4gICAgICAgIGlmIChpbnB1dERpcmVjdGlvbiAhPT0gZ2V0VGV4dERpcmVjdGlvbihkYXRlcGlja2VyLmNvbmZpZy5jb250YWluZXIpKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LmRpciA9IGlucHV0RGlyZWN0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudC5kaXIpIHtcbiAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkaXInKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBsYWNlKCk7XG4gICAgICAgIGlmIChkYXRlcGlja2VyLmNvbmZpZy5kaXNhYmxlVG91Y2hLZXlib2FyZCkge1xuICAgICAgICAgIGRhdGVwaWNrZXIuaW5wdXRGaWVsZC5ibHVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRyaWdnZXJEYXRlcGlja2VyRXZlbnQoZGF0ZXBpY2tlciwgJ3Nob3cnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGlkZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgaWYgKCF0aGlzLmFjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmRhdGVwaWNrZXIuZXhpdEVkaXRNb2RlKCk7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJywgJ2Jsb2NrJyk7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJywgJ2Jsb2NrJywgJ2hpZGRlbicpO1xuICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRyaWdnZXJEYXRlcGlja2VyRXZlbnQodGhpcy5kYXRlcGlja2VyLCAnaGlkZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwbGFjZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGFjZSgpIHtcbiAgICAgIHZhciBfdGhpcyRlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICBjbGFzc0xpc3QgPSBfdGhpcyRlbGVtZW50LmNsYXNzTGlzdCxcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRlbGVtZW50LnN0eWxlO1xuICAgICAgdmFyIF90aGlzJGRhdGVwaWNrZXIgPSB0aGlzLmRhdGVwaWNrZXIsXG4gICAgICAgIGNvbmZpZyA9IF90aGlzJGRhdGVwaWNrZXIuY29uZmlnLFxuICAgICAgICBpbnB1dEZpZWxkID0gX3RoaXMkZGF0ZXBpY2tlci5pbnB1dEZpZWxkO1xuICAgICAgdmFyIGNvbnRhaW5lciA9IGNvbmZpZy5jb250YWluZXI7XG4gICAgICB2YXIgX3RoaXMkZWxlbWVudCRnZXRCb3VuID0gdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICBjYWxlbmRhcldpZHRoID0gX3RoaXMkZWxlbWVudCRnZXRCb3VuLndpZHRoLFxuICAgICAgICBjYWxlbmRhckhlaWdodCA9IF90aGlzJGVsZW1lbnQkZ2V0Qm91bi5oZWlnaHQ7XG4gICAgICB2YXIgX2NvbnRhaW5lciRnZXRCb3VuZGluID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICBjb250YWluZXJMZWZ0ID0gX2NvbnRhaW5lciRnZXRCb3VuZGluLmxlZnQsXG4gICAgICAgIGNvbnRhaW5lclRvcCA9IF9jb250YWluZXIkZ2V0Qm91bmRpbi50b3AsXG4gICAgICAgIGNvbnRhaW5lcldpZHRoID0gX2NvbnRhaW5lciRnZXRCb3VuZGluLndpZHRoO1xuICAgICAgdmFyIF9pbnB1dEZpZWxkJGdldEJvdW5kaSA9IGlucHV0RmllbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgIGlucHV0TGVmdCA9IF9pbnB1dEZpZWxkJGdldEJvdW5kaS5sZWZ0LFxuICAgICAgICBpbnB1dFRvcCA9IF9pbnB1dEZpZWxkJGdldEJvdW5kaS50b3AsXG4gICAgICAgIGlucHV0V2lkdGggPSBfaW5wdXRGaWVsZCRnZXRCb3VuZGkud2lkdGgsXG4gICAgICAgIGlucHV0SGVpZ2h0ID0gX2lucHV0RmllbGQkZ2V0Qm91bmRpLmhlaWdodDtcbiAgICAgIHZhciBfY29uZmlnJG9yaWVudGF0aW9uID0gY29uZmlnLm9yaWVudGF0aW9uLFxuICAgICAgICBvcmllbnRYID0gX2NvbmZpZyRvcmllbnRhdGlvbi54LFxuICAgICAgICBvcmllbnRZID0gX2NvbmZpZyRvcmllbnRhdGlvbi55O1xuICAgICAgdmFyIHNjcm9sbFRvcDtcbiAgICAgIHZhciBsZWZ0O1xuICAgICAgdmFyIHRvcDtcbiAgICAgIGlmIChjb250YWluZXIgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgc2Nyb2xsVG9wID0gd2luZG93LnNjcm9sbFk7XG4gICAgICAgIGxlZnQgPSBpbnB1dExlZnQgKyB3aW5kb3cuc2Nyb2xsWDtcbiAgICAgICAgdG9wID0gaW5wdXRUb3AgKyBzY3JvbGxUb3A7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY3JvbGxUb3AgPSBjb250YWluZXIuc2Nyb2xsVG9wO1xuICAgICAgICBsZWZ0ID0gaW5wdXRMZWZ0IC0gY29udGFpbmVyTGVmdDtcbiAgICAgICAgdG9wID0gaW5wdXRUb3AgLSBjb250YWluZXJUb3AgKyBzY3JvbGxUb3A7XG4gICAgICB9XG4gICAgICBpZiAob3JpZW50WCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIGlmIChsZWZ0IDwgMCkge1xuICAgICAgICAgIC8vIGFsaWduIHRvIHRoZSBsZWZ0IGFuZCBtb3ZlIGludG8gdmlzaWJsZSBhcmVhIGlmIGlucHV0J3MgbGVmdCBlZGdlIDwgd2luZG93J3NcbiAgICAgICAgICBvcmllbnRYID0gJ2xlZnQnO1xuICAgICAgICAgIGxlZnQgPSAxMDtcbiAgICAgICAgfSBlbHNlIGlmIChsZWZ0ICsgY2FsZW5kYXJXaWR0aCA+IGNvbnRhaW5lcldpZHRoKSB7XG4gICAgICAgICAgLy8gYWxpZ24gdG8gdGhlIHJpZ2h0IGlmIGNhbmxlbmRhcidzIHJpZ2h0IGVkZ2UgPiBjb250YWluZXInc1xuICAgICAgICAgIG9yaWVudFggPSAncmlnaHQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9yaWVudFggPSBnZXRUZXh0RGlyZWN0aW9uKGlucHV0RmllbGQpID09PSAncnRsJyA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvcmllbnRYID09PSAncmlnaHQnKSB7XG4gICAgICAgIGxlZnQgLT0gY2FsZW5kYXJXaWR0aCAtIGlucHV0V2lkdGg7XG4gICAgICB9XG4gICAgICBpZiAob3JpZW50WSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIG9yaWVudFkgPSB0b3AgLSBjYWxlbmRhckhlaWdodCA8IHNjcm9sbFRvcCA/ICdib3R0b20nIDogJ3RvcCc7XG4gICAgICB9XG4gICAgICBpZiAob3JpZW50WSA9PT0gJ3RvcCcpIHtcbiAgICAgICAgdG9wIC09IGNhbGVuZGFySGVpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9wICs9IGlucHV0SGVpZ2h0O1xuICAgICAgfVxuICAgICAgY2xhc3NMaXN0LnJlbW92ZSgnZGF0ZXBpY2tlci1vcmllbnQtdG9wJywgJ2RhdGVwaWNrZXItb3JpZW50LWJvdHRvbScsICdkYXRlcGlja2VyLW9yaWVudC1yaWdodCcsICdkYXRlcGlja2VyLW9yaWVudC1sZWZ0Jyk7XG4gICAgICBjbGFzc0xpc3QuYWRkKFwiZGF0ZXBpY2tlci1vcmllbnQtXCIuY29uY2F0KG9yaWVudFkpLCBcImRhdGVwaWNrZXItb3JpZW50LVwiLmNvbmNhdChvcmllbnRYKSk7XG4gICAgICBzdHlsZS50b3AgPSB0b3AgPyBcIlwiLmNvbmNhdCh0b3AsIFwicHhcIikgOiB0b3A7XG4gICAgICBzdHlsZS5sZWZ0ID0gbGVmdCA/IFwiXCIuY29uY2F0KGxlZnQsIFwicHhcIikgOiBsZWZ0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRWaWV3U3dpdGNoTGFiZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vmlld1N3aXRjaExhYmVsKGxhYmVsVGV4dCkge1xuICAgICAgdGhpcy5jb250cm9scy52aWV3U3dpdGNoLnRleHRDb250ZW50ID0gbGFiZWxUZXh0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRQcmV2QnRuRGlzYWJsZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UHJldkJ0bkRpc2FibGVkKGRpc2FibGVkKSB7XG4gICAgICB0aGlzLmNvbnRyb2xzLnByZXZCdG4uZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0TmV4dEJ0bkRpc2FibGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE5leHRCdG5EaXNhYmxlZChkaXNhYmxlZCkge1xuICAgICAgdGhpcy5jb250cm9scy5uZXh0QnRuLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNoYW5nZVZpZXdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlVmlldyh2aWV3SWQpIHtcbiAgICAgIHZhciBvbGRWaWV3ID0gdGhpcy5jdXJyZW50VmlldztcbiAgICAgIHZhciBuZXdWaWV3ID0gdGhpcy52aWV3c1t2aWV3SWRdO1xuICAgICAgaWYgKG5ld1ZpZXcuaWQgIT09IG9sZFZpZXcuaWQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VmlldyA9IG5ld1ZpZXc7XG4gICAgICAgIHRoaXMuX3JlbmRlck1ldGhvZCA9ICdyZW5kZXInO1xuICAgICAgICB0cmlnZ2VyRGF0ZXBpY2tlckV2ZW50KHRoaXMuZGF0ZXBpY2tlciwgJ2NoYW5nZVZpZXcnKTtcbiAgICAgICAgdGhpcy5tYWluLnJlcGxhY2VDaGlsZChuZXdWaWV3LmVsZW1lbnQsIG9sZFZpZXcuZWxlbWVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBDaGFuZ2UgdGhlIGZvY3VzZWQgZGF0ZSAodmlldyBkYXRlKVxuICB9LCB7XG4gICAga2V5OiBcImNoYW5nZUZvY3VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZUZvY3VzKG5ld1ZpZXdEYXRlKSB7XG4gICAgICB0aGlzLl9yZW5kZXJNZXRob2QgPSBzZXRWaWV3RGF0ZSh0aGlzLCBuZXdWaWV3RGF0ZSkgPyAncmVuZGVyJyA6ICdyZWZyZXNoRm9jdXMnO1xuICAgICAgdGhpcy52aWV3cy5mb3JFYWNoKGZ1bmN0aW9uICh2aWV3KSB7XG4gICAgICAgIHZpZXcudXBkYXRlRm9jdXMoKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgdGhlIGNoYW5nZSBvZiB0aGUgc2VsZWN0ZWQgZGF0ZXNcbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIG5ld1ZpZXdEYXRlID0gY29tcHV0ZVJlc2V0Vmlld0RhdGUodGhpcy5kYXRlcGlja2VyKTtcbiAgICAgIHRoaXMuX3JlbmRlck1ldGhvZCA9IHNldFZpZXdEYXRlKHRoaXMsIG5ld1ZpZXdEYXRlKSA/ICdyZW5kZXInIDogJ3JlZnJlc2gnO1xuICAgICAgdGhpcy52aWV3cy5mb3JFYWNoKGZ1bmN0aW9uICh2aWV3KSB7XG4gICAgICAgIHZpZXcudXBkYXRlRm9jdXMoKTtcbiAgICAgICAgdmlldy51cGRhdGVTZWxlY3Rpb24oKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gUmVmcmVzaCB0aGUgcGlja2VyIFVJXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBxdWlja1JlbmRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTtcbiAgICAgIHZhciByZW5kZXJNZXRob2QgPSBxdWlja1JlbmRlciAmJiB0aGlzLl9yZW5kZXJNZXRob2QgfHwgJ3JlbmRlcic7XG4gICAgICBkZWxldGUgdGhpcy5fcmVuZGVyTWV0aG9kO1xuICAgICAgdGhpcy5jdXJyZW50Vmlld1tyZW5kZXJNZXRob2RdKCk7XG4gICAgfVxuICB9XSk7XG59KCk7XG5cbi8vIEZpbmQgdGhlIGNsb3Nlc3QgZGF0ZSB0aGF0IGRvZXNuJ3QgbWVldCB0aGUgY29uZGl0aW9uIGZvciB1bmF2YWlsYWJsZSBkYXRlXG4vLyBSZXR1cm5zIHVuZGVmaW5lZCBpZiBubyBhdmFpbGFibGUgZGF0ZSBpcyBmb3VuZFxuLy8gYWRkRm46IGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSB0aGUgbmV4dCBkYXRlXG4vLyAgIC0gYXJnczogdGltZSB2YWx1ZSwgYW1vdW50XG4vLyBpbmNyZWFzZTogYW1vdW50IHRvIHBhc3MgdG8gYWRkRm5cbi8vIHRlc3RGbjogZnVuY3Rpb24gdG8gdGVzdCB0aGUgdW5hdmFpbGFibGl0eSBvZiB0aGUgZGF0ZVxuLy8gICAtIGFyZ3M6IHRpbWUgdmFsdWU7IHJldHVuOiB0cnVlIGlmIHVuYXZhaWxhYmxlXG5mdW5jdGlvbiBmaW5kTmV4dEF2YWlsYWJsZU9uZShkYXRlLCBhZGRGbiwgaW5jcmVhc2UsIHRlc3RGbiwgbWluLCBtYXgpIHtcbiAgaWYgKCFpc0luUmFuZ2UoZGF0ZSwgbWluLCBtYXgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0ZXN0Rm4oZGF0ZSkpIHtcbiAgICB2YXIgbmV3RGF0ZSA9IGFkZEZuKGRhdGUsIGluY3JlYXNlKTtcbiAgICByZXR1cm4gZmluZE5leHRBdmFpbGFibGVPbmUobmV3RGF0ZSwgYWRkRm4sIGluY3JlYXNlLCB0ZXN0Rm4sIG1pbiwgbWF4KTtcbiAgfVxuICByZXR1cm4gZGF0ZTtcbn1cblxuLy8gZGlyZWN0aW9uOiAtMSAobGVmdC91cCksIDEgKHJpZ2h0L2Rvd24pXG4vLyB2ZXJ0aWNhbDogdHJ1ZSBmb3IgdXAvZG93biwgZmFsc2UgZm9yIGxlZnQvcmlnaHRcbmZ1bmN0aW9uIG1vdmVCeUFycm93S2V5KGRhdGVwaWNrZXIsIGV2LCBkaXJlY3Rpb24sIHZlcnRpY2FsKSB7XG4gIHZhciBwaWNrZXIgPSBkYXRlcGlja2VyLnBpY2tlcjtcbiAgdmFyIGN1cnJlbnRWaWV3ID0gcGlja2VyLmN1cnJlbnRWaWV3O1xuICB2YXIgc3RlcCA9IGN1cnJlbnRWaWV3LnN0ZXAgfHwgMTtcbiAgdmFyIHZpZXdEYXRlID0gcGlja2VyLnZpZXdEYXRlO1xuICB2YXIgYWRkRm47XG4gIHZhciB0ZXN0Rm47XG4gIHN3aXRjaCAoY3VycmVudFZpZXcuaWQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgdmlld0RhdGUgPSBhZGREYXlzKHZpZXdEYXRlLCBkaXJlY3Rpb24gKiA3KTtcbiAgICAgIH0gZWxzZSBpZiAoZXYuY3RybEtleSB8fCBldi5tZXRhS2V5KSB7XG4gICAgICAgIHZpZXdEYXRlID0gYWRkWWVhcnModmlld0RhdGUsIGRpcmVjdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2aWV3RGF0ZSA9IGFkZERheXModmlld0RhdGUsIGRpcmVjdGlvbik7XG4gICAgICB9XG4gICAgICBhZGRGbiA9IGFkZERheXM7XG4gICAgICB0ZXN0Rm4gPSBmdW5jdGlvbiB0ZXN0Rm4oZGF0ZSkge1xuICAgICAgICByZXR1cm4gY3VycmVudFZpZXcuZGlzYWJsZWQuaW5jbHVkZXMoZGF0ZSk7XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgdmlld0RhdGUgPSBhZGRNb250aHModmlld0RhdGUsIHZlcnRpY2FsID8gZGlyZWN0aW9uICogNCA6IGRpcmVjdGlvbik7XG4gICAgICBhZGRGbiA9IGFkZE1vbnRocztcbiAgICAgIHRlc3RGbiA9IGZ1bmN0aW9uIHRlc3RGbihkYXRlKSB7XG4gICAgICAgIHZhciBkdCA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICB2YXIgeWVhciA9IGN1cnJlbnRWaWV3LnllYXIsXG4gICAgICAgICAgZGlzYWJsZWQgPSBjdXJyZW50Vmlldy5kaXNhYmxlZDtcbiAgICAgICAgcmV0dXJuIGR0LmdldEZ1bGxZZWFyKCkgPT09IHllYXIgJiYgZGlzYWJsZWQuaW5jbHVkZXMoZHQuZ2V0TW9udGgoKSk7XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHZpZXdEYXRlID0gYWRkWWVhcnModmlld0RhdGUsIGRpcmVjdGlvbiAqICh2ZXJ0aWNhbCA/IDQgOiAxKSAqIHN0ZXApO1xuICAgICAgYWRkRm4gPSBhZGRZZWFycztcbiAgICAgIHRlc3RGbiA9IGZ1bmN0aW9uIHRlc3RGbihkYXRlKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50Vmlldy5kaXNhYmxlZC5pbmNsdWRlcyhzdGFydE9mWWVhclBlcmlvZChkYXRlLCBzdGVwKSk7XG4gICAgICB9O1xuICB9XG4gIHZpZXdEYXRlID0gZmluZE5leHRBdmFpbGFibGVPbmUodmlld0RhdGUsIGFkZEZuLCBkaXJlY3Rpb24gPCAwID8gLXN0ZXAgOiBzdGVwLCB0ZXN0Rm4sIGN1cnJlbnRWaWV3Lm1pbkRhdGUsIGN1cnJlbnRWaWV3Lm1heERhdGUpO1xuICBpZiAodmlld0RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHBpY2tlci5jaGFuZ2VGb2N1cyh2aWV3RGF0ZSkucmVuZGVyKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIG9uS2V5ZG93bihkYXRlcGlja2VyLCBldikge1xuICBpZiAoZXYua2V5ID09PSAnVGFiJykge1xuICAgIHVuZm9jdXMoZGF0ZXBpY2tlcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBwaWNrZXIgPSBkYXRlcGlja2VyLnBpY2tlcjtcbiAgdmFyIF9waWNrZXIkY3VycmVudFZpZXcgPSBwaWNrZXIuY3VycmVudFZpZXcsXG4gICAgaWQgPSBfcGlja2VyJGN1cnJlbnRWaWV3LmlkLFxuICAgIGlzTWluVmlldyA9IF9waWNrZXIkY3VycmVudFZpZXcuaXNNaW5WaWV3O1xuICBpZiAoIXBpY2tlci5hY3RpdmUpIHtcbiAgICBzd2l0Y2ggKGV2LmtleSkge1xuICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgIHBpY2tlci5zaG93KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICBkYXRlcGlja2VyLnVwZGF0ZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGF0ZXBpY2tlci5lZGl0TW9kZSkge1xuICAgIHN3aXRjaCAoZXYua2V5KSB7XG4gICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICBwaWNrZXIuaGlkZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgZGF0ZXBpY2tlci5leGl0RWRpdE1vZGUoe1xuICAgICAgICAgIHVwZGF0ZTogdHJ1ZSxcbiAgICAgICAgICBhdXRvaGlkZTogZGF0ZXBpY2tlci5jb25maWcuYXV0b2hpZGVcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGV2LmtleSkge1xuICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgcGlja2VyLmhpZGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICBpZiAoZXYuY3RybEtleSB8fCBldi5tZXRhS2V5KSB7XG4gICAgICAgICAgZ29Ub1ByZXZPck5leHQoZGF0ZXBpY2tlciwgLTEpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgZGF0ZXBpY2tlci5lbnRlckVkaXRNb2RlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vdmVCeUFycm93S2V5KGRhdGVwaWNrZXIsIGV2LCAtMSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgIGlmIChldi5jdHJsS2V5IHx8IGV2Lm1ldGFLZXkpIHtcbiAgICAgICAgICBnb1RvUHJldk9yTmV4dChkYXRlcGlja2VyLCAxKTtcbiAgICAgICAgfSBlbHNlIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgICAgIGRhdGVwaWNrZXIuZW50ZXJFZGl0TW9kZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb3ZlQnlBcnJvd0tleShkYXRlcGlja2VyLCBldiwgMSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgIGlmIChldi5jdHJsS2V5IHx8IGV2Lm1ldGFLZXkpIHtcbiAgICAgICAgICBzd2l0Y2hWaWV3KGRhdGVwaWNrZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgZGF0ZXBpY2tlci5lbnRlckVkaXRNb2RlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vdmVCeUFycm93S2V5KGRhdGVwaWNrZXIsIGV2LCAtMSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICBpZiAoZXYuc2hpZnRLZXkgJiYgIWV2LmN0cmxLZXkgJiYgIWV2Lm1ldGFLZXkpIHtcbiAgICAgICAgICBkYXRlcGlja2VyLmVudGVyRWRpdE1vZGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbW92ZUJ5QXJyb3dLZXkoZGF0ZXBpY2tlciwgZXYsIDEsIHRydWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgaWYgKGlzTWluVmlldykge1xuICAgICAgICAgIGRhdGVwaWNrZXIuc2V0RGF0ZShwaWNrZXIudmlld0RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBpY2tlci5jaGFuZ2VWaWV3KGlkIC0gMSkucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdCYWNrc3BhY2UnOlxuICAgICAgY2FzZSAnRGVsZXRlJzpcbiAgICAgICAgZGF0ZXBpY2tlci5lbnRlckVkaXRNb2RlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChldi5rZXkubGVuZ3RoID09PSAxICYmICFldi5jdHJsS2V5ICYmICFldi5tZXRhS2V5KSB7XG4gICAgICAgICAgZGF0ZXBpY2tlci5lbnRlckVkaXRNb2RlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbn1cbmZ1bmN0aW9uIG9uRm9jdXMoZGF0ZXBpY2tlcikge1xuICBpZiAoZGF0ZXBpY2tlci5jb25maWcuc2hvd09uRm9jdXMgJiYgIWRhdGVwaWNrZXIuX3Nob3dpbmcpIHtcbiAgICBkYXRlcGlja2VyLnNob3coKTtcbiAgfVxufVxuXG4vLyBmb3IgdGhlIHByZXZlbnRpb24gZm9yIGVudGVyaW5nIGVkaXQgbW9kZSB3aGlsZSBnZXR0aW5nIGZvY3VzIG9uIGNsaWNrXG5mdW5jdGlvbiBvbk1vdXNlZG93bihkYXRlcGlja2VyLCBldikge1xuICB2YXIgZWwgPSBldi50YXJnZXQ7XG4gIGlmIChkYXRlcGlja2VyLnBpY2tlci5hY3RpdmUgfHwgZGF0ZXBpY2tlci5jb25maWcuc2hvd09uQ2xpY2spIHtcbiAgICBlbC5fYWN0aXZlID0gZWwgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgZWwuX2NsaWNraW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWxldGUgZWwuX2FjdGl2ZTtcbiAgICAgIGRlbGV0ZSBlbC5fY2xpY2tpbmc7XG4gICAgfSwgMjAwMCk7XG4gIH1cbn1cbmZ1bmN0aW9uIG9uQ2xpY2tJbnB1dChkYXRlcGlja2VyLCBldikge1xuICB2YXIgZWwgPSBldi50YXJnZXQ7XG4gIGlmICghZWwuX2NsaWNraW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNsZWFyVGltZW91dChlbC5fY2xpY2tpbmcpO1xuICBkZWxldGUgZWwuX2NsaWNraW5nO1xuICBpZiAoZWwuX2FjdGl2ZSkge1xuICAgIGRhdGVwaWNrZXIuZW50ZXJFZGl0TW9kZSgpO1xuICB9XG4gIGRlbGV0ZSBlbC5fYWN0aXZlO1xuICBpZiAoZGF0ZXBpY2tlci5jb25maWcuc2hvd09uQ2xpY2spIHtcbiAgICBkYXRlcGlja2VyLnNob3coKTtcbiAgfVxufVxuZnVuY3Rpb24gb25QYXN0ZShkYXRlcGlja2VyLCBldikge1xuICBpZiAoZXYuY2xpcGJvYXJkRGF0YS50eXBlcy5pbmNsdWRlcygndGV4dC9wbGFpbicpKSB7XG4gICAgZGF0ZXBpY2tlci5lbnRlckVkaXRNb2RlKCk7XG4gIH1cbn1cblxuLy8gZm9yIHRoZSBgZG9jdW1lbnRgIHRvIGRlbGVnYXRlIHRoZSBldmVudHMgZnJvbSBvdXRzaWRlIHRoZSBwaWNrZXIvaW5wdXQgZmllbGRcbmZ1bmN0aW9uIG9uQ2xpY2tPdXRzaWRlKGRhdGVwaWNrZXIsIGV2KSB7XG4gIHZhciBlbGVtZW50ID0gZGF0ZXBpY2tlci5lbGVtZW50O1xuICBpZiAoZWxlbWVudCAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgcGlja2VyRWxlbSA9IGRhdGVwaWNrZXIucGlja2VyLmVsZW1lbnQ7XG4gIGlmIChmaW5kRWxlbWVudEluRXZlbnRQYXRoKGV2LCBmdW5jdGlvbiAoZWwpIHtcbiAgICByZXR1cm4gZWwgPT09IGVsZW1lbnQgfHwgZWwgPT09IHBpY2tlckVsZW07XG4gIH0pKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHVuZm9jdXMoZGF0ZXBpY2tlcik7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeURhdGVzKGRhdGVzLCBjb25maWcpIHtcbiAgcmV0dXJuIGRhdGVzLm1hcChmdW5jdGlvbiAoZHQpIHtcbiAgICByZXR1cm4gZm9ybWF0RGF0ZShkdCwgY29uZmlnLmZvcm1hdCwgY29uZmlnLmxvY2FsZSk7XG4gIH0pLmpvaW4oY29uZmlnLmRhdGVEZWxpbWl0ZXIpO1xufVxuXG4vLyBwYXJzZSBpbnB1dCBkYXRlcyBhbmQgY3JlYXRlIGFuIGFycmF5IG9mIHRpbWUgdmFsdWVzIGZvciBzZWxlY3Rpb25cbi8vIHJldHVybnMgdW5kZWZpbmVkIGlmIHRoZXJlIGFyZSBubyB2YWxpZCBkYXRlcyBpbiBpbnB1dERhdGVzXG4vLyB3aGVuIG9yaWdEYXRlcyAoY3VycmVudCBzZWxlY3Rpb24pIGlzIHBhc3NlZCwgdGhlIGZ1bmN0aW9uIHdvcmtzIHRvIG1peFxuLy8gdGhlIGlucHV0IGRhdGVzIGludG8gdGhlIGN1cnJlbnQgc2VsZWN0aW9uXG5mdW5jdGlvbiBwcm9jZXNzSW5wdXREYXRlcyhkYXRlcGlja2VyLCBpbnB1dERhdGVzKSB7XG4gIHZhciBjbGVhciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gIHZhciBjb25maWcgPSBkYXRlcGlja2VyLmNvbmZpZyxcbiAgICBvcmlnRGF0ZXMgPSBkYXRlcGlja2VyLmRhdGVzLFxuICAgIHJhbmdlcGlja2VyID0gZGF0ZXBpY2tlci5yYW5nZXBpY2tlcjtcbiAgaWYgKGlucHV0RGF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gZW1wdHkgaW5wdXQgaXMgY29uc2lkZXJlZCB2YWxpZCB1bmxlc3Mgb3JpZ2lEYXRlcyBpcyBwYXNzZWRcbiAgICByZXR1cm4gY2xlYXIgPyBbXSA6IHVuZGVmaW5lZDtcbiAgfVxuICB2YXIgcmFuZ2VFbmQgPSByYW5nZXBpY2tlciAmJiBkYXRlcGlja2VyID09PSByYW5nZXBpY2tlci5kYXRlcGlja2Vyc1sxXTtcbiAgdmFyIG5ld0RhdGVzID0gaW5wdXREYXRlcy5yZWR1Y2UoZnVuY3Rpb24gKGRhdGVzLCBkdCkge1xuICAgIHZhciBkYXRlID0gcGFyc2VEYXRlKGR0LCBjb25maWcuZm9ybWF0LCBjb25maWcubG9jYWxlKTtcbiAgICBpZiAoZGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZGF0ZXM7XG4gICAgfVxuICAgIGlmIChjb25maWcucGlja0xldmVsID4gMCkge1xuICAgICAgLy8gYWRqdXN0IHRvIDFzdCBvZiB0aGUgbW9udGgvSmFuIDFzdCBvZiB0aGUgeWVhclxuICAgICAgLy8gb3IgdG8gdGhlIGxhc3QgZGF5IG9mIHRoZSBtb25oL0RlYyAzMXN0IG9mIHRoZSB5ZWFyIGlmIHRoZSBkYXRlcGlja2VyXG4gICAgICAvLyBpcyB0aGUgcmFuZ2UtZW5kIHBpY2tlciBvZiBhIHJhbmdlcGlja2VyXG4gICAgICB2YXIgX2R0ID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICBpZiAoY29uZmlnLnBpY2tMZXZlbCA9PT0gMSkge1xuICAgICAgICBkYXRlID0gcmFuZ2VFbmQgPyBfZHQuc2V0TW9udGgoX2R0LmdldE1vbnRoKCkgKyAxLCAwKSA6IF9kdC5zZXREYXRlKDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0ZSA9IHJhbmdlRW5kID8gX2R0LnNldEZ1bGxZZWFyKF9kdC5nZXRGdWxsWWVhcigpICsgMSwgMCwgMCkgOiBfZHQuc2V0TW9udGgoMCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0luUmFuZ2UoZGF0ZSwgY29uZmlnLm1pbkRhdGUsIGNvbmZpZy5tYXhEYXRlKSAmJiAhZGF0ZXMuaW5jbHVkZXMoZGF0ZSkgJiYgIWNvbmZpZy5kYXRlc0Rpc2FibGVkLmluY2x1ZGVzKGRhdGUpICYmICFjb25maWcuZGF5c09mV2Vla0Rpc2FibGVkLmluY2x1ZGVzKG5ldyBEYXRlKGRhdGUpLmdldERheSgpKSkge1xuICAgICAgZGF0ZXMucHVzaChkYXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGVzO1xuICB9LCBbXSk7XG4gIGlmIChuZXdEYXRlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGNvbmZpZy5tdWx0aWRhdGUgJiYgIWNsZWFyKSB7XG4gICAgLy8gZ2V0IHRoZSBzeW5tZXRyaWMgZGlmZmVyZW5jZSBiZXR3ZWVuIG9yaWdEYXRlcyBhbmQgbmV3RGF0ZXNcbiAgICBuZXdEYXRlcyA9IG5ld0RhdGVzLnJlZHVjZShmdW5jdGlvbiAoZGF0ZXMsIGRhdGUpIHtcbiAgICAgIGlmICghb3JpZ0RhdGVzLmluY2x1ZGVzKGRhdGUpKSB7XG4gICAgICAgIGRhdGVzLnB1c2goZGF0ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0ZXM7XG4gICAgfSwgb3JpZ0RhdGVzLmZpbHRlcihmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuICFuZXdEYXRlcy5pbmNsdWRlcyhkYXRlKTtcbiAgICB9KSk7XG4gIH1cbiAgLy8gZG8gbGVuZ3RoIGNoZWNrIGFsd2F5cyBiZWNhdXNlIHVzZXIgY2FuIGlucHV0IG11bHRpcGxlIGRhdGVzIHJlZ2FyZGxlc3Mgb2YgdGhlIG1vZGVcbiAgcmV0dXJuIGNvbmZpZy5tYXhOdW1iZXJPZkRhdGVzICYmIG5ld0RhdGVzLmxlbmd0aCA+IGNvbmZpZy5tYXhOdW1iZXJPZkRhdGVzID8gbmV3RGF0ZXMuc2xpY2UoY29uZmlnLm1heE51bWJlck9mRGF0ZXMgKiAtMSkgOiBuZXdEYXRlcztcbn1cblxuLy8gcmVmcmVzaCB0aGUgVUkgZWxlbWVudHNcbi8vIG1vZGVzOiAxOiBpbnB1dCBvbmx5LCAyLCBwaWNrZXIgb25seSwgMyBib3RoXG5mdW5jdGlvbiByZWZyZXNoVUkoZGF0ZXBpY2tlcikge1xuICB2YXIgbW9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMztcbiAgdmFyIHF1aWNrUmVuZGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0cnVlO1xuICB2YXIgY29uZmlnID0gZGF0ZXBpY2tlci5jb25maWcsXG4gICAgcGlja2VyID0gZGF0ZXBpY2tlci5waWNrZXIsXG4gICAgaW5wdXRGaWVsZCA9IGRhdGVwaWNrZXIuaW5wdXRGaWVsZDtcbiAgaWYgKG1vZGUgJiAyKSB7XG4gICAgdmFyIG5ld1ZpZXcgPSBwaWNrZXIuYWN0aXZlID8gY29uZmlnLnBpY2tMZXZlbCA6IGNvbmZpZy5zdGFydFZpZXc7XG4gICAgcGlja2VyLnVwZGF0ZSgpLmNoYW5nZVZpZXcobmV3VmlldykucmVuZGVyKHF1aWNrUmVuZGVyKTtcbiAgfVxuICBpZiAobW9kZSAmIDEgJiYgaW5wdXRGaWVsZCkge1xuICAgIGlucHV0RmllbGQudmFsdWUgPSBzdHJpbmdpZnlEYXRlcyhkYXRlcGlja2VyLmRhdGVzLCBjb25maWcpO1xuICB9XG59XG5mdW5jdGlvbiBfc2V0RGF0ZShkYXRlcGlja2VyLCBpbnB1dERhdGVzLCBvcHRpb25zKSB7XG4gIHZhciBjbGVhciA9IG9wdGlvbnMuY2xlYXIsXG4gICAgcmVuZGVyID0gb3B0aW9ucy5yZW5kZXIsXG4gICAgYXV0b2hpZGUgPSBvcHRpb25zLmF1dG9oaWRlO1xuICBpZiAocmVuZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICByZW5kZXIgPSB0cnVlO1xuICB9XG4gIGlmICghcmVuZGVyKSB7XG4gICAgYXV0b2hpZGUgPSBmYWxzZTtcbiAgfSBlbHNlIGlmIChhdXRvaGlkZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXV0b2hpZGUgPSBkYXRlcGlja2VyLmNvbmZpZy5hdXRvaGlkZTtcbiAgfVxuICB2YXIgbmV3RGF0ZXMgPSBwcm9jZXNzSW5wdXREYXRlcyhkYXRlcGlja2VyLCBpbnB1dERhdGVzLCBjbGVhcik7XG4gIGlmICghbmV3RGF0ZXMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG5ld0RhdGVzLnRvU3RyaW5nKCkgIT09IGRhdGVwaWNrZXIuZGF0ZXMudG9TdHJpbmcoKSkge1xuICAgIGRhdGVwaWNrZXIuZGF0ZXMgPSBuZXdEYXRlcztcbiAgICByZWZyZXNoVUkoZGF0ZXBpY2tlciwgcmVuZGVyID8gMyA6IDEpO1xuICAgIHRyaWdnZXJEYXRlcGlja2VyRXZlbnQoZGF0ZXBpY2tlciwgJ2NoYW5nZURhdGUnKTtcbiAgfSBlbHNlIHtcbiAgICByZWZyZXNoVUkoZGF0ZXBpY2tlciwgMSk7XG4gIH1cbiAgaWYgKGF1dG9oaWRlKSB7XG4gICAgZGF0ZXBpY2tlci5oaWRlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBkYXRlIHBpY2tlclxuICovXG52YXIgRGF0ZXBpY2tlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBkYXRlIHBpY2tlclxuICAgKiBAcGFyYW0gIHtFbGVtZW50fSBlbGVtZW50IC0gZWxlbWVudCB0byBiaW5kIGEgZGF0ZSBwaWNrZXJcbiAgICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9uc10gLSBjb25maWcgb3B0aW9uc1xuICAgKiBAcGFyYW0gIHtEYXRlUmFuZ2VQaWNrZXJ9IFtyYW5nZXBpY2tlcl0gLSBEYXRlUmFuZ2VQaWNrZXIgaW5zdGFuY2UgdGhlXG4gICAqIGRhdGUgcGlja2VyIGJlbG9uZ3MgdG8uIFVzZSB0aGlzIG9ubHkgd2hlbiBjcmVhdGluZyBkYXRlIHBpY2tlciBhcyBhIHBhcnRcbiAgICogb2YgZGF0ZSByYW5nZSBwaWNrZXJcbiAgICovXG4gIGZ1bmN0aW9uIERhdGVwaWNrZXIoZWxlbWVudCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgcmFuZ2VwaWNrZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0ZXBpY2tlcik7XG4gICAgZWxlbWVudC5kYXRlcGlja2VyID0gdGhpcztcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgLy8gc2V0IHVwIGNvbmZpZ1xuICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgYnV0dG9uQ2xhc3M6IG9wdGlvbnMuYnV0dG9uQ2xhc3MgJiYgU3RyaW5nKG9wdGlvbnMuYnV0dG9uQ2xhc3MpIHx8ICdidXR0b24nLFxuICAgICAgY29udGFpbmVyOiBkb2N1bWVudC5ib2R5LFxuICAgICAgZGVmYXVsdFZpZXdEYXRlOiB0b2RheSgpLFxuICAgICAgbWF4RGF0ZTogdW5kZWZpbmVkLFxuICAgICAgbWluRGF0ZTogdW5kZWZpbmVkXG4gICAgfSwgcHJvY2Vzc09wdGlvbnMoZGVmYXVsdE9wdGlvbnMsIHRoaXMpKTtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICBPYmplY3QuYXNzaWduKGNvbmZpZywgcHJvY2Vzc09wdGlvbnMob3B0aW9ucywgdGhpcykpO1xuXG4gICAgLy8gY29uZmlndXJlIGJ5IHR5cGVcbiAgICB2YXIgaW5saW5lID0gdGhpcy5pbmxpbmUgPSBlbGVtZW50LnRhZ05hbWUgIT09ICdJTlBVVCc7XG4gICAgdmFyIGlucHV0RmllbGQ7XG4gICAgdmFyIGluaXRpYWxEYXRlcztcbiAgICBpZiAoaW5saW5lKSB7XG4gICAgICBjb25maWcuY29udGFpbmVyID0gZWxlbWVudDtcbiAgICAgIGluaXRpYWxEYXRlcyA9IHN0cmluZ1RvQXJyYXkoZWxlbWVudC5kYXRhc2V0LmRhdGUsIGNvbmZpZy5kYXRlRGVsaW1pdGVyKTtcbiAgICAgIGRlbGV0ZSBlbGVtZW50LmRhdGFzZXQuZGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLmNvbnRhaW5lcikgOiBudWxsO1xuICAgICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgICBjb25maWcuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgfVxuICAgICAgaW5wdXRGaWVsZCA9IHRoaXMuaW5wdXRGaWVsZCA9IGVsZW1lbnQ7XG4gICAgICBpbnB1dEZpZWxkLmNsYXNzTGlzdC5hZGQoJ2RhdGVwaWNrZXItaW5wdXQnKTtcbiAgICAgIGluaXRpYWxEYXRlcyA9IHN0cmluZ1RvQXJyYXkoaW5wdXRGaWVsZC52YWx1ZSwgY29uZmlnLmRhdGVEZWxpbWl0ZXIpO1xuICAgIH1cbiAgICBpZiAocmFuZ2VwaWNrZXIpIHtcbiAgICAgIC8vIGNoZWNrIHZhbGlkaXJ5XG4gICAgICB2YXIgaW5kZXggPSByYW5nZXBpY2tlci5pbnB1dHMuaW5kZXhPZihpbnB1dEZpZWxkKTtcbiAgICAgIHZhciBkYXRlcGlja2VycyA9IHJhbmdlcGlja2VyLmRhdGVwaWNrZXJzO1xuICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IDEgfHwgIUFycmF5LmlzQXJyYXkoZGF0ZXBpY2tlcnMpKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIHJhbmdlcGlja2VyIG9iamVjdC4nKTtcbiAgICAgIH1cbiAgICAgIC8vIGF0dGFjaCBpdGFlbGYgdG8gdGhlIHJhbmdlcGlja2VyIGhlcmUgc28gdGhhdCBwcm9jZXNzSW5wdXREYXRlcygpIGNhblxuICAgICAgLy8gZGV0ZXJtaW5lIGlmIHRoaXMgaXMgdGhlIHJhbmdlLWVuZCBwaWNrZXIgb2YgdGhlIHJhbmdlcGlja2VyIHdoaWxlXG4gICAgICAvLyBzZXR0aW5nIGluaXRhbCB2YWx1ZXMgd2hlbiBwaWNrTGV2ZWwgPiAwXG4gICAgICBkYXRlcGlja2Vyc1tpbmRleF0gPSB0aGlzO1xuICAgICAgLy8gYWRkIGdldHRlciBmb3IgcmFuZ2VwaWNrZXJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncmFuZ2VwaWNrZXInLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiByYW5nZXBpY2tlcjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gc2V0IGluaXRpYWwgZGF0ZXNcbiAgICB0aGlzLmRhdGVzID0gW107XG4gICAgLy8gcHJvY2VzcyBpbml0aWFsIHZhbHVlXG4gICAgdmFyIGlucHV0RGF0ZVZhbHVlcyA9IHByb2Nlc3NJbnB1dERhdGVzKHRoaXMsIGluaXRpYWxEYXRlcyk7XG4gICAgaWYgKGlucHV0RGF0ZVZhbHVlcyAmJiBpbnB1dERhdGVWYWx1ZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5kYXRlcyA9IGlucHV0RGF0ZVZhbHVlcztcbiAgICB9XG4gICAgaWYgKGlucHV0RmllbGQpIHtcbiAgICAgIGlucHV0RmllbGQudmFsdWUgPSBzdHJpbmdpZnlEYXRlcyh0aGlzLmRhdGVzLCBjb25maWcpO1xuICAgIH1cbiAgICB2YXIgcGlja2VyID0gdGhpcy5waWNrZXIgPSBuZXcgUGlja2VyKHRoaXMpO1xuICAgIGlmIChpbmxpbmUpIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzZXQgdXAgZXZlbnQgbGlzdGVuZXJzIGluIG90aGVyIG1vZGVzXG4gICAgICB2YXIgb25Nb3VzZWRvd25Eb2N1bWVudCA9IG9uQ2xpY2tPdXRzaWRlLmJpbmQobnVsbCwgdGhpcyk7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW1tpbnB1dEZpZWxkLCAna2V5ZG93bicsIG9uS2V5ZG93bi5iaW5kKG51bGwsIHRoaXMpXSwgW2lucHV0RmllbGQsICdmb2N1cycsIG9uRm9jdXMuYmluZChudWxsLCB0aGlzKV0sIFtpbnB1dEZpZWxkLCAnbW91c2Vkb3duJywgb25Nb3VzZWRvd24uYmluZChudWxsLCB0aGlzKV0sIFtpbnB1dEZpZWxkLCAnY2xpY2snLCBvbkNsaWNrSW5wdXQuYmluZChudWxsLCB0aGlzKV0sIFtpbnB1dEZpZWxkLCAncGFzdGUnLCBvblBhc3RlLmJpbmQobnVsbCwgdGhpcyldLCBbZG9jdW1lbnQsICdtb3VzZWRvd24nLCBvbk1vdXNlZG93bkRvY3VtZW50XSwgW2RvY3VtZW50LCAndG91Y2hzdGFydCcsIG9uTW91c2Vkb3duRG9jdW1lbnRdLCBbd2luZG93LCAncmVzaXplJywgcGlja2VyLnBsYWNlLmJpbmQocGlja2VyKV1dO1xuICAgICAgcmVnaXN0ZXJMaXN0ZW5lcnModGhpcywgbGlzdGVuZXJzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0IERhdGUgb2JqZWN0IG9yIHRpbWUgdmFsdWUgaW4gZ2l2ZW4gZm9ybWF0IGFuZCBsYW5ndWFnZVxuICAgKiBAcGFyYW0gIHtEYXRlfE51bWJlcn0gZGF0ZSAtIGRhdGUgb3IgdGltZSB2YWx1ZSB0byBmb3JtYXRcbiAgICogQHBhcmFtICB7U3RyaW5nfE9iamVjdH0gZm9ybWF0IC0gZm9ybWF0IHN0cmluZyBvciBvYmplY3QgdGhhdCBjb250YWluc1xuICAgKiB0b0Rpc3BsYXkoKSBjdXN0b20gZm9ybWF0dGVyLCB3aG9zZSBzaWduYXR1cmUgaXNcbiAgICogLSBhcmdzOlxuICAgKiAgIC0gZGF0ZToge0RhdGV9IC0gRGF0ZSBpbnN0YW5jZSBvZiB0aGUgZGF0ZSBwYXNzZWQgdG8gdGhlIG1ldGhvZFxuICAgKiAgIC0gZm9ybWF0OiB7T2JqZWN0fSAtIHRoZSBmb3JtYXQgb2JqZWN0IHBhc3NlZCB0byB0aGUgbWV0aG9kXG4gICAqICAgLSBsb2NhbGU6IHtPYmplY3R9IC0gbG9jYWxlIGZvciB0aGUgbGFuZ3VhZ2Ugc3BlY2lmaWVkIGJ5IGBsYW5nYFxuICAgKiAtIHJldHVybjpcbiAgICogICAgIHtTdHJpbmd9IGZvcm1hdHRlZCBkYXRlXG4gICAqIEBwYXJhbSAge1N0cmluZ30gW2xhbmc9ZW5dIC0gbGFuZ3VhZ2UgY29kZSBmb3IgdGhlIGxvY2FsZSB0byB1c2VcbiAgICogQHJldHVybiB7U3RyaW5nfSBmb3JtYXR0ZWQgZGF0ZVxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhEYXRlcGlja2VyLCBbe1xuICAgIGtleTogXCJhY3RpdmVcIixcbiAgICBnZXQ6XG4gICAgLyoqXG4gICAgICogQHR5cGUge0Jvb2xlYW59IC0gV2hldGhlciB0aGUgcGlja2VyIGVsZW1lbnQgaXMgc2hvd24uIGB0cnVlYCB3aG5lIHNob3duXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICEhKHRoaXMucGlja2VyICYmIHRoaXMucGlja2VyLmFjdGl2ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge0hUTUxEaXZFbGVtZW50fSAtIERPTSBvYmplY3Qgb2YgcGlja2VyIGVsZW1lbnRcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJwaWNrZXJFbGVtZW50XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5waWNrZXIgPyB0aGlzLnBpY2tlci5lbGVtZW50IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBuZXcgdmFsdWVzIHRvIHRoZSBjb25maWcgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlnIG9wdGlvbnMgdG8gdXBkYXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0T3B0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgIHZhciBwaWNrZXIgPSB0aGlzLnBpY2tlcjtcbiAgICAgIHZhciBuZXdPcHRpb25zID0gcHJvY2Vzc09wdGlvbnMob3B0aW9ucywgdGhpcyk7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmNvbmZpZywgbmV3T3B0aW9ucyk7XG4gICAgICBwaWNrZXIuc2V0T3B0aW9ucyhuZXdPcHRpb25zKTtcbiAgICAgIHJlZnJlc2hVSSh0aGlzLCAzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93IHRoZSBwaWNrZXIgZWxlbWVudFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInNob3dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIGlmICh0aGlzLmlucHV0RmllbGQpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5wdXRGaWVsZC5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbnB1dEZpZWxkICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5fc2hvd2luZyA9IHRydWU7XG4gICAgICAgICAgdGhpcy5pbnB1dEZpZWxkLmZvY3VzKCk7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuX3Nob3dpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMucGlja2VyLnNob3coKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlIHRoZSBwaWNrZXIgZWxlbWVudFxuICAgICAqIE5vdCBhdmFpbGFibGUgb24gaW5saW5lIHBpY2tlclxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImhpZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgIGlmICh0aGlzLmlubGluZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnBpY2tlci5oaWRlKCk7XG4gICAgICB0aGlzLnBpY2tlci51cGRhdGUoKS5jaGFuZ2VWaWV3KHRoaXMuY29uZmlnLnN0YXJ0VmlldykucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSB0aGUgRGF0ZXBpY2tlciBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge0RldGVwaWNrZXJ9IC0gdGhlIGluc3RhbmNlIGRlc3Ryb3llZFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgdW5yZWdpc3Rlckxpc3RlbmVycyh0aGlzKTtcbiAgICAgIHRoaXMucGlja2VyLmRldGFjaCgpO1xuICAgICAgaWYgKCF0aGlzLmlubGluZSkge1xuICAgICAgICB0aGlzLmlucHV0RmllbGQuY2xhc3NMaXN0LnJlbW92ZSgnZGF0ZXBpY2tlci1pbnB1dCcpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIHRoaXMuZWxlbWVudC5kYXRlcGlja2VyO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBzZWxlY3RlZCBkYXRlKHMpXG4gICAgICpcbiAgICAgKiBUaGUgbWV0aG9kIHJldHVybnMgYSBEYXRlIG9iamVjdCBvZiBzZWxlY3RlZCBkYXRlIGJ5IGRlZmF1bHQsIGFuZCByZXR1cm5zXG4gICAgICogYW4gYXJyYXkgb2Ygc2VsZWN0ZWQgZGF0ZXMgaW4gbXVsdGlkYXRlIG1vZGUuIElmIGZvcm1hdCBzdHJpbmcgaXMgcGFzc2VkLFxuICAgICAqIGl0IHJldHVybnMgZGF0ZSBzdHJpbmcocykgZm9ybWF0dGVkIGluIGdpdmVuIGZvcm1hdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gW2Zvcm1hdF0gLSBGb3JtYXQgc3RyaW5nIHRvIHN0cmluZ2lmeSB0aGUgZGF0ZShzKVxuICAgICAqIEByZXR1cm4ge0RhdGV8U3RyaW5nfERhdGVbXXxTdHJpbmdbXX0gLSBzZWxlY3RlZCBkYXRlKHMpLCBvciBpZiBub25lIGlzXG4gICAgICogc2VsZWN0ZWQsIGVtcHR5IGFycmF5IGluIG11bHRpZGF0ZSBtb2RlIGFuZCB1bnRpdGxlZCBpbiBzaWdsZWRhdGUgbW9kZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldERhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0ZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgZm9ybWF0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBmb3JtYXQgPyBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICByZXR1cm4gZm9ybWF0RGF0ZShkYXRlLCBmb3JtYXQsIF90aGlzLmNvbmZpZy5sb2NhbGUpO1xuICAgICAgfSA6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlKTtcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5jb25maWcubXVsdGlkYXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGVzLm1hcChjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5kYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzLmRhdGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgc2VsZWN0ZWQgZGF0ZShzKVxuICAgICAqXG4gICAgICogSW4gbXVsdGlkYXRlIG1vZGUsIHlvdSBjYW4gcGFzcyBtdWx0aXBsZSBkYXRlcyBhcyBhIHNlcmllcyBvZiBhcmd1bWVudHNcbiAgICAgKiBvciBhbiBhcnJheS4gKFNpbmNlIGVhY2ggZGF0ZSBpcyBwYXJzZWQgaW5kaXZpZHVhbGx5LCB0aGUgdHlwZSBvZiB0aGVcbiAgICAgKiBkYXRlcyBkb2Vzbid0IGhhdmUgdG8gYmUgdGhlIHNhbWUuKVxuICAgICAqIFRoZSBnaXZlbiBkYXRlcyBhcmUgdXNlZCB0byB0b2dnbGUgdGhlIHNlbGVjdCBzdGF0dXMgb2YgZWFjaCBkYXRlLiBUaGVcbiAgICAgKiBudW1iZXIgb2Ygc2VsZWN0ZWQgZGF0ZXMgaXMga2VwdCBmcm9tIGV4Y2VlZGluZyB0aGUgbGVuZ3RoIHNldCB0b1xuICAgICAqIG1heE51bWJlck9mRGF0ZXMuXG4gICAgICpcbiAgICAgKiBXaXRoIGNsZWFyOiB0cnVlIG9wdGlvbiwgdGhlIG1ldGhvZCBjYW4gYmUgdXNlZCB0byBjbGVhciB0aGUgc2VsZWN0aW9uXG4gICAgICogYW5kIHRvIHJlcGxhY2UgdGhlIHNlbGVjdGlvbiBpbnN0ZWFkIG9mIHRvZ2dsaW5nIGluIG11bHRpZGF0ZSBtb2RlLlxuICAgICAqIElmIHRoZSBvcHRpb24gaXMgcGFzc2VkIHdpdGggbm8gZGF0ZSBhcmd1bWVudHMgb3IgYW4gZW1wdHkgZGF0ZXMgYXJyYXksXG4gICAgICogaXQgd29ya3MgYXMgXCJjbGVhclwiIChjbGVhciB0aGUgc2VsZWN0aW9uIHRoZW4gc2V0IG5vdGhpbmcpLCBhbmQgaWYgdGhlXG4gICAgICogb3B0aW9uIGlzIHBhc3NlZCB3aXRoIG5ldyBkYXRlcyB0byBzZWxlY3QsIGl0IHdvcmtzIGFzIFwicmVwbGFjZVwiIChjbGVhclxuICAgICAqIHRoZSBzZWxlY3Rpb24gdGhlbiBzZXQgdGhlIGdpdmVuIGRhdGVzKVxuICAgICAqXG4gICAgICogV2hlbiByZW5kZXI6IGZhbHNlIG9wdGlvbiBpcyB1c2VkLCB0aGUgbWV0aG9kIG9taXRzIHJlLXJlbmRlcmluZyB0aGVcbiAgICAgKiBwaWNrZXIgZWxlbWVudC4gSW4gdGhpcyBjYXNlLCB5b3UgbmVlZCB0byBjYWxsIHJlZnJlc2goKSBtZXRob2QgbGF0ZXIgaW5cbiAgICAgKiBvcmRlciBmb3IgdGhlIHBpY2tlciBlbGVtZW50IHRvIHJlZmxlY3QgdGhlIGNoYW5nZXMuIFRoZSBpbnB1dCBmaWVsZCBpc1xuICAgICAqIHJlZnJlc2hlZCBhbHdheXMgcmVnYXJkbGVzcyBvZiB0aGlzIG9wdGlvbi5cbiAgICAgKlxuICAgICAqIFdoZW4gaW52YWxpZCAodW5wYXJzYWJsZSwgcmVwZWF0ZWQsIGRpc2FibGVkIG9yIG91dC1vZi1yYW5nZSkgZGF0ZXMgYXJlXG4gICAgICogcGFzc2VkLCB0aGUgbWV0aG9kIGlnbm9yZXMgdGhlbSBhbmQgYXBwbGllcyBvbmx5IHZhbGlkIG9uZXMuIEluIHRoZSBjYXNlXG4gICAgICogdGhhdCBhbGwgdGhlIGdpdmVuIGRhdGVzIGFyZSBpbnZhbGlkLCB3aGljaCBpcyBkaXN0aW5ndWlzaGVkIGZyb20gcGFzc2luZ1xuICAgICAqIG5vIGRhdGVzLCB0aGUgbWV0aG9kIGNvbnNpZGVycyBpdCBhcyBhbiBlcnJvciBhbmQgbGVhdmVzIHRoZSBzZWxlY3Rpb25cbiAgICAgKiB1bnRvdWNoZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gey4uLihEYXRlfE51bWJlcnxTdHJpbmcpfEFycmF5fSBbZGF0ZXNdIC0gRGF0ZSBzdHJpbmdzLCBEYXRlXG4gICAgICogb2JqZWN0cywgdGltZSB2YWx1ZXMgb3IgbWl4IG9mIHRob3NlIGZvciBuZXcgc2VsZWN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGZ1bmN0aW9uIG9wdGlvbnNcbiAgICAgKiAtIGNsZWFyOiB7Ym9vbGVhbn0gLSBXaGV0aGVyIHRvIGNsZWFyIHRoZSBleGlzdGluZyBzZWxlY3Rpb25cbiAgICAgKiAgICAgZGVmdWFsdDogZmFsc2VcbiAgICAgKiAtIHJlbmRlcjoge2Jvb2xlYW59IC0gV2hldGhlciB0byByZS1yZW5kZXIgdGhlIHBpY2tlciBlbGVtZW50XG4gICAgICogICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgKiAtIGF1dG9oaWRlOiB7Ym9vbGVhbn0gLSBXaGV0aGVyIHRvIGhpZGUgdGhlIHBpY2tlciBlbGVtZW50IGFmdGVyIHJlLXJlbmRlclxuICAgICAqICAgICBJZ25vcmVkIHdoZW4gdXNlZCB3aXRoIHJlbmRlcjogZmFsc2VcbiAgICAgKiAgICAgZGVmYXVsdDogY29uZmlnLmF1dG9oaWRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0RGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREYXRlKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG4gICAgICB2YXIgZGF0ZXMgPSBbXS5jb25jYXQoYXJncyk7XG4gICAgICB2YXIgb3B0cyA9IHt9O1xuICAgICAgdmFyIGxhc3RBcmcgPSBsYXN0SXRlbU9mKGFyZ3MpO1xuICAgICAgaWYgKF90eXBlb2YobGFzdEFyZykgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGxhc3RBcmcpICYmICEobGFzdEFyZyBpbnN0YW5jZW9mIERhdGUpICYmIGxhc3RBcmcpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRzLCBkYXRlcy5wb3AoKSk7XG4gICAgICB9XG4gICAgICB2YXIgaW5wdXREYXRlcyA9IEFycmF5LmlzQXJyYXkoZGF0ZXNbMF0pID8gZGF0ZXNbMF0gOiBkYXRlcztcbiAgICAgIF9zZXREYXRlKHRoaXMsIGlucHV0RGF0ZXMsIG9wdHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgc2VsZWN0ZWQgZGF0ZShzKSB3aXRoIGlucHV0IGZpZWxkJ3MgdmFsdWVcbiAgICAgKiBOb3QgYXZhaWxhYmxlIG9uIGlubGluZSBwaWNrZXJcbiAgICAgKlxuICAgICAqIFRoZSBpbnB1dCBmaWVsZCB3aWxsIGJlIHJlZnJlc2hlZCB3aXRoIHByb3Blcmx5IGZvcm1hdHRlZCBkYXRlIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gW29wdGlvbnNdIC0gZnVuY3Rpb24gb3B0aW9uc1xuICAgICAqIC0gYXV0b2hpZGU6IHtib29sZWFufSAtIHdoZXRoZXIgdG8gaGlkZSB0aGUgcGlja2VyIGVsZW1lbnQgYWZ0ZXIgcmVmcmVzaFxuICAgICAqICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKHRoaXMuaW5saW5lKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBvcHRzID0ge1xuICAgICAgICBjbGVhcjogdHJ1ZSxcbiAgICAgICAgYXV0b2hpZGU6ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5hdXRvaGlkZSlcbiAgICAgIH07XG4gICAgICB2YXIgaW5wdXREYXRlcyA9IHN0cmluZ1RvQXJyYXkodGhpcy5pbnB1dEZpZWxkLnZhbHVlLCB0aGlzLmNvbmZpZy5kYXRlRGVsaW1pdGVyKTtcbiAgICAgIF9zZXREYXRlKHRoaXMsIGlucHV0RGF0ZXMsIG9wdHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZnJlc2ggdGhlIHBpY2tlciBlbGVtZW50IGFuZCB0aGUgYXNzb2NpYXRlZCBpbnB1dCBmaWVsZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbdGFyZ2V0XSAtIHRhcmdldCBpdGVtIHdoZW4gcmVmcmVzaGluZyBvbmUgaXRlbSBvbmx5XG4gICAgICogJ3BpY2tlcicgb3IgJ2lucHV0J1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ZvcmNlUmVuZGVyXSAtIHdoZXRoZXIgdG8gcmUtcmVuZGVyIHRoZSBwaWNrZXIgZWxlbWVudFxuICAgICAqIHJlZ2FyZGxlc3Mgb2YgaXRzIHN0YXRlIGluc3RlYWQgb2Ygb3B0aW1pemVkIHJlZnJlc2hcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJyZWZyZXNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgZm9yY2VSZW5kZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgICAgaWYgKHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBmb3JjZVJlbmRlciA9IHRhcmdldDtcbiAgICAgICAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIG1vZGU7XG4gICAgICBpZiAodGFyZ2V0ID09PSAncGlja2VyJykge1xuICAgICAgICBtb2RlID0gMjtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ID09PSAnaW5wdXQnKSB7XG4gICAgICAgIG1vZGUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbW9kZSA9IDM7XG4gICAgICB9XG4gICAgICByZWZyZXNoVUkodGhpcywgbW9kZSwgIWZvcmNlUmVuZGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbnRlciBlZGl0IG1vZGVcbiAgICAgKiBOb3QgYXZhaWxhYmxlIG9uIGlubGluZSBwaWNrZXIgb3Igd2hlbiB0aGUgcGlja2VyIGVsZW1lbnQgaXMgaGlkZGVuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZW50ZXJFZGl0TW9kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbnRlckVkaXRNb2RlKCkge1xuICAgICAgaWYgKHRoaXMuaW5saW5lIHx8ICF0aGlzLnBpY2tlci5hY3RpdmUgfHwgdGhpcy5lZGl0TW9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmVkaXRNb2RlID0gdHJ1ZTtcbiAgICAgIHRoaXMuaW5wdXRGaWVsZC5jbGFzc0xpc3QuYWRkKCdpbi1lZGl0JywgJ2JvcmRlci1ibHVlLTcwMCcsICchYm9yZGVyLXByaW1hcnktNzAwJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhpdCBmcm9tIGVkaXQgbW9kZVxuICAgICAqIE5vdCBhdmFpbGFibGUgb24gaW5saW5lIHBpY2tlclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gW29wdGlvbnNdIC0gZnVuY3Rpb24gb3B0aW9uc1xuICAgICAqIC0gdXBkYXRlOiB7Ym9vbGVhbn0gLSB3aGV0aGVyIHRvIGNhbGwgdXBkYXRlKCkgYWZ0ZXIgZXhpdGluZ1xuICAgICAqICAgICBJZiBmYWxzZSwgaW5wdXQgZmllbGQgaXMgcmV2ZXJ0IHRvIHRoZSBleGlzdGluZyBzZWxlY3Rpb25cbiAgICAgKiAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJleGl0RWRpdE1vZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXhpdEVkaXRNb2RlKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmICh0aGlzLmlubGluZSB8fCAhdGhpcy5lZGl0TW9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgb3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICB1cGRhdGU6IGZhbHNlXG4gICAgICB9LCBvcHRpb25zKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmVkaXRNb2RlO1xuICAgICAgdGhpcy5pbnB1dEZpZWxkLmNsYXNzTGlzdC5yZW1vdmUoJ2luLWVkaXQnLCAnYm9yZGVyLWJsdWUtNzAwJywgJyFib3JkZXItcHJpbWFyeS03MDAnKTtcbiAgICAgIGlmIChvcHRzLnVwZGF0ZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZShvcHRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJmb3JtYXREYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdERhdGUkMShkYXRlLCBmb3JtYXQsIGxhbmcpIHtcbiAgICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUsIGZvcm1hdCwgbGFuZyAmJiBsb2NhbGVzW2xhbmddIHx8IGxvY2FsZXMuZW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlIGRhdGUgc3RyaW5nXG4gICAgICogQHBhcmFtICB7U3RyaW5nfERhdGV8TnVtYmVyfSBkYXRlU3RyIC0gZGF0ZSBzdHJpbmcsIERhdGUgb2JqZWN0IG9yIHRpbWVcbiAgICAgKiB2YWx1ZSB0byBwYXJzZVxuICAgICAqIEBwYXJhbSAge1N0cmluZ3xPYmplY3R9IGZvcm1hdCAtIGZvcm1hdCBzdHJpbmcgb3Igb2JqZWN0IHRoYXQgY29udGFpbnNcbiAgICAgKiB0b1ZhbHVlKCkgY3VzdG9tIHBhcnNlciwgd2hvc2Ugc2lnbmF0dXJlIGlzXG4gICAgICogLSBhcmdzOlxuICAgICAqICAgLSBkYXRlU3RyOiB7U3RyaW5nfERhdGV8TnVtYmVyfSAtIHRoZSBkYXRlU3RyIHBhc3NlZCB0byB0aGUgbWV0aG9kXG4gICAgICogICAtIGZvcm1hdDoge09iamVjdH0gLSB0aGUgZm9ybWF0IG9iamVjdCBwYXNzZWQgdG8gdGhlIG1ldGhvZFxuICAgICAqICAgLSBsb2NhbGU6IHtPYmplY3R9IC0gbG9jYWxlIGZvciB0aGUgbGFuZ3VhZ2Ugc3BlY2lmaWVkIGJ5IGBsYW5nYFxuICAgICAqIC0gcmV0dXJuOlxuICAgICAqICAgICB7RGF0ZXxOdW1iZXJ9IHBhcnNlZCBkYXRlIG9yIGl0cyB0aW1lIHZhbHVlXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBbbGFuZz1lbl0gLSBsYW5ndWFnZSBjb2RlIGZvciB0aGUgbG9jYWxlIHRvIHVzZVxuICAgICAqIEByZXR1cm4ge051bWJlcn0gdGltZSB2YWx1ZSBvZiBwYXJzZWQgZGF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInBhcnNlRGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZURhdGUkMShkYXRlU3RyLCBmb3JtYXQsIGxhbmcpIHtcbiAgICAgIHJldHVybiBwYXJzZURhdGUoZGF0ZVN0ciwgZm9ybWF0LCBsYW5nICYmIGxvY2FsZXNbbGFuZ10gfHwgbG9jYWxlcy5lbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdH0gLSBJbnN0YWxsZWQgbG9jYWxlcyBpbiBgW2xhbmd1YWdlQ29kZV06IGxvY2FsZU9iamVjdGAgZm9ybWF0XG4gICAgICogZW5gOl9FbmdsaXNoIChVUylfIGlzIHByZS1pbnN0YWxsZWQuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwibG9jYWxlc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGxvY2FsZXM7XG4gICAgfVxuICB9XSk7XG59KCk7XG5cbi8vIGZpbHRlciBvdXQgdGhlIGNvbmZpZyBvcHRpb25zIGluYXBwcm9wcml0ZSB0byBwYXNzIHRvIERhdGVwaWNrZXJcbmZ1bmN0aW9uIGZpbHRlck9wdGlvbnMob3B0aW9ucykge1xuICB2YXIgbmV3T3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuICBkZWxldGUgbmV3T3B0cy5pbnB1dHM7XG4gIGRlbGV0ZSBuZXdPcHRzLmFsbG93T25lU2lkZWRSYW5nZTtcbiAgZGVsZXRlIG5ld09wdHMubWF4TnVtYmVyT2ZEYXRlczsgLy8gdG8gZW5zdXJlIGVhY2ggZGF0ZXBpY2tlciBoYW5kbGVzIGEgc2luZ2xlIGRhdGVcblxuICByZXR1cm4gbmV3T3B0cztcbn1cbmZ1bmN0aW9uIHNldHVwRGF0ZXBpY2tlcihyYW5nZXBpY2tlciwgY2hhbmdlRGF0ZUxpc3RlbmVyLCBlbCwgb3B0aW9ucykge1xuICByZWdpc3Rlckxpc3RlbmVycyhyYW5nZXBpY2tlciwgW1tlbCwgJ2NoYW5nZURhdGUnLCBjaGFuZ2VEYXRlTGlzdGVuZXJdXSk7XG4gIG5ldyBEYXRlcGlja2VyKGVsLCBvcHRpb25zLCByYW5nZXBpY2tlcik7XG59XG5mdW5jdGlvbiBvbkNoYW5nZURhdGUocmFuZ2VwaWNrZXIsIGV2KSB7XG4gIC8vIHRvIHByZXZlbnQgYm90aCBkYXRlcGlja2VycyB0cmlnZ2VyIHRoZSBvdGhlciBzaWRlJ3MgdXBkYXRlIGVhY2ggb3RoZXJcbiAgaWYgKHJhbmdlcGlja2VyLl91cGRhdGluZykge1xuICAgIHJldHVybjtcbiAgfVxuICByYW5nZXBpY2tlci5fdXBkYXRpbmcgPSB0cnVlO1xuICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICBpZiAodGFyZ2V0LmRhdGVwaWNrZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgZGF0ZXBpY2tlcnMgPSByYW5nZXBpY2tlci5kYXRlcGlja2VycztcbiAgdmFyIHNldERhdGVPcHRpb25zID0ge1xuICAgIHJlbmRlcjogZmFsc2VcbiAgfTtcbiAgdmFyIGNoYW5nZWRTaWRlID0gcmFuZ2VwaWNrZXIuaW5wdXRzLmluZGV4T2YodGFyZ2V0KTtcbiAgdmFyIG90aGVyU2lkZSA9IGNoYW5nZWRTaWRlID09PSAwID8gMSA6IDA7XG4gIHZhciBjaGFuZ2VkRGF0ZSA9IGRhdGVwaWNrZXJzW2NoYW5nZWRTaWRlXS5kYXRlc1swXTtcbiAgdmFyIG90aGVyRGF0ZSA9IGRhdGVwaWNrZXJzW290aGVyU2lkZV0uZGF0ZXNbMF07XG4gIGlmIChjaGFuZ2VkRGF0ZSAhPT0gdW5kZWZpbmVkICYmIG90aGVyRGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gaWYgdGhlIHN0YXJ0IG9mIHRoZSByYW5nZSA+IHRoZSBlbmQsIHN3YXAgdGhlbVxuICAgIGlmIChjaGFuZ2VkU2lkZSA9PT0gMCAmJiBjaGFuZ2VkRGF0ZSA+IG90aGVyRGF0ZSkge1xuICAgICAgZGF0ZXBpY2tlcnNbMF0uc2V0RGF0ZShvdGhlckRhdGUsIHNldERhdGVPcHRpb25zKTtcbiAgICAgIGRhdGVwaWNrZXJzWzFdLnNldERhdGUoY2hhbmdlZERhdGUsIHNldERhdGVPcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKGNoYW5nZWRTaWRlID09PSAxICYmIGNoYW5nZWREYXRlIDwgb3RoZXJEYXRlKSB7XG4gICAgICBkYXRlcGlja2Vyc1swXS5zZXREYXRlKGNoYW5nZWREYXRlLCBzZXREYXRlT3B0aW9ucyk7XG4gICAgICBkYXRlcGlja2Vyc1sxXS5zZXREYXRlKG90aGVyRGF0ZSwgc2V0RGF0ZU9wdGlvbnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICghcmFuZ2VwaWNrZXIuYWxsb3dPbmVTaWRlZFJhbmdlKSB7XG4gICAgLy8gdG8gcHJldmVudCB0aGUgcmFuZ2UgZnJvbSBiZWNvbWluZyBvbmUtc2lkZWQsIGNvcHkgY2hhbmdlZCBzaWRlJ3NcbiAgICAvLyBzZWxlY3Rpb24gKG5vIG1hdHRlciBpZiBpdCdzIGVtcHR5KSB0byB0aGUgb3RoZXIgc2lkZVxuICAgIGlmIChjaGFuZ2VkRGF0ZSAhPT0gdW5kZWZpbmVkIHx8IG90aGVyRGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXREYXRlT3B0aW9ucy5jbGVhciA9IHRydWU7XG4gICAgICBkYXRlcGlja2Vyc1tvdGhlclNpZGVdLnNldERhdGUoZGF0ZXBpY2tlcnNbY2hhbmdlZFNpZGVdLmRhdGVzLCBzZXREYXRlT3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIGRhdGVwaWNrZXJzWzBdLnBpY2tlci51cGRhdGUoKS5yZW5kZXIoKTtcbiAgZGF0ZXBpY2tlcnNbMV0ucGlja2VyLnVwZGF0ZSgpLnJlbmRlcigpO1xuICBkZWxldGUgcmFuZ2VwaWNrZXIuX3VwZGF0aW5nO1xufVxuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIGRhdGUgcmFuZ2UgcGlja2VyXG4gKi9cbnZhciBEYXRlUmFuZ2VQaWNrZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlIGEgZGF0ZSByYW5nZSBwaWNrZXJcbiAgICogQHBhcmFtICB7RWxlbWVudH0gZWxlbWVudCAtIGVsZW1lbnQgdG8gYmluZCBhIGRhdGUgcmFuZ2UgcGlja2VyXG4gICAqIEBwYXJhbSAge09iamVjdH0gW29wdGlvbnNdIC0gY29uZmlnIG9wdGlvbnNcbiAgICovXG4gIGZ1bmN0aW9uIERhdGVSYW5nZVBpY2tlcihlbGVtZW50KSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRlUmFuZ2VQaWNrZXIpO1xuICAgIHZhciBpbnB1dHMgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMuaW5wdXRzKSA/IG9wdGlvbnMuaW5wdXRzIDogQXJyYXkuZnJvbShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykpO1xuICAgIGlmIChpbnB1dHMubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbGVtZW50LnJhbmdlcGlja2VyID0gdGhpcztcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuaW5wdXRzID0gaW5wdXRzLnNsaWNlKDAsIDIpO1xuICAgIHRoaXMuYWxsb3dPbmVTaWRlZFJhbmdlID0gISFvcHRpb25zLmFsbG93T25lU2lkZWRSYW5nZTtcbiAgICB2YXIgY2hhbmdlRGF0ZUxpc3RlbmVyID0gb25DaGFuZ2VEYXRlLmJpbmQobnVsbCwgdGhpcyk7XG4gICAgdmFyIGNsZWFuT3B0aW9ucyA9IGZpbHRlck9wdGlvbnMob3B0aW9ucyk7XG4gICAgLy8gaW4gb3JkZXIgZm9yIGluaXRpYWwgZGF0ZSBzZXR1cCB0byB3b3JrIHJpZ2h0IHdoZW4gcGNpY0x2ZWwgPiAwLFxuICAgIC8vIGxldCBEYXRlcGlja2VyIGNvbnN0cnVjdG9yIGFkZCB0aGUgaW5zdGFuY2UgdG8gdGhlIHJhbmdlcGlja2VyXG4gICAgdmFyIGRhdGVwaWNrZXJzID0gW107XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdkYXRlcGlja2VycycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gZGF0ZXBpY2tlcnM7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc2V0dXBEYXRlcGlja2VyKHRoaXMsIGNoYW5nZURhdGVMaXN0ZW5lciwgdGhpcy5pbnB1dHNbMF0sIGNsZWFuT3B0aW9ucyk7XG4gICAgc2V0dXBEYXRlcGlja2VyKHRoaXMsIGNoYW5nZURhdGVMaXN0ZW5lciwgdGhpcy5pbnB1dHNbMV0sIGNsZWFuT3B0aW9ucyk7XG4gICAgT2JqZWN0LmZyZWV6ZShkYXRlcGlja2Vycyk7XG4gICAgLy8gbm9ybWFsaXplIHRoZSByYW5nZSBpZiBpbml0YWwgZGF0ZXMgYXJlIGdpdmVuXG4gICAgaWYgKGRhdGVwaWNrZXJzWzBdLmRhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIG9uQ2hhbmdlRGF0ZSh0aGlzLCB7XG4gICAgICAgIHRhcmdldDogdGhpcy5pbnB1dHNbMF1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoZGF0ZXBpY2tlcnNbMV0uZGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgb25DaGFuZ2VEYXRlKHRoaXMsIHtcbiAgICAgICAgdGFyZ2V0OiB0aGlzLmlucHV0c1sxXVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheX0gLSBzZWxlY3RlZCBkYXRlIG9mIHRoZSBsaW5rZWQgZGF0ZSBwaWNrZXJzXG4gICAqL1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKERhdGVSYW5nZVBpY2tlciwgW3tcbiAgICBrZXk6IFwiZGF0ZXNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRhdGVwaWNrZXJzLmxlbmd0aCA9PT0gMiA/IFt0aGlzLmRhdGVwaWNrZXJzWzBdLmRhdGVzWzBdLCB0aGlzLmRhdGVwaWNrZXJzWzFdLmRhdGVzWzBdXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgbmV3IHZhbHVlcyB0byB0aGUgY29uZmlnIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGNvbmZpZyBvcHRpb25zIHRvIHVwZGF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInNldE9wdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICB0aGlzLmFsbG93T25lU2lkZWRSYW5nZSA9ICEhb3B0aW9ucy5hbGxvd09uZVNpZGVkUmFuZ2U7XG4gICAgICB2YXIgY2xlYW5PcHRpb25zID0gZmlsdGVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIHRoaXMuZGF0ZXBpY2tlcnNbMF0uc2V0T3B0aW9ucyhjbGVhbk9wdGlvbnMpO1xuICAgICAgdGhpcy5kYXRlcGlja2Vyc1sxXS5zZXRPcHRpb25zKGNsZWFuT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSB0aGUgRGF0ZVJhbmdlUGlja2VyIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7RGF0ZVJhbmdlUGlja2VyfSAtIHRoZSBpbnN0YW5jZSBkZXN0cm95ZWRcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJkZXN0cm95XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmRhdGVwaWNrZXJzWzBdLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuZGF0ZXBpY2tlcnNbMV0uZGVzdHJveSgpO1xuICAgICAgdW5yZWdpc3Rlckxpc3RlbmVycyh0aGlzKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQucmFuZ2VwaWNrZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBzdGFydCBhbmQgZW5kIGRhdGVzIG9mIHRoZSBkYXRlIHJhbmdlXG4gICAgICpcbiAgICAgKiBUaGUgbWV0aG9kIHJldHVybnMgRGF0ZSBvYmplY3RzIGJ5IGRlZmF1bHQuIElmIGZvcm1hdCBzdHJpbmcgaXMgcGFzc2VkLFxuICAgICAqIGl0IHJldHVybnMgZGF0ZSBzdHJpbmdzIGZvcm1hdHRlZCBpbiBnaXZlbiBmb3JtYXQuXG4gICAgICogVGhlIHJlc3VsdCBhcnJheSBhbHdheXMgY29udGFpbnMgMiBpdGVtcyAoc3RhcnQgZGF0ZS9lbmQgZGF0ZSkgYW5kXG4gICAgICogdW5kZWZpbmVkIGlzIHVzZWQgZm9yIHVuc2VsZWN0ZWQgc2lkZS4gKGUuZy4gSWYgbm9uZSBpcyBzZWxlY3RlZCxcbiAgICAgKiB0aGUgcmVzdWx0IHdpbGwgYmUgW3VuZGVmaW5lZCwgdW5kZWZpbmVkXS4gSWYgb25seSB0aGUgZW5kIGRhdGUgaXMgc2V0XG4gICAgICogd2hlbiBhbGxvd09uZVNpZGVkUmFuZ2UgY29uZmlnIG9wdGlvbiBpcyB0cnVlLCBbdW5kZWZpbmVkLCBlbmREYXRlXSB3aWxsXG4gICAgICogYmUgcmV0dXJuZWQuKVxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBbZm9ybWF0XSAtIEZvcm1hdCBzdHJpbmcgdG8gc3RyaW5naWZ5IHRoZSBkYXRlc1xuICAgICAqIEByZXR1cm4ge0FycmF5fSAtIFN0YXJ0IGFuZCBlbmQgZGF0ZXNcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXREYXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREYXRlcygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgZm9ybWF0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBmb3JtYXQgPyBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICByZXR1cm4gZm9ybWF0RGF0ZShkYXRlLCBmb3JtYXQsIF90aGlzLmRhdGVwaWNrZXJzWzBdLmNvbmZpZy5sb2NhbGUpO1xuICAgICAgfSA6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gdGhpcy5kYXRlcy5tYXAoZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGUgPT09IHVuZGVmaW5lZCA/IGRhdGUgOiBjYWxsYmFjayhkYXRlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgc3RhcnQgYW5kIGVuZCBkYXRlcyBvZiB0aGUgZGF0ZSByYW5nZVxuICAgICAqXG4gICAgICogVGhlIG1ldGhvZCBjYWxscyBkYXRlcGlja2VyLnNldERhdGUoKSBpbnRlcm5hbGx5IHVzaW5nIGVhY2ggb2YgdGhlXG4gICAgICogYXJndW1lbnRzIGluIHN0YXJ04oaSZW5kIG9yZGVyLlxuICAgICAqXG4gICAgICogV2hlbiBhIGNsZWFyOiB0cnVlIG9wdGlvbiBvYmplY3QgaXMgcGFzc2VkIGluc3RlYWQgb2YgYSBkYXRlLCB0aGUgbWV0aG9kXG4gICAgICogY2xlYXJzIHRoZSBkYXRlLlxuICAgICAqXG4gICAgICogSWYgYW4gaW52YWxpZCBkYXRlLCB0aGUgc2FtZSBkYXRlIGFzIHRoZSBjdXJyZW50IG9uZSBvciBhbiBvcHRpb24gb2JqZWN0XG4gICAgICogd2l0aG91dCBjbGVhcjogdHJ1ZSBpcyBwYXNzZWQsIHRoZSBtZXRob2QgY29uc2lkZXJzIHRoYXQgYXJndW1lbnQgYXMgYW5cbiAgICAgKiBcImluZWZmZWN0aXZlXCIgYXJndW1lbnQgYmVjYXVzZSBjYWxsaW5nIGRhdGVwaWNrZXIuc2V0RGF0ZSgpIHdpdGggdGhvc2VcbiAgICAgKiB2YWx1ZXMgbWFrZXMgbm8gY2hhbmdlcyB0byB0aGUgZGF0ZSBzZWxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBXaGVuIHRoZSBhbGxvd09uZVNpZGVkUmFuZ2UgY29uZmlnIG9wdGlvbiBpcyBmYWxzZSwgcGFzc2luZyB7Y2xlYXI6IHRydWV9XG4gICAgICogdG8gY2xlYXIgdGhlIHJhbmdlIHdvcmtzIG9ubHkgd2hlbiBpdCBpcyBkb25lIHRvIHRoZSBsYXN0IGVmZmVjdGl2ZVxuICAgICAqIGFyZ3VtZW50IChpbiBvdGhlciB3b3JkcywgcGFzc2VkIHRvIHJhbmdlRW5kIG9yIHRvIHJhbmdlU3RhcnQgYWxvbmcgd2l0aFxuICAgICAqIGluZWZmZWN0aXZlIHJhbmdlRW5kKS4gVGhpcyBpcyBiZWNhdXNlIHdoZW4gdGhlIGRhdGUgcmFuZ2UgaXMgY2hhbmdlZCxcbiAgICAgKiBpdCBnZXRzIG5vcm1hbGl6ZWQgYmFzZWQgb24gdGhlIGxhc3QgY2hhbmdlIGF0IHRoZSBlbmQgb2YgdGhlIGNoYW5naW5nXG4gICAgICogcHJvY2Vzcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ8U3RyaW5nfE9iamVjdH0gcmFuZ2VTdGFydCAtIFN0YXJ0IGRhdGUgb2YgdGhlIHJhbmdlXG4gICAgICogb3Ige2NsZWFyOiB0cnVlfSB0byBjbGVhciB0aGUgZGF0ZVxuICAgICAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ8U3RyaW5nfE9iamVjdH0gcmFuZ2VFbmQgLSBFbmQgZGF0ZSBvZiB0aGUgcmFuZ2VcbiAgICAgKiBvciB7Y2xlYXI6IHRydWV9IHRvIGNsZWFyIHRoZSBkYXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0RGF0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGF0ZXMocmFuZ2VTdGFydCwgcmFuZ2VFbmQpIHtcbiAgICAgIHZhciBfdGhpcyRkYXRlcGlja2VycyA9IF9zbGljZWRUb0FycmF5KHRoaXMuZGF0ZXBpY2tlcnMsIDIpLFxuICAgICAgICBkYXRlcGlja2VyMCA9IF90aGlzJGRhdGVwaWNrZXJzWzBdLFxuICAgICAgICBkYXRlcGlja2VyMSA9IF90aGlzJGRhdGVwaWNrZXJzWzFdO1xuICAgICAgdmFyIG9yaWdEYXRlcyA9IHRoaXMuZGF0ZXM7XG5cbiAgICAgIC8vIElmIHJhbmdlIG5vcm1hbGl6YXRpb24gcnVucyBvbiBldmVyeSBjaGFuZ2UsIHdlIGNhbid0IHNldCBhIG5ldyByYW5nZVxuICAgICAgLy8gdGhhdCBzdGFydHMgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgY3VycmVudCByYW5nZSBjb3JyZWN0bHkgYmVjYXVzZSB0aGVcbiAgICAgIC8vIG5vcm1hbGl6YXRpb24gcHJvY2VzcyBzd2FwcyBzdGFydOKGlO+4jmVuZCByaWdodCBhZnRlciBzZXR0aW5nIHRoZSBuZXcgc3RhcnRcbiAgICAgIC8vIGRhdGUuIFRvIHByZXZlbnQgdGhpcywgdGhlIG5vcm1hbGl6YXRpb24gcHJvY2VzcyBuZWVkcyB0byBydW4gb25jZSBhZnRlclxuICAgICAgLy8gYm90aCBvZiB0aGUgbmV3IGRhdGVzIGFyZSBzZXQuXG4gICAgICB0aGlzLl91cGRhdGluZyA9IHRydWU7XG4gICAgICBkYXRlcGlja2VyMC5zZXREYXRlKHJhbmdlU3RhcnQpO1xuICAgICAgZGF0ZXBpY2tlcjEuc2V0RGF0ZShyYW5nZUVuZCk7XG4gICAgICBkZWxldGUgdGhpcy5fdXBkYXRpbmc7XG4gICAgICBpZiAoZGF0ZXBpY2tlcjEuZGF0ZXNbMF0gIT09IG9yaWdEYXRlc1sxXSkge1xuICAgICAgICBvbkNoYW5nZURhdGUodGhpcywge1xuICAgICAgICAgIHRhcmdldDogdGhpcy5pbnB1dHNbMV1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGRhdGVwaWNrZXIwLmRhdGVzWzBdICE9PSBvcmlnRGF0ZXNbMF0pIHtcbiAgICAgICAgb25DaGFuZ2VEYXRlKHRoaXMsIHtcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMuaW5wdXRzWzBdXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xufSgpO1xuXG5leHBvcnRzLkRhdGVSYW5nZVBpY2tlciA9IERhdGVSYW5nZVBpY2tlcjtcbmV4cG9ydHMuRGF0ZXBpY2tlciA9IERhdGVwaWNrZXI7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uICovXG5pbXBvcnQgdHlwZSB7IEFjY29yZGlvbkl0ZW0sIEFjY29yZGlvbk9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSW5zdGFuY2VPcHRpb25zIH0gZnJvbSAnLi4vLi4vZG9tL3R5cGVzJztcbmltcG9ydCB7IEFjY29yZGlvbkludGVyZmFjZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCBpbnN0YW5jZXMgZnJvbSAnLi4vLi4vZG9tL2luc3RhbmNlcyc7XG5cbmNvbnN0IERlZmF1bHQ6IEFjY29yZGlvbk9wdGlvbnMgPSB7XG4gICAgYWx3YXlzT3BlbjogZmFsc2UsXG4gICAgYWN0aXZlQ2xhc3NlczogJ2JnLWdyYXktMTAwIGRhcms6YmctZ3JheS04MDAgdGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtd2hpdGUnLFxuICAgIGluYWN0aXZlQ2xhc3NlczogJ3RleHQtZ3JheS01MDAgZGFyazp0ZXh0LWdyYXktNDAwJyxcbiAgICBvbk9wZW46ICgpID0+IHt9LFxuICAgIG9uQ2xvc2U6ICgpID0+IHt9LFxuICAgIG9uVG9nZ2xlOiAoKSA9PiB7fSxcbn07XG5cbmNvbnN0IERlZmF1bHRJbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IHtcbiAgICBpZDogbnVsbCxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmNsYXNzIEFjY29yZGlvbiBpbXBsZW1lbnRzIEFjY29yZGlvbkludGVyZmFjZSB7XG4gICAgX2luc3RhbmNlSWQ6IHN0cmluZztcbiAgICBfYWNjb3JkaW9uRWw6IEhUTUxFbGVtZW50O1xuICAgIF9pdGVtczogQWNjb3JkaW9uSXRlbVtdO1xuICAgIF9vcHRpb25zOiBBY2NvcmRpb25PcHRpb25zO1xuICAgIF9jbGlja0hhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG4gICAgX2luaXRpYWxpemVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGFjY29yZGlvbkVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBpdGVtczogQWNjb3JkaW9uSXRlbVtdID0gW10sXG4gICAgICAgIG9wdGlvbnM6IEFjY29yZGlvbk9wdGlvbnMgPSBEZWZhdWx0LFxuICAgICAgICBpbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IERlZmF1bHRJbnN0YW5jZU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VJZCA9IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgPyBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgIDogYWNjb3JkaW9uRWwuaWQ7XG4gICAgICAgIHRoaXMuX2FjY29yZGlvbkVsID0gYWNjb3JkaW9uRWw7XG4gICAgICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB7IC4uLkRlZmF1bHQsIC4uLm9wdGlvbnMgfTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIGluc3RhbmNlcy5hZGRJbnN0YW5jZShcbiAgICAgICAgICAgICdBY2NvcmRpb24nLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5faXRlbXMubGVuZ3RoICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgLy8gc2hvdyBhY2NvcmRpb24gaXRlbSBiYXNlZCBvbiBjbGlja1xuICAgICAgICAgICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW4oaXRlbS5pZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgY2xpY2tIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZShpdGVtLmlkKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaXRlbS50cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gU3RvcmUgdGhlIGNsaWNrSGFuZGxlciBpbiBhIHByb3BlcnR5IG9mIHRoZSBpdGVtIGZvciByZW1vdmFsIGxhdGVyXG4gICAgICAgICAgICAgICAgaXRlbS5jbGlja0hhbmRsZXIgPSBjbGlja0hhbmRsZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9pdGVtcy5sZW5ndGggJiYgdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtLnRyaWdnZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGl0ZW0uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwIGJ5IGRlbGV0aW5nIHRoZSBjbGlja0hhbmRsZXIgcHJvcGVydHkgZnJvbSB0aGUgaXRlbVxuICAgICAgICAgICAgICAgIGRlbGV0ZSBpdGVtLmNsaWNrSGFuZGxlcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICBpbnN0YW5jZXMucmVtb3ZlSW5zdGFuY2UoJ0FjY29yZGlvbicsIHRoaXMuX2luc3RhbmNlSWQpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lBbmRSZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMucmVtb3ZlSW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICBnZXRJdGVtKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5pZCA9PT0gaWQpWzBdO1xuICAgIH1cblxuICAgIG9wZW4oaWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5nZXRJdGVtKGlkKTtcblxuICAgICAgICAvLyBkb24ndCBoaWRlIG90aGVyIGFjY29yZGlvbnMgaWYgYWx3YXlzIG9wZW5cbiAgICAgICAgaWYgKCF0aGlzLl9vcHRpb25zLmFsd2F5c09wZW4pIHtcbiAgICAgICAgICAgIHRoaXMuX2l0ZW1zLm1hcCgoaSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpICE9PSBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGkudHJpZ2dlckVsLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLl9vcHRpb25zLmFjdGl2ZUNsYXNzZXMuc3BsaXQoJyAnKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpLnRyaWdnZXJFbC5jbGFzc0xpc3QuYWRkKFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5fb3B0aW9ucy5pbmFjdGl2ZUNsYXNzZXMuc3BsaXQoJyAnKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpLnRhcmdldEVsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICBpLnRyaWdnZXJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgaS5hY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyByb3RhdGUgaWNvbiBpZiBzZXRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkuaWNvbkVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpLmljb25FbC5jbGFzc0xpc3QuYWRkKCdyb3RhdGUtMTgwJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNob3cgYWN0aXZlIGl0ZW1cbiAgICAgICAgaXRlbS50cmlnZ2VyRWwuY2xhc3NMaXN0LmFkZCguLi50aGlzLl9vcHRpb25zLmFjdGl2ZUNsYXNzZXMuc3BsaXQoJyAnKSk7XG4gICAgICAgIGl0ZW0udHJpZ2dlckVsLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICAuLi50aGlzLl9vcHRpb25zLmluYWN0aXZlQ2xhc3Nlcy5zcGxpdCgnICcpXG4gICAgICAgICk7XG4gICAgICAgIGl0ZW0udHJpZ2dlckVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgIGl0ZW0udGFyZ2V0RWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcblxuICAgICAgICAvLyByb3RhdGUgaWNvbiBpZiBzZXRcbiAgICAgICAgaWYgKGl0ZW0uaWNvbkVsKSB7XG4gICAgICAgICAgICBpdGVtLmljb25FbC5jbGFzc0xpc3QucmVtb3ZlKCdyb3RhdGUtMTgwJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uT3Blbih0aGlzLCBpdGVtKTtcbiAgICB9XG5cbiAgICB0b2dnbGUoaWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5nZXRJdGVtKGlkKTtcblxuICAgICAgICBpZiAoaXRlbS5hY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vcGVuKGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25Ub2dnbGUodGhpcywgaXRlbSk7XG4gICAgfVxuXG4gICAgY2xvc2UoaWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5nZXRJdGVtKGlkKTtcblxuICAgICAgICBpdGVtLnRyaWdnZXJFbC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICAgICAgLi4udGhpcy5fb3B0aW9ucy5hY3RpdmVDbGFzc2VzLnNwbGl0KCcgJylcbiAgICAgICAgKTtcbiAgICAgICAgaXRlbS50cmlnZ2VyRWwuY2xhc3NMaXN0LmFkZChcbiAgICAgICAgICAgIC4uLnRoaXMuX29wdGlvbnMuaW5hY3RpdmVDbGFzc2VzLnNwbGl0KCcgJylcbiAgICAgICAgKTtcbiAgICAgICAgaXRlbS50YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgaXRlbS50cmlnZ2VyRWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgIGl0ZW0uYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gcm90YXRlIGljb24gaWYgc2V0XG4gICAgICAgIGlmIChpdGVtLmljb25FbCkge1xuICAgICAgICAgICAgaXRlbS5pY29uRWwuY2xhc3NMaXN0LmFkZCgncm90YXRlLTE4MCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkNsb3NlKHRoaXMsIGl0ZW0pO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uT3BlbihjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uT3BlbiA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uQ2xvc2UoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkNsb3NlID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgdXBkYXRlT25Ub2dnbGUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblRvZ2dsZSA9IGNhbGxiYWNrO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRBY2NvcmRpb25zKCkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWFjY29yZGlvbl0nKS5mb3JFYWNoKCgkYWNjb3JkaW9uRWwpID0+IHtcbiAgICAgICAgY29uc3QgYWx3YXlzT3BlbiA9ICRhY2NvcmRpb25FbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYWNjb3JkaW9uJyk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUNsYXNzZXMgPSAkYWNjb3JkaW9uRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWFjdGl2ZS1jbGFzc2VzJyk7XG4gICAgICAgIGNvbnN0IGluYWN0aXZlQ2xhc3NlcyA9ICRhY2NvcmRpb25FbC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAnZGF0YS1pbmFjdGl2ZS1jbGFzc2VzJ1xuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW10gYXMgQWNjb3JkaW9uSXRlbVtdO1xuICAgICAgICAkYWNjb3JkaW9uRWxcbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1hY2NvcmRpb24tdGFyZ2V0XScpXG4gICAgICAgICAgICAuZm9yRWFjaCgoJHRyaWdnZXJFbCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIENvbnNpZGVyIG9ubHkgaXRlbXMgdGhhdCBkaXJlY3RseSBiZWxvbmcgdG8gJGFjY29yZGlvbkVsXG4gICAgICAgICAgICAgICAgLy8gKHRvIG1ha2UgbmVzdGVkIGFjY29yZGlvbnMgd29yaykuXG4gICAgICAgICAgICAgICAgaWYgKCR0cmlnZ2VyRWwuY2xvc2VzdCgnW2RhdGEtYWNjb3JkaW9uXScpID09PSAkYWNjb3JkaW9uRWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1hY2NvcmRpb24tdGFyZ2V0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyRWw6ICR0cmlnZ2VyRWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1hY2NvcmRpb24tdGFyZ2V0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uRWw6ICR0cmlnZ2VyRWwucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnW2RhdGEtYWNjb3JkaW9uLWljb25dJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpID09PSAndHJ1ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0gYXMgQWNjb3JkaW9uSXRlbTtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBuZXcgQWNjb3JkaW9uKCRhY2NvcmRpb25FbCBhcyBIVE1MRWxlbWVudCwgaXRlbXMsIHtcbiAgICAgICAgICAgIGFsd2F5c09wZW46IGFsd2F5c09wZW4gPT09ICdvcGVuJyA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgIGFjdGl2ZUNsYXNzZXM6IGFjdGl2ZUNsYXNzZXNcbiAgICAgICAgICAgICAgICA/IGFjdGl2ZUNsYXNzZXNcbiAgICAgICAgICAgICAgICA6IERlZmF1bHQuYWN0aXZlQ2xhc3NlcyxcbiAgICAgICAgICAgIGluYWN0aXZlQ2xhc3NlczogaW5hY3RpdmVDbGFzc2VzXG4gICAgICAgICAgICAgICAgPyBpbmFjdGl2ZUNsYXNzZXNcbiAgICAgICAgICAgICAgICA6IERlZmF1bHQuaW5hY3RpdmVDbGFzc2VzLFxuICAgICAgICB9IGFzIEFjY29yZGlvbk9wdGlvbnMpO1xuICAgIH0pO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuQWNjb3JkaW9uID0gQWNjb3JkaW9uO1xuICAgIHdpbmRvdy5pbml0QWNjb3JkaW9ucyA9IGluaXRBY2NvcmRpb25zO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBY2NvcmRpb247XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uICovXG5pbXBvcnQgdHlwZSB7XG4gICAgQ2Fyb3VzZWxPcHRpb25zLFxuICAgIENhcm91c2VsSXRlbSxcbiAgICBJbmRpY2F0b3JJdGVtLFxuICAgIFJvdGF0aW9uSXRlbXMsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBJbnN0YW5jZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9kb20vdHlwZXMnO1xuaW1wb3J0IHsgQ2Fyb3VzZWxJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgaW5zdGFuY2VzIGZyb20gJy4uLy4uL2RvbS9pbnN0YW5jZXMnO1xuXG5jb25zdCBEZWZhdWx0OiBDYXJvdXNlbE9wdGlvbnMgPSB7XG4gICAgZGVmYXVsdFBvc2l0aW9uOiAwLFxuICAgIGluZGljYXRvcnM6IHtcbiAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICBhY3RpdmVDbGFzc2VzOiAnYmctd2hpdGUgZGFyazpiZy1ncmF5LTgwMCcsXG4gICAgICAgIGluYWN0aXZlQ2xhc3NlczpcbiAgICAgICAgICAgICdiZy13aGl0ZS81MCBkYXJrOmJnLWdyYXktODAwLzUwIGhvdmVyOmJnLXdoaXRlIGRhcms6aG92ZXI6YmctZ3JheS04MDAnLFxuICAgIH0sXG4gICAgaW50ZXJ2YWw6IDMwMDAsXG4gICAgb25OZXh0OiAoKSA9PiB7fSxcbiAgICBvblByZXY6ICgpID0+IHt9LFxuICAgIG9uQ2hhbmdlOiAoKSA9PiB7fSxcbn07XG5cbmNvbnN0IERlZmF1bHRJbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IHtcbiAgICBpZDogbnVsbCxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmNsYXNzIENhcm91c2VsIGltcGxlbWVudHMgQ2Fyb3VzZWxJbnRlcmZhY2Uge1xuICAgIF9pbnN0YW5jZUlkOiBzdHJpbmc7XG4gICAgX2Nhcm91c2VsRWw6IEhUTUxFbGVtZW50O1xuICAgIF9pdGVtczogQ2Fyb3VzZWxJdGVtW107XG4gICAgX2luZGljYXRvcnM6IEluZGljYXRvckl0ZW1bXTtcbiAgICBfYWN0aXZlSXRlbTogQ2Fyb3VzZWxJdGVtO1xuICAgIF9pbnRlcnZhbER1cmF0aW9uOiBudW1iZXI7XG4gICAgX2ludGVydmFsSW5zdGFuY2U6IG51bWJlcjtcbiAgICBfb3B0aW9uczogQ2Fyb3VzZWxPcHRpb25zO1xuICAgIF9pbml0aWFsaXplZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBjYXJvdXNlbEVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBpdGVtczogQ2Fyb3VzZWxJdGVtW10gPSBbXSxcbiAgICAgICAgb3B0aW9uczogQ2Fyb3VzZWxPcHRpb25zID0gRGVmYXVsdCxcbiAgICAgICAgaW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSBEZWZhdWx0SW5zdGFuY2VPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlSWQgPSBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgID8gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA6IGNhcm91c2VsRWwuaWQ7XG4gICAgICAgIHRoaXMuX2Nhcm91c2VsRWwgPSBjYXJvdXNlbEVsO1xuICAgICAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0ge1xuICAgICAgICAgICAgLi4uRGVmYXVsdCxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBpbmRpY2F0b3JzOiB7IC4uLkRlZmF1bHQuaW5kaWNhdG9ycywgLi4ub3B0aW9ucy5pbmRpY2F0b3JzIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2FjdGl2ZUl0ZW0gPSB0aGlzLmdldEl0ZW0odGhpcy5fb3B0aW9ucy5kZWZhdWx0UG9zaXRpb24pO1xuICAgICAgICB0aGlzLl9pbmRpY2F0b3JzID0gdGhpcy5fb3B0aW9ucy5pbmRpY2F0b3JzLml0ZW1zO1xuICAgICAgICB0aGlzLl9pbnRlcnZhbER1cmF0aW9uID0gdGhpcy5fb3B0aW9ucy5pbnRlcnZhbDtcbiAgICAgICAgdGhpcy5faW50ZXJ2YWxJbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICBpbnN0YW5jZXMuYWRkSW5zdGFuY2UoXG4gICAgICAgICAgICAnQ2Fyb3VzZWwnLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbml0aWFsaXplIGNhcm91c2VsIGFuZCBpdGVtcyBiYXNlZCBvbiBhY3RpdmUgb25lXG4gICAgICovXG4gICAgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2l0ZW1zLmxlbmd0aCAmJiAhdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2l0ZW1zLm1hcCgoaXRlbTogQ2Fyb3VzZWxJdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5lbC5jbGFzc0xpc3QuYWRkKFxuICAgICAgICAgICAgICAgICAgICAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgICAgICAnaW5zZXQtMCcsXG4gICAgICAgICAgICAgICAgICAgICd0cmFuc2l0aW9uLXRyYW5zZm9ybScsXG4gICAgICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBpZiBubyBhY3RpdmUgaXRlbSBpcyBzZXQgdGhlbiBmaXJzdCBwb3NpdGlvbiBpcyBkZWZhdWx0XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRBY3RpdmVJdGVtKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNsaWRlVG8odGhpcy5nZXRBY3RpdmVJdGVtKCkucG9zaXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNsaWRlVG8oMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2luZGljYXRvcnMubWFwKChpbmRpY2F0b3IsIHBvc2l0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgaW5kaWNhdG9yLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWRlVG8ocG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICBpbnN0YW5jZXMucmVtb3ZlSW5zdGFuY2UoJ0Nhcm91c2VsJywgdGhpcy5faW5zdGFuY2VJZCk7XG4gICAgfVxuXG4gICAgZGVzdHJveUFuZFJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIGdldEl0ZW0ocG9zaXRpb246IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5faXRlbXNbcG9zaXRpb25dO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNsaWRlIHRvIHRoZSBlbGVtZW50IGJhc2VkIG9uIGlkXG4gICAgICogQHBhcmFtIHsqfSBwb3NpdGlvblxuICAgICAqL1xuICAgIHNsaWRlVG8ocG9zaXRpb246IG51bWJlcikge1xuICAgICAgICBjb25zdCBuZXh0SXRlbTogQ2Fyb3VzZWxJdGVtID0gdGhpcy5faXRlbXNbcG9zaXRpb25dO1xuICAgICAgICBjb25zdCByb3RhdGlvbkl0ZW1zOiBSb3RhdGlvbkl0ZW1zID0ge1xuICAgICAgICAgICAgbGVmdDpcbiAgICAgICAgICAgICAgICBuZXh0SXRlbS5wb3NpdGlvbiA9PT0gMFxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuX2l0ZW1zW3RoaXMuX2l0ZW1zLmxlbmd0aCAtIDFdXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5faXRlbXNbbmV4dEl0ZW0ucG9zaXRpb24gLSAxXSxcbiAgICAgICAgICAgIG1pZGRsZTogbmV4dEl0ZW0sXG4gICAgICAgICAgICByaWdodDpcbiAgICAgICAgICAgICAgICBuZXh0SXRlbS5wb3NpdGlvbiA9PT0gdGhpcy5faXRlbXMubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuX2l0ZW1zWzBdXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5faXRlbXNbbmV4dEl0ZW0ucG9zaXRpb24gKyAxXSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcm90YXRlKHJvdGF0aW9uSXRlbXMpO1xuICAgICAgICB0aGlzLl9zZXRBY3RpdmVJdGVtKG5leHRJdGVtKTtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVydmFsSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgICAgIHRoaXMuY3ljbGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25DaGFuZ2UodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmFzZWQgb24gdGhlIGN1cnJlbnRseSBhY3RpdmUgaXRlbSBpdCB3aWxsIGdvIHRvIHRoZSBuZXh0IHBvc2l0aW9uXG4gICAgICovXG4gICAgbmV4dCgpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlSXRlbSA9IHRoaXMuZ2V0QWN0aXZlSXRlbSgpO1xuICAgICAgICBsZXQgbmV4dEl0ZW0gPSBudWxsO1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIGxhc3QgaXRlbVxuICAgICAgICBpZiAoYWN0aXZlSXRlbS5wb3NpdGlvbiA9PT0gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgbmV4dEl0ZW0gPSB0aGlzLl9pdGVtc1swXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHRJdGVtID0gdGhpcy5faXRlbXNbYWN0aXZlSXRlbS5wb3NpdGlvbiArIDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zbGlkZVRvKG5leHRJdGVtLnBvc2l0aW9uKTtcblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uTmV4dCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCYXNlZCBvbiB0aGUgY3VycmVudGx5IGFjdGl2ZSBpdGVtIGl0IHdpbGwgZ28gdG8gdGhlIHByZXZpb3VzIHBvc2l0aW9uXG4gICAgICovXG4gICAgcHJldigpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlSXRlbSA9IHRoaXMuZ2V0QWN0aXZlSXRlbSgpO1xuICAgICAgICBsZXQgcHJldkl0ZW0gPSBudWxsO1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIGZpcnN0IGl0ZW1cbiAgICAgICAgaWYgKGFjdGl2ZUl0ZW0ucG9zaXRpb24gPT09IDApIHtcbiAgICAgICAgICAgIHByZXZJdGVtID0gdGhpcy5faXRlbXNbdGhpcy5faXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcmV2SXRlbSA9IHRoaXMuX2l0ZW1zW2FjdGl2ZUl0ZW0ucG9zaXRpb24gLSAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2xpZGVUbyhwcmV2SXRlbS5wb3NpdGlvbik7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblByZXYodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgYXBwbGllcyB0aGUgdHJhbnNmb3JtIGNsYXNzZXMgYmFzZWQgb24gdGhlIGxlZnQsIG1pZGRsZSwgYW5kIHJpZ2h0IHJvdGF0aW9uIGNhcm91c2VsIGl0ZW1zXG4gICAgICogQHBhcmFtIHsqfSByb3RhdGlvbkl0ZW1zXG4gICAgICovXG4gICAgX3JvdGF0ZShyb3RhdGlvbkl0ZW1zOiBSb3RhdGlvbkl0ZW1zKSB7XG4gICAgICAgIC8vIHJlc2V0XG4gICAgICAgIHRoaXMuX2l0ZW1zLm1hcCgoaXRlbTogQ2Fyb3VzZWxJdGVtKSA9PiB7XG4gICAgICAgICAgICBpdGVtLmVsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBIYW5kbGluZyB0aGUgY2FzZSB3aGVuIHRoZXJlIGlzIG9ubHkgb25lIGl0ZW1cbiAgICAgICAgaWYgKHRoaXMuX2l0ZW1zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcm90YXRpb25JdGVtcy5taWRkbGUuZWwuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgICAgICAgICAgICAnLXRyYW5zbGF0ZS14LWZ1bGwnLFxuICAgICAgICAgICAgICAgICd0cmFuc2xhdGUteC1mdWxsJyxcbiAgICAgICAgICAgICAgICAndHJhbnNsYXRlLXgtMCcsXG4gICAgICAgICAgICAgICAgJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgJ3otMTAnXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcm90YXRpb25JdGVtcy5taWRkbGUuZWwuY2xhc3NMaXN0LmFkZCgndHJhbnNsYXRlLXgtMCcsICd6LTIwJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsZWZ0IGl0ZW0gKHByZXZpb3VzbHkgYWN0aXZlKVxuICAgICAgICByb3RhdGlvbkl0ZW1zLmxlZnQuZWwuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgICAgICAgICctdHJhbnNsYXRlLXgtZnVsbCcsXG4gICAgICAgICAgICAndHJhbnNsYXRlLXgtZnVsbCcsXG4gICAgICAgICAgICAndHJhbnNsYXRlLXgtMCcsXG4gICAgICAgICAgICAnaGlkZGVuJyxcbiAgICAgICAgICAgICd6LTIwJ1xuICAgICAgICApO1xuXG4gICAgICAgIHJvdGF0aW9uSXRlbXMubGVmdC5lbC5jbGFzc0xpc3QuYWRkKCctdHJhbnNsYXRlLXgtZnVsbCcsICd6LTEwJyk7XG5cbiAgICAgICAgLy8gY3VycmVudGx5IGFjdGl2ZSBpdGVtXG4gICAgICAgIHJvdGF0aW9uSXRlbXMubWlkZGxlLmVsLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICAnLXRyYW5zbGF0ZS14LWZ1bGwnLFxuICAgICAgICAgICAgJ3RyYW5zbGF0ZS14LWZ1bGwnLFxuICAgICAgICAgICAgJ3RyYW5zbGF0ZS14LTAnLFxuICAgICAgICAgICAgJ2hpZGRlbicsXG4gICAgICAgICAgICAnei0xMCdcbiAgICAgICAgKTtcbiAgICAgICAgcm90YXRpb25JdGVtcy5taWRkbGUuZWwuY2xhc3NMaXN0LmFkZCgndHJhbnNsYXRlLXgtMCcsICd6LTMwJyk7XG5cbiAgICAgICAgLy8gcmlnaHQgaXRlbSAodXBjb21pbmcgYWN0aXZlKVxuICAgICAgICByb3RhdGlvbkl0ZW1zLnJpZ2h0LmVsLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICAnLXRyYW5zbGF0ZS14LWZ1bGwnLFxuICAgICAgICAgICAgJ3RyYW5zbGF0ZS14LWZ1bGwnLFxuICAgICAgICAgICAgJ3RyYW5zbGF0ZS14LTAnLFxuICAgICAgICAgICAgJ2hpZGRlbicsXG4gICAgICAgICAgICAnei0zMCdcbiAgICAgICAgKTtcbiAgICAgICAgcm90YXRpb25JdGVtcy5yaWdodC5lbC5jbGFzc0xpc3QuYWRkKCd0cmFuc2xhdGUteC1mdWxsJywgJ3otMjAnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgYW4gaW50ZXJ2YWwgdG8gY3ljbGUgdGhyb3VnaCB0aGUgY2Fyb3VzZWwgaXRlbXNcbiAgICAgKi9cbiAgICBjeWNsZSgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcnZhbEluc3RhbmNlID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgIH0sIHRoaXMuX2ludGVydmFsRHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBjeWNsaW5nIGludGVydmFsXG4gICAgICovXG4gICAgcGF1c2UoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWxJbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50bHkgYWN0aXZlIGl0ZW1cbiAgICAgKi9cbiAgICBnZXRBY3RpdmVJdGVtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlSXRlbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgaXRlbSBhbmQgZGF0YSBhdHRyaWJ1dGVcbiAgICAgKiBAcGFyYW0geyp9IHBvc2l0aW9uXG4gICAgICovXG4gICAgX3NldEFjdGl2ZUl0ZW0oaXRlbTogQ2Fyb3VzZWxJdGVtKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZUl0ZW0gPSBpdGVtO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGl0ZW0ucG9zaXRpb247XG5cbiAgICAgICAgLy8gdXBkYXRlIHRoZSBpbmRpY2F0b3JzIGlmIGF2YWlsYWJsZVxuICAgICAgICBpZiAodGhpcy5faW5kaWNhdG9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2luZGljYXRvcnMubWFwKChpbmRpY2F0b3IpID0+IHtcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3IuZWwuc2V0QXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3IuZWwuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5fb3B0aW9ucy5pbmRpY2F0b3JzLmFjdGl2ZUNsYXNzZXMuc3BsaXQoJyAnKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaW5kaWNhdG9yLmVsLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuX29wdGlvbnMuaW5kaWNhdG9ycy5pbmFjdGl2ZUNsYXNzZXMuc3BsaXQoJyAnKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX2luZGljYXRvcnNbcG9zaXRpb25dLmVsLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgICAgICAgICAgLi4udGhpcy5fb3B0aW9ucy5pbmRpY2F0b3JzLmFjdGl2ZUNsYXNzZXMuc3BsaXQoJyAnKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuX2luZGljYXRvcnNbcG9zaXRpb25dLmVsLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICAgICAgLi4udGhpcy5fb3B0aW9ucy5pbmRpY2F0b3JzLmluYWN0aXZlQ2xhc3Nlcy5zcGxpdCgnICcpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5faW5kaWNhdG9yc1twb3NpdGlvbl0uZWwuc2V0QXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnLCAndHJ1ZScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlT25OZXh0KGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25OZXh0ID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgdXBkYXRlT25QcmV2KGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25QcmV2ID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgdXBkYXRlT25DaGFuZ2UoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkNoYW5nZSA9IGNhbGxiYWNrO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRDYXJvdXNlbHMoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY2Fyb3VzZWxdJykuZm9yRWFjaCgoJGNhcm91c2VsRWwpID0+IHtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSAkY2Fyb3VzZWxFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2Fyb3VzZWwtaW50ZXJ2YWwnKTtcbiAgICAgICAgY29uc3Qgc2xpZGUgPVxuICAgICAgICAgICAgJGNhcm91c2VsRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWNhcm91c2VsJykgPT09ICdzbGlkZSdcbiAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICA6IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IGl0ZW1zOiBDYXJvdXNlbEl0ZW1bXSA9IFtdO1xuICAgICAgICBsZXQgZGVmYXVsdFBvc2l0aW9uID0gMDtcbiAgICAgICAgaWYgKCRjYXJvdXNlbEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNhcm91c2VsLWl0ZW1dJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBBcnJheS5mcm9tKFxuICAgICAgICAgICAgICAgICRjYXJvdXNlbEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNhcm91c2VsLWl0ZW1dJylcbiAgICAgICAgICAgICkubWFwKCgkY2Fyb3VzZWxJdGVtRWw6IEhUTUxFbGVtZW50LCBwb3NpdGlvbjogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgZWw6ICRjYXJvdXNlbEl0ZW1FbCxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgJGNhcm91c2VsSXRlbUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1jYXJvdXNlbC1pdGVtJykgPT09XG4gICAgICAgICAgICAgICAgICAgICdhY3RpdmUnXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW5kaWNhdG9yczogSW5kaWNhdG9ySXRlbVtdID0gW107XG4gICAgICAgIGlmICgkY2Fyb3VzZWxFbC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1jYXJvdXNlbC1zbGlkZS10b10nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIEFycmF5LmZyb20oXG4gICAgICAgICAgICAgICAgJGNhcm91c2VsRWwucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY2Fyb3VzZWwtc2xpZGUtdG9dJylcbiAgICAgICAgICAgICkubWFwKCgkaW5kaWNhdG9yRWw6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaW5kaWNhdG9ycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHBhcnNlSW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJGluZGljYXRvckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1jYXJvdXNlbC1zbGlkZS10bycpXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGVsOiAkaW5kaWNhdG9yRWwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhcm91c2VsID0gbmV3IENhcm91c2VsKCRjYXJvdXNlbEVsIGFzIEhUTUxFbGVtZW50LCBpdGVtcywge1xuICAgICAgICAgICAgZGVmYXVsdFBvc2l0aW9uOiBkZWZhdWx0UG9zaXRpb24sXG4gICAgICAgICAgICBpbmRpY2F0b3JzOiB7XG4gICAgICAgICAgICAgICAgaXRlbXM6IGluZGljYXRvcnMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW50ZXJ2YWw6IGludGVydmFsID8gaW50ZXJ2YWwgOiBEZWZhdWx0LmludGVydmFsLFxuICAgICAgICB9IGFzIENhcm91c2VsT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHNsaWRlKSB7XG4gICAgICAgICAgICBjYXJvdXNlbC5jeWNsZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIGNvbnRyb2xzXG4gICAgICAgIGNvbnN0IGNhcm91c2VsTmV4dEVsID0gJGNhcm91c2VsRWwucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICdbZGF0YS1jYXJvdXNlbC1uZXh0XSdcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgY2Fyb3VzZWxQcmV2RWwgPSAkY2Fyb3VzZWxFbC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgJ1tkYXRhLWNhcm91c2VsLXByZXZdJ1xuICAgICAgICApO1xuXG4gICAgICAgIGlmIChjYXJvdXNlbE5leHRFbCkge1xuICAgICAgICAgICAgY2Fyb3VzZWxOZXh0RWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2Fyb3VzZWwubmV4dCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2Fyb3VzZWxQcmV2RWwpIHtcbiAgICAgICAgICAgIGNhcm91c2VsUHJldkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNhcm91c2VsLnByZXYoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpbmRvdy5DYXJvdXNlbCA9IENhcm91c2VsO1xuICAgIHdpbmRvdy5pbml0Q2Fyb3VzZWxzID0gaW5pdENhcm91c2Vscztcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2Fyb3VzZWw7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uICovXG5pbXBvcnQgdHlwZSB7IENvcHlDbGlwYm9hcmRPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEluc3RhbmNlT3B0aW9ucyB9IGZyb20gJy4uLy4uL2RvbS90eXBlcyc7XG5pbXBvcnQgeyBDb3B5Q2xpcGJvYXJkSW50ZXJmYWNlIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IGluc3RhbmNlcyBmcm9tICcuLi8uLi9kb20vaW5zdGFuY2VzJztcblxuY29uc3QgRGVmYXVsdDogQ29weUNsaXBib2FyZE9wdGlvbnMgPSB7XG4gICAgaHRtbEVudGl0aWVzOiBmYWxzZSxcbiAgICBjb250ZW50VHlwZTogJ2lucHV0JyxcbiAgICBvbkNvcHk6ICgpID0+IHt9LFxufTtcblxuY29uc3QgRGVmYXVsdEluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0ge1xuICAgIGlkOiBudWxsLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuY2xhc3MgQ29weUNsaXBib2FyZCBpbXBsZW1lbnRzIENvcHlDbGlwYm9hcmRJbnRlcmZhY2Uge1xuICAgIF9pbnN0YW5jZUlkOiBzdHJpbmc7XG4gICAgX3RyaWdnZXJFbDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIF90YXJnZXRFbDogSFRNTElucHV0RWxlbWVudCB8IG51bGw7XG4gICAgX29wdGlvbnM6IENvcHlDbGlwYm9hcmRPcHRpb25zO1xuICAgIF9pbml0aWFsaXplZDogYm9vbGVhbjtcbiAgICBfdHJpZ2dlckVsQ2xpY2tIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF9pbnB1dEhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdHJpZ2dlckVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICB0YXJnZXRFbDogSFRNTElucHV0RWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBvcHRpb25zOiBDb3B5Q2xpcGJvYXJkT3B0aW9ucyA9IERlZmF1bHQsXG4gICAgICAgIGluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0gRGVmYXVsdEluc3RhbmNlT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZUlkID0gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA/IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgOiB0YXJnZXRFbC5pZDtcblxuICAgICAgICB0aGlzLl90cmlnZ2VyRWwgPSB0cmlnZ2VyRWw7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsID0gdGFyZ2V0RWw7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB7IC4uLkRlZmF1bHQsIC4uLm9wdGlvbnMgfTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgaW5zdGFuY2VzLmFkZEluc3RhbmNlKFxuICAgICAgICAgICAgJ0NvcHlDbGlwYm9hcmQnLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5fdGFyZ2V0RWwgJiYgdGhpcy5fdHJpZ2dlckVsICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsQ2xpY2tIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY29weSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gY2xpY2tpbmcgb24gdGhlIHRyaWdnZXIgZWxlbWVudCBzaG91bGQgY29weSB0aGUgdmFsdWUgb2YgdGhlIHRhcmdldCBlbGVtZW50XG4gICAgICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbENsaWNrSGFuZGxlclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl90cmlnZ2VyRWwgJiYgdGhpcy5fdGFyZ2V0RWwgJiYgdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl90cmlnZ2VyRWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsQ2xpY2tIYW5kbGVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgaW5zdGFuY2VzLnJlbW92ZUluc3RhbmNlKCdDb3B5Q2xpcGJvYXJkJywgdGhpcy5faW5zdGFuY2VJZCk7XG4gICAgfVxuXG4gICAgZGVzdHJveUFuZFJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIGdldFRhcmdldFZhbHVlKCkge1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5jb250ZW50VHlwZSA9PT0gJ2lucHV0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldEVsLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuY29udGVudFR5cGUgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0RWwuaW5uZXJIVE1MO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuY29udGVudFR5cGUgPT09ICd0ZXh0Q29udGVudCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YXJnZXRFbC50ZXh0Q29udGVudC5yZXBsYWNlKC9cXHMrL2csICcgJykudHJpbSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29weSgpIHtcbiAgICAgICAgbGV0IHRleHRUb0NvcHkgPSB0aGlzLmdldFRhcmdldFZhbHVlKCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgSFRNTEVudGl0aWVzIG9wdGlvbiBpcyBlbmFibGVkXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmh0bWxFbnRpdGllcykge1xuICAgICAgICAgICAgLy8gRW5jb2RlIHRoZSB0ZXh0IHVzaW5nIEhUTUwgZW50aXRpZXNcbiAgICAgICAgICAgIHRleHRUb0NvcHkgPSB0aGlzLmRlY29kZUhUTUwodGV4dFRvQ29weSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYSB0ZW1wb3JhcnkgdGV4dGFyZWEgZWxlbWVudFxuICAgICAgICBjb25zdCB0ZW1wVGV4dEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgICAgICB0ZW1wVGV4dEFyZWEudmFsdWUgPSB0ZXh0VG9Db3B5O1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRlbXBUZXh0QXJlYSk7XG5cbiAgICAgICAgLy8gU2VsZWN0IHRoZSB0ZXh0IGluc2lkZSB0aGUgdGV4dGFyZWEgYW5kIGNvcHkgaXQgdG8gdGhlIGNsaXBib2FyZFxuICAgICAgICB0ZW1wVGV4dEFyZWEuc2VsZWN0KCk7XG4gICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRoZSB0ZW1wb3JhcnkgdGV4dGFyZWFcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0ZW1wVGV4dEFyZWEpO1xuXG4gICAgICAgIC8vIENhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25Db3B5KHRoaXMpO1xuXG4gICAgICAgIHJldHVybiB0ZXh0VG9Db3B5O1xuICAgIH1cblxuICAgIC8vIEZ1bmN0aW9uIHRvIGVuY29kZSB0ZXh0IGludG8gSFRNTCBlbnRpdGllc1xuICAgIGRlY29kZUhUTUwoaHRtbDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHRleHRhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgICAgdGV4dGFyZWEuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgcmV0dXJuIHRleHRhcmVhLnRleHRDb250ZW50O1xuICAgIH1cblxuICAgIHVwZGF0ZU9uQ29weUNhbGxiYWNrKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25Db3B5ID0gY2FsbGJhY2s7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdENvcHlDbGlwYm9hcmRzKCkge1xuICAgIGRvY3VtZW50XG4gICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1jb3B5LXRvLWNsaXBib2FyZC10YXJnZXRdJylcbiAgICAgICAgLmZvckVhY2goKCR0cmlnZ2VyRWwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldElkID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgJ2RhdGEtY29weS10by1jbGlwYm9hcmQtdGFyZ2V0J1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0ICR0YXJnZXRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldElkKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgJ2RhdGEtY29weS10by1jbGlwYm9hcmQtY29udGVudC10eXBlJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IGh0bWxFbnRpdGllcyA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICdkYXRhLWNvcHktdG8tY2xpcGJvYXJkLWh0bWwtZW50aXRpZXMnXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgZXhpc3RzXG4gICAgICAgICAgICBpZiAoJHRhcmdldEVsKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAhaW5zdGFuY2VzLmluc3RhbmNlRXhpc3RzKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvcHlDbGlwYm9hcmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldEVsLmdldEF0dHJpYnV0ZSgnaWQnKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb3B5Q2xpcGJvYXJkKFxuICAgICAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRFbCBhcyBIVE1MSW5wdXRFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxFbnRpdGllczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbEVudGl0aWVzICYmIGh0bWxFbnRpdGllcyA9PT0gJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogRGVmYXVsdC5odG1sRW50aXRpZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6IGNvbnRlbnRUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY29udGVudFR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBEZWZhdWx0LmNvbnRlbnRUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBhcyBDb3B5Q2xpcGJvYXJkT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgYFRoZSB0YXJnZXQgZWxlbWVudCB3aXRoIGlkIFwiJHt0YXJnZXRJZH1cIiBkb2VzIG5vdCBleGlzdC4gUGxlYXNlIGNoZWNrIHRoZSBkYXRhLWNvcHktdG8tY2xpcGJvYXJkLXRhcmdldCBhdHRyaWJ1dGUuYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuQ29weUNsaXBib2FyZCA9IENvcHlDbGlwYm9hcmQ7XG4gICAgd2luZG93LmluaXRDbGlwYm9hcmRzID0gaW5pdENvcHlDbGlwYm9hcmRzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDb3B5Q2xpcGJvYXJkO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiAqL1xuaW1wb3J0IHR5cGUgeyBDb2xsYXBzZU9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSW5zdGFuY2VPcHRpb25zIH0gZnJvbSAnLi4vLi4vZG9tL3R5cGVzJztcbmltcG9ydCB7IENvbGxhcHNlSW50ZXJmYWNlIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IGluc3RhbmNlcyBmcm9tICcuLi8uLi9kb20vaW5zdGFuY2VzJztcblxuY29uc3QgRGVmYXVsdDogQ29sbGFwc2VPcHRpb25zID0ge1xuICAgIG9uQ29sbGFwc2U6ICgpID0+IHt9LFxuICAgIG9uRXhwYW5kOiAoKSA9PiB7fSxcbiAgICBvblRvZ2dsZTogKCkgPT4ge30sXG59O1xuXG5jb25zdCBEZWZhdWx0SW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSB7XG4gICAgaWQ6IG51bGwsXG4gICAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5jbGFzcyBDb2xsYXBzZSBpbXBsZW1lbnRzIENvbGxhcHNlSW50ZXJmYWNlIHtcbiAgICBfaW5zdGFuY2VJZDogc3RyaW5nO1xuICAgIF90YXJnZXRFbDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIF90cmlnZ2VyRWw6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBfb3B0aW9uczogQ29sbGFwc2VPcHRpb25zO1xuICAgIF92aXNpYmxlOiBib29sZWFuO1xuICAgIF9pbml0aWFsaXplZDogYm9vbGVhbjtcbiAgICBfY2xpY2tIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHRhcmdldEVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICB0cmlnZ2VyRWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIG9wdGlvbnM6IENvbGxhcHNlT3B0aW9ucyA9IERlZmF1bHQsXG4gICAgICAgIGluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0gRGVmYXVsdEluc3RhbmNlT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZUlkID0gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA/IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgOiB0YXJnZXRFbC5pZDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwgPSB0YXJnZXRFbDtcbiAgICAgICAgdGhpcy5fdHJpZ2dlckVsID0gdHJpZ2dlckVsO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIGluc3RhbmNlcy5hZGRJbnN0YW5jZShcbiAgICAgICAgICAgICdDb2xsYXBzZScsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGluc3RhbmNlT3B0aW9ucy5vdmVycmlkZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl90cmlnZ2VyRWwgJiYgdGhpcy5fdGFyZ2V0RWwgJiYgIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsLmhhc0F0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmlzaWJsZSA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ3RydWUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBmaXggdW50aWwgdjIgbm90IHRvIGJyZWFrIHByZXZpb3VzIHNpbmdsZSBjb2xsYXBzZXMgd2hpY2ggYmVjYW1lIGRpc21pc3NcbiAgICAgICAgICAgICAgICB0aGlzLl92aXNpYmxlID0gIXRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2NsaWNrSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fY2xpY2tIYW5kbGVyKTtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl90cmlnZ2VyRWwgJiYgdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2NsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIGluc3RhbmNlcy5yZW1vdmVJbnN0YW5jZSgnQ29sbGFwc2UnLCB0aGlzLl9pbnN0YW5jZUlkKTtcbiAgICB9XG5cbiAgICBkZXN0cm95QW5kUmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnJlbW92ZUluc3RhbmNlKCk7XG4gICAgfVxuXG4gICAgY29sbGFwc2UoKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsKSB7XG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25Db2xsYXBzZSh0aGlzKTtcbiAgICB9XG5cbiAgICBleHBhbmQoKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsKSB7XG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92aXNpYmxlID0gdHJ1ZTtcblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uRXhwYW5kKHRoaXMpO1xuICAgIH1cblxuICAgIHRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Zpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuY29sbGFwc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZXhwYW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblRvZ2dsZSh0aGlzKTtcbiAgICB9XG5cbiAgICB1cGRhdGVPbkNvbGxhcHNlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25Db2xsYXBzZSA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uRXhwYW5kKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25FeHBhbmQgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPblRvZ2dsZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uVG9nZ2xlID0gY2FsbGJhY2s7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdENvbGxhcHNlcygpIHtcbiAgICBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY29sbGFwc2UtdG9nZ2xlXScpXG4gICAgICAgIC5mb3JFYWNoKCgkdHJpZ2dlckVsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRJZCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbGxhcHNlLXRvZ2dsZScpO1xuICAgICAgICAgICAgY29uc3QgJHRhcmdldEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0SWQpO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgZXhpc3RzXG4gICAgICAgICAgICBpZiAoJHRhcmdldEVsKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAhaW5zdGFuY2VzLmluc3RhbmNlRXhpc3RzKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbGxhcHNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRFbC5nZXRBdHRyaWJ1dGUoJ2lkJylcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBuZXcgQ29sbGFwc2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0RWwgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsIGFzIEhUTUxFbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgaW5zdGFuY2UgZXhpc3RzIGFscmVhZHkgZm9yIHRoZSBzYW1lIHRhcmdldCBlbGVtZW50IHRoZW4gY3JlYXRlIGEgbmV3IG9uZSB3aXRoIGEgZGlmZmVyZW50IHRyaWdnZXIgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29sbGFwc2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0RWwgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRFbC5nZXRBdHRyaWJ1dGUoJ2lkJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZXMuX2dlbmVyYXRlUmFuZG9tSWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBUaGUgdGFyZ2V0IGVsZW1lbnQgd2l0aCBpZCBcIiR7dGFyZ2V0SWR9XCIgZG9lcyBub3QgZXhpc3QuIFBsZWFzZSBjaGVjayB0aGUgZGF0YS1jb2xsYXBzZS10b2dnbGUgYXR0cmlidXRlLmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LkNvbGxhcHNlID0gQ29sbGFwc2U7XG4gICAgd2luZG93LmluaXRDb2xsYXBzZXMgPSBpbml0Q29sbGFwc2VzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDb2xsYXBzZTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb24gKi9cbmltcG9ydCB0eXBlIHsgRGF0ZXBpY2tlck9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSW5zdGFuY2VPcHRpb25zIH0gZnJvbSAnLi4vLi4vZG9tL3R5cGVzJztcbmltcG9ydCB7IERhdGVwaWNrZXJJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgaW5zdGFuY2VzIGZyb20gJy4uLy4uL2RvbS9pbnN0YW5jZXMnO1xuXG5pbXBvcnQge1xuICAgIERhdGVwaWNrZXIgYXMgRmxvd2JpdGVEYXRlcGlja2VyLFxuICAgIERhdGVSYW5nZVBpY2tlciBhcyBGbG93Yml0ZURhdGVSYW5nZVBpY2tlcixcbn0gZnJvbSAnZmxvd2JpdGUtZGF0ZXBpY2tlcic7XG5cbmNvbnN0IERlZmF1bHQ6IERhdGVwaWNrZXJPcHRpb25zID0ge1xuICAgIGRlZmF1bHREYXRlcGlja2VySWQ6IG51bGwsXG4gICAgYXV0b2hpZGU6IGZhbHNlLFxuICAgIGZvcm1hdDogJ21tL2RkL3l5eXknLFxuICAgIG1heERhdGU6IG51bGwsXG4gICAgbWluRGF0ZTogbnVsbCxcbiAgICBvcmllbnRhdGlvbjogJ2JvdHRvbScsXG4gICAgYnV0dG9uczogZmFsc2UsXG4gICAgYXV0b1NlbGVjdFRvZGF5OiAwLFxuICAgIHRpdGxlOiBudWxsLFxuICAgIGxhbmd1YWdlOiAnZW4nLFxuICAgIHJhbmdlUGlja2VyOiBmYWxzZSxcbiAgICBvblNob3c6ICgpID0+IHt9LFxuICAgIG9uSGlkZTogKCkgPT4ge30sXG59O1xuXG5jb25zdCBEZWZhdWx0SW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSB7XG4gICAgaWQ6IG51bGwsXG4gICAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5jbGFzcyBEYXRlcGlja2VyIGltcGxlbWVudHMgRGF0ZXBpY2tlckludGVyZmFjZSB7XG4gICAgX2luc3RhbmNlSWQ6IHN0cmluZztcbiAgICBfZGF0ZXBpY2tlckVsOiBIVE1MRWxlbWVudDtcbiAgICBfZGF0ZXBpY2tlckluc3RhbmNlOiBGbG93Yml0ZURhdGVwaWNrZXIgfCBGbG93Yml0ZURhdGVSYW5nZVBpY2tlciB8IG51bGw7XG4gICAgX29wdGlvbnM6IERhdGVwaWNrZXJPcHRpb25zO1xuICAgIF9pbml0aWFsaXplZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBkYXRlcGlja2VyRWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIG9wdGlvbnM6IERhdGVwaWNrZXJPcHRpb25zID0gRGVmYXVsdCxcbiAgICAgICAgaW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSBEZWZhdWx0SW5zdGFuY2VPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlSWQgPSBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgID8gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA6IGRhdGVwaWNrZXJFbC5pZDtcbiAgICAgICAgdGhpcy5fZGF0ZXBpY2tlckVsID0gZGF0ZXBpY2tlckVsO1xuICAgICAgICB0aGlzLl9kYXRlcGlja2VySW5zdGFuY2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICBpbnN0YW5jZXMuYWRkSW5zdGFuY2UoXG4gICAgICAgICAgICAnRGF0ZXBpY2tlcicsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGluc3RhbmNlT3B0aW9ucy5vdmVycmlkZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kYXRlcGlja2VyRWwgJiYgIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5yYW5nZVBpY2tlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGVwaWNrZXJJbnN0YW5jZSA9IG5ldyBGbG93Yml0ZURhdGVSYW5nZVBpY2tlcihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGF0ZXBpY2tlckVsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXREYXRlcGlja2VyT3B0aW9ucyh0aGlzLl9vcHRpb25zKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGVwaWNrZXJJbnN0YW5jZSA9IG5ldyBGbG93Yml0ZURhdGVwaWNrZXIoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RhdGVwaWNrZXJFbCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0RGF0ZXBpY2tlck9wdGlvbnModGhpcy5fb3B0aW9ucylcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9kYXRlcGlja2VySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICBpbnN0YW5jZXMucmVtb3ZlSW5zdGFuY2UoJ0RhdGVwaWNrZXInLCB0aGlzLl9pbnN0YW5jZUlkKTtcbiAgICB9XG5cbiAgICBkZXN0cm95QW5kUmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnJlbW92ZUluc3RhbmNlKCk7XG4gICAgfVxuXG4gICAgZ2V0RGF0ZXBpY2tlckluc3RhbmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0ZXBpY2tlckluc3RhbmNlO1xuICAgIH1cblxuICAgIGdldERhdGUoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmFuZ2VQaWNrZXIgJiZcbiAgICAgICAgICAgIHRoaXMuX2RhdGVwaWNrZXJJbnN0YW5jZSBpbnN0YW5jZW9mIEZsb3diaXRlRGF0ZVJhbmdlUGlja2VyXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGVwaWNrZXJJbnN0YW5jZS5nZXREYXRlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXRoaXMuX29wdGlvbnMucmFuZ2VQaWNrZXIgJiZcbiAgICAgICAgICAgIHRoaXMuX2RhdGVwaWNrZXJJbnN0YW5jZSBpbnN0YW5jZW9mIEZsb3diaXRlRGF0ZXBpY2tlclxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRlcGlja2VySW5zdGFuY2UuZ2V0RGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0RGF0ZShkYXRlOiBhbnkpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5yYW5nZVBpY2tlciAmJlxuICAgICAgICAgICAgdGhpcy5fZGF0ZXBpY2tlckluc3RhbmNlIGluc3RhbmNlb2YgRmxvd2JpdGVEYXRlUmFuZ2VQaWNrZXJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0ZXBpY2tlckluc3RhbmNlLnNldERhdGVzKGRhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXRoaXMuX29wdGlvbnMucmFuZ2VQaWNrZXIgJiZcbiAgICAgICAgICAgIHRoaXMuX2RhdGVwaWNrZXJJbnN0YW5jZSBpbnN0YW5jZW9mIEZsb3diaXRlRGF0ZXBpY2tlclxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRlcGlja2VySW5zdGFuY2Uuc2V0RGF0ZShkYXRlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICAgIHRoaXMuX2RhdGVwaWNrZXJJbnN0YW5jZS5zaG93KCk7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25TaG93KHRoaXMpO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuX2RhdGVwaWNrZXJJbnN0YW5jZS5oaWRlKCk7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25IaWRlKHRoaXMpO1xuICAgIH1cblxuICAgIF9nZXREYXRlcGlja2VyT3B0aW9ucyhvcHRpb25zOiBEYXRlcGlja2VyT3B0aW9ucykge1xuICAgICAgICBjb25zdCBkYXRlcGlja2VyT3B0aW9ucyA9IHt9IGFzIGFueTtcblxuICAgICAgICBpZiAob3B0aW9ucy5idXR0b25zKSB7XG4gICAgICAgICAgICBkYXRlcGlja2VyT3B0aW9ucy50b2RheUJ0biA9IHRydWU7XG4gICAgICAgICAgICBkYXRlcGlja2VyT3B0aW9ucy5jbGVhckJ0biA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF1dG9TZWxlY3RUb2RheSkge1xuICAgICAgICAgICAgICAgIGRhdGVwaWNrZXJPcHRpb25zLnRvZGF5QnRuTW9kZSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5hdXRvaGlkZSkge1xuICAgICAgICAgICAgZGF0ZXBpY2tlck9wdGlvbnMuYXV0b2hpZGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuZm9ybWF0KSB7XG4gICAgICAgICAgICBkYXRlcGlja2VyT3B0aW9ucy5mb3JtYXQgPSBvcHRpb25zLmZvcm1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm1heERhdGUpIHtcbiAgICAgICAgICAgIGRhdGVwaWNrZXJPcHRpb25zLm1heERhdGUgPSBvcHRpb25zLm1heERhdGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5taW5EYXRlKSB7XG4gICAgICAgICAgICBkYXRlcGlja2VyT3B0aW9ucy5taW5EYXRlID0gb3B0aW9ucy5taW5EYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMub3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgIGRhdGVwaWNrZXJPcHRpb25zLm9yaWVudGF0aW9uID0gb3B0aW9ucy5vcmllbnRhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnRpdGxlKSB7XG4gICAgICAgICAgICBkYXRlcGlja2VyT3B0aW9ucy50aXRsZSA9IG9wdGlvbnMudGl0bGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5sYW5ndWFnZSkge1xuICAgICAgICAgICAgZGF0ZXBpY2tlck9wdGlvbnMubGFuZ3VhZ2UgPSBvcHRpb25zLmxhbmd1YWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGVwaWNrZXJPcHRpb25zO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uU2hvdyhjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uU2hvdyA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uSGlkZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSGlkZSA9IGNhbGxiYWNrO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXREYXRlcGlja2VycygpIHtcbiAgICBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgICdbZGF0ZXBpY2tlcl0sIFtpbmxpbmUtZGF0ZXBpY2tlcl0sIFtkYXRlLXJhbmdlcGlja2VyXSdcbiAgICAgICAgKVxuICAgICAgICAuZm9yRWFjaCgoJGRhdGVwaWNrZXJFbCkgPT4ge1xuICAgICAgICAgICAgaWYgKCRkYXRlcGlja2VyRWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBidXR0b25zID1cbiAgICAgICAgICAgICAgICAgICAgJGRhdGVwaWNrZXJFbC5oYXNBdHRyaWJ1dGUoJ2RhdGVwaWNrZXItYnV0dG9ucycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF1dG9zZWxlY3RUb2RheSA9ICRkYXRlcGlja2VyRWwuaGFzQXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAnZGF0ZXBpY2tlci1hdXRvc2VsZWN0LXRvZGF5J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3QgYXV0b2hpZGUgPSAkZGF0ZXBpY2tlckVsLmhhc0F0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGVwaWNrZXItYXV0b2hpZGUnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSAkZGF0ZXBpY2tlckVsLmdldEF0dHJpYnV0ZSgnZGF0ZXBpY2tlci1mb3JtYXQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhEYXRlID0gJGRhdGVwaWNrZXJFbC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgICAgICdkYXRlcGlja2VyLW1heC1kYXRlJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWluRGF0ZSA9ICRkYXRlcGlja2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAnZGF0ZXBpY2tlci1taW4tZGF0ZSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWVudGF0aW9uID0gJGRhdGVwaWNrZXJFbC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgICAgICdkYXRlcGlja2VyLW9yaWVudGF0aW9uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSAkZGF0ZXBpY2tlckVsLmdldEF0dHJpYnV0ZSgnZGF0ZXBpY2tlci10aXRsZScpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhbmd1YWdlID0gJGRhdGVwaWNrZXJFbC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgICAgICdkYXRlcGlja2VyLWxhbmd1YWdlJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmFuZ2VQaWNrZXIgPVxuICAgICAgICAgICAgICAgICAgICAkZGF0ZXBpY2tlckVsLmhhc0F0dHJpYnV0ZSgnZGF0ZS1yYW5nZXBpY2tlcicpO1xuICAgICAgICAgICAgICAgIG5ldyBEYXRlcGlja2VyKFxuICAgICAgICAgICAgICAgICAgICAkZGF0ZXBpY2tlckVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zOiBidXR0b25zID8gYnV0dG9ucyA6IERlZmF1bHQuYnV0dG9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9TZWxlY3RUb2RheTogYXV0b3NlbGVjdFRvZGF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhdXRvc2VsZWN0VG9kYXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IERlZmF1bHQuYXV0b1NlbGVjdFRvZGF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b2hpZGU6IGF1dG9oaWRlID8gYXV0b2hpZGUgOiBEZWZhdWx0LmF1dG9oaWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBmb3JtYXQgPyBmb3JtYXQgOiBEZWZhdWx0LmZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heERhdGU6IG1heERhdGUgPyBtYXhEYXRlIDogRGVmYXVsdC5tYXhEYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluRGF0ZTogbWluRGF0ZSA/IG1pbkRhdGUgOiBEZWZhdWx0Lm1pbkRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG9yaWVudGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBEZWZhdWx0Lm9yaWVudGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlID8gdGl0bGUgOiBEZWZhdWx0LnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2U6IGxhbmd1YWdlID8gbGFuZ3VhZ2UgOiBEZWZhdWx0Lmxhbmd1YWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VQaWNrZXI6IHJhbmdlUGlja2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyByYW5nZVBpY2tlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogRGVmYXVsdC5yYW5nZVBpY2tlcixcbiAgICAgICAgICAgICAgICAgICAgfSBhcyBEYXRlcGlja2VyT3B0aW9uc1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBUaGUgZGF0ZXBpY2tlciBlbGVtZW50IGRvZXMgbm90IGV4aXN0LiBQbGVhc2UgY2hlY2sgdGhlIGRhdGVwaWNrZXIgYXR0cmlidXRlLmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LkRhdGVwaWNrZXIgPSBEYXRlcGlja2VyO1xuICAgIHdpbmRvdy5pbml0RGF0ZXBpY2tlcnMgPSBpbml0RGF0ZXBpY2tlcnM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVwaWNrZXI7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uICovXG5pbXBvcnQgdHlwZSB7IERpYWxPcHRpb25zLCBEaWFsVHJpZ2dlclR5cGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSW5zdGFuY2VPcHRpb25zIH0gZnJvbSAnLi4vLi4vZG9tL3R5cGVzJztcbmltcG9ydCB7IERpYWxJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgaW5zdGFuY2VzIGZyb20gJy4uLy4uL2RvbS9pbnN0YW5jZXMnO1xuXG5jb25zdCBEZWZhdWx0OiBEaWFsT3B0aW9ucyA9IHtcbiAgICB0cmlnZ2VyVHlwZTogJ2hvdmVyJyxcbiAgICBvblNob3c6ICgpID0+IHt9LFxuICAgIG9uSGlkZTogKCkgPT4ge30sXG4gICAgb25Ub2dnbGU6ICgpID0+IHt9LFxufTtcblxuY29uc3QgRGVmYXVsdEluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0ge1xuICAgIGlkOiBudWxsLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuY2xhc3MgRGlhbCBpbXBsZW1lbnRzIERpYWxJbnRlcmZhY2Uge1xuICAgIF9pbnN0YW5jZUlkOiBzdHJpbmc7XG4gICAgX3BhcmVudEVsOiBIVE1MRWxlbWVudDtcbiAgICBfdHJpZ2dlckVsOiBIVE1MRWxlbWVudDtcbiAgICBfdGFyZ2V0RWw6IEhUTUxFbGVtZW50O1xuICAgIF9vcHRpb25zOiBEaWFsT3B0aW9ucztcbiAgICBfdmlzaWJsZTogYm9vbGVhbjtcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gICAgX3Nob3dFdmVudEhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG4gICAgX2hpZGVFdmVudEhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcGFyZW50RWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIHRyaWdnZXJFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgdGFyZ2V0RWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIG9wdGlvbnM6IERpYWxPcHRpb25zID0gRGVmYXVsdCxcbiAgICAgICAgaW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSBEZWZhdWx0SW5zdGFuY2VPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlSWQgPSBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgID8gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA6IHRhcmdldEVsLmlkO1xuICAgICAgICB0aGlzLl9wYXJlbnRFbCA9IHBhcmVudEVsO1xuICAgICAgICB0aGlzLl90cmlnZ2VyRWwgPSB0cmlnZ2VyRWw7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsID0gdGFyZ2V0RWw7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB7IC4uLkRlZmF1bHQsIC4uLm9wdGlvbnMgfTtcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgaW5zdGFuY2VzLmFkZEluc3RhbmNlKFxuICAgICAgICAgICAgJ0RpYWwnLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsICYmIHRoaXMuX3RhcmdldEVsICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgY29uc3QgdHJpZ2dlckV2ZW50VHlwZXMgPSB0aGlzLl9nZXRUcmlnZ2VyRXZlbnRUeXBlcyhcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnRyaWdnZXJUeXBlXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0aGlzLl9zaG93RXZlbnRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50VHlwZXMuc2hvd0V2ZW50cy5mb3JFYWNoKChldjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoZXYsIHRoaXMuX3Nob3dFdmVudEhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmFkZEV2ZW50TGlzdGVuZXIoZXYsIHRoaXMuX3Nob3dFdmVudEhhbmRsZXIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2hpZGVFdmVudEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9wYXJlbnRFbC5tYXRjaGVzKCc6aG92ZXInKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnRUeXBlcy5oaWRlRXZlbnRzLmZvckVhY2goKGV2OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRFbC5hZGRFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9oaWRlRXZlbnRIYW5kbGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICBjb25zdCB0cmlnZ2VyRXZlbnRUeXBlcyA9IHRoaXMuX2dldFRyaWdnZXJFdmVudFR5cGVzKFxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMudHJpZ2dlclR5cGVcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRyaWdnZXJFdmVudFR5cGVzLnNob3dFdmVudHMuZm9yRWFjaCgoZXY6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9zaG93RXZlbnRIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9zaG93RXZlbnRIYW5kbGVyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnRUeXBlcy5oaWRlRXZlbnRzLmZvckVhY2goKGV2OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9oaWRlRXZlbnRIYW5kbGVyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIGluc3RhbmNlcy5yZW1vdmVJbnN0YW5jZSgnRGlhbCcsIHRoaXMuX2luc3RhbmNlSWQpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lBbmRSZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMucmVtb3ZlSW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgaWYgKHRoaXMuX3RyaWdnZXJFbCkge1xuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSGlkZSh0aGlzKTtcbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgaWYgKHRoaXMuX3RyaWdnZXJFbCkge1xuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3codGhpcyk7XG4gICAgfVxuXG4gICAgdG9nZ2xlKCkge1xuICAgICAgICBpZiAodGhpcy5fdmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzSGlkZGVuKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuX3Zpc2libGU7XG4gICAgfVxuXG4gICAgaXNWaXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlzaWJsZTtcbiAgICB9XG5cbiAgICBfZ2V0VHJpZ2dlckV2ZW50VHlwZXModHJpZ2dlclR5cGU6IERpYWxUcmlnZ2VyVHlwZSkge1xuICAgICAgICBzd2l0Y2ggKHRyaWdnZXJUeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdob3Zlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogWydtb3VzZWVudGVyJywgJ2ZvY3VzJ10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFsnbW91c2VsZWF2ZScsICdibHVyJ10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ2NsaWNrJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnRzOiBbJ2NsaWNrJywgJ2ZvY3VzJ10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFsnZm9jdXNvdXQnLCAnYmx1ciddLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZUV2ZW50czogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogWydtb3VzZWVudGVyJywgJ2ZvY3VzJ10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFsnbW91c2VsZWF2ZScsICdibHVyJ10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU9uU2hvdyhjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uU2hvdyA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uSGlkZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSGlkZSA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uVG9nZ2xlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25Ub2dnbGUgPSBjYWxsYmFjaztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0RGlhbHMoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZGlhbC1pbml0XScpLmZvckVhY2goKCRwYXJlbnRFbCkgPT4ge1xuICAgICAgICBjb25zdCAkdHJpZ2dlckVsID0gJHBhcmVudEVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWRpYWwtdG9nZ2xlXScpO1xuXG4gICAgICAgIGlmICgkdHJpZ2dlckVsKSB7XG4gICAgICAgICAgICBjb25zdCBkaWFsSWQgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kaWFsLXRvZ2dsZScpO1xuICAgICAgICAgICAgY29uc3QgJGRpYWxFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpYWxJZCk7XG5cbiAgICAgICAgICAgIGlmICgkZGlhbEVsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJpZ2dlclR5cGUgPVxuICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kaWFsLXRyaWdnZXInKTtcbiAgICAgICAgICAgICAgICBuZXcgRGlhbChcbiAgICAgICAgICAgICAgICAgICAgJHBhcmVudEVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAkZGlhbEVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyVHlwZTogdHJpZ2dlclR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRyaWdnZXJUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBEZWZhdWx0LnRyaWdnZXJUeXBlLFxuICAgICAgICAgICAgICAgICAgICB9IGFzIERpYWxPcHRpb25zXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgYERpYWwgd2l0aCBpZCAke2RpYWxJZH0gZG9lcyBub3QgZXhpc3QuIEFyZSB5b3Ugc3VyZSB0aGF0IHRoZSBkYXRhLWRpYWwtdG9nZ2xlIGF0dHJpYnV0ZSBwb2ludHMgdG8gdGhlIGNvcnJlY3QgbW9kYWwgaWQ/YFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIGBEaWFsIHdpdGggaWQgJHskcGFyZW50RWwuaWR9IGRvZXMgbm90IGhhdmUgYSB0cmlnZ2VyIGVsZW1lbnQuIEFyZSB5b3Ugc3VyZSB0aGF0IHRoZSBkYXRhLWRpYWwtdG9nZ2xlIGF0dHJpYnV0ZSBleGlzdHM/YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuRGlhbCA9IERpYWw7XG4gICAgd2luZG93LmluaXREaWFscyA9IGluaXREaWFscztcbn1cblxuZXhwb3J0IGRlZmF1bHQgRGlhbDtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb24gKi9cbmltcG9ydCB0eXBlIHsgRGlzbWlzc09wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSW5zdGFuY2VPcHRpb25zIH0gZnJvbSAnLi4vLi4vZG9tL3R5cGVzJztcbmltcG9ydCB7IERpc21pc3NJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgaW5zdGFuY2VzIGZyb20gJy4uLy4uL2RvbS9pbnN0YW5jZXMnO1xuXG5jb25zdCBEZWZhdWx0OiBEaXNtaXNzT3B0aW9ucyA9IHtcbiAgICB0cmFuc2l0aW9uOiAndHJhbnNpdGlvbi1vcGFjaXR5JyxcbiAgICBkdXJhdGlvbjogMzAwLFxuICAgIHRpbWluZzogJ2Vhc2Utb3V0JyxcbiAgICBvbkhpZGU6ICgpID0+IHt9LFxufTtcblxuY29uc3QgRGVmYXVsdEluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0ge1xuICAgIGlkOiBudWxsLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuY2xhc3MgRGlzbWlzcyBpbXBsZW1lbnRzIERpc21pc3NJbnRlcmZhY2Uge1xuICAgIF9pbnN0YW5jZUlkOiBzdHJpbmc7XG4gICAgX3RhcmdldEVsOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gICAgX3RyaWdnZXJFbDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIF9vcHRpb25zOiBEaXNtaXNzT3B0aW9ucztcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gICAgX2NsaWNrSGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB0YXJnZXRFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgdHJpZ2dlckVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBvcHRpb25zOiBEaXNtaXNzT3B0aW9ucyA9IERlZmF1bHQsXG4gICAgICAgIGluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0gRGVmYXVsdEluc3RhbmNlT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZUlkID0gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA/IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgOiB0YXJnZXRFbC5pZDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwgPSB0YXJnZXRFbDtcbiAgICAgICAgdGhpcy5fdHJpZ2dlckVsID0gdHJpZ2dlckVsO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICBpbnN0YW5jZXMuYWRkSW5zdGFuY2UoXG4gICAgICAgICAgICAnRGlzbWlzcycsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGluc3RhbmNlT3B0aW9ucy5vdmVycmlkZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl90cmlnZ2VyRWwgJiYgdGhpcy5fdGFyZ2V0RWwgJiYgIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl9jbGlja0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fY2xpY2tIYW5kbGVyKTtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl90cmlnZ2VyRWwgJiYgdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2NsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIGluc3RhbmNlcy5yZW1vdmVJbnN0YW5jZSgnRGlzbWlzcycsIHRoaXMuX2luc3RhbmNlSWQpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lBbmRSZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMucmVtb3ZlSW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKFxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy50cmFuc2l0aW9uLFxuICAgICAgICAgICAgYGR1cmF0aW9uLSR7dGhpcy5fb3B0aW9ucy5kdXJhdGlvbn1gLFxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy50aW1pbmcsXG4gICAgICAgICAgICAnb3BhY2l0eS0wJ1xuICAgICAgICApO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICB9LCB0aGlzLl9vcHRpb25zLmR1cmF0aW9uKTtcblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSGlkZSh0aGlzLCB0aGlzLl90YXJnZXRFbCk7XG4gICAgfVxuXG4gICAgdXBkYXRlT25IaWRlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25IaWRlID0gY2FsbGJhY2s7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdERpc21pc3NlcygpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1kaXNtaXNzLXRhcmdldF0nKS5mb3JFYWNoKCgkdHJpZ2dlckVsKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhcmdldElkID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGlzbWlzcy10YXJnZXQnKTtcbiAgICAgICAgY29uc3QgJGRpc21pc3NFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0SWQpO1xuXG4gICAgICAgIGlmICgkZGlzbWlzc0VsKSB7XG4gICAgICAgICAgICBuZXcgRGlzbWlzcygkZGlzbWlzc0VsIGFzIEhUTUxFbGVtZW50LCAkdHJpZ2dlckVsIGFzIEhUTUxFbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgYFRoZSBkaXNtaXNzIGVsZW1lbnQgd2l0aCBpZCBcIiR7dGFyZ2V0SWR9XCIgZG9lcyBub3QgZXhpc3QuIFBsZWFzZSBjaGVjayB0aGUgZGF0YS1kaXNtaXNzLXRhcmdldCBhdHRyaWJ1dGUuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuRGlzbWlzcyA9IERpc21pc3M7XG4gICAgd2luZG93LmluaXREaXNtaXNzZXMgPSBpbml0RGlzbWlzc2VzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBEaXNtaXNzO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiAqL1xuaW1wb3J0IHR5cGUgeyBEcmF3ZXJPcHRpb25zLCBQbGFjZW1lbnRDbGFzc2VzIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEluc3RhbmNlT3B0aW9ucywgRXZlbnRMaXN0ZW5lckluc3RhbmNlIH0gZnJvbSAnLi4vLi4vZG9tL3R5cGVzJztcbmltcG9ydCB7IERyYXdlckludGVyZmFjZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCBpbnN0YW5jZXMgZnJvbSAnLi4vLi4vZG9tL2luc3RhbmNlcyc7XG5cbmNvbnN0IERlZmF1bHQ6IERyYXdlck9wdGlvbnMgPSB7XG4gICAgcGxhY2VtZW50OiAnbGVmdCcsXG4gICAgYm9keVNjcm9sbGluZzogZmFsc2UsXG4gICAgYmFja2Ryb3A6IHRydWUsXG4gICAgZWRnZTogZmFsc2UsXG4gICAgZWRnZU9mZnNldDogJ2JvdHRvbS1bNjBweF0nLFxuICAgIGJhY2tkcm9wQ2xhc3NlczogJ2JnLWdyYXktOTAwLzUwIGRhcms6YmctZ3JheS05MDAvODAgZml4ZWQgaW5zZXQtMCB6LTMwJyxcbiAgICBvblNob3c6ICgpID0+IHt9LFxuICAgIG9uSGlkZTogKCkgPT4ge30sXG4gICAgb25Ub2dnbGU6ICgpID0+IHt9LFxufTtcblxuY29uc3QgRGVmYXVsdEluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0ge1xuICAgIGlkOiBudWxsLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuY2xhc3MgRHJhd2VyIGltcGxlbWVudHMgRHJhd2VySW50ZXJmYWNlIHtcbiAgICBfaW5zdGFuY2VJZDogc3RyaW5nO1xuICAgIF90YXJnZXRFbDogSFRNTEVsZW1lbnQ7XG4gICAgX3RyaWdnZXJFbDogSFRNTEVsZW1lbnQ7XG4gICAgX29wdGlvbnM6IERyYXdlck9wdGlvbnM7XG4gICAgX3Zpc2libGU6IGJvb2xlYW47XG4gICAgX2V2ZW50TGlzdGVuZXJJbnN0YW5jZXM6IEV2ZW50TGlzdGVuZXJJbnN0YW5jZVtdID0gW107XG4gICAgX2hhbmRsZUVzY2FwZUtleTogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdGFyZ2V0RWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIG9wdGlvbnM6IERyYXdlck9wdGlvbnMgPSBEZWZhdWx0LFxuICAgICAgICBpbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IERlZmF1bHRJbnN0YW5jZU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VJZCA9IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgPyBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgIDogdGFyZ2V0RWwuaWQ7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsID0gdGFyZ2V0RWw7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB7IC4uLkRlZmF1bHQsIC4uLm9wdGlvbnMgfTtcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgaW5zdGFuY2VzLmFkZEluc3RhbmNlKFxuICAgICAgICAgICAgJ0RyYXdlcicsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGluc3RhbmNlT3B0aW9ucy5vdmVycmlkZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIC8vIHNldCBpbml0aWFsIGFjY2Vzc2liaWxpdHkgYXR0cmlidXRlc1xuICAgICAgICBpZiAodGhpcy5fdGFyZ2V0RWwgJiYgIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5hZGQoJ3RyYW5zaXRpb24tdHJhbnNmb3JtJyk7XG5cbiAgICAgICAgICAgIC8vIHNldCBiYXNlIHBsYWNlbWVudCBjbGFzc2VzXG4gICAgICAgICAgICB0aGlzLl9nZXRQbGFjZW1lbnRDbGFzc2VzKHRoaXMuX29wdGlvbnMucGxhY2VtZW50KS5iYXNlLm1hcCgoYykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5hZGQoYyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5faGFuZGxlRXNjYXBlS2V5ID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgJ0VzY2FwZScga2V5IGlzIHByZXNzZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBEcmF3ZXIgaXMgdmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7IC8vIGhpZGUgdGhlIERyYXdlclxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gYWRkIGtleWJvYXJkIGV2ZW50IGxpc3RlbmVyIHRvIGRvY3VtZW50XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjYXBlS2V5KTtcblxuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJJbnN0YW5jZXMoKTtcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lCYWNrZHJvcEVsKCk7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUga2V5Ym9hcmQgZXZlbnQgbGlzdGVuZXJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NhcGVLZXkpO1xuXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIGluc3RhbmNlcy5yZW1vdmVJbnN0YW5jZSgnRHJhd2VyJywgdGhpcy5faW5zdGFuY2VJZCk7XG4gICAgfVxuXG4gICAgZGVzdHJveUFuZFJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIC8vIGJhc2VkIG9uIHRoZSBlZGdlIG9wdGlvbiBzaG93IHBsYWNlbWVudCBjbGFzc2VzXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmVkZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2dldFBsYWNlbWVudENsYXNzZXMoXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5wbGFjZW1lbnQgKyAnLWVkZ2UnXG4gICAgICAgICAgICApLmFjdGl2ZS5tYXAoKGMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QucmVtb3ZlKGMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9nZXRQbGFjZW1lbnRDbGFzc2VzKFxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucGxhY2VtZW50ICsgJy1lZGdlJ1xuICAgICAgICAgICAgKS5pbmFjdGl2ZS5tYXAoKGMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKGMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9nZXRQbGFjZW1lbnRDbGFzc2VzKHRoaXMuX29wdGlvbnMucGxhY2VtZW50KS5hY3RpdmUubWFwKFxuICAgICAgICAgICAgICAgIChjKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuX2dldFBsYWNlbWVudENsYXNzZXModGhpcy5fb3B0aW9ucy5wbGFjZW1lbnQpLmluYWN0aXZlLm1hcChcbiAgICAgICAgICAgICAgICAoYykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKGMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgYWNjZXNzaWJpbGl0eSBhdHRyaWJ1dGVzXG4gICAgICAgIHRoaXMuX3RhcmdldEVsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwucmVtb3ZlQXR0cmlidXRlKCdyb2xlJyk7XG5cbiAgICAgICAgLy8gZW5hYmxlIGJvZHkgc2Nyb2xsXG4gICAgICAgIGlmICghdGhpcy5fb3B0aW9ucy5ib2R5U2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ292ZXJmbG93LWhpZGRlbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBiYWNrZHJvcFxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5iYWNrZHJvcCkge1xuICAgICAgICAgICAgdGhpcy5fZGVzdHJveUJhY2tkcm9wRWwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSGlkZSh0aGlzKTtcbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5lZGdlKSB7XG4gICAgICAgICAgICB0aGlzLl9nZXRQbGFjZW1lbnRDbGFzc2VzKFxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucGxhY2VtZW50ICsgJy1lZGdlJ1xuICAgICAgICAgICAgKS5hY3RpdmUubWFwKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZChjKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fZ2V0UGxhY2VtZW50Q2xhc3NlcyhcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnBsYWNlbWVudCArICctZWRnZSdcbiAgICAgICAgICAgICkuaW5hY3RpdmUubWFwKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LnJlbW92ZShjKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZ2V0UGxhY2VtZW50Q2xhc3Nlcyh0aGlzLl9vcHRpb25zLnBsYWNlbWVudCkuYWN0aXZlLm1hcChcbiAgICAgICAgICAgICAgICAoYykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKGMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl9nZXRQbGFjZW1lbnRDbGFzc2VzKHRoaXMuX29wdGlvbnMucGxhY2VtZW50KS5pbmFjdGl2ZS5tYXAoXG4gICAgICAgICAgICAgICAgKGMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LnJlbW92ZShjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IGFjY2Vzc2liaWxpdHkgYXR0cmlidXRlc1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCAndHJ1ZScpO1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnZGlhbG9nJyk7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcblxuICAgICAgICAvLyBkaXNhYmxlIGJvZHkgc2Nyb2xsXG4gICAgICAgIGlmICghdGhpcy5fb3B0aW9ucy5ib2R5U2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ292ZXJmbG93LWhpZGRlbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2hvdyBiYWNrZHJvcFxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5iYWNrZHJvcCkge1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlQmFja2Ryb3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSB0cnVlO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25TaG93KHRoaXMpO1xuICAgIH1cblxuICAgIHRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfY3JlYXRlQmFja2Ryb3AoKSB7XG4gICAgICAgIGlmICghdGhpcy5fdmlzaWJsZSkge1xuICAgICAgICAgICAgY29uc3QgYmFja2Ryb3BFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgYmFja2Ryb3BFbC5zZXRBdHRyaWJ1dGUoJ2RyYXdlci1iYWNrZHJvcCcsICcnKTtcbiAgICAgICAgICAgIGJhY2tkcm9wRWwuY2xhc3NMaXN0LmFkZChcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9vcHRpb25zLmJhY2tkcm9wQ2xhc3Nlcy5zcGxpdCgnICcpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmFwcGVuZChiYWNrZHJvcEVsKTtcbiAgICAgICAgICAgIGJhY2tkcm9wRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9kZXN0cm95QmFja2Ryb3BFbCgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5fdmlzaWJsZSAmJlxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RyYXdlci1iYWNrZHJvcF0nKSAhPT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkcmF3ZXItYmFja2Ryb3BdJykucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZ2V0UGxhY2VtZW50Q2xhc3NlcyhwbGFjZW1lbnQ6IHN0cmluZyk6IFBsYWNlbWVudENsYXNzZXMge1xuICAgICAgICBzd2l0Y2ggKHBsYWNlbWVudCkge1xuICAgICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBiYXNlOiBbJ3RvcC0wJywgJ2xlZnQtMCcsICdyaWdodC0wJ10sXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogWyd0cmFuc2Zvcm0tbm9uZSddLFxuICAgICAgICAgICAgICAgICAgICBpbmFjdGl2ZTogWyctdHJhbnNsYXRlLXktZnVsbCddLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYmFzZTogWydyaWdodC0wJywgJ3RvcC0wJ10sXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogWyd0cmFuc2Zvcm0tbm9uZSddLFxuICAgICAgICAgICAgICAgICAgICBpbmFjdGl2ZTogWyd0cmFuc2xhdGUteC1mdWxsJ10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYmFzZTogWydib3R0b20tMCcsICdsZWZ0LTAnLCAncmlnaHQtMCddLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IFsndHJhbnNmb3JtLW5vbmUnXSxcbiAgICAgICAgICAgICAgICAgICAgaW5hY3RpdmU6IFsndHJhbnNsYXRlLXktZnVsbCddLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBiYXNlOiBbJ2xlZnQtMCcsICd0b3AtMCddLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IFsndHJhbnNmb3JtLW5vbmUnXSxcbiAgICAgICAgICAgICAgICAgICAgaW5hY3RpdmU6IFsnLXRyYW5zbGF0ZS14LWZ1bGwnXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAnYm90dG9tLWVkZ2UnOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2U6IFsnbGVmdC0wJywgJ3RvcC0wJ10sXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogWyd0cmFuc2Zvcm0tbm9uZSddLFxuICAgICAgICAgICAgICAgICAgICBpbmFjdGl2ZTogWyd0cmFuc2xhdGUteS1mdWxsJywgdGhpcy5fb3B0aW9ucy5lZGdlT2Zmc2V0XSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBiYXNlOiBbJ2xlZnQtMCcsICd0b3AtMCddLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IFsndHJhbnNmb3JtLW5vbmUnXSxcbiAgICAgICAgICAgICAgICAgICAgaW5hY3RpdmU6IFsnLXRyYW5zbGF0ZS14LWZ1bGwnXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNIaWRkZW4oKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5fdmlzaWJsZTtcbiAgICB9XG5cbiAgICBpc1Zpc2libGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aXNpYmxlO1xuICAgIH1cblxuICAgIGFkZEV2ZW50TGlzdGVuZXJJbnN0YW5jZShcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgICAgIHR5cGU6IHN0cmluZyxcbiAgICAgICAgaGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdFxuICAgICkge1xuICAgICAgICB0aGlzLl9ldmVudExpc3RlbmVySW5zdGFuY2VzLnB1c2goe1xuICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW1vdmVBbGxFdmVudExpc3RlbmVySW5zdGFuY2VzKCkge1xuICAgICAgICB0aGlzLl9ldmVudExpc3RlbmVySW5zdGFuY2VzLm1hcCgoZXZlbnRMaXN0ZW5lckluc3RhbmNlKSA9PiB7XG4gICAgICAgICAgICBldmVudExpc3RlbmVySW5zdGFuY2UuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJJbnN0YW5jZS50eXBlLFxuICAgICAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJJbnN0YW5jZS5oYW5kbGVyXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZXZlbnRMaXN0ZW5lckluc3RhbmNlcyA9IFtdO1xuICAgIH1cblxuICAgIGdldEFsbEV2ZW50TGlzdGVuZXJJbnN0YW5jZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudExpc3RlbmVySW5zdGFuY2VzO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uU2hvdyhjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uU2hvdyA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uSGlkZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSGlkZSA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uVG9nZ2xlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25Ub2dnbGUgPSBjYWxsYmFjaztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0RHJhd2VycygpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1kcmF3ZXItdGFyZ2V0XScpLmZvckVhY2goKCR0cmlnZ2VyRWwpID0+IHtcbiAgICAgICAgLy8gbWFuZGF0b3J5XG4gICAgICAgIGNvbnN0IGRyYXdlcklkID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZHJhd2VyLXRhcmdldCcpO1xuICAgICAgICBjb25zdCAkZHJhd2VyRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkcmF3ZXJJZCk7XG5cbiAgICAgICAgaWYgKCRkcmF3ZXJFbCkge1xuICAgICAgICAgICAgY29uc3QgcGxhY2VtZW50ID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZHJhd2VyLXBsYWNlbWVudCcpO1xuICAgICAgICAgICAgY29uc3QgYm9keVNjcm9sbGluZyA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICdkYXRhLWRyYXdlci1ib2R5LXNjcm9sbGluZydcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBiYWNrZHJvcCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRyYXdlci1iYWNrZHJvcCcpO1xuICAgICAgICAgICAgY29uc3QgZWRnZSA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRyYXdlci1lZGdlJyk7XG4gICAgICAgICAgICBjb25zdCBlZGdlT2Zmc2V0ID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgJ2RhdGEtZHJhd2VyLWVkZ2Utb2Zmc2V0J1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgbmV3IERyYXdlcigkZHJhd2VyRWwsIHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCA/IHBsYWNlbWVudCA6IERlZmF1bHQucGxhY2VtZW50LFxuICAgICAgICAgICAgICAgIGJvZHlTY3JvbGxpbmc6IGJvZHlTY3JvbGxpbmdcbiAgICAgICAgICAgICAgICAgICAgPyBib2R5U2Nyb2xsaW5nID09PSAndHJ1ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICA6IERlZmF1bHQuYm9keVNjcm9sbGluZyxcbiAgICAgICAgICAgICAgICBiYWNrZHJvcDogYmFja2Ryb3BcbiAgICAgICAgICAgICAgICAgICAgPyBiYWNrZHJvcCA9PT0gJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgOiBEZWZhdWx0LmJhY2tkcm9wLFxuICAgICAgICAgICAgICAgIGVkZ2U6IGVkZ2UgPyAoZWRnZSA9PT0gJ3RydWUnID8gdHJ1ZSA6IGZhbHNlKSA6IERlZmF1bHQuZWRnZSxcbiAgICAgICAgICAgICAgICBlZGdlT2Zmc2V0OiBlZGdlT2Zmc2V0ID8gZWRnZU9mZnNldCA6IERlZmF1bHQuZWRnZU9mZnNldCxcbiAgICAgICAgICAgIH0gYXMgRHJhd2VyT3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIGBEcmF3ZXIgd2l0aCBpZCAke2RyYXdlcklkfSBub3QgZm91bmQuIEFyZSB5b3Ugc3VyZSB0aGF0IHRoZSBkYXRhLWRyYXdlci10YXJnZXQgYXR0cmlidXRlIHBvaW50cyB0byB0aGUgY29ycmVjdCBkcmF3ZXIgaWQ/YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZHJhd2VyLXRvZ2dsZV0nKS5mb3JFYWNoKCgkdHJpZ2dlckVsKSA9PiB7XG4gICAgICAgIGNvbnN0IGRyYXdlcklkID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZHJhd2VyLXRvZ2dsZScpO1xuICAgICAgICBjb25zdCAkZHJhd2VyRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkcmF3ZXJJZCk7XG5cbiAgICAgICAgaWYgKCRkcmF3ZXJFbCkge1xuICAgICAgICAgICAgY29uc3QgZHJhd2VyOiBEcmF3ZXJJbnRlcmZhY2UgPSBpbnN0YW5jZXMuZ2V0SW5zdGFuY2UoXG4gICAgICAgICAgICAgICAgJ0RyYXdlcicsXG4gICAgICAgICAgICAgICAgZHJhd2VySWRcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChkcmF3ZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b2dnbGVEcmF3ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdlci50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICR0cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVEcmF3ZXIpO1xuICAgICAgICAgICAgICAgIGRyYXdlci5hZGRFdmVudExpc3RlbmVySW5zdGFuY2UoXG4gICAgICAgICAgICAgICAgICAgICR0cmlnZ2VyRWwgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZURyYXdlclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBEcmF3ZXIgd2l0aCBpZCAke2RyYXdlcklkfSBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuIFBsZWFzZSBpbml0aWFsaXplIGl0IHVzaW5nIHRoZSBkYXRhLWRyYXdlci10YXJnZXQgYXR0cmlidXRlLmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBgRHJhd2VyIHdpdGggaWQgJHtkcmF3ZXJJZH0gbm90IGZvdW5kLiBBcmUgeW91IHN1cmUgdGhhdCB0aGUgZGF0YS1kcmF3ZXItdGFyZ2V0IGF0dHJpYnV0ZSBwb2ludHMgdG8gdGhlIGNvcnJlY3QgZHJhd2VyIGlkP2BcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGRvY3VtZW50XG4gICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1kcmF3ZXItZGlzbWlzc10sIFtkYXRhLWRyYXdlci1oaWRlXScpXG4gICAgICAgIC5mb3JFYWNoKCgkdHJpZ2dlckVsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkcmF3ZXJJZCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRyYXdlci1kaXNtaXNzJylcbiAgICAgICAgICAgICAgICA/ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRyYXdlci1kaXNtaXNzJylcbiAgICAgICAgICAgICAgICA6ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRyYXdlci1oaWRlJyk7XG4gICAgICAgICAgICBjb25zdCAkZHJhd2VyRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkcmF3ZXJJZCk7XG5cbiAgICAgICAgICAgIGlmICgkZHJhd2VyRWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkcmF3ZXI6IERyYXdlckludGVyZmFjZSA9IGluc3RhbmNlcy5nZXRJbnN0YW5jZShcbiAgICAgICAgICAgICAgICAgICAgJ0RyYXdlcicsXG4gICAgICAgICAgICAgICAgICAgIGRyYXdlcklkXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmIChkcmF3ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGlkZURyYXdlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdlci5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICR0cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoaWRlRHJhd2VyKTtcbiAgICAgICAgICAgICAgICAgICAgZHJhd2VyLmFkZEV2ZW50TGlzdGVuZXJJbnN0YW5jZShcbiAgICAgICAgICAgICAgICAgICAgICAgICR0cmlnZ2VyRWwgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZURyYXdlclxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBgRHJhd2VyIHdpdGggaWQgJHtkcmF3ZXJJZH0gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLiBQbGVhc2UgaW5pdGlhbGl6ZSBpdCB1c2luZyB0aGUgZGF0YS1kcmF3ZXItdGFyZ2V0IGF0dHJpYnV0ZS5gXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgRHJhd2VyIHdpdGggaWQgJHtkcmF3ZXJJZH0gbm90IGZvdW5kLiBBcmUgeW91IHN1cmUgdGhhdCB0aGUgZGF0YS1kcmF3ZXItdGFyZ2V0IGF0dHJpYnV0ZSBwb2ludHMgdG8gdGhlIGNvcnJlY3QgZHJhd2VyIGlkYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZHJhd2VyLXNob3ddJykuZm9yRWFjaCgoJHRyaWdnZXJFbCkgPT4ge1xuICAgICAgICBjb25zdCBkcmF3ZXJJZCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRyYXdlci1zaG93Jyk7XG4gICAgICAgIGNvbnN0ICRkcmF3ZXJFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRyYXdlcklkKTtcblxuICAgICAgICBpZiAoJGRyYXdlckVsKSB7XG4gICAgICAgICAgICBjb25zdCBkcmF3ZXI6IERyYXdlckludGVyZmFjZSA9IGluc3RhbmNlcy5nZXRJbnN0YW5jZShcbiAgICAgICAgICAgICAgICAnRHJhd2VyJyxcbiAgICAgICAgICAgICAgICBkcmF3ZXJJZFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKGRyYXdlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNob3dEcmF3ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdlci5zaG93KCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAkdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2hvd0RyYXdlcik7XG4gICAgICAgICAgICAgICAgZHJhd2VyLmFkZEV2ZW50TGlzdGVuZXJJbnN0YW5jZShcbiAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvd0RyYXdlclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBEcmF3ZXIgd2l0aCBpZCAke2RyYXdlcklkfSBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuIFBsZWFzZSBpbml0aWFsaXplIGl0IHVzaW5nIHRoZSBkYXRhLWRyYXdlci10YXJnZXQgYXR0cmlidXRlLmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBgRHJhd2VyIHdpdGggaWQgJHtkcmF3ZXJJZH0gbm90IGZvdW5kLiBBcmUgeW91IHN1cmUgdGhhdCB0aGUgZGF0YS1kcmF3ZXItdGFyZ2V0IGF0dHJpYnV0ZSBwb2ludHMgdG8gdGhlIGNvcnJlY3QgZHJhd2VyIGlkP2BcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LkRyYXdlciA9IERyYXdlcjtcbiAgICB3aW5kb3cuaW5pdERyYXdlcnMgPSBpbml0RHJhd2Vycztcbn1cblxuZXhwb3J0IGRlZmF1bHQgRHJhd2VyO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiAqL1xuaW1wb3J0IHsgY3JlYXRlUG9wcGVyIH0gZnJvbSAnQHBvcHBlcmpzL2NvcmUnO1xuaW1wb3J0IHR5cGUge1xuICAgIE9wdGlvbnMgYXMgUG9wcGVyT3B0aW9ucyxcbiAgICBJbnN0YW5jZSBhcyBQb3BwZXJJbnN0YW5jZSxcbn0gZnJvbSAnQHBvcHBlcmpzL2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBEcm9wZG93bk9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSW5zdGFuY2VPcHRpb25zIH0gZnJvbSAnLi4vLi4vZG9tL3R5cGVzJztcbmltcG9ydCB7IERyb3Bkb3duSW50ZXJmYWNlIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IGluc3RhbmNlcyBmcm9tICcuLi8uLi9kb20vaW5zdGFuY2VzJztcblxuY29uc3QgRGVmYXVsdDogRHJvcGRvd25PcHRpb25zID0ge1xuICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgdHJpZ2dlclR5cGU6ICdjbGljaycsXG4gICAgb2Zmc2V0U2tpZGRpbmc6IDAsXG4gICAgb2Zmc2V0RGlzdGFuY2U6IDEwLFxuICAgIGRlbGF5OiAzMDAsXG4gICAgaWdub3JlQ2xpY2tPdXRzaWRlQ2xhc3M6IGZhbHNlLFxuICAgIG9uU2hvdzogKCkgPT4ge30sXG4gICAgb25IaWRlOiAoKSA9PiB7fSxcbiAgICBvblRvZ2dsZTogKCkgPT4ge30sXG59O1xuXG5jb25zdCBEZWZhdWx0SW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSB7XG4gICAgaWQ6IG51bGwsXG4gICAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5jbGFzcyBEcm9wZG93biBpbXBsZW1lbnRzIERyb3Bkb3duSW50ZXJmYWNlIHtcbiAgICBfaW5zdGFuY2VJZDogc3RyaW5nO1xuICAgIF90YXJnZXRFbDogSFRNTEVsZW1lbnQ7XG4gICAgX3RyaWdnZXJFbDogSFRNTEVsZW1lbnQ7XG4gICAgX29wdGlvbnM6IERyb3Bkb3duT3B0aW9ucztcbiAgICBfdmlzaWJsZTogYm9vbGVhbjtcbiAgICBfcG9wcGVySW5zdGFuY2U6IFBvcHBlckluc3RhbmNlO1xuICAgIF9pbml0aWFsaXplZDogYm9vbGVhbjtcbiAgICBfY2xpY2tPdXRzaWRlRXZlbnRMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfaG92ZXJTaG93VHJpZ2dlckVsSGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfaG92ZXJTaG93VGFyZ2V0RWxIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF9ob3ZlckhpZGVIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF9jbGlja0hhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgdHJpZ2dlckVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIG9wdGlvbnM6IERyb3Bkb3duT3B0aW9ucyA9IERlZmF1bHQsXG4gICAgICAgIGluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0gRGVmYXVsdEluc3RhbmNlT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZUlkID0gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA/IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgOiB0YXJnZXRFbGVtZW50LmlkO1xuICAgICAgICB0aGlzLl90YXJnZXRFbCA9IHRhcmdldEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX3RyaWdnZXJFbCA9IHRyaWdnZXJFbGVtZW50O1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgaW5zdGFuY2VzLmFkZEluc3RhbmNlKFxuICAgICAgICAgICAgJ0Ryb3Bkb3duJyxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZUlkLFxuICAgICAgICAgICAgaW5zdGFuY2VPcHRpb25zLm92ZXJyaWRlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyaWdnZXJFbCAmJiB0aGlzLl90YXJnZXRFbCAmJiAhdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlID0gdGhpcy5fY3JlYXRlUG9wcGVySW5zdGFuY2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3NldHVwRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGNvbnN0IHRyaWdnZXJFdmVudHMgPSB0aGlzLl9nZXRUcmlnZ2VyRXZlbnRzKCk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGNsaWNrIGV2ZW50IGxpc3RlbmVycyBmb3IgdHJpZ2dlciBlbGVtZW50XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnRyaWdnZXJUeXBlID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnRzLnNob3dFdmVudHMuZm9yRWFjaCgoZXYpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5fY2xpY2tIYW5kbGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIGhvdmVyIGV2ZW50IGxpc3RlbmVycyBmb3IgdHJpZ2dlciBhbmQgdGFyZ2V0IGVsZW1lbnRzXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnRyaWdnZXJUeXBlID09PSAnaG92ZXInKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnRzLnNob3dFdmVudHMuZm9yRWFjaCgoZXYpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAgICAgZXYsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hvdmVyU2hvd1RyaWdnZXJFbEhhbmRsZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgIGV2LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ob3ZlclNob3dUYXJnZXRFbEhhbmRsZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRyaWdnZXJFdmVudHMuaGlkZUV2ZW50cy5mb3JFYWNoKChldikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9ob3ZlckhpZGVIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9ob3ZlckhpZGVIYW5kbGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICBpbnN0YW5jZXMucmVtb3ZlSW5zdGFuY2UoJ0Ryb3Bkb3duJywgdGhpcy5faW5zdGFuY2VJZCk7XG4gICAgfVxuXG4gICAgZGVzdHJveUFuZFJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIF9zZXR1cEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICBjb25zdCB0cmlnZ2VyRXZlbnRzID0gdGhpcy5fZ2V0VHJpZ2dlckV2ZW50cygpO1xuXG4gICAgICAgIHRoaXMuX2NsaWNrSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gY2xpY2sgZXZlbnQgaGFuZGxpbmcgZm9yIHRyaWdnZXIgZWxlbWVudFxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy50cmlnZ2VyVHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50cy5zaG93RXZlbnRzLmZvckVhY2goKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoZXYsIHRoaXMuX2NsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2hvdmVyU2hvd1RyaWdnZXJFbEhhbmRsZXIgPSAoZXYpID0+IHtcbiAgICAgICAgICAgIGlmIChldi50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMuX29wdGlvbnMuZGVsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9ob3ZlclNob3dUYXJnZXRFbEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9ob3ZlckhpZGVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl90YXJnZXRFbC5tYXRjaGVzKCc6aG92ZXInKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzLl9vcHRpb25zLmRlbGF5KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBob3ZlciBldmVudCBoYW5kbGluZyBmb3IgdHJpZ2dlciBlbGVtZW50XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnRyaWdnZXJUeXBlID09PSAnaG92ZXInKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnRzLnNob3dFdmVudHMuZm9yRWFjaCgoZXYpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAgICAgZXYsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hvdmVyU2hvd1RyaWdnZXJFbEhhbmRsZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgIGV2LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ob3ZlclNob3dUYXJnZXRFbEhhbmRsZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRyaWdnZXJFdmVudHMuaGlkZUV2ZW50cy5mb3JFYWNoKChldikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9ob3ZlckhpZGVIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5hZGRFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9ob3ZlckhpZGVIYW5kbGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NyZWF0ZVBvcHBlckluc3RhbmNlKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlUG9wcGVyKHRoaXMuX3RyaWdnZXJFbCwgdGhpcy5fdGFyZ2V0RWwsIHtcbiAgICAgICAgICAgIHBsYWNlbWVudDogdGhpcy5fb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICAgICAgICBtb2RpZmllcnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdvZmZzZXQnLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm9mZnNldFNraWRkaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMub2Zmc2V0RGlzdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfc2V0dXBDbGlja091dHNpZGVMaXN0ZW5lcigpIHtcbiAgICAgICAgdGhpcy5fY2xpY2tPdXRzaWRlRXZlbnRMaXN0ZW5lciA9IChldjogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2xpY2tPdXRzaWRlKGV2LCB0aGlzLl90YXJnZXRFbCk7XG4gICAgICAgIH07XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICB0aGlzLl9jbGlja091dHNpZGVFdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIF9yZW1vdmVDbGlja091dHNpZGVMaXN0ZW5lcigpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrT3V0c2lkZUV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgX2hhbmRsZUNsaWNrT3V0c2lkZShldjogRXZlbnQsIHRhcmdldEVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBjb25zdCBjbGlja2VkRWwgPSBldi50YXJnZXQgYXMgTm9kZTtcblxuICAgICAgICAvLyBJZ25vcmUgY2xpY2tzIG9uIHRoZSB0cmlnZ2VyIGVsZW1lbnQgKGllLiBhIGRhdGVwaWNrZXIgaW5wdXQpXG4gICAgICAgIGNvbnN0IGlnbm9yZUNsaWNrT3V0c2lkZUNsYXNzID0gdGhpcy5fb3B0aW9ucy5pZ25vcmVDbGlja091dHNpZGVDbGFzcztcblxuICAgICAgICBsZXQgaXNJZ25vcmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChpZ25vcmVDbGlja091dHNpZGVDbGFzcykge1xuICAgICAgICAgICAgY29uc3QgaWdub3JlZENsaWNrT3V0c2lkZUVscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAgICAgYC4ke2lnbm9yZUNsaWNrT3V0c2lkZUNsYXNzfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZ25vcmVkQ2xpY2tPdXRzaWRlRWxzLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVsLmNvbnRhaW5zKGNsaWNrZWRFbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNJZ25vcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWdub3JlIGNsaWNrcyBvbiB0aGUgdGFyZ2V0IGVsZW1lbnQgKGllLiBkcm9wZG93biBpdHNlbGYpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNsaWNrZWRFbCAhPT0gdGFyZ2V0RWwgJiZcbiAgICAgICAgICAgICF0YXJnZXRFbC5jb250YWlucyhjbGlja2VkRWwpICYmXG4gICAgICAgICAgICAhdGhpcy5fdHJpZ2dlckVsLmNvbnRhaW5zKGNsaWNrZWRFbCkgJiZcbiAgICAgICAgICAgICFpc0lnbm9yZWQgJiZcbiAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlKClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9nZXRUcmlnZ2VyRXZlbnRzKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX29wdGlvbnMudHJpZ2dlclR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2hvdmVyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnRzOiBbJ21vdXNlZW50ZXInLCAnY2xpY2snXSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZUV2ZW50czogWydtb3VzZWxlYXZlJ10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ2NsaWNrJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnRzOiBbJ2NsaWNrJ10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFtdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZUV2ZW50czogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogWydjbGljayddLFxuICAgICAgICAgICAgICAgICAgICBoaWRlRXZlbnRzOiBbXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9nZ2xlKCkge1xuICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uVG9nZ2xlKHRoaXMpO1xuICAgIH1cblxuICAgIGlzVmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2libGU7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5hZGQoJ2Jsb2NrJyk7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcblxuICAgICAgICAvLyBFbmFibGUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZS5zZXRPcHRpb25zKChvcHRpb25zOiBQb3BwZXJPcHRpb25zKSA9PiAoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIG1vZGlmaWVyczogW1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMubW9kaWZpZXJzLFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJywgZW5hYmxlZDogdHJ1ZSB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRoaXMuX3NldHVwQ2xpY2tPdXRzaWRlTGlzdGVuZXIoKTtcblxuICAgICAgICAvLyBVcGRhdGUgaXRzIHBvc2l0aW9uXG4gICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgICB0aGlzLl92aXNpYmxlID0gdHJ1ZTtcblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uU2hvdyh0aGlzKTtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QucmVtb3ZlKCdibG9jaycpO1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgICAgLy8gRGlzYWJsZSB0aGUgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlLnNldE9wdGlvbnMoKG9wdGlvbnM6IFBvcHBlck9wdGlvbnMpID0+ICh7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBbXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5tb2RpZmllcnMsXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLCBlbmFibGVkOiBmYWxzZSB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl9yZW1vdmVDbGlja091dHNpZGVMaXN0ZW5lcigpO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuX29wdGlvbnMub25IaWRlKHRoaXMpO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uU2hvdyhjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uU2hvdyA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uSGlkZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSGlkZSA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uVG9nZ2xlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25Ub2dnbGUgPSBjYWxsYmFjaztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0RHJvcGRvd25zKCkge1xuICAgIGRvY3VtZW50XG4gICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1kcm9wZG93bi10b2dnbGVdJylcbiAgICAgICAgLmZvckVhY2goKCR0cmlnZ2VyRWwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRyb3Bkb3duSWQgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kcm9wZG93bi10b2dnbGUnKTtcbiAgICAgICAgICAgIGNvbnN0ICRkcm9wZG93bkVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZHJvcGRvd25JZCk7XG5cbiAgICAgICAgICAgIGlmICgkZHJvcGRvd25FbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlbWVudCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAnZGF0YS1kcm9wZG93bi1wbGFjZW1lbnQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRTa2lkZGluZyA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAnZGF0YS1kcm9wZG93bi1vZmZzZXQtc2tpZGRpbmcnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXREaXN0YW5jZSA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAnZGF0YS1kcm9wZG93bi1vZmZzZXQtZGlzdGFuY2UnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmlnZ2VyVHlwZSA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAnZGF0YS1kcm9wZG93bi10cmlnZ2VyJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsYXkgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kcm9wZG93bi1kZWxheScpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlnbm9yZUNsaWNrT3V0c2lkZUNsYXNzID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgICAgICdkYXRhLWRyb3Bkb3duLWlnbm9yZS1jbGljay1vdXRzaWRlLWNsYXNzJ1xuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBuZXcgRHJvcGRvd24oXG4gICAgICAgICAgICAgICAgICAgICRkcm9wZG93bkVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCA/IHBsYWNlbWVudCA6IERlZmF1bHQucGxhY2VtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlclR5cGU6IHRyaWdnZXJUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0cmlnZ2VyVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogRGVmYXVsdC50cmlnZ2VyVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFNraWRkaW5nOiBvZmZzZXRTa2lkZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcGFyc2VJbnQob2Zmc2V0U2tpZGRpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBEZWZhdWx0Lm9mZnNldFNraWRkaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0RGlzdGFuY2U6IG9mZnNldERpc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChvZmZzZXREaXN0YW5jZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IERlZmF1bHQub2Zmc2V0RGlzdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogZGVsYXkgPyBwYXJzZUludChkZWxheSkgOiBEZWZhdWx0LmRlbGF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlQ2xpY2tPdXRzaWRlQ2xhc3M6IGlnbm9yZUNsaWNrT3V0c2lkZUNsYXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpZ25vcmVDbGlja091dHNpZGVDbGFzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogRGVmYXVsdC5pZ25vcmVDbGlja091dHNpZGVDbGFzcyxcbiAgICAgICAgICAgICAgICAgICAgfSBhcyBEcm9wZG93bk9wdGlvbnNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgVGhlIGRyb3Bkb3duIGVsZW1lbnQgd2l0aCBpZCBcIiR7ZHJvcGRvd25JZH1cIiBkb2VzIG5vdCBleGlzdC4gUGxlYXNlIGNoZWNrIHRoZSBkYXRhLWRyb3Bkb3duLXRvZ2dsZSBhdHRyaWJ1dGUuYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuRHJvcGRvd24gPSBEcm9wZG93bjtcbiAgICB3aW5kb3cuaW5pdERyb3Bkb3ducyA9IGluaXREcm9wZG93bnM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duO1xuIiwgImltcG9ydCB7IGluaXRBY2NvcmRpb25zIH0gZnJvbSAnLi9hY2NvcmRpb24nO1xuaW1wb3J0IHsgaW5pdENhcm91c2VscyB9IGZyb20gJy4vY2Fyb3VzZWwnO1xuaW1wb3J0IHsgaW5pdENvcHlDbGlwYm9hcmRzIH0gZnJvbSAnLi9jbGlwYm9hcmQnO1xuaW1wb3J0IHsgaW5pdENvbGxhcHNlcyB9IGZyb20gJy4vY29sbGFwc2UnO1xuaW1wb3J0IHsgaW5pdERpYWxzIH0gZnJvbSAnLi9kaWFsJztcbmltcG9ydCB7IGluaXREaXNtaXNzZXMgfSBmcm9tICcuL2Rpc21pc3MnO1xuaW1wb3J0IHsgaW5pdERyYXdlcnMgfSBmcm9tICcuL2RyYXdlcic7XG5pbXBvcnQgeyBpbml0RHJvcGRvd25zIH0gZnJvbSAnLi9kcm9wZG93bic7XG5pbXBvcnQgeyBpbml0SW5wdXRDb3VudGVycyB9IGZyb20gJy4vaW5wdXQtY291bnRlcic7XG5pbXBvcnQgeyBpbml0TW9kYWxzIH0gZnJvbSAnLi9tb2RhbCc7XG5pbXBvcnQgeyBpbml0UG9wb3ZlcnMgfSBmcm9tICcuL3BvcG92ZXInO1xuaW1wb3J0IHsgaW5pdFRhYnMgfSBmcm9tICcuL3RhYnMnO1xuaW1wb3J0IHsgaW5pdFRvb2x0aXBzIH0gZnJvbSAnLi90b29sdGlwJztcbmltcG9ydCB7IGluaXREYXRlcGlja2VycyB9IGZyb20gJy4vZGF0ZXBpY2tlcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0Rmxvd2JpdGUoKSB7XG4gICAgaW5pdEFjY29yZGlvbnMoKTtcbiAgICBpbml0Q29sbGFwc2VzKCk7XG4gICAgaW5pdENhcm91c2VscygpO1xuICAgIGluaXREaXNtaXNzZXMoKTtcbiAgICBpbml0RHJvcGRvd25zKCk7XG4gICAgaW5pdE1vZGFscygpO1xuICAgIGluaXREcmF3ZXJzKCk7XG4gICAgaW5pdFRhYnMoKTtcbiAgICBpbml0VG9vbHRpcHMoKTtcbiAgICBpbml0UG9wb3ZlcnMoKTtcbiAgICBpbml0RGlhbHMoKTtcbiAgICBpbml0SW5wdXRDb3VudGVycygpO1xuICAgIGluaXRDb3B5Q2xpcGJvYXJkcygpO1xuICAgIGluaXREYXRlcGlja2VycygpO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuaW5pdEZsb3diaXRlID0gaW5pdEZsb3diaXRlO1xufVxuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiAqL1xuaW1wb3J0IHR5cGUgeyBJbnB1dENvdW50ZXJPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEluc3RhbmNlT3B0aW9ucyB9IGZyb20gJy4uLy4uL2RvbS90eXBlcyc7XG5pbXBvcnQgeyBJbnB1dENvdW50ZXJJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgaW5zdGFuY2VzIGZyb20gJy4uLy4uL2RvbS9pbnN0YW5jZXMnO1xuXG5jb25zdCBEZWZhdWx0OiBJbnB1dENvdW50ZXJPcHRpb25zID0ge1xuICAgIG1pblZhbHVlOiBudWxsLFxuICAgIG1heFZhbHVlOiBudWxsLFxuICAgIG9uSW5jcmVtZW50OiAoKSA9PiB7fSxcbiAgICBvbkRlY3JlbWVudDogKCkgPT4ge30sXG59O1xuXG5jb25zdCBEZWZhdWx0SW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSB7XG4gICAgaWQ6IG51bGwsXG4gICAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5jbGFzcyBJbnB1dENvdW50ZXIgaW1wbGVtZW50cyBJbnB1dENvdW50ZXJJbnRlcmZhY2Uge1xuICAgIF9pbnN0YW5jZUlkOiBzdHJpbmc7XG4gICAgX3RhcmdldEVsOiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbDtcbiAgICBfaW5jcmVtZW50RWw6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBfZGVjcmVtZW50RWw6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBfb3B0aW9uczogSW5wdXRDb3VudGVyT3B0aW9ucztcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gICAgX2luY3JlbWVudENsaWNrSGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfZGVjcmVtZW50Q2xpY2tIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF9pbnB1dEhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdGFyZ2V0RWw6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgaW5jcmVtZW50RWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIGRlY3JlbWVudEVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBvcHRpb25zOiBJbnB1dENvdW50ZXJPcHRpb25zID0gRGVmYXVsdCxcbiAgICAgICAgaW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSBEZWZhdWx0SW5zdGFuY2VPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlSWQgPSBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgID8gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA6IHRhcmdldEVsLmlkO1xuXG4gICAgICAgIHRoaXMuX3RhcmdldEVsID0gdGFyZ2V0RWw7XG4gICAgICAgIHRoaXMuX2luY3JlbWVudEVsID0gaW5jcmVtZW50RWw7XG4gICAgICAgIHRoaXMuX2RlY3JlbWVudEVsID0gZGVjcmVtZW50RWw7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB7IC4uLkRlZmF1bHQsIC4uLm9wdGlvbnMgfTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgaW5zdGFuY2VzLmFkZEluc3RhbmNlKFxuICAgICAgICAgICAgJ0lucHV0Q291bnRlcicsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGluc3RhbmNlT3B0aW9ucy5vdmVycmlkZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl90YXJnZXRFbCAmJiAhdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lucHV0SGFuZGxlciA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHZhbHVlIGlzIG51bWVyaWNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEvXlxcZCokLy50ZXN0KHRhcmdldC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZ2V4IHRvIGNoZWNrIGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQudmFsdWUgPSB0YXJnZXQudmFsdWUucmVwbGFjZSgvW15cXGRdL2csICcnKTsgLy8gUmVtb3ZlIG5vbi1udW1lcmljIGNoYXJhY3RlcnNcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciBtYXggdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5tYXhWYWx1ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQodGFyZ2V0LnZhbHVlKSA+IHRoaXMuX29wdGlvbnMubWF4VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQudmFsdWUgPSB0aGlzLl9vcHRpb25zLm1heFZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgbWluIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubWluVmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHRhcmdldC52YWx1ZSkgPCB0aGlzLl9vcHRpb25zLm1pblZhbHVlXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gdGhpcy5fb3B0aW9ucy5taW5WYWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5faW5jcmVtZW50Q2xpY2tIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jcmVtZW50KCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLl9kZWNyZW1lbnRDbGlja0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWNyZW1lbnQoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIEFkZCBldmVudCBsaXN0ZW5lciB0byByZXN0cmljdCBpbnB1dCB0byBudW1lcmljIHZhbHVlcyBvbmx5XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHRoaXMuX2lucHV0SGFuZGxlcik7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9pbmNyZW1lbnRFbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luY3JlbWVudEVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luY3JlbWVudENsaWNrSGFuZGxlclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9kZWNyZW1lbnRFbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlY3JlbWVudEVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlY3JlbWVudENsaWNrSGFuZGxlclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl90YXJnZXRFbCAmJiB0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9pbnB1dEhhbmRsZXIpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5faW5jcmVtZW50RWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmNyZW1lbnRFbC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmNyZW1lbnRDbGlja0hhbmRsZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX2RlY3JlbWVudEVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVjcmVtZW50RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVjcmVtZW50Q2xpY2tIYW5kbGVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgaW5zdGFuY2VzLnJlbW92ZUluc3RhbmNlKCdJbnB1dENvdW50ZXInLCB0aGlzLl9pbnN0YW5jZUlkKTtcbiAgICB9XG5cbiAgICBkZXN0cm95QW5kUmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnJlbW92ZUluc3RhbmNlKCk7XG4gICAgfVxuXG4gICAgZ2V0Q3VycmVudFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5fdGFyZ2V0RWwudmFsdWUpIHx8IDA7XG4gICAgfVxuXG4gICAgaW5jcmVtZW50KCkge1xuICAgICAgICAvLyBkb24ndCBpbmNyZW1lbnQgaWYgdGhlIHZhbHVlIGlzIGFscmVhZHkgYXQgdGhlIG1heGltdW0gdmFsdWVcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5tYXhWYWx1ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5nZXRDdXJyZW50VmFsdWUoKSA+PSB0aGlzLl9vcHRpb25zLm1heFZhbHVlXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwudmFsdWUgPSAodGhpcy5nZXRDdXJyZW50VmFsdWUoKSArIDEpLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25JbmNyZW1lbnQodGhpcyk7XG4gICAgfVxuXG4gICAgZGVjcmVtZW50KCkge1xuICAgICAgICAvLyBkb24ndCBkZWNyZW1lbnQgaWYgdGhlIHZhbHVlIGlzIGFscmVhZHkgYXQgdGhlIG1pbmltdW0gdmFsdWVcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5taW5WYWx1ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5nZXRDdXJyZW50VmFsdWUoKSA8PSB0aGlzLl9vcHRpb25zLm1pblZhbHVlXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwudmFsdWUgPSAodGhpcy5nZXRDdXJyZW50VmFsdWUoKSAtIDEpLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25EZWNyZW1lbnQodGhpcyk7XG4gICAgfVxuXG4gICAgdXBkYXRlT25JbmNyZW1lbnQoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkluY3JlbWVudCA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uRGVjcmVtZW50KGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMub25EZWNyZW1lbnQgPSBjYWxsYmFjaztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0SW5wdXRDb3VudGVycygpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1pbnB1dC1jb3VudGVyXScpLmZvckVhY2goKCR0YXJnZXRFbCkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXRJZCA9ICR0YXJnZXRFbC5pZDtcblxuICAgICAgICBjb25zdCAkaW5jcmVtZW50RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgJ1tkYXRhLWlucHV0LWNvdW50ZXItaW5jcmVtZW50PVwiJyArIHRhcmdldElkICsgJ1wiXSdcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCAkZGVjcmVtZW50RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgJ1tkYXRhLWlucHV0LWNvdW50ZXItZGVjcmVtZW50PVwiJyArIHRhcmdldElkICsgJ1wiXSdcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBtaW5WYWx1ZSA9ICR0YXJnZXRFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5wdXQtY291bnRlci1taW4nKTtcbiAgICAgICAgY29uc3QgbWF4VmFsdWUgPSAkdGFyZ2V0RWwuZ2V0QXR0cmlidXRlKCdkYXRhLWlucHV0LWNvdW50ZXItbWF4Jyk7XG5cbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHRhcmdldCBlbGVtZW50IGV4aXN0c1xuICAgICAgICBpZiAoJHRhcmdldEVsKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIWluc3RhbmNlcy5pbnN0YW5jZUV4aXN0cyhcbiAgICAgICAgICAgICAgICAgICAgJ0lucHV0Q291bnRlcicsXG4gICAgICAgICAgICAgICAgICAgICR0YXJnZXRFbC5nZXRBdHRyaWJ1dGUoJ2lkJylcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBuZXcgSW5wdXRDb3VudGVyKFxuICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0RWwgYXMgSFRNTElucHV0RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJGluY3JlbWVudEVsID8gKCRpbmNyZW1lbnRFbCBhcyBIVE1MRWxlbWVudCkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAkZGVjcmVtZW50RWwgPyAoJGRlY3JlbWVudEVsIGFzIEhUTUxFbGVtZW50KSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pblZhbHVlOiBtaW5WYWx1ZSA/IHBhcnNlSW50KG1pblZhbHVlKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhWYWx1ZTogbWF4VmFsdWUgPyBwYXJzZUludChtYXhWYWx1ZSkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9IGFzIElucHV0Q291bnRlck9wdGlvbnNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBgVGhlIHRhcmdldCBlbGVtZW50IHdpdGggaWQgXCIke3RhcmdldElkfVwiIGRvZXMgbm90IGV4aXN0LiBQbGVhc2UgY2hlY2sgdGhlIGRhdGEtaW5wdXQtY291bnRlciBhdHRyaWJ1dGUuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuSW5wdXRDb3VudGVyID0gSW5wdXRDb3VudGVyO1xuICAgIHdpbmRvdy5pbml0SW5wdXRDb3VudGVycyA9IGluaXRJbnB1dENvdW50ZXJzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBJbnB1dENvdW50ZXI7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uICovXG5pbXBvcnQgdHlwZSB7IE1vZGFsT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBJbnN0YW5jZU9wdGlvbnMsIEV2ZW50TGlzdGVuZXJJbnN0YW5jZSB9IGZyb20gJy4uLy4uL2RvbS90eXBlcyc7XG5pbXBvcnQgeyBNb2RhbEludGVyZmFjZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCBpbnN0YW5jZXMgZnJvbSAnLi4vLi4vZG9tL2luc3RhbmNlcyc7XG5cbmNvbnN0IERlZmF1bHQ6IE1vZGFsT3B0aW9ucyA9IHtcbiAgICBwbGFjZW1lbnQ6ICdjZW50ZXInLFxuICAgIGJhY2tkcm9wQ2xhc3NlczogJ2JnLWdyYXktOTAwLzUwIGRhcms6YmctZ3JheS05MDAvODAgZml4ZWQgaW5zZXQtMCB6LTQwJyxcbiAgICBiYWNrZHJvcDogJ2R5bmFtaWMnLFxuICAgIGNsb3NhYmxlOiB0cnVlLFxuICAgIG9uSGlkZTogKCkgPT4ge30sXG4gICAgb25TaG93OiAoKSA9PiB7fSxcbiAgICBvblRvZ2dsZTogKCkgPT4ge30sXG59O1xuXG5jb25zdCBEZWZhdWx0SW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSB7XG4gICAgaWQ6IG51bGwsXG4gICAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5jbGFzcyBNb2RhbCBpbXBsZW1lbnRzIE1vZGFsSW50ZXJmYWNlIHtcbiAgICBfaW5zdGFuY2VJZDogc3RyaW5nO1xuICAgIF90YXJnZXRFbDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIF9vcHRpb25zOiBNb2RhbE9wdGlvbnM7XG4gICAgX2lzSGlkZGVuOiBib29sZWFuO1xuICAgIF9iYWNrZHJvcEVsOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gICAgX2NsaWNrT3V0c2lkZUV2ZW50TGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG4gICAgX2tleWRvd25FdmVudExpc3RlbmVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF9ldmVudExpc3RlbmVySW5zdGFuY2VzOiBFdmVudExpc3RlbmVySW5zdGFuY2VbXSA9IFtdO1xuICAgIF9pbml0aWFsaXplZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB0YXJnZXRFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgb3B0aW9uczogTW9kYWxPcHRpb25zID0gRGVmYXVsdCxcbiAgICAgICAgaW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSBEZWZhdWx0SW5zdGFuY2VPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlSWQgPSBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgID8gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA6IHRhcmdldEVsLmlkO1xuICAgICAgICB0aGlzLl90YXJnZXRFbCA9IHRhcmdldEVsO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX2lzSGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3BFbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICBpbnN0YW5jZXMuYWRkSW5zdGFuY2UoXG4gICAgICAgICAgICAnTW9kYWwnLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5fdGFyZ2V0RWwgJiYgIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl9nZXRQbGFjZW1lbnRDbGFzc2VzKCkubWFwKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZChjKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJJbnN0YW5jZXMoKTtcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lCYWNrZHJvcEVsKCk7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIGluc3RhbmNlcy5yZW1vdmVJbnN0YW5jZSgnTW9kYWwnLCB0aGlzLl9pbnN0YW5jZUlkKTtcbiAgICB9XG5cbiAgICBkZXN0cm95QW5kUmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnJlbW92ZUluc3RhbmNlKCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUJhY2tkcm9wKCkge1xuICAgICAgICBpZiAodGhpcy5faXNIaWRkZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGJhY2tkcm9wRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGJhY2tkcm9wRWwuY2xhc3NMaXN0LmFkZChcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9vcHRpb25zLmJhY2tkcm9wQ2xhc3Nlcy5zcGxpdCgnICcpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmFwcGVuZChiYWNrZHJvcEVsKTtcbiAgICAgICAgICAgIHRoaXMuX2JhY2tkcm9wRWwgPSBiYWNrZHJvcEVsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2Rlc3Ryb3lCYWNrZHJvcEVsKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzSGlkZGVuICYmIHRoaXMuX2JhY2tkcm9wRWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2JhY2tkcm9wRWwucmVtb3ZlKCk7XG4gICAgICAgICAgICB0aGlzLl9iYWNrZHJvcEVsID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXR1cE1vZGFsQ2xvc2VFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYmFja2Ryb3AgPT09ICdkeW5hbWljJykge1xuICAgICAgICAgICAgdGhpcy5fY2xpY2tPdXRzaWRlRXZlbnRMaXN0ZW5lciA9IChldjogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZU91dHNpZGVDbGljayhldi50YXJnZXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGlja091dHNpZGVFdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9rZXlkb3duRXZlbnRMaXN0ZW5lciA9IChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ2tleWRvd24nLFxuICAgICAgICAgICAgdGhpcy5fa2V5ZG93bkV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgX3JlbW92ZU1vZGFsQ2xvc2VFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYmFja2Ryb3AgPT09ICdkeW5hbWljJykge1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgIHRoaXMuX2NsaWNrT3V0c2lkZUV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAna2V5ZG93bicsXG4gICAgICAgICAgICB0aGlzLl9rZXlkb3duRXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBfaGFuZGxlT3V0c2lkZUNsaWNrKHRhcmdldDogRXZlbnRUYXJnZXQpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGFyZ2V0ID09PSB0aGlzLl90YXJnZXRFbCB8fFxuICAgICAgICAgICAgKHRhcmdldCA9PT0gdGhpcy5fYmFja2Ryb3BFbCAmJiB0aGlzLmlzVmlzaWJsZSgpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2dldFBsYWNlbWVudENsYXNzZXMoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fb3B0aW9ucy5wbGFjZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIHRvcFxuICAgICAgICAgICAgY2FzZSAndG9wLWxlZnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2p1c3RpZnktc3RhcnQnLCAnaXRlbXMtc3RhcnQnXTtcbiAgICAgICAgICAgIGNhc2UgJ3RvcC1jZW50ZXInOlxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2p1c3RpZnktY2VudGVyJywgJ2l0ZW1zLXN0YXJ0J107XG4gICAgICAgICAgICBjYXNlICd0b3AtcmlnaHQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2p1c3RpZnktZW5kJywgJ2l0ZW1zLXN0YXJ0J107XG5cbiAgICAgICAgICAgIC8vIGNlbnRlclxuICAgICAgICAgICAgY2FzZSAnY2VudGVyLWxlZnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2p1c3RpZnktc3RhcnQnLCAnaXRlbXMtY2VudGVyJ107XG4gICAgICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2p1c3RpZnktY2VudGVyJywgJ2l0ZW1zLWNlbnRlciddO1xuICAgICAgICAgICAgY2FzZSAnY2VudGVyLXJpZ2h0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWydqdXN0aWZ5LWVuZCcsICdpdGVtcy1jZW50ZXInXTtcblxuICAgICAgICAgICAgLy8gYm90dG9tXG4gICAgICAgICAgICBjYXNlICdib3R0b20tbGVmdCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnanVzdGlmeS1zdGFydCcsICdpdGVtcy1lbmQnXTtcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbS1jZW50ZXInOlxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2p1c3RpZnktY2VudGVyJywgJ2l0ZW1zLWVuZCddO1xuICAgICAgICAgICAgY2FzZSAnYm90dG9tLXJpZ2h0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWydqdXN0aWZ5LWVuZCcsICdpdGVtcy1lbmQnXTtcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gWydqdXN0aWZ5LWNlbnRlcicsICdpdGVtcy1jZW50ZXInXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzSGlkZGVuKSB7XG4gICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblRvZ2dsZSh0aGlzKTtcbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgICBpZiAodGhpcy5pc0hpZGRlbikge1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZCgnZmxleCcpO1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCAndHJ1ZScpO1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpO1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlQmFja2Ryb3AoKTtcbiAgICAgICAgICAgIHRoaXMuX2lzSGlkZGVuID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIEFkZCBrZXlib2FyZCBldmVudCBsaXN0ZW5lciB0byB0aGUgZG9jdW1lbnRcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmNsb3NhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBNb2RhbENsb3NlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcHJldmVudCBib2R5IHNjcm9sbFxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdvdmVyZmxvdy1oaWRkZW4nKTtcblxuICAgICAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMub25TaG93KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZsZXgnKTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEVsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwucmVtb3ZlQXR0cmlidXRlKCdhcmlhLW1vZGFsJyk7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKTtcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lCYWNrZHJvcEVsKCk7XG4gICAgICAgICAgICB0aGlzLl9pc0hpZGRlbiA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIHJlLWFwcGx5IGJvZHkgc2Nyb2xsXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ292ZXJmbG93LWhpZGRlbicpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5jbG9zYWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZU1vZGFsQ2xvc2VFdmVudExpc3RlbmVycygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1Zpc2libGUoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5faXNIaWRkZW47XG4gICAgfVxuXG4gICAgaXNIaWRkZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0hpZGRlbjtcbiAgICB9XG5cbiAgICBhZGRFdmVudExpc3RlbmVySW5zdGFuY2UoXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICB0eXBlOiBzdHJpbmcsXG4gICAgICAgIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3RcbiAgICApIHtcbiAgICAgICAgdGhpcy5fZXZlbnRMaXN0ZW5lckluc3RhbmNlcy5wdXNoKHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlQWxsRXZlbnRMaXN0ZW5lckluc3RhbmNlcygpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRMaXN0ZW5lckluc3RhbmNlcy5tYXAoKGV2ZW50TGlzdGVuZXJJbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgZXZlbnRMaXN0ZW5lckluc3RhbmNlLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICBldmVudExpc3RlbmVySW5zdGFuY2UudHlwZSxcbiAgICAgICAgICAgICAgICBldmVudExpc3RlbmVySW5zdGFuY2UuaGFuZGxlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2V2ZW50TGlzdGVuZXJJbnN0YW5jZXMgPSBbXTtcbiAgICB9XG5cbiAgICBnZXRBbGxFdmVudExpc3RlbmVySW5zdGFuY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRMaXN0ZW5lckluc3RhbmNlcztcbiAgICB9XG5cbiAgICB1cGRhdGVPblNob3coY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3cgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPbkhpZGUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPblRvZ2dsZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uVG9nZ2xlID0gY2FsbGJhY2s7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdE1vZGFscygpIHtcbiAgICAvLyBpbml0aWF0ZSBtb2RhbCBiYXNlZCBvbiBkYXRhLW1vZGFsLXRhcmdldFxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW1vZGFsLXRhcmdldF0nKS5mb3JFYWNoKCgkdHJpZ2dlckVsKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vZGFsSWQgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1tb2RhbC10YXJnZXQnKTtcbiAgICAgICAgY29uc3QgJG1vZGFsRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2RhbElkKTtcblxuICAgICAgICBpZiAoJG1vZGFsRWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlbWVudCA9ICRtb2RhbEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1tb2RhbC1wbGFjZW1lbnQnKTtcbiAgICAgICAgICAgIGNvbnN0IGJhY2tkcm9wID0gJG1vZGFsRWwuZ2V0QXR0cmlidXRlKCdkYXRhLW1vZGFsLWJhY2tkcm9wJyk7XG4gICAgICAgICAgICBuZXcgTW9kYWwoXG4gICAgICAgICAgICAgICAgJG1vZGFsRWwgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCA/IHBsYWNlbWVudCA6IERlZmF1bHQucGxhY2VtZW50LFxuICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogYmFja2Ryb3AgPyBiYWNrZHJvcCA6IERlZmF1bHQuYmFja2Ryb3AsXG4gICAgICAgICAgICAgICAgfSBhcyBNb2RhbE9wdGlvbnNcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIGBNb2RhbCB3aXRoIGlkICR7bW9kYWxJZH0gZG9lcyBub3QgZXhpc3QuIEFyZSB5b3Ugc3VyZSB0aGF0IHRoZSBkYXRhLW1vZGFsLXRhcmdldCBhdHRyaWJ1dGUgcG9pbnRzIHRvIHRoZSBjb3JyZWN0IG1vZGFsIGlkPy5gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyB0b2dnbGUgbW9kYWwgdmlzaWJpbGl0eVxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW1vZGFsLXRvZ2dsZV0nKS5mb3JFYWNoKCgkdHJpZ2dlckVsKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vZGFsSWQgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1tb2RhbC10b2dnbGUnKTtcbiAgICAgICAgY29uc3QgJG1vZGFsRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2RhbElkKTtcblxuICAgICAgICBpZiAoJG1vZGFsRWwpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsOiBNb2RhbEludGVyZmFjZSA9IGluc3RhbmNlcy5nZXRJbnN0YW5jZShcbiAgICAgICAgICAgICAgICAnTW9kYWwnLFxuICAgICAgICAgICAgICAgIG1vZGFsSWRcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChtb2RhbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvZ2dsZU1vZGFsID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtb2RhbC50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICR0cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVNb2RhbCk7XG4gICAgICAgICAgICAgICAgbW9kYWwuYWRkRXZlbnRMaXN0ZW5lckluc3RhbmNlKFxuICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVNb2RhbFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBNb2RhbCB3aXRoIGlkICR7bW9kYWxJZH0gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLiBQbGVhc2UgaW5pdGlhbGl6ZSBpdCB1c2luZyB0aGUgZGF0YS1tb2RhbC10YXJnZXQgYXR0cmlidXRlLmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBgTW9kYWwgd2l0aCBpZCAke21vZGFsSWR9IGRvZXMgbm90IGV4aXN0LiBBcmUgeW91IHN1cmUgdGhhdCB0aGUgZGF0YS1tb2RhbC10b2dnbGUgYXR0cmlidXRlIHBvaW50cyB0byB0aGUgY29ycmVjdCBtb2RhbCBpZD9gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBzaG93IG1vZGFsIG9uIGNsaWNrIGlmIGV4aXN0cyBiYXNlZCBvbiBpZFxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW1vZGFsLXNob3ddJykuZm9yRWFjaCgoJHRyaWdnZXJFbCkgPT4ge1xuICAgICAgICBjb25zdCBtb2RhbElkID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kYWwtc2hvdycpO1xuICAgICAgICBjb25zdCAkbW9kYWxFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1vZGFsSWQpO1xuXG4gICAgICAgIGlmICgkbW9kYWxFbCkge1xuICAgICAgICAgICAgY29uc3QgbW9kYWw6IE1vZGFsSW50ZXJmYWNlID0gaW5zdGFuY2VzLmdldEluc3RhbmNlKFxuICAgICAgICAgICAgICAgICdNb2RhbCcsXG4gICAgICAgICAgICAgICAgbW9kYWxJZFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKG1vZGFsKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvd01vZGFsID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtb2RhbC5zaG93KCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAkdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2hvd01vZGFsKTtcbiAgICAgICAgICAgICAgICBtb2RhbC5hZGRFdmVudExpc3RlbmVySW5zdGFuY2UoXG4gICAgICAgICAgICAgICAgICAgICR0cmlnZ2VyRWwgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAgICAgICAgIHNob3dNb2RhbFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBNb2RhbCB3aXRoIGlkICR7bW9kYWxJZH0gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLiBQbGVhc2UgaW5pdGlhbGl6ZSBpdCB1c2luZyB0aGUgZGF0YS1tb2RhbC10YXJnZXQgYXR0cmlidXRlLmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBgTW9kYWwgd2l0aCBpZCAke21vZGFsSWR9IGRvZXMgbm90IGV4aXN0LiBBcmUgeW91IHN1cmUgdGhhdCB0aGUgZGF0YS1tb2RhbC1zaG93IGF0dHJpYnV0ZSBwb2ludHMgdG8gdGhlIGNvcnJlY3QgbW9kYWwgaWQ/YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gaGlkZSBtb2RhbCBvbiBjbGljayBpZiBleGlzdHMgYmFzZWQgb24gaWRcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1tb2RhbC1oaWRlXScpLmZvckVhY2goKCR0cmlnZ2VyRWwpID0+IHtcbiAgICAgICAgY29uc3QgbW9kYWxJZCA9ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLW1vZGFsLWhpZGUnKTtcbiAgICAgICAgY29uc3QgJG1vZGFsRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2RhbElkKTtcblxuICAgICAgICBpZiAoJG1vZGFsRWwpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsOiBNb2RhbEludGVyZmFjZSA9IGluc3RhbmNlcy5nZXRJbnN0YW5jZShcbiAgICAgICAgICAgICAgICAnTW9kYWwnLFxuICAgICAgICAgICAgICAgIG1vZGFsSWRcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChtb2RhbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhpZGVNb2RhbCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWwuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJHRyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhpZGVNb2RhbCk7XG4gICAgICAgICAgICAgICAgbW9kYWwuYWRkRXZlbnRMaXN0ZW5lckluc3RhbmNlKFxuICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgICAgICBoaWRlTW9kYWxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgTW9kYWwgd2l0aCBpZCAke21vZGFsSWR9IGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4gUGxlYXNlIGluaXRpYWxpemUgaXQgdXNpbmcgdGhlIGRhdGEtbW9kYWwtdGFyZ2V0IGF0dHJpYnV0ZS5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgYE1vZGFsIHdpdGggaWQgJHttb2RhbElkfSBkb2VzIG5vdCBleGlzdC4gQXJlIHlvdSBzdXJlIHRoYXQgdGhlIGRhdGEtbW9kYWwtaGlkZSBhdHRyaWJ1dGUgcG9pbnRzIHRvIHRoZSBjb3JyZWN0IG1vZGFsIGlkP2BcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93Lk1vZGFsID0gTW9kYWw7XG4gICAgd2luZG93LmluaXRNb2RhbHMgPSBpbml0TW9kYWxzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBNb2RhbDtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb24gKi9cbmltcG9ydCB7IGNyZWF0ZVBvcHBlciB9IGZyb20gJ0Bwb3BwZXJqcy9jb3JlJztcbmltcG9ydCB0eXBlIHtcbiAgICBPcHRpb25zIGFzIFBvcHBlck9wdGlvbnMsXG4gICAgSW5zdGFuY2UgYXMgUG9wcGVySW5zdGFuY2UsXG59IGZyb20gJ0Bwb3BwZXJqcy9jb3JlJztcbmltcG9ydCB0eXBlIHsgUG9wb3Zlck9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSW5zdGFuY2VPcHRpb25zIH0gZnJvbSAnLi4vLi4vZG9tL3R5cGVzJztcbmltcG9ydCB7IFBvcG92ZXJJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgaW5zdGFuY2VzIGZyb20gJy4uLy4uL2RvbS9pbnN0YW5jZXMnO1xuXG5jb25zdCBEZWZhdWx0OiBQb3BvdmVyT3B0aW9ucyA9IHtcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIG9mZnNldDogMTAsXG4gICAgdHJpZ2dlclR5cGU6ICdob3ZlcicsXG4gICAgb25TaG93OiAoKSA9PiB7fSxcbiAgICBvbkhpZGU6ICgpID0+IHt9LFxuICAgIG9uVG9nZ2xlOiAoKSA9PiB7fSxcbn07XG5cbmNvbnN0IERlZmF1bHRJbnN0YW5jZU9wdGlvbnM6IEluc3RhbmNlT3B0aW9ucyA9IHtcbiAgICBpZDogbnVsbCxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmNsYXNzIFBvcG92ZXIgaW1wbGVtZW50cyBQb3BvdmVySW50ZXJmYWNlIHtcbiAgICBfaW5zdGFuY2VJZDogc3RyaW5nO1xuICAgIF90YXJnZXRFbDogSFRNTEVsZW1lbnQ7XG4gICAgX3RyaWdnZXJFbDogSFRNTEVsZW1lbnQ7XG4gICAgX29wdGlvbnM6IFBvcG92ZXJPcHRpb25zO1xuICAgIF9wb3BwZXJJbnN0YW5jZTogUG9wcGVySW5zdGFuY2U7XG4gICAgX2NsaWNrT3V0c2lkZUV2ZW50TGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG4gICAgX2tleWRvd25FdmVudExpc3RlbmVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF92aXNpYmxlOiBib29sZWFuO1xuICAgIF9pbml0aWFsaXplZDogYm9vbGVhbjtcbiAgICBfc2hvd0hhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG4gICAgX2hpZGVIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHRhcmdldEVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICB0cmlnZ2VyRWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIG9wdGlvbnM6IFBvcG92ZXJPcHRpb25zID0gRGVmYXVsdCxcbiAgICAgICAgaW5zdGFuY2VPcHRpb25zOiBJbnN0YW5jZU9wdGlvbnMgPSBEZWZhdWx0SW5zdGFuY2VPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlSWQgPSBpbnN0YW5jZU9wdGlvbnMuaWRcbiAgICAgICAgICAgID8gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA6IHRhcmdldEVsLmlkO1xuICAgICAgICB0aGlzLl90YXJnZXRFbCA9IHRhcmdldEVsO1xuICAgICAgICB0aGlzLl90cmlnZ2VyRWwgPSB0cmlnZ2VyRWw7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB7IC4uLkRlZmF1bHQsIC4uLm9wdGlvbnMgfTtcbiAgICAgICAgdGhpcy5fcG9wcGVySW5zdGFuY2UgPSBudWxsO1xuICAgICAgICB0aGlzLl92aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICBpbnN0YW5jZXMuYWRkSW5zdGFuY2UoXG4gICAgICAgICAgICAnUG9wb3ZlcicsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgaW5zdGFuY2VPcHRpb25zLmlkID8gaW5zdGFuY2VPcHRpb25zLmlkIDogdGhpcy5fdGFyZ2V0RWwuaWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsICYmIHRoaXMuX3RhcmdldEVsICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0dXBFdmVudExpc3RlbmVycygpO1xuICAgICAgICAgICAgdGhpcy5fcG9wcGVySW5zdGFuY2UgPSB0aGlzLl9jcmVhdGVQb3BwZXJJbnN0YW5jZSgpO1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgZXZlbnQgbGlzdGVuZXJzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdHJpZ2dlciBlbGVtZW50IGFuZCB0YXJnZXQgZWxlbWVudFxuICAgICAgICAgICAgY29uc3QgdHJpZ2dlckV2ZW50cyA9IHRoaXMuX2dldFRyaWdnZXJFdmVudHMoKTtcblxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50cy5zaG93RXZlbnRzLmZvckVhY2goKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXYsIHRoaXMuX3Nob3dIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9zaG93SGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50cy5oaWRlRXZlbnRzLmZvckVhY2goKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXYsIHRoaXMuX2hpZGVIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9oaWRlSGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyBmb3Iga2V5ZG93blxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlS2V5ZG93bkxpc3RlbmVyKCk7XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgZm9yIGNsaWNrIG91dHNpZGVcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUNsaWNrT3V0c2lkZUxpc3RlbmVyKCk7XG5cbiAgICAgICAgICAgIC8vIGRlc3Ryb3kgdGhlIFBvcHBlciBpbnN0YW5jZSBpZiB5b3UgaGF2ZSBvbmUgKGFzc3VtaW5nIHRoaXMuX3BvcHBlckluc3RhbmNlIGlzIHRoZSBQb3BwZXIgaW5zdGFuY2UpXG4gICAgICAgICAgICBpZiAodGhpcy5fcG9wcGVySW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgaW5zdGFuY2VzLnJlbW92ZUluc3RhbmNlKCdQb3BvdmVyJywgdGhpcy5faW5zdGFuY2VJZCk7XG4gICAgfVxuXG4gICAgZGVzdHJveUFuZFJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIF9zZXR1cEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICBjb25zdCB0cmlnZ2VyRXZlbnRzID0gdGhpcy5fZ2V0VHJpZ2dlckV2ZW50cygpO1xuXG4gICAgICAgIHRoaXMuX3Nob3dIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5faGlkZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3RhcmdldEVsLm1hdGNoZXMoJzpob3ZlcicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdHJpZ2dlckV2ZW50cy5zaG93RXZlbnRzLmZvckVhY2goKGV2KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5fc2hvd0hhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0RWwuYWRkRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5fc2hvd0hhbmRsZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0cmlnZ2VyRXZlbnRzLmhpZGVFdmVudHMuZm9yRWFjaCgoZXYpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9oaWRlSGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRFbC5hZGRFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9oaWRlSGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9jcmVhdGVQb3BwZXJJbnN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVBvcHBlcih0aGlzLl90cmlnZ2VyRWwsIHRoaXMuX3RhcmdldEVsLCB7XG4gICAgICAgICAgICBwbGFjZW1lbnQ6IHRoaXMuX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBbMCwgdGhpcy5fb3B0aW9ucy5vZmZzZXRdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfZ2V0VHJpZ2dlckV2ZW50cygpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9vcHRpb25zLnRyaWdnZXJUeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdob3Zlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogWydtb3VzZWVudGVyJywgJ2ZvY3VzJ10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFsnbW91c2VsZWF2ZScsICdibHVyJ10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ2NsaWNrJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnRzOiBbJ2NsaWNrJywgJ2ZvY3VzJ10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFsnZm9jdXNvdXQnLCAnYmx1ciddLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZUV2ZW50czogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50czogWydtb3VzZWVudGVyJywgJ2ZvY3VzJ10sXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdmVudHM6IFsnbW91c2VsZWF2ZScsICdibHVyJ10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXR1cEtleWRvd25MaXN0ZW5lcigpIHtcbiAgICAgICAgdGhpcy5fa2V5ZG93bkV2ZW50TGlzdGVuZXIgPSAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldi5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdrZXlkb3duJyxcbiAgICAgICAgICAgIHRoaXMuX2tleWRvd25FdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIF9yZW1vdmVLZXlkb3duTGlzdGVuZXIoKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdrZXlkb3duJyxcbiAgICAgICAgICAgIHRoaXMuX2tleWRvd25FdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIF9zZXR1cENsaWNrT3V0c2lkZUxpc3RlbmVyKCkge1xuICAgICAgICB0aGlzLl9jbGlja091dHNpZGVFdmVudExpc3RlbmVyID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVDbGlja091dHNpZGUoZXYsIHRoaXMuX3RhcmdldEVsKTtcbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrT3V0c2lkZUV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgX3JlbW92ZUNsaWNrT3V0c2lkZUxpc3RlbmVyKCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgdGhpcy5fY2xpY2tPdXRzaWRlRXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBfaGFuZGxlQ2xpY2tPdXRzaWRlKGV2OiBFdmVudCwgdGFyZ2V0RWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNsaWNrZWRFbCA9IGV2LnRhcmdldCBhcyBOb2RlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjbGlja2VkRWwgIT09IHRhcmdldEVsICYmXG4gICAgICAgICAgICAhdGFyZ2V0RWwuY29udGFpbnMoY2xpY2tlZEVsKSAmJlxuICAgICAgICAgICAgIXRoaXMuX3RyaWdnZXJFbC5jb250YWlucyhjbGlja2VkRWwpICYmXG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSgpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1Zpc2libGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aXNpYmxlO1xuICAgIH1cblxuICAgIHRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblRvZ2dsZSh0aGlzKTtcbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QucmVtb3ZlKCdvcGFjaXR5LTAnLCAnaW52aXNpYmxlJyk7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5hZGQoJ29wYWNpdHktMTAwJywgJ3Zpc2libGUnKTtcblxuICAgICAgICAvLyBFbmFibGUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZS5zZXRPcHRpb25zKChvcHRpb25zOiBQb3BwZXJPcHRpb25zKSA9PiAoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIG1vZGlmaWVyczogW1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMubW9kaWZpZXJzLFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJywgZW5hYmxlZDogdHJ1ZSB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIGhhbmRsZSBjbGljayBvdXRzaWRlXG4gICAgICAgIHRoaXMuX3NldHVwQ2xpY2tPdXRzaWRlTGlzdGVuZXIoKTtcblxuICAgICAgICAvLyBoYW5kbGUgZXNjIGtleWRvd25cbiAgICAgICAgdGhpcy5fc2V0dXBLZXlkb3duTGlzdGVuZXIoKTtcblxuICAgICAgICAvLyBVcGRhdGUgaXRzIHBvc2l0aW9uXG4gICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlLnVwZGF0ZSgpO1xuXG4gICAgICAgIC8vIHNldCB2aXNpYmlsaXR5IHRvIHRydWVcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3codGhpcyk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LnJlbW92ZSgnb3BhY2l0eS0xMDAnLCAndmlzaWJsZScpO1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCdvcGFjaXR5LTAnLCAnaW52aXNpYmxlJyk7XG5cbiAgICAgICAgLy8gRGlzYWJsZSB0aGUgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlLnNldE9wdGlvbnMoKG9wdGlvbnM6IFBvcHBlck9wdGlvbnMpID0+ICh7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBbXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5tb2RpZmllcnMsXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLCBlbmFibGVkOiBmYWxzZSB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIGhhbmRsZSBjbGljayBvdXRzaWRlXG4gICAgICAgIHRoaXMuX3JlbW92ZUNsaWNrT3V0c2lkZUxpc3RlbmVyKCk7XG5cbiAgICAgICAgLy8gaGFuZGxlIGVzYyBrZXlkb3duXG4gICAgICAgIHRoaXMuX3JlbW92ZUtleWRvd25MaXN0ZW5lcigpO1xuXG4gICAgICAgIC8vIHNldCB2aXNpYmlsaXR5IHRvIGZhbHNlXG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSGlkZSh0aGlzKTtcbiAgICB9XG5cbiAgICB1cGRhdGVPblNob3coY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3cgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPbkhpZGUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPblRvZ2dsZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uVG9nZ2xlID0gY2FsbGJhY2s7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFBvcG92ZXJzKCkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXBvcG92ZXItdGFyZ2V0XScpLmZvckVhY2goKCR0cmlnZ2VyRWwpID0+IHtcbiAgICAgICAgY29uc3QgcG9wb3ZlcklEID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcG9wb3Zlci10YXJnZXQnKTtcbiAgICAgICAgY29uc3QgJHBvcG92ZXJFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBvcG92ZXJJRCk7XG5cbiAgICAgICAgaWYgKCRwb3BvdmVyRWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyaWdnZXJUeXBlID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcG9wb3Zlci10cmlnZ2VyJyk7XG4gICAgICAgICAgICBjb25zdCBwbGFjZW1lbnQgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS1wb3BvdmVyLXBsYWNlbWVudCcpO1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcG9wb3Zlci1vZmZzZXQnKTtcblxuICAgICAgICAgICAgbmV3IFBvcG92ZXIoXG4gICAgICAgICAgICAgICAgJHBvcG92ZXJFbCBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAkdHJpZ2dlckVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQgPyBwbGFjZW1lbnQgOiBEZWZhdWx0LnBsYWNlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgPyBwYXJzZUludChvZmZzZXQpIDogRGVmYXVsdC5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJUeXBlOiB0cmlnZ2VyVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0cmlnZ2VyVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBEZWZhdWx0LnRyaWdnZXJUeXBlLFxuICAgICAgICAgICAgICAgIH0gYXMgUG9wb3Zlck9wdGlvbnNcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIGBUaGUgcG9wb3ZlciBlbGVtZW50IHdpdGggaWQgXCIke3BvcG92ZXJJRH1cIiBkb2VzIG5vdCBleGlzdC4gUGxlYXNlIGNoZWNrIHRoZSBkYXRhLXBvcG92ZXItdGFyZ2V0IGF0dHJpYnV0ZS5gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpbmRvdy5Qb3BvdmVyID0gUG9wb3ZlcjtcbiAgICB3aW5kb3cuaW5pdFBvcG92ZXJzID0gaW5pdFBvcG92ZXJzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQb3BvdmVyO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiAqL1xuaW1wb3J0IHR5cGUgeyBUYWJJdGVtLCBUYWJzT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBJbnN0YW5jZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9kb20vdHlwZXMnO1xuaW1wb3J0IHsgVGFic0ludGVyZmFjZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCBpbnN0YW5jZXMgZnJvbSAnLi4vLi4vZG9tL2luc3RhbmNlcyc7XG5cbmNvbnN0IERlZmF1bHQ6IFRhYnNPcHRpb25zID0ge1xuICAgIGRlZmF1bHRUYWJJZDogbnVsbCxcbiAgICBhY3RpdmVDbGFzc2VzOlxuICAgICAgICAndGV4dC1ibHVlLTYwMCBob3Zlcjp0ZXh0LWJsdWUtNjAwIGRhcms6dGV4dC1ibHVlLTUwMCBkYXJrOmhvdmVyOnRleHQtYmx1ZS01MDAgYm9yZGVyLWJsdWUtNjAwIGRhcms6Ym9yZGVyLWJsdWUtNTAwJyxcbiAgICBpbmFjdGl2ZUNsYXNzZXM6XG4gICAgICAgICdkYXJrOmJvcmRlci10cmFuc3BhcmVudCB0ZXh0LWdyYXktNTAwIGhvdmVyOnRleHQtZ3JheS02MDAgZGFyazp0ZXh0LWdyYXktNDAwIGJvcmRlci1ncmF5LTEwMCBob3Zlcjpib3JkZXItZ3JheS0zMDAgZGFyazpib3JkZXItZ3JheS03MDAgZGFyazpob3Zlcjp0ZXh0LWdyYXktMzAwJyxcbiAgICBvblNob3c6ICgpID0+IHt9LFxufTtcblxuY29uc3QgRGVmYXVsdEluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0ge1xuICAgIGlkOiBudWxsLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuY2xhc3MgVGFicyBpbXBsZW1lbnRzIFRhYnNJbnRlcmZhY2Uge1xuICAgIF9pbnN0YW5jZUlkOiBzdHJpbmc7XG4gICAgX3RhYnNFbDogSFRNTEVsZW1lbnQ7XG4gICAgX2l0ZW1zOiBUYWJJdGVtW107XG4gICAgX2FjdGl2ZVRhYjogVGFiSXRlbTtcbiAgICBfb3B0aW9uczogVGFic09wdGlvbnM7XG4gICAgX2luaXRpYWxpemVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHRhYnNFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgaXRlbXM6IFRhYkl0ZW1bXSA9IFtdLFxuICAgICAgICBvcHRpb25zOiBUYWJzT3B0aW9ucyA9IERlZmF1bHQsXG4gICAgICAgIGluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0gRGVmYXVsdEluc3RhbmNlT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZUlkID0gaW5zdGFuY2VPcHRpb25zLmlkID8gaW5zdGFuY2VPcHRpb25zLmlkIDogdGFic0VsLmlkO1xuICAgICAgICB0aGlzLl90YWJzRWwgPSB0YWJzRWw7XG4gICAgICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRhYiA9IG9wdGlvbnMgPyB0aGlzLmdldFRhYihvcHRpb25zLmRlZmF1bHRUYWJJZCkgOiBudWxsO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICBpbnN0YW5jZXMuYWRkSW5zdGFuY2UoXG4gICAgICAgICAgICAnVGFicycsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGluc3RhbmNlT3B0aW9ucy5vdmVycmlkZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pdGVtcy5sZW5ndGggJiYgIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAvLyBzZXQgdGhlIGZpcnN0IHRhYiBhcyBhY3RpdmUgaWYgbm90IHNldCBieSBleHBsaWNpdGx5XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2FjdGl2ZVRhYikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlVGFiKHRoaXMuX2l0ZW1zWzBdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZm9yY2Ugc2hvdyB0aGUgZmlyc3QgZGVmYXVsdCB0YWJcbiAgICAgICAgICAgIHRoaXMuc2hvdyh0aGlzLl9hY3RpdmVUYWIuaWQsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBzaG93IHRhYiBjb250ZW50IGJhc2VkIG9uIGNsaWNrXG4gICAgICAgICAgICB0aGlzLl9pdGVtcy5tYXAoKHRhYikgPT4ge1xuICAgICAgICAgICAgICAgIHRhYi50cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KHRhYi5pZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgaW5zdGFuY2VzLnJlbW92ZUluc3RhbmNlKCdUYWJzJywgdGhpcy5faW5zdGFuY2VJZCk7XG4gICAgfVxuXG4gICAgZGVzdHJveUFuZFJlbW92ZUluc3RhbmNlKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIGdldEFjdGl2ZVRhYigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVRhYjtcbiAgICB9XG5cbiAgICBzZXRBY3RpdmVUYWIodGFiOiBUYWJJdGVtKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRhYiA9IHRhYjtcbiAgICB9XG5cbiAgICBnZXRUYWIoaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faXRlbXMuZmlsdGVyKCh0KSA9PiB0LmlkID09PSBpZClbMF07XG4gICAgfVxuXG4gICAgc2hvdyhpZDogc3RyaW5nLCBmb3JjZVNob3cgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCB0YWIgPSB0aGlzLmdldFRhYihpZCk7XG5cbiAgICAgICAgLy8gZG9uJ3QgZG8gYW55dGhpbmcgaWYgYWxyZWFkeSBhY3RpdmVcbiAgICAgICAgaWYgKHRhYiA9PT0gdGhpcy5fYWN0aXZlVGFiICYmICFmb3JjZVNob3cpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhpZGUgb3RoZXIgdGFic1xuICAgICAgICB0aGlzLl9pdGVtcy5tYXAoKHQ6IFRhYkl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmICh0ICE9PSB0YWIpIHtcbiAgICAgICAgICAgICAgICB0LnRyaWdnZXJFbC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLl9vcHRpb25zLmFjdGl2ZUNsYXNzZXMuc3BsaXQoJyAnKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdC50cmlnZ2VyRWwuY2xhc3NMaXN0LmFkZChcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5fb3B0aW9ucy5pbmFjdGl2ZUNsYXNzZXMuc3BsaXQoJyAnKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdC50YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICB0LnRyaWdnZXJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc2hvdyBhY3RpdmUgdGFiXG4gICAgICAgIHRhYi50cmlnZ2VyRWwuY2xhc3NMaXN0LmFkZCguLi50aGlzLl9vcHRpb25zLmFjdGl2ZUNsYXNzZXMuc3BsaXQoJyAnKSk7XG4gICAgICAgIHRhYi50cmlnZ2VyRWwuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgICAgICAgIC4uLnRoaXMuX29wdGlvbnMuaW5hY3RpdmVDbGFzc2VzLnNwbGl0KCcgJylcbiAgICAgICAgKTtcbiAgICAgICAgdGFiLnRyaWdnZXJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xuICAgICAgICB0YWIudGFyZ2V0RWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG5cbiAgICAgICAgdGhpcy5zZXRBY3RpdmVUYWIodGFiKTtcblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uU2hvdyh0aGlzLCB0YWIpO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uU2hvdyhjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uU2hvdyA9IGNhbGxiYWNrO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRUYWJzKCkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRhYnMtdG9nZ2xlXScpLmZvckVhY2goKCRwYXJlbnRFbCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJJdGVtczogVGFiSXRlbVtdID0gW107XG4gICAgICAgIGNvbnN0IGFjdGl2ZUNsYXNzZXMgPSAkcGFyZW50RWwuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgJ2RhdGEtdGFicy1hY3RpdmUtY2xhc3NlcydcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgaW5hY3RpdmVDbGFzc2VzID0gJHBhcmVudEVsLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICdkYXRhLXRhYnMtaW5hY3RpdmUtY2xhc3NlcydcbiAgICAgICAgKTtcbiAgICAgICAgbGV0IGRlZmF1bHRUYWJJZCA9IG51bGw7XG4gICAgICAgICRwYXJlbnRFbFxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tyb2xlPVwidGFiXCJdJylcbiAgICAgICAgICAgIC5mb3JFYWNoKCgkdHJpZ2dlckVsOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQWN0aXZlID1cbiAgICAgICAgICAgICAgICAgICAgJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnKSA9PT0gJ3RydWUnO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhYjogVGFiSXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICR0cmlnZ2VyRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXRhYnMtdGFyZ2V0JyksXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJFbDogJHRyaWdnZXJFbCxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS10YWJzLXRhcmdldCcpXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0YWJJdGVtcy5wdXNoKHRhYik7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFRhYklkID0gdGFiLmlkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBUYWJzKCRwYXJlbnRFbCBhcyBIVE1MRWxlbWVudCwgdGFiSXRlbXMsIHtcbiAgICAgICAgICAgIGRlZmF1bHRUYWJJZDogZGVmYXVsdFRhYklkLFxuICAgICAgICAgICAgYWN0aXZlQ2xhc3NlczogYWN0aXZlQ2xhc3Nlc1xuICAgICAgICAgICAgICAgID8gYWN0aXZlQ2xhc3Nlc1xuICAgICAgICAgICAgICAgIDogRGVmYXVsdC5hY3RpdmVDbGFzc2VzLFxuICAgICAgICAgICAgaW5hY3RpdmVDbGFzc2VzOiBpbmFjdGl2ZUNsYXNzZXNcbiAgICAgICAgICAgICAgICA/IGluYWN0aXZlQ2xhc3Nlc1xuICAgICAgICAgICAgICAgIDogRGVmYXVsdC5pbmFjdGl2ZUNsYXNzZXMsXG4gICAgICAgIH0gYXMgVGFic09wdGlvbnMpO1xuICAgIH0pO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuVGFicyA9IFRhYnM7XG4gICAgd2luZG93LmluaXRUYWJzID0gaW5pdFRhYnM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhYnM7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uICovXG5pbXBvcnQgeyBjcmVhdGVQb3BwZXIgfSBmcm9tICdAcG9wcGVyanMvY29yZSc7XG5pbXBvcnQgdHlwZSB7XG4gICAgT3B0aW9ucyBhcyBQb3BwZXJPcHRpb25zLFxuICAgIEluc3RhbmNlIGFzIFBvcHBlckluc3RhbmNlLFxufSBmcm9tICdAcG9wcGVyanMvY29yZSc7XG5pbXBvcnQgdHlwZSB7IFRvb2x0aXBPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEluc3RhbmNlT3B0aW9ucyB9IGZyb20gJy4uLy4uL2RvbS90eXBlcyc7XG5pbXBvcnQgeyBUb29sdGlwSW50ZXJmYWNlIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IGluc3RhbmNlcyBmcm9tICcuLi8uLi9kb20vaW5zdGFuY2VzJztcblxuY29uc3QgRGVmYXVsdDogVG9vbHRpcE9wdGlvbnMgPSB7XG4gICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICB0cmlnZ2VyVHlwZTogJ2hvdmVyJyxcbiAgICBvblNob3c6ICgpID0+IHt9LFxuICAgIG9uSGlkZTogKCkgPT4ge30sXG4gICAgb25Ub2dnbGU6ICgpID0+IHt9LFxufTtcblxuY29uc3QgRGVmYXVsdEluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0ge1xuICAgIGlkOiBudWxsLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuY2xhc3MgVG9vbHRpcCBpbXBsZW1lbnRzIFRvb2x0aXBJbnRlcmZhY2Uge1xuICAgIF9pbnN0YW5jZUlkOiBzdHJpbmc7XG4gICAgX3RhcmdldEVsOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gICAgX3RyaWdnZXJFbDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIF9vcHRpb25zOiBUb29sdGlwT3B0aW9ucztcbiAgICBfcG9wcGVySW5zdGFuY2U6IFBvcHBlckluc3RhbmNlO1xuICAgIF9jbGlja091dHNpZGVFdmVudExpc3RlbmVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF9rZXlkb3duRXZlbnRMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcbiAgICBfdmlzaWJsZTogYm9vbGVhbjtcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gICAgX3Nob3dIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIF9oaWRlSGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB0YXJnZXRFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCxcbiAgICAgICAgdHJpZ2dlckVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLFxuICAgICAgICBvcHRpb25zOiBUb29sdGlwT3B0aW9ucyA9IERlZmF1bHQsXG4gICAgICAgIGluc3RhbmNlT3B0aW9uczogSW5zdGFuY2VPcHRpb25zID0gRGVmYXVsdEluc3RhbmNlT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZUlkID0gaW5zdGFuY2VPcHRpb25zLmlkXG4gICAgICAgICAgICA/IGluc3RhbmNlT3B0aW9ucy5pZFxuICAgICAgICAgICAgOiB0YXJnZXRFbC5pZDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwgPSB0YXJnZXRFbDtcbiAgICAgICAgdGhpcy5fdHJpZ2dlckVsID0gdHJpZ2dlckVsO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0geyAuLi5EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgaW5zdGFuY2VzLmFkZEluc3RhbmNlKFxuICAgICAgICAgICAgJ1Rvb2x0aXAnLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSWQsXG4gICAgICAgICAgICBpbnN0YW5jZU9wdGlvbnMub3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckVsICYmIHRoaXMuX3RhcmdldEVsICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0dXBFdmVudExpc3RlbmVycygpO1xuICAgICAgICAgICAgdGhpcy5fcG9wcGVySW5zdGFuY2UgPSB0aGlzLl9jcmVhdGVQb3BwZXJJbnN0YW5jZSgpO1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgZXZlbnQgbGlzdGVuZXJzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdHJpZ2dlciBlbGVtZW50XG4gICAgICAgICAgICBjb25zdCB0cmlnZ2VyRXZlbnRzID0gdGhpcy5fZ2V0VHJpZ2dlckV2ZW50cygpO1xuXG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnRzLnNob3dFdmVudHMuZm9yRWFjaCgoZXYpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5fc2hvd0hhbmRsZXIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRyaWdnZXJFdmVudHMuaGlkZUV2ZW50cy5mb3JFYWNoKChldikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9oaWRlSGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyBmb3Iga2V5ZG93blxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlS2V5ZG93bkxpc3RlbmVyKCk7XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgZm9yIGNsaWNrIG91dHNpZGVcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUNsaWNrT3V0c2lkZUxpc3RlbmVyKCk7XG5cbiAgICAgICAgICAgIC8vIGRlc3Ryb3kgdGhlIFBvcHBlciBpbnN0YW5jZSBpZiB5b3UgaGF2ZSBvbmUgKGFzc3VtaW5nIHRoaXMuX3BvcHBlckluc3RhbmNlIGlzIHRoZSBQb3BwZXIgaW5zdGFuY2UpXG4gICAgICAgICAgICBpZiAodGhpcy5fcG9wcGVySW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3BwZXJJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlSW5zdGFuY2UoKSB7XG4gICAgICAgIGluc3RhbmNlcy5yZW1vdmVJbnN0YW5jZSgnVG9vbHRpcCcsIHRoaXMuX2luc3RhbmNlSWQpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lBbmRSZW1vdmVJbnN0YW5jZSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMucmVtb3ZlSW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICBfc2V0dXBFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgY29uc3QgdHJpZ2dlckV2ZW50cyA9IHRoaXMuX2dldFRyaWdnZXJFdmVudHMoKTtcblxuICAgICAgICB0aGlzLl9zaG93SGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX2hpZGVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdHJpZ2dlckV2ZW50cy5zaG93RXZlbnRzLmZvckVhY2goKGV2KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcihldiwgdGhpcy5fc2hvd0hhbmRsZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0cmlnZ2VyRXZlbnRzLmhpZGVFdmVudHMuZm9yRWFjaCgoZXYpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9oaWRlSGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9jcmVhdGVQb3BwZXJJbnN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVBvcHBlcih0aGlzLl90cmlnZ2VyRWwsIHRoaXMuX3RhcmdldEVsLCB7XG4gICAgICAgICAgICBwbGFjZW1lbnQ6IHRoaXMuX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBbMCwgOF0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9nZXRUcmlnZ2VyRXZlbnRzKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX29wdGlvbnMudHJpZ2dlclR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2hvdmVyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnRzOiBbJ21vdXNlZW50ZXInLCAnZm9jdXMnXSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZUV2ZW50czogWydtb3VzZWxlYXZlJywgJ2JsdXInXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dFdmVudHM6IFsnY2xpY2snLCAnZm9jdXMnXSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZUV2ZW50czogWydmb2N1c291dCcsICdibHVyJ10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ25vbmUnOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dFdmVudHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBoaWRlRXZlbnRzOiBbXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnRzOiBbJ21vdXNlZW50ZXInLCAnZm9jdXMnXSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZUV2ZW50czogWydtb3VzZWxlYXZlJywgJ2JsdXInXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3NldHVwS2V5ZG93bkxpc3RlbmVyKCkge1xuICAgICAgICB0aGlzLl9rZXlkb3duRXZlbnRMaXN0ZW5lciA9IChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ2tleWRvd24nLFxuICAgICAgICAgICAgdGhpcy5fa2V5ZG93bkV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgX3JlbW92ZUtleWRvd25MaXN0ZW5lcigpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ2tleWRvd24nLFxuICAgICAgICAgICAgdGhpcy5fa2V5ZG93bkV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgX3NldHVwQ2xpY2tPdXRzaWRlTGlzdGVuZXIoKSB7XG4gICAgICAgIHRoaXMuX2NsaWNrT3V0c2lkZUV2ZW50TGlzdGVuZXIgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNsaWNrT3V0c2lkZShldiwgdGhpcy5fdGFyZ2V0RWwpO1xuICAgICAgICB9O1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgdGhpcy5fY2xpY2tPdXRzaWRlRXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBfcmVtb3ZlQ2xpY2tPdXRzaWRlTGlzdGVuZXIoKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICB0aGlzLl9jbGlja091dHNpZGVFdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIF9oYW5kbGVDbGlja091dHNpZGUoZXY6IEV2ZW50LCB0YXJnZXRFbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgY2xpY2tlZEVsID0gZXYudGFyZ2V0IGFzIE5vZGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNsaWNrZWRFbCAhPT0gdGFyZ2V0RWwgJiZcbiAgICAgICAgICAgICF0YXJnZXRFbC5jb250YWlucyhjbGlja2VkRWwpICYmXG4gICAgICAgICAgICAhdGhpcy5fdHJpZ2dlckVsLmNvbnRhaW5zKGNsaWNrZWRFbCkgJiZcbiAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlKClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzVmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2libGU7XG4gICAgfVxuXG4gICAgdG9nZ2xlKCkge1xuICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldEVsLmNsYXNzTGlzdC5yZW1vdmUoJ29wYWNpdHktMCcsICdpbnZpc2libGUnKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZCgnb3BhY2l0eS0xMDAnLCAndmlzaWJsZScpO1xuXG4gICAgICAgIC8vIEVuYWJsZSB0aGUgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlLnNldE9wdGlvbnMoKG9wdGlvbnM6IFBvcHBlck9wdGlvbnMpID0+ICh7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBbXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5tb2RpZmllcnMsXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLCBlbmFibGVkOiB0cnVlIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gaGFuZGxlIGNsaWNrIG91dHNpZGVcbiAgICAgICAgdGhpcy5fc2V0dXBDbGlja091dHNpZGVMaXN0ZW5lcigpO1xuXG4gICAgICAgIC8vIGhhbmRsZSBlc2Mga2V5ZG93blxuICAgICAgICB0aGlzLl9zZXR1cEtleWRvd25MaXN0ZW5lcigpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBpdHMgcG9zaXRpb25cbiAgICAgICAgdGhpcy5fcG9wcGVySW5zdGFuY2UudXBkYXRlKCk7XG5cbiAgICAgICAgLy8gc2V0IHZpc2liaWxpdHlcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgLy8gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3codGhpcyk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWwuY2xhc3NMaXN0LnJlbW92ZSgnb3BhY2l0eS0xMDAnLCAndmlzaWJsZScpO1xuICAgICAgICB0aGlzLl90YXJnZXRFbC5jbGFzc0xpc3QuYWRkKCdvcGFjaXR5LTAnLCAnaW52aXNpYmxlJyk7XG5cbiAgICAgICAgLy8gRGlzYWJsZSB0aGUgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgIHRoaXMuX3BvcHBlckluc3RhbmNlLnNldE9wdGlvbnMoKG9wdGlvbnM6IFBvcHBlck9wdGlvbnMpID0+ICh7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBbXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5tb2RpZmllcnMsXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLCBlbmFibGVkOiBmYWxzZSB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIGhhbmRsZSBjbGljayBvdXRzaWRlXG4gICAgICAgIHRoaXMuX3JlbW92ZUNsaWNrT3V0c2lkZUxpc3RlbmVyKCk7XG5cbiAgICAgICAgLy8gaGFuZGxlIGVzYyBrZXlkb3duXG4gICAgICAgIHRoaXMuX3JlbW92ZUtleWRvd25MaXN0ZW5lcigpO1xuXG4gICAgICAgIC8vIHNldCB2aXNpYmlsaXR5XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcblxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB0aGlzLl9vcHRpb25zLm9uSGlkZSh0aGlzKTtcbiAgICB9XG5cbiAgICB1cGRhdGVPblNob3coY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vblNob3cgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPbkhpZGUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkhpZGUgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB1cGRhdGVPblRvZ2dsZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLm9uVG9nZ2xlID0gY2FsbGJhY2s7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFRvb2x0aXBzKCkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRvb2x0aXAtdGFyZ2V0XScpLmZvckVhY2goKCR0cmlnZ2VyRWwpID0+IHtcbiAgICAgICAgY29uc3QgdG9vbHRpcElkID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC10YXJnZXQnKTtcbiAgICAgICAgY29uc3QgJHRvb2x0aXBFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRvb2x0aXBJZCk7XG5cbiAgICAgICAgaWYgKCR0b29sdGlwRWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyaWdnZXJUeXBlID0gJHRyaWdnZXJFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC10cmlnZ2VyJyk7XG4gICAgICAgICAgICBjb25zdCBwbGFjZW1lbnQgPSAkdHJpZ2dlckVsLmdldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLXBsYWNlbWVudCcpO1xuXG4gICAgICAgICAgICBuZXcgVG9vbHRpcChcbiAgICAgICAgICAgICAgICAkdG9vbHRpcEVsIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICR0cmlnZ2VyRWwgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCA/IHBsYWNlbWVudCA6IERlZmF1bHQucGxhY2VtZW50LFxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyVHlwZTogdHJpZ2dlclR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJpZ2dlclR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogRGVmYXVsdC50cmlnZ2VyVHlwZSxcbiAgICAgICAgICAgICAgICB9IGFzIFRvb2x0aXBPcHRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBgVGhlIHRvb2x0aXAgZWxlbWVudCB3aXRoIGlkIFwiJHt0b29sdGlwSWR9XCIgZG9lcyBub3QgZXhpc3QuIFBsZWFzZSBjaGVjayB0aGUgZGF0YS10b29sdGlwLXRhcmdldCBhdHRyaWJ1dGUuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuVG9vbHRpcCA9IFRvb2x0aXA7XG4gICAgd2luZG93LmluaXRUb29sdGlwcyA9IGluaXRUb29sdGlwcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9vbHRpcDtcbiIsICJjbGFzcyBFdmVudHMge1xuICAgIHByaXZhdGUgX2V2ZW50VHlwZTogc3RyaW5nO1xuICAgIHByaXZhdGUgX2V2ZW50RnVuY3Rpb25zOiBFdmVudExpc3RlbmVyW107XG5cbiAgICBjb25zdHJ1Y3RvcihldmVudFR5cGU6IHN0cmluZywgZXZlbnRGdW5jdGlvbnM6IEV2ZW50TGlzdGVuZXJbXSA9IFtdKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50VHlwZSA9IGV2ZW50VHlwZTtcbiAgICAgICAgdGhpcy5fZXZlbnRGdW5jdGlvbnMgPSBldmVudEZ1bmN0aW9ucztcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLl9ldmVudEZ1bmN0aW9ucy5mb3JFYWNoKChldmVudEZ1bmN0aW9uKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLl9ldmVudFR5cGUsIGV2ZW50RnVuY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV2ZW50cztcbiIsICJpbXBvcnQgeyBBY2NvcmRpb25JbnRlcmZhY2UgfSBmcm9tICcuLi9jb21wb25lbnRzL2FjY29yZGlvbi9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ2Fyb3VzZWxJbnRlcmZhY2UgfSBmcm9tICcuLi9jb21wb25lbnRzL2Nhcm91c2VsL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBDb2xsYXBzZUludGVyZmFjZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29sbGFwc2UvaW50ZXJmYWNlJztcbmltcG9ydCB7IERpYWxJbnRlcmZhY2UgfSBmcm9tICcuLi9jb21wb25lbnRzL2RpYWwvaW50ZXJmYWNlJztcbmltcG9ydCB7IERpc21pc3NJbnRlcmZhY2UgfSBmcm9tICcuLi9jb21wb25lbnRzL2Rpc21pc3MvaW50ZXJmYWNlJztcbmltcG9ydCB7IERyYXdlckludGVyZmFjZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvZHJhd2VyL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBEcm9wZG93bkludGVyZmFjZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvZHJvcGRvd24vaW50ZXJmYWNlJztcbmltcG9ydCB7IE1vZGFsSW50ZXJmYWNlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9tb2RhbC9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9wb3ZlckludGVyZmFjZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvcG9wb3Zlci9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGFic0ludGVyZmFjZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvdGFicy9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVG9vbHRpcEludGVyZmFjZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvdG9vbHRpcC9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSW5wdXRDb3VudGVySW50ZXJmYWNlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnB1dC1jb3VudGVyL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBDb3B5Q2xpcGJvYXJkSW50ZXJmYWNlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jbGlwYm9hcmQvaW50ZXJmYWNlJztcbmltcG9ydCB7IERhdGVwaWNrZXJJbnRlcmZhY2UgfSBmcm9tICcuLi9jb21wb25lbnRzL2RhdGVwaWNrZXIvaW50ZXJmYWNlJztcblxuY2xhc3MgSW5zdGFuY2VzIHtcbiAgICBwcml2YXRlIF9pbnN0YW5jZXM6IHtcbiAgICAgICAgQWNjb3JkaW9uOiB7IFtpZDogc3RyaW5nXTogQWNjb3JkaW9uSW50ZXJmYWNlIH07XG4gICAgICAgIENhcm91c2VsOiB7IFtpZDogc3RyaW5nXTogQ2Fyb3VzZWxJbnRlcmZhY2UgfTtcbiAgICAgICAgQ29sbGFwc2U6IHsgW2lkOiBzdHJpbmddOiBDb2xsYXBzZUludGVyZmFjZSB9O1xuICAgICAgICBEaWFsOiB7IFtpZDogc3RyaW5nXTogRGlhbEludGVyZmFjZSB9O1xuICAgICAgICBEaXNtaXNzOiB7IFtpZDogc3RyaW5nXTogRGlzbWlzc0ludGVyZmFjZSB9O1xuICAgICAgICBEcmF3ZXI6IHsgW2lkOiBzdHJpbmddOiBEcmF3ZXJJbnRlcmZhY2UgfTtcbiAgICAgICAgRHJvcGRvd246IHsgW2lkOiBzdHJpbmddOiBEcm9wZG93bkludGVyZmFjZSB9O1xuICAgICAgICBNb2RhbDogeyBbaWQ6IHN0cmluZ106IE1vZGFsSW50ZXJmYWNlIH07XG4gICAgICAgIFBvcG92ZXI6IHsgW2lkOiBzdHJpbmddOiBQb3BvdmVySW50ZXJmYWNlIH07XG4gICAgICAgIFRhYnM6IHsgW2lkOiBzdHJpbmddOiBUYWJzSW50ZXJmYWNlIH07XG4gICAgICAgIFRvb2x0aXA6IHsgW2lkOiBzdHJpbmddOiBUb29sdGlwSW50ZXJmYWNlIH07XG4gICAgICAgIElucHV0Q291bnRlcjogeyBbaWQ6IHN0cmluZ106IElucHV0Q291bnRlckludGVyZmFjZSB9O1xuICAgICAgICBDb3B5Q2xpcGJvYXJkOiB7IFtpZDogc3RyaW5nXTogQ29weUNsaXBib2FyZEludGVyZmFjZSB9O1xuICAgICAgICBEYXRlcGlja2VyOiB7IFtpZDogc3RyaW5nXTogRGF0ZXBpY2tlckludGVyZmFjZSB9O1xuICAgIH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VzID0ge1xuICAgICAgICAgICAgQWNjb3JkaW9uOiB7fSxcbiAgICAgICAgICAgIENhcm91c2VsOiB7fSxcbiAgICAgICAgICAgIENvbGxhcHNlOiB7fSxcbiAgICAgICAgICAgIERpYWw6IHt9LFxuICAgICAgICAgICAgRGlzbWlzczoge30sXG4gICAgICAgICAgICBEcmF3ZXI6IHt9LFxuICAgICAgICAgICAgRHJvcGRvd246IHt9LFxuICAgICAgICAgICAgTW9kYWw6IHt9LFxuICAgICAgICAgICAgUG9wb3Zlcjoge30sXG4gICAgICAgICAgICBUYWJzOiB7fSxcbiAgICAgICAgICAgIFRvb2x0aXA6IHt9LFxuICAgICAgICAgICAgSW5wdXRDb3VudGVyOiB7fSxcbiAgICAgICAgICAgIENvcHlDbGlwYm9hcmQ6IHt9LFxuICAgICAgICAgICAgRGF0ZXBpY2tlcjoge30sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWRkSW5zdGFuY2UoXG4gICAgICAgIGNvbXBvbmVudDoga2V5b2YgSW5zdGFuY2VzWydfaW5zdGFuY2VzJ10sXG4gICAgICAgIGluc3RhbmNlOiBhbnksXG4gICAgICAgIGlkPzogc3RyaW5nLFxuICAgICAgICBvdmVycmlkZSA9IGZhbHNlXG4gICAgKSB7XG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2VzW2NvbXBvbmVudF0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRmxvd2JpdGU6IENvbXBvbmVudCAke2NvbXBvbmVudH0gZG9lcyBub3QgZXhpc3QuYCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faW5zdGFuY2VzW2NvbXBvbmVudF1baWRdICYmICFvdmVycmlkZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBGbG93Yml0ZTogSW5zdGFuY2Ugd2l0aCBJRCAke2lkfSBhbHJlYWR5IGV4aXN0cy5gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvdmVycmlkZSAmJiB0aGlzLl9pbnN0YW5jZXNbY29tcG9uZW50XVtpZF0pIHtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlc1tjb21wb25lbnRdW2lkXS5kZXN0cm95QW5kUmVtb3ZlSW5zdGFuY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2luc3RhbmNlc1tjb21wb25lbnRdW2lkID8gaWQgOiB0aGlzLl9nZW5lcmF0ZVJhbmRvbUlkKCldID1cbiAgICAgICAgICAgIGluc3RhbmNlO1xuICAgIH1cblxuICAgIGdldEFsbEluc3RhbmNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlcztcbiAgICB9XG5cbiAgICBnZXRJbnN0YW5jZXMoY29tcG9uZW50OiBrZXlvZiBJbnN0YW5jZXNbJ19pbnN0YW5jZXMnXSkge1xuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlc1tjb21wb25lbnRdKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEZsb3diaXRlOiBDb21wb25lbnQgJHtjb21wb25lbnR9IGRvZXMgbm90IGV4aXN0LmApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZXNbY29tcG9uZW50XTtcbiAgICB9XG5cbiAgICBnZXRJbnN0YW5jZShjb21wb25lbnQ6IGtleW9mIEluc3RhbmNlc1snX2luc3RhbmNlcyddLCBpZDogc3RyaW5nKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29tcG9uZW50QW5kSW5zdGFuY2VDaGVjayhjb21wb25lbnQsIGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZXNbY29tcG9uZW50XVtpZF0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRmxvd2JpdGU6IEluc3RhbmNlIHdpdGggSUQgJHtpZH0gZG9lcyBub3QgZXhpc3QuYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlc1tjb21wb25lbnRdW2lkXSBhcyBhbnk7XG4gICAgfVxuXG4gICAgZGVzdHJveUFuZFJlbW92ZUluc3RhbmNlKFxuICAgICAgICBjb21wb25lbnQ6IGtleW9mIEluc3RhbmNlc1snX2luc3RhbmNlcyddLFxuICAgICAgICBpZDogc3RyaW5nXG4gICAgKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29tcG9uZW50QW5kSW5zdGFuY2VDaGVjayhjb21wb25lbnQsIGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdHJveUluc3RhbmNlT2JqZWN0KGNvbXBvbmVudCwgaWQpO1xuICAgICAgICB0aGlzLnJlbW92ZUluc3RhbmNlKGNvbXBvbmVudCwgaWQpO1xuICAgIH1cblxuICAgIHJlbW92ZUluc3RhbmNlKGNvbXBvbmVudDoga2V5b2YgSW5zdGFuY2VzWydfaW5zdGFuY2VzJ10sIGlkOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb21wb25lbnRBbmRJbnN0YW5jZUNoZWNrKGNvbXBvbmVudCwgaWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMuX2luc3RhbmNlc1tjb21wb25lbnRdW2lkXTtcbiAgICB9XG5cbiAgICBkZXN0cm95SW5zdGFuY2VPYmplY3QoXG4gICAgICAgIGNvbXBvbmVudDoga2V5b2YgSW5zdGFuY2VzWydfaW5zdGFuY2VzJ10sXG4gICAgICAgIGlkOiBzdHJpbmdcbiAgICApIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb21wb25lbnRBbmRJbnN0YW5jZUNoZWNrKGNvbXBvbmVudCwgaWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5zdGFuY2VzW2NvbXBvbmVudF1baWRdLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZUV4aXN0cyhjb21wb25lbnQ6IGtleW9mIEluc3RhbmNlc1snX2luc3RhbmNlcyddLCBpZDogc3RyaW5nKSB7XG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2VzW2NvbXBvbmVudF0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2VzW2NvbXBvbmVudF1baWRdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBfZ2VuZXJhdGVSYW5kb21JZCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9jb21wb25lbnRBbmRJbnN0YW5jZUNoZWNrKFxuICAgICAgICBjb21wb25lbnQ6IGtleW9mIEluc3RhbmNlc1snX2luc3RhbmNlcyddLFxuICAgICAgICBpZDogc3RyaW5nXG4gICAgKSB7XG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2VzW2NvbXBvbmVudF0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRmxvd2JpdGU6IENvbXBvbmVudCAke2NvbXBvbmVudH0gZG9lcyBub3QgZXhpc3QuYCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlc1tjb21wb25lbnRdW2lkXSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBGbG93Yml0ZTogSW5zdGFuY2Ugd2l0aCBJRCAke2lkfSBkb2VzIG5vdCBleGlzdC5gKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuY29uc3QgaW5zdGFuY2VzID0gbmV3IEluc3RhbmNlcygpO1xuXG5leHBvcnQgZGVmYXVsdCBpbnN0YW5jZXM7XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpbmRvdy5GbG93Yml0ZUluc3RhbmNlcyA9IGluc3RhbmNlcztcbn1cbiIsICIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwgIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwgIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCAiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCAiLy8gY29yZSBjb21wb25lbnRzXG5pbXBvcnQgQWNjb3JkaW9uLCB7IGluaXRBY2NvcmRpb25zIH0gZnJvbSAnLi9jb21wb25lbnRzL2FjY29yZGlvbic7XG5pbXBvcnQgQ2Fyb3VzZWwsIHsgaW5pdENhcm91c2VscyB9IGZyb20gJy4vY29tcG9uZW50cy9jYXJvdXNlbCc7XG5pbXBvcnQgQ29sbGFwc2UsIHsgaW5pdENvbGxhcHNlcyB9IGZyb20gJy4vY29tcG9uZW50cy9jb2xsYXBzZSc7XG5pbXBvcnQgRGlhbCwgeyBpbml0RGlhbHMgfSBmcm9tICcuL2NvbXBvbmVudHMvZGlhbCc7XG5pbXBvcnQgRGlzbWlzcywgeyBpbml0RGlzbWlzc2VzIH0gZnJvbSAnLi9jb21wb25lbnRzL2Rpc21pc3MnO1xuaW1wb3J0IERyYXdlciwgeyBpbml0RHJhd2VycyB9IGZyb20gJy4vY29tcG9uZW50cy9kcmF3ZXInO1xuaW1wb3J0IERyb3Bkb3duLCB7IGluaXREcm9wZG93bnMgfSBmcm9tICcuL2NvbXBvbmVudHMvZHJvcGRvd24nO1xuaW1wb3J0IE1vZGFsLCB7IGluaXRNb2RhbHMgfSBmcm9tICcuL2NvbXBvbmVudHMvbW9kYWwnO1xuaW1wb3J0IFBvcG92ZXIsIHsgaW5pdFBvcG92ZXJzIH0gZnJvbSAnLi9jb21wb25lbnRzL3BvcG92ZXInO1xuaW1wb3J0IFRhYnMsIHsgaW5pdFRhYnMgfSBmcm9tICcuL2NvbXBvbmVudHMvdGFicyc7XG5pbXBvcnQgVG9vbHRpcCwgeyBpbml0VG9vbHRpcHMgfSBmcm9tICcuL2NvbXBvbmVudHMvdG9vbHRpcCc7XG5pbXBvcnQgSW5wdXRDb3VudGVyLCB7IGluaXRJbnB1dENvdW50ZXJzIH0gZnJvbSAnLi9jb21wb25lbnRzL2lucHV0LWNvdW50ZXInO1xuaW1wb3J0IENvcHlDbGlwYm9hcmQsIHsgaW5pdENvcHlDbGlwYm9hcmRzIH0gZnJvbSAnLi9jb21wb25lbnRzL2NsaXBib2FyZCc7XG5pbXBvcnQgRGF0ZXBpY2tlciwgeyBpbml0RGF0ZXBpY2tlcnMgfSBmcm9tICcuL2NvbXBvbmVudHMvZGF0ZXBpY2tlcic7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9pbmRleCc7XG5pbXBvcnQgRXZlbnRzIGZyb20gJy4vZG9tL2V2ZW50cyc7XG5cbmNvbnN0IGxpdmVWaWV3TG9hZEV2ZW50cyA9IG5ldyBFdmVudHMoJ3BoeDpwYWdlLWxvYWRpbmctc3RvcCcsIFtcbiAgICBpbml0QWNjb3JkaW9ucyxcbiAgICBpbml0Q29sbGFwc2VzLFxuICAgIGluaXRDYXJvdXNlbHMsXG4gICAgaW5pdERpc21pc3NlcyxcbiAgICBpbml0RHJvcGRvd25zLFxuICAgIGluaXRNb2RhbHMsXG4gICAgaW5pdERyYXdlcnMsXG4gICAgaW5pdFRhYnMsXG4gICAgaW5pdFRvb2x0aXBzLFxuICAgIGluaXRQb3BvdmVycyxcbiAgICBpbml0RGlhbHMsXG4gICAgaW5pdElucHV0Q291bnRlcnMsXG4gICAgaW5pdENvcHlDbGlwYm9hcmRzLFxuICAgIGluaXREYXRlcGlja2Vycyxcbl0pO1xubGl2ZVZpZXdMb2FkRXZlbnRzLmluaXQoKTtcblxuY29uc3QgcmVndWxhclZpZXdMb2FkRXZlbnRzID0gbmV3IEV2ZW50cygnbG9hZCcsIFtcbiAgICBpbml0QWNjb3JkaW9ucyxcbiAgICBpbml0Q29sbGFwc2VzLFxuICAgIGluaXRDYXJvdXNlbHMsXG4gICAgaW5pdERpc21pc3NlcyxcbiAgICBpbml0RHJvcGRvd25zLFxuICAgIGluaXRNb2RhbHMsXG4gICAgaW5pdERyYXdlcnMsXG4gICAgaW5pdFRhYnMsXG4gICAgaW5pdFRvb2x0aXBzLFxuICAgIGluaXRQb3BvdmVycyxcbiAgICBpbml0RGlhbHMsXG4gICAgaW5pdElucHV0Q291bnRlcnMsXG4gICAgaW5pdENvcHlDbGlwYm9hcmRzLFxuICAgIGluaXREYXRlcGlja2Vycyxcbl0pO1xucmVndWxhclZpZXdMb2FkRXZlbnRzLmluaXQoKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIEFjY29yZGlvbixcbiAgICBDYXJvdXNlbCxcbiAgICBDb2xsYXBzZSxcbiAgICBEaWFsLFxuICAgIERyYXdlcixcbiAgICBEaXNtaXNzLFxuICAgIERyb3Bkb3duLFxuICAgIE1vZGFsLFxuICAgIFBvcG92ZXIsXG4gICAgVGFicyxcbiAgICBUb29sdGlwLFxuICAgIElucHV0Q291bnRlcixcbiAgICBDb3B5Q2xpcGJvYXJkLFxuICAgIERhdGVwaWNrZXIsXG4gICAgRXZlbnRzLFxufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgUG9seWZpbGxFdmVudCA9IGV2ZW50Q29uc3RydWN0b3IoKTtcblxuICBmdW5jdGlvbiBldmVudENvbnN0cnVjdG9yKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG4gICAgLy8gSUU8PTkgU3VwcG9ydFxuICAgIGZ1bmN0aW9uIEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMpIHtcbiAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7YnViYmxlczogZmFsc2UsIGNhbmNlbGFibGU6IGZhbHNlLCBkZXRhaWw6IHVuZGVmaW5lZH07XG4gICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICAgICAgcmV0dXJuIGV2dDtcbiAgICB9XG4gICAgQ3VzdG9tRXZlbnQucHJvdG90eXBlID0gd2luZG93LkV2ZW50LnByb3RvdHlwZTtcbiAgICByZXR1cm4gQ3VzdG9tRXZlbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEhpZGRlbklucHV0KG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGlucHV0LnR5cGUgPSBcImhpZGRlblwiO1xuICAgIGlucHV0Lm5hbWUgPSBuYW1lO1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZWxlbWVudCwgdGFyZ2V0TW9kaWZpZXJLZXkpIHtcbiAgICB2YXIgdG8gPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdG9cIiksXG4gICAgICAgIG1ldGhvZCA9IGJ1aWxkSGlkZGVuSW5wdXQoXCJfbWV0aG9kXCIsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikpLFxuICAgICAgICBjc3JmID0gYnVpbGRIaWRkZW5JbnB1dChcIl9jc3JmX3Rva2VuXCIsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jc3JmXCIpKSxcbiAgICAgICAgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLFxuICAgICAgICBzdWJtaXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksXG4gICAgICAgIHRhcmdldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpO1xuXG4gICAgZm9ybS5tZXRob2QgPSAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSA9PT0gXCJnZXRcIikgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gICAgZm9ybS5hY3Rpb24gPSB0bztcbiAgICBmb3JtLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgIGlmICh0YXJnZXQpIGZvcm0udGFyZ2V0ID0gdGFyZ2V0O1xuICAgIGVsc2UgaWYgKHRhcmdldE1vZGlmaWVyS2V5KSBmb3JtLnRhcmdldCA9IFwiX2JsYW5rXCI7XG5cbiAgICBmb3JtLmFwcGVuZENoaWxkKGNzcmYpO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQobWV0aG9kKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xuXG4gICAgLy8gSW5zZXJ0IGEgYnV0dG9uIGFuZCBjbGljayBpdCBpbnN0ZWFkIG9mIHVzaW5nIGBmb3JtLnN1Ym1pdGBcbiAgICAvLyBiZWNhdXNlIHRoZSBgc3VibWl0YCBmdW5jdGlvbiBkb2VzIG5vdCBlbWl0IGEgYHN1Ym1pdGAgZXZlbnQuXG4gICAgc3VibWl0LnR5cGUgPSBcInN1Ym1pdFwiO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoc3VibWl0KTtcbiAgICBzdWJtaXQuY2xpY2soKTtcbiAgfVxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XG4gICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuXG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgIHZhciBwaG9lbml4TGlua0V2ZW50ID0gbmV3IFBvbHlmaWxsRXZlbnQoJ3Bob2VuaXgubGluay5jbGljaycsIHtcbiAgICAgICAgXCJidWJibGVzXCI6IHRydWUsIFwiY2FuY2VsYWJsZVwiOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFlbGVtZW50LmRpc3BhdGNoRXZlbnQocGhvZW5peExpbmtFdmVudCkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWV0aG9kXCIpICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10b1wiKSkge1xuICAgICAgICBoYW5kbGVDbGljayhlbGVtZW50LCBlLm1ldGFLZXkgfHwgZS5zaGlmdEtleSk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIGZhbHNlKTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncGhvZW5peC5saW5rLmNsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtY29uZmlybVwiKTtcbiAgICBpZihtZXNzYWdlICYmICF3aW5kb3cuY29uZmlybShtZXNzYWdlKSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSwgZmFsc2UpO1xufSkoKTtcbiIsICIvLyB3cmFwcyB2YWx1ZSBpbiBjbG9zdXJlIG9yIHJldHVybnMgY2xvc3VyZVxuZXhwb3J0IGxldCBjbG9zdXJlID0gKHZhbHVlKSA9PiB7XG4gIGlmKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKXtcbiAgICByZXR1cm4gdmFsdWVcbiAgfSBlbHNlIHtcbiAgICBsZXQgY2xvc3VyZSA9IGZ1bmN0aW9uICgpeyByZXR1cm4gdmFsdWUgfVxuICAgIHJldHVybiBjbG9zdXJlXG4gIH1cbn1cbiIsICJleHBvcnQgY29uc3QgZ2xvYmFsU2VsZiA9IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IG51bGxcbmV4cG9ydCBjb25zdCBwaHhXaW5kb3cgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogbnVsbFxuZXhwb3J0IGNvbnN0IGdsb2JhbCA9IGdsb2JhbFNlbGYgfHwgcGh4V2luZG93IHx8IGdsb2JhbFxuZXhwb3J0IGNvbnN0IERFRkFVTFRfVlNOID0gXCIyLjAuMFwiXG5leHBvcnQgY29uc3QgU09DS0VUX1NUQVRFUyA9IHtjb25uZWN0aW5nOiAwLCBvcGVuOiAxLCBjbG9zaW5nOiAyLCBjbG9zZWQ6IDN9XG5leHBvcnQgY29uc3QgREVGQVVMVF9USU1FT1VUID0gMTAwMDBcbmV4cG9ydCBjb25zdCBXU19DTE9TRV9OT1JNQUwgPSAxMDAwXG5leHBvcnQgY29uc3QgQ0hBTk5FTF9TVEFURVMgPSB7XG4gIGNsb3NlZDogXCJjbG9zZWRcIixcbiAgZXJyb3JlZDogXCJlcnJvcmVkXCIsXG4gIGpvaW5lZDogXCJqb2luZWRcIixcbiAgam9pbmluZzogXCJqb2luaW5nXCIsXG4gIGxlYXZpbmc6IFwibGVhdmluZ1wiLFxufVxuZXhwb3J0IGNvbnN0IENIQU5ORUxfRVZFTlRTID0ge1xuICBjbG9zZTogXCJwaHhfY2xvc2VcIixcbiAgZXJyb3I6IFwicGh4X2Vycm9yXCIsXG4gIGpvaW46IFwicGh4X2pvaW5cIixcbiAgcmVwbHk6IFwicGh4X3JlcGx5XCIsXG4gIGxlYXZlOiBcInBoeF9sZWF2ZVwiXG59XG5cbmV4cG9ydCBjb25zdCBUUkFOU1BPUlRTID0ge1xuICBsb25ncG9sbDogXCJsb25ncG9sbFwiLFxuICB3ZWJzb2NrZXQ6IFwid2Vic29ja2V0XCJcbn1cbmV4cG9ydCBjb25zdCBYSFJfU1RBVEVTID0ge1xuICBjb21wbGV0ZTogNFxufVxuIiwgIi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIFB1c2hcbiAqIEBwYXJhbSB7Q2hhbm5lbH0gY2hhbm5lbCAtIFRoZSBDaGFubmVsXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQsIGZvciBleGFtcGxlIGBcInBoeF9qb2luXCJgXG4gKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZCAtIFRoZSBwYXlsb2FkLCBmb3IgZXhhbXBsZSBge3VzZXJfaWQ6IDEyM31gXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCAtIFRoZSBwdXNoIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFB1c2gge1xuICBjb25zdHJ1Y3RvcihjaGFubmVsLCBldmVudCwgcGF5bG9hZCwgdGltZW91dCl7XG4gICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbFxuICAgIHRoaXMuZXZlbnQgPSBldmVudFxuICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQgfHwgZnVuY3Rpb24gKCl7IHJldHVybiB7fSB9XG4gICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBudWxsXG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dFxuICAgIHRoaXMudGltZW91dFRpbWVyID0gbnVsbFxuICAgIHRoaXMucmVjSG9va3MgPSBbXVxuICAgIHRoaXMuc2VudCA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRcbiAgICovXG4gIHJlc2VuZCh0aW1lb3V0KXtcbiAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgdGhpcy5yZXNldCgpXG4gICAgdGhpcy5zZW5kKClcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgc2VuZCgpe1xuICAgIGlmKHRoaXMuaGFzUmVjZWl2ZWQoXCJ0aW1lb3V0XCIpKXsgcmV0dXJuIH1cbiAgICB0aGlzLnN0YXJ0VGltZW91dCgpXG4gICAgdGhpcy5zZW50ID0gdHJ1ZVxuICAgIHRoaXMuY2hhbm5lbC5zb2NrZXQucHVzaCh7XG4gICAgICB0b3BpYzogdGhpcy5jaGFubmVsLnRvcGljLFxuICAgICAgZXZlbnQ6IHRoaXMuZXZlbnQsXG4gICAgICBwYXlsb2FkOiB0aGlzLnBheWxvYWQoKSxcbiAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICBqb2luX3JlZjogdGhpcy5jaGFubmVsLmpvaW5SZWYoKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBzdGF0dXNcbiAgICogQHBhcmFtIHsqfSBjYWxsYmFja1xuICAgKi9cbiAgcmVjZWl2ZShzdGF0dXMsIGNhbGxiYWNrKXtcbiAgICBpZih0aGlzLmhhc1JlY2VpdmVkKHN0YXR1cykpe1xuICAgICAgY2FsbGJhY2sodGhpcy5yZWNlaXZlZFJlc3AucmVzcG9uc2UpXG4gICAgfVxuXG4gICAgdGhpcy5yZWNIb29rcy5wdXNoKHtzdGF0dXMsIGNhbGxiYWNrfSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZXNldCgpe1xuICAgIHRoaXMuY2FuY2VsUmVmRXZlbnQoKVxuICAgIHRoaXMucmVmID0gbnVsbFxuICAgIHRoaXMucmVmRXZlbnQgPSBudWxsXG4gICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBudWxsXG4gICAgdGhpcy5zZW50ID0gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbWF0Y2hSZWNlaXZlKHtzdGF0dXMsIHJlc3BvbnNlLCBfcmVmfSl7XG4gICAgdGhpcy5yZWNIb29rcy5maWx0ZXIoaCA9PiBoLnN0YXR1cyA9PT0gc3RhdHVzKVxuICAgICAgLmZvckVhY2goaCA9PiBoLmNhbGxiYWNrKHJlc3BvbnNlKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FuY2VsUmVmRXZlbnQoKXtcbiAgICBpZighdGhpcy5yZWZFdmVudCl7IHJldHVybiB9XG4gICAgdGhpcy5jaGFubmVsLm9mZih0aGlzLnJlZkV2ZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjYW5jZWxUaW1lb3V0KCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dFRpbWVyKVxuICAgIHRoaXMudGltZW91dFRpbWVyID0gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGFydFRpbWVvdXQoKXtcbiAgICBpZih0aGlzLnRpbWVvdXRUaW1lcil7IHRoaXMuY2FuY2VsVGltZW91dCgpIH1cbiAgICB0aGlzLnJlZiA9IHRoaXMuY2hhbm5lbC5zb2NrZXQubWFrZVJlZigpXG4gICAgdGhpcy5yZWZFdmVudCA9IHRoaXMuY2hhbm5lbC5yZXBseUV2ZW50TmFtZSh0aGlzLnJlZilcblxuICAgIHRoaXMuY2hhbm5lbC5vbih0aGlzLnJlZkV2ZW50LCBwYXlsb2FkID0+IHtcbiAgICAgIHRoaXMuY2FuY2VsUmVmRXZlbnQoKVxuICAgICAgdGhpcy5jYW5jZWxUaW1lb3V0KClcbiAgICAgIHRoaXMucmVjZWl2ZWRSZXNwID0gcGF5bG9hZFxuICAgICAgdGhpcy5tYXRjaFJlY2VpdmUocGF5bG9hZClcbiAgICB9KVxuXG4gICAgdGhpcy50aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudHJpZ2dlcihcInRpbWVvdXRcIiwge30pXG4gICAgfSwgdGhpcy50aW1lb3V0KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYXNSZWNlaXZlZChzdGF0dXMpe1xuICAgIHJldHVybiB0aGlzLnJlY2VpdmVkUmVzcCAmJiB0aGlzLnJlY2VpdmVkUmVzcC5zdGF0dXMgPT09IHN0YXR1c1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0cmlnZ2VyKHN0YXR1cywgcmVzcG9uc2Upe1xuICAgIHRoaXMuY2hhbm5lbC50cmlnZ2VyKHRoaXMucmVmRXZlbnQsIHtzdGF0dXMsIHJlc3BvbnNlfSlcbiAgfVxufVxuIiwgIi8qKlxuICpcbiAqIENyZWF0ZXMgYSB0aW1lciB0aGF0IGFjY2VwdHMgYSBgdGltZXJDYWxjYCBmdW5jdGlvbiB0byBwZXJmb3JtXG4gKiBjYWxjdWxhdGVkIHRpbWVvdXQgcmV0cmllcywgc3VjaCBhcyBleHBvbmVudGlhbCBiYWNrb2ZmLlxuICpcbiAqIEBleGFtcGxlXG4gKiBsZXQgcmVjb25uZWN0VGltZXIgPSBuZXcgVGltZXIoKCkgPT4gdGhpcy5jb25uZWN0KCksIGZ1bmN0aW9uKHRyaWVzKXtcbiAqICAgcmV0dXJuIFsxMDAwLCA1MDAwLCAxMDAwMF1bdHJpZXMgLSAxXSB8fCAxMDAwMFxuICogfSlcbiAqIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDEwMDBcbiAqIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDUwMDBcbiAqIHJlY29ubmVjdFRpbWVyLnJlc2V0KClcbiAqIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDEwMDBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHtGdW5jdGlvbn0gdGltZXJDYWxjXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVyIHtcbiAgY29uc3RydWN0b3IoY2FsbGJhY2ssIHRpbWVyQ2FsYyl7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgdGhpcy50aW1lckNhbGMgPSB0aW1lckNhbGNcbiAgICB0aGlzLnRpbWVyID0gbnVsbFxuICAgIHRoaXMudHJpZXMgPSAwXG4gIH1cblxuICByZXNldCgpe1xuICAgIHRoaXMudHJpZXMgPSAwXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpXG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyBhbnkgcHJldmlvdXMgc2NoZWR1bGVUaW1lb3V0IGFuZCBzY2hlZHVsZXMgY2FsbGJhY2tcbiAgICovXG4gIHNjaGVkdWxlVGltZW91dCgpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKVxuXG4gICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy50cmllcyA9IHRoaXMudHJpZXMgKyAxXG4gICAgICB0aGlzLmNhbGxiYWNrKClcbiAgICB9LCB0aGlzLnRpbWVyQ2FsYyh0aGlzLnRyaWVzICsgMSkpXG4gIH1cbn1cbiIsICJpbXBvcnQge2Nsb3N1cmV9IGZyb20gXCIuL3V0aWxzXCJcbmltcG9ydCB7XG4gIENIQU5ORUxfRVZFTlRTLFxuICBDSEFOTkVMX1NUQVRFUyxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IFB1c2ggZnJvbSBcIi4vcHVzaFwiXG5pbXBvcnQgVGltZXIgZnJvbSBcIi4vdGltZXJcIlxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbil9IHBhcmFtc1xuICogQHBhcmFtIHtTb2NrZXR9IHNvY2tldFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFubmVsIHtcbiAgY29uc3RydWN0b3IodG9waWMsIHBhcmFtcywgc29ja2V0KXtcbiAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuY2xvc2VkXG4gICAgdGhpcy50b3BpYyA9IHRvcGljXG4gICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKHBhcmFtcyB8fCB7fSlcbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldFxuICAgIHRoaXMuYmluZGluZ3MgPSBbXVxuICAgIHRoaXMuYmluZGluZ1JlZiA9IDBcbiAgICB0aGlzLnRpbWVvdXQgPSB0aGlzLnNvY2tldC50aW1lb3V0XG4gICAgdGhpcy5qb2luZWRPbmNlID0gZmFsc2VcbiAgICB0aGlzLmpvaW5QdXNoID0gbmV3IFB1c2godGhpcywgQ0hBTk5FTF9FVkVOVFMuam9pbiwgdGhpcy5wYXJhbXMsIHRoaXMudGltZW91dClcbiAgICB0aGlzLnB1c2hCdWZmZXIgPSBbXVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VSZWZzID0gW11cblxuICAgIHRoaXMucmVqb2luVGltZXIgPSBuZXcgVGltZXIoKCkgPT4ge1xuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luKCkgfVxuICAgIH0sIHRoaXMuc29ja2V0LnJlam9pbkFmdGVyTXMpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZVJlZnMucHVzaCh0aGlzLnNvY2tldC5vbkVycm9yKCgpID0+IHRoaXMucmVqb2luVGltZXIucmVzZXQoKSkpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZVJlZnMucHVzaCh0aGlzLnNvY2tldC5vbk9wZW4oKCkgPT4ge1xuICAgICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgICBpZih0aGlzLmlzRXJyb3JlZCgpKXsgdGhpcy5yZWpvaW4oKSB9XG4gICAgfSlcbiAgICApXG4gICAgdGhpcy5qb2luUHVzaC5yZWNlaXZlKFwib2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmpvaW5lZFxuICAgICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgICB0aGlzLnB1c2hCdWZmZXIuZm9yRWFjaChwdXNoRXZlbnQgPT4gcHVzaEV2ZW50LnNlbmQoKSlcbiAgICAgIHRoaXMucHVzaEJ1ZmZlciA9IFtdXG4gICAgfSlcbiAgICB0aGlzLmpvaW5QdXNoLnJlY2VpdmUoXCJlcnJvclwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZFxuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luVGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgfVxuICAgIH0pXG4gICAgdGhpcy5vbkNsb3NlKCgpID0+IHtcbiAgICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKVxuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgYGNsb3NlICR7dGhpcy50b3BpY30gJHt0aGlzLmpvaW5SZWYoKX1gKVxuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmNsb3NlZFxuICAgICAgdGhpcy5zb2NrZXQucmVtb3ZlKHRoaXMpXG4gICAgfSlcbiAgICB0aGlzLm9uRXJyb3IocmVhc29uID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGBlcnJvciAke3RoaXMudG9waWN9YCwgcmVhc29uKVxuICAgICAgaWYodGhpcy5pc0pvaW5pbmcoKSl7IHRoaXMuam9pblB1c2gucmVzZXQoKSB9XG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZFxuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luVGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgfVxuICAgIH0pXG4gICAgdGhpcy5qb2luUHVzaC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiB7XG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBgdGltZW91dCAke3RoaXMudG9waWN9ICgke3RoaXMuam9pblJlZigpfSlgLCB0aGlzLmpvaW5QdXNoLnRpbWVvdXQpXG4gICAgICBsZXQgbGVhdmVQdXNoID0gbmV3IFB1c2godGhpcywgQ0hBTk5FTF9FVkVOVFMubGVhdmUsIGNsb3N1cmUoe30pLCB0aGlzLnRpbWVvdXQpXG4gICAgICBsZWF2ZVB1c2guc2VuZCgpXG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZFxuICAgICAgdGhpcy5qb2luUHVzaC5yZXNldCgpXG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKSB9XG4gICAgfSlcbiAgICB0aGlzLm9uKENIQU5ORUxfRVZFTlRTLnJlcGx5LCAocGF5bG9hZCwgcmVmKSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIodGhpcy5yZXBseUV2ZW50TmFtZShyZWYpLCBwYXlsb2FkKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogSm9pbiB0aGUgY2hhbm5lbFxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHRpbWVvdXRcbiAgICogQHJldHVybnMge1B1c2h9XG4gICAqL1xuICBqb2luKHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIGlmKHRoaXMuam9pbmVkT25jZSl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cmllZCB0byBqb2luIG11bHRpcGxlIHRpbWVzLiAnam9pbicgY2FuIG9ubHkgYmUgY2FsbGVkIGEgc2luZ2xlIHRpbWUgcGVyIGNoYW5uZWwgaW5zdGFuY2VcIilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dFxuICAgICAgdGhpcy5qb2luZWRPbmNlID0gdHJ1ZVxuICAgICAgdGhpcy5yZWpvaW4oKVxuICAgICAgcmV0dXJuIHRoaXMuam9pblB1c2hcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSG9vayBpbnRvIGNoYW5uZWwgY2xvc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2UoY2FsbGJhY2spe1xuICAgIHRoaXMub24oQ0hBTk5FTF9FVkVOVFMuY2xvc2UsIGNhbGxiYWNrKVxuICB9XG5cbiAgLyoqXG4gICAqIEhvb2sgaW50byBjaGFubmVsIGVycm9yc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25FcnJvcihjYWxsYmFjayl7XG4gICAgcmV0dXJuIHRoaXMub24oQ0hBTk5FTF9FVkVOVFMuZXJyb3IsIHJlYXNvbiA9PiBjYWxsYmFjayhyZWFzb24pKVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgb24gY2hhbm5lbCBldmVudHNcbiAgICpcbiAgICogU3Vic2NyaXB0aW9uIHJldHVybnMgYSByZWYgY291bnRlciwgd2hpY2ggY2FuIGJlIHVzZWQgbGF0ZXIgdG9cbiAgICogdW5zdWJzY3JpYmUgdGhlIGV4YWN0IGV2ZW50IGxpc3RlbmVyXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IHJlZjEgPSBjaGFubmVsLm9uKFwiZXZlbnRcIiwgZG9fc3R1ZmYpXG4gICAqIGNvbnN0IHJlZjIgPSBjaGFubmVsLm9uKFwiZXZlbnRcIiwgZG9fb3RoZXJfc3R1ZmYpXG4gICAqIGNoYW5uZWwub2ZmKFwiZXZlbnRcIiwgcmVmMSlcbiAgICogLy8gU2luY2UgdW5zdWJzY3JpcHRpb24sIGRvX3N0dWZmIHdvbid0IGZpcmUsXG4gICAqIC8vIHdoaWxlIGRvX290aGVyX3N0dWZmIHdpbGwga2VlcCBmaXJpbmcgb24gdGhlIFwiZXZlbnRcIlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHJldHVybnMge2ludGVnZXJ9IHJlZlxuICAgKi9cbiAgb24oZXZlbnQsIGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5iaW5kaW5nUmVmKytcbiAgICB0aGlzLmJpbmRpbmdzLnB1c2goe2V2ZW50LCByZWYsIGNhbGxiYWNrfSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmVzIG9mZiBvZiBjaGFubmVsIGV2ZW50c1xuICAgKlxuICAgKiBVc2UgdGhlIHJlZiByZXR1cm5lZCBmcm9tIGEgY2hhbm5lbC5vbigpIHRvIHVuc3Vic2NyaWJlIG9uZVxuICAgKiBoYW5kbGVyLCBvciBwYXNzIG5vdGhpbmcgZm9yIHRoZSByZWYgdG8gdW5zdWJzY3JpYmUgYWxsXG4gICAqIGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gZXZlbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIFVuc3Vic2NyaWJlIHRoZSBkb19zdHVmZiBoYW5kbGVyXG4gICAqIGNvbnN0IHJlZjEgPSBjaGFubmVsLm9uKFwiZXZlbnRcIiwgZG9fc3R1ZmYpXG4gICAqIGNoYW5uZWwub2ZmKFwiZXZlbnRcIiwgcmVmMSlcbiAgICpcbiAgICogLy8gVW5zdWJzY3JpYmUgYWxsIGhhbmRsZXJzIGZyb20gZXZlbnRcbiAgICogY2hhbm5lbC5vZmYoXCJldmVudFwiKVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSByZWZcbiAgICovXG4gIG9mZihldmVudCwgcmVmKXtcbiAgICB0aGlzLmJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncy5maWx0ZXIoKGJpbmQpID0+IHtcbiAgICAgIHJldHVybiAhKGJpbmQuZXZlbnQgPT09IGV2ZW50ICYmICh0eXBlb2YgcmVmID09PSBcInVuZGVmaW5lZFwiIHx8IHJlZiA9PT0gYmluZC5yZWYpKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNhblB1c2goKXsgcmV0dXJuIHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkgJiYgdGhpcy5pc0pvaW5lZCgpIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBtZXNzYWdlIGBldmVudGAgdG8gcGhvZW5peCB3aXRoIHRoZSBwYXlsb2FkIGBwYXlsb2FkYC5cbiAgICogUGhvZW5peCByZWNlaXZlcyB0aGlzIGluIHRoZSBgaGFuZGxlX2luKGV2ZW50LCBwYXlsb2FkLCBzb2NrZXQpYFxuICAgKiBmdW5jdGlvbi4gaWYgcGhvZW5peCByZXBsaWVzIG9yIGl0IHRpbWVzIG91dCAoZGVmYXVsdCAxMDAwMG1zKSxcbiAgICogdGhlbiBvcHRpb25hbGx5IHRoZSByZXBseSBjYW4gYmUgcmVjZWl2ZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNoYW5uZWwucHVzaChcImV2ZW50XCIpXG4gICAqICAgLnJlY2VpdmUoXCJva1wiLCBwYXlsb2FkID0+IGNvbnNvbGUubG9nKFwicGhvZW5peCByZXBsaWVkOlwiLCBwYXlsb2FkKSlcbiAgICogICAucmVjZWl2ZShcImVycm9yXCIsIGVyciA9PiBjb25zb2xlLmxvZyhcInBob2VuaXggZXJyb3JlZFwiLCBlcnIpKVxuICAgKiAgIC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiBjb25zb2xlLmxvZyhcInRpbWVkIG91dCBwdXNoaW5nXCIpKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt0aW1lb3V0XVxuICAgKiBAcmV0dXJucyB7UHVzaH1cbiAgICovXG4gIHB1c2goZXZlbnQsIHBheWxvYWQsIHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIHBheWxvYWQgPSBwYXlsb2FkIHx8IHt9XG4gICAgaWYoIXRoaXMuam9pbmVkT25jZSl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRyaWVkIHRvIHB1c2ggJyR7ZXZlbnR9JyB0byAnJHt0aGlzLnRvcGljfScgYmVmb3JlIGpvaW5pbmcuIFVzZSBjaGFubmVsLmpvaW4oKSBiZWZvcmUgcHVzaGluZyBldmVudHNgKVxuICAgIH1cbiAgICBsZXQgcHVzaEV2ZW50ID0gbmV3IFB1c2godGhpcywgZXZlbnQsIGZ1bmN0aW9uICgpeyByZXR1cm4gcGF5bG9hZCB9LCB0aW1lb3V0KVxuICAgIGlmKHRoaXMuY2FuUHVzaCgpKXtcbiAgICAgIHB1c2hFdmVudC5zZW5kKClcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaEV2ZW50LnN0YXJ0VGltZW91dCgpXG4gICAgICB0aGlzLnB1c2hCdWZmZXIucHVzaChwdXNoRXZlbnQpXG4gICAgfVxuXG4gICAgcmV0dXJuIHB1c2hFdmVudFxuICB9XG5cbiAgLyoqIExlYXZlcyB0aGUgY2hhbm5lbFxuICAgKlxuICAgKiBVbnN1YnNjcmliZXMgZnJvbSBzZXJ2ZXIgZXZlbnRzLCBhbmRcbiAgICogaW5zdHJ1Y3RzIGNoYW5uZWwgdG8gdGVybWluYXRlIG9uIHNlcnZlclxuICAgKlxuICAgKiBUcmlnZ2VycyBvbkNsb3NlKCkgaG9va3NcbiAgICpcbiAgICogVG8gcmVjZWl2ZSBsZWF2ZSBhY2tub3dsZWRnZW1lbnRzLCB1c2UgdGhlIGByZWNlaXZlYFxuICAgKiBob29rIHRvIGJpbmQgdG8gdGhlIHNlcnZlciBhY2ssIGllOlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjaGFubmVsLmxlYXZlKCkucmVjZWl2ZShcIm9rXCIsICgpID0+IGFsZXJ0KFwibGVmdCFcIikgKVxuICAgKlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHRpbWVvdXRcbiAgICogQHJldHVybnMge1B1c2h9XG4gICAqL1xuICBsZWF2ZSh0aW1lb3V0ID0gdGhpcy50aW1lb3V0KXtcbiAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KClcbiAgICB0aGlzLmpvaW5QdXNoLmNhbmNlbFRpbWVvdXQoKVxuXG4gICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmxlYXZpbmdcbiAgICBsZXQgb25DbG9zZSA9ICgpID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGBsZWF2ZSAke3RoaXMudG9waWN9YClcbiAgICAgIHRoaXMudHJpZ2dlcihDSEFOTkVMX0VWRU5UUy5jbG9zZSwgXCJsZWF2ZVwiKVxuICAgIH1cbiAgICBsZXQgbGVhdmVQdXNoID0gbmV3IFB1c2godGhpcywgQ0hBTk5FTF9FVkVOVFMubGVhdmUsIGNsb3N1cmUoe30pLCB0aW1lb3V0KVxuICAgIGxlYXZlUHVzaC5yZWNlaXZlKFwib2tcIiwgKCkgPT4gb25DbG9zZSgpKVxuICAgICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+IG9uQ2xvc2UoKSlcbiAgICBsZWF2ZVB1c2guc2VuZCgpXG4gICAgaWYoIXRoaXMuY2FuUHVzaCgpKXsgbGVhdmVQdXNoLnRyaWdnZXIoXCJva1wiLCB7fSkgfVxuXG4gICAgcmV0dXJuIGxlYXZlUHVzaFxuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRhYmxlIG1lc3NhZ2UgaG9va1xuICAgKlxuICAgKiBSZWNlaXZlcyBhbGwgZXZlbnRzIGZvciBzcGVjaWFsaXplZCBtZXNzYWdlIGhhbmRsaW5nXG4gICAqIGJlZm9yZSBkaXNwYXRjaGluZyB0byB0aGUgY2hhbm5lbCBjYWxsYmFja3MuXG4gICAqXG4gICAqIE11c3QgcmV0dXJuIHRoZSBwYXlsb2FkLCBtb2RpZmllZCBvciB1bm1vZGlmaWVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZFxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHJlZlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgb25NZXNzYWdlKF9ldmVudCwgcGF5bG9hZCwgX3JlZil7IHJldHVybiBwYXlsb2FkIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzTWVtYmVyKHRvcGljLCBldmVudCwgcGF5bG9hZCwgam9pblJlZil7XG4gICAgaWYodGhpcy50b3BpYyAhPT0gdG9waWMpeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgaWYoam9pblJlZiAmJiBqb2luUmVmICE9PSB0aGlzLmpvaW5SZWYoKSl7XG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBcImRyb3BwaW5nIG91dGRhdGVkIG1lc3NhZ2VcIiwge3RvcGljLCBldmVudCwgcGF5bG9hZCwgam9pblJlZn0pXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGpvaW5SZWYoKXsgcmV0dXJuIHRoaXMuam9pblB1c2gucmVmIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlam9pbih0aW1lb3V0ID0gdGhpcy50aW1lb3V0KXtcbiAgICBpZih0aGlzLmlzTGVhdmluZygpKXsgcmV0dXJuIH1cbiAgICB0aGlzLnNvY2tldC5sZWF2ZU9wZW5Ub3BpYyh0aGlzLnRvcGljKVxuICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5qb2luaW5nXG4gICAgdGhpcy5qb2luUHVzaC5yZXNlbmQodGltZW91dClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdHJpZ2dlcihldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luUmVmKXtcbiAgICBsZXQgaGFuZGxlZFBheWxvYWQgPSB0aGlzLm9uTWVzc2FnZShldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luUmVmKVxuICAgIGlmKHBheWxvYWQgJiYgIWhhbmRsZWRQYXlsb2FkKXsgdGhyb3cgbmV3IEVycm9yKFwiY2hhbm5lbCBvbk1lc3NhZ2UgY2FsbGJhY2tzIG11c3QgcmV0dXJuIHRoZSBwYXlsb2FkLCBtb2RpZmllZCBvciB1bm1vZGlmaWVkXCIpIH1cblxuICAgIGxldCBldmVudEJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncy5maWx0ZXIoYmluZCA9PiBiaW5kLmV2ZW50ID09PSBldmVudClcblxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBldmVudEJpbmRpbmdzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGxldCBiaW5kID0gZXZlbnRCaW5kaW5nc1tpXVxuICAgICAgYmluZC5jYWxsYmFjayhoYW5kbGVkUGF5bG9hZCwgcmVmLCBqb2luUmVmIHx8IHRoaXMuam9pblJlZigpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVwbHlFdmVudE5hbWUocmVmKXsgcmV0dXJuIGBjaGFuX3JlcGx5XyR7cmVmfWAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNDbG9zZWQoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmNsb3NlZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0Vycm9yZWQoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmVycm9yZWQgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNKb2luZWQoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmpvaW5lZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0pvaW5pbmcoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmpvaW5pbmcgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNMZWF2aW5nKCl7IHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5sZWF2aW5nIH1cbn1cbiIsICJpbXBvcnQge1xuICBnbG9iYWwsXG4gIFhIUl9TVEFURVNcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWpheCB7XG5cbiAgc3RhdGljIHJlcXVlc3QobWV0aG9kLCBlbmRQb2ludCwgYWNjZXB0LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICBpZihnbG9iYWwuWERvbWFpblJlcXVlc3Qpe1xuICAgICAgbGV0IHJlcSA9IG5ldyBnbG9iYWwuWERvbWFpblJlcXVlc3QoKSAvLyBJRTgsIElFOVxuICAgICAgcmV0dXJuIHRoaXMueGRvbWFpblJlcXVlc3QocmVxLCBtZXRob2QsIGVuZFBvaW50LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcmVxID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpIC8vIElFNyssIEZpcmVmb3gsIENocm9tZSwgT3BlcmEsIFNhZmFyaVxuICAgICAgcmV0dXJuIHRoaXMueGhyUmVxdWVzdChyZXEsIG1ldGhvZCwgZW5kUG9pbnQsIGFjY2VwdCwgYm9keSwgdGltZW91dCwgb250aW1lb3V0LCBjYWxsYmFjaylcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgeGRvbWFpblJlcXVlc3QocmVxLCBtZXRob2QsIGVuZFBvaW50LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICByZXEudGltZW91dCA9IHRpbWVvdXRcbiAgICByZXEub3BlbihtZXRob2QsIGVuZFBvaW50KVxuICAgIHJlcS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBsZXQgcmVzcG9uc2UgPSB0aGlzLnBhcnNlSlNPTihyZXEucmVzcG9uc2VUZXh0KVxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzcG9uc2UpXG4gICAgfVxuICAgIGlmKG9udGltZW91dCl7IHJlcS5vbnRpbWVvdXQgPSBvbnRpbWVvdXQgfVxuXG4gICAgLy8gV29yayBhcm91bmQgYnVnIGluIElFOSB0aGF0IHJlcXVpcmVzIGFuIGF0dGFjaGVkIG9ucHJvZ3Jlc3MgaGFuZGxlclxuICAgIHJlcS5vbnByb2dyZXNzID0gKCkgPT4geyB9XG5cbiAgICByZXEuc2VuZChib2R5KVxuICAgIHJldHVybiByZXFcbiAgfVxuXG4gIHN0YXRpYyB4aHJSZXF1ZXN0KHJlcSwgbWV0aG9kLCBlbmRQb2ludCwgYWNjZXB0LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICByZXEub3BlbihtZXRob2QsIGVuZFBvaW50LCB0cnVlKVxuICAgIHJlcS50aW1lb3V0ID0gdGltZW91dFxuICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIGFjY2VwdClcbiAgICByZXEub25lcnJvciA9ICgpID0+IGNhbGxiYWNrICYmIGNhbGxiYWNrKG51bGwpXG4gICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmKHJlcS5yZWFkeVN0YXRlID09PSBYSFJfU1RBVEVTLmNvbXBsZXRlICYmIGNhbGxiYWNrKXtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gdGhpcy5wYXJzZUpTT04ocmVxLnJlc3BvbnNlVGV4dClcbiAgICAgICAgY2FsbGJhY2socmVzcG9uc2UpXG4gICAgICB9XG4gICAgfVxuICAgIGlmKG9udGltZW91dCl7IHJlcS5vbnRpbWVvdXQgPSBvbnRpbWVvdXQgfVxuXG4gICAgcmVxLnNlbmQoYm9keSlcbiAgICByZXR1cm4gcmVxXG4gIH1cblxuICBzdGF0aWMgcGFyc2VKU09OKHJlc3Ape1xuICAgIGlmKCFyZXNwIHx8IHJlc3AgPT09IFwiXCIpeyByZXR1cm4gbnVsbCB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzcClcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgIGNvbnNvbGUgJiYgY29uc29sZS5sb2coXCJmYWlsZWQgdG8gcGFyc2UgSlNPTiByZXNwb25zZVwiLCByZXNwKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgc2VyaWFsaXplKG9iaiwgcGFyZW50S2V5KXtcbiAgICBsZXQgcXVlcnlTdHIgPSBbXVxuICAgIGZvcih2YXIga2V5IGluIG9iail7XG4gICAgICBpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSl7IGNvbnRpbnVlIH1cbiAgICAgIGxldCBwYXJhbUtleSA9IHBhcmVudEtleSA/IGAke3BhcmVudEtleX1bJHtrZXl9XWAgOiBrZXlcbiAgICAgIGxldCBwYXJhbVZhbCA9IG9ialtrZXldXG4gICAgICBpZih0eXBlb2YgcGFyYW1WYWwgPT09IFwib2JqZWN0XCIpe1xuICAgICAgICBxdWVyeVN0ci5wdXNoKHRoaXMuc2VyaWFsaXplKHBhcmFtVmFsLCBwYXJhbUtleSkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWVyeVN0ci5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChwYXJhbUtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbVZhbCkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBxdWVyeVN0ci5qb2luKFwiJlwiKVxuICB9XG5cbiAgc3RhdGljIGFwcGVuZFBhcmFtcyh1cmwsIHBhcmFtcyl7XG4gICAgaWYoT2JqZWN0LmtleXMocGFyYW1zKS5sZW5ndGggPT09IDApeyByZXR1cm4gdXJsIH1cblxuICAgIGxldCBwcmVmaXggPSB1cmwubWF0Y2goL1xcPy8pID8gXCImXCIgOiBcIj9cIlxuICAgIHJldHVybiBgJHt1cmx9JHtwcmVmaXh9JHt0aGlzLnNlcmlhbGl6ZShwYXJhbXMpfWBcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFNPQ0tFVF9TVEFURVMsXG4gIFRSQU5TUE9SVFNcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IEFqYXggZnJvbSBcIi4vYWpheFwiXG5cbmxldCBhcnJheUJ1ZmZlclRvQmFzZTY0ID0gKGJ1ZmZlcikgPT4ge1xuICBsZXQgYmluYXJ5ID0gXCJcIlxuICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpXG4gIGxldCBsZW4gPSBieXRlcy5ieXRlTGVuZ3RoXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBsZW47IGkrKyl7IGJpbmFyeSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKSB9XG4gIHJldHVybiBidG9hKGJpbmFyeSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9uZ1BvbGwge1xuXG4gIGNvbnN0cnVjdG9yKGVuZFBvaW50KXtcbiAgICB0aGlzLmVuZFBvaW50ID0gbnVsbFxuICAgIHRoaXMudG9rZW4gPSBudWxsXG4gICAgdGhpcy5za2lwSGVhcnRiZWF0ID0gdHJ1ZVxuICAgIHRoaXMucmVxcyA9IG5ldyBTZXQoKVxuICAgIHRoaXMuYXdhaXRpbmdCYXRjaEFjayA9IGZhbHNlXG4gICAgdGhpcy5jdXJyZW50QmF0Y2ggPSBudWxsXG4gICAgdGhpcy5jdXJyZW50QmF0Y2hUaW1lciA9IG51bGxcbiAgICB0aGlzLmJhdGNoQnVmZmVyID0gW11cbiAgICB0aGlzLm9ub3BlbiA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICB0aGlzLm9uZXJyb3IgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbmNsb3NlID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgIHRoaXMucG9sbEVuZHBvaW50ID0gdGhpcy5ub3JtYWxpemVFbmRwb2ludChlbmRQb2ludClcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLmNvbm5lY3RpbmdcbiAgICAvLyB3ZSBtdXN0IHdhaXQgZm9yIHRoZSBjYWxsZXIgdG8gZmluaXNoIHNldHRpbmcgdXAgb3VyIGNhbGxiYWNrcyBhbmQgdGltZW91dCBwcm9wZXJ0aWVzXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnBvbGwoKSwgMClcbiAgfVxuXG4gIG5vcm1hbGl6ZUVuZHBvaW50KGVuZFBvaW50KXtcbiAgICByZXR1cm4gKGVuZFBvaW50XG4gICAgICAucmVwbGFjZShcIndzOi8vXCIsIFwiaHR0cDovL1wiKVxuICAgICAgLnJlcGxhY2UoXCJ3c3M6Ly9cIiwgXCJodHRwczovL1wiKVxuICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cChcIiguKilcXC9cIiArIFRSQU5TUE9SVFMud2Vic29ja2V0KSwgXCIkMS9cIiArIFRSQU5TUE9SVFMubG9uZ3BvbGwpKVxuICB9XG5cbiAgZW5kcG9pbnRVUkwoKXtcbiAgICByZXR1cm4gQWpheC5hcHBlbmRQYXJhbXModGhpcy5wb2xsRW5kcG9pbnQsIHt0b2tlbjogdGhpcy50b2tlbn0pXG4gIH1cblxuICBjbG9zZUFuZFJldHJ5KGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4pe1xuICAgIHRoaXMuY2xvc2UoY29kZSwgcmVhc29uLCB3YXNDbGVhbilcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLmNvbm5lY3RpbmdcbiAgfVxuXG4gIG9udGltZW91dCgpe1xuICAgIHRoaXMub25lcnJvcihcInRpbWVvdXRcIilcbiAgICB0aGlzLmNsb3NlQW5kUmV0cnkoMTAwNSwgXCJ0aW1lb3V0XCIsIGZhbHNlKVxuICB9XG5cbiAgaXNBY3RpdmUoKXsgcmV0dXJuIHRoaXMucmVhZHlTdGF0ZSA9PT0gU09DS0VUX1NUQVRFUy5vcGVuIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gU09DS0VUX1NUQVRFUy5jb25uZWN0aW5nIH1cblxuICBwb2xsKCl7XG4gICAgdGhpcy5hamF4KFwiR0VUXCIsIFwiYXBwbGljYXRpb24vanNvblwiLCBudWxsLCAoKSA9PiB0aGlzLm9udGltZW91dCgpLCByZXNwID0+IHtcbiAgICAgIGlmKHJlc3Ape1xuICAgICAgICB2YXIge3N0YXR1cywgdG9rZW4sIG1lc3NhZ2VzfSA9IHJlc3BcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0dXMgPSAwXG4gICAgICB9XG5cbiAgICAgIHN3aXRjaChzdGF0dXMpe1xuICAgICAgICBjYXNlIDIwMDpcbiAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKG1zZyA9PiB7XG4gICAgICAgICAgICAvLyBUYXNrcyBhcmUgd2hhdCB0aGluZ3MgbGlrZSBldmVudCBoYW5kbGVycywgc2V0VGltZW91dCBjYWxsYmFja3MsXG4gICAgICAgICAgICAvLyBwcm9taXNlIHJlc29sdmVzIGFuZCBtb3JlIGFyZSBydW4gd2l0aGluLlxuICAgICAgICAgICAgLy8gSW4gbW9kZXJuIGJyb3dzZXJzLCB0aGVyZSBhcmUgdHdvIGRpZmZlcmVudCBraW5kcyBvZiB0YXNrcyxcbiAgICAgICAgICAgIC8vIG1pY3JvdGFza3MgYW5kIG1hY3JvdGFza3MuXG4gICAgICAgICAgICAvLyBNaWNyb3Rhc2tzIGFyZSBtYWlubHkgdXNlZCBmb3IgUHJvbWlzZXMsIHdoaWxlIG1hY3JvdGFza3MgYXJlXG4gICAgICAgICAgICAvLyB1c2VkIGZvciBldmVyeXRoaW5nIGVsc2UuXG4gICAgICAgICAgICAvLyBNaWNyb3Rhc2tzIGFsd2F5cyBoYXZlIHByaW9yaXR5IG92ZXIgbWFjcm90YXNrcy4gSWYgdGhlIEpTIGVuZ2luZVxuICAgICAgICAgICAgLy8gaXMgbG9va2luZyBmb3IgYSB0YXNrIHRvIHJ1biwgaXQgd2lsbCBhbHdheXMgdHJ5IHRvIGVtcHR5IHRoZVxuICAgICAgICAgICAgLy8gbWljcm90YXNrIHF1ZXVlIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHJ1biBhbnl0aGluZyBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gbWFjcm90YXNrIHF1ZXVlLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEZvciB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydCwgbWVzc2FnZXMgYWx3YXlzIGFycml2ZSBpbiB0aGVpciBvd25cbiAgICAgICAgICAgIC8vIGV2ZW50LiBUaGlzIG1lYW5zIHRoYXQgaWYgYW55IHByb21pc2VzIGFyZSByZXNvbHZlZCBmcm9tIHdpdGhpbixcbiAgICAgICAgICAgIC8vIHRoZWlyIGNhbGxiYWNrcyB3aWxsIGFsd2F5cyBmaW5pc2ggZXhlY3V0aW9uIGJ5IHRoZSB0aW1lIHRoZVxuICAgICAgICAgICAgLy8gbmV4dCBtZXNzYWdlIGV2ZW50IGhhbmRsZXIgaXMgcnVuLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEluIG9yZGVyIHRvIGVtdWxhdGUgdGhpcyBiZWhhdmlvdXIsIHdlIG5lZWQgdG8gbWFrZSBzdXJlIGVhY2hcbiAgICAgICAgICAgIC8vIG9ubWVzc2FnZSBoYW5kbGVyIGlzIHJ1biB3aXRoaW4gaXRzIG93biBtYWNyb3Rhc2suXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMub25tZXNzYWdlKHtkYXRhOiBtc2d9KSwgMClcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMucG9sbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyMDQ6XG4gICAgICAgICAgdGhpcy5wb2xsKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQxMDpcbiAgICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLm9wZW5cbiAgICAgICAgICB0aGlzLm9ub3Blbih7fSlcbiAgICAgICAgICB0aGlzLnBvbGwoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDAzOlxuICAgICAgICAgIHRoaXMub25lcnJvcig0MDMpXG4gICAgICAgICAgdGhpcy5jbG9zZSgxMDA4LCBcImZvcmJpZGRlblwiLCBmYWxzZSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgNTAwOlxuICAgICAgICAgIHRoaXMub25lcnJvcig1MDApXG4gICAgICAgICAgdGhpcy5jbG9zZUFuZFJldHJ5KDEwMTEsIFwiaW50ZXJuYWwgc2VydmVyIGVycm9yXCIsIDUwMClcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYHVuaGFuZGxlZCBwb2xsIHN0YXR1cyAke3N0YXR1c31gKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyB3ZSBjb2xsZWN0IGFsbCBwdXNoZXMgd2l0aGluIHRoZSBjdXJyZW50IGV2ZW50IGxvb3AgYnlcbiAgLy8gc2V0VGltZW91dCAwLCB3aGljaCBvcHRpbWl6ZXMgYmFjay10by1iYWNrIHByb2NlZHVyYWxcbiAgLy8gcHVzaGVzIGFnYWluc3QgYW4gZW1wdHkgYnVmZmVyXG5cbiAgc2VuZChib2R5KXtcbiAgICBpZih0eXBlb2YoYm9keSkgIT09IFwic3RyaW5nXCIpeyBib2R5ID0gYXJyYXlCdWZmZXJUb0Jhc2U2NChib2R5KSB9XG4gICAgaWYodGhpcy5jdXJyZW50QmF0Y2gpe1xuICAgICAgdGhpcy5jdXJyZW50QmF0Y2gucHVzaChib2R5KVxuICAgIH0gZWxzZSBpZih0aGlzLmF3YWl0aW5nQmF0Y2hBY2spe1xuICAgICAgdGhpcy5iYXRjaEJ1ZmZlci5wdXNoKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudEJhdGNoID0gW2JvZHldXG4gICAgICB0aGlzLmN1cnJlbnRCYXRjaFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuYmF0Y2hTZW5kKHRoaXMuY3VycmVudEJhdGNoKVxuICAgICAgICB0aGlzLmN1cnJlbnRCYXRjaCA9IG51bGxcbiAgICAgIH0sIDApXG4gICAgfVxuICB9XG5cbiAgYmF0Y2hTZW5kKG1lc3NhZ2VzKXtcbiAgICB0aGlzLmF3YWl0aW5nQmF0Y2hBY2sgPSB0cnVlXG4gICAgdGhpcy5hamF4KFwiUE9TVFwiLCBcImFwcGxpY2F0aW9uL3gtbmRqc29uXCIsIG1lc3NhZ2VzLmpvaW4oXCJcXG5cIiksICgpID0+IHRoaXMub25lcnJvcihcInRpbWVvdXRcIiksIHJlc3AgPT4ge1xuICAgICAgdGhpcy5hd2FpdGluZ0JhdGNoQWNrID0gZmFsc2VcbiAgICAgIGlmKCFyZXNwIHx8IHJlc3Auc3RhdHVzICE9PSAyMDApe1xuICAgICAgICB0aGlzLm9uZXJyb3IocmVzcCAmJiByZXNwLnN0YXR1cylcbiAgICAgICAgdGhpcy5jbG9zZUFuZFJldHJ5KDEwMTEsIFwiaW50ZXJuYWwgc2VydmVyIGVycm9yXCIsIGZhbHNlKVxuICAgICAgfSBlbHNlIGlmKHRoaXMuYmF0Y2hCdWZmZXIubGVuZ3RoID4gMCl7XG4gICAgICAgIHRoaXMuYmF0Y2hTZW5kKHRoaXMuYmF0Y2hCdWZmZXIpXG4gICAgICAgIHRoaXMuYmF0Y2hCdWZmZXIgPSBbXVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBjbG9zZShjb2RlLCByZWFzb24sIHdhc0NsZWFuKXtcbiAgICBmb3IobGV0IHJlcSBvZiB0aGlzLnJlcXMpeyByZXEuYWJvcnQoKSB9XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU09DS0VUX1NUQVRFUy5jbG9zZWRcbiAgICBsZXQgb3B0cyA9IE9iamVjdC5hc3NpZ24oe2NvZGU6IDEwMDAsIHJlYXNvbjogdW5kZWZpbmVkLCB3YXNDbGVhbjogdHJ1ZX0sIHtjb2RlLCByZWFzb24sIHdhc0NsZWFufSlcbiAgICB0aGlzLmJhdGNoQnVmZmVyID0gW11cbiAgICBjbGVhclRpbWVvdXQodGhpcy5jdXJyZW50QmF0Y2hUaW1lcilcbiAgICB0aGlzLmN1cnJlbnRCYXRjaFRpbWVyID0gbnVsbFxuICAgIGlmKHR5cGVvZihDbG9zZUV2ZW50KSAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICB0aGlzLm9uY2xvc2UobmV3IENsb3NlRXZlbnQoXCJjbG9zZVwiLCBvcHRzKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbmNsb3NlKG9wdHMpXG4gICAgfVxuICB9XG5cbiAgYWpheChtZXRob2QsIGNvbnRlbnRUeXBlLCBib2R5LCBvbkNhbGxlclRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICBsZXQgcmVxXG4gICAgbGV0IG9udGltZW91dCA9ICgpID0+IHtcbiAgICAgIHRoaXMucmVxcy5kZWxldGUocmVxKVxuICAgICAgb25DYWxsZXJUaW1lb3V0KClcbiAgICB9XG4gICAgcmVxID0gQWpheC5yZXF1ZXN0KG1ldGhvZCwgdGhpcy5lbmRwb2ludFVSTCgpLCBjb250ZW50VHlwZSwgYm9keSwgdGhpcy50aW1lb3V0LCBvbnRpbWVvdXQsIHJlc3AgPT4ge1xuICAgICAgdGhpcy5yZXFzLmRlbGV0ZShyZXEpXG4gICAgICBpZih0aGlzLmlzQWN0aXZlKCkpeyBjYWxsYmFjayhyZXNwKSB9XG4gICAgfSlcbiAgICB0aGlzLnJlcXMuYWRkKHJlcSlcbiAgfVxufVxuIiwgIi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIFByZXNlbmNlXG4gKiBAcGFyYW0ge0NoYW5uZWx9IGNoYW5uZWwgLSBUaGUgQ2hhbm5lbFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgb3B0aW9ucyxcbiAqICAgICAgICBmb3IgZXhhbXBsZSBge2V2ZW50czoge3N0YXRlOiBcInN0YXRlXCIsIGRpZmY6IFwiZGlmZlwifX1gXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZXNlbmNlIHtcblxuICBjb25zdHJ1Y3RvcihjaGFubmVsLCBvcHRzID0ge30pe1xuICAgIGxldCBldmVudHMgPSBvcHRzLmV2ZW50cyB8fCB7c3RhdGU6IFwicHJlc2VuY2Vfc3RhdGVcIiwgZGlmZjogXCJwcmVzZW5jZV9kaWZmXCJ9XG4gICAgdGhpcy5zdGF0ZSA9IHt9XG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWxcbiAgICB0aGlzLmpvaW5SZWYgPSBudWxsXG4gICAgdGhpcy5jYWxsZXIgPSB7XG4gICAgICBvbkpvaW46IGZ1bmN0aW9uICgpeyB9LFxuICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKCl7IH0sXG4gICAgICBvblN5bmM6IGZ1bmN0aW9uICgpeyB9XG4gICAgfVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKGV2ZW50cy5zdGF0ZSwgbmV3U3RhdGUgPT4ge1xuICAgICAgbGV0IHtvbkpvaW4sIG9uTGVhdmUsIG9uU3luY30gPSB0aGlzLmNhbGxlclxuXG4gICAgICB0aGlzLmpvaW5SZWYgPSB0aGlzLmNoYW5uZWwuam9pblJlZigpXG4gICAgICB0aGlzLnN0YXRlID0gUHJlc2VuY2Uuc3luY1N0YXRlKHRoaXMuc3RhdGUsIG5ld1N0YXRlLCBvbkpvaW4sIG9uTGVhdmUpXG5cbiAgICAgIHRoaXMucGVuZGluZ0RpZmZzLmZvckVhY2goZGlmZiA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jRGlmZih0aGlzLnN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpXG4gICAgICB9KVxuICAgICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgICAgb25TeW5jKClcbiAgICB9KVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKGV2ZW50cy5kaWZmLCBkaWZmID0+IHtcbiAgICAgIGxldCB7b25Kb2luLCBvbkxlYXZlLCBvblN5bmN9ID0gdGhpcy5jYWxsZXJcblxuICAgICAgaWYodGhpcy5pblBlbmRpbmdTeW5jU3RhdGUoKSl7XG4gICAgICAgIHRoaXMucGVuZGluZ0RpZmZzLnB1c2goZGlmZilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jRGlmZih0aGlzLnN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpXG4gICAgICAgIG9uU3luYygpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIG9uSm9pbihjYWxsYmFjayl7IHRoaXMuY2FsbGVyLm9uSm9pbiA9IGNhbGxiYWNrIH1cblxuICBvbkxlYXZlKGNhbGxiYWNrKXsgdGhpcy5jYWxsZXIub25MZWF2ZSA9IGNhbGxiYWNrIH1cblxuICBvblN5bmMoY2FsbGJhY2speyB0aGlzLmNhbGxlci5vblN5bmMgPSBjYWxsYmFjayB9XG5cbiAgbGlzdChieSl7IHJldHVybiBQcmVzZW5jZS5saXN0KHRoaXMuc3RhdGUsIGJ5KSB9XG5cbiAgaW5QZW5kaW5nU3luY1N0YXRlKCl7XG4gICAgcmV0dXJuICF0aGlzLmpvaW5SZWYgfHwgKHRoaXMuam9pblJlZiAhPT0gdGhpcy5jaGFubmVsLmpvaW5SZWYoKSlcbiAgfVxuXG4gIC8vIGxvd2VyLWxldmVsIHB1YmxpYyBzdGF0aWMgQVBJXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gc3luYyB0aGUgbGlzdCBvZiBwcmVzZW5jZXMgb24gdGhlIHNlcnZlclxuICAgKiB3aXRoIHRoZSBjbGllbnQncyBzdGF0ZS4gQW4gb3B0aW9uYWwgYG9uSm9pbmAgYW5kIGBvbkxlYXZlYCBjYWxsYmFjayBjYW5cbiAgICogYmUgcHJvdmlkZWQgdG8gcmVhY3QgdG8gY2hhbmdlcyBpbiB0aGUgY2xpZW50J3MgbG9jYWwgcHJlc2VuY2VzIGFjcm9zc1xuICAgKiBkaXNjb25uZWN0cyBhbmQgcmVjb25uZWN0cyB3aXRoIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBzeW5jU3RhdGUoY3VycmVudFN0YXRlLCBuZXdTdGF0ZSwgb25Kb2luLCBvbkxlYXZlKXtcbiAgICBsZXQgc3RhdGUgPSB0aGlzLmNsb25lKGN1cnJlbnRTdGF0ZSlcbiAgICBsZXQgam9pbnMgPSB7fVxuICAgIGxldCBsZWF2ZXMgPSB7fVxuXG4gICAgdGhpcy5tYXAoc3RhdGUsIChrZXksIHByZXNlbmNlKSA9PiB7XG4gICAgICBpZighbmV3U3RhdGVba2V5XSl7XG4gICAgICAgIGxlYXZlc1trZXldID0gcHJlc2VuY2VcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMubWFwKG5ld1N0YXRlLCAoa2V5LCBuZXdQcmVzZW5jZSkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnRQcmVzZW5jZSA9IHN0YXRlW2tleV1cbiAgICAgIGlmKGN1cnJlbnRQcmVzZW5jZSl7XG4gICAgICAgIGxldCBuZXdSZWZzID0gbmV3UHJlc2VuY2UubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgICBsZXQgY3VyUmVmcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICAgIGxldCBqb2luZWRNZXRhcyA9IG5ld1ByZXNlbmNlLm1ldGFzLmZpbHRlcihtID0+IGN1clJlZnMuaW5kZXhPZihtLnBoeF9yZWYpIDwgMClcbiAgICAgICAgbGV0IGxlZnRNZXRhcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5maWx0ZXIobSA9PiBuZXdSZWZzLmluZGV4T2YobS5waHhfcmVmKSA8IDApXG4gICAgICAgIGlmKGpvaW5lZE1ldGFzLmxlbmd0aCA+IDApe1xuICAgICAgICAgIGpvaW5zW2tleV0gPSBuZXdQcmVzZW5jZVxuICAgICAgICAgIGpvaW5zW2tleV0ubWV0YXMgPSBqb2luZWRNZXRhc1xuICAgICAgICB9XG4gICAgICAgIGlmKGxlZnRNZXRhcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICBsZWF2ZXNba2V5XSA9IHRoaXMuY2xvbmUoY3VycmVudFByZXNlbmNlKVxuICAgICAgICAgIGxlYXZlc1trZXldLm1ldGFzID0gbGVmdE1ldGFzXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpvaW5zW2tleV0gPSBuZXdQcmVzZW5jZVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXMuc3luY0RpZmYoc3RhdGUsIHtqb2luczogam9pbnMsIGxlYXZlczogbGVhdmVzfSwgb25Kb2luLCBvbkxlYXZlKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFVzZWQgdG8gc3luYyBhIGRpZmYgb2YgcHJlc2VuY2Ugam9pbiBhbmQgbGVhdmVcbiAgICogZXZlbnRzIGZyb20gdGhlIHNlcnZlciwgYXMgdGhleSBoYXBwZW4uIExpa2UgYHN5bmNTdGF0ZWAsIGBzeW5jRGlmZmBcbiAgICogYWNjZXB0cyBvcHRpb25hbCBgb25Kb2luYCBhbmQgYG9uTGVhdmVgIGNhbGxiYWNrcyB0byByZWFjdCB0byBhIHVzZXJcbiAgICogam9pbmluZyBvciBsZWF2aW5nIGZyb20gYSBkZXZpY2UuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBzeW5jRGlmZihzdGF0ZSwgZGlmZiwgb25Kb2luLCBvbkxlYXZlKXtcbiAgICBsZXQge2pvaW5zLCBsZWF2ZXN9ID0gdGhpcy5jbG9uZShkaWZmKVxuICAgIGlmKCFvbkpvaW4peyBvbkpvaW4gPSBmdW5jdGlvbiAoKXsgfSB9XG4gICAgaWYoIW9uTGVhdmUpeyBvbkxlYXZlID0gZnVuY3Rpb24gKCl7IH0gfVxuXG4gICAgdGhpcy5tYXAoam9pbnMsIChrZXksIG5ld1ByZXNlbmNlKSA9PiB7XG4gICAgICBsZXQgY3VycmVudFByZXNlbmNlID0gc3RhdGVba2V5XVxuICAgICAgc3RhdGVba2V5XSA9IHRoaXMuY2xvbmUobmV3UHJlc2VuY2UpXG4gICAgICBpZihjdXJyZW50UHJlc2VuY2Upe1xuICAgICAgICBsZXQgam9pbmVkUmVmcyA9IHN0YXRlW2tleV0ubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgICBsZXQgY3VyTWV0YXMgPSBjdXJyZW50UHJlc2VuY2UubWV0YXMuZmlsdGVyKG0gPT4gam9pbmVkUmVmcy5pbmRleE9mKG0ucGh4X3JlZikgPCAwKVxuICAgICAgICBzdGF0ZVtrZXldLm1ldGFzLnVuc2hpZnQoLi4uY3VyTWV0YXMpXG4gICAgICB9XG4gICAgICBvbkpvaW4oa2V5LCBjdXJyZW50UHJlc2VuY2UsIG5ld1ByZXNlbmNlKVxuICAgIH0pXG4gICAgdGhpcy5tYXAobGVhdmVzLCAoa2V5LCBsZWZ0UHJlc2VuY2UpID0+IHtcbiAgICAgIGxldCBjdXJyZW50UHJlc2VuY2UgPSBzdGF0ZVtrZXldXG4gICAgICBpZighY3VycmVudFByZXNlbmNlKXsgcmV0dXJuIH1cbiAgICAgIGxldCByZWZzVG9SZW1vdmUgPSBsZWZ0UHJlc2VuY2UubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgY3VycmVudFByZXNlbmNlLm1ldGFzID0gY3VycmVudFByZXNlbmNlLm1ldGFzLmZpbHRlcihwID0+IHtcbiAgICAgICAgcmV0dXJuIHJlZnNUb1JlbW92ZS5pbmRleE9mKHAucGh4X3JlZikgPCAwXG4gICAgICB9KVxuICAgICAgb25MZWF2ZShrZXksIGN1cnJlbnRQcmVzZW5jZSwgbGVmdFByZXNlbmNlKVxuICAgICAgaWYoY3VycmVudFByZXNlbmNlLm1ldGFzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGRlbGV0ZSBzdGF0ZVtrZXldXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gc3RhdGVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcmVzZW5jZXMsIHdpdGggc2VsZWN0ZWQgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcmVzZW5jZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2hvb3NlclxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJlc2VuY2V9XG4gICAqL1xuICBzdGF0aWMgbGlzdChwcmVzZW5jZXMsIGNob29zZXIpe1xuICAgIGlmKCFjaG9vc2VyKXsgY2hvb3NlciA9IGZ1bmN0aW9uIChrZXksIHByZXMpeyByZXR1cm4gcHJlcyB9IH1cblxuICAgIHJldHVybiB0aGlzLm1hcChwcmVzZW5jZXMsIChrZXksIHByZXNlbmNlKSA9PiB7XG4gICAgICByZXR1cm4gY2hvb3NlcihrZXksIHByZXNlbmNlKVxuICAgIH0pXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgc3RhdGljIG1hcChvYmosIGZ1bmMpe1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLm1hcChrZXkgPT4gZnVuYyhrZXksIG9ialtrZXldKSlcbiAgfVxuXG4gIHN0YXRpYyBjbG9uZShvYmopeyByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKSB9XG59XG4iLCAiLyogVGhlIGRlZmF1bHQgc2VyaWFsaXplciBmb3IgZW5jb2RpbmcgYW5kIGRlY29kaW5nIG1lc3NhZ2VzICovXG5pbXBvcnQge1xuICBDSEFOTkVMX0VWRU5UU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIEhFQURFUl9MRU5HVEg6IDEsXG4gIE1FVEFfTEVOR1RIOiA0LFxuICBLSU5EUzoge3B1c2g6IDAsIHJlcGx5OiAxLCBicm9hZGNhc3Q6IDJ9LFxuXG4gIGVuY29kZShtc2csIGNhbGxiYWNrKXtcbiAgICBpZihtc2cucGF5bG9hZC5jb25zdHJ1Y3RvciA9PT0gQXJyYXlCdWZmZXIpe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMuYmluYXJ5RW5jb2RlKG1zZykpXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXlsb2FkID0gW21zZy5qb2luX3JlZiwgbXNnLnJlZiwgbXNnLnRvcGljLCBtc2cuZXZlbnQsIG1zZy5wYXlsb2FkXVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKVxuICAgIH1cbiAgfSxcblxuICBkZWNvZGUocmF3UGF5bG9hZCwgY2FsbGJhY2spe1xuICAgIGlmKHJhd1BheWxvYWQuY29uc3RydWN0b3IgPT09IEFycmF5QnVmZmVyKXtcbiAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzLmJpbmFyeURlY29kZShyYXdQYXlsb2FkKSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IFtqb2luX3JlZiwgcmVmLCB0b3BpYywgZXZlbnQsIHBheWxvYWRdID0gSlNPTi5wYXJzZShyYXdQYXlsb2FkKVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKHtqb2luX3JlZiwgcmVmLCB0b3BpYywgZXZlbnQsIHBheWxvYWR9KVxuICAgIH1cbiAgfSxcblxuICAvLyBwcml2YXRlXG5cbiAgYmluYXJ5RW5jb2RlKG1lc3NhZ2Upe1xuICAgIGxldCB7am9pbl9yZWYsIHJlZiwgZXZlbnQsIHRvcGljLCBwYXlsb2FkfSA9IG1lc3NhZ2VcbiAgICBsZXQgbWV0YUxlbmd0aCA9IHRoaXMuTUVUQV9MRU5HVEggKyBqb2luX3JlZi5sZW5ndGggKyByZWYubGVuZ3RoICsgdG9waWMubGVuZ3RoICsgZXZlbnQubGVuZ3RoXG4gICAgbGV0IGhlYWRlciA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLkhFQURFUl9MRU5HVEggKyBtZXRhTGVuZ3RoKVxuICAgIGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KGhlYWRlcilcbiAgICBsZXQgb2Zmc2V0ID0gMFxuXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgdGhpcy5LSU5EUy5wdXNoKSAvLyBraW5kXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgam9pbl9yZWYubGVuZ3RoKVxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIHJlZi5sZW5ndGgpXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgdG9waWMubGVuZ3RoKVxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGV2ZW50Lmxlbmd0aClcbiAgICBBcnJheS5mcm9tKGpvaW5fcmVmLCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG4gICAgQXJyYXkuZnJvbShyZWYsIGNoYXIgPT4gdmlldy5zZXRVaW50OChvZmZzZXQrKywgY2hhci5jaGFyQ29kZUF0KDApKSlcbiAgICBBcnJheS5mcm9tKHRvcGljLCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG4gICAgQXJyYXkuZnJvbShldmVudCwgY2hhciA9PiB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjaGFyLmNoYXJDb2RlQXQoMCkpKVxuXG4gICAgdmFyIGNvbWJpbmVkID0gbmV3IFVpbnQ4QXJyYXkoaGVhZGVyLmJ5dGVMZW5ndGggKyBwYXlsb2FkLmJ5dGVMZW5ndGgpXG4gICAgY29tYmluZWQuc2V0KG5ldyBVaW50OEFycmF5KGhlYWRlciksIDApXG4gICAgY29tYmluZWQuc2V0KG5ldyBVaW50OEFycmF5KHBheWxvYWQpLCBoZWFkZXIuYnl0ZUxlbmd0aClcblxuICAgIHJldHVybiBjb21iaW5lZC5idWZmZXJcbiAgfSxcblxuICBiaW5hcnlEZWNvZGUoYnVmZmVyKXtcbiAgICBsZXQgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpXG4gICAgbGV0IGtpbmQgPSB2aWV3LmdldFVpbnQ4KDApXG4gICAgbGV0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKVxuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgdGhpcy5LSU5EUy5wdXNoOiByZXR1cm4gdGhpcy5kZWNvZGVQdXNoKGJ1ZmZlciwgdmlldywgZGVjb2RlcilcbiAgICAgIGNhc2UgdGhpcy5LSU5EUy5yZXBseTogcmV0dXJuIHRoaXMuZGVjb2RlUmVwbHkoYnVmZmVyLCB2aWV3LCBkZWNvZGVyKVxuICAgICAgY2FzZSB0aGlzLktJTkRTLmJyb2FkY2FzdDogcmV0dXJuIHRoaXMuZGVjb2RlQnJvYWRjYXN0KGJ1ZmZlciwgdmlldywgZGVjb2RlcilcbiAgICB9XG4gIH0sXG5cbiAgZGVjb2RlUHVzaChidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCBqb2luUmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgdG9waWNTaXplID0gdmlldy5nZXRVaW50OCgyKVxuICAgIGxldCBldmVudFNpemUgPSB2aWV3LmdldFVpbnQ4KDMpXG4gICAgbGV0IG9mZnNldCA9IHRoaXMuSEVBREVSX0xFTkdUSCArIHRoaXMuTUVUQV9MRU5HVEggLSAxIC8vIHB1c2hlcyBoYXZlIG5vIHJlZlxuICAgIGxldCBqb2luUmVmID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgam9pblJlZlNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGpvaW5SZWZTaXplXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgcmV0dXJuIHtqb2luX3JlZjogam9pblJlZiwgcmVmOiBudWxsLCB0b3BpYzogdG9waWMsIGV2ZW50OiBldmVudCwgcGF5bG9hZDogZGF0YX1cbiAgfSxcblxuICBkZWNvZGVSZXBseShidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCBqb2luUmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgcmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMilcbiAgICBsZXQgdG9waWNTaXplID0gdmlldy5nZXRVaW50OCgzKVxuICAgIGxldCBldmVudFNpemUgPSB2aWV3LmdldFVpbnQ4KDQpXG4gICAgbGV0IG9mZnNldCA9IHRoaXMuSEVBREVSX0xFTkdUSCArIHRoaXMuTUVUQV9MRU5HVEhcbiAgICBsZXQgam9pblJlZiA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGpvaW5SZWZTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBqb2luUmVmU2l6ZVxuICAgIGxldCByZWYgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyByZWZTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyByZWZTaXplXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgbGV0IHBheWxvYWQgPSB7c3RhdHVzOiBldmVudCwgcmVzcG9uc2U6IGRhdGF9XG4gICAgcmV0dXJuIHtqb2luX3JlZjogam9pblJlZiwgcmVmOiByZWYsIHRvcGljOiB0b3BpYywgZXZlbnQ6IENIQU5ORUxfRVZFTlRTLnJlcGx5LCBwYXlsb2FkOiBwYXlsb2FkfVxuICB9LFxuXG4gIGRlY29kZUJyb2FkY2FzdChidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCB0b3BpY1NpemUgPSB2aWV3LmdldFVpbnQ4KDEpXG4gICAgbGV0IGV2ZW50U2l6ZSA9IHZpZXcuZ2V0VWludDgoMilcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5IRUFERVJfTEVOR1RIICsgMlxuICAgIGxldCB0b3BpYyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHRvcGljU2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgdG9waWNTaXplXG4gICAgbGV0IGV2ZW50ID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgZXZlbnRTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBldmVudFNpemVcbiAgICBsZXQgZGF0YSA9IGJ1ZmZlci5zbGljZShvZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKVxuXG4gICAgcmV0dXJuIHtqb2luX3JlZjogbnVsbCwgcmVmOiBudWxsLCB0b3BpYzogdG9waWMsIGV2ZW50OiBldmVudCwgcGF5bG9hZDogZGF0YX1cbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIGdsb2JhbCxcbiAgcGh4V2luZG93LFxuICBDSEFOTkVMX0VWRU5UUyxcbiAgREVGQVVMVF9USU1FT1VULFxuICBERUZBVUxUX1ZTTixcbiAgU09DS0VUX1NUQVRFUyxcbiAgVFJBTlNQT1JUUyxcbiAgV1NfQ0xPU0VfTk9STUFMXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNsb3N1cmVcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgQWpheCBmcm9tIFwiLi9hamF4XCJcbmltcG9ydCBDaGFubmVsIGZyb20gXCIuL2NoYW5uZWxcIlxuaW1wb3J0IExvbmdQb2xsIGZyb20gXCIuL2xvbmdwb2xsXCJcbmltcG9ydCBTZXJpYWxpemVyIGZyb20gXCIuL3NlcmlhbGl6ZXJcIlxuaW1wb3J0IFRpbWVyIGZyb20gXCIuL3RpbWVyXCJcblxuLyoqIEluaXRpYWxpemVzIHRoZSBTb2NrZXQgKlxuICpcbiAqIEZvciBJRTggc3VwcG9ydCB1c2UgYW4gRVM1LXNoaW0gKGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5kUG9pbnQgLSBUaGUgc3RyaW5nIFdlYlNvY2tldCBlbmRwb2ludCwgaWUsIGBcIndzOi8vZXhhbXBsZS5jb20vc29ja2V0XCJgLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcIndzczovL2V4YW1wbGUuY29tXCJgXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwiL3NvY2tldFwiYCAoaW5oZXJpdGVkIGhvc3QgJiBwcm90b2NvbClcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c10gLSBPcHRpb25hbCBjb25maWd1cmF0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy50cmFuc3BvcnRdIC0gVGhlIFdlYnNvY2tldCBUcmFuc3BvcnQsIGZvciBleGFtcGxlIFdlYlNvY2tldCBvciBQaG9lbml4LkxvbmdQb2xsLlxuICpcbiAqIERlZmF1bHRzIHRvIFdlYlNvY2tldCB3aXRoIGF1dG9tYXRpYyBMb25nUG9sbCBmYWxsYmFjayBpZiBXZWJTb2NrZXQgaXMgbm90IGRlZmluZWQuXG4gKiBUbyBmYWxsYmFjayB0byBMb25nUG9sbCB3aGVuIFdlYlNvY2tldCBhdHRlbXB0cyBmYWlsLCB1c2UgYGxvbmdQb2xsRmFsbGJhY2tNczogMjUwMGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMubG9uZ1BvbGxGYWxsYmFja01zXSAtIFRoZSBtaWxsaXNlY29uZCB0aW1lIHRvIGF0dGVtcHQgdGhlIHByaW1hcnkgdHJhbnNwb3J0XG4gKiBiZWZvcmUgZmFsbGluZyBiYWNrIHRvIHRoZSBMb25nUG9sbCB0cmFuc3BvcnQuIERpc2FibGVkIGJ5IGRlZmF1bHQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMuZGVidWddIC0gV2hlbiB0cnVlLCBlbmFibGVzIGRlYnVnIGxvZ2dpbmcuIERlZmF1bHQgZmFsc2UuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMuZW5jb2RlXSAtIFRoZSBmdW5jdGlvbiB0byBlbmNvZGUgb3V0Z29pbmcgbWVzc2FnZXMuXG4gKlxuICogRGVmYXVsdHMgdG8gSlNPTiBlbmNvZGVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLmRlY29kZV0gLSBUaGUgZnVuY3Rpb24gdG8gZGVjb2RlIGluY29taW5nIG1lc3NhZ2VzLlxuICpcbiAqIERlZmF1bHRzIHRvIEpTT046XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogKHBheWxvYWQsIGNhbGxiYWNrKSA9PiBjYWxsYmFjayhKU09OLnBhcnNlKHBheWxvYWQpKVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVvdXRdIC0gVGhlIGRlZmF1bHQgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gdHJpZ2dlciBwdXNoIHRpbWVvdXRzLlxuICpcbiAqIERlZmF1bHRzIGBERUZBVUxUX1RJTUVPVVRgXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMuaGVhcnRiZWF0SW50ZXJ2YWxNc10gLSBUaGUgbWlsbGlzZWMgaW50ZXJ2YWwgdG8gc2VuZCBhIGhlYXJ0YmVhdCBtZXNzYWdlXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMucmVjb25uZWN0QWZ0ZXJNc10gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtaWxsaXNlY1xuICogc29ja2V0IHJlY29ubmVjdCBpbnRlcnZhbC5cbiAqXG4gKiBEZWZhdWx0cyB0byBzdGVwcGVkIGJhY2tvZmYgb2Y6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZnVuY3Rpb24odHJpZXMpe1xuICogICByZXR1cm4gWzEwLCA1MCwgMTAwLCAxNTAsIDIwMCwgMjUwLCA1MDAsIDEwMDAsIDIwMDBdW3RyaWVzIC0gMV0gfHwgNTAwMFxuICogfVxuICogYGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5yZWpvaW5BZnRlck1zXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG1pbGxpc2VjXG4gKiByZWpvaW4gaW50ZXJ2YWwgZm9yIGluZGl2aWR1YWwgY2hhbm5lbHMuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZnVuY3Rpb24odHJpZXMpe1xuICogICByZXR1cm4gWzEwMDAsIDIwMDAsIDUwMDBdW3RyaWVzIC0gMV0gfHwgMTAwMDBcbiAqIH1cbiAqIGBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5sb2dnZXJdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIGZvciBzcGVjaWFsaXplZCBsb2dnaW5nLCBpZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBmdW5jdGlvbihraW5kLCBtc2csIGRhdGEpIHtcbiAqICAgY29uc29sZS5sb2coYCR7a2luZH06ICR7bXNnfWAsIGRhdGEpXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMubG9uZ3BvbGxlclRpbWVvdXRdIC0gVGhlIG1heGltdW0gdGltZW91dCBvZiBhIGxvbmcgcG9sbCBBSkFYIHJlcXVlc3QuXG4gKlxuICogRGVmYXVsdHMgdG8gMjBzIChkb3VibGUgdGhlIHNlcnZlciBsb25nIHBvbGwgdGltZXIpLlxuICpcbiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbil9IFtvcHRzLnBhcmFtc10gLSBUaGUgb3B0aW9uYWwgcGFyYW1zIHRvIHBhc3Mgd2hlbiBjb25uZWN0aW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuYmluYXJ5VHlwZV0gLSBUaGUgYmluYXJ5IHR5cGUgdG8gdXNlIGZvciBiaW5hcnkgV2ViU29ja2V0IGZyYW1lcy5cbiAqXG4gKiBEZWZhdWx0cyB0byBcImFycmF5YnVmZmVyXCJcbiAqXG4gKiBAcGFyYW0ge3Zzbn0gW29wdHMudnNuXSAtIFRoZSBzZXJpYWxpemVyJ3MgcHJvdG9jb2wgdmVyc2lvbiB0byBzZW5kIG9uIGNvbm5lY3QuXG4gKlxuICogRGVmYXVsdHMgdG8gREVGQVVMVF9WU04uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLnNlc3Npb25TdG9yYWdlXSAtIEFuIG9wdGlvbmFsIFN0b3JhZ2UgY29tcGF0aWJsZSBvYmplY3RcbiAqIFBob2VuaXggdXNlcyBzZXNzaW9uU3RvcmFnZSBmb3IgbG9uZ3BvbGwgZmFsbGJhY2sgaGlzdG9yeS4gT3ZlcnJpZGluZyB0aGUgc3RvcmUgaXNcbiAqIHVzZWZ1bCB3aGVuIFBob2VuaXggd29uJ3QgaGF2ZSBhY2Nlc3MgdG8gYHNlc3Npb25TdG9yYWdlYC4gRm9yIGV4YW1wbGUsIFRoaXMgY291bGRcbiAqIGhhcHBlbiBpZiBhIHNpdGUgbG9hZHMgYSBjcm9zcy1kb21haW4gY2hhbm5lbCBpbiBhbiBpZnJhbWUuIEV4YW1wbGUgdXNhZ2U6XG4gKlxuICogICAgIGNsYXNzIEluTWVtb3J5U3RvcmFnZSB7XG4gKiAgICAgICBjb25zdHJ1Y3RvcigpIHsgdGhpcy5zdG9yYWdlID0ge30gfVxuICogICAgICAgZ2V0SXRlbShrZXlOYW1lKSB7IHJldHVybiB0aGlzLnN0b3JhZ2Vba2V5TmFtZV0gfHwgbnVsbCB9XG4gKiAgICAgICByZW1vdmVJdGVtKGtleU5hbWUpIHsgZGVsZXRlIHRoaXMuc3RvcmFnZVtrZXlOYW1lXSB9XG4gKiAgICAgICBzZXRJdGVtKGtleU5hbWUsIGtleVZhbHVlKSB7IHRoaXMuc3RvcmFnZVtrZXlOYW1lXSA9IGtleVZhbHVlIH1cbiAqICAgICB9XG4gKlxuKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvY2tldCB7XG4gIGNvbnN0cnVjdG9yKGVuZFBvaW50LCBvcHRzID0ge30pe1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MgPSB7b3BlbjogW10sIGNsb3NlOiBbXSwgZXJyb3I6IFtdLCBtZXNzYWdlOiBbXX1cbiAgICB0aGlzLmNoYW5uZWxzID0gW11cbiAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXVxuICAgIHRoaXMucmVmID0gMFxuICAgIHRoaXMudGltZW91dCA9IG9wdHMudGltZW91dCB8fCBERUZBVUxUX1RJTUVPVVRcbiAgICB0aGlzLnRyYW5zcG9ydCA9IG9wdHMudHJhbnNwb3J0IHx8IGdsb2JhbC5XZWJTb2NrZXQgfHwgTG9uZ1BvbGxcbiAgICB0aGlzLnByaW1hcnlQYXNzZWRIZWFsdGhDaGVjayA9IGZhbHNlXG4gICAgdGhpcy5sb25nUG9sbEZhbGxiYWNrTXMgPSBvcHRzLmxvbmdQb2xsRmFsbGJhY2tNc1xuICAgIHRoaXMuZmFsbGJhY2tUaW1lciA9IG51bGxcbiAgICB0aGlzLnNlc3Npb25TdG9yZSA9IG9wdHMuc2Vzc2lvblN0b3JhZ2UgfHwgKGdsb2JhbCAmJiBnbG9iYWwuc2Vzc2lvblN0b3JhZ2UpXG4gICAgdGhpcy5lc3RhYmxpc2hlZENvbm5lY3Rpb25zID0gMFxuICAgIHRoaXMuZGVmYXVsdEVuY29kZXIgPSBTZXJpYWxpemVyLmVuY29kZS5iaW5kKFNlcmlhbGl6ZXIpXG4gICAgdGhpcy5kZWZhdWx0RGVjb2RlciA9IFNlcmlhbGl6ZXIuZGVjb2RlLmJpbmQoU2VyaWFsaXplcilcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgIHRoaXMuYmluYXJ5VHlwZSA9IG9wdHMuYmluYXJ5VHlwZSB8fCBcImFycmF5YnVmZmVyXCJcbiAgICB0aGlzLmNvbm5lY3RDbG9jayA9IDFcbiAgICBpZih0aGlzLnRyYW5zcG9ydCAhPT0gTG9uZ1BvbGwpe1xuICAgICAgdGhpcy5lbmNvZGUgPSBvcHRzLmVuY29kZSB8fCB0aGlzLmRlZmF1bHRFbmNvZGVyXG4gICAgICB0aGlzLmRlY29kZSA9IG9wdHMuZGVjb2RlIHx8IHRoaXMuZGVmYXVsdERlY29kZXJcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbmNvZGUgPSB0aGlzLmRlZmF1bHRFbmNvZGVyXG4gICAgICB0aGlzLmRlY29kZSA9IHRoaXMuZGVmYXVsdERlY29kZXJcbiAgICB9XG4gICAgbGV0IGF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3cgPSBudWxsXG4gICAgaWYocGh4V2luZG93ICYmIHBoeFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKXtcbiAgICAgIHBoeFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgX2UgPT4ge1xuICAgICAgICBpZih0aGlzLmNvbm4pe1xuICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCgpXG4gICAgICAgICAgYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyA9IHRoaXMuY29ubmVjdENsb2NrXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBwaHhXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VzaG93XCIsIF9lID0+IHtcbiAgICAgICAgaWYoYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyA9PT0gdGhpcy5jb25uZWN0Q2xvY2spe1xuICAgICAgICAgIGF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3cgPSBudWxsXG4gICAgICAgICAgdGhpcy5jb25uZWN0KClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zID0gb3B0cy5oZWFydGJlYXRJbnRlcnZhbE1zIHx8IDMwMDAwXG4gICAgdGhpcy5yZWpvaW5BZnRlck1zID0gKHRyaWVzKSA9PiB7XG4gICAgICBpZihvcHRzLnJlam9pbkFmdGVyTXMpe1xuICAgICAgICByZXR1cm4gb3B0cy5yZWpvaW5BZnRlck1zKHRyaWVzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFsxMDAwLCAyMDAwLCA1MDAwXVt0cmllcyAtIDFdIHx8IDEwMDAwXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucmVjb25uZWN0QWZ0ZXJNcyA9ICh0cmllcykgPT4ge1xuICAgICAgaWYob3B0cy5yZWNvbm5lY3RBZnRlck1zKXtcbiAgICAgICAgcmV0dXJuIG9wdHMucmVjb25uZWN0QWZ0ZXJNcyh0cmllcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbMTAsIDUwLCAxMDAsIDE1MCwgMjAwLCAyNTAsIDUwMCwgMTAwMCwgMjAwMF1bdHJpZXMgLSAxXSB8fCA1MDAwXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyID0gb3B0cy5sb2dnZXIgfHwgbnVsbFxuICAgIGlmKCF0aGlzLmxvZ2dlciAmJiBvcHRzLmRlYnVnKXtcbiAgICAgIHRoaXMubG9nZ2VyID0gKGtpbmQsIG1zZywgZGF0YSkgPT4geyBjb25zb2xlLmxvZyhgJHtraW5kfTogJHttc2d9YCwgZGF0YSkgfVxuICAgIH1cbiAgICB0aGlzLmxvbmdwb2xsZXJUaW1lb3V0ID0gb3B0cy5sb25ncG9sbGVyVGltZW91dCB8fCAyMDAwMFxuICAgIHRoaXMucGFyYW1zID0gY2xvc3VyZShvcHRzLnBhcmFtcyB8fCB7fSlcbiAgICB0aGlzLmVuZFBvaW50ID0gYCR7ZW5kUG9pbnR9LyR7VFJBTlNQT1JUUy53ZWJzb2NrZXR9YFxuICAgIHRoaXMudnNuID0gb3B0cy52c24gfHwgREVGQVVMVF9WU05cbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVvdXRUaW1lciA9IG51bGxcbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gbnVsbFxuICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICB0aGlzLnJlY29ubmVjdFRpbWVyID0gbmV3IFRpbWVyKCgpID0+IHtcbiAgICAgIHRoaXMudGVhcmRvd24oKCkgPT4gdGhpcy5jb25uZWN0KCkpXG4gICAgfSwgdGhpcy5yZWNvbm5lY3RBZnRlck1zKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIExvbmdQb2xsIHRyYW5zcG9ydCByZWZlcmVuY2VcbiAgICovXG4gIGdldExvbmdQb2xsVHJhbnNwb3J0KCl7IHJldHVybiBMb25nUG9sbCB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3RzIGFuZCByZXBsYWNlcyB0aGUgYWN0aXZlIHRyYW5zcG9ydFxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXdUcmFuc3BvcnQgLSBUaGUgbmV3IHRyYW5zcG9ydCBjbGFzcyB0byBpbnN0YW50aWF0ZVxuICAgKlxuICAgKi9cbiAgcmVwbGFjZVRyYW5zcG9ydChuZXdUcmFuc3BvcnQpe1xuICAgIHRoaXMuY29ubmVjdENsb2NrKytcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSB0cnVlXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuZmFsbGJhY2tUaW1lcilcbiAgICB0aGlzLnJlY29ubmVjdFRpbWVyLnJlc2V0KClcbiAgICBpZih0aGlzLmNvbm4pe1xuICAgICAgdGhpcy5jb25uLmNsb3NlKClcbiAgICAgIHRoaXMuY29ubiA9IG51bGxcbiAgICB9XG4gICAgdGhpcy50cmFuc3BvcnQgPSBuZXdUcmFuc3BvcnRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzb2NrZXQgcHJvdG9jb2xcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHByb3RvY29sKCl7IHJldHVybiBsb2NhdGlvbi5wcm90b2NvbC5tYXRjaCgvXmh0dHBzLykgPyBcIndzc1wiIDogXCJ3c1wiIH1cblxuICAvKipcbiAgICogVGhlIGZ1bGx5IHF1YWxpZmllZCBzb2NrZXQgdXJsXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBlbmRQb2ludFVSTCgpe1xuICAgIGxldCB1cmkgPSBBamF4LmFwcGVuZFBhcmFtcyhcbiAgICAgIEFqYXguYXBwZW5kUGFyYW1zKHRoaXMuZW5kUG9pbnQsIHRoaXMucGFyYW1zKCkpLCB7dnNuOiB0aGlzLnZzbn0pXG4gICAgaWYodXJpLmNoYXJBdCgwKSAhPT0gXCIvXCIpeyByZXR1cm4gdXJpIH1cbiAgICBpZih1cmkuY2hhckF0KDEpID09PSBcIi9cIil7IHJldHVybiBgJHt0aGlzLnByb3RvY29sKCl9OiR7dXJpfWAgfVxuXG4gICAgcmV0dXJuIGAke3RoaXMucHJvdG9jb2woKX06Ly8ke2xvY2F0aW9uLmhvc3R9JHt1cml9YFxuICB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXRcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DbG9zZUV2ZW50I1N0YXR1c19jb2RlcyBmb3IgdmFsaWQgc3RhdHVzIGNvZGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIE9wdGlvbmFsIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBhZnRlciBzb2NrZXQgaXMgZGlzY29ubmVjdGVkLlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IGNvZGUgLSBBIHN0YXR1cyBjb2RlIGZvciBkaXNjb25uZWN0aW9uIChPcHRpb25hbCkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gLSBBIHRleHR1YWwgZGVzY3JpcHRpb24gb2YgdGhlIHJlYXNvbiB0byBkaXNjb25uZWN0LiAoT3B0aW9uYWwpXG4gICAqL1xuICBkaXNjb25uZWN0KGNhbGxiYWNrLCBjb2RlLCByZWFzb24pe1xuICAgIHRoaXMuY29ubmVjdENsb2NrKytcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSB0cnVlXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuZmFsbGJhY2tUaW1lcilcbiAgICB0aGlzLnJlY29ubmVjdFRpbWVyLnJlc2V0KClcbiAgICB0aGlzLnRlYXJkb3duKGNhbGxiYWNrLCBjb2RlLCByZWFzb24pXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIFRoZSBwYXJhbXMgdG8gc2VuZCB3aGVuIGNvbm5lY3RpbmcsIGZvciBleGFtcGxlIGB7dXNlcl9pZDogdXNlclRva2VufWBcbiAgICpcbiAgICogUGFzc2luZyBwYXJhbXMgdG8gY29ubmVjdCBpcyBkZXByZWNhdGVkOyBwYXNzIHRoZW0gaW4gdGhlIFNvY2tldCBjb25zdHJ1Y3RvciBpbnN0ZWFkOlxuICAgKiBgbmV3IFNvY2tldChcIi9zb2NrZXRcIiwge3BhcmFtczoge3VzZXJfaWQ6IHVzZXJUb2tlbn19KWAuXG4gICAqL1xuICBjb25uZWN0KHBhcmFtcyl7XG4gICAgaWYocGFyYW1zKXtcbiAgICAgIGNvbnNvbGUgJiYgY29uc29sZS5sb2coXCJwYXNzaW5nIHBhcmFtcyB0byBjb25uZWN0IGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQgcGFzcyA6cGFyYW1zIHRvIHRoZSBTb2NrZXQgY29uc3RydWN0b3JcIilcbiAgICAgIHRoaXMucGFyYW1zID0gY2xvc3VyZShwYXJhbXMpXG4gICAgfVxuICAgIGlmKHRoaXMuY29ubil7IHJldHVybiB9XG4gICAgaWYodGhpcy5sb25nUG9sbEZhbGxiYWNrTXMgJiYgdGhpcy50cmFuc3BvcnQgIT09IExvbmdQb2xsKXtcbiAgICAgIHRoaXMuY29ubmVjdFdpdGhGYWxsYmFjayhMb25nUG9sbCwgdGhpcy5sb25nUG9sbEZhbGxiYWNrTXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudHJhbnNwb3J0Q29ubmVjdCgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvZ3MgdGhlIG1lc3NhZ2UuIE92ZXJyaWRlIGB0aGlzLmxvZ2dlcmAgZm9yIHNwZWNpYWxpemVkIGxvZ2dpbmcuIG5vb3BzIGJ5IGRlZmF1bHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtpbmRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1zZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKi9cbiAgbG9nKGtpbmQsIG1zZywgZGF0YSl7IHRoaXMubG9nZ2VyICYmIHRoaXMubG9nZ2VyKGtpbmQsIG1zZywgZGF0YSkgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYSBsb2dnZXIgaGFzIGJlZW4gc2V0IG9uIHRoaXMgc29ja2V0LlxuICAgKi9cbiAgaGFzTG9nZ2VyKCl7IHJldHVybiB0aGlzLmxvZ2dlciAhPT0gbnVsbCB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gb3BlbiBldmVudHNcbiAgICpcbiAgICogQGV4YW1wbGUgc29ja2V0Lm9uT3BlbihmdW5jdGlvbigpeyBjb25zb2xlLmluZm8oXCJ0aGUgc29ja2V0IHdhcyBvcGVuZWRcIikgfSlcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uT3BlbihjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5vcGVuLnB1c2goW3JlZiwgY2FsbGJhY2tdKVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgY2FsbGJhY2tzIGZvciBjb25uZWN0aW9uIGNsb3NlIGV2ZW50c1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25DbG9zZShjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5jbG9zZS5wdXNoKFtyZWYsIGNhbGxiYWNrXSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBlcnJvciBldmVudHNcbiAgICpcbiAgICogQGV4YW1wbGUgc29ja2V0Lm9uRXJyb3IoZnVuY3Rpb24oZXJyb3IpeyBhbGVydChcIkFuIGVycm9yIG9jY3VycmVkXCIpIH0pXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbkVycm9yKGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmVycm9yLnB1c2goW3JlZiwgY2FsbGJhY2tdKVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgY2FsbGJhY2tzIGZvciBjb25uZWN0aW9uIG1lc3NhZ2UgZXZlbnRzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbk1lc3NhZ2UoY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MubWVzc2FnZS5wdXNoKFtyZWYsIGNhbGxiYWNrXSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogUGluZ3MgdGhlIHNlcnZlciBhbmQgaW52b2tlcyB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgUlRUIGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBpbmcgd2FzIHB1c2hlZCBvciBmYWxzZSBpZiB1bmFibGUgdG8gYmUgcHVzaGVkLlxuICAgKi9cbiAgcGluZyhjYWxsYmFjayl7XG4gICAgaWYoIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiBmYWxzZSB9XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgbGV0IHN0YXJ0VGltZSA9IERhdGUubm93KClcbiAgICB0aGlzLnB1c2goe3RvcGljOiBcInBob2VuaXhcIiwgZXZlbnQ6IFwiaGVhcnRiZWF0XCIsIHBheWxvYWQ6IHt9LCByZWY6IHJlZn0pXG4gICAgbGV0IG9uTXNnUmVmID0gdGhpcy5vbk1lc3NhZ2UobXNnID0+IHtcbiAgICAgIGlmKG1zZy5yZWYgPT09IHJlZil7XG4gICAgICAgIHRoaXMub2ZmKFtvbk1zZ1JlZl0pXG4gICAgICAgIGNhbGxiYWNrKERhdGUubm93KCkgLSBzdGFydFRpbWUpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHRyYW5zcG9ydENvbm5lY3QoKXtcbiAgICB0aGlzLmNvbm5lY3RDbG9jaysrXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gZmFsc2VcbiAgICB0aGlzLmNvbm4gPSBuZXcgdGhpcy50cmFuc3BvcnQodGhpcy5lbmRQb2ludFVSTCgpKVxuICAgIHRoaXMuY29ubi5iaW5hcnlUeXBlID0gdGhpcy5iaW5hcnlUeXBlXG4gICAgdGhpcy5jb25uLnRpbWVvdXQgPSB0aGlzLmxvbmdwb2xsZXJUaW1lb3V0XG4gICAgdGhpcy5jb25uLm9ub3BlbiA9ICgpID0+IHRoaXMub25Db25uT3BlbigpXG4gICAgdGhpcy5jb25uLm9uZXJyb3IgPSBlcnJvciA9PiB0aGlzLm9uQ29ubkVycm9yKGVycm9yKVxuICAgIHRoaXMuY29ubi5vbm1lc3NhZ2UgPSBldmVudCA9PiB0aGlzLm9uQ29ubk1lc3NhZ2UoZXZlbnQpXG4gICAgdGhpcy5jb25uLm9uY2xvc2UgPSBldmVudCA9PiB0aGlzLm9uQ29ubkNsb3NlKGV2ZW50KVxuICB9XG5cbiAgZ2V0U2Vzc2lvbihrZXkpeyByZXR1cm4gdGhpcy5zZXNzaW9uU3RvcmUgJiYgdGhpcy5zZXNzaW9uU3RvcmUuZ2V0SXRlbShrZXkpIH1cblxuICBzdG9yZVNlc3Npb24oa2V5LCB2YWwpeyB0aGlzLnNlc3Npb25TdG9yZSAmJiB0aGlzLnNlc3Npb25TdG9yZS5zZXRJdGVtKGtleSwgdmFsKSB9XG5cbiAgY29ubmVjdFdpdGhGYWxsYmFjayhmYWxsYmFja1RyYW5zcG9ydCwgZmFsbGJhY2tUaHJlc2hvbGQgPSAyNTAwKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5mYWxsYmFja1RpbWVyKVxuICAgIGxldCBlc3RhYmxpc2hlZCA9IGZhbHNlXG4gICAgbGV0IHByaW1hcnlUcmFuc3BvcnQgPSB0cnVlXG4gICAgbGV0IG9wZW5SZWYsIGVycm9yUmVmXG4gICAgbGV0IGZhbGxiYWNrID0gKHJlYXNvbikgPT4ge1xuICAgICAgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgYGZhbGxpbmcgYmFjayB0byAke2ZhbGxiYWNrVHJhbnNwb3J0Lm5hbWV9Li4uYCwgcmVhc29uKVxuICAgICAgdGhpcy5vZmYoW29wZW5SZWYsIGVycm9yUmVmXSlcbiAgICAgIHByaW1hcnlUcmFuc3BvcnQgPSBmYWxzZVxuICAgICAgdGhpcy5yZXBsYWNlVHJhbnNwb3J0KGZhbGxiYWNrVHJhbnNwb3J0KVxuICAgICAgdGhpcy50cmFuc3BvcnRDb25uZWN0KClcbiAgICB9XG4gICAgaWYodGhpcy5nZXRTZXNzaW9uKGBwaHg6ZmFsbGJhY2s6JHtmYWxsYmFja1RyYW5zcG9ydC5uYW1lfWApKXsgcmV0dXJuIGZhbGxiYWNrKFwibWVtb3JpemVkXCIpIH1cblxuICAgIHRoaXMuZmFsbGJhY2tUaW1lciA9IHNldFRpbWVvdXQoZmFsbGJhY2ssIGZhbGxiYWNrVGhyZXNob2xkKVxuXG4gICAgZXJyb3JSZWYgPSB0aGlzLm9uRXJyb3IocmVhc29uID0+IHtcbiAgICAgIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIFwiZXJyb3JcIiwgcmVhc29uKVxuICAgICAgaWYocHJpbWFyeVRyYW5zcG9ydCAmJiAhZXN0YWJsaXNoZWQpe1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5mYWxsYmFja1RpbWVyKVxuICAgICAgICBmYWxsYmFjayhyZWFzb24pXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLm9uT3BlbigoKSA9PiB7XG4gICAgICBlc3RhYmxpc2hlZCA9IHRydWVcbiAgICAgIGlmKCFwcmltYXJ5VHJhbnNwb3J0KXtcbiAgICAgICAgLy8gb25seSBtZW1vcml6ZSBMUCBpZiB3ZSBuZXZlciBjb25uZWN0ZWQgdG8gcHJpbWFyeVxuICAgICAgICBpZighdGhpcy5wcmltYXJ5UGFzc2VkSGVhbHRoQ2hlY2speyB0aGlzLnN0b3JlU2Vzc2lvbihgcGh4OmZhbGxiYWNrOiR7ZmFsbGJhY2tUcmFuc3BvcnQubmFtZX1gLCBcInRydWVcIikgfVxuICAgICAgICByZXR1cm4gdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgYGVzdGFibGlzaGVkICR7ZmFsbGJhY2tUcmFuc3BvcnQubmFtZX0gZmFsbGJhY2tgKVxuICAgICAgfVxuICAgICAgLy8gaWYgd2UndmUgZXN0YWJsaXNoZWQgcHJpbWFyeSwgZ2l2ZSB0aGUgZmFsbGJhY2sgYSBuZXcgcGVyaW9kIHRvIGF0dGVtcHQgcGluZ1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZmFsbGJhY2tUaW1lcilcbiAgICAgIHRoaXMuZmFsbGJhY2tUaW1lciA9IHNldFRpbWVvdXQoZmFsbGJhY2ssIGZhbGxiYWNrVGhyZXNob2xkKVxuICAgICAgdGhpcy5waW5nKHJ0dCA9PiB7XG4gICAgICAgIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIFwiY29ubmVjdGVkIHRvIHByaW1hcnkgYWZ0ZXJcIiwgcnR0KVxuICAgICAgICB0aGlzLnByaW1hcnlQYXNzZWRIZWFsdGhDaGVjayA9IHRydWVcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZmFsbGJhY2tUaW1lcilcbiAgICAgIH0pXG4gICAgfSlcbiAgICB0aGlzLnRyYW5zcG9ydENvbm5lY3QoKVxuICB9XG5cbiAgY2xlYXJIZWFydGJlYXRzKCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZXIpXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyKVxuICB9XG5cbiAgb25Db25uT3Blbigpe1xuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGAke3RoaXMudHJhbnNwb3J0Lm5hbWV9IGNvbm5lY3RlZCB0byAke3RoaXMuZW5kUG9pbnRVUkwoKX1gKVxuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IGZhbHNlXG4gICAgdGhpcy5lc3RhYmxpc2hlZENvbm5lY3Rpb25zKytcbiAgICB0aGlzLmZsdXNoU2VuZEJ1ZmZlcigpXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gICAgdGhpcy5yZXNldEhlYXJ0YmVhdCgpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5vcGVuLmZvckVhY2goKFssIGNhbGxiYWNrXSkgPT4gY2FsbGJhY2soKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICBoZWFydGJlYXRUaW1lb3V0KCl7XG4gICAgaWYodGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmKXtcbiAgICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpeyB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBcImhlYXJ0YmVhdCB0aW1lb3V0LiBBdHRlbXB0aW5nIHRvIHJlLWVzdGFibGlzaCBjb25uZWN0aW9uXCIpIH1cbiAgICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgICAgdGhpcy50ZWFyZG93bigoKSA9PiB0aGlzLnJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpLCBXU19DTE9TRV9OT1JNQUwsIFwiaGVhcnRiZWF0IHRpbWVvdXRcIilcbiAgICB9XG4gIH1cblxuICByZXNldEhlYXJ0YmVhdCgpe1xuICAgIGlmKHRoaXMuY29ubiAmJiB0aGlzLmNvbm4uc2tpcEhlYXJ0YmVhdCl7IHJldHVybiB9XG4gICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbFxuICAgIHRoaXMuY2xlYXJIZWFydGJlYXRzKClcbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnNlbmRIZWFydGJlYXQoKSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICB9XG5cbiAgdGVhcmRvd24oY2FsbGJhY2ssIGNvZGUsIHJlYXNvbil7XG4gICAgaWYoIXRoaXMuY29ubil7XG4gICAgICByZXR1cm4gY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgIH1cblxuICAgIHRoaXMud2FpdEZvckJ1ZmZlckRvbmUoKCkgPT4ge1xuICAgICAgaWYodGhpcy5jb25uKXtcbiAgICAgICAgaWYoY29kZSl7IHRoaXMuY29ubi5jbG9zZShjb2RlLCByZWFzb24gfHwgXCJcIikgfSBlbHNlIHsgdGhpcy5jb25uLmNsb3NlKCkgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLndhaXRGb3JTb2NrZXRDbG9zZWQoKCkgPT4ge1xuICAgICAgICBpZih0aGlzLmNvbm4pe1xuICAgICAgICAgIHRoaXMuY29ubi5vbm9wZW4gPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uLm9uZXJyb3IgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICAgICAgICB0aGlzLmNvbm4ub25jbG9zZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICAgICAgICB0aGlzLmNvbm4gPSBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICB3YWl0Rm9yQnVmZmVyRG9uZShjYWxsYmFjaywgdHJpZXMgPSAxKXtcbiAgICBpZih0cmllcyA9PT0gNSB8fCAhdGhpcy5jb25uIHx8ICF0aGlzLmNvbm4uYnVmZmVyZWRBbW91bnQpe1xuICAgICAgY2FsbGJhY2soKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLndhaXRGb3JCdWZmZXJEb25lKGNhbGxiYWNrLCB0cmllcyArIDEpXG4gICAgfSwgMTUwICogdHJpZXMpXG4gIH1cblxuICB3YWl0Rm9yU29ja2V0Q2xvc2VkKGNhbGxiYWNrLCB0cmllcyA9IDEpe1xuICAgIGlmKHRyaWVzID09PSA1IHx8ICF0aGlzLmNvbm4gfHwgdGhpcy5jb25uLnJlYWR5U3RhdGUgPT09IFNPQ0tFVF9TVEFURVMuY2xvc2VkKXtcbiAgICAgIGNhbGxiYWNrKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy53YWl0Rm9yU29ja2V0Q2xvc2VkKGNhbGxiYWNrLCB0cmllcyArIDEpXG4gICAgfSwgMTUwICogdHJpZXMpXG4gIH1cblxuICBvbkNvbm5DbG9zZShldmVudCl7XG4gICAgbGV0IGNsb3NlQ29kZSA9IGV2ZW50ICYmIGV2ZW50LmNvZGVcbiAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBcImNsb3NlXCIsIGV2ZW50KVxuICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgdGhpcy5jbGVhckhlYXJ0YmVhdHMoKVxuICAgIGlmKCF0aGlzLmNsb3NlV2FzQ2xlYW4gJiYgY2xvc2VDb2RlICE9PSAxMDAwKXtcbiAgICAgIHRoaXMucmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KClcbiAgICB9XG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5jbG9zZS5mb3JFYWNoKChbLCBjYWxsYmFja10pID0+IGNhbGxiYWNrKGV2ZW50KSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25Db25uRXJyb3IoZXJyb3Ipe1xuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGVycm9yKVxuICAgIGxldCB0cmFuc3BvcnRCZWZvcmUgPSB0aGlzLnRyYW5zcG9ydFxuICAgIGxldCBlc3RhYmxpc2hlZEJlZm9yZSA9IHRoaXMuZXN0YWJsaXNoZWRDb25uZWN0aW9uc1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuZXJyb3IuZm9yRWFjaCgoWywgY2FsbGJhY2tdKSA9PiB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgdHJhbnNwb3J0QmVmb3JlLCBlc3RhYmxpc2hlZEJlZm9yZSlcbiAgICB9KVxuICAgIGlmKHRyYW5zcG9ydEJlZm9yZSA9PT0gdGhpcy50cmFuc3BvcnQgfHwgZXN0YWJsaXNoZWRCZWZvcmUgPiAwKXtcbiAgICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0cmlnZ2VyQ2hhbkVycm9yKCl7XG4gICAgdGhpcy5jaGFubmVscy5mb3JFYWNoKGNoYW5uZWwgPT4ge1xuICAgICAgaWYoIShjaGFubmVsLmlzRXJyb3JlZCgpIHx8IGNoYW5uZWwuaXNMZWF2aW5nKCkgfHwgY2hhbm5lbC5pc0Nsb3NlZCgpKSl7XG4gICAgICAgIGNoYW5uZWwudHJpZ2dlcihDSEFOTkVMX0VWRU5UUy5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBjb25uZWN0aW9uU3RhdGUoKXtcbiAgICBzd2l0Y2godGhpcy5jb25uICYmIHRoaXMuY29ubi5yZWFkeVN0YXRlKXtcbiAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5jb25uZWN0aW5nOiByZXR1cm4gXCJjb25uZWN0aW5nXCJcbiAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5vcGVuOiByZXR1cm4gXCJvcGVuXCJcbiAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5jbG9zaW5nOiByZXR1cm4gXCJjbG9zaW5nXCJcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcImNsb3NlZFwiXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNDb25uZWN0ZWQoKXsgcmV0dXJuIHRoaXMuY29ubmVjdGlvblN0YXRlKCkgPT09IFwib3BlblwiIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogQHBhcmFtIHtDaGFubmVsfVxuICAgKi9cbiAgcmVtb3ZlKGNoYW5uZWwpe1xuICAgIHRoaXMub2ZmKGNoYW5uZWwuc3RhdGVDaGFuZ2VSZWZzKVxuICAgIHRoaXMuY2hhbm5lbHMgPSB0aGlzLmNoYW5uZWxzLmZpbHRlcihjID0+IGMgIT09IGNoYW5uZWwpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBgb25PcGVuYCwgYG9uQ2xvc2VgLCBgb25FcnJvcixgIGFuZCBgb25NZXNzYWdlYCByZWdpc3RyYXRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge3JlZnN9IC0gbGlzdCBvZiByZWZzIHJldHVybmVkIGJ5IGNhbGxzIHRvXG4gICAqICAgICAgICAgICAgICAgICBgb25PcGVuYCwgYG9uQ2xvc2VgLCBgb25FcnJvcixgIGFuZCBgb25NZXNzYWdlYFxuICAgKi9cbiAgb2ZmKHJlZnMpe1xuICAgIGZvcihsZXQga2V5IGluIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Mpe1xuICAgICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrc1trZXldID0gdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrc1trZXldLmZpbHRlcigoW3JlZl0pID0+IHtcbiAgICAgICAgcmV0dXJuIHJlZnMuaW5kZXhPZihyZWYpID09PSAtMVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhdGVzIGEgbmV3IGNoYW5uZWwgZm9yIHRoZSBnaXZlbiB0b3BpY1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAgICogQHBhcmFtIHtPYmplY3R9IGNoYW5QYXJhbXMgLSBQYXJhbWV0ZXJzIGZvciB0aGUgY2hhbm5lbFxuICAgKiBAcmV0dXJucyB7Q2hhbm5lbH1cbiAgICovXG4gIGNoYW5uZWwodG9waWMsIGNoYW5QYXJhbXMgPSB7fSl7XG4gICAgbGV0IGNoYW4gPSBuZXcgQ2hhbm5lbCh0b3BpYywgY2hhblBhcmFtcywgdGhpcylcbiAgICB0aGlzLmNoYW5uZWxzLnB1c2goY2hhbilcbiAgICByZXR1cm4gY2hhblxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqL1xuICBwdXNoKGRhdGEpe1xuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpe1xuICAgICAgbGV0IHt0b3BpYywgZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWZ9ID0gZGF0YVxuICAgICAgdGhpcy5sb2coXCJwdXNoXCIsIGAke3RvcGljfSAke2V2ZW50fSAoJHtqb2luX3JlZn0sICR7cmVmfSlgLCBwYXlsb2FkKVxuICAgIH1cblxuICAgIGlmKHRoaXMuaXNDb25uZWN0ZWQoKSl7XG4gICAgICB0aGlzLmVuY29kZShkYXRhLCByZXN1bHQgPT4gdGhpcy5jb25uLnNlbmQocmVzdWx0KSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZW5kQnVmZmVyLnB1c2goKCkgPT4gdGhpcy5lbmNvZGUoZGF0YSwgcmVzdWx0ID0+IHRoaXMuY29ubi5zZW5kKHJlc3VsdCkpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG5leHQgbWVzc2FnZSByZWYsIGFjY291bnRpbmcgZm9yIG92ZXJmbG93c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgbWFrZVJlZigpe1xuICAgIGxldCBuZXdSZWYgPSB0aGlzLnJlZiArIDFcbiAgICBpZihuZXdSZWYgPT09IHRoaXMucmVmKXsgdGhpcy5yZWYgPSAwIH0gZWxzZSB7IHRoaXMucmVmID0gbmV3UmVmIH1cblxuICAgIHJldHVybiB0aGlzLnJlZi50b1N0cmluZygpXG4gIH1cblxuICBzZW5kSGVhcnRiZWF0KCl7XG4gICAgaWYodGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmICYmICF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfVxuICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5wdXNoKHt0b3BpYzogXCJwaG9lbml4XCIsIGV2ZW50OiBcImhlYXJ0YmVhdFwiLCBwYXlsb2FkOiB7fSwgcmVmOiB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWZ9KVxuICAgIHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmhlYXJ0YmVhdFRpbWVvdXQoKSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICB9XG5cbiAgZmx1c2hTZW5kQnVmZmVyKCl7XG4gICAgaWYodGhpcy5pc0Nvbm5lY3RlZCgpICYmIHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGggPiAwKXtcbiAgICAgIHRoaXMuc2VuZEJ1ZmZlci5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpXG4gICAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXVxuICAgIH1cbiAgfVxuXG4gIG9uQ29ubk1lc3NhZ2UocmF3TWVzc2FnZSl7XG4gICAgdGhpcy5kZWNvZGUocmF3TWVzc2FnZS5kYXRhLCBtc2cgPT4ge1xuICAgICAgbGV0IHt0b3BpYywgZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWZ9ID0gbXNnXG4gICAgICBpZihyZWYgJiYgcmVmID09PSB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYpe1xuICAgICAgICB0aGlzLmNsZWFySGVhcnRiZWF0cygpXG4gICAgICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICAgICAgdGhpcy5oZWFydGJlYXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZW5kSGVhcnRiZWF0KCksIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcylcbiAgICAgIH1cblxuICAgICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJyZWNlaXZlXCIsIGAke3BheWxvYWQuc3RhdHVzIHx8IFwiXCJ9ICR7dG9waWN9ICR7ZXZlbnR9ICR7cmVmICYmIFwiKFwiICsgcmVmICsgXCIpXCIgfHwgXCJcIn1gLCBwYXlsb2FkKVxuXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFubmVscy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzW2ldXG4gICAgICAgIGlmKCFjaGFubmVsLmlzTWVtYmVyKHRvcGljLCBldmVudCwgcGF5bG9hZCwgam9pbl9yZWYpKXsgY29udGludWUgfVxuICAgICAgICBjaGFubmVsLnRyaWdnZXIoZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWYpXG4gICAgICB9XG5cbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm1lc3NhZ2UubGVuZ3RoOyBpKyspe1xuICAgICAgICBsZXQgWywgY2FsbGJhY2tdID0gdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5tZXNzYWdlW2ldXG4gICAgICAgIGNhbGxiYWNrKG1zZylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgbGVhdmVPcGVuVG9waWModG9waWMpe1xuICAgIGxldCBkdXBDaGFubmVsID0gdGhpcy5jaGFubmVscy5maW5kKGMgPT4gYy50b3BpYyA9PT0gdG9waWMgJiYgKGMuaXNKb2luZWQoKSB8fCBjLmlzSm9pbmluZygpKSlcbiAgICBpZihkdXBDaGFubmVsKXtcbiAgICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGBsZWF2aW5nIGR1cGxpY2F0ZSB0b3BpYyBcIiR7dG9waWN9XCJgKVxuICAgICAgZHVwQ2hhbm5lbC5sZWF2ZSgpXG4gICAgfVxuICB9XG59XG4iLCAiZXhwb3J0IGNvbnN0IENPTlNFQ1VUSVZFX1JFTE9BRFMgPSBcImNvbnNlY3V0aXZlLXJlbG9hZHNcIlxuZXhwb3J0IGNvbnN0IE1BWF9SRUxPQURTID0gMTBcbmV4cG9ydCBjb25zdCBSRUxPQURfSklUVEVSX01JTiA9IDUwMDBcbmV4cG9ydCBjb25zdCBSRUxPQURfSklUVEVSX01BWCA9IDEwMDAwXG5leHBvcnQgY29uc3QgRkFJTFNBRkVfSklUVEVSID0gMzAwMDBcbmV4cG9ydCBjb25zdCBQSFhfRVZFTlRfQ0xBU1NFUyA9IFtcbiAgXCJwaHgtY2xpY2stbG9hZGluZ1wiLCBcInBoeC1jaGFuZ2UtbG9hZGluZ1wiLCBcInBoeC1zdWJtaXQtbG9hZGluZ1wiLFxuICBcInBoeC1rZXlkb3duLWxvYWRpbmdcIiwgXCJwaHgta2V5dXAtbG9hZGluZ1wiLCBcInBoeC1ibHVyLWxvYWRpbmdcIiwgXCJwaHgtZm9jdXMtbG9hZGluZ1wiLFxuICBcInBoeC1ob29rLWxvYWRpbmdcIlxuXVxuZXhwb3J0IGNvbnN0IFBIWF9DT01QT05FTlQgPSBcImRhdGEtcGh4LWNvbXBvbmVudFwiXG5leHBvcnQgY29uc3QgUEhYX0xJVkVfTElOSyA9IFwiZGF0YS1waHgtbGlua1wiXG5leHBvcnQgY29uc3QgUEhYX1RSQUNLX1NUQVRJQyA9IFwidHJhY2stc3RhdGljXCJcbmV4cG9ydCBjb25zdCBQSFhfTElOS19TVEFURSA9IFwiZGF0YS1waHgtbGluay1zdGF0ZVwiXG5leHBvcnQgY29uc3QgUEhYX1JFRl9MT0FESU5HID0gXCJkYXRhLXBoeC1yZWYtbG9hZGluZ1wiXG5leHBvcnQgY29uc3QgUEhYX1JFRl9TUkMgPSBcImRhdGEtcGh4LXJlZi1zcmNcIlxuZXhwb3J0IGNvbnN0IFBIWF9SRUZfTE9DSyA9IFwiZGF0YS1waHgtcmVmLWxvY2tcIlxuZXhwb3J0IGNvbnN0IFBIWF9UUkFDS19VUExPQURTID0gXCJ0cmFjay11cGxvYWRzXCJcbmV4cG9ydCBjb25zdCBQSFhfVVBMT0FEX1JFRiA9IFwiZGF0YS1waHgtdXBsb2FkLXJlZlwiXG5leHBvcnQgY29uc3QgUEhYX1BSRUZMSUdIVEVEX1JFRlMgPSBcImRhdGEtcGh4LXByZWZsaWdodGVkLXJlZnNcIlxuZXhwb3J0IGNvbnN0IFBIWF9ET05FX1JFRlMgPSBcImRhdGEtcGh4LWRvbmUtcmVmc1wiXG5leHBvcnQgY29uc3QgUEhYX0RST1BfVEFSR0VUID0gXCJkcm9wLXRhcmdldFwiXG5leHBvcnQgY29uc3QgUEhYX0FDVElWRV9FTlRSWV9SRUZTID0gXCJkYXRhLXBoeC1hY3RpdmUtcmVmc1wiXG5leHBvcnQgY29uc3QgUEhYX0xJVkVfRklMRV9VUERBVEVEID0gXCJwaHg6bGl2ZS1maWxlOnVwZGF0ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9TS0lQID0gXCJkYXRhLXBoeC1za2lwXCJcbmV4cG9ydCBjb25zdCBQSFhfTUFHSUNfSUQgPSBcImRhdGEtcGh4LWlkXCJcbmV4cG9ydCBjb25zdCBQSFhfUFJVTkUgPSBcImRhdGEtcGh4LXBydW5lXCJcbmV4cG9ydCBjb25zdCBQSFhfQ09OTkVDVEVEX0NMQVNTID0gXCJwaHgtY29ubmVjdGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfTE9BRElOR19DTEFTUyA9IFwicGh4LWxvYWRpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9FUlJPUl9DTEFTUyA9IFwicGh4LWVycm9yXCJcbmV4cG9ydCBjb25zdCBQSFhfQ0xJRU5UX0VSUk9SX0NMQVNTID0gXCJwaHgtY2xpZW50LWVycm9yXCJcbmV4cG9ydCBjb25zdCBQSFhfU0VSVkVSX0VSUk9SX0NMQVNTID0gXCJwaHgtc2VydmVyLWVycm9yXCJcbmV4cG9ydCBjb25zdCBQSFhfUEFSRU5UX0lEID0gXCJkYXRhLXBoeC1wYXJlbnQtaWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9NQUlOID0gXCJkYXRhLXBoeC1tYWluXCJcbmV4cG9ydCBjb25zdCBQSFhfUk9PVF9JRCA9IFwiZGF0YS1waHgtcm9vdC1pZFwiXG5leHBvcnQgY29uc3QgUEhYX1ZJRVdQT1JUX1RPUCA9IFwidmlld3BvcnQtdG9wXCJcbmV4cG9ydCBjb25zdCBQSFhfVklFV1BPUlRfQk9UVE9NID0gXCJ2aWV3cG9ydC1ib3R0b21cIlxuZXhwb3J0IGNvbnN0IFBIWF9UUklHR0VSX0FDVElPTiA9IFwidHJpZ2dlci1hY3Rpb25cIlxuZXhwb3J0IGNvbnN0IFBIWF9IQVNfRk9DVVNFRCA9IFwicGh4LWhhcy1mb2N1c2VkXCJcbmV4cG9ydCBjb25zdCBGT0NVU0FCTEVfSU5QVVRTID0gW1widGV4dFwiLCBcInRleHRhcmVhXCIsIFwibnVtYmVyXCIsIFwiZW1haWxcIiwgXCJwYXNzd29yZFwiLCBcInNlYXJjaFwiLCBcInRlbFwiLCBcInVybFwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwiZGF0ZXRpbWUtbG9jYWxcIiwgXCJjb2xvclwiLCBcInJhbmdlXCJdXG5leHBvcnQgY29uc3QgQ0hFQ0tBQkxFX0lOUFVUUyA9IFtcImNoZWNrYm94XCIsIFwicmFkaW9cIl1cbmV4cG9ydCBjb25zdCBQSFhfSEFTX1NVQk1JVFRFRCA9IFwicGh4LWhhcy1zdWJtaXR0ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9TRVNTSU9OID0gXCJkYXRhLXBoeC1zZXNzaW9uXCJcbmV4cG9ydCBjb25zdCBQSFhfVklFV19TRUxFQ1RPUiA9IGBbJHtQSFhfU0VTU0lPTn1dYFxuZXhwb3J0IGNvbnN0IFBIWF9TVElDS1kgPSBcImRhdGEtcGh4LXN0aWNreVwiXG5leHBvcnQgY29uc3QgUEhYX1NUQVRJQyA9IFwiZGF0YS1waHgtc3RhdGljXCJcbmV4cG9ydCBjb25zdCBQSFhfUkVBRE9OTFkgPSBcImRhdGEtcGh4LXJlYWRvbmx5XCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQUJMRUQgPSBcImRhdGEtcGh4LWRpc2FibGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQUJMRV9XSVRIID0gXCJkaXNhYmxlLXdpdGhcIlxuZXhwb3J0IGNvbnN0IFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSA9IFwiZGF0YS1waHgtZGlzYWJsZS13aXRoLXJlc3RvcmVcIlxuZXhwb3J0IGNvbnN0IFBIWF9IT09LID0gXCJob29rXCJcbmV4cG9ydCBjb25zdCBQSFhfREVCT1VOQ0UgPSBcImRlYm91bmNlXCJcbmV4cG9ydCBjb25zdCBQSFhfVEhST1RUTEUgPSBcInRocm90dGxlXCJcbmV4cG9ydCBjb25zdCBQSFhfVVBEQVRFID0gXCJ1cGRhdGVcIlxuZXhwb3J0IGNvbnN0IFBIWF9TVFJFQU0gPSBcInN0cmVhbVwiXG5leHBvcnQgY29uc3QgUEhYX1NUUkVBTV9SRUYgPSBcImRhdGEtcGh4LXN0cmVhbVwiXG5leHBvcnQgY29uc3QgUEhYX0tFWSA9IFwia2V5XCJcbmV4cG9ydCBjb25zdCBQSFhfUFJJVkFURSA9IFwicGh4UHJpdmF0ZVwiXG5leHBvcnQgY29uc3QgUEhYX0FVVE9fUkVDT1ZFUiA9IFwiYXV0by1yZWNvdmVyXCJcbmV4cG9ydCBjb25zdCBQSFhfTFZfREVCVUcgPSBcInBoeDpsaXZlLXNvY2tldDpkZWJ1Z1wiXG5leHBvcnQgY29uc3QgUEhYX0xWX1BST0ZJTEUgPSBcInBoeDpsaXZlLXNvY2tldDpwcm9maWxpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9MVl9MQVRFTkNZX1NJTSA9IFwicGh4OmxpdmUtc29ja2V0OmxhdGVuY3ktc2ltXCJcbmV4cG9ydCBjb25zdCBQSFhfTFZfSElTVE9SWV9QT1NJVElPTiA9IFwicGh4Om5hdi1oaXN0b3J5LXBvc2l0aW9uXCJcbmV4cG9ydCBjb25zdCBQSFhfUFJPR1JFU1MgPSBcInByb2dyZXNzXCJcbmV4cG9ydCBjb25zdCBQSFhfTU9VTlRFRCA9IFwibW91bnRlZFwiXG5leHBvcnQgY29uc3QgUEhYX1JFTE9BRF9TVEFUVVMgPSBcIl9fcGhvZW5peF9yZWxvYWRfc3RhdHVzX19cIlxuZXhwb3J0IGNvbnN0IExPQURFUl9USU1FT1VUID0gMVxuZXhwb3J0IGNvbnN0IE1BWF9DSElMRF9KT0lOX0FUVEVNUFRTID0gM1xuZXhwb3J0IGNvbnN0IEJFRk9SRV9VTkxPQURfTE9BREVSX1RJTUVPVVQgPSAyMDBcbmV4cG9ydCBjb25zdCBCSU5ESU5HX1BSRUZJWCA9IFwicGh4LVwiXG5leHBvcnQgY29uc3QgUFVTSF9USU1FT1VUID0gMzAwMDBcbmV4cG9ydCBjb25zdCBMSU5LX0hFQURFUiA9IFwieC1yZXF1ZXN0ZWQtd2l0aFwiXG5leHBvcnQgY29uc3QgUkVTUE9OU0VfVVJMX0hFQURFUiA9IFwieC1yZXNwb25zZS11cmxcIlxuZXhwb3J0IGNvbnN0IERFQk9VTkNFX1RSSUdHRVIgPSBcImRlYm91bmNlLXRyaWdnZXJcIlxuZXhwb3J0IGNvbnN0IFRIUk9UVExFRCA9IFwidGhyb3R0bGVkXCJcbmV4cG9ydCBjb25zdCBERUJPVU5DRV9QUkVWX0tFWSA9IFwiZGVib3VuY2UtcHJldi1rZXlcIlxuZXhwb3J0IGNvbnN0IERFRkFVTFRTID0ge1xuICBkZWJvdW5jZTogMzAwLFxuICB0aHJvdHRsZTogMzAwXG59XG5leHBvcnQgY29uc3QgUEhYX1BFTkRJTkdfQVRUUlMgPSBbUEhYX1JFRl9MT0FESU5HLCBQSFhfUkVGX1NSQywgUEhYX1JFRl9MT0NLXVxuLy8gUmVuZGVyZWRcbmV4cG9ydCBjb25zdCBEWU5BTUlDUyA9IFwiZFwiXG5leHBvcnQgY29uc3QgU1RBVElDID0gXCJzXCJcbmV4cG9ydCBjb25zdCBST09UID0gXCJyXCJcbmV4cG9ydCBjb25zdCBDT01QT05FTlRTID0gXCJjXCJcbmV4cG9ydCBjb25zdCBFVkVOVFMgPSBcImVcIlxuZXhwb3J0IGNvbnN0IFJFUExZID0gXCJyXCJcbmV4cG9ydCBjb25zdCBUSVRMRSA9IFwidFwiXG5leHBvcnQgY29uc3QgVEVNUExBVEVTID0gXCJwXCJcbmV4cG9ydCBjb25zdCBTVFJFQU0gPSBcInN0cmVhbVwiXG4iLCAiaW1wb3J0IHtcbiAgbG9nRXJyb3Jcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbnRyeVVwbG9hZGVyIHtcbiAgY29uc3RydWN0b3IoZW50cnksIGNvbmZpZywgbGl2ZVNvY2tldCl7XG4gICAgbGV0IHtjaHVua19zaXplLCBjaHVua190aW1lb3V0fSA9IGNvbmZpZ1xuICAgIHRoaXMubGl2ZVNvY2tldCA9IGxpdmVTb2NrZXRcbiAgICB0aGlzLmVudHJ5ID0gZW50cnlcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICB0aGlzLmNodW5rU2l6ZSA9IGNodW5rX3NpemVcbiAgICB0aGlzLmNodW5rVGltZW91dCA9IGNodW5rX3RpbWVvdXRcbiAgICB0aGlzLmNodW5rVGltZXIgPSBudWxsXG4gICAgdGhpcy5lcnJvcmVkID0gZmFsc2VcbiAgICB0aGlzLnVwbG9hZENoYW5uZWwgPSBsaXZlU29ja2V0LmNoYW5uZWwoYGx2dToke2VudHJ5LnJlZn1gLCB7dG9rZW46IGVudHJ5Lm1ldGFkYXRhKCl9KVxuICB9XG5cbiAgZXJyb3IocmVhc29uKXtcbiAgICBpZih0aGlzLmVycm9yZWQpeyByZXR1cm4gfVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5sZWF2ZSgpXG4gICAgdGhpcy5lcnJvcmVkID0gdHJ1ZVxuICAgIGNsZWFyVGltZW91dCh0aGlzLmNodW5rVGltZXIpXG4gICAgdGhpcy5lbnRyeS5lcnJvcihyZWFzb24pXG4gIH1cblxuICB1cGxvYWQoKXtcbiAgICB0aGlzLnVwbG9hZENoYW5uZWwub25FcnJvcihyZWFzb24gPT4gdGhpcy5lcnJvcihyZWFzb24pKVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5qb2luKClcbiAgICAgIC5yZWNlaXZlKFwib2tcIiwgX2RhdGEgPT4gdGhpcy5yZWFkTmV4dENodW5rKCkpXG4gICAgICAucmVjZWl2ZShcImVycm9yXCIsIHJlYXNvbiA9PiB0aGlzLmVycm9yKHJlYXNvbikpXG4gIH1cblxuICBpc0RvbmUoKXsgcmV0dXJuIHRoaXMub2Zmc2V0ID49IHRoaXMuZW50cnkuZmlsZS5zaXplIH1cblxuICByZWFkTmV4dENodW5rKCl7XG4gICAgbGV0IHJlYWRlciA9IG5ldyB3aW5kb3cuRmlsZVJlYWRlcigpXG4gICAgbGV0IGJsb2IgPSB0aGlzLmVudHJ5LmZpbGUuc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMuY2h1bmtTaXplICsgdGhpcy5vZmZzZXQpXG4gICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7XG4gICAgICBpZihlLnRhcmdldC5lcnJvciA9PT0gbnVsbCl7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGUudGFyZ2V0LnJlc3VsdC5ieXRlTGVuZ3RoXG4gICAgICAgIHRoaXMucHVzaENodW5rKGUudGFyZ2V0LnJlc3VsdClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2dFcnJvcihcIlJlYWQgZXJyb3I6IFwiICsgZS50YXJnZXQuZXJyb3IpXG4gICAgICB9XG4gICAgfVxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICB9XG5cbiAgcHVzaENodW5rKGNodW5rKXtcbiAgICBpZighdGhpcy51cGxvYWRDaGFubmVsLmlzSm9pbmVkKCkpeyByZXR1cm4gfVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5wdXNoKFwiY2h1bmtcIiwgY2h1bmssIHRoaXMuY2h1bmtUaW1lb3V0KVxuICAgICAgLnJlY2VpdmUoXCJva1wiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuZW50cnkucHJvZ3Jlc3MoKHRoaXMub2Zmc2V0IC8gdGhpcy5lbnRyeS5maWxlLnNpemUpICogMTAwKVxuICAgICAgICBpZighdGhpcy5pc0RvbmUoKSl7XG4gICAgICAgICAgdGhpcy5jaHVua1RpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnJlYWROZXh0Q2h1bmsoKSwgdGhpcy5saXZlU29ja2V0LmdldExhdGVuY3lTaW0oKSB8fCAwKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnJlY2VpdmUoXCJlcnJvclwiLCAoe3JlYXNvbn0pID0+IHRoaXMuZXJyb3IocmVhc29uKSlcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFBIWF9WSUVXX1NFTEVDVE9SXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCBFbnRyeVVwbG9hZGVyIGZyb20gXCIuL2VudHJ5X3VwbG9hZGVyXCJcblxuZXhwb3J0IGxldCBsb2dFcnJvciA9IChtc2csIG9iaikgPT4gY29uc29sZS5lcnJvciAmJiBjb25zb2xlLmVycm9yKG1zZywgb2JqKVxuXG5leHBvcnQgbGV0IGlzQ2lkID0gKGNpZCkgPT4ge1xuICBsZXQgdHlwZSA9IHR5cGVvZihjaWQpXG4gIHJldHVybiB0eXBlID09PSBcIm51bWJlclwiIHx8ICh0eXBlID09PSBcInN0cmluZ1wiICYmIC9eKDB8WzEtOV1cXGQqKSQvLnRlc3QoY2lkKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdER1cGxpY2F0ZUlkcygpe1xuICBsZXQgaWRzID0gbmV3IFNldCgpXG4gIGxldCBlbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqW2lkXVwiKVxuICBmb3IobGV0IGkgPSAwLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgaWYoaWRzLmhhcyhlbGVtc1tpXS5pZCkpe1xuICAgICAgY29uc29sZS5lcnJvcihgTXVsdGlwbGUgSURzIGRldGVjdGVkOiAke2VsZW1zW2ldLmlkfS4gRW5zdXJlIHVuaXF1ZSBlbGVtZW50IGlkcy5gKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZHMuYWRkKGVsZW1zW2ldLmlkKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgbGV0IGRlYnVnID0gKHZpZXcsIGtpbmQsIG1zZywgb2JqKSA9PiB7XG4gIGlmKHZpZXcubGl2ZVNvY2tldC5pc0RlYnVnRW5hYmxlZCgpKXtcbiAgICBjb25zb2xlLmxvZyhgJHt2aWV3LmlkfSAke2tpbmR9OiAke21zZ30gLSBgLCBvYmopXG4gIH1cbn1cblxuLy8gd3JhcHMgdmFsdWUgaW4gY2xvc3VyZSBvciByZXR1cm5zIGNsb3N1cmVcbmV4cG9ydCBsZXQgY2xvc3VyZSA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwiZnVuY3Rpb25cIiA/IHZhbCA6IGZ1bmN0aW9uICgpeyByZXR1cm4gdmFsIH1cblxuZXhwb3J0IGxldCBjbG9uZSA9IChvYmopID0+IHsgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSkgfVxuXG5leHBvcnQgbGV0IGNsb3Nlc3RQaHhCaW5kaW5nID0gKGVsLCBiaW5kaW5nLCBib3JkZXJFbCkgPT4ge1xuICBkbyB7XG4gICAgaWYoZWwubWF0Y2hlcyhgWyR7YmluZGluZ31dYCkgJiYgIWVsLmRpc2FibGVkKXsgcmV0dXJuIGVsIH1cbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQgfHwgZWwucGFyZW50Tm9kZVxuICB9IHdoaWxlKGVsICE9PSBudWxsICYmIGVsLm5vZGVUeXBlID09PSAxICYmICEoKGJvcmRlckVsICYmIGJvcmRlckVsLmlzU2FtZU5vZGUoZWwpKSB8fCBlbC5tYXRjaGVzKFBIWF9WSUVXX1NFTEVDVE9SKSkpXG4gIHJldHVybiBudWxsXG59XG5cbmV4cG9ydCBsZXQgaXNPYmplY3QgPSAob2JqKSA9PiB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiAhKG9iaiBpbnN0YW5jZW9mIEFycmF5KVxufVxuXG5leHBvcnQgbGV0IGlzRXF1YWxPYmogPSAob2JqMSwgb2JqMikgPT4gSlNPTi5zdHJpbmdpZnkob2JqMSkgPT09IEpTT04uc3RyaW5naWZ5KG9iajIpXG5cbmV4cG9ydCBsZXQgaXNFbXB0eSA9IChvYmopID0+IHtcbiAgZm9yKGxldCB4IGluIG9iail7IHJldHVybiBmYWxzZSB9XG4gIHJldHVybiB0cnVlXG59XG5cbmV4cG9ydCBsZXQgbWF5YmUgPSAoZWwsIGNhbGxiYWNrKSA9PiBlbCAmJiBjYWxsYmFjayhlbClcblxuZXhwb3J0IGxldCBjaGFubmVsVXBsb2FkZXIgPSBmdW5jdGlvbiAoZW50cmllcywgb25FcnJvciwgcmVzcCwgbGl2ZVNvY2tldCl7XG4gIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgbGV0IGVudHJ5VXBsb2FkZXIgPSBuZXcgRW50cnlVcGxvYWRlcihlbnRyeSwgcmVzcC5jb25maWcsIGxpdmVTb2NrZXQpXG4gICAgZW50cnlVcGxvYWRlci51cGxvYWQoKVxuICB9KVxufVxuIiwgImxldCBCcm93c2VyID0ge1xuICBjYW5QdXNoU3RhdGUoKXsgcmV0dXJuICh0eXBlb2YgKGhpc3RvcnkucHVzaFN0YXRlKSAhPT0gXCJ1bmRlZmluZWRcIikgfSxcblxuICBkcm9wTG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSl7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMubG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpKVxuICB9LFxuXG4gIHVwZGF0ZUxvY2FsKGxvY2FsU3RvcmFnZSwgbmFtZXNwYWNlLCBzdWJrZXksIGluaXRpYWwsIGZ1bmMpe1xuICAgIGxldCBjdXJyZW50ID0gdGhpcy5nZXRMb2NhbChsb2NhbFN0b3JhZ2UsIG5hbWVzcGFjZSwgc3Via2V5KVxuICAgIGxldCBrZXkgPSB0aGlzLmxvY2FsS2V5KG5hbWVzcGFjZSwgc3Via2V5KVxuICAgIGxldCBuZXdWYWwgPSBjdXJyZW50ID09PSBudWxsID8gaW5pdGlhbCA6IGZ1bmMoY3VycmVudClcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KG5ld1ZhbCkpXG4gICAgcmV0dXJuIG5ld1ZhbFxuICB9LFxuXG4gIGdldExvY2FsKGxvY2FsU3RvcmFnZSwgbmFtZXNwYWNlLCBzdWJrZXkpe1xuICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMubG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpKSlcbiAgfSxcblxuICB1cGRhdGVDdXJyZW50U3RhdGUoY2FsbGJhY2spe1xuICAgIGlmKCF0aGlzLmNhblB1c2hTdGF0ZSgpKXsgcmV0dXJuIH1cbiAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShjYWxsYmFjayhoaXN0b3J5LnN0YXRlIHx8IHt9KSwgXCJcIiwgd2luZG93LmxvY2F0aW9uLmhyZWYpXG4gIH0sXG5cbiAgcHVzaFN0YXRlKGtpbmQsIG1ldGEsIHRvKXtcbiAgICBpZih0aGlzLmNhblB1c2hTdGF0ZSgpKXtcbiAgICAgIGlmKHRvICE9PSB3aW5kb3cubG9jYXRpb24uaHJlZil7XG4gICAgICAgIGlmKG1ldGEudHlwZSA9PSBcInJlZGlyZWN0XCIgJiYgbWV0YS5zY3JvbGwpe1xuICAgICAgICAgIC8vIElmIHdlJ3JlIHJlZGlyZWN0aW5nIHN0b3JlIHRoZSBjdXJyZW50IHNjcm9sbFkgZm9yIHRoZSBjdXJyZW50IGhpc3Rvcnkgc3RhdGUuXG4gICAgICAgICAgbGV0IGN1cnJlbnRTdGF0ZSA9IGhpc3Rvcnkuc3RhdGUgfHwge31cbiAgICAgICAgICBjdXJyZW50U3RhdGUuc2Nyb2xsID0gbWV0YS5zY3JvbGxcbiAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShjdXJyZW50U3RhdGUsIFwiXCIsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIG1ldGEuc2Nyb2xsIC8vIE9ubHkgc3RvcmUgdGhlIHNjcm9sbCBpbiB0aGUgcmVkaXJlY3QgY2FzZS5cbiAgICAgICAgaGlzdG9yeVtraW5kICsgXCJTdGF0ZVwiXShtZXRhLCBcIlwiLCB0byB8fCBudWxsKSAvLyBJRSB3aWxsIGNvZXJjZSB1bmRlZmluZWQgdG8gc3RyaW5nXG5cbiAgICAgICAgLy8gd2hlbiB1c2luZyBuYXZpZ2F0ZSwgd2UnZCBjYWxsIHB1c2hTdGF0ZSBpbW1lZGlhdGVseSBiZWZvcmUgcGF0Y2hpbmcgdGhlIERPTSxcbiAgICAgICAgLy8ganVtcGluZyBiYWNrIHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2UsIGVmZmVjdGl2ZWx5IGlnbm9yaW5nIHRoZSBzY3JvbGxJbnRvVmlldztcbiAgICAgICAgLy8gdGhlcmVmb3JlIHdlIHdhaXQgZm9yIHRoZSBuZXh0IGZyYW1lIChhZnRlciB0aGUgRE9NIHBhdGNoKSBhbmQgb25seSB0aGVuIHRyeVxuICAgICAgICAvLyB0byBzY3JvbGwgdG8gdGhlIGhhc2hFbFxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBsZXQgaGFzaEVsID0gdGhpcy5nZXRIYXNoVGFyZ2V0RWwod2luZG93LmxvY2F0aW9uLmhhc2gpXG4gIFxuICAgICAgICAgIGlmKGhhc2hFbCl7XG4gICAgICAgICAgICBoYXNoRWwuc2Nyb2xsSW50b1ZpZXcoKVxuICAgICAgICAgIH0gZWxzZSBpZihtZXRhLnR5cGUgPT09IFwicmVkaXJlY3RcIil7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsKDAsIDApXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlZGlyZWN0KHRvKVxuICAgIH1cbiAgfSxcblxuICBzZXRDb29raWUobmFtZSwgdmFsdWUsIG1heEFnZVNlY29uZHMpe1xuICAgIGxldCBleHBpcmVzID0gdHlwZW9mKG1heEFnZVNlY29uZHMpID09PSBcIm51bWJlclwiID8gYCBtYXgtYWdlPSR7bWF4QWdlU2Vjb25kc307YCA6IFwiXCJcbiAgICBkb2N1bWVudC5jb29raWUgPSBgJHtuYW1lfT0ke3ZhbHVlfTske2V4cGlyZXN9IHBhdGg9L2BcbiAgfSxcblxuICBnZXRDb29raWUobmFtZSl7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKG5ldyBSZWdFeHAoYCg/Oig/Ol58Lio7XFxzKikke25hbWV9XFxzKlxcPVxccyooW147XSopLiokKXxeLiokYCksIFwiJDFcIilcbiAgfSxcblxuICBkZWxldGVDb29raWUobmFtZSl7XG4gICAgZG9jdW1lbnQuY29va2llID0gYCR7bmFtZX09OyBtYXgtYWdlPS0xOyBwYXRoPS9gXG4gIH0sXG5cbiAgcmVkaXJlY3QodG9VUkwsIGZsYXNoKXtcbiAgICBpZihmbGFzaCl7IHRoaXMuc2V0Q29va2llKFwiX19waG9lbml4X2ZsYXNoX19cIiwgZmxhc2gsIDYwKSB9XG4gICAgd2luZG93LmxvY2F0aW9uID0gdG9VUkxcbiAgfSxcblxuICBsb2NhbEtleShuYW1lc3BhY2UsIHN1YmtleSl7IHJldHVybiBgJHtuYW1lc3BhY2V9LSR7c3Via2V5fWAgfSxcblxuICBnZXRIYXNoVGFyZ2V0RWwobWF5YmVIYXNoKXtcbiAgICBsZXQgaGFzaCA9IG1heWJlSGFzaC50b1N0cmluZygpLnN1YnN0cmluZygxKVxuICAgIGlmKGhhc2ggPT09IFwiXCIpeyByZXR1cm4gfVxuICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoKSB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBhW25hbWU9XCIke2hhc2h9XCJdYClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCcm93c2VyXG4iLCAiaW1wb3J0IHtcbiAgQ0hFQ0tBQkxFX0lOUFVUUyxcbiAgREVCT1VOQ0VfUFJFVl9LRVksXG4gIERFQk9VTkNFX1RSSUdHRVIsXG4gIEZPQ1VTQUJMRV9JTlBVVFMsXG4gIFBIWF9DT01QT05FTlQsXG4gIFBIWF9IQVNfRk9DVVNFRCxcbiAgUEhYX0hBU19TVUJNSVRURUQsXG4gIFBIWF9NQUlOLFxuICBQSFhfUEFSRU5UX0lELFxuICBQSFhfUFJJVkFURSxcbiAgUEhYX1JFRl9TUkMsXG4gIFBIWF9QRU5ESU5HX0FUVFJTLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9VUExPQURfUkVGLFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX1NUSUNLWSxcbiAgUEhYX0VWRU5UX0NMQVNTRVMsXG4gIFRIUk9UVExFRCxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgbG9nRXJyb3Jcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5sZXQgRE9NID0ge1xuICBieUlkKGlkKXsgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSB8fCBsb2dFcnJvcihgbm8gaWQgZm91bmQgZm9yICR7aWR9YCkgfSxcblxuICByZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lKXtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSlcbiAgICBpZihlbC5jbGFzc0xpc3QubGVuZ3RoID09PSAwKXsgZWwucmVtb3ZlQXR0cmlidXRlKFwiY2xhc3NcIikgfVxuICB9LFxuXG4gIGFsbChub2RlLCBxdWVyeSwgY2FsbGJhY2spe1xuICAgIGlmKCFub2RlKXsgcmV0dXJuIFtdIH1cbiAgICBsZXQgYXJyYXkgPSBBcnJheS5mcm9tKG5vZGUucXVlcnlTZWxlY3RvckFsbChxdWVyeSkpXG4gICAgcmV0dXJuIGNhbGxiYWNrID8gYXJyYXkuZm9yRWFjaChjYWxsYmFjaykgOiBhcnJheVxuICB9LFxuXG4gIGNoaWxkTm9kZUxlbmd0aChodG1sKXtcbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sXG4gICAgcmV0dXJuIHRlbXBsYXRlLmNvbnRlbnQuY2hpbGRFbGVtZW50Q291bnRcbiAgfSxcblxuICBpc1VwbG9hZElucHV0KGVsKXsgcmV0dXJuIGVsLnR5cGUgPT09IFwiZmlsZVwiICYmIGVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRikgIT09IG51bGwgfSxcblxuICBpc0F1dG9VcGxvYWQoaW5wdXRFbCl7IHJldHVybiBpbnB1dEVsLmhhc0F0dHJpYnV0ZShcImRhdGEtcGh4LWF1dG8tdXBsb2FkXCIpIH0sXG5cbiAgZmluZFVwbG9hZElucHV0cyhub2RlKXtcbiAgICBjb25zdCBmb3JtSWQgPSBub2RlLmlkXG4gICAgY29uc3QgaW5wdXRzT3V0c2lkZUZvcm0gPSB0aGlzLmFsbChkb2N1bWVudCwgYGlucHV0W3R5cGU9XCJmaWxlXCJdWyR7UEhYX1VQTE9BRF9SRUZ9XVtmb3JtPVwiJHtmb3JtSWR9XCJdYClcbiAgICByZXR1cm4gdGhpcy5hbGwobm9kZSwgYGlucHV0W3R5cGU9XCJmaWxlXCJdWyR7UEhYX1VQTE9BRF9SRUZ9XWApLmNvbmNhdChpbnB1dHNPdXRzaWRlRm9ybSlcbiAgfSxcblxuICBmaW5kQ29tcG9uZW50Tm9kZUxpc3Qobm9kZSwgY2lkKXtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJXaXRoaW5TYW1lTGl2ZVZpZXcodGhpcy5hbGwobm9kZSwgYFske1BIWF9DT01QT05FTlR9PVwiJHtjaWR9XCJdYCksIG5vZGUpXG4gIH0sXG5cbiAgaXNQaHhEZXN0cm95ZWQobm9kZSl7XG4gICAgcmV0dXJuIG5vZGUuaWQgJiYgRE9NLnByaXZhdGUobm9kZSwgXCJkZXN0cm95ZWRcIikgPyB0cnVlIDogZmFsc2VcbiAgfSxcblxuICB3YW50c05ld1RhYihlKXtcbiAgICBsZXQgd2FudHNOZXdUYWIgPSBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSB8fCBlLm1ldGFLZXkgfHwgKGUuYnV0dG9uICYmIGUuYnV0dG9uID09PSAxKVxuICAgIGxldCBpc0Rvd25sb2FkID0gKGUudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQgJiYgZS50YXJnZXQuaGFzQXR0cmlidXRlKFwiZG93bmxvYWRcIikpXG4gICAgbGV0IGlzVGFyZ2V0QmxhbmsgPSBlLnRhcmdldC5oYXNBdHRyaWJ1dGUoXCJ0YXJnZXRcIikgJiYgZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpLnRvTG93ZXJDYXNlKCkgPT09IFwiX2JsYW5rXCJcbiAgICBsZXQgaXNUYXJnZXROYW1lZFRhYiA9IGUudGFyZ2V0Lmhhc0F0dHJpYnV0ZShcInRhcmdldFwiKSAmJiAhZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpLnN0YXJ0c1dpdGgoXCJfXCIpXG4gICAgcmV0dXJuIHdhbnRzTmV3VGFiIHx8IGlzVGFyZ2V0QmxhbmsgfHwgaXNEb3dubG9hZCB8fCBpc1RhcmdldE5hbWVkVGFiXG4gIH0sXG5cbiAgaXNVbmxvYWRhYmxlRm9ybVN1Ym1pdChlKXtcbiAgICAvLyBJZ25vcmUgZm9ybSBzdWJtaXNzaW9ucyBpbnRlbmRlZCB0byBjbG9zZSBhIG5hdGl2ZSA8ZGlhbG9nPiBlbGVtZW50XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2RpYWxvZyN1c2FnZV9ub3Rlc1xuICAgIGxldCBpc0RpYWxvZ1N1Ym1pdCA9IChlLnRhcmdldCAmJiBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgPT09IFwiZGlhbG9nXCIpIHx8XG4gICAgICAoZS5zdWJtaXR0ZXIgJiYgZS5zdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSA9PT0gXCJkaWFsb2dcIilcblxuICAgIGlmKGlzRGlhbG9nU3VibWl0KXtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gIWUuZGVmYXVsdFByZXZlbnRlZCAmJiAhdGhpcy53YW50c05ld1RhYihlKVxuICAgIH1cbiAgfSxcblxuICBpc05ld1BhZ2VDbGljayhlLCBjdXJyZW50TG9jYXRpb24pe1xuICAgIGxldCBocmVmID0gZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCA/IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImhyZWZcIikgOiBudWxsXG4gICAgbGV0IHVybFxuXG4gICAgaWYoZS5kZWZhdWx0UHJldmVudGVkIHx8IGhyZWYgPT09IG51bGwgfHwgdGhpcy53YW50c05ld1RhYihlKSl7IHJldHVybiBmYWxzZSB9XG4gICAgaWYoaHJlZi5zdGFydHNXaXRoKFwibWFpbHRvOlwiKSB8fCBocmVmLnN0YXJ0c1dpdGgoXCJ0ZWw6XCIpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZihlLnRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZSl7IHJldHVybiBmYWxzZSB9XG5cbiAgICB0cnkge1xuICAgICAgdXJsID0gbmV3IFVSTChocmVmKVxuICAgIH0gY2F0Y2gge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdXJsID0gbmV3IFVSTChocmVmLCBjdXJyZW50TG9jYXRpb24pXG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gYmFkIFVSTCwgZmFsbGJhY2sgdG8gbGV0IGJyb3dzZXIgdHJ5IGl0IGFzIGV4dGVybmFsXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYodXJsLmhvc3QgPT09IGN1cnJlbnRMb2NhdGlvbi5ob3N0ICYmIHVybC5wcm90b2NvbCA9PT0gY3VycmVudExvY2F0aW9uLnByb3RvY29sKXtcbiAgICAgIGlmKHVybC5wYXRobmFtZSA9PT0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lICYmIHVybC5zZWFyY2ggPT09IGN1cnJlbnRMb2NhdGlvbi5zZWFyY2gpe1xuICAgICAgICByZXR1cm4gdXJsLmhhc2ggPT09IFwiXCIgJiYgIXVybC5ocmVmLmVuZHNXaXRoKFwiI1wiKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXJsLnByb3RvY29sLnN0YXJ0c1dpdGgoXCJodHRwXCIpXG4gIH0sXG5cbiAgbWFya1BoeENoaWxkRGVzdHJveWVkKGVsKXtcbiAgICBpZih0aGlzLmlzUGh4Q2hpbGQoZWwpKXsgZWwuc2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OLCBcIlwiKSB9XG4gICAgdGhpcy5wdXRQcml2YXRlKGVsLCBcImRlc3Ryb3llZFwiLCB0cnVlKVxuICB9LFxuXG4gIGZpbmRQaHhDaGlsZHJlbkluRnJhZ21lbnQoaHRtbCwgcGFyZW50SWQpe1xuICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKVxuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcbiAgICByZXR1cm4gdGhpcy5maW5kUGh4Q2hpbGRyZW4odGVtcGxhdGUuY29udGVudCwgcGFyZW50SWQpXG4gIH0sXG5cbiAgaXNJZ25vcmVkKGVsLCBwaHhVcGRhdGUpe1xuICAgIHJldHVybiAoZWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkgfHwgZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtdXBkYXRlXCIpKSA9PT0gXCJpZ25vcmVcIlxuICB9LFxuXG4gIGlzUGh4VXBkYXRlKGVsLCBwaHhVcGRhdGUsIHVwZGF0ZVR5cGVzKXtcbiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlICYmIHVwZGF0ZVR5cGVzLmluZGV4T2YoZWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkpID49IDBcbiAgfSxcblxuICBmaW5kUGh4U3RpY2t5KGVsKXsgcmV0dXJuIHRoaXMuYWxsKGVsLCBgWyR7UEhYX1NUSUNLWX1dYCkgfSxcblxuICBmaW5kUGh4Q2hpbGRyZW4oZWwsIHBhcmVudElkKXtcbiAgICByZXR1cm4gdGhpcy5hbGwoZWwsIGAke1BIWF9WSUVXX1NFTEVDVE9SfVske1BIWF9QQVJFTlRfSUR9PVwiJHtwYXJlbnRJZH1cIl1gKVxuICB9LFxuXG4gIGZpbmRFeGlzdGluZ1BhcmVudENJRHMobm9kZSwgY2lkcyl7XG4gICAgLy8gd2Ugb25seSB3YW50IHRvIGZpbmQgcGFyZW50cyB0aGF0IGV4aXN0IG9uIHRoZSBwYWdlXG4gICAgLy8gaWYgYSBjaWQgaXMgbm90IG9uIHRoZSBwYWdlLCB0aGUgb25seSB3YXkgaXQgY2FuIGJlIGFkZGVkIGJhY2sgdG8gdGhlIHBhZ2VcbiAgICAvLyBpcyBpZiBhIHBhcmVudCBhZGRzIGl0IGJhY2ssIHRoZXJlZm9yZSBpZiBhIGNpZCBkb2VzIG5vdCBleGlzdCBvbiB0aGUgcGFnZSxcbiAgICAvLyB3ZSBzaG91bGQgbm90IHRyeSB0byByZW5kZXIgaXQgYnkgaXRzZWxmIChiZWNhdXNlIGl0IHdvdWxkIGJlIHJlbmRlcmVkIHR3aWNlLFxuICAgIC8vIG9uZSBieSB0aGUgcGFyZW50LCBhbmQgYSBzZWNvbmQgdGltZSBieSBpdHNlbGYpXG4gICAgbGV0IHBhcmVudENpZHMgPSBuZXcgU2V0KClcbiAgICBsZXQgY2hpbGRyZW5DaWRzID0gbmV3IFNldCgpXG5cbiAgICBjaWRzLmZvckVhY2goY2lkID0+IHtcbiAgICAgIHRoaXMuZmlsdGVyV2l0aGluU2FtZUxpdmVWaWV3KHRoaXMuYWxsKG5vZGUsIGBbJHtQSFhfQ09NUE9ORU5UfT1cIiR7Y2lkfVwiXWApLCBub2RlKS5mb3JFYWNoKHBhcmVudCA9PiB7XG4gICAgICAgIHBhcmVudENpZHMuYWRkKGNpZClcbiAgICAgICAgdGhpcy5hbGwocGFyZW50LCBgWyR7UEhYX0NPTVBPTkVOVH1dYClcbiAgICAgICAgICAubWFwKGVsID0+IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5UKSkpXG4gICAgICAgICAgLmZvckVhY2goY2hpbGRDSUQgPT4gY2hpbGRyZW5DaWRzLmFkZChjaGlsZENJRCkpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBjaGlsZHJlbkNpZHMuZm9yRWFjaChjaGlsZENpZCA9PiBwYXJlbnRDaWRzLmRlbGV0ZShjaGlsZENpZCkpXG5cbiAgICByZXR1cm4gcGFyZW50Q2lkc1xuICB9LFxuXG4gIGZpbHRlcldpdGhpblNhbWVMaXZlVmlldyhub2RlcywgcGFyZW50KXtcbiAgICBpZihwYXJlbnQucXVlcnlTZWxlY3RvcihQSFhfVklFV19TRUxFQ1RPUikpe1xuICAgICAgcmV0dXJuIG5vZGVzLmZpbHRlcihlbCA9PiB0aGlzLndpdGhpblNhbWVMaXZlVmlldyhlbCwgcGFyZW50KSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGVzXG4gICAgfVxuICB9LFxuXG4gIHdpdGhpblNhbWVMaXZlVmlldyhub2RlLCBwYXJlbnQpe1xuICAgIHdoaWxlKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpe1xuICAgICAgaWYobm9kZS5pc1NhbWVOb2RlKHBhcmVudCkpeyByZXR1cm4gdHJ1ZSB9XG4gICAgICBpZihub2RlLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTikgIT09IG51bGwpeyByZXR1cm4gZmFsc2UgfVxuICAgIH1cbiAgfSxcblxuICBwcml2YXRlKGVsLCBrZXkpeyByZXR1cm4gZWxbUEhYX1BSSVZBVEVdICYmIGVsW1BIWF9QUklWQVRFXVtrZXldIH0sXG5cbiAgZGVsZXRlUHJpdmF0ZShlbCwga2V5KXsgZWxbUEhYX1BSSVZBVEVdICYmIGRlbGV0ZSAoZWxbUEhYX1BSSVZBVEVdW2tleV0pIH0sXG5cbiAgcHV0UHJpdmF0ZShlbCwga2V5LCB2YWx1ZSl7XG4gICAgaWYoIWVsW1BIWF9QUklWQVRFXSl7IGVsW1BIWF9QUklWQVRFXSA9IHt9IH1cbiAgICBlbFtQSFhfUFJJVkFURV1ba2V5XSA9IHZhbHVlXG4gIH0sXG5cbiAgdXBkYXRlUHJpdmF0ZShlbCwga2V5LCBkZWZhdWx0VmFsLCB1cGRhdGVGdW5jKXtcbiAgICBsZXQgZXhpc3RpbmcgPSB0aGlzLnByaXZhdGUoZWwsIGtleSlcbiAgICBpZihleGlzdGluZyA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCB1cGRhdGVGdW5jKGRlZmF1bHRWYWwpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgdXBkYXRlRnVuYyhleGlzdGluZykpXG4gICAgfVxuICB9LFxuXG4gIHN5bmNQZW5kaW5nQXR0cnMoZnJvbUVsLCB0b0VsKXtcbiAgICBpZighZnJvbUVsLmhhc0F0dHJpYnV0ZShQSFhfUkVGX1NSQykpeyByZXR1cm4gfVxuICAgIFBIWF9FVkVOVF9DTEFTU0VTLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgIGZyb21FbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSAmJiB0b0VsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKVxuICAgIH0pXG4gICAgUEhYX1BFTkRJTkdfQVRUUlMuZmlsdGVyKGF0dHIgPT4gZnJvbUVsLmhhc0F0dHJpYnV0ZShhdHRyKSkuZm9yRWFjaChhdHRyID0+IHtcbiAgICAgIHRvRWwuc2V0QXR0cmlidXRlKGF0dHIsIGZyb21FbC5nZXRBdHRyaWJ1dGUoYXR0cikpXG4gICAgfSlcbiAgfSxcblxuICBjb3B5UHJpdmF0ZXModGFyZ2V0LCBzb3VyY2Upe1xuICAgIGlmKHNvdXJjZVtQSFhfUFJJVkFURV0pe1xuICAgICAgdGFyZ2V0W1BIWF9QUklWQVRFXSA9IHNvdXJjZVtQSFhfUFJJVkFURV1cbiAgICB9XG4gIH0sXG5cbiAgcHV0VGl0bGUoc3RyKXtcbiAgICBsZXQgdGl0bGVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJ0aXRsZVwiKVxuICAgIGlmKHRpdGxlRWwpe1xuICAgICAgbGV0IHtwcmVmaXgsIHN1ZmZpeCwgZGVmYXVsdDogZGVmYXVsdFRpdGxlfSA9IHRpdGxlRWwuZGF0YXNldFxuICAgICAgbGV0IGlzRW1wdHkgPSB0eXBlb2Yoc3RyKSAhPT0gXCJzdHJpbmdcIiB8fCBzdHIudHJpbSgpID09PSBcIlwiXG4gICAgICBpZihpc0VtcHR5ICYmIHR5cGVvZihkZWZhdWx0VGl0bGUpICE9PSBcInN0cmluZ1wiKXsgcmV0dXJuIH1cblxuICAgICAgbGV0IGlubmVyID0gaXNFbXB0eSA/IGRlZmF1bHRUaXRsZSA6IHN0clxuICAgICAgZG9jdW1lbnQudGl0bGUgPSBgJHtwcmVmaXggfHwgXCJcIn0ke2lubmVyIHx8IFwiXCJ9JHtzdWZmaXggfHwgXCJcIn1gXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gc3RyXG4gICAgfVxuICB9LFxuXG4gIGRlYm91bmNlKGVsLCBldmVudCwgcGh4RGVib3VuY2UsIGRlZmF1bHREZWJvdW5jZSwgcGh4VGhyb3R0bGUsIGRlZmF1bHRUaHJvdHRsZSwgYXN5bmNGaWx0ZXIsIGNhbGxiYWNrKXtcbiAgICBsZXQgZGVib3VuY2UgPSBlbC5nZXRBdHRyaWJ1dGUocGh4RGVib3VuY2UpXG4gICAgbGV0IHRocm90dGxlID0gZWwuZ2V0QXR0cmlidXRlKHBoeFRocm90dGxlKVxuXG4gICAgaWYoZGVib3VuY2UgPT09IFwiXCIpeyBkZWJvdW5jZSA9IGRlZmF1bHREZWJvdW5jZSB9XG4gICAgaWYodGhyb3R0bGUgPT09IFwiXCIpeyB0aHJvdHRsZSA9IGRlZmF1bHRUaHJvdHRsZSB9XG4gICAgbGV0IHZhbHVlID0gZGVib3VuY2UgfHwgdGhyb3R0bGVcbiAgICBzd2l0Y2godmFsdWUpe1xuICAgICAgY2FzZSBudWxsOiByZXR1cm4gY2FsbGJhY2soKVxuXG4gICAgICBjYXNlIFwiYmx1clwiOlxuICAgICAgICBpZih0aGlzLm9uY2UoZWwsIFwiZGVib3VuY2UtYmx1clwiKSl7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaWYoYXN5bmNGaWx0ZXIoKSl7IGNhbGxiYWNrKCkgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxldCB0aW1lb3V0ID0gcGFyc2VJbnQodmFsdWUpXG4gICAgICAgIGxldCB0cmlnZ2VyID0gKCkgPT4gdGhyb3R0bGUgPyB0aGlzLmRlbGV0ZVByaXZhdGUoZWwsIFRIUk9UVExFRCkgOiBjYWxsYmFjaygpXG4gICAgICAgIGxldCBjdXJyZW50Q3ljbGUgPSB0aGlzLmluY0N5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSLCB0cmlnZ2VyKVxuICAgICAgICBpZihpc05hTih0aW1lb3V0KSl7IHJldHVybiBsb2dFcnJvcihgaW52YWxpZCB0aHJvdHRsZS9kZWJvdW5jZSB2YWx1ZTogJHt2YWx1ZX1gKSB9XG4gICAgICAgIGlmKHRocm90dGxlKXtcbiAgICAgICAgICBsZXQgbmV3S2V5RG93biA9IGZhbHNlXG4gICAgICAgICAgaWYoZXZlbnQudHlwZSA9PT0gXCJrZXlkb3duXCIpe1xuICAgICAgICAgICAgbGV0IHByZXZLZXkgPSB0aGlzLnByaXZhdGUoZWwsIERFQk9VTkNFX1BSRVZfS0VZKVxuICAgICAgICAgICAgdGhpcy5wdXRQcml2YXRlKGVsLCBERUJPVU5DRV9QUkVWX0tFWSwgZXZlbnQua2V5KVxuICAgICAgICAgICAgbmV3S2V5RG93biA9IHByZXZLZXkgIT09IGV2ZW50LmtleVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKCFuZXdLZXlEb3duICYmIHRoaXMucHJpdmF0ZShlbCwgVEhST1RUTEVEKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgICAgY29uc3QgdCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBpZihhc3luY0ZpbHRlcigpKXsgdGhpcy50cmlnZ2VyQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIpIH1cbiAgICAgICAgICAgIH0sIHRpbWVvdXQpXG4gICAgICAgICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIFRIUk9UVExFRCwgdClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZihhc3luY0ZpbHRlcigpKXsgdGhpcy50cmlnZ2VyQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIsIGN1cnJlbnRDeWNsZSkgfVxuICAgICAgICAgIH0sIHRpbWVvdXQpXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZm9ybSA9IGVsLmZvcm1cbiAgICAgICAgaWYoZm9ybSAmJiB0aGlzLm9uY2UoZm9ybSwgXCJiaW5kLWRlYm91bmNlXCIpKXtcbiAgICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQXJyYXkuZnJvbSgobmV3IEZvcm1EYXRhKGZvcm0pKS5lbnRyaWVzKCksIChbbmFtZV0pID0+IHtcbiAgICAgICAgICAgICAgbGV0IGlucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7bmFtZX1cIl1gKVxuICAgICAgICAgICAgICB0aGlzLmluY0N5Y2xlKGlucHV0LCBERUJPVU5DRV9UUklHR0VSKVxuICAgICAgICAgICAgICB0aGlzLmRlbGV0ZVByaXZhdGUoaW5wdXQsIFRIUk9UVExFRClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLm9uY2UoZWwsIFwiYmluZC1kZWJvdW5jZVwiKSl7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSB0cmlnZ2VyIHRoZSBjYWxsYmFjayBoZXJlLFxuICAgICAgICAgICAgLy8gd2UgYWxzbyBjbGVhciB0aGUgdGhyb3R0bGUgdGltZW91dCB0byBwcmV2ZW50IHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgLy8gZnJvbSBiZWluZyBjYWxsZWQgYWdhaW4gYWZ0ZXIgdGhlIHRpbWVvdXQgZmlyZXNcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnByaXZhdGUoZWwsIFRIUk9UVExFRCkpXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJDeWNsZShlbCwgREVCT1VOQ0VfVFJJR0dFUilcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHRyaWdnZXJDeWNsZShlbCwga2V5LCBjdXJyZW50Q3ljbGUpe1xuICAgIGxldCBbY3ljbGUsIHRyaWdnZXJdID0gdGhpcy5wcml2YXRlKGVsLCBrZXkpXG4gICAgaWYoIWN1cnJlbnRDeWNsZSl7IGN1cnJlbnRDeWNsZSA9IGN5Y2xlIH1cbiAgICBpZihjdXJyZW50Q3ljbGUgPT09IGN5Y2xlKXtcbiAgICAgIHRoaXMuaW5jQ3ljbGUoZWwsIGtleSlcbiAgICAgIHRyaWdnZXIoKVxuICAgIH1cbiAgfSxcblxuICBvbmNlKGVsLCBrZXkpe1xuICAgIGlmKHRoaXMucHJpdmF0ZShlbCwga2V5KSA9PT0gdHJ1ZSl7IHJldHVybiBmYWxzZSB9XG4gICAgdGhpcy5wdXRQcml2YXRlKGVsLCBrZXksIHRydWUpXG4gICAgcmV0dXJuIHRydWVcbiAgfSxcblxuICBpbmNDeWNsZShlbCwga2V5LCB0cmlnZ2VyID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIGxldCBbY3VycmVudEN5Y2xlXSA9IHRoaXMucHJpdmF0ZShlbCwga2V5KSB8fCBbMCwgdHJpZ2dlcl1cbiAgICBjdXJyZW50Q3ljbGUrK1xuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCBbY3VycmVudEN5Y2xlLCB0cmlnZ2VyXSlcbiAgICByZXR1cm4gY3VycmVudEN5Y2xlXG4gIH0sXG5cbiAgLy8gbWFpbnRhaW5zIG9yIGFkZHMgcHJpdmF0ZWx5IHVzZWQgaG9vayBpbmZvcm1hdGlvblxuICAvLyBmcm9tRWwgYW5kIHRvRWwgY2FuIGJlIHRoZSBzYW1lIGVsZW1lbnQgaW4gdGhlIGNhc2Ugb2YgYSBuZXdseSBhZGRlZCBub2RlXG4gIC8vIGZyb21FbCBhbmQgdG9FbCBjYW4gYmUgYW55IEhUTUwgbm9kZSB0eXBlLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGlmIGl0J3MgYW4gZWxlbWVudCBub2RlXG4gIG1haW50YWluUHJpdmF0ZUhvb2tzKGZyb21FbCwgdG9FbCwgcGh4Vmlld3BvcnRUb3AsIHBoeFZpZXdwb3J0Qm90dG9tKXtcbiAgICAvLyBtYWludGFpbiB0aGUgaG9va3MgY3JlYXRlZCB3aXRoIGNyZWF0ZUhvb2tcbiAgICBpZihmcm9tRWwuaGFzQXR0cmlidXRlICYmIGZyb21FbC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIpICYmICF0b0VsLmhhc0F0dHJpYnV0ZShcImRhdGEtcGh4LWhvb2tcIikpe1xuICAgICAgdG9FbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIsIGZyb21FbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIpKVxuICAgIH1cbiAgICAvLyBhZGQgaG9va3MgdG8gZWxlbWVudHMgd2l0aCB2aWV3cG9ydCBhdHRyaWJ1dGVzXG4gICAgaWYodG9FbC5oYXNBdHRyaWJ1dGUgJiYgKHRvRWwuaGFzQXR0cmlidXRlKHBoeFZpZXdwb3J0VG9wKSB8fCB0b0VsLmhhc0F0dHJpYnV0ZShwaHhWaWV3cG9ydEJvdHRvbSkpKXtcbiAgICAgIHRvRWwuc2V0QXR0cmlidXRlKFwiZGF0YS1waHgtaG9va1wiLCBcIlBob2VuaXguSW5maW5pdGVTY3JvbGxcIilcbiAgICB9XG4gIH0sXG5cbiAgcHV0Q3VzdG9tRWxIb29rKGVsLCBob29rKXtcbiAgICBpZihlbC5pc0Nvbm5lY3RlZCl7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIsIFwiXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFxuICAgICAgICBob29rIGF0dGFjaGVkIHRvIG5vbi1jb25uZWN0ZWQgRE9NIGVsZW1lbnRcbiAgICAgICAgZW5zdXJlIHlvdSBhcmUgY2FsbGluZyBjcmVhdGVIb29rIHdpdGhpbiB5b3VyIGNvbm5lY3RlZENhbGxiYWNrLiAke2VsLm91dGVySFRNTH1cbiAgICAgIGApXG4gICAgfVxuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwgXCJjdXN0b20tZWwtaG9va1wiLCBob29rKVxuICB9LFxuXG4gIGdldEN1c3RvbUVsSG9vayhlbCl7IHJldHVybiB0aGlzLnByaXZhdGUoZWwsIFwiY3VzdG9tLWVsLWhvb2tcIikgfSxcblxuICBpc1VzZWRJbnB1dChlbCl7XG4gICAgcmV0dXJuIChlbC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiZcbiAgICAgICh0aGlzLnByaXZhdGUoZWwsIFBIWF9IQVNfRk9DVVNFRCkgfHwgdGhpcy5wcml2YXRlKGVsLCBQSFhfSEFTX1NVQk1JVFRFRCkpKVxuICB9LFxuXG4gIHJlc2V0Rm9ybShmb3JtKXtcbiAgICBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgdGhpcy5kZWxldGVQcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQpXG4gICAgICB0aGlzLmRlbGV0ZVByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVEKVxuICAgIH0pXG4gIH0sXG5cbiAgaXNQaHhDaGlsZChub2RlKXtcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1BBUkVOVF9JRClcbiAgfSxcblxuICBpc1BoeFN0aWNreShub2RlKXtcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1NUSUNLWSkgIT09IG51bGxcbiAgfSxcblxuICBpc0NoaWxkT2ZBbnkoZWwsIHBhcmVudHMpe1xuICAgIHJldHVybiAhIXBhcmVudHMuZmluZChwYXJlbnQgPT4gcGFyZW50LmNvbnRhaW5zKGVsKSlcbiAgfSxcblxuICBmaXJzdFBoeENoaWxkKGVsKXtcbiAgICByZXR1cm4gdGhpcy5pc1BoeENoaWxkKGVsKSA/IGVsIDogdGhpcy5hbGwoZWwsIGBbJHtQSFhfUEFSRU5UX0lEfV1gKVswXVxuICB9LFxuXG4gIGRpc3BhdGNoRXZlbnQodGFyZ2V0LCBuYW1lLCBvcHRzID0ge30pe1xuICAgIGxldCBkZWZhdWx0QnViYmxlID0gdHJ1ZVxuICAgIGxldCBpc1VwbG9hZFRhcmdldCA9IHRhcmdldC5ub2RlTmFtZSA9PT0gXCJJTlBVVFwiICYmIHRhcmdldC50eXBlID09PSBcImZpbGVcIlxuICAgIGlmKGlzVXBsb2FkVGFyZ2V0ICYmIG5hbWUgPT09IFwiY2xpY2tcIil7XG4gICAgICBkZWZhdWx0QnViYmxlID0gZmFsc2VcbiAgICB9XG4gICAgbGV0IGJ1YmJsZXMgPSBvcHRzLmJ1YmJsZXMgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRCdWJibGUgOiAhIW9wdHMuYnViYmxlc1xuICAgIGxldCBldmVudE9wdHMgPSB7YnViYmxlczogYnViYmxlcywgY2FuY2VsYWJsZTogdHJ1ZSwgZGV0YWlsOiBvcHRzLmRldGFpbCB8fCB7fX1cbiAgICBsZXQgZXZlbnQgPSBuYW1lID09PSBcImNsaWNrXCIgPyBuZXcgTW91c2VFdmVudChcImNsaWNrXCIsIGV2ZW50T3B0cykgOiBuZXcgQ3VzdG9tRXZlbnQobmFtZSwgZXZlbnRPcHRzKVxuICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KVxuICB9LFxuXG4gIGNsb25lTm9kZShub2RlLCBodG1sKXtcbiAgICBpZih0eXBlb2YgKGh0bWwpID09PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgIHJldHVybiBub2RlLmNsb25lTm9kZSh0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY2xvbmVkID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpXG4gICAgICBjbG9uZWQuaW5uZXJIVE1MID0gaHRtbFxuICAgICAgcmV0dXJuIGNsb25lZFxuICAgIH1cbiAgfSxcblxuICAvLyBtZXJnZSBhdHRyaWJ1dGVzIGZyb20gc291cmNlIHRvIHRhcmdldFxuICAvLyBpZiBhbiBlbGVtZW50IGlzIGlnbm9yZWQsIHdlIG9ubHkgbWVyZ2UgZGF0YSBhdHRyaWJ1dGVzXG4gIC8vIGluY2x1ZGluZyByZW1vdmluZyBkYXRhIGF0dHJpYnV0ZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBzb3VyY2VcbiAgbWVyZ2VBdHRycyh0YXJnZXQsIHNvdXJjZSwgb3B0cyA9IHt9KXtcbiAgICBsZXQgZXhjbHVkZSA9IG5ldyBTZXQob3B0cy5leGNsdWRlIHx8IFtdKVxuICAgIGxldCBpc0lnbm9yZWQgPSBvcHRzLmlzSWdub3JlZFxuICAgIGxldCBzb3VyY2VBdHRycyA9IHNvdXJjZS5hdHRyaWJ1dGVzXG4gICAgZm9yKGxldCBpID0gc291cmNlQXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgbGV0IG5hbWUgPSBzb3VyY2VBdHRyc1tpXS5uYW1lXG4gICAgICBpZighZXhjbHVkZS5oYXMobmFtZSkpe1xuICAgICAgICBjb25zdCBzb3VyY2VWYWx1ZSA9IHNvdXJjZS5nZXRBdHRyaWJ1dGUobmFtZSlcbiAgICAgICAgaWYodGFyZ2V0LmdldEF0dHJpYnV0ZShuYW1lKSAhPT0gc291cmNlVmFsdWUgJiYgKCFpc0lnbm9yZWQgfHwgKGlzSWdub3JlZCAmJiBuYW1lLnN0YXJ0c1dpdGgoXCJkYXRhLVwiKSkpKXtcbiAgICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKG5hbWUsIHNvdXJjZVZhbHVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSBleGNsdWRlIHRoZSB2YWx1ZSBmcm9tIGJlaW5nIG1lcmdlZCBvbiBmb2N1c2VkIGlucHV0cywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gdXNlcidzIGlucHV0IHNob3VsZCBhbHdheXMgd2luLlxuICAgICAgICAvLyBXZSBjYW4gc3RpbGwgYXNzaWduIGl0IGFzIGxvbmcgYXMgdGhlIHZhbHVlIHByb3BlcnR5IGlzIHRoZSBzYW1lLCB0aG91Z2guXG4gICAgICAgIC8vIFRoaXMgcHJldmVudHMgYSBzaXR1YXRpb24gd2hlcmUgdGhlIHVwZGF0ZWQgaG9vayBpcyBub3QgYmVpbmcgdHJpZ2dlcmVkXG4gICAgICAgIC8vIHdoZW4gYW4gaW5wdXQgaXMgYmFjayBpbiBpdHMgXCJvcmlnaW5hbCBzdGF0ZVwiLCBiZWNhdXNlIHRoZSBhdHRyaWJ1dGVcbiAgICAgICAgLy8gd2FzIG5ldmVyIGNoYW5nZWQsIHNlZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peF9saXZlX3ZpZXcvaXNzdWVzLzIxNjNcbiAgICAgICAgaWYobmFtZSA9PT0gXCJ2YWx1ZVwiICYmIHRhcmdldC52YWx1ZSA9PT0gc291cmNlLnZhbHVlKXtcbiAgICAgICAgICAvLyBhY3R1YWxseSBzZXQgdGhlIHZhbHVlIGF0dHJpYnV0ZSB0byBzeW5jIGl0IHdpdGggdGhlIHZhbHVlIHByb3BlcnR5XG4gICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIHNvdXJjZS5nZXRBdHRyaWJ1dGUobmFtZSkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdGFyZ2V0QXR0cnMgPSB0YXJnZXQuYXR0cmlidXRlc1xuICAgIGZvcihsZXQgaSA9IHRhcmdldEF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgIGxldCBuYW1lID0gdGFyZ2V0QXR0cnNbaV0ubmFtZVxuICAgICAgaWYoaXNJZ25vcmVkKXtcbiAgICAgICAgaWYobmFtZS5zdGFydHNXaXRoKFwiZGF0YS1cIikgJiYgIXNvdXJjZS5oYXNBdHRyaWJ1dGUobmFtZSkgJiYgIVBIWF9QRU5ESU5HX0FUVFJTLmluY2x1ZGVzKG5hbWUpKXsgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShuYW1lKSB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZighc291cmNlLmhhc0F0dHJpYnV0ZShuYW1lKSl7IHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUobmFtZSkgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBtZXJnZUZvY3VzZWRJbnB1dCh0YXJnZXQsIHNvdXJjZSl7XG4gICAgLy8gc2tpcCBzZWxlY3RzIGJlY2F1c2UgRkYgd2lsbCByZXNldCBoaWdobGlnaHRlZCBpbmRleCBmb3IgYW55IHNldEF0dHJpYnV0ZVxuICAgIGlmKCEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpKXsgRE9NLm1lcmdlQXR0cnModGFyZ2V0LCBzb3VyY2UsIHtleGNsdWRlOiBbXCJ2YWx1ZVwiXX0pIH1cblxuICAgIGlmKHNvdXJjZS5yZWFkT25seSl7XG4gICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwicmVhZG9ubHlcIiwgdHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInJlYWRvbmx5XCIpXG4gICAgfVxuICB9LFxuXG4gIGhhc1NlbGVjdGlvblJhbmdlKGVsKXtcbiAgICByZXR1cm4gZWwuc2V0U2VsZWN0aW9uUmFuZ2UgJiYgKGVsLnR5cGUgPT09IFwidGV4dFwiIHx8IGVsLnR5cGUgPT09IFwidGV4dGFyZWFcIilcbiAgfSxcblxuICByZXN0b3JlRm9jdXMoZm9jdXNlZCwgc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCl7XG4gICAgaWYoZm9jdXNlZCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50KXsgZm9jdXNlZC5mb2N1cygpIH1cbiAgICBpZighRE9NLmlzVGV4dHVhbElucHV0KGZvY3VzZWQpKXsgcmV0dXJuIH1cblxuICAgIGxldCB3YXNGb2N1c2VkID0gZm9jdXNlZC5tYXRjaGVzKFwiOmZvY3VzXCIpXG4gICAgaWYoIXdhc0ZvY3VzZWQpeyBmb2N1c2VkLmZvY3VzKCkgfVxuICAgIGlmKHRoaXMuaGFzU2VsZWN0aW9uUmFuZ2UoZm9jdXNlZCkpe1xuICAgICAgZm9jdXNlZC5zZXRTZWxlY3Rpb25SYW5nZShzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKVxuICAgIH1cbiAgfSxcblxuICBpc0Zvcm1JbnB1dChlbCl7IHJldHVybiAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYSkkL2kudGVzdChlbC50YWdOYW1lKSAmJiBlbC50eXBlICE9PSBcImJ1dHRvblwiIH0sXG5cbiAgc3luY0F0dHJzVG9Qcm9wcyhlbCl7XG4gICAgaWYoZWwgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50ICYmIENIRUNLQUJMRV9JTlBVVFMuaW5kZXhPZihlbC50eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkpID49IDApe1xuICAgICAgZWwuY2hlY2tlZCA9IGVsLmdldEF0dHJpYnV0ZShcImNoZWNrZWRcIikgIT09IG51bGxcbiAgICB9XG4gIH0sXG5cbiAgaXNUZXh0dWFsSW5wdXQoZWwpeyByZXR1cm4gRk9DVVNBQkxFX0lOUFVUUy5pbmRleE9mKGVsLnR5cGUpID49IDAgfSxcblxuICBpc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWwoZWwsIHBoeFRyaWdnZXJFeHRlcm5hbCl7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUocGh4VHJpZ2dlckV4dGVybmFsKSAhPT0gbnVsbFxuICB9LFxuXG4gIGNsZWFuQ2hpbGROb2Rlcyhjb250YWluZXIsIHBoeFVwZGF0ZSl7XG4gICAgaWYoRE9NLmlzUGh4VXBkYXRlKGNvbnRhaW5lciwgcGh4VXBkYXRlLCBbXCJhcHBlbmRcIiwgXCJwcmVwZW5kXCJdKSl7XG4gICAgICBsZXQgdG9SZW1vdmUgPSBbXVxuICAgICAgY29udGFpbmVyLmNoaWxkTm9kZXMuZm9yRWFjaChjaGlsZE5vZGUgPT4ge1xuICAgICAgICBpZighY2hpbGROb2RlLmlkKXtcbiAgICAgICAgICAvLyBTa2lwIHdhcm5pbmcgaWYgaXQncyBhbiBlbXB0eSB0ZXh0IG5vZGUgKGUuZy4gYSBuZXctbGluZSlcbiAgICAgICAgICBsZXQgaXNFbXB0eVRleHROb2RlID0gY2hpbGROb2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiBjaGlsZE5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gXCJcIlxuICAgICAgICAgIGlmKCFpc0VtcHR5VGV4dE5vZGUgJiYgY2hpbGROb2RlLm5vZGVUeXBlICE9PSBOb2RlLkNPTU1FTlRfTk9ERSl7XG4gICAgICAgICAgICBsb2dFcnJvcihcIm9ubHkgSFRNTCBlbGVtZW50IHRhZ3Mgd2l0aCBhbiBpZCBhcmUgYWxsb3dlZCBpbnNpZGUgY29udGFpbmVycyB3aXRoIHBoeC11cGRhdGUuXFxuXFxuXCIgK1xuICAgICAgICAgICAgICBgcmVtb3ZpbmcgaWxsZWdhbCBub2RlOiBcIiR7KGNoaWxkTm9kZS5vdXRlckhUTUwgfHwgY2hpbGROb2RlLm5vZGVWYWx1ZSkudHJpbSgpfVwiXFxuXFxuYClcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9SZW1vdmUucHVzaChjaGlsZE5vZGUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICB0b1JlbW92ZS5mb3JFYWNoKGNoaWxkTm9kZSA9PiBjaGlsZE5vZGUucmVtb3ZlKCkpXG4gICAgfVxuICB9LFxuXG4gIHJlcGxhY2VSb290Q29udGFpbmVyKGNvbnRhaW5lciwgdGFnTmFtZSwgYXR0cnMpe1xuICAgIGxldCByZXRhaW5lZEF0dHJzID0gbmV3IFNldChbXCJpZFwiLCBQSFhfU0VTU0lPTiwgUEhYX1NUQVRJQywgUEhYX01BSU4sIFBIWF9ST09UX0lEXSlcbiAgICBpZihjb250YWluZXIudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0YWdOYW1lLnRvTG93ZXJDYXNlKCkpe1xuICAgICAgQXJyYXkuZnJvbShjb250YWluZXIuYXR0cmlidXRlcylcbiAgICAgICAgLmZpbHRlcihhdHRyID0+ICFyZXRhaW5lZEF0dHJzLmhhcyhhdHRyLm5hbWUudG9Mb3dlckNhc2UoKSkpXG4gICAgICAgIC5mb3JFYWNoKGF0dHIgPT4gY29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZShhdHRyLm5hbWUpKVxuXG4gICAgICBPYmplY3Qua2V5cyhhdHRycylcbiAgICAgICAgLmZpbHRlcihuYW1lID0+ICFyZXRhaW5lZEF0dHJzLmhhcyhuYW1lLnRvTG93ZXJDYXNlKCkpKVxuICAgICAgICAuZm9yRWFjaChhdHRyID0+IGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0cnNbYXR0cl0pKVxuXG4gICAgICByZXR1cm4gY29udGFpbmVyXG5cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG5ld0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSlcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGF0dHIgPT4gbmV3Q29udGFpbmVyLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyc1thdHRyXSkpXG4gICAgICByZXRhaW5lZEF0dHJzLmZvckVhY2goYXR0ciA9PiBuZXdDb250YWluZXIuc2V0QXR0cmlidXRlKGF0dHIsIGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoYXR0cikpKVxuICAgICAgbmV3Q29udGFpbmVyLmlubmVySFRNTCA9IGNvbnRhaW5lci5pbm5lckhUTUxcbiAgICAgIGNvbnRhaW5lci5yZXBsYWNlV2l0aChuZXdDb250YWluZXIpXG4gICAgICByZXR1cm4gbmV3Q29udGFpbmVyXG4gICAgfVxuICB9LFxuXG4gIGdldFN0aWNreShlbCwgbmFtZSwgZGVmYXVsdFZhbCl7XG4gICAgbGV0IG9wID0gKERPTS5wcml2YXRlKGVsLCBcInN0aWNreVwiKSB8fCBbXSkuZmluZCgoW2V4aXN0aW5nTmFtZSxdKSA9PiBuYW1lID09PSBleGlzdGluZ05hbWUpXG4gICAgaWYob3Ape1xuICAgICAgbGV0IFtfbmFtZSwgX29wLCBzdGFzaGVkUmVzdWx0XSA9IG9wXG4gICAgICByZXR1cm4gc3Rhc2hlZFJlc3VsdFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHlwZW9mKGRlZmF1bHRWYWwpID09PSBcImZ1bmN0aW9uXCIgPyBkZWZhdWx0VmFsKCkgOiBkZWZhdWx0VmFsXG4gICAgfVxuICB9LFxuXG4gIGRlbGV0ZVN0aWNreShlbCwgbmFtZSl7XG4gICAgdGhpcy51cGRhdGVQcml2YXRlKGVsLCBcInN0aWNreVwiLCBbXSwgb3BzID0+IHtcbiAgICAgIHJldHVybiBvcHMuZmlsdGVyKChbZXhpc3RpbmdOYW1lLCBfXSkgPT4gZXhpc3RpbmdOYW1lICE9PSBuYW1lKVxuICAgIH0pXG4gIH0sXG5cbiAgcHV0U3RpY2t5KGVsLCBuYW1lLCBvcCl7XG4gICAgbGV0IHN0YXNoZWRSZXN1bHQgPSBvcChlbClcbiAgICB0aGlzLnVwZGF0ZVByaXZhdGUoZWwsIFwic3RpY2t5XCIsIFtdLCBvcHMgPT4ge1xuICAgICAgbGV0IGV4aXN0aW5nSW5kZXggPSBvcHMuZmluZEluZGV4KChbZXhpc3RpbmdOYW1lLF0pID0+IG5hbWUgPT09IGV4aXN0aW5nTmFtZSlcbiAgICAgIGlmKGV4aXN0aW5nSW5kZXggPj0gMCl7XG4gICAgICAgIG9wc1tleGlzdGluZ0luZGV4XSA9IFtuYW1lLCBvcCwgc3Rhc2hlZFJlc3VsdF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wcy5wdXNoKFtuYW1lLCBvcCwgc3Rhc2hlZFJlc3VsdF0pXG4gICAgICB9XG4gICAgICByZXR1cm4gb3BzXG4gICAgfSlcbiAgfSxcblxuICBhcHBseVN0aWNreU9wZXJhdGlvbnMoZWwpe1xuICAgIGxldCBvcHMgPSBET00ucHJpdmF0ZShlbCwgXCJzdGlja3lcIilcbiAgICBpZighb3BzKXsgcmV0dXJuIH1cblxuICAgIG9wcy5mb3JFYWNoKChbbmFtZSwgb3AsIF9zdGFzaGVkXSkgPT4gdGhpcy5wdXRTdGlja3koZWwsIG5hbWUsIG9wKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBET01cbiIsICJpbXBvcnQge1xuICBQSFhfQUNUSVZFX0VOVFJZX1JFRlMsXG4gIFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCxcbiAgUEhYX1BSRUZMSUdIVEVEX1JFRlNcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgY2hhbm5lbFVwbG9hZGVyLFxuICBsb2dFcnJvclxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBMaXZlVXBsb2FkZXIgZnJvbSBcIi4vbGl2ZV91cGxvYWRlclwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVwbG9hZEVudHJ5IHtcbiAgc3RhdGljIGlzQWN0aXZlKGZpbGVFbCwgZmlsZSl7XG4gICAgbGV0IGlzTmV3ID0gZmlsZS5fcGh4UmVmID09PSB1bmRlZmluZWRcbiAgICBsZXQgYWN0aXZlUmVmcyA9IGZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX0FDVElWRV9FTlRSWV9SRUZTKS5zcGxpdChcIixcIilcbiAgICBsZXQgaXNBY3RpdmUgPSBhY3RpdmVSZWZzLmluZGV4T2YoTGl2ZVVwbG9hZGVyLmdlbkZpbGVSZWYoZmlsZSkpID49IDBcbiAgICByZXR1cm4gZmlsZS5zaXplID4gMCAmJiAoaXNOZXcgfHwgaXNBY3RpdmUpXG4gIH1cblxuICBzdGF0aWMgaXNQcmVmbGlnaHRlZChmaWxlRWwsIGZpbGUpe1xuICAgIGxldCBwcmVmbGlnaHRlZFJlZnMgPSBmaWxlRWwuZ2V0QXR0cmlidXRlKFBIWF9QUkVGTElHSFRFRF9SRUZTKS5zcGxpdChcIixcIilcbiAgICBsZXQgaXNQcmVmbGlnaHRlZCA9IHByZWZsaWdodGVkUmVmcy5pbmRleE9mKExpdmVVcGxvYWRlci5nZW5GaWxlUmVmKGZpbGUpKSA+PSAwXG4gICAgcmV0dXJuIGlzUHJlZmxpZ2h0ZWQgJiYgdGhpcy5pc0FjdGl2ZShmaWxlRWwsIGZpbGUpXG4gIH1cblxuICBzdGF0aWMgaXNQcmVmbGlnaHRJblByb2dyZXNzKGZpbGUpe1xuICAgIHJldHVybiBmaWxlLl9wcmVmbGlnaHRJblByb2dyZXNzID09PSB0cnVlXG4gIH1cblxuICBzdGF0aWMgbWFya1ByZWZsaWdodEluUHJvZ3Jlc3MoZmlsZSl7XG4gICAgZmlsZS5fcHJlZmxpZ2h0SW5Qcm9ncmVzcyA9IHRydWVcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGZpbGVFbCwgZmlsZSwgdmlldywgYXV0b1VwbG9hZCl7XG4gICAgdGhpcy5yZWYgPSBMaXZlVXBsb2FkZXIuZ2VuRmlsZVJlZihmaWxlKVxuICAgIHRoaXMuZmlsZUVsID0gZmlsZUVsXG4gICAgdGhpcy5maWxlID0gZmlsZVxuICAgIHRoaXMudmlldyA9IHZpZXdcbiAgICB0aGlzLm1ldGEgPSBudWxsXG4gICAgdGhpcy5faXNDYW5jZWxsZWQgPSBmYWxzZVxuICAgIHRoaXMuX2lzRG9uZSA9IGZhbHNlXG4gICAgdGhpcy5fcHJvZ3Jlc3MgPSAwXG4gICAgdGhpcy5fbGFzdFByb2dyZXNzU2VudCA9IC0xXG4gICAgdGhpcy5fb25Eb25lID0gZnVuY3Rpb24oKXsgfVxuICAgIHRoaXMuX29uRWxVcGRhdGVkID0gdGhpcy5vbkVsVXBkYXRlZC5iaW5kKHRoaXMpXG4gICAgdGhpcy5maWxlRWwuYWRkRXZlbnRMaXN0ZW5lcihQSFhfTElWRV9GSUxFX1VQREFURUQsIHRoaXMuX29uRWxVcGRhdGVkKVxuICAgIHRoaXMuYXV0b1VwbG9hZCA9IGF1dG9VcGxvYWRcbiAgfVxuXG4gIG1ldGFkYXRhKCl7IHJldHVybiB0aGlzLm1ldGEgfVxuXG4gIHByb2dyZXNzKHByb2dyZXNzKXtcbiAgICB0aGlzLl9wcm9ncmVzcyA9IE1hdGguZmxvb3IocHJvZ3Jlc3MpXG4gICAgaWYodGhpcy5fcHJvZ3Jlc3MgPiB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50KXtcbiAgICAgIGlmKHRoaXMuX3Byb2dyZXNzID49IDEwMCl7XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzID0gMTAwXG4gICAgICAgIHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQgPSAxMDBcbiAgICAgICAgdGhpcy5faXNEb25lID0gdHJ1ZVxuICAgICAgICB0aGlzLnZpZXcucHVzaEZpbGVQcm9ncmVzcyh0aGlzLmZpbGVFbCwgdGhpcy5yZWYsIDEwMCwgKCkgPT4ge1xuICAgICAgICAgIExpdmVVcGxvYWRlci51bnRyYWNrRmlsZSh0aGlzLmZpbGVFbCwgdGhpcy5maWxlKVxuICAgICAgICAgIHRoaXMuX29uRG9uZSgpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50ID0gdGhpcy5fcHJvZ3Jlc3NcbiAgICAgICAgdGhpcy52aWV3LnB1c2hGaWxlUHJvZ3Jlc3ModGhpcy5maWxlRWwsIHRoaXMucmVmLCB0aGlzLl9wcm9ncmVzcylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpc0NhbmNlbGxlZCgpeyByZXR1cm4gdGhpcy5faXNDYW5jZWxsZWQgfVxuXG4gIGNhbmNlbCgpe1xuICAgIHRoaXMuZmlsZS5fcHJlZmxpZ2h0SW5Qcm9ncmVzcyA9IGZhbHNlXG4gICAgdGhpcy5faXNDYW5jZWxsZWQgPSB0cnVlXG4gICAgdGhpcy5faXNEb25lID0gdHJ1ZVxuICAgIHRoaXMuX29uRG9uZSgpXG4gIH1cblxuICBpc0RvbmUoKXsgcmV0dXJuIHRoaXMuX2lzRG9uZSB9XG5cbiAgZXJyb3IocmVhc29uID0gXCJmYWlsZWRcIil7XG4gICAgdGhpcy5maWxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihQSFhfTElWRV9GSUxFX1VQREFURUQsIHRoaXMuX29uRWxVcGRhdGVkKVxuICAgIHRoaXMudmlldy5wdXNoRmlsZVByb2dyZXNzKHRoaXMuZmlsZUVsLCB0aGlzLnJlZiwge2Vycm9yOiByZWFzb259KVxuICAgIGlmKCF0aGlzLmlzQXV0b1VwbG9hZCgpKXsgTGl2ZVVwbG9hZGVyLmNsZWFyRmlsZXModGhpcy5maWxlRWwpIH1cbiAgfVxuXG4gIGlzQXV0b1VwbG9hZCgpeyByZXR1cm4gdGhpcy5hdXRvVXBsb2FkIH1cblxuICAvL3ByaXZhdGVcblxuICBvbkRvbmUoY2FsbGJhY2spe1xuICAgIHRoaXMuX29uRG9uZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuZmlsZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoUEhYX0xJVkVfRklMRV9VUERBVEVELCB0aGlzLl9vbkVsVXBkYXRlZClcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICBvbkVsVXBkYXRlZCgpe1xuICAgIGxldCBhY3RpdmVSZWZzID0gdGhpcy5maWxlRWwuZ2V0QXR0cmlidXRlKFBIWF9BQ1RJVkVfRU5UUllfUkVGUykuc3BsaXQoXCIsXCIpXG4gICAgaWYoYWN0aXZlUmVmcy5pbmRleE9mKHRoaXMucmVmKSA9PT0gLTEpe1xuICAgICAgTGl2ZVVwbG9hZGVyLnVudHJhY2tGaWxlKHRoaXMuZmlsZUVsLCB0aGlzLmZpbGUpXG4gICAgICB0aGlzLmNhbmNlbCgpXG4gICAgfVxuICB9XG5cbiAgdG9QcmVmbGlnaHRQYXlsb2FkKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhc3RfbW9kaWZpZWQ6IHRoaXMuZmlsZS5sYXN0TW9kaWZpZWQsXG4gICAgICBuYW1lOiB0aGlzLmZpbGUubmFtZSxcbiAgICAgIHJlbGF0aXZlX3BhdGg6IHRoaXMuZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGgsXG4gICAgICBzaXplOiB0aGlzLmZpbGUuc2l6ZSxcbiAgICAgIHR5cGU6IHRoaXMuZmlsZS50eXBlLFxuICAgICAgcmVmOiB0aGlzLnJlZixcbiAgICAgIG1ldGE6IHR5cGVvZih0aGlzLmZpbGUubWV0YSkgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXMuZmlsZS5tZXRhKCkgOiB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICB1cGxvYWRlcih1cGxvYWRlcnMpe1xuICAgIGlmKHRoaXMubWV0YS51cGxvYWRlcil7XG4gICAgICBsZXQgY2FsbGJhY2sgPSB1cGxvYWRlcnNbdGhpcy5tZXRhLnVwbG9hZGVyXSB8fCBsb2dFcnJvcihgbm8gdXBsb2FkZXIgY29uZmlndXJlZCBmb3IgJHt0aGlzLm1ldGEudXBsb2FkZXJ9YClcbiAgICAgIHJldHVybiB7bmFtZTogdGhpcy5tZXRhLnVwbG9hZGVyLCBjYWxsYmFjazogY2FsbGJhY2t9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7bmFtZTogXCJjaGFubmVsXCIsIGNhbGxiYWNrOiBjaGFubmVsVXBsb2FkZXJ9XG4gICAgfVxuICB9XG5cbiAgemlwUG9zdEZsaWdodChyZXNwKXtcbiAgICB0aGlzLm1ldGEgPSByZXNwLmVudHJpZXNbdGhpcy5yZWZdXG4gICAgaWYoIXRoaXMubWV0YSl7IGxvZ0Vycm9yKGBubyBwcmVmbGlnaHQgdXBsb2FkIHJlc3BvbnNlIHJldHVybmVkIHdpdGggcmVmICR7dGhpcy5yZWZ9YCwge2lucHV0OiB0aGlzLmZpbGVFbCwgcmVzcG9uc2U6IHJlc3B9KSB9XG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBQSFhfRE9ORV9SRUZTLFxuICBQSFhfUFJFRkxJR0hURURfUkVGUyxcbiAgUEhYX1VQTE9BRF9SRUZcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgVXBsb2FkRW50cnkgZnJvbSBcIi4vdXBsb2FkX2VudHJ5XCJcblxubGV0IGxpdmVVcGxvYWRlckZpbGVSZWYgPSAwXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpdmVVcGxvYWRlciB7XG4gIHN0YXRpYyBnZW5GaWxlUmVmKGZpbGUpe1xuICAgIGxldCByZWYgPSBmaWxlLl9waHhSZWZcbiAgICBpZihyZWYgIT09IHVuZGVmaW5lZCl7XG4gICAgICByZXR1cm4gcmVmXG4gICAgfSBlbHNlIHtcbiAgICAgIGZpbGUuX3BoeFJlZiA9IChsaXZlVXBsb2FkZXJGaWxlUmVmKyspLnRvU3RyaW5nKClcbiAgICAgIHJldHVybiBmaWxlLl9waHhSZWZcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0RW50cnlEYXRhVVJMKGlucHV0RWwsIHJlZiwgY2FsbGJhY2spe1xuICAgIGxldCBmaWxlID0gdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5maW5kKGZpbGUgPT4gdGhpcy5nZW5GaWxlUmVmKGZpbGUpID09PSByZWYpXG4gICAgY2FsbGJhY2soVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKSlcbiAgfVxuXG4gIHN0YXRpYyBoYXNVcGxvYWRzSW5Qcm9ncmVzcyhmb3JtRWwpe1xuICAgIGxldCBhY3RpdmUgPSAwXG4gICAgRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlmKGlucHV0LmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykgIT09IGlucHV0LmdldEF0dHJpYnV0ZShQSFhfRE9ORV9SRUZTKSl7XG4gICAgICAgIGFjdGl2ZSsrXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gYWN0aXZlID4gMFxuICB9XG5cbiAgc3RhdGljIHNlcmlhbGl6ZVVwbG9hZHMoaW5wdXRFbCl7XG4gICAgbGV0IGZpbGVzID0gdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKVxuICAgIGxldCBmaWxlRGF0YSA9IHt9XG4gICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgIGxldCBlbnRyeSA9IHtwYXRoOiBpbnB1dEVsLm5hbWV9XG4gICAgICBsZXQgdXBsb2FkUmVmID0gaW5wdXRFbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpXG4gICAgICBmaWxlRGF0YVt1cGxvYWRSZWZdID0gZmlsZURhdGFbdXBsb2FkUmVmXSB8fCBbXVxuICAgICAgZW50cnkucmVmID0gdGhpcy5nZW5GaWxlUmVmKGZpbGUpXG4gICAgICBlbnRyeS5sYXN0X21vZGlmaWVkID0gZmlsZS5sYXN0TW9kaWZpZWRcbiAgICAgIGVudHJ5Lm5hbWUgPSBmaWxlLm5hbWUgfHwgZW50cnkucmVmXG4gICAgICBlbnRyeS5yZWxhdGl2ZV9wYXRoID0gZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGhcbiAgICAgIGVudHJ5LnR5cGUgPSBmaWxlLnR5cGVcbiAgICAgIGVudHJ5LnNpemUgPSBmaWxlLnNpemVcbiAgICAgIGlmKHR5cGVvZihmaWxlLm1ldGEpID09PSBcImZ1bmN0aW9uXCIpeyBlbnRyeS5tZXRhID0gZmlsZS5tZXRhKCkgfVxuICAgICAgZmlsZURhdGFbdXBsb2FkUmVmXS5wdXNoKGVudHJ5KVxuICAgIH0pXG4gICAgcmV0dXJuIGZpbGVEYXRhXG4gIH1cblxuICBzdGF0aWMgY2xlYXJGaWxlcyhpbnB1dEVsKXtcbiAgICBpbnB1dEVsLnZhbHVlID0gbnVsbFxuICAgIGlucHV0RWwucmVtb3ZlQXR0cmlidXRlKFBIWF9VUExPQURfUkVGKVxuICAgIERPTS5wdXRQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgW10pXG4gIH1cblxuICBzdGF0aWMgdW50cmFja0ZpbGUoaW5wdXRFbCwgZmlsZSl7XG4gICAgRE9NLnB1dFByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBET00ucHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIpLmZpbHRlcihmID0+ICFPYmplY3QuaXMoZiwgZmlsZSkpKVxuICB9XG5cbiAgc3RhdGljIHRyYWNrRmlsZXMoaW5wdXRFbCwgZmlsZXMsIGRhdGFUcmFuc2Zlcil7XG4gICAgaWYoaW5wdXRFbC5nZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiKSAhPT0gbnVsbCl7XG4gICAgICBsZXQgbmV3RmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiAhdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5maW5kKGYgPT4gT2JqZWN0LmlzKGYsIGZpbGUpKSlcbiAgICAgIERPTS51cGRhdGVQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgW10sIChleGlzdGluZykgPT4gZXhpc3RpbmcuY29uY2F0KG5ld0ZpbGVzKSlcbiAgICAgIGlucHV0RWwudmFsdWUgPSBudWxsXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlc2V0IGlucHV0RWwgZmlsZXMgdG8gYWxpZ24gb3V0cHV0IHdpdGggcHJvZ3JhbW1hdGljIGNoYW5nZXMgKGkuZS4gZHJhZyBhbmQgZHJvcClcbiAgICAgIGlmKGRhdGFUcmFuc2ZlciAmJiBkYXRhVHJhbnNmZXIuZmlsZXMubGVuZ3RoID4gMCl7IGlucHV0RWwuZmlsZXMgPSBkYXRhVHJhbnNmZXIuZmlsZXMgfVxuICAgICAgRE9NLnB1dFByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBmaWxlcylcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYWN0aXZlRmlsZUlucHV0cyhmb3JtRWwpe1xuICAgIGxldCBmaWxlSW5wdXRzID0gRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKVxuICAgIHJldHVybiBBcnJheS5mcm9tKGZpbGVJbnB1dHMpLmZpbHRlcihlbCA9PiBlbC5maWxlcyAmJiB0aGlzLmFjdGl2ZUZpbGVzKGVsKS5sZW5ndGggPiAwKVxuICB9XG5cbiAgc3RhdGljIGFjdGl2ZUZpbGVzKGlucHV0KXtcbiAgICByZXR1cm4gKERPTS5wcml2YXRlKGlucHV0LCBcImZpbGVzXCIpIHx8IFtdKS5maWx0ZXIoZiA9PiBVcGxvYWRFbnRyeS5pc0FjdGl2ZShpbnB1dCwgZikpXG4gIH1cblxuICBzdGF0aWMgaW5wdXRzQXdhaXRpbmdQcmVmbGlnaHQoZm9ybUVsKXtcbiAgICBsZXQgZmlsZUlucHV0cyA9IERPTS5maW5kVXBsb2FkSW5wdXRzKGZvcm1FbClcbiAgICByZXR1cm4gQXJyYXkuZnJvbShmaWxlSW5wdXRzKS5maWx0ZXIoaW5wdXQgPT4gdGhpcy5maWxlc0F3YWl0aW5nUHJlZmxpZ2h0KGlucHV0KS5sZW5ndGggPiAwKVxuICB9XG5cbiAgc3RhdGljIGZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXQpe1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZUZpbGVzKGlucHV0KS5maWx0ZXIoZiA9PiAhVXBsb2FkRW50cnkuaXNQcmVmbGlnaHRlZChpbnB1dCwgZikgJiYgIVVwbG9hZEVudHJ5LmlzUHJlZmxpZ2h0SW5Qcm9ncmVzcyhmKSlcbiAgfVxuXG4gIHN0YXRpYyBtYXJrUHJlZmxpZ2h0SW5Qcm9ncmVzcyhlbnRyaWVzKXtcbiAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4gVXBsb2FkRW50cnkubWFya1ByZWZsaWdodEluUHJvZ3Jlc3MoZW50cnkuZmlsZSkpXG4gIH1cblxuICBjb25zdHJ1Y3RvcihpbnB1dEVsLCB2aWV3LCBvbkNvbXBsZXRlKXtcbiAgICB0aGlzLmF1dG9VcGxvYWQgPSBET00uaXNBdXRvVXBsb2FkKGlucHV0RWwpXG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMub25Db21wbGV0ZSA9IG9uQ29tcGxldGVcbiAgICB0aGlzLl9lbnRyaWVzID1cbiAgICAgIEFycmF5LmZyb20oTGl2ZVVwbG9hZGVyLmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXRFbCkgfHwgW10pXG4gICAgICAgIC5tYXAoZmlsZSA9PiBuZXcgVXBsb2FkRW50cnkoaW5wdXRFbCwgZmlsZSwgdmlldywgdGhpcy5hdXRvVXBsb2FkKSlcblxuICAgIC8vIHByZXZlbnQgc2VuZGluZyBkdXBsaWNhdGUgcHJlZmxpZ2h0IHJlcXVlc3RzXG4gICAgTGl2ZVVwbG9hZGVyLm1hcmtQcmVmbGlnaHRJblByb2dyZXNzKHRoaXMuX2VudHJpZXMpXG5cbiAgICB0aGlzLm51bUVudHJpZXNJblByb2dyZXNzID0gdGhpcy5fZW50cmllcy5sZW5ndGhcbiAgfVxuXG4gIGlzQXV0b1VwbG9hZCgpeyByZXR1cm4gdGhpcy5hdXRvVXBsb2FkIH1cblxuICBlbnRyaWVzKCl7IHJldHVybiB0aGlzLl9lbnRyaWVzIH1cblxuICBpbml0QWRhcHRlclVwbG9hZChyZXNwLCBvbkVycm9yLCBsaXZlU29ja2V0KXtcbiAgICB0aGlzLl9lbnRyaWVzID1cbiAgICAgIHRoaXMuX2VudHJpZXMubWFwKGVudHJ5ID0+IHtcbiAgICAgICAgaWYoZW50cnkuaXNDYW5jZWxsZWQoKSl7XG4gICAgICAgICAgdGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcy0tXG4gICAgICAgICAgaWYodGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcyA9PT0gMCl7IHRoaXMub25Db21wbGV0ZSgpIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbnRyeS56aXBQb3N0RmxpZ2h0KHJlc3ApXG4gICAgICAgICAgZW50cnkub25Eb25lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubnVtRW50cmllc0luUHJvZ3Jlc3MtLVxuICAgICAgICAgICAgaWYodGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcyA9PT0gMCl7IHRoaXMub25Db21wbGV0ZSgpIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnRyeVxuICAgICAgfSlcblxuICAgIGxldCBncm91cGVkRW50cmllcyA9IHRoaXMuX2VudHJpZXMucmVkdWNlKChhY2MsIGVudHJ5KSA9PiB7XG4gICAgICBpZighZW50cnkubWV0YSl7IHJldHVybiBhY2MgfVxuICAgICAgbGV0IHtuYW1lLCBjYWxsYmFja30gPSBlbnRyeS51cGxvYWRlcihsaXZlU29ja2V0LnVwbG9hZGVycylcbiAgICAgIGFjY1tuYW1lXSA9IGFjY1tuYW1lXSB8fCB7Y2FsbGJhY2s6IGNhbGxiYWNrLCBlbnRyaWVzOiBbXX1cbiAgICAgIGFjY1tuYW1lXS5lbnRyaWVzLnB1c2goZW50cnkpXG4gICAgICByZXR1cm4gYWNjXG4gICAgfSwge30pXG5cbiAgICBmb3IobGV0IG5hbWUgaW4gZ3JvdXBlZEVudHJpZXMpe1xuICAgICAgbGV0IHtjYWxsYmFjaywgZW50cmllc30gPSBncm91cGVkRW50cmllc1tuYW1lXVxuICAgICAgY2FsbGJhY2soZW50cmllcywgb25FcnJvciwgcmVzcCwgbGl2ZVNvY2tldClcbiAgICB9XG4gIH1cbn1cbiIsICJsZXQgQVJJQSA9IHtcbiAgYW55T2YoaW5zdGFuY2UsIGNsYXNzZXMpeyByZXR1cm4gY2xhc3Nlcy5maW5kKG5hbWUgPT4gaW5zdGFuY2UgaW5zdGFuY2VvZiBuYW1lKSB9LFxuXG4gIGlzRm9jdXNhYmxlKGVsLCBpbnRlcmFjdGl2ZU9ubHkpe1xuICAgIHJldHVybiAoXG4gICAgICAoZWwgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCAmJiBlbC5yZWwgIT09IFwiaWdub3JlXCIpIHx8XG4gICAgICAoZWwgaW5zdGFuY2VvZiBIVE1MQXJlYUVsZW1lbnQgJiYgZWwuaHJlZiAhPT0gdW5kZWZpbmVkKSB8fFxuICAgICAgKCFlbC5kaXNhYmxlZCAmJiAodGhpcy5hbnlPZihlbCwgW0hUTUxJbnB1dEVsZW1lbnQsIEhUTUxTZWxlY3RFbGVtZW50LCBIVE1MVGV4dEFyZWFFbGVtZW50LCBIVE1MQnV0dG9uRWxlbWVudF0pKSkgfHxcbiAgICAgIChlbCBpbnN0YW5jZW9mIEhUTUxJRnJhbWVFbGVtZW50KSB8fFxuICAgICAgKGVsLnRhYkluZGV4ID4gMCB8fCAoIWludGVyYWN0aXZlT25seSAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSAhPT0gbnVsbCAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKSAhPT0gXCJ0cnVlXCIpKVxuICAgIClcbiAgfSxcblxuICBhdHRlbXB0Rm9jdXMoZWwsIGludGVyYWN0aXZlT25seSl7XG4gICAgaWYodGhpcy5pc0ZvY3VzYWJsZShlbCwgaW50ZXJhY3RpdmVPbmx5KSl7IHRyeSB7IGVsLmZvY3VzKCkgfSBjYXRjaCB7fSB9XG4gICAgcmV0dXJuICEhZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmlzU2FtZU5vZGUoZWwpXG4gIH0sXG5cbiAgZm9jdXNGaXJzdEludGVyYWN0aXZlKGVsKXtcbiAgICBsZXQgY2hpbGQgPSBlbC5maXJzdEVsZW1lbnRDaGlsZFxuICAgIHdoaWxlKGNoaWxkKXtcbiAgICAgIGlmKHRoaXMuYXR0ZW1wdEZvY3VzKGNoaWxkLCB0cnVlKSB8fCB0aGlzLmZvY3VzRmlyc3RJbnRlcmFjdGl2ZShjaGlsZCwgdHJ1ZSkpe1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0RWxlbWVudFNpYmxpbmdcbiAgICB9XG4gIH0sXG5cbiAgZm9jdXNGaXJzdChlbCl7XG4gICAgbGV0IGNoaWxkID0gZWwuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICB3aGlsZShjaGlsZCl7XG4gICAgICBpZih0aGlzLmF0dGVtcHRGb2N1cyhjaGlsZCkgfHwgdGhpcy5mb2N1c0ZpcnN0KGNoaWxkKSl7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLm5leHRFbGVtZW50U2libGluZ1xuICAgIH1cbiAgfSxcblxuICBmb2N1c0xhc3QoZWwpe1xuICAgIGxldCBjaGlsZCA9IGVsLmxhc3RFbGVtZW50Q2hpbGRcbiAgICB3aGlsZShjaGlsZCl7XG4gICAgICBpZih0aGlzLmF0dGVtcHRGb2N1cyhjaGlsZCkgfHwgdGhpcy5mb2N1c0xhc3QoY2hpbGQpKXtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gY2hpbGQucHJldmlvdXNFbGVtZW50U2libGluZ1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQVJJQVxuIiwgImltcG9ydCB7XG4gIFBIWF9BQ1RJVkVfRU5UUllfUkVGUyxcbiAgUEhYX0xJVkVfRklMRV9VUERBVEVELFxuICBQSFhfUFJFRkxJR0hURURfUkVGUyxcbiAgUEhYX1VQTE9BRF9SRUZcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcbmltcG9ydCBBUklBIGZyb20gXCIuL2FyaWFcIlxuXG5sZXQgSG9va3MgPSB7XG4gIExpdmVGaWxlVXBsb2FkOiB7XG4gICAgYWN0aXZlUmVmcygpeyByZXR1cm4gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX0FDVElWRV9FTlRSWV9SRUZTKSB9LFxuXG4gICAgcHJlZmxpZ2h0ZWRSZWZzKCl7IHJldHVybiB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykgfSxcblxuICAgIG1vdW50ZWQoKXsgdGhpcy5wcmVmbGlnaHRlZFdhcyA9IHRoaXMucHJlZmxpZ2h0ZWRSZWZzKCkgfSxcblxuICAgIHVwZGF0ZWQoKXtcbiAgICAgIGxldCBuZXdQcmVmbGlnaHRzID0gdGhpcy5wcmVmbGlnaHRlZFJlZnMoKVxuICAgICAgaWYodGhpcy5wcmVmbGlnaHRlZFdhcyAhPT0gbmV3UHJlZmxpZ2h0cyl7XG4gICAgICAgIHRoaXMucHJlZmxpZ2h0ZWRXYXMgPSBuZXdQcmVmbGlnaHRzXG4gICAgICAgIGlmKG5ld1ByZWZsaWdodHMgPT09IFwiXCIpe1xuICAgICAgICAgIHRoaXMuX192aWV3KCkuY2FuY2VsU3VibWl0KHRoaXMuZWwuZm9ybSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZih0aGlzLmFjdGl2ZVJlZnMoKSA9PT0gXCJcIil7IHRoaXMuZWwudmFsdWUgPSBudWxsIH1cbiAgICAgIHRoaXMuZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUEhYX0xJVkVfRklMRV9VUERBVEVEKSlcbiAgICB9XG4gIH0sXG5cbiAgTGl2ZUltZ1ByZXZpZXc6IHtcbiAgICBtb3VudGVkKCl7XG4gICAgICB0aGlzLnJlZiA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtZW50cnktcmVmXCIpXG4gICAgICB0aGlzLmlucHV0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRikpXG4gICAgICBMaXZlVXBsb2FkZXIuZ2V0RW50cnlEYXRhVVJMKHRoaXMuaW5wdXRFbCwgdGhpcy5yZWYsIHVybCA9PiB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsXG4gICAgICAgIHRoaXMuZWwuc3JjID0gdXJsXG4gICAgICB9KVxuICAgIH0sXG4gICAgZGVzdHJveWVkKCl7XG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMudXJsKVxuICAgIH1cbiAgfSxcbiAgRm9jdXNXcmFwOiB7XG4gICAgbW91bnRlZCgpe1xuICAgICAgdGhpcy5mb2N1c1N0YXJ0ID0gdGhpcy5lbC5maXJzdEVsZW1lbnRDaGlsZFxuICAgICAgdGhpcy5mb2N1c0VuZCA9IHRoaXMuZWwubGFzdEVsZW1lbnRDaGlsZFxuICAgICAgdGhpcy5mb2N1c1N0YXJ0LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoKSA9PiBBUklBLmZvY3VzTGFzdCh0aGlzLmVsKSlcbiAgICAgIHRoaXMuZm9jdXNFbmQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsICgpID0+IEFSSUEuZm9jdXNGaXJzdCh0aGlzLmVsKSlcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpzaG93LWVuZFwiLCAoKSA9PiB0aGlzLmVsLmZvY3VzKCkpXG4gICAgICBpZih3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsKS5kaXNwbGF5ICE9PSBcIm5vbmVcIil7XG4gICAgICAgIEFSSUEuZm9jdXNGaXJzdCh0aGlzLmVsKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5sZXQgZmluZFNjcm9sbENvbnRhaW5lciA9IChlbCkgPT4ge1xuICAvLyB0aGUgc2Nyb2xsIGV2ZW50IHdvbid0IGJlIGZpcmVkIG9uIHRoZSBodG1sL2JvZHkgZWxlbWVudCBldmVuIGlmIG92ZXJmbG93IGlzIHNldFxuICAvLyB0aGVyZWZvcmUgd2UgcmV0dXJuIG51bGwgdG8gaW5zdGVhZCBsaXN0ZW4gZm9yIHNjcm9sbCBldmVudHMgb24gZG9jdW1lbnRcbiAgaWYoW1wiSFRNTFwiLCBcIkJPRFlcIl0uaW5kZXhPZihlbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpKSA+PSAwKSByZXR1cm4gbnVsbFxuICBpZihbXCJzY3JvbGxcIiwgXCJhdXRvXCJdLmluZGV4T2YoZ2V0Q29tcHV0ZWRTdHlsZShlbCkub3ZlcmZsb3dZKSA+PSAwKSByZXR1cm4gZWxcbiAgcmV0dXJuIGZpbmRTY3JvbGxDb250YWluZXIoZWwucGFyZW50RWxlbWVudClcbn1cblxubGV0IHNjcm9sbFRvcCA9IChzY3JvbGxDb250YWluZXIpID0+IHtcbiAgaWYoc2Nyb2xsQ29udGFpbmVyKXtcbiAgICByZXR1cm4gc2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvcFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wXG4gIH1cbn1cblxubGV0IGJvdHRvbSA9IChzY3JvbGxDb250YWluZXIpID0+IHtcbiAgaWYoc2Nyb2xsQ29udGFpbmVyKXtcbiAgICByZXR1cm4gc2Nyb2xsQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbVxuICB9IGVsc2Uge1xuICAgIC8vIHdoZW4gd2UgaGF2ZSBubyBjb250YWluZXIsIHRoZSB3aG9sZSBwYWdlIHNjcm9sbHMsXG4gICAgLy8gdGhlcmVmb3JlIHRoZSBib3R0b20gY29vcmRpbmF0ZSBpcyB0aGUgdmlld3BvcnQgaGVpZ2h0XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gIH1cbn1cblxubGV0IHRvcCA9IChzY3JvbGxDb250YWluZXIpID0+IHtcbiAgaWYoc2Nyb2xsQ29udGFpbmVyKXtcbiAgICByZXR1cm4gc2Nyb2xsQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuICB9IGVsc2Uge1xuICAgIC8vIHdoZW4gd2UgaGF2ZSBubyBjb250YWluZXIgdGhlIHdob2xlIHBhZ2Ugc2Nyb2xscyxcbiAgICAvLyB0aGVyZWZvcmUgdGhlIHRvcCBjb29yZGluYXRlIGlzIDBcbiAgICByZXR1cm4gMFxuICB9XG59XG5cbmxldCBpc0F0Vmlld3BvcnRUb3AgPSAoZWwsIHNjcm9sbENvbnRhaW5lcikgPT4ge1xuICBsZXQgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gIHJldHVybiBNYXRoLmNlaWwocmVjdC50b3ApID49IHRvcChzY3JvbGxDb250YWluZXIpICYmIE1hdGguY2VpbChyZWN0LmxlZnQpID49IDAgJiYgTWF0aC5mbG9vcihyZWN0LnRvcCkgPD0gYm90dG9tKHNjcm9sbENvbnRhaW5lcilcbn1cblxubGV0IGlzQXRWaWV3cG9ydEJvdHRvbSA9IChlbCwgc2Nyb2xsQ29udGFpbmVyKSA9PiB7XG4gIGxldCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgcmV0dXJuIE1hdGguY2VpbChyZWN0LmJvdHRvbSkgPj0gdG9wKHNjcm9sbENvbnRhaW5lcikgJiYgTWF0aC5jZWlsKHJlY3QubGVmdCkgPj0gMCAmJiBNYXRoLmZsb29yKHJlY3QuYm90dG9tKSA8PSBib3R0b20oc2Nyb2xsQ29udGFpbmVyKVxufVxuXG5sZXQgaXNXaXRoaW5WaWV3cG9ydCA9IChlbCwgc2Nyb2xsQ29udGFpbmVyKSA9PiB7XG4gIGxldCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgcmV0dXJuIE1hdGguY2VpbChyZWN0LnRvcCkgPj0gdG9wKHNjcm9sbENvbnRhaW5lcikgJiYgTWF0aC5jZWlsKHJlY3QubGVmdCkgPj0gMCAmJiBNYXRoLmZsb29yKHJlY3QudG9wKSA8PSBib3R0b20oc2Nyb2xsQ29udGFpbmVyKVxufVxuXG5Ib29rcy5JbmZpbml0ZVNjcm9sbCA9IHtcbiAgbW91bnRlZCgpe1xuICAgIHRoaXMuc2Nyb2xsQ29udGFpbmVyID0gZmluZFNjcm9sbENvbnRhaW5lcih0aGlzLmVsKVxuICAgIGxldCBzY3JvbGxCZWZvcmUgPSBzY3JvbGxUb3AodGhpcy5zY3JvbGxDb250YWluZXIpXG4gICAgbGV0IHRvcE92ZXJyYW4gPSBmYWxzZVxuICAgIGxldCB0aHJvdHRsZUludGVydmFsID0gNTAwXG4gICAgbGV0IHBlbmRpbmdPcCA9IG51bGxcblxuICAgIGxldCBvblRvcE92ZXJydW4gPSB0aGlzLnRocm90dGxlKHRocm90dGxlSW50ZXJ2YWwsICh0b3BFdmVudCwgZmlyc3RDaGlsZCkgPT4ge1xuICAgICAgcGVuZGluZ09wID0gKCkgPT4gdHJ1ZVxuICAgICAgdGhpcy5saXZlU29ja2V0LmV4ZWNKU0hvb2tQdXNoKHRoaXMuZWwsIHRvcEV2ZW50LCB7aWQ6IGZpcnN0Q2hpbGQuaWQsIF9vdmVycmFuOiB0cnVlfSwgKCkgPT4ge1xuICAgICAgICBwZW5kaW5nT3AgPSBudWxsXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBsZXQgb25GaXJzdENoaWxkQXRUb3AgPSB0aGlzLnRocm90dGxlKHRocm90dGxlSW50ZXJ2YWwsICh0b3BFdmVudCwgZmlyc3RDaGlsZCkgPT4ge1xuICAgICAgcGVuZGluZ09wID0gKCkgPT4gZmlyc3RDaGlsZC5zY3JvbGxJbnRvVmlldyh7YmxvY2s6IFwic3RhcnRcIn0pXG4gICAgICB0aGlzLmxpdmVTb2NrZXQuZXhlY0pTSG9va1B1c2godGhpcy5lbCwgdG9wRXZlbnQsIHtpZDogZmlyc3RDaGlsZC5pZH0sICgpID0+IHtcbiAgICAgICAgcGVuZGluZ09wID0gbnVsbFxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgRE9NIGlzIHBhdGNoZWQgYnkgd2FpdGluZyBmb3IgdGhlIG5leHQgdGlja1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBpZighaXNXaXRoaW5WaWV3cG9ydChmaXJzdENoaWxkLCB0aGlzLnNjcm9sbENvbnRhaW5lcikpe1xuICAgICAgICAgICAgZmlyc3RDaGlsZC5zY3JvbGxJbnRvVmlldyh7YmxvY2s6IFwic3RhcnRcIn0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgbGV0IG9uTGFzdENoaWxkQXRCb3R0b20gPSB0aGlzLnRocm90dGxlKHRocm90dGxlSW50ZXJ2YWwsIChib3R0b21FdmVudCwgbGFzdENoaWxkKSA9PiB7XG4gICAgICBwZW5kaW5nT3AgPSAoKSA9PiBsYXN0Q2hpbGQuc2Nyb2xsSW50b1ZpZXcoe2Jsb2NrOiBcImVuZFwifSlcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5leGVjSlNIb29rUHVzaCh0aGlzLmVsLCBib3R0b21FdmVudCwge2lkOiBsYXN0Q2hpbGQuaWR9LCAoKSA9PiB7XG4gICAgICAgIHBlbmRpbmdPcCA9IG51bGxcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIERPTSBpcyBwYXRjaGVkIGJ5IHdhaXRpbmcgZm9yIHRoZSBuZXh0IHRpY2tcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaWYoIWlzV2l0aGluVmlld3BvcnQobGFzdENoaWxkLCB0aGlzLnNjcm9sbENvbnRhaW5lcikpe1xuICAgICAgICAgICAgbGFzdENoaWxkLnNjcm9sbEludG9WaWV3KHtibG9jazogXCJlbmRcIn0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5vblNjcm9sbCA9IChfZSkgPT4ge1xuICAgICAgbGV0IHNjcm9sbE5vdyA9IHNjcm9sbFRvcCh0aGlzLnNjcm9sbENvbnRhaW5lcilcblxuICAgICAgaWYocGVuZGluZ09wKXtcbiAgICAgICAgc2Nyb2xsQmVmb3JlID0gc2Nyb2xsTm93XG4gICAgICAgIHJldHVybiBwZW5kaW5nT3AoKVxuICAgICAgfVxuICAgICAgbGV0IHJlY3QgPSB0aGlzLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICBsZXQgdG9wRXZlbnQgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZSh0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhcInZpZXdwb3J0LXRvcFwiKSlcbiAgICAgIGxldCBib3R0b21FdmVudCA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFwidmlld3BvcnQtYm90dG9tXCIpKVxuICAgICAgbGV0IGxhc3RDaGlsZCA9IHRoaXMuZWwubGFzdEVsZW1lbnRDaGlsZFxuICAgICAgbGV0IGZpcnN0Q2hpbGQgPSB0aGlzLmVsLmZpcnN0RWxlbWVudENoaWxkXG4gICAgICBsZXQgaXNTY3JvbGxpbmdVcCA9IHNjcm9sbE5vdyA8IHNjcm9sbEJlZm9yZVxuICAgICAgbGV0IGlzU2Nyb2xsaW5nRG93biA9IHNjcm9sbE5vdyA+IHNjcm9sbEJlZm9yZVxuXG4gICAgICAvLyBlbCBvdmVycmFuIHdoaWxlIHNjcm9sbGluZyB1cFxuICAgICAgaWYoaXNTY3JvbGxpbmdVcCAmJiB0b3BFdmVudCAmJiAhdG9wT3ZlcnJhbiAmJiByZWN0LnRvcCA+PSAwKXtcbiAgICAgICAgdG9wT3ZlcnJhbiA9IHRydWVcbiAgICAgICAgb25Ub3BPdmVycnVuKHRvcEV2ZW50LCBmaXJzdENoaWxkKVxuICAgICAgfSBlbHNlIGlmKGlzU2Nyb2xsaW5nRG93biAmJiB0b3BPdmVycmFuICYmIHJlY3QudG9wIDw9IDApe1xuICAgICAgICB0b3BPdmVycmFuID0gZmFsc2VcbiAgICAgIH1cblxuICAgICAgaWYodG9wRXZlbnQgJiYgaXNTY3JvbGxpbmdVcCAmJiBpc0F0Vmlld3BvcnRUb3AoZmlyc3RDaGlsZCwgdGhpcy5zY3JvbGxDb250YWluZXIpKXtcbiAgICAgICAgb25GaXJzdENoaWxkQXRUb3AodG9wRXZlbnQsIGZpcnN0Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYoYm90dG9tRXZlbnQgJiYgaXNTY3JvbGxpbmdEb3duICYmIGlzQXRWaWV3cG9ydEJvdHRvbShsYXN0Q2hpbGQsIHRoaXMuc2Nyb2xsQ29udGFpbmVyKSl7XG4gICAgICAgIG9uTGFzdENoaWxkQXRCb3R0b20oYm90dG9tRXZlbnQsIGxhc3RDaGlsZClcbiAgICAgIH1cbiAgICAgIHNjcm9sbEJlZm9yZSA9IHNjcm9sbE5vd1xuICAgIH1cblxuICAgIGlmKHRoaXMuc2Nyb2xsQ29udGFpbmVyKXtcbiAgICAgIHRoaXMuc2Nyb2xsQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbClcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbClcbiAgICB9XG4gIH0sXG4gIFxuICBkZXN0cm95ZWQoKXtcbiAgICBpZih0aGlzLnNjcm9sbENvbnRhaW5lcil7XG4gICAgICB0aGlzLnNjcm9sbENvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwpXG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwpXG4gICAgfVxuICB9LFxuXG4gIHRocm90dGxlKGludGVydmFsLCBjYWxsYmFjayl7XG4gICAgbGV0IGxhc3RDYWxsQXQgPSAwXG4gICAgbGV0IHRpbWVyXG5cbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgIGxldCBub3cgPSBEYXRlLm5vdygpXG4gICAgICBsZXQgcmVtYWluaW5nVGltZSA9IGludGVydmFsIC0gKG5vdyAtIGxhc3RDYWxsQXQpXG5cbiAgICAgIGlmKHJlbWFpbmluZ1RpbWUgPD0gMCB8fCByZW1haW5pbmdUaW1lID4gaW50ZXJ2YWwpe1xuICAgICAgICBpZih0aW1lcil7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKVxuICAgICAgICAgIHRpbWVyID0gbnVsbFxuICAgICAgICB9XG4gICAgICAgIGxhc3RDYWxsQXQgPSBub3dcbiAgICAgICAgY2FsbGJhY2soLi4uYXJncylcbiAgICAgIH0gZWxzZSBpZighdGltZXIpe1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGxhc3RDYWxsQXQgPSBEYXRlLm5vdygpXG4gICAgICAgICAgdGltZXIgPSBudWxsXG4gICAgICAgICAgY2FsbGJhY2soLi4uYXJncylcbiAgICAgICAgfSwgcmVtYWluaW5nVGltZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEhvb2tzXG4iLCAiaW1wb3J0IHtcbiAgUEhYX1JFRl9MT0FESU5HLFxuICBQSFhfUkVGX0xPQ0ssXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfRVZFTlRfQ0xBU1NFUyxcbiAgUEhYX0RJU0FCTEVELFxuICBQSFhfUkVBRE9OTFksXG4gIFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRVxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZW1lbnRSZWYge1xuICBjb25zdHJ1Y3RvcihlbCl7XG4gICAgdGhpcy5lbCA9IGVsXG4gICAgdGhpcy5sb2FkaW5nUmVmID0gZWwuaGFzQXR0cmlidXRlKFBIWF9SRUZfTE9BRElORykgPyBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoUEhYX1JFRl9MT0FESU5HKSwgMTApIDogbnVsbFxuICAgIHRoaXMubG9ja1JlZiA9IGVsLmhhc0F0dHJpYnV0ZShQSFhfUkVGX0xPQ0spID8gcGFyc2VJbnQoZWwuZ2V0QXR0cmlidXRlKFBIWF9SRUZfTE9DSyksIDEwKSA6IG51bGxcbiAgfVxuXG4gIC8vIHB1YmxpY1xuXG4gIG1heWJlVW5kbyhyZWYsIHBoeEV2ZW50LCBlYWNoQ2xvbmVDYWxsYmFjayl7XG4gICAgaWYoIXRoaXMuaXNXaXRoaW4ocmVmKSl7IHJldHVybiB9XG5cbiAgICAvLyB1bmRvIGxvY2tzIGFuZCBhcHBseSBjbG9uZXNcbiAgICB0aGlzLnVuZG9Mb2NrcyhyZWYsIHBoeEV2ZW50LCBlYWNoQ2xvbmVDYWxsYmFjaylcblxuICAgIC8vIHVuZG8gbG9hZGluZyBzdGF0ZXNcbiAgICB0aGlzLnVuZG9Mb2FkaW5nKHJlZiwgcGh4RXZlbnQpXG5cbiAgICAvLyBjbGVhbiB1cCBpZiBmdWxseSByZXNvbHZlZFxuICAgIGlmKHRoaXMuaXNGdWxseVJlc29sdmVkQnkocmVmKSl7IHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfU1JDKSB9XG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgaXNXaXRoaW4ocmVmKXtcbiAgICByZXR1cm4gISgodGhpcy5sb2FkaW5nUmVmICE9PSBudWxsICYmIHRoaXMubG9hZGluZ1JlZiA+IHJlZikgJiYgKHRoaXMubG9ja1JlZiAhPT0gbnVsbCAmJiB0aGlzLmxvY2tSZWYgPiByZWYpKVxuICB9XG5cbiAgLy8gQ2hlY2sgZm9yIGNsb25lZCBQSFhfUkVGX0xPQ0sgZWxlbWVudCB0aGF0IGhhcyBiZWVuIG1vcnBoZWQgYmVoaW5kXG4gIC8vIHRoZSBzY2VuZXMgd2hpbGUgdGhpcyBlbGVtZW50IHdhcyBsb2NrZWQgaW4gdGhlIERPTS5cbiAgLy8gV2hlbiB3ZSBhcHBseSB0aGUgY2xvbmVkIHRyZWUgdG8gdGhlIGFjdGl2ZSBET00gZWxlbWVudCwgd2UgbXVzdFxuICAvL1xuICAvLyAgIDEuIGV4ZWN1dGUgcGVuZGluZyBtb3VudGVkIGhvb2tzIGZvciBub2RlcyBub3cgaW4gdGhlIERPTVxuICAvLyAgIDIuIHVuZG8gYW55IHJlZiBpbnNpZGUgdGhlIGNsb25lZCB0cmVlIHRoYXQgaGFzIHNpbmNlIGJlZW4gYWNrJ2RcbiAgdW5kb0xvY2tzKHJlZiwgcGh4RXZlbnQsIGVhY2hDbG9uZUNhbGxiYWNrKXtcbiAgICBpZighdGhpcy5pc0xvY2tVbmRvbmVCeShyZWYpKXsgcmV0dXJuIH1cblxuICAgIGxldCBjbG9uZWRUcmVlID0gRE9NLnByaXZhdGUodGhpcy5lbCwgUEhYX1JFRl9MT0NLKVxuICAgIGlmKGNsb25lZFRyZWUpe1xuICAgICAgZWFjaENsb25lQ2FsbGJhY2soY2xvbmVkVHJlZSlcbiAgICAgIERPTS5kZWxldGVQcml2YXRlKHRoaXMuZWwsIFBIWF9SRUZfTE9DSylcbiAgICB9XG4gICAgdGhpcy5lbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRl9MT0NLKVxuXG4gICAgbGV0IG9wdHMgPSB7ZGV0YWlsOiB7cmVmOiByZWYsIGV2ZW50OiBwaHhFdmVudH0sIGJ1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IGZhbHNlfVxuICAgIHRoaXMuZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoYHBoeDp1bmRvLWxvY2s6JHt0aGlzLmxvY2tSZWZ9YCwgb3B0cykpXG4gIH1cblxuICB1bmRvTG9hZGluZyhyZWYsIHBoeEV2ZW50KXtcbiAgICBpZighdGhpcy5pc0xvYWRpbmdVbmRvbmVCeShyZWYpKXtcbiAgICAgIGlmKHRoaXMuY2FuVW5kb0xvYWRpbmcocmVmKSAmJiB0aGlzLmVsLmNsYXNzTGlzdC5jb250YWlucyhcInBoeC1zdWJtaXQtbG9hZGluZ1wiKSl7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZShcInBoeC1jaGFuZ2UtbG9hZGluZ1wiKVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYodGhpcy5jYW5VbmRvTG9hZGluZyhyZWYpKXtcbiAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfTE9BRElORylcbiAgICAgIGxldCBkaXNhYmxlZFZhbCA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFRClcbiAgICAgIGxldCByZWFkT25seVZhbCA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9SRUFET05MWSlcbiAgICAgIC8vIHJlc3RvcmUgaW5wdXRzXG4gICAgICBpZihyZWFkT25seVZhbCAhPT0gbnVsbCl7XG4gICAgICAgIHRoaXMuZWwucmVhZE9ubHkgPSByZWFkT25seVZhbCA9PT0gXCJ0cnVlXCIgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFQURPTkxZKVxuICAgICAgfVxuICAgICAgaWYoZGlzYWJsZWRWYWwgIT09IG51bGwpe1xuICAgICAgICB0aGlzLmVsLmRpc2FibGVkID0gZGlzYWJsZWRWYWwgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9ESVNBQkxFRClcbiAgICAgIH1cbiAgICAgIC8vIHJlc3RvcmUgZGlzYWJsZXNcbiAgICAgIGxldCBkaXNhYmxlUmVzdG9yZSA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSlcbiAgICAgIGlmKGRpc2FibGVSZXN0b3JlICE9PSBudWxsKXtcbiAgICAgICAgdGhpcy5lbC5pbm5lclRleHQgPSBkaXNhYmxlUmVzdG9yZVxuICAgICAgICB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUpXG4gICAgICB9XG5cbiAgICAgIGxldCBvcHRzID0ge2RldGFpbDoge3JlZjogcmVmLCBldmVudDogcGh4RXZlbnR9LCBidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiBmYWxzZX1cbiAgICAgIHRoaXMuZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoYHBoeDp1bmRvLWxvYWRpbmc6JHt0aGlzLmxvYWRpbmdSZWZ9YCwgb3B0cykpXG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGNsYXNzZXNcbiAgICBQSFhfRVZFTlRfQ0xBU1NFUy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgaWYobmFtZSAhPT0gXCJwaHgtc3VibWl0LWxvYWRpbmdcIiB8fCB0aGlzLmNhblVuZG9Mb2FkaW5nKHJlZikpe1xuICAgICAgICBET00ucmVtb3ZlQ2xhc3ModGhpcy5lbCwgbmFtZSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgaXNMb2FkaW5nVW5kb25lQnkocmVmKXsgcmV0dXJuIHRoaXMubG9hZGluZ1JlZiA9PT0gbnVsbCA/IGZhbHNlIDogdGhpcy5sb2FkaW5nUmVmIDw9IHJlZiB9XG4gIGlzTG9ja1VuZG9uZUJ5KHJlZil7IHJldHVybiB0aGlzLmxvY2tSZWYgPT09IG51bGwgPyBmYWxzZSA6IHRoaXMubG9ja1JlZiA8PSByZWYgfVxuXG4gIGlzRnVsbHlSZXNvbHZlZEJ5KHJlZil7XG4gICAgcmV0dXJuICh0aGlzLmxvYWRpbmdSZWYgPT09IG51bGwgfHwgdGhpcy5sb2FkaW5nUmVmIDw9IHJlZikgJiYgKHRoaXMubG9ja1JlZiA9PT0gbnVsbCB8fCB0aGlzLmxvY2tSZWYgPD0gcmVmKVxuICB9XG5cbiAgLy8gb25seSByZW1vdmUgdGhlIHBoeC1zdWJtaXQtbG9hZGluZyBjbGFzcyBpZiB3ZSBhcmUgbm90IGxvY2tlZFxuICBjYW5VbmRvTG9hZGluZyhyZWYpeyByZXR1cm4gdGhpcy5sb2NrUmVmID09PSBudWxsIHx8IHRoaXMubG9ja1JlZiA8PSByZWYgfVxufVxuIiwgImltcG9ydCB7XG4gIG1heWJlXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBET01Qb3N0TW9ycGhSZXN0b3JlciB7XG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lckJlZm9yZSwgY29udGFpbmVyQWZ0ZXIsIHVwZGF0ZVR5cGUpe1xuICAgIGxldCBpZHNCZWZvcmUgPSBuZXcgU2V0KClcbiAgICBsZXQgaWRzQWZ0ZXIgPSBuZXcgU2V0KFsuLi5jb250YWluZXJBZnRlci5jaGlsZHJlbl0ubWFwKGNoaWxkID0+IGNoaWxkLmlkKSlcblxuICAgIGxldCBlbGVtZW50c1RvTW9kaWZ5ID0gW11cblxuICAgIEFycmF5LmZyb20oY29udGFpbmVyQmVmb3JlLmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIGlmKGNoaWxkLmlkKXsgLy8gYWxsIG9mIG91ciBjaGlsZHJlbiBzaG91bGQgYmUgZWxlbWVudHMgd2l0aCBpZHNcbiAgICAgICAgaWRzQmVmb3JlLmFkZChjaGlsZC5pZClcbiAgICAgICAgaWYoaWRzQWZ0ZXIuaGFzKGNoaWxkLmlkKSl7XG4gICAgICAgICAgbGV0IHByZXZpb3VzRWxlbWVudElkID0gY2hpbGQucHJldmlvdXNFbGVtZW50U2libGluZyAmJiBjaGlsZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmlkXG4gICAgICAgICAgZWxlbWVudHNUb01vZGlmeS5wdXNoKHtlbGVtZW50SWQ6IGNoaWxkLmlkLCBwcmV2aW91c0VsZW1lbnRJZDogcHJldmlvdXNFbGVtZW50SWR9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuY29udGFpbmVySWQgPSBjb250YWluZXJBZnRlci5pZFxuICAgIHRoaXMudXBkYXRlVHlwZSA9IHVwZGF0ZVR5cGVcbiAgICB0aGlzLmVsZW1lbnRzVG9Nb2RpZnkgPSBlbGVtZW50c1RvTW9kaWZ5XG4gICAgdGhpcy5lbGVtZW50SWRzVG9BZGQgPSBbLi4uaWRzQWZ0ZXJdLmZpbHRlcihpZCA9PiAhaWRzQmVmb3JlLmhhcyhpZCkpXG4gIH1cblxuICAvLyBXZSBkbyB0aGUgZm9sbG93aW5nIHRvIG9wdGltaXplIGFwcGVuZC9wcmVwZW5kIG9wZXJhdGlvbnM6XG4gIC8vICAgMSkgVHJhY2sgaWRzIG9mIG1vZGlmaWVkIGVsZW1lbnRzICYgb2YgbmV3IGVsZW1lbnRzXG4gIC8vICAgMikgQWxsIHRoZSBtb2RpZmllZCBlbGVtZW50cyBhcmUgcHV0IGJhY2sgaW4gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIERPTSB0cmVlXG4gIC8vICAgICAgYnkgc3RvcmluZyB0aGUgaWQgb2YgdGhlaXIgcHJldmlvdXMgc2libGluZ1xuICAvLyAgIDMpIE5ldyBlbGVtZW50cyBhcmUgZ29pbmcgdG8gYmUgcHV0IGluIHRoZSByaWdodCBwbGFjZSBieSBtb3JwaGRvbSBkdXJpbmcgYXBwZW5kLlxuICAvLyAgICAgIEZvciBwcmVwZW5kLCB3ZSBtb3ZlIHRoZW0gdG8gdGhlIGZpcnN0IHBvc2l0aW9uIGluIHRoZSBjb250YWluZXJcbiAgcGVyZm9ybSgpe1xuICAgIGxldCBjb250YWluZXIgPSBET00uYnlJZCh0aGlzLmNvbnRhaW5lcklkKVxuICAgIHRoaXMuZWxlbWVudHNUb01vZGlmeS5mb3JFYWNoKGVsZW1lbnRUb01vZGlmeSA9PiB7XG4gICAgICBpZihlbGVtZW50VG9Nb2RpZnkucHJldmlvdXNFbGVtZW50SWQpe1xuICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50VG9Nb2RpZnkucHJldmlvdXNFbGVtZW50SWQpLCBwcmV2aW91c0VsZW0gPT4ge1xuICAgICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRUb01vZGlmeS5lbGVtZW50SWQpLCBlbGVtID0+IHtcbiAgICAgICAgICAgIGxldCBpc0luUmlnaHRQbGFjZSA9IGVsZW0ucHJldmlvdXNFbGVtZW50U2libGluZyAmJiBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuaWQgPT0gcHJldmlvdXNFbGVtLmlkXG4gICAgICAgICAgICBpZighaXNJblJpZ2h0UGxhY2Upe1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW0uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJlbmRcIiwgZWxlbSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgY29udGFpbmVyXG4gICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRUb01vZGlmeS5lbGVtZW50SWQpLCBlbGVtID0+IHtcbiAgICAgICAgICBsZXQgaXNJblJpZ2h0UGxhY2UgPSBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgPT0gbnVsbFxuICAgICAgICAgIGlmKCFpc0luUmlnaHRQbGFjZSl7XG4gICAgICAgICAgICBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJiZWdpblwiLCBlbGVtKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYodGhpcy51cGRhdGVUeXBlID09IFwicHJlcGVuZFwiKXtcbiAgICAgIHRoaXMuZWxlbWVudElkc1RvQWRkLnJldmVyc2UoKS5mb3JFYWNoKGVsZW1JZCA9PiB7XG4gICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1JZCksIGVsZW0gPT4gY29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIiwgZWxlbSkpXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuIiwgInZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFID0gMTE7XG5cbmZ1bmN0aW9uIG1vcnBoQXR0cnMoZnJvbU5vZGUsIHRvTm9kZSkge1xuICAgIHZhciB0b05vZGVBdHRycyA9IHRvTm9kZS5hdHRyaWJ1dGVzO1xuICAgIHZhciBhdHRyO1xuICAgIHZhciBhdHRyTmFtZTtcbiAgICB2YXIgYXR0ck5hbWVzcGFjZVVSSTtcbiAgICB2YXIgYXR0clZhbHVlO1xuICAgIHZhciBmcm9tVmFsdWU7XG5cbiAgICAvLyBkb2N1bWVudC1mcmFnbWVudHMgZG9udCBoYXZlIGF0dHJpYnV0ZXMgc28gbGV0cyBub3QgZG8gYW55dGhpbmdcbiAgICBpZiAodG9Ob2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFIHx8IGZyb21Ob2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGF0dHJpYnV0ZXMgb24gb3JpZ2luYWwgRE9NIGVsZW1lbnRcbiAgICBmb3IgKHZhciBpID0gdG9Ob2RlQXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgYXR0ciA9IHRvTm9kZUF0dHJzW2ldO1xuICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgYXR0ck5hbWVzcGFjZVVSSSA9IGF0dHIubmFtZXNwYWNlVVJJO1xuICAgICAgICBhdHRyVmFsdWUgPSBhdHRyLnZhbHVlO1xuXG4gICAgICAgIGlmIChhdHRyTmFtZXNwYWNlVVJJKSB7XG4gICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubG9jYWxOYW1lIHx8IGF0dHJOYW1lO1xuICAgICAgICAgICAgZnJvbVZhbHVlID0gZnJvbU5vZGUuZ2V0QXR0cmlidXRlTlMoYXR0ck5hbWVzcGFjZVVSSSwgYXR0ck5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoZnJvbVZhbHVlICE9PSBhdHRyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0ci5wcmVmaXggPT09ICd4bWxucycpe1xuICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTsgLy8gSXQncyBub3QgYWxsb3dlZCB0byBzZXQgYW4gYXR0cmlidXRlIHdpdGggdGhlIFhNTE5TIG5hbWVzcGFjZSB3aXRob3V0IHNwZWNpZnlpbmcgdGhlIGB4bWxuc2AgcHJlZml4XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnNldEF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJvbVZhbHVlID0gZnJvbU5vZGUuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGZyb21WYWx1ZSAhPT0gYXR0clZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZnJvbU5vZGUuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGFueSBleHRyYSBhdHRyaWJ1dGVzIGZvdW5kIG9uIHRoZSBvcmlnaW5hbCBET00gZWxlbWVudCB0aGF0XG4gICAgLy8gd2VyZW4ndCBmb3VuZCBvbiB0aGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAgdmFyIGZyb21Ob2RlQXR0cnMgPSBmcm9tTm9kZS5hdHRyaWJ1dGVzO1xuXG4gICAgZm9yICh2YXIgZCA9IGZyb21Ob2RlQXR0cnMubGVuZ3RoIC0gMTsgZCA+PSAwOyBkLS0pIHtcbiAgICAgICAgYXR0ciA9IGZyb21Ob2RlQXR0cnNbZF07XG4gICAgICAgIGF0dHJOYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICBhdHRyTmFtZXNwYWNlVVJJID0gYXR0ci5uYW1lc3BhY2VVUkk7XG5cbiAgICAgICAgaWYgKGF0dHJOYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgICAgIGF0dHJOYW1lID0gYXR0ci5sb2NhbE5hbWUgfHwgYXR0ck5hbWU7XG5cbiAgICAgICAgICAgIGlmICghdG9Ob2RlLmhhc0F0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnJlbW92ZUF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdG9Ob2RlLmhhc0F0dHJpYnV0ZShhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG52YXIgcmFuZ2U7IC8vIENyZWF0ZSBhIHJhbmdlIG9iamVjdCBmb3IgZWZmaWNlbnRseSByZW5kZXJpbmcgc3RyaW5ncyB0byBlbGVtZW50cy5cbnZhciBOU19YSFRNTCA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJztcblxudmFyIGRvYyA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBkb2N1bWVudDtcbnZhciBIQVNfVEVNUExBVEVfU1VQUE9SVCA9ICEhZG9jICYmICdjb250ZW50JyBpbiBkb2MuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbnZhciBIQVNfUkFOR0VfU1VQUE9SVCA9ICEhZG9jICYmIGRvYy5jcmVhdGVSYW5nZSAmJiAnY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50JyBpbiBkb2MuY3JlYXRlUmFuZ2UoKTtcblxuZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRGcm9tVGVtcGxhdGUoc3RyKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gc3RyO1xuICAgIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVJhbmdlKHN0cikge1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgICAgcmFuZ2UgPSBkb2MuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZShkb2MuYm9keSk7XG4gICAgfVxuXG4gICAgdmFyIGZyYWdtZW50ID0gcmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHN0cik7XG4gICAgcmV0dXJuIGZyYWdtZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVdyYXAoc3RyKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTtcbiAgICBmcmFnbWVudC5pbm5lckhUTUwgPSBzdHI7XG4gICAgcmV0dXJuIGZyYWdtZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbi8qKlxuICogVGhpcyBpcyBhYm91dCB0aGUgc2FtZVxuICogdmFyIGh0bWwgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHN0ciwgJ3RleHQvaHRtbCcpO1xuICogcmV0dXJuIGh0bWwuYm9keS5maXJzdENoaWxkO1xuICpcbiAqIEBtZXRob2QgdG9FbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKi9cbmZ1bmN0aW9uIHRvRWxlbWVudChzdHIpIHtcbiAgICBzdHIgPSBzdHIudHJpbSgpO1xuICAgIGlmIChIQVNfVEVNUExBVEVfU1VQUE9SVCkge1xuICAgICAgLy8gYXZvaWQgcmVzdHJpY3Rpb25zIG9uIGNvbnRlbnQgZm9yIHRoaW5ncyBsaWtlIGA8dHI+PHRoPkhpPC90aD48L3RyPmAgd2hpY2hcbiAgICAgIC8vIGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCBkb2Vzbid0IHN1cHBvcnRcbiAgICAgIC8vIDx0ZW1wbGF0ZT4gc3VwcG9ydCBub3QgYXZhaWxhYmxlIGluIElFXG4gICAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnRGcm9tVGVtcGxhdGUoc3RyKTtcbiAgICB9IGVsc2UgaWYgKEhBU19SQU5HRV9TVVBQT1JUKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnRGcm9tUmFuZ2Uoc3RyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnRGcm9tV3JhcChzdHIpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0d28gbm9kZSdzIG5hbWVzIGFyZSB0aGUgc2FtZS5cbiAqXG4gKiBOT1RFOiBXZSBkb24ndCBib3RoZXIgY2hlY2tpbmcgYG5hbWVzcGFjZVVSSWAgYmVjYXVzZSB5b3Ugd2lsbCBuZXZlciBmaW5kIHR3byBIVE1MIGVsZW1lbnRzIHdpdGggdGhlIHNhbWVcbiAqICAgICAgIG5vZGVOYW1lIGFuZCBkaWZmZXJlbnQgbmFtZXNwYWNlIFVSSXMuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGIgVGhlIHRhcmdldCBlbGVtZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjb21wYXJlTm9kZU5hbWVzKGZyb21FbCwgdG9FbCkge1xuICAgIHZhciBmcm9tTm9kZU5hbWUgPSBmcm9tRWwubm9kZU5hbWU7XG4gICAgdmFyIHRvTm9kZU5hbWUgPSB0b0VsLm5vZGVOYW1lO1xuICAgIHZhciBmcm9tQ29kZVN0YXJ0LCB0b0NvZGVTdGFydDtcblxuICAgIGlmIChmcm9tTm9kZU5hbWUgPT09IHRvTm9kZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnJvbUNvZGVTdGFydCA9IGZyb21Ob2RlTmFtZS5jaGFyQ29kZUF0KDApO1xuICAgIHRvQ29kZVN0YXJ0ID0gdG9Ob2RlTmFtZS5jaGFyQ29kZUF0KDApO1xuXG4gICAgLy8gSWYgdGhlIHRhcmdldCBlbGVtZW50IGlzIGEgdmlydHVhbCBET00gbm9kZSBvciBTVkcgbm9kZSB0aGVuIHdlIG1heVxuICAgIC8vIG5lZWQgdG8gbm9ybWFsaXplIHRoZSB0YWcgbmFtZSBiZWZvcmUgY29tcGFyaW5nLiBOb3JtYWwgSFRNTCBlbGVtZW50cyB0aGF0IGFyZVxuICAgIC8vIGluIHRoZSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIlxuICAgIC8vIGFyZSBjb252ZXJ0ZWQgdG8gdXBwZXIgY2FzZVxuICAgIGlmIChmcm9tQ29kZVN0YXJ0IDw9IDkwICYmIHRvQ29kZVN0YXJ0ID49IDk3KSB7IC8vIGZyb20gaXMgdXBwZXIgYW5kIHRvIGlzIGxvd2VyXG4gICAgICAgIHJldHVybiBmcm9tTm9kZU5hbWUgPT09IHRvTm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICB9IGVsc2UgaWYgKHRvQ29kZVN0YXJ0IDw9IDkwICYmIGZyb21Db2RlU3RhcnQgPj0gOTcpIHsgLy8gdG8gaXMgdXBwZXIgYW5kIGZyb20gaXMgbG93ZXJcbiAgICAgICAgcmV0dXJuIHRvTm9kZU5hbWUgPT09IGZyb21Ob2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGVsZW1lbnQsIG9wdGlvbmFsbHkgd2l0aCBhIGtub3duIG5hbWVzcGFjZSBVUkkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdGhlIGVsZW1lbnQgbmFtZSwgZS5nLiAnZGl2JyBvciAnc3ZnJ1xuICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lc3BhY2VVUkldIHRoZSBlbGVtZW50J3MgbmFtZXNwYWNlIFVSSSwgaS5lLiB0aGUgdmFsdWUgb2ZcbiAqIGl0cyBgeG1sbnNgIGF0dHJpYnV0ZSBvciBpdHMgaW5mZXJyZWQgbmFtZXNwYWNlLlxuICpcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyhuYW1lLCBuYW1lc3BhY2VVUkkpIHtcbiAgICByZXR1cm4gIW5hbWVzcGFjZVVSSSB8fCBuYW1lc3BhY2VVUkkgPT09IE5TX1hIVE1MID9cbiAgICAgICAgZG9jLmNyZWF0ZUVsZW1lbnQobmFtZSkgOlxuICAgICAgICBkb2MuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZVVSSSwgbmFtZSk7XG59XG5cbi8qKlxuICogQ29waWVzIHRoZSBjaGlsZHJlbiBvZiBvbmUgRE9NIGVsZW1lbnQgdG8gYW5vdGhlciBET00gZWxlbWVudFxuICovXG5mdW5jdGlvbiBtb3ZlQ2hpbGRyZW4oZnJvbUVsLCB0b0VsKSB7XG4gICAgdmFyIGN1ckNoaWxkID0gZnJvbUVsLmZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKGN1ckNoaWxkKSB7XG4gICAgICAgIHZhciBuZXh0Q2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgdG9FbC5hcHBlbmRDaGlsZChjdXJDaGlsZCk7XG4gICAgICAgIGN1ckNoaWxkID0gbmV4dENoaWxkO1xuICAgIH1cbiAgICByZXR1cm4gdG9FbDtcbn1cblxuZnVuY3Rpb24gc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsIG5hbWUpIHtcbiAgICBpZiAoZnJvbUVsW25hbWVdICE9PSB0b0VsW25hbWVdKSB7XG4gICAgICAgIGZyb21FbFtuYW1lXSA9IHRvRWxbbmFtZV07XG4gICAgICAgIGlmIChmcm9tRWxbbmFtZV0pIHtcbiAgICAgICAgICAgIGZyb21FbC5zZXRBdHRyaWJ1dGUobmFtZSwgJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJvbUVsLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIHNwZWNpYWxFbEhhbmRsZXJzID0ge1xuICAgIE9QVElPTjogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIHZhciBwYXJlbnROb2RlID0gZnJvbUVsLnBhcmVudE5vZGU7XG4gICAgICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50TmFtZSA9IHBhcmVudE5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnROYW1lID09PSAnT1BUR1JPVVAnKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBwYXJlbnROYW1lID0gcGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyZW50TmFtZSA9PT0gJ1NFTEVDVCcgJiYgIXBhcmVudE5vZGUuaGFzQXR0cmlidXRlKCdtdWx0aXBsZScpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZyb21FbC5oYXNBdHRyaWJ1dGUoJ3NlbGVjdGVkJykgJiYgIXRvRWwuc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgTVMgRWRnZSBidWcgd2hlcmUgdGhlICdzZWxlY3RlZCcgYXR0cmlidXRlIGNhbiBvbmx5IGJlXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZWQgaWYgc2V0IHRvIGEgbm9uLWVtcHR5IHZhbHVlOlxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xMjA4NzY3OS9cbiAgICAgICAgICAgICAgICAgICAgZnJvbUVsLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVsLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byByZXNldCBzZWxlY3QgZWxlbWVudCdzIHNlbGVjdGVkSW5kZXggdG8gLTEsIG90aGVyd2lzZSBzZXR0aW5nXG4gICAgICAgICAgICAgICAgLy8gZnJvbUVsLnNlbGVjdGVkIHVzaW5nIHRoZSBzeW5jQm9vbGVhbkF0dHJQcm9wIGJlbG93IGhhcyBubyBlZmZlY3QuXG4gICAgICAgICAgICAgICAgLy8gVGhlIGNvcnJlY3Qgc2VsZWN0ZWRJbmRleCB3aWxsIGJlIHNldCBpbiB0aGUgU0VMRUNUIHNwZWNpYWwgaGFuZGxlciBiZWxvdy5cbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ3NlbGVjdGVkJyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUaGUgXCJ2YWx1ZVwiIGF0dHJpYnV0ZSBpcyBzcGVjaWFsIGZvciB0aGUgPGlucHV0PiBlbGVtZW50IHNpbmNlIGl0IHNldHNcbiAgICAgKiB0aGUgaW5pdGlhbCB2YWx1ZS4gQ2hhbmdpbmcgdGhlIFwidmFsdWVcIiBhdHRyaWJ1dGUgd2l0aG91dCBjaGFuZ2luZyB0aGVcbiAgICAgKiBcInZhbHVlXCIgcHJvcGVydHkgd2lsbCBoYXZlIG5vIGVmZmVjdCBzaW5jZSBpdCBpcyBvbmx5IHVzZWQgdG8gdGhlIHNldCB0aGVcbiAgICAgKiBpbml0aWFsIHZhbHVlLiAgU2ltaWxhciBmb3IgdGhlIFwiY2hlY2tlZFwiIGF0dHJpYnV0ZSwgYW5kIFwiZGlzYWJsZWRcIi5cbiAgICAgKi9cbiAgICBJTlBVVDogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCAnY2hlY2tlZCcpO1xuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ2Rpc2FibGVkJyk7XG5cbiAgICAgICAgaWYgKGZyb21FbC52YWx1ZSAhPT0gdG9FbC52YWx1ZSkge1xuICAgICAgICAgICAgZnJvbUVsLnZhbHVlID0gdG9FbC52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdG9FbC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgVEVYVEFSRUE6IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSB0b0VsLnZhbHVlO1xuICAgICAgICBpZiAoZnJvbUVsLnZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgZnJvbUVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgICBpZiAoZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgLy8gTmVlZGVkIGZvciBJRS4gQXBwYXJlbnRseSBJRSBzZXRzIHRoZSBwbGFjZWhvbGRlciBhcyB0aGVcbiAgICAgICAgICAgIC8vIG5vZGUgdmFsdWUgYW5kIHZpc2UgdmVyc2EuIFRoaXMgaWdub3JlcyBhbiBlbXB0eSB1cGRhdGUuXG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSBmaXJzdENoaWxkLm5vZGVWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09IG5ld1ZhbHVlIHx8ICghbmV3VmFsdWUgJiYgb2xkVmFsdWUgPT0gZnJvbUVsLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgU0VMRUNUOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgaWYgKCF0b0VsLmhhc0F0dHJpYnV0ZSgnbXVsdGlwbGUnKSkge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gbG9vcCB0aHJvdWdoIGNoaWxkcmVuIG9mIGZyb21FbCwgbm90IHRvRWwgc2luY2Ugbm9kZXMgY2FuIGJlIG1vdmVkXG4gICAgICAgICAgICAvLyBmcm9tIHRvRWwgdG8gZnJvbUVsIGRpcmVjdGx5IHdoZW4gbW9ycGhpbmcuXG4gICAgICAgICAgICAvLyBBdCB0aGUgdGltZSB0aGlzIHNwZWNpYWwgaGFuZGxlciBpcyBpbnZva2VkLCBhbGwgY2hpbGRyZW4gaGF2ZSBhbHJlYWR5IGJlZW4gbW9ycGhlZFxuICAgICAgICAgICAgLy8gYW5kIGFwcGVuZGVkIHRvIC8gcmVtb3ZlZCBmcm9tIGZyb21FbCwgc28gdXNpbmcgZnJvbUVsIGhlcmUgaXMgc2FmZSBhbmQgY29ycmVjdC5cbiAgICAgICAgICAgIHZhciBjdXJDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgICAgICAgdmFyIG9wdGdyb3VwO1xuICAgICAgICAgICAgdmFyIG5vZGVOYW1lO1xuICAgICAgICAgICAgd2hpbGUoY3VyQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICBub2RlTmFtZSA9IGN1ckNoaWxkLm5vZGVOYW1lICYmIGN1ckNoaWxkLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lID09PSAnT1BUR1JPVVAnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwID0gY3VyQ2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gb3B0Z3JvdXAuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZU5hbWUgPT09ICdPUFRJT04nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ2hpbGQuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJDaGlsZCAmJiBvcHRncm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBvcHRncm91cC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnJvbUVsLnNlbGVjdGVkSW5kZXggPSBzZWxlY3RlZEluZGV4O1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIEVMRU1FTlRfTk9ERSA9IDE7XG52YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSQxID0gMTE7XG52YXIgVEVYVF9OT0RFID0gMztcbnZhciBDT01NRU5UX05PREUgPSA4O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZGVmYXVsdEdldE5vZGVLZXkobm9kZSkge1xuICBpZiAobm9kZSkge1xuICAgIHJldHVybiAobm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJykpIHx8IG5vZGUuaWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbW9ycGhkb21GYWN0b3J5KG1vcnBoQXR0cnMpIHtcblxuICByZXR1cm4gZnVuY3Rpb24gbW9ycGhkb20oZnJvbU5vZGUsIHRvTm9kZSwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdG9Ob2RlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGZyb21Ob2RlLm5vZGVOYW1lID09PSAnI2RvY3VtZW50JyB8fCBmcm9tTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGZyb21Ob2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgdmFyIHRvTm9kZUh0bWwgPSB0b05vZGU7XG4gICAgICAgIHRvTm9kZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdodG1sJyk7XG4gICAgICAgIHRvTm9kZS5pbm5lckhUTUwgPSB0b05vZGVIdG1sO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9Ob2RlID0gdG9FbGVtZW50KHRvTm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0b05vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUkMSkge1xuICAgICAgdG9Ob2RlID0gdG9Ob2RlLmZpcnN0RWxlbWVudENoaWxkO1xuICAgIH1cblxuICAgIHZhciBnZXROb2RlS2V5ID0gb3B0aW9ucy5nZXROb2RlS2V5IHx8IGRlZmF1bHRHZXROb2RlS2V5O1xuICAgIHZhciBvbkJlZm9yZU5vZGVBZGRlZCA9IG9wdGlvbnMub25CZWZvcmVOb2RlQWRkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25Ob2RlQWRkZWQgPSBvcHRpb25zLm9uTm9kZUFkZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlRWxVcGRhdGVkID0gb3B0aW9ucy5vbkJlZm9yZUVsVXBkYXRlZCB8fCBub29wO1xuICAgIHZhciBvbkVsVXBkYXRlZCA9IG9wdGlvbnMub25FbFVwZGF0ZWQgfHwgbm9vcDtcbiAgICB2YXIgb25CZWZvcmVOb2RlRGlzY2FyZGVkID0gb3B0aW9ucy5vbkJlZm9yZU5vZGVEaXNjYXJkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25Ob2RlRGlzY2FyZGVkID0gb3B0aW9ucy5vbk5vZGVEaXNjYXJkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZCA9IG9wdGlvbnMub25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZCB8fCBub29wO1xuICAgIHZhciBza2lwRnJvbUNoaWxkcmVuID0gb3B0aW9ucy5za2lwRnJvbUNoaWxkcmVuIHx8IG5vb3A7XG4gICAgdmFyIGFkZENoaWxkID0gb3B0aW9ucy5hZGRDaGlsZCB8fCBmdW5jdGlvbihwYXJlbnQsIGNoaWxkKXsgcmV0dXJuIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7IH07XG4gICAgdmFyIGNoaWxkcmVuT25seSA9IG9wdGlvbnMuY2hpbGRyZW5Pbmx5ID09PSB0cnVlO1xuXG4gICAgLy8gVGhpcyBvYmplY3QgaXMgdXNlZCBhcyBhIGxvb2t1cCB0byBxdWlja2x5IGZpbmQgYWxsIGtleWVkIGVsZW1lbnRzIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZS5cbiAgICB2YXIgZnJvbU5vZGVzTG9va3VwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5ZWRSZW1vdmFsTGlzdCA9IFtdO1xuXG4gICAgZnVuY3Rpb24gYWRkS2V5ZWRSZW1vdmFsKGtleSkge1xuICAgICAga2V5ZWRSZW1vdmFsTGlzdC5wdXNoKGtleSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMobm9kZSwgc2tpcEtleWVkTm9kZXMpIHtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgdmFyIGN1ckNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcblxuICAgICAgICAgIHZhciBrZXkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoc2tpcEtleWVkTm9kZXMgJiYgKGtleSA9IGdldE5vZGVLZXkoY3VyQ2hpbGQpKSkge1xuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIHNraXBwaW5nIGtleWVkIG5vZGVzIHRoZW4gd2UgYWRkIHRoZSBrZXlcbiAgICAgICAgICAgIC8vIHRvIGEgbGlzdCBzbyB0aGF0IGl0IGNhbiBiZSBoYW5kbGVkIGF0IHRoZSB2ZXJ5IGVuZC5cbiAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChrZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBPbmx5IHJlcG9ydCB0aGUgbm9kZSBhcyBkaXNjYXJkZWQgaWYgaXQgaXMgbm90IGtleWVkLiBXZSBkbyB0aGlzIGJlY2F1c2VcbiAgICAgICAgICAgIC8vIGF0IHRoZSBlbmQgd2UgbG9vcCB0aHJvdWdoIGFsbCBrZXllZCBlbGVtZW50cyB0aGF0IHdlcmUgdW5tYXRjaGVkXG4gICAgICAgICAgICAvLyBhbmQgdGhlbiBkaXNjYXJkIHRoZW0gaW4gb25lIGZpbmFsIHBhc3MuXG4gICAgICAgICAgICBvbk5vZGVEaXNjYXJkZWQoY3VyQ2hpbGQpO1xuICAgICAgICAgICAgaWYgKGN1ckNoaWxkLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMoY3VyQ2hpbGQsIHNraXBLZXllZE5vZGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBSZW1vdmVzIGEgRE9NIG5vZGUgb3V0IG9mIHRoZSBvcmlnaW5hbCBET01cbiAgICAqXG4gICAgKiBAcGFyYW0gIHtOb2RlfSBub2RlIFRoZSBub2RlIHRvIHJlbW92ZVxuICAgICogQHBhcmFtICB7Tm9kZX0gcGFyZW50Tm9kZSBUaGUgbm9kZXMgcGFyZW50XG4gICAgKiBAcGFyYW0gIHtCb29sZWFufSBza2lwS2V5ZWROb2RlcyBJZiB0cnVlIHRoZW4gZWxlbWVudHMgd2l0aCBrZXlzIHdpbGwgYmUgc2tpcHBlZCBhbmQgbm90IGRpc2NhcmRlZC5cbiAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZU5vZGUobm9kZSwgcGFyZW50Tm9kZSwgc2tpcEtleWVkTm9kZXMpIHtcbiAgICAgIGlmIChvbkJlZm9yZU5vZGVEaXNjYXJkZWQobm9kZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH1cblxuICAgICAgb25Ob2RlRGlzY2FyZGVkKG5vZGUpO1xuICAgICAgd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMobm9kZSwgc2tpcEtleWVkTm9kZXMpO1xuICAgIH1cblxuICAgIC8vIC8vIFRyZWVXYWxrZXIgaW1wbGVtZW50YXRpb24gaXMgbm8gZmFzdGVyLCBidXQga2VlcGluZyB0aGlzIGFyb3VuZCBpbiBjYXNlIHRoaXMgY2hhbmdlcyBpbiB0aGUgZnV0dXJlXG4gICAgLy8gZnVuY3Rpb24gaW5kZXhUcmVlKHJvb3QpIHtcbiAgICAvLyAgICAgdmFyIHRyZWVXYWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKFxuICAgIC8vICAgICAgICAgcm9vdCxcbiAgICAvLyAgICAgICAgIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5UKTtcbiAgICAvL1xuICAgIC8vICAgICB2YXIgZWw7XG4gICAgLy8gICAgIHdoaWxlKChlbCA9IHRyZWVXYWxrZXIubmV4dE5vZGUoKSkpIHtcbiAgICAvLyAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGVsKTtcbiAgICAvLyAgICAgICAgIGlmIChrZXkpIHtcbiAgICAvLyAgICAgICAgICAgICBmcm9tTm9kZXNMb29rdXBba2V5XSA9IGVsO1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG4gICAgLy8gLy8gTm9kZUl0ZXJhdG9yIGltcGxlbWVudGF0aW9uIGlzIG5vIGZhc3RlciwgYnV0IGtlZXBpbmcgdGhpcyBhcm91bmQgaW4gY2FzZSB0aGlzIGNoYW5nZXMgaW4gdGhlIGZ1dHVyZVxuICAgIC8vXG4gICAgLy8gZnVuY3Rpb24gaW5kZXhUcmVlKG5vZGUpIHtcbiAgICAvLyAgICAgdmFyIG5vZGVJdGVyYXRvciA9IGRvY3VtZW50LmNyZWF0ZU5vZGVJdGVyYXRvcihub2RlLCBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCk7XG4gICAgLy8gICAgIHZhciBlbDtcbiAgICAvLyAgICAgd2hpbGUoKGVsID0gbm9kZUl0ZXJhdG9yLm5leHROb2RlKCkpKSB7XG4gICAgLy8gICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShlbCk7XG4gICAgLy8gICAgICAgICBpZiAoa2V5KSB7XG4gICAgLy8gICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBlbDtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIGZ1bmN0aW9uIGluZGV4VHJlZShub2RlKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFIHx8IG5vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUkMSkge1xuICAgICAgICB2YXIgY3VyQ2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKTtcbiAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBmcm9tTm9kZXNMb29rdXBba2V5XSA9IGN1ckNoaWxkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFdhbGsgcmVjdXJzaXZlbHlcbiAgICAgICAgICBpbmRleFRyZWUoY3VyQ2hpbGQpO1xuXG4gICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGluZGV4VHJlZShmcm9tTm9kZSk7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVOb2RlQWRkZWQoZWwpIHtcbiAgICAgIG9uTm9kZUFkZGVkKGVsKTtcblxuICAgICAgdmFyIGN1ckNoaWxkID0gZWwuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSBjdXJDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShjdXJDaGlsZCk7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICB2YXIgdW5tYXRjaGVkRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2tleV07XG4gICAgICAgICAgLy8gaWYgd2UgZmluZCBhIGR1cGxpY2F0ZSAjaWQgbm9kZSBpbiBjYWNoZSwgcmVwbGFjZSBgZWxgIHdpdGggY2FjaGUgdmFsdWVcbiAgICAgICAgICAvLyBhbmQgbW9ycGggaXQgdG8gdGhlIGNoaWxkIG5vZGUuXG4gICAgICAgICAgaWYgKHVubWF0Y2hlZEZyb21FbCAmJiBjb21wYXJlTm9kZU5hbWVzKGN1ckNoaWxkLCB1bm1hdGNoZWRGcm9tRWwpKSB7XG4gICAgICAgICAgICBjdXJDaGlsZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh1bm1hdGNoZWRGcm9tRWwsIGN1ckNoaWxkKTtcbiAgICAgICAgICAgIG1vcnBoRWwodW5tYXRjaGVkRnJvbUVsLCBjdXJDaGlsZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZU5vZGVBZGRlZChjdXJDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGNhbGwgZm9yIGN1ckNoaWxkIGFuZCBpdCdzIGNoaWxkcmVuIHRvIHNlZSBpZiB3ZSBmaW5kIHNvbWV0aGluZyBpblxuICAgICAgICAgIC8vIGZyb21Ob2Rlc0xvb2t1cFxuICAgICAgICAgIGhhbmRsZU5vZGVBZGRlZChjdXJDaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJDaGlsZCA9IG5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBGcm9tRWwoZnJvbUVsLCBjdXJGcm9tTm9kZUNoaWxkLCBjdXJGcm9tTm9kZUtleSkge1xuICAgICAgLy8gV2UgaGF2ZSBwcm9jZXNzZWQgYWxsIG9mIHRoZSBcInRvIG5vZGVzXCIuIElmIGN1ckZyb21Ob2RlQ2hpbGQgaXNcbiAgICAgIC8vIG5vbi1udWxsIHRoZW4gd2Ugc3RpbGwgaGF2ZSBzb21lIGZyb20gbm9kZXMgbGVmdCBvdmVyIHRoYXQgbmVlZFxuICAgICAgLy8gdG8gYmUgcmVtb3ZlZFxuICAgICAgd2hpbGUgKGN1ckZyb21Ob2RlQ2hpbGQpIHtcbiAgICAgICAgdmFyIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIGlmICgoY3VyRnJvbU5vZGVLZXkgPSBnZXROb2RlS2V5KGN1ckZyb21Ob2RlQ2hpbGQpKSkge1xuICAgICAgICAgIC8vIFNpbmNlIHRoZSBub2RlIGlzIGtleWVkIGl0IG1pZ2h0IGJlIG1hdGNoZWQgdXAgbGF0ZXIgc28gd2UgZGVmZXJcbiAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE5PVEU6IHdlIHNraXAgbmVzdGVkIGtleWVkIG5vZGVzIGZyb20gYmVpbmcgcmVtb3ZlZCBzaW5jZSB0aGVyZSBpc1xuICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgcmVtb3ZlTm9kZShjdXJGcm9tTm9kZUNoaWxkLCBmcm9tRWwsIHRydWUgLyogc2tpcCBrZXllZCBub2RlcyAqLyk7XG4gICAgICAgIH1cbiAgICAgICAgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21OZXh0U2libGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3JwaEVsKGZyb21FbCwgdG9FbCwgY2hpbGRyZW5Pbmx5KSB7XG4gICAgICB2YXIgdG9FbEtleSA9IGdldE5vZGVLZXkodG9FbCk7XG5cbiAgICAgIGlmICh0b0VsS2V5KSB7XG4gICAgICAgIC8vIElmIGFuIGVsZW1lbnQgd2l0aCBhbiBJRCBpcyBiZWluZyBtb3JwaGVkIHRoZW4gaXQgd2lsbCBiZSBpbiB0aGUgZmluYWxcbiAgICAgICAgLy8gRE9NIHNvIGNsZWFyIGl0IG91dCBvZiB0aGUgc2F2ZWQgZWxlbWVudHMgY29sbGVjdGlvblxuICAgICAgICBkZWxldGUgZnJvbU5vZGVzTG9va3VwW3RvRWxLZXldO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNoaWxkcmVuT25seSkge1xuICAgICAgICAvLyBvcHRpb25hbFxuICAgICAgICB2YXIgYmVmb3JlVXBkYXRlUmVzdWx0ID0gb25CZWZvcmVFbFVwZGF0ZWQoZnJvbUVsLCB0b0VsKTtcbiAgICAgICAgaWYgKGJlZm9yZVVwZGF0ZVJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoYmVmb3JlVXBkYXRlUmVzdWx0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICBmcm9tRWwgPSBiZWZvcmVVcGRhdGVSZXN1bHQ7XG4gICAgICAgICAgLy8gcmVpbmRleCB0aGUgbmV3IGZyb21FbCBpbiBjYXNlIGl0J3Mgbm90IGluIHRoZSBzYW1lXG4gICAgICAgICAgLy8gdHJlZSBhcyB0aGUgb3JpZ2luYWwgZnJvbUVsXG4gICAgICAgICAgLy8gKFBob2VuaXggTGl2ZVZpZXcgc29tZXRpbWVzIHJldHVybnMgYSBjbG9uZWQgdHJlZSxcbiAgICAgICAgICAvLyAgYnV0IGtleWVkIGxvb2t1cHMgd291bGQgc3RpbGwgcG9pbnQgdG8gdGhlIG9yaWdpbmFsIHRyZWUpXG4gICAgICAgICAgaW5kZXhUcmVlKGZyb21FbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgYXR0cmlidXRlcyBvbiBvcmlnaW5hbCBET00gZWxlbWVudCBmaXJzdFxuICAgICAgICBtb3JwaEF0dHJzKGZyb21FbCwgdG9FbCk7XG4gICAgICAgIC8vIG9wdGlvbmFsXG4gICAgICAgIG9uRWxVcGRhdGVkKGZyb21FbCk7XG5cbiAgICAgICAgaWYgKG9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQoZnJvbUVsLCB0b0VsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZyb21FbC5ub2RlTmFtZSAhPT0gJ1RFWFRBUkVBJykge1xuICAgICAgICBtb3JwaENoaWxkcmVuKGZyb21FbCwgdG9FbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGVjaWFsRWxIYW5kbGVycy5URVhUQVJFQShmcm9tRWwsIHRvRWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vcnBoQ2hpbGRyZW4oZnJvbUVsLCB0b0VsKSB7XG4gICAgICB2YXIgc2tpcEZyb20gPSBza2lwRnJvbUNoaWxkcmVuKGZyb21FbCwgdG9FbCk7XG4gICAgICB2YXIgY3VyVG9Ob2RlQ2hpbGQgPSB0b0VsLmZpcnN0Q2hpbGQ7XG4gICAgICB2YXIgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgdmFyIGN1clRvTm9kZUtleTtcbiAgICAgIHZhciBjdXJGcm9tTm9kZUtleTtcblxuICAgICAgdmFyIGZyb21OZXh0U2libGluZztcbiAgICAgIHZhciB0b05leHRTaWJsaW5nO1xuICAgICAgdmFyIG1hdGNoaW5nRnJvbUVsO1xuXG4gICAgICAvLyB3YWxrIHRoZSBjaGlsZHJlblxuICAgICAgb3V0ZXI6IHdoaWxlIChjdXJUb05vZGVDaGlsZCkge1xuICAgICAgICB0b05leHRTaWJsaW5nID0gY3VyVG9Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIGN1clRvTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyVG9Ob2RlQ2hpbGQpO1xuXG4gICAgICAgIC8vIHdhbGsgdGhlIGZyb21Ob2RlIGNoaWxkcmVuIGFsbCB0aGUgd2F5IHRocm91Z2hcbiAgICAgICAgd2hpbGUgKCFza2lwRnJvbSAmJiBjdXJGcm9tTm9kZUNoaWxkKSB7XG4gICAgICAgICAgZnJvbU5leHRTaWJsaW5nID0gY3VyRnJvbU5vZGVDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICAgIGlmIChjdXJUb05vZGVDaGlsZC5pc1NhbWVOb2RlICYmIGN1clRvTm9kZUNoaWxkLmlzU2FtZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCkpIHtcbiAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gdG9OZXh0U2libGluZztcbiAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJGcm9tTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyRnJvbU5vZGVDaGlsZCk7XG5cbiAgICAgICAgICB2YXIgY3VyRnJvbU5vZGVUeXBlID0gY3VyRnJvbU5vZGVDaGlsZC5ub2RlVHlwZTtcblxuICAgICAgICAgIC8vIHRoaXMgbWVhbnMgaWYgdGhlIGN1ckZyb21Ob2RlQ2hpbGQgZG9lc250IGhhdmUgYSBtYXRjaCB3aXRoIHRoZSBjdXJUb05vZGVDaGlsZFxuICAgICAgICAgIHZhciBpc0NvbXBhdGlibGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBjdXJUb05vZGVDaGlsZC5ub2RlVHlwZSkge1xuICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgIC8vIEJvdGggbm9kZXMgYmVpbmcgY29tcGFyZWQgYXJlIEVsZW1lbnQgbm9kZXNcblxuICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHRhcmdldCBub2RlIGhhcyBhIGtleSBzbyB3ZSB3YW50IHRvIG1hdGNoIGl0IHVwIHdpdGggdGhlIGNvcnJlY3QgZWxlbWVudFxuICAgICAgICAgICAgICAgIC8vIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZVxuICAgICAgICAgICAgICAgIGlmIChjdXJUb05vZGVLZXkgIT09IGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAvLyBUaGUgY3VycmVudCBlbGVtZW50IGluIHRoZSBvcmlnaW5hbCBET00gdHJlZSBkb2VzIG5vdCBoYXZlIGEgbWF0Y2hpbmcga2V5IHNvXG4gICAgICAgICAgICAgICAgICAvLyBsZXQncyBjaGVjayBvdXIgbG9va3VwIHRvIHNlZSBpZiB0aGVyZSBpcyBhIG1hdGNoaW5nIGVsZW1lbnQgaW4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgICAgICAvLyBET00gdHJlZVxuICAgICAgICAgICAgICAgICAgaWYgKChtYXRjaGluZ0Zyb21FbCA9IGZyb21Ob2Rlc0xvb2t1cFtjdXJUb05vZGVLZXldKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbU5leHRTaWJsaW5nID09PSBtYXRjaGluZ0Zyb21FbCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3Igc2luZ2xlIGVsZW1lbnQgcmVtb3ZhbHMuIFRvIGF2b2lkIHJlbW92aW5nIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgICAgICAgICAgIC8vIERPTSBub2RlIG91dCBvZiB0aGUgdHJlZSAoc2luY2UgdGhhdCBjYW4gYnJlYWsgQ1NTIHRyYW5zaXRpb25zLCBldGMuKSxcbiAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSB3aWxsIGluc3RlYWQgZGlzY2FyZCB0aGUgY3VycmVudCBub2RlIGFuZCB3YWl0IHVudGlsIHRoZSBuZXh0XG4gICAgICAgICAgICAgICAgICAgICAgLy8gaXRlcmF0aW9uIHRvIHByb3Blcmx5IG1hdGNoIHVwIHRoZSBrZXllZCB0YXJnZXQgZWxlbWVudCB3aXRoIGl0cyBtYXRjaGluZ1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgaW4gdGhlIG9yaWdpbmFsIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBmb3VuZCBhIG1hdGNoaW5nIGtleWVkIGVsZW1lbnQgc29tZXdoZXJlIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZS5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBMZXQncyBtb3ZlIHRoZSBvcmlnaW5hbCBET00gbm9kZSBpbnRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIGFuZCBtb3JwaFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGl0LlxuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogV2UgdXNlIGluc2VydEJlZm9yZSBpbnN0ZWFkIG9mIHJlcGxhY2VDaGlsZCBiZWNhdXNlIHdlIHdhbnQgdG8gZ28gdGhyb3VnaFxuICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBgcmVtb3ZlTm9kZSgpYCBmdW5jdGlvbiBmb3IgdGhlIG5vZGUgdGhhdCBpcyBiZWluZyBkaXNjYXJkZWQgc28gdGhhdFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGFsbCBsaWZlY3ljbGUgaG9va3MgYXJlIGNvcnJlY3RseSBpbnZva2VkXG4gICAgICAgICAgICAgICAgICAgICAgZnJvbUVsLmluc2VydEJlZm9yZShtYXRjaGluZ0Zyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBmcm9tTmV4dFNpYmxpbmcgPSBjdXJGcm9tTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgbm9kZSBpcyBrZXllZCBpdCBtaWdodCBiZSBtYXRjaGVkIHVwIGxhdGVyIHNvIHdlIGRlZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IHdlIHNraXAgbmVzdGVkIGtleWVkIG5vZGVzIGZyb20gYmVpbmcgcmVtb3ZlZCBzaW5jZSB0aGVyZSBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgc3RpbGwgYSBjaGFuY2UgdGhleSB3aWxsIGJlIG1hdGNoZWQgdXAgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCwgZnJvbUVsLCB0cnVlIC8qIHNraXAga2V5ZWQgbm9kZXMgKi8pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBtYXRjaGluZ0Zyb21FbDtcbiAgICAgICAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyRnJvbU5vZGVDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBub2RlcyBhcmUgbm90IGNvbXBhdGlibGUgc2luY2UgdGhlIFwidG9cIiBub2RlIGhhcyBhIGtleSBhbmQgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgbm8gbWF0Y2hpbmcga2V5ZWQgbm9kZSBpbiB0aGUgc291cmNlIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIG9yaWdpbmFsIGhhcyBhIGtleVxuICAgICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gaXNDb21wYXRpYmxlICE9PSBmYWxzZSAmJiBjb21wYXJlTm9kZU5hbWVzKGN1ckZyb21Ob2RlQ2hpbGQsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgICAgaWYgKGlzQ29tcGF0aWJsZSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGZvdW5kIGNvbXBhdGlibGUgRE9NIGVsZW1lbnRzIHNvIHRyYW5zZm9ybVxuICAgICAgICAgICAgICAgIC8vIHRoZSBjdXJyZW50IFwiZnJvbVwiIG5vZGUgdG8gbWF0Y2ggdGhlIGN1cnJlbnRcbiAgICAgICAgICAgICAgICAvLyB0YXJnZXQgRE9NIG5vZGUuXG4gICAgICAgICAgICAgICAgLy8gTU9SUEhcbiAgICAgICAgICAgICAgICBtb3JwaEVsKGN1ckZyb21Ob2RlQ2hpbGQsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1ckZyb21Ob2RlVHlwZSA9PT0gVEVYVF9OT0RFIHx8IGN1ckZyb21Ob2RlVHlwZSA9PSBDT01NRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgLy8gQm90aCBub2RlcyBiZWluZyBjb21wYXJlZCBhcmUgVGV4dCBvciBDb21tZW50IG5vZGVzXG4gICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgIC8vIFNpbXBseSB1cGRhdGUgbm9kZVZhbHVlIG9uIHRoZSBvcmlnaW5hbCBub2RlIHRvXG4gICAgICAgICAgICAgIC8vIGNoYW5nZSB0aGUgdGV4dCB2YWx1ZVxuICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVDaGlsZC5ub2RlVmFsdWUgIT09IGN1clRvTm9kZUNoaWxkLm5vZGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQubm9kZVZhbHVlID0gY3VyVG9Ob2RlQ2hpbGQubm9kZVZhbHVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNDb21wYXRpYmxlKSB7XG4gICAgICAgICAgICAvLyBBZHZhbmNlIGJvdGggdGhlIFwidG9cIiBjaGlsZCBhbmQgdGhlIFwiZnJvbVwiIGNoaWxkIHNpbmNlIHdlIGZvdW5kIGEgbWF0Y2hcbiAgICAgICAgICAgIC8vIE5vdGhpbmcgZWxzZSB0byBkbyBhcyB3ZSBhbHJlYWR5IHJlY3Vyc2l2ZWx5IGNhbGxlZCBtb3JwaENoaWxkcmVuIGFib3ZlXG4gICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTm8gY29tcGF0aWJsZSBtYXRjaCBzbyByZW1vdmUgdGhlIG9sZCBub2RlIGZyb20gdGhlIERPTSBhbmQgY29udGludWUgdHJ5aW5nIHRvIGZpbmQgYVxuICAgICAgICAgIC8vIG1hdGNoIGluIHRoZSBvcmlnaW5hbCBET00uIEhvd2V2ZXIsIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgZnJvbSBub2RlIGlzIG5vdCBrZXllZFxuICAgICAgICAgIC8vIHNpbmNlIGl0IGlzIHBvc3NpYmxlIHRoYXQgYSBrZXllZCBub2RlIG1pZ2h0IG1hdGNoIHVwIHdpdGggYSBub2RlIHNvbWV3aGVyZSBlbHNlIGluIHRoZVxuICAgICAgICAgIC8vIHRhcmdldCB0cmVlIGFuZCB3ZSBkb24ndCB3YW50IHRvIGRpc2NhcmQgaXQganVzdCB5ZXQgc2luY2UgaXQgc3RpbGwgbWlnaHQgZmluZCBhXG4gICAgICAgICAgLy8gaG9tZSBpbiB0aGUgZmluYWwgRE9NIHRyZWUuIEFmdGVyIGV2ZXJ5dGhpbmcgaXMgZG9uZSB3ZSB3aWxsIHJlbW92ZSBhbnkga2V5ZWQgbm9kZXNcbiAgICAgICAgICAvLyB0aGF0IGRpZG4ndCBmaW5kIGEgaG9tZVxuICAgICAgICAgIGlmIChjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgLy8gU2luY2UgdGhlIG5vZGUgaXMga2V5ZWQgaXQgbWlnaHQgYmUgbWF0Y2hlZCB1cCBsYXRlciBzbyB3ZSBkZWZlclxuICAgICAgICAgICAgLy8gdGhlIGFjdHVhbCByZW1vdmFsIHRvIGxhdGVyXG4gICAgICAgICAgICBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgICByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgdHJ1ZSAvKiBza2lwIGtleWVkIG5vZGVzICovKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICB9IC8vIEVORDogd2hpbGUoY3VyRnJvbU5vZGVDaGlsZCkge31cblxuICAgICAgICAvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgdGhlbiB3ZSBkaWQgbm90IGZpbmQgYSBjYW5kaWRhdGUgbWF0Y2ggZm9yXG4gICAgICAgIC8vIG91ciBcInRvIG5vZGVcIiBhbmQgd2UgZXhoYXVzdGVkIGFsbCBvZiB0aGUgY2hpbGRyZW4gXCJmcm9tXCJcbiAgICAgICAgLy8gbm9kZXMuIFRoZXJlZm9yZSwgd2Ugd2lsbCBqdXN0IGFwcGVuZCB0aGUgY3VycmVudCBcInRvXCIgbm9kZVxuICAgICAgICAvLyB0byB0aGUgZW5kXG4gICAgICAgIGlmIChjdXJUb05vZGVLZXkgJiYgKG1hdGNoaW5nRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2N1clRvTm9kZUtleV0pICYmIGNvbXBhcmVOb2RlTmFtZXMobWF0Y2hpbmdGcm9tRWwsIGN1clRvTm9kZUNoaWxkKSkge1xuICAgICAgICAgIC8vIE1PUlBIXG4gICAgICAgICAgaWYoIXNraXBGcm9tKXsgYWRkQ2hpbGQoZnJvbUVsLCBtYXRjaGluZ0Zyb21FbCk7IH1cbiAgICAgICAgICBtb3JwaEVsKG1hdGNoaW5nRnJvbUVsLCBjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0ID0gb25CZWZvcmVOb2RlQWRkZWQoY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgIGlmIChvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCkge1xuICAgICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VyVG9Ob2RlQ2hpbGQuYWN0dWFsaXplKSB7XG4gICAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gY3VyVG9Ob2RlQ2hpbGQuYWN0dWFsaXplKGZyb21FbC5vd25lckRvY3VtZW50IHx8IGRvYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRDaGlsZChmcm9tRWwsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgIGhhbmRsZU5vZGVBZGRlZChjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSB0b05leHRTaWJsaW5nO1xuICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBjbGVhbnVwRnJvbUVsKGZyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCwgY3VyRnJvbU5vZGVLZXkpO1xuXG4gICAgICB2YXIgc3BlY2lhbEVsSGFuZGxlciA9IHNwZWNpYWxFbEhhbmRsZXJzW2Zyb21FbC5ub2RlTmFtZV07XG4gICAgICBpZiAoc3BlY2lhbEVsSGFuZGxlcikge1xuICAgICAgICBzcGVjaWFsRWxIYW5kbGVyKGZyb21FbCwgdG9FbCk7XG4gICAgICB9XG4gICAgfSAvLyBFTkQ6IG1vcnBoQ2hpbGRyZW4oLi4uKVxuXG4gICAgdmFyIG1vcnBoZWROb2RlID0gZnJvbU5vZGU7XG4gICAgdmFyIG1vcnBoZWROb2RlVHlwZSA9IG1vcnBoZWROb2RlLm5vZGVUeXBlO1xuICAgIHZhciB0b05vZGVUeXBlID0gdG9Ob2RlLm5vZGVUeXBlO1xuXG4gICAgaWYgKCFjaGlsZHJlbk9ubHkpIHtcbiAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB3ZSBhcmUgZ2l2ZW4gdHdvIERPTSBub2RlcyB0aGF0IGFyZSBub3RcbiAgICAgIC8vIGNvbXBhdGlibGUgKGUuZy4gPGRpdj4gLS0+IDxzcGFuPiBvciA8ZGl2PiAtLT4gVEVYVClcbiAgICAgIGlmIChtb3JwaGVkTm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICBpZiAodG9Ob2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgaWYgKCFjb21wYXJlTm9kZU5hbWVzKGZyb21Ob2RlLCB0b05vZGUpKSB7XG4gICAgICAgICAgICBvbk5vZGVEaXNjYXJkZWQoZnJvbU5vZGUpO1xuICAgICAgICAgICAgbW9ycGhlZE5vZGUgPSBtb3ZlQ2hpbGRyZW4oZnJvbU5vZGUsIGNyZWF0ZUVsZW1lbnROUyh0b05vZGUubm9kZU5hbWUsIHRvTm9kZS5uYW1lc3BhY2VVUkkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gR29pbmcgZnJvbSBhbiBlbGVtZW50IG5vZGUgdG8gYSB0ZXh0IG5vZGVcbiAgICAgICAgICBtb3JwaGVkTm9kZSA9IHRvTm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChtb3JwaGVkTm9kZVR5cGUgPT09IFRFWFRfTk9ERSB8fCBtb3JwaGVkTm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSkgeyAvLyBUZXh0IG9yIGNvbW1lbnQgbm9kZVxuICAgICAgICBpZiAodG9Ob2RlVHlwZSA9PT0gbW9ycGhlZE5vZGVUeXBlKSB7XG4gICAgICAgICAgaWYgKG1vcnBoZWROb2RlLm5vZGVWYWx1ZSAhPT0gdG9Ob2RlLm5vZGVWYWx1ZSkge1xuICAgICAgICAgICAgbW9ycGhlZE5vZGUubm9kZVZhbHVlID0gdG9Ob2RlLm5vZGVWYWx1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbW9ycGhlZE5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGV4dCBub2RlIHRvIHNvbWV0aGluZyBlbHNlXG4gICAgICAgICAgbW9ycGhlZE5vZGUgPSB0b05vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9ycGhlZE5vZGUgPT09IHRvTm9kZSkge1xuICAgICAgLy8gVGhlIFwidG8gbm9kZVwiIHdhcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBcImZyb20gbm9kZVwiIHNvIHdlIGhhZCB0b1xuICAgICAgLy8gdG9zcyBvdXQgdGhlIFwiZnJvbSBub2RlXCIgYW5kIHVzZSB0aGUgXCJ0byBub2RlXCJcbiAgICAgIG9uTm9kZURpc2NhcmRlZChmcm9tTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0b05vZGUuaXNTYW1lTm9kZSAmJiB0b05vZGUuaXNTYW1lTm9kZShtb3JwaGVkTm9kZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtb3JwaEVsKG1vcnBoZWROb2RlLCB0b05vZGUsIGNoaWxkcmVuT25seSk7XG5cbiAgICAgIC8vIFdlIG5vdyBuZWVkIHRvIGxvb3Agb3ZlciBhbnkga2V5ZWQgbm9kZXMgdGhhdCBtaWdodCBuZWVkIHRvIGJlXG4gICAgICAvLyByZW1vdmVkLiBXZSBvbmx5IGRvIHRoZSByZW1vdmFsIGlmIHdlIGtub3cgdGhhdCB0aGUga2V5ZWQgbm9kZVxuICAgICAgLy8gbmV2ZXIgZm91bmQgYSBtYXRjaC4gV2hlbiBhIGtleWVkIG5vZGUgaXMgbWF0Y2hlZCB1cCB3ZSByZW1vdmVcbiAgICAgIC8vIGl0IG91dCBvZiBmcm9tTm9kZXNMb29rdXAgYW5kIHdlIHVzZSBmcm9tTm9kZXNMb29rdXAgdG8gZGV0ZXJtaW5lXG4gICAgICAvLyBpZiBhIGtleWVkIG5vZGUgaGFzIGJlZW4gbWF0Y2hlZCB1cCBvciBub3RcbiAgICAgIGlmIChrZXllZFJlbW92YWxMaXN0KSB7XG4gICAgICAgIGZvciAodmFyIGk9MCwgbGVuPWtleWVkUmVtb3ZhbExpc3QubGVuZ3RoOyBpPGxlbjsgaSsrKSB7XG4gICAgICAgICAgdmFyIGVsVG9SZW1vdmUgPSBmcm9tTm9kZXNMb29rdXBba2V5ZWRSZW1vdmFsTGlzdFtpXV07XG4gICAgICAgICAgaWYgKGVsVG9SZW1vdmUpIHtcbiAgICAgICAgICAgIHJlbW92ZU5vZGUoZWxUb1JlbW92ZSwgZWxUb1JlbW92ZS5wYXJlbnROb2RlLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZHJlbk9ubHkgJiYgbW9ycGhlZE5vZGUgIT09IGZyb21Ob2RlICYmIGZyb21Ob2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChtb3JwaGVkTm9kZS5hY3R1YWxpemUpIHtcbiAgICAgICAgbW9ycGhlZE5vZGUgPSBtb3JwaGVkTm9kZS5hY3R1YWxpemUoZnJvbU5vZGUub3duZXJEb2N1bWVudCB8fCBkb2MpO1xuICAgICAgfVxuICAgICAgLy8gSWYgd2UgaGFkIHRvIHN3YXAgb3V0IHRoZSBmcm9tIG5vZGUgd2l0aCBhIG5ldyBub2RlIGJlY2F1c2UgdGhlIG9sZFxuICAgICAgLy8gbm9kZSB3YXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgdGFyZ2V0IG5vZGUgdGhlbiB3ZSBuZWVkIHRvXG4gICAgICAvLyByZXBsYWNlIHRoZSBvbGQgRE9NIG5vZGUgaW4gdGhlIG9yaWdpbmFsIERPTSB0cmVlLiBUaGlzIGlzIG9ubHlcbiAgICAgIC8vIHBvc3NpYmxlIGlmIHRoZSBvcmlnaW5hbCBET00gbm9kZSB3YXMgcGFydCBvZiBhIERPTSB0cmVlIHdoaWNoXG4gICAgICAvLyB3ZSBrbm93IGlzIHRoZSBjYXNlIGlmIGl0IGhhcyBhIHBhcmVudCBub2RlLlxuICAgICAgZnJvbU5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobW9ycGhlZE5vZGUsIGZyb21Ob2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9ycGhlZE5vZGU7XG4gIH07XG59XG5cbnZhciBtb3JwaGRvbSA9IG1vcnBoZG9tRmFjdG9yeShtb3JwaEF0dHJzKTtcblxuZXhwb3J0IGRlZmF1bHQgbW9ycGhkb207XG4iLCAiaW1wb3J0IHtcbiAgUEhYX0NPTVBPTkVOVCxcbiAgUEhYX1BSVU5FLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TS0lQLFxuICBQSFhfTUFHSUNfSUQsXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9UUklHR0VSX0FDVElPTixcbiAgUEhYX1VQREFURSxcbiAgUEhYX1JFRl9TUkMsXG4gIFBIWF9SRUZfTE9DSyxcbiAgUEhYX1NUUkVBTSxcbiAgUEhYX1NUUkVBTV9SRUYsXG4gIFBIWF9WSUVXUE9SVF9UT1AsXG4gIFBIWF9WSUVXUE9SVF9CT1RUT00sXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGRldGVjdER1cGxpY2F0ZUlkcyxcbiAgaXNDaWRcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgRE9NUG9zdE1vcnBoUmVzdG9yZXIgZnJvbSBcIi4vZG9tX3Bvc3RfbW9ycGhfcmVzdG9yZXJcIlxuaW1wb3J0IG1vcnBoZG9tIGZyb20gXCJtb3JwaGRvbVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERPTVBhdGNoIHtcbiAgc3RhdGljIHBhdGNoV2l0aENsb25lZFRyZWUoY29udGFpbmVyLCBjbG9uZWRUcmVlLCBsaXZlU29ja2V0KXtcbiAgICBsZXQgZm9jdXNlZCA9IGxpdmVTb2NrZXQuZ2V0QWN0aXZlRWxlbWVudCgpXG4gICAgbGV0IHtzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kfSA9IGZvY3VzZWQgJiYgRE9NLmhhc1NlbGVjdGlvblJhbmdlKGZvY3VzZWQpID8gZm9jdXNlZCA6IHt9XG4gICAgbGV0IHBoeFVwZGF0ZSA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVVBEQVRFKVxuXG4gICAgbW9ycGhkb20oY29udGFpbmVyLCBjbG9uZWRUcmVlLCB7XG4gICAgICBjaGlsZHJlbk9ubHk6IGZhbHNlLFxuICAgICAgb25CZWZvcmVFbFVwZGF0ZWQ6IChmcm9tRWwsIHRvRWwpID0+IHtcbiAgICAgICAgRE9NLnN5bmNQZW5kaW5nQXR0cnMoZnJvbUVsLCB0b0VsKVxuICAgICAgICAvLyB3ZSBjYW5ub3QgbW9ycGggbG9ja2VkIGNoaWxkcmVuXG4gICAgICAgIGlmKCFjb250YWluZXIuaXNTYW1lTm9kZShmcm9tRWwpICYmIGZyb21FbC5oYXNBdHRyaWJ1dGUoUEhYX1JFRl9MT0NLKSl7IHJldHVybiBmYWxzZSB9XG4gICAgICAgIGlmKERPTS5pc0lnbm9yZWQoZnJvbUVsLCBwaHhVcGRhdGUpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgaWYoZm9jdXNlZCAmJiBmb2N1c2VkLmlzU2FtZU5vZGUoZnJvbUVsKSAmJiBET00uaXNGb3JtSW5wdXQoZnJvbUVsKSl7XG4gICAgICAgICAgRE9NLm1lcmdlRm9jdXNlZElucHV0KGZyb21FbCwgdG9FbClcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBsaXZlU29ja2V0LnNpbGVuY2VFdmVudHMoKCkgPT4gRE9NLnJlc3RvcmVGb2N1cyhmb2N1c2VkLCBzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHZpZXcsIGNvbnRhaW5lciwgaWQsIGh0bWwsIHN0cmVhbXMsIHRhcmdldENJRCl7XG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMubGl2ZVNvY2tldCA9IHZpZXcubGl2ZVNvY2tldFxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyXG4gICAgdGhpcy5pZCA9IGlkXG4gICAgdGhpcy5yb290SUQgPSB2aWV3LnJvb3QuaWRcbiAgICB0aGlzLmh0bWwgPSBodG1sXG4gICAgdGhpcy5zdHJlYW1zID0gc3RyZWFtc1xuICAgIHRoaXMuc3RyZWFtSW5zZXJ0cyA9IHt9XG4gICAgdGhpcy5zdHJlYW1Db21wb25lbnRSZXN0b3JlID0ge31cbiAgICB0aGlzLnRhcmdldENJRCA9IHRhcmdldENJRFxuICAgIHRoaXMuY2lkUGF0Y2ggPSBpc0NpZCh0aGlzLnRhcmdldENJRClcbiAgICB0aGlzLnBlbmRpbmdSZW1vdmVzID0gW11cbiAgICB0aGlzLnBoeFJlbW92ZSA9IHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFwicmVtb3ZlXCIpXG4gICAgdGhpcy50YXJnZXRDb250YWluZXIgPSB0aGlzLmlzQ0lEUGF0Y2goKSA/IHRoaXMudGFyZ2V0Q0lEQ29udGFpbmVyKGh0bWwpIDogY29udGFpbmVyXG4gICAgdGhpcy5jYWxsYmFja3MgPSB7XG4gICAgICBiZWZvcmVhZGRlZDogW10sIGJlZm9yZXVwZGF0ZWQ6IFtdLCBiZWZvcmVwaHhDaGlsZEFkZGVkOiBbXSxcbiAgICAgIGFmdGVyYWRkZWQ6IFtdLCBhZnRlcnVwZGF0ZWQ6IFtdLCBhZnRlcmRpc2NhcmRlZDogW10sIGFmdGVycGh4Q2hpbGRBZGRlZDogW10sXG4gICAgICBhZnRlcnRyYW5zaXRpb25zRGlzY2FyZGVkOiBbXVxuICAgIH1cbiAgfVxuXG4gIGJlZm9yZShraW5kLCBjYWxsYmFjayl7IHRoaXMuY2FsbGJhY2tzW2BiZWZvcmUke2tpbmR9YF0ucHVzaChjYWxsYmFjaykgfVxuICBhZnRlcihraW5kLCBjYWxsYmFjayl7IHRoaXMuY2FsbGJhY2tzW2BhZnRlciR7a2luZH1gXS5wdXNoKGNhbGxiYWNrKSB9XG5cbiAgdHJhY2tCZWZvcmUoa2luZCwgLi4uYXJncyl7XG4gICAgdGhpcy5jYWxsYmFja3NbYGJlZm9yZSR7a2luZH1gXS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKC4uLmFyZ3MpKVxuICB9XG5cbiAgdHJhY2tBZnRlcihraW5kLCAuLi5hcmdzKXtcbiAgICB0aGlzLmNhbGxiYWNrc1tgYWZ0ZXIke2tpbmR9YF0uZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayguLi5hcmdzKSlcbiAgfVxuXG4gIG1hcmtQcnVuYWJsZUNvbnRlbnRGb3JSZW1vdmFsKCl7XG4gICAgbGV0IHBoeFVwZGF0ZSA9IHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9VUERBVEUpXG4gICAgRE9NLmFsbCh0aGlzLmNvbnRhaW5lciwgYFske3BoeFVwZGF0ZX09YXBwZW5kXSA+ICosIFske3BoeFVwZGF0ZX09cHJlcGVuZF0gPiAqYCwgZWwgPT4ge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFBIWF9QUlVORSwgXCJcIilcbiAgICB9KVxuICB9XG5cbiAgcGVyZm9ybShpc0pvaW5QYXRjaCl7XG4gICAgbGV0IHt2aWV3LCBsaXZlU29ja2V0LCBodG1sLCBjb250YWluZXIsIHRhcmdldENvbnRhaW5lcn0gPSB0aGlzXG4gICAgaWYodGhpcy5pc0NJRFBhdGNoKCkgJiYgIXRhcmdldENvbnRhaW5lcil7IHJldHVybiB9XG5cbiAgICBsZXQgZm9jdXNlZCA9IGxpdmVTb2NrZXQuZ2V0QWN0aXZlRWxlbWVudCgpXG4gICAgbGV0IHtzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kfSA9IGZvY3VzZWQgJiYgRE9NLmhhc1NlbGVjdGlvblJhbmdlKGZvY3VzZWQpID8gZm9jdXNlZCA6IHt9XG4gICAgbGV0IHBoeFVwZGF0ZSA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVVBEQVRFKVxuICAgIGxldCBwaHhWaWV3cG9ydFRvcCA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVklFV1BPUlRfVE9QKVxuICAgIGxldCBwaHhWaWV3cG9ydEJvdHRvbSA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVklFV1BPUlRfQk9UVE9NKVxuICAgIGxldCBwaHhUcmlnZ2VyRXh0ZXJuYWwgPSBsaXZlU29ja2V0LmJpbmRpbmcoUEhYX1RSSUdHRVJfQUNUSU9OKVxuICAgIGxldCBhZGRlZCA9IFtdXG4gICAgbGV0IHVwZGF0ZXMgPSBbXVxuICAgIGxldCBhcHBlbmRQcmVwZW5kVXBkYXRlcyA9IFtdXG5cbiAgICBsZXQgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkID0gbnVsbFxuXG4gICAgZnVuY3Rpb24gbW9ycGgodGFyZ2V0Q29udGFpbmVyLCBzb3VyY2UsIHdpdGhDaGlsZHJlbj1mYWxzZSl7XG4gICAgICBsZXQgbW9ycGhDYWxsYmFja3MgPSB7XG4gICAgICAgIC8vIG5vcm1hbGx5LCB3ZSBhcmUgcnVubmluZyB3aXRoIGNoaWxkcmVuT25seSwgYXMgdGhlIHBhdGNoIEhUTUwgZm9yIGEgTFZcbiAgICAgICAgLy8gZG9lcyBub3QgaW5jbHVkZSB0aGUgTFYgYXR0cnMgKGRhdGEtcGh4LXNlc3Npb24sIGV0Yy4pXG4gICAgICAgIC8vIHdoZW4gd2UgYXJlIHBhdGNoaW5nIGEgbGl2ZSBjb21wb25lbnQsIHdlIGRvIHdhbnQgdG8gcGF0Y2ggdGhlIHJvb3QgZWxlbWVudCBhcyB3ZWxsO1xuICAgICAgICAvLyBhbm90aGVyIGNhc2UgaXMgdGhlIHJlY3Vyc2l2ZSBwYXRjaCBvZiBhIHN0cmVhbSBpdGVtIHRoYXQgd2FzIGtlcHQgb24gcmVzZXQgKC0+IG9uQmVmb3JlTm9kZUFkZGVkKVxuICAgICAgICBjaGlsZHJlbk9ubHk6IHRhcmdldENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCkgPT09IG51bGwgJiYgIXdpdGhDaGlsZHJlbixcbiAgICAgICAgZ2V0Tm9kZUtleTogKG5vZGUpID0+IHtcbiAgICAgICAgICBpZihET00uaXNQaHhEZXN0cm95ZWQobm9kZSkpeyByZXR1cm4gbnVsbCB9XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGpvaW4gcGF0Y2gsIHRoZW4gYnkgZGVmaW5pdGlvbiB0aGVyZSB3YXMgbm8gUEhYX01BR0lDX0lELlxuICAgICAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IHRvIHJlZHVjZSB0aGUgYW1vdW50IG9mIGVsZW1lbnRzIG1vcnBoZG9tIGRpc2NhcmRzLlxuICAgICAgICAgIGlmKGlzSm9pblBhdGNoKXsgcmV0dXJuIG5vZGUuaWQgfVxuICAgICAgICAgIHJldHVybiBub2RlLmlkIHx8IChub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZShQSFhfTUFHSUNfSUQpKVxuICAgICAgICB9LFxuICAgICAgICAvLyBza2lwIGluZGV4aW5nIGZyb20gY2hpbGRyZW4gd2hlbiBjb250YWluZXIgaXMgc3RyZWFtXG4gICAgICAgIHNraXBGcm9tQ2hpbGRyZW46IChmcm9tKSA9PiB7IHJldHVybiBmcm9tLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpID09PSBQSFhfU1RSRUFNIH0sXG4gICAgICAgIC8vIHRlbGwgbW9ycGhkb20gaG93IHRvIGFkZCBhIGNoaWxkXG4gICAgICAgIGFkZENoaWxkOiAocGFyZW50LCBjaGlsZCkgPT4ge1xuICAgICAgICAgIGxldCB7cmVmLCBzdHJlYW1BdH0gPSB0aGlzLmdldFN0cmVhbUluc2VydChjaGlsZClcbiAgICAgICAgICBpZihyZWYgPT09IHVuZGVmaW5lZCl7IHJldHVybiBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpIH1cblxuICAgICAgICAgIHRoaXMuc2V0U3RyZWFtUmVmKGNoaWxkLCByZWYpXG5cbiAgICAgICAgICAvLyBzdHJlYW1pbmdcbiAgICAgICAgICBpZihzdHJlYW1BdCA9PT0gMCl7XG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJiZWdpblwiLCBjaGlsZClcbiAgICAgICAgICB9IGVsc2UgaWYoc3RyZWFtQXQgPT09IC0xKXtcbiAgICAgICAgICAgIGxldCBsYXN0Q2hpbGQgPSBwYXJlbnQubGFzdEVsZW1lbnRDaGlsZFxuICAgICAgICAgICAgaWYobGFzdENoaWxkICYmICFsYXN0Q2hpbGQuaGFzQXR0cmlidXRlKFBIWF9TVFJFQU1fUkVGKSl7XG4gICAgICAgICAgICAgIGxldCBub25TdHJlYW1DaGlsZCA9IEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKS5maW5kKGMgPT4gIWMuaGFzQXR0cmlidXRlKFBIWF9TVFJFQU1fUkVGKSlcbiAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbm9uU3RyZWFtQ2hpbGQpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmKHN0cmVhbUF0ID4gMCl7XG4gICAgICAgICAgICBsZXQgc2libGluZyA9IEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKVtzdHJlYW1BdF1cbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHNpYmxpbmcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkJlZm9yZU5vZGVBZGRlZDogKGVsKSA9PiB7XG4gICAgICAgICAgRE9NLm1haW50YWluUHJpdmF0ZUhvb2tzKGVsLCBlbCwgcGh4Vmlld3BvcnRUb3AsIHBoeFZpZXdwb3J0Qm90dG9tKVxuICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJhZGRlZFwiLCBlbClcblxuICAgICAgICAgIGxldCBtb3JwaGVkRWwgPSBlbFxuICAgICAgICAgIC8vIHRoaXMgaXMgYSBzdHJlYW0gaXRlbSB0aGF0IHdhcyBrZXB0IG9uIHJlc2V0LCByZWN1cnNpdmVseSBtb3JwaCBpdFxuICAgICAgICAgIGlmKHRoaXMuc3RyZWFtQ29tcG9uZW50UmVzdG9yZVtlbC5pZF0pe1xuICAgICAgICAgICAgbW9ycGhlZEVsID0gdGhpcy5zdHJlYW1Db21wb25lbnRSZXN0b3JlW2VsLmlkXVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3RyZWFtQ29tcG9uZW50UmVzdG9yZVtlbC5pZF1cbiAgICAgICAgICAgIG1vcnBoLmNhbGwodGhpcywgbW9ycGhlZEVsLCBlbCwgdHJ1ZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbW9ycGhlZEVsXG4gICAgICAgIH0sXG4gICAgICAgIG9uTm9kZUFkZGVkOiAoZWwpID0+IHtcbiAgICAgICAgICBpZihlbC5nZXRBdHRyaWJ1dGUpeyB0aGlzLm1heWJlUmVPcmRlclN0cmVhbShlbCwgdHJ1ZSkgfVxuXG4gICAgICAgICAgLy8gaGFjayB0byBmaXggU2FmYXJpIGhhbmRsaW5nIG9mIGltZyBzcmNzZXQgYW5kIHZpZGVvIHRhZ3NcbiAgICAgICAgICBpZihlbCBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgJiYgZWwuc3Jjc2V0KXtcbiAgICAgICAgICAgIGVsLnNyY3NldCA9IGVsLnNyY3NldFxuICAgICAgICAgIH0gZWxzZSBpZihlbCBpbnN0YW5jZW9mIEhUTUxWaWRlb0VsZW1lbnQgJiYgZWwuYXV0b3BsYXkpe1xuICAgICAgICAgICAgZWwucGxheSgpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKERPTS5pc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWwoZWwsIHBoeFRyaWdnZXJFeHRlcm5hbCkpe1xuICAgICAgICAgICAgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkID0gZWxcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBuZXN0ZWQgdmlldyBoYW5kbGluZ1xuICAgICAgICAgIGlmKChET00uaXNQaHhDaGlsZChlbCkgJiYgdmlldy5vd25zRWxlbWVudChlbCkpIHx8IERPTS5pc1BoeFN0aWNreShlbCkgJiYgdmlldy5vd25zRWxlbWVudChlbC5wYXJlbnROb2RlKSl7XG4gICAgICAgICAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJwaHhDaGlsZEFkZGVkXCIsIGVsKVxuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRlZC5wdXNoKGVsKVxuICAgICAgICB9LFxuICAgICAgICBvbk5vZGVEaXNjYXJkZWQ6IChlbCkgPT4gdGhpcy5vbk5vZGVEaXNjYXJkZWQoZWwpLFxuICAgICAgICBvbkJlZm9yZU5vZGVEaXNjYXJkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1BSVU5FKSAhPT0gbnVsbCl7IHJldHVybiB0cnVlIH1cbiAgICAgICAgICBpZihlbC5wYXJlbnRFbGVtZW50ICE9PSBudWxsICYmIGVsLmlkICYmXG4gICAgICAgICAgICBET00uaXNQaHhVcGRhdGUoZWwucGFyZW50RWxlbWVudCwgcGh4VXBkYXRlLCBbUEhYX1NUUkVBTSwgXCJhcHBlbmRcIiwgXCJwcmVwZW5kXCJdKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYodGhpcy5tYXliZVBlbmRpbmdSZW1vdmUoZWwpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICBpZih0aGlzLnNraXBDSURTaWJsaW5nKGVsKSl7IHJldHVybiBmYWxzZSB9XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBvbkVsVXBkYXRlZDogKGVsKSA9PiB7XG4gICAgICAgICAgaWYoRE9NLmlzTm93VHJpZ2dlckZvcm1FeHRlcm5hbChlbCwgcGh4VHJpZ2dlckV4dGVybmFsKSl7XG4gICAgICAgICAgICBleHRlcm5hbEZvcm1UcmlnZ2VyZWQgPSBlbFxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVzLnB1c2goZWwpXG4gICAgICAgICAgdGhpcy5tYXliZVJlT3JkZXJTdHJlYW0oZWwsIGZhbHNlKVxuICAgICAgICB9LFxuICAgICAgICBvbkJlZm9yZUVsVXBkYXRlZDogKGZyb21FbCwgdG9FbCkgPT4ge1xuICAgICAgICAgIC8vIGlmIHdlIGFyZSBwYXRjaGluZyB0aGUgcm9vdCB0YXJnZXQgY29udGFpbmVyIGFuZCB0aGUgaWQgaGFzIGNoYW5nZWQsIHRyZWF0IGl0IGFzIGEgbmV3IG5vZGVcbiAgICAgICAgICAvLyBieSByZXBsYWNpbmcgdGhlIGZyb21FbCB3aXRoIHRoZSB0b0VsLCB3aGljaCBlbnN1cmVzIGhvb2tzIGFyZSB0b3JuIGRvd24gYW5kIHJlLWNyZWF0ZWRcbiAgICAgICAgICBpZihmcm9tRWwuaWQgJiYgZnJvbUVsLmlzU2FtZU5vZGUodGFyZ2V0Q29udGFpbmVyKSAmJiBmcm9tRWwuaWQgIT09IHRvRWwuaWQpe1xuICAgICAgICAgICAgbW9ycGhDYWxsYmFja3Mub25Ob2RlRGlzY2FyZGVkKGZyb21FbClcbiAgICAgICAgICAgIGZyb21FbC5yZXBsYWNlV2l0aCh0b0VsKVxuICAgICAgICAgICAgcmV0dXJuIG1vcnBoQ2FsbGJhY2tzLm9uTm9kZUFkZGVkKHRvRWwpXG4gICAgICAgICAgfVxuICAgICAgICAgIERPTS5zeW5jUGVuZGluZ0F0dHJzKGZyb21FbCwgdG9FbClcbiAgICAgICAgICBET00ubWFpbnRhaW5Qcml2YXRlSG9va3MoZnJvbUVsLCB0b0VsLCBwaHhWaWV3cG9ydFRvcCwgcGh4Vmlld3BvcnRCb3R0b20pXG4gICAgICAgICAgRE9NLmNsZWFuQ2hpbGROb2Rlcyh0b0VsLCBwaHhVcGRhdGUpXG4gICAgICAgICAgaWYodGhpcy5za2lwQ0lEU2libGluZyh0b0VsKSl7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIGlzIGEgbGl2ZSBjb21wb25lbnQgdXNlZCBpbiBhIHN0cmVhbSwgd2UgbWF5IG5lZWQgdG8gcmVvcmRlciBpdFxuICAgICAgICAgICAgdGhpcy5tYXliZVJlT3JkZXJTdHJlYW0oZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKERPTS5pc1BoeFN0aWNreShmcm9tRWwpKXtcbiAgICAgICAgICAgIFtQSFhfU0VTU0lPTiwgUEhYX1NUQVRJQywgUEhYX1JPT1RfSURdXG4gICAgICAgICAgICAgIC5tYXAoYXR0ciA9PiBbYXR0ciwgZnJvbUVsLmdldEF0dHJpYnV0ZShhdHRyKSwgdG9FbC5nZXRBdHRyaWJ1dGUoYXR0cildKVxuICAgICAgICAgICAgICAuZm9yRWFjaCgoW2F0dHIsIGZyb21WYWwsIHRvVmFsXSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHRvVmFsICYmIGZyb21WYWwgIT09IHRvVmFsKXsgZnJvbUVsLnNldEF0dHJpYnV0ZShhdHRyLCB0b1ZhbCkgfVxuICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoRE9NLmlzSWdub3JlZChmcm9tRWwsIHBoeFVwZGF0ZSkgfHwgKGZyb21FbC5mb3JtICYmIGZyb21FbC5mb3JtLmlzU2FtZU5vZGUoZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkKSkpe1xuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7aXNJZ25vcmVkOiBET00uaXNJZ25vcmVkKGZyb21FbCwgcGh4VXBkYXRlKX0pXG4gICAgICAgICAgICB1cGRhdGVzLnB1c2goZnJvbUVsKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZnJvbUVsLnR5cGUgPT09IFwibnVtYmVyXCIgJiYgKGZyb21FbC52YWxpZGl0eSAmJiBmcm9tRWwudmFsaWRpdHkuYmFkSW5wdXQpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBoYXMgIFBIWF9SRUZfU1JDLCBpdCBpcyBsb2FkaW5nIG9yIGxvY2tlZCBhbmQgYXdhaXRpbmcgYW4gYWNrLlxuICAgICAgICAgIC8vIElmIGl0J3MgbG9ja2VkLCB3ZSBjbG9uZSB0aGUgZnJvbUVsIHRyZWUgYW5kIGluc3RydWN0IG1vcnBoZG9tIHRvIHVzZVxuICAgICAgICAgIC8vIHRoZSBjbG9uZWQgdHJlZSBhcyB0aGUgc291cmNlIG9mIHRoZSBtb3JwaCBmb3IgdGhpcyBicmFuY2ggZnJvbSBoZXJlIG9uIG91dC5cbiAgICAgICAgICAvLyBXZSBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBjbG9uZWQgdHJlZSBpbiB0aGUgZWxlbWVudCdzIHByaXZhdGUgZGF0YSwgYW5kXG4gICAgICAgICAgLy8gb24gYWNrICh2aWV3LnVuZG9SZWZzKSwgd2UgbW9ycGggdGhlIGNsb25lZCB0cmVlIHdpdGggdGhlIHRydWUgZnJvbUVsIGluIHRoZSBET00gdG9cbiAgICAgICAgICAvLyBhcHBseSBhbnkgY2hhbmdlcyB0aGF0IGhhcHBlbmVkIHdoaWxlIHRoZSBlbGVtZW50IHdhcyBsb2NrZWQuXG4gICAgICAgICAgbGV0IGlzRm9jdXNlZEZvcm1FbCA9IGZvY3VzZWQgJiYgZnJvbUVsLmlzU2FtZU5vZGUoZm9jdXNlZCkgJiYgRE9NLmlzRm9ybUlucHV0KGZyb21FbClcbiAgICAgICAgICBsZXQgZm9jdXNlZFNlbGVjdENoYW5nZWQgPSBpc0ZvY3VzZWRGb3JtRWwgJiYgdGhpcy5pc0NoYW5nZWRTZWxlY3QoZnJvbUVsLCB0b0VsKVxuICAgICAgICAgIGlmKGZyb21FbC5oYXNBdHRyaWJ1dGUoUEhYX1JFRl9TUkMpKXtcbiAgICAgICAgICAgIGlmKERPTS5pc1VwbG9hZElucHV0KGZyb21FbCkpe1xuICAgICAgICAgICAgICBET00ubWVyZ2VBdHRycyhmcm9tRWwsIHRvRWwsIHtpc0lnbm9yZWQ6IHRydWV9KVxuICAgICAgICAgICAgICB0aGlzLnRyYWNrQmVmb3JlKFwidXBkYXRlZFwiLCBmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgICAgIHVwZGF0ZXMucHVzaChmcm9tRWwpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKGZyb21FbClcbiAgICAgICAgICAgIGxldCBpc0xvY2tlZCA9IGZyb21FbC5oYXNBdHRyaWJ1dGUoUEhYX1JFRl9MT0NLKVxuICAgICAgICAgICAgbGV0IGNsb25lID0gaXNMb2NrZWQgPyBET00ucHJpdmF0ZShmcm9tRWwsIFBIWF9SRUZfTE9DSykgfHwgZnJvbUVsLmNsb25lTm9kZSh0cnVlKSA6IG51bGxcbiAgICAgICAgICAgIGlmKGNsb25lKXtcbiAgICAgICAgICAgICAgRE9NLnB1dFByaXZhdGUoZnJvbUVsLCBQSFhfUkVGX0xPQ0ssIGNsb25lKVxuICAgICAgICAgICAgICBpZighaXNGb2N1c2VkRm9ybUVsKXtcbiAgICAgICAgICAgICAgICBmcm9tRWwgPSBjbG9uZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbmVzdGVkIHZpZXcgaGFuZGxpbmdcbiAgICAgICAgICBpZihET00uaXNQaHhDaGlsZCh0b0VsKSl7XG4gICAgICAgICAgICBsZXQgcHJldlNlc3Npb24gPSBmcm9tRWwuZ2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OKVxuICAgICAgICAgICAgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7ZXhjbHVkZTogW1BIWF9TVEFUSUNdfSlcbiAgICAgICAgICAgIGlmKHByZXZTZXNzaW9uICE9PSBcIlwiKXsgZnJvbUVsLnNldEF0dHJpYnV0ZShQSFhfU0VTU0lPTiwgcHJldlNlc3Npb24pIH1cbiAgICAgICAgICAgIGZyb21FbC5zZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQsIHRoaXMucm9vdElEKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpbnB1dCBoYW5kbGluZ1xuICAgICAgICAgIERPTS5jb3B5UHJpdmF0ZXModG9FbCwgZnJvbUVsKVxuXG4gICAgICAgICAgLy8gc2tpcCBwYXRjaGluZyBmb2N1c2VkIGlucHV0cyB1bmxlc3MgZm9jdXMgaXMgYSBzZWxlY3QgdGhhdCBoYXMgY2hhbmdlZCBvcHRpb25zXG4gICAgICAgICAgaWYoaXNGb2N1c2VkRm9ybUVsICYmIGZyb21FbC50eXBlICE9PSBcImhpZGRlblwiICYmICFmb2N1c2VkU2VsZWN0Q2hhbmdlZCl7XG4gICAgICAgICAgICB0aGlzLnRyYWNrQmVmb3JlKFwidXBkYXRlZFwiLCBmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgICBET00ubWVyZ2VGb2N1c2VkSW5wdXQoZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLnN5bmNBdHRyc1RvUHJvcHMoZnJvbUVsKVxuICAgICAgICAgICAgdXBkYXRlcy5wdXNoKGZyb21FbClcbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnMoZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGJsdXIgZm9jdXNlZCBzZWxlY3QgaWYgaXQgY2hhbmdlZCBzbyBuYXRpdmUgVUkgaXMgdXBkYXRlZCAoaWUgc2FmYXJpIHdvbid0IHVwZGF0ZSB2aXNpYmxlIG9wdGlvbnMpXG4gICAgICAgICAgICBpZihmb2N1c2VkU2VsZWN0Q2hhbmdlZCl7IGZyb21FbC5ibHVyKCkgfVxuICAgICAgICAgICAgaWYoRE9NLmlzUGh4VXBkYXRlKHRvRWwsIHBoeFVwZGF0ZSwgW1wiYXBwZW5kXCIsIFwicHJlcGVuZFwiXSkpe1xuICAgICAgICAgICAgICBhcHBlbmRQcmVwZW5kVXBkYXRlcy5wdXNoKG5ldyBET01Qb3N0TW9ycGhSZXN0b3Jlcihmcm9tRWwsIHRvRWwsIHRvRWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkpKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBET00uc3luY0F0dHJzVG9Qcm9wcyh0b0VsKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyh0b0VsKVxuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgcmV0dXJuIGZyb21FbFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbW9ycGhkb20odGFyZ2V0Q29udGFpbmVyLCBzb3VyY2UsIG1vcnBoQ2FsbGJhY2tzKVxuICAgIH1cblxuICAgIHRoaXMudHJhY2tCZWZvcmUoXCJhZGRlZFwiLCBjb250YWluZXIpXG4gICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgY29udGFpbmVyLCBjb250YWluZXIpXG5cbiAgICBsaXZlU29ja2V0LnRpbWUoXCJtb3JwaGRvbVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnN0cmVhbXMuZm9yRWFjaCgoW3JlZiwgaW5zZXJ0cywgZGVsZXRlSWRzLCByZXNldF0pID0+IHtcbiAgICAgICAgaW5zZXJ0cy5mb3JFYWNoKChba2V5LCBzdHJlYW1BdCwgbGltaXRdKSA9PiB7XG4gICAgICAgICAgdGhpcy5zdHJlYW1JbnNlcnRzW2tleV0gPSB7cmVmLCBzdHJlYW1BdCwgbGltaXQsIHJlc2V0fVxuICAgICAgICB9KVxuICAgICAgICBpZihyZXNldCAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICBET00uYWxsKGNvbnRhaW5lciwgYFske1BIWF9TVFJFQU1fUkVGfT1cIiR7cmVmfVwiXWAsIGNoaWxkID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlU3RyZWFtQ2hpbGRFbGVtZW50KGNoaWxkKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlSWRzLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAgIGxldCBjaGlsZCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGBbaWQ9XCIke2lkfVwiXWApXG4gICAgICAgICAgaWYoY2hpbGQpeyB0aGlzLnJlbW92ZVN0cmVhbUNoaWxkRWxlbWVudChjaGlsZCkgfVxuICAgICAgICB9KVxuICAgICAgfSlcblxuICAgICAgLy8gY2xlYXIgc3RyZWFtIGl0ZW1zIGZyb20gdGhlIGRlYWQgcmVuZGVyIGlmIHRoZXkgYXJlIG5vdCBpbnNlcnRlZCBhZ2FpblxuICAgICAgaWYoaXNKb2luUGF0Y2gpe1xuICAgICAgICBET00uYWxsKHRoaXMuY29udGFpbmVyLCBgWyR7cGh4VXBkYXRlfT0ke1BIWF9TVFJFQU19XWAsIGVsID0+IHtcbiAgICAgICAgICAvLyBtYWtlIHN1cmUgdG8gb25seSByZW1vdmUgZWxlbWVudHMgb3duZWQgYnkgdGhlIGN1cnJlbnQgdmlld1xuICAgICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhvZW5peGZyYW1ld29yay9waG9lbml4X2xpdmVfdmlldy9pc3N1ZXMvMzA0N1xuICAgICAgICAgIHRoaXMubGl2ZVNvY2tldC5vd25lcihlbCwgKHZpZXcpID0+IHtcbiAgICAgICAgICAgIGlmKHZpZXcgPT09IHRoaXMudmlldyl7XG4gICAgICAgICAgICAgIEFycmF5LmZyb20oZWwuY2hpbGRyZW4pLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlU3RyZWFtQ2hpbGRFbGVtZW50KGNoaWxkKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIG1vcnBoLmNhbGwodGhpcywgdGFyZ2V0Q29udGFpbmVyLCBodG1sKVxuICAgIH0pXG5cbiAgICBpZihsaXZlU29ja2V0LmlzRGVidWdFbmFibGVkKCkpe1xuICAgICAgZGV0ZWN0RHVwbGljYXRlSWRzKClcbiAgICAgIC8vIHdhcm4gaWYgdGhlcmUgYXJlIGFueSBpbnB1dHMgbmFtZWQgXCJpZFwiXG4gICAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPWlkXVwiKSkuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgaWYobm9kZS5mb3JtKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRGV0ZWN0ZWQgYW4gaW5wdXQgd2l0aCBuYW1lPVxcXCJpZFxcXCIgaW5zaWRlIGEgZm9ybSEgVGhpcyB3aWxsIGNhdXNlIHByb2JsZW1zIHdoZW4gcGF0Y2hpbmcgdGhlIERPTS5cXG5cIiwgbm9kZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZihhcHBlbmRQcmVwZW5kVXBkYXRlcy5sZW5ndGggPiAwKXtcbiAgICAgIGxpdmVTb2NrZXQudGltZShcInBvc3QtbW9ycGggYXBwZW5kL3ByZXBlbmQgcmVzdG9yYXRpb25cIiwgKCkgPT4ge1xuICAgICAgICBhcHBlbmRQcmVwZW5kVXBkYXRlcy5mb3JFYWNoKHVwZGF0ZSA9PiB1cGRhdGUucGVyZm9ybSgpKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBsaXZlU29ja2V0LnNpbGVuY2VFdmVudHMoKCkgPT4gRE9NLnJlc3RvcmVGb2N1cyhmb2N1c2VkLCBzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKSlcbiAgICBET00uZGlzcGF0Y2hFdmVudChkb2N1bWVudCwgXCJwaHg6dXBkYXRlXCIpXG4gICAgYWRkZWQuZm9yRWFjaChlbCA9PiB0aGlzLnRyYWNrQWZ0ZXIoXCJhZGRlZFwiLCBlbCkpXG4gICAgdXBkYXRlcy5mb3JFYWNoKGVsID0+IHRoaXMudHJhY2tBZnRlcihcInVwZGF0ZWRcIiwgZWwpKVxuXG4gICAgdGhpcy50cmFuc2l0aW9uUGVuZGluZ1JlbW92ZXMoKVxuXG4gICAgaWYoZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkKXtcbiAgICAgIGxpdmVTb2NrZXQudW5sb2FkKClcbiAgICAgIC8vIHVzZSBwcm90b3R5cGUncyBzdWJtaXQgaW4gY2FzZSB0aGVyZSdzIGEgZm9ybSBjb250cm9sIHdpdGggbmFtZSBvciBpZCBvZiBcInN1Ym1pdFwiXG4gICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEZvcm1FbGVtZW50L3N1Ym1pdFxuICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKGV4dGVybmFsRm9ybVRyaWdnZXJlZCkuc3VibWl0LmNhbGwoZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkKVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgb25Ob2RlRGlzY2FyZGVkKGVsKXtcbiAgICAvLyBuZXN0ZWQgdmlldyBoYW5kbGluZ1xuICAgIGlmKERPTS5pc1BoeENoaWxkKGVsKSB8fCBET00uaXNQaHhTdGlja3koZWwpKXsgdGhpcy5saXZlU29ja2V0LmRlc3Ryb3lWaWV3QnlFbChlbCkgfVxuICAgIHRoaXMudHJhY2tBZnRlcihcImRpc2NhcmRlZFwiLCBlbClcbiAgfVxuXG4gIG1heWJlUGVuZGluZ1JlbW92ZShub2RlKXtcbiAgICBpZihub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSh0aGlzLnBoeFJlbW92ZSkgIT09IG51bGwpe1xuICAgICAgdGhpcy5wZW5kaW5nUmVtb3Zlcy5wdXNoKG5vZGUpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICByZW1vdmVTdHJlYW1DaGlsZEVsZW1lbnQoY2hpbGQpe1xuICAgIC8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIG5vZGUgaWYgaXQgaXMgYWN0dWFsbHkgcmUtYWRkZWQgaW4gdGhlIHNhbWUgcGF0Y2hcbiAgICAvLyB3ZSBkbyBOT1Qgd2FudCB0byBleGVjdXRlIHBoeC1yZW1vdmUsIHdlIGRvIE5PVCB3YW50IHRvIGNhbGwgb25Ob2RlRGlzY2FyZGVkXG4gICAgaWYodGhpcy5zdHJlYW1JbnNlcnRzW2NoaWxkLmlkXSl7XG4gICAgICB0aGlzLnN0cmVhbUNvbXBvbmVudFJlc3RvcmVbY2hpbGQuaWRdID0gY2hpbGRcbiAgICAgIGNoaWxkLnJlbW92ZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG9ubHkgcmVtb3ZlIHRoZSBlbGVtZW50IG5vdyBpZiBpdCBoYXMgbm8gcGh4LXJlbW92ZSBiaW5kaW5nXG4gICAgICBpZighdGhpcy5tYXliZVBlbmRpbmdSZW1vdmUoY2hpbGQpKXtcbiAgICAgICAgY2hpbGQucmVtb3ZlKClcbiAgICAgICAgdGhpcy5vbk5vZGVEaXNjYXJkZWQoY2hpbGQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0U3RyZWFtSW5zZXJ0KGVsKXtcbiAgICBsZXQgaW5zZXJ0ID0gZWwuaWQgPyB0aGlzLnN0cmVhbUluc2VydHNbZWwuaWRdIDoge31cbiAgICByZXR1cm4gaW5zZXJ0IHx8IHt9XG4gIH1cblxuICBzZXRTdHJlYW1SZWYoZWwsIHJlZil7XG4gICAgRE9NLnB1dFN0aWNreShlbCwgUEhYX1NUUkVBTV9SRUYsIGVsID0+IGVsLnNldEF0dHJpYnV0ZShQSFhfU1RSRUFNX1JFRiwgcmVmKSlcbiAgfVxuXG4gIG1heWJlUmVPcmRlclN0cmVhbShlbCwgaXNOZXcpe1xuICAgIGxldCB7cmVmLCBzdHJlYW1BdCwgcmVzZXR9ID0gdGhpcy5nZXRTdHJlYW1JbnNlcnQoZWwpXG4gICAgaWYoc3RyZWFtQXQgPT09IHVuZGVmaW5lZCl7IHJldHVybiB9XG5cbiAgICAvLyB3ZSBuZWVkIHRvIHNldCB0aGUgUEhYX1NUUkVBTV9SRUYgaGVyZSBhcyB3ZWxsIGFzIGFkZENoaWxkIGlzIGludm9rZWQgb25seSBmb3IgcGFyZW50c1xuICAgIHRoaXMuc2V0U3RyZWFtUmVmKGVsLCByZWYpXG5cbiAgICBpZighcmVzZXQgJiYgIWlzTmV3KXtcbiAgICAgIC8vIHdlIG9ubHkgcmVvcmRlciBpZiB0aGUgZWxlbWVudCBpcyBuZXcgb3IgaXQncyBhIHN0cmVhbSByZXNldFxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gY2hlY2sgaWYgdGhlIGVsZW1lbnQgaGFzIGEgcGFyZW50IGVsZW1lbnQ7XG4gICAgLy8gaXQgZG9lc24ndCBpZiB3ZSBhcmUgY3VycmVudGx5IHJlY3Vyc2l2ZWx5IG1vcnBoaW5nIChyZXN0b3JpbmcgYSBzYXZlZCBzdHJlYW0gY2hpbGQpXG4gICAgLy8gYmVjYXVzZSB0aGUgZWxlbWVudCBpcyBub3QgeWV0IGFkZGVkIHRvIHRoZSByZWFsIGRvbTtcbiAgICAvLyByZW9yZGVyaW5nIGRvZXMgbm90IG1ha2Ugc2Vuc2UgaW4gdGhhdCBjYXNlIGFueXdheVxuICAgIGlmKCFlbC5wYXJlbnRFbGVtZW50KXsgcmV0dXJuIH1cblxuICAgIGlmKHN0cmVhbUF0ID09PSAwKXtcbiAgICAgIGVsLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsLCBlbC5wYXJlbnRFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKVxuICAgIH0gZWxzZSBpZihzdHJlYW1BdCA+IDApe1xuICAgICAgbGV0IGNoaWxkcmVuID0gQXJyYXkuZnJvbShlbC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuKVxuICAgICAgbGV0IG9sZEluZGV4ID0gY2hpbGRyZW4uaW5kZXhPZihlbClcbiAgICAgIGlmKHN0cmVhbUF0ID49IGNoaWxkcmVuLmxlbmd0aCAtIDEpe1xuICAgICAgICBlbC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGVsKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHNpYmxpbmcgPSBjaGlsZHJlbltzdHJlYW1BdF1cbiAgICAgICAgaWYob2xkSW5kZXggPiBzdHJlYW1BdCl7XG4gICAgICAgICAgZWwucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWwsIHNpYmxpbmcpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWwucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWwsIHNpYmxpbmcubmV4dEVsZW1lbnRTaWJsaW5nKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5tYXliZUxpbWl0U3RyZWFtKGVsKVxuICB9XG5cbiAgbWF5YmVMaW1pdFN0cmVhbShlbCl7XG4gICAgbGV0IHtsaW1pdH0gPSB0aGlzLmdldFN0cmVhbUluc2VydChlbClcbiAgICBsZXQgY2hpbGRyZW4gPSBsaW1pdCAhPT0gbnVsbCAmJiBBcnJheS5mcm9tKGVsLnBhcmVudEVsZW1lbnQuY2hpbGRyZW4pXG4gICAgaWYobGltaXQgJiYgbGltaXQgPCAwICYmIGNoaWxkcmVuLmxlbmd0aCA+IGxpbWl0ICogLTEpe1xuICAgICAgY2hpbGRyZW4uc2xpY2UoMCwgY2hpbGRyZW4ubGVuZ3RoICsgbGltaXQpLmZvckVhY2goY2hpbGQgPT4gdGhpcy5yZW1vdmVTdHJlYW1DaGlsZEVsZW1lbnQoY2hpbGQpKVxuICAgIH0gZWxzZSBpZihsaW1pdCAmJiBsaW1pdCA+PSAwICYmIGNoaWxkcmVuLmxlbmd0aCA+IGxpbWl0KXtcbiAgICAgIGNoaWxkcmVuLnNsaWNlKGxpbWl0KS5mb3JFYWNoKGNoaWxkID0+IHRoaXMucmVtb3ZlU3RyZWFtQ2hpbGRFbGVtZW50KGNoaWxkKSlcbiAgICB9XG4gIH1cblxuICB0cmFuc2l0aW9uUGVuZGluZ1JlbW92ZXMoKXtcbiAgICBsZXQge3BlbmRpbmdSZW1vdmVzLCBsaXZlU29ja2V0fSA9IHRoaXNcbiAgICBpZihwZW5kaW5nUmVtb3Zlcy5sZW5ndGggPiAwKXtcbiAgICAgIGxpdmVTb2NrZXQudHJhbnNpdGlvblJlbW92ZXMocGVuZGluZ1JlbW92ZXMsIGZhbHNlLCAoKSA9PiB7XG4gICAgICAgIHBlbmRpbmdSZW1vdmVzLmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgIGxldCBjaGlsZCA9IERPTS5maXJzdFBoeENoaWxkKGVsKVxuICAgICAgICAgIGlmKGNoaWxkKXsgbGl2ZVNvY2tldC5kZXN0cm95Vmlld0J5RWwoY2hpbGQpIH1cbiAgICAgICAgICBlbC5yZW1vdmUoKVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJ0cmFuc2l0aW9uc0Rpc2NhcmRlZFwiLCBwZW5kaW5nUmVtb3ZlcylcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgaXNDaGFuZ2VkU2VsZWN0KGZyb21FbCwgdG9FbCl7XG4gICAgaWYoIShmcm9tRWwgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkgfHwgZnJvbUVsLm11bHRpcGxlKXsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZihmcm9tRWwub3B0aW9ucy5sZW5ndGggIT09IHRvRWwub3B0aW9ucy5sZW5ndGgpeyByZXR1cm4gdHJ1ZSB9XG5cbiAgICAvLyBrZWVwIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgdG9FbC52YWx1ZSA9IGZyb21FbC52YWx1ZVxuXG4gICAgLy8gaW4gZ2VuZXJhbCB3ZSBoYXZlIHRvIGJlIHZlcnkgY2FyZWZ1bCB3aXRoIHVzaW5nIGlzRXF1YWxOb2RlIGFzIGl0IGRvZXMgbm90IGEgcmVsaWFibGVcbiAgICAvLyBET00gdHJlZSBlcXVhbGl0eSBjaGVjaywgYnV0IGZvciBzZWxlY3Rpb24gYXR0cmlidXRlcyBhbmQgb3B0aW9ucyBpdCB3b3JrcyBmaW5lXG4gICAgcmV0dXJuICFmcm9tRWwuaXNFcXVhbE5vZGUodG9FbClcbiAgfVxuXG4gIGlzQ0lEUGF0Y2goKXsgcmV0dXJuIHRoaXMuY2lkUGF0Y2ggfVxuXG4gIHNraXBDSURTaWJsaW5nKGVsKXtcbiAgICByZXR1cm4gZWwubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmIGVsLmhhc0F0dHJpYnV0ZShQSFhfU0tJUClcbiAgfVxuXG4gIHRhcmdldENJRENvbnRhaW5lcihodG1sKXtcbiAgICBpZighdGhpcy5pc0NJRFBhdGNoKCkpeyByZXR1cm4gfVxuICAgIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmNvbnRhaW5lciwgdGhpcy50YXJnZXRDSUQpXG4gICAgaWYocmVzdC5sZW5ndGggPT09IDAgJiYgRE9NLmNoaWxkTm9kZUxlbmd0aChodG1sKSA9PT0gMSl7XG4gICAgICByZXR1cm4gZmlyc3RcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpcnN0ICYmIGZpcnN0LnBhcmVudE5vZGVcbiAgICB9XG4gIH1cblxuICBpbmRleE9mKHBhcmVudCwgY2hpbGQpeyByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQuY2hpbGRyZW4pLmluZGV4T2YoY2hpbGQpIH1cbn1cbiIsICJpbXBvcnQge1xuICBDT01QT05FTlRTLFxuICBEWU5BTUlDUyxcbiAgVEVNUExBVEVTLFxuICBFVkVOVFMsXG4gIFBIWF9DT01QT05FTlQsXG4gIFBIWF9TS0lQLFxuICBQSFhfTUFHSUNfSUQsXG4gIFJFUExZLFxuICBTVEFUSUMsXG4gIFRJVExFLFxuICBTVFJFQU0sXG4gIFJPT1QsXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGlzT2JqZWN0LFxuICBsb2dFcnJvcixcbiAgaXNDaWQsXG59IGZyb20gXCIuL3V0aWxzXCJcblxuY29uc3QgVk9JRF9UQUdTID0gbmV3IFNldChbXG4gIFwiYXJlYVwiLFxuICBcImJhc2VcIixcbiAgXCJiclwiLFxuICBcImNvbFwiLFxuICBcImNvbW1hbmRcIixcbiAgXCJlbWJlZFwiLFxuICBcImhyXCIsXG4gIFwiaW1nXCIsXG4gIFwiaW5wdXRcIixcbiAgXCJrZXlnZW5cIixcbiAgXCJsaW5rXCIsXG4gIFwibWV0YVwiLFxuICBcInBhcmFtXCIsXG4gIFwic291cmNlXCIsXG4gIFwidHJhY2tcIixcbiAgXCJ3YnJcIlxuXSlcbmNvbnN0IHF1b3RlQ2hhcnMgPSBuZXcgU2V0KFtcIidcIiwgXCJcXFwiXCJdKVxuXG5leHBvcnQgbGV0IG1vZGlmeVJvb3QgPSAoaHRtbCwgYXR0cnMsIGNsZWFySW5uZXJIVE1MKSA9PiB7XG4gIGxldCBpID0gMFxuICBsZXQgaW5zaWRlQ29tbWVudCA9IGZhbHNlXG4gIGxldCBiZWZvcmVUYWcsIGFmdGVyVGFnLCB0YWcsIHRhZ05hbWVFbmRzQXQsIGlkLCBuZXdIVE1MXG5cbiAgbGV0IGxvb2thaGVhZCA9IGh0bWwubWF0Y2goL14oXFxzKig/OjwhLS0uKj8tLT5cXHMqKSopPChbXlxcc1xcLz5dKykvKVxuICBpZihsb29rYWhlYWQgPT09IG51bGwpeyB0aHJvdyBuZXcgRXJyb3IoYG1hbGZvcm1lZCBodG1sICR7aHRtbH1gKSB9XG5cbiAgaSA9IGxvb2thaGVhZFswXS5sZW5ndGhcbiAgYmVmb3JlVGFnID0gbG9va2FoZWFkWzFdXG4gIHRhZyA9IGxvb2thaGVhZFsyXVxuICB0YWdOYW1lRW5kc0F0ID0gaVxuXG4gIC8vIFNjYW4gdGhlIG9wZW5pbmcgdGFnIGZvciBpZCwgaWYgdGhlcmUgaXMgYW55XG4gIGZvcihpOyBpIDwgaHRtbC5sZW5ndGg7IGkrKyl7XG4gICAgaWYoaHRtbC5jaGFyQXQoaSkgPT09IFwiPlwiICl7IGJyZWFrIH1cbiAgICBpZihodG1sLmNoYXJBdChpKSA9PT0gXCI9XCIpe1xuICAgICAgbGV0IGlzSWQgPSBodG1sLnNsaWNlKGkgLSAzLCBpKSA9PT0gXCIgaWRcIlxuICAgICAgaSsrXG4gICAgICBsZXQgY2hhciA9IGh0bWwuY2hhckF0KGkpXG4gICAgICBpZihxdW90ZUNoYXJzLmhhcyhjaGFyKSl7XG4gICAgICAgIGxldCBhdHRyU3RhcnRzQXQgPSBpXG4gICAgICAgIGkrK1xuICAgICAgICBmb3IoaTsgaSA8IGh0bWwubGVuZ3RoOyBpKyspe1xuICAgICAgICAgIGlmKGh0bWwuY2hhckF0KGkpID09PSBjaGFyKXsgYnJlYWsgfVxuICAgICAgICB9XG4gICAgICAgIGlmKGlzSWQpe1xuICAgICAgICAgIGlkID0gaHRtbC5zbGljZShhdHRyU3RhcnRzQXQgKyAxLCBpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQgY2xvc2VBdCA9IGh0bWwubGVuZ3RoIC0gMVxuICBpbnNpZGVDb21tZW50ID0gZmFsc2VcbiAgd2hpbGUoY2xvc2VBdCA+PSBiZWZvcmVUYWcubGVuZ3RoICsgdGFnLmxlbmd0aCl7XG4gICAgbGV0IGNoYXIgPSBodG1sLmNoYXJBdChjbG9zZUF0KVxuICAgIGlmKGluc2lkZUNvbW1lbnQpe1xuICAgICAgaWYoY2hhciA9PT0gXCItXCIgJiYgaHRtbC5zbGljZShjbG9zZUF0IC0gMywgY2xvc2VBdCkgPT09IFwiPCEtXCIpe1xuICAgICAgICBpbnNpZGVDb21tZW50ID0gZmFsc2VcbiAgICAgICAgY2xvc2VBdCAtPSA0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9zZUF0IC09IDFcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYoY2hhciA9PT0gXCI+XCIgJiYgaHRtbC5zbGljZShjbG9zZUF0IC0gMiwgY2xvc2VBdCkgPT09IFwiLS1cIil7XG4gICAgICBpbnNpZGVDb21tZW50ID0gdHJ1ZVxuICAgICAgY2xvc2VBdCAtPSAzXG4gICAgfSBlbHNlIGlmKGNoYXIgPT09IFwiPlwiKXtcbiAgICAgIGJyZWFrXG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlQXQgLT0gMVxuICAgIH1cbiAgfVxuICBhZnRlclRhZyA9IGh0bWwuc2xpY2UoY2xvc2VBdCArIDEsIGh0bWwubGVuZ3RoKVxuXG4gIGxldCBhdHRyc1N0ciA9XG4gICAgT2JqZWN0LmtleXMoYXR0cnMpXG4gICAgICAubWFwKGF0dHIgPT4gYXR0cnNbYXR0cl0gPT09IHRydWUgPyBhdHRyIDogYCR7YXR0cn09XCIke2F0dHJzW2F0dHJdfVwiYClcbiAgICAgIC5qb2luKFwiIFwiKVxuXG4gIGlmKGNsZWFySW5uZXJIVE1MKXtcbiAgICAvLyBLZWVwIHRoZSBpZCBpZiBhbnlcbiAgICBsZXQgaWRBdHRyU3RyID0gaWQgPyBgIGlkPVwiJHtpZH1cImAgOiBcIlwiXG4gICAgaWYoVk9JRF9UQUdTLmhhcyh0YWcpKXtcbiAgICAgIG5ld0hUTUwgPSBgPCR7dGFnfSR7aWRBdHRyU3RyfSR7YXR0cnNTdHIgPT09IFwiXCIgPyBcIlwiIDogXCIgXCJ9JHthdHRyc1N0cn0vPmBcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3SFRNTCA9IGA8JHt0YWd9JHtpZEF0dHJTdHJ9JHthdHRyc1N0ciA9PT0gXCJcIiA/IFwiXCIgOiBcIiBcIn0ke2F0dHJzU3RyfT48LyR7dGFnfT5gXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCByZXN0ID0gaHRtbC5zbGljZSh0YWdOYW1lRW5kc0F0LCBjbG9zZUF0ICsgMSlcbiAgICBuZXdIVE1MID0gYDwke3RhZ30ke2F0dHJzU3RyID09PSBcIlwiID8gXCJcIiA6IFwiIFwifSR7YXR0cnNTdHJ9JHtyZXN0fWBcbiAgfVxuXG4gIHJldHVybiBbbmV3SFRNTCwgYmVmb3JlVGFnLCBhZnRlclRhZ11cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuZGVyZWQge1xuICBzdGF0aWMgZXh0cmFjdChkaWZmKXtcbiAgICBsZXQge1tSRVBMWV06IHJlcGx5LCBbRVZFTlRTXTogZXZlbnRzLCBbVElUTEVdOiB0aXRsZX0gPSBkaWZmXG4gICAgZGVsZXRlIGRpZmZbUkVQTFldXG4gICAgZGVsZXRlIGRpZmZbRVZFTlRTXVxuICAgIGRlbGV0ZSBkaWZmW1RJVExFXVxuICAgIHJldHVybiB7ZGlmZiwgdGl0bGUsIHJlcGx5OiByZXBseSB8fCBudWxsLCBldmVudHM6IGV2ZW50cyB8fCBbXX1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHZpZXdJZCwgcmVuZGVyZWQpe1xuICAgIHRoaXMudmlld0lkID0gdmlld0lkXG4gICAgdGhpcy5yZW5kZXJlZCA9IHt9XG4gICAgdGhpcy5tYWdpY0lkID0gMFxuICAgIHRoaXMubWVyZ2VEaWZmKHJlbmRlcmVkKVxuICB9XG5cbiAgcGFyZW50Vmlld0lkKCl7IHJldHVybiB0aGlzLnZpZXdJZCB9XG5cbiAgdG9TdHJpbmcob25seUNpZHMpe1xuICAgIGxldCBbc3RyLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlVG9TdHJpbmcodGhpcy5yZW5kZXJlZCwgdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSwgb25seUNpZHMsIHRydWUsIHt9KVxuICAgIHJldHVybiBbc3RyLCBzdHJlYW1zXVxuICB9XG5cbiAgcmVjdXJzaXZlVG9TdHJpbmcocmVuZGVyZWQsIGNvbXBvbmVudHMgPSByZW5kZXJlZFtDT01QT05FTlRTXSwgb25seUNpZHMsIGNoYW5nZVRyYWNraW5nLCByb290QXR0cnMpe1xuICAgIG9ubHlDaWRzID0gb25seUNpZHMgPyBuZXcgU2V0KG9ubHlDaWRzKSA6IG51bGxcbiAgICBsZXQgb3V0cHV0ID0ge2J1ZmZlcjogXCJcIiwgY29tcG9uZW50czogY29tcG9uZW50cywgb25seUNpZHM6IG9ubHlDaWRzLCBzdHJlYW1zOiBuZXcgU2V0KCl9XG4gICAgdGhpcy50b091dHB1dEJ1ZmZlcihyZW5kZXJlZCwgbnVsbCwgb3V0cHV0LCBjaGFuZ2VUcmFja2luZywgcm9vdEF0dHJzKVxuICAgIHJldHVybiBbb3V0cHV0LmJ1ZmZlciwgb3V0cHV0LnN0cmVhbXNdXG4gIH1cblxuICBjb21wb25lbnRDSURzKGRpZmYpeyByZXR1cm4gT2JqZWN0LmtleXMoZGlmZltDT01QT05FTlRTXSB8fCB7fSkubWFwKGkgPT4gcGFyc2VJbnQoaSkpIH1cblxuICBpc0NvbXBvbmVudE9ubHlEaWZmKGRpZmYpe1xuICAgIGlmKCFkaWZmW0NPTVBPTkVOVFNdKXsgcmV0dXJuIGZhbHNlIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZGlmZikubGVuZ3RoID09PSAxXG4gIH1cblxuICBnZXRDb21wb25lbnQoZGlmZiwgY2lkKXsgcmV0dXJuIGRpZmZbQ09NUE9ORU5UU11bY2lkXSB9XG5cbiAgcmVzZXRSZW5kZXIoY2lkKXtcbiAgICAvLyB3ZSBhcmUgcmFjaW5nIGEgY29tcG9uZW50IGRlc3Ryb3ksIGl0IGNvdWxkIG5vdCBleGlzdCwgc29cbiAgICAvLyBtYWtlIHN1cmUgdGhhdCB3ZSBkb24ndCB0cnkgdG8gc2V0IHJlc2V0IG9uIHVuZGVmaW5lZFxuICAgIGlmKHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU11bY2lkXSl7XG4gICAgICB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdW2NpZF0ucmVzZXQgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgbWVyZ2VEaWZmKGRpZmYpe1xuICAgIGxldCBuZXdjID0gZGlmZltDT01QT05FTlRTXVxuICAgIGxldCBjYWNoZSA9IHt9XG4gICAgZGVsZXRlIGRpZmZbQ09NUE9ORU5UU11cbiAgICB0aGlzLnJlbmRlcmVkID0gdGhpcy5tdXRhYmxlTWVyZ2UodGhpcy5yZW5kZXJlZCwgZGlmZilcbiAgICB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdID0gdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSB8fCB7fVxuXG4gICAgaWYobmV3Yyl7XG4gICAgICBsZXQgb2xkYyA9IHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU11cblxuICAgICAgZm9yKGxldCBjaWQgaW4gbmV3Yyl7XG4gICAgICAgIG5ld2NbY2lkXSA9IHRoaXMuY2FjaGVkRmluZENvbXBvbmVudChjaWQsIG5ld2NbY2lkXSwgb2xkYywgbmV3YywgY2FjaGUpXG4gICAgICB9XG5cbiAgICAgIGZvcihsZXQgY2lkIGluIG5ld2MpeyBvbGRjW2NpZF0gPSBuZXdjW2NpZF0gfVxuICAgICAgZGlmZltDT01QT05FTlRTXSA9IG5ld2NcbiAgICB9XG4gIH1cblxuICBjYWNoZWRGaW5kQ29tcG9uZW50KGNpZCwgY2RpZmYsIG9sZGMsIG5ld2MsIGNhY2hlKXtcbiAgICBpZihjYWNoZVtjaWRdKXtcbiAgICAgIHJldHVybiBjYWNoZVtjaWRdXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBuZGlmZiwgc3RhdCwgc2NpZCA9IGNkaWZmW1NUQVRJQ11cblxuICAgICAgaWYoaXNDaWQoc2NpZCkpe1xuICAgICAgICBsZXQgdGRpZmZcblxuICAgICAgICBpZihzY2lkID4gMCl7XG4gICAgICAgICAgdGRpZmYgPSB0aGlzLmNhY2hlZEZpbmRDb21wb25lbnQoc2NpZCwgbmV3Y1tzY2lkXSwgb2xkYywgbmV3YywgY2FjaGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGRpZmYgPSBvbGRjWy1zY2lkXVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdCA9IHRkaWZmW1NUQVRJQ11cbiAgICAgICAgbmRpZmYgPSB0aGlzLmNsb25lTWVyZ2UodGRpZmYsIGNkaWZmLCB0cnVlKVxuICAgICAgICBuZGlmZltTVEFUSUNdID0gc3RhdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmRpZmYgPSBjZGlmZltTVEFUSUNdICE9PSB1bmRlZmluZWQgfHwgb2xkY1tjaWRdID09PSB1bmRlZmluZWQgP1xuICAgICAgICAgIGNkaWZmIDogdGhpcy5jbG9uZU1lcmdlKG9sZGNbY2lkXSwgY2RpZmYsIGZhbHNlKVxuICAgICAgfVxuXG4gICAgICBjYWNoZVtjaWRdID0gbmRpZmZcbiAgICAgIHJldHVybiBuZGlmZlxuICAgIH1cbiAgfVxuXG4gIG11dGFibGVNZXJnZSh0YXJnZXQsIHNvdXJjZSl7XG4gICAgaWYoc291cmNlW1NUQVRJQ10gIT09IHVuZGVmaW5lZCl7XG4gICAgICByZXR1cm4gc291cmNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9NdXRhYmxlTWVyZ2UodGFyZ2V0LCBzb3VyY2UpXG4gICAgICByZXR1cm4gdGFyZ2V0XG4gICAgfVxuICB9XG5cbiAgZG9NdXRhYmxlTWVyZ2UodGFyZ2V0LCBzb3VyY2Upe1xuICAgIGZvcihsZXQga2V5IGluIHNvdXJjZSl7XG4gICAgICBsZXQgdmFsID0gc291cmNlW2tleV1cbiAgICAgIGxldCB0YXJnZXRWYWwgPSB0YXJnZXRba2V5XVxuICAgICAgbGV0IGlzT2JqVmFsID0gaXNPYmplY3QodmFsKVxuICAgICAgaWYoaXNPYmpWYWwgJiYgdmFsW1NUQVRJQ10gPT09IHVuZGVmaW5lZCAmJiBpc09iamVjdCh0YXJnZXRWYWwpKXtcbiAgICAgICAgdGhpcy5kb011dGFibGVNZXJnZSh0YXJnZXRWYWwsIHZhbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsXG4gICAgICB9XG4gICAgfVxuICAgIGlmKHRhcmdldFtST09UXSl7XG4gICAgICB0YXJnZXQubmV3UmVuZGVyID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8vIE1lcmdlcyBjaWQgdHJlZXMgdG9nZXRoZXIsIGNvcHlpbmcgc3RhdGljcyBmcm9tIHNvdXJjZSB0cmVlLlxuICAvL1xuICAvLyBUaGUgYHBydW5lTWFnaWNJZGAgaXMgcGFzc2VkIHRvIGNvbnRyb2wgcHJ1bmluZyB0aGUgbWFnaWNJZCBvZiB0aGVcbiAgLy8gdGFyZ2V0LiBXZSBtdXN0IGFsd2F5cyBwcnVuZSB0aGUgbWFnaWNJZCB3aGVuIHdlIGFyZSBzaGFyaW5nIHN0YXRpY3NcbiAgLy8gZnJvbSBhbm90aGVyIGNvbXBvbmVudC4gSWYgbm90IHBydW5pbmcsIHdlIHJlcGxpY2F0ZSB0aGUgbG9naWMgZnJvbVxuICAvLyBtdXRhYmxlTWVyZ2UsIHdoZXJlIHdlIHNldCBuZXdSZW5kZXIgdG8gdHJ1ZSBpZiB0aGVyZSBpcyBhIHJvb3RcbiAgLy8gKGVmZmVjdGl2ZWx5IGZvcmNpbmcgdGhlIG5ldyB2ZXJzaW9uIHRvIGJlIHJlbmRlcmVkIGluc3RlYWQgb2Ygc2tpcHBlZClcbiAgLy9cbiAgY2xvbmVNZXJnZSh0YXJnZXQsIHNvdXJjZSwgcHJ1bmVNYWdpY0lkKXtcbiAgICBsZXQgbWVyZ2VkID0gey4uLnRhcmdldCwgLi4uc291cmNlfVxuICAgIGZvcihsZXQga2V5IGluIG1lcmdlZCl7XG4gICAgICBsZXQgdmFsID0gc291cmNlW2tleV1cbiAgICAgIGxldCB0YXJnZXRWYWwgPSB0YXJnZXRba2V5XVxuICAgICAgaWYoaXNPYmplY3QodmFsKSAmJiB2YWxbU1RBVElDXSA9PT0gdW5kZWZpbmVkICYmIGlzT2JqZWN0KHRhcmdldFZhbCkpe1xuICAgICAgICBtZXJnZWRba2V5XSA9IHRoaXMuY2xvbmVNZXJnZSh0YXJnZXRWYWwsIHZhbCwgcHJ1bmVNYWdpY0lkKVxuICAgICAgfSBlbHNlIGlmKHZhbCA9PT0gdW5kZWZpbmVkICYmIGlzT2JqZWN0KHRhcmdldFZhbCkpe1xuICAgICAgICBtZXJnZWRba2V5XSA9IHRoaXMuY2xvbmVNZXJnZSh0YXJnZXRWYWwsIHt9LCBwcnVuZU1hZ2ljSWQpXG4gICAgICB9XG4gICAgfVxuICAgIGlmKHBydW5lTWFnaWNJZCl7XG4gICAgICBkZWxldGUgbWVyZ2VkLm1hZ2ljSWRcbiAgICAgIGRlbGV0ZSBtZXJnZWQubmV3UmVuZGVyXG4gICAgfSBlbHNlIGlmKHRhcmdldFtST09UXSl7XG4gICAgICBtZXJnZWQubmV3UmVuZGVyID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkXG4gIH1cblxuICBjb21wb25lbnRUb1N0cmluZyhjaWQpe1xuICAgIGxldCBbc3RyLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlQ0lEVG9TdHJpbmcodGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSwgY2lkLCBudWxsKVxuICAgIGxldCBbc3RyaXBwZWRIVE1MLCBfYmVmb3JlLCBfYWZ0ZXJdID0gbW9kaWZ5Um9vdChzdHIsIHt9KVxuICAgIHJldHVybiBbc3RyaXBwZWRIVE1MLCBzdHJlYW1zXVxuICB9XG5cbiAgcHJ1bmVDSURzKGNpZHMpe1xuICAgIGNpZHMuZm9yRWFjaChjaWQgPT4gZGVsZXRlIHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU11bY2lkXSlcbiAgfVxuXG4gIC8vIHByaXZhdGVcblxuICBnZXQoKXsgcmV0dXJuIHRoaXMucmVuZGVyZWQgfVxuXG4gIGlzTmV3RmluZ2VycHJpbnQoZGlmZiA9IHt9KXsgcmV0dXJuICEhZGlmZltTVEFUSUNdIH1cblxuICB0ZW1wbGF0ZVN0YXRpYyhwYXJ0LCB0ZW1wbGF0ZXMpe1xuICAgIGlmKHR5cGVvZiAocGFydCkgPT09IFwibnVtYmVyXCIpe1xuICAgICAgcmV0dXJuIHRlbXBsYXRlc1twYXJ0XVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFydFxuICAgIH1cbiAgfVxuXG4gIG5leHRNYWdpY0lEKCl7XG4gICAgdGhpcy5tYWdpY0lkKytcbiAgICByZXR1cm4gYG0ke3RoaXMubWFnaWNJZH0tJHt0aGlzLnBhcmVudFZpZXdJZCgpfWBcbiAgfVxuXG4gIC8vIENvbnZlcnRzIHJlbmRlcmVkIHRyZWUgdG8gb3V0cHV0IGJ1ZmZlci5cbiAgLy9cbiAgLy8gY2hhbmdlVHJhY2tpbmcgY29udHJvbHMgaWYgd2UgY2FuIGFwcGx5IHRoZSBQSFhfU0tJUCBvcHRpbWl6YXRpb24uXG4gIC8vIEl0IGlzIGRpc2FibGVkIGZvciBjb21wcmVoZW5zaW9ucyBzaW5jZSB3ZSBtdXN0IHJlLXJlbmRlciB0aGUgZW50aXJlIGNvbGxlY3Rpb25cbiAgLy8gYW5kIG5vIGluZGl2aWR1YWwgZWxlbWVudCBpcyB0cmFja2VkIGluc2lkZSB0aGUgY29tcHJlaGVuc2lvbi5cbiAgdG9PdXRwdXRCdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0LCBjaGFuZ2VUcmFja2luZywgcm9vdEF0dHJzID0ge30pe1xuICAgIGlmKHJlbmRlcmVkW0RZTkFNSUNTXSl7IHJldHVybiB0aGlzLmNvbXByZWhlbnNpb25Ub0J1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQpIH1cbiAgICBsZXQge1tTVEFUSUNdOiBzdGF0aWNzfSA9IHJlbmRlcmVkXG4gICAgc3RhdGljcyA9IHRoaXMudGVtcGxhdGVTdGF0aWMoc3RhdGljcywgdGVtcGxhdGVzKVxuICAgIGxldCBpc1Jvb3QgPSByZW5kZXJlZFtST09UXVxuICAgIGxldCBwcmV2QnVmZmVyID0gb3V0cHV0LmJ1ZmZlclxuICAgIGlmKGlzUm9vdCl7IG91dHB1dC5idWZmZXIgPSBcIlwiIH1cblxuICAgIC8vIHRoaXMgY29uZGl0aW9uIGlzIGNhbGxlZCB3aGVuIGZpcnN0IHJlbmRlcmluZyBhbiBvcHRpbWl6YWJsZSBmdW5jdGlvbiBjb21wb25lbnQuXG4gICAgLy8gTEMgaGF2ZSB0aGVpciBtYWdpY0lkIHByZXZpb3VzbHkgc2V0XG4gICAgaWYoY2hhbmdlVHJhY2tpbmcgJiYgaXNSb290ICYmICFyZW5kZXJlZC5tYWdpY0lkKXtcbiAgICAgIHJlbmRlcmVkLm5ld1JlbmRlciA9IHRydWVcbiAgICAgIHJlbmRlcmVkLm1hZ2ljSWQgPSB0aGlzLm5leHRNYWdpY0lEKClcbiAgICB9XG5cbiAgICBvdXRwdXQuYnVmZmVyICs9IHN0YXRpY3NbMF1cbiAgICBmb3IobGV0IGkgPSAxOyBpIDwgc3RhdGljcy5sZW5ndGg7IGkrKyl7XG4gICAgICB0aGlzLmR5bmFtaWNUb0J1ZmZlcihyZW5kZXJlZFtpIC0gMV0sIHRlbXBsYXRlcywgb3V0cHV0LCBjaGFuZ2VUcmFja2luZylcbiAgICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1tpXVxuICAgIH1cblxuICAgIC8vIEFwcGxpZXMgdGhlIHJvb3QgdGFnIFwic2tpcFwiIG9wdGltaXphdGlvbiBpZiBzdXBwb3J0ZWQsIHdoaWNoIGNsZWFyc1xuICAgIC8vIHRoZSByb290IHRhZyBhdHRyaWJ1dGVzIGFuZCBpbm5lckhUTUwsIGFuZCBvbmx5IG1haW50YWlucyB0aGUgbWFnaWNJZC5cbiAgICAvLyBXZSBjYW4gb25seSBza2lwIHdoZW4gY2hhbmdlVHJhY2tpbmcgaXMgc3VwcG9ydGVkIChvdXRzaWRlIG9mIGEgY29tcHJlaGVuc2lvbiksXG4gICAgLy8gYW5kIHdoZW4gdGhlIHJvb3QgZWxlbWVudCBoYXNuJ3QgZXhwZXJpZW5jZWQgYW4gdW5yZW5kZXJlZCBtZXJnZSAobmV3UmVuZGVyIHRydWUpLlxuICAgIGlmKGlzUm9vdCl7XG4gICAgICBsZXQgc2tpcCA9IGZhbHNlXG4gICAgICBsZXQgYXR0cnNcbiAgICAgIC8vIFdoZW4gYSBMQyBpcyByZS1hZGRlZCB0byB0aGUgcGFnZSwgd2UgbmVlZCB0byByZS1yZW5kZXIgdGhlIGVudGlyZSBMQyB0cmVlLFxuICAgICAgLy8gdGhlcmVmb3JlIGNoYW5nZVRyYWNraW5nIGlzIGZhbHNlOyBob3dldmVyLCB3ZSBuZWVkIHRvIGtlZXAgYWxsIHRoZSBtYWdpY0lkc1xuICAgICAgLy8gZnJvbSBhbnkgZnVuY3Rpb24gY29tcG9uZW50IHNvIHRoZSBuZXh0IHRpbWUgdGhlIExDIGlzIHVwZGF0ZWQsIHdlIGNhbiBhcHBseVxuICAgICAgLy8gdGhlIHNraXAgb3B0aW1pemF0aW9uXG4gICAgICBpZihjaGFuZ2VUcmFja2luZyB8fCByZW5kZXJlZC5tYWdpY0lkKXtcbiAgICAgICAgc2tpcCA9IGNoYW5nZVRyYWNraW5nICYmICFyZW5kZXJlZC5uZXdSZW5kZXJcbiAgICAgICAgYXR0cnMgPSB7W1BIWF9NQUdJQ19JRF06IHJlbmRlcmVkLm1hZ2ljSWQsIC4uLnJvb3RBdHRyc31cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dHJzID0gcm9vdEF0dHJzXG4gICAgICB9XG4gICAgICBpZihza2lwKXsgYXR0cnNbUEhYX1NLSVBdID0gdHJ1ZSB9XG4gICAgICBsZXQgW25ld1Jvb3QsIGNvbW1lbnRCZWZvcmUsIGNvbW1lbnRBZnRlcl0gPSBtb2RpZnlSb290KG91dHB1dC5idWZmZXIsIGF0dHJzLCBza2lwKVxuICAgICAgcmVuZGVyZWQubmV3UmVuZGVyID0gZmFsc2VcbiAgICAgIG91dHB1dC5idWZmZXIgPSBwcmV2QnVmZmVyICsgY29tbWVudEJlZm9yZSArIG5ld1Jvb3QgKyBjb21tZW50QWZ0ZXJcbiAgICB9XG4gIH1cblxuICBjb21wcmVoZW5zaW9uVG9CdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KXtcbiAgICBsZXQge1tEWU5BTUlDU106IGR5bmFtaWNzLCBbU1RBVElDXTogc3RhdGljcywgW1NUUkVBTV06IHN0cmVhbX0gPSByZW5kZXJlZFxuICAgIGxldCBbX3JlZiwgX2luc2VydHMsIGRlbGV0ZUlkcywgcmVzZXRdID0gc3RyZWFtIHx8IFtudWxsLCB7fSwgW10sIG51bGxdXG4gICAgc3RhdGljcyA9IHRoaXMudGVtcGxhdGVTdGF0aWMoc3RhdGljcywgdGVtcGxhdGVzKVxuICAgIGxldCBjb21wVGVtcGxhdGVzID0gdGVtcGxhdGVzIHx8IHJlbmRlcmVkW1RFTVBMQVRFU11cbiAgICBmb3IobGV0IGQgPSAwOyBkIDwgZHluYW1pY3MubGVuZ3RoOyBkKyspe1xuICAgICAgbGV0IGR5bmFtaWMgPSBkeW5hbWljc1tkXVxuICAgICAgb3V0cHV0LmJ1ZmZlciArPSBzdGF0aWNzWzBdXG4gICAgICBmb3IobGV0IGkgPSAxOyBpIDwgc3RhdGljcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIC8vIEluc2lkZSBhIGNvbXByZWhlbnNpb24sIHdlIGRvbid0IHRyYWNrIGhvdyBkeW5hbWljcyBjaGFuZ2VcbiAgICAgICAgLy8gb3ZlciB0aW1lIChhbmQgZmVhdHVyZXMgbGlrZSBzdHJlYW1zIHdvdWxkIG1ha2UgdGhhdCBpbXBvc3NpYmxlXG4gICAgICAgIC8vIHVubGVzcyB3ZSBtb3ZlIHRoZSBzdHJlYW0gZGlmZmluZyBhd2F5IGZyb20gbW9ycGhkb20pLFxuICAgICAgICAvLyBzbyB3ZSBjYW4ndCBwZXJmb3JtIHJvb3QgY2hhbmdlIHRyYWNraW5nLlxuICAgICAgICBsZXQgY2hhbmdlVHJhY2tpbmcgPSBmYWxzZVxuICAgICAgICB0aGlzLmR5bmFtaWNUb0J1ZmZlcihkeW5hbWljW2kgLSAxXSwgY29tcFRlbXBsYXRlcywgb3V0cHV0LCBjaGFuZ2VUcmFja2luZylcbiAgICAgICAgb3V0cHV0LmJ1ZmZlciArPSBzdGF0aWNzW2ldXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYoc3RyZWFtICE9PSB1bmRlZmluZWQgJiYgKHJlbmRlcmVkW0RZTkFNSUNTXS5sZW5ndGggPiAwIHx8IGRlbGV0ZUlkcy5sZW5ndGggPiAwIHx8IHJlc2V0KSl7XG4gICAgICBkZWxldGUgcmVuZGVyZWRbU1RSRUFNXVxuICAgICAgcmVuZGVyZWRbRFlOQU1JQ1NdID0gW11cbiAgICAgIG91dHB1dC5zdHJlYW1zLmFkZChzdHJlYW0pXG4gICAgfVxuICB9XG5cbiAgZHluYW1pY1RvQnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCwgY2hhbmdlVHJhY2tpbmcpe1xuICAgIGlmKHR5cGVvZiAocmVuZGVyZWQpID09PSBcIm51bWJlclwiKXtcbiAgICAgIGxldCBbc3RyLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlQ0lEVG9TdHJpbmcob3V0cHV0LmNvbXBvbmVudHMsIHJlbmRlcmVkLCBvdXRwdXQub25seUNpZHMpXG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHN0clxuICAgICAgb3V0cHV0LnN0cmVhbXMgPSBuZXcgU2V0KFsuLi5vdXRwdXQuc3RyZWFtcywgLi4uc3RyZWFtc10pXG4gICAgfSBlbHNlIGlmKGlzT2JqZWN0KHJlbmRlcmVkKSl7XG4gICAgICB0aGlzLnRvT3V0cHV0QnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCwgY2hhbmdlVHJhY2tpbmcsIHt9KVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHJlbmRlcmVkXG4gICAgfVxuICB9XG5cbiAgcmVjdXJzaXZlQ0lEVG9TdHJpbmcoY29tcG9uZW50cywgY2lkLCBvbmx5Q2lkcyl7XG4gICAgbGV0IGNvbXBvbmVudCA9IGNvbXBvbmVudHNbY2lkXSB8fCBsb2dFcnJvcihgbm8gY29tcG9uZW50IGZvciBDSUQgJHtjaWR9YCwgY29tcG9uZW50cylcbiAgICBsZXQgYXR0cnMgPSB7W1BIWF9DT01QT05FTlRdOiBjaWR9XG4gICAgbGV0IHNraXAgPSBvbmx5Q2lkcyAmJiAhb25seUNpZHMuaGFzKGNpZClcbiAgICAvLyBUd28gb3B0aW1pemF0aW9uIHBhdGhzIGFwcGx5IGhlcmU6XG4gICAgLy9cbiAgICAvLyAgIDEuIFRoZSBvbmx5Q2lkcyBvcHRpbWl6YXRpb24gd29ya3MgYnkgdGhlIHNlcnZlciBkaWZmIHRlbGxpbmcgdXMgb25seSBzcGVjaWZpY1xuICAgIC8vICAgICBjaWQncyBoYXZlIGNoYW5nZWQuIFRoaXMgYWxsb3dzIHVzIHRvIHNraXAgcmVuZGVyaW5nIGFueSBjb21wb25lbnQgdGhhdCBoYXNuJ3QgY2hhbmdlZCxcbiAgICAvLyAgICAgd2hpY2ggdWx0aW1hdGVseSBzZXRzIFBIWF9TS0lQIHJvb3QgYXR0cmlidXRlIGFuZCBhdm9pZHMgcmVuZGVyaW5nIHRoZSBpbm5lckhUTUwuXG4gICAgLy9cbiAgICAvLyAgIDIuIFRoZSByb290IFBIWF9TS0lQIG9wdGltaXphdGlvbiBnZW5lcmFsaXplcyB0byBhbGwgSEVFeCBmdW5jdGlvbiBjb21wb25lbnRzLCBhbmRcbiAgICAvLyAgICAgd29ya3MgaW4gdGhlIHNhbWUgUEhYX1NLSVAgYXR0cmlidXRlIGZhc2hpb24gYXMgMSwgYnV0IHRoZSBuZXdSZW5kZXIgdHJhY2tpbmcgaXMgZG9uZVxuICAgIC8vICAgICBhdCB0aGUgZ2VuZXJhbCBkaWZmIG1lcmdlIGxldmVsLiBJZiB3ZSBtZXJnZSBhIGRpZmYgd2l0aCBuZXcgZHluYW1pY3MsIHdlIG5lY2Vzc2FyaWx5IGhhdmVcbiAgICAvLyAgICAgZXhwZXJpZW5jZWQgYSBjaGFuZ2Ugd2hpY2ggbXVzdCBiZSBhIG5ld1JlbmRlciwgYW5kIHRodXMgd2UgY2FuJ3Qgc2tpcCB0aGUgcmVuZGVyLlxuICAgIC8vXG4gICAgLy8gQm90aCBvcHRpbWl6YXRpb24gZmxvd3MgYXBwbHkgaGVyZS4gbmV3UmVuZGVyIGlzIHNldCBiYXNlZCBvbiB0aGUgb25seUNpZHMgb3B0aW1pemF0aW9uLCBhbmRcbiAgICAvLyB3ZSB0cmFjayBhIGRldGVybWluaXN0aWMgbWFnaWNJZCBiYXNlZCBvbiB0aGUgY2lkLlxuICAgIC8vXG4gICAgLy8gY2hhbmdlVHJhY2tpbmcgaXMgYWJvdXQgdGhlIGVudGlyZSB0cmVlXG4gICAgLy8gbmV3UmVuZGVyIGlzIGFib3V0IHRoZSBjdXJyZW50IHJvb3QgaW4gdGhlIHRyZWVcbiAgICAvL1xuICAgIC8vIEJ5IGRlZmF1bHQgY2hhbmdlVHJhY2tpbmcgaXMgZW5hYmxlZCwgYnV0IHdlIHNwZWNpYWwgY2FzZSB0aGUgZmxvdyB3aGVyZSB0aGUgY2xpZW50IGlzIHBydW5pbmdcbiAgICAvLyBjaWRzIGFuZCB0aGUgc2VydmVyIGFkZHMgdGhlIGNvbXBvbmVudCBiYWNrLiBJbiBzdWNoIGNhc2VzLCB3ZSBleHBsaWNpdGx5IGRpc2FibGUgY2hhbmdlVHJhY2tpbmdcbiAgICAvLyB3aXRoIHJlc2V0UmVuZGVyIGZvciB0aGlzIGNpZCwgdGhlbiByZS1lbmFibGUgaXQgYWZ0ZXIgdGhlIHJlY3Vyc2l2ZSBjYWxsIHRvIHNraXAgdGhlIG9wdGltaXphdGlvblxuICAgIC8vIGZvciB0aGUgZW50aXJlIGNvbXBvbmVudCB0cmVlLlxuICAgIGNvbXBvbmVudC5uZXdSZW5kZXIgPSAhc2tpcFxuICAgIGNvbXBvbmVudC5tYWdpY0lkID0gYGMke2NpZH0tJHt0aGlzLnBhcmVudFZpZXdJZCgpfWBcbiAgICAvLyBlbmFibGUgY2hhbmdlIHRyYWNraW5nIGFzIGxvbmcgYXMgdGhlIGNvbXBvbmVudCBoYXNuJ3QgYmVlbiByZXNldFxuICAgIGxldCBjaGFuZ2VUcmFja2luZyA9ICFjb21wb25lbnQucmVzZXRcbiAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZWN1cnNpdmVUb1N0cmluZyhjb21wb25lbnQsIGNvbXBvbmVudHMsIG9ubHlDaWRzLCBjaGFuZ2VUcmFja2luZywgYXR0cnMpXG4gICAgLy8gZGlzYWJsZSByZXNldCBhZnRlciB3ZSd2ZSByZW5kZXJlZFxuICAgIGRlbGV0ZSBjb21wb25lbnQucmVzZXRcblxuICAgIHJldHVybiBbaHRtbCwgc3RyZWFtc11cbiAgfVxufVxuIiwgImltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBBUklBIGZyb20gXCIuL2FyaWFcIlxuXG5sZXQgZm9jdXNTdGFjayA9IFtdXG5sZXQgZGVmYXVsdF90cmFuc2l0aW9uX3RpbWUgPSAyMDBcblxubGV0IEpTID0ge1xuICAvLyBwcml2YXRlXG4gIGV4ZWMoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGRlZmF1bHRzKXtcbiAgICBsZXQgW2RlZmF1bHRLaW5kLCBkZWZhdWx0QXJnc10gPSBkZWZhdWx0cyB8fCBbbnVsbCwge2NhbGxiYWNrOiBkZWZhdWx0cyAmJiBkZWZhdWx0cy5jYWxsYmFja31dXG4gICAgbGV0IGNvbW1hbmRzID0gcGh4RXZlbnQuY2hhckF0KDApID09PSBcIltcIiA/XG4gICAgICBKU09OLnBhcnNlKHBoeEV2ZW50KSA6IFtbZGVmYXVsdEtpbmQsIGRlZmF1bHRBcmdzXV1cblxuICAgIGNvbW1hbmRzLmZvckVhY2goKFtraW5kLCBhcmdzXSkgPT4ge1xuICAgICAgaWYoa2luZCA9PT0gZGVmYXVsdEtpbmQpe1xuICAgICAgICAvLyBhbHdheXMgcHJlZmVyIHRoZSBhcmdzLCBidXQga2VlcCBleGlzdGluZyBrZXlzIGZyb20gdGhlIGRlZmF1bHRBcmdzXG4gICAgICAgIGFyZ3MgPSB7Li4uZGVmYXVsdEFyZ3MsIC4uLmFyZ3N9XG4gICAgICAgIGFyZ3MuY2FsbGJhY2sgPSBhcmdzLmNhbGxiYWNrIHx8IGRlZmF1bHRBcmdzLmNhbGxiYWNrXG4gICAgICB9XG4gICAgICB0aGlzLmZpbHRlclRvRWxzKHZpZXcubGl2ZVNvY2tldCwgc291cmNlRWwsIGFyZ3MpLmZvckVhY2goZWwgPT4ge1xuICAgICAgICB0aGlzW2BleGVjXyR7a2luZH1gXShlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIGFyZ3MpXG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG5cbiAgaXNWaXNpYmxlKGVsKXtcbiAgICByZXR1cm4gISEoZWwub2Zmc2V0V2lkdGggfHwgZWwub2Zmc2V0SGVpZ2h0IHx8IGVsLmdldENsaWVudFJlY3RzKCkubGVuZ3RoID4gMClcbiAgfSxcblxuICAvLyByZXR1cm5zIHRydWUgaWYgYW55IHBhcnQgb2YgdGhlIGVsZW1lbnQgaXMgaW5zaWRlIHRoZSB2aWV3cG9ydFxuICBpc0luVmlld3BvcnQoZWwpe1xuICAgIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGNvbnN0IHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgY29uc3Qgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcblxuICAgIHJldHVybiAoXG4gICAgICByZWN0LnJpZ2h0ID4gMCAmJlxuICAgICAgcmVjdC5ib3R0b20gPiAwICYmXG4gICAgICByZWN0LmxlZnQgPCB3aW5kb3dXaWR0aCAmJlxuICAgICAgcmVjdC50b3AgPCB3aW5kb3dIZWlnaHRcbiAgICApXG4gIH0sXG5cbiAgLy8gcHJpdmF0ZVxuXG4gIC8vIGNvbW1hbmRzXG5cbiAgZXhlY19leGVjKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2F0dHIsIHRvfSl7XG4gICAgbGV0IG5vZGVzID0gdG8gPyBET00uYWxsKGRvY3VtZW50LCB0bykgOiBbc291cmNlRWxdXG4gICAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgIGxldCBlbmNvZGVkSlMgPSBub2RlLmdldEF0dHJpYnV0ZShhdHRyKVxuICAgICAgaWYoIWVuY29kZWRKUyl7IHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgJHthdHRyfSB0byBjb250YWluIEpTIGNvbW1hbmQgb24gXCIke3RvfVwiYCkgfVxuICAgICAgdmlldy5saXZlU29ja2V0LmV4ZWNKUyhub2RlLCBlbmNvZGVkSlMsIGV2ZW50VHlwZSlcbiAgICB9KVxuICB9LFxuXG4gIGV4ZWNfZGlzcGF0Y2goZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7ZXZlbnQsIGRldGFpbCwgYnViYmxlc30pe1xuICAgIGRldGFpbCA9IGRldGFpbCB8fCB7fVxuICAgIGRldGFpbC5kaXNwYXRjaGVyID0gc291cmNlRWxcbiAgICBET00uZGlzcGF0Y2hFdmVudChlbCwgZXZlbnQsIHtkZXRhaWwsIGJ1YmJsZXN9KVxuICB9LFxuXG4gIGV4ZWNfcHVzaChlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIGFyZ3Mpe1xuICAgIGxldCB7ZXZlbnQsIGRhdGEsIHRhcmdldCwgcGFnZV9sb2FkaW5nLCBsb2FkaW5nLCB2YWx1ZSwgZGlzcGF0Y2hlciwgY2FsbGJhY2t9ID0gYXJnc1xuICAgIGxldCBwdXNoT3B0cyA9IHtsb2FkaW5nLCB2YWx1ZSwgdGFyZ2V0LCBwYWdlX2xvYWRpbmc6ICEhcGFnZV9sb2FkaW5nfVxuICAgIGxldCB0YXJnZXRTcmMgPSBldmVudFR5cGUgPT09IFwiY2hhbmdlXCIgJiYgZGlzcGF0Y2hlciA/IGRpc3BhdGNoZXIgOiBzb3VyY2VFbFxuICAgIGxldCBwaHhUYXJnZXQgPSB0YXJnZXQgfHwgdGFyZ2V0U3JjLmdldEF0dHJpYnV0ZSh2aWV3LmJpbmRpbmcoXCJ0YXJnZXRcIikpIHx8IHRhcmdldFNyY1xuICAgIHZpZXcud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsICh0YXJnZXRWaWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIGlmKCF0YXJnZXRWaWV3LmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfVxuICAgICAgaWYoZXZlbnRUeXBlID09PSBcImNoYW5nZVwiKXtcbiAgICAgICAgbGV0IHtuZXdDaWQsIF90YXJnZXR9ID0gYXJnc1xuICAgICAgICBfdGFyZ2V0ID0gX3RhcmdldCB8fCAoRE9NLmlzRm9ybUlucHV0KHNvdXJjZUVsKSA/IHNvdXJjZUVsLm5hbWUgOiB1bmRlZmluZWQpXG4gICAgICAgIGlmKF90YXJnZXQpeyBwdXNoT3B0cy5fdGFyZ2V0ID0gX3RhcmdldCB9XG4gICAgICAgIHRhcmdldFZpZXcucHVzaElucHV0KHNvdXJjZUVsLCB0YXJnZXRDdHgsIG5ld0NpZCwgZXZlbnQgfHwgcGh4RXZlbnQsIHB1c2hPcHRzLCBjYWxsYmFjaylcbiAgICAgIH0gZWxzZSBpZihldmVudFR5cGUgPT09IFwic3VibWl0XCIpe1xuICAgICAgICBsZXQge3N1Ym1pdHRlcn0gPSBhcmdzXG4gICAgICAgIHRhcmdldFZpZXcuc3VibWl0Rm9ybShzb3VyY2VFbCwgdGFyZ2V0Q3R4LCBldmVudCB8fCBwaHhFdmVudCwgc3VibWl0dGVyLCBwdXNoT3B0cywgY2FsbGJhY2spXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRWaWV3LnB1c2hFdmVudChldmVudFR5cGUsIHNvdXJjZUVsLCB0YXJnZXRDdHgsIGV2ZW50IHx8IHBoeEV2ZW50LCBkYXRhLCBwdXNoT3B0cywgY2FsbGJhY2spXG4gICAgICB9XG4gICAgfSlcbiAgfSxcblxuICBleGVjX25hdmlnYXRlKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2hyZWYsIHJlcGxhY2V9KXtcbiAgICB2aWV3LmxpdmVTb2NrZXQuaGlzdG9yeVJlZGlyZWN0KGUsIGhyZWYsIHJlcGxhY2UgPyBcInJlcGxhY2VcIiA6IFwicHVzaFwiLCBudWxsLCBzb3VyY2VFbClcbiAgfSxcblxuICBleGVjX3BhdGNoKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2hyZWYsIHJlcGxhY2V9KXtcbiAgICB2aWV3LmxpdmVTb2NrZXQucHVzaEhpc3RvcnlQYXRjaChlLCBocmVmLCByZXBsYWNlID8gXCJyZXBsYWNlXCIgOiBcInB1c2hcIiwgc291cmNlRWwpXG4gIH0sXG5cbiAgZXhlY19mb2N1cyhlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gQVJJQS5hdHRlbXB0Rm9jdXMoZWwpKVxuICB9LFxuXG4gIGV4ZWNfZm9jdXNfZmlyc3QoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsKXtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IEFSSUEuZm9jdXNGaXJzdEludGVyYWN0aXZlKGVsKSB8fCBBUklBLmZvY3VzRmlyc3QoZWwpKVxuICB9LFxuXG4gIGV4ZWNfcHVzaF9mb2N1cyhlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gZm9jdXNTdGFjay5wdXNoKGVsIHx8IHNvdXJjZUVsKSlcbiAgfSxcblxuICBleGVjX3BvcF9mb2N1cyhfZSwgX2V2ZW50VHlwZSwgX3BoeEV2ZW50LCBfdmlldywgX3NvdXJjZUVsLCBfZWwpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgY29uc3QgZWwgPSBmb2N1c1N0YWNrLnBvcCgpXG4gICAgICBpZihlbCl7IGVsLmZvY3VzKCkgfVxuICAgIH0pXG4gIH0sXG5cbiAgZXhlY19hZGRfY2xhc3MoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7bmFtZXMsIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nfSl7XG4gICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG5hbWVzLCBbXSwgdHJhbnNpdGlvbiwgdGltZSwgdmlldywgYmxvY2tpbmcpXG4gIH0sXG5cbiAgZXhlY19yZW1vdmVfY2xhc3MoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7bmFtZXMsIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nfSl7XG4gICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBuYW1lcywgdHJhbnNpdGlvbiwgdGltZSwgdmlldywgYmxvY2tpbmcpXG4gIH0sXG5cbiAgZXhlY190b2dnbGVfY2xhc3MoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7bmFtZXMsIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nfSl7XG4gICAgdGhpcy50b2dnbGVDbGFzc2VzKGVsLCBuYW1lcywgdHJhbnNpdGlvbiwgdGltZSwgdmlldywgYmxvY2tpbmcpXG4gIH0sXG5cbiAgZXhlY190b2dnbGVfYXR0cihlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHthdHRyOiBbYXR0ciwgdmFsMSwgdmFsMl19KXtcbiAgICB0aGlzLnRvZ2dsZUF0dHIoZWwsIGF0dHIsIHZhbDEsIHZhbDIpXG4gIH0sXG5cbiAgZXhlY190cmFuc2l0aW9uKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge3RpbWUsIHRyYW5zaXRpb24sIGJsb2NraW5nfSl7XG4gICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBbXSwgdHJhbnNpdGlvbiwgdGltZSwgdmlldywgYmxvY2tpbmcpXG4gIH0sXG5cbiAgZXhlY190b2dnbGUoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7ZGlzcGxheSwgaW5zLCBvdXRzLCB0aW1lLCBibG9ja2luZ30pe1xuICAgIHRoaXMudG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIGlucywgb3V0cywgdGltZSwgYmxvY2tpbmcpXG4gIH0sXG5cbiAgZXhlY19zaG93KGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2Rpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nfSl7XG4gICAgdGhpcy5zaG93KGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nKVxuICB9LFxuXG4gIGV4ZWNfaGlkZShlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lLCBibG9ja2luZ30pe1xuICAgIHRoaXMuaGlkZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lLCBibG9ja2luZylcbiAgfSxcblxuICBleGVjX3NldF9hdHRyKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2F0dHI6IFthdHRyLCB2YWxdfSl7XG4gICAgdGhpcy5zZXRPclJlbW92ZUF0dHJzKGVsLCBbW2F0dHIsIHZhbF1dLCBbXSlcbiAgfSxcblxuICBleGVjX3JlbW92ZV9hdHRyKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2F0dHJ9KXtcbiAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtdLCBbYXR0cl0pXG4gIH0sXG5cbiAgLy8gdXRpbHMgZm9yIGNvbW1hbmRzXG5cbiAgc2hvdyhldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lLCBibG9ja2luZyl7XG4gICAgaWYoIXRoaXMuaXNWaXNpYmxlKGVsKSl7XG4gICAgICB0aGlzLnRvZ2dsZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCBudWxsLCB0aW1lLCBibG9ja2luZylcbiAgICB9XG4gIH0sXG5cbiAgaGlkZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lLCBibG9ja2luZyl7XG4gICAgaWYodGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgIHRoaXMudG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIG51bGwsIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nKVxuICAgIH1cbiAgfSxcblxuICB0b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgaW5zLCBvdXRzLCB0aW1lLCBibG9ja2luZyl7XG4gICAgdGltZSA9IHRpbWUgfHwgZGVmYXVsdF90cmFuc2l0aW9uX3RpbWVcbiAgICBsZXQgW2luQ2xhc3NlcywgaW5TdGFydENsYXNzZXMsIGluRW5kQ2xhc3Nlc10gPSBpbnMgfHwgW1tdLCBbXSwgW11dXG4gICAgbGV0IFtvdXRDbGFzc2VzLCBvdXRTdGFydENsYXNzZXMsIG91dEVuZENsYXNzZXNdID0gb3V0cyB8fCBbW10sIFtdLCBbXV1cbiAgICBpZihpbkNsYXNzZXMubGVuZ3RoID4gMCB8fCBvdXRDbGFzc2VzLmxlbmd0aCA+IDApe1xuICAgICAgaWYodGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgICAgbGV0IG9uU3RhcnQgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG91dFN0YXJ0Q2xhc3NlcywgaW5DbGFzc2VzLmNvbmNhdChpblN0YXJ0Q2xhc3NlcykuY29uY2F0KGluRW5kQ2xhc3NlcykpXG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgb3V0Q2xhc3NlcywgW10pXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBvdXRFbmRDbGFzc2VzLCBvdXRTdGFydENsYXNzZXMpKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9uRW5kID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBbXSwgb3V0Q2xhc3Nlcy5jb25jYXQob3V0RW5kQ2xhc3NlcykpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCIpXG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6aGlkZS1lbmRcIikpXG4gICAgICAgIH1cbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6aGlkZS1zdGFydFwiKSlcbiAgICAgICAgaWYoYmxvY2tpbmcgPT09IGZhbHNlKXtcbiAgICAgICAgICBvblN0YXJ0KClcbiAgICAgICAgICBzZXRUaW1lb3V0KG9uRW5kLCB0aW1lKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZpZXcudHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkVuZClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYoZXZlbnRUeXBlID09PSBcInJlbW92ZVwiKXsgcmV0dXJuIH1cbiAgICAgICAgbGV0IG9uU3RhcnQgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIGluU3RhcnRDbGFzc2VzLCBvdXRDbGFzc2VzLmNvbmNhdChvdXRTdGFydENsYXNzZXMpLmNvbmNhdChvdXRFbmRDbGFzc2VzKSlcbiAgICAgICAgICBsZXQgc3RpY2t5RGlzcGxheSA9IGRpc3BsYXkgfHwgdGhpcy5kZWZhdWx0RGlzcGxheShlbClcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBzdGlja3lEaXNwbGF5KVxuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIGluQ2xhc3NlcywgW10pXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBpbkVuZENsYXNzZXMsIGluU3RhcnRDbGFzc2VzKSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGxldCBvbkVuZCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIGluQ2xhc3Nlcy5jb25jYXQoaW5FbmRDbGFzc2VzKSlcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LWVuZFwiKSlcbiAgICAgICAgfVxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LXN0YXJ0XCIpKVxuICAgICAgICBpZihibG9ja2luZyA9PT0gZmFsc2Upe1xuICAgICAgICAgIG9uU3RhcnQoKVxuICAgICAgICAgIHNldFRpbWVvdXQob25FbmQsIHRpbWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmlldy50cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRW5kKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKHRoaXMuaXNWaXNpYmxlKGVsKSl7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OmhpZGUtc3RhcnRcIikpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCIpXG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6aGlkZS1lbmRcIikpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LXN0YXJ0XCIpKVxuICAgICAgICAgIGxldCBzdGlja3lEaXNwbGF5ID0gZGlzcGxheSB8fCB0aGlzLmRlZmF1bHREaXNwbGF5KGVsKVxuICAgICAgICAgIERPTS5wdXRTdGlja3koZWwsIFwidG9nZ2xlXCIsIGN1cnJlbnRFbCA9PiBjdXJyZW50RWwuc3R5bGUuZGlzcGxheSA9IHN0aWNreURpc3BsYXkpXG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6c2hvdy1lbmRcIikpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHRvZ2dsZUNsYXNzZXMoZWwsIGNsYXNzZXMsIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcsIGJsb2NraW5nKXtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGxldCBbcHJldkFkZHMsIHByZXZSZW1vdmVzXSA9IERPTS5nZXRTdGlja3koZWwsIFwiY2xhc3Nlc1wiLCBbW10sIFtdXSlcbiAgICAgIGxldCBuZXdBZGRzID0gY2xhc3Nlcy5maWx0ZXIobmFtZSA9PiBwcmV2QWRkcy5pbmRleE9mKG5hbWUpIDwgMCAmJiAhZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKVxuICAgICAgbGV0IG5ld1JlbW92ZXMgPSBjbGFzc2VzLmZpbHRlcihuYW1lID0+IHByZXZSZW1vdmVzLmluZGV4T2YobmFtZSkgPCAwICYmIGVsLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKSlcbiAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBuZXdBZGRzLCBuZXdSZW1vdmVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3LCBibG9ja2luZylcbiAgICB9KVxuICB9LFxuXG4gIHRvZ2dsZUF0dHIoZWwsIGF0dHIsIHZhbDEsIHZhbDIpe1xuICAgIGlmKGVsLmhhc0F0dHJpYnV0ZShhdHRyKSl7XG4gICAgICBpZih2YWwyICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAvLyB0b2dnbGUgYmV0d2VlbiB2YWwxIGFuZCB2YWwyXG4gICAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZShhdHRyKSA9PT0gdmFsMSl7XG4gICAgICAgICAgdGhpcy5zZXRPclJlbW92ZUF0dHJzKGVsLCBbW2F0dHIsIHZhbDJdXSwgW10pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRPclJlbW92ZUF0dHJzKGVsLCBbW2F0dHIsIHZhbDFdXSwgW10pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlbW92ZSBhdHRyXG4gICAgICAgIHRoaXMuc2V0T3JSZW1vdmVBdHRycyhlbCwgW10sIFthdHRyXSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRPclJlbW92ZUF0dHJzKGVsLCBbW2F0dHIsIHZhbDFdXSwgW10pXG4gICAgfVxuICB9LFxuXG4gIGFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgYWRkcywgcmVtb3ZlcywgdHJhbnNpdGlvbiwgdGltZSwgdmlldywgYmxvY2tpbmcpe1xuICAgIHRpbWUgPSB0aW1lIHx8IGRlZmF1bHRfdHJhbnNpdGlvbl90aW1lXG4gICAgbGV0IFt0cmFuc2l0aW9uUnVuLCB0cmFuc2l0aW9uU3RhcnQsIHRyYW5zaXRpb25FbmRdID0gdHJhbnNpdGlvbiB8fCBbW10sIFtdLCBbXV1cbiAgICBpZih0cmFuc2l0aW9uUnVuLmxlbmd0aCA+IDApe1xuICAgICAgbGV0IG9uU3RhcnQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCB0cmFuc2l0aW9uU3RhcnQsIFtdLmNvbmNhdCh0cmFuc2l0aW9uUnVuKS5jb25jYXQodHJhbnNpdGlvbkVuZCkpXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCB0cmFuc2l0aW9uUnVuLCBbXSlcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCB0cmFuc2l0aW9uRW5kLCB0cmFuc2l0aW9uU3RhcnQpKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgbGV0IG9uRG9uZSA9ICgpID0+IHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBhZGRzLmNvbmNhdCh0cmFuc2l0aW9uRW5kKSwgcmVtb3Zlcy5jb25jYXQodHJhbnNpdGlvblJ1bikuY29uY2F0KHRyYW5zaXRpb25TdGFydCkpXG4gICAgICBpZihibG9ja2luZyA9PT0gZmFsc2Upe1xuICAgICAgICBvblN0YXJ0KClcbiAgICAgICAgc2V0VGltZW91dChvbkRvbmUsIHRpbWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2aWV3LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lKVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBsZXQgW3ByZXZBZGRzLCBwcmV2UmVtb3Zlc10gPSBET00uZ2V0U3RpY2t5KGVsLCBcImNsYXNzZXNcIiwgW1tdLCBbXV0pXG4gICAgICBsZXQga2VlcEFkZHMgPSBhZGRzLmZpbHRlcihuYW1lID0+IHByZXZBZGRzLmluZGV4T2YobmFtZSkgPCAwICYmICFlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSkpXG4gICAgICBsZXQga2VlcFJlbW92ZXMgPSByZW1vdmVzLmZpbHRlcihuYW1lID0+IHByZXZSZW1vdmVzLmluZGV4T2YobmFtZSkgPCAwICYmIGVsLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKSlcbiAgICAgIGxldCBuZXdBZGRzID0gcHJldkFkZHMuZmlsdGVyKG5hbWUgPT4gcmVtb3Zlcy5pbmRleE9mKG5hbWUpIDwgMCkuY29uY2F0KGtlZXBBZGRzKVxuICAgICAgbGV0IG5ld1JlbW92ZXMgPSBwcmV2UmVtb3Zlcy5maWx0ZXIobmFtZSA9PiBhZGRzLmluZGV4T2YobmFtZSkgPCAwKS5jb25jYXQoa2VlcFJlbW92ZXMpXG5cbiAgICAgIERPTS5wdXRTdGlja3koZWwsIFwiY2xhc3Nlc1wiLCBjdXJyZW50RWwgPT4ge1xuICAgICAgICBjdXJyZW50RWwuY2xhc3NMaXN0LnJlbW92ZSguLi5uZXdSZW1vdmVzKVxuICAgICAgICBjdXJyZW50RWwuY2xhc3NMaXN0LmFkZCguLi5uZXdBZGRzKVxuICAgICAgICByZXR1cm4gW25ld0FkZHMsIG5ld1JlbW92ZXNdXG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG5cbiAgc2V0T3JSZW1vdmVBdHRycyhlbCwgc2V0cywgcmVtb3Zlcyl7XG4gICAgbGV0IFtwcmV2U2V0cywgcHJldlJlbW92ZXNdID0gRE9NLmdldFN0aWNreShlbCwgXCJhdHRyc1wiLCBbW10sIFtdXSlcblxuICAgIGxldCBhbHRlcmVkQXR0cnMgPSBzZXRzLm1hcCgoW2F0dHIsIF92YWxdKSA9PiBhdHRyKS5jb25jYXQocmVtb3ZlcylcbiAgICBsZXQgbmV3U2V0cyA9IHByZXZTZXRzLmZpbHRlcigoW2F0dHIsIF92YWxdKSA9PiAhYWx0ZXJlZEF0dHJzLmluY2x1ZGVzKGF0dHIpKS5jb25jYXQoc2V0cylcbiAgICBsZXQgbmV3UmVtb3ZlcyA9IHByZXZSZW1vdmVzLmZpbHRlcigoYXR0cikgPT4gIWFsdGVyZWRBdHRycy5pbmNsdWRlcyhhdHRyKSkuY29uY2F0KHJlbW92ZXMpXG5cbiAgICBET00ucHV0U3RpY2t5KGVsLCBcImF0dHJzXCIsIGN1cnJlbnRFbCA9PiB7XG4gICAgICBuZXdSZW1vdmVzLmZvckVhY2goYXR0ciA9PiBjdXJyZW50RWwucmVtb3ZlQXR0cmlidXRlKGF0dHIpKVxuICAgICAgbmV3U2V0cy5mb3JFYWNoKChbYXR0ciwgdmFsXSkgPT4gY3VycmVudEVsLnNldEF0dHJpYnV0ZShhdHRyLCB2YWwpKVxuICAgICAgcmV0dXJuIFtuZXdTZXRzLCBuZXdSZW1vdmVzXVxuICAgIH0pXG4gIH0sXG5cbiAgaGFzQWxsQ2xhc3NlcyhlbCwgY2xhc3Nlcyl7IHJldHVybiBjbGFzc2VzLmV2ZXJ5KG5hbWUgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKSB9LFxuXG4gIGlzVG9nZ2xlZE91dChlbCwgb3V0Q2xhc3Nlcyl7XG4gICAgcmV0dXJuICF0aGlzLmlzVmlzaWJsZShlbCkgfHwgdGhpcy5oYXNBbGxDbGFzc2VzKGVsLCBvdXRDbGFzc2VzKVxuICB9LFxuXG4gIGZpbHRlclRvRWxzKGxpdmVTb2NrZXQsIHNvdXJjZUVsLCB7dG99KXtcbiAgICBsZXQgZGVmYXVsdFF1ZXJ5ID0gKCkgPT4ge1xuICAgICAgaWYodHlwZW9mKHRvKSA9PT0gXCJzdHJpbmdcIil7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRvKVxuICAgICAgfSBlbHNlIGlmKHRvLmNsb3Nlc3Qpe1xuICAgICAgICBsZXQgdG9FbCA9IHNvdXJjZUVsLmNsb3Nlc3QodG8uY2xvc2VzdClcbiAgICAgICAgcmV0dXJuIHRvRWwgPyBbdG9FbF0gOiBbXVxuICAgICAgfSBlbHNlIGlmKHRvLmlubmVyKXtcbiAgICAgICAgcmV0dXJuIHNvdXJjZUVsLnF1ZXJ5U2VsZWN0b3JBbGwodG8uaW5uZXIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0byA/IGxpdmVTb2NrZXQuanNRdWVyeVNlbGVjdG9yQWxsKHNvdXJjZUVsLCB0bywgZGVmYXVsdFF1ZXJ5KSA6IFtzb3VyY2VFbF1cbiAgfSxcblxuICBkZWZhdWx0RGlzcGxheShlbCl7XG4gICAgcmV0dXJuIHt0cjogXCJ0YWJsZS1yb3dcIiwgdGQ6IFwidGFibGUtY2VsbFwifVtlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCldIHx8IFwiYmxvY2tcIlxuICB9LFxuXG4gIHRyYW5zaXRpb25DbGFzc2VzKHZhbCl7XG4gICAgaWYoIXZhbCl7IHJldHVybiBudWxsIH1cblxuICAgIGxldCBbdHJhbnMsIHRTdGFydCwgdEVuZF0gPSBBcnJheS5pc0FycmF5KHZhbCkgPyB2YWwgOiBbdmFsLnNwbGl0KFwiIFwiKSwgW10sIFtdXVxuICAgIHRyYW5zID0gQXJyYXkuaXNBcnJheSh0cmFucykgPyB0cmFucyA6IHRyYW5zLnNwbGl0KFwiIFwiKVxuICAgIHRTdGFydCA9IEFycmF5LmlzQXJyYXkodFN0YXJ0KSA/IHRTdGFydCA6IHRTdGFydC5zcGxpdChcIiBcIilcbiAgICB0RW5kID0gQXJyYXkuaXNBcnJheSh0RW5kKSA/IHRFbmQgOiB0RW5kLnNwbGl0KFwiIFwiKVxuICAgIHJldHVybiBbdHJhbnMsIHRTdGFydCwgdEVuZF1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBKU1xuIiwgImltcG9ydCBKUyBmcm9tIFwiLi9qc1wiXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5cbmNvbnN0IEhPT0tfSUQgPSBcImhvb2tJZFwiXG5cbmxldCB2aWV3SG9va0lEID0gMVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlld0hvb2sge1xuICBzdGF0aWMgbWFrZUlEKCl7IHJldHVybiB2aWV3SG9va0lEKysgfVxuICBzdGF0aWMgZWxlbWVudElEKGVsKXsgcmV0dXJuIERPTS5wcml2YXRlKGVsLCBIT09LX0lEKSB9XG5cbiAgY29uc3RydWN0b3IodmlldywgZWwsIGNhbGxiYWNrcyl7XG4gICAgdGhpcy5lbCA9IGVsXG4gICAgdGhpcy5fX2F0dGFjaFZpZXcodmlldylcbiAgICB0aGlzLl9fY2FsbGJhY2tzID0gY2FsbGJhY2tzXG4gICAgdGhpcy5fX2xpc3RlbmVycyA9IG5ldyBTZXQoKVxuICAgIHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCA9IGZhbHNlXG4gICAgRE9NLnB1dFByaXZhdGUodGhpcy5lbCwgSE9PS19JRCwgdGhpcy5jb25zdHJ1Y3Rvci5tYWtlSUQoKSlcbiAgICBmb3IobGV0IGtleSBpbiB0aGlzLl9fY2FsbGJhY2tzKXsgdGhpc1trZXldID0gdGhpcy5fX2NhbGxiYWNrc1trZXldIH1cbiAgfVxuXG4gIF9fYXR0YWNoVmlldyh2aWV3KXtcbiAgICBpZih2aWV3KXtcbiAgICAgIHRoaXMuX192aWV3ID0gKCkgPT4gdmlld1xuICAgICAgdGhpcy5saXZlU29ja2V0ID0gdmlldy5saXZlU29ja2V0XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX192aWV3ID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGhvb2sgbm90IHlldCBhdHRhY2hlZCB0byBhIGxpdmUgdmlldzogJHt0aGlzLmVsLm91dGVySFRNTH1gKVxuICAgICAgfVxuICAgICAgdGhpcy5saXZlU29ja2V0ID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIF9fbW91bnRlZCgpeyB0aGlzLm1vdW50ZWQgJiYgdGhpcy5tb3VudGVkKCkgfVxuICBfX3VwZGF0ZWQoKXsgdGhpcy51cGRhdGVkICYmIHRoaXMudXBkYXRlZCgpIH1cbiAgX19iZWZvcmVVcGRhdGUoKXsgdGhpcy5iZWZvcmVVcGRhdGUgJiYgdGhpcy5iZWZvcmVVcGRhdGUoKSB9XG4gIF9fZGVzdHJveWVkKCl7XG4gICAgdGhpcy5kZXN0cm95ZWQgJiYgdGhpcy5kZXN0cm95ZWQoKVxuICAgIERPTS5kZWxldGVQcml2YXRlKHRoaXMuZWwsIEhPT0tfSUQpIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9waG9lbml4ZnJhbWV3b3JrL3Bob2VuaXhfbGl2ZV92aWV3L2lzc3Vlcy8zNDk2XG4gIH1cbiAgX19yZWNvbm5lY3RlZCgpe1xuICAgIGlmKHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCl7XG4gICAgICB0aGlzLl9faXNEaXNjb25uZWN0ZWQgPSBmYWxzZVxuICAgICAgdGhpcy5yZWNvbm5lY3RlZCAmJiB0aGlzLnJlY29ubmVjdGVkKClcbiAgICB9XG4gIH1cbiAgX19kaXNjb25uZWN0ZWQoKXtcbiAgICB0aGlzLl9faXNEaXNjb25uZWN0ZWQgPSB0cnVlXG4gICAgdGhpcy5kaXNjb25uZWN0ZWQgJiYgdGhpcy5kaXNjb25uZWN0ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEJpbmRzIHRoZSBob29rIHRvIEpTIGNvbW1hbmRzLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZpZXdIb29rfSBob29rIC0gVGhlIFZpZXdIb29rIGluc3RhbmNlIHRvIGJpbmQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCB3aXRoIG1ldGhvZHMgdG8gbWFuaXB1bGF0ZSB0aGUgRE9NIGFuZCBleGVjdXRlIEphdmFTY3JpcHQuXG4gICAqL1xuICBqcygpe1xuICAgIGxldCBob29rID0gdGhpc1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogRXhlY3V0ZXMgZW5jb2RlZCBKYXZhU2NyaXB0IGluIHRoZSBjb250ZXh0IG9mIHRoZSBob29rIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGVuY29kZWRKUyAtIFRoZSBlbmNvZGVkIEphdmFTY3JpcHQgc3RyaW5nIHRvIGV4ZWN1dGUuXG4gICAgICAgKi9cbiAgICAgIGV4ZWMoZW5jb2RlZEpTKXtcbiAgICAgICAgaG9vay5fX3ZpZXcoKS5saXZlU29ja2V0LmV4ZWNKUyhob29rLmVsLCBlbmNvZGVkSlMsIFwiaG9va1wiKVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBTaG93cyBhbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gc2hvdy5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz17fV0gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5kaXNwbGF5XSAtIFRoZSBDU1MgZGlzcGxheSB2YWx1ZSB0byBzZXQuIERlZmF1bHRzIFwiYmxvY2tcIi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy50cmFuc2l0aW9uXSAtIFRoZSBDU1MgdHJhbnNpdGlvbiBjbGFzc2VzIHRvIHNldCB3aGVuIHNob3dpbmcuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZV0gLSBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHRzIDIwMC5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuYmxvY2tpbmddIC0gVGhlIGJvb2xlYW4gZmxhZyB0byBibG9jayB0aGUgVUkgZHVyaW5nIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICogIERlZmF1bHRzIGB0cnVlYC5cbiAgICAgICAqL1xuICAgICAgc2hvdyhlbCwgb3B0cyA9IHt9KXtcbiAgICAgICAgbGV0IG93bmVyID0gaG9vay5fX3ZpZXcoKS5saXZlU29ja2V0Lm93bmVyKGVsKVxuICAgICAgICBKUy5zaG93KFwiaG9va1wiLCBvd25lciwgZWwsIG9wdHMuZGlzcGxheSwgb3B0cy50cmFuc2l0aW9uLCBvcHRzLnRpbWUsIG9wdHMuYmxvY2tpbmcpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEhpZGVzIGFuIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byBoaWRlLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnRyYW5zaXRpb25dIC0gVGhlIENTUyB0cmFuc2l0aW9uIGNsYXNzZXMgdG8gc2V0IHdoZW4gaGlkaW5nLlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVdIC0gVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLiBEZWZhdWx0cyAyMDAuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmJsb2NraW5nXSAtIFRoZSBib29sZWFuIGZsYWcgdG8gYmxvY2sgdGhlIFVJIGR1cmluZyB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAqICAgRGVmYXVsdHMgYHRydWVgLlxuICAgICAgICovXG4gICAgICBoaWRlKGVsLCBvcHRzID0ge30pe1xuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIEpTLmhpZGUoXCJob29rXCIsIG93bmVyLCBlbCwgbnVsbCwgb3B0cy50cmFuc2l0aW9uLCBvcHRzLnRpbWUsIG9wdHMuYmxvY2tpbmcpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRvZ2dsZXMgdGhlIHZpc2liaWxpdHkgb2YgYW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIHRvZ2dsZS5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz17fV0gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5kaXNwbGF5XSAtIFRoZSBDU1MgZGlzcGxheSB2YWx1ZSB0byBzZXQuIERlZmF1bHRzIFwiYmxvY2tcIi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pbl0gLSBUaGUgQ1NTIHRyYW5zaXRpb24gY2xhc3NlcyBmb3Igc2hvd2luZy5cbiAgICAgICAqICAgQWNjZXB0cyBlaXRoZXIgdGhlIHN0cmluZyBvZiBjbGFzc2VzIHRvIGFwcGx5IHdoZW4gdG9nZ2xpbmcgaW4sIG9yXG4gICAgICAgKiAgIGEgMy10dXBsZSBjb250YWluaW5nIHRoZSB0cmFuc2l0aW9uIGNsYXNzLCB0aGUgY2xhc3MgdG8gYXBwbHlcbiAgICAgICAqICAgdG8gc3RhcnQgdGhlIHRyYW5zaXRpb24sIGFuZCB0aGUgZW5kaW5nIHRyYW5zaXRpb24gY2xhc3MsIHN1Y2ggYXM6XG4gICAgICAgKlxuICAgICAgICogICAgICAgW1wiZWFzZS1vdXQgZHVyYXRpb24tMzAwXCIsIFwib3BhY2l0eS0wXCIsIFwib3BhY2l0eS0xMDBcIl1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMub3V0XSAtIFRoZSBDU1MgdHJhbnNpdGlvbiBjbGFzc2VzIGZvciBoaWRpbmcuXG4gICAgICAgKiAgIEFjY2VwdHMgZWl0aGVyIHN0cmluZyBvZiBjbGFzc2VzIHRvIGFwcGx5IHdoZW4gdG9nZ2xpbmcgb3V0LCBvclxuICAgICAgICogICBhIDMtdHVwbGUgY29udGFpbmluZyB0aGUgdHJhbnNpdGlvbiBjbGFzcywgdGhlIGNsYXNzIHRvIGFwcGx5XG4gICAgICAgKiAgIHRvIHN0YXJ0IHRoZSB0cmFuc2l0aW9uLCBhbmQgdGhlIGVuZGluZyB0cmFuc2l0aW9uIGNsYXNzLCBzdWNoIGFzOlxuICAgICAgICpcbiAgICAgICAqICAgICAgIFtcImVhc2Utb3V0IGR1cmF0aW9uLTMwMFwiLCBcIm9wYWNpdHktMTAwXCIsIFwib3BhY2l0eS0wXCJdXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVdIC0gVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuYmxvY2tpbmddIC0gVGhlIGJvb2xlYW4gZmxhZyB0byBibG9jayB0aGUgVUkgZHVyaW5nIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICogICBEZWZhdWx0cyBgdHJ1ZWAuXG4gICAgICAgKi9cbiAgICAgIHRvZ2dsZShlbCwgb3B0cyA9IHt9KXtcbiAgICAgICAgbGV0IG93bmVyID0gaG9vay5fX3ZpZXcoKS5saXZlU29ja2V0Lm93bmVyKGVsKVxuICAgICAgICBvcHRzLmluID0gSlMudHJhbnNpdGlvbkNsYXNzZXMob3B0cy5pbilcbiAgICAgICAgb3B0cy5vdXQgPSBKUy50cmFuc2l0aW9uQ2xhc3NlcyhvcHRzLm91dClcbiAgICAgICAgSlMudG9nZ2xlKFwiaG9va1wiLCBvd25lciwgZWwsIG9wdHMuZGlzcGxheSwgb3B0cy5pbiwgb3B0cy5vdXQsIG9wdHMudGltZSwgb3B0cy5ibG9ja2luZylcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQWRkcyBDU1MgY2xhc3NlcyB0byBhbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gYWRkIGNsYXNzZXMgdG8uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gbmFtZXMgLSBUaGUgY2xhc3MgbmFtZShzKSB0byBhZGQuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9e31dIC0gT3B0aW9uYWwgc2V0dGluZ3MuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMudHJhbnNpdGlvbl0gLSBUaGUgQ1NTIHRyYW5zaXRpb24gcHJvcGVydHkgdG8gc2V0LlxuICAgICAgICogICBBY2NlcHRzIGEgc3RyaW5nIG9mIGNsYXNzZXMgdG8gYXBwbHkgd2hlbiBhZGRpbmcgY2xhc3NlcyBvclxuICAgICAgICogICBhIDMtdHVwbGUgY29udGFpbmluZyB0aGUgdHJhbnNpdGlvbiBjbGFzcywgdGhlIGNsYXNzIHRvIGFwcGx5XG4gICAgICAgKiAgIHRvIHN0YXJ0IHRoZSB0cmFuc2l0aW9uLCBhbmQgdGhlIGVuZGluZyB0cmFuc2l0aW9uIGNsYXNzLCBzdWNoIGFzOlxuICAgICAgICpcbiAgICAgICAqICAgICAgIFtcImVhc2Utb3V0IGR1cmF0aW9uLTMwMFwiLCBcIm9wYWNpdHktMFwiLCBcIm9wYWNpdHktMTAwXCJdXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVdIC0gVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5ibG9ja2luZ10gLSBUaGUgYm9vbGVhbiBmbGFnIHRvIGJsb2NrIHRoZSBVSSBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgKiAgIERlZmF1bHRzIGB0cnVlYC5cbiAgICAgICAqL1xuICAgICAgYWRkQ2xhc3MoZWwsIG5hbWVzLCBvcHRzID0ge30pe1xuICAgICAgICBuYW1lcyA9IEFycmF5LmlzQXJyYXkobmFtZXMpID8gbmFtZXMgOiBuYW1lcy5zcGxpdChcIiBcIilcbiAgICAgICAgbGV0IG93bmVyID0gaG9vay5fX3ZpZXcoKS5saXZlU29ja2V0Lm93bmVyKGVsKVxuICAgICAgICBKUy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG5hbWVzLCBbXSwgb3B0cy50cmFuc2l0aW9uLCBvcHRzLnRpbWUsIG93bmVyLCBvcHRzLmJsb2NraW5nKVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIENTUyBjbGFzc2VzIGZyb20gYW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIHJlbW92ZSBjbGFzc2VzIGZyb20uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gbmFtZXMgLSBUaGUgY2xhc3MgbmFtZShzKSB0byByZW1vdmUuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9e31dIC0gT3B0aW9uYWwgc2V0dGluZ3MuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMudHJhbnNpdGlvbl0gLSBUaGUgQ1NTIHRyYW5zaXRpb24gY2xhc3NlcyB0byBzZXQuXG4gICAgICAgKiAgIEFjY2VwdHMgYSBzdHJpbmcgb2YgY2xhc3NlcyB0byBhcHBseSB3aGVuIHJlbW92aW5nIGNsYXNzZXMgb3JcbiAgICAgICAqICAgYSAzLXR1cGxlIGNvbnRhaW5pbmcgdGhlIHRyYW5zaXRpb24gY2xhc3MsIHRoZSBjbGFzcyB0byBhcHBseVxuICAgICAgICogICB0byBzdGFydCB0aGUgdHJhbnNpdGlvbiwgYW5kIHRoZSBlbmRpbmcgdHJhbnNpdGlvbiBjbGFzcywgc3VjaCBhczpcbiAgICAgICAqXG4gICAgICAgKiAgICAgICBbXCJlYXNlLW91dCBkdXJhdGlvbi0zMDBcIiwgXCJvcGFjaXR5LTEwMFwiLCBcIm9wYWNpdHktMFwiXVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy50aW1lXSAtIFRoZSB0cmFuc2l0aW9uIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuYmxvY2tpbmddIC0gVGhlIGJvb2xlYW4gZmxhZyB0byBibG9jayB0aGUgVUkgZHVyaW5nIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICogICBEZWZhdWx0cyBgdHJ1ZWAuXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUNsYXNzKGVsLCBuYW1lcywgb3B0cyA9IHt9KXtcbiAgICAgICAgb3B0cy50cmFuc2l0aW9uID0gSlMudHJhbnNpdGlvbkNsYXNzZXMob3B0cy50cmFuc2l0aW9uKVxuICAgICAgICBuYW1lcyA9IEFycmF5LmlzQXJyYXkobmFtZXMpID8gbmFtZXMgOiBuYW1lcy5zcGxpdChcIiBcIilcbiAgICAgICAgbGV0IG93bmVyID0gaG9vay5fX3ZpZXcoKS5saXZlU29ja2V0Lm93bmVyKGVsKVxuICAgICAgICBKUy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBuYW1lcywgb3B0cy50cmFuc2l0aW9uLCBvcHRzLnRpbWUsIG93bmVyLCBvcHRzLmJsb2NraW5nKVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUb2dnbGVzIENTUyBjbGFzc2VzIG9uIGFuIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byB0b2dnbGUgY2xhc3NlcyBvbi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBuYW1lcyAtIFRoZSBjbGFzcyBuYW1lKHMpIHRvIHRvZ2dsZS5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz17fV0gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy50cmFuc2l0aW9uXSAtIFRoZSBDU1MgdHJhbnNpdGlvbiBjbGFzc2VzIHRvIHNldC5cbiAgICAgICAqICAgQWNjZXB0cyBhIHN0cmluZyBvZiBjbGFzc2VzIHRvIGFwcGx5IHdoZW4gdG9nZ2xpbmcgY2xhc3NlcyBvclxuICAgICAgICogICBhIDMtdHVwbGUgY29udGFpbmluZyB0aGUgdHJhbnNpdGlvbiBjbGFzcywgdGhlIGNsYXNzIHRvIGFwcGx5XG4gICAgICAgKiAgIHRvIHN0YXJ0IHRoZSB0cmFuc2l0aW9uLCBhbmQgdGhlIGVuZGluZyB0cmFuc2l0aW9uIGNsYXNzLCBzdWNoIGFzOlxuICAgICAgICpcbiAgICAgICAqICAgICAgIFtcImVhc2Utb3V0IGR1cmF0aW9uLTMwMFwiLCBcIm9wYWNpdHktMTAwXCIsIFwib3BhY2l0eS0wXCJdXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVdIC0gVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5ibG9ja2luZ10gLSBUaGUgYm9vbGVhbiBmbGFnIHRvIGJsb2NrIHRoZSBVSSBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgKiAgIERlZmF1bHRzIGB0cnVlYC5cbiAgICAgICAqL1xuICAgICAgdG9nZ2xlQ2xhc3MoZWwsIG5hbWVzLCBvcHRzID0ge30pe1xuICAgICAgICBvcHRzLnRyYW5zaXRpb24gPSBKUy50cmFuc2l0aW9uQ2xhc3NlcyhvcHRzLnRyYW5zaXRpb24pXG4gICAgICAgIG5hbWVzID0gQXJyYXkuaXNBcnJheShuYW1lcykgPyBuYW1lcyA6IG5hbWVzLnNwbGl0KFwiIFwiKVxuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIEpTLnRvZ2dsZUNsYXNzZXMoZWwsIG5hbWVzLCBvcHRzLnRyYW5zaXRpb24sIG9wdHMudGltZSwgb3duZXIsIG9wdHMuYmxvY2tpbmcpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEFwcGxpZXMgYSBDU1MgdHJhbnNpdGlvbiB0byBhbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gYXBwbHkgdGhlIHRyYW5zaXRpb24gdG8uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gdHJhbnNpdGlvbiAtIFRoZSB0cmFuc2l0aW9uIGNsYXNzKGVzKSB0byBhcHBseS5cbiAgICAgICAqICAgQWNjZXB0cyBhIHN0cmluZyBvZiBjbGFzc2VzIHRvIGFwcGx5IHdoZW4gdHJhbnNpdGlvbmluZyBvclxuICAgICAgICogICBhIDMtdHVwbGUgY29udGFpbmluZyB0aGUgdHJhbnNpdGlvbiBjbGFzcywgdGhlIGNsYXNzIHRvIGFwcGx5XG4gICAgICAgKiAgIHRvIHN0YXJ0IHRoZSB0cmFuc2l0aW9uLCBhbmQgdGhlIGVuZGluZyB0cmFuc2l0aW9uIGNsYXNzLCBzdWNoIGFzOlxuICAgICAgICpcbiAgICAgICAqICAgICAgIFtcImVhc2Utb3V0IGR1cmF0aW9uLTMwMFwiLCBcIm9wYWNpdHktMTAwXCIsIFwib3BhY2l0eS0wXCJdXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVdIC0gVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5ibG9ja2luZ10gLSBUaGUgYm9vbGVhbiBmbGFnIHRvIGJsb2NrIHRoZSBVSSBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgKiAgIERlZmF1bHRzIGB0cnVlYC5cbiAgICAgICAqL1xuICAgICAgdHJhbnNpdGlvbihlbCwgdHJhbnNpdGlvbiwgb3B0cyA9IHt9KXtcbiAgICAgICAgbGV0IG93bmVyID0gaG9vay5fX3ZpZXcoKS5saXZlU29ja2V0Lm93bmVyKGVsKVxuICAgICAgICBKUy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBbXSwgSlMudHJhbnNpdGlvbkNsYXNzZXModHJhbnNpdGlvbiksIG9wdHMudGltZSwgb3duZXIsIG9wdHMuYmxvY2tpbmcpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgYW4gYXR0cmlidXRlIG9uIGFuIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byBzZXQgdGhlIGF0dHJpYnV0ZSBvbi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyIC0gVGhlIGF0dHJpYnV0ZSBuYW1lIHRvIHNldC5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgLSBUaGUgdmFsdWUgdG8gc2V0IGZvciB0aGUgYXR0cmlidXRlLlxuICAgICAgICovXG4gICAgICBzZXRBdHRyaWJ1dGUoZWwsIGF0dHIsIHZhbCl7IEpTLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsXV0sIFtdKSB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgYW4gYXR0cmlidXRlIGZyb20gYW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIHJlbW92ZSB0aGUgYXR0cmlidXRlIGZyb20uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0ciAtIFRoZSBhdHRyaWJ1dGUgbmFtZSB0byByZW1vdmUuXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUF0dHJpYnV0ZShlbCwgYXR0cil7IEpTLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtdLCBbYXR0cl0pIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVG9nZ2xlcyBhbiBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudCBiZXR3ZWVuIHR3byB2YWx1ZXMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byB0b2dnbGUgdGhlIGF0dHJpYnV0ZSBvbi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyIC0gVGhlIGF0dHJpYnV0ZSBuYW1lIHRvIHRvZ2dsZS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWwxIC0gVGhlIGZpcnN0IHZhbHVlIHRvIHRvZ2dsZSBiZXR3ZWVuLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbDIgLSBUaGUgc2Vjb25kIHZhbHVlIHRvIHRvZ2dsZSBiZXR3ZWVuLlxuICAgICAgICovXG4gICAgICB0b2dnbGVBdHRyaWJ1dGUoZWwsIGF0dHIsIHZhbDEsIHZhbDIpeyBKUy50b2dnbGVBdHRyKGVsLCBhdHRyLCB2YWwxLCB2YWwyKSB9LFxuICAgIH1cbiAgfVxuXG4gIHB1c2hFdmVudChldmVudCwgcGF5bG9hZCA9IHt9LCBvblJlcGx5KXtcbiAgICBpZihvblJlcGx5ID09PSB1bmRlZmluZWQpe1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZWYgPSB0aGlzLl9fdmlldygpLnB1c2hIb29rRXZlbnQodGhpcy5lbCwgbnVsbCwgZXZlbnQsIHBheWxvYWQsIChyZXBseSwgX3JlZikgPT4gcmVzb2x2ZShyZXBseSkpXG4gICAgICAgICAgaWYocmVmID09PSBmYWxzZSl7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwidW5hYmxlIHRvIHB1c2ggaG9vayBldmVudC4gTGl2ZVZpZXcgbm90IGNvbm5lY3RlZFwiKSlcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKXtcbiAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9fdmlldygpLnB1c2hIb29rRXZlbnQodGhpcy5lbCwgbnVsbCwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkpXG4gIH1cblxuICBwdXNoRXZlbnRUbyhwaHhUYXJnZXQsIGV2ZW50LCBwYXlsb2FkID0ge30sIG9uUmVwbHkpe1xuICAgIGlmKG9uUmVwbHkgPT09IHVuZGVmaW5lZCl7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuX192aWV3KCkud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsICh2aWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlZiA9IHZpZXcucHVzaEhvb2tFdmVudCh0aGlzLmVsLCB0YXJnZXRDdHgsIGV2ZW50LCBwYXlsb2FkLCAocmVwbHksIF9yZWYpID0+IHJlc29sdmUocmVwbHkpKVxuICAgICAgICAgICAgaWYocmVmID09PSBmYWxzZSl7XG4gICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJ1bmFibGUgdG8gcHVzaCBob29rIGV2ZW50LiBMaXZlVmlldyBub3QgY29ubmVjdGVkXCIpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKXtcbiAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9fdmlldygpLndpdGhpblRhcmdldHMocGh4VGFyZ2V0LCAodmlldywgdGFyZ2V0Q3R4KSA9PiB7XG4gICAgICByZXR1cm4gdmlldy5wdXNoSG9va0V2ZW50KHRoaXMuZWwsIHRhcmdldEN0eCwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkpXG4gICAgfSlcbiAgfVxuXG4gIGhhbmRsZUV2ZW50KGV2ZW50LCBjYWxsYmFjayl7XG4gICAgbGV0IGNhbGxiYWNrUmVmID0gKGN1c3RvbUV2ZW50LCBieXBhc3MpID0+IGJ5cGFzcyA/IGV2ZW50IDogY2FsbGJhY2soY3VzdG9tRXZlbnQuZGV0YWlsKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGBwaHg6JHtldmVudH1gLCBjYWxsYmFja1JlZilcbiAgICB0aGlzLl9fbGlzdGVuZXJzLmFkZChjYWxsYmFja1JlZilcbiAgICByZXR1cm4gY2FsbGJhY2tSZWZcbiAgfVxuXG4gIHJlbW92ZUhhbmRsZUV2ZW50KGNhbGxiYWNrUmVmKXtcbiAgICBsZXQgZXZlbnQgPSBjYWxsYmFja1JlZihudWxsLCB0cnVlKVxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGBwaHg6JHtldmVudH1gLCBjYWxsYmFja1JlZilcbiAgICB0aGlzLl9fbGlzdGVuZXJzLmRlbGV0ZShjYWxsYmFja1JlZilcbiAgfVxuXG4gIHVwbG9hZChuYW1lLCBmaWxlcyl7XG4gICAgcmV0dXJuIHRoaXMuX192aWV3KCkuZGlzcGF0Y2hVcGxvYWRzKG51bGwsIG5hbWUsIGZpbGVzKVxuICB9XG5cbiAgdXBsb2FkVG8ocGh4VGFyZ2V0LCBuYW1lLCBmaWxlcyl7XG4gICAgcmV0dXJuIHRoaXMuX192aWV3KCkud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsICh2aWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIHZpZXcuZGlzcGF0Y2hVcGxvYWRzKHRhcmdldEN0eCwgbmFtZSwgZmlsZXMpXG4gICAgfSlcbiAgfVxuXG4gIF9fY2xlYW51cF9fKCl7XG4gICAgdGhpcy5fX2xpc3RlbmVycy5mb3JFYWNoKGNhbGxiYWNrUmVmID0+IHRoaXMucmVtb3ZlSGFuZGxlRXZlbnQoY2FsbGJhY2tSZWYpKVxuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgQkVGT1JFX1VOTE9BRF9MT0FERVJfVElNRU9VVCxcbiAgQ0hFQ0tBQkxFX0lOUFVUUyxcbiAgQ09OU0VDVVRJVkVfUkVMT0FEUyxcbiAgUEhYX0FVVE9fUkVDT1ZFUixcbiAgUEhYX0NPTVBPTkVOVCxcbiAgUEhYX0NPTk5FQ1RFRF9DTEFTUyxcbiAgUEhYX0RJU0FCTEVfV0lUSCxcbiAgUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFLFxuICBQSFhfRElTQUJMRUQsXG4gIFBIWF9MT0FESU5HX0NMQVNTLFxuICBQSFhfRVJST1JfQ0xBU1MsXG4gIFBIWF9DTElFTlRfRVJST1JfQ0xBU1MsXG4gIFBIWF9TRVJWRVJfRVJST1JfQ0xBU1MsXG4gIFBIWF9IQVNfRk9DVVNFRCxcbiAgUEhYX0hBU19TVUJNSVRURUQsXG4gIFBIWF9IT09LLFxuICBQSFhfUEFSRU5UX0lELFxuICBQSFhfUFJPR1JFU1MsXG4gIFBIWF9SRUFET05MWSxcbiAgUEhYX1JFRl9MT0FESU5HLFxuICBQSFhfUkVGX1NSQyxcbiAgUEhYX1JFRl9MT0NLLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9UUkFDS19TVEFUSUMsXG4gIFBIWF9UUkFDS19VUExPQURTLFxuICBQSFhfVVBEQVRFLFxuICBQSFhfVVBMT0FEX1JFRixcbiAgUEhYX1ZJRVdfU0VMRUNUT1IsXG4gIFBIWF9NQUlOLFxuICBQSFhfTU9VTlRFRCxcbiAgUFVTSF9USU1FT1VULFxuICBQSFhfVklFV1BPUlRfVE9QLFxuICBQSFhfVklFV1BPUlRfQk9UVE9NLFxuICBNQVhfQ0hJTERfSk9JTl9BVFRFTVBUU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBjbG9uZSxcbiAgY2xvc2VzdFBoeEJpbmRpbmcsXG4gIGlzRW1wdHksXG4gIGlzRXF1YWxPYmosXG4gIGxvZ0Vycm9yLFxuICBtYXliZSxcbiAgaXNDaWQsXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IEJyb3dzZXIgZnJvbSBcIi4vYnJvd3NlclwiXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgRWxlbWVudFJlZiBmcm9tIFwiLi9lbGVtZW50X3JlZlwiXG5pbXBvcnQgRE9NUGF0Y2ggZnJvbSBcIi4vZG9tX3BhdGNoXCJcbmltcG9ydCBMaXZlVXBsb2FkZXIgZnJvbSBcIi4vbGl2ZV91cGxvYWRlclwiXG5pbXBvcnQgUmVuZGVyZWQgZnJvbSBcIi4vcmVuZGVyZWRcIlxuaW1wb3J0IFZpZXdIb29rIGZyb20gXCIuL3ZpZXdfaG9va1wiXG5cbmV4cG9ydCBsZXQgcHJlcGVuZEZvcm1EYXRhS2V5ID0gKGtleSwgcHJlZml4KSA9PiB7XG4gIGxldCBpc0FycmF5ID0ga2V5LmVuZHNXaXRoKFwiW11cIilcbiAgLy8gUmVtb3ZlIHRoZSBcIltdXCIgaWYgaXQncyBhbiBhcnJheVxuICBsZXQgYmFzZUtleSA9IGlzQXJyYXkgPyBrZXkuc2xpY2UoMCwgLTIpIDoga2V5XG4gIC8vIFJlcGxhY2UgbGFzdCBvY2N1cnJlbmNlIG9mIGtleSBiZWZvcmUgYSBjbG9zaW5nIGJyYWNrZXQgb3IgdGhlIGVuZCB3aXRoIGtleSBwbHVzIHN1ZmZpeFxuICBiYXNlS2V5ID0gYmFzZUtleS5yZXBsYWNlKC8oW15cXFtcXF1dKykoXFxdPyQpLywgYCR7cHJlZml4fSQxJDJgKVxuICAvLyBBZGQgYmFjayB0aGUgXCJbXVwiIGlmIGl0IHdhcyBhbiBhcnJheVxuICBpZihpc0FycmF5KXsgYmFzZUtleSArPSBcIltdXCIgfVxuICByZXR1cm4gYmFzZUtleVxufVxuXG5sZXQgc2VyaWFsaXplRm9ybSA9IChmb3JtLCBtZXRhZGF0YSwgb25seU5hbWVzID0gW10pID0+IHtcbiAgY29uc3Qge3N1Ym1pdHRlciwgLi4ubWV0YX0gPSBtZXRhZGF0YVxuXG4gIC8vIFdlIG11c3QgaW5qZWN0IHRoZSBzdWJtaXR0ZXIgaW4gdGhlIG9yZGVyIHRoYXQgaXQgZXhpc3RzIGluIHRoZSBET01cbiAgLy8gcmVsYXRpdmUgdG8gb3RoZXIgaW5wdXRzLiBGb3IgZXhhbXBsZSwgZm9yIGNoZWNrYm94IGdyb3VwcywgdGhlIG9yZGVyIG11c3QgYmUgbWFpbnRhaW5lZC5cbiAgbGV0IGluamVjdGVkRWxlbWVudFxuICBpZihzdWJtaXR0ZXIgJiYgc3VibWl0dGVyLm5hbWUpe1xuICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpXG4gICAgaW5wdXQudHlwZSA9IFwiaGlkZGVuXCJcbiAgICAvLyBzZXQgdGhlIGZvcm0gYXR0cmlidXRlIGlmIHRoZSBzdWJtaXR0ZXIgaGFzIG9uZTtcbiAgICAvLyB0aGlzIGNhbiBoYXBwZW4gaWYgdGhlIGVsZW1lbnQgaXMgb3V0c2lkZSB0aGUgYWN0dWFsIGZvcm0gZWxlbWVudFxuICAgIGNvbnN0IGZvcm1JZCA9IHN1Ym1pdHRlci5nZXRBdHRyaWJ1dGUoXCJmb3JtXCIpXG4gICAgaWYoZm9ybUlkKXtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcImZvcm1cIiwgZm9ybUlkKVxuICAgIH1cbiAgICBpbnB1dC5uYW1lID0gc3VibWl0dGVyLm5hbWVcbiAgICBpbnB1dC52YWx1ZSA9IHN1Ym1pdHRlci52YWx1ZVxuICAgIHN1Ym1pdHRlci5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShpbnB1dCwgc3VibWl0dGVyKVxuICAgIGluamVjdGVkRWxlbWVudCA9IGlucHV0XG4gIH1cblxuICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKVxuICBjb25zdCB0b1JlbW92ZSA9IFtdXG5cbiAgZm9ybURhdGEuZm9yRWFjaCgodmFsLCBrZXksIF9pbmRleCkgPT4ge1xuICAgIGlmKHZhbCBpbnN0YW5jZW9mIEZpbGUpeyB0b1JlbW92ZS5wdXNoKGtleSkgfVxuICB9KVxuXG4gIC8vIENsZWFudXAgYWZ0ZXIgYnVpbGRpbmcgZmlsZURhdGFcbiAgdG9SZW1vdmUuZm9yRWFjaChrZXkgPT4gZm9ybURhdGEuZGVsZXRlKGtleSkpXG5cbiAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpXG5cbiAgbGV0IGVsZW1lbnRzID0gQXJyYXkuZnJvbShmb3JtLmVsZW1lbnRzKVxuICBmb3IobGV0IFtrZXksIHZhbF0gb2YgZm9ybURhdGEuZW50cmllcygpKXtcbiAgICBpZihvbmx5TmFtZXMubGVuZ3RoID09PSAwIHx8IG9ubHlOYW1lcy5pbmRleE9mKGtleSkgPj0gMCl7XG4gICAgICBsZXQgaW5wdXRzID0gZWxlbWVudHMuZmlsdGVyKGlucHV0ID0+IGlucHV0Lm5hbWUgPT09IGtleSlcbiAgICAgIGxldCBpc1VudXNlZCA9ICFpbnB1dHMuc29tZShpbnB1dCA9PiAoRE9NLnByaXZhdGUoaW5wdXQsIFBIWF9IQVNfRk9DVVNFRCkgfHwgRE9NLnByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVEKSkpXG4gICAgICBsZXQgaGlkZGVuID0gaW5wdXRzLmV2ZXJ5KGlucHV0ID0+IGlucHV0LnR5cGUgPT09IFwiaGlkZGVuXCIpXG4gICAgICBpZihpc1VudXNlZCAmJiAhKHN1Ym1pdHRlciAmJiBzdWJtaXR0ZXIubmFtZSA9PSBrZXkpICYmICFoaWRkZW4pe1xuICAgICAgICBwYXJhbXMuYXBwZW5kKHByZXBlbmRGb3JtRGF0YUtleShrZXksIFwiX3VudXNlZF9cIiksIFwiXCIpXG4gICAgICB9XG4gICAgICBwYXJhbXMuYXBwZW5kKGtleSwgdmFsKVxuICAgIH1cbiAgfVxuXG4gIC8vIHJlbW92ZSB0aGUgaW5qZWN0ZWQgZWxlbWVudCBhZ2FpblxuICAvLyAoaXQgd291bGQgYmUgcmVtb3ZlZCBieSB0aGUgbmV4dCBkb20gcGF0Y2ggYW55d2F5LCBidXQgdGhpcyBpcyBjbGVhbmVyKVxuICBpZihzdWJtaXR0ZXIgJiYgaW5qZWN0ZWRFbGVtZW50KXtcbiAgICBzdWJtaXR0ZXIucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChpbmplY3RlZEVsZW1lbnQpXG4gIH1cblxuICBmb3IobGV0IG1ldGFLZXkgaW4gbWV0YSl7IHBhcmFtcy5hcHBlbmQobWV0YUtleSwgbWV0YVttZXRhS2V5XSkgfVxuXG4gIHJldHVybiBwYXJhbXMudG9TdHJpbmcoKVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3IHtcbiAgc3RhdGljIGNsb3Nlc3RWaWV3KGVsKXtcbiAgICBsZXQgbGl2ZVZpZXdFbCA9IGVsLmNsb3Nlc3QoUEhYX1ZJRVdfU0VMRUNUT1IpXG4gICAgcmV0dXJuIGxpdmVWaWV3RWwgPyBET00ucHJpdmF0ZShsaXZlVmlld0VsLCBcInZpZXdcIikgOiBudWxsXG4gIH1cblxuICBjb25zdHJ1Y3RvcihlbCwgbGl2ZVNvY2tldCwgcGFyZW50VmlldywgZmxhc2gsIGxpdmVSZWZlcmVyKXtcbiAgICB0aGlzLmlzRGVhZCA9IGZhbHNlXG4gICAgdGhpcy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuICAgIHRoaXMuZmxhc2ggPSBmbGFzaFxuICAgIHRoaXMucGFyZW50ID0gcGFyZW50Vmlld1xuICAgIHRoaXMucm9vdCA9IHBhcmVudFZpZXcgPyBwYXJlbnRWaWV3LnJvb3QgOiB0aGlzXG4gICAgdGhpcy5lbCA9IGVsXG4gICAgRE9NLnB1dFByaXZhdGUodGhpcy5lbCwgXCJ2aWV3XCIsIHRoaXMpXG4gICAgdGhpcy5pZCA9IHRoaXMuZWwuaWRcbiAgICB0aGlzLnJlZiA9IDBcbiAgICB0aGlzLmxhc3RBY2tSZWYgPSBudWxsXG4gICAgdGhpcy5jaGlsZEpvaW5zID0gMFxuICAgIHRoaXMubG9hZGVyVGltZXIgPSBudWxsXG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMucGVuZGluZ0Zvcm1zID0gbmV3IFNldCgpXG4gICAgdGhpcy5yZWRpcmVjdCA9IGZhbHNlXG4gICAgdGhpcy5ocmVmID0gbnVsbFxuICAgIHRoaXMuam9pbkNvdW50ID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5qb2luQ291bnQgLSAxIDogMFxuICAgIHRoaXMuam9pbkF0dGVtcHRzID0gMFxuICAgIHRoaXMuam9pblBlbmRpbmcgPSB0cnVlXG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZVxuICAgIHRoaXMuam9pbkNhbGxiYWNrID0gZnVuY3Rpb24ob25Eb25lKXsgb25Eb25lICYmIG9uRG9uZSgpIH1cbiAgICB0aGlzLnN0b3BDYWxsYmFjayA9IGZ1bmN0aW9uKCl7IH1cbiAgICB0aGlzLnBlbmRpbmdKb2luT3BzID0gdGhpcy5wYXJlbnQgPyBudWxsIDogW11cbiAgICB0aGlzLnZpZXdIb29rcyA9IHt9XG4gICAgdGhpcy5mb3JtU3VibWl0cyA9IFtdXG4gICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMucGFyZW50ID8gbnVsbCA6IHt9XG4gICAgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdID0ge31cbiAgICB0aGlzLmZvcm1zRm9yUmVjb3ZlcnkgPSB7fVxuICAgIHRoaXMuY2hhbm5lbCA9IHRoaXMubGl2ZVNvY2tldC5jaGFubmVsKGBsdjoke3RoaXMuaWR9YCwgKCkgPT4ge1xuICAgICAgbGV0IHVybCA9IHRoaXMuaHJlZiAmJiB0aGlzLmV4cGFuZFVSTCh0aGlzLmhyZWYpXG4gICAgICByZXR1cm4ge1xuICAgICAgICByZWRpcmVjdDogdGhpcy5yZWRpcmVjdCA/IHVybCA6IHVuZGVmaW5lZCxcbiAgICAgICAgdXJsOiB0aGlzLnJlZGlyZWN0ID8gdW5kZWZpbmVkIDogdXJsIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgcGFyYW1zOiB0aGlzLmNvbm5lY3RQYXJhbXMobGl2ZVJlZmVyZXIpLFxuICAgICAgICBzZXNzaW9uOiB0aGlzLmdldFNlc3Npb24oKSxcbiAgICAgICAgc3RhdGljOiB0aGlzLmdldFN0YXRpYygpLFxuICAgICAgICBmbGFzaDogdGhpcy5mbGFzaCxcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgc2V0SHJlZihocmVmKXsgdGhpcy5ocmVmID0gaHJlZiB9XG5cbiAgc2V0UmVkaXJlY3QoaHJlZil7XG4gICAgdGhpcy5yZWRpcmVjdCA9IHRydWVcbiAgICB0aGlzLmhyZWYgPSBocmVmXG4gIH1cblxuICBpc01haW4oKXsgcmV0dXJuIHRoaXMuZWwuaGFzQXR0cmlidXRlKFBIWF9NQUlOKSB9XG5cbiAgY29ubmVjdFBhcmFtcyhsaXZlUmVmZXJlcil7XG4gICAgbGV0IHBhcmFtcyA9IHRoaXMubGl2ZVNvY2tldC5wYXJhbXModGhpcy5lbClcbiAgICBsZXQgbWFuaWZlc3QgPVxuICAgICAgRE9NLmFsbChkb2N1bWVudCwgYFske3RoaXMuYmluZGluZyhQSFhfVFJBQ0tfU1RBVElDKX1dYClcbiAgICAgICAgLm1hcChub2RlID0+IG5vZGUuc3JjIHx8IG5vZGUuaHJlZikuZmlsdGVyKHVybCA9PiB0eXBlb2YgKHVybCkgPT09IFwic3RyaW5nXCIpXG5cbiAgICBpZihtYW5pZmVzdC5sZW5ndGggPiAwKXsgcGFyYW1zW1wiX3RyYWNrX3N0YXRpY1wiXSA9IG1hbmlmZXN0IH1cbiAgICBwYXJhbXNbXCJfbW91bnRzXCJdID0gdGhpcy5qb2luQ291bnRcbiAgICBwYXJhbXNbXCJfbW91bnRfYXR0ZW1wdHNcIl0gPSB0aGlzLmpvaW5BdHRlbXB0c1xuICAgIHBhcmFtc1tcIl9saXZlX3JlZmVyZXJcIl0gPSBsaXZlUmVmZXJlclxuICAgIHRoaXMuam9pbkF0dGVtcHRzKytcblxuICAgIHJldHVybiBwYXJhbXNcbiAgfVxuXG4gIGlzQ29ubmVjdGVkKCl7IHJldHVybiB0aGlzLmNoYW5uZWwuY2FuUHVzaCgpIH1cblxuICBnZXRTZXNzaW9uKCl7IHJldHVybiB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTikgfVxuXG4gIGdldFN0YXRpYygpe1xuICAgIGxldCB2YWwgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfU1RBVElDKVxuICAgIHJldHVybiB2YWwgPT09IFwiXCIgPyBudWxsIDogdmFsXG4gIH1cblxuICBkZXN0cm95KGNhbGxiYWNrID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIHRoaXMuZGVzdHJveUFsbENoaWxkcmVuKClcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWVcbiAgICBkZWxldGUgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdXG4gICAgaWYodGhpcy5wYXJlbnQpeyBkZWxldGUgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMucGFyZW50LmlkXVt0aGlzLmlkXSB9XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubG9hZGVyVGltZXIpXG4gICAgbGV0IG9uRmluaXNoZWQgPSAoKSA9PiB7XG4gICAgICBjYWxsYmFjaygpXG4gICAgICBmb3IobGV0IGlkIGluIHRoaXMudmlld0hvb2tzKXtcbiAgICAgICAgdGhpcy5kZXN0cm95SG9vayh0aGlzLnZpZXdIb29rc1tpZF0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgRE9NLm1hcmtQaHhDaGlsZERlc3Ryb3llZCh0aGlzLmVsKVxuXG4gICAgdGhpcy5sb2coXCJkZXN0cm95ZWRcIiwgKCkgPT4gW1widGhlIGNoaWxkIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgcGFyZW50XCJdKVxuICAgIHRoaXMuY2hhbm5lbC5sZWF2ZSgpXG4gICAgICAucmVjZWl2ZShcIm9rXCIsIG9uRmluaXNoZWQpXG4gICAgICAucmVjZWl2ZShcImVycm9yXCIsIG9uRmluaXNoZWQpXG4gICAgICAucmVjZWl2ZShcInRpbWVvdXRcIiwgb25GaW5pc2hlZClcbiAgfVxuXG4gIHNldENvbnRhaW5lckNsYXNzZXMoLi4uY2xhc3Nlcyl7XG4gICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgUEhYX0NPTk5FQ1RFRF9DTEFTUyxcbiAgICAgIFBIWF9MT0FESU5HX0NMQVNTLFxuICAgICAgUEhYX0VSUk9SX0NMQVNTLFxuICAgICAgUEhYX0NMSUVOVF9FUlJPUl9DTEFTUyxcbiAgICAgIFBIWF9TRVJWRVJfRVJST1JfQ0xBU1NcbiAgICApXG4gICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXMpXG4gIH1cblxuICBzaG93TG9hZGVyKHRpbWVvdXQpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRlclRpbWVyKVxuICAgIGlmKHRpbWVvdXQpe1xuICAgICAgdGhpcy5sb2FkZXJUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zaG93TG9hZGVyKCksIHRpbWVvdXQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcihsZXQgaWQgaW4gdGhpcy52aWV3SG9va3MpeyB0aGlzLnZpZXdIb29rc1tpZF0uX19kaXNjb25uZWN0ZWQoKSB9XG4gICAgICB0aGlzLnNldENvbnRhaW5lckNsYXNzZXMoUEhYX0xPQURJTkdfQ0xBU1MpXG4gICAgfVxuICB9XG5cbiAgZXhlY0FsbChiaW5kaW5nKXtcbiAgICBET00uYWxsKHRoaXMuZWwsIGBbJHtiaW5kaW5nfV1gLCBlbCA9PiB0aGlzLmxpdmVTb2NrZXQuZXhlY0pTKGVsLCBlbC5nZXRBdHRyaWJ1dGUoYmluZGluZykpKVxuICB9XG5cbiAgaGlkZUxvYWRlcigpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRlclRpbWVyKVxuICAgIHRoaXMuc2V0Q29udGFpbmVyQ2xhc3NlcyhQSFhfQ09OTkVDVEVEX0NMQVNTKVxuICAgIHRoaXMuZXhlY0FsbCh0aGlzLmJpbmRpbmcoXCJjb25uZWN0ZWRcIikpXG4gIH1cblxuICB0cmlnZ2VyUmVjb25uZWN0ZWQoKXtcbiAgICBmb3IobGV0IGlkIGluIHRoaXMudmlld0hvb2tzKXsgdGhpcy52aWV3SG9va3NbaWRdLl9fcmVjb25uZWN0ZWQoKSB9XG4gIH1cblxuICBsb2coa2luZCwgbXNnQ2FsbGJhY2spe1xuICAgIHRoaXMubGl2ZVNvY2tldC5sb2codGhpcywga2luZCwgbXNnQ2FsbGJhY2spXG4gIH1cblxuICB0cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSA9IGZ1bmN0aW9uKCl7fSl7XG4gICAgdGhpcy5saXZlU29ja2V0LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lKVxuICB9XG5cbiAgLy8gY2FsbHMgdGhlIGNhbGxiYWNrIHdpdGggdGhlIHZpZXcgYW5kIHRhcmdldCBlbGVtZW50IGZvciB0aGUgZ2l2ZW4gcGh4VGFyZ2V0XG4gIC8vIHRhcmdldHMgY2FuIGJlOlxuICAvLyAgKiBhbiBlbGVtZW50IGl0c2VsZiwgdGhlbiBpdCBpcyBzaW1wbHkgcGFzc2VkIHRvIGxpdmVTb2NrZXQub3duZXI7XG4gIC8vICAqIGEgQ0lEIChDb21wb25lbnQgSUQpLCB0aGVuIHdlIGZpcnN0IHNlYXJjaCB0aGUgY29tcG9uZW50J3MgZWxlbWVudCBpbiB0aGUgRE9NXG4gIC8vICAqIGEgc2VsZWN0b3IsIHRoZW4gd2Ugc2VhcmNoIHRoZSBzZWxlY3RvciBpbiB0aGUgRE9NIGFuZCBjYWxsIHRoZSBjYWxsYmFja1xuICAvLyAgICBmb3IgZWFjaCBlbGVtZW50IGZvdW5kIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgb3duZXIgdmlld1xuICB3aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgY2FsbGJhY2ssIGRvbSA9IGRvY3VtZW50LCB2aWV3RWwpe1xuICAgIC8vIGluIHRoZSBmb3JtIHJlY292ZXJ5IGNhc2Ugd2Ugc2VhcmNoIGluIGEgdGVtcGxhdGUgZnJhZ21lbnQgaW5zdGVhZCBvZlxuICAgIC8vIHRoZSByZWFsIGRvbSwgdGhlcmVmb3JlIHdlIG9wdGlvbmFsbHkgcGFzcyBkb20gYW5kIHZpZXdFbFxuXG4gICAgaWYocGh4VGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgcGh4VGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCl7XG4gICAgICByZXR1cm4gdGhpcy5saXZlU29ja2V0Lm93bmVyKHBoeFRhcmdldCwgdmlldyA9PiBjYWxsYmFjayh2aWV3LCBwaHhUYXJnZXQpKVxuICAgIH1cblxuICAgIGlmKGlzQ2lkKHBoeFRhcmdldCkpe1xuICAgICAgbGV0IHRhcmdldHMgPSBET00uZmluZENvbXBvbmVudE5vZGVMaXN0KHZpZXdFbCB8fCB0aGlzLmVsLCBwaHhUYXJnZXQpXG4gICAgICBpZih0YXJnZXRzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGxvZ0Vycm9yKGBubyBjb21wb25lbnQgZm91bmQgbWF0Y2hpbmcgcGh4LXRhcmdldCBvZiAke3BoeFRhcmdldH1gKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcywgcGFyc2VJbnQocGh4VGFyZ2V0KSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRhcmdldHMgPSBBcnJheS5mcm9tKGRvbS5xdWVyeVNlbGVjdG9yQWxsKHBoeFRhcmdldCkpXG4gICAgICBpZih0YXJnZXRzLmxlbmd0aCA9PT0gMCl7IGxvZ0Vycm9yKGBub3RoaW5nIGZvdW5kIG1hdGNoaW5nIHRoZSBwaHgtdGFyZ2V0IHNlbGVjdG9yIFwiJHtwaHhUYXJnZXR9XCJgKSB9XG4gICAgICB0YXJnZXRzLmZvckVhY2godGFyZ2V0ID0+IHRoaXMubGl2ZVNvY2tldC5vd25lcih0YXJnZXQsIHZpZXcgPT4gY2FsbGJhY2sodmlldywgdGFyZ2V0KSkpXG4gICAgfVxuICB9XG5cbiAgYXBwbHlEaWZmKHR5cGUsIHJhd0RpZmYsIGNhbGxiYWNrKXtcbiAgICB0aGlzLmxvZyh0eXBlLCAoKSA9PiBbXCJcIiwgY2xvbmUocmF3RGlmZildKVxuICAgIGxldCB7ZGlmZiwgcmVwbHksIGV2ZW50cywgdGl0bGV9ID0gUmVuZGVyZWQuZXh0cmFjdChyYXdEaWZmKVxuICAgIGNhbGxiYWNrKHtkaWZmLCByZXBseSwgZXZlbnRzfSlcbiAgICBpZih0eXBlb2YgdGl0bGUgPT09IFwic3RyaW5nXCIgfHwgdHlwZSA9PSBcIm1vdW50XCIpeyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IERPTS5wdXRUaXRsZSh0aXRsZSkpIH1cbiAgfVxuXG4gIG9uSm9pbihyZXNwKXtcbiAgICBsZXQge3JlbmRlcmVkLCBjb250YWluZXIsIGxpdmV2aWV3X3ZlcnNpb259ID0gcmVzcFxuICAgIGlmKGNvbnRhaW5lcil7XG4gICAgICBsZXQgW3RhZywgYXR0cnNdID0gY29udGFpbmVyXG4gICAgICB0aGlzLmVsID0gRE9NLnJlcGxhY2VSb290Q29udGFpbmVyKHRoaXMuZWwsIHRhZywgYXR0cnMpXG4gICAgfVxuICAgIHRoaXMuY2hpbGRKb2lucyA9IDBcbiAgICB0aGlzLmpvaW5QZW5kaW5nID0gdHJ1ZVxuICAgIHRoaXMuZmxhc2ggPSBudWxsXG4gICAgaWYodGhpcy5yb290ID09PSB0aGlzKXtcbiAgICAgIHRoaXMuZm9ybXNGb3JSZWNvdmVyeSA9IHRoaXMuZ2V0Rm9ybXNGb3JSZWNvdmVyeSgpXG4gICAgfVxuICAgIGlmKHRoaXMuaXNNYWluKCkgJiYgd2luZG93Lmhpc3Rvcnkuc3RhdGUgPT09IG51bGwpe1xuICAgICAgLy8gc2V0IGluaXRpYWwgaGlzdG9yeSBlbnRyeSBpZiB0aGlzIGlzIHRoZSBmaXJzdCBwYWdlIGxvYWRcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXBsYWNlUm9vdEhpc3RvcnkoKVxuICAgIH1cblxuICAgIGlmKGxpdmV2aWV3X3ZlcnNpb24gIT09IHRoaXMubGl2ZVNvY2tldC52ZXJzaW9uKCkpe1xuICAgICAgY29uc29sZS5lcnJvcihgTGl2ZVZpZXcgYXNzZXQgdmVyc2lvbiBtaXNtYXRjaC4gSmF2YVNjcmlwdCB2ZXJzaW9uICR7dGhpcy5saXZlU29ja2V0LnZlcnNpb24oKX0gdnMuIHNlcnZlciAke2xpdmV2aWV3X3ZlcnNpb259LiBUbyBhdm9pZCBpc3N1ZXMsIHBsZWFzZSBlbnN1cmUgdGhhdCB5b3VyIGFzc2V0cyB1c2UgdGhlIHNhbWUgdmVyc2lvbiBhcyB0aGUgc2VydmVyLmApXG4gICAgfVxuXG4gICAgQnJvd3Nlci5kcm9wTG9jYWwodGhpcy5saXZlU29ja2V0LmxvY2FsU3RvcmFnZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLCBDT05TRUNVVElWRV9SRUxPQURTKVxuICAgIHRoaXMuYXBwbHlEaWZmKFwibW91bnRcIiwgcmVuZGVyZWQsICh7ZGlmZiwgZXZlbnRzfSkgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJlZCA9IG5ldyBSZW5kZXJlZCh0aGlzLmlkLCBkaWZmKVxuICAgICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVuZGVyQ29udGFpbmVyKG51bGwsIFwiam9pblwiKVxuICAgICAgdGhpcy5kcm9wUGVuZGluZ1JlZnMoKVxuICAgICAgdGhpcy5qb2luQ291bnQrK1xuICAgICAgdGhpcy5qb2luQXR0ZW1wdHMgPSAwXG5cbiAgICAgIHRoaXMubWF5YmVSZWNvdmVyRm9ybXMoaHRtbCwgKCkgPT4ge1xuICAgICAgICB0aGlzLm9uSm9pbkNvbXBsZXRlKHJlc3AsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cylcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGRyb3BQZW5kaW5nUmVmcygpe1xuICAgIERPTS5hbGwoZG9jdW1lbnQsIGBbJHtQSFhfUkVGX1NSQ309XCIke3RoaXMucmVmU3JjKCl9XCJdYCwgZWwgPT4ge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfTE9BRElORylcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGX1NSQylcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGX0xPQ0spXG4gICAgfSlcbiAgfVxuXG4gIG9uSm9pbkNvbXBsZXRlKHtsaXZlX3BhdGNofSwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKXtcbiAgICAvLyBJbiBvcmRlciB0byBwcm92aWRlIGEgYmV0dGVyIGV4cGVyaWVuY2UsIHdlIHdhbnQgdG8gam9pblxuICAgIC8vIGFsbCBMaXZlVmlld3MgZmlyc3QgYW5kIG9ubHkgdGhlbiBhcHBseSB0aGVpciBwYXRjaGVzLlxuICAgIGlmKHRoaXMuam9pbkNvdW50ID4gMSB8fCAodGhpcy5wYXJlbnQgJiYgIXRoaXMucGFyZW50LmlzSm9pblBlbmRpbmcoKSkpe1xuICAgICAgcmV0dXJuIHRoaXMuYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKVxuICAgIH1cblxuICAgIC8vIE9uZSBkb3duc2lkZSBvZiB0aGlzIGFwcHJvYWNoIGlzIHRoYXQgd2UgbmVlZCB0byBmaW5kIHBoeENoaWxkcmVuXG4gICAgLy8gaW4gdGhlIGh0bWwgZnJhZ21lbnQsIGluc3RlYWQgb2YgZGlyZWN0bHkgb24gdGhlIERPTS4gVGhlIGZyYWdtZW50XG4gICAgLy8gYWxzbyBkb2VzIG5vdCBpbmNsdWRlIFBIWF9TVEFUSUMsIHNvIHdlIG5lZWQgdG8gY29weSBpdCBvdmVyIGZyb21cbiAgICAvLyB0aGUgRE9NLlxuICAgIGxldCBuZXdDaGlsZHJlbiA9IERPTS5maW5kUGh4Q2hpbGRyZW5JbkZyYWdtZW50KGh0bWwsIHRoaXMuaWQpLmZpbHRlcih0b0VsID0+IHtcbiAgICAgIGxldCBmcm9tRWwgPSB0b0VsLmlkICYmIHRoaXMuZWwucXVlcnlTZWxlY3RvcihgW2lkPVwiJHt0b0VsLmlkfVwiXWApXG4gICAgICBsZXQgcGh4U3RhdGljID0gZnJvbUVsICYmIGZyb21FbC5nZXRBdHRyaWJ1dGUoUEhYX1NUQVRJQylcbiAgICAgIGlmKHBoeFN0YXRpYyl7IHRvRWwuc2V0QXR0cmlidXRlKFBIWF9TVEFUSUMsIHBoeFN0YXRpYykgfVxuICAgICAgLy8gc2V0IFBIWF9ST09UX0lEIHRvIHByZXZlbnQgZXZlbnRzIGZyb20gYmVpbmcgZGlzcGF0Y2hlZCB0byB0aGUgcm9vdCB2aWV3XG4gICAgICAvLyB3aGlsZSB0aGUgY2hpbGQgam9pbiBpcyBzdGlsbCBwZW5kaW5nXG4gICAgICBpZihmcm9tRWwpeyBmcm9tRWwuc2V0QXR0cmlidXRlKFBIWF9ST09UX0lELCB0aGlzLnJvb3QuaWQpIH1cbiAgICAgIHJldHVybiB0aGlzLmpvaW5DaGlsZCh0b0VsKVxuICAgIH0pXG5cbiAgICBpZihuZXdDaGlsZHJlbi5sZW5ndGggPT09IDApe1xuICAgICAgaWYodGhpcy5wYXJlbnQpe1xuICAgICAgICB0aGlzLnJvb3QucGVuZGluZ0pvaW5PcHMucHVzaChbdGhpcywgKCkgPT4gdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXSlcbiAgICAgICAgdGhpcy5wYXJlbnQuYWNrSm9pbih0aGlzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbkFsbENoaWxkSm9pbnNDb21wbGV0ZSgpXG4gICAgICAgIHRoaXMuYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucGVuZGluZ0pvaW5PcHMucHVzaChbdGhpcywgKCkgPT4gdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXSlcbiAgICB9XG4gIH1cblxuICBhdHRhY2hUcnVlRG9jRWwoKXtcbiAgICB0aGlzLmVsID0gRE9NLmJ5SWQodGhpcy5pZClcbiAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZShQSFhfUk9PVF9JRCwgdGhpcy5yb290LmlkKVxuICB9XG5cbiAgLy8gdGhpcyBpcyBpbnZva2VkIGZvciBkZWFkIGFuZCBsaXZlIHZpZXdzLCBzbyB3ZSBtdXN0IGZpbHRlciBieVxuICAvLyBieSBvd25lciB0byBlbnN1cmUgd2UgYXJlbid0IGR1cGxpY2F0aW5nIGhvb2tzIGFjcm9zcyBkaXNjb25uZWN0XG4gIC8vIGFuZCBjb25uZWN0ZWQgc3RhdGVzLiBUaGlzIGFsc28gaGFuZGxlcyBjYXNlcyB3aGVyZSBob29rcyBleGlzdFxuICAvLyBpbiBhIHJvb3QgbGF5b3V0IHdpdGggYSBMViBpbiB0aGUgYm9keVxuICBleGVjTmV3TW91bnRlZChwYXJlbnQgPSB0aGlzLmVsKXtcbiAgICBsZXQgcGh4Vmlld3BvcnRUb3AgPSB0aGlzLmJpbmRpbmcoUEhYX1ZJRVdQT1JUX1RPUClcbiAgICBsZXQgcGh4Vmlld3BvcnRCb3R0b20gPSB0aGlzLmJpbmRpbmcoUEhYX1ZJRVdQT1JUX0JPVFRPTSlcbiAgICBET00uYWxsKHBhcmVudCwgYFske3BoeFZpZXdwb3J0VG9wfV0sIFske3BoeFZpZXdwb3J0Qm90dG9tfV1gLCBob29rRWwgPT4ge1xuICAgICAgaWYodGhpcy5vd25zRWxlbWVudChob29rRWwpKXtcbiAgICAgICAgRE9NLm1haW50YWluUHJpdmF0ZUhvb2tzKGhvb2tFbCwgaG9va0VsLCBwaHhWaWV3cG9ydFRvcCwgcGh4Vmlld3BvcnRCb3R0b20pXG4gICAgICAgIHRoaXMubWF5YmVBZGROZXdIb29rKGhvb2tFbClcbiAgICAgIH1cbiAgICB9KVxuICAgIERPTS5hbGwocGFyZW50LCBgWyR7dGhpcy5iaW5kaW5nKFBIWF9IT09LKX1dLCBbZGF0YS1waHgtJHtQSFhfSE9PS31dYCwgaG9va0VsID0+IHtcbiAgICAgIGlmKHRoaXMub3duc0VsZW1lbnQoaG9va0VsKSl7XG4gICAgICAgIHRoaXMubWF5YmVBZGROZXdIb29rKGhvb2tFbClcbiAgICAgIH1cbiAgICB9KVxuICAgIERPTS5hbGwocGFyZW50LCBgWyR7dGhpcy5iaW5kaW5nKFBIWF9NT1VOVEVEKX1dYCwgZWwgPT4ge1xuICAgICAgaWYodGhpcy5vd25zRWxlbWVudChlbCkpe1xuICAgICAgICB0aGlzLm1heWJlTW91bnRlZChlbClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKXtcbiAgICB0aGlzLmF0dGFjaFRydWVEb2NFbCgpXG4gICAgbGV0IHBhdGNoID0gbmV3IERPTVBhdGNoKHRoaXMsIHRoaXMuZWwsIHRoaXMuaWQsIGh0bWwsIHN0cmVhbXMsIG51bGwpXG4gICAgcGF0Y2gubWFya1BydW5hYmxlQ29udGVudEZvclJlbW92YWwoKVxuICAgIHRoaXMucGVyZm9ybVBhdGNoKHBhdGNoLCBmYWxzZSwgdHJ1ZSlcbiAgICB0aGlzLmpvaW5OZXdDaGlsZHJlbigpXG4gICAgdGhpcy5leGVjTmV3TW91bnRlZCgpXG5cbiAgICB0aGlzLmpvaW5QZW5kaW5nID0gZmFsc2VcbiAgICB0aGlzLmxpdmVTb2NrZXQuZGlzcGF0Y2hFdmVudHMoZXZlbnRzKVxuICAgIHRoaXMuYXBwbHlQZW5kaW5nVXBkYXRlcygpXG5cbiAgICBpZihsaXZlX3BhdGNoKXtcbiAgICAgIGxldCB7a2luZCwgdG99ID0gbGl2ZV9wYXRjaFxuICAgICAgdGhpcy5saXZlU29ja2V0Lmhpc3RvcnlQYXRjaCh0bywga2luZClcbiAgICB9XG4gICAgdGhpcy5oaWRlTG9hZGVyKClcbiAgICBpZih0aGlzLmpvaW5Db3VudCA+IDEpeyB0aGlzLnRyaWdnZXJSZWNvbm5lY3RlZCgpIH1cbiAgICB0aGlzLnN0b3BDYWxsYmFjaygpXG4gIH1cblxuICB0cmlnZ2VyQmVmb3JlVXBkYXRlSG9vayhmcm9tRWwsIHRvRWwpe1xuICAgIHRoaXMubGl2ZVNvY2tldC50cmlnZ2VyRE9NKFwib25CZWZvcmVFbFVwZGF0ZWRcIiwgW2Zyb21FbCwgdG9FbF0pXG4gICAgbGV0IGhvb2sgPSB0aGlzLmdldEhvb2soZnJvbUVsKVxuICAgIGxldCBpc0lnbm9yZWQgPSBob29rICYmIERPTS5pc0lnbm9yZWQoZnJvbUVsLCB0aGlzLmJpbmRpbmcoUEhYX1VQREFURSkpXG4gICAgaWYoaG9vayAmJiAhZnJvbUVsLmlzRXF1YWxOb2RlKHRvRWwpICYmICEoaXNJZ25vcmVkICYmIGlzRXF1YWxPYmooZnJvbUVsLmRhdGFzZXQsIHRvRWwuZGF0YXNldCkpKXtcbiAgICAgIGhvb2suX19iZWZvcmVVcGRhdGUoKVxuICAgICAgcmV0dXJuIGhvb2tcbiAgICB9XG4gIH1cblxuICBtYXliZU1vdW50ZWQoZWwpe1xuICAgIGxldCBwaHhNb3VudGVkID0gZWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfTU9VTlRFRCkpXG4gICAgbGV0IGhhc0JlZW5JbnZva2VkID0gcGh4TW91bnRlZCAmJiBET00ucHJpdmF0ZShlbCwgXCJtb3VudGVkXCIpXG4gICAgaWYocGh4TW91bnRlZCAmJiAhaGFzQmVlbkludm9rZWQpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LmV4ZWNKUyhlbCwgcGh4TW91bnRlZClcbiAgICAgIERPTS5wdXRQcml2YXRlKGVsLCBcIm1vdW50ZWRcIiwgdHJ1ZSlcbiAgICB9XG4gIH1cblxuICBtYXliZUFkZE5ld0hvb2soZWwpe1xuICAgIGxldCBuZXdIb29rID0gdGhpcy5hZGRIb29rKGVsKVxuICAgIGlmKG5ld0hvb2speyBuZXdIb29rLl9fbW91bnRlZCgpIH1cbiAgfVxuXG4gIHBlcmZvcm1QYXRjaChwYXRjaCwgcHJ1bmVDaWRzLCBpc0pvaW5QYXRjaCA9IGZhbHNlKXtcbiAgICBsZXQgcmVtb3ZlZEVscyA9IFtdXG4gICAgbGV0IHBoeENoaWxkcmVuQWRkZWQgPSBmYWxzZVxuICAgIGxldCB1cGRhdGVkSG9va0lkcyA9IG5ldyBTZXQoKVxuXG4gICAgdGhpcy5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvblBhdGNoU3RhcnRcIiwgW3BhdGNoLnRhcmdldENvbnRhaW5lcl0pXG5cbiAgICBwYXRjaC5hZnRlcihcImFkZGVkXCIsIGVsID0+IHtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC50cmlnZ2VyRE9NKFwib25Ob2RlQWRkZWRcIiwgW2VsXSlcbiAgICAgIGxldCBwaHhWaWV3cG9ydFRvcCA9IHRoaXMuYmluZGluZyhQSFhfVklFV1BPUlRfVE9QKVxuICAgICAgbGV0IHBoeFZpZXdwb3J0Qm90dG9tID0gdGhpcy5iaW5kaW5nKFBIWF9WSUVXUE9SVF9CT1RUT00pXG4gICAgICBET00ubWFpbnRhaW5Qcml2YXRlSG9va3MoZWwsIGVsLCBwaHhWaWV3cG9ydFRvcCwgcGh4Vmlld3BvcnRCb3R0b20pXG4gICAgICB0aGlzLm1heWJlQWRkTmV3SG9vayhlbClcbiAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSl7IHRoaXMubWF5YmVNb3VudGVkKGVsKSB9XG4gICAgfSlcblxuICAgIHBhdGNoLmFmdGVyKFwicGh4Q2hpbGRBZGRlZFwiLCBlbCA9PiB7XG4gICAgICBpZihET00uaXNQaHhTdGlja3koZWwpKXtcbiAgICAgICAgdGhpcy5saXZlU29ja2V0LmpvaW5Sb290Vmlld3MoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGh4Q2hpbGRyZW5BZGRlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYmVmb3JlKFwidXBkYXRlZFwiLCAoZnJvbUVsLCB0b0VsKSA9PiB7XG4gICAgICBsZXQgaG9vayA9IHRoaXMudHJpZ2dlckJlZm9yZVVwZGF0ZUhvb2soZnJvbUVsLCB0b0VsKVxuICAgICAgaWYoaG9vayl7IHVwZGF0ZWRIb29rSWRzLmFkZChmcm9tRWwuaWQpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJ1cGRhdGVkXCIsIGVsID0+IHtcbiAgICAgIGlmKHVwZGF0ZWRIb29rSWRzLmhhcyhlbC5pZCkpeyB0aGlzLmdldEhvb2soZWwpLl9fdXBkYXRlZCgpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJkaXNjYXJkZWRcIiwgKGVsKSA9PiB7XG4gICAgICBpZihlbC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpeyByZW1vdmVkRWxzLnB1c2goZWwpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJ0cmFuc2l0aW9uc0Rpc2NhcmRlZFwiLCBlbHMgPT4gdGhpcy5hZnRlckVsZW1lbnRzUmVtb3ZlZChlbHMsIHBydW5lQ2lkcykpXG4gICAgcGF0Y2gucGVyZm9ybShpc0pvaW5QYXRjaClcbiAgICB0aGlzLmFmdGVyRWxlbWVudHNSZW1vdmVkKHJlbW92ZWRFbHMsIHBydW5lQ2lkcylcblxuICAgIHRoaXMubGl2ZVNvY2tldC50cmlnZ2VyRE9NKFwib25QYXRjaEVuZFwiLCBbcGF0Y2gudGFyZ2V0Q29udGFpbmVyXSlcbiAgICByZXR1cm4gcGh4Q2hpbGRyZW5BZGRlZFxuICB9XG5cbiAgYWZ0ZXJFbGVtZW50c1JlbW92ZWQoZWxlbWVudHMsIHBydW5lQ2lkcyl7XG4gICAgbGV0IGRlc3Ryb3llZENJRHMgPSBbXVxuICAgIGVsZW1lbnRzLmZvckVhY2gocGFyZW50ID0+IHtcbiAgICAgIGxldCBjb21wb25lbnRzID0gRE9NLmFsbChwYXJlbnQsIGBbJHtQSFhfQ09NUE9ORU5UfV1gKVxuICAgICAgbGV0IGhvb2tzID0gRE9NLmFsbChwYXJlbnQsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX0hPT0spfV0sIFtkYXRhLXBoeC1ob29rXWApXG4gICAgICBjb21wb25lbnRzLmNvbmNhdChwYXJlbnQpLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBsZXQgY2lkID0gdGhpcy5jb21wb25lbnRJRChlbClcbiAgICAgICAgaWYoaXNDaWQoY2lkKSAmJiBkZXN0cm95ZWRDSURzLmluZGV4T2YoY2lkKSA9PT0gLTEpeyBkZXN0cm95ZWRDSURzLnB1c2goY2lkKSB9XG4gICAgICB9KVxuICAgICAgaG9va3MuY29uY2F0KHBhcmVudCkuZm9yRWFjaChob29rRWwgPT4ge1xuICAgICAgICBsZXQgaG9vayA9IHRoaXMuZ2V0SG9vayhob29rRWwpXG4gICAgICAgIGhvb2sgJiYgdGhpcy5kZXN0cm95SG9vayhob29rKVxuICAgICAgfSlcbiAgICB9KVxuICAgIC8vIFdlIHNob3VsZCBub3QgcHJ1bmVDaWRzIG9uIGpvaW5zLiBPdGhlcndpc2UsIGluIGNhc2Ugb2ZcbiAgICAvLyByZWpvaW5zLCB3ZSBtYXkgbm90aWZ5IGNpZHMgdGhhdCBubyBsb25nZXIgYmVsb25nIHRvIHRoZVxuICAgIC8vIGN1cnJlbnQgTGl2ZVZpZXcgdG8gYmUgcmVtb3ZlZC5cbiAgICBpZihwcnVuZUNpZHMpe1xuICAgICAgdGhpcy5tYXliZVB1c2hDb21wb25lbnRzRGVzdHJveWVkKGRlc3Ryb3llZENJRHMpXG4gICAgfVxuICB9XG5cbiAgam9pbk5ld0NoaWxkcmVuKCl7XG4gICAgRE9NLmZpbmRQaHhDaGlsZHJlbih0aGlzLmVsLCB0aGlzLmlkKS5mb3JFYWNoKGVsID0+IHRoaXMuam9pbkNoaWxkKGVsKSlcbiAgfVxuXG4gIG1heWJlUmVjb3ZlckZvcm1zKGh0bWwsIGNhbGxiYWNrKXtcbiAgICBjb25zdCBwaHhDaGFuZ2UgPSB0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIilcbiAgICBjb25zdCBvbGRGb3JtcyA9IHRoaXMucm9vdC5mb3Jtc0ZvclJlY292ZXJ5XG4gICAgLy8gU28gd2h5IGRvIHdlIGNyZWF0ZSBhIHRlbXBsYXRlIGVsZW1lbnQgaGVyZT9cbiAgICAvLyBPbmUgd2F5IHRvIHJlY292ZXIgZm9ybXMgd291bGQgYmUgdG8gaW1tZWRpYXRlbHkgYXBwbHkgdGhlIG1vdW50XG4gICAgLy8gcGF0Y2ggYW5kIHRoZW4gYWZ0ZXJ3YXJkcyByZWNvdmVyIHRoZSBmb3Jtcy4gSG93ZXZlciwgdGhpcyB3b3VsZFxuICAgIC8vIGNhdXNlIGEgZmxpY2tlciwgYmVjYXVzZSB0aGUgbW91bnQgcGF0Y2ggd291bGQgcmVtb3ZlIHRoZSBmb3JtIGNvbnRlbnRcbiAgICAvLyB1bnRpbCBpdCBpcyByZXN0b3JlZC4gVGhlcmVmb3JlIExWIGRlY2lkZWQgdG8gZG8gZm9ybSByZWNvdmVyeSB3aXRoIHRoZVxuICAgIC8vIHJhdyBIVE1MIGJlZm9yZSBpdCBpcyBhcHBsaWVkIGFuZCBkZWxheSB0aGUgbW91bnQgcGF0Y2ggdW50aWwgdGhlIGZvcm1cbiAgICAvLyByZWNvdmVyeSBldmVudHMgYXJlIGRvbmUuXG4gICAgbGV0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpXG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbFxuICAgIC8vIGJlY2F1c2Ugd2Ugd29yayB3aXRoIGEgdGVtcGxhdGUgZWxlbWVudCwgd2UgbXVzdCBtYW51YWxseSBjb3B5IHRoZSBhdHRyaWJ1dGVzXG4gICAgLy8gb3RoZXJ3aXNlIHRoZSBvd25lciAvIHRhcmdldCBoZWxwZXJzIGRvbid0IHdvcmsgcHJvcGVybHlcbiAgICBjb25zdCByb290RWwgPSB0ZW1wbGF0ZS5jb250ZW50LmZpcnN0RWxlbWVudENoaWxkXG4gICAgcm9vdEVsLmlkID0gdGhpcy5pZFxuICAgIHJvb3RFbC5zZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQsIHRoaXMucm9vdC5pZClcbiAgICByb290RWwuc2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OLCB0aGlzLmdldFNlc3Npb24oKSlcbiAgICByb290RWwuc2V0QXR0cmlidXRlKFBIWF9TVEFUSUMsIHRoaXMuZ2V0U3RhdGljKCkpXG4gICAgcm9vdEVsLnNldEF0dHJpYnV0ZShQSFhfUEFSRU5UX0lELCB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LmlkIDogbnVsbClcblxuICAgIC8vIHdlIGdvIG92ZXIgYWxsIGZvcm0gZWxlbWVudHMgaW4gdGhlIG5ldyBIVE1MIGZvciB0aGUgTFZcbiAgICAvLyBhbmQgbG9vayBmb3Igb2xkIGZvcm1zIGluIHRoZSBgZm9ybXNGb3JSZWNvdmVyeWAgb2JqZWN0O1xuICAgIC8vIHRoZSBmb3Jtc0ZvclJlY292ZXJ5IGNhbiBhbHNvIGNvbnRhaW4gZm9ybXMgZnJvbSBjaGlsZCB2aWV3c1xuICAgIGNvbnN0IGZvcm1zVG9SZWNvdmVyID1cbiAgICAgIC8vIHdlIGdvIG92ZXIgYWxsIGZvcm1zIGluIHRoZSBuZXcgRE9NOyBiZWNhdXNlIHRoaXMgaXMgb25seSB0aGUgSFRNTCBmb3IgdGhlIGN1cnJlbnRcbiAgICAgIC8vIHZpZXcsIHdlIGNhbiBiZSBzdXJlIHRoYXQgYWxsIGZvcm1zIGFyZSBvd25lZCBieSB0aGlzIHZpZXc6XG4gICAgICBET00uYWxsKHRlbXBsYXRlLmNvbnRlbnQsIFwiZm9ybVwiKVxuICAgICAgICAvLyBvbmx5IHJlY292ZXIgZm9ybXMgdGhhdCBoYXZlIGFuIGlkIGFuZCBhcmUgaW4gdGhlIG9sZCBET01cbiAgICAgICAgLmZpbHRlcihuZXdGb3JtID0+IG5ld0Zvcm0uaWQgJiYgb2xkRm9ybXNbbmV3Rm9ybS5pZF0pXG4gICAgICAgIC8vIGFiYW5kb24gZm9ybXMgd2UgYWxyZWFkeSB0cmllZCB0byByZWNvdmVyIHRvIHByZXZlbnQgbG9vcGluZyBhIGZhaWxlZCBzdGF0ZVxuICAgICAgICAuZmlsdGVyKG5ld0Zvcm0gPT4gIXRoaXMucGVuZGluZ0Zvcm1zLmhhcyhuZXdGb3JtLmlkKSlcbiAgICAgICAgLy8gb25seSByZWNvdmVyIGlmIHRoZSBmb3JtIGhhcyB0aGUgc2FtZSBwaHgtY2hhbmdlIHZhbHVlXG4gICAgICAgIC5maWx0ZXIobmV3Rm9ybSA9PiBvbGRGb3Jtc1tuZXdGb3JtLmlkXS5nZXRBdHRyaWJ1dGUocGh4Q2hhbmdlKSA9PT0gbmV3Rm9ybS5nZXRBdHRyaWJ1dGUocGh4Q2hhbmdlKSlcbiAgICAgICAgLm1hcChuZXdGb3JtID0+IHtcbiAgICAgICAgICByZXR1cm4gW29sZEZvcm1zW25ld0Zvcm0uaWRdLCBuZXdGb3JtXVxuICAgICAgICB9KVxuXG4gICAgaWYoZm9ybXNUb1JlY292ZXIubGVuZ3RoID09PSAwKXtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgZm9ybXNUb1JlY292ZXIuZm9yRWFjaCgoW29sZEZvcm0sIG5ld0Zvcm1dLCBpKSA9PiB7XG4gICAgICB0aGlzLnBlbmRpbmdGb3Jtcy5hZGQobmV3Rm9ybS5pZClcbiAgICAgIC8vIGl0IGlzIGltcG9ydGFudCB0byB1c2UgdGhlIGZpcnN0RWxlbWVudENoaWxkIG9mIHRoZSB0ZW1wbGF0ZSBjb250ZW50XG4gICAgICAvLyBiZWNhdXNlIHdoZW4gdHJhdmVyc2luZyBhIGRvY3VtZW50RnJhZ21lbnQgdXNpbmcgcGFyZW50Tm9kZSwgd2Ugd29uJ3QgZXZlciBhcnJpdmUgYXRcbiAgICAgIC8vIHRoZSBmcmFnbWVudDsgYXMgdGhlIHRlbXBsYXRlIGlzIGFsd2F5cyBhIExpdmVWaWV3LCB3ZSBjYW4gYmUgc3VyZSB0aGF0IHRoZXJlIGlzIG9ubHlcbiAgICAgIC8vIG9uZSBjaGlsZCBvbiB0aGUgcm9vdCBsZXZlbFxuICAgICAgdGhpcy5wdXNoRm9ybVJlY292ZXJ5KG9sZEZvcm0sIG5ld0Zvcm0sIHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQsICgpID0+IHtcbiAgICAgICAgdGhpcy5wZW5kaW5nRm9ybXMuZGVsZXRlKG5ld0Zvcm0uaWQpXG4gICAgICAgIC8vIHdlIG9ubHkgY2FsbCB0aGUgY2FsbGJhY2sgb25jZSBhbGwgZm9ybXMgaGF2ZSBiZWVuIHJlY292ZXJlZFxuICAgICAgICBpZihpID09PSBmb3Jtc1RvUmVjb3Zlci5sZW5ndGggLSAxKXtcbiAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGdldENoaWxkQnlJZChpZCl7IHJldHVybiB0aGlzLnJvb3QuY2hpbGRyZW5bdGhpcy5pZF1baWRdIH1cblxuICBnZXREZXNjZW5kZW50QnlFbChlbCl7XG4gICAgaWYoZWwuaWQgPT09IHRoaXMuaWQpe1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bZWwuZ2V0QXR0cmlidXRlKFBIWF9QQVJFTlRfSUQpXT8uW2VsLmlkXVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3lEZXNjZW5kZW50KGlkKXtcbiAgICBmb3IobGV0IHBhcmVudElkIGluIHRoaXMucm9vdC5jaGlsZHJlbil7XG4gICAgICBmb3IobGV0IGNoaWxkSWQgaW4gdGhpcy5yb290LmNoaWxkcmVuW3BhcmVudElkXSl7XG4gICAgICAgIGlmKGNoaWxkSWQgPT09IGlkKXsgcmV0dXJuIHRoaXMucm9vdC5jaGlsZHJlbltwYXJlbnRJZF1bY2hpbGRJZF0uZGVzdHJveSgpIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBqb2luQ2hpbGQoZWwpe1xuICAgIGxldCBjaGlsZCA9IHRoaXMuZ2V0Q2hpbGRCeUlkKGVsLmlkKVxuICAgIGlmKCFjaGlsZCl7XG4gICAgICBsZXQgdmlldyA9IG5ldyBWaWV3KGVsLCB0aGlzLmxpdmVTb2NrZXQsIHRoaXMpXG4gICAgICB0aGlzLnJvb3QuY2hpbGRyZW5bdGhpcy5pZF1bdmlldy5pZF0gPSB2aWV3XG4gICAgICB2aWV3LmpvaW4oKVxuICAgICAgdGhpcy5jaGlsZEpvaW5zKytcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgaXNKb2luUGVuZGluZygpeyByZXR1cm4gdGhpcy5qb2luUGVuZGluZyB9XG5cbiAgYWNrSm9pbihfY2hpbGQpe1xuICAgIHRoaXMuY2hpbGRKb2lucy0tXG5cbiAgICBpZih0aGlzLmNoaWxkSm9pbnMgPT09IDApe1xuICAgICAgaWYodGhpcy5wYXJlbnQpe1xuICAgICAgICB0aGlzLnBhcmVudC5hY2tKb2luKHRoaXMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uQWxsQ2hpbGRKb2luc0NvbXBsZXRlKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvbkFsbENoaWxkSm9pbnNDb21wbGV0ZSgpe1xuICAgIC8vIHdlIGNhbiBjbGVhciBwZW5kaW5nIGZvcm0gcmVjb3ZlcmllcyBub3cgdGhhdCB3ZSd2ZSBqb2luZWQuXG4gICAgLy8gVGhleSBlaXRoZXIgYWxsIHJlc29sdmVkIG9yIHdlcmUgYWJhbmRvbmVkXG4gICAgdGhpcy5wZW5kaW5nRm9ybXMuY2xlYXIoKVxuICAgIC8vIHdlIGNhbiBhbHNvIGNsZWFyIHRoZSBmb3Jtc0ZvclJlY292ZXJ5IG9iamVjdCB0byBub3Qga2VlcCBvbGQgZm9ybSBlbGVtZW50cyBhcm91bmRcbiAgICB0aGlzLmZvcm1zRm9yUmVjb3ZlcnkgPSB7fVxuICAgIHRoaXMuam9pbkNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHRoaXMucGVuZGluZ0pvaW5PcHMuZm9yRWFjaCgoW3ZpZXcsIG9wXSkgPT4ge1xuICAgICAgICBpZighdmlldy5pc0Rlc3Ryb3llZCgpKXsgb3AoKSB9XG4gICAgICB9KVxuICAgICAgdGhpcy5wZW5kaW5nSm9pbk9wcyA9IFtdXG4gICAgfSlcbiAgfVxuXG4gIHVwZGF0ZShkaWZmLCBldmVudHMpe1xuICAgIGlmKHRoaXMuaXNKb2luUGVuZGluZygpIHx8ICh0aGlzLmxpdmVTb2NrZXQuaGFzUGVuZGluZ0xpbmsoKSAmJiB0aGlzLnJvb3QuaXNNYWluKCkpKXtcbiAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdEaWZmcy5wdXNoKHtkaWZmLCBldmVudHN9KVxuICAgIH1cblxuICAgIHRoaXMucmVuZGVyZWQubWVyZ2VEaWZmKGRpZmYpXG4gICAgbGV0IHBoeENoaWxkcmVuQWRkZWQgPSBmYWxzZVxuXG4gICAgLy8gV2hlbiB0aGUgZGlmZiBvbmx5IGNvbnRhaW5zIGNvbXBvbmVudCBkaWZmcywgdGhlbiB3YWxrIGNvbXBvbmVudHNcbiAgICAvLyBhbmQgcGF0Y2ggb25seSB0aGUgcGFyZW50IGNvbXBvbmVudCBjb250YWluZXJzIGZvdW5kIGluIHRoZSBkaWZmLlxuICAgIC8vIE90aGVyd2lzZSwgcGF0Y2ggZW50aXJlIExWIGNvbnRhaW5lci5cbiAgICBpZih0aGlzLnJlbmRlcmVkLmlzQ29tcG9uZW50T25seURpZmYoZGlmZikpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LnRpbWUoXCJjb21wb25lbnQgcGF0Y2ggY29tcGxldGVcIiwgKCkgPT4ge1xuICAgICAgICBsZXQgcGFyZW50Q2lkcyA9IERPTS5maW5kRXhpc3RpbmdQYXJlbnRDSURzKHRoaXMuZWwsIHRoaXMucmVuZGVyZWQuY29tcG9uZW50Q0lEcyhkaWZmKSlcbiAgICAgICAgcGFyZW50Q2lkcy5mb3JFYWNoKHBhcmVudENJRCA9PiB7XG4gICAgICAgICAgaWYodGhpcy5jb21wb25lbnRQYXRjaCh0aGlzLnJlbmRlcmVkLmdldENvbXBvbmVudChkaWZmLCBwYXJlbnRDSUQpLCBwYXJlbnRDSUQpKXsgcGh4Q2hpbGRyZW5BZGRlZCA9IHRydWUgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYoIWlzRW1wdHkoZGlmZikpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LnRpbWUoXCJmdWxsIHBhdGNoIGNvbXBsZXRlXCIsICgpID0+IHtcbiAgICAgICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVuZGVyQ29udGFpbmVyKGRpZmYsIFwidXBkYXRlXCIpXG4gICAgICAgIGxldCBwYXRjaCA9IG5ldyBET01QYXRjaCh0aGlzLCB0aGlzLmVsLCB0aGlzLmlkLCBodG1sLCBzdHJlYW1zLCBudWxsKVxuICAgICAgICBwaHhDaGlsZHJlbkFkZGVkID0gdGhpcy5wZXJmb3JtUGF0Y2gocGF0Y2gsIHRydWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRoaXMubGl2ZVNvY2tldC5kaXNwYXRjaEV2ZW50cyhldmVudHMpXG4gICAgaWYocGh4Q2hpbGRyZW5BZGRlZCl7IHRoaXMuam9pbk5ld0NoaWxkcmVuKCkgfVxuICB9XG5cbiAgcmVuZGVyQ29udGFpbmVyKGRpZmYsIGtpbmQpe1xuICAgIHJldHVybiB0aGlzLmxpdmVTb2NrZXQudGltZShgdG9TdHJpbmcgZGlmZiAoJHtraW5kfSlgLCAoKSA9PiB7XG4gICAgICBsZXQgdGFnID0gdGhpcy5lbC50YWdOYW1lXG4gICAgICAvLyBEb24ndCBza2lwIGFueSBjb21wb25lbnQgaW4gdGhlIGRpZmYgbm9yIGFueSBtYXJrZWQgYXMgcHJ1bmVkXG4gICAgICAvLyAoYXMgdGhleSBtYXkgaGF2ZSBiZWVuIGFkZGVkIGJhY2spXG4gICAgICBsZXQgY2lkcyA9IGRpZmYgPyB0aGlzLnJlbmRlcmVkLmNvbXBvbmVudENJRHMoZGlmZikgOiBudWxsXG4gICAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZW5kZXJlZC50b1N0cmluZyhjaWRzKVxuICAgICAgcmV0dXJuIFtgPCR7dGFnfT4ke2h0bWx9PC8ke3RhZ30+YCwgc3RyZWFtc11cbiAgICB9KVxuICB9XG5cbiAgY29tcG9uZW50UGF0Y2goZGlmZiwgY2lkKXtcbiAgICBpZihpc0VtcHR5KGRpZmYpKSByZXR1cm4gZmFsc2VcbiAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZW5kZXJlZC5jb21wb25lbnRUb1N0cmluZyhjaWQpXG4gICAgbGV0IHBhdGNoID0gbmV3IERPTVBhdGNoKHRoaXMsIHRoaXMuZWwsIHRoaXMuaWQsIGh0bWwsIHN0cmVhbXMsIGNpZClcbiAgICBsZXQgY2hpbGRyZW5BZGRlZCA9IHRoaXMucGVyZm9ybVBhdGNoKHBhdGNoLCB0cnVlKVxuICAgIHJldHVybiBjaGlsZHJlbkFkZGVkXG4gIH1cblxuICBnZXRIb29rKGVsKXsgcmV0dXJuIHRoaXMudmlld0hvb2tzW1ZpZXdIb29rLmVsZW1lbnRJRChlbCldIH1cblxuICBhZGRIb29rKGVsKXtcbiAgICBsZXQgaG9va0VsSWQgPSBWaWV3SG9vay5lbGVtZW50SUQoZWwpXG5cbiAgICBpZihob29rRWxJZCAmJiAhdGhpcy52aWV3SG9va3NbaG9va0VsSWRdKXtcbiAgICAgIC8vIGhvb2sgY3JlYXRlZCwgYnV0IG5vdCBhdHRhY2hlZCAoY3JlYXRlSG9vayBmb3Igd2ViIGNvbXBvbmVudClcbiAgICAgIGxldCBob29rID0gRE9NLmdldEN1c3RvbUVsSG9vayhlbCkgfHwgbG9nRXJyb3IoYG5vIGhvb2sgZm91bmQgZm9yIGN1c3RvbSBlbGVtZW50OiAke2VsLmlkfWApXG4gICAgICB0aGlzLnZpZXdIb29rc1tob29rRWxJZF0gPSBob29rXG4gICAgICBob29rLl9fYXR0YWNoVmlldyh0aGlzKVxuICAgICAgcmV0dXJuIGhvb2tcbiAgICB9XG4gICAgZWxzZSBpZihob29rRWxJZCB8fCAhZWwuZ2V0QXR0cmlidXRlKXtcbiAgICAgIC8vIG5vIGhvb2sgZm91bmRcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBuZXcgaG9vayBmb3VuZCB3aXRoIHBoeC1ob29rIGF0dHJpYnV0ZVxuICAgICAgbGV0IGhvb2tOYW1lID0gZWwuZ2V0QXR0cmlidXRlKGBkYXRhLXBoeC0ke1BIWF9IT09LfWApIHx8IGVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0hPT0spKVxuICAgICAgaWYoaG9va05hbWUgJiYgIXRoaXMub3duc0VsZW1lbnQoZWwpKXsgcmV0dXJuIH1cbiAgICAgIGxldCBjYWxsYmFja3MgPSB0aGlzLmxpdmVTb2NrZXQuZ2V0SG9va0NhbGxiYWNrcyhob29rTmFtZSlcblxuICAgICAgaWYoY2FsbGJhY2tzKXtcbiAgICAgICAgaWYoIWVsLmlkKXsgbG9nRXJyb3IoYG5vIERPTSBJRCBmb3IgaG9vayBcIiR7aG9va05hbWV9XCIuIEhvb2tzIHJlcXVpcmUgYSB1bmlxdWUgSUQgb24gZWFjaCBlbGVtZW50LmAsIGVsKSB9XG4gICAgICAgIGxldCBob29rID0gbmV3IFZpZXdIb29rKHRoaXMsIGVsLCBjYWxsYmFja3MpXG4gICAgICAgIHRoaXMudmlld0hvb2tzW1ZpZXdIb29rLmVsZW1lbnRJRChob29rLmVsKV0gPSBob29rXG4gICAgICAgIHJldHVybiBob29rXG4gICAgICB9IGVsc2UgaWYoaG9va05hbWUgIT09IG51bGwpe1xuICAgICAgICBsb2dFcnJvcihgdW5rbm93biBob29rIGZvdW5kIGZvciBcIiR7aG9va05hbWV9XCJgLCBlbClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkZXN0cm95SG9vayhob29rKXtcbiAgICBob29rLl9fZGVzdHJveWVkKClcbiAgICBob29rLl9fY2xlYW51cF9fKClcbiAgICBkZWxldGUgdGhpcy52aWV3SG9va3NbVmlld0hvb2suZWxlbWVudElEKGhvb2suZWwpXVxuICB9XG5cbiAgYXBwbHlQZW5kaW5nVXBkYXRlcygpe1xuICAgIHRoaXMucGVuZGluZ0RpZmZzLmZvckVhY2goKHtkaWZmLCBldmVudHN9KSA9PiB0aGlzLnVwZGF0ZShkaWZmLCBldmVudHMpKVxuICAgIHRoaXMucGVuZGluZ0RpZmZzID0gW11cbiAgICB0aGlzLmVhY2hDaGlsZChjaGlsZCA9PiBjaGlsZC5hcHBseVBlbmRpbmdVcGRhdGVzKCkpXG4gIH1cblxuICBlYWNoQ2hpbGQoY2FsbGJhY2spe1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXSB8fCB7fVxuICAgIGZvcihsZXQgaWQgaW4gY2hpbGRyZW4peyBjYWxsYmFjayh0aGlzLmdldENoaWxkQnlJZChpZCkpIH1cbiAgfVxuXG4gIG9uQ2hhbm5lbChldmVudCwgY2Ipe1xuICAgIHRoaXMubGl2ZVNvY2tldC5vbkNoYW5uZWwodGhpcy5jaGFubmVsLCBldmVudCwgcmVzcCA9PiB7XG4gICAgICBpZih0aGlzLmlzSm9pblBlbmRpbmcoKSl7XG4gICAgICAgIHRoaXMucm9vdC5wZW5kaW5nSm9pbk9wcy5wdXNoKFt0aGlzLCAoKSA9PiBjYihyZXNwKV0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiBjYihyZXNwKSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYmluZENoYW5uZWwoKXtcbiAgICAvLyBUaGUgZGlmZiBldmVudCBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGUgcmVndWxhciB1cGRhdGUgb3BlcmF0aW9ucy5cbiAgICAvLyBBbGwgb3RoZXIgb3BlcmF0aW9ucyBhcmUgcXVldWVkIHRvIGJlIGFwcGxpZWQgb25seSBhZnRlciBqb2luLlxuICAgIHRoaXMubGl2ZVNvY2tldC5vbkNoYW5uZWwodGhpcy5jaGFubmVsLCBcImRpZmZcIiwgKHJhd0RpZmYpID0+IHtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgdGhpcy5hcHBseURpZmYoXCJ1cGRhdGVcIiwgcmF3RGlmZiwgKHtkaWZmLCBldmVudHN9KSA9PiB0aGlzLnVwZGF0ZShkaWZmLCBldmVudHMpKVxuICAgICAgfSlcbiAgICB9KVxuICAgIHRoaXMub25DaGFubmVsKFwicmVkaXJlY3RcIiwgKHt0bywgZmxhc2h9KSA9PiB0aGlzLm9uUmVkaXJlY3Qoe3RvLCBmbGFzaH0pKVxuICAgIHRoaXMub25DaGFubmVsKFwibGl2ZV9wYXRjaFwiLCAocmVkaXIpID0+IHRoaXMub25MaXZlUGF0Y2gocmVkaXIpKVxuICAgIHRoaXMub25DaGFubmVsKFwibGl2ZV9yZWRpcmVjdFwiLCAocmVkaXIpID0+IHRoaXMub25MaXZlUmVkaXJlY3QocmVkaXIpKVxuICAgIHRoaXMuY2hhbm5lbC5vbkVycm9yKHJlYXNvbiA9PiB0aGlzLm9uRXJyb3IocmVhc29uKSlcbiAgICB0aGlzLmNoYW5uZWwub25DbG9zZShyZWFzb24gPT4gdGhpcy5vbkNsb3NlKHJlYXNvbikpXG4gIH1cblxuICBkZXN0cm95QWxsQ2hpbGRyZW4oKXsgdGhpcy5lYWNoQ2hpbGQoY2hpbGQgPT4gY2hpbGQuZGVzdHJveSgpKSB9XG5cbiAgb25MaXZlUmVkaXJlY3QocmVkaXIpe1xuICAgIGxldCB7dG8sIGtpbmQsIGZsYXNofSA9IHJlZGlyXG4gICAgbGV0IHVybCA9IHRoaXMuZXhwYW5kVVJMKHRvKVxuICAgIGxldCBlID0gbmV3IEN1c3RvbUV2ZW50KFwicGh4OnNlcnZlci1uYXZpZ2F0ZVwiLCB7ZGV0YWlsOiB7dG8sIGtpbmQsIGZsYXNofX0pXG4gICAgdGhpcy5saXZlU29ja2V0Lmhpc3RvcnlSZWRpcmVjdChlLCB1cmwsIGtpbmQsIGZsYXNoKVxuICB9XG5cbiAgb25MaXZlUGF0Y2gocmVkaXIpe1xuICAgIGxldCB7dG8sIGtpbmR9ID0gcmVkaXJcbiAgICB0aGlzLmhyZWYgPSB0aGlzLmV4cGFuZFVSTCh0bylcbiAgICB0aGlzLmxpdmVTb2NrZXQuaGlzdG9yeVBhdGNoKHRvLCBraW5kKVxuICB9XG5cbiAgZXhwYW5kVVJMKHRvKXtcbiAgICByZXR1cm4gdG8uc3RhcnRzV2l0aChcIi9cIikgPyBgJHt3aW5kb3cubG9jYXRpb24ucHJvdG9jb2x9Ly8ke3dpbmRvdy5sb2NhdGlvbi5ob3N0fSR7dG99YCA6IHRvXG4gIH1cblxuICBvblJlZGlyZWN0KHt0bywgZmxhc2gsIHJlbG9hZFRva2VufSl7IHRoaXMubGl2ZVNvY2tldC5yZWRpcmVjdCh0bywgZmxhc2gsIHJlbG9hZFRva2VuKSB9XG5cbiAgaXNEZXN0cm95ZWQoKXsgcmV0dXJuIHRoaXMuZGVzdHJveWVkIH1cblxuICBqb2luRGVhZCgpeyB0aGlzLmlzRGVhZCA9IHRydWUgfVxuXG4gIGpvaW5QdXNoKCl7XG4gICAgdGhpcy5qb2luUHVzaCA9IHRoaXMuam9pblB1c2ggfHwgdGhpcy5jaGFubmVsLmpvaW4oKVxuICAgIHJldHVybiB0aGlzLmpvaW5QdXNoXG4gIH1cblxuICBqb2luKGNhbGxiYWNrKXtcbiAgICB0aGlzLnNob3dMb2FkZXIodGhpcy5saXZlU29ja2V0LmxvYWRlclRpbWVvdXQpXG4gICAgdGhpcy5iaW5kQ2hhbm5lbCgpXG4gICAgaWYodGhpcy5pc01haW4oKSl7XG4gICAgICB0aGlzLnN0b3BDYWxsYmFjayA9IHRoaXMubGl2ZVNvY2tldC53aXRoUGFnZUxvYWRpbmcoe3RvOiB0aGlzLmhyZWYsIGtpbmQ6IFwiaW5pdGlhbFwifSlcbiAgICB9XG4gICAgdGhpcy5qb2luQ2FsbGJhY2sgPSAob25Eb25lKSA9PiB7XG4gICAgICBvbkRvbmUgPSBvbkRvbmUgfHwgZnVuY3Rpb24oKXt9XG4gICAgICBjYWxsYmFjayA/IGNhbGxiYWNrKHRoaXMuam9pbkNvdW50LCBvbkRvbmUpIDogb25Eb25lKClcbiAgICB9XG5cbiAgICB0aGlzLndyYXBQdXNoKCgpID0+IHRoaXMuY2hhbm5lbC5qb2luKCksIHtcbiAgICAgIG9rOiAocmVzcCkgPT4gdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4gdGhpcy5vbkpvaW4ocmVzcCkpLFxuICAgICAgZXJyb3I6IChlcnJvcikgPT4gdGhpcy5vbkpvaW5FcnJvcihlcnJvciksXG4gICAgICB0aW1lb3V0OiAoKSA9PiB0aGlzLm9uSm9pbkVycm9yKHtyZWFzb246IFwidGltZW91dFwifSlcbiAgICB9KVxuICB9XG5cbiAgb25Kb2luRXJyb3IocmVzcCl7XG4gICAgaWYocmVzcC5yZWFzb24gPT09IFwicmVsb2FkXCIpe1xuICAgICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbYGZhaWxlZCBtb3VudCB3aXRoICR7cmVzcC5zdGF0dXN9LiBGYWxsaW5nIGJhY2sgdG8gcGFnZSByZWxvYWRgLCByZXNwXSlcbiAgICAgIHRoaXMub25SZWRpcmVjdCh7dG86IHRoaXMucm9vdC5ocmVmLCByZWxvYWRUb2tlbjogcmVzcC50b2tlbn0pXG4gICAgICByZXR1cm5cbiAgICB9IGVsc2UgaWYocmVzcC5yZWFzb24gPT09IFwidW5hdXRob3JpemVkXCIgfHwgcmVzcC5yZWFzb24gPT09IFwic3RhbGVcIil7XG4gICAgICB0aGlzLmxvZyhcImVycm9yXCIsICgpID0+IFtcInVuYXV0aG9yaXplZCBsaXZlX3JlZGlyZWN0LiBGYWxsaW5nIGJhY2sgdG8gcGFnZSByZXF1ZXN0XCIsIHJlc3BdKVxuICAgICAgdGhpcy5vblJlZGlyZWN0KHt0bzogdGhpcy5yb290LmhyZWZ9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmKHJlc3AucmVkaXJlY3QgfHwgcmVzcC5saXZlX3JlZGlyZWN0KXtcbiAgICAgIHRoaXMuam9pblBlbmRpbmcgPSBmYWxzZVxuICAgICAgdGhpcy5jaGFubmVsLmxlYXZlKClcbiAgICB9XG4gICAgaWYocmVzcC5yZWRpcmVjdCl7IHJldHVybiB0aGlzLm9uUmVkaXJlY3QocmVzcC5yZWRpcmVjdCkgfVxuICAgIGlmKHJlc3AubGl2ZV9yZWRpcmVjdCl7IHJldHVybiB0aGlzLm9uTGl2ZVJlZGlyZWN0KHJlc3AubGl2ZV9yZWRpcmVjdCkgfVxuICAgIHRoaXMubG9nKFwiZXJyb3JcIiwgKCkgPT4gW1widW5hYmxlIHRvIGpvaW5cIiwgcmVzcF0pXG4gICAgaWYodGhpcy5pc01haW4oKSl7XG4gICAgICB0aGlzLmRpc3BsYXlFcnJvcihbUEhYX0xPQURJTkdfQ0xBU1MsIFBIWF9FUlJPUl9DTEFTUywgUEhYX1NFUlZFUl9FUlJPUl9DTEFTU10pXG4gICAgICBpZih0aGlzLmxpdmVTb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMubGl2ZVNvY2tldC5yZWxvYWRXaXRoSml0dGVyKHRoaXMpIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYodGhpcy5qb2luQXR0ZW1wdHMgPj0gTUFYX0NISUxEX0pPSU5fQVRURU1QVFMpe1xuICAgICAgICAvLyBwdXQgdGhlIHJvb3QgcmV2aWV3IGludG8gcGVybWFuZW50IGVycm9yIHN0YXRlLCBidXQgZG9uJ3QgZGVzdHJveSBpdCBhcyBpdCBjYW4gcmVtYWluIGFjdGl2ZVxuICAgICAgICB0aGlzLnJvb3QuZGlzcGxheUVycm9yKFtQSFhfTE9BRElOR19DTEFTUywgUEhYX0VSUk9SX0NMQVNTLCBQSFhfU0VSVkVSX0VSUk9SX0NMQVNTXSlcbiAgICAgICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbYGdpdmluZyB1cCB0cnlpbmcgdG8gbW91bnQgYWZ0ZXIgJHtNQVhfQ0hJTERfSk9JTl9BVFRFTVBUU30gdHJpZXNgLCByZXNwXSlcbiAgICAgICAgdGhpcy5kZXN0cm95KClcbiAgICAgIH1cbiAgICAgIGxldCB0cnVlQ2hpbGRFbCA9IERPTS5ieUlkKHRoaXMuZWwuaWQpXG4gICAgICBpZih0cnVlQ2hpbGRFbCl7XG4gICAgICAgIERPTS5tZXJnZUF0dHJzKHRydWVDaGlsZEVsLCB0aGlzLmVsKVxuICAgICAgICB0aGlzLmRpc3BsYXlFcnJvcihbUEhYX0xPQURJTkdfQ0xBU1MsIFBIWF9FUlJPUl9DTEFTUywgUEhYX1NFUlZFUl9FUlJPUl9DTEFTU10pXG4gICAgICAgIHRoaXMuZWwgPSB0cnVlQ2hpbGRFbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvbkNsb3NlKHJlYXNvbil7XG4gICAgaWYodGhpcy5pc0Rlc3Ryb3llZCgpKXsgcmV0dXJuIH1cbiAgICBpZih0aGlzLmlzTWFpbigpICYmIHRoaXMubGl2ZVNvY2tldC5oYXNQZW5kaW5nTGluaygpICYmIHJlYXNvbiAhPT0gXCJsZWF2ZVwiKXtcbiAgICAgIHJldHVybiB0aGlzLmxpdmVTb2NrZXQucmVsb2FkV2l0aEppdHRlcih0aGlzKVxuICAgIH1cbiAgICB0aGlzLmRlc3Ryb3lBbGxDaGlsZHJlbigpXG4gICAgdGhpcy5saXZlU29ja2V0LmRyb3BBY3RpdmVFbGVtZW50KHRoaXMpXG4gICAgLy8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gYmUgbnVsbCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMVxuICAgIGlmKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpeyBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKSB9XG4gICAgaWYodGhpcy5saXZlU29ja2V0LmlzVW5sb2FkZWQoKSl7XG4gICAgICB0aGlzLnNob3dMb2FkZXIoQkVGT1JFX1VOTE9BRF9MT0FERVJfVElNRU9VVClcbiAgICB9XG4gIH1cblxuICBvbkVycm9yKHJlYXNvbil7XG4gICAgdGhpcy5vbkNsb3NlKHJlYXNvbilcbiAgICBpZih0aGlzLmxpdmVTb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMubG9nKFwiZXJyb3JcIiwgKCkgPT4gW1widmlldyBjcmFzaGVkXCIsIHJlYXNvbl0pIH1cbiAgICBpZighdGhpcy5saXZlU29ja2V0LmlzVW5sb2FkZWQoKSl7XG4gICAgICBpZih0aGlzLmxpdmVTb2NrZXQuaXNDb25uZWN0ZWQoKSl7XG4gICAgICAgIHRoaXMuZGlzcGxheUVycm9yKFtQSFhfTE9BRElOR19DTEFTUywgUEhYX0VSUk9SX0NMQVNTLCBQSFhfU0VSVkVSX0VSUk9SX0NMQVNTXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGlzcGxheUVycm9yKFtQSFhfTE9BRElOR19DTEFTUywgUEhYX0VSUk9SX0NMQVNTLCBQSFhfQ0xJRU5UX0VSUk9SX0NMQVNTXSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkaXNwbGF5RXJyb3IoY2xhc3Nlcyl7XG4gICAgaWYodGhpcy5pc01haW4oKSl7IERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6cGFnZS1sb2FkaW5nLXN0YXJ0XCIsIHtkZXRhaWw6IHt0bzogdGhpcy5ocmVmLCBraW5kOiBcImVycm9yXCJ9fSkgfVxuICAgIHRoaXMuc2hvd0xvYWRlcigpXG4gICAgdGhpcy5zZXRDb250YWluZXJDbGFzc2VzKC4uLmNsYXNzZXMpXG4gICAgdGhpcy5leGVjQWxsKHRoaXMuYmluZGluZyhcImRpc2Nvbm5lY3RlZFwiKSlcbiAgfVxuXG4gIHdyYXBQdXNoKGNhbGxlclB1c2gsIHJlY2VpdmVzKXtcbiAgICBsZXQgbGF0ZW5jeSA9IHRoaXMubGl2ZVNvY2tldC5nZXRMYXRlbmN5U2ltKClcbiAgICBsZXQgd2l0aExhdGVuY3kgPSBsYXRlbmN5ID9cbiAgICAgIChjYikgPT4gc2V0VGltZW91dCgoKSA9PiAhdGhpcy5pc0Rlc3Ryb3llZCgpICYmIGNiKCksIGxhdGVuY3kpIDpcbiAgICAgIChjYikgPT4gIXRoaXMuaXNEZXN0cm95ZWQoKSAmJiBjYigpXG5cbiAgICB3aXRoTGF0ZW5jeSgoKSA9PiB7XG4gICAgICBjYWxsZXJQdXNoKClcbiAgICAgICAgLnJlY2VpdmUoXCJva1wiLCByZXNwID0+IHdpdGhMYXRlbmN5KCgpID0+IHJlY2VpdmVzLm9rICYmIHJlY2VpdmVzLm9rKHJlc3ApKSlcbiAgICAgICAgLnJlY2VpdmUoXCJlcnJvclwiLCByZWFzb24gPT4gd2l0aExhdGVuY3koKCkgPT4gcmVjZWl2ZXMuZXJyb3IgJiYgcmVjZWl2ZXMuZXJyb3IocmVhc29uKSkpXG4gICAgICAgIC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiB3aXRoTGF0ZW5jeSgoKSA9PiByZWNlaXZlcy50aW1lb3V0ICYmIHJlY2VpdmVzLnRpbWVvdXQoKSkpXG4gICAgfSlcbiAgfVxuXG4gIHB1c2hXaXRoUmVwbHkocmVmR2VuZXJhdG9yLCBldmVudCwgcGF5bG9hZCl7XG4gICAgaWYoIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiBQcm9taXNlLnJlamVjdCh7ZXJyb3I6IFwibm9jb25uZWN0aW9uXCJ9KSB9XG5cbiAgICBsZXQgW3JlZiwgW2VsXSwgb3B0c10gPSByZWZHZW5lcmF0b3IgPyByZWZHZW5lcmF0b3IoKSA6IFtudWxsLCBbXSwge31dXG4gICAgbGV0IG9sZEpvaW5Db3VudCA9IHRoaXMuam9pbkNvdW50XG4gICAgbGV0IG9uTG9hZGluZ0RvbmUgPSBmdW5jdGlvbigpe31cbiAgICBpZihvcHRzLnBhZ2VfbG9hZGluZyl7XG4gICAgICBvbkxvYWRpbmdEb25lID0gdGhpcy5saXZlU29ja2V0LndpdGhQYWdlTG9hZGluZyh7a2luZDogXCJlbGVtZW50XCIsIHRhcmdldDogZWx9KVxuICAgIH1cblxuICAgIGlmKHR5cGVvZiAocGF5bG9hZC5jaWQpICE9PSBcIm51bWJlclwiKXsgZGVsZXRlIHBheWxvYWQuY2lkIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLndyYXBQdXNoKCgpID0+IHRoaXMuY2hhbm5lbC5wdXNoKGV2ZW50LCBwYXlsb2FkLCBQVVNIX1RJTUVPVVQpLCB7XG4gICAgICAgIG9rOiAocmVzcCkgPT4ge1xuICAgICAgICAgIGlmKHJlZiAhPT0gbnVsbCl7IHRoaXMubGFzdEFja1JlZiA9IHJlZiB9XG4gICAgICAgICAgbGV0IGZpbmlzaCA9IChob29rUmVwbHkpID0+IHtcbiAgICAgICAgICAgIGlmKHJlc3AucmVkaXJlY3QpeyB0aGlzLm9uUmVkaXJlY3QocmVzcC5yZWRpcmVjdCkgfVxuICAgICAgICAgICAgaWYocmVzcC5saXZlX3BhdGNoKXsgdGhpcy5vbkxpdmVQYXRjaChyZXNwLmxpdmVfcGF0Y2gpIH1cbiAgICAgICAgICAgIGlmKHJlc3AubGl2ZV9yZWRpcmVjdCl7IHRoaXMub25MaXZlUmVkaXJlY3QocmVzcC5saXZlX3JlZGlyZWN0KSB9XG4gICAgICAgICAgICBvbkxvYWRpbmdEb25lKClcbiAgICAgICAgICAgIHJlc29sdmUoe3Jlc3A6IHJlc3AsIHJlcGx5OiBob29rUmVwbHl9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihyZXNwLmRpZmYpe1xuICAgICAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmFwcGx5RGlmZihcInVwZGF0ZVwiLCByZXNwLmRpZmYsICh7ZGlmZiwgcmVwbHksIGV2ZW50c30pID0+IHtcbiAgICAgICAgICAgICAgICBpZihyZWYgIT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgdGhpcy51bmRvUmVmcyhyZWYsIHBheWxvYWQuZXZlbnQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKGRpZmYsIGV2ZW50cylcbiAgICAgICAgICAgICAgICBmaW5pc2gocmVwbHkpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZihyZWYgIT09IG51bGwpeyB0aGlzLnVuZG9SZWZzKHJlZiwgcGF5bG9hZC5ldmVudCkgfVxuICAgICAgICAgICAgZmluaXNoKG51bGwpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogKHJlYXNvbikgPT4gcmVqZWN0KHtlcnJvcjogcmVhc29ufSksXG4gICAgICAgIHRpbWVvdXQ6ICgpID0+IHtcbiAgICAgICAgICByZWplY3Qoe3RpbWVvdXQ6IHRydWV9KVxuICAgICAgICAgIGlmKHRoaXMuam9pbkNvdW50ID09PSBvbGRKb2luQ291bnQpe1xuICAgICAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlbG9hZFdpdGhKaXR0ZXIodGhpcywgKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmxvZyhcInRpbWVvdXRcIiwgKCkgPT4gW1wicmVjZWl2ZWQgdGltZW91dCB3aGlsZSBjb21tdW5pY2F0aW5nIHdpdGggc2VydmVyLiBGYWxsaW5nIGJhY2sgdG8gaGFyZCByZWZyZXNoIGZvciByZWNvdmVyeVwiXSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICB1bmRvUmVmcyhyZWYsIHBoeEV2ZW50LCBvbmx5RWxzKXtcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH0gLy8gZXhpdCBpZiBleHRlcm5hbCBmb3JtIHRyaWdnZXJlZFxuICAgIGxldCBzZWxlY3RvciA9IGBbJHtQSFhfUkVGX1NSQ309XCIke3RoaXMucmVmU3JjKCl9XCJdYFxuXG4gICAgaWYob25seUVscyl7XG4gICAgICBvbmx5RWxzID0gbmV3IFNldChvbmx5RWxzKVxuICAgICAgRE9NLmFsbChkb2N1bWVudCwgc2VsZWN0b3IsIHBhcmVudCA9PiB7XG4gICAgICAgIGlmKG9ubHlFbHMgJiYgIW9ubHlFbHMuaGFzKHBhcmVudCkpeyByZXR1cm4gfVxuICAgICAgICAvLyB1bmRvIGFueSBjaGlsZCByZWZzIHdpdGhpbiBwYXJlbnQgZmlyc3RcbiAgICAgICAgRE9NLmFsbChwYXJlbnQsIHNlbGVjdG9yLCBjaGlsZCA9PiB0aGlzLnVuZG9FbFJlZihjaGlsZCwgcmVmLCBwaHhFdmVudCkpXG4gICAgICAgIHRoaXMudW5kb0VsUmVmKHBhcmVudCwgcmVmLCBwaHhFdmVudClcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIERPTS5hbGwoZG9jdW1lbnQsIHNlbGVjdG9yLCBlbCA9PiB0aGlzLnVuZG9FbFJlZihlbCwgcmVmLCBwaHhFdmVudCkpXG4gICAgfVxuICB9XG5cbiAgdW5kb0VsUmVmKGVsLCByZWYsIHBoeEV2ZW50KXtcbiAgICBsZXQgZWxSZWYgPSBuZXcgRWxlbWVudFJlZihlbClcblxuICAgIGVsUmVmLm1heWJlVW5kbyhyZWYsIHBoeEV2ZW50LCBjbG9uZWRUcmVlID0+IHtcbiAgICAgIGxldCBob29rID0gdGhpcy50cmlnZ2VyQmVmb3JlVXBkYXRlSG9vayhlbCwgY2xvbmVkVHJlZSlcbiAgICAgIERPTVBhdGNoLnBhdGNoV2l0aENsb25lZFRyZWUoZWwsIGNsb25lZFRyZWUsIHRoaXMubGl2ZVNvY2tldClcbiAgICAgIERPTS5hbGwoZWwsIGBbJHtQSFhfUkVGX1NSQ309XCIke3RoaXMucmVmU3JjKCl9XCJdYCwgY2hpbGQgPT4gdGhpcy51bmRvRWxSZWYoY2hpbGQsIHJlZiwgcGh4RXZlbnQpKVxuICAgICAgdGhpcy5leGVjTmV3TW91bnRlZChlbClcbiAgICAgIGlmKGhvb2speyBob29rLl9fdXBkYXRlZCgpIH1cbiAgICB9KVxuICB9XG5cbiAgcmVmU3JjKCl7IHJldHVybiB0aGlzLmVsLmlkIH1cblxuICBwdXRSZWYoZWxlbWVudHMsIHBoeEV2ZW50LCBldmVudFR5cGUsIG9wdHMgPSB7fSl7XG4gICAgbGV0IG5ld1JlZiA9IHRoaXMucmVmKytcbiAgICBsZXQgZGlzYWJsZVdpdGggPSB0aGlzLmJpbmRpbmcoUEhYX0RJU0FCTEVfV0lUSClcbiAgICBpZihvcHRzLmxvYWRpbmcpe1xuICAgICAgbGV0IGxvYWRpbmdFbHMgPSBET00uYWxsKGRvY3VtZW50LCBvcHRzLmxvYWRpbmcpLm1hcChlbCA9PiB7XG4gICAgICAgIHJldHVybiB7ZWwsIGxvY2s6IHRydWUsIGxvYWRpbmc6IHRydWV9XG4gICAgICB9KVxuICAgICAgZWxlbWVudHMgPSBlbGVtZW50cy5jb25jYXQobG9hZGluZ0VscylcbiAgICB9XG5cbiAgICBmb3IobGV0IHtlbCwgbG9jaywgbG9hZGluZ30gb2YgZWxlbWVudHMpe1xuICAgICAgaWYoIWxvY2sgJiYgIWxvYWRpbmcpeyB0aHJvdyBuZXcgRXJyb3IoXCJwdXRSZWYgcmVxdWlyZXMgbG9jayBvciBsb2FkaW5nXCIpIH1cbiAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfUkVGX1NSQywgdGhpcy5yZWZTcmMoKSlcbiAgICAgIGlmKGxvYWRpbmcpeyBlbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9MT0FESU5HLCBuZXdSZWYpIH1cbiAgICAgIGlmKGxvY2speyBlbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9MT0NLLCBuZXdSZWYpIH1cblxuICAgICAgaWYoIWxvYWRpbmcgfHwgKG9wdHMuc3VibWl0dGVyICYmICEoZWwgPT09IG9wdHMuc3VibWl0dGVyIHx8IGVsID09PSBvcHRzLmZvcm0pKSl7IGNvbnRpbnVlIH1cblxuICAgICAgbGV0IGxvY2tDb21wbGV0ZVByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihgcGh4OnVuZG8tbG9jazoke25ld1JlZn1gLCAoKSA9PiByZXNvbHZlKGRldGFpbCksIHtvbmNlOiB0cnVlfSlcbiAgICAgIH0pXG5cbiAgICAgIGxldCBsb2FkaW5nQ29tcGxldGVQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoYHBoeDp1bmRvLWxvYWRpbmc6JHtuZXdSZWZ9YCwgKCkgPT4gcmVzb2x2ZShkZXRhaWwpLCB7b25jZTogdHJ1ZX0pXG4gICAgICB9KVxuXG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGBwaHgtJHtldmVudFR5cGV9LWxvYWRpbmdgKVxuICAgICAgbGV0IGRpc2FibGVUZXh0ID0gZWwuZ2V0QXR0cmlidXRlKGRpc2FibGVXaXRoKVxuICAgICAgaWYoZGlzYWJsZVRleHQgIT09IG51bGwpe1xuICAgICAgICBpZighZWwuZ2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSkpe1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUsIGVsLmlubmVyVGV4dClcbiAgICAgICAgfVxuICAgICAgICBpZihkaXNhYmxlVGV4dCAhPT0gXCJcIil7IGVsLmlubmVyVGV4dCA9IGRpc2FibGVUZXh0IH1cbiAgICAgICAgLy8gUEhYX0RJU0FCTEVEIGNvdWxkIGhhdmUgYWxyZWFkeSBiZWVuIHNldCBpbiBkaXNhYmxlRm9ybVxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVELCBlbC5nZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVEKSB8fCBlbC5kaXNhYmxlZClcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJcIilcbiAgICAgIH1cblxuICAgICAgbGV0IGRldGFpbCA9IHtcbiAgICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgICBldmVudFR5cGU6IGV2ZW50VHlwZSxcbiAgICAgICAgcmVmOiBuZXdSZWYsXG4gICAgICAgIGlzTG9hZGluZzogbG9hZGluZyxcbiAgICAgICAgaXNMb2NrZWQ6IGxvY2ssXG4gICAgICAgIGxvY2tFbGVtZW50czogZWxlbWVudHMuZmlsdGVyKCh7bG9ja30pID0+IGxvY2spLm1hcCgoe2VsfSkgPT4gZWwpLFxuICAgICAgICBsb2FkaW5nRWxlbWVudHM6IGVsZW1lbnRzLmZpbHRlcigoe2xvYWRpbmd9KSA9PiBsb2FkaW5nKS5tYXAoKHtlbH0pID0+IGVsKSxcbiAgICAgICAgdW5sb2NrOiAoZWxzKSA9PiB7XG4gICAgICAgICAgZWxzID0gQXJyYXkuaXNBcnJheShlbHMpID8gZWxzIDogW2Vsc11cbiAgICAgICAgICB0aGlzLnVuZG9SZWZzKG5ld1JlZiwgcGh4RXZlbnQsIGVscylcbiAgICAgICAgfSxcbiAgICAgICAgbG9ja0NvbXBsZXRlOiBsb2NrQ29tcGxldGVQcm9taXNlLFxuICAgICAgICBsb2FkaW5nQ29tcGxldGU6IGxvYWRpbmdDb21wbGV0ZVByb21pc2UsXG4gICAgICAgIGxvY2s6IChsb2NrRWwpID0+IHtcbiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBpZih0aGlzLmlzQWNrZWQobmV3UmVmKSl7IHJldHVybiByZXNvbHZlKGRldGFpbCkgfVxuICAgICAgICAgICAgbG9ja0VsLnNldEF0dHJpYnV0ZShQSFhfUkVGX0xPQ0ssIG5ld1JlZilcbiAgICAgICAgICAgIGxvY2tFbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9TUkMsIHRoaXMucmVmU3JjKCkpXG4gICAgICAgICAgICBsb2NrRWwuYWRkRXZlbnRMaXN0ZW5lcihgcGh4OmxvY2stc3RvcDoke25ld1JlZn1gLCAoKSA9PiByZXNvbHZlKGRldGFpbCksIHtvbmNlOiB0cnVlfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcInBoeDpwdXNoXCIsIHtcbiAgICAgICAgZGV0YWlsOiBkZXRhaWwsXG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IGZhbHNlXG4gICAgICB9KSlcbiAgICAgIGlmKHBoeEV2ZW50KXtcbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoYHBoeDpwdXNoOiR7cGh4RXZlbnR9YCwge1xuICAgICAgICAgIGRldGFpbDogZGV0YWlsLFxuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2VcbiAgICAgICAgfSkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbbmV3UmVmLCBlbGVtZW50cy5tYXAoKHtlbH0pID0+IGVsKSwgb3B0c11cbiAgfVxuXG4gIGlzQWNrZWQocmVmKXsgcmV0dXJuIHRoaXMubGFzdEFja1JlZiAhPT0gbnVsbCAmJiB0aGlzLmxhc3RBY2tSZWYgPj0gcmVmIH1cblxuICBjb21wb25lbnRJRChlbCl7XG4gICAgbGV0IGNpZCA9IGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVClcbiAgICByZXR1cm4gY2lkID8gcGFyc2VJbnQoY2lkKSA6IG51bGxcbiAgfVxuXG4gIHRhcmdldENvbXBvbmVudElEKHRhcmdldCwgdGFyZ2V0Q3R4LCBvcHRzID0ge30pe1xuICAgIGlmKGlzQ2lkKHRhcmdldEN0eCkpeyByZXR1cm4gdGFyZ2V0Q3R4IH1cblxuICAgIGxldCBjaWRPclNlbGVjdG9yID0gb3B0cy50YXJnZXQgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJ0YXJnZXRcIikpXG4gICAgaWYoaXNDaWQoY2lkT3JTZWxlY3Rvcikpe1xuICAgICAgcmV0dXJuIHBhcnNlSW50KGNpZE9yU2VsZWN0b3IpXG4gICAgfSBlbHNlIGlmKHRhcmdldEN0eCAmJiAoY2lkT3JTZWxlY3RvciAhPT0gbnVsbCB8fCBvcHRzLnRhcmdldCkpe1xuICAgICAgcmV0dXJuIHRoaXMuY2xvc2VzdENvbXBvbmVudElEKHRhcmdldEN0eClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBjbG9zZXN0Q29tcG9uZW50SUQodGFyZ2V0Q3R4KXtcbiAgICBpZihpc0NpZCh0YXJnZXRDdHgpKXtcbiAgICAgIHJldHVybiB0YXJnZXRDdHhcbiAgICB9IGVsc2UgaWYodGFyZ2V0Q3R4KXtcbiAgICAgIHJldHVybiBtYXliZSh0YXJnZXRDdHguY2xvc2VzdChgWyR7UEhYX0NPTVBPTkVOVH1dYCksIGVsID0+IHRoaXMub3duc0VsZW1lbnQoZWwpICYmIHRoaXMuY29tcG9uZW50SUQoZWwpKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHB1c2hIb29rRXZlbnQoZWwsIHRhcmdldEN0eCwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpe1xuICAgICAgdGhpcy5sb2coXCJob29rXCIsICgpID0+IFtcInVuYWJsZSB0byBwdXNoIGhvb2sgZXZlbnQuIExpdmVWaWV3IG5vdCBjb25uZWN0ZWRcIiwgZXZlbnQsIHBheWxvYWRdKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGxldCBbcmVmLCBlbHMsIG9wdHNdID0gdGhpcy5wdXRSZWYoW3tlbCwgbG9hZGluZzogdHJ1ZSwgbG9jazogdHJ1ZX1dLCBldmVudCwgXCJob29rXCIpXG4gICAgdGhpcy5wdXNoV2l0aFJlcGx5KCgpID0+IFtyZWYsIGVscywgb3B0c10sIFwiZXZlbnRcIiwge1xuICAgICAgdHlwZTogXCJob29rXCIsXG4gICAgICBldmVudDogZXZlbnQsXG4gICAgICB2YWx1ZTogcGF5bG9hZCxcbiAgICAgIGNpZDogdGhpcy5jbG9zZXN0Q29tcG9uZW50SUQodGFyZ2V0Q3R4KVxuICAgIH0pLnRoZW4oKHtyZXNwOiBfcmVzcCwgcmVwbHk6IGhvb2tSZXBseX0pID0+IG9uUmVwbHkoaG9va1JlcGx5LCByZWYpKVxuXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgZXh0cmFjdE1ldGEoZWwsIG1ldGEsIHZhbHVlKXtcbiAgICBsZXQgcHJlZml4ID0gdGhpcy5iaW5kaW5nKFwidmFsdWUtXCIpXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGVsLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xuICAgICAgaWYoIW1ldGEpeyBtZXRhID0ge30gfVxuICAgICAgbGV0IG5hbWUgPSBlbC5hdHRyaWJ1dGVzW2ldLm5hbWVcbiAgICAgIGlmKG5hbWUuc3RhcnRzV2l0aChwcmVmaXgpKXsgbWV0YVtuYW1lLnJlcGxhY2UocHJlZml4LCBcIlwiKV0gPSBlbC5nZXRBdHRyaWJ1dGUobmFtZSkgfVxuICAgIH1cbiAgICBpZihlbC52YWx1ZSAhPT0gdW5kZWZpbmVkICYmICEoZWwgaW5zdGFuY2VvZiBIVE1MRm9ybUVsZW1lbnQpKXtcbiAgICAgIGlmKCFtZXRhKXsgbWV0YSA9IHt9IH1cbiAgICAgIG1ldGEudmFsdWUgPSBlbC52YWx1ZVxuXG4gICAgICBpZihlbC50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgQ0hFQ0tBQkxFX0lOUFVUUy5pbmRleE9mKGVsLnR5cGUpID49IDAgJiYgIWVsLmNoZWNrZWQpe1xuICAgICAgICBkZWxldGUgbWV0YS52YWx1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZih2YWx1ZSl7XG4gICAgICBpZighbWV0YSl7IG1ldGEgPSB7fSB9XG4gICAgICBmb3IobGV0IGtleSBpbiB2YWx1ZSl7IG1ldGFba2V5XSA9IHZhbHVlW2tleV0gfVxuICAgIH1cbiAgICByZXR1cm4gbWV0YVxuICB9XG5cbiAgcHVzaEV2ZW50KHR5cGUsIGVsLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBtZXRhLCBvcHRzID0ge30sIG9uUmVwbHkpe1xuICAgIHRoaXMucHVzaFdpdGhSZXBseSgoKSA9PiB0aGlzLnB1dFJlZihbe2VsLCBsb2FkaW5nOiB0cnVlLCBsb2NrOiB0cnVlfV0sIHBoeEV2ZW50LCB0eXBlLCBvcHRzKSwgXCJldmVudFwiLCB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgdmFsdWU6IHRoaXMuZXh0cmFjdE1ldGEoZWwsIG1ldGEsIG9wdHMudmFsdWUpLFxuICAgICAgY2lkOiB0aGlzLnRhcmdldENvbXBvbmVudElEKGVsLCB0YXJnZXRDdHgsIG9wdHMpXG4gICAgfSkudGhlbigoe3JlcGx5fSkgPT4gb25SZXBseSAmJiBvblJlcGx5KHJlcGx5KSlcbiAgfVxuXG4gIHB1c2hGaWxlUHJvZ3Jlc3MoZmlsZUVsLCBlbnRyeVJlZiwgcHJvZ3Jlc3MsIG9uUmVwbHkgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgdGhpcy5saXZlU29ja2V0LndpdGhpbk93bmVycyhmaWxlRWwuZm9ybSwgKHZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgdmlldy5wdXNoV2l0aFJlcGx5KG51bGwsIFwicHJvZ3Jlc3NcIiwge1xuICAgICAgICBldmVudDogZmlsZUVsLmdldEF0dHJpYnV0ZSh2aWV3LmJpbmRpbmcoUEhYX1BST0dSRVNTKSksXG4gICAgICAgIHJlZjogZmlsZUVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRiksXG4gICAgICAgIGVudHJ5X3JlZjogZW50cnlSZWYsXG4gICAgICAgIHByb2dyZXNzOiBwcm9ncmVzcyxcbiAgICAgICAgY2lkOiB2aWV3LnRhcmdldENvbXBvbmVudElEKGZpbGVFbC5mb3JtLCB0YXJnZXRDdHgpXG4gICAgICB9KS50aGVuKCh7cmVzcH0pID0+IG9uUmVwbHkocmVzcCkpXG4gICAgfSlcbiAgfVxuXG4gIHB1c2hJbnB1dChpbnB1dEVsLCB0YXJnZXRDdHgsIGZvcmNlQ2lkLCBwaHhFdmVudCwgb3B0cywgY2FsbGJhY2spe1xuICAgIGlmKCFpbnB1dEVsLmZvcm0pe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZm9ybSBldmVudHMgcmVxdWlyZSB0aGUgaW5wdXQgdG8gYmUgaW5zaWRlIGEgZm9ybVwiKVxuICAgIH1cblxuICAgIGxldCB1cGxvYWRzXG4gICAgbGV0IGNpZCA9IGlzQ2lkKGZvcmNlQ2lkKSA/IGZvcmNlQ2lkIDogdGhpcy50YXJnZXRDb21wb25lbnRJRChpbnB1dEVsLmZvcm0sIHRhcmdldEN0eCwgb3B0cylcbiAgICBsZXQgcmVmR2VuZXJhdG9yID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMucHV0UmVmKFtcbiAgICAgICAge2VsOiBpbnB1dEVsLCBsb2FkaW5nOiB0cnVlLCBsb2NrOiB0cnVlfSxcbiAgICAgICAge2VsOiBpbnB1dEVsLmZvcm0sIGxvYWRpbmc6IHRydWUsIGxvY2s6IHRydWV9XG4gICAgICBdLCBwaHhFdmVudCwgXCJjaGFuZ2VcIiwgb3B0cylcbiAgICB9XG4gICAgbGV0IGZvcm1EYXRhXG4gICAgbGV0IG1ldGEgID0gdGhpcy5leHRyYWN0TWV0YShpbnB1dEVsLmZvcm0pXG4gICAgaWYoaW5wdXRFbCBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50KXsgbWV0YS5zdWJtaXR0ZXIgPSBpbnB1dEVsIH1cbiAgICBpZihpbnB1dEVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIikpKXtcbiAgICAgIGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShpbnB1dEVsLmZvcm0sIHtfdGFyZ2V0OiBvcHRzLl90YXJnZXQsIC4uLm1ldGF9LCBbaW5wdXRFbC5uYW1lXSlcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybURhdGEgPSBzZXJpYWxpemVGb3JtKGlucHV0RWwuZm9ybSwge190YXJnZXQ6IG9wdHMuX3RhcmdldCwgLi4ubWV0YX0pXG4gICAgfVxuICAgIGlmKERPTS5pc1VwbG9hZElucHV0KGlucHV0RWwpICYmIGlucHV0RWwuZmlsZXMgJiYgaW5wdXRFbC5maWxlcy5sZW5ndGggPiAwKXtcbiAgICAgIExpdmVVcGxvYWRlci50cmFja0ZpbGVzKGlucHV0RWwsIEFycmF5LmZyb20oaW5wdXRFbC5maWxlcykpXG4gICAgfVxuICAgIHVwbG9hZHMgPSBMaXZlVXBsb2FkZXIuc2VyaWFsaXplVXBsb2FkcyhpbnB1dEVsKVxuXG4gICAgbGV0IGV2ZW50ID0ge1xuICAgICAgdHlwZTogXCJmb3JtXCIsXG4gICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICB1cGxvYWRzOiB1cGxvYWRzLFxuICAgICAgY2lkOiBjaWRcbiAgICB9XG4gICAgdGhpcy5wdXNoV2l0aFJlcGx5KHJlZkdlbmVyYXRvciwgXCJldmVudFwiLCBldmVudCkudGhlbigoe3Jlc3B9KSA9PiB7XG4gICAgICBpZihET00uaXNVcGxvYWRJbnB1dChpbnB1dEVsKSAmJiBET00uaXNBdXRvVXBsb2FkKGlucHV0RWwpKXtcbiAgICAgICAgaWYoTGl2ZVVwbG9hZGVyLmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXRFbCkubGVuZ3RoID4gMCl7XG4gICAgICAgICAgbGV0IFtyZWYsIF9lbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgICAgICB0aGlzLnVuZG9SZWZzKHJlZiwgcGh4RXZlbnQsIFtpbnB1dEVsLmZvcm1dKVxuICAgICAgICAgIHRoaXMudXBsb2FkRmlsZXMoaW5wdXRFbC5mb3JtLCBwaHhFdmVudCwgdGFyZ2V0Q3R4LCByZWYsIGNpZCwgKF91cGxvYWRzKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwKVxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyQXdhaXRpbmdTdWJtaXQoaW5wdXRFbC5mb3JtLCBwaHhFdmVudClcbiAgICAgICAgICAgIHRoaXMudW5kb1JlZnMocmVmLCBwaHhFdmVudClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB0cmlnZ2VyQXdhaXRpbmdTdWJtaXQoZm9ybUVsLCBwaHhFdmVudCl7XG4gICAgbGV0IGF3YWl0aW5nU3VibWl0ID0gdGhpcy5nZXRTY2hlZHVsZWRTdWJtaXQoZm9ybUVsKVxuICAgIGlmKGF3YWl0aW5nU3VibWl0KXtcbiAgICAgIGxldCBbX2VsLCBfcmVmLCBfb3B0cywgY2FsbGJhY2tdID0gYXdhaXRpbmdTdWJtaXRcbiAgICAgIHRoaXMuY2FuY2VsU3VibWl0KGZvcm1FbCwgcGh4RXZlbnQpXG4gICAgICBjYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgZ2V0U2NoZWR1bGVkU3VibWl0KGZvcm1FbCl7XG4gICAgcmV0dXJuIHRoaXMuZm9ybVN1Ym1pdHMuZmluZCgoW2VsLCBfcmVmLCBfb3B0cywgX2NhbGxiYWNrXSkgPT4gZWwuaXNTYW1lTm9kZShmb3JtRWwpKVxuICB9XG5cbiAgc2NoZWR1bGVTdWJtaXQoZm9ybUVsLCByZWYsIG9wdHMsIGNhbGxiYWNrKXtcbiAgICBpZih0aGlzLmdldFNjaGVkdWxlZFN1Ym1pdChmb3JtRWwpKXsgcmV0dXJuIHRydWUgfVxuICAgIHRoaXMuZm9ybVN1Ym1pdHMucHVzaChbZm9ybUVsLCByZWYsIG9wdHMsIGNhbGxiYWNrXSlcbiAgfVxuXG4gIGNhbmNlbFN1Ym1pdChmb3JtRWwsIHBoeEV2ZW50KXtcbiAgICB0aGlzLmZvcm1TdWJtaXRzID0gdGhpcy5mb3JtU3VibWl0cy5maWx0ZXIoKFtlbCwgcmVmLCBfb3B0cywgX2NhbGxiYWNrXSkgPT4ge1xuICAgICAgaWYoZWwuaXNTYW1lTm9kZShmb3JtRWwpKXtcbiAgICAgICAgdGhpcy51bmRvUmVmcyhyZWYsIHBoeEV2ZW50KVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGRpc2FibGVGb3JtKGZvcm1FbCwgcGh4RXZlbnQsIG9wdHMgPSB7fSl7XG4gICAgbGV0IGZpbHRlcklnbm9yZWQgPSBlbCA9PiB7XG4gICAgICBsZXQgdXNlcklnbm9yZWQgPSBjbG9zZXN0UGh4QmluZGluZyhlbCwgYCR7dGhpcy5iaW5kaW5nKFBIWF9VUERBVEUpfT1pZ25vcmVgLCBlbC5mb3JtKVxuICAgICAgcmV0dXJuICEodXNlcklnbm9yZWQgfHwgY2xvc2VzdFBoeEJpbmRpbmcoZWwsIFwiZGF0YS1waHgtdXBkYXRlPWlnbm9yZVwiLCBlbC5mb3JtKSlcbiAgICB9XG4gICAgbGV0IGZpbHRlckRpc2FibGVzID0gZWwgPT4ge1xuICAgICAgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0RJU0FCTEVfV0lUSCkpXG4gICAgfVxuICAgIGxldCBmaWx0ZXJCdXR0b24gPSBlbCA9PiBlbC50YWdOYW1lID09IFwiQlVUVE9OXCJcblxuICAgIGxldCBmaWx0ZXJJbnB1dCA9IGVsID0+IFtcIklOUFVUXCIsIFwiVEVYVEFSRUFcIiwgXCJTRUxFQ1RcIl0uaW5jbHVkZXMoZWwudGFnTmFtZSlcblxuICAgIGxldCBmb3JtRWxlbWVudHMgPSBBcnJheS5mcm9tKGZvcm1FbC5lbGVtZW50cylcbiAgICBsZXQgZGlzYWJsZXMgPSBmb3JtRWxlbWVudHMuZmlsdGVyKGZpbHRlckRpc2FibGVzKVxuICAgIGxldCBidXR0b25zID0gZm9ybUVsZW1lbnRzLmZpbHRlcihmaWx0ZXJCdXR0b24pLmZpbHRlcihmaWx0ZXJJZ25vcmVkKVxuICAgIGxldCBpbnB1dHMgPSBmb3JtRWxlbWVudHMuZmlsdGVyKGZpbHRlcklucHV0KS5maWx0ZXIoZmlsdGVySWdub3JlZClcblxuICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQsIGJ1dHRvbi5kaXNhYmxlZClcbiAgICAgIGJ1dHRvbi5kaXNhYmxlZCA9IHRydWVcbiAgICB9KVxuICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShQSFhfUkVBRE9OTFksIGlucHV0LnJlYWRPbmx5KVxuICAgICAgaW5wdXQucmVhZE9ubHkgPSB0cnVlXG4gICAgICBpZihpbnB1dC5maWxlcyl7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQsIGlucHV0LmRpc2FibGVkKVxuICAgICAgICBpbnB1dC5kaXNhYmxlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9KVxuICAgIGxldCBmb3JtRWxzID0gZGlzYWJsZXMuY29uY2F0KGJ1dHRvbnMpLmNvbmNhdChpbnB1dHMpLm1hcChlbCA9PiB7XG4gICAgICByZXR1cm4ge2VsLCBsb2FkaW5nOiB0cnVlLCBsb2NrOiB0cnVlfVxuICAgIH0pXG5cbiAgICAvLyB3ZSByZXZlcnNlIHRoZSBvcmRlciBzbyBmb3JtIGNoaWxkcmVuIGFyZSBhbHJlYWR5IGxvY2tlZCBieSB0aGUgdGltZVxuICAgIC8vIHRoZSBmb3JtIGlzIGxvY2tlZFxuICAgIGxldCBlbHMgPSBbe2VsOiBmb3JtRWwsIGxvYWRpbmc6IHRydWUsIGxvY2s6IGZhbHNlfV0uY29uY2F0KGZvcm1FbHMpLnJldmVyc2UoKVxuICAgIHJldHVybiB0aGlzLnB1dFJlZihlbHMsIHBoeEV2ZW50LCBcInN1Ym1pdFwiLCBvcHRzKVxuICB9XG5cbiAgcHVzaEZvcm1TdWJtaXQoZm9ybUVsLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBzdWJtaXR0ZXIsIG9wdHMsIG9uUmVwbHkpe1xuICAgIGxldCByZWZHZW5lcmF0b3IgPSAoKSA9PiB0aGlzLmRpc2FibGVGb3JtKGZvcm1FbCwgcGh4RXZlbnQsIHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICBmb3JtOiBmb3JtRWwsXG4gICAgICBzdWJtaXR0ZXI6IHN1Ym1pdHRlclxuICAgIH0pXG4gICAgbGV0IGNpZCA9IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoZm9ybUVsLCB0YXJnZXRDdHgpXG4gICAgaWYoTGl2ZVVwbG9hZGVyLmhhc1VwbG9hZHNJblByb2dyZXNzKGZvcm1FbCkpe1xuICAgICAgbGV0IFtyZWYsIF9lbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgIGxldCBwdXNoID0gKCkgPT4gdGhpcy5wdXNoRm9ybVN1Ym1pdChmb3JtRWwsIHRhcmdldEN0eCwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgb3B0cywgb25SZXBseSlcbiAgICAgIHJldHVybiB0aGlzLnNjaGVkdWxlU3VibWl0KGZvcm1FbCwgcmVmLCBvcHRzLCBwdXNoKVxuICAgIH0gZWxzZSBpZihMaXZlVXBsb2FkZXIuaW5wdXRzQXdhaXRpbmdQcmVmbGlnaHQoZm9ybUVsKS5sZW5ndGggPiAwKXtcbiAgICAgIGxldCBbcmVmLCBlbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgIGxldCBwcm94eVJlZkdlbiA9ICgpID0+IFtyZWYsIGVscywgb3B0c11cbiAgICAgIHRoaXMudXBsb2FkRmlsZXMoZm9ybUVsLCBwaHhFdmVudCwgdGFyZ2V0Q3R4LCByZWYsIGNpZCwgKF91cGxvYWRzKSA9PiB7XG4gICAgICAgIC8vIGlmIHdlIHN0aWxsIGhhdmluZyBwZW5kaW5nIHByZWZsaWdodHMgaXQgbWVhbnMgd2UgaGF2ZSBpbnZhbGlkIGVudHJpZXNcbiAgICAgICAgLy8gYW5kIHRoZSBwaHgtc3VibWl0IGNhbm5vdCBiZSBjb21wbGV0ZWRcbiAgICAgICAgaWYoTGl2ZVVwbG9hZGVyLmlucHV0c0F3YWl0aW5nUHJlZmxpZ2h0KGZvcm1FbCkubGVuZ3RoID4gMCl7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudW5kb1JlZnMocmVmLCBwaHhFdmVudClcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWV0YSA9IHRoaXMuZXh0cmFjdE1ldGEoZm9ybUVsKVxuICAgICAgICBsZXQgZm9ybURhdGEgPSBzZXJpYWxpemVGb3JtKGZvcm1FbCwge3N1Ym1pdHRlciwgLi4ubWV0YX0pXG4gICAgICAgIHRoaXMucHVzaFdpdGhSZXBseShwcm94eVJlZkdlbiwgXCJldmVudFwiLCB7XG4gICAgICAgICAgdHlwZTogXCJmb3JtXCIsXG4gICAgICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgICAgIHZhbHVlOiBmb3JtRGF0YSxcbiAgICAgICAgICBjaWQ6IGNpZFxuICAgICAgICB9KS50aGVuKCh7cmVzcH0pID0+IG9uUmVwbHkocmVzcCkpXG4gICAgICB9KVxuICAgIH0gZWxzZSBpZighKGZvcm1FbC5oYXNBdHRyaWJ1dGUoUEhYX1JFRl9TUkMpICYmIGZvcm1FbC5jbGFzc0xpc3QuY29udGFpbnMoXCJwaHgtc3VibWl0LWxvYWRpbmdcIikpKXtcbiAgICAgIGxldCBtZXRhID0gdGhpcy5leHRyYWN0TWV0YShmb3JtRWwpXG4gICAgICBsZXQgZm9ybURhdGEgPSBzZXJpYWxpemVGb3JtKGZvcm1FbCwge3N1Ym1pdHRlciwgLi4ubWV0YX0pXG4gICAgICB0aGlzLnB1c2hXaXRoUmVwbHkocmVmR2VuZXJhdG9yLCBcImV2ZW50XCIsIHtcbiAgICAgICAgdHlwZTogXCJmb3JtXCIsXG4gICAgICAgIGV2ZW50OiBwaHhFdmVudCxcbiAgICAgICAgdmFsdWU6IGZvcm1EYXRhLFxuICAgICAgICBjaWQ6IGNpZFxuICAgICAgfSkudGhlbigoe3Jlc3B9KSA9PiBvblJlcGx5KHJlc3ApKVxuICAgIH1cbiAgfVxuXG4gIHVwbG9hZEZpbGVzKGZvcm1FbCwgcGh4RXZlbnQsIHRhcmdldEN0eCwgcmVmLCBjaWQsIG9uQ29tcGxldGUpe1xuICAgIGxldCBqb2luQ291bnRBdFVwbG9hZCA9IHRoaXMuam9pbkNvdW50XG4gICAgbGV0IGlucHV0RWxzID0gTGl2ZVVwbG9hZGVyLmFjdGl2ZUZpbGVJbnB1dHMoZm9ybUVsKVxuICAgIGxldCBudW1GaWxlSW5wdXRzSW5Qcm9ncmVzcyA9IGlucHV0RWxzLmxlbmd0aFxuXG4gICAgLy8gZ2V0IGVhY2ggZmlsZSBpbnB1dFxuICAgIGlucHV0RWxzLmZvckVhY2goaW5wdXRFbCA9PiB7XG4gICAgICBsZXQgdXBsb2FkZXIgPSBuZXcgTGl2ZVVwbG9hZGVyKGlucHV0RWwsIHRoaXMsICgpID0+IHtcbiAgICAgICAgbnVtRmlsZUlucHV0c0luUHJvZ3Jlc3MtLVxuICAgICAgICBpZihudW1GaWxlSW5wdXRzSW5Qcm9ncmVzcyA9PT0gMCl7IG9uQ29tcGxldGUoKSB9XG4gICAgICB9KVxuXG4gICAgICBsZXQgZW50cmllcyA9IHVwbG9hZGVyLmVudHJpZXMoKS5tYXAoZW50cnkgPT4gZW50cnkudG9QcmVmbGlnaHRQYXlsb2FkKCkpXG5cbiAgICAgIGlmKGVudHJpZXMubGVuZ3RoID09PSAwKXtcbiAgICAgICAgbnVtRmlsZUlucHV0c0luUHJvZ3Jlc3MtLVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIHJlZjogaW5wdXRFbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpLFxuICAgICAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgICAgICBjaWQ6IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoaW5wdXRFbC5mb3JtLCB0YXJnZXRDdHgpXG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtcInNlbmRpbmcgcHJlZmxpZ2h0IHJlcXVlc3RcIiwgcGF5bG9hZF0pXG5cbiAgICAgIHRoaXMucHVzaFdpdGhSZXBseShudWxsLCBcImFsbG93X3VwbG9hZFwiLCBwYXlsb2FkKS50aGVuKCh7cmVzcH0pID0+IHtcbiAgICAgICAgdGhpcy5sb2coXCJ1cGxvYWRcIiwgKCkgPT4gW1wiZ290IHByZWZsaWdodCByZXNwb25zZVwiLCByZXNwXSlcbiAgICAgICAgLy8gdGhlIHByZWZsaWdodCB3aWxsIHJlamVjdCBlbnRyaWVzIGJleW9uZCB0aGUgbWF4IGVudHJpZXNcbiAgICAgICAgLy8gc28gd2UgZXJyb3IgYW5kIGNhbmNlbCBlbnRyaWVzIG9uIHRoZSBjbGllbnQgdGhhdCBhcmUgbWlzc2luZyBmcm9tIHRoZSByZXNwb25zZVxuICAgICAgICB1cGxvYWRlci5lbnRyaWVzKCkuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgICAgaWYocmVzcC5lbnRyaWVzICYmICFyZXNwLmVudHJpZXNbZW50cnkucmVmXSl7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUZhaWxlZEVudHJ5UHJlZmxpZ2h0KGVudHJ5LnJlZiwgXCJmYWlsZWQgcHJlZmxpZ2h0XCIsIHVwbG9hZGVyKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLy8gZm9yIGF1dG8gdXBsb2Fkcywgd2UgbWF5IGhhdmUgYW4gZW1wdHkgZW50cmllcyByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgLy8gZm9yIGZvcm0gc3VibWl0cyB0aGF0IGNvbnRhaW4gaW52YWxpZCBlbnRyaWVzXG4gICAgICAgIGlmKHJlc3AuZXJyb3IgfHwgT2JqZWN0LmtleXMocmVzcC5lbnRyaWVzKS5sZW5ndGggPT09IDApe1xuICAgICAgICAgIHRoaXMudW5kb1JlZnMocmVmLCBwaHhFdmVudClcbiAgICAgICAgICBsZXQgZXJyb3JzID0gcmVzcC5lcnJvciB8fCBbXVxuICAgICAgICAgIGVycm9ycy5tYXAoKFtlbnRyeV9yZWYsIHJlYXNvbl0pID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRmFpbGVkRW50cnlQcmVmbGlnaHQoZW50cnlfcmVmLCByZWFzb24sIHVwbG9hZGVyKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IG9uRXJyb3IgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5vbkVycm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgaWYodGhpcy5qb2luQ291bnQgPT09IGpvaW5Db3VudEF0VXBsb2FkKXsgY2FsbGJhY2soKSB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGxvYWRlci5pbml0QWRhcHRlclVwbG9hZChyZXNwLCBvbkVycm9yLCB0aGlzLmxpdmVTb2NrZXQpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGhhbmRsZUZhaWxlZEVudHJ5UHJlZmxpZ2h0KHVwbG9hZFJlZiwgcmVhc29uLCB1cGxvYWRlcil7XG4gICAgaWYodXBsb2FkZXIuaXNBdXRvVXBsb2FkKCkpe1xuICAgICAgLy8gdXBsb2FkUmVmIG1heSBiZSB0b3AgbGV2ZWwgdXBsb2FkIGNvbmZpZyByZWYgb3IgZW50cnkgcmVmXG4gICAgICBsZXQgZW50cnkgPSB1cGxvYWRlci5lbnRyaWVzKCkuZmluZChlbnRyeSA9PiBlbnRyeS5yZWYgPT09IHVwbG9hZFJlZi50b1N0cmluZygpKVxuICAgICAgaWYoZW50cnkpeyBlbnRyeS5jYW5jZWwoKSB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwbG9hZGVyLmVudHJpZXMoKS5tYXAoZW50cnkgPT4gZW50cnkuY2FuY2VsKCkpXG4gICAgfVxuICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtgZXJyb3IgZm9yIGVudHJ5ICR7dXBsb2FkUmVmfWAsIHJlYXNvbl0pXG4gIH1cblxuICBkaXNwYXRjaFVwbG9hZHModGFyZ2V0Q3R4LCBuYW1lLCBmaWxlc09yQmxvYnMpe1xuICAgIGxldCB0YXJnZXRFbGVtZW50ID0gdGhpcy50YXJnZXRDdHhFbGVtZW50KHRhcmdldEN0eCkgfHwgdGhpcy5lbFxuICAgIGxldCBpbnB1dHMgPSBET00uZmluZFVwbG9hZElucHV0cyh0YXJnZXRFbGVtZW50KS5maWx0ZXIoZWwgPT4gZWwubmFtZSA9PT0gbmFtZSlcbiAgICBpZihpbnB1dHMubGVuZ3RoID09PSAwKXsgbG9nRXJyb3IoYG5vIGxpdmUgZmlsZSBpbnB1dHMgZm91bmQgbWF0Y2hpbmcgdGhlIG5hbWUgXCIke25hbWV9XCJgKSB9XG4gICAgZWxzZSBpZihpbnB1dHMubGVuZ3RoID4gMSl7IGxvZ0Vycm9yKGBkdXBsaWNhdGUgbGl2ZSBmaWxlIGlucHV0cyBmb3VuZCBtYXRjaGluZyB0aGUgbmFtZSBcIiR7bmFtZX1cImApIH1cbiAgICBlbHNlIHsgRE9NLmRpc3BhdGNoRXZlbnQoaW5wdXRzWzBdLCBQSFhfVFJBQ0tfVVBMT0FEUywge2RldGFpbDoge2ZpbGVzOiBmaWxlc09yQmxvYnN9fSkgfVxuICB9XG5cbiAgdGFyZ2V0Q3R4RWxlbWVudCh0YXJnZXRDdHgpe1xuICAgIGlmKGlzQ2lkKHRhcmdldEN0eCkpe1xuICAgICAgbGV0IFt0YXJnZXRdID0gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmVsLCB0YXJnZXRDdHgpXG4gICAgICByZXR1cm4gdGFyZ2V0XG4gICAgfSBlbHNlIGlmKHRhcmdldEN0eCl7XG4gICAgICByZXR1cm4gdGFyZ2V0Q3R4XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgcHVzaEZvcm1SZWNvdmVyeShvbGRGb3JtLCBuZXdGb3JtLCB0ZW1wbGF0ZURvbSwgY2FsbGJhY2spe1xuICAgIC8vIHdlIGFyZSBvbmx5IHJlY292ZXJpbmcgZm9ybXMgaW5zaWRlIHRoZSBjdXJyZW50IHZpZXcsIHRoZXJlZm9yZSBpdCBpcyBzYWZlIHRvXG4gICAgLy8gc2tpcCB3aXRoaW5Pd25lcnMgaGVyZSBhbmQgYWx3YXlzIHVzZSB0aGlzIHdoZW4gcmVmZXJyaW5nIHRvIHRoZSB2aWV3XG4gICAgY29uc3QgcGh4Q2hhbmdlID0gdGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpXG4gICAgY29uc3QgcGh4VGFyZ2V0ID0gbmV3Rm9ybS5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwidGFyZ2V0XCIpKSB8fCBuZXdGb3JtXG4gICAgY29uc3QgcGh4RXZlbnQgPSBuZXdGb3JtLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0FVVE9fUkVDT1ZFUikpIHx8IG5ld0Zvcm0uZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcImNoYW5nZVwiKSlcbiAgICBjb25zdCBpbnB1dHMgPSBBcnJheS5mcm9tKG9sZEZvcm0uZWxlbWVudHMpLmZpbHRlcihlbCA9PiBET00uaXNGb3JtSW5wdXQoZWwpICYmIGVsLm5hbWUgJiYgIWVsLmhhc0F0dHJpYnV0ZShwaHhDaGFuZ2UpKVxuICAgIGlmKGlucHV0cy5sZW5ndGggPT09IDApeyByZXR1cm4gfVxuXG4gICAgLy8gd2UgbXVzdCBjbGVhciB0cmFja2VkIHVwbG9hZHMgYmVmb3JlIHJlY292ZXJ5IGFzIHRoZXkgbm8gbG9uZ2VyIGhhdmUgdmFsaWQgcmVmc1xuICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IGlucHV0Lmhhc0F0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRikgJiYgTGl2ZVVwbG9hZGVyLmNsZWFyRmlsZXMoaW5wdXQpKVxuICAgIC8vIHB1c2hJbnB1dCBhc3N1bWVzIHRoYXQgdGhlcmUgaXMgYSBzb3VyY2UgZWxlbWVudCB0aGF0IGluaXRpYXRlZCB0aGUgY2hhbmdlO1xuICAgIC8vIGJlY2F1c2UgdGhpcyBpcyBub3QgdGhlIGNhc2Ugd2hlbiB3ZSByZWNvdmVyIGZvcm1zLCB3ZSBwcm92aWRlIHRoZSBmaXJzdCBpbnB1dCB3ZSBmaW5kXG4gICAgbGV0IGlucHV0ID0gaW5wdXRzLmZpbmQoZWwgPT4gZWwudHlwZSAhPT0gXCJoaWRkZW5cIikgfHwgaW5wdXRzWzBdXG5cbiAgICAvLyBpbiB0aGUgY2FzZSB0aGF0IHRoZXJlIGFyZSBtdWx0aXBsZSB0YXJnZXRzLCB3ZSBjb3VudCB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgcmVjb3ZlcnkgZXZlbnRzXG4gICAgLy8gYW5kIG9ubHkgY2FsbCB0aGUgY2FsbGJhY2sgb25jZSBhbGwgZXZlbnRzIGhhdmUgYmVlbiBwcm9jZXNzZWRcbiAgICBsZXQgcGVuZGluZyA9IDBcbiAgICAvLyB3aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgY2FsbGJhY2ssIGRvbSwgdmlld0VsKVxuICAgIHRoaXMud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsICh0YXJnZXRWaWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIGNvbnN0IGNpZCA9IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQobmV3Rm9ybSwgdGFyZ2V0Q3R4KVxuICAgICAgcGVuZGluZysrXG4gICAgICB0YXJnZXRWaWV3LnB1c2hJbnB1dChpbnB1dCwgdGFyZ2V0Q3R4LCBjaWQsIHBoeEV2ZW50LCB7X3RhcmdldDogaW5wdXQubmFtZX0sICgpID0+IHtcbiAgICAgICAgcGVuZGluZy0tXG4gICAgICAgIGlmKHBlbmRpbmcgPT09IDApeyBjYWxsYmFjaygpIH1cbiAgICAgIH0pXG4gICAgfSwgdGVtcGxhdGVEb20sIHRlbXBsYXRlRG9tKVxuICB9XG5cbiAgcHVzaExpbmtQYXRjaChlLCBocmVmLCB0YXJnZXRFbCwgY2FsbGJhY2spe1xuICAgIGxldCBsaW5rUmVmID0gdGhpcy5saXZlU29ja2V0LnNldFBlbmRpbmdMaW5rKGhyZWYpXG4gICAgLy8gb25seSBhZGQgbG9hZGluZyBzdGF0ZXMgaWYgZXZlbnQgaXMgdHJ1c3RlZCAoaXQgd2FzIHRyaWdnZXJlZCBieSB1c2VyLCBzdWNoIGFzIGNsaWNrKSBhbmRcbiAgICAvLyBpdCdzIG5vdCBhIGZvcndhcmQvYmFjayBuYXZpZ2F0aW9uIGZyb20gcG9wc3RhdGVcbiAgICBsZXQgbG9hZGluZyA9IGUuaXNUcnVzdGVkICYmIGUudHlwZSAhPT0gXCJwb3BzdGF0ZVwiXG4gICAgbGV0IHJlZkdlbiA9IHRhcmdldEVsID8gKCkgPT4gdGhpcy5wdXRSZWYoW3tlbDogdGFyZ2V0RWwsIGxvYWRpbmc6IGxvYWRpbmcsIGxvY2s6IHRydWV9XSwgbnVsbCwgXCJjbGlja1wiKSA6IG51bGxcbiAgICBsZXQgZmFsbGJhY2sgPSAoKSA9PiB0aGlzLmxpdmVTb2NrZXQucmVkaXJlY3Qod2luZG93LmxvY2F0aW9uLmhyZWYpXG4gICAgbGV0IHVybCA9IGhyZWYuc3RhcnRzV2l0aChcIi9cIikgPyBgJHtsb2NhdGlvbi5wcm90b2NvbH0vLyR7bG9jYXRpb24uaG9zdH0ke2hyZWZ9YCA6IGhyZWZcblxuICAgIHRoaXMucHVzaFdpdGhSZXBseShyZWZHZW4sIFwibGl2ZV9wYXRjaFwiLCB7dXJsfSkudGhlbihcbiAgICAgICh7cmVzcH0pID0+IHtcbiAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgIGlmKHJlc3AubGlua19yZWRpcmVjdCl7XG4gICAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVwbGFjZU1haW4oaHJlZiwgbnVsbCwgY2FsbGJhY2ssIGxpbmtSZWYpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKHRoaXMubGl2ZVNvY2tldC5jb21taXRQZW5kaW5nTGluayhsaW5rUmVmKSl7XG4gICAgICAgICAgICAgIHRoaXMuaHJlZiA9IGhyZWZcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXBwbHlQZW5kaW5nVXBkYXRlcygpXG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhsaW5rUmVmKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICAoe2Vycm9yOiBfZXJyb3IsIHRpbWVvdXQ6IF90aW1lb3V0fSkgPT4gZmFsbGJhY2soKVxuICAgIClcbiAgfVxuXG4gIGdldEZvcm1zRm9yUmVjb3ZlcnkoKXtcbiAgICBpZih0aGlzLmpvaW5Db3VudCA9PT0gMCl7IHJldHVybiB7fSB9XG5cbiAgICBsZXQgcGh4Q2hhbmdlID0gdGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpXG5cbiAgICByZXR1cm4gRE9NLmFsbCh0aGlzLmVsLCBgZm9ybVske3BoeENoYW5nZX1dYClcbiAgICAgIC5maWx0ZXIoZm9ybSA9PiBmb3JtLmlkKVxuICAgICAgLmZpbHRlcihmb3JtID0+IGZvcm0uZWxlbWVudHMubGVuZ3RoID4gMClcbiAgICAgIC5maWx0ZXIoZm9ybSA9PiBmb3JtLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0FVVE9fUkVDT1ZFUikpICE9PSBcImlnbm9yZVwiKVxuICAgICAgLm1hcChmb3JtID0+IGZvcm0uY2xvbmVOb2RlKHRydWUpKVxuICAgICAgLnJlZHVjZSgoYWNjLCBmb3JtKSA9PiB7XG4gICAgICAgIGFjY1tmb3JtLmlkXSA9IGZvcm1cbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwge30pXG4gIH1cblxuICBtYXliZVB1c2hDb21wb25lbnRzRGVzdHJveWVkKGRlc3Ryb3llZENJRHMpe1xuICAgIGxldCB3aWxsRGVzdHJveUNJRHMgPSBkZXN0cm95ZWRDSURzLmZpbHRlcihjaWQgPT4ge1xuICAgICAgcmV0dXJuIERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgY2lkKS5sZW5ndGggPT09IDBcbiAgICB9KVxuXG4gICAgaWYod2lsbERlc3Ryb3lDSURzLmxlbmd0aCA+IDApe1xuICAgICAgLy8gd2UgbXVzdCByZXNldCB0aGUgcmVuZGVyIGNoYW5nZSB0cmFja2luZyBmb3IgY2lkcyB0aGF0XG4gICAgICAvLyBjb3VsZCBiZSBhZGRlZCBiYWNrIGZyb20gdGhlIHNlcnZlciBzbyB3ZSBkb24ndCBza2lwIHRoZW1cbiAgICAgIHdpbGxEZXN0cm95Q0lEcy5mb3JFYWNoKGNpZCA9PiB0aGlzLnJlbmRlcmVkLnJlc2V0UmVuZGVyKGNpZCkpXG5cbiAgICAgIHRoaXMucHVzaFdpdGhSZXBseShudWxsLCBcImNpZHNfd2lsbF9kZXN0cm95XCIsIHtjaWRzOiB3aWxsRGVzdHJveUNJRHN9KS50aGVuKCgpID0+IHtcbiAgICAgICAgLy8gd2UgbXVzdCB3YWl0IGZvciBwZW5kaW5nIHRyYW5zaXRpb25zIHRvIGNvbXBsZXRlIGJlZm9yZSBkZXRlcm1pbmluZ1xuICAgICAgICAvLyBpZiB0aGUgY2lkcyB3ZXJlIGFkZGVkIGJhY2sgdG8gdGhlIERPTSBpbiB0aGUgbWVhbnRpbWUgKCMzMTM5KVxuICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgLy8gU2VlIGlmIGFueSBvZiB0aGUgY2lkcyB3ZSB3YW50ZWQgdG8gZGVzdHJveSB3ZXJlIGFkZGVkIGJhY2ssXG4gICAgICAgICAgLy8gaWYgdGhleSB3ZXJlIGFkZGVkIGJhY2ssIHdlIGRvbid0IGFjdHVhbGx5IGRlc3Ryb3kgdGhlbS5cbiAgICAgICAgICBsZXQgY29tcGxldGVseURlc3Ryb3lDSURzID0gd2lsbERlc3Ryb3lDSURzLmZpbHRlcihjaWQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgY2lkKS5sZW5ndGggPT09IDBcbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgaWYoY29tcGxldGVseURlc3Ryb3lDSURzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KG51bGwsIFwiY2lkc19kZXN0cm95ZWRcIiwge2NpZHM6IGNvbXBsZXRlbHlEZXN0cm95Q0lEc30pLnRoZW4oKHtyZXNwfSkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkLnBydW5lQ0lEcyhyZXNwLmNpZHMpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgb3duc0VsZW1lbnQoZWwpe1xuICAgIGxldCBwYXJlbnRWaWV3RWwgPSBlbC5jbG9zZXN0KFBIWF9WSUVXX1NFTEVDVE9SKVxuICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1BBUkVOVF9JRCkgPT09IHRoaXMuaWQgfHxcbiAgICAgIChwYXJlbnRWaWV3RWwgJiYgcGFyZW50Vmlld0VsLmlkID09PSB0aGlzLmlkKSB8fFxuICAgICAgKCFwYXJlbnRWaWV3RWwgJiYgdGhpcy5pc0RlYWQpXG4gIH1cblxuICBzdWJtaXRGb3JtKGZvcm0sIHRhcmdldEN0eCwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgb3B0cyA9IHt9KXtcbiAgICBET00ucHV0UHJpdmF0ZShmb3JtLCBQSFhfSEFTX1NVQk1JVFRFRCwgdHJ1ZSlcbiAgICBjb25zdCBpbnB1dHMgPSBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpXG4gICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4gRE9NLnB1dFByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVELCB0cnVlKSlcbiAgICB0aGlzLmxpdmVTb2NrZXQuYmx1ckFjdGl2ZUVsZW1lbnQodGhpcylcbiAgICB0aGlzLnB1c2hGb3JtU3VibWl0KGZvcm0sIHRhcmdldEN0eCwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgb3B0cywgKCkgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnJlc3RvcmVQcmV2aW91c2x5QWN0aXZlRm9jdXMoKVxuICAgIH0pXG4gIH1cblxuICBiaW5kaW5nKGtpbmQpeyByZXR1cm4gdGhpcy5saXZlU29ja2V0LmJpbmRpbmcoa2luZCkgfVxufVxuIiwgIi8qKiBJbml0aWFsaXplcyB0aGUgTGl2ZVNvY2tldFxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5kUG9pbnQgLSBUaGUgc3RyaW5nIFdlYlNvY2tldCBlbmRwb2ludCwgaWUsIGBcIndzczovL2V4YW1wbGUuY29tL2xpdmVcImAsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwiL2xpdmVcImAgKGluaGVyaXRlZCBob3N0ICYgcHJvdG9jb2wpXG4gKiBAcGFyYW0ge1Bob2VuaXguU29ja2V0fSBzb2NrZXQgLSB0aGUgcmVxdWlyZWQgUGhvZW5peCBTb2NrZXQgY2xhc3MgaW1wb3J0ZWQgZnJvbSBcInBob2VuaXhcIi4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIGltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXG4gKiAgICAgaW1wb3J0IHtMaXZlU29ja2V0fSBmcm9tIFwicGhvZW5peF9saXZlX3ZpZXdcIlxuICogICAgIGxldCBsaXZlU29ja2V0ID0gbmV3IExpdmVTb2NrZXQoXCIvbGl2ZVwiLCBTb2NrZXQsIHsuLi59KVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c10gLSBPcHRpb25hbCBjb25maWd1cmF0aW9uLiBPdXRzaWRlIG9mIGtleXMgbGlzdGVkIGJlbG93LCBhbGxcbiAqIGNvbmZpZ3VyYXRpb24gaXMgcGFzc2VkIGRpcmVjdGx5IHRvIHRoZSBQaG9lbml4IFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5kZWZhdWx0c10gLSBUaGUgb3B0aW9uYWwgZGVmYXVsdHMgdG8gdXNlIGZvciB2YXJpb3VzIGJpbmRpbmdzLFxuICogc3VjaCBhcyBgcGh4LWRlYm91bmNlYC4gU3VwcG9ydHMgdGhlIGZvbGxvd2luZyBrZXlzOlxuICpcbiAqICAgLSBkZWJvdW5jZSAtIHRoZSBtaWxsaXNlY29uZCBwaHgtZGVib3VuY2UgdGltZS4gRGVmYXVsdHMgMzAwXG4gKiAgIC0gdGhyb3R0bGUgLSB0aGUgbWlsbGlzZWNvbmQgcGh4LXRocm90dGxlIHRpbWUuIERlZmF1bHRzIDMwMFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnBhcmFtc10gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gZm9yIHBhc3NpbmcgY29ubmVjdCBwYXJhbXMuXG4gKiBUaGUgZnVuY3Rpb24gcmVjZWl2ZXMgdGhlIGVsZW1lbnQgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gTGl2ZVZpZXcuIEZvciBleGFtcGxlOlxuICpcbiAqICAgICAoZWwpID0+IHt2aWV3OiBlbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW15LXZpZXctbmFtZVwiLCB0b2tlbjogd2luZG93Lm15VG9rZW59XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmJpbmRpbmdQcmVmaXhdIC0gVGhlIG9wdGlvbmFsIHByZWZpeCB0byB1c2UgZm9yIGFsbCBwaHggRE9NIGFubm90YXRpb25zLlxuICogRGVmYXVsdHMgdG8gXCJwaHgtXCIuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMuaG9va3NdIC0gVGhlIG9wdGlvbmFsIG9iamVjdCBmb3IgcmVmZXJlbmNpbmcgTGl2ZVZpZXcgaG9vayBjYWxsYmFja3MuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMudXBsb2FkZXJzXSAtIFRoZSBvcHRpb25hbCBvYmplY3QgZm9yIHJlZmVyZW5jaW5nIExpdmVWaWV3IHVwbG9hZGVyIGNhbGxiYWNrcy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMubG9hZGVyVGltZW91dF0gLSBUaGUgb3B0aW9uYWwgZGVsYXkgaW4gbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGFwcGx5XG4gKiBsb2FkaW5nIHN0YXRlcy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMubWF4UmVsb2Fkc10gLSBUaGUgbWF4aW11bSByZWxvYWRzIGJlZm9yZSBlbnRlcmluZyBmYWlsc2FmZSBtb2RlLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5yZWxvYWRKaXR0ZXJNaW5dIC0gVGhlIG1pbmltdW0gdGltZSBiZXR3ZWVuIG5vcm1hbCByZWxvYWQgYXR0ZW1wdHMuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLnJlbG9hZEppdHRlck1heF0gLSBUaGUgbWF4aW11bSB0aW1lIGJldHdlZW4gbm9ybWFsIHJlbG9hZCBhdHRlbXB0cy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMuZmFpbHNhZmVKaXR0ZXJdIC0gVGhlIHRpbWUgYmV0d2VlbiByZWxvYWQgYXR0ZW1wdHMgaW4gZmFpbHNhZmUgbW9kZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnZpZXdMb2dnZXJdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIGxvZyBkZWJ1ZyBpbmZvcm1hdGlvbi4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgICh2aWV3LCBraW5kLCBtc2csIG9iaikgPT4gY29uc29sZS5sb2coYCR7dmlldy5pZH0gJHtraW5kfTogJHttc2d9IC0gYCwgb2JqKVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5tZXRhZGF0YV0gLSBUaGUgb3B0aW9uYWwgb2JqZWN0IG1hcHBpbmcgZXZlbnQgbmFtZXMgdG8gZnVuY3Rpb25zIGZvclxuICogcG9wdWxhdGluZyBldmVudCBtZXRhZGF0YS4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIG1ldGFkYXRhOiB7XG4gKiAgICAgICBjbGljazogKGUsIGVsKSA9PiB7XG4gKiAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgY3RybEtleTogZS5jdHJsS2V5LFxuICogICAgICAgICAgIG1ldGFLZXk6IGUubWV0YUtleSxcbiAqICAgICAgICAgICBkZXRhaWw6IGUuZGV0YWlsIHx8IDEsXG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICBrZXlkb3duOiAoZSwgZWwpID0+IHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICBrZXk6IGUua2V5LFxuICogICAgICAgICAgIGN0cmxLZXk6IGUuY3RybEtleSxcbiAqICAgICAgICAgICBtZXRhS2V5OiBlLm1ldGFLZXksXG4gKiAgICAgICAgICAgc2hpZnRLZXk6IGUuc2hpZnRLZXlcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIH1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5zZXNzaW9uU3RvcmFnZV0gLSBBbiBvcHRpb25hbCBTdG9yYWdlIGNvbXBhdGlibGUgb2JqZWN0XG4gKiBVc2VmdWwgd2hlbiBMaXZlVmlldyB3b24ndCBoYXZlIGFjY2VzcyB0byBgc2Vzc2lvblN0b3JhZ2VgLiAgRm9yIGV4YW1wbGUsIFRoaXMgY291bGRcbiAqIGhhcHBlbiBpZiBhIHNpdGUgbG9hZHMgYSBjcm9zcy1kb21haW4gTGl2ZVZpZXcgaW4gYW4gaWZyYW1lLiAgRXhhbXBsZSB1c2FnZTpcbiAqXG4gKiAgICAgY2xhc3MgSW5NZW1vcnlTdG9yYWdlIHtcbiAqICAgICAgIGNvbnN0cnVjdG9yKCkgeyB0aGlzLnN0b3JhZ2UgPSB7fSB9XG4gKiAgICAgICBnZXRJdGVtKGtleU5hbWUpIHsgcmV0dXJuIHRoaXMuc3RvcmFnZVtrZXlOYW1lXSB8fCBudWxsIH1cbiAqICAgICAgIHJlbW92ZUl0ZW0oa2V5TmFtZSkgeyBkZWxldGUgdGhpcy5zdG9yYWdlW2tleU5hbWVdIH1cbiAqICAgICAgIHNldEl0ZW0oa2V5TmFtZSwga2V5VmFsdWUpIHsgdGhpcy5zdG9yYWdlW2tleU5hbWVdID0ga2V5VmFsdWUgfVxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMubG9jYWxTdG9yYWdlXSAtIEFuIG9wdGlvbmFsIFN0b3JhZ2UgY29tcGF0aWJsZSBvYmplY3RcbiAqIFVzZWZ1bCBmb3Igd2hlbiBMaXZlVmlldyB3b24ndCBoYXZlIGFjY2VzcyB0byBgbG9jYWxTdG9yYWdlYC5cbiAqIFNlZSBgb3B0cy5zZXNzaW9uU3RvcmFnZWAgZm9yIGV4YW1wbGVzLlxuKi9cblxuaW1wb3J0IHtcbiAgQklORElOR19QUkVGSVgsXG4gIENPTlNFQ1VUSVZFX1JFTE9BRFMsXG4gIERFRkFVTFRTLFxuICBGQUlMU0FGRV9KSVRURVIsXG4gIExPQURFUl9USU1FT1VULFxuICBNQVhfUkVMT0FEUyxcbiAgUEhYX0RFQk9VTkNFLFxuICBQSFhfRFJPUF9UQVJHRVQsXG4gIFBIWF9IQVNfRk9DVVNFRCxcbiAgUEhYX0tFWSxcbiAgUEhYX0xJTktfU1RBVEUsXG4gIFBIWF9MSVZFX0xJTkssXG4gIFBIWF9MVl9ERUJVRyxcbiAgUEhYX0xWX0xBVEVOQ1lfU0lNLFxuICBQSFhfTFZfUFJPRklMRSxcbiAgUEhYX0xWX0hJU1RPUllfUE9TSVRJT04sXG4gIFBIWF9NQUlOLFxuICBQSFhfUEFSRU5UX0lELFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX1JPT1RfSUQsXG4gIFBIWF9USFJPVFRMRSxcbiAgUEhYX1RSQUNLX1VQTE9BRFMsXG4gIFBIWF9TRVNTSU9OLFxuICBSRUxPQURfSklUVEVSX01JTixcbiAgUkVMT0FEX0pJVFRFUl9NQVgsXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfUkVMT0FEX1NUQVRVU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBjbG9uZSxcbiAgY2xvc2VzdFBoeEJpbmRpbmcsXG4gIGNsb3N1cmUsXG4gIGRlYnVnLFxuICBtYXliZVxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBCcm93c2VyIGZyb20gXCIuL2Jyb3dzZXJcIlxuaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuaW1wb3J0IEhvb2tzIGZyb20gXCIuL2hvb2tzXCJcbmltcG9ydCBMaXZlVXBsb2FkZXIgZnJvbSBcIi4vbGl2ZV91cGxvYWRlclwiXG5pbXBvcnQgVmlldyBmcm9tIFwiLi92aWV3XCJcbmltcG9ydCBKUyBmcm9tIFwiLi9qc1wiXG5cbmV4cG9ydCBsZXQgaXNVc2VkSW5wdXQgPSAoZWwpID0+IERPTS5pc1VzZWRJbnB1dChlbClcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGl2ZVNvY2tldCB7XG4gIGNvbnN0cnVjdG9yKHVybCwgcGh4U29ja2V0LCBvcHRzID0ge30pe1xuICAgIHRoaXMudW5sb2FkZWQgPSBmYWxzZVxuICAgIGlmKCFwaHhTb2NrZXQgfHwgcGh4U29ja2V0LmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiT2JqZWN0XCIpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcbiAgICAgIGEgcGhvZW5peCBTb2NrZXQgbXVzdCBiZSBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIHRoZSBMaXZlU29ja2V0IGNvbnN0cnVjdG9yLiBGb3IgZXhhbXBsZTpcblxuICAgICAgICAgIGltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXG4gICAgICAgICAgaW1wb3J0IHtMaXZlU29ja2V0fSBmcm9tIFwicGhvZW5peF9saXZlX3ZpZXdcIlxuICAgICAgICAgIGxldCBsaXZlU29ja2V0ID0gbmV3IExpdmVTb2NrZXQoXCIvbGl2ZVwiLCBTb2NrZXQsIHsuLi59KVxuICAgICAgYClcbiAgICB9XG4gICAgdGhpcy5zb2NrZXQgPSBuZXcgcGh4U29ja2V0KHVybCwgb3B0cylcbiAgICB0aGlzLmJpbmRpbmdQcmVmaXggPSBvcHRzLmJpbmRpbmdQcmVmaXggfHwgQklORElOR19QUkVGSVhcbiAgICB0aGlzLm9wdHMgPSBvcHRzXG4gICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKG9wdHMucGFyYW1zIHx8IHt9KVxuICAgIHRoaXMudmlld0xvZ2dlciA9IG9wdHMudmlld0xvZ2dlclxuICAgIHRoaXMubWV0YWRhdGFDYWxsYmFja3MgPSBvcHRzLm1ldGFkYXRhIHx8IHt9XG4gICAgdGhpcy5kZWZhdWx0cyA9IE9iamVjdC5hc3NpZ24oY2xvbmUoREVGQVVMVFMpLCBvcHRzLmRlZmF1bHRzIHx8IHt9KVxuICAgIHRoaXMuYWN0aXZlRWxlbWVudCA9IG51bGxcbiAgICB0aGlzLnByZXZBY3RpdmUgPSBudWxsXG4gICAgdGhpcy5zaWxlbmNlZCA9IGZhbHNlXG4gICAgdGhpcy5tYWluID0gbnVsbFxuICAgIHRoaXMub3V0Z29pbmdNYWluRWwgPSBudWxsXG4gICAgdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCA9IG51bGxcbiAgICB0aGlzLmxpbmtSZWYgPSAxXG4gICAgdGhpcy5yb290cyA9IHt9XG4gICAgdGhpcy5ocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWZcbiAgICB0aGlzLnBlbmRpbmdMaW5rID0gbnVsbFxuICAgIHRoaXMuY3VycmVudExvY2F0aW9uID0gY2xvbmUod2luZG93LmxvY2F0aW9uKVxuICAgIHRoaXMuaG9va3MgPSBvcHRzLmhvb2tzIHx8IHt9XG4gICAgdGhpcy51cGxvYWRlcnMgPSBvcHRzLnVwbG9hZGVycyB8fCB7fVxuICAgIHRoaXMubG9hZGVyVGltZW91dCA9IG9wdHMubG9hZGVyVGltZW91dCB8fCBMT0FERVJfVElNRU9VVFxuICAgIHRoaXMucmVsb2FkV2l0aEppdHRlclRpbWVyID0gbnVsbFxuICAgIHRoaXMubWF4UmVsb2FkcyA9IG9wdHMubWF4UmVsb2FkcyB8fCBNQVhfUkVMT0FEU1xuICAgIHRoaXMucmVsb2FkSml0dGVyTWluID0gb3B0cy5yZWxvYWRKaXR0ZXJNaW4gfHwgUkVMT0FEX0pJVFRFUl9NSU5cbiAgICB0aGlzLnJlbG9hZEppdHRlck1heCA9IG9wdHMucmVsb2FkSml0dGVyTWF4IHx8IFJFTE9BRF9KSVRURVJfTUFYXG4gICAgdGhpcy5mYWlsc2FmZUppdHRlciA9IG9wdHMuZmFpbHNhZmVKaXR0ZXIgfHwgRkFJTFNBRkVfSklUVEVSXG4gICAgdGhpcy5sb2NhbFN0b3JhZ2UgPSBvcHRzLmxvY2FsU3RvcmFnZSB8fCB3aW5kb3cubG9jYWxTdG9yYWdlXG4gICAgdGhpcy5zZXNzaW9uU3RvcmFnZSA9IG9wdHMuc2Vzc2lvblN0b3JhZ2UgfHwgd2luZG93LnNlc3Npb25TdG9yYWdlXG4gICAgdGhpcy5ib3VuZFRvcExldmVsRXZlbnRzID0gZmFsc2VcbiAgICB0aGlzLmJvdW5kRXZlbnROYW1lcyA9IG5ldyBTZXQoKVxuICAgIHRoaXMuc2VydmVyQ2xvc2VSZWYgPSBudWxsXG4gICAgdGhpcy5kb21DYWxsYmFja3MgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGpzUXVlcnlTZWxlY3RvckFsbDogbnVsbCxcbiAgICAgIG9uUGF0Y2hTdGFydDogY2xvc3VyZSgpLFxuICAgICAgb25QYXRjaEVuZDogY2xvc3VyZSgpLFxuICAgICAgb25Ob2RlQWRkZWQ6IGNsb3N1cmUoKSxcbiAgICAgIG9uQmVmb3JlRWxVcGRhdGVkOiBjbG9zdXJlKCl9LFxuICAgIG9wdHMuZG9tIHx8IHt9KVxuICAgIHRoaXMudHJhbnNpdGlvbnMgPSBuZXcgVHJhbnNpdGlvblNldCgpXG4gICAgdGhpcy5jdXJyZW50SGlzdG9yeVBvc2l0aW9uID0gcGFyc2VJbnQodGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9ISVNUT1JZX1BPU0lUSU9OKSkgfHwgMFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgX2UgPT4ge1xuICAgICAgdGhpcy51bmxvYWRlZCA9IHRydWVcbiAgICB9KVxuICAgIHRoaXMuc29ja2V0Lm9uT3BlbigoKSA9PiB7XG4gICAgICBpZih0aGlzLmlzVW5sb2FkZWQoKSl7XG4gICAgICAgIC8vIHJlbG9hZCBwYWdlIGlmIGJlaW5nIHJlc3RvcmVkIGZyb20gYmFjay9mb3J3YXJkIGNhY2hlIGFuZCBicm93c2VyIGRvZXMgbm90IGVtaXQgXCJwYWdlc2hvd1wiXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBwdWJsaWNcblxuICB2ZXJzaW9uKCl7IHJldHVybiBMVl9WU04gfVxuXG4gIGlzUHJvZmlsZUVuYWJsZWQoKXsgcmV0dXJuIHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfUFJPRklMRSkgPT09IFwidHJ1ZVwiIH1cblxuICBpc0RlYnVnRW5hYmxlZCgpeyByZXR1cm4gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9ERUJVRykgPT09IFwidHJ1ZVwiIH1cblxuICBpc0RlYnVnRGlzYWJsZWQoKXsgcmV0dXJuIHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfREVCVUcpID09PSBcImZhbHNlXCIgfVxuXG4gIGVuYWJsZURlYnVnKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfREVCVUcsIFwidHJ1ZVwiKSB9XG5cbiAgZW5hYmxlUHJvZmlsaW5nKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfUFJPRklMRSwgXCJ0cnVlXCIpIH1cblxuICBkaXNhYmxlRGVidWcoKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9ERUJVRywgXCJmYWxzZVwiKSB9XG5cbiAgZGlzYWJsZVByb2ZpbGluZygpeyB0aGlzLnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oUEhYX0xWX1BST0ZJTEUpIH1cblxuICBlbmFibGVMYXRlbmN5U2ltKHVwcGVyQm91bmRNcyl7XG4gICAgdGhpcy5lbmFibGVEZWJ1ZygpXG4gICAgY29uc29sZS5sb2coXCJsYXRlbmN5IHNpbXVsYXRvciBlbmFibGVkIGZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyBicm93c2VyIHNlc3Npb24uIENhbGwgZGlzYWJsZUxhdGVuY3lTaW0oKSB0byBkaXNhYmxlXCIpXG4gICAgdGhpcy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSwgdXBwZXJCb3VuZE1zKVxuICB9XG5cbiAgZGlzYWJsZUxhdGVuY3lTaW0oKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSkgfVxuXG4gIGdldExhdGVuY3lTaW0oKXtcbiAgICBsZXQgc3RyID0gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSlcbiAgICByZXR1cm4gc3RyID8gcGFyc2VJbnQoc3RyKSA6IG51bGxcbiAgfVxuXG4gIGdldFNvY2tldCgpeyByZXR1cm4gdGhpcy5zb2NrZXQgfVxuXG4gIGNvbm5lY3QoKXtcbiAgICAvLyBlbmFibGUgZGVidWcgYnkgZGVmYXVsdCBpZiBvbiBsb2NhbGhvc3QgYW5kIG5vdCBleHBsaWNpdGx5IGRpc2FibGVkXG4gICAgaWYod2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSBcImxvY2FsaG9zdFwiICYmICF0aGlzLmlzRGVidWdEaXNhYmxlZCgpKXsgdGhpcy5lbmFibGVEZWJ1ZygpIH1cbiAgICBsZXQgZG9Db25uZWN0ID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZXNldFJlbG9hZFN0YXR1cygpXG4gICAgICBpZih0aGlzLmpvaW5Sb290Vmlld3MoKSl7XG4gICAgICAgIHRoaXMuYmluZFRvcExldmVsRXZlbnRzKClcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCgpXG4gICAgICB9IGVsc2UgaWYodGhpcy5tYWluKXtcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJpbmRUb3BMZXZlbEV2ZW50cyh7ZGVhZDogdHJ1ZX0pXG4gICAgICB9XG4gICAgICB0aGlzLmpvaW5EZWFkVmlldygpXG4gICAgfVxuICAgIGlmKFtcImNvbXBsZXRlXCIsIFwibG9hZGVkXCIsIFwiaW50ZXJhY3RpdmVcIl0uaW5kZXhPZihkb2N1bWVudC5yZWFkeVN0YXRlKSA+PSAwKXtcbiAgICAgIGRvQ29ubmVjdCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IGRvQ29ubmVjdCgpKVxuICAgIH1cbiAgfVxuXG4gIGRpc2Nvbm5lY3QoY2FsbGJhY2spe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICAvLyByZW1vdmUgdGhlIHNvY2tldCBjbG9zZSBsaXN0ZW5lciB0byBhdm9pZCB0cnlpbmcgdG8gaGFuZGxlXG4gICAgLy8gYSBzZXJ2ZXIgY2xvc2UgZXZlbnQgd2hlbiBpdCBpcyBhY3R1YWxseSBjYXVzZWQgYnkgdXMgZGlzY29ubmVjdGluZ1xuICAgIGlmKHRoaXMuc2VydmVyQ2xvc2VSZWYpe1xuICAgICAgdGhpcy5zb2NrZXQub2ZmKHRoaXMuc2VydmVyQ2xvc2VSZWYpXG4gICAgICB0aGlzLnNlcnZlckNsb3NlUmVmID0gbnVsbFxuICAgIH1cbiAgICB0aGlzLnNvY2tldC5kaXNjb25uZWN0KGNhbGxiYWNrKVxuICB9XG5cbiAgcmVwbGFjZVRyYW5zcG9ydCh0cmFuc3BvcnQpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICB0aGlzLnNvY2tldC5yZXBsYWNlVHJhbnNwb3J0KHRyYW5zcG9ydClcbiAgICB0aGlzLmNvbm5lY3QoKVxuICB9XG5cbiAgZXhlY0pTKGVsLCBlbmNvZGVkSlMsIGV2ZW50VHlwZSA9IG51bGwpe1xuICAgIGxldCBlID0gbmV3IEN1c3RvbUV2ZW50KFwicGh4OmV4ZWNcIiwge2RldGFpbDoge3NvdXJjZUVsZW1lbnQ6IGVsfX0pXG4gICAgdGhpcy5vd25lcihlbCwgdmlldyA9PiBKUy5leGVjKGUsIGV2ZW50VHlwZSwgZW5jb2RlZEpTLCB2aWV3LCBlbCkpXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgZXhlY0pTSG9va1B1c2goZWwsIHBoeEV2ZW50LCBkYXRhLCBjYWxsYmFjayl7XG4gICAgdGhpcy53aXRoaW5Pd25lcnMoZWwsIHZpZXcgPT4ge1xuICAgICAgbGV0IGUgPSBuZXcgQ3VzdG9tRXZlbnQoXCJwaHg6ZXhlY1wiLCB7ZGV0YWlsOiB7c291cmNlRWxlbWVudDogZWx9fSlcbiAgICAgIEpTLmV4ZWMoZSwgXCJob29rXCIsIHBoeEV2ZW50LCB2aWV3LCBlbCwgW1wicHVzaFwiLCB7ZGF0YSwgY2FsbGJhY2t9XSlcbiAgICB9KVxuICB9XG5cbiAgdW5sb2FkKCl7XG4gICAgaWYodGhpcy51bmxvYWRlZCl7IHJldHVybiB9XG4gICAgaWYodGhpcy5tYWluICYmIHRoaXMuaXNDb25uZWN0ZWQoKSl7IHRoaXMubG9nKHRoaXMubWFpbiwgXCJzb2NrZXRcIiwgKCkgPT4gW1wiZGlzY29ubmVjdCBmb3IgcGFnZSBuYXZcIl0pIH1cbiAgICB0aGlzLnVubG9hZGVkID0gdHJ1ZVxuICAgIHRoaXMuZGVzdHJveUFsbFZpZXdzKClcbiAgICB0aGlzLmRpc2Nvbm5lY3QoKVxuICB9XG5cbiAgdHJpZ2dlckRPTShraW5kLCBhcmdzKXsgdGhpcy5kb21DYWxsYmFja3Nba2luZF0oLi4uYXJncykgfVxuXG4gIHRpbWUobmFtZSwgZnVuYyl7XG4gICAgaWYoIXRoaXMuaXNQcm9maWxlRW5hYmxlZCgpIHx8ICFjb25zb2xlLnRpbWUpeyByZXR1cm4gZnVuYygpIH1cbiAgICBjb25zb2xlLnRpbWUobmFtZSlcbiAgICBsZXQgcmVzdWx0ID0gZnVuYygpXG4gICAgY29uc29sZS50aW1lRW5kKG5hbWUpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgbG9nKHZpZXcsIGtpbmQsIG1zZ0NhbGxiYWNrKXtcbiAgICBpZih0aGlzLnZpZXdMb2dnZXIpe1xuICAgICAgbGV0IFttc2csIG9ial0gPSBtc2dDYWxsYmFjaygpXG4gICAgICB0aGlzLnZpZXdMb2dnZXIodmlldywga2luZCwgbXNnLCBvYmopXG4gICAgfSBlbHNlIGlmKHRoaXMuaXNEZWJ1Z0VuYWJsZWQoKSl7XG4gICAgICBsZXQgW21zZywgb2JqXSA9IG1zZ0NhbGxiYWNrKClcbiAgICAgIGRlYnVnKHZpZXcsIGtpbmQsIG1zZywgb2JqKVxuICAgIH1cbiAgfVxuXG4gIHJlcXVlc3RET01VcGRhdGUoY2FsbGJhY2spe1xuICAgIHRoaXMudHJhbnNpdGlvbnMuYWZ0ZXIoY2FsbGJhY2spXG4gIH1cblxuICB0cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSA9IGZ1bmN0aW9uKCl7fSl7XG4gICAgdGhpcy50cmFuc2l0aW9ucy5hZGRUcmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSlcbiAgfVxuXG4gIG9uQ2hhbm5lbChjaGFubmVsLCBldmVudCwgY2Ipe1xuICAgIGNoYW5uZWwub24oZXZlbnQsIGRhdGEgPT4ge1xuICAgICAgbGV0IGxhdGVuY3kgPSB0aGlzLmdldExhdGVuY3lTaW0oKVxuICAgICAgaWYoIWxhdGVuY3kpe1xuICAgICAgICBjYihkYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBjYihkYXRhKSwgbGF0ZW5jeSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmVsb2FkV2l0aEppdHRlcih2aWV3LCBsb2cpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICB0aGlzLmRpc2Nvbm5lY3QoKVxuICAgIGxldCBtaW5NcyA9IHRoaXMucmVsb2FkSml0dGVyTWluXG4gICAgbGV0IG1heE1zID0gdGhpcy5yZWxvYWRKaXR0ZXJNYXhcbiAgICBsZXQgYWZ0ZXJNcyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXhNcyAtIG1pbk1zICsgMSkpICsgbWluTXNcbiAgICBsZXQgdHJpZXMgPSBCcm93c2VyLnVwZGF0ZUxvY2FsKHRoaXMubG9jYWxTdG9yYWdlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIENPTlNFQ1VUSVZFX1JFTE9BRFMsIDAsIGNvdW50ID0+IGNvdW50ICsgMSlcbiAgICBpZih0cmllcyA+PSB0aGlzLm1heFJlbG9hZHMpe1xuICAgICAgYWZ0ZXJNcyA9IHRoaXMuZmFpbHNhZmVKaXR0ZXJcbiAgICB9XG4gICAgdGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIGlmIHZpZXcgaGFzIHJlY292ZXJlZCwgc3VjaCBhcyB0cmFuc3BvcnQgcmVwbGFjZWQsIHRoZW4gY2FuY2VsXG4gICAgICBpZih2aWV3LmlzRGVzdHJveWVkKCkgfHwgdmlldy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cbiAgICAgIHZpZXcuZGVzdHJveSgpXG4gICAgICBsb2cgPyBsb2coKSA6IHRoaXMubG9nKHZpZXcsIFwiam9pblwiLCAoKSA9PiBbYGVuY291bnRlcmVkICR7dHJpZXN9IGNvbnNlY3V0aXZlIHJlbG9hZHNgXSlcbiAgICAgIGlmKHRyaWVzID49IHRoaXMubWF4UmVsb2Fkcyl7XG4gICAgICAgIHRoaXMubG9nKHZpZXcsIFwiam9pblwiLCAoKSA9PiBbYGV4Y2VlZGVkICR7dGhpcy5tYXhSZWxvYWRzfSBjb25zZWN1dGl2ZSByZWxvYWRzLiBFbnRlcmluZyBmYWlsc2FmZSBtb2RlYF0pXG4gICAgICB9XG4gICAgICBpZih0aGlzLmhhc1BlbmRpbmdMaW5rKCkpe1xuICAgICAgICB3aW5kb3cubG9jYXRpb24gPSB0aGlzLnBlbmRpbmdMaW5rXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgIH1cbiAgICB9LCBhZnRlck1zKVxuICB9XG5cbiAgZ2V0SG9va0NhbGxiYWNrcyhuYW1lKXtcbiAgICByZXR1cm4gbmFtZSAmJiBuYW1lLnN0YXJ0c1dpdGgoXCJQaG9lbml4LlwiKSA/IEhvb2tzW25hbWUuc3BsaXQoXCIuXCIpWzFdXSA6IHRoaXMuaG9va3NbbmFtZV1cbiAgfVxuXG4gIGlzVW5sb2FkZWQoKXsgcmV0dXJuIHRoaXMudW5sb2FkZWQgfVxuXG4gIGlzQ29ubmVjdGVkKCl7IHJldHVybiB0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpIH1cblxuICBnZXRCaW5kaW5nUHJlZml4KCl7IHJldHVybiB0aGlzLmJpbmRpbmdQcmVmaXggfVxuXG4gIGJpbmRpbmcoa2luZCl7IHJldHVybiBgJHt0aGlzLmdldEJpbmRpbmdQcmVmaXgoKX0ke2tpbmR9YCB9XG5cbiAgY2hhbm5lbCh0b3BpYywgcGFyYW1zKXsgcmV0dXJuIHRoaXMuc29ja2V0LmNoYW5uZWwodG9waWMsIHBhcmFtcykgfVxuXG4gIGpvaW5EZWFkVmlldygpe1xuICAgIGxldCBib2R5ID0gZG9jdW1lbnQuYm9keVxuICAgIGlmKGJvZHkgJiYgIXRoaXMuaXNQaHhWaWV3KGJvZHkpICYmICF0aGlzLmlzUGh4Vmlldyhkb2N1bWVudC5maXJzdEVsZW1lbnRDaGlsZCkpe1xuICAgICAgbGV0IHZpZXcgPSB0aGlzLm5ld1Jvb3RWaWV3KGJvZHkpXG4gICAgICB2aWV3LnNldEhyZWYodGhpcy5nZXRIcmVmKCkpXG4gICAgICB2aWV3LmpvaW5EZWFkKClcbiAgICAgIGlmKCF0aGlzLm1haW4peyB0aGlzLm1haW4gPSB2aWV3IH1cbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdmlldy5leGVjTmV3TW91bnRlZCgpKVxuICAgIH1cbiAgfVxuXG4gIGpvaW5Sb290Vmlld3MoKXtcbiAgICBsZXQgcm9vdHNGb3VuZCA9IGZhbHNlXG4gICAgRE9NLmFsbChkb2N1bWVudCwgYCR7UEhYX1ZJRVdfU0VMRUNUT1J9Om5vdChbJHtQSFhfUEFSRU5UX0lEfV0pYCwgcm9vdEVsID0+IHtcbiAgICAgIGlmKCF0aGlzLmdldFJvb3RCeUlkKHJvb3RFbC5pZCkpe1xuICAgICAgICBsZXQgdmlldyA9IHRoaXMubmV3Um9vdFZpZXcocm9vdEVsKVxuICAgICAgICB2aWV3LnNldEhyZWYodGhpcy5nZXRIcmVmKCkpXG4gICAgICAgIHZpZXcuam9pbigpXG4gICAgICAgIGlmKHJvb3RFbC5oYXNBdHRyaWJ1dGUoUEhYX01BSU4pKXsgdGhpcy5tYWluID0gdmlldyB9XG4gICAgICB9XG4gICAgICByb290c0ZvdW5kID0gdHJ1ZVxuICAgIH0pXG4gICAgcmV0dXJuIHJvb3RzRm91bmRcbiAgfVxuXG4gIHJlZGlyZWN0KHRvLCBmbGFzaCwgcmVsb2FkVG9rZW4pe1xuICAgIGlmKHJlbG9hZFRva2VuKXsgQnJvd3Nlci5zZXRDb29raWUoUEhYX1JFTE9BRF9TVEFUVVMsIHJlbG9hZFRva2VuLCA2MCkgfVxuICAgIHRoaXMudW5sb2FkKClcbiAgICBCcm93c2VyLnJlZGlyZWN0KHRvLCBmbGFzaClcbiAgfVxuXG4gIHJlcGxhY2VNYWluKGhyZWYsIGZsYXNoLCBjYWxsYmFjayA9IG51bGwsIGxpbmtSZWYgPSB0aGlzLnNldFBlbmRpbmdMaW5rKGhyZWYpKXtcbiAgICBsZXQgbGl2ZVJlZmVyZXIgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbi5ocmVmXG4gICAgdGhpcy5vdXRnb2luZ01haW5FbCA9IHRoaXMub3V0Z29pbmdNYWluRWwgfHwgdGhpcy5tYWluLmVsXG4gICAgbGV0IHJlbW92ZUVscyA9IERPTS5hbGwodGhpcy5vdXRnb2luZ01haW5FbCwgYFske3RoaXMuYmluZGluZyhcInJlbW92ZVwiKX1dYClcbiAgICBsZXQgbmV3TWFpbkVsID0gRE9NLmNsb25lTm9kZSh0aGlzLm91dGdvaW5nTWFpbkVsLCBcIlwiKVxuICAgIHRoaXMubWFpbi5zaG93TG9hZGVyKHRoaXMubG9hZGVyVGltZW91dClcbiAgICB0aGlzLm1haW4uZGVzdHJveSgpXG5cbiAgICB0aGlzLm1haW4gPSB0aGlzLm5ld1Jvb3RWaWV3KG5ld01haW5FbCwgZmxhc2gsIGxpdmVSZWZlcmVyKVxuICAgIHRoaXMubWFpbi5zZXRSZWRpcmVjdChocmVmKVxuICAgIHRoaXMudHJhbnNpdGlvblJlbW92ZXMocmVtb3ZlRWxzLCB0cnVlKVxuICAgIHRoaXMubWFpbi5qb2luKChqb2luQ291bnQsIG9uRG9uZSkgPT4ge1xuICAgICAgaWYoam9pbkNvdW50ID09PSAxICYmIHRoaXMuY29tbWl0UGVuZGluZ0xpbmsobGlua1JlZikpe1xuICAgICAgICB0aGlzLnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgIC8vIHJlbW92ZSBwaHgtcmVtb3ZlIGVscyByaWdodCBiZWZvcmUgd2UgcmVwbGFjZSB0aGUgbWFpbiBlbGVtZW50XG4gICAgICAgICAgcmVtb3ZlRWxzLmZvckVhY2goZWwgPT4gZWwucmVtb3ZlKCkpXG4gICAgICAgICAgRE9NLmZpbmRQaHhTdGlja3koZG9jdW1lbnQpLmZvckVhY2goZWwgPT4gbmV3TWFpbkVsLmFwcGVuZENoaWxkKGVsKSlcbiAgICAgICAgICB0aGlzLm91dGdvaW5nTWFpbkVsLnJlcGxhY2VXaXRoKG5ld01haW5FbClcbiAgICAgICAgICB0aGlzLm91dGdvaW5nTWFpbkVsID0gbnVsbFxuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGxpbmtSZWYpXG4gICAgICAgICAgb25Eb25lKClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdHJhbnNpdGlvblJlbW92ZXMoZWxlbWVudHMsIHNraXBTdGlja3ksIGNhbGxiYWNrKXtcbiAgICBsZXQgcmVtb3ZlQXR0ciA9IHRoaXMuYmluZGluZyhcInJlbW92ZVwiKVxuICAgIGlmKHNraXBTdGlja3kpe1xuICAgICAgY29uc3Qgc3RpY2tpZXMgPSBET00uZmluZFBoeFN0aWNreShkb2N1bWVudCkgfHwgW11cbiAgICAgIGVsZW1lbnRzID0gZWxlbWVudHMuZmlsdGVyKGVsID0+ICFET00uaXNDaGlsZE9mQW55KGVsLCBzdGlja2llcykpXG4gICAgfVxuICAgIGxldCBzaWxlbmNlRXZlbnRzID0gKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuICAgIH1cbiAgICBlbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIC8vIHByZXZlbnQgYWxsIGxpc3RlbmVycyB3ZSBjYXJlIGFib3V0IGZyb20gYnViYmxpbmcgdG8gd2luZG93XG4gICAgICAvLyBzaW5jZSB3ZSBhcmUgcmVtb3ZpbmcgdGhlIGVsZW1lbnRcbiAgICAgIGZvcihsZXQgZXZlbnQgb2YgdGhpcy5ib3VuZEV2ZW50TmFtZXMpe1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBzaWxlbmNlRXZlbnRzLCB0cnVlKVxuICAgICAgfVxuICAgICAgdGhpcy5leGVjSlMoZWwsIGVsLmdldEF0dHJpYnV0ZShyZW1vdmVBdHRyKSwgXCJyZW1vdmVcIilcbiAgICB9KVxuICAgIC8vIHJlbW92ZSB0aGUgc2lsZW5jZWQgbGlzdGVuZXJzIHdoZW4gdHJhbnNpdGlvbnMgYXJlIGRvbmUgaW5jYXNlIHRoZSBlbGVtZW50IGlzIHJlLXVzZWRcbiAgICAvLyBhbmQgY2FsbCBjYWxsZXIncyBjYWxsYmFjayBhcyBzb29uIGFzIHdlIGFyZSBkb25lIHdpdGggdHJhbnNpdGlvbnNcbiAgICB0aGlzLnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGZvcihsZXQgZXZlbnQgb2YgdGhpcy5ib3VuZEV2ZW50TmFtZXMpe1xuICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHNpbGVuY2VFdmVudHMsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfSlcbiAgfVxuXG4gIGlzUGh4VmlldyhlbCl7IHJldHVybiBlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OKSAhPT0gbnVsbCB9XG5cbiAgbmV3Um9vdFZpZXcoZWwsIGZsYXNoLCBsaXZlUmVmZXJlcil7XG4gICAgbGV0IHZpZXcgPSBuZXcgVmlldyhlbCwgdGhpcywgbnVsbCwgZmxhc2gsIGxpdmVSZWZlcmVyKVxuICAgIHRoaXMucm9vdHNbdmlldy5pZF0gPSB2aWV3XG4gICAgcmV0dXJuIHZpZXdcbiAgfVxuXG4gIG93bmVyKGNoaWxkRWwsIGNhbGxiYWNrKXtcbiAgICBsZXQgdmlldyA9IG1heWJlKGNoaWxkRWwuY2xvc2VzdChQSFhfVklFV19TRUxFQ1RPUiksIGVsID0+IHRoaXMuZ2V0Vmlld0J5RWwoZWwpKSB8fCB0aGlzLm1haW5cbiAgICByZXR1cm4gdmlldyAmJiBjYWxsYmFjayA/IGNhbGxiYWNrKHZpZXcpIDogdmlld1xuICB9XG5cbiAgd2l0aGluT3duZXJzKGNoaWxkRWwsIGNhbGxiYWNrKXtcbiAgICB0aGlzLm93bmVyKGNoaWxkRWwsIHZpZXcgPT4gY2FsbGJhY2sodmlldywgY2hpbGRFbCkpXG4gIH1cblxuICBnZXRWaWV3QnlFbChlbCl7XG4gICAgbGV0IHJvb3RJZCA9IGVsLmdldEF0dHJpYnV0ZShQSFhfUk9PVF9JRClcbiAgICByZXR1cm4gbWF5YmUodGhpcy5nZXRSb290QnlJZChyb290SWQpLCByb290ID0+IHJvb3QuZ2V0RGVzY2VuZGVudEJ5RWwoZWwpKVxuICB9XG5cbiAgZ2V0Um9vdEJ5SWQoaWQpeyByZXR1cm4gdGhpcy5yb290c1tpZF0gfVxuXG4gIGRlc3Ryb3lBbGxWaWV3cygpe1xuICAgIGZvcihsZXQgaWQgaW4gdGhpcy5yb290cyl7XG4gICAgICB0aGlzLnJvb3RzW2lkXS5kZXN0cm95KClcbiAgICAgIGRlbGV0ZSB0aGlzLnJvb3RzW2lkXVxuICAgIH1cbiAgICB0aGlzLm1haW4gPSBudWxsXG4gIH1cblxuICBkZXN0cm95Vmlld0J5RWwoZWwpe1xuICAgIGxldCByb290ID0gdGhpcy5nZXRSb290QnlJZChlbC5nZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQpKVxuICAgIGlmKHJvb3QgJiYgcm9vdC5pZCA9PT0gZWwuaWQpe1xuICAgICAgcm9vdC5kZXN0cm95KClcbiAgICAgIGRlbGV0ZSB0aGlzLnJvb3RzW3Jvb3QuaWRdXG4gICAgfSBlbHNlIGlmKHJvb3Qpe1xuICAgICAgcm9vdC5kZXN0cm95RGVzY2VuZGVudChlbC5pZClcbiAgICB9XG4gIH1cblxuICBnZXRBY3RpdmVFbGVtZW50KCl7XG4gICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgfVxuXG4gIGRyb3BBY3RpdmVFbGVtZW50KHZpZXcpe1xuICAgIGlmKHRoaXMucHJldkFjdGl2ZSAmJiB2aWV3Lm93bnNFbGVtZW50KHRoaXMucHJldkFjdGl2ZSkpe1xuICAgICAgdGhpcy5wcmV2QWN0aXZlID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHJlc3RvcmVQcmV2aW91c2x5QWN0aXZlRm9jdXMoKXtcbiAgICBpZih0aGlzLnByZXZBY3RpdmUgJiYgdGhpcy5wcmV2QWN0aXZlICE9PSBkb2N1bWVudC5ib2R5KXtcbiAgICAgIHRoaXMucHJldkFjdGl2ZS5mb2N1cygpXG4gICAgfVxuICB9XG5cbiAgYmx1ckFjdGl2ZUVsZW1lbnQoKXtcbiAgICB0aGlzLnByZXZBY3RpdmUgPSB0aGlzLmdldEFjdGl2ZUVsZW1lbnQoKVxuICAgIGlmKHRoaXMucHJldkFjdGl2ZSAhPT0gZG9jdW1lbnQuYm9keSl7IHRoaXMucHJldkFjdGl2ZS5ibHVyKCkgfVxuICB9XG5cbiAgYmluZFRvcExldmVsRXZlbnRzKHtkZWFkfSA9IHt9KXtcbiAgICBpZih0aGlzLmJvdW5kVG9wTGV2ZWxFdmVudHMpeyByZXR1cm4gfVxuXG4gICAgdGhpcy5ib3VuZFRvcExldmVsRXZlbnRzID0gdHJ1ZVxuICAgIC8vIGVudGVyIGZhaWxzYWZlIHJlbG9hZCBpZiBzZXJ2ZXIgaGFzIGdvbmUgYXdheSBpbnRlbnRpb25hbGx5LCBzdWNoIGFzIFwiZGlzY29ubmVjdFwiIGJyb2FkY2FzdFxuICAgIHRoaXMuc2VydmVyQ2xvc2VSZWYgPSB0aGlzLnNvY2tldC5vbkNsb3NlKGV2ZW50ID0+IHtcbiAgICAgIC8vIGZhaWxzYWZlIHJlbG9hZCBpZiBub3JtYWwgY2xvc3VyZSBhbmQgd2Ugc3RpbGwgaGF2ZSBhIG1haW4gTFZcbiAgICAgIGlmKGV2ZW50ICYmIGV2ZW50LmNvZGUgPT09IDEwMDAgJiYgdGhpcy5tYWluKXsgcmV0dXJuIHRoaXMucmVsb2FkV2l0aEppdHRlcih0aGlzLm1haW4pIH1cbiAgICB9KVxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpeyB9KSAvLyBlbnN1cmUgYWxsIGNsaWNrIGV2ZW50cyBidWJibGUgZm9yIG1vYmlsZSBTYWZhcmlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VzaG93XCIsIGUgPT4ge1xuICAgICAgaWYoZS5wZXJzaXN0ZWQpeyAvLyByZWxvYWQgcGFnZSBpZiBiZWluZyByZXN0b3JlZCBmcm9tIGJhY2svZm9yd2FyZCBjYWNoZVxuICAgICAgICB0aGlzLmdldFNvY2tldCgpLmRpc2Nvbm5lY3QoKVxuICAgICAgICB0aGlzLndpdGhQYWdlTG9hZGluZyh7dG86IHdpbmRvdy5sb2NhdGlvbi5ocmVmLCBraW5kOiBcInJlZGlyZWN0XCJ9KVxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgIH1cbiAgICB9LCB0cnVlKVxuICAgIGlmKCFkZWFkKXsgdGhpcy5iaW5kTmF2KCkgfVxuICAgIHRoaXMuYmluZENsaWNrcygpXG4gICAgaWYoIWRlYWQpeyB0aGlzLmJpbmRGb3JtcygpIH1cbiAgICB0aGlzLmJpbmQoe2tleXVwOiBcImtleXVwXCIsIGtleWRvd246IFwia2V5ZG93blwifSwgKGUsIHR5cGUsIHZpZXcsIHRhcmdldEVsLCBwaHhFdmVudCwgX3BoeFRhcmdldCkgPT4ge1xuICAgICAgbGV0IG1hdGNoS2V5ID0gdGFyZ2V0RWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfS0VZKSlcbiAgICAgIGxldCBwcmVzc2VkS2V5ID0gZS5rZXkgJiYgZS5rZXkudG9Mb3dlckNhc2UoKSAvLyBjaHJvbWUgY2xpY2tlZCBhdXRvY29tcGxldGVzIHNlbmQgYSBrZXlkb3duIHdpdGhvdXQga2V5XG4gICAgICBpZihtYXRjaEtleSAmJiBtYXRjaEtleS50b0xvd2VyQ2FzZSgpICE9PSBwcmVzc2VkS2V5KXsgcmV0dXJuIH1cblxuICAgICAgbGV0IGRhdGEgPSB7a2V5OiBlLmtleSwgLi4udGhpcy5ldmVudE1ldGEodHlwZSwgZSwgdGFyZ2V0RWwpfVxuICAgICAgSlMuZXhlYyhlLCB0eXBlLCBwaHhFdmVudCwgdmlldywgdGFyZ2V0RWwsIFtcInB1c2hcIiwge2RhdGF9XSlcbiAgICB9KVxuICAgIHRoaXMuYmluZCh7Ymx1cjogXCJmb2N1c291dFwiLCBmb2N1czogXCJmb2N1c2luXCJ9LCAoZSwgdHlwZSwgdmlldywgdGFyZ2V0RWwsIHBoeEV2ZW50LCBwaHhUYXJnZXQpID0+IHtcbiAgICAgIGlmKCFwaHhUYXJnZXQpe1xuICAgICAgICBsZXQgZGF0YSA9IHtrZXk6IGUua2V5LCAuLi50aGlzLmV2ZW50TWV0YSh0eXBlLCBlLCB0YXJnZXRFbCl9XG4gICAgICAgIEpTLmV4ZWMoZSwgdHlwZSwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldEVsLCBbXCJwdXNoXCIsIHtkYXRhfV0pXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLmJpbmQoe2JsdXI6IFwiYmx1clwiLCBmb2N1czogXCJmb2N1c1wifSwgKGUsIHR5cGUsIHZpZXcsIHRhcmdldEVsLCBwaHhFdmVudCwgcGh4VGFyZ2V0KSA9PiB7XG4gICAgICAvLyBibHVyIGFuZCBmb2N1cyBhcmUgdHJpZ2dlcmVkIG9uIGRvY3VtZW50IGFuZCB3aW5kb3cuIERpc2NhcmQgb25lIHRvIGF2b2lkIGR1cHNcbiAgICAgIGlmKHBoeFRhcmdldCA9PT0gXCJ3aW5kb3dcIil7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5ldmVudE1ldGEodHlwZSwgZSwgdGFyZ2V0RWwpXG4gICAgICAgIEpTLmV4ZWMoZSwgdHlwZSwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldEVsLCBbXCJwdXNoXCIsIHtkYXRhfV0pXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLm9uKFwiZHJhZ292ZXJcIiwgZSA9PiBlLnByZXZlbnREZWZhdWx0KCkpXG4gICAgdGhpcy5vbihcImRyb3BcIiwgZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGxldCBkcm9wVGFyZ2V0SWQgPSBtYXliZShjbG9zZXN0UGh4QmluZGluZyhlLnRhcmdldCwgdGhpcy5iaW5kaW5nKFBIWF9EUk9QX1RBUkdFVCkpLCB0cnVlVGFyZ2V0ID0+IHtcbiAgICAgICAgcmV0dXJuIHRydWVUYXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfRFJPUF9UQVJHRVQpKVxuICAgICAgfSlcbiAgICAgIGxldCBkcm9wVGFyZ2V0ID0gZHJvcFRhcmdldElkICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRyb3BUYXJnZXRJZClcbiAgICAgIGxldCBmaWxlcyA9IEFycmF5LmZyb20oZS5kYXRhVHJhbnNmZXIuZmlsZXMgfHwgW10pXG4gICAgICBpZighZHJvcFRhcmdldCB8fCBkcm9wVGFyZ2V0LmRpc2FibGVkIHx8IGZpbGVzLmxlbmd0aCA9PT0gMCB8fCAhKGRyb3BUYXJnZXQuZmlsZXMgaW5zdGFuY2VvZiBGaWxlTGlzdCkpeyByZXR1cm4gfVxuXG4gICAgICBMaXZlVXBsb2FkZXIudHJhY2tGaWxlcyhkcm9wVGFyZ2V0LCBmaWxlcywgZS5kYXRhVHJhbnNmZXIpXG4gICAgICBkcm9wVGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIiwge2J1YmJsZXM6IHRydWV9KSlcbiAgICB9KVxuICAgIHRoaXMub24oUEhYX1RSQUNLX1VQTE9BRFMsIGUgPT4ge1xuICAgICAgbGV0IHVwbG9hZFRhcmdldCA9IGUudGFyZ2V0XG4gICAgICBpZighRE9NLmlzVXBsb2FkSW5wdXQodXBsb2FkVGFyZ2V0KSl7IHJldHVybiB9XG4gICAgICBsZXQgZmlsZXMgPSBBcnJheS5mcm9tKGUuZGV0YWlsLmZpbGVzIHx8IFtdKS5maWx0ZXIoZiA9PiBmIGluc3RhbmNlb2YgRmlsZSB8fCBmIGluc3RhbmNlb2YgQmxvYilcbiAgICAgIExpdmVVcGxvYWRlci50cmFja0ZpbGVzKHVwbG9hZFRhcmdldCwgZmlsZXMpXG4gICAgICB1cGxvYWRUYXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7YnViYmxlczogdHJ1ZX0pKVxuICAgIH0pXG4gIH1cblxuICBldmVudE1ldGEoZXZlbnROYW1lLCBlLCB0YXJnZXRFbCl7XG4gICAgbGV0IGNhbGxiYWNrID0gdGhpcy5tZXRhZGF0YUNhbGxiYWNrc1tldmVudE5hbWVdXG4gICAgcmV0dXJuIGNhbGxiYWNrID8gY2FsbGJhY2soZSwgdGFyZ2V0RWwpIDoge31cbiAgfVxuXG4gIHNldFBlbmRpbmdMaW5rKGhyZWYpe1xuICAgIHRoaXMubGlua1JlZisrXG4gICAgdGhpcy5wZW5kaW5nTGluayA9IGhyZWZcbiAgICB0aGlzLnJlc2V0UmVsb2FkU3RhdHVzKClcbiAgICByZXR1cm4gdGhpcy5saW5rUmVmXG4gIH1cblxuICAvLyBhbnl0aW1lIHdlIGFyZSBuYXZpZ2F0aW5nIG9yIGNvbm5lY3RpbmcsIGRyb3AgcmVsb2FkIGNvb2tpZSBpbiBjYXNlXG4gIC8vIHdlIGlzc3VlIHRoZSBjb29raWUgYnV0IHRoZSBuZXh0IHJlcXVlc3Qgd2FzIGludGVycnVwdGVkIGFuZCB0aGUgc2VydmVyIG5ldmVyIGRyb3BwZWQgaXRcbiAgcmVzZXRSZWxvYWRTdGF0dXMoKXsgQnJvd3Nlci5kZWxldGVDb29raWUoUEhYX1JFTE9BRF9TVEFUVVMpIH1cblxuICBjb21taXRQZW5kaW5nTGluayhsaW5rUmVmKXtcbiAgICBpZih0aGlzLmxpbmtSZWYgIT09IGxpbmtSZWYpe1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaHJlZiA9IHRoaXMucGVuZGluZ0xpbmtcbiAgICAgIHRoaXMucGVuZGluZ0xpbmsgPSBudWxsXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGdldEhyZWYoKXsgcmV0dXJuIHRoaXMuaHJlZiB9XG5cbiAgaGFzUGVuZGluZ0xpbmsoKXsgcmV0dXJuICEhdGhpcy5wZW5kaW5nTGluayB9XG5cbiAgYmluZChldmVudHMsIGNhbGxiYWNrKXtcbiAgICBmb3IobGV0IGV2ZW50IGluIGV2ZW50cyl7XG4gICAgICBsZXQgYnJvd3NlckV2ZW50TmFtZSA9IGV2ZW50c1tldmVudF1cblxuICAgICAgdGhpcy5vbihicm93c2VyRXZlbnROYW1lLCBlID0+IHtcbiAgICAgICAgbGV0IGJpbmRpbmcgPSB0aGlzLmJpbmRpbmcoZXZlbnQpXG4gICAgICAgIGxldCB3aW5kb3dCaW5kaW5nID0gdGhpcy5iaW5kaW5nKGB3aW5kb3ctJHtldmVudH1gKVxuICAgICAgICBsZXQgdGFyZ2V0UGh4RXZlbnQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgZS50YXJnZXQuZ2V0QXR0cmlidXRlKGJpbmRpbmcpXG4gICAgICAgIGlmKHRhcmdldFBoeEV2ZW50KXtcbiAgICAgICAgICB0aGlzLmRlYm91bmNlKGUudGFyZ2V0LCBlLCBicm93c2VyRXZlbnROYW1lLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlLnRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGUsIGV2ZW50LCB2aWV3LCBlLnRhcmdldCwgdGFyZ2V0UGh4RXZlbnQsIG51bGwpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgRE9NLmFsbChkb2N1bWVudCwgYFske3dpbmRvd0JpbmRpbmd9XWAsIGVsID0+IHtcbiAgICAgICAgICAgIGxldCBwaHhFdmVudCA9IGVsLmdldEF0dHJpYnV0ZSh3aW5kb3dCaW5kaW5nKVxuICAgICAgICAgICAgdGhpcy5kZWJvdW5jZShlbCwgZSwgYnJvd3NlckV2ZW50TmFtZSwgKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlbCwgdmlldyA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZSwgZXZlbnQsIHZpZXcsIGVsLCBwaHhFdmVudCwgXCJ3aW5kb3dcIilcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBiaW5kQ2xpY2tzKCl7XG4gICAgdGhpcy5vbihcIm1vdXNlZG93blwiLCBlID0+IHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBlLnRhcmdldClcbiAgICB0aGlzLmJpbmRDbGljayhcImNsaWNrXCIsIFwiY2xpY2tcIilcbiAgfVxuXG4gIGJpbmRDbGljayhldmVudE5hbWUsIGJpbmRpbmdOYW1lKXtcbiAgICBsZXQgY2xpY2sgPSB0aGlzLmJpbmRpbmcoYmluZGluZ05hbWUpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBlID0+IHtcbiAgICAgIGxldCB0YXJnZXQgPSBudWxsXG4gICAgICAvLyBhIHN5bnRoZXRpYyBjbGljayBldmVudCAoZGV0YWlsIDApIHdpbGwgbm90IGhhdmUgY2F1c2VkIGEgbW91c2Vkb3duIGV2ZW50LFxuICAgICAgLy8gdGhlcmVmb3JlIHRoZSBjbGlja1N0YXJ0ZWRBdFRhcmdldCBpcyBzdGFsZVxuICAgICAgaWYoZS5kZXRhaWwgPT09IDApIHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBlLnRhcmdldFxuICAgICAgbGV0IGNsaWNrU3RhcnRlZEF0VGFyZ2V0ID0gdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCB8fCBlLnRhcmdldFxuICAgICAgLy8gd2hlbiBzZWFyY2hpbmcgdGhlIHRhcmdldCBmb3IgdGhlIGNsaWNrIGV2ZW50LCB3ZSBhbHdheXMgd2FudCB0b1xuICAgICAgLy8gdXNlIHRoZSBhY3R1YWwgZXZlbnQgdGFyZ2V0LCBzZWUgIzMzNzJcbiAgICAgIHRhcmdldCA9IGNsb3Nlc3RQaHhCaW5kaW5nKGUudGFyZ2V0LCBjbGljaylcbiAgICAgIHRoaXMuZGlzcGF0Y2hDbGlja0F3YXkoZSwgY2xpY2tTdGFydGVkQXRUYXJnZXQpXG4gICAgICB0aGlzLmNsaWNrU3RhcnRlZEF0VGFyZ2V0ID0gbnVsbFxuICAgICAgbGV0IHBoeEV2ZW50ID0gdGFyZ2V0ICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoY2xpY2spXG4gICAgICBpZighcGh4RXZlbnQpe1xuICAgICAgICBpZihET00uaXNOZXdQYWdlQ2xpY2soZSwgd2luZG93LmxvY2F0aW9uKSl7IHRoaXMudW5sb2FkKCkgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYodGFyZ2V0LmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiKXsgZS5wcmV2ZW50RGVmYXVsdCgpIH1cblxuICAgICAgLy8gbm9vcCBpZiB3ZSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhd2FpdGluZyBhbiBhY2sgZm9yIHRoaXMgZWwgYWxyZWFkeVxuICAgICAgaWYodGFyZ2V0Lmhhc0F0dHJpYnV0ZShQSFhfUkVGX1NSQykpeyByZXR1cm4gfVxuXG4gICAgICB0aGlzLmRlYm91bmNlKHRhcmdldCwgZSwgXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMud2l0aGluT3duZXJzKHRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgSlMuZXhlYyhlLCBcImNsaWNrXCIsIHBoeEV2ZW50LCB2aWV3LCB0YXJnZXQsIFtcInB1c2hcIiwge2RhdGE6IHRoaXMuZXZlbnRNZXRhKFwiY2xpY2tcIiwgZSwgdGFyZ2V0KX1dKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9LCBmYWxzZSlcbiAgfVxuXG4gIGRpc3BhdGNoQ2xpY2tBd2F5KGUsIGNsaWNrU3RhcnRlZEF0KXtcbiAgICBsZXQgcGh4Q2xpY2tBd2F5ID0gdGhpcy5iaW5kaW5nKFwiY2xpY2stYXdheVwiKVxuICAgIERPTS5hbGwoZG9jdW1lbnQsIGBbJHtwaHhDbGlja0F3YXl9XWAsIGVsID0+IHtcbiAgICAgIGlmKCEoZWwuaXNTYW1lTm9kZShjbGlja1N0YXJ0ZWRBdCkgfHwgZWwuY29udGFpbnMoY2xpY2tTdGFydGVkQXQpKSl7XG4gICAgICAgIHRoaXMud2l0aGluT3duZXJzKGVsLCB2aWV3ID0+IHtcbiAgICAgICAgICBsZXQgcGh4RXZlbnQgPSBlbC5nZXRBdHRyaWJ1dGUocGh4Q2xpY2tBd2F5KVxuICAgICAgICAgIGlmKEpTLmlzVmlzaWJsZShlbCkgJiYgSlMuaXNJblZpZXdwb3J0KGVsKSl7XG4gICAgICAgICAgICBKUy5leGVjKGUsIFwiY2xpY2tcIiwgcGh4RXZlbnQsIHZpZXcsIGVsLCBbXCJwdXNoXCIsIHtkYXRhOiB0aGlzLmV2ZW50TWV0YShcImNsaWNrXCIsIGUsIGUudGFyZ2V0KX1dKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYmluZE5hdigpe1xuICAgIGlmKCFCcm93c2VyLmNhblB1c2hTdGF0ZSgpKXsgcmV0dXJuIH1cbiAgICBpZihoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uKXsgaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCIgfVxuICAgIGxldCBzY3JvbGxUaW1lciA9IG51bGxcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBfZSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoc2Nyb2xsVGltZXIpXG4gICAgICBzY3JvbGxUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBCcm93c2VyLnVwZGF0ZUN1cnJlbnRTdGF0ZShzdGF0ZSA9PiBPYmplY3QuYXNzaWduKHN0YXRlLCB7c2Nyb2xsOiB3aW5kb3cuc2Nyb2xsWX0pKVxuICAgICAgfSwgMTAwKVxuICAgIH0pXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCBldmVudCA9PiB7XG4gICAgICBpZighdGhpcy5yZWdpc3Rlck5ld0xvY2F0aW9uKHdpbmRvdy5sb2NhdGlvbikpeyByZXR1cm4gfVxuICAgICAgbGV0IHt0eXBlLCBiYWNrVHlwZSwgaWQsIHJvb3QsIHNjcm9sbCwgcG9zaXRpb259ID0gZXZlbnQuc3RhdGUgfHwge31cbiAgICAgIGxldCBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWZcblxuICAgICAgLy8gQ29tcGFyZSBwb3NpdGlvbnMgdG8gZGV0ZXJtaW5lIGRpcmVjdGlvblxuICAgICAgbGV0IGlzRm9yd2FyZCA9IHBvc2l0aW9uID4gdGhpcy5jdXJyZW50SGlzdG9yeVBvc2l0aW9uXG5cbiAgICAgIHR5cGUgPSBpc0ZvcndhcmQgPyB0eXBlIDogKGJhY2tUeXBlIHx8IHR5cGUpXG5cbiAgICAgIC8vIFVwZGF0ZSBjdXJyZW50IHBvc2l0aW9uXG4gICAgICB0aGlzLmN1cnJlbnRIaXN0b3J5UG9zaXRpb24gPSBwb3NpdGlvbiB8fCAwXG4gICAgICB0aGlzLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX0hJU1RPUllfUE9TSVRJT04sIHRoaXMuY3VycmVudEhpc3RvcnlQb3NpdGlvbi50b1N0cmluZygpKVxuXG4gICAgICBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIFwicGh4Om5hdmlnYXRlXCIsIHtkZXRhaWw6IHtocmVmLCBwYXRjaDogdHlwZSA9PT0gXCJwYXRjaFwiLCBwb3A6IHRydWUsIGRpcmVjdGlvbjogaXNGb3J3YXJkID8gXCJmb3J3YXJkXCIgOiBcImJhY2t3YXJkXCJ9fSlcbiAgICAgIHRoaXMucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgIGlmKHRoaXMubWFpbi5pc0Nvbm5lY3RlZCgpICYmICh0eXBlID09PSBcInBhdGNoXCIgJiYgaWQgPT09IHRoaXMubWFpbi5pZCkpe1xuICAgICAgICAgIHRoaXMubWFpbi5wdXNoTGlua1BhdGNoKGV2ZW50LCBocmVmLCBudWxsLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1heWJlU2Nyb2xsKHNjcm9sbClcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVwbGFjZU1haW4oaHJlZiwgbnVsbCwgKCkgPT4ge1xuICAgICAgICAgICAgaWYocm9vdCl7IHRoaXMucmVwbGFjZVJvb3RIaXN0b3J5KCkgfVxuICAgICAgICAgICAgdGhpcy5tYXliZVNjcm9sbChzY3JvbGwpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LCBmYWxzZSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGUgPT4ge1xuICAgICAgbGV0IHRhcmdldCA9IGNsb3Nlc3RQaHhCaW5kaW5nKGUudGFyZ2V0LCBQSFhfTElWRV9MSU5LKVxuICAgICAgbGV0IHR5cGUgPSB0YXJnZXQgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShQSFhfTElWRV9MSU5LKVxuICAgICAgaWYoIXR5cGUgfHwgIXRoaXMuaXNDb25uZWN0ZWQoKSB8fCAhdGhpcy5tYWluIHx8IERPTS53YW50c05ld1RhYihlKSl7IHJldHVybiB9XG5cbiAgICAgIC8vIFdoZW4gd3JhcHBpbmcgYW4gU1ZHIGVsZW1lbnQgaW4gYW4gYW5jaG9yIHRhZywgdGhlIGhyZWYgY2FuIGJlIGFuIFNWR0FuaW1hdGVkU3RyaW5nXG4gICAgICBsZXQgaHJlZiA9IHRhcmdldC5ocmVmIGluc3RhbmNlb2YgU1ZHQW5pbWF0ZWRTdHJpbmcgPyB0YXJnZXQuaHJlZi5iYXNlVmFsIDogdGFyZ2V0LmhyZWZcblxuICAgICAgbGV0IGxpbmtTdGF0ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoUEhYX0xJTktfU1RBVEUpXG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkgLy8gZG8gbm90IGJ1YmJsZSBjbGljayB0byByZWd1bGFyIHBoeC1jbGljayBiaW5kaW5nc1xuICAgICAgaWYodGhpcy5wZW5kaW5nTGluayA9PT0gaHJlZil7IHJldHVybiB9XG5cbiAgICAgIHRoaXMucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgIGlmKHR5cGUgPT09IFwicGF0Y2hcIil7XG4gICAgICAgICAgdGhpcy5wdXNoSGlzdG9yeVBhdGNoKGUsIGhyZWYsIGxpbmtTdGF0ZSwgdGFyZ2V0KVxuICAgICAgICB9IGVsc2UgaWYodHlwZSA9PT0gXCJyZWRpcmVjdFwiKXtcbiAgICAgICAgICB0aGlzLmhpc3RvcnlSZWRpcmVjdChlLCBocmVmLCBsaW5rU3RhdGUsIG51bGwsIHRhcmdldClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkICR7UEhYX0xJVkVfTElOS30gdG8gYmUgXCJwYXRjaFwiIG9yIFwicmVkaXJlY3RcIiwgZ290OiAke3R5cGV9YClcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGh4Q2xpY2sgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcImNsaWNrXCIpKVxuICAgICAgICBpZihwaHhDbGljayl7XG4gICAgICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHRoaXMuZXhlY0pTKHRhcmdldCwgcGh4Q2xpY2ssIFwiY2xpY2tcIikpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSwgZmFsc2UpXG4gIH1cblxuICBtYXliZVNjcm9sbChzY3JvbGwpe1xuICAgIGlmKHR5cGVvZihzY3JvbGwpID09PSBcIm51bWJlclwiKXtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCBzY3JvbGwpXG4gICAgICB9KSAvLyB0aGUgYm9keSBuZWVkcyB0byByZW5kZXIgYmVmb3JlIHdlIHNjcm9sbC5cbiAgICB9XG4gIH1cblxuICBkaXNwYXRjaEV2ZW50KGV2ZW50LCBwYXlsb2FkID0ge30pe1xuICAgIERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgYHBoeDoke2V2ZW50fWAsIHtkZXRhaWw6IHBheWxvYWR9KVxuICB9XG5cbiAgZGlzcGF0Y2hFdmVudHMoZXZlbnRzKXtcbiAgICBldmVudHMuZm9yRWFjaCgoW2V2ZW50LCBwYXlsb2FkXSkgPT4gdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50LCBwYXlsb2FkKSlcbiAgfVxuXG4gIHdpdGhQYWdlTG9hZGluZyhpbmZvLCBjYWxsYmFjayl7XG4gICAgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpwYWdlLWxvYWRpbmctc3RhcnRcIiwge2RldGFpbDogaW5mb30pXG4gICAgbGV0IGRvbmUgPSAoKSA9PiBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIFwicGh4OnBhZ2UtbG9hZGluZy1zdG9wXCIsIHtkZXRhaWw6IGluZm99KVxuICAgIHJldHVybiBjYWxsYmFjayA/IGNhbGxiYWNrKGRvbmUpIDogZG9uZVxuICB9XG5cbiAgcHVzaEhpc3RvcnlQYXRjaChlLCBocmVmLCBsaW5rU3RhdGUsIHRhcmdldEVsKXtcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpIHx8ICF0aGlzLm1haW4uaXNNYWluKCkpeyByZXR1cm4gQnJvd3Nlci5yZWRpcmVjdChocmVmKSB9XG5cbiAgICB0aGlzLndpdGhQYWdlTG9hZGluZyh7dG86IGhyZWYsIGtpbmQ6IFwicGF0Y2hcIn0sIGRvbmUgPT4ge1xuICAgICAgdGhpcy5tYWluLnB1c2hMaW5rUGF0Y2goZSwgaHJlZiwgdGFyZ2V0RWwsIGxpbmtSZWYgPT4ge1xuICAgICAgICB0aGlzLmhpc3RvcnlQYXRjaChocmVmLCBsaW5rU3RhdGUsIGxpbmtSZWYpXG4gICAgICAgIGRvbmUoKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgaGlzdG9yeVBhdGNoKGhyZWYsIGxpbmtTdGF0ZSwgbGlua1JlZiA9IHRoaXMuc2V0UGVuZGluZ0xpbmsoaHJlZikpe1xuICAgIGlmKCF0aGlzLmNvbW1pdFBlbmRpbmdMaW5rKGxpbmtSZWYpKXsgcmV0dXJuIH1cblxuICAgIC8vIEluY3JlbWVudCBwb3NpdGlvbiBmb3IgbmV3IHN0YXRlXG4gICAgdGhpcy5jdXJyZW50SGlzdG9yeVBvc2l0aW9uKytcbiAgICB0aGlzLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX0hJU1RPUllfUE9TSVRJT04sIHRoaXMuY3VycmVudEhpc3RvcnlQb3NpdGlvbi50b1N0cmluZygpKVxuXG4gICAgLy8gc3RvcmUgdGhlIHR5cGUgZm9yIGJhY2sgbmF2aWdhdGlvblxuICAgIEJyb3dzZXIudXBkYXRlQ3VycmVudFN0YXRlKChzdGF0ZSkgPT4gKHsuLi5zdGF0ZSwgYmFja1R5cGU6IFwicGF0Y2hcIn0pKVxuXG4gICAgQnJvd3Nlci5wdXNoU3RhdGUobGlua1N0YXRlLCB7XG4gICAgICB0eXBlOiBcInBhdGNoXCIsXG4gICAgICBpZDogdGhpcy5tYWluLmlkLFxuICAgICAgcG9zaXRpb246IHRoaXMuY3VycmVudEhpc3RvcnlQb3NpdGlvblxuICAgIH0sIGhyZWYpXG5cbiAgICBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIFwicGh4Om5hdmlnYXRlXCIsIHtkZXRhaWw6IHtwYXRjaDogdHJ1ZSwgaHJlZiwgcG9wOiBmYWxzZSwgZGlyZWN0aW9uOiBcImZvcndhcmRcIn19KVxuICAgIHRoaXMucmVnaXN0ZXJOZXdMb2NhdGlvbih3aW5kb3cubG9jYXRpb24pXG4gIH1cblxuICBoaXN0b3J5UmVkaXJlY3QoZSwgaHJlZiwgbGlua1N0YXRlLCBmbGFzaCwgdGFyZ2V0RWwpe1xuICAgIGlmKHRhcmdldEVsICYmIGUuaXNUcnVzdGVkICYmIGUudHlwZSAhPT0gXCJwb3BzdGF0ZVwiKXsgdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZChcInBoeC1jbGljay1sb2FkaW5nXCIpIH1cbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpIHx8ICF0aGlzLm1haW4uaXNNYWluKCkpeyByZXR1cm4gQnJvd3Nlci5yZWRpcmVjdChocmVmLCBmbGFzaCkgfVxuXG4gICAgLy8gY29udmVydCB0byBmdWxsIGhyZWYgaWYgb25seSBwYXRoIHByZWZpeFxuICAgIGlmKC9eXFwvJHxeXFwvW15cXC9dKy4qJC8udGVzdChocmVmKSl7XG4gICAgICBsZXQge3Byb3RvY29sLCBob3N0fSA9IHdpbmRvdy5sb2NhdGlvblxuICAgICAgaHJlZiA9IGAke3Byb3RvY29sfS8vJHtob3N0fSR7aHJlZn1gXG4gICAgfVxuICAgIGxldCBzY3JvbGwgPSB3aW5kb3cuc2Nyb2xsWVxuICAgIHRoaXMud2l0aFBhZ2VMb2FkaW5nKHt0bzogaHJlZiwga2luZDogXCJyZWRpcmVjdFwifSwgZG9uZSA9PiB7XG4gICAgICB0aGlzLnJlcGxhY2VNYWluKGhyZWYsIGZsYXNoLCAobGlua1JlZikgPT4ge1xuICAgICAgICBpZihsaW5rUmVmID09PSB0aGlzLmxpbmtSZWYpe1xuICAgICAgICAgIC8vIEluY3JlbWVudCBwb3NpdGlvbiBmb3IgbmV3IHN0YXRlXG4gICAgICAgICAgdGhpcy5jdXJyZW50SGlzdG9yeVBvc2l0aW9uKytcbiAgICAgICAgICB0aGlzLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX0hJU1RPUllfUE9TSVRJT04sIHRoaXMuY3VycmVudEhpc3RvcnlQb3NpdGlvbi50b1N0cmluZygpKVxuXG4gICAgICAgICAgLy8gc3RvcmUgdGhlIHR5cGUgZm9yIGJhY2sgbmF2aWdhdGlvblxuICAgICAgICAgIEJyb3dzZXIudXBkYXRlQ3VycmVudFN0YXRlKChzdGF0ZSkgPT4gKHsuLi5zdGF0ZSwgYmFja1R5cGU6IFwicmVkaXJlY3RcIn0pKVxuXG4gICAgICAgICAgQnJvd3Nlci5wdXNoU3RhdGUobGlua1N0YXRlLCB7XG4gICAgICAgICAgICB0eXBlOiBcInJlZGlyZWN0XCIsXG4gICAgICAgICAgICBpZDogdGhpcy5tYWluLmlkLFxuICAgICAgICAgICAgc2Nyb2xsOiBzY3JvbGwsXG4gICAgICAgICAgICBwb3NpdGlvbjogdGhpcy5jdXJyZW50SGlzdG9yeVBvc2l0aW9uXG4gICAgICAgICAgfSwgaHJlZilcblxuICAgICAgICAgIERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6bmF2aWdhdGVcIiwge2RldGFpbDoge2hyZWYsIHBhdGNoOiBmYWxzZSwgcG9wOiBmYWxzZSwgZGlyZWN0aW9uOiBcImZvcndhcmRcIn19KVxuICAgICAgICAgIHRoaXMucmVnaXN0ZXJOZXdMb2NhdGlvbih3aW5kb3cubG9jYXRpb24pXG4gICAgICAgIH1cbiAgICAgICAgZG9uZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICByZXBsYWNlUm9vdEhpc3RvcnkoKXtcbiAgICBCcm93c2VyLnB1c2hTdGF0ZShcInJlcGxhY2VcIiwge1xuICAgICAgcm9vdDogdHJ1ZSxcbiAgICAgIHR5cGU6IFwicGF0Y2hcIixcbiAgICAgIGlkOiB0aGlzLm1haW4uaWQsXG4gICAgICBwb3NpdGlvbjogdGhpcy5jdXJyZW50SGlzdG9yeVBvc2l0aW9uIC8vIFByZXNlcnZlIGN1cnJlbnQgcG9zaXRpb25cbiAgICB9KVxuICB9XG5cbiAgcmVnaXN0ZXJOZXdMb2NhdGlvbihuZXdMb2NhdGlvbil7XG4gICAgbGV0IHtwYXRobmFtZSwgc2VhcmNofSA9IHRoaXMuY3VycmVudExvY2F0aW9uXG4gICAgaWYocGF0aG5hbWUgKyBzZWFyY2ggPT09IG5ld0xvY2F0aW9uLnBhdGhuYW1lICsgbmV3TG9jYXRpb24uc2VhcmNoKXtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IGNsb25lKG5ld0xvY2F0aW9uKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBiaW5kRm9ybXMoKXtcbiAgICBsZXQgaXRlcmF0aW9ucyA9IDBcbiAgICBsZXQgZXh0ZXJuYWxGb3JtU3VibWl0dGVkID0gZmFsc2VcblxuICAgIC8vIGRpc2FibGUgZm9ybXMgb24gc3VibWl0IHRoYXQgdHJhY2sgcGh4LWNoYW5nZSBidXQgcGVyZm9ybSBleHRlcm5hbCBzdWJtaXRcbiAgICB0aGlzLm9uKFwic3VibWl0XCIsIGUgPT4ge1xuICAgICAgbGV0IHBoeFN1Ym1pdCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJzdWJtaXRcIikpXG4gICAgICBsZXQgcGh4Q2hhbmdlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcImNoYW5nZVwiKSlcbiAgICAgIGlmKCFleHRlcm5hbEZvcm1TdWJtaXR0ZWQgJiYgcGh4Q2hhbmdlICYmICFwaHhTdWJtaXQpe1xuICAgICAgICBleHRlcm5hbEZvcm1TdWJtaXR0ZWQgPSB0cnVlXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlLnRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgdmlldy5kaXNhYmxlRm9ybShlLnRhcmdldClcbiAgICAgICAgICAvLyBzYWZhcmkgbmVlZHMgbmV4dCB0aWNrXG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBpZihET00uaXNVbmxvYWRhYmxlRm9ybVN1Ym1pdChlKSl7IHRoaXMudW5sb2FkKCkgfVxuICAgICAgICAgICAgZS50YXJnZXQuc3VibWl0KClcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLm9uKFwic3VibWl0XCIsIGUgPT4ge1xuICAgICAgbGV0IHBoeEV2ZW50ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcInN1Ym1pdFwiKSlcbiAgICAgIGlmKCFwaHhFdmVudCl7XG4gICAgICAgIGlmKERPTS5pc1VubG9hZGFibGVGb3JtU3VibWl0KGUpKXsgdGhpcy51bmxvYWQoKSB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBlLnRhcmdldC5kaXNhYmxlZCA9IHRydWVcbiAgICAgIHRoaXMud2l0aGluT3duZXJzKGUudGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgSlMuZXhlYyhlLCBcInN1Ym1pdFwiLCBwaHhFdmVudCwgdmlldywgZS50YXJnZXQsIFtcInB1c2hcIiwge3N1Ym1pdHRlcjogZS5zdWJtaXR0ZXJ9XSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGZvcihsZXQgdHlwZSBvZiBbXCJjaGFuZ2VcIiwgXCJpbnB1dFwiXSl7XG4gICAgICB0aGlzLm9uKHR5cGUsIGUgPT4ge1xuICAgICAgICBpZihlIGluc3RhbmNlb2YgQ3VzdG9tRXZlbnQgJiYgZS50YXJnZXQuZm9ybSA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAvLyB0aHJvdyBvbiBpbnZhbGlkIEpTLmRpc3BhdGNoIHRhcmdldCBhbmQgbm9vcCBpZiBDdXN0b21FdmVudCB0cmlnZ2VyZWQgb3V0c2lkZSBKUy5kaXNwYXRjaFxuICAgICAgICAgIGlmKGUuZGV0YWlsICYmIGUuZGV0YWlsLmRpc3BhdGNoZXIpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkaXNwYXRjaGluZyBhIGN1c3RvbSAke3R5cGV9IGV2ZW50IGlzIG9ubHkgc3VwcG9ydGVkIG9uIGlucHV0IGVsZW1lbnRzIGluc2lkZSBhIGZvcm1gKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBsZXQgcGh4Q2hhbmdlID0gdGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpXG4gICAgICAgIGxldCBpbnB1dCA9IGUudGFyZ2V0XG4gICAgICAgIC8vIGRvIG5vdCBmaXJlIHBoeC1jaGFuZ2UgaWYgd2UgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBjb21wb3NpdGlvbiBzZXNzaW9uXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L2lzQ29tcG9zaW5nXG4gICAgICAgIC8vIFNhZmFyaSBoYXMgaXNzdWVzIGlmIHRoZSBpbnB1dCBpcyB1cGRhdGVkIHdoaWxlIGNvbXBvc2luZ1xuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peF9saXZlX3ZpZXcvaXNzdWVzLzMzMjJcbiAgICAgICAgaWYoZS5pc0NvbXBvc2luZyl7XG4gICAgICAgICAgY29uc3Qga2V5ID0gYGNvbXBvc2l0aW9uLWxpc3RlbmVyLSR7dHlwZX1gXG4gICAgICAgICAgaWYoIURPTS5wcml2YXRlKGlucHV0LCBrZXkpKXtcbiAgICAgICAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0LCBrZXksIHRydWUpXG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY29tcG9zaXRpb25lbmRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAvLyB0cmlnZ2VyIGEgbmV3IGlucHV0L2NoYW5nZSBldmVudFxuICAgICAgICAgICAgICBpbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCh0eXBlLCB7YnViYmxlczogdHJ1ZX0pKVxuICAgICAgICAgICAgICBET00uZGVsZXRlUHJpdmF0ZShpbnB1dCwga2V5KVxuICAgICAgICAgICAgfSwge29uY2U6IHRydWV9KVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBsZXQgaW5wdXRFdmVudCA9IGlucHV0LmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpXG4gICAgICAgIGxldCBmb3JtRXZlbnQgPSBpbnB1dC5mb3JtICYmIGlucHV0LmZvcm0uZ2V0QXR0cmlidXRlKHBoeENoYW5nZSlcbiAgICAgICAgbGV0IHBoeEV2ZW50ID0gaW5wdXRFdmVudCB8fCBmb3JtRXZlbnRcbiAgICAgICAgaWYoIXBoeEV2ZW50KXsgcmV0dXJuIH1cbiAgICAgICAgaWYoaW5wdXQudHlwZSA9PT0gXCJudW1iZXJcIiAmJiBpbnB1dC52YWxpZGl0eSAmJiBpbnB1dC52YWxpZGl0eS5iYWRJbnB1dCl7IHJldHVybiB9XG5cbiAgICAgICAgbGV0IGRpc3BhdGNoZXIgPSBpbnB1dEV2ZW50ID8gaW5wdXQgOiBpbnB1dC5mb3JtXG4gICAgICAgIGxldCBjdXJyZW50SXRlcmF0aW9ucyA9IGl0ZXJhdGlvbnNcbiAgICAgICAgaXRlcmF0aW9ucysrXG4gICAgICAgIGxldCB7YXQ6IGF0LCB0eXBlOiBsYXN0VHlwZX0gPSBET00ucHJpdmF0ZShpbnB1dCwgXCJwcmV2LWl0ZXJhdGlvblwiKSB8fCB7fVxuICAgICAgICAvLyBCcm93c2VycyBzaG91bGQgYWx3YXlzIGZpcmUgYXQgbGVhc3Qgb25lIFwiaW5wdXRcIiBldmVudCBiZWZvcmUgZXZlcnkgXCJjaGFuZ2VcIlxuICAgICAgICAvLyBJZ25vcmUgXCJjaGFuZ2VcIiBldmVudHMsIHVubGVzcyB0aGVyZSB3YXMgbm8gcHJpb3IgXCJpbnB1dFwiIGV2ZW50LlxuICAgICAgICAvLyBUaGlzIGNvdWxkIGhhcHBlbiBpZiB1c2VyIGNvZGUgdHJpZ2dlcnMgYSBcImNoYW5nZVwiIGV2ZW50LCBvciBpZiB0aGUgYnJvd3NlciBpcyBub24tY29uZm9ybWluZy5cbiAgICAgICAgaWYoYXQgPT09IGN1cnJlbnRJdGVyYXRpb25zIC0gMSAmJiB0eXBlID09PSBcImNoYW5nZVwiICYmIGxhc3RUeXBlID09PSBcImlucHV0XCIpeyByZXR1cm4gfVxuXG4gICAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0LCBcInByZXYtaXRlcmF0aW9uXCIsIHthdDogY3VycmVudEl0ZXJhdGlvbnMsIHR5cGU6IHR5cGV9KVxuXG4gICAgICAgIHRoaXMuZGVib3VuY2UoaW5wdXQsIGUsIHR5cGUsICgpID0+IHtcbiAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhkaXNwYXRjaGVyLCB2aWV3ID0+IHtcbiAgICAgICAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQsIHRydWUpXG4gICAgICAgICAgICBKUy5leGVjKGUsIFwiY2hhbmdlXCIsIHBoeEV2ZW50LCB2aWV3LCBpbnB1dCwgW1wicHVzaFwiLCB7X3RhcmdldDogZS50YXJnZXQubmFtZSwgZGlzcGF0Y2hlcjogZGlzcGF0Y2hlcn1dKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cbiAgICB0aGlzLm9uKFwicmVzZXRcIiwgKGUpID0+IHtcbiAgICAgIGxldCBmb3JtID0gZS50YXJnZXRcbiAgICAgIERPTS5yZXNldEZvcm0oZm9ybSlcbiAgICAgIGxldCBpbnB1dCA9IEFycmF5LmZyb20oZm9ybS5lbGVtZW50cykuZmluZChlbCA9PiBlbC50eXBlID09PSBcInJlc2V0XCIpXG4gICAgICBpZihpbnB1dCl7XG4gICAgICAgIC8vIHdhaXQgdW50aWwgbmV4dCB0aWNrIHRvIGdldCB1cGRhdGVkIGlucHV0IHZhbHVlXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGlucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIiwge2J1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IGZhbHNlfSkpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGRlYm91bmNlKGVsLCBldmVudCwgZXZlbnRUeXBlLCBjYWxsYmFjayl7XG4gICAgaWYoZXZlbnRUeXBlID09PSBcImJsdXJcIiB8fCBldmVudFR5cGUgPT09IFwiZm9jdXNvdXRcIil7IHJldHVybiBjYWxsYmFjaygpIH1cblxuICAgIGxldCBwaHhEZWJvdW5jZSA9IHRoaXMuYmluZGluZyhQSFhfREVCT1VOQ0UpXG4gICAgbGV0IHBoeFRocm90dGxlID0gdGhpcy5iaW5kaW5nKFBIWF9USFJPVFRMRSlcbiAgICBsZXQgZGVmYXVsdERlYm91bmNlID0gdGhpcy5kZWZhdWx0cy5kZWJvdW5jZS50b1N0cmluZygpXG4gICAgbGV0IGRlZmF1bHRUaHJvdHRsZSA9IHRoaXMuZGVmYXVsdHMudGhyb3R0bGUudG9TdHJpbmcoKVxuXG4gICAgdGhpcy53aXRoaW5Pd25lcnMoZWwsIHZpZXcgPT4ge1xuICAgICAgbGV0IGFzeW5jRmlsdGVyID0gKCkgPT4gIXZpZXcuaXNEZXN0cm95ZWQoKSAmJiBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsKVxuICAgICAgRE9NLmRlYm91bmNlKGVsLCBldmVudCwgcGh4RGVib3VuY2UsIGRlZmF1bHREZWJvdW5jZSwgcGh4VGhyb3R0bGUsIGRlZmF1bHRUaHJvdHRsZSwgYXN5bmNGaWx0ZXIsICgpID0+IHtcbiAgICAgICAgY2FsbGJhY2soKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgc2lsZW5jZUV2ZW50cyhjYWxsYmFjayl7XG4gICAgdGhpcy5zaWxlbmNlZCA9IHRydWVcbiAgICBjYWxsYmFjaygpXG4gICAgdGhpcy5zaWxlbmNlZCA9IGZhbHNlXG4gIH1cblxuICBvbihldmVudCwgY2FsbGJhY2spe1xuICAgIHRoaXMuYm91bmRFdmVudE5hbWVzLmFkZChldmVudClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZSA9PiB7XG4gICAgICBpZighdGhpcy5zaWxlbmNlZCl7IGNhbGxiYWNrKGUpIH1cbiAgICB9KVxuICB9XG5cbiAganNRdWVyeVNlbGVjdG9yQWxsKHNvdXJjZUVsLCBxdWVyeSwgZGVmYXVsdFF1ZXJ5KXtcbiAgICBsZXQgYWxsID0gdGhpcy5kb21DYWxsYmFja3MuanNRdWVyeVNlbGVjdG9yQWxsXG4gICAgcmV0dXJuIGFsbCA/IGFsbChzb3VyY2VFbCwgcXVlcnksIGRlZmF1bHRRdWVyeSkgOiBkZWZhdWx0UXVlcnkoKVxuICB9XG59XG5cbmNsYXNzIFRyYW5zaXRpb25TZXQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHRoaXMudHJhbnNpdGlvbnMgPSBuZXcgU2V0KClcbiAgICB0aGlzLnBlbmRpbmdPcHMgPSBbXVxuICB9XG5cbiAgcmVzZXQoKXtcbiAgICB0aGlzLnRyYW5zaXRpb25zLmZvckVhY2godGltZXIgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKVxuICAgICAgdGhpcy50cmFuc2l0aW9ucy5kZWxldGUodGltZXIpXG4gICAgfSlcbiAgICB0aGlzLmZsdXNoUGVuZGluZ09wcygpXG4gIH1cblxuICBhZnRlcihjYWxsYmFjayl7XG4gICAgaWYodGhpcy5zaXplKCkgPT09IDApe1xuICAgICAgY2FsbGJhY2soKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hQZW5kaW5nT3AoY2FsbGJhY2spXG4gICAgfVxuICB9XG5cbiAgYWRkVHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpe1xuICAgIG9uU3RhcnQoKVxuICAgIGxldCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy50cmFuc2l0aW9ucy5kZWxldGUodGltZXIpXG4gICAgICBvbkRvbmUoKVxuICAgICAgdGhpcy5mbHVzaFBlbmRpbmdPcHMoKVxuICAgIH0sIHRpbWUpXG4gICAgdGhpcy50cmFuc2l0aW9ucy5hZGQodGltZXIpXG4gIH1cblxuICBwdXNoUGVuZGluZ09wKG9wKXsgdGhpcy5wZW5kaW5nT3BzLnB1c2gob3ApIH1cblxuICBzaXplKCl7IHJldHVybiB0aGlzLnRyYW5zaXRpb25zLnNpemUgfVxuXG4gIGZsdXNoUGVuZGluZ09wcygpe1xuICAgIGlmKHRoaXMuc2l6ZSgpID4gMCl7IHJldHVybiB9XG4gICAgbGV0IG9wID0gdGhpcy5wZW5kaW5nT3BzLnNoaWZ0KClcbiAgICBpZihvcCl7XG4gICAgICBvcCgpXG4gICAgICB0aGlzLmZsdXNoUGVuZGluZ09wcygpXG4gICAgfVxuICB9XG59XG4iLCAiLypcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5QaG9lbml4IExpdmVWaWV3IEphdmFTY3JpcHQgQ2xpZW50XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5TZWUgdGhlIGhleGRvY3MgYXQgYGh0dHBzOi8vaGV4ZG9jcy5wbS9waG9lbml4X2xpdmVfdmlld2AgZm9yIGRvY3VtZW50YXRpb24uXG5cbiovXG5cbmltcG9ydCBMaXZlU29ja2V0LCB7aXNVc2VkSW5wdXR9IGZyb20gXCIuL2xpdmVfc29ja2V0XCJcbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBWaWV3SG9vayBmcm9tIFwiLi92aWV3X2hvb2tcIlxuaW1wb3J0IFZpZXcgZnJvbSBcIi4vdmlld1wiXG5cbi8qKiBDcmVhdGVzIGEgVmlld0hvb2sgaW5zdGFuY2UgZm9yIHRoZSBnaXZlbiBlbGVtZW50IGFuZCBjYWxsYmFja3MuXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byBhc3NvY2lhdGUgd2l0aCB0aGUgaG9vay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY2FsbGJhY2tzXSAtIFRoZSBsaXN0IG9mIGhvb2sgY2FsbGJhY2tzLCBzdWNoIGFzIG1vdW50ZWQsXG4gKiAgIHVwZGF0ZWQsIGRlc3Ryb3llZCwgZXRjLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gKiAgIGNvbm5lY3RlZENhbGxiYWNrKCl7XG4gKiAgICAgbGV0IG9uTGl2ZVZpZXdNb3VudGVkID0gKCkgPT4gdGhpcy5ob29rLnB1c2hFdmVudCguLi4pKVxuICogICAgIHRoaXMuaG9vayA9IGNyZWF0ZUhvb2sodGhpcywge21vdW50ZWQ6IG9uTGl2ZVZpZXdNb3VudGVkfSlcbiAqICAgfVxuICogfVxuICpcbiAqICpOb3RlKjogYGNyZWF0ZUhvb2tgIG11c3QgYmUgY2FsbGVkIGZyb20gdGhlIGBjb25uZWN0ZWRDYWxsYmFja2AgbGlmZWN5Y2xlXG4gKiB3aGljaCBpcyB0cmlnZ2VyZWQgYWZ0ZXIgdGhlIGVsZW1lbnQgaGFzIGJlZW4gYWRkZWQgdG8gdGhlIERPTS4gSWYgeW91IHRyeVxuICogdG8gY2FsbCBgY3JlYXRlSG9va2AgZnJvbSB0aGUgY29uc3RydWN0b3IsIGFuIGVycm9yIHdpbGwgYmUgbG9nZ2VkLlxuICpcbiAqIEByZXR1cm5zIHtWaWV3SG9va30gUmV0dXJucyB0aGUgVmlld0hvb2sgaW5zdGFuY2UgZm9yIHRoZSBjdXN0b20gZWxlbWVudC5cbiAqL1xubGV0IGNyZWF0ZUhvb2sgPSAoZWwsIGNhbGxiYWNrcyA9IHt9KSA9PiB7XG4gIGxldCBleGlzdGluZ0hvb2sgPSBET00uZ2V0Q3VzdG9tRWxIb29rKGVsKVxuICBpZihleGlzdGluZ0hvb2speyByZXR1cm4gZXhpc3RpbmdIb29rIH1cblxuICBsZXQgaG9vayA9IG5ldyBWaWV3SG9vayhWaWV3LmNsb3Nlc3RWaWV3KGVsKSwgZWwsIGNhbGxiYWNrcylcbiAgRE9NLnB1dEN1c3RvbUVsSG9vayhlbCwgaG9vaylcbiAgcmV0dXJuIGhvb2tcbn1cblxuZXhwb3J0IHtcbiAgTGl2ZVNvY2tldCxcbiAgaXNVc2VkSW5wdXQsXG4gIGNyZWF0ZUhvb2tcbn1cbiIsICIvLyBJZiB5b3Ugd2FudCB0byB1c2UgUGhvZW5peCBjaGFubmVscywgcnVuIGBtaXggaGVscCBwaHguZ2VuLmNoYW5uZWxgXG4vLyB0byBnZXQgc3RhcnRlZCBhbmQgdGhlbiB1bmNvbW1lbnQgdGhlIGxpbmUgYmVsb3cuXG4vLyBpbXBvcnQgXCIuL3VzZXJfc29ja2V0LmpzXCJcblxuLy8gWW91IGNhbiBpbmNsdWRlIGRlcGVuZGVuY2llcyBpbiB0d28gd2F5cy5cbi8vXG4vLyBUaGUgc2ltcGxlc3Qgb3B0aW9uIGlzIHRvIHB1dCB0aGVtIGluIGFzc2V0cy92ZW5kb3IgYW5kXG4vLyBpbXBvcnQgdGhlbSB1c2luZyByZWxhdGl2ZSBwYXRoczpcbi8vXG4vLyAgICAgaW1wb3J0IFwiLi4vdmVuZG9yL3NvbWUtcGFja2FnZS5qc1wiXG4vL1xuLy8gQWx0ZXJuYXRpdmVseSwgeW91IGNhbiBgbnBtIGluc3RhbGwgc29tZS1wYWNrYWdlIC0tcHJlZml4IGFzc2V0c2AgYW5kIGltcG9ydFxuLy8gdGhlbSB1c2luZyBhIHBhdGggc3RhcnRpbmcgd2l0aCB0aGUgcGFja2FnZSBuYW1lOlxuLy9cbi8vICAgICBpbXBvcnQgXCJzb21lLXBhY2thZ2VcIlxuLy9cblxuLy8gSW5jbHVkZSBwaG9lbml4X2h0bWwgdG8gaGFuZGxlIG1ldGhvZD1QVVQvREVMRVRFIGluIGZvcm1zIGFuZCBidXR0b25zLlxuaW1wb3J0IFwicGhvZW5peF9odG1sXCJcbi8vIEVzdGFibGlzaCBQaG9lbml4IFNvY2tldCBhbmQgTGl2ZVZpZXcgY29uZmlndXJhdGlvbi5cbmltcG9ydCB7IFNvY2tldCB9IGZyb20gXCJwaG9lbml4XCJcbmltcG9ydCB7IExpdmVTb2NrZXQgfSBmcm9tIFwicGhvZW5peF9saXZlX3ZpZXdcIlxuaW1wb3J0IHRvcGJhciBmcm9tIFwiLi4vdmVuZG9yL3RvcGJhclwiXG5pbXBvcnQgc29ydGFibGUgZnJvbSBcIi4vaG9va3Mvc29ydGFibGVcIlxuaW1wb3J0IG1hcmtkb3duIGZyb20gXCIuL2hvb2tzL21hcmtkb3duXCJcbmltcG9ydCBTM1VwbG9hZGVyIGZyb20gJy4vdXBsb2FkZXJzL3MzJ1xuaW1wb3J0IExvY2FsTG9jYWxlU3RvcmFnZSBmcm9tICcuL2hvb2tzL2xvY2FsX2xvY2FsZV9zdG9yYWdlJ1xuaW1wb3J0IFwiZmxvd2JpdGUvZGlzdC9mbG93Yml0ZS5waG9lbml4LmpzXCI7XG5cbmNvbnN0IEhvb2tzID0geyBEcmFnOiBzb3J0YWJsZSwgTWFya2Rvd246IG1hcmtkb3duLCBMb2NhbExvY2FsZVN0b3JhZ2U6IExvY2FsTG9jYWxlU3RvcmFnZSB9XG5cbmxldCBjc3JmVG9rZW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibWV0YVtuYW1lPSdjc3JmLXRva2VuJ11cIikuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKVxubGV0IGxpdmVTb2NrZXQgPSBuZXcgTGl2ZVNvY2tldChcIi9saXZlXCIsIFNvY2tldCwge1xuICBsb25nUG9sbEZhbGxiYWNrTXM6IDI1MDAsXG4gIHBhcmFtczogeyBfY3NyZl90b2tlbjogY3NyZlRva2VuIH0sXG4gIHVwbG9hZGVyczogeyBTMzogUzNVcGxvYWRlciB9LFxuICBob29rczogSG9va3MsXG59KVxuXG4vLyBTaG93IHByb2dyZXNzIGJhciBvbiBsaXZlIG5hdmlnYXRpb24gYW5kIGZvcm0gc3VibWl0c1xudG9wYmFyLmNvbmZpZyh7IGJhckNvbG9yczogeyAwOiBcIiMyOWRcIiB9LCBzaGFkb3dDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIC4zKVwiIH0pXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpwYWdlLWxvYWRpbmctc3RhcnRcIiwgX2luZm8gPT4gdG9wYmFyLnNob3coMzAwKSlcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGh4OnBhZ2UtbG9hZGluZy1zdG9wXCIsIF9pbmZvID0+IHRvcGJhci5oaWRlKCkpXG5cbi8vIGNvbm5lY3QgaWYgdGhlcmUgYXJlIGFueSBMaXZlVmlld3Mgb24gdGhlIHBhZ2VcbmxpdmVTb2NrZXQuY29ubmVjdCgpXG5cbi8vIGV4cG9zZSBsaXZlU29ja2V0IG9uIHdpbmRvdyBmb3Igd2ViIGNvbnNvbGUgZGVidWcgbG9ncyBhbmQgbGF0ZW5jeSBzaW11bGF0aW9uOlxuLy8gPj4gbGl2ZVNvY2tldC5lbmFibGVEZWJ1ZygpXG4vLyA+PiBsaXZlU29ja2V0LmVuYWJsZUxhdGVuY3lTaW0oMTAwMCkgIC8vIGVuYWJsZWQgZm9yIGR1cmF0aW9uIG9mIGJyb3dzZXIgc2Vzc2lvblxuLy8gPj4gbGl2ZVNvY2tldC5kaXNhYmxlTGF0ZW5jeVNpbSgpXG53aW5kb3cubGl2ZVNvY2tldCA9IGxpdmVTb2NrZXRcbiIsICIvKiohXG4gKiBTb3J0YWJsZSAxLjE1LjRcbiAqIEBhdXRob3JcdFJ1YmFYYSAgIDx0cmFzaEBydWJheGEub3JnPlxuICogQGF1dGhvclx0b3dlbm0gICAgPG93ZW4yMzM1NUBnbWFpbC5jb20+XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHtcbiAgICAgIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuICByZXR1cm4gYXJyMjtcbn1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbnZhciB2ZXJzaW9uID0gXCIxLjE1LjRcIjtcblxuZnVuY3Rpb24gdXNlckFnZW50KHBhdHRlcm4pIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IpIHtcbiAgICByZXR1cm4gISEgLypAX19QVVJFX18qL25hdmlnYXRvci51c2VyQWdlbnQubWF0Y2gocGF0dGVybik7XG4gIH1cbn1cbnZhciBJRTExT3JMZXNzID0gdXNlckFnZW50KC8oPzpUcmlkZW50LipydlsgOl0/MTFcXC58bXNpZXxpZW1vYmlsZXxXaW5kb3dzIFBob25lKS9pKTtcbnZhciBFZGdlID0gdXNlckFnZW50KC9FZGdlL2kpO1xudmFyIEZpcmVGb3ggPSB1c2VyQWdlbnQoL2ZpcmVmb3gvaSk7XG52YXIgU2FmYXJpID0gdXNlckFnZW50KC9zYWZhcmkvaSkgJiYgIXVzZXJBZ2VudCgvY2hyb21lL2kpICYmICF1c2VyQWdlbnQoL2FuZHJvaWQvaSk7XG52YXIgSU9TID0gdXNlckFnZW50KC9pUChhZHxvZHxob25lKS9pKTtcbnZhciBDaHJvbWVGb3JBbmRyb2lkID0gdXNlckFnZW50KC9jaHJvbWUvaSkgJiYgdXNlckFnZW50KC9hbmRyb2lkL2kpO1xuXG52YXIgY2FwdHVyZU1vZGUgPSB7XG4gIGNhcHR1cmU6IGZhbHNlLFxuICBwYXNzaXZlOiBmYWxzZVxufTtcbmZ1bmN0aW9uIG9uKGVsLCBldmVudCwgZm4pIHtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sICFJRTExT3JMZXNzICYmIGNhcHR1cmVNb2RlKTtcbn1cbmZ1bmN0aW9uIG9mZihlbCwgZXZlbnQsIGZuKSB7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCAhSUUxMU9yTGVzcyAmJiBjYXB0dXJlTW9kZSk7XG59XG5mdW5jdGlvbiBtYXRjaGVzKCAvKipIVE1MRWxlbWVudCovZWwsIC8qKlN0cmluZyovc2VsZWN0b3IpIHtcbiAgaWYgKCFzZWxlY3RvcikgcmV0dXJuO1xuICBzZWxlY3RvclswXSA9PT0gJz4nICYmIChzZWxlY3RvciA9IHNlbGVjdG9yLnN1YnN0cmluZygxKSk7XG4gIGlmIChlbCkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoZWwubWF0Y2hlcykge1xuICAgICAgICByZXR1cm4gZWwubWF0Y2hlcyhzZWxlY3Rvcik7XG4gICAgICB9IGVsc2UgaWYgKGVsLm1zTWF0Y2hlc1NlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9IGVsc2UgaWYgKGVsLndlYmtpdE1hdGNoZXNTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldFBhcmVudE9ySG9zdChlbCkge1xuICByZXR1cm4gZWwuaG9zdCAmJiBlbCAhPT0gZG9jdW1lbnQgJiYgZWwuaG9zdC5ub2RlVHlwZSA/IGVsLmhvc3QgOiBlbC5wYXJlbnROb2RlO1xufVxuZnVuY3Rpb24gY2xvc2VzdCggLyoqSFRNTEVsZW1lbnQqL2VsLCAvKipTdHJpbmcqL3NlbGVjdG9yLCAvKipIVE1MRWxlbWVudCovY3R4LCBpbmNsdWRlQ1RYKSB7XG4gIGlmIChlbCkge1xuICAgIGN0eCA9IGN0eCB8fCBkb2N1bWVudDtcbiAgICBkbyB7XG4gICAgICBpZiAoc2VsZWN0b3IgIT0gbnVsbCAmJiAoc2VsZWN0b3JbMF0gPT09ICc+JyA/IGVsLnBhcmVudE5vZGUgPT09IGN0eCAmJiBtYXRjaGVzKGVsLCBzZWxlY3RvcikgOiBtYXRjaGVzKGVsLCBzZWxlY3RvcikpIHx8IGluY2x1ZGVDVFggJiYgZWwgPT09IGN0eCkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9XG4gICAgICBpZiAoZWwgPT09IGN0eCkgYnJlYWs7XG4gICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG4gICAgfSB3aGlsZSAoZWwgPSBnZXRQYXJlbnRPckhvc3QoZWwpKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbnZhciBSX1NQQUNFID0gL1xccysvZztcbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsLCBuYW1lLCBzdGF0ZSkge1xuICBpZiAoZWwgJiYgbmFtZSkge1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgIGVsLmNsYXNzTGlzdFtzdGF0ZSA/ICdhZGQnIDogJ3JlbW92ZSddKG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gKCcgJyArIGVsLmNsYXNzTmFtZSArICcgJykucmVwbGFjZShSX1NQQUNFLCAnICcpLnJlcGxhY2UoJyAnICsgbmFtZSArICcgJywgJyAnKTtcbiAgICAgIGVsLmNsYXNzTmFtZSA9IChjbGFzc05hbWUgKyAoc3RhdGUgPyAnICcgKyBuYW1lIDogJycpKS5yZXBsYWNlKFJfU1BBQ0UsICcgJyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBjc3MoZWwsIHByb3AsIHZhbCkge1xuICB2YXIgc3R5bGUgPSBlbCAmJiBlbC5zdHlsZTtcbiAgaWYgKHN0eWxlKSB7XG4gICAgaWYgKHZhbCA9PT0gdm9pZCAwKSB7XG4gICAgICBpZiAoZG9jdW1lbnQuZGVmYXVsdFZpZXcgJiYgZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgICAgICB2YWwgPSBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCAnJyk7XG4gICAgICB9IGVsc2UgaWYgKGVsLmN1cnJlbnRTdHlsZSkge1xuICAgICAgICB2YWwgPSBlbC5jdXJyZW50U3R5bGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcCA9PT0gdm9pZCAwID8gdmFsIDogdmFsW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIShwcm9wIGluIHN0eWxlKSAmJiBwcm9wLmluZGV4T2YoJ3dlYmtpdCcpID09PSAtMSkge1xuICAgICAgICBwcm9wID0gJy13ZWJraXQtJyArIHByb3A7XG4gICAgICB9XG4gICAgICBzdHlsZVtwcm9wXSA9IHZhbCArICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/ICcnIDogJ3B4Jyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtYXRyaXgoZWwsIHNlbGZPbmx5KSB7XG4gIHZhciBhcHBsaWVkVHJhbnNmb3JtcyA9ICcnO1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gZWw7XG4gIH0gZWxzZSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IGNzcyhlbCwgJ3RyYW5zZm9ybScpO1xuICAgICAgaWYgKHRyYW5zZm9ybSAmJiB0cmFuc2Zvcm0gIT09ICdub25lJykge1xuICAgICAgICBhcHBsaWVkVHJhbnNmb3JtcyA9IHRyYW5zZm9ybSArICcgJyArIGFwcGxpZWRUcmFuc2Zvcm1zO1xuICAgICAgfVxuICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuICAgIH0gd2hpbGUgKCFzZWxmT25seSAmJiAoZWwgPSBlbC5wYXJlbnROb2RlKSk7XG4gIH1cbiAgdmFyIG1hdHJpeEZuID0gd2luZG93LkRPTU1hdHJpeCB8fCB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4IHx8IHdpbmRvdy5DU1NNYXRyaXggfHwgd2luZG93Lk1TQ1NTTWF0cml4O1xuICAvKmpzaGludCAtVzA1NiAqL1xuICByZXR1cm4gbWF0cml4Rm4gJiYgbmV3IG1hdHJpeEZuKGFwcGxpZWRUcmFuc2Zvcm1zKTtcbn1cbmZ1bmN0aW9uIGZpbmQoY3R4LCB0YWdOYW1lLCBpdGVyYXRvcikge1xuICBpZiAoY3R4KSB7XG4gICAgdmFyIGxpc3QgPSBjdHguZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSksXG4gICAgICBpID0gMCxcbiAgICAgIG4gPSBsaXN0Lmxlbmd0aDtcbiAgICBpZiAoaXRlcmF0b3IpIHtcbiAgICAgIGZvciAoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdG9yKGxpc3RbaV0sIGkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuICByZXR1cm4gW107XG59XG5mdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkge1xuICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQ7XG4gIGlmIChzY3JvbGxpbmdFbGVtZW50KSB7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxufVxuXG4vKipcclxuICogUmV0dXJucyB0aGUgXCJib3VuZGluZyBjbGllbnQgcmVjdFwiIG9mIGdpdmVuIGVsZW1lbnRcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgICAgICAgICAgICAgICAgICBUaGUgZWxlbWVudCB3aG9zZSBib3VuZGluZ0NsaWVudFJlY3QgaXMgd2FudGVkXHJcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gcmVsYXRpdmVUb0NvbnRhaW5pbmdCbG9jayAgV2hldGhlciB0aGUgcmVjdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGNvbnRhaW5pbmcgYmxvY2sgb2YgKGluY2x1ZGluZykgdGhlIGNvbnRhaW5lclxyXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQgIFdoZXRoZXIgdGhlIHJlY3Qgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSByZWxhdGl2ZSBwYXJlbnQgb2YgKGluY2x1ZGluZykgdGhlIGNvbnRhaWVuclxyXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IHVuZG9TY2FsZSAgICAgICAgICAgICAgICAgIFdoZXRoZXIgdGhlIGNvbnRhaW5lcidzIHNjYWxlKCkgc2hvdWxkIGJlIHVuZG9uZVxyXG4gKiBAcGFyYW0gIHtbSFRNTEVsZW1lbnRdfSBjb250YWluZXIgICAgICAgICAgICAgIFRoZSBwYXJlbnQgdGhlIGVsZW1lbnQgd2lsbCBiZSBwbGFjZWQgaW5cclxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgYm91bmRpbmdDbGllbnRSZWN0IG9mIGVsLCB3aXRoIHNwZWNpZmllZCBhZGp1c3RtZW50c1xyXG4gKi9cbmZ1bmN0aW9uIGdldFJlY3QoZWwsIHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2ssIHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQsIHVuZG9TY2FsZSwgY29udGFpbmVyKSB7XG4gIGlmICghZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIGVsICE9PSB3aW5kb3cpIHJldHVybjtcbiAgdmFyIGVsUmVjdCwgdG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0LCBoZWlnaHQsIHdpZHRoO1xuICBpZiAoZWwgIT09IHdpbmRvdyAmJiBlbC5wYXJlbnROb2RlICYmIGVsICE9PSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkpIHtcbiAgICBlbFJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB0b3AgPSBlbFJlY3QudG9wO1xuICAgIGxlZnQgPSBlbFJlY3QubGVmdDtcbiAgICBib3R0b20gPSBlbFJlY3QuYm90dG9tO1xuICAgIHJpZ2h0ID0gZWxSZWN0LnJpZ2h0O1xuICAgIGhlaWdodCA9IGVsUmVjdC5oZWlnaHQ7XG4gICAgd2lkdGggPSBlbFJlY3Qud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gMDtcbiAgICBsZWZ0ID0gMDtcbiAgICBib3R0b20gPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgcmlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgfVxuICBpZiAoKHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2sgfHwgcmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCkgJiYgZWwgIT09IHdpbmRvdykge1xuICAgIC8vIEFkanVzdCBmb3IgdHJhbnNsYXRlKClcbiAgICBjb250YWluZXIgPSBjb250YWluZXIgfHwgZWwucGFyZW50Tm9kZTtcblxuICAgIC8vIHNvbHZlcyAjMTEyMyAoc2VlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzc5NTM4MDYvNjA4ODMxMilcbiAgICAvLyBOb3QgbmVlZGVkIG9uIDw9IElFMTFcbiAgICBpZiAoIUlFMTFPckxlc3MpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIChjc3MoY29udGFpbmVyLCAndHJhbnNmb3JtJykgIT09ICdub25lJyB8fCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50ICYmIGNzcyhjb250YWluZXIsICdwb3NpdGlvbicpICE9PSAnc3RhdGljJykpIHtcbiAgICAgICAgICB2YXIgY29udGFpbmVyUmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgIC8vIFNldCByZWxhdGl2ZSB0byBlZGdlcyBvZiBwYWRkaW5nIGJveCBvZiBjb250YWluZXJcbiAgICAgICAgICB0b3AgLT0gY29udGFpbmVyUmVjdC50b3AgKyBwYXJzZUludChjc3MoY29udGFpbmVyLCAnYm9yZGVyLXRvcC13aWR0aCcpKTtcbiAgICAgICAgICBsZWZ0IC09IGNvbnRhaW5lclJlY3QubGVmdCArIHBhcnNlSW50KGNzcyhjb250YWluZXIsICdib3JkZXItbGVmdC13aWR0aCcpKTtcbiAgICAgICAgICBib3R0b20gPSB0b3AgKyBlbFJlY3QuaGVpZ2h0O1xuICAgICAgICAgIHJpZ2h0ID0gbGVmdCArIGVsUmVjdC53aWR0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG4gICAgICB9IHdoaWxlIChjb250YWluZXIgPSBjb250YWluZXIucGFyZW50Tm9kZSk7XG4gICAgfVxuICB9XG4gIGlmICh1bmRvU2NhbGUgJiYgZWwgIT09IHdpbmRvdykge1xuICAgIC8vIEFkanVzdCBmb3Igc2NhbGUoKVxuICAgIHZhciBlbE1hdHJpeCA9IG1hdHJpeChjb250YWluZXIgfHwgZWwpLFxuICAgICAgc2NhbGVYID0gZWxNYXRyaXggJiYgZWxNYXRyaXguYSxcbiAgICAgIHNjYWxlWSA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmQ7XG4gICAgaWYgKGVsTWF0cml4KSB7XG4gICAgICB0b3AgLz0gc2NhbGVZO1xuICAgICAgbGVmdCAvPSBzY2FsZVg7XG4gICAgICB3aWR0aCAvPSBzY2FsZVg7XG4gICAgICBoZWlnaHQgLz0gc2NhbGVZO1xuICAgICAgYm90dG9tID0gdG9wICsgaGVpZ2h0O1xuICAgICAgcmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdG9wOiB0b3AsXG4gICAgbGVmdDogbGVmdCxcbiAgICBib3R0b206IGJvdHRvbSxcbiAgICByaWdodDogcmlnaHQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG5cbi8qKlxyXG4gKiBDaGVja3MgaWYgYSBzaWRlIG9mIGFuIGVsZW1lbnQgaXMgc2Nyb2xsZWQgcGFzdCBhIHNpZGUgb2YgaXRzIHBhcmVudHNcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbCAgICAgICAgICAgVGhlIGVsZW1lbnQgd2hvJ3Mgc2lkZSBiZWluZyBzY3JvbGxlZCBvdXQgb2YgdmlldyBpcyBpbiBxdWVzdGlvblxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgIGVsU2lkZSAgICAgICBTaWRlIG9mIHRoZSBlbGVtZW50IGluIHF1ZXN0aW9uICgndG9wJywgJ2xlZnQnLCAncmlnaHQnLCAnYm90dG9tJylcclxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICBwYXJlbnRTaWRlICAgU2lkZSBvZiB0aGUgcGFyZW50IGluIHF1ZXN0aW9uICgndG9wJywgJ2xlZnQnLCAncmlnaHQnLCAnYm90dG9tJylcclxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9ICAgICAgICAgICAgICAgVGhlIHBhcmVudCBzY3JvbGwgZWxlbWVudCB0aGF0IHRoZSBlbCdzIHNpZGUgaXMgc2Nyb2xsZWQgcGFzdCwgb3IgbnVsbCBpZiB0aGVyZSBpcyBubyBzdWNoIGVsZW1lbnRcclxuICovXG5mdW5jdGlvbiBpc1Njcm9sbGVkUGFzdChlbCwgZWxTaWRlLCBwYXJlbnRTaWRlKSB7XG4gIHZhciBwYXJlbnQgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbCwgdHJ1ZSksXG4gICAgZWxTaWRlVmFsID0gZ2V0UmVjdChlbClbZWxTaWRlXTtcblxuICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICB2YXIgcGFyZW50U2lkZVZhbCA9IGdldFJlY3QocGFyZW50KVtwYXJlbnRTaWRlXSxcbiAgICAgIHZpc2libGUgPSB2b2lkIDA7XG4gICAgaWYgKHBhcmVudFNpZGUgPT09ICd0b3AnIHx8IHBhcmVudFNpZGUgPT09ICdsZWZ0Jykge1xuICAgICAgdmlzaWJsZSA9IGVsU2lkZVZhbCA+PSBwYXJlbnRTaWRlVmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2aXNpYmxlID0gZWxTaWRlVmFsIDw9IHBhcmVudFNpZGVWYWw7XG4gICAgfVxuICAgIGlmICghdmlzaWJsZSkgcmV0dXJuIHBhcmVudDtcbiAgICBpZiAocGFyZW50ID09PSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkpIGJyZWFrO1xuICAgIHBhcmVudCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KHBhcmVudCwgZmFsc2UpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXHJcbiAqIEdldHMgbnRoIGNoaWxkIG9mIGVsLCBpZ25vcmluZyBoaWRkZW4gY2hpbGRyZW4sIHNvcnRhYmxlJ3MgZWxlbWVudHMgKGRvZXMgbm90IGlnbm9yZSBjbG9uZSBpZiBpdCdzIHZpc2libGUpXHJcbiAqIGFuZCBub24tZHJhZ2dhYmxlIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICAgICBUaGUgcGFyZW50IGVsZW1lbnRcclxuICogQHBhcmFtICB7TnVtYmVyfSBjaGlsZE51bSAgICAgIFRoZSBpbmRleCBvZiB0aGUgY2hpbGRcclxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zICAgICAgIFBhcmVudCBTb3J0YWJsZSdzIG9wdGlvbnNcclxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9ICAgICAgICAgIFRoZSBjaGlsZCBhdCBpbmRleCBjaGlsZE51bSwgb3IgbnVsbCBpZiBub3QgZm91bmRcclxuICovXG5mdW5jdGlvbiBnZXRDaGlsZChlbCwgY2hpbGROdW0sIG9wdGlvbnMsIGluY2x1ZGVEcmFnRWwpIHtcbiAgdmFyIGN1cnJlbnRDaGlsZCA9IDAsXG4gICAgaSA9IDAsXG4gICAgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcbiAgd2hpbGUgKGkgPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBpZiAoY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnICYmIGNoaWxkcmVuW2ldICE9PSBTb3J0YWJsZS5naG9zdCAmJiAoaW5jbHVkZURyYWdFbCB8fCBjaGlsZHJlbltpXSAhPT0gU29ydGFibGUuZHJhZ2dlZCkgJiYgY2xvc2VzdChjaGlsZHJlbltpXSwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsLCBmYWxzZSkpIHtcbiAgICAgIGlmIChjdXJyZW50Q2hpbGQgPT09IGNoaWxkTnVtKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbltpXTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRDaGlsZCsrO1xuICAgIH1cbiAgICBpKys7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxyXG4gKiBHZXRzIHRoZSBsYXN0IGNoaWxkIGluIHRoZSBlbCwgaWdub3JpbmcgZ2hvc3RFbCBvciBpbnZpc2libGUgZWxlbWVudHMgKGNsb25lcylcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgIFBhcmVudCBlbGVtZW50XHJcbiAqIEBwYXJhbSAge3NlbGVjdG9yfSBzZWxlY3RvciAgICBBbnkgb3RoZXIgZWxlbWVudHMgdGhhdCBzaG91bGQgYmUgaWdub3JlZFxyXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICAgICAgICAgVGhlIGxhc3QgY2hpbGQsIGlnbm9yaW5nIGdob3N0RWxcclxuICovXG5mdW5jdGlvbiBsYXN0Q2hpbGQoZWwsIHNlbGVjdG9yKSB7XG4gIHZhciBsYXN0ID0gZWwubGFzdEVsZW1lbnRDaGlsZDtcbiAgd2hpbGUgKGxhc3QgJiYgKGxhc3QgPT09IFNvcnRhYmxlLmdob3N0IHx8IGNzcyhsYXN0LCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgc2VsZWN0b3IgJiYgIW1hdGNoZXMobGFzdCwgc2VsZWN0b3IpKSkge1xuICAgIGxhc3QgPSBsYXN0LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIGxhc3QgfHwgbnVsbDtcbn1cblxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGluZGV4IG9mIGFuIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnQgZm9yIGEgc2VsZWN0ZWQgc2V0IG9mXHJcbiAqIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbFxyXG4gKiBAcGFyYW0gIHtzZWxlY3Rvcn0gc2VsZWN0b3JcclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cbmZ1bmN0aW9uIGluZGV4KGVsLCBzZWxlY3Rvcikge1xuICB2YXIgaW5kZXggPSAwO1xuICBpZiAoIWVsIHx8ICFlbC5wYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuICB3aGlsZSAoZWwgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgaWYgKGVsLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgIT09ICdURU1QTEFURScgJiYgZWwgIT09IFNvcnRhYmxlLmNsb25lICYmICghc2VsZWN0b3IgfHwgbWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSkge1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufVxuXG4vKipcclxuICogUmV0dXJucyB0aGUgc2Nyb2xsIG9mZnNldCBvZiB0aGUgZ2l2ZW4gZWxlbWVudCwgYWRkZWQgd2l0aCBhbGwgdGhlIHNjcm9sbCBvZmZzZXRzIG9mIHBhcmVudCBlbGVtZW50cy5cclxuICogVGhlIHZhbHVlIGlzIHJldHVybmVkIGluIHJlYWwgcGl4ZWxzLlxyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWxcclxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICAgIE9mZnNldHMgaW4gdGhlIGZvcm1hdCBvZiBbbGVmdCwgdG9wXVxyXG4gKi9cbmZ1bmN0aW9uIGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGVsKSB7XG4gIHZhciBvZmZzZXRMZWZ0ID0gMCxcbiAgICBvZmZzZXRUb3AgPSAwLFxuICAgIHdpblNjcm9sbGVyID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICBpZiAoZWwpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgZWxNYXRyaXggPSBtYXRyaXgoZWwpLFxuICAgICAgICBzY2FsZVggPSBlbE1hdHJpeC5hLFxuICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeC5kO1xuICAgICAgb2Zmc2V0TGVmdCArPSBlbC5zY3JvbGxMZWZ0ICogc2NhbGVYO1xuICAgICAgb2Zmc2V0VG9wICs9IGVsLnNjcm9sbFRvcCAqIHNjYWxlWTtcbiAgICB9IHdoaWxlIChlbCAhPT0gd2luU2Nyb2xsZXIgJiYgKGVsID0gZWwucGFyZW50Tm9kZSkpO1xuICB9XG4gIHJldHVybiBbb2Zmc2V0TGVmdCwgb2Zmc2V0VG9wXTtcbn1cblxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBvYmplY3Qgd2l0aGluIHRoZSBnaXZlbiBhcnJheVxyXG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyICAgQXJyYXkgdGhhdCBtYXkgb3IgbWF5IG5vdCBob2xkIHRoZSBvYmplY3RcclxuICogQHBhcmFtICB7T2JqZWN0fSBvYmogIEFuIG9iamVjdCB0aGF0IGhhcyBhIGtleS12YWx1ZSBwYWlyIHVuaXF1ZSB0byBhbmQgaWRlbnRpY2FsIHRvIGEga2V5LXZhbHVlIHBhaXIgaW4gdGhlIG9iamVjdCB5b3Ugd2FudCB0byBmaW5kXHJcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICBUaGUgaW5kZXggb2YgdGhlIG9iamVjdCBpbiB0aGUgYXJyYXksIG9yIC0xXHJcbiAqL1xuZnVuY3Rpb24gaW5kZXhPZk9iamVjdChhcnIsIG9iaikge1xuICBmb3IgKHZhciBpIGluIGFycikge1xuICAgIGlmICghYXJyLmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkgJiYgb2JqW2tleV0gPT09IGFycltpXVtrZXldKSByZXR1cm4gTnVtYmVyKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5mdW5jdGlvbiBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbCwgaW5jbHVkZVNlbGYpIHtcbiAgLy8gc2tpcCB0byB3aW5kb3dcbiAgaWYgKCFlbCB8fCAhZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICB2YXIgZWxlbSA9IGVsO1xuICB2YXIgZ290U2VsZiA9IGZhbHNlO1xuICBkbyB7XG4gICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBnZXQgZWxlbSBjc3MgaWYgaXQgaXNuJ3QgZXZlbiBvdmVyZmxvd2luZyBpbiB0aGUgZmlyc3QgcGxhY2UgKHBlcmZvcm1hbmNlKVxuICAgIGlmIChlbGVtLmNsaWVudFdpZHRoIDwgZWxlbS5zY3JvbGxXaWR0aCB8fCBlbGVtLmNsaWVudEhlaWdodCA8IGVsZW0uc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB2YXIgZWxlbUNTUyA9IGNzcyhlbGVtKTtcbiAgICAgIGlmIChlbGVtLmNsaWVudFdpZHRoIDwgZWxlbS5zY3JvbGxXaWR0aCAmJiAoZWxlbUNTUy5vdmVyZmxvd1ggPT0gJ2F1dG8nIHx8IGVsZW1DU1Mub3ZlcmZsb3dYID09ICdzY3JvbGwnKSB8fCBlbGVtLmNsaWVudEhlaWdodCA8IGVsZW0uc2Nyb2xsSGVpZ2h0ICYmIChlbGVtQ1NTLm92ZXJmbG93WSA9PSAnYXV0bycgfHwgZWxlbUNTUy5vdmVyZmxvd1kgPT0gJ3Njcm9sbCcpKSB7XG4gICAgICAgIGlmICghZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgfHwgZWxlbSA9PT0gZG9jdW1lbnQuYm9keSkgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgICAgICAgaWYgKGdvdFNlbGYgfHwgaW5jbHVkZVNlbGYpIHJldHVybiBlbGVtO1xuICAgICAgICBnb3RTZWxmID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuICB9IHdoaWxlIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKTtcbiAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZChkc3QsIHNyYykge1xuICBpZiAoZHN0ICYmIHNyYykge1xuICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICAgIGlmIChzcmMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBkc3Rba2V5XSA9IHNyY1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZHN0O1xufVxuZnVuY3Rpb24gaXNSZWN0RXF1YWwocmVjdDEsIHJlY3QyKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHJlY3QxLnRvcCkgPT09IE1hdGgucm91bmQocmVjdDIudG9wKSAmJiBNYXRoLnJvdW5kKHJlY3QxLmxlZnQpID09PSBNYXRoLnJvdW5kKHJlY3QyLmxlZnQpICYmIE1hdGgucm91bmQocmVjdDEuaGVpZ2h0KSA9PT0gTWF0aC5yb3VuZChyZWN0Mi5oZWlnaHQpICYmIE1hdGgucm91bmQocmVjdDEud2lkdGgpID09PSBNYXRoLnJvdW5kKHJlY3QyLndpZHRoKTtcbn1cbnZhciBfdGhyb3R0bGVUaW1lb3V0O1xuZnVuY3Rpb24gdGhyb3R0bGUoY2FsbGJhY2ssIG1zKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfdGhyb3R0bGVUaW1lb3V0KSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwoX3RoaXMsIGFyZ3NbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2suYXBwbHkoX3RoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgX3Rocm90dGxlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhyb3R0bGVUaW1lb3V0ID0gdm9pZCAwO1xuICAgICAgfSwgbXMpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNhbmNlbFRocm90dGxlKCkge1xuICBjbGVhclRpbWVvdXQoX3Rocm90dGxlVGltZW91dCk7XG4gIF90aHJvdHRsZVRpbWVvdXQgPSB2b2lkIDA7XG59XG5mdW5jdGlvbiBzY3JvbGxCeShlbCwgeCwgeSkge1xuICBlbC5zY3JvbGxMZWZ0ICs9IHg7XG4gIGVsLnNjcm9sbFRvcCArPSB5O1xufVxuZnVuY3Rpb24gY2xvbmUoZWwpIHtcbiAgdmFyIFBvbHltZXIgPSB3aW5kb3cuUG9seW1lcjtcbiAgdmFyICQgPSB3aW5kb3cualF1ZXJ5IHx8IHdpbmRvdy5aZXB0bztcbiAgaWYgKFBvbHltZXIgJiYgUG9seW1lci5kb20pIHtcbiAgICByZXR1cm4gUG9seW1lci5kb20oZWwpLmNsb25lTm9kZSh0cnVlKTtcbiAgfSBlbHNlIGlmICgkKSB7XG4gICAgcmV0dXJuICQoZWwpLmNsb25lKHRydWUpWzBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbC5jbG9uZU5vZGUodHJ1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFJlY3QoZWwsIHJlY3QpIHtcbiAgY3NzKGVsLCAncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgY3NzKGVsLCAndG9wJywgcmVjdC50b3ApO1xuICBjc3MoZWwsICdsZWZ0JywgcmVjdC5sZWZ0KTtcbiAgY3NzKGVsLCAnd2lkdGgnLCByZWN0LndpZHRoKTtcbiAgY3NzKGVsLCAnaGVpZ2h0JywgcmVjdC5oZWlnaHQpO1xufVxuZnVuY3Rpb24gdW5zZXRSZWN0KGVsKSB7XG4gIGNzcyhlbCwgJ3Bvc2l0aW9uJywgJycpO1xuICBjc3MoZWwsICd0b3AnLCAnJyk7XG4gIGNzcyhlbCwgJ2xlZnQnLCAnJyk7XG4gIGNzcyhlbCwgJ3dpZHRoJywgJycpO1xuICBjc3MoZWwsICdoZWlnaHQnLCAnJyk7XG59XG5mdW5jdGlvbiBnZXRDaGlsZENvbnRhaW5pbmdSZWN0RnJvbUVsZW1lbnQoY29udGFpbmVyLCBvcHRpb25zLCBnaG9zdEVsKSB7XG4gIHZhciByZWN0ID0ge307XG4gIEFycmF5LmZyb20oY29udGFpbmVyLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHZhciBfcmVjdCRsZWZ0LCBfcmVjdCR0b3AsIF9yZWN0JHJpZ2h0LCBfcmVjdCRib3R0b207XG4gICAgaWYgKCFjbG9zZXN0KGNoaWxkLCBvcHRpb25zLmRyYWdnYWJsZSwgY29udGFpbmVyLCBmYWxzZSkgfHwgY2hpbGQuYW5pbWF0ZWQgfHwgY2hpbGQgPT09IGdob3N0RWwpIHJldHVybjtcbiAgICB2YXIgY2hpbGRSZWN0ID0gZ2V0UmVjdChjaGlsZCk7XG4gICAgcmVjdC5sZWZ0ID0gTWF0aC5taW4oKF9yZWN0JGxlZnQgPSByZWN0LmxlZnQpICE9PSBudWxsICYmIF9yZWN0JGxlZnQgIT09IHZvaWQgMCA/IF9yZWN0JGxlZnQgOiBJbmZpbml0eSwgY2hpbGRSZWN0LmxlZnQpO1xuICAgIHJlY3QudG9wID0gTWF0aC5taW4oKF9yZWN0JHRvcCA9IHJlY3QudG9wKSAhPT0gbnVsbCAmJiBfcmVjdCR0b3AgIT09IHZvaWQgMCA/IF9yZWN0JHRvcCA6IEluZmluaXR5LCBjaGlsZFJlY3QudG9wKTtcbiAgICByZWN0LnJpZ2h0ID0gTWF0aC5tYXgoKF9yZWN0JHJpZ2h0ID0gcmVjdC5yaWdodCkgIT09IG51bGwgJiYgX3JlY3QkcmlnaHQgIT09IHZvaWQgMCA/IF9yZWN0JHJpZ2h0IDogLUluZmluaXR5LCBjaGlsZFJlY3QucmlnaHQpO1xuICAgIHJlY3QuYm90dG9tID0gTWF0aC5tYXgoKF9yZWN0JGJvdHRvbSA9IHJlY3QuYm90dG9tKSAhPT0gbnVsbCAmJiBfcmVjdCRib3R0b20gIT09IHZvaWQgMCA/IF9yZWN0JGJvdHRvbSA6IC1JbmZpbml0eSwgY2hpbGRSZWN0LmJvdHRvbSk7XG4gIH0pO1xuICByZWN0LndpZHRoID0gcmVjdC5yaWdodCAtIHJlY3QubGVmdDtcbiAgcmVjdC5oZWlnaHQgPSByZWN0LmJvdHRvbSAtIHJlY3QudG9wO1xuICByZWN0LnggPSByZWN0LmxlZnQ7XG4gIHJlY3QueSA9IHJlY3QudG9wO1xuICByZXR1cm4gcmVjdDtcbn1cbnZhciBleHBhbmRvID0gJ1NvcnRhYmxlJyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG5mdW5jdGlvbiBBbmltYXRpb25TdGF0ZU1hbmFnZXIoKSB7XG4gIHZhciBhbmltYXRpb25TdGF0ZXMgPSBbXSxcbiAgICBhbmltYXRpb25DYWxsYmFja0lkO1xuICByZXR1cm4ge1xuICAgIGNhcHR1cmVBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gY2FwdHVyZUFuaW1hdGlvblN0YXRlKCkge1xuICAgICAgYW5pbWF0aW9uU3RhdGVzID0gW107XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbmltYXRpb24pIHJldHVybjtcbiAgICAgIHZhciBjaGlsZHJlbiA9IFtdLnNsaWNlLmNhbGwodGhpcy5lbC5jaGlsZHJlbik7XG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY3NzKGNoaWxkLCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgY2hpbGQgPT09IFNvcnRhYmxlLmdob3N0KSByZXR1cm47XG4gICAgICAgIGFuaW1hdGlvblN0YXRlcy5wdXNoKHtcbiAgICAgICAgICB0YXJnZXQ6IGNoaWxkLFxuICAgICAgICAgIHJlY3Q6IGdldFJlY3QoY2hpbGQpXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZnJvbVJlY3QgPSBfb2JqZWN0U3ByZWFkMih7fSwgYW5pbWF0aW9uU3RhdGVzW2FuaW1hdGlvblN0YXRlcy5sZW5ndGggLSAxXS5yZWN0KTtcblxuICAgICAgICAvLyBJZiBhbmltYXRpbmc6IGNvbXBlbnNhdGUgZm9yIGN1cnJlbnQgYW5pbWF0aW9uXG4gICAgICAgIGlmIChjaGlsZC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICB2YXIgY2hpbGRNYXRyaXggPSBtYXRyaXgoY2hpbGQsIHRydWUpO1xuICAgICAgICAgIGlmIChjaGlsZE1hdHJpeCkge1xuICAgICAgICAgICAgZnJvbVJlY3QudG9wIC09IGNoaWxkTWF0cml4LmY7XG4gICAgICAgICAgICBmcm9tUmVjdC5sZWZ0IC09IGNoaWxkTWF0cml4LmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoaWxkLmZyb21SZWN0ID0gZnJvbVJlY3Q7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGFkZEFuaW1hdGlvblN0YXRlOiBmdW5jdGlvbiBhZGRBbmltYXRpb25TdGF0ZShzdGF0ZSkge1xuICAgICAgYW5pbWF0aW9uU3RhdGVzLnB1c2goc3RhdGUpO1xuICAgIH0sXG4gICAgcmVtb3ZlQW5pbWF0aW9uU3RhdGU6IGZ1bmN0aW9uIHJlbW92ZUFuaW1hdGlvblN0YXRlKHRhcmdldCkge1xuICAgICAgYW5pbWF0aW9uU3RhdGVzLnNwbGljZShpbmRleE9mT2JqZWN0KGFuaW1hdGlvblN0YXRlcywge1xuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSksIDEpO1xuICAgIH0sXG4gICAgYW5pbWF0ZUFsbDogZnVuY3Rpb24gYW5pbWF0ZUFsbChjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICBjbGVhclRpbWVvdXQoYW5pbWF0aW9uQ2FsbGJhY2tJZCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBhbmltYXRpbmcgPSBmYWxzZSxcbiAgICAgICAgYW5pbWF0aW9uVGltZSA9IDA7XG4gICAgICBhbmltYXRpb25TdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIHRpbWUgPSAwLFxuICAgICAgICAgIHRhcmdldCA9IHN0YXRlLnRhcmdldCxcbiAgICAgICAgICBmcm9tUmVjdCA9IHRhcmdldC5mcm9tUmVjdCxcbiAgICAgICAgICB0b1JlY3QgPSBnZXRSZWN0KHRhcmdldCksXG4gICAgICAgICAgcHJldkZyb21SZWN0ID0gdGFyZ2V0LnByZXZGcm9tUmVjdCxcbiAgICAgICAgICBwcmV2VG9SZWN0ID0gdGFyZ2V0LnByZXZUb1JlY3QsXG4gICAgICAgICAgYW5pbWF0aW5nUmVjdCA9IHN0YXRlLnJlY3QsXG4gICAgICAgICAgdGFyZ2V0TWF0cml4ID0gbWF0cml4KHRhcmdldCwgdHJ1ZSk7XG4gICAgICAgIGlmICh0YXJnZXRNYXRyaXgpIHtcbiAgICAgICAgICAvLyBDb21wZW5zYXRlIGZvciBjdXJyZW50IGFuaW1hdGlvblxuICAgICAgICAgIHRvUmVjdC50b3AgLT0gdGFyZ2V0TWF0cml4LmY7XG4gICAgICAgICAgdG9SZWN0LmxlZnQgLT0gdGFyZ2V0TWF0cml4LmU7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0LnRvUmVjdCA9IHRvUmVjdDtcbiAgICAgICAgaWYgKHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICAvLyBDb3VsZCBhbHNvIGNoZWNrIGlmIGFuaW1hdGluZ1JlY3QgaXMgYmV0d2VlbiBmcm9tUmVjdCBhbmQgdG9SZWN0XG4gICAgICAgICAgaWYgKGlzUmVjdEVxdWFsKHByZXZGcm9tUmVjdCwgdG9SZWN0KSAmJiAhaXNSZWN0RXF1YWwoZnJvbVJlY3QsIHRvUmVjdCkgJiZcbiAgICAgICAgICAvLyBNYWtlIHN1cmUgYW5pbWF0aW5nUmVjdCBpcyBvbiBsaW5lIGJldHdlZW4gdG9SZWN0ICYgZnJvbVJlY3RcbiAgICAgICAgICAoYW5pbWF0aW5nUmVjdC50b3AgLSB0b1JlY3QudG9wKSAvIChhbmltYXRpbmdSZWN0LmxlZnQgLSB0b1JlY3QubGVmdCkgPT09IChmcm9tUmVjdC50b3AgLSB0b1JlY3QudG9wKSAvIChmcm9tUmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQpKSB7XG4gICAgICAgICAgICAvLyBJZiByZXR1cm5pbmcgdG8gc2FtZSBwbGFjZSBhcyBzdGFydGVkIGZyb20gYW5pbWF0aW9uIGFuZCBvbiBzYW1lIGF4aXNcbiAgICAgICAgICAgIHRpbWUgPSBjYWxjdWxhdGVSZWFsVGltZShhbmltYXRpbmdSZWN0LCBwcmV2RnJvbVJlY3QsIHByZXZUb1JlY3QsIF90aGlzLm9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIGZyb21SZWN0ICE9IHRvUmVjdDogYW5pbWF0ZVxuICAgICAgICBpZiAoIWlzUmVjdEVxdWFsKHRvUmVjdCwgZnJvbVJlY3QpKSB7XG4gICAgICAgICAgdGFyZ2V0LnByZXZGcm9tUmVjdCA9IGZyb21SZWN0O1xuICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gdG9SZWN0O1xuICAgICAgICAgIGlmICghdGltZSkge1xuICAgICAgICAgICAgdGltZSA9IF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpcy5hbmltYXRlKHRhcmdldCwgYW5pbWF0aW5nUmVjdCwgdG9SZWN0LCB0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZSkge1xuICAgICAgICAgIGFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgYW5pbWF0aW9uVGltZSA9IE1hdGgubWF4KGFuaW1hdGlvblRpbWUsIHRpbWUpO1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0aW9uUmVzZXRUaW1lcik7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGlvblJlc2V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRhcmdldC5hbmltYXRpb25UaW1lID0gMDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2RnJvbVJlY3QgPSBudWxsO1xuICAgICAgICAgICAgdGFyZ2V0LmZyb21SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgIH0sIHRpbWUpO1xuICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSB0aW1lO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNsZWFyVGltZW91dChhbmltYXRpb25DYWxsYmFja0lkKTtcbiAgICAgIGlmICghYW5pbWF0aW5nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmltYXRpb25DYWxsYmFja0lkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICAgICAgfSwgYW5pbWF0aW9uVGltZSk7XG4gICAgICB9XG4gICAgICBhbmltYXRpb25TdGF0ZXMgPSBbXTtcbiAgICB9LFxuICAgIGFuaW1hdGU6IGZ1bmN0aW9uIGFuaW1hdGUodGFyZ2V0LCBjdXJyZW50UmVjdCwgdG9SZWN0LCBkdXJhdGlvbikge1xuICAgICAgaWYgKGR1cmF0aW9uKSB7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJycpO1xuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJycpO1xuICAgICAgICB2YXIgZWxNYXRyaXggPSBtYXRyaXgodGhpcy5lbCksXG4gICAgICAgICAgc2NhbGVYID0gZWxNYXRyaXggJiYgZWxNYXRyaXguYSxcbiAgICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeCAmJiBlbE1hdHJpeC5kLFxuICAgICAgICAgIHRyYW5zbGF0ZVggPSAoY3VycmVudFJlY3QubGVmdCAtIHRvUmVjdC5sZWZ0KSAvIChzY2FsZVggfHwgMSksXG4gICAgICAgICAgdHJhbnNsYXRlWSA9IChjdXJyZW50UmVjdC50b3AgLSB0b1JlY3QudG9wKSAvIChzY2FsZVkgfHwgMSk7XG4gICAgICAgIHRhcmdldC5hbmltYXRpbmdYID0gISF0cmFuc2xhdGVYO1xuICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWSA9ICEhdHJhbnNsYXRlWTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgnICsgdHJhbnNsYXRlWCArICdweCwnICsgdHJhbnNsYXRlWSArICdweCwwKScpO1xuICAgICAgICB0aGlzLmZvclJlcGFpbnREdW1teSA9IHJlcGFpbnQodGFyZ2V0KTsgLy8gcmVwYWludFxuXG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJ3RyYW5zZm9ybSAnICsgZHVyYXRpb24gKyAnbXMnICsgKHRoaXMub3B0aW9ucy5lYXNpbmcgPyAnICcgKyB0aGlzLm9wdGlvbnMuZWFzaW5nIDogJycpKTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgwLDAsMCknKTtcbiAgICAgICAgdHlwZW9mIHRhcmdldC5hbmltYXRlZCA9PT0gJ251bWJlcicgJiYgY2xlYXJUaW1lb3V0KHRhcmdldC5hbmltYXRlZCk7XG4gICAgICAgIHRhcmdldC5hbmltYXRlZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJycpO1xuICAgICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGVkID0gZmFsc2U7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1ggPSBmYWxzZTtcbiAgICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWSA9IGZhbHNlO1xuICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gcmVwYWludCh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5vZmZzZXRXaWR0aDtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZVJlYWxUaW1lKGFuaW1hdGluZ1JlY3QsIGZyb21SZWN0LCB0b1JlY3QsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhmcm9tUmVjdC50b3AgLSBhbmltYXRpbmdSZWN0LnRvcCwgMikgKyBNYXRoLnBvdyhmcm9tUmVjdC5sZWZ0IC0gYW5pbWF0aW5nUmVjdC5sZWZ0LCAyKSkgLyBNYXRoLnNxcnQoTWF0aC5wb3coZnJvbVJlY3QudG9wIC0gdG9SZWN0LnRvcCwgMikgKyBNYXRoLnBvdyhmcm9tUmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQsIDIpKSAqIG9wdGlvbnMuYW5pbWF0aW9uO1xufVxuXG52YXIgcGx1Z2lucyA9IFtdO1xudmFyIGRlZmF1bHRzID0ge1xuICBpbml0aWFsaXplQnlEZWZhdWx0OiB0cnVlXG59O1xudmFyIFBsdWdpbk1hbmFnZXIgPSB7XG4gIG1vdW50OiBmdW5jdGlvbiBtb3VudChwbHVnaW4pIHtcbiAgICAvLyBTZXQgZGVmYXVsdCBzdGF0aWMgcHJvcGVydGllc1xuICAgIGZvciAodmFyIG9wdGlvbiBpbiBkZWZhdWx0cykge1xuICAgICAgaWYgKGRlZmF1bHRzLmhhc093blByb3BlcnR5KG9wdGlvbikgJiYgIShvcHRpb24gaW4gcGx1Z2luKSkge1xuICAgICAgICBwbHVnaW5bb3B0aW9uXSA9IGRlZmF1bHRzW29wdGlvbl07XG4gICAgICB9XG4gICAgfVxuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgaWYgKHAucGx1Z2luTmFtZSA9PT0gcGx1Z2luLnBsdWdpbk5hbWUpIHtcbiAgICAgICAgdGhyb3cgXCJTb3J0YWJsZTogQ2Fubm90IG1vdW50IHBsdWdpbiBcIi5jb25jYXQocGx1Z2luLnBsdWdpbk5hbWUsIFwiIG1vcmUgdGhhbiBvbmNlXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHBsdWdpbnMucHVzaChwbHVnaW4pO1xuICB9LFxuICBwbHVnaW5FdmVudDogZnVuY3Rpb24gcGx1Z2luRXZlbnQoZXZlbnROYW1lLCBzb3J0YWJsZSwgZXZ0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLmV2ZW50Q2FuY2VsZWQgPSBmYWxzZTtcbiAgICBldnQuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuZXZlbnRDYW5jZWxlZCA9IHRydWU7XG4gICAgfTtcbiAgICB2YXIgZXZlbnROYW1lR2xvYmFsID0gZXZlbnROYW1lICsgJ0dsb2JhbCc7XG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIGlmICghc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdKSByZXR1cm47XG4gICAgICAvLyBGaXJlIGdsb2JhbCBldmVudHMgaWYgaXQgZXhpc3RzIGluIHRoaXMgc29ydGFibGVcbiAgICAgIGlmIChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lR2xvYmFsXSkge1xuICAgICAgICBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lR2xvYmFsXShfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlXG4gICAgICAgIH0sIGV2dCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBPbmx5IGZpcmUgcGx1Z2luIGV2ZW50IGlmIHBsdWdpbiBpcyBlbmFibGVkIGluIHRoaXMgc29ydGFibGUsXG4gICAgICAvLyBhbmQgcGx1Z2luIGhhcyBldmVudCBkZWZpbmVkXG4gICAgICBpZiAoc29ydGFibGUub3B0aW9uc1twbHVnaW4ucGx1Z2luTmFtZV0gJiYgc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZV0oX29iamVjdFNwcmVhZDIoe1xuICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZVxuICAgICAgICB9LCBldnQpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgaW5pdGlhbGl6ZVBsdWdpbnM6IGZ1bmN0aW9uIGluaXRpYWxpemVQbHVnaW5zKHNvcnRhYmxlLCBlbCwgZGVmYXVsdHMsIG9wdGlvbnMpIHtcbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgdmFyIHBsdWdpbk5hbWUgPSBwbHVnaW4ucGx1Z2luTmFtZTtcbiAgICAgIGlmICghc29ydGFibGUub3B0aW9uc1twbHVnaW5OYW1lXSAmJiAhcGx1Z2luLmluaXRpYWxpemVCeURlZmF1bHQpIHJldHVybjtcbiAgICAgIHZhciBpbml0aWFsaXplZCA9IG5ldyBwbHVnaW4oc29ydGFibGUsIGVsLCBzb3J0YWJsZS5vcHRpb25zKTtcbiAgICAgIGluaXRpYWxpemVkLnNvcnRhYmxlID0gc29ydGFibGU7XG4gICAgICBpbml0aWFsaXplZC5vcHRpb25zID0gc29ydGFibGUub3B0aW9ucztcbiAgICAgIHNvcnRhYmxlW3BsdWdpbk5hbWVdID0gaW5pdGlhbGl6ZWQ7XG5cbiAgICAgIC8vIEFkZCBkZWZhdWx0IG9wdGlvbnMgZnJvbSBwbHVnaW5cbiAgICAgIF9leHRlbmRzKGRlZmF1bHRzLCBpbml0aWFsaXplZC5kZWZhdWx0cyk7XG4gICAgfSk7XG4gICAgZm9yICh2YXIgb3B0aW9uIGluIHNvcnRhYmxlLm9wdGlvbnMpIHtcbiAgICAgIGlmICghc29ydGFibGUub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pKSBjb250aW51ZTtcbiAgICAgIHZhciBtb2RpZmllZCA9IHRoaXMubW9kaWZ5T3B0aW9uKHNvcnRhYmxlLCBvcHRpb24sIHNvcnRhYmxlLm9wdGlvbnNbb3B0aW9uXSk7XG4gICAgICBpZiAodHlwZW9mIG1vZGlmaWVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzb3J0YWJsZS5vcHRpb25zW29wdGlvbl0gPSBtb2RpZmllZDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGdldEV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZ2V0RXZlbnRQcm9wZXJ0aWVzKG5hbWUsIHNvcnRhYmxlKSB7XG4gICAgdmFyIGV2ZW50UHJvcGVydGllcyA9IHt9O1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICBpZiAodHlwZW9mIHBsdWdpbi5ldmVudFByb3BlcnRpZXMgIT09ICdmdW5jdGlvbicpIHJldHVybjtcbiAgICAgIF9leHRlbmRzKGV2ZW50UHJvcGVydGllcywgcGx1Z2luLmV2ZW50UHJvcGVydGllcy5jYWxsKHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSwgbmFtZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBldmVudFByb3BlcnRpZXM7XG4gIH0sXG4gIG1vZGlmeU9wdGlvbjogZnVuY3Rpb24gbW9kaWZ5T3B0aW9uKHNvcnRhYmxlLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBtb2RpZmllZFZhbHVlO1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICAvLyBQbHVnaW4gbXVzdCBleGlzdCBvbiB0aGUgU29ydGFibGVcbiAgICAgIGlmICghc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdKSByZXR1cm47XG5cbiAgICAgIC8vIElmIHN0YXRpYyBvcHRpb24gbGlzdGVuZXIgZXhpc3RzIGZvciB0aGlzIG9wdGlvbiwgY2FsbCBpbiB0aGUgY29udGV4dCBvZiB0aGUgU29ydGFibGUncyBpbnN0YW5jZSBvZiB0aGlzIHBsdWdpblxuICAgICAgaWYgKHBsdWdpbi5vcHRpb25MaXN0ZW5lcnMgJiYgdHlwZW9mIHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbW9kaWZpZWRWYWx1ZSA9IHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0uY2FsbChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbW9kaWZpZWRWYWx1ZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChfcmVmKSB7XG4gIHZhciBzb3J0YWJsZSA9IF9yZWYuc29ydGFibGUsXG4gICAgcm9vdEVsID0gX3JlZi5yb290RWwsXG4gICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICB0YXJnZXRFbCA9IF9yZWYudGFyZ2V0RWwsXG4gICAgY2xvbmVFbCA9IF9yZWYuY2xvbmVFbCxcbiAgICB0b0VsID0gX3JlZi50b0VsLFxuICAgIGZyb21FbCA9IF9yZWYuZnJvbUVsLFxuICAgIG9sZEluZGV4ID0gX3JlZi5vbGRJbmRleCxcbiAgICBuZXdJbmRleCA9IF9yZWYubmV3SW5kZXgsXG4gICAgb2xkRHJhZ2dhYmxlSW5kZXggPSBfcmVmLm9sZERyYWdnYWJsZUluZGV4LFxuICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gX3JlZi5uZXdEcmFnZ2FibGVJbmRleCxcbiAgICBvcmlnaW5hbEV2ZW50ID0gX3JlZi5vcmlnaW5hbEV2ZW50LFxuICAgIHB1dFNvcnRhYmxlID0gX3JlZi5wdXRTb3J0YWJsZSxcbiAgICBleHRyYUV2ZW50UHJvcGVydGllcyA9IF9yZWYuZXh0cmFFdmVudFByb3BlcnRpZXM7XG4gIHNvcnRhYmxlID0gc29ydGFibGUgfHwgcm9vdEVsICYmIHJvb3RFbFtleHBhbmRvXTtcbiAgaWYgKCFzb3J0YWJsZSkgcmV0dXJuO1xuICB2YXIgZXZ0LFxuICAgIG9wdGlvbnMgPSBzb3J0YWJsZS5vcHRpb25zLFxuICAgIG9uTmFtZSA9ICdvbicgKyBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSk7XG4gIC8vIFN1cHBvcnQgZm9yIG5ldyBDdXN0b21FdmVudCBmZWF0dXJlXG4gIGlmICh3aW5kb3cuQ3VzdG9tRXZlbnQgJiYgIUlFMTFPckxlc3MgJiYgIUVkZ2UpIHtcbiAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQobmFtZSwge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldnQuaW5pdEV2ZW50KG5hbWUsIHRydWUsIHRydWUpO1xuICB9XG4gIGV2dC50byA9IHRvRWwgfHwgcm9vdEVsO1xuICBldnQuZnJvbSA9IGZyb21FbCB8fCByb290RWw7XG4gIGV2dC5pdGVtID0gdGFyZ2V0RWwgfHwgcm9vdEVsO1xuICBldnQuY2xvbmUgPSBjbG9uZUVsO1xuICBldnQub2xkSW5kZXggPSBvbGRJbmRleDtcbiAgZXZ0Lm5ld0luZGV4ID0gbmV3SW5kZXg7XG4gIGV2dC5vbGREcmFnZ2FibGVJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICBldnQubmV3RHJhZ2dhYmxlSW5kZXggPSBuZXdEcmFnZ2FibGVJbmRleDtcbiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICBldnQucHVsbE1vZGUgPSBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLmxhc3RQdXRNb2RlIDogdW5kZWZpbmVkO1xuICB2YXIgYWxsRXZlbnRQcm9wZXJ0aWVzID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGV4dHJhRXZlbnRQcm9wZXJ0aWVzKSwgUGx1Z2luTWFuYWdlci5nZXRFdmVudFByb3BlcnRpZXMobmFtZSwgc29ydGFibGUpKTtcbiAgZm9yICh2YXIgb3B0aW9uIGluIGFsbEV2ZW50UHJvcGVydGllcykge1xuICAgIGV2dFtvcHRpb25dID0gYWxsRXZlbnRQcm9wZXJ0aWVzW29wdGlvbl07XG4gIH1cbiAgaWYgKHJvb3RFbCkge1xuICAgIHJvb3RFbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gIH1cbiAgaWYgKG9wdGlvbnNbb25OYW1lXSkge1xuICAgIG9wdGlvbnNbb25OYW1lXS5jYWxsKHNvcnRhYmxlLCBldnQpO1xuICB9XG59XG5cbnZhciBfZXhjbHVkZWQgPSBbXCJldnRcIl07XG52YXIgcGx1Z2luRXZlbnQgPSBmdW5jdGlvbiBwbHVnaW5FdmVudChldmVudE5hbWUsIHNvcnRhYmxlKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSxcbiAgICBvcmlnaW5hbEV2ZW50ID0gX3JlZi5ldnQsXG4gICAgZGF0YSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBfZXhjbHVkZWQpO1xuICBQbHVnaW5NYW5hZ2VyLnBsdWdpbkV2ZW50LmJpbmQoU29ydGFibGUpKGV2ZW50TmFtZSwgc29ydGFibGUsIF9vYmplY3RTcHJlYWQyKHtcbiAgICBkcmFnRWw6IGRyYWdFbCxcbiAgICBwYXJlbnRFbDogcGFyZW50RWwsXG4gICAgZ2hvc3RFbDogZ2hvc3RFbCxcbiAgICByb290RWw6IHJvb3RFbCxcbiAgICBuZXh0RWw6IG5leHRFbCxcbiAgICBsYXN0RG93bkVsOiBsYXN0RG93bkVsLFxuICAgIGNsb25lRWw6IGNsb25lRWwsXG4gICAgY2xvbmVIaWRkZW46IGNsb25lSGlkZGVuLFxuICAgIGRyYWdTdGFydGVkOiBtb3ZlZCxcbiAgICBwdXRTb3J0YWJsZTogcHV0U29ydGFibGUsXG4gICAgYWN0aXZlU29ydGFibGU6IFNvcnRhYmxlLmFjdGl2ZSxcbiAgICBvcmlnaW5hbEV2ZW50OiBvcmlnaW5hbEV2ZW50LFxuICAgIG9sZEluZGV4OiBvbGRJbmRleCxcbiAgICBvbGREcmFnZ2FibGVJbmRleDogb2xkRHJhZ2dhYmxlSW5kZXgsXG4gICAgbmV3SW5kZXg6IG5ld0luZGV4LFxuICAgIG5ld0RyYWdnYWJsZUluZGV4OiBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICBoaWRlR2hvc3RGb3JUYXJnZXQ6IF9oaWRlR2hvc3RGb3JUYXJnZXQsXG4gICAgdW5oaWRlR2hvc3RGb3JUYXJnZXQ6IF91bmhpZGVHaG9zdEZvclRhcmdldCxcbiAgICBjbG9uZU5vd0hpZGRlbjogZnVuY3Rpb24gY2xvbmVOb3dIaWRkZW4oKSB7XG4gICAgICBjbG9uZUhpZGRlbiA9IHRydWU7XG4gICAgfSxcbiAgICBjbG9uZU5vd1Nob3duOiBmdW5jdGlvbiBjbG9uZU5vd1Nob3duKCkge1xuICAgICAgY2xvbmVIaWRkZW4gPSBmYWxzZTtcbiAgICB9LFxuICAgIGRpc3BhdGNoU29ydGFibGVFdmVudDogZnVuY3Rpb24gZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KG5hbWUpIHtcbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBvcmlnaW5hbEV2ZW50XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIGRhdGEpKTtcbn07XG5mdW5jdGlvbiBfZGlzcGF0Y2hFdmVudChpbmZvKSB7XG4gIGRpc3BhdGNoRXZlbnQoX29iamVjdFNwcmVhZDIoe1xuICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZSxcbiAgICBjbG9uZUVsOiBjbG9uZUVsLFxuICAgIHRhcmdldEVsOiBkcmFnRWwsXG4gICAgcm9vdEVsOiByb290RWwsXG4gICAgb2xkSW5kZXg6IG9sZEluZGV4LFxuICAgIG9sZERyYWdnYWJsZUluZGV4OiBvbGREcmFnZ2FibGVJbmRleCxcbiAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG5ld0RyYWdnYWJsZUluZGV4XG4gIH0sIGluZm8pKTtcbn1cbnZhciBkcmFnRWwsXG4gIHBhcmVudEVsLFxuICBnaG9zdEVsLFxuICByb290RWwsXG4gIG5leHRFbCxcbiAgbGFzdERvd25FbCxcbiAgY2xvbmVFbCxcbiAgY2xvbmVIaWRkZW4sXG4gIG9sZEluZGV4LFxuICBuZXdJbmRleCxcbiAgb2xkRHJhZ2dhYmxlSW5kZXgsXG4gIG5ld0RyYWdnYWJsZUluZGV4LFxuICBhY3RpdmVHcm91cCxcbiAgcHV0U29ydGFibGUsXG4gIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSBmYWxzZSxcbiAgaWdub3JlTmV4dENsaWNrID0gZmFsc2UsXG4gIHNvcnRhYmxlcyA9IFtdLFxuICB0YXBFdnQsXG4gIHRvdWNoRXZ0LFxuICBsYXN0RHgsXG4gIGxhc3REeSxcbiAgdGFwRGlzdGFuY2VMZWZ0LFxuICB0YXBEaXN0YW5jZVRvcCxcbiAgbW92ZWQsXG4gIGxhc3RUYXJnZXQsXG4gIGxhc3REaXJlY3Rpb24sXG4gIHBhc3RGaXJzdEludmVydFRocmVzaCA9IGZhbHNlLFxuICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gZmFsc2UsXG4gIHRhcmdldE1vdmVEaXN0YW5jZSxcbiAgLy8gRm9yIHBvc2l0aW9uaW5nIGdob3N0IGFic29sdXRlbHlcbiAgZ2hvc3RSZWxhdGl2ZVBhcmVudCxcbiAgZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGwgPSBbXSxcbiAgLy8gKGxlZnQsIHRvcClcblxuICBfc2lsZW50ID0gZmFsc2UsXG4gIHNhdmVkSW5wdXRDaGVja2VkID0gW107XG5cbi8qKiBAY29uc3QgKi9cbnZhciBkb2N1bWVudEV4aXN0cyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsXG4gIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5ID0gSU9TLFxuICBDU1NGbG9hdFByb3BlcnR5ID0gRWRnZSB8fCBJRTExT3JMZXNzID8gJ2Nzc0Zsb2F0JyA6ICdmbG9hdCcsXG4gIC8vIFRoaXMgd2lsbCBub3QgcGFzcyBmb3IgSUU5LCBiZWNhdXNlIElFOSBEbkQgb25seSB3b3JrcyBvbiBhbmNob3JzXG4gIHN1cHBvcnREcmFnZ2FibGUgPSBkb2N1bWVudEV4aXN0cyAmJiAhQ2hyb21lRm9yQW5kcm9pZCAmJiAhSU9TICYmICdkcmFnZ2FibGUnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICBzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWRvY3VtZW50RXhpc3RzKSByZXR1cm47XG4gICAgLy8gZmFsc2Ugd2hlbiA8PSBJRTExXG4gICAgaWYgKElFMTFPckxlc3MpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgneCcpO1xuICAgIGVsLnN0eWxlLmNzc1RleHQgPSAncG9pbnRlci1ldmVudHM6YXV0byc7XG4gICAgcmV0dXJuIGVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPT09ICdhdXRvJztcbiAgfSgpLFxuICBfZGV0ZWN0RGlyZWN0aW9uID0gZnVuY3Rpb24gX2RldGVjdERpcmVjdGlvbihlbCwgb3B0aW9ucykge1xuICAgIHZhciBlbENTUyA9IGNzcyhlbCksXG4gICAgICBlbFdpZHRoID0gcGFyc2VJbnQoZWxDU1Mud2lkdGgpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ0xlZnQpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ1JpZ2h0KSAtIHBhcnNlSW50KGVsQ1NTLmJvcmRlckxlZnRXaWR0aCkgLSBwYXJzZUludChlbENTUy5ib3JkZXJSaWdodFdpZHRoKSxcbiAgICAgIGNoaWxkMSA9IGdldENoaWxkKGVsLCAwLCBvcHRpb25zKSxcbiAgICAgIGNoaWxkMiA9IGdldENoaWxkKGVsLCAxLCBvcHRpb25zKSxcbiAgICAgIGZpcnN0Q2hpbGRDU1MgPSBjaGlsZDEgJiYgY3NzKGNoaWxkMSksXG4gICAgICBzZWNvbmRDaGlsZENTUyA9IGNoaWxkMiAmJiBjc3MoY2hpbGQyKSxcbiAgICAgIGZpcnN0Q2hpbGRXaWR0aCA9IGZpcnN0Q2hpbGRDU1MgJiYgcGFyc2VJbnQoZmlyc3RDaGlsZENTUy5tYXJnaW5MZWZ0KSArIHBhcnNlSW50KGZpcnN0Q2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDEpLndpZHRoLFxuICAgICAgc2Vjb25kQ2hpbGRXaWR0aCA9IHNlY29uZENoaWxkQ1NTICYmIHBhcnNlSW50KHNlY29uZENoaWxkQ1NTLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQoc2Vjb25kQ2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDIpLndpZHRoO1xuICAgIGlmIChlbENTUy5kaXNwbGF5ID09PSAnZmxleCcpIHtcbiAgICAgIHJldHVybiBlbENTUy5mbGV4RGlyZWN0aW9uID09PSAnY29sdW1uJyB8fCBlbENTUy5mbGV4RGlyZWN0aW9uID09PSAnY29sdW1uLXJldmVyc2UnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICB9XG4gICAgaWYgKGVsQ1NTLmRpc3BsYXkgPT09ICdncmlkJykge1xuICAgICAgcmV0dXJuIGVsQ1NTLmdyaWRUZW1wbGF0ZUNvbHVtbnMuc3BsaXQoJyAnKS5sZW5ndGggPD0gMSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIGlmIChjaGlsZDEgJiYgZmlyc3RDaGlsZENTU1tcImZsb2F0XCJdICYmIGZpcnN0Q2hpbGRDU1NbXCJmbG9hdFwiXSAhPT0gJ25vbmUnKSB7XG4gICAgICB2YXIgdG91Y2hpbmdTaWRlQ2hpbGQyID0gZmlyc3RDaGlsZENTU1tcImZsb2F0XCJdID09PSAnbGVmdCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgcmV0dXJuIGNoaWxkMiAmJiAoc2Vjb25kQ2hpbGRDU1MuY2xlYXIgPT09ICdib3RoJyB8fCBzZWNvbmRDaGlsZENTUy5jbGVhciA9PT0gdG91Y2hpbmdTaWRlQ2hpbGQyKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZDEgJiYgKGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ2Jsb2NrJyB8fCBmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICdmbGV4JyB8fCBmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICd0YWJsZScgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAnZ3JpZCcgfHwgZmlyc3RDaGlsZFdpZHRoID49IGVsV2lkdGggJiYgZWxDU1NbQ1NTRmxvYXRQcm9wZXJ0eV0gPT09ICdub25lJyB8fCBjaGlsZDIgJiYgZWxDU1NbQ1NTRmxvYXRQcm9wZXJ0eV0gPT09ICdub25lJyAmJiBmaXJzdENoaWxkV2lkdGggKyBzZWNvbmRDaGlsZFdpZHRoID4gZWxXaWR0aCkgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICB9LFxuICBfZHJhZ0VsSW5Sb3dDb2x1bW4gPSBmdW5jdGlvbiBfZHJhZ0VsSW5Sb3dDb2x1bW4oZHJhZ1JlY3QsIHRhcmdldFJlY3QsIHZlcnRpY2FsKSB7XG4gICAgdmFyIGRyYWdFbFMxT3BwID0gdmVydGljYWwgPyBkcmFnUmVjdC5sZWZ0IDogZHJhZ1JlY3QudG9wLFxuICAgICAgZHJhZ0VsUzJPcHAgPSB2ZXJ0aWNhbCA/IGRyYWdSZWN0LnJpZ2h0IDogZHJhZ1JlY3QuYm90dG9tLFxuICAgICAgZHJhZ0VsT3BwTGVuZ3RoID0gdmVydGljYWwgPyBkcmFnUmVjdC53aWR0aCA6IGRyYWdSZWN0LmhlaWdodCxcbiAgICAgIHRhcmdldFMxT3BwID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LmxlZnQgOiB0YXJnZXRSZWN0LnRvcCxcbiAgICAgIHRhcmdldFMyT3BwID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LnJpZ2h0IDogdGFyZ2V0UmVjdC5ib3R0b20sXG4gICAgICB0YXJnZXRPcHBMZW5ndGggPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3Qud2lkdGggOiB0YXJnZXRSZWN0LmhlaWdodDtcbiAgICByZXR1cm4gZHJhZ0VsUzFPcHAgPT09IHRhcmdldFMxT3BwIHx8IGRyYWdFbFMyT3BwID09PSB0YXJnZXRTMk9wcCB8fCBkcmFnRWxTMU9wcCArIGRyYWdFbE9wcExlbmd0aCAvIDIgPT09IHRhcmdldFMxT3BwICsgdGFyZ2V0T3BwTGVuZ3RoIC8gMjtcbiAgfSxcbiAgLyoqXHJcbiAgICogRGV0ZWN0cyBmaXJzdCBuZWFyZXN0IGVtcHR5IHNvcnRhYmxlIHRvIFggYW5kIFkgcG9zaXRpb24gdXNpbmcgZW1wdHlJbnNlcnRUaHJlc2hvbGQuXHJcbiAgICogQHBhcmFtICB7TnVtYmVyfSB4ICAgICAgWCBwb3NpdGlvblxyXG4gICAqIEBwYXJhbSAge051bWJlcn0geSAgICAgIFkgcG9zaXRpb25cclxuICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICBFbGVtZW50IG9mIHRoZSBmaXJzdCBmb3VuZCBuZWFyZXN0IFNvcnRhYmxlXHJcbiAgICovXG4gIF9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSA9IGZ1bmN0aW9uIF9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSh4LCB5KSB7XG4gICAgdmFyIHJldDtcbiAgICBzb3J0YWJsZXMuc29tZShmdW5jdGlvbiAoc29ydGFibGUpIHtcbiAgICAgIHZhciB0aHJlc2hvbGQgPSBzb3J0YWJsZVtleHBhbmRvXS5vcHRpb25zLmVtcHR5SW5zZXJ0VGhyZXNob2xkO1xuICAgICAgaWYgKCF0aHJlc2hvbGQgfHwgbGFzdENoaWxkKHNvcnRhYmxlKSkgcmV0dXJuO1xuICAgICAgdmFyIHJlY3QgPSBnZXRSZWN0KHNvcnRhYmxlKSxcbiAgICAgICAgaW5zaWRlSG9yaXpvbnRhbGx5ID0geCA+PSByZWN0LmxlZnQgLSB0aHJlc2hvbGQgJiYgeCA8PSByZWN0LnJpZ2h0ICsgdGhyZXNob2xkLFxuICAgICAgICBpbnNpZGVWZXJ0aWNhbGx5ID0geSA+PSByZWN0LnRvcCAtIHRocmVzaG9sZCAmJiB5IDw9IHJlY3QuYm90dG9tICsgdGhyZXNob2xkO1xuICAgICAgaWYgKGluc2lkZUhvcml6b250YWxseSAmJiBpbnNpZGVWZXJ0aWNhbGx5KSB7XG4gICAgICAgIHJldHVybiByZXQgPSBzb3J0YWJsZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmV0O1xuICB9LFxuICBfcHJlcGFyZUdyb3VwID0gZnVuY3Rpb24gX3ByZXBhcmVHcm91cChvcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gdG9Gbih2YWx1ZSwgcHVsbCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0bywgZnJvbSwgZHJhZ0VsLCBldnQpIHtcbiAgICAgICAgdmFyIHNhbWVHcm91cCA9IHRvLm9wdGlvbnMuZ3JvdXAubmFtZSAmJiBmcm9tLm9wdGlvbnMuZ3JvdXAubmFtZSAmJiB0by5vcHRpb25zLmdyb3VwLm5hbWUgPT09IGZyb20ub3B0aW9ucy5ncm91cC5uYW1lO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAocHVsbCB8fCBzYW1lR3JvdXApKSB7XG4gICAgICAgICAgLy8gRGVmYXVsdCBwdWxsIHZhbHVlXG4gICAgICAgICAgLy8gRGVmYXVsdCBwdWxsIGFuZCBwdXQgdmFsdWUgaWYgc2FtZSBncm91cFxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKHB1bGwgJiYgdmFsdWUgPT09ICdjbG9uZScpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIHRvRm4odmFsdWUodG8sIGZyb20sIGRyYWdFbCwgZXZ0KSwgcHVsbCkodG8sIGZyb20sIGRyYWdFbCwgZXZ0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgb3RoZXJHcm91cCA9IChwdWxsID8gdG8gOiBmcm9tKS5vcHRpb25zLmdyb3VwLm5hbWU7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgPT09IG90aGVyR3JvdXAgfHwgdmFsdWUuam9pbiAmJiB2YWx1ZS5pbmRleE9mKG90aGVyR3JvdXApID4gLTE7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBncm91cCA9IHt9O1xuICAgIHZhciBvcmlnaW5hbEdyb3VwID0gb3B0aW9ucy5ncm91cDtcbiAgICBpZiAoIW9yaWdpbmFsR3JvdXAgfHwgX3R5cGVvZihvcmlnaW5hbEdyb3VwKSAhPSAnb2JqZWN0Jykge1xuICAgICAgb3JpZ2luYWxHcm91cCA9IHtcbiAgICAgICAgbmFtZTogb3JpZ2luYWxHcm91cFxuICAgICAgfTtcbiAgICB9XG4gICAgZ3JvdXAubmFtZSA9IG9yaWdpbmFsR3JvdXAubmFtZTtcbiAgICBncm91cC5jaGVja1B1bGwgPSB0b0ZuKG9yaWdpbmFsR3JvdXAucHVsbCwgdHJ1ZSk7XG4gICAgZ3JvdXAuY2hlY2tQdXQgPSB0b0ZuKG9yaWdpbmFsR3JvdXAucHV0KTtcbiAgICBncm91cC5yZXZlcnRDbG9uZSA9IG9yaWdpbmFsR3JvdXAucmV2ZXJ0Q2xvbmU7XG4gICAgb3B0aW9ucy5ncm91cCA9IGdyb3VwO1xuICB9LFxuICBfaGlkZUdob3N0Rm9yVGFyZ2V0ID0gZnVuY3Rpb24gX2hpZGVHaG9zdEZvclRhcmdldCgpIHtcbiAgICBpZiAoIXN1cHBvcnRDc3NQb2ludGVyRXZlbnRzICYmIGdob3N0RWwpIHtcbiAgICAgIGNzcyhnaG9zdEVsLCAnZGlzcGxheScsICdub25lJyk7XG4gICAgfVxuICB9LFxuICBfdW5oaWRlR2hvc3RGb3JUYXJnZXQgPSBmdW5jdGlvbiBfdW5oaWRlR2hvc3RGb3JUYXJnZXQoKSB7XG4gICAgaWYgKCFzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyAmJiBnaG9zdEVsKSB7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgfVxuICB9O1xuXG4vLyAjMTE4NCBmaXggLSBQcmV2ZW50IGNsaWNrIGV2ZW50IG9uIGZhbGxiYWNrIGlmIGRyYWdnZWQgYnV0IGl0ZW0gbm90IGNoYW5nZWQgcG9zaXRpb25cbmlmIChkb2N1bWVudEV4aXN0cyAmJiAhQ2hyb21lRm9yQW5kcm9pZCkge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldnQpIHtcbiAgICBpZiAoaWdub3JlTmV4dENsaWNrKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24gJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZ0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiAmJiBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICBpZ25vcmVOZXh0Q2xpY2sgPSBmYWxzZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxudmFyIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50ID0gZnVuY3Rpb24gbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQoZXZ0KSB7XG4gIGlmIChkcmFnRWwpIHtcbiAgICBldnQgPSBldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0O1xuICAgIHZhciBuZWFyZXN0ID0gX2RldGVjdE5lYXJlc3RFbXB0eVNvcnRhYmxlKGV2dC5jbGllbnRYLCBldnQuY2xpZW50WSk7XG4gICAgaWYgKG5lYXJlc3QpIHtcbiAgICAgIC8vIENyZWF0ZSBpbWl0YXRpb24gZXZlbnRcbiAgICAgIHZhciBldmVudCA9IHt9O1xuICAgICAgZm9yICh2YXIgaSBpbiBldnQpIHtcbiAgICAgICAgaWYgKGV2dC5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIGV2ZW50W2ldID0gZXZ0W2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBldmVudC50YXJnZXQgPSBldmVudC5yb290RWwgPSBuZWFyZXN0O1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB2b2lkIDA7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24gPSB2b2lkIDA7XG4gICAgICBuZWFyZXN0W2V4cGFuZG9dLl9vbkRyYWdPdmVyKGV2ZW50KTtcbiAgICB9XG4gIH1cbn07XG52YXIgX2NoZWNrT3V0c2lkZVRhcmdldEVsID0gZnVuY3Rpb24gX2NoZWNrT3V0c2lkZVRhcmdldEVsKGV2dCkge1xuICBpZiAoZHJhZ0VsKSB7XG4gICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbChldnQudGFyZ2V0KTtcbiAgfVxufTtcblxuLyoqXHJcbiAqIEBjbGFzcyAgU29ydGFibGVcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbFxyXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgIFtvcHRpb25zXVxyXG4gKi9cbmZ1bmN0aW9uIFNvcnRhYmxlKGVsLCBvcHRpb25zKSB7XG4gIGlmICghKGVsICYmIGVsLm5vZGVUeXBlICYmIGVsLm5vZGVUeXBlID09PSAxKSkge1xuICAgIHRocm93IFwiU29ydGFibGU6IGBlbGAgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCwgbm90IFwiLmNvbmNhdCh7fS50b1N0cmluZy5jYWxsKGVsKSk7XG4gIH1cbiAgdGhpcy5lbCA9IGVsOyAvLyByb290IGVsZW1lbnRcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvcHRpb25zKTtcblxuICAvLyBFeHBvcnQgaW5zdGFuY2VcbiAgZWxbZXhwYW5kb10gPSB0aGlzO1xuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgZ3JvdXA6IG51bGwsXG4gICAgc29ydDogdHJ1ZSxcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgc3RvcmU6IG51bGwsXG4gICAgaGFuZGxlOiBudWxsLFxuICAgIGRyYWdnYWJsZTogL15bdW9dbCQvaS50ZXN0KGVsLm5vZGVOYW1lKSA/ICc+bGknIDogJz4qJyxcbiAgICBzd2FwVGhyZXNob2xkOiAxLFxuICAgIC8vIHBlcmNlbnRhZ2U7IDAgPD0geCA8PSAxXG4gICAgaW52ZXJ0U3dhcDogZmFsc2UsXG4gICAgLy8gaW52ZXJ0IGFsd2F5c1xuICAgIGludmVydGVkU3dhcFRocmVzaG9sZDogbnVsbCxcbiAgICAvLyB3aWxsIGJlIHNldCB0byBzYW1lIGFzIHN3YXBUaHJlc2hvbGQgaWYgZGVmYXVsdFxuICAgIHJlbW92ZUNsb25lT25IaWRlOiB0cnVlLFxuICAgIGRpcmVjdGlvbjogZnVuY3Rpb24gZGlyZWN0aW9uKCkge1xuICAgICAgcmV0dXJuIF9kZXRlY3REaXJlY3Rpb24oZWwsIHRoaXMub3B0aW9ucyk7XG4gICAgfSxcbiAgICBnaG9zdENsYXNzOiAnc29ydGFibGUtZ2hvc3QnLFxuICAgIGNob3NlbkNsYXNzOiAnc29ydGFibGUtY2hvc2VuJyxcbiAgICBkcmFnQ2xhc3M6ICdzb3J0YWJsZS1kcmFnJyxcbiAgICBpZ25vcmU6ICdhLCBpbWcnLFxuICAgIGZpbHRlcjogbnVsbCxcbiAgICBwcmV2ZW50T25GaWx0ZXI6IHRydWUsXG4gICAgYW5pbWF0aW9uOiAwLFxuICAgIGVhc2luZzogbnVsbCxcbiAgICBzZXREYXRhOiBmdW5jdGlvbiBzZXREYXRhKGRhdGFUcmFuc2ZlciwgZHJhZ0VsKSB7XG4gICAgICBkYXRhVHJhbnNmZXIuc2V0RGF0YSgnVGV4dCcsIGRyYWdFbC50ZXh0Q29udGVudCk7XG4gICAgfSxcbiAgICBkcm9wQnViYmxlOiBmYWxzZSxcbiAgICBkcmFnb3ZlckJ1YmJsZTogZmFsc2UsXG4gICAgZGF0YUlkQXR0cjogJ2RhdGEtaWQnLFxuICAgIGRlbGF5OiAwLFxuICAgIGRlbGF5T25Ub3VjaE9ubHk6IGZhbHNlLFxuICAgIHRvdWNoU3RhcnRUaHJlc2hvbGQ6IChOdW1iZXIucGFyc2VJbnQgPyBOdW1iZXIgOiB3aW5kb3cpLnBhcnNlSW50KHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCAxMCkgfHwgMSxcbiAgICBmb3JjZUZhbGxiYWNrOiBmYWxzZSxcbiAgICBmYWxsYmFja0NsYXNzOiAnc29ydGFibGUtZmFsbGJhY2snLFxuICAgIGZhbGxiYWNrT25Cb2R5OiBmYWxzZSxcbiAgICBmYWxsYmFja1RvbGVyYW5jZTogMCxcbiAgICBmYWxsYmFja09mZnNldDoge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9LFxuICAgIHN1cHBvcnRQb2ludGVyOiBTb3J0YWJsZS5zdXBwb3J0UG9pbnRlciAhPT0gZmFsc2UgJiYgJ1BvaW50ZXJFdmVudCcgaW4gd2luZG93ICYmICFTYWZhcmksXG4gICAgZW1wdHlJbnNlcnRUaHJlc2hvbGQ6IDVcbiAgfTtcbiAgUGx1Z2luTWFuYWdlci5pbml0aWFsaXplUGx1Z2lucyh0aGlzLCBlbCwgZGVmYXVsdHMpO1xuXG4gIC8vIFNldCBkZWZhdWx0IG9wdGlvbnNcbiAgZm9yICh2YXIgbmFtZSBpbiBkZWZhdWx0cykge1xuICAgICEobmFtZSBpbiBvcHRpb25zKSAmJiAob3B0aW9uc1tuYW1lXSA9IGRlZmF1bHRzW25hbWVdKTtcbiAgfVxuICBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpO1xuXG4gIC8vIEJpbmQgYWxsIHByaXZhdGUgbWV0aG9kc1xuICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNldHVwIGRyYWcgbW9kZVxuICB0aGlzLm5hdGl2ZURyYWdnYWJsZSA9IG9wdGlvbnMuZm9yY2VGYWxsYmFjayA/IGZhbHNlIDogc3VwcG9ydERyYWdnYWJsZTtcbiAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgLy8gVG91Y2ggc3RhcnQgdGhyZXNob2xkIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gdGhlIG5hdGl2ZSBkcmFnc3RhcnQgdGhyZXNob2xkXG4gICAgdGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgPSAxO1xuICB9XG5cbiAgLy8gQmluZCBldmVudHNcbiAgaWYgKG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICBvbihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gIH0gZWxzZSB7XG4gICAgb24oZWwsICdtb3VzZWRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvbihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgfVxuICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICBvbihlbCwgJ2RyYWdvdmVyJywgdGhpcyk7XG4gICAgb24oZWwsICdkcmFnZW50ZXInLCB0aGlzKTtcbiAgfVxuICBzb3J0YWJsZXMucHVzaCh0aGlzLmVsKTtcblxuICAvLyBSZXN0b3JlIHNvcnRpbmdcbiAgb3B0aW9ucy5zdG9yZSAmJiBvcHRpb25zLnN0b3JlLmdldCAmJiB0aGlzLnNvcnQob3B0aW9ucy5zdG9yZS5nZXQodGhpcykgfHwgW10pO1xuXG4gIC8vIEFkZCBhbmltYXRpb24gc3RhdGUgbWFuYWdlclxuICBfZXh0ZW5kcyh0aGlzLCBBbmltYXRpb25TdGF0ZU1hbmFnZXIoKSk7XG59XG5Tb3J0YWJsZS5wcm90b3R5cGUgPSAvKiogQGxlbmRzIFNvcnRhYmxlLnByb3RvdHlwZSAqL3tcbiAgY29uc3RydWN0b3I6IFNvcnRhYmxlLFxuICBfaXNPdXRzaWRlVGhpc0VsOiBmdW5jdGlvbiBfaXNPdXRzaWRlVGhpc0VsKHRhcmdldCkge1xuICAgIGlmICghdGhpcy5lbC5jb250YWlucyh0YXJnZXQpICYmIHRhcmdldCAhPT0gdGhpcy5lbCkge1xuICAgICAgbGFzdFRhcmdldCA9IG51bGw7XG4gICAgfVxuICB9LFxuICBfZ2V0RGlyZWN0aW9uOiBmdW5jdGlvbiBfZ2V0RGlyZWN0aW9uKGV2dCwgdGFyZ2V0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnZnVuY3Rpb24nID8gdGhpcy5vcHRpb25zLmRpcmVjdGlvbi5jYWxsKHRoaXMsIGV2dCwgdGFyZ2V0LCBkcmFnRWwpIDogdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgfSxcbiAgX29uVGFwU3RhcnQ6IGZ1bmN0aW9uIF9vblRhcFN0YXJ0KCAvKiogRXZlbnR8VG91Y2hFdmVudCAqL2V2dCkge1xuICAgIGlmICghZXZ0LmNhbmNlbGFibGUpIHJldHVybjtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgZWwgPSB0aGlzLmVsLFxuICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgIHByZXZlbnRPbkZpbHRlciA9IG9wdGlvbnMucHJldmVudE9uRmlsdGVyLFxuICAgICAgdHlwZSA9IGV2dC50eXBlLFxuICAgICAgdG91Y2ggPSBldnQudG91Y2hlcyAmJiBldnQudG91Y2hlc1swXSB8fCBldnQucG9pbnRlclR5cGUgJiYgZXZ0LnBvaW50ZXJUeXBlID09PSAndG91Y2gnICYmIGV2dCxcbiAgICAgIHRhcmdldCA9ICh0b3VjaCB8fCBldnQpLnRhcmdldCxcbiAgICAgIG9yaWdpbmFsVGFyZ2V0ID0gZXZ0LnRhcmdldC5zaGFkb3dSb290ICYmIChldnQucGF0aCAmJiBldnQucGF0aFswXSB8fCBldnQuY29tcG9zZWRQYXRoICYmIGV2dC5jb21wb3NlZFBhdGgoKVswXSkgfHwgdGFyZ2V0LFxuICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgX3NhdmVJbnB1dENoZWNrZWRTdGF0ZShlbCk7XG5cbiAgICAvLyBEb24ndCB0cmlnZ2VyIHN0YXJ0IGV2ZW50IHdoZW4gYW4gZWxlbWVudCBpcyBiZWVuIGRyYWdnZWQsIG90aGVyd2lzZSB0aGUgZXZ0Lm9sZGluZGV4IGFsd2F5cyB3cm9uZyB3aGVuIHNldCBvcHRpb24uZ3JvdXAuXG4gICAgaWYgKGRyYWdFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoL21vdXNlZG93bnxwb2ludGVyZG93bi8udGVzdCh0eXBlKSAmJiBldnQuYnV0dG9uICE9PSAwIHx8IG9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjsgLy8gb25seSBsZWZ0IGJ1dHRvbiBhbmQgZW5hYmxlZFxuICAgIH1cblxuICAgIC8vIGNhbmNlbCBkbmQgaWYgb3JpZ2luYWwgdGFyZ2V0IGlzIGNvbnRlbnQgZWRpdGFibGVcbiAgICBpZiAob3JpZ2luYWxUYXJnZXQuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTYWZhcmkgaWdub3JlcyBmdXJ0aGVyIGV2ZW50IGhhbmRsaW5nIGFmdGVyIG1vdXNlZG93blxuICAgIGlmICghdGhpcy5uYXRpdmVEcmFnZ2FibGUgJiYgU2FmYXJpICYmIHRhcmdldCAmJiB0YXJnZXQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0VMRUNUJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0YXJnZXQgPSBjbG9zZXN0KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsLCBmYWxzZSk7XG4gICAgaWYgKHRhcmdldCAmJiB0YXJnZXQuYW5pbWF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGxhc3REb3duRWwgPT09IHRhcmdldCkge1xuICAgICAgLy8gSWdub3JpbmcgZHVwbGljYXRlIGBkb3duYFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIGRyYWdnZWQgZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudFxuICAgIG9sZEluZGV4ID0gaW5kZXgodGFyZ2V0KTtcbiAgICBvbGREcmFnZ2FibGVJbmRleCA9IGluZGV4KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG4gICAgLy8gQ2hlY2sgZmlsdGVyXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChmaWx0ZXIuY2FsbCh0aGlzLCBldnQsIHRhcmdldCwgdGhpcykpIHtcbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgICByb290RWw6IG9yaWdpbmFsVGFyZ2V0LFxuICAgICAgICAgIG5hbWU6ICdmaWx0ZXInLFxuICAgICAgICAgIHRhcmdldEVsOiB0YXJnZXQsXG4gICAgICAgICAgdG9FbDogZWwsXG4gICAgICAgICAgZnJvbUVsOiBlbFxuICAgICAgICB9KTtcbiAgICAgICAgcGx1Z2luRXZlbnQoJ2ZpbHRlcicsIF90aGlzLCB7XG4gICAgICAgICAgZXZ0OiBldnRcbiAgICAgICAgfSk7XG4gICAgICAgIHByZXZlbnRPbkZpbHRlciAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuOyAvLyBjYW5jZWwgZG5kXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IGZpbHRlci5zcGxpdCgnLCcpLnNvbWUoZnVuY3Rpb24gKGNyaXRlcmlhKSB7XG4gICAgICAgIGNyaXRlcmlhID0gY2xvc2VzdChvcmlnaW5hbFRhcmdldCwgY3JpdGVyaWEudHJpbSgpLCBlbCwgZmFsc2UpO1xuICAgICAgICBpZiAoY3JpdGVyaWEpIHtcbiAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgICAgICByb290RWw6IGNyaXRlcmlhLFxuICAgICAgICAgICAgbmFtZTogJ2ZpbHRlcicsXG4gICAgICAgICAgICB0YXJnZXRFbDogdGFyZ2V0LFxuICAgICAgICAgICAgZnJvbUVsOiBlbCxcbiAgICAgICAgICAgIHRvRWw6IGVsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcGx1Z2luRXZlbnQoJ2ZpbHRlcicsIF90aGlzLCB7XG4gICAgICAgICAgICBldnQ6IGV2dFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChmaWx0ZXIpIHtcbiAgICAgICAgcHJldmVudE9uRmlsdGVyICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47IC8vIGNhbmNlbCBkbmRcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuaGFuZGxlICYmICFjbG9zZXN0KG9yaWdpbmFsVGFyZ2V0LCBvcHRpb25zLmhhbmRsZSwgZWwsIGZhbHNlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFByZXBhcmUgYGRyYWdzdGFydGBcbiAgICB0aGlzLl9wcmVwYXJlRHJhZ1N0YXJ0KGV2dCwgdG91Y2gsIHRhcmdldCk7XG4gIH0sXG4gIF9wcmVwYXJlRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfcHJlcGFyZURyYWdTdGFydCggLyoqIEV2ZW50ICovZXZ0LCAvKiogVG91Y2ggKi90b3VjaCwgLyoqIEhUTUxFbGVtZW50ICovdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgIGVsID0gX3RoaXMuZWwsXG4gICAgICBvcHRpb25zID0gX3RoaXMub3B0aW9ucyxcbiAgICAgIG93bmVyRG9jdW1lbnQgPSBlbC5vd25lckRvY3VtZW50LFxuICAgICAgZHJhZ1N0YXJ0Rm47XG4gICAgaWYgKHRhcmdldCAmJiAhZHJhZ0VsICYmIHRhcmdldC5wYXJlbnROb2RlID09PSBlbCkge1xuICAgICAgdmFyIGRyYWdSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgcm9vdEVsID0gZWw7XG4gICAgICBkcmFnRWwgPSB0YXJnZXQ7XG4gICAgICBwYXJlbnRFbCA9IGRyYWdFbC5wYXJlbnROb2RlO1xuICAgICAgbmV4dEVsID0gZHJhZ0VsLm5leHRTaWJsaW5nO1xuICAgICAgbGFzdERvd25FbCA9IHRhcmdldDtcbiAgICAgIGFjdGl2ZUdyb3VwID0gb3B0aW9ucy5ncm91cDtcbiAgICAgIFNvcnRhYmxlLmRyYWdnZWQgPSBkcmFnRWw7XG4gICAgICB0YXBFdnQgPSB7XG4gICAgICAgIHRhcmdldDogZHJhZ0VsLFxuICAgICAgICBjbGllbnRYOiAodG91Y2ggfHwgZXZ0KS5jbGllbnRYLFxuICAgICAgICBjbGllbnRZOiAodG91Y2ggfHwgZXZ0KS5jbGllbnRZXG4gICAgICB9O1xuICAgICAgdGFwRGlzdGFuY2VMZWZ0ID0gdGFwRXZ0LmNsaWVudFggLSBkcmFnUmVjdC5sZWZ0O1xuICAgICAgdGFwRGlzdGFuY2VUb3AgPSB0YXBFdnQuY2xpZW50WSAtIGRyYWdSZWN0LnRvcDtcbiAgICAgIHRoaXMuX2xhc3RYID0gKHRvdWNoIHx8IGV2dCkuY2xpZW50WDtcbiAgICAgIHRoaXMuX2xhc3RZID0gKHRvdWNoIHx8IGV2dCkuY2xpZW50WTtcbiAgICAgIGRyYWdFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICdhbGwnO1xuICAgICAgZHJhZ1N0YXJ0Rm4gPSBmdW5jdGlvbiBkcmFnU3RhcnRGbigpIHtcbiAgICAgICAgcGx1Z2luRXZlbnQoJ2RlbGF5RW5kZWQnLCBfdGhpcywge1xuICAgICAgICAgIGV2dDogZXZ0XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgICAgIF90aGlzLl9vbkRyb3AoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVsYXllZCBkcmFnIGhhcyBiZWVuIHRyaWdnZXJlZFxuICAgICAgICAvLyB3ZSBjYW4gcmUtZW5hYmxlIHRoZSBldmVudHM6IHRvdWNobW92ZS9tb3VzZW1vdmVcbiAgICAgICAgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuICAgICAgICBpZiAoIUZpcmVGb3ggJiYgX3RoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgICAgZHJhZ0VsLmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCaW5kIHRoZSBldmVudHM6IGRyYWdzdGFydC9kcmFnZW5kXG4gICAgICAgIF90aGlzLl90cmlnZ2VyRHJhZ1N0YXJ0KGV2dCwgdG91Y2gpO1xuXG4gICAgICAgIC8vIERyYWcgc3RhcnQgZXZlbnRcbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgICBuYW1lOiAnY2hvb3NlJyxcbiAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ2hvc2VuIGl0ZW1cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmNob3NlbkNsYXNzLCB0cnVlKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIERpc2FibGUgXCJkcmFnZ2FibGVcIlxuICAgICAgb3B0aW9ucy5pZ25vcmUuc3BsaXQoJywnKS5mb3JFYWNoKGZ1bmN0aW9uIChjcml0ZXJpYSkge1xuICAgICAgICBmaW5kKGRyYWdFbCwgY3JpdGVyaWEudHJpbSgpLCBfZGlzYWJsZURyYWdnYWJsZSk7XG4gICAgICB9KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdkcmFnb3ZlcicsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgICAgaWYgKG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgICAvLyBOYXRpdmUgRCZEIHRyaWdnZXJzIHBvaW50ZXJjYW5jZWxcbiAgICAgICAgIXRoaXMubmF0aXZlRHJhZ2dhYmxlICYmIG9uKG93bmVyRG9jdW1lbnQsICdwb2ludGVyY2FuY2VsJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1ha2UgZHJhZ0VsIGRyYWdnYWJsZSAobXVzdCBiZSBiZWZvcmUgZGVsYXkgZm9yIEZpcmVGb3gpXG4gICAgICBpZiAoRmlyZUZveCAmJiB0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMudG91Y2hTdGFydFRocmVzaG9sZCA9IDQ7XG4gICAgICAgIGRyYWdFbC5kcmFnZ2FibGUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcGx1Z2luRXZlbnQoJ2RlbGF5U3RhcnQnLCB0aGlzLCB7XG4gICAgICAgIGV2dDogZXZ0XG4gICAgICB9KTtcblxuICAgICAgLy8gRGVsYXkgaXMgaW1wb3NzaWJsZSBmb3IgbmF0aXZlIERuRCBpbiBFZGdlIG9yIElFXG4gICAgICBpZiAob3B0aW9ucy5kZWxheSAmJiAoIW9wdGlvbnMuZGVsYXlPblRvdWNoT25seSB8fCB0b3VjaCkgJiYgKCF0aGlzLm5hdGl2ZURyYWdnYWJsZSB8fCAhKEVkZ2UgfHwgSUUxMU9yTGVzcykpKSB7XG4gICAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICAgICAgdGhpcy5fb25Ecm9wKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIG1vdmVzIHRoZSBwb2ludGVyIG9yIGxldCBnbyB0aGUgY2xpY2sgb3IgdG91Y2hcbiAgICAgICAgLy8gYmVmb3JlIHRoZSBkZWxheSBoYXMgYmVlbiByZWFjaGVkOlxuICAgICAgICAvLyBkaXNhYmxlIHRoZSBkZWxheWVkIGRyYWdcbiAgICAgICAgaWYgKG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgICBvbihvd25lckRvY3VtZW50LCAncG9pbnRlcnVwJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJjYW5jZWwnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICB9XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIF90aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBvcHRpb25zLnN1cHBvcnRQb2ludGVyICYmIG9uKG93bmVyRG9jdW1lbnQsICdwb2ludGVybW92ZScsIF90aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBfdGhpcy5fZHJhZ1N0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGRyYWdTdGFydEZuLCBvcHRpb25zLmRlbGF5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdTdGFydEZuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBfZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyOiBmdW5jdGlvbiBfZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKCAvKiogVG91Y2hFdmVudHxQb2ludGVyRXZlbnQgKiovZSkge1xuICAgIHZhciB0b3VjaCA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGU7XG4gICAgaWYgKE1hdGgubWF4KE1hdGguYWJzKHRvdWNoLmNsaWVudFggLSB0aGlzLl9sYXN0WCksIE1hdGguYWJzKHRvdWNoLmNsaWVudFkgLSB0aGlzLl9sYXN0WSkpID49IE1hdGguZmxvb3IodGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgLyAodGhpcy5uYXRpdmVEcmFnZ2FibGUgJiYgd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSkpKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcoKTtcbiAgICB9XG4gIH0sXG4gIF9kaXNhYmxlRGVsYXllZERyYWc6IGZ1bmN0aW9uIF9kaXNhYmxlRGVsYXllZERyYWcoKSB7XG4gICAgZHJhZ0VsICYmIF9kaXNhYmxlRHJhZ2dhYmxlKGRyYWdFbCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2RyYWdTdGFydFRpbWVyKTtcbiAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWdFdmVudHMoKTtcbiAgfSxcbiAgX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50czogZnVuY3Rpb24gX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IHRoaXMuZWwub3duZXJEb2N1bWVudDtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAncG9pbnRlcnVwJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJjYW5jZWwnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gIH0sXG4gIF90cmlnZ2VyRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfdHJpZ2dlckRyYWdTdGFydCggLyoqIEV2ZW50ICovZXZ0LCAvKiogVG91Y2ggKi90b3VjaCkge1xuICAgIHRvdWNoID0gdG91Y2ggfHwgZXZ0LnBvaW50ZXJUeXBlID09ICd0b3VjaCcgJiYgZXZ0O1xuICAgIGlmICghdGhpcy5uYXRpdmVEcmFnZ2FibGUgfHwgdG91Y2gpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICAgIH0gZWxzZSBpZiAodG91Y2gpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb24oZHJhZ0VsLCAnZHJhZ2VuZCcsIHRoaXMpO1xuICAgICAgb24ocm9vdEVsLCAnZHJhZ3N0YXJ0JywgdGhpcy5fb25EcmFnU3RhcnQpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgX25leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xuICAgICAgICAgIGRvY3VtZW50LnNlbGVjdGlvbi5lbXB0eSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuICB9LFxuICBfZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIF9kcmFnU3RhcnRlZChmYWxsYmFjaywgZXZ0KSB7XG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlO1xuICAgIGlmIChyb290RWwgJiYgZHJhZ0VsKSB7XG4gICAgICBwbHVnaW5FdmVudCgnZHJhZ1N0YXJ0ZWQnLCB0aGlzLCB7XG4gICAgICAgIGV2dDogZXZ0XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICBvbihkb2N1bWVudCwgJ2RyYWdvdmVyJywgX2NoZWNrT3V0c2lkZVRhcmdldEVsKTtcbiAgICAgIH1cbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAvLyBBcHBseSBlZmZlY3RcbiAgICAgICFmYWxsYmFjayAmJiB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCBmYWxzZSk7XG4gICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgdHJ1ZSk7XG4gICAgICBTb3J0YWJsZS5hY3RpdmUgPSB0aGlzO1xuICAgICAgZmFsbGJhY2sgJiYgdGhpcy5fYXBwZW5kR2hvc3QoKTtcblxuICAgICAgLy8gRHJhZyBzdGFydCBldmVudFxuICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgbmFtZTogJ3N0YXJ0JyxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbnVsbGluZygpO1xuICAgIH1cbiAgfSxcbiAgX2VtdWxhdGVEcmFnT3ZlcjogZnVuY3Rpb24gX2VtdWxhdGVEcmFnT3ZlcigpIHtcbiAgICBpZiAodG91Y2hFdnQpIHtcbiAgICAgIHRoaXMuX2xhc3RYID0gdG91Y2hFdnQuY2xpZW50WDtcbiAgICAgIHRoaXMuX2xhc3RZID0gdG91Y2hFdnQuY2xpZW50WTtcbiAgICAgIF9oaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgICAgIHZhciB0YXJnZXQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHRvdWNoRXZ0LmNsaWVudFgsIHRvdWNoRXZ0LmNsaWVudFkpO1xuICAgICAgdmFyIHBhcmVudCA9IHRhcmdldDtcbiAgICAgIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0LnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnNoYWRvd1Jvb3QuZWxlbWVudEZyb21Qb2ludCh0b3VjaEV2dC5jbGllbnRYLCB0b3VjaEV2dC5jbGllbnRZKTtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gcGFyZW50KSBicmVhaztcbiAgICAgICAgcGFyZW50ID0gdGFyZ2V0O1xuICAgICAgfVxuICAgICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbCh0YXJnZXQpO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKHBhcmVudFtleHBhbmRvXSkge1xuICAgICAgICAgICAgdmFyIGluc2VydGVkID0gdm9pZCAwO1xuICAgICAgICAgICAgaW5zZXJ0ZWQgPSBwYXJlbnRbZXhwYW5kb10uX29uRHJhZ092ZXIoe1xuICAgICAgICAgICAgICBjbGllbnRYOiB0b3VjaEV2dC5jbGllbnRYLFxuICAgICAgICAgICAgICBjbGllbnRZOiB0b3VjaEV2dC5jbGllbnRZLFxuICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGluc2VydGVkICYmICF0aGlzLm9wdGlvbnMuZHJhZ292ZXJCdWJibGUpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRhcmdldCA9IHBhcmVudDsgLy8gc3RvcmUgbGFzdCBlbGVtZW50XG4gICAgICAgIH1cbiAgICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqLyB3aGlsZSAocGFyZW50ID0gZ2V0UGFyZW50T3JIb3N0KHBhcmVudCkpO1xuICAgICAgfVxuICAgICAgX3VuaGlkZUdob3N0Rm9yVGFyZ2V0KCk7XG4gICAgfVxuICB9LFxuICBfb25Ub3VjaE1vdmU6IGZ1bmN0aW9uIF9vblRvdWNoTW92ZSggLyoqVG91Y2hFdmVudCovZXZ0KSB7XG4gICAgaWYgKHRhcEV2dCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIGZhbGxiYWNrVG9sZXJhbmNlID0gb3B0aW9ucy5mYWxsYmFja1RvbGVyYW5jZSxcbiAgICAgICAgZmFsbGJhY2tPZmZzZXQgPSBvcHRpb25zLmZhbGxiYWNrT2Zmc2V0LFxuICAgICAgICB0b3VjaCA9IGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQsXG4gICAgICAgIGdob3N0TWF0cml4ID0gZ2hvc3RFbCAmJiBtYXRyaXgoZ2hvc3RFbCwgdHJ1ZSksXG4gICAgICAgIHNjYWxlWCA9IGdob3N0RWwgJiYgZ2hvc3RNYXRyaXggJiYgZ2hvc3RNYXRyaXguYSxcbiAgICAgICAgc2NhbGVZID0gZ2hvc3RFbCAmJiBnaG9zdE1hdHJpeCAmJiBnaG9zdE1hdHJpeC5kLFxuICAgICAgICByZWxhdGl2ZVNjcm9sbE9mZnNldCA9IFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5ICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgJiYgZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZ2hvc3RSZWxhdGl2ZVBhcmVudCksXG4gICAgICAgIGR4ID0gKHRvdWNoLmNsaWVudFggLSB0YXBFdnQuY2xpZW50WCArIGZhbGxiYWNrT2Zmc2V0LngpIC8gKHNjYWxlWCB8fCAxKSArIChyZWxhdGl2ZVNjcm9sbE9mZnNldCA/IHJlbGF0aXZlU2Nyb2xsT2Zmc2V0WzBdIC0gZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGxbMF0gOiAwKSAvIChzY2FsZVggfHwgMSksXG4gICAgICAgIGR5ID0gKHRvdWNoLmNsaWVudFkgLSB0YXBFdnQuY2xpZW50WSArIGZhbGxiYWNrT2Zmc2V0LnkpIC8gKHNjYWxlWSB8fCAxKSArIChyZWxhdGl2ZVNjcm9sbE9mZnNldCA/IHJlbGF0aXZlU2Nyb2xsT2Zmc2V0WzFdIC0gZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGxbMV0gOiAwKSAvIChzY2FsZVkgfHwgMSk7XG5cbiAgICAgIC8vIG9ubHkgc2V0IHRoZSBzdGF0dXMgdG8gZHJhZ2dpbmcsIHdoZW4gd2UgYXJlIGFjdHVhbGx5IGRyYWdnaW5nXG4gICAgICBpZiAoIVNvcnRhYmxlLmFjdGl2ZSAmJiAhYXdhaXRpbmdEcmFnU3RhcnRlZCkge1xuICAgICAgICBpZiAoZmFsbGJhY2tUb2xlcmFuY2UgJiYgTWF0aC5tYXgoTWF0aC5hYnModG91Y2guY2xpZW50WCAtIHRoaXMuX2xhc3RYKSwgTWF0aC5hYnModG91Y2guY2xpZW50WSAtIHRoaXMuX2xhc3RZKSkgPCBmYWxsYmFja1RvbGVyYW5jZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vbkRyYWdTdGFydChldnQsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKGdob3N0RWwpIHtcbiAgICAgICAgaWYgKGdob3N0TWF0cml4KSB7XG4gICAgICAgICAgZ2hvc3RNYXRyaXguZSArPSBkeCAtIChsYXN0RHggfHwgMCk7XG4gICAgICAgICAgZ2hvc3RNYXRyaXguZiArPSBkeSAtIChsYXN0RHkgfHwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2hvc3RNYXRyaXggPSB7XG4gICAgICAgICAgICBhOiAxLFxuICAgICAgICAgICAgYjogMCxcbiAgICAgICAgICAgIGM6IDAsXG4gICAgICAgICAgICBkOiAxLFxuICAgICAgICAgICAgZTogZHgsXG4gICAgICAgICAgICBmOiBkeVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNzc01hdHJpeCA9IFwibWF0cml4KFwiLmNvbmNhdChnaG9zdE1hdHJpeC5hLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmIsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguYywgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5kLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmUsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguZiwgXCIpXCIpO1xuICAgICAgICBjc3MoZ2hvc3RFbCwgJ3dlYmtpdFRyYW5zZm9ybScsIGNzc01hdHJpeCk7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAnbW96VHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgY3NzKGdob3N0RWwsICdtc1RyYW5zZm9ybScsIGNzc01hdHJpeCk7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgbGFzdER4ID0gZHg7XG4gICAgICAgIGxhc3REeSA9IGR5O1xuICAgICAgICB0b3VjaEV2dCA9IHRvdWNoO1xuICAgICAgfVxuICAgICAgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LFxuICBfYXBwZW5kR2hvc3Q6IGZ1bmN0aW9uIF9hcHBlbmRHaG9zdCgpIHtcbiAgICAvLyBCdWcgaWYgdXNpbmcgc2NhbGUoKTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjYzNzA1OFxuICAgIC8vIE5vdCBiZWluZyBhZGp1c3RlZCBmb3JcbiAgICBpZiAoIWdob3N0RWwpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLm9wdGlvbnMuZmFsbGJhY2tPbkJvZHkgPyBkb2N1bWVudC5ib2R5IDogcm9vdEVsLFxuICAgICAgICByZWN0ID0gZ2V0UmVjdChkcmFnRWwsIHRydWUsIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5LCB0cnVlLCBjb250YWluZXIpLFxuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAvLyBQb3NpdGlvbiBhYnNvbHV0ZWx5XG4gICAgICBpZiAoUG9zaXRpb25HaG9zdEFic29sdXRlbHkpIHtcbiAgICAgICAgLy8gR2V0IHJlbGF0aXZlbHkgcG9zaXRpb25lZCBwYXJlbnRcbiAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGNvbnRhaW5lcjtcbiAgICAgICAgd2hpbGUgKGNzcyhnaG9zdFJlbGF0aXZlUGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycgJiYgY3NzKGdob3N0UmVsYXRpdmVQYXJlbnQsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgIT09IGRvY3VtZW50KSB7XG4gICAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdob3N0UmVsYXRpdmVQYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2hvc3RSZWxhdGl2ZVBhcmVudCAhPT0gZG9jdW1lbnQuYm9keSAmJiBnaG9zdFJlbGF0aXZlUGFyZW50ICE9PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAoZ2hvc3RSZWxhdGl2ZVBhcmVudCA9PT0gZG9jdW1lbnQpIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gICAgICAgICAgcmVjdC50b3AgKz0gZ2hvc3RSZWxhdGl2ZVBhcmVudC5zY3JvbGxUb3A7XG4gICAgICAgICAgcmVjdC5sZWZ0ICs9IGdob3N0UmVsYXRpdmVQYXJlbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50ID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICAgICAgICB9XG4gICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsID0gZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZ2hvc3RSZWxhdGl2ZVBhcmVudCk7XG4gICAgICB9XG4gICAgICBnaG9zdEVsID0gZHJhZ0VsLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgdG9nZ2xlQ2xhc3MoZ2hvc3RFbCwgb3B0aW9ucy5mYWxsYmFja0NsYXNzLCB0cnVlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCB0cnVlKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtJywgJycpO1xuICAgICAgY3NzKGdob3N0RWwsICdib3gtc2l6aW5nJywgJ2JvcmRlci1ib3gnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbWFyZ2luJywgMCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RvcCcsIHJlY3QudG9wKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbGVmdCcsIHJlY3QubGVmdCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3dpZHRoJywgcmVjdC53aWR0aCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnb3BhY2l0eScsICcwLjgnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAncG9zaXRpb24nLCBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSA/ICdhYnNvbHV0ZScgOiAnZml4ZWQnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnekluZGV4JywgJzEwMDAwMCcpO1xuICAgICAgY3NzKGdob3N0RWwsICdwb2ludGVyRXZlbnRzJywgJ25vbmUnKTtcbiAgICAgIFNvcnRhYmxlLmdob3N0ID0gZ2hvc3RFbDtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChnaG9zdEVsKTtcblxuICAgICAgLy8gU2V0IHRyYW5zZm9ybS1vcmlnaW5cbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtLW9yaWdpbicsIHRhcERpc3RhbmNlTGVmdCAvIHBhcnNlSW50KGdob3N0RWwuc3R5bGUud2lkdGgpICogMTAwICsgJyUgJyArIHRhcERpc3RhbmNlVG9wIC8gcGFyc2VJbnQoZ2hvc3RFbC5zdHlsZS5oZWlnaHQpICogMTAwICsgJyUnKTtcbiAgICB9XG4gIH0sXG4gIF9vbkRyYWdTdGFydDogZnVuY3Rpb24gX29uRHJhZ1N0YXJ0KCAvKipFdmVudCovZXZ0LCAvKipib29sZWFuKi9mYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGRhdGFUcmFuc2ZlciA9IGV2dC5kYXRhVHJhbnNmZXI7XG4gICAgdmFyIG9wdGlvbnMgPSBfdGhpcy5vcHRpb25zO1xuICAgIHBsdWdpbkV2ZW50KCdkcmFnU3RhcnQnLCB0aGlzLCB7XG4gICAgICBldnQ6IGV2dFxuICAgIH0pO1xuICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICB0aGlzLl9vbkRyb3AoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcGx1Z2luRXZlbnQoJ3NldHVwQ2xvbmUnLCB0aGlzKTtcbiAgICBpZiAoIVNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIGNsb25lRWwgPSBjbG9uZShkcmFnRWwpO1xuICAgICAgY2xvbmVFbC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICAgIGNsb25lRWwuZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICBjbG9uZUVsLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJyc7XG4gICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGNsb25lRWwsIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpO1xuICAgICAgU29ydGFibGUuY2xvbmUgPSBjbG9uZUVsO1xuICAgIH1cblxuICAgIC8vICMxMTQzOiBJRnJhbWUgc3VwcG9ydCB3b3JrYXJvdW5kXG4gICAgX3RoaXMuY2xvbmVJZCA9IF9uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBwbHVnaW5FdmVudCgnY2xvbmUnLCBfdGhpcyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuO1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLl9oaWRlQ2xvbmUoKTtcbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICBuYW1lOiAnY2xvbmUnXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAhZmFsbGJhY2sgJiYgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmRyYWdDbGFzcywgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgcHJvcGVyIGRyb3AgZXZlbnRzXG4gICAgaWYgKGZhbGxiYWNrKSB7XG4gICAgICBpZ25vcmVOZXh0Q2xpY2sgPSB0cnVlO1xuICAgICAgX3RoaXMuX2xvb3BJZCA9IHNldEludGVydmFsKF90aGlzLl9lbXVsYXRlRHJhZ092ZXIsIDUwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVW5kbyB3aGF0IHdhcyBzZXQgaW4gX3ByZXBhcmVEcmFnU3RhcnQgYmVmb3JlIGRyYWcgc3RhcnRlZFxuICAgICAgb2ZmKGRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2hlbmQnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBpZiAoZGF0YVRyYW5zZmVyKSB7XG4gICAgICAgIGRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gJ21vdmUnO1xuICAgICAgICBvcHRpb25zLnNldERhdGEgJiYgb3B0aW9ucy5zZXREYXRhLmNhbGwoX3RoaXMsIGRhdGFUcmFuc2ZlciwgZHJhZ0VsKTtcbiAgICAgIH1cbiAgICAgIG9uKGRvY3VtZW50LCAnZHJvcCcsIF90aGlzKTtcblxuICAgICAgLy8gIzEyNzYgZml4OlxuICAgICAgY3NzKGRyYWdFbCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVaKDApJyk7XG4gICAgfVxuICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSB0cnVlO1xuICAgIF90aGlzLl9kcmFnU3RhcnRJZCA9IF9uZXh0VGljayhfdGhpcy5fZHJhZ1N0YXJ0ZWQuYmluZChfdGhpcywgZmFsbGJhY2ssIGV2dCkpO1xuICAgIG9uKGRvY3VtZW50LCAnc2VsZWN0c3RhcnQnLCBfdGhpcyk7XG4gICAgbW92ZWQgPSB0cnVlO1xuICAgIGlmIChTYWZhcmkpIHtcbiAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAndXNlci1zZWxlY3QnLCAnbm9uZScpO1xuICAgIH1cbiAgfSxcbiAgLy8gUmV0dXJucyB0cnVlIC0gaWYgbm8gZnVydGhlciBhY3Rpb24gaXMgbmVlZGVkIChlaXRoZXIgaW5zZXJ0ZWQgb3IgYW5vdGhlciBjb25kaXRpb24pXG4gIF9vbkRyYWdPdmVyOiBmdW5jdGlvbiBfb25EcmFnT3ZlciggLyoqRXZlbnQqL2V2dCkge1xuICAgIHZhciBlbCA9IHRoaXMuZWwsXG4gICAgICB0YXJnZXQgPSBldnQudGFyZ2V0LFxuICAgICAgZHJhZ1JlY3QsXG4gICAgICB0YXJnZXRSZWN0LFxuICAgICAgcmV2ZXJ0LFxuICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgIGdyb3VwID0gb3B0aW9ucy5ncm91cCxcbiAgICAgIGFjdGl2ZVNvcnRhYmxlID0gU29ydGFibGUuYWN0aXZlLFxuICAgICAgaXNPd25lciA9IGFjdGl2ZUdyb3VwID09PSBncm91cCxcbiAgICAgIGNhblNvcnQgPSBvcHRpb25zLnNvcnQsXG4gICAgICBmcm9tU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCBhY3RpdmVTb3J0YWJsZSxcbiAgICAgIHZlcnRpY2FsLFxuICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgY29tcGxldGVkRmlyZWQgPSBmYWxzZTtcbiAgICBpZiAoX3NpbGVudCkgcmV0dXJuO1xuICAgIGZ1bmN0aW9uIGRyYWdPdmVyRXZlbnQobmFtZSwgZXh0cmEpIHtcbiAgICAgIHBsdWdpbkV2ZW50KG5hbWUsIF90aGlzLCBfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgIGV2dDogZXZ0LFxuICAgICAgICBpc093bmVyOiBpc093bmVyLFxuICAgICAgICBheGlzOiB2ZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCcsXG4gICAgICAgIHJldmVydDogcmV2ZXJ0LFxuICAgICAgICBkcmFnUmVjdDogZHJhZ1JlY3QsXG4gICAgICAgIHRhcmdldFJlY3Q6IHRhcmdldFJlY3QsXG4gICAgICAgIGNhblNvcnQ6IGNhblNvcnQsXG4gICAgICAgIGZyb21Tb3J0YWJsZTogZnJvbVNvcnRhYmxlLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWQsXG4gICAgICAgIG9uTW92ZTogZnVuY3Rpb24gb25Nb3ZlKHRhcmdldCwgYWZ0ZXIpIHtcbiAgICAgICAgICByZXR1cm4gX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIGdldFJlY3QodGFyZ2V0KSwgZXZ0LCBhZnRlcik7XG4gICAgICAgIH0sXG4gICAgICAgIGNoYW5nZWQ6IGNoYW5nZWRcbiAgICAgIH0sIGV4dHJhKSk7XG4gICAgfVxuXG4gICAgLy8gQ2FwdHVyZSBhbmltYXRpb24gc3RhdGVcbiAgICBmdW5jdGlvbiBjYXB0dXJlKCkge1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlJyk7XG4gICAgICBfdGhpcy5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgIGlmIChfdGhpcyAhPT0gZnJvbVNvcnRhYmxlKSB7XG4gICAgICAgIGZyb21Tb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gaW52b2NhdGlvbiB3aGVuIGRyYWdFbCBpcyBpbnNlcnRlZCAob3IgY29tcGxldGVkKVxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlZChpbnNlcnRpb24pIHtcbiAgICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyQ29tcGxldGVkJywge1xuICAgICAgICBpbnNlcnRpb246IGluc2VydGlvblxuICAgICAgfSk7XG4gICAgICBpZiAoaW5zZXJ0aW9uKSB7XG4gICAgICAgIC8vIENsb25lcyBtdXN0IGJlIGhpZGRlbiBiZWZvcmUgZm9sZGluZyBhbmltYXRpb24gdG8gY2FwdHVyZSBkcmFnUmVjdEFic29sdXRlIHByb3Blcmx5XG4gICAgICAgIGlmIChpc093bmVyKSB7XG4gICAgICAgICAgYWN0aXZlU29ydGFibGUuX2hpZGVDbG9uZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9zaG93Q2xvbmUoX3RoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpcyAhPT0gZnJvbVNvcnRhYmxlKSB7XG4gICAgICAgICAgLy8gU2V0IGdob3N0IGNsYXNzIHRvIG5ldyBzb3J0YWJsZSdzIGdob3N0IGNsYXNzXG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcyA6IGFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5naG9zdENsYXNzLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHV0U29ydGFibGUgIT09IF90aGlzICYmIF90aGlzICE9PSBTb3J0YWJsZS5hY3RpdmUpIHtcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF90aGlzO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGlzID09PSBTb3J0YWJsZS5hY3RpdmUgJiYgcHV0U29ydGFibGUpIHtcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBbmltYXRpb25cbiAgICAgICAgaWYgKGZyb21Tb3J0YWJsZSA9PT0gX3RoaXMpIHtcbiAgICAgICAgICBfdGhpcy5faWdub3JlV2hpbGVBbmltYXRpbmcgPSB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuYW5pbWF0ZUFsbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJBbmltYXRpb25Db21wbGV0ZScpO1xuICAgICAgICAgIF90aGlzLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoX3RoaXMgIT09IGZyb21Tb3J0YWJsZSkge1xuICAgICAgICAgIGZyb21Tb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgICAgZnJvbVNvcnRhYmxlLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gTnVsbCBsYXN0VGFyZ2V0IGlmIGl0IGlzIG5vdCBpbnNpZGUgYSBwcmV2aW91c2x5IHN3YXBwZWQgZWxlbWVudFxuICAgICAgaWYgKHRhcmdldCA9PT0gZHJhZ0VsICYmICFkcmFnRWwuYW5pbWF0ZWQgfHwgdGFyZ2V0ID09PSBlbCAmJiAhdGFyZ2V0LmFuaW1hdGVkKSB7XG4gICAgICAgIGxhc3RUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBubyBidWJibGluZyBhbmQgbm90IGZhbGxiYWNrXG4gICAgICBpZiAoIW9wdGlvbnMuZHJhZ292ZXJCdWJibGUgJiYgIWV2dC5yb290RWwgJiYgdGFyZ2V0ICE9PSBkb2N1bWVudCkge1xuICAgICAgICBkcmFnRWwucGFyZW50Tm9kZVtleHBhbmRvXS5faXNPdXRzaWRlVGhpc0VsKGV2dC50YXJnZXQpO1xuXG4gICAgICAgIC8vIERvIG5vdCBkZXRlY3QgZm9yIGVtcHR5IGluc2VydCBpZiBhbHJlYWR5IGluc2VydGVkXG4gICAgICAgICFpbnNlcnRpb24gJiYgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQoZXZ0KTtcbiAgICAgIH1cbiAgICAgICFvcHRpb25zLmRyYWdvdmVyQnViYmxlICYmIGV2dC5zdG9wUHJvcGFnYXRpb24gJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuIGNvbXBsZXRlZEZpcmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBDYWxsIHdoZW4gZHJhZ0VsIGhhcyBiZWVuIGluc2VydGVkXG4gICAgZnVuY3Rpb24gY2hhbmdlZCgpIHtcbiAgICAgIG5ld0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcbiAgICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgbmFtZTogJ2NoYW5nZScsXG4gICAgICAgIHRvRWw6IGVsLFxuICAgICAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgICAgIG5ld0RyYWdnYWJsZUluZGV4OiBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGV2dC5wcmV2ZW50RGVmYXVsdCAhPT0gdm9pZCAwKSB7XG4gICAgICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgdGFyZ2V0ID0gY2xvc2VzdCh0YXJnZXQsIG9wdGlvbnMuZHJhZ2dhYmxlLCBlbCwgdHJ1ZSk7XG4gICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXInKTtcbiAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuIGNvbXBsZXRlZEZpcmVkO1xuICAgIGlmIChkcmFnRWwuY29udGFpbnMoZXZ0LnRhcmdldCkgfHwgdGFyZ2V0LmFuaW1hdGVkICYmIHRhcmdldC5hbmltYXRpbmdYICYmIHRhcmdldC5hbmltYXRpbmdZIHx8IF90aGlzLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9PT0gdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICB9XG4gICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2U7XG4gICAgaWYgKGFjdGl2ZVNvcnRhYmxlICYmICFvcHRpb25zLmRpc2FibGVkICYmIChpc093bmVyID8gY2FuU29ydCB8fCAocmV2ZXJ0ID0gcGFyZW50RWwgIT09IHJvb3RFbCkgLy8gUmV2ZXJ0aW5nIGl0ZW0gaW50byB0aGUgb3JpZ2luYWwgbGlzdFxuICAgIDogcHV0U29ydGFibGUgPT09IHRoaXMgfHwgKHRoaXMubGFzdFB1dE1vZGUgPSBhY3RpdmVHcm91cC5jaGVja1B1bGwodGhpcywgYWN0aXZlU29ydGFibGUsIGRyYWdFbCwgZXZ0KSkgJiYgZ3JvdXAuY2hlY2tQdXQodGhpcywgYWN0aXZlU29ydGFibGUsIGRyYWdFbCwgZXZ0KSkpIHtcbiAgICAgIHZlcnRpY2FsID0gdGhpcy5fZ2V0RGlyZWN0aW9uKGV2dCwgdGFyZ2V0KSA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIGRyYWdSZWN0ID0gZ2V0UmVjdChkcmFnRWwpO1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJWYWxpZCcpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybiBjb21wbGV0ZWRGaXJlZDtcbiAgICAgIGlmIChyZXZlcnQpIHtcbiAgICAgICAgcGFyZW50RWwgPSByb290RWw7IC8vIGFjdHVhbGl6YXRpb25cbiAgICAgICAgY2FwdHVyZSgpO1xuICAgICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcbiAgICAgICAgZHJhZ092ZXJFdmVudCgncmV2ZXJ0Jyk7XG4gICAgICAgIGlmICghU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgICAgIGlmIChuZXh0RWwpIHtcbiAgICAgICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBuZXh0RWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBlbExhc3RDaGlsZCA9IGxhc3RDaGlsZChlbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuICAgICAgaWYgKCFlbExhc3RDaGlsZCB8fCBfZ2hvc3RJc0xhc3QoZXZ0LCB2ZXJ0aWNhbCwgdGhpcykgJiYgIWVsTGFzdENoaWxkLmFuaW1hdGVkKSB7XG4gICAgICAgIC8vIEluc2VydCB0byBlbmQgb2YgbGlzdFxuXG4gICAgICAgIC8vIElmIGFscmVhZHkgYXQgZW5kIG9mIGxpc3Q6IERvIG5vdCBpbnNlcnRcbiAgICAgICAgaWYgKGVsTGFzdENoaWxkID09PSBkcmFnRWwpIHtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIGEgbGFzdCBlbGVtZW50LCBpdCBpcyB0aGUgdGFyZ2V0XG4gICAgICAgIGlmIChlbExhc3RDaGlsZCAmJiBlbCA9PT0gZXZ0LnRhcmdldCkge1xuICAgICAgICAgIHRhcmdldCA9IGVsTGFzdENoaWxkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXRSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgdGFyZ2V0UmVjdCwgZXZ0LCAhIXRhcmdldCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgY2FwdHVyZSgpO1xuICAgICAgICAgIGlmIChlbExhc3RDaGlsZCAmJiBlbExhc3RDaGlsZC5uZXh0U2libGluZykge1xuICAgICAgICAgICAgLy8gdGhlIGxhc3QgZHJhZ2dhYmxlIGVsZW1lbnQgaXMgbm90IHRoZSBsYXN0IG5vZGVcbiAgICAgICAgICAgIGVsLmluc2VydEJlZm9yZShkcmFnRWwsIGVsTGFzdENoaWxkLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50RWwgPSBlbDsgLy8gYWN0dWFsaXphdGlvblxuXG4gICAgICAgICAgY2hhbmdlZCgpO1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZWxMYXN0Q2hpbGQgJiYgX2dob3N0SXNGaXJzdChldnQsIHZlcnRpY2FsLCB0aGlzKSkge1xuICAgICAgICAvLyBJbnNlcnQgdG8gc3RhcnQgb2YgbGlzdFxuICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IGdldENoaWxkKGVsLCAwLCBvcHRpb25zLCB0cnVlKTtcbiAgICAgICAgaWYgKGZpcnN0Q2hpbGQgPT09IGRyYWdFbCkge1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldCA9IGZpcnN0Q2hpbGQ7XG4gICAgICAgIHRhcmdldFJlY3QgPSBnZXRSZWN0KHRhcmdldCk7XG4gICAgICAgIGlmIChfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgdGFyZ2V0UmVjdCwgZXZ0LCBmYWxzZSkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgY2FwdHVyZSgpO1xuICAgICAgICAgIGVsLmluc2VydEJlZm9yZShkcmFnRWwsIGZpcnN0Q2hpbGQpO1xuICAgICAgICAgIHBhcmVudEVsID0gZWw7IC8vIGFjdHVhbGl6YXRpb25cblxuICAgICAgICAgIGNoYW5nZWQoKTtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldC5wYXJlbnROb2RlID09PSBlbCkge1xuICAgICAgICB0YXJnZXRSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gMCxcbiAgICAgICAgICB0YXJnZXRCZWZvcmVGaXJzdFN3YXAsXG4gICAgICAgICAgZGlmZmVyZW50TGV2ZWwgPSBkcmFnRWwucGFyZW50Tm9kZSAhPT0gZWwsXG4gICAgICAgICAgZGlmZmVyZW50Um93Q29sID0gIV9kcmFnRWxJblJvd0NvbHVtbihkcmFnRWwuYW5pbWF0ZWQgJiYgZHJhZ0VsLnRvUmVjdCB8fCBkcmFnUmVjdCwgdGFyZ2V0LmFuaW1hdGVkICYmIHRhcmdldC50b1JlY3QgfHwgdGFyZ2V0UmVjdCwgdmVydGljYWwpLFxuICAgICAgICAgIHNpZGUxID0gdmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JyxcbiAgICAgICAgICBzY3JvbGxlZFBhc3RUb3AgPSBpc1Njcm9sbGVkUGFzdCh0YXJnZXQsICd0b3AnLCAndG9wJykgfHwgaXNTY3JvbGxlZFBhc3QoZHJhZ0VsLCAndG9wJywgJ3RvcCcpLFxuICAgICAgICAgIHNjcm9sbEJlZm9yZSA9IHNjcm9sbGVkUGFzdFRvcCA/IHNjcm9sbGVkUGFzdFRvcC5zY3JvbGxUb3AgOiB2b2lkIDA7XG4gICAgICAgIGlmIChsYXN0VGFyZ2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXRCZWZvcmVGaXJzdFN3YXAgPSB0YXJnZXRSZWN0W3NpZGUxXTtcbiAgICAgICAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZTtcbiAgICAgICAgICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gIWRpZmZlcmVudFJvd0NvbCAmJiBvcHRpb25zLmludmVydFN3YXAgfHwgZGlmZmVyZW50TGV2ZWw7XG4gICAgICAgIH1cbiAgICAgICAgZGlyZWN0aW9uID0gX2dldFN3YXBEaXJlY3Rpb24oZXZ0LCB0YXJnZXQsIHRhcmdldFJlY3QsIHZlcnRpY2FsLCBkaWZmZXJlbnRSb3dDb2wgPyAxIDogb3B0aW9ucy5zd2FwVGhyZXNob2xkLCBvcHRpb25zLmludmVydGVkU3dhcFRocmVzaG9sZCA9PSBudWxsID8gb3B0aW9ucy5zd2FwVGhyZXNob2xkIDogb3B0aW9ucy5pbnZlcnRlZFN3YXBUaHJlc2hvbGQsIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQsIGxhc3RUYXJnZXQgPT09IHRhcmdldCk7XG4gICAgICAgIHZhciBzaWJsaW5nO1xuICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSAwKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGFyZ2V0IGlzIGJlc2lkZSBkcmFnRWwgaW4gcmVzcGVjdGl2ZSBkaXJlY3Rpb24gKGlnbm9yaW5nIGhpZGRlbiBlbGVtZW50cylcbiAgICAgICAgICB2YXIgZHJhZ0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBkcmFnSW5kZXggLT0gZGlyZWN0aW9uO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudEVsLmNoaWxkcmVuW2RyYWdJbmRleF07XG4gICAgICAgICAgfSB3aGlsZSAoc2libGluZyAmJiAoY3NzKHNpYmxpbmcsICdkaXNwbGF5JykgPT09ICdub25lJyB8fCBzaWJsaW5nID09PSBnaG9zdEVsKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgZHJhZ0VsIGlzIGFscmVhZHkgYmVzaWRlIHRhcmdldDogRG8gbm90IGluc2VydFxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAwIHx8IHNpYmxpbmcgPT09IHRhcmdldCkge1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIGxhc3REaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHZhciBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcsXG4gICAgICAgICAgYWZ0ZXIgPSBmYWxzZTtcbiAgICAgICAgYWZ0ZXIgPSBkaXJlY3Rpb24gPT09IDE7XG4gICAgICAgIHZhciBtb3ZlVmVjdG9yID0gX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIHRhcmdldFJlY3QsIGV2dCwgYWZ0ZXIpO1xuICAgICAgICBpZiAobW92ZVZlY3RvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAobW92ZVZlY3RvciA9PT0gMSB8fCBtb3ZlVmVjdG9yID09PSAtMSkge1xuICAgICAgICAgICAgYWZ0ZXIgPSBtb3ZlVmVjdG9yID09PSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfc2lsZW50ID0gdHJ1ZTtcbiAgICAgICAgICBzZXRUaW1lb3V0KF91bnNpbGVudCwgMzApO1xuICAgICAgICAgIGNhcHR1cmUoKTtcbiAgICAgICAgICBpZiAoYWZ0ZXIgJiYgIW5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBhZnRlciA/IG5leHRTaWJsaW5nIDogdGFyZ2V0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBVbmRvIGNocm9tZSdzIHNjcm9sbCBhZGp1c3RtZW50IChoYXMgbm8gZWZmZWN0IG9uIG90aGVyIGJyb3dzZXJzKVxuICAgICAgICAgIGlmIChzY3JvbGxlZFBhc3RUb3ApIHtcbiAgICAgICAgICAgIHNjcm9sbEJ5KHNjcm9sbGVkUGFzdFRvcCwgMCwgc2Nyb2xsQmVmb3JlIC0gc2Nyb2xsZWRQYXN0VG9wLnNjcm9sbFRvcCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudEVsID0gZHJhZ0VsLnBhcmVudE5vZGU7IC8vIGFjdHVhbGl6YXRpb25cblxuICAgICAgICAgIC8vIG11c3QgYmUgZG9uZSBiZWZvcmUgYW5pbWF0aW9uXG4gICAgICAgICAgaWYgKHRhcmdldEJlZm9yZUZpcnN0U3dhcCAhPT0gdW5kZWZpbmVkICYmICFpc0NpcmN1bXN0YW50aWFsSW52ZXJ0KSB7XG4gICAgICAgICAgICB0YXJnZXRNb3ZlRGlzdGFuY2UgPSBNYXRoLmFicyh0YXJnZXRCZWZvcmVGaXJzdFN3YXAgLSBnZXRSZWN0KHRhcmdldClbc2lkZTFdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hhbmdlZCgpO1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbC5jb250YWlucyhkcmFnRWwpKSB7XG4gICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIF9pZ25vcmVXaGlsZUFuaW1hdGluZzogbnVsbCxcbiAgX29mZk1vdmVFdmVudHM6IGZ1bmN0aW9uIF9vZmZNb3ZlRXZlbnRzKCkge1xuICAgIG9mZihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICBvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAnZHJhZ292ZXInLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgIG9mZihkb2N1bWVudCwgJ3RvdWNobW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgfSxcbiAgX29mZlVwRXZlbnRzOiBmdW5jdGlvbiBfb2ZmVXBFdmVudHMoKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSB0aGlzLmVsLm93bmVyRG9jdW1lbnQ7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdwb2ludGVyY2FuY2VsJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYoZG9jdW1lbnQsICdzZWxlY3RzdGFydCcsIHRoaXMpO1xuICB9LFxuICBfb25Ecm9wOiBmdW5jdGlvbiBfb25Ecm9wKCAvKipFdmVudCovZXZ0KSB7XG4gICAgdmFyIGVsID0gdGhpcy5lbCxcbiAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnRcbiAgICBuZXdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG4gICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBpbmRleChkcmFnRWwsIG9wdGlvbnMuZHJhZ2dhYmxlKTtcbiAgICBwbHVnaW5FdmVudCgnZHJvcCcsIHRoaXMsIHtcbiAgICAgIGV2dDogZXZ0XG4gICAgfSk7XG4gICAgcGFyZW50RWwgPSBkcmFnRWwgJiYgZHJhZ0VsLnBhcmVudE5vZGU7XG5cbiAgICAvLyBHZXQgYWdhaW4gYWZ0ZXIgcGx1Z2luIGV2ZW50XG4gICAgbmV3SW5kZXggPSBpbmRleChkcmFnRWwpO1xuICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG4gICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIHRoaXMuX251bGxpbmcoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlO1xuICAgIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQgPSBmYWxzZTtcbiAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZTtcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2xvb3BJZCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2RyYWdTdGFydFRpbWVyKTtcbiAgICBfY2FuY2VsTmV4dFRpY2sodGhpcy5jbG9uZUlkKTtcbiAgICBfY2FuY2VsTmV4dFRpY2sodGhpcy5fZHJhZ1N0YXJ0SWQpO1xuXG4gICAgLy8gVW5iaW5kIGV2ZW50c1xuICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgb2ZmKGRvY3VtZW50LCAnZHJvcCcsIHRoaXMpO1xuICAgICAgb2ZmKGVsLCAnZHJhZ3N0YXJ0JywgdGhpcy5fb25EcmFnU3RhcnQpO1xuICAgIH1cbiAgICB0aGlzLl9vZmZNb3ZlRXZlbnRzKCk7XG4gICAgdGhpcy5fb2ZmVXBFdmVudHMoKTtcbiAgICBpZiAoU2FmYXJpKSB7XG4gICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ3VzZXItc2VsZWN0JywgJycpO1xuICAgIH1cbiAgICBjc3MoZHJhZ0VsLCAndHJhbnNmb3JtJywgJycpO1xuICAgIGlmIChldnQpIHtcbiAgICAgIGlmIChtb3ZlZCkge1xuICAgICAgICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgIW9wdGlvbnMuZHJvcEJ1YmJsZSAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgICBnaG9zdEVsICYmIGdob3N0RWwucGFyZW50Tm9kZSAmJiBnaG9zdEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZ2hvc3RFbCk7XG4gICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgICAvLyBSZW1vdmUgY2xvbmUocylcbiAgICAgICAgY2xvbmVFbCAmJiBjbG9uZUVsLnBhcmVudE5vZGUgJiYgY2xvbmVFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lRWwpO1xuICAgICAgfVxuICAgICAgaWYgKGRyYWdFbCkge1xuICAgICAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgICBvZmYoZHJhZ0VsLCAnZHJhZ2VuZCcsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIF9kaXNhYmxlRHJhZ2dhYmxlKGRyYWdFbCk7XG4gICAgICAgIGRyYWdFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnO1xuXG4gICAgICAgIC8vIFJlbW92ZSBjbGFzc2VzXG4gICAgICAgIC8vIGdob3N0Q2xhc3MgaXMgYWRkZWQgaW4gZHJhZ1N0YXJ0ZWRcbiAgICAgICAgaWYgKG1vdmVkICYmICFhd2FpdGluZ0RyYWdTdGFydGVkKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcyA6IHRoaXMub3B0aW9ucy5naG9zdENsYXNzLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTtcblxuICAgICAgICAvLyBEcmFnIHN0b3AgZXZlbnRcbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgIG5hbWU6ICd1bmNob29zZScsXG4gICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgbmV3SW5kZXg6IG51bGwsXG4gICAgICAgICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG51bGwsXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocm9vdEVsICE9PSBwYXJlbnRFbCkge1xuICAgICAgICAgIGlmIChuZXdJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAvLyBBZGQgZXZlbnRcbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgbmFtZTogJ2FkZCcsXG4gICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBmcm9tRWw6IHJvb3RFbCxcbiAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUmVtb3ZlIGV2ZW50XG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICBuYW1lOiAncmVtb3ZlJyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGRyYWcgZnJvbSBvbmUgbGlzdCBhbmQgZHJvcCBpbnRvIGFub3RoZXJcbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgbmFtZTogJ3NvcnQnLFxuICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgZnJvbUVsOiByb290RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICBuYW1lOiAnc29ydCcsXG4gICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5zYXZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG5ld0luZGV4ICE9PSBvbGRJbmRleCkge1xuICAgICAgICAgICAgaWYgKG5ld0luZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgLy8gZHJhZyAmIGRyb3Agd2l0aGluIHRoZSBzYW1lIGxpc3RcbiAgICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICd1cGRhdGUnLFxuICAgICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdzb3J0JyxcbiAgICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChTb3J0YWJsZS5hY3RpdmUpIHtcbiAgICAgICAgICAvKiBqc2hpbnQgZXFudWxsOnRydWUgKi9cbiAgICAgICAgICBpZiAobmV3SW5kZXggPT0gbnVsbCB8fCBuZXdJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5ld0luZGV4ID0gb2xkSW5kZXg7XG4gICAgICAgICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICAgIG5hbWU6ICdlbmQnLFxuICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIFNhdmUgc29ydGluZ1xuICAgICAgICAgIHRoaXMuc2F2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX251bGxpbmcoKTtcbiAgfSxcbiAgX251bGxpbmc6IGZ1bmN0aW9uIF9udWxsaW5nKCkge1xuICAgIHBsdWdpbkV2ZW50KCdudWxsaW5nJywgdGhpcyk7XG4gICAgcm9vdEVsID0gZHJhZ0VsID0gcGFyZW50RWwgPSBnaG9zdEVsID0gbmV4dEVsID0gY2xvbmVFbCA9IGxhc3REb3duRWwgPSBjbG9uZUhpZGRlbiA9IHRhcEV2dCA9IHRvdWNoRXZ0ID0gbW92ZWQgPSBuZXdJbmRleCA9IG5ld0RyYWdnYWJsZUluZGV4ID0gb2xkSW5kZXggPSBvbGREcmFnZ2FibGVJbmRleCA9IGxhc3RUYXJnZXQgPSBsYXN0RGlyZWN0aW9uID0gcHV0U29ydGFibGUgPSBhY3RpdmVHcm91cCA9IFNvcnRhYmxlLmRyYWdnZWQgPSBTb3J0YWJsZS5naG9zdCA9IFNvcnRhYmxlLmNsb25lID0gU29ydGFibGUuYWN0aXZlID0gbnVsbDtcbiAgICBzYXZlZElucHV0Q2hlY2tlZC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgZWwuY2hlY2tlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgc2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gbGFzdER4ID0gbGFzdER5ID0gMDtcbiAgfSxcbiAgaGFuZGxlRXZlbnQ6IGZ1bmN0aW9uIGhhbmRsZUV2ZW50KCAvKipFdmVudCovZXZ0KSB7XG4gICAgc3dpdGNoIChldnQudHlwZSkge1xuICAgICAgY2FzZSAnZHJvcCc6XG4gICAgICBjYXNlICdkcmFnZW5kJzpcbiAgICAgICAgdGhpcy5fb25Ecm9wKGV2dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZHJhZ2VudGVyJzpcbiAgICAgIGNhc2UgJ2RyYWdvdmVyJzpcbiAgICAgICAgaWYgKGRyYWdFbCkge1xuICAgICAgICAgIHRoaXMuX29uRHJhZ092ZXIoZXZ0KTtcbiAgICAgICAgICBfZ2xvYmFsRHJhZ092ZXIoZXZ0KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdHN0YXJ0JzpcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSxcbiAgLyoqXHJcbiAgICogU2VyaWFsaXplcyB0aGUgaXRlbSBpbnRvIGFuIGFycmF5IG9mIHN0cmluZy5cclxuICAgKiBAcmV0dXJucyB7U3RyaW5nW119XHJcbiAgICovXG4gIHRvQXJyYXk6IGZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgdmFyIG9yZGVyID0gW10sXG4gICAgICBlbCxcbiAgICAgIGNoaWxkcmVuID0gdGhpcy5lbC5jaGlsZHJlbixcbiAgICAgIGkgPSAwLFxuICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgZm9yICg7IGkgPCBuOyBpKyspIHtcbiAgICAgIGVsID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoY2xvc2VzdChlbCwgb3B0aW9ucy5kcmFnZ2FibGUsIHRoaXMuZWwsIGZhbHNlKSkge1xuICAgICAgICBvcmRlci5wdXNoKGVsLmdldEF0dHJpYnV0ZShvcHRpb25zLmRhdGFJZEF0dHIpIHx8IF9nZW5lcmF0ZUlkKGVsKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcmRlcjtcbiAgfSxcbiAgLyoqXHJcbiAgICogU29ydHMgdGhlIGVsZW1lbnRzIGFjY29yZGluZyB0byB0aGUgYXJyYXkuXHJcbiAgICogQHBhcmFtICB7U3RyaW5nW119ICBvcmRlciAgb3JkZXIgb2YgdGhlIGl0ZW1zXHJcbiAgICovXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQob3JkZXIsIHVzZUFuaW1hdGlvbikge1xuICAgIHZhciBpdGVtcyA9IHt9LFxuICAgICAgcm9vdEVsID0gdGhpcy5lbDtcbiAgICB0aGlzLnRvQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCwgaSkge1xuICAgICAgdmFyIGVsID0gcm9vdEVsLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGNsb3Nlc3QoZWwsIHRoaXMub3B0aW9ucy5kcmFnZ2FibGUsIHJvb3RFbCwgZmFsc2UpKSB7XG4gICAgICAgIGl0ZW1zW2lkXSA9IGVsO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICAgIHVzZUFuaW1hdGlvbiAmJiB0aGlzLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICBpZiAoaXRlbXNbaWRdKSB7XG4gICAgICAgIHJvb3RFbC5yZW1vdmVDaGlsZChpdGVtc1tpZF0pO1xuICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoaXRlbXNbaWRdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VBbmltYXRpb24gJiYgdGhpcy5hbmltYXRlQWxsKCk7XG4gIH0sXG4gIC8qKlxyXG4gICAqIFNhdmUgdGhlIGN1cnJlbnQgc29ydGluZ1xyXG4gICAqL1xuICBzYXZlOiBmdW5jdGlvbiBzYXZlKCkge1xuICAgIHZhciBzdG9yZSA9IHRoaXMub3B0aW9ucy5zdG9yZTtcbiAgICBzdG9yZSAmJiBzdG9yZS5zZXQgJiYgc3RvcmUuc2V0KHRoaXMpO1xuICB9LFxuICAvKipcclxuICAgKiBGb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQsIGdldCB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIGJ5IHRlc3RpbmcgdGhlIGVsZW1lbnQgaXRzZWxmIGFuZCB0cmF2ZXJzaW5nIHVwIHRocm91Z2ggaXRzIGFuY2VzdG9ycyBpbiB0aGUgRE9NIHRyZWUuXHJcbiAgICogQHBhcmFtICAge0hUTUxFbGVtZW50fSAgZWxcclxuICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgICBbc2VsZWN0b3JdICBkZWZhdWx0OiBgb3B0aW9ucy5kcmFnZ2FibGVgXHJcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fG51bGx9XHJcbiAgICovXG4gIGNsb3Nlc3Q6IGZ1bmN0aW9uIGNsb3Nlc3QkMShlbCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gY2xvc2VzdChlbCwgc2VsZWN0b3IgfHwgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSwgdGhpcy5lbCwgZmFsc2UpO1xuICB9LFxuICAvKipcclxuICAgKiBTZXQvZ2V0IG9wdGlvblxyXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcclxuICAgKiBAcGFyYW0gICB7Kn0gICAgICBbdmFsdWVdXHJcbiAgICogQHJldHVybnMgeyp9XHJcbiAgICovXG4gIG9wdGlvbjogZnVuY3Rpb24gb3B0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBvcHRpb25zW25hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbW9kaWZpZWRWYWx1ZSA9IFBsdWdpbk1hbmFnZXIubW9kaWZ5T3B0aW9uKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIGlmICh0eXBlb2YgbW9kaWZpZWRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgb3B0aW9uc1tuYW1lXSA9IG1vZGlmaWVkVmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zW25hbWVdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PT0gJ2dyb3VwJykge1xuICAgICAgICBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgLyoqXHJcbiAgICogRGVzdHJveVxyXG4gICAqL1xuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHBsdWdpbkV2ZW50KCdkZXN0cm95JywgdGhpcyk7XG4gICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICBlbFtleHBhbmRvXSA9IG51bGw7XG4gICAgb2ZmKGVsLCAnbW91c2Vkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gICAgb2ZmKGVsLCAndG91Y2hzdGFydCcsIHRoaXMuX29uVGFwU3RhcnQpO1xuICAgIG9mZihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICBvZmYoZWwsICdkcmFnb3ZlcicsIHRoaXMpO1xuICAgICAgb2ZmKGVsLCAnZHJhZ2VudGVyJywgdGhpcyk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBkcmFnZ2FibGUgYXR0cmlidXRlc1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnW2RyYWdnYWJsZV0nKSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RyYWdnYWJsZScpO1xuICAgIH0pO1xuICAgIHRoaXMuX29uRHJvcCgpO1xuICAgIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuICAgIHNvcnRhYmxlcy5zcGxpY2Uoc29ydGFibGVzLmluZGV4T2YodGhpcy5lbCksIDEpO1xuICAgIHRoaXMuZWwgPSBlbCA9IG51bGw7XG4gIH0sXG4gIF9oaWRlQ2xvbmU6IGZ1bmN0aW9uIF9oaWRlQ2xvbmUoKSB7XG4gICAgaWYgKCFjbG9uZUhpZGRlbikge1xuICAgICAgcGx1Z2luRXZlbnQoJ2hpZGVDbG9uZScsIHRoaXMpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjtcbiAgICAgIGNzcyhjbG9uZUVsLCAnZGlzcGxheScsICdub25lJyk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlICYmIGNsb25lRWwucGFyZW50Tm9kZSkge1xuICAgICAgICBjbG9uZUVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmVFbCk7XG4gICAgICB9XG4gICAgICBjbG9uZUhpZGRlbiA9IHRydWU7XG4gICAgfVxuICB9LFxuICBfc2hvd0Nsb25lOiBmdW5jdGlvbiBfc2hvd0Nsb25lKHB1dFNvcnRhYmxlKSB7XG4gICAgaWYgKHB1dFNvcnRhYmxlLmxhc3RQdXRNb2RlICE9PSAnY2xvbmUnKSB7XG4gICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNsb25lSGlkZGVuKSB7XG4gICAgICBwbHVnaW5FdmVudCgnc2hvd0Nsb25lJywgdGhpcyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuO1xuXG4gICAgICAvLyBzaG93IGNsb25lIGF0IGRyYWdFbCBvciBvcmlnaW5hbCBwb3NpdGlvblxuICAgICAgaWYgKGRyYWdFbC5wYXJlbnROb2RlID09IHJvb3RFbCAmJiAhdGhpcy5vcHRpb25zLmdyb3VwLnJldmVydENsb25lKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcbiAgICAgIH0gZWxzZSBpZiAobmV4dEVsKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgbmV4dEVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChjbG9uZUVsKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ3JvdXAucmV2ZXJ0Q2xvbmUpIHtcbiAgICAgICAgdGhpcy5hbmltYXRlKGRyYWdFbCwgY2xvbmVFbCk7XG4gICAgICB9XG4gICAgICBjc3MoY2xvbmVFbCwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgICBjbG9uZUhpZGRlbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIF9nbG9iYWxEcmFnT3ZlciggLyoqRXZlbnQqL2V2dCkge1xuICBpZiAoZXZ0LmRhdGFUcmFuc2Zlcikge1xuICAgIGV2dC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdtb3ZlJztcbiAgfVxuICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbn1cbmZ1bmN0aW9uIF9vbk1vdmUoZnJvbUVsLCB0b0VsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXRFbCwgdGFyZ2V0UmVjdCwgb3JpZ2luYWxFdmVudCwgd2lsbEluc2VydEFmdGVyKSB7XG4gIHZhciBldnQsXG4gICAgc29ydGFibGUgPSBmcm9tRWxbZXhwYW5kb10sXG4gICAgb25Nb3ZlRm4gPSBzb3J0YWJsZS5vcHRpb25zLm9uTW92ZSxcbiAgICByZXRWYWw7XG4gIC8vIFN1cHBvcnQgZm9yIG5ldyBDdXN0b21FdmVudCBmZWF0dXJlXG4gIGlmICh3aW5kb3cuQ3VzdG9tRXZlbnQgJiYgIUlFMTFPckxlc3MgJiYgIUVkZ2UpIHtcbiAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ21vdmUnLCB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2dC5pbml0RXZlbnQoJ21vdmUnLCB0cnVlLCB0cnVlKTtcbiAgfVxuICBldnQudG8gPSB0b0VsO1xuICBldnQuZnJvbSA9IGZyb21FbDtcbiAgZXZ0LmRyYWdnZWQgPSBkcmFnRWw7XG4gIGV2dC5kcmFnZ2VkUmVjdCA9IGRyYWdSZWN0O1xuICBldnQucmVsYXRlZCA9IHRhcmdldEVsIHx8IHRvRWw7XG4gIGV2dC5yZWxhdGVkUmVjdCA9IHRhcmdldFJlY3QgfHwgZ2V0UmVjdCh0b0VsKTtcbiAgZXZ0LndpbGxJbnNlcnRBZnRlciA9IHdpbGxJbnNlcnRBZnRlcjtcbiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICBmcm9tRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICBpZiAob25Nb3ZlRm4pIHtcbiAgICByZXRWYWwgPSBvbk1vdmVGbi5jYWxsKHNvcnRhYmxlLCBldnQsIG9yaWdpbmFsRXZlbnQpO1xuICB9XG4gIHJldHVybiByZXRWYWw7XG59XG5mdW5jdGlvbiBfZGlzYWJsZURyYWdnYWJsZShlbCkge1xuICBlbC5kcmFnZ2FibGUgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIF91bnNpbGVudCgpIHtcbiAgX3NpbGVudCA9IGZhbHNlO1xufVxuZnVuY3Rpb24gX2dob3N0SXNGaXJzdChldnQsIHZlcnRpY2FsLCBzb3J0YWJsZSkge1xuICB2YXIgZmlyc3RFbFJlY3QgPSBnZXRSZWN0KGdldENoaWxkKHNvcnRhYmxlLmVsLCAwLCBzb3J0YWJsZS5vcHRpb25zLCB0cnVlKSk7XG4gIHZhciBjaGlsZENvbnRhaW5pbmdSZWN0ID0gZ2V0Q2hpbGRDb250YWluaW5nUmVjdEZyb21FbGVtZW50KHNvcnRhYmxlLmVsLCBzb3J0YWJsZS5vcHRpb25zLCBnaG9zdEVsKTtcbiAgdmFyIHNwYWNlciA9IDEwO1xuICByZXR1cm4gdmVydGljYWwgPyBldnQuY2xpZW50WCA8IGNoaWxkQ29udGFpbmluZ1JlY3QubGVmdCAtIHNwYWNlciB8fCBldnQuY2xpZW50WSA8IGZpcnN0RWxSZWN0LnRvcCAmJiBldnQuY2xpZW50WCA8IGZpcnN0RWxSZWN0LnJpZ2h0IDogZXZ0LmNsaWVudFkgPCBjaGlsZENvbnRhaW5pbmdSZWN0LnRvcCAtIHNwYWNlciB8fCBldnQuY2xpZW50WSA8IGZpcnN0RWxSZWN0LmJvdHRvbSAmJiBldnQuY2xpZW50WCA8IGZpcnN0RWxSZWN0LmxlZnQ7XG59XG5mdW5jdGlvbiBfZ2hvc3RJc0xhc3QoZXZ0LCB2ZXJ0aWNhbCwgc29ydGFibGUpIHtcbiAgdmFyIGxhc3RFbFJlY3QgPSBnZXRSZWN0KGxhc3RDaGlsZChzb3J0YWJsZS5lbCwgc29ydGFibGUub3B0aW9ucy5kcmFnZ2FibGUpKTtcbiAgdmFyIGNoaWxkQ29udGFpbmluZ1JlY3QgPSBnZXRDaGlsZENvbnRhaW5pbmdSZWN0RnJvbUVsZW1lbnQoc29ydGFibGUuZWwsIHNvcnRhYmxlLm9wdGlvbnMsIGdob3N0RWwpO1xuICB2YXIgc3BhY2VyID0gMTA7XG4gIHJldHVybiB2ZXJ0aWNhbCA/IGV2dC5jbGllbnRYID4gY2hpbGRDb250YWluaW5nUmVjdC5yaWdodCArIHNwYWNlciB8fCBldnQuY2xpZW50WSA+IGxhc3RFbFJlY3QuYm90dG9tICYmIGV2dC5jbGllbnRYID4gbGFzdEVsUmVjdC5sZWZ0IDogZXZ0LmNsaWVudFkgPiBjaGlsZENvbnRhaW5pbmdSZWN0LmJvdHRvbSArIHNwYWNlciB8fCBldnQuY2xpZW50WCA+IGxhc3RFbFJlY3QucmlnaHQgJiYgZXZ0LmNsaWVudFkgPiBsYXN0RWxSZWN0LnRvcDtcbn1cbmZ1bmN0aW9uIF9nZXRTd2FwRGlyZWN0aW9uKGV2dCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCwgc3dhcFRocmVzaG9sZCwgaW52ZXJ0ZWRTd2FwVGhyZXNob2xkLCBpbnZlcnRTd2FwLCBpc0xhc3RUYXJnZXQpIHtcbiAgdmFyIG1vdXNlT25BeGlzID0gdmVydGljYWwgPyBldnQuY2xpZW50WSA6IGV2dC5jbGllbnRYLFxuICAgIHRhcmdldExlbmd0aCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5oZWlnaHQgOiB0YXJnZXRSZWN0LndpZHRoLFxuICAgIHRhcmdldFMxID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LnRvcCA6IHRhcmdldFJlY3QubGVmdCxcbiAgICB0YXJnZXRTMiA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5ib3R0b20gOiB0YXJnZXRSZWN0LnJpZ2h0LFxuICAgIGludmVydCA9IGZhbHNlO1xuICBpZiAoIWludmVydFN3YXApIHtcbiAgICAvLyBOZXZlciBpbnZlcnQgb3IgY3JlYXRlIGRyYWdFbCBzaGFkb3cgd2hlbiB0YXJnZXQgbW92ZW1lbmV0IGNhdXNlcyBtb3VzZSB0byBtb3ZlIHBhc3QgdGhlIGVuZCBvZiByZWd1bGFyIHN3YXBUaHJlc2hvbGRcbiAgICBpZiAoaXNMYXN0VGFyZ2V0ICYmIHRhcmdldE1vdmVEaXN0YW5jZSA8IHRhcmdldExlbmd0aCAqIHN3YXBUaHJlc2hvbGQpIHtcbiAgICAgIC8vIG11bHRpcGxpZWQgb25seSBieSBzd2FwVGhyZXNob2xkIGJlY2F1c2UgbW91c2Ugd2lsbCBhbHJlYWR5IGJlIGluc2lkZSB0YXJnZXQgYnkgKDEgLSB0aHJlc2hvbGQpICogdGFyZ2V0TGVuZ3RoIC8gMlxuICAgICAgLy8gY2hlY2sgaWYgcGFzdCBmaXJzdCBpbnZlcnQgdGhyZXNob2xkIG9uIHNpZGUgb3Bwb3NpdGUgb2YgbGFzdERpcmVjdGlvblxuICAgICAgaWYgKCFwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggJiYgKGxhc3REaXJlY3Rpb24gPT09IDEgPyBtb3VzZU9uQXhpcyA+IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoICogaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIC8gMiA6IG1vdXNlT25BeGlzIDwgdGFyZ2V0UzIgLSB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyKSkge1xuICAgICAgICAvLyBwYXN0IGZpcnN0IGludmVydCB0aHJlc2hvbGQsIGRvIG5vdCByZXN0cmljdCBpbnZlcnRlZCB0aHJlc2hvbGQgdG8gZHJhZ0VsIHNoYWRvd1xuICAgICAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFwYXN0Rmlyc3RJbnZlcnRUaHJlc2gpIHtcbiAgICAgICAgLy8gZHJhZ0VsIHNoYWRvdyAodGFyZ2V0IG1vdmUgZGlzdGFuY2Ugc2hhZG93KVxuICAgICAgICBpZiAobGFzdERpcmVjdGlvbiA9PT0gMSA/IG1vdXNlT25BeGlzIDwgdGFyZ2V0UzEgKyB0YXJnZXRNb3ZlRGlzdGFuY2UgLy8gb3ZlciBkcmFnRWwgc2hhZG93XG4gICAgICAgIDogbW91c2VPbkF4aXMgPiB0YXJnZXRTMiAtIHRhcmdldE1vdmVEaXN0YW5jZSkge1xuICAgICAgICAgIHJldHVybiAtbGFzdERpcmVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW52ZXJ0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVndWxhclxuICAgICAgaWYgKG1vdXNlT25BeGlzID4gdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiAoMSAtIHN3YXBUaHJlc2hvbGQpIC8gMiAmJiBtb3VzZU9uQXhpcyA8IHRhcmdldFMyIC0gdGFyZ2V0TGVuZ3RoICogKDEgLSBzd2FwVGhyZXNob2xkKSAvIDIpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRJbnNlcnREaXJlY3Rpb24odGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaW52ZXJ0ID0gaW52ZXJ0IHx8IGludmVydFN3YXA7XG4gIGlmIChpbnZlcnQpIHtcbiAgICAvLyBJbnZlcnQgb2YgcmVndWxhclxuICAgIGlmIChtb3VzZU9uQXhpcyA8IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoICogaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIC8gMiB8fCBtb3VzZU9uQXhpcyA+IHRhcmdldFMyIC0gdGFyZ2V0TGVuZ3RoICogaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIC8gMikge1xuICAgICAgcmV0dXJuIG1vdXNlT25BeGlzID4gdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggLyAyID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLyoqXHJcbiAqIEdldHMgdGhlIGRpcmVjdGlvbiBkcmFnRWwgbXVzdCBiZSBzd2FwcGVkIHJlbGF0aXZlIHRvIHRhcmdldCBpbiBvcmRlciB0byBtYWtlIGl0XHJcbiAqIHNlZW0gdGhhdCBkcmFnRWwgaGFzIGJlZW4gXCJpbnNlcnRlZFwiIGludG8gdGhhdCBlbGVtZW50J3MgcG9zaXRpb25cclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IHRhcmdldCAgICAgICBUaGUgdGFyZ2V0IHdob3NlIHBvc2l0aW9uIGRyYWdFbCBpcyBiZWluZyBpbnNlcnRlZCBhdFxyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgIERpcmVjdGlvbiBkcmFnRWwgbXVzdCBiZSBzd2FwcGVkXHJcbiAqL1xuZnVuY3Rpb24gX2dldEluc2VydERpcmVjdGlvbih0YXJnZXQpIHtcbiAgaWYgKGluZGV4KGRyYWdFbCkgPCBpbmRleCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59XG5cbi8qKlxyXG4gKiBHZW5lcmF0ZSBpZFxyXG4gKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9IGVsXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xuZnVuY3Rpb24gX2dlbmVyYXRlSWQoZWwpIHtcbiAgdmFyIHN0ciA9IGVsLnRhZ05hbWUgKyBlbC5jbGFzc05hbWUgKyBlbC5zcmMgKyBlbC5ocmVmICsgZWwudGV4dENvbnRlbnQsXG4gICAgaSA9IHN0ci5sZW5ndGgsXG4gICAgc3VtID0gMDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHN1bSArPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gc3VtLnRvU3RyaW5nKDM2KTtcbn1cbmZ1bmN0aW9uIF9zYXZlSW5wdXRDaGVja2VkU3RhdGUocm9vdCkge1xuICBzYXZlZElucHV0Q2hlY2tlZC5sZW5ndGggPSAwO1xuICB2YXIgaW5wdXRzID0gcm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKTtcbiAgdmFyIGlkeCA9IGlucHV0cy5sZW5ndGg7XG4gIHdoaWxlIChpZHgtLSkge1xuICAgIHZhciBlbCA9IGlucHV0c1tpZHhdO1xuICAgIGVsLmNoZWNrZWQgJiYgc2F2ZWRJbnB1dENoZWNrZWQucHVzaChlbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9uZXh0VGljayhmbikge1xuICByZXR1cm4gc2V0VGltZW91dChmbiwgMCk7XG59XG5mdW5jdGlvbiBfY2FuY2VsTmV4dFRpY2soaWQpIHtcbiAgcmV0dXJuIGNsZWFyVGltZW91dChpZCk7XG59XG5cbi8vIEZpeGVkICM5NzM6XG5pZiAoZG9jdW1lbnRFeGlzdHMpIHtcbiAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgaWYgKChTb3J0YWJsZS5hY3RpdmUgfHwgYXdhaXRpbmdEcmFnU3RhcnRlZCkgJiYgZXZ0LmNhbmNlbGFibGUpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIEV4cG9ydCB1dGlsc1xuU29ydGFibGUudXRpbHMgPSB7XG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIGNzczogY3NzLFxuICBmaW5kOiBmaW5kLFxuICBpczogZnVuY3Rpb24gaXMoZWwsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuICEhY2xvc2VzdChlbCwgc2VsZWN0b3IsIGVsLCBmYWxzZSk7XG4gIH0sXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0aHJvdHRsZTogdGhyb3R0bGUsXG4gIGNsb3Nlc3Q6IGNsb3Nlc3QsXG4gIHRvZ2dsZUNsYXNzOiB0b2dnbGVDbGFzcyxcbiAgY2xvbmU6IGNsb25lLFxuICBpbmRleDogaW5kZXgsXG4gIG5leHRUaWNrOiBfbmV4dFRpY2ssXG4gIGNhbmNlbE5leHRUaWNrOiBfY2FuY2VsTmV4dFRpY2ssXG4gIGRldGVjdERpcmVjdGlvbjogX2RldGVjdERpcmVjdGlvbixcbiAgZ2V0Q2hpbGQ6IGdldENoaWxkLFxuICBleHBhbmRvOiBleHBhbmRvXG59O1xuXG4vKipcclxuICogR2V0IHRoZSBTb3J0YWJsZSBpbnN0YW5jZSBvZiBhbiBlbGVtZW50XHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50XHJcbiAqIEByZXR1cm4ge1NvcnRhYmxlfHVuZGVmaW5lZH0gICAgICAgICBUaGUgaW5zdGFuY2Ugb2YgU29ydGFibGVcclxuICovXG5Tb3J0YWJsZS5nZXQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudFtleHBhbmRvXTtcbn07XG5cbi8qKlxyXG4gKiBNb3VudCBhIHBsdWdpbiB0byBTb3J0YWJsZVxyXG4gKiBAcGFyYW0gIHsuLi5Tb3J0YWJsZVBsdWdpbnxTb3J0YWJsZVBsdWdpbltdfSBwbHVnaW5zICAgICAgIFBsdWdpbnMgYmVpbmcgbW91bnRlZFxyXG4gKi9cblNvcnRhYmxlLm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBwbHVnaW5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIGlmIChwbHVnaW5zWzBdLmNvbnN0cnVjdG9yID09PSBBcnJheSkgcGx1Z2lucyA9IHBsdWdpbnNbMF07XG4gIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgaWYgKCFwbHVnaW4ucHJvdG90eXBlIHx8ICFwbHVnaW4ucHJvdG90eXBlLmNvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBcIlNvcnRhYmxlOiBNb3VudGVkIHBsdWdpbiBtdXN0IGJlIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIG5vdCBcIi5jb25jYXQoe30udG9TdHJpbmcuY2FsbChwbHVnaW4pKTtcbiAgICB9XG4gICAgaWYgKHBsdWdpbi51dGlscykgU29ydGFibGUudXRpbHMgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgU29ydGFibGUudXRpbHMpLCBwbHVnaW4udXRpbHMpO1xuICAgIFBsdWdpbk1hbmFnZXIubW91bnQocGx1Z2luKTtcbiAgfSk7XG59O1xuXG4vKipcclxuICogQ3JlYXRlIHNvcnRhYmxlIGluc3RhbmNlXHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9ICBlbFxyXG4gKiBAcGFyYW0ge09iamVjdH0gICAgICBbb3B0aW9uc11cclxuICovXG5Tb3J0YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBTb3J0YWJsZShlbCwgb3B0aW9ucyk7XG59O1xuXG4vLyBFeHBvcnRcblNvcnRhYmxlLnZlcnNpb24gPSB2ZXJzaW9uO1xuXG52YXIgYXV0b1Njcm9sbHMgPSBbXSxcbiAgc2Nyb2xsRWwsXG4gIHNjcm9sbFJvb3RFbCxcbiAgc2Nyb2xsaW5nID0gZmFsc2UsXG4gIGxhc3RBdXRvU2Nyb2xsWCxcbiAgbGFzdEF1dG9TY3JvbGxZLFxuICB0b3VjaEV2dCQxLFxuICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbDtcbmZ1bmN0aW9uIEF1dG9TY3JvbGxQbHVnaW4oKSB7XG4gIGZ1bmN0aW9uIEF1dG9TY3JvbGwoKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIHNjcm9sbDogdHJ1ZSxcbiAgICAgIGZvcmNlQXV0b1Njcm9sbEZhbGxiYWNrOiBmYWxzZSxcbiAgICAgIHNjcm9sbFNlbnNpdGl2aXR5OiAzMCxcbiAgICAgIHNjcm9sbFNwZWVkOiAxMCxcbiAgICAgIGJ1YmJsZVNjcm9sbDogdHJ1ZVxuICAgIH07XG5cbiAgICAvLyBCaW5kIGFsbCBwcml2YXRlIG1ldGhvZHNcbiAgICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgICBpZiAoZm4uY2hhckF0KDApID09PSAnXycgJiYgdHlwZW9mIHRoaXNbZm5dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXNbZm5dID0gdGhpc1tmbl0uYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgQXV0b1Njcm9sbC5wcm90b3R5cGUgPSB7XG4gICAgZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIGRyYWdTdGFydGVkKF9yZWYpIHtcbiAgICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gX3JlZi5vcmlnaW5hbEV2ZW50O1xuICAgICAgaWYgKHRoaXMuc29ydGFibGUubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAnZHJhZ292ZXInLCB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgfSBlbHNlIGlmIChvcmlnaW5hbEV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckNvbXBsZXRlZDogZnVuY3Rpb24gZHJhZ092ZXJDb21wbGV0ZWQoX3JlZjIpIHtcbiAgICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gX3JlZjIub3JpZ2luYWxFdmVudDtcbiAgICAgIC8vIEZvciB3aGVuIGJ1YmJsaW5nIGlzIGNhbmNlbGVkIGFuZCB1c2luZyBmYWxsYmFjayAoZmFsbGJhY2sgJ3RvdWNobW92ZScgYWx3YXlzIHJlYWNoZWQpXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5kcmFnT3ZlckJ1YmJsZSAmJiAhb3JpZ2luYWxFdmVudC5yb290RWwpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlQXV0b1Njcm9sbChvcmlnaW5hbEV2ZW50KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyb3A6IGZ1bmN0aW9uIGRyb3AoKSB7XG4gICAgICBpZiAodGhpcy5zb3J0YWJsZS5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAnZHJhZ292ZXInLCB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgIH1cbiAgICAgIGNsZWFyUG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwoKTtcbiAgICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICAgIGNhbmNlbFRocm90dGxlKCk7XG4gICAgfSxcbiAgICBudWxsaW5nOiBmdW5jdGlvbiBudWxsaW5nKCkge1xuICAgICAgdG91Y2hFdnQkMSA9IHNjcm9sbFJvb3RFbCA9IHNjcm9sbEVsID0gc2Nyb2xsaW5nID0gcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgPSBsYXN0QXV0b1Njcm9sbFggPSBsYXN0QXV0b1Njcm9sbFkgPSBudWxsO1xuICAgICAgYXV0b1Njcm9sbHMubGVuZ3RoID0gMDtcbiAgICB9LFxuICAgIF9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGw6IGZ1bmN0aW9uIF9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwoZXZ0KSB7XG4gICAgICB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKGV2dCwgdHJ1ZSk7XG4gICAgfSxcbiAgICBfaGFuZGxlQXV0b1Njcm9sbDogZnVuY3Rpb24gX2hhbmRsZUF1dG9TY3JvbGwoZXZ0LCBmYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciB4ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFgsXG4gICAgICAgIHkgPSAoZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCkuY2xpZW50WSxcbiAgICAgICAgZWxlbSA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XG4gICAgICB0b3VjaEV2dCQxID0gZXZ0O1xuXG4gICAgICAvLyBJRSBkb2VzIG5vdCBzZWVtIHRvIGhhdmUgbmF0aXZlIGF1dG9zY3JvbGwsXG4gICAgICAvLyBFZGdlJ3MgYXV0b3Njcm9sbCBzZWVtcyB0b28gY29uZGl0aW9uYWwsXG4gICAgICAvLyBNQUNPUyBTYWZhcmkgZG9lcyBub3QgaGF2ZSBhdXRvc2Nyb2xsLFxuICAgICAgLy8gRmlyZWZveCBhbmQgQ2hyb21lIGFyZSBnb29kXG4gICAgICBpZiAoZmFsbGJhY2sgfHwgdGhpcy5vcHRpb25zLmZvcmNlQXV0b1Njcm9sbEZhbGxiYWNrIHx8IEVkZ2UgfHwgSUUxMU9yTGVzcyB8fCBTYWZhcmkpIHtcbiAgICAgICAgYXV0b1Njcm9sbChldnQsIHRoaXMub3B0aW9ucywgZWxlbSwgZmFsbGJhY2spO1xuXG4gICAgICAgIC8vIExpc3RlbmVyIGZvciBwb2ludGVyIGVsZW1lbnQgY2hhbmdlXG4gICAgICAgIHZhciBvZ0VsZW1TY3JvbGxlciA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsZW0sIHRydWUpO1xuICAgICAgICBpZiAoc2Nyb2xsaW5nICYmICghcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgfHwgeCAhPT0gbGFzdEF1dG9TY3JvbGxYIHx8IHkgIT09IGxhc3RBdXRvU2Nyb2xsWSkpIHtcbiAgICAgICAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCAmJiBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCk7XG4gICAgICAgICAgLy8gRGV0ZWN0IGZvciBwb2ludGVyIGVsZW0gY2hhbmdlLCBlbXVsYXRpbmcgbmF0aXZlIERuRCBiZWhhdmlvdXJcbiAgICAgICAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbGVtID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh4LCB5KSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAobmV3RWxlbSAhPT0gb2dFbGVtU2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgb2dFbGVtU2Nyb2xsZXIgPSBuZXdFbGVtO1xuICAgICAgICAgICAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdXRvU2Nyb2xsKGV2dCwgX3RoaXMub3B0aW9ucywgbmV3RWxlbSwgZmFsbGJhY2spO1xuICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICBsYXN0QXV0b1Njcm9sbFggPSB4O1xuICAgICAgICAgIGxhc3RBdXRvU2Nyb2xsWSA9IHk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIERuRCBpcyBlbmFibGVkIChhbmQgYnJvd3NlciBoYXMgZ29vZCBhdXRvc2Nyb2xsaW5nKSwgZmlyc3QgYXV0b3Njcm9sbCB3aWxsIGFscmVhZHkgc2Nyb2xsLCBzbyBnZXQgcGFyZW50IGF1dG9zY3JvbGwgb2YgZmlyc3QgYXV0b3Njcm9sbFxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5idWJibGVTY3JvbGwgfHwgZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgdHJ1ZSkgPT09IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKSkge1xuICAgICAgICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYXV0b1Njcm9sbChldnQsIHRoaXMub3B0aW9ucywgZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgZmFsc2UpLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoQXV0b1Njcm9sbCwge1xuICAgIHBsdWdpbk5hbWU6ICdzY3JvbGwnLFxuICAgIGluaXRpYWxpemVCeURlZmF1bHQ6IHRydWVcbiAgfSk7XG59XG5mdW5jdGlvbiBjbGVhckF1dG9TY3JvbGxzKCkge1xuICBhdXRvU2Nyb2xscy5mb3JFYWNoKGZ1bmN0aW9uIChhdXRvU2Nyb2xsKSB7XG4gICAgY2xlYXJJbnRlcnZhbChhdXRvU2Nyb2xsLnBpZCk7XG4gIH0pO1xuICBhdXRvU2Nyb2xscyA9IFtdO1xufVxuZnVuY3Rpb24gY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpIHtcbiAgY2xlYXJJbnRlcnZhbChwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCk7XG59XG52YXIgYXV0b1Njcm9sbCA9IHRocm90dGxlKGZ1bmN0aW9uIChldnQsIG9wdGlvbnMsIHJvb3RFbCwgaXNGYWxsYmFjaykge1xuICAvLyBCdWc6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTUwNTUyMVxuICBpZiAoIW9wdGlvbnMuc2Nyb2xsKSByZXR1cm47XG4gIHZhciB4ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFgsXG4gICAgeSA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRZLFxuICAgIHNlbnMgPSBvcHRpb25zLnNjcm9sbFNlbnNpdGl2aXR5LFxuICAgIHNwZWVkID0gb3B0aW9ucy5zY3JvbGxTcGVlZCxcbiAgICB3aW5TY3JvbGxlciA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgdmFyIHNjcm9sbFRoaXNJbnN0YW5jZSA9IGZhbHNlLFxuICAgIHNjcm9sbEN1c3RvbUZuO1xuXG4gIC8vIE5ldyBzY3JvbGwgcm9vdCwgc2V0IHNjcm9sbEVsXG4gIGlmIChzY3JvbGxSb290RWwgIT09IHJvb3RFbCkge1xuICAgIHNjcm9sbFJvb3RFbCA9IHJvb3RFbDtcbiAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgc2Nyb2xsRWwgPSBvcHRpb25zLnNjcm9sbDtcbiAgICBzY3JvbGxDdXN0b21GbiA9IG9wdGlvbnMuc2Nyb2xsRm47XG4gICAgaWYgKHNjcm9sbEVsID09PSB0cnVlKSB7XG4gICAgICBzY3JvbGxFbCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KHJvb3RFbCwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIHZhciBsYXllcnNPdXQgPSAwO1xuICB2YXIgY3VycmVudFBhcmVudCA9IHNjcm9sbEVsO1xuICBkbyB7XG4gICAgdmFyIGVsID0gY3VycmVudFBhcmVudCxcbiAgICAgIHJlY3QgPSBnZXRSZWN0KGVsKSxcbiAgICAgIHRvcCA9IHJlY3QudG9wLFxuICAgICAgYm90dG9tID0gcmVjdC5ib3R0b20sXG4gICAgICBsZWZ0ID0gcmVjdC5sZWZ0LFxuICAgICAgcmlnaHQgPSByZWN0LnJpZ2h0LFxuICAgICAgd2lkdGggPSByZWN0LndpZHRoLFxuICAgICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQsXG4gICAgICBjYW5TY3JvbGxYID0gdm9pZCAwLFxuICAgICAgY2FuU2Nyb2xsWSA9IHZvaWQgMCxcbiAgICAgIHNjcm9sbFdpZHRoID0gZWwuc2Nyb2xsV2lkdGgsXG4gICAgICBzY3JvbGxIZWlnaHQgPSBlbC5zY3JvbGxIZWlnaHQsXG4gICAgICBlbENTUyA9IGNzcyhlbCksXG4gICAgICBzY3JvbGxQb3NYID0gZWwuc2Nyb2xsTGVmdCxcbiAgICAgIHNjcm9sbFBvc1kgPSBlbC5zY3JvbGxUb3A7XG4gICAgaWYgKGVsID09PSB3aW5TY3JvbGxlcikge1xuICAgICAgY2FuU2Nyb2xsWCA9IHdpZHRoIDwgc2Nyb2xsV2lkdGggJiYgKGVsQ1NTLm92ZXJmbG93WCA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WCA9PT0gJ3Njcm9sbCcgfHwgZWxDU1Mub3ZlcmZsb3dYID09PSAndmlzaWJsZScpO1xuICAgICAgY2FuU2Nyb2xsWSA9IGhlaWdodCA8IHNjcm9sbEhlaWdodCAmJiAoZWxDU1Mub3ZlcmZsb3dZID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dZID09PSAnc2Nyb2xsJyB8fCBlbENTUy5vdmVyZmxvd1kgPT09ICd2aXNpYmxlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhblNjcm9sbFggPSB3aWR0aCA8IHNjcm9sbFdpZHRoICYmIChlbENTUy5vdmVyZmxvd1ggPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1ggPT09ICdzY3JvbGwnKTtcbiAgICAgIGNhblNjcm9sbFkgPSBoZWlnaHQgPCBzY3JvbGxIZWlnaHQgJiYgKGVsQ1NTLm92ZXJmbG93WSA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WSA9PT0gJ3Njcm9sbCcpO1xuICAgIH1cbiAgICB2YXIgdnggPSBjYW5TY3JvbGxYICYmIChNYXRoLmFicyhyaWdodCAtIHgpIDw9IHNlbnMgJiYgc2Nyb2xsUG9zWCArIHdpZHRoIDwgc2Nyb2xsV2lkdGgpIC0gKE1hdGguYWJzKGxlZnQgLSB4KSA8PSBzZW5zICYmICEhc2Nyb2xsUG9zWCk7XG4gICAgdmFyIHZ5ID0gY2FuU2Nyb2xsWSAmJiAoTWF0aC5hYnMoYm90dG9tIC0geSkgPD0gc2VucyAmJiBzY3JvbGxQb3NZICsgaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0KSAtIChNYXRoLmFicyh0b3AgLSB5KSA8PSBzZW5zICYmICEhc2Nyb2xsUG9zWSk7XG4gICAgaWYgKCFhdXRvU2Nyb2xsc1tsYXllcnNPdXRdKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsYXllcnNPdXQ7IGkrKykge1xuICAgICAgICBpZiAoIWF1dG9TY3JvbGxzW2ldKSB7XG4gICAgICAgICAgYXV0b1Njcm9sbHNbaV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS52eCAhPSB2eCB8fCBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ5ICE9IHZ5IHx8IGF1dG9TY3JvbGxzW2xheWVyc091dF0uZWwgIT09IGVsKSB7XG4gICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLmVsID0gZWw7XG4gICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ4ID0gdng7XG4gICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ5ID0gdnk7XG4gICAgICBjbGVhckludGVydmFsKGF1dG9TY3JvbGxzW2xheWVyc091dF0ucGlkKTtcbiAgICAgIGlmICh2eCAhPSAwIHx8IHZ5ICE9IDApIHtcbiAgICAgICAgc2Nyb2xsVGhpc0luc3RhbmNlID0gdHJ1ZTtcbiAgICAgICAgLyoganNoaW50IGxvb3BmdW5jOnRydWUgKi9cbiAgICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5waWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gZW11bGF0ZSBkcmFnIG92ZXIgZHVyaW5nIGF1dG9zY3JvbGwgKGZhbGxiYWNrKSwgZW11bGF0aW5nIG5hdGl2ZSBEbkQgYmVoYXZpb3VyXG4gICAgICAgICAgaWYgKGlzRmFsbGJhY2sgJiYgdGhpcy5sYXllciA9PT0gMCkge1xuICAgICAgICAgICAgU29ydGFibGUuYWN0aXZlLl9vblRvdWNoTW92ZSh0b3VjaEV2dCQxKTsgLy8gVG8gbW92ZSBnaG9zdCBpZiBpdCBpcyBwb3NpdGlvbmVkIGFic29sdXRlbHlcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHNjcm9sbE9mZnNldFkgPSBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eSA/IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ5ICogc3BlZWQgOiAwO1xuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXRYID0gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnggPyBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eCAqIHNwZWVkIDogMDtcbiAgICAgICAgICBpZiAodHlwZW9mIHNjcm9sbEN1c3RvbUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsQ3VzdG9tRm4uY2FsbChTb3J0YWJsZS5kcmFnZ2VkLnBhcmVudE5vZGVbZXhwYW5kb10sIHNjcm9sbE9mZnNldFgsIHNjcm9sbE9mZnNldFksIGV2dCwgdG91Y2hFdnQkMSwgYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0uZWwpICE9PSAnY29udGludWUnKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc2Nyb2xsQnkoYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0uZWwsIHNjcm9sbE9mZnNldFgsIHNjcm9sbE9mZnNldFkpO1xuICAgICAgICB9LmJpbmQoe1xuICAgICAgICAgIGxheWVyOiBsYXllcnNPdXRcbiAgICAgICAgfSksIDI0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGF5ZXJzT3V0Kys7XG4gIH0gd2hpbGUgKG9wdGlvbnMuYnViYmxlU2Nyb2xsICYmIGN1cnJlbnRQYXJlbnQgIT09IHdpblNjcm9sbGVyICYmIChjdXJyZW50UGFyZW50ID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoY3VycmVudFBhcmVudCwgZmFsc2UpKSk7XG4gIHNjcm9sbGluZyA9IHNjcm9sbFRoaXNJbnN0YW5jZTsgLy8gaW4gY2FzZSBhbm90aGVyIGZ1bmN0aW9uIGNhdGNoZXMgc2Nyb2xsaW5nIGFzIGZhbHNlIGluIGJldHdlZW4gd2hlbiBpdCBpcyBub3Rcbn0sIDMwKTtcblxudmFyIGRyb3AgPSBmdW5jdGlvbiBkcm9wKF9yZWYpIHtcbiAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmLm9yaWdpbmFsRXZlbnQsXG4gICAgcHV0U29ydGFibGUgPSBfcmVmLnB1dFNvcnRhYmxlLFxuICAgIGRyYWdFbCA9IF9yZWYuZHJhZ0VsLFxuICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZi5hY3RpdmVTb3J0YWJsZSxcbiAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQgPSBfcmVmLmRpc3BhdGNoU29ydGFibGVFdmVudCxcbiAgICBoaWRlR2hvc3RGb3JUYXJnZXQgPSBfcmVmLmhpZGVHaG9zdEZvclRhcmdldCxcbiAgICB1bmhpZGVHaG9zdEZvclRhcmdldCA9IF9yZWYudW5oaWRlR2hvc3RGb3JUYXJnZXQ7XG4gIGlmICghb3JpZ2luYWxFdmVudCkgcmV0dXJuO1xuICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IGFjdGl2ZVNvcnRhYmxlO1xuICBoaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgdmFyIHRvdWNoID0gb3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlcyAmJiBvcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA/IG9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBvcmlnaW5hbEV2ZW50O1xuICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZKTtcbiAgdW5oaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgaWYgKHRvU29ydGFibGUgJiYgIXRvU29ydGFibGUuZWwuY29udGFpbnModGFyZ2V0KSkge1xuICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCgnc3BpbGwnKTtcbiAgICB0aGlzLm9uU3BpbGwoe1xuICAgICAgZHJhZ0VsOiBkcmFnRWwsXG4gICAgICBwdXRTb3J0YWJsZTogcHV0U29ydGFibGVcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIFJldmVydCgpIHt9XG5SZXZlcnQucHJvdG90eXBlID0ge1xuICBzdGFydEluZGV4OiBudWxsLFxuICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChfcmVmMikge1xuICAgIHZhciBvbGREcmFnZ2FibGVJbmRleCA9IF9yZWYyLm9sZERyYWdnYWJsZUluZGV4O1xuICAgIHRoaXMuc3RhcnRJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICB9LFxuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKF9yZWYzKSB7XG4gICAgdmFyIGRyYWdFbCA9IF9yZWYzLmRyYWdFbCxcbiAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjMucHV0U29ydGFibGU7XG4gICAgdGhpcy5zb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICBpZiAocHV0U29ydGFibGUpIHtcbiAgICAgIHB1dFNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgIH1cbiAgICB2YXIgbmV4dFNpYmxpbmcgPSBnZXRDaGlsZCh0aGlzLnNvcnRhYmxlLmVsLCB0aGlzLnN0YXJ0SW5kZXgsIHRoaXMub3B0aW9ucyk7XG4gICAgaWYgKG5leHRTaWJsaW5nKSB7XG4gICAgICB0aGlzLnNvcnRhYmxlLmVsLmluc2VydEJlZm9yZShkcmFnRWwsIG5leHRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zb3J0YWJsZS5lbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuICAgIH1cbiAgICB0aGlzLnNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICBpZiAocHV0U29ydGFibGUpIHtcbiAgICAgIHB1dFNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICB9XG4gIH0sXG4gIGRyb3A6IGRyb3Bcbn07XG5fZXh0ZW5kcyhSZXZlcnQsIHtcbiAgcGx1Z2luTmFtZTogJ3JldmVydE9uU3BpbGwnXG59KTtcbmZ1bmN0aW9uIFJlbW92ZSgpIHt9XG5SZW1vdmUucHJvdG90eXBlID0ge1xuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKF9yZWY0KSB7XG4gICAgdmFyIGRyYWdFbCA9IF9yZWY0LmRyYWdFbCxcbiAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjQucHV0U29ydGFibGU7XG4gICAgdmFyIHBhcmVudFNvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgdGhpcy5zb3J0YWJsZTtcbiAgICBwYXJlbnRTb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICBkcmFnRWwucGFyZW50Tm9kZSAmJiBkcmFnRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkcmFnRWwpO1xuICAgIHBhcmVudFNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgfSxcbiAgZHJvcDogZHJvcFxufTtcbl9leHRlbmRzKFJlbW92ZSwge1xuICBwbHVnaW5OYW1lOiAncmVtb3ZlT25TcGlsbCdcbn0pO1xuXG52YXIgbGFzdFN3YXBFbDtcbmZ1bmN0aW9uIFN3YXBQbHVnaW4oKSB7XG4gIGZ1bmN0aW9uIFN3YXAoKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIHN3YXBDbGFzczogJ3NvcnRhYmxlLXN3YXAtaGlnaGxpZ2h0J1xuICAgIH07XG4gIH1cbiAgU3dhcC5wcm90b3R5cGUgPSB7XG4gICAgZHJhZ1N0YXJ0OiBmdW5jdGlvbiBkcmFnU3RhcnQoX3JlZikge1xuICAgICAgdmFyIGRyYWdFbCA9IF9yZWYuZHJhZ0VsO1xuICAgICAgbGFzdFN3YXBFbCA9IGRyYWdFbDtcbiAgICB9LFxuICAgIGRyYWdPdmVyVmFsaWQ6IGZ1bmN0aW9uIGRyYWdPdmVyVmFsaWQoX3JlZjIpIHtcbiAgICAgIHZhciBjb21wbGV0ZWQgPSBfcmVmMi5jb21wbGV0ZWQsXG4gICAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgICAgb25Nb3ZlID0gX3JlZjIub25Nb3ZlLFxuICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYyLmFjdGl2ZVNvcnRhYmxlLFxuICAgICAgICBjaGFuZ2VkID0gX3JlZjIuY2hhbmdlZCxcbiAgICAgICAgY2FuY2VsID0gX3JlZjIuY2FuY2VsO1xuICAgICAgaWYgKCFhY3RpdmVTb3J0YWJsZS5vcHRpb25zLnN3YXApIHJldHVybjtcbiAgICAgIHZhciBlbCA9IHRoaXMuc29ydGFibGUuZWwsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgdmFyIHByZXZTd2FwRWwgPSBsYXN0U3dhcEVsO1xuICAgICAgICBpZiAob25Nb3ZlKHRhcmdldCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3ModGFyZ2V0LCBvcHRpb25zLnN3YXBDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgbGFzdFN3YXBFbCA9IHRhcmdldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0U3dhcEVsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldlN3YXBFbCAmJiBwcmV2U3dhcEVsICE9PSBsYXN0U3dhcEVsKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MocHJldlN3YXBFbCwgb3B0aW9ucy5zd2FwQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hhbmdlZCgpO1xuICAgICAgY29tcGxldGVkKHRydWUpO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKF9yZWYzKSB7XG4gICAgICB2YXIgYWN0aXZlU29ydGFibGUgPSBfcmVmMy5hY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMy5wdXRTb3J0YWJsZSxcbiAgICAgICAgZHJhZ0VsID0gX3JlZjMuZHJhZ0VsO1xuICAgICAgdmFyIHRvU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCB0aGlzLnNvcnRhYmxlO1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICBsYXN0U3dhcEVsICYmIHRvZ2dsZUNsYXNzKGxhc3RTd2FwRWwsIG9wdGlvbnMuc3dhcENsYXNzLCBmYWxzZSk7XG4gICAgICBpZiAobGFzdFN3YXBFbCAmJiAob3B0aW9ucy5zd2FwIHx8IHB1dFNvcnRhYmxlICYmIHB1dFNvcnRhYmxlLm9wdGlvbnMuc3dhcCkpIHtcbiAgICAgICAgaWYgKGRyYWdFbCAhPT0gbGFzdFN3YXBFbCkge1xuICAgICAgICAgIHRvU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgICAgICAgaWYgKHRvU29ydGFibGUgIT09IGFjdGl2ZVNvcnRhYmxlKSBhY3RpdmVTb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgICAgICBzd2FwTm9kZXMoZHJhZ0VsLCBsYXN0U3dhcEVsKTtcbiAgICAgICAgICB0b1NvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgICBpZiAodG9Tb3J0YWJsZSAhPT0gYWN0aXZlU29ydGFibGUpIGFjdGl2ZVNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbnVsbGluZzogZnVuY3Rpb24gbnVsbGluZygpIHtcbiAgICAgIGxhc3RTd2FwRWwgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKFN3YXAsIHtcbiAgICBwbHVnaW5OYW1lOiAnc3dhcCcsXG4gICAgZXZlbnRQcm9wZXJ0aWVzOiBmdW5jdGlvbiBldmVudFByb3BlcnRpZXMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzd2FwSXRlbTogbGFzdFN3YXBFbFxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gc3dhcE5vZGVzKG4xLCBuMikge1xuICB2YXIgcDEgPSBuMS5wYXJlbnROb2RlLFxuICAgIHAyID0gbjIucGFyZW50Tm9kZSxcbiAgICBpMSxcbiAgICBpMjtcbiAgaWYgKCFwMSB8fCAhcDIgfHwgcDEuaXNFcXVhbE5vZGUobjIpIHx8IHAyLmlzRXF1YWxOb2RlKG4xKSkgcmV0dXJuO1xuICBpMSA9IGluZGV4KG4xKTtcbiAgaTIgPSBpbmRleChuMik7XG4gIGlmIChwMS5pc0VxdWFsTm9kZShwMikgJiYgaTEgPCBpMikge1xuICAgIGkyKys7XG4gIH1cbiAgcDEuaW5zZXJ0QmVmb3JlKG4yLCBwMS5jaGlsZHJlbltpMV0pO1xuICBwMi5pbnNlcnRCZWZvcmUobjEsIHAyLmNoaWxkcmVuW2kyXSk7XG59XG5cbnZhciBtdWx0aURyYWdFbGVtZW50cyA9IFtdLFxuICBtdWx0aURyYWdDbG9uZXMgPSBbXSxcbiAgbGFzdE11bHRpRHJhZ1NlbGVjdCxcbiAgLy8gZm9yIHNlbGVjdGlvbiB3aXRoIG1vZGlmaWVyIGtleSBkb3duIChTSElGVClcbiAgbXVsdGlEcmFnU29ydGFibGUsXG4gIGluaXRpYWxGb2xkaW5nID0gZmFsc2UsXG4gIC8vIEluaXRpYWwgbXVsdGktZHJhZyBmb2xkIHdoZW4gZHJhZyBzdGFydGVkXG4gIGZvbGRpbmcgPSBmYWxzZSxcbiAgLy8gRm9sZGluZyBhbnkgb3RoZXIgdGltZVxuICBkcmFnU3RhcnRlZCA9IGZhbHNlLFxuICBkcmFnRWwkMSxcbiAgY2xvbmVzRnJvbVJlY3QsXG4gIGNsb25lc0hpZGRlbjtcbmZ1bmN0aW9uIE11bHRpRHJhZ1BsdWdpbigpIHtcbiAgZnVuY3Rpb24gTXVsdGlEcmFnKHNvcnRhYmxlKSB7XG4gICAgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG4gICAgZm9yICh2YXIgZm4gaW4gdGhpcykge1xuICAgICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2ZuXSA9IHRoaXNbZm5dLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghc29ydGFibGUub3B0aW9ucy5hdm9pZEltcGxpY2l0RGVzZWxlY3QpIHtcbiAgICAgIGlmIChzb3J0YWJsZS5vcHRpb25zLnN1cHBvcnRQb2ludGVyKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAncG9pbnRlcnVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgICBvbihkb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgfVxuICAgIH1cbiAgICBvbihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLl9jaGVja0tleURvd24pO1xuICAgIG9uKGRvY3VtZW50LCAna2V5dXAnLCB0aGlzLl9jaGVja0tleVVwKTtcbiAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgc2VsZWN0ZWRDbGFzczogJ3NvcnRhYmxlLXNlbGVjdGVkJyxcbiAgICAgIG11bHRpRHJhZ0tleTogbnVsbCxcbiAgICAgIGF2b2lkSW1wbGljaXREZXNlbGVjdDogZmFsc2UsXG4gICAgICBzZXREYXRhOiBmdW5jdGlvbiBzZXREYXRhKGRhdGFUcmFuc2ZlciwgZHJhZ0VsKSB7XG4gICAgICAgIHZhciBkYXRhID0gJyc7XG4gICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCwgaSkge1xuICAgICAgICAgICAgZGF0YSArPSAoIWkgPyAnJyA6ICcsICcpICsgbXVsdGlEcmFnRWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gZHJhZ0VsLnRleHRDb250ZW50O1xuICAgICAgICB9XG4gICAgICAgIGRhdGFUcmFuc2Zlci5zZXREYXRhKCdUZXh0JywgZGF0YSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBNdWx0aURyYWcucHJvdG90eXBlID0ge1xuICAgIG11bHRpRHJhZ0tleURvd246IGZhbHNlLFxuICAgIGlzTXVsdGlEcmFnOiBmYWxzZSxcbiAgICBkZWxheVN0YXJ0R2xvYmFsOiBmdW5jdGlvbiBkZWxheVN0YXJ0R2xvYmFsKF9yZWYpIHtcbiAgICAgIHZhciBkcmFnZ2VkID0gX3JlZi5kcmFnRWw7XG4gICAgICBkcmFnRWwkMSA9IGRyYWdnZWQ7XG4gICAgfSxcbiAgICBkZWxheUVuZGVkOiBmdW5jdGlvbiBkZWxheUVuZGVkKCkge1xuICAgICAgdGhpcy5pc011bHRpRHJhZyA9IH5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKTtcbiAgICB9LFxuICAgIHNldHVwQ2xvbmU6IGZ1bmN0aW9uIHNldHVwQ2xvbmUoX3JlZjIpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYyLnNvcnRhYmxlLFxuICAgICAgICBjYW5jZWwgPSBfcmVmMi5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLnB1c2goY2xvbmUobXVsdGlEcmFnRWxlbWVudHNbaV0pKTtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzW2ldLnNvcnRhYmxlSW5kZXggPSBtdWx0aURyYWdFbGVtZW50c1tpXS5zb3J0YWJsZUluZGV4O1xuICAgICAgICBtdWx0aURyYWdDbG9uZXNbaV0uZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICAgIG11bHRpRHJhZ0Nsb25lc1tpXS5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnO1xuICAgICAgICB0b2dnbGVDbGFzcyhtdWx0aURyYWdDbG9uZXNbaV0sIHRoaXMub3B0aW9ucy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzW2ldID09PSBkcmFnRWwkMSAmJiB0b2dnbGVDbGFzcyhtdWx0aURyYWdDbG9uZXNbaV0sIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpO1xuICAgICAgfVxuICAgICAgc29ydGFibGUuX2hpZGVDbG9uZSgpO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoX3JlZjMpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYzLnNvcnRhYmxlLFxuICAgICAgICByb290RWwgPSBfcmVmMy5yb290RWwsXG4gICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCA9IF9yZWYzLmRpc3BhdGNoU29ydGFibGVFdmVudCxcbiAgICAgICAgY2FuY2VsID0gX3JlZjMuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSkge1xuICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoICYmIG11bHRpRHJhZ1NvcnRhYmxlID09PSBzb3J0YWJsZSkge1xuICAgICAgICAgIGluc2VydE11bHRpRHJhZ0Nsb25lcyh0cnVlLCByb290RWwpO1xuICAgICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCgnY2xvbmUnKTtcbiAgICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd0Nsb25lOiBmdW5jdGlvbiBzaG93Q2xvbmUoX3JlZjQpIHtcbiAgICAgIHZhciBjbG9uZU5vd1Nob3duID0gX3JlZjQuY2xvbmVOb3dTaG93bixcbiAgICAgICAgcm9vdEVsID0gX3JlZjQucm9vdEVsLFxuICAgICAgICBjYW5jZWwgPSBfcmVmNC5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcbiAgICAgIGluc2VydE11bHRpRHJhZ0Nsb25lcyhmYWxzZSwgcm9vdEVsKTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICBjc3MoY2xvbmUsICdkaXNwbGF5JywgJycpO1xuICAgICAgfSk7XG4gICAgICBjbG9uZU5vd1Nob3duKCk7XG4gICAgICBjbG9uZXNIaWRkZW4gPSBmYWxzZTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgaGlkZUNsb25lOiBmdW5jdGlvbiBoaWRlQ2xvbmUoX3JlZjUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmNS5zb3J0YWJsZSxcbiAgICAgICAgY2xvbmVOb3dIaWRkZW4gPSBfcmVmNS5jbG9uZU5vd0hpZGRlbixcbiAgICAgICAgY2FuY2VsID0gX3JlZjUuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG4gICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgY3NzKGNsb25lLCAnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlICYmIGNsb25lLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBjbG9uZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjbG9uZU5vd0hpZGRlbigpO1xuICAgICAgY2xvbmVzSGlkZGVuID0gdHJ1ZTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgZHJhZ1N0YXJ0R2xvYmFsOiBmdW5jdGlvbiBkcmFnU3RhcnRHbG9iYWwoX3JlZjYpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY2LnNvcnRhYmxlO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnICYmIG11bHRpRHJhZ1NvcnRhYmxlKSB7XG4gICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlLm11bHRpRHJhZy5fZGVzZWxlY3RNdWx0aURyYWcoKTtcbiAgICAgIH1cbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU29ydCBtdWx0aS1kcmFnIGVsZW1lbnRzXG4gICAgICBtdWx0aURyYWdFbGVtZW50cyA9IG11bHRpRHJhZ0VsZW1lbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEuc29ydGFibGVJbmRleCAtIGIuc29ydGFibGVJbmRleDtcbiAgICAgIH0pO1xuICAgICAgZHJhZ1N0YXJ0ZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIGRyYWdTdGFydGVkKF9yZWY3KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY3LnNvcnRhYmxlO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNvcnQpIHtcbiAgICAgICAgLy8gQ2FwdHVyZSByZWN0cyxcbiAgICAgICAgLy8gaGlkZSBtdWx0aSBkcmFnIGVsZW1lbnRzIChieSBwb3NpdGlvbmluZyB0aGVtIGFic29sdXRlKSxcbiAgICAgICAgLy8gc2V0IG11bHRpIGRyYWcgZWxlbWVudHMgcmVjdHMgdG8gZHJhZ1JlY3QsXG4gICAgICAgIC8vIHNob3cgbXVsdGkgZHJhZyBlbGVtZW50cyxcbiAgICAgICAgLy8gYW5pbWF0ZSB0byByZWN0cyxcbiAgICAgICAgLy8gdW5zZXQgcmVjdHMgJiByZW1vdmUgZnJvbSBET01cblxuICAgICAgICBzb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICAgICAgICAgIGNzcyhtdWx0aURyYWdFbGVtZW50LCAncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgPT09IGRyYWdFbCQxKSByZXR1cm47XG4gICAgICAgICAgICBzZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQsIGRyYWdSZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb2xkaW5nID0gdHJ1ZTtcbiAgICAgICAgICBpbml0aWFsRm9sZGluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNvcnRhYmxlLmFuaW1hdGVBbGwoZnVuY3Rpb24gKCkge1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIGluaXRpYWxGb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICB1bnNldFJlY3QobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgYWxsIGF1eGlsaWFyeSBtdWx0aWRyYWcgaXRlbXMgZnJvbSBlbCwgaWYgc29ydGluZyBlbmFibGVkXG4gICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5zb3J0KSB7XG4gICAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBkcmFnT3ZlcjogZnVuY3Rpb24gZHJhZ092ZXIoX3JlZjgpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBfcmVmOC50YXJnZXQsXG4gICAgICAgIGNvbXBsZXRlZCA9IF9yZWY4LmNvbXBsZXRlZCxcbiAgICAgICAgY2FuY2VsID0gX3JlZjguY2FuY2VsO1xuICAgICAgaWYgKGZvbGRpbmcgJiYgfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YodGFyZ2V0KSkge1xuICAgICAgICBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJldmVydDogZnVuY3Rpb24gcmV2ZXJ0KF9yZWY5KSB7XG4gICAgICB2YXIgZnJvbVNvcnRhYmxlID0gX3JlZjkuZnJvbVNvcnRhYmxlLFxuICAgICAgICByb290RWwgPSBfcmVmOS5yb290RWwsXG4gICAgICAgIHNvcnRhYmxlID0gX3JlZjkuc29ydGFibGUsXG4gICAgICAgIGRyYWdSZWN0ID0gX3JlZjkuZHJhZ1JlY3Q7XG4gICAgICBpZiAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAvLyBTZXR1cCB1bmZvbGQgYW5pbWF0aW9uXG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICBzb3J0YWJsZS5hZGRBbmltYXRpb25TdGF0ZSh7XG4gICAgICAgICAgICB0YXJnZXQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgICByZWN0OiBmb2xkaW5nID8gZ2V0UmVjdChtdWx0aURyYWdFbGVtZW50KSA6IGRyYWdSZWN0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdW5zZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuZnJvbVJlY3QgPSBkcmFnUmVjdDtcbiAgICAgICAgICBmcm9tU29ydGFibGUucmVtb3ZlQW5pbWF0aW9uU3RhdGUobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIGluc2VydE11bHRpRHJhZ0VsZW1lbnRzKCF0aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUsIHJvb3RFbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckNvbXBsZXRlZDogZnVuY3Rpb24gZHJhZ092ZXJDb21wbGV0ZWQoX3JlZjEwKSB7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmMTAuc29ydGFibGUsXG4gICAgICAgIGlzT3duZXIgPSBfcmVmMTAuaXNPd25lcixcbiAgICAgICAgaW5zZXJ0aW9uID0gX3JlZjEwLmluc2VydGlvbixcbiAgICAgICAgYWN0aXZlU29ydGFibGUgPSBfcmVmMTAuYWN0aXZlU29ydGFibGUsXG4gICAgICAgIHBhcmVudEVsID0gX3JlZjEwLnBhcmVudEVsLFxuICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMC5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgaWYgKGluc2VydGlvbikge1xuICAgICAgICAvLyBDbG9uZXMgbXVzdCBiZSBoaWRkZW4gYmVmb3JlIGZvbGRpbmcgYW5pbWF0aW9uIHRvIGNhcHR1cmUgZHJhZ1JlY3RBYnNvbHV0ZSBwcm9wZXJseVxuICAgICAgICBpZiAoaXNPd25lcikge1xuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9oaWRlQ2xvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpbml0aWFsRm9sZGluZyA9IGZhbHNlO1xuICAgICAgICAvLyBJZiBsZWF2aW5nIHNvcnQ6ZmFsc2Ugcm9vdCwgb3IgYWxyZWFkeSBmb2xkaW5nIC0gRm9sZCB0byBuZXcgbG9jYXRpb25cbiAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEgJiYgKGZvbGRpbmcgfHwgIWlzT3duZXIgJiYgIWFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuc29ydCAmJiAhcHV0U29ydGFibGUpKSB7XG4gICAgICAgICAgLy8gRm9sZDogU2V0IGFsbCBtdWx0aSBkcmFnIGVsZW1lbnRzJ3MgcmVjdHMgdG8gZHJhZ0VsJ3MgcmVjdCB3aGVuIG11bHRpLWRyYWcgZWxlbWVudHMgYXJlIGludmlzaWJsZVxuICAgICAgICAgIHZhciBkcmFnUmVjdEFic29sdXRlID0gZ2V0UmVjdChkcmFnRWwkMSwgZmFsc2UsIHRydWUsIHRydWUpO1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgICAgICAgICAgc2V0UmVjdChtdWx0aURyYWdFbGVtZW50LCBkcmFnUmVjdEFic29sdXRlKTtcblxuICAgICAgICAgICAgLy8gTW92ZSBlbGVtZW50KHMpIHRvIGVuZCBvZiBwYXJlbnRFbCBzbyB0aGF0IGl0IGRvZXMgbm90IGludGVyZmVyZSB3aXRoIG11bHRpLWRyYWcgY2xvbmVzIGluc2VydGlvbiBpZiB0aGV5IGFyZSBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gd2hpbGUgZm9sZGluZywgYW5kIHNvIHRoYXQgd2UgY2FuIGNhcHR1cmUgdGhlbSBhZ2FpbiBiZWNhdXNlIG9sZCBzb3J0YWJsZSB3aWxsIG5vIGxvbmdlciBiZSBmcm9tU29ydGFibGVcbiAgICAgICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZvbGRpbmcgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2xvbmVzIG11c3QgYmUgc2hvd24gKGFuZCBjaGVjayB0byByZW1vdmUgbXVsdGkgZHJhZ3MpIGFmdGVyIGZvbGRpbmcgd2hlbiBpbnRlcmZlcmluZyBtdWx0aURyYWdFbGVtZW50cyBhcmUgbW92ZWQgb3V0XG4gICAgICAgIGlmICghaXNPd25lcikge1xuICAgICAgICAgIC8vIE9ubHkgcmVtb3ZlIGlmIG5vdCBmb2xkaW5nIChmb2xkaW5nIHdpbGwgcmVtb3ZlIHRoZW0gYW55d2F5cylcbiAgICAgICAgICBpZiAoIWZvbGRpbmcpIHtcbiAgICAgICAgICAgIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIgY2xvbmVzSGlkZGVuQmVmb3JlID0gY2xvbmVzSGlkZGVuO1xuICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShzb3J0YWJsZSk7XG5cbiAgICAgICAgICAgIC8vIFVuZm9sZCBhbmltYXRpb24gZm9yIGNsb25lcyBpZiBzaG93aW5nIGZyb20gaGlkZGVuXG4gICAgICAgICAgICBpZiAoYWN0aXZlU29ydGFibGUub3B0aW9ucy5hbmltYXRpb24gJiYgIWNsb25lc0hpZGRlbiAmJiBjbG9uZXNIaWRkZW5CZWZvcmUpIHtcbiAgICAgICAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBjbG9uZSxcbiAgICAgICAgICAgICAgICAgIHJlY3Q6IGNsb25lc0Zyb21SZWN0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2xvbmUuZnJvbVJlY3QgPSBjbG9uZXNGcm9tUmVjdDtcbiAgICAgICAgICAgICAgICBjbG9uZS50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShzb3J0YWJsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckFuaW1hdGlvbkNhcHR1cmU6IGZ1bmN0aW9uIGRyYWdPdmVyQW5pbWF0aW9uQ2FwdHVyZShfcmVmMTEpIHtcbiAgICAgIHZhciBkcmFnUmVjdCA9IF9yZWYxMS5kcmFnUmVjdCxcbiAgICAgICAgaXNPd25lciA9IF9yZWYxMS5pc093bmVyLFxuICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYxMS5hY3RpdmVTb3J0YWJsZTtcbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgfSk7XG4gICAgICBpZiAoYWN0aXZlU29ydGFibGUub3B0aW9ucy5hbmltYXRpb24gJiYgIWlzT3duZXIgJiYgYWN0aXZlU29ydGFibGUubXVsdGlEcmFnLmlzTXVsdGlEcmFnKSB7XG4gICAgICAgIGNsb25lc0Zyb21SZWN0ID0gX2V4dGVuZHMoe30sIGRyYWdSZWN0KTtcbiAgICAgICAgdmFyIGRyYWdNYXRyaXggPSBtYXRyaXgoZHJhZ0VsJDEsIHRydWUpO1xuICAgICAgICBjbG9uZXNGcm9tUmVjdC50b3AgLT0gZHJhZ01hdHJpeC5mO1xuICAgICAgICBjbG9uZXNGcm9tUmVjdC5sZWZ0IC09IGRyYWdNYXRyaXguZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGU6IGZ1bmN0aW9uIGRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGUoKSB7XG4gICAgICBpZiAoZm9sZGluZykge1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKF9yZWYxMikge1xuICAgICAgdmFyIGV2dCA9IF9yZWYxMi5vcmlnaW5hbEV2ZW50LFxuICAgICAgICByb290RWwgPSBfcmVmMTIucm9vdEVsLFxuICAgICAgICBwYXJlbnRFbCA9IF9yZWYxMi5wYXJlbnRFbCxcbiAgICAgICAgc29ydGFibGUgPSBfcmVmMTIuc29ydGFibGUsXG4gICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCA9IF9yZWYxMi5kaXNwYXRjaFNvcnRhYmxlRXZlbnQsXG4gICAgICAgIG9sZEluZGV4ID0gX3JlZjEyLm9sZEluZGV4LFxuICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMi5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciB0b1NvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgdGhpcy5zb3J0YWJsZTtcbiAgICAgIGlmICghZXZ0KSByZXR1cm47XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgY2hpbGRyZW4gPSBwYXJlbnRFbC5jaGlsZHJlbjtcblxuICAgICAgLy8gTXVsdGktZHJhZyBzZWxlY3Rpb25cbiAgICAgIGlmICghZHJhZ1N0YXJ0ZWQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubXVsdGlEcmFnS2V5ICYmICF0aGlzLm11bHRpRHJhZ0tleURvd24pIHtcbiAgICAgICAgICB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZygpO1xuICAgICAgICB9XG4gICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCQxLCBvcHRpb25zLnNlbGVjdGVkQ2xhc3MsICF+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSkpO1xuICAgICAgICBpZiAoIX5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKSkge1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnB1c2goZHJhZ0VsJDEpO1xuICAgICAgICAgIGRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICAgICAgcm9vdEVsOiByb290RWwsXG4gICAgICAgICAgICBuYW1lOiAnc2VsZWN0JyxcbiAgICAgICAgICAgIHRhcmdldEVsOiBkcmFnRWwkMSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gTW9kaWZpZXIgYWN0aXZhdGVkLCBzZWxlY3QgZnJvbSBsYXN0IHRvIGRyYWdFbFxuICAgICAgICAgIGlmIChldnQuc2hpZnRLZXkgJiYgbGFzdE11bHRpRHJhZ1NlbGVjdCAmJiBzb3J0YWJsZS5lbC5jb250YWlucyhsYXN0TXVsdGlEcmFnU2VsZWN0KSkge1xuICAgICAgICAgICAgdmFyIGxhc3RJbmRleCA9IGluZGV4KGxhc3RNdWx0aURyYWdTZWxlY3QpLFxuICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleChkcmFnRWwkMSk7XG4gICAgICAgICAgICBpZiAofmxhc3RJbmRleCAmJiB+Y3VycmVudEluZGV4ICYmIGxhc3RJbmRleCAhPT0gY3VycmVudEluZGV4KSB7XG4gICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gTXVzdCBpbmNsdWRlIGxhc3RNdWx0aURyYWdTZWxlY3QgKHNlbGVjdCBpdCksIGluIGNhc2UgbW9kaWZpZWQgc2VsZWN0aW9uIGZyb20gbm8gc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgLy8gKGJ1dCBwcmV2aW91cyBzZWxlY3Rpb24gZXhpc3RlZClcbiAgICAgICAgICAgICAgICB2YXIgbiwgaTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICBpID0gbGFzdEluZGV4O1xuICAgICAgICAgICAgICAgICAgbiA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaSA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICAgIG4gPSBsYXN0SW5kZXggKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgICAgICAgICAgZm9yICg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIGlmICh+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihjaGlsZHJlbltpXSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZWxlbWVudCBpcyBkcmFnZ2FibGVcbiAgICAgICAgICAgICAgICAgIGlmICghY2xvc2VzdChjaGlsZHJlbltpXSwgb3B0aW9ucy5kcmFnZ2FibGUsIHBhcmVudEVsLCBmYWxzZSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZWxlbWVudCBpcyBmaWx0ZXJlZFxuICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0gZmlsdGVyICYmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nID8gZmlsdGVyLmNhbGwoc29ydGFibGUsIGV2dCwgY2hpbGRyZW5baV0sIHNvcnRhYmxlKSA6IGZpbHRlci5zcGxpdCgnLCcpLnNvbWUoZnVuY3Rpb24gKGNyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9zZXN0KGNoaWxkcmVuW2ldLCBjcml0ZXJpYS50cmltKCksIHBhcmVudEVsLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoY2hpbGRyZW5baV0sIG9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgICAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWw6IGNoaWxkcmVuW2ldLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGFzdE11bHRpRHJhZ1NlbGVjdCA9IGRyYWdFbCQxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpLCAxKTtcbiAgICAgICAgICBsYXN0TXVsdGlEcmFnU2VsZWN0ID0gbnVsbDtcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgbmFtZTogJ2Rlc2VsZWN0JyxcbiAgICAgICAgICAgIHRhcmdldEVsOiBkcmFnRWwkMSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE11bHRpLWRyYWcgZHJvcFxuICAgICAgaWYgKGRyYWdTdGFydGVkICYmIHRoaXMuaXNNdWx0aURyYWcpIHtcbiAgICAgICAgZm9sZGluZyA9IGZhbHNlO1xuICAgICAgICAvLyBEbyBub3QgXCJ1bmZvbGRcIiBhZnRlciBhcm91bmQgZHJhZ0VsIGlmIHJldmVydGVkXG4gICAgICAgIGlmICgocGFyZW50RWxbZXhwYW5kb10ub3B0aW9ucy5zb3J0IHx8IHBhcmVudEVsICE9PSByb290RWwpICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxKSxcbiAgICAgICAgICAgIG11bHRpRHJhZ0luZGV4ID0gaW5kZXgoZHJhZ0VsJDEsICc6bm90KC4nICsgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MgKyAnKScpO1xuICAgICAgICAgIGlmICghaW5pdGlhbEZvbGRpbmcgJiYgb3B0aW9ucy5hbmltYXRpb24pIGRyYWdFbCQxLnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgICAgICBpZiAoIWluaXRpYWxGb2xkaW5nKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgZHJhZ0VsJDEuZnJvbVJlY3QgPSBkcmFnUmVjdDtcbiAgICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCAhPT0gZHJhZ0VsJDEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZWN0ID0gZm9sZGluZyA/IGdldFJlY3QobXVsdGlEcmFnRWxlbWVudCkgOiBkcmFnUmVjdDtcbiAgICAgICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuZnJvbVJlY3QgPSByZWN0O1xuXG4gICAgICAgICAgICAgICAgICAvLyBQcmVwYXJlIHVuZm9sZCBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgIHRvU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHJlY3Q6IHJlY3RcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE11bHRpIGRyYWcgZWxlbWVudHMgYXJlIG5vdCBuZWNlc3NhcmlseSByZW1vdmVkIGZyb20gdGhlIERPTSBvbiBkcm9wLCBzbyB0byByZWluc2VydFxuICAgICAgICAgICAgLy8gcHJvcGVybHkgdGhleSBtdXN0IGFsbCBiZSByZW1vdmVkXG4gICAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5bbXVsdGlEcmFnSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIGNoaWxkcmVuW211bHRpRHJhZ0luZGV4XSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbXVsdGlEcmFnSW5kZXgrKztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBJZiBpbml0aWFsIGZvbGRpbmcgaXMgZG9uZSwgdGhlIGVsZW1lbnRzIG1heSBoYXZlIGNoYW5nZWQgcG9zaXRpb24gYmVjYXVzZSB0aGV5IGFyZSBub3dcbiAgICAgICAgICAgIC8vIHVuZm9sZGluZyBhcm91bmQgZHJhZ0VsLCBldmVuIHRob3VnaCBkcmFnRWwgbWF5IG5vdCBoYXZlIGhpcyBpbmRleCBjaGFuZ2VkLCBzbyB1cGRhdGUgZXZlbnRcbiAgICAgICAgICAgIC8vIG11c3QgYmUgZmlyZWQgaGVyZSBhcyBTb3J0YWJsZSB3aWxsIG5vdC5cbiAgICAgICAgICAgIGlmIChvbGRJbmRleCA9PT0gaW5kZXgoZHJhZ0VsJDEpKSB7XG4gICAgICAgICAgICAgIHZhciB1cGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXggIT09IGluZGV4KG11bHRpRHJhZ0VsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICB1cGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQoJ3VwZGF0ZScpO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCgnc29ydCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTXVzdCBiZSBkb25lIGFmdGVyIGNhcHR1cmluZyBpbmRpdmlkdWFsIHJlY3RzIChzY3JvbGwgYmFyKVxuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0b1NvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBjbG9uZXMgaWYgbmVjZXNzYXJ5XG4gICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICBjbG9uZS5wYXJlbnROb2RlICYmIGNsb25lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG51bGxpbmdHbG9iYWw6IGZ1bmN0aW9uIG51bGxpbmdHbG9iYWwoKSB7XG4gICAgICB0aGlzLmlzTXVsdGlEcmFnID0gZHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5sZW5ndGggPSAwO1xuICAgIH0sXG4gICAgZGVzdHJveUdsb2JhbDogZnVuY3Rpb24gZGVzdHJveUdsb2JhbCgpIHtcbiAgICAgIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG4gICAgICBvZmYoZG9jdW1lbnQsICdwb2ludGVydXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5fY2hlY2tLZXlEb3duKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2tleXVwJywgdGhpcy5fY2hlY2tLZXlVcCk7XG4gICAgfSxcbiAgICBfZGVzZWxlY3RNdWx0aURyYWc6IGZ1bmN0aW9uIF9kZXNlbGVjdE11bHRpRHJhZyhldnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZHJhZ1N0YXJ0ZWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZHJhZ1N0YXJ0ZWQpIHJldHVybjtcblxuICAgICAgLy8gT25seSBkZXNlbGVjdCBpZiBzZWxlY3Rpb24gaXMgaW4gdGhpcyBzb3J0YWJsZVxuICAgICAgaWYgKG11bHRpRHJhZ1NvcnRhYmxlICE9PSB0aGlzLnNvcnRhYmxlKSByZXR1cm47XG5cbiAgICAgIC8vIE9ubHkgZGVzZWxlY3QgaWYgdGFyZ2V0IGlzIG5vdCBpdGVtIGluIHRoaXMgc29ydGFibGVcbiAgICAgIGlmIChldnQgJiYgY2xvc2VzdChldnQudGFyZ2V0LCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLnNvcnRhYmxlLmVsLCBmYWxzZSkpIHJldHVybjtcblxuICAgICAgLy8gT25seSBkZXNlbGVjdCBpZiBsZWZ0IGNsaWNrXG4gICAgICBpZiAoZXZ0ICYmIGV2dC5idXR0b24gIT09IDApIHJldHVybjtcbiAgICAgIHdoaWxlIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGVsID0gbXVsdGlEcmFnRWxlbWVudHNbMF07XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgZmFsc2UpO1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5zaGlmdCgpO1xuICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICBzb3J0YWJsZTogdGhpcy5zb3J0YWJsZSxcbiAgICAgICAgICByb290RWw6IHRoaXMuc29ydGFibGUuZWwsXG4gICAgICAgICAgbmFtZTogJ2Rlc2VsZWN0JyxcbiAgICAgICAgICB0YXJnZXRFbDogZWwsXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgX2NoZWNrS2V5RG93bjogZnVuY3Rpb24gX2NoZWNrS2V5RG93bihldnQpIHtcbiAgICAgIGlmIChldnQua2V5ID09PSB0aGlzLm9wdGlvbnMubXVsdGlEcmFnS2V5KSB7XG4gICAgICAgIHRoaXMubXVsdGlEcmFnS2V5RG93biA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBfY2hlY2tLZXlVcDogZnVuY3Rpb24gX2NoZWNrS2V5VXAoZXZ0KSB7XG4gICAgICBpZiAoZXZ0LmtleSA9PT0gdGhpcy5vcHRpb25zLm11bHRpRHJhZ0tleSkge1xuICAgICAgICB0aGlzLm11bHRpRHJhZ0tleURvd24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyhNdWx0aURyYWcsIHtcbiAgICAvLyBTdGF0aWMgbWV0aG9kcyAmIHByb3BlcnRpZXNcbiAgICBwbHVnaW5OYW1lOiAnbXVsdGlEcmFnJyxcbiAgICB1dGlsczoge1xuICAgICAgLyoqXHJcbiAgICAgICAqIFNlbGVjdHMgdGhlIHByb3ZpZGVkIG11bHRpLWRyYWcgaXRlbVxyXG4gICAgICAgKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgVGhlIGVsZW1lbnQgdG8gYmUgc2VsZWN0ZWRcclxuICAgICAgICovXG4gICAgICBzZWxlY3Q6IGZ1bmN0aW9uIHNlbGVjdChlbCkge1xuICAgICAgICB2YXIgc29ydGFibGUgPSBlbC5wYXJlbnROb2RlW2V4cGFuZG9dO1xuICAgICAgICBpZiAoIXNvcnRhYmxlIHx8ICFzb3J0YWJsZS5vcHRpb25zLm11bHRpRHJhZyB8fCB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihlbCkpIHJldHVybjtcbiAgICAgICAgaWYgKG11bHRpRHJhZ1NvcnRhYmxlICYmIG11bHRpRHJhZ1NvcnRhYmxlICE9PSBzb3J0YWJsZSkge1xuICAgICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlLm11bHRpRHJhZy5fZGVzZWxlY3RNdWx0aURyYWcoKTtcbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHNvcnRhYmxlO1xuICAgICAgICB9XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCBzb3J0YWJsZS5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIHRydWUpO1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGVsKTtcbiAgICAgIH0sXG4gICAgICAvKipcclxuICAgICAgICogRGVzZWxlY3RzIHRoZSBwcm92aWRlZCBtdWx0aS1kcmFnIGl0ZW1cclxuICAgICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgIFRoZSBlbGVtZW50IHRvIGJlIGRlc2VsZWN0ZWRcclxuICAgICAgICovXG4gICAgICBkZXNlbGVjdDogZnVuY3Rpb24gZGVzZWxlY3QoZWwpIHtcbiAgICAgICAgdmFyIHNvcnRhYmxlID0gZWwucGFyZW50Tm9kZVtleHBhbmRvXSxcbiAgICAgICAgICBpbmRleCA9IG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZWwpO1xuICAgICAgICBpZiAoIXNvcnRhYmxlIHx8ICFzb3J0YWJsZS5vcHRpb25zLm11bHRpRHJhZyB8fCAhfmluZGV4KSByZXR1cm47XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCBzb3J0YWJsZS5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZXZlbnRQcm9wZXJ0aWVzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG4gICAgICB2YXIgb2xkSW5kaWNpZXMgPSBbXSxcbiAgICAgICAgbmV3SW5kaWNpZXMgPSBbXTtcbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgb2xkSW5kaWNpZXMucHVzaCh7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICBpbmRleDogbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIG11bHRpRHJhZ0VsZW1lbnRzIHdpbGwgYWxyZWFkeSBiZSBzb3J0ZWQgaWYgZm9sZGluZ1xuICAgICAgICB2YXIgbmV3SW5kZXg7XG4gICAgICAgIGlmIChmb2xkaW5nICYmIG11bHRpRHJhZ0VsZW1lbnQgIT09IGRyYWdFbCQxKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChmb2xkaW5nKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSBpbmRleChtdWx0aURyYWdFbGVtZW50LCAnOm5vdCguJyArIF90aGlzMy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MgKyAnKScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0luZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3SW5kaWNpZXMucHVzaCh7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICBpbmRleDogbmV3SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1zOiBfdG9Db25zdW1hYmxlQXJyYXkobXVsdGlEcmFnRWxlbWVudHMpLFxuICAgICAgICBjbG9uZXM6IFtdLmNvbmNhdChtdWx0aURyYWdDbG9uZXMpLFxuICAgICAgICBvbGRJbmRpY2llczogb2xkSW5kaWNpZXMsXG4gICAgICAgIG5ld0luZGljaWVzOiBuZXdJbmRpY2llc1xuICAgICAgfTtcbiAgICB9LFxuICAgIG9wdGlvbkxpc3RlbmVyczoge1xuICAgICAgbXVsdGlEcmFnS2V5OiBmdW5jdGlvbiBtdWx0aURyYWdLZXkoa2V5KSB7XG4gICAgICAgIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoa2V5ID09PSAnY3RybCcpIHtcbiAgICAgICAgICBrZXkgPSAnQ29udHJvbCc7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBrZXkgPSBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGluc2VydE11bHRpRHJhZ0VsZW1lbnRzKGNsb25lc0luc2VydGVkLCByb290RWwpIHtcbiAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCwgaSkge1xuICAgIHZhciB0YXJnZXQgPSByb290RWwuY2hpbGRyZW5bbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ICsgKGNsb25lc0luc2VydGVkID8gTnVtYmVyKGkpIDogMCldO1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUobXVsdGlEcmFnRWxlbWVudCwgdGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxyXG4gKiBJbnNlcnQgbXVsdGktZHJhZyBjbG9uZXNcclxuICogQHBhcmFtICB7W0Jvb2xlYW5dfSBlbGVtZW50c0luc2VydGVkICBXaGV0aGVyIHRoZSBtdWx0aS1kcmFnIGVsZW1lbnRzIGFyZSBpbnNlcnRlZFxyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gcm9vdEVsXHJcbiAqL1xuZnVuY3Rpb24gaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKGVsZW1lbnRzSW5zZXJ0ZWQsIHJvb3RFbCkge1xuICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUsIGkpIHtcbiAgICB2YXIgdGFyZ2V0ID0gcm9vdEVsLmNoaWxkcmVuW2Nsb25lLnNvcnRhYmxlSW5kZXggKyAoZWxlbWVudHNJbnNlcnRlZCA/IE51bWJlcihpKSA6IDApXTtcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lLCB0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290RWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpIHtcbiAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgIG11bHRpRHJhZ0VsZW1lbnQucGFyZW50Tm9kZSAmJiBtdWx0aURyYWdFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gIH0pO1xufVxuXG5Tb3J0YWJsZS5tb3VudChuZXcgQXV0b1Njcm9sbFBsdWdpbigpKTtcblNvcnRhYmxlLm1vdW50KFJlbW92ZSwgUmV2ZXJ0KTtcblxuZXhwb3J0IGRlZmF1bHQgU29ydGFibGU7XG5leHBvcnQgeyBNdWx0aURyYWdQbHVnaW4gYXMgTXVsdGlEcmFnLCBTb3J0YWJsZSwgU3dhcFBsdWdpbiBhcyBTd2FwIH07XG4iLCAiaW1wb3J0IFNvcnRhYmxlIGZyb20gJ3NvcnRhYmxlanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBzb3J0YWJsZSA9IG5ldyBTb3J0YWJsZSh0aGlzLmVsLCB7XG4gICAgICBhbmltYXRpb246IDEsXG4gICAgICBkZWxheTogNCxcbiAgICAgIGRlbGF5T25Ub3VjaE9ubHk6IHRydWUsXG4gICAgICBncm91cDogJ3NoYXJlZCcsXG4gICAgICBkcmFnZ2FibGU6ICcuZHJhZ2dhYmxlJyxcbiAgICAgIGdob3N0Q2xhc3M6ICcuc29ydGFibGUtZ2hvc3QnLFxuICAgICAgaGFuZGxlOiBcIi5kcmFnLWhhbmRsZVwiLFxuICAgICAgb25FbmQ6IChldnQpID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coc29ydGFibGUudG9BcnJheSgpKVxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICBjb25zb2xlLmxvZygnb25FbmQnKTtcblxuICAgICAgICB0aGlzLnB1c2hFdmVudCgnZHJvcHBlZCcsIHtcbiAgICAgICAgICBkcmFnZ2VkSWQ6IGV2dC5pdGVtLmlkLCAvLyBpZCBvZiB0aGUgZHJhZ2dlZCBpdGVtXG4gICAgICAgICAgdG9Ecm9wem9uZUlkOiBldnQudG8uaWQsIC8vIGlkIG9mIHRoZSBkcm9wIHpvbmUgd2hlcmUgdGhlIGRyb3Agb2NjdXJlZFxuICAgICAgICAgIGZyb21Ecm9wem9uZUlkOiBldnQuZnJvbS5pZCwgLy8gaWQgb2YgdGhlIGRyb3Agem9uZSB3aGVyZSB0aGUgZHJvcCBvY2N1cmVkXG4gICAgICAgICAgbmV3RHJhZ2dhYmxlSW5kZXg6IGV2dC5uZXdEcmFnZ2FibGVJbmRleCwgLy8gaW5kZXggd2hlcmUgdGhlIGl0ZW0gd2FzIGRyb3BwZWQgKHJlbGF0aXZlIHRvIG90aGVyIGl0ZW1zIGluIHRoZSBkcm9wIHpvbmUpXG4gICAgICAgICAgb2xkRHJhZ2dhYmxlSW5kZXg6IGV2dC5vbGREcmFnZ2FibGVJbmRleCwgLy8gaW5kZXggd2hlcmUgdGhlIGl0ZW0gd2FzIGRyb3BwZWQgKHJlbGF0aXZlIHRvIG90aGVyIGl0ZW1zIGluIHRoZSBkcm9wIHpvbmUpXG4gICAgICAgICAgbmV3T3JkZXI6IHNvcnRhYmxlLnRvQXJyYXkoKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufTtcbiIsICJpbXBvcnQgc2hvd2Rvd24gZnJvbSAnc2hvd2Rvd24nXG5pbXBvcnQgVHVybmRvd25TZXJ2aWNlIGZyb20gJ3R1cm5kb3duJ1xuXG5jb25zdCBjb252ZXJ0ZXIgPSBuZXcgc2hvd2Rvd24uQ29udmVydGVyKClcbnZhciB0dXJuZG93blNlcnZpY2UgPSBuZXcgVHVybmRvd25TZXJ2aWNlKClcblxuaW1wb3J0IFRyaXggZnJvbSBcInRyaXhcIlxuXG4vLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidHJpeC1iZWZvcmUtaW5pdGlhbGl6ZVwiLCAoKSA9PiB7IC8qIENoYW5nZSBUcml4LmNvbmZpZyBpZiB5b3UgbmVlZCAqL1xuVHJpeC5jb25maWcuYmxvY2tBdHRyaWJ1dGVzLmhlYWRpbmcyID0ge1xuICB0YWdOYW1lOiBcImgyXCIsXG4gIHRlcm1pbmFsOiB0cnVlLFxuICBicmVha09uUmV0dXJuOiB0cnVlXG59O1xuVHJpeC5jb25maWcuYmxvY2tBdHRyaWJ1dGVzLmhlYWRpbmczID0ge1xuICB0YWdOYW1lOiBcImgzXCIsXG4gIHRlcm1pbmFsOiB0cnVlLFxuICBicmVha09uUmV0dXJuOiB0cnVlXG59O1xuVHJpeC5jb25maWcuYmxvY2tBdHRyaWJ1dGVzLmhlYWRpbmc0ID0ge1xuICB0YWdOYW1lOiBcImg0XCIsXG4gIHRlcm1pbmFsOiB0cnVlLFxuICBicmVha09uUmV0dXJuOiB0cnVlXG59O1xuVHJpeC5jb25maWcuYmxvY2tBdHRyaWJ1dGVzLmhlYWRpbmc1ID0ge1xuICB0YWdOYW1lOiBcImg1XCIsXG4gIHRlcm1pbmFsOiB0cnVlLFxuICBicmVha09uUmV0dXJuOiB0cnVlXG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG1vdW50ZWQoKSB7XG4gICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRoaXMuZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RyaXgtZWRpdG9yJyk/LlswXVxuICAgIGNvbnN0IGVkaXRvciA9IHRhcmdldE5vZGUuZWRpdG9yXG5cblxuICAgIGNvbnN0IGlucHV0VGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0Tm9kZS5pZC5yZXBsYWNlKCdlZGl0b3InLCAnY29udGVudCcpKVxuICAgIGVkaXRvci5pbnNlcnRIVE1MKGNvbnZlcnRlci5tYWtlSHRtbChpbnB1dFRhcmdldC52YWx1ZSkpXG5cblxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJpeC1jaGFuZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IG1hcmtkb3duID0gdHVybmRvd25TZXJ2aWNlLnR1cm5kb3duKHRhcmdldE5vZGUuaW5uZXJIVE1MKVxuICAgICAgaW5wdXRUYXJnZXQudmFsdWUgPSBtYXJrZG93blxuICAgICAgaW5wdXRUYXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2lucHV0JywgeyBidWJibGVzOiB0cnVlIH0pKVxuICAgIH0pXG4gIH0sXG59XG4iLCAiZnVuY3Rpb24gZXh0ZW5kIChkZXN0aW5hdGlvbikge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSBkZXN0aW5hdGlvbltrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiByZXBlYXQgKGNoYXJhY3RlciwgY291bnQpIHtcbiAgcmV0dXJuIEFycmF5KGNvdW50ICsgMSkuam9pbihjaGFyYWN0ZXIpXG59XG5cbmZ1bmN0aW9uIHRyaW1MZWFkaW5nTmV3bGluZXMgKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL15cXG4qLywgJycpXG59XG5cbmZ1bmN0aW9uIHRyaW1UcmFpbGluZ05ld2xpbmVzIChzdHJpbmcpIHtcbiAgLy8gYXZvaWQgbWF0Y2gtYXQtZW5kIHJlZ2V4cCBib3R0bGVuZWNrLCBzZWUgIzM3MFxuICB2YXIgaW5kZXhFbmQgPSBzdHJpbmcubGVuZ3RoO1xuICB3aGlsZSAoaW5kZXhFbmQgPiAwICYmIHN0cmluZ1tpbmRleEVuZCAtIDFdID09PSAnXFxuJykgaW5kZXhFbmQtLTtcbiAgcmV0dXJuIHN0cmluZy5zdWJzdHJpbmcoMCwgaW5kZXhFbmQpXG59XG5cbnZhciBibG9ja0VsZW1lbnRzID0gW1xuICAnQUREUkVTUycsICdBUlRJQ0xFJywgJ0FTSURFJywgJ0FVRElPJywgJ0JMT0NLUVVPVEUnLCAnQk9EWScsICdDQU5WQVMnLFxuICAnQ0VOVEVSJywgJ0REJywgJ0RJUicsICdESVYnLCAnREwnLCAnRFQnLCAnRklFTERTRVQnLCAnRklHQ0FQVElPTicsICdGSUdVUkUnLFxuICAnRk9PVEVSJywgJ0ZPUk0nLCAnRlJBTUVTRVQnLCAnSDEnLCAnSDInLCAnSDMnLCAnSDQnLCAnSDUnLCAnSDYnLCAnSEVBREVSJyxcbiAgJ0hHUk9VUCcsICdIUicsICdIVE1MJywgJ0lTSU5ERVgnLCAnTEknLCAnTUFJTicsICdNRU5VJywgJ05BVicsICdOT0ZSQU1FUycsXG4gICdOT1NDUklQVCcsICdPTCcsICdPVVRQVVQnLCAnUCcsICdQUkUnLCAnU0VDVElPTicsICdUQUJMRScsICdUQk9EWScsICdURCcsXG4gICdURk9PVCcsICdUSCcsICdUSEVBRCcsICdUUicsICdVTCdcbl07XG5cbmZ1bmN0aW9uIGlzQmxvY2sgKG5vZGUpIHtcbiAgcmV0dXJuIGlzKG5vZGUsIGJsb2NrRWxlbWVudHMpXG59XG5cbnZhciB2b2lkRWxlbWVudHMgPSBbXG4gICdBUkVBJywgJ0JBU0UnLCAnQlInLCAnQ09MJywgJ0NPTU1BTkQnLCAnRU1CRUQnLCAnSFInLCAnSU1HJywgJ0lOUFVUJyxcbiAgJ0tFWUdFTicsICdMSU5LJywgJ01FVEEnLCAnUEFSQU0nLCAnU09VUkNFJywgJ1RSQUNLJywgJ1dCUidcbl07XG5cbmZ1bmN0aW9uIGlzVm9pZCAobm9kZSkge1xuICByZXR1cm4gaXMobm9kZSwgdm9pZEVsZW1lbnRzKVxufVxuXG5mdW5jdGlvbiBoYXNWb2lkIChub2RlKSB7XG4gIHJldHVybiBoYXMobm9kZSwgdm9pZEVsZW1lbnRzKVxufVxuXG52YXIgbWVhbmluZ2Z1bFdoZW5CbGFua0VsZW1lbnRzID0gW1xuICAnQScsICdUQUJMRScsICdUSEVBRCcsICdUQk9EWScsICdURk9PVCcsICdUSCcsICdURCcsICdJRlJBTUUnLCAnU0NSSVBUJyxcbiAgJ0FVRElPJywgJ1ZJREVPJ1xuXTtcblxuZnVuY3Rpb24gaXNNZWFuaW5nZnVsV2hlbkJsYW5rIChub2RlKSB7XG4gIHJldHVybiBpcyhub2RlLCBtZWFuaW5nZnVsV2hlbkJsYW5rRWxlbWVudHMpXG59XG5cbmZ1bmN0aW9uIGhhc01lYW5pbmdmdWxXaGVuQmxhbmsgKG5vZGUpIHtcbiAgcmV0dXJuIGhhcyhub2RlLCBtZWFuaW5nZnVsV2hlbkJsYW5rRWxlbWVudHMpXG59XG5cbmZ1bmN0aW9uIGlzIChub2RlLCB0YWdOYW1lcykge1xuICByZXR1cm4gdGFnTmFtZXMuaW5kZXhPZihub2RlLm5vZGVOYW1lKSA+PSAwXG59XG5cbmZ1bmN0aW9uIGhhcyAobm9kZSwgdGFnTmFtZXMpIHtcbiAgcmV0dXJuIChcbiAgICBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lICYmXG4gICAgdGFnTmFtZXMuc29tZShmdW5jdGlvbiAodGFnTmFtZSkge1xuICAgICAgcmV0dXJuIG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSkubGVuZ3RoXG4gICAgfSlcbiAgKVxufVxuXG52YXIgcnVsZXMgPSB7fTtcblxucnVsZXMucGFyYWdyYXBoID0ge1xuICBmaWx0ZXI6ICdwJyxcblxuICByZXBsYWNlbWVudDogZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICByZXR1cm4gJ1xcblxcbicgKyBjb250ZW50ICsgJ1xcblxcbidcbiAgfVxufTtcblxucnVsZXMubGluZUJyZWFrID0ge1xuICBmaWx0ZXI6ICdicicsXG5cbiAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChjb250ZW50LCBub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuYnIgKyAnXFxuJ1xuICB9XG59O1xuXG5ydWxlcy5oZWFkaW5nID0ge1xuICBmaWx0ZXI6IFsnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnXSxcblxuICByZXBsYWNlbWVudDogZnVuY3Rpb24gKGNvbnRlbnQsIG5vZGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgaExldmVsID0gTnVtYmVyKG5vZGUubm9kZU5hbWUuY2hhckF0KDEpKTtcblxuICAgIGlmIChvcHRpb25zLmhlYWRpbmdTdHlsZSA9PT0gJ3NldGV4dCcgJiYgaExldmVsIDwgMykge1xuICAgICAgdmFyIHVuZGVybGluZSA9IHJlcGVhdCgoaExldmVsID09PSAxID8gJz0nIDogJy0nKSwgY29udGVudC5sZW5ndGgpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgJ1xcblxcbicgKyBjb250ZW50ICsgJ1xcbicgKyB1bmRlcmxpbmUgKyAnXFxuXFxuJ1xuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ1xcblxcbicgKyByZXBlYXQoJyMnLCBoTGV2ZWwpICsgJyAnICsgY29udGVudCArICdcXG5cXG4nXG4gICAgfVxuICB9XG59O1xuXG5ydWxlcy5ibG9ja3F1b3RlID0ge1xuICBmaWx0ZXI6ICdibG9ja3F1b3RlJyxcblxuICByZXBsYWNlbWVudDogZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC9eXFxuK3xcXG4rJC9nLCAnJyk7XG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvXi9nbSwgJz4gJyk7XG4gICAgcmV0dXJuICdcXG5cXG4nICsgY29udGVudCArICdcXG5cXG4nXG4gIH1cbn07XG5cbnJ1bGVzLmxpc3QgPSB7XG4gIGZpbHRlcjogWyd1bCcsICdvbCddLFxuXG4gIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAoY29udGVudCwgbm9kZSkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudC5ub2RlTmFtZSA9PT0gJ0xJJyAmJiBwYXJlbnQubGFzdEVsZW1lbnRDaGlsZCA9PT0gbm9kZSkge1xuICAgICAgcmV0dXJuICdcXG4nICsgY29udGVudFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ1xcblxcbicgKyBjb250ZW50ICsgJ1xcblxcbidcbiAgICB9XG4gIH1cbn07XG5cbnJ1bGVzLmxpc3RJdGVtID0ge1xuICBmaWx0ZXI6ICdsaScsXG5cbiAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChjb250ZW50LCBub2RlLCBvcHRpb25zKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnRcbiAgICAgIC5yZXBsYWNlKC9eXFxuKy8sICcnKSAvLyByZW1vdmUgbGVhZGluZyBuZXdsaW5lc1xuICAgICAgLnJlcGxhY2UoL1xcbiskLywgJ1xcbicpIC8vIHJlcGxhY2UgdHJhaWxpbmcgbmV3bGluZXMgd2l0aCBqdXN0IGEgc2luZ2xlIG9uZVxuICAgICAgLnJlcGxhY2UoL1xcbi9nbSwgJ1xcbiAgICAnKTsgLy8gaW5kZW50XG4gICAgdmFyIHByZWZpeCA9IG9wdGlvbnMuYnVsbGV0TGlzdE1hcmtlciArICcgICAnO1xuICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudC5ub2RlTmFtZSA9PT0gJ09MJykge1xuICAgICAgdmFyIHN0YXJ0ID0gcGFyZW50LmdldEF0dHJpYnV0ZSgnc3RhcnQnKTtcbiAgICAgIHZhciBpbmRleCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwocGFyZW50LmNoaWxkcmVuLCBub2RlKTtcbiAgICAgIHByZWZpeCA9IChzdGFydCA/IE51bWJlcihzdGFydCkgKyBpbmRleCA6IGluZGV4ICsgMSkgKyAnLiAgJztcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIHByZWZpeCArIGNvbnRlbnQgKyAobm9kZS5uZXh0U2libGluZyAmJiAhL1xcbiQvLnRlc3QoY29udGVudCkgPyAnXFxuJyA6ICcnKVxuICAgIClcbiAgfVxufTtcblxucnVsZXMuaW5kZW50ZWRDb2RlQmxvY2sgPSB7XG4gIGZpbHRlcjogZnVuY3Rpb24gKG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgb3B0aW9ucy5jb2RlQmxvY2tTdHlsZSA9PT0gJ2luZGVudGVkJyAmJlxuICAgICAgbm9kZS5ub2RlTmFtZSA9PT0gJ1BSRScgJiZcbiAgICAgIG5vZGUuZmlyc3RDaGlsZCAmJlxuICAgICAgbm9kZS5maXJzdENoaWxkLm5vZGVOYW1lID09PSAnQ09ERSdcbiAgICApXG4gIH0sXG5cbiAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChjb250ZW50LCBub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICdcXG5cXG4gICAgJyArXG4gICAgICBub2RlLmZpcnN0Q2hpbGQudGV4dENvbnRlbnQucmVwbGFjZSgvXFxuL2csICdcXG4gICAgJykgK1xuICAgICAgJ1xcblxcbidcbiAgICApXG4gIH1cbn07XG5cbnJ1bGVzLmZlbmNlZENvZGVCbG9jayA9IHtcbiAgZmlsdGVyOiBmdW5jdGlvbiAobm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiAoXG4gICAgICBvcHRpb25zLmNvZGVCbG9ja1N0eWxlID09PSAnZmVuY2VkJyAmJlxuICAgICAgbm9kZS5ub2RlTmFtZSA9PT0gJ1BSRScgJiZcbiAgICAgIG5vZGUuZmlyc3RDaGlsZCAmJlxuICAgICAgbm9kZS5maXJzdENoaWxkLm5vZGVOYW1lID09PSAnQ09ERSdcbiAgICApXG4gIH0sXG5cbiAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChjb250ZW50LCBub2RlLCBvcHRpb25zKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IG5vZGUuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJyc7XG4gICAgdmFyIGxhbmd1YWdlID0gKGNsYXNzTmFtZS5tYXRjaCgvbGFuZ3VhZ2UtKFxcUyspLykgfHwgW251bGwsICcnXSlbMV07XG4gICAgdmFyIGNvZGUgPSBub2RlLmZpcnN0Q2hpbGQudGV4dENvbnRlbnQ7XG5cbiAgICB2YXIgZmVuY2VDaGFyID0gb3B0aW9ucy5mZW5jZS5jaGFyQXQoMCk7XG4gICAgdmFyIGZlbmNlU2l6ZSA9IDM7XG4gICAgdmFyIGZlbmNlSW5Db2RlUmVnZXggPSBuZXcgUmVnRXhwKCdeJyArIGZlbmNlQ2hhciArICd7Myx9JywgJ2dtJyk7XG5cbiAgICB2YXIgbWF0Y2g7XG4gICAgd2hpbGUgKChtYXRjaCA9IGZlbmNlSW5Db2RlUmVnZXguZXhlYyhjb2RlKSkpIHtcbiAgICAgIGlmIChtYXRjaFswXS5sZW5ndGggPj0gZmVuY2VTaXplKSB7XG4gICAgICAgIGZlbmNlU2l6ZSA9IG1hdGNoWzBdLmxlbmd0aCArIDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGZlbmNlID0gcmVwZWF0KGZlbmNlQ2hhciwgZmVuY2VTaXplKTtcblxuICAgIHJldHVybiAoXG4gICAgICAnXFxuXFxuJyArIGZlbmNlICsgbGFuZ3VhZ2UgKyAnXFxuJyArXG4gICAgICBjb2RlLnJlcGxhY2UoL1xcbiQvLCAnJykgK1xuICAgICAgJ1xcbicgKyBmZW5jZSArICdcXG5cXG4nXG4gICAgKVxuICB9XG59O1xuXG5ydWxlcy5ob3Jpem9udGFsUnVsZSA9IHtcbiAgZmlsdGVyOiAnaHInLFxuXG4gIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAoY29udGVudCwgbm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiAnXFxuXFxuJyArIG9wdGlvbnMuaHIgKyAnXFxuXFxuJ1xuICB9XG59O1xuXG5ydWxlcy5pbmxpbmVMaW5rID0ge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIChub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG9wdGlvbnMubGlua1N0eWxlID09PSAnaW5saW5lZCcgJiZcbiAgICAgIG5vZGUubm9kZU5hbWUgPT09ICdBJyAmJlxuICAgICAgbm9kZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuICAgIClcbiAgfSxcblxuICByZXBsYWNlbWVudDogZnVuY3Rpb24gKGNvbnRlbnQsIG5vZGUpIHtcbiAgICB2YXIgaHJlZiA9IG5vZGUuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgaWYgKGhyZWYpIGhyZWYgPSBocmVmLnJlcGxhY2UoLyhbKCldKS9nLCAnXFxcXCQxJyk7XG4gICAgdmFyIHRpdGxlID0gY2xlYW5BdHRyaWJ1dGUobm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykpO1xuICAgIGlmICh0aXRsZSkgdGl0bGUgPSAnIFwiJyArIHRpdGxlLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKSArICdcIic7XG4gICAgcmV0dXJuICdbJyArIGNvbnRlbnQgKyAnXSgnICsgaHJlZiArIHRpdGxlICsgJyknXG4gIH1cbn07XG5cbnJ1bGVzLnJlZmVyZW5jZUxpbmsgPSB7XG4gIGZpbHRlcjogZnVuY3Rpb24gKG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgb3B0aW9ucy5saW5rU3R5bGUgPT09ICdyZWZlcmVuY2VkJyAmJlxuICAgICAgbm9kZS5ub2RlTmFtZSA9PT0gJ0EnICYmXG4gICAgICBub2RlLmdldEF0dHJpYnV0ZSgnaHJlZicpXG4gICAgKVxuICB9LFxuXG4gIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAoY29udGVudCwgbm9kZSwgb3B0aW9ucykge1xuICAgIHZhciBocmVmID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICB2YXIgdGl0bGUgPSBjbGVhbkF0dHJpYnV0ZShub2RlLmdldEF0dHJpYnV0ZSgndGl0bGUnKSk7XG4gICAgaWYgKHRpdGxlKSB0aXRsZSA9ICcgXCInICsgdGl0bGUgKyAnXCInO1xuICAgIHZhciByZXBsYWNlbWVudDtcbiAgICB2YXIgcmVmZXJlbmNlO1xuXG4gICAgc3dpdGNoIChvcHRpb25zLmxpbmtSZWZlcmVuY2VTdHlsZSkge1xuICAgICAgY2FzZSAnY29sbGFwc2VkJzpcbiAgICAgICAgcmVwbGFjZW1lbnQgPSAnWycgKyBjb250ZW50ICsgJ11bXSc7XG4gICAgICAgIHJlZmVyZW5jZSA9ICdbJyArIGNvbnRlbnQgKyAnXTogJyArIGhyZWYgKyB0aXRsZTtcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3Nob3J0Y3V0JzpcbiAgICAgICAgcmVwbGFjZW1lbnQgPSAnWycgKyBjb250ZW50ICsgJ10nO1xuICAgICAgICByZWZlcmVuY2UgPSAnWycgKyBjb250ZW50ICsgJ106ICcgKyBocmVmICsgdGl0bGU7XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgaWQgPSB0aGlzLnJlZmVyZW5jZXMubGVuZ3RoICsgMTtcbiAgICAgICAgcmVwbGFjZW1lbnQgPSAnWycgKyBjb250ZW50ICsgJ11bJyArIGlkICsgJ10nO1xuICAgICAgICByZWZlcmVuY2UgPSAnWycgKyBpZCArICddOiAnICsgaHJlZiArIHRpdGxlO1xuICAgIH1cblxuICAgIHRoaXMucmVmZXJlbmNlcy5wdXNoKHJlZmVyZW5jZSk7XG4gICAgcmV0dXJuIHJlcGxhY2VtZW50XG4gIH0sXG5cbiAgcmVmZXJlbmNlczogW10sXG5cbiAgYXBwZW5kOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciByZWZlcmVuY2VzID0gJyc7XG4gICAgaWYgKHRoaXMucmVmZXJlbmNlcy5sZW5ndGgpIHtcbiAgICAgIHJlZmVyZW5jZXMgPSAnXFxuXFxuJyArIHRoaXMucmVmZXJlbmNlcy5qb2luKCdcXG4nKSArICdcXG5cXG4nO1xuICAgICAgdGhpcy5yZWZlcmVuY2VzID0gW107IC8vIFJlc2V0IHJlZmVyZW5jZXNcbiAgICB9XG4gICAgcmV0dXJuIHJlZmVyZW5jZXNcbiAgfVxufTtcblxucnVsZXMuZW1waGFzaXMgPSB7XG4gIGZpbHRlcjogWydlbScsICdpJ10sXG5cbiAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChjb250ZW50LCBub2RlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFjb250ZW50LnRyaW0oKSkgcmV0dXJuICcnXG4gICAgcmV0dXJuIG9wdGlvbnMuZW1EZWxpbWl0ZXIgKyBjb250ZW50ICsgb3B0aW9ucy5lbURlbGltaXRlclxuICB9XG59O1xuXG5ydWxlcy5zdHJvbmcgPSB7XG4gIGZpbHRlcjogWydzdHJvbmcnLCAnYiddLFxuXG4gIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAoY29udGVudCwgbm9kZSwgb3B0aW9ucykge1xuICAgIGlmICghY29udGVudC50cmltKCkpIHJldHVybiAnJ1xuICAgIHJldHVybiBvcHRpb25zLnN0cm9uZ0RlbGltaXRlciArIGNvbnRlbnQgKyBvcHRpb25zLnN0cm9uZ0RlbGltaXRlclxuICB9XG59O1xuXG5ydWxlcy5jb2RlID0ge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIGhhc1NpYmxpbmdzID0gbm9kZS5wcmV2aW91c1NpYmxpbmcgfHwgbm9kZS5uZXh0U2libGluZztcbiAgICB2YXIgaXNDb2RlQmxvY2sgPSBub2RlLnBhcmVudE5vZGUubm9kZU5hbWUgPT09ICdQUkUnICYmICFoYXNTaWJsaW5ncztcblxuICAgIHJldHVybiBub2RlLm5vZGVOYW1lID09PSAnQ09ERScgJiYgIWlzQ29kZUJsb2NrXG4gIH0sXG5cbiAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgaWYgKCFjb250ZW50KSByZXR1cm4gJydcbiAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnICcpO1xuXG4gICAgdmFyIGV4dHJhU3BhY2UgPSAvXmB8XiAuKj9bXiBdLiogJHxgJC8udGVzdChjb250ZW50KSA/ICcgJyA6ICcnO1xuICAgIHZhciBkZWxpbWl0ZXIgPSAnYCc7XG4gICAgdmFyIG1hdGNoZXMgPSBjb250ZW50Lm1hdGNoKC9gKy9nbSkgfHwgW107XG4gICAgd2hpbGUgKG1hdGNoZXMuaW5kZXhPZihkZWxpbWl0ZXIpICE9PSAtMSkgZGVsaW1pdGVyID0gZGVsaW1pdGVyICsgJ2AnO1xuXG4gICAgcmV0dXJuIGRlbGltaXRlciArIGV4dHJhU3BhY2UgKyBjb250ZW50ICsgZXh0cmFTcGFjZSArIGRlbGltaXRlclxuICB9XG59O1xuXG5ydWxlcy5pbWFnZSA9IHtcbiAgZmlsdGVyOiAnaW1nJyxcblxuICByZXBsYWNlbWVudDogZnVuY3Rpb24gKGNvbnRlbnQsIG5vZGUpIHtcbiAgICB2YXIgYWx0ID0gY2xlYW5BdHRyaWJ1dGUobm9kZS5nZXRBdHRyaWJ1dGUoJ2FsdCcpKTtcbiAgICB2YXIgc3JjID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3NyYycpIHx8ICcnO1xuICAgIHZhciB0aXRsZSA9IGNsZWFuQXR0cmlidXRlKG5vZGUuZ2V0QXR0cmlidXRlKCd0aXRsZScpKTtcbiAgICB2YXIgdGl0bGVQYXJ0ID0gdGl0bGUgPyAnIFwiJyArIHRpdGxlICsgJ1wiJyA6ICcnO1xuICAgIHJldHVybiBzcmMgPyAnIVsnICsgYWx0ICsgJ10nICsgJygnICsgc3JjICsgdGl0bGVQYXJ0ICsgJyknIDogJydcbiAgfVxufTtcblxuZnVuY3Rpb24gY2xlYW5BdHRyaWJ1dGUgKGF0dHJpYnV0ZSkge1xuICByZXR1cm4gYXR0cmlidXRlID8gYXR0cmlidXRlLnJlcGxhY2UoLyhcXG4rXFxzKikrL2csICdcXG4nKSA6ICcnXG59XG5cbi8qKlxuICogTWFuYWdlcyBhIGNvbGxlY3Rpb24gb2YgcnVsZXMgdXNlZCB0byBjb252ZXJ0IEhUTUwgdG8gTWFya2Rvd25cbiAqL1xuXG5mdW5jdGlvbiBSdWxlcyAob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLl9rZWVwID0gW107XG4gIHRoaXMuX3JlbW92ZSA9IFtdO1xuXG4gIHRoaXMuYmxhbmtSdWxlID0ge1xuICAgIHJlcGxhY2VtZW50OiBvcHRpb25zLmJsYW5rUmVwbGFjZW1lbnRcbiAgfTtcblxuICB0aGlzLmtlZXBSZXBsYWNlbWVudCA9IG9wdGlvbnMua2VlcFJlcGxhY2VtZW50O1xuXG4gIHRoaXMuZGVmYXVsdFJ1bGUgPSB7XG4gICAgcmVwbGFjZW1lbnQ6IG9wdGlvbnMuZGVmYXVsdFJlcGxhY2VtZW50XG4gIH07XG5cbiAgdGhpcy5hcnJheSA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5ydWxlcykgdGhpcy5hcnJheS5wdXNoKG9wdGlvbnMucnVsZXNba2V5XSk7XG59XG5cblJ1bGVzLnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbiAoa2V5LCBydWxlKSB7XG4gICAgdGhpcy5hcnJheS51bnNoaWZ0KHJ1bGUpO1xuICB9LFxuXG4gIGtlZXA6IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICB0aGlzLl9rZWVwLnVuc2hpZnQoe1xuICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICByZXBsYWNlbWVudDogdGhpcy5rZWVwUmVwbGFjZW1lbnRcbiAgICB9KTtcbiAgfSxcblxuICByZW1vdmU6IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICB0aGlzLl9yZW1vdmUudW5zaGlmdCh7XG4gICAgICBmaWx0ZXI6IGZpbHRlcixcbiAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJ1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIGZvck5vZGU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKG5vZGUuaXNCbGFuaykgcmV0dXJuIHRoaXMuYmxhbmtSdWxlXG4gICAgdmFyIHJ1bGU7XG5cbiAgICBpZiAoKHJ1bGUgPSBmaW5kUnVsZSh0aGlzLmFycmF5LCBub2RlLCB0aGlzLm9wdGlvbnMpKSkgcmV0dXJuIHJ1bGVcbiAgICBpZiAoKHJ1bGUgPSBmaW5kUnVsZSh0aGlzLl9rZWVwLCBub2RlLCB0aGlzLm9wdGlvbnMpKSkgcmV0dXJuIHJ1bGVcbiAgICBpZiAoKHJ1bGUgPSBmaW5kUnVsZSh0aGlzLl9yZW1vdmUsIG5vZGUsIHRoaXMub3B0aW9ucykpKSByZXR1cm4gcnVsZVxuXG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdFJ1bGVcbiAgfSxcblxuICBmb3JFYWNoOiBmdW5jdGlvbiAoZm4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYXJyYXkubGVuZ3RoOyBpKyspIGZuKHRoaXMuYXJyYXlbaV0sIGkpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmaW5kUnVsZSAocnVsZXMsIG5vZGUsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBydWxlID0gcnVsZXNbaV07XG4gICAgaWYgKGZpbHRlclZhbHVlKHJ1bGUsIG5vZGUsIG9wdGlvbnMpKSByZXR1cm4gcnVsZVxuICB9XG4gIHJldHVybiB2b2lkIDBcbn1cblxuZnVuY3Rpb24gZmlsdGVyVmFsdWUgKHJ1bGUsIG5vZGUsIG9wdGlvbnMpIHtcbiAgdmFyIGZpbHRlciA9IHJ1bGUuZmlsdGVyO1xuICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZmlsdGVyID09PSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHJldHVybiB0cnVlXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShmaWx0ZXIpKSB7XG4gICAgaWYgKGZpbHRlci5pbmRleE9mKG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgPiAtMSkgcmV0dXJuIHRydWVcbiAgfSBlbHNlIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZpbHRlci5jYWxsKHJ1bGUsIG5vZGUsIG9wdGlvbnMpKSByZXR1cm4gdHJ1ZVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BmaWx0ZXJgIG5lZWRzIHRvIGJlIGEgc3RyaW5nLCBhcnJheSwgb3IgZnVuY3Rpb24nKVxuICB9XG59XG5cbi8qKlxuICogVGhlIGNvbGxhcHNlV2hpdGVzcGFjZSBmdW5jdGlvbiBpcyBhZGFwdGVkIGZyb20gY29sbGFwc2Utd2hpdGVzcGFjZVxuICogYnkgTHVjIFRoZXZlbmFyZC5cbiAqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgTHVjIFRoZXZlbmFyZCA8bHVjdGhldmVuYXJkQGdtYWlsLmNvbT5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qKlxuICogY29sbGFwc2VXaGl0ZXNwYWNlKG9wdGlvbnMpIHJlbW92ZXMgZXh0cmFuZW91cyB3aGl0ZXNwYWNlIGZyb20gYW4gdGhlIGdpdmVuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gY29sbGFwc2VXaGl0ZXNwYWNlIChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuICB2YXIgaXNCbG9jayA9IG9wdGlvbnMuaXNCbG9jaztcbiAgdmFyIGlzVm9pZCA9IG9wdGlvbnMuaXNWb2lkO1xuICB2YXIgaXNQcmUgPSBvcHRpb25zLmlzUHJlIHx8IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubm9kZU5hbWUgPT09ICdQUkUnXG4gIH07XG5cbiAgaWYgKCFlbGVtZW50LmZpcnN0Q2hpbGQgfHwgaXNQcmUoZWxlbWVudCkpIHJldHVyblxuXG4gIHZhciBwcmV2VGV4dCA9IG51bGw7XG4gIHZhciBrZWVwTGVhZGluZ1dzID0gZmFsc2U7XG5cbiAgdmFyIHByZXYgPSBudWxsO1xuICB2YXIgbm9kZSA9IG5leHQocHJldiwgZWxlbWVudCwgaXNQcmUpO1xuXG4gIHdoaWxlIChub2RlICE9PSBlbGVtZW50KSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMgfHwgbm9kZS5ub2RlVHlwZSA9PT0gNCkgeyAvLyBOb2RlLlRFWFRfTk9ERSBvciBOb2RlLkNEQVRBX1NFQ1RJT05fTk9ERVxuICAgICAgdmFyIHRleHQgPSBub2RlLmRhdGEucmVwbGFjZSgvWyBcXHJcXG5cXHRdKy9nLCAnICcpO1xuXG4gICAgICBpZiAoKCFwcmV2VGV4dCB8fCAvICQvLnRlc3QocHJldlRleHQuZGF0YSkpICYmXG4gICAgICAgICAgIWtlZXBMZWFkaW5nV3MgJiYgdGV4dFswXSA9PT0gJyAnKSB7XG4gICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cigxKTtcbiAgICAgIH1cblxuICAgICAgLy8gYHRleHRgIG1pZ2h0IGJlIGVtcHR5IGF0IHRoaXMgcG9pbnQuXG4gICAgICBpZiAoIXRleHQpIHtcbiAgICAgICAgbm9kZSA9IHJlbW92ZShub2RlKTtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgbm9kZS5kYXRhID0gdGV4dDtcblxuICAgICAgcHJldlRleHQgPSBub2RlO1xuICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkgeyAvLyBOb2RlLkVMRU1FTlRfTk9ERVxuICAgICAgaWYgKGlzQmxvY2sobm9kZSkgfHwgbm9kZS5ub2RlTmFtZSA9PT0gJ0JSJykge1xuICAgICAgICBpZiAocHJldlRleHQpIHtcbiAgICAgICAgICBwcmV2VGV4dC5kYXRhID0gcHJldlRleHQuZGF0YS5yZXBsYWNlKC8gJC8sICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZUZXh0ID0gbnVsbDtcbiAgICAgICAga2VlcExlYWRpbmdXcyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChpc1ZvaWQobm9kZSkgfHwgaXNQcmUobm9kZSkpIHtcbiAgICAgICAgLy8gQXZvaWQgdHJpbW1pbmcgc3BhY2UgYXJvdW5kIG5vbi1ibG9jaywgbm9uLUJSIHZvaWQgZWxlbWVudHMgYW5kIGlubGluZSBQUkUuXG4gICAgICAgIHByZXZUZXh0ID0gbnVsbDtcbiAgICAgICAga2VlcExlYWRpbmdXcyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHByZXZUZXh0KSB7XG4gICAgICAgIC8vIERyb3AgcHJvdGVjdGlvbiBpZiBzZXQgcHJldmlvdXNseS5cbiAgICAgICAga2VlcExlYWRpbmdXcyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlID0gcmVtb3ZlKG5vZGUpO1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dE5vZGUgPSBuZXh0KHByZXYsIG5vZGUsIGlzUHJlKTtcbiAgICBwcmV2ID0gbm9kZTtcbiAgICBub2RlID0gbmV4dE5vZGU7XG4gIH1cblxuICBpZiAocHJldlRleHQpIHtcbiAgICBwcmV2VGV4dC5kYXRhID0gcHJldlRleHQuZGF0YS5yZXBsYWNlKC8gJC8sICcnKTtcbiAgICBpZiAoIXByZXZUZXh0LmRhdGEpIHtcbiAgICAgIHJlbW92ZShwcmV2VGV4dCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogcmVtb3ZlKG5vZGUpIHJlbW92ZXMgdGhlIGdpdmVuIG5vZGUgZnJvbSB0aGUgRE9NIGFuZCByZXR1cm5zIHRoZVxuICogbmV4dCBub2RlIGluIHRoZSBzZXF1ZW5jZS5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEByZXR1cm4ge05vZGV9IG5vZGVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChub2RlKSB7XG4gIHZhciBuZXh0ID0gbm9kZS5uZXh0U2libGluZyB8fCBub2RlLnBhcmVudE5vZGU7XG5cbiAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuXG4gIHJldHVybiBuZXh0XG59XG5cbi8qKlxuICogbmV4dChwcmV2LCBjdXJyZW50LCBpc1ByZSkgcmV0dXJucyB0aGUgbmV4dCBub2RlIGluIHRoZSBzZXF1ZW5jZSwgZ2l2ZW4gdGhlXG4gKiBjdXJyZW50IGFuZCBwcmV2aW91cyBub2Rlcy5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IHByZXZcbiAqIEBwYXJhbSB7Tm9kZX0gY3VycmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXNQcmVcbiAqIEByZXR1cm4ge05vZGV9XG4gKi9cbmZ1bmN0aW9uIG5leHQgKHByZXYsIGN1cnJlbnQsIGlzUHJlKSB7XG4gIGlmICgocHJldiAmJiBwcmV2LnBhcmVudE5vZGUgPT09IGN1cnJlbnQpIHx8IGlzUHJlKGN1cnJlbnQpKSB7XG4gICAgcmV0dXJuIGN1cnJlbnQubmV4dFNpYmxpbmcgfHwgY3VycmVudC5wYXJlbnROb2RlXG4gIH1cblxuICByZXR1cm4gY3VycmVudC5maXJzdENoaWxkIHx8IGN1cnJlbnQubmV4dFNpYmxpbmcgfHwgY3VycmVudC5wYXJlbnROb2RlXG59XG5cbi8qXG4gKiBTZXQgdXAgd2luZG93IGZvciBOb2RlLmpzXG4gKi9cblxudmFyIHJvb3QgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fSk7XG5cbi8qXG4gKiBQYXJzaW5nIEhUTUwgc3RyaW5nc1xuICovXG5cbmZ1bmN0aW9uIGNhblBhcnNlSFRNTE5hdGl2ZWx5ICgpIHtcbiAgdmFyIFBhcnNlciA9IHJvb3QuRE9NUGFyc2VyO1xuICB2YXIgY2FuUGFyc2UgPSBmYWxzZTtcblxuICAvLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTEyOTAzMVxuICAvLyBGaXJlZm94L09wZXJhL0lFIHRocm93IGVycm9ycyBvbiB1bnN1cHBvcnRlZCB0eXBlc1xuICB0cnkge1xuICAgIC8vIFdlYktpdCByZXR1cm5zIG51bGwgb24gdW5zdXBwb3J0ZWQgdHlwZXNcbiAgICBpZiAobmV3IFBhcnNlcigpLnBhcnNlRnJvbVN0cmluZygnJywgJ3RleHQvaHRtbCcpKSB7XG4gICAgICBjYW5QYXJzZSA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIHJldHVybiBjYW5QYXJzZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVIVE1MUGFyc2VyICgpIHtcbiAgdmFyIFBhcnNlciA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIHtcbiAgICBpZiAoc2hvdWxkVXNlQWN0aXZlWCgpKSB7XG4gICAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRnJvbVN0cmluZyA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgdmFyIGRvYyA9IG5ldyB3aW5kb3cuQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgICAgICAgZG9jLmRlc2lnbk1vZGUgPSAnb24nOyAvLyBkaXNhYmxlIG9uLXBhZ2Ugc2NyaXB0c1xuICAgICAgICBkb2Mub3BlbigpO1xuICAgICAgICBkb2Mud3JpdGUoc3RyaW5nKTtcbiAgICAgICAgZG9jLmNsb3NlKCk7XG4gICAgICAgIHJldHVybiBkb2NcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICB2YXIgZG9jID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCcnKTtcbiAgICAgICAgZG9jLm9wZW4oKTtcbiAgICAgICAgZG9jLndyaXRlKHN0cmluZyk7XG4gICAgICAgIGRvYy5jbG9zZSgpO1xuICAgICAgICByZXR1cm4gZG9jXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gUGFyc2VyXG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZUFjdGl2ZVggKCkge1xuICB2YXIgdXNlQWN0aXZlWCA9IGZhbHNlO1xuICB0cnkge1xuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgnJykub3BlbigpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHJvb3QuQWN0aXZlWE9iamVjdCkgdXNlQWN0aXZlWCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHVzZUFjdGl2ZVhcbn1cblxudmFyIEhUTUxQYXJzZXIgPSBjYW5QYXJzZUhUTUxOYXRpdmVseSgpID8gcm9vdC5ET01QYXJzZXIgOiBjcmVhdGVIVE1MUGFyc2VyKCk7XG5cbmZ1bmN0aW9uIFJvb3ROb2RlIChpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgcm9vdDtcbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgZG9jID0gaHRtbFBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhcbiAgICAgIC8vIERPTSBwYXJzZXJzIGFycmFuZ2UgZWxlbWVudHMgaW4gdGhlIDxoZWFkPiBhbmQgPGJvZHk+LlxuICAgICAgLy8gV3JhcHBpbmcgaW4gYSBjdXN0b20gZWxlbWVudCBlbnN1cmVzIGVsZW1lbnRzIGFyZSByZWxpYWJseSBhcnJhbmdlZCBpblxuICAgICAgLy8gYSBzaW5nbGUgZWxlbWVudC5cbiAgICAgICc8eC10dXJuZG93biBpZD1cInR1cm5kb3duLXJvb3RcIj4nICsgaW5wdXQgKyAnPC94LXR1cm5kb3duPicsXG4gICAgICAndGV4dC9odG1sJ1xuICAgICk7XG4gICAgcm9vdCA9IGRvYy5nZXRFbGVtZW50QnlJZCgndHVybmRvd24tcm9vdCcpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QgPSBpbnB1dC5jbG9uZU5vZGUodHJ1ZSk7XG4gIH1cbiAgY29sbGFwc2VXaGl0ZXNwYWNlKHtcbiAgICBlbGVtZW50OiByb290LFxuICAgIGlzQmxvY2s6IGlzQmxvY2ssXG4gICAgaXNWb2lkOiBpc1ZvaWQsXG4gICAgaXNQcmU6IG9wdGlvbnMucHJlZm9ybWF0dGVkQ29kZSA/IGlzUHJlT3JDb2RlIDogbnVsbFxuICB9KTtcblxuICByZXR1cm4gcm9vdFxufVxuXG52YXIgX2h0bWxQYXJzZXI7XG5mdW5jdGlvbiBodG1sUGFyc2VyICgpIHtcbiAgX2h0bWxQYXJzZXIgPSBfaHRtbFBhcnNlciB8fCBuZXcgSFRNTFBhcnNlcigpO1xuICByZXR1cm4gX2h0bWxQYXJzZXJcbn1cblxuZnVuY3Rpb24gaXNQcmVPckNvZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubm9kZU5hbWUgPT09ICdQUkUnIHx8IG5vZGUubm9kZU5hbWUgPT09ICdDT0RFJ1xufVxuXG5mdW5jdGlvbiBOb2RlIChub2RlLCBvcHRpb25zKSB7XG4gIG5vZGUuaXNCbG9jayA9IGlzQmxvY2sobm9kZSk7XG4gIG5vZGUuaXNDb2RlID0gbm9kZS5ub2RlTmFtZSA9PT0gJ0NPREUnIHx8IG5vZGUucGFyZW50Tm9kZS5pc0NvZGU7XG4gIG5vZGUuaXNCbGFuayA9IGlzQmxhbmsobm9kZSk7XG4gIG5vZGUuZmxhbmtpbmdXaGl0ZXNwYWNlID0gZmxhbmtpbmdXaGl0ZXNwYWNlKG5vZGUsIG9wdGlvbnMpO1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiBpc0JsYW5rIChub2RlKSB7XG4gIHJldHVybiAoXG4gICAgIWlzVm9pZChub2RlKSAmJlxuICAgICFpc01lYW5pbmdmdWxXaGVuQmxhbmsobm9kZSkgJiZcbiAgICAvXlxccyokL2kudGVzdChub2RlLnRleHRDb250ZW50KSAmJlxuICAgICFoYXNWb2lkKG5vZGUpICYmXG4gICAgIWhhc01lYW5pbmdmdWxXaGVuQmxhbmsobm9kZSlcbiAgKVxufVxuXG5mdW5jdGlvbiBmbGFua2luZ1doaXRlc3BhY2UgKG5vZGUsIG9wdGlvbnMpIHtcbiAgaWYgKG5vZGUuaXNCbG9jayB8fCAob3B0aW9ucy5wcmVmb3JtYXR0ZWRDb2RlICYmIG5vZGUuaXNDb2RlKSkge1xuICAgIHJldHVybiB7IGxlYWRpbmc6ICcnLCB0cmFpbGluZzogJycgfVxuICB9XG5cbiAgdmFyIGVkZ2VzID0gZWRnZVdoaXRlc3BhY2Uobm9kZS50ZXh0Q29udGVudCk7XG5cbiAgLy8gYWJhbmRvbiBsZWFkaW5nIEFTQ0lJIFdTIGlmIGxlZnQtZmxhbmtlZCBieSBBU0NJSSBXU1xuICBpZiAoZWRnZXMubGVhZGluZ0FzY2lpICYmIGlzRmxhbmtlZEJ5V2hpdGVzcGFjZSgnbGVmdCcsIG5vZGUsIG9wdGlvbnMpKSB7XG4gICAgZWRnZXMubGVhZGluZyA9IGVkZ2VzLmxlYWRpbmdOb25Bc2NpaTtcbiAgfVxuXG4gIC8vIGFiYW5kb24gdHJhaWxpbmcgQVNDSUkgV1MgaWYgcmlnaHQtZmxhbmtlZCBieSBBU0NJSSBXU1xuICBpZiAoZWRnZXMudHJhaWxpbmdBc2NpaSAmJiBpc0ZsYW5rZWRCeVdoaXRlc3BhY2UoJ3JpZ2h0Jywgbm9kZSwgb3B0aW9ucykpIHtcbiAgICBlZGdlcy50cmFpbGluZyA9IGVkZ2VzLnRyYWlsaW5nTm9uQXNjaWk7XG4gIH1cblxuICByZXR1cm4geyBsZWFkaW5nOiBlZGdlcy5sZWFkaW5nLCB0cmFpbGluZzogZWRnZXMudHJhaWxpbmcgfVxufVxuXG5mdW5jdGlvbiBlZGdlV2hpdGVzcGFjZSAoc3RyaW5nKSB7XG4gIHZhciBtID0gc3RyaW5nLm1hdGNoKC9eKChbIFxcdFxcclxcbl0qKShcXHMqKSkoPzooPz1cXFMpW1xcc1xcU10qXFxTKT8oKFxccyo/KShbIFxcdFxcclxcbl0qKSkkLyk7XG4gIHJldHVybiB7XG4gICAgbGVhZGluZzogbVsxXSwgLy8gd2hvbGUgc3RyaW5nIGZvciB3aGl0ZXNwYWNlLW9ubHkgc3RyaW5nc1xuICAgIGxlYWRpbmdBc2NpaTogbVsyXSxcbiAgICBsZWFkaW5nTm9uQXNjaWk6IG1bM10sXG4gICAgdHJhaWxpbmc6IG1bNF0sIC8vIGVtcHR5IGZvciB3aGl0ZXNwYWNlLW9ubHkgc3RyaW5nc1xuICAgIHRyYWlsaW5nTm9uQXNjaWk6IG1bNV0sXG4gICAgdHJhaWxpbmdBc2NpaTogbVs2XVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRmxhbmtlZEJ5V2hpdGVzcGFjZSAoc2lkZSwgbm9kZSwgb3B0aW9ucykge1xuICB2YXIgc2libGluZztcbiAgdmFyIHJlZ0V4cDtcbiAgdmFyIGlzRmxhbmtlZDtcblxuICBpZiAoc2lkZSA9PT0gJ2xlZnQnKSB7XG4gICAgc2libGluZyA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgIHJlZ0V4cCA9IC8gJC87XG4gIH0gZWxzZSB7XG4gICAgc2libGluZyA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgcmVnRXhwID0gL14gLztcbiAgfVxuXG4gIGlmIChzaWJsaW5nKSB7XG4gICAgaWYgKHNpYmxpbmcubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIGlzRmxhbmtlZCA9IHJlZ0V4cC50ZXN0KHNpYmxpbmcubm9kZVZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucHJlZm9ybWF0dGVkQ29kZSAmJiBzaWJsaW5nLm5vZGVOYW1lID09PSAnQ09ERScpIHtcbiAgICAgIGlzRmxhbmtlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoc2libGluZy5ub2RlVHlwZSA9PT0gMSAmJiAhaXNCbG9jayhzaWJsaW5nKSkge1xuICAgICAgaXNGbGFua2VkID0gcmVnRXhwLnRlc3Qoc2libGluZy50ZXh0Q29udGVudCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpc0ZsYW5rZWRcbn1cblxudmFyIHJlZHVjZSA9IEFycmF5LnByb3RvdHlwZS5yZWR1Y2U7XG52YXIgZXNjYXBlcyA9IFtcbiAgWy9cXFxcL2csICdcXFxcXFxcXCddLFxuICBbL1xcKi9nLCAnXFxcXConXSxcbiAgWy9eLS9nLCAnXFxcXC0nXSxcbiAgWy9eXFwrIC9nLCAnXFxcXCsgJ10sXG4gIFsvXig9KykvZywgJ1xcXFwkMSddLFxuICBbL14oI3sxLDZ9KSAvZywgJ1xcXFwkMSAnXSxcbiAgWy9gL2csICdcXFxcYCddLFxuICBbL15+fn4vZywgJ1xcXFx+fn4nXSxcbiAgWy9cXFsvZywgJ1xcXFxbJ10sXG4gIFsvXFxdL2csICdcXFxcXSddLFxuICBbL14+L2csICdcXFxcPiddLFxuICBbL18vZywgJ1xcXFxfJ10sXG4gIFsvXihcXGQrKVxcLiAvZywgJyQxXFxcXC4gJ11cbl07XG5cbmZ1bmN0aW9uIFR1cm5kb3duU2VydmljZSAob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHVybmRvd25TZXJ2aWNlKSkgcmV0dXJuIG5ldyBUdXJuZG93blNlcnZpY2Uob3B0aW9ucylcblxuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgcnVsZXM6IHJ1bGVzLFxuICAgIGhlYWRpbmdTdHlsZTogJ3NldGV4dCcsXG4gICAgaHI6ICcqICogKicsXG4gICAgYnVsbGV0TGlzdE1hcmtlcjogJyonLFxuICAgIGNvZGVCbG9ja1N0eWxlOiAnaW5kZW50ZWQnLFxuICAgIGZlbmNlOiAnYGBgJyxcbiAgICBlbURlbGltaXRlcjogJ18nLFxuICAgIHN0cm9uZ0RlbGltaXRlcjogJyoqJyxcbiAgICBsaW5rU3R5bGU6ICdpbmxpbmVkJyxcbiAgICBsaW5rUmVmZXJlbmNlU3R5bGU6ICdmdWxsJyxcbiAgICBicjogJyAgJyxcbiAgICBwcmVmb3JtYXR0ZWRDb2RlOiBmYWxzZSxcbiAgICBibGFua1JlcGxhY2VtZW50OiBmdW5jdGlvbiAoY29udGVudCwgbm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUuaXNCbG9jayA/ICdcXG5cXG4nIDogJydcbiAgICB9LFxuICAgIGtlZXBSZXBsYWNlbWVudDogZnVuY3Rpb24gKGNvbnRlbnQsIG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmlzQmxvY2sgPyAnXFxuXFxuJyArIG5vZGUub3V0ZXJIVE1MICsgJ1xcblxcbicgOiBub2RlLm91dGVySFRNTFxuICAgIH0sXG4gICAgZGVmYXVsdFJlcGxhY2VtZW50OiBmdW5jdGlvbiAoY29udGVudCwgbm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUuaXNCbG9jayA/ICdcXG5cXG4nICsgY29udGVudCArICdcXG5cXG4nIDogY29udGVudFxuICAgIH1cbiAgfTtcbiAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gIHRoaXMucnVsZXMgPSBuZXcgUnVsZXModGhpcy5vcHRpb25zKTtcbn1cblxuVHVybmRvd25TZXJ2aWNlLnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gICAqIFRoZSBlbnRyeSBwb2ludCBmb3IgY29udmVydGluZyBhIHN0cmluZyBvciBET00gbm9kZSB0byBNYXJrZG93blxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfEhUTUxFbGVtZW50fSBpbnB1dCBUaGUgc3RyaW5nIG9yIERPTSBub2RlIHRvIGNvbnZlcnRcbiAgICogQHJldHVybnMgQSBNYXJrZG93biByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW5wdXRcbiAgICogQHR5cGUgU3RyaW5nXG4gICAqL1xuXG4gIHR1cm5kb3duOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIWNhbkNvbnZlcnQoaW5wdXQpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBpbnB1dCArICcgaXMgbm90IGEgc3RyaW5nLCBvciBhbiBlbGVtZW50L2RvY3VtZW50L2ZyYWdtZW50IG5vZGUuJ1xuICAgICAgKVxuICAgIH1cblxuICAgIGlmIChpbnB1dCA9PT0gJycpIHJldHVybiAnJ1xuXG4gICAgdmFyIG91dHB1dCA9IHByb2Nlc3MuY2FsbCh0aGlzLCBuZXcgUm9vdE5vZGUoaW5wdXQsIHRoaXMub3B0aW9ucykpO1xuICAgIHJldHVybiBwb3N0UHJvY2Vzcy5jYWxsKHRoaXMsIG91dHB1dClcbiAgfSxcblxuICAvKipcbiAgICogQWRkIG9uZSBvciBtb3JlIHBsdWdpbnNcbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fSBwbHVnaW4gVGhlIHBsdWdpbiBvciBhcnJheSBvZiBwbHVnaW5zIHRvIGFkZFxuICAgKiBAcmV0dXJucyBUaGUgVHVybmRvd24gaW5zdGFuY2UgZm9yIGNoYWluaW5nXG4gICAqIEB0eXBlIE9iamVjdFxuICAgKi9cblxuICB1c2U6IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwbHVnaW4pKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbi5sZW5ndGg7IGkrKykgdGhpcy51c2UocGx1Z2luW2ldKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbih0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGx1Z2luIG11c3QgYmUgYSBGdW5jdGlvbiBvciBhbiBBcnJheSBvZiBGdW5jdGlvbnMnKVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIGEgcnVsZVxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIHVuaXF1ZSBrZXkgb2YgdGhlIHJ1bGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHJ1bGUgVGhlIHJ1bGVcbiAgICogQHJldHVybnMgVGhlIFR1cm5kb3duIGluc3RhbmNlIGZvciBjaGFpbmluZ1xuICAgKiBAdHlwZSBPYmplY3RcbiAgICovXG5cbiAgYWRkUnVsZTogZnVuY3Rpb24gKGtleSwgcnVsZSkge1xuICAgIHRoaXMucnVsZXMuYWRkKGtleSwgcnVsZSk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfSxcblxuICAvKipcbiAgICogS2VlcCBhIG5vZGUgKGFzIEhUTUwpIHRoYXQgbWF0Y2hlcyB0aGUgZmlsdGVyXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl8RnVuY3Rpb259IGZpbHRlciBUaGUgdW5pcXVlIGtleSBvZiB0aGUgcnVsZVxuICAgKiBAcmV0dXJucyBUaGUgVHVybmRvd24gaW5zdGFuY2UgZm9yIGNoYWluaW5nXG4gICAqIEB0eXBlIE9iamVjdFxuICAgKi9cblxuICBrZWVwOiBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgdGhpcy5ydWxlcy5rZWVwKGZpbHRlcik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlIGEgbm9kZSB0aGF0IG1hdGNoZXMgdGhlIGZpbHRlclxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fEZ1bmN0aW9ufSBmaWx0ZXIgVGhlIHVuaXF1ZSBrZXkgb2YgdGhlIHJ1bGVcbiAgICogQHJldHVybnMgVGhlIFR1cm5kb3duIGluc3RhbmNlIGZvciBjaGFpbmluZ1xuICAgKiBAdHlwZSBPYmplY3RcbiAgICovXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgdGhpcy5ydWxlcy5yZW1vdmUoZmlsdGVyKTtcbiAgICByZXR1cm4gdGhpc1xuICB9LFxuXG4gIC8qKlxuICAgKiBFc2NhcGVzIE1hcmtkb3duIHN5bnRheFxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBlc2NhcGVcbiAgICogQHJldHVybnMgQSBzdHJpbmcgd2l0aCBNYXJrZG93biBzeW50YXggZXNjYXBlZFxuICAgKiBAdHlwZSBTdHJpbmdcbiAgICovXG5cbiAgZXNjYXBlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGVzY2FwZXMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgZXNjYXBlKSB7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3IucmVwbGFjZShlc2NhcGVbMF0sIGVzY2FwZVsxXSlcbiAgICB9LCBzdHJpbmcpXG4gIH1cbn07XG5cbi8qKlxuICogUmVkdWNlcyBhIERPTSBub2RlIGRvd24gdG8gaXRzIE1hcmtkb3duIHN0cmluZyBlcXVpdmFsZW50XG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50Tm9kZSBUaGUgbm9kZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyBBIE1hcmtkb3duIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBub2RlXG4gKiBAdHlwZSBTdHJpbmdcbiAqL1xuXG5mdW5jdGlvbiBwcm9jZXNzIChwYXJlbnROb2RlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmV0dXJuIHJlZHVjZS5jYWxsKHBhcmVudE5vZGUuY2hpbGROb2RlcywgZnVuY3Rpb24gKG91dHB1dCwgbm9kZSkge1xuICAgIG5vZGUgPSBuZXcgTm9kZShub2RlLCBzZWxmLm9wdGlvbnMpO1xuXG4gICAgdmFyIHJlcGxhY2VtZW50ID0gJyc7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIHJlcGxhY2VtZW50ID0gbm9kZS5pc0NvZGUgPyBub2RlLm5vZGVWYWx1ZSA6IHNlbGYuZXNjYXBlKG5vZGUubm9kZVZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgIHJlcGxhY2VtZW50ID0gcmVwbGFjZW1lbnRGb3JOb2RlLmNhbGwoc2VsZiwgbm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpvaW4ob3V0cHV0LCByZXBsYWNlbWVudClcbiAgfSwgJycpXG59XG5cbi8qKlxuICogQXBwZW5kcyBzdHJpbmdzIGFzIGVhY2ggcnVsZSByZXF1aXJlcyBhbmQgdHJpbXMgdGhlIG91dHB1dFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBvdXRwdXQgVGhlIGNvbnZlcnNpb24gb3V0cHV0XG4gKiBAcmV0dXJucyBBIHRyaW1tZWQgdmVyc2lvbiBvZiB0aGUgb3VwdXRcbiAqIEB0eXBlIFN0cmluZ1xuICovXG5cbmZ1bmN0aW9uIHBvc3RQcm9jZXNzIChvdXRwdXQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnJ1bGVzLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICBpZiAodHlwZW9mIHJ1bGUuYXBwZW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvdXRwdXQgPSBqb2luKG91dHB1dCwgcnVsZS5hcHBlbmQoc2VsZi5vcHRpb25zKSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gb3V0cHV0LnJlcGxhY2UoL15bXFx0XFxyXFxuXSsvLCAnJykucmVwbGFjZSgvW1xcdFxcclxcblxcc10rJC8sICcnKVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIGVsZW1lbnQgbm9kZSB0byBpdHMgTWFya2Rvd24gZXF1aXZhbGVudFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGUgVGhlIG5vZGUgdG8gY29udmVydFxuICogQHJldHVybnMgQSBNYXJrZG93biByZXByZXNlbnRhdGlvbiBvZiB0aGUgbm9kZVxuICogQHR5cGUgU3RyaW5nXG4gKi9cblxuZnVuY3Rpb24gcmVwbGFjZW1lbnRGb3JOb2RlIChub2RlKSB7XG4gIHZhciBydWxlID0gdGhpcy5ydWxlcy5mb3JOb2RlKG5vZGUpO1xuICB2YXIgY29udGVudCA9IHByb2Nlc3MuY2FsbCh0aGlzLCBub2RlKTtcbiAgdmFyIHdoaXRlc3BhY2UgPSBub2RlLmZsYW5raW5nV2hpdGVzcGFjZTtcbiAgaWYgKHdoaXRlc3BhY2UubGVhZGluZyB8fCB3aGl0ZXNwYWNlLnRyYWlsaW5nKSBjb250ZW50ID0gY29udGVudC50cmltKCk7XG4gIHJldHVybiAoXG4gICAgd2hpdGVzcGFjZS5sZWFkaW5nICtcbiAgICBydWxlLnJlcGxhY2VtZW50KGNvbnRlbnQsIG5vZGUsIHRoaXMub3B0aW9ucykgK1xuICAgIHdoaXRlc3BhY2UudHJhaWxpbmdcbiAgKVxufVxuXG4vKipcbiAqIEpvaW5zIHJlcGxhY2VtZW50IHRvIHRoZSBjdXJyZW50IG91dHB1dCB3aXRoIGFwcHJvcHJpYXRlIG51bWJlciBvZiBuZXcgbGluZXNcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gb3V0cHV0IFRoZSBjdXJyZW50IGNvbnZlcnNpb24gb3V0cHV0XG4gKiBAcGFyYW0ge1N0cmluZ30gcmVwbGFjZW1lbnQgVGhlIHN0cmluZyB0byBhcHBlbmQgdG8gdGhlIG91dHB1dFxuICogQHJldHVybnMgSm9pbmVkIG91dHB1dFxuICogQHR5cGUgU3RyaW5nXG4gKi9cblxuZnVuY3Rpb24gam9pbiAob3V0cHV0LCByZXBsYWNlbWVudCkge1xuICB2YXIgczEgPSB0cmltVHJhaWxpbmdOZXdsaW5lcyhvdXRwdXQpO1xuICB2YXIgczIgPSB0cmltTGVhZGluZ05ld2xpbmVzKHJlcGxhY2VtZW50KTtcbiAgdmFyIG5scyA9IE1hdGgubWF4KG91dHB1dC5sZW5ndGggLSBzMS5sZW5ndGgsIHJlcGxhY2VtZW50Lmxlbmd0aCAtIHMyLmxlbmd0aCk7XG4gIHZhciBzZXBhcmF0b3IgPSAnXFxuXFxuJy5zdWJzdHJpbmcoMCwgbmxzKTtcblxuICByZXR1cm4gczEgKyBzZXBhcmF0b3IgKyBzMlxufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBpbnB1dCBjYW4gYmUgY29udmVydGVkXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGlucHV0IERlc2NyaWJlIHRoaXMgcGFyYW1ldGVyXG4gKiBAcmV0dXJucyBEZXNjcmliZSB3aGF0IGl0IHJldHVybnNcbiAqIEB0eXBlIFN0cmluZ3xPYmplY3R8QXJyYXl8Qm9vbGVhbnxOdW1iZXJcbiAqL1xuXG5mdW5jdGlvbiBjYW5Db252ZXJ0IChpbnB1dCkge1xuICByZXR1cm4gKFxuICAgIGlucHV0ICE9IG51bGwgJiYgKFxuICAgICAgdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fFxuICAgICAgKGlucHV0Lm5vZGVUeXBlICYmIChcbiAgICAgICAgaW5wdXQubm9kZVR5cGUgPT09IDEgfHwgaW5wdXQubm9kZVR5cGUgPT09IDkgfHwgaW5wdXQubm9kZVR5cGUgPT09IDExXG4gICAgICApKVxuICAgIClcbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBUdXJuZG93blNlcnZpY2U7XG4iLCAiZXhwb3J0IGNvbnN0IGF0dGFjaG1lbnRTZWxlY3RvciA9IFwiW2RhdGEtdHJpeC1hdHRhY2htZW50XVwiXG5cbmNvbnN0IGF0dGFjaG1lbnRzID0ge1xuICBwcmV2aWV3OiB7XG4gICAgcHJlc2VudGF0aW9uOiBcImdhbGxlcnlcIixcbiAgICBjYXB0aW9uOiB7XG4gICAgICBuYW1lOiB0cnVlLFxuICAgICAgc2l6ZTogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICBmaWxlOiB7XG4gICAgY2FwdGlvbjoge1xuICAgICAgc2l6ZTogdHJ1ZSxcbiAgICB9LFxuICB9LFxufVxuZXhwb3J0IGRlZmF1bHQgYXR0YWNobWVudHNcbiIsICJjb25zdCBhdHRyaWJ1dGVzID0ge1xuICBkZWZhdWx0OiB7XG4gICAgdGFnTmFtZTogXCJkaXZcIixcbiAgICBwYXJzZTogZmFsc2UsXG4gIH0sXG4gIHF1b3RlOiB7XG4gICAgdGFnTmFtZTogXCJibG9ja3F1b3RlXCIsXG4gICAgbmVzdGFibGU6IHRydWUsXG4gIH0sXG4gIGhlYWRpbmcxOiB7XG4gICAgdGFnTmFtZTogXCJoMVwiLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIGJyZWFrT25SZXR1cm46IHRydWUsXG4gICAgZ3JvdXA6IGZhbHNlLFxuICB9LFxuICBjb2RlOiB7XG4gICAgdGFnTmFtZTogXCJwcmVcIixcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICBodG1sQXR0cmlidXRlczogWyBcImxhbmd1YWdlXCIgXSxcbiAgICB0ZXh0OiB7XG4gICAgICBwbGFpbnRleHQ6IHRydWUsXG4gICAgfSxcbiAgfSxcbiAgYnVsbGV0TGlzdDoge1xuICAgIHRhZ05hbWU6IFwidWxcIixcbiAgICBwYXJzZTogZmFsc2UsXG4gIH0sXG4gIGJ1bGxldDoge1xuICAgIHRhZ05hbWU6IFwibGlcIixcbiAgICBsaXN0QXR0cmlidXRlOiBcImJ1bGxldExpc3RcIixcbiAgICBncm91cDogZmFsc2UsXG4gICAgbmVzdGFibGU6IHRydWUsXG4gICAgdGVzdChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gdGFnTmFtZShlbGVtZW50LnBhcmVudE5vZGUpID09PSBhdHRyaWJ1dGVzW3RoaXMubGlzdEF0dHJpYnV0ZV0udGFnTmFtZVxuICAgIH0sXG4gIH0sXG4gIG51bWJlckxpc3Q6IHtcbiAgICB0YWdOYW1lOiBcIm9sXCIsXG4gICAgcGFyc2U6IGZhbHNlLFxuICB9LFxuICBudW1iZXI6IHtcbiAgICB0YWdOYW1lOiBcImxpXCIsXG4gICAgbGlzdEF0dHJpYnV0ZTogXCJudW1iZXJMaXN0XCIsXG4gICAgZ3JvdXA6IGZhbHNlLFxuICAgIG5lc3RhYmxlOiB0cnVlLFxuICAgIHRlc3QoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRhZ05hbWUoZWxlbWVudC5wYXJlbnROb2RlKSA9PT0gYXR0cmlidXRlc1t0aGlzLmxpc3RBdHRyaWJ1dGVdLnRhZ05hbWVcbiAgICB9LFxuICB9LFxuICBhdHRhY2htZW50R2FsbGVyeToge1xuICAgIHRhZ05hbWU6IFwiZGl2XCIsXG4gICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHBhcnNlOiBmYWxzZSxcbiAgICBncm91cDogZmFsc2UsXG4gIH0sXG59XG5cbmNvbnN0IHRhZ05hbWUgPSAoZWxlbWVudCkgPT4gZWxlbWVudD8udGFnTmFtZT8udG9Mb3dlckNhc2UoKVxuXG5leHBvcnQgZGVmYXVsdCBhdHRyaWJ1dGVzXG4iLCAiY29uc3QgYW5kcm9pZFZlcnNpb25NYXRjaCA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2FuZHJvaWRcXHMoWzAtOV0rLipDaHJvbWUpL2kpXG5jb25zdCBhbmRyb2lkVmVyc2lvbiA9IGFuZHJvaWRWZXJzaW9uTWF0Y2ggJiYgcGFyc2VJbnQoYW5kcm9pZFZlcnNpb25NYXRjaFsxXSlcblxuZXhwb3J0IGRlZmF1bHQge1xuICAvLyBBbmRyb2lkIGVtaXRzIGNvbXBvc2l0aW9uIGV2ZW50cyB3aGVuIG1vdmluZyB0aGUgY3Vyc29yIHRocm91Z2ggZXhpc3RpbmcgdGV4dFxuICAvLyBJbnRyb2R1Y2VkIGluIENocm9tZSA2NTogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NzY0NDM5I2M5XG4gIGNvbXBvc2VzRXhpc3RpbmdUZXh0OiAvQW5kcm9pZC4qQ2hyb21lLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLFxuXG4gIC8vIEFuZHJvaWQgMTMsIGVzcGVjaWFsbHkgb24gU2Ftc3VuZyBrZXlib2FyZHMsIGVtaXRzIGV4dHJhIGNvbXBvc2l0aW9uZW5kIGFuZCBiZWZvcmVpbnB1dCBldmVudHNcbiAgLy8gdGhhdCBjYW4gbWFrZSB0aGUgaW5wdXQgaGFuZGxlciBsb3NlIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBvciBlbnRlciBhbiBpbmZpbml0ZSBpbnB1dCAtPiByZW5kZXIgLT4gaW5wdXRcbiAgLy8gbG9vcC5cbiAgcmVjZW50QW5kcm9pZDogYW5kcm9pZFZlcnNpb24gJiYgYW5kcm9pZFZlcnNpb24gPiAxMixcbiAgc2Ftc3VuZ0FuZHJvaWQ6IGFuZHJvaWRWZXJzaW9uICYmIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQuKlNNLS8pLFxuXG4gIC8vIElFIDExIGFjdGl2YXRlcyByZXNpemluZyBoYW5kbGVzIG9uIGVkaXRhYmxlIGVsZW1lbnRzIHRoYXQgaGF2ZSBcImxheW91dFwiXG4gIGZvcmNlc09iamVjdFJlc2l6aW5nOiAvVHJpZGVudC4qcnY6MTEvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9pbnB1dC1ldmVudHMtMS8gKyBodHRwczovL3d3dy53My5vcmcvVFIvaW5wdXQtZXZlbnRzLTIvXG4gIHN1cHBvcnRzSW5wdXRFdmVudHM6IHR5cGVvZiBJbnB1dEV2ZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgWyBcImRhdGFcIiwgXCJnZXRUYXJnZXRSYW5nZXNcIiwgXCJpbnB1dFR5cGVcIiBdLmV2ZXJ5KHByb3AgPT4gcHJvcCBpbiBJbnB1dEV2ZW50LnByb3RvdHlwZSksXG59XG4iLCAiZXhwb3J0IGRlZmF1bHQge1xuICBBRERfQVRUUjogWyBcImxhbmd1YWdlXCIgXSxcbiAgU0FGRV9GT1JfWE1MOiBmYWxzZSxcbiAgUkVUVVJOX0RPTTogdHJ1ZVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgYXR0YWNoRmlsZXM6IFwiQXR0YWNoIEZpbGVzXCIsXG4gIGJvbGQ6IFwiQm9sZFwiLFxuICBidWxsZXRzOiBcIkJ1bGxldHNcIixcbiAgYnl0ZTogXCJCeXRlXCIsXG4gIGJ5dGVzOiBcIkJ5dGVzXCIsXG4gIGNhcHRpb25QbGFjZWhvbGRlcjogXCJBZGQgYSBjYXB0aW9u4oCmXCIsXG4gIGNvZGU6IFwiQ29kZVwiLFxuICBoZWFkaW5nMTogXCJIZWFkaW5nXCIsXG4gIGluZGVudDogXCJJbmNyZWFzZSBMZXZlbFwiLFxuICBpdGFsaWM6IFwiSXRhbGljXCIsXG4gIGxpbms6IFwiTGlua1wiLFxuICBudW1iZXJzOiBcIk51bWJlcnNcIixcbiAgb3V0ZGVudDogXCJEZWNyZWFzZSBMZXZlbFwiLFxuICBxdW90ZTogXCJRdW90ZVwiLFxuICByZWRvOiBcIlJlZG9cIixcbiAgcmVtb3ZlOiBcIlJlbW92ZVwiLFxuICBzdHJpa2U6IFwiU3RyaWtldGhyb3VnaFwiLFxuICB1bmRvOiBcIlVuZG9cIixcbiAgdW5saW5rOiBcIlVubGlua1wiLFxuICB1cmw6IFwiVVJMXCIsXG4gIHVybFBsYWNlaG9sZGVyOiBcIkVudGVyIGEgVVJM4oCmXCIsXG4gIEdCOiBcIkdCXCIsXG4gIEtCOiBcIktCXCIsXG4gIE1COiBcIk1CXCIsXG4gIFBCOiBcIlBCXCIsXG4gIFRCOiBcIlRCXCIsXG59XG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiAgICBuby1jYXNlLWRlY2xhcmF0aW9ucyxcbiovXG5pbXBvcnQgbGFuZyBmcm9tIFwidHJpeC9jb25maWcvbGFuZ1wiXG5cbmNvbnN0IHNpemVzID0gWyBsYW5nLmJ5dGVzLCBsYW5nLktCLCBsYW5nLk1CLCBsYW5nLkdCLCBsYW5nLlRCLCBsYW5nLlBCIF1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBwcmVmaXg6IFwiSUVDXCIsXG4gIHByZWNpc2lvbjogMixcblxuICBmb3JtYXR0ZXIobnVtYmVyKSB7XG4gICAgc3dpdGNoIChudW1iZXIpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIGAwICR7bGFuZy5ieXRlc31gXG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBgMSAke2xhbmcuYnl0ZX1gXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsZXQgYmFzZVxuXG4gICAgICAgIGlmICh0aGlzLnByZWZpeCA9PT0gXCJTSVwiKSB7XG4gICAgICAgICAgYmFzZSA9IDEwMDBcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZWZpeCA9PT0gXCJJRUNcIikge1xuICAgICAgICAgIGJhc2UgPSAxMDI0XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBleHAgPSBNYXRoLmZsb29yKE1hdGgubG9nKG51bWJlcikgLyBNYXRoLmxvZyhiYXNlKSlcbiAgICAgICAgY29uc3QgaHVtYW5TaXplID0gbnVtYmVyIC8gTWF0aC5wb3coYmFzZSwgZXhwKVxuICAgICAgICBjb25zdCBzdHJpbmcgPSBodW1hblNpemUudG9GaXhlZCh0aGlzLnByZWNpc2lvbilcbiAgICAgICAgY29uc3Qgd2l0aG91dEluc2lnbmlmaWNhbnRaZXJvcyA9IHN0cmluZy5yZXBsYWNlKC8wKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC4kLywgXCJcIilcbiAgICAgICAgcmV0dXJuIGAke3dpdGhvdXRJbnNpZ25pZmljYW50WmVyb3N9ICR7c2l6ZXNbZXhwXX1gXG4gICAgfVxuICB9LFxufVxuIiwgImV4cG9ydCBjb25zdCBaRVJPX1dJRFRIX1NQQUNFID0gXCJcXHVGRUZGXCJcbmV4cG9ydCBjb25zdCBOT05fQlJFQUtJTkdfU1BBQ0UgPSBcIlxcdTAwQTBcIlxuZXhwb3J0IGNvbnN0IE9CSkVDVF9SRVBMQUNFTUVOVF9DSEFSQUNURVIgPSBcIlxcdUZGRkNcIlxuIiwgImV4cG9ydCBjb25zdCBleHRlbmQgPSBmdW5jdGlvbihwcm9wZXJ0aWVzKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIHByb3BlcnRpZXMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHByb3BlcnRpZXNba2V5XVxuICAgIHRoaXNba2V5XSA9IHZhbHVlXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cbiIsICJpbXBvcnQgYmxvY2tBdHRyaWJ1dGVzIGZyb20gXCJ0cml4L2NvbmZpZy9ibG9ja19hdHRyaWJ1dGVzXCJcbmltcG9ydCB7IFpFUk9fV0lEVEhfU1BBQ0UgfSBmcm9tIFwidHJpeC9jb25zdGFudHNcIlxuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSBcIi4vZXh0ZW5kXCJcbmltcG9ydCB7IGF0dGFjaG1lbnRTZWxlY3RvciB9IGZyb20gXCJ0cml4L2NvbmZpZy9hdHRhY2htZW50c1wiXG5cbmNvbnN0IGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcbmNvbnN0IG1hdGNoID0gaHRtbC5tYXRjaGVzXG5cbmV4cG9ydCBjb25zdCBoYW5kbGVFdmVudCA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgeyBvbkVsZW1lbnQsIG1hdGNoaW5nU2VsZWN0b3IsIHdpdGhDYWxsYmFjaywgaW5QaGFzZSwgcHJldmVudERlZmF1bHQsIHRpbWVzIH0gPSB7fSkge1xuICBjb25zdCBlbGVtZW50ID0gb25FbGVtZW50ID8gb25FbGVtZW50IDogaHRtbFxuICBjb25zdCBzZWxlY3RvciA9IG1hdGNoaW5nU2VsZWN0b3JcbiAgY29uc3QgdXNlQ2FwdHVyZSA9IGluUGhhc2UgPT09IFwiY2FwdHVyaW5nXCJcblxuICBjb25zdCBoYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAodGltZXMgIT0gbnVsbCAmJiAtLXRpbWVzID09PSAwKSB7XG4gICAgICBoYW5kbGVyLmRlc3Ryb3koKVxuICAgIH1cbiAgICBjb25zdCB0YXJnZXQgPSBmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZShldmVudC50YXJnZXQsIHsgbWF0Y2hpbmdTZWxlY3Rvcjogc2VsZWN0b3IgfSlcbiAgICBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgIHdpdGhDYWxsYmFjaz8uY2FsbCh0YXJnZXQsIGV2ZW50LCB0YXJnZXQpXG4gICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIuZGVzdHJveSA9ICgpID0+IGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIHVzZUNhcHR1cmUpXG5cbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgdXNlQ2FwdHVyZSlcbiAgcmV0dXJuIGhhbmRsZXJcbn1cblxuZXhwb3J0IGNvbnN0IGhhbmRsZUV2ZW50T25jZSA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gIG9wdGlvbnMudGltZXMgPSAxXG4gIHJldHVybiBoYW5kbGVFdmVudChldmVudE5hbWUsIG9wdGlvbnMpXG59XG5cbmV4cG9ydCBjb25zdCB0cmlnZ2VyRXZlbnQgPSBmdW5jdGlvbihldmVudE5hbWUsIHsgb25FbGVtZW50LCBidWJibGVzLCBjYW5jZWxhYmxlLCBhdHRyaWJ1dGVzIH0gPSB7fSkge1xuICBjb25zdCBlbGVtZW50ID0gb25FbGVtZW50ICE9IG51bGwgPyBvbkVsZW1lbnQgOiBodG1sXG4gIGJ1YmJsZXMgPSBidWJibGVzICE9PSBmYWxzZVxuICBjYW5jZWxhYmxlID0gY2FuY2VsYWJsZSAhPT0gZmFsc2VcblxuICBjb25zdCBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRzXCIpXG4gIGV2ZW50LmluaXRFdmVudChldmVudE5hbWUsIGJ1YmJsZXMsIGNhbmNlbGFibGUpXG4gIGlmIChhdHRyaWJ1dGVzICE9IG51bGwpIHtcbiAgICBleHRlbmQuY2FsbChldmVudCwgYXR0cmlidXRlcylcbiAgfVxuICByZXR1cm4gZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KVxufVxuXG5leHBvcnQgY29uc3QgZWxlbWVudE1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIGlmIChlbGVtZW50Py5ub2RlVHlwZSA9PT0gMSkge1xuICAgIHJldHVybiBtYXRjaC5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIHsgbWF0Y2hpbmdTZWxlY3RvciwgdW50aWxOb2RlIH0gPSB7fSkge1xuICB3aGlsZSAobm9kZSAmJiBub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGVcbiAgfVxuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAobWF0Y2hpbmdTZWxlY3RvciAhPSBudWxsKSB7XG4gICAgaWYgKG5vZGUuY2xvc2VzdCAmJiB1bnRpbE5vZGUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vZGUuY2xvc2VzdChtYXRjaGluZ1NlbGVjdG9yKVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAobm9kZSAmJiBub2RlICE9PSB1bnRpbE5vZGUpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRNYXRjaGVzU2VsZWN0b3Iobm9kZSwgbWF0Y2hpbmdTZWxlY3RvcikpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZVxuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZmluZElubmVyRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgd2hpbGUgKGVsZW1lbnQ/LmZpcnN0RWxlbWVudENoaWxkKSB7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGRcbiAgfVxuICByZXR1cm4gZWxlbWVudFxufVxuXG5leHBvcnQgY29uc3QgaW5uZXJFbGVtZW50SXNBY3RpdmUgPSAoZWxlbWVudCkgPT5cbiAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxlbWVudCAmJiBlbGVtZW50Q29udGFpbnNOb2RlKGVsZW1lbnQsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpXG5cbmV4cG9ydCBjb25zdCBlbGVtZW50Q29udGFpbnNOb2RlID0gZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkge1xuICBpZiAoIWVsZW1lbnQgfHwgIW5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlID09PSBlbGVtZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGZpbmROb2RlRnJvbUNvbnRhaW5lckFuZE9mZnNldCA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgb2Zmc2V0KSB7XG4gIGlmICghY29udGFpbmVyKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICByZXR1cm4gY29udGFpbmVyXG4gIH0gZWxzZSBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5maXJzdENoaWxkICE9IG51bGwgPyBjb250YWluZXIuZmlyc3RDaGlsZCA6IGNvbnRhaW5lclxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250YWluZXIuY2hpbGROb2Rlcy5pdGVtKG9mZnNldCAtIDEpXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGZpbmRFbGVtZW50RnJvbUNvbnRhaW5lckFuZE9mZnNldCA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgb2Zmc2V0KSB7XG4gIGNvbnN0IG5vZGUgPSBmaW5kTm9kZUZyb21Db250YWluZXJBbmRPZmZzZXQoY29udGFpbmVyLCBvZmZzZXQpXG4gIHJldHVybiBmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZShub2RlKVxufVxuXG5leHBvcnQgY29uc3QgZmluZENoaWxkSW5kZXhPZk5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmICghbm9kZT8ucGFyZW50Tm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIGxldCBjaGlsZEluZGV4ID0gMFxuICBub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmdcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBjaGlsZEluZGV4KytcbiAgICBub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmdcbiAgfVxuICByZXR1cm4gY2hpbGRJbmRleFxufVxuXG5leHBvcnQgY29uc3QgcmVtb3ZlTm9kZSA9IChub2RlKSA9PiBub2RlPy5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChub2RlKVxuXG5leHBvcnQgY29uc3Qgd2Fsa1RyZWUgPSBmdW5jdGlvbih0cmVlLCB7IG9ubHlOb2Rlc09mVHlwZSwgdXNpbmdGaWx0ZXIsIGV4cGFuZEVudGl0eVJlZmVyZW5jZXMgfSA9IHt9KSB7XG4gIGNvbnN0IHdoYXRUb1Nob3cgPSAoKCkgPT4ge1xuICAgIHN3aXRjaCAob25seU5vZGVzT2ZUeXBlKSB7XG4gICAgICBjYXNlIFwiZWxlbWVudFwiOlxuICAgICAgICByZXR1cm4gTm9kZUZpbHRlci5TSE9XX0VMRU1FTlRcbiAgICAgIGNhc2UgXCJ0ZXh0XCI6XG4gICAgICAgIHJldHVybiBOb2RlRmlsdGVyLlNIT1dfVEVYVFxuICAgICAgY2FzZSBcImNvbW1lbnRcIjpcbiAgICAgICAgcmV0dXJuIE5vZGVGaWx0ZXIuU0hPV19DT01NRU5UXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gTm9kZUZpbHRlci5TSE9XX0FMTFxuICAgIH1cbiAgfSkoKVxuXG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKFxuICAgIHRyZWUsXG4gICAgd2hhdFRvU2hvdyxcbiAgICB1c2luZ0ZpbHRlciAhPSBudWxsID8gdXNpbmdGaWx0ZXIgOiBudWxsLFxuICAgIGV4cGFuZEVudGl0eVJlZmVyZW5jZXMgPT09IHRydWVcbiAgKVxufVxuXG5leHBvcnQgY29uc3QgdGFnTmFtZSA9IChlbGVtZW50KSA9PiBlbGVtZW50Py50YWdOYW1lPy50b0xvd2VyQ2FzZSgpXG5cbmV4cG9ydCBjb25zdCBtYWtlRWxlbWVudCA9IGZ1bmN0aW9uKHRhZywgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBrZXksIHZhbHVlXG4gIGlmICh0eXBlb2YgdGFnID09PSBcIm9iamVjdFwiKSB7XG4gICAgb3B0aW9ucyA9IHRhZ1xuICAgIHRhZyA9IG9wdGlvbnMudGFnTmFtZVxuICB9IGVsc2Uge1xuICAgIG9wdGlvbnMgPSB7IGF0dHJpYnV0ZXM6IG9wdGlvbnMgfVxuICB9XG5cbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKVxuXG4gIGlmIChvcHRpb25zLmVkaXRhYmxlICE9IG51bGwpIHtcbiAgICBpZiAob3B0aW9ucy5hdHRyaWJ1dGVzID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMuYXR0cmlidXRlcyA9IHt9XG4gICAgfVxuICAgIG9wdGlvbnMuYXR0cmlidXRlcy5jb250ZW50ZWRpdGFibGUgPSBvcHRpb25zLmVkaXRhYmxlXG4gIH1cblxuICBpZiAob3B0aW9ucy5hdHRyaWJ1dGVzKSB7XG4gICAgZm9yIChrZXkgaW4gb3B0aW9ucy5hdHRyaWJ1dGVzKSB7XG4gICAgICB2YWx1ZSA9IG9wdGlvbnMuYXR0cmlidXRlc1trZXldXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRpb25zLnN0eWxlKSB7XG4gICAgZm9yIChrZXkgaW4gb3B0aW9ucy5zdHlsZSkge1xuICAgICAgdmFsdWUgPSBvcHRpb25zLnN0eWxlW2tleV1cbiAgICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHZhbHVlXG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgIGZvciAoa2V5IGluIG9wdGlvbnMuZGF0YSkge1xuICAgICAgdmFsdWUgPSBvcHRpb25zLmRhdGFba2V5XVxuICAgICAgZWxlbWVudC5kYXRhc2V0W2tleV0gPSB2YWx1ZVxuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRpb25zLmNsYXNzTmFtZSkge1xuICAgIG9wdGlvbnMuY2xhc3NOYW1lLnNwbGl0KFwiIFwiKS5mb3JFYWNoKChjbGFzc05hbWUpID0+IHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpXG4gICAgfSlcbiAgfVxuXG4gIGlmIChvcHRpb25zLnRleHRDb250ZW50KSB7XG4gICAgZWxlbWVudC50ZXh0Q29udGVudCA9IG9wdGlvbnMudGV4dENvbnRlbnRcbiAgfVxuXG4gIGlmIChvcHRpb25zLmNoaWxkTm9kZXMpIHtcbiAgICBbXS5jb25jYXQob3B0aW9ucy5jaGlsZE5vZGVzKS5mb3JFYWNoKChjaGlsZE5vZGUpID0+IHtcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gZWxlbWVudFxufVxuXG5sZXQgYmxvY2tUYWdOYW1lcyA9IHVuZGVmaW5lZFxuXG5leHBvcnQgY29uc3QgZ2V0QmxvY2tUYWdOYW1lcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoYmxvY2tUYWdOYW1lcyAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGJsb2NrVGFnTmFtZXNcbiAgfVxuXG4gIGJsb2NrVGFnTmFtZXMgPSBbXVxuICBmb3IgKGNvbnN0IGtleSBpbiBibG9ja0F0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gYmxvY2tBdHRyaWJ1dGVzW2tleV1cbiAgICBpZiAoYXR0cmlidXRlcy50YWdOYW1lKSB7XG4gICAgICBibG9ja1RhZ05hbWVzLnB1c2goYXR0cmlidXRlcy50YWdOYW1lKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBibG9ja1RhZ05hbWVzXG59XG5cbmV4cG9ydCBjb25zdCBub2RlSXNCbG9ja0NvbnRhaW5lciA9IChub2RlKSA9PiBub2RlSXNCbG9ja1N0YXJ0Q29tbWVudChub2RlPy5maXJzdENoaWxkKVxuXG5leHBvcnQgY29uc3Qgbm9kZVByb2JhYmx5SXNCbG9ja0NvbnRhaW5lciA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIGdldEJsb2NrVGFnTmFtZXMoKS5pbmNsdWRlcyh0YWdOYW1lKG5vZGUpKSAmJiAhZ2V0QmxvY2tUYWdOYW1lcygpLmluY2x1ZGVzKHRhZ05hbWUobm9kZS5maXJzdENoaWxkKSlcbn1cblxuZXhwb3J0IGNvbnN0IG5vZGVJc0Jsb2NrU3RhcnQgPSBmdW5jdGlvbihub2RlLCB7IHN0cmljdCB9ID0geyBzdHJpY3Q6IHRydWUgfSkge1xuICBpZiAoc3RyaWN0KSB7XG4gICAgcmV0dXJuIG5vZGVJc0Jsb2NrU3RhcnRDb21tZW50KG5vZGUpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG5vZGVJc0Jsb2NrU3RhcnRDb21tZW50KG5vZGUpIHx8ICFub2RlSXNCbG9ja1N0YXJ0Q29tbWVudChub2RlLmZpcnN0Q2hpbGQpICYmIG5vZGVQcm9iYWJseUlzQmxvY2tDb250YWluZXIobm9kZSlcbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IG5vZGVJc0Jsb2NrU3RhcnRDb21tZW50ID0gKG5vZGUpID0+IG5vZGVJc0NvbW1lbnROb2RlKG5vZGUpICYmIG5vZGU/LmRhdGEgPT09IFwiYmxvY2tcIlxuXG5leHBvcnQgY29uc3Qgbm9kZUlzQ29tbWVudE5vZGUgPSAobm9kZSkgPT4gbm9kZT8ubm9kZVR5cGUgPT09IE5vZGUuQ09NTUVOVF9OT0RFXG5cbmV4cG9ydCBjb25zdCBub2RlSXNDdXJzb3JUYXJnZXQgPSBmdW5jdGlvbihub2RlLCB7IG5hbWUgfSA9IHt9KSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChub2RlSXNUZXh0Tm9kZShub2RlKSkge1xuICAgIGlmIChub2RlLmRhdGEgPT09IFpFUk9fV0lEVEhfU1BBQ0UpIHtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBub2RlLnBhcmVudE5vZGUuZGF0YXNldC50cml4Q3Vyc29yVGFyZ2V0ID09PSBuYW1lXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZUlzQ3Vyc29yVGFyZ2V0KG5vZGUuZmlyc3RDaGlsZClcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgbm9kZUlzQXR0YWNobWVudEVsZW1lbnQgPSAobm9kZSkgPT4gZWxlbWVudE1hdGNoZXNTZWxlY3Rvcihub2RlLCBhdHRhY2htZW50U2VsZWN0b3IpXG5cbmV4cG9ydCBjb25zdCBub2RlSXNFbXB0eVRleHROb2RlID0gKG5vZGUpID0+IG5vZGVJc1RleHROb2RlKG5vZGUpICYmIG5vZGU/LmRhdGEgPT09IFwiXCJcblxuZXhwb3J0IGNvbnN0IG5vZGVJc1RleHROb2RlID0gKG5vZGUpID0+IG5vZGU/Lm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERVxuIiwgImltcG9ydCBicm93c2VyIGZyb20gXCJ0cml4L2NvbmZpZy9icm93c2VyXCJcbmltcG9ydCB7IG1ha2VFbGVtZW50LCByZW1vdmVOb2RlIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzL2RvbVwiXG5cbmNvbnN0IGlucHV0ID0ge1xuICBsZXZlbDJFbmFibGVkOiB0cnVlLFxuXG4gIGdldExldmVsKCkge1xuICAgIGlmICh0aGlzLmxldmVsMkVuYWJsZWQgJiYgYnJvd3Nlci5zdXBwb3J0c0lucHV0RXZlbnRzKSB7XG4gICAgICByZXR1cm4gMlxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cbiAgfSxcbiAgcGlja0ZpbGVzKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgaW5wdXQgPSBtYWtlRWxlbWVudChcImlucHV0XCIsIHsgdHlwZTogXCJmaWxlXCIsIG11bHRpcGxlOiB0cnVlLCBoaWRkZW46IHRydWUsIGlkOiB0aGlzLmZpbGVJbnB1dElkIH0pXG5cbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsICgpID0+IHtcbiAgICAgIGNhbGxiYWNrKGlucHV0LmZpbGVzKVxuICAgICAgcmVtb3ZlTm9kZShpbnB1dClcbiAgICB9KVxuXG4gICAgcmVtb3ZlTm9kZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmZpbGVJbnB1dElkKSlcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlucHV0KVxuICAgIGlucHV0LmNsaWNrKClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbnB1dFxuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgODogXCJiYWNrc3BhY2VcIixcbiAgOTogXCJ0YWJcIixcbiAgMTM6IFwicmV0dXJuXCIsXG4gIDI3OiBcImVzY2FwZVwiLFxuICAzNzogXCJsZWZ0XCIsXG4gIDM5OiBcInJpZ2h0XCIsXG4gIDQ2OiBcImRlbGV0ZVwiLFxuICA2ODogXCJkXCIsXG4gIDcyOiBcImhcIixcbiAgNzk6IFwib1wiLFxufVxuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgcmVtb3ZlQmxhbmtUYWJsZUNlbGxzOiBmYWxzZSxcbiAgdGFibGVDZWxsU2VwYXJhdG9yOiBcIiB8IFwiLFxuICB0YWJsZVJvd1NlcGFyYXRvcjogXCJcXG5cIixcbn1cbiIsICJpbXBvcnQgeyBhdHRhY2htZW50U2VsZWN0b3IgfSBmcm9tIFwidHJpeC9jb25maWcvYXR0YWNobWVudHNcIlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGJvbGQ6IHtcbiAgICB0YWdOYW1lOiBcInN0cm9uZ1wiLFxuICAgIGluaGVyaXRhYmxlOiB0cnVlLFxuICAgIHBhcnNlcihlbGVtZW50KSB7XG4gICAgICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpXG4gICAgICByZXR1cm4gc3R5bGUuZm9udFdlaWdodCA9PT0gXCJib2xkXCIgfHwgc3R5bGUuZm9udFdlaWdodCA+PSA2MDBcbiAgICB9LFxuICB9LFxuICBpdGFsaWM6IHtcbiAgICB0YWdOYW1lOiBcImVtXCIsXG4gICAgaW5oZXJpdGFibGU6IHRydWUsXG4gICAgcGFyc2VyKGVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudClcbiAgICAgIHJldHVybiBzdHlsZS5mb250U3R5bGUgPT09IFwiaXRhbGljXCJcbiAgICB9LFxuICB9LFxuICBocmVmOiB7XG4gICAgZ3JvdXBUYWdOYW1lOiBcImFcIixcbiAgICBwYXJzZXIoZWxlbWVudCkge1xuICAgICAgY29uc3QgbWF0Y2hpbmdTZWxlY3RvciA9IGBhOm5vdCgke2F0dGFjaG1lbnRTZWxlY3Rvcn0pYFxuICAgICAgY29uc3QgbGluayA9IGVsZW1lbnQuY2xvc2VzdChtYXRjaGluZ1NlbGVjdG9yKVxuICAgICAgaWYgKGxpbmspIHtcbiAgICAgICAgcmV0dXJuIGxpbmsuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKVxuICAgICAgfVxuICAgIH0sXG4gIH0sXG4gIHN0cmlrZToge1xuICAgIHRhZ05hbWU6IFwiZGVsXCIsXG4gICAgaW5oZXJpdGFibGU6IHRydWUsXG4gIH0sXG4gIGZyb3plbjoge1xuICAgIHN0eWxlOiB7IGJhY2tncm91bmRDb2xvcjogXCJoaWdobGlnaHRcIiB9LFxuICB9LFxufVxuIiwgImltcG9ydCBsYW5nIGZyb20gXCJ0cml4L2NvbmZpZy9sYW5nXCJcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXREZWZhdWx0SFRNTCgpIHtcbiAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJ0cml4LWJ1dHRvbi1yb3dcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwidHJpeC1idXR0b24tZ3JvdXAgdHJpeC1idXR0b24tZ3JvdXAtLXRleHQtdG9vbHNcIiBkYXRhLXRyaXgtYnV0dG9uLWdyb3VwPVwidGV4dC10b29sc1wiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLWJvbGRcIiBkYXRhLXRyaXgtYXR0cmlidXRlPVwiYm9sZFwiIGRhdGEtdHJpeC1rZXk9XCJiXCIgdGl0bGU9XCIke2xhbmcuYm9sZH1cIiB0YWJpbmRleD1cIi0xXCI+JHtsYW5nLmJvbGR9PC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwidHJpeC1idXR0b24gdHJpeC1idXR0b24tLWljb24gdHJpeC1idXR0b24tLWljb24taXRhbGljXCIgZGF0YS10cml4LWF0dHJpYnV0ZT1cIml0YWxpY1wiIGRhdGEtdHJpeC1rZXk9XCJpXCIgdGl0bGU9XCIke2xhbmcuaXRhbGljfVwiIHRhYmluZGV4PVwiLTFcIj4ke2xhbmcuaXRhbGljfTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLXN0cmlrZVwiIGRhdGEtdHJpeC1hdHRyaWJ1dGU9XCJzdHJpa2VcIiB0aXRsZT1cIiR7bGFuZy5zdHJpa2V9XCIgdGFiaW5kZXg9XCItMVwiPiR7bGFuZy5zdHJpa2V9PC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwidHJpeC1idXR0b24gdHJpeC1idXR0b24tLWljb24gdHJpeC1idXR0b24tLWljb24tbGlua1wiIGRhdGEtdHJpeC1hdHRyaWJ1dGU9XCJocmVmXCIgZGF0YS10cml4LWFjdGlvbj1cImxpbmtcIiBkYXRhLXRyaXgta2V5PVwia1wiIHRpdGxlPVwiJHtsYW5nLmxpbmt9XCIgdGFiaW5kZXg9XCItMVwiPiR7bGFuZy5saW5rfTwvYnV0dG9uPlxuICAgICAgPC9zcGFuPlxuXG4gICAgICA8c3BhbiBjbGFzcz1cInRyaXgtYnV0dG9uLWdyb3VwIHRyaXgtYnV0dG9uLWdyb3VwLS1ibG9jay10b29sc1wiIGRhdGEtdHJpeC1idXR0b24tZ3JvdXA9XCJibG9jay10b29sc1wiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLWhlYWRpbmctMVwiIGRhdGEtdHJpeC1hdHRyaWJ1dGU9XCJoZWFkaW5nMVwiIHRpdGxlPVwiJHtsYW5nLmhlYWRpbmcxfVwiIHRhYmluZGV4PVwiLTFcIj4ke2xhbmcuaGVhZGluZzF9PC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwidHJpeC1idXR0b24gdHJpeC1idXR0b24tLWljb24gdHJpeC1idXR0b24tLWljb24tcXVvdGVcIiBkYXRhLXRyaXgtYXR0cmlidXRlPVwicXVvdGVcIiB0aXRsZT1cIiR7bGFuZy5xdW90ZX1cIiB0YWJpbmRleD1cIi0xXCI+JHtsYW5nLnF1b3RlfTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLWNvZGVcIiBkYXRhLXRyaXgtYXR0cmlidXRlPVwiY29kZVwiIHRpdGxlPVwiJHtsYW5nLmNvZGV9XCIgdGFiaW5kZXg9XCItMVwiPiR7bGFuZy5jb2RlfTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLWJ1bGxldC1saXN0XCIgZGF0YS10cml4LWF0dHJpYnV0ZT1cImJ1bGxldFwiIHRpdGxlPVwiJHtsYW5nLmJ1bGxldHN9XCIgdGFiaW5kZXg9XCItMVwiPiR7bGFuZy5idWxsZXRzfTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLW51bWJlci1saXN0XCIgZGF0YS10cml4LWF0dHJpYnV0ZT1cIm51bWJlclwiIHRpdGxlPVwiJHtsYW5nLm51bWJlcnN9XCIgdGFiaW5kZXg9XCItMVwiPiR7bGFuZy5udW1iZXJzfTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1pY29uIHRyaXgtYnV0dG9uLS1pY29uLWRlY3JlYXNlLW5lc3RpbmctbGV2ZWxcIiBkYXRhLXRyaXgtYWN0aW9uPVwiZGVjcmVhc2VOZXN0aW5nTGV2ZWxcIiB0aXRsZT1cIiR7bGFuZy5vdXRkZW50fVwiIHRhYmluZGV4PVwiLTFcIj4ke2xhbmcub3V0ZGVudH08L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ0cml4LWJ1dHRvbiB0cml4LWJ1dHRvbi0taWNvbiB0cml4LWJ1dHRvbi0taWNvbi1pbmNyZWFzZS1uZXN0aW5nLWxldmVsXCIgZGF0YS10cml4LWFjdGlvbj1cImluY3JlYXNlTmVzdGluZ0xldmVsXCIgdGl0bGU9XCIke2xhbmcuaW5kZW50fVwiIHRhYmluZGV4PVwiLTFcIj4ke2xhbmcuaW5kZW50fTwvYnV0dG9uPlxuICAgICAgPC9zcGFuPlxuXG4gICAgICA8c3BhbiBjbGFzcz1cInRyaXgtYnV0dG9uLWdyb3VwIHRyaXgtYnV0dG9uLWdyb3VwLS1maWxlLXRvb2xzXCIgZGF0YS10cml4LWJ1dHRvbi1ncm91cD1cImZpbGUtdG9vbHNcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ0cml4LWJ1dHRvbiB0cml4LWJ1dHRvbi0taWNvbiB0cml4LWJ1dHRvbi0taWNvbi1hdHRhY2hcIiBkYXRhLXRyaXgtYWN0aW9uPVwiYXR0YWNoRmlsZXNcIiB0aXRsZT1cIiR7bGFuZy5hdHRhY2hGaWxlc31cIiB0YWJpbmRleD1cIi0xXCI+JHtsYW5nLmF0dGFjaEZpbGVzfTwvYnV0dG9uPlxuICAgICAgPC9zcGFuPlxuXG4gICAgICA8c3BhbiBjbGFzcz1cInRyaXgtYnV0dG9uLWdyb3VwLXNwYWNlclwiPjwvc3Bhbj5cblxuICAgICAgPHNwYW4gY2xhc3M9XCJ0cml4LWJ1dHRvbi1ncm91cCB0cml4LWJ1dHRvbi1ncm91cC0taGlzdG9yeS10b29sc1wiIGRhdGEtdHJpeC1idXR0b24tZ3JvdXA9XCJoaXN0b3J5LXRvb2xzXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwidHJpeC1idXR0b24gdHJpeC1idXR0b24tLWljb24gdHJpeC1idXR0b24tLWljb24tdW5kb1wiIGRhdGEtdHJpeC1hY3Rpb249XCJ1bmRvXCIgZGF0YS10cml4LWtleT1cInpcIiB0aXRsZT1cIiR7bGFuZy51bmRvfVwiIHRhYmluZGV4PVwiLTFcIj4ke2xhbmcudW5kb308L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ0cml4LWJ1dHRvbiB0cml4LWJ1dHRvbi0taWNvbiB0cml4LWJ1dHRvbi0taWNvbi1yZWRvXCIgZGF0YS10cml4LWFjdGlvbj1cInJlZG9cIiBkYXRhLXRyaXgta2V5PVwic2hpZnQrelwiIHRpdGxlPVwiJHtsYW5nLnJlZG99XCIgdGFiaW5kZXg9XCItMVwiPiR7bGFuZy5yZWRvfTwvYnV0dG9uPlxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cInRyaXgtZGlhbG9nc1wiIGRhdGEtdHJpeC1kaWFsb2dzPlxuICAgICAgPGRpdiBjbGFzcz1cInRyaXgtZGlhbG9nIHRyaXgtZGlhbG9nLS1saW5rXCIgZGF0YS10cml4LWRpYWxvZz1cImhyZWZcIiBkYXRhLXRyaXgtZGlhbG9nLWF0dHJpYnV0ZT1cImhyZWZcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRyaXgtZGlhbG9nX19saW5rLWZpZWxkc1wiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidXJsXCIgbmFtZT1cImhyZWZcIiBjbGFzcz1cInRyaXgtaW5wdXQgdHJpeC1pbnB1dC0tZGlhbG9nXCIgcGxhY2Vob2xkZXI9XCIke2xhbmcudXJsUGxhY2Vob2xkZXJ9XCIgYXJpYS1sYWJlbD1cIiR7bGFuZy51cmx9XCIgZGF0YS10cml4LXZhbGlkYXRlLWhyZWYgcmVxdWlyZWQgZGF0YS10cml4LWlucHV0PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0cml4LWJ1dHRvbi1ncm91cFwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1kaWFsb2dcIiB2YWx1ZT1cIiR7bGFuZy5saW5rfVwiIGRhdGEtdHJpeC1tZXRob2Q9XCJzZXRBdHRyaWJ1dGVcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ0cml4LWJ1dHRvbiB0cml4LWJ1dHRvbi0tZGlhbG9nXCIgdmFsdWU9XCIke2xhbmcudW5saW5rfVwiIGRhdGEtdHJpeC1tZXRob2Q9XCJyZW1vdmVBdHRyaWJ1dGVcIj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gXG4gIH0sXG59XG4iLCAiY29uc3QgdW5kbyA9IHsgaW50ZXJ2YWw6IDUwMDAgfVxuZXhwb3J0IGRlZmF1bHQgdW5kb1xuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgYXR0YWNobWVudDogXCJhdHRhY2htZW50XCIsXG4gIGF0dGFjaG1lbnRDYXB0aW9uOiBcImF0dGFjaG1lbnRfX2NhcHRpb25cIixcbiAgYXR0YWNobWVudENhcHRpb25FZGl0b3I6IFwiYXR0YWNobWVudF9fY2FwdGlvbi1lZGl0b3JcIixcbiAgYXR0YWNobWVudE1ldGFkYXRhOiBcImF0dGFjaG1lbnRfX21ldGFkYXRhXCIsXG4gIGF0dGFjaG1lbnRNZXRhZGF0YUNvbnRhaW5lcjogXCJhdHRhY2htZW50X19tZXRhZGF0YS1jb250YWluZXJcIixcbiAgYXR0YWNobWVudE5hbWU6IFwiYXR0YWNobWVudF9fbmFtZVwiLFxuICBhdHRhY2htZW50UHJvZ3Jlc3M6IFwiYXR0YWNobWVudF9fcHJvZ3Jlc3NcIixcbiAgYXR0YWNobWVudFNpemU6IFwiYXR0YWNobWVudF9fc2l6ZVwiLFxuICBhdHRhY2htZW50VG9vbGJhcjogXCJhdHRhY2htZW50X190b29sYmFyXCIsXG4gIGF0dGFjaG1lbnRHYWxsZXJ5OiBcImF0dGFjaG1lbnQtZ2FsbGVyeVwiLFxufVxuIiwgImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2ljT2JqZWN0IHtcbiAgc3RhdGljIHByb3h5TWV0aG9kKGV4cHJlc3Npb24pIHtcbiAgICBjb25zdCB7IG5hbWUsIHRvTWV0aG9kLCB0b1Byb3BlcnR5LCBvcHRpb25hbCB9ID0gcGFyc2VQcm94eU1ldGhvZEV4cHJlc3Npb24oZXhwcmVzc2lvbilcblxuICAgIHRoaXMucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgc3ViamVjdFxuICAgICAgbGV0IG9iamVjdFxuXG4gICAgICBpZiAodG9NZXRob2QpIHtcbiAgICAgICAgaWYgKG9wdGlvbmFsKSB7XG4gICAgICAgICAgb2JqZWN0ID0gdGhpc1t0b01ldGhvZF0/LigpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqZWN0ID0gdGhpc1t0b01ldGhvZF0oKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRvUHJvcGVydHkpIHtcbiAgICAgICAgb2JqZWN0ID0gdGhpc1t0b1Byb3BlcnR5XVxuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9uYWwpIHtcbiAgICAgICAgc3ViamVjdCA9IG9iamVjdD8uW25hbWVdXG4gICAgICAgIGlmIChzdWJqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIGFwcGx5LmNhbGwoc3ViamVjdCwgb2JqZWN0LCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1YmplY3QgPSBvYmplY3RbbmFtZV1cbiAgICAgICAgcmV0dXJuIGFwcGx5LmNhbGwoc3ViamVjdCwgb2JqZWN0LCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHBhcnNlUHJveHlNZXRob2RFeHByZXNzaW9uID0gZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICBjb25zdCBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2gocHJveHlNZXRob2RFeHByZXNzaW9uUGF0dGVybilcbiAgaWYgKCFtYXRjaCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgY2FuJ3QgcGFyc2UgQHByb3h5TWV0aG9kIGV4cHJlc3Npb246ICR7ZXhwcmVzc2lvbn1gKVxuICB9XG5cbiAgY29uc3QgYXJncyA9IHsgbmFtZTogbWF0Y2hbNF0gfVxuXG4gIGlmIChtYXRjaFsyXSAhPSBudWxsKSB7XG4gICAgYXJncy50b01ldGhvZCA9IG1hdGNoWzFdXG4gIH0gZWxzZSB7XG4gICAgYXJncy50b1Byb3BlcnR5ID0gbWF0Y2hbMV1cbiAgfVxuXG4gIGlmIChtYXRjaFszXSAhPSBudWxsKSB7XG4gICAgYXJncy5vcHRpb25hbCA9IHRydWVcbiAgfVxuXG4gIHJldHVybiBhcmdzXG59XG5cbmNvbnN0IHsgYXBwbHkgfSA9IEZ1bmN0aW9uLnByb3RvdHlwZVxuXG5jb25zdCBwcm94eU1ldGhvZEV4cHJlc3Npb25QYXR0ZXJuID0gbmV3IFJlZ0V4cChcIlxcXG5eXFxcbiguKz8pXFxcbihcXFxcKFxcXFwpKT9cXFxuKFxcXFw/KT9cXFxuXFxcXC5cXFxuKC4rPylcXFxuJFxcXG5cIilcbiIsICJpbXBvcnQgQmFzaWNPYmplY3QgZnJvbSBcInRyaXgvY29yZS9iYXNpY19vYmplY3RcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVVEYxNlN0cmluZyBleHRlbmRzIEJhc2ljT2JqZWN0IHtcbiAgc3RhdGljIGJveCh2YWx1ZSA9IFwiXCIpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiB0aGlzKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZnJvbVVDUzJTdHJpbmcodmFsdWU/LnRvU3RyaW5nKCkpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGZyb21VQ1MyU3RyaW5nKHVjczJTdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IHRoaXModWNzMlN0cmluZywgdWNzMmRlY29kZSh1Y3MyU3RyaW5nKSlcbiAgfVxuXG4gIHN0YXRpYyBmcm9tQ29kZXBvaW50cyhjb2RlcG9pbnRzKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKHVjczJlbmNvZGUoY29kZXBvaW50cyksIGNvZGVwb2ludHMpXG4gIH1cblxuICBjb25zdHJ1Y3Rvcih1Y3MyU3RyaW5nLCBjb2RlcG9pbnRzKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMudWNzMlN0cmluZyA9IHVjczJTdHJpbmdcbiAgICB0aGlzLmNvZGVwb2ludHMgPSBjb2RlcG9pbnRzXG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLmNvZGVwb2ludHMubGVuZ3RoXG4gICAgdGhpcy51Y3MyTGVuZ3RoID0gdGhpcy51Y3MyU3RyaW5nLmxlbmd0aFxuICB9XG5cbiAgb2Zmc2V0VG9VQ1MyT2Zmc2V0KG9mZnNldCkge1xuICAgIHJldHVybiB1Y3MyZW5jb2RlKHRoaXMuY29kZXBvaW50cy5zbGljZSgwLCBNYXRoLm1heCgwLCBvZmZzZXQpKSkubGVuZ3RoXG4gIH1cblxuICBvZmZzZXRGcm9tVUNTMk9mZnNldCh1Y3MyT2Zmc2V0KSB7XG4gICAgcmV0dXJuIHVjczJkZWNvZGUodGhpcy51Y3MyU3RyaW5nLnNsaWNlKDAsIE1hdGgubWF4KDAsIHVjczJPZmZzZXQpKSkubGVuZ3RoXG4gIH1cblxuICBzbGljZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5mcm9tQ29kZXBvaW50cyh0aGlzLmNvZGVwb2ludHMuc2xpY2UoLi4uYXJndW1lbnRzKSlcbiAgfVxuXG4gIGNoYXJBdChvZmZzZXQpIHtcbiAgICByZXR1cm4gdGhpcy5zbGljZShvZmZzZXQsIG9mZnNldCArIDEpXG4gIH1cblxuICBpc0VxdWFsVG8odmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5ib3godmFsdWUpLnVjczJTdHJpbmcgPT09IHRoaXMudWNzMlN0cmluZ1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnVjczJTdHJpbmdcbiAgfVxuXG4gIGdldENhY2hlS2V5KCkge1xuICAgIHJldHVybiB0aGlzLnVjczJTdHJpbmdcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnVjczJTdHJpbmdcbiAgfVxufVxuXG5jb25zdCBoYXNBcnJheUZyb20gPSBBcnJheS5mcm9tPy4oXCJcXHVkODNkXFx1ZGM3Y1wiKS5sZW5ndGggPT09IDFcbmNvbnN0IGhhc1N0cmluZ0NvZGVQb2ludEF0ID0gXCIgXCIuY29kZVBvaW50QXQ/LigwKSAhPSBudWxsXG5jb25zdCBoYXNTdHJpbmdGcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ/LigzMiwgMTI4MTI0KSA9PT0gXCIgXFx1ZDgzZFxcdWRjN2NcIlxuXG4vLyBVQ1MtMiBjb252ZXJzaW9uIGhlbHBlcnMgcG9ydGVkIGZyb20gTWF0aGlhcyBCeW5lbnMnIFB1bnljb2RlLmpzOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL3B1bnljb2RlLmpzI3B1bnljb2RldWNzMlxuXG5sZXQgdWNzMmRlY29kZSwgdWNzMmVuY29kZVxuXG4vLyBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG4vLyBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG4vLyB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuLy8gVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG4vLyBtYXRjaGluZyBVVEYtMTYuXG5pZiAoaGFzQXJyYXlGcm9tICYmIGhhc1N0cmluZ0NvZGVQb2ludEF0KSB7XG4gIHVjczJkZWNvZGUgPSAoc3RyaW5nKSA9PiBBcnJheS5mcm9tKHN0cmluZykubWFwKChjaGFyKSA9PiBjaGFyLmNvZGVQb2ludEF0KDApKVxufSBlbHNlIHtcbiAgdWNzMmRlY29kZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIGNvbnN0IG91dHB1dCA9IFtdXG4gICAgbGV0IGNvdW50ZXIgPSAwXG4gICAgY29uc3QgeyBsZW5ndGggfSA9IHN0cmluZ1xuXG4gICAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgIGxldCB2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKylcbiAgICAgIGlmICgweGQ4MDAgPD0gdmFsdWUgJiYgdmFsdWUgPD0gMHhkYmZmICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgICAgLy8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG4gICAgICAgIGNvbnN0IGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKVxuICAgICAgICBpZiAoKGV4dHJhICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG4gICAgICAgICAgLy8gbG93IHN1cnJvZ2F0ZVxuICAgICAgICAgIHZhbHVlID0gKCh2YWx1ZSAmIDB4M2ZmKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNmZikgKyAweDEwMDAwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlXG4gICAgICAgICAgLy8gbmV4dCBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcbiAgICAgICAgICBjb3VudGVyLS1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0cHV0LnB1c2godmFsdWUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dFxuICB9XG59XG5cbi8vIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cbmlmIChoYXNTdHJpbmdGcm9tQ29kZVBvaW50KSB7XG4gIHVjczJlbmNvZGUgPSAoYXJyYXkpID0+IFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLkFycmF5LmZyb20oYXJyYXkgfHwgW10pKVxufSBlbHNlIHtcbiAgdWNzMmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgY29uc3QgY2hhcmFjdGVycyA9ICgoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBbXVxuXG4gICAgICBBcnJheS5mcm9tKGFycmF5KS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICBsZXQgb3V0cHV0ID0gXCJcIlxuICAgICAgICBpZiAodmFsdWUgPiAweGZmZmYpIHtcbiAgICAgICAgICB2YWx1ZSAtPSAweDEwMDAwXG4gICAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzZmYgfCAweGQ4MDApXG4gICAgICAgICAgdmFsdWUgPSAweGRjMDAgfCB2YWx1ZSAmIDB4M2ZmXG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnB1c2gob3V0cHV0ICsgU3RyaW5nLmZyb21DaGFyQ29kZSh2YWx1ZSkpXG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSkoKVxuXG4gICAgcmV0dXJuIGNoYXJhY3RlcnMuam9pbihcIlwiKVxuICB9XG59XG4iLCAiaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcbmltcG9ydCBVVEYxNlN0cmluZyBmcm9tIFwidHJpeC9jb3JlL3V0aWxpdGllcy91dGYxNl9zdHJpbmdcIlxuXG5sZXQgaWQgPSAwXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyaXhPYmplY3QgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIHN0YXRpYyBmcm9tSlNPTlN0cmluZyhqc29uU3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZnJvbUpTT04oSlNPTi5wYXJzZShqc29uU3RyaW5nKSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLmlkID0gKytpZFxuICB9XG5cbiAgaGFzU2FtZUNvbnN0cnVjdG9yQXMob2JqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IgPT09IG9iamVjdD8uY29uc3RydWN0b3JcbiAgfVxuXG4gIGlzRXF1YWxUbyhvYmplY3QpIHtcbiAgICByZXR1cm4gdGhpcyA9PT0gb2JqZWN0XG4gIH1cblxuICBpbnNwZWN0KCkge1xuICAgIGNvbnN0IHBhcnRzID0gW11cbiAgICBjb25zdCBjb250ZW50cyA9IHRoaXMuY29udGVudHNGb3JJbnNwZWN0aW9uKCkgfHwge31cblxuICAgIGZvciAoY29uc3Qga2V5IGluIGNvbnRlbnRzKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGNvbnRlbnRzW2tleV1cbiAgICAgIHBhcnRzLnB1c2goYCR7a2V5fT0ke3ZhbHVlfWApXG4gICAgfVxuXG4gICAgcmV0dXJuIGAjPCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfToke3RoaXMuaWR9JHtwYXJ0cy5sZW5ndGggPyBgICR7cGFydHMuam9pbihcIiwgXCIpfWAgOiBcIlwifT5gXG4gIH1cblxuICBjb250ZW50c0Zvckluc3BlY3Rpb24oKSB7fVxuXG4gIHRvSlNPTlN0cmluZygpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcylcbiAgfVxuXG4gIHRvVVRGMTZTdHJpbmcoKSB7XG4gICAgcmV0dXJuIFVURjE2U3RyaW5nLmJveCh0aGlzKVxuICB9XG5cbiAgZ2V0Q2FjaGVLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWQudG9TdHJpbmcoKVxuICB9XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiAgICBpZC1sZW5ndGgsXG4qL1xuZXhwb3J0IGNvbnN0IGFycmF5c0FyZUVxdWFsID0gZnVuY3Rpb24oYSA9IFtdLCBiID0gW10pIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IHZhbHVlID0gYVtpbmRleF1cbiAgICBpZiAodmFsdWUgIT09IGJbaW5kZXhdKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGNvbnN0IGFycmF5U3RhcnRzV2l0aCA9IChhID0gW10sIGIgPSBbXSkgPT4gYXJyYXlzQXJlRXF1YWwoYS5zbGljZSgwLCBiLmxlbmd0aCksIGIpXG5cbmV4cG9ydCBjb25zdCBzcGxpY2VBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGFycmF5LnNsaWNlKDApXG4gIHJlc3VsdC5zcGxpY2UoLi4uYXJncylcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgY29uc3Qgc3VtbWFyaXplQXJyYXlDaGFuZ2UgPSBmdW5jdGlvbihvbGRBcnJheSA9IFtdLCBuZXdBcnJheSA9IFtdKSB7XG4gIGNvbnN0IGFkZGVkID0gW11cbiAgY29uc3QgcmVtb3ZlZCA9IFtdXG5cbiAgY29uc3QgZXhpc3RpbmdWYWx1ZXMgPSBuZXcgU2V0KClcblxuICBvbGRBcnJheS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgIGV4aXN0aW5nVmFsdWVzLmFkZCh2YWx1ZSlcbiAgfSlcblxuICBjb25zdCBjdXJyZW50VmFsdWVzID0gbmV3IFNldCgpXG5cbiAgbmV3QXJyYXkuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICBjdXJyZW50VmFsdWVzLmFkZCh2YWx1ZSlcbiAgICBpZiAoIWV4aXN0aW5nVmFsdWVzLmhhcyh2YWx1ZSkpIHtcbiAgICAgIGFkZGVkLnB1c2godmFsdWUpXG4gICAgfVxuICB9KVxuXG4gIG9sZEFycmF5LmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgaWYgKCFjdXJyZW50VmFsdWVzLmhhcyh2YWx1ZSkpIHtcbiAgICAgIHJlbW92ZWQucHVzaCh2YWx1ZSlcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIHsgYWRkZWQsIHJlbW92ZWQgfVxufVxuIiwgImltcG9ydCB7IG1ha2VFbGVtZW50IH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzL2RvbVwiXG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL3VuaWNvZGUtMi4xLjgvYmxvYi9tYXN0ZXIvQmlkaV9DbGFzcy9SaWdodF9Ub19MZWZ0L3JlZ2V4LmpzXG5jb25zdCBSVExfUEFUVEVSTiA9XG4gIC9bXFx1MDVCRVxcdTA1QzBcXHUwNUMzXFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUY0XFx1MDYxQlxcdTA2MUZcXHUwNjIxLVxcdTA2M0FcXHUwNjQwLVxcdTA2NEFcXHUwNjZEXFx1MDY3MS1cXHUwNkI3XFx1MDZCQS1cXHUwNkJFXFx1MDZDMC1cXHUwNkNFXFx1MDZEMC1cXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUyMDBGXFx1MjAyQlxcdTIwMkVcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3MlxcdUZFNzRcXHVGRTc2LVxcdUZFRkNdL1xuXG5leHBvcnQgY29uc3QgZ2V0RGlyZWN0aW9uID0gKGZ1bmN0aW9uKCkge1xuICBjb25zdCBpbnB1dCA9IG1ha2VFbGVtZW50KFwiaW5wdXRcIiwgeyBkaXI6IFwiYXV0b1wiLCBuYW1lOiBcInhcIiwgZGlyTmFtZTogXCJ4LmRpclwiIH0pXG4gIGNvbnN0IHRleHRBcmVhID0gbWFrZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiLCB7IGRpcjogXCJhdXRvXCIsIG5hbWU6IFwieVwiLCBkaXJOYW1lOiBcInkuZGlyXCIgfSlcbiAgY29uc3QgZm9ybSA9IG1ha2VFbGVtZW50KFwiZm9ybVwiKVxuICBmb3JtLmFwcGVuZENoaWxkKGlucHV0KVxuICBmb3JtLmFwcGVuZENoaWxkKHRleHRBcmVhKVxuXG4gIGNvbnN0IHN1cHBvcnRzRGlyTmFtZSA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBGb3JtRGF0YShmb3JtKS5oYXModGV4dEFyZWEuZGlyTmFtZSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9KSgpXG5cbiAgY29uc3Qgc3VwcG9ydHNEaXJTZWxlY3RvciA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGlucHV0Lm1hdGNoZXMoXCI6ZGlyKGx0ciksOmRpcihydGwpXCIpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSkoKVxuXG4gIGlmIChzdXBwb3J0c0Rpck5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB0ZXh0QXJlYS52YWx1ZSA9IHN0cmluZ1xuICAgICAgcmV0dXJuIG5ldyBGb3JtRGF0YShmb3JtKS5nZXQodGV4dEFyZWEuZGlyTmFtZSlcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3VwcG9ydHNEaXJTZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIGlucHV0LnZhbHVlID0gc3RyaW5nXG4gICAgICBpZiAoaW5wdXQubWF0Y2hlcyhcIjpkaXIocnRsKVwiKSkge1xuICAgICAgICByZXR1cm4gXCJydGxcIlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibHRyXCJcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgY29uc3QgY2hhciA9IHN0cmluZy50cmltKCkuY2hhckF0KDApXG4gICAgICBpZiAoUlRMX1BBVFRFUk4udGVzdChjaGFyKSkge1xuICAgICAgICByZXR1cm4gXCJydGxcIlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibHRyXCJcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKClcbiIsICJpbXBvcnQgKiBhcyBjb25maWcgZnJvbSBcInRyaXgvY29uZmlnXCJcblxubGV0IGFsbEF0dHJpYnV0ZU5hbWVzID0gbnVsbFxubGV0IGJsb2NrQXR0cmlidXRlTmFtZXMgPSBudWxsXG5sZXQgdGV4dEF0dHJpYnV0ZU5hbWVzID0gbnVsbFxubGV0IGxpc3RBdHRyaWJ1dGVOYW1lcyA9IG51bGxcblxuZXhwb3J0IGNvbnN0IGdldEFsbEF0dHJpYnV0ZU5hbWVzID0gKCkgPT4ge1xuICBpZiAoIWFsbEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgYWxsQXR0cmlidXRlTmFtZXMgPSBnZXRUZXh0QXR0cmlidXRlTmFtZXMoKS5jb25jYXQoZ2V0QmxvY2tBdHRyaWJ1dGVOYW1lcygpKVxuICB9XG4gIHJldHVybiBhbGxBdHRyaWJ1dGVOYW1lc1xufVxuXG5leHBvcnQgY29uc3QgZ2V0QmxvY2tDb25maWcgPSAoYXR0cmlidXRlTmFtZSkgPT4gY29uZmlnLmJsb2NrQXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXVxuXG5leHBvcnQgY29uc3QgZ2V0QmxvY2tBdHRyaWJ1dGVOYW1lcyA9ICgpID0+IHtcbiAgaWYgKCFibG9ja0F0dHJpYnV0ZU5hbWVzKSB7XG4gICAgYmxvY2tBdHRyaWJ1dGVOYW1lcyA9IE9iamVjdC5rZXlzKGNvbmZpZy5ibG9ja0F0dHJpYnV0ZXMpXG4gIH1cbiAgcmV0dXJuIGJsb2NrQXR0cmlidXRlTmFtZXNcbn1cblxuZXhwb3J0IGNvbnN0IGdldFRleHRDb25maWcgPSAoYXR0cmlidXRlTmFtZSkgPT4gY29uZmlnLnRleHRBdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdXG5cbmV4cG9ydCBjb25zdCBnZXRUZXh0QXR0cmlidXRlTmFtZXMgPSAoKSA9PiB7XG4gIGlmICghdGV4dEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgdGV4dEF0dHJpYnV0ZU5hbWVzID0gT2JqZWN0LmtleXMoY29uZmlnLnRleHRBdHRyaWJ1dGVzKVxuICB9XG4gIHJldHVybiB0ZXh0QXR0cmlidXRlTmFtZXNcbn1cblxuZXhwb3J0IGNvbnN0IGdldExpc3RBdHRyaWJ1dGVOYW1lcyA9ICgpID0+IHtcbiAgaWYgKCFsaXN0QXR0cmlidXRlTmFtZXMpIHtcbiAgICBsaXN0QXR0cmlidXRlTmFtZXMgPSBbXVxuICAgIGZvciAoY29uc3Qga2V5IGluIGNvbmZpZy5ibG9ja0F0dHJpYnV0ZXMpIHtcbiAgICAgIGNvbnN0IHsgbGlzdEF0dHJpYnV0ZSB9ID0gY29uZmlnLmJsb2NrQXR0cmlidXRlc1trZXldXG4gICAgICBpZiAobGlzdEF0dHJpYnV0ZSAhPSBudWxsKSB7XG4gICAgICAgIGxpc3RBdHRyaWJ1dGVOYW1lcy5wdXNoKGxpc3RBdHRyaWJ1dGUpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBsaXN0QXR0cmlidXRlTmFtZXNcbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZVxuKi9cbmV4cG9ydCBjb25zdCBpbnN0YWxsRGVmYXVsdENTU0ZvclRhZ05hbWUgPSBmdW5jdGlvbih0YWdOYW1lLCBkZWZhdWx0Q1NTKSB7XG4gIGNvbnN0IHN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudEZvclRhZ05hbWUodGFnTmFtZSlcbiAgc3R5bGVFbGVtZW50LnRleHRDb250ZW50ID0gZGVmYXVsdENTUy5yZXBsYWNlKC8ldC9nLCB0YWdOYW1lKVxufVxuXG5jb25zdCBpbnNlcnRTdHlsZUVsZW1lbnRGb3JUYWdOYW1lID0gZnVuY3Rpb24odGFnTmFtZSkge1xuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpXG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHQvY3NzXCIpXG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS10YWctbmFtZVwiLCB0YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gIGNvbnN0IG5vbmNlID0gZ2V0Q1NQTm9uY2UoKVxuICBpZiAobm9uY2UpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKVxuICB9XG4gIGRvY3VtZW50LmhlYWQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGRvY3VtZW50LmhlYWQuZmlyc3RDaGlsZClcbiAgcmV0dXJuIGVsZW1lbnRcbn1cblxuY29uc3QgZ2V0Q1NQTm9uY2UgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZWxlbWVudCA9IGdldE1ldGFFbGVtZW50KFwidHJpeC1jc3Atbm9uY2VcIikgfHwgZ2V0TWV0YUVsZW1lbnQoXCJjc3Atbm9uY2VcIilcbiAgaWYgKGVsZW1lbnQpIHtcbiAgICBjb25zdCB7IG5vbmNlLCBjb250ZW50IH0gPSBlbGVtZW50XG4gICAgcmV0dXJuIG5vbmNlID09IFwiXCIgPyBjb250ZW50IDogbm9uY2VcbiAgfVxufVxuXG5jb25zdCBnZXRNZXRhRWxlbWVudCA9IChuYW1lKSA9PiBkb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3IoYG1ldGFbbmFtZT0ke25hbWV9XWApXG4iLCAiY29uc3QgdGVzdFRyYW5zZmVyRGF0YSA9IHsgXCJhcHBsaWNhdGlvbi94LXRyaXgtZmVhdHVyZS1kZXRlY3Rpb25cIjogXCJ0ZXN0XCIgfVxuXG5leHBvcnQgY29uc3QgZGF0YVRyYW5zZmVySXNQbGFpblRleHQgPSBmdW5jdGlvbihkYXRhVHJhbnNmZXIpIHtcbiAgY29uc3QgdGV4dCA9IGRhdGFUcmFuc2Zlci5nZXREYXRhKFwidGV4dC9wbGFpblwiKVxuICBjb25zdCBodG1sID0gZGF0YVRyYW5zZmVyLmdldERhdGEoXCJ0ZXh0L2h0bWxcIilcblxuICBpZiAodGV4dCAmJiBodG1sKSB7XG4gICAgY29uc3QgeyBib2R5IH0gPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGh0bWwsIFwidGV4dC9odG1sXCIpXG4gICAgaWYgKGJvZHkudGV4dENvbnRlbnQgPT09IHRleHQpIHtcbiAgICAgIHJldHVybiAhYm9keS5xdWVyeVNlbGVjdG9yKFwiKlwiKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGV4dD8ubGVuZ3RoXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGRhdGFUcmFuc2ZlcklzTXNPZmZpY2VQYXN0ZSA9ICh7IGRhdGFUcmFuc2ZlciB9KSA9PiB7XG4gIHJldHVybiBkYXRhVHJhbnNmZXIudHlwZXMuaW5jbHVkZXMoXCJGaWxlc1wiKSAmJlxuICAgIGRhdGFUcmFuc2Zlci50eXBlcy5pbmNsdWRlcyhcInRleHQvaHRtbFwiKSAmJlxuICAgIGRhdGFUcmFuc2Zlci5nZXREYXRhKFwidGV4dC9odG1sXCIpLmluY2x1ZGVzKFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIpXG59XG5cbmV4cG9ydCBjb25zdCBkYXRhVHJhbnNmZXJJc1dyaXRhYmxlID0gZnVuY3Rpb24oZGF0YVRyYW5zZmVyKSB7XG4gIGlmICghZGF0YVRyYW5zZmVyPy5zZXREYXRhKSByZXR1cm4gZmFsc2VcblxuICBmb3IgKGNvbnN0IGtleSBpbiB0ZXN0VHJhbnNmZXJEYXRhKSB7XG4gICAgY29uc3QgdmFsdWUgPSB0ZXN0VHJhbnNmZXJEYXRhW2tleV1cblxuICAgIHRyeSB7XG4gICAgICBkYXRhVHJhbnNmZXIuc2V0RGF0YShrZXksIHZhbHVlKVxuICAgICAgaWYgKCFkYXRhVHJhbnNmZXIuZ2V0RGF0YShrZXkpID09PSB2YWx1ZSkgcmV0dXJuIGZhbHNlXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgY29uc3Qga2V5RXZlbnRJc0tleWJvYXJkQ29tbWFuZCA9IChmdW5jdGlvbigpIHtcbiAgaWYgKC9NYWN8XmlQLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSkpIHtcbiAgICByZXR1cm4gKGV2ZW50KSA9PiBldmVudC5tZXRhS2V5XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChldmVudCkgPT4gZXZlbnQuY3RybEtleVxuICB9XG59KSgpXG5cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRSZW5kZXJJbm1tZWRpYXRlbHlUb0RlYWxXaXRoSU9TRGljdGF0aW9uKGlucHV0RXZlbnQpIHtcbiAgaWYgKC9pUGhvbmV8aVBhZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgIC8vIEhhbmRsZSBnYXJibGVkIGNvbnRlbnQgYW5kIGR1cGxpY2F0ZWQgbmV3bGluZXMgd2hlbiB1c2luZyBkaWN0YXRpb24gb24gaU9TIDE4Ky4gVXBvbiBkaWN0YXRpb24gY29tcGxldGlvbiwgaU9TIHNlbmRzXG4gICAgLy8gdGhlIGxpc3Qgb2YgaW5zZXJ0VGV4dCAvIGluc2VydFBhcmFncmFwaCBldmVudHMgaW4gYSBxdWljayBzZXF1ZW5jZS4gSWYgd2UgZG9uJ3QgcmVuZGVyXG4gICAgLy8gdGhlIGVkaXRvciBzeW5jaHJvbm91c2x5LCB0aGUgaW50ZXJuYWwgcmFuZ2UgZmFpbHMgdG8gdXBkYXRlIGFuZCByZXN1bHRzIGluIGdhcmJsZWQgY29udGVudCBvciBkdXBsaWNhdGVkIG5ld2xpbmVzLlxuICAgIC8vXG4gICAgLy8gVGhpcyB3b3JrYXJvdW5kIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGlPUyBkb2Vzbid0IHNlbmQgY29tcG9zaW5nIGV2ZW50cyBhcyBleHBlY3RlZCB3aGlsZSBkaWN0YXRpbmc6XG4gICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI2MTc2NFxuICAgIHJldHVybiAhaW5wdXRFdmVudC5pbnB1dFR5cGUgfHwgaW5wdXRFdmVudC5pbnB1dFR5cGUgPT09IFwiaW5zZXJ0UGFyYWdyYXBoXCJcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuIiwgImV4cG9ydCBjb25zdCBkZWZlciA9IChmbikgPT4gc2V0VGltZW91dChmbiwgMSlcbiIsICIvKiBlc2xpbnQtZGlzYWJsZVxuICAgIGlkLWxlbmd0aCxcbiovXG5leHBvcnQgY29uc3QgY29weU9iamVjdCA9IGZ1bmN0aW9uKG9iamVjdCA9IHt9KSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9XG4gIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgIGNvbnN0IHZhbHVlID0gb2JqZWN0W2tleV1cbiAgICByZXN1bHRba2V5XSA9IHZhbHVlXG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgY29uc3Qgb2JqZWN0c0FyZUVxdWFsID0gZnVuY3Rpb24oYSA9IHt9LCBiID0ge30pIHtcbiAgaWYgKE9iamVjdC5rZXlzKGEpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgIGNvbnN0IHZhbHVlID0gYVtrZXldXG4gICAgaWYgKHZhbHVlICE9PSBiW2tleV0pIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuIiwgImltcG9ydCB7IGNvcHlPYmplY3QsIG9iamVjdHNBcmVFcXVhbCB9IGZyb20gXCJ0cml4L2NvcmUvaGVscGVycy9vYmplY3RzXCJcblxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHtcbiAgaWYgKHJhbmdlID09IG51bGwpIHJldHVyblxuXG4gIGlmICghQXJyYXkuaXNBcnJheShyYW5nZSkpIHtcbiAgICByYW5nZSA9IFsgcmFuZ2UsIHJhbmdlIF1cbiAgfVxuICByZXR1cm4gWyBjb3B5VmFsdWUocmFuZ2VbMF0pLCBjb3B5VmFsdWUocmFuZ2VbMV0gIT0gbnVsbCA/IHJhbmdlWzFdIDogcmFuZ2VbMF0pIF1cbn1cblxuZXhwb3J0IGNvbnN0IHJhbmdlSXNDb2xsYXBzZWQgPSBmdW5jdGlvbihyYW5nZSkge1xuICBpZiAocmFuZ2UgPT0gbnVsbCkgcmV0dXJuXG5cbiAgY29uc3QgWyBzdGFydCwgZW5kIF0gPSBub3JtYWxpemVSYW5nZShyYW5nZSlcbiAgcmV0dXJuIHJhbmdlVmFsdWVzQXJlRXF1YWwoc3RhcnQsIGVuZClcbn1cblxuZXhwb3J0IGNvbnN0IHJhbmdlc0FyZUVxdWFsID0gZnVuY3Rpb24obGVmdFJhbmdlLCByaWdodFJhbmdlKSB7XG4gIGlmIChsZWZ0UmFuZ2UgPT0gbnVsbCB8fCByaWdodFJhbmdlID09IG51bGwpIHJldHVyblxuXG4gIGNvbnN0IFsgbGVmdFN0YXJ0LCBsZWZ0RW5kIF0gPSBub3JtYWxpemVSYW5nZShsZWZ0UmFuZ2UpXG4gIGNvbnN0IFsgcmlnaHRTdGFydCwgcmlnaHRFbmQgXSA9IG5vcm1hbGl6ZVJhbmdlKHJpZ2h0UmFuZ2UpXG4gIHJldHVybiByYW5nZVZhbHVlc0FyZUVxdWFsKGxlZnRTdGFydCwgcmlnaHRTdGFydCkgJiYgcmFuZ2VWYWx1ZXNBcmVFcXVhbChsZWZ0RW5kLCByaWdodEVuZClcbn1cblxuY29uc3QgY29weVZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiB2YWx1ZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlKVxuICB9XG59XG5cbmNvbnN0IHJhbmdlVmFsdWVzQXJlRXF1YWwgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICBpZiAodHlwZW9mIGxlZnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqZWN0c0FyZUVxdWFsKGxlZnQsIHJpZ2h0KVxuICB9XG59XG4iLCAiaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLnVwZGF0ZSA9IHRoaXMudXBkYXRlLmJpbmQodGhpcylcbiAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXJzID0gW11cbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIGlmICghdGhpcy5zdGFydGVkKSB7XG4gICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsIHRoaXMudXBkYXRlLCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgaWYgKHRoaXMuc3RhcnRlZCkge1xuICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2VcbiAgICAgIHJldHVybiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsIHRoaXMudXBkYXRlLCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyU2VsZWN0aW9uTWFuYWdlcihzZWxlY3Rpb25NYW5hZ2VyKSB7XG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbk1hbmFnZXJzLmluY2x1ZGVzKHNlbGVjdGlvbk1hbmFnZXIpKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXJzLnB1c2goc2VsZWN0aW9uTWFuYWdlcilcbiAgICAgIHJldHVybiB0aGlzLnN0YXJ0KClcbiAgICB9XG4gIH1cblxuICB1bnJlZ2lzdGVyU2VsZWN0aW9uTWFuYWdlcihzZWxlY3Rpb25NYW5hZ2VyKSB7XG4gICAgdGhpcy5zZWxlY3Rpb25NYW5hZ2VycyA9IHRoaXMuc2VsZWN0aW9uTWFuYWdlcnMuZmlsdGVyKChzbSkgPT4gc20gIT09IHNlbGVjdGlvbk1hbmFnZXIpXG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uTWFuYWdlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdG9wKClcbiAgICB9XG4gIH1cblxuICBub3RpZnlTZWxlY3Rpb25NYW5hZ2Vyc09mU2VsZWN0aW9uQ2hhbmdlKCkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbk1hbmFnZXJzLm1hcCgoc2VsZWN0aW9uTWFuYWdlcikgPT4gc2VsZWN0aW9uTWFuYWdlci5zZWxlY3Rpb25EaWRDaGFuZ2UoKSlcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLm5vdGlmeVNlbGVjdGlvbk1hbmFnZXJzT2ZTZWxlY3Rpb25DaGFuZ2UoKVxuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy51cGRhdGUoKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzZWxlY3Rpb25DaGFuZ2VPYnNlcnZlciA9IG5ldyBTZWxlY3Rpb25DaGFuZ2VPYnNlcnZlcigpXG5cbmV4cG9ydCBjb25zdCBnZXRET01TZWxlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgY29uc3Qgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpXG4gIGlmIChzZWxlY3Rpb24ucmFuZ2VDb3VudCA+IDApIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldERPTVJhbmdlID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGRvbVJhbmdlID0gZ2V0RE9NU2VsZWN0aW9uKCk/LmdldFJhbmdlQXQoMClcbiAgaWYgKGRvbVJhbmdlKSB7XG4gICAgaWYgKCFkb21SYW5nZUlzUHJpdmF0ZShkb21SYW5nZSkpIHtcbiAgICAgIHJldHVybiBkb21SYW5nZVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgc2V0RE9NUmFuZ2UgPSBmdW5jdGlvbihkb21SYW5nZSkge1xuICBjb25zdCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKClcbiAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpXG4gIHNlbGVjdGlvbi5hZGRSYW5nZShkb21SYW5nZSlcbiAgcmV0dXJuIHNlbGVjdGlvbkNoYW5nZU9ic2VydmVyLnVwZGF0ZSgpXG59XG5cbi8vIEluIEZpcmVmb3gsIGNsaWNraW5nIGNlcnRhaW4gPGlucHV0PiBlbGVtZW50cyBjaGFuZ2VzIHRoZSBzZWxlY3Rpb24gdG8gYVxuLy8gcHJpdmF0ZSBlbGVtZW50IHVzZWQgdG8gZHJhdyBpdHMgVUkuIEF0dGVtcHRpbmcgdG8gYWNjZXNzIHByb3BlcnRpZXMgb2YgdGhvc2Vcbi8vIGVsZW1lbnRzIHRocm93cyBhbiBlcnJvci5cbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTIwODQyN1xuY29uc3QgZG9tUmFuZ2VJc1ByaXZhdGUgPSAoZG9tUmFuZ2UpID0+IG5vZGVJc1ByaXZhdGUoZG9tUmFuZ2Uuc3RhcnRDb250YWluZXIpIHx8IG5vZGVJc1ByaXZhdGUoZG9tUmFuZ2UuZW5kQ29udGFpbmVyKVxuXG5jb25zdCBub2RlSXNQcml2YXRlID0gKG5vZGUpID0+ICFPYmplY3QuZ2V0UHJvdG90eXBlT2Yobm9kZSlcbiIsICIvKiBlc2xpbnQtZGlzYWJsZVxuICAgIGlkLWxlbmd0aCxcbiAgICBuby11c2VsZXNzLWVzY2FwZSxcbiovXG5pbXBvcnQgeyBOT05fQlJFQUtJTkdfU1BBQ0UsIFpFUk9fV0lEVEhfU1BBQ0UgfSBmcm9tIFwidHJpeC9jb25zdGFudHNcIlxuaW1wb3J0IFVURjE2U3RyaW5nIGZyb20gXCJ0cml4L2NvcmUvdXRpbGl0aWVzL3V0ZjE2X3N0cmluZ1wiXG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVTcGFjZXMgPSAoc3RyaW5nKSA9PlxuICBzdHJpbmcucmVwbGFjZShuZXcgUmVnRXhwKGAke1pFUk9fV0lEVEhfU1BBQ0V9YCwgXCJnXCIpLCBcIlwiKS5yZXBsYWNlKG5ldyBSZWdFeHAoYCR7Tk9OX0JSRUFLSU5HX1NQQUNFfWAsIFwiZ1wiKSwgXCIgXCIpXG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVOZXdsaW5lcyA9IChzdHJpbmcpID0+IHN0cmluZy5yZXBsYWNlKC9cXHJcXG4/L2csIFwiXFxuXCIpXG5cbmV4cG9ydCBjb25zdCBicmVha2FibGVXaGl0ZXNwYWNlUGF0dGVybiA9IG5ldyBSZWdFeHAoYFteXFxcXFMke05PTl9CUkVBS0lOR19TUEFDRX1dYClcblxuZXhwb3J0IGNvbnN0IHNxdWlzaEJyZWFrYWJsZVdoaXRlc3BhY2UgPSAoc3RyaW5nKSA9PlxuICBzdHJpbmdcbiAgICAvLyBSZXBsYWNlIGFsbCBicmVha2FibGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHdpdGggYSBzcGFjZVxuICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAoYCR7YnJlYWthYmxlV2hpdGVzcGFjZVBhdHRlcm4uc291cmNlfWAsIFwiZ1wiKSwgXCIgXCIpXG4gICAgLy8gUmVwbGFjZSB0d28gb3IgbW9yZSBzcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICAgIC5yZXBsYWNlKC9cXCB7Mix9L2csIFwiIFwiKVxuXG5leHBvcnQgY29uc3Qgc3VtbWFyaXplU3RyaW5nQ2hhbmdlID0gZnVuY3Rpb24ob2xkU3RyaW5nLCBuZXdTdHJpbmcpIHtcbiAgbGV0IGFkZGVkLCByZW1vdmVkXG4gIG9sZFN0cmluZyA9IFVURjE2U3RyaW5nLmJveChvbGRTdHJpbmcpXG4gIG5ld1N0cmluZyA9IFVURjE2U3RyaW5nLmJveChuZXdTdHJpbmcpXG5cbiAgaWYgKG5ld1N0cmluZy5sZW5ndGggPCBvbGRTdHJpbmcubGVuZ3RoKSB7XG4gICAgWyByZW1vdmVkLCBhZGRlZCBdID0gdXRmMTZTdHJpbmdEaWZmZXJlbmNlcyhvbGRTdHJpbmcsIG5ld1N0cmluZylcbiAgfSBlbHNlIHtcbiAgICBbIGFkZGVkLCByZW1vdmVkIF0gPSB1dGYxNlN0cmluZ0RpZmZlcmVuY2VzKG5ld1N0cmluZywgb2xkU3RyaW5nKVxuICB9XG5cbiAgcmV0dXJuIHsgYWRkZWQsIHJlbW92ZWQgfVxufVxuXG5jb25zdCB1dGYxNlN0cmluZ0RpZmZlcmVuY2VzID0gZnVuY3Rpb24oYSwgYikge1xuICBpZiAoYS5pc0VxdWFsVG8oYikpIHtcbiAgICByZXR1cm4gWyBcIlwiLCBcIlwiIF1cbiAgfVxuXG4gIGNvbnN0IGRpZmZBID0gdXRmMTZTdHJpbmdEaWZmZXJlbmNlKGEsIGIpXG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSBkaWZmQS51dGYxNlN0cmluZ1xuXG4gIGxldCBkaWZmQlxuXG4gIGlmIChsZW5ndGgpIHtcbiAgICBjb25zdCB7IG9mZnNldCB9ID0gZGlmZkFcbiAgICBjb25zdCBjb2RlcG9pbnRzID0gYS5jb2RlcG9pbnRzLnNsaWNlKDAsIG9mZnNldCkuY29uY2F0KGEuY29kZXBvaW50cy5zbGljZShvZmZzZXQgKyBsZW5ndGgpKVxuICAgIGRpZmZCID0gdXRmMTZTdHJpbmdEaWZmZXJlbmNlKGIsIFVURjE2U3RyaW5nLmZyb21Db2RlcG9pbnRzKGNvZGVwb2ludHMpKVxuICB9IGVsc2Uge1xuICAgIGRpZmZCID0gdXRmMTZTdHJpbmdEaWZmZXJlbmNlKGIsIGEpXG4gIH1cblxuICByZXR1cm4gWyBkaWZmQS51dGYxNlN0cmluZy50b1N0cmluZygpLCBkaWZmQi51dGYxNlN0cmluZy50b1N0cmluZygpIF1cbn1cblxuY29uc3QgdXRmMTZTdHJpbmdEaWZmZXJlbmNlID0gZnVuY3Rpb24oYSwgYikge1xuICBsZXQgbGVmdEluZGV4ID0gMFxuICBsZXQgcmlnaHRJbmRleEEgPSBhLmxlbmd0aFxuICBsZXQgcmlnaHRJbmRleEIgPSBiLmxlbmd0aFxuXG4gIHdoaWxlIChsZWZ0SW5kZXggPCByaWdodEluZGV4QSAmJiBhLmNoYXJBdChsZWZ0SW5kZXgpLmlzRXF1YWxUbyhiLmNoYXJBdChsZWZ0SW5kZXgpKSkge1xuICAgIGxlZnRJbmRleCsrXG4gIH1cblxuICB3aGlsZSAocmlnaHRJbmRleEEgPiBsZWZ0SW5kZXggKyAxICYmIGEuY2hhckF0KHJpZ2h0SW5kZXhBIC0gMSkuaXNFcXVhbFRvKGIuY2hhckF0KHJpZ2h0SW5kZXhCIC0gMSkpKSB7XG4gICAgcmlnaHRJbmRleEEtLVxuICAgIHJpZ2h0SW5kZXhCLS1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdXRmMTZTdHJpbmc6IGEuc2xpY2UobGVmdEluZGV4LCByaWdodEluZGV4QSksXG4gICAgb2Zmc2V0OiBsZWZ0SW5kZXgsXG4gIH1cbn1cbiIsICJpbXBvcnQgVHJpeE9iamVjdCBmcm9tIFwidHJpeC9jb3JlL29iamVjdFwiIC8vIERvbid0IG92ZXJyaWRlIHdpbmRvdy5PYmplY3RcbmltcG9ydCB7IGFycmF5c0FyZUVxdWFsIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGFzaCBleHRlbmRzIFRyaXhPYmplY3Qge1xuICBzdGF0aWMgZnJvbUNvbW1vbkF0dHJpYnV0ZXNPZk9iamVjdHMob2JqZWN0cyA9IFtdKSB7XG4gICAgaWYgKCFvYmplY3RzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKClcbiAgICB9XG4gICAgbGV0IGhhc2ggPSBib3gob2JqZWN0c1swXSlcbiAgICBsZXQga2V5cyA9IGhhc2guZ2V0S2V5cygpXG5cbiAgICBvYmplY3RzLnNsaWNlKDEpLmZvckVhY2goKG9iamVjdCkgPT4ge1xuICAgICAga2V5cyA9IGhhc2guZ2V0S2V5c0NvbW1vblRvSGFzaChib3gob2JqZWN0KSlcbiAgICAgIGhhc2ggPSBoYXNoLnNsaWNlKGtleXMpXG4gICAgfSlcblxuICAgIHJldHVybiBoYXNoXG4gIH1cblxuICBzdGF0aWMgYm94KHZhbHVlcykge1xuICAgIHJldHVybiBib3godmFsdWVzKVxuICB9XG5cbiAgY29uc3RydWN0b3IodmFsdWVzID0ge30pIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy52YWx1ZXMgPSBjb3B5KHZhbHVlcylcbiAgfVxuXG4gIGFkZChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMubWVyZ2Uob2JqZWN0KGtleSwgdmFsdWUpKVxuICB9XG5cbiAgcmVtb3ZlKGtleSkge1xuICAgIHJldHVybiBuZXcgSGFzaChjb3B5KHRoaXMudmFsdWVzLCBrZXkpKVxuICB9XG5cbiAgZ2V0KGtleSkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlc1trZXldXG4gIH1cblxuICBoYXMoa2V5KSB7XG4gICAgcmV0dXJuIGtleSBpbiB0aGlzLnZhbHVlc1xuICB9XG5cbiAgbWVyZ2UodmFsdWVzKSB7XG4gICAgcmV0dXJuIG5ldyBIYXNoKG1lcmdlKHRoaXMudmFsdWVzLCB1bmJveCh2YWx1ZXMpKSlcbiAgfVxuXG4gIHNsaWNlKGtleXMpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB7fVxuXG4gICAgQXJyYXkuZnJvbShrZXlzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgIHZhbHVlc1trZXldID0gdGhpcy52YWx1ZXNba2V5XVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gbmV3IEhhc2godmFsdWVzKVxuICB9XG5cbiAgZ2V0S2V5cygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy52YWx1ZXMpXG4gIH1cblxuICBnZXRLZXlzQ29tbW9uVG9IYXNoKGhhc2gpIHtcbiAgICBoYXNoID0gYm94KGhhc2gpXG4gICAgcmV0dXJuIHRoaXMuZ2V0S2V5cygpLmZpbHRlcigoa2V5KSA9PiB0aGlzLnZhbHVlc1trZXldID09PSBoYXNoLnZhbHVlc1trZXldKVxuICB9XG5cbiAgaXNFcXVhbFRvKHZhbHVlcykge1xuICAgIHJldHVybiBhcnJheXNBcmVFcXVhbCh0aGlzLnRvQXJyYXkoKSwgYm94KHZhbHVlcykudG9BcnJheSgpKVxuICB9XG5cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRLZXlzKCkubGVuZ3RoID09PSAwXG4gIH1cblxuICB0b0FycmF5KCkge1xuICAgIGlmICghdGhpcy5hcnJheSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gW11cbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMudmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZXNba2V5XVxuICAgICAgICByZXN1bHQucHVzaChyZXN1bHQucHVzaChrZXksIHZhbHVlKSlcbiAgICAgIH1cbiAgICAgIHRoaXMuYXJyYXkgPSByZXN1bHQuc2xpY2UoMClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hcnJheVxuICB9XG5cbiAgdG9PYmplY3QoKSB7XG4gICAgcmV0dXJuIGNvcHkodGhpcy52YWx1ZXMpXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9PYmplY3QoKVxuICB9XG5cbiAgY29udGVudHNGb3JJbnNwZWN0aW9uKCkge1xuICAgIHJldHVybiB7IHZhbHVlczogSlNPTi5zdHJpbmdpZnkodGhpcy52YWx1ZXMpIH1cbiAgfVxufVxuXG5jb25zdCBvYmplY3QgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9XG4gIHJlc3VsdFtrZXldID0gdmFsdWVcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5jb25zdCBtZXJnZSA9IGZ1bmN0aW9uKG9iamVjdCwgdmFsdWVzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGNvcHkob2JqZWN0KVxuICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZXMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1trZXldXG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuY29uc3QgY29weSA9IGZ1bmN0aW9uKG9iamVjdCwga2V5VG9SZW1vdmUpIHtcbiAgY29uc3QgcmVzdWx0ID0ge31cbiAgY29uc3Qgc29ydGVkS2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCkuc29ydCgpXG5cbiAgc29ydGVkS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoa2V5ICE9PSBrZXlUb1JlbW92ZSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBvYmplY3Rba2V5XVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gcmVzdWx0XG59XG5cbmNvbnN0IGJveCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgSGFzaCkge1xuICAgIHJldHVybiBvYmplY3RcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEhhc2gob2JqZWN0KVxuICB9XG59XG5cbmNvbnN0IHVuYm94ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBIYXNoKSB7XG4gICAgcmV0dXJuIG9iamVjdC52YWx1ZXNcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqZWN0XG4gIH1cbn1cbiIsICJleHBvcnQgZGVmYXVsdCBjbGFzcyBPYmplY3RHcm91cCB7XG4gIHN0YXRpYyBncm91cE9iamVjdHModW5ncm91cGVkT2JqZWN0cyA9IFtdLCB7IGRlcHRoLCBhc1RyZWUgfSA9IHt9KSB7XG4gICAgbGV0IGdyb3VwXG4gICAgaWYgKGFzVHJlZSkge1xuICAgICAgaWYgKGRlcHRoID09IG51bGwpIHtcbiAgICAgICAgZGVwdGggPSAwXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG9iamVjdHMgPSBbXVxuXG4gICAgQXJyYXkuZnJvbSh1bmdyb3VwZWRPYmplY3RzKS5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgIGlmIChncm91cCkge1xuICAgICAgICBpZiAob2JqZWN0LmNhbkJlR3JvdXBlZD8uKGRlcHRoKSAmJiBncm91cFtncm91cC5sZW5ndGggLSAxXS5jYW5CZUdyb3VwZWRXaXRoPy4ob2JqZWN0LCBkZXB0aCkpIHtcbiAgICAgICAgICBncm91cC5wdXNoKG9iamVjdClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYmplY3RzLnB1c2gobmV3IHRoaXMoZ3JvdXAsIHsgZGVwdGgsIGFzVHJlZSB9KSlcbiAgICAgICAgICBncm91cCA9IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAob2JqZWN0LmNhbkJlR3JvdXBlZD8uKGRlcHRoKSkge1xuICAgICAgICBncm91cCA9IFsgb2JqZWN0IF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdHMucHVzaChvYmplY3QpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmIChncm91cCkge1xuICAgICAgb2JqZWN0cy5wdXNoKG5ldyB0aGlzKGdyb3VwLCB7IGRlcHRoLCBhc1RyZWUgfSkpXG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzXG4gIH1cblxuICBjb25zdHJ1Y3RvcihvYmplY3RzID0gW10sIHsgZGVwdGgsIGFzVHJlZSB9KSB7XG4gICAgdGhpcy5vYmplY3RzID0gb2JqZWN0c1xuICAgIGlmIChhc1RyZWUpIHtcbiAgICAgIHRoaXMuZGVwdGggPSBkZXB0aFxuICAgICAgdGhpcy5vYmplY3RzID0gdGhpcy5jb25zdHJ1Y3Rvci5ncm91cE9iamVjdHModGhpcy5vYmplY3RzLCB7IGFzVHJlZSwgZGVwdGg6IHRoaXMuZGVwdGggKyAxIH0pXG4gICAgfVxuICB9XG5cbiAgZ2V0T2JqZWN0cygpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3RzXG4gIH1cblxuICBnZXREZXB0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5kZXB0aFxuICB9XG5cbiAgZ2V0Q2FjaGVLZXkoKSB7XG4gICAgY29uc3Qga2V5cyA9IFsgXCJvYmplY3RHcm91cFwiIF1cbiAgICBBcnJheS5mcm9tKHRoaXMuZ2V0T2JqZWN0cygpKS5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgIGtleXMucHVzaChvYmplY3QuZ2V0Q2FjaGVLZXkoKSlcbiAgICB9KVxuICAgIHJldHVybiBrZXlzLmpvaW4oXCIvXCIpXG4gIH1cbn1cbiIsICJpbXBvcnQgQmFzaWNPYmplY3QgZnJvbSBcInRyaXgvY29yZS9iYXNpY19vYmplY3RcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPYmplY3RNYXAgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGNvbnN0cnVjdG9yKG9iamVjdHMgPSBbXSkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLm9iamVjdHMgPSB7fVxuXG4gICAgQXJyYXkuZnJvbShvYmplY3RzKS5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgIGNvbnN0IGhhc2ggPSBKU09OLnN0cmluZ2lmeShvYmplY3QpXG4gICAgICBpZiAodGhpcy5vYmplY3RzW2hhc2hdID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5vYmplY3RzW2hhc2hdID0gb2JqZWN0XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZpbmQob2JqZWN0KSB7XG4gICAgY29uc3QgaGFzaCA9IEpTT04uc3RyaW5naWZ5KG9iamVjdClcbiAgICByZXR1cm4gdGhpcy5vYmplY3RzW2hhc2hdXG4gIH1cbn1cbiIsICJleHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVtZW50U3RvcmUge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50cykge1xuICAgIHRoaXMucmVzZXQoZWxlbWVudHMpXG4gIH1cblxuICBhZGQoZWxlbWVudCkge1xuICAgIGNvbnN0IGtleSA9IGdldEtleShlbGVtZW50KVxuICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IGVsZW1lbnRcbiAgfVxuXG4gIHJlbW92ZShlbGVtZW50KSB7XG4gICAgY29uc3Qga2V5ID0gZ2V0S2V5KGVsZW1lbnQpXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmVsZW1lbnRzW2tleV1cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnRzW2tleV1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cbiAgfVxuXG4gIHJlc2V0KGVsZW1lbnRzID0gW10pIHtcbiAgICB0aGlzLmVsZW1lbnRzID0ge31cbiAgICBBcnJheS5mcm9tKGVsZW1lbnRzKS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLmFkZChlbGVtZW50KVxuICAgIH0pXG4gICAgcmV0dXJuIGVsZW1lbnRzXG4gIH1cbn1cblxuY29uc3QgZ2V0S2V5ID0gKGVsZW1lbnQpID0+IGVsZW1lbnQuZGF0YXNldC50cml4U3RvcmVLZXlcbiIsICJpbXBvcnQgQmFzaWNPYmplY3QgZnJvbSBcInRyaXgvY29yZS9iYXNpY19vYmplY3RcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVyYXRpb24gZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGlzUGVyZm9ybWluZygpIHtcbiAgICByZXR1cm4gdGhpcy5wZXJmb3JtaW5nID09PSB0cnVlXG4gIH1cblxuICBoYXNQZXJmb3JtZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVyZm9ybWVkID09PSB0cnVlXG4gIH1cblxuICBoYXNTdWNjZWVkZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVyZm9ybWVkICYmIHRoaXMuc3VjY2VlZGVkXG4gIH1cblxuICBoYXNGYWlsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVyZm9ybWVkICYmICF0aGlzLnN1Y2NlZWRlZFxuICB9XG5cbiAgZ2V0UHJvbWlzZSgpIHtcbiAgICBpZiAoIXRoaXMucHJvbWlzZSkge1xuICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0aGlzLnBlcmZvcm1pbmcgPSB0cnVlXG4gICAgICAgIHJldHVybiB0aGlzLnBlcmZvcm0oKHN1Y2NlZWRlZCwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgdGhpcy5zdWNjZWVkZWQgPSBzdWNjZWVkZWRcbiAgICAgICAgICB0aGlzLnBlcmZvcm1pbmcgPSBmYWxzZVxuICAgICAgICAgIHRoaXMucGVyZm9ybWVkID0gdHJ1ZVxuXG4gICAgICAgICAgaWYgKHRoaXMuc3VjY2VlZGVkKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KHJlc3VsdClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnByb21pc2VcbiAgfVxuXG4gIHBlcmZvcm0oY2FsbGJhY2spIHtcbiAgICByZXR1cm4gY2FsbGJhY2soZmFsc2UpXG4gIH1cblxuICByZWxlYXNlKCkge1xuICAgIHRoaXMucHJvbWlzZT8uY2FuY2VsPy4oKVxuICAgIHRoaXMucHJvbWlzZSA9IG51bGxcbiAgICB0aGlzLnBlcmZvcm1pbmcgPSBudWxsXG4gICAgdGhpcy5wZXJmb3JtZWQgPSBudWxsXG4gICAgdGhpcy5zdWNjZWVkZWQgPSBudWxsXG4gIH1cbn1cblxuT3BlcmF0aW9uLnByb3h5TWV0aG9kKFwiZ2V0UHJvbWlzZSgpLnRoZW5cIilcbk9wZXJhdGlvbi5wcm94eU1ldGhvZChcImdldFByb21pc2UoKS5jYXRjaFwiKVxuIiwgImltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5pbXBvcnQgT2JqZWN0R3JvdXAgZnJvbSBcInRyaXgvY29yZS9jb2xsZWN0aW9ucy9vYmplY3RfZ3JvdXBcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPYmplY3RWaWV3IGV4dGVuZHMgQmFzaWNPYmplY3Qge1xuICBjb25zdHJ1Y3RvcihvYmplY3QsIG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdFxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgICB0aGlzLmNoaWxkVmlld3MgPSBbXVxuICAgIHRoaXMucm9vdFZpZXcgPSB0aGlzXG4gIH1cblxuICBnZXROb2RlcygpIHtcbiAgICBpZiAoIXRoaXMubm9kZXMpIHsgdGhpcy5ub2RlcyA9IHRoaXMuY3JlYXRlTm9kZXMoKSB9XG4gICAgcmV0dXJuIHRoaXMubm9kZXMubWFwKChub2RlKSA9PiBub2RlLmNsb25lTm9kZSh0cnVlKSlcbiAgfVxuXG4gIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5ub2RlcyA9IG51bGxcbiAgICB0aGlzLmNoaWxkVmlld3MgPSBbXVxuICAgIHJldHVybiB0aGlzLnBhcmVudFZpZXc/LmludmFsaWRhdGUoKVxuICB9XG5cbiAgaW52YWxpZGF0ZVZpZXdGb3JPYmplY3Qob2JqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZFZpZXdGb3JPYmplY3Qob2JqZWN0KT8uaW52YWxpZGF0ZSgpXG4gIH1cblxuICBmaW5kT3JDcmVhdGVDYWNoZWRDaGlsZFZpZXcodmlld0NsYXNzLCBvYmplY3QsIG9wdGlvbnMpIHtcbiAgICBsZXQgdmlldyA9IHRoaXMuZ2V0Q2FjaGVkVmlld0Zvck9iamVjdChvYmplY3QpXG4gICAgaWYgKHZpZXcpIHtcbiAgICAgIHRoaXMucmVjb3JkQ2hpbGRWaWV3KHZpZXcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHZpZXcgPSB0aGlzLmNyZWF0ZUNoaWxkVmlldyguLi5hcmd1bWVudHMpXG4gICAgICB0aGlzLmNhY2hlVmlld0Zvck9iamVjdCh2aWV3LCBvYmplY3QpXG4gICAgfVxuICAgIHJldHVybiB2aWV3XG4gIH1cblxuICBjcmVhdGVDaGlsZFZpZXcodmlld0NsYXNzLCBvYmplY3QsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBPYmplY3RHcm91cCkge1xuICAgICAgb3B0aW9ucy52aWV3Q2xhc3MgPSB2aWV3Q2xhc3NcbiAgICAgIHZpZXdDbGFzcyA9IE9iamVjdEdyb3VwVmlld1xuICAgIH1cblxuICAgIGNvbnN0IHZpZXcgPSBuZXcgdmlld0NsYXNzKG9iamVjdCwgb3B0aW9ucylcbiAgICByZXR1cm4gdGhpcy5yZWNvcmRDaGlsZFZpZXcodmlldylcbiAgfVxuXG4gIHJlY29yZENoaWxkVmlldyh2aWV3KSB7XG4gICAgdmlldy5wYXJlbnRWaWV3ID0gdGhpc1xuICAgIHZpZXcucm9vdFZpZXcgPSB0aGlzLnJvb3RWaWV3XG4gICAgdGhpcy5jaGlsZFZpZXdzLnB1c2godmlldylcbiAgICByZXR1cm4gdmlld1xuICB9XG5cbiAgZ2V0QWxsQ2hpbGRWaWV3cygpIHtcbiAgICBsZXQgdmlld3MgPSBbXVxuXG4gICAgdGhpcy5jaGlsZFZpZXdzLmZvckVhY2goKGNoaWxkVmlldykgPT4ge1xuICAgICAgdmlld3MucHVzaChjaGlsZFZpZXcpXG4gICAgICB2aWV3cyA9IHZpZXdzLmNvbmNhdChjaGlsZFZpZXcuZ2V0QWxsQ2hpbGRWaWV3cygpKVxuICAgIH0pXG5cbiAgICByZXR1cm4gdmlld3NcbiAgfVxuXG4gIGZpbmRFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmZpbmRFbGVtZW50Rm9yT2JqZWN0KHRoaXMub2JqZWN0KVxuICB9XG5cbiAgZmluZEVsZW1lbnRGb3JPYmplY3Qob2JqZWN0KSB7XG4gICAgY29uc3QgaWQgPSBvYmplY3Q/LmlkXG4gICAgaWYgKGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5yb290Vmlldy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRyaXgtaWQ9JyR7aWR9J11gKVxuICAgIH1cbiAgfVxuXG4gIGZpbmRWaWV3Rm9yT2JqZWN0KG9iamVjdCkge1xuICAgIGZvciAoY29uc3QgdmlldyBvZiB0aGlzLmdldEFsbENoaWxkVmlld3MoKSkge1xuICAgICAgaWYgKHZpZXcub2JqZWN0ID09PSBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXdcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRWaWV3Q2FjaGUoKSB7XG4gICAgaWYgKHRoaXMucm9vdFZpZXcgPT09IHRoaXMpIHtcbiAgICAgIGlmICh0aGlzLmlzVmlld0NhY2hpbmdFbmFibGVkKCkpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpZXdDYWNoZSkgeyB0aGlzLnZpZXdDYWNoZSA9IHt9IH1cbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0NhY2hlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnJvb3RWaWV3LmdldFZpZXdDYWNoZSgpXG4gICAgfVxuICB9XG5cbiAgaXNWaWV3Q2FjaGluZ0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hvdWxkQ2FjaGVWaWV3cyAhPT0gZmFsc2VcbiAgfVxuXG4gIGVuYWJsZVZpZXdDYWNoaW5nKCkge1xuICAgIHRoaXMuc2hvdWxkQ2FjaGVWaWV3cyA9IHRydWVcbiAgfVxuXG4gIGRpc2FibGVWaWV3Q2FjaGluZygpIHtcbiAgICB0aGlzLnNob3VsZENhY2hlVmlld3MgPSBmYWxzZVxuICB9XG5cbiAgZ2V0Q2FjaGVkVmlld0Zvck9iamVjdChvYmplY3QpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRWaWV3Q2FjaGUoKT8uW29iamVjdC5nZXRDYWNoZUtleSgpXVxuICB9XG5cbiAgY2FjaGVWaWV3Rm9yT2JqZWN0KHZpZXcsIG9iamVjdCkge1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5nZXRWaWV3Q2FjaGUoKVxuICAgIGlmIChjYWNoZSkge1xuICAgICAgY2FjaGVbb2JqZWN0LmdldENhY2hlS2V5KCldID0gdmlld1xuICAgIH1cbiAgfVxuXG4gIGdhcmJhZ2VDb2xsZWN0Q2FjaGVkVmlld3MoKSB7XG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLmdldFZpZXdDYWNoZSgpXG4gICAgaWYgKGNhY2hlKSB7XG4gICAgICBjb25zdCB2aWV3cyA9IHRoaXMuZ2V0QWxsQ2hpbGRWaWV3cygpLmNvbmNhdCh0aGlzKVxuICAgICAgY29uc3Qgb2JqZWN0S2V5cyA9IHZpZXdzLm1hcCgodmlldykgPT4gdmlldy5vYmplY3QuZ2V0Q2FjaGVLZXkoKSlcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGNhY2hlKSB7XG4gICAgICAgIGlmICghb2JqZWN0S2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgZGVsZXRlIGNhY2hlW2tleV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgT2JqZWN0R3JvdXBWaWV3IGV4dGVuZHMgT2JqZWN0VmlldyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLm9iamVjdEdyb3VwID0gdGhpcy5vYmplY3RcbiAgICB0aGlzLnZpZXdDbGFzcyA9IHRoaXMub3B0aW9ucy52aWV3Q2xhc3NcbiAgICBkZWxldGUgdGhpcy5vcHRpb25zLnZpZXdDbGFzc1xuICB9XG5cbiAgZ2V0Q2hpbGRWaWV3cygpIHtcbiAgICBpZiAoIXRoaXMuY2hpbGRWaWV3cy5sZW5ndGgpIHtcbiAgICAgIEFycmF5LmZyb20odGhpcy5vYmplY3RHcm91cC5nZXRPYmplY3RzKCkpLmZvckVhY2goKG9iamVjdCkgPT4ge1xuICAgICAgICB0aGlzLmZpbmRPckNyZWF0ZUNhY2hlZENoaWxkVmlldyh0aGlzLnZpZXdDbGFzcywgb2JqZWN0LCB0aGlzLm9wdGlvbnMpXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jaGlsZFZpZXdzXG4gIH1cblxuICBjcmVhdGVOb2RlcygpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5jcmVhdGVDb250YWluZXJFbGVtZW50KClcblxuICAgIHRoaXMuZ2V0Q2hpbGRWaWV3cygpLmZvckVhY2goKHZpZXcpID0+IHtcbiAgICAgIEFycmF5LmZyb20odmlldy5nZXROb2RlcygpKS5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQobm9kZSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHJldHVybiBbIGVsZW1lbnQgXVxuICB9XG5cbiAgY3JlYXRlQ29udGFpbmVyRWxlbWVudChkZXB0aCA9IHRoaXMub2JqZWN0R3JvdXAuZ2V0RGVwdGgoKSkge1xuICAgIHJldHVybiB0aGlzLmdldENoaWxkVmlld3MoKVswXS5jcmVhdGVDb250YWluZXJFbGVtZW50KGRlcHRoKVxuICB9XG59XG4iLCAiaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcblxuaW1wb3J0IHsgbm9kZUlzQXR0YWNobWVudEVsZW1lbnQsIHJlbW92ZU5vZGUsIHRhZ05hbWUsIHdhbGtUcmVlIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcbmltcG9ydCBET01QdXJpZnkgZnJvbSBcImRvbXB1cmlmeVwiXG5pbXBvcnQgKiBhcyBjb25maWcgZnJvbSBcInRyaXgvY29uZmlnXCJcblxuRE9NUHVyaWZ5LmFkZEhvb2soXCJ1cG9uU2FuaXRpemVBdHRyaWJ1dGVcIiwgZnVuY3Rpb24gKG5vZGUsIGRhdGEpIHtcbiAgY29uc3QgYWxsb3dlZEF0dHJpYnV0ZVBhdHRlcm4gPSAvXmRhdGEtdHJpeC0vXG4gIGlmIChhbGxvd2VkQXR0cmlidXRlUGF0dGVybi50ZXN0KGRhdGEuYXR0ck5hbWUpKSB7XG4gICAgZGF0YS5mb3JjZUtlZXBBdHRyID0gdHJ1ZVxuICB9XG59KVxuXG5jb25zdCBERUZBVUxUX0FMTE9XRURfQVRUUklCVVRFUyA9IFwic3R5bGUgaHJlZiBzcmMgd2lkdGggaGVpZ2h0IGxhbmd1YWdlIGNsYXNzXCIuc3BsaXQoXCIgXCIpXG5jb25zdCBERUZBVUxUX0ZPUkJJRERFTl9QUk9UT0NPTFMgPSBcImphdmFzY3JpcHQ6XCIuc3BsaXQoXCIgXCIpXG5jb25zdCBERUZBVUxUX0ZPUkJJRERFTl9FTEVNRU5UUyA9IFwic2NyaXB0IGlmcmFtZSBmb3JtIG5vc2NyaXB0XCIuc3BsaXQoXCIgXCIpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhUTUxTYW5pdGl6ZXIgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIHN0YXRpYyBzZXRIVE1MKGVsZW1lbnQsIGh0bWwpIHtcbiAgICBjb25zdCBzYW5pdGl6ZWRFbGVtZW50ID0gbmV3IHRoaXMoaHRtbCkuc2FuaXRpemUoKVxuICAgIGNvbnN0IHNhbml0aXplZEh0bWwgPSBzYW5pdGl6ZWRFbGVtZW50LmdldEhUTUwgPyBzYW5pdGl6ZWRFbGVtZW50LmdldEhUTUwoKSA6IHNhbml0aXplZEVsZW1lbnQub3V0ZXJIVE1MXG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSBzYW5pdGl6ZWRIdG1sXG4gIH1cblxuICBzdGF0aWMgc2FuaXRpemUoaHRtbCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHNhbml0aXplciA9IG5ldyB0aGlzKGh0bWwsIG9wdGlvbnMpXG4gICAgc2FuaXRpemVyLnNhbml0aXplKClcbiAgICByZXR1cm4gc2FuaXRpemVyXG4gIH1cblxuICBjb25zdHJ1Y3RvcihodG1sLCB7IGFsbG93ZWRBdHRyaWJ1dGVzLCBmb3JiaWRkZW5Qcm90b2NvbHMsIGZvcmJpZGRlbkVsZW1lbnRzIH0gPSB7fSkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLmFsbG93ZWRBdHRyaWJ1dGVzID0gYWxsb3dlZEF0dHJpYnV0ZXMgfHwgREVGQVVMVF9BTExPV0VEX0FUVFJJQlVURVNcbiAgICB0aGlzLmZvcmJpZGRlblByb3RvY29scyA9IGZvcmJpZGRlblByb3RvY29scyB8fCBERUZBVUxUX0ZPUkJJRERFTl9QUk9UT0NPTFNcbiAgICB0aGlzLmZvcmJpZGRlbkVsZW1lbnRzID0gZm9yYmlkZGVuRWxlbWVudHMgfHwgREVGQVVMVF9GT1JCSURERU5fRUxFTUVOVFNcbiAgICB0aGlzLmJvZHkgPSBjcmVhdGVCb2R5RWxlbWVudEZvckhUTUwoaHRtbClcbiAgfVxuXG4gIHNhbml0aXplKCkge1xuICAgIHRoaXMuc2FuaXRpemVFbGVtZW50cygpXG4gICAgdGhpcy5ub3JtYWxpemVMaXN0RWxlbWVudE5lc3RpbmcoKVxuICAgIERPTVB1cmlmeS5zZXRDb25maWcoY29uZmlnLmRvbXB1cmlmeSlcbiAgICB0aGlzLmJvZHkgPSBET01QdXJpZnkuc2FuaXRpemUodGhpcy5ib2R5KVxuXG4gICAgcmV0dXJuIHRoaXMuYm9keVxuICB9XG5cbiAgZ2V0SFRNTCgpIHtcbiAgICByZXR1cm4gdGhpcy5ib2R5LmlubmVySFRNTFxuICB9XG5cbiAgZ2V0Qm9keSgpIHtcbiAgICByZXR1cm4gdGhpcy5ib2R5XG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgc2FuaXRpemVFbGVtZW50cygpIHtcbiAgICBjb25zdCB3YWxrZXIgPSB3YWxrVHJlZSh0aGlzLmJvZHkpXG4gICAgY29uc3Qgbm9kZXNUb1JlbW92ZSA9IFtdXG5cbiAgICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB3YWxrZXIuY3VycmVudE5vZGVcbiAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFOlxuICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRJc1JlbW92YWJsZShub2RlKSkge1xuICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2FuaXRpemVFbGVtZW50KG5vZGUpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgTm9kZS5DT01NRU5UX05PREU6XG4gICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBub2Rlc1RvUmVtb3ZlLmZvckVhY2goKG5vZGUpID0+IHJlbW92ZU5vZGUobm9kZSkpXG5cbiAgICByZXR1cm4gdGhpcy5ib2R5XG4gIH1cblxuICBzYW5pdGl6ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGlmICh0aGlzLmZvcmJpZGRlblByb3RvY29scy5pbmNsdWRlcyhlbGVtZW50LnByb3RvY29sKSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImhyZWZcIilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBBcnJheS5mcm9tKGVsZW1lbnQuYXR0cmlidXRlcykuZm9yRWFjaCgoeyBuYW1lIH0pID0+IHtcbiAgICAgIGlmICghdGhpcy5hbGxvd2VkQXR0cmlidXRlcy5pbmNsdWRlcyhuYW1lKSAmJiBuYW1lLmluZGV4T2YoXCJkYXRhLXRyaXhcIikgIT09IDApIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIGVsZW1lbnRcbiAgfVxuXG4gIG5vcm1hbGl6ZUxpc3RFbGVtZW50TmVzdGluZygpIHtcbiAgICBBcnJheS5mcm9tKHRoaXMuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwidWwsb2xcIikpLmZvckVhY2goKGxpc3RFbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBwcmV2aW91c0VsZW1lbnQgPSBsaXN0RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXG4gICAgICBpZiAocHJldmlvdXNFbGVtZW50KSB7XG4gICAgICAgIGlmICh0YWdOYW1lKHByZXZpb3VzRWxlbWVudCkgPT09IFwibGlcIikge1xuICAgICAgICAgIHByZXZpb3VzRWxlbWVudC5hcHBlbmRDaGlsZChsaXN0RWxlbWVudClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gdGhpcy5ib2R5XG4gIH1cblxuICBlbGVtZW50SXNSZW1vdmFibGUoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50Py5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHJldHVyblxuICAgIHJldHVybiB0aGlzLmVsZW1lbnRJc0ZvcmJpZGRlbihlbGVtZW50KSB8fCB0aGlzLmVsZW1lbnRJc250U2VyaWFsaXphYmxlKGVsZW1lbnQpXG4gIH1cblxuICBlbGVtZW50SXNGb3JiaWRkZW4oZWxlbWVudCkge1xuICAgIHJldHVybiB0aGlzLmZvcmJpZGRlbkVsZW1lbnRzLmluY2x1ZGVzKHRhZ05hbWUoZWxlbWVudCkpXG4gIH1cblxuICBlbGVtZW50SXNudFNlcmlhbGl6YWJsZShlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10cml4LXNlcmlhbGl6ZVwiKSA9PT0gXCJmYWxzZVwiICYmICFub2RlSXNBdHRhY2htZW50RWxlbWVudChlbGVtZW50KVxuICB9XG59XG5cbmNvbnN0IGNyZWF0ZUJvZHlFbGVtZW50Rm9ySFRNTCA9IGZ1bmN0aW9uKGh0bWwgPSBcIlwiKSB7XG4gIC8vIFJlbW92ZSBldmVyeXRoaW5nIGFmdGVyIDwvaHRtbD5cbiAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPFxcL2h0bWxbXj5dKj5bXl0qJC9pLCBcIjwvaHRtbD5cIilcbiAgY29uc3QgZG9jID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpXG4gIGRvYy5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbFxuXG4gIEFycmF5LmZyb20oZG9jLmhlYWQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlXCIpKS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudClcbiAgfSlcblxuICByZXR1cm4gZG9jLmJvZHlcbn1cbiIsICJpbXBvcnQgKiBhcyBjb25maWcgZnJvbSBcInRyaXgvY29uZmlnXCJcbmltcG9ydCB7IFpFUk9fV0lEVEhfU1BBQ0UgfSBmcm9tIFwidHJpeC9jb25zdGFudHNcIlxuaW1wb3J0IHsgY29weU9iamVjdCwgbWFrZUVsZW1lbnQgfSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuaW1wb3J0IE9iamVjdFZpZXcgZnJvbSBcInRyaXgvdmlld3Mvb2JqZWN0X3ZpZXdcIlxuaW1wb3J0IEhUTUxTYW5pdGl6ZXIgZnJvbSBcInRyaXgvbW9kZWxzL2h0bWxfc2FuaXRpemVyXCJcblxuY29uc3QgeyBjc3MgfSA9IGNvbmZpZ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdHRhY2htZW50VmlldyBleHRlbmRzIE9iamVjdFZpZXcge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5hdHRhY2htZW50ID0gdGhpcy5vYmplY3RcbiAgICB0aGlzLmF0dGFjaG1lbnQudXBsb2FkUHJvZ3Jlc3NEZWxlZ2F0ZSA9IHRoaXNcbiAgICB0aGlzLmF0dGFjaG1lbnRQaWVjZSA9IHRoaXMub3B0aW9ucy5waWVjZVxuICB9XG5cbiAgY3JlYXRlQ29udGVudE5vZGVzKCkge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgY3JlYXRlTm9kZXMoKSB7XG4gICAgbGV0IGlubmVyRWxlbWVudFxuICAgIGNvbnN0IGZpZ3VyZSA9IGlubmVyRWxlbWVudCA9IG1ha2VFbGVtZW50KHtcbiAgICAgIHRhZ05hbWU6IFwiZmlndXJlXCIsXG4gICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0Q2xhc3NOYW1lKCksXG4gICAgICBkYXRhOiB0aGlzLmdldERhdGEoKSxcbiAgICAgIGVkaXRhYmxlOiBmYWxzZSxcbiAgICB9KVxuXG4gICAgY29uc3QgaHJlZiA9IHRoaXMuZ2V0SHJlZigpXG4gICAgaWYgKGhyZWYpIHtcbiAgICAgIGlubmVyRWxlbWVudCA9IG1ha2VFbGVtZW50KHsgdGFnTmFtZTogXCJhXCIsIGVkaXRhYmxlOiBmYWxzZSwgYXR0cmlidXRlczogeyBocmVmLCB0YWJpbmRleDogLTEgfSB9KVxuICAgICAgZmlndXJlLmFwcGVuZENoaWxkKGlubmVyRWxlbWVudClcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hdHRhY2htZW50Lmhhc0NvbnRlbnQoKSkge1xuICAgICAgSFRNTFNhbml0aXplci5zZXRIVE1MKGlubmVyRWxlbWVudCwgdGhpcy5hdHRhY2htZW50LmdldENvbnRlbnQoKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jcmVhdGVDb250ZW50Tm9kZXMoKS5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIGlubmVyRWxlbWVudC5hcHBlbmRDaGlsZChub2RlKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpbm5lckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVDYXB0aW9uRWxlbWVudCgpKVxuXG4gICAgaWYgKHRoaXMuYXR0YWNobWVudC5pc1BlbmRpbmcoKSkge1xuICAgICAgdGhpcy5wcm9ncmVzc0VsZW1lbnQgPSBtYWtlRWxlbWVudCh7XG4gICAgICAgIHRhZ05hbWU6IFwicHJvZ3Jlc3NcIixcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGNsYXNzOiBjc3MuYXR0YWNobWVudFByb2dyZXNzLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLmF0dGFjaG1lbnQuZ2V0VXBsb2FkUHJvZ3Jlc3MoKSxcbiAgICAgICAgICBtYXg6IDEwMCxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHRyaXhNdXRhYmxlOiB0cnVlLFxuICAgICAgICAgIHRyaXhTdG9yZUtleTogWyBcInByb2dyZXNzRWxlbWVudFwiLCB0aGlzLmF0dGFjaG1lbnQuaWQgXS5qb2luKFwiL1wiKSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIGZpZ3VyZS5hcHBlbmRDaGlsZCh0aGlzLnByb2dyZXNzRWxlbWVudClcbiAgICB9XG5cbiAgICByZXR1cm4gWyBjcmVhdGVDdXJzb3JUYXJnZXQoXCJsZWZ0XCIpLCBmaWd1cmUsIGNyZWF0ZUN1cnNvclRhcmdldChcInJpZ2h0XCIpIF1cbiAgfVxuXG4gIGNyZWF0ZUNhcHRpb25FbGVtZW50KCkge1xuICAgIGNvbnN0IGZpZ2NhcHRpb24gPSBtYWtlRWxlbWVudCh7IHRhZ05hbWU6IFwiZmlnY2FwdGlvblwiLCBjbGFzc05hbWU6IGNzcy5hdHRhY2htZW50Q2FwdGlvbiB9KVxuICAgIGNvbnN0IGNhcHRpb24gPSB0aGlzLmF0dGFjaG1lbnRQaWVjZS5nZXRDYXB0aW9uKClcbiAgICBpZiAoY2FwdGlvbikge1xuICAgICAgZmlnY2FwdGlvbi5jbGFzc0xpc3QuYWRkKGAke2Nzcy5hdHRhY2htZW50Q2FwdGlvbn0tLWVkaXRlZGApXG4gICAgICBmaWdjYXB0aW9uLnRleHRDb250ZW50ID0gY2FwdGlvblxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbmFtZSwgc2l6ZVxuICAgICAgY29uc3QgY2FwdGlvbkNvbmZpZyA9IHRoaXMuZ2V0Q2FwdGlvbkNvbmZpZygpXG4gICAgICBpZiAoY2FwdGlvbkNvbmZpZy5uYW1lKSB7XG4gICAgICAgIG5hbWUgPSB0aGlzLmF0dGFjaG1lbnQuZ2V0RmlsZW5hbWUoKVxuICAgICAgfVxuICAgICAgaWYgKGNhcHRpb25Db25maWcuc2l6ZSkge1xuICAgICAgICBzaXplID0gdGhpcy5hdHRhY2htZW50LmdldEZvcm1hdHRlZEZpbGVzaXplKClcbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgY29uc3QgbmFtZUVsZW1lbnQgPSBtYWtlRWxlbWVudCh7IHRhZ05hbWU6IFwic3BhblwiLCBjbGFzc05hbWU6IGNzcy5hdHRhY2htZW50TmFtZSwgdGV4dENvbnRlbnQ6IG5hbWUgfSlcbiAgICAgICAgZmlnY2FwdGlvbi5hcHBlbmRDaGlsZChuYW1lRWxlbWVudClcbiAgICAgIH1cblxuICAgICAgaWYgKHNpemUpIHtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICBmaWdjYXB0aW9uLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiIFwiKSlcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaXplRWxlbWVudCA9IG1ha2VFbGVtZW50KHsgdGFnTmFtZTogXCJzcGFuXCIsIGNsYXNzTmFtZTogY3NzLmF0dGFjaG1lbnRTaXplLCB0ZXh0Q29udGVudDogc2l6ZSB9KVxuICAgICAgICBmaWdjYXB0aW9uLmFwcGVuZENoaWxkKHNpemVFbGVtZW50KVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWdjYXB0aW9uXG4gIH1cblxuICBnZXRDbGFzc05hbWUoKSB7XG4gICAgY29uc3QgbmFtZXMgPSBbIGNzcy5hdHRhY2htZW50LCBgJHtjc3MuYXR0YWNobWVudH0tLSR7dGhpcy5hdHRhY2htZW50LmdldFR5cGUoKX1gIF1cbiAgICBjb25zdCBleHRlbnNpb24gPSB0aGlzLmF0dGFjaG1lbnQuZ2V0RXh0ZW5zaW9uKClcbiAgICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgICBuYW1lcy5wdXNoKGAke2Nzcy5hdHRhY2htZW50fS0tJHtleHRlbnNpb259YClcbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzLmpvaW4oXCIgXCIpXG4gIH1cblxuICBnZXREYXRhKCkge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICB0cml4QXR0YWNobWVudDogSlNPTi5zdHJpbmdpZnkodGhpcy5hdHRhY2htZW50KSxcbiAgICAgIHRyaXhDb250ZW50VHlwZTogdGhpcy5hdHRhY2htZW50LmdldENvbnRlbnRUeXBlKCksXG4gICAgICB0cml4SWQ6IHRoaXMuYXR0YWNobWVudC5pZCxcbiAgICB9XG5cbiAgICBjb25zdCB7IGF0dHJpYnV0ZXMgfSA9IHRoaXMuYXR0YWNobWVudFBpZWNlXG4gICAgaWYgKCFhdHRyaWJ1dGVzLmlzRW1wdHkoKSkge1xuICAgICAgZGF0YS50cml4QXR0cmlidXRlcyA9IEpTT04uc3RyaW5naWZ5KGF0dHJpYnV0ZXMpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXR0YWNobWVudC5pc1BlbmRpbmcoKSkge1xuICAgICAgZGF0YS50cml4U2VyaWFsaXplID0gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgZ2V0SHJlZigpIHtcbiAgICBpZiAoIWh0bWxDb250YWluc1RhZ05hbWUodGhpcy5hdHRhY2htZW50LmdldENvbnRlbnQoKSwgXCJhXCIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRhY2htZW50LmdldEhyZWYoKVxuICAgIH1cbiAgfVxuXG4gIGdldENhcHRpb25Db25maWcoKSB7XG4gICAgY29uc3QgdHlwZSA9IHRoaXMuYXR0YWNobWVudC5nZXRUeXBlKClcbiAgICBjb25zdCBjYXB0aW9uQ29uZmlnID0gY29weU9iamVjdChjb25maWcuYXR0YWNobWVudHNbdHlwZV0/LmNhcHRpb24pXG4gICAgaWYgKHR5cGUgPT09IFwiZmlsZVwiKSB7XG4gICAgICBjYXB0aW9uQ29uZmlnLm5hbWUgPSB0cnVlXG4gICAgfVxuICAgIHJldHVybiBjYXB0aW9uQ29uZmlnXG4gIH1cblxuICBmaW5kUHJvZ3Jlc3NFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmZpbmRFbGVtZW50KCk/LnF1ZXJ5U2VsZWN0b3IoXCJwcm9ncmVzc1wiKVxuICB9XG5cbiAgLy8gQXR0YWNobWVudCBkZWxlZ2F0ZVxuXG4gIGF0dGFjaG1lbnREaWRDaGFuZ2VVcGxvYWRQcm9ncmVzcygpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuYXR0YWNobWVudC5nZXRVcGxvYWRQcm9ncmVzcygpXG4gICAgY29uc3QgcHJvZ3Jlc3NFbGVtZW50ID0gdGhpcy5maW5kUHJvZ3Jlc3NFbGVtZW50KClcbiAgICBpZiAocHJvZ3Jlc3NFbGVtZW50KSB7XG4gICAgICBwcm9ncmVzc0VsZW1lbnQudmFsdWUgPSB2YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBjcmVhdGVDdXJzb3JUYXJnZXQgPSAobmFtZSkgPT5cbiAgbWFrZUVsZW1lbnQoe1xuICAgIHRhZ05hbWU6IFwic3BhblwiLFxuICAgIHRleHRDb250ZW50OiBaRVJPX1dJRFRIX1NQQUNFLFxuICAgIGRhdGE6IHtcbiAgICAgIHRyaXhDdXJzb3JUYXJnZXQ6IG5hbWUsXG4gICAgICB0cml4U2VyaWFsaXplOiBmYWxzZSxcbiAgICB9LFxuICB9KVxuXG5jb25zdCBodG1sQ29udGFpbnNUYWdOYW1lID0gZnVuY3Rpb24oaHRtbCwgdGFnTmFtZSkge1xuICBjb25zdCBkaXYgPSBtYWtlRWxlbWVudChcImRpdlwiKVxuICBIVE1MU2FuaXRpemVyLnNldEhUTUwoZGl2LCBodG1sIHx8IFwiXCIpXG4gIHJldHVybiBkaXYucXVlcnlTZWxlY3Rvcih0YWdOYW1lKVxufVxuIiwgImltcG9ydCAqIGFzIGNvbmZpZyBmcm9tIFwidHJpeC9jb25maWdcIlxuaW1wb3J0IHsgbWFrZUVsZW1lbnQgfSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5pbXBvcnQgQXR0YWNobWVudFZpZXcgZnJvbSBcInRyaXgvdmlld3MvYXR0YWNobWVudF92aWV3XCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJldmlld2FibGVBdHRhY2htZW50VmlldyBleHRlbmRzIEF0dGFjaG1lbnRWaWV3IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMuYXR0YWNobWVudC5wcmV2aWV3RGVsZWdhdGUgPSB0aGlzXG4gIH1cblxuICBjcmVhdGVDb250ZW50Tm9kZXMoKSB7XG4gICAgdGhpcy5pbWFnZSA9IG1ha2VFbGVtZW50KHtcbiAgICAgIHRhZ05hbWU6IFwiaW1nXCIsXG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIHNyYzogXCJcIixcbiAgICAgIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHRyaXhNdXRhYmxlOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgdGhpcy5yZWZyZXNoKHRoaXMuaW1hZ2UpXG4gICAgcmV0dXJuIFsgdGhpcy5pbWFnZSBdXG4gIH1cblxuICBjcmVhdGVDYXB0aW9uRWxlbWVudCgpIHtcbiAgICBjb25zdCBmaWdjYXB0aW9uID0gc3VwZXIuY3JlYXRlQ2FwdGlvbkVsZW1lbnQoLi4uYXJndW1lbnRzKVxuICAgIGlmICghZmlnY2FwdGlvbi50ZXh0Q29udGVudCkge1xuICAgICAgZmlnY2FwdGlvbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRyaXgtcGxhY2Vob2xkZXJcIiwgY29uZmlnLmxhbmcuY2FwdGlvblBsYWNlaG9sZGVyKVxuICAgIH1cbiAgICByZXR1cm4gZmlnY2FwdGlvblxuICB9XG5cbiAgcmVmcmVzaChpbWFnZSkge1xuICAgIGlmICghaW1hZ2UpIHsgaW1hZ2UgPSB0aGlzLmZpbmRFbGVtZW50KCk/LnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIikgfVxuICAgIGlmIChpbWFnZSkge1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlQXR0cmlidXRlc0ZvckltYWdlKGltYWdlKVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUF0dHJpYnV0ZXNGb3JJbWFnZShpbWFnZSkge1xuICAgIGNvbnN0IHVybCA9IHRoaXMuYXR0YWNobWVudC5nZXRVUkwoKVxuICAgIGNvbnN0IHByZXZpZXdVUkwgPSB0aGlzLmF0dGFjaG1lbnQuZ2V0UHJldmlld1VSTCgpXG4gICAgaW1hZ2Uuc3JjID0gcHJldmlld1VSTCB8fCB1cmxcblxuICAgIGlmIChwcmV2aWV3VVJMID09PSB1cmwpIHtcbiAgICAgIGltYWdlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtdHJpeC1zZXJpYWxpemVkLWF0dHJpYnV0ZXNcIilcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2VyaWFsaXplZEF0dHJpYnV0ZXMgPSBKU09OLnN0cmluZ2lmeSh7IHNyYzogdXJsIH0pXG4gICAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRyaXgtc2VyaWFsaXplZC1hdHRyaWJ1dGVzXCIsIHNlcmlhbGl6ZWRBdHRyaWJ1dGVzKVxuICAgIH1cblxuICAgIGNvbnN0IHdpZHRoID0gdGhpcy5hdHRhY2htZW50LmdldFdpZHRoKClcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmF0dGFjaG1lbnQuZ2V0SGVpZ2h0KClcblxuICAgIGlmICh3aWR0aCAhPSBudWxsKSB7XG4gICAgICBpbWFnZS53aWR0aCA9IHdpZHRoXG4gICAgfVxuICAgIGlmIChoZWlnaHQgIT0gbnVsbCkge1xuICAgICAgaW1hZ2UuaGVpZ2h0ID0gaGVpZ2h0XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmVLZXkgPSBbIFwiaW1hZ2VFbGVtZW50XCIsIHRoaXMuYXR0YWNobWVudC5pZCwgaW1hZ2Uuc3JjLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0IF0uam9pbihcIi9cIilcbiAgICBpbWFnZS5kYXRhc2V0LnRyaXhTdG9yZUtleSA9IHN0b3JlS2V5XG4gIH1cblxuICAvLyBBdHRhY2htZW50IGRlbGVnYXRlXG5cbiAgYXR0YWNobWVudERpZENoYW5nZUF0dHJpYnV0ZXMoKSB7XG4gICAgdGhpcy5yZWZyZXNoKHRoaXMuaW1hZ2UpXG4gICAgcmV0dXJuIHRoaXMucmVmcmVzaCgpXG4gIH1cbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZVxuICAgIG5vLXVzZWxlc3MtZXNjYXBlLFxuICAgIG5vLXZhcixcbiovXG5pbXBvcnQgeyBOT05fQlJFQUtJTkdfU1BBQ0UgfSBmcm9tIFwidHJpeC9jb25zdGFudHNcIlxuXG5pbXBvcnQgT2JqZWN0VmlldyBmcm9tIFwidHJpeC92aWV3cy9vYmplY3Rfdmlld1wiXG5pbXBvcnQgQXR0YWNobWVudFZpZXcgZnJvbSBcInRyaXgvdmlld3MvYXR0YWNobWVudF92aWV3XCJcbmltcG9ydCBQcmV2aWV3YWJsZUF0dGFjaG1lbnRWaWV3IGZyb20gXCJ0cml4L3ZpZXdzL3ByZXZpZXdhYmxlX2F0dGFjaG1lbnRfdmlld1wiXG5cbmltcG9ydCB7IGZpbmRJbm5lckVsZW1lbnQsIGdldFRleHRDb25maWcsIG1ha2VFbGVtZW50IH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGllY2VWaWV3IGV4dGVuZHMgT2JqZWN0VmlldyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLnBpZWNlID0gdGhpcy5vYmplY3RcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB0aGlzLnBpZWNlLmdldEF0dHJpYnV0ZXMoKVxuICAgIHRoaXMudGV4dENvbmZpZyA9IHRoaXMub3B0aW9ucy50ZXh0Q29uZmlnXG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5vcHRpb25zLmNvbnRleHRcblxuICAgIGlmICh0aGlzLnBpZWNlLmF0dGFjaG1lbnQpIHtcbiAgICAgIHRoaXMuYXR0YWNobWVudCA9IHRoaXMucGllY2UuYXR0YWNobWVudFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0cmluZyA9IHRoaXMucGllY2UudG9TdHJpbmcoKVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZU5vZGVzKCkge1xuICAgIGxldCBub2RlcyA9IHRoaXMuYXR0YWNobWVudCA/IHRoaXMuY3JlYXRlQXR0YWNobWVudE5vZGVzKCkgOiB0aGlzLmNyZWF0ZVN0cmluZ05vZGVzKClcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5jcmVhdGVFbGVtZW50KClcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgY29uc3QgaW5uZXJFbGVtZW50ID0gZmluZElubmVyRWxlbWVudChlbGVtZW50KVxuICAgICAgQXJyYXkuZnJvbShub2RlcykuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICBpbm5lckVsZW1lbnQuYXBwZW5kQ2hpbGQobm9kZSlcbiAgICAgIH0pXG4gICAgICBub2RlcyA9IFsgZWxlbWVudCBdXG4gICAgfVxuICAgIHJldHVybiBub2Rlc1xuICB9XG5cbiAgY3JlYXRlQXR0YWNobWVudE5vZGVzKCkge1xuICAgIGNvbnN0IGNvbnN0cnVjdG9yID0gdGhpcy5hdHRhY2htZW50LmlzUHJldmlld2FibGUoKSA/IFByZXZpZXdhYmxlQXR0YWNobWVudFZpZXcgOiBBdHRhY2htZW50Vmlld1xuXG4gICAgY29uc3QgdmlldyA9IHRoaXMuY3JlYXRlQ2hpbGRWaWV3KGNvbnN0cnVjdG9yLCB0aGlzLnBpZWNlLmF0dGFjaG1lbnQsIHsgcGllY2U6IHRoaXMucGllY2UgfSlcbiAgICByZXR1cm4gdmlldy5nZXROb2RlcygpXG4gIH1cblxuICBjcmVhdGVTdHJpbmdOb2RlcygpIHtcbiAgICBpZiAodGhpcy50ZXh0Q29uZmlnPy5wbGFpbnRleHQpIHtcbiAgICAgIHJldHVybiBbIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuc3RyaW5nKSBdXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5vZGVzID0gW11cbiAgICAgIGNvbnN0IGl0ZXJhYmxlID0gdGhpcy5zdHJpbmcuc3BsaXQoXCJcXG5cIilcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBpdGVyYWJsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29uc3Qgc3Vic3RyaW5nID0gaXRlcmFibGVbaW5kZXhdXG4gICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICBjb25zdCBlbGVtZW50ID0gbWFrZUVsZW1lbnQoXCJiclwiKVxuICAgICAgICAgIG5vZGVzLnB1c2goZWxlbWVudClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdWJzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMucHJlc2VydmVTcGFjZXMoc3Vic3RyaW5nKSlcbiAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBub2Rlc1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUVsZW1lbnQoKSB7XG4gICAgbGV0IGVsZW1lbnQsIGtleSwgdmFsdWVcbiAgICBjb25zdCBzdHlsZXMgPSB7fVxuXG4gICAgZm9yIChrZXkgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuYXR0cmlidXRlc1trZXldXG4gICAgICBjb25zdCBjb25maWcgPSBnZXRUZXh0Q29uZmlnKGtleSlcbiAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy50YWdOYW1lKSB7XG4gICAgICAgICAgdmFyIGlubmVyRWxlbWVudFxuICAgICAgICAgIGNvbnN0IHBlbmRpbmdFbGVtZW50ID0gbWFrZUVsZW1lbnQoY29uZmlnLnRhZ05hbWUpXG5cbiAgICAgICAgICBpZiAoaW5uZXJFbGVtZW50KSB7XG4gICAgICAgICAgICBpbm5lckVsZW1lbnQuYXBwZW5kQ2hpbGQocGVuZGluZ0VsZW1lbnQpXG4gICAgICAgICAgICBpbm5lckVsZW1lbnQgPSBwZW5kaW5nRWxlbWVudFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gaW5uZXJFbGVtZW50ID0gcGVuZGluZ0VsZW1lbnRcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLnN0eWxlUHJvcGVydHkpIHtcbiAgICAgICAgICBzdHlsZXNbY29uZmlnLnN0eWxlUHJvcGVydHldID0gdmFsdWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuc3R5bGUpIHtcbiAgICAgICAgICBmb3IgKGtleSBpbiBjb25maWcuc3R5bGUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29uZmlnLnN0eWxlW2tleV1cbiAgICAgICAgICAgIHN0eWxlc1trZXldID0gdmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoc3R5bGVzKS5sZW5ndGgpIHtcbiAgICAgIGlmICghZWxlbWVudCkgeyBlbGVtZW50ID0gbWFrZUVsZW1lbnQoXCJzcGFuXCIpIH1cbiAgICAgIGZvciAoa2V5IGluIHN0eWxlcykge1xuICAgICAgICB2YWx1ZSA9IHN0eWxlc1trZXldXG4gICAgICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50XG4gIH1cblxuICBjcmVhdGVDb250YWluZXJFbGVtZW50KCkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmF0dHJpYnV0ZXNba2V5XVxuICAgICAgY29uc3QgY29uZmlnID0gZ2V0VGV4dENvbmZpZyhrZXkpXG4gICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcuZ3JvdXBUYWdOYW1lKSB7XG4gICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHt9XG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gdmFsdWVcbiAgICAgICAgICByZXR1cm4gbWFrZUVsZW1lbnQoY29uZmlnLmdyb3VwVGFnTmFtZSwgYXR0cmlidXRlcylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByZXNlcnZlU3BhY2VzKHN0cmluZykge1xuICAgIGlmICh0aGlzLmNvbnRleHQuaXNMYXN0KSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXFwgJC8sIE5PTl9CUkVBS0lOR19TUEFDRSlcbiAgICB9XG5cbiAgICBzdHJpbmcgPSBzdHJpbmdcbiAgICAgIC5yZXBsYWNlKC8oXFxTKVxcIHszfShcXFMpL2csIGAkMSAke05PTl9CUkVBS0lOR19TUEFDRX0gJDJgKVxuICAgICAgLnJlcGxhY2UoL1xcIHsyfS9nLCBgJHtOT05fQlJFQUtJTkdfU1BBQ0V9IGApXG4gICAgICAucmVwbGFjZSgvXFwgezJ9L2csIGAgJHtOT05fQlJFQUtJTkdfU1BBQ0V9YClcblxuICAgIGlmICh0aGlzLmNvbnRleHQuaXNGaXJzdCB8fCB0aGlzLmNvbnRleHQuZm9sbG93c1doaXRlc3BhY2UpIHtcbiAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9eXFwgLywgTk9OX0JSRUFLSU5HX1NQQUNFKVxuICAgIH1cblxuICAgIHJldHVybiBzdHJpbmdcbiAgfVxufVxuIiwgIi8qIGVzbGludC1kaXNhYmxlXG4gICAgbm8tdmFyLFxuKi9cbmltcG9ydCBPYmplY3RWaWV3IGZyb20gXCJ0cml4L3ZpZXdzL29iamVjdF92aWV3XCJcbmltcG9ydCBPYmplY3RHcm91cCBmcm9tIFwidHJpeC9jb3JlL2NvbGxlY3Rpb25zL29iamVjdF9ncm91cFwiXG5pbXBvcnQgUGllY2VWaWV3IGZyb20gXCJ0cml4L3ZpZXdzL3BpZWNlX3ZpZXdcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0VmlldyBleHRlbmRzIE9iamVjdFZpZXcge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy50ZXh0ID0gdGhpcy5vYmplY3RcbiAgICB0aGlzLnRleHRDb25maWcgPSB0aGlzLm9wdGlvbnMudGV4dENvbmZpZ1xuICB9XG5cbiAgY3JlYXRlTm9kZXMoKSB7XG4gICAgY29uc3Qgbm9kZXMgPSBbXVxuICAgIGNvbnN0IHBpZWNlcyA9IE9iamVjdEdyb3VwLmdyb3VwT2JqZWN0cyh0aGlzLmdldFBpZWNlcygpKVxuICAgIGNvbnN0IGxhc3RJbmRleCA9IHBpZWNlcy5sZW5ndGggLSAxXG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcGllY2VzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgcGllY2UgPSBwaWVjZXNbaW5kZXhdXG4gICAgICBjb25zdCBjb250ZXh0ID0ge31cbiAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICBjb250ZXh0LmlzRmlyc3QgPSB0cnVlXG4gICAgICB9XG4gICAgICBpZiAoaW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgICBjb250ZXh0LmlzTGFzdCA9IHRydWVcbiAgICAgIH1cbiAgICAgIGlmIChlbmRzV2l0aFdoaXRlc3BhY2UocHJldmlvdXNQaWVjZSkpIHtcbiAgICAgICAgY29udGV4dC5mb2xsb3dzV2hpdGVzcGFjZSA9IHRydWVcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmlldyA9IHRoaXMuZmluZE9yQ3JlYXRlQ2FjaGVkQ2hpbGRWaWV3KFBpZWNlVmlldywgcGllY2UsIHsgdGV4dENvbmZpZzogdGhpcy50ZXh0Q29uZmlnLCBjb250ZXh0IH0pXG4gICAgICBub2Rlcy5wdXNoKC4uLkFycmF5LmZyb20odmlldy5nZXROb2RlcygpIHx8IFtdKSlcblxuICAgICAgdmFyIHByZXZpb3VzUGllY2UgPSBwaWVjZVxuICAgIH1cbiAgICByZXR1cm4gbm9kZXNcbiAgfVxuXG4gIGdldFBpZWNlcygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnRleHQuZ2V0UGllY2VzKCkpLmZpbHRlcigocGllY2UpID0+ICFwaWVjZS5oYXNBdHRyaWJ1dGUoXCJibG9ja0JyZWFrXCIpKVxuICB9XG59XG5cbmNvbnN0IGVuZHNXaXRoV2hpdGVzcGFjZSA9IChwaWVjZSkgPT4gL1xccyQvLnRlc3QocGllY2U/LnRvU3RyaW5nKCkpXG4iLCAiaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5pbXBvcnQgT2JqZWN0VmlldyBmcm9tIFwidHJpeC92aWV3cy9vYmplY3Rfdmlld1wiXG5pbXBvcnQgVGV4dFZpZXcgZnJvbSBcInRyaXgvdmlld3MvdGV4dF92aWV3XCJcblxuaW1wb3J0IHsgZ2V0QmxvY2tDb25maWcsIG1ha2VFbGVtZW50IH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcbmNvbnN0IHsgY3NzIH0gPSBjb25maWdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmxvY2tWaWV3IGV4dGVuZHMgT2JqZWN0VmlldyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLmJsb2NrID0gdGhpcy5vYmplY3RcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB0aGlzLmJsb2NrLmdldEF0dHJpYnV0ZXMoKVxuICB9XG5cbiAgY3JlYXRlTm9kZXMoKSB7XG4gICAgY29uc3QgY29tbWVudCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJibG9ja1wiKVxuICAgIGNvbnN0IG5vZGVzID0gWyBjb21tZW50IF1cbiAgICBpZiAodGhpcy5ibG9jay5pc0VtcHR5KCkpIHtcbiAgICAgIG5vZGVzLnB1c2gobWFrZUVsZW1lbnQoXCJiclwiKSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdGV4dENvbmZpZyA9IGdldEJsb2NrQ29uZmlnKHRoaXMuYmxvY2suZ2V0TGFzdEF0dHJpYnV0ZSgpKT8udGV4dFxuICAgICAgY29uc3QgdGV4dFZpZXcgPSB0aGlzLmZpbmRPckNyZWF0ZUNhY2hlZENoaWxkVmlldyhUZXh0VmlldywgdGhpcy5ibG9jay50ZXh0LCB7IHRleHRDb25maWcgfSlcbiAgICAgIG5vZGVzLnB1c2goLi4uQXJyYXkuZnJvbSh0ZXh0Vmlldy5nZXROb2RlcygpIHx8IFtdKSlcbiAgICAgIGlmICh0aGlzLnNob3VsZEFkZEV4dHJhTmV3bGluZUVsZW1lbnQoKSkge1xuICAgICAgICBub2Rlcy5wdXNoKG1ha2VFbGVtZW50KFwiYnJcIikpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBub2Rlc1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgYXR0cmlidXRlc1xuICAgICAgY29uc3QgeyB0YWdOYW1lIH0gPSBjb25maWcuYmxvY2tBdHRyaWJ1dGVzLmRlZmF1bHRcbiAgICAgIGlmICh0aGlzLmJsb2NrLmlzUlRMKCkpIHtcbiAgICAgICAgYXR0cmlidXRlcyA9IHsgZGlyOiBcInJ0bFwiIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgZWxlbWVudCA9IG1ha2VFbGVtZW50KHsgdGFnTmFtZSwgYXR0cmlidXRlcyB9KVxuICAgICAgbm9kZXMuZm9yRWFjaCgobm9kZSkgPT4gZWxlbWVudC5hcHBlbmRDaGlsZChub2RlKSlcbiAgICAgIHJldHVybiBbIGVsZW1lbnQgXVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUNvbnRhaW5lckVsZW1lbnQoZGVwdGgpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgICBsZXQgY2xhc3NOYW1lXG4gICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IHRoaXMuYXR0cmlidXRlc1tkZXB0aF1cblxuICAgIGNvbnN0IHsgdGFnTmFtZSwgaHRtbEF0dHJpYnV0ZXMgPSBbXSB9ID0gZ2V0QmxvY2tDb25maWcoYXR0cmlidXRlTmFtZSlcblxuICAgIGlmIChkZXB0aCA9PT0gMCAmJiB0aGlzLmJsb2NrLmlzUlRMKCkpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlcywgeyBkaXI6IFwicnRsXCIgfSlcbiAgICB9XG5cbiAgICBpZiAoYXR0cmlidXRlTmFtZSA9PT0gXCJhdHRhY2htZW50R2FsbGVyeVwiKSB7XG4gICAgICBjb25zdCBzaXplID0gdGhpcy5ibG9jay5nZXRCbG9ja0JyZWFrUG9zaXRpb24oKVxuICAgICAgY2xhc3NOYW1lID0gYCR7Y3NzLmF0dGFjaG1lbnRHYWxsZXJ5fSAke2Nzcy5hdHRhY2htZW50R2FsbGVyeX0tLSR7c2l6ZX1gXG4gICAgfVxuXG4gICAgT2JqZWN0LmVudHJpZXModGhpcy5ibG9jay5odG1sQXR0cmlidXRlcykuZm9yRWFjaCgoWyBuYW1lLCB2YWx1ZSBdKSA9PiB7XG4gICAgICBpZiAoaHRtbEF0dHJpYnV0ZXMuaW5jbHVkZXMobmFtZSkpIHtcbiAgICAgICAgYXR0cmlidXRlc1tuYW1lXSA9IHZhbHVlXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiBtYWtlRWxlbWVudCh7IHRhZ05hbWUsIGNsYXNzTmFtZSwgYXR0cmlidXRlcyB9KVxuICB9XG5cbiAgLy8gQSBzaW5nbGUgPGJyPiBhdCB0aGUgZW5kIG9mIGEgYmxvY2sgZWxlbWVudCBoYXMgbm8gdmlzdWFsIHJlcHJlc2VudGF0aW9uXG4gIC8vIHNvIGFkZCBhbiBleHRyYSBvbmUuXG4gIHNob3VsZEFkZEV4dHJhTmV3bGluZUVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIC9cXG5cXG4kLy50ZXN0KHRoaXMuYmxvY2sudG9TdHJpbmcoKSlcbiAgfVxufVxuIiwgImltcG9ydCB7IG1ha2VFbGVtZW50IH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuaW1wb3J0IEVsZW1lbnRTdG9yZSBmcm9tIFwidHJpeC9jb3JlL2NvbGxlY3Rpb25zL2VsZW1lbnRfc3RvcmVcIlxuaW1wb3J0IE9iamVjdEdyb3VwIGZyb20gXCJ0cml4L2NvcmUvY29sbGVjdGlvbnMvb2JqZWN0X2dyb3VwXCJcbmltcG9ydCBPYmplY3RWaWV3IGZyb20gXCJ0cml4L3ZpZXdzL29iamVjdF92aWV3XCJcbmltcG9ydCBCbG9ja1ZpZXcgZnJvbSBcInRyaXgvdmlld3MvYmxvY2tfdmlld1wiXG5cbmltcG9ydCB7IGRlZmVyIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9jdW1lbnRWaWV3IGV4dGVuZHMgT2JqZWN0VmlldyB7XG4gIHN0YXRpYyByZW5kZXIoZG9jdW1lbnQpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gbWFrZUVsZW1lbnQoXCJkaXZcIilcbiAgICBjb25zdCB2aWV3ID0gbmV3IHRoaXMoZG9jdW1lbnQsIHsgZWxlbWVudCB9KVxuICAgIHZpZXcucmVuZGVyKClcbiAgICB2aWV3LnN5bmMoKVxuICAgIHJldHVybiBlbGVtZW50XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5lbGVtZW50ID0gdGhpcy5vcHRpb25zLmVsZW1lbnRcbiAgICB0aGlzLmVsZW1lbnRTdG9yZSA9IG5ldyBFbGVtZW50U3RvcmUoKVxuICAgIHRoaXMuc2V0RG9jdW1lbnQodGhpcy5vYmplY3QpXG4gIH1cblxuICBzZXREb2N1bWVudChkb2N1bWVudCkge1xuICAgIGlmICghZG9jdW1lbnQuaXNFcXVhbFRvKHRoaXMuZG9jdW1lbnQpKSB7XG4gICAgICB0aGlzLmRvY3VtZW50ID0gdGhpcy5vYmplY3QgPSBkb2N1bWVudFxuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmNoaWxkVmlld3MgPSBbXVxuXG4gICAgdGhpcy5zaGFkb3dFbGVtZW50ID0gbWFrZUVsZW1lbnQoXCJkaXZcIilcblxuICAgIGlmICghdGhpcy5kb2N1bWVudC5pc0VtcHR5KCkpIHtcbiAgICAgIGNvbnN0IG9iamVjdHMgPSBPYmplY3RHcm91cC5ncm91cE9iamVjdHModGhpcy5kb2N1bWVudC5nZXRCbG9ja3MoKSwgeyBhc1RyZWU6IHRydWUgfSlcblxuICAgICAgQXJyYXkuZnJvbShvYmplY3RzKS5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMuZmluZE9yQ3JlYXRlQ2FjaGVkQ2hpbGRWaWV3KEJsb2NrVmlldywgb2JqZWN0KVxuICAgICAgICBBcnJheS5mcm9tKHZpZXcuZ2V0Tm9kZXMoKSkubWFwKChub2RlKSA9PiB0aGlzLnNoYWRvd0VsZW1lbnQuYXBwZW5kQ2hpbGQobm9kZSkpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGlzU3luY2VkKCkge1xuICAgIHJldHVybiBlbGVtZW50c0hhdmVFcXVhbEhUTUwodGhpcy5zaGFkb3dFbGVtZW50LCB0aGlzLmVsZW1lbnQpXG4gIH1cblxuICBzeW5jKCkge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gdGhpcy5jcmVhdGVEb2N1bWVudEZyYWdtZW50Rm9yU3luYygpXG4gICAgd2hpbGUgKHRoaXMuZWxlbWVudC5sYXN0Q2hpbGQpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQubGFzdENoaWxkKVxuICAgIH1cbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpXG4gICAgcmV0dXJuIHRoaXMuZGlkU3luYygpXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgZGlkU3luYygpIHtcbiAgICB0aGlzLmVsZW1lbnRTdG9yZS5yZXNldChmaW5kU3RvcmVkRWxlbWVudHModGhpcy5lbGVtZW50KSlcbiAgICByZXR1cm4gZGVmZXIoKCkgPT4gdGhpcy5nYXJiYWdlQ29sbGVjdENhY2hlZFZpZXdzKCkpXG4gIH1cblxuICBjcmVhdGVEb2N1bWVudEZyYWdtZW50Rm9yU3luYygpIHtcbiAgICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKVxuXG4gICAgQXJyYXkuZnJvbSh0aGlzLnNoYWRvd0VsZW1lbnQuY2hpbGROb2RlcykuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQobm9kZS5jbG9uZU5vZGUodHJ1ZSkpXG4gICAgfSlcblxuICAgIEFycmF5LmZyb20oZmluZFN0b3JlZEVsZW1lbnRzKGZyYWdtZW50KSkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgY29uc3Qgc3RvcmVkRWxlbWVudCA9IHRoaXMuZWxlbWVudFN0b3JlLnJlbW92ZShlbGVtZW50KVxuICAgICAgaWYgKHN0b3JlZEVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChzdG9yZWRFbGVtZW50LCBlbGVtZW50KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gZnJhZ21lbnRcbiAgfVxufVxuXG5jb25zdCBmaW5kU3RvcmVkRWxlbWVudHMgPSAoZWxlbWVudCkgPT4gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtdHJpeC1zdG9yZS1rZXldXCIpXG5cbmNvbnN0IGVsZW1lbnRzSGF2ZUVxdWFsSFRNTCA9IChlbGVtZW50LCBvdGhlckVsZW1lbnQpID0+XG4gIGlnbm9yZVNwYWNlcyhlbGVtZW50LmlubmVySFRNTCkgPT09IGlnbm9yZVNwYWNlcyhvdGhlckVsZW1lbnQuaW5uZXJIVE1MKVxuXG5jb25zdCBpZ25vcmVTcGFjZXMgPSAoaHRtbCkgPT4gaHRtbC5yZXBsYWNlKC8mbmJzcDsvZywgXCIgXCIpXG4iLCAiaW1wb3J0IFRyaXhPYmplY3QgZnJvbSBcInRyaXgvY29yZS9vYmplY3RcIiAvLyBEb24ndCBvdmVycmlkZSB3aW5kb3cuT2JqZWN0XG5pbXBvcnQgSGFzaCBmcm9tIFwidHJpeC9jb3JlL2NvbGxlY3Rpb25zL2hhc2hcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaWVjZSBleHRlbmRzIFRyaXhPYmplY3Qge1xuICBzdGF0aWMgdHlwZXMgPSB7fVxuXG4gIHN0YXRpYyByZWdpc3RlclR5cGUodHlwZSwgY29uc3RydWN0b3IpIHtcbiAgICBjb25zdHJ1Y3Rvci50eXBlID0gdHlwZVxuICAgIHRoaXMudHlwZXNbdHlwZV0gPSBjb25zdHJ1Y3RvclxuICB9XG5cbiAgc3RhdGljIGZyb21KU09OKHBpZWNlSlNPTikge1xuICAgIGNvbnN0IGNvbnN0cnVjdG9yID0gdGhpcy50eXBlc1twaWVjZUpTT04udHlwZV1cbiAgICBpZiAoY29uc3RydWN0b3IpIHtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5mcm9tSlNPTihwaWVjZUpTT04pXG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IodmFsdWUsIGF0dHJpYnV0ZXMgPSB7fSkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBIYXNoLmJveChhdHRyaWJ1dGVzKVxuICB9XG5cbiAgY29weVdpdGhBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5nZXRWYWx1ZSgpLCBhdHRyaWJ1dGVzKVxuICB9XG5cbiAgY29weVdpdGhBZGRpdGlvbmFsQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhBdHRyaWJ1dGVzKHRoaXMuYXR0cmlidXRlcy5tZXJnZShhdHRyaWJ1dGVzKSlcbiAgfVxuXG4gIGNvcHlXaXRob3V0QXR0cmlidXRlKGF0dHJpYnV0ZSkge1xuICAgIHJldHVybiB0aGlzLmNvcHlXaXRoQXR0cmlidXRlcyh0aGlzLmF0dHJpYnV0ZXMucmVtb3ZlKGF0dHJpYnV0ZSkpXG4gIH1cblxuICBjb3B5KCkge1xuICAgIHJldHVybiB0aGlzLmNvcHlXaXRoQXR0cmlidXRlcyh0aGlzLmF0dHJpYnV0ZXMpXG4gIH1cblxuICBnZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXQoYXR0cmlidXRlKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlc0hhc2goKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlc1xuICB9XG5cbiAgZ2V0QXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLnRvT2JqZWN0KClcbiAgfVxuXG4gIGhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmhhcyhhdHRyaWJ1dGUpXG4gIH1cblxuICBoYXNTYW1lU3RyaW5nVmFsdWVBc1BpZWNlKHBpZWNlKSB7XG4gICAgcmV0dXJuIHBpZWNlICYmIHRoaXMudG9TdHJpbmcoKSA9PT0gcGllY2UudG9TdHJpbmcoKVxuICB9XG5cbiAgaGFzU2FtZUF0dHJpYnV0ZXNBc1BpZWNlKHBpZWNlKSB7XG4gICAgcmV0dXJuIHBpZWNlICYmICh0aGlzLmF0dHJpYnV0ZXMgPT09IHBpZWNlLmF0dHJpYnV0ZXMgfHwgdGhpcy5hdHRyaWJ1dGVzLmlzRXF1YWxUbyhwaWVjZS5hdHRyaWJ1dGVzKSlcbiAgfVxuXG4gIGlzQmxvY2tCcmVhaygpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlzRXF1YWxUbyhwaWVjZSkge1xuICAgIHJldHVybiAoXG4gICAgICBzdXBlci5pc0VxdWFsVG8oLi4uYXJndW1lbnRzKSB8fFxuICAgICAgdGhpcy5oYXNTYW1lQ29uc3RydWN0b3JBcyhwaWVjZSkgJiZcbiAgICAgICAgdGhpcy5oYXNTYW1lU3RyaW5nVmFsdWVBc1BpZWNlKHBpZWNlKSAmJlxuICAgICAgICB0aGlzLmhhc1NhbWVBdHRyaWJ1dGVzQXNQaWVjZShwaWVjZSlcbiAgICApXG4gIH1cblxuICBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMFxuICB9XG5cbiAgaXNTZXJpYWxpemFibGUoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdGhpcy5jb25zdHJ1Y3Rvci50eXBlLFxuICAgICAgYXR0cmlidXRlczogdGhpcy5nZXRBdHRyaWJ1dGVzKCksXG4gICAgfVxuICB9XG5cbiAgY29udGVudHNGb3JJbnNwZWN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0aGlzLmNvbnN0cnVjdG9yLnR5cGUsXG4gICAgICBhdHRyaWJ1dGVzOiB0aGlzLmF0dHJpYnV0ZXMuaW5zcGVjdCgpLFxuICAgIH1cbiAgfVxuXG4gIC8vIEdyb3VwaW5nXG5cbiAgY2FuQmVHcm91cGVkKCkge1xuICAgIHJldHVybiB0aGlzLmhhc0F0dHJpYnV0ZShcImhyZWZcIilcbiAgfVxuXG4gIGNhbkJlR3JvdXBlZFdpdGgocGllY2UpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBwaWVjZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpXG4gIH1cblxuICAvLyBTcGxpdHRhYmxlXG5cbiAgZ2V0TGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aFxuICB9XG5cbiAgY2FuQmVDb25zb2xpZGF0ZWRXaXRoKHBpZWNlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cbiIsICJpbXBvcnQgT3BlcmF0aW9uIGZyb20gXCJ0cml4L2NvcmUvdXRpbGl0aWVzL29wZXJhdGlvblwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlUHJlbG9hZE9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHVybCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLnVybCA9IHVybFxuICB9XG5cbiAgcGVyZm9ybShjYWxsYmFjaykge1xuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKClcblxuICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGltYWdlLndpZHRoID0gdGhpcy53aWR0aCA9IGltYWdlLm5hdHVyYWxXaWR0aFxuICAgICAgaW1hZ2UuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgPSBpbWFnZS5uYXR1cmFsSGVpZ2h0XG4gICAgICByZXR1cm4gY2FsbGJhY2sodHJ1ZSwgaW1hZ2UpXG4gICAgfVxuXG4gICAgaW1hZ2Uub25lcnJvciA9ICgpID0+IGNhbGxiYWNrKGZhbHNlKVxuXG4gICAgaW1hZ2Uuc3JjID0gdGhpcy51cmxcbiAgfVxufVxuIiwgImltcG9ydCAqIGFzIGNvbmZpZyBmcm9tIFwidHJpeC9jb25maWdcIlxuaW1wb3J0IFRyaXhPYmplY3QgZnJvbSBcInRyaXgvY29yZS9vYmplY3RcIiAvLyBEb24ndCBvdmVycmlkZSB3aW5kb3cuT2JqZWN0XG5pbXBvcnQgSGFzaCBmcm9tIFwidHJpeC9jb3JlL2NvbGxlY3Rpb25zL2hhc2hcIlxuaW1wb3J0IEltYWdlUHJlbG9hZE9wZXJhdGlvbiBmcm9tIFwidHJpeC9vcGVyYXRpb25zL2ltYWdlX3ByZWxvYWRfb3BlcmF0aW9uXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXR0YWNobWVudCBleHRlbmRzIFRyaXhPYmplY3Qge1xuICBzdGF0aWMgcHJldmlld2FibGVQYXR0ZXJuID0gL15pbWFnZShcXC8oZ2lmfHBuZ3x3ZWJwfGpwZT9nKXwkKS9cblxuICBzdGF0aWMgYXR0YWNobWVudEZvckZpbGUoZmlsZSkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXNGb3JGaWxlKGZpbGUpXG4gICAgY29uc3QgYXR0YWNobWVudCA9IG5ldyB0aGlzKGF0dHJpYnV0ZXMpXG4gICAgYXR0YWNobWVudC5zZXRGaWxlKGZpbGUpXG4gICAgcmV0dXJuIGF0dGFjaG1lbnRcbiAgfVxuXG4gIHN0YXRpYyBhdHRyaWJ1dGVzRm9yRmlsZShmaWxlKSB7XG4gICAgcmV0dXJuIG5ldyBIYXNoKHtcbiAgICAgIGZpbGVuYW1lOiBmaWxlLm5hbWUsXG4gICAgICBmaWxlc2l6ZTogZmlsZS5zaXplLFxuICAgICAgY29udGVudFR5cGU6IGZpbGUudHlwZSxcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGZyb21KU09OKGF0dGFjaG1lbnRKU09OKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKGF0dGFjaG1lbnRKU09OKVxuICB9XG5cbiAgY29uc3RydWN0b3IoYXR0cmlidXRlcyA9IHt9KSB7XG4gICAgc3VwZXIoYXR0cmlidXRlcylcbiAgICB0aGlzLnJlbGVhc2VGaWxlID0gdGhpcy5yZWxlYXNlRmlsZS5iaW5kKHRoaXMpXG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gSGFzaC5ib3goYXR0cmlidXRlcylcbiAgICB0aGlzLmRpZENoYW5nZUF0dHJpYnV0ZXMoKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KGF0dHJpYnV0ZSlcbiAgfVxuXG4gIGhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmhhcyhhdHRyaWJ1dGUpXG4gIH1cblxuICBnZXRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMudG9PYmplY3QoKVxuICB9XG5cbiAgc2V0QXR0cmlidXRlcyhhdHRyaWJ1dGVzID0ge30pIHtcbiAgICBjb25zdCBuZXdBdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzLm1lcmdlKGF0dHJpYnV0ZXMpXG4gICAgaWYgKCF0aGlzLmF0dHJpYnV0ZXMuaXNFcXVhbFRvKG5ld0F0dHJpYnV0ZXMpKSB7XG4gICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBuZXdBdHRyaWJ1dGVzXG4gICAgICB0aGlzLmRpZENoYW5nZUF0dHJpYnV0ZXMoKVxuICAgICAgdGhpcy5wcmV2aWV3RGVsZWdhdGU/LmF0dGFjaG1lbnREaWRDaGFuZ2VBdHRyaWJ1dGVzPy4odGhpcylcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5hdHRhY2htZW50RGlkQ2hhbmdlQXR0cmlidXRlcz8uKHRoaXMpXG4gICAgfVxuICB9XG5cbiAgZGlkQ2hhbmdlQXR0cmlidXRlcygpIHtcbiAgICBpZiAodGhpcy5pc1ByZXZpZXdhYmxlKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnByZWxvYWRVUkwoKVxuICAgIH1cbiAgfVxuXG4gIGlzUGVuZGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5maWxlICE9IG51bGwgJiYgISh0aGlzLmdldFVSTCgpIHx8IHRoaXMuZ2V0SHJlZigpKVxuICB9XG5cbiAgaXNQcmV2aWV3YWJsZSgpIHtcbiAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmhhcyhcInByZXZpZXdhYmxlXCIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmdldChcInByZXZpZXdhYmxlXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBBdHRhY2htZW50LnByZXZpZXdhYmxlUGF0dGVybi50ZXN0KHRoaXMuZ2V0Q29udGVudFR5cGUoKSlcbiAgICB9XG4gIH1cblxuICBnZXRUeXBlKCkge1xuICAgIGlmICh0aGlzLmhhc0NvbnRlbnQoKSkge1xuICAgICAgcmV0dXJuIFwiY29udGVudFwiXG4gICAgfSBlbHNlIGlmICh0aGlzLmlzUHJldmlld2FibGUoKSkge1xuICAgICAgcmV0dXJuIFwicHJldmlld1wiXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImZpbGVcIlxuICAgIH1cbiAgfVxuXG4gIGdldFVSTCgpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmdldChcInVybFwiKVxuICB9XG5cbiAgZ2V0SHJlZigpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmdldChcImhyZWZcIilcbiAgfVxuXG4gIGdldEZpbGVuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KFwiZmlsZW5hbWVcIikgfHwgXCJcIlxuICB9XG5cbiAgZ2V0RmlsZXNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXQoXCJmaWxlc2l6ZVwiKVxuICB9XG5cbiAgZ2V0Rm9ybWF0dGVkRmlsZXNpemUoKSB7XG4gICAgY29uc3QgZmlsZXNpemUgPSB0aGlzLmF0dHJpYnV0ZXMuZ2V0KFwiZmlsZXNpemVcIilcbiAgICBpZiAodHlwZW9mIGZpbGVzaXplID09PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gY29uZmlnLmZpbGVTaXplLmZvcm1hdHRlcihmaWxlc2l6ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiXCJcbiAgICB9XG4gIH1cblxuICBnZXRFeHRlbnNpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RmlsZW5hbWUoKVxuICAgICAgLm1hdGNoKC9cXC4oXFx3KykkLyk/LlsxXVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGdldENvbnRlbnRUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KFwiY29udGVudFR5cGVcIilcbiAgfVxuXG4gIGhhc0NvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5oYXMoXCJjb250ZW50XCIpXG4gIH1cblxuICBnZXRDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KFwiY29udGVudFwiKVxuICB9XG5cbiAgZ2V0V2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXQoXCJ3aWR0aFwiKVxuICB9XG5cbiAgZ2V0SGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KFwiaGVpZ2h0XCIpXG4gIH1cblxuICBnZXRGaWxlKCkge1xuICAgIHJldHVybiB0aGlzLmZpbGVcbiAgfVxuXG4gIHNldEZpbGUoZmlsZSkge1xuICAgIHRoaXMuZmlsZSA9IGZpbGVcbiAgICBpZiAodGhpcy5pc1ByZXZpZXdhYmxlKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnByZWxvYWRGaWxlKClcbiAgICB9XG4gIH1cblxuICByZWxlYXNlRmlsZSgpIHtcbiAgICB0aGlzLnJlbGVhc2VQcmVsb2FkZWRGaWxlKClcbiAgICB0aGlzLmZpbGUgPSBudWxsXG4gIH1cblxuICBnZXRVcGxvYWRQcm9ncmVzcygpIHtcbiAgICByZXR1cm4gdGhpcy51cGxvYWRQcm9ncmVzcyAhPSBudWxsID8gdGhpcy51cGxvYWRQcm9ncmVzcyA6IDBcbiAgfVxuXG4gIHNldFVwbG9hZFByb2dyZXNzKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMudXBsb2FkUHJvZ3Jlc3MgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLnVwbG9hZFByb2dyZXNzID0gdmFsdWVcbiAgICAgIHJldHVybiB0aGlzLnVwbG9hZFByb2dyZXNzRGVsZWdhdGU/LmF0dGFjaG1lbnREaWRDaGFuZ2VVcGxvYWRQcm9ncmVzcz8uKHRoaXMpXG4gICAgfVxuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZXMoKVxuICB9XG5cbiAgZ2V0Q2FjaGVLZXkoKSB7XG4gICAgcmV0dXJuIFsgc3VwZXIuZ2V0Q2FjaGVLZXkoLi4uYXJndW1lbnRzKSwgdGhpcy5hdHRyaWJ1dGVzLmdldENhY2hlS2V5KCksIHRoaXMuZ2V0UHJldmlld1VSTCgpIF0uam9pbihcIi9cIilcbiAgfVxuXG4gIC8vIFByZXZpZXdhYmxlXG5cbiAgZ2V0UHJldmlld1VSTCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcmV2aWV3VVJMIHx8IHRoaXMucHJlbG9hZGluZ1VSTFxuICB9XG5cbiAgc2V0UHJldmlld1VSTCh1cmwpIHtcbiAgICBpZiAodXJsICE9PSB0aGlzLmdldFByZXZpZXdVUkwoKSkge1xuICAgICAgdGhpcy5wcmV2aWV3VVJMID0gdXJsXG4gICAgICB0aGlzLnByZXZpZXdEZWxlZ2F0ZT8uYXR0YWNobWVudERpZENoYW5nZUF0dHJpYnV0ZXM/Lih0aGlzKVxuICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmF0dGFjaG1lbnREaWRDaGFuZ2VQcmV2aWV3VVJMPy4odGhpcylcbiAgICB9XG4gIH1cblxuICBwcmVsb2FkVVJMKCkge1xuICAgIHJldHVybiB0aGlzLnByZWxvYWQodGhpcy5nZXRVUkwoKSwgdGhpcy5yZWxlYXNlRmlsZSlcbiAgfVxuXG4gIHByZWxvYWRGaWxlKCkge1xuICAgIGlmICh0aGlzLmZpbGUpIHtcbiAgICAgIHRoaXMuZmlsZU9iamVjdFVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwodGhpcy5maWxlKVxuICAgICAgcmV0dXJuIHRoaXMucHJlbG9hZCh0aGlzLmZpbGVPYmplY3RVUkwpXG4gICAgfVxuICB9XG5cbiAgcmVsZWFzZVByZWxvYWRlZEZpbGUoKSB7XG4gICAgaWYgKHRoaXMuZmlsZU9iamVjdFVSTCkge1xuICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLmZpbGVPYmplY3RVUkwpXG4gICAgICB0aGlzLmZpbGVPYmplY3RVUkwgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgcHJlbG9hZCh1cmwsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHVybCAmJiB1cmwgIT09IHRoaXMuZ2V0UHJldmlld1VSTCgpKSB7XG4gICAgICB0aGlzLnByZWxvYWRpbmdVUkwgPSB1cmxcbiAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG5ldyBJbWFnZVByZWxvYWRPcGVyYXRpb24odXJsKVxuICAgICAgcmV0dXJuIG9wZXJhdGlvblxuICAgICAgICAudGhlbigoeyB3aWR0aCwgaGVpZ2h0IH0pID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMuZ2V0V2lkdGgoKSB8fCAhdGhpcy5nZXRIZWlnaHQoKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHsgd2lkdGgsIGhlaWdodCB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnByZWxvYWRpbmdVUkwgPSBudWxsXG4gICAgICAgICAgdGhpcy5zZXRQcmV2aWV3VVJMKHVybClcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2s/LigpXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5wcmVsb2FkaW5nVVJMID0gbnVsbFxuICAgICAgICAgIHJldHVybiBjYWxsYmFjaz8uKClcbiAgICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBPQkpFQ1RfUkVQTEFDRU1FTlRfQ0hBUkFDVEVSIH0gZnJvbSBcInRyaXgvY29uc3RhbnRzXCJcblxuaW1wb3J0IEF0dGFjaG1lbnQgZnJvbSBcInRyaXgvbW9kZWxzL2F0dGFjaG1lbnRcIlxuaW1wb3J0IFBpZWNlIGZyb20gXCJ0cml4L21vZGVscy9waWVjZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF0dGFjaG1lbnRQaWVjZSBleHRlbmRzIFBpZWNlIHtcbiAgc3RhdGljIHBlcm1pdHRlZEF0dHJpYnV0ZXMgPSBbIFwiY2FwdGlvblwiLCBcInByZXNlbnRhdGlvblwiIF1cblxuICBzdGF0aWMgZnJvbUpTT04ocGllY2VKU09OKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKEF0dGFjaG1lbnQuZnJvbUpTT04ocGllY2VKU09OLmF0dGFjaG1lbnQpLCBwaWVjZUpTT04uYXR0cmlidXRlcylcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGF0dGFjaG1lbnQpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5hdHRhY2htZW50ID0gYXR0YWNobWVudFxuICAgIHRoaXMubGVuZ3RoID0gMVxuICAgIHRoaXMuZW5zdXJlQXR0YWNobWVudEV4Y2x1c2l2ZWx5SGFzQXR0cmlidXRlKFwiaHJlZlwiKVxuICAgIGlmICghdGhpcy5hdHRhY2htZW50Lmhhc0NvbnRlbnQoKSkge1xuICAgICAgdGhpcy5yZW1vdmVQcm9oaWJpdGVkQXR0cmlidXRlcygpXG4gICAgfVxuICB9XG5cbiAgZW5zdXJlQXR0YWNobWVudEV4Y2x1c2l2ZWx5SGFzQXR0cmlidXRlKGF0dHJpYnV0ZSkge1xuICAgIGlmICh0aGlzLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XG4gICAgICBpZiAoIXRoaXMuYXR0YWNobWVudC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xuICAgICAgICB0aGlzLmF0dGFjaG1lbnQuc2V0QXR0cmlidXRlcyh0aGlzLmF0dHJpYnV0ZXMuc2xpY2UoWyBhdHRyaWJ1dGUgXSkpXG4gICAgICB9XG4gICAgICB0aGlzLmF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXMucmVtb3ZlKGF0dHJpYnV0ZSlcbiAgICB9XG4gIH1cblxuICByZW1vdmVQcm9oaWJpdGVkQXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzLnNsaWNlKEF0dGFjaG1lbnRQaWVjZS5wZXJtaXR0ZWRBdHRyaWJ1dGVzKVxuICAgIGlmICghYXR0cmlidXRlcy5pc0VxdWFsVG8odGhpcy5hdHRyaWJ1dGVzKSkge1xuICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlc1xuICAgIH1cbiAgfVxuXG4gIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmF0dGFjaG1lbnRcbiAgfVxuXG4gIGlzU2VyaWFsaXphYmxlKCkge1xuICAgIHJldHVybiAhdGhpcy5hdHRhY2htZW50LmlzUGVuZGluZygpXG4gIH1cblxuICBnZXRDYXB0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KFwiY2FwdGlvblwiKSB8fCBcIlwiXG4gIH1cblxuICBpc0VxdWFsVG8ocGllY2UpIHtcbiAgICByZXR1cm4gc3VwZXIuaXNFcXVhbFRvKHBpZWNlKSAmJiB0aGlzLmF0dGFjaG1lbnQuaWQgPT09IHBpZWNlPy5hdHRhY2htZW50Py5pZFxuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9CSkVDVF9SRVBMQUNFTUVOVF9DSEFSQUNURVJcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCBqc29uID0gc3VwZXIudG9KU09OKC4uLmFyZ3VtZW50cylcbiAgICBqc29uLmF0dGFjaG1lbnQgPSB0aGlzLmF0dGFjaG1lbnRcbiAgICByZXR1cm4ganNvblxuICB9XG5cbiAgZ2V0Q2FjaGVLZXkoKSB7XG4gICAgcmV0dXJuIFsgc3VwZXIuZ2V0Q2FjaGVLZXkoLi4uYXJndW1lbnRzKSwgdGhpcy5hdHRhY2htZW50LmdldENhY2hlS2V5KCkgXS5qb2luKFwiL1wiKVxuICB9XG5cbiAgdG9Db25zb2xlKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvU3RyaW5nKCkpXG4gIH1cbn1cblxuUGllY2UucmVnaXN0ZXJUeXBlKFwiYXR0YWNobWVudFwiLCBBdHRhY2htZW50UGllY2UpXG4iLCAiaW1wb3J0IFBpZWNlIGZyb20gXCJ0cml4L21vZGVscy9waWVjZVwiXG5cbmltcG9ydCB7IG5vcm1hbGl6ZU5ld2xpbmVzIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RyaW5nUGllY2UgZXh0ZW5kcyBQaWVjZSB7XG4gIHN0YXRpYyBmcm9tSlNPTihwaWVjZUpTT04pIHtcbiAgICByZXR1cm4gbmV3IHRoaXMocGllY2VKU09OLnN0cmluZywgcGllY2VKU09OLmF0dHJpYnV0ZXMpXG4gIH1cblxuICBjb25zdHJ1Y3RvcihzdHJpbmcpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5zdHJpbmcgPSBub3JtYWxpemVOZXdsaW5lcyhzdHJpbmcpXG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLnN0cmluZy5sZW5ndGhcbiAgfVxuXG4gIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnN0cmluZ1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaW5nLnRvU3RyaW5nKClcbiAgfVxuXG4gIGlzQmxvY2tCcmVhaygpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpID09PSBcIlxcblwiICYmIHRoaXMuZ2V0QXR0cmlidXRlKFwiYmxvY2tCcmVha1wiKSA9PT0gdHJ1ZVxuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLnRvSlNPTiguLi5hcmd1bWVudHMpXG4gICAgcmVzdWx0LnN0cmluZyA9IHRoaXMuc3RyaW5nXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLy8gU3BsaXR0YWJsZVxuXG4gIGNhbkJlQ29uc29saWRhdGVkV2l0aChwaWVjZSkge1xuICAgIHJldHVybiBwaWVjZSAmJiB0aGlzLmhhc1NhbWVDb25zdHJ1Y3RvckFzKHBpZWNlKSAmJiB0aGlzLmhhc1NhbWVBdHRyaWJ1dGVzQXNQaWVjZShwaWVjZSlcbiAgfVxuXG4gIGNvbnNvbGlkYXRlV2l0aChwaWVjZSkge1xuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLnRvU3RyaW5nKCkgKyBwaWVjZS50b1N0cmluZygpLCB0aGlzLmF0dHJpYnV0ZXMpXG4gIH1cblxuICBzcGxpdEF0T2Zmc2V0KG9mZnNldCkge1xuICAgIGxldCBsZWZ0LCByaWdodFxuICAgIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICAgIGxlZnQgPSBudWxsXG4gICAgICByaWdodCA9IHRoaXNcbiAgICB9IGVsc2UgaWYgKG9mZnNldCA9PT0gdGhpcy5sZW5ndGgpIHtcbiAgICAgIGxlZnQgPSB0aGlzXG4gICAgICByaWdodCA9IG51bGxcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuc3RyaW5nLnNsaWNlKDAsIG9mZnNldCksIHRoaXMuYXR0cmlidXRlcylcbiAgICAgIHJpZ2h0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5zdHJpbmcuc2xpY2Uob2Zmc2V0KSwgdGhpcy5hdHRyaWJ1dGVzKVxuICAgIH1cbiAgICByZXR1cm4gWyBsZWZ0LCByaWdodCBdXG4gIH1cblxuICB0b0NvbnNvbGUoKSB7XG4gICAgbGV0IHsgc3RyaW5nIH0gPSB0aGlzXG4gICAgaWYgKHN0cmluZy5sZW5ndGggPiAxNSkge1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKDAsIDE0KSArIFwi4oCmXCJcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0cmluZy50b1N0cmluZygpKVxuICB9XG59XG5cblBpZWNlLnJlZ2lzdGVyVHlwZShcInN0cmluZ1wiLCBTdHJpbmdQaWVjZSlcbiIsICIvKiBlc2xpbnQtZGlzYWJsZVxuICAgIHByZWZlci1jb25zdCxcbiovXG5pbXBvcnQgVHJpeE9iamVjdCBmcm9tIFwidHJpeC9jb3JlL29iamVjdFwiIC8vIERvbid0IG92ZXJyaWRlIHdpbmRvdy5PYmplY3RcblxuaW1wb3J0IHsgc3BsaWNlQXJyYXkgfSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTcGxpdHRhYmxlTGlzdCBleHRlbmRzIFRyaXhPYmplY3Qge1xuICBzdGF0aWMgYm94KG9iamVjdHMpIHtcbiAgICBpZiAob2JqZWN0cyBpbnN0YW5jZW9mIHRoaXMpIHtcbiAgICAgIHJldHVybiBvYmplY3RzXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcyhvYmplY3RzKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKG9iamVjdHMgPSBbXSkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLm9iamVjdHMgPSBvYmplY3RzLnNsaWNlKDApXG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLm9iamVjdHMubGVuZ3RoXG4gIH1cblxuICBpbmRleE9mKG9iamVjdCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdHMuaW5kZXhPZihvYmplY3QpXG4gIH1cblxuICBzcGxpY2UoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihzcGxpY2VBcnJheSh0aGlzLm9iamVjdHMsIC4uLmFyZ3MpKVxuICB9XG5cbiAgZWFjaE9iamVjdChjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9iamVjdHMubWFwKChvYmplY3QsIGluZGV4KSA9PiBjYWxsYmFjayhvYmplY3QsIGluZGV4KSlcbiAgfVxuXG4gIGluc2VydE9iamVjdEF0SW5kZXgob2JqZWN0LCBpbmRleCkge1xuICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMCwgb2JqZWN0KVxuICB9XG5cbiAgaW5zZXJ0U3BsaXR0YWJsZUxpc3RBdEluZGV4KHNwbGl0dGFibGVMaXN0LCBpbmRleCkge1xuICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMCwgLi4uc3BsaXR0YWJsZUxpc3Qub2JqZWN0cylcbiAgfVxuXG4gIGluc2VydFNwbGl0dGFibGVMaXN0QXRQb3NpdGlvbihzcGxpdHRhYmxlTGlzdCwgcG9zaXRpb24pIHtcbiAgICBjb25zdCBbIG9iamVjdHMsIGluZGV4IF0gPSB0aGlzLnNwbGl0T2JqZWN0QXRQb3NpdGlvbihwb3NpdGlvbilcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqZWN0cykuaW5zZXJ0U3BsaXR0YWJsZUxpc3RBdEluZGV4KHNwbGl0dGFibGVMaXN0LCBpbmRleClcbiAgfVxuXG4gIGVkaXRPYmplY3RBdEluZGV4KGluZGV4LCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnJlcGxhY2VPYmplY3RBdEluZGV4KGNhbGxiYWNrKHRoaXMub2JqZWN0c1tpbmRleF0pLCBpbmRleClcbiAgfVxuXG4gIHJlcGxhY2VPYmplY3RBdEluZGV4KG9iamVjdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGxpY2UoaW5kZXgsIDEsIG9iamVjdClcbiAgfVxuXG4gIHJlbW92ZU9iamVjdEF0SW5kZXgoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGxpY2UoaW5kZXgsIDEpXG4gIH1cblxuICBnZXRPYmplY3RBdEluZGV4KGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0c1tpbmRleF1cbiAgfVxuXG4gIGdldFNwbGl0dGFibGVMaXN0SW5SYW5nZShyYW5nZSkge1xuICAgIGNvbnN0IFsgb2JqZWN0cywgbGVmdEluZGV4LCByaWdodEluZGV4IF0gPSB0aGlzLnNwbGl0T2JqZWN0c0F0UmFuZ2UocmFuZ2UpXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iamVjdHMuc2xpY2UobGVmdEluZGV4LCByaWdodEluZGV4ICsgMSkpXG4gIH1cblxuICBzZWxlY3RTcGxpdHRhYmxlTGlzdCh0ZXN0KSB7XG4gICAgY29uc3Qgb2JqZWN0cyA9IHRoaXMub2JqZWN0cy5maWx0ZXIoKG9iamVjdCkgPT4gdGVzdChvYmplY3QpKVxuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmplY3RzKVxuICB9XG5cbiAgcmVtb3ZlT2JqZWN0c0luUmFuZ2UocmFuZ2UpIHtcbiAgICBjb25zdCBbIG9iamVjdHMsIGxlZnRJbmRleCwgcmlnaHRJbmRleCBdID0gdGhpcy5zcGxpdE9iamVjdHNBdFJhbmdlKHJhbmdlKVxuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmplY3RzKS5zcGxpY2UobGVmdEluZGV4LCByaWdodEluZGV4IC0gbGVmdEluZGV4ICsgMSlcbiAgfVxuXG4gIHRyYW5zZm9ybU9iamVjdHNJblJhbmdlKHJhbmdlLCB0cmFuc2Zvcm0pIHtcbiAgICBjb25zdCBbIG9iamVjdHMsIGxlZnRJbmRleCwgcmlnaHRJbmRleCBdID0gdGhpcy5zcGxpdE9iamVjdHNBdFJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IHRyYW5zZm9ybWVkT2JqZWN0cyA9IG9iamVjdHMubWFwKChvYmplY3QsIGluZGV4KSA9PlxuICAgICAgbGVmdEluZGV4IDw9IGluZGV4ICYmIGluZGV4IDw9IHJpZ2h0SW5kZXggPyB0cmFuc2Zvcm0ob2JqZWN0KSA6IG9iamVjdFxuICAgIClcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodHJhbnNmb3JtZWRPYmplY3RzKVxuICB9XG5cbiAgc3BsaXRPYmplY3RzQXRSYW5nZShyYW5nZSkge1xuICAgIGxldCByaWdodE91dGVySW5kZXhcbiAgICBsZXQgWyBvYmplY3RzLCBsZWZ0SW5uZXJJbmRleCwgb2Zmc2V0IF0gPSB0aGlzLnNwbGl0T2JqZWN0QXRQb3NpdGlvbihzdGFydE9mUmFuZ2UocmFuZ2UpKVxuICAgIDtbIG9iamVjdHMsIHJpZ2h0T3V0ZXJJbmRleCBdID0gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqZWN0cykuc3BsaXRPYmplY3RBdFBvc2l0aW9uKGVuZE9mUmFuZ2UocmFuZ2UpICsgb2Zmc2V0KVxuXG4gICAgcmV0dXJuIFsgb2JqZWN0cywgbGVmdElubmVySW5kZXgsIHJpZ2h0T3V0ZXJJbmRleCAtIDEgXVxuICB9XG5cbiAgZ2V0T2JqZWN0QXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgIGNvbnN0IHsgaW5kZXggfSA9IHRoaXMuZmluZEluZGV4QW5kT2Zmc2V0QXRQb3NpdGlvbihwb3NpdGlvbilcbiAgICByZXR1cm4gdGhpcy5vYmplY3RzW2luZGV4XVxuICB9XG5cbiAgc3BsaXRPYmplY3RBdFBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgbGV0IHNwbGl0SW5kZXgsIHNwbGl0T2Zmc2V0XG4gICAgY29uc3QgeyBpbmRleCwgb2Zmc2V0IH0gPSB0aGlzLmZpbmRJbmRleEFuZE9mZnNldEF0UG9zaXRpb24ocG9zaXRpb24pXG4gICAgY29uc3Qgb2JqZWN0cyA9IHRoaXMub2JqZWN0cy5zbGljZSgwKVxuICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgIHNwbGl0SW5kZXggPSBpbmRleFxuICAgICAgICBzcGxpdE9mZnNldCA9IDBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG9iamVjdCA9IHRoaXMuZ2V0T2JqZWN0QXRJbmRleChpbmRleClcbiAgICAgICAgY29uc3QgWyBsZWZ0T2JqZWN0LCByaWdodE9iamVjdCBdID0gb2JqZWN0LnNwbGl0QXRPZmZzZXQob2Zmc2V0KVxuICAgICAgICBvYmplY3RzLnNwbGljZShpbmRleCwgMSwgbGVmdE9iamVjdCwgcmlnaHRPYmplY3QpXG4gICAgICAgIHNwbGl0SW5kZXggPSBpbmRleCArIDFcbiAgICAgICAgc3BsaXRPZmZzZXQgPSBsZWZ0T2JqZWN0LmdldExlbmd0aCgpIC0gb2Zmc2V0XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNwbGl0SW5kZXggPSBvYmplY3RzLmxlbmd0aFxuICAgICAgc3BsaXRPZmZzZXQgPSAwXG4gICAgfVxuXG4gICAgcmV0dXJuIFsgb2JqZWN0cywgc3BsaXRJbmRleCwgc3BsaXRPZmZzZXQgXVxuICB9XG5cbiAgY29uc29saWRhdGUoKSB7XG4gICAgY29uc3Qgb2JqZWN0cyA9IFtdXG4gICAgbGV0IHBlbmRpbmdPYmplY3QgPSB0aGlzLm9iamVjdHNbMF1cblxuICAgIHRoaXMub2JqZWN0cy5zbGljZSgxKS5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgIGlmIChwZW5kaW5nT2JqZWN0LmNhbkJlQ29uc29saWRhdGVkV2l0aD8uKG9iamVjdCkpIHtcbiAgICAgICAgcGVuZGluZ09iamVjdCA9IHBlbmRpbmdPYmplY3QuY29uc29saWRhdGVXaXRoKG9iamVjdClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdHMucHVzaChwZW5kaW5nT2JqZWN0KVxuICAgICAgICBwZW5kaW5nT2JqZWN0ID0gb2JqZWN0XG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmIChwZW5kaW5nT2JqZWN0KSB7XG4gICAgICBvYmplY3RzLnB1c2gocGVuZGluZ09iamVjdClcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqZWN0cylcbiAgfVxuXG4gIGNvbnNvbGlkYXRlRnJvbUluZGV4VG9JbmRleChzdGFydEluZGV4LCBlbmRJbmRleCkge1xuICAgIGNvbnN0IG9iamVjdHMgPSB0aGlzLm9iamVjdHMuc2xpY2UoMClcbiAgICBjb25zdCBvYmplY3RzSW5SYW5nZSA9IG9iamVjdHMuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXggKyAxKVxuICAgIGNvbnN0IGNvbnNvbGlkYXRlZEluUmFuZ2UgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmplY3RzSW5SYW5nZSkuY29uc29saWRhdGUoKS50b0FycmF5KClcbiAgICByZXR1cm4gdGhpcy5zcGxpY2Uoc3RhcnRJbmRleCwgb2JqZWN0c0luUmFuZ2UubGVuZ3RoLCAuLi5jb25zb2xpZGF0ZWRJblJhbmdlKVxuICB9XG5cbiAgZmluZEluZGV4QW5kT2Zmc2V0QXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgIGxldCBpbmRleFxuICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSAwXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5vYmplY3RzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5vYmplY3RzW2luZGV4XVxuICAgICAgY29uc3QgbmV4dFBvc2l0aW9uID0gY3VycmVudFBvc2l0aW9uICsgb2JqZWN0LmdldExlbmd0aCgpXG4gICAgICBpZiAoY3VycmVudFBvc2l0aW9uIDw9IHBvc2l0aW9uICYmIHBvc2l0aW9uIDwgbmV4dFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB7IGluZGV4LCBvZmZzZXQ6IHBvc2l0aW9uIC0gY3VycmVudFBvc2l0aW9uIH1cbiAgICAgIH1cbiAgICAgIGN1cnJlbnRQb3NpdGlvbiA9IG5leHRQb3NpdGlvblxuICAgIH1cbiAgICByZXR1cm4geyBpbmRleDogbnVsbCwgb2Zmc2V0OiBudWxsIH1cbiAgfVxuXG4gIGZpbmRQb3NpdGlvbkF0SW5kZXhBbmRPZmZzZXQoaW5kZXgsIG9mZnNldCkge1xuICAgIGxldCBwb3NpdGlvbiA9IDBcbiAgICBmb3IgKGxldCBjdXJyZW50SW5kZXggPSAwOyBjdXJyZW50SW5kZXggPCB0aGlzLm9iamVjdHMubGVuZ3RoOyBjdXJyZW50SW5kZXgrKykge1xuICAgICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5vYmplY3RzW2N1cnJlbnRJbmRleF1cbiAgICAgIGlmIChjdXJyZW50SW5kZXggPCBpbmRleCkge1xuICAgICAgICBwb3NpdGlvbiArPSBvYmplY3QuZ2V0TGVuZ3RoKClcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudEluZGV4ID09PSBpbmRleCkge1xuICAgICAgICBwb3NpdGlvbiArPSBvZmZzZXRcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBvc2l0aW9uXG4gIH1cblxuICBnZXRFbmRQb3NpdGlvbigpIHtcbiAgICBpZiAodGhpcy5lbmRQb3NpdGlvbiA9PSBudWxsKSB7XG4gICAgICB0aGlzLmVuZFBvc2l0aW9uID0gMFxuICAgICAgdGhpcy5vYmplY3RzLmZvckVhY2goKG9iamVjdCkgPT4gdGhpcy5lbmRQb3NpdGlvbiArPSBvYmplY3QuZ2V0TGVuZ3RoKCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZW5kUG9zaXRpb25cbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdHMuam9pbihcIlwiKVxuICB9XG5cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3RzLnNsaWNlKDApXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheSgpXG4gIH1cblxuICBpc0VxdWFsVG8oc3BsaXR0YWJsZUxpc3QpIHtcbiAgICByZXR1cm4gc3VwZXIuaXNFcXVhbFRvKC4uLmFyZ3VtZW50cykgfHwgb2JqZWN0QXJyYXlzQXJlRXF1YWwodGhpcy5vYmplY3RzLCBzcGxpdHRhYmxlTGlzdD8ub2JqZWN0cylcbiAgfVxuXG4gIGNvbnRlbnRzRm9ySW5zcGVjdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb2JqZWN0czogYFske3RoaXMub2JqZWN0cy5tYXAoKG9iamVjdCkgPT4gb2JqZWN0Lmluc3BlY3QoKSkuam9pbihcIiwgXCIpfV1gLFxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBvYmplY3RBcnJheXNBcmVFcXVhbCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0ID0gW10pIHtcbiAgaWYgKGxlZnQubGVuZ3RoICE9PSByaWdodC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBsZXQgcmVzdWx0ID0gdHJ1ZVxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVmdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBvYmplY3QgPSBsZWZ0W2luZGV4XVxuICAgIGlmIChyZXN1bHQgJiYgIW9iamVjdC5pc0VxdWFsVG8ocmlnaHRbaW5kZXhdKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5jb25zdCBzdGFydE9mUmFuZ2UgPSAocmFuZ2UpID0+IHJhbmdlWzBdXG5cbmNvbnN0IGVuZE9mUmFuZ2UgPSAocmFuZ2UpID0+IHJhbmdlWzFdXG4iLCAiaW1wb3J0IFRyaXhPYmplY3QgZnJvbSBcInRyaXgvY29yZS9vYmplY3RcIiAvLyBEb24ndCBvdmVycmlkZSB3aW5kb3cuT2JqZWN0XG5cbmltcG9ydCB7IGdldERpcmVjdGlvbiB9IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5cbmltcG9ydCBQaWVjZSBmcm9tIFwidHJpeC9tb2RlbHMvcGllY2VcIlxuaW1wb3J0IEF0dGFjaG1lbnRQaWVjZSBmcm9tIFwidHJpeC9tb2RlbHMvYXR0YWNobWVudF9waWVjZVwiXG5pbXBvcnQgU3RyaW5nUGllY2UgZnJvbSBcInRyaXgvbW9kZWxzL3N0cmluZ19waWVjZVwiXG5pbXBvcnQgU3BsaXR0YWJsZUxpc3QgZnJvbSBcInRyaXgvbW9kZWxzL3NwbGl0dGFibGVfbGlzdFwiXG5cbmltcG9ydCBIYXNoIGZyb20gXCJ0cml4L2NvcmUvY29sbGVjdGlvbnMvaGFzaFwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHQgZXh0ZW5kcyBUcml4T2JqZWN0IHtcbiAgc3RhdGljIHRleHRGb3JBdHRhY2htZW50V2l0aEF0dHJpYnV0ZXMoYXR0YWNobWVudCwgYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHBpZWNlID0gbmV3IEF0dGFjaG1lbnRQaWVjZShhdHRhY2htZW50LCBhdHRyaWJ1dGVzKVxuICAgIHJldHVybiBuZXcgdGhpcyhbIHBpZWNlIF0pXG4gIH1cblxuICBzdGF0aWMgdGV4dEZvclN0cmluZ1dpdGhBdHRyaWJ1dGVzKHN0cmluZywgYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHBpZWNlID0gbmV3IFN0cmluZ1BpZWNlKHN0cmluZywgYXR0cmlidXRlcylcbiAgICByZXR1cm4gbmV3IHRoaXMoWyBwaWVjZSBdKVxuICB9XG5cbiAgc3RhdGljIGZyb21KU09OKHRleHRKU09OKSB7XG4gICAgY29uc3QgcGllY2VzID0gQXJyYXkuZnJvbSh0ZXh0SlNPTikubWFwKChwaWVjZUpTT04pID0+IFBpZWNlLmZyb21KU09OKHBpZWNlSlNPTikpXG4gICAgcmV0dXJuIG5ldyB0aGlzKHBpZWNlcylcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHBpZWNlcyA9IFtdKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIGNvbnN0IG5vdEVtcHR5ID0gcGllY2VzLmZpbHRlcigocGllY2UpID0+ICFwaWVjZS5pc0VtcHR5KCkpXG4gICAgdGhpcy5waWVjZUxpc3QgPSBuZXcgU3BsaXR0YWJsZUxpc3Qobm90RW1wdHkpXG4gIH1cblxuICBjb3B5KCkge1xuICAgIHJldHVybiB0aGlzLmNvcHlXaXRoUGllY2VMaXN0KHRoaXMucGllY2VMaXN0KVxuICB9XG5cbiAgY29weVdpdGhQaWVjZUxpc3QocGllY2VMaXN0KSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHBpZWNlTGlzdC5jb25zb2xpZGF0ZSgpLnRvQXJyYXkoKSlcbiAgfVxuXG4gIGNvcHlVc2luZ09iamVjdE1hcChvYmplY3RNYXApIHtcbiAgICBjb25zdCBwaWVjZXMgPSB0aGlzLmdldFBpZWNlcygpLm1hcCgocGllY2UpID0+IG9iamVjdE1hcC5maW5kKHBpZWNlKSB8fCBwaWVjZSlcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IocGllY2VzKVxuICB9XG5cbiAgYXBwZW5kVGV4dCh0ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0VGV4dEF0UG9zaXRpb24odGV4dCwgdGhpcy5nZXRMZW5ndGgoKSlcbiAgfVxuXG4gIGluc2VydFRleHRBdFBvc2l0aW9uKHRleHQsIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhQaWVjZUxpc3QodGhpcy5waWVjZUxpc3QuaW5zZXJ0U3BsaXR0YWJsZUxpc3RBdFBvc2l0aW9uKHRleHQucGllY2VMaXN0LCBwb3NpdGlvbikpXG4gIH1cblxuICByZW1vdmVUZXh0QXRSYW5nZShyYW5nZSkge1xuICAgIHJldHVybiB0aGlzLmNvcHlXaXRoUGllY2VMaXN0KHRoaXMucGllY2VMaXN0LnJlbW92ZU9iamVjdHNJblJhbmdlKHJhbmdlKSlcbiAgfVxuXG4gIHJlcGxhY2VUZXh0QXRSYW5nZSh0ZXh0LCByYW5nZSkge1xuICAgIHJldHVybiB0aGlzLnJlbW92ZVRleHRBdFJhbmdlKHJhbmdlKS5pbnNlcnRUZXh0QXRQb3NpdGlvbih0ZXh0LCByYW5nZVswXSlcbiAgfVxuXG4gIG1vdmVUZXh0RnJvbVJhbmdlVG9Qb3NpdGlvbihyYW5nZSwgcG9zaXRpb24pIHtcbiAgICBpZiAocmFuZ2VbMF0gPD0gcG9zaXRpb24gJiYgcG9zaXRpb24gPD0gcmFuZ2VbMV0pIHJldHVyblxuICAgIGNvbnN0IHRleHQgPSB0aGlzLmdldFRleHRBdFJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IGxlbmd0aCA9IHRleHQuZ2V0TGVuZ3RoKClcbiAgICBpZiAocmFuZ2VbMF0gPCBwb3NpdGlvbikge1xuICAgICAgcG9zaXRpb24gLT0gbGVuZ3RoXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlbW92ZVRleHRBdFJhbmdlKHJhbmdlKS5pbnNlcnRUZXh0QXRQb3NpdGlvbih0ZXh0LCBwb3NpdGlvbilcbiAgfVxuXG4gIGFkZEF0dHJpYnV0ZUF0UmFuZ2UoYXR0cmlidXRlLCB2YWx1ZSwgcmFuZ2UpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgICBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPSB2YWx1ZVxuICAgIHJldHVybiB0aGlzLmFkZEF0dHJpYnV0ZXNBdFJhbmdlKGF0dHJpYnV0ZXMsIHJhbmdlKVxuICB9XG5cbiAgYWRkQXR0cmlidXRlc0F0UmFuZ2UoYXR0cmlidXRlcywgcmFuZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5jb3B5V2l0aFBpZWNlTGlzdChcbiAgICAgIHRoaXMucGllY2VMaXN0LnRyYW5zZm9ybU9iamVjdHNJblJhbmdlKHJhbmdlLCAocGllY2UpID0+IHBpZWNlLmNvcHlXaXRoQWRkaXRpb25hbEF0dHJpYnV0ZXMoYXR0cmlidXRlcykpXG4gICAgKVxuICB9XG5cbiAgcmVtb3ZlQXR0cmlidXRlQXRSYW5nZShhdHRyaWJ1dGUsIHJhbmdlKSB7XG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhQaWVjZUxpc3QoXG4gICAgICB0aGlzLnBpZWNlTGlzdC50cmFuc2Zvcm1PYmplY3RzSW5SYW5nZShyYW5nZSwgKHBpZWNlKSA9PiBwaWVjZS5jb3B5V2l0aG91dEF0dHJpYnV0ZShhdHRyaWJ1dGUpKVxuICAgIClcbiAgfVxuXG4gIHNldEF0dHJpYnV0ZXNBdFJhbmdlKGF0dHJpYnV0ZXMsIHJhbmdlKSB7XG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhQaWVjZUxpc3QoXG4gICAgICB0aGlzLnBpZWNlTGlzdC50cmFuc2Zvcm1PYmplY3RzSW5SYW5nZShyYW5nZSwgKHBpZWNlKSA9PiBwaWVjZS5jb3B5V2l0aEF0dHJpYnV0ZXMoYXR0cmlidXRlcykpXG4gICAgKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlc0F0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5waWVjZUxpc3QuZ2V0T2JqZWN0QXRQb3NpdGlvbihwb3NpdGlvbik/LmdldEF0dHJpYnV0ZXMoKSB8fCB7fVxuICB9XG5cbiAgZ2V0Q29tbW9uQXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBvYmplY3RzID0gQXJyYXkuZnJvbSh0aGlzLnBpZWNlTGlzdC50b0FycmF5KCkpLm1hcCgocGllY2UpID0+IHBpZWNlLmdldEF0dHJpYnV0ZXMoKSlcbiAgICByZXR1cm4gSGFzaC5mcm9tQ29tbW9uQXR0cmlidXRlc09mT2JqZWN0cyhvYmplY3RzKS50b09iamVjdCgpXG4gIH1cblxuICBnZXRDb21tb25BdHRyaWJ1dGVzQXRSYW5nZShyYW5nZSkge1xuICAgIHJldHVybiB0aGlzLmdldFRleHRBdFJhbmdlKHJhbmdlKS5nZXRDb21tb25BdHRyaWJ1dGVzKCkgfHwge31cbiAgfVxuXG4gIGdldEV4cGFuZGVkUmFuZ2VGb3JBdHRyaWJ1dGVBdE9mZnNldChhdHRyaWJ1dGVOYW1lLCBvZmZzZXQpIHtcbiAgICBsZXQgcmlnaHRcbiAgICBsZXQgbGVmdCA9IHJpZ2h0ID0gb2Zmc2V0XG4gICAgY29uc3QgbGVuZ3RoID0gdGhpcy5nZXRMZW5ndGgoKVxuXG4gICAgd2hpbGUgKGxlZnQgPiAwICYmIHRoaXMuZ2V0Q29tbW9uQXR0cmlidXRlc0F0UmFuZ2UoWyBsZWZ0IC0gMSwgcmlnaHQgXSlbYXR0cmlidXRlTmFtZV0pIHtcbiAgICAgIGxlZnQtLVxuICAgIH1cbiAgICB3aGlsZSAocmlnaHQgPCBsZW5ndGggJiYgdGhpcy5nZXRDb21tb25BdHRyaWJ1dGVzQXRSYW5nZShbIG9mZnNldCwgcmlnaHQgKyAxIF0pW2F0dHJpYnV0ZU5hbWVdKSB7XG4gICAgICByaWdodCsrXG4gICAgfVxuXG4gICAgcmV0dXJuIFsgbGVmdCwgcmlnaHQgXVxuICB9XG5cbiAgZ2V0VGV4dEF0UmFuZ2UocmFuZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5jb3B5V2l0aFBpZWNlTGlzdCh0aGlzLnBpZWNlTGlzdC5nZXRTcGxpdHRhYmxlTGlzdEluUmFuZ2UocmFuZ2UpKVxuICB9XG5cbiAgZ2V0U3RyaW5nQXRSYW5nZShyYW5nZSkge1xuICAgIHJldHVybiB0aGlzLnBpZWNlTGlzdC5nZXRTcGxpdHRhYmxlTGlzdEluUmFuZ2UocmFuZ2UpLnRvU3RyaW5nKClcbiAgfVxuXG4gIGdldFN0cmluZ0F0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdFJhbmdlKFsgcG9zaXRpb24sIHBvc2l0aW9uICsgMSBdKVxuICB9XG5cbiAgc3RhcnRzV2l0aFN0cmluZyhzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdFJhbmdlKFsgMCwgc3RyaW5nLmxlbmd0aCBdKSA9PT0gc3RyaW5nXG4gIH1cblxuICBlbmRzV2l0aFN0cmluZyhzdHJpbmcpIHtcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLmdldExlbmd0aCgpXG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXRSYW5nZShbIGxlbmd0aCAtIHN0cmluZy5sZW5ndGgsIGxlbmd0aCBdKSA9PT0gc3RyaW5nXG4gIH1cblxuICBnZXRBdHRhY2htZW50UGllY2VzKCkge1xuICAgIHJldHVybiB0aGlzLnBpZWNlTGlzdC50b0FycmF5KCkuZmlsdGVyKChwaWVjZSkgPT4gISFwaWVjZS5hdHRhY2htZW50KVxuICB9XG5cbiAgZ2V0QXR0YWNobWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0YWNobWVudFBpZWNlcygpLm1hcCgocGllY2UpID0+IHBpZWNlLmF0dGFjaG1lbnQpXG4gIH1cblxuICBnZXRBdHRhY2htZW50QW5kUG9zaXRpb25CeUlkKGF0dGFjaG1lbnRJZCkge1xuICAgIGxldCBwb3NpdGlvbiA9IDBcbiAgICBmb3IgKGNvbnN0IHBpZWNlIG9mIHRoaXMucGllY2VMaXN0LnRvQXJyYXkoKSkge1xuICAgICAgaWYgKHBpZWNlLmF0dGFjaG1lbnQ/LmlkID09PSBhdHRhY2htZW50SWQpIHtcbiAgICAgICAgcmV0dXJuIHsgYXR0YWNobWVudDogcGllY2UuYXR0YWNobWVudCwgcG9zaXRpb24gfVxuICAgICAgfVxuICAgICAgcG9zaXRpb24gKz0gcGllY2UubGVuZ3RoXG4gICAgfVxuICAgIHJldHVybiB7IGF0dGFjaG1lbnQ6IG51bGwsIHBvc2l0aW9uOiBudWxsIH1cbiAgfVxuXG4gIGdldEF0dGFjaG1lbnRCeUlkKGF0dGFjaG1lbnRJZCkge1xuICAgIGNvbnN0IHsgYXR0YWNobWVudCB9ID0gdGhpcy5nZXRBdHRhY2htZW50QW5kUG9zaXRpb25CeUlkKGF0dGFjaG1lbnRJZClcbiAgICByZXR1cm4gYXR0YWNobWVudFxuICB9XG5cbiAgZ2V0UmFuZ2VPZkF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGNvbnN0IGF0dGFjaG1lbnRBbmRQb3NpdGlvbiA9IHRoaXMuZ2V0QXR0YWNobWVudEFuZFBvc2l0aW9uQnlJZChhdHRhY2htZW50LmlkKVxuICAgIGNvbnN0IHBvc2l0aW9uID0gYXR0YWNobWVudEFuZFBvc2l0aW9uLnBvc2l0aW9uXG4gICAgYXR0YWNobWVudCA9IGF0dGFjaG1lbnRBbmRQb3NpdGlvbi5hdHRhY2htZW50XG4gICAgaWYgKGF0dGFjaG1lbnQpIHtcbiAgICAgIHJldHVybiBbIHBvc2l0aW9uLCBwb3NpdGlvbiArIDEgXVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUF0dHJpYnV0ZXNGb3JBdHRhY2htZW50KGF0dHJpYnV0ZXMsIGF0dGFjaG1lbnQpIHtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZkF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICBpZiAocmFuZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmFkZEF0dHJpYnV0ZXNBdFJhbmdlKGF0dHJpYnV0ZXMsIHJhbmdlKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgfVxuXG4gIGdldExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5waWVjZUxpc3QuZ2V0RW5kUG9zaXRpb24oKVxuICB9XG5cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRMZW5ndGgoKSA9PT0gMFxuICB9XG5cbiAgaXNFcXVhbFRvKHRleHQpIHtcbiAgICByZXR1cm4gc3VwZXIuaXNFcXVhbFRvKHRleHQpIHx8IHRleHQ/LnBpZWNlTGlzdD8uaXNFcXVhbFRvKHRoaXMucGllY2VMaXN0KVxuICB9XG5cbiAgaXNCbG9ja0JyZWFrKCkge1xuICAgIHJldHVybiB0aGlzLmdldExlbmd0aCgpID09PSAxICYmIHRoaXMucGllY2VMaXN0LmdldE9iamVjdEF0SW5kZXgoMCkuaXNCbG9ja0JyZWFrKClcbiAgfVxuXG4gIGVhY2hQaWVjZShjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnBpZWNlTGlzdC5lYWNoT2JqZWN0KGNhbGxiYWNrKVxuICB9XG5cbiAgZ2V0UGllY2VzKCkge1xuICAgIHJldHVybiB0aGlzLnBpZWNlTGlzdC50b0FycmF5KClcbiAgfVxuXG4gIGdldFBpZWNlQXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgIHJldHVybiB0aGlzLnBpZWNlTGlzdC5nZXRPYmplY3RBdFBvc2l0aW9uKHBvc2l0aW9uKVxuICB9XG5cbiAgY29udGVudHNGb3JJbnNwZWN0aW9uKCkge1xuICAgIHJldHVybiB7IHBpZWNlTGlzdDogdGhpcy5waWVjZUxpc3QuaW5zcGVjdCgpIH1cbiAgfVxuXG4gIHRvU2VyaWFsaXphYmxlVGV4dCgpIHtcbiAgICBjb25zdCBwaWVjZUxpc3QgPSB0aGlzLnBpZWNlTGlzdC5zZWxlY3RTcGxpdHRhYmxlTGlzdCgocGllY2UpID0+IHBpZWNlLmlzU2VyaWFsaXphYmxlKCkpXG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhQaWVjZUxpc3QocGllY2VMaXN0KVxuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMucGllY2VMaXN0LnRvU3RyaW5nKClcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy5waWVjZUxpc3QudG9KU09OKClcbiAgfVxuXG4gIHRvQ29uc29sZSgpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5waWVjZUxpc3QudG9BcnJheSgpLm1hcCgocGllY2UpID0+IEpTT04ucGFyc2UocGllY2UudG9Db25zb2xlKCkpKSlcbiAgfVxuXG4gIC8vIEJJRElcblxuICBnZXREaXJlY3Rpb24oKSB7XG4gICAgcmV0dXJuIGdldERpcmVjdGlvbih0aGlzLnRvU3RyaW5nKCkpXG4gIH1cblxuICBpc1JUTCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXREaXJlY3Rpb24oKSA9PT0gXCJydGxcIlxuICB9XG59XG4iLCAiaW1wb3J0IFRyaXhPYmplY3QgZnJvbSBcInRyaXgvY29yZS9vYmplY3RcIiAvLyBEb24ndCBvdmVycmlkZSB3aW5kb3cuT2JqZWN0XG5pbXBvcnQgVGV4dCBmcm9tIFwidHJpeC9tb2RlbHMvdGV4dFwiXG5cbmltcG9ydCB7XG4gIGFycmF5c0FyZUVxdWFsLFxuICBnZXRCbG9ja0NvbmZpZyxcbiAgZ2V0TGlzdEF0dHJpYnV0ZU5hbWVzLFxuICBvYmplY3RzQXJlRXF1YWwsXG4gIHNwbGljZUFycmF5LFxufSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCbG9jayBleHRlbmRzIFRyaXhPYmplY3Qge1xuICBzdGF0aWMgZnJvbUpTT04oYmxvY2tKU09OKSB7XG4gICAgY29uc3QgdGV4dCA9IFRleHQuZnJvbUpTT04oYmxvY2tKU09OLnRleHQpXG4gICAgcmV0dXJuIG5ldyB0aGlzKHRleHQsIGJsb2NrSlNPTi5hdHRyaWJ1dGVzLCBibG9ja0pTT04uaHRtbEF0dHJpYnV0ZXMpXG4gIH1cblxuICBjb25zdHJ1Y3Rvcih0ZXh0LCBhdHRyaWJ1dGVzLCBodG1sQXR0cmlidXRlcykge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLnRleHQgPSBhcHBseUJsb2NrQnJlYWtUb1RleHQodGV4dCB8fCBuZXcgVGV4dCgpKVxuICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgfHwgW11cbiAgICB0aGlzLmh0bWxBdHRyaWJ1dGVzID0gaHRtbEF0dHJpYnV0ZXMgfHwge31cbiAgfVxuXG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dC5pc0Jsb2NrQnJlYWsoKVxuICB9XG5cbiAgaXNFcXVhbFRvKGJsb2NrKSB7XG4gICAgaWYgKHN1cGVyLmlzRXF1YWxUbyhibG9jaykpIHJldHVybiB0cnVlXG5cbiAgICByZXR1cm4gdGhpcy50ZXh0LmlzRXF1YWxUbyhibG9jaz8udGV4dCkgJiYgYXJyYXlzQXJlRXF1YWwodGhpcy5hdHRyaWJ1dGVzLCBibG9jaz8uYXR0cmlidXRlcykgJiYgb2JqZWN0c0FyZUVxdWFsKHRoaXMuaHRtbEF0dHJpYnV0ZXMsIGJsb2NrPy5odG1sQXR0cmlidXRlcylcbiAgfVxuXG4gIGNvcHlXaXRoVGV4dCh0ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBCbG9jayh0ZXh0LCB0aGlzLmF0dHJpYnV0ZXMsIHRoaXMuaHRtbEF0dHJpYnV0ZXMpXG4gIH1cblxuICBjb3B5V2l0aG91dFRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhUZXh0KG51bGwpXG4gIH1cblxuICBjb3B5V2l0aEF0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICAgIHJldHVybiBuZXcgQmxvY2sodGhpcy50ZXh0LCBhdHRyaWJ1dGVzLCB0aGlzLmh0bWxBdHRyaWJ1dGVzKVxuICB9XG5cbiAgY29weVdpdGhvdXRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiB0aGlzLmNvcHlXaXRoQXR0cmlidXRlcyhudWxsKVxuICB9XG5cbiAgY29weVVzaW5nT2JqZWN0TWFwKG9iamVjdE1hcCkge1xuICAgIGNvbnN0IG1hcHBlZFRleHQgPSBvYmplY3RNYXAuZmluZCh0aGlzLnRleHQpXG4gICAgaWYgKG1hcHBlZFRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvcHlXaXRoVGV4dChtYXBwZWRUZXh0KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jb3B5V2l0aFRleHQodGhpcy50ZXh0LmNvcHlVc2luZ09iamVjdE1hcChvYmplY3RNYXApKVxuICAgIH1cbiAgfVxuXG4gIGFkZEF0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzLmNvbmNhdChleHBhbmRBdHRyaWJ1dGUoYXR0cmlidXRlKSlcbiAgICByZXR1cm4gdGhpcy5jb3B5V2l0aEF0dHJpYnV0ZXMoYXR0cmlidXRlcylcbiAgfVxuXG4gIGFkZEhUTUxBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGNvbnN0IGh0bWxBdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5odG1sQXR0cmlidXRlcywgeyBbYXR0cmlidXRlXTogdmFsdWUgfSlcbiAgICByZXR1cm4gbmV3IEJsb2NrKHRoaXMudGV4dCwgdGhpcy5hdHRyaWJ1dGVzLCBodG1sQXR0cmlidXRlcylcbiAgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcbiAgICBjb25zdCB7IGxpc3RBdHRyaWJ1dGUgfSA9IGdldEJsb2NrQ29uZmlnKGF0dHJpYnV0ZSlcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gcmVtb3ZlTGFzdFZhbHVlKHJlbW92ZUxhc3RWYWx1ZSh0aGlzLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZSksIGxpc3RBdHRyaWJ1dGUpXG4gICAgcmV0dXJuIHRoaXMuY29weVdpdGhBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpXG4gIH1cblxuICByZW1vdmVMYXN0QXR0cmlidXRlKCkge1xuICAgIHJldHVybiB0aGlzLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmdldExhc3RBdHRyaWJ1dGUoKSlcbiAgfVxuXG4gIGdldExhc3RBdHRyaWJ1dGUoKSB7XG4gICAgcmV0dXJuIGdldExhc3RFbGVtZW50KHRoaXMuYXR0cmlidXRlcylcbiAgfVxuXG4gIGdldEF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5zbGljZSgwKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlTGV2ZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5sZW5ndGhcbiAgfVxuXG4gIGdldEF0dHJpYnV0ZUF0TGV2ZWwobGV2ZWwpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2xldmVsIC0gMV1cbiAgfVxuXG4gIGhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGVOYW1lKVxuICB9XG5cbiAgaGFzQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGVMZXZlbCgpID4gMFxuICB9XG5cbiAgZ2V0TGFzdE5lc3RhYmxlQXR0cmlidXRlKCkge1xuICAgIHJldHVybiBnZXRMYXN0RWxlbWVudCh0aGlzLmdldE5lc3RhYmxlQXR0cmlidXRlcygpKVxuICB9XG5cbiAgZ2V0TmVzdGFibGVBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZmlsdGVyKChhdHRyaWJ1dGUpID0+IGdldEJsb2NrQ29uZmlnKGF0dHJpYnV0ZSkubmVzdGFibGUpXG4gIH1cblxuICBnZXROZXN0aW5nTGV2ZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TmVzdGFibGVBdHRyaWJ1dGVzKCkubGVuZ3RoXG4gIH1cblxuICBkZWNyZWFzZU5lc3RpbmdMZXZlbCgpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGUgPSB0aGlzLmdldExhc3ROZXN0YWJsZUF0dHJpYnV0ZSgpXG4gICAgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH1cblxuICBpbmNyZWFzZU5lc3RpbmdMZXZlbCgpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGUgPSB0aGlzLmdldExhc3ROZXN0YWJsZUF0dHJpYnV0ZSgpXG4gICAgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmF0dHJpYnV0ZXMubGFzdEluZGV4T2YoYXR0cmlidXRlKVxuICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHNwbGljZUFycmF5KHRoaXMuYXR0cmlidXRlcywgaW5kZXggKyAxLCAwLCAuLi5leHBhbmRBdHRyaWJ1dGUoYXR0cmlidXRlKSlcbiAgICAgIHJldHVybiB0aGlzLmNvcHlXaXRoQXR0cmlidXRlcyhhdHRyaWJ1dGVzKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgfVxuXG4gIGdldExpc3RJdGVtQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmZpbHRlcigoYXR0cmlidXRlKSA9PiBnZXRCbG9ja0NvbmZpZyhhdHRyaWJ1dGUpLmxpc3RBdHRyaWJ1dGUpXG4gIH1cblxuICBpc0xpc3RJdGVtKCkge1xuICAgIHJldHVybiBnZXRCbG9ja0NvbmZpZyh0aGlzLmdldExhc3RBdHRyaWJ1dGUoKSk/Lmxpc3RBdHRyaWJ1dGVcbiAgfVxuXG4gIGlzVGVybWluYWxCbG9jaygpIHtcbiAgICByZXR1cm4gZ2V0QmxvY2tDb25maWcodGhpcy5nZXRMYXN0QXR0cmlidXRlKCkpPy50ZXJtaW5hbFxuICB9XG5cbiAgYnJlYWtzT25SZXR1cm4oKSB7XG4gICAgcmV0dXJuIGdldEJsb2NrQ29uZmlnKHRoaXMuZ2V0TGFzdEF0dHJpYnV0ZSgpKT8uYnJlYWtPblJldHVyblxuICB9XG5cbiAgZmluZExpbmVCcmVha0luRGlyZWN0aW9uRnJvbVBvc2l0aW9uKGRpcmVjdGlvbiwgcG9zaXRpb24pIHtcbiAgICBjb25zdCBzdHJpbmcgPSB0aGlzLnRvU3RyaW5nKClcbiAgICBsZXQgcmVzdWx0XG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgXCJmb3J3YXJkXCI6XG4gICAgICAgIHJlc3VsdCA9IHN0cmluZy5pbmRleE9mKFwiXFxuXCIsIHBvc2l0aW9uKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcImJhY2t3YXJkXCI6XG4gICAgICAgIHJlc3VsdCA9IHN0cmluZy5zbGljZSgwLCBwb3NpdGlvbikubGFzdEluZGV4T2YoXCJcXG5cIilcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgfVxuXG4gIGNvbnRlbnRzRm9ySW5zcGVjdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogdGhpcy50ZXh0Lmluc3BlY3QoKSxcbiAgICAgIGF0dHJpYnV0ZXM6IHRoaXMuYXR0cmlidXRlcyxcbiAgICB9XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0LnRvU3RyaW5nKClcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogdGhpcy50ZXh0LFxuICAgICAgYXR0cmlidXRlczogdGhpcy5hdHRyaWJ1dGVzLFxuICAgICAgaHRtbEF0dHJpYnV0ZXM6IHRoaXMuaHRtbEF0dHJpYnV0ZXMsXG4gICAgfVxuICB9XG5cbiAgLy8gQklESVxuXG4gIGdldERpcmVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0LmdldERpcmVjdGlvbigpXG4gIH1cblxuICBpc1JUTCgpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0LmlzUlRMKClcbiAgfVxuXG4gIC8vIFNwbGl0dGFibGVcblxuICBnZXRMZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dC5nZXRMZW5ndGgoKVxuICB9XG5cbiAgY2FuQmVDb25zb2xpZGF0ZWRXaXRoKGJsb2NrKSB7XG4gICAgcmV0dXJuICF0aGlzLmhhc0F0dHJpYnV0ZXMoKSAmJiAhYmxvY2suaGFzQXR0cmlidXRlcygpICYmIHRoaXMuZ2V0RGlyZWN0aW9uKCkgPT09IGJsb2NrLmdldERpcmVjdGlvbigpXG4gIH1cblxuICBjb25zb2xpZGF0ZVdpdGgoYmxvY2spIHtcbiAgICBjb25zdCBuZXdsaW5lVGV4dCA9IFRleHQudGV4dEZvclN0cmluZ1dpdGhBdHRyaWJ1dGVzKFwiXFxuXCIpXG4gICAgY29uc3QgdGV4dCA9IHRoaXMuZ2V0VGV4dFdpdGhvdXRCbG9ja0JyZWFrKCkuYXBwZW5kVGV4dChuZXdsaW5lVGV4dClcbiAgICByZXR1cm4gdGhpcy5jb3B5V2l0aFRleHQodGV4dC5hcHBlbmRUZXh0KGJsb2NrLnRleHQpKVxuICB9XG5cbiAgc3BsaXRBdE9mZnNldChvZmZzZXQpIHtcbiAgICBsZXQgbGVmdCwgcmlnaHRcbiAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICBsZWZ0ID0gbnVsbFxuICAgICAgcmlnaHQgPSB0aGlzXG4gICAgfSBlbHNlIGlmIChvZmZzZXQgPT09IHRoaXMuZ2V0TGVuZ3RoKCkpIHtcbiAgICAgIGxlZnQgPSB0aGlzXG4gICAgICByaWdodCA9IG51bGxcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IHRoaXMuY29weVdpdGhUZXh0KHRoaXMudGV4dC5nZXRUZXh0QXRSYW5nZShbIDAsIG9mZnNldCBdKSlcbiAgICAgIHJpZ2h0ID0gdGhpcy5jb3B5V2l0aFRleHQodGhpcy50ZXh0LmdldFRleHRBdFJhbmdlKFsgb2Zmc2V0LCB0aGlzLmdldExlbmd0aCgpIF0pKVxuICAgIH1cbiAgICByZXR1cm4gWyBsZWZ0LCByaWdodCBdXG4gIH1cblxuICBnZXRCbG9ja0JyZWFrUG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dC5nZXRMZW5ndGgoKSAtIDFcbiAgfVxuXG4gIGdldFRleHRXaXRob3V0QmxvY2tCcmVhaygpIHtcbiAgICBpZiAodGV4dEVuZHNJbkJsb2NrQnJlYWsodGhpcy50ZXh0KSkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dC5nZXRUZXh0QXRSYW5nZShbIDAsIHRoaXMuZ2V0QmxvY2tCcmVha1Bvc2l0aW9uKCkgXSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dC5jb3B5KClcbiAgICB9XG4gIH1cblxuICAvLyBHcm91cGluZ1xuXG4gIGNhbkJlR3JvdXBlZChkZXB0aCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbZGVwdGhdXG4gIH1cblxuICBjYW5CZUdyb3VwZWRXaXRoKG90aGVyQmxvY2ssIGRlcHRoKSB7XG4gICAgY29uc3Qgb3RoZXJBdHRyaWJ1dGVzID0gb3RoZXJCbG9jay5nZXRBdHRyaWJ1dGVzKClcbiAgICBjb25zdCBvdGhlckF0dHJpYnV0ZSA9IG90aGVyQXR0cmlidXRlc1tkZXB0aF1cbiAgICBjb25zdCBhdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZXNbZGVwdGhdXG5cbiAgICByZXR1cm4gKFxuICAgICAgYXR0cmlidXRlID09PSBvdGhlckF0dHJpYnV0ZSAmJlxuICAgICAgIShnZXRCbG9ja0NvbmZpZyhhdHRyaWJ1dGUpLmdyb3VwID09PSBmYWxzZSAmJiAhZ2V0TGlzdEF0dHJpYnV0ZU5hbWVzKCkuaW5jbHVkZXMob3RoZXJBdHRyaWJ1dGVzW2RlcHRoICsgMV0pKSAmJlxuICAgICAgKHRoaXMuZ2V0RGlyZWN0aW9uKCkgPT09IG90aGVyQmxvY2suZ2V0RGlyZWN0aW9uKCkgfHwgb3RoZXJCbG9jay5pc0VtcHR5KCkpXG4gICAgKVxuICB9XG59XG5cbi8vIEJsb2NrIGJyZWFrc1xuXG5jb25zdCBhcHBseUJsb2NrQnJlYWtUb1RleHQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHRleHQgPSB1bm1hcmtFeGlzdGluZ0lubmVyQmxvY2tCcmVha3NJblRleHQodGV4dClcbiAgdGV4dCA9IGFkZEJsb2NrQnJlYWtUb1RleHQodGV4dClcbiAgcmV0dXJuIHRleHRcbn1cblxuY29uc3QgdW5tYXJrRXhpc3RpbmdJbm5lckJsb2NrQnJlYWtzSW5UZXh0ID0gZnVuY3Rpb24odGV4dCkge1xuICBsZXQgbW9kaWZpZWQgPSBmYWxzZVxuICBjb25zdCBwaWVjZXMgPSB0ZXh0LmdldFBpZWNlcygpXG5cbiAgbGV0IGlubmVyUGllY2VzID0gcGllY2VzLnNsaWNlKDAsIHBpZWNlcy5sZW5ndGggLSAxKVxuICBjb25zdCBsYXN0UGllY2UgPSBwaWVjZXNbcGllY2VzLmxlbmd0aCAtIDFdXG5cbiAgaWYgKCFsYXN0UGllY2UpIHJldHVybiB0ZXh0XG5cbiAgaW5uZXJQaWVjZXMgPSBpbm5lclBpZWNlcy5tYXAoKHBpZWNlKSA9PiB7XG4gICAgaWYgKHBpZWNlLmlzQmxvY2tCcmVhaygpKSB7XG4gICAgICBtb2RpZmllZCA9IHRydWVcbiAgICAgIHJldHVybiB1bm1hcmtCbG9ja0JyZWFrUGllY2UocGllY2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwaWVjZVxuICAgIH1cbiAgfSlcblxuICBpZiAobW9kaWZpZWQpIHtcbiAgICByZXR1cm4gbmV3IFRleHQoWyAuLi5pbm5lclBpZWNlcywgbGFzdFBpZWNlIF0pXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxufVxuXG5jb25zdCBibG9ja0JyZWFrVGV4dCA9IFRleHQudGV4dEZvclN0cmluZ1dpdGhBdHRyaWJ1dGVzKFwiXFxuXCIsIHsgYmxvY2tCcmVhazogdHJ1ZSB9KVxuXG5jb25zdCBhZGRCbG9ja0JyZWFrVG9UZXh0ID0gZnVuY3Rpb24odGV4dCkge1xuICBpZiAodGV4dEVuZHNJbkJsb2NrQnJlYWsodGV4dCkpIHtcbiAgICByZXR1cm4gdGV4dFxuICB9IGVsc2Uge1xuICAgIHJldHVybiB0ZXh0LmFwcGVuZFRleHQoYmxvY2tCcmVha1RleHQpXG4gIH1cbn1cblxuY29uc3QgdGV4dEVuZHNJbkJsb2NrQnJlYWsgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIGNvbnN0IGxlbmd0aCA9IHRleHQuZ2V0TGVuZ3RoKClcbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGNvbnN0IGVuZFRleHQgPSB0ZXh0LmdldFRleHRBdFJhbmdlKFsgbGVuZ3RoIC0gMSwgbGVuZ3RoIF0pXG4gIHJldHVybiBlbmRUZXh0LmlzQmxvY2tCcmVhaygpXG59XG5cbmNvbnN0IHVubWFya0Jsb2NrQnJlYWtQaWVjZSA9IChwaWVjZSkgPT4gcGllY2UuY29weVdpdGhvdXRBdHRyaWJ1dGUoXCJibG9ja0JyZWFrXCIpXG5cbi8vIEF0dHJpYnV0ZXNcblxuY29uc3QgZXhwYW5kQXR0cmlidXRlID0gZnVuY3Rpb24oYXR0cmlidXRlKSB7XG4gIGNvbnN0IHsgbGlzdEF0dHJpYnV0ZSB9ID0gZ2V0QmxvY2tDb25maWcoYXR0cmlidXRlKVxuICBpZiAobGlzdEF0dHJpYnV0ZSkge1xuICAgIHJldHVybiBbIGxpc3RBdHRyaWJ1dGUsIGF0dHJpYnV0ZSBdXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFsgYXR0cmlidXRlIF1cbiAgfVxufVxuXG4vLyBBcnJheSBoZWxwZXJzXG5cbmNvbnN0IGdldExhc3RFbGVtZW50ID0gKGFycmF5KSA9PiBhcnJheS5zbGljZSgtMSlbMF1cblxuY29uc3QgcmVtb3ZlTGFzdFZhbHVlID0gZnVuY3Rpb24oYXJyYXksIHZhbHVlKSB7XG4gIGNvbnN0IGluZGV4ID0gYXJyYXkubGFzdEluZGV4T2YodmFsdWUpXG4gIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICByZXR1cm4gYXJyYXlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3BsaWNlQXJyYXkoYXJyYXksIGluZGV4LCAxKVxuICB9XG59XG4iLCAiaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5pbXBvcnQgVHJpeE9iamVjdCBmcm9tIFwidHJpeC9jb3JlL29iamVjdFwiIC8vIERvbid0IG92ZXJyaWRlIHdpbmRvdy5PYmplY3RcblxuaW1wb3J0IFRleHQgZnJvbSBcInRyaXgvbW9kZWxzL3RleHRcIlxuaW1wb3J0IEJsb2NrIGZyb20gXCJ0cml4L21vZGVscy9ibG9ja1wiXG5pbXBvcnQgU3BsaXR0YWJsZUxpc3QgZnJvbSBcInRyaXgvbW9kZWxzL3NwbGl0dGFibGVfbGlzdFwiXG5pbXBvcnQgSGFzaCBmcm9tIFwidHJpeC9jb3JlL2NvbGxlY3Rpb25zL2hhc2hcIlxuaW1wb3J0IE9iamVjdE1hcCBmcm9tIFwidHJpeC9jb3JlL2NvbGxlY3Rpb25zL29iamVjdF9tYXBcIlxuXG5pbXBvcnQgeyBhcnJheXNBcmVFcXVhbCwgZ2V0QmxvY2tDb25maWcsIG5vcm1hbGl6ZVJhbmdlLCByYW5nZUlzQ29sbGFwc2VkIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9jdW1lbnQgZXh0ZW5kcyBUcml4T2JqZWN0IHtcbiAgc3RhdGljIGZyb21KU09OKGRvY3VtZW50SlNPTikge1xuICAgIGNvbnN0IGJsb2NrcyA9IEFycmF5LmZyb20oZG9jdW1lbnRKU09OKS5tYXAoKGJsb2NrSlNPTikgPT4gQmxvY2suZnJvbUpTT04oYmxvY2tKU09OKSlcbiAgICByZXR1cm4gbmV3IHRoaXMoYmxvY2tzKVxuICB9XG5cbiAgc3RhdGljIGZyb21TdHJpbmcoc3RyaW5nLCB0ZXh0QXR0cmlidXRlcykge1xuICAgIGNvbnN0IHRleHQgPSBUZXh0LnRleHRGb3JTdHJpbmdXaXRoQXR0cmlidXRlcyhzdHJpbmcsIHRleHRBdHRyaWJ1dGVzKVxuICAgIHJldHVybiBuZXcgdGhpcyhbIG5ldyBCbG9jayh0ZXh0KSBdKVxuICB9XG5cbiAgY29uc3RydWN0b3IoYmxvY2tzID0gW10pIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgaWYgKGJsb2Nrcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGJsb2NrcyA9IFsgbmV3IEJsb2NrKCkgXVxuICAgIH1cbiAgICB0aGlzLmJsb2NrTGlzdCA9IFNwbGl0dGFibGVMaXN0LmJveChibG9ja3MpXG4gIH1cblxuICBpc0VtcHR5KCkge1xuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5nZXRCbG9ja0F0SW5kZXgoMClcbiAgICByZXR1cm4gdGhpcy5ibG9ja0xpc3QubGVuZ3RoID09PSAxICYmIGJsb2NrLmlzRW1wdHkoKSAmJiAhYmxvY2suaGFzQXR0cmlidXRlcygpXG4gIH1cblxuICBjb3B5KG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGJsb2NrcyA9IG9wdGlvbnMuY29uc29saWRhdGVCbG9ja3MgPyB0aGlzLmJsb2NrTGlzdC5jb25zb2xpZGF0ZSgpLnRvQXJyYXkoKSA6IHRoaXMuYmxvY2tMaXN0LnRvQXJyYXkoKVxuXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrcylcbiAgfVxuXG4gIGNvcHlVc2luZ09iamVjdHNGcm9tRG9jdW1lbnQoc291cmNlRG9jdW1lbnQpIHtcbiAgICBjb25zdCBvYmplY3RNYXAgPSBuZXcgT2JqZWN0TWFwKHNvdXJjZURvY3VtZW50LmdldE9iamVjdHMoKSlcbiAgICByZXR1cm4gdGhpcy5jb3B5VXNpbmdPYmplY3RNYXAob2JqZWN0TWFwKVxuICB9XG5cbiAgY29weVVzaW5nT2JqZWN0TWFwKG9iamVjdE1hcCkge1xuICAgIGNvbnN0IGJsb2NrcyA9IHRoaXMuZ2V0QmxvY2tzKCkubWFwKChibG9jaykgPT4ge1xuICAgICAgY29uc3QgbWFwcGVkQmxvY2sgPSBvYmplY3RNYXAuZmluZChibG9jaylcbiAgICAgIHJldHVybiBtYXBwZWRCbG9jayB8fCBibG9jay5jb3B5VXNpbmdPYmplY3RNYXAob2JqZWN0TWFwKVxuICAgIH0pXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrcylcbiAgfVxuXG4gIGNvcHlXaXRoQmFzZUJsb2NrQXR0cmlidXRlcyhibG9ja0F0dHJpYnV0ZXMgPSBbXSkge1xuICAgIGNvbnN0IGJsb2NrcyA9IHRoaXMuZ2V0QmxvY2tzKCkubWFwKChibG9jaykgPT4ge1xuICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGJsb2NrQXR0cmlidXRlcy5jb25jYXQoYmxvY2suZ2V0QXR0cmlidXRlcygpKVxuICAgICAgcmV0dXJuIGJsb2NrLmNvcHlXaXRoQXR0cmlidXRlcyhhdHRyaWJ1dGVzKVxuICAgIH0pXG5cbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoYmxvY2tzKVxuICB9XG5cbiAgcmVwbGFjZUJsb2NrKG9sZEJsb2NrLCBuZXdCbG9jaykge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5ibG9ja0xpc3QuaW5kZXhPZihvbGRCbG9jaylcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5ibG9ja0xpc3QucmVwbGFjZU9iamVjdEF0SW5kZXgobmV3QmxvY2ssIGluZGV4KSlcbiAgfVxuXG4gIGluc2VydERvY3VtZW50QXRSYW5nZShkb2N1bWVudCwgcmFuZ2UpIHtcbiAgICBjb25zdCB7IGJsb2NrTGlzdCB9ID0gZG9jdW1lbnRcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHJhbmdlKVxuICAgIGxldCBbIHBvc2l0aW9uIF0gPSByYW5nZVxuICAgIGNvbnN0IHsgaW5kZXgsIG9mZnNldCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihwb3NpdGlvbilcblxuICAgIGxldCByZXN1bHQgPSB0aGlzXG4gICAgY29uc3QgYmxvY2sgPSB0aGlzLmdldEJsb2NrQXRQb3NpdGlvbihwb3NpdGlvbilcblxuICAgIGlmIChyYW5nZUlzQ29sbGFwc2VkKHJhbmdlKSAmJiBibG9jay5pc0VtcHR5KCkgJiYgIWJsb2NrLmhhc0F0dHJpYnV0ZXMoKSkge1xuICAgICAgcmVzdWx0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IocmVzdWx0LmJsb2NrTGlzdC5yZW1vdmVPYmplY3RBdEluZGV4KGluZGV4KSlcbiAgICB9IGVsc2UgaWYgKGJsb2NrLmdldEJsb2NrQnJlYWtQb3NpdGlvbigpID09PSBvZmZzZXQpIHtcbiAgICAgIHBvc2l0aW9uKytcbiAgICB9XG5cbiAgICByZXN1bHQgPSByZXN1bHQucmVtb3ZlVGV4dEF0UmFuZ2UocmFuZ2UpXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHJlc3VsdC5ibG9ja0xpc3QuaW5zZXJ0U3BsaXR0YWJsZUxpc3RBdFBvc2l0aW9uKGJsb2NrTGlzdCwgcG9zaXRpb24pKVxuICB9XG5cbiAgbWVyZ2VEb2N1bWVudEF0UmFuZ2UoZG9jdW1lbnQsIHJhbmdlKSB7XG4gICAgbGV0IGZvcm1hdHRlZERvY3VtZW50LCByZXN1bHRcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IFsgc3RhcnRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBjb25zdCBzdGFydExvY2F0aW9uID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihzdGFydFBvc2l0aW9uKVxuICAgIGNvbnN0IGJsb2NrQXR0cmlidXRlcyA9IHRoaXMuZ2V0QmxvY2tBdEluZGV4KHN0YXJ0TG9jYXRpb24uaW5kZXgpLmdldEF0dHJpYnV0ZXMoKVxuICAgIGNvbnN0IGJhc2VCbG9ja0F0dHJpYnV0ZXMgPSBkb2N1bWVudC5nZXRCYXNlQmxvY2tBdHRyaWJ1dGVzKClcbiAgICBjb25zdCB0cmFpbGluZ0Jsb2NrQXR0cmlidXRlcyA9IGJsb2NrQXR0cmlidXRlcy5zbGljZSgtYmFzZUJsb2NrQXR0cmlidXRlcy5sZW5ndGgpXG5cbiAgICBpZiAoYXJyYXlzQXJlRXF1YWwoYmFzZUJsb2NrQXR0cmlidXRlcywgdHJhaWxpbmdCbG9ja0F0dHJpYnV0ZXMpKSB7XG4gICAgICBjb25zdCBsZWFkaW5nQmxvY2tBdHRyaWJ1dGVzID0gYmxvY2tBdHRyaWJ1dGVzLnNsaWNlKDAsIC1iYXNlQmxvY2tBdHRyaWJ1dGVzLmxlbmd0aClcbiAgICAgIGZvcm1hdHRlZERvY3VtZW50ID0gZG9jdW1lbnQuY29weVdpdGhCYXNlQmxvY2tBdHRyaWJ1dGVzKGxlYWRpbmdCbG9ja0F0dHJpYnV0ZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1hdHRlZERvY3VtZW50ID0gZG9jdW1lbnQuY29weSh7IGNvbnNvbGlkYXRlQmxvY2tzOiB0cnVlIH0pLmNvcHlXaXRoQmFzZUJsb2NrQXR0cmlidXRlcyhibG9ja0F0dHJpYnV0ZXMpXG4gICAgfVxuXG4gICAgY29uc3QgYmxvY2tDb3VudCA9IGZvcm1hdHRlZERvY3VtZW50LmdldEJsb2NrQ291bnQoKVxuICAgIGNvbnN0IGZpcnN0QmxvY2sgPSBmb3JtYXR0ZWREb2N1bWVudC5nZXRCbG9ja0F0SW5kZXgoMClcblxuICAgIGlmIChhcnJheXNBcmVFcXVhbChibG9ja0F0dHJpYnV0ZXMsIGZpcnN0QmxvY2suZ2V0QXR0cmlidXRlcygpKSkge1xuICAgICAgY29uc3QgZmlyc3RUZXh0ID0gZmlyc3RCbG9jay5nZXRUZXh0V2l0aG91dEJsb2NrQnJlYWsoKVxuICAgICAgcmVzdWx0ID0gdGhpcy5pbnNlcnRUZXh0QXRSYW5nZShmaXJzdFRleHQsIHJhbmdlKVxuXG4gICAgICBpZiAoYmxvY2tDb3VudCA+IDEpIHtcbiAgICAgICAgZm9ybWF0dGVkRG9jdW1lbnQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihmb3JtYXR0ZWREb2N1bWVudC5nZXRCbG9ja3MoKS5zbGljZSgxKSlcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZmlyc3RUZXh0LmdldExlbmd0aCgpXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5pbnNlcnREb2N1bWVudEF0UmFuZ2UoZm9ybWF0dGVkRG9jdW1lbnQsIHBvc2l0aW9uKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB0aGlzLmluc2VydERvY3VtZW50QXRSYW5nZShmb3JtYXR0ZWREb2N1bWVudCwgcmFuZ2UpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgaW5zZXJ0VGV4dEF0UmFuZ2UodGV4dCwgcmFuZ2UpIHtcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IFsgc3RhcnRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBjb25zdCB7IGluZGV4LCBvZmZzZXQgfSA9IHRoaXMubG9jYXRpb25Gcm9tUG9zaXRpb24oc3RhcnRQb3NpdGlvbilcblxuICAgIGNvbnN0IGRvY3VtZW50ID0gdGhpcy5yZW1vdmVUZXh0QXRSYW5nZShyYW5nZSlcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoXG4gICAgICBkb2N1bWVudC5ibG9ja0xpc3QuZWRpdE9iamVjdEF0SW5kZXgoaW5kZXgsIChibG9jaykgPT5cbiAgICAgICAgYmxvY2suY29weVdpdGhUZXh0KGJsb2NrLnRleHQuaW5zZXJ0VGV4dEF0UG9zaXRpb24odGV4dCwgb2Zmc2V0KSlcbiAgICAgIClcbiAgICApXG4gIH1cblxuICByZW1vdmVUZXh0QXRSYW5nZShyYW5nZSkge1xuICAgIGxldCBibG9ja3NcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IFsgbGVmdFBvc2l0aW9uLCByaWdodFBvc2l0aW9uIF0gPSByYW5nZVxuICAgIGlmIChyYW5nZUlzQ29sbGFwc2VkKHJhbmdlKSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgY29uc3QgWyBsZWZ0TG9jYXRpb24sIHJpZ2h0TG9jYXRpb24gXSA9IEFycmF5LmZyb20odGhpcy5sb2NhdGlvblJhbmdlRnJvbVJhbmdlKHJhbmdlKSlcblxuICAgIGNvbnN0IGxlZnRJbmRleCA9IGxlZnRMb2NhdGlvbi5pbmRleFxuICAgIGNvbnN0IGxlZnRPZmZzZXQgPSBsZWZ0TG9jYXRpb24ub2Zmc2V0XG4gICAgY29uc3QgbGVmdEJsb2NrID0gdGhpcy5nZXRCbG9ja0F0SW5kZXgobGVmdEluZGV4KVxuXG4gICAgY29uc3QgcmlnaHRJbmRleCA9IHJpZ2h0TG9jYXRpb24uaW5kZXhcbiAgICBjb25zdCByaWdodE9mZnNldCA9IHJpZ2h0TG9jYXRpb24ub2Zmc2V0XG4gICAgY29uc3QgcmlnaHRCbG9jayA9IHRoaXMuZ2V0QmxvY2tBdEluZGV4KHJpZ2h0SW5kZXgpXG5cbiAgICBjb25zdCByZW1vdmVSaWdodE5ld2xpbmUgPVxuICAgICAgcmlnaHRQb3NpdGlvbiAtIGxlZnRQb3NpdGlvbiA9PT0gMSAmJlxuICAgICAgbGVmdEJsb2NrLmdldEJsb2NrQnJlYWtQb3NpdGlvbigpID09PSBsZWZ0T2Zmc2V0ICYmXG4gICAgICByaWdodEJsb2NrLmdldEJsb2NrQnJlYWtQb3NpdGlvbigpICE9PSByaWdodE9mZnNldCAmJlxuICAgICAgcmlnaHRCbG9jay50ZXh0LmdldFN0cmluZ0F0UG9zaXRpb24ocmlnaHRPZmZzZXQpID09PSBcIlxcblwiXG5cbiAgICBpZiAocmVtb3ZlUmlnaHROZXdsaW5lKSB7XG4gICAgICBibG9ja3MgPSB0aGlzLmJsb2NrTGlzdC5lZGl0T2JqZWN0QXRJbmRleChyaWdodEluZGV4LCAoYmxvY2spID0+XG4gICAgICAgIGJsb2NrLmNvcHlXaXRoVGV4dChibG9jay50ZXh0LnJlbW92ZVRleHRBdFJhbmdlKFsgcmlnaHRPZmZzZXQsIHJpZ2h0T2Zmc2V0ICsgMSBdKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGJsb2NrXG4gICAgICBjb25zdCBsZWZ0VGV4dCA9IGxlZnRCbG9jay50ZXh0LmdldFRleHRBdFJhbmdlKFsgMCwgbGVmdE9mZnNldCBdKVxuICAgICAgY29uc3QgcmlnaHRUZXh0ID0gcmlnaHRCbG9jay50ZXh0LmdldFRleHRBdFJhbmdlKFsgcmlnaHRPZmZzZXQsIHJpZ2h0QmxvY2suZ2V0TGVuZ3RoKCkgXSlcbiAgICAgIGNvbnN0IHRleHQgPSBsZWZ0VGV4dC5hcHBlbmRUZXh0KHJpZ2h0VGV4dClcblxuICAgICAgY29uc3QgcmVtb3ZpbmdMZWZ0QmxvY2sgPSBsZWZ0SW5kZXggIT09IHJpZ2h0SW5kZXggJiYgbGVmdE9mZnNldCA9PT0gMFxuICAgICAgY29uc3QgdXNlUmlnaHRCbG9jayA9IHJlbW92aW5nTGVmdEJsb2NrICYmIGxlZnRCbG9jay5nZXRBdHRyaWJ1dGVMZXZlbCgpID49IHJpZ2h0QmxvY2suZ2V0QXR0cmlidXRlTGV2ZWwoKVxuXG4gICAgICBpZiAodXNlUmlnaHRCbG9jaykge1xuICAgICAgICBibG9jayA9IHJpZ2h0QmxvY2suY29weVdpdGhUZXh0KHRleHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBibG9jayA9IGxlZnRCbG9jay5jb3B5V2l0aFRleHQodGV4dClcbiAgICAgIH1cblxuICAgICAgY29uc3QgYWZmZWN0ZWRCbG9ja0NvdW50ID0gcmlnaHRJbmRleCArIDEgLSBsZWZ0SW5kZXhcbiAgICAgIGJsb2NrcyA9IHRoaXMuYmxvY2tMaXN0LnNwbGljZShsZWZ0SW5kZXgsIGFmZmVjdGVkQmxvY2tDb3VudCwgYmxvY2spXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrcylcbiAgfVxuXG4gIG1vdmVUZXh0RnJvbVJhbmdlVG9Qb3NpdGlvbihyYW5nZSwgcG9zaXRpb24pIHtcbiAgICBsZXQgdGV4dFxuICAgIHJhbmdlID0gbm9ybWFsaXplUmFuZ2UocmFuZ2UpXG4gICAgY29uc3QgWyBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBpZiAoc3RhcnRQb3NpdGlvbiA8PSBwb3NpdGlvbiAmJiBwb3NpdGlvbiA8PSBlbmRQb3NpdGlvbikge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLmdldERvY3VtZW50QXRSYW5nZShyYW5nZSlcbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZW1vdmVUZXh0QXRSYW5nZShyYW5nZSlcblxuICAgIGNvbnN0IG1vdmluZ1JpZ2h0d2FyZCA9IHN0YXJ0UG9zaXRpb24gPCBwb3NpdGlvblxuICAgIGlmIChtb3ZpbmdSaWdodHdhcmQpIHtcbiAgICAgIHBvc2l0aW9uIC09IGRvY3VtZW50LmdldExlbmd0aCgpXG4gICAgfVxuXG4gICAgY29uc3QgWyBmaXJzdEJsb2NrLCAuLi5ibG9ja3MgXSA9IGRvY3VtZW50LmdldEJsb2NrcygpXG4gICAgaWYgKGJsb2Nrcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRleHQgPSBmaXJzdEJsb2NrLmdldFRleHRXaXRob3V0QmxvY2tCcmVhaygpXG4gICAgICBpZiAobW92aW5nUmlnaHR3YXJkKSB7XG4gICAgICAgIHBvc2l0aW9uICs9IDFcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGV4dCA9IGZpcnN0QmxvY2sudGV4dFxuICAgIH1cblxuICAgIHJlc3VsdCA9IHJlc3VsdC5pbnNlcnRUZXh0QXRSYW5nZSh0ZXh0LCBwb3NpdGlvbilcbiAgICBpZiAoYmxvY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cblxuICAgIGRvY3VtZW50ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoYmxvY2tzKVxuICAgIHBvc2l0aW9uICs9IHRleHQuZ2V0TGVuZ3RoKClcblxuICAgIHJldHVybiByZXN1bHQuaW5zZXJ0RG9jdW1lbnRBdFJhbmdlKGRvY3VtZW50LCBwb3NpdGlvbilcbiAgfVxuXG4gIGFkZEF0dHJpYnV0ZUF0UmFuZ2UoYXR0cmlidXRlLCB2YWx1ZSwgcmFuZ2UpIHtcbiAgICBsZXQgeyBibG9ja0xpc3QgfSA9IHRoaXNcbiAgICB0aGlzLmVhY2hCbG9ja0F0UmFuZ2UoXG4gICAgICByYW5nZSxcbiAgICAgIChibG9jaywgdGV4dFJhbmdlLCBpbmRleCkgPT5cbiAgICAgICAgYmxvY2tMaXN0ID0gYmxvY2tMaXN0LmVkaXRPYmplY3RBdEluZGV4KGluZGV4LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoZ2V0QmxvY2tDb25maWcoYXR0cmlidXRlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGJsb2NrLmFkZEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGV4dFJhbmdlWzBdID09PSB0ZXh0UmFuZ2VbMV0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJsb2NrXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gYmxvY2suY29weVdpdGhUZXh0KGJsb2NrLnRleHQuYWRkQXR0cmlidXRlQXRSYW5nZShhdHRyaWJ1dGUsIHZhbHVlLCB0ZXh0UmFuZ2UpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICApXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrTGlzdClcbiAgfVxuXG4gIGFkZEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgbGV0IHsgYmxvY2tMaXN0IH0gPSB0aGlzXG4gICAgdGhpcy5lYWNoQmxvY2soXG4gICAgICAoYmxvY2ssIGluZGV4KSA9PiBibG9ja0xpc3QgPSBibG9ja0xpc3QuZWRpdE9iamVjdEF0SW5kZXgoaW5kZXgsICgpID0+IGJsb2NrLmFkZEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKSlcbiAgICApXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrTGlzdClcbiAgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZUF0UmFuZ2UoYXR0cmlidXRlLCByYW5nZSkge1xuICAgIGxldCB7IGJsb2NrTGlzdCB9ID0gdGhpc1xuICAgIHRoaXMuZWFjaEJsb2NrQXRSYW5nZShyYW5nZSwgZnVuY3Rpb24oYmxvY2ssIHRleHRSYW5nZSwgaW5kZXgpIHtcbiAgICAgIGlmIChnZXRCbG9ja0NvbmZpZyhhdHRyaWJ1dGUpKSB7XG4gICAgICAgIGJsb2NrTGlzdCA9IGJsb2NrTGlzdC5lZGl0T2JqZWN0QXRJbmRleChpbmRleCwgKCkgPT4gYmxvY2sucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSkpXG4gICAgICB9IGVsc2UgaWYgKHRleHRSYW5nZVswXSAhPT0gdGV4dFJhbmdlWzFdKSB7XG4gICAgICAgIGJsb2NrTGlzdCA9IGJsb2NrTGlzdC5lZGl0T2JqZWN0QXRJbmRleChpbmRleCwgKCkgPT5cbiAgICAgICAgICBibG9jay5jb3B5V2l0aFRleHQoYmxvY2sudGV4dC5yZW1vdmVBdHRyaWJ1dGVBdFJhbmdlKGF0dHJpYnV0ZSwgdGV4dFJhbmdlKSlcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrTGlzdClcbiAgfVxuXG4gIHVwZGF0ZUF0dHJpYnV0ZXNGb3JBdHRhY2htZW50KGF0dHJpYnV0ZXMsIGF0dGFjaG1lbnQpIHtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZkF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICBjb25zdCBbIHN0YXJ0UG9zaXRpb24gXSA9IEFycmF5LmZyb20ocmFuZ2UpXG4gICAgY29uc3QgeyBpbmRleCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihzdGFydFBvc2l0aW9uKVxuICAgIGNvbnN0IHRleHQgPSB0aGlzLmdldFRleHRBdEluZGV4KGluZGV4KVxuXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKFxuICAgICAgdGhpcy5ibG9ja0xpc3QuZWRpdE9iamVjdEF0SW5kZXgoaW5kZXgsIChibG9jaykgPT5cbiAgICAgICAgYmxvY2suY29weVdpdGhUZXh0KHRleHQudXBkYXRlQXR0cmlidXRlc0ZvckF0dGFjaG1lbnQoYXR0cmlidXRlcywgYXR0YWNobWVudCkpXG4gICAgICApXG4gICAgKVxuICB9XG5cbiAgcmVtb3ZlQXR0cmlidXRlRm9yQXR0YWNobWVudChhdHRyaWJ1dGUsIGF0dGFjaG1lbnQpIHtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZkF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVBdHRyaWJ1dGVBdFJhbmdlKGF0dHJpYnV0ZSwgcmFuZ2UpXG4gIH1cblxuICBzZXRIVE1MQXR0cmlidXRlQXRQb3NpdGlvbihwb3NpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgICBjb25zdCBibG9jayA9IHRoaXMuZ2V0QmxvY2tBdFBvc2l0aW9uKHBvc2l0aW9uKVxuICAgIGNvbnN0IHVwZGF0ZWRCbG9jayA9IGJsb2NrLmFkZEhUTUxBdHRyaWJ1dGUobmFtZSwgdmFsdWUpXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZUJsb2NrKGJsb2NrLCB1cGRhdGVkQmxvY2spXG4gIH1cblxuICBpbnNlcnRCbG9ja0JyZWFrQXRSYW5nZShyYW5nZSkge1xuICAgIGxldCBibG9ja3NcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IFsgc3RhcnRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBjb25zdCB7IG9mZnNldCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihzdGFydFBvc2l0aW9uKVxuXG4gICAgY29uc3QgZG9jdW1lbnQgPSB0aGlzLnJlbW92ZVRleHRBdFJhbmdlKHJhbmdlKVxuICAgIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICAgIGJsb2NrcyA9IFsgbmV3IEJsb2NrKCkgXVxuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoXG4gICAgICBkb2N1bWVudC5ibG9ja0xpc3QuaW5zZXJ0U3BsaXR0YWJsZUxpc3RBdFBvc2l0aW9uKG5ldyBTcGxpdHRhYmxlTGlzdChibG9ja3MpLCBzdGFydFBvc2l0aW9uKVxuICAgIClcbiAgfVxuXG4gIGFwcGx5QmxvY2tBdHRyaWJ1dGVBdFJhbmdlKGF0dHJpYnV0ZU5hbWUsIHZhbHVlLCByYW5nZSkge1xuICAgIGNvbnN0IGV4cGFuZGVkID0gdGhpcy5leHBhbmRSYW5nZVRvTGluZUJyZWFrc0FuZFNwbGl0QmxvY2tzKHJhbmdlKVxuICAgIGxldCBkb2N1bWVudCA9IGV4cGFuZGVkLmRvY3VtZW50XG4gICAgcmFuZ2UgPSBleHBhbmRlZC5yYW5nZVxuICAgIGNvbnN0IGJsb2NrQ29uZmlnID0gZ2V0QmxvY2tDb25maWcoYXR0cmlidXRlTmFtZSlcblxuICAgIGlmIChibG9ja0NvbmZpZy5saXN0QXR0cmlidXRlKSB7XG4gICAgICBkb2N1bWVudCA9IGRvY3VtZW50LnJlbW92ZUxhc3RMaXN0QXR0cmlidXRlQXRSYW5nZShyYW5nZSwgeyBleGNlcHRBdHRyaWJ1dGVOYW1lOiBhdHRyaWJ1dGVOYW1lIH0pXG4gICAgICBjb25zdCBjb252ZXJ0ZWQgPSBkb2N1bWVudC5jb252ZXJ0TGluZUJyZWFrc1RvQmxvY2tCcmVha3NJblJhbmdlKHJhbmdlKVxuICAgICAgZG9jdW1lbnQgPSBjb252ZXJ0ZWQuZG9jdW1lbnRcbiAgICAgIHJhbmdlID0gY29udmVydGVkLnJhbmdlXG4gICAgfSBlbHNlIGlmIChibG9ja0NvbmZpZy5leGNsdXNpdmUpIHtcbiAgICAgIGRvY3VtZW50ID0gZG9jdW1lbnQucmVtb3ZlQmxvY2tBdHRyaWJ1dGVzQXRSYW5nZShyYW5nZSlcbiAgICB9IGVsc2UgaWYgKGJsb2NrQ29uZmlnLnRlcm1pbmFsKSB7XG4gICAgICBkb2N1bWVudCA9IGRvY3VtZW50LnJlbW92ZUxhc3RUZXJtaW5hbEF0dHJpYnV0ZUF0UmFuZ2UocmFuZ2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50ID0gZG9jdW1lbnQuY29uc29saWRhdGVCbG9ja3NBdFJhbmdlKHJhbmdlKVxuICAgIH1cblxuICAgIHJldHVybiBkb2N1bWVudC5hZGRBdHRyaWJ1dGVBdFJhbmdlKGF0dHJpYnV0ZU5hbWUsIHZhbHVlLCByYW5nZSlcbiAgfVxuXG4gIHJlbW92ZUxhc3RMaXN0QXR0cmlidXRlQXRSYW5nZShyYW5nZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IHsgYmxvY2tMaXN0IH0gPSB0aGlzXG4gICAgdGhpcy5lYWNoQmxvY2tBdFJhbmdlKHJhbmdlLCBmdW5jdGlvbihibG9jaywgdGV4dFJhbmdlLCBpbmRleCkge1xuICAgICAgY29uc3QgbGFzdEF0dHJpYnV0ZU5hbWUgPSBibG9jay5nZXRMYXN0QXR0cmlidXRlKClcbiAgICAgIGlmICghbGFzdEF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoIWdldEJsb2NrQ29uZmlnKGxhc3RBdHRyaWJ1dGVOYW1lKS5saXN0QXR0cmlidXRlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKGxhc3RBdHRyaWJ1dGVOYW1lID09PSBvcHRpb25zLmV4Y2VwdEF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBibG9ja0xpc3QgPSBibG9ja0xpc3QuZWRpdE9iamVjdEF0SW5kZXgoaW5kZXgsICgpID0+IGJsb2NrLnJlbW92ZUF0dHJpYnV0ZShsYXN0QXR0cmlidXRlTmFtZSkpXG4gICAgfSlcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoYmxvY2tMaXN0KVxuICB9XG5cbiAgcmVtb3ZlTGFzdFRlcm1pbmFsQXR0cmlidXRlQXRSYW5nZShyYW5nZSkge1xuICAgIGxldCB7IGJsb2NrTGlzdCB9ID0gdGhpc1xuICAgIHRoaXMuZWFjaEJsb2NrQXRSYW5nZShyYW5nZSwgZnVuY3Rpb24oYmxvY2ssIHRleHRSYW5nZSwgaW5kZXgpIHtcbiAgICAgIGNvbnN0IGxhc3RBdHRyaWJ1dGVOYW1lID0gYmxvY2suZ2V0TGFzdEF0dHJpYnV0ZSgpXG4gICAgICBpZiAoIWxhc3RBdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKCFnZXRCbG9ja0NvbmZpZyhsYXN0QXR0cmlidXRlTmFtZSkudGVybWluYWwpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBibG9ja0xpc3QgPSBibG9ja0xpc3QuZWRpdE9iamVjdEF0SW5kZXgoaW5kZXgsICgpID0+IGJsb2NrLnJlbW92ZUF0dHJpYnV0ZShsYXN0QXR0cmlidXRlTmFtZSkpXG4gICAgfSlcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoYmxvY2tMaXN0KVxuICB9XG5cbiAgcmVtb3ZlQmxvY2tBdHRyaWJ1dGVzQXRSYW5nZShyYW5nZSkge1xuICAgIGxldCB7IGJsb2NrTGlzdCB9ID0gdGhpc1xuICAgIHRoaXMuZWFjaEJsb2NrQXRSYW5nZShyYW5nZSwgZnVuY3Rpb24oYmxvY2ssIHRleHRSYW5nZSwgaW5kZXgpIHtcbiAgICAgIGlmIChibG9jay5oYXNBdHRyaWJ1dGVzKCkpIHtcbiAgICAgICAgYmxvY2tMaXN0ID0gYmxvY2tMaXN0LmVkaXRPYmplY3RBdEluZGV4KGluZGV4LCAoKSA9PiBibG9jay5jb3B5V2l0aG91dEF0dHJpYnV0ZXMoKSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihibG9ja0xpc3QpXG4gIH1cblxuICBleHBhbmRSYW5nZVRvTGluZUJyZWFrc0FuZFNwbGl0QmxvY2tzKHJhbmdlKSB7XG4gICAgbGV0IHBvc2l0aW9uXG4gICAgcmFuZ2UgPSBub3JtYWxpemVSYW5nZShyYW5nZSlcbiAgICBsZXQgWyBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBjb25zdCBzdGFydExvY2F0aW9uID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihzdGFydFBvc2l0aW9uKVxuICAgIGNvbnN0IGVuZExvY2F0aW9uID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihlbmRQb3NpdGlvbilcbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzXG5cbiAgICBjb25zdCBzdGFydEJsb2NrID0gZG9jdW1lbnQuZ2V0QmxvY2tBdEluZGV4KHN0YXJ0TG9jYXRpb24uaW5kZXgpXG4gICAgc3RhcnRMb2NhdGlvbi5vZmZzZXQgPSBzdGFydEJsb2NrLmZpbmRMaW5lQnJlYWtJbkRpcmVjdGlvbkZyb21Qb3NpdGlvbihcImJhY2t3YXJkXCIsIHN0YXJ0TG9jYXRpb24ub2Zmc2V0KVxuICAgIGlmIChzdGFydExvY2F0aW9uLm9mZnNldCAhPSBudWxsKSB7XG4gICAgICBwb3NpdGlvbiA9IGRvY3VtZW50LnBvc2l0aW9uRnJvbUxvY2F0aW9uKHN0YXJ0TG9jYXRpb24pXG4gICAgICBkb2N1bWVudCA9IGRvY3VtZW50Lmluc2VydEJsb2NrQnJlYWtBdFJhbmdlKFsgcG9zaXRpb24sIHBvc2l0aW9uICsgMSBdKVxuICAgICAgZW5kTG9jYXRpb24uaW5kZXggKz0gMVxuICAgICAgZW5kTG9jYXRpb24ub2Zmc2V0IC09IGRvY3VtZW50LmdldEJsb2NrQXRJbmRleChzdGFydExvY2F0aW9uLmluZGV4KS5nZXRMZW5ndGgoKVxuICAgICAgc3RhcnRMb2NhdGlvbi5pbmRleCArPSAxXG4gICAgfVxuICAgIHN0YXJ0TG9jYXRpb24ub2Zmc2V0ID0gMFxuXG4gICAgaWYgKGVuZExvY2F0aW9uLm9mZnNldCA9PT0gMCAmJiBlbmRMb2NhdGlvbi5pbmRleCA+IHN0YXJ0TG9jYXRpb24uaW5kZXgpIHtcbiAgICAgIGVuZExvY2F0aW9uLmluZGV4IC09IDFcbiAgICAgIGVuZExvY2F0aW9uLm9mZnNldCA9IGRvY3VtZW50LmdldEJsb2NrQXRJbmRleChlbmRMb2NhdGlvbi5pbmRleCkuZ2V0QmxvY2tCcmVha1Bvc2l0aW9uKClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZW5kQmxvY2sgPSBkb2N1bWVudC5nZXRCbG9ja0F0SW5kZXgoZW5kTG9jYXRpb24uaW5kZXgpXG4gICAgICBpZiAoZW5kQmxvY2sudGV4dC5nZXRTdHJpbmdBdFJhbmdlKFsgZW5kTG9jYXRpb24ub2Zmc2V0IC0gMSwgZW5kTG9jYXRpb24ub2Zmc2V0IF0pID09PSBcIlxcblwiKSB7XG4gICAgICAgIGVuZExvY2F0aW9uLm9mZnNldCAtPSAxXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmRMb2NhdGlvbi5vZmZzZXQgPSBlbmRCbG9jay5maW5kTGluZUJyZWFrSW5EaXJlY3Rpb25Gcm9tUG9zaXRpb24oXCJmb3J3YXJkXCIsIGVuZExvY2F0aW9uLm9mZnNldClcbiAgICAgIH1cbiAgICAgIGlmIChlbmRMb2NhdGlvbi5vZmZzZXQgIT09IGVuZEJsb2NrLmdldEJsb2NrQnJlYWtQb3NpdGlvbigpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gZG9jdW1lbnQucG9zaXRpb25Gcm9tTG9jYXRpb24oZW5kTG9jYXRpb24pXG4gICAgICAgIGRvY3VtZW50ID0gZG9jdW1lbnQuaW5zZXJ0QmxvY2tCcmVha0F0UmFuZ2UoWyBwb3NpdGlvbiwgcG9zaXRpb24gKyAxIF0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RhcnRQb3NpdGlvbiA9IGRvY3VtZW50LnBvc2l0aW9uRnJvbUxvY2F0aW9uKHN0YXJ0TG9jYXRpb24pXG4gICAgZW5kUG9zaXRpb24gPSBkb2N1bWVudC5wb3NpdGlvbkZyb21Mb2NhdGlvbihlbmRMb2NhdGlvbilcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKFsgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24gXSlcblxuICAgIHJldHVybiB7IGRvY3VtZW50LCByYW5nZSB9XG4gIH1cblxuICBjb252ZXJ0TGluZUJyZWFrc1RvQmxvY2tCcmVha3NJblJhbmdlKHJhbmdlKSB7XG4gICAgcmFuZ2UgPSBub3JtYWxpemVSYW5nZShyYW5nZSlcbiAgICBsZXQgWyBwb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBjb25zdCBzdHJpbmcgPSB0aGlzLmdldFN0cmluZ0F0UmFuZ2UocmFuZ2UpLnNsaWNlKDAsIC0xKVxuICAgIGxldCBkb2N1bWVudCA9IHRoaXNcblxuICAgIHN0cmluZy5yZXBsYWNlKC8uKj9cXG4vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHBvc2l0aW9uICs9IG1hdGNoLmxlbmd0aFxuICAgICAgZG9jdW1lbnQgPSBkb2N1bWVudC5pbnNlcnRCbG9ja0JyZWFrQXRSYW5nZShbIHBvc2l0aW9uIC0gMSwgcG9zaXRpb24gXSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIHsgZG9jdW1lbnQsIHJhbmdlIH1cbiAgfVxuXG4gIGNvbnNvbGlkYXRlQmxvY2tzQXRSYW5nZShyYW5nZSkge1xuICAgIHJhbmdlID0gbm9ybWFsaXplUmFuZ2UocmFuZ2UpXG4gICAgY29uc3QgWyBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBjb25zdCBzdGFydEluZGV4ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihzdGFydFBvc2l0aW9uKS5pbmRleFxuICAgIGNvbnN0IGVuZEluZGV4ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihlbmRQb3NpdGlvbikuaW5kZXhcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5ibG9ja0xpc3QuY29uc29saWRhdGVGcm9tSW5kZXhUb0luZGV4KHN0YXJ0SW5kZXgsIGVuZEluZGV4KSlcbiAgfVxuXG4gIGdldERvY3VtZW50QXRSYW5nZShyYW5nZSkge1xuICAgIHJhbmdlID0gbm9ybWFsaXplUmFuZ2UocmFuZ2UpXG4gICAgY29uc3QgYmxvY2tzID0gdGhpcy5ibG9ja0xpc3QuZ2V0U3BsaXR0YWJsZUxpc3RJblJhbmdlKHJhbmdlKS50b0FycmF5KClcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoYmxvY2tzKVxuICB9XG5cbiAgZ2V0U3RyaW5nQXRSYW5nZShyYW5nZSkge1xuICAgIGxldCBlbmRJbmRleFxuICAgIGNvbnN0IGFycmF5ID0gcmFuZ2UgPSBub3JtYWxpemVSYW5nZShyYW5nZSksXG4gICAgICBlbmRQb3NpdGlvbiA9IGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdXG4gICAgaWYgKGVuZFBvc2l0aW9uICE9PSB0aGlzLmdldExlbmd0aCgpKSB7XG4gICAgICBlbmRJbmRleCA9IC0xXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldERvY3VtZW50QXRSYW5nZShyYW5nZSkudG9TdHJpbmcoKS5zbGljZSgwLCBlbmRJbmRleClcbiAgfVxuXG4gIGdldEJsb2NrQXRJbmRleChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmJsb2NrTGlzdC5nZXRPYmplY3RBdEluZGV4KGluZGV4KVxuICB9XG5cbiAgZ2V0QmxvY2tBdFBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgY29uc3QgeyBpbmRleCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihwb3NpdGlvbilcbiAgICByZXR1cm4gdGhpcy5nZXRCbG9ja0F0SW5kZXgoaW5kZXgpXG4gIH1cblxuICBnZXRUZXh0QXRJbmRleChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmdldEJsb2NrQXRJbmRleChpbmRleCk/LnRleHRcbiAgfVxuXG4gIGdldFRleHRBdFBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgY29uc3QgeyBpbmRleCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihwb3NpdGlvbilcbiAgICByZXR1cm4gdGhpcy5nZXRUZXh0QXRJbmRleChpbmRleClcbiAgfVxuXG4gIGdldFBpZWNlQXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgIGNvbnN0IHsgaW5kZXgsIG9mZnNldCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihwb3NpdGlvbilcbiAgICByZXR1cm4gdGhpcy5nZXRUZXh0QXRJbmRleChpbmRleCkuZ2V0UGllY2VBdFBvc2l0aW9uKG9mZnNldClcbiAgfVxuXG4gIGdldENoYXJhY3RlckF0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICBjb25zdCB7IGluZGV4LCBvZmZzZXQgfSA9IHRoaXMubG9jYXRpb25Gcm9tUG9zaXRpb24ocG9zaXRpb24pXG4gICAgcmV0dXJuIHRoaXMuZ2V0VGV4dEF0SW5kZXgoaW5kZXgpLmdldFN0cmluZ0F0UmFuZ2UoWyBvZmZzZXQsIG9mZnNldCArIDEgXSlcbiAgfVxuXG4gIGdldExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5ibG9ja0xpc3QuZ2V0RW5kUG9zaXRpb24oKVxuICB9XG5cbiAgZ2V0QmxvY2tzKCkge1xuICAgIHJldHVybiB0aGlzLmJsb2NrTGlzdC50b0FycmF5KClcbiAgfVxuXG4gIGdldEJsb2NrQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tMaXN0Lmxlbmd0aFxuICB9XG5cbiAgZ2V0RWRpdENvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmVkaXRDb3VudFxuICB9XG5cbiAgZWFjaEJsb2NrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tMaXN0LmVhY2hPYmplY3QoY2FsbGJhY2spXG4gIH1cblxuICBlYWNoQmxvY2tBdFJhbmdlKHJhbmdlLCBjYWxsYmFjaykge1xuICAgIGxldCBibG9jaywgdGV4dFJhbmdlXG4gICAgcmFuZ2UgPSBub3JtYWxpemVSYW5nZShyYW5nZSlcbiAgICBjb25zdCBbIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uIF0gPSByYW5nZVxuICAgIGNvbnN0IHN0YXJ0TG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uRnJvbVBvc2l0aW9uKHN0YXJ0UG9zaXRpb24pXG4gICAgY29uc3QgZW5kTG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uRnJvbVBvc2l0aW9uKGVuZFBvc2l0aW9uKVxuXG4gICAgaWYgKHN0YXJ0TG9jYXRpb24uaW5kZXggPT09IGVuZExvY2F0aW9uLmluZGV4KSB7XG4gICAgICBibG9jayA9IHRoaXMuZ2V0QmxvY2tBdEluZGV4KHN0YXJ0TG9jYXRpb24uaW5kZXgpXG4gICAgICB0ZXh0UmFuZ2UgPSBbIHN0YXJ0TG9jYXRpb24ub2Zmc2V0LCBlbmRMb2NhdGlvbi5vZmZzZXQgXVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGJsb2NrLCB0ZXh0UmFuZ2UsIHN0YXJ0TG9jYXRpb24uaW5kZXgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGluZGV4ID0gc3RhcnRMb2NhdGlvbi5pbmRleDsgaW5kZXggPD0gZW5kTG9jYXRpb24uaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgYmxvY2sgPSB0aGlzLmdldEJsb2NrQXRJbmRleChpbmRleClcbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICAgICAgY2FzZSBzdGFydExvY2F0aW9uLmluZGV4OlxuICAgICAgICAgICAgICB0ZXh0UmFuZ2UgPSBbIHN0YXJ0TG9jYXRpb24ub2Zmc2V0LCBibG9jay50ZXh0LmdldExlbmd0aCgpIF1cbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgZW5kTG9jYXRpb24uaW5kZXg6XG4gICAgICAgICAgICAgIHRleHRSYW5nZSA9IFsgMCwgZW5kTG9jYXRpb24ub2Zmc2V0IF1cbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHRleHRSYW5nZSA9IFsgMCwgYmxvY2sudGV4dC5nZXRMZW5ndGgoKSBdXG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxiYWNrKGJsb2NrLCB0ZXh0UmFuZ2UsIGluZGV4KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0Q29tbW9uQXR0cmlidXRlc0F0UmFuZ2UocmFuZ2UpIHtcbiAgICByYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHJhbmdlKVxuICAgIGNvbnN0IFsgc3RhcnRQb3NpdGlvbiBdID0gcmFuZ2VcbiAgICBpZiAocmFuZ2VJc0NvbGxhcHNlZChyYW5nZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldENvbW1vbkF0dHJpYnV0ZXNBdFBvc2l0aW9uKHN0YXJ0UG9zaXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHRleHRBdHRyaWJ1dGVzID0gW11cbiAgICAgIGNvbnN0IGJsb2NrQXR0cmlidXRlcyA9IFtdXG5cbiAgICAgIHRoaXMuZWFjaEJsb2NrQXRSYW5nZShyYW5nZSwgZnVuY3Rpb24oYmxvY2ssIHRleHRSYW5nZSkge1xuICAgICAgICBpZiAodGV4dFJhbmdlWzBdICE9PSB0ZXh0UmFuZ2VbMV0pIHtcbiAgICAgICAgICB0ZXh0QXR0cmlidXRlcy5wdXNoKGJsb2NrLnRleHQuZ2V0Q29tbW9uQXR0cmlidXRlc0F0UmFuZ2UodGV4dFJhbmdlKSlcbiAgICAgICAgICByZXR1cm4gYmxvY2tBdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlc0ZvckJsb2NrKGJsb2NrKSlcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIEhhc2guZnJvbUNvbW1vbkF0dHJpYnV0ZXNPZk9iamVjdHModGV4dEF0dHJpYnV0ZXMpXG4gICAgICAgIC5tZXJnZShIYXNoLmZyb21Db21tb25BdHRyaWJ1dGVzT2ZPYmplY3RzKGJsb2NrQXR0cmlidXRlcykpXG4gICAgICAgIC50b09iamVjdCgpXG4gICAgfVxuICB9XG5cbiAgZ2V0Q29tbW9uQXR0cmlidXRlc0F0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICBsZXQga2V5LCB2YWx1ZVxuICAgIGNvbnN0IHsgaW5kZXgsIG9mZnNldCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihwb3NpdGlvbilcbiAgICBjb25zdCBibG9jayA9IHRoaXMuZ2V0QmxvY2tBdEluZGV4KGluZGV4KVxuICAgIGlmICghYmxvY2spIHtcbiAgICAgIHJldHVybiB7fVxuICAgIH1cblxuICAgIGNvbnN0IGNvbW1vbkF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzRm9yQmxvY2soYmxvY2spXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IGJsb2NrLnRleHQuZ2V0QXR0cmlidXRlc0F0UG9zaXRpb24ob2Zmc2V0KVxuICAgIGNvbnN0IGF0dHJpYnV0ZXNMZWZ0ID0gYmxvY2sudGV4dC5nZXRBdHRyaWJ1dGVzQXRQb3NpdGlvbihvZmZzZXQgLSAxKVxuICAgIGNvbnN0IGluaGVyaXRhYmxlQXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKGNvbmZpZy50ZXh0QXR0cmlidXRlcykuZmlsdGVyKChrZXkpID0+IHtcbiAgICAgIHJldHVybiBjb25maWcudGV4dEF0dHJpYnV0ZXNba2V5XS5pbmhlcml0YWJsZVxuICAgIH0pXG5cbiAgICBmb3IgKGtleSBpbiBhdHRyaWJ1dGVzTGVmdCkge1xuICAgICAgdmFsdWUgPSBhdHRyaWJ1dGVzTGVmdFtrZXldXG4gICAgICBpZiAodmFsdWUgPT09IGF0dHJpYnV0ZXNba2V5XSB8fCBpbmhlcml0YWJsZUF0dHJpYnV0ZXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBjb21tb25BdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb21tb25BdHRyaWJ1dGVzXG4gIH1cblxuICBnZXRSYW5nZU9mQ29tbW9uQXR0cmlidXRlQXRQb3NpdGlvbihhdHRyaWJ1dGVOYW1lLCBwb3NpdGlvbikge1xuICAgIGNvbnN0IHsgaW5kZXgsIG9mZnNldCB9ID0gdGhpcy5sb2NhdGlvbkZyb21Qb3NpdGlvbihwb3NpdGlvbilcbiAgICBjb25zdCB0ZXh0ID0gdGhpcy5nZXRUZXh0QXRJbmRleChpbmRleClcbiAgICBjb25zdCBbIHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQgXSA9IEFycmF5LmZyb20odGV4dC5nZXRFeHBhbmRlZFJhbmdlRm9yQXR0cmlidXRlQXRPZmZzZXQoYXR0cmlidXRlTmFtZSwgb2Zmc2V0KSlcblxuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5wb3NpdGlvbkZyb21Mb2NhdGlvbih7IGluZGV4LCBvZmZzZXQ6IHN0YXJ0T2Zmc2V0IH0pXG4gICAgY29uc3QgZW5kID0gdGhpcy5wb3NpdGlvbkZyb21Mb2NhdGlvbih7IGluZGV4LCBvZmZzZXQ6IGVuZE9mZnNldCB9KVxuICAgIHJldHVybiBub3JtYWxpemVSYW5nZShbIHN0YXJ0LCBlbmQgXSlcbiAgfVxuXG4gIGdldEJhc2VCbG9ja0F0dHJpYnV0ZXMoKSB7XG4gICAgbGV0IGJhc2VCbG9ja0F0dHJpYnV0ZXMgPSB0aGlzLmdldEJsb2NrQXRJbmRleCgwKS5nZXRBdHRyaWJ1dGVzKClcblxuICAgIGZvciAobGV0IGJsb2NrSW5kZXggPSAxOyBibG9ja0luZGV4IDwgdGhpcy5nZXRCbG9ja0NvdW50KCk7IGJsb2NrSW5kZXgrKykge1xuICAgICAgY29uc3QgYmxvY2tBdHRyaWJ1dGVzID0gdGhpcy5nZXRCbG9ja0F0SW5kZXgoYmxvY2tJbmRleCkuZ2V0QXR0cmlidXRlcygpXG4gICAgICBjb25zdCBsYXN0QXR0cmlidXRlSW5kZXggPSBNYXRoLm1pbihiYXNlQmxvY2tBdHRyaWJ1dGVzLmxlbmd0aCwgYmxvY2tBdHRyaWJ1dGVzLmxlbmd0aClcblxuICAgICAgYmFzZUJsb2NrQXR0cmlidXRlcyA9ICgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsYXN0QXR0cmlidXRlSW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgICBpZiAoYmxvY2tBdHRyaWJ1dGVzW2luZGV4XSAhPT0gYmFzZUJsb2NrQXR0cmlidXRlc1tpbmRleF0pIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKGJsb2NrQXR0cmlidXRlc1tpbmRleF0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfSkoKVxuICAgIH1cblxuICAgIHJldHVybiBiYXNlQmxvY2tBdHRyaWJ1dGVzXG4gIH1cblxuICBnZXRBdHRhY2htZW50QnlJZChhdHRhY2htZW50SWQpIHtcbiAgICBmb3IgKGNvbnN0IGF0dGFjaG1lbnQgb2YgdGhpcy5nZXRBdHRhY2htZW50cygpKSB7XG4gICAgICBpZiAoYXR0YWNobWVudC5pZCA9PT0gYXR0YWNobWVudElkKSB7XG4gICAgICAgIHJldHVybiBhdHRhY2htZW50XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0QXR0YWNobWVudFBpZWNlcygpIHtcbiAgICBsZXQgYXR0YWNobWVudFBpZWNlcyA9IFtdXG4gICAgdGhpcy5ibG9ja0xpc3QuZWFjaE9iamVjdCgoeyB0ZXh0IH0pID0+IGF0dGFjaG1lbnRQaWVjZXMgPSBhdHRhY2htZW50UGllY2VzLmNvbmNhdCh0ZXh0LmdldEF0dGFjaG1lbnRQaWVjZXMoKSkpXG4gICAgcmV0dXJuIGF0dGFjaG1lbnRQaWVjZXNcbiAgfVxuXG4gIGdldEF0dGFjaG1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLmdldEF0dGFjaG1lbnRQaWVjZXMoKS5tYXAoKHBpZWNlKSA9PiBwaWVjZS5hdHRhY2htZW50KVxuICB9XG5cbiAgZ2V0UmFuZ2VPZkF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGxldCBwb3NpdGlvbiA9IDBcbiAgICBjb25zdCBpdGVyYWJsZSA9IHRoaXMuYmxvY2tMaXN0LnRvQXJyYXkoKVxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBpdGVyYWJsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IHsgdGV4dCB9ID0gaXRlcmFibGVbaW5kZXhdXG4gICAgICBjb25zdCB0ZXh0UmFuZ2UgPSB0ZXh0LmdldFJhbmdlT2ZBdHRhY2htZW50KGF0dGFjaG1lbnQpXG4gICAgICBpZiAodGV4dFJhbmdlKSB7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVSYW5nZShbIHBvc2l0aW9uICsgdGV4dFJhbmdlWzBdLCBwb3NpdGlvbiArIHRleHRSYW5nZVsxXSBdKVxuICAgICAgfVxuICAgICAgcG9zaXRpb24gKz0gdGV4dC5nZXRMZW5ndGgoKVxuICAgIH1cbiAgfVxuXG4gIGdldExvY2F0aW9uUmFuZ2VPZkF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZU9mQXR0YWNobWVudChhdHRhY2htZW50KVxuICAgIHJldHVybiB0aGlzLmxvY2F0aW9uUmFuZ2VGcm9tUmFuZ2UocmFuZ2UpXG4gIH1cblxuICBnZXRBdHRhY2htZW50UGllY2VGb3JBdHRhY2htZW50KGF0dGFjaG1lbnQpIHtcbiAgICBmb3IgKGNvbnN0IHBpZWNlIG9mIHRoaXMuZ2V0QXR0YWNobWVudFBpZWNlcygpKSB7XG4gICAgICBpZiAocGllY2UuYXR0YWNobWVudCA9PT0gYXR0YWNobWVudCkge1xuICAgICAgICByZXR1cm4gcGllY2VcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmaW5kUmFuZ2VzRm9yQmxvY2tBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkge1xuICAgIGxldCBwb3NpdGlvbiA9IDBcbiAgICBjb25zdCByYW5nZXMgPSBbXVxuXG4gICAgdGhpcy5nZXRCbG9ja3MoKS5mb3JFYWNoKChibG9jaykgPT4ge1xuICAgICAgY29uc3QgbGVuZ3RoID0gYmxvY2suZ2V0TGVuZ3RoKClcbiAgICAgIGlmIChibG9jay5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgcmFuZ2VzLnB1c2goWyBwb3NpdGlvbiwgcG9zaXRpb24gKyBsZW5ndGggXSlcbiAgICAgIH1cbiAgICAgIHBvc2l0aW9uICs9IGxlbmd0aFxuICAgIH0pXG5cbiAgICByZXR1cm4gcmFuZ2VzXG4gIH1cblxuICBmaW5kUmFuZ2VzRm9yVGV4dEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCB7IHdpdGhWYWx1ZSB9ID0ge30pIHtcbiAgICBsZXQgcG9zaXRpb24gPSAwXG4gICAgbGV0IHJhbmdlID0gW11cbiAgICBjb25zdCByYW5nZXMgPSBbXVxuXG4gICAgY29uc3QgbWF0Y2ggPSBmdW5jdGlvbihwaWVjZSkge1xuICAgICAgaWYgKHdpdGhWYWx1ZSkge1xuICAgICAgICByZXR1cm4gcGllY2UuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpID09PSB3aXRoVmFsdWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwaWVjZS5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmdldFBpZWNlcygpLmZvckVhY2goKHBpZWNlKSA9PiB7XG4gICAgICBjb25zdCBsZW5ndGggPSBwaWVjZS5nZXRMZW5ndGgoKVxuICAgICAgaWYgKG1hdGNoKHBpZWNlKSkge1xuICAgICAgICBpZiAocmFuZ2VbMV0gPT09IHBvc2l0aW9uKSB7XG4gICAgICAgICAgcmFuZ2VbMV0gPSBwb3NpdGlvbiArIGxlbmd0aFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhbmdlcy5wdXNoKHJhbmdlID0gWyBwb3NpdGlvbiwgcG9zaXRpb24gKyBsZW5ndGggXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoXG4gICAgfSlcblxuICAgIHJldHVybiByYW5nZXNcbiAgfVxuXG4gIGxvY2F0aW9uRnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLmJsb2NrTGlzdC5maW5kSW5kZXhBbmRPZmZzZXRBdFBvc2l0aW9uKE1hdGgubWF4KDAsIHBvc2l0aW9uKSlcbiAgICBpZiAobG9jYXRpb24uaW5kZXggIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJsb2NrcyA9IHRoaXMuZ2V0QmxvY2tzKClcbiAgICAgIHJldHVybiB7IGluZGV4OiBibG9ja3MubGVuZ3RoIC0gMSwgb2Zmc2V0OiBibG9ja3NbYmxvY2tzLmxlbmd0aCAtIDFdLmdldExlbmd0aCgpIH1cbiAgICB9XG4gIH1cblxuICBwb3NpdGlvbkZyb21Mb2NhdGlvbihsb2NhdGlvbikge1xuICAgIHJldHVybiB0aGlzLmJsb2NrTGlzdC5maW5kUG9zaXRpb25BdEluZGV4QW5kT2Zmc2V0KGxvY2F0aW9uLmluZGV4LCBsb2NhdGlvbi5vZmZzZXQpXG4gIH1cblxuICBsb2NhdGlvblJhbmdlRnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVJhbmdlKHRoaXMubG9jYXRpb25Gcm9tUG9zaXRpb24ocG9zaXRpb24pKVxuICB9XG5cbiAgbG9jYXRpb25SYW5nZUZyb21SYW5nZShyYW5nZSkge1xuICAgIHJhbmdlID0gbm9ybWFsaXplUmFuZ2UocmFuZ2UpXG4gICAgaWYgKCFyYW5nZSkgcmV0dXJuXG5cbiAgICBjb25zdCBbIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uIF0gPSBBcnJheS5mcm9tKHJhbmdlKVxuICAgIGNvbnN0IHN0YXJ0TG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uRnJvbVBvc2l0aW9uKHN0YXJ0UG9zaXRpb24pXG4gICAgY29uc3QgZW5kTG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uRnJvbVBvc2l0aW9uKGVuZFBvc2l0aW9uKVxuICAgIHJldHVybiBub3JtYWxpemVSYW5nZShbIHN0YXJ0TG9jYXRpb24sIGVuZExvY2F0aW9uIF0pXG4gIH1cblxuICByYW5nZUZyb21Mb2NhdGlvblJhbmdlKGxvY2F0aW9uUmFuZ2UpIHtcbiAgICBsZXQgcmlnaHRQb3NpdGlvblxuICAgIGxvY2F0aW9uUmFuZ2UgPSBub3JtYWxpemVSYW5nZShsb2NhdGlvblJhbmdlKVxuICAgIGNvbnN0IGxlZnRQb3NpdGlvbiA9IHRoaXMucG9zaXRpb25Gcm9tTG9jYXRpb24obG9jYXRpb25SYW5nZVswXSlcbiAgICBpZiAoIXJhbmdlSXNDb2xsYXBzZWQobG9jYXRpb25SYW5nZSkpIHtcbiAgICAgIHJpZ2h0UG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uRnJvbUxvY2F0aW9uKGxvY2F0aW9uUmFuZ2VbMV0pXG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVSYW5nZShbIGxlZnRQb3NpdGlvbiwgcmlnaHRQb3NpdGlvbiBdKVxuICB9XG5cbiAgaXNFcXVhbFRvKGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tMaXN0LmlzRXF1YWxUbyhkb2N1bWVudD8uYmxvY2tMaXN0KVxuICB9XG5cbiAgZ2V0VGV4dHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tzKCkubWFwKChibG9jaykgPT4gYmxvY2sudGV4dClcbiAgfVxuXG4gIGdldFBpZWNlcygpIHtcbiAgICBjb25zdCBwaWVjZXMgPSBbXVxuXG4gICAgQXJyYXkuZnJvbSh0aGlzLmdldFRleHRzKCkpLmZvckVhY2goKHRleHQpID0+IHtcbiAgICAgIHBpZWNlcy5wdXNoKC4uLkFycmF5LmZyb20odGV4dC5nZXRQaWVjZXMoKSB8fCBbXSkpXG4gICAgfSlcblxuICAgIHJldHVybiBwaWVjZXNcbiAgfVxuXG4gIGdldE9iamVjdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tzKCkuY29uY2F0KHRoaXMuZ2V0VGV4dHMoKSkuY29uY2F0KHRoaXMuZ2V0UGllY2VzKCkpXG4gIH1cblxuICB0b1NlcmlhbGl6YWJsZURvY3VtZW50KCkge1xuICAgIGNvbnN0IGJsb2NrcyA9IFtdXG4gICAgdGhpcy5ibG9ja0xpc3QuZWFjaE9iamVjdCgoYmxvY2spID0+IGJsb2Nrcy5wdXNoKGJsb2NrLmNvcHlXaXRoVGV4dChibG9jay50ZXh0LnRvU2VyaWFsaXphYmxlVGV4dCgpKSkpXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGJsb2NrcylcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmJsb2NrTGlzdC50b1N0cmluZygpXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tMaXN0LnRvSlNPTigpXG4gIH1cblxuICB0b0NvbnNvbGUoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuYmxvY2tMaXN0LnRvQXJyYXkoKS5tYXAoKGJsb2NrKSA9PiBKU09OLnBhcnNlKGJsb2NrLnRleHQudG9Db25zb2xlKCkpKSlcbiAgfVxufVxuXG5jb25zdCBhdHRyaWJ1dGVzRm9yQmxvY2sgPSBmdW5jdGlvbihibG9jaykge1xuICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGJsb2NrLmdldExhc3RBdHRyaWJ1dGUoKVxuICBpZiAoYXR0cmlidXRlTmFtZSkge1xuICAgIGF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0gPSB0cnVlXG4gIH1cbiAgcmV0dXJuIGF0dHJpYnV0ZXNcbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZVxuICAgIG5vLWNhc2UtZGVjbGFyYXRpb25zLFxuICAgIG5vLWlycmVndWxhci13aGl0ZXNwYWNlLFxuKi9cbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tIFwidHJpeC9jb25maWdcIlxuaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcbmltcG9ydCBEb2N1bWVudCBmcm9tIFwidHJpeC9tb2RlbHMvZG9jdW1lbnRcIlxuaW1wb3J0IEhUTUxTYW5pdGl6ZXIgZnJvbSBcInRyaXgvbW9kZWxzL2h0bWxfc2FuaXRpemVyXCJcblxuaW1wb3J0IHtcbiAgYXJyYXlzQXJlRXF1YWwsXG4gIGJyZWFrYWJsZVdoaXRlc3BhY2VQYXR0ZXJuLFxuICBlbGVtZW50Q29udGFpbnNOb2RlLFxuICBmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZSxcbiAgZ2V0QmxvY2tUYWdOYW1lcyxcbiAgbWFrZUVsZW1lbnQsXG4gIG5vZGVJc0F0dGFjaG1lbnRFbGVtZW50LFxuICBub3JtYWxpemVTcGFjZXMsXG4gIHJlbW92ZU5vZGUsXG4gIHNxdWlzaEJyZWFrYWJsZVdoaXRlc3BhY2UsXG4gIHRhZ05hbWUsXG4gIHdhbGtUcmVlLFxufSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5jb25zdCBwaWVjZUZvclN0cmluZyA9IChzdHJpbmcsIGF0dHJpYnV0ZXMgPSB7fSkgPT4ge1xuICBjb25zdCB0eXBlID0gXCJzdHJpbmdcIlxuICBzdHJpbmcgPSBub3JtYWxpemVTcGFjZXMoc3RyaW5nKVxuICByZXR1cm4geyBzdHJpbmcsIGF0dHJpYnV0ZXMsIHR5cGUgfVxufVxuXG5jb25zdCBwaWVjZUZvckF0dGFjaG1lbnQgPSAoYXR0YWNobWVudCwgYXR0cmlidXRlcyA9IHt9KSA9PiB7XG4gIGNvbnN0IHR5cGUgPSBcImF0dGFjaG1lbnRcIlxuICByZXR1cm4geyBhdHRhY2htZW50LCBhdHRyaWJ1dGVzLCB0eXBlIH1cbn1cblxuY29uc3QgYmxvY2tGb3JBdHRyaWJ1dGVzID0gKGF0dHJpYnV0ZXMgPSB7fSwgaHRtbEF0dHJpYnV0ZXMgPSB7fSkgPT4ge1xuICBjb25zdCB0ZXh0ID0gW11cbiAgcmV0dXJuIHsgdGV4dCwgYXR0cmlidXRlcywgaHRtbEF0dHJpYnV0ZXMgfVxufVxuXG5jb25zdCBwYXJzZVRyaXhEYXRhQXR0cmlidXRlID0gKGVsZW1lbnQsIG5hbWUpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShlbGVtZW50LmdldEF0dHJpYnV0ZShgZGF0YS10cml4LSR7bmFtZX1gKSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4ge31cbiAgfVxufVxuXG5jb25zdCBnZXRJbWFnZURpbWVuc2lvbnMgPSAoZWxlbWVudCkgPT4ge1xuICBjb25zdCB3aWR0aCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwid2lkdGhcIilcbiAgY29uc3QgaGVpZ2h0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIilcbiAgY29uc3QgZGltZW5zaW9ucyA9IHt9XG4gIGlmICh3aWR0aCkge1xuICAgIGRpbWVuc2lvbnMud2lkdGggPSBwYXJzZUludCh3aWR0aCwgMTApXG4gIH1cbiAgaWYgKGhlaWdodCkge1xuICAgIGRpbWVuc2lvbnMuaGVpZ2h0ID0gcGFyc2VJbnQoaGVpZ2h0LCAxMClcbiAgfVxuICByZXR1cm4gZGltZW5zaW9uc1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIVE1MUGFyc2VyIGV4dGVuZHMgQmFzaWNPYmplY3Qge1xuICBzdGF0aWMgcGFyc2UoaHRtbCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyB0aGlzKGh0bWwsIG9wdGlvbnMpXG4gICAgcGFyc2VyLnBhcnNlKClcbiAgICByZXR1cm4gcGFyc2VyXG4gIH1cblxuICBjb25zdHJ1Y3RvcihodG1sLCB7IHJlZmVyZW5jZUVsZW1lbnQgfSA9IHt9KSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMuaHRtbCA9IGh0bWxcbiAgICB0aGlzLnJlZmVyZW5jZUVsZW1lbnQgPSByZWZlcmVuY2VFbGVtZW50XG4gICAgdGhpcy5ibG9ja3MgPSBbXVxuICAgIHRoaXMuYmxvY2tFbGVtZW50cyA9IFtdXG4gICAgdGhpcy5wcm9jZXNzZWRFbGVtZW50cyA9IFtdXG4gIH1cblxuICBnZXREb2N1bWVudCgpIHtcbiAgICByZXR1cm4gRG9jdW1lbnQuZnJvbUpTT04odGhpcy5ibG9ja3MpXG4gIH1cblxuICAvLyBIVE1MIHBhcnNpbmdcblxuICBwYXJzZSgpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5jcmVhdGVIaWRkZW5Db250YWluZXIoKVxuICAgICAgSFRNTFNhbml0aXplci5zZXRIVE1MKHRoaXMuY29udGFpbmVyRWxlbWVudCwgdGhpcy5odG1sKVxuICAgICAgY29uc3Qgd2Fsa2VyID0gd2Fsa1RyZWUodGhpcy5jb250YWluZXJFbGVtZW50LCB7IHVzaW5nRmlsdGVyOiBub2RlRmlsdGVyIH0pXG4gICAgICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzTm9kZSh3YWxrZXIuY3VycmVudE5vZGUpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGVCbG9ja0VsZW1lbnRNYXJnaW5zVG9OZXdsaW5lcygpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMucmVtb3ZlSGlkZGVuQ29udGFpbmVyKClcbiAgICB9XG4gIH1cblxuICBjcmVhdGVIaWRkZW5Db250YWluZXIoKSB7XG4gICAgaWYgKHRoaXMucmVmZXJlbmNlRWxlbWVudCkge1xuICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50ID0gdGhpcy5yZWZlcmVuY2VFbGVtZW50LmNsb25lTm9kZShmYWxzZSlcbiAgICAgIHRoaXMuY29udGFpbmVyRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKVxuICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtdHJpeC1pbnRlcm5hbFwiLCBcIlwiKVxuICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxuICAgICAgcmV0dXJuIHRoaXMucmVmZXJlbmNlRWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNvbnRhaW5lckVsZW1lbnQsIHRoaXMucmVmZXJlbmNlRWxlbWVudC5uZXh0U2libGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50ID0gbWFrZUVsZW1lbnQoeyB0YWdOYW1lOiBcImRpdlwiLCBzdHlsZTogeyBkaXNwbGF5OiBcIm5vbmVcIiB9IH0pXG4gICAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lckVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlSGlkZGVuQ29udGFpbmVyKCkge1xuICAgIHJldHVybiByZW1vdmVOb2RlKHRoaXMuY29udGFpbmVyRWxlbWVudClcbiAgfVxuXG4gIHByb2Nlc3NOb2RlKG5vZGUpIHtcbiAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICAgIGNhc2UgTm9kZS5URVhUX05PREU6XG4gICAgICAgIGlmICghdGhpcy5pc0luc2lnbmlmaWNhbnRUZXh0Tm9kZShub2RlKSkge1xuICAgICAgICAgIHRoaXMuYXBwZW5kQmxvY2tGb3JUZXh0Tm9kZShub2RlKVxuICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NUZXh0Tm9kZShub2RlKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFOlxuICAgICAgICB0aGlzLmFwcGVuZEJsb2NrRm9yRWxlbWVudChub2RlKVxuICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzRWxlbWVudChub2RlKVxuICAgIH1cbiAgfVxuXG4gIGFwcGVuZEJsb2NrRm9yVGV4dE5vZGUobm9kZSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBub2RlLnBhcmVudE5vZGVcbiAgICBpZiAoZWxlbWVudCA9PT0gdGhpcy5jdXJyZW50QmxvY2tFbGVtZW50ICYmIHRoaXMuaXNCbG9ja0VsZW1lbnQobm9kZS5wcmV2aW91c1NpYmxpbmcpKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcHBlbmRTdHJpbmdXaXRoQXR0cmlidXRlcyhcIlxcblwiKVxuICAgIH0gZWxzZSBpZiAoZWxlbWVudCA9PT0gdGhpcy5jb250YWluZXJFbGVtZW50IHx8IHRoaXMuaXNCbG9ja0VsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLmdldEJsb2NrQXR0cmlidXRlcyhlbGVtZW50KVxuICAgICAgY29uc3QgaHRtbEF0dHJpYnV0ZXMgPSB0aGlzLmdldEJsb2NrSFRNTEF0dHJpYnV0ZXMoZWxlbWVudClcbiAgICAgIGlmICghYXJyYXlzQXJlRXF1YWwoYXR0cmlidXRlcywgdGhpcy5jdXJyZW50QmxvY2s/LmF0dHJpYnV0ZXMpKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEJsb2NrID0gdGhpcy5hcHBlbmRCbG9ja0ZvckF0dHJpYnV0ZXNXaXRoRWxlbWVudChhdHRyaWJ1dGVzLCBlbGVtZW50LCBodG1sQXR0cmlidXRlcylcbiAgICAgICAgdGhpcy5jdXJyZW50QmxvY2tFbGVtZW50ID0gZWxlbWVudFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFwcGVuZEJsb2NrRm9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgY29uc3QgZWxlbWVudElzQmxvY2tFbGVtZW50ID0gdGhpcy5pc0Jsb2NrRWxlbWVudChlbGVtZW50KVxuICAgIGNvbnN0IGN1cnJlbnRCbG9ja0NvbnRhaW5zRWxlbWVudCA9IGVsZW1lbnRDb250YWluc05vZGUodGhpcy5jdXJyZW50QmxvY2tFbGVtZW50LCBlbGVtZW50KVxuXG4gICAgaWYgKGVsZW1lbnRJc0Jsb2NrRWxlbWVudCAmJiAhdGhpcy5pc0Jsb2NrRWxlbWVudChlbGVtZW50LmZpcnN0Q2hpbGQpKSB7XG4gICAgICBpZiAoIXRoaXMuaXNJbnNpZ25pZmljYW50VGV4dE5vZGUoZWxlbWVudC5maXJzdENoaWxkKSB8fCAhdGhpcy5pc0Jsb2NrRWxlbWVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5nZXRCbG9ja0F0dHJpYnV0ZXMoZWxlbWVudClcbiAgICAgICAgY29uc3QgaHRtbEF0dHJpYnV0ZXMgPSB0aGlzLmdldEJsb2NrSFRNTEF0dHJpYnV0ZXMoZWxlbWVudClcbiAgICAgICAgaWYgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIGlmICghKGN1cnJlbnRCbG9ja0NvbnRhaW5zRWxlbWVudCAmJiBhcnJheXNBcmVFcXVhbChhdHRyaWJ1dGVzLCB0aGlzLmN1cnJlbnRCbG9jay5hdHRyaWJ1dGVzKSkpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEJsb2NrID0gdGhpcy5hcHBlbmRCbG9ja0ZvckF0dHJpYnV0ZXNXaXRoRWxlbWVudChhdHRyaWJ1dGVzLCBlbGVtZW50LCBodG1sQXR0cmlidXRlcylcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEJsb2NrRWxlbWVudCA9IGVsZW1lbnRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwZW5kU3RyaW5nV2l0aEF0dHJpYnV0ZXMoXCJcXG5cIilcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudEJsb2NrRWxlbWVudCAmJiAhY3VycmVudEJsb2NrQ29udGFpbnNFbGVtZW50ICYmICFlbGVtZW50SXNCbG9ja0VsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHBhcmVudEJsb2NrRWxlbWVudCA9IHRoaXMuZmluZFBhcmVudEJsb2NrRWxlbWVudChlbGVtZW50KVxuICAgICAgaWYgKHBhcmVudEJsb2NrRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBlbmRCbG9ja0ZvckVsZW1lbnQocGFyZW50QmxvY2tFbGVtZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QmxvY2sgPSB0aGlzLmFwcGVuZEVtcHR5QmxvY2soKVxuICAgICAgICB0aGlzLmN1cnJlbnRCbG9ja0VsZW1lbnQgPSBudWxsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZmluZFBhcmVudEJsb2NrRWxlbWVudChlbGVtZW50KSB7XG4gICAgbGV0IHsgcGFyZW50RWxlbWVudCB9ID0gZWxlbWVudFxuICAgIHdoaWxlIChwYXJlbnRFbGVtZW50ICYmIHBhcmVudEVsZW1lbnQgIT09IHRoaXMuY29udGFpbmVyRWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMuaXNCbG9ja0VsZW1lbnQocGFyZW50RWxlbWVudCkgJiYgdGhpcy5ibG9ja0VsZW1lbnRzLmluY2x1ZGVzKHBhcmVudEVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybiBwYXJlbnRFbGVtZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRFbGVtZW50ID0gcGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBwcm9jZXNzVGV4dE5vZGUobm9kZSkge1xuICAgIGxldCBzdHJpbmcgPSBub2RlLmRhdGFcbiAgICBpZiAoIWVsZW1lbnRDYW5EaXNwbGF5UHJlZm9ybWF0dGVkVGV4dChub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICBzdHJpbmcgPSBzcXVpc2hCcmVha2FibGVXaGl0ZXNwYWNlKHN0cmluZylcbiAgICAgIGlmIChzdHJpbmdFbmRzV2l0aFdoaXRlc3BhY2Uobm9kZS5wcmV2aW91c1NpYmxpbmc/LnRleHRDb250ZW50KSkge1xuICAgICAgICBzdHJpbmcgPSBsZWZ0VHJpbUJyZWFrYWJsZVdoaXRlc3BhY2Uoc3RyaW5nKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hcHBlbmRTdHJpbmdXaXRoQXR0cmlidXRlcyhzdHJpbmcsIHRoaXMuZ2V0VGV4dEF0dHJpYnV0ZXMobm9kZS5wYXJlbnROb2RlKSlcbiAgfVxuXG4gIHByb2Nlc3NFbGVtZW50KGVsZW1lbnQpIHtcbiAgICBsZXQgYXR0cmlidXRlc1xuICAgIGlmIChub2RlSXNBdHRhY2htZW50RWxlbWVudChlbGVtZW50KSkge1xuICAgICAgYXR0cmlidXRlcyA9IHBhcnNlVHJpeERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgXCJhdHRhY2htZW50XCIpXG4gICAgICBpZiAoT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHRleHRBdHRyaWJ1dGVzID0gdGhpcy5nZXRUZXh0QXR0cmlidXRlcyhlbGVtZW50KVxuICAgICAgICB0aGlzLmFwcGVuZEF0dGFjaG1lbnRXaXRoQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCB0ZXh0QXR0cmlidXRlcylcbiAgICAgICAgLy8gV2UgaGF2ZSBldmVyeXRoaW5nIHdlIG5lZWQgc28gYXZvaWQgcHJvY2Vzc2luZyBpbm5lciBub2Rlc1xuICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IFwiXCJcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NlZEVsZW1lbnRzLnB1c2goZWxlbWVudClcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoICh0YWdOYW1lKGVsZW1lbnQpKSB7XG4gICAgICAgIGNhc2UgXCJiclwiOlxuICAgICAgICAgIGlmICghdGhpcy5pc0V4dHJhQlIoZWxlbWVudCkgJiYgIXRoaXMuaXNCbG9ja0VsZW1lbnQoZWxlbWVudC5uZXh0U2libGluZykpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kU3RyaW5nV2l0aEF0dHJpYnV0ZXMoXCJcXG5cIiwgdGhpcy5nZXRUZXh0QXR0cmlidXRlcyhlbGVtZW50KSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc2VkRWxlbWVudHMucHVzaChlbGVtZW50KVxuICAgICAgICBjYXNlIFwiaW1nXCI6XG4gICAgICAgICAgYXR0cmlidXRlcyA9IHsgdXJsOiBlbGVtZW50LmdldEF0dHJpYnV0ZShcInNyY1wiKSwgY29udGVudFR5cGU6IFwiaW1hZ2VcIiB9XG4gICAgICAgICAgY29uc3Qgb2JqZWN0ID0gZ2V0SW1hZ2VEaW1lbnNpb25zKGVsZW1lbnQpXG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldXG4gICAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmFwcGVuZEF0dGFjaG1lbnRXaXRoQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCB0aGlzLmdldFRleHRBdHRyaWJ1dGVzKGVsZW1lbnQpKVxuICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NlZEVsZW1lbnRzLnB1c2goZWxlbWVudClcbiAgICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgICAgaWYgKHRoaXMubmVlZHNUYWJsZVNlcGFyYXRvcihlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwZW5kU3RyaW5nV2l0aEF0dHJpYnV0ZXMoY29uZmlnLnBhcnNlci50YWJsZVJvd1NlcGFyYXRvcilcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBcInRkXCI6XG4gICAgICAgICAgaWYgKHRoaXMubmVlZHNUYWJsZVNlcGFyYXRvcihlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwZW5kU3RyaW5nV2l0aEF0dHJpYnV0ZXMoY29uZmlnLnBhcnNlci50YWJsZUNlbGxTZXBhcmF0b3IpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRG9jdW1lbnQgY29uc3RydWN0aW9uXG5cbiAgYXBwZW5kQmxvY2tGb3JBdHRyaWJ1dGVzV2l0aEVsZW1lbnQoYXR0cmlidXRlcywgZWxlbWVudCwgaHRtbEF0dHJpYnV0ZXMgPSB7fSkge1xuICAgIHRoaXMuYmxvY2tFbGVtZW50cy5wdXNoKGVsZW1lbnQpXG4gICAgY29uc3QgYmxvY2sgPSBibG9ja0ZvckF0dHJpYnV0ZXMoYXR0cmlidXRlcywgaHRtbEF0dHJpYnV0ZXMpXG4gICAgdGhpcy5ibG9ja3MucHVzaChibG9jaylcbiAgICByZXR1cm4gYmxvY2tcbiAgfVxuXG4gIGFwcGVuZEVtcHR5QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQmxvY2tGb3JBdHRyaWJ1dGVzV2l0aEVsZW1lbnQoW10sIG51bGwpXG4gIH1cblxuICBhcHBlbmRTdHJpbmdXaXRoQXR0cmlidXRlcyhzdHJpbmcsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRQaWVjZShwaWVjZUZvclN0cmluZyhzdHJpbmcsIGF0dHJpYnV0ZXMpKVxuICB9XG5cbiAgYXBwZW5kQXR0YWNobWVudFdpdGhBdHRyaWJ1dGVzKGF0dGFjaG1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRQaWVjZShwaWVjZUZvckF0dGFjaG1lbnQoYXR0YWNobWVudCwgYXR0cmlidXRlcykpXG4gIH1cblxuICBhcHBlbmRQaWVjZShwaWVjZSkge1xuICAgIGlmICh0aGlzLmJsb2Nrcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuYXBwZW5kRW1wdHlCbG9jaygpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmJsb2Nrc1t0aGlzLmJsb2Nrcy5sZW5ndGggLSAxXS50ZXh0LnB1c2gocGllY2UpXG4gIH1cblxuICBhcHBlbmRTdHJpbmdUb1RleHRBdEluZGV4KHN0cmluZywgaW5kZXgpIHtcbiAgICBjb25zdCB7IHRleHQgfSA9IHRoaXMuYmxvY2tzW2luZGV4XVxuICAgIGNvbnN0IHBpZWNlID0gdGV4dFt0ZXh0Lmxlbmd0aCAtIDFdXG5cbiAgICBpZiAocGllY2U/LnR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHBpZWNlLnN0cmluZyArPSBzdHJpbmdcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRleHQucHVzaChwaWVjZUZvclN0cmluZyhzdHJpbmcpKVxuICAgIH1cbiAgfVxuXG4gIHByZXBlbmRTdHJpbmdUb1RleHRBdEluZGV4KHN0cmluZywgaW5kZXgpIHtcbiAgICBjb25zdCB7IHRleHQgfSA9IHRoaXMuYmxvY2tzW2luZGV4XVxuICAgIGNvbnN0IHBpZWNlID0gdGV4dFswXVxuXG4gICAgaWYgKHBpZWNlPy50eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBwaWVjZS5zdHJpbmcgPSBzdHJpbmcgKyBwaWVjZS5zdHJpbmdcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRleHQudW5zaGlmdChwaWVjZUZvclN0cmluZyhzdHJpbmcpKVxuICAgIH1cbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZSBwYXJzaW5nXG5cbiAgZ2V0VGV4dEF0dHJpYnV0ZXMoZWxlbWVudCkge1xuICAgIGxldCB2YWx1ZVxuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7fVxuICAgIGZvciAoY29uc3QgYXR0cmlidXRlIGluIGNvbmZpZy50ZXh0QXR0cmlidXRlcykge1xuICAgICAgY29uc3QgY29uZmlnQXR0ciA9IGNvbmZpZy50ZXh0QXR0cmlidXRlc1thdHRyaWJ1dGVdXG4gICAgICBpZiAoXG4gICAgICAgIGNvbmZpZ0F0dHIudGFnTmFtZSAmJlxuICAgICAgICBmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZShlbGVtZW50LCB7XG4gICAgICAgICAgbWF0Y2hpbmdTZWxlY3RvcjogY29uZmlnQXR0ci50YWdOYW1lLFxuICAgICAgICAgIHVudGlsTm9kZTogdGhpcy5jb250YWluZXJFbGVtZW50LFxuICAgICAgICB9KVxuICAgICAgKSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbYXR0cmlidXRlXSA9IHRydWVcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnQXR0ci5wYXJzZXIpIHtcbiAgICAgICAgdmFsdWUgPSBjb25maWdBdHRyLnBhcnNlcihlbGVtZW50KVxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBsZXQgYXR0cmlidXRlSW5oZXJpdGVkRnJvbUJsb2NrID0gZmFsc2VcbiAgICAgICAgICBmb3IgKGNvbnN0IGJsb2NrRWxlbWVudCBvZiB0aGlzLmZpbmRCbG9ja0VsZW1lbnRBbmNlc3RvcnMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmIChjb25maWdBdHRyLnBhcnNlcihibG9ja0VsZW1lbnQpID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICBhdHRyaWJ1dGVJbmhlcml0ZWRGcm9tQmxvY2sgPSB0cnVlXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghYXR0cmlidXRlSW5oZXJpdGVkRnJvbUJsb2NrKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPSB2YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb25maWdBdHRyLnN0eWxlUHJvcGVydHkpIHtcbiAgICAgICAgdmFsdWUgPSBlbGVtZW50LnN0eWxlW2NvbmZpZ0F0dHIuc3R5bGVQcm9wZXJ0eV1cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgYXR0cmlidXRlc1thdHRyaWJ1dGVdID0gdmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2RlSXNBdHRhY2htZW50RWxlbWVudChlbGVtZW50KSkge1xuICAgICAgY29uc3Qgb2JqZWN0ID0gcGFyc2VUcml4RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBcImF0dHJpYnV0ZXNcIilcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldXG4gICAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGF0dHJpYnV0ZXNcbiAgfVxuXG4gIGdldEJsb2NrQXR0cmlidXRlcyhlbGVtZW50KSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IFtdXG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gdGhpcy5jb250YWluZXJFbGVtZW50KSB7XG4gICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBpbiBjb25maWcuYmxvY2tBdHRyaWJ1dGVzKSB7XG4gICAgICAgIGNvbnN0IGF0dHJDb25maWcgPSBjb25maWcuYmxvY2tBdHRyaWJ1dGVzW2F0dHJpYnV0ZV1cbiAgICAgICAgaWYgKGF0dHJDb25maWcucGFyc2UgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKHRhZ05hbWUoZWxlbWVudCkgPT09IGF0dHJDb25maWcudGFnTmFtZSkge1xuICAgICAgICAgICAgaWYgKGF0dHJDb25maWcudGVzdD8uKGVsZW1lbnQpIHx8ICFhdHRyQ29uZmlnLnRlc3QpIHtcbiAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZSlcbiAgICAgICAgICAgICAgaWYgKGF0dHJDb25maWcubGlzdEF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyQ29uZmlnLmxpc3RBdHRyaWJ1dGUpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGVcbiAgICB9XG4gICAgcmV0dXJuIGF0dHJpYnV0ZXMucmV2ZXJzZSgpXG4gIH1cblxuICBnZXRCbG9ja0hUTUxBdHRyaWJ1dGVzKGVsZW1lbnQpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgICBjb25zdCBibG9ja0NvbmZpZyA9IE9iamVjdC52YWx1ZXMoY29uZmlnLmJsb2NrQXR0cmlidXRlcykuZmluZChzZXR0aW5ncyA9PiBzZXR0aW5ncy50YWdOYW1lID09PSB0YWdOYW1lKGVsZW1lbnQpKVxuICAgIGNvbnN0IGFsbG93ZWRBdHRyaWJ1dGVzID0gYmxvY2tDb25maWc/Lmh0bWxBdHRyaWJ1dGVzIHx8IFtdXG5cbiAgICBhbGxvd2VkQXR0cmlidXRlcy5mb3JFYWNoKChhdHRyaWJ1dGUpID0+IHtcbiAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbYXR0cmlidXRlXSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIGF0dHJpYnV0ZXNcbiAgfVxuXG4gIGZpbmRCbG9ja0VsZW1lbnRBbmNlc3RvcnMoZWxlbWVudCkge1xuICAgIGNvbnN0IGFuY2VzdG9ycyA9IFtdXG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gdGhpcy5jb250YWluZXJFbGVtZW50KSB7XG4gICAgICBjb25zdCB0YWcgPSB0YWdOYW1lKGVsZW1lbnQpXG4gICAgICBpZiAoZ2V0QmxvY2tUYWdOYW1lcygpLmluY2x1ZGVzKHRhZykpIHtcbiAgICAgICAgYW5jZXN0b3JzLnB1c2goZWxlbWVudClcbiAgICAgIH1cbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGVcbiAgICB9XG4gICAgcmV0dXJuIGFuY2VzdG9yc1xuICB9XG5cbiAgLy8gRWxlbWVudCBpbnNwZWN0aW9uXG5cbiAgaXNCbG9ja0VsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50Py5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHJldHVyblxuICAgIGlmIChub2RlSXNBdHRhY2htZW50RWxlbWVudChlbGVtZW50KSkgcmV0dXJuXG4gICAgaWYgKGZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlKGVsZW1lbnQsIHsgbWF0Y2hpbmdTZWxlY3RvcjogXCJ0ZFwiLCB1bnRpbE5vZGU6IHRoaXMuY29udGFpbmVyRWxlbWVudCB9KSkgcmV0dXJuXG5cbiAgICByZXR1cm4gZ2V0QmxvY2tUYWdOYW1lcygpLmluY2x1ZGVzKHRhZ05hbWUoZWxlbWVudCkpIHx8XG4gICAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5kaXNwbGF5ID09PSBcImJsb2NrXCJcbiAgfVxuXG4gIGlzSW5zaWduaWZpY2FudFRleHROb2RlKG5vZGUpIHtcbiAgICBpZiAobm9kZT8ubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFKSByZXR1cm5cbiAgICBpZiAoIXN0cmluZ0lzQWxsQnJlYWthYmxlV2hpdGVzcGFjZShub2RlLmRhdGEpKSByZXR1cm5cbiAgICBjb25zdCB7IHBhcmVudE5vZGUsIHByZXZpb3VzU2libGluZywgbmV4dFNpYmxpbmcgfSA9IG5vZGVcbiAgICBpZiAobm9kZUVuZHNXaXRoTm9uV2hpdGVzcGFjZShwYXJlbnROb2RlLnByZXZpb3VzU2libGluZykgJiYgIXRoaXMuaXNCbG9ja0VsZW1lbnQocGFyZW50Tm9kZS5wcmV2aW91c1NpYmxpbmcpKSByZXR1cm5cbiAgICBpZiAoZWxlbWVudENhbkRpc3BsYXlQcmVmb3JtYXR0ZWRUZXh0KHBhcmVudE5vZGUpKSByZXR1cm5cbiAgICByZXR1cm4gIXByZXZpb3VzU2libGluZyB8fCB0aGlzLmlzQmxvY2tFbGVtZW50KHByZXZpb3VzU2libGluZykgfHwgIW5leHRTaWJsaW5nIHx8IHRoaXMuaXNCbG9ja0VsZW1lbnQobmV4dFNpYmxpbmcpXG4gIH1cblxuICBpc0V4dHJhQlIoZWxlbWVudCkge1xuICAgIHJldHVybiB0YWdOYW1lKGVsZW1lbnQpID09PSBcImJyXCIgJiYgdGhpcy5pc0Jsb2NrRWxlbWVudChlbGVtZW50LnBhcmVudE5vZGUpICYmIGVsZW1lbnQucGFyZW50Tm9kZS5sYXN0Q2hpbGQgPT09IGVsZW1lbnRcbiAgfVxuXG4gIG5lZWRzVGFibGVTZXBhcmF0b3IoZWxlbWVudCkge1xuICAgIGlmIChjb25maWcucGFyc2VyLnJlbW92ZUJsYW5rVGFibGVDZWxscykge1xuICAgICAgY29uc3QgY29udGVudCA9IGVsZW1lbnQucHJldmlvdXNTaWJsaW5nPy50ZXh0Q29udGVudFxuICAgICAgcmV0dXJuIGNvbnRlbnQgJiYgL1xcUy8udGVzdChjb250ZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5wcmV2aW91c1NpYmxpbmdcbiAgICB9XG4gIH1cblxuICAvLyBNYXJnaW4gdHJhbnNsYXRpb25cblxuICB0cmFuc2xhdGVCbG9ja0VsZW1lbnRNYXJnaW5zVG9OZXdsaW5lcygpIHtcbiAgICBjb25zdCBkZWZhdWx0TWFyZ2luID0gdGhpcy5nZXRNYXJnaW5PZkRlZmF1bHRCbG9ja0VsZW1lbnQoKVxuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuYmxvY2tzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgbWFyZ2luID0gdGhpcy5nZXRNYXJnaW5PZkJsb2NrRWxlbWVudEF0SW5kZXgoaW5kZXgpXG4gICAgICBpZiAobWFyZ2luKSB7XG4gICAgICAgIGlmIChtYXJnaW4udG9wID4gZGVmYXVsdE1hcmdpbi50b3AgKiAyKSB7XG4gICAgICAgICAgdGhpcy5wcmVwZW5kU3RyaW5nVG9UZXh0QXRJbmRleChcIlxcblwiLCBpbmRleClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXJnaW4uYm90dG9tID4gZGVmYXVsdE1hcmdpbi5ib3R0b20gKiAyKSB7XG4gICAgICAgICAgdGhpcy5hcHBlbmRTdHJpbmdUb1RleHRBdEluZGV4KFwiXFxuXCIsIGluZGV4KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0TWFyZ2luT2ZCbG9ja0VsZW1lbnRBdEluZGV4KGluZGV4KSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuYmxvY2tFbGVtZW50c1tpbmRleF1cbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQudGV4dENvbnRlbnQpIHtcbiAgICAgICAgaWYgKCFnZXRCbG9ja1RhZ05hbWVzKCkuaW5jbHVkZXModGFnTmFtZShlbGVtZW50KSkgJiYgIXRoaXMucHJvY2Vzc2VkRWxlbWVudHMuaW5jbHVkZXMoZWxlbWVudCkpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0QmxvY2tFbGVtZW50TWFyZ2luKGVsZW1lbnQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRNYXJnaW5PZkRlZmF1bHRCbG9ja0VsZW1lbnQoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IG1ha2VFbGVtZW50KGNvbmZpZy5ibG9ja0F0dHJpYnV0ZXMuZGVmYXVsdC50YWdOYW1lKVxuICAgIHRoaXMuY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KVxuICAgIHJldHVybiBnZXRCbG9ja0VsZW1lbnRNYXJnaW4oZWxlbWVudClcbiAgfVxufVxuXG4vL8KgSGVscGVyc1xuXG5jb25zdCBlbGVtZW50Q2FuRGlzcGxheVByZWZvcm1hdHRlZFRleHQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGNvbnN0IHsgd2hpdGVTcGFjZSB9ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudClcbiAgcmV0dXJuIFsgXCJwcmVcIiwgXCJwcmUtd3JhcFwiLCBcInByZS1saW5lXCIgXS5pbmNsdWRlcyh3aGl0ZVNwYWNlKVxufVxuXG5jb25zdCBub2RlRW5kc1dpdGhOb25XaGl0ZXNwYWNlID0gKG5vZGUpID0+IG5vZGUgJiYgIXN0cmluZ0VuZHNXaXRoV2hpdGVzcGFjZShub2RlLnRleHRDb250ZW50KVxuXG5jb25zdCBnZXRCbG9ja0VsZW1lbnRNYXJnaW4gPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudClcbiAgaWYgKHN0eWxlLmRpc3BsYXkgPT09IFwiYmxvY2tcIikge1xuICAgIHJldHVybiB7IHRvcDogcGFyc2VJbnQoc3R5bGUubWFyZ2luVG9wKSwgYm90dG9tOiBwYXJzZUludChzdHlsZS5tYXJnaW5Cb3R0b20pIH1cbiAgfVxufVxuXG5jb25zdCBub2RlRmlsdGVyID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAodGFnTmFtZShub2RlKSA9PT0gXCJzdHlsZVwiKSB7XG4gICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX1JFSkVDVFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFRcbiAgfVxufVxuXG4vLyBXaGl0ZXNwYWNlXG5cbmNvbnN0IGxlZnRUcmltQnJlYWthYmxlV2hpdGVzcGFjZSA9IChzdHJpbmcpID0+IHN0cmluZy5yZXBsYWNlKG5ldyBSZWdFeHAoYF4ke2JyZWFrYWJsZVdoaXRlc3BhY2VQYXR0ZXJuLnNvdXJjZX0rYCksIFwiXCIpXG5cbmNvbnN0IHN0cmluZ0lzQWxsQnJlYWthYmxlV2hpdGVzcGFjZSA9IChzdHJpbmcpID0+IG5ldyBSZWdFeHAoYF4ke2JyZWFrYWJsZVdoaXRlc3BhY2VQYXR0ZXJuLnNvdXJjZX0qJGApLnRlc3Qoc3RyaW5nKVxuXG5jb25zdCBzdHJpbmdFbmRzV2l0aFdoaXRlc3BhY2UgPSAoc3RyaW5nKSA9PiAvXFxzJC8udGVzdChzdHJpbmcpXG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiAgICBuby1lbXB0eSxcbiovXG5pbXBvcnQgeyByZW1vdmVOb2RlIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuaW1wb3J0IERvY3VtZW50VmlldyBmcm9tIFwidHJpeC92aWV3cy9kb2N1bWVudF92aWV3XCJcbmltcG9ydCBEb2N1bWVudCBmcm9tIFwidHJpeC9tb2RlbHMvZG9jdW1lbnRcIlxuaW1wb3J0IEhUTUxQYXJzZXIgZnJvbSBcInRyaXgvbW9kZWxzL2h0bWxfcGFyc2VyXCJcblxuY29uc3QgdW5zZXJpYWxpemFibGVFbGVtZW50U2VsZWN0b3IgPSBcIltkYXRhLXRyaXgtc2VyaWFsaXplPWZhbHNlXVwiXG5jb25zdCB1bnNlcmlhbGl6YWJsZUF0dHJpYnV0ZU5hbWVzID0gW1xuICBcImNvbnRlbnRlZGl0YWJsZVwiLFxuICBcImRhdGEtdHJpeC1pZFwiLFxuICBcImRhdGEtdHJpeC1zdG9yZS1rZXlcIixcbiAgXCJkYXRhLXRyaXgtbXV0YWJsZVwiLFxuICBcImRhdGEtdHJpeC1wbGFjZWhvbGRlclwiLFxuICBcInRhYmluZGV4XCIsXG5dXG5jb25zdCBzZXJpYWxpemVkQXR0cmlidXRlc0F0dHJpYnV0ZSA9IFwiZGF0YS10cml4LXNlcmlhbGl6ZWQtYXR0cmlidXRlc1wiXG5jb25zdCBzZXJpYWxpemVkQXR0cmlidXRlc1NlbGVjdG9yID0gYFske3NlcmlhbGl6ZWRBdHRyaWJ1dGVzQXR0cmlidXRlfV1gXG5cbmNvbnN0IGJsb2NrQ29tbWVudFBhdHRlcm4gPSBuZXcgUmVnRXhwKFwiPCEtLWJsb2NrLS0+XCIsIFwiZ1wiKVxuXG5jb25zdCBzZXJpYWxpemVycyA9IHtcbiAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IGZ1bmN0aW9uKHNlcmlhbGl6YWJsZSkge1xuICAgIGxldCBkb2N1bWVudFxuICAgIGlmIChzZXJpYWxpemFibGUgaW5zdGFuY2VvZiBEb2N1bWVudCkge1xuICAgICAgZG9jdW1lbnQgPSBzZXJpYWxpemFibGVcbiAgICB9IGVsc2UgaWYgKHNlcmlhbGl6YWJsZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICBkb2N1bWVudCA9IEhUTUxQYXJzZXIucGFyc2Uoc2VyaWFsaXphYmxlLmlubmVySFRNTCkuZ2V0RG9jdW1lbnQoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnNlcmlhbGl6YWJsZSBvYmplY3RcIilcbiAgICB9XG5cbiAgICByZXR1cm4gZG9jdW1lbnQudG9TZXJpYWxpemFibGVEb2N1bWVudCgpLnRvSlNPTlN0cmluZygpXG4gIH0sXG5cbiAgXCJ0ZXh0L2h0bWxcIjogZnVuY3Rpb24oc2VyaWFsaXphYmxlKSB7XG4gICAgbGV0IGVsZW1lbnRcbiAgICBpZiAoc2VyaWFsaXphYmxlIGluc3RhbmNlb2YgRG9jdW1lbnQpIHtcbiAgICAgIGVsZW1lbnQgPSBEb2N1bWVudFZpZXcucmVuZGVyKHNlcmlhbGl6YWJsZSlcbiAgICB9IGVsc2UgaWYgKHNlcmlhbGl6YWJsZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICBlbGVtZW50ID0gc2VyaWFsaXphYmxlLmNsb25lTm9kZSh0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnNlcmlhbGl6YWJsZSBvYmplY3RcIilcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgdW5zZXJpYWxpemFibGUgZWxlbWVudHNcbiAgICBBcnJheS5mcm9tKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh1bnNlcmlhbGl6YWJsZUVsZW1lbnRTZWxlY3RvcikpLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICByZW1vdmVOb2RlKGVsKVxuICAgIH0pXG5cbiAgICAvLyBSZW1vdmUgdW5zZXJpYWxpemFibGUgYXR0cmlidXRlc1xuICAgIHVuc2VyaWFsaXphYmxlQXR0cmlidXRlTmFtZXMuZm9yRWFjaCgoYXR0cmlidXRlKSA9PiB7XG4gICAgICBBcnJheS5mcm9tKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChgWyR7YXR0cmlidXRlfV1gKSkuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIC8vIFJld3JpdGUgZWxlbWVudHMgd2l0aCBzZXJpYWxpemVkIGF0dHJpYnV0ZSBvdmVycmlkZXNcbiAgICBBcnJheS5mcm9tKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZXJpYWxpemVkQXR0cmlidXRlc1NlbGVjdG9yKSkuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBKU09OLnBhcnNlKGVsLmdldEF0dHJpYnV0ZShzZXJpYWxpemVkQXR0cmlidXRlc0F0dHJpYnV0ZSkpXG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShzZXJpYWxpemVkQXR0cmlidXRlc0F0dHJpYnV0ZSlcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV1cbiAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxuICAgIH0pXG5cbiAgICByZXR1cm4gZWxlbWVudC5pbm5lckhUTUwucmVwbGFjZShibG9ja0NvbW1lbnRQYXR0ZXJuLCBcIlwiKVxuICB9LFxufVxuXG5jb25zdCBkZXNlcmlhbGl6ZXJzID0ge1xuICBcImFwcGxpY2F0aW9uL2pzb25cIjogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgcmV0dXJuIERvY3VtZW50LmZyb21KU09OU3RyaW5nKHN0cmluZylcbiAgfSxcblxuICBcInRleHQvaHRtbFwiOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICByZXR1cm4gSFRNTFBhcnNlci5wYXJzZShzdHJpbmcpLmdldERvY3VtZW50KClcbiAgfSxcbn1cblxuZXhwb3J0IGNvbnN0IHNlcmlhbGl6ZVRvQ29udGVudFR5cGUgPSBmdW5jdGlvbihzZXJpYWxpemFibGUsIGNvbnRlbnRUeXBlKSB7XG4gIGNvbnN0IHNlcmlhbGl6ZXIgPSBzZXJpYWxpemVyc1tjb250ZW50VHlwZV1cbiAgaWYgKHNlcmlhbGl6ZXIpIHtcbiAgICByZXR1cm4gc2VyaWFsaXplcihzZXJpYWxpemFibGUpXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIGNvbnRlbnQgdHlwZTogJHtjb250ZW50VHlwZX1gKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkZXNlcmlhbGl6ZUZyb21Db250ZW50VHlwZSA9IGZ1bmN0aW9uKHN0cmluZywgY29udGVudFR5cGUpIHtcbiAgY29uc3QgZGVzZXJpYWxpemVyID0gZGVzZXJpYWxpemVyc1tjb250ZW50VHlwZV1cbiAgaWYgKGRlc2VyaWFsaXplcikge1xuICAgIHJldHVybiBkZXNlcmlhbGl6ZXIoc3RyaW5nKVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgdW5rbm93biBjb250ZW50IHR5cGU6ICR7Y29udGVudFR5cGV9YClcbiAgfVxufVxuIiwgImltcG9ydCBcInRyaXgvbW9kZWxzL2F0dGFjaG1lbnRcIlxuaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFuYWdlZEF0dGFjaG1lbnQgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGNvbnN0cnVjdG9yKGF0dGFjaG1lbnRNYW5hZ2VyLCBhdHRhY2htZW50KSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMuYXR0YWNobWVudE1hbmFnZXIgPSBhdHRhY2htZW50TWFuYWdlclxuICAgIHRoaXMuYXR0YWNobWVudCA9IGF0dGFjaG1lbnRcbiAgICB0aGlzLmlkID0gdGhpcy5hdHRhY2htZW50LmlkXG4gICAgdGhpcy5maWxlID0gdGhpcy5hdHRhY2htZW50LmZpbGVcbiAgfVxuXG4gIHJlbW92ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRhY2htZW50TWFuYWdlci5yZXF1ZXN0UmVtb3ZhbE9mQXR0YWNobWVudCh0aGlzLmF0dGFjaG1lbnQpXG4gIH1cbn1cblxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LmdldEF0dHJpYnV0ZVwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50Lmhhc0F0dHJpYnV0ZVwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LnNldEF0dHJpYnV0ZVwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LmdldEF0dHJpYnV0ZXNcIilcbk1hbmFnZWRBdHRhY2htZW50LnByb3h5TWV0aG9kKFwiYXR0YWNobWVudC5zZXRBdHRyaWJ1dGVzXCIpXG5NYW5hZ2VkQXR0YWNobWVudC5wcm94eU1ldGhvZChcImF0dGFjaG1lbnQuaXNQZW5kaW5nXCIpXG5NYW5hZ2VkQXR0YWNobWVudC5wcm94eU1ldGhvZChcImF0dGFjaG1lbnQuaXNQcmV2aWV3YWJsZVwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LmdldFVSTFwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LmdldEhyZWZcIilcbk1hbmFnZWRBdHRhY2htZW50LnByb3h5TWV0aG9kKFwiYXR0YWNobWVudC5nZXRGaWxlbmFtZVwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LmdldEZpbGVzaXplXCIpXG5NYW5hZ2VkQXR0YWNobWVudC5wcm94eU1ldGhvZChcImF0dGFjaG1lbnQuZ2V0Rm9ybWF0dGVkRmlsZXNpemVcIilcbk1hbmFnZWRBdHRhY2htZW50LnByb3h5TWV0aG9kKFwiYXR0YWNobWVudC5nZXRFeHRlbnNpb25cIilcbk1hbmFnZWRBdHRhY2htZW50LnByb3h5TWV0aG9kKFwiYXR0YWNobWVudC5nZXRDb250ZW50VHlwZVwiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LmdldEZpbGVcIilcbk1hbmFnZWRBdHRhY2htZW50LnByb3h5TWV0aG9kKFwiYXR0YWNobWVudC5zZXRGaWxlXCIpXG5NYW5hZ2VkQXR0YWNobWVudC5wcm94eU1ldGhvZChcImF0dGFjaG1lbnQucmVsZWFzZUZpbGVcIilcbk1hbmFnZWRBdHRhY2htZW50LnByb3h5TWV0aG9kKFwiYXR0YWNobWVudC5nZXRVcGxvYWRQcm9ncmVzc1wiKVxuTWFuYWdlZEF0dGFjaG1lbnQucHJveHlNZXRob2QoXCJhdHRhY2htZW50LnNldFVwbG9hZFByb2dyZXNzXCIpXG5cbiIsICJpbXBvcnQgTWFuYWdlZEF0dGFjaG1lbnQgZnJvbSBcInRyaXgvbW9kZWxzL21hbmFnZWRfYXR0YWNobWVudFwiXG5pbXBvcnQgQmFzaWNPYmplY3QgZnJvbSBcInRyaXgvY29yZS9iYXNpY19vYmplY3RcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdHRhY2htZW50TWFuYWdlciBleHRlbmRzIEJhc2ljT2JqZWN0IHtcbiAgY29uc3RydWN0b3IoYXR0YWNobWVudHMgPSBbXSkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLm1hbmFnZWRBdHRhY2htZW50cyA9IHt9XG4gICAgQXJyYXkuZnJvbShhdHRhY2htZW50cykuZm9yRWFjaCgoYXR0YWNobWVudCkgPT4ge1xuICAgICAgdGhpcy5tYW5hZ2VBdHRhY2htZW50KGF0dGFjaG1lbnQpXG4gICAgfSlcbiAgfVxuXG4gIGdldEF0dGFjaG1lbnRzKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdXG4gICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLm1hbmFnZWRBdHRhY2htZW50cykge1xuICAgICAgY29uc3QgYXR0YWNobWVudCA9IHRoaXMubWFuYWdlZEF0dGFjaG1lbnRzW2lkXVxuICAgICAgcmVzdWx0LnB1c2goYXR0YWNobWVudClcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgbWFuYWdlQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgaWYgKCF0aGlzLm1hbmFnZWRBdHRhY2htZW50c1thdHRhY2htZW50LmlkXSkge1xuICAgICAgdGhpcy5tYW5hZ2VkQXR0YWNobWVudHNbYXR0YWNobWVudC5pZF0gPSBuZXcgTWFuYWdlZEF0dGFjaG1lbnQodGhpcywgYXR0YWNobWVudClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubWFuYWdlZEF0dGFjaG1lbnRzW2F0dGFjaG1lbnQuaWRdXG4gIH1cblxuICBhdHRhY2htZW50SXNNYW5hZ2VkKGF0dGFjaG1lbnQpIHtcbiAgICByZXR1cm4gYXR0YWNobWVudC5pZCBpbiB0aGlzLm1hbmFnZWRBdHRhY2htZW50c1xuICB9XG5cbiAgcmVxdWVzdFJlbW92YWxPZkF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGlmICh0aGlzLmF0dGFjaG1lbnRJc01hbmFnZWQoYXR0YWNobWVudCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5hdHRhY2htZW50TWFuYWdlckRpZFJlcXVlc3RSZW1vdmFsT2ZBdHRhY2htZW50Py4oYXR0YWNobWVudClcbiAgICB9XG4gIH1cblxuICB1bm1hbmFnZUF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGNvbnN0IG1hbmFnZWRBdHRhY2htZW50ID0gdGhpcy5tYW5hZ2VkQXR0YWNobWVudHNbYXR0YWNobWVudC5pZF1cbiAgICBkZWxldGUgdGhpcy5tYW5hZ2VkQXR0YWNobWVudHNbYXR0YWNobWVudC5pZF1cbiAgICByZXR1cm4gbWFuYWdlZEF0dGFjaG1lbnRcbiAgfVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbmVCcmVha0luc2VydGlvbiB7XG4gIGNvbnN0cnVjdG9yKGNvbXBvc2l0aW9uKSB7XG4gICAgdGhpcy5jb21wb3NpdGlvbiA9IGNvbXBvc2l0aW9uXG4gICAgdGhpcy5kb2N1bWVudCA9IHRoaXMuY29tcG9zaXRpb24uZG9jdW1lbnRcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5jb21wb3NpdGlvbi5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSBzZWxlY3RlZFJhbmdlWzBdXG4gICAgdGhpcy5lbmRQb3NpdGlvbiA9IHNlbGVjdGVkUmFuZ2VbMV1cblxuICAgIHRoaXMuc3RhcnRMb2NhdGlvbiA9IHRoaXMuZG9jdW1lbnQubG9jYXRpb25Gcm9tUG9zaXRpb24odGhpcy5zdGFydFBvc2l0aW9uKVxuICAgIHRoaXMuZW5kTG9jYXRpb24gPSB0aGlzLmRvY3VtZW50LmxvY2F0aW9uRnJvbVBvc2l0aW9uKHRoaXMuZW5kUG9zaXRpb24pXG5cbiAgICB0aGlzLmJsb2NrID0gdGhpcy5kb2N1bWVudC5nZXRCbG9ja0F0SW5kZXgodGhpcy5lbmRMb2NhdGlvbi5pbmRleClcbiAgICB0aGlzLmJyZWFrc09uUmV0dXJuID0gdGhpcy5ibG9jay5icmVha3NPblJldHVybigpXG4gICAgdGhpcy5wcmV2aW91c0NoYXJhY3RlciA9IHRoaXMuYmxvY2sudGV4dC5nZXRTdHJpbmdBdFBvc2l0aW9uKHRoaXMuZW5kTG9jYXRpb24ub2Zmc2V0IC0gMSlcbiAgICB0aGlzLm5leHRDaGFyYWN0ZXIgPSB0aGlzLmJsb2NrLnRleHQuZ2V0U3RyaW5nQXRQb3NpdGlvbih0aGlzLmVuZExvY2F0aW9uLm9mZnNldClcbiAgfVxuXG4gIHNob3VsZEluc2VydEJsb2NrQnJlYWsoKSB7XG4gICAgaWYgKHRoaXMuYmxvY2suaGFzQXR0cmlidXRlcygpICYmIHRoaXMuYmxvY2suaXNMaXN0SXRlbSgpICYmICF0aGlzLmJsb2NrLmlzRW1wdHkoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhcnRMb2NhdGlvbi5vZmZzZXQgIT09IDBcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuYnJlYWtzT25SZXR1cm4gJiYgdGhpcy5uZXh0Q2hhcmFjdGVyICE9PSBcIlxcblwiXG4gICAgfVxuICB9XG5cbiAgc2hvdWxkQnJlYWtGb3JtYXR0ZWRCbG9jaygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5ibG9jay5oYXNBdHRyaWJ1dGVzKCkgJiZcbiAgICAgICF0aGlzLmJsb2NrLmlzTGlzdEl0ZW0oKSAmJlxuICAgICAgKHRoaXMuYnJlYWtzT25SZXR1cm4gJiYgdGhpcy5uZXh0Q2hhcmFjdGVyID09PSBcIlxcblwiIHx8IHRoaXMucHJldmlvdXNDaGFyYWN0ZXIgPT09IFwiXFxuXCIpXG4gICAgKVxuICB9XG5cbiAgc2hvdWxkRGVjcmVhc2VMaXN0TGV2ZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2suaGFzQXR0cmlidXRlcygpICYmIHRoaXMuYmxvY2suaXNMaXN0SXRlbSgpICYmIHRoaXMuYmxvY2suaXNFbXB0eSgpXG4gIH1cblxuICBzaG91bGRQcmVwZW5kTGlzdEl0ZW0oKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2suaXNMaXN0SXRlbSgpICYmIHRoaXMuc3RhcnRMb2NhdGlvbi5vZmZzZXQgPT09IDAgJiYgIXRoaXMuYmxvY2suaXNFbXB0eSgpXG4gIH1cblxuICBzaG91bGRSZW1vdmVMYXN0QmxvY2tBdHRyaWJ1dGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2suaGFzQXR0cmlidXRlcygpICYmICF0aGlzLmJsb2NrLmlzTGlzdEl0ZW0oKSAmJiB0aGlzLmJsb2NrLmlzRW1wdHkoKVxuICB9XG59XG4iLCAiaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5pbXBvcnQgeyBPQkpFQ1RfUkVQTEFDRU1FTlRfQ0hBUkFDVEVSIH0gZnJvbSBcInRyaXgvY29uc3RhbnRzXCJcblxuaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcbmltcG9ydCBUZXh0IGZyb20gXCJ0cml4L21vZGVscy90ZXh0XCJcbmltcG9ydCBCbG9jayBmcm9tIFwidHJpeC9tb2RlbHMvYmxvY2tcIlxuaW1wb3J0IEF0dGFjaG1lbnQgZnJvbSBcInRyaXgvbW9kZWxzL2F0dGFjaG1lbnRcIlxuaW1wb3J0IERvY3VtZW50IGZyb20gXCJ0cml4L21vZGVscy9kb2N1bWVudFwiXG5pbXBvcnQgSFRNTFBhcnNlciBmcm9tIFwidHJpeC9tb2RlbHMvaHRtbF9wYXJzZXJcIlxuaW1wb3J0IExpbmVCcmVha0luc2VydGlvbiBmcm9tIFwidHJpeC9tb2RlbHMvbGluZV9icmVha19pbnNlcnRpb25cIlxuXG5pbXBvcnQge1xuICBhcnJheVN0YXJ0c1dpdGgsXG4gIGV4dGVuZCxcbiAgZ2V0QWxsQXR0cmlidXRlTmFtZXMsXG4gIGdldEJsb2NrQ29uZmlnLFxuICBnZXRUZXh0Q29uZmlnLFxuICBub3JtYWxpemVSYW5nZSxcbiAgb2JqZWN0c0FyZUVxdWFsLFxuICByYW5nZUlzQ29sbGFwc2VkLFxuICByYW5nZXNBcmVFcXVhbCxcbiAgc3VtbWFyaXplQXJyYXlDaGFuZ2UsXG59IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5cbmNvbnN0IFBMQUNFSE9MREVSID0gXCIgXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9zaXRpb24gZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLmRvY3VtZW50ID0gbmV3IERvY3VtZW50KClcbiAgICB0aGlzLmF0dGFjaG1lbnRzID0gW11cbiAgICB0aGlzLmN1cnJlbnRBdHRyaWJ1dGVzID0ge31cbiAgICB0aGlzLnJldmlzaW9uID0gMFxuICB9XG5cbiAgc2V0RG9jdW1lbnQoZG9jdW1lbnQpIHtcbiAgICBpZiAoIWRvY3VtZW50LmlzRXF1YWxUbyh0aGlzLmRvY3VtZW50KSkge1xuICAgICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50XG4gICAgICB0aGlzLnJlZnJlc2hBdHRhY2htZW50cygpXG4gICAgICB0aGlzLnJldmlzaW9uKytcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkRpZENoYW5nZURvY3VtZW50Py4oZG9jdW1lbnQpXG4gICAgfVxuICB9XG5cbiAgLy8gU25hcHNob3RzXG5cbiAgZ2V0U25hcHNob3QoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvY3VtZW50OiB0aGlzLmRvY3VtZW50LFxuICAgICAgc2VsZWN0ZWRSYW5nZTogdGhpcy5nZXRTZWxlY3RlZFJhbmdlKCksXG4gICAgfVxuICB9XG5cbiAgbG9hZFNuYXBzaG90KHsgZG9jdW1lbnQsIHNlbGVjdGVkUmFuZ2UgfSkge1xuICAgIHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uV2lsbExvYWRTbmFwc2hvdD8uKClcbiAgICB0aGlzLnNldERvY3VtZW50KGRvY3VtZW50ICE9IG51bGwgPyBkb2N1bWVudCA6IG5ldyBEb2N1bWVudCgpKVxuICAgIHRoaXMuc2V0U2VsZWN0aW9uKHNlbGVjdGVkUmFuZ2UgIT0gbnVsbCA/IHNlbGVjdGVkUmFuZ2UgOiBbIDAsIDAgXSlcbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25EaWRMb2FkU25hcHNob3Q/LigpXG4gIH1cblxuICAvLyBSZXNwb25kZXIgcHJvdG9jb2xcblxuICBpbnNlcnRUZXh0KHRleHQsIHsgdXBkYXRlUG9zaXRpb24gfSA9IHsgdXBkYXRlUG9zaXRpb246IHRydWUgfSkge1xuICAgIGNvbnN0IHNlbGVjdGVkUmFuZ2UgPSB0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKVxuICAgIHRoaXMuc2V0RG9jdW1lbnQodGhpcy5kb2N1bWVudC5pbnNlcnRUZXh0QXRSYW5nZSh0ZXh0LCBzZWxlY3RlZFJhbmdlKSlcblxuICAgIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSBzZWxlY3RlZFJhbmdlWzBdXG4gICAgY29uc3QgZW5kUG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgdGV4dC5nZXRMZW5ndGgoKVxuXG4gICAgaWYgKHVwZGF0ZVBvc2l0aW9uKSB7XG4gICAgICB0aGlzLnNldFNlbGVjdGlvbihlbmRQb3NpdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubm90aWZ5RGVsZWdhdGVPZkluc2VydGlvbkF0UmFuZ2UoWyBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiBdKVxuICB9XG5cbiAgaW5zZXJ0QmxvY2soYmxvY2sgPSBuZXcgQmxvY2soKSkge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gbmV3IERvY3VtZW50KFsgYmxvY2sgXSlcbiAgICByZXR1cm4gdGhpcy5pbnNlcnREb2N1bWVudChkb2N1bWVudClcbiAgfVxuXG4gIGluc2VydERvY3VtZW50KGRvY3VtZW50ID0gbmV3IERvY3VtZW50KCkpIHtcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQuaW5zZXJ0RG9jdW1lbnRBdFJhbmdlKGRvY3VtZW50LCBzZWxlY3RlZFJhbmdlKSlcblxuICAgIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSBzZWxlY3RlZFJhbmdlWzBdXG4gICAgY29uc3QgZW5kUG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZG9jdW1lbnQuZ2V0TGVuZ3RoKClcblxuICAgIHRoaXMuc2V0U2VsZWN0aW9uKGVuZFBvc2l0aW9uKVxuICAgIHJldHVybiB0aGlzLm5vdGlmeURlbGVnYXRlT2ZJbnNlcnRpb25BdFJhbmdlKFsgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24gXSlcbiAgfVxuXG4gIGluc2VydFN0cmluZyhzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5nZXRDdXJyZW50VGV4dEF0dHJpYnV0ZXMoKVxuICAgIGNvbnN0IHRleHQgPSBUZXh0LnRleHRGb3JTdHJpbmdXaXRoQXR0cmlidXRlcyhzdHJpbmcsIGF0dHJpYnV0ZXMpXG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0VGV4dCh0ZXh0LCBvcHRpb25zKVxuICB9XG5cbiAgaW5zZXJ0QmxvY2tCcmVhaygpIHtcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQuaW5zZXJ0QmxvY2tCcmVha0F0UmFuZ2Uoc2VsZWN0ZWRSYW5nZSkpXG5cbiAgICBjb25zdCBzdGFydFBvc2l0aW9uID0gc2VsZWN0ZWRSYW5nZVswXVxuICAgIGNvbnN0IGVuZFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbiArIDFcblxuICAgIHRoaXMuc2V0U2VsZWN0aW9uKGVuZFBvc2l0aW9uKVxuICAgIHJldHVybiB0aGlzLm5vdGlmeURlbGVnYXRlT2ZJbnNlcnRpb25BdFJhbmdlKFsgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24gXSlcbiAgfVxuXG4gIGluc2VydExpbmVCcmVhaygpIHtcbiAgICBjb25zdCBpbnNlcnRpb24gPSBuZXcgTGluZUJyZWFrSW5zZXJ0aW9uKHRoaXMpXG5cbiAgICBpZiAoaW5zZXJ0aW9uLnNob3VsZERlY3JlYXNlTGlzdExldmVsKCkpIHtcbiAgICAgIHRoaXMuZGVjcmVhc2VMaXN0TGV2ZWwoKVxuICAgICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0aW9uKGluc2VydGlvbi5zdGFydFBvc2l0aW9uKVxuICAgIH0gZWxzZSBpZiAoaW5zZXJ0aW9uLnNob3VsZFByZXBlbmRMaXN0SXRlbSgpKSB7XG4gICAgICBjb25zdCBkb2N1bWVudCA9IG5ldyBEb2N1bWVudChbIGluc2VydGlvbi5ibG9jay5jb3B5V2l0aG91dFRleHQoKSBdKVxuICAgICAgcmV0dXJuIHRoaXMuaW5zZXJ0RG9jdW1lbnQoZG9jdW1lbnQpXG4gICAgfSBlbHNlIGlmIChpbnNlcnRpb24uc2hvdWxkSW5zZXJ0QmxvY2tCcmVhaygpKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnRCbG9ja0JyZWFrKClcbiAgICB9IGVsc2UgaWYgKGluc2VydGlvbi5zaG91bGRSZW1vdmVMYXN0QmxvY2tBdHRyaWJ1dGUoKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGFzdEJsb2NrQXR0cmlidXRlKClcbiAgICB9IGVsc2UgaWYgKGluc2VydGlvbi5zaG91bGRCcmVha0Zvcm1hdHRlZEJsb2NrKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmJyZWFrRm9ybWF0dGVkQmxvY2soaW5zZXJ0aW9uKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnRTdHJpbmcoXCJcXG5cIilcbiAgICB9XG4gIH1cblxuICBpbnNlcnRIVE1MKGh0bWwpIHtcbiAgICBjb25zdCBkb2N1bWVudCA9IEhUTUxQYXJzZXIucGFyc2UoaHRtbCkuZ2V0RG9jdW1lbnQoKVxuICAgIGNvbnN0IHNlbGVjdGVkUmFuZ2UgPSB0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKVxuXG4gICAgdGhpcy5zZXREb2N1bWVudCh0aGlzLmRvY3VtZW50Lm1lcmdlRG9jdW1lbnRBdFJhbmdlKGRvY3VtZW50LCBzZWxlY3RlZFJhbmdlKSlcblxuICAgIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSBzZWxlY3RlZFJhbmdlWzBdXG4gICAgY29uc3QgZW5kUG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZG9jdW1lbnQuZ2V0TGVuZ3RoKCkgLSAxXG5cbiAgICB0aGlzLnNldFNlbGVjdGlvbihlbmRQb3NpdGlvbilcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlEZWxlZ2F0ZU9mSW5zZXJ0aW9uQXRSYW5nZShbIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uIF0pXG4gIH1cblxuICByZXBsYWNlSFRNTChodG1sKSB7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBIVE1MUGFyc2VyLnBhcnNlKGh0bWwpLmdldERvY3VtZW50KCkuY29weVVzaW5nT2JqZWN0c0Zyb21Eb2N1bWVudCh0aGlzLmRvY3VtZW50KVxuICAgIGNvbnN0IGxvY2F0aW9uUmFuZ2UgPSB0aGlzLmdldExvY2F0aW9uUmFuZ2UoeyBzdHJpY3Q6IGZhbHNlIH0pXG4gICAgY29uc3Qgc2VsZWN0ZWRSYW5nZSA9IHRoaXMuZG9jdW1lbnQucmFuZ2VGcm9tTG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKVxuICAgIHRoaXMuc2V0RG9jdW1lbnQoZG9jdW1lbnQpXG4gICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0aW9uKHNlbGVjdGVkUmFuZ2UpXG4gIH1cblxuICBpbnNlcnRGaWxlKGZpbGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRGaWxlcyhbIGZpbGUgXSlcbiAgfVxuXG4gIGluc2VydEZpbGVzKGZpbGVzKSB7XG4gICAgY29uc3QgYXR0YWNobWVudHMgPSBbXVxuXG4gICAgQXJyYXkuZnJvbShmaWxlcykuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgICAgaWYgKHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uU2hvdWxkQWNjZXB0RmlsZShmaWxlKSkge1xuICAgICAgICBjb25zdCBhdHRhY2htZW50ID0gQXR0YWNobWVudC5hdHRhY2htZW50Rm9yRmlsZShmaWxlKVxuICAgICAgICBhdHRhY2htZW50cy5wdXNoKGF0dGFjaG1lbnQpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiB0aGlzLmluc2VydEF0dGFjaG1lbnRzKGF0dGFjaG1lbnRzKVxuICB9XG5cbiAgaW5zZXJ0QXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QXR0YWNobWVudHMoWyBhdHRhY2htZW50IF0pXG4gIH1cblxuICBpbnNlcnRBdHRhY2htZW50cyhhdHRhY2htZW50cykge1xuICAgIGxldCB0ZXh0ID0gbmV3IFRleHQoKVxuXG4gICAgQXJyYXkuZnJvbShhdHRhY2htZW50cykuZm9yRWFjaCgoYXR0YWNobWVudCkgPT4ge1xuICAgICAgY29uc3QgdHlwZSA9IGF0dGFjaG1lbnQuZ2V0VHlwZSgpXG4gICAgICBjb25zdCBwcmVzZW50YXRpb24gPSBjb25maWcuYXR0YWNobWVudHNbdHlwZV0/LnByZXNlbnRhdGlvblxuXG4gICAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5nZXRDdXJyZW50VGV4dEF0dHJpYnV0ZXMoKVxuICAgICAgaWYgKHByZXNlbnRhdGlvbikge1xuICAgICAgICBhdHRyaWJ1dGVzLnByZXNlbnRhdGlvbiA9IHByZXNlbnRhdGlvblxuICAgICAgfVxuXG4gICAgICBjb25zdCBhdHRhY2htZW50VGV4dCA9IFRleHQudGV4dEZvckF0dGFjaG1lbnRXaXRoQXR0cmlidXRlcyhhdHRhY2htZW50LCBhdHRyaWJ1dGVzKVxuICAgICAgdGV4dCA9IHRleHQuYXBwZW5kVGV4dChhdHRhY2htZW50VGV4dClcbiAgICB9KVxuXG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0VGV4dCh0ZXh0KVxuICB9XG5cbiAgc2hvdWxkTWFuYWdlRGVsZXRpbmdJbkRpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICBjb25zdCBsb2NhdGlvblJhbmdlID0gdGhpcy5nZXRMb2NhdGlvblJhbmdlKClcbiAgICBpZiAocmFuZ2VJc0NvbGxhcHNlZChsb2NhdGlvblJhbmdlKSkge1xuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJiYWNrd2FyZFwiICYmIGxvY2F0aW9uUmFuZ2VbMF0ub2Zmc2V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zaG91bGRNYW5hZ2VNb3ZpbmdDdXJzb3JJbkRpcmVjdGlvbihkaXJlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb2NhdGlvblJhbmdlWzBdLmluZGV4ICE9PSBsb2NhdGlvblJhbmdlWzFdLmluZGV4KSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZGVsZXRlSW5EaXJlY3Rpb24oZGlyZWN0aW9uLCB7IGxlbmd0aCB9ID0ge30pIHtcbiAgICBsZXQgYXR0YWNobWVudCwgZGVsZXRpbmdJbnRvUHJldmlvdXNCbG9jaywgc2VsZWN0aW9uU3BhbnNCbG9ja3NcbiAgICBjb25zdCBsb2NhdGlvblJhbmdlID0gdGhpcy5nZXRMb2NhdGlvblJhbmdlKClcbiAgICBsZXQgcmFuZ2UgPSB0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKVxuICAgIGNvbnN0IHNlbGVjdGlvbklzQ29sbGFwc2VkID0gcmFuZ2VJc0NvbGxhcHNlZChyYW5nZSlcblxuICAgIGlmIChzZWxlY3Rpb25Jc0NvbGxhcHNlZCkge1xuICAgICAgZGVsZXRpbmdJbnRvUHJldmlvdXNCbG9jayA9IGRpcmVjdGlvbiA9PT0gXCJiYWNrd2FyZFwiICYmIGxvY2F0aW9uUmFuZ2VbMF0ub2Zmc2V0ID09PSAwXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGlvblNwYW5zQmxvY2tzID0gbG9jYXRpb25SYW5nZVswXS5pbmRleCAhPT0gbG9jYXRpb25SYW5nZVsxXS5pbmRleFxuICAgIH1cblxuICAgIGlmIChkZWxldGluZ0ludG9QcmV2aW91c0Jsb2NrKSB7XG4gICAgICBpZiAodGhpcy5jYW5EZWNyZWFzZUJsb2NrQXR0cmlidXRlTGV2ZWwoKSkge1xuICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuZ2V0QmxvY2soKVxuXG4gICAgICAgIGlmIChibG9jay5pc0xpc3RJdGVtKCkpIHtcbiAgICAgICAgICB0aGlzLmRlY3JlYXNlTGlzdExldmVsKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRlY3JlYXNlQmxvY2tBdHRyaWJ1dGVMZXZlbCgpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFNlbGVjdGlvbihyYW5nZVswXSlcbiAgICAgICAgaWYgKGJsb2NrLmlzRW1wdHkoKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdGlvbklzQ29sbGFwc2VkKSB7XG4gICAgICByYW5nZSA9IHRoaXMuZ2V0RXhwYW5kZWRSYW5nZUluRGlyZWN0aW9uKGRpcmVjdGlvbiwgeyBsZW5ndGggfSlcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwiYmFja3dhcmRcIikge1xuICAgICAgICBhdHRhY2htZW50ID0gdGhpcy5nZXRBdHRhY2htZW50QXRSYW5nZShyYW5nZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXR0YWNobWVudCkge1xuICAgICAgdGhpcy5lZGl0QXR0YWNobWVudChhdHRhY2htZW50KVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0RG9jdW1lbnQodGhpcy5kb2N1bWVudC5yZW1vdmVUZXh0QXRSYW5nZShyYW5nZSkpXG4gICAgICB0aGlzLnNldFNlbGVjdGlvbihyYW5nZVswXSlcbiAgICAgIGlmIChkZWxldGluZ0ludG9QcmV2aW91c0Jsb2NrIHx8IHNlbGVjdGlvblNwYW5zQmxvY2tzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG1vdmVUZXh0RnJvbVJhbmdlKHJhbmdlKSB7XG4gICAgY29uc3QgWyBwb3NpdGlvbiBdID0gQXJyYXkuZnJvbSh0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKSlcbiAgICB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQubW92ZVRleHRGcm9tUmFuZ2VUb1Bvc2l0aW9uKHJhbmdlLCBwb3NpdGlvbikpXG4gICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0aW9uKHBvc2l0aW9uKVxuICB9XG5cbiAgcmVtb3ZlQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLmRvY3VtZW50LmdldFJhbmdlT2ZBdHRhY2htZW50KGF0dGFjaG1lbnQpXG4gICAgaWYgKHJhbmdlKSB7XG4gICAgICB0aGlzLnN0b3BFZGl0aW5nQXR0YWNobWVudCgpXG4gICAgICB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQucmVtb3ZlVGV4dEF0UmFuZ2UocmFuZ2UpKVxuICAgICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0aW9uKHJhbmdlWzBdKVxuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUxhc3RCbG9ja0F0dHJpYnV0ZSgpIHtcbiAgICBjb25zdCBbIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uIF0gPSBBcnJheS5mcm9tKHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpKVxuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5kb2N1bWVudC5nZXRCbG9ja0F0UG9zaXRpb24oZW5kUG9zaXRpb24pXG4gICAgdGhpcy5yZW1vdmVDdXJyZW50QXR0cmlidXRlKGJsb2NrLmdldExhc3RBdHRyaWJ1dGUoKSlcbiAgICByZXR1cm4gdGhpcy5zZXRTZWxlY3Rpb24oc3RhcnRQb3NpdGlvbilcbiAgfVxuXG4gIGluc2VydFBsYWNlaG9sZGVyKCkge1xuICAgIHRoaXMucGxhY2Vob2xkZXJQb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb24oKVxuICAgIHJldHVybiB0aGlzLmluc2VydFN0cmluZyhQTEFDRUhPTERFUilcbiAgfVxuXG4gIHNlbGVjdFBsYWNlaG9sZGVyKCkge1xuICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyUG9zaXRpb24gIT0gbnVsbCkge1xuICAgICAgdGhpcy5zZXRTZWxlY3RlZFJhbmdlKFsgdGhpcy5wbGFjZWhvbGRlclBvc2l0aW9uLCB0aGlzLnBsYWNlaG9sZGVyUG9zaXRpb24gKyBQTEFDRUhPTERFUi5sZW5ndGggXSlcbiAgICAgIHJldHVybiB0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKVxuICAgIH1cbiAgfVxuXG4gIGZvcmdldFBsYWNlaG9sZGVyKCkge1xuICAgIHRoaXMucGxhY2Vob2xkZXJQb3NpdGlvbiA9IG51bGxcbiAgfVxuXG4gIC8vIEN1cnJlbnQgYXR0cmlidXRlc1xuXG4gIGhhc0N1cnJlbnRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jdXJyZW50QXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXVxuICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSBmYWxzZVxuICB9XG5cbiAgdG9nZ2xlQ3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgY29uc3QgdmFsdWUgPSAhdGhpcy5jdXJyZW50QXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXVxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0Q3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCB2YWx1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlQ3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKVxuICAgIH1cbiAgfVxuXG4gIGNhblNldEN1cnJlbnRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkge1xuICAgIGlmIChnZXRCbG9ja0NvbmZpZyhhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FuU2V0Q3VycmVudEJsb2NrQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNhblNldEN1cnJlbnRUZXh0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpXG4gICAgfVxuICB9XG5cbiAgY2FuU2V0Q3VycmVudFRleHRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gdGhpcy5nZXRTZWxlY3RlZERvY3VtZW50KClcbiAgICBpZiAoIWRvY3VtZW50KSByZXR1cm5cbiAgICBmb3IgKGNvbnN0IGF0dGFjaG1lbnQgb2YgQXJyYXkuZnJvbShkb2N1bWVudC5nZXRBdHRhY2htZW50cygpKSkge1xuICAgICAgaWYgKCFhdHRhY2htZW50Lmhhc0NvbnRlbnQoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGNhblNldEN1cnJlbnRCbG9ja0F0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgY29uc3QgYmxvY2sgPSB0aGlzLmdldEJsb2NrKClcbiAgICBpZiAoIWJsb2NrKSByZXR1cm5cbiAgICByZXR1cm4gIWJsb2NrLmlzVGVybWluYWxCbG9jaygpXG4gIH1cblxuICBzZXRDdXJyZW50QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGdldEJsb2NrQ29uZmlnKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRCbG9ja0F0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCB2YWx1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRUZXh0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIHZhbHVlKVxuICAgICAgdGhpcy5jdXJyZW50QXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSA9IHZhbHVlXG4gICAgICByZXR1cm4gdGhpcy5ub3RpZnlEZWxlZ2F0ZU9mQ3VycmVudEF0dHJpYnV0ZXNDaGFuZ2UoKVxuICAgIH1cbiAgfVxuXG4gIHNldEhUTUxBdHJpYnV0ZUF0UG9zaXRpb24ocG9zaXRpb24sIGF0dHJpYnV0ZU5hbWUsIHZhbHVlKSB7XG4gICAgY29uc3QgYmxvY2sgPSB0aGlzLmRvY3VtZW50LmdldEJsb2NrQXRQb3NpdGlvbihwb3NpdGlvbilcbiAgICBjb25zdCBhbGxvd2VkSFRNTEF0dHJpYnV0ZXMgPSBnZXRCbG9ja0NvbmZpZyhibG9jay5nZXRMYXN0QXR0cmlidXRlKCkpPy5odG1sQXR0cmlidXRlc1xuXG4gICAgaWYgKGJsb2NrICYmIGFsbG93ZWRIVE1MQXR0cmlidXRlcz8uaW5jbHVkZXMoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgIGNvbnN0IG5ld0RvY3VtZW50ID0gdGhpcy5kb2N1bWVudC5zZXRIVE1MQXR0cmlidXRlQXRQb3NpdGlvbihwb3NpdGlvbiwgYXR0cmlidXRlTmFtZSwgdmFsdWUpXG4gICAgICB0aGlzLnNldERvY3VtZW50KG5ld0RvY3VtZW50KVxuICAgIH1cbiAgfVxuXG4gIHNldFRleHRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgdmFsdWUpIHtcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICBpZiAoIXNlbGVjdGVkUmFuZ2UpIHJldHVyblxuXG4gICAgY29uc3QgWyBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiBdID0gQXJyYXkuZnJvbShzZWxlY3RlZFJhbmdlKVxuICAgIGlmIChzdGFydFBvc2l0aW9uID09PSBlbmRQb3NpdGlvbikge1xuICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT09IFwiaHJlZlwiKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBUZXh0LnRleHRGb3JTdHJpbmdXaXRoQXR0cmlidXRlcyh2YWx1ZSwgeyBocmVmOiB2YWx1ZSB9KVxuICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnRUZXh0KHRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQuYWRkQXR0cmlidXRlQXRSYW5nZShhdHRyaWJ1dGVOYW1lLCB2YWx1ZSwgc2VsZWN0ZWRSYW5nZSkpXG4gICAgfVxuICB9XG5cbiAgc2V0QmxvY2tBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgdmFsdWUpIHtcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICBpZiAodGhpcy5jYW5TZXRDdXJyZW50QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQuYXBwbHlCbG9ja0F0dHJpYnV0ZUF0UmFuZ2UoYXR0cmlidXRlTmFtZSwgdmFsdWUsIHNlbGVjdGVkUmFuZ2UpKVxuICAgICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0aW9uKHNlbGVjdGVkUmFuZ2UpXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlQ3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgaWYgKGdldEJsb2NrQ29uZmlnKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICB0aGlzLnJlbW92ZUJsb2NrQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpXG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVDdXJyZW50QXR0cmlidXRlcygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlVGV4dEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKVxuICAgICAgZGVsZXRlIHRoaXMuY3VycmVudEF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV1cbiAgICAgIHJldHVybiB0aGlzLm5vdGlmeURlbGVnYXRlT2ZDdXJyZW50QXR0cmlidXRlc0NoYW5nZSgpXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlVGV4dEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRSYW5nZSA9IHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpXG4gICAgaWYgKCFzZWxlY3RlZFJhbmdlKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zZXREb2N1bWVudCh0aGlzLmRvY3VtZW50LnJlbW92ZUF0dHJpYnV0ZUF0UmFuZ2UoYXR0cmlidXRlTmFtZSwgc2VsZWN0ZWRSYW5nZSkpXG4gIH1cblxuICByZW1vdmVCbG9ja0F0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRSYW5nZSA9IHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpXG4gICAgaWYgKCFzZWxlY3RlZFJhbmdlKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zZXREb2N1bWVudCh0aGlzLmRvY3VtZW50LnJlbW92ZUF0dHJpYnV0ZUF0UmFuZ2UoYXR0cmlidXRlTmFtZSwgc2VsZWN0ZWRSYW5nZSkpXG4gIH1cblxuICBjYW5EZWNyZWFzZU5lc3RpbmdMZXZlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCbG9jaygpPy5nZXROZXN0aW5nTGV2ZWwoKSA+IDBcbiAgfVxuXG4gIGNhbkluY3JlYXNlTmVzdGluZ0xldmVsKCkge1xuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5nZXRCbG9jaygpXG4gICAgaWYgKCFibG9jaykgcmV0dXJuXG4gICAgaWYgKGdldEJsb2NrQ29uZmlnKGJsb2NrLmdldExhc3ROZXN0YWJsZUF0dHJpYnV0ZSgpKT8ubGlzdEF0dHJpYnV0ZSkge1xuICAgICAgY29uc3QgcHJldmlvdXNCbG9jayA9IHRoaXMuZ2V0UHJldmlvdXNCbG9jaygpXG4gICAgICBpZiAocHJldmlvdXNCbG9jaykge1xuICAgICAgICByZXR1cm4gYXJyYXlTdGFydHNXaXRoKHByZXZpb3VzQmxvY2suZ2V0TGlzdEl0ZW1BdHRyaWJ1dGVzKCksIGJsb2NrLmdldExpc3RJdGVtQXR0cmlidXRlcygpKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYmxvY2suZ2V0TmVzdGluZ0xldmVsKCkgPiAwXG4gICAgfVxuICB9XG5cbiAgZGVjcmVhc2VOZXN0aW5nTGV2ZWwoKSB7XG4gICAgY29uc3QgYmxvY2sgPSB0aGlzLmdldEJsb2NrKClcbiAgICBpZiAoIWJsb2NrKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zZXREb2N1bWVudCh0aGlzLmRvY3VtZW50LnJlcGxhY2VCbG9jayhibG9jaywgYmxvY2suZGVjcmVhc2VOZXN0aW5nTGV2ZWwoKSkpXG4gIH1cblxuICBpbmNyZWFzZU5lc3RpbmdMZXZlbCgpIHtcbiAgICBjb25zdCBibG9jayA9IHRoaXMuZ2V0QmxvY2soKVxuICAgIGlmICghYmxvY2spIHJldHVyblxuICAgIHJldHVybiB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQucmVwbGFjZUJsb2NrKGJsb2NrLCBibG9jay5pbmNyZWFzZU5lc3RpbmdMZXZlbCgpKSlcbiAgfVxuXG4gIGNhbkRlY3JlYXNlQmxvY2tBdHRyaWJ1dGVMZXZlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCbG9jaygpPy5nZXRBdHRyaWJ1dGVMZXZlbCgpID4gMFxuICB9XG5cbiAgZGVjcmVhc2VCbG9ja0F0dHJpYnV0ZUxldmVsKCkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHRoaXMuZ2V0QmxvY2soKT8uZ2V0TGFzdEF0dHJpYnV0ZSgpXG4gICAgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlQ3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGUpXG4gICAgfVxuICB9XG5cbiAgZGVjcmVhc2VMaXN0TGV2ZWwoKSB7XG4gICAgbGV0IFsgc3RhcnRQb3NpdGlvbiBdID0gQXJyYXkuZnJvbSh0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKSlcbiAgICBjb25zdCB7IGluZGV4IH0gPSB0aGlzLmRvY3VtZW50LmxvY2F0aW9uRnJvbVBvc2l0aW9uKHN0YXJ0UG9zaXRpb24pXG4gICAgbGV0IGVuZEluZGV4ID0gaW5kZXhcbiAgICBjb25zdCBhdHRyaWJ1dGVMZXZlbCA9IHRoaXMuZ2V0QmxvY2soKS5nZXRBdHRyaWJ1dGVMZXZlbCgpXG5cbiAgICBsZXQgYmxvY2sgPSB0aGlzLmRvY3VtZW50LmdldEJsb2NrQXRJbmRleChlbmRJbmRleCArIDEpXG4gICAgd2hpbGUgKGJsb2NrKSB7XG4gICAgICBpZiAoIWJsb2NrLmlzTGlzdEl0ZW0oKSB8fCBibG9jay5nZXRBdHRyaWJ1dGVMZXZlbCgpIDw9IGF0dHJpYnV0ZUxldmVsKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBlbmRJbmRleCsrXG4gICAgICBibG9jayA9IHRoaXMuZG9jdW1lbnQuZ2V0QmxvY2tBdEluZGV4KGVuZEluZGV4ICsgMSlcbiAgICB9XG5cbiAgICBzdGFydFBvc2l0aW9uID0gdGhpcy5kb2N1bWVudC5wb3NpdGlvbkZyb21Mb2NhdGlvbih7IGluZGV4LCBvZmZzZXQ6IDAgfSlcbiAgICBjb25zdCBlbmRQb3NpdGlvbiA9IHRoaXMuZG9jdW1lbnQucG9zaXRpb25Gcm9tTG9jYXRpb24oeyBpbmRleDogZW5kSW5kZXgsIG9mZnNldDogMCB9KVxuICAgIHJldHVybiB0aGlzLnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnQucmVtb3ZlTGFzdExpc3RBdHRyaWJ1dGVBdFJhbmdlKFsgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24gXSkpXG4gIH1cblxuICB1cGRhdGVDdXJyZW50QXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5nZXRTZWxlY3RlZFJhbmdlKHsgaWdub3JlTG9jazogdHJ1ZSB9KVxuICAgIGlmIChzZWxlY3RlZFJhbmdlKSB7XG4gICAgICBjb25zdCBjdXJyZW50QXR0cmlidXRlcyA9IHRoaXMuZG9jdW1lbnQuZ2V0Q29tbW9uQXR0cmlidXRlc0F0UmFuZ2Uoc2VsZWN0ZWRSYW5nZSlcblxuICAgICAgQXJyYXkuZnJvbShnZXRBbGxBdHRyaWJ1dGVOYW1lcygpKS5mb3JFYWNoKChhdHRyaWJ1dGVOYW1lKSA9PiB7XG4gICAgICAgIGlmICghY3VycmVudEF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0pIHtcbiAgICAgICAgICBpZiAoIXRoaXMuY2FuU2V0Q3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0gPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgaWYgKCFvYmplY3RzQXJlRXF1YWwoY3VycmVudEF0dHJpYnV0ZXMsIHRoaXMuY3VycmVudEF0dHJpYnV0ZXMpKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEF0dHJpYnV0ZXMgPSBjdXJyZW50QXR0cmlidXRlc1xuICAgICAgICByZXR1cm4gdGhpcy5ub3RpZnlEZWxlZ2F0ZU9mQ3VycmVudEF0dHJpYnV0ZXNDaGFuZ2UoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldEN1cnJlbnRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiBleHRlbmQuY2FsbCh7fSwgdGhpcy5jdXJyZW50QXR0cmlidXRlcylcbiAgfVxuXG4gIGdldEN1cnJlbnRUZXh0QXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmN1cnJlbnRBdHRyaWJ1dGVzKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuY3VycmVudEF0dHJpYnV0ZXNba2V5XVxuICAgICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgICBpZiAoZ2V0VGV4dENvbmZpZyhrZXkpKSB7XG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gdmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXR0cmlidXRlc1xuICB9XG5cbiAgLy8gU2VsZWN0aW9uIGZyZWV6aW5nXG5cbiAgZnJlZXplU2VsZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNldEN1cnJlbnRBdHRyaWJ1dGUoXCJmcm96ZW5cIiwgdHJ1ZSlcbiAgfVxuXG4gIHRoYXdTZWxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlQ3VycmVudEF0dHJpYnV0ZShcImZyb3plblwiKVxuICB9XG5cbiAgaGFzRnJvemVuU2VsZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmhhc0N1cnJlbnRBdHRyaWJ1dGUoXCJmcm96ZW5cIilcbiAgfVxuXG4gIHNldFNlbGVjdGlvbihzZWxlY3RlZFJhbmdlKSB7XG4gICAgY29uc3QgbG9jYXRpb25SYW5nZSA9IHRoaXMuZG9jdW1lbnQubG9jYXRpb25SYW5nZUZyb21SYW5nZShzZWxlY3RlZFJhbmdlKVxuICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkRpZFJlcXVlc3RDaGFuZ2luZ1NlbGVjdGlvblRvTG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKVxuICB9XG5cbiAgZ2V0U2VsZWN0ZWRSYW5nZSgpIHtcbiAgICBjb25zdCBsb2NhdGlvblJhbmdlID0gdGhpcy5nZXRMb2NhdGlvblJhbmdlKClcbiAgICBpZiAobG9jYXRpb25SYW5nZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQucmFuZ2VGcm9tTG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKVxuICAgIH1cbiAgfVxuXG4gIHNldFNlbGVjdGVkUmFuZ2Uoc2VsZWN0ZWRSYW5nZSkge1xuICAgIGNvbnN0IGxvY2F0aW9uUmFuZ2UgPSB0aGlzLmRvY3VtZW50LmxvY2F0aW9uUmFuZ2VGcm9tUmFuZ2Uoc2VsZWN0ZWRSYW5nZSlcbiAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3Rpb25NYW5hZ2VyKCkuc2V0TG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKVxuICB9XG5cbiAgZ2V0UG9zaXRpb24oKSB7XG4gICAgY29uc3QgbG9jYXRpb25SYW5nZSA9IHRoaXMuZ2V0TG9jYXRpb25SYW5nZSgpXG4gICAgaWYgKGxvY2F0aW9uUmFuZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50LnBvc2l0aW9uRnJvbUxvY2F0aW9uKGxvY2F0aW9uUmFuZ2VbMF0pXG4gICAgfVxuICB9XG5cbiAgZ2V0TG9jYXRpb25SYW5nZShvcHRpb25zKSB7XG4gICAgaWYgKHRoaXMudGFyZ2V0TG9jYXRpb25SYW5nZSkge1xuICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0TG9jYXRpb25SYW5nZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3Rpb25NYW5hZ2VyKCkuZ2V0TG9jYXRpb25SYW5nZShvcHRpb25zKSB8fCBub3JtYWxpemVSYW5nZSh7IGluZGV4OiAwLCBvZmZzZXQ6IDAgfSlcbiAgICB9XG4gIH1cblxuICB3aXRoVGFyZ2V0TG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlLCBmbikge1xuICAgIGxldCByZXN1bHRcbiAgICB0aGlzLnRhcmdldExvY2F0aW9uUmFuZ2UgPSBsb2NhdGlvblJhbmdlXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZuKClcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy50YXJnZXRMb2NhdGlvblJhbmdlID0gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICB3aXRoVGFyZ2V0UmFuZ2UocmFuZ2UsIGZuKSB7XG4gICAgY29uc3QgbG9jYXRpb25SYW5nZSA9IHRoaXMuZG9jdW1lbnQubG9jYXRpb25SYW5nZUZyb21SYW5nZShyYW5nZSlcbiAgICByZXR1cm4gdGhpcy53aXRoVGFyZ2V0TG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlLCBmbilcbiAgfVxuXG4gIHdpdGhUYXJnZXRET01SYW5nZShkb21SYW5nZSwgZm4pIHtcbiAgICBjb25zdCBsb2NhdGlvblJhbmdlID0gdGhpcy5jcmVhdGVMb2NhdGlvblJhbmdlRnJvbURPTVJhbmdlKGRvbVJhbmdlLCB7IHN0cmljdDogZmFsc2UgfSlcbiAgICByZXR1cm4gdGhpcy53aXRoVGFyZ2V0TG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlLCBmbilcbiAgfVxuXG4gIGdldEV4cGFuZGVkUmFuZ2VJbkRpcmVjdGlvbihkaXJlY3Rpb24sIHsgbGVuZ3RoIH0gPSB7fSkge1xuICAgIGxldCBbIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uIF0gPSBBcnJheS5mcm9tKHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpKVxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwiYmFja3dhcmRcIikge1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICBzdGFydFBvc2l0aW9uIC09IGxlbmd0aFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnRQb3NpdGlvbiA9IHRoaXMudHJhbnNsYXRlVVRGMTZQb3NpdGlvbkZyb21PZmZzZXQoc3RhcnRQb3NpdGlvbiwgLTEpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgZW5kUG9zaXRpb24gKz0gbGVuZ3RoXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmRQb3NpdGlvbiA9IHRoaXMudHJhbnNsYXRlVVRGMTZQb3NpdGlvbkZyb21PZmZzZXQoZW5kUG9zaXRpb24sIDEpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVSYW5nZShbIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uIF0pXG4gIH1cblxuICBzaG91bGRNYW5hZ2VNb3ZpbmdDdXJzb3JJbkRpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICBpZiAodGhpcy5lZGl0aW5nQXR0YWNobWVudCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldEV4cGFuZGVkUmFuZ2VJbkRpcmVjdGlvbihkaXJlY3Rpb24pXG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0YWNobWVudEF0UmFuZ2UocmFuZ2UpICE9IG51bGxcbiAgfVxuXG4gIG1vdmVDdXJzb3JJbkRpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICBsZXQgY2FuRWRpdEF0dGFjaG1lbnQsIHJhbmdlXG4gICAgaWYgKHRoaXMuZWRpdGluZ0F0dGFjaG1lbnQpIHtcbiAgICAgIHJhbmdlID0gdGhpcy5kb2N1bWVudC5nZXRSYW5nZU9mQXR0YWNobWVudCh0aGlzLmVkaXRpbmdBdHRhY2htZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gdGhpcy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICAgIHJhbmdlID0gdGhpcy5nZXRFeHBhbmRlZFJhbmdlSW5EaXJlY3Rpb24oZGlyZWN0aW9uKVxuICAgICAgY2FuRWRpdEF0dGFjaG1lbnQgPSAhcmFuZ2VzQXJlRXF1YWwoc2VsZWN0ZWRSYW5nZSwgcmFuZ2UpXG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJiYWNrd2FyZFwiKSB7XG4gICAgICB0aGlzLnNldFNlbGVjdGVkUmFuZ2UocmFuZ2VbMF0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U2VsZWN0ZWRSYW5nZShyYW5nZVsxXSlcbiAgICB9XG5cbiAgICBpZiAoY2FuRWRpdEF0dGFjaG1lbnQpIHtcbiAgICAgIGNvbnN0IGF0dGFjaG1lbnQgPSB0aGlzLmdldEF0dGFjaG1lbnRBdFJhbmdlKHJhbmdlKVxuICAgICAgaWYgKGF0dGFjaG1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdEF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBleHBhbmRTZWxlY3Rpb25JbkRpcmVjdGlvbihkaXJlY3Rpb24sIHsgbGVuZ3RoIH0gPSB7fSkge1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRFeHBhbmRlZFJhbmdlSW5EaXJlY3Rpb24oZGlyZWN0aW9uLCB7IGxlbmd0aCB9KVxuICAgIHJldHVybiB0aGlzLnNldFNlbGVjdGVkUmFuZ2UocmFuZ2UpXG4gIH1cblxuICBleHBhbmRTZWxlY3Rpb25Gb3JFZGl0aW5nKCkge1xuICAgIGlmICh0aGlzLmhhc0N1cnJlbnRBdHRyaWJ1dGUoXCJocmVmXCIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5leHBhbmRTZWxlY3Rpb25Bcm91bmRDb21tb25BdHRyaWJ1dGUoXCJocmVmXCIpXG4gICAgfVxuICB9XG5cbiAgZXhwYW5kU2VsZWN0aW9uQXJvdW5kQ29tbW9uQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb24oKVxuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5kb2N1bWVudC5nZXRSYW5nZU9mQ29tbW9uQXR0cmlidXRlQXRQb3NpdGlvbihhdHRyaWJ1dGVOYW1lLCBwb3NpdGlvbilcbiAgICByZXR1cm4gdGhpcy5zZXRTZWxlY3RlZFJhbmdlKHJhbmdlKVxuICB9XG5cbiAgc2VsZWN0aW9uQ29udGFpbnNBdHRhY2htZW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3RlZEF0dGFjaG1lbnRzKCk/Lmxlbmd0aCA+IDBcbiAgfVxuXG4gIHNlbGVjdGlvbklzSW5DdXJzb3JUYXJnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdGluZ0F0dGFjaG1lbnQgfHwgdGhpcy5wb3NpdGlvbklzQ3Vyc29yVGFyZ2V0KHRoaXMuZ2V0UG9zaXRpb24oKSlcbiAgfVxuXG4gIHBvc2l0aW9uSXNDdXJzb3JUYXJnZXQocG9zaXRpb24pIHtcbiAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuZG9jdW1lbnQubG9jYXRpb25Gcm9tUG9zaXRpb24ocG9zaXRpb24pXG4gICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5sb2NhdGlvbklzQ3Vyc29yVGFyZ2V0KGxvY2F0aW9uKVxuICAgIH1cbiAgfVxuXG4gIHBvc2l0aW9uSXNCbG9ja0JyZWFrKHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQuZ2V0UGllY2VBdFBvc2l0aW9uKHBvc2l0aW9uKT8uaXNCbG9ja0JyZWFrKClcbiAgfVxuXG4gIGdldFNlbGVjdGVkRG9jdW1lbnQoKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRSYW5nZSA9IHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpXG4gICAgaWYgKHNlbGVjdGVkUmFuZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmdldERvY3VtZW50QXRSYW5nZShzZWxlY3RlZFJhbmdlKVxuICAgIH1cbiAgfVxuXG4gIGdldFNlbGVjdGVkQXR0YWNobWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2VsZWN0ZWREb2N1bWVudCgpPy5nZXRBdHRhY2htZW50cygpXG4gIH1cblxuICAvLyBBdHRhY2htZW50c1xuXG4gIGdldEF0dGFjaG1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLmF0dGFjaG1lbnRzLnNsaWNlKDApXG4gIH1cblxuICByZWZyZXNoQXR0YWNobWVudHMoKSB7XG4gICAgY29uc3QgYXR0YWNobWVudHMgPSB0aGlzLmRvY3VtZW50LmdldEF0dGFjaG1lbnRzKClcbiAgICBjb25zdCB7IGFkZGVkLCByZW1vdmVkIH0gPSBzdW1tYXJpemVBcnJheUNoYW5nZSh0aGlzLmF0dGFjaG1lbnRzLCBhdHRhY2htZW50cylcbiAgICB0aGlzLmF0dGFjaG1lbnRzID0gYXR0YWNobWVudHNcblxuICAgIEFycmF5LmZyb20ocmVtb3ZlZCkuZm9yRWFjaCgoYXR0YWNobWVudCkgPT4ge1xuICAgICAgYXR0YWNobWVudC5kZWxlZ2F0ZSA9IG51bGxcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uRGlkUmVtb3ZlQXR0YWNobWVudD8uKGF0dGFjaG1lbnQpXG4gICAgfSlcblxuICAgIHJldHVybiAoKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gW11cblxuICAgICAgQXJyYXkuZnJvbShhZGRlZCkuZm9yRWFjaCgoYXR0YWNobWVudCkgPT4ge1xuICAgICAgICBhdHRhY2htZW50LmRlbGVnYXRlID0gdGhpc1xuICAgICAgICByZXN1bHQucHVzaCh0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkRpZEFkZEF0dGFjaG1lbnQ/LihhdHRhY2htZW50KSlcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9KSgpXG4gIH1cblxuICAvLyBBdHRhY2htZW50IGRlbGVnYXRlXG5cbiAgYXR0YWNobWVudERpZENoYW5nZUF0dHJpYnV0ZXMoYXR0YWNobWVudCkge1xuICAgIHRoaXMucmV2aXNpb24rK1xuICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkRpZEVkaXRBdHRhY2htZW50Py4oYXR0YWNobWVudClcbiAgfVxuXG4gIGF0dGFjaG1lbnREaWRDaGFuZ2VQcmV2aWV3VVJMKGF0dGFjaG1lbnQpIHtcbiAgICB0aGlzLnJldmlzaW9uKytcbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25EaWRDaGFuZ2VBdHRhY2htZW50UHJldmlld1VSTD8uKGF0dGFjaG1lbnQpXG4gIH1cblxuICAvLyBBdHRhY2htZW50IGVkaXRpbmdcblxuICBlZGl0QXR0YWNobWVudChhdHRhY2htZW50LCBvcHRpb25zKSB7XG4gICAgaWYgKGF0dGFjaG1lbnQgPT09IHRoaXMuZWRpdGluZ0F0dGFjaG1lbnQpIHJldHVyblxuICAgIHRoaXMuc3RvcEVkaXRpbmdBdHRhY2htZW50KClcbiAgICB0aGlzLmVkaXRpbmdBdHRhY2htZW50ID0gYXR0YWNobWVudFxuICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkRpZFN0YXJ0RWRpdGluZ0F0dGFjaG1lbnQ/Lih0aGlzLmVkaXRpbmdBdHRhY2htZW50LCBvcHRpb25zKVxuICB9XG5cbiAgc3RvcEVkaXRpbmdBdHRhY2htZW50KCkge1xuICAgIGlmICghdGhpcy5lZGl0aW5nQXR0YWNobWVudCkgcmV0dXJuXG4gICAgdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25EaWRTdG9wRWRpdGluZ0F0dGFjaG1lbnQ/Lih0aGlzLmVkaXRpbmdBdHRhY2htZW50KVxuICAgIHRoaXMuZWRpdGluZ0F0dGFjaG1lbnQgPSBudWxsXG4gIH1cblxuICB1cGRhdGVBdHRyaWJ1dGVzRm9yQXR0YWNobWVudChhdHRyaWJ1dGVzLCBhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0RG9jdW1lbnQodGhpcy5kb2N1bWVudC51cGRhdGVBdHRyaWJ1dGVzRm9yQXR0YWNobWVudChhdHRyaWJ1dGVzLCBhdHRhY2htZW50KSlcbiAgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZUZvckF0dGFjaG1lbnQoYXR0cmlidXRlLCBhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0RG9jdW1lbnQodGhpcy5kb2N1bWVudC5yZW1vdmVBdHRyaWJ1dGVGb3JBdHRhY2htZW50KGF0dHJpYnV0ZSwgYXR0YWNobWVudCkpXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgYnJlYWtGb3JtYXR0ZWRCbG9jayhpbnNlcnRpb24pIHtcbiAgICBsZXQgeyBkb2N1bWVudCB9ID0gaW5zZXJ0aW9uXG4gICAgY29uc3QgeyBibG9jayB9ID0gaW5zZXJ0aW9uXG4gICAgbGV0IHBvc2l0aW9uID0gaW5zZXJ0aW9uLnN0YXJ0UG9zaXRpb25cbiAgICBsZXQgcmFuZ2UgPSBbIHBvc2l0aW9uIC0gMSwgcG9zaXRpb24gXVxuXG4gICAgaWYgKGJsb2NrLmdldEJsb2NrQnJlYWtQb3NpdGlvbigpID09PSBpbnNlcnRpb24uc3RhcnRMb2NhdGlvbi5vZmZzZXQpIHtcbiAgICAgIGlmIChibG9jay5icmVha3NPblJldHVybigpICYmIGluc2VydGlvbi5uZXh0Q2hhcmFjdGVyID09PSBcIlxcblwiKSB7XG4gICAgICAgIHBvc2l0aW9uICs9IDFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50ID0gZG9jdW1lbnQucmVtb3ZlVGV4dEF0UmFuZ2UocmFuZ2UpXG4gICAgICB9XG4gICAgICByYW5nZSA9IFsgcG9zaXRpb24sIHBvc2l0aW9uIF1cbiAgICB9IGVsc2UgaWYgKGluc2VydGlvbi5uZXh0Q2hhcmFjdGVyID09PSBcIlxcblwiKSB7XG4gICAgICBpZiAoaW5zZXJ0aW9uLnByZXZpb3VzQ2hhcmFjdGVyID09PSBcIlxcblwiKSB7XG4gICAgICAgIHJhbmdlID0gWyBwb3NpdGlvbiAtIDEsIHBvc2l0aW9uICsgMSBdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByYW5nZSA9IFsgcG9zaXRpb24sIHBvc2l0aW9uICsgMSBdXG4gICAgICAgIHBvc2l0aW9uICs9IDFcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGluc2VydGlvbi5zdGFydExvY2F0aW9uLm9mZnNldCAtIDEgIT09IDApIHtcbiAgICAgIHBvc2l0aW9uICs9IDFcbiAgICB9XG5cbiAgICBjb25zdCBuZXdEb2N1bWVudCA9IG5ldyBEb2N1bWVudChbIGJsb2NrLnJlbW92ZUxhc3RBdHRyaWJ1dGUoKS5jb3B5V2l0aG91dFRleHQoKSBdKVxuICAgIHRoaXMuc2V0RG9jdW1lbnQoZG9jdW1lbnQuaW5zZXJ0RG9jdW1lbnRBdFJhbmdlKG5ld0RvY3VtZW50LCByYW5nZSkpXG4gICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0aW9uKHBvc2l0aW9uKVxuICB9XG5cbiAgZ2V0UHJldmlvdXNCbG9jaygpIHtcbiAgICBjb25zdCBsb2NhdGlvblJhbmdlID0gdGhpcy5nZXRMb2NhdGlvblJhbmdlKClcbiAgICBpZiAobG9jYXRpb25SYW5nZSkge1xuICAgICAgY29uc3QgeyBpbmRleCB9ID0gbG9jYXRpb25SYW5nZVswXVxuICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5nZXRCbG9ja0F0SW5kZXgoaW5kZXggLSAxKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldEJsb2NrKCkge1xuICAgIGNvbnN0IGxvY2F0aW9uUmFuZ2UgPSB0aGlzLmdldExvY2F0aW9uUmFuZ2UoKVxuICAgIGlmIChsb2NhdGlvblJhbmdlKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5nZXRCbG9ja0F0SW5kZXgobG9jYXRpb25SYW5nZVswXS5pbmRleClcbiAgICB9XG4gIH1cblxuICBnZXRBdHRhY2htZW50QXRSYW5nZShyYW5nZSkge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gdGhpcy5kb2N1bWVudC5nZXREb2N1bWVudEF0UmFuZ2UocmFuZ2UpXG4gICAgaWYgKGRvY3VtZW50LnRvU3RyaW5nKCkgPT09IGAke09CSkVDVF9SRVBMQUNFTUVOVF9DSEFSQUNURVJ9XFxuYCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEF0dGFjaG1lbnRzKClbMF1cbiAgICB9XG4gIH1cblxuICBub3RpZnlEZWxlZ2F0ZU9mQ3VycmVudEF0dHJpYnV0ZXNDaGFuZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uRGlkQ2hhbmdlQ3VycmVudEF0dHJpYnV0ZXM/Lih0aGlzLmN1cnJlbnRBdHRyaWJ1dGVzKVxuICB9XG5cbiAgbm90aWZ5RGVsZWdhdGVPZkluc2VydGlvbkF0UmFuZ2UocmFuZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25EaWRQZXJmb3JtSW5zZXJ0aW9uQXRSYW5nZT8uKHJhbmdlKVxuICB9XG5cbiAgdHJhbnNsYXRlVVRGMTZQb3NpdGlvbkZyb21PZmZzZXQocG9zaXRpb24sIG9mZnNldCkge1xuICAgIGNvbnN0IHV0ZjE2c3RyaW5nID0gdGhpcy5kb2N1bWVudC50b1VURjE2U3RyaW5nKClcbiAgICBjb25zdCB1dGYxNnBvc2l0aW9uID0gdXRmMTZzdHJpbmcub2Zmc2V0RnJvbVVDUzJPZmZzZXQocG9zaXRpb24pXG4gICAgcmV0dXJuIHV0ZjE2c3RyaW5nLm9mZnNldFRvVUNTMk9mZnNldCh1dGYxNnBvc2l0aW9uICsgb2Zmc2V0KVxuICB9XG59XG5cbkNvbXBvc2l0aW9uLnByb3h5TWV0aG9kKFwiZ2V0U2VsZWN0aW9uTWFuYWdlcigpLmdldFBvaW50UmFuZ2VcIilcbkNvbXBvc2l0aW9uLnByb3h5TWV0aG9kKFwiZ2V0U2VsZWN0aW9uTWFuYWdlcigpLnNldExvY2F0aW9uUmFuZ2VGcm9tUG9pbnRSYW5nZVwiKVxuQ29tcG9zaXRpb24ucHJveHlNZXRob2QoXCJnZXRTZWxlY3Rpb25NYW5hZ2VyKCkuY3JlYXRlTG9jYXRpb25SYW5nZUZyb21ET01SYW5nZVwiKVxuQ29tcG9zaXRpb24ucHJveHlNZXRob2QoXCJnZXRTZWxlY3Rpb25NYW5hZ2VyKCkubG9jYXRpb25Jc0N1cnNvclRhcmdldFwiKVxuQ29tcG9zaXRpb24ucHJveHlNZXRob2QoXCJnZXRTZWxlY3Rpb25NYW5hZ2VyKCkuc2VsZWN0aW9uSXNFeHBhbmRlZFwiKVxuQ29tcG9zaXRpb24ucHJveHlNZXRob2QoXCJkZWxlZ2F0ZT8uZ2V0U2VsZWN0aW9uTWFuYWdlclwiKVxuIiwgImltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuZG9NYW5hZ2VyIGV4dGVuZHMgQmFzaWNPYmplY3Qge1xuICBjb25zdHJ1Y3Rvcihjb21wb3NpdGlvbikge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLmNvbXBvc2l0aW9uID0gY29tcG9zaXRpb25cbiAgICB0aGlzLnVuZG9FbnRyaWVzID0gW11cbiAgICB0aGlzLnJlZG9FbnRyaWVzID0gW11cbiAgfVxuXG4gIHJlY29yZFVuZG9FbnRyeShkZXNjcmlwdGlvbiwgeyBjb250ZXh0LCBjb25zb2xpZGF0YWJsZSB9ID0ge30pIHtcbiAgICBjb25zdCBwcmV2aW91c0VudHJ5ID0gdGhpcy51bmRvRW50cmllcy5zbGljZSgtMSlbMF1cblxuICAgIGlmICghY29uc29saWRhdGFibGUgfHwgIWVudHJ5SGFzRGVzY3JpcHRpb25BbmRDb250ZXh0KHByZXZpb3VzRW50cnksIGRlc2NyaXB0aW9uLCBjb250ZXh0KSkge1xuICAgICAgY29uc3QgdW5kb0VudHJ5ID0gdGhpcy5jcmVhdGVFbnRyeSh7IGRlc2NyaXB0aW9uLCBjb250ZXh0IH0pXG4gICAgICB0aGlzLnVuZG9FbnRyaWVzLnB1c2godW5kb0VudHJ5KVxuICAgICAgdGhpcy5yZWRvRW50cmllcyA9IFtdXG4gICAgfVxuICB9XG5cbiAgdW5kbygpIHtcbiAgICBjb25zdCB1bmRvRW50cnkgPSB0aGlzLnVuZG9FbnRyaWVzLnBvcCgpXG4gICAgaWYgKHVuZG9FbnRyeSkge1xuICAgICAgY29uc3QgcmVkb0VudHJ5ID0gdGhpcy5jcmVhdGVFbnRyeSh1bmRvRW50cnkpXG4gICAgICB0aGlzLnJlZG9FbnRyaWVzLnB1c2gocmVkb0VudHJ5KVxuICAgICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24ubG9hZFNuYXBzaG90KHVuZG9FbnRyeS5zbmFwc2hvdClcbiAgICB9XG4gIH1cblxuICByZWRvKCkge1xuICAgIGNvbnN0IHJlZG9FbnRyeSA9IHRoaXMucmVkb0VudHJpZXMucG9wKClcbiAgICBpZiAocmVkb0VudHJ5KSB7XG4gICAgICBjb25zdCB1bmRvRW50cnkgPSB0aGlzLmNyZWF0ZUVudHJ5KHJlZG9FbnRyeSlcbiAgICAgIHRoaXMudW5kb0VudHJpZXMucHVzaCh1bmRvRW50cnkpXG4gICAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5sb2FkU25hcHNob3QocmVkb0VudHJ5LnNuYXBzaG90KVxuICAgIH1cbiAgfVxuXG4gIGNhblVuZG8oKSB7XG4gICAgcmV0dXJuIHRoaXMudW5kb0VudHJpZXMubGVuZ3RoID4gMFxuICB9XG5cbiAgY2FuUmVkbygpIHtcbiAgICByZXR1cm4gdGhpcy5yZWRvRW50cmllcy5sZW5ndGggPiAwXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgY3JlYXRlRW50cnkoeyBkZXNjcmlwdGlvbiwgY29udGV4dCB9ID0ge30pIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uPy50b1N0cmluZygpLFxuICAgICAgY29udGV4dDogSlNPTi5zdHJpbmdpZnkoY29udGV4dCksXG4gICAgICBzbmFwc2hvdDogdGhpcy5jb21wb3NpdGlvbi5nZXRTbmFwc2hvdCgpLFxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBlbnRyeUhhc0Rlc2NyaXB0aW9uQW5kQ29udGV4dCA9IChlbnRyeSwgZGVzY3JpcHRpb24sIGNvbnRleHQpID0+XG4gIGVudHJ5Py5kZXNjcmlwdGlvbiA9PT0gZGVzY3JpcHRpb24/LnRvU3RyaW5nKCkgJiYgZW50cnk/LmNvbnRleHQgPT09IEpTT04uc3RyaW5naWZ5KGNvbnRleHQpXG4iLCAiY29uc3QgQkxPQ0tfQVRUUklCVVRFX05BTUUgPSBcImF0dGFjaG1lbnRHYWxsZXJ5XCJcbmNvbnN0IFRFWFRfQVRUUklCVVRFX05BTUUgPSBcInByZXNlbnRhdGlvblwiXG5jb25zdCBURVhUX0FUVFJJQlVURV9WQUxVRSA9IFwiZ2FsbGVyeVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbHRlciB7XG4gIGNvbnN0cnVjdG9yKHNuYXBzaG90KSB7XG4gICAgdGhpcy5kb2N1bWVudCA9IHNuYXBzaG90LmRvY3VtZW50XG4gICAgdGhpcy5zZWxlY3RlZFJhbmdlID0gc25hcHNob3Quc2VsZWN0ZWRSYW5nZVxuICB9XG5cbiAgcGVyZm9ybSgpIHtcbiAgICB0aGlzLnJlbW92ZUJsb2NrQXR0cmlidXRlKClcbiAgICByZXR1cm4gdGhpcy5hcHBseUJsb2NrQXR0cmlidXRlKClcbiAgfVxuXG4gIGdldFNuYXBzaG90KCkge1xuICAgIHJldHVybiB7IGRvY3VtZW50OiB0aGlzLmRvY3VtZW50LCBzZWxlY3RlZFJhbmdlOiB0aGlzLnNlbGVjdGVkUmFuZ2UgfVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIHJlbW92ZUJsb2NrQXR0cmlidXRlKCkge1xuICAgIHJldHVybiB0aGlzLmZpbmRSYW5nZXNPZkJsb2NrcygpLm1hcCgocmFuZ2UpID0+IHRoaXMuZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50LnJlbW92ZUF0dHJpYnV0ZUF0UmFuZ2UoQkxPQ0tfQVRUUklCVVRFX05BTUUsIHJhbmdlKSlcbiAgfVxuXG4gIGFwcGx5QmxvY2tBdHRyaWJ1dGUoKSB7XG4gICAgbGV0IG9mZnNldCA9IDBcblxuICAgIHRoaXMuZmluZFJhbmdlc09mUGllY2VzKCkuZm9yRWFjaCgocmFuZ2UpID0+IHtcbiAgICAgIGlmIChyYW5nZVsxXSAtIHJhbmdlWzBdID4gMSkge1xuICAgICAgICByYW5nZVswXSArPSBvZmZzZXRcbiAgICAgICAgcmFuZ2VbMV0gKz0gb2Zmc2V0XG5cbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnQuZ2V0Q2hhcmFjdGVyQXRQb3NpdGlvbihyYW5nZVsxXSkgIT09IFwiXFxuXCIpIHtcbiAgICAgICAgICB0aGlzLmRvY3VtZW50ID0gdGhpcy5kb2N1bWVudC5pbnNlcnRCbG9ja0JyZWFrQXRSYW5nZShyYW5nZVsxXSlcbiAgICAgICAgICBpZiAocmFuZ2VbMV0gPCB0aGlzLnNlbGVjdGVkUmFuZ2VbMV0pIHtcbiAgICAgICAgICAgIHRoaXMubW92ZVNlbGVjdGVkUmFuZ2VGb3J3YXJkKClcbiAgICAgICAgICB9XG4gICAgICAgICAgcmFuZ2VbMV0rK1xuICAgICAgICAgIG9mZnNldCsrXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmFuZ2VbMF0gIT09IDApIHtcbiAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudC5nZXRDaGFyYWN0ZXJBdFBvc2l0aW9uKHJhbmdlWzBdIC0gMSkgIT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50Lmluc2VydEJsb2NrQnJlYWtBdFJhbmdlKHJhbmdlWzBdKVxuICAgICAgICAgICAgaWYgKHJhbmdlWzBdIDwgdGhpcy5zZWxlY3RlZFJhbmdlWzBdKSB7XG4gICAgICAgICAgICAgIHRoaXMubW92ZVNlbGVjdGVkUmFuZ2VGb3J3YXJkKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJhbmdlWzBdKytcbiAgICAgICAgICAgIG9mZnNldCsrXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kb2N1bWVudCA9IHRoaXMuZG9jdW1lbnQuYXBwbHlCbG9ja0F0dHJpYnV0ZUF0UmFuZ2UoQkxPQ0tfQVRUUklCVVRFX05BTUUsIHRydWUsIHJhbmdlKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmaW5kUmFuZ2VzT2ZCbG9ja3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQuZmluZFJhbmdlc0ZvckJsb2NrQXR0cmlidXRlKEJMT0NLX0FUVFJJQlVURV9OQU1FKVxuICB9XG5cbiAgZmluZFJhbmdlc09mUGllY2VzKCkge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmZpbmRSYW5nZXNGb3JUZXh0QXR0cmlidXRlKFRFWFRfQVRUUklCVVRFX05BTUUsIHsgd2l0aFZhbHVlOiBURVhUX0FUVFJJQlVURV9WQUxVRSB9KVxuICB9XG5cbiAgbW92ZVNlbGVjdGVkUmFuZ2VGb3J3YXJkKCkge1xuICAgIHRoaXMuc2VsZWN0ZWRSYW5nZVswXSArPSAxXG4gICAgdGhpcy5zZWxlY3RlZFJhbmdlWzFdICs9IDFcbiAgfVxufVxuIiwgImltcG9ydCBGaWx0ZXIgZnJvbSBcIi4vZmlsdGVyXCJcblxuZXhwb3J0IGNvbnN0IGF0dGFjaG1lbnRHYWxsZXJ5RmlsdGVyID0gZnVuY3Rpb24oc25hcHNob3QpIHtcbiAgY29uc3QgZmlsdGVyID0gbmV3IEZpbHRlcihzbmFwc2hvdClcbiAgZmlsdGVyLnBlcmZvcm0oKVxuICByZXR1cm4gZmlsdGVyLmdldFNuYXBzaG90KClcbn1cblxuIiwgImltcG9ydCBEb2N1bWVudCBmcm9tIFwidHJpeC9tb2RlbHMvZG9jdW1lbnRcIlxuaW1wb3J0IEhUTUxQYXJzZXIgZnJvbSBcInRyaXgvbW9kZWxzL2h0bWxfcGFyc2VyXCJcblxuaW1wb3J0IFVuZG9NYW5hZ2VyIGZyb20gXCJ0cml4L21vZGVscy91bmRvX21hbmFnZXJcIlxuaW1wb3J0IHsgYXR0YWNobWVudEdhbGxlcnlGaWx0ZXIgfSBmcm9tIFwidHJpeC9maWx0ZXJzL2F0dGFjaG1lbnRfZ2FsbGVyeV9maWx0ZXJcIlxuY29uc3QgREVGQVVMVF9GSUxURVJTID0gWyBhdHRhY2htZW50R2FsbGVyeUZpbHRlciBdXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRvciB7XG4gIGNvbnN0cnVjdG9yKGNvbXBvc2l0aW9uLCBzZWxlY3Rpb25NYW5hZ2VyLCBlbGVtZW50KSB7XG4gICAgdGhpcy5pbnNlcnRGaWxlcyA9IHRoaXMuaW5zZXJ0RmlsZXMuYmluZCh0aGlzKVxuICAgIHRoaXMuY29tcG9zaXRpb24gPSBjb21wb3NpdGlvblxuICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlciA9IHNlbGVjdGlvbk1hbmFnZXJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy51bmRvTWFuYWdlciA9IG5ldyBVbmRvTWFuYWdlcih0aGlzLmNvbXBvc2l0aW9uKVxuICAgIHRoaXMuZmlsdGVycyA9IERFRkFVTFRfRklMVEVSUy5zbGljZSgwKVxuICB9XG5cbiAgbG9hZERvY3VtZW50KGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMubG9hZFNuYXBzaG90KHsgZG9jdW1lbnQsIHNlbGVjdGVkUmFuZ2U6IFsgMCwgMCBdIH0pXG4gIH1cblxuICBsb2FkSFRNTChodG1sID0gXCJcIikge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gSFRNTFBhcnNlci5wYXJzZShodG1sLCB7IHJlZmVyZW5jZUVsZW1lbnQ6IHRoaXMuZWxlbWVudCB9KS5nZXREb2N1bWVudCgpXG4gICAgcmV0dXJuIHRoaXMubG9hZERvY3VtZW50KGRvY3VtZW50KVxuICB9XG5cbiAgbG9hZEpTT04oeyBkb2N1bWVudCwgc2VsZWN0ZWRSYW5nZSB9KSB7XG4gICAgZG9jdW1lbnQgPSBEb2N1bWVudC5mcm9tSlNPTihkb2N1bWVudClcbiAgICByZXR1cm4gdGhpcy5sb2FkU25hcHNob3QoeyBkb2N1bWVudCwgc2VsZWN0ZWRSYW5nZSB9KVxuICB9XG5cbiAgbG9hZFNuYXBzaG90KHNuYXBzaG90KSB7XG4gICAgdGhpcy51bmRvTWFuYWdlciA9IG5ldyBVbmRvTWFuYWdlcih0aGlzLmNvbXBvc2l0aW9uKVxuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmxvYWRTbmFwc2hvdChzbmFwc2hvdClcbiAgfVxuXG4gIGdldERvY3VtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmRvY3VtZW50XG4gIH1cblxuICBnZXRTZWxlY3RlZERvY3VtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmdldFNlbGVjdGVkRG9jdW1lbnQoKVxuICB9XG5cbiAgZ2V0U25hcHNob3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24uZ2V0U25hcHNob3QoKVxuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLmdldFNuYXBzaG90KClcbiAgfVxuXG4gIC8vIERvY3VtZW50IG1hbmlwdWxhdGlvblxuXG4gIGRlbGV0ZUluRGlyZWN0aW9uKGRpcmVjdGlvbikge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmRlbGV0ZUluRGlyZWN0aW9uKGRpcmVjdGlvbilcbiAgfVxuXG4gIGluc2VydEF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmluc2VydEF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgfVxuXG4gIGluc2VydEF0dGFjaG1lbnRzKGF0dGFjaG1lbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24uaW5zZXJ0QXR0YWNobWVudHMoYXR0YWNobWVudHMpXG4gIH1cblxuICBpbnNlcnREb2N1bWVudChkb2N1bWVudCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmluc2VydERvY3VtZW50KGRvY3VtZW50KVxuICB9XG5cbiAgaW5zZXJ0RmlsZShmaWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24uaW5zZXJ0RmlsZShmaWxlKVxuICB9XG5cbiAgaW5zZXJ0RmlsZXMoZmlsZXMpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5pbnNlcnRGaWxlcyhmaWxlcylcbiAgfVxuXG4gIGluc2VydEhUTUwoaHRtbCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmluc2VydEhUTUwoaHRtbClcbiAgfVxuXG4gIGluc2VydFN0cmluZyhzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5pbnNlcnRTdHJpbmcoc3RyaW5nKVxuICB9XG5cbiAgaW5zZXJ0VGV4dCh0ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24uaW5zZXJ0VGV4dCh0ZXh0KVxuICB9XG5cbiAgaW5zZXJ0TGluZUJyZWFrKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmluc2VydExpbmVCcmVhaygpXG4gIH1cblxuICAvLyBTZWxlY3Rpb25cblxuICBnZXRTZWxlY3RlZFJhbmdlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmdldFNlbGVjdGVkUmFuZ2UoKVxuICB9XG5cbiAgZ2V0UG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24uZ2V0UG9zaXRpb24oKVxuICB9XG5cbiAgZ2V0Q2xpZW50UmVjdEF0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICBjb25zdCBsb2NhdGlvblJhbmdlID0gdGhpcy5nZXREb2N1bWVudCgpLmxvY2F0aW9uUmFuZ2VGcm9tUmFuZ2UoWyBwb3NpdGlvbiwgcG9zaXRpb24gKyAxIF0pXG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5nZXRDbGllbnRSZWN0QXRMb2NhdGlvblJhbmdlKGxvY2F0aW9uUmFuZ2UpXG4gIH1cblxuICBleHBhbmRTZWxlY3Rpb25JbkRpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5leHBhbmRTZWxlY3Rpb25JbkRpcmVjdGlvbihkaXJlY3Rpb24pXG4gIH1cblxuICBtb3ZlQ3Vyc29ySW5EaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24ubW92ZUN1cnNvckluRGlyZWN0aW9uKGRpcmVjdGlvbilcbiAgfVxuXG4gIHNldFNlbGVjdGVkUmFuZ2Uoc2VsZWN0ZWRSYW5nZSkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLnNldFNlbGVjdGVkUmFuZ2Uoc2VsZWN0ZWRSYW5nZSlcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcblxuICBhY3RpdmF0ZUF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9IHRydWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5zZXRDdXJyZW50QXR0cmlidXRlKG5hbWUsIHZhbHVlKVxuICB9XG5cbiAgYXR0cmlidXRlSXNBY3RpdmUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmhhc0N1cnJlbnRBdHRyaWJ1dGUobmFtZSlcbiAgfVxuXG4gIGNhbkFjdGl2YXRlQXR0cmlidXRlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5jYW5TZXRDdXJyZW50QXR0cmlidXRlKG5hbWUpXG4gIH1cblxuICBkZWFjdGl2YXRlQXR0cmlidXRlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5yZW1vdmVDdXJyZW50QXR0cmlidXRlKG5hbWUpXG4gIH1cblxuICAvLyBIVE1MIGF0dHJpYnV0ZXNcbiAgc2V0SFRNTEF0cmlidXRlQXRQb3NpdGlvbihwb3NpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLmNvbXBvc2l0aW9uLnNldEhUTUxBdHJpYnV0ZUF0UG9zaXRpb24ocG9zaXRpb24sIG5hbWUsIHZhbHVlKVxuICB9XG5cbiAgLy8gTmVzdGluZyBsZXZlbFxuXG4gIGNhbkRlY3JlYXNlTmVzdGluZ0xldmVsKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmNhbkRlY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgfVxuXG4gIGNhbkluY3JlYXNlTmVzdGluZ0xldmVsKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmNhbkluY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgfVxuXG4gIGRlY3JlYXNlTmVzdGluZ0xldmVsKCkge1xuICAgIGlmICh0aGlzLmNhbkRlY3JlYXNlTmVzdGluZ0xldmVsKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLmRlY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgICB9XG4gIH1cblxuICBpbmNyZWFzZU5lc3RpbmdMZXZlbCgpIHtcbiAgICBpZiAodGhpcy5jYW5JbmNyZWFzZU5lc3RpbmdMZXZlbCgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5pbmNyZWFzZU5lc3RpbmdMZXZlbCgpXG4gICAgfVxuICB9XG5cbiAgLy8gVW5kby9yZWRvXG5cbiAgY2FuUmVkbygpIHtcbiAgICByZXR1cm4gdGhpcy51bmRvTWFuYWdlci5jYW5SZWRvKClcbiAgfVxuXG4gIGNhblVuZG8oKSB7XG4gICAgcmV0dXJuIHRoaXMudW5kb01hbmFnZXIuY2FuVW5kbygpXG4gIH1cblxuICByZWNvcmRVbmRvRW50cnkoZGVzY3JpcHRpb24sIHsgY29udGV4dCwgY29uc29saWRhdGFibGUgfSA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMudW5kb01hbmFnZXIucmVjb3JkVW5kb0VudHJ5KGRlc2NyaXB0aW9uLCB7IGNvbnRleHQsIGNvbnNvbGlkYXRhYmxlIH0pXG4gIH1cblxuICByZWRvKCkge1xuICAgIGlmICh0aGlzLmNhblJlZG8oKSkge1xuICAgICAgcmV0dXJuIHRoaXMudW5kb01hbmFnZXIucmVkbygpXG4gICAgfVxuICB9XG5cbiAgdW5kbygpIHtcbiAgICBpZiAodGhpcy5jYW5VbmRvKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnVuZG9NYW5hZ2VyLnVuZG8oKVxuICAgIH1cbiAgfVxufVxuIiwgIi8qIGVzbGludC1kaXNhYmxlXG4gICAgbm8tdmFyLFxuICAgIHByZWZlci1jb25zdCxcbiovXG5pbXBvcnQge1xuICBlbGVtZW50Q29udGFpbnNOb2RlLFxuICBmaW5kQ2hpbGRJbmRleE9mTm9kZSxcbiAgbm9kZUlzQXR0YWNobWVudEVsZW1lbnQsXG4gIG5vZGVJc0Jsb2NrQ29udGFpbmVyLFxuICBub2RlSXNCbG9ja1N0YXJ0LFxuICBub2RlSXNCbG9ja1N0YXJ0Q29tbWVudCxcbiAgbm9kZUlzQ3Vyc29yVGFyZ2V0LFxuICBub2RlSXNFbXB0eVRleHROb2RlLFxuICBub2RlSXNUZXh0Tm9kZSxcbiAgdGFnTmFtZSxcbiAgd2Fsa1RyZWUsXG59IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvY2F0aW9uTWFwcGVyIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgfVxuXG4gIGZpbmRMb2NhdGlvbkZyb21Db250YWluZXJBbmRPZmZzZXQoY29udGFpbmVyLCBvZmZzZXQsIHsgc3RyaWN0IH0gPSB7IHN0cmljdDogdHJ1ZSB9KSB7XG4gICAgbGV0IGNoaWxkSW5kZXggPSAwXG4gICAgbGV0IGZvdW5kQmxvY2sgPSBmYWxzZVxuICAgIGNvbnN0IGxvY2F0aW9uID0geyBpbmRleDogMCwgb2Zmc2V0OiAwIH1cbiAgICBjb25zdCBhdHRhY2htZW50RWxlbWVudCA9IHRoaXMuZmluZEF0dGFjaG1lbnRFbGVtZW50UGFyZW50Rm9yTm9kZShjb250YWluZXIpXG5cbiAgICBpZiAoYXR0YWNobWVudEVsZW1lbnQpIHtcbiAgICAgIGNvbnRhaW5lciA9IGF0dGFjaG1lbnRFbGVtZW50LnBhcmVudE5vZGVcbiAgICAgIG9mZnNldCA9IGZpbmRDaGlsZEluZGV4T2ZOb2RlKGF0dGFjaG1lbnRFbGVtZW50KVxuICAgIH1cblxuICAgIGNvbnN0IHdhbGtlciA9IHdhbGtUcmVlKHRoaXMuZWxlbWVudCwgeyB1c2luZ0ZpbHRlcjogcmVqZWN0QXR0YWNobWVudENvbnRlbnRzIH0pXG5cbiAgICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB3YWxrZXIuY3VycmVudE5vZGVcblxuICAgICAgaWYgKG5vZGUgPT09IGNvbnRhaW5lciAmJiBub2RlSXNUZXh0Tm9kZShjb250YWluZXIpKSB7XG4gICAgICAgIGlmICghbm9kZUlzQ3Vyc29yVGFyZ2V0KG5vZGUpKSB7XG4gICAgICAgICAgbG9jYXRpb24ub2Zmc2V0ICs9IG9mZnNldFxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlID09PSBjb250YWluZXIpIHtcbiAgICAgICAgICBpZiAoY2hpbGRJbmRleCsrID09PSBvZmZzZXQpIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFlbGVtZW50Q29udGFpbnNOb2RlKGNvbnRhaW5lciwgbm9kZSkpIHtcbiAgICAgICAgICBpZiAoY2hpbGRJbmRleCA+IDApIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vZGVJc0Jsb2NrU3RhcnQobm9kZSwgeyBzdHJpY3QgfSkpIHtcbiAgICAgICAgICBpZiAoZm91bmRCbG9jaykge1xuICAgICAgICAgICAgbG9jYXRpb24uaW5kZXgrK1xuICAgICAgICAgIH1cbiAgICAgICAgICBsb2NhdGlvbi5vZmZzZXQgPSAwXG4gICAgICAgICAgZm91bmRCbG9jayA9IHRydWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2NhdGlvbi5vZmZzZXQgKz0gbm9kZUxlbmd0aChub2RlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvY2F0aW9uXG4gIH1cblxuICBmaW5kQ29udGFpbmVyQW5kT2Zmc2V0RnJvbUxvY2F0aW9uKGxvY2F0aW9uKSB7XG4gICAgbGV0IGNvbnRhaW5lciwgb2Zmc2V0XG4gICAgaWYgKGxvY2F0aW9uLmluZGV4ID09PSAwICYmIGxvY2F0aW9uLm9mZnNldCA9PT0gMCkge1xuICAgICAgY29udGFpbmVyID0gdGhpcy5lbGVtZW50XG4gICAgICBvZmZzZXQgPSAwXG5cbiAgICAgIHdoaWxlIChjb250YWluZXIuZmlyc3RDaGlsZCkge1xuICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIuZmlyc3RDaGlsZFxuICAgICAgICBpZiAobm9kZUlzQmxvY2tDb250YWluZXIoY29udGFpbmVyKSkge1xuICAgICAgICAgIG9mZnNldCA9IDFcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbIGNvbnRhaW5lciwgb2Zmc2V0IF1cbiAgICB9XG5cbiAgICBsZXQgWyBub2RlLCBub2RlT2Zmc2V0IF0gPSB0aGlzLmZpbmROb2RlQW5kT2Zmc2V0RnJvbUxvY2F0aW9uKGxvY2F0aW9uKVxuICAgIGlmICghbm9kZSkgcmV0dXJuXG5cbiAgICBpZiAobm9kZUlzVGV4dE5vZGUobm9kZSkpIHtcbiAgICAgIGlmIChub2RlTGVuZ3RoKG5vZGUpID09PSAwKSB7XG4gICAgICAgIGNvbnRhaW5lciA9IG5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlXG4gICAgICAgIG9mZnNldCA9IGZpbmRDaGlsZEluZGV4T2ZOb2RlKG5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgaWYgKG5vZGVJc0N1cnNvclRhcmdldChub2RlLCB7IG5hbWU6IFwicmlnaHRcIiB9KSkge1xuICAgICAgICAgIG9mZnNldCsrXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRhaW5lciA9IG5vZGVcbiAgICAgICAgb2Zmc2V0ID0gbG9jYXRpb24ub2Zmc2V0IC0gbm9kZU9mZnNldFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWluZXIgPSBub2RlLnBhcmVudE5vZGVcblxuICAgICAgaWYgKCFub2RlSXNCbG9ja1N0YXJ0KG5vZGUucHJldmlvdXNTaWJsaW5nKSkge1xuICAgICAgICBpZiAoIW5vZGVJc0Jsb2NrQ29udGFpbmVyKGNvbnRhaW5lcikpIHtcbiAgICAgICAgICB3aGlsZSAobm9kZSA9PT0gY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgICAgICAgICAgbm9kZSA9IGNvbnRhaW5lclxuICAgICAgICAgICAgY29udGFpbmVyID0gY29udGFpbmVyLnBhcmVudE5vZGVcbiAgICAgICAgICAgIGlmIChub2RlSXNCbG9ja0NvbnRhaW5lcihjb250YWluZXIpKSB7XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9mZnNldCA9IGZpbmRDaGlsZEluZGV4T2ZOb2RlKG5vZGUpXG4gICAgICBpZiAobG9jYXRpb24ub2Zmc2V0ICE9PSAwKSB7XG4gICAgICAgIG9mZnNldCsrXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFsgY29udGFpbmVyLCBvZmZzZXQgXVxuICB9XG5cbiAgZmluZE5vZGVBbmRPZmZzZXRGcm9tTG9jYXRpb24obG9jYXRpb24pIHtcbiAgICBsZXQgbm9kZSwgbm9kZU9mZnNldFxuICAgIGxldCBvZmZzZXQgPSAwXG5cbiAgICBmb3IgKGNvbnN0IGN1cnJlbnROb2RlIG9mIHRoaXMuZ2V0U2lnbmlmaWNhbnROb2Rlc0ZvckluZGV4KGxvY2F0aW9uLmluZGV4KSkge1xuICAgICAgY29uc3QgbGVuZ3RoID0gbm9kZUxlbmd0aChjdXJyZW50Tm9kZSlcblxuICAgICAgaWYgKGxvY2F0aW9uLm9mZnNldCA8PSBvZmZzZXQgKyBsZW5ndGgpIHtcbiAgICAgICAgaWYgKG5vZGVJc1RleHROb2RlKGN1cnJlbnROb2RlKSkge1xuICAgICAgICAgIG5vZGUgPSBjdXJyZW50Tm9kZVxuICAgICAgICAgIG5vZGVPZmZzZXQgPSBvZmZzZXRcbiAgICAgICAgICBpZiAobG9jYXRpb24ub2Zmc2V0ID09PSBub2RlT2Zmc2V0ICYmIG5vZGVJc0N1cnNvclRhcmdldChub2RlKSkge1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIW5vZGUpIHtcbiAgICAgICAgICBub2RlID0gY3VycmVudE5vZGVcbiAgICAgICAgICBub2RlT2Zmc2V0ID0gb2Zmc2V0XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgb2Zmc2V0ICs9IGxlbmd0aFxuICAgICAgaWYgKG9mZnNldCA+IGxvY2F0aW9uLm9mZnNldCkge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbIG5vZGUsIG5vZGVPZmZzZXQgXVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIGZpbmRBdHRhY2htZW50RWxlbWVudFBhcmVudEZvck5vZGUobm9kZSkge1xuICAgIHdoaWxlIChub2RlICYmIG5vZGUgIT09IHRoaXMuZWxlbWVudCkge1xuICAgICAgaWYgKG5vZGVJc0F0dGFjaG1lbnRFbGVtZW50KG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBub2RlXG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlXG4gICAgfVxuICB9XG5cbiAgZ2V0U2lnbmlmaWNhbnROb2Rlc0ZvckluZGV4KGluZGV4KSB7XG4gICAgY29uc3Qgbm9kZXMgPSBbXVxuICAgIGNvbnN0IHdhbGtlciA9IHdhbGtUcmVlKHRoaXMuZWxlbWVudCwgeyB1c2luZ0ZpbHRlcjogYWNjZXB0U2lnbmlmaWNhbnROb2RlcyB9KVxuICAgIGxldCByZWNvcmRpbmdOb2RlcyA9IGZhbHNlXG5cbiAgICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB3YWxrZXIuY3VycmVudE5vZGVcbiAgICAgIGlmIChub2RlSXNCbG9ja1N0YXJ0Q29tbWVudChub2RlKSkge1xuICAgICAgICB2YXIgYmxvY2tJbmRleFxuICAgICAgICBpZiAoYmxvY2tJbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgYmxvY2tJbmRleCsrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmxvY2tJbmRleCA9IDBcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChibG9ja0luZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgIHJlY29yZGluZ05vZGVzID0gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZGluZ05vZGVzKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWNvcmRpbmdOb2Rlcykge1xuICAgICAgICBub2Rlcy5wdXNoKG5vZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuY29uc3Qgbm9kZUxlbmd0aCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgaWYgKG5vZGVJc0N1cnNvclRhcmdldChub2RlKSkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3RyaW5nID0gbm9kZS50ZXh0Q29udGVudFxuICAgICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgICB9XG4gIH0gZWxzZSBpZiAodGFnTmFtZShub2RlKSA9PT0gXCJiclwiIHx8IG5vZGVJc0F0dGFjaG1lbnRFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIDFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMFxuICB9XG59XG5cbmNvbnN0IGFjY2VwdFNpZ25pZmljYW50Tm9kZXMgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmIChyZWplY3RFbXB0eVRleHROb2Rlcyhub2RlKSA9PT0gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUKSB7XG4gICAgcmV0dXJuIHJlamVjdEF0dGFjaG1lbnRDb250ZW50cyhub2RlKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9SRUpFQ1RcbiAgfVxufVxuXG5jb25zdCByZWplY3RFbXB0eVRleHROb2RlcyA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKG5vZGVJc0VtcHR5VGV4dE5vZGUobm9kZSkpIHtcbiAgICByZXR1cm4gTm9kZUZpbHRlci5GSUxURVJfUkVKRUNUXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVFxuICB9XG59XG5cbmNvbnN0IHJlamVjdEF0dGFjaG1lbnRDb250ZW50cyA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKG5vZGVJc0F0dGFjaG1lbnRFbGVtZW50KG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICByZXR1cm4gTm9kZUZpbHRlci5GSUxURVJfUkVKRUNUXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVFxuICB9XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiAgICBpZC1sZW5ndGgsXG4gICAgbm8tZW1wdHksXG4qL1xuaW1wb3J0IHsgZ2V0RE9NUmFuZ2UsIHNldERPTVJhbmdlIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9pbnRNYXBwZXIge1xuICBjcmVhdGVET01SYW5nZUZyb21Qb2ludCh7IHgsIHkgfSkge1xuICAgIGxldCBkb21SYW5nZVxuICAgIGlmIChkb2N1bWVudC5jYXJldFBvc2l0aW9uRnJvbVBvaW50KSB7XG4gICAgICBjb25zdCB7IG9mZnNldE5vZGUsIG9mZnNldCB9ID0gZG9jdW1lbnQuY2FyZXRQb3NpdGlvbkZyb21Qb2ludCh4LCB5KVxuICAgICAgZG9tUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpXG4gICAgICBkb21SYW5nZS5zZXRTdGFydChvZmZzZXROb2RlLCBvZmZzZXQpXG4gICAgICByZXR1cm4gZG9tUmFuZ2VcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmNhcmV0UmFuZ2VGcm9tUG9pbnQpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jYXJldFJhbmdlRnJvbVBvaW50KHgsIHkpXG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5ib2R5LmNyZWF0ZVRleHRSYW5nZSkge1xuICAgICAgY29uc3Qgb3JpZ2luYWxET01SYW5nZSA9IGdldERPTVJhbmdlKClcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIElFIDExIHRocm93cyBcIlVuc3BlY2lmaWVkIGVycm9yXCIgd2hlbiB1c2luZyBtb3ZlVG9Qb2ludFxuICAgICAgICAvLyBkdXJpbmcgYSBkcmFnLWFuZC1kcm9wIG9wZXJhdGlvbi5cbiAgICAgICAgY29uc3QgdGV4dFJhbmdlID0gZG9jdW1lbnQuYm9keS5jcmVhdGVUZXh0UmFuZ2UoKVxuICAgICAgICB0ZXh0UmFuZ2UubW92ZVRvUG9pbnQoeCwgeSlcbiAgICAgICAgdGV4dFJhbmdlLnNlbGVjdCgpXG4gICAgICB9IGNhdGNoIChlcnJvcikge31cbiAgICAgIGRvbVJhbmdlID0gZ2V0RE9NUmFuZ2UoKVxuICAgICAgc2V0RE9NUmFuZ2Uob3JpZ2luYWxET01SYW5nZSlcbiAgICAgIHJldHVybiBkb21SYW5nZVxuICAgIH1cbiAgfVxuXG4gIGdldENsaWVudFJlY3RzRm9yRE9NUmFuZ2UoZG9tUmFuZ2UpIHtcbiAgICBjb25zdCBhcnJheSA9IEFycmF5LmZyb20oZG9tUmFuZ2UuZ2V0Q2xpZW50UmVjdHMoKSlcbiAgICBjb25zdCBzdGFydCA9IGFycmF5WzBdXG4gICAgY29uc3QgZW5kID0gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV1cblxuICAgIHJldHVybiBbIHN0YXJ0LCBlbmQgXVxuICB9XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiovXG5pbXBvcnQgQmFzaWNPYmplY3QgZnJvbSBcInRyaXgvY29yZS9iYXNpY19vYmplY3RcIlxuXG5pbXBvcnQgTG9jYXRpb25NYXBwZXIgZnJvbSBcInRyaXgvbW9kZWxzL2xvY2F0aW9uX21hcHBlclwiXG5pbXBvcnQgUG9pbnRNYXBwZXIgZnJvbSBcInRyaXgvbW9kZWxzL3BvaW50X21hcHBlclwiXG5cbmltcG9ydCB7XG4gIGVsZW1lbnRDb250YWluc05vZGUsXG4gIGdldERPTVJhbmdlLFxuICBnZXRET01TZWxlY3Rpb24sXG4gIGhhbmRsZUV2ZW50LFxuICBpbm5lckVsZW1lbnRJc0FjdGl2ZSxcbiAgbm9kZUlzQ3Vyc29yVGFyZ2V0LFxuICBub3JtYWxpemVSYW5nZSxcbiAgcmFuZ2VJc0NvbGxhcHNlZCxcbiAgcmFuZ2VzQXJlRXF1YWwsXG4gIHNldERPTVJhbmdlLFxufSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWxlY3Rpb25NYW5hZ2VyIGV4dGVuZHMgQmFzaWNPYmplY3Qge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMuZGlkTW91c2VEb3duID0gdGhpcy5kaWRNb3VzZURvd24uYmluZCh0aGlzKVxuICAgIHRoaXMuc2VsZWN0aW9uRGlkQ2hhbmdlID0gdGhpcy5zZWxlY3Rpb25EaWRDaGFuZ2UuYmluZCh0aGlzKVxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLmxvY2F0aW9uTWFwcGVyID0gbmV3IExvY2F0aW9uTWFwcGVyKHRoaXMuZWxlbWVudClcbiAgICB0aGlzLnBvaW50TWFwcGVyID0gbmV3IFBvaW50TWFwcGVyKClcbiAgICB0aGlzLmxvY2tDb3VudCA9IDBcbiAgICBoYW5kbGVFdmVudChcIm1vdXNlZG93blwiLCB7IG9uRWxlbWVudDogdGhpcy5lbGVtZW50LCB3aXRoQ2FsbGJhY2s6IHRoaXMuZGlkTW91c2VEb3duIH0pXG4gIH1cblxuICBnZXRMb2NhdGlvblJhbmdlKG9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChvcHRpb25zLnN0cmljdCA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUxvY2F0aW9uUmFuZ2VGcm9tRE9NUmFuZ2UoZ2V0RE9NUmFuZ2UoKSlcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaWdub3JlTG9jaykge1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudExvY2F0aW9uUmFuZ2VcbiAgICB9IGVsc2UgaWYgKHRoaXMubG9ja2VkTG9jYXRpb25SYW5nZSkge1xuICAgICAgcmV0dXJuIHRoaXMubG9ja2VkTG9jYXRpb25SYW5nZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50TG9jYXRpb25SYW5nZVxuICAgIH1cbiAgfVxuXG4gIHNldExvY2F0aW9uUmFuZ2UobG9jYXRpb25SYW5nZSkge1xuICAgIGlmICh0aGlzLmxvY2tlZExvY2F0aW9uUmFuZ2UpIHJldHVyblxuICAgIGxvY2F0aW9uUmFuZ2UgPSBub3JtYWxpemVSYW5nZShsb2NhdGlvblJhbmdlKVxuXG4gICAgY29uc3QgZG9tUmFuZ2UgPSB0aGlzLmNyZWF0ZURPTVJhbmdlRnJvbUxvY2F0aW9uUmFuZ2UobG9jYXRpb25SYW5nZSlcbiAgICBpZiAoZG9tUmFuZ2UpIHtcbiAgICAgIHNldERPTVJhbmdlKGRvbVJhbmdlKVxuICAgICAgdGhpcy51cGRhdGVDdXJyZW50TG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKVxuICAgIH1cbiAgfVxuXG4gIHNldExvY2F0aW9uUmFuZ2VGcm9tUG9pbnRSYW5nZShwb2ludFJhbmdlKSB7XG4gICAgcG9pbnRSYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKHBvaW50UmFuZ2UpXG4gICAgY29uc3Qgc3RhcnRMb2NhdGlvbiA9IHRoaXMuZ2V0TG9jYXRpb25BdFBvaW50KHBvaW50UmFuZ2VbMF0pXG4gICAgY29uc3QgZW5kTG9jYXRpb24gPSB0aGlzLmdldExvY2F0aW9uQXRQb2ludChwb2ludFJhbmdlWzFdKVxuICAgIHRoaXMuc2V0TG9jYXRpb25SYW5nZShbIHN0YXJ0TG9jYXRpb24sIGVuZExvY2F0aW9uIF0pXG4gIH1cblxuICBnZXRDbGllbnRSZWN0QXRMb2NhdGlvblJhbmdlKGxvY2F0aW9uUmFuZ2UpIHtcbiAgICBjb25zdCBkb21SYW5nZSA9IHRoaXMuY3JlYXRlRE9NUmFuZ2VGcm9tTG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKVxuICAgIGlmIChkb21SYW5nZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2xpZW50UmVjdHNGb3JET01SYW5nZShkb21SYW5nZSlbMV1cbiAgICB9XG4gIH1cblxuICBsb2NhdGlvbklzQ3Vyc29yVGFyZ2V0KGxvY2F0aW9uKSB7XG4gICAgY29uc3Qgbm9kZSA9IEFycmF5LmZyb20odGhpcy5maW5kTm9kZUFuZE9mZnNldEZyb21Mb2NhdGlvbihsb2NhdGlvbikpWzBdXG4gICAgcmV0dXJuIG5vZGVJc0N1cnNvclRhcmdldChub2RlKVxuICB9XG5cbiAgbG9jaygpIHtcbiAgICBpZiAodGhpcy5sb2NrQ291bnQrKyA9PT0gMCkge1xuICAgICAgdGhpcy51cGRhdGVDdXJyZW50TG9jYXRpb25SYW5nZSgpXG4gICAgICB0aGlzLmxvY2tlZExvY2F0aW9uUmFuZ2UgPSB0aGlzLmdldExvY2F0aW9uUmFuZ2UoKVxuICAgIH1cbiAgfVxuXG4gIHVubG9jaygpIHtcbiAgICBpZiAoLS10aGlzLmxvY2tDb3VudCA9PT0gMCkge1xuICAgICAgY29uc3QgeyBsb2NrZWRMb2NhdGlvblJhbmdlIH0gPSB0aGlzXG4gICAgICB0aGlzLmxvY2tlZExvY2F0aW9uUmFuZ2UgPSBudWxsXG4gICAgICBpZiAobG9ja2VkTG9jYXRpb25SYW5nZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExvY2F0aW9uUmFuZ2UobG9ja2VkTG9jYXRpb25SYW5nZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjbGVhclNlbGVjdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0RE9NU2VsZWN0aW9uKCk/LnJlbW92ZUFsbFJhbmdlcygpXG4gIH1cblxuICBzZWxlY3Rpb25Jc0NvbGxhcHNlZCgpIHtcbiAgICByZXR1cm4gZ2V0RE9NUmFuZ2UoKT8uY29sbGFwc2VkID09PSB0cnVlXG4gIH1cblxuICBzZWxlY3Rpb25Jc0V4cGFuZGVkKCkge1xuICAgIHJldHVybiAhdGhpcy5zZWxlY3Rpb25Jc0NvbGxhcHNlZCgpXG4gIH1cblxuICBjcmVhdGVMb2NhdGlvblJhbmdlRnJvbURPTVJhbmdlKGRvbVJhbmdlLCBvcHRpb25zKSB7XG4gICAgaWYgKGRvbVJhbmdlID09IG51bGwgfHwgIXRoaXMuZG9tUmFuZ2VXaXRoaW5FbGVtZW50KGRvbVJhbmdlKSkgcmV0dXJuXG5cbiAgICBjb25zdCBzdGFydCA9IHRoaXMuZmluZExvY2F0aW9uRnJvbUNvbnRhaW5lckFuZE9mZnNldChkb21SYW5nZS5zdGFydENvbnRhaW5lciwgZG9tUmFuZ2Uuc3RhcnRPZmZzZXQsIG9wdGlvbnMpXG4gICAgaWYgKCFzdGFydCkgcmV0dXJuXG5cbiAgICBjb25zdCBlbmQgPSBkb21SYW5nZS5jb2xsYXBzZWRcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IHRoaXMuZmluZExvY2F0aW9uRnJvbUNvbnRhaW5lckFuZE9mZnNldChkb21SYW5nZS5lbmRDb250YWluZXIsIGRvbVJhbmdlLmVuZE9mZnNldCwgb3B0aW9ucylcblxuICAgIHJldHVybiBub3JtYWxpemVSYW5nZShbIHN0YXJ0LCBlbmQgXSlcbiAgfVxuXG4gIGRpZE1vdXNlRG93bigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXVzZVRlbXBvcmFyaWx5KClcbiAgfVxuXG4gIHBhdXNlVGVtcG9yYXJpbHkoKSB7XG4gICAgbGV0IHJlc3VtZUhhbmRsZXJzXG4gICAgdGhpcy5wYXVzZWQgPSB0cnVlXG5cbiAgICBjb25zdCByZXN1bWUgPSAoKSA9PiB7XG4gICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlXG4gICAgICBjbGVhclRpbWVvdXQocmVzdW1lVGltZW91dClcblxuICAgICAgQXJyYXkuZnJvbShyZXN1bWVIYW5kbGVycykuZm9yRWFjaCgoaGFuZGxlcikgPT4ge1xuICAgICAgICBoYW5kbGVyLmRlc3Ryb3koKVxuICAgICAgfSlcblxuICAgICAgaWYgKGVsZW1lbnRDb250YWluc05vZGUoZG9jdW1lbnQsIHRoaXMuZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uRGlkQ2hhbmdlKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXN1bWVUaW1lb3V0ID0gc2V0VGltZW91dChyZXN1bWUsIDIwMClcblxuICAgIHJlc3VtZUhhbmRsZXJzID0gWyBcIm1vdXNlbW92ZVwiLCBcImtleWRvd25cIiBdLm1hcCgoZXZlbnROYW1lKSA9PlxuICAgICAgaGFuZGxlRXZlbnQoZXZlbnROYW1lLCB7IG9uRWxlbWVudDogZG9jdW1lbnQsIHdpdGhDYWxsYmFjazogcmVzdW1lIH0pXG4gICAgKVxuICB9XG5cbiAgc2VsZWN0aW9uRGlkQ2hhbmdlKCkge1xuICAgIGlmICghdGhpcy5wYXVzZWQgJiYgIWlubmVyRWxlbWVudElzQWN0aXZlKHRoaXMuZWxlbWVudCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUN1cnJlbnRMb2NhdGlvblJhbmdlKClcbiAgICB9XG4gIH1cblxuICB1cGRhdGVDdXJyZW50TG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKSB7XG4gICAgaWYgKGxvY2F0aW9uUmFuZ2UgIT0gbnVsbCA/IGxvY2F0aW9uUmFuZ2UgOiBsb2NhdGlvblJhbmdlID0gdGhpcy5jcmVhdGVMb2NhdGlvblJhbmdlRnJvbURPTVJhbmdlKGdldERPTVJhbmdlKCkpKSB7XG4gICAgICBpZiAoIXJhbmdlc0FyZUVxdWFsKGxvY2F0aW9uUmFuZ2UsIHRoaXMuY3VycmVudExvY2F0aW9uUmFuZ2UpKSB7XG4gICAgICAgIHRoaXMuY3VycmVudExvY2F0aW9uUmFuZ2UgPSBsb2NhdGlvblJhbmdlXG4gICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5sb2NhdGlvblJhbmdlRGlkQ2hhbmdlPy4odGhpcy5jdXJyZW50TG9jYXRpb25SYW5nZS5zbGljZSgwKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjcmVhdGVET01SYW5nZUZyb21Mb2NhdGlvblJhbmdlKGxvY2F0aW9uUmFuZ2UpIHtcbiAgICBjb25zdCByYW5nZVN0YXJ0ID0gdGhpcy5maW5kQ29udGFpbmVyQW5kT2Zmc2V0RnJvbUxvY2F0aW9uKGxvY2F0aW9uUmFuZ2VbMF0pXG4gICAgY29uc3QgcmFuZ2VFbmQgPSByYW5nZUlzQ29sbGFwc2VkKGxvY2F0aW9uUmFuZ2UpXG4gICAgICA/IHJhbmdlU3RhcnRcbiAgICAgIDogdGhpcy5maW5kQ29udGFpbmVyQW5kT2Zmc2V0RnJvbUxvY2F0aW9uKGxvY2F0aW9uUmFuZ2VbMV0pIHx8IHJhbmdlU3RhcnRcblxuICAgIGlmIChyYW5nZVN0YXJ0ICE9IG51bGwgJiYgcmFuZ2VFbmQgIT0gbnVsbCkge1xuICAgICAgY29uc3QgZG9tUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpXG4gICAgICBkb21SYW5nZS5zZXRTdGFydCguLi5BcnJheS5mcm9tKHJhbmdlU3RhcnQgfHwgW10pKVxuICAgICAgZG9tUmFuZ2Uuc2V0RW5kKC4uLkFycmF5LmZyb20ocmFuZ2VFbmQgfHwgW10pKVxuICAgICAgcmV0dXJuIGRvbVJhbmdlXG4gICAgfVxuICB9XG5cbiAgZ2V0TG9jYXRpb25BdFBvaW50KHBvaW50KSB7XG4gICAgY29uc3QgZG9tUmFuZ2UgPSB0aGlzLmNyZWF0ZURPTVJhbmdlRnJvbVBvaW50KHBvaW50KVxuICAgIGlmIChkb21SYW5nZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTG9jYXRpb25SYW5nZUZyb21ET01SYW5nZShkb21SYW5nZSk/LlswXVxuICAgIH1cbiAgfVxuXG4gIGRvbVJhbmdlV2l0aGluRWxlbWVudChkb21SYW5nZSkge1xuICAgIGlmIChkb21SYW5nZS5jb2xsYXBzZWQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Q29udGFpbnNOb2RlKHRoaXMuZWxlbWVudCwgZG9tUmFuZ2Uuc3RhcnRDb250YWluZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGVsZW1lbnRDb250YWluc05vZGUodGhpcy5lbGVtZW50LCBkb21SYW5nZS5zdGFydENvbnRhaW5lcikgJiZcbiAgICAgICAgZWxlbWVudENvbnRhaW5zTm9kZSh0aGlzLmVsZW1lbnQsIGRvbVJhbmdlLmVuZENvbnRhaW5lcilcbiAgICAgIClcbiAgICB9XG4gIH1cbn1cblxuU2VsZWN0aW9uTWFuYWdlci5wcm94eU1ldGhvZChcImxvY2F0aW9uTWFwcGVyLmZpbmRMb2NhdGlvbkZyb21Db250YWluZXJBbmRPZmZzZXRcIilcblNlbGVjdGlvbk1hbmFnZXIucHJveHlNZXRob2QoXCJsb2NhdGlvbk1hcHBlci5maW5kQ29udGFpbmVyQW5kT2Zmc2V0RnJvbUxvY2F0aW9uXCIpXG5TZWxlY3Rpb25NYW5hZ2VyLnByb3h5TWV0aG9kKFwibG9jYXRpb25NYXBwZXIuZmluZE5vZGVBbmRPZmZzZXRGcm9tTG9jYXRpb25cIilcblNlbGVjdGlvbk1hbmFnZXIucHJveHlNZXRob2QoXCJwb2ludE1hcHBlci5jcmVhdGVET01SYW5nZUZyb21Qb2ludFwiKVxuU2VsZWN0aW9uTWFuYWdlci5wcm94eU1ldGhvZChcInBvaW50TWFwcGVyLmdldENsaWVudFJlY3RzRm9yRE9NUmFuZ2VcIilcblxuIiwgImltcG9ydCB7IHJlbW92ZU5vZGUgfSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5pbXBvcnQgKiBhcyBjb25maWcgZnJvbSBcInRyaXgvY29uZmlnXCJcbmltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5cbmltcG9ydCB7IGRlZmVyLCBoYW5kbGVFdmVudCwgbWFrZUVsZW1lbnQsIHRhZ05hbWUsIHRyaWdnZXJFdmVudCB9IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5jb25zdCB7IGxhbmcsIGNzcywga2V5TmFtZXMgfSA9IGNvbmZpZ1xuXG5jb25zdCB1bmRvYWJsZSA9IGZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBjb21tYW5kcyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICBjb21tYW5kcy5kbygpXG4gICAgaWYgKCF0aGlzLnVuZG9zKSB7XG4gICAgICB0aGlzLnVuZG9zID0gW11cbiAgICB9XG4gICAgdGhpcy51bmRvcy5wdXNoKGNvbW1hbmRzLnVuZG8pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXR0YWNobWVudEVkaXRvckNvbnRyb2xsZXIgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGNvbnN0cnVjdG9yKGF0dGFjaG1lbnRQaWVjZSwgZWxlbWVudCwgY29udGFpbmVyLCBvcHRpb25zID0ge30pIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5kaWRDbGlja1Rvb2xiYXIgPSB0aGlzLmRpZENsaWNrVG9vbGJhci5iaW5kKHRoaXMpXG4gICAgdGhpcy5kaWRDbGlja0FjdGlvbkJ1dHRvbiA9IHRoaXMuZGlkQ2xpY2tBY3Rpb25CdXR0b24uYmluZCh0aGlzKVxuICAgIHRoaXMuZGlkS2V5RG93bkNhcHRpb24gPSB0aGlzLmRpZEtleURvd25DYXB0aW9uLmJpbmQodGhpcylcbiAgICB0aGlzLmRpZElucHV0Q2FwdGlvbiA9IHRoaXMuZGlkSW5wdXRDYXB0aW9uLmJpbmQodGhpcylcbiAgICB0aGlzLmRpZENoYW5nZUNhcHRpb24gPSB0aGlzLmRpZENoYW5nZUNhcHRpb24uYmluZCh0aGlzKVxuICAgIHRoaXMuZGlkQmx1ckNhcHRpb24gPSB0aGlzLmRpZEJsdXJDYXB0aW9uLmJpbmQodGhpcylcbiAgICB0aGlzLmF0dGFjaG1lbnRQaWVjZSA9IGF0dGFjaG1lbnRQaWVjZVxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lclxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgICB0aGlzLmF0dGFjaG1lbnQgPSB0aGlzLmF0dGFjaG1lbnRQaWVjZS5hdHRhY2htZW50XG4gICAgaWYgKHRhZ05hbWUodGhpcy5lbGVtZW50KSA9PT0gXCJhXCIpIHtcbiAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuZWxlbWVudC5maXJzdENoaWxkXG4gICAgfVxuICAgIHRoaXMuaW5zdGFsbCgpXG4gIH1cblxuICBpbnN0YWxsKCkge1xuICAgIHRoaXMubWFrZUVsZW1lbnRNdXRhYmxlKClcbiAgICB0aGlzLmFkZFRvb2xiYXIoKVxuICAgIGlmICh0aGlzLmF0dGFjaG1lbnQuaXNQcmV2aWV3YWJsZSgpKSB7XG4gICAgICB0aGlzLmluc3RhbGxDYXB0aW9uRWRpdG9yKClcbiAgICB9XG4gIH1cblxuICB1bmluc3RhbGwoKSB7XG4gICAgbGV0IHVuZG8gPSB0aGlzLnVuZG9zLnBvcCgpXG4gICAgdGhpcy5zYXZlUGVuZGluZ0NhcHRpb24oKVxuICAgIHdoaWxlICh1bmRvKSB7XG4gICAgICB1bmRvKClcbiAgICAgIHVuZG8gPSB0aGlzLnVuZG9zLnBvcCgpXG4gICAgfVxuICAgIHRoaXMuZGVsZWdhdGU/LmRpZFVuaW5zdGFsbEF0dGFjaG1lbnRFZGl0b3IodGhpcylcbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBzYXZlUGVuZGluZ0NhcHRpb24oKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZ0NhcHRpb24gIT0gbnVsbCkge1xuICAgICAgY29uc3QgY2FwdGlvbiA9IHRoaXMucGVuZGluZ0NhcHRpb25cbiAgICAgIHRoaXMucGVuZGluZ0NhcHRpb24gPSBudWxsXG4gICAgICBpZiAoY2FwdGlvbikge1xuICAgICAgICB0aGlzLmRlbGVnYXRlPy5hdHRhY2htZW50RWRpdG9yRGlkUmVxdWVzdFVwZGF0aW5nQXR0cmlidXRlc0ZvckF0dGFjaG1lbnQ/Lih7IGNhcHRpb24gfSwgdGhpcy5hdHRhY2htZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uYXR0YWNobWVudEVkaXRvckRpZFJlcXVlc3RSZW1vdmluZ0F0dHJpYnV0ZUZvckF0dGFjaG1lbnQ/LihcImNhcHRpb25cIiwgdGhpcy5hdHRhY2htZW50KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEluc3RhbGxpbmcgYW5kIHVuaW5zdGFsbGluZ1xuXG4gIG1ha2VFbGVtZW50TXV0YWJsZSA9IHVuZG9hYmxlKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgZG86ICgpID0+IHtcbiAgICAgICAgdGhpcy5lbGVtZW50LmRhdGFzZXQudHJpeE11dGFibGUgPSB0cnVlXG4gICAgICB9LFxuICAgICAgdW5kbzogKCkgPT4gZGVsZXRlIHRoaXMuZWxlbWVudC5kYXRhc2V0LnRyaXhNdXRhYmxlLFxuICAgIH1cbiAgfSlcblxuICBhZGRUb29sYmFyID0gdW5kb2FibGUoKCkgPT4ge1xuICAgIC8vIDxkaXYgY2xhc3M9XCIje2Nzcy5hdHRhY2htZW50TWV0YWRhdGFDb250YWluZXJ9XCIgZGF0YS10cml4LW11dGFibGU9XCJ0cnVlXCI+XG4gICAgLy8gICA8ZGl2IGNsYXNzPVwidHJpeC1idXR0b24tcm93XCI+XG4gICAgLy8gICAgIDxzcGFuIGNsYXNzPVwidHJpeC1idXR0b24tZ3JvdXAgdHJpeC1idXR0b24tZ3JvdXAtLWFjdGlvbnNcIj5cbiAgICAvLyAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRyaXgtYnV0dG9uIHRyaXgtYnV0dG9uLS1yZW1vdmVcIiB0aXRsZT1cIiN7bGFuZy5yZW1vdmV9XCIgZGF0YS10cml4LWFjdGlvbj1cInJlbW92ZVwiPiN7bGFuZy5yZW1vdmV9PC9idXR0b24+XG4gICAgLy8gICAgIDwvc3Bhbj5cbiAgICAvLyAgIDwvZGl2PlxuICAgIC8vIDwvZGl2PlxuICAgIGNvbnN0IGVsZW1lbnQgPSBtYWtlRWxlbWVudCh7XG4gICAgICB0YWdOYW1lOiBcImRpdlwiLFxuICAgICAgY2xhc3NOYW1lOiBjc3MuYXR0YWNobWVudFRvb2xiYXIsXG4gICAgICBkYXRhOiB7IHRyaXhNdXRhYmxlOiB0cnVlIH0sXG4gICAgICBjaGlsZE5vZGVzOiBtYWtlRWxlbWVudCh7XG4gICAgICAgIHRhZ05hbWU6IFwiZGl2XCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJ0cml4LWJ1dHRvbi1yb3dcIixcbiAgICAgICAgY2hpbGROb2RlczogbWFrZUVsZW1lbnQoe1xuICAgICAgICAgIHRhZ05hbWU6IFwic3BhblwiLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJ0cml4LWJ1dHRvbi1ncm91cCB0cml4LWJ1dHRvbi1ncm91cC0tYWN0aW9uc1wiLFxuICAgICAgICAgIGNoaWxkTm9kZXM6IG1ha2VFbGVtZW50KHtcbiAgICAgICAgICAgIHRhZ05hbWU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidHJpeC1idXR0b24gdHJpeC1idXR0b24tLXJlbW92ZVwiLFxuICAgICAgICAgICAgdGV4dENvbnRlbnQ6IGxhbmcucmVtb3ZlLFxuICAgICAgICAgICAgYXR0cmlidXRlczogeyB0aXRsZTogbGFuZy5yZW1vdmUgfSxcbiAgICAgICAgICAgIGRhdGE6IHsgdHJpeEFjdGlvbjogXCJyZW1vdmVcIiB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KSxcbiAgICAgIH0pLFxuICAgIH0pXG5cbiAgICBpZiAodGhpcy5hdHRhY2htZW50LmlzUHJldmlld2FibGUoKSkge1xuICAgICAgLy8gPGRpdiBjbGFzcz1cIiN7Y3NzLmF0dGFjaG1lbnRNZXRhZGF0YUNvbnRhaW5lcn1cIj5cbiAgICAgIC8vICAgPHNwYW4gY2xhc3M9XCIje2Nzcy5hdHRhY2htZW50TWV0YWRhdGF9XCI+XG4gICAgICAvLyAgICAgPHNwYW4gY2xhc3M9XCIje2Nzcy5hdHRhY2htZW50TmFtZX1cIiB0aXRsZT1cIiN7bmFtZX1cIj4je25hbWV9PC9zcGFuPlxuICAgICAgLy8gICAgIDxzcGFuIGNsYXNzPVwiI3tjc3MuYXR0YWNobWVudFNpemV9XCI+I3tzaXplfTwvc3Bhbj5cbiAgICAgIC8vICAgPC9zcGFuPlxuICAgICAgLy8gPC9kaXY+XG4gICAgICBlbGVtZW50LmFwcGVuZENoaWxkKFxuICAgICAgICBtYWtlRWxlbWVudCh7XG4gICAgICAgICAgdGFnTmFtZTogXCJkaXZcIixcbiAgICAgICAgICBjbGFzc05hbWU6IGNzcy5hdHRhY2htZW50TWV0YWRhdGFDb250YWluZXIsXG4gICAgICAgICAgY2hpbGROb2RlczogbWFrZUVsZW1lbnQoe1xuICAgICAgICAgICAgdGFnTmFtZTogXCJzcGFuXCIsXG4gICAgICAgICAgICBjbGFzc05hbWU6IGNzcy5hdHRhY2htZW50TWV0YWRhdGEsXG4gICAgICAgICAgICBjaGlsZE5vZGVzOiBbXG4gICAgICAgICAgICAgIG1ha2VFbGVtZW50KHtcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiBcInNwYW5cIixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNzcy5hdHRhY2htZW50TmFtZSxcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogdGhpcy5hdHRhY2htZW50LmdldEZpbGVuYW1lKCksXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogeyB0aXRsZTogdGhpcy5hdHRhY2htZW50LmdldEZpbGVuYW1lKCkgfSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIG1ha2VFbGVtZW50KHtcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiBcInNwYW5cIixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNzcy5hdHRhY2htZW50U2l6ZSxcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogdGhpcy5hdHRhY2htZW50LmdldEZvcm1hdHRlZEZpbGVzaXplKCksXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG5cbiAgICBoYW5kbGVFdmVudChcImNsaWNrXCIsIHsgb25FbGVtZW50OiBlbGVtZW50LCB3aXRoQ2FsbGJhY2s6IHRoaXMuZGlkQ2xpY2tUb29sYmFyIH0pXG4gICAgaGFuZGxlRXZlbnQoXCJjbGlja1wiLCB7XG4gICAgICBvbkVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICBtYXRjaGluZ1NlbGVjdG9yOiBcIltkYXRhLXRyaXgtYWN0aW9uXVwiLFxuICAgICAgd2l0aENhbGxiYWNrOiB0aGlzLmRpZENsaWNrQWN0aW9uQnV0dG9uLFxuICAgIH0pXG5cbiAgICB0cmlnZ2VyRXZlbnQoXCJ0cml4LWF0dGFjaG1lbnQtYmVmb3JlLXRvb2xiYXJcIiwgeyBvbkVsZW1lbnQ6IHRoaXMuZWxlbWVudCwgYXR0cmlidXRlczogeyB0b29sYmFyOiBlbGVtZW50LCBhdHRhY2htZW50OiB0aGlzLmF0dGFjaG1lbnQgfSB9KVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRvOiAoKSA9PiB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCksXG4gICAgICB1bmRvOiAoKSA9PiByZW1vdmVOb2RlKGVsZW1lbnQpLFxuICAgIH1cbiAgfSlcblxuICBpbnN0YWxsQ2FwdGlvbkVkaXRvciA9IHVuZG9hYmxlKCgpID0+IHtcbiAgICBjb25zdCB0ZXh0YXJlYSA9IG1ha2VFbGVtZW50KHtcbiAgICAgIHRhZ05hbWU6IFwidGV4dGFyZWFcIixcbiAgICAgIGNsYXNzTmFtZTogY3NzLmF0dGFjaG1lbnRDYXB0aW9uRWRpdG9yLFxuICAgICAgYXR0cmlidXRlczogeyBwbGFjZWhvbGRlcjogbGFuZy5jYXB0aW9uUGxhY2Vob2xkZXIgfSxcbiAgICAgIGRhdGE6IHsgdHJpeE11dGFibGU6IHRydWUgfSxcbiAgICB9KVxuICAgIHRleHRhcmVhLnZhbHVlID0gdGhpcy5hdHRhY2htZW50UGllY2UuZ2V0Q2FwdGlvbigpXG5cbiAgICBjb25zdCB0ZXh0YXJlYUNsb25lID0gdGV4dGFyZWEuY2xvbmVOb2RlKClcbiAgICB0ZXh0YXJlYUNsb25lLmNsYXNzTGlzdC5hZGQoXCJ0cml4LWF1dG9yZXNpemUtY2xvbmVcIilcbiAgICB0ZXh0YXJlYUNsb25lLnRhYkluZGV4ID0gLTFcblxuICAgIGNvbnN0IGF1dG9yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRleHRhcmVhQ2xvbmUudmFsdWUgPSB0ZXh0YXJlYS52YWx1ZVxuICAgICAgdGV4dGFyZWEuc3R5bGUuaGVpZ2h0ID0gdGV4dGFyZWFDbG9uZS5zY3JvbGxIZWlnaHQgKyBcInB4XCJcbiAgICB9XG5cbiAgICBoYW5kbGVFdmVudChcImlucHV0XCIsIHsgb25FbGVtZW50OiB0ZXh0YXJlYSwgd2l0aENhbGxiYWNrOiBhdXRvcmVzaXplIH0pXG4gICAgaGFuZGxlRXZlbnQoXCJpbnB1dFwiLCB7IG9uRWxlbWVudDogdGV4dGFyZWEsIHdpdGhDYWxsYmFjazogdGhpcy5kaWRJbnB1dENhcHRpb24gfSlcbiAgICBoYW5kbGVFdmVudChcImtleWRvd25cIiwgeyBvbkVsZW1lbnQ6IHRleHRhcmVhLCB3aXRoQ2FsbGJhY2s6IHRoaXMuZGlkS2V5RG93bkNhcHRpb24gfSlcbiAgICBoYW5kbGVFdmVudChcImNoYW5nZVwiLCB7IG9uRWxlbWVudDogdGV4dGFyZWEsIHdpdGhDYWxsYmFjazogdGhpcy5kaWRDaGFuZ2VDYXB0aW9uIH0pXG4gICAgaGFuZGxlRXZlbnQoXCJibHVyXCIsIHsgb25FbGVtZW50OiB0ZXh0YXJlYSwgd2l0aENhbGxiYWNrOiB0aGlzLmRpZEJsdXJDYXB0aW9uIH0pXG5cbiAgICBjb25zdCBmaWdjYXB0aW9uID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJmaWdjYXB0aW9uXCIpXG4gICAgY29uc3QgZWRpdGluZ0ZpZ2NhcHRpb24gPSBmaWdjYXB0aW9uLmNsb25lTm9kZSgpXG5cbiAgICByZXR1cm4ge1xuICAgICAgZG86ICgpID0+IHtcbiAgICAgICAgZmlnY2FwdGlvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcbiAgICAgICAgZWRpdGluZ0ZpZ2NhcHRpb24uYXBwZW5kQ2hpbGQodGV4dGFyZWEpXG4gICAgICAgIGVkaXRpbmdGaWdjYXB0aW9uLmFwcGVuZENoaWxkKHRleHRhcmVhQ2xvbmUpXG4gICAgICAgIGVkaXRpbmdGaWdjYXB0aW9uLmNsYXNzTGlzdC5hZGQoYCR7Y3NzLmF0dGFjaG1lbnRDYXB0aW9ufS0tZWRpdGluZ2ApXG4gICAgICAgIGZpZ2NhcHRpb24ucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWRpdGluZ0ZpZ2NhcHRpb24sIGZpZ2NhcHRpb24pXG4gICAgICAgIGF1dG9yZXNpemUoKVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVkaXRDYXB0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmVyKCgpID0+IHRleHRhcmVhLmZvY3VzKCkpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1bmRvKCkge1xuICAgICAgICByZW1vdmVOb2RlKGVkaXRpbmdGaWdjYXB0aW9uKVxuICAgICAgICBmaWdjYXB0aW9uLnN0eWxlLmRpc3BsYXkgPSBudWxsXG4gICAgICB9LFxuICAgIH1cbiAgfSlcblxuICAvLyBFdmVudCBoYW5kbGVyc1xuXG4gIGRpZENsaWNrVG9vbGJhcihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICByZXR1cm4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgfVxuXG4gIGRpZENsaWNrQWN0aW9uQnV0dG9uKGV2ZW50KSB7XG4gICAgY29uc3QgYWN0aW9uID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdHJpeC1hY3Rpb25cIilcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSBcInJlbW92ZVwiOlxuICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uYXR0YWNobWVudEVkaXRvckRpZFJlcXVlc3RSZW1vdmFsT2ZBdHRhY2htZW50KHRoaXMuYXR0YWNobWVudClcbiAgICB9XG4gIH1cblxuICBkaWRLZXlEb3duQ2FwdGlvbihldmVudCkge1xuICAgIGlmIChrZXlOYW1lc1tldmVudC5rZXlDb2RlXSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgdGhpcy5zYXZlUGVuZGluZ0NhcHRpb24oKVxuICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmF0dGFjaG1lbnRFZGl0b3JEaWRSZXF1ZXN0RGVzZWxlY3RpbmdBdHRhY2htZW50Py4odGhpcy5hdHRhY2htZW50KVxuICAgIH1cbiAgfVxuXG4gIGRpZElucHV0Q2FwdGlvbihldmVudCkge1xuICAgIHRoaXMucGVuZGluZ0NhcHRpb24gPSBldmVudC50YXJnZXQudmFsdWUucmVwbGFjZSgvXFxzL2csIFwiIFwiKS50cmltKClcbiAgfVxuXG4gIGRpZENoYW5nZUNhcHRpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5zYXZlUGVuZGluZ0NhcHRpb24oKVxuICB9XG5cbiAgZGlkQmx1ckNhcHRpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5zYXZlUGVuZGluZ0NhcHRpb24oKVxuICB9XG59XG4iLCAiaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcbmltcG9ydCBEb2N1bWVudFZpZXcgZnJvbSBcInRyaXgvdmlld3MvZG9jdW1lbnRfdmlld1wiXG5pbXBvcnQgQXR0YWNobWVudEVkaXRvckNvbnRyb2xsZXIgZnJvbSBcInRyaXgvY29udHJvbGxlcnMvYXR0YWNobWVudF9lZGl0b3JfY29udHJvbGxlclwiXG5cbmltcG9ydCB7IGRlZmVyLCBmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZSwgaGFuZGxlRXZlbnQsIGlubmVyRWxlbWVudElzQWN0aXZlIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcbmltcG9ydCB7IGF0dGFjaG1lbnRTZWxlY3RvciB9IGZyb20gXCJ0cml4L2NvbmZpZy9hdHRhY2htZW50c1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvc2l0aW9uQ29udHJvbGxlciBleHRlbmRzIEJhc2ljT2JqZWN0IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29tcG9zaXRpb24pIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5kaWRGb2N1cyA9IHRoaXMuZGlkRm9jdXMuYmluZCh0aGlzKVxuICAgIHRoaXMuZGlkQmx1ciA9IHRoaXMuZGlkQmx1ci5iaW5kKHRoaXMpXG4gICAgdGhpcy5kaWRDbGlja0F0dGFjaG1lbnQgPSB0aGlzLmRpZENsaWNrQXR0YWNobWVudC5iaW5kKHRoaXMpXG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy5jb21wb3NpdGlvbiA9IGNvbXBvc2l0aW9uXG4gICAgdGhpcy5kb2N1bWVudFZpZXcgPSBuZXcgRG9jdW1lbnRWaWV3KHRoaXMuY29tcG9zaXRpb24uZG9jdW1lbnQsIHsgZWxlbWVudDogdGhpcy5lbGVtZW50IH0pXG5cbiAgICBoYW5kbGVFdmVudChcImZvY3VzXCIsIHsgb25FbGVtZW50OiB0aGlzLmVsZW1lbnQsIHdpdGhDYWxsYmFjazogdGhpcy5kaWRGb2N1cyB9KVxuICAgIGhhbmRsZUV2ZW50KFwiYmx1clwiLCB7IG9uRWxlbWVudDogdGhpcy5lbGVtZW50LCB3aXRoQ2FsbGJhY2s6IHRoaXMuZGlkQmx1ciB9KVxuICAgIGhhbmRsZUV2ZW50KFwiY2xpY2tcIiwge1xuICAgICAgb25FbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICBtYXRjaGluZ1NlbGVjdG9yOiBcImFbY29udGVudGVkaXRhYmxlPWZhbHNlXVwiLFxuICAgICAgcHJldmVudERlZmF1bHQ6IHRydWUsXG4gICAgfSlcbiAgICBoYW5kbGVFdmVudChcIm1vdXNlZG93blwiLCB7XG4gICAgICBvbkVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAgIG1hdGNoaW5nU2VsZWN0b3I6IGF0dGFjaG1lbnRTZWxlY3RvcixcbiAgICAgIHdpdGhDYWxsYmFjazogdGhpcy5kaWRDbGlja0F0dGFjaG1lbnQsXG4gICAgfSlcbiAgICBoYW5kbGVFdmVudChcImNsaWNrXCIsIHsgb25FbGVtZW50OiB0aGlzLmVsZW1lbnQsIG1hdGNoaW5nU2VsZWN0b3I6IGBhJHthdHRhY2htZW50U2VsZWN0b3J9YCwgcHJldmVudERlZmF1bHQ6IHRydWUgfSlcbiAgfVxuXG4gIGRpZEZvY3VzKGV2ZW50KSB7XG4gICAgY29uc3QgcGVyZm9ybSA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5mb2N1c2VkKSB7XG4gICAgICAgIHRoaXMuZm9jdXNlZCA9IHRydWVcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uQ29udHJvbGxlckRpZEZvY3VzPy4oKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmJsdXJQcm9taXNlPy50aGVuKHBlcmZvcm0pIHx8IHBlcmZvcm0oKVxuICB9XG5cbiAgZGlkQmx1cihldmVudCkge1xuICAgIHRoaXMuYmx1clByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgcmV0dXJuIGRlZmVyKCgpID0+IHtcbiAgICAgICAgaWYgKCFpbm5lckVsZW1lbnRJc0FjdGl2ZSh0aGlzLmVsZW1lbnQpKSB7XG4gICAgICAgICAgdGhpcy5mb2N1c2VkID0gbnVsbFxuICAgICAgICAgIHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uQ29udHJvbGxlckRpZEJsdXI/LigpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ibHVyUHJvbWlzZSA9IG51bGxcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgZGlkQ2xpY2tBdHRhY2htZW50KGV2ZW50LCB0YXJnZXQpIHtcbiAgICBjb25zdCBhdHRhY2htZW50ID0gdGhpcy5maW5kQXR0YWNobWVudEZvckVsZW1lbnQodGFyZ2V0KVxuICAgIGNvbnN0IGVkaXRDYXB0aW9uID0gISFmaW5kQ2xvc2VzdEVsZW1lbnRGcm9tTm9kZShldmVudC50YXJnZXQsIHsgbWF0Y2hpbmdTZWxlY3RvcjogXCJmaWdjYXB0aW9uXCIgfSlcbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25Db250cm9sbGVyRGlkU2VsZWN0QXR0YWNobWVudD8uKGF0dGFjaG1lbnQsIHsgZWRpdENhcHRpb24gfSlcbiAgfVxuXG4gIGdldFNlcmlhbGl6YWJsZUVsZW1lbnQoKSB7XG4gICAgaWYgKHRoaXMuaXNFZGl0aW5nQXR0YWNobWVudCgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb2N1bWVudFZpZXcuc2hhZG93RWxlbWVudFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnJldmlzaW9uICE9PSB0aGlzLmNvbXBvc2l0aW9uLnJldmlzaW9uKSB7XG4gICAgICB0aGlzLmRvY3VtZW50Vmlldy5zZXREb2N1bWVudCh0aGlzLmNvbXBvc2l0aW9uLmRvY3VtZW50KVxuICAgICAgdGhpcy5kb2N1bWVudFZpZXcucmVuZGVyKClcbiAgICAgIHRoaXMucmV2aXNpb24gPSB0aGlzLmNvbXBvc2l0aW9uLnJldmlzaW9uXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2FuU3luY0RvY3VtZW50VmlldygpICYmICF0aGlzLmRvY3VtZW50Vmlldy5pc1N5bmNlZCgpKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkNvbnRyb2xsZXJXaWxsU3luY0RvY3VtZW50Vmlldz8uKClcbiAgICAgIHRoaXMuZG9jdW1lbnRWaWV3LnN5bmMoKVxuICAgICAgdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25Db250cm9sbGVyRGlkU3luY0RvY3VtZW50Vmlldz8uKClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25Db250cm9sbGVyRGlkUmVuZGVyPy4oKVxuICB9XG5cbiAgcmVyZW5kZXJWaWV3Rm9yT2JqZWN0KG9iamVjdCkge1xuICAgIHRoaXMuaW52YWxpZGF0ZVZpZXdGb3JPYmplY3Qob2JqZWN0KVxuICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gIH1cblxuICBpbnZhbGlkYXRlVmlld0Zvck9iamVjdChvYmplY3QpIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudFZpZXcuaW52YWxpZGF0ZVZpZXdGb3JPYmplY3Qob2JqZWN0KVxuICB9XG5cbiAgaXNWaWV3Q2FjaGluZ0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRWaWV3LmlzVmlld0NhY2hpbmdFbmFibGVkKClcbiAgfVxuXG4gIGVuYWJsZVZpZXdDYWNoaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50Vmlldy5lbmFibGVWaWV3Q2FjaGluZygpXG4gIH1cblxuICBkaXNhYmxlVmlld0NhY2hpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRWaWV3LmRpc2FibGVWaWV3Q2FjaGluZygpXG4gIH1cblxuICByZWZyZXNoVmlld0NhY2hlKCkge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50Vmlldy5nYXJiYWdlQ29sbGVjdENhY2hlZFZpZXdzKClcbiAgfVxuXG4gIC8vIEF0dGFjaG1lbnQgZWRpdG9yIG1hbmFnZW1lbnRcblxuICBpc0VkaXRpbmdBdHRhY2htZW50KCkge1xuICAgIHJldHVybiAhIXRoaXMuYXR0YWNobWVudEVkaXRvclxuICB9XG5cbiAgaW5zdGFsbEF0dGFjaG1lbnRFZGl0b3JGb3JBdHRhY2htZW50KGF0dGFjaG1lbnQsIG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcy5hdHRhY2htZW50RWRpdG9yPy5hdHRhY2htZW50ID09PSBhdHRhY2htZW50KSByZXR1cm5cbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5kb2N1bWVudFZpZXcuZmluZEVsZW1lbnRGb3JPYmplY3QoYXR0YWNobWVudClcbiAgICBpZiAoIWVsZW1lbnQpIHJldHVyblxuXG4gICAgdGhpcy51bmluc3RhbGxBdHRhY2htZW50RWRpdG9yKClcbiAgICBjb25zdCBhdHRhY2htZW50UGllY2UgPSB0aGlzLmNvbXBvc2l0aW9uLmRvY3VtZW50LmdldEF0dGFjaG1lbnRQaWVjZUZvckF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICB0aGlzLmF0dGFjaG1lbnRFZGl0b3IgPSBuZXcgQXR0YWNobWVudEVkaXRvckNvbnRyb2xsZXIoYXR0YWNobWVudFBpZWNlLCBlbGVtZW50LCB0aGlzLmVsZW1lbnQsIG9wdGlvbnMpXG4gICAgdGhpcy5hdHRhY2htZW50RWRpdG9yLmRlbGVnYXRlID0gdGhpc1xuICB9XG5cbiAgdW5pbnN0YWxsQXR0YWNobWVudEVkaXRvcigpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRhY2htZW50RWRpdG9yPy51bmluc3RhbGwoKVxuICB9XG5cbiAgLy8gQXR0YWNobWVudCBjb250cm9sbGVyIGRlbGVnYXRlXG5cbiAgZGlkVW5pbnN0YWxsQXR0YWNobWVudEVkaXRvcigpIHtcbiAgICB0aGlzLmF0dGFjaG1lbnRFZGl0b3IgPSBudWxsXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKClcbiAgfVxuXG4gIGF0dGFjaG1lbnRFZGl0b3JEaWRSZXF1ZXN0VXBkYXRpbmdBdHRyaWJ1dGVzRm9yQXR0YWNobWVudChhdHRyaWJ1dGVzLCBhdHRhY2htZW50KSB7XG4gICAgdGhpcy5kZWxlZ2F0ZT8uY29tcG9zaXRpb25Db250cm9sbGVyV2lsbFVwZGF0ZUF0dGFjaG1lbnQ/LihhdHRhY2htZW50KVxuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uLnVwZGF0ZUF0dHJpYnV0ZXNGb3JBdHRhY2htZW50KGF0dHJpYnV0ZXMsIGF0dGFjaG1lbnQpXG4gIH1cblxuICBhdHRhY2htZW50RWRpdG9yRGlkUmVxdWVzdFJlbW92aW5nQXR0cmlidXRlRm9yQXR0YWNobWVudChhdHRyaWJ1dGUsIGF0dGFjaG1lbnQpIHtcbiAgICB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkNvbnRyb2xsZXJXaWxsVXBkYXRlQXR0YWNobWVudD8uKGF0dGFjaG1lbnQpXG4gICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24ucmVtb3ZlQXR0cmlidXRlRm9yQXR0YWNobWVudChhdHRyaWJ1dGUsIGF0dGFjaG1lbnQpXG4gIH1cblxuICBhdHRhY2htZW50RWRpdG9yRGlkUmVxdWVzdFJlbW92YWxPZkF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5jb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRSZXF1ZXN0UmVtb3ZhbE9mQXR0YWNobWVudD8uKGF0dGFjaG1lbnQpXG4gIH1cblxuICBhdHRhY2htZW50RWRpdG9yRGlkUmVxdWVzdERlc2VsZWN0aW5nQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmNvbXBvc2l0aW9uQ29udHJvbGxlckRpZFJlcXVlc3REZXNlbGVjdGluZ0F0dGFjaG1lbnQ/LihhdHRhY2htZW50KVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIGNhblN5bmNEb2N1bWVudFZpZXcoKSB7XG4gICAgcmV0dXJuICF0aGlzLmlzRWRpdGluZ0F0dGFjaG1lbnQoKVxuICB9XG5cbiAgZmluZEF0dGFjaG1lbnRGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5kb2N1bWVudC5nZXRBdHRhY2htZW50QnlJZChwYXJzZUludChlbGVtZW50LmRhdGFzZXQudHJpeElkLCAxMCkpXG4gIH1cbn1cbiIsICJpbXBvcnQgXCJ0cml4L3ZpZXdzL29iamVjdF92aWV3XCJcbmltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xsZXIgZXh0ZW5kcyBCYXNpY09iamVjdCB7fVxuIiwgImltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5cbmltcG9ydCB7XG4gIGZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlLFxuICBub2RlSXNCbG9ja1N0YXJ0Q29tbWVudCxcbiAgbm9kZUlzRW1wdHlUZXh0Tm9kZSxcbiAgbm9ybWFsaXplU3BhY2VzLFxuICBzdW1tYXJpemVTdHJpbmdDaGFuZ2UsXG4gIHRhZ05hbWUsXG59IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5cbmNvbnN0IG11dGFibGVBdHRyaWJ1dGVOYW1lID0gXCJkYXRhLXRyaXgtbXV0YWJsZVwiXG5jb25zdCBtdXRhYmxlU2VsZWN0b3IgPSBgWyR7bXV0YWJsZUF0dHJpYnV0ZU5hbWV9XWBcblxuY29uc3Qgb3B0aW9ucyA9IHtcbiAgYXR0cmlidXRlczogdHJ1ZSxcbiAgY2hpbGRMaXN0OiB0cnVlLFxuICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICBjaGFyYWN0ZXJEYXRhT2xkVmFsdWU6IHRydWUsXG4gIHN1YnRyZWU6IHRydWUsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE11dGF0aW9uT2JzZXJ2ZXIgZXh0ZW5kcyBCYXNpY09iamVjdCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KVxuICAgIHRoaXMuZGlkTXV0YXRlID0gdGhpcy5kaWRNdXRhdGUuYmluZCh0aGlzKVxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLm9ic2VydmVyID0gbmV3IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyKHRoaXMuZGlkTXV0YXRlKVxuICAgIHRoaXMuc3RhcnQoKVxuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5yZXNldCgpXG4gICAgcmV0dXJuIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQsIG9wdGlvbnMpXG4gIH1cblxuICBzdG9wKCkge1xuICAgIHJldHVybiB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKVxuICB9XG5cbiAgZGlkTXV0YXRlKG11dGF0aW9ucykge1xuICAgIHRoaXMubXV0YXRpb25zLnB1c2goLi4uQXJyYXkuZnJvbSh0aGlzLmZpbmRTaWduaWZpY2FudE11dGF0aW9ucyhtdXRhdGlvbnMpIHx8IFtdKSlcblxuICAgIGlmICh0aGlzLm11dGF0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmVsZW1lbnREaWRNdXRhdGU/Lih0aGlzLmdldE11dGF0aW9uU3VtbWFyeSgpKVxuICAgICAgcmV0dXJuIHRoaXMucmVzZXQoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICByZXNldCgpIHtcbiAgICB0aGlzLm11dGF0aW9ucyA9IFtdXG4gIH1cblxuICBmaW5kU2lnbmlmaWNhbnRNdXRhdGlvbnMobXV0YXRpb25zKSB7XG4gICAgcmV0dXJuIG11dGF0aW9ucy5maWx0ZXIoKG11dGF0aW9uKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5tdXRhdGlvbklzU2lnbmlmaWNhbnQobXV0YXRpb24pXG4gICAgfSlcbiAgfVxuXG4gIG11dGF0aW9uSXNTaWduaWZpY2FudChtdXRhdGlvbikge1xuICAgIGlmICh0aGlzLm5vZGVJc011dGFibGUobXV0YXRpb24udGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBBcnJheS5mcm9tKHRoaXMubm9kZXNNb2RpZmllZEJ5TXV0YXRpb24obXV0YXRpb24pKSkge1xuICAgICAgaWYgKHRoaXMubm9kZUlzU2lnbmlmaWNhbnQobm9kZSkpIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgbm9kZUlzU2lnbmlmaWNhbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlICE9PSB0aGlzLmVsZW1lbnQgJiYgIXRoaXMubm9kZUlzTXV0YWJsZShub2RlKSAmJiAhbm9kZUlzRW1wdHlUZXh0Tm9kZShub2RlKVxuICB9XG5cbiAgbm9kZUlzTXV0YWJsZShub2RlKSB7XG4gICAgcmV0dXJuIGZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlKG5vZGUsIHsgbWF0Y2hpbmdTZWxlY3RvcjogbXV0YWJsZVNlbGVjdG9yIH0pXG4gIH1cblxuICBub2Rlc01vZGlmaWVkQnlNdXRhdGlvbihtdXRhdGlvbikge1xuICAgIGNvbnN0IG5vZGVzID0gW11cbiAgICBzd2l0Y2ggKG11dGF0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJhdHRyaWJ1dGVzXCI6XG4gICAgICAgIGlmIChtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lICE9PSBtdXRhYmxlQXR0cmlidXRlTmFtZSkge1xuICAgICAgICAgIG5vZGVzLnB1c2gobXV0YXRpb24udGFyZ2V0KVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwiY2hhcmFjdGVyRGF0YVwiOlxuICAgICAgICAvLyBDaGFuZ2VzIHRvIHRleHQgbm9kZXMgc2hvdWxkIGNvbnNpZGVyIHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAgICBub2Rlcy5wdXNoKG11dGF0aW9uLnRhcmdldC5wYXJlbnROb2RlKVxuICAgICAgICBub2Rlcy5wdXNoKG11dGF0aW9uLnRhcmdldClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgXCJjaGlsZExpc3RcIjpcbiAgICAgICAgLy8gQ29uc2lkZXIgZWFjaCBhZGRlZCBvciByZW1vdmVkIG5vZGVcbiAgICAgICAgbm9kZXMucHVzaCguLi5BcnJheS5mcm9tKG11dGF0aW9uLmFkZGVkTm9kZXMgfHwgW10pKVxuICAgICAgICBub2Rlcy5wdXNoKC4uLkFycmF5LmZyb20obXV0YXRpb24ucmVtb3ZlZE5vZGVzIHx8IFtdKSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cblxuICBnZXRNdXRhdGlvblN1bW1hcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGV4dE11dGF0aW9uU3VtbWFyeSgpXG4gIH1cblxuICBnZXRUZXh0TXV0YXRpb25TdW1tYXJ5KCkge1xuICAgIGNvbnN0IHsgYWRkaXRpb25zLCBkZWxldGlvbnMgfSA9IHRoaXMuZ2V0VGV4dENoYW5nZXNGcm9tQ2hhcmFjdGVyRGF0YSgpXG4gICAgY29uc3QgdGV4dENoYW5nZXMgPSB0aGlzLmdldFRleHRDaGFuZ2VzRnJvbUNoaWxkTGlzdCgpXG5cbiAgICBBcnJheS5mcm9tKHRleHRDaGFuZ2VzLmFkZGl0aW9ucykuZm9yRWFjaCgoYWRkaXRpb24pID0+IHtcbiAgICAgIGlmICghQXJyYXkuZnJvbShhZGRpdGlvbnMpLmluY2x1ZGVzKGFkZGl0aW9uKSkge1xuICAgICAgICBhZGRpdGlvbnMucHVzaChhZGRpdGlvbilcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgZGVsZXRpb25zLnB1c2goLi4uQXJyYXkuZnJvbSh0ZXh0Q2hhbmdlcy5kZWxldGlvbnMgfHwgW10pKVxuXG4gICAgY29uc3Qgc3VtbWFyeSA9IHt9XG5cbiAgICBjb25zdCBhZGRlZCA9IGFkZGl0aW9ucy5qb2luKFwiXCIpXG4gICAgaWYgKGFkZGVkKSB7XG4gICAgICBzdW1tYXJ5LnRleHRBZGRlZCA9IGFkZGVkXG4gICAgfVxuXG4gICAgY29uc3QgZGVsZXRlZCA9IGRlbGV0aW9ucy5qb2luKFwiXCIpXG4gICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgIHN1bW1hcnkudGV4dERlbGV0ZWQgPSBkZWxldGVkXG4gICAgfVxuXG4gICAgcmV0dXJuIHN1bW1hcnlcbiAgfVxuXG4gIGdldE11dGF0aW9uc0J5VHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5tdXRhdGlvbnMpLmZpbHRlcigobXV0YXRpb24pID0+IG11dGF0aW9uLnR5cGUgPT09IHR5cGUpXG4gIH1cblxuICBnZXRUZXh0Q2hhbmdlc0Zyb21DaGlsZExpc3QoKSB7XG4gICAgbGV0IHRleHRBZGRlZCwgdGV4dFJlbW92ZWRcbiAgICBjb25zdCBhZGRlZE5vZGVzID0gW11cbiAgICBjb25zdCByZW1vdmVkTm9kZXMgPSBbXVxuXG4gICAgQXJyYXkuZnJvbSh0aGlzLmdldE11dGF0aW9uc0J5VHlwZShcImNoaWxkTGlzdFwiKSkuZm9yRWFjaCgobXV0YXRpb24pID0+IHtcbiAgICAgIGFkZGVkTm9kZXMucHVzaCguLi5BcnJheS5mcm9tKG11dGF0aW9uLmFkZGVkTm9kZXMgfHwgW10pKVxuICAgICAgcmVtb3ZlZE5vZGVzLnB1c2goLi4uQXJyYXkuZnJvbShtdXRhdGlvbi5yZW1vdmVkTm9kZXMgfHwgW10pKVxuICAgIH0pXG5cbiAgICBjb25zdCBzaW5nbGVCbG9ja0NvbW1lbnRSZW1vdmVkID1cbiAgICAgIGFkZGVkTm9kZXMubGVuZ3RoID09PSAwICYmIHJlbW92ZWROb2Rlcy5sZW5ndGggPT09IDEgJiYgbm9kZUlzQmxvY2tTdGFydENvbW1lbnQocmVtb3ZlZE5vZGVzWzBdKVxuXG4gICAgaWYgKHNpbmdsZUJsb2NrQ29tbWVudFJlbW92ZWQpIHtcbiAgICAgIHRleHRBZGRlZCA9IFtdXG4gICAgICB0ZXh0UmVtb3ZlZCA9IFsgXCJcXG5cIiBdXG4gICAgfSBlbHNlIHtcbiAgICAgIHRleHRBZGRlZCA9IGdldFRleHRGb3JOb2RlcyhhZGRlZE5vZGVzKVxuICAgICAgdGV4dFJlbW92ZWQgPSBnZXRUZXh0Rm9yTm9kZXMocmVtb3ZlZE5vZGVzKVxuICAgIH1cblxuICAgIGNvbnN0IGFkZGl0aW9ucyA9IHRleHRBZGRlZC5maWx0ZXIoKHRleHQsIGluZGV4KSA9PiB0ZXh0ICE9PSB0ZXh0UmVtb3ZlZFtpbmRleF0pLm1hcChub3JtYWxpemVTcGFjZXMpXG4gICAgY29uc3QgZGVsZXRpb25zID0gdGV4dFJlbW92ZWQuZmlsdGVyKCh0ZXh0LCBpbmRleCkgPT4gdGV4dCAhPT0gdGV4dEFkZGVkW2luZGV4XSkubWFwKG5vcm1hbGl6ZVNwYWNlcylcblxuICAgIHJldHVybiB7IGFkZGl0aW9ucywgZGVsZXRpb25zIH1cbiAgfVxuXG4gIGdldFRleHRDaGFuZ2VzRnJvbUNoYXJhY3RlckRhdGEoKSB7XG4gICAgbGV0IGFkZGVkLCByZW1vdmVkXG4gICAgY29uc3QgY2hhcmFjdGVyTXV0YXRpb25zID0gdGhpcy5nZXRNdXRhdGlvbnNCeVR5cGUoXCJjaGFyYWN0ZXJEYXRhXCIpXG5cbiAgICBpZiAoY2hhcmFjdGVyTXV0YXRpb25zLmxlbmd0aCkge1xuICAgICAgY29uc3Qgc3RhcnRNdXRhdGlvbiA9IGNoYXJhY3Rlck11dGF0aW9uc1swXSxcbiAgICAgICAgZW5kTXV0YXRpb24gPSBjaGFyYWN0ZXJNdXRhdGlvbnNbY2hhcmFjdGVyTXV0YXRpb25zLmxlbmd0aCAtIDFdXG5cbiAgICAgIGNvbnN0IG9sZFN0cmluZyA9IG5vcm1hbGl6ZVNwYWNlcyhzdGFydE11dGF0aW9uLm9sZFZhbHVlKVxuICAgICAgY29uc3QgbmV3U3RyaW5nID0gbm9ybWFsaXplU3BhY2VzKGVuZE11dGF0aW9uLnRhcmdldC5kYXRhKVxuICAgICAgY29uc3Qgc3VtbWFyaXplZCA9IHN1bW1hcml6ZVN0cmluZ0NoYW5nZShvbGRTdHJpbmcsIG5ld1N0cmluZylcbiAgICAgIGFkZGVkID0gc3VtbWFyaXplZC5hZGRlZFxuICAgICAgcmVtb3ZlZCA9IHN1bW1hcml6ZWQucmVtb3ZlZFxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhZGRpdGlvbnM6IGFkZGVkID8gWyBhZGRlZCBdIDogW10sXG4gICAgICBkZWxldGlvbnM6IHJlbW92ZWQgPyBbIHJlbW92ZWQgXSA6IFtdLFxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBnZXRUZXh0Rm9yTm9kZXMgPSBmdW5jdGlvbihub2RlcyA9IFtdKSB7XG4gIGNvbnN0IHRleHQgPSBbXVxuICBmb3IgKGNvbnN0IG5vZGUgb2YgQXJyYXkuZnJvbShub2RlcykpIHtcbiAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICAgIGNhc2UgTm9kZS5URVhUX05PREU6XG4gICAgICAgIHRleHQucHVzaChub2RlLmRhdGEpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFOlxuICAgICAgICBpZiAodGFnTmFtZShub2RlKSA9PT0gXCJiclwiKSB7XG4gICAgICAgICAgdGV4dC5wdXNoKFwiXFxuXCIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dC5wdXNoKC4uLkFycmF5LmZyb20oZ2V0VGV4dEZvck5vZGVzKG5vZGUuY2hpbGROb2RlcykgfHwgW10pKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiB0ZXh0XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiAgICBuby1lbXB0eSxcbiovXG5pbXBvcnQgT3BlcmF0aW9uIGZyb20gXCJ0cml4L2NvcmUvdXRpbGl0aWVzL29wZXJhdGlvblwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbGVWZXJpZmljYXRpb25PcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3RvcihmaWxlKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMuZmlsZSA9IGZpbGVcbiAgfVxuXG4gIHBlcmZvcm0oY2FsbGJhY2spIHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG5cbiAgICByZWFkZXIub25lcnJvciA9ICgpID0+IGNhbGxiYWNrKGZhbHNlKVxuXG4gICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIHJlYWRlci5vbmVycm9yID0gbnVsbFxuICAgICAgdHJ5IHtcbiAgICAgICAgcmVhZGVyLmFib3J0KClcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKHRydWUsIHRoaXMuZmlsZSlcbiAgICB9XG5cbiAgICByZXR1cm4gcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHRoaXMuZmlsZSlcbiAgfVxufVxuIiwgImltcG9ydCAqIGFzIGNvbmZpZyBmcm9tIFwidHJpeC9jb25maWdcIlxuaW1wb3J0IHsgTk9OX0JSRUFLSU5HX1NQQUNFLCBPQkpFQ1RfUkVQTEFDRU1FTlRfQ0hBUkFDVEVSLCBaRVJPX1dJRFRIX1NQQUNFIH0gZnJvbSBcInRyaXgvY29uc3RhbnRzXCJcblxuLy8gRWFjaCBzb2Z0d2FyZSBrZXlib2FyZCBvbiBBbmRyb2lkIGVtaXRzIGl0cyBvd24gc2V0IG9mIGV2ZW50cyBhbmQgc29tZSBvZiB0aGVtIGNhbiBiZSBidWdneS5cbi8vIFRoaXMgY2xhc3MgZGV0ZWN0cyB3aGVuIHNvbWUgYnVnZ3kgZXZlbnRzIGFyZSBiZWluZyBlbWl0dGVkIGFuZCBsZXRzIGtub3cgdGhlIGlucHV0IGNvbnRyb2xsZXJcbi8vIHRoYXQgdGhleSBzaG91bGQgYmUgaWdub3JlZC5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZsYWt5QW5kcm9pZEtleWJvYXJkRGV0ZWN0b3Ige1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICB9XG5cbiAgc2hvdWxkSWdub3JlKGV2ZW50KSB7XG4gICAgaWYgKCFjb25maWcuYnJvd3Nlci5zYW1zdW5nQW5kcm9pZCkgcmV0dXJuIGZhbHNlXG5cbiAgICB0aGlzLnByZXZpb3VzRXZlbnQgPSB0aGlzLmV2ZW50XG4gICAgdGhpcy5ldmVudCA9IGV2ZW50XG5cbiAgICB0aGlzLmNoZWNrU2Ftc3VuZ0tleWJvYXJkQnVnZ3lNb2RlU3RhcnQoKVxuICAgIHRoaXMuY2hlY2tTYW1zdW5nS2V5Ym9hcmRCdWdneU1vZGVFbmQoKVxuXG4gICAgcmV0dXJuIHRoaXMuYnVnZ3lNb2RlXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgLy8gVGhlIFNhbXN1bmcga2V5Ym9hcmQgb24gQW5kcm9pZCBjYW4gZW50ZXIgYSBidWdneSBzdGF0ZSBpbiB3aGljaCBpdCBlbWl0cyBhIGZsdXJyeSBvZiBjb25mdXNlZCBldmVudHMgdGhhdCxcbiAgLy8gaWYgcHJvY2Vzc2VkLCBjb3JydXB0cyB0aGUgZWRpdG9yLiBUaGUgYnVnZ3kgbW9kZSBhbHdheXMgc3RhcnRzIHdpdGggYW4gaW5zZXJ0VGV4dCBldmVudCwgcmlnaHQgYWZ0ZXIgYVxuICAvLyBrZXlkb3duIGV2ZW50IHdpdGggZm9yIGFuIFwiVW5pZGVudGlmaWVkXCIga2V5LCB3aXRoIHRoZSBzYW1lIHRleHQgYXMgdGhlIGVkaXRvciBlbGVtZW50LCBleGNlcHQgZm9yIGEgZmV3XG4gIC8vIGV4dHJhIHdoaXRlc3BhY2UsIG9yIGV4b3RpYyB1dGY4LCBjaGFyYWN0ZXJzLlxuICBjaGVja1NhbXN1bmdLZXlib2FyZEJ1Z2d5TW9kZVN0YXJ0KCkge1xuICAgIGlmICh0aGlzLmluc2VydGluZ0xvbmdUZXh0QWZ0ZXJVbmlkZW50aWZpZWRDaGFyKCkgJiYgZGlmZmVyc0luV2hpdGVzcGFjZSh0aGlzLmVsZW1lbnQuaW5uZXJUZXh0LCB0aGlzLmV2ZW50LmRhdGEpKSB7XG4gICAgICB0aGlzLmJ1Z2d5TW9kZSA9IHRydWVcbiAgICAgIHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFRoZSBmbHVycnkgb2YgYnVnZ3kgZXZlbnRzIGFyZSBhbHdheXMgaW5zZXJ0VGV4dC4gSWYgd2Ugc2VlIGFueSBvdGhlciB0eXBlLCBpdCBtZWFucyBpdCdzIG92ZXIuXG4gIGNoZWNrU2Ftc3VuZ0tleWJvYXJkQnVnZ3lNb2RlRW5kKCkge1xuICAgIGlmICh0aGlzLmJ1Z2d5TW9kZSAmJiB0aGlzLmV2ZW50LmlucHV0VHlwZSAhPT0gXCJpbnNlcnRUZXh0XCIpIHtcbiAgICAgIHRoaXMuYnVnZ3lNb2RlID0gZmFsc2VcbiAgICB9XG4gIH1cblxuICBpbnNlcnRpbmdMb25nVGV4dEFmdGVyVW5pZGVudGlmaWVkQ2hhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc0JlZm9yZUlucHV0SW5zZXJ0VGV4dCgpICYmIHRoaXMucHJldmlvdXNFdmVudFdhc1VuaWRlbnRpZmllZEtleWRvd24oKSAmJiB0aGlzLmV2ZW50LmRhdGE/Lmxlbmd0aCA+IDUwXG4gIH1cblxuICBpc0JlZm9yZUlucHV0SW5zZXJ0VGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudC50eXBlID09PSBcImJlZm9yZWlucHV0XCIgJiYgdGhpcy5ldmVudC5pbnB1dFR5cGUgPT09IFwiaW5zZXJ0VGV4dFwiXG4gIH1cblxuICBwcmV2aW91c0V2ZW50V2FzVW5pZGVudGlmaWVkS2V5ZG93bigpIHtcbiAgICByZXR1cm4gdGhpcy5wcmV2aW91c0V2ZW50Py50eXBlID09PSBcImtleWRvd25cIiAmJiB0aGlzLnByZXZpb3VzRXZlbnQ/LmtleSA9PT0gXCJVbmlkZW50aWZpZWRcIlxuICB9XG59XG5cbmNvbnN0IGRpZmZlcnNJbldoaXRlc3BhY2UgPSAodGV4dDEsIHRleHQyKSA9PiB7XG4gIHJldHVybiBub3JtYWxpemUodGV4dDEpID09PSBub3JtYWxpemUodGV4dDIpXG59XG5cbmNvbnN0IHdoaXRlU3BhY2VOb3JtYWxpemVyUmVnZXhwID0gbmV3IFJlZ0V4cChgKCR7T0JKRUNUX1JFUExBQ0VNRU5UX0NIQVJBQ1RFUn18JHtaRVJPX1dJRFRIX1NQQUNFfXwke05PTl9CUkVBS0lOR19TUEFDRX18XFxcXHMpK2AsIFwiZ1wiKVxuY29uc3Qgbm9ybWFsaXplID0gKHRleHQpID0+IHRleHQucmVwbGFjZSh3aGl0ZVNwYWNlTm9ybWFsaXplclJlZ2V4cCwgXCIgXCIpLnRyaW0oKVxuIiwgImltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5pbXBvcnQgTXV0YXRpb25PYnNlcnZlciBmcm9tIFwidHJpeC9vYnNlcnZlcnMvbXV0YXRpb25fb2JzZXJ2ZXJcIlxuaW1wb3J0IEZpbGVWZXJpZmljYXRpb25PcGVyYXRpb24gZnJvbSBcInRyaXgvb3BlcmF0aW9ucy9maWxlX3ZlcmlmaWNhdGlvbl9vcGVyYXRpb25cIlxuaW1wb3J0IEZsYWt5QW5kcm9pZEtleWJvYXJkRGV0ZWN0b3IgZnJvbSBcIi4uL21vZGVscy9mbGFreV9hbmRyb2lkX2tleWJvYXJkX2RldGVjdG9yXCJcblxuaW1wb3J0IHsgaGFuZGxlRXZlbnQsIGlubmVyRWxlbWVudElzQWN0aXZlIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5wdXRDb250cm9sbGVyIGV4dGVuZHMgQmFzaWNPYmplY3Qge1xuXG4gIHN0YXRpYyBldmVudHMgPSB7fVxuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICAgIHRoaXMubXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuZWxlbWVudClcbiAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuZGVsZWdhdGUgPSB0aGlzXG4gICAgdGhpcy5mbGFreUtleWJvYXJkRGV0ZWN0b3IgPSBuZXcgRmxha3lBbmRyb2lkS2V5Ym9hcmREZXRlY3Rvcih0aGlzLmVsZW1lbnQpXG4gICAgZm9yIChjb25zdCBldmVudE5hbWUgaW4gdGhpcy5jb25zdHJ1Y3Rvci5ldmVudHMpIHtcbiAgICAgIGhhbmRsZUV2ZW50KGV2ZW50TmFtZSwgeyBvbkVsZW1lbnQ6IHRoaXMuZWxlbWVudCwgd2l0aENhbGxiYWNrOiB0aGlzLmhhbmRsZXJGb3IoZXZlbnROYW1lKSB9KVxuICAgIH1cbiAgfVxuXG4gIGVsZW1lbnREaWRNdXRhdGUobXV0YXRpb25TdW1tYXJ5KSB7fVxuXG4gIGVkaXRvcldpbGxTeW5jRG9jdW1lbnRWaWV3KCkge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuc3RvcCgpXG4gIH1cblxuICBlZGl0b3JEaWRTeW5jRG9jdW1lbnRWaWV3KCkge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuc3RhcnQoKVxuICB9XG5cbiAgcmVxdWVzdFJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkUmVxdWVzdFJlbmRlcj8uKClcbiAgfVxuXG4gIHJlcXVlc3RSZXBhcnNlKCkge1xuICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZFJlcXVlc3RSZXBhcnNlPy4oKVxuICAgIHJldHVybiB0aGlzLnJlcXVlc3RSZW5kZXIoKVxuICB9XG5cbiAgYXR0YWNoRmlsZXMoZmlsZXMpIHtcbiAgICBjb25zdCBvcGVyYXRpb25zID0gQXJyYXkuZnJvbShmaWxlcykubWFwKChmaWxlKSA9PiBuZXcgRmlsZVZlcmlmaWNhdGlvbk9wZXJhdGlvbihmaWxlKSlcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwob3BlcmF0aW9ucykudGhlbigoZmlsZXMpID0+IHtcbiAgICAgIHRoaXMuaGFuZGxlSW5wdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxBdHRhY2hGaWxlcygpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRGaWxlcyhmaWxlcylcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgaGFuZGxlckZvcihldmVudE5hbWUpIHtcbiAgICByZXR1cm4gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVJbnB1dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCFpbm5lckVsZW1lbnRJc0FjdGl2ZSh0aGlzLmVsZW1lbnQpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5mbGFreUtleWJvYXJkRGV0ZWN0b3Iuc2hvdWxkSWdub3JlKGV2ZW50KSkgcmV0dXJuXG5cbiAgICAgICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lXG4gICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLmV2ZW50c1tldmVudE5hbWVdLmNhbGwodGhpcywgZXZlbnQpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUlucHV0KGNhbGxiYWNrKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxIYW5kbGVJbnB1dCgpXG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXMpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZEhhbmRsZUlucHV0KClcbiAgICB9XG4gIH1cblxuICBjcmVhdGVMaW5rSFRNTChocmVmLCB0ZXh0KSB7XG4gICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpXG4gICAgbGluay5ocmVmID0gaHJlZlxuICAgIGxpbmsudGV4dENvbnRlbnQgPSB0ZXh0ID8gdGV4dCA6IGhyZWZcbiAgICByZXR1cm4gbGluay5vdXRlckhUTUxcbiAgfVxufVxuXG4iLCAiaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5pbXBvcnQgVVRGMTZTdHJpbmcgZnJvbSBcInRyaXgvY29yZS91dGlsaXRpZXMvdXRmMTZfc3RyaW5nXCJcbmltcG9ydCBCYXNpY09iamVjdCBmcm9tIFwidHJpeC9jb3JlL2Jhc2ljX29iamVjdFwiXG5pbXBvcnQgSW5wdXRDb250cm9sbGVyIGZyb20gXCJ0cml4L2NvbnRyb2xsZXJzL2lucHV0X2NvbnRyb2xsZXJcIlxuaW1wb3J0IERvY3VtZW50VmlldyBmcm9tIFwidHJpeC92aWV3cy9kb2N1bWVudF92aWV3XCJcbmltcG9ydCBEb2N1bWVudCBmcm9tIFwidHJpeC9tb2RlbHMvZG9jdW1lbnRcIlxuXG5pbXBvcnQge1xuICBkYXRhVHJhbnNmZXJJc1BsYWluVGV4dCxcbiAgZGF0YVRyYW5zZmVySXNXcml0YWJsZSxcbiAga2V5RXZlbnRJc0tleWJvYXJkQ29tbWFuZCxcbiAgbWFrZUVsZW1lbnQsXG4gIG9iamVjdHNBcmVFcXVhbCxcbiAgcmVtb3ZlTm9kZSxcbiAgc3F1aXNoQnJlYWthYmxlV2hpdGVzcGFjZSxcbn0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuaW1wb3J0IHsgc2VsZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIgfSBmcm9tIFwidHJpeC9vYnNlcnZlcnMvc2VsZWN0aW9uX2NoYW5nZV9vYnNlcnZlclwiXG5cbmNvbnN0IHsgYnJvd3Nlciwga2V5TmFtZXMgfSA9IGNvbmZpZ1xubGV0IHBhc3RlZEZpbGVDb3VudCA9IDBcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGV2ZWwwSW5wdXRDb250cm9sbGVyIGV4dGVuZHMgSW5wdXRDb250cm9sbGVyIHtcblxuICBzdGF0aWMgZXZlbnRzID0ge1xuICAgIGtleWRvd24oZXZlbnQpIHtcbiAgICAgIGlmICghdGhpcy5pc0NvbXBvc2luZygpKSB7XG4gICAgICAgIHRoaXMucmVzZXRJbnB1dFN1bW1hcnkoKVxuICAgICAgfVxuICAgICAgdGhpcy5pbnB1dFN1bW1hcnkuZGlkSW5wdXQgPSB0cnVlXG5cbiAgICAgIGNvbnN0IGtleU5hbWUgPSBrZXlOYW1lc1tldmVudC5rZXlDb2RlXVxuICAgICAgaWYgKGtleU5hbWUpIHtcbiAgICAgICAgbGV0IGNvbnRleHQgPSB0aGlzLmtleXNcblxuICAgICAgICA7WyBcImN0cmxcIiwgXCJhbHRcIiwgXCJzaGlmdFwiLCBcIm1ldGFcIiBdLmZvckVhY2goKG1vZGlmaWVyKSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50W2Ake21vZGlmaWVyfUtleWBdKSB7XG4gICAgICAgICAgICBpZiAobW9kaWZpZXIgPT09IFwiY3RybFwiKSB7XG4gICAgICAgICAgICAgIG1vZGlmaWVyID0gXCJjb250cm9sXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0Py5bbW9kaWZpZXJdXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmIChjb250ZXh0Py5ba2V5TmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuc2V0SW5wdXRTdW1tYXJ5KHsga2V5TmFtZSB9KVxuICAgICAgICAgIHNlbGVjdGlvbkNoYW5nZU9ic2VydmVyLnJlc2V0KClcbiAgICAgICAgICBjb250ZXh0W2tleU5hbWVdLmNhbGwodGhpcywgZXZlbnQpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGtleUV2ZW50SXNLZXlib2FyZENvbW1hbmQoZXZlbnQpKSB7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZXZlbnQua2V5Q29kZSkudG9Mb3dlckNhc2UoKVxuICAgICAgICBpZiAoY2hhcmFjdGVyKSB7XG4gICAgICAgICAgY29uc3Qga2V5cyA9IFsgXCJhbHRcIiwgXCJzaGlmdFwiIF0ubWFwKChtb2RpZmllcikgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50W2Ake21vZGlmaWVyfUtleWBdKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtb2RpZmllclxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLmZpbHRlcihrZXkgPT4ga2V5KVxuICAgICAgICAgIGtleXMucHVzaChjaGFyYWN0ZXIpXG4gICAgICAgICAgaWYgKHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZFJlY2VpdmVLZXlib2FyZENvbW1hbmQoa2V5cykpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAga2V5cHJlc3MoZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLmlucHV0U3VtbWFyeS5ldmVudE5hbWUgIT0gbnVsbCkgcmV0dXJuXG4gICAgICBpZiAoZXZlbnQubWV0YUtleSkgcmV0dXJuXG4gICAgICBpZiAoZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYWx0S2V5KSByZXR1cm5cblxuICAgICAgY29uc3Qgc3RyaW5nID0gc3RyaW5nRnJvbUtleUV2ZW50KGV2ZW50KVxuICAgICAgaWYgKHN0cmluZykge1xuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRTdHJpbmcoc3RyaW5nKVxuICAgICAgICByZXR1cm4gdGhpcy5zZXRJbnB1dFN1bW1hcnkoeyB0ZXh0QWRkZWQ6IHN0cmluZywgZGlkRGVsZXRlOiB0aGlzLnNlbGVjdGlvbklzRXhwYW5kZWQoKSB9KVxuICAgICAgfVxuICAgIH0sXG5cbiAgICB0ZXh0SW5wdXQoZXZlbnQpIHtcbiAgICAgIC8vIEhhbmRsZSBhdXRvY2FwaXRhbGl6YXRpb25cbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gZXZlbnRcbiAgICAgIGNvbnN0IHsgdGV4dEFkZGVkIH0gPSB0aGlzLmlucHV0U3VtbWFyeVxuICAgICAgaWYgKHRleHRBZGRlZCAmJiB0ZXh0QWRkZWQgIT09IGRhdGEgJiYgdGV4dEFkZGVkLnRvVXBwZXJDYXNlKCkgPT09IGRhdGEpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKVxuICAgICAgICB0aGlzLnNldFNlbGVjdGVkUmFuZ2UoWyByYW5nZVswXSwgcmFuZ2VbMV0gKyB0ZXh0QWRkZWQubGVuZ3RoIF0pXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRTdHJpbmcoZGF0YSlcbiAgICAgICAgdGhpcy5zZXRJbnB1dFN1bW1hcnkoeyB0ZXh0QWRkZWQ6IGRhdGEgfSlcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0U2VsZWN0ZWRSYW5nZShyYW5nZSlcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZHJhZ2VudGVyKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfSxcblxuICAgIGRyYWdzdGFydChldmVudCkge1xuICAgICAgdGhpcy5zZXJpYWxpemVTZWxlY3Rpb25Ub0RhdGFUcmFuc2ZlcihldmVudC5kYXRhVHJhbnNmZXIpXG4gICAgICB0aGlzLmRyYWdnZWRSYW5nZSA9IHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpXG4gICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkU3RhcnREcmFnPy4oKVxuICAgIH0sXG5cbiAgICBkcmFnb3ZlcihldmVudCkge1xuICAgICAgaWYgKHRoaXMuZHJhZ2dlZFJhbmdlIHx8IHRoaXMuY2FuQWNjZXB0RGF0YVRyYW5zZmVyKGV2ZW50LmRhdGFUcmFuc2ZlcikpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICBjb25zdCBkcmFnZ2luZ1BvaW50ID0geyB4OiBldmVudC5jbGllbnRYLCB5OiBldmVudC5jbGllbnRZIH1cbiAgICAgICAgaWYgKCFvYmplY3RzQXJlRXF1YWwoZHJhZ2dpbmdQb2ludCwgdGhpcy5kcmFnZ2luZ1BvaW50KSkge1xuICAgICAgICAgIHRoaXMuZHJhZ2dpbmdQb2ludCA9IGRyYWdnaW5nUG9pbnRcbiAgICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkUmVjZWl2ZURyYWdPdmVyUG9pbnQ/Lih0aGlzLmRyYWdnaW5nUG9pbnQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZHJhZ2VuZChldmVudCkge1xuICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkQ2FuY2VsRHJhZz8uKClcbiAgICAgIHRoaXMuZHJhZ2dlZFJhbmdlID0gbnVsbFxuICAgICAgdGhpcy5kcmFnZ2luZ1BvaW50ID0gbnVsbFxuICAgIH0sXG5cbiAgICBkcm9wKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBjb25zdCBmaWxlcyA9IGV2ZW50LmRhdGFUcmFuc2Zlcj8uZmlsZXNcbiAgICAgIGNvbnN0IGRvY3VtZW50SlNPTiA9IGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwiYXBwbGljYXRpb24veC10cml4LWRvY3VtZW50XCIpXG5cbiAgICAgIGNvbnN0IHBvaW50ID0geyB4OiBldmVudC5jbGllbnRYLCB5OiBldmVudC5jbGllbnRZIH1cbiAgICAgIHRoaXMucmVzcG9uZGVyPy5zZXRMb2NhdGlvblJhbmdlRnJvbVBvaW50UmFuZ2UocG9pbnQpXG5cbiAgICAgIGlmIChmaWxlcz8ubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYXR0YWNoRmlsZXMoZmlsZXMpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZHJhZ2dlZFJhbmdlKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxNb3ZlVGV4dCgpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5tb3ZlVGV4dEZyb21SYW5nZSh0aGlzLmRyYWdnZWRSYW5nZSlcbiAgICAgICAgdGhpcy5kcmFnZ2VkUmFuZ2UgPSBudWxsXG4gICAgICAgIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICB9IGVsc2UgaWYgKGRvY3VtZW50SlNPTikge1xuICAgICAgICBjb25zdCBkb2N1bWVudCA9IERvY3VtZW50LmZyb21KU09OU3RyaW5nKGRvY3VtZW50SlNPTilcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/Lmluc2VydERvY3VtZW50KGRvY3VtZW50KVxuICAgICAgICB0aGlzLnJlcXVlc3RSZW5kZXIoKVxuICAgICAgfVxuXG4gICAgICB0aGlzLmRyYWdnZWRSYW5nZSA9IG51bGxcbiAgICAgIHRoaXMuZHJhZ2dpbmdQb2ludCA9IG51bGxcbiAgICB9LFxuXG4gICAgY3V0KGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5yZXNwb25kZXI/LnNlbGVjdGlvbklzRXhwYW5kZWQoKSkge1xuICAgICAgICBpZiAodGhpcy5zZXJpYWxpemVTZWxlY3Rpb25Ub0RhdGFUcmFuc2ZlcihldmVudC5jbGlwYm9hcmREYXRhKSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxDdXRUZXh0KClcbiAgICAgICAgdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpXG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY29weShldmVudCkge1xuICAgICAgaWYgKHRoaXMucmVzcG9uZGVyPy5zZWxlY3Rpb25Jc0V4cGFuZGVkKCkpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VyaWFsaXplU2VsZWN0aW9uVG9EYXRhVHJhbnNmZXIoZXZlbnQuY2xpcGJvYXJkRGF0YSkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcGFzdGUoZXZlbnQpIHtcbiAgICAgIGNvbnN0IGNsaXBib2FyZCA9IGV2ZW50LmNsaXBib2FyZERhdGEgfHwgZXZlbnQudGVzdENsaXBib2FyZERhdGFcbiAgICAgIGNvbnN0IHBhc3RlID0geyBjbGlwYm9hcmQgfVxuXG4gICAgICBpZiAoIWNsaXBib2FyZCB8fCBwYXN0ZUV2ZW50SXNDcmlwcGxlZFNhZmFyaUhUTUxQYXN0ZShldmVudCkpIHtcbiAgICAgICAgdGhpcy5nZXRQYXN0ZWRIVE1MVXNpbmdIaWRkZW5FbGVtZW50KChodG1sKSA9PiB7XG4gICAgICAgICAgcGFzdGUudHlwZSA9IFwidGV4dC9odG1sXCJcbiAgICAgICAgICBwYXN0ZS5odG1sID0gaHRtbFxuICAgICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQYXN0ZShwYXN0ZSlcbiAgICAgICAgICB0aGlzLnJlc3BvbmRlcj8uaW5zZXJ0SFRNTChwYXN0ZS5odG1sKVxuICAgICAgICAgIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZFBhc3RlKHBhc3RlKVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgaHJlZiA9IGNsaXBib2FyZC5nZXREYXRhKFwiVVJMXCIpXG4gICAgICBjb25zdCBodG1sID0gY2xpcGJvYXJkLmdldERhdGEoXCJ0ZXh0L2h0bWxcIilcbiAgICAgIGNvbnN0IG5hbWUgPSBjbGlwYm9hcmQuZ2V0RGF0YShcInB1YmxpYy51cmwtbmFtZVwiKVxuXG4gICAgICBpZiAoaHJlZikge1xuICAgICAgICBsZXQgc3RyaW5nXG4gICAgICAgIHBhc3RlLnR5cGUgPSBcInRleHQvaHRtbFwiXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgc3RyaW5nID0gc3F1aXNoQnJlYWthYmxlV2hpdGVzcGFjZShuYW1lKS50cmltKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJpbmcgPSBocmVmXG4gICAgICAgIH1cbiAgICAgICAgcGFzdGUuaHRtbCA9IHRoaXMuY3JlYXRlTGlua0hUTUwoaHJlZiwgc3RyaW5nKVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGFzdGUocGFzdGUpXG4gICAgICAgIHRoaXMuc2V0SW5wdXRTdW1tYXJ5KHsgdGV4dEFkZGVkOiBzdHJpbmcsIGRpZERlbGV0ZTogdGhpcy5zZWxlY3Rpb25Jc0V4cGFuZGVkKCkgfSlcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/Lmluc2VydEhUTUwocGFzdGUuaHRtbClcbiAgICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyKClcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkUGFzdGUocGFzdGUpXG4gICAgICB9IGVsc2UgaWYgKGRhdGFUcmFuc2ZlcklzUGxhaW5UZXh0KGNsaXBib2FyZCkpIHtcbiAgICAgICAgcGFzdGUudHlwZSA9IFwidGV4dC9wbGFpblwiXG4gICAgICAgIHBhc3RlLnN0cmluZyA9IGNsaXBib2FyZC5nZXREYXRhKFwidGV4dC9wbGFpblwiKVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGFzdGUocGFzdGUpXG4gICAgICAgIHRoaXMuc2V0SW5wdXRTdW1tYXJ5KHsgdGV4dEFkZGVkOiBwYXN0ZS5zdHJpbmcsIGRpZERlbGV0ZTogdGhpcy5zZWxlY3Rpb25Jc0V4cGFuZGVkKCkgfSlcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/Lmluc2VydFN0cmluZyhwYXN0ZS5zdHJpbmcpXG4gICAgICAgIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZFBhc3RlKHBhc3RlKVxuICAgICAgfSBlbHNlIGlmIChodG1sKSB7XG4gICAgICAgIHBhc3RlLnR5cGUgPSBcInRleHQvaHRtbFwiXG4gICAgICAgIHBhc3RlLmh0bWwgPSBodG1sXG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQYXN0ZShwYXN0ZSlcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/Lmluc2VydEhUTUwocGFzdGUuaHRtbClcbiAgICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyKClcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkUGFzdGUocGFzdGUpXG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmZyb20oY2xpcGJvYXJkLnR5cGVzKS5pbmNsdWRlcyhcIkZpbGVzXCIpKSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBjbGlwYm9hcmQuaXRlbXM/LlswXT8uZ2V0QXNGaWxlPy4oKVxuICAgICAgICBpZiAoZmlsZSkge1xuICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbkZvckZpbGUoZmlsZSlcbiAgICAgICAgICBpZiAoIWZpbGUubmFtZSAmJiBleHRlbnNpb24pIHtcbiAgICAgICAgICAgIGZpbGUubmFtZSA9IGBwYXN0ZWQtZmlsZS0keysrcGFzdGVkRmlsZUNvdW50fS4ke2V4dGVuc2lvbn1gXG4gICAgICAgICAgfVxuICAgICAgICAgIHBhc3RlLnR5cGUgPSBcIkZpbGVcIlxuICAgICAgICAgIHBhc3RlLmZpbGUgPSBmaWxlXG4gICAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyV2lsbEF0dGFjaEZpbGVzKClcbiAgICAgICAgICB0aGlzLnJlc3BvbmRlcj8uaW5zZXJ0RmlsZShwYXN0ZS5maWxlKVxuICAgICAgICAgIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkUGFzdGUocGFzdGUpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIH0sXG5cbiAgICBjb21wb3NpdGlvbnN0YXJ0KGV2ZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRDb21wb3NpdGlvbklucHV0KCkuc3RhcnQoZXZlbnQuZGF0YSlcbiAgICB9LFxuXG4gICAgY29tcG9zaXRpb251cGRhdGUoZXZlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldENvbXBvc2l0aW9uSW5wdXQoKS51cGRhdGUoZXZlbnQuZGF0YSlcbiAgICB9LFxuXG4gICAgY29tcG9zaXRpb25lbmQoZXZlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldENvbXBvc2l0aW9uSW5wdXQoKS5lbmQoZXZlbnQuZGF0YSlcbiAgICB9LFxuXG4gICAgYmVmb3JlaW5wdXQoZXZlbnQpIHtcbiAgICAgIHRoaXMuaW5wdXRTdW1tYXJ5LmRpZElucHV0ID0gdHJ1ZVxuICAgIH0sXG5cbiAgICBpbnB1dChldmVudCkge1xuICAgICAgdGhpcy5pbnB1dFN1bW1hcnkuZGlkSW5wdXQgPSB0cnVlXG4gICAgICByZXR1cm4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICB9LFxuICB9XG5cbiAgc3RhdGljIGtleXMgPSB7XG4gICAgYmFja3NwYWNlKGV2ZW50KSB7XG4gICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIsIGV2ZW50KVxuICAgIH0sXG5cbiAgICBkZWxldGUoZXZlbnQpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtVHlwaW5nKClcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUluRGlyZWN0aW9uKFwiZm9yd2FyZFwiLCBldmVudClcbiAgICB9LFxuXG4gICAgcmV0dXJuKGV2ZW50KSB7XG4gICAgICB0aGlzLnNldElucHV0U3VtbWFyeSh7IHByZWZlckRvY3VtZW50OiB0cnVlIH0pXG4gICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICByZXR1cm4gdGhpcy5yZXNwb25kZXI/Lmluc2VydExpbmVCcmVhaygpXG4gICAgfSxcblxuICAgIHRhYihldmVudCkge1xuICAgICAgaWYgKHRoaXMucmVzcG9uZGVyPy5jYW5JbmNyZWFzZU5lc3RpbmdMZXZlbCgpKSB7XG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbmNyZWFzZU5lc3RpbmdMZXZlbCgpXG4gICAgICAgIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbGVmdChldmVudCkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uSXNJbkN1cnNvclRhcmdldCgpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5tb3ZlQ3Vyc29ySW5EaXJlY3Rpb24oXCJiYWNrd2FyZFwiKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICByaWdodChldmVudCkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uSXNJbkN1cnNvclRhcmdldCgpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5tb3ZlQ3Vyc29ySW5EaXJlY3Rpb24oXCJmb3J3YXJkXCIpXG4gICAgICB9XG4gICAgfSxcblxuICAgIGNvbnRyb2w6IHtcbiAgICAgIGQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyV2lsbFBlcmZvcm1UeXBpbmcoKVxuICAgICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImZvcndhcmRcIiwgZXZlbnQpXG4gICAgICB9LFxuXG4gICAgICBoKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtVHlwaW5nKClcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlSW5EaXJlY3Rpb24oXCJiYWNrd2FyZFwiLCBldmVudClcbiAgICAgIH0sXG5cbiAgICAgIG8oZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRTdHJpbmcoXCJcXG5cIiwgeyB1cGRhdGVQb3NpdGlvbjogZmFsc2UgfSlcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdFJlbmRlcigpXG4gICAgICB9LFxuICAgIH0sXG5cbiAgICBzaGlmdDoge1xuICAgICAgcmV0dXJuKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtVHlwaW5nKClcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/Lmluc2VydFN0cmluZyhcIlxcblwiKVxuICAgICAgICB0aGlzLnJlcXVlc3RSZW5kZXIoKVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB9LFxuXG4gICAgICB0YWIoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMucmVzcG9uZGVyPy5jYW5EZWNyZWFzZU5lc3RpbmdMZXZlbCgpKSB7XG4gICAgICAgICAgdGhpcy5yZXNwb25kZXI/LmRlY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgICAgICAgICB0aGlzLnJlcXVlc3RSZW5kZXIoKVxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgbGVmdChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25Jc0luQ3Vyc29yVGFyZ2V0KCkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXhwYW5kU2VsZWN0aW9uSW5EaXJlY3Rpb24oXCJiYWNrd2FyZFwiKVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICByaWdodChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25Jc0luQ3Vyc29yVGFyZ2V0KCkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXhwYW5kU2VsZWN0aW9uSW5EaXJlY3Rpb24oXCJmb3J3YXJkXCIpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcblxuICAgIGFsdDoge1xuICAgICAgYmFja3NwYWNlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuc2V0SW5wdXRTdW1tYXJ5KHsgcHJlZmVyRG9jdW1lbnQ6IGZhbHNlIH0pXG4gICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICB9LFxuICAgIH0sXG5cbiAgICBtZXRhOiB7XG4gICAgICBiYWNrc3BhY2UoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5zZXRJbnB1dFN1bW1hcnkoeyBwcmVmZXJEb2N1bWVudDogZmFsc2UgfSlcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtVHlwaW5nKClcbiAgICAgIH0sXG4gICAgfSxcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLnJlc2V0SW5wdXRTdW1tYXJ5KClcbiAgfVxuXG4gIHNldElucHV0U3VtbWFyeShzdW1tYXJ5ID0ge30pIHtcbiAgICB0aGlzLmlucHV0U3VtbWFyeS5ldmVudE5hbWUgPSB0aGlzLmV2ZW50TmFtZVxuICAgIGZvciAoY29uc3Qga2V5IGluIHN1bW1hcnkpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gc3VtbWFyeVtrZXldXG4gICAgICB0aGlzLmlucHV0U3VtbWFyeVtrZXldID0gdmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRTdW1tYXJ5XG4gIH1cblxuICByZXNldElucHV0U3VtbWFyeSgpIHtcbiAgICB0aGlzLmlucHV0U3VtbWFyeSA9IHt9XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnJlc2V0SW5wdXRTdW1tYXJ5KClcbiAgICByZXR1cm4gc2VsZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIucmVzZXQoKVxuICB9XG5cbiAgLy8gTXV0YXRpb24gb2JzZXJ2ZXIgZGVsZWdhdGVcblxuICBlbGVtZW50RGlkTXV0YXRlKG11dGF0aW9uU3VtbWFyeSkge1xuICAgIGlmICh0aGlzLmlzQ29tcG9zaW5nKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJEaWRBbGxvd1VuaGFuZGxlZElucHV0Py4oKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVJbnB1dChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMubXV0YXRpb25Jc1NpZ25pZmljYW50KG11dGF0aW9uU3VtbWFyeSkpIHtcbiAgICAgICAgICBpZiAodGhpcy5tdXRhdGlvbklzRXhwZWN0ZWQobXV0YXRpb25TdW1tYXJ5KSkge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyKClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UmVwYXJzZSgpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlc2V0KClcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgbXV0YXRpb25Jc0V4cGVjdGVkKHsgdGV4dEFkZGVkLCB0ZXh0RGVsZXRlZCB9KSB7XG4gICAgaWYgKHRoaXMuaW5wdXRTdW1tYXJ5LnByZWZlckRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IG11dGF0aW9uQWRkaXRpb25NYXRjaGVzU3VtbWFyeSA9XG4gICAgICB0ZXh0QWRkZWQgIT0gbnVsbCA/IHRleHRBZGRlZCA9PT0gdGhpcy5pbnB1dFN1bW1hcnkudGV4dEFkZGVkIDogIXRoaXMuaW5wdXRTdW1tYXJ5LnRleHRBZGRlZFxuICAgIGNvbnN0IG11dGF0aW9uRGVsZXRpb25NYXRjaGVzU3VtbWFyeSA9XG4gICAgICB0ZXh0RGVsZXRlZCAhPSBudWxsID8gdGhpcy5pbnB1dFN1bW1hcnkuZGlkRGVsZXRlIDogIXRoaXMuaW5wdXRTdW1tYXJ5LmRpZERlbGV0ZVxuXG4gICAgY29uc3QgdW5leHBlY3RlZE5ld2xpbmVBZGRpdGlvbiA9IFsgXCJcXG5cIiwgXCIgXFxuXCIgXS5pbmNsdWRlcyh0ZXh0QWRkZWQpICYmICFtdXRhdGlvbkFkZGl0aW9uTWF0Y2hlc1N1bW1hcnlcbiAgICBjb25zdCB1bmV4cGVjdGVkTmV3bGluZURlbGV0aW9uID0gdGV4dERlbGV0ZWQgPT09IFwiXFxuXCIgJiYgIW11dGF0aW9uRGVsZXRpb25NYXRjaGVzU3VtbWFyeVxuICAgIGNvbnN0IHNpbmdsZVVuZXhwZWN0ZWROZXdsaW5lID1cbiAgICAgIHVuZXhwZWN0ZWROZXdsaW5lQWRkaXRpb24gJiYgIXVuZXhwZWN0ZWROZXdsaW5lRGVsZXRpb24gfHxcbiAgICAgIHVuZXhwZWN0ZWROZXdsaW5lRGVsZXRpb24gJiYgIXVuZXhwZWN0ZWROZXdsaW5lQWRkaXRpb25cblxuICAgIGlmIChzaW5nbGVVbmV4cGVjdGVkTmV3bGluZSkge1xuICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFNlbGVjdGVkUmFuZ2UoKVxuICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHVuZXhwZWN0ZWROZXdsaW5lQWRkaXRpb24gPyB0ZXh0QWRkZWQucmVwbGFjZSgvXFxuJC8sIFwiXCIpLmxlbmd0aCB8fCAtMSA6IHRleHRBZGRlZD8ubGVuZ3RoIHx8IDFcbiAgICAgICAgaWYgKHRoaXMucmVzcG9uZGVyPy5wb3NpdGlvbklzQmxvY2tCcmVhayhyYW5nZVsxXSArIG9mZnNldCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG11dGF0aW9uQWRkaXRpb25NYXRjaGVzU3VtbWFyeSAmJiBtdXRhdGlvbkRlbGV0aW9uTWF0Y2hlc1N1bW1hcnlcbiAgfVxuXG4gIG11dGF0aW9uSXNTaWduaWZpY2FudChtdXRhdGlvblN1bW1hcnkpIHtcbiAgICBjb25zdCB0ZXh0Q2hhbmdlZCA9IE9iamVjdC5rZXlzKG11dGF0aW9uU3VtbWFyeSkubGVuZ3RoID4gMFxuICAgIGNvbnN0IGNvbXBvc2VkRW1wdHlTdHJpbmcgPSB0aGlzLmNvbXBvc2l0aW9uSW5wdXQ/LmdldEVuZERhdGEoKSA9PT0gXCJcIlxuICAgIHJldHVybiB0ZXh0Q2hhbmdlZCB8fCAhY29tcG9zZWRFbXB0eVN0cmluZ1xuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIGdldENvbXBvc2l0aW9uSW5wdXQoKSB7XG4gICAgaWYgKHRoaXMuaXNDb21wb3NpbmcoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb25JbnB1dFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbXBvc2l0aW9uSW5wdXQgPSBuZXcgQ29tcG9zaXRpb25JbnB1dCh0aGlzKVxuICAgIH1cbiAgfVxuXG4gIGlzQ29tcG9zaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uSW5wdXQgJiYgIXRoaXMuY29tcG9zaXRpb25JbnB1dC5pc0VuZGVkKClcbiAgfVxuXG4gIGRlbGV0ZUluRGlyZWN0aW9uKGRpcmVjdGlvbiwgZXZlbnQpIHtcbiAgICBpZiAodGhpcy5yZXNwb25kZXI/LmRlbGV0ZUluRGlyZWN0aW9uKGRpcmVjdGlvbikgPT09IGZhbHNlKSB7XG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0UmVuZGVyKClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0SW5wdXRTdW1tYXJ5KHsgZGlkRGVsZXRlOiB0cnVlIH0pXG4gICAgfVxuICB9XG5cbiAgc2VyaWFsaXplU2VsZWN0aW9uVG9EYXRhVHJhbnNmZXIoZGF0YVRyYW5zZmVyKSB7XG4gICAgaWYgKCFkYXRhVHJhbnNmZXJJc1dyaXRhYmxlKGRhdGFUcmFuc2ZlcikpIHJldHVyblxuICAgIGNvbnN0IGRvY3VtZW50ID0gdGhpcy5yZXNwb25kZXI/LmdldFNlbGVjdGVkRG9jdW1lbnQoKS50b1NlcmlhbGl6YWJsZURvY3VtZW50KClcblxuICAgIGRhdGFUcmFuc2Zlci5zZXREYXRhKFwiYXBwbGljYXRpb24veC10cml4LWRvY3VtZW50XCIsIEpTT04uc3RyaW5naWZ5KGRvY3VtZW50KSlcbiAgICBkYXRhVHJhbnNmZXIuc2V0RGF0YShcInRleHQvaHRtbFwiLCBEb2N1bWVudFZpZXcucmVuZGVyKGRvY3VtZW50KS5pbm5lckhUTUwpXG4gICAgZGF0YVRyYW5zZmVyLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIGRvY3VtZW50LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxuJC8sIFwiXCIpKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBjYW5BY2NlcHREYXRhVHJhbnNmZXIoZGF0YVRyYW5zZmVyKSB7XG4gICAgY29uc3QgdHlwZXMgPSB7fVxuICAgIEFycmF5LmZyb20oZGF0YVRyYW5zZmVyPy50eXBlcyB8fCBbXSkuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgdHlwZXNbdHlwZV0gPSB0cnVlXG4gICAgfSlcbiAgICByZXR1cm4gdHlwZXMuRmlsZXMgfHwgdHlwZXNbXCJhcHBsaWNhdGlvbi94LXRyaXgtZG9jdW1lbnRcIl0gfHwgdHlwZXNbXCJ0ZXh0L2h0bWxcIl0gfHwgdHlwZXNbXCJ0ZXh0L3BsYWluXCJdXG4gIH1cblxuICBnZXRQYXN0ZWRIVE1MVXNpbmdIaWRkZW5FbGVtZW50KGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRSYW5nZSA9IHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZSgpXG5cbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICBsZWZ0OiBgJHt3aW5kb3cucGFnZVhPZmZzZXR9cHhgLFxuICAgICAgdG9wOiBgJHt3aW5kb3cucGFnZVlPZmZzZXR9cHhgLFxuICAgICAgb3BhY2l0eTogMCxcbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50ID0gbWFrZUVsZW1lbnQoeyBzdHlsZSwgdGFnTmFtZTogXCJkaXZcIiwgZWRpdGFibGU6IHRydWUgfSlcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpXG4gICAgZWxlbWVudC5mb2N1cygpXG5cbiAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGNvbnN0IGh0bWwgPSBlbGVtZW50LmlubmVySFRNTFxuICAgICAgcmVtb3ZlTm9kZShlbGVtZW50KVxuICAgICAgdGhpcy5zZXRTZWxlY3RlZFJhbmdlKHNlbGVjdGVkUmFuZ2UpXG4gICAgICByZXR1cm4gY2FsbGJhY2soaHRtbClcbiAgICB9KVxuICB9XG59XG5cbkxldmVsMElucHV0Q29udHJvbGxlci5wcm94eU1ldGhvZChcInJlc3BvbmRlcj8uZ2V0U2VsZWN0ZWRSYW5nZVwiKVxuTGV2ZWwwSW5wdXRDb250cm9sbGVyLnByb3h5TWV0aG9kKFwicmVzcG9uZGVyPy5zZXRTZWxlY3RlZFJhbmdlXCIpXG5MZXZlbDBJbnB1dENvbnRyb2xsZXIucHJveHlNZXRob2QoXCJyZXNwb25kZXI/LmV4cGFuZFNlbGVjdGlvbkluRGlyZWN0aW9uXCIpXG5MZXZlbDBJbnB1dENvbnRyb2xsZXIucHJveHlNZXRob2QoXCJyZXNwb25kZXI/LnNlbGVjdGlvbklzSW5DdXJzb3JUYXJnZXRcIilcbkxldmVsMElucHV0Q29udHJvbGxlci5wcm94eU1ldGhvZChcInJlc3BvbmRlcj8uc2VsZWN0aW9uSXNFeHBhbmRlZFwiKVxuXG5jb25zdCBleHRlbnNpb25Gb3JGaWxlID0gKGZpbGUpID0+IGZpbGUudHlwZT8ubWF0Y2goL1xcLyhcXHcrKSQvKT8uWzFdXG5cbmNvbnN0IGhhc1N0cmluZ0NvZGVQb2ludEF0ID0gISFcIiBcIi5jb2RlUG9pbnRBdD8uKDApXG5cbmNvbnN0IHN0cmluZ0Zyb21LZXlFdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmIChldmVudC5rZXkgJiYgaGFzU3RyaW5nQ29kZVBvaW50QXQgJiYgZXZlbnQua2V5LmNvZGVQb2ludEF0KDApID09PSBldmVudC5rZXlDb2RlKSB7XG4gICAgcmV0dXJuIGV2ZW50LmtleVxuICB9IGVsc2Uge1xuICAgIGxldCBjb2RlXG4gICAgaWYgKGV2ZW50LndoaWNoID09PSBudWxsKSB7XG4gICAgICBjb2RlID0gZXZlbnQua2V5Q29kZVxuICAgIH0gZWxzZSBpZiAoZXZlbnQud2hpY2ggIT09IDAgJiYgZXZlbnQuY2hhckNvZGUgIT09IDApIHtcbiAgICAgIGNvZGUgPSBldmVudC5jaGFyQ29kZVxuICAgIH1cblxuICAgIGlmIChjb2RlICE9IG51bGwgJiYga2V5TmFtZXNbY29kZV0gIT09IFwiZXNjYXBlXCIpIHtcbiAgICAgIHJldHVybiBVVEYxNlN0cmluZy5mcm9tQ29kZXBvaW50cyhbIGNvZGUgXSkudG9TdHJpbmcoKVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBwYXN0ZUV2ZW50SXNDcmlwcGxlZFNhZmFyaUhUTUxQYXN0ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGNvbnN0IHBhc3RlID0gZXZlbnQuY2xpcGJvYXJkRGF0YVxuICBpZiAocGFzdGUpIHtcbiAgICBpZiAocGFzdGUudHlwZXMuaW5jbHVkZXMoXCJ0ZXh0L2h0bWxcIikpIHtcbiAgICAgIC8vIEFuc3dlciBpcyB5ZXMgaWYgdGhlcmUncyBhbnkgcG9zc2liaWxpdHkgb2YgUGFzdGUgYW5kIE1hdGNoIFN0eWxlIGluIFNhZmFyaSxcbiAgICAgIC8vIHdoaWNoIGlzIG5lYXJseSBpbXBvc3NpYmxlIHRvIGRldGVjdCBjb25maWRlbnRseTogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE3NDE2NVxuICAgICAgZm9yIChjb25zdCB0eXBlIG9mIHBhc3RlLnR5cGVzKSB7XG4gICAgICAgIGNvbnN0IGhhc1Bhc3RlYm9hcmRGbGF2b3IgPSAvXkNvcmVQYXN0ZWJvYXJkRmxhdm9yVHlwZS8udGVzdCh0eXBlKVxuICAgICAgICBjb25zdCBoYXNSZWFkYWJsZUR5bmFtaWNEYXRhID0gL15keW5cXC4vLnRlc3QodHlwZSkgJiYgcGFzdGUuZ2V0RGF0YSh0eXBlKVxuICAgICAgICBjb25zdCBtaWdodEJlUGFzdGVBbmRNYXRjaFN0eWxlID0gaGFzUGFzdGVib2FyZEZsYXZvciB8fCBoYXNSZWFkYWJsZUR5bmFtaWNEYXRhXG4gICAgICAgIGlmIChtaWdodEJlUGFzdGVBbmRNYXRjaFN0eWxlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGlzRXh0ZXJuYWxIVE1MUGFzdGUgPSBwYXN0ZS50eXBlcy5pbmNsdWRlcyhcImNvbS5hcHBsZS53ZWJhcmNoaXZlXCIpXG4gICAgICBjb25zdCBpc0V4dGVybmFsUmljaFRleHRQYXN0ZSA9IHBhc3RlLnR5cGVzLmluY2x1ZGVzKFwiY29tLmFwcGxlLmZsYXQtcnRmZFwiKVxuICAgICAgcmV0dXJuIGlzRXh0ZXJuYWxIVE1MUGFzdGUgfHwgaXNFeHRlcm5hbFJpY2hUZXh0UGFzdGVcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgQ29tcG9zaXRpb25JbnB1dCBleHRlbmRzIEJhc2ljT2JqZWN0IHtcbiAgY29uc3RydWN0b3IoaW5wdXRDb250cm9sbGVyKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICAgIHRoaXMuaW5wdXRDb250cm9sbGVyID0gaW5wdXRDb250cm9sbGVyXG4gICAgdGhpcy5yZXNwb25kZXIgPSB0aGlzLmlucHV0Q29udHJvbGxlci5yZXNwb25kZXJcbiAgICB0aGlzLmRlbGVnYXRlID0gdGhpcy5pbnB1dENvbnRyb2xsZXIuZGVsZWdhdGVcbiAgICB0aGlzLmlucHV0U3VtbWFyeSA9IHRoaXMuaW5wdXRDb250cm9sbGVyLmlucHV0U3VtbWFyeVxuICAgIHRoaXMuZGF0YSA9IHt9XG4gIH1cblxuICBzdGFydChkYXRhKSB7XG4gICAgdGhpcy5kYXRhLnN0YXJ0ID0gZGF0YVxuXG4gICAgaWYgKHRoaXMuaXNTaWduaWZpY2FudCgpKSB7XG4gICAgICBpZiAodGhpcy5pbnB1dFN1bW1hcnkuZXZlbnROYW1lID09PSBcImtleXByZXNzXCIgJiYgdGhpcy5pbnB1dFN1bW1hcnkudGV4dEFkZGVkKSB7XG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5kZWxldGVJbkRpcmVjdGlvbihcImxlZnRcIilcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbklzRXhwYW5kZWQoKSkge1xuICAgICAgICB0aGlzLmluc2VydFBsYWNlaG9sZGVyKClcbiAgICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyKClcbiAgICAgIH1cblxuICAgICAgdGhpcy5yYW5nZSA9IHRoaXMucmVzcG9uZGVyPy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICB9XG4gIH1cblxuICB1cGRhdGUoZGF0YSkge1xuICAgIHRoaXMuZGF0YS51cGRhdGUgPSBkYXRhXG5cbiAgICBpZiAodGhpcy5pc1NpZ25pZmljYW50KCkpIHtcbiAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5zZWxlY3RQbGFjZWhvbGRlcigpXG4gICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgdGhpcy5mb3JnZXRQbGFjZWhvbGRlcigpXG4gICAgICAgIHRoaXMucmFuZ2UgPSByYW5nZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVuZChkYXRhKSB7XG4gICAgdGhpcy5kYXRhLmVuZCA9IGRhdGFcblxuICAgIGlmICh0aGlzLmlzU2lnbmlmaWNhbnQoKSkge1xuICAgICAgdGhpcy5mb3JnZXRQbGFjZWhvbGRlcigpXG5cbiAgICAgIGlmICh0aGlzLmNhbkFwcGx5VG9Eb2N1bWVudCgpKSB7XG4gICAgICAgIHRoaXMuc2V0SW5wdXRTdW1tYXJ5KHsgcHJlZmVyRG9jdW1lbnQ6IHRydWUsIGRpZElucHV0OiBmYWxzZSB9KVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5zZXRTZWxlY3RlZFJhbmdlKHRoaXMucmFuZ2UpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRTdHJpbmcodGhpcy5kYXRhLmVuZClcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5zZXRTZWxlY3RlZFJhbmdlKHRoaXMucmFuZ2VbMF0gKyB0aGlzLmRhdGEuZW5kLmxlbmd0aClcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLnN0YXJ0ICE9IG51bGwgfHwgdGhpcy5kYXRhLnVwZGF0ZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdFJlcGFyc2UoKVxuICAgICAgICByZXR1cm4gdGhpcy5pbnB1dENvbnRyb2xsZXIucmVzZXQoKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnB1dENvbnRyb2xsZXIucmVzZXQoKVxuICAgIH1cbiAgfVxuXG4gIGdldEVuZERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5lbmRcbiAgfVxuXG4gIGlzRW5kZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW5kRGF0YSgpICE9IG51bGxcbiAgfVxuXG4gIGlzU2lnbmlmaWNhbnQoKSB7XG4gICAgaWYgKGJyb3dzZXIuY29tcG9zZXNFeGlzdGluZ1RleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmlucHV0U3VtbWFyeS5kaWRJbnB1dFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBjYW5BcHBseVRvRG9jdW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5zdGFydD8ubGVuZ3RoID09PSAwICYmIHRoaXMuZGF0YS5lbmQ/Lmxlbmd0aCA+IDAgJiYgdGhpcy5yYW5nZVxuICB9XG59XG5cbkNvbXBvc2l0aW9uSW5wdXQucHJveHlNZXRob2QoXCJpbnB1dENvbnRyb2xsZXIuc2V0SW5wdXRTdW1tYXJ5XCIpXG5Db21wb3NpdGlvbklucHV0LnByb3h5TWV0aG9kKFwiaW5wdXRDb250cm9sbGVyLnJlcXVlc3RSZW5kZXJcIilcbkNvbXBvc2l0aW9uSW5wdXQucHJveHlNZXRob2QoXCJpbnB1dENvbnRyb2xsZXIucmVxdWVzdFJlcGFyc2VcIilcbkNvbXBvc2l0aW9uSW5wdXQucHJveHlNZXRob2QoXCJyZXNwb25kZXI/LnNlbGVjdGlvbklzRXhwYW5kZWRcIilcbkNvbXBvc2l0aW9uSW5wdXQucHJveHlNZXRob2QoXCJyZXNwb25kZXI/Lmluc2VydFBsYWNlaG9sZGVyXCIpXG5Db21wb3NpdGlvbklucHV0LnByb3h5TWV0aG9kKFwicmVzcG9uZGVyPy5zZWxlY3RQbGFjZWhvbGRlclwiKVxuQ29tcG9zaXRpb25JbnB1dC5wcm94eU1ldGhvZChcInJlc3BvbmRlcj8uZm9yZ2V0UGxhY2Vob2xkZXJcIilcbiIsICJpbXBvcnQgeyBnZXRBbGxBdHRyaWJ1dGVOYW1lcywgc2hvdWxkUmVuZGVySW5tbWVkaWF0ZWx5VG9EZWFsV2l0aElPU0RpY3RhdGlvbiwgc3F1aXNoQnJlYWthYmxlV2hpdGVzcGFjZSB9IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5pbXBvcnQgSW5wdXRDb250cm9sbGVyIGZyb20gXCJ0cml4L2NvbnRyb2xsZXJzL2lucHV0X2NvbnRyb2xsZXJcIlxuaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5cbmltcG9ydCB7IGRhdGFUcmFuc2ZlcklzTXNPZmZpY2VQYXN0ZSwgZGF0YVRyYW5zZmVySXNQbGFpblRleHQsIGtleUV2ZW50SXNLZXlib2FyZENvbW1hbmQsIG9iamVjdHNBcmVFcXVhbCB9IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5cbmltcG9ydCB7IHNlbGVjdGlvbkNoYW5nZU9ic2VydmVyIH0gZnJvbSBcInRyaXgvb2JzZXJ2ZXJzL3NlbGVjdGlvbl9jaGFuZ2Vfb2JzZXJ2ZXJcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMZXZlbDJJbnB1dENvbnRyb2xsZXIgZXh0ZW5kcyBJbnB1dENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcbiAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcylcbiAgfVxuXG4gIHN0YXRpYyBldmVudHMgPSB7XG4gICAga2V5ZG93bihldmVudCkge1xuICAgICAgaWYgKGtleUV2ZW50SXNLZXlib2FyZENvbW1hbmQoZXZlbnQpKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBrZXlib2FyZENvbW1hbmRGcm9tS2V5RXZlbnQoZXZlbnQpXG4gICAgICAgIGlmICh0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJEaWRSZWNlaXZlS2V5Ym9hcmRDb21tYW5kKGNvbW1hbmQpKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbmFtZSA9IGV2ZW50LmtleVxuICAgICAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgbmFtZSArPSBcIitBbHRcIlxuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgIG5hbWUgKz0gXCIrU2hpZnRcIlxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmNvbnN0cnVjdG9yLmtleXNbbmFtZV1cbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy53aXRoRXZlbnQoZXZlbnQsIGhhbmRsZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gSGFuZGxlIHBhc3RlIGV2ZW50IHRvIHdvcmsgYXJvdW5kIGJlZm9yZWlucHV0Lmluc2VydEZyb21QYXN0ZSBicm93c2VyIGJ1Z3MuXG4gICAgLy8gU2FmZSB0byByZW1vdmUgZWFjaCBjb25kaXRpb24gb25jZSBmaXhlZCB1cHN0cmVhbS5cbiAgICBwYXN0ZShldmVudCkge1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE5NDkyMVxuICAgICAgbGV0IHBhc3RlXG4gICAgICBjb25zdCBocmVmID0gZXZlbnQuY2xpcGJvYXJkRGF0YT8uZ2V0RGF0YShcIlVSTFwiKVxuICAgICAgaWYgKHBhc3RlRXZlbnRIYXNGaWxlc09ubHkoZXZlbnQpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0YWNoRmlsZXMoZXZlbnQuY2xpcGJvYXJkRGF0YS5maWxlcylcblxuICAgICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD05MzQ0NDhcbiAgICAgIH0gZWxzZSBpZiAocGFzdGVFdmVudEhhc1BsYWluVGV4dE9ubHkoZXZlbnQpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgcGFzdGUgPSB7XG4gICAgICAgICAgdHlwZTogXCJ0ZXh0L3BsYWluXCIsXG4gICAgICAgICAgc3RyaW5nOiBldmVudC5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpLFxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQYXN0ZShwYXN0ZSlcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/Lmluc2VydFN0cmluZyhwYXN0ZS5zdHJpbmcpXG4gICAgICAgIHRoaXMucmVuZGVyKClcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZFBhc3RlKHBhc3RlKVxuXG4gICAgICAgIC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xOTY3MDJcbiAgICAgIH0gZWxzZSBpZiAoaHJlZikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHBhc3RlID0ge1xuICAgICAgICAgIHR5cGU6IFwidGV4dC9odG1sXCIsXG4gICAgICAgICAgaHRtbDogdGhpcy5jcmVhdGVMaW5rSFRNTChocmVmKSxcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGFzdGUocGFzdGUpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRIVE1MKHBhc3RlLmh0bWwpXG4gICAgICAgIHRoaXMucmVuZGVyKClcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlckRpZFBhc3RlKHBhc3RlKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBiZWZvcmVpbnB1dChldmVudCkge1xuICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMuY29uc3RydWN0b3IuaW5wdXRUeXBlc1tldmVudC5pbnB1dFR5cGVdXG5cbiAgICAgIGNvbnN0IGltbW1lZGlhdGVSZW5kZXIgPSBzaG91bGRSZW5kZXJJbm1tZWRpYXRlbHlUb0RlYWxXaXRoSU9TRGljdGF0aW9uKGV2ZW50KVxuXG4gICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLndpdGhFdmVudChldmVudCwgaGFuZGxlcilcblxuICAgICAgICBpZiAoIWltbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICB0aGlzLnNjaGVkdWxlUmVuZGVyKClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaW1tbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICB0aGlzLnJlbmRlcigpXG4gICAgICB9XG4gICAgfSxcblxuICAgIGlucHV0KGV2ZW50KSB7XG4gICAgICBzZWxlY3Rpb25DaGFuZ2VPYnNlcnZlci5yZXNldCgpXG4gICAgfSxcblxuICAgIGRyYWdzdGFydChldmVudCkge1xuICAgICAgaWYgKHRoaXMucmVzcG9uZGVyPy5zZWxlY3Rpb25Db250YWluc0F0dGFjaG1lbnRzKCkpIHtcbiAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJhcHBsaWNhdGlvbi94LXRyaXgtZHJhZ2dpbmdcIiwgdHJ1ZSlcblxuICAgICAgICB0aGlzLmRyYWdnaW5nID0ge1xuICAgICAgICAgIHJhbmdlOiB0aGlzLnJlc3BvbmRlcj8uZ2V0U2VsZWN0ZWRSYW5nZSgpLFxuICAgICAgICAgIHBvaW50OiBwb2ludEZyb21FdmVudChldmVudCksXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZHJhZ2VudGVyKGV2ZW50KSB7XG4gICAgICBpZiAoZHJhZ0V2ZW50SGFzRmlsZXMoZXZlbnQpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZHJhZ292ZXIoZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLmRyYWdnaW5nKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludEZyb21FdmVudChldmVudClcbiAgICAgICAgaWYgKCFvYmplY3RzQXJlRXF1YWwocG9pbnQsIHRoaXMuZHJhZ2dpbmcucG9pbnQpKSB7XG4gICAgICAgICAgdGhpcy5kcmFnZ2luZy5wb2ludCA9IHBvaW50XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5zZXRMb2NhdGlvblJhbmdlRnJvbVBvaW50UmFuZ2UocG9pbnQpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZHJhZ0V2ZW50SGFzRmlsZXMoZXZlbnQpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZHJvcChldmVudCkge1xuICAgICAgaWYgKHRoaXMuZHJhZ2dpbmcpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsTW92ZVRleHQoKVxuICAgICAgICB0aGlzLnJlc3BvbmRlcj8ubW92ZVRleHRGcm9tUmFuZ2UodGhpcy5kcmFnZ2luZy5yYW5nZSlcbiAgICAgICAgdGhpcy5kcmFnZ2luZyA9IG51bGxcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NoZWR1bGVSZW5kZXIoKVxuICAgICAgfSBlbHNlIGlmIChkcmFnRXZlbnRIYXNGaWxlcyhldmVudCkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50RnJvbUV2ZW50KGV2ZW50KVxuICAgICAgICB0aGlzLnJlc3BvbmRlcj8uc2V0TG9jYXRpb25SYW5nZUZyb21Qb2ludFJhbmdlKHBvaW50KVxuICAgICAgICByZXR1cm4gdGhpcy5hdHRhY2hGaWxlcyhldmVudC5kYXRhVHJhbnNmZXIuZmlsZXMpXG4gICAgICB9XG4gICAgfSxcblxuICAgIGRyYWdlbmQoKSB7XG4gICAgICBpZiAodGhpcy5kcmFnZ2luZykge1xuICAgICAgICB0aGlzLnJlc3BvbmRlcj8uc2V0U2VsZWN0ZWRSYW5nZSh0aGlzLmRyYWdnaW5nLnJhbmdlKVxuICAgICAgICB0aGlzLmRyYWdnaW5nID0gbnVsbFxuICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wb3NpdGlvbmVuZChldmVudCkge1xuICAgICAgaWYgKHRoaXMuY29tcG9zaW5nKSB7XG4gICAgICAgIHRoaXMuY29tcG9zaW5nID0gZmFsc2VcbiAgICAgICAgaWYgKCFjb25maWcuYnJvd3Nlci5yZWNlbnRBbmRyb2lkKSB0aGlzLnNjaGVkdWxlUmVuZGVyKClcbiAgICAgIH1cbiAgICB9LFxuICB9XG5cbiAgc3RhdGljIGtleXMgPSB7XG4gICAgQXJyb3dMZWZ0KCkge1xuICAgICAgaWYgKHRoaXMucmVzcG9uZGVyPy5zaG91bGRNYW5hZ2VNb3ZpbmdDdXJzb3JJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpKSB7XG4gICAgICAgIHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25kZXI/Lm1vdmVDdXJzb3JJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpXG4gICAgICB9XG4gICAgfSxcblxuICAgIEFycm93UmlnaHQoKSB7XG4gICAgICBpZiAodGhpcy5yZXNwb25kZXI/LnNob3VsZE1hbmFnZU1vdmluZ0N1cnNvckluRGlyZWN0aW9uKFwiZm9yd2FyZFwiKSkge1xuICAgICAgICB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5tb3ZlQ3Vyc29ySW5EaXJlY3Rpb24oXCJmb3J3YXJkXCIpXG4gICAgICB9XG4gICAgfSxcblxuICAgIEJhY2tzcGFjZSgpIHtcbiAgICAgIGlmICh0aGlzLnJlc3BvbmRlcj8uc2hvdWxkTWFuYWdlRGVsZXRpbmdJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpKSB7XG4gICAgICAgIHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgICAgIHRoaXMucmVzcG9uZGVyPy5kZWxldGVJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpXG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gICAgICB9XG4gICAgfSxcblxuICAgIFRhYigpIHtcbiAgICAgIGlmICh0aGlzLnJlc3BvbmRlcj8uY2FuSW5jcmVhc2VOZXN0aW5nTGV2ZWwoKSkge1xuICAgICAgICB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/LmluY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJUYWIrU2hpZnRcIigpIHtcbiAgICAgIGlmICh0aGlzLnJlc3BvbmRlcj8uY2FuRGVjcmVhc2VOZXN0aW5nTGV2ZWwoKSkge1xuICAgICAgICB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgdGhpcy5yZXNwb25kZXI/LmRlY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKClcbiAgICAgIH1cbiAgICB9LFxuICB9XG5cbiAgc3RhdGljIGlucHV0VHlwZXMgPSB7XG4gICAgZGVsZXRlQnlDb21wb3NpdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUluRGlyZWN0aW9uKFwiYmFja3dhcmRcIiwgeyByZWNvcmRVbmRvRW50cnk6IGZhbHNlIH0pXG4gICAgfSxcblxuICAgIGRlbGV0ZUJ5Q3V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlSW5EaXJlY3Rpb24oXCJiYWNrd2FyZFwiKVxuICAgIH0sXG5cbiAgICBkZWxldGVCeURyYWcoKSB7XG4gICAgICB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIHJldHVybiB0aGlzLndpdGhUYXJnZXRET01SYW5nZShmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kZWxldGVCeURyYWdSYW5nZSA9IHRoaXMucmVzcG9uZGVyPy5nZXRTZWxlY3RlZFJhbmdlKClcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIGRlbGV0ZUNvbXBvc2l0aW9uVGV4dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUluRGlyZWN0aW9uKFwiYmFja3dhcmRcIiwgeyByZWNvcmRVbmRvRW50cnk6IGZhbHNlIH0pXG4gICAgfSxcblxuICAgIGRlbGV0ZUNvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpXG4gICAgfSxcblxuICAgIGRlbGV0ZUNvbnRlbnRCYWNrd2FyZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUluRGlyZWN0aW9uKFwiYmFja3dhcmRcIilcbiAgICB9LFxuXG4gICAgZGVsZXRlQ29udGVudEZvcndhcmQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImZvcndhcmRcIilcbiAgICB9LFxuXG4gICAgZGVsZXRlRW50aXJlU29mdExpbmUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImZvcndhcmRcIilcbiAgICB9LFxuXG4gICAgZGVsZXRlSGFyZExpbmVCYWNrd2FyZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUluRGlyZWN0aW9uKFwiYmFja3dhcmRcIilcbiAgICB9LFxuXG4gICAgZGVsZXRlSGFyZExpbmVGb3J3YXJkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlSW5EaXJlY3Rpb24oXCJmb3J3YXJkXCIpXG4gICAgfSxcblxuICAgIGRlbGV0ZVNvZnRMaW5lQmFja3dhcmQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpXG4gICAgfSxcblxuICAgIGRlbGV0ZVNvZnRMaW5lRm9yd2FyZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUluRGlyZWN0aW9uKFwiZm9yd2FyZFwiKVxuICAgIH0sXG5cbiAgICBkZWxldGVXb3JkQmFja3dhcmQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxldGVJbkRpcmVjdGlvbihcImJhY2t3YXJkXCIpXG4gICAgfSxcblxuICAgIGRlbGV0ZVdvcmRGb3J3YXJkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlSW5EaXJlY3Rpb24oXCJmb3J3YXJkXCIpXG4gICAgfSxcblxuICAgIGZvcm1hdEJhY2tDb2xvcigpIHtcbiAgICAgIHJldHVybiB0aGlzLmFjdGl2YXRlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJiYWNrZ3JvdW5kQ29sb3JcIiwgdGhpcy5ldmVudC5kYXRhKVxuICAgIH0sXG5cbiAgICBmb3JtYXRCb2xkKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJib2xkXCIpXG4gICAgfSxcblxuICAgIGZvcm1hdEZvbnRDb2xvcigpIHtcbiAgICAgIHJldHVybiB0aGlzLmFjdGl2YXRlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJjb2xvclwiLCB0aGlzLmV2ZW50LmRhdGEpXG4gICAgfSxcblxuICAgIGZvcm1hdEZvbnROYW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChcImZvbnRcIiwgdGhpcy5ldmVudC5kYXRhKVxuICAgIH0sXG5cbiAgICBmb3JtYXRJbmRlbnQoKSB7XG4gICAgICBpZiAodGhpcy5yZXNwb25kZXI/LmNhbkluY3JlYXNlTmVzdGluZ0xldmVsKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlc3BvbmRlcj8uaW5jcmVhc2VOZXN0aW5nTGV2ZWwoKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBmb3JtYXRJdGFsaWMoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b2dnbGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChcIml0YWxpY1wiKVxuICAgIH0sXG5cbiAgICBmb3JtYXRKdXN0aWZ5Q2VudGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJqdXN0aWZ5Q2VudGVyXCIpXG4gICAgfSxcblxuICAgIGZvcm1hdEp1c3RpZnlGdWxsKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJqdXN0aWZ5RnVsbFwiKVxuICAgIH0sXG5cbiAgICBmb3JtYXRKdXN0aWZ5TGVmdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvZ2dsZUF0dHJpYnV0ZUlmU3VwcG9ydGVkKFwianVzdGlmeUxlZnRcIilcbiAgICB9LFxuXG4gICAgZm9ybWF0SnVzdGlmeVJpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJqdXN0aWZ5UmlnaHRcIilcbiAgICB9LFxuXG4gICAgZm9ybWF0T3V0ZGVudCgpIHtcbiAgICAgIGlmICh0aGlzLnJlc3BvbmRlcj8uY2FuRGVjcmVhc2VOZXN0aW5nTGV2ZWwoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoVGFyZ2V0RE9NUmFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5kZWNyZWFzZU5lc3RpbmdMZXZlbCgpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcblxuICAgIGZvcm1hdFJlbW92ZSgpIHtcbiAgICAgIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZU5hbWUgaW4gdGhpcy5yZXNwb25kZXI/LmdldEN1cnJlbnRBdHRyaWJ1dGVzKCkpIHtcbiAgICAgICAgICB0aGlzLnJlc3BvbmRlcj8ucmVtb3ZlQ3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG5cbiAgICBmb3JtYXRTZXRCbG9ja1RleHREaXJlY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5hY3RpdmF0ZUF0dHJpYnV0ZUlmU3VwcG9ydGVkKFwiYmxvY2tEaXJcIiwgdGhpcy5ldmVudC5kYXRhKVxuICAgIH0sXG5cbiAgICBmb3JtYXRTZXRJbmxpbmVUZXh0RGlyZWN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChcInRleHREaXJcIiwgdGhpcy5ldmVudC5kYXRhKVxuICAgIH0sXG5cbiAgICBmb3JtYXRTdHJpa2VUaHJvdWdoKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJzdHJpa2VcIilcbiAgICB9LFxuXG4gICAgZm9ybWF0U3Vic2NyaXB0KCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJzdWJcIilcbiAgICB9LFxuXG4gICAgZm9ybWF0U3VwZXJzY3JpcHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b2dnbGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChcInN1cFwiKVxuICAgIH0sXG5cbiAgICBmb3JtYXRVbmRlcmxpbmUoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b2dnbGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChcInVuZGVybGluZVwiKVxuICAgIH0sXG5cbiAgICBoaXN0b3J5UmVkbygpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVJlZG8oKVxuICAgIH0sXG5cbiAgICBoaXN0b3J5VW5kbygpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVVuZG8oKVxuICAgIH0sXG5cbiAgICBpbnNlcnRDb21wb3NpdGlvblRleHQoKSB7XG4gICAgICB0aGlzLmNvbXBvc2luZyA9IHRydWVcbiAgICAgIHJldHVybiB0aGlzLmluc2VydFN0cmluZyh0aGlzLmV2ZW50LmRhdGEpXG4gICAgfSxcblxuICAgIGluc2VydEZyb21Db21wb3NpdGlvbigpIHtcbiAgICAgIHRoaXMuY29tcG9zaW5nID0gZmFsc2VcbiAgICAgIHJldHVybiB0aGlzLmluc2VydFN0cmluZyh0aGlzLmV2ZW50LmRhdGEpXG4gICAgfSxcblxuICAgIGluc2VydEZyb21Ecm9wKCkge1xuICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmRlbGV0ZUJ5RHJhZ1JhbmdlXG4gICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgdGhpcy5kZWxldGVCeURyYWdSYW5nZSA9IG51bGxcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyV2lsbE1vdmVUZXh0KClcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlc3BvbmRlcj8ubW92ZVRleHRGcm9tUmFuZ2UocmFuZ2UpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcblxuICAgIGluc2VydEZyb21QYXN0ZSgpIHtcbiAgICAgIGNvbnN0IHsgZGF0YVRyYW5zZmVyIH0gPSB0aGlzLmV2ZW50XG4gICAgICBjb25zdCBwYXN0ZSA9IHsgZGF0YVRyYW5zZmVyIH1cblxuICAgICAgY29uc3QgaHJlZiA9IGRhdGFUcmFuc2Zlci5nZXREYXRhKFwiVVJMXCIpXG4gICAgICBjb25zdCBodG1sID0gZGF0YVRyYW5zZmVyLmdldERhdGEoXCJ0ZXh0L2h0bWxcIilcblxuICAgICAgaWYgKGhyZWYpIHtcbiAgICAgICAgbGV0IHN0cmluZ1xuICAgICAgICB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgcGFzdGUudHlwZSA9IFwidGV4dC9odG1sXCJcbiAgICAgICAgY29uc3QgbmFtZSA9IGRhdGFUcmFuc2Zlci5nZXREYXRhKFwicHVibGljLnVybC1uYW1lXCIpXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgc3RyaW5nID0gc3F1aXNoQnJlYWthYmxlV2hpdGVzcGFjZShuYW1lKS50cmltKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJpbmcgPSBocmVmXG4gICAgICAgIH1cbiAgICAgICAgcGFzdGUuaHRtbCA9IHRoaXMuY3JlYXRlTGlua0hUTUwoaHJlZiwgc3RyaW5nKVxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGFzdGUocGFzdGUpXG4gICAgICAgIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlc3BvbmRlcj8uaW5zZXJ0SFRNTChwYXN0ZS5odG1sKVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyID0gKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJEaWRQYXN0ZShwYXN0ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkYXRhVHJhbnNmZXJJc1BsYWluVGV4dChkYXRhVHJhbnNmZXIpKSB7XG4gICAgICAgIHBhc3RlLnR5cGUgPSBcInRleHQvcGxhaW5cIlxuICAgICAgICBwYXN0ZS5zdHJpbmcgPSBkYXRhVHJhbnNmZXIuZ2V0RGF0YShcInRleHQvcGxhaW5cIilcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyV2lsbFBhc3RlKHBhc3RlKVxuICAgICAgICB0aGlzLndpdGhUYXJnZXRET01SYW5nZShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25kZXI/Lmluc2VydFN0cmluZyhwYXN0ZS5zdHJpbmcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5hZnRlclJlbmRlciA9ICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkUGFzdGUocGFzdGUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzc2FibGVGaWxlUGFzdGUodGhpcy5ldmVudCkpIHtcbiAgICAgICAgcGFzdGUudHlwZSA9IFwiRmlsZVwiXG4gICAgICAgIHBhc3RlLmZpbGUgPSBkYXRhVHJhbnNmZXIuZmlsZXNbMF1cbiAgICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyV2lsbFBhc3RlKHBhc3RlKVxuICAgICAgICB0aGlzLndpdGhUYXJnZXRET01SYW5nZShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25kZXI/Lmluc2VydEZpbGUocGFzdGUuZmlsZSlcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyID0gKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJEaWRQYXN0ZShwYXN0ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChodG1sKSB7XG4gICAgICAgIHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICBwYXN0ZS50eXBlID0gXCJ0ZXh0L2h0bWxcIlxuICAgICAgICBwYXN0ZS5odG1sID0gaHRtbFxuICAgICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGFzdGUocGFzdGUpXG4gICAgICAgIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlc3BvbmRlcj8uaW5zZXJ0SFRNTChwYXN0ZS5odG1sKVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyID0gKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJEaWRQYXN0ZShwYXN0ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBpbnNlcnRGcm9tWWFuaygpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc2VydFN0cmluZyh0aGlzLmV2ZW50LmRhdGEpXG4gICAgfSxcblxuICAgIGluc2VydExpbmVCcmVhaygpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc2VydFN0cmluZyhcIlxcblwiKVxuICAgIH0sXG5cbiAgICBpbnNlcnRMaW5rKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChcImhyZWZcIiwgdGhpcy5ldmVudC5kYXRhKVxuICAgIH0sXG5cbiAgICBpbnNlcnRPcmRlcmVkTGlzdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvZ2dsZUF0dHJpYnV0ZUlmU3VwcG9ydGVkKFwibnVtYmVyXCIpXG4gICAgfSxcblxuICAgIGluc2VydFBhcmFncmFwaCgpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtVHlwaW5nKClcbiAgICAgIHJldHVybiB0aGlzLndpdGhUYXJnZXRET01SYW5nZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRMaW5lQnJlYWsoKVxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgaW5zZXJ0UmVwbGFjZW1lbnRUZXh0KCkge1xuICAgICAgY29uc3QgcmVwbGFjZW1lbnQgPSB0aGlzLmV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwidGV4dC9wbGFpblwiKVxuICAgICAgY29uc3QgZG9tUmFuZ2UgPSB0aGlzLmV2ZW50LmdldFRhcmdldFJhbmdlcygpWzBdXG5cbiAgICAgIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGRvbVJhbmdlLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaW5zZXJ0U3RyaW5nKHJlcGxhY2VtZW50LCB7IHVwZGF0ZVBvc2l0aW9uOiBmYWxzZSB9KVxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgaW5zZXJ0VGV4dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc2VydFN0cmluZyh0aGlzLmV2ZW50LmRhdGEgfHwgdGhpcy5ldmVudC5kYXRhVHJhbnNmZXI/LmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpKVxuICAgIH0sXG5cbiAgICBpbnNlcnRUcmFuc3Bvc2UoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnRTdHJpbmcodGhpcy5ldmVudC5kYXRhKVxuICAgIH0sXG5cbiAgICBpbnNlcnRVbm9yZGVyZWRMaXN0KCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQXR0cmlidXRlSWZTdXBwb3J0ZWQoXCJidWxsZXRcIilcbiAgICB9LFxuICB9XG5cbiAgZWxlbWVudERpZE11dGF0ZSgpIHtcbiAgICBpZiAodGhpcy5zY2hlZHVsZWRSZW5kZXIpIHtcbiAgICAgIGlmICh0aGlzLmNvbXBvc2luZykge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyRGlkQWxsb3dVbmhhbmRsZWRJbnB1dD8uKClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVwYXJzZSgpXG4gICAgfVxuICB9XG5cbiAgc2NoZWR1bGVSZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NoZWR1bGVkUmVuZGVyID8gdGhpcy5zY2hlZHVsZWRSZW5kZXIgOiB0aGlzLnNjaGVkdWxlZFJlbmRlciA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnJlbmRlcilcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlZFJlbmRlcilcbiAgICB0aGlzLnNjaGVkdWxlZFJlbmRlciA9IG51bGxcbiAgICBpZiAoIXRoaXMuY29tcG9zaW5nKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlPy5yZW5kZXIoKVxuICAgIH1cbiAgICB0aGlzLmFmdGVyUmVuZGVyPy4oKVxuICAgIHRoaXMuYWZ0ZXJSZW5kZXIgPSBudWxsXG4gIH1cblxuICByZXBhcnNlKCkge1xuICAgIHJldHVybiB0aGlzLmRlbGVnYXRlPy5yZXBhcnNlKClcbiAgfVxuXG4gIC8vIFJlc3BvbmRlciBoZWxwZXJzXG5cbiAgaW5zZXJ0U3RyaW5nKHN0cmluZyA9IFwiXCIsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpXG4gICAgcmV0dXJuIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5pbnNlcnRTdHJpbmcoc3RyaW5nLCBvcHRpb25zKVxuICAgIH0pXG4gIH1cblxuICB0b2dnbGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgaWYgKGdldEFsbEF0dHJpYnV0ZU5hbWVzKCkuaW5jbHVkZXMoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGU/LmlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtRm9ybWF0dGluZyhhdHRyaWJ1dGVOYW1lKVxuICAgICAgcmV0dXJuIHRoaXMud2l0aFRhcmdldERPTVJhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25kZXI/LnRvZ2dsZUN1cnJlbnRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgYWN0aXZhdGVBdHRyaWJ1dGVJZlN1cHBvcnRlZChhdHRyaWJ1dGVOYW1lLCB2YWx1ZSkge1xuICAgIGlmIChnZXRBbGxBdHRyaWJ1dGVOYW1lcygpLmluY2x1ZGVzKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlPy5pbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybUZvcm1hdHRpbmcoYXR0cmlidXRlTmFtZSlcbiAgICAgIHJldHVybiB0aGlzLndpdGhUYXJnZXRET01SYW5nZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uZGVyPy5zZXRDdXJyZW50QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIHZhbHVlKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBkZWxldGVJbkRpcmVjdGlvbihkaXJlY3Rpb24sIHsgcmVjb3JkVW5kb0VudHJ5IH0gPSB7IHJlY29yZFVuZG9FbnRyeTogdHJ1ZSB9KSB7XG4gICAgaWYgKHJlY29yZFVuZG9FbnRyeSkge1xuICAgICAgdGhpcy5kZWxlZ2F0ZT8uaW5wdXRDb250cm9sbGVyV2lsbFBlcmZvcm1UeXBpbmcoKVxuICAgIH1cbiAgICBjb25zdCBwZXJmb3JtID0gKCkgPT4gdGhpcy5yZXNwb25kZXI/LmRlbGV0ZUluRGlyZWN0aW9uKGRpcmVjdGlvbilcbiAgICBjb25zdCBkb21SYW5nZSA9IHRoaXMuZ2V0VGFyZ2V0RE9NUmFuZ2UoeyBtaW5MZW5ndGg6IHRoaXMuY29tcG9zaW5nID8gMSA6IDIgfSlcbiAgICBpZiAoZG9tUmFuZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzLndpdGhUYXJnZXRET01SYW5nZShkb21SYW5nZSwgcGVyZm9ybSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBlcmZvcm0oKVxuICAgIH1cbiAgfVxuXG4gIC8vIFNlbGVjdGlvbiBoZWxwZXJzXG5cbiAgd2l0aFRhcmdldERPTVJhbmdlKGRvbVJhbmdlLCBmbikge1xuICAgIGlmICh0eXBlb2YgZG9tUmFuZ2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZm4gPSBkb21SYW5nZVxuICAgICAgZG9tUmFuZ2UgPSB0aGlzLmdldFRhcmdldERPTVJhbmdlKClcbiAgICB9XG4gICAgaWYgKGRvbVJhbmdlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNwb25kZXI/LndpdGhUYXJnZXRET01SYW5nZShkb21SYW5nZSwgZm4uYmluZCh0aGlzKSlcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIucmVzZXQoKVxuICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcylcbiAgICB9XG4gIH1cblxuICBnZXRUYXJnZXRET01SYW5nZSh7IG1pbkxlbmd0aCB9ID0geyBtaW5MZW5ndGg6IDAgfSkge1xuICAgIGNvbnN0IHRhcmdldFJhbmdlcyA9IHRoaXMuZXZlbnQuZ2V0VGFyZ2V0UmFuZ2VzPy4oKVxuICAgIGlmICh0YXJnZXRSYW5nZXMpIHtcbiAgICAgIGlmICh0YXJnZXRSYW5nZXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGRvbVJhbmdlID0gc3RhdGljUmFuZ2VUb1JhbmdlKHRhcmdldFJhbmdlc1swXSlcbiAgICAgICAgaWYgKG1pbkxlbmd0aCA9PT0gMCB8fCBkb21SYW5nZS50b1N0cmluZygpLmxlbmd0aCA+PSBtaW5MZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gZG9tUmFuZ2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdpdGhFdmVudChldmVudCwgZm4pIHtcbiAgICBsZXQgcmVzdWx0XG4gICAgdGhpcy5ldmVudCA9IGV2ZW50XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZuLmNhbGwodGhpcylcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5ldmVudCA9IG51bGxcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbmNvbnN0IHN0YXRpY1JhbmdlVG9SYW5nZSA9IGZ1bmN0aW9uKHN0YXRpY1JhbmdlKSB7XG4gIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKVxuICByYW5nZS5zZXRTdGFydChzdGF0aWNSYW5nZS5zdGFydENvbnRhaW5lciwgc3RhdGljUmFuZ2Uuc3RhcnRPZmZzZXQpXG4gIHJhbmdlLnNldEVuZChzdGF0aWNSYW5nZS5lbmRDb250YWluZXIsIHN0YXRpY1JhbmdlLmVuZE9mZnNldClcbiAgcmV0dXJuIHJhbmdlXG59XG5cbi8vIEV2ZW50IGhlbHBlcnNcblxuY29uc3QgZHJhZ0V2ZW50SGFzRmlsZXMgPSAoZXZlbnQpID0+IEFycmF5LmZyb20oZXZlbnQuZGF0YVRyYW5zZmVyPy50eXBlcyB8fCBbXSkuaW5jbHVkZXMoXCJGaWxlc1wiKVxuXG5jb25zdCBwcm9jZXNzYWJsZUZpbGVQYXN0ZSA9IChldmVudCkgPT4ge1xuICAvLyBQYXN0ZSBldmVudHMgdGhhdCBvbmx5IGhhdmUgZmlsZXMgYXJlIGhhbmRsZWQgYnkgdGhlIHBhc3RlIGV2ZW50IGhhbmRsZXIsXG4gIC8vIHRvIHdvcmsgYXJvdW5kIFNhZmFyaSBub3Qgc3VwcG9ydGluZyBiZWZvcmVpbnB1dC5pbnNlcnRGcm9tUGFzdGUgZm9yIGZpbGVzLlxuXG4gIC8vIE1TIE9mZmljZSB0ZXh0IHBhc3RlcyBpbmNsdWRlIGEgZmlsZSB3aXRoIGEgc2NyZWVuc2hvdCBvZiB0aGUgdGV4dCwgYnV0IHdlIHNob3VsZFxuICAvLyBoYW5kbGUgdGhlbSBhcyB0ZXh0IHBhc3Rlcy5cbiAgcmV0dXJuIGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlcz8uWzBdICYmICFwYXN0ZUV2ZW50SGFzRmlsZXNPbmx5KGV2ZW50KSAmJiAhZGF0YVRyYW5zZmVySXNNc09mZmljZVBhc3RlKGV2ZW50KVxufVxuXG5jb25zdCBwYXN0ZUV2ZW50SGFzRmlsZXNPbmx5ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgY29uc3QgY2xpcGJvYXJkID0gZXZlbnQuY2xpcGJvYXJkRGF0YVxuICBpZiAoY2xpcGJvYXJkKSB7XG4gICAgY29uc3QgZmlsZVR5cGVzID0gQXJyYXkuZnJvbShjbGlwYm9hcmQudHlwZXMpLmZpbHRlcigodHlwZSkgPT4gdHlwZS5tYXRjaCgvZmlsZS9pKSkgLy8gXCJGaWxlc1wiLCBcImFwcGxpY2F0aW9uL3gtbW96LWZpbGVcIlxuICAgIHJldHVybiBmaWxlVHlwZXMubGVuZ3RoID09PSBjbGlwYm9hcmQudHlwZXMubGVuZ3RoICYmIGNsaXBib2FyZC5maWxlcy5sZW5ndGggPj0gMVxuICB9XG59XG5cbmNvbnN0IHBhc3RlRXZlbnRIYXNQbGFpblRleHRPbmx5ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgY29uc3QgY2xpcGJvYXJkID0gZXZlbnQuY2xpcGJvYXJkRGF0YVxuICBpZiAoY2xpcGJvYXJkKSB7XG4gICAgcmV0dXJuIGNsaXBib2FyZC50eXBlcy5pbmNsdWRlcyhcInRleHQvcGxhaW5cIikgJiYgY2xpcGJvYXJkLnR5cGVzLmxlbmd0aCA9PT0gMVxuICB9XG59XG5cbmNvbnN0IGtleWJvYXJkQ29tbWFuZEZyb21LZXlFdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGNvbnN0IGNvbW1hbmQgPSBbXVxuICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgY29tbWFuZC5wdXNoKFwiYWx0XCIpXG4gIH1cbiAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgY29tbWFuZC5wdXNoKFwic2hpZnRcIilcbiAgfVxuICBjb21tYW5kLnB1c2goZXZlbnQua2V5KVxuICByZXR1cm4gY29tbWFuZFxufVxuXG5jb25zdCBwb2ludEZyb21FdmVudCA9IChldmVudCkgPT4gKHtcbiAgeDogZXZlbnQuY2xpZW50WCxcbiAgeTogZXZlbnQuY2xpZW50WSxcbn0pXG4iLCAiaW1wb3J0IEJhc2ljT2JqZWN0IGZyb20gXCJ0cml4L2NvcmUvYmFzaWNfb2JqZWN0XCJcblxuaW1wb3J0IHsgZmluZENsb3Nlc3RFbGVtZW50RnJvbU5vZGUsIGhhbmRsZUV2ZW50LCB0cmlnZ2VyRXZlbnQgfSBmcm9tIFwidHJpeC9jb3JlL2hlbHBlcnNcIlxuXG5pbXBvcnQgRE9NUHVyaWZ5IGZyb20gXCJkb21wdXJpZnlcIlxuXG5jb25zdCBhdHRyaWJ1dGVCdXR0b25TZWxlY3RvciA9IFwiW2RhdGEtdHJpeC1hdHRyaWJ1dGVdXCJcbmNvbnN0IGFjdGlvbkJ1dHRvblNlbGVjdG9yID0gXCJbZGF0YS10cml4LWFjdGlvbl1cIlxuY29uc3QgdG9vbGJhckJ1dHRvblNlbGVjdG9yID0gYCR7YXR0cmlidXRlQnV0dG9uU2VsZWN0b3J9LCAke2FjdGlvbkJ1dHRvblNlbGVjdG9yfWBcbmNvbnN0IGRpYWxvZ1NlbGVjdG9yID0gXCJbZGF0YS10cml4LWRpYWxvZ11cIlxuY29uc3QgYWN0aXZlRGlhbG9nU2VsZWN0b3IgPSBgJHtkaWFsb2dTZWxlY3Rvcn1bZGF0YS10cml4LWFjdGl2ZV1gXG5jb25zdCBkaWFsb2dCdXR0b25TZWxlY3RvciA9IGAke2RpYWxvZ1NlbGVjdG9yfSBbZGF0YS10cml4LW1ldGhvZF1gXG5jb25zdCBkaWFsb2dJbnB1dFNlbGVjdG9yID0gYCR7ZGlhbG9nU2VsZWN0b3J9IFtkYXRhLXRyaXgtaW5wdXRdYFxuY29uc3QgZ2V0SW5wdXRGb3JEaWFsb2cgPSAoZWxlbWVudCwgYXR0cmlidXRlTmFtZSkgPT4ge1xuICBpZiAoIWF0dHJpYnV0ZU5hbWUpIHsgYXR0cmlidXRlTmFtZSA9IGdldEF0dHJpYnV0ZU5hbWUoZWxlbWVudCkgfVxuICByZXR1cm4gZWxlbWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS10cml4LWlucHV0XVtuYW1lPScke2F0dHJpYnV0ZU5hbWV9J11gKVxufVxuY29uc3QgZ2V0QWN0aW9uTmFtZSA9IChlbGVtZW50KSA9PiBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdHJpeC1hY3Rpb25cIilcbmNvbnN0IGdldEF0dHJpYnV0ZU5hbWUgPSAoZWxlbWVudCkgPT4ge1xuICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRyaXgtYXR0cmlidXRlXCIpIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10cml4LWRpYWxvZy1hdHRyaWJ1dGVcIilcbn1cbmNvbnN0IGdldERpYWxvZ05hbWUgPSAoZWxlbWVudCkgPT4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRyaXgtZGlhbG9nXCIpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xiYXJDb250cm9sbGVyIGV4dGVuZHMgQmFzaWNPYmplY3Qge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudClcbiAgICB0aGlzLmRpZENsaWNrQWN0aW9uQnV0dG9uID0gdGhpcy5kaWRDbGlja0FjdGlvbkJ1dHRvbi5iaW5kKHRoaXMpXG4gICAgdGhpcy5kaWRDbGlja0F0dHJpYnV0ZUJ1dHRvbiA9IHRoaXMuZGlkQ2xpY2tBdHRyaWJ1dGVCdXR0b24uYmluZCh0aGlzKVxuICAgIHRoaXMuZGlkQ2xpY2tEaWFsb2dCdXR0b24gPSB0aGlzLmRpZENsaWNrRGlhbG9nQnV0dG9uLmJpbmQodGhpcylcbiAgICB0aGlzLmRpZEtleURvd25EaWFsb2dJbnB1dCA9IHRoaXMuZGlkS2V5RG93bkRpYWxvZ0lucHV0LmJpbmQodGhpcylcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0ge31cbiAgICB0aGlzLmFjdGlvbnMgPSB7fVxuICAgIHRoaXMucmVzZXREaWFsb2dJbnB1dHMoKVxuXG4gICAgaGFuZGxlRXZlbnQoXCJtb3VzZWRvd25cIiwge1xuICAgICAgb25FbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICBtYXRjaGluZ1NlbGVjdG9yOiBhY3Rpb25CdXR0b25TZWxlY3RvcixcbiAgICAgIHdpdGhDYWxsYmFjazogdGhpcy5kaWRDbGlja0FjdGlvbkJ1dHRvbixcbiAgICB9KVxuICAgIGhhbmRsZUV2ZW50KFwibW91c2Vkb3duXCIsIHtcbiAgICAgIG9uRWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgbWF0Y2hpbmdTZWxlY3RvcjogYXR0cmlidXRlQnV0dG9uU2VsZWN0b3IsXG4gICAgICB3aXRoQ2FsbGJhY2s6IHRoaXMuZGlkQ2xpY2tBdHRyaWJ1dGVCdXR0b24sXG4gICAgfSlcbiAgICBoYW5kbGVFdmVudChcImNsaWNrXCIsIHsgb25FbGVtZW50OiB0aGlzLmVsZW1lbnQsIG1hdGNoaW5nU2VsZWN0b3I6IHRvb2xiYXJCdXR0b25TZWxlY3RvciwgcHJldmVudERlZmF1bHQ6IHRydWUgfSlcbiAgICBoYW5kbGVFdmVudChcImNsaWNrXCIsIHtcbiAgICAgIG9uRWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgbWF0Y2hpbmdTZWxlY3RvcjogZGlhbG9nQnV0dG9uU2VsZWN0b3IsXG4gICAgICB3aXRoQ2FsbGJhY2s6IHRoaXMuZGlkQ2xpY2tEaWFsb2dCdXR0b24sXG4gICAgfSlcbiAgICBoYW5kbGVFdmVudChcImtleWRvd25cIiwge1xuICAgICAgb25FbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICBtYXRjaGluZ1NlbGVjdG9yOiBkaWFsb2dJbnB1dFNlbGVjdG9yLFxuICAgICAgd2l0aENhbGxiYWNrOiB0aGlzLmRpZEtleURvd25EaWFsb2dJbnB1dCxcbiAgICB9KVxuICB9XG5cbiAgLy8gRXZlbnQgaGFuZGxlcnNcblxuICBkaWRDbGlja0FjdGlvbkJ1dHRvbihldmVudCwgZWxlbWVudCkge1xuICAgIHRoaXMuZGVsZWdhdGU/LnRvb2xiYXJEaWRDbGlja0J1dHRvbigpXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGFjdGlvbk5hbWUgPSBnZXRBY3Rpb25OYW1lKGVsZW1lbnQpXG5cbiAgICBpZiAodGhpcy5nZXREaWFsb2coYWN0aW9uTmFtZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvZ2dsZURpYWxvZyhhY3Rpb25OYW1lKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8udG9vbGJhckRpZEludm9rZUFjdGlvbihhY3Rpb25OYW1lLCBlbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIGRpZENsaWNrQXR0cmlidXRlQnV0dG9uKGV2ZW50LCBlbGVtZW50KSB7XG4gICAgdGhpcy5kZWxlZ2F0ZT8udG9vbGJhckRpZENsaWNrQnV0dG9uKClcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGdldEF0dHJpYnV0ZU5hbWUoZWxlbWVudClcblxuICAgIGlmICh0aGlzLmdldERpYWxvZyhhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgdGhpcy50b2dnbGVEaWFsb2coYXR0cmlidXRlTmFtZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWxlZ2F0ZT8udG9vbGJhckRpZFRvZ2dsZUF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlZnJlc2hBdHRyaWJ1dGVCdXR0b25zKClcbiAgfVxuXG4gIGRpZENsaWNrRGlhbG9nQnV0dG9uKGV2ZW50LCBlbGVtZW50KSB7XG4gICAgY29uc3QgZGlhbG9nRWxlbWVudCA9IGZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlKGVsZW1lbnQsIHsgbWF0Y2hpbmdTZWxlY3RvcjogZGlhbG9nU2VsZWN0b3IgfSlcbiAgICBjb25zdCBtZXRob2QgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdHJpeC1tZXRob2RcIilcbiAgICByZXR1cm4gdGhpc1ttZXRob2RdLmNhbGwodGhpcywgZGlhbG9nRWxlbWVudClcbiAgfVxuXG4gIGRpZEtleURvd25EaWFsb2dJbnB1dChldmVudCwgZWxlbWVudCkge1xuICAgIGlmIChldmVudC5rZXlDb2RlID09PSAxMykge1xuICAgICAgLy8gRW50ZXIga2V5XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBjb25zdCBhdHRyaWJ1dGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcIm5hbWVcIilcbiAgICAgIGNvbnN0IGRpYWxvZyA9IHRoaXMuZ2V0RGlhbG9nKGF0dHJpYnV0ZSlcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGRpYWxvZylcbiAgICB9XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDI3KSB7XG4gICAgICAvLyBFc2NhcGUga2V5XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICByZXR1cm4gdGhpcy5oaWRlRGlhbG9nKClcbiAgICB9XG4gIH1cblxuICAvLyBBY3Rpb24gYnV0dG9uc1xuXG4gIHVwZGF0ZUFjdGlvbnMoYWN0aW9ucykge1xuICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNcbiAgICByZXR1cm4gdGhpcy5yZWZyZXNoQWN0aW9uQnV0dG9ucygpXG4gIH1cblxuICByZWZyZXNoQWN0aW9uQnV0dG9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoQWN0aW9uQnV0dG9uKChlbGVtZW50LCBhY3Rpb25OYW1lKSA9PiB7XG4gICAgICBlbGVtZW50LmRpc2FibGVkID0gdGhpcy5hY3Rpb25zW2FjdGlvbk5hbWVdID09PSBmYWxzZVxuICAgIH0pXG4gIH1cblxuICBlYWNoQWN0aW9uQnV0dG9uKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYWN0aW9uQnV0dG9uU2VsZWN0b3IpKS5tYXAoKGVsZW1lbnQpID0+XG4gICAgICBjYWxsYmFjayhlbGVtZW50LCBnZXRBY3Rpb25OYW1lKGVsZW1lbnQpKVxuICAgIClcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZSBidXR0b25zXG5cbiAgdXBkYXRlQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlc1xuICAgIHJldHVybiB0aGlzLnJlZnJlc2hBdHRyaWJ1dGVCdXR0b25zKClcbiAgfVxuXG4gIHJlZnJlc2hBdHRyaWJ1dGVCdXR0b25zKCkge1xuICAgIHJldHVybiB0aGlzLmVhY2hBdHRyaWJ1dGVCdXR0b24oKGVsZW1lbnQsIGF0dHJpYnV0ZU5hbWUpID0+IHtcbiAgICAgIGVsZW1lbnQuZGlzYWJsZWQgPSB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0gPT09IGZhbHNlXG4gICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdIHx8IHRoaXMuZGlhbG9nSXNWaXNpYmxlKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS10cml4LWFjdGl2ZVwiLCBcIlwiKVxuICAgICAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidHJpeC1hY3RpdmVcIilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS10cml4LWFjdGl2ZVwiKVxuICAgICAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidHJpeC1hY3RpdmVcIilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZWFjaEF0dHJpYnV0ZUJ1dHRvbihjYWxsYmFjaykge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGF0dHJpYnV0ZUJ1dHRvblNlbGVjdG9yKSkubWFwKChlbGVtZW50KSA9PlxuICAgICAgY2FsbGJhY2soZWxlbWVudCwgZ2V0QXR0cmlidXRlTmFtZShlbGVtZW50KSlcbiAgICApXG4gIH1cblxuICBhcHBseUtleWJvYXJkQ29tbWFuZChrZXlzKSB7XG4gICAgY29uc3Qga2V5U3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoa2V5cy5zb3J0KCkpXG4gICAgZm9yIChjb25zdCBidXR0b24gb2YgQXJyYXkuZnJvbSh0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXRyaXgta2V5XVwiKSkpIHtcbiAgICAgIGNvbnN0IGJ1dHRvbktleXMgPSBidXR0b24uZ2V0QXR0cmlidXRlKFwiZGF0YS10cml4LWtleVwiKS5zcGxpdChcIitcIilcbiAgICAgIGNvbnN0IGJ1dHRvbktleVN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGJ1dHRvbktleXMuc29ydCgpKVxuICAgICAgaWYgKGJ1dHRvbktleVN0cmluZyA9PT0ga2V5U3RyaW5nKSB7XG4gICAgICAgIHRyaWdnZXJFdmVudChcIm1vdXNlZG93blwiLCB7IG9uRWxlbWVudDogYnV0dG9uIH0pXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gRGlhbG9nc1xuXG4gIGRpYWxvZ0lzVmlzaWJsZShkaWFsb2dOYW1lKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZ2V0RGlhbG9nKGRpYWxvZ05hbWUpXG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lmhhc0F0dHJpYnV0ZShcImRhdGEtdHJpeC1hY3RpdmVcIilcbiAgICB9XG4gIH1cblxuICB0b2dnbGVEaWFsb2coZGlhbG9nTmFtZSkge1xuICAgIGlmICh0aGlzLmRpYWxvZ0lzVmlzaWJsZShkaWFsb2dOYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGlkZURpYWxvZygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnNob3dEaWFsb2coZGlhbG9nTmFtZSlcbiAgICB9XG4gIH1cblxuICBzaG93RGlhbG9nKGRpYWxvZ05hbWUpIHtcbiAgICB0aGlzLmhpZGVEaWFsb2coKVxuICAgIHRoaXMuZGVsZWdhdGU/LnRvb2xiYXJXaWxsU2hvd0RpYWxvZygpXG5cbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5nZXREaWFsb2coZGlhbG9nTmFtZSlcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtdHJpeC1hY3RpdmVcIiwgXCJcIilcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0cml4LWFjdGl2ZVwiKVxuXG4gICAgQXJyYXkuZnJvbShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtkaXNhYmxlZF1cIikpLmZvckVhY2goKGRpc2FibGVkSW5wdXQpID0+IHtcbiAgICAgIGRpc2FibGVkSW5wdXQucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIilcbiAgICB9KVxuXG4gICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGdldEF0dHJpYnV0ZU5hbWUoZWxlbWVudClcbiAgICBpZiAoYXR0cmlidXRlTmFtZSkge1xuICAgICAgY29uc3QgaW5wdXQgPSBnZXRJbnB1dEZvckRpYWxvZyhlbGVtZW50LCBkaWFsb2dOYW1lKVxuICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgIGlucHV0LnZhbHVlID0gdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdIHx8IFwiXCJcbiAgICAgICAgaW5wdXQuc2VsZWN0KClcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8udG9vbGJhckRpZFNob3dEaWFsb2coZGlhbG9nTmFtZSlcbiAgfVxuXG4gIHNldEF0dHJpYnV0ZShkaWFsb2dFbGVtZW50KSB7XG4gICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGdldEF0dHJpYnV0ZU5hbWUoZGlhbG9nRWxlbWVudClcbiAgICBjb25zdCBpbnB1dCA9IGdldElucHV0Rm9yRGlhbG9nKGRpYWxvZ0VsZW1lbnQsIGF0dHJpYnV0ZU5hbWUpXG5cbiAgICBpZiAoaW5wdXQud2lsbFZhbGlkYXRlKSB7XG4gICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlwiKVxuICAgICAgaWYgKCFpbnB1dC5jaGVja1ZhbGlkaXR5KCkgfHwgIXRoaXMuaXNTYWZlQXR0cmlidXRlKGlucHV0KSkge1xuICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIkludmFsaWQgdmFsdWVcIilcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiZGF0YS10cml4LXZhbGlkYXRlXCIsIFwiXCIpXG4gICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoXCJ0cml4LXZhbGlkYXRlXCIpXG4gICAgICAgIHJldHVybiBpbnB1dC5mb2N1cygpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZGVsZWdhdGU/LnRvb2xiYXJEaWRVcGRhdGVBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgaW5wdXQudmFsdWUpXG4gICAgcmV0dXJuIHRoaXMuaGlkZURpYWxvZygpXG4gIH1cblxuICBpc1NhZmVBdHRyaWJ1dGUoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQuaGFzQXR0cmlidXRlKFwiZGF0YS10cml4LXZhbGlkYXRlLWhyZWZcIikpIHtcbiAgICAgIHJldHVybiBET01QdXJpZnkuaXNWYWxpZEF0dHJpYnV0ZShcImFcIiwgXCJocmVmXCIsIGlucHV0LnZhbHVlKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZShkaWFsb2dFbGVtZW50KSB7XG4gICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGdldEF0dHJpYnV0ZU5hbWUoZGlhbG9nRWxlbWVudClcbiAgICB0aGlzLmRlbGVnYXRlPy50b29sYmFyRGlkUmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpXG4gICAgcmV0dXJuIHRoaXMuaGlkZURpYWxvZygpXG4gIH1cblxuICBoaWRlRGlhbG9nKCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihhY3RpdmVEaWFsb2dTZWxlY3RvcilcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXRyaXgtYWN0aXZlXCIpXG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0cml4LWFjdGl2ZVwiKVxuICAgICAgdGhpcy5yZXNldERpYWxvZ0lucHV0cygpXG4gICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZT8udG9vbGJhckRpZEhpZGVEaWFsb2coZ2V0RGlhbG9nTmFtZShlbGVtZW50KSlcbiAgICB9XG4gIH1cblxuICByZXNldERpYWxvZ0lucHV0cygpIHtcbiAgICBBcnJheS5mcm9tKHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGRpYWxvZ0lucHV0U2VsZWN0b3IpKS5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKVxuICAgICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS10cml4LXZhbGlkYXRlXCIpXG4gICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKFwidHJpeC12YWxpZGF0ZVwiKVxuICAgIH0pXG4gIH1cblxuICBnZXREaWFsb2coZGlhbG9nTmFtZSkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtdHJpeC1kaWFsb2c9JHtkaWFsb2dOYW1lfV1gKVxuICB9XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGVcbiAgICBpZC1sZW5ndGgsXG4qL1xuaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5cbmltcG9ydCB7IHNlcmlhbGl6ZVRvQ29udGVudFR5cGUgfSBmcm9tIFwidHJpeC9jb3JlL3NlcmlhbGl6YXRpb25cIlxuXG5pbXBvcnQgQ29udHJvbGxlciBmcm9tIFwidHJpeC9jb250cm9sbGVycy9jb250cm9sbGVyXCJcbmltcG9ydCBMZXZlbDBJbnB1dENvbnRyb2xsZXIgZnJvbSBcInRyaXgvY29udHJvbGxlcnMvbGV2ZWxfMF9pbnB1dF9jb250cm9sbGVyXCJcbmltcG9ydCBMZXZlbDJJbnB1dENvbnRyb2xsZXIgZnJvbSBcInRyaXgvY29udHJvbGxlcnMvbGV2ZWxfMl9pbnB1dF9jb250cm9sbGVyXCJcbmltcG9ydCBDb21wb3NpdGlvbkNvbnRyb2xsZXIgZnJvbSBcInRyaXgvY29udHJvbGxlcnMvY29tcG9zaXRpb25fY29udHJvbGxlclwiXG5pbXBvcnQgVG9vbGJhckNvbnRyb2xsZXIgZnJvbSBcInRyaXgvY29udHJvbGxlcnMvdG9vbGJhcl9jb250cm9sbGVyXCJcbmltcG9ydCBDb21wb3NpdGlvbiBmcm9tIFwidHJpeC9tb2RlbHMvY29tcG9zaXRpb25cIlxuaW1wb3J0IEVkaXRvciBmcm9tIFwidHJpeC9tb2RlbHMvZWRpdG9yXCJcbmltcG9ydCBBdHRhY2htZW50TWFuYWdlciBmcm9tIFwidHJpeC9tb2RlbHMvYXR0YWNobWVudF9tYW5hZ2VyXCJcbmltcG9ydCBTZWxlY3Rpb25NYW5hZ2VyIGZyb20gXCJ0cml4L21vZGVscy9zZWxlY3Rpb25fbWFuYWdlclwiXG5cbmltcG9ydCB7IGdldEJsb2NrQ29uZmlnLCBvYmplY3RzQXJlRXF1YWwsIHJhbmdlSXNDb2xsYXBzZWQsIHJhbmdlc0FyZUVxdWFsIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcbmltcG9ydCB7IHNlbGVjdGlvbkNoYW5nZU9ic2VydmVyIH0gZnJvbSBcInRyaXgvb2JzZXJ2ZXJzL3NlbGVjdGlvbl9jaGFuZ2Vfb2JzZXJ2ZXJcIlxuXG5jb25zdCBzbmFwc2hvdHNBcmVFcXVhbCA9IChhLCBiKSA9PiByYW5nZXNBcmVFcXVhbChhLnNlbGVjdGVkUmFuZ2UsIGIuc2VsZWN0ZWRSYW5nZSkgJiYgYS5kb2N1bWVudC5pc0VxdWFsVG8oYi5kb2N1bWVudClcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWRpdG9yQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIge1xuICBzdGF0aWMgYWN0aW9ucyA9IHtcbiAgICB1bmRvOiB7XG4gICAgICB0ZXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3IuY2FuVW5kbygpXG4gICAgICB9LFxuICAgICAgcGVyZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLnVuZG8oKVxuICAgICAgfSxcbiAgICB9LFxuICAgIHJlZG86IHtcbiAgICAgIHRlc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5jYW5SZWRvKClcbiAgICAgIH0sXG4gICAgICBwZXJmb3JtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3IucmVkbygpXG4gICAgICB9LFxuICAgIH0sXG4gICAgbGluazoge1xuICAgICAgdGVzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmNhbkFjdGl2YXRlQXR0cmlidXRlKFwiaHJlZlwiKVxuICAgICAgfSxcbiAgICB9LFxuICAgIGluY3JlYXNlTmVzdGluZ0xldmVsOiB7XG4gICAgICB0ZXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3IuY2FuSW5jcmVhc2VOZXN0aW5nTGV2ZWwoKVxuICAgICAgfSxcbiAgICAgIHBlcmZvcm0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5pbmNyZWFzZU5lc3RpbmdMZXZlbCgpICYmIHRoaXMucmVuZGVyKClcbiAgICAgIH0sXG4gICAgfSxcbiAgICBkZWNyZWFzZU5lc3RpbmdMZXZlbDoge1xuICAgICAgdGVzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmNhbkRlY3JlYXNlTmVzdGluZ0xldmVsKClcbiAgICAgIH0sXG4gICAgICBwZXJmb3JtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3IuZGVjcmVhc2VOZXN0aW5nTGV2ZWwoKSAmJiB0aGlzLnJlbmRlcigpXG4gICAgICB9LFxuICAgIH0sXG4gICAgYXR0YWNoRmlsZXM6IHtcbiAgICAgIHRlc3QoKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9LFxuICAgICAgcGVyZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5pbnB1dC5waWNrRmlsZXModGhpcy5lZGl0b3IuaW5zZXJ0RmlsZXMpXG4gICAgICB9LFxuICAgIH0sXG4gIH1cblxuICBjb25zdHJ1Y3Rvcih7IGVkaXRvckVsZW1lbnQsIGRvY3VtZW50LCBodG1sIH0pIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50ID0gZWRpdG9yRWxlbWVudFxuICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlciA9IG5ldyBTZWxlY3Rpb25NYW5hZ2VyKHRoaXMuZWRpdG9yRWxlbWVudClcbiAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuZGVsZWdhdGUgPSB0aGlzXG5cbiAgICB0aGlzLmNvbXBvc2l0aW9uID0gbmV3IENvbXBvc2l0aW9uKClcbiAgICB0aGlzLmNvbXBvc2l0aW9uLmRlbGVnYXRlID0gdGhpc1xuXG4gICAgdGhpcy5hdHRhY2htZW50TWFuYWdlciA9IG5ldyBBdHRhY2htZW50TWFuYWdlcih0aGlzLmNvbXBvc2l0aW9uLmdldEF0dGFjaG1lbnRzKCkpXG4gICAgdGhpcy5hdHRhY2htZW50TWFuYWdlci5kZWxlZ2F0ZSA9IHRoaXNcblxuICAgIHRoaXMuaW5wdXRDb250cm9sbGVyID1cbiAgICAgIGNvbmZpZy5pbnB1dC5nZXRMZXZlbCgpID09PSAyXG4gICAgICAgID8gbmV3IExldmVsMklucHV0Q29udHJvbGxlcih0aGlzLmVkaXRvckVsZW1lbnQpXG4gICAgICAgIDogbmV3IExldmVsMElucHV0Q29udHJvbGxlcih0aGlzLmVkaXRvckVsZW1lbnQpXG5cbiAgICB0aGlzLmlucHV0Q29udHJvbGxlci5kZWxlZ2F0ZSA9IHRoaXNcbiAgICB0aGlzLmlucHV0Q29udHJvbGxlci5yZXNwb25kZXIgPSB0aGlzLmNvbXBvc2l0aW9uXG5cbiAgICB0aGlzLmNvbXBvc2l0aW9uQ29udHJvbGxlciA9IG5ldyBDb21wb3NpdGlvbkNvbnRyb2xsZXIodGhpcy5lZGl0b3JFbGVtZW50LCB0aGlzLmNvbXBvc2l0aW9uKVxuICAgIHRoaXMuY29tcG9zaXRpb25Db250cm9sbGVyLmRlbGVnYXRlID0gdGhpc1xuXG4gICAgdGhpcy50b29sYmFyQ29udHJvbGxlciA9IG5ldyBUb29sYmFyQ29udHJvbGxlcih0aGlzLmVkaXRvckVsZW1lbnQudG9vbGJhckVsZW1lbnQpXG4gICAgdGhpcy50b29sYmFyQ29udHJvbGxlci5kZWxlZ2F0ZSA9IHRoaXNcblxuICAgIHRoaXMuZWRpdG9yID0gbmV3IEVkaXRvcih0aGlzLmNvbXBvc2l0aW9uLCB0aGlzLnNlbGVjdGlvbk1hbmFnZXIsIHRoaXMuZWRpdG9yRWxlbWVudClcbiAgICBpZiAoZG9jdW1lbnQpIHtcbiAgICAgIHRoaXMuZWRpdG9yLmxvYWREb2N1bWVudChkb2N1bWVudClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lZGl0b3IubG9hZEhUTUwoaHRtbClcbiAgICB9XG4gIH1cblxuICByZWdpc3RlclNlbGVjdGlvbk1hbmFnZXIoKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvbkNoYW5nZU9ic2VydmVyLnJlZ2lzdGVyU2VsZWN0aW9uTWFuYWdlcih0aGlzLnNlbGVjdGlvbk1hbmFnZXIpXG4gIH1cblxuICB1bnJlZ2lzdGVyU2VsZWN0aW9uTWFuYWdlcigpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIudW5yZWdpc3RlclNlbGVjdGlvbk1hbmFnZXIodGhpcy5zZWxlY3Rpb25NYW5hZ2VyKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uQ29udHJvbGxlci5yZW5kZXIoKVxuICB9XG5cbiAgcmVwYXJzZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5yZXBsYWNlSFRNTCh0aGlzLmVkaXRvckVsZW1lbnQuaW5uZXJIVE1MKVxuICB9XG5cbiAgLy8gQ29tcG9zaXRpb24gZGVsZWdhdGVcblxuICBjb21wb3NpdGlvbkRpZENoYW5nZURvY3VtZW50KGRvY3VtZW50KSB7XG4gICAgdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwiZG9jdW1lbnQtY2hhbmdlXCIpXG4gICAgaWYgKCF0aGlzLmhhbmRsaW5nSW5wdXQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gICAgfVxuICB9XG5cbiAgY29tcG9zaXRpb25EaWRDaGFuZ2VDdXJyZW50QXR0cmlidXRlcyhjdXJyZW50QXR0cmlidXRlcykge1xuICAgIHRoaXMuY3VycmVudEF0dHJpYnV0ZXMgPSBjdXJyZW50QXR0cmlidXRlc1xuICAgIHRoaXMudG9vbGJhckNvbnRyb2xsZXIudXBkYXRlQXR0cmlidXRlcyh0aGlzLmN1cnJlbnRBdHRyaWJ1dGVzKVxuICAgIHRoaXMudXBkYXRlQ3VycmVudEFjdGlvbnMoKVxuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJhdHRyaWJ1dGVzLWNoYW5nZVwiLCB7IGF0dHJpYnV0ZXM6IHRoaXMuY3VycmVudEF0dHJpYnV0ZXMgfSlcbiAgfVxuXG4gIGNvbXBvc2l0aW9uRGlkUGVyZm9ybUluc2VydGlvbkF0UmFuZ2UocmFuZ2UpIHtcbiAgICBpZiAodGhpcy5wYXN0aW5nKSB7XG4gICAgICB0aGlzLnBhc3RlZFJhbmdlID0gcmFuZ2VcbiAgICB9XG4gIH1cblxuICBjb21wb3NpdGlvblNob3VsZEFjY2VwdEZpbGUoZmlsZSkge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJmaWxlLWFjY2VwdFwiLCB7IGZpbGUgfSlcbiAgfVxuXG4gIGNvbXBvc2l0aW9uRGlkQWRkQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgY29uc3QgbWFuYWdlZEF0dGFjaG1lbnQgPSB0aGlzLmF0dGFjaG1lbnRNYW5hZ2VyLm1hbmFnZUF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwiYXR0YWNobWVudC1hZGRcIiwgeyBhdHRhY2htZW50OiBtYW5hZ2VkQXR0YWNobWVudCB9KVxuICB9XG5cbiAgY29tcG9zaXRpb25EaWRFZGl0QXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgdGhpcy5jb21wb3NpdGlvbkNvbnRyb2xsZXIucmVyZW5kZXJWaWV3Rm9yT2JqZWN0KGF0dGFjaG1lbnQpXG4gICAgY29uc3QgbWFuYWdlZEF0dGFjaG1lbnQgPSB0aGlzLmF0dGFjaG1lbnRNYW5hZ2VyLm1hbmFnZUF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJhdHRhY2htZW50LWVkaXRcIiwgeyBhdHRhY2htZW50OiBtYW5hZ2VkQXR0YWNobWVudCB9KVxuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJjaGFuZ2VcIilcbiAgfVxuXG4gIGNvbXBvc2l0aW9uRGlkQ2hhbmdlQXR0YWNobWVudFByZXZpZXdVUkwoYXR0YWNobWVudCkge1xuICAgIHRoaXMuY29tcG9zaXRpb25Db250cm9sbGVyLmludmFsaWRhdGVWaWV3Rm9yT2JqZWN0KGF0dGFjaG1lbnQpXG4gICAgcmV0dXJuIHRoaXMubm90aWZ5RWRpdG9yRWxlbWVudChcImNoYW5nZVwiKVxuICB9XG5cbiAgY29tcG9zaXRpb25EaWRSZW1vdmVBdHRhY2htZW50KGF0dGFjaG1lbnQpIHtcbiAgICBjb25zdCBtYW5hZ2VkQXR0YWNobWVudCA9IHRoaXMuYXR0YWNobWVudE1hbmFnZXIudW5tYW5hZ2VBdHRhY2htZW50KGF0dGFjaG1lbnQpXG4gICAgcmV0dXJuIHRoaXMubm90aWZ5RWRpdG9yRWxlbWVudChcImF0dGFjaG1lbnQtcmVtb3ZlXCIsIHsgYXR0YWNobWVudDogbWFuYWdlZEF0dGFjaG1lbnQgfSlcbiAgfVxuXG4gIGNvbXBvc2l0aW9uRGlkU3RhcnRFZGl0aW5nQXR0YWNobWVudChhdHRhY2htZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5hdHRhY2htZW50TG9jYXRpb25SYW5nZSA9IHRoaXMuY29tcG9zaXRpb24uZG9jdW1lbnQuZ2V0TG9jYXRpb25SYW5nZU9mQXR0YWNobWVudChhdHRhY2htZW50KVxuICAgIHRoaXMuY29tcG9zaXRpb25Db250cm9sbGVyLmluc3RhbGxBdHRhY2htZW50RWRpdG9yRm9yQXR0YWNobWVudChhdHRhY2htZW50LCBvcHRpb25zKVxuICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuc2V0TG9jYXRpb25SYW5nZSh0aGlzLmF0dGFjaG1lbnRMb2NhdGlvblJhbmdlKVxuICB9XG5cbiAgY29tcG9zaXRpb25EaWRTdG9wRWRpdGluZ0F0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIHRoaXMuY29tcG9zaXRpb25Db250cm9sbGVyLnVuaW5zdGFsbEF0dGFjaG1lbnRFZGl0b3IoKVxuICAgIHRoaXMuYXR0YWNobWVudExvY2F0aW9uUmFuZ2UgPSBudWxsXG4gIH1cblxuICBjb21wb3NpdGlvbkRpZFJlcXVlc3RDaGFuZ2luZ1NlbGVjdGlvblRvTG9jYXRpb25SYW5nZShsb2NhdGlvblJhbmdlKSB7XG4gICAgaWYgKHRoaXMubG9hZGluZ1NuYXBzaG90ICYmICF0aGlzLmlzRm9jdXNlZCgpKSByZXR1cm5cbiAgICB0aGlzLnJlcXVlc3RlZExvY2F0aW9uUmFuZ2UgPSBsb2NhdGlvblJhbmdlXG4gICAgdGhpcy5jb21wb3NpdGlvblJldmlzaW9uV2hlbkxvY2F0aW9uUmFuZ2VSZXF1ZXN0ZWQgPSB0aGlzLmNvbXBvc2l0aW9uLnJldmlzaW9uXG4gICAgaWYgKCF0aGlzLmhhbmRsaW5nSW5wdXQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gICAgfVxuICB9XG5cbiAgY29tcG9zaXRpb25XaWxsTG9hZFNuYXBzaG90KCkge1xuICAgIHRoaXMubG9hZGluZ1NuYXBzaG90ID0gdHJ1ZVxuICB9XG5cbiAgY29tcG9zaXRpb25EaWRMb2FkU25hcHNob3QoKSB7XG4gICAgdGhpcy5jb21wb3NpdGlvbkNvbnRyb2xsZXIucmVmcmVzaFZpZXdDYWNoZSgpXG4gICAgdGhpcy5yZW5kZXIoKVxuICAgIHRoaXMubG9hZGluZ1NuYXBzaG90ID0gZmFsc2VcbiAgfVxuXG4gIGdldFNlbGVjdGlvbk1hbmFnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTWFuYWdlclxuICB9XG5cbiAgLy8gQXR0YWNobWVudCBtYW5hZ2VyIGRlbGVnYXRlXG5cbiAgYXR0YWNobWVudE1hbmFnZXJEaWRSZXF1ZXN0UmVtb3ZhbE9mQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlQXR0YWNobWVudChhdHRhY2htZW50KVxuICB9XG5cbiAgLy8gRG9jdW1lbnQgY29udHJvbGxlciBkZWxlZ2F0ZVxuXG4gIGNvbXBvc2l0aW9uQ29udHJvbGxlcldpbGxTeW5jRG9jdW1lbnRWaWV3KCkge1xuICAgIHRoaXMuaW5wdXRDb250cm9sbGVyLmVkaXRvcldpbGxTeW5jRG9jdW1lbnRWaWV3KClcbiAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIubG9jaygpXG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5jbGVhclNlbGVjdGlvbigpXG4gIH1cblxuICBjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRTeW5jRG9jdW1lbnRWaWV3KCkge1xuICAgIHRoaXMuaW5wdXRDb250cm9sbGVyLmVkaXRvckRpZFN5bmNEb2N1bWVudFZpZXcoKVxuICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci51bmxvY2soKVxuICAgIHRoaXMudXBkYXRlQ3VycmVudEFjdGlvbnMoKVxuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJzeW5jXCIpXG4gIH1cblxuICBjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRSZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMucmVxdWVzdGVkTG9jYXRpb25SYW5nZSkge1xuICAgICAgaWYgKHRoaXMuY29tcG9zaXRpb25SZXZpc2lvbldoZW5Mb2NhdGlvblJhbmdlUmVxdWVzdGVkID09PSB0aGlzLmNvbXBvc2l0aW9uLnJldmlzaW9uKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5zZXRMb2NhdGlvblJhbmdlKHRoaXMucmVxdWVzdGVkTG9jYXRpb25SYW5nZSlcbiAgICAgIH1cbiAgICAgIHRoaXMucmVxdWVzdGVkTG9jYXRpb25SYW5nZSA9IG51bGxcbiAgICAgIHRoaXMuY29tcG9zaXRpb25SZXZpc2lvbldoZW5Mb2NhdGlvblJhbmdlUmVxdWVzdGVkID0gbnVsbFxuICAgIH1cblxuICAgIGlmICh0aGlzLnJlbmRlcmVkQ29tcG9zaXRpb25SZXZpc2lvbiAhPT0gdGhpcy5jb21wb3NpdGlvbi5yZXZpc2lvbikge1xuICAgICAgdGhpcy5ydW5FZGl0b3JGaWx0ZXJzKClcbiAgICAgIHRoaXMuY29tcG9zaXRpb24udXBkYXRlQ3VycmVudEF0dHJpYnV0ZXMoKVxuICAgICAgdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwicmVuZGVyXCIpXG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJlZENvbXBvc2l0aW9uUmV2aXNpb24gPSB0aGlzLmNvbXBvc2l0aW9uLnJldmlzaW9uXG4gIH1cblxuICBjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRGb2N1cygpIHtcbiAgICBpZiAodGhpcy5pc0ZvY3VzZWRJbnZpc2libHkoKSkge1xuICAgICAgdGhpcy5zZXRMb2NhdGlvblJhbmdlKHsgaW5kZXg6IDAsIG9mZnNldDogMCB9KVxuICAgIH1cbiAgICB0aGlzLnRvb2xiYXJDb250cm9sbGVyLmhpZGVEaWFsb2coKVxuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJmb2N1c1wiKVxuICB9XG5cbiAgY29tcG9zaXRpb25Db250cm9sbGVyRGlkQmx1cigpIHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwiYmx1clwiKVxuICB9XG5cbiAgY29tcG9zaXRpb25Db250cm9sbGVyRGlkU2VsZWN0QXR0YWNobWVudChhdHRhY2htZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy50b29sYmFyQ29udHJvbGxlci5oaWRlRGlhbG9nKClcbiAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbi5lZGl0QXR0YWNobWVudChhdHRhY2htZW50LCBvcHRpb25zKVxuICB9XG5cbiAgY29tcG9zaXRpb25Db250cm9sbGVyRGlkUmVxdWVzdERlc2VsZWN0aW5nQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgY29uc3QgbG9jYXRpb25SYW5nZSA9IHRoaXMuYXR0YWNobWVudExvY2F0aW9uUmFuZ2UgfHwgdGhpcy5jb21wb3NpdGlvbi5kb2N1bWVudC5nZXRMb2NhdGlvblJhbmdlT2ZBdHRhY2htZW50KGF0dGFjaG1lbnQpXG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5zZXRMb2NhdGlvblJhbmdlKGxvY2F0aW9uUmFuZ2VbMV0pXG4gIH1cblxuICBjb21wb3NpdGlvbkNvbnRyb2xsZXJXaWxsVXBkYXRlQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yLnJlY29yZFVuZG9FbnRyeShcIkVkaXQgQXR0YWNobWVudFwiLCB7IGNvbnRleHQ6IGF0dGFjaG1lbnQuaWQsIGNvbnNvbGlkYXRhYmxlOiB0cnVlIH0pXG4gIH1cblxuICBjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRSZXF1ZXN0UmVtb3ZhbE9mQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlQXR0YWNobWVudChhdHRhY2htZW50KVxuICB9XG5cbiAgLy8gSW5wdXQgY29udHJvbGxlciBkZWxlZ2F0ZVxuXG4gIGlucHV0Q29udHJvbGxlcldpbGxIYW5kbGVJbnB1dCgpIHtcbiAgICB0aGlzLmhhbmRsaW5nSW5wdXQgPSB0cnVlXG4gICAgdGhpcy5yZXF1ZXN0ZWRSZW5kZXIgPSBmYWxzZVxuICB9XG5cbiAgaW5wdXRDb250cm9sbGVyRGlkUmVxdWVzdFJlbmRlcigpIHtcbiAgICB0aGlzLnJlcXVlc3RlZFJlbmRlciA9IHRydWVcbiAgfVxuXG4gIGlucHV0Q29udHJvbGxlckRpZEhhbmRsZUlucHV0KCkge1xuICAgIHRoaXMuaGFuZGxpbmdJbnB1dCA9IGZhbHNlXG4gICAgaWYgKHRoaXMucmVxdWVzdGVkUmVuZGVyKSB7XG4gICAgICB0aGlzLnJlcXVlc3RlZFJlbmRlciA9IGZhbHNlXG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXIoKVxuICAgIH1cbiAgfVxuXG4gIGlucHV0Q29udHJvbGxlckRpZEFsbG93VW5oYW5kbGVkSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm90aWZ5RWRpdG9yRWxlbWVudChcImNoYW5nZVwiKVxuICB9XG5cbiAgaW5wdXRDb250cm9sbGVyRGlkUmVxdWVzdFJlcGFyc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwYXJzZSgpXG4gIH1cblxuICBpbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVR5cGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5yZWNvcmRUeXBpbmdVbmRvRW50cnkoKVxuICB9XG5cbiAgaW5wdXRDb250cm9sbGVyV2lsbFBlcmZvcm1Gb3JtYXR0aW5nKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5yZWNvcmRGb3JtYXR0aW5nVW5kb0VudHJ5KGF0dHJpYnV0ZU5hbWUpXG4gIH1cblxuICBpbnB1dENvbnRyb2xsZXJXaWxsQ3V0VGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5lZGl0b3IucmVjb3JkVW5kb0VudHJ5KFwiQ3V0XCIpXG4gIH1cblxuICBpbnB1dENvbnRyb2xsZXJXaWxsUGFzdGUocGFzdGUpIHtcbiAgICB0aGlzLmVkaXRvci5yZWNvcmRVbmRvRW50cnkoXCJQYXN0ZVwiKVxuICAgIHRoaXMucGFzdGluZyA9IHRydWVcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwiYmVmb3JlLXBhc3RlXCIsIHsgcGFzdGUgfSlcbiAgfVxuXG4gIGlucHV0Q29udHJvbGxlckRpZFBhc3RlKHBhc3RlKSB7XG4gICAgcGFzdGUucmFuZ2UgPSB0aGlzLnBhc3RlZFJhbmdlXG4gICAgdGhpcy5wYXN0ZWRSYW5nZSA9IG51bGxcbiAgICB0aGlzLnBhc3RpbmcgPSBudWxsXG4gICAgcmV0dXJuIHRoaXMubm90aWZ5RWRpdG9yRWxlbWVudChcInBhc3RlXCIsIHsgcGFzdGUgfSlcbiAgfVxuXG4gIGlucHV0Q29udHJvbGxlcldpbGxNb3ZlVGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5lZGl0b3IucmVjb3JkVW5kb0VudHJ5KFwiTW92ZVwiKVxuICB9XG5cbiAgaW5wdXRDb250cm9sbGVyV2lsbEF0dGFjaEZpbGVzKCkge1xuICAgIHJldHVybiB0aGlzLmVkaXRvci5yZWNvcmRVbmRvRW50cnkoXCJEcm9wIEZpbGVzXCIpXG4gIH1cblxuICBpbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVVuZG8oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yLnVuZG8oKVxuICB9XG5cbiAgaW5wdXRDb250cm9sbGVyV2lsbFBlcmZvcm1SZWRvKCkge1xuICAgIHJldHVybiB0aGlzLmVkaXRvci5yZWRvKClcbiAgfVxuXG4gIGlucHV0Q29udHJvbGxlckRpZFJlY2VpdmVLZXlib2FyZENvbW1hbmQoa2V5cykge1xuICAgIHJldHVybiB0aGlzLnRvb2xiYXJDb250cm9sbGVyLmFwcGx5S2V5Ym9hcmRDb21tYW5kKGtleXMpXG4gIH1cblxuICBpbnB1dENvbnRyb2xsZXJEaWRTdGFydERyYWcoKSB7XG4gICAgdGhpcy5sb2NhdGlvblJhbmdlQmVmb3JlRHJhZyA9IHRoaXMuc2VsZWN0aW9uTWFuYWdlci5nZXRMb2NhdGlvblJhbmdlKClcbiAgfVxuXG4gIGlucHV0Q29udHJvbGxlckRpZFJlY2VpdmVEcmFnT3ZlclBvaW50KHBvaW50KSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5zZXRMb2NhdGlvblJhbmdlRnJvbVBvaW50UmFuZ2UocG9pbnQpXG4gIH1cblxuICBpbnB1dENvbnRyb2xsZXJEaWRDYW5jZWxEcmFnKCkge1xuICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5zZXRMb2NhdGlvblJhbmdlKHRoaXMubG9jYXRpb25SYW5nZUJlZm9yZURyYWcpXG4gICAgdGhpcy5sb2NhdGlvblJhbmdlQmVmb3JlRHJhZyA9IG51bGxcbiAgfVxuXG4gIC8vIFNlbGVjdGlvbiBtYW5hZ2VyIGRlbGVnYXRlXG5cbiAgbG9jYXRpb25SYW5nZURpZENoYW5nZShsb2NhdGlvblJhbmdlKSB7XG4gICAgdGhpcy5jb21wb3NpdGlvbi51cGRhdGVDdXJyZW50QXR0cmlidXRlcygpXG4gICAgdGhpcy51cGRhdGVDdXJyZW50QWN0aW9ucygpXG4gICAgaWYgKHRoaXMuYXR0YWNobWVudExvY2F0aW9uUmFuZ2UgJiYgIXJhbmdlc0FyZUVxdWFsKHRoaXMuYXR0YWNobWVudExvY2F0aW9uUmFuZ2UsIGxvY2F0aW9uUmFuZ2UpKSB7XG4gICAgICB0aGlzLmNvbXBvc2l0aW9uLnN0b3BFZGl0aW5nQXR0YWNobWVudCgpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJzZWxlY3Rpb24tY2hhbmdlXCIpXG4gIH1cblxuICAvLyBUb29sYmFyIGNvbnRyb2xsZXIgZGVsZWdhdGVcblxuICB0b29sYmFyRGlkQ2xpY2tCdXR0b24oKSB7XG4gICAgaWYgKCF0aGlzLmdldExvY2F0aW9uUmFuZ2UoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0TG9jYXRpb25SYW5nZSh7IGluZGV4OiAwLCBvZmZzZXQ6IDAgfSlcbiAgICB9XG4gIH1cblxuICB0b29sYmFyRGlkSW52b2tlQWN0aW9uKGFjdGlvbk5hbWUsIGludm9raW5nRWxlbWVudCkge1xuICAgIHJldHVybiB0aGlzLmludm9rZUFjdGlvbihhY3Rpb25OYW1lLCBpbnZva2luZ0VsZW1lbnQpXG4gIH1cblxuICB0b29sYmFyRGlkVG9nZ2xlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICB0aGlzLnJlY29yZEZvcm1hdHRpbmdVbmRvRW50cnkoYXR0cmlidXRlTmFtZSlcbiAgICB0aGlzLmNvbXBvc2l0aW9uLnRvZ2dsZUN1cnJlbnRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSlcbiAgICB0aGlzLnJlbmRlcigpXG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbkZyb3plbikge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yRWxlbWVudC5mb2N1cygpXG4gICAgfVxuICB9XG5cbiAgdG9vbGJhckRpZFVwZGF0ZUF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMucmVjb3JkRm9ybWF0dGluZ1VuZG9FbnRyeShhdHRyaWJ1dGVOYW1lKVxuICAgIHRoaXMuY29tcG9zaXRpb24uc2V0Q3VycmVudEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCB2YWx1ZSlcbiAgICB0aGlzLnJlbmRlcigpXG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbkZyb3plbikge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yRWxlbWVudC5mb2N1cygpXG4gICAgfVxuICB9XG5cbiAgdG9vbGJhckRpZFJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgdGhpcy5yZWNvcmRGb3JtYXR0aW5nVW5kb0VudHJ5KGF0dHJpYnV0ZU5hbWUpXG4gICAgdGhpcy5jb21wb3NpdGlvbi5yZW1vdmVDdXJyZW50QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpXG4gICAgdGhpcy5yZW5kZXIoKVxuICAgIGlmICghdGhpcy5zZWxlY3Rpb25Gcm96ZW4pIHtcbiAgICAgIHJldHVybiB0aGlzLmVkaXRvckVsZW1lbnQuZm9jdXMoKVxuICAgIH1cbiAgfVxuXG4gIHRvb2xiYXJXaWxsU2hvd0RpYWxvZyhkaWFsb2dFbGVtZW50KSB7XG4gICAgdGhpcy5jb21wb3NpdGlvbi5leHBhbmRTZWxlY3Rpb25Gb3JFZGl0aW5nKClcbiAgICByZXR1cm4gdGhpcy5mcmVlemVTZWxlY3Rpb24oKVxuICB9XG5cbiAgdG9vbGJhckRpZFNob3dEaWFsb2coZGlhbG9nTmFtZSkge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJ0b29sYmFyLWRpYWxvZy1zaG93XCIsIHsgZGlhbG9nTmFtZSB9KVxuICB9XG5cbiAgdG9vbGJhckRpZEhpZGVEaWFsb2coZGlhbG9nTmFtZSkge1xuICAgIHRoaXMudGhhd1NlbGVjdGlvbigpXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50LmZvY3VzKClcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwidG9vbGJhci1kaWFsb2ctaGlkZVwiLCB7IGRpYWxvZ05hbWUgfSlcbiAgfVxuXG4gIC8vIFNlbGVjdGlvblxuXG4gIGZyZWV6ZVNlbGVjdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuc2VsZWN0aW9uRnJvemVuKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIubG9jaygpXG4gICAgICB0aGlzLmNvbXBvc2l0aW9uLmZyZWV6ZVNlbGVjdGlvbigpXG4gICAgICB0aGlzLnNlbGVjdGlvbkZyb3plbiA9IHRydWVcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gICAgfVxuICB9XG5cbiAgdGhhd1NlbGVjdGlvbigpIHtcbiAgICBpZiAodGhpcy5zZWxlY3Rpb25Gcm96ZW4pIHtcbiAgICAgIHRoaXMuY29tcG9zaXRpb24udGhhd1NlbGVjdGlvbigpXG4gICAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIudW5sb2NrKClcbiAgICAgIHRoaXMuc2VsZWN0aW9uRnJvemVuID0gZmFsc2VcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gICAgfVxuICB9XG5cbiAgY2FuSW52b2tlQWN0aW9uKGFjdGlvbk5hbWUpIHtcbiAgICBpZiAodGhpcy5hY3Rpb25Jc0V4dGVybmFsKGFjdGlvbk5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gISF0aGlzLmFjdGlvbnNbYWN0aW9uTmFtZV0/LnRlc3Q/LmNhbGwodGhpcylcbiAgICB9XG4gIH1cblxuICBpbnZva2VBY3Rpb24oYWN0aW9uTmFtZSwgaW52b2tpbmdFbGVtZW50KSB7XG4gICAgaWYgKHRoaXMuYWN0aW9uSXNFeHRlcm5hbChhY3Rpb25OYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXMubm90aWZ5RWRpdG9yRWxlbWVudChcImFjdGlvbi1pbnZva2VcIiwgeyBhY3Rpb25OYW1lLCBpbnZva2luZ0VsZW1lbnQgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uc1thY3Rpb25OYW1lXT8ucGVyZm9ybT8uY2FsbCh0aGlzKVxuICAgIH1cbiAgfVxuXG4gIGFjdGlvbklzRXh0ZXJuYWwoYWN0aW9uTmFtZSkge1xuICAgIHJldHVybiAvXngtLi8udGVzdChhY3Rpb25OYW1lKVxuICB9XG5cbiAgZ2V0Q3VycmVudEFjdGlvbnMoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge31cbiAgICBmb3IgKGNvbnN0IGFjdGlvbk5hbWUgaW4gdGhpcy5hY3Rpb25zKSB7XG4gICAgICByZXN1bHRbYWN0aW9uTmFtZV0gPSB0aGlzLmNhbkludm9rZUFjdGlvbihhY3Rpb25OYW1lKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICB1cGRhdGVDdXJyZW50QWN0aW9ucygpIHtcbiAgICBjb25zdCBjdXJyZW50QWN0aW9ucyA9IHRoaXMuZ2V0Q3VycmVudEFjdGlvbnMoKVxuICAgIGlmICghb2JqZWN0c0FyZUVxdWFsKGN1cnJlbnRBY3Rpb25zLCB0aGlzLmN1cnJlbnRBY3Rpb25zKSkge1xuICAgICAgdGhpcy5jdXJyZW50QWN0aW9ucyA9IGN1cnJlbnRBY3Rpb25zXG4gICAgICB0aGlzLnRvb2xiYXJDb250cm9sbGVyLnVwZGF0ZUFjdGlvbnModGhpcy5jdXJyZW50QWN0aW9ucylcbiAgICAgIHJldHVybiB0aGlzLm5vdGlmeUVkaXRvckVsZW1lbnQoXCJhY3Rpb25zLWNoYW5nZVwiLCB7IGFjdGlvbnM6IHRoaXMuY3VycmVudEFjdGlvbnMgfSlcbiAgICB9XG4gIH1cblxuICAvLyBFZGl0b3IgZmlsdGVyc1xuXG4gIHJ1bkVkaXRvckZpbHRlcnMoKSB7XG4gICAgbGV0IHNuYXBzaG90ID0gdGhpcy5jb21wb3NpdGlvbi5nZXRTbmFwc2hvdCgpXG5cbiAgICBBcnJheS5mcm9tKHRoaXMuZWRpdG9yLmZpbHRlcnMpLmZvckVhY2goKGZpbHRlcikgPT4ge1xuICAgICAgY29uc3QgeyBkb2N1bWVudCwgc2VsZWN0ZWRSYW5nZSB9ID0gc25hcHNob3RcbiAgICAgIHNuYXBzaG90ID0gZmlsdGVyLmNhbGwodGhpcy5lZGl0b3IsIHNuYXBzaG90KSB8fCB7fVxuICAgICAgaWYgKCFzbmFwc2hvdC5kb2N1bWVudCkge1xuICAgICAgICBzbmFwc2hvdC5kb2N1bWVudCA9IGRvY3VtZW50XG4gICAgICB9XG4gICAgICBpZiAoIXNuYXBzaG90LnNlbGVjdGVkUmFuZ2UpIHtcbiAgICAgICAgc25hcHNob3Quc2VsZWN0ZWRSYW5nZSA9IHNlbGVjdGVkUmFuZ2VcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYgKCFzbmFwc2hvdHNBcmVFcXVhbChzbmFwc2hvdCwgdGhpcy5jb21wb3NpdGlvbi5nZXRTbmFwc2hvdCgpKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb24ubG9hZFNuYXBzaG90KHNuYXBzaG90KVxuICAgIH1cbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICB1cGRhdGVJbnB1dEVsZW1lbnQoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuY29tcG9zaXRpb25Db250cm9sbGVyLmdldFNlcmlhbGl6YWJsZUVsZW1lbnQoKVxuICAgIGNvbnN0IHZhbHVlID0gc2VyaWFsaXplVG9Db250ZW50VHlwZShlbGVtZW50LCBcInRleHQvaHRtbFwiKVxuICAgIHJldHVybiB0aGlzLmVkaXRvckVsZW1lbnQuc2V0Rm9ybVZhbHVlKHZhbHVlKVxuICB9XG5cbiAgbm90aWZ5RWRpdG9yRWxlbWVudChtZXNzYWdlLCBkYXRhKSB7XG4gICAgc3dpdGNoIChtZXNzYWdlKSB7XG4gICAgICBjYXNlIFwiZG9jdW1lbnQtY2hhbmdlXCI6XG4gICAgICAgIHRoaXMuZG9jdW1lbnRDaGFuZ2VkU2luY2VMYXN0UmVuZGVyID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcInJlbmRlclwiOlxuICAgICAgICBpZiAodGhpcy5kb2N1bWVudENoYW5nZWRTaW5jZUxhc3RSZW5kZXIpIHtcbiAgICAgICAgICB0aGlzLmRvY3VtZW50Q2hhbmdlZFNpbmNlTGFzdFJlbmRlciA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5ub3RpZnlFZGl0b3JFbGVtZW50KFwiY2hhbmdlXCIpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgXCJjaGFuZ2VcIjpcbiAgICAgIGNhc2UgXCJhdHRhY2htZW50LWFkZFwiOlxuICAgICAgY2FzZSBcImF0dGFjaG1lbnQtZWRpdFwiOlxuICAgICAgY2FzZSBcImF0dGFjaG1lbnQtcmVtb3ZlXCI6XG4gICAgICAgIHRoaXMudXBkYXRlSW5wdXRFbGVtZW50KClcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lZGl0b3JFbGVtZW50Lm5vdGlmeShtZXNzYWdlLCBkYXRhKVxuICB9XG5cbiAgcmVtb3ZlQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgdGhpcy5lZGl0b3IucmVjb3JkVW5kb0VudHJ5KFwiRGVsZXRlIEF0dGFjaG1lbnRcIilcbiAgICB0aGlzLmNvbXBvc2l0aW9uLnJlbW92ZUF0dGFjaG1lbnQoYXR0YWNobWVudClcbiAgICByZXR1cm4gdGhpcy5yZW5kZXIoKVxuICB9XG5cbiAgcmVjb3JkRm9ybWF0dGluZ1VuZG9FbnRyeShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgY29uc3QgYmxvY2tDb25maWcgPSBnZXRCbG9ja0NvbmZpZyhhdHRyaWJ1dGVOYW1lKVxuICAgIGNvbnN0IGxvY2F0aW9uUmFuZ2UgPSB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuZ2V0TG9jYXRpb25SYW5nZSgpXG4gICAgaWYgKGJsb2NrQ29uZmlnIHx8ICFyYW5nZUlzQ29sbGFwc2VkKGxvY2F0aW9uUmFuZ2UpKSB7XG4gICAgICByZXR1cm4gdGhpcy5lZGl0b3IucmVjb3JkVW5kb0VudHJ5KFwiRm9ybWF0dGluZ1wiLCB7IGNvbnRleHQ6IHRoaXMuZ2V0VW5kb0NvbnRleHQoKSwgY29uc29saWRhdGFibGU6IHRydWUgfSlcbiAgICB9XG4gIH1cblxuICByZWNvcmRUeXBpbmdVbmRvRW50cnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yLnJlY29yZFVuZG9FbnRyeShcIlR5cGluZ1wiLCB7XG4gICAgICBjb250ZXh0OiB0aGlzLmdldFVuZG9Db250ZXh0KHRoaXMuY3VycmVudEF0dHJpYnV0ZXMpLFxuICAgICAgY29uc29saWRhdGFibGU6IHRydWUsXG4gICAgfSlcbiAgfVxuXG4gIGdldFVuZG9Db250ZXh0KC4uLmNvbnRleHQpIHtcbiAgICByZXR1cm4gWyB0aGlzLmdldExvY2F0aW9uQ29udGV4dCgpLCB0aGlzLmdldFRpbWVDb250ZXh0KCksIC4uLkFycmF5LmZyb20oY29udGV4dCkgXVxuICB9XG5cbiAgZ2V0TG9jYXRpb25Db250ZXh0KCkge1xuICAgIGNvbnN0IGxvY2F0aW9uUmFuZ2UgPSB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuZ2V0TG9jYXRpb25SYW5nZSgpXG4gICAgaWYgKHJhbmdlSXNDb2xsYXBzZWQobG9jYXRpb25SYW5nZSkpIHtcbiAgICAgIHJldHVybiBsb2NhdGlvblJhbmdlWzBdLmluZGV4XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsb2NhdGlvblJhbmdlXG4gICAgfVxuICB9XG5cbiAgZ2V0VGltZUNvbnRleHQoKSB7XG4gICAgaWYgKGNvbmZpZy51bmRvLmludGVydmFsID4gMCkge1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyBjb25maWcudW5kby5pbnRlcnZhbClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gIH1cblxuICBpc0ZvY3VzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yRWxlbWVudCA9PT0gdGhpcy5lZGl0b3JFbGVtZW50Lm93bmVyRG9jdW1lbnQ/LmFjdGl2ZUVsZW1lbnRcbiAgfVxuXG4gIC8vIERldGVjdCBcIkN1cnNvciBkaXNhcHBlYXJzIHNwb3JhZGljYWxseVwiIEZpcmVmb3ggYnVnLlxuICAvLyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTIyNjMwMVxuICBpc0ZvY3VzZWRJbnZpc2libHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNGb2N1c2VkKCkgJiYgIXRoaXMuZ2V0TG9jYXRpb25SYW5nZSgpXG4gIH1cblxuICBnZXQgYWN0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5hY3Rpb25zXG4gIH1cbn1cblxuRWRpdG9yQ29udHJvbGxlci5wcm94eU1ldGhvZChcImdldFNlbGVjdGlvbk1hbmFnZXIoKS5zZXRMb2NhdGlvblJhbmdlXCIpXG5FZGl0b3JDb250cm9sbGVyLnByb3h5TWV0aG9kKFwiZ2V0U2VsZWN0aW9uTWFuYWdlcigpLmdldExvY2F0aW9uUmFuZ2VcIilcbiIsICJpbXBvcnQgKiBhcyBjb25maWcgZnJvbSBcInRyaXgvY29uZmlnXCJcblxuaW1wb3J0IHsgaW5zdGFsbERlZmF1bHRDU1NGb3JUYWdOYW1lIH0gZnJvbSBcInRyaXgvY29yZS9oZWxwZXJzXCJcblxuaW5zdGFsbERlZmF1bHRDU1NGb3JUYWdOYW1lKFwidHJpeC10b29sYmFyXCIsIGBcXFxuJXQge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuJXQge1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xufVxuXG4ldCBbZGF0YS10cml4LWRpYWxvZ10ge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4ldCBbZGF0YS10cml4LWRpYWxvZ11bZGF0YS10cml4LWFjdGl2ZV0ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuJXQgW2RhdGEtdHJpeC1kaWFsb2ddIFtkYXRhLXRyaXgtdmFsaWRhdGVdOmludmFsaWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZkZGRkO1xufWApXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyaXhUb29sYmFyRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcblxuICAvLyBFbGVtZW50IGxpZmVjeWNsZVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLmlubmVySFRNTCA9PT0gXCJcIikge1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSBjb25maWcudG9vbGJhci5nZXREZWZhdWx0SFRNTCgpXG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0ICogYXMgY29uZmlnIGZyb20gXCJ0cml4L2NvbmZpZ1wiXG5cbmltcG9ydCB7XG4gIGZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlLFxuICBoYW5kbGVFdmVudCxcbiAgaGFuZGxlRXZlbnRPbmNlLFxuICBpbnN0YWxsRGVmYXVsdENTU0ZvclRhZ05hbWUsXG4gIG1ha2VFbGVtZW50LFxuICB0cmlnZ2VyRXZlbnQsXG59IGZyb20gXCJ0cml4L2NvcmUvaGVscGVyc1wiXG5cbmltcG9ydCB7IGF0dGFjaG1lbnRTZWxlY3RvciB9IGZyb20gXCJ0cml4L2NvbmZpZy9hdHRhY2htZW50c1wiXG5pbXBvcnQgRWRpdG9yQ29udHJvbGxlciBmcm9tIFwidHJpeC9jb250cm9sbGVycy9lZGl0b3JfY29udHJvbGxlclwiXG5pbXBvcnQgXCJ0cml4L2VsZW1lbnRzL3RyaXhfdG9vbGJhcl9lbGVtZW50XCJcblxubGV0IGlkID0gMFxuXG4vLyBDb250ZW50ZWRpdGFibGUgc3VwcG9ydCBoZWxwZXJzXG5cbmNvbnN0IGF1dG9mb2N1cyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiOmZvY3VzXCIpKSB7XG4gICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKFwiYXV0b2ZvY3VzXCIpICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbYXV0b2ZvY3VzXVwiKSA9PT0gZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuZm9jdXMoKVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBtYWtlRWRpdGFibGUgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiKSkge1xuICAgIHJldHVyblxuICB9XG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIsIFwiXCIpXG4gIHJldHVybiBoYW5kbGVFdmVudE9uY2UoXCJmb2N1c1wiLCB7XG4gICAgb25FbGVtZW50OiBlbGVtZW50LFxuICAgIHdpdGhDYWxsYmFjaygpIHtcbiAgICAgIHJldHVybiBjb25maWd1cmVDb250ZW50RWRpdGFibGUoZWxlbWVudClcbiAgICB9LFxuICB9KVxufVxuXG5jb25zdCBjb25maWd1cmVDb250ZW50RWRpdGFibGUgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGRpc2FibGVPYmplY3RSZXNpemluZyhlbGVtZW50KVxuICByZXR1cm4gc2V0RGVmYXVsdFBhcmFncmFwaFNlcGFyYXRvcihlbGVtZW50KVxufVxuXG5jb25zdCBkaXNhYmxlT2JqZWN0UmVzaXppbmcgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGlmIChkb2N1bWVudC5xdWVyeUNvbW1hbmRTdXBwb3J0ZWQ/LihcImVuYWJsZU9iamVjdFJlc2l6aW5nXCIpKSB7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJlbmFibGVPYmplY3RSZXNpemluZ1wiLCBmYWxzZSwgZmFsc2UpXG4gICAgcmV0dXJuIGhhbmRsZUV2ZW50KFwibXNjb250cm9sc2VsZWN0XCIsIHsgb25FbGVtZW50OiBlbGVtZW50LCBwcmV2ZW50RGVmYXVsdDogdHJ1ZSB9KVxuICB9XG59XG5cbmNvbnN0IHNldERlZmF1bHRQYXJhZ3JhcGhTZXBhcmF0b3IgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGlmIChkb2N1bWVudC5xdWVyeUNvbW1hbmRTdXBwb3J0ZWQ/LihcIkRlZmF1bHRQYXJhZ3JhcGhTZXBhcmF0b3JcIikpIHtcbiAgICBjb25zdCB7IHRhZ05hbWUgfSA9IGNvbmZpZy5ibG9ja0F0dHJpYnV0ZXMuZGVmYXVsdFxuICAgIGlmIChbIFwiZGl2XCIsIFwicFwiIF0uaW5jbHVkZXModGFnTmFtZSkpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5leGVjQ29tbWFuZChcIkRlZmF1bHRQYXJhZ3JhcGhTZXBhcmF0b3JcIiwgZmFsc2UsIHRhZ05hbWUpXG4gICAgfVxuICB9XG59XG5cbi8vIEFjY2Vzc2liaWxpdHkgaGVscGVyc1xuXG5jb25zdCBhZGRBY2Nlc3NpYmlsaXR5Um9sZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKFwicm9sZVwiKSkge1xuICAgIHJldHVyblxuICB9XG4gIHJldHVybiBlbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJ0ZXh0Ym94XCIpXG59XG5cbmNvbnN0IGVuc3VyZUFyaWFMYWJlbCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiKSB8fCBlbGVtZW50Lmhhc0F0dHJpYnV0ZShcImFyaWEtbGFiZWxsZWRieVwiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgdXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgdGV4dHMgPSBBcnJheS5mcm9tKGVsZW1lbnQubGFiZWxzKS5tYXAoKGxhYmVsKSA9PiB7XG4gICAgICBpZiAoIWxhYmVsLmNvbnRhaW5zKGVsZW1lbnQpKSByZXR1cm4gbGFiZWwudGV4dENvbnRlbnRcbiAgICB9KS5maWx0ZXIodGV4dCA9PiB0ZXh0KVxuXG4gICAgY29uc3QgdGV4dCA9IHRleHRzLmpvaW4oXCIgXCIpXG4gICAgaWYgKHRleHQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdGV4dClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiKVxuICAgIH1cbiAgfVxuICB1cGRhdGUoKVxuICByZXR1cm4gaGFuZGxlRXZlbnQoXCJmb2N1c1wiLCB7IG9uRWxlbWVudDogZWxlbWVudCwgd2l0aENhbGxiYWNrOiB1cGRhdGUgfSlcbn1cblxuLy8gU3R5bGVcblxuY29uc3QgY3Vyc29yVGFyZ2V0U3R5bGVzID0gKGZ1bmN0aW9uKCkge1xuICBpZiAoY29uZmlnLmJyb3dzZXIuZm9yY2VzT2JqZWN0UmVzaXppbmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGxheTogXCJpbmxpbmVcIixcbiAgICAgIHdpZHRoOiBcImF1dG9cIixcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCIsXG4gICAgICB3aWR0aDogXCIxcHhcIixcbiAgICB9XG4gIH1cbn0pKClcblxuaW5zdGFsbERlZmF1bHRDU1NGb3JUYWdOYW1lKFwidHJpeC1lZGl0b3JcIiwgYFxcXG4ldCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG59XG5cbiV0OmVtcHR5OjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IGF0dHIocGxhY2Vob2xkZXIpO1xuICAgIGNvbG9yOiBncmF5dGV4dDtcbiAgICBjdXJzb3I6IHRleHQ7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgd2hpdGUtc3BhY2U6IHByZS1saW5lO1xufVxuXG4ldCBhW2NvbnRlbnRlZGl0YWJsZT1mYWxzZV0ge1xuICAgIGN1cnNvcjogdGV4dDtcbn1cblxuJXQgaW1nIHtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiBhdXRvO1xufVxuXG4ldCAke2F0dGFjaG1lbnRTZWxlY3Rvcn0gZmlnY2FwdGlvbiB0ZXh0YXJlYSB7XG4gICAgcmVzaXplOiBub25lO1xufVxuXG4ldCAke2F0dGFjaG1lbnRTZWxlY3Rvcn0gZmlnY2FwdGlvbiB0ZXh0YXJlYS50cml4LWF1dG9yZXNpemUtY2xvbmUge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAtOTk5OXB4O1xuICAgIG1heC1oZWlnaHQ6IDBweDtcbn1cblxuJXQgJHthdHRhY2htZW50U2VsZWN0b3J9IGZpZ2NhcHRpb25bZGF0YS10cml4LXBsYWNlaG9sZGVyXTplbXB0eTo6YmVmb3JlIHtcbiAgICBjb250ZW50OiBhdHRyKGRhdGEtdHJpeC1wbGFjZWhvbGRlcik7XG4gICAgY29sb3I6IGdyYXl0ZXh0O1xufVxuXG4ldCBbZGF0YS10cml4LWN1cnNvci10YXJnZXRdIHtcbiAgICBkaXNwbGF5OiAke2N1cnNvclRhcmdldFN0eWxlcy5kaXNwbGF5fSAhaW1wb3J0YW50O1xuICAgIHdpZHRoOiAke2N1cnNvclRhcmdldFN0eWxlcy53aWR0aH0gIWltcG9ydGFudDtcbiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XG4gICAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7XG4gICAgYm9yZGVyOiBub25lICFpbXBvcnRhbnQ7XG59XG5cbiV0IFtkYXRhLXRyaXgtY3Vyc29yLXRhcmdldD1sZWZ0XSB7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcCAhaW1wb3J0YW50O1xuICAgIG1hcmdpbi1sZWZ0OiAtMXB4ICFpbXBvcnRhbnQ7XG59XG5cbiV0IFtkYXRhLXRyaXgtY3Vyc29yLXRhcmdldD1yaWdodF0ge1xuICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b20gIWltcG9ydGFudDtcbiAgICBtYXJnaW4tcmlnaHQ6IC0xcHggIWltcG9ydGFudDtcbn1gKVxuXG5jbGFzcyBFbGVtZW50SW50ZXJuYWxzRGVsZWdhdGUge1xuICAjaW50ZXJuYWxzXG5cbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLiNpbnRlcm5hbHMgPSBlbGVtZW50LmF0dGFjaEludGVybmFscygpXG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLiN2YWxpZGF0ZSgpXG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgfVxuXG4gIGdldCBsYWJlbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2ludGVybmFscy5sYWJlbHNcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmlucHV0RWxlbWVudD8uZGlzYWJsZWRcbiAgfVxuXG4gIHNldCBkaXNhYmxlZCh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC50b2dnbGVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCByZXF1aXJlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50Lmhhc0F0dHJpYnV0ZShcInJlcXVpcmVkXCIpXG4gIH1cblxuICBzZXQgcmVxdWlyZWQodmFsdWUpIHtcbiAgICB0aGlzLmVsZW1lbnQudG9nZ2xlQXR0cmlidXRlKFwicmVxdWlyZWRcIiwgdmFsdWUpXG4gICAgdGhpcy4jdmFsaWRhdGUoKVxuICB9XG5cbiAgZ2V0IHZhbGlkaXR5KCkge1xuICAgIHJldHVybiB0aGlzLiNpbnRlcm5hbHMudmFsaWRpdHlcbiAgfVxuXG4gIGdldCB2YWxpZGF0aW9uTWVzc2FnZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jaW50ZXJuYWxzLnZhbGlkYXRpb25NZXNzYWdlXG4gIH1cblxuICBnZXQgd2lsbFZhbGlkYXRlKCkge1xuICAgIHJldHVybiB0aGlzLiNpbnRlcm5hbHMud2lsbFZhbGlkYXRlXG4gIH1cblxuICBzZXRGb3JtVmFsdWUodmFsdWUpIHtcbiAgICB0aGlzLiN2YWxpZGF0ZSgpXG4gIH1cblxuICBjaGVja1ZhbGlkaXR5KCkge1xuICAgIHJldHVybiB0aGlzLiNpbnRlcm5hbHMuY2hlY2tWYWxpZGl0eSgpXG4gIH1cblxuICByZXBvcnRWYWxpZGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy4jaW50ZXJuYWxzLnJlcG9ydFZhbGlkaXR5KClcbiAgfVxuXG4gIHNldEN1c3RvbVZhbGlkaXR5KHZhbGlkYXRpb25NZXNzYWdlKSB7XG4gICAgdGhpcy4jdmFsaWRhdGUodmFsaWRhdGlvbk1lc3NhZ2UpXG4gIH1cblxuICAjdmFsaWRhdGUoY3VzdG9tVmFsaWRhdGlvbk1lc3NhZ2UgPSBcIlwiKSB7XG4gICAgY29uc3QgeyByZXF1aXJlZCwgdmFsdWUgfSA9IHRoaXMuZWxlbWVudFxuICAgIGNvbnN0IHZhbHVlTWlzc2luZyA9IHJlcXVpcmVkICYmICF2YWx1ZVxuICAgIGNvbnN0IGN1c3RvbUVycm9yID0gISFjdXN0b21WYWxpZGF0aW9uTWVzc2FnZVxuICAgIGNvbnN0IGlucHV0ID0gbWFrZUVsZW1lbnQoXCJpbnB1dFwiLCB7IHJlcXVpcmVkIH0pXG4gICAgY29uc3QgdmFsaWRhdGlvbk1lc3NhZ2UgPSBjdXN0b21WYWxpZGF0aW9uTWVzc2FnZSB8fCBpbnB1dC52YWxpZGF0aW9uTWVzc2FnZVxuXG4gICAgdGhpcy4jaW50ZXJuYWxzLnNldFZhbGlkaXR5KHsgdmFsdWVNaXNzaW5nLCBjdXN0b21FcnJvciB9LCB2YWxpZGF0aW9uTWVzc2FnZSlcbiAgfVxufVxuXG5jbGFzcyBMZWdhY3lEZWxlZ2F0ZSB7XG4gICNmb2N1c0hhbmRsZXJcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy4jZm9jdXNIYW5kbGVyID0gZW5zdXJlQXJpYUxhYmVsKHRoaXMuZWxlbWVudClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2V0XCIsIHRoaXMuI3Jlc2V0QnViYmxlZCwgZmFsc2UpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLiNjbGlja0J1YmJsZWQsIGZhbHNlKVxuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy4jZm9jdXNIYW5kbGVyPy5kZXN0cm95KClcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2V0XCIsIHRoaXMuI3Jlc2V0QnViYmxlZCwgZmFsc2UpXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLiNjbGlja0J1YmJsZWQsIGZhbHNlKVxuICB9XG5cbiAgZ2V0IGxhYmVscygpIHtcbiAgICBjb25zdCBsYWJlbHMgPSBbXVxuICAgIGlmICh0aGlzLmVsZW1lbnQuaWQgJiYgdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQpIHtcbiAgICAgIGxhYmVscy5wdXNoKC4uLkFycmF5LmZyb20odGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgbGFiZWxbZm9yPScke3RoaXMuZWxlbWVudC5pZH0nXWApIHx8IFtdKSlcbiAgICB9XG5cbiAgICBjb25zdCBsYWJlbCA9IGZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlKHRoaXMuZWxlbWVudCwgeyBtYXRjaGluZ1NlbGVjdG9yOiBcImxhYmVsXCIgfSlcbiAgICBpZiAobGFiZWwpIHtcbiAgICAgIGlmIChbIHRoaXMuZWxlbWVudCwgbnVsbCBdLmluY2x1ZGVzKGxhYmVsLmNvbnRyb2wpKSB7XG4gICAgICAgIGxhYmVscy5wdXNoKGxhYmVsKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsYWJlbHNcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpIHtcbiAgICBjb25zb2xlLndhcm4oXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgW2Rpc2FibGVkXSBhdHRyaWJ1dGUgZm9yIHRyaXgtZWRpdG9yIGVsZW1lbnRzLlwiKVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBzZXQgZGlzYWJsZWQodmFsdWUpIHtcbiAgICBjb25zb2xlLndhcm4oXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgW2Rpc2FibGVkXSBhdHRyaWJ1dGUgZm9yIHRyaXgtZWRpdG9yIGVsZW1lbnRzLlwiKVxuICB9XG5cbiAgZ2V0IHJlcXVpcmVkKCkge1xuICAgIGNvbnNvbGUud2FybihcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSBbcmVxdWlyZWRdIGF0dHJpYnV0ZSBmb3IgdHJpeC1lZGl0b3IgZWxlbWVudHMuXCIpXG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHNldCByZXF1aXJlZCh2YWx1ZSkge1xuICAgIGNvbnNvbGUud2FybihcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSBbcmVxdWlyZWRdIGF0dHJpYnV0ZSBmb3IgdHJpeC1lZGl0b3IgZWxlbWVudHMuXCIpXG4gIH1cblxuICBnZXQgdmFsaWRpdHkoKSB7XG4gICAgY29uc29sZS53YXJuKFwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIHZhbGlkaXR5IHByb3BlcnR5IGZvciB0cml4LWVkaXRvciBlbGVtZW50cy5cIilcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHZhbGlkYXRpb25NZXNzYWdlKCkge1xuICAgIGNvbnNvbGUud2FybihcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSB2YWxpZGF0aW9uTWVzc2FnZSBwcm9wZXJ0eSBmb3IgdHJpeC1lZGl0b3IgZWxlbWVudHMuXCIpXG5cbiAgICByZXR1cm4gXCJcIlxuICB9XG5cbiAgZ2V0IHdpbGxWYWxpZGF0ZSgpIHtcbiAgICBjb25zb2xlLndhcm4oXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgd2lsbFZhbGlkYXRlIHByb3BlcnR5IGZvciB0cml4LWVkaXRvciBlbGVtZW50cy5cIilcblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgc2V0Rm9ybVZhbHVlKHZhbHVlKSB7XG4gIH1cblxuICBjaGVja1ZhbGlkaXR5KCkge1xuICAgIGNvbnNvbGUud2FybihcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGNoZWNrVmFsaWRpdHkoKSBmb3IgdHJpeC1lZGl0b3IgZWxlbWVudHMuXCIpXG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgcmVwb3J0VmFsaWRpdHkoKSB7XG4gICAgY29uc29sZS53YXJuKFwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgcmVwb3J0VmFsaWRpdHkoKSBmb3IgdHJpeC1lZGl0b3IgZWxlbWVudHMuXCIpXG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgc2V0Q3VzdG9tVmFsaWRpdHkodmFsaWRhdGlvbk1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLndhcm4oXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBzZXRDdXN0b21WYWxpZGl0eSh2YWxpZGF0aW9uTWVzc2FnZSkgZm9yIHRyaXgtZWRpdG9yIGVsZW1lbnRzLlwiKVxuICB9XG5cbiAgI3Jlc2V0QnViYmxlZCA9IChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSB0aGlzLmVsZW1lbnQuZm9ybSkgcmV0dXJuXG4gICAgdGhpcy5lbGVtZW50LnJlc2V0KClcbiAgfVxuXG4gICNjbGlja0J1YmJsZWQgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuXG4gICAgaWYgKHRoaXMuZWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpKSByZXR1cm5cblxuICAgIGNvbnN0IGxhYmVsID0gZmluZENsb3Nlc3RFbGVtZW50RnJvbU5vZGUoZXZlbnQudGFyZ2V0LCB7IG1hdGNoaW5nU2VsZWN0b3I6IFwibGFiZWxcIiB9KVxuICAgIGlmICghbGFiZWwpIHJldHVyblxuXG4gICAgaWYgKCFBcnJheS5mcm9tKHRoaXMubGFiZWxzKS5pbmNsdWRlcyhsYWJlbCkpIHJldHVyblxuXG4gICAgdGhpcy5lbGVtZW50LmZvY3VzKClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcml4RWRpdG9yRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgc3RhdGljIGZvcm1Bc3NvY2lhdGVkID0gXCJFbGVtZW50SW50ZXJuYWxzXCIgaW4gd2luZG93XG5cbiAgI2RlbGVnYXRlXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuI2RlbGVnYXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5mb3JtQXNzb2NpYXRlZCA/XG4gICAgICBuZXcgRWxlbWVudEludGVybmFsc0RlbGVnYXRlKHRoaXMpIDpcbiAgICAgIG5ldyBMZWdhY3lEZWxlZ2F0ZSh0aGlzKVxuICB9XG5cbiAgLy8gUHJvcGVydGllc1xuXG4gIGdldCB0cml4SWQoKSB7XG4gICAgaWYgKHRoaXMuaGFzQXR0cmlidXRlKFwidHJpeC1pZFwiKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKFwidHJpeC1pZFwiKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShcInRyaXgtaWRcIiwgKytpZClcbiAgICAgIHJldHVybiB0aGlzLnRyaXhJZFxuICAgIH1cbiAgfVxuXG4gIGdldCBsYWJlbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2RlbGVnYXRlLmxhYmVsc1xuICB9XG5cbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLiNkZWxlZ2F0ZS5kaXNhYmxlZFxuICB9XG5cbiAgc2V0IGRpc2FibGVkKHZhbHVlKSB7XG4gICAgdGhpcy4jZGVsZWdhdGUuZGlzYWJsZWQgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IHJlcXVpcmVkKCkge1xuICAgIHJldHVybiB0aGlzLiNkZWxlZ2F0ZS5yZXF1aXJlZFxuICB9XG5cbiAgc2V0IHJlcXVpcmVkKHZhbHVlKSB7XG4gICAgdGhpcy4jZGVsZWdhdGUucmVxdWlyZWQgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IHZhbGlkaXR5KCkge1xuICAgIHJldHVybiB0aGlzLiNkZWxlZ2F0ZS52YWxpZGl0eVxuICB9XG5cbiAgZ2V0IHZhbGlkYXRpb25NZXNzYWdlKCkge1xuICAgIHJldHVybiB0aGlzLiNkZWxlZ2F0ZS52YWxpZGF0aW9uTWVzc2FnZVxuICB9XG5cbiAgZ2V0IHdpbGxWYWxpZGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jZGVsZWdhdGUud2lsbFZhbGlkYXRlXG4gIH1cblxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbE5hbWVcbiAgfVxuXG4gIGdldCB0b29sYmFyRWxlbWVudCgpIHtcbiAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoXCJ0b29sYmFyXCIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50Py5nZXRFbGVtZW50QnlJZCh0aGlzLmdldEF0dHJpYnV0ZShcInRvb2xiYXJcIikpXG4gICAgfSBlbHNlIGlmICh0aGlzLnBhcmVudE5vZGUpIHtcbiAgICAgIGNvbnN0IHRvb2xiYXJJZCA9IGB0cml4LXRvb2xiYXItJHt0aGlzLnRyaXhJZH1gXG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShcInRvb2xiYXJcIiwgdG9vbGJhcklkKVxuICAgICAgY29uc3QgZWxlbWVudCA9IG1ha2VFbGVtZW50KFwidHJpeC10b29sYmFyXCIsIHsgaWQ6IHRvb2xiYXJJZCB9KVxuICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50LCB0aGlzKVxuICAgICAgcmV0dXJuIGVsZW1lbnRcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgfVxuXG4gIGdldCBmb3JtKCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0RWxlbWVudD8uZm9ybVxuICB9XG5cbiAgZ2V0IGlucHV0RWxlbWVudCgpIHtcbiAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoXCJpbnB1dFwiKSkge1xuICAgICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudD8uZ2V0RWxlbWVudEJ5SWQodGhpcy5nZXRBdHRyaWJ1dGUoXCJpbnB1dFwiKSlcbiAgICB9IGVsc2UgaWYgKHRoaXMucGFyZW50Tm9kZSkge1xuICAgICAgY29uc3QgaW5wdXRJZCA9IGB0cml4LWlucHV0LSR7dGhpcy50cml4SWR9YFxuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJpbnB1dFwiLCBpbnB1dElkKVxuICAgICAgY29uc3QgZWxlbWVudCA9IG1ha2VFbGVtZW50KFwiaW5wdXRcIiwgeyB0eXBlOiBcImhpZGRlblwiLCBpZDogaW5wdXRJZCB9KVxuICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50LCB0aGlzLm5leHRFbGVtZW50U2libGluZylcbiAgICAgIHJldHVybiBlbGVtZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICBnZXQgZWRpdG9yKCkge1xuICAgIHJldHVybiB0aGlzLmVkaXRvckNvbnRyb2xsZXI/LmVkaXRvclxuICB9XG5cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRFbGVtZW50Py5uYW1lXG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRFbGVtZW50Py52YWx1ZVxuICB9XG5cbiAgc2V0IHZhbHVlKGRlZmF1bHRWYWx1ZSkge1xuICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlXG4gICAgdGhpcy5lZGl0b3I/LmxvYWRIVE1MKHRoaXMuZGVmYXVsdFZhbHVlKVxuICB9XG5cbiAgLy8gQ29udHJvbGxlciBkZWxlZ2F0ZSBtZXRob2RzXG5cbiAgbm90aWZ5KG1lc3NhZ2UsIGRhdGEpIHtcbiAgICBpZiAodGhpcy5lZGl0b3JDb250cm9sbGVyKSB7XG4gICAgICByZXR1cm4gdHJpZ2dlckV2ZW50KGB0cml4LSR7bWVzc2FnZX1gLCB7IG9uRWxlbWVudDogdGhpcywgYXR0cmlidXRlczogZGF0YSB9KVxuICAgIH1cbiAgfVxuXG4gIHNldEZvcm1WYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0aGlzLmlucHV0RWxlbWVudCkge1xuICAgICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUgPSB2YWx1ZVxuICAgICAgdGhpcy4jZGVsZWdhdGUuc2V0Rm9ybVZhbHVlKHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIC8vIEVsZW1lbnQgbGlmZWN5Y2xlXG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgaWYgKCF0aGlzLmhhc0F0dHJpYnV0ZShcImRhdGEtdHJpeC1pbnRlcm5hbFwiKSkge1xuICAgICAgbWFrZUVkaXRhYmxlKHRoaXMpXG4gICAgICBhZGRBY2Nlc3NpYmlsaXR5Um9sZSh0aGlzKVxuXG4gICAgICBpZiAoIXRoaXMuZWRpdG9yQ29udHJvbGxlcikge1xuICAgICAgICB0cmlnZ2VyRXZlbnQoXCJ0cml4LWJlZm9yZS1pbml0aWFsaXplXCIsIHsgb25FbGVtZW50OiB0aGlzIH0pXG4gICAgICAgIHRoaXMuZWRpdG9yQ29udHJvbGxlciA9IG5ldyBFZGl0b3JDb250cm9sbGVyKHtcbiAgICAgICAgICBlZGl0b3JFbGVtZW50OiB0aGlzLFxuICAgICAgICAgIGh0bWw6IHRoaXMuZGVmYXVsdFZhbHVlID0gdGhpcy52YWx1ZSxcbiAgICAgICAgfSlcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRyaWdnZXJFdmVudChcInRyaXgtaW5pdGlhbGl6ZVwiLCB7IG9uRWxlbWVudDogdGhpcyB9KSlcbiAgICAgIH1cbiAgICAgIHRoaXMuZWRpdG9yQ29udHJvbGxlci5yZWdpc3RlclNlbGVjdGlvbk1hbmFnZXIoKVxuICAgICAgdGhpcy4jZGVsZWdhdGUuY29ubmVjdGVkQ2FsbGJhY2soKVxuICAgICAgYXV0b2ZvY3VzKHRoaXMpXG4gICAgfVxuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5lZGl0b3JDb250cm9sbGVyPy51bnJlZ2lzdGVyU2VsZWN0aW9uTWFuYWdlcigpXG4gICAgdGhpcy4jZGVsZWdhdGUuZGlzY29ubmVjdGVkQ2FsbGJhY2soKVxuICB9XG5cbiAgLy8gRm9ybSBzdXBwb3J0XG5cbiAgY2hlY2tWYWxpZGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy4jZGVsZWdhdGUuY2hlY2tWYWxpZGl0eSgpXG4gIH1cblxuICByZXBvcnRWYWxpZGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy4jZGVsZWdhdGUucmVwb3J0VmFsaWRpdHkoKVxuICB9XG5cbiAgc2V0Q3VzdG9tVmFsaWRpdHkodmFsaWRhdGlvbk1lc3NhZ2UpIHtcbiAgICB0aGlzLiNkZWxlZ2F0ZS5zZXRDdXN0b21WYWxpZGl0eSh2YWxpZGF0aW9uTWVzc2FnZSlcbiAgfVxuXG4gIGZvcm1EaXNhYmxlZENhbGxiYWNrKGRpc2FibGVkKSB7XG4gICAgaWYgKHRoaXMuaW5wdXRFbGVtZW50KSB7XG4gICAgICB0aGlzLmlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGRpc2FibGVkXG4gICAgfVxuICAgIHRoaXMudG9nZ2xlQXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIsICFkaXNhYmxlZClcbiAgfVxuXG4gIGZvcm1SZXNldENhbGxiYWNrKCkge1xuICAgIHRoaXMucmVzZXQoKVxuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuZGVmYXVsdFZhbHVlXG4gIH1cbn1cbiIsICJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uLy4uL3BhY2thZ2UuanNvblwiXG5cbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tIFwidHJpeC9jb25maWdcIlxuaW1wb3J0ICogYXMgY29yZSBmcm9tIFwidHJpeC9jb3JlXCJcbmltcG9ydCAqIGFzIG1vZGVscyBmcm9tIFwidHJpeC9tb2RlbHNcIlxuaW1wb3J0ICogYXMgdmlld3MgZnJvbSBcInRyaXgvdmlld3NcIlxuaW1wb3J0ICogYXMgY29udHJvbGxlcnMgZnJvbSBcInRyaXgvY29udHJvbGxlcnNcIlxuaW1wb3J0ICogYXMgb2JzZXJ2ZXJzIGZyb20gXCJ0cml4L29ic2VydmVyc1wiXG5pbXBvcnQgKiBhcyBvcGVyYXRpb25zIGZyb20gXCJ0cml4L29wZXJhdGlvbnNcIlxuaW1wb3J0ICogYXMgZWxlbWVudHMgZnJvbSBcInRyaXgvZWxlbWVudHNcIlxuaW1wb3J0ICogYXMgZmlsdGVycyBmcm9tIFwidHJpeC9maWx0ZXJzXCJcblxuY29uc3QgVHJpeCA9IHtcbiAgVkVSU0lPTjogdmVyc2lvbixcbiAgY29uZmlnLFxuICBjb3JlLFxuICBtb2RlbHMsXG4gIHZpZXdzLFxuICBjb250cm9sbGVycyxcbiAgb2JzZXJ2ZXJzLFxuICBvcGVyYXRpb25zLFxuICBlbGVtZW50cyxcbiAgZmlsdGVyc1xufVxuXG4vLyBFeHBvc2UgbW9kZWxzIHVuZGVyIHRoZSBUcml4IGNvbnN0YW50IGZvciBjb21wYXRpYmlsaXR5IHdpdGggdjFcbk9iamVjdC5hc3NpZ24oVHJpeCwgbW9kZWxzKVxuXG5mdW5jdGlvbiBzdGFydCgpIHtcbiAgaWYgKCFjdXN0b21FbGVtZW50cy5nZXQoXCJ0cml4LXRvb2xiYXJcIikpIHtcbiAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ0cml4LXRvb2xiYXJcIiwgZWxlbWVudHMuVHJpeFRvb2xiYXJFbGVtZW50KVxuICB9XG5cbiAgaWYgKCFjdXN0b21FbGVtZW50cy5nZXQoXCJ0cml4LWVkaXRvclwiKSkge1xuICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZShcInRyaXgtZWRpdG9yXCIsIGVsZW1lbnRzLlRyaXhFZGl0b3JFbGVtZW50KVxuICB9XG59XG5cbndpbmRvdy5Ucml4ID0gVHJpeFxuc2V0VGltZW91dChzdGFydCwgMClcblxuZXhwb3J0IGRlZmF1bHQgVHJpeFxuIiwgImNvbnN0IFMzVXBsb2FkZXIgPSBmdW5jdGlvbiAoZW50cmllcywgb25WaWV3RXJyb3IpIHtcbiAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcbiAgICBvblZpZXdFcnJvcigoKSA9PiB4aHIuYWJvcnQoKSlcbiAgICB4aHIub25sb2FkID0gKCkgPT4geGhyLnN0YXR1cyA9PT0gMjAwID8gZW50cnkucHJvZ3Jlc3MoMTAwKSA6IGVudHJ5LmVycm9yKClcbiAgICB4aHIub25lcnJvciA9ICgpID0+IGVudHJ5LmVycm9yKClcblxuICAgIHhoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsIChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50Lmxlbmd0aENvbXB1dGFibGUpIHtcbiAgICAgICAgbGV0IHBlcmNlbnQgPSBNYXRoLnJvdW5kKChldmVudC5sb2FkZWQgLyBldmVudC50b3RhbCkgKiAxMDApXG4gICAgICAgIGlmIChwZXJjZW50IDwgMTAwKSB7IGVudHJ5LnByb2dyZXNzKHBlcmNlbnQpIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgbGV0IHVybCA9IGVudHJ5Lm1ldGEudXJsXG4gICAgeGhyLm9wZW4oXCJQVVRcIiwgdXJsLCB0cnVlKVxuICAgIHhoci5zZW5kKGVudHJ5LmZpbGUpXG4gIH0pXG59XG5leHBvcnQgZGVmYXVsdCBTM1VwbG9hZGVyXG4iLCAiY29uc3QgTG9jYWxlSW5Mb2NhbFN0b3JhZ2UgPSB7XG4gIG1vdW50ZWQoKSB7XG4gICAgaWYgKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2xvY2FsZScpKSB7XG4gICAgICB0aGlzLnB1c2hFdmVudFRvKHRoaXMuZWwsIFwiZ290LWxvY2FsZVwiLCB7IGxvY2FsZTogc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnbG9jYWxlJykgfSlcbiAgICB9XG5cbiAgICB0aGlzLmhhbmRsZUV2ZW50KFwic2V0LWxvY2FsZVwiLCAoeyBsb2NhbGUgfSkgPT5cbiAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJsb2NhbGVcIiwgbG9jYWxlKVxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMb2NhbGVJbkxvY2FsU3RvcmFnZVxuIl0sCiAgIm1hcHBpbmdzIjogImdpQkFBQSxJQUFBQSxHQUFBQyxHQUFBLENBQUFDLEdBQUFDLEtBQUEsRUFNQyxTQUFVQyxFQUFRQyxFQUFVLENBQzNCLGNBR0MsVUFBWSxDQUdYLFFBRklDLEVBQVcsRUFDWEMsRUFBVSxDQUFDLEtBQU0sTUFBTyxTQUFVLEdBQUcsRUFDaENDLEVBQUksRUFBR0EsRUFBSUQsRUFBUSxRQUFVLENBQUNILEVBQU8sc0JBQXVCLEVBQUVJLEVBQ3JFSixFQUFPLHNCQUNMQSxFQUFPRyxFQUFRQyxDQUFDLEVBQUksdUJBQXVCLEVBQzdDSixFQUFPLHFCQUNMQSxFQUFPRyxFQUFRQyxDQUFDLEVBQUksc0JBQXNCLEdBQzFDSixFQUFPRyxFQUFRQyxDQUFDLEVBQUksNkJBQTZCLEVBRWhESixFQUFPLHdCQUNWQSxFQUFPLHNCQUF3QixTQUFVSyxFQUFVQyxFQUFTLENBQzFELElBQUlDLEVBQVcsSUFBSSxLQUFLLEVBQUUsUUFBUSxFQUM5QkMsRUFBYSxLQUFLLElBQUksRUFBRyxJQUFNRCxFQUFXTCxFQUFTLEVBQ25ETyxFQUFLVCxFQUFPLFdBQVcsVUFBWSxDQUNyQ0ssRUFBU0UsRUFBV0MsQ0FBVSxDQUNoQyxFQUFHQSxDQUFVLEVBQ2IsT0FBQU4sRUFBV0ssRUFBV0MsRUFDZkMsQ0FDVCxHQUNHVCxFQUFPLHVCQUNWQSxFQUFPLHFCQUF1QixTQUFVUyxFQUFJLENBQzFDLGFBQWFBLENBQUUsQ0FDakIsRUFDSixHQUFHLEVBRUgsSUFBSUMsRUFDRkMsRUFDQUMsRUFDQUMsRUFBa0IsS0FDbEJDLEVBQWMsS0FDZEMsRUFBZSxLQUNmQyxFQUFXLFNBQVVDLEVBQU1DLEVBQU1DLEVBQVMsQ0FDcENGLEVB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Q0EsQ0FHQSxTQUFBQyxJQUFBLENBQ0EsT0FBQSxVQUFBLE9BQUEsQ0FDQSxJQUFBLEdBQ0EsT0FBQUQsR0FBQSxFQUNBLElBQUEsR0FDQSxPQUFBRixHQUFBLFVBQUEsUUFBQSxFQUFBLE9BQUEsVUFBQSxDQUFBLENBQUEsQ0FDQSxDQUdBLElBQUFJLEVBQUEsSUFBQSxLQUFBLENBQUEsRUFDQSxPQUFBQSxFQUFBLFlBQUEsTUFBQUEsRUFBQSxTQUFBLEVBQ0FBLEVBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLENBQ0EsQ0FDQSxTQUFBQyxHQUFBQyxFQUFBQyxFQUFBLENBQ0EsSUFBQUgsRUFBQSxJQUFBLEtBQUFFLENBQUEsRUFDQSxPQUFBRixFQUFBLFFBQUFBLEVBQUEsUUFBQSxFQUFBRyxDQUFBLENBQ0EsQ0FDQSxTQUFBQyxHQUFBRixFQUFBQyxFQUFBLENBQ0EsT0FBQUYsR0FBQUMsRUFBQUMsRUFBQSxDQUFBLENBQ0EsQ0FDQSxTQUFBRSxHQUFBSCxFQUFBQyxFQUFBLENBR0EsSUFBQUgsRUFBQSxJQUFBLEtBQUFFLENBQUEsRUFDQUksRUFBQU4sRUFBQSxTQUFBLEVBQUFHLEVBQ0FJLEVBQUFELEVBQUEsR0FDQUMsRUFBQSxJQUNBQSxHQUFBLElBRUEsSUFBQUMsRUFBQVIsRUFBQSxTQUFBTSxDQUFBLEVBQ0EsT0FBQU4sRUFBQSxTQUFBLElBQUFPLEVBQUFQLEVBQUEsUUFBQSxDQUFBLEVBQUFRLENBQ0EsQ0FDQSxTQUFBQyxHQUFBUCxFQUFBQyxFQUFBLENBR0EsSUFBQUgsRUFBQSxJQUFBLEtBQUFFLENBQUEsRUFDQUssRUFBQVAsRUFBQSxTQUFBLEVBQ0FRLEVBQUFSLEVBQUEsWUFBQUEsRUFBQSxZQUFBLEVBQUFHLENBQUEsRUFDQSxPQUFBSSxJQUFBLEdBQUFQLEVBQUEsU0FBQSxJQUFBLEVBQUFBLEVBQUEsUUFBQSxDQUFBLEVBQUFRLENBQ0EsQ0FHQSxTQUFBRSxHQUFBQyxFQUFBQyxFQUFBLENBQ0EsT0FBQUQsRUFBQUMsRUFBQSxHQUFBLENBQ0EsQ0FHQSxTQUFBQyxH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QUFBLElBQUEsT0FDQXdJLEVBQUF4SSxDQUFBLEVBQUEsQ0FBQUssQ0FBQSxFQUVBbEQsRUFBQXFMLEVBQUF4SSxDQUFBLEVBQUFLLENBQUEsRUFFQW1JLENBQ0EsRUFBTyxDQUFBLENBQUksRUFDWHJCLEdBQUFBLEVBQUEsUUFDQSxLQUFBLE1BQUFBLEVBQUEsTUFBQSxJQUFBLFNBQUE3SSxFQUFBLENBQ0EsSUFBQUssRUFBQSxJQUFBLEtBQUFMLENBQUEsRUFDQSxPQUFBLE1BQUFLLENBQUEsRUFBQSxPQUFBLENBQUFBLEVBQUEsWUFBQSxFQUFBQSxFQUFBLFNBQUEsQ0FBQSxDQUNBLENBQVMsRUFFVCxDQUdBLEVBQUcsQ0FDSCxJQUFBLFNBQ0EsTUFBQSxVQUFBLENBQ0EsSUFBQWlJLEVBQUEsS0FHQSxLQUFBLFNBQUEsQ0FBQSxFQUNBLEtBQUEsT0FBQSxtQkFBQSxLQUFBLElBQUEsRUFDQSxLQUFBLE9BQUEsbUJBQUEsS0FBQSxNQUFBLEtBQUEsT0FBQSxFQUNBLEtBQUEsT0FBQSxtQkFBQSxLQUFBLE1BQUEsS0FBQSxPQUFBLEVBQ0EsSUFBQTRCLEVBQUEsS0FBQSxTQUFBLEtBQUEsSUFBQSxHQUFBLENBQUEsRUFDQUMsRUFBQSxLQUFBLEtBQUEsS0FBQSxTQUFBLEtBQUEsS0FBQSxLQUFBLFFBQ0FDLEVBQUEsS0FBQSxPQUFBLEtBQUEsUUFDQUMsRUFBQSxLQUFBLE9BQUEsS0FBQSxRQUNBeEYsRUFBQXdFLEdBQUEsS0FBQSxNQUFBLEtBQUEsSUFBQSxFQUNBLE1BQUEsS0FBQSxLQUFBLEtBQUEsUUFBQSxFQUFBLFFBQUEsU0FBQTdFLEVBQUE1SSxFQUFBLENBQ0EsSUFBQW9OLEVBQUF4RSxFQUFBLFVBQ0FuRSxHQUFBSCxHQUFBb0ksRUFBQSxLQUFBMU0sRUFBQSxDQUFBLEVBV0EsR0FWQTRJLEVBQUEsVUFBQSxzTEFBQSxPQUFBOEQsRUFBQSxTQUFBLEVBQ0FBLEVBQUEsWUFDQTlELEVBQUEsUUFBQSxLQUFBbkUsSUFJQW1FLEVBQUEsWUFBQThELEVBQUEsV0FBQTFNLENBQUEsR0FDQXVP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SixFQUFNLEtBQUssSUFDckJDLEVBQUksS0FBSyxNQUFPRyxFQUFLLEVBQUksRUFDekJILEVBQUksS0FBS0QsRUFBTSxJQUFJLENBQ3JCLENBQUMsQ0FDSCxFQUNPSyxHQUFRUixHQ25CZixJQUFNUyxHQUF1QixDQUMzQixTQUFVLENBQ0osZUFBZSxRQUFRLFFBQVEsR0FDakMsS0FBSyxZQUFZLEtBQUssR0FBSSxhQUFjLENBQUUsT0FBUSxlQUFlLFFBQVEsUUFBUSxDQUFFLENBQUMsRUFHdEYsS0FBSyxZQUFZLGFBQWMsQ0FBQyxDQUFFLE9BQUFDLENBQU8sSUFDdkMsZUFBZSxRQUFRLFNBQVVBLENBQU0sQ0FDekMsQ0FDRixDQUNGLEVBRU9DLEdBQVFGLEdwRmVmLElBQUFHLEdBQU8sU0FFREMsR0FBUSxDQUFFLEtBQU1DLEdBQVUsU0FBVUMsR0FBVSxtQkFBb0JDLEVBQW1CLEVBRXZGQyxHQUFZLFNBQVMsY0FBYyx5QkFBeUIsRUFBRSxhQUFhLFNBQVMsRUFDcEZDLEdBQWEsSUFBSUMsR0FBVyxRQUFTQyxHQUFRLENBQy9DLG1CQUFvQixLQUNwQixPQUFRLENBQUUsWUFBYUgsRUFBVSxFQUNqQyxVQUFXLENBQUUsR0FBSUksRUFBVyxFQUM1QixNQUFPUixFQUNULENBQUMsRUFHRCxHQUFBUyxRQUFPLE9BQU8sQ0FBRSxVQUFXLENBQUUsRUFBRyxNQUFPLEVBQUcsWUFBYSxtQkFBb0IsQ0FBQyxFQUM1RSxPQUFPLGlCQUFpQix5QkFBMEJDLEdBQVMsR0FBQUQsUUFBTyxLQUFLLEdBQUcsQ0FBQyxFQUMzRSxPQUFPLGlCQUFpQix3QkFBeUJDLEdBQVMsR0FBQUQsUUFBTyxLQUFLLENBQUMsRUFHdkVKLEdBQVcsUUFBUSxFQU1uQixPQUFPLFdBQWFBIiwKICAibmFtZXMiOiBbInJlcXVpcmVfdG9wYmFyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAid2luZG93IiwgImRvY3VtZW50IiwgImxhc3RUaW1lIiwgInZlbmRvcnMiLCAieCIsICJjYWxsYmFjayIsICJlbGVtZW50IiwgImN1cnJUaW1lIiwgInRpbWVUb0NhbGwiLCAiaWQiLCAiY2FudmFzIiwgImN1cnJlbnRQcm9ncmVzcyIsICJzaG93aW5nIiwgInByb2dyZXNzVGltZXJJZCIsICJmYWRlVGltZXJJZCIsICJkZWxheVRpbWVySWQiLCAiYWRkRXZlbnQiLCAiZWxlbSIsICJ0eXBlIiwgImhhbmRsZXIiLCAib3B0aW9ucyIsICJyZXBhaW50IiwgImN0eCIsICJsaW5lR3JhZGllbnQiLCAic3RvcCIsICJjcmVhdGVDYW52YXMiLCAic3R5bGUiLCAidG9wYmFyIiwgIm9wdHMiLCAia2V5IiwgImRlbGF5IiwgImxvb3AiLCAidG8iLCAiZ2V0RGVmYXVsdE9wdHMiLCAic2ltcGxlIiwgImRlZmF1bHRPcHRpb25zIiwgInJldCIsICJvcHQiLCAiYWxsT3B0aW9uc09uIiwgIm9wdGlvbnMiLCAic2hvd2Rvd24iLCAicGFyc2VycyIsICJleHRlbnNpb25zIiwgImdsb2JhbE9wdGlvbnMiLCAic2V0Rmxhdm9yIiwgImZsYXZvciIsICJrZXkiLCAidmFsdWUiLCAibmFtZSIsICJwcmVzZXQiLCAib3B0aW9uIiwgImZ1bmMiLCAiZXh0IiwgInZhbGlkRXh0ZW5zaW9uIiwgInZhbGlkYXRlIiwgImV4dGVuc2lvbiIsICJlcnJNc2ciLCAiaSIsICJiYXNlTXNnIiwgInR5cGUiLCAibG4iLCAidmFsaWRhdGVFeHRlbnNpb24iLCAiYSIsICJnZXRUeXBlIiwgIm9iaiIsICJjYWxsYmFjayIsICJwcm9wIiwgInMiLCAiZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrIiwgIndob2xlTWF0Y2giLCAibTEiLCAiY2hhckNvZGVUb0VzY2FwZSIsICJ0ZXh0IiwgImNoYXJzVG9Fc2NhcGUiLCAiYWZ0ZXJCYWNrc2xhc2giLCAicmVnZXhTdHJpbmciLCAicmVnZXgiLCAidHh0IiwgInJneEZpbmRNYXRjaFBvcyIsICJzdHIiLCAibGVmdCIsICJyaWdodCIsICJmbGFncyIsICJmIiwgImciLCAieCIsICJsIiwgInBvcyIsICJ0IiwgIm0iLCAic3RhcnQiLCAiZW5kIiwgIm1hdGNoUG9zIiwgInJlc3VsdHMiLCAicmVwbGFjZW1lbnQiLCAicmVwU3RyIiwgImZpbmFsU3RyIiwgImxuZyIsICJiaXRzIiwgImZyb21JbmRleCIsICJpbmRleE9mIiwgImluZGV4IiwgIm1haWwiLCAiZW5jb2RlIiwgImNoIiwgInIiLCAidGFyZ2V0TGVuZ3RoIiwgInBhZFN0cmluZyIsICJtc2ciLCAiY29udmVydGVyT3B0aW9ucyIsICJsYW5nRXh0ZW5zaW9ucyIsICJvdXRwdXRNb2RpZmllcnMiLCAibGlzdGVuZXJzIiwgInNldENvbnZGbGF2b3IiLCAibWV0YWRhdGEiLCAiX2NvbnN0cnVjdG9yIiwgImdPcHQiLCAiX3BhcnNlRXh0ZW5zaW9uIiwgImxlZ2FjeUV4dGVuc2lvbkxvYWRpbmciLCAidmFsaWRFeHQiLCAibGlzdGVuIiwgInZhbGlkIiwgInJUcmltSW5wdXRUZXh0IiwgInJzcCIsICJyZ3giLCAiZXZ0TmFtZSIsICJnbG9iYWxzIiwgImVpIiwgIm5UZXh0IiwgInNyYyIsICJIVE1MUGFyc2VyIiwgImRvYyIsICJzdWJzdGl0dXRlUHJlQ29kZVRhZ3MiLCAiY2xlYW4iLCAibm9kZXMiLCAibWREb2MiLCAibm9kZSIsICJuIiwgImNoaWxkIiwgInByZXMiLCAicHJlc1BIIiwgImNvbnRlbnQiLCAibGFuZ3VhZ2UiLCAiY2xhc3NlcyIsICJjIiwgIm1hdGNoZXMiLCAiZXh0ZW5zaW9uTmFtZSIsICJpaSIsICJyYXciLCAiZm9ybWF0IiwgIndyaXRlQW5jaG9yVGFnIiwgImxpbmtUZXh0IiwgImxpbmtJZCIsICJ1cmwiLCAibTUiLCAibTYiLCAidGl0bGUiLCAicmVzdWx0IiwgIndtIiwgInN0IiwgImVzY2FwZSIsICJtZW50aW9ucyIsICJ1c2VybmFtZSIsICJsbmsiLCAidGFyZ2V0IiwgInNpbXBsZVVSTFJlZ2V4IiwgInNpbXBsZVVSTFJlZ2V4MiIsICJkZWxpbVVybFJlZ2V4IiwgInNpbXBsZU1haWxSZWdleCIsICJkZWxpbU1haWxSZWdleCIsICJyZXBsYWNlTGluayIsICJsZWFkaW5nTWFnaWNDaGFycyIsICJsaW5rIiwgIm0yIiwgIm0zIiwgInRyYWlsaW5nUHVuY3R1YXRpb24iLCAidHJhaWxpbmdNYWdpY0NoYXJzIiwgImxua1R4dCIsICJhcHBlbmQiLCAibG1jIiwgInRtYyIsICJyZXBsYWNlTWFpbCIsICJiIiwgImhyZWYiLCAiYnEiLCAicHJlIiwgInBhdHRlcm4iLCAiY29kZWJsb2NrIiwgIm5leHRDaGFyIiwgImRvY3R5cGUiLCAiZG9jdHlwZVBhcnNlZCIsICJjaGFyc2V0IiwgImxhbmciLCAibWV0YSIsICJsZWFkaW5nVGV4dCIsICJudW1TcGFjZXMiLCAiZW1vamlSZ3giLCAiZW1vamlDb2RlIiwgInRhZ3MiLCAiY29tbWVudHMiLCAiZGVsaW0iLCAicmVwRnVuYyIsICJtYXRjaCIsICJibG9ja1RleHQiLCAiYmxvY2tUYWdzIiwgImluc2lkZSIsICJvcFRhZ1BvcyIsICJyZ3gxIiwgInBhdExlZnQiLCAicGF0UmlnaHQiLCAic3ViVGV4dHMiLCAibmV3U3ViVGV4dDEiLCAiaGFzaEhUTUxTcGFuIiwgImh0bWwiLCAicmVwVGV4dCIsICJsaW1pdCIsICJudW0iLCAiaGVhZGVyTGV2ZWxTdGFydCIsICJzZXRleHRSZWdleEgxIiwgInNldGV4dFJlZ2V4SDIiLCAic3BhbkdhbXV0IiwgImhJRCIsICJoZWFkZXJJZCIsICJoTGV2ZWwiLCAiaGFzaEJsb2NrIiwgIm1hdGNoRm91bmQiLCAiYXR4U3R5bGUiLCAiaFRleHQiLCAic3BhbiIsICJoZWFkZXIiLCAicHJlZml4IiwgImlubGluZVJlZ0V4cCIsICJjcmF6eVJlZ0V4cCIsICJiYXNlNjRSZWdFeHAiLCAicmVmZXJlbmNlUmVnRXhwIiwgInJlZlNob3J0Y3V0UmVnRXhwIiwgIndyaXRlSW1hZ2VUYWdCYXNlNjQiLCAiYWx0VGV4dCIsICJ3aWR0aCIsICJoZWlnaHQiLCAid3JpdGVJbWFnZVRhZyIsICJnVXJscyIsICJnVGl0bGVzIiwgImdEaW1zIiwgInBhcnNlSW5zaWRlIiwgImxlYWQiLCAicHJvY2Vzc0xpc3RJdGVtcyIsICJsaXN0U3RyIiwgInRyaW1UcmFpbGluZyIsICJpc1BhcmFncmFwaGVkIiwgIm00IiwgInRhc2tidG4iLCAiY2hlY2tlZCIsICJpdGVtIiwgImJ1bGxldFN0eWxlIiwgIm90cCIsICJ3bTIiLCAic3R5bGVTdGFydE51bWJlciIsICJsaXN0IiwgImxpc3RUeXBlIiwgInJlcyIsICJwYXJzZUNvbnNlY3V0aXZlTGlzdHMiLCAib2xSZ3giLCAidWxSZ3giLCAiY291bnRlclJ4ZyIsICJwYXJzZUNMIiwgInN0eWxlIiwgInBhcnNlTWV0YWRhdGFDb250ZW50cyIsICJ3aG9sZW1hdGNoIiwgImdyYWZzIiwgImdyYWZzT3V0IiwgImdyYWZzT3V0SXQiLCAiY29kZUZsYWciLCAicmUiLCAiYmFzZTY0UmVnZXgiLCAicmVwbGFjZUZ1bmMiLCAiYmxhbmtMaW5lcyIsICJ0YWJsZVJneCIsICJzaW5nZUNvbFRibFJneCIsICJwYXJzZVN0eWxlcyIsICJzTGluZSIsICJwYXJzZUhlYWRlcnMiLCAiaWQiLCAicGFyc2VDZWxscyIsICJjZWxsIiwgInN1YlRleHQiLCAiYnVpbGRUYWJsZSIsICJoZWFkZXJzIiwgImNlbGxzIiwgInRiIiwgInRibExnbiIsICJwYXJzZVRhYmxlIiwgInJhd1RhYmxlIiwgInRhYmxlTGluZXMiLCAicmF3SGVhZGVycyIsICJyYXdTdHlsZXMiLCAicmF3Q2VsbHMiLCAic3R5bGVzIiwgInJvdyIsICJjaGFyQ29kZVRvUmVwbGFjZSIsICJjaGlsZHJlbiIsICJjaGlsZHJlbkxlbmd0aCIsICJpbm5lclR4dCIsICJoZWFkZXJMZXZlbCIsICJoZWFkZXJNYXJrIiwgImxpc3RJdGVtcyIsICJsaXN0SXRlbXNMZW5naHQiLCAibGlzdE51bSIsICJidWxsZXQiLCAibGlzdEl0ZW1UeHQiLCAiY2hpbGRyZW5MZW5naHQiLCAic3BhbnNPbmx5IiwgInRhZ05hbWUiLCAidGFibGVBcnJheSIsICJoZWFkaW5ncyIsICJyb3dzIiwgImhlYWRDb250ZW50IiwgImFsbGlnbiIsICJjb2xzIiwgImNlbGxDb250ZW50IiwgImNlbGxTcGFjZXNDb3VudCIsICJzdHJMZW4iLCAicm9vdCIsICJtb2R1bGUiLCAicmVxdWlyZV9mbG93Yml0ZV9waG9lbml4IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicm9vdCIsICJmYWN0b3J5IiwgImVudW1zX3RvcCIsICJib3R0b20iLCAicmlnaHQiLCAibGVmdCIsICJhdXRvIiwgImJhc2VQbGFjZW1lbnRzIiwgInN0YXJ0IiwgImVuZCIsICJjbGlwcGluZ1BhcmVudHMiLCAidmlld3BvcnQiLCAicG9wcGVyIiwgInJlZmVyZW5jZSIsICJ2YXJpYXRpb25QbGFjZW1lbnRzIiwgImFjYyIsICJwbGFjZW1lbnQiLCAiZW51bXNfcGxhY2VtZW50cyIsICJiZWZvcmVSZWFkIiwgInJlYWQiLCAiYWZ0ZXJSZWFkIiwgImJlZm9yZU1haW4iLCAibWFpbiIsICJhZnRlck1haW4iLCAiYmVmb3JlV3JpdGUiLCAid3JpdGUiLCAiYWZ0ZXJXcml0ZSIsICJtb2RpZmllclBoYXNlcyIsICJnZXROb2RlTmFtZSIsICJlbGVtZW50IiwgImdldFdpbmRvdyIsICJub2RlIiwgIm93bmVyRG9jdW1lbnQiLCAiaXNFbGVtZW50IiwgIk93bkVsZW1lbnQiLCAiaXNIVE1MRWxlbWVudCIsICJpc1NoYWRvd1Jvb3QiLCAiYXBwbHlTdHlsZXMiLCAiX3JlZiIsICJzdGF0ZSIsICJuYW1lIiwgInN0eWxlIiwgImF0dHJpYnV0ZXMiLCAidmFsdWUiLCAiZWZmZWN0IiwgIl9yZWYyIiwgImluaXRpYWxTdHlsZXMiLCAic3R5bGVQcm9wZXJ0aWVzIiwgInByb3BlcnR5IiwgImF0dHJpYnV0ZSIsICJtb2RpZmllcnNfYXBwbHlTdHlsZXMiLCAiZ2V0QmFzZVBsYWNlbWVudCIsICJtYXRoX21heCIsICJtYXRoX21pbiIsICJyb3VuZCIsICJnZXRVQVN0cmluZyIsICJ1YURhdGEiLCAiaXRlbSIsICJpc0xheW91dFZpZXdwb3J0IiwgImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsICJpbmNsdWRlU2NhbGUiLCAiaXNGaXhlZFN0cmF0ZWd5IiwgImNsaWVudFJlY3QiLCAic2NhbGVYIiwgInNjYWxlWSIsICJ2aXN1YWxWaWV3cG9ydCIsICJhZGRWaXN1YWxPZmZzZXRzIiwgIngiLCAieSIsICJ3aWR0aCIsICJoZWlnaHQiLCAiZ2V0TGF5b3V0UmVjdCIsICJjb250YWlucyIsICJwYXJlbnQiLCAiY2hpbGQiLCAicm9vdE5vZGUiLCAibmV4dCIsICJnZXRDb21wdXRlZFN0eWxlIiwgImlzVGFibGVFbGVtZW50IiwgImdldERvY3VtZW50RWxlbWVudCIsICJnZXRQYXJlbnROb2RlIiwgImdldFRydWVPZmZzZXRQYXJlbnQiLCAiZ2V0Q29udGFpbmluZ0Jsb2NrIiwgImlzRmlyZWZveCIsICJpc0lFIiwgImVsZW1lbnRDc3MiLCAiY3VycmVudE5vZGUiLCAiY3NzIiwgImdldE9mZnNldFBhcmVudCIsICJ3aW5kb3ciLCAib2Zmc2V0UGFyZW50IiwgImdldE1haW5BeGlzRnJvbVBsYWNlbWVudCIsICJ3aXRoaW4iLCAibWluIiwgIm1heCIsICJ3aXRoaW5NYXhDbGFtcCIsICJ2IiwgImdldEZyZXNoU2lkZU9iamVjdCIsICJtZXJnZVBhZGRpbmdPYmplY3QiLCAicGFkZGluZ09iamVjdCIsICJleHBhbmRUb0hhc2hNYXAiLCAia2V5cyIsICJoYXNoTWFwIiwgImtleSIsICJ0b1BhZGRpbmdPYmplY3QiLCAicGFkZGluZyIsICJhcnJvdyIsICJfc3RhdGUkbW9kaWZpZXJzRGF0YSQiLCAib3B0aW9ucyIsICJhcnJvd0VsZW1lbnQiLCAicG9wcGVyT2Zmc2V0cyIsICJiYXNlUGxhY2VtZW50IiwgImF4aXMiLCAiaXNWZXJ0aWNhbCIsICJsZW4iLCAiYXJyb3dSZWN0IiwgIm1pblByb3AiLCAibWF4UHJvcCIsICJlbmREaWZmIiwgInN0YXJ0RGlmZiIsICJhcnJvd09mZnNldFBhcmVudCIsICJjbGllbnRTaXplIiwgImNlbnRlclRvUmVmZXJlbmNlIiwgImNlbnRlciIsICJvZmZzZXQiLCAiYXhpc1Byb3AiLCAiYXJyb3dfZWZmZWN0IiwgIl9vcHRpb25zJGVsZW1lbnQiLCAibW9kaWZpZXJzX2Fycm93IiwgImdldFZhcmlhdGlvbiIsICJ1bnNldFNpZGVzIiwgInJvdW5kT2Zmc2V0c0J5RFBSIiwgIndpbiIsICJkcHIiLCAibWFwVG9TdHlsZXMiLCAiX09iamVjdCRhc3NpZ24yIiwgInBvcHBlclJlY3QiLCAidmFyaWF0aW9uIiwgIm9mZnNldHMiLCAicG9zaXRpb24iLCAiZ3B1QWNjZWxlcmF0aW9uIiwgImFkYXB0aXZlIiwgInJvdW5kT2Zmc2V0cyIsICJpc0ZpeGVkIiwgIl9vZmZzZXRzJHgiLCAiX29mZnNldHMkeSIsICJfcmVmMyIsICJoYXNYIiwgImhhc1kiLCAic2lkZVgiLCAic2lkZVkiLCAiaGVpZ2h0UHJvcCIsICJ3aWR0aFByb3AiLCAib2Zmc2V0WSIsICJvZmZzZXRYIiwgImNvbW1vblN0eWxlcyIsICJfcmVmNCIsICJfT2JqZWN0JGFzc2lnbiIsICJjb21wdXRlU3R5bGVzIiwgIl9yZWY1IiwgIl9vcHRpb25zJGdwdUFjY2VsZXJhdCIsICJfb3B0aW9ucyRhZGFwdGl2ZSIsICJfb3B0aW9ucyRyb3VuZE9mZnNldHMiLCAidHJhbnNpdGlvblByb3BlcnR5IiwgIm1vZGlmaWVyc19jb21wdXRlU3R5bGVzIiwgInBhc3NpdmUiLCAiZXZlbnRMaXN0ZW5lcnNfZWZmZWN0IiwgImluc3RhbmNlIiwgIl9vcHRpb25zJHNjcm9sbCIsICJzY3JvbGwiLCAiX29wdGlvbnMkcmVzaXplIiwgInJlc2l6ZSIsICJzY3JvbGxQYXJlbnRzIiwgInNjcm9sbFBhcmVudCIsICJldmVudExpc3RlbmVycyIsICJoYXNoIiwgImdldE9wcG9zaXRlUGxhY2VtZW50IiwgIm1hdGNoZWQiLCAiZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnRfaGFzaCIsICJnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudCIsICJnZXRXaW5kb3dTY3JvbGwiLCAic2Nyb2xsTGVmdCIsICJzY3JvbGxUb3AiLCAiZ2V0V2luZG93U2Nyb2xsQmFyWCIsICJnZXRWaWV3cG9ydFJlY3QiLCAic3RyYXRlZ3kiLCAiaHRtbCIsICJsYXlvdXRWaWV3cG9ydCIsICJnZXREb2N1bWVudFJlY3QiLCAiX2VsZW1lbnQkb3duZXJEb2N1bWVuIiwgIndpblNjcm9sbCIsICJib2R5IiwgImlzU2Nyb2xsUGFyZW50IiwgIl9nZXRDb21wdXRlZFN0eWxlIiwgIm92ZXJmbG93IiwgIm92ZXJmbG93WCIsICJvdmVyZmxvd1kiLCAiZ2V0U2Nyb2xsUGFyZW50IiwgImxpc3RTY3JvbGxQYXJlbnRzIiwgImxpc3QiLCAiaXNCb2R5IiwgInRhcmdldCIsICJ1cGRhdGVkTGlzdCIsICJyZWN0VG9DbGllbnRSZWN0IiwgInJlY3QiLCAiZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QiLCAiZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUiLCAiY2xpcHBpbmdQYXJlbnQiLCAiZ2V0Q2xpcHBpbmdQYXJlbnRzIiwgImNhbkVzY2FwZUNsaXBwaW5nIiwgImNsaXBwZXJFbGVtZW50IiwgImdldENsaXBwaW5nUmVjdCIsICJib3VuZGFyeSIsICJyb290Qm91bmRhcnkiLCAibWFpbkNsaXBwaW5nUGFyZW50cyIsICJmaXJzdENsaXBwaW5nUGFyZW50IiwgImNsaXBwaW5nUmVjdCIsICJhY2NSZWN0IiwgImNvbXB1dGVPZmZzZXRzIiwgImNvbW1vblgiLCAiY29tbW9uWSIsICJtYWluQXhpcyIsICJkZXRlY3RPdmVyZmxvdyIsICJfb3B0aW9ucyIsICJfb3B0aW9ucyRwbGFjZW1lbnQiLCAiX29wdGlvbnMkc3RyYXRlZ3kiLCAiX29wdGlvbnMkYm91bmRhcnkiLCAiX29wdGlvbnMkcm9vdEJvdW5kYXJ5IiwgIl9vcHRpb25zJGVsZW1lbnRDb250ZSIsICJlbGVtZW50Q29udGV4dCIsICJfb3B0aW9ucyRhbHRCb3VuZGFyeSIsICJhbHRCb3VuZGFyeSIsICJfb3B0aW9ucyRwYWRkaW5nIiwgImFsdENvbnRleHQiLCAiY2xpcHBpbmdDbGllbnRSZWN0IiwgInJlZmVyZW5jZUNsaWVudFJlY3QiLCAicG9wcGVyQ2xpZW50UmVjdCIsICJlbGVtZW50Q2xpZW50UmVjdCIsICJvdmVyZmxvd09mZnNldHMiLCAib2Zmc2V0RGF0YSIsICJtdWx0aXBseSIsICJjb21wdXRlQXV0b1BsYWNlbWVudCIsICJmbGlwVmFyaWF0aW9ucyIsICJfb3B0aW9ucyRhbGxvd2VkQXV0b1AiLCAiYWxsb3dlZEF1dG9QbGFjZW1lbnRzIiwgInBsYWNlbWVudHMiLCAiYWxsb3dlZFBsYWNlbWVudHMiLCAib3ZlcmZsb3dzIiwgImEiLCAiYiIsICJnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyIsICJvcHBvc2l0ZVBsYWNlbWVudCIsICJmbGlwIiwgIl9vcHRpb25zJG1haW5BeGlzIiwgImNoZWNrTWFpbkF4aXMiLCAiX29wdGlvbnMkYWx0QXhpcyIsICJjaGVja0FsdEF4aXMiLCAic3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIiwgIl9vcHRpb25zJGZsaXBWYXJpYXRpbyIsICJwcmVmZXJyZWRQbGFjZW1lbnQiLCAiaXNCYXNlUGxhY2VtZW50IiwgImZhbGxiYWNrUGxhY2VtZW50cyIsICJyZWZlcmVuY2VSZWN0IiwgImNoZWNrc01hcCIsICJtYWtlRmFsbGJhY2tDaGVja3MiLCAiZmlyc3RGaXR0aW5nUGxhY2VtZW50IiwgImkiLCAiX2Jhc2VQbGFjZW1lbnQiLCAiaXNTdGFydFZhcmlhdGlvbiIsICJtYWluVmFyaWF0aW9uU2lkZSIsICJhbHRWYXJpYXRpb25TaWRlIiwgImNoZWNrcyIsICJjaGVjayIsICJudW1iZXJPZkNoZWNrcyIsICJfbG9vcCIsICJfaSIsICJmaXR0aW5nUGxhY2VtZW50IiwgIl9yZXQiLCAibW9kaWZpZXJzX2ZsaXAiLCAiZ2V0U2lkZU9mZnNldHMiLCAicHJldmVudGVkT2Zmc2V0cyIsICJpc0FueVNpZGVGdWxseUNsaXBwZWQiLCAic2lkZSIsICJoaWRlIiwgInJlZmVyZW5jZU92ZXJmbG93IiwgInBvcHBlckFsdE92ZXJmbG93IiwgInJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyIsICJwb3BwZXJFc2NhcGVPZmZzZXRzIiwgImlzUmVmZXJlbmNlSGlkZGVuIiwgImhhc1BvcHBlckVzY2FwZWQiLCAibW9kaWZpZXJzX2hpZGUiLCAiZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkiLCAicmVjdHMiLCAiaW52ZXJ0RGlzdGFuY2UiLCAic2tpZGRpbmciLCAiZGlzdGFuY2UiLCAiX29wdGlvbnMkb2Zmc2V0IiwgImRhdGEiLCAiX2RhdGEkc3RhdGUkcGxhY2VtZW50IiwgIm1vZGlmaWVyc19vZmZzZXQiLCAibW9kaWZpZXJzX3BvcHBlck9mZnNldHMiLCAiZ2V0QWx0QXhpcyIsICJwcmV2ZW50T3ZlcmZsb3ciLCAiX29wdGlvbnMkdGV0aGVyIiwgInRldGhlciIsICJfb3B0aW9ucyR0ZXRoZXJPZmZzZXQiLCAidGV0aGVyT2Zmc2V0IiwgImFsdEF4aXMiLCAidGV0aGVyT2Zmc2V0VmFsdWUiLCAibm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlIiwgIm9mZnNldE1vZGlmaWVyU3RhdGUiLCAiX29mZnNldE1vZGlmaWVyU3RhdGUkIiwgIm1haW5TaWRlIiwgImFsdFNpZGUiLCAiYWRkaXRpdmUiLCAibWluTGVuIiwgIm1heExlbiIsICJhcnJvd1BhZGRpbmdPYmplY3QiLCAiYXJyb3dQYWRkaW5nTWluIiwgImFycm93UGFkZGluZ01heCIsICJhcnJvd0xlbiIsICJtaW5PZmZzZXQiLCAibWF4T2Zmc2V0IiwgImNsaWVudE9mZnNldCIsICJvZmZzZXRNb2RpZmllclZhbHVlIiwgInRldGhlck1pbiIsICJ0ZXRoZXJNYXgiLCAicHJldmVudGVkT2Zmc2V0IiwgIl9vZmZzZXRNb2RpZmllclN0YXRlJDIiLCAiX21haW5TaWRlIiwgIl9hbHRTaWRlIiwgIl9vZmZzZXQiLCAiX2xlbiIsICJfbWluIiwgIl9tYXgiLCAiaXNPcmlnaW5TaWRlIiwgIl9vZmZzZXRNb2RpZmllclZhbHVlIiwgIl90ZXRoZXJNaW4iLCAiX3RldGhlck1heCIsICJfcHJldmVudGVkT2Zmc2V0IiwgIm1vZGlmaWVyc19wcmV2ZW50T3ZlcmZsb3ciLCAiZ2V0SFRNTEVsZW1lbnRTY3JvbGwiLCAiZ2V0Tm9kZVNjcm9sbCIsICJpc0VsZW1lbnRTY2FsZWQiLCAiZ2V0Q29tcG9zaXRlUmVjdCIsICJlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCIsICJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsICJvZmZzZXRQYXJlbnRJc1NjYWxlZCIsICJkb2N1bWVudEVsZW1lbnQiLCAib3JkZXIiLCAibW9kaWZpZXJzIiwgIm1hcCIsICJ2aXNpdGVkIiwgInJlc3VsdCIsICJtb2RpZmllciIsICJzb3J0IiwgInJlcXVpcmVzIiwgImRlcCIsICJkZXBNb2RpZmllciIsICJvcmRlck1vZGlmaWVycyIsICJvcmRlcmVkTW9kaWZpZXJzIiwgInBoYXNlIiwgImRlYm91bmNlIiwgImZuIiwgInBlbmRpbmciLCAicmVzb2x2ZSIsICJtZXJnZUJ5TmFtZSIsICJtZXJnZWQiLCAiY3VycmVudCIsICJleGlzdGluZyIsICJJTlZBTElEX0VMRU1FTlRfRVJST1IiLCAiSU5GSU5JVEVfTE9PUF9FUlJPUiIsICJERUZBVUxUX09QVElPTlMiLCAiYXJlVmFsaWRFbGVtZW50cyIsICJhcmdzIiwgIl9rZXkiLCAicG9wcGVyR2VuZXJhdG9yIiwgImdlbmVyYXRvck9wdGlvbnMiLCAiX2dlbmVyYXRvck9wdGlvbnMiLCAiX2dlbmVyYXRvck9wdGlvbnMkZGVmIiwgImRlZmF1bHRNb2RpZmllcnMiLCAiX2dlbmVyYXRvck9wdGlvbnMkZGVmMiIsICJkZWZhdWx0T3B0aW9ucyIsICJlZmZlY3RDbGVhbnVwRm5zIiwgImlzRGVzdHJveWVkIiwgInNldE9wdGlvbnNBY3Rpb24iLCAiY2xlYW51cE1vZGlmaWVyRWZmZWN0cyIsICJtIiwgIm1hcmdpblRvcCIsICJtYXJnaW5SaWdodCIsICJtYXJnaW5Cb3R0b20iLCAibWFyZ2luTGVmdCIsICJmbGlwTW9kaWZpZXIiLCAicnVuTW9kaWZpZXJFZmZlY3RzIiwgIl9zdGF0ZSRlbGVtZW50cyIsICJfX2RlYnVnX2xvb3BzX18iLCAiaW5kZXgiLCAiX3N0YXRlJG9yZGVyZWRNb2RpZmllIiwgIl9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIiLCAiX3JlZjMkb3B0aW9ucyIsICJjbGVhbnVwRm4iLCAibm9vcEZuIiwgImNyZWF0ZVBvcHBlciIsICJwb3BwZXJfY3JlYXRlUG9wcGVyIiwgInBvcHBlcl9saXRlX2RlZmF1bHRNb2RpZmllcnMiLCAicG9wcGVyX2xpdGVfY3JlYXRlUG9wcGVyIiwgIl9hcnJheUxpa2VUb0FycmF5IiwgInIiLCAiZSIsICJuIiwgIl9hcnJheVdpdGhIb2xlcyIsICJfYXJyYXlXaXRob3V0SG9sZXMiLCAiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsICJfY2FsbFN1cGVyIiwgInQiLCAibyIsICJfZ2V0UHJvdG90eXBlT2YiLCAiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCAiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsICJfY2xhc3NDYWxsQ2hlY2siLCAiX2RlZmluZVByb3BlcnRpZXMiLCAiX3RvUHJvcGVydHlLZXkiLCAiX2NyZWF0ZUNsYXNzIiwgIl9nZXQiLCAicCIsICJfc3VwZXJQcm9wQmFzZSIsICJfaW5oZXJpdHMiLCAiX3NldFByb3RvdHlwZU9mIiwgIl9pdGVyYWJsZVRvQXJyYXkiLCAiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwgImwiLCAidSIsICJmIiwgIl9ub25JdGVyYWJsZVJlc3QiLCAiX25vbkl0ZXJhYmxlU3ByZWFkIiwgIl9zbGljZWRUb0FycmF5IiwgIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsICJfdG9Db25zdW1hYmxlQXJyYXkiLCAiX3RvUHJpbWl0aXZlIiwgIl90eXBlb2YiLCAiaGFzUHJvcGVydHkiLCAib2JqIiwgInByb3AiLCAibGFzdEl0ZW1PZiIsICJhcnIiLCAicHVzaFVuaXF1ZSIsICJpdGVtcyIsICJzdHJpbmdUb0FycmF5IiwgInN0ciIsICJzZXBhcmF0b3IiLCAiaXNJblJhbmdlIiwgInRlc3RWYWwiLCAibWluT0siLCAibWF4T0siLCAibGltaXRUb1JhbmdlIiwgInZhbCIsICJjcmVhdGVUYWdSZXBlYXQiLCAidGFnTmFtZSIsICJyZXBlYXQiLCAib3BlblRhZ1NyYyIsICJzcmMiLCAiYXR0ciIsICJvcHRpbWl6ZVRlbXBsYXRlSFRNTCIsICJzdHJpcFRpbWUiLCAidGltZVZhbHVlIiwgInRvZGF5IiwgImRhdGVWYWx1ZSIsICJuZXdEYXRlIiwgImFkZERheXMiLCAiZGF0ZSIsICJhbW91bnQiLCAiYWRkV2Vla3MiLCAiYWRkTW9udGhzIiwgIm1vbnRoc1RvU2V0IiwgImV4cGVjdGVkTW9udGgiLCAidGltZSIsICJhZGRZZWFycyIsICJkYXlEaWZmIiwgImRheSIsICJmcm9tIiwgImRheU9mVGhlV2Vla09mIiwgImJhc2VEYXRlIiwgImRheU9mV2VlayIsICJ3ZWVrU3RhcnQiLCAiYmFzZURheSIsICJnZXRXZWVrIiwgInRodU9mVGhlV2VlayIsICJmaXJzdFRodSIsICJzdGFydE9mWWVhclBlcmlvZCIsICJ5ZWFycyIsICJ5ZWFyIiwgInJlRm9ybWF0VG9rZW5zIiwgInJlTm9uRGF0ZVBhcnRzIiwgImtub3duRm9ybWF0cyIsICJwYXJzZUZucyIsICJtb250aCIsICJsb2NhbGUiLCAibW9udGhJbmRleCIsICJtb250aE5hbWUiLCAiY29tcGFyZU5hbWVzIiwgIm5vcm1hbGl6ZU1vbnRoIiwgImZvcm1hdEZucyIsICJwYWRaZXJvIiwgIm51bSIsICJsZW5ndGgiLCAicGFyc2VGb3JtYXRTdHJpbmciLCAiZm9ybWF0IiwgInNlcGFyYXRvcnMiLCAicGFydHMiLCAicGFydEZvcm1hdHRlcnMiLCAidG9rZW4iLCAicGFydFBhcnNlcktleXMiLCAicGFydCIsICJkYXRlU3RyIiwgImRhdGVQYXJ0cyIsICJkdFBhcnRzIiwgIm9yaWdEYXRlIiwgInBhcnNlRGF0ZSIsICJfZGF0ZSIsICJmb3JtYXREYXRlIiwgImRhdGVPYmoiLCAibGlzdGVuZXJSZWdpc3RyeSIsICJfRXZlbnRUYXJnZXQkcHJvdG90eXAiLCAiYWRkRXZlbnRMaXN0ZW5lciIsICJyZW1vdmVFdmVudExpc3RlbmVyIiwgInJlZ2lzdGVyTGlzdGVuZXJzIiwgImtleU9iaiIsICJsaXN0ZW5lcnMiLCAicmVnaXN0ZXJlZCIsICJsaXN0ZW5lciIsICJ1bnJlZ2lzdGVyTGlzdGVuZXJzIiwgImdldENvbXBvc2VkUGF0aCIsICJwYXRoIiwgImZpbmRGcm9tUGF0aCIsICJjcml0ZXJpYSIsICJjdXJyZW50VGFyZ2V0IiwgImVsIiwgImZpbmRFbGVtZW50SW5FdmVudFBhdGgiLCAiZXYiLCAic2VsZWN0b3IiLCAibG9jYWxlcyIsICJyYW5nZSIsICJwYXJzZUhUTUwiLCAiaGlkZUVsZW1lbnQiLCAic2hvd0VsZW1lbnQiLCAiZW1wdHlDaGlsZE5vZGVzIiwgInJlcGxhY2VDaGlsZE5vZGVzIiwgIm5ld0NoaWxkTm9kZXMiLCAiZGVmYXVsdExhbmciLCAiZGVmYXVsdEZvcm1hdCIsICJkZWZhdWx0V2Vla1N0YXJ0IiwgInNhbml0aXplRE9XIiwgImRvdyIsICJjYWxjRW5kT2ZXZWVrIiwgInN0YXJ0T2ZXZWVrIiwgInZhbGlkYXRlRGF0ZSIsICJvcmlnVmFsdWUiLCAidmFsaWRhdGVWaWV3SWQiLCAidmlld0lkIiwgInByb2Nlc3NPcHRpb25zIiwgImRhdGVwaWNrZXIiLCAiaW5PcHRzIiwgImNvbmZpZyIsICJsYW5ndWFnZSIsICJtYXhEYXRlIiwgIm1heFZpZXciLCAibWluRGF0ZSIsICJwaWNrTGV2ZWwiLCAic3RhcnRWaWV3IiwgImxhbmciLCAib3JpZ0xvY2FsZSIsICJoYXNUb0Rpc3BsYXkiLCAiaGFzVG9WYWx1ZSIsICJ2YWxpZEZvcm1hdFN0cmluZyIsICJtaW5EdCIsICJtYXhEdCIsICJkYXRlcyIsICJkdCIsICJ2aWV3RGF0ZSIsICJ3a1N0YXJ0IiwgIm1heE51bWJlck9mRGF0ZXMiLCAibmV3UGlja0xldmVsIiwgIm5ld01heFZpZXciLCAibmV3U3RhcnRWaWV3IiwgInByZXZBcnJvdyIsICJuZXh0QXJyb3ciLCAib3JpZW50YXRpb24iLCAicGlja2VyVGVtcGxhdGUiLCAiZGF5c1RlbXBsYXRlIiwgImNhbGVuZGFyV2Vla3NUZW1wbGF0ZSIsICJWaWV3IiwgInBpY2tlciIsICJfZWwkY2xhc3NMaXN0IiwgImV4dHJhQ2xhc3NlcyIsICJEYXlzVmlldyIsICJfVmlldyIsICJvbkNvbnN0cnVjdGlvbiIsICJpbm5lciIsICJfdGhpcyIsICJ1cGRhdGVET1ciLCAid2Vla3NFbGVtIiwgInZpZXdZZWFyIiwgInZpZXdNb250aCIsICJmaXJzdE9mTW9udGgiLCAiX3RoaXMkcGlja2VyJGRhdGVwaWNrIiwgInJhbmdlcGlja2VyIiwgIl90aGlzMiIsICJzd2l0Y2hMYWJlbCIsICJjbGFzc0xpc3QiLCAiX3RoaXMyJHJhbmdlIiwgInJhbmdlU3RhcnQiLCAicmFuZ2VFbmQiLCAiX3RoaXMzIiwgImNvbXB1dGVNb250aFJhbmdlIiwgInRoaXNZZWFyIiwgIl9yYW5nZSIsICJfcmFuZ2UkIiwgInN0YXJ0WSIsICJzdGFydE0iLCAiX3JhbmdlJDIiLCAiZW5kWSIsICJlbmRNIiwgIk1vbnRoc1ZpZXciLCAiaXgiLCAibWluRGF0ZU9iaiIsICJtYXhEYXRlT2JqIiwgInNlbGVjdGVkIiwgInlyT3V0T2ZSYW5nZSIsICJpc01pblllYXIiLCAiaXNNYXhZZWFyIiwgIl9yYW5nZTIiLCAidG9UaXRsZUNhc2UiLCAid29yZCIsICJjaCIsICJZZWFyc1ZpZXciLCAiYmVmb3JlU2hvdyIsICJmaXJzdCIsICJsYXN0IiwgInRyaWdnZXJEYXRlcGlja2VyRXZlbnQiLCAidHlwZSIsICJkZXRhaWwiLCAiZ29Ub1ByZXZPck5leHQiLCAiZGlyZWN0aW9uIiwgIl9kYXRlcGlja2VyJGNvbmZpZyIsICJfZGF0ZXBpY2tlciRwaWNrZXIiLCAiY3VycmVudFZpZXciLCAibmV3Vmlld0RhdGUiLCAic3dpdGNoVmlldyIsICJ1bmZvY3VzIiwgImdvVG9TZWxlY3RlZE1vbnRoT3JZZWFyIiwgInNlbGVjdGlvbiIsICJvbkNsaWNrVG9kYXlCdG4iLCAiY3VycmVudERhdGUiLCAib25DbGlja0NsZWFyQnRuIiwgIm9uQ2xpY2tWaWV3U3dpdGNoIiwgIm9uQ2xpY2tQcmV2QnRuIiwgIm9uQ2xpY2tOZXh0QnRuIiwgIm9uQ2xpY2tWaWV3IiwgIl9kYXRlcGlja2VyJHBpY2tlciRjdSIsICJpZCIsICJpc01pblZpZXciLCAib25DbGlja1BpY2tlciIsICJwcm9jZXNzUGlja2VyT3B0aW9ucyIsICJwcmV2QnRuIiwgIm5leHRCdG4iLCAiX3BpY2tlciRkYXRlcGlja2VyJGNvIiwgImNvbXB1dGVSZXNldFZpZXdEYXRlIiwgInNldFZpZXdEYXRlIiwgIm9sZFZpZXdEYXRlIiwgIl9waWNrZXIkY3VycmVudFZpZXciLCAiZ2V0VGV4dERpcmVjdGlvbiIsICJQaWNrZXIiLCAidGVtcGxhdGUiLCAiX2VsZW1lbnQkZmlyc3RDaGlsZCRjIiwgImhlYWRlciIsICJmb290ZXIiLCAidGl0bGUiLCAiX2hlYWRlciRsYXN0RWxlbWVudENoIiwgInZpZXdTd2l0Y2giLCAiX2Zvb3RlciRmaXJzdENoaWxkJGNoIiwgInRvZGF5QnRuIiwgImNsZWFyQnRuIiwgImNvbnRyb2xzIiwgImVsZW1lbnRDbGFzcyIsICJ2aWV3IiwgImlucHV0RGlyZWN0aW9uIiwgIl90aGlzJGVsZW1lbnQiLCAiX3RoaXMkZGF0ZXBpY2tlciIsICJpbnB1dEZpZWxkIiwgImNvbnRhaW5lciIsICJfdGhpcyRlbGVtZW50JGdldEJvdW4iLCAiY2FsZW5kYXJXaWR0aCIsICJjYWxlbmRhckhlaWdodCIsICJfY29udGFpbmVyJGdldEJvdW5kaW4iLCAiY29udGFpbmVyTGVmdCIsICJjb250YWluZXJUb3AiLCAiY29udGFpbmVyV2lkdGgiLCAiX2lucHV0RmllbGQkZ2V0Qm91bmRpIiwgImlucHV0TGVmdCIsICJpbnB1dFRvcCIsICJpbnB1dFdpZHRoIiwgImlucHV0SGVpZ2h0IiwgIl9jb25maWckb3JpZW50YXRpb24iLCAib3JpZW50WCIsICJvcmllbnRZIiwgInRvcCIsICJsYWJlbFRleHQiLCAiZGlzYWJsZWQiLCAib2xkVmlldyIsICJuZXdWaWV3IiwgInF1aWNrUmVuZGVyIiwgInJlbmRlck1ldGhvZCIsICJmaW5kTmV4dEF2YWlsYWJsZU9uZSIsICJhZGRGbiIsICJpbmNyZWFzZSIsICJ0ZXN0Rm4iLCAibW92ZUJ5QXJyb3dLZXkiLCAidmVydGljYWwiLCAic3RlcCIsICJvbktleWRvd24iLCAib25Gb2N1cyIsICJvbk1vdXNlZG93biIsICJvbkNsaWNrSW5wdXQiLCAib25QYXN0ZSIsICJvbkNsaWNrT3V0c2lkZSIsICJwaWNrZXJFbGVtIiwgInN0cmluZ2lmeURhdGVzIiwgInByb2Nlc3NJbnB1dERhdGVzIiwgImlucHV0RGF0ZXMiLCAiY2xlYXIiLCAib3JpZ0RhdGVzIiwgIm5ld0RhdGVzIiwgIl9kdCIsICJyZWZyZXNoVUkiLCAibW9kZSIsICJfc2V0RGF0ZSIsICJyZW5kZXIiLCAiYXV0b2hpZGUiLCAiRGF0ZXBpY2tlciIsICJpbmxpbmUiLCAiaW5pdGlhbERhdGVzIiwgImRhdGVwaWNrZXJzIiwgImlucHV0RGF0ZVZhbHVlcyIsICJvbk1vdXNlZG93bkRvY3VtZW50IiwgIm5ld09wdGlvbnMiLCAiY2FsbGJhY2siLCAib3B0cyIsICJsYXN0QXJnIiwgImZvcmNlUmVuZGVyIiwgImZpbHRlck9wdGlvbnMiLCAibmV3T3B0cyIsICJzZXR1cERhdGVwaWNrZXIiLCAiY2hhbmdlRGF0ZUxpc3RlbmVyIiwgIm9uQ2hhbmdlRGF0ZSIsICJzZXREYXRlT3B0aW9ucyIsICJjaGFuZ2VkU2lkZSIsICJvdGhlclNpZGUiLCAiY2hhbmdlZERhdGUiLCAib3RoZXJEYXRlIiwgIkRhdGVSYW5nZVBpY2tlciIsICJpbnB1dHMiLCAiY2xlYW5PcHRpb25zIiwgIl90aGlzJGRhdGVwaWNrZXJzIiwgImRhdGVwaWNrZXIwIiwgImRhdGVwaWNrZXIxIiwgImluc3RhbmNlc18xIiwgIl9fd2VicGFja19yZXF1aXJlX18iLCAiRGVmYXVsdCIsICJEZWZhdWx0SW5zdGFuY2VPcHRpb25zIiwgIkFjY29yZGlvbiIsICJhY2NvcmRpb25FbCIsICJpbnN0YW5jZU9wdGlvbnMiLCAiX19hc3NpZ24iLCAiY2xpY2tIYW5kbGVyIiwgIl9hIiwgIl9iIiwgImluaXRBY2NvcmRpb25zIiwgIiRhY2NvcmRpb25FbCIsICJhbHdheXNPcGVuIiwgImFjdGl2ZUNsYXNzZXMiLCAiaW5hY3RpdmVDbGFzc2VzIiwgIiR0cmlnZ2VyRWwiLCAiQ2Fyb3VzZWwiLCAiY2Fyb3VzZWxFbCIsICJpbmRpY2F0b3IiLCAibmV4dEl0ZW0iLCAicm90YXRpb25JdGVtcyIsICJhY3RpdmVJdGVtIiwgInByZXZJdGVtIiwgImluaXRDYXJvdXNlbHMiLCAiJGNhcm91c2VsRWwiLCAiaW50ZXJ2YWwiLCAic2xpZGUiLCAiZGVmYXVsdFBvc2l0aW9uIiwgIiRjYXJvdXNlbEl0ZW1FbCIsICJpbmRpY2F0b3JzIiwgIiRpbmRpY2F0b3JFbCIsICJjYXJvdXNlbCIsICJjYXJvdXNlbE5leHRFbCIsICJjYXJvdXNlbFByZXZFbCIsICJDb3B5Q2xpcGJvYXJkIiwgInRyaWdnZXJFbCIsICJ0YXJnZXRFbCIsICJ0ZXh0VG9Db3B5IiwgInRlbXBUZXh0QXJlYSIsICJ0ZXh0YXJlYSIsICJpbml0Q29weUNsaXBib2FyZHMiLCAidGFyZ2V0SWQiLCAiJHRhcmdldEVsIiwgImNvbnRlbnRUeXBlIiwgImh0bWxFbnRpdGllcyIsICJDb2xsYXBzZSIsICJpbml0Q29sbGFwc2VzIiwgImZsb3diaXRlX2RhdGVwaWNrZXJfMSIsICJkYXRlcGlja2VyRWwiLCAiZGF0ZXBpY2tlck9wdGlvbnMiLCAiaW5pdERhdGVwaWNrZXJzIiwgIiRkYXRlcGlja2VyRWwiLCAiYnV0dG9ucyIsICJhdXRvc2VsZWN0VG9kYXkiLCAicmFuZ2VQaWNrZXIiLCAiRGlhbCIsICJwYXJlbnRFbCIsICJ0cmlnZ2VyRXZlbnRUeXBlcyIsICJ0cmlnZ2VyVHlwZSIsICJpbml0RGlhbHMiLCAiJHBhcmVudEVsIiwgImRpYWxJZCIsICIkZGlhbEVsIiwgIkRpc21pc3MiLCAiaW5pdERpc21pc3NlcyIsICIkZGlzbWlzc0VsIiwgIkRyYXdlciIsICJjIiwgImV2ZW50IiwgImJhY2tkcm9wRWwiLCAiaGFuZGxlciIsICJldmVudExpc3RlbmVySW5zdGFuY2UiLCAiaW5pdERyYXdlcnMiLCAiZHJhd2VySWQiLCAiJGRyYXdlckVsIiwgImJvZHlTY3JvbGxpbmciLCAiYmFja2Ryb3AiLCAiZWRnZSIsICJlZGdlT2Zmc2V0IiwgImRyYXdlcl8xIiwgInRvZ2dsZURyYXdlciIsICJkcmF3ZXJfMiIsICJoaWRlRHJhd2VyIiwgImRyYXdlcl8zIiwgInNob3dEcmF3ZXIiLCAiY29yZV8xIiwgIkRyb3Bkb3duIiwgInRhcmdldEVsZW1lbnQiLCAidHJpZ2dlckVsZW1lbnQiLCAidHJpZ2dlckV2ZW50cyIsICJjbGlja2VkRWwiLCAiaWdub3JlQ2xpY2tPdXRzaWRlQ2xhc3MiLCAiaXNJZ25vcmVkIiwgImlnbm9yZWRDbGlja091dHNpZGVFbHMiLCAiX19zcHJlYWRBcnJheSIsICJpbml0RHJvcGRvd25zIiwgImRyb3Bkb3duSWQiLCAiJGRyb3Bkb3duRWwiLCAib2Zmc2V0U2tpZGRpbmciLCAib2Zmc2V0RGlzdGFuY2UiLCAiZGVsYXkiLCAiYWNjb3JkaW9uXzEiLCAiY2Fyb3VzZWxfMSIsICJjbGlwYm9hcmRfMSIsICJjb2xsYXBzZV8xIiwgImRpYWxfMSIsICJkaXNtaXNzXzEiLCAiZHJvcGRvd25fMSIsICJpbnB1dF9jb3VudGVyXzEiLCAibW9kYWxfMSIsICJwb3BvdmVyXzEiLCAidGFic18xIiwgInRvb2x0aXBfMSIsICJkYXRlcGlja2VyXzEiLCAiaW5pdEZsb3diaXRlIiwgIklucHV0Q291bnRlciIsICJpbmNyZW1lbnRFbCIsICJkZWNyZW1lbnRFbCIsICJpbml0SW5wdXRDb3VudGVycyIsICIkaW5jcmVtZW50RWwiLCAiJGRlY3JlbWVudEVsIiwgIm1pblZhbHVlIiwgIm1heFZhbHVlIiwgIk1vZGFsIiwgImluaXRNb2RhbHMiLCAibW9kYWxJZCIsICIkbW9kYWxFbCIsICJ0b2dnbGVNb2RhbCIsICJtb2RhbF8yIiwgInNob3dNb2RhbCIsICJtb2RhbF8zIiwgImhpZGVNb2RhbCIsICJQb3BvdmVyIiwgImluaXRQb3BvdmVycyIsICJwb3BvdmVySUQiLCAiJHBvcG92ZXJFbCIsICJUYWJzIiwgInRhYnNFbCIsICJ0YWIiLCAiZm9yY2VTaG93IiwgImluaXRUYWJzIiwgInRhYkl0ZW1zIiwgImRlZmF1bHRUYWJJZCIsICJpc0FjdGl2ZSIsICJUb29sdGlwIiwgImluaXRUb29sdGlwcyIsICJ0b29sdGlwSWQiLCAiJHRvb2x0aXBFbCIsICJFdmVudHMiLCAiZXZlbnRUeXBlIiwgImV2ZW50RnVuY3Rpb25zIiwgImV2ZW50RnVuY3Rpb24iLCAiSW5zdGFuY2VzIiwgImNvbXBvbmVudCIsICJvdmVycmlkZSIsICJpbnN0YW5jZXMiLCAiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwgIm1vZHVsZUlkIiwgImNhY2hlZE1vZHVsZSIsICJfX3dlYnBhY2tfbW9kdWxlc19fIiwgImRlZmluaXRpb24iLCAiZXZlbnRzXzEiLCAibGl2ZVZpZXdMb2FkRXZlbnRzIiwgInJlZ3VsYXJWaWV3TG9hZEV2ZW50cyIsICJQb2x5ZmlsbEV2ZW50IiwgImV2ZW50Q29uc3RydWN0b3IiLCAiQ3VzdG9tRXZlbnQiLCAiZXZlbnQiLCAicGFyYW1zIiwgImV2dCIsICJidWlsZEhpZGRlbklucHV0IiwgIm5hbWUiLCAidmFsdWUiLCAiaW5wdXQiLCAiaGFuZGxlQ2xpY2siLCAiZWxlbWVudCIsICJ0YXJnZXRNb2RpZmllcktleSIsICJ0byIsICJtZXRob2QiLCAiY3NyZiIsICJmb3JtIiwgInN1Ym1pdCIsICJ0YXJnZXQiLCAiZSIsICJwaG9lbml4TGlua0V2ZW50IiwgIm1lc3NhZ2UiLCAiY2xvc3VyZSIsICJ2YWx1ZSIsICJnbG9iYWxTZWxmIiwgInBoeFdpbmRvdyIsICJnbG9iYWwiLCAiREVGQVVMVF9WU04iLCAiU09DS0VUX1NUQVRFUyIsICJERUZBVUxUX1RJTUVPVVQiLCAiV1NfQ0xPU0VfTk9STUFMIiwgIkNIQU5ORUxfU1RBVEVTIiwgIkNIQU5ORUxfRVZFTlRTIiwgIlRSQU5TUE9SVFMiLCAiWEhSX1NUQVRFUyIsICJQdXNoIiwgImNoYW5uZWwiLCAiZXZlbnQiLCAicGF5bG9hZCIsICJ0aW1lb3V0IiwgInN0YXR1cyIsICJjYWxsYmFjayIsICJyZXNwb25zZSIsICJfcmVmIiwgImgiLCAiVGltZXIiLCAidGltZXJDYWxjIiwgIkNoYW5uZWwiLCAidG9waWMiLCAicGFyYW1zIiwgInNvY2tldCIsICJwdXNoRXZlbnQiLCAicmVhc29uIiwgInJlZiIsICJiaW5kIiwgIm9uQ2xvc2UiLCAibGVhdmVQdXNoIiwgIl9ldmVudCIsICJqb2luUmVmIiwgImhhbmRsZWRQYXlsb2FkIiwgImV2ZW50QmluZGluZ3MiLCAiaSIsICJBamF4IiwgIm1ldGhvZCIsICJlbmRQb2ludCIsICJhY2NlcHQiLCAiYm9keSIsICJvbnRpbWVvdXQiLCAicmVxIiwgInJlc3AiLCAib2JqIiwgInBhcmVudEtleSIsICJxdWVyeVN0ciIsICJrZXkiLCAicGFyYW1LZXkiLCAicGFyYW1WYWwiLCAidXJsIiwgInByZWZpeCIsICJhcnJheUJ1ZmZlclRvQmFzZTY0IiwgImJ1ZmZlciIsICJiaW5hcnkiLCAiYnl0ZXMiLCAibGVuIiwgIkxvbmdQb2xsIiwgImNvZGUiLCAid2FzQ2xlYW4iLCAidG9rZW4iLCAibWVzc2FnZXMiLCAibXNnIiwgIm9wdHMiLCAiY29udGVudFR5cGUiLCAib25DYWxsZXJUaW1lb3V0IiwgInNlcmlhbGl6ZXJfZGVmYXVsdCIsICJtc2ciLCAiY2FsbGJhY2siLCAicGF5bG9hZCIsICJyYXdQYXlsb2FkIiwgImpvaW5fcmVmIiwgInJlZiIsICJ0b3BpYyIsICJldmVudCIsICJtZXNzYWdlIiwgIm1ldGFMZW5ndGgiLCAiaGVhZGVyIiwgInZpZXciLCAib2Zmc2V0IiwgImNoYXIiLCAiY29tYmluZWQiLCAiYnVmZmVyIiwgImtpbmQiLCAiZGVjb2RlciIsICJqb2luUmVmU2l6ZSIsICJ0b3BpY1NpemUiLCAiZXZlbnRTaXplIiwgImpvaW5SZWYiLCAiZGF0YSIsICJyZWZTaXplIiwgIkNIQU5ORUxfRVZFTlRTIiwgIlNvY2tldCIsICJlbmRQb2ludCIsICJvcHRzIiwgIkRFRkFVTFRfVElNRU9VVCIsICJnbG9iYWwiLCAiTG9uZ1BvbGwiLCAiYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyIsICJwaHhXaW5kb3ciLCAiX2UiLCAidHJpZXMiLCAiY2xvc3VyZSIsICJUUkFOU1BPUlRTIiwgIkRFRkFVTFRfVlNOIiwgIlRpbWVyIiwgIm5ld1RyYW5zcG9ydCIsICJ1cmkiLCAiQWpheCIsICJjb2RlIiwgInJlYXNvbiIsICJwYXJhbXMiLCAic3RhcnRUaW1lIiwgIm9uTXNnUmVmIiwgImVycm9yIiwgImtleSIsICJ2YWwiLCAiZmFsbGJhY2tUcmFuc3BvcnQiLCAiZmFsbGJhY2tUaHJlc2hvbGQiLCAiZXN0YWJsaXNoZWQiLCAicHJpbWFyeVRyYW5zcG9ydCIsICJvcGVuUmVmIiwgImVycm9yUmVmIiwgImZhbGxiYWNrIiwgInJ0dCIsICJXU19DTE9TRV9OT1JNQUwiLCAiU09DS0VUX1NUQVRFUyIsICJjbG9zZUNvZGUiLCAidHJhbnNwb3J0QmVmb3JlIiwgImVzdGFibGlzaGVkQmVmb3JlIiwgImNoYW5uZWwiLCAiYyIsICJyZWZzIiwgImNoYW5QYXJhbXMiLCAiY2hhbiIsICJDaGFubmVsIiwgInJlc3VsdCIsICJuZXdSZWYiLCAicmF3TWVzc2FnZSIsICJpIiwgImR1cENoYW5uZWwiLCAiQ09OU0VDVVRJVkVfUkVMT0FEUyIsICJNQVhfUkVMT0FEUyIsICJSRUxPQURfSklUVEVSX01JTiIsICJSRUxPQURfSklUVEVSX01BWCIsICJGQUlMU0FGRV9KSVRURVIiLCAiUEhYX0VWRU5UX0NMQVNTRVMiLCAiUEhYX0NPTVBPTkVOVCIsICJQSFhfTElWRV9MSU5LIiwgIlBIWF9UUkFDS19TVEFUSUMiLCAiUEhYX0xJTktfU1RBVEUiLCAiUEhYX1JFRl9MT0FESU5HIiwgIlBIWF9SRUZfU1JDIiwgIlBIWF9SRUZfTE9DSyIsICJQSFhfVFJBQ0tfVVBMT0FEUyIsICJQSFhfVVBMT0FEX1JFRiIsICJQSFhfUFJFRkxJR0hURURfUkVGUyIsICJQSFhfRE9ORV9SRUZTIiwgIlBIWF9EUk9QX1RBUkdFVCIsICJQSFhfQUNUSVZFX0VOVFJZX1JFRlMiLCAiUEhYX0xJVkVfRklMRV9VUERBVEVEIiwgIlBIWF9TS0lQIiwgIlBIWF9NQUdJQ19JRCIsICJQSFhfUFJVTkUiLCAiUEhYX0NPTk5FQ1RFRF9DTEFTUyIsICJQSFhfTE9BRElOR19DTEFTUyIsICJQSFhfRVJST1JfQ0xBU1MiLCAiUEhYX0NMSUVOVF9FUlJPUl9DTEFTUyIsICJQSFhfU0VSVkVSX0VSUk9SX0NMQVNTIiwgIlBIWF9QQVJFTlRfSUQiLCAiUEhYX01BSU4iLCAiUEhYX1JPT1RfSUQiLCAiUEhYX1ZJRVdQT1JUX1RPUCIsICJQSFhfVklFV1BPUlRfQk9UVE9NIiwgIlBIWF9UUklHR0VSX0FDVElPTiIsICJQSFhfSEFTX0ZPQ1VTRUQiLCAiRk9DVVNBQkxFX0lOUFVUUyIsICJDSEVDS0FCTEVfSU5QVVRTIiwgIlBIWF9IQVNfU1VCTUlUVEVEIiwgIlBIWF9TRVNTSU9OIiwgIlBIWF9WSUVXX1NFTEVDVE9SIiwgIlBIWF9TVElDS1kiLCAiUEhYX1NUQVRJQyIsICJQSFhfUkVBRE9OTFkiLCAiUEhYX0RJU0FCTEVEIiwgIlBIWF9ESVNBQkxFX1dJVEgiLCAiUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFIiwgIlBIWF9IT09LIiwgIlBIWF9ERUJPVU5DRSIsICJQSFhfVEhST1RUTEUiLCAiUEhYX1VQREFURSIsICJQSFhfU1RSRUFNIiwgIlBIWF9TVFJFQU1fUkVGIiwgIlBIWF9LRVkiLCAiUEhYX1BSSVZBVEUiLCAiUEhYX0FVVE9fUkVDT1ZFUiIsICJQSFhfTFZfREVCVUciLCAiUEhYX0xWX1BST0ZJTEUiLCAiUEhYX0xWX0xBVEVOQ1lfU0lNIiwgIlBIWF9MVl9ISVNUT1JZX1BPU0lUSU9OIiwgIlBIWF9QUk9HUkVTUyIsICJQSFhfTU9VTlRFRCIsICJQSFhfUkVMT0FEX1NUQVRVUyIsICJMT0FERVJfVElNRU9VVCIsICJNQVhfQ0hJTERfSk9JTl9BVFRFTVBUUyIsICJCRUZPUkVfVU5MT0FEX0xPQURFUl9USU1FT1VUIiwgIkJJTkRJTkdfUFJFRklYIiwgIlBVU0hfVElNRU9VVCIsICJERUJPVU5DRV9UUklHR0VSIiwgIlRIUk9UVExFRCIsICJERUJPVU5DRV9QUkVWX0tFWSIsICJERUZBVUxUUyIsICJQSFhfUEVORElOR19BVFRSUyIsICJEWU5BTUlDUyIsICJTVEFUSUMiLCAiUk9PVCIsICJDT01QT05FTlRTIiwgIkVWRU5UUyIsICJSRVBMWSIsICJUSVRMRSIsICJURU1QTEFURVMiLCAiU1RSRUFNIiwgIkVudHJ5VXBsb2FkZXIiLCAiZW50cnkiLCAiY29uZmlnIiwgImxpdmVTb2NrZXQiLCAiY2h1bmtfc2l6ZSIsICJjaHVua190aW1lb3V0IiwgInJlYXNvbiIsICJfZGF0YSIsICJyZWFkZXIiLCAiYmxvYiIsICJlIiwgImxvZ0Vycm9yIiwgImNodW5rIiwgIm1zZyIsICJvYmoiLCAiaXNDaWQiLCAiY2lkIiwgInR5cGUiLCAiZGV0ZWN0RHVwbGljYXRlSWRzIiwgImlkcyIsICJlbGVtcyIsICJpIiwgImxlbiIsICJkZWJ1ZyIsICJ2aWV3IiwgImtpbmQiLCAiY2xvc3VyZSIsICJ2YWwiLCAiY2xvbmUiLCAiY2xvc2VzdFBoeEJpbmRpbmciLCAiZWwiLCAiYmluZGluZyIsICJib3JkZXJFbCIsICJpc09iamVjdCIsICJpc0VxdWFsT2JqIiwgIm9iajEiLCAib2JqMiIsICJpc0VtcHR5IiwgIngiLCAibWF5YmUiLCAiY2FsbGJhY2siLCAiY2hhbm5lbFVwbG9hZGVyIiwgImVudHJpZXMiLCAib25FcnJvciIsICJyZXNwIiwgIkJyb3dzZXIiLCAibG9jYWxTdG9yYWdlIiwgIm5hbWVzcGFjZSIsICJzdWJrZXkiLCAiaW5pdGlhbCIsICJmdW5jIiwgImN1cnJlbnQiLCAia2V5IiwgIm5ld1ZhbCIsICJtZXRhIiwgInRvIiwgImN1cnJlbnRTdGF0ZSIsICJoYXNoRWwiLCAibmFtZSIsICJ2YWx1ZSIsICJtYXhBZ2VTZWNvbmRzIiwgImV4cGlyZXMiLCAidG9VUkwiLCAiZmxhc2giLCAibWF5YmVIYXNoIiwgImhhc2giLCAiYnJvd3Nlcl9kZWZhdWx0IiwgIkRPTSIsICJpZCIsICJjbGFzc05hbWUiLCAibm9kZSIsICJxdWVyeSIsICJhcnJheSIsICJodG1sIiwgInRlbXBsYXRlIiwgImlucHV0RWwiLCAiZm9ybUlkIiwgImlucHV0c091dHNpZGVGb3JtIiwgIndhbnRzTmV3VGFiIiwgImlzRG93bmxvYWQiLCAiaXNUYXJnZXRCbGFuayIsICJpc1RhcmdldE5hbWVkVGFiIiwgImN1cnJlbnRMb2NhdGlvbiIsICJocmVmIiwgInVybCIsICJwYXJlbnRJZCIsICJwaHhVcGRhdGUiLCAidXBkYXRlVHlwZXMiLCAiY2lkcyIsICJwYXJlbnRDaWRzIiwgImNoaWxkcmVuQ2lkcyIsICJwYXJlbnQiLCAiY2hpbGRDSUQiLCAiY2hpbGRDaWQiLCAibm9kZXMiLCAiZGVmYXVsdFZhbCIsICJ1cGRhdGVGdW5jIiwgImV4aXN0aW5nIiwgImZyb21FbCIsICJ0b0VsIiwgImF0dHIiLCAidGFyZ2V0IiwgInNvdXJjZSIsICJzdHIiLCAidGl0bGVFbCIsICJwcmVmaXgiLCAic3VmZml4IiwgImRlZmF1bHRUaXRsZSIsICJpbm5lciIsICJldmVudCIsICJwaHhEZWJvdW5jZSIsICJkZWZhdWx0RGVib3VuY2UiLCAicGh4VGhyb3R0bGUiLCAiZGVmYXVsdFRocm90dGxlIiwgImFzeW5jRmlsdGVyIiwgImRlYm91bmNlIiwgInRocm90dGxlIiwgInRpbWVvdXQiLCAidHJpZ2dlciIsICJjdXJyZW50Q3ljbGUiLCAibmV3S2V5RG93biIsICJwcmV2S2V5IiwgInQiLCAiZm9ybSIsICJpbnB1dCIsICJjeWNsZSIsICJwaHhWaWV3cG9ydFRvcCIsICJwaHhWaWV3cG9ydEJvdHRvbSIsICJob29rIiwgInBhcmVudHMiLCAib3B0cyIsICJkZWZhdWx0QnViYmxlIiwgImV2ZW50T3B0cyIsICJjbG9uZWQiLCAiZXhjbHVkZSIsICJpc0lnbm9yZWQiLCAic291cmNlQXR0cnMiLCAic291cmNlVmFsdWUiLCAidGFyZ2V0QXR0cnMiLCAiZm9jdXNlZCIsICJzZWxlY3Rpb25TdGFydCIsICJzZWxlY3Rpb25FbmQiLCAicGh4VHJpZ2dlckV4dGVybmFsIiwgImNvbnRhaW5lciIsICJ0b1JlbW92ZSIsICJjaGlsZE5vZGUiLCAidGFnTmFtZSIsICJhdHRycyIsICJyZXRhaW5lZEF0dHJzIiwgIm5ld0NvbnRhaW5lciIsICJvcCIsICJleGlzdGluZ05hbWUiLCAiX25hbWUiLCAiX29wIiwgInN0YXNoZWRSZXN1bHQiLCAib3BzIiwgIl8iLCAiZXhpc3RpbmdJbmRleCIsICJfc3Rhc2hlZCIsICJkb21fZGVmYXVsdCIsICJVcGxvYWRFbnRyeSIsICJmaWxlRWwiLCAiZmlsZSIsICJpc05ldyIsICJpc0FjdGl2ZSIsICJMaXZlVXBsb2FkZXIiLCAiYXV0b1VwbG9hZCIsICJwcm9ncmVzcyIsICJ1cGxvYWRlcnMiLCAibGl2ZVVwbG9hZGVyRmlsZVJlZiIsICJfTGl2ZVVwbG9hZGVyIiwgInJlZiIsICJmb3JtRWwiLCAiYWN0aXZlIiwgImZpbGVzIiwgImZpbGVEYXRhIiwgInVwbG9hZFJlZiIsICJmIiwgImRhdGFUcmFuc2ZlciIsICJuZXdGaWxlcyIsICJmaWxlSW5wdXRzIiwgIm9uQ29tcGxldGUiLCAiZ3JvdXBlZEVudHJpZXMiLCAiYWNjIiwgIkFSSUEiLCAiaW5zdGFuY2UiLCAiY2xhc3NlcyIsICJpbnRlcmFjdGl2ZU9ubHkiLCAiY2hpbGQiLCAiYXJpYV9kZWZhdWx0IiwgIkhvb2tzIiwgIm5ld1ByZWZsaWdodHMiLCAiZmluZFNjcm9sbENvbnRhaW5lciIsICJzY3JvbGxUb3AiLCAic2Nyb2xsQ29udGFpbmVyIiwgImJvdHRvbSIsICJ0b3AiLCAiaXNBdFZpZXdwb3J0VG9wIiwgInJlY3QiLCAiaXNBdFZpZXdwb3J0Qm90dG9tIiwgImlzV2l0aGluVmlld3BvcnQiLCAic2Nyb2xsQmVmb3JlIiwgInRvcE92ZXJyYW4iLCAidGhyb3R0bGVJbnRlcnZhbCIsICJwZW5kaW5nT3AiLCAib25Ub3BPdmVycnVuIiwgInRvcEV2ZW50IiwgImZpcnN0Q2hpbGQiLCAib25GaXJzdENoaWxkQXRUb3AiLCAib25MYXN0Q2hpbGRBdEJvdHRvbSIsICJib3R0b21FdmVudCIsICJsYXN0Q2hpbGQiLCAiX2UiLCAic2Nyb2xsTm93IiwgImlzU2Nyb2xsaW5nVXAiLCAiaXNTY3JvbGxpbmdEb3duIiwgImludGVydmFsIiwgImxhc3RDYWxsQXQiLCAidGltZXIiLCAiYXJncyIsICJub3ciLCAicmVtYWluaW5nVGltZSIsICJob29rc19kZWZhdWx0IiwgIkVsZW1lbnRSZWYiLCAicGh4RXZlbnQiLCAiZWFjaENsb25lQ2FsbGJhY2siLCAiY2xvbmVkVHJlZSIsICJkaXNhYmxlZFZhbCIsICJyZWFkT25seVZhbCIsICJkaXNhYmxlUmVzdG9yZSIsICJET01Qb3N0TW9ycGhSZXN0b3JlciIsICJjb250YWluZXJCZWZvcmUiLCAiY29udGFpbmVyQWZ0ZXIiLCAidXBkYXRlVHlwZSIsICJpZHNCZWZvcmUiLCAiaWRzQWZ0ZXIiLCAiZWxlbWVudHNUb01vZGlmeSIsICJwcmV2aW91c0VsZW1lbnRJZCIsICJlbGVtZW50VG9Nb2RpZnkiLCAicHJldmlvdXNFbGVtIiwgImVsZW0iLCAiZWxlbUlkIiwgIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCAibW9ycGhBdHRycyIsICJmcm9tTm9kZSIsICJ0b05vZGUiLCAidG9Ob2RlQXR0cnMiLCAiYXR0ck5hbWUiLCAiYXR0ck5hbWVzcGFjZVVSSSIsICJhdHRyVmFsdWUiLCAiZnJvbVZhbHVlIiwgImZyb21Ob2RlQXR0cnMiLCAiZCIsICJyYW5nZSIsICJOU19YSFRNTCIsICJkb2MiLCAiSEFTX1RFTVBMQVRFX1NVUFBPUlQiLCAiSEFTX1JBTkdFX1NVUFBPUlQiLCAiY3JlYXRlRnJhZ21lbnRGcm9tVGVtcGxhdGUiLCAiY3JlYXRlRnJhZ21lbnRGcm9tUmFuZ2UiLCAiZnJhZ21lbnQiLCAiY3JlYXRlRnJhZ21lbnRGcm9tV3JhcCIsICJ0b0VsZW1lbnQiLCAiY29tcGFyZU5vZGVOYW1lcyIsICJmcm9tTm9kZU5hbWUiLCAidG9Ob2RlTmFtZSIsICJmcm9tQ29kZVN0YXJ0IiwgInRvQ29kZVN0YXJ0IiwgImNyZWF0ZUVsZW1lbnROUyIsICJuYW1lc3BhY2VVUkkiLCAibW92ZUNoaWxkcmVuIiwgImN1ckNoaWxkIiwgIm5leHRDaGlsZCIsICJzeW5jQm9vbGVhbkF0dHJQcm9wIiwgInNwZWNpYWxFbEhhbmRsZXJzIiwgInBhcmVudE5vZGUiLCAicGFyZW50TmFtZSIsICJuZXdWYWx1ZSIsICJvbGRWYWx1ZSIsICJzZWxlY3RlZEluZGV4IiwgIm9wdGdyb3VwIiwgIm5vZGVOYW1lIiwgIkVMRU1FTlRfTk9ERSIsICJET0NVTUVOVF9GUkFHTUVOVF9OT0RFJDEiLCAiVEVYVF9OT0RFIiwgIkNPTU1FTlRfTk9ERSIsICJub29wIiwgImRlZmF1bHRHZXROb2RlS2V5IiwgIm1vcnBoZG9tRmFjdG9yeSIsICJvcHRpb25zIiwgInRvTm9kZUh0bWwiLCAiZ2V0Tm9kZUtleSIsICJvbkJlZm9yZU5vZGVBZGRlZCIsICJvbk5vZGVBZGRlZCIsICJvbkJlZm9yZUVsVXBkYXRlZCIsICJvbkVsVXBkYXRlZCIsICJvbkJlZm9yZU5vZGVEaXNjYXJkZWQiLCAib25Ob2RlRGlzY2FyZGVkIiwgIm9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQiLCAic2tpcEZyb21DaGlsZHJlbiIsICJhZGRDaGlsZCIsICJjaGlsZHJlbk9ubHkiLCAiZnJvbU5vZGVzTG9va3VwIiwgImtleWVkUmVtb3ZhbExpc3QiLCAiYWRkS2V5ZWRSZW1vdmFsIiwgIndhbGtEaXNjYXJkZWRDaGlsZE5vZGVzIiwgInNraXBLZXllZE5vZGVzIiwgInJlbW92ZU5vZGUiLCAiaW5kZXhUcmVlIiwgImhhbmRsZU5vZGVBZGRlZCIsICJuZXh0U2libGluZyIsICJ1bm1hdGNoZWRGcm9tRWwiLCAibW9ycGhFbCIsICJjbGVhbnVwRnJvbUVsIiwgImN1ckZyb21Ob2RlQ2hpbGQiLCAiY3VyRnJvbU5vZGVLZXkiLCAiZnJvbU5leHRTaWJsaW5nIiwgInRvRWxLZXkiLCAiYmVmb3JlVXBkYXRlUmVzdWx0IiwgIm1vcnBoQ2hpbGRyZW4iLCAic2tpcEZyb20iLCAiY3VyVG9Ob2RlQ2hpbGQiLCAiY3VyVG9Ob2RlS2V5IiwgInRvTmV4dFNpYmxpbmciLCAibWF0Y2hpbmdGcm9tRWwiLCAib3V0ZXIiLCAiY3VyRnJvbU5vZGVUeXBlIiwgImlzQ29tcGF0aWJsZSIsICJvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCIsICJzcGVjaWFsRWxIYW5kbGVyIiwgIm1vcnBoZWROb2RlIiwgIm1vcnBoZWROb2RlVHlwZSIsICJ0b05vZGVUeXBlIiwgImVsVG9SZW1vdmUiLCAibW9ycGhkb20iLCAibW9ycGhkb21fZXNtX2RlZmF1bHQiLCAiRE9NUGF0Y2giLCAic3RyZWFtcyIsICJ0YXJnZXRDSUQiLCAiaXNKb2luUGF0Y2giLCAidGFyZ2V0Q29udGFpbmVyIiwgImFkZGVkIiwgInVwZGF0ZXMiLCAiYXBwZW5kUHJlcGVuZFVwZGF0ZXMiLCAiZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkIiwgIm1vcnBoIiwgIndpdGhDaGlsZHJlbiIsICJtb3JwaENhbGxiYWNrcyIsICJmcm9tIiwgInN0cmVhbUF0IiwgIm5vblN0cmVhbUNoaWxkIiwgImMiLCAic2libGluZyIsICJtb3JwaGVkRWwiLCAiZnJvbVZhbCIsICJ0b1ZhbCIsICJpc0ZvY3VzZWRGb3JtRWwiLCAiZm9jdXNlZFNlbGVjdENoYW5nZWQiLCAicHJldlNlc3Npb24iLCAiaW5zZXJ0cyIsICJkZWxldGVJZHMiLCAicmVzZXQiLCAibGltaXQiLCAidXBkYXRlIiwgImNoaWxkcmVuIiwgIm9sZEluZGV4IiwgInBlbmRpbmdSZW1vdmVzIiwgImZpcnN0IiwgInJlc3QiLCAiVk9JRF9UQUdTIiwgInF1b3RlQ2hhcnMiLCAibW9kaWZ5Um9vdCIsICJjbGVhcklubmVySFRNTCIsICJpbnNpZGVDb21tZW50IiwgImJlZm9yZVRhZyIsICJhZnRlclRhZyIsICJ0YWciLCAidGFnTmFtZUVuZHNBdCIsICJuZXdIVE1MIiwgImxvb2thaGVhZCIsICJpc0lkIiwgImNoYXIiLCAiYXR0clN0YXJ0c0F0IiwgImNsb3NlQXQiLCAiYXR0cnNTdHIiLCAiaWRBdHRyU3RyIiwgIlJlbmRlcmVkIiwgImRpZmYiLCAicmVwbHkiLCAiZXZlbnRzIiwgInRpdGxlIiwgInZpZXdJZCIsICJyZW5kZXJlZCIsICJvbmx5Q2lkcyIsICJjb21wb25lbnRzIiwgImNoYW5nZVRyYWNraW5nIiwgInJvb3RBdHRycyIsICJvdXRwdXQiLCAibmV3YyIsICJjYWNoZSIsICJvbGRjIiwgImNkaWZmIiwgIm5kaWZmIiwgInN0YXQiLCAic2NpZCIsICJ0ZGlmZiIsICJ0YXJnZXRWYWwiLCAicHJ1bmVNYWdpY0lkIiwgIm1lcmdlZCIsICJzdHJpcHBlZEhUTUwiLCAiX2JlZm9yZSIsICJfYWZ0ZXIiLCAicGFydCIsICJ0ZW1wbGF0ZXMiLCAic3RhdGljcyIsICJpc1Jvb3QiLCAicHJldkJ1ZmZlciIsICJza2lwIiwgIm5ld1Jvb3QiLCAiY29tbWVudEJlZm9yZSIsICJjb21tZW50QWZ0ZXIiLCAiZHluYW1pY3MiLCAic3RyZWFtIiwgIl9yZWYiLCAiX2luc2VydHMiLCAiY29tcFRlbXBsYXRlcyIsICJkeW5hbWljIiwgImNvbXBvbmVudCIsICJmb2N1c1N0YWNrIiwgImRlZmF1bHRfdHJhbnNpdGlvbl90aW1lIiwgIkpTIiwgImV2ZW50VHlwZSIsICJzb3VyY2VFbCIsICJkZWZhdWx0cyIsICJkZWZhdWx0S2luZCIsICJkZWZhdWx0QXJncyIsICJ3aW5kb3dIZWlnaHQiLCAid2luZG93V2lkdGgiLCAiZW5jb2RlZEpTIiwgImRldGFpbCIsICJidWJibGVzIiwgImRhdGEiLCAicGFnZV9sb2FkaW5nIiwgImxvYWRpbmciLCAiZGlzcGF0Y2hlciIsICJwdXNoT3B0cyIsICJ0YXJnZXRTcmMiLCAicGh4VGFyZ2V0IiwgInRhcmdldFZpZXciLCAidGFyZ2V0Q3R4IiwgIm5ld0NpZCIsICJfdGFyZ2V0IiwgInN1Ym1pdHRlciIsICJyZXBsYWNlIiwgIl9ldmVudFR5cGUiLCAiX3BoeEV2ZW50IiwgIl92aWV3IiwgIl9zb3VyY2VFbCIsICJfZWwiLCAibmFtZXMiLCAidHJhbnNpdGlvbiIsICJ0aW1lIiwgImJsb2NraW5nIiwgInZhbDEiLCAidmFsMiIsICJkaXNwbGF5IiwgImlucyIsICJvdXRzIiwgImluQ2xhc3NlcyIsICJpblN0YXJ0Q2xhc3NlcyIsICJpbkVuZENsYXNzZXMiLCAib3V0Q2xhc3NlcyIsICJvdXRTdGFydENsYXNzZXMiLCAib3V0RW5kQ2xhc3NlcyIsICJvblN0YXJ0IiwgIm9uRW5kIiwgImN1cnJlbnRFbCIsICJzdGlja3lEaXNwbGF5IiwgInByZXZBZGRzIiwgInByZXZSZW1vdmVzIiwgIm5ld0FkZHMiLCAibmV3UmVtb3ZlcyIsICJhZGRzIiwgInJlbW92ZXMiLCAidHJhbnNpdGlvblJ1biIsICJ0cmFuc2l0aW9uU3RhcnQiLCAidHJhbnNpdGlvbkVuZCIsICJvbkRvbmUiLCAia2VlcEFkZHMiLCAia2VlcFJlbW92ZXMiLCAic2V0cyIsICJwcmV2U2V0cyIsICJhbHRlcmVkQXR0cnMiLCAiX3ZhbCIsICJuZXdTZXRzIiwgImRlZmF1bHRRdWVyeSIsICJ0cmFucyIsICJ0U3RhcnQiLCAidEVuZCIsICJqc19kZWZhdWx0IiwgIkhPT0tfSUQiLCAidmlld0hvb2tJRCIsICJWaWV3SG9vayIsICJjYWxsYmFja3MiLCAib3duZXIiLCAicGF5bG9hZCIsICJvblJlcGx5IiwgInJlc29sdmUiLCAicmVqZWN0IiwgImVycm9yIiwgImNhbGxiYWNrUmVmIiwgImN1c3RvbUV2ZW50IiwgImJ5cGFzcyIsICJwcmVwZW5kRm9ybURhdGFLZXkiLCAiaXNBcnJheSIsICJiYXNlS2V5IiwgInNlcmlhbGl6ZUZvcm0iLCAibWV0YWRhdGEiLCAib25seU5hbWVzIiwgImluamVjdGVkRWxlbWVudCIsICJmb3JtRGF0YSIsICJfaW5kZXgiLCAicGFyYW1zIiwgImVsZW1lbnRzIiwgImlucHV0cyIsICJpc1VudXNlZCIsICJoaWRkZW4iLCAibWV0YUtleSIsICJWaWV3IiwgIl9WaWV3IiwgImxpdmVWaWV3RWwiLCAicGFyZW50VmlldyIsICJsaXZlUmVmZXJlciIsICJtYW5pZmVzdCIsICJvbkZpbmlzaGVkIiwgIm1zZ0NhbGxiYWNrIiwgImRvbSIsICJ2aWV3RWwiLCAidGFyZ2V0cyIsICJyYXdEaWZmIiwgImxpdmV2aWV3X3ZlcnNpb24iLCAibGl2ZV9wYXRjaCIsICJwaHhTdGF0aWMiLCAiaG9va0VsIiwgInBhdGNoIiwgInBoeE1vdW50ZWQiLCAiaGFzQmVlbkludm9rZWQiLCAibmV3SG9vayIsICJwcnVuZUNpZHMiLCAicmVtb3ZlZEVscyIsICJwaHhDaGlsZHJlbkFkZGVkIiwgInVwZGF0ZWRIb29rSWRzIiwgImVscyIsICJkZXN0cm95ZWRDSURzIiwgImhvb2tzIiwgInBoeENoYW5nZSIsICJvbGRGb3JtcyIsICJyb290RWwiLCAiZm9ybXNUb1JlY292ZXIiLCAibmV3Rm9ybSIsICJvbGRGb3JtIiwgImNoaWxkSWQiLCAiX2NoaWxkIiwgInBhcmVudENJRCIsICJob29rRWxJZCIsICJob29rTmFtZSIsICJjYiIsICJyZWRpciIsICJyZWxvYWRUb2tlbiIsICJ0cnVlQ2hpbGRFbCIsICJjYWxsZXJQdXNoIiwgInJlY2VpdmVzIiwgImxhdGVuY3kiLCAid2l0aExhdGVuY3kiLCAicmVmR2VuZXJhdG9yIiwgIm9sZEpvaW5Db3VudCIsICJvbkxvYWRpbmdEb25lIiwgImZpbmlzaCIsICJob29rUmVwbHkiLCAib25seUVscyIsICJzZWxlY3RvciIsICJuZXdSZWYiLCAiZGlzYWJsZVdpdGgiLCAibG9hZGluZ0VscyIsICJsb2NrIiwgImxvY2tDb21wbGV0ZVByb21pc2UiLCAibG9hZGluZ0NvbXBsZXRlUHJvbWlzZSIsICJkaXNhYmxlVGV4dCIsICJsb2NrRWwiLCAiY2lkT3JTZWxlY3RvciIsICJfcmVzcCIsICJlbnRyeVJlZiIsICJmb3JjZUNpZCIsICJ1cGxvYWRzIiwgIl9lbHMiLCAiX3VwbG9hZHMiLCAiYXdhaXRpbmdTdWJtaXQiLCAiX29wdHMiLCAiX2NhbGxiYWNrIiwgImZpbHRlcklnbm9yZWQiLCAiZmlsdGVyRGlzYWJsZXMiLCAiZmlsdGVyQnV0dG9uIiwgImZpbHRlcklucHV0IiwgImZvcm1FbGVtZW50cyIsICJkaXNhYmxlcyIsICJidXR0b25zIiwgImJ1dHRvbiIsICJmb3JtRWxzIiwgInB1c2giLCAicHJveHlSZWZHZW4iLCAiam9pbkNvdW50QXRVcGxvYWQiLCAiaW5wdXRFbHMiLCAibnVtRmlsZUlucHV0c0luUHJvZ3Jlc3MiLCAidXBsb2FkZXIiLCAiZW50cnlfcmVmIiwgImZpbGVzT3JCbG9icyIsICJ0YXJnZXRFbGVtZW50IiwgInRlbXBsYXRlRG9tIiwgInBlbmRpbmciLCAidGFyZ2V0RWwiLCAibGlua1JlZiIsICJyZWZHZW4iLCAiZmFsbGJhY2siLCAiX2Vycm9yIiwgIl90aW1lb3V0IiwgIndpbGxEZXN0cm95Q0lEcyIsICJjb21wbGV0ZWx5RGVzdHJveUNJRHMiLCAicGFyZW50Vmlld0VsIiwgIkxpdmVTb2NrZXQiLCAidXJsIiwgInBoeFNvY2tldCIsICJvcHRzIiwgIkJJTkRJTkdfUFJFRklYIiwgImNsb3N1cmUiLCAiY2xvbmUiLCAiREVGQVVMVFMiLCAiTE9BREVSX1RJTUVPVVQiLCAiTUFYX1JFTE9BRFMiLCAiUkVMT0FEX0pJVFRFUl9NSU4iLCAiUkVMT0FEX0pJVFRFUl9NQVgiLCAiRkFJTFNBRkVfSklUVEVSIiwgIlRyYW5zaXRpb25TZXQiLCAiUEhYX0xWX0hJU1RPUllfUE9TSVRJT04iLCAiX2UiLCAiUEhYX0xWX1BST0ZJTEUiLCAiUEhYX0xWX0RFQlVHIiwgInVwcGVyQm91bmRNcyIsICJQSFhfTFZfTEFURU5DWV9TSU0iLCAic3RyIiwgImRvQ29ubmVjdCIsICJjYWxsYmFjayIsICJ0cmFuc3BvcnQiLCAiZWwiLCAiZW5jb2RlZEpTIiwgImV2ZW50VHlwZSIsICJlIiwgInZpZXciLCAianNfZGVmYXVsdCIsICJwaHhFdmVudCIsICJkYXRhIiwgImtpbmQiLCAiYXJncyIsICJuYW1lIiwgImZ1bmMiLCAicmVzdWx0IiwgIm1zZ0NhbGxiYWNrIiwgIm1zZyIsICJvYmoiLCAiZGVidWciLCAidGltZSIsICJvblN0YXJ0IiwgIm9uRG9uZSIsICJjaGFubmVsIiwgImV2ZW50IiwgImNiIiwgImxhdGVuY3kiLCAibG9nIiwgIm1pbk1zIiwgIm1heE1zIiwgImFmdGVyTXMiLCAidHJpZXMiLCAiYnJvd3Nlcl9kZWZhdWx0IiwgIkNPTlNFQ1VUSVZFX1JFTE9BRFMiLCAiY291bnQiLCAiaG9va3NfZGVmYXVsdCIsICJ0b3BpYyIsICJwYXJhbXMiLCAiYm9keSIsICJyb290c0ZvdW5kIiwgImRvbV9kZWZhdWx0IiwgIlBIWF9WSUVXX1NFTEVDVE9SIiwgIlBIWF9QQVJFTlRfSUQiLCAicm9vdEVsIiwgIlBIWF9NQUlOIiwgInRvIiwgImZsYXNoIiwgInJlbG9hZFRva2VuIiwgIlBIWF9SRUxPQURfU1RBVFVTIiwgImhyZWYiLCAibGlua1JlZiIsICJsaXZlUmVmZXJlciIsICJyZW1vdmVFbHMiLCAibmV3TWFpbkVsIiwgImpvaW5Db3VudCIsICJlbGVtZW50cyIsICJza2lwU3RpY2t5IiwgInJlbW92ZUF0dHIiLCAic3RpY2tpZXMiLCAic2lsZW5jZUV2ZW50cyIsICJQSFhfU0VTU0lPTiIsICJWaWV3IiwgImNoaWxkRWwiLCAibWF5YmUiLCAicm9vdElkIiwgIlBIWF9ST09UX0lEIiwgInJvb3QiLCAiaWQiLCAiZGVhZCIsICJ0eXBlIiwgInRhcmdldEVsIiwgIl9waHhUYXJnZXQiLCAibWF0Y2hLZXkiLCAiUEhYX0tFWSIsICJwcmVzc2VkS2V5IiwgInBoeFRhcmdldCIsICJkcm9wVGFyZ2V0SWQiLCAiY2xvc2VzdFBoeEJpbmRpbmciLCAiUEhYX0RST1BfVEFSR0VUIiwgInRydWVUYXJnZXQiLCAiZHJvcFRhcmdldCIsICJmaWxlcyIsICJMaXZlVXBsb2FkZXIiLCAiUEhYX1RSQUNLX1VQTE9BRFMiLCAidXBsb2FkVGFyZ2V0IiwgImYiLCAiZXZlbnROYW1lIiwgImV2ZW50cyIsICJicm93c2VyRXZlbnROYW1lIiwgImJpbmRpbmciLCAid2luZG93QmluZGluZyIsICJ0YXJnZXRQaHhFdmVudCIsICJiaW5kaW5nTmFtZSIsICJjbGljayIsICJ0YXJnZXQiLCAiY2xpY2tTdGFydGVkQXRUYXJnZXQiLCAiUEhYX1JFRl9TUkMiLCAiY2xpY2tTdGFydGVkQXQiLCAicGh4Q2xpY2tBd2F5IiwgInNjcm9sbFRpbWVyIiwgInN0YXRlIiwgImJhY2tUeXBlIiwgInNjcm9sbCIsICJwb3NpdGlvbiIsICJpc0ZvcndhcmQiLCAiUEhYX0xJVkVfTElOSyIsICJsaW5rU3RhdGUiLCAiUEhYX0xJTktfU1RBVEUiLCAicGh4Q2xpY2siLCAicGF5bG9hZCIsICJpbmZvIiwgImRvbmUiLCAicHJvdG9jb2wiLCAiaG9zdCIsICJuZXdMb2NhdGlvbiIsICJwYXRobmFtZSIsICJzZWFyY2giLCAiaXRlcmF0aW9ucyIsICJleHRlcm5hbEZvcm1TdWJtaXR0ZWQiLCAicGh4U3VibWl0IiwgInBoeENoYW5nZSIsICJpbnB1dCIsICJrZXkiLCAiaW5wdXRFdmVudCIsICJmb3JtRXZlbnQiLCAiZGlzcGF0Y2hlciIsICJjdXJyZW50SXRlcmF0aW9ucyIsICJhdCIsICJsYXN0VHlwZSIsICJQSFhfSEFTX0ZPQ1VTRUQiLCAiZm9ybSIsICJwaHhEZWJvdW5jZSIsICJQSFhfREVCT1VOQ0UiLCAicGh4VGhyb3R0bGUiLCAiUEhYX1RIUk9UVExFIiwgImRlZmF1bHREZWJvdW5jZSIsICJkZWZhdWx0VGhyb3R0bGUiLCAiYXN5bmNGaWx0ZXIiLCAic291cmNlRWwiLCAicXVlcnkiLCAiZGVmYXVsdFF1ZXJ5IiwgImFsbCIsICJ0aW1lciIsICJvcCIsICJpbXBvcnRfdG9wYmFyIiwgIm93bktleXMiLCAib2JqZWN0IiwgImVudW1lcmFibGVPbmx5IiwgImtleXMiLCAic3ltYm9scyIsICJzeW0iLCAiX29iamVjdFNwcmVhZDIiLCAidGFyZ2V0IiwgImkiLCAic291cmNlIiwgImtleSIsICJfZGVmaW5lUHJvcGVydHkiLCAiX3R5cGVvZiIsICJvYmoiLCAidmFsdWUiLCAiX2V4dGVuZHMiLCAiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCAiZXhjbHVkZWQiLCAic291cmNlS2V5cyIsICJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCAic291cmNlU3ltYm9sS2V5cyIsICJ2ZXJzaW9uIiwgInVzZXJBZ2VudCIsICJwYXR0ZXJuIiwgIklFMTFPckxlc3MiLCAiRWRnZSIsICJGaXJlRm94IiwgIlNhZmFyaSIsICJJT1MiLCAiQ2hyb21lRm9yQW5kcm9pZCIsICJjYXB0dXJlTW9kZSIsICJvbiIsICJlbCIsICJldmVudCIsICJmbiIsICJvZmYiLCAibWF0Y2hlcyIsICJzZWxlY3RvciIsICJnZXRQYXJlbnRPckhvc3QiLCAiY2xvc2VzdCIsICJjdHgiLCAiaW5jbHVkZUNUWCIsICJSX1NQQUNFIiwgInRvZ2dsZUNsYXNzIiwgIm5hbWUiLCAic3RhdGUiLCAiY2xhc3NOYW1lIiwgImNzcyIsICJwcm9wIiwgInZhbCIsICJzdHlsZSIsICJtYXRyaXgiLCAic2VsZk9ubHkiLCAiYXBwbGllZFRyYW5zZm9ybXMiLCAidHJhbnNmb3JtIiwgIm1hdHJpeEZuIiwgImZpbmQiLCAidGFnTmFtZSIsICJpdGVyYXRvciIsICJsaXN0IiwgImkiLCAibiIsICJnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50IiwgInNjcm9sbGluZ0VsZW1lbnQiLCAiZ2V0UmVjdCIsICJyZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrIiwgInJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQiLCAidW5kb1NjYWxlIiwgImNvbnRhaW5lciIsICJlbFJlY3QiLCAidG9wIiwgImxlZnQiLCAiYm90dG9tIiwgInJpZ2h0IiwgImhlaWdodCIsICJ3aWR0aCIsICJjb250YWluZXJSZWN0IiwgImVsTWF0cml4IiwgInNjYWxlWCIsICJzY2FsZVkiLCAiaXNTY3JvbGxlZFBhc3QiLCAiZWxTaWRlIiwgInBhcmVudFNpZGUiLCAicGFyZW50IiwgImdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50IiwgImVsU2lkZVZhbCIsICJwYXJlbnRTaWRlVmFsIiwgInZpc2libGUiLCAiZ2V0Q2hpbGQiLCAiY2hpbGROdW0iLCAib3B0aW9ucyIsICJpbmNsdWRlRHJhZ0VsIiwgImN1cnJlbnRDaGlsZCIsICJjaGlsZHJlbiIsICJTb3J0YWJsZSIsICJsYXN0Q2hpbGQiLCAibGFzdCIsICJpbmRleCIsICJnZXRSZWxhdGl2ZVNjcm9sbE9mZnNldCIsICJvZmZzZXRMZWZ0IiwgIm9mZnNldFRvcCIsICJ3aW5TY3JvbGxlciIsICJpbmRleE9mT2JqZWN0IiwgImFyciIsICJvYmoiLCAia2V5IiwgImluY2x1ZGVTZWxmIiwgImVsZW0iLCAiZ290U2VsZiIsICJlbGVtQ1NTIiwgImV4dGVuZCIsICJkc3QiLCAic3JjIiwgImlzUmVjdEVxdWFsIiwgInJlY3QxIiwgInJlY3QyIiwgIl90aHJvdHRsZVRpbWVvdXQiLCAidGhyb3R0bGUiLCAiY2FsbGJhY2siLCAibXMiLCAiYXJncyIsICJfdGhpcyIsICJjYW5jZWxUaHJvdHRsZSIsICJzY3JvbGxCeSIsICJ4IiwgInkiLCAiY2xvbmUiLCAiUG9seW1lciIsICIkIiwgImdldENoaWxkQ29udGFpbmluZ1JlY3RGcm9tRWxlbWVudCIsICJjb250YWluZXIiLCAib3B0aW9ucyIsICJnaG9zdEVsIiwgInJlY3QiLCAiY2hpbGQiLCAiX3JlY3QkbGVmdCIsICJfcmVjdCR0b3AiLCAiX3JlY3QkcmlnaHQiLCAiX3JlY3QkYm90dG9tIiwgImNsb3Nlc3QiLCAiY2hpbGRSZWN0IiwgImdldFJlY3QiLCAiZXhwYW5kbyIsICJBbmltYXRpb25TdGF0ZU1hbmFnZXIiLCAiYW5pbWF0aW9uU3RhdGVzIiwgImFuaW1hdGlvbkNhbGxiYWNrSWQiLCAiY2hpbGRyZW4iLCAiY3NzIiwgIlNvcnRhYmxlIiwgImZyb21SZWN0IiwgIl9vYmplY3RTcHJlYWQyIiwgImNoaWxkTWF0cml4IiwgIm1hdHJpeCIsICJzdGF0ZSIsICJ0YXJnZXQiLCAiaW5kZXhPZk9iamVjdCIsICJjYWxsYmFjayIsICJfdGhpcyIsICJhbmltYXRpbmciLCAiYW5pbWF0aW9uVGltZSIsICJ0aW1lIiwgInRvUmVjdCIsICJwcmV2RnJvbVJlY3QiLCAicHJldlRvUmVjdCIsICJhbmltYXRpbmdSZWN0IiwgInRhcmdldE1hdHJpeCIsICJpc1JlY3RFcXVhbCIsICJjYWxjdWxhdGVSZWFsVGltZSIsICJjdXJyZW50UmVjdCIsICJkdXJhdGlvbiIsICJlbE1hdHJpeCIsICJzY2FsZVgiLCAic2NhbGVZIiwgInRyYW5zbGF0ZVgiLCAidHJhbnNsYXRlWSIsICJyZXBhaW50IiwgInBsdWdpbnMiLCAiZGVmYXVsdHMiLCAiUGx1Z2luTWFuYWdlciIsICJwbHVnaW4iLCAib3B0aW9uIiwgInAiLCAiZXZlbnROYW1lIiwgInNvcnRhYmxlIiwgImV2dCIsICJldmVudE5hbWVHbG9iYWwiLCAiZWwiLCAicGx1Z2luTmFtZSIsICJpbml0aWFsaXplZCIsICJfZXh0ZW5kcyIsICJtb2RpZmllZCIsICJuYW1lIiwgImV2ZW50UHJvcGVydGllcyIsICJ2YWx1ZSIsICJtb2RpZmllZFZhbHVlIiwgImRpc3BhdGNoRXZlbnQiLCAiX3JlZiIsICJyb290RWwiLCAidGFyZ2V0RWwiLCAiY2xvbmVFbCIsICJ0b0VsIiwgImZyb21FbCIsICJvbGRJbmRleCIsICJuZXdJbmRleCIsICJvbGREcmFnZ2FibGVJbmRleCIsICJuZXdEcmFnZ2FibGVJbmRleCIsICJvcmlnaW5hbEV2ZW50IiwgInB1dFNvcnRhYmxlIiwgImV4dHJhRXZlbnRQcm9wZXJ0aWVzIiwgIm9uTmFtZSIsICJJRTExT3JMZXNzIiwgIkVkZ2UiLCAiYWxsRXZlbnRQcm9wZXJ0aWVzIiwgIl9leGNsdWRlZCIsICJwbHVnaW5FdmVudCIsICJkYXRhIiwgIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsICJkcmFnRWwiLCAicGFyZW50RWwiLCAibmV4dEVsIiwgImxhc3REb3duRWwiLCAiY2xvbmVIaWRkZW4iLCAibW92ZWQiLCAiX2hpZGVHaG9zdEZvclRhcmdldCIsICJfdW5oaWRlR2hvc3RGb3JUYXJnZXQiLCAiX2Rpc3BhdGNoRXZlbnQiLCAiaW5mbyIsICJhY3RpdmVHcm91cCIsICJhd2FpdGluZ0RyYWdTdGFydGVkIiwgImlnbm9yZU5leHRDbGljayIsICJzb3J0YWJsZXMiLCAidGFwRXZ0IiwgInRvdWNoRXZ0IiwgImxhc3REeCIsICJsYXN0RHkiLCAidGFwRGlzdGFuY2VMZWZ0IiwgInRhcERpc3RhbmNlVG9wIiwgImxhc3RUYXJnZXQiLCAibGFzdERpcmVjdGlvbiIsICJwYXN0Rmlyc3RJbnZlcnRUaHJlc2giLCAiaXNDaXJjdW1zdGFudGlhbEludmVydCIsICJ0YXJnZXRNb3ZlRGlzdGFuY2UiLCAiZ2hvc3RSZWxhdGl2ZVBhcmVudCIsICJnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbCIsICJfc2lsZW50IiwgInNhdmVkSW5wdXRDaGVja2VkIiwgImRvY3VtZW50RXhpc3RzIiwgIlBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5IiwgIklPUyIsICJDU1NGbG9hdFByb3BlcnR5IiwgInN1cHBvcnREcmFnZ2FibGUiLCAiQ2hyb21lRm9yQW5kcm9pZCIsICJzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyIsICJfZGV0ZWN0RGlyZWN0aW9uIiwgImVsQ1NTIiwgImVsV2lkdGgiLCAiY2hpbGQxIiwgImdldENoaWxkIiwgImNoaWxkMiIsICJmaXJzdENoaWxkQ1NTIiwgInNlY29uZENoaWxkQ1NTIiwgImZpcnN0Q2hpbGRXaWR0aCIsICJzZWNvbmRDaGlsZFdpZHRoIiwgInRvdWNoaW5nU2lkZUNoaWxkMiIsICJfZHJhZ0VsSW5Sb3dDb2x1bW4iLCAiZHJhZ1JlY3QiLCAidGFyZ2V0UmVjdCIsICJ2ZXJ0aWNhbCIsICJkcmFnRWxTMU9wcCIsICJkcmFnRWxTMk9wcCIsICJkcmFnRWxPcHBMZW5ndGgiLCAidGFyZ2V0UzFPcHAiLCAidGFyZ2V0UzJPcHAiLCAidGFyZ2V0T3BwTGVuZ3RoIiwgIl9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSIsICJ4IiwgInkiLCAicmV0IiwgInRocmVzaG9sZCIsICJsYXN0Q2hpbGQiLCAiaW5zaWRlSG9yaXpvbnRhbGx5IiwgImluc2lkZVZlcnRpY2FsbHkiLCAiX3ByZXBhcmVHcm91cCIsICJ0b0ZuIiwgInB1bGwiLCAidG8iLCAiZnJvbSIsICJzYW1lR3JvdXAiLCAib3RoZXJHcm91cCIsICJncm91cCIsICJvcmlnaW5hbEdyb3VwIiwgIl90eXBlb2YiLCAibmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQiLCAibmVhcmVzdCIsICJldmVudCIsICJpIiwgIl9jaGVja091dHNpZGVUYXJnZXRFbCIsICJkYXRhVHJhbnNmZXIiLCAiU2FmYXJpIiwgImZuIiwgIm9uIiwgInByZXZlbnRPbkZpbHRlciIsICJ0eXBlIiwgInRvdWNoIiwgIm9yaWdpbmFsVGFyZ2V0IiwgImZpbHRlciIsICJfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlIiwgImluZGV4IiwgImNyaXRlcmlhIiwgIm93bmVyRG9jdW1lbnQiLCAiZHJhZ1N0YXJ0Rm4iLCAiRmlyZUZveCIsICJ0b2dnbGVDbGFzcyIsICJmaW5kIiwgIl9kaXNhYmxlRHJhZ2dhYmxlIiwgIm9mZiIsICJfbmV4dFRpY2siLCAiZmFsbGJhY2siLCAicGFyZW50IiwgImluc2VydGVkIiwgImdldFBhcmVudE9ySG9zdCIsICJmYWxsYmFja1RvbGVyYW5jZSIsICJmYWxsYmFja09mZnNldCIsICJnaG9zdE1hdHJpeCIsICJyZWxhdGl2ZVNjcm9sbE9mZnNldCIsICJnZXRSZWxhdGl2ZVNjcm9sbE9mZnNldCIsICJkeCIsICJkeSIsICJjc3NNYXRyaXgiLCAiZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCIsICJjbG9uZSIsICJyZXZlcnQiLCAiYWN0aXZlU29ydGFibGUiLCAiaXNPd25lciIsICJjYW5Tb3J0IiwgImZyb21Tb3J0YWJsZSIsICJjb21wbGV0ZWRGaXJlZCIsICJkcmFnT3ZlckV2ZW50IiwgImV4dHJhIiwgImNvbXBsZXRlZCIsICJhZnRlciIsICJfb25Nb3ZlIiwgImNoYW5nZWQiLCAiY2FwdHVyZSIsICJpbnNlcnRpb24iLCAiZWxMYXN0Q2hpbGQiLCAiX2dob3N0SXNMYXN0IiwgIl9naG9zdElzRmlyc3QiLCAiZmlyc3RDaGlsZCIsICJkaXJlY3Rpb24iLCAidGFyZ2V0QmVmb3JlRmlyc3RTd2FwIiwgImRpZmZlcmVudExldmVsIiwgImRpZmZlcmVudFJvd0NvbCIsICJzaWRlMSIsICJzY3JvbGxlZFBhc3RUb3AiLCAiaXNTY3JvbGxlZFBhc3QiLCAic2Nyb2xsQmVmb3JlIiwgIl9nZXRTd2FwRGlyZWN0aW9uIiwgInNpYmxpbmciLCAiZHJhZ0luZGV4IiwgIm5leHRTaWJsaW5nIiwgIm1vdmVWZWN0b3IiLCAiX3Vuc2lsZW50IiwgInNjcm9sbEJ5IiwgIl9jYW5jZWxOZXh0VGljayIsICJfZ2xvYmFsRHJhZ092ZXIiLCAib3JkZXIiLCAibiIsICJfZ2VuZXJhdGVJZCIsICJ1c2VBbmltYXRpb24iLCAiaXRlbXMiLCAiaWQiLCAic3RvcmUiLCAic2VsZWN0b3IiLCAid2lsbEluc2VydEFmdGVyIiwgIm9uTW92ZUZuIiwgInJldFZhbCIsICJmaXJzdEVsUmVjdCIsICJjaGlsZENvbnRhaW5pbmdSZWN0IiwgInNwYWNlciIsICJsYXN0RWxSZWN0IiwgInN3YXBUaHJlc2hvbGQiLCAiaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIiwgImludmVydFN3YXAiLCAiaXNMYXN0VGFyZ2V0IiwgIm1vdXNlT25BeGlzIiwgInRhcmdldExlbmd0aCIsICJ0YXJnZXRTMSIsICJ0YXJnZXRTMiIsICJpbnZlcnQiLCAiX2dldEluc2VydERpcmVjdGlvbiIsICJzdHIiLCAic3VtIiwgInJvb3QiLCAiaW5wdXRzIiwgImlkeCIsICJleHRlbmQiLCAidGhyb3R0bGUiLCAiZWxlbWVudCIsICJfbGVuIiwgIl9rZXkiLCAidmVyc2lvbiIsICJhdXRvU2Nyb2xscyIsICJzY3JvbGxFbCIsICJzY3JvbGxSb290RWwiLCAic2Nyb2xsaW5nIiwgImxhc3RBdXRvU2Nyb2xsWCIsICJsYXN0QXV0b1Njcm9sbFkiLCAidG91Y2hFdnQkMSIsICJwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCIsICJBdXRvU2Nyb2xsUGx1Z2luIiwgIkF1dG9TY3JvbGwiLCAiX3JlZjIiLCAiY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCIsICJjbGVhckF1dG9TY3JvbGxzIiwgImNhbmNlbFRocm90dGxlIiwgImVsZW0iLCAiYXV0b1Njcm9sbCIsICJvZ0VsZW1TY3JvbGxlciIsICJnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudCIsICJuZXdFbGVtIiwgImlzRmFsbGJhY2siLCAic2VucyIsICJzcGVlZCIsICJ3aW5TY3JvbGxlciIsICJzY3JvbGxUaGlzSW5zdGFuY2UiLCAic2Nyb2xsQ3VzdG9tRm4iLCAibGF5ZXJzT3V0IiwgImN1cnJlbnRQYXJlbnQiLCAidG9wIiwgImJvdHRvbSIsICJsZWZ0IiwgInJpZ2h0IiwgIndpZHRoIiwgImhlaWdodCIsICJjYW5TY3JvbGxYIiwgImNhblNjcm9sbFkiLCAic2Nyb2xsV2lkdGgiLCAic2Nyb2xsSGVpZ2h0IiwgInNjcm9sbFBvc1giLCAic2Nyb2xsUG9zWSIsICJ2eCIsICJ2eSIsICJzY3JvbGxPZmZzZXRZIiwgInNjcm9sbE9mZnNldFgiLCAiZHJvcCIsICJkaXNwYXRjaFNvcnRhYmxlRXZlbnQiLCAiaGlkZUdob3N0Rm9yVGFyZ2V0IiwgInVuaGlkZUdob3N0Rm9yVGFyZ2V0IiwgInRvU29ydGFibGUiLCAiUmV2ZXJ0IiwgIl9yZWYzIiwgIlJlbW92ZSIsICJfcmVmNCIsICJwYXJlbnRTb3J0YWJsZSIsICJTb3J0YWJsZSIsICJBdXRvU2Nyb2xsUGx1Z2luIiwgIlJlbW92ZSIsICJSZXZlcnQiLCAic29ydGFibGVfZXNtX2RlZmF1bHQiLCAic29ydGFibGVfZGVmYXVsdCIsICJzb3J0YWJsZSIsICJzb3J0YWJsZV9lc21fZGVmYXVsdCIsICJldnQiLCAiaW1wb3J0X3Nob3dkb3duIiwgImV4dGVuZCIsICJkZXN0aW5hdGlvbiIsICJpIiwgInNvdXJjZSIsICJrZXkiLCAicmVwZWF0IiwgImNoYXJhY3RlciIsICJjb3VudCIsICJ0cmltTGVhZGluZ05ld2xpbmVzIiwgInN0cmluZyIsICJ0cmltVHJhaWxpbmdOZXdsaW5lcyIsICJpbmRleEVuZCIsICJibG9ja0VsZW1lbnRzIiwgImlzQmxvY2siLCAibm9kZSIsICJpcyIsICJ2b2lkRWxlbWVudHMiLCAiaXNWb2lkIiwgImhhc1ZvaWQiLCAiaGFzIiwgIm1lYW5pbmdmdWxXaGVuQmxhbmtFbGVtZW50cyIsICJpc01lYW5pbmdmdWxXaGVuQmxhbmsiLCAiaGFzTWVhbmluZ2Z1bFdoZW5CbGFuayIsICJ0YWdOYW1lcyIsICJ0YWdOYW1lIiwgInJ1bGVzIiwgImNvbnRlbnQiLCAib3B0aW9ucyIsICJoTGV2ZWwiLCAidW5kZXJsaW5lIiwgInBhcmVudCIsICJwcmVmaXgiLCAic3RhcnQiLCAiaW5kZXgiLCAiY2xhc3NOYW1lIiwgImxhbmd1YWdlIiwgImNvZGUiLCAiZmVuY2VDaGFyIiwgImZlbmNlU2l6ZSIsICJmZW5jZUluQ29kZVJlZ2V4IiwgIm1hdGNoIiwgImZlbmNlIiwgImhyZWYiLCAidGl0bGUiLCAiY2xlYW5BdHRyaWJ1dGUiLCAicmVwbGFjZW1lbnQiLCAicmVmZXJlbmNlIiwgImlkIiwgInJlZmVyZW5jZXMiLCAiaGFzU2libGluZ3MiLCAiaXNDb2RlQmxvY2siLCAiZXh0cmFTcGFjZSIsICJkZWxpbWl0ZXIiLCAibWF0Y2hlcyIsICJhbHQiLCAic3JjIiwgInRpdGxlUGFydCIsICJhdHRyaWJ1dGUiLCAiUnVsZXMiLCAicnVsZSIsICJmaWx0ZXIiLCAiZmluZFJ1bGUiLCAiZm4iLCAiZmlsdGVyVmFsdWUiLCAiY29sbGFwc2VXaGl0ZXNwYWNlIiwgImVsZW1lbnQiLCAiaXNQcmUiLCAicHJldlRleHQiLCAia2VlcExlYWRpbmdXcyIsICJwcmV2IiwgIm5leHQiLCAidGV4dCIsICJyZW1vdmUiLCAibmV4dE5vZGUiLCAiY3VycmVudCIsICJyb290IiwgImNhblBhcnNlSFRNTE5hdGl2ZWx5IiwgIlBhcnNlciIsICJjYW5QYXJzZSIsICJjcmVhdGVIVE1MUGFyc2VyIiwgInNob3VsZFVzZUFjdGl2ZVgiLCAiZG9jIiwgInVzZUFjdGl2ZVgiLCAiSFRNTFBhcnNlciIsICJSb290Tm9kZSIsICJpbnB1dCIsICJodG1sUGFyc2VyIiwgImlzUHJlT3JDb2RlIiwgIl9odG1sUGFyc2VyIiwgIk5vZGUiLCAiaXNCbGFuayIsICJmbGFua2luZ1doaXRlc3BhY2UiLCAiZWRnZXMiLCAiZWRnZVdoaXRlc3BhY2UiLCAiaXNGbGFua2VkQnlXaGl0ZXNwYWNlIiwgIm0iLCAic2lkZSIsICJzaWJsaW5nIiwgInJlZ0V4cCIsICJpc0ZsYW5rZWQiLCAicmVkdWNlIiwgImVzY2FwZXMiLCAiVHVybmRvd25TZXJ2aWNlIiwgImRlZmF1bHRzIiwgImNhbkNvbnZlcnQiLCAib3V0cHV0IiwgInByb2Nlc3MiLCAicG9zdFByb2Nlc3MiLCAicGx1Z2luIiwgImFjY3VtdWxhdG9yIiwgImVzY2FwZSIsICJwYXJlbnROb2RlIiwgInNlbGYiLCAicmVwbGFjZW1lbnRGb3JOb2RlIiwgImpvaW4iLCAid2hpdGVzcGFjZSIsICJzMSIsICJzMiIsICJubHMiLCAic2VwYXJhdG9yIiwgInR1cm5kb3duX2Jyb3dzZXJfZXNfZGVmYXVsdCIsICJhdHRhY2htZW50U2VsZWN0b3IiLCAiYXR0YWNobWVudHMiLCAicHJldmlldyIsICJwcmVzZW50YXRpb24iLCAiY2FwdGlvbiIsICJuYW1lIiwgInNpemUiLCAiZmlsZSIsICJhdHRyaWJ1dGVzIiwgImRlZmF1bHQiLCAidGFnTmFtZSIsICJwYXJzZSIsICJxdW90ZSIsICJuZXN0YWJsZSIsICJoZWFkaW5nMSIsICJ0ZXJtaW5hbCIsICJicmVha09uUmV0dXJuIiwgImdyb3VwIiwgImNvZGUiLCAiaHRtbEF0dHJpYnV0ZXMiLCAidGV4dCIsICJwbGFpbnRleHQiLCAiYnVsbGV0TGlzdCIsICJidWxsZXQiLCAibGlzdEF0dHJpYnV0ZSIsICJ0ZXN0IiwgImVsZW1lbnQiLCAicGFyZW50Tm9kZSIsICJ0aGlzIiwgIm51bWJlckxpc3QiLCAibnVtYmVyIiwgImF0dGFjaG1lbnRHYWxsZXJ5IiwgImV4Y2x1c2l2ZSIsICJfZWxlbWVudCR0YWdOYW1lIiwgInRvTG93ZXJDYXNlIiwgImFuZHJvaWRWZXJzaW9uTWF0Y2giLCAibmF2aWdhdG9yIiwgInVzZXJBZ2VudCIsICJtYXRjaCIsICJhbmRyb2lkVmVyc2lvbiIsICJwYXJzZUludCIsICJicm93c2VyJDEiLCAiY29tcG9zZXNFeGlzdGluZ1RleHQiLCAicmVjZW50QW5kcm9pZCIsICJzYW1zdW5nQW5kcm9pZCIsICJmb3JjZXNPYmplY3RSZXNpemluZyIsICJzdXBwb3J0c0lucHV0RXZlbnRzIiwgIklucHV0RXZlbnQiLCAiZXZlcnkiLCAicHJvcCIsICJwcm90b3R5cGUiLCAiZG9tcHVyaWZ5IiwgIkFERF9BVFRSIiwgIlNBRkVfRk9SX1hNTCIsICJSRVRVUk5fRE9NIiwgImxhbmckMSIsICJhdHRhY2hGaWxlcyIsICJib2xkIiwgImJ1bGxldHMiLCAiYnl0ZSIsICJieXRlcyIsICJjYXB0aW9uUGxhY2Vob2xkZXIiLCAiaW5kZW50IiwgIml0YWxpYyIsICJsaW5rIiwgIm51bWJlcnMiLCAib3V0ZGVudCIsICJyZWRvIiwgInJlbW92ZSIsICJzdHJpa2UiLCAidW5kbyIsICJ1bmxpbmsiLCAidXJsIiwgInVybFBsYWNlaG9sZGVyIiwgIkdCIiwgIktCIiwgIk1CIiwgIlBCIiwgIlRCIiwgInNpemVzIiwgImxhbmciLCAiZmlsZV9zaXplX2Zvcm1hdHRpbmciLCAicHJlZml4IiwgInByZWNpc2lvbiIsICJmb3JtYXR0ZXIiLCAiY29uY2F0IiwgImJhc2UiLCAiZXhwIiwgIk1hdGgiLCAiZmxvb3IiLCAibG9nIiwgIndpdGhvdXRJbnNpZ25pZmljYW50WmVyb3MiLCAicG93IiwgInRvRml4ZWQiLCAicmVwbGFjZSIsICJaRVJPX1dJRFRIX1NQQUNFIiwgIk5PTl9CUkVBS0lOR19TUEFDRSIsICJleHRlbmQiLCAicHJvcGVydGllcyIsICJrZXkiLCAidmFsdWUiLCAiaHRtbCIsICJkb2N1bWVudCIsICJkb2N1bWVudEVsZW1lbnQiLCAibWF0Y2hlcyIsICJoYW5kbGVFdmVudCIsICJldmVudE5hbWUiLCAib25FbGVtZW50IiwgIm1hdGNoaW5nU2VsZWN0b3IiLCAid2l0aENhbGxiYWNrIiwgImluUGhhc2UiLCAicHJldmVudERlZmF1bHQiLCAidGltZXMiLCAiYXJndW1lbnRzIiwgImxlbmd0aCIsICJ1bmRlZmluZWQiLCAic2VsZWN0b3IiLCAidXNlQ2FwdHVyZSIsICJoYW5kbGVyIiwgImV2ZW50IiwgImRlc3Ryb3kiLCAidGFyZ2V0IiwgImZpbmRDbG9zZXN0RWxlbWVudEZyb21Ob2RlIiwgImNhbGwiLCAicmVtb3ZlRXZlbnRMaXN0ZW5lciIsICJhZGRFdmVudExpc3RlbmVyIiwgInRyaWdnZXJFdmVudCIsICJidWJibGVzIiwgImNhbmNlbGFibGUiLCAiY3JlYXRlRXZlbnQiLCAiaW5pdEV2ZW50IiwgImRpc3BhdGNoRXZlbnQiLCAiZWxlbWVudE1hdGNoZXNTZWxlY3RvciIsICJub2RlVHlwZSIsICJub2RlIiwgInVudGlsTm9kZSIsICJOb2RlIiwgIkVMRU1FTlRfTk9ERSIsICJjbG9zZXN0IiwgImlubmVyRWxlbWVudElzQWN0aXZlIiwgImFjdGl2ZUVsZW1lbnQiLCAiZWxlbWVudENvbnRhaW5zTm9kZSIsICJmaW5kQ2hpbGRJbmRleE9mTm9kZSIsICJfbm9kZSIsICJjaGlsZEluZGV4IiwgInByZXZpb3VzU2libGluZyIsICJyZW1vdmVOb2RlIiwgIl9ub2RlJHBhcmVudE5vZGUiLCAicmVtb3ZlQ2hpbGQiLCAid2Fsa1RyZWUiLCAidHJlZSIsICJvbmx5Tm9kZXNPZlR5cGUiLCAidXNpbmdGaWx0ZXIiLCAiZXhwYW5kRW50aXR5UmVmZXJlbmNlcyIsICJ3aGF0VG9TaG93IiwgIk5vZGVGaWx0ZXIiLCAiU0hPV19FTEVNRU5UIiwgIlNIT1dfVEVYVCIsICJTSE9XX0NPTU1FTlQiLCAiU0hPV19BTEwiLCAiY3JlYXRlVHJlZVdhbGtlciIsICJtYWtlRWxlbWVudCIsICJ0YWciLCAib3B0aW9ucyIsICJjcmVhdGVFbGVtZW50IiwgImVkaXRhYmxlIiwgImNvbnRlbnRlZGl0YWJsZSIsICJzZXRBdHRyaWJ1dGUiLCAic3R5bGUiLCAiZGF0YSIsICJkYXRhc2V0IiwgImNsYXNzTmFtZSIsICJzcGxpdCIsICJmb3JFYWNoIiwgImNsYXNzTGlzdCIsICJhZGQiLCAidGV4dENvbnRlbnQiLCAiY2hpbGROb2RlcyIsICJjaGlsZE5vZGUiLCAiYXBwZW5kQ2hpbGQiLCAiYmxvY2tUYWdOYW1lcyIsICJnZXRCbG9ja1RhZ05hbWVzIiwgImJsb2NrQXR0cmlidXRlcyIsICJwdXNoIiwgIm5vZGVJc0Jsb2NrQ29udGFpbmVyIiwgIm5vZGVJc0Jsb2NrU3RhcnRDb21tZW50IiwgImZpcnN0Q2hpbGQiLCAibm9kZUlzQmxvY2tTdGFydCIsICJzdHJpY3QiLCAiaW5jbHVkZXMiLCAibm9kZUlzQ29tbWVudE5vZGUiLCAiQ09NTUVOVF9OT0RFIiwgIm5vZGVJc0N1cnNvclRhcmdldCIsICJub2RlSXNUZXh0Tm9kZSIsICJ0cml4Q3Vyc29yVGFyZ2V0IiwgIm5vZGVJc0F0dGFjaG1lbnRFbGVtZW50IiwgIm5vZGVJc0VtcHR5VGV4dE5vZGUiLCAiVEVYVF9OT0RFIiwgImlucHV0IiwgImxldmVsMkVuYWJsZWQiLCAiZ2V0TGV2ZWwiLCAiYnJvd3NlciIsICJwaWNrRmlsZXMiLCAiY2FsbGJhY2siLCAidHlwZSIsICJtdWx0aXBsZSIsICJoaWRkZW4iLCAiaWQiLCAiZmlsZUlucHV0SWQiLCAiZmlsZXMiLCAiZ2V0RWxlbWVudEJ5SWQiLCAiYm9keSIsICJjbGljayIsICJwYXJzZXIiLCAicmVtb3ZlQmxhbmtUYWJsZUNlbGxzIiwgInRhYmxlQ2VsbFNlcGFyYXRvciIsICJ0YWJsZVJvd1NlcGFyYXRvciIsICJ0ZXh0X2F0dHJpYnV0ZXMiLCAiaW5oZXJpdGFibGUiLCAid2luZG93IiwgImdldENvbXB1dGVkU3R5bGUiLCAiZm9udFdlaWdodCIsICJmb250U3R5bGUiLCAiaHJlZiIsICJncm91cFRhZ05hbWUiLCAiZ2V0QXR0cmlidXRlIiwgImZyb3plbiIsICJiYWNrZ3JvdW5kQ29sb3IiLCAidG9vbGJhciIsICJnZXREZWZhdWx0SFRNTCIsICJpbnRlcnZhbCIsICJ6IiwgImkiLCAibiIsICJhIiwgImF0dGFjaG1lbnQiLCAiYXR0YWNobWVudENhcHRpb24iLCAiYXR0YWNobWVudENhcHRpb25FZGl0b3IiLCAiYXR0YWNobWVudE1ldGFkYXRhIiwgImF0dGFjaG1lbnRNZXRhZGF0YUNvbnRhaW5lciIsICJhdHRhY2htZW50TmFtZSIsICJhdHRhY2htZW50UHJvZ3Jlc3MiLCAiYXR0YWNobWVudFNpemUiLCAiYXR0YWNobWVudFRvb2xiYXIiLCAibCIsICJoIiwgIl8iLCAiYyIsICJqIiwgIlciLCAiVSIsICJWIiwgIkJhc2ljT2JqZWN0IiwgImV4cHJlc3Npb24iLCAidG9NZXRob2QiLCAidG9Qcm9wZXJ0eSIsICJvcHRpb25hbCIsICJwYXJzZVByb3h5TWV0aG9kRXhwcmVzc2lvbiIsICJzdWJqZWN0IiwgIm9iamVjdCIsICJfdGhpcyR0b01ldGhvZCIsICJfb2JqZWN0IiwgImFwcGx5IiwgInByb3h5TWV0aG9kRXhwcmVzc2lvblBhdHRlcm4iLCAiRXJyb3IiLCAiYXJncyIsICJGdW5jdGlvbiIsICJSZWdFeHAiLCAiRyIsICJZIiwgIiQiLCAiVVRGMTZTdHJpbmciLCAiYm94IiwgImZyb21VQ1MyU3RyaW5nIiwgInRvU3RyaW5nIiwgInVjczJTdHJpbmciLCAidWNzMmRlY29kZSIsICJjb2RlcG9pbnRzIiwgInVjczJlbmNvZGUiLCAiY29uc3RydWN0b3IiLCAic3VwZXIiLCAidWNzMkxlbmd0aCIsICJvZmZzZXRUb1VDUzJPZmZzZXQiLCAib2Zmc2V0IiwgInNsaWNlIiwgIm1heCIsICJvZmZzZXRGcm9tVUNTMk9mZnNldCIsICJ1Y3MyT2Zmc2V0IiwgImZyb21Db2RlcG9pbnRzIiwgImNoYXJBdCIsICJpc0VxdWFsVG8iLCAidG9KU09OIiwgImdldENhY2hlS2V5IiwgImhhc0FycmF5RnJvbSIsICJfQXJyYXkkZnJvbSIsICJBcnJheSIsICJmcm9tIiwgImhhc1N0cmluZ0NvZGVQb2ludEF0IiwgIl8kY29kZVBvaW50QXQiLCAiY29kZVBvaW50QXQiLCAiaGFzU3RyaW5nRnJvbUNvZGVQb2ludCIsICJfU3RyaW5nJGZyb21Db2RlUG9pbnQiLCAiU3RyaW5nIiwgImZyb21Db2RlUG9pbnQiLCAic3RyaW5nIiwgIm1hcCIsICJjaGFyIiwgIm91dHB1dCIsICJjb3VudGVyIiwgImNoYXJDb2RlQXQiLCAiZXh0cmEiLCAiYXJyYXkiLCAicmVzdWx0IiwgImZyb21DaGFyQ29kZSIsICJqb2luIiwgIlRyaXhPYmplY3QiLCAianNvblN0cmluZyIsICJmcm9tSlNPTiIsICJKU09OIiwgImhhc1NhbWVDb25zdHJ1Y3RvckFzIiwgImluc3BlY3QiLCAicGFydHMiLCAiY29udGVudHMiLCAiY29udGVudHNGb3JJbnNwZWN0aW9uIiwgInRvSlNPTlN0cmluZyIsICJzdHJpbmdpZnkiLCAidG9VVEYxNlN0cmluZyIsICJhcnJheXNBcmVFcXVhbCIsICJiIiwgImluZGV4IiwgInNwbGljZUFycmF5IiwgIl9sZW4iLCAiX2tleSIsICJzcGxpY2UiLCAiUlRMX1BBVFRFUk4iLCAiZ2V0RGlyZWN0aW9uIiwgImRpciIsICJkaXJOYW1lIiwgInRleHRBcmVhIiwgImZvcm0iLCAic3VwcG9ydHNEaXJOYW1lIiwgIkZvcm1EYXRhIiwgImhhcyIsICJzdXBwb3J0c0RpclNlbGVjdG9yIiwgImdldCIsICJ0cmltIiwgImFsbEF0dHJpYnV0ZU5hbWVzIiwgImJsb2NrQXR0cmlidXRlTmFtZXMiLCAidGV4dEF0dHJpYnV0ZU5hbWVzIiwgImxpc3RBdHRyaWJ1dGVOYW1lcyIsICJnZXRBbGxBdHRyaWJ1dGVOYW1lcyIsICJnZXRUZXh0QXR0cmlidXRlTmFtZXMiLCAiZ2V0QmxvY2tBdHRyaWJ1dGVOYW1lcyIsICJnZXRCbG9ja0NvbmZpZyIsICJhdHRyaWJ1dGVOYW1lIiwgImNvbmZpZyIsICJPYmplY3QiLCAia2V5cyIsICJnZXRUZXh0Q29uZmlnIiwgImluc3RhbGxEZWZhdWx0Q1NTRm9yVGFnTmFtZSIsICJkZWZhdWx0Q1NTIiwgImluc2VydFN0eWxlRWxlbWVudEZvclRhZ05hbWUiLCAibm9uY2UiLCAiZ2V0Q1NQTm9uY2UiLCAiaGVhZCIsICJpbnNlcnRCZWZvcmUiLCAiZ2V0TWV0YUVsZW1lbnQiLCAiY29udGVudCIsICJxdWVyeVNlbGVjdG9yIiwgInRlc3RUcmFuc2ZlckRhdGEiLCAiZGF0YVRyYW5zZmVySXNQbGFpblRleHQiLCAiZGF0YVRyYW5zZmVyIiwgImdldERhdGEiLCAiRE9NUGFyc2VyIiwgInBhcnNlRnJvbVN0cmluZyIsICJrZXlFdmVudElzS2V5Ym9hcmRDb21tYW5kIiwgInBsYXRmb3JtIiwgIm1ldGFLZXkiLCAiY3RybEtleSIsICJkZWZlciIsICJmbiIsICJzZXRUaW1lb3V0IiwgImNvcHlPYmplY3QiLCAib2JqZWN0c0FyZUVxdWFsIiwgIm5vcm1hbGl6ZVJhbmdlIiwgInJhbmdlIiwgImlzQXJyYXkiLCAiY29weVZhbHVlIiwgInJhbmdlSXNDb2xsYXBzZWQiLCAic3RhcnQiLCAiZW5kIiwgInJhbmdlVmFsdWVzQXJlRXF1YWwiLCAicmFuZ2VzQXJlRXF1YWwiLCAibGVmdFJhbmdlIiwgInJpZ2h0UmFuZ2UiLCAibGVmdFN0YXJ0IiwgImxlZnRFbmQiLCAicmlnaHRTdGFydCIsICJyaWdodEVuZCIsICJsZWZ0IiwgInJpZ2h0IiwgIlNlbGVjdGlvbkNoYW5nZU9ic2VydmVyIiwgInVwZGF0ZSIsICJiaW5kIiwgInNlbGVjdGlvbk1hbmFnZXJzIiwgInN0YXJ0ZWQiLCAic3RvcCIsICJyZWdpc3RlclNlbGVjdGlvbk1hbmFnZXIiLCAic2VsZWN0aW9uTWFuYWdlciIsICJ1bnJlZ2lzdGVyU2VsZWN0aW9uTWFuYWdlciIsICJmaWx0ZXIiLCAic20iLCAibm90aWZ5U2VsZWN0aW9uTWFuYWdlcnNPZlNlbGVjdGlvbkNoYW5nZSIsICJzZWxlY3Rpb25EaWRDaGFuZ2UiLCAicmVzZXQiLCAic2VsZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIiLCAiZ2V0RE9NU2VsZWN0aW9uIiwgInNlbGVjdGlvbiIsICJnZXRTZWxlY3Rpb24iLCAicmFuZ2VDb3VudCIsICJnZXRET01SYW5nZSIsICJfZ2V0RE9NU2VsZWN0aW9uIiwgImRvbVJhbmdlIiwgImdldFJhbmdlQXQiLCAiZG9tUmFuZ2VJc1ByaXZhdGUiLCAic2V0RE9NUmFuZ2UiLCAicmVtb3ZlQWxsUmFuZ2VzIiwgImFkZFJhbmdlIiwgIm5vZGVJc1ByaXZhdGUiLCAic3RhcnRDb250YWluZXIiLCAiZW5kQ29udGFpbmVyIiwgImdldFByb3RvdHlwZU9mIiwgIm5vcm1hbGl6ZVNwYWNlcyIsICJicmVha2FibGVXaGl0ZXNwYWNlUGF0dGVybiIsICJzcXVpc2hCcmVha2FibGVXaGl0ZXNwYWNlIiwgInNvdXJjZSIsICJ1dGYxNlN0cmluZ0RpZmZlcmVuY2VzIiwgImRpZmZBIiwgInV0ZjE2U3RyaW5nRGlmZmVyZW5jZSIsICJ1dGYxNlN0cmluZyIsICJkaWZmQiIsICJsZWZ0SW5kZXgiLCAicmlnaHRJbmRleEEiLCAicmlnaHRJbmRleEIiLCAiSGFzaCIsICJmcm9tQ29tbW9uQXR0cmlidXRlc09mT2JqZWN0cyIsICJvYmplY3RzIiwgImhhc2giLCAiZ2V0S2V5cyIsICJnZXRLZXlzQ29tbW9uVG9IYXNoIiwgInZhbHVlcyIsICJjb3B5IiwgIm1lcmdlIiwgInVuYm94IiwgInRvQXJyYXkiLCAiaXNFbXB0eSIsICJ0b09iamVjdCIsICJrZXlUb1JlbW92ZSIsICJzb3J0IiwgIk9iamVjdEdyb3VwIiwgImdyb3VwT2JqZWN0cyIsICJ1bmdyb3VwZWRPYmplY3RzIiwgImRlcHRoIiwgImFzVHJlZSIsICJfb2JqZWN0JGNhbkJlR3JvdXBlZDIiLCAiX29iamVjdCRjYW5CZUdyb3VwZWQiLCAiX2dyb3VwJGNhbkJlR3JvdXBlZFdpIiwgIl9ncm91cCIsICJjYW5CZUdyb3VwZWQiLCAiY2FuQmVHcm91cGVkV2l0aCIsICJnZXRPYmplY3RzIiwgImdldERlcHRoIiwgIk9iamVjdE1hcCIsICJmaW5kIiwgIkVsZW1lbnRTdG9yZSIsICJlbGVtZW50cyIsICJnZXRLZXkiLCAidHJpeFN0b3JlS2V5IiwgIk9wZXJhdGlvbiIsICJpc1BlcmZvcm1pbmciLCAicGVyZm9ybWluZyIsICJoYXNQZXJmb3JtZWQiLCAicGVyZm9ybWVkIiwgImhhc1N1Y2NlZWRlZCIsICJzdWNjZWVkZWQiLCAiaGFzRmFpbGVkIiwgImdldFByb21pc2UiLCAicHJvbWlzZSIsICJQcm9taXNlIiwgInJlc29sdmUiLCAicmVqZWN0IiwgInBlcmZvcm0iLCAicmVsZWFzZSIsICJfdGhpcyRwcm9taXNlIiwgIl90aGlzJHByb21pc2UkY2FuY2VsIiwgImNhbmNlbCIsICJwcm94eU1ldGhvZCIsICJPYmplY3RWaWV3IiwgImNoaWxkVmlld3MiLCAicm9vdFZpZXciLCAiZ2V0Tm9kZXMiLCAibm9kZXMiLCAiY3JlYXRlTm9kZXMiLCAiY2xvbmVOb2RlIiwgImludmFsaWRhdGUiLCAiX3RoaXMkcGFyZW50VmlldyIsICJwYXJlbnRWaWV3IiwgImludmFsaWRhdGVWaWV3Rm9yT2JqZWN0IiwgIl90aGlzJGZpbmRWaWV3Rm9yT2JqZSIsICJmaW5kVmlld0Zvck9iamVjdCIsICJmaW5kT3JDcmVhdGVDYWNoZWRDaGlsZFZpZXciLCAidmlld0NsYXNzIiwgInZpZXciLCAiZ2V0Q2FjaGVkVmlld0Zvck9iamVjdCIsICJyZWNvcmRDaGlsZFZpZXciLCAiY3JlYXRlQ2hpbGRWaWV3IiwgImNhY2hlVmlld0Zvck9iamVjdCIsICJPYmplY3RHcm91cFZpZXciLCAiZ2V0QWxsQ2hpbGRWaWV3cyIsICJ2aWV3cyIsICJjaGlsZFZpZXciLCAiZmluZEVsZW1lbnQiLCAiZmluZEVsZW1lbnRGb3JPYmplY3QiLCAiZ2V0Vmlld0NhY2hlIiwgImlzVmlld0NhY2hpbmdFbmFibGVkIiwgInZpZXdDYWNoZSIsICJzaG91bGRDYWNoZVZpZXdzIiwgImVuYWJsZVZpZXdDYWNoaW5nIiwgImRpc2FibGVWaWV3Q2FjaGluZyIsICJfdGhpcyRnZXRWaWV3Q2FjaGUiLCAiY2FjaGUiLCAiZ2FyYmFnZUNvbGxlY3RDYWNoZWRWaWV3cyIsICJvYmplY3RLZXlzIiwgIm9iamVjdEdyb3VwIiwgImdldENoaWxkVmlld3MiLCAiY3JlYXRlQ29udGFpbmVyRWxlbWVudCIsICJET01QdXJpZnkiLCAiYWRkSG9vayIsICJhdHRyTmFtZSIsICJmb3JjZUtlZXBBdHRyIiwgIkRFRkFVTFRfQUxMT1dFRF9BVFRSSUJVVEVTIiwgIkRFRkFVTFRfRk9SQklEREVOX1BST1RPQ09MUyIsICJERUZBVUxUX0ZPUkJJRERFTl9FTEVNRU5UUyIsICJIVE1MU2FuaXRpemVyIiwgInNhbml0aXplZEVsZW1lbnQiLCAic2FuaXRpemUiLCAic2FuaXRpemVkSHRtbCIsICJnZXRIVE1MIiwgIm91dGVySFRNTCIsICJpbm5lckhUTUwiLCAic2FuaXRpemVyIiwgImFsbG93ZWRBdHRyaWJ1dGVzIiwgImZvcmJpZGRlblByb3RvY29scyIsICJmb3JiaWRkZW5FbGVtZW50cyIsICJjcmVhdGVCb2R5RWxlbWVudEZvckhUTUwiLCAic2FuaXRpemVFbGVtZW50cyIsICJub3JtYWxpemVMaXN0RWxlbWVudE5lc3RpbmciLCAic2V0Q29uZmlnIiwgImdldEJvZHkiLCAid2Fsa2VyIiwgIm5vZGVzVG9SZW1vdmUiLCAibmV4dE5vZGUiLCAiY3VycmVudE5vZGUiLCAiZWxlbWVudElzUmVtb3ZhYmxlIiwgInNhbml0aXplRWxlbWVudCIsICJoYXNBdHRyaWJ1dGUiLCAicHJvdG9jb2wiLCAicmVtb3ZlQXR0cmlidXRlIiwgIl9yZWYiLCAiaW5kZXhPZiIsICJxdWVyeVNlbGVjdG9yQWxsIiwgImxpc3RFbGVtZW50IiwgInByZXZpb3VzRWxlbWVudCIsICJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwgImVsZW1lbnRJc0ZvcmJpZGRlbiIsICJlbGVtZW50SXNudFNlcmlhbGl6YWJsZSIsICJkb2MiLCAiaW1wbGVtZW50YXRpb24iLCAiY3JlYXRlSFRNTERvY3VtZW50IiwgImNzcyIsICJBdHRhY2htZW50VmlldyIsICJ1cGxvYWRQcm9ncmVzc0RlbGVnYXRlIiwgImF0dGFjaG1lbnRQaWVjZSIsICJwaWVjZSIsICJjcmVhdGVDb250ZW50Tm9kZXMiLCAiaW5uZXJFbGVtZW50IiwgImZpZ3VyZSIsICJnZXRDbGFzc05hbWUiLCAiZ2V0SHJlZiIsICJ0YWJpbmRleCIsICJoYXNDb250ZW50IiwgInNldEhUTUwiLCAiZ2V0Q29udGVudCIsICJjcmVhdGVDYXB0aW9uRWxlbWVudCIsICJpc1BlbmRpbmciLCAicHJvZ3Jlc3NFbGVtZW50IiwgImNsYXNzIiwgImdldFVwbG9hZFByb2dyZXNzIiwgInRyaXhNdXRhYmxlIiwgImNyZWF0ZUN1cnNvclRhcmdldCIsICJmaWdjYXB0aW9uIiwgImdldENhcHRpb24iLCAiY2FwdGlvbkNvbmZpZyIsICJnZXRDYXB0aW9uQ29uZmlnIiwgImdldEZpbGVuYW1lIiwgImdldEZvcm1hdHRlZEZpbGVzaXplIiwgIm5hbWVFbGVtZW50IiwgImNyZWF0ZVRleHROb2RlIiwgInNpemVFbGVtZW50IiwgIm5hbWVzIiwgImdldFR5cGUiLCAiZXh0ZW5zaW9uIiwgImdldEV4dGVuc2lvbiIsICJ0cml4QXR0YWNobWVudCIsICJ0cml4Q29udGVudFR5cGUiLCAiZ2V0Q29udGVudFR5cGUiLCAidHJpeElkIiwgInRyaXhBdHRyaWJ1dGVzIiwgInRyaXhTZXJpYWxpemUiLCAiaHRtbENvbnRhaW5zVGFnTmFtZSIsICJfY29uZmlnJGF0dGFjaG1lbnRzJHQiLCAiZmluZFByb2dyZXNzRWxlbWVudCIsICJfdGhpcyRmaW5kRWxlbWVudCIsICJhdHRhY2htZW50RGlkQ2hhbmdlVXBsb2FkUHJvZ3Jlc3MiLCAiZGl2IiwgIlByZXZpZXdhYmxlQXR0YWNobWVudFZpZXciLCAicHJldmlld0RlbGVnYXRlIiwgImltYWdlIiwgInNyYyIsICJyZWZyZXNoIiwgInVwZGF0ZUF0dHJpYnV0ZXNGb3JJbWFnZSIsICJnZXRVUkwiLCAicHJldmlld1VSTCIsICJnZXRQcmV2aWV3VVJMIiwgInNlcmlhbGl6ZWRBdHRyaWJ1dGVzIiwgIndpZHRoIiwgImdldFdpZHRoIiwgImhlaWdodCIsICJnZXRIZWlnaHQiLCAic3RvcmVLZXkiLCAiYXR0YWNobWVudERpZENoYW5nZUF0dHJpYnV0ZXMiLCAiUGllY2VWaWV3IiwgImdldEF0dHJpYnV0ZXMiLCAidGV4dENvbmZpZyIsICJjb250ZXh0IiwgImNyZWF0ZUF0dGFjaG1lbnROb2RlcyIsICJjcmVhdGVTdHJpbmdOb2RlcyIsICJfZWxlbWVudCIsICJmaXJzdEVsZW1lbnRDaGlsZCIsICJpc1ByZXZpZXdhYmxlIiwgIl90aGlzJHRleHRDb25maWciLCAiaXRlcmFibGUiLCAic3Vic3RyaW5nIiwgInByZXNlcnZlU3BhY2VzIiwgInN0eWxlcyIsICJwZW5kaW5nRWxlbWVudCIsICJzdHlsZVByb3BlcnR5IiwgImlzTGFzdCIsICJpc0ZpcnN0IiwgImZvbGxvd3NXaGl0ZXNwYWNlIiwgIlRleHRWaWV3IiwgInBpZWNlcyIsICJnZXRQaWVjZXMiLCAibGFzdEluZGV4IiwgImVuZHNXaXRoV2hpdGVzcGFjZSIsICJwcmV2aW91c1BpZWNlIiwgIkJsb2NrVmlldyIsICJibG9jayIsICJjcmVhdGVDb21tZW50IiwgIl9nZXRCbG9ja0NvbmZpZyIsICJnZXRMYXN0QXR0cmlidXRlIiwgInRleHRWaWV3IiwgInNob3VsZEFkZEV4dHJhTmV3bGluZUVsZW1lbnQiLCAiaXNSVEwiLCAiYXNzaWduIiwgImdldEJsb2NrQnJlYWtQb3NpdGlvbiIsICJlbnRyaWVzIiwgIkRvY3VtZW50VmlldyIsICJyZW5kZXIiLCAic3luYyIsICJlbGVtZW50U3RvcmUiLCAic2V0RG9jdW1lbnQiLCAic2hhZG93RWxlbWVudCIsICJnZXRCbG9ja3MiLCAiaXNTeW5jZWQiLCAiZWxlbWVudHNIYXZlRXF1YWxIVE1MIiwgImZyYWdtZW50IiwgImNyZWF0ZURvY3VtZW50RnJhZ21lbnRGb3JTeW5jIiwgImxhc3RDaGlsZCIsICJkaWRTeW5jIiwgImZpbmRTdG9yZWRFbGVtZW50cyIsICJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwgInN0b3JlZEVsZW1lbnQiLCAicmVwbGFjZUNoaWxkIiwgIm90aGVyRWxlbWVudCIsICJpZ25vcmVTcGFjZXMiLCAia2kiLCAidCIsICJlIiwgIm8iLCAicyIsICJUaSIsICJyIiwgIndpIiwgIkxpIiwgIkRpIiwgIk9pIiwgIklpIiwgIk5pIiwgIkZpIiwgIlBpIiwgIk1pIiwgIkJpIiwgIlBpZWNlIiwgInR5cGVzIiwgInBpZWNlSlNPTiIsICJjb3B5V2l0aEF0dHJpYnV0ZXMiLCAiZ2V0VmFsdWUiLCAiY29weVdpdGhBZGRpdGlvbmFsQXR0cmlidXRlcyIsICJjb3B5V2l0aG91dEF0dHJpYnV0ZSIsICJhdHRyaWJ1dGUiLCAiZ2V0QXR0cmlidXRlc0hhc2giLCAiaGFzU2FtZVN0cmluZ1ZhbHVlQXNQaWVjZSIsICJoYXNTYW1lQXR0cmlidXRlc0FzUGllY2UiLCAiaXNCbG9ja0JyZWFrIiwgImlzU2VyaWFsaXphYmxlIiwgImdldExlbmd0aCIsICJjYW5CZUNvbnNvbGlkYXRlZFdpdGgiLCAiX2RlZmluZVByb3BlcnR5IiwgIkltYWdlUHJlbG9hZE9wZXJhdGlvbiIsICJJbWFnZSIsICJvbmxvYWQiLCAibmF0dXJhbFdpZHRoIiwgIm5hdHVyYWxIZWlnaHQiLCAib25lcnJvciIsICJBdHRhY2htZW50IiwgImF0dHJpYnV0ZXNGb3JGaWxlIiwgInNldEZpbGUiLCAiZmlsZW5hbWUiLCAiZmlsZXNpemUiLCAiY29udGVudFR5cGUiLCAiYXR0YWNobWVudEpTT04iLCAicmVsZWFzZUZpbGUiLCAiZGlkQ2hhbmdlQXR0cmlidXRlcyIsICJzZXRBdHRyaWJ1dGVzIiwgIm5ld0F0dHJpYnV0ZXMiLCAiX3RoaXMkcHJldmlld0RlbGVnYXRlIiwgIl90aGlzJHByZXZpZXdEZWxlZ2F0ZTIiLCAiX3RoaXMkZGVsZWdhdGUiLCAiX3RoaXMkZGVsZWdhdGUkYXR0YWNoIiwgImRlbGVnYXRlIiwgInByZWxvYWRVUkwiLCAicHJldmlld2FibGVQYXR0ZXJuIiwgImdldEZpbGVzaXplIiwgIl90aGlzJGdldEZpbGVuYW1lJG1hdCIsICJnZXRGaWxlIiwgInByZWxvYWRGaWxlIiwgInJlbGVhc2VQcmVsb2FkZWRGaWxlIiwgInVwbG9hZFByb2dyZXNzIiwgInNldFVwbG9hZFByb2dyZXNzIiwgIl90aGlzJHVwbG9hZFByb2dyZXNzRCIsICJfdGhpcyR1cGxvYWRQcm9ncmVzc0QyIiwgInByZWxvYWRpbmdVUkwiLCAic2V0UHJldmlld1VSTCIsICJfdGhpcyRwcmV2aWV3RGVsZWdhdGUzIiwgIl90aGlzJHByZXZpZXdEZWxlZ2F0ZTQiLCAiX3RoaXMkZGVsZWdhdGUyIiwgIl90aGlzJGRlbGVnYXRlMiRhdHRhYyIsICJhdHRhY2htZW50RGlkQ2hhbmdlUHJldmlld1VSTCIsICJwcmVsb2FkIiwgImZpbGVPYmplY3RVUkwiLCAiVVJMIiwgImNyZWF0ZU9iamVjdFVSTCIsICJyZXZva2VPYmplY3RVUkwiLCAidGhlbiIsICJjYXRjaCIsICJBdHRhY2htZW50UGllY2UiLCAiZW5zdXJlQXR0YWNobWVudEV4Y2x1c2l2ZWx5SGFzQXR0cmlidXRlIiwgInJlbW92ZVByb2hpYml0ZWRBdHRyaWJ1dGVzIiwgInBlcm1pdHRlZEF0dHJpYnV0ZXMiLCAiX3BpZWNlJGF0dGFjaG1lbnQiLCAianNvbiIsICJ0b0NvbnNvbGUiLCAicmVnaXN0ZXJUeXBlIiwgIlN0cmluZ1BpZWNlIiwgImNvbnNvbGlkYXRlV2l0aCIsICJzcGxpdEF0T2Zmc2V0IiwgIlNwbGl0dGFibGVMaXN0IiwgImVhY2hPYmplY3QiLCAiaW5zZXJ0T2JqZWN0QXRJbmRleCIsICJpbnNlcnRTcGxpdHRhYmxlTGlzdEF0SW5kZXgiLCAic3BsaXR0YWJsZUxpc3QiLCAiaW5zZXJ0U3BsaXR0YWJsZUxpc3RBdFBvc2l0aW9uIiwgInBvc2l0aW9uIiwgInNwbGl0T2JqZWN0QXRQb3NpdGlvbiIsICJlZGl0T2JqZWN0QXRJbmRleCIsICJyZXBsYWNlT2JqZWN0QXRJbmRleCIsICJyZW1vdmVPYmplY3RBdEluZGV4IiwgImdldE9iamVjdEF0SW5kZXgiLCAiZ2V0U3BsaXR0YWJsZUxpc3RJblJhbmdlIiwgInJpZ2h0SW5kZXgiLCAic3BsaXRPYmplY3RzQXRSYW5nZSIsICJzZWxlY3RTcGxpdHRhYmxlTGlzdCIsICJyZW1vdmVPYmplY3RzSW5SYW5nZSIsICJ0cmFuc2Zvcm1PYmplY3RzSW5SYW5nZSIsICJ0cmFuc2Zvcm0iLCAidHJhbnNmb3JtZWRPYmplY3RzIiwgInJpZ2h0T3V0ZXJJbmRleCIsICJsZWZ0SW5uZXJJbmRleCIsICJzdGFydE9mUmFuZ2UiLCAiZW5kT2ZSYW5nZSIsICJnZXRPYmplY3RBdFBvc2l0aW9uIiwgImZpbmRJbmRleEFuZE9mZnNldEF0UG9zaXRpb24iLCAic3BsaXRJbmRleCIsICJzcGxpdE9mZnNldCIsICJsZWZ0T2JqZWN0IiwgInJpZ2h0T2JqZWN0IiwgImNvbnNvbGlkYXRlIiwgInBlbmRpbmdPYmplY3QiLCAiX3BlbmRpbmdPYmplY3QkY2FuQmVDIiwgIl9wZW5kaW5nT2JqZWN0IiwgImNvbnNvbGlkYXRlRnJvbUluZGV4VG9JbmRleCIsICJzdGFydEluZGV4IiwgImVuZEluZGV4IiwgIm9iamVjdHNJblJhbmdlIiwgImNvbnNvbGlkYXRlZEluUmFuZ2UiLCAiY3VycmVudFBvc2l0aW9uIiwgIm5leHRQb3NpdGlvbiIsICJmaW5kUG9zaXRpb25BdEluZGV4QW5kT2Zmc2V0IiwgImN1cnJlbnRJbmRleCIsICJnZXRFbmRQb3NpdGlvbiIsICJlbmRQb3NpdGlvbiIsICJvYmplY3RBcnJheXNBcmVFcXVhbCIsICJUZXh0IiwgInRleHRKU09OIiwgIm5vdEVtcHR5IiwgInBpZWNlTGlzdCIsICJjb3B5V2l0aFBpZWNlTGlzdCIsICJjb3B5VXNpbmdPYmplY3RNYXAiLCAib2JqZWN0TWFwIiwgImFwcGVuZFRleHQiLCAiaW5zZXJ0VGV4dEF0UG9zaXRpb24iLCAicmVtb3ZlVGV4dEF0UmFuZ2UiLCAicmVwbGFjZVRleHRBdFJhbmdlIiwgIm1vdmVUZXh0RnJvbVJhbmdlVG9Qb3NpdGlvbiIsICJnZXRUZXh0QXRSYW5nZSIsICJhZGRBdHRyaWJ1dGVBdFJhbmdlIiwgImFkZEF0dHJpYnV0ZXNBdFJhbmdlIiwgInJlbW92ZUF0dHJpYnV0ZUF0UmFuZ2UiLCAic2V0QXR0cmlidXRlc0F0UmFuZ2UiLCAiZ2V0QXR0cmlidXRlc0F0UG9zaXRpb24iLCAiX3RoaXMkcGllY2VMaXN0JGdldE9iIiwgImdldENvbW1vbkF0dHJpYnV0ZXMiLCAiZ2V0Q29tbW9uQXR0cmlidXRlc0F0UmFuZ2UiLCAiZ2V0RXhwYW5kZWRSYW5nZUZvckF0dHJpYnV0ZUF0T2Zmc2V0IiwgImdldFN0cmluZ0F0UmFuZ2UiLCAiZ2V0U3RyaW5nQXRQb3NpdGlvbiIsICJzdGFydHNXaXRoU3RyaW5nIiwgImVuZHNXaXRoU3RyaW5nIiwgImdldEF0dGFjaG1lbnRQaWVjZXMiLCAiZ2V0QXR0YWNobWVudHMiLCAiZ2V0QXR0YWNobWVudEFuZFBvc2l0aW9uQnlJZCIsICJhdHRhY2htZW50SWQiLCAiZ2V0QXR0YWNobWVudEJ5SWQiLCAiZ2V0UmFuZ2VPZkF0dGFjaG1lbnQiLCAiYXR0YWNobWVudEFuZFBvc2l0aW9uIiwgInVwZGF0ZUF0dHJpYnV0ZXNGb3JBdHRhY2htZW50IiwgIl90ZXh0JHBpZWNlTGlzdCIsICJlYWNoUGllY2UiLCAiZ2V0UGllY2VBdFBvc2l0aW9uIiwgInRvU2VyaWFsaXphYmxlVGV4dCIsICJCbG9jayIsICJibG9ja0pTT04iLCAiYXBwbHlCbG9ja0JyZWFrVG9UZXh0IiwgImNvcHlXaXRoVGV4dCIsICJjb3B5V2l0aG91dFRleHQiLCAiY29weVdpdGhvdXRBdHRyaWJ1dGVzIiwgIm1hcHBlZFRleHQiLCAiYWRkQXR0cmlidXRlIiwgImV4cGFuZEF0dHJpYnV0ZSIsICJhZGRIVE1MQXR0cmlidXRlIiwgInJlbW92ZUxhc3RWYWx1ZSIsICJyZW1vdmVMYXN0QXR0cmlidXRlIiwgImdldExhc3RFbGVtZW50IiwgImdldEF0dHJpYnV0ZUxldmVsIiwgImdldEF0dHJpYnV0ZUF0TGV2ZWwiLCAibGV2ZWwiLCAiaGFzQXR0cmlidXRlcyIsICJnZXRMYXN0TmVzdGFibGVBdHRyaWJ1dGUiLCAiZ2V0TmVzdGFibGVBdHRyaWJ1dGVzIiwgImdldE5lc3RpbmdMZXZlbCIsICJkZWNyZWFzZU5lc3RpbmdMZXZlbCIsICJpbmNyZWFzZU5lc3RpbmdMZXZlbCIsICJsYXN0SW5kZXhPZiIsICJnZXRMaXN0SXRlbUF0dHJpYnV0ZXMiLCAiaXNMaXN0SXRlbSIsICJpc1Rlcm1pbmFsQmxvY2siLCAiX2dldEJsb2NrQ29uZmlnMiIsICJicmVha3NPblJldHVybiIsICJfZ2V0QmxvY2tDb25maWczIiwgImZpbmRMaW5lQnJlYWtJbkRpcmVjdGlvbkZyb21Qb3NpdGlvbiIsICJkaXJlY3Rpb24iLCAibmV3bGluZVRleHQiLCAidGV4dEZvclN0cmluZ1dpdGhBdHRyaWJ1dGVzIiwgImdldFRleHRXaXRob3V0QmxvY2tCcmVhayIsICJ0ZXh0RW5kc0luQmxvY2tCcmVhayIsICJvdGhlckJsb2NrIiwgIm90aGVyQXR0cmlidXRlcyIsICJvdGhlckF0dHJpYnV0ZSIsICJnZXRMaXN0QXR0cmlidXRlTmFtZXMiLCAidW5tYXJrRXhpc3RpbmdJbm5lckJsb2NrQnJlYWtzSW5UZXh0IiwgImFkZEJsb2NrQnJlYWtUb1RleHQiLCAibW9kaWZpZWQiLCAiaW5uZXJQaWVjZXMiLCAibGFzdFBpZWNlIiwgInVubWFya0Jsb2NrQnJlYWtQaWVjZSIsICJibG9ja0JyZWFrVGV4dCIsICJibG9ja0JyZWFrIiwgIkRvY3VtZW50IiwgImRvY3VtZW50SlNPTiIsICJ0ZXh0QXR0cmlidXRlcyIsICJibG9ja3MiLCAiYmxvY2tMaXN0IiwgImdldEJsb2NrQXRJbmRleCIsICJjb25zb2xpZGF0ZUJsb2NrcyIsICJjb3B5VXNpbmdPYmplY3RzRnJvbURvY3VtZW50IiwgInNvdXJjZURvY3VtZW50IiwgImNvcHlXaXRoQmFzZUJsb2NrQXR0cmlidXRlcyIsICJyZXBsYWNlQmxvY2siLCAib2xkQmxvY2siLCAibmV3QmxvY2siLCAiaW5zZXJ0RG9jdW1lbnRBdFJhbmdlIiwgImxvY2F0aW9uRnJvbVBvc2l0aW9uIiwgImdldEJsb2NrQXRQb3NpdGlvbiIsICJtZXJnZURvY3VtZW50QXRSYW5nZSIsICJmb3JtYXR0ZWREb2N1bWVudCIsICJzdGFydFBvc2l0aW9uIiwgInN0YXJ0TG9jYXRpb24iLCAiYmFzZUJsb2NrQXR0cmlidXRlcyIsICJnZXRCYXNlQmxvY2tBdHRyaWJ1dGVzIiwgInRyYWlsaW5nQmxvY2tBdHRyaWJ1dGVzIiwgImxlYWRpbmdCbG9ja0F0dHJpYnV0ZXMiLCAiYmxvY2tDb3VudCIsICJnZXRCbG9ja0NvdW50IiwgImZpcnN0QmxvY2siLCAiZmlyc3RUZXh0IiwgImluc2VydFRleHRBdFJhbmdlIiwgImxlZnRQb3NpdGlvbiIsICJyaWdodFBvc2l0aW9uIiwgImxlZnRMb2NhdGlvbiIsICJyaWdodExvY2F0aW9uIiwgImxvY2F0aW9uUmFuZ2VGcm9tUmFuZ2UiLCAibGVmdE9mZnNldCIsICJsZWZ0QmxvY2siLCAicmlnaHRPZmZzZXQiLCAicmlnaHRCbG9jayIsICJsZWZ0VGV4dCIsICJyaWdodFRleHQiLCAiYWZmZWN0ZWRCbG9ja0NvdW50IiwgImdldERvY3VtZW50QXRSYW5nZSIsICJtb3ZpbmdSaWdodHdhcmQiLCAiZWFjaEJsb2NrQXRSYW5nZSIsICJ0ZXh0UmFuZ2UiLCAiZWFjaEJsb2NrIiwgImdldFRleHRBdEluZGV4IiwgInJlbW92ZUF0dHJpYnV0ZUZvckF0dGFjaG1lbnQiLCAic2V0SFRNTEF0dHJpYnV0ZUF0UG9zaXRpb24iLCAidXBkYXRlZEJsb2NrIiwgImluc2VydEJsb2NrQnJlYWtBdFJhbmdlIiwgImFwcGx5QmxvY2tBdHRyaWJ1dGVBdFJhbmdlIiwgImV4cGFuZGVkIiwgImV4cGFuZFJhbmdlVG9MaW5lQnJlYWtzQW5kU3BsaXRCbG9ja3MiLCAiYmxvY2tDb25maWciLCAicmVtb3ZlTGFzdExpc3RBdHRyaWJ1dGVBdFJhbmdlIiwgImV4Y2VwdEF0dHJpYnV0ZU5hbWUiLCAiY29udmVydGVkIiwgImNvbnZlcnRMaW5lQnJlYWtzVG9CbG9ja0JyZWFrc0luUmFuZ2UiLCAicmVtb3ZlQmxvY2tBdHRyaWJ1dGVzQXRSYW5nZSIsICJyZW1vdmVMYXN0VGVybWluYWxBdHRyaWJ1dGVBdFJhbmdlIiwgImNvbnNvbGlkYXRlQmxvY2tzQXRSYW5nZSIsICJsYXN0QXR0cmlidXRlTmFtZSIsICJlbmRMb2NhdGlvbiIsICJzdGFydEJsb2NrIiwgInBvc2l0aW9uRnJvbUxvY2F0aW9uIiwgImVuZEJsb2NrIiwgIl90aGlzJGdldEJsb2NrQXRJbmRleCIsICJnZXRUZXh0QXRQb3NpdGlvbiIsICJnZXRDaGFyYWN0ZXJBdFBvc2l0aW9uIiwgImdldEVkaXRDb3VudCIsICJlZGl0Q291bnQiLCAiZ2V0Q29tbW9uQXR0cmlidXRlc0F0UG9zaXRpb24iLCAiYXR0cmlidXRlc0ZvckJsb2NrIiwgImNvbW1vbkF0dHJpYnV0ZXMiLCAiYXR0cmlidXRlc0xlZnQiLCAiaW5oZXJpdGFibGVBdHRyaWJ1dGVzIiwgImdldFJhbmdlT2ZDb21tb25BdHRyaWJ1dGVBdFBvc2l0aW9uIiwgInN0YXJ0T2Zmc2V0IiwgImVuZE9mZnNldCIsICJibG9ja0luZGV4IiwgImxhc3RBdHRyaWJ1dGVJbmRleCIsICJtaW4iLCAiYXR0YWNobWVudFBpZWNlcyIsICJnZXRMb2NhdGlvblJhbmdlT2ZBdHRhY2htZW50IiwgImdldEF0dGFjaG1lbnRQaWVjZUZvckF0dGFjaG1lbnQiLCAiZmluZFJhbmdlc0ZvckJsb2NrQXR0cmlidXRlIiwgInJhbmdlcyIsICJmaW5kUmFuZ2VzRm9yVGV4dEF0dHJpYnV0ZSIsICJ3aXRoVmFsdWUiLCAibG9jYXRpb24iLCAibG9jYXRpb25SYW5nZUZyb21Qb3NpdGlvbiIsICJyYW5nZUZyb21Mb2NhdGlvblJhbmdlIiwgImxvY2F0aW9uUmFuZ2UiLCAiZ2V0VGV4dHMiLCAidG9TZXJpYWxpemFibGVEb2N1bWVudCIsICJwaWVjZUZvclN0cmluZyIsICJwYXJzZVRyaXhEYXRhQXR0cmlidXRlIiwgIkhUTUxQYXJzZXIiLCAicmVmZXJlbmNlRWxlbWVudCIsICJibG9ja0VsZW1lbnRzIiwgInByb2Nlc3NlZEVsZW1lbnRzIiwgImdldERvY3VtZW50IiwgImNyZWF0ZUhpZGRlbkNvbnRhaW5lciIsICJjb250YWluZXJFbGVtZW50IiwgIm5vZGVGaWx0ZXIiLCAicHJvY2Vzc05vZGUiLCAidHJhbnNsYXRlQmxvY2tFbGVtZW50TWFyZ2luc1RvTmV3bGluZXMiLCAicmVtb3ZlSGlkZGVuQ29udGFpbmVyIiwgImRpc3BsYXkiLCAibmV4dFNpYmxpbmciLCAiaXNJbnNpZ25pZmljYW50VGV4dE5vZGUiLCAiYXBwZW5kQmxvY2tGb3JUZXh0Tm9kZSIsICJwcm9jZXNzVGV4dE5vZGUiLCAiYXBwZW5kQmxvY2tGb3JFbGVtZW50IiwgInByb2Nlc3NFbGVtZW50IiwgImN1cnJlbnRCbG9ja0VsZW1lbnQiLCAiaXNCbG9ja0VsZW1lbnQiLCAiYXBwZW5kU3RyaW5nV2l0aEF0dHJpYnV0ZXMiLCAiX3RoaXMkY3VycmVudEJsb2NrIiwgImdldEJsb2NrQXR0cmlidXRlcyIsICJnZXRCbG9ja0hUTUxBdHRyaWJ1dGVzIiwgImN1cnJlbnRCbG9jayIsICJhcHBlbmRCbG9ja0ZvckF0dHJpYnV0ZXNXaXRoRWxlbWVudCIsICJlbGVtZW50SXNCbG9ja0VsZW1lbnQiLCAiY3VycmVudEJsb2NrQ29udGFpbnNFbGVtZW50IiwgInBhcmVudEJsb2NrRWxlbWVudCIsICJmaW5kUGFyZW50QmxvY2tFbGVtZW50IiwgImFwcGVuZEVtcHR5QmxvY2siLCAicGFyZW50RWxlbWVudCIsICJfbm9kZSRwcmV2aW91c1NpYmxpbmciLCAiZWxlbWVudENhbkRpc3BsYXlQcmVmb3JtYXR0ZWRUZXh0IiwgInN0cmluZ0VuZHNXaXRoV2hpdGVzcGFjZSIsICJsZWZ0VHJpbUJyZWFrYWJsZVdoaXRlc3BhY2UiLCAiZ2V0VGV4dEF0dHJpYnV0ZXMiLCAiYXBwZW5kQXR0YWNobWVudFdpdGhBdHRyaWJ1dGVzIiwgImlzRXh0cmFCUiIsICJkaW1lbnNpb25zIiwgIm5lZWRzVGFibGVTZXBhcmF0b3IiLCAiYXBwZW5kUGllY2UiLCAiYXBwZW5kU3RyaW5nVG9UZXh0QXRJbmRleCIsICJwcmVwZW5kU3RyaW5nVG9UZXh0QXRJbmRleCIsICJ1bnNoaWZ0IiwgImNvbmZpZ0F0dHIiLCAiYXR0cmlidXRlSW5oZXJpdGVkRnJvbUJsb2NrIiwgImJsb2NrRWxlbWVudCIsICJmaW5kQmxvY2tFbGVtZW50QW5jZXN0b3JzIiwgImF0dHJDb25maWciLCAiX2F0dHJDb25maWckdGVzdCIsICJyZXZlcnNlIiwgInNldHRpbmdzIiwgImFuY2VzdG9ycyIsICJzdHJpbmdJc0FsbEJyZWFrYWJsZVdoaXRlc3BhY2UiLCAibm9kZUVuZHNXaXRoTm9uV2hpdGVzcGFjZSIsICJfZWxlbWVudCRwcmV2aW91c1NpYmwiLCAiZGVmYXVsdE1hcmdpbiIsICJnZXRNYXJnaW5PZkRlZmF1bHRCbG9ja0VsZW1lbnQiLCAibWFyZ2luIiwgImdldE1hcmdpbk9mQmxvY2tFbGVtZW50QXRJbmRleCIsICJ0b3AiLCAiYm90dG9tIiwgImdldEJsb2NrRWxlbWVudE1hcmdpbiIsICJ3aGl0ZVNwYWNlIiwgIm1hcmdpblRvcCIsICJtYXJnaW5Cb3R0b20iLCAiRklMVEVSX1JFSkVDVCIsICJGSUxURVJfQUNDRVBUIiwgInVuc2VyaWFsaXphYmxlQXR0cmlidXRlTmFtZXMiLCAic2VyaWFsaXplZEF0dHJpYnV0ZXNBdHRyaWJ1dGUiLCAic2VyaWFsaXplZEF0dHJpYnV0ZXNTZWxlY3RvciIsICJibG9ja0NvbW1lbnRQYXR0ZXJuIiwgInNlcmlhbGl6ZXJzIiwgInNlcmlhbGl6YWJsZSIsICJIVE1MRWxlbWVudCIsICJlbCIsICJDbiIsICJNYW5hZ2VkQXR0YWNobWVudCIsICJhdHRhY2htZW50TWFuYWdlciIsICJyZXF1ZXN0UmVtb3ZhbE9mQXR0YWNobWVudCIsICJBdHRhY2htZW50TWFuYWdlciIsICJtYW5hZ2VkQXR0YWNobWVudHMiLCAibWFuYWdlQXR0YWNobWVudCIsICJhdHRhY2htZW50SXNNYW5hZ2VkIiwgImF0dGFjaG1lbnRNYW5hZ2VyRGlkUmVxdWVzdFJlbW92YWxPZkF0dGFjaG1lbnQiLCAidW5tYW5hZ2VBdHRhY2htZW50IiwgIm1hbmFnZWRBdHRhY2htZW50IiwgIkxpbmVCcmVha0luc2VydGlvbiIsICJjb21wb3NpdGlvbiIsICJzZWxlY3RlZFJhbmdlIiwgImdldFNlbGVjdGVkUmFuZ2UiLCAicHJldmlvdXNDaGFyYWN0ZXIiLCAibmV4dENoYXJhY3RlciIsICJzaG91bGRJbnNlcnRCbG9ja0JyZWFrIiwgInNob3VsZEJyZWFrRm9ybWF0dGVkQmxvY2siLCAic2hvdWxkRGVjcmVhc2VMaXN0TGV2ZWwiLCAic2hvdWxkUHJlcGVuZExpc3RJdGVtIiwgInNob3VsZFJlbW92ZUxhc3RCbG9ja0F0dHJpYnV0ZSIsICJDb21wb3NpdGlvbiIsICJjdXJyZW50QXR0cmlidXRlcyIsICJyZXZpc2lvbiIsICJfdGhpcyRkZWxlZ2F0ZSRjb21wb3MiLCAicmVmcmVzaEF0dGFjaG1lbnRzIiwgImNvbXBvc2l0aW9uRGlkQ2hhbmdlRG9jdW1lbnQiLCAiZ2V0U25hcHNob3QiLCAibG9hZFNuYXBzaG90IiwgIl90aGlzJGRlbGVnYXRlMiRjb21wbyIsICJfdGhpcyRkZWxlZ2F0ZTMiLCAiX3RoaXMkZGVsZWdhdGUzJGNvbXBvIiwgImNvbXBvc2l0aW9uV2lsbExvYWRTbmFwc2hvdCIsICJzZXRTZWxlY3Rpb24iLCAiY29tcG9zaXRpb25EaWRMb2FkU25hcHNob3QiLCAiaW5zZXJ0VGV4dCIsICJ1cGRhdGVQb3NpdGlvbiIsICJub3RpZnlEZWxlZ2F0ZU9mSW5zZXJ0aW9uQXRSYW5nZSIsICJpbnNlcnRCbG9jayIsICJpbnNlcnREb2N1bWVudCIsICJpbnNlcnRTdHJpbmciLCAiZ2V0Q3VycmVudFRleHRBdHRyaWJ1dGVzIiwgImluc2VydEJsb2NrQnJlYWsiLCAiaW5zZXJ0TGluZUJyZWFrIiwgImluc2VydGlvbiIsICJkZWNyZWFzZUxpc3RMZXZlbCIsICJyZW1vdmVMYXN0QmxvY2tBdHRyaWJ1dGUiLCAiYnJlYWtGb3JtYXR0ZWRCbG9jayIsICJpbnNlcnRIVE1MIiwgInJlcGxhY2VIVE1MIiwgImdldExvY2F0aW9uUmFuZ2UiLCAiaW5zZXJ0RmlsZSIsICJpbnNlcnRGaWxlcyIsICJfdGhpcyRkZWxlZ2F0ZTQiLCAiY29tcG9zaXRpb25TaG91bGRBY2NlcHRGaWxlIiwgImF0dGFjaG1lbnRGb3JGaWxlIiwgImluc2VydEF0dGFjaG1lbnRzIiwgImluc2VydEF0dGFjaG1lbnQiLCAiYXR0YWNobWVudFRleHQiLCAidGV4dEZvckF0dGFjaG1lbnRXaXRoQXR0cmlidXRlcyIsICJzaG91bGRNYW5hZ2VEZWxldGluZ0luRGlyZWN0aW9uIiwgInNob3VsZE1hbmFnZU1vdmluZ0N1cnNvckluRGlyZWN0aW9uIiwgImRlbGV0ZUluRGlyZWN0aW9uIiwgImRlbGV0aW5nSW50b1ByZXZpb3VzQmxvY2siLCAic2VsZWN0aW9uU3BhbnNCbG9ja3MiLCAic2VsZWN0aW9uSXNDb2xsYXBzZWQiLCAiY2FuRGVjcmVhc2VCbG9ja0F0dHJpYnV0ZUxldmVsIiwgImdldEJsb2NrIiwgImRlY3JlYXNlQmxvY2tBdHRyaWJ1dGVMZXZlbCIsICJnZXRFeHBhbmRlZFJhbmdlSW5EaXJlY3Rpb24iLCAiZ2V0QXR0YWNobWVudEF0UmFuZ2UiLCAiZWRpdEF0dGFjaG1lbnQiLCAibW92ZVRleHRGcm9tUmFuZ2UiLCAicmVtb3ZlQXR0YWNobWVudCIsICJzdG9wRWRpdGluZ0F0dGFjaG1lbnQiLCAicmVtb3ZlQ3VycmVudEF0dHJpYnV0ZSIsICJpbnNlcnRQbGFjZWhvbGRlciIsICJwbGFjZWhvbGRlclBvc2l0aW9uIiwgImdldFBvc2l0aW9uIiwgInNlbGVjdFBsYWNlaG9sZGVyIiwgInNldFNlbGVjdGVkUmFuZ2UiLCAiUExBQ0VIT0xERVIiLCAiZm9yZ2V0UGxhY2Vob2xkZXIiLCAiaGFzQ3VycmVudEF0dHJpYnV0ZSIsICJ0b2dnbGVDdXJyZW50QXR0cmlidXRlIiwgInNldEN1cnJlbnRBdHRyaWJ1dGUiLCAiY2FuU2V0Q3VycmVudEF0dHJpYnV0ZSIsICJjYW5TZXRDdXJyZW50QmxvY2tBdHRyaWJ1dGUiLCAiY2FuU2V0Q3VycmVudFRleHRBdHRyaWJ1dGUiLCAiZ2V0U2VsZWN0ZWREb2N1bWVudCIsICJzZXRCbG9ja0F0dHJpYnV0ZSIsICJzZXRUZXh0QXR0cmlidXRlIiwgIm5vdGlmeURlbGVnYXRlT2ZDdXJyZW50QXR0cmlidXRlc0NoYW5nZSIsICJzZXRIVE1MQXRyaWJ1dGVBdFBvc2l0aW9uIiwgImFsbG93ZWRIVE1MQXR0cmlidXRlcyIsICJuZXdEb2N1bWVudCIsICJyZW1vdmVCbG9ja0F0dHJpYnV0ZSIsICJ1cGRhdGVDdXJyZW50QXR0cmlidXRlcyIsICJyZW1vdmVUZXh0QXR0cmlidXRlIiwgImNhbkRlY3JlYXNlTmVzdGluZ0xldmVsIiwgIl90aGlzJGdldEJsb2NrIiwgImNhbkluY3JlYXNlTmVzdGluZ0xldmVsIiwgInByZXZpb3VzQmxvY2siLCAiZ2V0UHJldmlvdXNCbG9jayIsICJfdGhpcyRnZXRCbG9jazIiLCAiX3RoaXMkZ2V0QmxvY2szIiwgImF0dHJpYnV0ZUxldmVsIiwgImlnbm9yZUxvY2siLCAiZ2V0Q3VycmVudEF0dHJpYnV0ZXMiLCAiZnJlZXplU2VsZWN0aW9uIiwgInRoYXdTZWxlY3Rpb24iLCAiaGFzRnJvemVuU2VsZWN0aW9uIiwgIl90aGlzJGRlbGVnYXRlNSIsICJjb21wb3NpdGlvbkRpZFJlcXVlc3RDaGFuZ2luZ1NlbGVjdGlvblRvTG9jYXRpb25SYW5nZSIsICJnZXRTZWxlY3Rpb25NYW5hZ2VyIiwgInNldExvY2F0aW9uUmFuZ2UiLCAidGFyZ2V0TG9jYXRpb25SYW5nZSIsICJ3aXRoVGFyZ2V0TG9jYXRpb25SYW5nZSIsICJ3aXRoVGFyZ2V0UmFuZ2UiLCAid2l0aFRhcmdldERPTVJhbmdlIiwgImNyZWF0ZUxvY2F0aW9uUmFuZ2VGcm9tRE9NUmFuZ2UiLCAidHJhbnNsYXRlVVRGMTZQb3NpdGlvbkZyb21PZmZzZXQiLCAiZWRpdGluZ0F0dGFjaG1lbnQiLCAibW92ZUN1cnNvckluRGlyZWN0aW9uIiwgImNhbkVkaXRBdHRhY2htZW50IiwgImV4cGFuZFNlbGVjdGlvbkluRGlyZWN0aW9uIiwgImV4cGFuZFNlbGVjdGlvbkZvckVkaXRpbmciLCAiZXhwYW5kU2VsZWN0aW9uQXJvdW5kQ29tbW9uQXR0cmlidXRlIiwgInNlbGVjdGlvbkNvbnRhaW5zQXR0YWNobWVudHMiLCAiX3RoaXMkZ2V0U2VsZWN0ZWRBdHRhIiwgImdldFNlbGVjdGVkQXR0YWNobWVudHMiLCAic2VsZWN0aW9uSXNJbkN1cnNvclRhcmdldCIsICJwb3NpdGlvbklzQ3Vyc29yVGFyZ2V0IiwgImxvY2F0aW9uSXNDdXJzb3JUYXJnZXQiLCAicG9zaXRpb25Jc0Jsb2NrQnJlYWsiLCAiX3RoaXMkZG9jdW1lbnQkZ2V0UGllIiwgIl90aGlzJGdldFNlbGVjdGVkRG9jdSIsICJhZGRlZCIsICJyZW1vdmVkIiwgIm9sZEFycmF5IiwgIm5ld0FycmF5IiwgImV4aXN0aW5nVmFsdWVzIiwgIlNldCIsICJjdXJyZW50VmFsdWVzIiwgIl90aGlzJGRlbGVnYXRlNiIsICJfdGhpcyRkZWxlZ2F0ZTYkY29tcG8iLCAiY29tcG9zaXRpb25EaWRSZW1vdmVBdHRhY2htZW50IiwgIl90aGlzJGRlbGVnYXRlNyIsICJfdGhpcyRkZWxlZ2F0ZTckY29tcG8iLCAiY29tcG9zaXRpb25EaWRBZGRBdHRhY2htZW50IiwgIl90aGlzJGRlbGVnYXRlOCIsICJfdGhpcyRkZWxlZ2F0ZTgkY29tcG8iLCAiY29tcG9zaXRpb25EaWRFZGl0QXR0YWNobWVudCIsICJfdGhpcyRkZWxlZ2F0ZTkiLCAiX3RoaXMkZGVsZWdhdGU5JGNvbXBvIiwgImNvbXBvc2l0aW9uRGlkQ2hhbmdlQXR0YWNobWVudFByZXZpZXdVUkwiLCAiX3RoaXMkZGVsZWdhdGUxMCIsICJfdGhpcyRkZWxlZ2F0ZTEwJGNvbXAiLCAiY29tcG9zaXRpb25EaWRTdGFydEVkaXRpbmdBdHRhY2htZW50IiwgIl90aGlzJGRlbGVnYXRlMTEiLCAiX3RoaXMkZGVsZWdhdGUxMSRjb21wIiwgImNvbXBvc2l0aW9uRGlkU3RvcEVkaXRpbmdBdHRhY2htZW50IiwgIl90aGlzJGRlbGVnYXRlMTIiLCAiX3RoaXMkZGVsZWdhdGUxMiRjb21wIiwgImNvbXBvc2l0aW9uRGlkQ2hhbmdlQ3VycmVudEF0dHJpYnV0ZXMiLCAiX3RoaXMkZGVsZWdhdGUxMyIsICJfdGhpcyRkZWxlZ2F0ZTEzJGNvbXAiLCAiY29tcG9zaXRpb25EaWRQZXJmb3JtSW5zZXJ0aW9uQXRSYW5nZSIsICJ1dGYxNnN0cmluZyIsICJ1dGYxNnBvc2l0aW9uIiwgIlVuZG9NYW5hZ2VyIiwgInVuZG9FbnRyaWVzIiwgInJlZG9FbnRyaWVzIiwgInJlY29yZFVuZG9FbnRyeSIsICJkZXNjcmlwdGlvbiIsICJjb25zb2xpZGF0YWJsZSIsICJwcmV2aW91c0VudHJ5IiwgImVudHJ5SGFzRGVzY3JpcHRpb25BbmRDb250ZXh0IiwgInVuZG9FbnRyeSIsICJjcmVhdGVFbnRyeSIsICJwb3AiLCAicmVkb0VudHJ5IiwgInNuYXBzaG90IiwgImNhblVuZG8iLCAiY2FuUmVkbyIsICJlbnRyeSIsICJCTE9DS19BVFRSSUJVVEVfTkFNRSIsICJGaWx0ZXIiLCAiYXBwbHlCbG9ja0F0dHJpYnV0ZSIsICJmaW5kUmFuZ2VzT2ZCbG9ja3MiLCAiZmluZFJhbmdlc09mUGllY2VzIiwgIm1vdmVTZWxlY3RlZFJhbmdlRm9yd2FyZCIsICJhdHRhY2htZW50R2FsbGVyeUZpbHRlciIsICJERUZBVUxUX0ZJTFRFUlMiLCAiRWRpdG9yIiwgInVuZG9NYW5hZ2VyIiwgImZpbHRlcnMiLCAibG9hZERvY3VtZW50IiwgImxvYWRIVE1MIiwgImxvYWRKU09OIiwgImdldENsaWVudFJlY3RBdFBvc2l0aW9uIiwgImdldENsaWVudFJlY3RBdExvY2F0aW9uUmFuZ2UiLCAiYWN0aXZhdGVBdHRyaWJ1dGUiLCAiYXR0cmlidXRlSXNBY3RpdmUiLCAiY2FuQWN0aXZhdGVBdHRyaWJ1dGUiLCAiZGVhY3RpdmF0ZUF0dHJpYnV0ZSIsICJMb2NhdGlvbk1hcHBlciIsICJmaW5kTG9jYXRpb25Gcm9tQ29udGFpbmVyQW5kT2Zmc2V0IiwgImNvbnRhaW5lciIsICJmb3VuZEJsb2NrIiwgImF0dGFjaG1lbnRFbGVtZW50IiwgImZpbmRBdHRhY2htZW50RWxlbWVudFBhcmVudEZvck5vZGUiLCAicmVqZWN0QXR0YWNobWVudENvbnRlbnRzIiwgIm5vZGVMZW5ndGgiLCAiZmluZENvbnRhaW5lckFuZE9mZnNldEZyb21Mb2NhdGlvbiIsICJub2RlT2Zmc2V0IiwgImZpbmROb2RlQW5kT2Zmc2V0RnJvbUxvY2F0aW9uIiwgImdldFNpZ25pZmljYW50Tm9kZXNGb3JJbmRleCIsICJhY2NlcHRTaWduaWZpY2FudE5vZGVzIiwgInJlY29yZGluZ05vZGVzIiwgInJlamVjdEVtcHR5VGV4dE5vZGVzIiwgIlBvaW50TWFwcGVyIiwgImNyZWF0ZURPTVJhbmdlRnJvbVBvaW50IiwgIngiLCAieSIsICJjYXJldFBvc2l0aW9uRnJvbVBvaW50IiwgIm9mZnNldE5vZGUiLCAiY3JlYXRlUmFuZ2UiLCAic2V0U3RhcnQiLCAiY2FyZXRSYW5nZUZyb21Qb2ludCIsICJjcmVhdGVUZXh0UmFuZ2UiLCAib3JpZ2luYWxET01SYW5nZSIsICJtb3ZlVG9Qb2ludCIsICJzZWxlY3QiLCAiZ2V0Q2xpZW50UmVjdHNGb3JET01SYW5nZSIsICJnZXRDbGllbnRSZWN0cyIsICJTZWxlY3Rpb25NYW5hZ2VyIiwgImRpZE1vdXNlRG93biIsICJsb2NhdGlvbk1hcHBlciIsICJwb2ludE1hcHBlciIsICJsb2NrQ291bnQiLCAiY3VycmVudExvY2F0aW9uUmFuZ2UiLCAibG9ja2VkTG9jYXRpb25SYW5nZSIsICJjcmVhdGVET01SYW5nZUZyb21Mb2NhdGlvblJhbmdlIiwgInVwZGF0ZUN1cnJlbnRMb2NhdGlvblJhbmdlIiwgInNldExvY2F0aW9uUmFuZ2VGcm9tUG9pbnRSYW5nZSIsICJwb2ludFJhbmdlIiwgImdldExvY2F0aW9uQXRQb2ludCIsICJsb2NrIiwgInVubG9jayIsICJjbGVhclNlbGVjdGlvbiIsICJfZ2V0RE9NUmFuZ2UiLCAiY29sbGFwc2VkIiwgInNlbGVjdGlvbklzRXhwYW5kZWQiLCAiZG9tUmFuZ2VXaXRoaW5FbGVtZW50IiwgInBhdXNlVGVtcG9yYXJpbHkiLCAicmVzdW1lSGFuZGxlcnMiLCAicGF1c2VkIiwgInJlc3VtZSIsICJjbGVhclRpbWVvdXQiLCAicmVzdW1lVGltZW91dCIsICJfdGhpcyRkZWxlZ2F0ZSRsb2NhdGkiLCAibG9jYXRpb25SYW5nZURpZENoYW5nZSIsICJyYW5nZVN0YXJ0IiwgInJhbmdlRW5kIiwgInNldEVuZCIsICJwb2ludCIsICJfdGhpcyRjcmVhdGVMb2NhdGlvblIiLCAiVW4iLCAiV2kiLCAiU24iLCAiVWkiLCAiR2kiLCAia24iLCAib24iLCAiT24iLCAiY24iLCAidWkiLCAiUm4iLCAiRm4iLCAiRW4iLCAiX2kiLCAiam4iLCAiV24iLCAiemkiLCAiVmkiLCAiS2kiLCAiVG4iLCAiVm4iLCAiaWUiLCAiZ2kiLCAieGkiLCAiQ2kiLCAiYmkiLCAiZmkiLCAidmkiLCAia2V5TmFtZXMiLCAidW5kb2FibGUiLCAiY29tbWFuZHMiLCAiZG8iLCAidW5kb3MiLCAiQXR0YWNobWVudEVkaXRvckNvbnRyb2xsZXIiLCAidGl0bGUiLCAidHJpeEFjdGlvbiIsICJkaWRDbGlja1Rvb2xiYXIiLCAiZGlkQ2xpY2tBY3Rpb25CdXR0b24iLCAidGV4dGFyZWEiLCAicGxhY2Vob2xkZXIiLCAidGV4dGFyZWFDbG9uZSIsICJ0YWJJbmRleCIsICJhdXRvcmVzaXplIiwgInNjcm9sbEhlaWdodCIsICJkaWRJbnB1dENhcHRpb24iLCAiZGlkS2V5RG93bkNhcHRpb24iLCAiZGlkQ2hhbmdlQ2FwdGlvbiIsICJkaWRCbHVyQ2FwdGlvbiIsICJlZGl0aW5nRmlnY2FwdGlvbiIsICJlZGl0Q2FwdGlvbiIsICJmb2N1cyIsICJpbnN0YWxsIiwgIm1ha2VFbGVtZW50TXV0YWJsZSIsICJhZGRUb29sYmFyIiwgImluc3RhbGxDYXB0aW9uRWRpdG9yIiwgInVuaW5zdGFsbCIsICJzYXZlUGVuZGluZ0NhcHRpb24iLCAiZGlkVW5pbnN0YWxsQXR0YWNobWVudEVkaXRvciIsICJwZW5kaW5nQ2FwdGlvbiIsICJfdGhpcyRkZWxlZ2F0ZTMkYXR0YWMiLCAiYXR0YWNobWVudEVkaXRvckRpZFJlcXVlc3RVcGRhdGluZ0F0dHJpYnV0ZXNGb3JBdHRhY2htZW50IiwgImF0dGFjaG1lbnRFZGl0b3JEaWRSZXF1ZXN0UmVtb3ZpbmdBdHRyaWJ1dGVGb3JBdHRhY2htZW50IiwgInN0b3BQcm9wYWdhdGlvbiIsICJhdHRhY2htZW50RWRpdG9yRGlkUmVxdWVzdFJlbW92YWxPZkF0dGFjaG1lbnQiLCAiX3RoaXMkZGVsZWdhdGU1JGF0dGFjIiwgImtleUNvZGUiLCAiYXR0YWNobWVudEVkaXRvckRpZFJlcXVlc3REZXNlbGVjdGluZ0F0dGFjaG1lbnQiLCAiQ29tcG9zaXRpb25Db250cm9sbGVyIiwgImRpZEZvY3VzIiwgImRpZEJsdXIiLCAiZGlkQ2xpY2tBdHRhY2htZW50IiwgImRvY3VtZW50VmlldyIsICJfdGhpcyRibHVyUHJvbWlzZSIsICJmb2N1c2VkIiwgImNvbXBvc2l0aW9uQ29udHJvbGxlckRpZEZvY3VzIiwgImJsdXJQcm9taXNlIiwgImNvbXBvc2l0aW9uQ29udHJvbGxlckRpZEJsdXIiLCAiZmluZEF0dGFjaG1lbnRGb3JFbGVtZW50IiwgImNvbXBvc2l0aW9uQ29udHJvbGxlckRpZFNlbGVjdEF0dGFjaG1lbnQiLCAiZ2V0U2VyaWFsaXphYmxlRWxlbWVudCIsICJpc0VkaXRpbmdBdHRhY2htZW50IiwgIl90aGlzJGRlbGVnYXRlNCRjb21wbyIsICJfdGhpcyRkZWxlZ2F0ZTUkY29tcG8iLCAiY2FuU3luY0RvY3VtZW50VmlldyIsICJjb21wb3NpdGlvbkNvbnRyb2xsZXJXaWxsU3luY0RvY3VtZW50VmlldyIsICJjb21wb3NpdGlvbkNvbnRyb2xsZXJEaWRTeW5jRG9jdW1lbnRWaWV3IiwgImNvbXBvc2l0aW9uQ29udHJvbGxlckRpZFJlbmRlciIsICJyZXJlbmRlclZpZXdGb3JPYmplY3QiLCAicmVmcmVzaFZpZXdDYWNoZSIsICJhdHRhY2htZW50RWRpdG9yIiwgImluc3RhbGxBdHRhY2htZW50RWRpdG9yRm9yQXR0YWNobWVudCIsICJfdGhpcyRhdHRhY2htZW50RWRpdG8iLCAidW5pbnN0YWxsQXR0YWNobWVudEVkaXRvciIsICJfdGhpcyRhdHRhY2htZW50RWRpdG8yIiwgImNvbXBvc2l0aW9uQ29udHJvbGxlcldpbGxVcGRhdGVBdHRhY2htZW50IiwgImNvbXBvc2l0aW9uQ29udHJvbGxlckRpZFJlcXVlc3RSZW1vdmFsT2ZBdHRhY2htZW50IiwgImNvbXBvc2l0aW9uQ29udHJvbGxlckRpZFJlcXVlc3REZXNlbGVjdGluZ0F0dGFjaG1lbnQiLCAiQ29udHJvbGxlciIsICJtdXRhYmxlQXR0cmlidXRlTmFtZSIsICJtdXRhYmxlU2VsZWN0b3IiLCAiY2hpbGRMaXN0IiwgImNoYXJhY3RlckRhdGEiLCAiY2hhcmFjdGVyRGF0YU9sZFZhbHVlIiwgInN1YnRyZWUiLCAiTXV0YXRpb25PYnNlcnZlciIsICJkaWRNdXRhdGUiLCAib2JzZXJ2ZXIiLCAib2JzZXJ2ZSIsICJkaXNjb25uZWN0IiwgIm11dGF0aW9ucyIsICJfdGhpcyRkZWxlZ2F0ZSRlbGVtZW4iLCAiZmluZFNpZ25pZmljYW50TXV0YXRpb25zIiwgImVsZW1lbnREaWRNdXRhdGUiLCAiZ2V0TXV0YXRpb25TdW1tYXJ5IiwgIm11dGF0aW9uIiwgIm11dGF0aW9uSXNTaWduaWZpY2FudCIsICJub2RlSXNNdXRhYmxlIiwgIm5vZGVzTW9kaWZpZWRCeU11dGF0aW9uIiwgIm5vZGVJc1NpZ25pZmljYW50IiwgImFkZGVkTm9kZXMiLCAicmVtb3ZlZE5vZGVzIiwgImdldFRleHRNdXRhdGlvblN1bW1hcnkiLCAiYWRkaXRpb25zIiwgImRlbGV0aW9ucyIsICJnZXRUZXh0Q2hhbmdlc0Zyb21DaGFyYWN0ZXJEYXRhIiwgInRleHRDaGFuZ2VzIiwgImdldFRleHRDaGFuZ2VzRnJvbUNoaWxkTGlzdCIsICJhZGRpdGlvbiIsICJzdW1tYXJ5IiwgInRleHRBZGRlZCIsICJkZWxldGVkIiwgInRleHREZWxldGVkIiwgImdldE11dGF0aW9uc0J5VHlwZSIsICJ0ZXh0UmVtb3ZlZCIsICJnZXRUZXh0Rm9yTm9kZXMiLCAiY2hhcmFjdGVyTXV0YXRpb25zIiwgInN0YXJ0TXV0YXRpb24iLCAiZW5kTXV0YXRpb24iLCAic3VtbWFyaXplZCIsICJvbGRTdHJpbmciLCAibmV3U3RyaW5nIiwgIm9sZFZhbHVlIiwgIkZpbGVWZXJpZmljYXRpb25PcGVyYXRpb24iLCAicmVhZGVyIiwgIkZpbGVSZWFkZXIiLCAiYWJvcnQiLCAicmVhZEFzQXJyYXlCdWZmZXIiLCAiRmxha3lBbmRyb2lkS2V5Ym9hcmREZXRlY3RvciIsICJzaG91bGRJZ25vcmUiLCAicHJldmlvdXNFdmVudCIsICJjaGVja1NhbXN1bmdLZXlib2FyZEJ1Z2d5TW9kZVN0YXJ0IiwgImNoZWNrU2Ftc3VuZ0tleWJvYXJkQnVnZ3lNb2RlRW5kIiwgImJ1Z2d5TW9kZSIsICJpbnNlcnRpbmdMb25nVGV4dEFmdGVyVW5pZGVudGlmaWVkQ2hhciIsICJkaWZmZXJzSW5XaGl0ZXNwYWNlIiwgImlubmVyVGV4dCIsICJpbnB1dFR5cGUiLCAiX3RoaXMkZXZlbnQkZGF0YSIsICJpc0JlZm9yZUlucHV0SW5zZXJ0VGV4dCIsICJwcmV2aW91c0V2ZW50V2FzVW5pZGVudGlmaWVkS2V5ZG93biIsICJfdGhpcyRwcmV2aW91c0V2ZW50IiwgIl90aGlzJHByZXZpb3VzRXZlbnQyIiwgInRleHQxIiwgInRleHQyIiwgIm5vcm1hbGl6ZSIsICJ3aGl0ZVNwYWNlTm9ybWFsaXplclJlZ2V4cCIsICJJbnB1dENvbnRyb2xsZXIiLCAibXV0YXRpb25PYnNlcnZlciIsICJmbGFreUtleWJvYXJkRGV0ZWN0b3IiLCAiZXZlbnRzIiwgImhhbmRsZXJGb3IiLCAibXV0YXRpb25TdW1tYXJ5IiwgImVkaXRvcldpbGxTeW5jRG9jdW1lbnRWaWV3IiwgImVkaXRvckRpZFN5bmNEb2N1bWVudFZpZXciLCAicmVxdWVzdFJlbmRlciIsICJfdGhpcyRkZWxlZ2F0ZSRpbnB1dEMiLCAiaW5wdXRDb250cm9sbGVyRGlkUmVxdWVzdFJlbmRlciIsICJyZXF1ZXN0UmVwYXJzZSIsICJfdGhpcyRkZWxlZ2F0ZTIkaW5wdXQiLCAiaW5wdXRDb250cm9sbGVyRGlkUmVxdWVzdFJlcGFyc2UiLCAib3BlcmF0aW9ucyIsICJhbGwiLCAiaGFuZGxlSW5wdXQiLCAiX3RoaXMkcmVzcG9uZGVyIiwgImlucHV0Q29udHJvbGxlcldpbGxBdHRhY2hGaWxlcyIsICJyZXNwb25kZXIiLCAiZGVmYXVsdFByZXZlbnRlZCIsICJpbnB1dENvbnRyb2xsZXJXaWxsSGFuZGxlSW5wdXQiLCAiaW5wdXRDb250cm9sbGVyRGlkSGFuZGxlSW5wdXQiLCAiY3JlYXRlTGlua0hUTUwiLCAiYXIiLCAicGFzdGVkRmlsZUNvdW50IiwgIkxldmVsMElucHV0Q29udHJvbGxlciIsICJyZXNldElucHV0U3VtbWFyeSIsICJzZXRJbnB1dFN1bW1hcnkiLCAiaW5wdXRTdW1tYXJ5IiwgImlzQ29tcG9zaW5nIiwgImlucHV0Q29udHJvbGxlckRpZEFsbG93VW5oYW5kbGVkSW5wdXQiLCAibXV0YXRpb25Jc0V4cGVjdGVkIiwgInByZWZlckRvY3VtZW50IiwgIm11dGF0aW9uQWRkaXRpb25NYXRjaGVzU3VtbWFyeSIsICJtdXRhdGlvbkRlbGV0aW9uTWF0Y2hlc1N1bW1hcnkiLCAiZGlkRGVsZXRlIiwgInVuZXhwZWN0ZWROZXdsaW5lQWRkaXRpb24iLCAidW5leHBlY3RlZE5ld2xpbmVEZWxldGlvbiIsICJfdGhpcyRjb21wb3NpdGlvbklucHUiLCAidGV4dENoYW5nZWQiLCAiY29tcG9zZWRFbXB0eVN0cmluZyIsICJjb21wb3NpdGlvbklucHV0IiwgImdldEVuZERhdGEiLCAiZ2V0Q29tcG9zaXRpb25JbnB1dCIsICJDb21wb3NpdGlvbklucHV0IiwgImlzRW5kZWQiLCAiX3RoaXMkcmVzcG9uZGVyMiIsICJzZXJpYWxpemVTZWxlY3Rpb25Ub0RhdGFUcmFuc2ZlciIsICJfdGhpcyRyZXNwb25kZXIzIiwgInNldERhdGEiLCAiY2FuQWNjZXB0RGF0YVRyYW5zZmVyIiwgIkZpbGVzIiwgImdldFBhc3RlZEhUTUxVc2luZ0hpZGRlbkVsZW1lbnQiLCAicGFnZVhPZmZzZXQiLCAicGFnZVlPZmZzZXQiLCAib3BhY2l0eSIsICJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCAia2V5ZG93biIsICJkaWRJbnB1dCIsICJrZXlOYW1lIiwgIl9jb250ZXh0MiIsICJtb2RpZmllciIsICJfY29udGV4dCIsICJjaGFyYWN0ZXIiLCAiaW5wdXRDb250cm9sbGVyRGlkUmVjZWl2ZUtleWJvYXJkQ29tbWFuZCIsICJrZXlwcmVzcyIsICJhbHRLZXkiLCAic3RyaW5nRnJvbUtleUV2ZW50IiwgIl90aGlzJHJlc3BvbmRlcjkiLCAiaW5wdXRDb250cm9sbGVyV2lsbFBlcmZvcm1UeXBpbmciLCAidGV4dElucHV0IiwgInRvVXBwZXJDYXNlIiwgIl90aGlzJHJlc3BvbmRlcjEwIiwgImRyYWdlbnRlciIsICJkcmFnc3RhcnQiLCAiX3RoaXMkZGVsZWdhdGU1JGlucHV0IiwgImRyYWdnZWRSYW5nZSIsICJpbnB1dENvbnRyb2xsZXJEaWRTdGFydERyYWciLCAiZHJhZ292ZXIiLCAiZHJhZ2dpbmdQb2ludCIsICJjbGllbnRYIiwgImNsaWVudFkiLCAiX3RoaXMkZGVsZWdhdGU2JGlucHV0IiwgImlucHV0Q29udHJvbGxlckRpZFJlY2VpdmVEcmFnT3ZlclBvaW50IiwgImRyYWdlbmQiLCAiX3RoaXMkZGVsZWdhdGU3JGlucHV0IiwgImlucHV0Q29udHJvbGxlckRpZENhbmNlbERyYWciLCAiZHJvcCIsICJfZXZlbnQkZGF0YVRyYW5zZmVyIiwgIl90aGlzJHJlc3BvbmRlcjExIiwgIl90aGlzJHJlc3BvbmRlcjEyIiwgImlucHV0Q29udHJvbGxlcldpbGxNb3ZlVGV4dCIsICJfdGhpcyRyZXNwb25kZXIxMyIsICJmcm9tSlNPTlN0cmluZyIsICJjdXQiLCAiX3RoaXMkcmVzcG9uZGVyMTQiLCAiY2xpcGJvYXJkRGF0YSIsICJpbnB1dENvbnRyb2xsZXJXaWxsQ3V0VGV4dCIsICJfdGhpcyRyZXNwb25kZXIxNSIsICJwYXN0ZSIsICJjbGlwYm9hcmQiLCAidGVzdENsaXBib2FyZERhdGEiLCAicGFzdGVFdmVudElzQ3JpcHBsZWRTYWZhcmlIVE1MUGFzdGUiLCAiX3RoaXMkcmVzcG9uZGVyMTYiLCAiaW5wdXRDb250cm9sbGVyV2lsbFBhc3RlIiwgImlucHV0Q29udHJvbGxlckRpZFBhc3RlIiwgIl90aGlzJHJlc3BvbmRlcjE3IiwgIl90aGlzJGRlbGVnYXRlMTQiLCAiX3RoaXMkcmVzcG9uZGVyMTgiLCAiX3RoaXMkZGVsZWdhdGUxNSIsICJfdGhpcyRkZWxlZ2F0ZTE2IiwgIl90aGlzJHJlc3BvbmRlcjE5IiwgIl90aGlzJGRlbGVnYXRlMTciLCAiX2NsaXBib2FyZCRpdGVtcyIsICJfY2xpcGJvYXJkJGl0ZW1zJGdldEEiLCAiaXRlbXMiLCAiZ2V0QXNGaWxlIiwgIl90aGlzJGRlbGVnYXRlMTgiLCAiX3RoaXMkcmVzcG9uZGVyMjAiLCAiX3RoaXMkZGVsZWdhdGUxOSIsICJleHRlbnNpb25Gb3JGaWxlIiwgImNvbXBvc2l0aW9uc3RhcnQiLCAiY29tcG9zaXRpb251cGRhdGUiLCAiY29tcG9zaXRpb25lbmQiLCAiYmVmb3JlaW5wdXQiLCAiYmFja3NwYWNlIiwgIl90aGlzJGRlbGVnYXRlMjAiLCAiZGVsZXRlIiwgIl90aGlzJGRlbGVnYXRlMjEiLCAicmV0dXJuIiwgIl90aGlzJGRlbGVnYXRlMjIiLCAiX3RoaXMkcmVzcG9uZGVyMjEiLCAidGFiIiwgIl90aGlzJHJlc3BvbmRlcjIyIiwgIl90aGlzJHJlc3BvbmRlcjIzIiwgIl90aGlzJHJlc3BvbmRlcjI0IiwgIl90aGlzJHJlc3BvbmRlcjI1IiwgImNvbnRyb2wiLCAiZCIsICJfdGhpcyRkZWxlZ2F0ZTIzIiwgIl90aGlzJGRlbGVnYXRlMjQiLCAiX3RoaXMkZGVsZWdhdGUyNSIsICJfdGhpcyRyZXNwb25kZXIyNiIsICJzaGlmdCIsICJfdGhpcyRkZWxlZ2F0ZTI2IiwgIl90aGlzJHJlc3BvbmRlcjI3IiwgIl90aGlzJHJlc3BvbmRlcjI4IiwgIl90aGlzJHJlc3BvbmRlcjI5IiwgImFsdCIsICJfdGhpcyRkZWxlZ2F0ZTI3IiwgIm1ldGEiLCAiX3RoaXMkZGVsZWdhdGUyOCIsICJfZmlsZSR0eXBlIiwgIndoaWNoIiwgImNoYXJDb2RlIiwgImhhc1Bhc3RlYm9hcmRGbGF2b3IiLCAiaGFzUmVhZGFibGVEeW5hbWljRGF0YSIsICJpc0V4dGVybmFsSFRNTFBhc3RlIiwgImlzRXh0ZXJuYWxSaWNoVGV4dFBhc3RlIiwgImlucHV0Q29udHJvbGxlciIsICJpc1NpZ25pZmljYW50IiwgIl90aGlzJHJlc3BvbmRlcjUiLCAiX3RoaXMkcmVzcG9uZGVyNCIsICJjYW5BcHBseVRvRG9jdW1lbnQiLCAiX3RoaXMkcmVzcG9uZGVyNiIsICJfdGhpcyRyZXNwb25kZXI3IiwgIl90aGlzJHJlc3BvbmRlcjgiLCAiX3RoaXMkZGF0YSRzdGFydCIsICJfdGhpcyRkYXRhJGVuZCIsICJMZXZlbDJJbnB1dENvbnRyb2xsZXIiLCAic2NoZWR1bGVkUmVuZGVyIiwgImNvbXBvc2luZyIsICJyZXBhcnNlIiwgInNjaGVkdWxlUmVuZGVyIiwgIl90aGlzJGFmdGVyUmVuZGVyIiwgImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwgImFmdGVyUmVuZGVyIiwgInRvZ2dsZUF0dHJpYnV0ZUlmU3VwcG9ydGVkIiwgImlucHV0Q29udHJvbGxlcldpbGxQZXJmb3JtRm9ybWF0dGluZyIsICJhY3RpdmF0ZUF0dHJpYnV0ZUlmU3VwcG9ydGVkIiwgImdldFRhcmdldERPTVJhbmdlIiwgIm1pbkxlbmd0aCIsICJfdGhpcyRldmVudCRnZXRUYXJnZXQiLCAiX3RoaXMkZXZlbnQiLCAidGFyZ2V0UmFuZ2VzIiwgImdldFRhcmdldFJhbmdlcyIsICJzdGF0aWNSYW5nZVRvUmFuZ2UiLCAid2l0aEV2ZW50IiwgImNvbW1hbmQiLCAia2V5Ym9hcmRDb21tYW5kRnJvbUtleUV2ZW50IiwgInNoaWZ0S2V5IiwgIl9ldmVudCRjbGlwYm9hcmREYXRhIiwgInBhc3RlRXZlbnRIYXNGaWxlc09ubHkiLCAicGFzdGVFdmVudEhhc1BsYWluVGV4dE9ubHkiLCAiaW5wdXRUeXBlcyIsICJpbW1tZWRpYXRlUmVuZGVyIiwgImlucHV0RXZlbnQiLCAiZHJhZ2dpbmciLCAicG9pbnRGcm9tRXZlbnQiLCAiZHJhZ0V2ZW50SGFzRmlsZXMiLCAiQXJyb3dMZWZ0IiwgIkFycm93UmlnaHQiLCAiQmFja3NwYWNlIiwgIlRhYiIsICJkZWxldGVCeUNvbXBvc2l0aW9uIiwgImRlbGV0ZUJ5Q3V0IiwgImRlbGV0ZUJ5RHJhZyIsICJkZWxldGVCeURyYWdSYW5nZSIsICJkZWxldGVDb21wb3NpdGlvblRleHQiLCAiZGVsZXRlQ29udGVudCIsICJkZWxldGVDb250ZW50QmFja3dhcmQiLCAiZGVsZXRlQ29udGVudEZvcndhcmQiLCAiZGVsZXRlRW50aXJlU29mdExpbmUiLCAiZGVsZXRlSGFyZExpbmVCYWNrd2FyZCIsICJkZWxldGVIYXJkTGluZUZvcndhcmQiLCAiZGVsZXRlU29mdExpbmVCYWNrd2FyZCIsICJkZWxldGVTb2Z0TGluZUZvcndhcmQiLCAiZGVsZXRlV29yZEJhY2t3YXJkIiwgImRlbGV0ZVdvcmRGb3J3YXJkIiwgImZvcm1hdEJhY2tDb2xvciIsICJmb3JtYXRCb2xkIiwgImZvcm1hdEZvbnRDb2xvciIsICJmb3JtYXRGb250TmFtZSIsICJmb3JtYXRJbmRlbnQiLCAiZm9ybWF0SXRhbGljIiwgImZvcm1hdEp1c3RpZnlDZW50ZXIiLCAiZm9ybWF0SnVzdGlmeUZ1bGwiLCAiZm9ybWF0SnVzdGlmeUxlZnQiLCAiZm9ybWF0SnVzdGlmeVJpZ2h0IiwgImZvcm1hdE91dGRlbnQiLCAiZm9ybWF0UmVtb3ZlIiwgIl90aGlzJHJlc3BvbmRlcjMwIiwgImZvcm1hdFNldEJsb2NrVGV4dERpcmVjdGlvbiIsICJmb3JtYXRTZXRJbmxpbmVUZXh0RGlyZWN0aW9uIiwgImZvcm1hdFN0cmlrZVRocm91Z2giLCAiZm9ybWF0U3Vic2NyaXB0IiwgImZvcm1hdFN1cGVyc2NyaXB0IiwgImZvcm1hdFVuZGVybGluZSIsICJoaXN0b3J5UmVkbyIsICJpbnB1dENvbnRyb2xsZXJXaWxsUGVyZm9ybVJlZG8iLCAiaGlzdG9yeVVuZG8iLCAiaW5wdXRDb250cm9sbGVyV2lsbFBlcmZvcm1VbmRvIiwgImluc2VydENvbXBvc2l0aW9uVGV4dCIsICJpbnNlcnRGcm9tQ29tcG9zaXRpb24iLCAiaW5zZXJ0RnJvbURyb3AiLCAiX3RoaXMkcmVzcG9uZGVyMzEiLCAiaW5zZXJ0RnJvbVBhc3RlIiwgIl90aGlzJHJlc3BvbmRlcjMyIiwgIl90aGlzJHJlc3BvbmRlcjMzIiwgInByb2Nlc3NhYmxlRmlsZVBhc3RlIiwgIl90aGlzJHJlc3BvbmRlcjM0IiwgIl90aGlzJHJlc3BvbmRlcjM1IiwgImluc2VydEZyb21ZYW5rIiwgImluc2VydExpbmsiLCAiaW5zZXJ0T3JkZXJlZExpc3QiLCAiaW5zZXJ0UGFyYWdyYXBoIiwgIl90aGlzJHJlc3BvbmRlcjM2IiwgImluc2VydFJlcGxhY2VtZW50VGV4dCIsICJyZXBsYWNlbWVudCIsICJfdGhpcyRldmVudCRkYXRhVHJhbnMiLCAiaW5zZXJ0VHJhbnNwb3NlIiwgImluc2VydFVub3JkZXJlZExpc3QiLCAic3RhdGljUmFuZ2UiLCAiX2V2ZW50JGRhdGFUcmFuc2ZlciRmIiwgImF0dHJpYnV0ZUJ1dHRvblNlbGVjdG9yIiwgImFjdGlvbkJ1dHRvblNlbGVjdG9yIiwgInRvb2xiYXJCdXR0b25TZWxlY3RvciIsICJkaWFsb2dTZWxlY3RvciIsICJhY3RpdmVEaWFsb2dTZWxlY3RvciIsICJkaWFsb2dCdXR0b25TZWxlY3RvciIsICJkaWFsb2dJbnB1dFNlbGVjdG9yIiwgImdldElucHV0Rm9yRGlhbG9nIiwgImdldEF0dHJpYnV0ZU5hbWUiLCAiZ2V0QWN0aW9uTmFtZSIsICJUb29sYmFyQ29udHJvbGxlciIsICJkaWRDbGlja0F0dHJpYnV0ZUJ1dHRvbiIsICJkaWRDbGlja0RpYWxvZ0J1dHRvbiIsICJkaWRLZXlEb3duRGlhbG9nSW5wdXQiLCAiYWN0aW9ucyIsICJyZXNldERpYWxvZ0lucHV0cyIsICJ0b29sYmFyRGlkQ2xpY2tCdXR0b24iLCAiYWN0aW9uTmFtZSIsICJnZXREaWFsb2ciLCAidG9nZ2xlRGlhbG9nIiwgInRvb2xiYXJEaWRJbnZva2VBY3Rpb24iLCAidG9vbGJhckRpZFRvZ2dsZUF0dHJpYnV0ZSIsICJyZWZyZXNoQXR0cmlidXRlQnV0dG9ucyIsICJkaWFsb2dFbGVtZW50IiwgImRpYWxvZyIsICJoaWRlRGlhbG9nIiwgInVwZGF0ZUFjdGlvbnMiLCAicmVmcmVzaEFjdGlvbkJ1dHRvbnMiLCAiZWFjaEFjdGlvbkJ1dHRvbiIsICJkaXNhYmxlZCIsICJ1cGRhdGVBdHRyaWJ1dGVzIiwgImVhY2hBdHRyaWJ1dGVCdXR0b24iLCAiZGlhbG9nSXNWaXNpYmxlIiwgImFwcGx5S2V5Ym9hcmRDb21tYW5kIiwgImtleVN0cmluZyIsICJidXR0b24iLCAiYnV0dG9uS2V5cyIsICJkaWFsb2dOYW1lIiwgInNob3dEaWFsb2ciLCAidG9vbGJhcldpbGxTaG93RGlhbG9nIiwgImRpc2FibGVkSW5wdXQiLCAidG9vbGJhckRpZFNob3dEaWFsb2ciLCAid2lsbFZhbGlkYXRlIiwgInNldEN1c3RvbVZhbGlkaXR5IiwgImNoZWNrVmFsaWRpdHkiLCAiaXNTYWZlQXR0cmlidXRlIiwgInRvb2xiYXJEaWRVcGRhdGVBdHRyaWJ1dGUiLCAiaXNWYWxpZEF0dHJpYnV0ZSIsICJ0b29sYmFyRGlkUmVtb3ZlQXR0cmlidXRlIiwgInRvb2xiYXJEaWRIaWRlRGlhbG9nIiwgIkVkaXRvckNvbnRyb2xsZXIiLCAiZWRpdG9yRWxlbWVudCIsICJjb21wb3NpdGlvbkNvbnRyb2xsZXIiLCAidG9vbGJhckNvbnRyb2xsZXIiLCAidG9vbGJhckVsZW1lbnQiLCAiZWRpdG9yIiwgIm5vdGlmeUVkaXRvckVsZW1lbnQiLCAiaGFuZGxpbmdJbnB1dCIsICJ1cGRhdGVDdXJyZW50QWN0aW9ucyIsICJwYXN0aW5nIiwgInBhc3RlZFJhbmdlIiwgImF0dGFjaG1lbnRMb2NhdGlvblJhbmdlIiwgImxvYWRpbmdTbmFwc2hvdCIsICJpc0ZvY3VzZWQiLCAicmVxdWVzdGVkTG9jYXRpb25SYW5nZSIsICJjb21wb3NpdGlvblJldmlzaW9uV2hlbkxvY2F0aW9uUmFuZ2VSZXF1ZXN0ZWQiLCAicmVuZGVyZWRDb21wb3NpdGlvblJldmlzaW9uIiwgInJ1bkVkaXRvckZpbHRlcnMiLCAiaXNGb2N1c2VkSW52aXNpYmx5IiwgInJlcXVlc3RlZFJlbmRlciIsICJyZWNvcmRUeXBpbmdVbmRvRW50cnkiLCAicmVjb3JkRm9ybWF0dGluZ1VuZG9FbnRyeSIsICJsb2NhdGlvblJhbmdlQmVmb3JlRHJhZyIsICJpbnZva2luZ0VsZW1lbnQiLCAiaW52b2tlQWN0aW9uIiwgInNlbGVjdGlvbkZyb3plbiIsICJjYW5JbnZva2VBY3Rpb24iLCAiYWN0aW9uSXNFeHRlcm5hbCIsICJfdGhpcyRhY3Rpb25zJGFjdGlvbk4iLCAiX3RoaXMkYWN0aW9ucyRhY3Rpb25OMiIsICJnZXRDdXJyZW50QWN0aW9ucyIsICJjdXJyZW50QWN0aW9ucyIsICJzbmFwc2hvdHNBcmVFcXVhbCIsICJ1cGRhdGVJbnB1dEVsZW1lbnQiLCAic2VyaWFsaXplciIsICJzZXRGb3JtVmFsdWUiLCAibWVzc2FnZSIsICJkb2N1bWVudENoYW5nZWRTaW5jZUxhc3RSZW5kZXIiLCAibm90aWZ5IiwgImdldFVuZG9Db250ZXh0IiwgImdldExvY2F0aW9uQ29udGV4dCIsICJnZXRUaW1lQ29udGV4dCIsICJEYXRlIiwgImdldFRpbWUiLCAiX3RoaXMkZWRpdG9yRWxlbWVudCRvIiwgIm93bmVyRG9jdW1lbnQiLCAiQnIiLCAiS24iLCAiR24iLCAiWW4iLCAiTXIiLCAic3IiLCAiaHIiLCAiYnIiLCAiUHIiLCAiX3IiLCAiUW4iLCAiT3QiLCAianIiLCAiZXIiLCAiamkiLCAiVHJpeFRvb2xiYXJFbGVtZW50IiwgImNvbm5lY3RlZENhbGxiYWNrIiwgIm1ha2VFZGl0YWJsZSIsICJjb25maWd1cmVDb250ZW50RWRpdGFibGUiLCAiZGlzYWJsZU9iamVjdFJlc2l6aW5nIiwgInNldERlZmF1bHRQYXJhZ3JhcGhTZXBhcmF0b3IiLCAiX2RvY3VtZW50JHF1ZXJ5Q29tbWFuIiwgIl9kb2N1bWVudCIsICJxdWVyeUNvbW1hbmRTdXBwb3J0ZWQiLCAiZXhlY0NvbW1hbmQiLCAiX2RvY3VtZW50JHF1ZXJ5Q29tbWFuMiIsICJfZG9jdW1lbnQyIiwgImN1cnNvclRhcmdldFN0eWxlcyIsICJfaW50ZXJuYWxzIiwgIldlYWtNYXAiLCAiX3ZhbGlkYXRlIiwgIldlYWtTZXQiLCAiRWxlbWVudEludGVybmFsc0RlbGVnYXRlIiwgIl9jbGFzc1ByaXZhdGVGaWVsZEluaXRTcGVjIiwgIndyaXRhYmxlIiwgIl9jbGFzc1ByaXZhdGVGaWVsZFNldCIsICJhdHRhY2hJbnRlcm5hbHMiLCAiX2NsYXNzUHJpdmF0ZU1ldGhvZEdldCIsICJfdmFsaWRhdGUyIiwgImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwgImxhYmVscyIsICJfY2xhc3NQcml2YXRlRmllbGRHZXQiLCAiX3RoaXMkZWxlbWVudCRpbnB1dEVsIiwgImlucHV0RWxlbWVudCIsICJ0b2dnbGVBdHRyaWJ1dGUiLCAicmVxdWlyZWQiLCAidmFsaWRpdHkiLCAidmFsaWRhdGlvbk1lc3NhZ2UiLCAicmVwb3J0VmFsaWRpdHkiLCAiY3VzdG9tVmFsaWRhdGlvbk1lc3NhZ2UiLCAidmFsdWVNaXNzaW5nIiwgImN1c3RvbUVycm9yIiwgInNldFZhbGlkaXR5IiwgIl9mb2N1c0hhbmRsZXIiLCAiX3Jlc2V0QnViYmxlZCIsICJfY2xpY2tCdWJibGVkIiwgIkxlZ2FjeURlbGVnYXRlIiwgImNvbnRhaW5zIiwgImxhYmVsIiwgInRleHRzIiwgIl9jbGFzc1ByaXZhdGVGaWVsZEdldDIiLCAiY29uc29sZSIsICJ3YXJuIiwgIl9kZWxlZ2F0ZSIsICJUcml4RWRpdG9yRWxlbWVudCIsICJmb3JtQXNzb2NpYXRlZCIsICJsb2NhbE5hbWUiLCAiX3RoaXMkb3duZXJEb2N1bWVudCIsICJ0b29sYmFySWQiLCAiX3RoaXMkaW5wdXRFbGVtZW50IiwgIl90aGlzJG93bmVyRG9jdW1lbnQyIiwgImlucHV0SWQiLCAibmV4dEVsZW1lbnRTaWJsaW5nIiwgIl90aGlzJGVkaXRvckNvbnRyb2xsZSIsICJlZGl0b3JDb250cm9sbGVyIiwgIl90aGlzJGlucHV0RWxlbWVudDIiLCAiX3RoaXMkaW5wdXRFbGVtZW50MyIsICJkZWZhdWx0VmFsdWUiLCAiX3RoaXMkZWRpdG9yIiwgIl90aGlzJGVkaXRvckNvbnRyb2xsZTIiLCAiZm9ybURpc2FibGVkQ2FsbGJhY2siLCAiZm9ybVJlc2V0Q2FsbGJhY2siLCAiVHJpeCIsICJWRVJTSU9OIiwgInZlcnNpb24iLCAiY29yZSIsICJtb2RlbHMiLCAiY29udHJvbGxlcnMiLCAib2JzZXJ2ZXJzIiwgImN1c3RvbUVsZW1lbnRzIiwgImRlZmluZSIsICJjb252ZXJ0ZXIiLCAic2hvd2Rvd24iLCAidHVybmRvd25TZXJ2aWNlIiwgInR1cm5kb3duX2Jyb3dzZXJfZXNfZGVmYXVsdCIsICJubyIsICJtYXJrZG93bl9kZWZhdWx0IiwgInRhcmdldE5vZGUiLCAiZWRpdG9yIiwgImlucHV0VGFyZ2V0IiwgImV2ZW50IiwgIm1hcmtkb3duIiwgIlMzVXBsb2FkZXIiLCAiZW50cmllcyIsICJvblZpZXdFcnJvciIsICJlbnRyeSIsICJ4aHIiLCAiZXZlbnQiLCAicGVyY2VudCIsICJ1cmwiLCAiczNfZGVmYXVsdCIsICJMb2NhbGVJbkxvY2FsU3RvcmFnZSIsICJsb2NhbGUiLCAibG9jYWxfbG9jYWxlX3N0b3JhZ2VfZGVmYXVsdCIsICJpbXBvcnRfZmxvd2JpdGVfcGhvZW5peCIsICJIb29rcyIsICJzb3J0YWJsZV9kZWZhdWx0IiwgIm1hcmtkb3duX2RlZmF1bHQiLCAibG9jYWxfbG9jYWxlX3N0b3JhZ2VfZGVmYXVsdCIsICJjc3JmVG9rZW4iLCAibGl2ZVNvY2tldCIsICJMaXZlU29ja2V0IiwgIlNvY2tldCIsICJzM19kZWZhdWx0IiwgInRvcGJhciIsICJfaW5mbyJdCn0K
