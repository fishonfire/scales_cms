(()=>{var Ic=Object.create;var Hu=Object.defineProperty;var Oc=Object.getOwnPropertyDescriptor;var Mc=Object.getOwnPropertyNames;var Nc=Object.getPrototypeOf,Bc=Object.prototype.hasOwnProperty;var Ha=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports);var Fc=(i,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of Mc(e))!Bc.call(i,r)&&r!==t&&Hu(i,r,{get:()=>e[r],enumerable:!(n=Oc(e,r))||n.enumerable});return i};var za=(i,e,t)=>(t=i!=null?Ic(Nc(i)):{},Fc(e||!i||!i.__esModule?Hu(t,"default",{value:i,enumerable:!0}):t,i));var xl=Ha((Tl,Is)=>{(function(i,e){"use strict";(function(){for(var y=0,d=["ms","moz","webkit","o"],g=0;g<d.length&&!i.requestAnimationFrame;++g)i.requestAnimationFrame=i[d[g]+"RequestAnimationFrame"],i.cancelAnimationFrame=i[d[g]+"CancelAnimationFrame"]||i[d[g]+"CancelRequestAnimationFrame"];i.requestAnimationFrame||(i.requestAnimationFrame=function(b,E){var P=new Date().getTime(),o=Math.max(0,16-(P-y)),h=i.setTimeout(function(){b(P+o)},o);return y=P+o,h}),i.cancelAnimationFrame||(i.cancelAnimationFrame=function(b){clearTimeout(b)})})();var t,n,r,s=null,a=null,u=null,c=function(y,d,g){y.addEventListener?y.addEventListener(d,g,!1):y.attachEvent?y.attachEvent("on"+d,g):y["on"+d]=g},v={autoRun:!0,barThickness:3,barColors:{0:"rgba(26,  188, 156, .9)",".25":"rgba(52,  152, 219, .9)",".50":"rgba(241, 196, 15,  .9)",".75":"rgba(230, 126, 34,  .9)","1.0":"rgba(211, 84,  0,   .9)"},shadowBlur:10,shadowColor:"rgba(0,   0,   0,   .6)",className:null},k=function(){t.width=i.innerWidth,t.height=v.barThickness*5;var y=t.getContext("2d");y.shadowBlur=v.shadowBlur,y.shadowColor=v.shadowColor;var d=y.createLinearGradient(0,0,t.width,0);for(var g in v.barColors)d.addColorStop(g,v.barColors[g]);y.lineWidth=v.barThickness,y.beginPath(),y.moveTo(0,v.barThickness/2),y.lineTo(Math.ceil(n*t.width),v.barThickness/2),y.strokeStyle=d,y.stroke()},A=function(){t=e.createElement("canvas");var y=t.style;y.position="fixed",y.top=y.left=y.right=y.margin=y.padding=0,y.zIndex=100001,y.display="none",v.className&&t.classList.add(v.className),e.body.appendChild(t),c(i,"resize",k)},N={config:function(y){for(var d in y)v.hasOwnProperty(d)&&(v[d]=y[d])},show:function(y){if(!r)if(y){if(u)return;u=setTimeout(()=>N.show(),y)}else r=!0,a!==null&&i.cancelAnimationFrame(a),t||A(),t.style.opacity=1,t.style.display="block",N.progress(0),v.autoRun&&function d(){s=i.requestAnimationFrame(d),N.progress("+"+.05*Math.pow(1-Math.sqrt(n),2))}()},progress:function(y){return typeof y>"u"||(typeof y=="string"&&(y=(y.indexOf("+")>=0||y.indexOf("-")>=0?n:0)+parseFloat(y)),n=y>1?1:y,k()),n},hide:function(){clearTimeout(u),u=null,r&&(r=!1,s!=null&&(i.cancelAnimationFrame(s),s=null),function y(){if(N.progress("+.1")>=1&&(t.style.opacity-=.05,t.style.opacity<=.05)){t.style.display="none",a=null;return}a=i.requestAnimationFrame(y)}())}};typeof Is=="object"&&typeof Is.exports=="object"?Is.exports=N:typeof define=="function"&&define.amd?define(function(){return N}):this.topbar=N}).call(Tl,window,document)});var nd=Ha((id,Gs)=>{(function(){function i(o){"use strict";var h={omitExtraWLInCodeBlocks:{defaultValue:!1,describe:"Omit the default extra whiteline added to code blocks",type:"boolean"},noHeaderId:{defaultValue:!1,describe:"Turn on/off generated header id",type:"boolean"},prefixHeaderId:{defaultValue:!1,describe:"Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",type:"string"},rawPrefixHeaderId:{defaultValue:!1,describe:'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',type:"boolean"},ghCompatibleHeaderId:{defaultValue:!1,describe:"Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)",type:"boolean"},rawHeaderId:{defaultValue:!1,describe:`Remove only spaces, ' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids`,type:"boolean"},headerLevelStart:{defaultValue:!1,describe:"The header blocks level start",type:"integer"},parseImgDimensions:{defaultValue:!1,describe:"Turn on/off image dimension parsing",type:"boolean"},simplifiedAutoLink:{defaultValue:!1,describe:"Turn on/off GFM autolink style",type:"boolean"},excludeTrailingPunctuationFromURLs:{defaultValue:!1,describe:"Excludes trailing punctuation from links generated with autoLinking",type:"boolean"},literalMidWordUnderscores:{defaultValue:!1,describe:"Parse midword underscores as literal underscores",type:"boolean"},literalMidWordAsterisks:{defaultValue:!1,describe:"Parse midword asterisks as literal asterisks",type:"boolean"},strikethrough:{defaultValue:!1,describe:"Turn on/off strikethrough support",type:"boolean"},tables:{defaultValue:!1,describe:"Turn on/off tables support",type:"boolean"},tablesHeaderId:{defaultValue:!1,describe:"Add an id to table headers",type:"boolean"},ghCodeBlocks:{defaultValue:!0,describe:"Turn on/off GFM fenced code blocks support",type:"boolean"},tasklists:{defaultValue:!1,describe:"Turn on/off GFM tasklist support",type:"boolean"},smoothLivePreview:{defaultValue:!1,describe:"Prevents weird effects in live previews due to incomplete input",type:"boolean"},smartIndentationFix:{defaultValue:!1,describe:"Tries to smartly fix indentation in es6 strings",type:"boolean"},disableForced4SpacesIndentedSublists:{defaultValue:!1,describe:"Disables the requirement of indenting nested sublists by 4 spaces",type:"boolean"},simpleLineBreaks:{defaultValue:!1,describe:"Parses simple line breaks as <br> (GFM Style)",type:"boolean"},requireSpaceBeforeHeadingText:{defaultValue:!1,describe:"Makes adding a space between `#` and the header text mandatory (GFM Style)",type:"boolean"},ghMentions:{defaultValue:!1,describe:"Enables github @mentions",type:"boolean"},ghMentionsLink:{defaultValue:"https://github.com/{u}",describe:"Changes the link generated by @mentions. Only applies if ghMentions option is enabled.",type:"string"},encodeEmails:{defaultValue:!0,describe:"Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities",type:"boolean"},openLinksInNewWindow:{defaultValue:!1,describe:"Open all links in new windows",type:"boolean"},backslashEscapesHTMLTags:{defaultValue:!1,describe:"Support for HTML Tag escaping. ex: <div>foo</div>",type:"boolean"},emoji:{defaultValue:!1,describe:"Enable emoji support. Ex: `this is a :smile: emoji`",type:"boolean"},underline:{defaultValue:!1,describe:"Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`",type:"boolean"},ellipsis:{defaultValue:!0,describe:"Replaces three dots with the ellipsis unicode character",type:"boolean"},completeHTMLDocument:{defaultValue:!1,describe:"Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags",type:"boolean"},metadata:{defaultValue:!1,describe:"Enable support for document metadata (defined at the top of the document between `\xAB\xAB\xAB` and `\xBB\xBB\xBB` or between `---` and `---`).",type:"boolean"},splitAdjacentBlockquotes:{defaultValue:!1,describe:"Split adjacent blockquote blocks",type:"boolean"}};if(o===!1)return JSON.parse(JSON.stringify(h));var f={};for(var _ in h)h.hasOwnProperty(_)&&(f[_]=h[_].defaultValue);return f}function e(){"use strict";var o=i(!0),h={};for(var f in o)o.hasOwnProperty(f)&&(h[f]=!0);return h}var t={},n={},r={},s=i(!0),a="vanilla",u={github:{omitExtraWLInCodeBlocks:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,disableForced4SpacesIndentedSublists:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghCompatibleHeaderId:!0,ghMentions:!0,backslashEscapesHTMLTags:!0,emoji:!0,splitAdjacentBlockquotes:!0},original:{noHeaderId:!0,ghCodeBlocks:!1},ghost:{omitExtraWLInCodeBlocks:!0,parseImgDimensions:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,smoothLivePreview:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghMentions:!1,encodeEmails:!0},vanilla:i(!0),allOn:e()};t.helper={},t.extensions={},t.setOption=function(o,h){"use strict";return s[o]=h,this},t.getOption=function(o){"use strict";return s[o]},t.getOptions=function(){"use strict";return s},t.resetOptions=function(){"use strict";s=i(!0)},t.setFlavor=function(o){"use strict";if(!u.hasOwnProperty(o))throw Error(o+" flavor was not found");t.resetOptions();var h=u[o];a=o;for(var f in h)h.hasOwnProperty(f)&&(s[f]=h[f])},t.getFlavor=function(){"use strict";return a},t.getFlavorOptions=function(o){"use strict";if(u.hasOwnProperty(o))return u[o]},t.getDefaultOptions=function(o){"use strict";return i(o)},t.subParser=function(o,h){"use strict";if(t.helper.isString(o))if(typeof h<"u")n[o]=h;else{if(n.hasOwnProperty(o))return n[o];throw Error("SubParser named "+o+" not registered!")}},t.extension=function(o,h){"use strict";if(!t.helper.isString(o))throw Error("Extension 'name' must be a string");if(o=t.helper.stdExtName(o),t.helper.isUndefined(h)){if(!r.hasOwnProperty(o))throw Error("Extension named "+o+" is not registered!");return r[o]}else{typeof h=="function"&&(h=h()),t.helper.isArray(h)||(h=[h]);var f=c(h,o);if(f.valid)r[o]=h;else throw Error(f.error)}},t.getAllExtensions=function(){"use strict";return r},t.removeExtension=function(o){"use strict";delete r[o]},t.resetExtensions=function(){"use strict";r={}};function c(o,h){"use strict";var f=h?"Error in "+h+" extension->":"Error in unnamed extension",_={valid:!0,error:""};t.helper.isArray(o)||(o=[o]);for(var C=0;C<o.length;++C){var I=f+" sub-extension "+C+": ",L=o[C];if(typeof L!="object")return _.valid=!1,_.error=I+"must be an object, but "+typeof L+" given",_;if(!t.helper.isString(L.type))return _.valid=!1,_.error=I+'property "type" must be a string, but '+typeof L.type+" given",_;var F=L.type=L.type.toLowerCase();if(F==="language"&&(F=L.type="lang"),F==="html"&&(F=L.type="output"),F!=="lang"&&F!=="output"&&F!=="listener")return _.valid=!1,_.error=I+"type "+F+' is not recognized. Valid values: "lang/language", "output/html" or "listener"',_;if(F==="listener"){if(t.helper.isUndefined(L.listeners))return _.valid=!1,_.error=I+'. Extensions of type "listener" must have a property called "listeners"',_}else if(t.helper.isUndefined(L.filter)&&t.helper.isUndefined(L.regex))return _.valid=!1,_.error=I+F+' extensions must define either a "regex" property or a "filter" method',_;if(L.listeners){if(typeof L.listeners!="object")return _.valid=!1,_.error=I+'"listeners" property must be an object but '+typeof L.listeners+" given",_;for(var K in L.listeners)if(L.listeners.hasOwnProperty(K)&&typeof L.listeners[K]!="function")return _.valid=!1,_.error=I+'"listeners" property must be an hash of [event name]: [callback]. listeners.'+K+" must be a function but "+typeof L.listeners[K]+" given",_}if(L.filter){if(typeof L.filter!="function")return _.valid=!1,_.error=I+'"filter" must be a function, but '+typeof L.filter+" given",_}else if(L.regex){if(t.helper.isString(L.regex)&&(L.regex=new RegExp(L.regex,"g")),!(L.regex instanceof RegExp))return _.valid=!1,_.error=I+'"regex" property must either be a string or a RegExp object, but '+typeof L.regex+" given",_;if(t.helper.isUndefined(L.replace))return _.valid=!1,_.error=I+'"regex" extensions must implement a replace string or function',_}}return _}t.validateExtension=function(o){"use strict";var h=c(o,null);return h.valid?!0:(console.warn(h.error),!1)},t.hasOwnProperty("helper")||(t.helper={}),t.helper.isString=function(o){"use strict";return typeof o=="string"||o instanceof String},t.helper.isFunction=function(o){"use strict";var h={};return o&&h.toString.call(o)==="[object Function]"},t.helper.isArray=function(o){"use strict";return Array.isArray(o)},t.helper.isUndefined=function(o){"use strict";return typeof o>"u"},t.helper.forEach=function(o,h){"use strict";if(t.helper.isUndefined(o))throw new Error("obj param is required");if(t.helper.isUndefined(h))throw new Error("callback param is required");if(!t.helper.isFunction(h))throw new Error("callback param must be a function/closure");if(typeof o.forEach=="function")o.forEach(h);else if(t.helper.isArray(o))for(var f=0;f<o.length;f++)h(o[f],f,o);else if(typeof o=="object")for(var _ in o)o.hasOwnProperty(_)&&h(o[_],_,o);else throw new Error("obj does not seem to be an array or an iterable object")},t.helper.stdExtName=function(o){"use strict";return o.replace(/[_?*+\/\\.^-]/g,"").replace(/\s/g,"").toLowerCase()};function v(o,h){"use strict";var f=h.charCodeAt(0);return"\xA8E"+f+"E"}t.helper.escapeCharactersCallback=v,t.helper.escapeCharacters=function(o,h,f){"use strict";var _="(["+h.replace(/([\[\]\\])/g,"\\$1")+"])";f&&(_="\\\\"+_);var C=new RegExp(_,"g");return o=o.replace(C,v),o},t.helper.unescapeHTMLEntities=function(o){"use strict";return o.replace(/&quot;/g,'"').replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")};var k=function(o,h,f,_){"use strict";var C=_||"",I=C.indexOf("g")>-1,L=new RegExp(h+"|"+f,"g"+C.replace(/g/g,"")),F=new RegExp(h,C.replace(/g/g,"")),K=[],W,q,G,x,U;do for(W=0;G=L.exec(o);)if(F.test(G[0]))W++||(q=L.lastIndex,x=q-G[0].length);else if(W&&!--W){U=G.index+G[0].length;var z={left:{start:x,end:q},match:{start:q,end:G.index},right:{start:G.index,end:U},wholeMatch:{start:x,end:U}};if(K.push(z),!I)return K}while(W&&(L.lastIndex=q));return K};t.helper.matchRecursiveRegExp=function(o,h,f,_){"use strict";for(var C=k(o,h,f,_),I=[],L=0;L<C.length;++L)I.push([o.slice(C[L].wholeMatch.start,C[L].wholeMatch.end),o.slice(C[L].match.start,C[L].match.end),o.slice(C[L].left.start,C[L].left.end),o.slice(C[L].right.start,C[L].right.end)]);return I},t.helper.replaceRecursiveRegExp=function(o,h,f,_,C){"use strict";if(!t.helper.isFunction(h)){var I=h;h=function(){return I}}var L=k(o,f,_,C),F=o,K=L.length;if(K>0){var W=[];L[0].wholeMatch.start!==0&&W.push(o.slice(0,L[0].wholeMatch.start));for(var q=0;q<K;++q)W.push(h(o.slice(L[q].wholeMatch.start,L[q].wholeMatch.end),o.slice(L[q].match.start,L[q].match.end),o.slice(L[q].left.start,L[q].left.end),o.slice(L[q].right.start,L[q].right.end))),q<K-1&&W.push(o.slice(L[q].wholeMatch.end,L[q+1].wholeMatch.start));L[K-1].wholeMatch.end<o.length&&W.push(o.slice(L[K-1].wholeMatch.end)),F=W.join("")}return F},t.helper.regexIndexOf=function(o,h,f){"use strict";if(!t.helper.isString(o))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";if(!(h instanceof RegExp))throw"InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";var _=o.substring(f||0).search(h);return _>=0?_+(f||0):_},t.helper.splitAtIndex=function(o,h){"use strict";if(!t.helper.isString(o))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";return[o.substring(0,h),o.substring(h)]},t.helper.encodeEmailAddress=function(o){"use strict";var h=[function(f){return"&#"+f.charCodeAt(0)+";"},function(f){return"&#x"+f.charCodeAt(0).toString(16)+";"},function(f){return f}];return o=o.replace(/./g,function(f){if(f==="@")f=h[Math.floor(Math.random()*2)](f);else{var _=Math.random();f=_>.9?h[2](f):_>.45?h[1](f):h[0](f)}return f}),o},t.helper.padEnd=function(h,f,_){"use strict";return f=f>>0,_=String(_||" "),h.length>f?String(h):(f=f-h.length,f>_.length&&(_+=_.repeat(f/_.length)),String(h)+_.slice(0,f))},typeof console>"u"&&(console={warn:function(o){"use strict";alert(o)},log:function(o){"use strict";alert(o)},error:function(o){"use strict";throw o}}),t.helper.regexes={asteriskDashAndColon:/([*_:~])/g},t.helper.emojis={"+1":"\u{1F44D}","-1":"\u{1F44E}",100:"\u{1F4AF}",1234:"\u{1F522}","1st_place_medal":"\u{1F947}","2nd_place_medal":"\u{1F948}","3rd_place_medal":"\u{1F949}","8ball":"\u{1F3B1}",a:"\u{1F170}\uFE0F",ab:"\u{1F18E}",abc:"\u{1F524}",abcd:"\u{1F521}",accept:"\u{1F251}",aerial_tramway:"\u{1F6A1}",airplane:"\u2708\uFE0F",alarm_clock:"\u23F0",alembic:"\u2697\uFE0F",alien:"\u{1F47D}",ambulance:"\u{1F691}",amphora:"\u{1F3FA}",anchor:"\u2693\uFE0F",angel:"\u{1F47C}",anger:"\u{1F4A2}",angry:"\u{1F620}",anguished:"\u{1F627}",ant:"\u{1F41C}",apple:"\u{1F34E}",aquarius:"\u2652\uFE0F",aries:"\u2648\uFE0F",arrow_backward:"\u25C0\uFE0F",arrow_double_down:"\u23EC",arrow_double_up:"\u23EB",arrow_down:"\u2B07\uFE0F",arrow_down_small:"\u{1F53D}",arrow_forward:"\u25B6\uFE0F",arrow_heading_down:"\u2935\uFE0F",arrow_heading_up:"\u2934\uFE0F",arrow_left:"\u2B05\uFE0F",arrow_lower_left:"\u2199\uFE0F",arrow_lower_right:"\u2198\uFE0F",arrow_right:"\u27A1\uFE0F",arrow_right_hook:"\u21AA\uFE0F",arrow_up:"\u2B06\uFE0F",arrow_up_down:"\u2195\uFE0F",arrow_up_small:"\u{1F53C}",arrow_upper_left:"\u2196\uFE0F",arrow_upper_right:"\u2197\uFE0F",arrows_clockwise:"\u{1F503}",arrows_counterclockwise:"\u{1F504}",art:"\u{1F3A8}",articulated_lorry:"\u{1F69B}",artificial_satellite:"\u{1F6F0}",astonished:"\u{1F632}",athletic_shoe:"\u{1F45F}",atm:"\u{1F3E7}",atom_symbol:"\u269B\uFE0F",avocado:"\u{1F951}",b:"\u{1F171}\uFE0F",baby:"\u{1F476}",baby_bottle:"\u{1F37C}",baby_chick:"\u{1F424}",baby_symbol:"\u{1F6BC}",back:"\u{1F519}",bacon:"\u{1F953}",badminton:"\u{1F3F8}",baggage_claim:"\u{1F6C4}",baguette_bread:"\u{1F956}",balance_scale:"\u2696\uFE0F",balloon:"\u{1F388}",ballot_box:"\u{1F5F3}",ballot_box_with_check:"\u2611\uFE0F",bamboo:"\u{1F38D}",banana:"\u{1F34C}",bangbang:"\u203C\uFE0F",bank:"\u{1F3E6}",bar_chart:"\u{1F4CA}",barber:"\u{1F488}",baseball:"\u26BE\uFE0F",basketball:"\u{1F3C0}",basketball_man:"\u26F9\uFE0F",basketball_woman:"\u26F9\uFE0F&zwj;\u2640\uFE0F",bat:"\u{1F987}",bath:"\u{1F6C0}",bathtub:"\u{1F6C1}",battery:"\u{1F50B}",beach_umbrella:"\u{1F3D6}",bear:"\u{1F43B}",bed:"\u{1F6CF}",bee:"\u{1F41D}",beer:"\u{1F37A}",beers:"\u{1F37B}",beetle:"\u{1F41E}",beginner:"\u{1F530}",bell:"\u{1F514}",bellhop_bell:"\u{1F6CE}",bento:"\u{1F371}",biking_man:"\u{1F6B4}",bike:"\u{1F6B2}",biking_woman:"\u{1F6B4}&zwj;\u2640\uFE0F",bikini:"\u{1F459}",biohazard:"\u2623\uFE0F",bird:"\u{1F426}",birthday:"\u{1F382}",black_circle:"\u26AB\uFE0F",black_flag:"\u{1F3F4}",black_heart:"\u{1F5A4}",black_joker:"\u{1F0CF}",black_large_square:"\u2B1B\uFE0F",black_medium_small_square:"\u25FE\uFE0F",black_medium_square:"\u25FC\uFE0F",black_nib:"\u2712\uFE0F",black_small_square:"\u25AA\uFE0F",black_square_button:"\u{1F532}",blonde_man:"\u{1F471}",blonde_woman:"\u{1F471}&zwj;\u2640\uFE0F",blossom:"\u{1F33C}",blowfish:"\u{1F421}",blue_book:"\u{1F4D8}",blue_car:"\u{1F699}",blue_heart:"\u{1F499}",blush:"\u{1F60A}",boar:"\u{1F417}",boat:"\u26F5\uFE0F",bomb:"\u{1F4A3}",book:"\u{1F4D6}",bookmark:"\u{1F516}",bookmark_tabs:"\u{1F4D1}",books:"\u{1F4DA}",boom:"\u{1F4A5}",boot:"\u{1F462}",bouquet:"\u{1F490}",bowing_man:"\u{1F647}",bow_and_arrow:"\u{1F3F9}",bowing_woman:"\u{1F647}&zwj;\u2640\uFE0F",bowling:"\u{1F3B3}",boxing_glove:"\u{1F94A}",boy:"\u{1F466}",bread:"\u{1F35E}",bride_with_veil:"\u{1F470}",bridge_at_night:"\u{1F309}",briefcase:"\u{1F4BC}",broken_heart:"\u{1F494}",bug:"\u{1F41B}",building_construction:"\u{1F3D7}",bulb:"\u{1F4A1}",bullettrain_front:"\u{1F685}",bullettrain_side:"\u{1F684}",burrito:"\u{1F32F}",bus:"\u{1F68C}",business_suit_levitating:"\u{1F574}",busstop:"\u{1F68F}",bust_in_silhouette:"\u{1F464}",busts_in_silhouette:"\u{1F465}",butterfly:"\u{1F98B}",cactus:"\u{1F335}",cake:"\u{1F370}",calendar:"\u{1F4C6}",call_me_hand:"\u{1F919}",calling:"\u{1F4F2}",camel:"\u{1F42B}",camera:"\u{1F4F7}",camera_flash:"\u{1F4F8}",camping:"\u{1F3D5}",cancer:"\u264B\uFE0F",candle:"\u{1F56F}",candy:"\u{1F36C}",canoe:"\u{1F6F6}",capital_abcd:"\u{1F520}",capricorn:"\u2651\uFE0F",car:"\u{1F697}",card_file_box:"\u{1F5C3}",card_index:"\u{1F4C7}",card_index_dividers:"\u{1F5C2}",carousel_horse:"\u{1F3A0}",carrot:"\u{1F955}",cat:"\u{1F431}",cat2:"\u{1F408}",cd:"\u{1F4BF}",chains:"\u26D3",champagne:"\u{1F37E}",chart:"\u{1F4B9}",chart_with_downwards_trend:"\u{1F4C9}",chart_with_upwards_trend:"\u{1F4C8}",checkered_flag:"\u{1F3C1}",cheese:"\u{1F9C0}",cherries:"\u{1F352}",cherry_blossom:"\u{1F338}",chestnut:"\u{1F330}",chicken:"\u{1F414}",children_crossing:"\u{1F6B8}",chipmunk:"\u{1F43F}",chocolate_bar:"\u{1F36B}",christmas_tree:"\u{1F384}",church:"\u26EA\uFE0F",cinema:"\u{1F3A6}",circus_tent:"\u{1F3AA}",city_sunrise:"\u{1F307}",city_sunset:"\u{1F306}",cityscape:"\u{1F3D9}",cl:"\u{1F191}",clamp:"\u{1F5DC}",clap:"\u{1F44F}",clapper:"\u{1F3AC}",classical_building:"\u{1F3DB}",clinking_glasses:"\u{1F942}",clipboard:"\u{1F4CB}",clock1:"\u{1F550}",clock10:"\u{1F559}",clock1030:"\u{1F565}",clock11:"\u{1F55A}",clock1130:"\u{1F566}",clock12:"\u{1F55B}",clock1230:"\u{1F567}",clock130:"\u{1F55C}",clock2:"\u{1F551}",clock230:"\u{1F55D}",clock3:"\u{1F552}",clock330:"\u{1F55E}",clock4:"\u{1F553}",clock430:"\u{1F55F}",clock5:"\u{1F554}",clock530:"\u{1F560}",clock6:"\u{1F555}",clock630:"\u{1F561}",clock7:"\u{1F556}",clock730:"\u{1F562}",clock8:"\u{1F557}",clock830:"\u{1F563}",clock9:"\u{1F558}",clock930:"\u{1F564}",closed_book:"\u{1F4D5}",closed_lock_with_key:"\u{1F510}",closed_umbrella:"\u{1F302}",cloud:"\u2601\uFE0F",cloud_with_lightning:"\u{1F329}",cloud_with_lightning_and_rain:"\u26C8",cloud_with_rain:"\u{1F327}",cloud_with_snow:"\u{1F328}",clown_face:"\u{1F921}",clubs:"\u2663\uFE0F",cocktail:"\u{1F378}",coffee:"\u2615\uFE0F",coffin:"\u26B0\uFE0F",cold_sweat:"\u{1F630}",comet:"\u2604\uFE0F",computer:"\u{1F4BB}",computer_mouse:"\u{1F5B1}",confetti_ball:"\u{1F38A}",confounded:"\u{1F616}",confused:"\u{1F615}",congratulations:"\u3297\uFE0F",construction:"\u{1F6A7}",construction_worker_man:"\u{1F477}",construction_worker_woman:"\u{1F477}&zwj;\u2640\uFE0F",control_knobs:"\u{1F39B}",convenience_store:"\u{1F3EA}",cookie:"\u{1F36A}",cool:"\u{1F192}",policeman:"\u{1F46E}",copyright:"\xA9\uFE0F",corn:"\u{1F33D}",couch_and_lamp:"\u{1F6CB}",couple:"\u{1F46B}",couple_with_heart_woman_man:"\u{1F491}",couple_with_heart_man_man:"\u{1F468}&zwj;\u2764\uFE0F&zwj;\u{1F468}",couple_with_heart_woman_woman:"\u{1F469}&zwj;\u2764\uFE0F&zwj;\u{1F469}",couplekiss_man_man:"\u{1F468}&zwj;\u2764\uFE0F&zwj;\u{1F48B}&zwj;\u{1F468}",couplekiss_man_woman:"\u{1F48F}",couplekiss_woman_woman:"\u{1F469}&zwj;\u2764\uFE0F&zwj;\u{1F48B}&zwj;\u{1F469}",cow:"\u{1F42E}",cow2:"\u{1F404}",cowboy_hat_face:"\u{1F920}",crab:"\u{1F980}",crayon:"\u{1F58D}",credit_card:"\u{1F4B3}",crescent_moon:"\u{1F319}",cricket:"\u{1F3CF}",crocodile:"\u{1F40A}",croissant:"\u{1F950}",crossed_fingers:"\u{1F91E}",crossed_flags:"\u{1F38C}",crossed_swords:"\u2694\uFE0F",crown:"\u{1F451}",cry:"\u{1F622}",crying_cat_face:"\u{1F63F}",crystal_ball:"\u{1F52E}",cucumber:"\u{1F952}",cupid:"\u{1F498}",curly_loop:"\u27B0",currency_exchange:"\u{1F4B1}",curry:"\u{1F35B}",custard:"\u{1F36E}",customs:"\u{1F6C3}",cyclone:"\u{1F300}",dagger:"\u{1F5E1}",dancer:"\u{1F483}",dancing_women:"\u{1F46F}",dancing_men:"\u{1F46F}&zwj;\u2642\uFE0F",dango:"\u{1F361}",dark_sunglasses:"\u{1F576}",dart:"\u{1F3AF}",dash:"\u{1F4A8}",date:"\u{1F4C5}",deciduous_tree:"\u{1F333}",deer:"\u{1F98C}",department_store:"\u{1F3EC}",derelict_house:"\u{1F3DA}",desert:"\u{1F3DC}",desert_island:"\u{1F3DD}",desktop_computer:"\u{1F5A5}",male_detective:"\u{1F575}\uFE0F",diamond_shape_with_a_dot_inside:"\u{1F4A0}",diamonds:"\u2666\uFE0F",disappointed:"\u{1F61E}",disappointed_relieved:"\u{1F625}",dizzy:"\u{1F4AB}",dizzy_face:"\u{1F635}",do_not_litter:"\u{1F6AF}",dog:"\u{1F436}",dog2:"\u{1F415}",dollar:"\u{1F4B5}",dolls:"\u{1F38E}",dolphin:"\u{1F42C}",door:"\u{1F6AA}",doughnut:"\u{1F369}",dove:"\u{1F54A}",dragon:"\u{1F409}",dragon_face:"\u{1F432}",dress:"\u{1F457}",dromedary_camel:"\u{1F42A}",drooling_face:"\u{1F924}",droplet:"\u{1F4A7}",drum:"\u{1F941}",duck:"\u{1F986}",dvd:"\u{1F4C0}","e-mail":"\u{1F4E7}",eagle:"\u{1F985}",ear:"\u{1F442}",ear_of_rice:"\u{1F33E}",earth_africa:"\u{1F30D}",earth_americas:"\u{1F30E}",earth_asia:"\u{1F30F}",egg:"\u{1F95A}",eggplant:"\u{1F346}",eight_pointed_black_star:"\u2734\uFE0F",eight_spoked_asterisk:"\u2733\uFE0F",electric_plug:"\u{1F50C}",elephant:"\u{1F418}",email:"\u2709\uFE0F",end:"\u{1F51A}",envelope_with_arrow:"\u{1F4E9}",euro:"\u{1F4B6}",european_castle:"\u{1F3F0}",european_post_office:"\u{1F3E4}",evergreen_tree:"\u{1F332}",exclamation:"\u2757\uFE0F",expressionless:"\u{1F611}",eye:"\u{1F441}",eye_speech_bubble:"\u{1F441}&zwj;\u{1F5E8}",eyeglasses:"\u{1F453}",eyes:"\u{1F440}",face_with_head_bandage:"\u{1F915}",face_with_thermometer:"\u{1F912}",fist_oncoming:"\u{1F44A}",factory:"\u{1F3ED}",fallen_leaf:"\u{1F342}",family_man_woman_boy:"\u{1F46A}",family_man_boy:"\u{1F468}&zwj;\u{1F466}",family_man_boy_boy:"\u{1F468}&zwj;\u{1F466}&zwj;\u{1F466}",family_man_girl:"\u{1F468}&zwj;\u{1F467}",family_man_girl_boy:"\u{1F468}&zwj;\u{1F467}&zwj;\u{1F466}",family_man_girl_girl:"\u{1F468}&zwj;\u{1F467}&zwj;\u{1F467}",family_man_man_boy:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F466}",family_man_man_boy_boy:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F466}&zwj;\u{1F466}",family_man_man_girl:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}",family_man_man_girl_boy:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}&zwj;\u{1F466}",family_man_man_girl_girl:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}&zwj;\u{1F467}",family_man_woman_boy_boy:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",family_man_woman_girl:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}",family_man_woman_girl_boy:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",family_man_woman_girl_girl:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",family_woman_boy:"\u{1F469}&zwj;\u{1F466}",family_woman_boy_boy:"\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",family_woman_girl:"\u{1F469}&zwj;\u{1F467}",family_woman_girl_boy:"\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",family_woman_girl_girl:"\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",family_woman_woman_boy:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F466}",family_woman_woman_boy_boy:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",family_woman_woman_girl:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}",family_woman_woman_girl_boy:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",family_woman_woman_girl_girl:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",fast_forward:"\u23E9",fax:"\u{1F4E0}",fearful:"\u{1F628}",feet:"\u{1F43E}",female_detective:"\u{1F575}\uFE0F&zwj;\u2640\uFE0F",ferris_wheel:"\u{1F3A1}",ferry:"\u26F4",field_hockey:"\u{1F3D1}",file_cabinet:"\u{1F5C4}",file_folder:"\u{1F4C1}",film_projector:"\u{1F4FD}",film_strip:"\u{1F39E}",fire:"\u{1F525}",fire_engine:"\u{1F692}",fireworks:"\u{1F386}",first_quarter_moon:"\u{1F313}",first_quarter_moon_with_face:"\u{1F31B}",fish:"\u{1F41F}",fish_cake:"\u{1F365}",fishing_pole_and_fish:"\u{1F3A3}",fist_raised:"\u270A",fist_left:"\u{1F91B}",fist_right:"\u{1F91C}",flags:"\u{1F38F}",flashlight:"\u{1F526}",fleur_de_lis:"\u269C\uFE0F",flight_arrival:"\u{1F6EC}",flight_departure:"\u{1F6EB}",floppy_disk:"\u{1F4BE}",flower_playing_cards:"\u{1F3B4}",flushed:"\u{1F633}",fog:"\u{1F32B}",foggy:"\u{1F301}",football:"\u{1F3C8}",footprints:"\u{1F463}",fork_and_knife:"\u{1F374}",fountain:"\u26F2\uFE0F",fountain_pen:"\u{1F58B}",four_leaf_clover:"\u{1F340}",fox_face:"\u{1F98A}",framed_picture:"\u{1F5BC}",free:"\u{1F193}",fried_egg:"\u{1F373}",fried_shrimp:"\u{1F364}",fries:"\u{1F35F}",frog:"\u{1F438}",frowning:"\u{1F626}",frowning_face:"\u2639\uFE0F",frowning_man:"\u{1F64D}&zwj;\u2642\uFE0F",frowning_woman:"\u{1F64D}",middle_finger:"\u{1F595}",fuelpump:"\u26FD\uFE0F",full_moon:"\u{1F315}",full_moon_with_face:"\u{1F31D}",funeral_urn:"\u26B1\uFE0F",game_die:"\u{1F3B2}",gear:"\u2699\uFE0F",gem:"\u{1F48E}",gemini:"\u264A\uFE0F",ghost:"\u{1F47B}",gift:"\u{1F381}",gift_heart:"\u{1F49D}",girl:"\u{1F467}",globe_with_meridians:"\u{1F310}",goal_net:"\u{1F945}",goat:"\u{1F410}",golf:"\u26F3\uFE0F",golfing_man:"\u{1F3CC}\uFE0F",golfing_woman:"\u{1F3CC}\uFE0F&zwj;\u2640\uFE0F",gorilla:"\u{1F98D}",grapes:"\u{1F347}",green_apple:"\u{1F34F}",green_book:"\u{1F4D7}",green_heart:"\u{1F49A}",green_salad:"\u{1F957}",grey_exclamation:"\u2755",grey_question:"\u2754",grimacing:"\u{1F62C}",grin:"\u{1F601}",grinning:"\u{1F600}",guardsman:"\u{1F482}",guardswoman:"\u{1F482}&zwj;\u2640\uFE0F",guitar:"\u{1F3B8}",gun:"\u{1F52B}",haircut_woman:"\u{1F487}",haircut_man:"\u{1F487}&zwj;\u2642\uFE0F",hamburger:"\u{1F354}",hammer:"\u{1F528}",hammer_and_pick:"\u2692",hammer_and_wrench:"\u{1F6E0}",hamster:"\u{1F439}",hand:"\u270B",handbag:"\u{1F45C}",handshake:"\u{1F91D}",hankey:"\u{1F4A9}",hatched_chick:"\u{1F425}",hatching_chick:"\u{1F423}",headphones:"\u{1F3A7}",hear_no_evil:"\u{1F649}",heart:"\u2764\uFE0F",heart_decoration:"\u{1F49F}",heart_eyes:"\u{1F60D}",heart_eyes_cat:"\u{1F63B}",heartbeat:"\u{1F493}",heartpulse:"\u{1F497}",hearts:"\u2665\uFE0F",heavy_check_mark:"\u2714\uFE0F",heavy_division_sign:"\u2797",heavy_dollar_sign:"\u{1F4B2}",heavy_heart_exclamation:"\u2763\uFE0F",heavy_minus_sign:"\u2796",heavy_multiplication_x:"\u2716\uFE0F",heavy_plus_sign:"\u2795",helicopter:"\u{1F681}",herb:"\u{1F33F}",hibiscus:"\u{1F33A}",high_brightness:"\u{1F506}",high_heel:"\u{1F460}",hocho:"\u{1F52A}",hole:"\u{1F573}",honey_pot:"\u{1F36F}",horse:"\u{1F434}",horse_racing:"\u{1F3C7}",hospital:"\u{1F3E5}",hot_pepper:"\u{1F336}",hotdog:"\u{1F32D}",hotel:"\u{1F3E8}",hotsprings:"\u2668\uFE0F",hourglass:"\u231B\uFE0F",hourglass_flowing_sand:"\u23F3",house:"\u{1F3E0}",house_with_garden:"\u{1F3E1}",houses:"\u{1F3D8}",hugs:"\u{1F917}",hushed:"\u{1F62F}",ice_cream:"\u{1F368}",ice_hockey:"\u{1F3D2}",ice_skate:"\u26F8",icecream:"\u{1F366}",id:"\u{1F194}",ideograph_advantage:"\u{1F250}",imp:"\u{1F47F}",inbox_tray:"\u{1F4E5}",incoming_envelope:"\u{1F4E8}",tipping_hand_woman:"\u{1F481}",information_source:"\u2139\uFE0F",innocent:"\u{1F607}",interrobang:"\u2049\uFE0F",iphone:"\u{1F4F1}",izakaya_lantern:"\u{1F3EE}",jack_o_lantern:"\u{1F383}",japan:"\u{1F5FE}",japanese_castle:"\u{1F3EF}",japanese_goblin:"\u{1F47A}",japanese_ogre:"\u{1F479}",jeans:"\u{1F456}",joy:"\u{1F602}",joy_cat:"\u{1F639}",joystick:"\u{1F579}",kaaba:"\u{1F54B}",key:"\u{1F511}",keyboard:"\u2328\uFE0F",keycap_ten:"\u{1F51F}",kick_scooter:"\u{1F6F4}",kimono:"\u{1F458}",kiss:"\u{1F48B}",kissing:"\u{1F617}",kissing_cat:"\u{1F63D}",kissing_closed_eyes:"\u{1F61A}",kissing_heart:"\u{1F618}",kissing_smiling_eyes:"\u{1F619}",kiwi_fruit:"\u{1F95D}",koala:"\u{1F428}",koko:"\u{1F201}",label:"\u{1F3F7}",large_blue_circle:"\u{1F535}",large_blue_diamond:"\u{1F537}",large_orange_diamond:"\u{1F536}",last_quarter_moon:"\u{1F317}",last_quarter_moon_with_face:"\u{1F31C}",latin_cross:"\u271D\uFE0F",laughing:"\u{1F606}",leaves:"\u{1F343}",ledger:"\u{1F4D2}",left_luggage:"\u{1F6C5}",left_right_arrow:"\u2194\uFE0F",leftwards_arrow_with_hook:"\u21A9\uFE0F",lemon:"\u{1F34B}",leo:"\u264C\uFE0F",leopard:"\u{1F406}",level_slider:"\u{1F39A}",libra:"\u264E\uFE0F",light_rail:"\u{1F688}",link:"\u{1F517}",lion:"\u{1F981}",lips:"\u{1F444}",lipstick:"\u{1F484}",lizard:"\u{1F98E}",lock:"\u{1F512}",lock_with_ink_pen:"\u{1F50F}",lollipop:"\u{1F36D}",loop:"\u27BF",loud_sound:"\u{1F50A}",loudspeaker:"\u{1F4E2}",love_hotel:"\u{1F3E9}",love_letter:"\u{1F48C}",low_brightness:"\u{1F505}",lying_face:"\u{1F925}",m:"\u24C2\uFE0F",mag:"\u{1F50D}",mag_right:"\u{1F50E}",mahjong:"\u{1F004}\uFE0F",mailbox:"\u{1F4EB}",mailbox_closed:"\u{1F4EA}",mailbox_with_mail:"\u{1F4EC}",mailbox_with_no_mail:"\u{1F4ED}",man:"\u{1F468}",man_artist:"\u{1F468}&zwj;\u{1F3A8}",man_astronaut:"\u{1F468}&zwj;\u{1F680}",man_cartwheeling:"\u{1F938}&zwj;\u2642\uFE0F",man_cook:"\u{1F468}&zwj;\u{1F373}",man_dancing:"\u{1F57A}",man_facepalming:"\u{1F926}&zwj;\u2642\uFE0F",man_factory_worker:"\u{1F468}&zwj;\u{1F3ED}",man_farmer:"\u{1F468}&zwj;\u{1F33E}",man_firefighter:"\u{1F468}&zwj;\u{1F692}",man_health_worker:"\u{1F468}&zwj;\u2695\uFE0F",man_in_tuxedo:"\u{1F935}",man_judge:"\u{1F468}&zwj;\u2696\uFE0F",man_juggling:"\u{1F939}&zwj;\u2642\uFE0F",man_mechanic:"\u{1F468}&zwj;\u{1F527}",man_office_worker:"\u{1F468}&zwj;\u{1F4BC}",man_pilot:"\u{1F468}&zwj;\u2708\uFE0F",man_playing_handball:"\u{1F93E}&zwj;\u2642\uFE0F",man_playing_water_polo:"\u{1F93D}&zwj;\u2642\uFE0F",man_scientist:"\u{1F468}&zwj;\u{1F52C}",man_shrugging:"\u{1F937}&zwj;\u2642\uFE0F",man_singer:"\u{1F468}&zwj;\u{1F3A4}",man_student:"\u{1F468}&zwj;\u{1F393}",man_teacher:"\u{1F468}&zwj;\u{1F3EB}",man_technologist:"\u{1F468}&zwj;\u{1F4BB}",man_with_gua_pi_mao:"\u{1F472}",man_with_turban:"\u{1F473}",tangerine:"\u{1F34A}",mans_shoe:"\u{1F45E}",mantelpiece_clock:"\u{1F570}",maple_leaf:"\u{1F341}",martial_arts_uniform:"\u{1F94B}",mask:"\u{1F637}",massage_woman:"\u{1F486}",massage_man:"\u{1F486}&zwj;\u2642\uFE0F",meat_on_bone:"\u{1F356}",medal_military:"\u{1F396}",medal_sports:"\u{1F3C5}",mega:"\u{1F4E3}",melon:"\u{1F348}",memo:"\u{1F4DD}",men_wrestling:"\u{1F93C}&zwj;\u2642\uFE0F",menorah:"\u{1F54E}",mens:"\u{1F6B9}",metal:"\u{1F918}",metro:"\u{1F687}",microphone:"\u{1F3A4}",microscope:"\u{1F52C}",milk_glass:"\u{1F95B}",milky_way:"\u{1F30C}",minibus:"\u{1F690}",minidisc:"\u{1F4BD}",mobile_phone_off:"\u{1F4F4}",money_mouth_face:"\u{1F911}",money_with_wings:"\u{1F4B8}",moneybag:"\u{1F4B0}",monkey:"\u{1F412}",monkey_face:"\u{1F435}",monorail:"\u{1F69D}",moon:"\u{1F314}",mortar_board:"\u{1F393}",mosque:"\u{1F54C}",motor_boat:"\u{1F6E5}",motor_scooter:"\u{1F6F5}",motorcycle:"\u{1F3CD}",motorway:"\u{1F6E3}",mount_fuji:"\u{1F5FB}",mountain:"\u26F0",mountain_biking_man:"\u{1F6B5}",mountain_biking_woman:"\u{1F6B5}&zwj;\u2640\uFE0F",mountain_cableway:"\u{1F6A0}",mountain_railway:"\u{1F69E}",mountain_snow:"\u{1F3D4}",mouse:"\u{1F42D}",mouse2:"\u{1F401}",movie_camera:"\u{1F3A5}",moyai:"\u{1F5FF}",mrs_claus:"\u{1F936}",muscle:"\u{1F4AA}",mushroom:"\u{1F344}",musical_keyboard:"\u{1F3B9}",musical_note:"\u{1F3B5}",musical_score:"\u{1F3BC}",mute:"\u{1F507}",nail_care:"\u{1F485}",name_badge:"\u{1F4DB}",national_park:"\u{1F3DE}",nauseated_face:"\u{1F922}",necktie:"\u{1F454}",negative_squared_cross_mark:"\u274E",nerd_face:"\u{1F913}",neutral_face:"\u{1F610}",new:"\u{1F195}",new_moon:"\u{1F311}",new_moon_with_face:"\u{1F31A}",newspaper:"\u{1F4F0}",newspaper_roll:"\u{1F5DE}",next_track_button:"\u23ED",ng:"\u{1F196}",no_good_man:"\u{1F645}&zwj;\u2642\uFE0F",no_good_woman:"\u{1F645}",night_with_stars:"\u{1F303}",no_bell:"\u{1F515}",no_bicycles:"\u{1F6B3}",no_entry:"\u26D4\uFE0F",no_entry_sign:"\u{1F6AB}",no_mobile_phones:"\u{1F4F5}",no_mouth:"\u{1F636}",no_pedestrians:"\u{1F6B7}",no_smoking:"\u{1F6AD}","non-potable_water":"\u{1F6B1}",nose:"\u{1F443}",notebook:"\u{1F4D3}",notebook_with_decorative_cover:"\u{1F4D4}",notes:"\u{1F3B6}",nut_and_bolt:"\u{1F529}",o:"\u2B55\uFE0F",o2:"\u{1F17E}\uFE0F",ocean:"\u{1F30A}",octopus:"\u{1F419}",oden:"\u{1F362}",office:"\u{1F3E2}",oil_drum:"\u{1F6E2}",ok:"\u{1F197}",ok_hand:"\u{1F44C}",ok_man:"\u{1F646}&zwj;\u2642\uFE0F",ok_woman:"\u{1F646}",old_key:"\u{1F5DD}",older_man:"\u{1F474}",older_woman:"\u{1F475}",om:"\u{1F549}",on:"\u{1F51B}",oncoming_automobile:"\u{1F698}",oncoming_bus:"\u{1F68D}",oncoming_police_car:"\u{1F694}",oncoming_taxi:"\u{1F696}",open_file_folder:"\u{1F4C2}",open_hands:"\u{1F450}",open_mouth:"\u{1F62E}",open_umbrella:"\u2602\uFE0F",ophiuchus:"\u26CE",orange_book:"\u{1F4D9}",orthodox_cross:"\u2626\uFE0F",outbox_tray:"\u{1F4E4}",owl:"\u{1F989}",ox:"\u{1F402}",package:"\u{1F4E6}",page_facing_up:"\u{1F4C4}",page_with_curl:"\u{1F4C3}",pager:"\u{1F4DF}",paintbrush:"\u{1F58C}",palm_tree:"\u{1F334}",pancakes:"\u{1F95E}",panda_face:"\u{1F43C}",paperclip:"\u{1F4CE}",paperclips:"\u{1F587}",parasol_on_ground:"\u26F1",parking:"\u{1F17F}\uFE0F",part_alternation_mark:"\u303D\uFE0F",partly_sunny:"\u26C5\uFE0F",passenger_ship:"\u{1F6F3}",passport_control:"\u{1F6C2}",pause_button:"\u23F8",peace_symbol:"\u262E\uFE0F",peach:"\u{1F351}",peanuts:"\u{1F95C}",pear:"\u{1F350}",pen:"\u{1F58A}",pencil2:"\u270F\uFE0F",penguin:"\u{1F427}",pensive:"\u{1F614}",performing_arts:"\u{1F3AD}",persevere:"\u{1F623}",person_fencing:"\u{1F93A}",pouting_woman:"\u{1F64E}",phone:"\u260E\uFE0F",pick:"\u26CF",pig:"\u{1F437}",pig2:"\u{1F416}",pig_nose:"\u{1F43D}",pill:"\u{1F48A}",pineapple:"\u{1F34D}",ping_pong:"\u{1F3D3}",pisces:"\u2653\uFE0F",pizza:"\u{1F355}",place_of_worship:"\u{1F6D0}",plate_with_cutlery:"\u{1F37D}",play_or_pause_button:"\u23EF",point_down:"\u{1F447}",point_left:"\u{1F448}",point_right:"\u{1F449}",point_up:"\u261D\uFE0F",point_up_2:"\u{1F446}",police_car:"\u{1F693}",policewoman:"\u{1F46E}&zwj;\u2640\uFE0F",poodle:"\u{1F429}",popcorn:"\u{1F37F}",post_office:"\u{1F3E3}",postal_horn:"\u{1F4EF}",postbox:"\u{1F4EE}",potable_water:"\u{1F6B0}",potato:"\u{1F954}",pouch:"\u{1F45D}",poultry_leg:"\u{1F357}",pound:"\u{1F4B7}",rage:"\u{1F621}",pouting_cat:"\u{1F63E}",pouting_man:"\u{1F64E}&zwj;\u2642\uFE0F",pray:"\u{1F64F}",prayer_beads:"\u{1F4FF}",pregnant_woman:"\u{1F930}",previous_track_button:"\u23EE",prince:"\u{1F934}",princess:"\u{1F478}",printer:"\u{1F5A8}",purple_heart:"\u{1F49C}",purse:"\u{1F45B}",pushpin:"\u{1F4CC}",put_litter_in_its_place:"\u{1F6AE}",question:"\u2753",rabbit:"\u{1F430}",rabbit2:"\u{1F407}",racehorse:"\u{1F40E}",racing_car:"\u{1F3CE}",radio:"\u{1F4FB}",radio_button:"\u{1F518}",radioactive:"\u2622\uFE0F",railway_car:"\u{1F683}",railway_track:"\u{1F6E4}",rainbow:"\u{1F308}",rainbow_flag:"\u{1F3F3}\uFE0F&zwj;\u{1F308}",raised_back_of_hand:"\u{1F91A}",raised_hand_with_fingers_splayed:"\u{1F590}",raised_hands:"\u{1F64C}",raising_hand_woman:"\u{1F64B}",raising_hand_man:"\u{1F64B}&zwj;\u2642\uFE0F",ram:"\u{1F40F}",ramen:"\u{1F35C}",rat:"\u{1F400}",record_button:"\u23FA",recycle:"\u267B\uFE0F",red_circle:"\u{1F534}",registered:"\xAE\uFE0F",relaxed:"\u263A\uFE0F",relieved:"\u{1F60C}",reminder_ribbon:"\u{1F397}",repeat:"\u{1F501}",repeat_one:"\u{1F502}",rescue_worker_helmet:"\u26D1",restroom:"\u{1F6BB}",revolving_hearts:"\u{1F49E}",rewind:"\u23EA",rhinoceros:"\u{1F98F}",ribbon:"\u{1F380}",rice:"\u{1F35A}",rice_ball:"\u{1F359}",rice_cracker:"\u{1F358}",rice_scene:"\u{1F391}",right_anger_bubble:"\u{1F5EF}",ring:"\u{1F48D}",robot:"\u{1F916}",rocket:"\u{1F680}",rofl:"\u{1F923}",roll_eyes:"\u{1F644}",roller_coaster:"\u{1F3A2}",rooster:"\u{1F413}",rose:"\u{1F339}",rosette:"\u{1F3F5}",rotating_light:"\u{1F6A8}",round_pushpin:"\u{1F4CD}",rowing_man:"\u{1F6A3}",rowing_woman:"\u{1F6A3}&zwj;\u2640\uFE0F",rugby_football:"\u{1F3C9}",running_man:"\u{1F3C3}",running_shirt_with_sash:"\u{1F3BD}",running_woman:"\u{1F3C3}&zwj;\u2640\uFE0F",sa:"\u{1F202}\uFE0F",sagittarius:"\u2650\uFE0F",sake:"\u{1F376}",sandal:"\u{1F461}",santa:"\u{1F385}",satellite:"\u{1F4E1}",saxophone:"\u{1F3B7}",school:"\u{1F3EB}",school_satchel:"\u{1F392}",scissors:"\u2702\uFE0F",scorpion:"\u{1F982}",scorpius:"\u264F\uFE0F",scream:"\u{1F631}",scream_cat:"\u{1F640}",scroll:"\u{1F4DC}",seat:"\u{1F4BA}",secret:"\u3299\uFE0F",see_no_evil:"\u{1F648}",seedling:"\u{1F331}",selfie:"\u{1F933}",shallow_pan_of_food:"\u{1F958}",shamrock:"\u2618\uFE0F",shark:"\u{1F988}",shaved_ice:"\u{1F367}",sheep:"\u{1F411}",shell:"\u{1F41A}",shield:"\u{1F6E1}",shinto_shrine:"\u26E9",ship:"\u{1F6A2}",shirt:"\u{1F455}",shopping:"\u{1F6CD}",shopping_cart:"\u{1F6D2}",shower:"\u{1F6BF}",shrimp:"\u{1F990}",signal_strength:"\u{1F4F6}",six_pointed_star:"\u{1F52F}",ski:"\u{1F3BF}",skier:"\u26F7",skull:"\u{1F480}",skull_and_crossbones:"\u2620\uFE0F",sleeping:"\u{1F634}",sleeping_bed:"\u{1F6CC}",sleepy:"\u{1F62A}",slightly_frowning_face:"\u{1F641}",slightly_smiling_face:"\u{1F642}",slot_machine:"\u{1F3B0}",small_airplane:"\u{1F6E9}",small_blue_diamond:"\u{1F539}",small_orange_diamond:"\u{1F538}",small_red_triangle:"\u{1F53A}",small_red_triangle_down:"\u{1F53B}",smile:"\u{1F604}",smile_cat:"\u{1F638}",smiley:"\u{1F603}",smiley_cat:"\u{1F63A}",smiling_imp:"\u{1F608}",smirk:"\u{1F60F}",smirk_cat:"\u{1F63C}",smoking:"\u{1F6AC}",snail:"\u{1F40C}",snake:"\u{1F40D}",sneezing_face:"\u{1F927}",snowboarder:"\u{1F3C2}",snowflake:"\u2744\uFE0F",snowman:"\u26C4\uFE0F",snowman_with_snow:"\u2603\uFE0F",sob:"\u{1F62D}",soccer:"\u26BD\uFE0F",soon:"\u{1F51C}",sos:"\u{1F198}",sound:"\u{1F509}",space_invader:"\u{1F47E}",spades:"\u2660\uFE0F",spaghetti:"\u{1F35D}",sparkle:"\u2747\uFE0F",sparkler:"\u{1F387}",sparkles:"\u2728",sparkling_heart:"\u{1F496}",speak_no_evil:"\u{1F64A}",speaker:"\u{1F508}",speaking_head:"\u{1F5E3}",speech_balloon:"\u{1F4AC}",speedboat:"\u{1F6A4}",spider:"\u{1F577}",spider_web:"\u{1F578}",spiral_calendar:"\u{1F5D3}",spiral_notepad:"\u{1F5D2}",spoon:"\u{1F944}",squid:"\u{1F991}",stadium:"\u{1F3DF}",star:"\u2B50\uFE0F",star2:"\u{1F31F}",star_and_crescent:"\u262A\uFE0F",star_of_david:"\u2721\uFE0F",stars:"\u{1F320}",station:"\u{1F689}",statue_of_liberty:"\u{1F5FD}",steam_locomotive:"\u{1F682}",stew:"\u{1F372}",stop_button:"\u23F9",stop_sign:"\u{1F6D1}",stopwatch:"\u23F1",straight_ruler:"\u{1F4CF}",strawberry:"\u{1F353}",stuck_out_tongue:"\u{1F61B}",stuck_out_tongue_closed_eyes:"\u{1F61D}",stuck_out_tongue_winking_eye:"\u{1F61C}",studio_microphone:"\u{1F399}",stuffed_flatbread:"\u{1F959}",sun_behind_large_cloud:"\u{1F325}",sun_behind_rain_cloud:"\u{1F326}",sun_behind_small_cloud:"\u{1F324}",sun_with_face:"\u{1F31E}",sunflower:"\u{1F33B}",sunglasses:"\u{1F60E}",sunny:"\u2600\uFE0F",sunrise:"\u{1F305}",sunrise_over_mountains:"\u{1F304}",surfing_man:"\u{1F3C4}",surfing_woman:"\u{1F3C4}&zwj;\u2640\uFE0F",sushi:"\u{1F363}",suspension_railway:"\u{1F69F}",sweat:"\u{1F613}",sweat_drops:"\u{1F4A6}",sweat_smile:"\u{1F605}",sweet_potato:"\u{1F360}",swimming_man:"\u{1F3CA}",swimming_woman:"\u{1F3CA}&zwj;\u2640\uFE0F",symbols:"\u{1F523}",synagogue:"\u{1F54D}",syringe:"\u{1F489}",taco:"\u{1F32E}",tada:"\u{1F389}",tanabata_tree:"\u{1F38B}",taurus:"\u2649\uFE0F",taxi:"\u{1F695}",tea:"\u{1F375}",telephone_receiver:"\u{1F4DE}",telescope:"\u{1F52D}",tennis:"\u{1F3BE}",tent:"\u26FA\uFE0F",thermometer:"\u{1F321}",thinking:"\u{1F914}",thought_balloon:"\u{1F4AD}",ticket:"\u{1F3AB}",tickets:"\u{1F39F}",tiger:"\u{1F42F}",tiger2:"\u{1F405}",timer_clock:"\u23F2",tipping_hand_man:"\u{1F481}&zwj;\u2642\uFE0F",tired_face:"\u{1F62B}",tm:"\u2122\uFE0F",toilet:"\u{1F6BD}",tokyo_tower:"\u{1F5FC}",tomato:"\u{1F345}",tongue:"\u{1F445}",top:"\u{1F51D}",tophat:"\u{1F3A9}",tornado:"\u{1F32A}",trackball:"\u{1F5B2}",tractor:"\u{1F69C}",traffic_light:"\u{1F6A5}",train:"\u{1F68B}",train2:"\u{1F686}",tram:"\u{1F68A}",triangular_flag_on_post:"\u{1F6A9}",triangular_ruler:"\u{1F4D0}",trident:"\u{1F531}",triumph:"\u{1F624}",trolleybus:"\u{1F68E}",trophy:"\u{1F3C6}",tropical_drink:"\u{1F379}",tropical_fish:"\u{1F420}",truck:"\u{1F69A}",trumpet:"\u{1F3BA}",tulip:"\u{1F337}",tumbler_glass:"\u{1F943}",turkey:"\u{1F983}",turtle:"\u{1F422}",tv:"\u{1F4FA}",twisted_rightwards_arrows:"\u{1F500}",two_hearts:"\u{1F495}",two_men_holding_hands:"\u{1F46C}",two_women_holding_hands:"\u{1F46D}",u5272:"\u{1F239}",u5408:"\u{1F234}",u55b6:"\u{1F23A}",u6307:"\u{1F22F}\uFE0F",u6708:"\u{1F237}\uFE0F",u6709:"\u{1F236}",u6e80:"\u{1F235}",u7121:"\u{1F21A}\uFE0F",u7533:"\u{1F238}",u7981:"\u{1F232}",u7a7a:"\u{1F233}",umbrella:"\u2614\uFE0F",unamused:"\u{1F612}",underage:"\u{1F51E}",unicorn:"\u{1F984}",unlock:"\u{1F513}",up:"\u{1F199}",upside_down_face:"\u{1F643}",v:"\u270C\uFE0F",vertical_traffic_light:"\u{1F6A6}",vhs:"\u{1F4FC}",vibration_mode:"\u{1F4F3}",video_camera:"\u{1F4F9}",video_game:"\u{1F3AE}",violin:"\u{1F3BB}",virgo:"\u264D\uFE0F",volcano:"\u{1F30B}",volleyball:"\u{1F3D0}",vs:"\u{1F19A}",vulcan_salute:"\u{1F596}",walking_man:"\u{1F6B6}",walking_woman:"\u{1F6B6}&zwj;\u2640\uFE0F",waning_crescent_moon:"\u{1F318}",waning_gibbous_moon:"\u{1F316}",warning:"\u26A0\uFE0F",wastebasket:"\u{1F5D1}",watch:"\u231A\uFE0F",water_buffalo:"\u{1F403}",watermelon:"\u{1F349}",wave:"\u{1F44B}",wavy_dash:"\u3030\uFE0F",waxing_crescent_moon:"\u{1F312}",wc:"\u{1F6BE}",weary:"\u{1F629}",wedding:"\u{1F492}",weight_lifting_man:"\u{1F3CB}\uFE0F",weight_lifting_woman:"\u{1F3CB}\uFE0F&zwj;\u2640\uFE0F",whale:"\u{1F433}",whale2:"\u{1F40B}",wheel_of_dharma:"\u2638\uFE0F",wheelchair:"\u267F\uFE0F",white_check_mark:"\u2705",white_circle:"\u26AA\uFE0F",white_flag:"\u{1F3F3}\uFE0F",white_flower:"\u{1F4AE}",white_large_square:"\u2B1C\uFE0F",white_medium_small_square:"\u25FD\uFE0F",white_medium_square:"\u25FB\uFE0F",white_small_square:"\u25AB\uFE0F",white_square_button:"\u{1F533}",wilted_flower:"\u{1F940}",wind_chime:"\u{1F390}",wind_face:"\u{1F32C}",wine_glass:"\u{1F377}",wink:"\u{1F609}",wolf:"\u{1F43A}",woman:"\u{1F469}",woman_artist:"\u{1F469}&zwj;\u{1F3A8}",woman_astronaut:"\u{1F469}&zwj;\u{1F680}",woman_cartwheeling:"\u{1F938}&zwj;\u2640\uFE0F",woman_cook:"\u{1F469}&zwj;\u{1F373}",woman_facepalming:"\u{1F926}&zwj;\u2640\uFE0F",woman_factory_worker:"\u{1F469}&zwj;\u{1F3ED}",woman_farmer:"\u{1F469}&zwj;\u{1F33E}",woman_firefighter:"\u{1F469}&zwj;\u{1F692}",woman_health_worker:"\u{1F469}&zwj;\u2695\uFE0F",woman_judge:"\u{1F469}&zwj;\u2696\uFE0F",woman_juggling:"\u{1F939}&zwj;\u2640\uFE0F",woman_mechanic:"\u{1F469}&zwj;\u{1F527}",woman_office_worker:"\u{1F469}&zwj;\u{1F4BC}",woman_pilot:"\u{1F469}&zwj;\u2708\uFE0F",woman_playing_handball:"\u{1F93E}&zwj;\u2640\uFE0F",woman_playing_water_polo:"\u{1F93D}&zwj;\u2640\uFE0F",woman_scientist:"\u{1F469}&zwj;\u{1F52C}",woman_shrugging:"\u{1F937}&zwj;\u2640\uFE0F",woman_singer:"\u{1F469}&zwj;\u{1F3A4}",woman_student:"\u{1F469}&zwj;\u{1F393}",woman_teacher:"\u{1F469}&zwj;\u{1F3EB}",woman_technologist:"\u{1F469}&zwj;\u{1F4BB}",woman_with_turban:"\u{1F473}&zwj;\u2640\uFE0F",womans_clothes:"\u{1F45A}",womans_hat:"\u{1F452}",women_wrestling:"\u{1F93C}&zwj;\u2640\uFE0F",womens:"\u{1F6BA}",world_map:"\u{1F5FA}",worried:"\u{1F61F}",wrench:"\u{1F527}",writing_hand:"\u270D\uFE0F",x:"\u274C",yellow_heart:"\u{1F49B}",yen:"\u{1F4B4}",yin_yang:"\u262F\uFE0F",yum:"\u{1F60B}",zap:"\u26A1\uFE0F",zipper_mouth_face:"\u{1F910}",zzz:"\u{1F4A4}",octocat:'<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',showdown:`<span style="font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>`},t.Converter=function(o){"use strict";var h={},f=[],_=[],C={},I=a,L={parsed:{},raw:"",format:""};F();function F(){o=o||{};for(var x in s)s.hasOwnProperty(x)&&(h[x]=s[x]);if(typeof o=="object")for(var U in o)o.hasOwnProperty(U)&&(h[U]=o[U]);else throw Error("Converter expects the passed parameter to be an object, but "+typeof o+" was passed instead.");h.extensions&&t.helper.forEach(h.extensions,K)}function K(x,U){if(U=U||null,t.helper.isString(x))if(x=t.helper.stdExtName(x),U=x,t.extensions[x]){console.warn("DEPRECATION WARNING: "+x+" is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!"),W(t.extensions[x],x);return}else if(!t.helper.isUndefined(r[x]))x=r[x];else throw Error('Extension "'+x+'" could not be loaded. It was either not found or is not a valid extension.');typeof x=="function"&&(x=x()),t.helper.isArray(x)||(x=[x]);var z=c(x,U);if(!z.valid)throw Error(z.error);for(var $=0;$<x.length;++$){switch(x[$].type){case"lang":f.push(x[$]);break;case"output":_.push(x[$]);break}if(x[$].hasOwnProperty("listeners"))for(var ee in x[$].listeners)x[$].listeners.hasOwnProperty(ee)&&q(ee,x[$].listeners[ee])}}function W(x,U){typeof x=="function"&&(x=x(new t.Converter)),t.helper.isArray(x)||(x=[x]);var z=c(x,U);if(!z.valid)throw Error(z.error);for(var $=0;$<x.length;++$)switch(x[$].type){case"lang":f.push(x[$]);break;case"output":_.push(x[$]);break;default:throw Error("Extension loader error: Type unrecognized!!!")}}function q(x,U){if(!t.helper.isString(x))throw Error("Invalid argument in converter.listen() method: name must be a string, but "+typeof x+" given");if(typeof U!="function")throw Error("Invalid argument in converter.listen() method: callback must be a function, but "+typeof U+" given");C.hasOwnProperty(x)||(C[x]=[]),C[x].push(U)}function G(x){var U=x.match(/^\s*/)[0].length,z=new RegExp("^\\s{0,"+U+"}","gm");return x.replace(z,"")}this._dispatch=function(U,z,$,ee){if(C.hasOwnProperty(U))for(var X=0;X<C[U].length;++X){var ie=C[U][X](U,z,this,$,ee);ie&&typeof ie<"u"&&(z=ie)}return z},this.listen=function(x,U){return q(x,U),this},this.makeHtml=function(x){if(!x)return x;var U={gHtmlBlocks:[],gHtmlMdBlocks:[],gHtmlSpans:[],gUrls:{},gTitles:{},gDimensions:{},gListLevel:0,hashLinkCounts:{},langExtensions:f,outputModifiers:_,converter:this,ghCodeBlocks:[],metadata:{parsed:{},raw:"",format:""}};return x=x.replace(/¨/g,"\xA8T"),x=x.replace(/\$/g,"\xA8D"),x=x.replace(/\r\n/g,`
`),x=x.replace(/\r/g,`
`),x=x.replace(/\u00A0/g,"&nbsp;"),h.smartIndentationFix&&(x=G(x)),x=`

`+x+`

`,x=t.subParser("detab")(x,h,U),x=x.replace(/^[ \t]+$/mg,""),t.helper.forEach(f,function(z){x=t.subParser("runExtension")(z,x,h,U)}),x=t.subParser("metadata")(x,h,U),x=t.subParser("hashPreCodeTags")(x,h,U),x=t.subParser("githubCodeBlocks")(x,h,U),x=t.subParser("hashHTMLBlocks")(x,h,U),x=t.subParser("hashCodeTags")(x,h,U),x=t.subParser("stripLinkDefinitions")(x,h,U),x=t.subParser("blockGamut")(x,h,U),x=t.subParser("unhashHTMLSpans")(x,h,U),x=t.subParser("unescapeSpecialChars")(x,h,U),x=x.replace(/¨D/g,"$$"),x=x.replace(/¨T/g,"\xA8"),x=t.subParser("completeHTMLDocument")(x,h,U),t.helper.forEach(_,function(z){x=t.subParser("runExtension")(z,x,h,U)}),L=U.metadata,x},this.makeMarkdown=this.makeMd=function(x,U){if(x=x.replace(/\r\n/g,`
`),x=x.replace(/\r/g,`
`),x=x.replace(/>[ \t]+</,">\xA8NBSP;<"),!U)if(window&&window.document)U=window.document;else throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");var z=U.createElement("div");z.innerHTML=x;var $={preList:me(z)};ae(z);for(var ee=z.childNodes,X="",ie=0;ie<ee.length;ie++)X+=t.subParser("makeMarkdown.node")(ee[ie],$);function ae(re){for(var ye=0;ye<re.childNodes.length;++ye){var ne=re.childNodes[ye];ne.nodeType===3?!/\S/.test(ne.nodeValue)&&!/^[ ]+$/.test(ne.nodeValue)?(re.removeChild(ne),--ye):(ne.nodeValue=ne.nodeValue.split(`
`).join(" "),ne.nodeValue=ne.nodeValue.replace(/(\s)+/g,"$1")):ne.nodeType===1&&ae(ne)}}function me(re){for(var ye=re.querySelectorAll("pre"),ne=[],xe=0;xe<ye.length;++xe)if(ye[xe].childElementCount===1&&ye[xe].firstChild.tagName.toLowerCase()==="code"){var je=ye[xe].firstChild.innerHTML.trim(),He=ye[xe].firstChild.getAttribute("data-language")||"";if(He==="")for(var st=ye[xe].firstChild.className.split(" "),At=0;At<st.length;++At){var nt=st[At].match(/^language-(.+)$/);if(nt!==null){He=nt[1];break}}je=t.helper.unescapeHTMLEntities(je),ne.push(je),ye[xe].outerHTML='<precode language="'+He+'" precodenum="'+xe.toString()+'"></precode>'}else ne.push(ye[xe].innerHTML),ye[xe].innerHTML="",ye[xe].setAttribute("prenum",xe.toString());return ne}return X},this.setOption=function(x,U){h[x]=U},this.getOption=function(x){return h[x]},this.getOptions=function(){return h},this.addExtension=function(x,U){U=U||null,K(x,U)},this.useExtension=function(x){K(x)},this.setFlavor=function(x){if(!u.hasOwnProperty(x))throw Error(x+" flavor was not found");var U=u[x];I=x;for(var z in U)U.hasOwnProperty(z)&&(h[z]=U[z])},this.getFlavor=function(){return I},this.removeExtension=function(x){t.helper.isArray(x)||(x=[x]);for(var U=0;U<x.length;++U){for(var z=x[U],$=0;$<f.length;++$)f[$]===z&&f.splice($,1);for(var ee=0;ee<_.length;++ee)_[ee]===z&&_.splice(ee,1)}},this.getAllExtensions=function(){return{language:f,output:_}},this.getMetadata=function(x){return x?L.raw:L.parsed},this.getMetadataFormat=function(){return L.format},this._setMetadataPair=function(x,U){L.parsed[x]=U},this._setMetadataFormat=function(x){L.format=x},this._setMetadataRaw=function(x){L.raw=x}},t.subParser("anchors",function(o,h,f){"use strict";o=f.converter._dispatch("anchors.before",o,h,f);var _=function(C,I,L,F,K,W,q){if(t.helper.isUndefined(q)&&(q=""),L=L.toLowerCase(),C.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)F="";else if(!F)if(L||(L=I.toLowerCase().replace(/ ?\n/g," ")),F="#"+L,!t.helper.isUndefined(f.gUrls[L]))F=f.gUrls[L],t.helper.isUndefined(f.gTitles[L])||(q=f.gTitles[L]);else return C;F=F.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var G='<a href="'+F+'"';return q!==""&&q!==null&&(q=q.replace(/"/g,"&quot;"),q=q.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),G+=' title="'+q+'"'),h.openLinksInNewWindow&&!/^#/.test(F)&&(G+=' rel="noopener noreferrer" target="\xA8E95Eblank"'),G+=">"+I+"</a>",G};return o=o.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g,_),o=o.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,_),o=o.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,_),o=o.replace(/\[([^\[\]]+)]()()()()()/g,_),h.ghMentions&&(o=o.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gmi,function(C,I,L,F,K){if(L==="\\")return I+F;if(!t.helper.isString(h.ghMentionsLink))throw new Error("ghMentionsLink option must be a string");var W=h.ghMentionsLink.replace(/\{u}/g,K),q="";return h.openLinksInNewWindow&&(q=' rel="noopener noreferrer" target="\xA8E95Eblank"'),I+'<a href="'+W+'"'+q+">"+F+"</a>"})),o=f.converter._dispatch("anchors.after",o,h,f),o});var A=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,N=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,y=/()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,d=/(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gmi,g=/<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,b=function(o){"use strict";return function(h,f,_,C,I,L,F){_=_.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var K=_,W="",q="",G=f||"",x=F||"";return/^www\./i.test(_)&&(_=_.replace(/^www\./i,"http://www.")),o.excludeTrailingPunctuationFromURLs&&L&&(W=L),o.openLinksInNewWindow&&(q=' rel="noopener noreferrer" target="\xA8E95Eblank"'),G+'<a href="'+_+'"'+q+">"+K+"</a>"+W+x}},E=function(o,h){"use strict";return function(f,_,C){var I="mailto:";return _=_||"",C=t.subParser("unescapeSpecialChars")(C,o,h),o.encodeEmails?(I=t.helper.encodeEmailAddress(I+C),C=t.helper.encodeEmailAddress(C)):I=I+C,_+'<a href="'+I+'">'+C+"</a>"}};t.subParser("autoLinks",function(o,h,f){"use strict";return o=f.converter._dispatch("autoLinks.before",o,h,f),o=o.replace(y,b(h)),o=o.replace(g,E(h,f)),o=f.converter._dispatch("autoLinks.after",o,h,f),o}),t.subParser("simplifiedAutoLinks",function(o,h,f){"use strict";return h.simplifiedAutoLink&&(o=f.converter._dispatch("simplifiedAutoLinks.before",o,h,f),h.excludeTrailingPunctuationFromURLs?o=o.replace(N,b(h)):o=o.replace(A,b(h)),o=o.replace(d,E(h,f)),o=f.converter._dispatch("simplifiedAutoLinks.after",o,h,f)),o}),t.subParser("blockGamut",function(o,h,f){"use strict";return o=f.converter._dispatch("blockGamut.before",o,h,f),o=t.subParser("blockQuotes")(o,h,f),o=t.subParser("headers")(o,h,f),o=t.subParser("horizontalRule")(o,h,f),o=t.subParser("lists")(o,h,f),o=t.subParser("codeBlocks")(o,h,f),o=t.subParser("tables")(o,h,f),o=t.subParser("hashHTMLBlocks")(o,h,f),o=t.subParser("paragraphs")(o,h,f),o=f.converter._dispatch("blockGamut.after",o,h,f),o}),t.subParser("blockQuotes",function(o,h,f){"use strict";o=f.converter._dispatch("blockQuotes.before",o,h,f),o=o+`

`;var _=/(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;return h.splitAdjacentBlockquotes&&(_=/^ {0,3}>[\s\S]*?(?:\n\n)/gm),o=o.replace(_,function(C){return C=C.replace(/^[ \t]*>[ \t]?/gm,""),C=C.replace(/¨0/g,""),C=C.replace(/^[ \t]+$/gm,""),C=t.subParser("githubCodeBlocks")(C,h,f),C=t.subParser("blockGamut")(C,h,f),C=C.replace(/(^|\n)/g,"$1  "),C=C.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm,function(I,L){var F=L;return F=F.replace(/^  /mg,"\xA80"),F=F.replace(/¨0/g,""),F}),t.subParser("hashBlock")(`<blockquote>
`+C+`
</blockquote>`,h,f)}),o=f.converter._dispatch("blockQuotes.after",o,h,f),o}),t.subParser("codeBlocks",function(o,h,f){"use strict";o=f.converter._dispatch("codeBlocks.before",o,h,f),o+="\xA80";var _=/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g;return o=o.replace(_,function(C,I,L){var F=I,K=L,W=`
`;return F=t.subParser("outdent")(F,h,f),F=t.subParser("encodeCode")(F,h,f),F=t.subParser("detab")(F,h,f),F=F.replace(/^\n+/g,""),F=F.replace(/\n+$/g,""),h.omitExtraWLInCodeBlocks&&(W=""),F="<pre><code>"+F+W+"</code></pre>",t.subParser("hashBlock")(F,h,f)+K}),o=o.replace(/¨0/,""),o=f.converter._dispatch("codeBlocks.after",o,h,f),o}),t.subParser("codeSpans",function(o,h,f){"use strict";return o=f.converter._dispatch("codeSpans.before",o,h,f),typeof o>"u"&&(o=""),o=o.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,function(_,C,I,L){var F=L;return F=F.replace(/^([ \t]*)/g,""),F=F.replace(/[ \t]*$/g,""),F=t.subParser("encodeCode")(F,h,f),F=C+"<code>"+F+"</code>",F=t.subParser("hashHTMLSpans")(F,h,f),F}),o=f.converter._dispatch("codeSpans.after",o,h,f),o}),t.subParser("completeHTMLDocument",function(o,h,f){"use strict";if(!h.completeHTMLDocument)return o;o=f.converter._dispatch("completeHTMLDocument.before",o,h,f);var _="html",C=`<!DOCTYPE HTML>
`,I="",L=`<meta charset="utf-8">
`,F="",K="";typeof f.metadata.parsed.doctype<"u"&&(C="<!DOCTYPE "+f.metadata.parsed.doctype+`>
`,_=f.metadata.parsed.doctype.toString().toLowerCase(),(_==="html"||_==="html5")&&(L='<meta charset="utf-8">'));for(var W in f.metadata.parsed)if(f.metadata.parsed.hasOwnProperty(W))switch(W.toLowerCase()){case"doctype":break;case"title":I="<title>"+f.metadata.parsed.title+`</title>
`;break;case"charset":_==="html"||_==="html5"?L='<meta charset="'+f.metadata.parsed.charset+`">
`:L='<meta name="charset" content="'+f.metadata.parsed.charset+`">
`;break;case"language":case"lang":F=' lang="'+f.metadata.parsed[W]+'"',K+='<meta name="'+W+'" content="'+f.metadata.parsed[W]+`">
`;break;default:K+='<meta name="'+W+'" content="'+f.metadata.parsed[W]+`">
`}return o=C+"<html"+F+`>
<head>
`+I+L+K+`</head>
<body>
`+o.trim()+`
</body>
</html>`,o=f.converter._dispatch("completeHTMLDocument.after",o,h,f),o}),t.subParser("detab",function(o,h,f){"use strict";return o=f.converter._dispatch("detab.before",o,h,f),o=o.replace(/\t(?=\t)/g,"    "),o=o.replace(/\t/g,"\xA8A\xA8B"),o=o.replace(/¨B(.+?)¨A/g,function(_,C){for(var I=C,L=4-I.length%4,F=0;F<L;F++)I+=" ";return I}),o=o.replace(/¨A/g,"    "),o=o.replace(/¨B/g,""),o=f.converter._dispatch("detab.after",o,h,f),o}),t.subParser("ellipsis",function(o,h,f){"use strict";return h.ellipsis&&(o=f.converter._dispatch("ellipsis.before",o,h,f),o=o.replace(/\.\.\./g,"\u2026"),o=f.converter._dispatch("ellipsis.after",o,h,f)),o}),t.subParser("emoji",function(o,h,f){"use strict";if(!h.emoji)return o;o=f.converter._dispatch("emoji.before",o,h,f);var _=/:([\S]+?):/g;return o=o.replace(_,function(C,I){return t.helper.emojis.hasOwnProperty(I)?t.helper.emojis[I]:C}),o=f.converter._dispatch("emoji.after",o,h,f),o}),t.subParser("encodeAmpsAndAngles",function(o,h,f){"use strict";return o=f.converter._dispatch("encodeAmpsAndAngles.before",o,h,f),o=o.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,"&amp;"),o=o.replace(/<(?![a-z\/?$!])/gi,"&lt;"),o=o.replace(/</g,"&lt;"),o=o.replace(/>/g,"&gt;"),o=f.converter._dispatch("encodeAmpsAndAngles.after",o,h,f),o}),t.subParser("encodeBackslashEscapes",function(o,h,f){"use strict";return o=f.converter._dispatch("encodeBackslashEscapes.before",o,h,f),o=o.replace(/\\(\\)/g,t.helper.escapeCharactersCallback),o=o.replace(/\\([`*_{}\[\]()>#+.!~=|:-])/g,t.helper.escapeCharactersCallback),o=f.converter._dispatch("encodeBackslashEscapes.after",o,h,f),o}),t.subParser("encodeCode",function(o,h,f){"use strict";return o=f.converter._dispatch("encodeCode.before",o,h,f),o=o.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/([*_{}\[\]\\=~-])/g,t.helper.escapeCharactersCallback),o=f.converter._dispatch("encodeCode.after",o,h,f),o}),t.subParser("escapeSpecialCharsWithinTagAttributes",function(o,h,f){"use strict";o=f.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before",o,h,f);var _=/<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,C=/<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;return o=o.replace(_,function(I){return I.replace(/(.)<\/?code>(?=.)/g,"$1`").replace(/([\\`*_~=|])/g,t.helper.escapeCharactersCallback)}),o=o.replace(C,function(I){return I.replace(/([\\`*_~=|])/g,t.helper.escapeCharactersCallback)}),o=f.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after",o,h,f),o}),t.subParser("githubCodeBlocks",function(o,h,f){"use strict";return h.ghCodeBlocks?(o=f.converter._dispatch("githubCodeBlocks.before",o,h,f),o+="\xA80",o=o.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g,function(_,C,I,L){var F=h.omitExtraWLInCodeBlocks?"":`
`;return L=t.subParser("encodeCode")(L,h,f),L=t.subParser("detab")(L,h,f),L=L.replace(/^\n+/g,""),L=L.replace(/\n+$/g,""),L="<pre><code"+(I?' class="'+I+" language-"+I+'"':"")+">"+L+F+"</code></pre>",L=t.subParser("hashBlock")(L,h,f),`

\xA8G`+(f.ghCodeBlocks.push({text:_,codeblock:L})-1)+`G

`}),o=o.replace(/¨0/,""),f.converter._dispatch("githubCodeBlocks.after",o,h,f)):o}),t.subParser("hashBlock",function(o,h,f){"use strict";return o=f.converter._dispatch("hashBlock.before",o,h,f),o=o.replace(/(^\n+|\n+$)/g,""),o=`

\xA8K`+(f.gHtmlBlocks.push(o)-1)+`K

`,o=f.converter._dispatch("hashBlock.after",o,h,f),o}),t.subParser("hashCodeTags",function(o,h,f){"use strict";o=f.converter._dispatch("hashCodeTags.before",o,h,f);var _=function(C,I,L,F){var K=L+t.subParser("encodeCode")(I,h,f)+F;return"\xA8C"+(f.gHtmlSpans.push(K)-1)+"C"};return o=t.helper.replaceRecursiveRegExp(o,_,"<code\\b[^>]*>","</code>","gim"),o=f.converter._dispatch("hashCodeTags.after",o,h,f),o}),t.subParser("hashElement",function(o,h,f){"use strict";return function(_,C){var I=C;return I=I.replace(/\n\n/g,`
`),I=I.replace(/^\n/,""),I=I.replace(/\n+$/g,""),I=`

\xA8K`+(f.gHtmlBlocks.push(I)-1)+`K

`,I}}),t.subParser("hashHTMLBlocks",function(o,h,f){"use strict";o=f.converter._dispatch("hashHTMLBlocks.before",o,h,f);var _=["pre","div","h1","h2","h3","h4","h5","h6","blockquote","table","dl","ol","ul","script","noscript","form","fieldset","iframe","math","style","section","header","footer","nav","article","aside","address","audio","canvas","figure","hgroup","output","video","p"],C=function(x,U,z,$){var ee=x;return z.search(/\bmarkdown\b/)!==-1&&(ee=z+f.converter.makeHtml(U)+$),`

\xA8K`+(f.gHtmlBlocks.push(ee)-1)+`K

`};h.backslashEscapesHTMLTags&&(o=o.replace(/\\<(\/?[^>]+?)>/g,function(x,U){return"&lt;"+U+"&gt;"}));for(var I=0;I<_.length;++I)for(var L,F=new RegExp("^ {0,3}(<"+_[I]+"\\b[^>]*>)","im"),K="<"+_[I]+"\\b[^>]*>",W="</"+_[I]+">";(L=t.helper.regexIndexOf(o,F))!==-1;){var q=t.helper.splitAtIndex(o,L),G=t.helper.replaceRecursiveRegExp(q[1],C,K,W,"im");if(G===q[1])break;o=q[0].concat(G)}return o=o.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,t.subParser("hashElement")(o,h,f)),o=t.helper.replaceRecursiveRegExp(o,function(x){return`

\xA8K`+(f.gHtmlBlocks.push(x)-1)+`K

`},"^ {0,3}<!--","-->","gm"),o=o.replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,t.subParser("hashElement")(o,h,f)),o=f.converter._dispatch("hashHTMLBlocks.after",o,h,f),o}),t.subParser("hashHTMLSpans",function(o,h,f){"use strict";o=f.converter._dispatch("hashHTMLSpans.before",o,h,f);function _(C){return"\xA8C"+(f.gHtmlSpans.push(C)-1)+"C"}return o=o.replace(/<[^>]+?\/>/gi,function(C){return _(C)}),o=o.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g,function(C){return _(C)}),o=o.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g,function(C){return _(C)}),o=o.replace(/<[^>]+?>/gi,function(C){return _(C)}),o=f.converter._dispatch("hashHTMLSpans.after",o,h,f),o}),t.subParser("unhashHTMLSpans",function(o,h,f){"use strict";o=f.converter._dispatch("unhashHTMLSpans.before",o,h,f);for(var _=0;_<f.gHtmlSpans.length;++_){for(var C=f.gHtmlSpans[_],I=0;/¨C(\d+)C/.test(C);){var L=RegExp.$1;if(C=C.replace("\xA8C"+L+"C",f.gHtmlSpans[L]),I===10){console.error("maximum nesting of 10 spans reached!!!");break}++I}o=o.replace("\xA8C"+_+"C",C)}return o=f.converter._dispatch("unhashHTMLSpans.after",o,h,f),o}),t.subParser("hashPreCodeTags",function(o,h,f){"use strict";o=f.converter._dispatch("hashPreCodeTags.before",o,h,f);var _=function(C,I,L,F){var K=L+t.subParser("encodeCode")(I,h,f)+F;return`

\xA8G`+(f.ghCodeBlocks.push({text:C,codeblock:K})-1)+`G

`};return o=t.helper.replaceRecursiveRegExp(o,_,"^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>","^ {0,3}</code>\\s*</pre>","gim"),o=f.converter._dispatch("hashPreCodeTags.after",o,h,f),o}),t.subParser("headers",function(o,h,f){"use strict";o=f.converter._dispatch("headers.before",o,h,f);var _=isNaN(parseInt(h.headerLevelStart))?1:parseInt(h.headerLevelStart),C=h.smoothLivePreview?/^(.+)[ \t]*\n={2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n=+[ \t]*\n+/gm,I=h.smoothLivePreview?/^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n-+[ \t]*\n+/gm;o=o.replace(C,function(K,W){var q=t.subParser("spanGamut")(W,h,f),G=h.noHeaderId?"":' id="'+F(W)+'"',x=_,U="<h"+x+G+">"+q+"</h"+x+">";return t.subParser("hashBlock")(U,h,f)}),o=o.replace(I,function(K,W){var q=t.subParser("spanGamut")(W,h,f),G=h.noHeaderId?"":' id="'+F(W)+'"',x=_+1,U="<h"+x+G+">"+q+"</h"+x+">";return t.subParser("hashBlock")(U,h,f)});var L=h.requireSpaceBeforeHeadingText?/^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm:/^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;o=o.replace(L,function(K,W,q){var G=q;h.customizedHeaderId&&(G=q.replace(/\s?\{([^{]+?)}\s*$/,""));var x=t.subParser("spanGamut")(G,h,f),U=h.noHeaderId?"":' id="'+F(q)+'"',z=_-1+W.length,$="<h"+z+U+">"+x+"</h"+z+">";return t.subParser("hashBlock")($,h,f)});function F(K){var W,q;if(h.customizedHeaderId){var G=K.match(/\{([^{]+?)}\s*$/);G&&G[1]&&(K=G[1])}return W=K,t.helper.isString(h.prefixHeaderId)?q=h.prefixHeaderId:h.prefixHeaderId===!0?q="section-":q="",h.rawPrefixHeaderId||(W=q+W),h.ghCompatibleHeaderId?W=W.replace(/ /g,"-").replace(/&amp;/g,"").replace(/¨T/g,"").replace(/¨D/g,"").replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g,"").toLowerCase():h.rawHeaderId?W=W.replace(/ /g,"-").replace(/&amp;/g,"&").replace(/¨T/g,"\xA8").replace(/¨D/g,"$").replace(/["']/g,"-").toLowerCase():W=W.replace(/[^\w]/g,"").toLowerCase(),h.rawPrefixHeaderId&&(W=q+W),f.hashLinkCounts[W]?W=W+"-"+f.hashLinkCounts[W]++:f.hashLinkCounts[W]=1,W}return o=f.converter._dispatch("headers.after",o,h,f),o}),t.subParser("horizontalRule",function(o,h,f){"use strict";o=f.converter._dispatch("horizontalRule.before",o,h,f);var _=t.subParser("hashBlock")("<hr />",h,f);return o=o.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm,_),o=o.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm,_),o=o.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm,_),o=f.converter._dispatch("horizontalRule.after",o,h,f),o}),t.subParser("images",function(o,h,f){"use strict";o=f.converter._dispatch("images.before",o,h,f);var _=/!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,C=/!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,I=/!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,L=/!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,F=/!\[([^\[\]]+)]()()()()()/g;function K(q,G,x,U,z,$,ee,X){return U=U.replace(/\s/g,""),W(q,G,x,U,z,$,ee,X)}function W(q,G,x,U,z,$,ee,X){var ie=f.gUrls,ae=f.gTitles,me=f.gDimensions;if(x=x.toLowerCase(),X||(X=""),q.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)U="";else if(U===""||U===null)if((x===""||x===null)&&(x=G.toLowerCase().replace(/ ?\n/g," ")),U="#"+x,!t.helper.isUndefined(ie[x]))U=ie[x],t.helper.isUndefined(ae[x])||(X=ae[x]),t.helper.isUndefined(me[x])||(z=me[x].width,$=me[x].height);else return q;G=G.replace(/"/g,"&quot;").replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),U=U.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var re='<img src="'+U+'" alt="'+G+'"';return X&&t.helper.isString(X)&&(X=X.replace(/"/g,"&quot;").replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),re+=' title="'+X+'"'),z&&$&&(z=z==="*"?"auto":z,$=$==="*"?"auto":$,re+=' width="'+z+'"',re+=' height="'+$+'"'),re+=" />",re}return o=o.replace(L,W),o=o.replace(I,K),o=o.replace(C,W),o=o.replace(_,W),o=o.replace(F,W),o=f.converter._dispatch("images.after",o,h,f),o}),t.subParser("italicsAndBold",function(o,h,f){"use strict";o=f.converter._dispatch("italicsAndBold.before",o,h,f);function _(C,I,L){return I+C+L}return h.literalMidWordUnderscores?(o=o.replace(/\b___(\S[\s\S]*?)___\b/g,function(C,I){return _(I,"<strong><em>","</em></strong>")}),o=o.replace(/\b__(\S[\s\S]*?)__\b/g,function(C,I){return _(I,"<strong>","</strong>")}),o=o.replace(/\b_(\S[\s\S]*?)_\b/g,function(C,I){return _(I,"<em>","</em>")})):(o=o.replace(/___(\S[\s\S]*?)___/g,function(C,I){return/\S$/.test(I)?_(I,"<strong><em>","</em></strong>"):C}),o=o.replace(/__(\S[\s\S]*?)__/g,function(C,I){return/\S$/.test(I)?_(I,"<strong>","</strong>"):C}),o=o.replace(/_([^\s_][\s\S]*?)_/g,function(C,I){return/\S$/.test(I)?_(I,"<em>","</em>"):C})),h.literalMidWordAsterisks?(o=o.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g,function(C,I,L){return _(L,I+"<strong><em>","</em></strong>")}),o=o.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g,function(C,I,L){return _(L,I+"<strong>","</strong>")}),o=o.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g,function(C,I,L){return _(L,I+"<em>","</em>")})):(o=o.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g,function(C,I){return/\S$/.test(I)?_(I,"<strong><em>","</em></strong>"):C}),o=o.replace(/\*\*(\S[\s\S]*?)\*\*/g,function(C,I){return/\S$/.test(I)?_(I,"<strong>","</strong>"):C}),o=o.replace(/\*([^\s*][\s\S]*?)\*/g,function(C,I){return/\S$/.test(I)?_(I,"<em>","</em>"):C})),o=f.converter._dispatch("italicsAndBold.after",o,h,f),o}),t.subParser("lists",function(o,h,f){"use strict";function _(L,F){f.gListLevel++,L=L.replace(/\n{2,}$/,`
`),L+="\xA80";var K=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,W=/\n[ \t]*\n(?!¨0)/.test(L);return h.disableForced4SpacesIndentedSublists&&(K=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm),L=L.replace(K,function(q,G,x,U,z,$,ee){ee=ee&&ee.trim()!=="";var X=t.subParser("outdent")(z,h,f),ie="";return $&&h.tasklists&&(ie=' class="task-list-item" style="list-style-type: none;"',X=X.replace(/^[ \t]*\[(x|X| )?]/m,function(){var ae='<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';return ee&&(ae+=" checked"),ae+=">",ae})),X=X.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g,function(ae){return"\xA8A"+ae}),G||X.search(/\n{2,}/)>-1?(X=t.subParser("githubCodeBlocks")(X,h,f),X=t.subParser("blockGamut")(X,h,f)):(X=t.subParser("lists")(X,h,f),X=X.replace(/\n$/,""),X=t.subParser("hashHTMLBlocks")(X,h,f),X=X.replace(/\n\n+/g,`

`),W?X=t.subParser("paragraphs")(X,h,f):X=t.subParser("spanGamut")(X,h,f)),X=X.replace("\xA8A",""),X="<li"+ie+">"+X+`</li>
`,X}),L=L.replace(/¨0/g,""),f.gListLevel--,F&&(L=L.replace(/\s+$/,"")),L}function C(L,F){if(F==="ol"){var K=L.match(/^ *(\d+)\./);if(K&&K[1]!=="1")return' start="'+K[1]+'"'}return""}function I(L,F,K){var W=h.disableForced4SpacesIndentedSublists?/^ ?\d+\.[ \t]/gm:/^ {0,3}\d+\.[ \t]/gm,q=h.disableForced4SpacesIndentedSublists?/^ ?[*+-][ \t]/gm:/^ {0,3}[*+-][ \t]/gm,G=F==="ul"?W:q,x="";if(L.search(G)!==-1)(function z($){var ee=$.search(G),X=C(L,F);ee!==-1?(x+=`

<`+F+X+`>
`+_($.slice(0,ee),!!K)+"</"+F+`>
`,F=F==="ul"?"ol":"ul",G=F==="ul"?W:q,z($.slice(ee))):x+=`

<`+F+X+`>
`+_($,!!K)+"</"+F+`>
`})(L);else{var U=C(L,F);x=`

<`+F+U+`>
`+_(L,!!K)+"</"+F+`>
`}return x}return o=f.converter._dispatch("lists.before",o,h,f),o+="\xA80",f.gListLevel?o=o.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(L,F,K){var W=K.search(/[*+-]/g)>-1?"ul":"ol";return I(F,W,!0)}):o=o.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(L,F,K,W){var q=W.search(/[*+-]/g)>-1?"ul":"ol";return I(K,q,!1)}),o=o.replace(/¨0/,""),o=f.converter._dispatch("lists.after",o,h,f),o}),t.subParser("metadata",function(o,h,f){"use strict";if(!h.metadata)return o;o=f.converter._dispatch("metadata.before",o,h,f);function _(C){f.metadata.raw=C,C=C.replace(/&/g,"&amp;").replace(/"/g,"&quot;"),C=C.replace(/\n {4}/g," "),C.replace(/^([\S ]+): +([\s\S]+?)$/gm,function(I,L,F){return f.metadata.parsed[L]=F,""})}return o=o.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/,function(C,I,L){return _(L),"\xA8M"}),o=o.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/,function(C,I,L){return I&&(f.metadata.format=I),_(L),"\xA8M"}),o=o.replace(/¨M/g,""),o=f.converter._dispatch("metadata.after",o,h,f),o}),t.subParser("outdent",function(o,h,f){"use strict";return o=f.converter._dispatch("outdent.before",o,h,f),o=o.replace(/^(\t|[ ]{1,4})/gm,"\xA80"),o=o.replace(/¨0/g,""),o=f.converter._dispatch("outdent.after",o,h,f),o}),t.subParser("paragraphs",function(o,h,f){"use strict";o=f.converter._dispatch("paragraphs.before",o,h,f),o=o.replace(/^\n+/g,""),o=o.replace(/\n+$/g,"");for(var _=o.split(/\n{2,}/g),C=[],I=_.length,L=0;L<I;L++){var F=_[L];F.search(/¨(K|G)(\d+)\1/g)>=0?C.push(F):F.search(/\S/)>=0&&(F=t.subParser("spanGamut")(F,h,f),F=F.replace(/^([ \t]*)/g,"<p>"),F+="</p>",C.push(F))}for(I=C.length,L=0;L<I;L++){for(var K="",W=C[L],q=!1;/¨(K|G)(\d+)\1/.test(W);){var G=RegExp.$1,x=RegExp.$2;G==="K"?K=f.gHtmlBlocks[x]:q?K=t.subParser("encodeCode")(f.ghCodeBlocks[x].text,h,f):K=f.ghCodeBlocks[x].codeblock,K=K.replace(/\$/g,"$$$$"),W=W.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/,K),/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(W)&&(q=!0)}C[L]=W}return o=C.join(`
`),o=o.replace(/^\n+/g,""),o=o.replace(/\n+$/g,""),f.converter._dispatch("paragraphs.after",o,h,f)}),t.subParser("runExtension",function(o,h,f,_){"use strict";if(o.filter)h=o.filter(h,_.converter,f);else if(o.regex){var C=o.regex;C instanceof RegExp||(C=new RegExp(C,"g")),h=h.replace(C,o.replace)}return h}),t.subParser("spanGamut",function(o,h,f){"use strict";return o=f.converter._dispatch("spanGamut.before",o,h,f),o=t.subParser("codeSpans")(o,h,f),o=t.subParser("escapeSpecialCharsWithinTagAttributes")(o,h,f),o=t.subParser("encodeBackslashEscapes")(o,h,f),o=t.subParser("images")(o,h,f),o=t.subParser("anchors")(o,h,f),o=t.subParser("autoLinks")(o,h,f),o=t.subParser("simplifiedAutoLinks")(o,h,f),o=t.subParser("emoji")(o,h,f),o=t.subParser("underline")(o,h,f),o=t.subParser("italicsAndBold")(o,h,f),o=t.subParser("strikethrough")(o,h,f),o=t.subParser("ellipsis")(o,h,f),o=t.subParser("hashHTMLSpans")(o,h,f),o=t.subParser("encodeAmpsAndAngles")(o,h,f),h.simpleLineBreaks?/\n\n¨K/.test(o)||(o=o.replace(/\n+/g,`<br />
`)):o=o.replace(/  +\n/g,`<br />
`),o=f.converter._dispatch("spanGamut.after",o,h,f),o}),t.subParser("strikethrough",function(o,h,f){"use strict";function _(C){return h.simplifiedAutoLink&&(C=t.subParser("simplifiedAutoLinks")(C,h,f)),"<del>"+C+"</del>"}return h.strikethrough&&(o=f.converter._dispatch("strikethrough.before",o,h,f),o=o.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g,function(C,I){return _(I)}),o=f.converter._dispatch("strikethrough.after",o,h,f)),o}),t.subParser("stripLinkDefinitions",function(o,h,f){"use strict";var _=/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,C=/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm;o+="\xA80";var I=function(L,F,K,W,q,G,x){return F=F.toLowerCase(),o.toLowerCase().split(F).length-1<2?L:(K.match(/^data:.+?\/.+?;base64,/)?f.gUrls[F]=K.replace(/\s/g,""):f.gUrls[F]=t.subParser("encodeAmpsAndAngles")(K,h,f),G?G+x:(x&&(f.gTitles[F]=x.replace(/"|'/g,"&quot;")),h.parseImgDimensions&&W&&q&&(f.gDimensions[F]={width:W,height:q}),""))};return o=o.replace(C,I),o=o.replace(_,I),o=o.replace(/¨0/,""),o}),t.subParser("tables",function(o,h,f){"use strict";if(!h.tables)return o;var _=/^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,C=/^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm;function I(q){return/^:[ \t]*--*$/.test(q)?' style="text-align:left;"':/^--*[ \t]*:[ \t]*$/.test(q)?' style="text-align:right;"':/^:[ \t]*--*[ \t]*:$/.test(q)?' style="text-align:center;"':""}function L(q,G){var x="";return q=q.trim(),(h.tablesHeaderId||h.tableHeaderId)&&(x=' id="'+q.replace(/ /g,"_").toLowerCase()+'"'),q=t.subParser("spanGamut")(q,h,f),"<th"+x+G+">"+q+`</th>
`}function F(q,G){var x=t.subParser("spanGamut")(q,h,f);return"<td"+G+">"+x+`</td>
`}function K(q,G){for(var x=`<table>
<thead>
<tr>
`,U=q.length,z=0;z<U;++z)x+=q[z];for(x+=`</tr>
</thead>
<tbody>
`,z=0;z<G.length;++z){x+=`<tr>
`;for(var $=0;$<U;++$)x+=G[z][$];x+=`</tr>
`}return x+=`</tbody>
</table>
`,x}function W(q){var G,x=q.split(`
`);for(G=0;G<x.length;++G)/^ {0,3}\|/.test(x[G])&&(x[G]=x[G].replace(/^ {0,3}\|/,"")),/\|[ \t]*$/.test(x[G])&&(x[G]=x[G].replace(/\|[ \t]*$/,"")),x[G]=t.subParser("codeSpans")(x[G],h,f);var U=x[0].split("|").map(function(re){return re.trim()}),z=x[1].split("|").map(function(re){return re.trim()}),$=[],ee=[],X=[],ie=[];for(x.shift(),x.shift(),G=0;G<x.length;++G)x[G].trim()!==""&&$.push(x[G].split("|").map(function(re){return re.trim()}));if(U.length<z.length)return q;for(G=0;G<z.length;++G)X.push(I(z[G]));for(G=0;G<U.length;++G)t.helper.isUndefined(X[G])&&(X[G]=""),ee.push(L(U[G],X[G]));for(G=0;G<$.length;++G){for(var ae=[],me=0;me<ee.length;++me)t.helper.isUndefined($[G][me]),ae.push(F($[G][me],X[me]));ie.push(ae)}return K(ee,ie)}return o=f.converter._dispatch("tables.before",o,h,f),o=o.replace(/\\(\|)/g,t.helper.escapeCharactersCallback),o=o.replace(_,W),o=o.replace(C,W),o=f.converter._dispatch("tables.after",o,h,f),o}),t.subParser("underline",function(o,h,f){"use strict";return h.underline&&(o=f.converter._dispatch("underline.before",o,h,f),h.literalMidWordUnderscores?(o=o.replace(/\b___(\S[\s\S]*?)___\b/g,function(_,C){return"<u>"+C+"</u>"}),o=o.replace(/\b__(\S[\s\S]*?)__\b/g,function(_,C){return"<u>"+C+"</u>"})):(o=o.replace(/___(\S[\s\S]*?)___/g,function(_,C){return/\S$/.test(C)?"<u>"+C+"</u>":_}),o=o.replace(/__(\S[\s\S]*?)__/g,function(_,C){return/\S$/.test(C)?"<u>"+C+"</u>":_})),o=o.replace(/(_)/g,t.helper.escapeCharactersCallback),o=f.converter._dispatch("underline.after",o,h,f)),o}),t.subParser("unescapeSpecialChars",function(o,h,f){"use strict";return o=f.converter._dispatch("unescapeSpecialChars.before",o,h,f),o=o.replace(/¨E(\d+)E/g,function(_,C){var I=parseInt(C);return String.fromCharCode(I)}),o=f.converter._dispatch("unescapeSpecialChars.after",o,h,f),o}),t.subParser("makeMarkdown.blockquote",function(o,h){"use strict";var f="";if(o.hasChildNodes())for(var _=o.childNodes,C=_.length,I=0;I<C;++I){var L=t.subParser("makeMarkdown.node")(_[I],h);L!==""&&(f+=L)}return f=f.trim(),f="> "+f.split(`
`).join(`
> `),f}),t.subParser("makeMarkdown.codeBlock",function(o,h){"use strict";var f=o.getAttribute("language"),_=o.getAttribute("precodenum");return"```"+f+`
`+h.preList[_]+"\n```"}),t.subParser("makeMarkdown.codeSpan",function(o){"use strict";return"`"+o.innerHTML+"`"}),t.subParser("makeMarkdown.emphasis",function(o,h){"use strict";var f="";if(o.hasChildNodes()){f+="*";for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);f+="*"}return f}),t.subParser("makeMarkdown.header",function(o,h,f){"use strict";var _=new Array(f+1).join("#"),C="";if(o.hasChildNodes()){C=_+" ";for(var I=o.childNodes,L=I.length,F=0;F<L;++F)C+=t.subParser("makeMarkdown.node")(I[F],h)}return C}),t.subParser("makeMarkdown.hr",function(){"use strict";return"---"}),t.subParser("makeMarkdown.image",function(o){"use strict";var h="";return o.hasAttribute("src")&&(h+="!["+o.getAttribute("alt")+"](",h+="<"+o.getAttribute("src")+">",o.hasAttribute("width")&&o.hasAttribute("height")&&(h+=" ="+o.getAttribute("width")+"x"+o.getAttribute("height")),o.hasAttribute("title")&&(h+=' "'+o.getAttribute("title")+'"'),h+=")"),h}),t.subParser("makeMarkdown.links",function(o,h){"use strict";var f="";if(o.hasChildNodes()&&o.hasAttribute("href")){var _=o.childNodes,C=_.length;f="[";for(var I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);f+="](",f+="<"+o.getAttribute("href")+">",o.hasAttribute("title")&&(f+=' "'+o.getAttribute("title")+'"'),f+=")"}return f}),t.subParser("makeMarkdown.list",function(o,h,f){"use strict";var _="";if(!o.hasChildNodes())return"";for(var C=o.childNodes,I=C.length,L=o.getAttribute("start")||1,F=0;F<I;++F)if(!(typeof C[F].tagName>"u"||C[F].tagName.toLowerCase()!=="li")){var K="";f==="ol"?K=L.toString()+". ":K="- ",_+=K+t.subParser("makeMarkdown.listItem")(C[F],h),++L}return _+=`
<!-- -->
`,_.trim()}),t.subParser("makeMarkdown.listItem",function(o,h){"use strict";for(var f="",_=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);return/\n$/.test(f)?f=f.split(`
`).join(`
    `).replace(/^ {4}$/gm,"").replace(/\n\n+/g,`

`):f+=`
`,f}),t.subParser("makeMarkdown.node",function(o,h,f){"use strict";f=f||!1;var _="";if(o.nodeType===3)return t.subParser("makeMarkdown.txt")(o,h);if(o.nodeType===8)return"<!--"+o.data+`-->

`;if(o.nodeType!==1)return"";var C=o.tagName.toLowerCase();switch(C){case"h1":f||(_=t.subParser("makeMarkdown.header")(o,h,1)+`

`);break;case"h2":f||(_=t.subParser("makeMarkdown.header")(o,h,2)+`

`);break;case"h3":f||(_=t.subParser("makeMarkdown.header")(o,h,3)+`

`);break;case"h4":f||(_=t.subParser("makeMarkdown.header")(o,h,4)+`

`);break;case"h5":f||(_=t.subParser("makeMarkdown.header")(o,h,5)+`

`);break;case"h6":f||(_=t.subParser("makeMarkdown.header")(o,h,6)+`

`);break;case"p":f||(_=t.subParser("makeMarkdown.paragraph")(o,h)+`

`);break;case"blockquote":f||(_=t.subParser("makeMarkdown.blockquote")(o,h)+`

`);break;case"hr":f||(_=t.subParser("makeMarkdown.hr")(o,h)+`

`);break;case"ol":f||(_=t.subParser("makeMarkdown.list")(o,h,"ol")+`

`);break;case"ul":f||(_=t.subParser("makeMarkdown.list")(o,h,"ul")+`

`);break;case"precode":f||(_=t.subParser("makeMarkdown.codeBlock")(o,h)+`

`);break;case"pre":f||(_=t.subParser("makeMarkdown.pre")(o,h)+`

`);break;case"table":f||(_=t.subParser("makeMarkdown.table")(o,h)+`

`);break;case"code":_=t.subParser("makeMarkdown.codeSpan")(o,h);break;case"em":case"i":_=t.subParser("makeMarkdown.emphasis")(o,h);break;case"strong":case"b":_=t.subParser("makeMarkdown.strong")(o,h);break;case"del":_=t.subParser("makeMarkdown.strikethrough")(o,h);break;case"a":_=t.subParser("makeMarkdown.links")(o,h);break;case"img":_=t.subParser("makeMarkdown.image")(o,h);break;default:_=o.outerHTML+`

`}return _}),t.subParser("makeMarkdown.paragraph",function(o,h){"use strict";var f="";if(o.hasChildNodes())for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);return f=f.trim(),f}),t.subParser("makeMarkdown.pre",function(o,h){"use strict";var f=o.getAttribute("prenum");return"<pre>"+h.preList[f]+"</pre>"}),t.subParser("makeMarkdown.strikethrough",function(o,h){"use strict";var f="";if(o.hasChildNodes()){f+="~~";for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);f+="~~"}return f}),t.subParser("makeMarkdown.strong",function(o,h){"use strict";var f="";if(o.hasChildNodes()){f+="**";for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h);f+="**"}return f}),t.subParser("makeMarkdown.table",function(o,h){"use strict";var f="",_=[[],[]],C=o.querySelectorAll("thead>tr>th"),I=o.querySelectorAll("tbody>tr"),L,F;for(L=0;L<C.length;++L){var K=t.subParser("makeMarkdown.tableCell")(C[L],h),W="---";if(C[L].hasAttribute("style")){var q=C[L].getAttribute("style").toLowerCase().replace(/\s/g,"");switch(q){case"text-align:left;":W=":---";break;case"text-align:right;":W="---:";break;case"text-align:center;":W=":---:";break}}_[0][L]=K.trim(),_[1][L]=W}for(L=0;L<I.length;++L){var G=_.push([])-1,x=I[L].getElementsByTagName("td");for(F=0;F<C.length;++F){var U=" ";typeof x[F]<"u"&&(U=t.subParser("makeMarkdown.tableCell")(x[F],h)),_[G].push(U)}}var z=3;for(L=0;L<_.length;++L)for(F=0;F<_[L].length;++F){var $=_[L][F].length;$>z&&(z=$)}for(L=0;L<_.length;++L){for(F=0;F<_[L].length;++F)L===1?_[L][F].slice(-1)===":"?_[L][F]=t.helper.padEnd(_[L][F].slice(-1),z-1,"-")+":":_[L][F]=t.helper.padEnd(_[L][F],z,"-"):_[L][F]=t.helper.padEnd(_[L][F],z);f+="| "+_[L].join(" | ")+` |
`}return f.trim()}),t.subParser("makeMarkdown.tableCell",function(o,h){"use strict";var f="";if(!o.hasChildNodes())return"";for(var _=o.childNodes,C=_.length,I=0;I<C;++I)f+=t.subParser("makeMarkdown.node")(_[I],h,!0);return f.trim()}),t.subParser("makeMarkdown.txt",function(o){"use strict";var h=o.nodeValue;return h=h.replace(/ +/g," "),h=h.replace(/¨NBSP;/g," "),h=t.helper.unescapeHTMLEntities(h),h=h.replace(/([*_~|`])/g,"\\$1"),h=h.replace(/^(\s*)>/g,"\\$1>"),h=h.replace(/^#/gm,"\\#"),h=h.replace(/^(\s*)([-=]{3,})(\s*)$/,"$1\\$2$3"),h=h.replace(/^( {0,3}\d+)\./gm,"$1\\."),h=h.replace(/^( {0,3})([+-])/gm,"$1\\$2"),h=h.replace(/]([\s]*)\(/g,"\\]$1\\("),h=h.replace(/^ {0,3}\[([\S \t]*?)]:/gm,"\\[$1]:"),h});var P=this;typeof define=="function"&&define.amd?define(function(){"use strict";return t}):typeof Gs<"u"&&Gs.exports?Gs.exports=t:P.showdown=t}).call(id)});var Cc=Ha((Ra,Tu)=>{(function(e,t){typeof Ra=="object"&&typeof Tu=="object"?Tu.exports=t():typeof define=="function"&&define.amd?define("Flowbite",[],t):typeof Ra=="object"?Ra.Flowbite=t():e.Flowbite=t()})(self,function(){return function(){"use strict";var i={853:function(r,s,a){a.r(s),a.d(s,{afterMain:function(){return F},afterRead:function(){return C},afterWrite:function(){return q},applyStyles:function(){return ae},arrow:function(){return Si},auto:function(){return A},basePlacements:function(){return N},beforeMain:function(){return I},beforeRead:function(){return f},beforeWrite:function(){return K},bottom:function(){return c},clippingParents:function(){return g},computeStyles:function(){return et},createPopper:function(){return cs},createPopperBase:function(){return Kn},createPopperLite:function(){return fs},detectOverflow:function(){return Jt},end:function(){return d},eventListeners:function(){return Ft},flip:function(){return fi},hide:function(){return M},left:function(){return k},main:function(){return L},modifierPhases:function(){return G},offset:function(){return pe},placements:function(){return h},popper:function(){return E},popperGenerator:function(){return mn},popperOffsets:function(){return he},preventOverflow:function(){return ut},read:function(){return _},reference:function(){return P},right:function(){return v},start:function(){return y},top:function(){return u},variationPlacements:function(){return o},viewport:function(){return b},write:function(){return W}});var u="top",c="bottom",v="right",k="left",A="auto",N=[u,c,v,k],y="start",d="end",g="clippingParents",b="viewport",E="popper",P="reference",o=N.reduce(function(S,T){return S.concat([T+"-"+y,T+"-"+d])},[]),h=[].concat(N,[A]).reduce(function(S,T){return S.concat([T,T+"-"+y,T+"-"+d])},[]),f="beforeRead",_="read",C="afterRead",I="beforeMain",L="main",F="afterMain",K="beforeWrite",W="write",q="afterWrite",G=[f,_,C,I,L,F,K,W,q];function x(S){return S?(S.nodeName||"").toLowerCase():null}function U(S){if(S==null)return window;if(S.toString()!=="[object Window]"){var T=S.ownerDocument;return T&&T.defaultView||window}return S}function z(S){var T=U(S).Element;return S instanceof T||S instanceof Element}function $(S){var T=U(S).HTMLElement;return S instanceof T||S instanceof HTMLElement}function ee(S){if(typeof ShadowRoot>"u")return!1;var T=U(S).ShadowRoot;return S instanceof T||S instanceof ShadowRoot}function X(S){var T=S.state;Object.keys(T.elements).forEach(function(l){var m=T.styles[l]||{},p=T.attributes[l]||{},w=T.elements[l];!$(w)||!x(w)||(Object.assign(w.style,m),Object.keys(p).forEach(function(D){var R=p[D];R===!1?w.removeAttribute(D):w.setAttribute(D,R===!0?"":R)}))})}function ie(S){var T=S.state,l={popper:{position:T.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(T.elements.popper.style,l.popper),T.styles=l,T.elements.arrow&&Object.assign(T.elements.arrow.style,l.arrow),function(){Object.keys(T.elements).forEach(function(m){var p=T.elements[m],w=T.attributes[m]||{},D=Object.keys(T.styles.hasOwnProperty(m)?T.styles[m]:l[m]),R=D.reduce(function(O,j){return O[j]="",O},{});!$(p)||!x(p)||(Object.assign(p.style,R),Object.keys(w).forEach(function(O){p.removeAttribute(O)}))})}}var ae={name:"applyStyles",enabled:!0,phase:"write",fn:X,effect:ie,requires:["computeStyles"]};function me(S){return S.split("-")[0]}var re=Math.max,ye=Math.min,ne=Math.round;function xe(){var S=navigator.userAgentData;return S!=null&&S.brands?S.brands.map(function(T){return T.brand+"/"+T.version}).join(" "):navigator.userAgent}function je(){return!/^((?!chrome|android).)*safari/i.test(xe())}function He(S,T,l){T===void 0&&(T=!1),l===void 0&&(l=!1);var m=S.getBoundingClientRect(),p=1,w=1;T&&$(S)&&(p=S.offsetWidth>0&&ne(m.width)/S.offsetWidth||1,w=S.offsetHeight>0&&ne(m.height)/S.offsetHeight||1);var D=z(S)?U(S):window,R=D.visualViewport,O=!je()&&l,j=(m.left+(O&&R?R.offsetLeft:0))/p,B=(m.top+(O&&R?R.offsetTop:0))/w,V=m.width/p,J=m.height/w;return{width:V,height:J,top:B,right:j+V,bottom:B+J,left:j,x:j,y:B}}function st(S){var T=He(S),l=S.offsetWidth,m=S.offsetHeight;return Math.abs(T.width-l)<=1&&(l=T.width),Math.abs(T.height-m)<=1&&(m=T.height),{x:S.offsetLeft,y:S.offsetTop,width:l,height:m}}function At(S,T){var l=T.getRootNode&&T.getRootNode();if(S.contains(T))return!0;if(l&&ee(l)){var m=T;do{if(m&&S.isSameNode(m))return!0;m=m.parentNode||m.host}while(m)}return!1}function nt(S){return U(S).getComputedStyle(S)}function at(S){return["table","td","th"].indexOf(x(S))>=0}function ot(S){return((z(S)?S.ownerDocument:S.document)||window.document).documentElement}function Et(S){return x(S)==="html"?S:S.assignedSlot||S.parentNode||(ee(S)?S.host:null)||ot(S)}function di(S){return!$(S)||nt(S).position==="fixed"?null:S.offsetParent}function Vi(S){var T=/firefox/i.test(xe()),l=/Trident/i.test(xe());if(l&&$(S)){var m=nt(S);if(m.position==="fixed")return null}var p=Et(S);for(ee(p)&&(p=p.host);$(p)&&["html","body"].indexOf(x(p))<0;){var w=nt(p);if(w.transform!=="none"||w.perspective!=="none"||w.contain==="paint"||["transform","perspective"].indexOf(w.willChange)!==-1||T&&w.willChange==="filter"||T&&w.filter&&w.filter!=="none")return p;p=p.parentNode}return null}function Ct(S){for(var T=U(S),l=di(S);l&&at(l)&&nt(l).position==="static";)l=di(l);return l&&(x(l)==="html"||x(l)==="body"&&nt(l).position==="static")?T:l||Vi(S)||T}function Qt(S){return["top","bottom"].indexOf(S)>=0?"x":"y"}function ft(S,T,l){return re(S,ye(T,l))}function cn(S,T,l){var m=ft(S,T,l);return m>l?l:m}function ei(){return{top:0,right:0,bottom:0,left:0}}function $t(S){return Object.assign({},ei(),S)}function Nt(S,T){return T.reduce(function(l,m){return l[m]=S,l},{})}var ti=function(T,l){return T=typeof T=="function"?T(Object.assign({},l.rects,{placement:l.placement})):T,$t(typeof T!="number"?T:Nt(T,N))};function ii(S){var T,l=S.state,m=S.name,p=S.options,w=l.elements.arrow,D=l.modifiersData.popperOffsets,R=me(l.placement),O=Qt(R),j=[k,v].indexOf(R)>=0,B=j?"height":"width";if(!(!w||!D)){var V=ti(p.padding,l),J=st(w),Y=O==="y"?u:k,se=O==="y"?c:v,oe=l.rects.reference[B]+l.rects.reference[O]-D[O]-l.rects.popper[B],ue=D[O]-l.rects.reference[O],ge=Ct(w),_e=ge?O==="y"?ge.clientHeight||0:ge.clientWidth||0:0,Le=oe/2-ue/2,ke=V[Y],De=_e-J[B]-V[se],ve=_e/2-J[B]/2+Le,Te=ft(ke,ve,De),Re=O;l.modifiersData[m]=(T={},T[Re]=Te,T.centerOffset=Te-ve,T)}}function hn(S){var T=S.state,l=S.options,m=l.element,p=m===void 0?"[data-popper-arrow]":m;p!=null&&(typeof p=="string"&&(p=T.elements.popper.querySelector(p),!p)||At(T.elements.popper,p)&&(T.elements.arrow=p))}var Si={name:"arrow",enabled:!0,phase:"main",fn:ii,effect:hn,requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function qt(S){return S.split("-")[1]}var fn={top:"auto",right:"auto",bottom:"auto",left:"auto"};function pn(S){var T=S.x,l=S.y,m=window,p=m.devicePixelRatio||1;return{x:ne(T*p)/p||0,y:ne(l*p)/p||0}}function ci(S){var T,l=S.popper,m=S.popperRect,p=S.placement,w=S.variation,D=S.offsets,R=S.position,O=S.gpuAcceleration,j=S.adaptive,B=S.roundOffsets,V=S.isFixed,J=D.x,Y=J===void 0?0:J,se=D.y,oe=se===void 0?0:se,ue=typeof B=="function"?B({x:Y,y:oe}):{x:Y,y:oe};Y=ue.x,oe=ue.y;var ge=D.hasOwnProperty("x"),_e=D.hasOwnProperty("y"),Le=k,ke=u,De=window;if(j){var ve=Ct(l),Te="clientHeight",Re="clientWidth";if(ve===U(l)&&(ve=ot(l),nt(ve).position!=="static"&&R==="absolute"&&(Te="scrollHeight",Re="scrollWidth")),ve=ve,p===u||(p===k||p===v)&&w===d){ke=c;var Oe=V&&ve===De&&De.visualViewport?De.visualViewport.height:ve[Te];oe-=Oe-m.height,oe*=O?1:-1}if(p===k||(p===u||p===c)&&w===d){Le=v;var Pe=V&&ve===De&&De.visualViewport?De.visualViewport.width:ve[Re];Y-=Pe-m.width,Y*=O?1:-1}}var Ce=Object.assign({position:R},j&&fn),Me=B===!0?pn({x:Y,y:oe}):{x:Y,y:oe};if(Y=Me.x,oe=Me.y,O){var ze;return Object.assign({},Ce,(ze={},ze[ke]=_e?"0":"",ze[Le]=ge?"0":"",ze.transform=(De.devicePixelRatio||1)<=1?"translate("+Y+"px, "+oe+"px)":"translate3d("+Y+"px, "+oe+"px, 0)",ze))}return Object.assign({},Ce,(T={},T[ke]=_e?oe+"px":"",T[Le]=ge?Y+"px":"",T.transform="",T))}function Kt(S){var T=S.state,l=S.options,m=l.gpuAcceleration,p=m===void 0?!0:m,w=l.adaptive,D=w===void 0?!0:w,R=l.roundOffsets,O=R===void 0?!0:R;if(!1)var j;var B={placement:me(T.placement),variation:qt(T.placement),popper:T.elements.popper,popperRect:T.rects.popper,gpuAcceleration:p,isFixed:T.options.strategy==="fixed"};T.modifiersData.popperOffsets!=null&&(T.styles.popper=Object.assign({},T.styles.popper,ci(Object.assign({},B,{offsets:T.modifiersData.popperOffsets,position:T.options.strategy,adaptive:D,roundOffsets:O})))),T.modifiersData.arrow!=null&&(T.styles.arrow=Object.assign({},T.styles.arrow,ci(Object.assign({},B,{offsets:T.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:O})))),T.attributes.popper=Object.assign({},T.attributes.popper,{"data-popper-placement":T.placement})}var et={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:Kt,data:{}},Bt={passive:!0};function pt(S){var T=S.state,l=S.instance,m=S.options,p=m.scroll,w=p===void 0?!0:p,D=m.resize,R=D===void 0?!0:D,O=U(T.elements.popper),j=[].concat(T.scrollParents.reference,T.scrollParents.popper);return w&&j.forEach(function(B){B.addEventListener("scroll",l.update,Bt)}),R&&O.addEventListener("resize",l.update,Bt),function(){w&&j.forEach(function(B){B.removeEventListener("scroll",l.update,Bt)}),R&&O.removeEventListener("resize",l.update,Bt)}}var Ft={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:pt,data:{}},Di={left:"right",right:"left",bottom:"top",top:"bottom"};function St(S){return S.replace(/left|right|bottom|top/g,function(T){return Di[T]})}var Ui={start:"end",end:"start"};function Wi(S){return S.replace(/start|end/g,function(T){return Ui[T]})}function ni(S){var T=U(S),l=T.pageXOffset,m=T.pageYOffset;return{scrollLeft:l,scrollTop:m}}function gn(S){return He(ot(S)).left+ni(S).scrollLeft}function Ue(S,T){var l=U(S),m=ot(S),p=l.visualViewport,w=m.clientWidth,D=m.clientHeight,R=0,O=0;if(p){w=p.width,D=p.height;var j=je();(j||!j&&T==="fixed")&&(R=p.offsetLeft,O=p.offsetTop)}return{width:w,height:D,x:R+gn(S),y:O}}function ri(S){var T,l=ot(S),m=ni(S),p=(T=S.ownerDocument)==null?void 0:T.body,w=re(l.scrollWidth,l.clientWidth,p?p.scrollWidth:0,p?p.clientWidth:0),D=re(l.scrollHeight,l.clientHeight,p?p.scrollHeight:0,p?p.clientHeight:0),R=-m.scrollLeft+gn(S),O=-m.scrollTop;return nt(p||l).direction==="rtl"&&(R+=re(l.clientWidth,p?p.clientWidth:0)-w),{width:w,height:D,x:R,y:O}}function $i(S){var T=nt(S),l=T.overflow,m=T.overflowX,p=T.overflowY;return/auto|scroll|overlay|hidden/.test(l+p+m)}function Ti(S){return["html","body","#document"].indexOf(x(S))>=0?S.ownerDocument.body:$(S)&&$i(S)?S:Ti(Et(S))}function jt(S,T){var l;T===void 0&&(T=[]);var m=Ti(S),p=m===((l=S.ownerDocument)==null?void 0:l.body),w=U(m),D=p?[w].concat(w.visualViewport||[],$i(m)?m:[]):m,R=T.concat(D);return p?R:R.concat(jt(Et(D)))}function qi(S){return Object.assign({},S,{left:S.x,top:S.y,right:S.x+S.width,bottom:S.y+S.height})}function zn(S,T){var l=He(S,!1,T==="fixed");return l.top=l.top+S.clientTop,l.left=l.left+S.clientLeft,l.bottom=l.top+S.clientHeight,l.right=l.left+S.clientWidth,l.width=S.clientWidth,l.height=S.clientHeight,l.x=l.left,l.y=l.top,l}function gt(S,T,l){return T===b?qi(Ue(S,l)):z(T)?zn(T,l):qi(ri(ot(S)))}function hi(S){var T=jt(Et(S)),l=["absolute","fixed"].indexOf(nt(S).position)>=0,m=l&&$(S)?Ct(S):S;return z(m)?T.filter(function(p){return z(p)&&At(p,m)&&x(p)!=="body"}):[]}function Vn(S,T,l,m){var p=T==="clippingParents"?hi(S):[].concat(T),w=[].concat(p,[l]),D=w[0],R=w.reduce(function(O,j){var B=gt(S,j,m);return O.top=re(B.top,O.top),O.right=ye(B.right,O.right),O.bottom=ye(B.bottom,O.bottom),O.left=re(B.left,O.left),O},gt(S,D,m));return R.width=R.right-R.left,R.height=R.bottom-R.top,R.x=R.left,R.y=R.top,R}function Ki(S){var T=S.reference,l=S.element,m=S.placement,p=m?me(m):null,w=m?qt(m):null,D=T.x+T.width/2-l.width/2,R=T.y+T.height/2-l.height/2,O;switch(p){case u:O={x:D,y:T.y-l.height};break;case c:O={x:D,y:T.y+T.height};break;case v:O={x:T.x+T.width,y:R};break;case k:O={x:T.x-l.width,y:R};break;default:O={x:T.x,y:T.y}}var j=p?Qt(p):null;if(j!=null){var B=j==="y"?"height":"width";switch(w){case y:O[j]=O[j]-(T[B]/2-l[B]/2);break;case d:O[j]=O[j]+(T[B]/2-l[B]/2);break;default:}}return O}function Jt(S,T){T===void 0&&(T={});var l=T,m=l.placement,p=m===void 0?S.placement:m,w=l.strategy,D=w===void 0?S.strategy:w,R=l.boundary,O=R===void 0?g:R,j=l.rootBoundary,B=j===void 0?b:j,V=l.elementContext,J=V===void 0?E:V,Y=l.altBoundary,se=Y===void 0?!1:Y,oe=l.padding,ue=oe===void 0?0:oe,ge=$t(typeof ue!="number"?ue:Nt(ue,N)),_e=J===E?P:E,Le=S.rects.popper,ke=S.elements[se?_e:J],De=Vn(z(ke)?ke:ke.contextElement||ot(S.elements.popper),O,B,D),ve=He(S.elements.reference),Te=Ki({reference:ve,element:Le,strategy:"absolute",placement:p}),Re=qi(Object.assign({},Le,Te)),Oe=J===E?Re:ve,Pe={top:De.top-Oe.top+ge.top,bottom:Oe.bottom-De.bottom+ge.bottom,left:De.left-Oe.left+ge.left,right:Oe.right-De.right+ge.right},Ce=S.modifiersData.offset;if(J===E&&Ce){var Me=Ce[p];Object.keys(Pe).forEach(function(ze){var pi=[v,c].indexOf(ze)>=0?1:-1,gi=[u,c].indexOf(ze)>=0?"y":"x";Pe[ze]+=Me[gi]*pi})}return Pe}function Un(S,T){T===void 0&&(T={});var l=T,m=l.placement,p=l.boundary,w=l.rootBoundary,D=l.padding,R=l.flipVariations,O=l.allowedAutoPlacements,j=O===void 0?h:O,B=qt(m),V=B?R?o:o.filter(function(se){return qt(se)===B}):N,J=V.filter(function(se){return j.indexOf(se)>=0});J.length===0&&(J=V);var Y=J.reduce(function(se,oe){return se[oe]=Jt(S,{placement:oe,boundary:p,rootBoundary:w,padding:D})[me(oe)],se},{});return Object.keys(Y).sort(function(se,oe){return Y[se]-Y[oe]})}function Dt(S){if(me(S)===A)return[];var T=St(S);return[Wi(S),T,Wi(T)]}function si(S){var T=S.state,l=S.options,m=S.name;if(!T.modifiersData[m]._skip){for(var p=l.mainAxis,w=p===void 0?!0:p,D=l.altAxis,R=D===void 0?!0:D,O=l.fallbackPlacements,j=l.padding,B=l.boundary,V=l.rootBoundary,J=l.altBoundary,Y=l.flipVariations,se=Y===void 0?!0:Y,oe=l.allowedAutoPlacements,ue=T.options.placement,ge=me(ue),_e=ge===ue,Le=O||(_e||!se?[St(ue)]:Dt(ue)),ke=[ue].concat(Le).reduce(function(Gn,Yi){return Gn.concat(me(Yi)===A?Un(T,{placement:Yi,boundary:B,rootBoundary:V,padding:j,flipVariations:se,allowedAutoPlacements:oe}):Yi)},[]),De=T.rects.reference,ve=T.rects.popper,Te=new Map,Re=!0,Oe=ke[0],Pe=0;Pe<ke.length;Pe++){var Ce=ke[Pe],Me=me(Ce),ze=qt(Ce)===y,pi=[u,c].indexOf(Me)>=0,gi=pi?"width":"height",lt=Jt(T,{placement:Ce,boundary:B,rootBoundary:V,altBoundary:J,padding:j}),Fe=pi?ze?v:k:ze?c:u;De[gi]>ve[gi]&&(Fe=St(Fe));var Jn=St(Fe),mi=[];if(w&&mi.push(lt[Me]<=0),R&&mi.push(lt[Fe]<=0,lt[Jn]<=0),mi.every(function(Gn){return Gn})){Oe=Ce,Re=!1;break}Te.set(Ce,mi)}if(Re)for(var ps=se?3:1,Na=function(Yi){var vr=ke.find(function(ms){var vn=Te.get(ms);if(vn)return vn.slice(0,Yi).every(function(Ba){return Ba})});if(vr)return Oe=vr,"break"},mr=ps;mr>0;mr--){var gs=Na(mr);if(gs==="break")break}T.placement!==Oe&&(T.modifiersData[m]._skip=!0,T.placement=Oe,T.reset=!0)}}var fi={name:"flip",enabled:!0,phase:"main",fn:si,requiresIfExists:["offset"],data:{_skip:!1}};function Ji(S,T,l){return l===void 0&&(l={x:0,y:0}),{top:S.top-T.height-l.y,right:S.right-T.width+l.x,bottom:S.bottom-T.height+l.y,left:S.left-T.width-l.x}}function Gi(S){return[u,v,c,k].some(function(T){return S[T]>=0})}function Wn(S){var T=S.state,l=S.name,m=T.rects.reference,p=T.rects.popper,w=T.modifiersData.preventOverflow,D=Jt(T,{elementContext:"reference"}),R=Jt(T,{altBoundary:!0}),O=Ji(D,m),j=Ji(R,p,w),B=Gi(O),V=Gi(j);T.modifiersData[l]={referenceClippingOffsets:O,popperEscapeOffsets:j,isReferenceHidden:B,hasPopperEscaped:V},T.attributes.popper=Object.assign({},T.attributes.popper,{"data-popper-reference-hidden":B,"data-popper-escaped":V})}var M={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:Wn};function te(S,T,l){var m=me(S),p=[k,u].indexOf(m)>=0?-1:1,w=typeof l=="function"?l(Object.assign({},T,{placement:S})):l,D=w[0],R=w[1];return D=D||0,R=(R||0)*p,[k,v].indexOf(m)>=0?{x:R,y:D}:{x:D,y:R}}function Q(S){var T=S.state,l=S.options,m=S.name,p=l.offset,w=p===void 0?[0,0]:p,D=h.reduce(function(B,V){return B[V]=te(V,T.rects,w),B},{}),R=D[T.placement],O=R.x,j=R.y;T.modifiersData.popperOffsets!=null&&(T.modifiersData.popperOffsets.x+=O,T.modifiersData.popperOffsets.y+=j),T.modifiersData[m]=D}var pe={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:Q};function Ee(S){var T=S.state,l=S.name;T.modifiersData[l]=Ki({reference:T.rects.reference,element:T.rects.popper,strategy:"absolute",placement:T.placement})}var he={name:"popperOffsets",enabled:!0,phase:"read",fn:Ee,data:{}};function We(S){return S==="x"?"y":"x"}function Tt(S){var T=S.state,l=S.options,m=S.name,p=l.mainAxis,w=p===void 0?!0:p,D=l.altAxis,R=D===void 0?!1:D,O=l.boundary,j=l.rootBoundary,B=l.altBoundary,V=l.padding,J=l.tether,Y=J===void 0?!0:J,se=l.tetherOffset,oe=se===void 0?0:se,ue=Jt(T,{boundary:O,rootBoundary:j,padding:V,altBoundary:B}),ge=me(T.placement),_e=qt(T.placement),Le=!_e,ke=Qt(ge),De=We(ke),ve=T.modifiersData.popperOffsets,Te=T.rects.reference,Re=T.rects.popper,Oe=typeof oe=="function"?oe(Object.assign({},T.rects,{placement:T.placement})):oe,Pe=typeof Oe=="number"?{mainAxis:Oe,altAxis:Oe}:Object.assign({mainAxis:0,altAxis:0},Oe),Ce=T.modifiersData.offset?T.modifiersData.offset[T.placement]:null,Me={x:0,y:0};if(ve){if(w){var ze,pi=ke==="y"?u:k,gi=ke==="y"?c:v,lt=ke==="y"?"height":"width",Fe=ve[ke],Jn=Fe+ue[pi],mi=Fe-ue[gi],ps=Y?-Re[lt]/2:0,Na=_e===y?Te[lt]:Re[lt],mr=_e===y?-Re[lt]:-Te[lt],gs=T.elements.arrow,Gn=Y&&gs?st(gs):{width:0,height:0},Yi=T.modifiersData["arrow#persistent"]?T.modifiersData["arrow#persistent"].padding:ei(),vr=Yi[pi],ms=Yi[gi],vn=ft(0,Te[lt],Gn[lt]),Ba=Le?Te[lt]/2-ps-vn-vr-Pe.mainAxis:Na-vn-vr-Pe.mainAxis,Dc=Le?-Te[lt]/2+ps+vn+ms+Pe.mainAxis:mr+vn+ms+Pe.mainAxis,Fa=T.elements.arrow&&Ct(T.elements.arrow),Tc=Fa?ke==="y"?Fa.clientTop||0:Fa.clientLeft||0:0,Ru=(ze=Ce?.[ke])!=null?ze:0,xc=Fe+Ba-Ru-Tc,Lc=Fe+Dc-Ru,Pu=ft(Y?ye(Jn,xc):Jn,Fe,Y?re(mi,Lc):mi);ve[ke]=Pu,Me[ke]=Pu-Fe}if(R){var Iu,Rc=ke==="x"?u:k,Pc=ke==="x"?c:v,bn=ve[De],vs=De==="y"?"height":"width",Ou=bn+ue[Rc],Mu=bn-ue[Pc],ja=[u,k].indexOf(ge)!==-1,Nu=(Iu=Ce?.[De])!=null?Iu:0,Bu=ja?Ou:bn-Te[vs]-Re[vs]-Nu+Pe.altAxis,Fu=ja?bn+Te[vs]+Re[vs]-Nu-Pe.altAxis:Mu,ju=Y&&ja?cn(Bu,bn,Fu):ft(Y?Bu:Ou,bn,Y?Fu:Mu);ve[De]=ju,Me[De]=ju-bn}T.modifiersData[m]=Me}}var ut={name:"preventOverflow",enabled:!0,phase:"main",fn:Tt,requiresIfExists:["offset"]};function Ye(S){return{scrollLeft:S.scrollLeft,scrollTop:S.scrollTop}}function Xi(S){return S===U(S)||!$(S)?ni(S):Ye(S)}function $n(S){var T=S.getBoundingClientRect(),l=ne(T.width)/S.offsetWidth||1,m=ne(T.height)/S.offsetHeight||1;return l!==1||m!==1}function us(S,T,l){l===void 0&&(l=!1);var m=$(T),p=$(T)&&$n(T),w=ot(T),D=He(S,p,l),R={scrollLeft:0,scrollTop:0},O={x:0,y:0};return(m||!m&&!l)&&((x(T)!=="body"||$i(w))&&(R=Xi(T)),$(T)?(O=He(T,!0),O.x+=T.clientLeft,O.y+=T.clientTop):w&&(O.x=gn(w))),{x:D.left+R.scrollLeft-O.x,y:D.top+R.scrollTop-O.y,width:D.width,height:D.height}}function qn(S){var T=new Map,l=new Set,m=[];S.forEach(function(w){T.set(w.name,w)});function p(w){l.add(w.name);var D=[].concat(w.requires||[],w.requiresIfExists||[]);D.forEach(function(R){if(!l.has(R)){var O=T.get(R);O&&p(O)}}),m.push(w)}return S.forEach(function(w){l.has(w.name)||p(w)}),m}function Ia(S){var T=qn(S);return G.reduce(function(l,m){return l.concat(T.filter(function(p){return p.phase===m}))},[])}function Oa(S){var T;return function(){return T||(T=new Promise(function(l){Promise.resolve().then(function(){T=void 0,l(S())})})),T}}function Ma(S){var T=S.reduce(function(l,m){var p=l[m.name];return l[m.name]=p?Object.assign({},p,m,{options:Object.assign({},p.options,m.options),data:Object.assign({},p.data,m.data)}):m,l},{});return Object.keys(T).map(function(l){return T[l]})}var xu="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",Lu="Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.",ls={placement:"bottom",modifiers:[],strategy:"absolute"};function gr(){for(var S=arguments.length,T=new Array(S),l=0;l<S;l++)T[l]=arguments[l];return!T.some(function(m){return!(m&&typeof m.getBoundingClientRect=="function")})}function mn(S){S===void 0&&(S={});var T=S,l=T.defaultModifiers,m=l===void 0?[]:l,p=T.defaultOptions,w=p===void 0?ls:p;return function(R,O,j){j===void 0&&(j=w);var B={placement:"bottom",orderedModifiers:[],options:Object.assign({},ls,w),modifiersData:{},elements:{reference:R,popper:O},attributes:{},styles:{}},V=[],J=!1,Y={state:B,setOptions:function(ge){var _e=typeof ge=="function"?ge(B.options):ge;oe(),B.options=Object.assign({},w,B.options,_e),B.scrollParents={reference:z(R)?jt(R):R.contextElement?jt(R.contextElement):[],popper:jt(O)};var Le=Ia(Ma([].concat(m,B.options.modifiers)));if(B.orderedModifiers=Le.filter(function(Ce){return Ce.enabled}),!1)var ke,De,ve,Te,Re,Oe,Pe;return se(),Y.update()},forceUpdate:function(){if(!J){var ge=B.elements,_e=ge.reference,Le=ge.popper;if(gr(_e,Le)){B.rects={reference:us(_e,Ct(Le),B.options.strategy==="fixed"),popper:st(Le)},B.reset=!1,B.placement=B.options.placement,B.orderedModifiers.forEach(function(Ce){return B.modifiersData[Ce.name]=Object.assign({},Ce.data)});for(var ke=0,De=0;De<B.orderedModifiers.length;De++){if(B.reset===!0){B.reset=!1,De=-1;continue}var ve=B.orderedModifiers[De],Te=ve.fn,Re=ve.options,Oe=Re===void 0?{}:Re,Pe=ve.name;typeof Te=="function"&&(B=Te({state:B,options:Oe,name:Pe,instance:Y})||B)}}}},update:Oa(function(){return new Promise(function(ue){Y.forceUpdate(),ue(B)})}),destroy:function(){oe(),J=!0}};if(!gr(R,O))return Y;Y.setOptions(j).then(function(ue){!J&&j.onFirstUpdate&&j.onFirstUpdate(ue)});function se(){B.orderedModifiers.forEach(function(ue){var ge=ue.name,_e=ue.options,Le=_e===void 0?{}:_e,ke=ue.effect;if(typeof ke=="function"){var De=ke({state:B,name:ge,instance:Y,options:Le}),ve=function(){};V.push(De||ve)}})}function oe(){V.forEach(function(ue){return ue()}),V=[]}return Y}}var Kn=mn(),ds=[Ft,he,et,ae,pe,fi,ut,Si,M],cs=mn({defaultModifiers:ds}),hs=[Ft,he,et,ae],fs=mn({defaultModifiers:hs})},554:function(r,s){Object.defineProperty(s,"__esModule",{value:!0});function a(l,m){(m==null||m>l.length)&&(m=l.length);for(var p=0,w=Array(m);p<m;p++)w[p]=l[p];return w}function u(l){if(Array.isArray(l))return l}function c(l){if(Array.isArray(l))return a(l)}function v(l){if(l===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return l}function k(l,m,p){return m=g(m),_(l,E()?Reflect.construct(m,p||[],g(l).constructor):m.apply(l,p))}function A(l,m){if(!(l instanceof m))throw new TypeError("Cannot call a class as a function")}function N(l,m){for(var p=0;p<m.length;p++){var w=m[p];w.enumerable=w.enumerable||!1,w.configurable=!0,"value"in w&&(w.writable=!0),Object.defineProperty(l,W(w.key),w)}}function y(l,m,p){return m&&N(l.prototype,m),p&&N(l,p),Object.defineProperty(l,"prototype",{writable:!1}),l}function d(){return d=typeof Reflect<"u"&&Reflect.get?Reflect.get.bind():function(l,m,p){var w=L(l,m);if(w){var D=Object.getOwnPropertyDescriptor(w,m);return D.get?D.get.call(arguments.length<3?l:p):D.value}},d.apply(null,arguments)}function g(l){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(m){return m.__proto__||Object.getPrototypeOf(m)},g(l)}function b(l,m){if(typeof m!="function"&&m!==null)throw new TypeError("Super expression must either be null or a function");l.prototype=Object.create(m&&m.prototype,{constructor:{value:l,writable:!0,configurable:!0}}),Object.defineProperty(l,"prototype",{writable:!1}),m&&C(l,m)}function E(){try{var l=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch{}return(E=function(){return!!l})()}function P(l){if(typeof Symbol<"u"&&l[Symbol.iterator]!=null||l["@@iterator"]!=null)return Array.from(l)}function o(l,m){var p=l==null?null:typeof Symbol<"u"&&l[Symbol.iterator]||l["@@iterator"];if(p!=null){var w,D,R,O,j=[],B=!0,V=!1;try{if(R=(p=p.call(l)).next,m===0){if(Object(p)!==p)return;B=!1}else for(;!(B=(w=R.call(p)).done)&&(j.push(w.value),j.length!==m);B=!0);}catch(J){V=!0,D=J}finally{try{if(!B&&p.return!=null&&(O=p.return(),Object(O)!==O))return}finally{if(V)throw D}}return j}}function h(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function f(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _(l,m){if(m&&(typeof m=="object"||typeof m=="function"))return m;if(m!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return v(l)}function C(l,m){return C=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(p,w){return p.__proto__=w,p},C(l,m)}function I(l,m){return u(l)||o(l,m)||G(l,m)||h()}function L(l,m){for(;!{}.hasOwnProperty.call(l,m)&&(l=g(l))!==null;);return l}function F(l){return c(l)||P(l)||G(l)||f()}function K(l,m){if(typeof l!="object"||!l)return l;var p=l[Symbol.toPrimitive];if(p!==void 0){var w=p.call(l,m||"default");if(typeof w!="object")return w;throw new TypeError("@@toPrimitive must return a primitive value.")}return(m==="string"?String:Number)(l)}function W(l){var m=K(l,"string");return typeof m=="symbol"?m:m+""}function q(l){return q=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(m){return typeof m}:function(m){return m&&typeof Symbol=="function"&&m.constructor===Symbol&&m!==Symbol.prototype?"symbol":typeof m},q(l)}function G(l,m){if(l){if(typeof l=="string")return a(l,m);var p={}.toString.call(l).slice(8,-1);return p==="Object"&&l.constructor&&(p=l.constructor.name),p==="Map"||p==="Set"?Array.from(l):p==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(p)?a(l,m):void 0}}function x(l,m){return Object.prototype.hasOwnProperty.call(l,m)}function U(l){return l[l.length-1]}function z(l){for(var m=arguments.length,p=new Array(m>1?m-1:0),w=1;w<m;w++)p[w-1]=arguments[w];return p.forEach(function(D){l.includes(D)||l.push(D)}),l}function $(l,m){return l?l.split(m):[]}function ee(l,m,p){var w=m===void 0||l>=m,D=p===void 0||l<=p;return w&&D}function X(l,m,p){return l<m?m:l>p?p:l}function ie(l,m){var p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},w=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,D=arguments.length>4&&arguments[4]!==void 0?arguments[4]:"",R=Object.keys(p).reduce(function(j,B){var V=p[B];return typeof V=="function"&&(V=V(w)),"".concat(j," ").concat(B,'="').concat(V,'"')},l);D+="<".concat(R,"></").concat(l,">");var O=w+1;return O<m?ie(l,m,p,O,D):D}function ae(l){return l.replace(/>\s+/g,">").replace(/\s+</,"<")}function me(l){return new Date(l).setHours(0,0,0,0)}function re(){return new Date().setHours(0,0,0,0)}function ye(){switch(arguments.length){case 0:return re();case 1:return me(arguments.length<=0?void 0:arguments[0])}var l=new Date(0);return l.setFullYear.apply(l,arguments),l.setHours(0,0,0,0)}function ne(l,m){var p=new Date(l);return p.setDate(p.getDate()+m)}function xe(l,m){return ne(l,m*7)}function je(l,m){var p=new Date(l),w=p.getMonth()+m,D=w%12;D<0&&(D+=12);var R=p.setMonth(w);return p.getMonth()!==D?p.setDate(0):R}function He(l,m){var p=new Date(l),w=p.getMonth(),D=p.setFullYear(p.getFullYear()+m);return w===1&&p.getMonth()===2?p.setDate(0):D}function st(l,m){return(l-m+7)%7}function At(l,m){var p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:0,w=new Date(l).getDay();return ne(l,st(m,p)-st(w,p))}function nt(l){var m=At(l,4,1),p=At(new Date(m).setMonth(0,4),4,1);return Math.round((m-p)/6048e5)+1}function at(l,m){var p=new Date(l).getFullYear();return Math.floor(p/m)*m}var ot=/dd?|DD?|mm?|MM?|yy?(?:yy)?/,Et=/[\s!-/:-@[-`{-~年月日]+/,di={},Vi={y:function(m,p){return new Date(m).setFullYear(parseInt(p,10))},m:function(m,p,w){var D=new Date(m),R=parseInt(p,10)-1;if(isNaN(R)){if(!p)return NaN;var O=p.toLowerCase(),j=function(V){return V.toLowerCase().startsWith(O)};if(R=w.monthsShort.findIndex(j),R<0&&(R=w.months.findIndex(j)),R<0)return NaN}return D.setMonth(R),D.getMonth()!==Qt(R)?D.setDate(0):D.getTime()},d:function(m,p){return new Date(m).setDate(parseInt(p,10))}},Ct={d:function(m){return m.getDate()},dd:function(m){return ft(m.getDate(),2)},D:function(m,p){return p.daysShort[m.getDay()]},DD:function(m,p){return p.days[m.getDay()]},m:function(m){return m.getMonth()+1},mm:function(m){return ft(m.getMonth()+1,2)},M:function(m,p){return p.monthsShort[m.getMonth()]},MM:function(m,p){return p.months[m.getMonth()]},y:function(m){return m.getFullYear()},yy:function(m){return ft(m.getFullYear(),2).slice(-2)},yyyy:function(m){return ft(m.getFullYear(),4)}};function Qt(l){return l>-1?l%12:Qt(l+12)}function ft(l,m){return l.toString().padStart(m,"0")}function cn(l){if(typeof l!="string")throw new Error("Invalid date format.");if(l in di)return di[l];var m=l.split(ot),p=l.match(new RegExp(ot,"g"));if(m.length===0||!p)throw new Error("Invalid date format.");var w=p.map(function(R){return Ct[R]}),D=Object.keys(Vi).reduce(function(R,O){var j=p.find(function(B){return B[0]!=="D"&&B[0].toLowerCase()===O});return j&&R.push(O),R},[]);return di[l]={parser:function(O,j){var B=O.split(Et).reduce(function(V,J,Y){if(J.length>0&&p[Y]){var se=p[Y][0];se==="M"?V.m=J:se!=="D"&&(V[se]=J)}return V},{});return D.reduce(function(V,J){var Y=Vi[J](V,B[J],j);return isNaN(Y)?V:Y},re())},formatter:function(O,j){var B=w.reduce(function(V,J,Y){return V+="".concat(m[Y]).concat(J(O,j))},"");return B+=U(m)}}}function ei(l,m,p){if(l instanceof Date||typeof l=="number"){var w=me(l);return isNaN(w)?void 0:w}if(l){if(l==="today")return re();if(m&&m.toValue){var D=m.toValue(l,m,p);return isNaN(D)?void 0:me(D)}return cn(m).parser(l,p)}}function $t(l,m,p){if(isNaN(l)||!l&&l!==0)return"";var w=typeof l=="number"?new Date(l):l;return m.toDisplay?m.toDisplay(w,m,p):cn(m).formatter(w,p)}var Nt=new WeakMap,ti=EventTarget.prototype,ii=ti.addEventListener,hn=ti.removeEventListener;function Si(l,m){var p=Nt.get(l);p||(p=[],Nt.set(l,p)),m.forEach(function(w){ii.call.apply(ii,F(w)),p.push(w)})}function qt(l){var m=Nt.get(l);m&&(m.forEach(function(p){hn.call.apply(hn,F(p))}),Nt.delete(l))}if(!Event.prototype.composedPath){var fn=function l(m){var p=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];p.push(m);var w;return m.parentNode?w=m.parentNode:m.host?w=m.host:m.defaultView&&(w=m.defaultView),w?l(w,p):p};Event.prototype.composedPath=function(){return fn(this.target)}}function pn(l,m,p){var w=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,D=l[w];return m(D)?D:D===p||!D.parentElement?void 0:pn(l,m,p,w+1)}function ci(l,m){var p=typeof m=="function"?m:function(w){return w.matches(m)};return pn(l.composedPath(),p,l.currentTarget)}var Kt={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear",titleFormat:"MM y"}},et={autohide:!1,beforeShowDay:null,beforeShowDecade:null,beforeShowMonth:null,beforeShowYear:null,calendarWeeks:!1,clearBtn:!1,dateDelimiter:",",datesDisabled:[],daysOfWeekDisabled:[],daysOfWeekHighlighted:[],defaultViewDate:void 0,disableTouchKeyboard:!1,format:"mm/dd/yyyy",language:"en",maxDate:null,maxNumberOfDates:1,maxView:3,minDate:null,nextArrow:'<svg class="w-4 h-4 rtl:rotate-180 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/></svg>',orientation:"auto",pickLevel:0,prevArrow:'<svg class="w-4 h-4 rtl:rotate-180 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5H1m0 0 4 4M1 5l4-4"/></svg>',showDaysOfWeek:!0,showOnClick:!0,showOnFocus:!0,startView:0,title:"",todayBtn:!1,todayBtnMode:0,todayHighlight:!1,updateOnBlur:!0,weekStart:0},Bt=document.createRange();function pt(l){return Bt.createContextualFragment(l)}function Ft(l){l.style.display!=="none"&&(l.style.display&&(l.dataset.styleDisplay=l.style.display),l.style.display="none")}function Di(l){l.style.display==="none"&&(l.dataset.styleDisplay?(l.style.display=l.dataset.styleDisplay,delete l.dataset.styleDisplay):l.style.display="")}function St(l){l.firstChild&&(l.removeChild(l.firstChild),St(l))}function Ui(l,m){St(l),m instanceof DocumentFragment?l.appendChild(m):typeof m=="string"?l.appendChild(pt(m)):typeof m.forEach=="function"&&m.forEach(function(p){l.appendChild(p)})}var Wi=et.language,ni=et.format,gn=et.weekStart;function Ue(l,m){return l.length<6&&m>=0&&m<7?z(l,m):l}function ri(l){return(l+6)%7}function $i(l,m,p,w){var D=ei(l,m,p);return D!==void 0?D:w}function Ti(l,m){var p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:3,w=parseInt(l,10);return w>=0&&w<=p?w:m}function jt(l,m){var p=Object.assign({},l),w={},D=m.constructor.locales,R=m.config||{},O=R.format,j=R.language,B=R.locale,V=R.maxDate,J=R.maxView,Y=R.minDate,se=R.pickLevel,oe=R.startView,ue=R.weekStart;if(p.language){var ge;if(p.language!==j&&(D[p.language]?ge=p.language:(ge=p.language.split("-")[0],D[ge]===void 0&&(ge=!1))),delete p.language,ge){j=w.language=ge;var _e=B||D[Wi];B=Object.assign({format:ni,weekStart:gn},D[Wi]),j!==Wi&&Object.assign(B,D[j]),w.locale=B,O===_e.format&&(O=w.format=B.format),ue===_e.weekStart&&(ue=w.weekStart=B.weekStart,w.weekEnd=ri(B.weekStart))}}if(p.format){var Le=typeof p.format.toDisplay=="function",ke=typeof p.format.toValue=="function",De=ot.test(p.format);(Le&&ke||De)&&(O=w.format=p.format),delete p.format}var ve=Y,Te=V;if(p.minDate!==void 0&&(ve=p.minDate===null?ye(0,0,1):$i(p.minDate,O,B,ve),delete p.minDate),p.maxDate!==void 0&&(Te=p.maxDate===null?void 0:$i(p.maxDate,O,B,Te),delete p.maxDate),Te<ve?(Y=w.minDate=Te,V=w.maxDate=ve):(Y!==ve&&(Y=w.minDate=ve),V!==Te&&(V=w.maxDate=Te)),p.datesDisabled&&(w.datesDisabled=p.datesDisabled.reduce(function(Fe,Jn){var mi=ei(Jn,O,B);return mi!==void 0?z(Fe,mi):Fe},[]),delete p.datesDisabled),p.defaultViewDate!==void 0){var Re=ei(p.defaultViewDate,O,B);Re!==void 0&&(w.defaultViewDate=Re),delete p.defaultViewDate}if(p.weekStart!==void 0){var Oe=Number(p.weekStart)%7;isNaN(Oe)||(ue=w.weekStart=Oe,w.weekEnd=ri(Oe)),delete p.weekStart}if(p.daysOfWeekDisabled&&(w.daysOfWeekDisabled=p.daysOfWeekDisabled.reduce(Ue,[]),delete p.daysOfWeekDisabled),p.daysOfWeekHighlighted&&(w.daysOfWeekHighlighted=p.daysOfWeekHighlighted.reduce(Ue,[]),delete p.daysOfWeekHighlighted),p.maxNumberOfDates!==void 0){var Pe=parseInt(p.maxNumberOfDates,10);Pe>=0&&(w.maxNumberOfDates=Pe,w.multidate=Pe!==1),delete p.maxNumberOfDates}p.dateDelimiter&&(w.dateDelimiter=String(p.dateDelimiter),delete p.dateDelimiter);var Ce=se;p.pickLevel!==void 0&&(Ce=Ti(p.pickLevel,2),delete p.pickLevel),Ce!==se&&(se=w.pickLevel=Ce);var Me=J;p.maxView!==void 0&&(Me=Ti(p.maxView,J),delete p.maxView),Me=se>Me?se:Me,Me!==J&&(J=w.maxView=Me);var ze=oe;if(p.startView!==void 0&&(ze=Ti(p.startView,ze),delete p.startView),ze<se?ze=se:ze>J&&(ze=J),ze!==oe&&(w.startView=ze),p.prevArrow){var pi=pt(p.prevArrow);pi.childNodes.length>0&&(w.prevArrow=pi.childNodes),delete p.prevArrow}if(p.nextArrow){var gi=pt(p.nextArrow);gi.childNodes.length>0&&(w.nextArrow=gi.childNodes),delete p.nextArrow}if(p.disableTouchKeyboard!==void 0&&(w.disableTouchKeyboard="ontouchstart"in document&&!!p.disableTouchKeyboard,delete p.disableTouchKeyboard),p.orientation){var lt=p.orientation.toLowerCase().split(/\s+/g);w.orientation={x:lt.find(function(Fe){return Fe==="left"||Fe==="right"})||"auto",y:lt.find(function(Fe){return Fe==="top"||Fe==="bottom"})||"auto"},delete p.orientation}if(p.todayBtnMode!==void 0){switch(p.todayBtnMode){case 0:case 1:w.todayBtnMode=p.todayBtnMode}delete p.todayBtnMode}return Object.keys(p).forEach(function(Fe){p[Fe]!==void 0&&x(et,Fe)&&(w[Fe]=p[Fe])}),w}var qi=ae(`<div class="datepicker hidden">
  <div class="datepicker-picker inline-block rounded-lg bg-white dark:bg-gray-700 shadow-lg p-4">
    <div class="datepicker-header">
      <div class="datepicker-title bg-white dark:bg-gray-700 dark:text-white px-2 py-3 text-center font-semibold"></div>
      <div class="datepicker-controls flex justify-between mb-2">
        <button type="button" class="bg-white dark:bg-gray-700 rounded-lg text-gray-500 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-600 hover:text-gray-900 dark:hover:text-white text-lg p-2.5 focus:outline-none focus:ring-2 focus:ring-gray-200 prev-btn"></button>
        <button type="button" class="text-sm rounded-lg text-gray-900 dark:text-white bg-white dark:bg-gray-700 font-semibold py-2.5 px-5 hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-200 view-switch"></button>
        <button type="button" class="bg-white dark:bg-gray-700 rounded-lg text-gray-500 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-600 hover:text-gray-900 dark:hover:text-white text-lg p-2.5 focus:outline-none focus:ring-2 focus:ring-gray-200 next-btn"></button>
      </div>
    </div>
    <div class="datepicker-main p-1"></div>
    <div class="datepicker-footer">
      <div class="datepicker-controls flex space-x-2 rtl:space-x-reverse mt-2">
        <button type="button" class="%buttonClass% today-btn text-white bg-blue-700 !bg-primary-700 dark:bg-blue-600 dark:!bg-primary-600 hover:bg-blue-800 hover:!bg-primary-800 dark:hover:bg-blue-700 dark:hover:!bg-primary-700 focus:ring-4 focus:ring-blue-300 focus:!ring-primary-300 font-medium rounded-lg text-sm px-5 py-2 text-center w-1/2"></button>
        <button type="button" class="%buttonClass% clear-btn text-gray-900 dark:text-white bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600 focus:ring-4 focus:ring-blue-300 focus:!ring-primary-300 font-medium rounded-lg text-sm px-5 py-2 text-center w-1/2"></button>
      </div>
    </div>
  </div>
</div>`),zn=ae(`<div class="days">
  <div class="days-of-week grid grid-cols-7 mb-1">`.concat(ie("span",7,{class:"dow block flex-1 leading-9 border-0 rounded-lg cursor-default text-center text-gray-900 font-semibold text-sm"}),`</div>
  <div class="datepicker-grid w-64 grid grid-cols-7">`).concat(ie("span",42,{class:"block flex-1 leading-9 border-0 rounded-lg cursor-default text-center text-gray-900 font-semibold text-sm h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400"}),`</div>
</div>`)),gt=ae(`<div class="calendar-weeks">
  <div class="days-of-week flex"><span class="dow h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400"></span></div>
  <div class="weeks">`.concat(ie("span",6,{class:"week block flex-1 leading-9 border-0 rounded-lg cursor-default text-center text-gray-900 font-semibold text-sm"}),`</div>
</div>`)),hi=function(){function l(m,p){A(this,l),Object.assign(this,p,{picker:m,element:pt('<div class="datepicker-view flex"></div>').firstChild,selected:[]}),this.init(this.picker.datepicker.config)}return y(l,[{key:"init",value:function(p){p.pickLevel!==void 0&&(this.isMinView=this.id===p.pickLevel),this.setOptions(p),this.updateFocus(),this.updateSelection()}},{key:"performBeforeHook",value:function(p,w,D){var R=this.beforeShow(new Date(D));switch(q(R)){case"boolean":R={enabled:R};break;case"string":R={classes:R}}if(R){if(R.enabled===!1&&(p.classList.add("disabled"),z(this.disabled,w)),R.classes){var O,j=R.classes.split(/\s+/);(O=p.classList).add.apply(O,F(j)),j.includes("disabled")&&z(this.disabled,w)}R.content&&Ui(p,R.content)}}}])}(),Vn=function(l){function m(p){return A(this,m),k(this,m,[p,{id:0,name:"days",cellClass:"day"}])}return b(m,l),y(m,[{key:"init",value:function(w){var D=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;if(D){var R=pt(zn).firstChild;this.dow=R.firstChild,this.grid=R.lastChild,this.element.appendChild(R)}d(g(m.prototype),"init",this).call(this,w)}},{key:"setOptions",value:function(w){var D=this,R;if(x(w,"minDate")&&(this.minDate=w.minDate),x(w,"maxDate")&&(this.maxDate=w.maxDate),w.datesDisabled&&(this.datesDisabled=w.datesDisabled),w.daysOfWeekDisabled&&(this.daysOfWeekDisabled=w.daysOfWeekDisabled,R=!0),w.daysOfWeekHighlighted&&(this.daysOfWeekHighlighted=w.daysOfWeekHighlighted),w.todayHighlight!==void 0&&(this.todayHighlight=w.todayHighlight),w.weekStart!==void 0&&(this.weekStart=w.weekStart,this.weekEnd=w.weekEnd,R=!0),w.locale){var O=this.locale=w.locale;this.dayNames=O.daysMin,this.switchLabelFormat=O.titleFormat,R=!0}if(w.beforeShowDay!==void 0&&(this.beforeShow=typeof w.beforeShowDay=="function"?w.beforeShowDay:void 0),w.calendarWeeks!==void 0)if(w.calendarWeeks&&!this.calendarWeeks){var j=pt(gt).firstChild;this.calendarWeeks={element:j,dow:j.firstChild,weeks:j.lastChild},this.element.insertBefore(j,this.element.firstChild)}else this.calendarWeeks&&!w.calendarWeeks&&(this.element.removeChild(this.calendarWeeks.element),this.calendarWeeks=null);w.showDaysOfWeek!==void 0&&(w.showDaysOfWeek?(Di(this.dow),this.calendarWeeks&&Di(this.calendarWeeks.dow)):(Ft(this.dow),this.calendarWeeks&&Ft(this.calendarWeeks.dow))),R&&Array.from(this.dow.children).forEach(function(B,V){var J=(D.weekStart+V)%7;B.textContent=D.dayNames[J],B.className=D.daysOfWeekDisabled.includes(J)?"dow disabled text-center h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400 cursor-not-allowed":"dow text-center h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400"})}},{key:"updateFocus",value:function(){var w=new Date(this.picker.viewDate),D=w.getFullYear(),R=w.getMonth(),O=ye(D,R,1),j=At(O,this.weekStart,this.weekStart);this.first=O,this.last=ye(D,R+1,0),this.start=j,this.focused=this.picker.viewDate}},{key:"updateSelection",value:function(){var w=this.picker.datepicker,D=w.dates,R=w.rangepicker;this.selected=D,R&&(this.range=R.dates)}},{key:"render",value:function(){var w=this;this.today=this.todayHighlight?re():void 0,this.disabled=F(this.datesDisabled);var D=$t(this.focused,this.switchLabelFormat,this.locale);if(this.picker.setViewSwitchLabel(D),this.picker.setPrevBtnDisabled(this.first<=this.minDate),this.picker.setNextBtnDisabled(this.last>=this.maxDate),this.calendarWeeks){var R=At(this.first,1,1);Array.from(this.calendarWeeks.weeks.children).forEach(function(O,j){O.textContent=nt(xe(R,j))})}Array.from(this.grid.children).forEach(function(O,j){var B=O.classList,V=ne(w.start,j),J=new Date(V),Y=J.getDay();if(O.className="datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ".concat(w.cellClass),O.dataset.date=V,O.textContent=J.getDate(),V<w.first?B.add("prev","text-gray-500","dark:text-white"):V>w.last&&B.add("next","text-gray-500","dark:text-white"),w.today===V&&B.add("today","bg-gray-100","dark:bg-gray-600"),(V<w.minDate||V>w.maxDate||w.disabled.includes(V))&&(B.add("disabled","cursor-not-allowed","text-gray-400","dark:text-gray-500"),B.remove("hover:bg-gray-100","dark:hover:bg-gray-600","text-gray-900","dark:text-white","cursor-pointer")),w.daysOfWeekDisabled.includes(Y)&&(B.add("disabled","cursor-not-allowed","text-gray-400","dark:text-gray-500"),B.remove("hover:bg-gray-100","dark:hover:bg-gray-600","text-gray-900","dark:text-white","cursor-pointer"),z(w.disabled,V)),w.daysOfWeekHighlighted.includes(Y)&&B.add("highlighted"),w.range){var se=I(w.range,2),oe=se[0],ue=se[1];V>oe&&V<ue&&(B.add("range","bg-gray-200","dark:bg-gray-600"),B.remove("rounded-lg","rounded-l-lg","rounded-r-lg")),V===oe&&(B.add("range-start","bg-gray-100","dark:bg-gray-600","rounded-l-lg"),B.remove("rounded-lg","rounded-r-lg")),V===ue&&(B.add("range-end","bg-gray-100","dark:bg-gray-600","rounded-r-lg"),B.remove("rounded-lg","rounded-l-lg"))}w.selected.includes(V)&&(B.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),B.remove("text-gray-900","text-gray-500","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600","dark:bg-gray-600","bg-gray-100","bg-gray-200")),V===w.focused&&B.add("focused"),w.beforeShow&&w.performBeforeHook(O,V,V)})}},{key:"refresh",value:function(){var w=this,D=this.range||[],R=I(D,2),O=R[0],j=R[1];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach(function(B){B.classList.remove("range","range-start","range-end","selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white","focused"),B.classList.add("text-gray-900","rounded-lg","dark:text-white")}),Array.from(this.grid.children).forEach(function(B){var V=Number(B.dataset.date),J=B.classList;J.remove("bg-gray-200","dark:bg-gray-600","rounded-l-lg","rounded-r-lg"),V>O&&V<j&&(J.add("range","bg-gray-200","dark:bg-gray-600"),J.remove("rounded-lg")),V===O&&(J.add("range-start","bg-gray-200","dark:bg-gray-600","rounded-l-lg"),J.remove("rounded-lg")),V===j&&(J.add("range-end","bg-gray-200","dark:bg-gray-600","rounded-r-lg"),J.remove("rounded-lg")),w.selected.includes(V)&&(J.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),J.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600","bg-gray-100","bg-gray-200","dark:bg-gray-600")),V===w.focused&&J.add("focused")})}},{key:"refreshFocus",value:function(){var w=Math.round((this.focused-this.start)/864e5);this.grid.querySelectorAll(".focused").forEach(function(D){D.classList.remove("focused")}),this.grid.children[w].classList.add("focused")}}])}(hi);function Ki(l,m){if(!(!l||!l[0]||!l[1])){var p=I(l,2),w=I(p[0],2),D=w[0],R=w[1],O=I(p[1],2),j=O[0],B=O[1];if(!(D>m||j<m))return[D===m?R:-1,j===m?B:12]}}var Jt=function(l){function m(p){return A(this,m),k(this,m,[p,{id:1,name:"months",cellClass:"month"}])}return b(m,l),y(m,[{key:"init",value:function(w){var D=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;D&&(this.grid=this.element,this.element.classList.add("months","datepicker-grid","w-64","grid","grid-cols-4"),this.grid.appendChild(pt(ie("span",12,{"data-month":function(O){return O}})))),d(g(m.prototype),"init",this).call(this,w)}},{key:"setOptions",value:function(w){if(w.locale&&(this.monthNames=w.locale.monthsShort),x(w,"minDate"))if(w.minDate===void 0)this.minYear=this.minMonth=this.minDate=void 0;else{var D=new Date(w.minDate);this.minYear=D.getFullYear(),this.minMonth=D.getMonth(),this.minDate=D.setDate(1)}if(x(w,"maxDate"))if(w.maxDate===void 0)this.maxYear=this.maxMonth=this.maxDate=void 0;else{var R=new Date(w.maxDate);this.maxYear=R.getFullYear(),this.maxMonth=R.getMonth(),this.maxDate=ye(this.maxYear,this.maxMonth+1,0)}w.beforeShowMonth!==void 0&&(this.beforeShow=typeof w.beforeShowMonth=="function"?w.beforeShowMonth:void 0)}},{key:"updateFocus",value:function(){var w=new Date(this.picker.viewDate);this.year=w.getFullYear(),this.focused=w.getMonth()}},{key:"updateSelection",value:function(){var w=this.picker.datepicker,D=w.dates,R=w.rangepicker;this.selected=D.reduce(function(O,j){var B=new Date(j),V=B.getFullYear(),J=B.getMonth();return O[V]===void 0?O[V]=[J]:z(O[V],J),O},{}),R&&R.dates&&(this.range=R.dates.map(function(O){var j=new Date(O);return isNaN(j)?void 0:[j.getFullYear(),j.getMonth()]}))}},{key:"render",value:function(){var w=this;this.disabled=[],this.picker.setViewSwitchLabel(this.year),this.picker.setPrevBtnDisabled(this.year<=this.minYear),this.picker.setNextBtnDisabled(this.year>=this.maxYear);var D=this.selected[this.year]||[],R=this.year<this.minYear||this.year>this.maxYear,O=this.year===this.minYear,j=this.year===this.maxYear,B=Ki(this.range,this.year);Array.from(this.grid.children).forEach(function(V,J){var Y=V.classList,se=ye(w.year,J,1);if(V.className="datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ".concat(w.cellClass),w.isMinView&&(V.dataset.date=se),V.textContent=w.monthNames[J],(R||O&&J<w.minMonth||j&&J>w.maxMonth)&&Y.add("disabled"),B){var oe=I(B,2),ue=oe[0],ge=oe[1];J>ue&&J<ge&&Y.add("range"),J===ue&&Y.add("range-start"),J===ge&&Y.add("range-end")}D.includes(J)&&(Y.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),Y.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")),J===w.focused&&Y.add("focused"),w.beforeShow&&w.performBeforeHook(V,J,se)})}},{key:"refresh",value:function(){var w=this,D=this.selected[this.year]||[],R=Ki(this.range,this.year)||[],O=I(R,2),j=O[0],B=O[1];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach(function(V){V.classList.remove("range","range-start","range-end","selected","bg-blue-700","!bg-primary-700","dark:bg-blue-600","dark:!bg-primary-700","dark:text-white","text-white","focused"),V.classList.add("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")}),Array.from(this.grid.children).forEach(function(V,J){var Y=V.classList;J>j&&J<B&&Y.add("range"),J===j&&Y.add("range-start"),J===B&&Y.add("range-end"),D.includes(J)&&(Y.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),Y.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")),J===w.focused&&Y.add("focused")})}},{key:"refreshFocus",value:function(){this.grid.querySelectorAll(".focused").forEach(function(w){w.classList.remove("focused")}),this.grid.children[this.focused].classList.add("focused")}}])}(hi);function Un(l){return F(l).reduce(function(m,p,w){return m+=w?p:p.toUpperCase()},"")}var Dt=function(l){function m(p,w){return A(this,m),k(this,m,[p,w])}return b(m,l),y(m,[{key:"init",value:function(w){var D=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;D&&(this.navStep=this.step*10,this.beforeShowOption="beforeShow".concat(Un(this.cellClass)),this.grid=this.element,this.element.classList.add(this.name,"datepicker-grid","w-64","grid","grid-cols-4"),this.grid.appendChild(pt(ie("span",12)))),d(g(m.prototype),"init",this).call(this,w)}},{key:"setOptions",value:function(w){if(x(w,"minDate")&&(w.minDate===void 0?this.minYear=this.minDate=void 0:(this.minYear=at(w.minDate,this.step),this.minDate=ye(this.minYear,0,1))),x(w,"maxDate")&&(w.maxDate===void 0?this.maxYear=this.maxDate=void 0:(this.maxYear=at(w.maxDate,this.step),this.maxDate=ye(this.maxYear,11,31))),w[this.beforeShowOption]!==void 0){var D=w[this.beforeShowOption];this.beforeShow=typeof D=="function"?D:void 0}}},{key:"updateFocus",value:function(){var w=new Date(this.picker.viewDate),D=at(w,this.navStep),R=D+9*this.step;this.first=D,this.last=R,this.start=D-this.step,this.focused=at(w,this.step)}},{key:"updateSelection",value:function(){var w=this,D=this.picker.datepicker,R=D.dates,O=D.rangepicker;this.selected=R.reduce(function(j,B){return z(j,at(B,w.step))},[]),O&&O.dates&&(this.range=O.dates.map(function(j){if(j!==void 0)return at(j,w.step)}))}},{key:"render",value:function(){var w=this;this.disabled=[],this.picker.setViewSwitchLabel("".concat(this.first,"-").concat(this.last)),this.picker.setPrevBtnDisabled(this.first<=this.minYear),this.picker.setNextBtnDisabled(this.last>=this.maxYear),Array.from(this.grid.children).forEach(function(D,R){var O=D.classList,j=w.start+R*w.step,B=ye(j,0,1);if(D.className="datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ".concat(w.cellClass),w.isMinView&&(D.dataset.date=B),D.textContent=D.dataset.year=j,R===0?O.add("prev"):R===11&&O.add("next"),(j<w.minYear||j>w.maxYear)&&O.add("disabled"),w.range){var V=I(w.range,2),J=V[0],Y=V[1];j>J&&j<Y&&O.add("range"),j===J&&O.add("range-start"),j===Y&&O.add("range-end")}w.selected.includes(j)&&(O.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),O.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")),j===w.focused&&O.add("focused"),w.beforeShow&&w.performBeforeHook(D,j,B)})}},{key:"refresh",value:function(){var w=this,D=this.range||[],R=I(D,2),O=R[0],j=R[1];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach(function(B){B.classList.remove("range","range-start","range-end","selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark!bg-primary-600","dark:text-white","focused")}),Array.from(this.grid.children).forEach(function(B){var V=Number(B.textContent),J=B.classList;V>O&&V<j&&J.add("range"),V===O&&J.add("range-start"),V===j&&J.add("range-end"),w.selected.includes(V)&&(J.add("selected","bg-blue-700","!bg-primary-700","text-white","dark:bg-blue-600","dark:!bg-primary-600","dark:text-white"),J.remove("text-gray-900","hover:bg-gray-100","dark:text-white","dark:hover:bg-gray-600")),V===w.focused&&J.add("focused")})}},{key:"refreshFocus",value:function(){var w=Math.round((this.focused-this.start)/this.step);this.grid.querySelectorAll(".focused").forEach(function(D){D.classList.remove("focused")}),this.grid.children[w].classList.add("focused")}}])}(hi);function si(l,m){var p={date:l.getDate(),viewDate:new Date(l.picker.viewDate),viewId:l.picker.currentView.id,datepicker:l};l.element.dispatchEvent(new CustomEvent(m,{detail:p}))}function fi(l,m){var p=l.config,w=p.minDate,D=p.maxDate,R=l.picker,O=R.currentView,j=R.viewDate,B;switch(O.id){case 0:B=je(j,m);break;case 1:B=He(j,m);break;default:B=He(j,m*O.navStep)}B=X(B,w,D),l.picker.changeFocus(B).render()}function Ji(l){var m=l.picker.currentView.id;m!==l.config.maxView&&l.picker.changeView(m+1).render()}function Gi(l){l.config.updateOnBlur?l.update({autohide:!0}):(l.refresh("input"),l.hide())}function Wn(l,m){var p=l.picker,w=new Date(p.viewDate),D=p.currentView.id,R=D===1?je(w,m-w.getMonth()):He(w,m-w.getFullYear());p.changeFocus(R).changeView(D-1).render()}function M(l){var m=l.picker,p=re();if(l.config.todayBtnMode===1){if(l.config.autohide){l.setDate(p);return}l.setDate(p,{render:!1}),m.update()}m.viewDate!==p&&m.changeFocus(p),m.changeView(0).render()}function te(l){l.setDate({clear:!0})}function Q(l){Ji(l)}function pe(l){fi(l,-1)}function Ee(l){fi(l,1)}function he(l,m){var p=ci(m,".datepicker-cell");if(!(!p||p.classList.contains("disabled"))){var w=l.picker.currentView,D=w.id,R=w.isMinView;R?l.setDate(Number(p.dataset.date)):D===1?Wn(l,Number(p.dataset.month)):Wn(l,Number(p.dataset.year))}}function We(l){!l.inline&&!l.config.disableTouchKeyboard&&l.inputField.focus()}function Tt(l,m){if(m.title!==void 0&&(m.title?(l.controls.title.textContent=m.title,Di(l.controls.title)):(l.controls.title.textContent="",Ft(l.controls.title))),m.prevArrow){var p=l.controls.prevBtn;St(p),m.prevArrow.forEach(function(j){p.appendChild(j.cloneNode(!0))})}if(m.nextArrow){var w=l.controls.nextBtn;St(w),m.nextArrow.forEach(function(j){w.appendChild(j.cloneNode(!0))})}if(m.locale&&(l.controls.todayBtn.textContent=m.locale.today,l.controls.clearBtn.textContent=m.locale.clear),m.todayBtn!==void 0&&(m.todayBtn?Di(l.controls.todayBtn):Ft(l.controls.todayBtn)),x(m,"minDate")||x(m,"maxDate")){var D=l.datepicker.config,R=D.minDate,O=D.maxDate;l.controls.todayBtn.disabled=!ee(re(),R,O)}m.clearBtn!==void 0&&(m.clearBtn?Di(l.controls.clearBtn):Ft(l.controls.clearBtn))}function ut(l){var m=l.dates,p=l.config,w=m.length>0?U(m):p.defaultViewDate;return X(w,p.minDate,p.maxDate)}function Ye(l,m){var p=new Date(l.viewDate),w=new Date(m),D=l.currentView,R=D.id,O=D.year,j=D.first,B=D.last,V=w.getFullYear();switch(l.viewDate=m,V!==p.getFullYear()&&si(l.datepicker,"changeYear"),w.getMonth()!==p.getMonth()&&si(l.datepicker,"changeMonth"),R){case 0:return m<j||m>B;case 1:return V!==O;default:return V<j||V>B}}function Xi(l){return window.getComputedStyle(l).direction}var $n=function(){function l(m){A(this,l),this.datepicker=m;var p=qi.replace(/%buttonClass%/g,m.config.buttonClass),w=this.element=pt(p).firstChild,D=I(w.firstChild.children,3),R=D[0],O=D[1],j=D[2],B=R.firstElementChild,V=I(R.lastElementChild.children,3),J=V[0],Y=V[1],se=V[2],oe=I(j.firstChild.children,2),ue=oe[0],ge=oe[1],_e={title:B,prevBtn:J,viewSwitch:Y,nextBtn:se,todayBtn:ue,clearBtn:ge};this.main=O,this.controls=_e;var Le=m.inline?"inline":"dropdown";w.classList.add("datepicker-".concat(Le)),Le==="dropdown"&&w.classList.add("dropdown","absolute","top-0","left-0","z-50","pt-2"),Tt(this,m.config),this.viewDate=ut(m),Si(m,[[w,"click",We.bind(null,m),{capture:!0}],[O,"click",he.bind(null,m)],[_e.viewSwitch,"click",Q.bind(null,m)],[_e.prevBtn,"click",pe.bind(null,m)],[_e.nextBtn,"click",Ee.bind(null,m)],[_e.todayBtn,"click",M.bind(null,m)],[_e.clearBtn,"click",te.bind(null,m)]]),this.views=[new Vn(this),new Jt(this),new Dt(this,{id:2,name:"years",cellClass:"year",step:1}),new Dt(this,{id:3,name:"decades",cellClass:"decade",step:10})],this.currentView=this.views[m.config.startView],this.currentView.render(),this.main.appendChild(this.currentView.element),m.config.container.appendChild(this.element)}return y(l,[{key:"setOptions",value:function(p){Tt(this,p),this.views.forEach(function(w){w.init(p,!1)}),this.currentView.render()}},{key:"detach",value:function(){this.datepicker.config.container.removeChild(this.element)}},{key:"show",value:function(){if(!this.active){this.element.classList.add("active","block"),this.element.classList.remove("hidden"),this.active=!0;var p=this.datepicker;if(!p.inline){var w=Xi(p.inputField);w!==Xi(p.config.container)?this.element.dir=w:this.element.dir&&this.element.removeAttribute("dir"),this.place(),p.config.disableTouchKeyboard&&p.inputField.blur()}si(p,"show")}}},{key:"hide",value:function(){this.active&&(this.datepicker.exitEditMode(),this.element.classList.remove("active","block"),this.element.classList.add("active","block","hidden"),this.active=!1,si(this.datepicker,"hide"))}},{key:"place",value:function(){var p=this.element,w=p.classList,D=p.style,R=this.datepicker,O=R.config,j=R.inputField,B=O.container,V=this.element.getBoundingClientRect(),J=V.width,Y=V.height,se=B.getBoundingClientRect(),oe=se.left,ue=se.top,ge=se.width,_e=j.getBoundingClientRect(),Le=_e.left,ke=_e.top,De=_e.width,ve=_e.height,Te=O.orientation,Re=Te.x,Oe=Te.y,Pe,Ce,Me;B===document.body?(Pe=window.scrollY,Ce=Le+window.scrollX,Me=ke+Pe):(Pe=B.scrollTop,Ce=Le-oe,Me=ke-ue+Pe),Re==="auto"&&(Ce<0?(Re="left",Ce=10):Ce+J>ge?Re="right":Re=Xi(j)==="rtl"?"right":"left"),Re==="right"&&(Ce-=J-De),Oe==="auto"&&(Oe=Me-Y<Pe?"bottom":"top"),Oe==="top"?Me-=Y:Me+=ve,w.remove("datepicker-orient-top","datepicker-orient-bottom","datepicker-orient-right","datepicker-orient-left"),w.add("datepicker-orient-".concat(Oe),"datepicker-orient-".concat(Re)),D.top=Me&&"".concat(Me,"px"),D.left=Ce&&"".concat(Ce,"px")}},{key:"setViewSwitchLabel",value:function(p){this.controls.viewSwitch.textContent=p}},{key:"setPrevBtnDisabled",value:function(p){this.controls.prevBtn.disabled=p}},{key:"setNextBtnDisabled",value:function(p){this.controls.nextBtn.disabled=p}},{key:"changeView",value:function(p){var w=this.currentView,D=this.views[p];return D.id!==w.id&&(this.currentView=D,this._renderMethod="render",si(this.datepicker,"changeView"),this.main.replaceChild(D.element,w.element)),this}},{key:"changeFocus",value:function(p){return this._renderMethod=Ye(this,p)?"render":"refreshFocus",this.views.forEach(function(w){w.updateFocus()}),this}},{key:"update",value:function(){var p=ut(this.datepicker);return this._renderMethod=Ye(this,p)?"render":"refresh",this.views.forEach(function(w){w.updateFocus(),w.updateSelection()}),this}},{key:"render",value:function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0,w=p&&this._renderMethod||"render";delete this._renderMethod,this.currentView[w]()}}])}();function us(l,m,p,w,D,R){if(ee(l,D,R)){if(w(l)){var O=m(l,p);return us(O,m,p,w,D,R)}return l}}function qn(l,m,p,w){var D=l.picker,R=D.currentView,O=R.step||1,j=D.viewDate,B,V;switch(R.id){case 0:w?j=ne(j,p*7):m.ctrlKey||m.metaKey?j=He(j,p):j=ne(j,p),B=ne,V=function(Y){return R.disabled.includes(Y)};break;case 1:j=je(j,w?p*4:p),B=je,V=function(Y){var se=new Date(Y),oe=R.year,ue=R.disabled;return se.getFullYear()===oe&&ue.includes(se.getMonth())};break;default:j=He(j,p*(w?4:1)*O),B=He,V=function(Y){return R.disabled.includes(at(Y,O))}}j=us(j,B,p<0?-O:O,V,R.minDate,R.maxDate),j!==void 0&&D.changeFocus(j).render()}function Ia(l,m){if(m.key==="Tab"){Gi(l);return}var p=l.picker,w=p.currentView,D=w.id,R=w.isMinView;if(p.active)if(l.editMode)switch(m.key){case"Escape":p.hide();break;case"Enter":l.exitEditMode({update:!0,autohide:l.config.autohide});break;default:return}else switch(m.key){case"Escape":p.hide();break;case"ArrowLeft":if(m.ctrlKey||m.metaKey)fi(l,-1);else if(m.shiftKey){l.enterEditMode();return}else qn(l,m,-1,!1);break;case"ArrowRight":if(m.ctrlKey||m.metaKey)fi(l,1);else if(m.shiftKey){l.enterEditMode();return}else qn(l,m,1,!1);break;case"ArrowUp":if(m.ctrlKey||m.metaKey)Ji(l);else if(m.shiftKey){l.enterEditMode();return}else qn(l,m,-1,!0);break;case"ArrowDown":if(m.shiftKey&&!m.ctrlKey&&!m.metaKey){l.enterEditMode();return}qn(l,m,1,!0);break;case"Enter":R?l.setDate(p.viewDate):p.changeView(D-1).render();break;case"Backspace":case"Delete":l.enterEditMode();return;default:m.key.length===1&&!m.ctrlKey&&!m.metaKey&&l.enterEditMode();return}else switch(m.key){case"ArrowDown":case"Escape":p.show();break;case"Enter":l.update();break;default:return}m.preventDefault(),m.stopPropagation()}function Oa(l){l.config.showOnFocus&&!l._showing&&l.show()}function Ma(l,m){var p=m.target;(l.picker.active||l.config.showOnClick)&&(p._active=p===document.activeElement,p._clicking=setTimeout(function(){delete p._active,delete p._clicking},2e3))}function xu(l,m){var p=m.target;p._clicking&&(clearTimeout(p._clicking),delete p._clicking,p._active&&l.enterEditMode(),delete p._active,l.config.showOnClick&&l.show())}function Lu(l,m){m.clipboardData.types.includes("text/plain")&&l.enterEditMode()}function ls(l,m){var p=l.element;if(p===document.activeElement){var w=l.picker.element;ci(m,function(D){return D===p||D===w})||Gi(l)}}function gr(l,m){return l.map(function(p){return $t(p,m.format,m.locale)}).join(m.dateDelimiter)}function mn(l,m){var p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1,w=l.config,D=l.dates,R=l.rangepicker;if(m.length===0)return p?[]:void 0;var O=R&&l===R.datepickers[1],j=m.reduce(function(B,V){var J=ei(V,w.format,w.locale);if(J===void 0)return B;if(w.pickLevel>0){var Y=new Date(J);w.pickLevel===1?J=O?Y.setMonth(Y.getMonth()+1,0):Y.setDate(1):J=O?Y.setFullYear(Y.getFullYear()+1,0,0):Y.setMonth(0,1)}return ee(J,w.minDate,w.maxDate)&&!B.includes(J)&&!w.datesDisabled.includes(J)&&!w.daysOfWeekDisabled.includes(new Date(J).getDay())&&B.push(J),B},[]);if(j.length!==0)return w.multidate&&!p&&(j=j.reduce(function(B,V){return D.includes(V)||B.push(V),B},D.filter(function(B){return!j.includes(B)}))),w.maxNumberOfDates&&j.length>w.maxNumberOfDates?j.slice(w.maxNumberOfDates*-1):j}function Kn(l){var m=arguments.length>1&&arguments[1]!==void 0?arguments[1]:3,p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0,w=l.config,D=l.picker,R=l.inputField;if(m&2){var O=D.active?w.pickLevel:w.startView;D.update().changeView(O).render(p)}m&1&&R&&(R.value=gr(l.dates,w))}function ds(l,m,p){var w=p.clear,D=p.render,R=p.autohide;D===void 0&&(D=!0),D?R===void 0&&(R=l.config.autohide):R=!1;var O=mn(l,m,w);O&&(O.toString()!==l.dates.toString()?(l.dates=O,Kn(l,D?3:1),si(l,"changeDate")):Kn(l,1),R&&l.hide())}var cs=function(){function l(m){var p=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},w=arguments.length>2&&arguments[2]!==void 0?arguments[2]:void 0;A(this,l),m.datepicker=this,this.element=m;var D=this.config=Object.assign({buttonClass:p.buttonClass&&String(p.buttonClass)||"button",container:document.body,defaultViewDate:re(),maxDate:void 0,minDate:void 0},jt(et,this));this._options=p,Object.assign(D,jt(p,this));var R=this.inline=m.tagName!=="INPUT",O,j;if(R)D.container=m,j=$(m.dataset.date,D.dateDelimiter),delete m.dataset.date;else{var B=p.container?document.querySelector(p.container):null;B&&(D.container=B),O=this.inputField=m,O.classList.add("datepicker-input"),j=$(O.value,D.dateDelimiter)}if(w){var V=w.inputs.indexOf(O),J=w.datepickers;if(V<0||V>1||!Array.isArray(J))throw Error("Invalid rangepicker object.");J[V]=this,Object.defineProperty(this,"rangepicker",{get:function(){return w}})}this.dates=[];var Y=mn(this,j);Y&&Y.length>0&&(this.dates=Y),O&&(O.value=gr(this.dates,D));var se=this.picker=new $n(this);if(R)this.show();else{var oe=ls.bind(null,this),ue=[[O,"keydown",Ia.bind(null,this)],[O,"focus",Oa.bind(null,this)],[O,"mousedown",Ma.bind(null,this)],[O,"click",xu.bind(null,this)],[O,"paste",Lu.bind(null,this)],[document,"mousedown",oe],[document,"touchstart",oe],[window,"resize",se.place.bind(se)]];Si(this,ue)}}return y(l,[{key:"active",get:function(){return!!(this.picker&&this.picker.active)}},{key:"pickerElement",get:function(){return this.picker?this.picker.element:void 0}},{key:"setOptions",value:function(p){var w=this.picker,D=jt(p,this);Object.assign(this._options,p),Object.assign(this.config,D),w.setOptions(D),Kn(this,3)}},{key:"show",value:function(){if(this.inputField){if(this.inputField.disabled)return;this.inputField!==document.activeElement&&(this._showing=!0,this.inputField.focus(),delete this._showing)}this.picker.show()}},{key:"hide",value:function(){this.inline||(this.picker.hide(),this.picker.update().changeView(this.config.startView).render())}},{key:"destroy",value:function(){return this.hide(),qt(this),this.picker.detach(),this.inline||this.inputField.classList.remove("datepicker-input"),delete this.element.datepicker,this}},{key:"getDate",value:function(){var p=this,w=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0,D=w?function(R){return $t(R,w,p.config.locale)}:function(R){return new Date(R)};if(this.config.multidate)return this.dates.map(D);if(this.dates.length>0)return D(this.dates[0])}},{key:"setDate",value:function(){for(var p=arguments.length,w=new Array(p),D=0;D<p;D++)w[D]=arguments[D];var R=[].concat(w),O={},j=U(w);q(j)==="object"&&!Array.isArray(j)&&!(j instanceof Date)&&j&&Object.assign(O,R.pop());var B=Array.isArray(R[0])?R[0]:R;ds(this,B,O)}},{key:"update",value:function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0;if(!this.inline){var w={clear:!0,autohide:!!(p&&p.autohide)},D=$(this.inputField.value,this.config.dateDelimiter);ds(this,D,w)}}},{key:"refresh",value:function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0,w=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;p&&typeof p!="string"&&(w=p,p=void 0);var D;p==="picker"?D=2:p==="input"?D=1:D=3,Kn(this,D,!w)}},{key:"enterEditMode",value:function(){this.inline||!this.picker.active||this.editMode||(this.editMode=!0,this.inputField.classList.add("in-edit","border-blue-700","!border-primary-700"))}},{key:"exitEditMode",value:function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0;if(!(this.inline||!this.editMode)){var w=Object.assign({update:!1},p);delete this.editMode,this.inputField.classList.remove("in-edit","border-blue-700","!border-primary-700"),w.update&&this.update(w)}}}],[{key:"formatDate",value:function(p,w,D){return $t(p,w,D&&Kt[D]||Kt.en)}},{key:"parseDate",value:function(p,w,D){return ei(p,w,D&&Kt[D]||Kt.en)}},{key:"locales",get:function(){return Kt}}])}();function hs(l){var m=Object.assign({},l);return delete m.inputs,delete m.allowOneSidedRange,delete m.maxNumberOfDates,m}function fs(l,m,p,w){Si(l,[[p,"changeDate",m]]),new cs(p,w,l)}function S(l,m){if(!l._updating){l._updating=!0;var p=m.target;if(p.datepicker!==void 0){var w=l.datepickers,D={render:!1},R=l.inputs.indexOf(p),O=R===0?1:0,j=w[R].dates[0],B=w[O].dates[0];j!==void 0&&B!==void 0?R===0&&j>B?(w[0].setDate(B,D),w[1].setDate(j,D)):R===1&&j<B&&(w[0].setDate(j,D),w[1].setDate(B,D)):l.allowOneSidedRange||(j!==void 0||B!==void 0)&&(D.clear=!0,w[O].setDate(w[R].dates,D)),w[0].picker.update().render(),w[1].picker.update().render(),delete l._updating}}}var T=function(){function l(m){var p=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};A(this,l);var w=Array.isArray(p.inputs)?p.inputs:Array.from(m.querySelectorAll("input"));if(!(w.length<2)){m.rangepicker=this,this.element=m,this.inputs=w.slice(0,2),this.allowOneSidedRange=!!p.allowOneSidedRange;var D=S.bind(null,this),R=hs(p),O=[];Object.defineProperty(this,"datepickers",{get:function(){return O}}),fs(this,D,this.inputs[0],R),fs(this,D,this.inputs[1],R),Object.freeze(O),O[0].dates.length>0?S(this,{target:this.inputs[0]}):O[1].dates.length>0&&S(this,{target:this.inputs[1]})}}return y(l,[{key:"dates",get:function(){return this.datepickers.length===2?[this.datepickers[0].dates[0],this.datepickers[1].dates[0]]:void 0}},{key:"setOptions",value:function(p){this.allowOneSidedRange=!!p.allowOneSidedRange;var w=hs(p);this.datepickers[0].setOptions(w),this.datepickers[1].setOptions(w)}},{key:"destroy",value:function(){this.datepickers[0].destroy(),this.datepickers[1].destroy(),qt(this),delete this.element.rangepicker}},{key:"getDates",value:function(){var p=this,w=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0,D=w?function(R){return $t(R,w,p.datepickers[0].config.locale)}:function(R){return new Date(R)};return this.dates.map(function(R){return R===void 0?R:D(R)})}},{key:"setDates",value:function(p,w){var D=I(this.datepickers,2),R=D[0],O=D[1],j=this.dates;this._updating=!0,R.setDate(p),O.setDate(w),delete this._updating,O.dates[0]!==j[1]?S(this,{target:this.inputs[1]}):R.dates[0]!==j[0]&&S(this,{target:this.inputs[0]})}}])}();s.DateRangePicker=T,s.Datepicker=cs},902:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initAccordions=void 0;var c=a(423),v={alwaysOpen:!1,activeClasses:"bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white",inactiveClasses:"text-gray-500 dark:text-gray-400",onOpen:function(){},onClose:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=[]),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._accordionEl=d,this._items=g,this._options=u(u({},v),b),this._initialized=!1,this.init(),c.default.addInstance("Accordion",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._items.length&&!this._initialized&&(this._items.forEach(function(g){g.active&&d.open(g.id);var b=function(){d.toggle(g.id)};g.triggerEl.addEventListener("click",b),g.clickHandler=b}),this._initialized=!0)},y.prototype.destroy=function(){this._items.length&&this._initialized&&(this._items.forEach(function(d){d.triggerEl.removeEventListener("click",d.clickHandler),delete d.clickHandler}),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Accordion",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getItem=function(d){return this._items.filter(function(g){return g.id===d})[0]},y.prototype.open=function(d){var g,b,E=this,P=this.getItem(d);this._options.alwaysOpen||this._items.map(function(o){var h,f;o!==P&&((h=o.triggerEl.classList).remove.apply(h,E._options.activeClasses.split(" ")),(f=o.triggerEl.classList).add.apply(f,E._options.inactiveClasses.split(" ")),o.targetEl.classList.add("hidden"),o.triggerEl.setAttribute("aria-expanded","false"),o.active=!1,o.iconEl&&o.iconEl.classList.add("rotate-180"))}),(g=P.triggerEl.classList).add.apply(g,this._options.activeClasses.split(" ")),(b=P.triggerEl.classList).remove.apply(b,this._options.inactiveClasses.split(" ")),P.triggerEl.setAttribute("aria-expanded","true"),P.targetEl.classList.remove("hidden"),P.active=!0,P.iconEl&&P.iconEl.classList.remove("rotate-180"),this._options.onOpen(this,P)},y.prototype.toggle=function(d){var g=this.getItem(d);g.active?this.close(d):this.open(d),this._options.onToggle(this,g)},y.prototype.close=function(d){var g,b,E=this.getItem(d);(g=E.triggerEl.classList).remove.apply(g,this._options.activeClasses.split(" ")),(b=E.triggerEl.classList).add.apply(b,this._options.inactiveClasses.split(" ")),E.targetEl.classList.add("hidden"),E.triggerEl.setAttribute("aria-expanded","false"),E.active=!1,E.iconEl&&E.iconEl.classList.add("rotate-180"),this._options.onClose(this,E)},y.prototype.updateOnOpen=function(d){this._options.onOpen=d},y.prototype.updateOnClose=function(d){this._options.onClose=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-accordion]").forEach(function(y){var d=y.getAttribute("data-accordion"),g=y.getAttribute("data-active-classes"),b=y.getAttribute("data-inactive-classes"),E=[];y.querySelectorAll("[data-accordion-target]").forEach(function(P){if(P.closest("[data-accordion]")===y){var o={id:P.getAttribute("data-accordion-target"),triggerEl:P,targetEl:document.querySelector(P.getAttribute("data-accordion-target")),iconEl:P.querySelector("[data-accordion-icon]"),active:P.getAttribute("aria-expanded")==="true"};E.push(o)}}),new A(y,E,{alwaysOpen:d==="open",activeClasses:g||v.activeClasses,inactiveClasses:b||v.inactiveClasses})})}s.initAccordions=N,typeof window<"u"&&(window.Accordion=A,window.initAccordions=N),s.default=A},33:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initCarousels=void 0;var c=a(423),v={defaultPosition:0,indicators:{items:[],activeClasses:"bg-white dark:bg-gray-800",inactiveClasses:"bg-white/50 dark:bg-gray-800/50 hover:bg-white dark:hover:bg-gray-800"},interval:3e3,onNext:function(){},onPrev:function(){},onChange:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=[]),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._carouselEl=d,this._items=g,this._options=u(u(u({},v),b),{indicators:u(u({},v.indicators),b.indicators)}),this._activeItem=this.getItem(this._options.defaultPosition),this._indicators=this._options.indicators.items,this._intervalDuration=this._options.interval,this._intervalInstance=null,this._initialized=!1,this.init(),c.default.addInstance("Carousel",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._items.length&&!this._initialized&&(this._items.map(function(g){g.el.classList.add("absolute","inset-0","transition-transform","transform")}),this.getActiveItem()?this.slideTo(this.getActiveItem().position):this.slideTo(0),this._indicators.map(function(g,b){g.el.addEventListener("click",function(){d.slideTo(b)})}),this._initialized=!0)},y.prototype.destroy=function(){this._initialized&&(this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Carousel",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getItem=function(d){return this._items[d]},y.prototype.slideTo=function(d){var g=this._items[d],b={left:g.position===0?this._items[this._items.length-1]:this._items[g.position-1],middle:g,right:g.position===this._items.length-1?this._items[0]:this._items[g.position+1]};this._rotate(b),this._setActiveItem(g),this._intervalInstance&&(this.pause(),this.cycle()),this._options.onChange(this)},y.prototype.next=function(){var d=this.getActiveItem(),g=null;d.position===this._items.length-1?g=this._items[0]:g=this._items[d.position+1],this.slideTo(g.position),this._options.onNext(this)},y.prototype.prev=function(){var d=this.getActiveItem(),g=null;d.position===0?g=this._items[this._items.length-1]:g=this._items[d.position-1],this.slideTo(g.position),this._options.onPrev(this)},y.prototype._rotate=function(d){if(this._items.map(function(g){g.el.classList.add("hidden")}),this._items.length===1){d.middle.el.classList.remove("-translate-x-full","translate-x-full","translate-x-0","hidden","z-10"),d.middle.el.classList.add("translate-x-0","z-20");return}d.left.el.classList.remove("-translate-x-full","translate-x-full","translate-x-0","hidden","z-20"),d.left.el.classList.add("-translate-x-full","z-10"),d.middle.el.classList.remove("-translate-x-full","translate-x-full","translate-x-0","hidden","z-10"),d.middle.el.classList.add("translate-x-0","z-30"),d.right.el.classList.remove("-translate-x-full","translate-x-full","translate-x-0","hidden","z-30"),d.right.el.classList.add("translate-x-full","z-20")},y.prototype.cycle=function(){var d=this;typeof window<"u"&&(this._intervalInstance=window.setInterval(function(){d.next()},this._intervalDuration))},y.prototype.pause=function(){clearInterval(this._intervalInstance)},y.prototype.getActiveItem=function(){return this._activeItem},y.prototype._setActiveItem=function(d){var g,b,E=this;this._activeItem=d;var P=d.position;this._indicators.length&&(this._indicators.map(function(o){var h,f;o.el.setAttribute("aria-current","false"),(h=o.el.classList).remove.apply(h,E._options.indicators.activeClasses.split(" ")),(f=o.el.classList).add.apply(f,E._options.indicators.inactiveClasses.split(" "))}),(g=this._indicators[P].el.classList).add.apply(g,this._options.indicators.activeClasses.split(" ")),(b=this._indicators[P].el.classList).remove.apply(b,this._options.indicators.inactiveClasses.split(" ")),this._indicators[P].el.setAttribute("aria-current","true"))},y.prototype.updateOnNext=function(d){this._options.onNext=d},y.prototype.updateOnPrev=function(d){this._options.onPrev=d},y.prototype.updateOnChange=function(d){this._options.onChange=d},y}();function N(){document.querySelectorAll("[data-carousel]").forEach(function(y){var d=y.getAttribute("data-carousel-interval"),g=y.getAttribute("data-carousel")==="slide",b=[],E=0;y.querySelectorAll("[data-carousel-item]").length&&Array.from(y.querySelectorAll("[data-carousel-item]")).map(function(_,C){b.push({position:C,el:_}),_.getAttribute("data-carousel-item")==="active"&&(E=C)});var P=[];y.querySelectorAll("[data-carousel-slide-to]").length&&Array.from(y.querySelectorAll("[data-carousel-slide-to]")).map(function(_){P.push({position:parseInt(_.getAttribute("data-carousel-slide-to")),el:_})});var o=new A(y,b,{defaultPosition:E,indicators:{items:P},interval:d||v.interval});g&&o.cycle();var h=y.querySelector("[data-carousel-next]"),f=y.querySelector("[data-carousel-prev]");h&&h.addEventListener("click",function(){o.next()}),f&&f.addEventListener("click",function(){o.prev()})})}s.initCarousels=N,typeof window<"u"&&(window.Carousel=A,window.initCarousels=N),s.default=A},673:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initCopyClipboards=void 0;var c=a(423),v={htmlEntities:!1,contentType:"input",onCopy:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:g.id,this._triggerEl=d,this._targetEl=g,this._options=u(u({},v),b),this._initialized=!1,this.init(),c.default.addInstance("CopyClipboard",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._targetEl&&this._triggerEl&&!this._initialized&&(this._triggerElClickHandler=function(){d.copy()},this._triggerEl&&this._triggerEl.addEventListener("click",this._triggerElClickHandler),this._initialized=!0)},y.prototype.destroy=function(){this._triggerEl&&this._targetEl&&this._initialized&&(this._triggerEl&&this._triggerEl.removeEventListener("click",this._triggerElClickHandler),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("CopyClipboard",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getTargetValue=function(){if(this._options.contentType==="input")return this._targetEl.value;if(this._options.contentType==="innerHTML")return this._targetEl.innerHTML;if(this._options.contentType==="textContent")return this._targetEl.textContent.replace(/\s+/g," ").trim()},y.prototype.copy=function(){var d=this.getTargetValue();this._options.htmlEntities&&(d=this.decodeHTML(d));var g=document.createElement("textarea");return g.value=d,document.body.appendChild(g),g.select(),document.execCommand("copy"),document.body.removeChild(g),this._options.onCopy(this),d},y.prototype.decodeHTML=function(d){var g=document.createElement("textarea");return g.innerHTML=d,g.textContent},y.prototype.updateOnCopyCallback=function(d){this._options.onCopy=d},y}();function N(){document.querySelectorAll("[data-copy-to-clipboard-target]").forEach(function(y){var d=y.getAttribute("data-copy-to-clipboard-target"),g=document.getElementById(d),b=y.getAttribute("data-copy-to-clipboard-content-type"),E=y.getAttribute("data-copy-to-clipboard-html-entities");g?c.default.instanceExists("CopyClipboard",g.getAttribute("id"))||new A(y,g,{htmlEntities:E&&E==="true"?!0:v.htmlEntities,contentType:b||v.contentType}):console.error('The target element with id "'.concat(d,'" does not exist. Please check the data-copy-to-clipboard-target attribute.'))})}s.initCopyClipboards=N,typeof window<"u"&&(window.CopyClipboard=A,window.initClipboards=N),s.default=A},922:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initCollapses=void 0;var c=a(423),v={onCollapse:function(){},onExpand:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._targetEl=d,this._triggerEl=g,this._options=u(u({},v),b),this._visible=!1,this._initialized=!1,this.init(),c.default.addInstance("Collapse",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._triggerEl&&this._targetEl&&!this._initialized&&(this._triggerEl.hasAttribute("aria-expanded")?this._visible=this._triggerEl.getAttribute("aria-expanded")==="true":this._visible=!this._targetEl.classList.contains("hidden"),this._clickHandler=function(){d.toggle()},this._triggerEl.addEventListener("click",this._clickHandler),this._initialized=!0)},y.prototype.destroy=function(){this._triggerEl&&this._initialized&&(this._triggerEl.removeEventListener("click",this._clickHandler),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Collapse",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.collapse=function(){this._targetEl.classList.add("hidden"),this._triggerEl&&this._triggerEl.setAttribute("aria-expanded","false"),this._visible=!1,this._options.onCollapse(this)},y.prototype.expand=function(){this._targetEl.classList.remove("hidden"),this._triggerEl&&this._triggerEl.setAttribute("aria-expanded","true"),this._visible=!0,this._options.onExpand(this)},y.prototype.toggle=function(){this._visible?this.collapse():this.expand(),this._options.onToggle(this)},y.prototype.updateOnCollapse=function(d){this._options.onCollapse=d},y.prototype.updateOnExpand=function(d){this._options.onExpand=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-collapse-toggle]").forEach(function(y){var d=y.getAttribute("data-collapse-toggle"),g=document.getElementById(d);g?c.default.instanceExists("Collapse",g.getAttribute("id"))?new A(g,y,{},{id:g.getAttribute("id")+"_"+c.default._generateRandomId()}):new A(g,y):console.error('The target element with id "'.concat(d,'" does not exist. Please check the data-collapse-toggle attribute.'))})}s.initCollapses=N,typeof window<"u"&&(window.Collapse=A,window.initCollapses=N),s.default=A},132:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(d){for(var g,b=1,E=arguments.length;b<E;b++){g=arguments[b];for(var P in g)Object.prototype.hasOwnProperty.call(g,P)&&(d[P]=g[P])}return d},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initDatepickers=void 0;var c=a(423),v=a(554),k={defaultDatepickerId:null,autohide:!1,format:"mm/dd/yyyy",maxDate:null,minDate:null,orientation:"bottom",buttons:!1,autoSelectToday:0,title:null,language:"en",rangePicker:!1,onShow:function(){},onHide:function(){}},A={id:null,override:!0},N=function(){function d(g,b,E){g===void 0&&(g=null),b===void 0&&(b=k),E===void 0&&(E=A),this._instanceId=E.id?E.id:g.id,this._datepickerEl=g,this._datepickerInstance=null,this._options=u(u({},k),b),this._initialized=!1,this.init(),c.default.addInstance("Datepicker",this,this._instanceId,E.override)}return d.prototype.init=function(){this._datepickerEl&&!this._initialized&&(this._options.rangePicker?this._datepickerInstance=new v.DateRangePicker(this._datepickerEl,this._getDatepickerOptions(this._options)):this._datepickerInstance=new v.Datepicker(this._datepickerEl,this._getDatepickerOptions(this._options)),this._initialized=!0)},d.prototype.destroy=function(){this._initialized&&(this._initialized=!1,this._datepickerInstance.destroy())},d.prototype.removeInstance=function(){this.destroy(),c.default.removeInstance("Datepicker",this._instanceId)},d.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},d.prototype.getDatepickerInstance=function(){return this._datepickerInstance},d.prototype.getDate=function(){if(this._options.rangePicker&&this._datepickerInstance instanceof v.DateRangePicker)return this._datepickerInstance.getDates();if(!this._options.rangePicker&&this._datepickerInstance instanceof v.Datepicker)return this._datepickerInstance.getDate()},d.prototype.setDate=function(g){if(this._options.rangePicker&&this._datepickerInstance instanceof v.DateRangePicker)return this._datepickerInstance.setDates(g);if(!this._options.rangePicker&&this._datepickerInstance instanceof v.Datepicker)return this._datepickerInstance.setDate(g)},d.prototype.show=function(){this._datepickerInstance.show(),this._options.onShow(this)},d.prototype.hide=function(){this._datepickerInstance.hide(),this._options.onHide(this)},d.prototype._getDatepickerOptions=function(g){var b={};return g.buttons&&(b.todayBtn=!0,b.clearBtn=!0,g.autoSelectToday&&(b.todayBtnMode=1)),g.autohide&&(b.autohide=!0),g.format&&(b.format=g.format),g.maxDate&&(b.maxDate=g.maxDate),g.minDate&&(b.minDate=g.minDate),g.orientation&&(b.orientation=g.orientation),g.title&&(b.title=g.title),g.language&&(b.language=g.language),b},d.prototype.updateOnShow=function(g){this._options.onShow=g},d.prototype.updateOnHide=function(g){this._options.onHide=g},d}();function y(){document.querySelectorAll("[datepicker], [inline-datepicker], [date-rangepicker]").forEach(function(d){if(d){var g=d.hasAttribute("datepicker-buttons"),b=d.hasAttribute("datepicker-autoselect-today"),E=d.hasAttribute("datepicker-autohide"),P=d.getAttribute("datepicker-format"),o=d.getAttribute("datepicker-max-date"),h=d.getAttribute("datepicker-min-date"),f=d.getAttribute("datepicker-orientation"),_=d.getAttribute("datepicker-title"),C=d.getAttribute("datepicker-language"),I=d.hasAttribute("date-rangepicker");new N(d,{buttons:g||k.buttons,autoSelectToday:b||k.autoSelectToday,autohide:E||k.autohide,format:P||k.format,maxDate:o||k.maxDate,minDate:h||k.minDate,orientation:f||k.orientation,title:_||k.title,language:C||k.language,rangePicker:I||k.rangePicker})}else console.error("The datepicker element does not exist. Please check the datepicker attribute.")})}s.initDatepickers=y,typeof window<"u"&&(window.Datepicker=N,window.initDatepickers=y),s.default=N},556:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initDials=void 0;var c=a(423),v={triggerType:"hover",onShow:function(){},onHide:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E,P){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=null),E===void 0&&(E=v),P===void 0&&(P=k),this._instanceId=P.id?P.id:b.id,this._parentEl=d,this._triggerEl=g,this._targetEl=b,this._options=u(u({},v),E),this._visible=!1,this._initialized=!1,this.init(),c.default.addInstance("Dial",this,this._instanceId,P.override)}return y.prototype.init=function(){var d=this;if(this._triggerEl&&this._targetEl&&!this._initialized){var g=this._getTriggerEventTypes(this._options.triggerType);this._showEventHandler=function(){d.show()},g.showEvents.forEach(function(b){d._triggerEl.addEventListener(b,d._showEventHandler),d._targetEl.addEventListener(b,d._showEventHandler)}),this._hideEventHandler=function(){d._parentEl.matches(":hover")||d.hide()},g.hideEvents.forEach(function(b){d._parentEl.addEventListener(b,d._hideEventHandler)}),this._initialized=!0}},y.prototype.destroy=function(){var d=this;if(this._initialized){var g=this._getTriggerEventTypes(this._options.triggerType);g.showEvents.forEach(function(b){d._triggerEl.removeEventListener(b,d._showEventHandler),d._targetEl.removeEventListener(b,d._showEventHandler)}),g.hideEvents.forEach(function(b){d._parentEl.removeEventListener(b,d._hideEventHandler)}),this._initialized=!1}},y.prototype.removeInstance=function(){c.default.removeInstance("Dial",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.hide=function(){this._targetEl.classList.add("hidden"),this._triggerEl&&this._triggerEl.setAttribute("aria-expanded","false"),this._visible=!1,this._options.onHide(this)},y.prototype.show=function(){this._targetEl.classList.remove("hidden"),this._triggerEl&&this._triggerEl.setAttribute("aria-expanded","true"),this._visible=!0,this._options.onShow(this)},y.prototype.toggle=function(){this._visible?this.hide():this.show()},y.prototype.isHidden=function(){return!this._visible},y.prototype.isVisible=function(){return this._visible},y.prototype._getTriggerEventTypes=function(d){switch(d){case"hover":return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]};case"click":return{showEvents:["click","focus"],hideEvents:["focusout","blur"]};case"none":return{showEvents:[],hideEvents:[]};default:return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]}}},y.prototype.updateOnShow=function(d){this._options.onShow=d},y.prototype.updateOnHide=function(d){this._options.onHide=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-dial-init]").forEach(function(y){var d=y.querySelector("[data-dial-toggle]");if(d){var g=d.getAttribute("data-dial-toggle"),b=document.getElementById(g);if(b){var E=d.getAttribute("data-dial-trigger");new A(y,d,b,{triggerType:E||v.triggerType})}else console.error("Dial with id ".concat(g," does not exist. Are you sure that the data-dial-toggle attribute points to the correct modal id?"))}else console.error("Dial with id ".concat(y.id," does not have a trigger element. Are you sure that the data-dial-toggle attribute exists?"))})}s.initDials=N,typeof window<"u"&&(window.Dial=A,window.initDials=N),s.default=A},791:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initDismisses=void 0;var c=a(423),v={transition:"transition-opacity",duration:300,timing:"ease-out",onHide:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._targetEl=d,this._triggerEl=g,this._options=u(u({},v),b),this._initialized=!1,this.init(),c.default.addInstance("Dismiss",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._triggerEl&&this._targetEl&&!this._initialized&&(this._clickHandler=function(){d.hide()},this._triggerEl.addEventListener("click",this._clickHandler),this._initialized=!0)},y.prototype.destroy=function(){this._triggerEl&&this._initialized&&(this._triggerEl.removeEventListener("click",this._clickHandler),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Dismiss",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.hide=function(){var d=this;this._targetEl.classList.add(this._options.transition,"duration-".concat(this._options.duration),this._options.timing,"opacity-0"),setTimeout(function(){d._targetEl.classList.add("hidden")},this._options.duration),this._options.onHide(this,this._targetEl)},y.prototype.updateOnHide=function(d){this._options.onHide=d},y}();function N(){document.querySelectorAll("[data-dismiss-target]").forEach(function(y){var d=y.getAttribute("data-dismiss-target"),g=document.querySelector(d);g?new A(g,y):console.error('The dismiss element with id "'.concat(d,'" does not exist. Please check the data-dismiss-target attribute.'))})}s.initDismisses=N,typeof window<"u"&&(window.Dismiss=A,window.initDismisses=N),s.default=A},340:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initDrawers=void 0;var c=a(423),v={placement:"left",bodyScrolling:!1,backdrop:!0,edge:!1,edgeOffset:"bottom-[60px]",backdropClasses:"bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-30",onShow:function(){},onHide:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b){d===void 0&&(d=null),g===void 0&&(g=v),b===void 0&&(b=k),this._eventListenerInstances=[],this._instanceId=b.id?b.id:d.id,this._targetEl=d,this._options=u(u({},v),g),this._visible=!1,this._initialized=!1,this.init(),c.default.addInstance("Drawer",this,this._instanceId,b.override)}return y.prototype.init=function(){var d=this;this._targetEl&&!this._initialized&&(this._targetEl.setAttribute("aria-hidden","true"),this._targetEl.classList.add("transition-transform"),this._getPlacementClasses(this._options.placement).base.map(function(g){d._targetEl.classList.add(g)}),this._handleEscapeKey=function(g){g.key==="Escape"&&d.isVisible()&&d.hide()},document.addEventListener("keydown",this._handleEscapeKey),this._initialized=!0)},y.prototype.destroy=function(){this._initialized&&(this.removeAllEventListenerInstances(),this._destroyBackdropEl(),document.removeEventListener("keydown",this._handleEscapeKey),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Drawer",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.hide=function(){var d=this;this._options.edge?(this._getPlacementClasses(this._options.placement+"-edge").active.map(function(g){d._targetEl.classList.remove(g)}),this._getPlacementClasses(this._options.placement+"-edge").inactive.map(function(g){d._targetEl.classList.add(g)})):(this._getPlacementClasses(this._options.placement).active.map(function(g){d._targetEl.classList.remove(g)}),this._getPlacementClasses(this._options.placement).inactive.map(function(g){d._targetEl.classList.add(g)})),this._targetEl.setAttribute("aria-hidden","true"),this._targetEl.removeAttribute("aria-modal"),this._targetEl.removeAttribute("role"),this._options.bodyScrolling||document.body.classList.remove("overflow-hidden"),this._options.backdrop&&this._destroyBackdropEl(),this._visible=!1,this._options.onHide(this)},y.prototype.show=function(){var d=this;this._options.edge?(this._getPlacementClasses(this._options.placement+"-edge").active.map(function(g){d._targetEl.classList.add(g)}),this._getPlacementClasses(this._options.placement+"-edge").inactive.map(function(g){d._targetEl.classList.remove(g)})):(this._getPlacementClasses(this._options.placement).active.map(function(g){d._targetEl.classList.add(g)}),this._getPlacementClasses(this._options.placement).inactive.map(function(g){d._targetEl.classList.remove(g)})),this._targetEl.setAttribute("aria-modal","true"),this._targetEl.setAttribute("role","dialog"),this._targetEl.removeAttribute("aria-hidden"),this._options.bodyScrolling||document.body.classList.add("overflow-hidden"),this._options.backdrop&&this._createBackdrop(),this._visible=!0,this._options.onShow(this)},y.prototype.toggle=function(){this.isVisible()?this.hide():this.show()},y.prototype._createBackdrop=function(){var d,g=this;if(!this._visible){var b=document.createElement("div");b.setAttribute("drawer-backdrop",""),(d=b.classList).add.apply(d,this._options.backdropClasses.split(" ")),document.querySelector("body").append(b),b.addEventListener("click",function(){g.hide()})}},y.prototype._destroyBackdropEl=function(){this._visible&&document.querySelector("[drawer-backdrop]")!==null&&document.querySelector("[drawer-backdrop]").remove()},y.prototype._getPlacementClasses=function(d){switch(d){case"top":return{base:["top-0","left-0","right-0"],active:["transform-none"],inactive:["-translate-y-full"]};case"right":return{base:["right-0","top-0"],active:["transform-none"],inactive:["translate-x-full"]};case"bottom":return{base:["bottom-0","left-0","right-0"],active:["transform-none"],inactive:["translate-y-full"]};case"left":return{base:["left-0","top-0"],active:["transform-none"],inactive:["-translate-x-full"]};case"bottom-edge":return{base:["left-0","top-0"],active:["transform-none"],inactive:["translate-y-full",this._options.edgeOffset]};default:return{base:["left-0","top-0"],active:["transform-none"],inactive:["-translate-x-full"]}}},y.prototype.isHidden=function(){return!this._visible},y.prototype.isVisible=function(){return this._visible},y.prototype.addEventListenerInstance=function(d,g,b){this._eventListenerInstances.push({element:d,type:g,handler:b})},y.prototype.removeAllEventListenerInstances=function(){this._eventListenerInstances.map(function(d){d.element.removeEventListener(d.type,d.handler)}),this._eventListenerInstances=[]},y.prototype.getAllEventListenerInstances=function(){return this._eventListenerInstances},y.prototype.updateOnShow=function(d){this._options.onShow=d},y.prototype.updateOnHide=function(d){this._options.onHide=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-drawer-target]").forEach(function(y){var d=y.getAttribute("data-drawer-target"),g=document.getElementById(d);if(g){var b=y.getAttribute("data-drawer-placement"),E=y.getAttribute("data-drawer-body-scrolling"),P=y.getAttribute("data-drawer-backdrop"),o=y.getAttribute("data-drawer-edge"),h=y.getAttribute("data-drawer-edge-offset");new A(g,{placement:b||v.placement,bodyScrolling:E?E==="true":v.bodyScrolling,backdrop:P?P==="true":v.backdrop,edge:o?o==="true":v.edge,edgeOffset:h||v.edgeOffset})}else console.error("Drawer with id ".concat(d," not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"))}),document.querySelectorAll("[data-drawer-toggle]").forEach(function(y){var d=y.getAttribute("data-drawer-toggle"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Drawer",d);if(b){var E=function(){b.toggle()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Drawer with id ".concat(d," has not been initialized. Please initialize it using the data-drawer-target attribute."))}else console.error("Drawer with id ".concat(d," not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"))}),document.querySelectorAll("[data-drawer-dismiss], [data-drawer-hide]").forEach(function(y){var d=y.getAttribute("data-drawer-dismiss")?y.getAttribute("data-drawer-dismiss"):y.getAttribute("data-drawer-hide"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Drawer",d);if(b){var E=function(){b.hide()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Drawer with id ".concat(d," has not been initialized. Please initialize it using the data-drawer-target attribute."))}else console.error("Drawer with id ".concat(d," not found. Are you sure that the data-drawer-target attribute points to the correct drawer id"))}),document.querySelectorAll("[data-drawer-show]").forEach(function(y){var d=y.getAttribute("data-drawer-show"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Drawer",d);if(b){var E=function(){b.show()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Drawer with id ".concat(d," has not been initialized. Please initialize it using the data-drawer-target attribute."))}else console.error("Drawer with id ".concat(d," not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"))})}s.initDrawers=N,typeof window<"u"&&(window.Drawer=A,window.initDrawers=N),s.default=A},316:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(g){for(var b,E=1,P=arguments.length;E<P;E++){b=arguments[E];for(var o in b)Object.prototype.hasOwnProperty.call(b,o)&&(g[o]=b[o])}return g},u.apply(this,arguments)},c=this&&this.__spreadArray||function(g,b,E){if(E||arguments.length===2)for(var P=0,o=b.length,h;P<o;P++)(h||!(P in b))&&(h||(h=Array.prototype.slice.call(b,0,P)),h[P]=b[P]);return g.concat(h||Array.prototype.slice.call(b))};Object.defineProperty(s,"__esModule",{value:!0}),s.initDropdowns=void 0;var v=a(853),k=a(423),A={placement:"bottom",triggerType:"click",offsetSkidding:0,offsetDistance:10,delay:300,ignoreClickOutsideClass:!1,onShow:function(){},onHide:function(){},onToggle:function(){}},N={id:null,override:!0},y=function(){function g(b,E,P,o){b===void 0&&(b=null),E===void 0&&(E=null),P===void 0&&(P=A),o===void 0&&(o=N),this._instanceId=o.id?o.id:b.id,this._targetEl=b,this._triggerEl=E,this._options=u(u({},A),P),this._popperInstance=null,this._visible=!1,this._initialized=!1,this.init(),k.default.addInstance("Dropdown",this,this._instanceId,o.override)}return g.prototype.init=function(){this._triggerEl&&this._targetEl&&!this._initialized&&(this._popperInstance=this._createPopperInstance(),this._setupEventListeners(),this._initialized=!0)},g.prototype.destroy=function(){var b=this,E=this._getTriggerEvents();this._options.triggerType==="click"&&E.showEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._clickHandler)}),this._options.triggerType==="hover"&&(E.showEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._hoverShowTriggerElHandler),b._targetEl.removeEventListener(P,b._hoverShowTargetElHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._hoverHideHandler),b._targetEl.removeEventListener(P,b._hoverHideHandler)})),this._popperInstance.destroy(),this._initialized=!1},g.prototype.removeInstance=function(){k.default.removeInstance("Dropdown",this._instanceId)},g.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},g.prototype._setupEventListeners=function(){var b=this,E=this._getTriggerEvents();this._clickHandler=function(){b.toggle()},this._options.triggerType==="click"&&E.showEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._clickHandler)}),this._hoverShowTriggerElHandler=function(P){P.type==="click"?b.toggle():setTimeout(function(){b.show()},b._options.delay)},this._hoverShowTargetElHandler=function(){b.show()},this._hoverHideHandler=function(){setTimeout(function(){b._targetEl.matches(":hover")||b.hide()},b._options.delay)},this._options.triggerType==="hover"&&(E.showEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._hoverShowTriggerElHandler),b._targetEl.addEventListener(P,b._hoverShowTargetElHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._hoverHideHandler),b._targetEl.addEventListener(P,b._hoverHideHandler)}))},g.prototype._createPopperInstance=function(){return(0,v.createPopper)(this._triggerEl,this._targetEl,{placement:this._options.placement,modifiers:[{name:"offset",options:{offset:[this._options.offsetSkidding,this._options.offsetDistance]}}]})},g.prototype._setupClickOutsideListener=function(){var b=this;this._clickOutsideEventListener=function(E){b._handleClickOutside(E,b._targetEl)},document.body.addEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._removeClickOutsideListener=function(){document.body.removeEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._handleClickOutside=function(b,E){var P=b.target,o=this._options.ignoreClickOutsideClass,h=!1;if(o){var f=document.querySelectorAll(".".concat(o));f.forEach(function(_){if(_.contains(P)){h=!0;return}})}P!==E&&!E.contains(P)&&!this._triggerEl.contains(P)&&!h&&this.isVisible()&&this.hide()},g.prototype._getTriggerEvents=function(){switch(this._options.triggerType){case"hover":return{showEvents:["mouseenter","click"],hideEvents:["mouseleave"]};case"click":return{showEvents:["click"],hideEvents:[]};case"none":return{showEvents:[],hideEvents:[]};default:return{showEvents:["click"],hideEvents:[]}}},g.prototype.toggle=function(){this.isVisible()?this.hide():this.show(),this._options.onToggle(this)},g.prototype.isVisible=function(){return this._visible},g.prototype.show=function(){this._targetEl.classList.remove("hidden"),this._targetEl.classList.add("block"),this._targetEl.removeAttribute("aria-hidden"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!0}],!1)})}),this._setupClickOutsideListener(),this._popperInstance.update(),this._visible=!0,this._options.onShow(this)},g.prototype.hide=function(){this._targetEl.classList.remove("block"),this._targetEl.classList.add("hidden"),this._targetEl.setAttribute("aria-hidden","true"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!1}],!1)})}),this._visible=!1,this._removeClickOutsideListener(),this._options.onHide(this)},g.prototype.updateOnShow=function(b){this._options.onShow=b},g.prototype.updateOnHide=function(b){this._options.onHide=b},g.prototype.updateOnToggle=function(b){this._options.onToggle=b},g}();function d(){document.querySelectorAll("[data-dropdown-toggle]").forEach(function(g){var b=g.getAttribute("data-dropdown-toggle"),E=document.getElementById(b);if(E){var P=g.getAttribute("data-dropdown-placement"),o=g.getAttribute("data-dropdown-offset-skidding"),h=g.getAttribute("data-dropdown-offset-distance"),f=g.getAttribute("data-dropdown-trigger"),_=g.getAttribute("data-dropdown-delay"),C=g.getAttribute("data-dropdown-ignore-click-outside-class");new y(E,g,{placement:P||A.placement,triggerType:f||A.triggerType,offsetSkidding:o?parseInt(o):A.offsetSkidding,offsetDistance:h?parseInt(h):A.offsetDistance,delay:_?parseInt(_):A.delay,ignoreClickOutsideClass:C||A.ignoreClickOutsideClass})}else console.error('The dropdown element with id "'.concat(b,'" does not exist. Please check the data-dropdown-toggle attribute.'))})}s.initDropdowns=d,typeof window<"u"&&(window.Dropdown=y,window.initDropdowns=d),s.default=y},311:function(r,s,a){Object.defineProperty(s,"__esModule",{value:!0}),s.initFlowbite=void 0;var u=a(902),c=a(33),v=a(673),k=a(922),A=a(556),N=a(791),y=a(340),d=a(316),g=a(656),b=a(16),E=a(903),P=a(247),o=a(671),h=a(132);function f(){(0,u.initAccordions)(),(0,k.initCollapses)(),(0,c.initCarousels)(),(0,N.initDismisses)(),(0,d.initDropdowns)(),(0,b.initModals)(),(0,y.initDrawers)(),(0,P.initTabs)(),(0,o.initTooltips)(),(0,E.initPopovers)(),(0,A.initDials)(),(0,g.initInputCounters)(),(0,v.initCopyClipboards)(),(0,h.initDatepickers)()}s.initFlowbite=f,typeof window<"u"&&(window.initFlowbite=f)},656:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initInputCounters=void 0;var c=a(423),v={minValue:null,maxValue:null,onIncrement:function(){},onDecrement:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E,P){d===void 0&&(d=null),g===void 0&&(g=null),b===void 0&&(b=null),E===void 0&&(E=v),P===void 0&&(P=k),this._instanceId=P.id?P.id:d.id,this._targetEl=d,this._incrementEl=g,this._decrementEl=b,this._options=u(u({},v),E),this._initialized=!1,this.init(),c.default.addInstance("InputCounter",this,this._instanceId,P.override)}return y.prototype.init=function(){var d=this;this._targetEl&&!this._initialized&&(this._inputHandler=function(g){{var b=g.target;/^\d*$/.test(b.value)||(b.value=b.value.replace(/[^\d]/g,"")),d._options.maxValue!==null&&parseInt(b.value)>d._options.maxValue&&(b.value=d._options.maxValue.toString()),d._options.minValue!==null&&parseInt(b.value)<d._options.minValue&&(b.value=d._options.minValue.toString())}},this._incrementClickHandler=function(){d.increment()},this._decrementClickHandler=function(){d.decrement()},this._targetEl.addEventListener("input",this._inputHandler),this._incrementEl&&this._incrementEl.addEventListener("click",this._incrementClickHandler),this._decrementEl&&this._decrementEl.addEventListener("click",this._decrementClickHandler),this._initialized=!0)},y.prototype.destroy=function(){this._targetEl&&this._initialized&&(this._targetEl.removeEventListener("input",this._inputHandler),this._incrementEl&&this._incrementEl.removeEventListener("click",this._incrementClickHandler),this._decrementEl&&this._decrementEl.removeEventListener("click",this._decrementClickHandler),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("InputCounter",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getCurrentValue=function(){return parseInt(this._targetEl.value)||0},y.prototype.increment=function(){this._options.maxValue!==null&&this.getCurrentValue()>=this._options.maxValue||(this._targetEl.value=(this.getCurrentValue()+1).toString(),this._options.onIncrement(this))},y.prototype.decrement=function(){this._options.minValue!==null&&this.getCurrentValue()<=this._options.minValue||(this._targetEl.value=(this.getCurrentValue()-1).toString(),this._options.onDecrement(this))},y.prototype.updateOnIncrement=function(d){this._options.onIncrement=d},y.prototype.updateOnDecrement=function(d){this._options.onDecrement=d},y}();function N(){document.querySelectorAll("[data-input-counter]").forEach(function(y){var d=y.id,g=document.querySelector('[data-input-counter-increment="'+d+'"]'),b=document.querySelector('[data-input-counter-decrement="'+d+'"]'),E=y.getAttribute("data-input-counter-min"),P=y.getAttribute("data-input-counter-max");y?c.default.instanceExists("InputCounter",y.getAttribute("id"))||new A(y,g||null,b||null,{minValue:E?parseInt(E):null,maxValue:P?parseInt(P):null}):console.error('The target element with id "'.concat(d,'" does not exist. Please check the data-input-counter attribute.'))})}s.initInputCounters=N,typeof window<"u"&&(window.InputCounter=A,window.initInputCounters=N),s.default=A},16:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initModals=void 0;var c=a(423),v={placement:"center",backdropClasses:"bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-40",backdrop:"dynamic",closable:!0,onHide:function(){},onShow:function(){},onToggle:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b){d===void 0&&(d=null),g===void 0&&(g=v),b===void 0&&(b=k),this._eventListenerInstances=[],this._instanceId=b.id?b.id:d.id,this._targetEl=d,this._options=u(u({},v),g),this._isHidden=!0,this._backdropEl=null,this._initialized=!1,this.init(),c.default.addInstance("Modal",this,this._instanceId,b.override)}return y.prototype.init=function(){var d=this;this._targetEl&&!this._initialized&&(this._getPlacementClasses().map(function(g){d._targetEl.classList.add(g)}),this._initialized=!0)},y.prototype.destroy=function(){this._initialized&&(this.removeAllEventListenerInstances(),this._destroyBackdropEl(),this._initialized=!1)},y.prototype.removeInstance=function(){c.default.removeInstance("Modal",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype._createBackdrop=function(){var d;if(this._isHidden){var g=document.createElement("div");(d=g.classList).add.apply(d,this._options.backdropClasses.split(" ")),document.querySelector("body").append(g),this._backdropEl=g}},y.prototype._destroyBackdropEl=function(){!this._isHidden&&this._backdropEl&&(this._backdropEl.remove(),this._backdropEl=null)},y.prototype._setupModalCloseEventListeners=function(){var d=this;this._options.backdrop==="dynamic"&&(this._clickOutsideEventListener=function(g){d._handleOutsideClick(g.target)},this._targetEl.addEventListener("click",this._clickOutsideEventListener,!0)),this._keydownEventListener=function(g){g.key==="Escape"&&d.hide()},document.body.addEventListener("keydown",this._keydownEventListener,!0)},y.prototype._removeModalCloseEventListeners=function(){this._options.backdrop==="dynamic"&&this._targetEl.removeEventListener("click",this._clickOutsideEventListener,!0),document.body.removeEventListener("keydown",this._keydownEventListener,!0)},y.prototype._handleOutsideClick=function(d){(d===this._targetEl||d===this._backdropEl&&this.isVisible())&&this.hide()},y.prototype._getPlacementClasses=function(){switch(this._options.placement){case"top-left":return["justify-start","items-start"];case"top-center":return["justify-center","items-start"];case"top-right":return["justify-end","items-start"];case"center-left":return["justify-start","items-center"];case"center":return["justify-center","items-center"];case"center-right":return["justify-end","items-center"];case"bottom-left":return["justify-start","items-end"];case"bottom-center":return["justify-center","items-end"];case"bottom-right":return["justify-end","items-end"];default:return["justify-center","items-center"]}},y.prototype.toggle=function(){this._isHidden?this.show():this.hide(),this._options.onToggle(this)},y.prototype.show=function(){this.isHidden&&(this._targetEl.classList.add("flex"),this._targetEl.classList.remove("hidden"),this._targetEl.setAttribute("aria-modal","true"),this._targetEl.setAttribute("role","dialog"),this._targetEl.removeAttribute("aria-hidden"),this._createBackdrop(),this._isHidden=!1,this._options.closable&&this._setupModalCloseEventListeners(),document.body.classList.add("overflow-hidden"),this._options.onShow(this))},y.prototype.hide=function(){this.isVisible&&(this._targetEl.classList.add("hidden"),this._targetEl.classList.remove("flex"),this._targetEl.setAttribute("aria-hidden","true"),this._targetEl.removeAttribute("aria-modal"),this._targetEl.removeAttribute("role"),this._destroyBackdropEl(),this._isHidden=!0,document.body.classList.remove("overflow-hidden"),this._options.closable&&this._removeModalCloseEventListeners(),this._options.onHide(this))},y.prototype.isVisible=function(){return!this._isHidden},y.prototype.isHidden=function(){return this._isHidden},y.prototype.addEventListenerInstance=function(d,g,b){this._eventListenerInstances.push({element:d,type:g,handler:b})},y.prototype.removeAllEventListenerInstances=function(){this._eventListenerInstances.map(function(d){d.element.removeEventListener(d.type,d.handler)}),this._eventListenerInstances=[]},y.prototype.getAllEventListenerInstances=function(){return this._eventListenerInstances},y.prototype.updateOnShow=function(d){this._options.onShow=d},y.prototype.updateOnHide=function(d){this._options.onHide=d},y.prototype.updateOnToggle=function(d){this._options.onToggle=d},y}();function N(){document.querySelectorAll("[data-modal-target]").forEach(function(y){var d=y.getAttribute("data-modal-target"),g=document.getElementById(d);if(g){var b=g.getAttribute("data-modal-placement"),E=g.getAttribute("data-modal-backdrop");new A(g,{placement:b||v.placement,backdrop:E||v.backdrop})}else console.error("Modal with id ".concat(d," does not exist. Are you sure that the data-modal-target attribute points to the correct modal id?."))}),document.querySelectorAll("[data-modal-toggle]").forEach(function(y){var d=y.getAttribute("data-modal-toggle"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Modal",d);if(b){var E=function(){b.toggle()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Modal with id ".concat(d," has not been initialized. Please initialize it using the data-modal-target attribute."))}else console.error("Modal with id ".concat(d," does not exist. Are you sure that the data-modal-toggle attribute points to the correct modal id?"))}),document.querySelectorAll("[data-modal-show]").forEach(function(y){var d=y.getAttribute("data-modal-show"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Modal",d);if(b){var E=function(){b.show()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Modal with id ".concat(d," has not been initialized. Please initialize it using the data-modal-target attribute."))}else console.error("Modal with id ".concat(d," does not exist. Are you sure that the data-modal-show attribute points to the correct modal id?"))}),document.querySelectorAll("[data-modal-hide]").forEach(function(y){var d=y.getAttribute("data-modal-hide"),g=document.getElementById(d);if(g){var b=c.default.getInstance("Modal",d);if(b){var E=function(){b.hide()};y.addEventListener("click",E),b.addEventListenerInstance(y,"click",E)}else console.error("Modal with id ".concat(d," has not been initialized. Please initialize it using the data-modal-target attribute."))}else console.error("Modal with id ".concat(d," does not exist. Are you sure that the data-modal-hide attribute points to the correct modal id?"))})}s.initModals=N,typeof window<"u"&&(window.Modal=A,window.initModals=N),s.default=A},903:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(g){for(var b,E=1,P=arguments.length;E<P;E++){b=arguments[E];for(var o in b)Object.prototype.hasOwnProperty.call(b,o)&&(g[o]=b[o])}return g},u.apply(this,arguments)},c=this&&this.__spreadArray||function(g,b,E){if(E||arguments.length===2)for(var P=0,o=b.length,h;P<o;P++)(h||!(P in b))&&(h||(h=Array.prototype.slice.call(b,0,P)),h[P]=b[P]);return g.concat(h||Array.prototype.slice.call(b))};Object.defineProperty(s,"__esModule",{value:!0}),s.initPopovers=void 0;var v=a(853),k=a(423),A={placement:"top",offset:10,triggerType:"hover",onShow:function(){},onHide:function(){},onToggle:function(){}},N={id:null,override:!0},y=function(){function g(b,E,P,o){b===void 0&&(b=null),E===void 0&&(E=null),P===void 0&&(P=A),o===void 0&&(o=N),this._instanceId=o.id?o.id:b.id,this._targetEl=b,this._triggerEl=E,this._options=u(u({},A),P),this._popperInstance=null,this._visible=!1,this._initialized=!1,this.init(),k.default.addInstance("Popover",this,o.id?o.id:this._targetEl.id,o.override)}return g.prototype.init=function(){this._triggerEl&&this._targetEl&&!this._initialized&&(this._setupEventListeners(),this._popperInstance=this._createPopperInstance(),this._initialized=!0)},g.prototype.destroy=function(){var b=this;if(this._initialized){var E=this._getTriggerEvents();E.showEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._showHandler),b._targetEl.removeEventListener(P,b._showHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._hideHandler),b._targetEl.removeEventListener(P,b._hideHandler)}),this._removeKeydownListener(),this._removeClickOutsideListener(),this._popperInstance&&this._popperInstance.destroy(),this._initialized=!1}},g.prototype.removeInstance=function(){k.default.removeInstance("Popover",this._instanceId)},g.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},g.prototype._setupEventListeners=function(){var b=this,E=this._getTriggerEvents();this._showHandler=function(){b.show()},this._hideHandler=function(){setTimeout(function(){b._targetEl.matches(":hover")||b.hide()},100)},E.showEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._showHandler),b._targetEl.addEventListener(P,b._showHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._hideHandler),b._targetEl.addEventListener(P,b._hideHandler)})},g.prototype._createPopperInstance=function(){return(0,v.createPopper)(this._triggerEl,this._targetEl,{placement:this._options.placement,modifiers:[{name:"offset",options:{offset:[0,this._options.offset]}}]})},g.prototype._getTriggerEvents=function(){switch(this._options.triggerType){case"hover":return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]};case"click":return{showEvents:["click","focus"],hideEvents:["focusout","blur"]};case"none":return{showEvents:[],hideEvents:[]};default:return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]}}},g.prototype._setupKeydownListener=function(){var b=this;this._keydownEventListener=function(E){E.key==="Escape"&&b.hide()},document.body.addEventListener("keydown",this._keydownEventListener,!0)},g.prototype._removeKeydownListener=function(){document.body.removeEventListener("keydown",this._keydownEventListener,!0)},g.prototype._setupClickOutsideListener=function(){var b=this;this._clickOutsideEventListener=function(E){b._handleClickOutside(E,b._targetEl)},document.body.addEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._removeClickOutsideListener=function(){document.body.removeEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._handleClickOutside=function(b,E){var P=b.target;P!==E&&!E.contains(P)&&!this._triggerEl.contains(P)&&this.isVisible()&&this.hide()},g.prototype.isVisible=function(){return this._visible},g.prototype.toggle=function(){this.isVisible()?this.hide():this.show(),this._options.onToggle(this)},g.prototype.show=function(){this._targetEl.classList.remove("opacity-0","invisible"),this._targetEl.classList.add("opacity-100","visible"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!0}],!1)})}),this._setupClickOutsideListener(),this._setupKeydownListener(),this._popperInstance.update(),this._visible=!0,this._options.onShow(this)},g.prototype.hide=function(){this._targetEl.classList.remove("opacity-100","visible"),this._targetEl.classList.add("opacity-0","invisible"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!1}],!1)})}),this._removeClickOutsideListener(),this._removeKeydownListener(),this._visible=!1,this._options.onHide(this)},g.prototype.updateOnShow=function(b){this._options.onShow=b},g.prototype.updateOnHide=function(b){this._options.onHide=b},g.prototype.updateOnToggle=function(b){this._options.onToggle=b},g}();function d(){document.querySelectorAll("[data-popover-target]").forEach(function(g){var b=g.getAttribute("data-popover-target"),E=document.getElementById(b);if(E){var P=g.getAttribute("data-popover-trigger"),o=g.getAttribute("data-popover-placement"),h=g.getAttribute("data-popover-offset");new y(E,g,{placement:o||A.placement,offset:h?parseInt(h):A.offset,triggerType:P||A.triggerType})}else console.error('The popover element with id "'.concat(b,'" does not exist. Please check the data-popover-target attribute.'))})}s.initPopovers=d,typeof window<"u"&&(window.Popover=y,window.initPopovers=d),s.default=y},247:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(y){for(var d,g=1,b=arguments.length;g<b;g++){d=arguments[g];for(var E in d)Object.prototype.hasOwnProperty.call(d,E)&&(y[E]=d[E])}return y},u.apply(this,arguments)};Object.defineProperty(s,"__esModule",{value:!0}),s.initTabs=void 0;var c=a(423),v={defaultTabId:null,activeClasses:"text-blue-600 hover:text-blue-600 dark:text-blue-500 dark:hover:text-blue-500 border-blue-600 dark:border-blue-500",inactiveClasses:"dark:border-transparent text-gray-500 hover:text-gray-600 dark:text-gray-400 border-gray-100 hover:border-gray-300 dark:border-gray-700 dark:hover:text-gray-300",onShow:function(){}},k={id:null,override:!0},A=function(){function y(d,g,b,E){d===void 0&&(d=null),g===void 0&&(g=[]),b===void 0&&(b=v),E===void 0&&(E=k),this._instanceId=E.id?E.id:d.id,this._tabsEl=d,this._items=g,this._activeTab=b?this.getTab(b.defaultTabId):null,this._options=u(u({},v),b),this._initialized=!1,this.init(),c.default.addInstance("Tabs",this,this._instanceId,E.override)}return y.prototype.init=function(){var d=this;this._items.length&&!this._initialized&&(this._activeTab||this.setActiveTab(this._items[0]),this.show(this._activeTab.id,!0),this._items.map(function(g){g.triggerEl.addEventListener("click",function(b){b.preventDefault(),d.show(g.id)})}))},y.prototype.destroy=function(){this._initialized&&(this._initialized=!1)},y.prototype.removeInstance=function(){this.destroy(),c.default.removeInstance("Tabs",this._instanceId)},y.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},y.prototype.getActiveTab=function(){return this._activeTab},y.prototype.setActiveTab=function(d){this._activeTab=d},y.prototype.getTab=function(d){return this._items.filter(function(g){return g.id===d})[0]},y.prototype.show=function(d,g){var b,E,P=this;g===void 0&&(g=!1);var o=this.getTab(d);o===this._activeTab&&!g||(this._items.map(function(h){var f,_;h!==o&&((f=h.triggerEl.classList).remove.apply(f,P._options.activeClasses.split(" ")),(_=h.triggerEl.classList).add.apply(_,P._options.inactiveClasses.split(" ")),h.targetEl.classList.add("hidden"),h.triggerEl.setAttribute("aria-selected","false"))}),(b=o.triggerEl.classList).add.apply(b,this._options.activeClasses.split(" ")),(E=o.triggerEl.classList).remove.apply(E,this._options.inactiveClasses.split(" ")),o.triggerEl.setAttribute("aria-selected","true"),o.targetEl.classList.remove("hidden"),this.setActiveTab(o),this._options.onShow(this,o))},y.prototype.updateOnShow=function(d){this._options.onShow=d},y}();function N(){document.querySelectorAll("[data-tabs-toggle]").forEach(function(y){var d=[],g=y.getAttribute("data-tabs-active-classes"),b=y.getAttribute("data-tabs-inactive-classes"),E=null;y.querySelectorAll('[role="tab"]').forEach(function(P){var o=P.getAttribute("aria-selected")==="true",h={id:P.getAttribute("data-tabs-target"),triggerEl:P,targetEl:document.querySelector(P.getAttribute("data-tabs-target"))};d.push(h),o&&(E=h.id)}),new A(y,d,{defaultTabId:E,activeClasses:g||v.activeClasses,inactiveClasses:b||v.inactiveClasses})})}s.initTabs=N,typeof window<"u"&&(window.Tabs=A,window.initTabs=N),s.default=A},671:function(r,s,a){var u=this&&this.__assign||function(){return u=Object.assign||function(g){for(var b,E=1,P=arguments.length;E<P;E++){b=arguments[E];for(var o in b)Object.prototype.hasOwnProperty.call(b,o)&&(g[o]=b[o])}return g},u.apply(this,arguments)},c=this&&this.__spreadArray||function(g,b,E){if(E||arguments.length===2)for(var P=0,o=b.length,h;P<o;P++)(h||!(P in b))&&(h||(h=Array.prototype.slice.call(b,0,P)),h[P]=b[P]);return g.concat(h||Array.prototype.slice.call(b))};Object.defineProperty(s,"__esModule",{value:!0}),s.initTooltips=void 0;var v=a(853),k=a(423),A={placement:"top",triggerType:"hover",onShow:function(){},onHide:function(){},onToggle:function(){}},N={id:null,override:!0},y=function(){function g(b,E,P,o){b===void 0&&(b=null),E===void 0&&(E=null),P===void 0&&(P=A),o===void 0&&(o=N),this._instanceId=o.id?o.id:b.id,this._targetEl=b,this._triggerEl=E,this._options=u(u({},A),P),this._popperInstance=null,this._visible=!1,this._initialized=!1,this.init(),k.default.addInstance("Tooltip",this,this._instanceId,o.override)}return g.prototype.init=function(){this._triggerEl&&this._targetEl&&!this._initialized&&(this._setupEventListeners(),this._popperInstance=this._createPopperInstance(),this._initialized=!0)},g.prototype.destroy=function(){var b=this;if(this._initialized){var E=this._getTriggerEvents();E.showEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._showHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.removeEventListener(P,b._hideHandler)}),this._removeKeydownListener(),this._removeClickOutsideListener(),this._popperInstance&&this._popperInstance.destroy(),this._initialized=!1}},g.prototype.removeInstance=function(){k.default.removeInstance("Tooltip",this._instanceId)},g.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},g.prototype._setupEventListeners=function(){var b=this,E=this._getTriggerEvents();this._showHandler=function(){b.show()},this._hideHandler=function(){b.hide()},E.showEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._showHandler)}),E.hideEvents.forEach(function(P){b._triggerEl.addEventListener(P,b._hideHandler)})},g.prototype._createPopperInstance=function(){return(0,v.createPopper)(this._triggerEl,this._targetEl,{placement:this._options.placement,modifiers:[{name:"offset",options:{offset:[0,8]}}]})},g.prototype._getTriggerEvents=function(){switch(this._options.triggerType){case"hover":return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]};case"click":return{showEvents:["click","focus"],hideEvents:["focusout","blur"]};case"none":return{showEvents:[],hideEvents:[]};default:return{showEvents:["mouseenter","focus"],hideEvents:["mouseleave","blur"]}}},g.prototype._setupKeydownListener=function(){var b=this;this._keydownEventListener=function(E){E.key==="Escape"&&b.hide()},document.body.addEventListener("keydown",this._keydownEventListener,!0)},g.prototype._removeKeydownListener=function(){document.body.removeEventListener("keydown",this._keydownEventListener,!0)},g.prototype._setupClickOutsideListener=function(){var b=this;this._clickOutsideEventListener=function(E){b._handleClickOutside(E,b._targetEl)},document.body.addEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._removeClickOutsideListener=function(){document.body.removeEventListener("click",this._clickOutsideEventListener,!0)},g.prototype._handleClickOutside=function(b,E){var P=b.target;P!==E&&!E.contains(P)&&!this._triggerEl.contains(P)&&this.isVisible()&&this.hide()},g.prototype.isVisible=function(){return this._visible},g.prototype.toggle=function(){this.isVisible()?this.hide():this.show()},g.prototype.show=function(){this._targetEl.classList.remove("opacity-0","invisible"),this._targetEl.classList.add("opacity-100","visible"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!0}],!1)})}),this._setupClickOutsideListener(),this._setupKeydownListener(),this._popperInstance.update(),this._visible=!0,this._options.onShow(this)},g.prototype.hide=function(){this._targetEl.classList.remove("opacity-100","visible"),this._targetEl.classList.add("opacity-0","invisible"),this._popperInstance.setOptions(function(b){return u(u({},b),{modifiers:c(c([],b.modifiers,!0),[{name:"eventListeners",enabled:!1}],!1)})}),this._removeClickOutsideListener(),this._removeKeydownListener(),this._visible=!1,this._options.onHide(this)},g.prototype.updateOnShow=function(b){this._options.onShow=b},g.prototype.updateOnHide=function(b){this._options.onHide=b},g.prototype.updateOnToggle=function(b){this._options.onToggle=b},g}();function d(){document.querySelectorAll("[data-tooltip-target]").forEach(function(g){var b=g.getAttribute("data-tooltip-target"),E=document.getElementById(b);if(E){var P=g.getAttribute("data-tooltip-trigger"),o=g.getAttribute("data-tooltip-placement");new y(E,g,{placement:o||A.placement,triggerType:P||A.triggerType})}else console.error('The tooltip element with id "'.concat(b,'" does not exist. Please check the data-tooltip-target attribute.'))})}s.initTooltips=d,typeof window<"u"&&(window.Tooltip=y,window.initTooltips=d),s.default=y},947:function(r,s){Object.defineProperty(s,"__esModule",{value:!0});var a=function(){function u(c,v){v===void 0&&(v=[]),this._eventType=c,this._eventFunctions=v}return u.prototype.init=function(){var c=this;this._eventFunctions.forEach(function(v){typeof window<"u"&&window.addEventListener(c._eventType,v)})},u}();s.default=a},423:function(r,s){Object.defineProperty(s,"__esModule",{value:!0});var a=function(){function c(){this._instances={Accordion:{},Carousel:{},Collapse:{},Dial:{},Dismiss:{},Drawer:{},Dropdown:{},Modal:{},Popover:{},Tabs:{},Tooltip:{},InputCounter:{},CopyClipboard:{},Datepicker:{}}}return c.prototype.addInstance=function(v,k,A,N){if(N===void 0&&(N=!1),!this._instances[v])return console.warn("Flowbite: Component ".concat(v," does not exist.")),!1;if(this._instances[v][A]&&!N){console.warn("Flowbite: Instance with ID ".concat(A," already exists."));return}N&&this._instances[v][A]&&this._instances[v][A].destroyAndRemoveInstance(),this._instances[v][A||this._generateRandomId()]=k},c.prototype.getAllInstances=function(){return this._instances},c.prototype.getInstances=function(v){return this._instances[v]?this._instances[v]:(console.warn("Flowbite: Component ".concat(v," does not exist.")),!1)},c.prototype.getInstance=function(v,k){if(this._componentAndInstanceCheck(v,k)){if(!this._instances[v][k]){console.warn("Flowbite: Instance with ID ".concat(k," does not exist."));return}return this._instances[v][k]}},c.prototype.destroyAndRemoveInstance=function(v,k){this._componentAndInstanceCheck(v,k)&&(this.destroyInstanceObject(v,k),this.removeInstance(v,k))},c.prototype.removeInstance=function(v,k){this._componentAndInstanceCheck(v,k)&&delete this._instances[v][k]},c.prototype.destroyInstanceObject=function(v,k){this._componentAndInstanceCheck(v,k)&&this._instances[v][k].destroy()},c.prototype.instanceExists=function(v,k){return!(!this._instances[v]||!this._instances[v][k])},c.prototype._generateRandomId=function(){return Math.random().toString(36).substr(2,9)},c.prototype._componentAndInstanceCheck=function(v,k){return this._instances[v]?this._instances[v][k]?!0:(console.warn("Flowbite: Instance with ID ".concat(k," does not exist.")),!1):(console.warn("Flowbite: Component ".concat(v," does not exist.")),!1)},c}(),u=new a;s.default=u,typeof window<"u"&&(window.FlowbiteInstances=u)}},e={};function t(r){var s=e[r];if(s!==void 0)return s.exports;var a=e[r]={exports:{}};return i[r].call(a.exports,a,a.exports,t),a.exports}(function(){t.d=function(r,s){for(var a in s)t.o(s,a)&&!t.o(r,a)&&Object.defineProperty(r,a,{enumerable:!0,get:s[a]})}})(),function(){t.o=function(r,s){return Object.prototype.hasOwnProperty.call(r,s)}}(),function(){t.r=function(r){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})}}();var n={};return function(){var r=n;Object.defineProperty(r,"__esModule",{value:!0});var s=t(902),a=t(33),u=t(922),c=t(556),v=t(791),k=t(340),A=t(316),N=t(16),y=t(903),d=t(247),g=t(671),b=t(656),E=t(673),P=t(132);t(311);var o=t(947),h=new o.default("phx:page-loading-stop",[s.initAccordions,u.initCollapses,a.initCarousels,v.initDismisses,A.initDropdowns,N.initModals,k.initDrawers,d.initTabs,g.initTooltips,y.initPopovers,c.initDials,b.initInputCounters,E.initCopyClipboards,P.initDatepickers]);h.init();var f=new o.default("load",[s.initAccordions,u.initCollapses,a.initCarousels,v.initDismisses,A.initDropdowns,N.initModals,k.initDrawers,d.initTabs,g.initTooltips,y.initPopovers,c.initDials,b.initInputCounters,E.initCopyClipboards,P.initDatepickers]);f.init(),r.default={Accordion:s.default,Carousel:a.default,Collapse:u.default,Dial:c.default,Drawer:k.default,Dismiss:v.default,Dropdown:A.default,Modal:N.default,Popover:y.default,Tabs:d.default,Tooltip:g.default,InputCounter:b.default,CopyClipboard:E.default,Datepicker:P.default,Events:o.default}}(),n}()})});(function(){var i=e();function e(){if(typeof window.CustomEvent=="function")return window.CustomEvent;function r(s,a){a=a||{bubbles:!1,cancelable:!1,detail:void 0};var u=document.createEvent("CustomEvent");return u.initCustomEvent(s,a.bubbles,a.cancelable,a.detail),u}return r.prototype=window.Event.prototype,r}function t(r,s){var a=document.createElement("input");return a.type="hidden",a.name=r,a.value=s,a}function n(r,s){var a=r.getAttribute("data-to"),u=t("_method",r.getAttribute("data-method")),c=t("_csrf_token",r.getAttribute("data-csrf")),v=document.createElement("form"),k=document.createElement("input"),A=r.getAttribute("target");v.method=r.getAttribute("data-method")==="get"?"get":"post",v.action=a,v.style.display="none",A?v.target=A:s&&(v.target="_blank"),v.appendChild(c),v.appendChild(u),document.body.appendChild(v),k.type="submit",v.appendChild(k),k.click()}window.addEventListener("click",function(r){var s=r.target;if(!r.defaultPrevented)for(;s&&s.getAttribute;){var a=new i("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!s.dispatchEvent(a))return r.preventDefault(),r.stopImmediatePropagation(),!1;if(s.getAttribute("data-method")&&s.getAttribute("data-to"))return n(s,r.metaKey||r.shiftKey),r.preventDefault(),!1;s=s.parentNode}},!1),window.addEventListener("phoenix.link.click",function(r){var s=r.target.getAttribute("data-confirm");s&&!window.confirm(s)&&r.preventDefault()},!1)})();var wr=i=>typeof i=="function"?i:function(){return i},jc=typeof self<"u"?self:null,yr=typeof window<"u"?window:null,yn=jc||yr||yn,Hc="2.0.0",vi={connecting:0,open:1,closing:2,closed:3},zc=1e4,Vc=1e3,Ht={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},xi={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},Va={longpoll:"longpoll",websocket:"websocket"},Uc={complete:4},bs=class{constructor(i,e,t,n){this.channel=i,this.event=e,this.payload=t||function(){return{}},this.receivedResp=null,this.timeout=n,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}resend(i){this.timeout=i,this.reset(),this.send()}send(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}receive(i,e){return this.hasReceived(i)&&e(this.receivedResp.response),this.recHooks.push({status:i,callback:e}),this}reset(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}matchReceive({status:i,response:e,_ref:t}){this.recHooks.filter(n=>n.status===i).forEach(n=>n.callback(e))}cancelRefEvent(){this.refEvent&&this.channel.off(this.refEvent)}cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}startTimeout(){this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,i=>{this.cancelRefEvent(),this.cancelTimeout(),this.receivedResp=i,this.matchReceive(i)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}hasReceived(i){return this.receivedResp&&this.receivedResp.status===i}trigger(i,e){this.channel.trigger(this.refEvent,{status:i,response:e})}},zu=class{constructor(i,e){this.callback=i,this.timerCalc=e,this.timer=null,this.tries=0}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}},Wc=class{constructor(i,e,t){this.state=Ht.closed,this.topic=i,this.params=wr(e||{}),this.socket=t,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new bs(this,xi.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new zu(()=>{this.socket.isConnected()&&this.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(()=>this.rejoinTimer.reset())),this.stateChangeRefs.push(this.socket.onOpen(()=>{this.rejoinTimer.reset(),this.isErrored()&&this.rejoin()})),this.joinPush.receive("ok",()=>{this.state=Ht.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(n=>n.send()),this.pushBuffer=[]}),this.joinPush.receive("error",()=>{this.state=Ht.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.onClose(()=>{this.rejoinTimer.reset(),this.socket.hasLogger()&&this.socket.log("channel",`close ${this.topic} ${this.joinRef()}`),this.state=Ht.closed,this.socket.remove(this)}),this.onError(n=>{this.socket.hasLogger()&&this.socket.log("channel",`error ${this.topic}`,n),this.isJoining()&&this.joinPush.reset(),this.state=Ht.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",()=>{this.socket.hasLogger()&&this.socket.log("channel",`timeout ${this.topic} (${this.joinRef()})`,this.joinPush.timeout),new bs(this,xi.leave,wr({}),this.timeout).send(),this.state=Ht.errored,this.joinPush.reset(),this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.on(xi.reply,(n,r)=>{this.trigger(this.replyEventName(r),n)})}join(i=this.timeout){if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=i,this.joinedOnce=!0,this.rejoin(),this.joinPush}onClose(i){this.on(xi.close,i)}onError(i){return this.on(xi.error,e=>i(e))}on(i,e){let t=this.bindingRef++;return this.bindings.push({event:i,ref:t,callback:e}),t}off(i,e){this.bindings=this.bindings.filter(t=>!(t.event===i&&(typeof e>"u"||e===t.ref)))}canPush(){return this.socket.isConnected()&&this.isJoined()}push(i,e,t=this.timeout){if(e=e||{},!this.joinedOnce)throw new Error(`tried to push '${i}' to '${this.topic}' before joining. Use channel.join() before pushing events`);let n=new bs(this,i,function(){return e},t);return this.canPush()?n.send():(n.startTimeout(),this.pushBuffer.push(n)),n}leave(i=this.timeout){this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=Ht.leaving;let e=()=>{this.socket.hasLogger()&&this.socket.log("channel",`leave ${this.topic}`),this.trigger(xi.close,"leave")},t=new bs(this,xi.leave,wr({}),i);return t.receive("ok",()=>e()).receive("timeout",()=>e()),t.send(),this.canPush()||t.trigger("ok",{}),t}onMessage(i,e,t){return e}isMember(i,e,t,n){return this.topic!==i?!1:n&&n!==this.joinRef()?(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:i,event:e,payload:t,joinRef:n}),!1):!0}joinRef(){return this.joinPush.ref}rejoin(i=this.timeout){this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=Ht.joining,this.joinPush.resend(i))}trigger(i,e,t,n){let r=this.onMessage(i,e,t,n);if(e&&!r)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");let s=this.bindings.filter(a=>a.event===i);for(let a=0;a<s.length;a++)s[a].callback(r,t,n||this.joinRef())}replyEventName(i){return`chan_reply_${i}`}isClosed(){return this.state===Ht.closed}isErrored(){return this.state===Ht.errored}isJoined(){return this.state===Ht.joined}isJoining(){return this.state===Ht.joining}isLeaving(){return this.state===Ht.leaving}},ws=class{static request(i,e,t,n,r,s,a){if(yn.XDomainRequest){let u=new yn.XDomainRequest;return this.xdomainRequest(u,i,e,n,r,s,a)}else{let u=new yn.XMLHttpRequest;return this.xhrRequest(u,i,e,t,n,r,s,a)}}static xdomainRequest(i,e,t,n,r,s,a){return i.timeout=r,i.open(e,t),i.onload=()=>{let u=this.parseJSON(i.responseText);a&&a(u)},s&&(i.ontimeout=s),i.onprogress=()=>{},i.send(n),i}static xhrRequest(i,e,t,n,r,s,a,u){return i.open(e,t,!0),i.timeout=s,i.setRequestHeader("Content-Type",n),i.onerror=()=>u&&u(null),i.onreadystatechange=()=>{if(i.readyState===Uc.complete&&u){let c=this.parseJSON(i.responseText);u(c)}},a&&(i.ontimeout=a),i.send(r),i}static parseJSON(i){if(!i||i==="")return null;try{return JSON.parse(i)}catch{return console&&console.log("failed to parse JSON response",i),null}}static serialize(i,e){let t=[];for(var n in i){if(!Object.prototype.hasOwnProperty.call(i,n))continue;let r=e?`${e}[${n}]`:n,s=i[n];typeof s=="object"?t.push(this.serialize(s,r)):t.push(encodeURIComponent(r)+"="+encodeURIComponent(s))}return t.join("&")}static appendParams(i,e){if(Object.keys(e).length===0)return i;let t=i.match(/\?/)?"&":"?";return`${i}${t}${this.serialize(e)}`}},$c=i=>{let e="",t=new Uint8Array(i),n=t.byteLength;for(let r=0;r<n;r++)e+=String.fromCharCode(t[r]);return btoa(e)},br=class{constructor(i){this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.reqs=new Set,this.awaitingBatchAck=!1,this.currentBatch=null,this.currentBatchTimer=null,this.batchBuffer=[],this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(i),this.readyState=vi.connecting,setTimeout(()=>this.poll(),0)}normalizeEndpoint(i){return i.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+Va.websocket),"$1/"+Va.longpoll)}endpointURL(){return ws.appendParams(this.pollEndpoint,{token:this.token})}closeAndRetry(i,e,t){this.close(i,e,t),this.readyState=vi.connecting}ontimeout(){this.onerror("timeout"),this.closeAndRetry(1005,"timeout",!1)}isActive(){return this.readyState===vi.open||this.readyState===vi.connecting}poll(){this.ajax("GET","application/json",null,()=>this.ontimeout(),i=>{if(i){var{status:e,token:t,messages:n}=i;this.token=t}else e=0;switch(e){case 200:n.forEach(r=>{setTimeout(()=>this.onmessage({data:r}),0)}),this.poll();break;case 204:this.poll();break;case 410:this.readyState=vi.open,this.onopen({}),this.poll();break;case 403:this.onerror(403),this.close(1008,"forbidden",!1);break;case 0:case 500:this.onerror(500),this.closeAndRetry(1011,"internal server error",500);break;default:throw new Error(`unhandled poll status ${e}`)}})}send(i){typeof i!="string"&&(i=$c(i)),this.currentBatch?this.currentBatch.push(i):this.awaitingBatchAck?this.batchBuffer.push(i):(this.currentBatch=[i],this.currentBatchTimer=setTimeout(()=>{this.batchSend(this.currentBatch),this.currentBatch=null},0))}batchSend(i){this.awaitingBatchAck=!0,this.ajax("POST","application/x-ndjson",i.join(`
`),()=>this.onerror("timeout"),e=>{this.awaitingBatchAck=!1,!e||e.status!==200?(this.onerror(e&&e.status),this.closeAndRetry(1011,"internal server error",!1)):this.batchBuffer.length>0&&(this.batchSend(this.batchBuffer),this.batchBuffer=[])})}close(i,e,t){for(let r of this.reqs)r.abort();this.readyState=vi.closed;let n=Object.assign({code:1e3,reason:void 0,wasClean:!0},{code:i,reason:e,wasClean:t});this.batchBuffer=[],clearTimeout(this.currentBatchTimer),this.currentBatchTimer=null,typeof CloseEvent<"u"?this.onclose(new CloseEvent("close",n)):this.onclose(n)}ajax(i,e,t,n,r){let s,a=()=>{this.reqs.delete(s),n()};s=ws.request(i,this.endpointURL(),e,t,this.timeout,a,u=>{this.reqs.delete(s),this.isActive()&&r(u)}),this.reqs.add(s)}};var ys={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode(i,e){if(i.payload.constructor===ArrayBuffer)return e(this.binaryEncode(i));{let t=[i.join_ref,i.ref,i.topic,i.event,i.payload];return e(JSON.stringify(t))}},decode(i,e){if(i.constructor===ArrayBuffer)return e(this.binaryDecode(i));{let[t,n,r,s,a]=JSON.parse(i);return e({join_ref:t,ref:n,topic:r,event:s,payload:a})}},binaryEncode(i){let{join_ref:e,ref:t,event:n,topic:r,payload:s}=i,a=this.META_LENGTH+e.length+t.length+r.length+n.length,u=new ArrayBuffer(this.HEADER_LENGTH+a),c=new DataView(u),v=0;c.setUint8(v++,this.KINDS.push),c.setUint8(v++,e.length),c.setUint8(v++,t.length),c.setUint8(v++,r.length),c.setUint8(v++,n.length),Array.from(e,A=>c.setUint8(v++,A.charCodeAt(0))),Array.from(t,A=>c.setUint8(v++,A.charCodeAt(0))),Array.from(r,A=>c.setUint8(v++,A.charCodeAt(0))),Array.from(n,A=>c.setUint8(v++,A.charCodeAt(0)));var k=new Uint8Array(u.byteLength+s.byteLength);return k.set(new Uint8Array(u),0),k.set(new Uint8Array(s),u.byteLength),k.buffer},binaryDecode(i){let e=new DataView(i),t=e.getUint8(0),n=new TextDecoder;switch(t){case this.KINDS.push:return this.decodePush(i,e,n);case this.KINDS.reply:return this.decodeReply(i,e,n);case this.KINDS.broadcast:return this.decodeBroadcast(i,e,n)}},decodePush(i,e,t){let n=e.getUint8(1),r=e.getUint8(2),s=e.getUint8(3),a=this.HEADER_LENGTH+this.META_LENGTH-1,u=t.decode(i.slice(a,a+n));a=a+n;let c=t.decode(i.slice(a,a+r));a=a+r;let v=t.decode(i.slice(a,a+s));a=a+s;let k=i.slice(a,i.byteLength);return{join_ref:u,ref:null,topic:c,event:v,payload:k}},decodeReply(i,e,t){let n=e.getUint8(1),r=e.getUint8(2),s=e.getUint8(3),a=e.getUint8(4),u=this.HEADER_LENGTH+this.META_LENGTH,c=t.decode(i.slice(u,u+n));u=u+n;let v=t.decode(i.slice(u,u+r));u=u+r;let k=t.decode(i.slice(u,u+s));u=u+s;let A=t.decode(i.slice(u,u+a));u=u+a;let N=i.slice(u,i.byteLength),y={status:A,response:N};return{join_ref:c,ref:v,topic:k,event:xi.reply,payload:y}},decodeBroadcast(i,e,t){let n=e.getUint8(1),r=e.getUint8(2),s=this.HEADER_LENGTH+2,a=t.decode(i.slice(s,s+n));s=s+n;let u=t.decode(i.slice(s,s+r));s=s+r;let c=i.slice(s,i.byteLength);return{join_ref:null,ref:null,topic:a,event:u,payload:c}}},Vu=class{constructor(i,e={}){this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=e.timeout||zc,this.transport=e.transport||yn.WebSocket||br,this.primaryPassedHealthCheck=!1,this.longPollFallbackMs=e.longPollFallbackMs,this.fallbackTimer=null,this.sessionStore=e.sessionStorage||yn&&yn.sessionStorage,this.establishedConnections=0,this.defaultEncoder=ys.encode.bind(ys),this.defaultDecoder=ys.decode.bind(ys),this.closeWasClean=!1,this.binaryType=e.binaryType||"arraybuffer",this.connectClock=1,this.transport!==br?(this.encode=e.encode||this.defaultEncoder,this.decode=e.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder);let t=null;yr&&yr.addEventListener&&(yr.addEventListener("pagehide",n=>{this.conn&&(this.disconnect(),t=this.connectClock)}),yr.addEventListener("pageshow",n=>{t===this.connectClock&&(t=null,this.connect())})),this.heartbeatIntervalMs=e.heartbeatIntervalMs||3e4,this.rejoinAfterMs=n=>e.rejoinAfterMs?e.rejoinAfterMs(n):[1e3,2e3,5e3][n-1]||1e4,this.reconnectAfterMs=n=>e.reconnectAfterMs?e.reconnectAfterMs(n):[10,50,100,150,200,250,500,1e3,2e3][n-1]||5e3,this.logger=e.logger||null,!this.logger&&e.debug&&(this.logger=(n,r,s)=>{console.log(`${n}: ${r}`,s)}),this.longpollerTimeout=e.longpollerTimeout||2e4,this.params=wr(e.params||{}),this.endPoint=`${i}/${Va.websocket}`,this.vsn=e.vsn||Hc,this.heartbeatTimeoutTimer=null,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new zu(()=>{this.teardown(()=>this.connect())},this.reconnectAfterMs)}getLongPollTransport(){return br}replaceTransport(i){this.connectClock++,this.closeWasClean=!0,clearTimeout(this.fallbackTimer),this.reconnectTimer.reset(),this.conn&&(this.conn.close(),this.conn=null),this.transport=i}protocol(){return location.protocol.match(/^https/)?"wss":"ws"}endPointURL(){let i=ws.appendParams(ws.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return i.charAt(0)!=="/"?i:i.charAt(1)==="/"?`${this.protocol()}:${i}`:`${this.protocol()}://${location.host}${i}`}disconnect(i,e,t){this.connectClock++,this.closeWasClean=!0,clearTimeout(this.fallbackTimer),this.reconnectTimer.reset(),this.teardown(i,e,t)}connect(i){i&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=wr(i)),!this.conn&&(this.longPollFallbackMs&&this.transport!==br?this.connectWithFallback(br,this.longPollFallbackMs):this.transportConnect())}log(i,e,t){this.logger&&this.logger(i,e,t)}hasLogger(){return this.logger!==null}onOpen(i){let e=this.makeRef();return this.stateChangeCallbacks.open.push([e,i]),e}onClose(i){let e=this.makeRef();return this.stateChangeCallbacks.close.push([e,i]),e}onError(i){let e=this.makeRef();return this.stateChangeCallbacks.error.push([e,i]),e}onMessage(i){let e=this.makeRef();return this.stateChangeCallbacks.message.push([e,i]),e}ping(i){if(!this.isConnected())return!1;let e=this.makeRef(),t=Date.now();this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:e});let n=this.onMessage(r=>{r.ref===e&&(this.off([n]),i(Date.now()-t))});return!0}transportConnect(){this.connectClock++,this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=()=>this.onConnOpen(),this.conn.onerror=i=>this.onConnError(i),this.conn.onmessage=i=>this.onConnMessage(i),this.conn.onclose=i=>this.onConnClose(i)}getSession(i){return this.sessionStore&&this.sessionStore.getItem(i)}storeSession(i,e){this.sessionStore&&this.sessionStore.setItem(i,e)}connectWithFallback(i,e=2500){clearTimeout(this.fallbackTimer);let t=!1,n=!0,r,s,a=u=>{this.log("transport",`falling back to ${i.name}...`,u),this.off([r,s]),n=!1,this.replaceTransport(i),this.transportConnect()};if(this.getSession(`phx:fallback:${i.name}`))return a("memorized");this.fallbackTimer=setTimeout(a,e),s=this.onError(u=>{this.log("transport","error",u),n&&!t&&(clearTimeout(this.fallbackTimer),a(u))}),this.onOpen(()=>{if(t=!0,!n)return this.primaryPassedHealthCheck||this.storeSession(`phx:fallback:${i.name}`,"true"),this.log("transport",`established ${i.name} fallback`);clearTimeout(this.fallbackTimer),this.fallbackTimer=setTimeout(a,e),this.ping(u=>{this.log("transport","connected to primary after",u),this.primaryPassedHealthCheck=!0,clearTimeout(this.fallbackTimer)})}),this.transportConnect()}clearHeartbeats(){clearTimeout(this.heartbeatTimer),clearTimeout(this.heartbeatTimeoutTimer)}onConnOpen(){this.hasLogger()&&this.log("transport",`${this.transport.name} connected to ${this.endPointURL()}`),this.closeWasClean=!1,this.establishedConnections++,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(([,i])=>i())}heartbeatTimeout(){this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.triggerChanError(),this.closeWasClean=!1,this.teardown(()=>this.reconnectTimer.scheduleTimeout(),Vc,"heartbeat timeout"))}resetHeartbeat(){this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,this.clearHeartbeats(),this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs))}teardown(i,e,t){if(!this.conn)return i&&i();this.waitForBufferDone(()=>{this.conn&&(e?this.conn.close(e,t||""):this.conn.close()),this.waitForSocketClosed(()=>{this.conn&&(this.conn.onopen=function(){},this.conn.onerror=function(){},this.conn.onmessage=function(){},this.conn.onclose=function(){},this.conn=null),i&&i()})})}waitForBufferDone(i,e=1){if(e===5||!this.conn||!this.conn.bufferedAmount){i();return}setTimeout(()=>{this.waitForBufferDone(i,e+1)},150*e)}waitForSocketClosed(i,e=1){if(e===5||!this.conn||this.conn.readyState===vi.closed){i();return}setTimeout(()=>{this.waitForSocketClosed(i,e+1)},150*e)}onConnClose(i){let e=i&&i.code;this.hasLogger()&&this.log("transport","close",i),this.triggerChanError(),this.clearHeartbeats(),!this.closeWasClean&&e!==1e3&&this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(([,t])=>t(i))}onConnError(i){this.hasLogger()&&this.log("transport",i);let e=this.transport,t=this.establishedConnections;this.stateChangeCallbacks.error.forEach(([,n])=>{n(i,e,t)}),(e===this.transport||t>0)&&this.triggerChanError()}triggerChanError(){this.channels.forEach(i=>{i.isErrored()||i.isLeaving()||i.isClosed()||i.trigger(xi.error)})}connectionState(){switch(this.conn&&this.conn.readyState){case vi.connecting:return"connecting";case vi.open:return"open";case vi.closing:return"closing";default:return"closed"}}isConnected(){return this.connectionState()==="open"}remove(i){this.off(i.stateChangeRefs),this.channels=this.channels.filter(e=>e!==i)}off(i){for(let e in this.stateChangeCallbacks)this.stateChangeCallbacks[e]=this.stateChangeCallbacks[e].filter(([t])=>i.indexOf(t)===-1)}channel(i,e={}){let t=new Wc(i,e,this);return this.channels.push(t),t}push(i){if(this.hasLogger()){let{topic:e,event:t,payload:n,ref:r,join_ref:s}=i;this.log("push",`${e} ${t} (${s}, ${r})`,n)}this.isConnected()?this.encode(i,e=>this.conn.send(e)):this.sendBuffer.push(()=>this.encode(i,e=>this.conn.send(e)))}makeRef(){let i=this.ref+1;return i===this.ref?this.ref=0:this.ref=i,this.ref.toString()}sendHeartbeat(){this.pendingHeartbeatRef&&!this.isConnected()||(this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatTimeoutTimer=setTimeout(()=>this.heartbeatTimeout(),this.heartbeatIntervalMs))}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(i=>i()),this.sendBuffer=[])}onConnMessage(i){this.decode(i.data,e=>{let{topic:t,event:n,payload:r,ref:s,join_ref:a}=e;s&&s===this.pendingHeartbeatRef&&(this.clearHeartbeats(),this.pendingHeartbeatRef=null,this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)),this.hasLogger()&&this.log("receive",`${r.status||""} ${t} ${n} ${s&&"("+s+")"||""}`,r);for(let u=0;u<this.channels.length;u++){let c=this.channels[u];c.isMember(t,n,r,a)&&c.trigger(n,r,s,a)}for(let u=0;u<this.stateChangeCallbacks.message.length;u++){let[,c]=this.stateChangeCallbacks.message[u];c(e)}})}leaveOpenTopic(i){let e=this.channels.find(t=>t.topic===i&&(t.isJoined()||t.isJoining()));e&&(this.hasLogger()&&this.log("transport",`leaving duplicate topic "${i}"`),e.leave())}};var bl="consecutive-reloads",qc=10,Kc=5e3,Jc=1e4,Gc=3e4,yl=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading","phx-hook-loading"],Ri="data-phx-component",Ua="data-phx-link",Xc="track-static",Yc="data-phx-link-state",Qn="data-phx-ref-loading",Gt="data-phx-ref-src",tt="data-phx-ref-lock",wl="track-uploads",Pi="data-phx-upload-ref",to="data-phx-preflighted-refs",Zc="data-phx-done-refs",Uu="drop-target",Xa="data-phx-active-refs",Ts="phx:live-file:updated",_l="data-phx-skip",kl="data-phx-id",Wu="data-phx-prune",$u="phx-connected",wn="phx-loading",Xn="phx-error",qu="phx-client-error",_r="phx-server-error",An="data-phx-parent-id",io="data-phx-main",en="data-phx-root-id",Ya="viewport-top",Za="viewport-bottom",Qc="trigger-action",Ls="phx-has-focused",eh=["text","textarea","number","email","password","search","tel","url","date","time","datetime-local","color","range"],Al=["checkbox","radio"],Rr="phx-has-submitted",_i="data-phx-session",En=`[${_i}]`,Ku="data-phx-sticky",kn="data-phx-static",Qa="data-phx-readonly",Zn="data-phx-disabled",Ju="disable-with",Rs="data-phx-disable-with-restore",kr="hook",th="debounce",ih="throttle",Ps="update",Wa="stream",Ar="data-phx-stream",nh="key",bi="phxPrivate",Gu="auto-recover",_s="phx:live-socket:debug",$a="phx:live-socket:profiling",qa="phx:live-socket:latency-sim",ks="phx:nav-history-position",rh="progress",Xu="mounted",Yu="__phoenix_reload_status__",sh=1,Zu=3,ah=200,oh="phx-",uh=3e4,Er="debounce-trigger",Cr="throttled",Qu="debounce-prev-key",lh={debounce:300,throttle:300},el=[Qn,Gt,tt],As="d",yi="s",Ka="r",mt="c",tl="e",il="r",nl="t",dh="p",rl="stream",ch=class{constructor(i,e,t){let{chunk_size:n,chunk_timeout:r}=e;this.liveSocket=t,this.entry=i,this.offset=0,this.chunkSize=n,this.chunkTimeout=r,this.chunkTimer=null,this.errored=!1,this.uploadChannel=t.channel(`lvu:${i.ref}`,{token:i.metadata()})}error(i){this.errored||(this.uploadChannel.leave(),this.errored=!0,clearTimeout(this.chunkTimer),this.entry.error(i))}upload(){this.uploadChannel.onError(i=>this.error(i)),this.uploadChannel.join().receive("ok",i=>this.readNextChunk()).receive("error",i=>this.error(i))}isDone(){return this.offset>=this.entry.file.size}readNextChunk(){let i=new window.FileReader,e=this.entry.file.slice(this.offset,this.chunkSize+this.offset);i.onload=t=>{if(t.target.error===null)this.offset+=t.target.result.byteLength,this.pushChunk(t.target.result);else return Lt("Read error: "+t.target.error)},i.readAsArrayBuffer(e)}pushChunk(i){this.uploadChannel.isJoined()&&this.uploadChannel.push("chunk",i,this.chunkTimeout).receive("ok",()=>{this.entry.progress(this.offset/this.entry.file.size*100),this.isDone()||(this.chunkTimer=setTimeout(()=>this.readNextChunk(),this.liveSocket.getLatencySim()||0))}).receive("error",({reason:e})=>this.error(e))}},Lt=(i,e)=>console.error&&console.error(i,e),Li=i=>{let e=typeof i;return e==="number"||e==="string"&&/^(0|[1-9]\d*)$/.test(i)};function hh(){let i=new Set,e=document.querySelectorAll("*[id]");for(let t=0,n=e.length;t<n;t++)i.has(e[t].id)?console.error(`Multiple IDs detected: ${e[t].id}. Ensure unique element ids.`):i.add(e[t].id)}function fh(i){let e=new Set;Object.keys(i).forEach(t=>{let n=document.getElementById(t);n&&n.parentElement&&n.parentElement.getAttribute("phx-update")!=="stream"&&e.add(`The stream container with id "${n.parentElement.id}" is missing the phx-update="stream" attribute. Ensure it is set for streams to work properly.`)}),e.forEach(t=>console.error(t))}var ph=(i,e,t,n)=>{i.liveSocket.isDebugEnabled()&&console.log(`${i.id} ${e}: ${t} - `,n)},Sr=i=>typeof i=="function"?i:function(){return i},xs=i=>JSON.parse(JSON.stringify(i)),Lr=(i,e,t)=>{do{if(i.matches(`[${e}]`)&&!i.disabled)return i;i=i.parentElement||i.parentNode}while(i!==null&&i.nodeType===1&&!(t&&t.isSameNode(i)||i.matches(En)));return null},Yn=i=>i!==null&&typeof i=="object"&&!(i instanceof Array),gh=(i,e)=>JSON.stringify(i)===JSON.stringify(e),sl=i=>{for(let e in i)return!1;return!0},Qi=(i,e)=>i&&e(i),mh=function(i,e,t,n){i.forEach(r=>{new ch(r,t.config,n).upload()})},vh={canPushState(){return typeof history.pushState<"u"},dropLocal(i,e,t){return i.removeItem(this.localKey(e,t))},updateLocal(i,e,t,n,r){let s=this.getLocal(i,e,t),a=this.localKey(e,t),u=s===null?n:r(s);return i.setItem(a,JSON.stringify(u)),u},getLocal(i,e,t){return JSON.parse(i.getItem(this.localKey(e,t)))},updateCurrentState(i){this.canPushState()&&history.replaceState(i(history.state||{}),"",window.location.href)},pushState(i,e,t){if(this.canPushState()){if(t!==window.location.href){if(e.type=="redirect"&&e.scroll){let n=history.state||{};n.scroll=e.scroll,history.replaceState(n,"",window.location.href)}delete e.scroll,history[i+"State"](e,"",t||null),window.requestAnimationFrame(()=>{let n=this.getHashTargetEl(window.location.hash);n?n.scrollIntoView():e.type==="redirect"&&window.scroll(0,0)})}}else this.redirect(t)},setCookie(i,e,t){let n=typeof t=="number"?` max-age=${t};`:"";document.cookie=`${i}=${e};${n} path=/`},getCookie(i){return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${i}s*=s*([^;]*).*$)|^.*$`),"$1")},deleteCookie(i){document.cookie=`${i}=; max-age=-1; path=/`},redirect(i,e){e&&this.setCookie("__phoenix_flash__",e,60),window.location=i},localKey(i,e){return`${i}-${e}`},getHashTargetEl(i){let e=i.toString().substring(1);if(e!=="")return document.getElementById(e)||document.querySelector(`a[name="${e}"]`)}},xt=vh,_n={byId(i){return document.getElementById(i)||Lt(`no id found for ${i}`)},removeClass(i,e){i.classList.remove(e),i.classList.length===0&&i.removeAttribute("class")},all(i,e,t){if(!i)return[];let n=Array.from(i.querySelectorAll(e));return t?n.forEach(t):n},childNodeLength(i){let e=document.createElement("template");return e.innerHTML=i,e.content.childElementCount},isUploadInput(i){return i.type==="file"&&i.getAttribute(Pi)!==null},isAutoUpload(i){return i.hasAttribute("data-phx-auto-upload")},findUploadInputs(i){let e=i.id,t=this.all(document,`input[type="file"][${Pi}][form="${e}"]`);return this.all(i,`input[type="file"][${Pi}]`).concat(t)},findComponentNodeList(i,e){return this.filterWithinSameLiveView(this.all(i,`[${Ri}="${e}"]`),i)},isPhxDestroyed(i){return!!(i.id&&_n.private(i,"destroyed"))},wantsNewTab(i){let e=i.ctrlKey||i.shiftKey||i.metaKey||i.button&&i.button===1,t=i.target instanceof HTMLAnchorElement&&i.target.hasAttribute("download"),n=i.target.hasAttribute("target")&&i.target.getAttribute("target").toLowerCase()==="_blank",r=i.target.hasAttribute("target")&&!i.target.getAttribute("target").startsWith("_");return e||n||t||r},isUnloadableFormSubmit(i){return i.target&&i.target.getAttribute("method")==="dialog"||i.submitter&&i.submitter.getAttribute("formmethod")==="dialog"?!1:!i.defaultPrevented&&!this.wantsNewTab(i)},isNewPageClick(i,e){let t=i.target instanceof HTMLAnchorElement?i.target.getAttribute("href"):null,n;if(i.defaultPrevented||t===null||this.wantsNewTab(i)||t.startsWith("mailto:")||t.startsWith("tel:")||i.target.isContentEditable)return!1;try{n=new URL(t)}catch{try{n=new URL(t,e)}catch{return!0}}return n.host===e.host&&n.protocol===e.protocol&&n.pathname===e.pathname&&n.search===e.search?n.hash===""&&!n.href.endsWith("#"):n.protocol.startsWith("http")},markPhxChildDestroyed(i){this.isPhxChild(i)&&i.setAttribute(_i,""),this.putPrivate(i,"destroyed",!0)},findPhxChildrenInFragment(i,e){let t=document.createElement("template");return t.innerHTML=i,this.findPhxChildren(t.content,e)},isIgnored(i,e){return(i.getAttribute(e)||i.getAttribute("data-phx-update"))==="ignore"},isPhxUpdate(i,e,t){return i.getAttribute&&t.indexOf(i.getAttribute(e))>=0},findPhxSticky(i){return this.all(i,`[${Ku}]`)},findPhxChildren(i,e){return this.all(i,`${En}[${An}="${e}"]`)},findExistingParentCIDs(i,e){let t=new Set,n=new Set;return e.forEach(r=>{this.filterWithinSameLiveView(this.all(i,`[${Ri}="${r}"]`),i).forEach(s=>{t.add(r),this.filterWithinSameLiveView(this.all(s,`[${Ri}]`),s).map(a=>parseInt(a.getAttribute(Ri))).forEach(a=>n.add(a))})}),n.forEach(r=>t.delete(r)),t},filterWithinSameLiveView(i,e){return e.querySelector(En)?i.filter(t=>this.withinSameLiveView(t,e)):i},withinSameLiveView(i,e){for(;i=i.parentNode;){if(i.isSameNode(e))return!0;if(i.getAttribute(_i)!==null)return!1}},private(i,e){return i[bi]&&i[bi][e]},deletePrivate(i,e){i[bi]&&delete i[bi][e]},putPrivate(i,e,t){i[bi]||(i[bi]={}),i[bi][e]=t},updatePrivate(i,e,t,n){let r=this.private(i,e);r===void 0?this.putPrivate(i,e,n(t)):this.putPrivate(i,e,n(r))},syncPendingAttrs(i,e){i.hasAttribute(Gt)&&(yl.forEach(t=>{i.classList.contains(t)&&e.classList.add(t)}),el.filter(t=>i.hasAttribute(t)).forEach(t=>{e.setAttribute(t,i.getAttribute(t))}))},copyPrivates(i,e){e[bi]&&(i[bi]=e[bi])},putTitle(i){let e=document.querySelector("title");if(e){let{prefix:t,suffix:n,default:r}=e.dataset,s=typeof i!="string"||i.trim()==="";if(s&&typeof r!="string")return;let a=s?r:i;document.title=`${t||""}${a||""}${n||""}`}else document.title=i},debounce(i,e,t,n,r,s,a,u){let c=i.getAttribute(t),v=i.getAttribute(r);c===""&&(c=n),v===""&&(v=s);let k=c||v;switch(k){case null:return u();case"blur":this.once(i,"debounce-blur")&&i.addEventListener("blur",()=>{a()&&u()});return;default:let A=parseInt(k),N=()=>v?this.deletePrivate(i,Cr):u(),y=this.incCycle(i,Er,N);if(isNaN(A))return Lt(`invalid throttle/debounce value: ${k}`);if(v){let g=!1;if(e.type==="keydown"){let b=this.private(i,Qu);this.putPrivate(i,Qu,e.key),g=b!==e.key}if(!g&&this.private(i,Cr))return!1;{u();let b=setTimeout(()=>{a()&&this.triggerCycle(i,Er)},A);this.putPrivate(i,Cr,b)}}else setTimeout(()=>{a()&&this.triggerCycle(i,Er,y)},A);let d=i.form;d&&this.once(d,"bind-debounce")&&d.addEventListener("submit",()=>{Array.from(new FormData(d).entries(),([g])=>{let b=d.querySelector(`[name="${g}"]`);this.incCycle(b,Er),this.deletePrivate(b,Cr)})}),this.once(i,"bind-debounce")&&i.addEventListener("blur",()=>{clearTimeout(this.private(i,Cr)),this.triggerCycle(i,Er)})}},triggerCycle(i,e,t){let[n,r]=this.private(i,e);t||(t=n),t===n&&(this.incCycle(i,e),r())},once(i,e){return this.private(i,e)===!0?!1:(this.putPrivate(i,e,!0),!0)},incCycle(i,e,t=function(){}){let[n]=this.private(i,e)||[0,t];return n++,this.putPrivate(i,e,[n,t]),n},maintainPrivateHooks(i,e,t,n){i.hasAttribute&&i.hasAttribute("data-phx-hook")&&!e.hasAttribute("data-phx-hook")&&e.setAttribute("data-phx-hook",i.getAttribute("data-phx-hook")),e.hasAttribute&&(e.hasAttribute(t)||e.hasAttribute(n))&&e.setAttribute("data-phx-hook","Phoenix.InfiniteScroll")},putCustomElHook(i,e){i.isConnected?i.setAttribute("data-phx-hook",""):console.error(`
        hook attached to non-connected DOM element
        ensure you are calling createHook within your connectedCallback. ${i.outerHTML}
      `),this.putPrivate(i,"custom-el-hook",e)},getCustomElHook(i){return this.private(i,"custom-el-hook")},isUsedInput(i){return i.nodeType===Node.ELEMENT_NODE&&(this.private(i,Ls)||this.private(i,Rr))},resetForm(i){Array.from(i.elements).forEach(e=>{this.deletePrivate(e,Ls),this.deletePrivate(e,Rr)})},isPhxChild(i){return i.getAttribute&&i.getAttribute(An)},isPhxSticky(i){return i.getAttribute&&i.getAttribute(Ku)!==null},isChildOfAny(i,e){return!!e.find(t=>t.contains(i))},firstPhxChild(i){return this.isPhxChild(i)?i:this.all(i,`[${An}]`)[0]},dispatchEvent(i,e,t={}){let n=!0;i.nodeName==="INPUT"&&i.type==="file"&&e==="click"&&(n=!1);let a={bubbles:t.bubbles===void 0?n:!!t.bubbles,cancelable:!0,detail:t.detail||{}},u=e==="click"?new MouseEvent("click",a):new CustomEvent(e,a);i.dispatchEvent(u)},cloneNode(i,e){if(typeof e>"u")return i.cloneNode(!0);{let t=i.cloneNode(!1);return t.innerHTML=e,t}},mergeAttrs(i,e,t={}){let n=new Set(t.exclude||[]),r=t.isIgnored,s=e.attributes;for(let u=s.length-1;u>=0;u--){let c=s[u].name;if(n.has(c))c==="value"&&i.value===e.value&&i.setAttribute("value",e.getAttribute(c));else{let v=e.getAttribute(c);i.getAttribute(c)!==v&&(!r||r&&c.startsWith("data-"))&&i.setAttribute(c,v)}}let a=i.attributes;for(let u=a.length-1;u>=0;u--){let c=a[u].name;r?c.startsWith("data-")&&!e.hasAttribute(c)&&!el.includes(c)&&i.removeAttribute(c):e.hasAttribute(c)||i.removeAttribute(c)}},mergeFocusedInput(i,e){i instanceof HTMLSelectElement||_n.mergeAttrs(i,e,{exclude:["value"]}),e.readOnly?i.setAttribute("readonly",!0):i.removeAttribute("readonly")},hasSelectionRange(i){return i.setSelectionRange&&(i.type==="text"||i.type==="textarea")},restoreFocus(i,e,t){if(i instanceof HTMLSelectElement&&i.focus(),!_n.isTextualInput(i))return;i.matches(":focus")||i.focus(),this.hasSelectionRange(i)&&i.setSelectionRange(e,t)},isFormInput(i){return/^(?:input|select|textarea)$/i.test(i.tagName)&&i.type!=="button"},syncAttrsToProps(i){i instanceof HTMLInputElement&&Al.indexOf(i.type.toLocaleLowerCase())>=0&&(i.checked=i.getAttribute("checked")!==null)},isTextualInput(i){return eh.indexOf(i.type)>=0},isNowTriggerFormExternal(i,e){return i.getAttribute&&i.getAttribute(e)!==null&&document.body.contains(i)},cleanChildNodes(i,e){if(_n.isPhxUpdate(i,e,["append","prepend"])){let t=[];i.childNodes.forEach(n=>{n.id||(!(n.nodeType===Node.TEXT_NODE&&n.nodeValue.trim()==="")&&n.nodeType!==Node.COMMENT_NODE&&Lt(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(n.outerHTML||n.nodeValue).trim()}"

`),t.push(n))}),t.forEach(n=>n.remove())}},replaceRootContainer(i,e,t){let n=new Set(["id",_i,kn,io,en]);if(i.tagName.toLowerCase()===e.toLowerCase())return Array.from(i.attributes).filter(r=>!n.has(r.name.toLowerCase())).forEach(r=>i.removeAttribute(r.name)),Object.keys(t).filter(r=>!n.has(r.toLowerCase())).forEach(r=>i.setAttribute(r,t[r])),i;{let r=document.createElement(e);return Object.keys(t).forEach(s=>r.setAttribute(s,t[s])),n.forEach(s=>r.setAttribute(s,i.getAttribute(s))),r.innerHTML=i.innerHTML,i.replaceWith(r),r}},getSticky(i,e,t){let n=(_n.private(i,"sticky")||[]).find(([r])=>e===r);if(n){let[r,s,a]=n;return a}else return typeof t=="function"?t():t},deleteSticky(i,e){this.updatePrivate(i,"sticky",[],t=>t.filter(([n,r])=>n!==e))},putSticky(i,e,t){let n=t(i);this.updatePrivate(i,"sticky",[],r=>{let s=r.findIndex(([a])=>e===a);return s>=0?r[s]=[e,t,n]:r.push([e,t,n]),r})},applyStickyOperations(i){let e=_n.private(i,"sticky");e&&e.forEach(([t,n,r])=>this.putSticky(i,t,n))},isLocked(i){return i.hasAttribute&&i.hasAttribute(tt)}},H=_n,Dr=class{static isActive(i,e){let t=e._phxRef===void 0,r=i.getAttribute(Xa).split(",").indexOf(it.genFileRef(e))>=0;return e.size>0&&(t||r)}static isPreflighted(i,e){return i.getAttribute(to).split(",").indexOf(it.genFileRef(e))>=0&&this.isActive(i,e)}static isPreflightInProgress(i){return i._preflightInProgress===!0}static markPreflightInProgress(i){i._preflightInProgress=!0}constructor(i,e,t,n){this.ref=it.genFileRef(e),this.fileEl=i,this.file=e,this.view=t,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._lastProgressSent=-1,this._onDone=function(){},this._onElUpdated=this.onElUpdated.bind(this),this.fileEl.addEventListener(Ts,this._onElUpdated),this.autoUpload=n}metadata(){return this.meta}progress(i){this._progress=Math.floor(i),this._progress>this._lastProgressSent&&(this._progress>=100?(this._progress=100,this._lastProgressSent=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,()=>{it.untrackFile(this.fileEl,this.file),this._onDone()})):(this._lastProgressSent=this._progress,this.view.pushFileProgress(this.fileEl,this.ref,this._progress)))}isCancelled(){return this._isCancelled}cancel(){this.file._preflightInProgress=!1,this._isCancelled=!0,this._isDone=!0,this._onDone()}isDone(){return this._isDone}error(i="failed"){this.fileEl.removeEventListener(Ts,this._onElUpdated),this.view.pushFileProgress(this.fileEl,this.ref,{error:i}),this.isAutoUpload()||it.clearFiles(this.fileEl)}isAutoUpload(){return this.autoUpload}onDone(i){this._onDone=()=>{this.fileEl.removeEventListener(Ts,this._onElUpdated),i()}}onElUpdated(){this.fileEl.getAttribute(Xa).split(",").indexOf(this.ref)===-1&&(it.untrackFile(this.fileEl,this.file),this.cancel())}toPreflightPayload(){return{last_modified:this.file.lastModified,name:this.file.name,relative_path:this.file.webkitRelativePath,size:this.file.size,type:this.file.type,ref:this.ref,meta:typeof this.file.meta=="function"?this.file.meta():void 0}}uploader(i){if(this.meta.uploader){let e=i[this.meta.uploader]||Lt(`no uploader configured for ${this.meta.uploader}`);return{name:this.meta.uploader,callback:e}}else return{name:"channel",callback:mh}}zipPostFlight(i){this.meta=i.entries[this.ref],this.meta||Lt(`no preflight upload response returned with ref ${this.ref}`,{input:this.fileEl,response:i})}},bh=0,it=class eo{static genFileRef(e){let t=e._phxRef;return t!==void 0?t:(e._phxRef=(bh++).toString(),e._phxRef)}static getEntryDataURL(e,t,n){let r=this.activeFiles(e).find(s=>this.genFileRef(s)===t);n(URL.createObjectURL(r))}static hasUploadsInProgress(e){let t=0;return H.findUploadInputs(e).forEach(n=>{n.getAttribute(to)!==n.getAttribute(Zc)&&t++}),t>0}static serializeUploads(e){let t=this.activeFiles(e),n={};return t.forEach(r=>{let s={path:e.name},a=e.getAttribute(Pi);n[a]=n[a]||[],s.ref=this.genFileRef(r),s.last_modified=r.lastModified,s.name=r.name||s.ref,s.relative_path=r.webkitRelativePath,s.type=r.type,s.size=r.size,typeof r.meta=="function"&&(s.meta=r.meta()),n[a].push(s)}),n}static clearFiles(e){e.value=null,e.removeAttribute(Pi),H.putPrivate(e,"files",[])}static untrackFile(e,t){H.putPrivate(e,"files",H.private(e,"files").filter(n=>!Object.is(n,t)))}static trackFiles(e,t,n){if(e.getAttribute("multiple")!==null){let r=t.filter(s=>!this.activeFiles(e).find(a=>Object.is(a,s)));H.updatePrivate(e,"files",[],s=>s.concat(r)),e.value=null}else n&&n.files.length>0&&(e.files=n.files),H.putPrivate(e,"files",t)}static activeFileInputs(e){let t=H.findUploadInputs(e);return Array.from(t).filter(n=>n.files&&this.activeFiles(n).length>0)}static activeFiles(e){return(H.private(e,"files")||[]).filter(t=>Dr.isActive(e,t))}static inputsAwaitingPreflight(e){let t=H.findUploadInputs(e);return Array.from(t).filter(n=>this.filesAwaitingPreflight(n).length>0)}static filesAwaitingPreflight(e){return this.activeFiles(e).filter(t=>!Dr.isPreflighted(e,t)&&!Dr.isPreflightInProgress(t))}static markPreflightInProgress(e){e.forEach(t=>Dr.markPreflightInProgress(t.file))}constructor(e,t,n){this.autoUpload=H.isAutoUpload(e),this.view=t,this.onComplete=n,this._entries=Array.from(eo.filesAwaitingPreflight(e)||[]).map(r=>new Dr(e,r,t,this.autoUpload)),eo.markPreflightInProgress(this._entries),this.numEntriesInProgress=this._entries.length}isAutoUpload(){return this.autoUpload}entries(){return this._entries}initAdapterUpload(e,t,n){this._entries=this._entries.map(s=>(s.isCancelled()?(this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()):(s.zipPostFlight(e),s.onDone(()=>{this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()})),s));let r=this._entries.reduce((s,a)=>{if(!a.meta)return s;let{name:u,callback:c}=a.uploader(n.uploaders);return s[u]=s[u]||{callback:c,entries:[]},s[u].entries.push(a),s},{});for(let s in r){let{callback:a,entries:u}=r[s];a(u,t,e,n)}}},yh={anyOf(i,e){return e.find(t=>i instanceof t)},isFocusable(i,e){return i instanceof HTMLAnchorElement&&i.rel!=="ignore"||i instanceof HTMLAreaElement&&i.href!==void 0||!i.disabled&&this.anyOf(i,[HTMLInputElement,HTMLSelectElement,HTMLTextAreaElement,HTMLButtonElement])||i instanceof HTMLIFrameElement||i.tabIndex>0||!e&&i.getAttribute("tabindex")!==null&&i.getAttribute("aria-hidden")!=="true"},attemptFocus(i,e){if(this.isFocusable(i,e))try{i.focus()}catch{}return!!document.activeElement&&document.activeElement.isSameNode(i)},focusFirstInteractive(i){let e=i.firstElementChild;for(;e;){if(this.attemptFocus(e,!0)||this.focusFirstInteractive(e,!0))return!0;e=e.nextElementSibling}},focusFirst(i){let e=i.firstElementChild;for(;e;){if(this.attemptFocus(e)||this.focusFirst(e))return!0;e=e.nextElementSibling}},focusLast(i){let e=i.lastElementChild;for(;e;){if(this.attemptFocus(e)||this.focusLast(e))return!0;e=e.previousElementSibling}}},wi=yh,El={LiveFileUpload:{activeRefs(){return this.el.getAttribute(Xa)},preflightedRefs(){return this.el.getAttribute(to)},mounted(){this.preflightedWas=this.preflightedRefs()},updated(){let i=this.preflightedRefs();this.preflightedWas!==i&&(this.preflightedWas=i,i===""&&this.__view().cancelSubmit(this.el.form)),this.activeRefs()===""&&(this.el.value=null),this.el.dispatchEvent(new CustomEvent(Ts))}},LiveImgPreview:{mounted(){this.ref=this.el.getAttribute("data-phx-entry-ref"),this.inputEl=document.getElementById(this.el.getAttribute(Pi)),it.getEntryDataURL(this.inputEl,this.ref,i=>{this.url=i,this.el.src=i})},destroyed(){URL.revokeObjectURL(this.url)}},FocusWrap:{mounted(){this.focusStart=this.el.firstElementChild,this.focusEnd=this.el.lastElementChild,this.focusStart.addEventListener("focus",i=>{if(!i.relatedTarget||!this.el.contains(i.relatedTarget)){let e=i.target.nextElementSibling;wi.attemptFocus(e)||wi.focusFirst(e)}else wi.focusLast(this.el)}),this.focusEnd.addEventListener("focus",i=>{if(!i.relatedTarget||!this.el.contains(i.relatedTarget)){let e=i.target.previousElementSibling;wi.attemptFocus(e)||wi.focusLast(e)}else wi.focusFirst(this.el)}),this.el.addEventListener("phx:show-end",()=>this.el.focus()),window.getComputedStyle(this.el).display!=="none"&&wi.focusFirst(this.el)}}},Cl=i=>["HTML","BODY"].indexOf(i.nodeName.toUpperCase())>=0?null:["scroll","auto"].indexOf(getComputedStyle(i).overflowY)>=0?i:Cl(i.parentElement),al=i=>i?i.scrollTop:document.documentElement.scrollTop||document.body.scrollTop,no=i=>i?i.getBoundingClientRect().bottom:window.innerHeight||document.documentElement.clientHeight,ro=i=>i?i.getBoundingClientRect().top:0,wh=(i,e)=>{let t=i.getBoundingClientRect();return Math.ceil(t.top)>=ro(e)&&Math.ceil(t.left)>=0&&Math.floor(t.top)<=no(e)},_h=(i,e)=>{let t=i.getBoundingClientRect();return Math.ceil(t.bottom)>=ro(e)&&Math.ceil(t.left)>=0&&Math.floor(t.bottom)<=no(e)},ol=(i,e)=>{let t=i.getBoundingClientRect();return Math.ceil(t.top)>=ro(e)&&Math.ceil(t.left)>=0&&Math.floor(t.top)<=no(e)};El.InfiniteScroll={mounted(){this.scrollContainer=Cl(this.el);let i=al(this.scrollContainer),e=!1,t=500,n=null,r=this.throttle(t,(u,c)=>{n=()=>!0,this.liveSocket.execJSHookPush(this.el,u,{id:c.id,_overran:!0},()=>{n=null})}),s=this.throttle(t,(u,c)=>{n=()=>c.scrollIntoView({block:"start"}),this.liveSocket.execJSHookPush(this.el,u,{id:c.id},()=>{n=null,window.requestAnimationFrame(()=>{ol(c,this.scrollContainer)||c.scrollIntoView({block:"start"})})})}),a=this.throttle(t,(u,c)=>{n=()=>c.scrollIntoView({block:"end"}),this.liveSocket.execJSHookPush(this.el,u,{id:c.id},()=>{n=null,window.requestAnimationFrame(()=>{ol(c,this.scrollContainer)||c.scrollIntoView({block:"end"})})})});this.onScroll=u=>{let c=al(this.scrollContainer);if(n)return i=c,n();let v=this.el.getBoundingClientRect(),k=this.el.getAttribute(this.liveSocket.binding("viewport-top")),A=this.el.getAttribute(this.liveSocket.binding("viewport-bottom")),N=this.el.lastElementChild,y=this.el.firstElementChild,d=c<i,g=c>i;d&&k&&!e&&v.top>=0?(e=!0,r(k,y)):g&&e&&v.top<=0&&(e=!1),k&&d&&wh(y,this.scrollContainer)?s(k,y):A&&g&&_h(N,this.scrollContainer)&&a(A,N),i=c},this.scrollContainer?this.scrollContainer.addEventListener("scroll",this.onScroll):window.addEventListener("scroll",this.onScroll)},destroyed(){this.scrollContainer?this.scrollContainer.removeEventListener("scroll",this.onScroll):window.removeEventListener("scroll",this.onScroll)},throttle(i,e){let t=0,n;return(...r)=>{let s=Date.now(),a=i-(s-t);a<=0||a>i?(n&&(clearTimeout(n),n=null),t=s,e(...r)):n||(n=setTimeout(()=>{t=Date.now(),n=null,e(...r)},a))}}};var kh=El,ul=class{static onUnlock(i,e){if(!H.isLocked(i)&&!i.closest(`[${tt}]`))return e();let t=i.closest(`[${tt}]`),n=t.closest(`[${tt}]`).getAttribute(tt);t.addEventListener(`phx:undo-lock:${n}`,()=>{e()},{once:!0})}constructor(i){this.el=i,this.loadingRef=i.hasAttribute(Qn)?parseInt(i.getAttribute(Qn),10):null,this.lockRef=i.hasAttribute(tt)?parseInt(i.getAttribute(tt),10):null}maybeUndo(i,e,t){this.isWithin(i)&&(this.undoLocks(i,e,t),this.undoLoading(i,e),this.isFullyResolvedBy(i)&&this.el.removeAttribute(Gt))}isWithin(i){return!(this.loadingRef!==null&&this.loadingRef>i&&this.lockRef!==null&&this.lockRef>i)}undoLocks(i,e,t){if(!this.isLockUndoneBy(i))return;let n=H.private(this.el,tt);n&&(t(n),H.deletePrivate(this.el,tt)),this.el.removeAttribute(tt);let r={detail:{ref:i,event:e},bubbles:!0,cancelable:!1};this.el.dispatchEvent(new CustomEvent(`phx:undo-lock:${this.lockRef}`,r))}undoLoading(i,e){if(!this.isLoadingUndoneBy(i)){this.canUndoLoading(i)&&this.el.classList.contains("phx-submit-loading")&&this.el.classList.remove("phx-change-loading");return}if(this.canUndoLoading(i)){this.el.removeAttribute(Qn);let t=this.el.getAttribute(Zn),n=this.el.getAttribute(Qa);n!==null&&(this.el.readOnly=n==="true",this.el.removeAttribute(Qa)),t!==null&&(this.el.disabled=t==="true",this.el.removeAttribute(Zn));let r=this.el.getAttribute(Rs);r!==null&&(this.el.innerText=r,this.el.removeAttribute(Rs));let s={detail:{ref:i,event:e},bubbles:!0,cancelable:!1};this.el.dispatchEvent(new CustomEvent(`phx:undo-loading:${this.loadingRef}`,s))}yl.forEach(t=>{(t!=="phx-submit-loading"||this.canUndoLoading(i))&&H.removeClass(this.el,t)})}isLoadingUndoneBy(i){return this.loadingRef===null?!1:this.loadingRef<=i}isLockUndoneBy(i){return this.lockRef===null?!1:this.lockRef<=i}isFullyResolvedBy(i){return(this.loadingRef===null||this.loadingRef<=i)&&(this.lockRef===null||this.lockRef<=i)}canUndoLoading(i){return this.lockRef===null||this.lockRef<=i}},Ah=class{constructor(i,e,t){let n=new Set,r=new Set([...e.children].map(a=>a.id)),s=[];Array.from(i.children).forEach(a=>{if(a.id&&(n.add(a.id),r.has(a.id))){let u=a.previousElementSibling&&a.previousElementSibling.id;s.push({elementId:a.id,previousElementId:u})}}),this.containerId=e.id,this.updateType=t,this.elementsToModify=s,this.elementIdsToAdd=[...r].filter(a=>!n.has(a))}perform(){let i=H.byId(this.containerId);this.elementsToModify.forEach(e=>{e.previousElementId?Qi(document.getElementById(e.previousElementId),t=>{Qi(document.getElementById(e.elementId),n=>{n.previousElementSibling&&n.previousElementSibling.id==t.id||t.insertAdjacentElement("afterend",n)})}):Qi(document.getElementById(e.elementId),t=>{t.previousElementSibling==null||i.insertAdjacentElement("afterbegin",t)})}),this.updateType=="prepend"&&this.elementIdsToAdd.reverse().forEach(e=>{Qi(document.getElementById(e),t=>i.insertAdjacentElement("afterbegin",t))})}},ll=11;function Eh(i,e){var t=e.attributes,n,r,s,a,u;if(!(e.nodeType===ll||i.nodeType===ll)){for(var c=t.length-1;c>=0;c--)n=t[c],r=n.name,s=n.namespaceURI,a=n.value,s?(r=n.localName||r,u=i.getAttributeNS(s,r),u!==a&&(n.prefix==="xmlns"&&(r=n.name),i.setAttributeNS(s,r,a))):(u=i.getAttribute(r),u!==a&&i.setAttribute(r,a));for(var v=i.attributes,k=v.length-1;k>=0;k--)n=v[k],r=n.name,s=n.namespaceURI,s?(r=n.localName||r,e.hasAttributeNS(s,r)||i.removeAttributeNS(s,r)):e.hasAttribute(r)||i.removeAttribute(r)}}var Es,Ch="http://www.w3.org/1999/xhtml",Rt=typeof document>"u"?void 0:document,Sh=!!Rt&&"content"in Rt.createElement("template"),Dh=!!Rt&&Rt.createRange&&"createContextualFragment"in Rt.createRange();function Th(i){var e=Rt.createElement("template");return e.innerHTML=i,e.content.childNodes[0]}function xh(i){Es||(Es=Rt.createRange(),Es.selectNode(Rt.body));var e=Es.createContextualFragment(i);return e.childNodes[0]}function Lh(i){var e=Rt.createElement("body");return e.innerHTML=i,e.childNodes[0]}function Rh(i){return i=i.trim(),Sh?Th(i):Dh?xh(i):Lh(i)}function Cs(i,e){var t=i.nodeName,n=e.nodeName,r,s;return t===n?!0:(r=t.charCodeAt(0),s=n.charCodeAt(0),r<=90&&s>=97?t===n.toUpperCase():s<=90&&r>=97?n===t.toUpperCase():!1)}function Ph(i,e){return!e||e===Ch?Rt.createElement(i):Rt.createElementNS(e,i)}function Ih(i,e){for(var t=i.firstChild;t;){var n=t.nextSibling;e.appendChild(t),t=n}return e}function Ja(i,e,t){i[t]!==e[t]&&(i[t]=e[t],i[t]?i.setAttribute(t,""):i.removeAttribute(t))}var dl={OPTION:function(i,e){var t=i.parentNode;if(t){var n=t.nodeName.toUpperCase();n==="OPTGROUP"&&(t=t.parentNode,n=t&&t.nodeName.toUpperCase()),n==="SELECT"&&!t.hasAttribute("multiple")&&(i.hasAttribute("selected")&&!e.selected&&(i.setAttribute("selected","selected"),i.removeAttribute("selected")),t.selectedIndex=-1)}Ja(i,e,"selected")},INPUT:function(i,e){Ja(i,e,"checked"),Ja(i,e,"disabled"),i.value!==e.value&&(i.value=e.value),e.hasAttribute("value")||i.removeAttribute("value")},TEXTAREA:function(i,e){var t=e.value;i.value!==t&&(i.value=t);var n=i.firstChild;if(n){var r=n.nodeValue;if(r==t||!t&&r==i.placeholder)return;n.nodeValue=t}},SELECT:function(i,e){if(!e.hasAttribute("multiple")){for(var t=-1,n=0,r=i.firstChild,s,a;r;)if(a=r.nodeName&&r.nodeName.toUpperCase(),a==="OPTGROUP")s=r,r=s.firstChild;else{if(a==="OPTION"){if(r.hasAttribute("selected")){t=n;break}n++}r=r.nextSibling,!r&&s&&(r=s.nextSibling,s=null)}i.selectedIndex=t}}},Tr=1,cl=11,hl=3,fl=8;function Zi(){}function Oh(i){if(i)return i.getAttribute&&i.getAttribute("id")||i.id}function Mh(i){return function(t,n,r){if(r||(r={}),typeof n=="string")if(t.nodeName==="#document"||t.nodeName==="HTML"||t.nodeName==="BODY"){var s=n;n=Rt.createElement("html"),n.innerHTML=s}else n=Rh(n);else n.nodeType===cl&&(n=n.firstElementChild);var a=r.getNodeKey||Oh,u=r.onBeforeNodeAdded||Zi,c=r.onNodeAdded||Zi,v=r.onBeforeElUpdated||Zi,k=r.onElUpdated||Zi,A=r.onBeforeNodeDiscarded||Zi,N=r.onNodeDiscarded||Zi,y=r.onBeforeElChildrenUpdated||Zi,d=r.skipFromChildren||Zi,g=r.addChild||function(z,$){return z.appendChild($)},b=r.childrenOnly===!0,E=Object.create(null),P=[];function o(z){P.push(z)}function h(z,$){if(z.nodeType===Tr)for(var ee=z.firstChild;ee;){var X=void 0;$&&(X=a(ee))?o(X):(N(ee),ee.firstChild&&h(ee,$)),ee=ee.nextSibling}}function f(z,$,ee){A(z)!==!1&&($&&$.removeChild(z),N(z),h(z,ee))}function _(z){if(z.nodeType===Tr||z.nodeType===cl)for(var $=z.firstChild;$;){var ee=a($);ee&&(E[ee]=$),_($),$=$.nextSibling}}_(t);function C(z){c(z);for(var $=z.firstChild;$;){var ee=$.nextSibling,X=a($);if(X){var ie=E[X];ie&&Cs($,ie)?($.parentNode.replaceChild(ie,$),L(ie,$)):C($)}else C($);$=ee}}function I(z,$,ee){for(;$;){var X=$.nextSibling;(ee=a($))?o(ee):f($,z,!0),$=X}}function L(z,$,ee){var X=a($);if(X&&delete E[X],!ee){var ie=v(z,$);if(ie===!1||(ie instanceof HTMLElement&&(z=ie,_(z)),i(z,$),k(z),y(z,$)===!1))return}z.nodeName!=="TEXTAREA"?F(z,$):dl.TEXTAREA(z,$)}function F(z,$){var ee=d(z,$),X=$.firstChild,ie=z.firstChild,ae,me,re,ye,ne;e:for(;X;){for(ye=X.nextSibling,ae=a(X);!ee&&ie;){if(re=ie.nextSibling,X.isSameNode&&X.isSameNode(ie)){X=ye,ie=re;continue e}me=a(ie);var xe=ie.nodeType,je=void 0;if(xe===X.nodeType&&(xe===Tr?(ae?ae!==me&&((ne=E[ae])?re===ne?je=!1:(z.insertBefore(ne,ie),me?o(me):f(ie,z,!0),ie=ne,me=a(ie)):je=!1):me&&(je=!1),je=je!==!1&&Cs(ie,X),je&&L(ie,X)):(xe===hl||xe==fl)&&(je=!0,ie.nodeValue!==X.nodeValue&&(ie.nodeValue=X.nodeValue))),je){X=ye,ie=re;continue e}me?o(me):f(ie,z,!0),ie=re}if(ae&&(ne=E[ae])&&Cs(ne,X))ee||g(z,ne),L(ne,X);else{var He=u(X);He!==!1&&(He&&(X=He),X.actualize&&(X=X.actualize(z.ownerDocument||Rt)),g(z,X),C(X))}X=ye,ie=re}I(z,ie,me);var st=dl[z.nodeName];st&&st(z,$)}var K=t,W=K.nodeType,q=n.nodeType;if(!b){if(W===Tr)q===Tr?Cs(t,n)||(N(t),K=Ih(t,Ph(n.nodeName,n.namespaceURI))):K=n;else if(W===hl||W===fl){if(q===W)return K.nodeValue!==n.nodeValue&&(K.nodeValue=n.nodeValue),K;K=n}}if(K===n)N(t);else{if(n.isSameNode&&n.isSameNode(K))return;if(L(K,n,b),P)for(var G=0,x=P.length;G<x;G++){var U=E[P[G]];U&&f(U,U.parentNode,!1)}}return!b&&K!==t&&t.parentNode&&(K.actualize&&(K=K.actualize(t.ownerDocument||Rt)),t.parentNode.replaceChild(K,t)),K}}var Nh=Mh(Eh),Bh=Nh,Ss=class{constructor(i,e,t,n,r,s,a={}){this.view=i,this.liveSocket=i.liveSocket,this.container=e,this.id=t,this.rootID=i.root.id,this.html=n,this.streams=r,this.streamInserts={},this.streamComponentRestore={},this.targetCID=s,this.cidPatch=Li(this.targetCID),this.pendingRemoves=[],this.phxRemove=this.liveSocket.binding("remove"),this.targetContainer=this.isCIDPatch()?this.targetCIDContainer(n):e,this.callbacks={beforeadded:[],beforeupdated:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[],aftertransitionsDiscarded:[]},this.withChildren=a.withChildren||a.undoRef||!1,this.undoRef=a.undoRef}before(i,e){this.callbacks[`before${i}`].push(e)}after(i,e){this.callbacks[`after${i}`].push(e)}trackBefore(i,...e){this.callbacks[`before${i}`].forEach(t=>t(...e))}trackAfter(i,...e){this.callbacks[`after${i}`].forEach(t=>t(...e))}markPrunableContentForRemoval(){let i=this.liveSocket.binding(Ps);H.all(this.container,`[${i}=append] > *, [${i}=prepend] > *`,e=>{e.setAttribute(Wu,"")})}perform(i){let{view:e,liveSocket:t,html:n,container:r,targetContainer:s}=this;if(this.isCIDPatch()&&!s)return;let a=t.getActiveElement(),{selectionStart:u,selectionEnd:c}=a&&H.hasSelectionRange(a)?a:{},v=t.binding(Ps),k=t.binding(Ya),A=t.binding(Za),N=t.binding(Qc),y=[],d=[],g=[],b=null;function E(P,o,h=this.withChildren){let f={childrenOnly:P.getAttribute(Ri)===null&&!h,getNodeKey:_=>H.isPhxDestroyed(_)?null:i?_.id:_.id||_.getAttribute&&_.getAttribute(kl),skipFromChildren:_=>_.getAttribute(v)===Wa,addChild:(_,C)=>{let{ref:I,streamAt:L}=this.getStreamInsert(C);if(I===void 0)return _.appendChild(C);if(this.setStreamRef(C,I),L===0)_.insertAdjacentElement("afterbegin",C);else if(L===-1){let F=_.lastElementChild;if(F&&!F.hasAttribute(Ar)){let K=Array.from(_.children).find(W=>!W.hasAttribute(Ar));_.insertBefore(C,K)}else _.appendChild(C)}else if(L>0){let F=Array.from(_.children)[L];_.insertBefore(C,F)}},onBeforeNodeAdded:_=>{H.maintainPrivateHooks(_,_,k,A),this.trackBefore("added",_);let C=_;return this.streamComponentRestore[_.id]&&(C=this.streamComponentRestore[_.id],delete this.streamComponentRestore[_.id],E.call(this,C,_,!0)),C},onNodeAdded:_=>{_.getAttribute&&this.maybeReOrderStream(_,!0),_ instanceof HTMLImageElement&&_.srcset?_.srcset=_.srcset:_ instanceof HTMLVideoElement&&_.autoplay&&_.play(),H.isNowTriggerFormExternal(_,N)&&(b=_),(H.isPhxChild(_)&&e.ownsElement(_)||H.isPhxSticky(_)&&e.ownsElement(_.parentNode))&&this.trackAfter("phxChildAdded",_),y.push(_)},onNodeDiscarded:_=>this.onNodeDiscarded(_),onBeforeNodeDiscarded:_=>_.getAttribute&&_.getAttribute(Wu)!==null?!0:!(_.parentElement!==null&&_.id&&H.isPhxUpdate(_.parentElement,v,[Wa,"append","prepend"])||this.maybePendingRemove(_)||this.skipCIDSibling(_)),onElUpdated:_=>{H.isNowTriggerFormExternal(_,N)&&(b=_),d.push(_),this.maybeReOrderStream(_,!1)},onBeforeElUpdated:(_,C)=>{if(_.id&&_.isSameNode(P)&&_.id!==C.id)return f.onNodeDiscarded(_),_.replaceWith(C),f.onNodeAdded(C);if(H.syncPendingAttrs(_,C),H.maintainPrivateHooks(_,C,k,A),H.cleanChildNodes(C,v),this.skipCIDSibling(C))return this.maybeReOrderStream(_),!1;if(H.isPhxSticky(_))return[_i,kn,en].map(F=>[F,_.getAttribute(F),C.getAttribute(F)]).forEach(([F,K,W])=>{W&&K!==W&&_.setAttribute(F,W)}),!1;if(H.isIgnored(_,v)||_.form&&_.form.isSameNode(b))return this.trackBefore("updated",_,C),H.mergeAttrs(_,C,{isIgnored:H.isIgnored(_,v)}),d.push(_),H.applyStickyOperations(_),!1;if(_.type==="number"&&_.validity&&_.validity.badInput)return!1;let I=a&&_.isSameNode(a)&&H.isFormInput(_),L=I&&this.isChangedSelect(_,C);if(_.hasAttribute(Gt)&&_.getAttribute(tt)!=this.undoRef){H.isUploadInput(_)&&(H.mergeAttrs(_,C,{isIgnored:!0}),this.trackBefore("updated",_,C),d.push(_)),H.applyStickyOperations(_);let K=_.hasAttribute(tt)?H.private(_,tt)||_.cloneNode(!0):null;K&&(H.putPrivate(_,tt,K),I||(_=K))}if(H.isPhxChild(C)){let F=_.getAttribute(_i);return H.mergeAttrs(_,C,{exclude:[kn]}),F!==""&&_.setAttribute(_i,F),_.setAttribute(en,this.rootID),H.applyStickyOperations(_),!1}return H.copyPrivates(C,_),I&&_.type!=="hidden"&&!L?(this.trackBefore("updated",_,C),H.mergeFocusedInput(_,C),H.syncAttrsToProps(_),d.push(_),H.applyStickyOperations(_),!1):(L&&_.blur(),H.isPhxUpdate(C,v,["append","prepend"])&&g.push(new Ah(_,C,C.getAttribute(v))),H.syncAttrsToProps(C),H.applyStickyOperations(C),this.trackBefore("updated",_,C),_)}};Bh(P,o,f)}return this.trackBefore("added",r),this.trackBefore("updated",r,r),t.time("morphdom",()=>{this.streams.forEach(([P,o,h,f])=>{o.forEach(([_,C,I])=>{this.streamInserts[_]={ref:P,streamAt:C,limit:I,reset:f}}),f!==void 0&&H.all(r,`[${Ar}="${P}"]`,_=>{this.removeStreamChildElement(_)}),h.forEach(_=>{let C=r.querySelector(`[id="${_}"]`);C&&this.removeStreamChildElement(C)})}),i&&H.all(this.container,`[${v}=${Wa}]`,P=>{this.liveSocket.owner(P,o=>{o===this.view&&Array.from(P.children).forEach(h=>{this.removeStreamChildElement(h)})})}),E.call(this,s,n)}),t.isDebugEnabled()&&(hh(),fh(this.streamInserts),Array.from(document.querySelectorAll("input[name=id]")).forEach(P=>{P.form&&console.error(`Detected an input with name="id" inside a form! This will cause problems when patching the DOM.
`,P)})),g.length>0&&t.time("post-morph append/prepend restoration",()=>{g.forEach(P=>P.perform())}),t.silenceEvents(()=>H.restoreFocus(a,u,c)),H.dispatchEvent(document,"phx:update"),y.forEach(P=>this.trackAfter("added",P)),d.forEach(P=>this.trackAfter("updated",P)),this.transitionPendingRemoves(),b&&(t.unload(),Object.getPrototypeOf(b).submit.call(b)),!0}onNodeDiscarded(i){(H.isPhxChild(i)||H.isPhxSticky(i))&&this.liveSocket.destroyViewByEl(i),this.trackAfter("discarded",i)}maybePendingRemove(i){return i.getAttribute&&i.getAttribute(this.phxRemove)!==null?(this.pendingRemoves.push(i),!0):!1}removeStreamChildElement(i){this.streamInserts[i.id]?(this.streamComponentRestore[i.id]=i,i.remove()):this.maybePendingRemove(i)||(i.remove(),this.onNodeDiscarded(i))}getStreamInsert(i){return(i.id?this.streamInserts[i.id]:{})||{}}setStreamRef(i,e){H.putSticky(i,Ar,t=>t.setAttribute(Ar,e))}maybeReOrderStream(i,e){let{ref:t,streamAt:n,reset:r}=this.getStreamInsert(i);if(n!==void 0&&(this.setStreamRef(i,t),!(!r&&!e)&&i.parentElement)){if(n===0)i.parentElement.insertBefore(i,i.parentElement.firstElementChild);else if(n>0){let s=Array.from(i.parentElement.children),a=s.indexOf(i);if(n>=s.length-1)i.parentElement.appendChild(i);else{let u=s[n];a>n?i.parentElement.insertBefore(i,u):i.parentElement.insertBefore(i,u.nextElementSibling)}}this.maybeLimitStream(i)}}maybeLimitStream(i){let{limit:e}=this.getStreamInsert(i),t=e!==null&&Array.from(i.parentElement.children);e&&e<0&&t.length>e*-1?t.slice(0,t.length+e).forEach(n=>this.removeStreamChildElement(n)):e&&e>=0&&t.length>e&&t.slice(e).forEach(n=>this.removeStreamChildElement(n))}transitionPendingRemoves(){let{pendingRemoves:i,liveSocket:e}=this;i.length>0&&e.transitionRemoves(i,!1,()=>{i.forEach(t=>{let n=H.firstPhxChild(t);n&&e.destroyViewByEl(n),t.remove()}),this.trackAfter("transitionsDiscarded",i)})}isChangedSelect(i,e){return!(i instanceof HTMLSelectElement)||i.multiple?!1:i.options.length!==e.options.length?!0:(e.value=i.value,!i.isEqualNode(e))}isCIDPatch(){return this.cidPatch}skipCIDSibling(i){return i.nodeType===Node.ELEMENT_NODE&&i.hasAttribute(_l)}targetCIDContainer(i){if(!this.isCIDPatch())return;let[e,...t]=H.findComponentNodeList(this.container,this.targetCID);return t.length===0&&H.childNodeLength(i)===1?e:e&&e.parentNode}indexOf(i,e){return Array.from(i.children).indexOf(e)}},Fh=new Set(["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"]),jh=new Set(["'",'"']),pl=(i,e,t)=>{let n=0,r=!1,s,a,u,c,v,k,A=i.match(/^(\s*(?:<!--.*?-->\s*)*)<([^\s\/>]+)/);if(A===null)throw new Error(`malformed html ${i}`);for(n=A[0].length,s=A[1],u=A[2],c=n,n;n<i.length&&i.charAt(n)!==">";n++)if(i.charAt(n)==="="){let d=i.slice(n-3,n)===" id";n++;let g=i.charAt(n);if(jh.has(g)){let b=n;for(n++,n;n<i.length&&i.charAt(n)!==g;n++);if(d){v=i.slice(b+1,n);break}}}let N=i.length-1;for(r=!1;N>=s.length+u.length;){let d=i.charAt(N);if(r)d==="-"&&i.slice(N-3,N)==="<!-"?(r=!1,N-=4):N-=1;else if(d===">"&&i.slice(N-2,N)==="--")r=!0,N-=3;else{if(d===">")break;N-=1}}a=i.slice(N+1,i.length);let y=Object.keys(e).map(d=>e[d]===!0?d:`${d}="${e[d]}"`).join(" ");if(t){let d=v?` id="${v}"`:"";Fh.has(u)?k=`<${u}${d}${y===""?"":" "}${y}/>`:k=`<${u}${d}${y===""?"":" "}${y}></${u}>`}else{let d=i.slice(c,N+1);k=`<${u}${y===""?"":" "}${y}${d}`}return[k,s,a]},gl=class{static extract(i){let{[il]:e,[tl]:t,[nl]:n}=i;return delete i[il],delete i[tl],delete i[nl],{diff:i,title:n,reply:e||null,events:t||[]}}constructor(i,e){this.viewId=i,this.rendered={},this.magicId=0,this.mergeDiff(e)}parentViewId(){return this.viewId}toString(i){let[e,t]=this.recursiveToString(this.rendered,this.rendered[mt],i,!0,{});return[e,t]}recursiveToString(i,e=i[mt],t,n,r){t=t?new Set(t):null;let s={buffer:"",components:e,onlyCids:t,streams:new Set};return this.toOutputBuffer(i,null,s,n,r),[s.buffer,s.streams]}componentCIDs(i){return Object.keys(i[mt]||{}).map(e=>parseInt(e))}isComponentOnlyDiff(i){return i[mt]?Object.keys(i).length===1:!1}getComponent(i,e){return i[mt][e]}resetRender(i){this.rendered[mt][i]&&(this.rendered[mt][i].reset=!0)}mergeDiff(i){let e=i[mt],t={};if(delete i[mt],this.rendered=this.mutableMerge(this.rendered,i),this.rendered[mt]=this.rendered[mt]||{},e){let n=this.rendered[mt];for(let r in e)e[r]=this.cachedFindComponent(r,e[r],n,e,t);for(let r in e)n[r]=e[r];i[mt]=e}}cachedFindComponent(i,e,t,n,r){if(r[i])return r[i];{let s,a,u=e[yi];if(Li(u)){let c;u>0?c=this.cachedFindComponent(u,n[u],t,n,r):c=t[-u],a=c[yi],s=this.cloneMerge(c,e,!0),s[yi]=a}else s=e[yi]!==void 0||t[i]===void 0?e:this.cloneMerge(t[i],e,!1);return r[i]=s,s}}mutableMerge(i,e){return e[yi]!==void 0?e:(this.doMutableMerge(i,e),i)}doMutableMerge(i,e){for(let t in e){let n=e[t],r=i[t];Yn(n)&&n[yi]===void 0&&Yn(r)?this.doMutableMerge(r,n):i[t]=n}i[Ka]&&(i.newRender=!0)}cloneMerge(i,e,t){let n={...i,...e};for(let r in n){let s=e[r],a=i[r];Yn(s)&&s[yi]===void 0&&Yn(a)?n[r]=this.cloneMerge(a,s,t):s===void 0&&Yn(a)&&(n[r]=this.cloneMerge(a,{},t))}return t?(delete n.magicId,delete n.newRender):i[Ka]&&(n.newRender=!0),n}componentToString(i){let[e,t]=this.recursiveCIDToString(this.rendered[mt],i,null),[n,r,s]=pl(e,{});return[n,t]}pruneCIDs(i){i.forEach(e=>delete this.rendered[mt][e])}get(){return this.rendered}isNewFingerprint(i={}){return!!i[yi]}templateStatic(i,e){return typeof i=="number"?e[i]:i}nextMagicID(){return this.magicId++,`m${this.magicId}-${this.parentViewId()}`}toOutputBuffer(i,e,t,n,r={}){if(i[As])return this.comprehensionToBuffer(i,e,t);let{[yi]:s}=i;s=this.templateStatic(s,e);let a=i[Ka],u=t.buffer;a&&(t.buffer=""),n&&a&&!i.magicId&&(i.newRender=!0,i.magicId=this.nextMagicID()),t.buffer+=s[0];for(let c=1;c<s.length;c++)this.dynamicToBuffer(i[c-1],e,t,n),t.buffer+=s[c];if(a){let c=!1,v;n||i.magicId?(c=n&&!i.newRender,v={[kl]:i.magicId,...r}):v=r,c&&(v[_l]=!0);let[k,A,N]=pl(t.buffer,v,c);i.newRender=!1,t.buffer=u+A+k+N}}comprehensionToBuffer(i,e,t){let{[As]:n,[yi]:r,[rl]:s}=i,[a,u,c,v]=s||[null,{},[],null];r=this.templateStatic(r,e);let k=e||i[dh];for(let A=0;A<n.length;A++){let N=n[A];t.buffer+=r[0];for(let y=1;y<r.length;y++){let d=!1;this.dynamicToBuffer(N[y-1],k,t,d),t.buffer+=r[y]}}s!==void 0&&(i[As].length>0||c.length>0||v)&&(delete i[rl],i[As]=[],t.streams.add(s))}dynamicToBuffer(i,e,t,n){if(typeof i=="number"){let[r,s]=this.recursiveCIDToString(t.components,i,t.onlyCids);t.buffer+=r,t.streams=new Set([...t.streams,...s])}else Yn(i)?this.toOutputBuffer(i,e,t,n,{}):t.buffer+=i}recursiveCIDToString(i,e,t){let n=i[e]||Lt(`no component for CID ${e}`,i),r={[Ri]:e},s=t&&!t.has(e);n.newRender=!s,n.magicId=`c${e}-${this.parentViewId()}`;let a=!n.reset,[u,c]=this.recursiveToString(n,i,t,a,r);return delete n.reset,[u,c]}},ml=[],vl=200,Hh={exec(i,e,t,n,r,s){let[a,u]=s||[null,{callback:s&&s.callback}];(t.charAt(0)==="["?JSON.parse(t):[[a,u]]).forEach(([v,k])=>{v===a&&(k={...u,...k},k.callback=k.callback||u.callback),this.filterToEls(n.liveSocket,r,k).forEach(A=>{this[`exec_${v}`](i,e,t,n,r,A,k)})})},isVisible(i){return!!(i.offsetWidth||i.offsetHeight||i.getClientRects().length>0)},isInViewport(i){let e=i.getBoundingClientRect(),t=window.innerHeight||document.documentElement.clientHeight,n=window.innerWidth||document.documentElement.clientWidth;return e.right>0&&e.bottom>0&&e.left<n&&e.top<t},exec_exec(i,e,t,n,r,s,{attr:a,to:u}){(u?H.all(document,u):[r]).forEach(v=>{let k=v.getAttribute(a);if(!k)throw new Error(`expected ${a} to contain JS command on "${u}"`);n.liveSocket.execJS(v,k,e)})},exec_dispatch(i,e,t,n,r,s,{event:a,detail:u,bubbles:c}){u=u||{},u.dispatcher=r,H.dispatchEvent(s,a,{detail:u,bubbles:c})},exec_push(i,e,t,n,r,s,a){let{event:u,data:c,target:v,page_loading:k,loading:A,value:N,dispatcher:y,callback:d}=a,g={loading:A,value:N,target:v,page_loading:!!k},b=e==="change"&&y?y:r,E=v||b.getAttribute(n.binding("target"))||b,P=(o,h)=>{if(o.isConnected())if(e==="change"){let{newCid:f,_target:_}=a;_=_||(H.isFormInput(r)?r.name:void 0),_&&(g._target=_),o.pushInput(r,h,f,u||t,g,d)}else if(e==="submit"){let{submitter:f}=a;o.submitForm(r,h,u||t,f,g,d)}else o.pushEvent(e,r,h,u||t,c,g,d)};a.targetView&&a.targetCtx?P(a.targetView,a.targetCtx):n.withinTargets(E,P)},exec_navigate(i,e,t,n,r,s,{href:a,replace:u}){n.liveSocket.historyRedirect(i,a,u?"replace":"push",null,r)},exec_patch(i,e,t,n,r,s,{href:a,replace:u}){n.liveSocket.pushHistoryPatch(i,a,u?"replace":"push",r)},exec_focus(i,e,t,n,r,s){window.requestAnimationFrame(()=>wi.attemptFocus(s))},exec_focus_first(i,e,t,n,r,s){window.requestAnimationFrame(()=>wi.focusFirstInteractive(s)||wi.focusFirst(s))},exec_push_focus(i,e,t,n,r,s){window.requestAnimationFrame(()=>ml.push(s||r))},exec_pop_focus(i,e,t,n,r,s){window.requestAnimationFrame(()=>{let a=ml.pop();a&&a.focus()})},exec_add_class(i,e,t,n,r,s,{names:a,transition:u,time:c,blocking:v}){this.addOrRemoveClasses(s,a,[],u,c,n,v)},exec_remove_class(i,e,t,n,r,s,{names:a,transition:u,time:c,blocking:v}){this.addOrRemoveClasses(s,[],a,u,c,n,v)},exec_toggle_class(i,e,t,n,r,s,{names:a,transition:u,time:c,blocking:v}){this.toggleClasses(s,a,u,c,n,v)},exec_toggle_attr(i,e,t,n,r,s,{attr:[a,u,c]}){this.toggleAttr(s,a,u,c)},exec_transition(i,e,t,n,r,s,{time:a,transition:u,blocking:c}){this.addOrRemoveClasses(s,[],[],u,a,n,c)},exec_toggle(i,e,t,n,r,s,{display:a,ins:u,outs:c,time:v,blocking:k}){this.toggle(e,n,s,a,u,c,v,k)},exec_show(i,e,t,n,r,s,{display:a,transition:u,time:c,blocking:v}){this.show(e,n,s,a,u,c,v)},exec_hide(i,e,t,n,r,s,{display:a,transition:u,time:c,blocking:v}){this.hide(e,n,s,a,u,c,v)},exec_set_attr(i,e,t,n,r,s,{attr:[a,u]}){this.setOrRemoveAttrs(s,[[a,u]],[])},exec_remove_attr(i,e,t,n,r,s,{attr:a}){this.setOrRemoveAttrs(s,[],[a])},show(i,e,t,n,r,s,a){this.isVisible(t)||this.toggle(i,e,t,n,r,null,s,a)},hide(i,e,t,n,r,s,a){this.isVisible(t)&&this.toggle(i,e,t,n,null,r,s,a)},toggle(i,e,t,n,r,s,a,u){a=a||vl;let[c,v,k]=r||[[],[],[]],[A,N,y]=s||[[],[],[]];if(c.length>0||A.length>0)if(this.isVisible(t)){let d=()=>{this.addOrRemoveClasses(t,N,c.concat(v).concat(k)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(t,A,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(t,y,N))})},g=()=>{this.addOrRemoveClasses(t,[],A.concat(y)),H.putSticky(t,"toggle",b=>b.style.display="none"),t.dispatchEvent(new Event("phx:hide-end"))};t.dispatchEvent(new Event("phx:hide-start")),u===!1?(d(),setTimeout(g,a)):e.transition(a,d,g)}else{if(i==="remove")return;let d=()=>{this.addOrRemoveClasses(t,v,A.concat(N).concat(y));let b=n||this.defaultDisplay(t);H.putSticky(t,"toggle",E=>E.style.display=b),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(t,c,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(t,k,v))})},g=()=>{this.addOrRemoveClasses(t,[],c.concat(k)),t.dispatchEvent(new Event("phx:show-end"))};t.dispatchEvent(new Event("phx:show-start")),u===!1?(d(),setTimeout(g,a)):e.transition(a,d,g)}else this.isVisible(t)?window.requestAnimationFrame(()=>{t.dispatchEvent(new Event("phx:hide-start")),H.putSticky(t,"toggle",d=>d.style.display="none"),t.dispatchEvent(new Event("phx:hide-end"))}):window.requestAnimationFrame(()=>{t.dispatchEvent(new Event("phx:show-start"));let d=n||this.defaultDisplay(t);H.putSticky(t,"toggle",g=>g.style.display=d),t.dispatchEvent(new Event("phx:show-end"))})},toggleClasses(i,e,t,n,r,s){window.requestAnimationFrame(()=>{let[a,u]=H.getSticky(i,"classes",[[],[]]),c=e.filter(k=>a.indexOf(k)<0&&!i.classList.contains(k)),v=e.filter(k=>u.indexOf(k)<0&&i.classList.contains(k));this.addOrRemoveClasses(i,c,v,t,n,r,s)})},toggleAttr(i,e,t,n){i.hasAttribute(e)?n!==void 0?i.getAttribute(e)===t?this.setOrRemoveAttrs(i,[[e,n]],[]):this.setOrRemoveAttrs(i,[[e,t]],[]):this.setOrRemoveAttrs(i,[],[e]):this.setOrRemoveAttrs(i,[[e,t]],[])},addOrRemoveClasses(i,e,t,n,r,s,a){r=r||vl;let[u,c,v]=n||[[],[],[]];if(u.length>0){let k=()=>{this.addOrRemoveClasses(i,c,[].concat(u).concat(v)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,u,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,v,c))})},A=()=>this.addOrRemoveClasses(i,e.concat(v),t.concat(u).concat(c));a===!1?(k(),setTimeout(A,r)):s.transition(r,k,A);return}window.requestAnimationFrame(()=>{let[k,A]=H.getSticky(i,"classes",[[],[]]),N=e.filter(b=>k.indexOf(b)<0&&!i.classList.contains(b)),y=t.filter(b=>A.indexOf(b)<0&&i.classList.contains(b)),d=k.filter(b=>t.indexOf(b)<0).concat(N),g=A.filter(b=>e.indexOf(b)<0).concat(y);H.putSticky(i,"classes",b=>(b.classList.remove(...g),b.classList.add(...d),[d,g]))})},setOrRemoveAttrs(i,e,t){let[n,r]=H.getSticky(i,"attrs",[[],[]]),s=e.map(([c,v])=>c).concat(t),a=n.filter(([c,v])=>!s.includes(c)).concat(e),u=r.filter(c=>!s.includes(c)).concat(t);H.putSticky(i,"attrs",c=>(u.forEach(v=>c.removeAttribute(v)),a.forEach(([v,k])=>c.setAttribute(v,k)),[a,u]))},hasAllClasses(i,e){return e.every(t=>i.classList.contains(t))},isToggledOut(i,e){return!this.isVisible(i)||this.hasAllClasses(i,e)},filterToEls(i,e,{to:t}){let n=()=>{if(typeof t=="string")return document.querySelectorAll(t);if(t.closest){let r=e.closest(t.closest);return r?[r]:[]}else if(t.inner)return e.querySelectorAll(t.inner)};return t?i.jsQuerySelectorAll(e,t,n):[e]},defaultDisplay(i){return{tr:"table-row",td:"table-cell"}[i.tagName.toLowerCase()]||"block"},transitionClasses(i){if(!i)return null;let[e,t,n]=Array.isArray(i)?i:[i.split(" "),[],[]];return e=Array.isArray(e)?e:e.split(" "),t=Array.isArray(t)?t:t.split(" "),n=Array.isArray(n)?n:n.split(" "),[e,t,n]}},Ne=Hh,Ga="hookId",zh=1,xr=class{static makeID(){return zh++}static elementID(i){return H.private(i,Ga)}constructor(i,e,t){this.el=e,this.__attachView(i),this.__callbacks=t,this.__listeners=new Set,this.__isDisconnected=!1,H.putPrivate(this.el,Ga,this.constructor.makeID());for(let n in this.__callbacks)this[n]=this.__callbacks[n]}__attachView(i){i?(this.__view=()=>i,this.liveSocket=i.liveSocket):(this.__view=()=>{throw new Error(`hook not yet attached to a live view: ${this.el.outerHTML}`)},this.liveSocket=null)}__mounted(){this.mounted&&this.mounted()}__updated(){this.updated&&this.updated()}__beforeUpdate(){this.beforeUpdate&&this.beforeUpdate()}__destroyed(){this.destroyed&&this.destroyed(),H.deletePrivate(this.el,Ga)}__reconnected(){this.__isDisconnected&&(this.__isDisconnected=!1,this.reconnected&&this.reconnected())}__disconnected(){this.__isDisconnected=!0,this.disconnected&&this.disconnected()}js(){let i=this;return{exec(e){i.__view().liveSocket.execJS(i.el,e,"hook")},show(e,t={}){let n=i.__view().liveSocket.owner(e);Ne.show("hook",n,e,t.display,t.transition,t.time,t.blocking)},hide(e,t={}){let n=i.__view().liveSocket.owner(e);Ne.hide("hook",n,e,null,t.transition,t.time,t.blocking)},toggle(e,t={}){let n=i.__view().liveSocket.owner(e);t.in=Ne.transitionClasses(t.in),t.out=Ne.transitionClasses(t.out),Ne.toggle("hook",n,e,t.display,t.in,t.out,t.time,t.blocking)},addClass(e,t,n={}){t=Array.isArray(t)?t:t.split(" ");let r=i.__view().liveSocket.owner(e);Ne.addOrRemoveClasses(e,t,[],n.transition,n.time,r,n.blocking)},removeClass(e,t,n={}){n.transition=Ne.transitionClasses(n.transition),t=Array.isArray(t)?t:t.split(" ");let r=i.__view().liveSocket.owner(e);Ne.addOrRemoveClasses(e,[],t,n.transition,n.time,r,n.blocking)},toggleClass(e,t,n={}){n.transition=Ne.transitionClasses(n.transition),t=Array.isArray(t)?t:t.split(" ");let r=i.__view().liveSocket.owner(e);Ne.toggleClasses(e,t,n.transition,n.time,r,n.blocking)},transition(e,t,n={}){let r=i.__view().liveSocket.owner(e);Ne.addOrRemoveClasses(e,[],[],Ne.transitionClasses(t),n.time,r,n.blocking)},setAttribute(e,t,n){Ne.setOrRemoveAttrs(e,[[t,n]],[])},removeAttribute(e,t){Ne.setOrRemoveAttrs(e,[],[t])},toggleAttribute(e,t,n,r){Ne.toggleAttr(e,t,n,r)}}}pushEvent(i,e={},t){return t===void 0?new Promise((n,r)=>{try{this.__view().pushHookEvent(this.el,null,i,e,(a,u)=>n(a))===!1&&r(new Error("unable to push hook event. LiveView not connected"))}catch(s){r(s)}}):this.__view().pushHookEvent(this.el,null,i,e,t)}pushEventTo(i,e,t={},n){return n===void 0?new Promise((r,s)=>{try{this.__view().withinTargets(i,(a,u)=>{a.pushHookEvent(this.el,u,e,t,(v,k)=>r(v))===!1&&s(new Error("unable to push hook event. LiveView not connected"))})}catch(a){s(a)}}):this.__view().withinTargets(i,(r,s)=>r.pushHookEvent(this.el,s,e,t,n))}handleEvent(i,e){let t=(n,r)=>r?i:e(n.detail);return window.addEventListener(`phx:${i}`,t),this.__listeners.add(t),t}removeHandleEvent(i){let e=i(null,!0);window.removeEventListener(`phx:${e}`,i),this.__listeners.delete(i)}upload(i,e){return this.__view().dispatchUploads(null,i,e)}uploadTo(i,e,t){return this.__view().withinTargets(i,(n,r)=>{n.dispatchUploads(r,e,t)})}__cleanup__(){this.__listeners.forEach(i=>this.removeHandleEvent(i))}},Vh=(i,e)=>{let t=i.endsWith("[]"),n=t?i.slice(0,-2):i;return n=n.replace(/([^\[\]]+)(\]?$)/,`${e}$1$2`),t&&(n+="[]"),n},Ds=(i,e,t=[])=>{let{submitter:n,...r}=e,s;if(n&&n.name){let k=document.createElement("input");k.type="hidden";let A=n.getAttribute("form");A&&k.setAttribute("form",A),k.name=n.name,k.value=n.value,n.parentElement.insertBefore(k,n),s=k}let a=new FormData(i),u=[];a.forEach((k,A,N)=>{k instanceof File&&u.push(A)}),u.forEach(k=>a.delete(k));let c=new URLSearchParams,v=Array.from(i.elements);for(let[k,A]of a.entries())if(t.length===0||t.indexOf(k)>=0){let N=v.filter(g=>g.name===k),y=!N.some(g=>H.private(g,Ls)||H.private(g,Rr)),d=N.every(g=>g.type==="hidden");y&&!(n&&n.name==k)&&!d&&c.append(Vh(k,"_unused_"),""),c.append(k,A)}n&&s&&n.parentElement.removeChild(s);for(let k in r)c.append(k,r[k]);return c.toString()},Uh=class Sl{static closestView(e){let t=e.closest(En);return t?H.private(t,"view"):null}constructor(e,t,n,r,s){this.isDead=!1,this.liveSocket=t,this.flash=r,this.parent=n,this.root=n?n.root:this,this.el=e,H.putPrivate(this.el,"view",this),this.id=this.el.id,this.ref=0,this.lastAckRef=null,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.pendingForms=new Set,this.redirect=!1,this.href=null,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinAttempts=0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(a){a&&a()},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.formsForRecovery={},this.channel=this.liveSocket.channel(`lv:${this.id}`,()=>{let a=this.href&&this.expandURL(this.href);return{redirect:this.redirect?a:void 0,url:this.redirect?void 0:a||void 0,params:this.connectParams(s),session:this.getSession(),static:this.getStatic(),flash:this.flash}})}setHref(e){this.href=e}setRedirect(e){this.redirect=!0,this.href=e}isMain(){return this.el.hasAttribute(io)}connectParams(e){let t=this.liveSocket.params(this.el),n=H.all(document,`[${this.binding(Xc)}]`).map(r=>r.src||r.href).filter(r=>typeof r=="string");return n.length>0&&(t._track_static=n),t._mounts=this.joinCount,t._mount_attempts=this.joinAttempts,t._live_referer=e,this.joinAttempts++,t}isConnected(){return this.channel.canPush()}getSession(){return this.el.getAttribute(_i)}getStatic(){let e=this.el.getAttribute(kn);return e===""?null:e}destroy(e=function(){}){this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);let t=()=>{e();for(let n in this.viewHooks)this.destroyHook(this.viewHooks[n])};H.markPhxChildDestroyed(this.el),this.log("destroyed",()=>["the child has been removed from the parent"]),this.channel.leave().receive("ok",t).receive("error",t).receive("timeout",t)}setContainerClasses(...e){this.el.classList.remove($u,wn,Xn,qu,_r),this.el.classList.add(...e)}showLoader(e){if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout(()=>this.showLoader(),e);else{for(let t in this.viewHooks)this.viewHooks[t].__disconnected();this.setContainerClasses(wn)}}execAll(e){H.all(this.el,`[${e}]`,t=>this.liveSocket.execJS(t,t.getAttribute(e)))}hideLoader(){clearTimeout(this.loaderTimer),this.setContainerClasses($u),this.execAll(this.binding("connected"))}triggerReconnected(){for(let e in this.viewHooks)this.viewHooks[e].__reconnected()}log(e,t){this.liveSocket.log(this,e,t)}transition(e,t,n=function(){}){this.liveSocket.transition(e,t,n)}withinTargets(e,t,n=document,r){if(e instanceof HTMLElement||e instanceof SVGElement)return this.liveSocket.owner(e,s=>t(s,e));if(Li(e))H.findComponentNodeList(r||this.el,e).length===0?Lt(`no component found matching phx-target of ${e}`):t(this,parseInt(e));else{let s=Array.from(n.querySelectorAll(e));s.length===0&&Lt(`nothing found matching the phx-target selector "${e}"`),s.forEach(a=>this.liveSocket.owner(a,u=>t(u,a)))}}applyDiff(e,t,n){this.log(e,()=>["",xs(t)]);let{diff:r,reply:s,events:a,title:u}=gl.extract(t);n({diff:r,reply:s,events:a}),(typeof u=="string"||e=="mount")&&window.requestAnimationFrame(()=>H.putTitle(u))}onJoin(e){let{rendered:t,container:n,liveview_version:r}=e;if(n){let[s,a]=n;this.el=H.replaceRootContainer(this.el,s,a)}this.childJoins=0,this.joinPending=!0,this.flash=null,this.root===this&&(this.formsForRecovery=this.getFormsForRecovery()),this.isMain()&&window.history.state===null&&xt.pushState("replace",{type:"patch",id:this.id,position:this.liveSocket.currentHistoryPosition}),r!==this.liveSocket.version()&&console.error(`LiveView asset version mismatch. JavaScript version ${this.liveSocket.version()} vs. server ${r}. To avoid issues, please ensure that your assets use the same version as the server.`),xt.dropLocal(this.liveSocket.localStorage,window.location.pathname,bl),this.applyDiff("mount",t,({diff:s,events:a})=>{this.rendered=new gl(this.id,s);let[u,c]=this.renderContainer(null,"join");this.dropPendingRefs(),this.joinCount++,this.joinAttempts=0,this.maybeRecoverForms(u,()=>{this.onJoinComplete(e,u,c,a)})})}dropPendingRefs(){H.all(document,`[${Gt}="${this.refSrc()}"]`,e=>{e.removeAttribute(Qn),e.removeAttribute(Gt),e.removeAttribute(tt)})}onJoinComplete({live_patch:e},t,n,r){if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(e,t,n,r);H.findPhxChildrenInFragment(t,this.id).filter(a=>{let u=a.id&&this.el.querySelector(`[id="${a.id}"]`),c=u&&u.getAttribute(kn);return c&&a.setAttribute(kn,c),u&&u.setAttribute(en,this.root.id),this.joinChild(a)}).length===0?this.parent?(this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,n,r)]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(e,t,n,r)):this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,n,r)])}attachTrueDocEl(){this.el=H.byId(this.id),this.el.setAttribute(en,this.root.id)}execNewMounted(e=this.el){let t=this.binding(Ya),n=this.binding(Za);H.all(e,`[${t}], [${n}]`,r=>{this.ownsElement(r)&&(H.maintainPrivateHooks(r,r,t,n),this.maybeAddNewHook(r))}),H.all(e,`[${this.binding(kr)}], [data-phx-${kr}]`,r=>{this.ownsElement(r)&&this.maybeAddNewHook(r)}),H.all(e,`[${this.binding(Xu)}]`,r=>{this.ownsElement(r)&&this.maybeMounted(r)})}applyJoinPatch(e,t,n,r){this.attachTrueDocEl();let s=new Ss(this,this.el,this.id,t,n,null);if(s.markPrunableContentForRemoval(),this.performPatch(s,!1,!0),this.joinNewChildren(),this.execNewMounted(),this.joinPending=!1,this.liveSocket.dispatchEvents(r),this.applyPendingUpdates(),e){let{kind:a,to:u}=e;this.liveSocket.historyPatch(u,a)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}triggerBeforeUpdateHook(e,t){this.liveSocket.triggerDOM("onBeforeElUpdated",[e,t]);let n=this.getHook(e),r=n&&H.isIgnored(e,this.binding(Ps));if(n&&!e.isEqualNode(t)&&!(r&&gh(e.dataset,t.dataset)))return n.__beforeUpdate(),n}maybeMounted(e){let t=e.getAttribute(this.binding(Xu)),n=t&&H.private(e,"mounted");t&&!n&&(this.liveSocket.execJS(e,t),H.putPrivate(e,"mounted",!0))}maybeAddNewHook(e){let t=this.addHook(e);t&&t.__mounted()}performPatch(e,t,n=!1){let r=[],s=!1,a=new Set;return this.liveSocket.triggerDOM("onPatchStart",[e.targetContainer]),e.after("added",u=>{this.liveSocket.triggerDOM("onNodeAdded",[u]);let c=this.binding(Ya),v=this.binding(Za);H.maintainPrivateHooks(u,u,c,v),this.maybeAddNewHook(u),u.getAttribute&&this.maybeMounted(u)}),e.after("phxChildAdded",u=>{H.isPhxSticky(u)?this.liveSocket.joinRootViews():s=!0}),e.before("updated",(u,c)=>{this.triggerBeforeUpdateHook(u,c)&&a.add(u.id)}),e.after("updated",u=>{a.has(u.id)&&this.getHook(u).__updated()}),e.after("discarded",u=>{u.nodeType===Node.ELEMENT_NODE&&r.push(u)}),e.after("transitionsDiscarded",u=>this.afterElementsRemoved(u,t)),e.perform(n),this.afterElementsRemoved(r,t),this.liveSocket.triggerDOM("onPatchEnd",[e.targetContainer]),s}afterElementsRemoved(e,t){let n=[];e.forEach(r=>{let s=H.all(r,`[${Ri}]`),a=H.all(r,`[${this.binding(kr)}], [data-phx-hook]`);s.concat(r).forEach(u=>{let c=this.componentID(u);Li(c)&&n.indexOf(c)===-1&&n.push(c)}),a.concat(r).forEach(u=>{let c=this.getHook(u);c&&this.destroyHook(c)})}),t&&this.maybePushComponentsDestroyed(n)}joinNewChildren(){H.findPhxChildren(this.el,this.id).forEach(e=>this.joinChild(e))}maybeRecoverForms(e,t){let n=this.binding("change"),r=this.root.formsForRecovery,s=document.createElement("template");s.innerHTML=e;let a=s.content.firstElementChild;a.id=this.id,a.setAttribute(en,this.root.id),a.setAttribute(_i,this.getSession()),a.setAttribute(kn,this.getStatic()),a.setAttribute(An,this.parent?this.parent.id:null);let u=H.all(s.content,"form").filter(c=>c.id&&r[c.id]).filter(c=>!this.pendingForms.has(c.id)).filter(c=>r[c.id].getAttribute(n)===c.getAttribute(n)).map(c=>[r[c.id],c]);if(u.length===0)return t();u.forEach(([c,v],k)=>{this.pendingForms.add(v.id),this.pushFormRecovery(c,v,s.content.firstElementChild,()=>{this.pendingForms.delete(v.id),k===u.length-1&&t()})})}getChildById(e){return this.root.children[this.id][e]}getDescendentByEl(e){return e.id===this.id?this:this.children[e.getAttribute(An)]?.[e.id]}destroyDescendent(e){for(let t in this.root.children)for(let n in this.root.children[t])if(n===e)return this.root.children[t][n].destroy()}joinChild(e){if(!this.getChildById(e.id)){let n=new Sl(e,this.liveSocket,this);return this.root.children[this.id][n.id]=n,n.join(),this.childJoins++,!0}}isJoinPending(){return this.joinPending}ackJoin(e){this.childJoins--,this.childJoins===0&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}onAllChildJoinsComplete(){this.pendingForms.clear(),this.formsForRecovery={},this.joinCallback(()=>{this.pendingJoinOps.forEach(([e,t])=>{e.isDestroyed()||t()}),this.pendingJoinOps=[]})}update(e,t){if(this.isJoinPending()||this.liveSocket.hasPendingLink()&&this.root.isMain())return this.pendingDiffs.push({diff:e,events:t});this.rendered.mergeDiff(e);let n=!1;this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time("component patch complete",()=>{H.findExistingParentCIDs(this.el,this.rendered.componentCIDs(e)).forEach(s=>{this.componentPatch(this.rendered.getComponent(e,s),s)&&(n=!0)})}):sl(e)||this.liveSocket.time("full patch complete",()=>{let[r,s]=this.renderContainer(e,"update"),a=new Ss(this,this.el,this.id,r,s,null);n=this.performPatch(a,!0)}),this.liveSocket.dispatchEvents(t),n&&this.joinNewChildren()}renderContainer(e,t){return this.liveSocket.time(`toString diff (${t})`,()=>{let n=this.el.tagName,r=e?this.rendered.componentCIDs(e):null,[s,a]=this.rendered.toString(r);return[`<${n}>${s}</${n}>`,a]})}componentPatch(e,t){if(sl(e))return!1;let[n,r]=this.rendered.componentToString(t),s=new Ss(this,this.el,this.id,n,r,t);return this.performPatch(s,!0)}getHook(e){return this.viewHooks[xr.elementID(e)]}addHook(e){let t=xr.elementID(e);if(!(e.getAttribute&&!this.ownsElement(e)))if(t&&!this.viewHooks[t]){let n=H.getCustomElHook(e)||Lt(`no hook found for custom element: ${e.id}`);return this.viewHooks[t]=n,n.__attachView(this),n}else{if(t||!e.getAttribute)return;{let n=e.getAttribute(`data-phx-${kr}`)||e.getAttribute(this.binding(kr)),r=this.liveSocket.getHookCallbacks(n);if(r){e.id||Lt(`no DOM ID for hook "${n}". Hooks require a unique ID on each element.`,e);let s=new xr(this,e,r);return this.viewHooks[xr.elementID(s.el)]=s,s}else n!==null&&Lt(`unknown hook found for "${n}"`,e)}}}destroyHook(e){let t=xr.elementID(e.el);e.__destroyed(),e.__cleanup__(),delete this.viewHooks[t]}applyPendingUpdates(){this.pendingDiffs.forEach(({diff:e,events:t})=>this.update(e,t)),this.pendingDiffs=[],this.eachChild(e=>e.applyPendingUpdates())}eachChild(e){let t=this.root.children[this.id]||{};for(let n in t)e(this.getChildById(n))}onChannel(e,t){this.liveSocket.onChannel(this.channel,e,n=>{this.isJoinPending()?this.root.pendingJoinOps.push([this,()=>t(n)]):this.liveSocket.requestDOMUpdate(()=>t(n))})}bindChannel(){this.liveSocket.onChannel(this.channel,"diff",e=>{this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",e,({diff:t,events:n})=>this.update(t,n))})}),this.onChannel("redirect",({to:e,flash:t})=>this.onRedirect({to:e,flash:t})),this.onChannel("live_patch",e=>this.onLivePatch(e)),this.onChannel("live_redirect",e=>this.onLiveRedirect(e)),this.channel.onError(e=>this.onError(e)),this.channel.onClose(e=>this.onClose(e))}destroyAllChildren(){this.eachChild(e=>e.destroy())}onLiveRedirect(e){let{to:t,kind:n,flash:r}=e,s=this.expandURL(t),a=new CustomEvent("phx:server-navigate",{detail:{to:t,kind:n,flash:r}});this.liveSocket.historyRedirect(a,s,n,r)}onLivePatch(e){let{to:t,kind:n}=e;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,n)}expandURL(e){return e.startsWith("/")?`${window.location.protocol}//${window.location.host}${e}`:e}onRedirect({to:e,flash:t,reloadToken:n}){this.liveSocket.redirect(e,t,n)}isDestroyed(){return this.destroyed}joinDead(){this.isDead=!0}joinPush(){return this.joinPush=this.joinPush||this.channel.join(),this.joinPush}join(e){this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel(),this.isMain()&&(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=t=>{t=t||function(){},e?e(this.joinCount,t):t()},this.wrapPush(()=>this.channel.join(),{ok:t=>this.liveSocket.requestDOMUpdate(()=>this.onJoin(t)),error:t=>this.onJoinError(t),timeout:()=>this.onJoinError({reason:"timeout"})})}onJoinError(e){if(e.reason==="reload"){this.log("error",()=>[`failed mount with ${e.status}. Falling back to page reload`,e]),this.onRedirect({to:this.root.href,reloadToken:e.token});return}else if(e.reason==="unauthorized"||e.reason==="stale"){this.log("error",()=>["unauthorized live_redirect. Falling back to page request",e]),this.onRedirect({to:this.root.href});return}if((e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect)return this.onRedirect(e.redirect);if(e.live_redirect)return this.onLiveRedirect(e.live_redirect);if(this.log("error",()=>["unable to join",e]),this.isMain())this.displayError([wn,Xn,_r]),this.liveSocket.isConnected()&&this.liveSocket.reloadWithJitter(this);else{this.joinAttempts>=Zu&&(this.root.displayError([wn,Xn,_r]),this.log("error",()=>[`giving up trying to mount after ${Zu} tries`,e]),this.destroy());let t=H.byId(this.el.id);t?(H.mergeAttrs(t,this.el),this.displayError([wn,Xn,_r]),this.el=t):this.destroy()}}onClose(e){if(!this.isDestroyed()){if(this.isMain()&&this.liveSocket.hasPendingLink()&&e!=="leave")return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(ah)}}onError(e){this.onClose(e),this.liveSocket.isConnected()&&this.log("error",()=>["view crashed",e]),this.liveSocket.isUnloaded()||(this.liveSocket.isConnected()?this.displayError([wn,Xn,_r]):this.displayError([wn,Xn,qu]))}displayError(e){this.isMain()&&H.dispatchEvent(window,"phx:page-loading-start",{detail:{to:this.href,kind:"error"}}),this.showLoader(),this.setContainerClasses(...e),this.execAll(this.binding("disconnected"))}wrapPush(e,t){let n=this.liveSocket.getLatencySim(),r=n?s=>setTimeout(()=>!this.isDestroyed()&&s(),n):s=>!this.isDestroyed()&&s();r(()=>{e().receive("ok",s=>r(()=>t.ok&&t.ok(s))).receive("error",s=>r(()=>t.error&&t.error(s))).receive("timeout",()=>r(()=>t.timeout&&t.timeout()))})}pushWithReply(e,t,n){if(!this.isConnected())return Promise.reject({error:"noconnection"});let[r,[s],a]=e?e():[null,[],{}],u=this.joinCount,c=function(){};return a.page_loading&&(c=this.liveSocket.withPageLoading({kind:"element",target:s})),typeof n.cid!="number"&&delete n.cid,new Promise((v,k)=>{this.wrapPush(()=>this.channel.push(t,n,uh),{ok:A=>{r!==null&&(this.lastAckRef=r);let N=y=>{A.redirect&&this.onRedirect(A.redirect),A.live_patch&&this.onLivePatch(A.live_patch),A.live_redirect&&this.onLiveRedirect(A.live_redirect),c(),v({resp:A,reply:y})};A.diff?this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",A.diff,({diff:y,reply:d,events:g})=>{r!==null&&this.undoRefs(r,n.event),this.update(y,g),N(d)})}):(r!==null&&this.undoRefs(r,n.event),N(null))},error:A=>k({error:A}),timeout:()=>{k({timeout:!0}),this.joinCount===u&&this.liveSocket.reloadWithJitter(this,()=>{this.log("timeout",()=>["received timeout while communicating with server. Falling back to hard refresh for recovery"])})}})})}undoRefs(e,t,n){if(!this.isConnected())return;let r=`[${Gt}="${this.refSrc()}"]`;n?(n=new Set(n),H.all(document,r,s=>{n&&!n.has(s)||(H.all(s,r,a=>this.undoElRef(a,e,t)),this.undoElRef(s,e,t))})):H.all(document,r,s=>this.undoElRef(s,e,t))}undoElRef(e,t,n){new ul(e).maybeUndo(t,n,s=>{let a=new Ss(this,e,this.id,s,[],null,{undoRef:t}),u=this.performPatch(a,!0);H.all(e,`[${Gt}="${this.refSrc()}"]`,c=>this.undoElRef(c,t,n)),u&&this.joinNewChildren()})}refSrc(){return this.el.id}putRef(e,t,n,r={}){let s=this.ref++,a=this.binding(Ju);if(r.loading){let u=H.all(document,r.loading).map(c=>({el:c,lock:!0,loading:!0}));e=e.concat(u)}for(let{el:u,lock:c,loading:v}of e){if(!c&&!v)throw new Error("putRef requires lock or loading");if(u.setAttribute(Gt,this.refSrc()),v&&u.setAttribute(Qn,s),c&&u.setAttribute(tt,s),!v||r.submitter&&!(u===r.submitter||u===r.form))continue;let k=new Promise(d=>{u.addEventListener(`phx:undo-lock:${s}`,()=>d(y),{once:!0})}),A=new Promise(d=>{u.addEventListener(`phx:undo-loading:${s}`,()=>d(y),{once:!0})});u.classList.add(`phx-${n}-loading`);let N=u.getAttribute(a);N!==null&&(u.getAttribute(Rs)||u.setAttribute(Rs,u.innerText),N!==""&&(u.innerText=N),u.setAttribute(Zn,u.getAttribute(Zn)||u.disabled),u.setAttribute("disabled",""));let y={event:t,eventType:n,ref:s,isLoading:v,isLocked:c,lockElements:e.filter(({lock:d})=>d).map(({el:d})=>d),loadingElements:e.filter(({loading:d})=>d).map(({el:d})=>d),unlock:d=>{d=Array.isArray(d)?d:[d],this.undoRefs(s,t,d)},lockComplete:k,loadingComplete:A,lock:d=>new Promise(g=>{if(this.isAcked(s))return g(y);d.setAttribute(tt,s),d.setAttribute(Gt,this.refSrc()),d.addEventListener(`phx:lock-stop:${s}`,()=>g(y),{once:!0})})};u.dispatchEvent(new CustomEvent("phx:push",{detail:y,bubbles:!0,cancelable:!1})),t&&u.dispatchEvent(new CustomEvent(`phx:push:${t}`,{detail:y,bubbles:!0,cancelable:!1}))}return[s,e.map(({el:u})=>u),r]}isAcked(e){return this.lastAckRef!==null&&this.lastAckRef>=e}componentID(e){let t=e.getAttribute&&e.getAttribute(Ri);return t?parseInt(t):null}targetComponentID(e,t,n={}){if(Li(t))return t;let r=n.target||e.getAttribute(this.binding("target"));return Li(r)?parseInt(r):t&&(r!==null||n.target)?this.closestComponentID(t):null}closestComponentID(e){return Li(e)?e:e?Qi(e.closest(`[${Ri}]`),t=>this.ownsElement(t)&&this.componentID(t)):null}pushHookEvent(e,t,n,r,s){if(!this.isConnected())return this.log("hook",()=>["unable to push hook event. LiveView not connected",n,r]),!1;let[a,u,c]=this.putRef([{el:e,loading:!0,lock:!0}],n,"hook");return this.pushWithReply(()=>[a,u,c],"event",{type:"hook",event:n,value:r,cid:this.closestComponentID(t)}).then(({resp:v,reply:k})=>s(k,a)),a}extractMeta(e,t,n){let r=this.binding("value-");for(let s=0;s<e.attributes.length;s++){t||(t={});let a=e.attributes[s].name;a.startsWith(r)&&(t[a.replace(r,"")]=e.getAttribute(a))}if(e.value!==void 0&&!(e instanceof HTMLFormElement)&&(t||(t={}),t.value=e.value,e.tagName==="INPUT"&&Al.indexOf(e.type)>=0&&!e.checked&&delete t.value),n){t||(t={});for(let s in n)t[s]=n[s]}return t}pushEvent(e,t,n,r,s,a={},u){this.pushWithReply(()=>this.putRef([{el:t,loading:!0,lock:!0}],r,e,a),"event",{type:e,event:r,value:this.extractMeta(t,s,a.value),cid:this.targetComponentID(t,n,a)}).then(({reply:c})=>u&&u(c))}pushFileProgress(e,t,n,r=function(){}){this.liveSocket.withinOwners(e.form,(s,a)=>{s.pushWithReply(null,"progress",{event:e.getAttribute(s.binding(rh)),ref:e.getAttribute(Pi),entry_ref:t,progress:n,cid:s.targetComponentID(e.form,a)}).then(({resp:u})=>r(u))})}pushInput(e,t,n,r,s,a){if(!e.form)throw new Error("form events require the input to be inside a form");let u,c=Li(n)?n:this.targetComponentID(e.form,t,s),v=()=>this.putRef([{el:e,loading:!0,lock:!0},{el:e.form,loading:!0,lock:!0}],r,"change",s),k,A=this.extractMeta(e.form);e instanceof HTMLButtonElement&&(A.submitter=e),e.getAttribute(this.binding("change"))?k=Ds(e.form,{_target:s._target,...A},[e.name]):k=Ds(e.form,{_target:s._target,...A}),H.isUploadInput(e)&&e.files&&e.files.length>0&&it.trackFiles(e,Array.from(e.files)),u=it.serializeUploads(e);let N={type:"form",event:r,value:k,uploads:u,cid:c};this.pushWithReply(v,"event",N).then(({resp:y})=>{H.isUploadInput(e)&&H.isAutoUpload(e)?ul.onUnlock(e,()=>{if(it.filesAwaitingPreflight(e).length>0){let[d,g]=v();this.undoRefs(d,r,[e.form]),this.uploadFiles(e.form,r,t,d,c,b=>{a&&a(y),this.triggerAwaitingSubmit(e.form,r),this.undoRefs(d,r)})}}):a&&a(y)})}triggerAwaitingSubmit(e,t){let n=this.getScheduledSubmit(e);if(n){let[r,s,a,u]=n;this.cancelSubmit(e,t),u()}}getScheduledSubmit(e){return this.formSubmits.find(([t,n,r,s])=>t.isSameNode(e))}scheduleSubmit(e,t,n,r){if(this.getScheduledSubmit(e))return!0;this.formSubmits.push([e,t,n,r])}cancelSubmit(e,t){this.formSubmits=this.formSubmits.filter(([n,r,s,a])=>n.isSameNode(e)?(this.undoRefs(r,t),!1):!0)}disableForm(e,t,n={}){let r=d=>!(Lr(d,`${this.binding(Ps)}=ignore`,d.form)||Lr(d,"data-phx-update=ignore",d.form)),s=d=>d.hasAttribute(this.binding(Ju)),a=d=>d.tagName=="BUTTON",u=d=>["INPUT","TEXTAREA","SELECT"].includes(d.tagName),c=Array.from(e.elements),v=c.filter(s),k=c.filter(a).filter(r),A=c.filter(u).filter(r);k.forEach(d=>{d.setAttribute(Zn,d.disabled),d.disabled=!0}),A.forEach(d=>{d.setAttribute(Qa,d.readOnly),d.readOnly=!0,d.files&&(d.setAttribute(Zn,d.disabled),d.disabled=!0)});let N=v.concat(k).concat(A).map(d=>({el:d,loading:!0,lock:!0})),y=[{el:e,loading:!0,lock:!1}].concat(N).reverse();return this.putRef(y,t,"submit",n)}pushFormSubmit(e,t,n,r,s,a){let u=()=>this.disableForm(e,n,{...s,form:e,submitter:r}),c=this.targetComponentID(e,t);if(it.hasUploadsInProgress(e)){let[v,k]=u(),A=()=>this.pushFormSubmit(e,t,n,r,s,a);return this.scheduleSubmit(e,v,s,A)}else if(it.inputsAwaitingPreflight(e).length>0){let[v,k]=u(),A=()=>[v,k,s];this.uploadFiles(e,n,t,v,c,N=>{if(it.inputsAwaitingPreflight(e).length>0)return this.undoRefs(v,n);let y=this.extractMeta(e),d=Ds(e,{submitter:r,...y});this.pushWithReply(A,"event",{type:"form",event:n,value:d,cid:c}).then(({resp:g})=>a(g))})}else if(!(e.hasAttribute(Gt)&&e.classList.contains("phx-submit-loading"))){let v=this.extractMeta(e),k=Ds(e,{submitter:r,...v});this.pushWithReply(u,"event",{type:"form",event:n,value:k,cid:c}).then(({resp:A})=>a(A))}}uploadFiles(e,t,n,r,s,a){let u=this.joinCount,c=it.activeFileInputs(e),v=c.length;c.forEach(k=>{let A=new it(k,this,()=>{v--,v===0&&a()}),N=A.entries().map(d=>d.toPreflightPayload());if(N.length===0){v--;return}let y={ref:k.getAttribute(Pi),entries:N,cid:this.targetComponentID(k.form,n)};this.log("upload",()=>["sending preflight request",y]),this.pushWithReply(null,"allow_upload",y).then(({resp:d})=>{if(this.log("upload",()=>["got preflight response",d]),A.entries().forEach(g=>{d.entries&&!d.entries[g.ref]&&this.handleFailedEntryPreflight(g.ref,"failed preflight",A)}),d.error||Object.keys(d.entries).length===0)this.undoRefs(r,t),(d.error||[]).map(([b,E])=>{this.handleFailedEntryPreflight(b,E,A)});else{let g=b=>{this.channel.onError(()=>{this.joinCount===u&&b()})};A.initAdapterUpload(d,g,this.liveSocket)}})})}handleFailedEntryPreflight(e,t,n){if(n.isAutoUpload()){let r=n.entries().find(s=>s.ref===e.toString());r&&r.cancel()}else n.entries().map(r=>r.cancel());this.log("upload",()=>[`error for entry ${e}`,t])}dispatchUploads(e,t,n){let r=this.targetCtxElement(e)||this.el,s=H.findUploadInputs(r).filter(a=>a.name===t);s.length===0?Lt(`no live file inputs found matching the name "${t}"`):s.length>1?Lt(`duplicate live file inputs found matching the name "${t}"`):H.dispatchEvent(s[0],wl,{detail:{files:n}})}targetCtxElement(e){if(Li(e)){let[t]=H.findComponentNodeList(this.el,e);return t}else return e||null}pushFormRecovery(e,t,n,r){let s=this.binding("change"),a=t.getAttribute(this.binding("target"))||t,u=t.getAttribute(this.binding(Gu))||t.getAttribute(this.binding("change")),c=Array.from(e.elements).filter(A=>H.isFormInput(A)&&A.name&&!A.hasAttribute(s));if(c.length===0)return;c.forEach(A=>A.hasAttribute(Pi)&&it.clearFiles(A));let v=c.find(A=>A.type!=="hidden")||c[0],k=0;this.withinTargets(a,(A,N)=>{let y=this.targetComponentID(t,N);k++;let d=new CustomEvent("phx:form-recovery",{detail:{sourceElement:e}});Ne.exec(d,"change",u,this,v,["push",{_target:v.name,targetView:A,targetCtx:N,newCid:y,callback:()=>{k--,k===0&&r()}}])},n,n)}pushLinkPatch(e,t,n,r){let s=this.liveSocket.setPendingLink(t),a=e.isTrusted&&e.type!=="popstate",u=n?()=>this.putRef([{el:n,loading:a,lock:!0}],null,"click"):null,c=()=>this.liveSocket.redirect(window.location.href),v=t.startsWith("/")?`${location.protocol}//${location.host}${t}`:t;this.pushWithReply(u,"live_patch",{url:v}).then(({resp:k})=>{this.liveSocket.requestDOMUpdate(()=>{k.link_redirect?this.liveSocket.replaceMain(t,null,r,s):(this.liveSocket.commitPendingLink(s)&&(this.href=t),this.applyPendingUpdates(),r&&r(s))})},({error:k,timeout:A})=>c())}getFormsForRecovery(){if(this.joinCount===0)return{};let e=this.binding("change");return H.all(this.el,`form[${e}]`).filter(t=>t.id).filter(t=>t.elements.length>0).filter(t=>t.getAttribute(this.binding(Gu))!=="ignore").map(t=>t.cloneNode(!0)).reduce((t,n)=>(t[n.id]=n,t),{})}maybePushComponentsDestroyed(e){let t=e.filter(n=>H.findComponentNodeList(this.el,n).length===0);t.length>0&&(t.forEach(n=>this.rendered.resetRender(n)),this.pushWithReply(null,"cids_will_destroy",{cids:t}).then(()=>{this.liveSocket.requestDOMUpdate(()=>{let n=t.filter(r=>H.findComponentNodeList(this.el,r).length===0);n.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:n}).then(({resp:r})=>{this.rendered.pruneCIDs(r.cids)})})}))}ownsElement(e){let t=e.closest(En);return e.getAttribute(An)===this.id||t&&t.id===this.id||!t&&this.isDead}submitForm(e,t,n,r,s={}){H.putPrivate(e,Rr,!0),Array.from(e.elements).forEach(u=>H.putPrivate(u,Rr,!0)),this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,n,r,s,()=>{this.liveSocket.restorePreviouslyActiveFocus()})}binding(e){return this.liveSocket.binding(e)}};var Dl=class{constructor(i,e,t={}){if(this.unloaded=!1,!e||e.constructor.name==="Object")throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);this.socket=new e(i,t),this.bindingPrefix=t.bindingPrefix||oh,this.opts=t,this.params=Sr(t.params||{}),this.viewLogger=t.viewLogger,this.metadataCallbacks=t.metadata||{},this.defaults=Object.assign(xs(lh),t.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.outgoingMainEl=null,this.clickStartedAtTarget=null,this.linkRef=1,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=xs(window.location),this.hooks=t.hooks||{},this.uploaders=t.uploaders||{},this.loaderTimeout=t.loaderTimeout||sh,this.reloadWithJitterTimer=null,this.maxReloads=t.maxReloads||qc,this.reloadJitterMin=t.reloadJitterMin||Kc,this.reloadJitterMax=t.reloadJitterMax||Jc,this.failsafeJitter=t.failsafeJitter||Gc,this.localStorage=t.localStorage||window.localStorage,this.sessionStorage=t.sessionStorage||window.sessionStorage,this.boundTopLevelEvents=!1,this.boundEventNames=new Set,this.serverCloseRef=null,this.domCallbacks=Object.assign({jsQuerySelectorAll:null,onPatchStart:Sr(),onPatchEnd:Sr(),onNodeAdded:Sr(),onBeforeElUpdated:Sr()},t.dom||{}),this.transitions=new Wh,this.currentHistoryPosition=parseInt(this.sessionStorage.getItem(ks))||0,window.addEventListener("pagehide",n=>{this.unloaded=!0}),this.socket.onOpen(()=>{this.isUnloaded()&&window.location.reload()})}version(){return"1.0.3"}isProfileEnabled(){return this.sessionStorage.getItem($a)==="true"}isDebugEnabled(){return this.sessionStorage.getItem(_s)==="true"}isDebugDisabled(){return this.sessionStorage.getItem(_s)==="false"}enableDebug(){this.sessionStorage.setItem(_s,"true")}enableProfiling(){this.sessionStorage.setItem($a,"true")}disableDebug(){this.sessionStorage.setItem(_s,"false")}disableProfiling(){this.sessionStorage.removeItem($a)}enableLatencySim(i){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),this.sessionStorage.setItem(qa,i)}disableLatencySim(){this.sessionStorage.removeItem(qa)}getLatencySim(){let i=this.sessionStorage.getItem(qa);return i?parseInt(i):null}getSocket(){return this.socket}connect(){window.location.hostname==="localhost"&&!this.isDebugDisabled()&&this.enableDebug();let i=()=>{this.resetReloadStatus(),this.joinRootViews()?(this.bindTopLevelEvents(),this.socket.connect()):this.main?this.socket.connect():this.bindTopLevelEvents({dead:!0}),this.joinDeadView()};["complete","loaded","interactive"].indexOf(document.readyState)>=0?i():document.addEventListener("DOMContentLoaded",()=>i())}disconnect(i){clearTimeout(this.reloadWithJitterTimer),this.serverCloseRef&&(this.socket.off(this.serverCloseRef),this.serverCloseRef=null),this.socket.disconnect(i)}replaceTransport(i){clearTimeout(this.reloadWithJitterTimer),this.socket.replaceTransport(i),this.connect()}execJS(i,e,t=null){let n=new CustomEvent("phx:exec",{detail:{sourceElement:i}});this.owner(i,r=>Ne.exec(n,t,e,r,i))}execJSHookPush(i,e,t,n){this.withinOwners(i,r=>{let s=new CustomEvent("phx:exec",{detail:{sourceElement:i}});Ne.exec(s,"hook",e,r,i,["push",{data:t,callback:n}])})}unload(){this.unloaded||(this.main&&this.isConnected()&&this.log(this.main,"socket",()=>["disconnect for page nav"]),this.unloaded=!0,this.destroyAllViews(),this.disconnect())}triggerDOM(i,e){this.domCallbacks[i](...e)}time(i,e){if(!this.isProfileEnabled()||!console.time)return e();console.time(i);let t=e();return console.timeEnd(i),t}log(i,e,t){if(this.viewLogger){let[n,r]=t();this.viewLogger(i,e,n,r)}else if(this.isDebugEnabled()){let[n,r]=t();ph(i,e,n,r)}}requestDOMUpdate(i){this.transitions.after(i)}transition(i,e,t=function(){}){this.transitions.addTransition(i,e,t)}onChannel(i,e,t){i.on(e,n=>{let r=this.getLatencySim();r?setTimeout(()=>t(n),r):t(n)})}reloadWithJitter(i,e){clearTimeout(this.reloadWithJitterTimer),this.disconnect();let t=this.reloadJitterMin,n=this.reloadJitterMax,r=Math.floor(Math.random()*(n-t+1))+t,s=xt.updateLocal(this.localStorage,window.location.pathname,bl,0,a=>a+1);s>=this.maxReloads&&(r=this.failsafeJitter),this.reloadWithJitterTimer=setTimeout(()=>{i.isDestroyed()||i.isConnected()||(i.destroy(),e?e():this.log(i,"join",()=>[`encountered ${s} consecutive reloads`]),s>=this.maxReloads&&this.log(i,"join",()=>[`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]),this.hasPendingLink()?window.location=this.pendingLink:window.location.reload())},r)}getHookCallbacks(i){return i&&i.startsWith("Phoenix.")?kh[i.split(".")[1]]:this.hooks[i]}isUnloaded(){return this.unloaded}isConnected(){return this.socket.isConnected()}getBindingPrefix(){return this.bindingPrefix}binding(i){return`${this.getBindingPrefix()}${i}`}channel(i,e){return this.socket.channel(i,e)}joinDeadView(){let i=document.body;if(i&&!this.isPhxView(i)&&!this.isPhxView(document.firstElementChild)){let e=this.newRootView(i);e.setHref(this.getHref()),e.joinDead(),this.main||(this.main=e),window.requestAnimationFrame(()=>{e.execNewMounted(),this.maybeScroll(history.state?.scroll)})}}joinRootViews(){let i=!1;return H.all(document,`${En}:not([${An}])`,e=>{if(!this.getRootById(e.id)){let t=this.newRootView(e);H.isPhxSticky(e)||t.setHref(this.getHref()),t.join(),e.hasAttribute(io)&&(this.main=t)}i=!0}),i}redirect(i,e,t){t&&xt.setCookie(Yu,t,60),this.unload(),xt.redirect(i,e)}replaceMain(i,e,t=null,n=this.setPendingLink(i)){let r=this.currentLocation.href;this.outgoingMainEl=this.outgoingMainEl||this.main.el;let s=H.all(this.outgoingMainEl,`[${this.binding("remove")}]`),a=H.cloneNode(this.outgoingMainEl,"");this.main.showLoader(this.loaderTimeout),this.main.destroy(),this.main=this.newRootView(a,e,r),this.main.setRedirect(i),this.transitionRemoves(s,!0),this.main.join((u,c)=>{u===1&&this.commitPendingLink(n)&&this.requestDOMUpdate(()=>{s.forEach(v=>v.remove()),H.findPhxSticky(document).forEach(v=>a.appendChild(v)),this.outgoingMainEl.replaceWith(a),this.outgoingMainEl=null,t&&t(n),c()})})}transitionRemoves(i,e,t){let n=this.binding("remove");if(e){let s=H.findPhxSticky(document)||[];i=i.filter(a=>!H.isChildOfAny(a,s))}let r=s=>{s.preventDefault(),s.stopImmediatePropagation()};i.forEach(s=>{for(let a of this.boundEventNames)s.addEventListener(a,r,!0);this.execJS(s,s.getAttribute(n),"remove")}),this.requestDOMUpdate(()=>{i.forEach(s=>{for(let a of this.boundEventNames)s.removeEventListener(a,r,!0)}),t&&t()})}isPhxView(i){return i.getAttribute&&i.getAttribute(_i)!==null}newRootView(i,e,t){let n=new Uh(i,this,null,e,t);return this.roots[n.id]=n,n}owner(i,e){let t=Qi(i.closest(En),n=>this.getViewByEl(n))||this.main;return t&&e?e(t):t}withinOwners(i,e){this.owner(i,t=>e(t,i))}getViewByEl(i){let e=i.getAttribute(en);return Qi(this.getRootById(e),t=>t.getDescendentByEl(i))}getRootById(i){return this.roots[i]}destroyAllViews(){for(let i in this.roots)this.roots[i].destroy(),delete this.roots[i];this.main=null}destroyViewByEl(i){let e=this.getRootById(i.getAttribute(en));e&&e.id===i.id?(e.destroy(),delete this.roots[e.id]):e&&e.destroyDescendent(i.id)}getActiveElement(){return document.activeElement}dropActiveElement(i){this.prevActive&&i.ownsElement(this.prevActive)&&(this.prevActive=null)}restorePreviouslyActiveFocus(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}blurActiveElement(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}bindTopLevelEvents({dead:i}={}){this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,this.serverCloseRef=this.socket.onClose(e=>{if(e&&e.code===1e3&&this.main)return this.reloadWithJitter(this.main)}),document.body.addEventListener("click",function(){}),window.addEventListener("pageshow",e=>{e.persisted&&(this.getSocket().disconnect(),this.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())},!0),i||this.bindNav(),this.bindClicks(),i||this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(e,t,n,r,s,a)=>{let u=r.getAttribute(this.binding(nh)),c=e.key&&e.key.toLowerCase();if(u&&u.toLowerCase()!==c)return;let v={key:e.key,...this.eventMeta(t,e,r)};Ne.exec(e,t,s,n,r,["push",{data:v}])}),this.bind({blur:"focusout",focus:"focusin"},(e,t,n,r,s,a)=>{if(!a){let u={key:e.key,...this.eventMeta(t,e,r)};Ne.exec(e,t,s,n,r,["push",{data:u}])}}),this.bind({blur:"blur",focus:"focus"},(e,t,n,r,s,a)=>{if(a==="window"){let u=this.eventMeta(t,e,r);Ne.exec(e,t,s,n,r,["push",{data:u}])}}),this.on("dragover",e=>e.preventDefault()),this.on("drop",e=>{e.preventDefault();let t=Qi(Lr(e.target,this.binding(Uu)),s=>s.getAttribute(this.binding(Uu))),n=t&&document.getElementById(t),r=Array.from(e.dataTransfer.files||[]);!n||n.disabled||r.length===0||!(n.files instanceof FileList)||(it.trackFiles(n,r,e.dataTransfer),n.dispatchEvent(new Event("input",{bubbles:!0})))}),this.on(wl,e=>{let t=e.target;if(!H.isUploadInput(t))return;let n=Array.from(e.detail.files||[]).filter(r=>r instanceof File||r instanceof Blob);it.trackFiles(t,n),t.dispatchEvent(new Event("input",{bubbles:!0}))}))}eventMeta(i,e,t){let n=this.metadataCallbacks[i];return n?n(e,t):{}}setPendingLink(i){return this.linkRef++,this.pendingLink=i,this.resetReloadStatus(),this.linkRef}resetReloadStatus(){xt.deleteCookie(Yu)}commitPendingLink(i){return this.linkRef!==i?!1:(this.href=this.pendingLink,this.pendingLink=null,!0)}getHref(){return this.href}hasPendingLink(){return!!this.pendingLink}bind(i,e){for(let t in i){let n=i[t];this.on(n,r=>{let s=this.binding(t),a=this.binding(`window-${t}`),u=r.target.getAttribute&&r.target.getAttribute(s);u?this.debounce(r.target,r,n,()=>{this.withinOwners(r.target,c=>{e(r,t,c,r.target,u,null)})}):H.all(document,`[${a}]`,c=>{let v=c.getAttribute(a);this.debounce(c,r,n,()=>{this.withinOwners(c,k=>{e(r,t,k,c,v,"window")})})})})}}bindClicks(){this.on("mousedown",i=>this.clickStartedAtTarget=i.target),this.bindClick("click","click")}bindClick(i,e){let t=this.binding(e);window.addEventListener(i,n=>{let r=null;n.detail===0&&(this.clickStartedAtTarget=n.target);let s=this.clickStartedAtTarget||n.target;r=Lr(n.target,t),this.dispatchClickAway(n,s),this.clickStartedAtTarget=null;let a=r&&r.getAttribute(t);if(!a){H.isNewPageClick(n,window.location)&&this.unload();return}r.getAttribute("href")==="#"&&n.preventDefault(),!r.hasAttribute(Gt)&&this.debounce(r,n,"click",()=>{this.withinOwners(r,u=>{Ne.exec(n,"click",a,u,r,["push",{data:this.eventMeta("click",n,r)}])})})},!1)}dispatchClickAway(i,e){let t=this.binding("click-away");H.all(document,`[${t}]`,n=>{n.isSameNode(e)||n.contains(e)||this.withinOwners(n,r=>{let s=n.getAttribute(t);Ne.isVisible(n)&&Ne.isInViewport(n)&&Ne.exec(i,"click",s,r,n,["push",{data:this.eventMeta("click",i,i.target)}])})})}bindNav(){if(!xt.canPushState())return;history.scrollRestoration&&(history.scrollRestoration="manual");let i=null;window.addEventListener("scroll",e=>{clearTimeout(i),i=setTimeout(()=>{xt.updateCurrentState(t=>Object.assign(t,{scroll:window.scrollY}))},100)}),window.addEventListener("popstate",e=>{if(!this.registerNewLocation(window.location))return;let{type:t,backType:n,id:r,scroll:s,position:a}=e.state||{},u=window.location.href,c=a>this.currentHistoryPosition;t=c?t:n||t,this.currentHistoryPosition=a||0,this.sessionStorage.setItem(ks,this.currentHistoryPosition.toString()),H.dispatchEvent(window,"phx:navigate",{detail:{href:u,patch:t==="patch",pop:!0,direction:c?"forward":"backward"}}),this.requestDOMUpdate(()=>{let v=()=>{this.maybeScroll(s)};this.main.isConnected()&&t==="patch"&&r===this.main.id?this.main.pushLinkPatch(e,u,null,v):this.replaceMain(u,null,v)})},!1),window.addEventListener("click",e=>{let t=Lr(e.target,Ua),n=t&&t.getAttribute(Ua);if(!n||!this.isConnected()||!this.main||H.wantsNewTab(e))return;let r=t.href instanceof SVGAnimatedString?t.href.baseVal:t.href,s=t.getAttribute(Yc);e.preventDefault(),e.stopImmediatePropagation(),this.pendingLink!==r&&this.requestDOMUpdate(()=>{if(n==="patch")this.pushHistoryPatch(e,r,s,t);else if(n==="redirect")this.historyRedirect(e,r,s,null,t);else throw new Error(`expected ${Ua} to be "patch" or "redirect", got: ${n}`);let a=t.getAttribute(this.binding("click"));a&&this.requestDOMUpdate(()=>this.execJS(t,a,"click"))})},!1)}maybeScroll(i){typeof i=="number"&&requestAnimationFrame(()=>{window.scrollTo(0,i)})}dispatchEvent(i,e={}){H.dispatchEvent(window,`phx:${i}`,{detail:e})}dispatchEvents(i){i.forEach(([e,t])=>this.dispatchEvent(e,t))}withPageLoading(i,e){H.dispatchEvent(window,"phx:page-loading-start",{detail:i});let t=()=>H.dispatchEvent(window,"phx:page-loading-stop",{detail:i});return e?e(t):t}pushHistoryPatch(i,e,t,n){if(!this.isConnected()||!this.main.isMain())return xt.redirect(e);this.withPageLoading({to:e,kind:"patch"},r=>{this.main.pushLinkPatch(i,e,n,s=>{this.historyPatch(e,t,s),r()})})}historyPatch(i,e,t=this.setPendingLink(i)){this.commitPendingLink(t)&&(this.currentHistoryPosition++,this.sessionStorage.setItem(ks,this.currentHistoryPosition.toString()),xt.updateCurrentState(n=>({...n,backType:"patch"})),xt.pushState(e,{type:"patch",id:this.main.id,position:this.currentHistoryPosition},i),H.dispatchEvent(window,"phx:navigate",{detail:{patch:!0,href:i,pop:!1,direction:"forward"}}),this.registerNewLocation(window.location))}historyRedirect(i,e,t,n,r){if(r&&i.isTrusted&&i.type!=="popstate"&&r.classList.add("phx-click-loading"),!this.isConnected()||!this.main.isMain())return xt.redirect(e,n);if(/^\/$|^\/[^\/]+.*$/.test(e)){let{protocol:a,host:u}=window.location;e=`${a}//${u}${e}`}let s=window.scrollY;this.withPageLoading({to:e,kind:"redirect"},a=>{this.replaceMain(e,n,u=>{u===this.linkRef&&(this.currentHistoryPosition++,this.sessionStorage.setItem(ks,this.currentHistoryPosition.toString()),xt.updateCurrentState(c=>({...c,backType:"redirect"})),xt.pushState(t,{type:"redirect",id:this.main.id,scroll:s,position:this.currentHistoryPosition},e),H.dispatchEvent(window,"phx:navigate",{detail:{href:e,patch:!1,pop:!1,direction:"forward"}}),this.registerNewLocation(window.location)),a()})})}registerNewLocation(i){let{pathname:e,search:t}=this.currentLocation;return e+t===i.pathname+i.search?!1:(this.currentLocation=xs(i),!0)}bindForms(){let i=0,e=!1;this.on("submit",t=>{let n=t.target.getAttribute(this.binding("submit")),r=t.target.getAttribute(this.binding("change"));!e&&r&&!n&&(e=!0,t.preventDefault(),this.withinOwners(t.target,s=>{s.disableForm(t.target),window.requestAnimationFrame(()=>{H.isUnloadableFormSubmit(t)&&this.unload(),t.target.submit()})}))}),this.on("submit",t=>{let n=t.target.getAttribute(this.binding("submit"));if(!n){H.isUnloadableFormSubmit(t)&&this.unload();return}t.preventDefault(),t.target.disabled=!0,this.withinOwners(t.target,r=>{Ne.exec(t,"submit",n,r,t.target,["push",{submitter:t.submitter}])})});for(let t of["change","input"])this.on(t,n=>{if(n instanceof CustomEvent&&n.target.form===void 0){if(n.detail&&n.detail.dispatcher)throw new Error(`dispatching a custom ${t} event is only supported on input elements inside a form`);return}let r=this.binding("change"),s=n.target;if(n.isComposing){let y=`composition-listener-${t}`;H.private(s,y)||(H.putPrivate(s,y,!0),s.addEventListener("compositionend",()=>{s.dispatchEvent(new Event(t,{bubbles:!0})),H.deletePrivate(s,y)},{once:!0}));return}let a=s.getAttribute(r),u=s.form&&s.form.getAttribute(r),c=a||u;if(!c||s.type==="number"&&s.validity&&s.validity.badInput)return;let v=a?s:s.form,k=i;i++;let{at:A,type:N}=H.private(s,"prev-iteration")||{};A===k-1&&t==="change"&&N==="input"||(H.putPrivate(s,"prev-iteration",{at:k,type:t}),this.debounce(s,n,t,()=>{this.withinOwners(v,y=>{H.putPrivate(s,Ls,!0),Ne.exec(n,"change",c,y,s,["push",{_target:n.target.name,dispatcher:v}])})}))});this.on("reset",t=>{let n=t.target;H.resetForm(n);let r=Array.from(n.elements).find(s=>s.type==="reset");r&&window.requestAnimationFrame(()=>{r.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!1}))})})}debounce(i,e,t,n){if(t==="blur"||t==="focusout")return n();let r=this.binding(th),s=this.binding(ih),a=this.defaults.debounce.toString(),u=this.defaults.throttle.toString();this.withinOwners(i,c=>{let v=()=>!c.isDestroyed()&&document.body.contains(i);H.debounce(i,e,r,a,s,u,v,()=>{n()})})}silenceEvents(i){this.silenced=!0,i(),this.silenced=!1}on(i,e){this.boundEventNames.add(i),window.addEventListener(i,t=>{this.silenced||e(t)})}jsQuerySelectorAll(i,e,t){let n=this.domCallbacks.jsQuerySelectorAll;return n?n(i,e,t):t()}},Wh=class{constructor(){this.transitions=new Set,this.pendingOps=[]}reset(){this.transitions.forEach(i=>{clearTimeout(i),this.transitions.delete(i)}),this.flushPendingOps()}after(i){this.size()===0?i():this.pushPendingOp(i)}addTransition(i,e,t){e();let n=setTimeout(()=>{this.transitions.delete(n),t(),this.flushPendingOps()},i);this.transitions.add(n)}pushPendingOp(i){this.pendingOps.push(i)}size(){return this.transitions.size}flushPendingOps(){if(this.size()>0)return;let i=this.pendingOps.shift();i&&(i(),this.flushPendingOps())}};var Pa=za(xl());function Ll(i,e){var t=Object.keys(i);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(i);e&&(n=n.filter(function(r){return Object.getOwnPropertyDescriptor(i,r).enumerable})),t.push.apply(t,n)}return t}function Ai(i){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?Ll(Object(t),!0).forEach(function(n){$h(i,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(t)):Ll(Object(t)).forEach(function(n){Object.defineProperty(i,n,Object.getOwnPropertyDescriptor(t,n))})}return i}function Fs(i){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Fs=function(e){return typeof e}:Fs=function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fs(i)}function $h(i,e,t){return e in i?Object.defineProperty(i,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):i[e]=t,i}function Oi(){return Oi=Object.assign||function(i){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(i[n]=t[n])}return i},Oi.apply(this,arguments)}function qh(i,e){if(i==null)return{};var t={},n=Object.keys(i),r,s;for(s=0;s<n.length;s++)r=n[s],!(e.indexOf(r)>=0)&&(t[r]=i[r]);return t}function Kh(i,e){if(i==null)return{};var t=qh(i,e),n,r;if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(i);for(r=0;r<s.length;r++)n=s[r],!(e.indexOf(n)>=0)&&Object.prototype.propertyIsEnumerable.call(i,n)&&(t[n]=i[n])}return t}var Jh="1.15.4";function Ii(i){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(i)}var Mi=Ii(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),Hr=Ii(/Edge/i),Rl=Ii(/firefox/i),Mr=Ii(/safari/i)&&!Ii(/chrome/i)&&!Ii(/android/i),jl=Ii(/iP(ad|od|hone)/i),Hl=Ii(/chrome/i)&&Ii(/android/i),zl={capture:!1,passive:!1};function Se(i,e,t){i.addEventListener(e,t,!Mi&&zl)}function Ae(i,e,t){i.removeEventListener(e,t,!Mi&&zl)}function Us(i,e){if(e){if(e[0]===">"&&(e=e.substring(1)),i)try{if(i.matches)return i.matches(e);if(i.msMatchesSelector)return i.msMatchesSelector(e);if(i.webkitMatchesSelector)return i.webkitMatchesSelector(e)}catch{return!1}return!1}}function Vl(i){return i.host&&i!==document&&i.host.nodeType?i.host:i.parentNode}function oi(i,e,t,n){if(i){t=t||document;do{if(e!=null&&(e[0]===">"?i.parentNode===t&&Us(i,e):Us(i,e))||n&&i===t)return i;if(i===t)break}while(i=Vl(i))}return null}var Pl=/\s+/g;function zt(i,e,t){if(i&&e)if(i.classList)i.classList[t?"add":"remove"](e);else{var n=(" "+i.className+" ").replace(Pl," ").replace(" "+e+" "," ");i.className=(n+(t?" "+e:"")).replace(Pl," ")}}function le(i,e,t){var n=i&&i.style;if(n){if(t===void 0)return document.defaultView&&document.defaultView.getComputedStyle?t=document.defaultView.getComputedStyle(i,""):i.currentStyle&&(t=i.currentStyle),e===void 0?t:t[e];!(e in n)&&e.indexOf("webkit")===-1&&(e="-webkit-"+e),n[e]=t+(typeof t=="string"?"":"px")}}function rr(i,e){var t="";if(typeof i=="string")t=i;else do{var n=le(i,"transform");n&&n!=="none"&&(t=n+" "+t)}while(!e&&(i=i.parentNode));var r=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return r&&new r(t)}function Ul(i,e,t){if(i){var n=i.getElementsByTagName(e),r=0,s=n.length;if(t)for(;r<s;r++)t(n[r],r);return n}return[]}function ki(){var i=document.scrollingElement;return i||document.documentElement}function Qe(i,e,t,n,r){if(!(!i.getBoundingClientRect&&i!==window)){var s,a,u,c,v,k,A;if(i!==window&&i.parentNode&&i!==ki()?(s=i.getBoundingClientRect(),a=s.top,u=s.left,c=s.bottom,v=s.right,k=s.height,A=s.width):(a=0,u=0,c=window.innerHeight,v=window.innerWidth,k=window.innerHeight,A=window.innerWidth),(e||t)&&i!==window&&(r=r||i.parentNode,!Mi))do if(r&&r.getBoundingClientRect&&(le(r,"transform")!=="none"||t&&le(r,"position")!=="static")){var N=r.getBoundingClientRect();a-=N.top+parseInt(le(r,"border-top-width")),u-=N.left+parseInt(le(r,"border-left-width")),c=a+s.height,v=u+s.width;break}while(r=r.parentNode);if(n&&i!==window){var y=rr(r||i),d=y&&y.a,g=y&&y.d;y&&(a/=g,u/=d,A/=d,k/=g,c=a+k,v=u+A)}return{top:a,left:u,bottom:c,right:v,width:A,height:k}}}function Il(i,e,t){for(var n=rn(i,!0),r=Qe(i)[e];n;){var s=Qe(n)[t],a=void 0;if(t==="top"||t==="left"?a=r>=s:a=r<=s,!a)return n;if(n===ki())break;n=rn(n,!1)}return!1}function sr(i,e,t,n){for(var r=0,s=0,a=i.children;s<a.length;){if(a[s].style.display!=="none"&&a[s]!==de.ghost&&(n||a[s]!==de.dragged)&&oi(a[s],t.draggable,i,!1)){if(r===e)return a[s];r++}s++}return null}function yo(i,e){for(var t=i.lastElementChild;t&&(t===de.ghost||le(t,"display")==="none"||e&&!Us(t,e));)t=t.previousElementSibling;return t||null}function Xt(i,e){var t=0;if(!i||!i.parentNode)return-1;for(;i=i.previousElementSibling;)i.nodeName.toUpperCase()!=="TEMPLATE"&&i!==de.clone&&(!e||Us(i,e))&&t++;return t}function Ol(i){var e=0,t=0,n=ki();if(i)do{var r=rr(i),s=r.a,a=r.d;e+=i.scrollLeft*s,t+=i.scrollTop*a}while(i!==n&&(i=i.parentNode));return[e,t]}function Gh(i,e){for(var t in i)if(i.hasOwnProperty(t)){for(var n in e)if(e.hasOwnProperty(n)&&e[n]===i[t][n])return Number(t)}return-1}function rn(i,e){if(!i||!i.getBoundingClientRect)return ki();var t=i,n=!1;do if(t.clientWidth<t.scrollWidth||t.clientHeight<t.scrollHeight){var r=le(t);if(t.clientWidth<t.scrollWidth&&(r.overflowX=="auto"||r.overflowX=="scroll")||t.clientHeight<t.scrollHeight&&(r.overflowY=="auto"||r.overflowY=="scroll")){if(!t.getBoundingClientRect||t===document.body)return ki();if(n||e)return t;n=!0}}while(t=t.parentNode);return ki()}function Xh(i,e){if(i&&e)for(var t in e)e.hasOwnProperty(t)&&(i[t]=e[t]);return i}function so(i,e){return Math.round(i.top)===Math.round(e.top)&&Math.round(i.left)===Math.round(e.left)&&Math.round(i.height)===Math.round(e.height)&&Math.round(i.width)===Math.round(e.width)}var Nr;function Wl(i,e){return function(){if(!Nr){var t=arguments,n=this;t.length===1?i.call(n,t[0]):i.apply(n,t),Nr=setTimeout(function(){Nr=void 0},e)}}}function Yh(){clearTimeout(Nr),Nr=void 0}function $l(i,e,t){i.scrollLeft+=e,i.scrollTop+=t}function ql(i){var e=window.Polymer,t=window.jQuery||window.Zepto;return e&&e.dom?e.dom(i).cloneNode(!0):t?t(i).clone(!0)[0]:i.cloneNode(!0)}function Kl(i,e,t){var n={};return Array.from(i.children).forEach(function(r){var s,a,u,c;if(!(!oi(r,e.draggable,i,!1)||r.animated||r===t)){var v=Qe(r);n.left=Math.min((s=n.left)!==null&&s!==void 0?s:1/0,v.left),n.top=Math.min((a=n.top)!==null&&a!==void 0?a:1/0,v.top),n.right=Math.max((u=n.right)!==null&&u!==void 0?u:-1/0,v.right),n.bottom=Math.max((c=n.bottom)!==null&&c!==void 0?c:-1/0,v.bottom)}}),n.width=n.right-n.left,n.height=n.bottom-n.top,n.x=n.left,n.y=n.top,n}var It="Sortable"+new Date().getTime();function Zh(){var i=[],e;return{captureAnimationState:function(){if(i=[],!!this.options.animation){var n=[].slice.call(this.el.children);n.forEach(function(r){if(!(le(r,"display")==="none"||r===de.ghost)){i.push({target:r,rect:Qe(r)});var s=Ai({},i[i.length-1].rect);if(r.thisAnimationDuration){var a=rr(r,!0);a&&(s.top-=a.f,s.left-=a.e)}r.fromRect=s}})}},addAnimationState:function(n){i.push(n)},removeAnimationState:function(n){i.splice(Gh(i,{target:n}),1)},animateAll:function(n){var r=this;if(!this.options.animation){clearTimeout(e),typeof n=="function"&&n();return}var s=!1,a=0;i.forEach(function(u){var c=0,v=u.target,k=v.fromRect,A=Qe(v),N=v.prevFromRect,y=v.prevToRect,d=u.rect,g=rr(v,!0);g&&(A.top-=g.f,A.left-=g.e),v.toRect=A,v.thisAnimationDuration&&so(N,A)&&!so(k,A)&&(d.top-A.top)/(d.left-A.left)===(k.top-A.top)/(k.left-A.left)&&(c=ef(d,N,y,r.options)),so(A,k)||(v.prevFromRect=k,v.prevToRect=A,c||(c=r.options.animation),r.animate(v,d,A,c)),c&&(s=!0,a=Math.max(a,c),clearTimeout(v.animationResetTimer),v.animationResetTimer=setTimeout(function(){v.animationTime=0,v.prevFromRect=null,v.fromRect=null,v.prevToRect=null,v.thisAnimationDuration=null},c),v.thisAnimationDuration=c)}),clearTimeout(e),s?e=setTimeout(function(){typeof n=="function"&&n()},a):typeof n=="function"&&n(),i=[]},animate:function(n,r,s,a){if(a){le(n,"transition",""),le(n,"transform","");var u=rr(this.el),c=u&&u.a,v=u&&u.d,k=(r.left-s.left)/(c||1),A=(r.top-s.top)/(v||1);n.animatingX=!!k,n.animatingY=!!A,le(n,"transform","translate3d("+k+"px,"+A+"px,0)"),this.forRepaintDummy=Qh(n),le(n,"transition","transform "+a+"ms"+(this.options.easing?" "+this.options.easing:"")),le(n,"transform","translate3d(0,0,0)"),typeof n.animated=="number"&&clearTimeout(n.animated),n.animated=setTimeout(function(){le(n,"transition",""),le(n,"transform",""),n.animated=!1,n.animatingX=!1,n.animatingY=!1},a)}}}}function Qh(i){return i.offsetWidth}function ef(i,e,t,n){return Math.sqrt(Math.pow(e.top-i.top,2)+Math.pow(e.left-i.left,2))/Math.sqrt(Math.pow(e.top-t.top,2)+Math.pow(e.left-t.left,2))*n.animation}var er=[],ao={initializeByDefault:!0},zr={mount:function(e){for(var t in ao)ao.hasOwnProperty(t)&&!(t in e)&&(e[t]=ao[t]);er.forEach(function(n){if(n.pluginName===e.pluginName)throw"Sortable: Cannot mount plugin ".concat(e.pluginName," more than once")}),er.push(e)},pluginEvent:function(e,t,n){var r=this;this.eventCanceled=!1,n.cancel=function(){r.eventCanceled=!0};var s=e+"Global";er.forEach(function(a){t[a.pluginName]&&(t[a.pluginName][s]&&t[a.pluginName][s](Ai({sortable:t},n)),t.options[a.pluginName]&&t[a.pluginName][e]&&t[a.pluginName][e](Ai({sortable:t},n)))})},initializePlugins:function(e,t,n,r){er.forEach(function(u){var c=u.pluginName;if(!(!e.options[c]&&!u.initializeByDefault)){var v=new u(e,t,e.options);v.sortable=e,v.options=e.options,e[c]=v,Oi(n,v.defaults)}});for(var s in e.options)if(e.options.hasOwnProperty(s)){var a=this.modifyOption(e,s,e.options[s]);typeof a<"u"&&(e.options[s]=a)}},getEventProperties:function(e,t){var n={};return er.forEach(function(r){typeof r.eventProperties=="function"&&Oi(n,r.eventProperties.call(t[r.pluginName],e))}),n},modifyOption:function(e,t,n){var r;return er.forEach(function(s){e[s.pluginName]&&s.optionListeners&&typeof s.optionListeners[t]=="function"&&(r=s.optionListeners[t].call(e[s.pluginName],n))}),r}};function tf(i){var e=i.sortable,t=i.rootEl,n=i.name,r=i.targetEl,s=i.cloneEl,a=i.toEl,u=i.fromEl,c=i.oldIndex,v=i.newIndex,k=i.oldDraggableIndex,A=i.newDraggableIndex,N=i.originalEvent,y=i.putSortable,d=i.extraEventProperties;if(e=e||t&&t[It],!!e){var g,b=e.options,E="on"+n.charAt(0).toUpperCase()+n.substr(1);window.CustomEvent&&!Mi&&!Hr?g=new CustomEvent(n,{bubbles:!0,cancelable:!0}):(g=document.createEvent("Event"),g.initEvent(n,!0,!0)),g.to=a||t,g.from=u||t,g.item=r||t,g.clone=s,g.oldIndex=c,g.newIndex=v,g.oldDraggableIndex=k,g.newDraggableIndex=A,g.originalEvent=N,g.pullMode=y?y.lastPutMode:void 0;var P=Ai(Ai({},d),zr.getEventProperties(n,e));for(var o in P)g[o]=P[o];t&&t.dispatchEvent(g),b[E]&&b[E].call(e,g)}}var nf=["evt"],Pt=function(e,t){var n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},r=n.evt,s=Kh(n,nf);zr.pluginEvent.bind(de)(e,t,Ai({dragEl:Z,parentEl:Je,ghostEl:ce,rootEl:Ve,nextEl:Dn,lastDownEl:js,cloneEl:$e,cloneHidden:nn,dragStarted:Pr,putSortable:rt,activeSortable:de.active,originalEvent:r,oldIndex:nr,oldDraggableIndex:Br,newIndex:Vt,newDraggableIndex:tn,hideGhostForTarget:Yl,unhideGhostForTarget:Zl,cloneNowHidden:function(){nn=!0},cloneNowShown:function(){nn=!1},dispatchSortableEvent:function(u){vt({sortable:t,name:u,originalEvent:r})}},s))};function vt(i){tf(Ai({putSortable:rt,cloneEl:$e,targetEl:Z,rootEl:Ve,oldIndex:nr,oldDraggableIndex:Br,newIndex:Vt,newDraggableIndex:tn},i))}var Z,Je,ce,Ve,Dn,js,$e,nn,nr,Vt,Br,tn,Os,rt,ir=!1,Ws=!1,$s=[],Cn,ai,oo,uo,Ml,Nl,Pr,tr,Fr,jr=!1,Ms=!1,Hs,dt,lo=[],go=!1,qs=[],Js=typeof document<"u",Ns=jl,Bl=Hr||Mi?"cssFloat":"float",rf=Js&&!Hl&&!jl&&"draggable"in document.createElement("div"),Jl=function(){if(Js){if(Mi)return!1;var i=document.createElement("x");return i.style.cssText="pointer-events:auto",i.style.pointerEvents==="auto"}}(),Gl=function(e,t){var n=le(e),r=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),s=sr(e,0,t),a=sr(e,1,t),u=s&&le(s),c=a&&le(a),v=u&&parseInt(u.marginLeft)+parseInt(u.marginRight)+Qe(s).width,k=c&&parseInt(c.marginLeft)+parseInt(c.marginRight)+Qe(a).width;if(n.display==="flex")return n.flexDirection==="column"||n.flexDirection==="column-reverse"?"vertical":"horizontal";if(n.display==="grid")return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(s&&u.float&&u.float!=="none"){var A=u.float==="left"?"left":"right";return a&&(c.clear==="both"||c.clear===A)?"vertical":"horizontal"}return s&&(u.display==="block"||u.display==="flex"||u.display==="table"||u.display==="grid"||v>=r&&n[Bl]==="none"||a&&n[Bl]==="none"&&v+k>r)?"vertical":"horizontal"},sf=function(e,t,n){var r=n?e.left:e.top,s=n?e.right:e.bottom,a=n?e.width:e.height,u=n?t.left:t.top,c=n?t.right:t.bottom,v=n?t.width:t.height;return r===u||s===c||r+a/2===u+v/2},af=function(e,t){var n;return $s.some(function(r){var s=r[It].options.emptyInsertThreshold;if(!(!s||yo(r))){var a=Qe(r),u=e>=a.left-s&&e<=a.right+s,c=t>=a.top-s&&t<=a.bottom+s;if(u&&c)return n=r}}),n},Xl=function(e){function t(s,a){return function(u,c,v,k){var A=u.options.group.name&&c.options.group.name&&u.options.group.name===c.options.group.name;if(s==null&&(a||A))return!0;if(s==null||s===!1)return!1;if(a&&s==="clone")return s;if(typeof s=="function")return t(s(u,c,v,k),a)(u,c,v,k);var N=(a?u:c).options.group.name;return s===!0||typeof s=="string"&&s===N||s.join&&s.indexOf(N)>-1}}var n={},r=e.group;(!r||Fs(r)!="object")&&(r={name:r}),n.name=r.name,n.checkPull=t(r.pull,!0),n.checkPut=t(r.put),n.revertClone=r.revertClone,e.group=n},Yl=function(){!Jl&&ce&&le(ce,"display","none")},Zl=function(){!Jl&&ce&&le(ce,"display","")};Js&&!Hl&&document.addEventListener("click",function(i){if(Ws)return i.preventDefault(),i.stopPropagation&&i.stopPropagation(),i.stopImmediatePropagation&&i.stopImmediatePropagation(),Ws=!1,!1},!0);var Sn=function(e){if(Z){e=e.touches?e.touches[0]:e;var t=af(e.clientX,e.clientY);if(t){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);n.target=n.rootEl=t,n.preventDefault=void 0,n.stopPropagation=void 0,t[It]._onDragOver(n)}}},of=function(e){Z&&Z.parentNode[It]._isOutsideThisEl(e.target)};function de(i,e){if(!(i&&i.nodeType&&i.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(i));this.el=i,this.options=e=Oi({},e),i[It]=this;var t={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(i.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Gl(i,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(a,u){a.setData("Text",u.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:de.supportPointer!==!1&&"PointerEvent"in window&&!Mr,emptyInsertThreshold:5};zr.initializePlugins(this,i,t);for(var n in t)!(n in e)&&(e[n]=t[n]);Xl(e);for(var r in this)r.charAt(0)==="_"&&typeof this[r]=="function"&&(this[r]=this[r].bind(this));this.nativeDraggable=e.forceFallback?!1:rf,this.nativeDraggable&&(this.options.touchStartThreshold=1),e.supportPointer?Se(i,"pointerdown",this._onTapStart):(Se(i,"mousedown",this._onTapStart),Se(i,"touchstart",this._onTapStart)),this.nativeDraggable&&(Se(i,"dragover",this),Se(i,"dragenter",this)),$s.push(this.el),e.store&&e.store.get&&this.sort(e.store.get(this)||[]),Oi(this,Zh())}de.prototype={constructor:de,_isOutsideThisEl:function(e){!this.el.contains(e)&&e!==this.el&&(tr=null)},_getDirection:function(e,t){return typeof this.options.direction=="function"?this.options.direction.call(this,e,t,Z):this.options.direction},_onTapStart:function(e){if(e.cancelable){var t=this,n=this.el,r=this.options,s=r.preventOnFilter,a=e.type,u=e.touches&&e.touches[0]||e.pointerType&&e.pointerType==="touch"&&e,c=(u||e).target,v=e.target.shadowRoot&&(e.path&&e.path[0]||e.composedPath&&e.composedPath()[0])||c,k=r.filter;if(gf(n),!Z&&!(/mousedown|pointerdown/.test(a)&&e.button!==0||r.disabled)&&!v.isContentEditable&&!(!this.nativeDraggable&&Mr&&c&&c.tagName.toUpperCase()==="SELECT")&&(c=oi(c,r.draggable,n,!1),!(c&&c.animated)&&js!==c)){if(nr=Xt(c),Br=Xt(c,r.draggable),typeof k=="function"){if(k.call(this,e,c,this)){vt({sortable:t,rootEl:v,name:"filter",targetEl:c,toEl:n,fromEl:n}),Pt("filter",t,{evt:e}),s&&e.preventDefault();return}}else if(k&&(k=k.split(",").some(function(A){if(A=oi(v,A.trim(),n,!1),A)return vt({sortable:t,rootEl:A,name:"filter",targetEl:c,fromEl:n,toEl:n}),Pt("filter",t,{evt:e}),!0}),k)){s&&e.preventDefault();return}r.handle&&!oi(v,r.handle,n,!1)||this._prepareDragStart(e,u,c)}}},_prepareDragStart:function(e,t,n){var r=this,s=r.el,a=r.options,u=s.ownerDocument,c;if(n&&!Z&&n.parentNode===s){var v=Qe(n);if(Ve=s,Z=n,Je=Z.parentNode,Dn=Z.nextSibling,js=n,Os=a.group,de.dragged=Z,Cn={target:Z,clientX:(t||e).clientX,clientY:(t||e).clientY},Ml=Cn.clientX-v.left,Nl=Cn.clientY-v.top,this._lastX=(t||e).clientX,this._lastY=(t||e).clientY,Z.style["will-change"]="all",c=function(){if(Pt("delayEnded",r,{evt:e}),de.eventCanceled){r._onDrop();return}r._disableDelayedDragEvents(),!Rl&&r.nativeDraggable&&(Z.draggable=!0),r._triggerDragStart(e,t),vt({sortable:r,name:"choose",originalEvent:e}),zt(Z,a.chosenClass,!0)},a.ignore.split(",").forEach(function(k){Ul(Z,k.trim(),co)}),Se(u,"dragover",Sn),Se(u,"mousemove",Sn),Se(u,"touchmove",Sn),a.supportPointer?(Se(u,"pointerup",r._onDrop),!this.nativeDraggable&&Se(u,"pointercancel",r._onDrop)):(Se(u,"mouseup",r._onDrop),Se(u,"touchend",r._onDrop),Se(u,"touchcancel",r._onDrop)),Rl&&this.nativeDraggable&&(this.options.touchStartThreshold=4,Z.draggable=!0),Pt("delayStart",this,{evt:e}),a.delay&&(!a.delayOnTouchOnly||t)&&(!this.nativeDraggable||!(Hr||Mi))){if(de.eventCanceled){this._onDrop();return}a.supportPointer?(Se(u,"pointerup",r._disableDelayedDrag),Se(u,"pointercancel",r._disableDelayedDrag)):(Se(u,"mouseup",r._disableDelayedDrag),Se(u,"touchend",r._disableDelayedDrag),Se(u,"touchcancel",r._disableDelayedDrag)),Se(u,"mousemove",r._delayedDragTouchMoveHandler),Se(u,"touchmove",r._delayedDragTouchMoveHandler),a.supportPointer&&Se(u,"pointermove",r._delayedDragTouchMoveHandler),r._dragStartTimer=setTimeout(c,a.delay)}else c()}},_delayedDragTouchMoveHandler:function(e){var t=e.touches?e.touches[0]:e;Math.max(Math.abs(t.clientX-this._lastX),Math.abs(t.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){Z&&co(Z),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var e=this.el.ownerDocument;Ae(e,"mouseup",this._disableDelayedDrag),Ae(e,"touchend",this._disableDelayedDrag),Ae(e,"touchcancel",this._disableDelayedDrag),Ae(e,"pointerup",this._disableDelayedDrag),Ae(e,"pointercancel",this._disableDelayedDrag),Ae(e,"mousemove",this._delayedDragTouchMoveHandler),Ae(e,"touchmove",this._delayedDragTouchMoveHandler),Ae(e,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(e,t){t=t||e.pointerType=="touch"&&e,!this.nativeDraggable||t?this.options.supportPointer?Se(document,"pointermove",this._onTouchMove):t?Se(document,"touchmove",this._onTouchMove):Se(document,"mousemove",this._onTouchMove):(Se(Z,"dragend",this),Se(Ve,"dragstart",this._onDragStart));try{zs(function(){document.selection?document.selection.empty():window.getSelection().removeAllRanges()})}catch{}},_dragStarted:function(e,t){if(ir=!1,Ve&&Z){Pt("dragStarted",this,{evt:t}),this.nativeDraggable&&Se(document,"dragover",of);var n=this.options;!e&&zt(Z,n.dragClass,!1),zt(Z,n.ghostClass,!0),de.active=this,e&&this._appendGhost(),vt({sortable:this,name:"start",originalEvent:t})}else this._nulling()},_emulateDragOver:function(){if(ai){this._lastX=ai.clientX,this._lastY=ai.clientY,Yl();for(var e=document.elementFromPoint(ai.clientX,ai.clientY),t=e;e&&e.shadowRoot&&(e=e.shadowRoot.elementFromPoint(ai.clientX,ai.clientY),e!==t);)t=e;if(Z.parentNode[It]._isOutsideThisEl(e),t)do{if(t[It]){var n=void 0;if(n=t[It]._onDragOver({clientX:ai.clientX,clientY:ai.clientY,target:e,rootEl:t}),n&&!this.options.dragoverBubble)break}e=t}while(t=Vl(t));Zl()}},_onTouchMove:function(e){if(Cn){var t=this.options,n=t.fallbackTolerance,r=t.fallbackOffset,s=e.touches?e.touches[0]:e,a=ce&&rr(ce,!0),u=ce&&a&&a.a,c=ce&&a&&a.d,v=Ns&&dt&&Ol(dt),k=(s.clientX-Cn.clientX+r.x)/(u||1)+(v?v[0]-lo[0]:0)/(u||1),A=(s.clientY-Cn.clientY+r.y)/(c||1)+(v?v[1]-lo[1]:0)/(c||1);if(!de.active&&!ir){if(n&&Math.max(Math.abs(s.clientX-this._lastX),Math.abs(s.clientY-this._lastY))<n)return;this._onDragStart(e,!0)}if(ce){a?(a.e+=k-(oo||0),a.f+=A-(uo||0)):a={a:1,b:0,c:0,d:1,e:k,f:A};var N="matrix(".concat(a.a,",").concat(a.b,",").concat(a.c,",").concat(a.d,",").concat(a.e,",").concat(a.f,")");le(ce,"webkitTransform",N),le(ce,"mozTransform",N),le(ce,"msTransform",N),le(ce,"transform",N),oo=k,uo=A,ai=s}e.cancelable&&e.preventDefault()}},_appendGhost:function(){if(!ce){var e=this.options.fallbackOnBody?document.body:Ve,t=Qe(Z,!0,Ns,!0,e),n=this.options;if(Ns){for(dt=e;le(dt,"position")==="static"&&le(dt,"transform")==="none"&&dt!==document;)dt=dt.parentNode;dt!==document.body&&dt!==document.documentElement?(dt===document&&(dt=ki()),t.top+=dt.scrollTop,t.left+=dt.scrollLeft):dt=ki(),lo=Ol(dt)}ce=Z.cloneNode(!0),zt(ce,n.ghostClass,!1),zt(ce,n.fallbackClass,!0),zt(ce,n.dragClass,!0),le(ce,"transition",""),le(ce,"transform",""),le(ce,"box-sizing","border-box"),le(ce,"margin",0),le(ce,"top",t.top),le(ce,"left",t.left),le(ce,"width",t.width),le(ce,"height",t.height),le(ce,"opacity","0.8"),le(ce,"position",Ns?"absolute":"fixed"),le(ce,"zIndex","100000"),le(ce,"pointerEvents","none"),de.ghost=ce,e.appendChild(ce),le(ce,"transform-origin",Ml/parseInt(ce.style.width)*100+"% "+Nl/parseInt(ce.style.height)*100+"%")}},_onDragStart:function(e,t){var n=this,r=e.dataTransfer,s=n.options;if(Pt("dragStart",this,{evt:e}),de.eventCanceled){this._onDrop();return}Pt("setupClone",this),de.eventCanceled||($e=ql(Z),$e.removeAttribute("id"),$e.draggable=!1,$e.style["will-change"]="",this._hideClone(),zt($e,this.options.chosenClass,!1),de.clone=$e),n.cloneId=zs(function(){Pt("clone",n),!de.eventCanceled&&(n.options.removeCloneOnHide||Ve.insertBefore($e,Z),n._hideClone(),vt({sortable:n,name:"clone"}))}),!t&&zt(Z,s.dragClass,!0),t?(Ws=!0,n._loopId=setInterval(n._emulateDragOver,50)):(Ae(document,"mouseup",n._onDrop),Ae(document,"touchend",n._onDrop),Ae(document,"touchcancel",n._onDrop),r&&(r.effectAllowed="move",s.setData&&s.setData.call(n,r,Z)),Se(document,"drop",n),le(Z,"transform","translateZ(0)")),ir=!0,n._dragStartId=zs(n._dragStarted.bind(n,t,e)),Se(document,"selectstart",n),Pr=!0,Mr&&le(document.body,"user-select","none")},_onDragOver:function(e){var t=this.el,n=e.target,r,s,a,u=this.options,c=u.group,v=de.active,k=Os===c,A=u.sort,N=rt||v,y,d=this,g=!1;if(go)return;function b($,ee){Pt($,d,Ai({evt:e,isOwner:k,axis:y?"vertical":"horizontal",revert:a,dragRect:r,targetRect:s,canSort:A,fromSortable:N,target:n,completed:P,onMove:function(ie,ae){return Bs(Ve,t,Z,r,ie,Qe(ie),e,ae)},changed:o},ee))}function E(){b("dragOverAnimationCapture"),d.captureAnimationState(),d!==N&&N.captureAnimationState()}function P($){return b("dragOverCompleted",{insertion:$}),$&&(k?v._hideClone():v._showClone(d),d!==N&&(zt(Z,rt?rt.options.ghostClass:v.options.ghostClass,!1),zt(Z,u.ghostClass,!0)),rt!==d&&d!==de.active?rt=d:d===de.active&&rt&&(rt=null),N===d&&(d._ignoreWhileAnimating=n),d.animateAll(function(){b("dragOverAnimationComplete"),d._ignoreWhileAnimating=null}),d!==N&&(N.animateAll(),N._ignoreWhileAnimating=null)),(n===Z&&!Z.animated||n===t&&!n.animated)&&(tr=null),!u.dragoverBubble&&!e.rootEl&&n!==document&&(Z.parentNode[It]._isOutsideThisEl(e.target),!$&&Sn(e)),!u.dragoverBubble&&e.stopPropagation&&e.stopPropagation(),g=!0}function o(){Vt=Xt(Z),tn=Xt(Z,u.draggable),vt({sortable:d,name:"change",toEl:t,newIndex:Vt,newDraggableIndex:tn,originalEvent:e})}if(e.preventDefault!==void 0&&e.cancelable&&e.preventDefault(),n=oi(n,u.draggable,t,!0),b("dragOver"),de.eventCanceled)return g;if(Z.contains(e.target)||n.animated&&n.animatingX&&n.animatingY||d._ignoreWhileAnimating===n)return P(!1);if(Ws=!1,v&&!u.disabled&&(k?A||(a=Je!==Ve):rt===this||(this.lastPutMode=Os.checkPull(this,v,Z,e))&&c.checkPut(this,v,Z,e))){if(y=this._getDirection(e,n)==="vertical",r=Qe(Z),b("dragOverValid"),de.eventCanceled)return g;if(a)return Je=Ve,E(),this._hideClone(),b("revert"),de.eventCanceled||(Dn?Ve.insertBefore(Z,Dn):Ve.appendChild(Z)),P(!0);var h=yo(t,u.draggable);if(!h||cf(e,y,this)&&!h.animated){if(h===Z)return P(!1);if(h&&t===e.target&&(n=h),n&&(s=Qe(n)),Bs(Ve,t,Z,r,n,s,e,!!n)!==!1)return E(),h&&h.nextSibling?t.insertBefore(Z,h.nextSibling):t.appendChild(Z),Je=t,o(),P(!0)}else if(h&&df(e,y,this)){var f=sr(t,0,u,!0);if(f===Z)return P(!1);if(n=f,s=Qe(n),Bs(Ve,t,Z,r,n,s,e,!1)!==!1)return E(),t.insertBefore(Z,f),Je=t,o(),P(!0)}else if(n.parentNode===t){s=Qe(n);var _=0,C,I=Z.parentNode!==t,L=!sf(Z.animated&&Z.toRect||r,n.animated&&n.toRect||s,y),F=y?"top":"left",K=Il(n,"top","top")||Il(Z,"top","top"),W=K?K.scrollTop:void 0;tr!==n&&(C=s[F],jr=!1,Ms=!L&&u.invertSwap||I),_=hf(e,n,s,y,L?1:u.swapThreshold,u.invertedSwapThreshold==null?u.swapThreshold:u.invertedSwapThreshold,Ms,tr===n);var q;if(_!==0){var G=Xt(Z);do G-=_,q=Je.children[G];while(q&&(le(q,"display")==="none"||q===ce))}if(_===0||q===n)return P(!1);tr=n,Fr=_;var x=n.nextElementSibling,U=!1;U=_===1;var z=Bs(Ve,t,Z,r,n,s,e,U);if(z!==!1)return(z===1||z===-1)&&(U=z===1),go=!0,setTimeout(lf,30),E(),U&&!x?t.appendChild(Z):n.parentNode.insertBefore(Z,U?x:n),K&&$l(K,0,W-K.scrollTop),Je=Z.parentNode,C!==void 0&&!Ms&&(Hs=Math.abs(C-Qe(n)[F])),o(),P(!0)}if(t.contains(Z))return P(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){Ae(document,"mousemove",this._onTouchMove),Ae(document,"touchmove",this._onTouchMove),Ae(document,"pointermove",this._onTouchMove),Ae(document,"dragover",Sn),Ae(document,"mousemove",Sn),Ae(document,"touchmove",Sn)},_offUpEvents:function(){var e=this.el.ownerDocument;Ae(e,"mouseup",this._onDrop),Ae(e,"touchend",this._onDrop),Ae(e,"pointerup",this._onDrop),Ae(e,"pointercancel",this._onDrop),Ae(e,"touchcancel",this._onDrop),Ae(document,"selectstart",this)},_onDrop:function(e){var t=this.el,n=this.options;if(Vt=Xt(Z),tn=Xt(Z,n.draggable),Pt("drop",this,{evt:e}),Je=Z&&Z.parentNode,Vt=Xt(Z),tn=Xt(Z,n.draggable),de.eventCanceled){this._nulling();return}ir=!1,Ms=!1,jr=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),mo(this.cloneId),mo(this._dragStartId),this.nativeDraggable&&(Ae(document,"drop",this),Ae(t,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),Mr&&le(document.body,"user-select",""),le(Z,"transform",""),e&&(Pr&&(e.cancelable&&e.preventDefault(),!n.dropBubble&&e.stopPropagation()),ce&&ce.parentNode&&ce.parentNode.removeChild(ce),(Ve===Je||rt&&rt.lastPutMode!=="clone")&&$e&&$e.parentNode&&$e.parentNode.removeChild($e),Z&&(this.nativeDraggable&&Ae(Z,"dragend",this),co(Z),Z.style["will-change"]="",Pr&&!ir&&zt(Z,rt?rt.options.ghostClass:this.options.ghostClass,!1),zt(Z,this.options.chosenClass,!1),vt({sortable:this,name:"unchoose",toEl:Je,newIndex:null,newDraggableIndex:null,originalEvent:e}),Ve!==Je?(Vt>=0&&(vt({rootEl:Je,name:"add",toEl:Je,fromEl:Ve,originalEvent:e}),vt({sortable:this,name:"remove",toEl:Je,originalEvent:e}),vt({rootEl:Je,name:"sort",toEl:Je,fromEl:Ve,originalEvent:e}),vt({sortable:this,name:"sort",toEl:Je,originalEvent:e})),rt&&rt.save()):Vt!==nr&&Vt>=0&&(vt({sortable:this,name:"update",toEl:Je,originalEvent:e}),vt({sortable:this,name:"sort",toEl:Je,originalEvent:e})),de.active&&((Vt==null||Vt===-1)&&(Vt=nr,tn=Br),vt({sortable:this,name:"end",toEl:Je,originalEvent:e}),this.save()))),this._nulling()},_nulling:function(){Pt("nulling",this),Ve=Z=Je=ce=Dn=$e=js=nn=Cn=ai=Pr=Vt=tn=nr=Br=tr=Fr=rt=Os=de.dragged=de.ghost=de.clone=de.active=null,qs.forEach(function(e){e.checked=!0}),qs.length=oo=uo=0},handleEvent:function(e){switch(e.type){case"drop":case"dragend":this._onDrop(e);break;case"dragenter":case"dragover":Z&&(this._onDragOver(e),uf(e));break;case"selectstart":e.preventDefault();break}},toArray:function(){for(var e=[],t,n=this.el.children,r=0,s=n.length,a=this.options;r<s;r++)t=n[r],oi(t,a.draggable,this.el,!1)&&e.push(t.getAttribute(a.dataIdAttr)||pf(t));return e},sort:function(e,t){var n={},r=this.el;this.toArray().forEach(function(s,a){var u=r.children[a];oi(u,this.options.draggable,r,!1)&&(n[s]=u)},this),t&&this.captureAnimationState(),e.forEach(function(s){n[s]&&(r.removeChild(n[s]),r.appendChild(n[s]))}),t&&this.animateAll()},save:function(){var e=this.options.store;e&&e.set&&e.set(this)},closest:function(e,t){return oi(e,t||this.options.draggable,this.el,!1)},option:function(e,t){var n=this.options;if(t===void 0)return n[e];var r=zr.modifyOption(this,e,t);typeof r<"u"?n[e]=r:n[e]=t,e==="group"&&Xl(n)},destroy:function(){Pt("destroy",this);var e=this.el;e[It]=null,Ae(e,"mousedown",this._onTapStart),Ae(e,"touchstart",this._onTapStart),Ae(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(Ae(e,"dragover",this),Ae(e,"dragenter",this)),Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),function(t){t.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),$s.splice($s.indexOf(this.el),1),this.el=e=null},_hideClone:function(){if(!nn){if(Pt("hideClone",this),de.eventCanceled)return;le($e,"display","none"),this.options.removeCloneOnHide&&$e.parentNode&&$e.parentNode.removeChild($e),nn=!0}},_showClone:function(e){if(e.lastPutMode!=="clone"){this._hideClone();return}if(nn){if(Pt("showClone",this),de.eventCanceled)return;Z.parentNode==Ve&&!this.options.group.revertClone?Ve.insertBefore($e,Z):Dn?Ve.insertBefore($e,Dn):Ve.appendChild($e),this.options.group.revertClone&&this.animate(Z,$e),le($e,"display",""),nn=!1}}};function uf(i){i.dataTransfer&&(i.dataTransfer.dropEffect="move"),i.cancelable&&i.preventDefault()}function Bs(i,e,t,n,r,s,a,u){var c,v=i[It],k=v.options.onMove,A;return window.CustomEvent&&!Mi&&!Hr?c=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(c=document.createEvent("Event"),c.initEvent("move",!0,!0)),c.to=e,c.from=i,c.dragged=t,c.draggedRect=n,c.related=r||e,c.relatedRect=s||Qe(e),c.willInsertAfter=u,c.originalEvent=a,i.dispatchEvent(c),k&&(A=k.call(v,c,a)),A}function co(i){i.draggable=!1}function lf(){go=!1}function df(i,e,t){var n=Qe(sr(t.el,0,t.options,!0)),r=Kl(t.el,t.options,ce),s=10;return e?i.clientX<r.left-s||i.clientY<n.top&&i.clientX<n.right:i.clientY<r.top-s||i.clientY<n.bottom&&i.clientX<n.left}function cf(i,e,t){var n=Qe(yo(t.el,t.options.draggable)),r=Kl(t.el,t.options,ce),s=10;return e?i.clientX>r.right+s||i.clientY>n.bottom&&i.clientX>n.left:i.clientY>r.bottom+s||i.clientX>n.right&&i.clientY>n.top}function hf(i,e,t,n,r,s,a,u){var c=n?i.clientY:i.clientX,v=n?t.height:t.width,k=n?t.top:t.left,A=n?t.bottom:t.right,N=!1;if(!a){if(u&&Hs<v*r){if(!jr&&(Fr===1?c>k+v*s/2:c<A-v*s/2)&&(jr=!0),jr)N=!0;else if(Fr===1?c<k+Hs:c>A-Hs)return-Fr}else if(c>k+v*(1-r)/2&&c<A-v*(1-r)/2)return ff(e)}return N=N||a,N&&(c<k+v*s/2||c>A-v*s/2)?c>k+v/2?1:-1:0}function ff(i){return Xt(Z)<Xt(i)?1:-1}function pf(i){for(var e=i.tagName+i.className+i.src+i.href+i.textContent,t=e.length,n=0;t--;)n+=e.charCodeAt(t);return n.toString(36)}function gf(i){qs.length=0;for(var e=i.getElementsByTagName("input"),t=e.length;t--;){var n=e[t];n.checked&&qs.push(n)}}function zs(i){return setTimeout(i,0)}function mo(i){return clearTimeout(i)}Js&&Se(document,"touchmove",function(i){(de.active||ir)&&i.cancelable&&i.preventDefault()});de.utils={on:Se,off:Ae,css:le,find:Ul,is:function(e,t){return!!oi(e,t,e,!1)},extend:Xh,throttle:Wl,closest:oi,toggleClass:zt,clone:ql,index:Xt,nextTick:zs,cancelNextTick:mo,detectDirection:Gl,getChild:sr,expando:It};de.get=function(i){return i[It]};de.mount=function(){for(var i=arguments.length,e=new Array(i),t=0;t<i;t++)e[t]=arguments[t];e[0].constructor===Array&&(e=e[0]),e.forEach(function(n){if(!n.prototype||!n.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(n));n.utils&&(de.utils=Ai(Ai({},de.utils),n.utils)),zr.mount(n)})};de.create=function(i,e){return new de(i,e)};de.version=Jh;var Ze=[],Ir,vo,bo=!1,ho,fo,Ks,Or;function mf(){function i(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var e in this)e.charAt(0)==="_"&&typeof this[e]=="function"&&(this[e]=this[e].bind(this))}return i.prototype={dragStarted:function(t){var n=t.originalEvent;this.sortable.nativeDraggable?Se(document,"dragover",this._handleAutoScroll):this.options.supportPointer?Se(document,"pointermove",this._handleFallbackAutoScroll):n.touches?Se(document,"touchmove",this._handleFallbackAutoScroll):Se(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(t){var n=t.originalEvent;!this.options.dragOverBubble&&!n.rootEl&&this._handleAutoScroll(n)},drop:function(){this.sortable.nativeDraggable?Ae(document,"dragover",this._handleAutoScroll):(Ae(document,"pointermove",this._handleFallbackAutoScroll),Ae(document,"touchmove",this._handleFallbackAutoScroll),Ae(document,"mousemove",this._handleFallbackAutoScroll)),Fl(),Vs(),Yh()},nulling:function(){Ks=vo=Ir=bo=Or=ho=fo=null,Ze.length=0},_handleFallbackAutoScroll:function(t){this._handleAutoScroll(t,!0)},_handleAutoScroll:function(t,n){var r=this,s=(t.touches?t.touches[0]:t).clientX,a=(t.touches?t.touches[0]:t).clientY,u=document.elementFromPoint(s,a);if(Ks=t,n||this.options.forceAutoScrollFallback||Hr||Mi||Mr){po(t,this.options,u,n);var c=rn(u,!0);bo&&(!Or||s!==ho||a!==fo)&&(Or&&Fl(),Or=setInterval(function(){var v=rn(document.elementFromPoint(s,a),!0);v!==c&&(c=v,Vs()),po(t,r.options,v,n)},10),ho=s,fo=a)}else{if(!this.options.bubbleScroll||rn(u,!0)===ki()){Vs();return}po(t,this.options,rn(u,!1),!1)}}},Oi(i,{pluginName:"scroll",initializeByDefault:!0})}function Vs(){Ze.forEach(function(i){clearInterval(i.pid)}),Ze=[]}function Fl(){clearInterval(Or)}var po=Wl(function(i,e,t,n){if(e.scroll){var r=(i.touches?i.touches[0]:i).clientX,s=(i.touches?i.touches[0]:i).clientY,a=e.scrollSensitivity,u=e.scrollSpeed,c=ki(),v=!1,k;vo!==t&&(vo=t,Vs(),Ir=e.scroll,k=e.scrollFn,Ir===!0&&(Ir=rn(t,!0)));var A=0,N=Ir;do{var y=N,d=Qe(y),g=d.top,b=d.bottom,E=d.left,P=d.right,o=d.width,h=d.height,f=void 0,_=void 0,C=y.scrollWidth,I=y.scrollHeight,L=le(y),F=y.scrollLeft,K=y.scrollTop;y===c?(f=o<C&&(L.overflowX==="auto"||L.overflowX==="scroll"||L.overflowX==="visible"),_=h<I&&(L.overflowY==="auto"||L.overflowY==="scroll"||L.overflowY==="visible")):(f=o<C&&(L.overflowX==="auto"||L.overflowX==="scroll"),_=h<I&&(L.overflowY==="auto"||L.overflowY==="scroll"));var W=f&&(Math.abs(P-r)<=a&&F+o<C)-(Math.abs(E-r)<=a&&!!F),q=_&&(Math.abs(b-s)<=a&&K+h<I)-(Math.abs(g-s)<=a&&!!K);if(!Ze[A])for(var G=0;G<=A;G++)Ze[G]||(Ze[G]={});(Ze[A].vx!=W||Ze[A].vy!=q||Ze[A].el!==y)&&(Ze[A].el=y,Ze[A].vx=W,Ze[A].vy=q,clearInterval(Ze[A].pid),(W!=0||q!=0)&&(v=!0,Ze[A].pid=setInterval(function(){n&&this.layer===0&&de.active._onTouchMove(Ks);var x=Ze[this.layer].vy?Ze[this.layer].vy*u:0,U=Ze[this.layer].vx?Ze[this.layer].vx*u:0;typeof k=="function"&&k.call(de.dragged.parentNode[It],U,x,i,Ks,Ze[this.layer].el)!=="continue"||$l(Ze[this.layer].el,U,x)}.bind({layer:A}),24))),A++}while(e.bubbleScroll&&N!==c&&(N=rn(N,!1)));bo=v}},30),Ql=function(e){var t=e.originalEvent,n=e.putSortable,r=e.dragEl,s=e.activeSortable,a=e.dispatchSortableEvent,u=e.hideGhostForTarget,c=e.unhideGhostForTarget;if(t){var v=n||s;u();var k=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,A=document.elementFromPoint(k.clientX,k.clientY);c(),v&&!v.el.contains(A)&&(a("spill"),this.onSpill({dragEl:r,putSortable:n}))}};function wo(){}wo.prototype={startIndex:null,dragStart:function(e){var t=e.oldDraggableIndex;this.startIndex=t},onSpill:function(e){var t=e.dragEl,n=e.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var r=sr(this.sortable.el,this.startIndex,this.options);r?this.sortable.el.insertBefore(t,r):this.sortable.el.appendChild(t),this.sortable.animateAll(),n&&n.animateAll()},drop:Ql};Oi(wo,{pluginName:"revertOnSpill"});function _o(){}_o.prototype={onSpill:function(e){var t=e.dragEl,n=e.putSortable,r=n||this.sortable;r.captureAnimationState(),t.parentNode&&t.parentNode.removeChild(t),r.animateAll()},drop:Ql};Oi(_o,{pluginName:"removeOnSpill"});de.mount(new mf);de.mount(_o,wo);var ed=de;var td={mounted(){let i=new ed(this.el,{animation:1,delay:4,delayOnTouchOnly:!0,group:"shared",draggable:".draggable",ghostClass:".sortable-ghost",handle:".drag-handle",onEnd:e=>{e.preventDefault(),console.log("onEnd"),this.pushEvent("dropped",{draggedId:e.item.id,toDropzoneId:e.to.id,fromDropzoneId:e.from.id,newDraggableIndex:e.newDraggableIndex,oldDraggableIndex:e.oldDraggableIndex,newOrder:i.toArray()})}})}};var _c=za(nd());function vf(i){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)t.hasOwnProperty(n)&&(i[n]=t[n])}return i}function Co(i,e){return Array(e+1).join(i)}function bf(i){return i.replace(/^\n*/,"")}function yf(i){for(var e=i.length;e>0&&i[e-1]===`
`;)e--;return i.substring(0,e)}var wf=["ADDRESS","ARTICLE","ASIDE","AUDIO","BLOCKQUOTE","BODY","CANVAS","CENTER","DD","DIR","DIV","DL","DT","FIELDSET","FIGCAPTION","FIGURE","FOOTER","FORM","FRAMESET","H1","H2","H3","H4","H5","H6","HEADER","HGROUP","HR","HTML","ISINDEX","LI","MAIN","MENU","NAV","NOFRAMES","NOSCRIPT","OL","OUTPUT","P","PRE","SECTION","TABLE","TBODY","TD","TFOOT","TH","THEAD","TR","UL"];function So(i){return Do(i,wf)}var ad=["AREA","BASE","BR","COL","COMMAND","EMBED","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR"];function od(i){return Do(i,ad)}function _f(i){return ld(i,ad)}var ud=["A","TABLE","THEAD","TBODY","TFOOT","TH","TD","IFRAME","SCRIPT","AUDIO","VIDEO"];function kf(i){return Do(i,ud)}function Af(i){return ld(i,ud)}function Do(i,e){return e.indexOf(i.nodeName)>=0}function ld(i,e){return i.getElementsByTagName&&e.some(function(t){return i.getElementsByTagName(t).length})}var ct={};ct.paragraph={filter:"p",replacement:function(i){return`

`+i+`

`}};ct.lineBreak={filter:"br",replacement:function(i,e,t){return t.br+`
`}};ct.heading={filter:["h1","h2","h3","h4","h5","h6"],replacement:function(i,e,t){var n=Number(e.nodeName.charAt(1));if(t.headingStyle==="setext"&&n<3){var r=Co(n===1?"=":"-",i.length);return`

`+i+`
`+r+`

`}else return`

`+Co("#",n)+" "+i+`

`}};ct.blockquote={filter:"blockquote",replacement:function(i){return i=i.replace(/^\n+|\n+$/g,""),i=i.replace(/^/gm,"> "),`

`+i+`

`}};ct.list={filter:["ul","ol"],replacement:function(i,e){var t=e.parentNode;return t.nodeName==="LI"&&t.lastElementChild===e?`
`+i:`

`+i+`

`}};ct.listItem={filter:"li",replacement:function(i,e,t){i=i.replace(/^\n+/,"").replace(/\n+$/,`
`).replace(/\n/gm,`
    `);var n=t.bulletListMarker+"   ",r=e.parentNode;if(r.nodeName==="OL"){var s=r.getAttribute("start"),a=Array.prototype.indexOf.call(r.children,e);n=(s?Number(s)+a:a+1)+".  "}return n+i+(e.nextSibling&&!/\n$/.test(i)?`
`:"")}};ct.indentedCodeBlock={filter:function(i,e){return e.codeBlockStyle==="indented"&&i.nodeName==="PRE"&&i.firstChild&&i.firstChild.nodeName==="CODE"},replacement:function(i,e,t){return`

    `+e.firstChild.textContent.replace(/\n/g,`
    `)+`

`}};ct.fencedCodeBlock={filter:function(i,e){return e.codeBlockStyle==="fenced"&&i.nodeName==="PRE"&&i.firstChild&&i.firstChild.nodeName==="CODE"},replacement:function(i,e,t){for(var n=e.firstChild.getAttribute("class")||"",r=(n.match(/language-(\S+)/)||[null,""])[1],s=e.firstChild.textContent,a=t.fence.charAt(0),u=3,c=new RegExp("^"+a+"{3,}","gm"),v;v=c.exec(s);)v[0].length>=u&&(u=v[0].length+1);var k=Co(a,u);return`

`+k+r+`
`+s.replace(/\n$/,"")+`
`+k+`

`}};ct.horizontalRule={filter:"hr",replacement:function(i,e,t){return`

`+t.hr+`

`}};ct.inlineLink={filter:function(i,e){return e.linkStyle==="inlined"&&i.nodeName==="A"&&i.getAttribute("href")},replacement:function(i,e){var t=e.getAttribute("href");t&&(t=t.replace(/([()])/g,"\\$1"));var n=Xs(e.getAttribute("title"));return n&&(n=' "'+n.replace(/"/g,'\\"')+'"'),"["+i+"]("+t+n+")"}};ct.referenceLink={filter:function(i,e){return e.linkStyle==="referenced"&&i.nodeName==="A"&&i.getAttribute("href")},replacement:function(i,e,t){var n=e.getAttribute("href"),r=Xs(e.getAttribute("title"));r&&(r=' "'+r+'"');var s,a;switch(t.linkReferenceStyle){case"collapsed":s="["+i+"][]",a="["+i+"]: "+n+r;break;case"shortcut":s="["+i+"]",a="["+i+"]: "+n+r;break;default:var u=this.references.length+1;s="["+i+"]["+u+"]",a="["+u+"]: "+n+r}return this.references.push(a),s},references:[],append:function(i){var e="";return this.references.length&&(e=`

`+this.references.join(`
`)+`

`,this.references=[]),e}};ct.emphasis={filter:["em","i"],replacement:function(i,e,t){return i.trim()?t.emDelimiter+i+t.emDelimiter:""}};ct.strong={filter:["strong","b"],replacement:function(i,e,t){return i.trim()?t.strongDelimiter+i+t.strongDelimiter:""}};ct.code={filter:function(i){var e=i.previousSibling||i.nextSibling,t=i.parentNode.nodeName==="PRE"&&!e;return i.nodeName==="CODE"&&!t},replacement:function(i){if(!i)return"";i=i.replace(/\r?\n|\r/g," ");for(var e=/^`|^ .*?[^ ].* $|`$/.test(i)?" ":"",t="`",n=i.match(/`+/gm)||[];n.indexOf(t)!==-1;)t=t+"`";return t+e+i+e+t}};ct.image={filter:"img",replacement:function(i,e){var t=Xs(e.getAttribute("alt")),n=e.getAttribute("src")||"",r=Xs(e.getAttribute("title")),s=r?' "'+r+'"':"";return n?"!["+t+"]("+n+s+")":""}};function Xs(i){return i?i.replace(/(\n+\s*)+/g,`
`):""}function dd(i){this.options=i,this._keep=[],this._remove=[],this.blankRule={replacement:i.blankReplacement},this.keepReplacement=i.keepReplacement,this.defaultRule={replacement:i.defaultReplacement},this.array=[];for(var e in i.rules)this.array.push(i.rules[e])}dd.prototype={add:function(i,e){this.array.unshift(e)},keep:function(i){this._keep.unshift({filter:i,replacement:this.keepReplacement})},remove:function(i){this._remove.unshift({filter:i,replacement:function(){return""}})},forNode:function(i){if(i.isBlank)return this.blankRule;var e;return(e=ko(this.array,i,this.options))||(e=ko(this._keep,i,this.options))||(e=ko(this._remove,i,this.options))?e:this.defaultRule},forEach:function(i){for(var e=0;e<this.array.length;e++)i(this.array[e],e)}};function ko(i,e,t){for(var n=0;n<i.length;n++){var r=i[n];if(Ef(r,e,t))return r}}function Ef(i,e,t){var n=i.filter;if(typeof n=="string"){if(n===e.nodeName.toLowerCase())return!0}else if(Array.isArray(n)){if(n.indexOf(e.nodeName.toLowerCase())>-1)return!0}else if(typeof n=="function"){if(n.call(i,e,t))return!0}else throw new TypeError("`filter` needs to be a string, array, or function")}function Cf(i){var e=i.element,t=i.isBlock,n=i.isVoid,r=i.isPre||function(A){return A.nodeName==="PRE"};if(!(!e.firstChild||r(e))){for(var s=null,a=!1,u=null,c=rd(u,e,r);c!==e;){if(c.nodeType===3||c.nodeType===4){var v=c.data.replace(/[ \r\n\t]+/g," ");if((!s||/ $/.test(s.data))&&!a&&v[0]===" "&&(v=v.substr(1)),!v){c=Ao(c);continue}c.data=v,s=c}else if(c.nodeType===1)t(c)||c.nodeName==="BR"?(s&&(s.data=s.data.replace(/ $/,"")),s=null,a=!1):n(c)||r(c)?(s=null,a=!0):s&&(a=!1);else{c=Ao(c);continue}var k=rd(u,c,r);u=c,c=k}s&&(s.data=s.data.replace(/ $/,""),s.data||Ao(s))}}function Ao(i){var e=i.nextSibling||i.parentNode;return i.parentNode.removeChild(i),e}function rd(i,e,t){return i&&i.parentNode===e||t(e)?e.nextSibling||e.parentNode:e.firstChild||e.nextSibling||e.parentNode}var To=typeof window<"u"?window:{};function Sf(){var i=To.DOMParser,e=!1;try{new i().parseFromString("","text/html")&&(e=!0)}catch{}return e}function Df(){var i=function(){};return Tf()?i.prototype.parseFromString=function(e){var t=new window.ActiveXObject("htmlfile");return t.designMode="on",t.open(),t.write(e),t.close(),t}:i.prototype.parseFromString=function(e){var t=document.implementation.createHTMLDocument("");return t.open(),t.write(e),t.close(),t},i}function Tf(){var i=!1;try{document.implementation.createHTMLDocument("").open()}catch{To.ActiveXObject&&(i=!0)}return i}var xf=Sf()?To.DOMParser:Df();function Lf(i,e){var t;if(typeof i=="string"){var n=Rf().parseFromString('<x-turndown id="turndown-root">'+i+"</x-turndown>","text/html");t=n.getElementById("turndown-root")}else t=i.cloneNode(!0);return Cf({element:t,isBlock:So,isVoid:od,isPre:e.preformattedCode?Pf:null}),t}var Eo;function Rf(){return Eo=Eo||new xf,Eo}function Pf(i){return i.nodeName==="PRE"||i.nodeName==="CODE"}function If(i,e){return i.isBlock=So(i),i.isCode=i.nodeName==="CODE"||i.parentNode.isCode,i.isBlank=Of(i),i.flankingWhitespace=Mf(i,e),i}function Of(i){return!od(i)&&!kf(i)&&/^\s*$/i.test(i.textContent)&&!_f(i)&&!Af(i)}function Mf(i,e){if(i.isBlock||e.preformattedCode&&i.isCode)return{leading:"",trailing:""};var t=Nf(i.textContent);return t.leadingAscii&&sd("left",i,e)&&(t.leading=t.leadingNonAscii),t.trailingAscii&&sd("right",i,e)&&(t.trailing=t.trailingNonAscii),{leading:t.leading,trailing:t.trailing}}function Nf(i){var e=i.match(/^(([ \t\r\n]*)(\s*))(?:(?=\S)[\s\S]*\S)?((\s*?)([ \t\r\n]*))$/);return{leading:e[1],leadingAscii:e[2],leadingNonAscii:e[3],trailing:e[4],trailingNonAscii:e[5],trailingAscii:e[6]}}function sd(i,e,t){var n,r,s;return i==="left"?(n=e.previousSibling,r=/ $/):(n=e.nextSibling,r=/^ /),n&&(n.nodeType===3?s=r.test(n.nodeValue):t.preformattedCode&&n.nodeName==="CODE"?s=!1:n.nodeType===1&&!So(n)&&(s=r.test(n.textContent))),s}var Bf=Array.prototype.reduce,Ff=[[/\\/g,"\\\\"],[/\*/g,"\\*"],[/^-/g,"\\-"],[/^\+ /g,"\\+ "],[/^(=+)/g,"\\$1"],[/^(#{1,6}) /g,"\\$1 "],[/`/g,"\\`"],[/^~~~/g,"\\~~~"],[/\[/g,"\\["],[/\]/g,"\\]"],[/^>/g,"\\>"],[/_/g,"\\_"],[/^(\d+)\. /g,"$1\\. "]];function Ys(i){if(!(this instanceof Ys))return new Ys(i);var e={rules:ct,headingStyle:"setext",hr:"* * *",bulletListMarker:"*",codeBlockStyle:"indented",fence:"```",emDelimiter:"_",strongDelimiter:"**",linkStyle:"inlined",linkReferenceStyle:"full",br:"  ",preformattedCode:!1,blankReplacement:function(t,n){return n.isBlock?`

`:""},keepReplacement:function(t,n){return n.isBlock?`

`+n.outerHTML+`

`:n.outerHTML},defaultReplacement:function(t,n){return n.isBlock?`

`+t+`

`:t}};this.options=vf({},e,i),this.rules=new dd(this.options)}Ys.prototype={turndown:function(i){if(!zf(i))throw new TypeError(i+" is not a string, or an element/document/fragment node.");if(i==="")return"";var e=cd.call(this,new Lf(i,this.options));return jf.call(this,e)},use:function(i){if(Array.isArray(i))for(var e=0;e<i.length;e++)this.use(i[e]);else if(typeof i=="function")i(this);else throw new TypeError("plugin must be a Function or an Array of Functions");return this},addRule:function(i,e){return this.rules.add(i,e),this},keep:function(i){return this.rules.keep(i),this},remove:function(i){return this.rules.remove(i),this},escape:function(i){return Ff.reduce(function(e,t){return e.replace(t[0],t[1])},i)}};function cd(i){var e=this;return Bf.call(i.childNodes,function(t,n){n=new If(n,e.options);var r="";return n.nodeType===3?r=n.isCode?n.nodeValue:e.escape(n.nodeValue):n.nodeType===1&&(r=Hf.call(e,n)),hd(t,r)},"")}function jf(i){var e=this;return this.rules.forEach(function(t){typeof t.append=="function"&&(i=hd(i,t.append(e.options)))}),i.replace(/^[\t\r\n]+/,"").replace(/[\t\r\n\s]+$/,"")}function Hf(i){var e=this.rules.forNode(i),t=cd.call(this,i),n=i.flankingWhitespace;return(n.leading||n.trailing)&&(t=t.trim()),n.leading+e.replacement(t,i,this.options)+n.trailing}function hd(i,e){var t=yf(i),n=bf(e),r=Math.max(i.length-t.length,e.length-n.length),s=`

`.substring(0,r);return t+s+n}function zf(i){return i!=null&&(typeof i=="string"||i.nodeType&&(i.nodeType===1||i.nodeType===9||i.nodeType===11))}var fd=Ys;var Vf="2.1.12",Rn="[data-trix-attachment]",yu={preview:{presentation:"gallery",caption:{name:!0,size:!0}},file:{caption:{size:!0}}},wt={default:{tagName:"div",parse:!1},quote:{tagName:"blockquote",nestable:!0},heading1:{tagName:"h1",terminal:!0,breakOnReturn:!0,group:!1},code:{tagName:"pre",terminal:!0,htmlAttributes:["language"],text:{plaintext:!0}},bulletList:{tagName:"ul",parse:!1},bullet:{tagName:"li",listAttribute:"bulletList",group:!1,nestable:!0,test(i){return pd(i.parentNode)===wt[this.listAttribute].tagName}},numberList:{tagName:"ol",parse:!1},number:{tagName:"li",listAttribute:"numberList",group:!1,nestable:!0,test(i){return pd(i.parentNode)===wt[this.listAttribute].tagName}},attachmentGallery:{tagName:"div",exclusive:!0,terminal:!0,parse:!1,group:!1}},pd=i=>{var e;return i==null||(e=i.tagName)===null||e===void 0?void 0:e.toLowerCase()},gd=navigator.userAgent.match(/android\s([0-9]+.*Chrome)/i),xo=gd&&parseInt(gd[1]),as={composesExistingText:/Android.*Chrome/.test(navigator.userAgent),recentAndroid:xo&&xo>12,samsungAndroid:xo&&navigator.userAgent.match(/Android.*SM-/),forcesObjectResizing:/Trident.*rv:11/.test(navigator.userAgent),supportsInputEvents:typeof InputEvent<"u"&&["data","getTargetRanges","inputType"].every(i=>i in InputEvent.prototype)},Gd={ADD_ATTR:["language"],SAFE_FOR_XML:!1,RETURN_DOM:!0},fe={attachFiles:"Attach Files",bold:"Bold",bullets:"Bullets",byte:"Byte",bytes:"Bytes",captionPlaceholder:"Add a caption\u2026",code:"Code",heading1:"Heading",indent:"Increase Level",italic:"Italic",link:"Link",numbers:"Numbers",outdent:"Decrease Level",quote:"Quote",redo:"Redo",remove:"Remove",strike:"Strikethrough",undo:"Undo",unlink:"Unlink",url:"URL",urlPlaceholder:"Enter a URL\u2026",GB:"GB",KB:"KB",MB:"MB",PB:"PB",TB:"TB"},Uf=[fe.bytes,fe.KB,fe.MB,fe.GB,fe.TB,fe.PB],Xd={prefix:"IEC",precision:2,formatter(i){switch(i){case 0:return"0 ".concat(fe.bytes);case 1:return"1 ".concat(fe.byte);default:let e;this.prefix==="SI"?e=1e3:this.prefix==="IEC"&&(e=1024);let t=Math.floor(Math.log(i)/Math.log(e)),n=(i/Math.pow(e,t)).toFixed(this.precision).replace(/0*$/,"").replace(/\.$/,"");return"".concat(n," ").concat(Uf[t])}}},xa="\uFEFF",an="\xA0",Yd=function(i){for(let e in i){let t=i[e];this[e]=t}return this},wu=document.documentElement,Wf=wu.matches,Ke=function(i){let{onElement:e,matchingSelector:t,withCallback:n,inPhase:r,preventDefault:s,times:a}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},u=e||wu,c=t,v=r==="capturing",k=function(A){a!=null&&--a==0&&k.destroy();let N=on(A.target,{matchingSelector:c});N!=null&&(n?.call(N,A,N),s&&A.preventDefault())};return k.destroy=()=>u.removeEventListener(i,k,v),u.addEventListener(i,k,v),k},Xr=function(i){let{onElement:e,bubbles:t,cancelable:n,attributes:r}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},s=e??wu;t=t!==!1,n=n!==!1;let a=document.createEvent("Events");return a.initEvent(i,t,n),r!=null&&Yd.call(a,r),s.dispatchEvent(a)},Zd=function(i,e){if(i?.nodeType===1)return Wf.call(i,e)},on=function(i){let{matchingSelector:e,untilNode:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};for(;i&&i.nodeType!==Node.ELEMENT_NODE;)i=i.parentNode;if(i!=null){if(e==null)return i;if(i.closest&&t==null)return i.closest(e);for(;i&&i!==t;){if(Zd(i,e))return i;i=i.parentNode}}},_u=i=>document.activeElement!==i&&Ln(i,document.activeElement),Ln=function(i,e){if(i&&e)for(;e;){if(e===i)return!0;e=e.parentNode}},Lo=function(i){var e;if((e=i)===null||e===void 0||!e.parentNode)return;let t=0;for(i=i.previousSibling;i;)t++,i=i.previousSibling;return t},un=i=>{var e;return i==null||(e=i.parentNode)===null||e===void 0?void 0:e.removeChild(i)},oa=function(i){let{onlyNodesOfType:e,usingFilter:t,expandEntityReferences:n}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=(()=>{switch(e){case"element":return NodeFilter.SHOW_ELEMENT;case"text":return NodeFilter.SHOW_TEXT;case"comment":return NodeFilter.SHOW_COMMENT;default:return NodeFilter.SHOW_ALL}})();return document.createTreeWalker(i,r,t??null,n===!0)},yt=i=>{var e;return i==null||(e=i.tagName)===null||e===void 0?void 0:e.toLowerCase()},be=function(i){let e,t,n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};typeof i=="object"?(n=i,i=n.tagName):n={attributes:n};let r=document.createElement(i);if(n.editable!=null&&(n.attributes==null&&(n.attributes={}),n.attributes.contenteditable=n.editable),n.attributes)for(e in n.attributes)t=n.attributes[e],r.setAttribute(e,t);if(n.style)for(e in n.style)t=n.style[e],r.style[e]=t;if(n.data)for(e in n.data)t=n.data[e],r.dataset[e]=t;return n.className&&n.className.split(" ").forEach(s=>{r.classList.add(s)}),n.textContent&&(r.textContent=n.textContent),n.childNodes&&[].concat(n.childNodes).forEach(s=>{r.appendChild(s)}),r},Vr,Yr=function(){if(Vr!=null)return Vr;Vr=[];for(let i in wt){let e=wt[i];e.tagName&&Vr.push(e.tagName)}return Vr},Ro=i=>or(i?.firstChild),md=function(i){let{strict:e}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{strict:!0};return e?or(i):or(i)||!or(i.firstChild)&&function(t){return Yr().includes(yt(t))&&!Yr().includes(yt(t.firstChild))}(i)},or=i=>$f(i)&&i?.data==="block",$f=i=>i?.nodeType===Node.COMMENT_NODE,ur=function(i){let{name:e}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(i)return Zr(i)?i.data===xa?!e||i.parentNode.dataset.trixCursorTarget===e:void 0:ur(i.firstChild)},Pn=i=>Zd(i,Rn),Qd=i=>Zr(i)&&i?.data==="",Zr=i=>i?.nodeType===Node.TEXT_NODE,ku={level2Enabled:!0,getLevel(){return this.level2Enabled&&as.supportsInputEvents?2:0},pickFiles(i){let e=be("input",{type:"file",multiple:!0,hidden:!0,id:this.fileInputId});e.addEventListener("change",()=>{i(e.files),un(e)}),un(document.getElementById(this.fileInputId)),document.body.appendChild(e),e.click()}},ra={removeBlankTableCells:!1,tableCellSeparator:" | ",tableRowSeparator:`
`},Mn={bold:{tagName:"strong",inheritable:!0,parser(i){let e=window.getComputedStyle(i);return e.fontWeight==="bold"||e.fontWeight>=600}},italic:{tagName:"em",inheritable:!0,parser:i=>window.getComputedStyle(i).fontStyle==="italic"},href:{groupTagName:"a",parser(i){let e="a:not(".concat(Rn,")"),t=i.closest(e);if(t)return t.getAttribute("href")}},strike:{tagName:"del",inheritable:!0},frozen:{style:{backgroundColor:"highlight"}}},ec={getDefaultHTML:()=>`<div class="trix-button-row">
      <span class="trix-button-group trix-button-group--text-tools" data-trix-button-group="text-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-bold" data-trix-attribute="bold" data-trix-key="b" title="`.concat(fe.bold,'" tabindex="-1">').concat(fe.bold,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-italic" data-trix-attribute="italic" data-trix-key="i" title="`).concat(fe.italic,'" tabindex="-1">').concat(fe.italic,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-strike" data-trix-attribute="strike" title="`).concat(fe.strike,'" tabindex="-1">').concat(fe.strike,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-link" data-trix-attribute="href" data-trix-action="link" data-trix-key="k" title="`).concat(fe.link,'" tabindex="-1">').concat(fe.link,`</button>
      </span>

      <span class="trix-button-group trix-button-group--block-tools" data-trix-button-group="block-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-heading-1" data-trix-attribute="heading1" title="`).concat(fe.heading1,'" tabindex="-1">').concat(fe.heading1,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-quote" data-trix-attribute="quote" title="`).concat(fe.quote,'" tabindex="-1">').concat(fe.quote,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-code" data-trix-attribute="code" title="`).concat(fe.code,'" tabindex="-1">').concat(fe.code,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-bullet-list" data-trix-attribute="bullet" title="`).concat(fe.bullets,'" tabindex="-1">').concat(fe.bullets,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-number-list" data-trix-attribute="number" title="`).concat(fe.numbers,'" tabindex="-1">').concat(fe.numbers,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-decrease-nesting-level" data-trix-action="decreaseNestingLevel" title="`).concat(fe.outdent,'" tabindex="-1">').concat(fe.outdent,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-increase-nesting-level" data-trix-action="increaseNestingLevel" title="`).concat(fe.indent,'" tabindex="-1">').concat(fe.indent,`</button>
      </span>

      <span class="trix-button-group trix-button-group--file-tools" data-trix-button-group="file-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-attach" data-trix-action="attachFiles" title="`).concat(fe.attachFiles,'" tabindex="-1">').concat(fe.attachFiles,`</button>
      </span>

      <span class="trix-button-group-spacer"></span>

      <span class="trix-button-group trix-button-group--history-tools" data-trix-button-group="history-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-undo" data-trix-action="undo" data-trix-key="z" title="`).concat(fe.undo,'" tabindex="-1">').concat(fe.undo,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-redo" data-trix-action="redo" data-trix-key="shift+z" title="`).concat(fe.redo,'" tabindex="-1">').concat(fe.redo,`</button>
      </span>
    </div>

    <div class="trix-dialogs" data-trix-dialogs>
      <div class="trix-dialog trix-dialog--link" data-trix-dialog="href" data-trix-dialog-attribute="href">
        <div class="trix-dialog__link-fields">
          <input type="url" name="href" class="trix-input trix-input--dialog" placeholder="`).concat(fe.urlPlaceholder,'" aria-label="').concat(fe.url,`" data-trix-validate-href required data-trix-input>
          <div class="trix-button-group">
            <input type="button" class="trix-button trix-button--dialog" value="`).concat(fe.link,`" data-trix-method="setAttribute">
            <input type="button" class="trix-button trix-button--dialog" value="`).concat(fe.unlink,`" data-trix-method="removeAttribute">
          </div>
        </div>
      </div>
    </div>`)},tu={interval:5e3},os=Object.freeze({__proto__:null,attachments:yu,blockAttributes:wt,browser:as,css:{attachment:"attachment",attachmentCaption:"attachment__caption",attachmentCaptionEditor:"attachment__caption-editor",attachmentMetadata:"attachment__metadata",attachmentMetadataContainer:"attachment__metadata-container",attachmentName:"attachment__name",attachmentProgress:"attachment__progress",attachmentSize:"attachment__size",attachmentToolbar:"attachment__toolbar",attachmentGallery:"attachment-gallery"},dompurify:Gd,fileSize:Xd,input:ku,keyNames:{8:"backspace",9:"tab",13:"return",27:"escape",37:"left",39:"right",46:"delete",68:"d",72:"h",79:"o"},lang:fe,parser:ra,textAttributes:Mn,toolbar:ec,undo:tu}),Ge=class{static proxyMethod(e){let{name:t,toMethod:n,toProperty:r,optional:s}=qf(e);this.prototype[t]=function(){let a,u;var c,v;return n?u=s?(c=this[n])===null||c===void 0?void 0:c.call(this):this[n]():r&&(u=this[r]),s?(a=(v=u)===null||v===void 0?void 0:v[t],a?vd.call(a,u,arguments):void 0):(a=u[t],vd.call(a,u,arguments))}}},qf=function(i){let e=i.match(Kf);if(!e)throw new Error("can't parse @proxyMethod expression: ".concat(i));let t={name:e[4]};return e[2]!=null?t.toMethod=e[1]:t.toProperty=e[1],e[3]!=null&&(t.optional=!0),t},{apply:vd}=Function.prototype,Kf=new RegExp("^(.+?)(\\(\\))?(\\?)?\\.(.+?)$"),Po,Io,Oo,Nn=class extends Ge{static box(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";return e instanceof this?e:this.fromUCS2String(e?.toString())}static fromUCS2String(e){return new this(e,iu(e))}static fromCodepoints(e){return new this(nu(e),e)}constructor(e,t){super(...arguments),this.ucs2String=e,this.codepoints=t,this.length=this.codepoints.length,this.ucs2Length=this.ucs2String.length}offsetToUCS2Offset(e){return nu(this.codepoints.slice(0,Math.max(0,e))).length}offsetFromUCS2Offset(e){return iu(this.ucs2String.slice(0,Math.max(0,e))).length}slice(){return this.constructor.fromCodepoints(this.codepoints.slice(...arguments))}charAt(e){return this.slice(e,e+1)}isEqualTo(e){return this.constructor.box(e).ucs2String===this.ucs2String}toJSON(){return this.ucs2String}getCacheKey(){return this.ucs2String}toString(){return this.ucs2String}},Jf=((Po=Array.from)===null||Po===void 0?void 0:Po.call(Array,"\u{1F47C}").length)===1,Gf=((Io=" ".codePointAt)===null||Io===void 0?void 0:Io.call(" ",0))!=null,Xf=((Oo=String.fromCodePoint)===null||Oo===void 0?void 0:Oo.call(String,32,128124))===" \u{1F47C}",iu,nu;iu=Jf&&Gf?i=>Array.from(i).map(e=>e.codePointAt(0)):function(i){let e=[],t=0,{length:n}=i;for(;t<n;){let r=i.charCodeAt(t++);if(55296<=r&&r<=56319&&t<n){let s=i.charCodeAt(t++);(64512&s)==56320?r=((1023&r)<<10)+(1023&s)+65536:t--}e.push(r)}return e},nu=Xf?i=>String.fromCodePoint(...Array.from(i||[])):function(i){return(()=>{let e=[];return Array.from(i).forEach(t=>{let n="";t>65535&&(t-=65536,n+=String.fromCharCode(t>>>10&1023|55296),t=56320|1023&t),e.push(n+String.fromCharCode(t))}),e})().join("")};var Yf=0,ji=class extends Ge{static fromJSONString(e){return this.fromJSON(JSON.parse(e))}constructor(){super(...arguments),this.id=++Yf}hasSameConstructorAs(e){return this.constructor===e?.constructor}isEqualTo(e){return this===e}inspect(){let e=[],t=this.contentsForInspection()||{};for(let n in t){let r=t[n];e.push("".concat(n,"=").concat(r))}return"#<".concat(this.constructor.name,":").concat(this.id).concat(e.length?" ".concat(e.join(", ")):"",">")}contentsForInspection(){}toJSONString(){return JSON.stringify(this)}toUTF16String(){return Nn.box(this)}getCacheKey(){return this.id.toString()}},Bn=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];if(i.length!==e.length)return!1;for(let t=0;t<i.length;t++)if(i[t]!==e[t])return!1;return!0},Au=function(i){let e=i.slice(0);for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return e.splice(...n),e},Zf=/[\u05BE\u05C0\u05C3\u05D0-\u05EA\u05F0-\u05F4\u061B\u061F\u0621-\u063A\u0640-\u064A\u066D\u0671-\u06B7\u06BA-\u06BE\u06C0-\u06CE\u06D0-\u06D5\u06E5\u06E6\u200F\u202B\u202E\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE72\uFE74\uFE76-\uFEFC]/,Qf=function(){let i=be("input",{dir:"auto",name:"x",dirName:"x.dir"}),e=be("textarea",{dir:"auto",name:"y",dirName:"y.dir"}),t=be("form");t.appendChild(i),t.appendChild(e);let n=function(){try{return new FormData(t).has(e.dirName)}catch{return!1}}(),r=function(){try{return i.matches(":dir(ltr),:dir(rtl)")}catch{return!1}}();return n?function(s){return e.value=s,new FormData(t).get(e.dirName)}:r?function(s){return i.value=s,i.matches(":dir(rtl)")?"rtl":"ltr"}:function(s){let a=s.trim().charAt(0);return Zf.test(a)?"rtl":"ltr"}}(),Mo=null,No=null,Bo=null,Zs=null,ru=()=>(Mo||(Mo=tp().concat(ep())),Mo),Xe=i=>wt[i],ep=()=>(No||(No=Object.keys(wt)),No),su=i=>Mn[i],tp=()=>(Bo||(Bo=Object.keys(Mn)),Bo),tc=function(i,e){ip(i).textContent=e.replace(/%t/g,i)},ip=function(i){let e=document.createElement("style");e.setAttribute("type","text/css"),e.setAttribute("data-tag-name",i.toLowerCase());let t=np();return t&&e.setAttribute("nonce",t),document.head.insertBefore(e,document.head.firstChild),e},np=function(){let i=bd("trix-csp-nonce")||bd("csp-nonce");if(i){let{nonce:e,content:t}=i;return e==""?t:e}},bd=i=>document.head.querySelector("meta[name=".concat(i,"]")),yd={"application/x-trix-feature-detection":"test"},ic=function(i){let e=i.getData("text/plain"),t=i.getData("text/html");if(!e||!t)return e?.length;{let{body:n}=new DOMParser().parseFromString(t,"text/html");if(n.textContent===e)return!n.querySelector("*")}},nc=/Mac|^iP/.test(navigator.platform)?i=>i.metaKey:i=>i.ctrlKey,Eu=i=>setTimeout(i,1),rc=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e={};for(let t in i){let n=i[t];e[t]=n}return e},pr=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(Object.keys(i).length!==Object.keys(e).length)return!1;for(let t in i)if(i[t]!==e[t])return!1;return!0},Ie=function(i){if(i!=null)return Array.isArray(i)||(i=[i,i]),[wd(i[0]),wd(i[1]!=null?i[1]:i[0])]},Fi=function(i){if(i==null)return;let[e,t]=Ie(i);return au(e,t)},ua=function(i,e){if(i==null||e==null)return;let[t,n]=Ie(i),[r,s]=Ie(e);return au(t,r)&&au(n,s)},wd=function(i){return typeof i=="number"?i:rc(i)},au=function(i,e){return typeof i=="number"?i===e:pr(i,e)},la=class extends Ge{constructor(){super(...arguments),this.update=this.update.bind(this),this.selectionManagers=[]}start(){this.started||(this.started=!0,document.addEventListener("selectionchange",this.update,!0))}stop(){if(this.started)return this.started=!1,document.removeEventListener("selectionchange",this.update,!0)}registerSelectionManager(e){if(!this.selectionManagers.includes(e))return this.selectionManagers.push(e),this.start()}unregisterSelectionManager(e){if(this.selectionManagers=this.selectionManagers.filter(t=>t!==e),this.selectionManagers.length===0)return this.stop()}notifySelectionManagersOfSelectionChange(){return this.selectionManagers.map(e=>e.selectionDidChange())}update(){this.notifySelectionManagersOfSelectionChange()}reset(){this.update()}},Fn=new la,sc=function(){let i=window.getSelection();if(i.rangeCount>0)return i},Qr=function(){var i;let e=(i=sc())===null||i===void 0?void 0:i.getRangeAt(0);if(e&&!rp(e))return e},ac=function(i){let e=window.getSelection();return e.removeAllRanges(),e.addRange(i),Fn.update()},rp=i=>_d(i.startContainer)||_d(i.endContainer),_d=i=>!Object.getPrototypeOf(i),Gr=i=>i.replace(new RegExp("".concat(xa),"g"),"").replace(new RegExp("".concat(an),"g")," "),Cu=new RegExp("[^\\S".concat(an,"]")),Su=i=>i.replace(new RegExp("".concat(Cu.source),"g")," ").replace(/\ {2,}/g," "),kd=function(i,e){if(i.isEqualTo(e))return["",""];let t=Fo(i,e),{length:n}=t.utf16String,r;if(n){let{offset:s}=t,a=i.codepoints.slice(0,s).concat(i.codepoints.slice(s+n));r=Fo(e,Nn.fromCodepoints(a))}else r=Fo(e,i);return[t.utf16String.toString(),r.utf16String.toString()]},Fo=function(i,e){let t=0,n=i.length,r=e.length;for(;t<n&&i.charAt(t).isEqualTo(e.charAt(t));)t++;for(;n>t+1&&i.charAt(n-1).isEqualTo(e.charAt(r-1));)n--,r--;return{utf16String:i.slice(t,n),offset:t}},_t=class extends ji{static fromCommonAttributesOfObjects(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];if(!e.length)return new this;let t=Ur(e[0]),n=t.getKeys();return e.slice(1).forEach(r=>{n=t.getKeysCommonToHash(Ur(r)),t=t.slice(n)}),t}static box(e){return Ur(e)}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};super(...arguments),this.values=sa(e)}add(e,t){return this.merge(sp(e,t))}remove(e){return new _t(sa(this.values,e))}get(e){return this.values[e]}has(e){return e in this.values}merge(e){return new _t(ap(this.values,op(e)))}slice(e){let t={};return Array.from(e).forEach(n=>{this.has(n)&&(t[n]=this.values[n])}),new _t(t)}getKeys(){return Object.keys(this.values)}getKeysCommonToHash(e){return e=Ur(e),this.getKeys().filter(t=>this.values[t]===e.values[t])}isEqualTo(e){return Bn(this.toArray(),Ur(e).toArray())}isEmpty(){return this.getKeys().length===0}toArray(){if(!this.array){let e=[];for(let t in this.values){let n=this.values[t];e.push(e.push(t,n))}this.array=e.slice(0)}return this.array}toObject(){return sa(this.values)}toJSON(){return this.toObject()}contentsForInspection(){return{values:JSON.stringify(this.values)}}},sp=function(i,e){let t={};return t[i]=e,t},ap=function(i,e){let t=sa(i);for(let n in e){let r=e[n];t[n]=r}return t},sa=function(i,e){let t={};return Object.keys(i).sort().forEach(n=>{n!==e&&(t[n]=i[n])}),t},Ur=function(i){return i instanceof _t?i:new _t(i)},op=function(i){return i instanceof _t?i.values:i},ts=class{static groupObjects(){let e,t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],{depth:n,asTree:r}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};r&&n==null&&(n=0);let s=[];return Array.from(t).forEach(a=>{var u;if(e){var c,v,k;if((c=a.canBeGrouped)!==null&&c!==void 0&&c.call(a,n)&&(v=(k=e[e.length-1]).canBeGroupedWith)!==null&&v!==void 0&&v.call(k,a,n))return void e.push(a);s.push(new this(e,{depth:n,asTree:r})),e=null}(u=a.canBeGrouped)!==null&&u!==void 0&&u.call(a,n)?e=[a]:s.push(a)}),e&&s.push(new this(e,{depth:n,asTree:r})),s}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],{depth:t,asTree:n}=arguments.length>1?arguments[1]:void 0;this.objects=e,n&&(this.depth=t,this.objects=this.constructor.groupObjects(this.objects,{asTree:n,depth:this.depth+1}))}getObjects(){return this.objects}getDepth(){return this.depth}getCacheKey(){let e=["objectGroup"];return Array.from(this.getObjects()).forEach(t=>{e.push(t.getCacheKey())}),e.join("/")}},ou=class extends Ge{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),this.objects={},Array.from(e).forEach(t=>{let n=JSON.stringify(t);this.objects[n]==null&&(this.objects[n]=t)})}find(e){let t=JSON.stringify(e);return this.objects[t]}},uu=class{constructor(e){this.reset(e)}add(e){let t=Ad(e);this.elements[t]=e}remove(e){let t=Ad(e),n=this.elements[t];if(n)return delete this.elements[t],n}reset(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];return this.elements={},Array.from(e).forEach(t=>{this.add(t)}),e}},Ad=i=>i.dataset.trixStoreKey,lr=class extends Ge{isPerforming(){return this.performing===!0}hasPerformed(){return this.performed===!0}hasSucceeded(){return this.performed&&this.succeeded}hasFailed(){return this.performed&&!this.succeeded}getPromise(){return this.promise||(this.promise=new Promise((e,t)=>(this.performing=!0,this.perform((n,r)=>{this.succeeded=n,this.performing=!1,this.performed=!0,this.succeeded?e(r):t(r)})))),this.promise}perform(e){return e(!1)}release(){var e,t;(e=this.promise)===null||e===void 0||(t=e.cancel)===null||t===void 0||t.call(e),this.promise=null,this.performing=null,this.performed=null,this.succeeded=null}};lr.proxyMethod("getPromise().then"),lr.proxyMethod("getPromise().catch");var Hi=class extends Ge{constructor(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.object=e,this.options=t,this.childViews=[],this.rootView=this}getNodes(){return this.nodes||(this.nodes=this.createNodes()),this.nodes.map(e=>e.cloneNode(!0))}invalidate(){var e;return this.nodes=null,this.childViews=[],(e=this.parentView)===null||e===void 0?void 0:e.invalidate()}invalidateViewForObject(e){var t;return(t=this.findViewForObject(e))===null||t===void 0?void 0:t.invalidate()}findOrCreateCachedChildView(e,t,n){let r=this.getCachedViewForObject(t);return r?this.recordChildView(r):(r=this.createChildView(...arguments),this.cacheViewForObject(r,t)),r}createChildView(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};t instanceof ts&&(n.viewClass=e,e=lu);let r=new e(t,n);return this.recordChildView(r)}recordChildView(e){return e.parentView=this,e.rootView=this.rootView,this.childViews.push(e),e}getAllChildViews(){let e=[];return this.childViews.forEach(t=>{e.push(t),e=e.concat(t.getAllChildViews())}),e}findElement(){return this.findElementForObject(this.object)}findElementForObject(e){let t=e?.id;if(t)return this.rootView.element.querySelector("[data-trix-id='".concat(t,"']"))}findViewForObject(e){for(let t of this.getAllChildViews())if(t.object===e)return t}getViewCache(){return this.rootView!==this?this.rootView.getViewCache():this.isViewCachingEnabled()?(this.viewCache||(this.viewCache={}),this.viewCache):void 0}isViewCachingEnabled(){return this.shouldCacheViews!==!1}enableViewCaching(){this.shouldCacheViews=!0}disableViewCaching(){this.shouldCacheViews=!1}getCachedViewForObject(e){var t;return(t=this.getViewCache())===null||t===void 0?void 0:t[e.getCacheKey()]}cacheViewForObject(e,t){let n=this.getViewCache();n&&(n[t.getCacheKey()]=e)}garbageCollectCachedViews(){let e=this.getViewCache();if(e){let t=this.getAllChildViews().concat(this).map(n=>n.object.getCacheKey());for(let n in e)t.includes(n)||delete e[n]}}},lu=class extends Hi{constructor(){super(...arguments),this.objectGroup=this.object,this.viewClass=this.options.viewClass,delete this.options.viewClass}getChildViews(){return this.childViews.length||Array.from(this.objectGroup.getObjects()).forEach(e=>{this.findOrCreateCachedChildView(this.viewClass,e,this.options)}),this.childViews}createNodes(){let e=this.createContainerElement();return this.getChildViews().forEach(t=>{Array.from(t.getNodes()).forEach(n=>{e.appendChild(n)})}),[e]}createContainerElement(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:this.objectGroup.getDepth();return this.getChildViews()[0].createContainerElement(e)}};var{entries:oc,setPrototypeOf:Ed,isFrozen:up,getPrototypeOf:lp,getOwnPropertyDescriptor:dp}=Object,{freeze:kt,seal:Zt,create:uc}=Object,{apply:du,construct:cu}=typeof Reflect<"u"&&Reflect;kt||(kt=function(i){return i}),Zt||(Zt=function(i){return i}),du||(du=function(i,e,t){return i.apply(e,t)}),cu||(cu=function(i,e){return new i(...e)});var Qs=Wt(Array.prototype.forEach),Cd=Wt(Array.prototype.pop),Wr=Wt(Array.prototype.push),aa=Wt(String.prototype.toLowerCase),jo=Wt(String.prototype.toString),Sd=Wt(String.prototype.match),$r=Wt(String.prototype.replace),cp=Wt(String.prototype.indexOf),hp=Wt(String.prototype.trim),ui=Wt(Object.prototype.hasOwnProperty),bt=Wt(RegExp.prototype.test),qr=(Dd=TypeError,function(){for(var i=arguments.length,e=new Array(i),t=0;t<i;t++)e[t]=arguments[t];return cu(Dd,e)}),Dd;function Wt(i){return function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return du(i,e,n)}}function we(i,e){let t=arguments.length>2&&arguments[2]!==void 0?arguments[2]:aa;Ed&&Ed(i,null);let n=e.length;for(;n--;){let r=e[n];if(typeof r=="string"){let s=t(r);s!==r&&(up(e)||(e[n]=s),r=s)}i[r]=!0}return i}function fp(i){for(let e=0;e<i.length;e++)ui(i,e)||(i[e]=null);return i}function xn(i){let e=uc(null);for(let[t,n]of oc(i))ui(i,t)&&(Array.isArray(n)?e[t]=fp(n):n&&typeof n=="object"&&n.constructor===Object?e[t]=xn(n):e[t]=n);return e}function Kr(i,e){for(;i!==null;){let t=dp(i,e);if(t){if(t.get)return Wt(t.get);if(typeof t.value=="function")return Wt(t.value)}i=lp(i)}return function(){return null}}var Td=kt(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),Ho=kt(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),zo=kt(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),pp=kt(["animate","color-profile","cursor","discard","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),Vo=kt(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover","mprescripts"]),gp=kt(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),xd=kt(["#text"]),Ld=kt(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","popover","popovertarget","popovertargetaction","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","wrap","xmlns","slot"]),Uo=kt(["accent-height","accumulate","additive","alignment-baseline","amplitude","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","exponent","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","intercept","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","slope","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","tablevalues","targetx","targety","transform","transform-origin","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),Rd=kt(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),ea=kt(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),mp=Zt(/\{\{[\w\W]*|[\w\W]*\}\}/gm),vp=Zt(/<%[\w\W]*|[\w\W]*%>/gm),bp=Zt(/\$\{[\w\W]*}/gm),yp=Zt(/^data-[\-\w.\u00B7-\uFFFF]+$/),wp=Zt(/^aria-[\-\w]+$/),lc=Zt(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),_p=Zt(/^(?:\w+script|data):/i),kp=Zt(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),dc=Zt(/^html$/i),Ap=Zt(/^[a-z][.\w]*(-[.\w]+)+$/i),Pd=Object.freeze({__proto__:null,ARIA_ATTR:wp,ATTR_WHITESPACE:kp,CUSTOM_ELEMENT:Ap,DATA_ATTR:yp,DOCTYPE_NAME:dc,ERB_EXPR:vp,IS_ALLOWED_URI:lc,IS_SCRIPT_OR_DATA:_p,MUSTACHE_EXPR:mp,TMPLIT_EXPR:bp}),Ep=1,Cp=3,Sp=7,Dp=8,Tp=9,xp=function(){return typeof window>"u"?null:window},da=function i(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:xp(),t=M=>i(M);if(t.version="3.2.3",t.removed=[],!e||!e.document||e.document.nodeType!==Tp)return t.isSupported=!1,t;let{document:n}=e,r=n,s=r.currentScript,{DocumentFragment:a,HTMLTemplateElement:u,Node:c,Element:v,NodeFilter:k,NamedNodeMap:A=e.NamedNodeMap||e.MozNamedAttrMap,HTMLFormElement:N,DOMParser:y,trustedTypes:d}=e,g=v.prototype,b=Kr(g,"cloneNode"),E=Kr(g,"remove"),P=Kr(g,"nextSibling"),o=Kr(g,"childNodes"),h=Kr(g,"parentNode");if(typeof u=="function"){let M=n.createElement("template");M.content&&M.content.ownerDocument&&(n=M.content.ownerDocument)}let f,_="",{implementation:C,createNodeIterator:I,createDocumentFragment:L,getElementsByTagName:F}=n,{importNode:K}=r,W={afterSanitizeAttributes:[],afterSanitizeElements:[],afterSanitizeShadowDOM:[],beforeSanitizeAttributes:[],beforeSanitizeElements:[],beforeSanitizeShadowDOM:[],uponSanitizeAttribute:[],uponSanitizeElement:[],uponSanitizeShadowNode:[]};t.isSupported=typeof oc=="function"&&typeof h=="function"&&C&&C.createHTMLDocument!==void 0;let{MUSTACHE_EXPR:q,ERB_EXPR:G,TMPLIT_EXPR:x,DATA_ATTR:U,ARIA_ATTR:z,IS_SCRIPT_OR_DATA:$,ATTR_WHITESPACE:ee,CUSTOM_ELEMENT:X}=Pd,{IS_ALLOWED_URI:ie}=Pd,ae=null,me=we({},[...Td,...Ho,...zo,...Vo,...xd]),re=null,ye=we({},[...Ld,...Uo,...Rd,...ea]),ne=Object.seal(uc(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),xe=null,je=null,He=!0,st=!0,At=!1,nt=!0,at=!1,ot=!0,Et=!1,di=!1,Vi=!1,Ct=!1,Qt=!1,ft=!1,cn=!0,ei=!1,$t=!0,Nt=!1,ti={},ii=null,hn=we({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]),Si=null,qt=we({},["audio","video","img","source","image","track"]),fn=null,pn=we({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),ci="http://www.w3.org/1998/Math/MathML",Kt="http://www.w3.org/2000/svg",et="http://www.w3.org/1999/xhtml",Bt=et,pt=!1,Ft=null,Di=we({},[ci,Kt,et],jo),St=we({},["mi","mo","mn","ms","mtext"]),Ui=we({},["annotation-xml"]),Wi=we({},["title","style","font","a","script"]),ni=null,gn=["application/xhtml+xml","text/html"],Ue=null,ri=null,$i=n.createElement("form"),Ti=function(M){return M instanceof RegExp||M instanceof Function},jt=function(){let M=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};if(!ri||ri!==M){if(M&&typeof M=="object"||(M={}),M=xn(M),ni=gn.indexOf(M.PARSER_MEDIA_TYPE)===-1?"text/html":M.PARSER_MEDIA_TYPE,Ue=ni==="application/xhtml+xml"?jo:aa,ae=ui(M,"ALLOWED_TAGS")?we({},M.ALLOWED_TAGS,Ue):me,re=ui(M,"ALLOWED_ATTR")?we({},M.ALLOWED_ATTR,Ue):ye,Ft=ui(M,"ALLOWED_NAMESPACES")?we({},M.ALLOWED_NAMESPACES,jo):Di,fn=ui(M,"ADD_URI_SAFE_ATTR")?we(xn(pn),M.ADD_URI_SAFE_ATTR,Ue):pn,Si=ui(M,"ADD_DATA_URI_TAGS")?we(xn(qt),M.ADD_DATA_URI_TAGS,Ue):qt,ii=ui(M,"FORBID_CONTENTS")?we({},M.FORBID_CONTENTS,Ue):hn,xe=ui(M,"FORBID_TAGS")?we({},M.FORBID_TAGS,Ue):{},je=ui(M,"FORBID_ATTR")?we({},M.FORBID_ATTR,Ue):{},ti=!!ui(M,"USE_PROFILES")&&M.USE_PROFILES,He=M.ALLOW_ARIA_ATTR!==!1,st=M.ALLOW_DATA_ATTR!==!1,At=M.ALLOW_UNKNOWN_PROTOCOLS||!1,nt=M.ALLOW_SELF_CLOSE_IN_ATTR!==!1,at=M.SAFE_FOR_TEMPLATES||!1,ot=M.SAFE_FOR_XML!==!1,Et=M.WHOLE_DOCUMENT||!1,Ct=M.RETURN_DOM||!1,Qt=M.RETURN_DOM_FRAGMENT||!1,ft=M.RETURN_TRUSTED_TYPE||!1,Vi=M.FORCE_BODY||!1,cn=M.SANITIZE_DOM!==!1,ei=M.SANITIZE_NAMED_PROPS||!1,$t=M.KEEP_CONTENT!==!1,Nt=M.IN_PLACE||!1,ie=M.ALLOWED_URI_REGEXP||lc,Bt=M.NAMESPACE||et,St=M.MATHML_TEXT_INTEGRATION_POINTS||St,Ui=M.HTML_INTEGRATION_POINTS||Ui,ne=M.CUSTOM_ELEMENT_HANDLING||{},M.CUSTOM_ELEMENT_HANDLING&&Ti(M.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(ne.tagNameCheck=M.CUSTOM_ELEMENT_HANDLING.tagNameCheck),M.CUSTOM_ELEMENT_HANDLING&&Ti(M.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(ne.attributeNameCheck=M.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),M.CUSTOM_ELEMENT_HANDLING&&typeof M.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements=="boolean"&&(ne.allowCustomizedBuiltInElements=M.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),at&&(st=!1),Qt&&(Ct=!0),ti&&(ae=we({},xd),re=[],ti.html===!0&&(we(ae,Td),we(re,Ld)),ti.svg===!0&&(we(ae,Ho),we(re,Uo),we(re,ea)),ti.svgFilters===!0&&(we(ae,zo),we(re,Uo),we(re,ea)),ti.mathMl===!0&&(we(ae,Vo),we(re,Rd),we(re,ea))),M.ADD_TAGS&&(ae===me&&(ae=xn(ae)),we(ae,M.ADD_TAGS,Ue)),M.ADD_ATTR&&(re===ye&&(re=xn(re)),we(re,M.ADD_ATTR,Ue)),M.ADD_URI_SAFE_ATTR&&we(fn,M.ADD_URI_SAFE_ATTR,Ue),M.FORBID_CONTENTS&&(ii===hn&&(ii=xn(ii)),we(ii,M.FORBID_CONTENTS,Ue)),$t&&(ae["#text"]=!0),Et&&we(ae,["html","head","body"]),ae.table&&(we(ae,["tbody"]),delete xe.tbody),M.TRUSTED_TYPES_POLICY){if(typeof M.TRUSTED_TYPES_POLICY.createHTML!="function")throw qr('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');if(typeof M.TRUSTED_TYPES_POLICY.createScriptURL!="function")throw qr('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');f=M.TRUSTED_TYPES_POLICY,_=f.createHTML("")}else f===void 0&&(f=function(te,Q){if(typeof te!="object"||typeof te.createPolicy!="function")return null;let pe=null,Ee="data-tt-policy-suffix";Q&&Q.hasAttribute(Ee)&&(pe=Q.getAttribute(Ee));let he="dompurify"+(pe?"#"+pe:"");try{return te.createPolicy(he,{createHTML:We=>We,createScriptURL:We=>We})}catch{return console.warn("TrustedTypes policy "+he+" could not be created."),null}}(d,s)),f!==null&&typeof _=="string"&&(_=f.createHTML(""));kt&&kt(M),ri=M}},qi=we({},[...Ho,...zo,...pp]),zn=we({},[...Vo,...gp]),gt=function(M){Wr(t.removed,{element:M});try{h(M).removeChild(M)}catch{E(M)}},hi=function(M,te){try{Wr(t.removed,{attribute:te.getAttributeNode(M),from:te})}catch{Wr(t.removed,{attribute:null,from:te})}if(te.removeAttribute(M),M==="is")if(Ct||Qt)try{gt(te)}catch{}else try{te.setAttribute(M,"")}catch{}},Vn=function(M){let te=null,Q=null;if(Vi)M="<remove></remove>"+M;else{let he=Sd(M,/^[\r\n\t ]+/);Q=he&&he[0]}ni==="application/xhtml+xml"&&Bt===et&&(M='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+M+"</body></html>");let pe=f?f.createHTML(M):M;if(Bt===et)try{te=new y().parseFromString(pe,ni)}catch{}if(!te||!te.documentElement){te=C.createDocument(Bt,"template",null);try{te.documentElement.innerHTML=pt?_:pe}catch{}}let Ee=te.body||te.documentElement;return M&&Q&&Ee.insertBefore(n.createTextNode(Q),Ee.childNodes[0]||null),Bt===et?F.call(te,Et?"html":"body")[0]:Et?te.documentElement:Ee},Ki=function(M){return I.call(M.ownerDocument||M,M,k.SHOW_ELEMENT|k.SHOW_COMMENT|k.SHOW_TEXT|k.SHOW_PROCESSING_INSTRUCTION|k.SHOW_CDATA_SECTION,null)},Jt=function(M){return M instanceof N&&(typeof M.nodeName!="string"||typeof M.textContent!="string"||typeof M.removeChild!="function"||!(M.attributes instanceof A)||typeof M.removeAttribute!="function"||typeof M.setAttribute!="function"||typeof M.namespaceURI!="string"||typeof M.insertBefore!="function"||typeof M.hasChildNodes!="function")},Un=function(M){return typeof c=="function"&&M instanceof c};function Dt(M,te,Q){Qs(M,pe=>{pe.call(t,te,Q,ri)})}let si=function(M){let te=null;if(Dt(W.beforeSanitizeElements,M,null),Jt(M))return gt(M),!0;let Q=Ue(M.nodeName);if(Dt(W.uponSanitizeElement,M,{tagName:Q,allowedTags:ae}),M.hasChildNodes()&&!Un(M.firstElementChild)&&bt(/<[/\w]/g,M.innerHTML)&&bt(/<[/\w]/g,M.textContent)||M.nodeType===Sp||ot&&M.nodeType===Dp&&bt(/<[/\w]/g,M.data))return gt(M),!0;if(!ae[Q]||xe[Q]){if(!xe[Q]&&Ji(Q)&&(ne.tagNameCheck instanceof RegExp&&bt(ne.tagNameCheck,Q)||ne.tagNameCheck instanceof Function&&ne.tagNameCheck(Q)))return!1;if($t&&!ii[Q]){let pe=h(M)||M.parentNode,Ee=o(M)||M.childNodes;if(Ee&&pe)for(let he=Ee.length-1;he>=0;--he){let We=b(Ee[he],!0);We.__removalCount=(M.__removalCount||0)+1,pe.insertBefore(We,P(M))}}return gt(M),!0}return M instanceof v&&!function(pe){let Ee=h(pe);Ee&&Ee.tagName||(Ee={namespaceURI:Bt,tagName:"template"});let he=aa(pe.tagName),We=aa(Ee.tagName);return!!Ft[pe.namespaceURI]&&(pe.namespaceURI===Kt?Ee.namespaceURI===et?he==="svg":Ee.namespaceURI===ci?he==="svg"&&(We==="annotation-xml"||St[We]):!!qi[he]:pe.namespaceURI===ci?Ee.namespaceURI===et?he==="math":Ee.namespaceURI===Kt?he==="math"&&Ui[We]:!!zn[he]:pe.namespaceURI===et?!(Ee.namespaceURI===Kt&&!Ui[We])&&!(Ee.namespaceURI===ci&&!St[We])&&!zn[he]&&(Wi[he]||!qi[he]):!(ni!=="application/xhtml+xml"||!Ft[pe.namespaceURI]))}(M)?(gt(M),!0):Q!=="noscript"&&Q!=="noembed"&&Q!=="noframes"||!bt(/<\/no(script|embed|frames)/i,M.innerHTML)?(at&&M.nodeType===Cp&&(te=M.textContent,Qs([q,G,x],pe=>{te=$r(te,pe," ")}),M.textContent!==te&&(Wr(t.removed,{element:M.cloneNode()}),M.textContent=te)),Dt(W.afterSanitizeElements,M,null),!1):(gt(M),!0)},fi=function(M,te,Q){if(cn&&(te==="id"||te==="name")&&(Q in n||Q in $i))return!1;if(!(st&&!je[te]&&bt(U,te))){if(!(He&&bt(z,te))){if(!re[te]||je[te]){if(!(Ji(M)&&(ne.tagNameCheck instanceof RegExp&&bt(ne.tagNameCheck,M)||ne.tagNameCheck instanceof Function&&ne.tagNameCheck(M))&&(ne.attributeNameCheck instanceof RegExp&&bt(ne.attributeNameCheck,te)||ne.attributeNameCheck instanceof Function&&ne.attributeNameCheck(te))||te==="is"&&ne.allowCustomizedBuiltInElements&&(ne.tagNameCheck instanceof RegExp&&bt(ne.tagNameCheck,Q)||ne.tagNameCheck instanceof Function&&ne.tagNameCheck(Q))))return!1}else if(!fn[te]){if(!bt(ie,$r(Q,ee,""))){if((te!=="src"&&te!=="xlink:href"&&te!=="href"||M==="script"||cp(Q,"data:")!==0||!Si[M])&&!(At&&!bt($,$r(Q,ee,"")))){if(Q)return!1}}}}}return!0},Ji=function(M){return M!=="annotation-xml"&&Sd(M,X)},Gi=function(M){Dt(W.beforeSanitizeAttributes,M,null);let{attributes:te}=M;if(!te||Jt(M))return;let Q={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:re,forceKeepAttr:void 0},pe=te.length;for(;pe--;){let Ee=te[pe],{name:he,namespaceURI:We,value:Tt}=Ee,ut=Ue(he),Ye=he==="value"?Tt:hp(Tt);if(Q.attrName=ut,Q.attrValue=Ye,Q.keepAttr=!0,Q.forceKeepAttr=void 0,Dt(W.uponSanitizeAttribute,M,Q),Ye=Q.attrValue,!ei||ut!=="id"&&ut!=="name"||(hi(he,M),Ye="user-content-"+Ye),ot&&bt(/((--!?|])>)|<\/(style|title)/i,Ye)){hi(he,M);continue}if(Q.forceKeepAttr||(hi(he,M),!Q.keepAttr))continue;if(!nt&&bt(/\/>/i,Ye)){hi(he,M);continue}at&&Qs([q,G,x],$n=>{Ye=$r(Ye,$n," ")});let Xi=Ue(M.nodeName);if(fi(Xi,ut,Ye)){if(f&&typeof d=="object"&&typeof d.getAttributeType=="function"&&!We)switch(d.getAttributeType(Xi,ut)){case"TrustedHTML":Ye=f.createHTML(Ye);break;case"TrustedScriptURL":Ye=f.createScriptURL(Ye)}try{We?M.setAttributeNS(We,he,Ye):M.setAttribute(he,Ye),Jt(M)?gt(M):Cd(t.removed)}catch{}}}Dt(W.afterSanitizeAttributes,M,null)},Wn=function M(te){let Q=null,pe=Ki(te);for(Dt(W.beforeSanitizeShadowDOM,te,null);Q=pe.nextNode();)Dt(W.uponSanitizeShadowNode,Q,null),si(Q),Gi(Q),Q.content instanceof a&&M(Q.content);Dt(W.afterSanitizeShadowDOM,te,null)};return t.sanitize=function(M){let te=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},Q=null,pe=null,Ee=null,he=null;if(pt=!M,pt&&(M="<!-->"),typeof M!="string"&&!Un(M)){if(typeof M.toString!="function")throw qr("toString is not a function");if(typeof(M=M.toString())!="string")throw qr("dirty is not a string, aborting")}if(!t.isSupported)return M;if(di||jt(te),t.removed=[],typeof M=="string"&&(Nt=!1),Nt){if(M.nodeName){let ut=Ue(M.nodeName);if(!ae[ut]||xe[ut])throw qr("root node is forbidden and cannot be sanitized in-place")}}else if(M instanceof c)Q=Vn("<!---->"),pe=Q.ownerDocument.importNode(M,!0),pe.nodeType===Ep&&pe.nodeName==="BODY"||pe.nodeName==="HTML"?Q=pe:Q.appendChild(pe);else{if(!Ct&&!at&&!Et&&M.indexOf("<")===-1)return f&&ft?f.createHTML(M):M;if(Q=Vn(M),!Q)return Ct?null:ft?_:""}Q&&Vi&&gt(Q.firstChild);let We=Ki(Nt?M:Q);for(;Ee=We.nextNode();)si(Ee),Gi(Ee),Ee.content instanceof a&&Wn(Ee.content);if(Nt)return M;if(Ct){if(Qt)for(he=L.call(Q.ownerDocument);Q.firstChild;)he.appendChild(Q.firstChild);else he=Q;return(re.shadowroot||re.shadowrootmode)&&(he=K.call(r,he,!0)),he}let Tt=Et?Q.outerHTML:Q.innerHTML;return Et&&ae["!doctype"]&&Q.ownerDocument&&Q.ownerDocument.doctype&&Q.ownerDocument.doctype.name&&bt(dc,Q.ownerDocument.doctype.name)&&(Tt="<!DOCTYPE "+Q.ownerDocument.doctype.name+`>
`+Tt),at&&Qs([q,G,x],ut=>{Tt=$r(Tt,ut," ")}),f&&ft?f.createHTML(Tt):Tt},t.setConfig=function(){jt(arguments.length>0&&arguments[0]!==void 0?arguments[0]:{}),di=!0},t.clearConfig=function(){ri=null,di=!1},t.isValidAttribute=function(M,te,Q){ri||jt({});let pe=Ue(M),Ee=Ue(te);return fi(pe,Ee,Q)},t.addHook=function(M,te){typeof te=="function"&&Wr(W[M],te)},t.removeHook=function(M){return Cd(W[M])},t.removeHooks=function(M){W[M]=[]},t.removeAllHooks=function(){W={afterSanitizeAttributes:[],afterSanitizeElements:[],afterSanitizeShadowDOM:[],beforeSanitizeAttributes:[],beforeSanitizeElements:[],beforeSanitizeShadowDOM:[],uponSanitizeAttribute:[],uponSanitizeElement:[],uponSanitizeShadowNode:[]}},t}();da.addHook("uponSanitizeAttribute",function(i,e){/^data-trix-/.test(e.attrName)&&(e.forceKeepAttr=!0)});var Lp="style href src width height language class".split(" "),Rp="javascript:".split(" "),Pp="script iframe form noscript".split(" "),dr=class extends Ge{static setHTML(e,t){let n=new this(t).sanitize(),r=n.getHTML?n.getHTML():n.outerHTML;e.innerHTML=r}static sanitize(e,t){let n=new this(e,t);return n.sanitize(),n}constructor(e){let{allowedAttributes:t,forbiddenProtocols:n,forbiddenElements:r}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.allowedAttributes=t||Lp,this.forbiddenProtocols=n||Rp,this.forbiddenElements=r||Pp,this.body=Ip(e)}sanitize(){return this.sanitizeElements(),this.normalizeListElementNesting(),da.setConfig(Gd),this.body=da.sanitize(this.body),this.body}getHTML(){return this.body.innerHTML}getBody(){return this.body}sanitizeElements(){let e=oa(this.body),t=[];for(;e.nextNode();){let n=e.currentNode;switch(n.nodeType){case Node.ELEMENT_NODE:this.elementIsRemovable(n)?t.push(n):this.sanitizeElement(n);break;case Node.COMMENT_NODE:t.push(n)}}return t.forEach(n=>un(n)),this.body}sanitizeElement(e){return e.hasAttribute("href")&&this.forbiddenProtocols.includes(e.protocol)&&e.removeAttribute("href"),Array.from(e.attributes).forEach(t=>{let{name:n}=t;this.allowedAttributes.includes(n)||n.indexOf("data-trix")===0||e.removeAttribute(n)}),e}normalizeListElementNesting(){return Array.from(this.body.querySelectorAll("ul,ol")).forEach(e=>{let t=e.previousElementSibling;t&&yt(t)==="li"&&t.appendChild(e)}),this.body}elementIsRemovable(e){if(e?.nodeType===Node.ELEMENT_NODE)return this.elementIsForbidden(e)||this.elementIsntSerializable(e)}elementIsForbidden(e){return this.forbiddenElements.includes(yt(e))}elementIsntSerializable(e){return e.getAttribute("data-trix-serialize")==="false"&&!Pn(e)}},Ip=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";i=i.replace(/<\/html[^>]*>[^]*$/i,"</html>");let e=document.implementation.createHTMLDocument("");return e.documentElement.innerHTML=i,Array.from(e.head.querySelectorAll("style")).forEach(t=>{e.body.appendChild(t)}),e.body},{css:sn}=os,is=class extends Hi{constructor(){super(...arguments),this.attachment=this.object,this.attachment.uploadProgressDelegate=this,this.attachmentPiece=this.options.piece}createContentNodes(){return[]}createNodes(){let e,t=e=be({tagName:"figure",className:this.getClassName(),data:this.getData(),editable:!1}),n=this.getHref();return n&&(e=be({tagName:"a",editable:!1,attributes:{href:n,tabindex:-1}}),t.appendChild(e)),this.attachment.hasContent()?dr.setHTML(e,this.attachment.getContent()):this.createContentNodes().forEach(r=>{e.appendChild(r)}),e.appendChild(this.createCaptionElement()),this.attachment.isPending()&&(this.progressElement=be({tagName:"progress",attributes:{class:sn.attachmentProgress,value:this.attachment.getUploadProgress(),max:100},data:{trixMutable:!0,trixStoreKey:["progressElement",this.attachment.id].join("/")}}),t.appendChild(this.progressElement)),[Id("left"),t,Id("right")]}createCaptionElement(){let e=be({tagName:"figcaption",className:sn.attachmentCaption}),t=this.attachmentPiece.getCaption();if(t)e.classList.add("".concat(sn.attachmentCaption,"--edited")),e.textContent=t;else{let n,r,s=this.getCaptionConfig();if(s.name&&(n=this.attachment.getFilename()),s.size&&(r=this.attachment.getFormattedFilesize()),n){let a=be({tagName:"span",className:sn.attachmentName,textContent:n});e.appendChild(a)}if(r){n&&e.appendChild(document.createTextNode(" "));let a=be({tagName:"span",className:sn.attachmentSize,textContent:r});e.appendChild(a)}}return e}getClassName(){let e=[sn.attachment,"".concat(sn.attachment,"--").concat(this.attachment.getType())],t=this.attachment.getExtension();return t&&e.push("".concat(sn.attachment,"--").concat(t)),e.join(" ")}getData(){let e={trixAttachment:JSON.stringify(this.attachment),trixContentType:this.attachment.getContentType(),trixId:this.attachment.id},{attributes:t}=this.attachmentPiece;return t.isEmpty()||(e.trixAttributes=JSON.stringify(t)),this.attachment.isPending()&&(e.trixSerialize=!1),e}getHref(){if(!Op(this.attachment.getContent(),"a"))return this.attachment.getHref()}getCaptionConfig(){var e;let t=this.attachment.getType(),n=rc((e=yu[t])===null||e===void 0?void 0:e.caption);return t==="file"&&(n.name=!0),n}findProgressElement(){var e;return(e=this.findElement())===null||e===void 0?void 0:e.querySelector("progress")}attachmentDidChangeUploadProgress(){let e=this.attachment.getUploadProgress(),t=this.findProgressElement();t&&(t.value=e)}},Id=i=>be({tagName:"span",textContent:xa,data:{trixCursorTarget:i,trixSerialize:!1}}),Op=function(i,e){let t=be("div");return dr.setHTML(t,i||""),t.querySelector(e)},ca=class extends is{constructor(){super(...arguments),this.attachment.previewDelegate=this}createContentNodes(){return this.image=be({tagName:"img",attributes:{src:""},data:{trixMutable:!0}}),this.refresh(this.image),[this.image]}createCaptionElement(){let e=super.createCaptionElement(...arguments);return e.textContent||e.setAttribute("data-trix-placeholder",fe.captionPlaceholder),e}refresh(e){var t;if(e||(e=(t=this.findElement())===null||t===void 0?void 0:t.querySelector("img")),e)return this.updateAttributesForImage(e)}updateAttributesForImage(e){let t=this.attachment.getURL(),n=this.attachment.getPreviewURL();if(e.src=n||t,n===t)e.removeAttribute("data-trix-serialized-attributes");else{let u=JSON.stringify({src:t});e.setAttribute("data-trix-serialized-attributes",u)}let r=this.attachment.getWidth(),s=this.attachment.getHeight();r!=null&&(e.width=r),s!=null&&(e.height=s);let a=["imageElement",this.attachment.id,e.src,e.width,e.height].join("/");e.dataset.trixStoreKey=a}attachmentDidChangeAttributes(){return this.refresh(this.image),this.refresh()}},ha=class extends Hi{constructor(){super(...arguments),this.piece=this.object,this.attributes=this.piece.getAttributes(),this.textConfig=this.options.textConfig,this.context=this.options.context,this.piece.attachment?this.attachment=this.piece.attachment:this.string=this.piece.toString()}createNodes(){let e=this.attachment?this.createAttachmentNodes():this.createStringNodes(),t=this.createElement();if(t){let n=function(r){for(;(s=r)!==null&&s!==void 0&&s.firstElementChild;){var s;r=r.firstElementChild}return r}(t);Array.from(e).forEach(r=>{n.appendChild(r)}),e=[t]}return e}createAttachmentNodes(){let e=this.attachment.isPreviewable()?ca:is;return this.createChildView(e,this.piece.attachment,{piece:this.piece}).getNodes()}createStringNodes(){var e;if((e=this.textConfig)!==null&&e!==void 0&&e.plaintext)return[document.createTextNode(this.string)];{let t=[],n=this.string.split(`
`);for(let r=0;r<n.length;r++){let s=n[r];if(r>0){let a=be("br");t.push(a)}if(s.length){let a=document.createTextNode(this.preserveSpaces(s));t.push(a)}}return t}}createElement(){let e,t,n,r={};for(t in this.attributes){n=this.attributes[t];let a=su(t);if(a){if(a.tagName){var s;let u=be(a.tagName);s?(s.appendChild(u),s=u):e=s=u}if(a.styleProperty&&(r[a.styleProperty]=n),a.style)for(t in a.style)n=a.style[t],r[t]=n}}if(Object.keys(r).length)for(t in e||(e=be("span")),r)n=r[t],e.style[t]=n;return e}createContainerElement(){for(let e in this.attributes){let t=this.attributes[e],n=su(e);if(n&&n.groupTagName){let r={};return r[e]=t,be(n.groupTagName,r)}}}preserveSpaces(e){return this.context.isLast&&(e=e.replace(/\ $/,an)),e=e.replace(/(\S)\ {3}(\S)/g,"$1 ".concat(an," $2")).replace(/\ {2}/g,"".concat(an," ")).replace(/\ {2}/g," ".concat(an)),(this.context.isFirst||this.context.followsWhitespace)&&(e=e.replace(/^\ /,an)),e}},fa=class extends Hi{constructor(){super(...arguments),this.text=this.object,this.textConfig=this.options.textConfig}createNodes(){let e=[],t=ts.groupObjects(this.getPieces()),n=t.length-1;for(let s=0;s<t.length;s++){let a=t[s],u={};s===0&&(u.isFirst=!0),s===n&&(u.isLast=!0),Mp(r)&&(u.followsWhitespace=!0);let c=this.findOrCreateCachedChildView(ha,a,{textConfig:this.textConfig,context:u});e.push(...Array.from(c.getNodes()||[]));var r=a}return e}getPieces(){return Array.from(this.text.getPieces()).filter(e=>!e.hasAttribute("blockBreak"))}},Mp=i=>/\s$/.test(i?.toString()),{css:Od}=os,pa=class extends Hi{constructor(){super(...arguments),this.block=this.object,this.attributes=this.block.getAttributes()}createNodes(){let e=[document.createComment("block")];if(this.block.isEmpty())e.push(be("br"));else{var t;let n=(t=Xe(this.block.getLastAttribute()))===null||t===void 0?void 0:t.text,r=this.findOrCreateCachedChildView(fa,this.block.text,{textConfig:n});e.push(...Array.from(r.getNodes()||[])),this.shouldAddExtraNewlineElement()&&e.push(be("br"))}if(this.attributes.length)return e;{let n,{tagName:r}=wt.default;this.block.isRTL()&&(n={dir:"rtl"});let s=be({tagName:r,attributes:n});return e.forEach(a=>s.appendChild(a)),[s]}}createContainerElement(e){let t={},n,r=this.attributes[e],{tagName:s,htmlAttributes:a=[]}=Xe(r);if(e===0&&this.block.isRTL()&&Object.assign(t,{dir:"rtl"}),r==="attachmentGallery"){let u=this.block.getBlockBreakPosition();n="".concat(Od.attachmentGallery," ").concat(Od.attachmentGallery,"--").concat(u)}return Object.entries(this.block.htmlAttributes).forEach(u=>{let[c,v]=u;a.includes(c)&&(t[c]=v)}),be({tagName:s,className:n,attributes:t})}shouldAddExtraNewlineElement(){return/\n\n$/.test(this.block.toString())}},cr=class extends Hi{static render(e){let t=be("div"),n=new this(e,{element:t});return n.render(),n.sync(),t}constructor(){super(...arguments),this.element=this.options.element,this.elementStore=new uu,this.setDocument(this.object)}setDocument(e){e.isEqualTo(this.document)||(this.document=this.object=e)}render(){if(this.childViews=[],this.shadowElement=be("div"),!this.document.isEmpty()){let e=ts.groupObjects(this.document.getBlocks(),{asTree:!0});Array.from(e).forEach(t=>{let n=this.findOrCreateCachedChildView(pa,t);Array.from(n.getNodes()).map(r=>this.shadowElement.appendChild(r))})}}isSynced(){return Np(this.shadowElement,this.element)}sync(){let e=this.createDocumentFragmentForSync();for(;this.element.lastChild;)this.element.removeChild(this.element.lastChild);return this.element.appendChild(e),this.didSync()}didSync(){return this.elementStore.reset(Md(this.element)),Eu(()=>this.garbageCollectCachedViews())}createDocumentFragmentForSync(){let e=document.createDocumentFragment();return Array.from(this.shadowElement.childNodes).forEach(t=>{e.appendChild(t.cloneNode(!0))}),Array.from(Md(e)).forEach(t=>{let n=this.elementStore.remove(t);n&&t.parentNode.replaceChild(n,t)}),e}},Md=i=>i.querySelectorAll("[data-trix-store-key]"),Np=(i,e)=>Nd(i.innerHTML)===Nd(e.innerHTML),Nd=i=>i.replace(/&nbsp;/g," ");function ta(i){var e,t;function n(s,a){try{var u=i[s](a),c=u.value,v=c instanceof Bp;Promise.resolve(v?c.v:c).then(function(k){if(v){var A=s==="return"?"return":"next";if(!c.k||k.done)return n(A,k);k=i[A](k).value}r(u.done?"return":"normal",k)},function(k){n("throw",k)})}catch(k){r("throw",k)}}function r(s,a){switch(s){case"return":e.resolve({value:a,done:!0});break;case"throw":e.reject(a);break;default:e.resolve({value:a,done:!1})}(e=e.next)?n(e.key,e.arg):t=null}this._invoke=function(s,a){return new Promise(function(u,c){var v={key:s,arg:a,resolve:u,reject:c,next:null};t?t=t.next=v:(e=t=v,n(s,a))})},typeof i.return!="function"&&(this.return=void 0)}function Bp(i,e){this.v=i,this.k=e}function Mt(i,e,t){return(e=Fp(e))in i?Object.defineProperty(i,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):i[e]=t,i}function Fp(i){var e=function(t,n){if(typeof t!="object"||t===null)return t;var r=t[Symbol.toPrimitive];if(r!==void 0){var s=r.call(t,n||"default");if(typeof s!="object")return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return(n==="string"?String:Number)(t)}(i,"string");return typeof e=="symbol"?e:String(e)}ta.prototype[typeof Symbol=="function"&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},ta.prototype.next=function(i){return this._invoke("next",i)},ta.prototype.throw=function(i){return this._invoke("throw",i)},ta.prototype.return=function(i){return this._invoke("return",i)};function Be(i,e){return jp(i,cc(i,e,"get"))}function Du(i,e,t){return Hp(i,cc(i,e,"set"),t),t}function cc(i,e,t){if(!e.has(i))throw new TypeError("attempted to "+t+" private field on non-instance");return e.get(i)}function jp(i,e){return e.get?e.get.call(i):e.value}function Hp(i,e,t){if(e.set)e.set.call(i,t);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=t}}function ia(i,e,t){if(!e.has(i))throw new TypeError("attempted to get private field on non-instance");return t}function hc(i,e){if(e.has(i))throw new TypeError("Cannot initialize the same private elements twice on an object")}function es(i,e,t){hc(i,e),e.set(i,t)}var zi=class extends ji{static registerType(e,t){t.type=e,this.types[e]=t}static fromJSON(e){let t=this.types[e.type];if(t)return t.fromJSON(e)}constructor(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.attributes=_t.box(t)}copyWithAttributes(e){return new this.constructor(this.getValue(),e)}copyWithAdditionalAttributes(e){return this.copyWithAttributes(this.attributes.merge(e))}copyWithoutAttribute(e){return this.copyWithAttributes(this.attributes.remove(e))}copy(){return this.copyWithAttributes(this.attributes)}getAttribute(e){return this.attributes.get(e)}getAttributesHash(){return this.attributes}getAttributes(){return this.attributes.toObject()}hasAttribute(e){return this.attributes.has(e)}hasSameStringValueAsPiece(e){return e&&this.toString()===e.toString()}hasSameAttributesAsPiece(e){return e&&(this.attributes===e.attributes||this.attributes.isEqualTo(e.attributes))}isBlockBreak(){return!1}isEqualTo(e){return super.isEqualTo(...arguments)||this.hasSameConstructorAs(e)&&this.hasSameStringValueAsPiece(e)&&this.hasSameAttributesAsPiece(e)}isEmpty(){return this.length===0}isSerializable(){return!0}toJSON(){return{type:this.constructor.type,attributes:this.getAttributes()}}contentsForInspection(){return{type:this.constructor.type,attributes:this.attributes.inspect()}}canBeGrouped(){return this.hasAttribute("href")}canBeGroupedWith(e){return this.getAttribute("href")===e.getAttribute("href")}getLength(){return this.length}canBeConsolidatedWith(e){return!1}};Mt(zi,"types",{});var ga=class extends lr{constructor(e){super(...arguments),this.url=e}perform(e){let t=new Image;t.onload=()=>(t.width=this.width=t.naturalWidth,t.height=this.height=t.naturalHeight,e(!0,t)),t.onerror=()=>e(!1),t.src=this.url}},ln=class extends ji{static attachmentForFile(e){let t=new this(this.attributesForFile(e));return t.setFile(e),t}static attributesForFile(e){return new _t({filename:e.name,filesize:e.size,contentType:e.type})}static fromJSON(e){return new this(e)}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};super(e),this.releaseFile=this.releaseFile.bind(this),this.attributes=_t.box(e),this.didChangeAttributes()}getAttribute(e){return this.attributes.get(e)}hasAttribute(e){return this.attributes.has(e)}getAttributes(){return this.attributes.toObject()}setAttributes(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=this.attributes.merge(e);var n,r,s,a;if(!this.attributes.isEqualTo(t))return this.attributes=t,this.didChangeAttributes(),(n=this.previewDelegate)===null||n===void 0||(r=n.attachmentDidChangeAttributes)===null||r===void 0||r.call(n,this),(s=this.delegate)===null||s===void 0||(a=s.attachmentDidChangeAttributes)===null||a===void 0?void 0:a.call(s,this)}didChangeAttributes(){if(this.isPreviewable())return this.preloadURL()}isPending(){return this.file!=null&&!(this.getURL()||this.getHref())}isPreviewable(){return this.attributes.has("previewable")?this.attributes.get("previewable"):ln.previewablePattern.test(this.getContentType())}getType(){return this.hasContent()?"content":this.isPreviewable()?"preview":"file"}getURL(){return this.attributes.get("url")}getHref(){return this.attributes.get("href")}getFilename(){return this.attributes.get("filename")||""}getFilesize(){return this.attributes.get("filesize")}getFormattedFilesize(){let e=this.attributes.get("filesize");return typeof e=="number"?Xd.formatter(e):""}getExtension(){var e;return(e=this.getFilename().match(/\.(\w+)$/))===null||e===void 0?void 0:e[1].toLowerCase()}getContentType(){return this.attributes.get("contentType")}hasContent(){return this.attributes.has("content")}getContent(){return this.attributes.get("content")}getWidth(){return this.attributes.get("width")}getHeight(){return this.attributes.get("height")}getFile(){return this.file}setFile(e){if(this.file=e,this.isPreviewable())return this.preloadFile()}releaseFile(){this.releasePreloadedFile(),this.file=null}getUploadProgress(){return this.uploadProgress!=null?this.uploadProgress:0}setUploadProgress(e){var t,n;if(this.uploadProgress!==e)return this.uploadProgress=e,(t=this.uploadProgressDelegate)===null||t===void 0||(n=t.attachmentDidChangeUploadProgress)===null||n===void 0?void 0:n.call(t,this)}toJSON(){return this.getAttributes()}getCacheKey(){return[super.getCacheKey(...arguments),this.attributes.getCacheKey(),this.getPreviewURL()].join("/")}getPreviewURL(){return this.previewURL||this.preloadingURL}setPreviewURL(e){var t,n,r,s;if(e!==this.getPreviewURL())return this.previewURL=e,(t=this.previewDelegate)===null||t===void 0||(n=t.attachmentDidChangeAttributes)===null||n===void 0||n.call(t,this),(r=this.delegate)===null||r===void 0||(s=r.attachmentDidChangePreviewURL)===null||s===void 0?void 0:s.call(r,this)}preloadURL(){return this.preload(this.getURL(),this.releaseFile)}preloadFile(){if(this.file)return this.fileObjectURL=URL.createObjectURL(this.file),this.preload(this.fileObjectURL)}releasePreloadedFile(){this.fileObjectURL&&(URL.revokeObjectURL(this.fileObjectURL),this.fileObjectURL=null)}preload(e,t){if(e&&e!==this.getPreviewURL())return this.preloadingURL=e,new ga(e).then(n=>{let{width:r,height:s}=n;return this.getWidth()&&this.getHeight()||this.setAttributes({width:r,height:s}),this.preloadingURL=null,this.setPreviewURL(e),t?.()}).catch(()=>(this.preloadingURL=null,t?.()))}};Mt(ln,"previewablePattern",/^image(\/(gif|png|webp|jpe?g)|$)/);var dn=class extends zi{static fromJSON(e){return new this(ln.fromJSON(e.attachment),e.attributes)}constructor(e){super(...arguments),this.attachment=e,this.length=1,this.ensureAttachmentExclusivelyHasAttribute("href"),this.attachment.hasContent()||this.removeProhibitedAttributes()}ensureAttachmentExclusivelyHasAttribute(e){this.hasAttribute(e)&&(this.attachment.hasAttribute(e)||this.attachment.setAttributes(this.attributes.slice([e])),this.attributes=this.attributes.remove(e))}removeProhibitedAttributes(){let e=this.attributes.slice(dn.permittedAttributes);e.isEqualTo(this.attributes)||(this.attributes=e)}getValue(){return this.attachment}isSerializable(){return!this.attachment.isPending()}getCaption(){return this.attributes.get("caption")||""}isEqualTo(e){var t;return super.isEqualTo(e)&&this.attachment.id===(e==null||(t=e.attachment)===null||t===void 0?void 0:t.id)}toString(){return"\uFFFC"}toJSON(){let e=super.toJSON(...arguments);return e.attachment=this.attachment,e}getCacheKey(){return[super.getCacheKey(...arguments),this.attachment.getCacheKey()].join("/")}toConsole(){return JSON.stringify(this.toString())}};Mt(dn,"permittedAttributes",["caption","presentation"]),zi.registerType("attachment",dn);var ns=class extends zi{static fromJSON(e){return new this(e.string,e.attributes)}constructor(e){super(...arguments),this.string=(t=>t.replace(/\r\n?/g,`
`))(e),this.length=this.string.length}getValue(){return this.string}toString(){return this.string.toString()}isBlockBreak(){return this.toString()===`
`&&this.getAttribute("blockBreak")===!0}toJSON(){let e=super.toJSON(...arguments);return e.string=this.string,e}canBeConsolidatedWith(e){return e&&this.hasSameConstructorAs(e)&&this.hasSameAttributesAsPiece(e)}consolidateWith(e){return new this.constructor(this.toString()+e.toString(),this.attributes)}splitAtOffset(e){let t,n;return e===0?(t=null,n=this):e===this.length?(t=this,n=null):(t=new this.constructor(this.string.slice(0,e),this.attributes),n=new this.constructor(this.string.slice(e),this.attributes)),[t,n]}toConsole(){let{string:e}=this;return e.length>15&&(e=e.slice(0,14)+"\u2026"),JSON.stringify(e.toString())}};zi.registerType("string",ns);var hr=class extends ji{static box(e){return e instanceof this?e:new this(e)}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),this.objects=e.slice(0),this.length=this.objects.length}indexOf(e){return this.objects.indexOf(e)}splice(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return new this.constructor(Au(this.objects,...t))}eachObject(e){return this.objects.map((t,n)=>e(t,n))}insertObjectAtIndex(e,t){return this.splice(t,0,e)}insertSplittableListAtIndex(e,t){return this.splice(t,0,...e.objects)}insertSplittableListAtPosition(e,t){let[n,r]=this.splitObjectAtPosition(t);return new this.constructor(n).insertSplittableListAtIndex(e,r)}editObjectAtIndex(e,t){return this.replaceObjectAtIndex(t(this.objects[e]),e)}replaceObjectAtIndex(e,t){return this.splice(t,1,e)}removeObjectAtIndex(e){return this.splice(e,1)}getObjectAtIndex(e){return this.objects[e]}getSplittableListInRange(e){let[t,n,r]=this.splitObjectsAtRange(e);return new this.constructor(t.slice(n,r+1))}selectSplittableList(e){let t=this.objects.filter(n=>e(n));return new this.constructor(t)}removeObjectsInRange(e){let[t,n,r]=this.splitObjectsAtRange(e);return new this.constructor(t).splice(n,r-n+1)}transformObjectsInRange(e,t){let[n,r,s]=this.splitObjectsAtRange(e),a=n.map((u,c)=>r<=c&&c<=s?t(u):u);return new this.constructor(a)}splitObjectsAtRange(e){let t,[n,r,s]=this.splitObjectAtPosition(Vp(e));return[n,t]=new this.constructor(n).splitObjectAtPosition(Up(e)+s),[n,r,t-1]}getObjectAtPosition(e){let{index:t}=this.findIndexAndOffsetAtPosition(e);return this.objects[t]}splitObjectAtPosition(e){let t,n,{index:r,offset:s}=this.findIndexAndOffsetAtPosition(e),a=this.objects.slice(0);if(r!=null)if(s===0)t=r,n=0;else{let u=this.getObjectAtIndex(r),[c,v]=u.splitAtOffset(s);a.splice(r,1,c,v),t=r+1,n=c.getLength()-s}else t=a.length,n=0;return[a,t,n]}consolidate(){let e=[],t=this.objects[0];return this.objects.slice(1).forEach(n=>{var r,s;(r=(s=t).canBeConsolidatedWith)!==null&&r!==void 0&&r.call(s,n)?t=t.consolidateWith(n):(e.push(t),t=n)}),t&&e.push(t),new this.constructor(e)}consolidateFromIndexToIndex(e,t){let n=this.objects.slice(0).slice(e,t+1),r=new this.constructor(n).consolidate().toArray();return this.splice(e,n.length,...r)}findIndexAndOffsetAtPosition(e){let t,n=0;for(t=0;t<this.objects.length;t++){let r=n+this.objects[t].getLength();if(n<=e&&e<r)return{index:t,offset:e-n};n=r}return{index:null,offset:null}}findPositionAtIndexAndOffset(e,t){let n=0;for(let r=0;r<this.objects.length;r++){let s=this.objects[r];if(r<e)n+=s.getLength();else if(r===e){n+=t;break}}return n}getEndPosition(){return this.endPosition==null&&(this.endPosition=0,this.objects.forEach(e=>this.endPosition+=e.getLength())),this.endPosition}toString(){return this.objects.join("")}toArray(){return this.objects.slice(0)}toJSON(){return this.toArray()}isEqualTo(e){return super.isEqualTo(...arguments)||zp(this.objects,e?.objects)}contentsForInspection(){return{objects:"[".concat(this.objects.map(e=>e.inspect()).join(", "),"]")}}},zp=function(i){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];if(i.length!==e.length)return!1;let t=!0;for(let n=0;n<i.length;n++){let r=i[n];t&&!r.isEqualTo(e[n])&&(t=!1)}return t},Vp=i=>i[0],Up=i=>i[1],Ut=class extends ji{static textForAttachmentWithAttributes(e,t){return new this([new dn(e,t)])}static textForStringWithAttributes(e,t){return new this([new ns(e,t)])}static fromJSON(e){return new this(Array.from(e).map(t=>zi.fromJSON(t)))}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments);let t=e.filter(n=>!n.isEmpty());this.pieceList=new hr(t)}copy(){return this.copyWithPieceList(this.pieceList)}copyWithPieceList(e){return new this.constructor(e.consolidate().toArray())}copyUsingObjectMap(e){let t=this.getPieces().map(n=>e.find(n)||n);return new this.constructor(t)}appendText(e){return this.insertTextAtPosition(e,this.getLength())}insertTextAtPosition(e,t){return this.copyWithPieceList(this.pieceList.insertSplittableListAtPosition(e.pieceList,t))}removeTextAtRange(e){return this.copyWithPieceList(this.pieceList.removeObjectsInRange(e))}replaceTextAtRange(e,t){return this.removeTextAtRange(t).insertTextAtPosition(e,t[0])}moveTextFromRangeToPosition(e,t){if(e[0]<=t&&t<=e[1])return;let n=this.getTextAtRange(e),r=n.getLength();return e[0]<t&&(t-=r),this.removeTextAtRange(e).insertTextAtPosition(n,t)}addAttributeAtRange(e,t,n){let r={};return r[e]=t,this.addAttributesAtRange(r,n)}addAttributesAtRange(e,t){return this.copyWithPieceList(this.pieceList.transformObjectsInRange(t,n=>n.copyWithAdditionalAttributes(e)))}removeAttributeAtRange(e,t){return this.copyWithPieceList(this.pieceList.transformObjectsInRange(t,n=>n.copyWithoutAttribute(e)))}setAttributesAtRange(e,t){return this.copyWithPieceList(this.pieceList.transformObjectsInRange(t,n=>n.copyWithAttributes(e)))}getAttributesAtPosition(e){var t;return((t=this.pieceList.getObjectAtPosition(e))===null||t===void 0?void 0:t.getAttributes())||{}}getCommonAttributes(){let e=Array.from(this.pieceList.toArray()).map(t=>t.getAttributes());return _t.fromCommonAttributesOfObjects(e).toObject()}getCommonAttributesAtRange(e){return this.getTextAtRange(e).getCommonAttributes()||{}}getExpandedRangeForAttributeAtOffset(e,t){let n,r=n=t,s=this.getLength();for(;r>0&&this.getCommonAttributesAtRange([r-1,n])[e];)r--;for(;n<s&&this.getCommonAttributesAtRange([t,n+1])[e];)n++;return[r,n]}getTextAtRange(e){return this.copyWithPieceList(this.pieceList.getSplittableListInRange(e))}getStringAtRange(e){return this.pieceList.getSplittableListInRange(e).toString()}getStringAtPosition(e){return this.getStringAtRange([e,e+1])}startsWithString(e){return this.getStringAtRange([0,e.length])===e}endsWithString(e){let t=this.getLength();return this.getStringAtRange([t-e.length,t])===e}getAttachmentPieces(){return this.pieceList.toArray().filter(e=>!!e.attachment)}getAttachments(){return this.getAttachmentPieces().map(e=>e.attachment)}getAttachmentAndPositionById(e){let t=0;for(let r of this.pieceList.toArray()){var n;if(((n=r.attachment)===null||n===void 0?void 0:n.id)===e)return{attachment:r.attachment,position:t};t+=r.length}return{attachment:null,position:null}}getAttachmentById(e){let{attachment:t}=this.getAttachmentAndPositionById(e);return t}getRangeOfAttachment(e){let t=this.getAttachmentAndPositionById(e.id),n=t.position;if(e=t.attachment)return[n,n+1]}updateAttributesForAttachment(e,t){let n=this.getRangeOfAttachment(t);return n?this.addAttributesAtRange(e,n):this}getLength(){return this.pieceList.getEndPosition()}isEmpty(){return this.getLength()===0}isEqualTo(e){var t;return super.isEqualTo(e)||(e==null||(t=e.pieceList)===null||t===void 0?void 0:t.isEqualTo(this.pieceList))}isBlockBreak(){return this.getLength()===1&&this.pieceList.getObjectAtIndex(0).isBlockBreak()}eachPiece(e){return this.pieceList.eachObject(e)}getPieces(){return this.pieceList.toArray()}getPieceAtPosition(e){return this.pieceList.getObjectAtPosition(e)}contentsForInspection(){return{pieceList:this.pieceList.inspect()}}toSerializableText(){let e=this.pieceList.selectSplittableList(t=>t.isSerializable());return this.copyWithPieceList(e)}toString(){return this.pieceList.toString()}toJSON(){return this.pieceList.toJSON()}toConsole(){return JSON.stringify(this.pieceList.toArray().map(e=>JSON.parse(e.toConsole())))}getDirection(){return Qf(this.toString())}isRTL(){return this.getDirection()==="rtl"}},Yt=class extends ji{static fromJSON(e){return new this(Ut.fromJSON(e.text),e.attributes,e.htmlAttributes)}constructor(e,t,n){super(...arguments),this.text=Wp(e||new Ut),this.attributes=t||[],this.htmlAttributes=n||{}}isEmpty(){return this.text.isBlockBreak()}isEqualTo(e){return!!super.isEqualTo(e)||this.text.isEqualTo(e?.text)&&Bn(this.attributes,e?.attributes)&&pr(this.htmlAttributes,e?.htmlAttributes)}copyWithText(e){return new Yt(e,this.attributes,this.htmlAttributes)}copyWithoutText(){return this.copyWithText(null)}copyWithAttributes(e){return new Yt(this.text,e,this.htmlAttributes)}copyWithoutAttributes(){return this.copyWithAttributes(null)}copyUsingObjectMap(e){let t=e.find(this.text);return t?this.copyWithText(t):this.copyWithText(this.text.copyUsingObjectMap(e))}addAttribute(e){let t=this.attributes.concat(Bd(e));return this.copyWithAttributes(t)}addHTMLAttribute(e,t){let n=Object.assign({},this.htmlAttributes,{[e]:t});return new Yt(this.text,this.attributes,n)}removeAttribute(e){let{listAttribute:t}=Xe(e),n=jd(jd(this.attributes,e),t);return this.copyWithAttributes(n)}removeLastAttribute(){return this.removeAttribute(this.getLastAttribute())}getLastAttribute(){return Fd(this.attributes)}getAttributes(){return this.attributes.slice(0)}getAttributeLevel(){return this.attributes.length}getAttributeAtLevel(e){return this.attributes[e-1]}hasAttribute(e){return this.attributes.includes(e)}hasAttributes(){return this.getAttributeLevel()>0}getLastNestableAttribute(){return Fd(this.getNestableAttributes())}getNestableAttributes(){return this.attributes.filter(e=>Xe(e).nestable)}getNestingLevel(){return this.getNestableAttributes().length}decreaseNestingLevel(){let e=this.getLastNestableAttribute();return e?this.removeAttribute(e):this}increaseNestingLevel(){let e=this.getLastNestableAttribute();if(e){let t=this.attributes.lastIndexOf(e),n=Au(this.attributes,t+1,0,...Bd(e));return this.copyWithAttributes(n)}return this}getListItemAttributes(){return this.attributes.filter(e=>Xe(e).listAttribute)}isListItem(){var e;return(e=Xe(this.getLastAttribute()))===null||e===void 0?void 0:e.listAttribute}isTerminalBlock(){var e;return(e=Xe(this.getLastAttribute()))===null||e===void 0?void 0:e.terminal}breaksOnReturn(){var e;return(e=Xe(this.getLastAttribute()))===null||e===void 0?void 0:e.breakOnReturn}findLineBreakInDirectionFromPosition(e,t){let n=this.toString(),r;switch(e){case"forward":r=n.indexOf(`
`,t);break;case"backward":r=n.slice(0,t).lastIndexOf(`
`)}if(r!==-1)return r}contentsForInspection(){return{text:this.text.inspect(),attributes:this.attributes}}toString(){return this.text.toString()}toJSON(){return{text:this.text,attributes:this.attributes,htmlAttributes:this.htmlAttributes}}getDirection(){return this.text.getDirection()}isRTL(){return this.text.isRTL()}getLength(){return this.text.getLength()}canBeConsolidatedWith(e){return!this.hasAttributes()&&!e.hasAttributes()&&this.getDirection()===e.getDirection()}consolidateWith(e){let t=Ut.textForStringWithAttributes(`
`),n=this.getTextWithoutBlockBreak().appendText(t);return this.copyWithText(n.appendText(e.text))}splitAtOffset(e){let t,n;return e===0?(t=null,n=this):e===this.getLength()?(t=this,n=null):(t=this.copyWithText(this.text.getTextAtRange([0,e])),n=this.copyWithText(this.text.getTextAtRange([e,this.getLength()]))),[t,n]}getBlockBreakPosition(){return this.text.getLength()-1}getTextWithoutBlockBreak(){return fc(this.text)?this.text.getTextAtRange([0,this.getBlockBreakPosition()]):this.text.copy()}canBeGrouped(e){return this.attributes[e]}canBeGroupedWith(e,t){let n=e.getAttributes(),r=n[t],s=this.attributes[t];return s===r&&!(Xe(s).group===!1&&!(()=>{if(!Zs){Zs=[];for(let a in wt){let{listAttribute:u}=wt[a];u!=null&&Zs.push(u)}}return Zs})().includes(n[t+1]))&&(this.getDirection()===e.getDirection()||e.isEmpty())}},Wp=function(i){return i=$p(i),i=Kp(i)},$p=function(i){let e=!1,t=i.getPieces(),n=t.slice(0,t.length-1),r=t[t.length-1];return r?(n=n.map(s=>s.isBlockBreak()?(e=!0,Jp(s)):s),e?new Ut([...n,r]):i):i},qp=Ut.textForStringWithAttributes(`
`,{blockBreak:!0}),Kp=function(i){return fc(i)?i:i.appendText(qp)},fc=function(i){let e=i.getLength();return e===0?!1:i.getTextAtRange([e-1,e]).isBlockBreak()},Jp=i=>i.copyWithoutAttribute("blockBreak"),Bd=function(i){let{listAttribute:e}=Xe(i);return e?[e,i]:[i]},Fd=i=>i.slice(-1)[0],jd=function(i,e){let t=i.lastIndexOf(e);return t===-1?i:Au(i,t,1)},Ot=class extends ji{static fromJSON(e){return new this(Array.from(e).map(t=>Yt.fromJSON(t)))}static fromString(e,t){let n=Ut.textForStringWithAttributes(e,t);return new this([new Yt(n)])}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),e.length===0&&(e=[new Yt]),this.blockList=hr.box(e)}isEmpty(){let e=this.getBlockAtIndex(0);return this.blockList.length===1&&e.isEmpty()&&!e.hasAttributes()}copy(){let e=(arguments.length>0&&arguments[0]!==void 0?arguments[0]:{}).consolidateBlocks?this.blockList.consolidate().toArray():this.blockList.toArray();return new this.constructor(e)}copyUsingObjectsFromDocument(e){let t=new ou(e.getObjects());return this.copyUsingObjectMap(t)}copyUsingObjectMap(e){let t=this.getBlocks().map(n=>e.find(n)||n.copyUsingObjectMap(e));return new this.constructor(t)}copyWithBaseBlockAttributes(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],t=this.getBlocks().map(n=>{let r=e.concat(n.getAttributes());return n.copyWithAttributes(r)});return new this.constructor(t)}replaceBlock(e,t){let n=this.blockList.indexOf(e);return n===-1?this:new this.constructor(this.blockList.replaceObjectAtIndex(t,n))}insertDocumentAtRange(e,t){let{blockList:n}=e;t=Ie(t);let[r]=t,{index:s,offset:a}=this.locationFromPosition(r),u=this,c=this.getBlockAtPosition(r);return Fi(t)&&c.isEmpty()&&!c.hasAttributes()?u=new this.constructor(u.blockList.removeObjectAtIndex(s)):c.getBlockBreakPosition()===a&&r++,u=u.removeTextAtRange(t),new this.constructor(u.blockList.insertSplittableListAtPosition(n,r))}mergeDocumentAtRange(e,t){let n,r;t=Ie(t);let[s]=t,a=this.locationFromPosition(s),u=this.getBlockAtIndex(a.index).getAttributes(),c=e.getBaseBlockAttributes(),v=u.slice(-c.length);if(Bn(c,v)){let N=u.slice(0,-c.length);n=e.copyWithBaseBlockAttributes(N)}else n=e.copy({consolidateBlocks:!0}).copyWithBaseBlockAttributes(u);let k=n.getBlockCount(),A=n.getBlockAtIndex(0);if(Bn(u,A.getAttributes())){let N=A.getTextWithoutBlockBreak();if(r=this.insertTextAtRange(N,t),k>1){n=new this.constructor(n.getBlocks().slice(1));let y=s+N.getLength();r=r.insertDocumentAtRange(n,y)}}else r=this.insertDocumentAtRange(n,t);return r}insertTextAtRange(e,t){t=Ie(t);let[n]=t,{index:r,offset:s}=this.locationFromPosition(n),a=this.removeTextAtRange(t);return new this.constructor(a.blockList.editObjectAtIndex(r,u=>u.copyWithText(u.text.insertTextAtPosition(e,s))))}removeTextAtRange(e){let t;e=Ie(e);let[n,r]=e;if(Fi(e))return this;let[s,a]=Array.from(this.locationRangeFromRange(e)),u=s.index,c=s.offset,v=this.getBlockAtIndex(u),k=a.index,A=a.offset,N=this.getBlockAtIndex(k);if(r-n==1&&v.getBlockBreakPosition()===c&&N.getBlockBreakPosition()!==A&&N.text.getStringAtPosition(A)===`
`)t=this.blockList.editObjectAtIndex(k,y=>y.copyWithText(y.text.removeTextAtRange([A,A+1])));else{let y,d=v.text.getTextAtRange([0,c]),g=N.text.getTextAtRange([A,N.getLength()]),b=d.appendText(g);y=u!==k&&c===0&&v.getAttributeLevel()>=N.getAttributeLevel()?N.copyWithText(b):v.copyWithText(b);let E=k+1-u;t=this.blockList.splice(u,E,y)}return new this.constructor(t)}moveTextFromRangeToPosition(e,t){let n;e=Ie(e);let[r,s]=e;if(r<=t&&t<=s)return this;let a=this.getDocumentAtRange(e),u=this.removeTextAtRange(e),c=r<t;c&&(t-=a.getLength());let[v,...k]=a.getBlocks();return k.length===0?(n=v.getTextWithoutBlockBreak(),c&&(t+=1)):n=v.text,u=u.insertTextAtRange(n,t),k.length===0?u:(a=new this.constructor(k),t+=n.getLength(),u.insertDocumentAtRange(a,t))}addAttributeAtRange(e,t,n){let{blockList:r}=this;return this.eachBlockAtRange(n,(s,a,u)=>r=r.editObjectAtIndex(u,function(){return Xe(e)?s.addAttribute(e,t):a[0]===a[1]?s:s.copyWithText(s.text.addAttributeAtRange(e,t,a))})),new this.constructor(r)}addAttribute(e,t){let{blockList:n}=this;return this.eachBlock((r,s)=>n=n.editObjectAtIndex(s,()=>r.addAttribute(e,t))),new this.constructor(n)}removeAttributeAtRange(e,t){let{blockList:n}=this;return this.eachBlockAtRange(t,function(r,s,a){Xe(e)?n=n.editObjectAtIndex(a,()=>r.removeAttribute(e)):s[0]!==s[1]&&(n=n.editObjectAtIndex(a,()=>r.copyWithText(r.text.removeAttributeAtRange(e,s))))}),new this.constructor(n)}updateAttributesForAttachment(e,t){let n=this.getRangeOfAttachment(t),[r]=Array.from(n),{index:s}=this.locationFromPosition(r),a=this.getTextAtIndex(s);return new this.constructor(this.blockList.editObjectAtIndex(s,u=>u.copyWithText(a.updateAttributesForAttachment(e,t))))}removeAttributeForAttachment(e,t){let n=this.getRangeOfAttachment(t);return this.removeAttributeAtRange(e,n)}setHTMLAttributeAtPosition(e,t,n){let r=this.getBlockAtPosition(e),s=r.addHTMLAttribute(t,n);return this.replaceBlock(r,s)}insertBlockBreakAtRange(e){let t;e=Ie(e);let[n]=e,{offset:r}=this.locationFromPosition(n),s=this.removeTextAtRange(e);return r===0&&(t=[new Yt]),new this.constructor(s.blockList.insertSplittableListAtPosition(new hr(t),n))}applyBlockAttributeAtRange(e,t,n){let r=this.expandRangeToLineBreaksAndSplitBlocks(n),s=r.document;n=r.range;let a=Xe(e);if(a.listAttribute){s=s.removeLastListAttributeAtRange(n,{exceptAttributeName:e});let u=s.convertLineBreaksToBlockBreaksInRange(n);s=u.document,n=u.range}else s=a.exclusive?s.removeBlockAttributesAtRange(n):a.terminal?s.removeLastTerminalAttributeAtRange(n):s.consolidateBlocksAtRange(n);return s.addAttributeAtRange(e,t,n)}removeLastListAttributeAtRange(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},{blockList:n}=this;return this.eachBlockAtRange(e,function(r,s,a){let u=r.getLastAttribute();u&&Xe(u).listAttribute&&u!==t.exceptAttributeName&&(n=n.editObjectAtIndex(a,()=>r.removeAttribute(u)))}),new this.constructor(n)}removeLastTerminalAttributeAtRange(e){let{blockList:t}=this;return this.eachBlockAtRange(e,function(n,r,s){let a=n.getLastAttribute();a&&Xe(a).terminal&&(t=t.editObjectAtIndex(s,()=>n.removeAttribute(a)))}),new this.constructor(t)}removeBlockAttributesAtRange(e){let{blockList:t}=this;return this.eachBlockAtRange(e,function(n,r,s){n.hasAttributes()&&(t=t.editObjectAtIndex(s,()=>n.copyWithoutAttributes()))}),new this.constructor(t)}expandRangeToLineBreaksAndSplitBlocks(e){let t;e=Ie(e);let[n,r]=e,s=this.locationFromPosition(n),a=this.locationFromPosition(r),u=this,c=u.getBlockAtIndex(s.index);if(s.offset=c.findLineBreakInDirectionFromPosition("backward",s.offset),s.offset!=null&&(t=u.positionFromLocation(s),u=u.insertBlockBreakAtRange([t,t+1]),a.index+=1,a.offset-=u.getBlockAtIndex(s.index).getLength(),s.index+=1),s.offset=0,a.offset===0&&a.index>s.index)a.index-=1,a.offset=u.getBlockAtIndex(a.index).getBlockBreakPosition();else{let v=u.getBlockAtIndex(a.index);v.text.getStringAtRange([a.offset-1,a.offset])===`
`?a.offset-=1:a.offset=v.findLineBreakInDirectionFromPosition("forward",a.offset),a.offset!==v.getBlockBreakPosition()&&(t=u.positionFromLocation(a),u=u.insertBlockBreakAtRange([t,t+1]))}return n=u.positionFromLocation(s),r=u.positionFromLocation(a),{document:u,range:e=Ie([n,r])}}convertLineBreaksToBlockBreaksInRange(e){e=Ie(e);let[t]=e,n=this.getStringAtRange(e).slice(0,-1),r=this;return n.replace(/.*?\n/g,function(s){t+=s.length,r=r.insertBlockBreakAtRange([t-1,t])}),{document:r,range:e}}consolidateBlocksAtRange(e){e=Ie(e);let[t,n]=e,r=this.locationFromPosition(t).index,s=this.locationFromPosition(n).index;return new this.constructor(this.blockList.consolidateFromIndexToIndex(r,s))}getDocumentAtRange(e){e=Ie(e);let t=this.blockList.getSplittableListInRange(e).toArray();return new this.constructor(t)}getStringAtRange(e){let t,n=e=Ie(e);return n[n.length-1]!==this.getLength()&&(t=-1),this.getDocumentAtRange(e).toString().slice(0,t)}getBlockAtIndex(e){return this.blockList.getObjectAtIndex(e)}getBlockAtPosition(e){let{index:t}=this.locationFromPosition(e);return this.getBlockAtIndex(t)}getTextAtIndex(e){var t;return(t=this.getBlockAtIndex(e))===null||t===void 0?void 0:t.text}getTextAtPosition(e){let{index:t}=this.locationFromPosition(e);return this.getTextAtIndex(t)}getPieceAtPosition(e){let{index:t,offset:n}=this.locationFromPosition(e);return this.getTextAtIndex(t).getPieceAtPosition(n)}getCharacterAtPosition(e){let{index:t,offset:n}=this.locationFromPosition(e);return this.getTextAtIndex(t).getStringAtRange([n,n+1])}getLength(){return this.blockList.getEndPosition()}getBlocks(){return this.blockList.toArray()}getBlockCount(){return this.blockList.length}getEditCount(){return this.editCount}eachBlock(e){return this.blockList.eachObject(e)}eachBlockAtRange(e,t){let n,r;e=Ie(e);let[s,a]=e,u=this.locationFromPosition(s),c=this.locationFromPosition(a);if(u.index===c.index)return n=this.getBlockAtIndex(u.index),r=[u.offset,c.offset],t(n,r,u.index);for(let v=u.index;v<=c.index;v++)if(n=this.getBlockAtIndex(v),n){switch(v){case u.index:r=[u.offset,n.text.getLength()];break;case c.index:r=[0,c.offset];break;default:r=[0,n.text.getLength()]}t(n,r,v)}}getCommonAttributesAtRange(e){e=Ie(e);let[t]=e;if(Fi(e))return this.getCommonAttributesAtPosition(t);{let n=[],r=[];return this.eachBlockAtRange(e,function(s,a){if(a[0]!==a[1])return n.push(s.text.getCommonAttributesAtRange(a)),r.push(Hd(s))}),_t.fromCommonAttributesOfObjects(n).merge(_t.fromCommonAttributesOfObjects(r)).toObject()}}getCommonAttributesAtPosition(e){let t,n,{index:r,offset:s}=this.locationFromPosition(e),a=this.getBlockAtIndex(r);if(!a)return{};let u=Hd(a),c=a.text.getAttributesAtPosition(s),v=a.text.getAttributesAtPosition(s-1),k=Object.keys(Mn).filter(A=>Mn[A].inheritable);for(t in v)n=v[t],(n===c[t]||k.includes(t))&&(u[t]=n);return u}getRangeOfCommonAttributeAtPosition(e,t){let{index:n,offset:r}=this.locationFromPosition(t),s=this.getTextAtIndex(n),[a,u]=Array.from(s.getExpandedRangeForAttributeAtOffset(e,r)),c=this.positionFromLocation({index:n,offset:a}),v=this.positionFromLocation({index:n,offset:u});return Ie([c,v])}getBaseBlockAttributes(){let e=this.getBlockAtIndex(0).getAttributes();for(let t=1;t<this.getBlockCount();t++){let n=this.getBlockAtIndex(t).getAttributes(),r=Math.min(e.length,n.length);e=(()=>{let s=[];for(let a=0;a<r&&n[a]===e[a];a++)s.push(n[a]);return s})()}return e}getAttachmentById(e){for(let t of this.getAttachments())if(t.id===e)return t}getAttachmentPieces(){let e=[];return this.blockList.eachObject(t=>{let{text:n}=t;return e=e.concat(n.getAttachmentPieces())}),e}getAttachments(){return this.getAttachmentPieces().map(e=>e.attachment)}getRangeOfAttachment(e){let t=0,n=this.blockList.toArray();for(let r=0;r<n.length;r++){let{text:s}=n[r],a=s.getRangeOfAttachment(e);if(a)return Ie([t+a[0],t+a[1]]);t+=s.getLength()}}getLocationRangeOfAttachment(e){let t=this.getRangeOfAttachment(e);return this.locationRangeFromRange(t)}getAttachmentPieceForAttachment(e){for(let t of this.getAttachmentPieces())if(t.attachment===e)return t}findRangesForBlockAttribute(e){let t=0,n=[];return this.getBlocks().forEach(r=>{let s=r.getLength();r.hasAttribute(e)&&n.push([t,t+s]),t+=s}),n}findRangesForTextAttribute(e){let{withValue:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=0,r=[],s=[];return this.getPieces().forEach(a=>{let u=a.getLength();(function(c){return t?c.getAttribute(e)===t:c.hasAttribute(e)})(a)&&(r[1]===n?r[1]=n+u:s.push(r=[n,n+u])),n+=u}),s}locationFromPosition(e){let t=this.blockList.findIndexAndOffsetAtPosition(Math.max(0,e));if(t.index!=null)return t;{let n=this.getBlocks();return{index:n.length-1,offset:n[n.length-1].getLength()}}}positionFromLocation(e){return this.blockList.findPositionAtIndexAndOffset(e.index,e.offset)}locationRangeFromPosition(e){return Ie(this.locationFromPosition(e))}locationRangeFromRange(e){if(!(e=Ie(e)))return;let[t,n]=Array.from(e),r=this.locationFromPosition(t),s=this.locationFromPosition(n);return Ie([r,s])}rangeFromLocationRange(e){let t;e=Ie(e);let n=this.positionFromLocation(e[0]);return Fi(e)||(t=this.positionFromLocation(e[1])),Ie([n,t])}isEqualTo(e){return this.blockList.isEqualTo(e?.blockList)}getTexts(){return this.getBlocks().map(e=>e.text)}getPieces(){let e=[];return Array.from(this.getTexts()).forEach(t=>{e.push(...Array.from(t.getPieces()||[]))}),e}getObjects(){return this.getBlocks().concat(this.getTexts()).concat(this.getPieces())}toSerializableDocument(){let e=[];return this.blockList.eachObject(t=>e.push(t.copyWithText(t.text.toSerializableText()))),new this.constructor(e)}toString(){return this.blockList.toString()}toJSON(){return this.blockList.toJSON()}toConsole(){return JSON.stringify(this.blockList.toArray().map(e=>JSON.parse(e.text.toConsole())))}},Hd=function(i){let e={},t=i.getLastAttribute();return t&&(e[t]=!0),e},Wo=function(i){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return{string:i=Gr(i),attributes:e,type:"string"}},zd=(i,e)=>{try{return JSON.parse(i.getAttribute("data-trix-".concat(e)))}catch{return{}}},jn=class extends Ge{static parse(e,t){let n=new this(e,t);return n.parse(),n}constructor(e){let{referenceElement:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.html=e,this.referenceElement=t,this.blocks=[],this.blockElements=[],this.processedElements=[]}getDocument(){return Ot.fromJSON(this.blocks)}parse(){try{this.createHiddenContainer(),dr.setHTML(this.containerElement,this.html);let e=oa(this.containerElement,{usingFilter:Xp});for(;e.nextNode();)this.processNode(e.currentNode);return this.translateBlockElementMarginsToNewlines()}finally{this.removeHiddenContainer()}}createHiddenContainer(){return this.referenceElement?(this.containerElement=this.referenceElement.cloneNode(!1),this.containerElement.removeAttribute("id"),this.containerElement.setAttribute("data-trix-internal",""),this.containerElement.style.display="none",this.referenceElement.parentNode.insertBefore(this.containerElement,this.referenceElement.nextSibling)):(this.containerElement=be({tagName:"div",style:{display:"none"}}),document.body.appendChild(this.containerElement))}removeHiddenContainer(){return un(this.containerElement)}processNode(e){switch(e.nodeType){case Node.TEXT_NODE:if(!this.isInsignificantTextNode(e))return this.appendBlockForTextNode(e),this.processTextNode(e);break;case Node.ELEMENT_NODE:return this.appendBlockForElement(e),this.processElement(e)}}appendBlockForTextNode(e){let t=e.parentNode;if(t===this.currentBlockElement&&this.isBlockElement(e.previousSibling))return this.appendStringWithAttributes(`
`);if(t===this.containerElement||this.isBlockElement(t)){var n;let r=this.getBlockAttributes(t),s=this.getBlockHTMLAttributes(t);Bn(r,(n=this.currentBlock)===null||n===void 0?void 0:n.attributes)||(this.currentBlock=this.appendBlockForAttributesWithElement(r,t,s),this.currentBlockElement=t)}}appendBlockForElement(e){let t=this.isBlockElement(e),n=Ln(this.currentBlockElement,e);if(t&&!this.isBlockElement(e.firstChild)){if(!this.isInsignificantTextNode(e.firstChild)||!this.isBlockElement(e.firstElementChild)){let r=this.getBlockAttributes(e),s=this.getBlockHTMLAttributes(e);if(e.firstChild){if(n&&Bn(r,this.currentBlock.attributes))return this.appendStringWithAttributes(`
`);this.currentBlock=this.appendBlockForAttributesWithElement(r,e,s),this.currentBlockElement=e}}}else if(this.currentBlockElement&&!n&&!t){let r=this.findParentBlockElement(e);if(r)return this.appendBlockForElement(r);this.currentBlock=this.appendEmptyBlock(),this.currentBlockElement=null}}findParentBlockElement(e){let{parentElement:t}=e;for(;t&&t!==this.containerElement;){if(this.isBlockElement(t)&&this.blockElements.includes(t))return t;t=t.parentElement}return null}processTextNode(e){let t=e.data;var n;return Vd(e.parentNode)||(t=Su(t),pc((n=e.previousSibling)===null||n===void 0?void 0:n.textContent)&&(t=Yp(t))),this.appendStringWithAttributes(t,this.getTextAttributes(e.parentNode))}processElement(e){let t;if(Pn(e)){if(t=zd(e,"attachment"),Object.keys(t).length){let n=this.getTextAttributes(e);this.appendAttachmentWithAttributes(t,n),e.innerHTML=""}return this.processedElements.push(e)}switch(yt(e)){case"br":return this.isExtraBR(e)||this.isBlockElement(e.nextSibling)||this.appendStringWithAttributes(`
`,this.getTextAttributes(e)),this.processedElements.push(e);case"img":t={url:e.getAttribute("src"),contentType:"image"};let n=(r=>{let s=r.getAttribute("width"),a=r.getAttribute("height"),u={};return s&&(u.width=parseInt(s,10)),a&&(u.height=parseInt(a,10)),u})(e);for(let r in n){let s=n[r];t[r]=s}return this.appendAttachmentWithAttributes(t,this.getTextAttributes(e)),this.processedElements.push(e);case"tr":if(this.needsTableSeparator(e))return this.appendStringWithAttributes(ra.tableRowSeparator);break;case"td":if(this.needsTableSeparator(e))return this.appendStringWithAttributes(ra.tableCellSeparator)}}appendBlockForAttributesWithElement(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};this.blockElements.push(t);let r=function(){return{text:[],attributes:arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},htmlAttributes:arguments.length>1&&arguments[1]!==void 0?arguments[1]:{}}}(e,n);return this.blocks.push(r),r}appendEmptyBlock(){return this.appendBlockForAttributesWithElement([],null)}appendStringWithAttributes(e,t){return this.appendPiece(Wo(e,t))}appendAttachmentWithAttributes(e,t){return this.appendPiece(function(n){return{attachment:n,attributes:arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},type:"attachment"}}(e,t))}appendPiece(e){return this.blocks.length===0&&this.appendEmptyBlock(),this.blocks[this.blocks.length-1].text.push(e)}appendStringToTextAtIndex(e,t){let{text:n}=this.blocks[t],r=n[n.length-1];if(r?.type!=="string")return n.push(Wo(e));r.string+=e}prependStringToTextAtIndex(e,t){let{text:n}=this.blocks[t],r=n[0];if(r?.type!=="string")return n.unshift(Wo(e));r.string=e+r.string}getTextAttributes(e){let t,n={};for(let r in Mn){let s=Mn[r];if(s.tagName&&on(e,{matchingSelector:s.tagName,untilNode:this.containerElement}))n[r]=!0;else if(s.parser){if(t=s.parser(e),t){let a=!1;for(let u of this.findBlockElementAncestors(e))if(s.parser(u)===t){a=!0;break}a||(n[r]=t)}}else s.styleProperty&&(t=e.style[s.styleProperty],t&&(n[r]=t))}if(Pn(e)){let r=zd(e,"attributes");for(let s in r)t=r[s],n[s]=t}return n}getBlockAttributes(e){let t=[];for(;e&&e!==this.containerElement;){for(let r in wt){let s=wt[r];var n;s.parse!==!1&&yt(e)===s.tagName&&((n=s.test)!==null&&n!==void 0&&n.call(s,e)||!s.test)&&(t.push(r),s.listAttribute&&t.push(s.listAttribute))}e=e.parentNode}return t.reverse()}getBlockHTMLAttributes(e){let t={},n=Object.values(wt).find(r=>r.tagName===yt(e));return(n?.htmlAttributes||[]).forEach(r=>{e.hasAttribute(r)&&(t[r]=e.getAttribute(r))}),t}findBlockElementAncestors(e){let t=[];for(;e&&e!==this.containerElement;){let n=yt(e);Yr().includes(n)&&t.push(e),e=e.parentNode}return t}isBlockElement(e){if(e?.nodeType===Node.ELEMENT_NODE&&!Pn(e)&&!on(e,{matchingSelector:"td",untilNode:this.containerElement}))return Yr().includes(yt(e))||window.getComputedStyle(e).display==="block"}isInsignificantTextNode(e){if(e?.nodeType!==Node.TEXT_NODE||!Zp(e.data))return;let{parentNode:t,previousSibling:n,nextSibling:r}=e;return Gp(t.previousSibling)&&!this.isBlockElement(t.previousSibling)||Vd(t)?void 0:!n||this.isBlockElement(n)||!r||this.isBlockElement(r)}isExtraBR(e){return yt(e)==="br"&&this.isBlockElement(e.parentNode)&&e.parentNode.lastChild===e}needsTableSeparator(e){if(ra.removeBlankTableCells){var t;let n=(t=e.previousSibling)===null||t===void 0?void 0:t.textContent;return n&&/\S/.test(n)}return e.previousSibling}translateBlockElementMarginsToNewlines(){let e=this.getMarginOfDefaultBlockElement();for(let t=0;t<this.blocks.length;t++){let n=this.getMarginOfBlockElementAtIndex(t);n&&(n.top>2*e.top&&this.prependStringToTextAtIndex(`
`,t),n.bottom>2*e.bottom&&this.appendStringToTextAtIndex(`
`,t))}}getMarginOfBlockElementAtIndex(e){let t=this.blockElements[e];if(t&&t.textContent&&!Yr().includes(yt(t))&&!this.processedElements.includes(t))return Ud(t)}getMarginOfDefaultBlockElement(){let e=be(wt.default.tagName);return this.containerElement.appendChild(e),Ud(e)}},Vd=function(i){let{whiteSpace:e}=window.getComputedStyle(i);return["pre","pre-wrap","pre-line"].includes(e)},Gp=i=>i&&!pc(i.textContent),Ud=function(i){let e=window.getComputedStyle(i);if(e.display==="block")return{top:parseInt(e.marginTop),bottom:parseInt(e.marginBottom)}},Xp=function(i){return yt(i)==="style"?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},Yp=i=>i.replace(new RegExp("^".concat(Cu.source,"+")),""),Zp=i=>new RegExp("^".concat(Cu.source,"*$")).test(i),pc=i=>/\s$/.test(i),Qp=["contenteditable","data-trix-id","data-trix-store-key","data-trix-mutable","data-trix-placeholder","tabindex"],hu="data-trix-serialized-attributes",eg="[".concat(hu,"]"),tg=new RegExp("<!--block-->","g"),ig={"application/json":function(i){let e;if(i instanceof Ot)e=i;else{if(!(i instanceof HTMLElement))throw new Error("unserializable object");e=jn.parse(i.innerHTML).getDocument()}return e.toSerializableDocument().toJSONString()},"text/html":function(i){let e;if(i instanceof Ot)e=cr.render(i);else{if(!(i instanceof HTMLElement))throw new Error("unserializable object");e=i.cloneNode(!0)}return Array.from(e.querySelectorAll("[data-trix-serialize=false]")).forEach(t=>{un(t)}),Qp.forEach(t=>{Array.from(e.querySelectorAll("[".concat(t,"]"))).forEach(n=>{n.removeAttribute(t)})}),Array.from(e.querySelectorAll(eg)).forEach(t=>{try{let n=JSON.parse(t.getAttribute(hu));t.removeAttribute(hu);for(let r in n){let s=n[r];t.setAttribute(r,s)}}catch{}}),e.innerHTML.replace(tg,"")}},ng=Object.freeze({__proto__:null}),qe=class extends Ge{constructor(e,t){super(...arguments),this.attachmentManager=e,this.attachment=t,this.id=this.attachment.id,this.file=this.attachment.file}remove(){return this.attachmentManager.requestRemovalOfAttachment(this.attachment)}};qe.proxyMethod("attachment.getAttribute"),qe.proxyMethod("attachment.hasAttribute"),qe.proxyMethod("attachment.setAttribute"),qe.proxyMethod("attachment.getAttributes"),qe.proxyMethod("attachment.setAttributes"),qe.proxyMethod("attachment.isPending"),qe.proxyMethod("attachment.isPreviewable"),qe.proxyMethod("attachment.getURL"),qe.proxyMethod("attachment.getHref"),qe.proxyMethod("attachment.getFilename"),qe.proxyMethod("attachment.getFilesize"),qe.proxyMethod("attachment.getFormattedFilesize"),qe.proxyMethod("attachment.getExtension"),qe.proxyMethod("attachment.getContentType"),qe.proxyMethod("attachment.getFile"),qe.proxyMethod("attachment.setFile"),qe.proxyMethod("attachment.releaseFile"),qe.proxyMethod("attachment.getUploadProgress"),qe.proxyMethod("attachment.setUploadProgress");var ma=class extends Ge{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),this.managedAttachments={},Array.from(e).forEach(t=>{this.manageAttachment(t)})}getAttachments(){let e=[];for(let t in this.managedAttachments){let n=this.managedAttachments[t];e.push(n)}return e}manageAttachment(e){return this.managedAttachments[e.id]||(this.managedAttachments[e.id]=new qe(this,e)),this.managedAttachments[e.id]}attachmentIsManaged(e){return e.id in this.managedAttachments}requestRemovalOfAttachment(e){var t,n;if(this.attachmentIsManaged(e))return(t=this.delegate)===null||t===void 0||(n=t.attachmentManagerDidRequestRemovalOfAttachment)===null||n===void 0?void 0:n.call(t,e)}unmanageAttachment(e){let t=this.managedAttachments[e.id];return delete this.managedAttachments[e.id],t}},va=class{constructor(e){this.composition=e,this.document=this.composition.document;let t=this.composition.getSelectedRange();this.startPosition=t[0],this.endPosition=t[1],this.startLocation=this.document.locationFromPosition(this.startPosition),this.endLocation=this.document.locationFromPosition(this.endPosition),this.block=this.document.getBlockAtIndex(this.endLocation.index),this.breaksOnReturn=this.block.breaksOnReturn(),this.previousCharacter=this.block.text.getStringAtPosition(this.endLocation.offset-1),this.nextCharacter=this.block.text.getStringAtPosition(this.endLocation.offset)}shouldInsertBlockBreak(){return this.block.hasAttributes()&&this.block.isListItem()&&!this.block.isEmpty()?this.startLocation.offset!==0:this.breaksOnReturn&&this.nextCharacter!==`
`}shouldBreakFormattedBlock(){return this.block.hasAttributes()&&!this.block.isListItem()&&(this.breaksOnReturn&&this.nextCharacter===`
`||this.previousCharacter===`
`)}shouldDecreaseListLevel(){return this.block.hasAttributes()&&this.block.isListItem()&&this.block.isEmpty()}shouldPrependListItem(){return this.block.isListItem()&&this.startLocation.offset===0&&!this.block.isEmpty()}shouldRemoveLastBlockAttribute(){return this.block.hasAttributes()&&!this.block.isListItem()&&this.block.isEmpty()}},Ci=class extends Ge{constructor(){super(...arguments),this.document=new Ot,this.attachments=[],this.currentAttributes={},this.revision=0}setDocument(e){var t,n;if(!e.isEqualTo(this.document))return this.document=e,this.refreshAttachments(),this.revision++,(t=this.delegate)===null||t===void 0||(n=t.compositionDidChangeDocument)===null||n===void 0?void 0:n.call(t,e)}getSnapshot(){return{document:this.document,selectedRange:this.getSelectedRange()}}loadSnapshot(e){var t,n,r,s;let{document:a,selectedRange:u}=e;return(t=this.delegate)===null||t===void 0||(n=t.compositionWillLoadSnapshot)===null||n===void 0||n.call(t),this.setDocument(a??new Ot),this.setSelection(u??[0,0]),(r=this.delegate)===null||r===void 0||(s=r.compositionDidLoadSnapshot)===null||s===void 0?void 0:s.call(r)}insertText(e){let{updatePosition:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{updatePosition:!0},n=this.getSelectedRange();this.setDocument(this.document.insertTextAtRange(e,n));let r=n[0],s=r+e.getLength();return t&&this.setSelection(s),this.notifyDelegateOfInsertionAtRange([r,s])}insertBlock(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:new Yt,t=new Ot([e]);return this.insertDocument(t)}insertDocument(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:new Ot,t=this.getSelectedRange();this.setDocument(this.document.insertDocumentAtRange(e,t));let n=t[0],r=n+e.getLength();return this.setSelection(r),this.notifyDelegateOfInsertionAtRange([n,r])}insertString(e,t){let n=this.getCurrentTextAttributes(),r=Ut.textForStringWithAttributes(e,n);return this.insertText(r,t)}insertBlockBreak(){let e=this.getSelectedRange();this.setDocument(this.document.insertBlockBreakAtRange(e));let t=e[0],n=t+1;return this.setSelection(n),this.notifyDelegateOfInsertionAtRange([t,n])}insertLineBreak(){let e=new va(this);if(e.shouldDecreaseListLevel())return this.decreaseListLevel(),this.setSelection(e.startPosition);if(e.shouldPrependListItem()){let t=new Ot([e.block.copyWithoutText()]);return this.insertDocument(t)}return e.shouldInsertBlockBreak()?this.insertBlockBreak():e.shouldRemoveLastBlockAttribute()?this.removeLastBlockAttribute():e.shouldBreakFormattedBlock()?this.breakFormattedBlock(e):this.insertString(`
`)}insertHTML(e){let t=jn.parse(e).getDocument(),n=this.getSelectedRange();this.setDocument(this.document.mergeDocumentAtRange(t,n));let r=n[0],s=r+t.getLength()-1;return this.setSelection(s),this.notifyDelegateOfInsertionAtRange([r,s])}replaceHTML(e){let t=jn.parse(e).getDocument().copyUsingObjectsFromDocument(this.document),n=this.getLocationRange({strict:!1}),r=this.document.rangeFromLocationRange(n);return this.setDocument(t),this.setSelection(r)}insertFile(e){return this.insertFiles([e])}insertFiles(e){let t=[];return Array.from(e).forEach(n=>{var r;if((r=this.delegate)!==null&&r!==void 0&&r.compositionShouldAcceptFile(n)){let s=ln.attachmentForFile(n);t.push(s)}}),this.insertAttachments(t)}insertAttachment(e){return this.insertAttachments([e])}insertAttachments(e){let t=new Ut;return Array.from(e).forEach(n=>{var r;let s=n.getType(),a=(r=yu[s])===null||r===void 0?void 0:r.presentation,u=this.getCurrentTextAttributes();a&&(u.presentation=a);let c=Ut.textForAttachmentWithAttributes(n,u);t=t.appendText(c)}),this.insertText(t)}shouldManageDeletingInDirection(e){let t=this.getLocationRange();if(Fi(t)){if(e==="backward"&&t[0].offset===0||this.shouldManageMovingCursorInDirection(e))return!0}else if(t[0].index!==t[1].index)return!0;return!1}deleteInDirection(e){let t,n,r,{length:s}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},a=this.getLocationRange(),u=this.getSelectedRange(),c=Fi(u);if(c?n=e==="backward"&&a[0].offset===0:r=a[0].index!==a[1].index,n&&this.canDecreaseBlockAttributeLevel()){let v=this.getBlock();if(v.isListItem()?this.decreaseListLevel():this.decreaseBlockAttributeLevel(),this.setSelection(u[0]),v.isEmpty())return!1}return c&&(u=this.getExpandedRangeInDirection(e,{length:s}),e==="backward"&&(t=this.getAttachmentAtRange(u))),t?(this.editAttachment(t),!1):(this.setDocument(this.document.removeTextAtRange(u)),this.setSelection(u[0]),!n&&!r&&void 0)}moveTextFromRange(e){let[t]=Array.from(this.getSelectedRange());return this.setDocument(this.document.moveTextFromRangeToPosition(e,t)),this.setSelection(t)}removeAttachment(e){let t=this.document.getRangeOfAttachment(e);if(t)return this.stopEditingAttachment(),this.setDocument(this.document.removeTextAtRange(t)),this.setSelection(t[0])}removeLastBlockAttribute(){let[e,t]=Array.from(this.getSelectedRange()),n=this.document.getBlockAtPosition(t);return this.removeCurrentAttribute(n.getLastAttribute()),this.setSelection(e)}insertPlaceholder(){return this.placeholderPosition=this.getPosition(),this.insertString(" ")}selectPlaceholder(){if(this.placeholderPosition!=null)return this.setSelectedRange([this.placeholderPosition,this.placeholderPosition+1]),this.getSelectedRange()}forgetPlaceholder(){this.placeholderPosition=null}hasCurrentAttribute(e){let t=this.currentAttributes[e];return t!=null&&t!==!1}toggleCurrentAttribute(e){let t=!this.currentAttributes[e];return t?this.setCurrentAttribute(e,t):this.removeCurrentAttribute(e)}canSetCurrentAttribute(e){return Xe(e)?this.canSetCurrentBlockAttribute(e):this.canSetCurrentTextAttribute(e)}canSetCurrentTextAttribute(e){let t=this.getSelectedDocument();if(t){for(let n of Array.from(t.getAttachments()))if(!n.hasContent())return!1;return!0}}canSetCurrentBlockAttribute(e){let t=this.getBlock();if(t)return!t.isTerminalBlock()}setCurrentAttribute(e,t){return Xe(e)?this.setBlockAttribute(e,t):(this.setTextAttribute(e,t),this.currentAttributes[e]=t,this.notifyDelegateOfCurrentAttributesChange())}setHTMLAtributeAtPosition(e,t,n){var r;let s=this.document.getBlockAtPosition(e),a=(r=Xe(s.getLastAttribute()))===null||r===void 0?void 0:r.htmlAttributes;if(s&&a!=null&&a.includes(t)){let u=this.document.setHTMLAttributeAtPosition(e,t,n);this.setDocument(u)}}setTextAttribute(e,t){let n=this.getSelectedRange();if(!n)return;let[r,s]=Array.from(n);if(r!==s)return this.setDocument(this.document.addAttributeAtRange(e,t,n));if(e==="href"){let a=Ut.textForStringWithAttributes(t,{href:t});return this.insertText(a)}}setBlockAttribute(e,t){let n=this.getSelectedRange();if(this.canSetCurrentAttribute(e))return this.setDocument(this.document.applyBlockAttributeAtRange(e,t,n)),this.setSelection(n)}removeCurrentAttribute(e){return Xe(e)?(this.removeBlockAttribute(e),this.updateCurrentAttributes()):(this.removeTextAttribute(e),delete this.currentAttributes[e],this.notifyDelegateOfCurrentAttributesChange())}removeTextAttribute(e){let t=this.getSelectedRange();if(t)return this.setDocument(this.document.removeAttributeAtRange(e,t))}removeBlockAttribute(e){let t=this.getSelectedRange();if(t)return this.setDocument(this.document.removeAttributeAtRange(e,t))}canDecreaseNestingLevel(){var e;return((e=this.getBlock())===null||e===void 0?void 0:e.getNestingLevel())>0}canIncreaseNestingLevel(){var e;let t=this.getBlock();if(t){if((e=Xe(t.getLastNestableAttribute()))===null||e===void 0||!e.listAttribute)return t.getNestingLevel()>0;{let n=this.getPreviousBlock();if(n)return function(){let r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];return Bn((arguments.length>0&&arguments[0]!==void 0?arguments[0]:[]).slice(0,r.length),r)}(n.getListItemAttributes(),t.getListItemAttributes())}}}decreaseNestingLevel(){let e=this.getBlock();if(e)return this.setDocument(this.document.replaceBlock(e,e.decreaseNestingLevel()))}increaseNestingLevel(){let e=this.getBlock();if(e)return this.setDocument(this.document.replaceBlock(e,e.increaseNestingLevel()))}canDecreaseBlockAttributeLevel(){var e;return((e=this.getBlock())===null||e===void 0?void 0:e.getAttributeLevel())>0}decreaseBlockAttributeLevel(){var e;let t=(e=this.getBlock())===null||e===void 0?void 0:e.getLastAttribute();if(t)return this.removeCurrentAttribute(t)}decreaseListLevel(){let[e]=Array.from(this.getSelectedRange()),{index:t}=this.document.locationFromPosition(e),n=t,r=this.getBlock().getAttributeLevel(),s=this.document.getBlockAtIndex(n+1);for(;s&&s.isListItem()&&!(s.getAttributeLevel()<=r);)n++,s=this.document.getBlockAtIndex(n+1);e=this.document.positionFromLocation({index:t,offset:0});let a=this.document.positionFromLocation({index:n,offset:0});return this.setDocument(this.document.removeLastListAttributeAtRange([e,a]))}updateCurrentAttributes(){let e=this.getSelectedRange({ignoreLock:!0});if(e){let t=this.document.getCommonAttributesAtRange(e);if(Array.from(ru()).forEach(n=>{t[n]||this.canSetCurrentAttribute(n)||(t[n]=!1)}),!pr(t,this.currentAttributes))return this.currentAttributes=t,this.notifyDelegateOfCurrentAttributesChange()}}getCurrentAttributes(){return Yd.call({},this.currentAttributes)}getCurrentTextAttributes(){let e={};for(let t in this.currentAttributes){let n=this.currentAttributes[t];n!==!1&&su(t)&&(e[t]=n)}return e}freezeSelection(){return this.setCurrentAttribute("frozen",!0)}thawSelection(){return this.removeCurrentAttribute("frozen")}hasFrozenSelection(){return this.hasCurrentAttribute("frozen")}setSelection(e){var t;let n=this.document.locationRangeFromRange(e);return(t=this.delegate)===null||t===void 0?void 0:t.compositionDidRequestChangingSelectionToLocationRange(n)}getSelectedRange(){let e=this.getLocationRange();if(e)return this.document.rangeFromLocationRange(e)}setSelectedRange(e){let t=this.document.locationRangeFromRange(e);return this.getSelectionManager().setLocationRange(t)}getPosition(){let e=this.getLocationRange();if(e)return this.document.positionFromLocation(e[0])}getLocationRange(e){return this.targetLocationRange?this.targetLocationRange:this.getSelectionManager().getLocationRange(e)||Ie({index:0,offset:0})}withTargetLocationRange(e,t){let n;this.targetLocationRange=e;try{n=t()}finally{this.targetLocationRange=null}return n}withTargetRange(e,t){let n=this.document.locationRangeFromRange(e);return this.withTargetLocationRange(n,t)}withTargetDOMRange(e,t){let n=this.createLocationRangeFromDOMRange(e,{strict:!1});return this.withTargetLocationRange(n,t)}getExpandedRangeInDirection(e){let{length:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},[n,r]=Array.from(this.getSelectedRange());return e==="backward"?t?n-=t:n=this.translateUTF16PositionFromOffset(n,-1):t?r+=t:r=this.translateUTF16PositionFromOffset(r,1),Ie([n,r])}shouldManageMovingCursorInDirection(e){if(this.editingAttachment)return!0;let t=this.getExpandedRangeInDirection(e);return this.getAttachmentAtRange(t)!=null}moveCursorInDirection(e){let t,n;if(this.editingAttachment)n=this.document.getRangeOfAttachment(this.editingAttachment);else{let r=this.getSelectedRange();n=this.getExpandedRangeInDirection(e),t=!ua(r,n)}if(e==="backward"?this.setSelectedRange(n[0]):this.setSelectedRange(n[1]),t){let r=this.getAttachmentAtRange(n);if(r)return this.editAttachment(r)}}expandSelectionInDirection(e){let{length:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=this.getExpandedRangeInDirection(e,{length:t});return this.setSelectedRange(n)}expandSelectionForEditing(){if(this.hasCurrentAttribute("href"))return this.expandSelectionAroundCommonAttribute("href")}expandSelectionAroundCommonAttribute(e){let t=this.getPosition(),n=this.document.getRangeOfCommonAttributeAtPosition(e,t);return this.setSelectedRange(n)}selectionContainsAttachments(){var e;return((e=this.getSelectedAttachments())===null||e===void 0?void 0:e.length)>0}selectionIsInCursorTarget(){return this.editingAttachment||this.positionIsCursorTarget(this.getPosition())}positionIsCursorTarget(e){let t=this.document.locationFromPosition(e);if(t)return this.locationIsCursorTarget(t)}positionIsBlockBreak(e){var t;return(t=this.document.getPieceAtPosition(e))===null||t===void 0?void 0:t.isBlockBreak()}getSelectedDocument(){let e=this.getSelectedRange();if(e)return this.document.getDocumentAtRange(e)}getSelectedAttachments(){var e;return(e=this.getSelectedDocument())===null||e===void 0?void 0:e.getAttachments()}getAttachments(){return this.attachments.slice(0)}refreshAttachments(){let e=this.document.getAttachments(),{added:t,removed:n}=function(){let r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[],a=[],u=[],c=new Set;r.forEach(k=>{c.add(k)});let v=new Set;return s.forEach(k=>{v.add(k),c.has(k)||a.push(k)}),r.forEach(k=>{v.has(k)||u.push(k)}),{added:a,removed:u}}(this.attachments,e);return this.attachments=e,Array.from(n).forEach(r=>{var s,a;r.delegate=null,(s=this.delegate)===null||s===void 0||(a=s.compositionDidRemoveAttachment)===null||a===void 0||a.call(s,r)}),(()=>{let r=[];return Array.from(t).forEach(s=>{var a,u;s.delegate=this,r.push((a=this.delegate)===null||a===void 0||(u=a.compositionDidAddAttachment)===null||u===void 0?void 0:u.call(a,s))}),r})()}attachmentDidChangeAttributes(e){var t,n;return this.revision++,(t=this.delegate)===null||t===void 0||(n=t.compositionDidEditAttachment)===null||n===void 0?void 0:n.call(t,e)}attachmentDidChangePreviewURL(e){var t,n;return this.revision++,(t=this.delegate)===null||t===void 0||(n=t.compositionDidChangeAttachmentPreviewURL)===null||n===void 0?void 0:n.call(t,e)}editAttachment(e,t){var n,r;if(e!==this.editingAttachment)return this.stopEditingAttachment(),this.editingAttachment=e,(n=this.delegate)===null||n===void 0||(r=n.compositionDidStartEditingAttachment)===null||r===void 0?void 0:r.call(n,this.editingAttachment,t)}stopEditingAttachment(){var e,t;this.editingAttachment&&((e=this.delegate)===null||e===void 0||(t=e.compositionDidStopEditingAttachment)===null||t===void 0||t.call(e,this.editingAttachment),this.editingAttachment=null)}updateAttributesForAttachment(e,t){return this.setDocument(this.document.updateAttributesForAttachment(e,t))}removeAttributeForAttachment(e,t){return this.setDocument(this.document.removeAttributeForAttachment(e,t))}breakFormattedBlock(e){let{document:t}=e,{block:n}=e,r=e.startPosition,s=[r-1,r];n.getBlockBreakPosition()===e.startLocation.offset?(n.breaksOnReturn()&&e.nextCharacter===`
`?r+=1:t=t.removeTextAtRange(s),s=[r,r]):e.nextCharacter===`
`?e.previousCharacter===`
`?s=[r-1,r+1]:(s=[r,r+1],r+=1):e.startLocation.offset-1!=0&&(r+=1);let a=new Ot([n.removeLastAttribute().copyWithoutText()]);return this.setDocument(t.insertDocumentAtRange(a,s)),this.setSelection(r)}getPreviousBlock(){let e=this.getLocationRange();if(e){let{index:t}=e[0];if(t>0)return this.document.getBlockAtIndex(t-1)}}getBlock(){let e=this.getLocationRange();if(e)return this.document.getBlockAtIndex(e[0].index)}getAttachmentAtRange(e){let t=this.document.getDocumentAtRange(e);if(t.toString()==="".concat("\uFFFC",`
`))return t.getAttachments()[0]}notifyDelegateOfCurrentAttributesChange(){var e,t;return(e=this.delegate)===null||e===void 0||(t=e.compositionDidChangeCurrentAttributes)===null||t===void 0?void 0:t.call(e,this.currentAttributes)}notifyDelegateOfInsertionAtRange(e){var t,n;return(t=this.delegate)===null||t===void 0||(n=t.compositionDidPerformInsertionAtRange)===null||n===void 0?void 0:n.call(t,e)}translateUTF16PositionFromOffset(e,t){let n=this.document.toUTF16String(),r=n.offsetFromUCS2Offset(e);return n.offsetToUCS2Offset(r+t)}};Ci.proxyMethod("getSelectionManager().getPointRange"),Ci.proxyMethod("getSelectionManager().setLocationRangeFromPointRange"),Ci.proxyMethod("getSelectionManager().createLocationRangeFromDOMRange"),Ci.proxyMethod("getSelectionManager().locationIsCursorTarget"),Ci.proxyMethod("getSelectionManager().selectionIsExpanded"),Ci.proxyMethod("delegate?.getSelectionManager");var rs=class extends Ge{constructor(e){super(...arguments),this.composition=e,this.undoEntries=[],this.redoEntries=[]}recordUndoEntry(e){let{context:t,consolidatable:n}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=this.undoEntries.slice(-1)[0];if(!n||!rg(r,e,t)){let s=this.createEntry({description:e,context:t});this.undoEntries.push(s),this.redoEntries=[]}}undo(){let e=this.undoEntries.pop();if(e){let t=this.createEntry(e);return this.redoEntries.push(t),this.composition.loadSnapshot(e.snapshot)}}redo(){let e=this.redoEntries.pop();if(e){let t=this.createEntry(e);return this.undoEntries.push(t),this.composition.loadSnapshot(e.snapshot)}}canUndo(){return this.undoEntries.length>0}canRedo(){return this.redoEntries.length>0}createEntry(){let{description:e,context:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return{description:e?.toString(),context:JSON.stringify(t),snapshot:this.composition.getSnapshot()}}},rg=(i,e,t)=>i?.description===e?.toString()&&i?.context===JSON.stringify(t),$o="attachmentGallery",ba=class{constructor(e){this.document=e.document,this.selectedRange=e.selectedRange}perform(){return this.removeBlockAttribute(),this.applyBlockAttribute()}getSnapshot(){return{document:this.document,selectedRange:this.selectedRange}}removeBlockAttribute(){return this.findRangesOfBlocks().map(e=>this.document=this.document.removeAttributeAtRange($o,e))}applyBlockAttribute(){let e=0;this.findRangesOfPieces().forEach(t=>{t[1]-t[0]>1&&(t[0]+=e,t[1]+=e,this.document.getCharacterAtPosition(t[1])!==`
`&&(this.document=this.document.insertBlockBreakAtRange(t[1]),t[1]<this.selectedRange[1]&&this.moveSelectedRangeForward(),t[1]++,e++),t[0]!==0&&this.document.getCharacterAtPosition(t[0]-1)!==`
`&&(this.document=this.document.insertBlockBreakAtRange(t[0]),t[0]<this.selectedRange[0]&&this.moveSelectedRangeForward(),t[0]++,e++),this.document=this.document.applyBlockAttributeAtRange($o,!0,t))})}findRangesOfBlocks(){return this.document.findRangesForBlockAttribute($o)}findRangesOfPieces(){return this.document.findRangesForTextAttribute("presentation",{withValue:"gallery"})}moveSelectedRangeForward(){this.selectedRange[0]+=1,this.selectedRange[1]+=1}},gc=function(i){let e=new ba(i);return e.perform(),e.getSnapshot()},sg=[gc],ya=class{constructor(e,t,n){this.insertFiles=this.insertFiles.bind(this),this.composition=e,this.selectionManager=t,this.element=n,this.undoManager=new rs(this.composition),this.filters=sg.slice(0)}loadDocument(e){return this.loadSnapshot({document:e,selectedRange:[0,0]})}loadHTML(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",t=jn.parse(e,{referenceElement:this.element}).getDocument();return this.loadDocument(t)}loadJSON(e){let{document:t,selectedRange:n}=e;return t=Ot.fromJSON(t),this.loadSnapshot({document:t,selectedRange:n})}loadSnapshot(e){return this.undoManager=new rs(this.composition),this.composition.loadSnapshot(e)}getDocument(){return this.composition.document}getSelectedDocument(){return this.composition.getSelectedDocument()}getSnapshot(){return this.composition.getSnapshot()}toJSON(){return this.getSnapshot()}deleteInDirection(e){return this.composition.deleteInDirection(e)}insertAttachment(e){return this.composition.insertAttachment(e)}insertAttachments(e){return this.composition.insertAttachments(e)}insertDocument(e){return this.composition.insertDocument(e)}insertFile(e){return this.composition.insertFile(e)}insertFiles(e){return this.composition.insertFiles(e)}insertHTML(e){return this.composition.insertHTML(e)}insertString(e){return this.composition.insertString(e)}insertText(e){return this.composition.insertText(e)}insertLineBreak(){return this.composition.insertLineBreak()}getSelectedRange(){return this.composition.getSelectedRange()}getPosition(){return this.composition.getPosition()}getClientRectAtPosition(e){let t=this.getDocument().locationRangeFromRange([e,e+1]);return this.selectionManager.getClientRectAtLocationRange(t)}expandSelectionInDirection(e){return this.composition.expandSelectionInDirection(e)}moveCursorInDirection(e){return this.composition.moveCursorInDirection(e)}setSelectedRange(e){return this.composition.setSelectedRange(e)}activateAttribute(e){let t=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1];return this.composition.setCurrentAttribute(e,t)}attributeIsActive(e){return this.composition.hasCurrentAttribute(e)}canActivateAttribute(e){return this.composition.canSetCurrentAttribute(e)}deactivateAttribute(e){return this.composition.removeCurrentAttribute(e)}setHTMLAtributeAtPosition(e,t,n){this.composition.setHTMLAtributeAtPosition(e,t,n)}canDecreaseNestingLevel(){return this.composition.canDecreaseNestingLevel()}canIncreaseNestingLevel(){return this.composition.canIncreaseNestingLevel()}decreaseNestingLevel(){if(this.canDecreaseNestingLevel())return this.composition.decreaseNestingLevel()}increaseNestingLevel(){if(this.canIncreaseNestingLevel())return this.composition.increaseNestingLevel()}canRedo(){return this.undoManager.canRedo()}canUndo(){return this.undoManager.canUndo()}recordUndoEntry(e){let{context:t,consolidatable:n}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.undoManager.recordUndoEntry(e,{context:t,consolidatable:n})}redo(){if(this.canRedo())return this.undoManager.redo()}undo(){if(this.canUndo())return this.undoManager.undo()}},wa=class{constructor(e){this.element=e}findLocationFromContainerAndOffset(e,t){let{strict:n}=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{strict:!0},r=0,s=!1,a={index:0,offset:0},u=this.findAttachmentElementParentForNode(e);u&&(e=u.parentNode,t=Lo(u));let c=oa(this.element,{usingFilter:mc});for(;c.nextNode();){let v=c.currentNode;if(v===e&&Zr(e)){ur(v)||(a.offset+=t);break}if(v.parentNode===e){if(r++===t)break}else if(!Ln(e,v)&&r>0)break;md(v,{strict:n})?(s&&a.index++,a.offset=0,s=!0):a.offset+=qo(v)}return a}findContainerAndOffsetFromLocation(e){let t,n;if(e.index===0&&e.offset===0){for(t=this.element,n=0;t.firstChild;)if(t=t.firstChild,Ro(t)){n=1;break}return[t,n]}let[r,s]=this.findNodeAndOffsetFromLocation(e);if(r){if(Zr(r))qo(r)===0?(t=r.parentNode.parentNode,n=Lo(r.parentNode),ur(r,{name:"right"})&&n++):(t=r,n=e.offset-s);else{if(t=r.parentNode,!md(r.previousSibling)&&!Ro(t))for(;r===t.lastChild&&(r=t,t=t.parentNode,!Ro(t)););n=Lo(r),e.offset!==0&&n++}return[t,n]}}findNodeAndOffsetFromLocation(e){let t,n,r=0;for(let s of this.getSignificantNodesForIndex(e.index)){let a=qo(s);if(e.offset<=r+a)if(Zr(s)){if(t=s,n=r,e.offset===n&&ur(t))break}else t||(t=s,n=r);if(r+=a,r>e.offset)break}return[t,n]}findAttachmentElementParentForNode(e){for(;e&&e!==this.element;){if(Pn(e))return e;e=e.parentNode}}getSignificantNodesForIndex(e){let t=[],n=oa(this.element,{usingFilter:ag}),r=!1;for(;n.nextNode();){let a=n.currentNode;var s;if(or(a)){if(s!=null?s++:s=0,s===e)r=!0;else if(r)break}else r&&t.push(a)}return t}},qo=function(i){return i.nodeType===Node.TEXT_NODE?ur(i)?0:i.textContent.length:yt(i)==="br"||Pn(i)?1:0},ag=function(i){return og(i)===NodeFilter.FILTER_ACCEPT?mc(i):NodeFilter.FILTER_REJECT},og=function(i){return Qd(i)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},mc=function(i){return Pn(i.parentNode)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},_a=class{createDOMRangeFromPoint(e){let t,{x:n,y:r}=e;if(document.caretPositionFromPoint){let{offsetNode:s,offset:a}=document.caretPositionFromPoint(n,r);return t=document.createRange(),t.setStart(s,a),t}if(document.caretRangeFromPoint)return document.caretRangeFromPoint(n,r);if(document.body.createTextRange){let s=Qr();try{let a=document.body.createTextRange();a.moveToPoint(n,r),a.select()}catch{}return t=Qr(),ac(s),t}}getClientRectsForDOMRange(e){let t=Array.from(e.getClientRects());return[t[0],t[t.length-1]]}},Bi=class extends Ge{constructor(e){super(...arguments),this.didMouseDown=this.didMouseDown.bind(this),this.selectionDidChange=this.selectionDidChange.bind(this),this.element=e,this.locationMapper=new wa(this.element),this.pointMapper=new _a,this.lockCount=0,Ke("mousedown",{onElement:this.element,withCallback:this.didMouseDown})}getLocationRange(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return e.strict===!1?this.createLocationRangeFromDOMRange(Qr()):e.ignoreLock?this.currentLocationRange:this.lockedLocationRange?this.lockedLocationRange:this.currentLocationRange}setLocationRange(e){if(this.lockedLocationRange)return;e=Ie(e);let t=this.createDOMRangeFromLocationRange(e);t&&(ac(t),this.updateCurrentLocationRange(e))}setLocationRangeFromPointRange(e){e=Ie(e);let t=this.getLocationAtPoint(e[0]),n=this.getLocationAtPoint(e[1]);this.setLocationRange([t,n])}getClientRectAtLocationRange(e){let t=this.createDOMRangeFromLocationRange(e);if(t)return this.getClientRectsForDOMRange(t)[1]}locationIsCursorTarget(e){let t=Array.from(this.findNodeAndOffsetFromLocation(e))[0];return ur(t)}lock(){this.lockCount++==0&&(this.updateCurrentLocationRange(),this.lockedLocationRange=this.getLocationRange())}unlock(){if(--this.lockCount==0){let{lockedLocationRange:e}=this;if(this.lockedLocationRange=null,e!=null)return this.setLocationRange(e)}}clearSelection(){var e;return(e=sc())===null||e===void 0?void 0:e.removeAllRanges()}selectionIsCollapsed(){var e;return((e=Qr())===null||e===void 0?void 0:e.collapsed)===!0}selectionIsExpanded(){return!this.selectionIsCollapsed()}createLocationRangeFromDOMRange(e,t){if(e==null||!this.domRangeWithinElement(e))return;let n=this.findLocationFromContainerAndOffset(e.startContainer,e.startOffset,t);if(!n)return;let r=e.collapsed?void 0:this.findLocationFromContainerAndOffset(e.endContainer,e.endOffset,t);return Ie([n,r])}didMouseDown(){return this.pauseTemporarily()}pauseTemporarily(){let e;this.paused=!0;let t=()=>{if(this.paused=!1,clearTimeout(n),Array.from(e).forEach(r=>{r.destroy()}),Ln(document,this.element))return this.selectionDidChange()},n=setTimeout(t,200);e=["mousemove","keydown"].map(r=>Ke(r,{onElement:document,withCallback:t}))}selectionDidChange(){if(!this.paused&&!_u(this.element))return this.updateCurrentLocationRange()}updateCurrentLocationRange(e){var t,n;if((e??(e=this.createLocationRangeFromDOMRange(Qr())))&&!ua(e,this.currentLocationRange))return this.currentLocationRange=e,(t=this.delegate)===null||t===void 0||(n=t.locationRangeDidChange)===null||n===void 0?void 0:n.call(t,this.currentLocationRange.slice(0))}createDOMRangeFromLocationRange(e){let t=this.findContainerAndOffsetFromLocation(e[0]),n=Fi(e)?t:this.findContainerAndOffsetFromLocation(e[1])||t;if(t!=null&&n!=null){let r=document.createRange();return r.setStart(...Array.from(t||[])),r.setEnd(...Array.from(n||[])),r}}getLocationAtPoint(e){let t=this.createDOMRangeFromPoint(e);var n;if(t)return(n=this.createLocationRangeFromDOMRange(t))===null||n===void 0?void 0:n[0]}domRangeWithinElement(e){return e.collapsed?Ln(this.element,e.startContainer):Ln(this.element,e.startContainer)&&Ln(this.element,e.endContainer)}};Bi.proxyMethod("locationMapper.findLocationFromContainerAndOffset"),Bi.proxyMethod("locationMapper.findContainerAndOffsetFromLocation"),Bi.proxyMethod("locationMapper.findNodeAndOffsetFromLocation"),Bi.proxyMethod("pointMapper.createDOMRangeFromPoint"),Bi.proxyMethod("pointMapper.getClientRectsForDOMRange");var vc=Object.freeze({__proto__:null,Attachment:ln,AttachmentManager:ma,AttachmentPiece:dn,Block:Yt,Composition:Ci,Document:Ot,Editor:ya,HTMLParser:jn,HTMLSanitizer:dr,LineBreakInsertion:va,LocationMapper:wa,ManagedAttachment:qe,Piece:zi,PointMapper:_a,SelectionManager:Bi,SplittableList:hr,StringPiece:ns,Text:Ut,UndoManager:rs}),ug=Object.freeze({__proto__:null,ObjectView:Hi,AttachmentView:is,BlockView:pa,DocumentView:cr,PieceView:ha,PreviewableAttachmentView:ca,TextView:fa}),{lang:Ko,css:Tn,keyNames:lg}=os,Jo=function(i){return function(){let e=i.apply(this,arguments);e.do(),this.undos||(this.undos=[]),this.undos.push(e.undo)}},ka=class extends Ge{constructor(e,t,n){let r=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{};super(...arguments),Mt(this,"makeElementMutable",Jo(()=>({do:()=>{this.element.dataset.trixMutable=!0},undo:()=>delete this.element.dataset.trixMutable}))),Mt(this,"addToolbar",Jo(()=>{let s=be({tagName:"div",className:Tn.attachmentToolbar,data:{trixMutable:!0},childNodes:be({tagName:"div",className:"trix-button-row",childNodes:be({tagName:"span",className:"trix-button-group trix-button-group--actions",childNodes:be({tagName:"button",className:"trix-button trix-button--remove",textContent:Ko.remove,attributes:{title:Ko.remove},data:{trixAction:"remove"}})})})});return this.attachment.isPreviewable()&&s.appendChild(be({tagName:"div",className:Tn.attachmentMetadataContainer,childNodes:be({tagName:"span",className:Tn.attachmentMetadata,childNodes:[be({tagName:"span",className:Tn.attachmentName,textContent:this.attachment.getFilename(),attributes:{title:this.attachment.getFilename()}}),be({tagName:"span",className:Tn.attachmentSize,textContent:this.attachment.getFormattedFilesize()})]})})),Ke("click",{onElement:s,withCallback:this.didClickToolbar}),Ke("click",{onElement:s,matchingSelector:"[data-trix-action]",withCallback:this.didClickActionButton}),Xr("trix-attachment-before-toolbar",{onElement:this.element,attributes:{toolbar:s,attachment:this.attachment}}),{do:()=>this.element.appendChild(s),undo:()=>un(s)}})),Mt(this,"installCaptionEditor",Jo(()=>{let s=be({tagName:"textarea",className:Tn.attachmentCaptionEditor,attributes:{placeholder:Ko.captionPlaceholder},data:{trixMutable:!0}});s.value=this.attachmentPiece.getCaption();let a=s.cloneNode();a.classList.add("trix-autoresize-clone"),a.tabIndex=-1;let u=function(){a.value=s.value,s.style.height=a.scrollHeight+"px"};Ke("input",{onElement:s,withCallback:u}),Ke("input",{onElement:s,withCallback:this.didInputCaption}),Ke("keydown",{onElement:s,withCallback:this.didKeyDownCaption}),Ke("change",{onElement:s,withCallback:this.didChangeCaption}),Ke("blur",{onElement:s,withCallback:this.didBlurCaption});let c=this.element.querySelector("figcaption"),v=c.cloneNode();return{do:()=>{if(c.style.display="none",v.appendChild(s),v.appendChild(a),v.classList.add("".concat(Tn.attachmentCaption,"--editing")),c.parentElement.insertBefore(v,c),u(),this.options.editCaption)return Eu(()=>s.focus())},undo(){un(v),c.style.display=null}}})),this.didClickToolbar=this.didClickToolbar.bind(this),this.didClickActionButton=this.didClickActionButton.bind(this),this.didKeyDownCaption=this.didKeyDownCaption.bind(this),this.didInputCaption=this.didInputCaption.bind(this),this.didChangeCaption=this.didChangeCaption.bind(this),this.didBlurCaption=this.didBlurCaption.bind(this),this.attachmentPiece=e,this.element=t,this.container=n,this.options=r,this.attachment=this.attachmentPiece.attachment,yt(this.element)==="a"&&(this.element=this.element.firstChild),this.install()}install(){this.makeElementMutable(),this.addToolbar(),this.attachment.isPreviewable()&&this.installCaptionEditor()}uninstall(){var e;let t=this.undos.pop();for(this.savePendingCaption();t;)t(),t=this.undos.pop();(e=this.delegate)===null||e===void 0||e.didUninstallAttachmentEditor(this)}savePendingCaption(){if(this.pendingCaption!=null){let s=this.pendingCaption;var e,t,n,r;this.pendingCaption=null,s?(e=this.delegate)===null||e===void 0||(t=e.attachmentEditorDidRequestUpdatingAttributesForAttachment)===null||t===void 0||t.call(e,{caption:s},this.attachment):(n=this.delegate)===null||n===void 0||(r=n.attachmentEditorDidRequestRemovingAttributeForAttachment)===null||r===void 0||r.call(n,"caption",this.attachment)}}didClickToolbar(e){return e.preventDefault(),e.stopPropagation()}didClickActionButton(e){var t;if(e.target.getAttribute("data-trix-action")==="remove")return(t=this.delegate)===null||t===void 0?void 0:t.attachmentEditorDidRequestRemovalOfAttachment(this.attachment)}didKeyDownCaption(e){var t,n;if(lg[e.keyCode]==="return")return e.preventDefault(),this.savePendingCaption(),(t=this.delegate)===null||t===void 0||(n=t.attachmentEditorDidRequestDeselectingAttachment)===null||n===void 0?void 0:n.call(t,this.attachment)}didInputCaption(e){this.pendingCaption=e.target.value.replace(/\s/g," ").trim()}didChangeCaption(e){return this.savePendingCaption()}didBlurCaption(e){return this.savePendingCaption()}},Aa=class extends Ge{constructor(e,t){super(...arguments),this.didFocus=this.didFocus.bind(this),this.didBlur=this.didBlur.bind(this),this.didClickAttachment=this.didClickAttachment.bind(this),this.element=e,this.composition=t,this.documentView=new cr(this.composition.document,{element:this.element}),Ke("focus",{onElement:this.element,withCallback:this.didFocus}),Ke("blur",{onElement:this.element,withCallback:this.didBlur}),Ke("click",{onElement:this.element,matchingSelector:"a[contenteditable=false]",preventDefault:!0}),Ke("mousedown",{onElement:this.element,matchingSelector:Rn,withCallback:this.didClickAttachment}),Ke("click",{onElement:this.element,matchingSelector:"a".concat(Rn),preventDefault:!0})}didFocus(e){var t;let n=()=>{var r,s;if(!this.focused)return this.focused=!0,(r=this.delegate)===null||r===void 0||(s=r.compositionControllerDidFocus)===null||s===void 0?void 0:s.call(r)};return((t=this.blurPromise)===null||t===void 0?void 0:t.then(n))||n()}didBlur(e){this.blurPromise=new Promise(t=>Eu(()=>{var n,r;return _u(this.element)||(this.focused=null,(n=this.delegate)===null||n===void 0||(r=n.compositionControllerDidBlur)===null||r===void 0||r.call(n)),this.blurPromise=null,t()}))}didClickAttachment(e,t){var n,r;let s=this.findAttachmentForElement(t),a=!!on(e.target,{matchingSelector:"figcaption"});return(n=this.delegate)===null||n===void 0||(r=n.compositionControllerDidSelectAttachment)===null||r===void 0?void 0:r.call(n,s,{editCaption:a})}getSerializableElement(){return this.isEditingAttachment()?this.documentView.shadowElement:this.element}render(){var e,t,n,r,s,a;return this.revision!==this.composition.revision&&(this.documentView.setDocument(this.composition.document),this.documentView.render(),this.revision=this.composition.revision),this.canSyncDocumentView()&&!this.documentView.isSynced()&&((n=this.delegate)===null||n===void 0||(r=n.compositionControllerWillSyncDocumentView)===null||r===void 0||r.call(n),this.documentView.sync(),(s=this.delegate)===null||s===void 0||(a=s.compositionControllerDidSyncDocumentView)===null||a===void 0||a.call(s)),(e=this.delegate)===null||e===void 0||(t=e.compositionControllerDidRender)===null||t===void 0?void 0:t.call(e)}rerenderViewForObject(e){return this.invalidateViewForObject(e),this.render()}invalidateViewForObject(e){return this.documentView.invalidateViewForObject(e)}isViewCachingEnabled(){return this.documentView.isViewCachingEnabled()}enableViewCaching(){return this.documentView.enableViewCaching()}disableViewCaching(){return this.documentView.disableViewCaching()}refreshViewCache(){return this.documentView.garbageCollectCachedViews()}isEditingAttachment(){return!!this.attachmentEditor}installAttachmentEditorForAttachment(e,t){var n;if(((n=this.attachmentEditor)===null||n===void 0?void 0:n.attachment)===e)return;let r=this.documentView.findElementForObject(e);if(!r)return;this.uninstallAttachmentEditor();let s=this.composition.document.getAttachmentPieceForAttachment(e);this.attachmentEditor=new ka(s,r,this.element,t),this.attachmentEditor.delegate=this}uninstallAttachmentEditor(){var e;return(e=this.attachmentEditor)===null||e===void 0?void 0:e.uninstall()}didUninstallAttachmentEditor(){return this.attachmentEditor=null,this.render()}attachmentEditorDidRequestUpdatingAttributesForAttachment(e,t){var n,r;return(n=this.delegate)===null||n===void 0||(r=n.compositionControllerWillUpdateAttachment)===null||r===void 0||r.call(n,t),this.composition.updateAttributesForAttachment(e,t)}attachmentEditorDidRequestRemovingAttributeForAttachment(e,t){var n,r;return(n=this.delegate)===null||n===void 0||(r=n.compositionControllerWillUpdateAttachment)===null||r===void 0||r.call(n,t),this.composition.removeAttributeForAttachment(e,t)}attachmentEditorDidRequestRemovalOfAttachment(e){var t,n;return(t=this.delegate)===null||t===void 0||(n=t.compositionControllerDidRequestRemovalOfAttachment)===null||n===void 0?void 0:n.call(t,e)}attachmentEditorDidRequestDeselectingAttachment(e){var t,n;return(t=this.delegate)===null||t===void 0||(n=t.compositionControllerDidRequestDeselectingAttachment)===null||n===void 0?void 0:n.call(t,e)}canSyncDocumentView(){return!this.isEditingAttachment()}findAttachmentForElement(e){return this.composition.document.getAttachmentById(parseInt(e.dataset.trixId,10))}},Ea=class extends Ge{},bc="data-trix-mutable",dg="[".concat(bc,"]"),cg={attributes:!0,childList:!0,characterData:!0,characterDataOldValue:!0,subtree:!0},Ca=class extends Ge{constructor(e){super(e),this.didMutate=this.didMutate.bind(this),this.element=e,this.observer=new window.MutationObserver(this.didMutate),this.start()}start(){return this.reset(),this.observer.observe(this.element,cg)}stop(){return this.observer.disconnect()}didMutate(e){var t,n;if(this.mutations.push(...Array.from(this.findSignificantMutations(e)||[])),this.mutations.length)return(t=this.delegate)===null||t===void 0||(n=t.elementDidMutate)===null||n===void 0||n.call(t,this.getMutationSummary()),this.reset()}reset(){this.mutations=[]}findSignificantMutations(e){return e.filter(t=>this.mutationIsSignificant(t))}mutationIsSignificant(e){if(this.nodeIsMutable(e.target))return!1;for(let t of Array.from(this.nodesModifiedByMutation(e)))if(this.nodeIsSignificant(t))return!0;return!1}nodeIsSignificant(e){return e!==this.element&&!this.nodeIsMutable(e)&&!Qd(e)}nodeIsMutable(e){return on(e,{matchingSelector:dg})}nodesModifiedByMutation(e){let t=[];switch(e.type){case"attributes":e.attributeName!==bc&&t.push(e.target);break;case"characterData":t.push(e.target.parentNode),t.push(e.target);break;case"childList":t.push(...Array.from(e.addedNodes||[])),t.push(...Array.from(e.removedNodes||[]))}return t}getMutationSummary(){return this.getTextMutationSummary()}getTextMutationSummary(){let{additions:e,deletions:t}=this.getTextChangesFromCharacterData(),n=this.getTextChangesFromChildList();Array.from(n.additions).forEach(u=>{Array.from(e).includes(u)||e.push(u)}),t.push(...Array.from(n.deletions||[]));let r={},s=e.join("");s&&(r.textAdded=s);let a=t.join("");return a&&(r.textDeleted=a),r}getMutationsByType(e){return Array.from(this.mutations).filter(t=>t.type===e)}getTextChangesFromChildList(){let e,t,n=[],r=[];Array.from(this.getMutationsByType("childList")).forEach(u=>{n.push(...Array.from(u.addedNodes||[])),r.push(...Array.from(u.removedNodes||[]))}),n.length===0&&r.length===1&&or(r[0])?(e=[],t=[`
`]):(e=fu(n),t=fu(r));let s=e.filter((u,c)=>u!==t[c]).map(Gr),a=t.filter((u,c)=>u!==e[c]).map(Gr);return{additions:s,deletions:a}}getTextChangesFromCharacterData(){let e,t,n=this.getMutationsByType("characterData");if(n.length){let r=n[0],s=n[n.length-1],a=function(u,c){let v,k;return u=Nn.box(u),(c=Nn.box(c)).length<u.length?[k,v]=kd(u,c):[v,k]=kd(c,u),{added:v,removed:k}}(Gr(r.oldValue),Gr(s.target.data));e=a.added,t=a.removed}return{additions:e?[e]:[],deletions:t?[t]:[]}}},fu=function(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],e=[];for(let t of Array.from(i))switch(t.nodeType){case Node.TEXT_NODE:e.push(t.data);break;case Node.ELEMENT_NODE:yt(t)==="br"?e.push(`
`):e.push(...Array.from(fu(t.childNodes)||[]))}return e},Sa=class extends lr{constructor(e){super(...arguments),this.file=e}perform(e){let t=new FileReader;return t.onerror=()=>e(!1),t.onload=()=>{t.onerror=null;try{t.abort()}catch{}return e(!0,this.file)},t.readAsArrayBuffer(this.file)}},pu=class{constructor(e){this.element=e}shouldIgnore(e){return!!as.samsungAndroid&&(this.previousEvent=this.event,this.event=e,this.checkSamsungKeyboardBuggyModeStart(),this.checkSamsungKeyboardBuggyModeEnd(),this.buggyMode)}checkSamsungKeyboardBuggyModeStart(){this.insertingLongTextAfterUnidentifiedChar()&&hg(this.element.innerText,this.event.data)&&(this.buggyMode=!0,this.event.preventDefault())}checkSamsungKeyboardBuggyModeEnd(){this.buggyMode&&this.event.inputType!=="insertText"&&(this.buggyMode=!1)}insertingLongTextAfterUnidentifiedChar(){var e;return this.isBeforeInputInsertText()&&this.previousEventWasUnidentifiedKeydown()&&((e=this.event.data)===null||e===void 0?void 0:e.length)>50}isBeforeInputInsertText(){return this.event.type==="beforeinput"&&this.event.inputType==="insertText"}previousEventWasUnidentifiedKeydown(){var e,t;return((e=this.previousEvent)===null||e===void 0?void 0:e.type)==="keydown"&&((t=this.previousEvent)===null||t===void 0?void 0:t.key)==="Unidentified"}},hg=(i,e)=>Wd(i)===Wd(e),fg=new RegExp("(".concat("\uFFFC","|").concat(xa,"|").concat(an,"|\\s)+"),"g"),Wd=i=>i.replace(fg," ").trim(),fr=class extends Ge{constructor(e){super(...arguments),this.element=e,this.mutationObserver=new Ca(this.element),this.mutationObserver.delegate=this,this.flakyKeyboardDetector=new pu(this.element);for(let t in this.constructor.events)Ke(t,{onElement:this.element,withCallback:this.handlerFor(t)})}elementDidMutate(e){}editorWillSyncDocumentView(){return this.mutationObserver.stop()}editorDidSyncDocumentView(){return this.mutationObserver.start()}requestRender(){var e,t;return(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidRequestRender)===null||t===void 0?void 0:t.call(e)}requestReparse(){var e,t;return(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidRequestReparse)===null||t===void 0||t.call(e),this.requestRender()}attachFiles(e){let t=Array.from(e).map(n=>new Sa(n));return Promise.all(t).then(n=>{this.handleInput(function(){var r,s;return(r=this.delegate)===null||r===void 0||r.inputControllerWillAttachFiles(),(s=this.responder)===null||s===void 0||s.insertFiles(n),this.requestRender()})})}handlerFor(e){return t=>{t.defaultPrevented||this.handleInput(()=>{if(!_u(this.element)){if(this.flakyKeyboardDetector.shouldIgnore(t))return;this.eventName=e,this.constructor.events[e].call(this,t)}})}}handleInput(e){try{var t;(t=this.delegate)===null||t===void 0||t.inputControllerWillHandleInput(),e.call(this)}finally{var n;(n=this.delegate)===null||n===void 0||n.inputControllerDidHandleInput()}}createLinkHTML(e,t){let n=document.createElement("a");return n.href=e,n.textContent=t||e,n.outerHTML}},Go;Mt(fr,"events",{});var{browser:pg,keyNames:yc}=os,gg=0,li=class extends fr{constructor(){super(...arguments),this.resetInputSummary()}setInputSummary(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};this.inputSummary.eventName=this.eventName;for(let t in e){let n=e[t];this.inputSummary[t]=n}return this.inputSummary}resetInputSummary(){this.inputSummary={}}reset(){return this.resetInputSummary(),Fn.reset()}elementDidMutate(e){var t,n;return this.isComposing()?(t=this.delegate)===null||t===void 0||(n=t.inputControllerDidAllowUnhandledInput)===null||n===void 0?void 0:n.call(t):this.handleInput(function(){return this.mutationIsSignificant(e)&&(this.mutationIsExpected(e)?this.requestRender():this.requestReparse()),this.reset()})}mutationIsExpected(e){let{textAdded:t,textDeleted:n}=e;if(this.inputSummary.preferDocument)return!0;let r=t!=null?t===this.inputSummary.textAdded:!this.inputSummary.textAdded,s=n!=null?this.inputSummary.didDelete:!this.inputSummary.didDelete,a=[`
`,` 
`].includes(t)&&!r,u=n===`
`&&!s;if(a&&!u||u&&!a){let v=this.getSelectedRange();if(v){var c;let k=a?t.replace(/\n$/,"").length||-1:t?.length||1;if((c=this.responder)!==null&&c!==void 0&&c.positionIsBlockBreak(v[1]+k))return!0}}return r&&s}mutationIsSignificant(e){var t;let n=Object.keys(e).length>0,r=((t=this.compositionInput)===null||t===void 0?void 0:t.getEndData())==="";return n||!r}getCompositionInput(){if(this.isComposing())return this.compositionInput;this.compositionInput=new Ei(this)}isComposing(){return this.compositionInput&&!this.compositionInput.isEnded()}deleteInDirection(e,t){var n;return((n=this.responder)===null||n===void 0?void 0:n.deleteInDirection(e))!==!1?this.setInputSummary({didDelete:!0}):t?(t.preventDefault(),this.requestRender()):void 0}serializeSelectionToDataTransfer(e){var t;if(!function(r){if(r==null||!r.setData)return!1;for(let s in yd){let a=yd[s];try{if(r.setData(s,a),!r.getData(s)===a)return!1}catch{return!1}}return!0}(e))return;let n=(t=this.responder)===null||t===void 0?void 0:t.getSelectedDocument().toSerializableDocument();return e.setData("application/x-trix-document",JSON.stringify(n)),e.setData("text/html",cr.render(n).innerHTML),e.setData("text/plain",n.toString().replace(/\n$/,"")),!0}canAcceptDataTransfer(e){let t={};return Array.from(e?.types||[]).forEach(n=>{t[n]=!0}),t.Files||t["application/x-trix-document"]||t["text/html"]||t["text/plain"]}getPastedHTMLUsingHiddenElement(e){let t=this.getSelectedRange(),n={position:"absolute",left:"".concat(window.pageXOffset,"px"),top:"".concat(window.pageYOffset,"px"),opacity:0},r=be({style:n,tagName:"div",editable:!0});return document.body.appendChild(r),r.focus(),requestAnimationFrame(()=>{let s=r.innerHTML;return un(r),this.setSelectedRange(t),e(s)})}};Mt(li,"events",{keydown(i){this.isComposing()||this.resetInputSummary(),this.inputSummary.didInput=!0;let e=yc[i.keyCode];if(e){var t;let r=this.keys;["ctrl","alt","shift","meta"].forEach(s=>{var a;i["".concat(s,"Key")]&&(s==="ctrl"&&(s="control"),r=(a=r)===null||a===void 0?void 0:a[s])}),((t=r)===null||t===void 0?void 0:t[e])!=null&&(this.setInputSummary({keyName:e}),Fn.reset(),r[e].call(this,i))}if(nc(i)){let r=String.fromCharCode(i.keyCode).toLowerCase();if(r){var n;let s=["alt","shift"].map(a=>{if(i["".concat(a,"Key")])return a}).filter(a=>a);s.push(r),(n=this.delegate)!==null&&n!==void 0&&n.inputControllerDidReceiveKeyboardCommand(s)&&i.preventDefault()}}},keypress(i){if(this.inputSummary.eventName!=null||i.metaKey||i.ctrlKey&&!i.altKey)return;let e=bg(i);var t,n;return e?((t=this.delegate)===null||t===void 0||t.inputControllerWillPerformTyping(),(n=this.responder)===null||n===void 0||n.insertString(e),this.setInputSummary({textAdded:e,didDelete:this.selectionIsExpanded()})):void 0},textInput(i){let{data:e}=i,{textAdded:t}=this.inputSummary;if(t&&t!==e&&t.toUpperCase()===e){var n;let r=this.getSelectedRange();return this.setSelectedRange([r[0],r[1]+t.length]),(n=this.responder)===null||n===void 0||n.insertString(e),this.setInputSummary({textAdded:e}),this.setSelectedRange(r)}},dragenter(i){i.preventDefault()},dragstart(i){var e,t;return this.serializeSelectionToDataTransfer(i.dataTransfer),this.draggedRange=this.getSelectedRange(),(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidStartDrag)===null||t===void 0?void 0:t.call(e)},dragover(i){if(this.draggedRange||this.canAcceptDataTransfer(i.dataTransfer)){i.preventDefault();let n={x:i.clientX,y:i.clientY};var e,t;if(!pr(n,this.draggingPoint))return this.draggingPoint=n,(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidReceiveDragOverPoint)===null||t===void 0?void 0:t.call(e,this.draggingPoint)}},dragend(i){var e,t;(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidCancelDrag)===null||t===void 0||t.call(e),this.draggedRange=null,this.draggingPoint=null},drop(i){var e,t;i.preventDefault();let n=(e=i.dataTransfer)===null||e===void 0?void 0:e.files,r=i.dataTransfer.getData("application/x-trix-document"),s={x:i.clientX,y:i.clientY};if((t=this.responder)===null||t===void 0||t.setLocationRangeFromPointRange(s),n!=null&&n.length)this.attachFiles(n);else if(this.draggedRange){var a,u;(a=this.delegate)===null||a===void 0||a.inputControllerWillMoveText(),(u=this.responder)===null||u===void 0||u.moveTextFromRange(this.draggedRange),this.draggedRange=null,this.requestRender()}else if(r){var c;let v=Ot.fromJSONString(r);(c=this.responder)===null||c===void 0||c.insertDocument(v),this.requestRender()}this.draggedRange=null,this.draggingPoint=null},cut(i){var e,t;if((e=this.responder)!==null&&e!==void 0&&e.selectionIsExpanded()&&(this.serializeSelectionToDataTransfer(i.clipboardData)&&i.preventDefault(),(t=this.delegate)===null||t===void 0||t.inputControllerWillCutText(),this.deleteInDirection("backward"),i.defaultPrevented))return this.requestRender()},copy(i){var e;(e=this.responder)!==null&&e!==void 0&&e.selectionIsExpanded()&&this.serializeSelectionToDataTransfer(i.clipboardData)&&i.preventDefault()},paste(i){let e=i.clipboardData||i.testClipboardData,t={clipboard:e};if(!e||yg(i))return void this.getPastedHTMLUsingHiddenElement(h=>{var f,_,C;return t.type="text/html",t.html=h,(f=this.delegate)===null||f===void 0||f.inputControllerWillPaste(t),(_=this.responder)===null||_===void 0||_.insertHTML(t.html),this.requestRender(),(C=this.delegate)===null||C===void 0?void 0:C.inputControllerDidPaste(t)});let n=e.getData("URL"),r=e.getData("text/html"),s=e.getData("public.url-name");if(n){var a,u,c;let h;t.type="text/html",h=s?Su(s).trim():n,t.html=this.createLinkHTML(n,h),(a=this.delegate)===null||a===void 0||a.inputControllerWillPaste(t),this.setInputSummary({textAdded:h,didDelete:this.selectionIsExpanded()}),(u=this.responder)===null||u===void 0||u.insertHTML(t.html),this.requestRender(),(c=this.delegate)===null||c===void 0||c.inputControllerDidPaste(t)}else if(ic(e)){var v,k,A;t.type="text/plain",t.string=e.getData("text/plain"),(v=this.delegate)===null||v===void 0||v.inputControllerWillPaste(t),this.setInputSummary({textAdded:t.string,didDelete:this.selectionIsExpanded()}),(k=this.responder)===null||k===void 0||k.insertString(t.string),this.requestRender(),(A=this.delegate)===null||A===void 0||A.inputControllerDidPaste(t)}else if(r){var N,y,d;t.type="text/html",t.html=r,(N=this.delegate)===null||N===void 0||N.inputControllerWillPaste(t),(y=this.responder)===null||y===void 0||y.insertHTML(t.html),this.requestRender(),(d=this.delegate)===null||d===void 0||d.inputControllerDidPaste(t)}else if(Array.from(e.types).includes("Files")){var g,b;let h=(g=e.items)===null||g===void 0||(g=g[0])===null||g===void 0||(b=g.getAsFile)===null||b===void 0?void 0:b.call(g);if(h){var E,P,o;let f=mg(h);!h.name&&f&&(h.name="pasted-file-".concat(++gg,".").concat(f)),t.type="File",t.file=h,(E=this.delegate)===null||E===void 0||E.inputControllerWillAttachFiles(),(P=this.responder)===null||P===void 0||P.insertFile(t.file),this.requestRender(),(o=this.delegate)===null||o===void 0||o.inputControllerDidPaste(t)}}i.preventDefault()},compositionstart(i){return this.getCompositionInput().start(i.data)},compositionupdate(i){return this.getCompositionInput().update(i.data)},compositionend(i){return this.getCompositionInput().end(i.data)},beforeinput(i){this.inputSummary.didInput=!0},input(i){return this.inputSummary.didInput=!0,i.stopPropagation()}}),Mt(li,"keys",{backspace(i){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("backward",i)},delete(i){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("forward",i)},return(i){var e,t;return this.setInputSummary({preferDocument:!0}),(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0?void 0:t.insertLineBreak()},tab(i){var e,t;(e=this.responder)!==null&&e!==void 0&&e.canIncreaseNestingLevel()&&((t=this.responder)===null||t===void 0||t.increaseNestingLevel(),this.requestRender(),i.preventDefault())},left(i){var e;if(this.selectionIsInCursorTarget())return i.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("backward")},right(i){var e;if(this.selectionIsInCursorTarget())return i.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("forward")},control:{d(i){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("forward",i)},h(i){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("backward",i)},o(i){var e,t;return i.preventDefault(),(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0||t.insertString(`
`,{updatePosition:!1}),this.requestRender()}},shift:{return(i){var e,t;(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0||t.insertString(`
`),this.requestRender(),i.preventDefault()},tab(i){var e,t;(e=this.responder)!==null&&e!==void 0&&e.canDecreaseNestingLevel()&&((t=this.responder)===null||t===void 0||t.decreaseNestingLevel(),this.requestRender(),i.preventDefault())},left(i){if(this.selectionIsInCursorTarget())return i.preventDefault(),this.expandSelectionInDirection("backward")},right(i){if(this.selectionIsInCursorTarget())return i.preventDefault(),this.expandSelectionInDirection("forward")}},alt:{backspace(i){var e;return this.setInputSummary({preferDocument:!1}),(e=this.delegate)===null||e===void 0?void 0:e.inputControllerWillPerformTyping()}},meta:{backspace(i){var e;return this.setInputSummary({preferDocument:!1}),(e=this.delegate)===null||e===void 0?void 0:e.inputControllerWillPerformTyping()}}}),li.proxyMethod("responder?.getSelectedRange"),li.proxyMethod("responder?.setSelectedRange"),li.proxyMethod("responder?.expandSelectionInDirection"),li.proxyMethod("responder?.selectionIsInCursorTarget"),li.proxyMethod("responder?.selectionIsExpanded");var mg=i=>{var e;return(e=i.type)===null||e===void 0||(e=e.match(/\/(\w+)$/))===null||e===void 0?void 0:e[1]},vg=!((Go=" ".codePointAt)===null||Go===void 0||!Go.call(" ",0)),bg=function(i){if(i.key&&vg&&i.key.codePointAt(0)===i.keyCode)return i.key;{let e;if(i.which===null?e=i.keyCode:i.which!==0&&i.charCode!==0&&(e=i.charCode),e!=null&&yc[e]!=="escape")return Nn.fromCodepoints([e]).toString()}},yg=function(i){let e=i.clipboardData;if(e){if(e.types.includes("text/html")){for(let t of e.types){let n=/^CorePasteboardFlavorType/.test(t),r=/^dyn\./.test(t)&&e.getData(t);if(n||r)return!0}return!1}{let t=e.types.includes("com.apple.webarchive"),n=e.types.includes("com.apple.flat-rtfd");return t||n}}},Ei=class extends Ge{constructor(e){super(...arguments),this.inputController=e,this.responder=this.inputController.responder,this.delegate=this.inputController.delegate,this.inputSummary=this.inputController.inputSummary,this.data={}}start(e){if(this.data.start=e,this.isSignificant()){var t,n;this.inputSummary.eventName==="keypress"&&this.inputSummary.textAdded&&((n=this.responder)===null||n===void 0||n.deleteInDirection("left")),this.selectionIsExpanded()||(this.insertPlaceholder(),this.requestRender()),this.range=(t=this.responder)===null||t===void 0?void 0:t.getSelectedRange()}}update(e){if(this.data.update=e,this.isSignificant()){let t=this.selectPlaceholder();t&&(this.forgetPlaceholder(),this.range=t)}}end(e){return this.data.end=e,this.isSignificant()?(this.forgetPlaceholder(),this.canApplyToDocument()?(this.setInputSummary({preferDocument:!0,didInput:!1}),(t=this.delegate)===null||t===void 0||t.inputControllerWillPerformTyping(),(n=this.responder)===null||n===void 0||n.setSelectedRange(this.range),(r=this.responder)===null||r===void 0||r.insertString(this.data.end),(s=this.responder)===null||s===void 0?void 0:s.setSelectedRange(this.range[0]+this.data.end.length)):this.data.start!=null||this.data.update!=null?(this.requestReparse(),this.inputController.reset()):void 0):this.inputController.reset();var t,n,r,s}getEndData(){return this.data.end}isEnded(){return this.getEndData()!=null}isSignificant(){return!pg.composesExistingText||this.inputSummary.didInput}canApplyToDocument(){var e,t;return((e=this.data.start)===null||e===void 0?void 0:e.length)===0&&((t=this.data.end)===null||t===void 0?void 0:t.length)>0&&this.range}};Ei.proxyMethod("inputController.setInputSummary"),Ei.proxyMethod("inputController.requestRender"),Ei.proxyMethod("inputController.requestReparse"),Ei.proxyMethod("responder?.selectionIsExpanded"),Ei.proxyMethod("responder?.insertPlaceholder"),Ei.proxyMethod("responder?.selectPlaceholder"),Ei.proxyMethod("responder?.forgetPlaceholder");var In=class extends fr{constructor(){super(...arguments),this.render=this.render.bind(this)}elementDidMutate(){return this.scheduledRender?this.composing?(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidAllowUnhandledInput)===null||t===void 0?void 0:t.call(e):void 0:this.reparse();var e,t}scheduleRender(){return this.scheduledRender?this.scheduledRender:this.scheduledRender=requestAnimationFrame(this.render)}render(){var e,t;cancelAnimationFrame(this.scheduledRender),this.scheduledRender=null,this.composing||(t=this.delegate)===null||t===void 0||t.render(),(e=this.afterRender)===null||e===void 0||e.call(this),this.afterRender=null}reparse(){var e;return(e=this.delegate)===null||e===void 0?void 0:e.reparse()}insertString(){var e;let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",n=arguments.length>1?arguments[1]:void 0;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.withTargetDOMRange(function(){var r;return(r=this.responder)===null||r===void 0?void 0:r.insertString(t,n)})}toggleAttributeIfSupported(e){var t;if(ru().includes(e))return(t=this.delegate)===null||t===void 0||t.inputControllerWillPerformFormatting(e),this.withTargetDOMRange(function(){var n;return(n=this.responder)===null||n===void 0?void 0:n.toggleCurrentAttribute(e)})}activateAttributeIfSupported(e,t){var n;if(ru().includes(e))return(n=this.delegate)===null||n===void 0||n.inputControllerWillPerformFormatting(e),this.withTargetDOMRange(function(){var r;return(r=this.responder)===null||r===void 0?void 0:r.setCurrentAttribute(e,t)})}deleteInDirection(e){let{recordUndoEntry:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{recordUndoEntry:!0};var n;t&&((n=this.delegate)===null||n===void 0||n.inputControllerWillPerformTyping());let r=()=>{var a;return(a=this.responder)===null||a===void 0?void 0:a.deleteInDirection(e)},s=this.getTargetDOMRange({minLength:this.composing?1:2});return s?this.withTargetDOMRange(s,r):r()}withTargetDOMRange(e,t){var n;return typeof e=="function"&&(t=e,e=this.getTargetDOMRange()),e?(n=this.responder)===null||n===void 0?void 0:n.withTargetDOMRange(e,t.bind(this)):(Fn.reset(),t.call(this))}getTargetDOMRange(){var e,t;let{minLength:n}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{minLength:0},r=(e=(t=this.event).getTargetRanges)===null||e===void 0?void 0:e.call(t);if(r&&r.length){let s=wg(r[0]);if(n===0||s.toString().length>=n)return s}}withEvent(e,t){let n;this.event=e;try{n=t.call(this)}finally{this.event=null}return n}};Mt(In,"events",{keydown(i){if(nc(i)){var e;let t=Ag(i);(e=this.delegate)!==null&&e!==void 0&&e.inputControllerDidReceiveKeyboardCommand(t)&&i.preventDefault()}else{let t=i.key;i.altKey&&(t+="+Alt"),i.shiftKey&&(t+="+Shift");let n=this.constructor.keys[t];if(n)return this.withEvent(i,n)}},paste(i){var e;let t,n=(e=i.clipboardData)===null||e===void 0?void 0:e.getData("URL");return wc(i)?(i.preventDefault(),this.attachFiles(i.clipboardData.files)):kg(i)?(i.preventDefault(),t={type:"text/plain",string:i.clipboardData.getData("text/plain")},(r=this.delegate)===null||r===void 0||r.inputControllerWillPaste(t),(s=this.responder)===null||s===void 0||s.insertString(t.string),this.render(),(a=this.delegate)===null||a===void 0?void 0:a.inputControllerDidPaste(t)):n?(i.preventDefault(),t={type:"text/html",html:this.createLinkHTML(n)},(u=this.delegate)===null||u===void 0||u.inputControllerWillPaste(t),(c=this.responder)===null||c===void 0||c.insertHTML(t.html),this.render(),(v=this.delegate)===null||v===void 0?void 0:v.inputControllerDidPaste(t)):void 0;var r,s,a,u,c,v},beforeinput(i){let e=this.constructor.inputTypes[i.inputType],t=(n=i,!(!/iPhone|iPad/.test(navigator.userAgent)||n.inputType&&n.inputType!=="insertParagraph"));var n;e&&(this.withEvent(i,e),t||this.scheduleRender()),t&&this.render()},input(i){Fn.reset()},dragstart(i){var e,t;(e=this.responder)!==null&&e!==void 0&&e.selectionContainsAttachments()&&(i.dataTransfer.setData("application/x-trix-dragging",!0),this.dragging={range:(t=this.responder)===null||t===void 0?void 0:t.getSelectedRange(),point:Yo(i)})},dragenter(i){Xo(i)&&i.preventDefault()},dragover(i){if(this.dragging){i.preventDefault();let t=Yo(i);var e;if(!pr(t,this.dragging.point))return this.dragging.point=t,(e=this.responder)===null||e===void 0?void 0:e.setLocationRangeFromPointRange(t)}else Xo(i)&&i.preventDefault()},drop(i){var e,t;if(this.dragging)return i.preventDefault(),(e=this.delegate)===null||e===void 0||e.inputControllerWillMoveText(),(t=this.responder)===null||t===void 0||t.moveTextFromRange(this.dragging.range),this.dragging=null,this.scheduleRender();if(Xo(i)){var n;i.preventDefault();let r=Yo(i);return(n=this.responder)===null||n===void 0||n.setLocationRangeFromPointRange(r),this.attachFiles(i.dataTransfer.files)}},dragend(){var i;this.dragging&&((i=this.responder)===null||i===void 0||i.setSelectedRange(this.dragging.range),this.dragging=null)},compositionend(i){this.composing&&(this.composing=!1,as.recentAndroid||this.scheduleRender())}}),Mt(In,"keys",{ArrowLeft(){var i,e;if((i=this.responder)!==null&&i!==void 0&&i.shouldManageMovingCursorInDirection("backward"))return this.event.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("backward")},ArrowRight(){var i,e;if((i=this.responder)!==null&&i!==void 0&&i.shouldManageMovingCursorInDirection("forward"))return this.event.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("forward")},Backspace(){var i,e,t;if((i=this.responder)!==null&&i!==void 0&&i.shouldManageDeletingInDirection("backward"))return this.event.preventDefault(),(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0||t.deleteInDirection("backward"),this.render()},Tab(){var i,e;if((i=this.responder)!==null&&i!==void 0&&i.canIncreaseNestingLevel())return this.event.preventDefault(),(e=this.responder)===null||e===void 0||e.increaseNestingLevel(),this.render()},"Tab+Shift"(){var i,e;if((i=this.responder)!==null&&i!==void 0&&i.canDecreaseNestingLevel())return this.event.preventDefault(),(e=this.responder)===null||e===void 0||e.decreaseNestingLevel(),this.render()}}),Mt(In,"inputTypes",{deleteByComposition(){return this.deleteInDirection("backward",{recordUndoEntry:!1})},deleteByCut(){return this.deleteInDirection("backward")},deleteByDrag(){return this.event.preventDefault(),this.withTargetDOMRange(function(){var i;this.deleteByDragRange=(i=this.responder)===null||i===void 0?void 0:i.getSelectedRange()})},deleteCompositionText(){return this.deleteInDirection("backward",{recordUndoEntry:!1})},deleteContent(){return this.deleteInDirection("backward")},deleteContentBackward(){return this.deleteInDirection("backward")},deleteContentForward(){return this.deleteInDirection("forward")},deleteEntireSoftLine(){return this.deleteInDirection("forward")},deleteHardLineBackward(){return this.deleteInDirection("backward")},deleteHardLineForward(){return this.deleteInDirection("forward")},deleteSoftLineBackward(){return this.deleteInDirection("backward")},deleteSoftLineForward(){return this.deleteInDirection("forward")},deleteWordBackward(){return this.deleteInDirection("backward")},deleteWordForward(){return this.deleteInDirection("forward")},formatBackColor(){return this.activateAttributeIfSupported("backgroundColor",this.event.data)},formatBold(){return this.toggleAttributeIfSupported("bold")},formatFontColor(){return this.activateAttributeIfSupported("color",this.event.data)},formatFontName(){return this.activateAttributeIfSupported("font",this.event.data)},formatIndent(){var i;if((i=this.responder)!==null&&i!==void 0&&i.canIncreaseNestingLevel())return this.withTargetDOMRange(function(){var e;return(e=this.responder)===null||e===void 0?void 0:e.increaseNestingLevel()})},formatItalic(){return this.toggleAttributeIfSupported("italic")},formatJustifyCenter(){return this.toggleAttributeIfSupported("justifyCenter")},formatJustifyFull(){return this.toggleAttributeIfSupported("justifyFull")},formatJustifyLeft(){return this.toggleAttributeIfSupported("justifyLeft")},formatJustifyRight(){return this.toggleAttributeIfSupported("justifyRight")},formatOutdent(){var i;if((i=this.responder)!==null&&i!==void 0&&i.canDecreaseNestingLevel())return this.withTargetDOMRange(function(){var e;return(e=this.responder)===null||e===void 0?void 0:e.decreaseNestingLevel()})},formatRemove(){this.withTargetDOMRange(function(){for(let t in(i=this.responder)===null||i===void 0?void 0:i.getCurrentAttributes()){var i,e;(e=this.responder)===null||e===void 0||e.removeCurrentAttribute(t)}})},formatSetBlockTextDirection(){return this.activateAttributeIfSupported("blockDir",this.event.data)},formatSetInlineTextDirection(){return this.activateAttributeIfSupported("textDir",this.event.data)},formatStrikeThrough(){return this.toggleAttributeIfSupported("strike")},formatSubscript(){return this.toggleAttributeIfSupported("sub")},formatSuperscript(){return this.toggleAttributeIfSupported("sup")},formatUnderline(){return this.toggleAttributeIfSupported("underline")},historyRedo(){var i;return(i=this.delegate)===null||i===void 0?void 0:i.inputControllerWillPerformRedo()},historyUndo(){var i;return(i=this.delegate)===null||i===void 0?void 0:i.inputControllerWillPerformUndo()},insertCompositionText(){return this.composing=!0,this.insertString(this.event.data)},insertFromComposition(){return this.composing=!1,this.insertString(this.event.data)},insertFromDrop(){let i=this.deleteByDragRange;var e;if(i)return this.deleteByDragRange=null,(e=this.delegate)===null||e===void 0||e.inputControllerWillMoveText(),this.withTargetDOMRange(function(){var t;return(t=this.responder)===null||t===void 0?void 0:t.moveTextFromRange(i)})},insertFromPaste(){let{dataTransfer:i}=this.event,e={dataTransfer:i},t=i.getData("URL"),n=i.getData("text/html");if(t){var r;let c;this.event.preventDefault(),e.type="text/html";let v=i.getData("public.url-name");c=v?Su(v).trim():t,e.html=this.createLinkHTML(t,c),(r=this.delegate)===null||r===void 0||r.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var k;return(k=this.responder)===null||k===void 0?void 0:k.insertHTML(e.html)}),this.afterRender=()=>{var k;return(k=this.delegate)===null||k===void 0?void 0:k.inputControllerDidPaste(e)}}else if(ic(i)){var s;e.type="text/plain",e.string=i.getData("text/plain"),(s=this.delegate)===null||s===void 0||s.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var c;return(c=this.responder)===null||c===void 0?void 0:c.insertString(e.string)}),this.afterRender=()=>{var c;return(c=this.delegate)===null||c===void 0?void 0:c.inputControllerDidPaste(e)}}else if(_g(this.event)){var a;e.type="File",e.file=i.files[0],(a=this.delegate)===null||a===void 0||a.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var c;return(c=this.responder)===null||c===void 0?void 0:c.insertFile(e.file)}),this.afterRender=()=>{var c;return(c=this.delegate)===null||c===void 0?void 0:c.inputControllerDidPaste(e)}}else if(n){var u;this.event.preventDefault(),e.type="text/html",e.html=n,(u=this.delegate)===null||u===void 0||u.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var c;return(c=this.responder)===null||c===void 0?void 0:c.insertHTML(e.html)}),this.afterRender=()=>{var c;return(c=this.delegate)===null||c===void 0?void 0:c.inputControllerDidPaste(e)}}},insertFromYank(){return this.insertString(this.event.data)},insertLineBreak(){return this.insertString(`
`)},insertLink(){return this.activateAttributeIfSupported("href",this.event.data)},insertOrderedList(){return this.toggleAttributeIfSupported("number")},insertParagraph(){var i;return(i=this.delegate)===null||i===void 0||i.inputControllerWillPerformTyping(),this.withTargetDOMRange(function(){var e;return(e=this.responder)===null||e===void 0?void 0:e.insertLineBreak()})},insertReplacementText(){let i=this.event.dataTransfer.getData("text/plain"),e=this.event.getTargetRanges()[0];this.withTargetDOMRange(e,()=>{this.insertString(i,{updatePosition:!1})})},insertText(){var i;return this.insertString(this.event.data||((i=this.event.dataTransfer)===null||i===void 0?void 0:i.getData("text/plain")))},insertTranspose(){return this.insertString(this.event.data)},insertUnorderedList(){return this.toggleAttributeIfSupported("bullet")}});var wg=function(i){let e=document.createRange();return e.setStart(i.startContainer,i.startOffset),e.setEnd(i.endContainer,i.endOffset),e},Xo=i=>{var e;return Array.from(((e=i.dataTransfer)===null||e===void 0?void 0:e.types)||[]).includes("Files")},_g=i=>{var e;return((e=i.dataTransfer.files)===null||e===void 0?void 0:e[0])&&!wc(i)&&!(t=>{let{dataTransfer:n}=t;return n.types.includes("Files")&&n.types.includes("text/html")&&n.getData("text/html").includes("urn:schemas-microsoft-com:office:office")})(i)},wc=function(i){let e=i.clipboardData;if(e)return Array.from(e.types).filter(t=>t.match(/file/i)).length===e.types.length&&e.files.length>=1},kg=function(i){let e=i.clipboardData;if(e)return e.types.includes("text/plain")&&e.types.length===1},Ag=function(i){let e=[];return i.altKey&&e.push("alt"),i.shiftKey&&e.push("shift"),e.push(i.key),e},Yo=i=>({x:i.clientX,y:i.clientY}),gu="[data-trix-attribute]",mu="[data-trix-action]",Eg="".concat(gu,", ").concat(mu),La="[data-trix-dialog]",Cg="".concat(La,"[data-trix-active]"),Sg="".concat(La," [data-trix-method]"),$d="".concat(La," [data-trix-input]"),qd=(i,e)=>(e||(e=ar(i)),i.querySelector("[data-trix-input][name='".concat(e,"']"))),Kd=i=>i.getAttribute("data-trix-action"),ar=i=>i.getAttribute("data-trix-attribute")||i.getAttribute("data-trix-dialog-attribute"),Da=class extends Ge{constructor(e){super(e),this.didClickActionButton=this.didClickActionButton.bind(this),this.didClickAttributeButton=this.didClickAttributeButton.bind(this),this.didClickDialogButton=this.didClickDialogButton.bind(this),this.didKeyDownDialogInput=this.didKeyDownDialogInput.bind(this),this.element=e,this.attributes={},this.actions={},this.resetDialogInputs(),Ke("mousedown",{onElement:this.element,matchingSelector:mu,withCallback:this.didClickActionButton}),Ke("mousedown",{onElement:this.element,matchingSelector:gu,withCallback:this.didClickAttributeButton}),Ke("click",{onElement:this.element,matchingSelector:Eg,preventDefault:!0}),Ke("click",{onElement:this.element,matchingSelector:Sg,withCallback:this.didClickDialogButton}),Ke("keydown",{onElement:this.element,matchingSelector:$d,withCallback:this.didKeyDownDialogInput})}didClickActionButton(e,t){var n;(n=this.delegate)===null||n===void 0||n.toolbarDidClickButton(),e.preventDefault();let r=Kd(t);return this.getDialog(r)?this.toggleDialog(r):(s=this.delegate)===null||s===void 0?void 0:s.toolbarDidInvokeAction(r,t);var s}didClickAttributeButton(e,t){var n;(n=this.delegate)===null||n===void 0||n.toolbarDidClickButton(),e.preventDefault();let r=ar(t);var s;return this.getDialog(r)?this.toggleDialog(r):(s=this.delegate)===null||s===void 0||s.toolbarDidToggleAttribute(r),this.refreshAttributeButtons()}didClickDialogButton(e,t){let n=on(t,{matchingSelector:La});return this[t.getAttribute("data-trix-method")].call(this,n)}didKeyDownDialogInput(e,t){if(e.keyCode===13){e.preventDefault();let n=t.getAttribute("name"),r=this.getDialog(n);this.setAttribute(r)}if(e.keyCode===27)return e.preventDefault(),this.hideDialog()}updateActions(e){return this.actions=e,this.refreshActionButtons()}refreshActionButtons(){return this.eachActionButton((e,t)=>{e.disabled=this.actions[t]===!1})}eachActionButton(e){return Array.from(this.element.querySelectorAll(mu)).map(t=>e(t,Kd(t)))}updateAttributes(e){return this.attributes=e,this.refreshAttributeButtons()}refreshAttributeButtons(){return this.eachAttributeButton((e,t)=>(e.disabled=this.attributes[t]===!1,this.attributes[t]||this.dialogIsVisible(t)?(e.setAttribute("data-trix-active",""),e.classList.add("trix-active")):(e.removeAttribute("data-trix-active"),e.classList.remove("trix-active"))))}eachAttributeButton(e){return Array.from(this.element.querySelectorAll(gu)).map(t=>e(t,ar(t)))}applyKeyboardCommand(e){let t=JSON.stringify(e.sort());for(let n of Array.from(this.element.querySelectorAll("[data-trix-key]"))){let r=n.getAttribute("data-trix-key").split("+");if(JSON.stringify(r.sort())===t)return Xr("mousedown",{onElement:n}),!0}return!1}dialogIsVisible(e){let t=this.getDialog(e);if(t)return t.hasAttribute("data-trix-active")}toggleDialog(e){return this.dialogIsVisible(e)?this.hideDialog():this.showDialog(e)}showDialog(e){var t,n;this.hideDialog(),(t=this.delegate)===null||t===void 0||t.toolbarWillShowDialog();let r=this.getDialog(e);r.setAttribute("data-trix-active",""),r.classList.add("trix-active"),Array.from(r.querySelectorAll("input[disabled]")).forEach(a=>{a.removeAttribute("disabled")});let s=ar(r);if(s){let a=qd(r,e);a&&(a.value=this.attributes[s]||"",a.select())}return(n=this.delegate)===null||n===void 0?void 0:n.toolbarDidShowDialog(e)}setAttribute(e){var t;let n=ar(e),r=qd(e,n);return!r.willValidate||(r.setCustomValidity(""),r.checkValidity()&&this.isSafeAttribute(r))?((t=this.delegate)===null||t===void 0||t.toolbarDidUpdateAttribute(n,r.value),this.hideDialog()):(r.setCustomValidity("Invalid value"),r.setAttribute("data-trix-validate",""),r.classList.add("trix-validate"),r.focus())}isSafeAttribute(e){return!e.hasAttribute("data-trix-validate-href")||da.isValidAttribute("a","href",e.value)}removeAttribute(e){var t;let n=ar(e);return(t=this.delegate)===null||t===void 0||t.toolbarDidRemoveAttribute(n),this.hideDialog()}hideDialog(){let e=this.element.querySelector(Cg);var t;if(e)return e.removeAttribute("data-trix-active"),e.classList.remove("trix-active"),this.resetDialogInputs(),(t=this.delegate)===null||t===void 0?void 0:t.toolbarDidHideDialog((n=>n.getAttribute("data-trix-dialog"))(e))}resetDialogInputs(){Array.from(this.element.querySelectorAll($d)).forEach(e=>{e.setAttribute("disabled","disabled"),e.removeAttribute("data-trix-validate"),e.classList.remove("trix-validate")})}getDialog(e){return this.element.querySelector("[data-trix-dialog=".concat(e,"]"))}},On=class extends Ea{constructor(e){let{editorElement:t,document:n,html:r}=e;super(...arguments),this.editorElement=t,this.selectionManager=new Bi(this.editorElement),this.selectionManager.delegate=this,this.composition=new Ci,this.composition.delegate=this,this.attachmentManager=new ma(this.composition.getAttachments()),this.attachmentManager.delegate=this,this.inputController=ku.getLevel()===2?new In(this.editorElement):new li(this.editorElement),this.inputController.delegate=this,this.inputController.responder=this.composition,this.compositionController=new Aa(this.editorElement,this.composition),this.compositionController.delegate=this,this.toolbarController=new Da(this.editorElement.toolbarElement),this.toolbarController.delegate=this,this.editor=new ya(this.composition,this.selectionManager,this.editorElement),n?this.editor.loadDocument(n):this.editor.loadHTML(r)}registerSelectionManager(){return Fn.registerSelectionManager(this.selectionManager)}unregisterSelectionManager(){return Fn.unregisterSelectionManager(this.selectionManager)}render(){return this.compositionController.render()}reparse(){return this.composition.replaceHTML(this.editorElement.innerHTML)}compositionDidChangeDocument(e){if(this.notifyEditorElement("document-change"),!this.handlingInput)return this.render()}compositionDidChangeCurrentAttributes(e){return this.currentAttributes=e,this.toolbarController.updateAttributes(this.currentAttributes),this.updateCurrentActions(),this.notifyEditorElement("attributes-change",{attributes:this.currentAttributes})}compositionDidPerformInsertionAtRange(e){this.pasting&&(this.pastedRange=e)}compositionShouldAcceptFile(e){return this.notifyEditorElement("file-accept",{file:e})}compositionDidAddAttachment(e){let t=this.attachmentManager.manageAttachment(e);return this.notifyEditorElement("attachment-add",{attachment:t})}compositionDidEditAttachment(e){this.compositionController.rerenderViewForObject(e);let t=this.attachmentManager.manageAttachment(e);return this.notifyEditorElement("attachment-edit",{attachment:t}),this.notifyEditorElement("change")}compositionDidChangeAttachmentPreviewURL(e){return this.compositionController.invalidateViewForObject(e),this.notifyEditorElement("change")}compositionDidRemoveAttachment(e){let t=this.attachmentManager.unmanageAttachment(e);return this.notifyEditorElement("attachment-remove",{attachment:t})}compositionDidStartEditingAttachment(e,t){return this.attachmentLocationRange=this.composition.document.getLocationRangeOfAttachment(e),this.compositionController.installAttachmentEditorForAttachment(e,t),this.selectionManager.setLocationRange(this.attachmentLocationRange)}compositionDidStopEditingAttachment(e){this.compositionController.uninstallAttachmentEditor(),this.attachmentLocationRange=null}compositionDidRequestChangingSelectionToLocationRange(e){if(!this.loadingSnapshot||this.isFocused())return this.requestedLocationRange=e,this.compositionRevisionWhenLocationRangeRequested=this.composition.revision,this.handlingInput?void 0:this.render()}compositionWillLoadSnapshot(){this.loadingSnapshot=!0}compositionDidLoadSnapshot(){this.compositionController.refreshViewCache(),this.render(),this.loadingSnapshot=!1}getSelectionManager(){return this.selectionManager}attachmentManagerDidRequestRemovalOfAttachment(e){return this.removeAttachment(e)}compositionControllerWillSyncDocumentView(){return this.inputController.editorWillSyncDocumentView(),this.selectionManager.lock(),this.selectionManager.clearSelection()}compositionControllerDidSyncDocumentView(){return this.inputController.editorDidSyncDocumentView(),this.selectionManager.unlock(),this.updateCurrentActions(),this.notifyEditorElement("sync")}compositionControllerDidRender(){this.requestedLocationRange&&(this.compositionRevisionWhenLocationRangeRequested===this.composition.revision&&this.selectionManager.setLocationRange(this.requestedLocationRange),this.requestedLocationRange=null,this.compositionRevisionWhenLocationRangeRequested=null),this.renderedCompositionRevision!==this.composition.revision&&(this.runEditorFilters(),this.composition.updateCurrentAttributes(),this.notifyEditorElement("render")),this.renderedCompositionRevision=this.composition.revision}compositionControllerDidFocus(){return this.isFocusedInvisibly()&&this.setLocationRange({index:0,offset:0}),this.toolbarController.hideDialog(),this.notifyEditorElement("focus")}compositionControllerDidBlur(){return this.notifyEditorElement("blur")}compositionControllerDidSelectAttachment(e,t){return this.toolbarController.hideDialog(),this.composition.editAttachment(e,t)}compositionControllerDidRequestDeselectingAttachment(e){let t=this.attachmentLocationRange||this.composition.document.getLocationRangeOfAttachment(e);return this.selectionManager.setLocationRange(t[1])}compositionControllerWillUpdateAttachment(e){return this.editor.recordUndoEntry("Edit Attachment",{context:e.id,consolidatable:!0})}compositionControllerDidRequestRemovalOfAttachment(e){return this.removeAttachment(e)}inputControllerWillHandleInput(){this.handlingInput=!0,this.requestedRender=!1}inputControllerDidRequestRender(){this.requestedRender=!0}inputControllerDidHandleInput(){if(this.handlingInput=!1,this.requestedRender)return this.requestedRender=!1,this.render()}inputControllerDidAllowUnhandledInput(){return this.notifyEditorElement("change")}inputControllerDidRequestReparse(){return this.reparse()}inputControllerWillPerformTyping(){return this.recordTypingUndoEntry()}inputControllerWillPerformFormatting(e){return this.recordFormattingUndoEntry(e)}inputControllerWillCutText(){return this.editor.recordUndoEntry("Cut")}inputControllerWillPaste(e){return this.editor.recordUndoEntry("Paste"),this.pasting=!0,this.notifyEditorElement("before-paste",{paste:e})}inputControllerDidPaste(e){return e.range=this.pastedRange,this.pastedRange=null,this.pasting=null,this.notifyEditorElement("paste",{paste:e})}inputControllerWillMoveText(){return this.editor.recordUndoEntry("Move")}inputControllerWillAttachFiles(){return this.editor.recordUndoEntry("Drop Files")}inputControllerWillPerformUndo(){return this.editor.undo()}inputControllerWillPerformRedo(){return this.editor.redo()}inputControllerDidReceiveKeyboardCommand(e){return this.toolbarController.applyKeyboardCommand(e)}inputControllerDidStartDrag(){this.locationRangeBeforeDrag=this.selectionManager.getLocationRange()}inputControllerDidReceiveDragOverPoint(e){return this.selectionManager.setLocationRangeFromPointRange(e)}inputControllerDidCancelDrag(){this.selectionManager.setLocationRange(this.locationRangeBeforeDrag),this.locationRangeBeforeDrag=null}locationRangeDidChange(e){return this.composition.updateCurrentAttributes(),this.updateCurrentActions(),this.attachmentLocationRange&&!ua(this.attachmentLocationRange,e)&&this.composition.stopEditingAttachment(),this.notifyEditorElement("selection-change")}toolbarDidClickButton(){if(!this.getLocationRange())return this.setLocationRange({index:0,offset:0})}toolbarDidInvokeAction(e,t){return this.invokeAction(e,t)}toolbarDidToggleAttribute(e){if(this.recordFormattingUndoEntry(e),this.composition.toggleCurrentAttribute(e),this.render(),!this.selectionFrozen)return this.editorElement.focus()}toolbarDidUpdateAttribute(e,t){if(this.recordFormattingUndoEntry(e),this.composition.setCurrentAttribute(e,t),this.render(),!this.selectionFrozen)return this.editorElement.focus()}toolbarDidRemoveAttribute(e){if(this.recordFormattingUndoEntry(e),this.composition.removeCurrentAttribute(e),this.render(),!this.selectionFrozen)return this.editorElement.focus()}toolbarWillShowDialog(e){return this.composition.expandSelectionForEditing(),this.freezeSelection()}toolbarDidShowDialog(e){return this.notifyEditorElement("toolbar-dialog-show",{dialogName:e})}toolbarDidHideDialog(e){return this.thawSelection(),this.editorElement.focus(),this.notifyEditorElement("toolbar-dialog-hide",{dialogName:e})}freezeSelection(){if(!this.selectionFrozen)return this.selectionManager.lock(),this.composition.freezeSelection(),this.selectionFrozen=!0,this.render()}thawSelection(){if(this.selectionFrozen)return this.composition.thawSelection(),this.selectionManager.unlock(),this.selectionFrozen=!1,this.render()}canInvokeAction(e){return!!this.actionIsExternal(e)||!((t=this.actions[e])===null||t===void 0||(t=t.test)===null||t===void 0||!t.call(this));var t}invokeAction(e,t){return this.actionIsExternal(e)?this.notifyEditorElement("action-invoke",{actionName:e,invokingElement:t}):(n=this.actions[e])===null||n===void 0||(n=n.perform)===null||n===void 0?void 0:n.call(this);var n}actionIsExternal(e){return/^x-./.test(e)}getCurrentActions(){let e={};for(let t in this.actions)e[t]=this.canInvokeAction(t);return e}updateCurrentActions(){let e=this.getCurrentActions();if(!pr(e,this.currentActions))return this.currentActions=e,this.toolbarController.updateActions(this.currentActions),this.notifyEditorElement("actions-change",{actions:this.currentActions})}runEditorFilters(){let e=this.composition.getSnapshot();if(Array.from(this.editor.filters).forEach(r=>{let{document:s,selectedRange:a}=e;e=r.call(this.editor,e)||{},e.document||(e.document=s),e.selectedRange||(e.selectedRange=a)}),t=e,n=this.composition.getSnapshot(),!ua(t.selectedRange,n.selectedRange)||!t.document.isEqualTo(n.document))return this.composition.loadSnapshot(e);var t,n}updateInputElement(){let e=function(t,n){let r=ig[n];if(r)return r(t);throw new Error("unknown content type: ".concat(n))}(this.compositionController.getSerializableElement(),"text/html");return this.editorElement.setFormValue(e)}notifyEditorElement(e,t){switch(e){case"document-change":this.documentChangedSinceLastRender=!0;break;case"render":this.documentChangedSinceLastRender&&(this.documentChangedSinceLastRender=!1,this.notifyEditorElement("change"));break;case"change":case"attachment-add":case"attachment-edit":case"attachment-remove":this.updateInputElement()}return this.editorElement.notify(e,t)}removeAttachment(e){return this.editor.recordUndoEntry("Delete Attachment"),this.composition.removeAttachment(e),this.render()}recordFormattingUndoEntry(e){let t=Xe(e),n=this.selectionManager.getLocationRange();if(t||!Fi(n))return this.editor.recordUndoEntry("Formatting",{context:this.getUndoContext(),consolidatable:!0})}recordTypingUndoEntry(){return this.editor.recordUndoEntry("Typing",{context:this.getUndoContext(this.currentAttributes),consolidatable:!0})}getUndoContext(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return[this.getLocationContext(),this.getTimeContext(),...Array.from(t)]}getLocationContext(){let e=this.selectionManager.getLocationRange();return Fi(e)?e[0].index:e}getTimeContext(){return tu.interval>0?Math.floor(new Date().getTime()/tu.interval):0}isFocused(){var e;return this.editorElement===((e=this.editorElement.ownerDocument)===null||e===void 0?void 0:e.activeElement)}isFocusedInvisibly(){return this.isFocused()&&!this.getLocationRange()}get actions(){return this.constructor.actions}};Mt(On,"actions",{undo:{test(){return this.editor.canUndo()},perform(){return this.editor.undo()}},redo:{test(){return this.editor.canRedo()},perform(){return this.editor.redo()}},link:{test(){return this.editor.canActivateAttribute("href")}},increaseNestingLevel:{test(){return this.editor.canIncreaseNestingLevel()},perform(){return this.editor.increaseNestingLevel()&&this.render()}},decreaseNestingLevel:{test(){return this.editor.canDecreaseNestingLevel()},perform(){return this.editor.decreaseNestingLevel()&&this.render()}},attachFiles:{test:()=>!0,perform(){return ku.pickFiles(this.editor.insertFiles)}}}),On.proxyMethod("getSelectionManager().setLocationRange"),On.proxyMethod("getSelectionManager().getLocationRange");var Dg=Object.freeze({__proto__:null,AttachmentEditorController:ka,CompositionController:Aa,Controller:Ea,EditorController:On,InputController:fr,Level0InputController:li,Level2InputController:In,ToolbarController:Da}),Tg=Object.freeze({__proto__:null,MutationObserver:Ca,SelectionChangeObserver:la}),xg=Object.freeze({__proto__:null,FileVerificationOperation:Sa,ImagePreloadOperation:ga});tc("trix-toolbar",`%t {
  display: block;
}

%t {
  white-space: nowrap;
}

%t [data-trix-dialog] {
  display: none;
}

%t [data-trix-dialog][data-trix-active] {
  display: block;
}

%t [data-trix-dialog] [data-trix-validate]:invalid {
  background-color: #ffdddd;
}`);var Ta=class extends HTMLElement{connectedCallback(){this.innerHTML===""&&(this.innerHTML=ec.getDefaultHTML())}},Lg=0,Rg=function(i){if(!i.hasAttribute("contenteditable"))return i.setAttribute("contenteditable",""),function(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return t.times=1,Ke(e,t)}("focus",{onElement:i,withCallback:()=>Pg(i)})},Pg=function(i){return Ig(i),Og(i)},Ig=function(i){var e,t;if((e=(t=document).queryCommandSupported)!==null&&e!==void 0&&e.call(t,"enableObjectResizing"))return document.execCommand("enableObjectResizing",!1,!1),Ke("mscontrolselect",{onElement:i,preventDefault:!0})},Og=function(i){var e,t;if((e=(t=document).queryCommandSupported)!==null&&e!==void 0&&e.call(t,"DefaultParagraphSeparator")){let{tagName:n}=wt.default;if(["div","p"].includes(n))return document.execCommand("DefaultParagraphSeparator",!1,n)}},Jd=as.forcesObjectResizing?{display:"inline",width:"auto"}:{display:"inline-block",width:"1px"};tc("trix-editor",`%t {
    display: block;
}

%t:empty::before {
    content: attr(placeholder);
    color: graytext;
    cursor: text;
    pointer-events: none;
    white-space: pre-line;
}

%t a[contenteditable=false] {
    cursor: text;
}

%t img {
    max-width: 100%;
    height: auto;
}

%t `.concat(Rn,` figcaption textarea {
    resize: none;
}

%t `).concat(Rn,` figcaption textarea.trix-autoresize-clone {
    position: absolute;
    left: -9999px;
    max-height: 0px;
}

%t `).concat(Rn,` figcaption[data-trix-placeholder]:empty::before {
    content: attr(data-trix-placeholder);
    color: graytext;
}

%t [data-trix-cursor-target] {
    display: `).concat(Jd.display,` !important;
    width: `).concat(Jd.width,` !important;
    padding: 0 !important;
    margin: 0 !important;
    border: none !important;
}

%t [data-trix-cursor-target=left] {
    vertical-align: top !important;
    margin-left: -1px !important;
}

%t [data-trix-cursor-target=right] {
    vertical-align: bottom !important;
    margin-right: -1px !important;
}`));var Ni=new WeakMap,Jr=new WeakSet,vu=class{constructor(e){var t,n;hc(t=this,n=Jr),n.add(t),es(this,Ni,{writable:!0,value:void 0}),this.element=e,Du(this,Ni,e.attachInternals())}connectedCallback(){ia(this,Jr,na).call(this)}disconnectedCallback(){}get labels(){return Be(this,Ni).labels}get disabled(){var e;return(e=this.element.inputElement)===null||e===void 0?void 0:e.disabled}set disabled(e){this.element.toggleAttribute("disabled",e)}get required(){return this.element.hasAttribute("required")}set required(e){this.element.toggleAttribute("required",e),ia(this,Jr,na).call(this)}get validity(){return Be(this,Ni).validity}get validationMessage(){return Be(this,Ni).validationMessage}get willValidate(){return Be(this,Ni).willValidate}setFormValue(e){ia(this,Jr,na).call(this)}checkValidity(){return Be(this,Ni).checkValidity()}reportValidity(){return Be(this,Ni).reportValidity()}setCustomValidity(e){ia(this,Jr,na).call(this,e)}};function na(){let i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",{required:e,value:t}=this.element,n=e&&!t,r=!!i,s=be("input",{required:e}),a=i||s.validationMessage;Be(this,Ni).setValidity({valueMissing:n,customError:r},a)}var Zo=new WeakMap,Qo=new WeakMap,eu=new WeakMap,bu=class{constructor(e){es(this,Zo,{writable:!0,value:void 0}),es(this,Qo,{writable:!0,value:t=>{t.defaultPrevented||t.target===this.element.form&&this.element.reset()}}),es(this,eu,{writable:!0,value:t=>{if(t.defaultPrevented||this.element.contains(t.target))return;let n=on(t.target,{matchingSelector:"label"});n&&Array.from(this.labels).includes(n)&&this.element.focus()}}),this.element=e}connectedCallback(){Du(this,Zo,function(e){if(e.hasAttribute("aria-label")||e.hasAttribute("aria-labelledby"))return;let t=function(){let n=Array.from(e.labels).map(s=>{if(!s.contains(e))return s.textContent}).filter(s=>s),r=n.join(" ");return r?e.setAttribute("aria-label",r):e.removeAttribute("aria-label")};return t(),Ke("focus",{onElement:e,withCallback:t})}(this.element)),window.addEventListener("reset",Be(this,Qo),!1),window.addEventListener("click",Be(this,eu),!1)}disconnectedCallback(){var e;(e=Be(this,Zo))===null||e===void 0||e.destroy(),window.removeEventListener("reset",Be(this,Qo),!1),window.removeEventListener("click",Be(this,eu),!1)}get labels(){let e=[];this.element.id&&this.element.ownerDocument&&e.push(...Array.from(this.element.ownerDocument.querySelectorAll("label[for='".concat(this.element.id,"']"))||[]));let t=on(this.element,{matchingSelector:"label"});return t&&[this.element,null].includes(t.control)&&e.push(t),e}get disabled(){return console.warn("This browser does not support the [disabled] attribute for trix-editor elements."),!1}set disabled(e){console.warn("This browser does not support the [disabled] attribute for trix-editor elements.")}get required(){return console.warn("This browser does not support the [required] attribute for trix-editor elements."),!1}set required(e){console.warn("This browser does not support the [required] attribute for trix-editor elements.")}get validity(){return console.warn("This browser does not support the validity property for trix-editor elements."),null}get validationMessage(){return console.warn("This browser does not support the validationMessage property for trix-editor elements."),""}get willValidate(){return console.warn("This browser does not support the willValidate property for trix-editor elements."),!1}setFormValue(e){}checkValidity(){return console.warn("This browser does not support checkValidity() for trix-editor elements."),!0}reportValidity(){return console.warn("This browser does not support reportValidity() for trix-editor elements."),!0}setCustomValidity(e){console.warn("This browser does not support setCustomValidity(validationMessage) for trix-editor elements.")}},ht=new WeakMap,ss=class extends HTMLElement{constructor(){super(),es(this,ht,{writable:!0,value:void 0}),Du(this,ht,this.constructor.formAssociated?new vu(this):new bu(this))}get trixId(){return this.hasAttribute("trix-id")?this.getAttribute("trix-id"):(this.setAttribute("trix-id",++Lg),this.trixId)}get labels(){return Be(this,ht).labels}get disabled(){return Be(this,ht).disabled}set disabled(e){Be(this,ht).disabled=e}get required(){return Be(this,ht).required}set required(e){Be(this,ht).required=e}get validity(){return Be(this,ht).validity}get validationMessage(){return Be(this,ht).validationMessage}get willValidate(){return Be(this,ht).willValidate}get type(){return this.localName}get toolbarElement(){var e;if(this.hasAttribute("toolbar"))return(e=this.ownerDocument)===null||e===void 0?void 0:e.getElementById(this.getAttribute("toolbar"));if(this.parentNode){let t="trix-toolbar-".concat(this.trixId);this.setAttribute("toolbar",t);let n=be("trix-toolbar",{id:t});return this.parentNode.insertBefore(n,this),n}}get form(){var e;return(e=this.inputElement)===null||e===void 0?void 0:e.form}get inputElement(){var e;if(this.hasAttribute("input"))return(e=this.ownerDocument)===null||e===void 0?void 0:e.getElementById(this.getAttribute("input"));if(this.parentNode){let t="trix-input-".concat(this.trixId);this.setAttribute("input",t);let n=be("input",{type:"hidden",id:t});return this.parentNode.insertBefore(n,this.nextElementSibling),n}}get editor(){var e;return(e=this.editorController)===null||e===void 0?void 0:e.editor}get name(){var e;return(e=this.inputElement)===null||e===void 0?void 0:e.name}get value(){var e;return(e=this.inputElement)===null||e===void 0?void 0:e.value}set value(e){var t;this.defaultValue=e,(t=this.editor)===null||t===void 0||t.loadHTML(this.defaultValue)}notify(e,t){if(this.editorController)return Xr("trix-".concat(e),{onElement:this,attributes:t})}setFormValue(e){this.inputElement&&(this.inputElement.value=e,Be(this,ht).setFormValue(e))}connectedCallback(){this.hasAttribute("data-trix-internal")||(Rg(this),function(e){e.hasAttribute("role")||e.setAttribute("role","textbox")}(this),this.editorController||(Xr("trix-before-initialize",{onElement:this}),this.editorController=new On({editorElement:this,html:this.defaultValue=this.value}),requestAnimationFrame(()=>Xr("trix-initialize",{onElement:this}))),this.editorController.registerSelectionManager(),Be(this,ht).connectedCallback(),function(e){!document.querySelector(":focus")&&e.hasAttribute("autofocus")&&document.querySelector("[autofocus]")===e&&e.focus()}(this))}disconnectedCallback(){var e;(e=this.editorController)===null||e===void 0||e.unregisterSelectionManager(),Be(this,ht).disconnectedCallback()}checkValidity(){return Be(this,ht).checkValidity()}reportValidity(){return Be(this,ht).reportValidity()}setCustomValidity(e){Be(this,ht).setCustomValidity(e)}formDisabledCallback(e){this.inputElement&&(this.inputElement.disabled=e),this.toggleAttribute("contenteditable",!e)}formResetCallback(){this.reset()}reset(){this.value=this.defaultValue}};Mt(ss,"formAssociated","ElementInternals"in window);var Hn={VERSION:Vf,config:os,core:ng,models:vc,views:ug,controllers:Dg,observers:Tg,operations:xg,elements:Object.freeze({__proto__:null,TrixEditorElement:ss,TrixToolbarElement:Ta}),filters:Object.freeze({__proto__:null,Filter:ba,attachmentGalleryFilter:gc})};Object.assign(Hn,vc),window.Trix=Hn,setTimeout(function(){customElements.get("trix-toolbar")||customElements.define("trix-toolbar",Ta),customElements.get("trix-editor")||customElements.define("trix-editor",ss)},0);var Mg=new _c.default.Converter,Ng=new fd;Hn.config.blockAttributes.heading2={tagName:"h2",terminal:!0,breakOnReturn:!0};Hn.config.blockAttributes.heading3={tagName:"h3",terminal:!0,breakOnReturn:!0};Hn.config.blockAttributes.heading4={tagName:"h4",terminal:!0,breakOnReturn:!0};Hn.config.blockAttributes.heading5={tagName:"h5",terminal:!0,breakOnReturn:!0};var kc={mounted(){let i=this.el.getElementsByTagName("trix-editor")?.[0],e=i.editor,t=document.getElementById(i.id.replace("editor","content"));e.insertHTML(Mg.makeHtml(t.value)),this.el.addEventListener("trix-change",n=>{let r=Ng.turndown(i.innerHTML);t.value=r,t.dispatchEvent(new Event("input",{bubbles:!0}))})}};var Bg=function(i,e){i.forEach(t=>{let n=new XMLHttpRequest;e(()=>n.abort()),n.onload=()=>n.status===200?t.progress(100):t.error(),n.onerror=()=>t.error(),n.upload.addEventListener("progress",s=>{if(s.lengthComputable){let a=Math.round(s.loaded/s.total*100);a<100&&t.progress(a)}});let r=t.meta.url;n.open("PUT",r,!0),n.send(t.file)})},Ac=Bg;var Fg={mounted(){sessionStorage.getItem("locale")&&this.pushEventTo(this.el,"got-locale",{locale:sessionStorage.getItem("locale")}),this.handleEvent("set-locale",({locale:i})=>sessionStorage.setItem("locale",i))}},Ec=Fg;var km=za(Cc()),jg={Drag:td,Markdown:kc,LocalLocaleStorage:Ec},Hg=document.querySelector("meta[name='csrf-token']").getAttribute("content"),Sc=new Dl("/live",Vu,{longPollFallbackMs:2500,params:{_csrf_token:Hg},uploaders:{S3:Ac},hooks:jg});Pa.default.config({barColors:{0:"#29d"},shadowColor:"rgba(0, 0, 0, .3)"});window.addEventListener("phx:page-loading-start",i=>Pa.default.show(300));window.addEventListener("phx:page-loading-stop",i=>Pa.default.hide());Sc.connect();window.liveSocket=Sc;})();
/**
 * @license MIT
 * topbar 2.0.0, 2023-02-04
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
/*! Bundled license information:

showdown/dist/showdown.js:
  (*! showdown v 2.1.0 - 21-04-2022 *)

sortablejs/modular/sortable.esm.js:
  (**!
   * Sortable 1.15.4
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   *)

trix/dist/trix.esm.min.js:
  (*! @license DOMPurify 3.2.3 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.3/LICENSE *)
*/
//# sourceMappingURL=data:application/json;base64,
