(()=>{var K0=Object.create;var Lo=Object.defineProperty;var G0=Object.getOwnPropertyDescriptor;var J0=Object.getOwnPropertyNames;var X0=Object.getPrototypeOf,Y0=Object.prototype.hasOwnProperty;var Z0=(r,e,t)=>e in r?Lo(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var jt=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),Q0=(r,e)=>{for(var t in e)Lo(r,t,{get:e[t],enumerable:!0})},ey=(r,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of J0(e))!Y0.call(r,n)&&n!==t&&Lo(r,n,{get:()=>e[n],enumerable:!(i=G0(e,n))||i.enumerable});return r};var Ue=(r,e,t)=>(t=r!=null?K0(X0(r)):{},ey(e||!r||!r.__esModule?Lo(t,"default",{value:r,enumerable:!0}):t,r));var B=(r,e,t)=>(Z0(r,typeof e!="symbol"?e+"":e,t),t);var hf=jt((df,$o)=>{(function(r,e){"use strict";(function(){for(var v=0,g=["ms","moz","webkit","o"],x=0;x<g.length&&!r.requestAnimationFrame;++x)r.requestAnimationFrame=r[g[x]+"RequestAnimationFrame"],r.cancelAnimationFrame=r[g[x]+"CancelAnimationFrame"]||r[g[x]+"CancelRequestAnimationFrame"];r.requestAnimationFrame||(r.requestAnimationFrame=function(S,T){var I=new Date().getTime(),u=Math.max(0,16-(I-v)),h=r.setTimeout(function(){S(I+u)},u);return v=I+u,h}),r.cancelAnimationFrame||(r.cancelAnimationFrame=function(S){clearTimeout(S)})})();var t,i,n,s=null,o=null,a=null,l=function(v,g,x){v.addEventListener?v.addEventListener(g,x,!1):v.attachEvent?v.attachEvent("on"+g,x):v["on"+g]=x},c={autoRun:!0,barThickness:3,barColors:{0:"rgba(26,  188, 156, .9)",".25":"rgba(52,  152, 219, .9)",".50":"rgba(241, 196, 15,  .9)",".75":"rgba(230, 126, 34,  .9)","1.0":"rgba(211, 84,  0,   .9)"},shadowBlur:10,shadowColor:"rgba(0,   0,   0,   .6)",className:null},f=function(){t.width=r.innerWidth,t.height=c.barThickness*5;var v=t.getContext("2d");v.shadowBlur=c.shadowBlur,v.shadowColor=c.shadowColor;var g=v.createLinearGradient(0,0,t.width,0);for(var x in c.barColors)g.addColorStop(x,c.barColors[x]);v.lineWidth=c.barThickness,v.beginPath(),v.moveTo(0,c.barThickness/2),v.lineTo(Math.ceil(i*t.width),c.barThickness/2),v.strokeStyle=g,v.stroke()},m=function(){t=e.createElement("canvas");var v=t.style;v.position="fixed",v.top=v.left=v.right=v.margin=v.padding=0,v.zIndex=100001,v.display="none",c.className&&t.classList.add(c.className),e.body.appendChild(t),l(r,"resize",f)},y={config:function(v){for(var g in v)c.hasOwnProperty(g)&&(c[g]=v[g])},show:function(v){if(!n)if(v){if(a)return;a=setTimeout(()=>y.show(),v)}else n=!0,o!==null&&r.cancelAnimationFrame(o),t||m(),t.style.opacity=1,t.style.display="block",y.progress(0),c.autoRun&&function g(){s=r.requestAnimationFrame(g),y.progress("+"+.05*Math.pow(1-Math.sqrt(i),2))}()},progress:function(v){return typeof v>"u"||(typeof v=="string"&&(v=(v.indexOf("+")>=0||v.indexOf("-")>=0?i:0)+parseFloat(v)),i=v>1?1:v,f()),i},hide:function(){clearTimeout(a),a=null,n&&(n=!1,s!=null&&(r.cancelAnimationFrame(s),s=null),function v(){if(y.progress("+.1")>=1&&(t.style.opacity-=.05,t.style.opacity<=.05)){t.style.display="none",o=null;return}o=r.requestAnimationFrame(v)}())}};typeof $o=="object"&&typeof $o.exports=="object"?$o.exports=y:typeof define=="function"&&define.amd?define(function(){return y}):this.topbar=y}).call(df,window,document)});var lg=jt((pB,ag)=>{var bt=-1,We=1,Te=0;function Ns(r,e,t,i,n){if(r===e)return r?[[Te,r]]:[];if(t!=null){var s=yk(r,e,t);if(s)return s}var o=Zu(r,e),a=r.substring(0,o);r=r.substring(o),e=e.substring(o),o=Oa(r,e);var l=r.substring(r.length-o);r=r.substring(0,r.length-o),e=e.substring(0,e.length-o);var c=dk(r,e);return a&&c.unshift([Te,a]),l&&c.push([Te,l]),Qu(c,n),i&&pk(c),c}function dk(r,e){var t;if(!r)return[[We,e]];if(!e)return[[bt,r]];var i=r.length>e.length?r:e,n=r.length>e.length?e:r,s=i.indexOf(n);if(s!==-1)return t=[[We,i.substring(0,s)],[Te,n],[We,i.substring(s+n.length)]],r.length>e.length&&(t[0][0]=t[2][0]=bt),t;if(n.length===1)return[[bt,r],[We,e]];var o=fk(r,e);if(o){var a=o[0],l=o[1],c=o[2],f=o[3],m=o[4],y=Ns(a,c),v=Ns(l,f);return y.concat([[Te,m]],v)}return hk(r,e)}function hk(r,e){for(var t=r.length,i=e.length,n=Math.ceil((t+i)/2),s=n,o=2*n,a=new Array(o),l=new Array(o),c=0;c<o;c++)a[c]=-1,l[c]=-1;a[s+1]=0,l[s+1]=0;for(var f=t-i,m=f%2!==0,y=0,v=0,g=0,x=0,S=0;S<n;S++){for(var T=-S+y;T<=S-v;T+=2){var I=s+T,u;T===-S||T!==S&&a[I-1]<a[I+1]?u=a[I+1]:u=a[I-1]+1;for(var h=u-T;u<t&&h<i&&r.charAt(u)===e.charAt(h);)u++,h++;if(a[I]=u,u>t)v+=2;else if(h>i)y+=2;else if(m){var d=s+f-T;if(d>=0&&d<o&&l[d]!==-1){var p=t-l[d];if(u>=p)return Zm(r,e,u,h)}}}for(var b=-S+g;b<=S-x;b+=2){var d=s+b,p;b===-S||b!==S&&l[d-1]<l[d+1]?p=l[d+1]:p=l[d-1]+1;for(var E=p-b;p<t&&E<i&&r.charAt(t-p-1)===e.charAt(i-E-1);)p++,E++;if(l[d]=p,p>t)x+=2;else if(E>i)g+=2;else if(!m){var I=s+f-b;if(I>=0&&I<o&&a[I]!==-1){var u=a[I],h=s+u-I;if(p=t-p,u>=p)return Zm(r,e,u,h)}}}}return[[bt,r],[We,e]]}function Zm(r,e,t,i){var n=r.substring(0,t),s=e.substring(0,i),o=r.substring(t),a=e.substring(i),l=Ns(n,s),c=Ns(o,a);return l.concat(c)}function Zu(r,e){if(!r||!e||r.charAt(0)!==e.charAt(0))return 0;for(var t=0,i=Math.min(r.length,e.length),n=i,s=0;t<n;)r.substring(s,n)==e.substring(s,n)?(t=n,s=t):i=n,n=Math.floor((i-t)/2+t);return ig(r.charCodeAt(n-1))&&n--,n}function Qm(r,e){var t=r.length,i=e.length;if(t==0||i==0)return 0;t>i?r=r.substring(t-i):t<i&&(e=e.substring(0,t));var n=Math.min(t,i);if(r==e)return n;for(var s=0,o=1;;){var a=r.substring(n-o),l=e.indexOf(a);if(l==-1)return s;o+=l,(l==0||r.substring(n-o)==e.substring(0,o))&&(s=o,o++)}}function Oa(r,e){if(!r||!e||r.slice(-1)!==e.slice(-1))return 0;for(var t=0,i=Math.min(r.length,e.length),n=i,s=0;t<n;)r.substring(r.length-n,r.length-s)==e.substring(e.length-n,e.length-s)?(t=n,s=t):i=n,n=Math.floor((i-t)/2+t);return ng(r.charCodeAt(r.length-n))&&n--,n}function fk(r,e){var t=r.length>e.length?r:e,i=r.length>e.length?e:r;if(t.length<4||i.length*2<t.length)return null;function n(v,g,x){for(var S=v.substring(x,x+Math.floor(v.length/4)),T=-1,I="",u,h,d,p;(T=g.indexOf(S,T+1))!==-1;){var b=Zu(v.substring(x),g.substring(T)),E=Oa(v.substring(0,x),g.substring(0,T));I.length<E+b&&(I=g.substring(T-E,T)+g.substring(T,T+b),u=v.substring(0,x-E),h=v.substring(x+b),d=g.substring(0,T-E),p=g.substring(T+b))}return I.length*2>=v.length?[u,h,d,p,I]:null}var s=n(t,i,Math.ceil(t.length/4)),o=n(t,i,Math.ceil(t.length/2)),a;if(!s&&!o)return null;o?s?a=s[4].length>o[4].length?s:o:a=o:a=s;var l,c,f,m;r.length>e.length?(l=a[0],c=a[1],f=a[2],m=a[3]):(f=a[0],m=a[1],l=a[2],c=a[3]);var y=a[4];return[l,c,f,m,y]}function pk(r){for(var e=!1,t=[],i=0,n=null,s=0,o=0,a=0,l=0,c=0;s<r.length;)r[s][0]==Te?(t[i++]=s,o=l,a=c,l=0,c=0,n=r[s][1]):(r[s][0]==We?l+=r[s][1].length:c+=r[s][1].length,n&&n.length<=Math.max(o,a)&&n.length<=Math.max(l,c)&&(r.splice(t[i-1],0,[bt,n]),r[t[i-1]+1][0]=We,i--,i--,s=i>0?t[i-1]:-1,o=0,a=0,l=0,c=0,n=null,e=!0)),s++;for(e&&Qu(r),bk(r),s=1;s<r.length;){if(r[s-1][0]==bt&&r[s][0]==We){var f=r[s-1][1],m=r[s][1],y=Qm(f,m),v=Qm(m,f);y>=v?(y>=f.length/2||y>=m.length/2)&&(r.splice(s,0,[Te,m.substring(0,y)]),r[s-1][1]=f.substring(0,f.length-y),r[s+1][1]=m.substring(y),s++):(v>=f.length/2||v>=m.length/2)&&(r.splice(s,0,[Te,f.substring(0,v)]),r[s-1][0]=We,r[s-1][1]=m.substring(0,m.length-v),r[s+1][0]=bt,r[s+1][1]=f.substring(v),s++),s++}s++}}var eg=/[^a-zA-Z0-9]/,tg=/\s/,rg=/[\r\n]/,mk=/\n\r?\n$/,gk=/^\r?\n\r?\n/;function bk(r){function e(v,g){if(!v||!g)return 6;var x=v.charAt(v.length-1),S=g.charAt(0),T=x.match(eg),I=S.match(eg),u=T&&x.match(tg),h=I&&S.match(tg),d=u&&x.match(rg),p=h&&S.match(rg),b=d&&v.match(mk),E=p&&g.match(gk);return b||E?5:d||p?4:T&&!u&&h?3:u||h?2:T||I?1:0}for(var t=1;t<r.length-1;){if(r[t-1][0]==Te&&r[t+1][0]==Te){var i=r[t-1][1],n=r[t][1],s=r[t+1][1],o=Oa(i,n);if(o){var a=n.substring(n.length-o);i=i.substring(0,i.length-o),n=a+n.substring(0,n.length-o),s=a+s}for(var l=i,c=n,f=s,m=e(i,n)+e(n,s);n.charAt(0)===s.charAt(0);){i+=n.charAt(0),n=n.substring(1)+s.charAt(0),s=s.substring(1);var y=e(i,n)+e(n,s);y>=m&&(m=y,l=i,c=n,f=s)}r[t-1][1]!=l&&(l?r[t-1][1]=l:(r.splice(t-1,1),t--),r[t][1]=c,f?r[t+1][1]=f:(r.splice(t+1,1),t--))}t++}}function Qu(r,e){r.push([Te,""]);for(var t=0,i=0,n=0,s="",o="",a;t<r.length;){if(t<r.length-1&&!r[t][1]){r.splice(t,1);continue}switch(r[t][0]){case We:n++,o+=r[t][1],t++;break;case bt:i++,s+=r[t][1],t++;break;case Te:var l=t-n-i-1;if(e){if(l>=0&&og(r[l][1])){var c=r[l][1].slice(-1);if(r[l][1]=r[l][1].slice(0,-1),s=c+s,o=c+o,!r[l][1]){r.splice(l,1),t--;var f=l-1;r[f]&&r[f][0]===We&&(n++,o=r[f][1]+o,f--),r[f]&&r[f][0]===bt&&(i++,s=r[f][1]+s,f--),l=f}}if(sg(r[t][1])){var c=r[t][1].charAt(0);r[t][1]=r[t][1].slice(1),s+=c,o+=c}}if(t<r.length-1&&!r[t][1]){r.splice(t,1);break}if(s.length>0||o.length>0){s.length>0&&o.length>0&&(a=Zu(o,s),a!==0&&(l>=0?r[l][1]+=o.substring(0,a):(r.splice(0,0,[Te,o.substring(0,a)]),t++),o=o.substring(a),s=s.substring(a)),a=Oa(o,s),a!==0&&(r[t][1]=o.substring(o.length-a)+r[t][1],o=o.substring(0,o.length-a),s=s.substring(0,s.length-a)));var m=n+i;s.length===0&&o.length===0?(r.splice(t-m,m),t=t-m):s.length===0?(r.splice(t-m,m,[We,o]),t=t-m+1):o.length===0?(r.splice(t-m,m,[bt,s]),t=t-m+1):(r.splice(t-m,m,[bt,s],[We,o]),t=t-m+2)}t!==0&&r[t-1][0]===Te?(r[t-1][1]+=r[t][1],r.splice(t,1)):t++,n=0,i=0,s="",o="";break}}r[r.length-1][1]===""&&r.pop();var y=!1;for(t=1;t<r.length-1;)r[t-1][0]===Te&&r[t+1][0]===Te&&(r[t][1].substring(r[t][1].length-r[t-1][1].length)===r[t-1][1]?(r[t][1]=r[t-1][1]+r[t][1].substring(0,r[t][1].length-r[t-1][1].length),r[t+1][1]=r[t-1][1]+r[t+1][1],r.splice(t-1,1),y=!0):r[t][1].substring(0,r[t+1][1].length)==r[t+1][1]&&(r[t-1][1]+=r[t+1][1],r[t][1]=r[t][1].substring(r[t+1][1].length)+r[t+1][1],r.splice(t+1,1),y=!0)),t++;y&&Qu(r,e)}function ig(r){return r>=55296&&r<=56319}function ng(r){return r>=56320&&r<=57343}function sg(r){return ng(r.charCodeAt(0))}function og(r){return ig(r.charCodeAt(r.length-1))}function vk(r){for(var e=[],t=0;t<r.length;t++)r[t][1].length>0&&e.push(r[t]);return e}function Yu(r,e,t,i){return og(r)||sg(i)?null:vk([[Te,r],[bt,e],[We,t],[Te,i]])}function yk(r,e,t){var i=typeof t=="number"?{index:t,length:0}:t.oldRange,n=typeof t=="number"?null:t.newRange,s=r.length,o=e.length;if(i.length===0&&(n===null||n.length===0)){var a=i.index,l=r.slice(0,a),c=r.slice(a),f=n?n.index:null;e:{var m=a+o-s;if(f!==null&&f!==m||m<0||m>o)break e;var y=e.slice(0,m),v=e.slice(m);if(v!==c)break e;var g=Math.min(a,m),x=l.slice(0,g),S=y.slice(0,g);if(x!==S)break e;var T=l.slice(g),I=y.slice(g);return Yu(x,T,I,c)}e:{if(f!==null&&f!==a)break e;var u=a,y=e.slice(0,u),v=e.slice(u);if(y!==l)break e;var h=Math.min(s-u,o-u),d=c.slice(c.length-h),p=v.slice(v.length-h);if(d!==p)break e;var T=c.slice(0,c.length-h),I=v.slice(0,v.length-h);return Yu(l,T,I,d)}}if(i.length>0&&n&&n.length===0)e:{var x=r.slice(0,i.index),d=r.slice(i.index+i.length),g=x.length,h=d.length;if(o<g+h)break e;var S=e.slice(0,g),p=e.slice(o-h);if(x!==S||d!==p)break e;var T=r.slice(g,s-h),I=e.slice(g,o-h);return Yu(x,T,I,d)}return null}function Pa(r,e,t,i){return Ns(r,e,t,i,!0)}Pa.INSERT=We;Pa.DELETE=bt;Pa.EQUAL=Te;ag.exports=Pa});var pc=jt((Os,xn)=>{var wk=200,wg="__lodash_hash_undefined__",Ag=9007199254740991,ac="[object Arguments]",Ak="[object Array]",Eg="[object Boolean]",xg="[object Date]",Ek="[object Error]",lc="[object Function]",_g="[object GeneratorFunction]",Da="[object Map]",kg="[object Number]",uc="[object Object]",ug="[object Promise]",Sg="[object RegExp]",Ia="[object Set]",Cg="[object String]",Tg="[object Symbol]",tc="[object WeakMap]",Lg="[object ArrayBuffer]",Ma="[object DataView]",Rg="[object Float32Array]",Ng="[object Float64Array]",Og="[object Int8Array]",Pg="[object Int16Array]",Dg="[object Int32Array]",Ig="[object Uint8Array]",Mg="[object Uint8ClampedArray]",Bg="[object Uint16Array]",Fg="[object Uint32Array]",xk=/[\\^$.*+?()[\]{}|]/g,_k=/\w*$/,kk=/^\[object .+?Constructor\]$/,Sk=/^(?:0|[1-9]\d*)$/,te={};te[ac]=te[Ak]=te[Lg]=te[Ma]=te[Eg]=te[xg]=te[Rg]=te[Ng]=te[Og]=te[Pg]=te[Dg]=te[Da]=te[kg]=te[uc]=te[Sg]=te[Ia]=te[Cg]=te[Tg]=te[Ig]=te[Mg]=te[Bg]=te[Fg]=!0;te[Ek]=te[lc]=te[tc]=!1;var Ck=typeof global=="object"&&global&&global.Object===Object&&global,Tk=typeof self=="object"&&self&&self.Object===Object&&self,hr=Ck||Tk||Function("return this")(),jg=typeof Os=="object"&&Os&&!Os.nodeType&&Os,cg=jg&&typeof xn=="object"&&xn&&!xn.nodeType&&xn,Lk=cg&&cg.exports===jg;function Rk(r,e){return r.set(e[0],e[1]),r}function Nk(r,e){return r.add(e),r}function Ok(r,e){for(var t=-1,i=r?r.length:0;++t<i&&e(r[t],t,r)!==!1;);return r}function Pk(r,e){for(var t=-1,i=e.length,n=r.length;++t<i;)r[n+t]=e[t];return r}function qg(r,e,t,i){var n=-1,s=r?r.length:0;for(i&&s&&(t=r[++n]);++n<s;)t=e(t,r[n],n,r);return t}function Dk(r,e){for(var t=-1,i=Array(r);++t<r;)i[t]=e(t);return i}function Ik(r,e){return r?.[e]}function Hg(r){var e=!1;if(r!=null&&typeof r.toString!="function")try{e=!!(r+"")}catch{}return e}function dg(r){var e=-1,t=Array(r.size);return r.forEach(function(i,n){t[++e]=[n,i]}),t}function cc(r,e){return function(t){return r(e(t))}}function hg(r){var e=-1,t=Array(r.size);return r.forEach(function(i){t[++e]=i}),t}var Mk=Array.prototype,Bk=Function.prototype,Ba=Object.prototype,ec=hr["__core-js_shared__"],fg=function(){var r=/[^.]+$/.exec(ec&&ec.keys&&ec.keys.IE_PROTO||"");return r?"Symbol(src)_1."+r:""}(),Ug=Bk.toString,Ur=Ba.hasOwnProperty,Fa=Ba.toString,Fk=RegExp("^"+Ug.call(Ur).replace(xk,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),pg=Lk?hr.Buffer:void 0,mg=hr.Symbol,gg=hr.Uint8Array,jk=cc(Object.getPrototypeOf,Object),qk=Object.create,Hk=Ba.propertyIsEnumerable,Uk=Mk.splice,bg=Object.getOwnPropertySymbols,zk=pg?pg.isBuffer:void 0,$k=cc(Object.keys,Object),rc=Sn(hr,"DataView"),Ps=Sn(hr,"Map"),ic=Sn(hr,"Promise"),nc=Sn(hr,"Set"),sc=Sn(hr,"WeakMap"),Ds=Sn(Object,"create"),Vk=Ai(rc),Wk=Ai(Ps),Kk=Ai(ic),Gk=Ai(nc),Jk=Ai(sc),vg=mg?mg.prototype:void 0,yg=vg?vg.valueOf:void 0;function wi(r){var e=-1,t=r?r.length:0;for(this.clear();++e<t;){var i=r[e];this.set(i[0],i[1])}}function Xk(){this.__data__=Ds?Ds(null):{}}function Yk(r){return this.has(r)&&delete this.__data__[r]}function Zk(r){var e=this.__data__;if(Ds){var t=e[r];return t===wg?void 0:t}return Ur.call(e,r)?e[r]:void 0}function Qk(r){var e=this.__data__;return Ds?e[r]!==void 0:Ur.call(e,r)}function eS(r,e){var t=this.__data__;return t[r]=Ds&&e===void 0?wg:e,this}wi.prototype.clear=Xk;wi.prototype.delete=Yk;wi.prototype.get=Zk;wi.prototype.has=Qk;wi.prototype.set=eS;function fr(r){var e=-1,t=r?r.length:0;for(this.clear();++e<t;){var i=r[e];this.set(i[0],i[1])}}function tS(){this.__data__=[]}function rS(r){var e=this.__data__,t=ja(e,r);if(t<0)return!1;var i=e.length-1;return t==i?e.pop():Uk.call(e,t,1),!0}function iS(r){var e=this.__data__,t=ja(e,r);return t<0?void 0:e[t][1]}function nS(r){return ja(this.__data__,r)>-1}function sS(r,e){var t=this.__data__,i=ja(t,r);return i<0?t.push([r,e]):t[i][1]=e,this}fr.prototype.clear=tS;fr.prototype.delete=rS;fr.prototype.get=iS;fr.prototype.has=nS;fr.prototype.set=sS;function _n(r){var e=-1,t=r?r.length:0;for(this.clear();++e<t;){var i=r[e];this.set(i[0],i[1])}}function oS(){this.__data__={hash:new wi,map:new(Ps||fr),string:new wi}}function aS(r){return qa(this,r).delete(r)}function lS(r){return qa(this,r).get(r)}function uS(r){return qa(this,r).has(r)}function cS(r,e){return qa(this,r).set(r,e),this}_n.prototype.clear=oS;_n.prototype.delete=aS;_n.prototype.get=lS;_n.prototype.has=uS;_n.prototype.set=cS;function kn(r){this.__data__=new fr(r)}function dS(){this.__data__=new fr}function hS(r){return this.__data__.delete(r)}function fS(r){return this.__data__.get(r)}function pS(r){return this.__data__.has(r)}function mS(r,e){var t=this.__data__;if(t instanceof fr){var i=t.__data__;if(!Ps||i.length<wk-1)return i.push([r,e]),this;t=this.__data__=new _n(i)}return t.set(r,e),this}kn.prototype.clear=dS;kn.prototype.delete=hS;kn.prototype.get=fS;kn.prototype.has=pS;kn.prototype.set=mS;function gS(r,e){var t=hc(r)||qS(r)?Dk(r.length,String):[],i=t.length,n=!!i;for(var s in r)(e||Ur.call(r,s))&&!(n&&(s=="length"||MS(s,i)))&&t.push(s);return t}function zg(r,e,t){var i=r[e];(!(Ur.call(r,e)&&Kg(i,t))||t===void 0&&!(e in r))&&(r[e]=t)}function ja(r,e){for(var t=r.length;t--;)if(Kg(r[t][0],e))return t;return-1}function bS(r,e){return r&&$g(e,fc(e),r)}function oc(r,e,t,i,n,s,o){var a;if(i&&(a=s?i(r,n,s,o):i(r)),a!==void 0)return a;if(!Ha(r))return r;var l=hc(r);if(l){if(a=PS(r),!e)return RS(r,a)}else{var c=yi(r),f=c==lc||c==_g;if(US(r))return xS(r,e);if(c==uc||c==ac||f&&!s){if(Hg(r))return s?r:{};if(a=DS(f?{}:r),!e)return NS(r,bS(a,r))}else{if(!te[c])return s?r:{};a=IS(r,c,oc,e)}}o||(o=new kn);var m=o.get(r);if(m)return m;if(o.set(r,a),!l)var y=t?OS(r):fc(r);return Ok(y||r,function(v,g){y&&(g=v,v=r[g]),zg(a,g,oc(v,e,t,i,g,r,o))}),a}function vS(r){return Ha(r)?qk(r):{}}function yS(r,e,t){var i=e(r);return hc(r)?i:Pk(i,t(r))}function wS(r){return Fa.call(r)}function AS(r){if(!Ha(r)||FS(r))return!1;var e=Jg(r)||Hg(r)?Fk:kk;return e.test(Ai(r))}function ES(r){if(!Wg(r))return $k(r);var e=[];for(var t in Object(r))Ur.call(r,t)&&t!="constructor"&&e.push(t);return e}function xS(r,e){if(e)return r.slice();var t=new r.constructor(r.length);return r.copy(t),t}function dc(r){var e=new r.constructor(r.byteLength);return new gg(e).set(new gg(r)),e}function _S(r,e){var t=e?dc(r.buffer):r.buffer;return new r.constructor(t,r.byteOffset,r.byteLength)}function kS(r,e,t){var i=e?t(dg(r),!0):dg(r);return qg(i,Rk,new r.constructor)}function SS(r){var e=new r.constructor(r.source,_k.exec(r));return e.lastIndex=r.lastIndex,e}function CS(r,e,t){var i=e?t(hg(r),!0):hg(r);return qg(i,Nk,new r.constructor)}function TS(r){return yg?Object(yg.call(r)):{}}function LS(r,e){var t=e?dc(r.buffer):r.buffer;return new r.constructor(t,r.byteOffset,r.length)}function RS(r,e){var t=-1,i=r.length;for(e||(e=Array(i));++t<i;)e[t]=r[t];return e}function $g(r,e,t,i){t||(t={});for(var n=-1,s=e.length;++n<s;){var o=e[n],a=i?i(t[o],r[o],o,t,r):void 0;zg(t,o,a===void 0?r[o]:a)}return t}function NS(r,e){return $g(r,Vg(r),e)}function OS(r){return yS(r,fc,Vg)}function qa(r,e){var t=r.__data__;return BS(e)?t[typeof e=="string"?"string":"hash"]:t.map}function Sn(r,e){var t=Ik(r,e);return AS(t)?t:void 0}var Vg=bg?cc(bg,Object):VS,yi=wS;(rc&&yi(new rc(new ArrayBuffer(1)))!=Ma||Ps&&yi(new Ps)!=Da||ic&&yi(ic.resolve())!=ug||nc&&yi(new nc)!=Ia||sc&&yi(new sc)!=tc)&&(yi=function(r){var e=Fa.call(r),t=e==uc?r.constructor:void 0,i=t?Ai(t):void 0;if(i)switch(i){case Vk:return Ma;case Wk:return Da;case Kk:return ug;case Gk:return Ia;case Jk:return tc}return e});function PS(r){var e=r.length,t=r.constructor(e);return e&&typeof r[0]=="string"&&Ur.call(r,"index")&&(t.index=r.index,t.input=r.input),t}function DS(r){return typeof r.constructor=="function"&&!Wg(r)?vS(jk(r)):{}}function IS(r,e,t,i){var n=r.constructor;switch(e){case Lg:return dc(r);case Eg:case xg:return new n(+r);case Ma:return _S(r,i);case Rg:case Ng:case Og:case Pg:case Dg:case Ig:case Mg:case Bg:case Fg:return LS(r,i);case Da:return kS(r,i,t);case kg:case Cg:return new n(r);case Sg:return SS(r);case Ia:return CS(r,i,t);case Tg:return TS(r)}}function MS(r,e){return e=e??Ag,!!e&&(typeof r=="number"||Sk.test(r))&&r>-1&&r%1==0&&r<e}function BS(r){var e=typeof r;return e=="string"||e=="number"||e=="symbol"||e=="boolean"?r!=="__proto__":r===null}function FS(r){return!!fg&&fg in r}function Wg(r){var e=r&&r.constructor,t=typeof e=="function"&&e.prototype||Ba;return r===t}function Ai(r){if(r!=null){try{return Ug.call(r)}catch{}try{return r+""}catch{}}return""}function jS(r){return oc(r,!0,!0)}function Kg(r,e){return r===e||r!==r&&e!==e}function qS(r){return HS(r)&&Ur.call(r,"callee")&&(!Hk.call(r,"callee")||Fa.call(r)==ac)}var hc=Array.isArray;function Gg(r){return r!=null&&zS(r.length)&&!Jg(r)}function HS(r){return $S(r)&&Gg(r)}var US=zk||WS;function Jg(r){var e=Ha(r)?Fa.call(r):"";return e==lc||e==_g}function zS(r){return typeof r=="number"&&r>-1&&r%1==0&&r<=Ag}function Ha(r){var e=typeof r;return!!r&&(e=="object"||e=="function")}function $S(r){return!!r&&typeof r=="object"}function fc(r){return Gg(r)?gS(r):ES(r)}function VS(){return[]}function WS(){return!1}xn.exports=jS});var Sc=jt((Is,Tn)=>{var KS=200,kc="__lodash_hash_undefined__",Ja=1,ab=2,lb=9007199254740991,Ua="[object Arguments]",vc="[object Array]",GS="[object AsyncFunction]",ub="[object Boolean]",cb="[object Date]",db="[object Error]",hb="[object Function]",JS="[object GeneratorFunction]",za="[object Map]",fb="[object Number]",XS="[object Null]",Cn="[object Object]",Xg="[object Promise]",YS="[object Proxy]",pb="[object RegExp]",$a="[object Set]",mb="[object String]",ZS="[object Symbol]",QS="[object Undefined]",yc="[object WeakMap]",gb="[object ArrayBuffer]",Va="[object DataView]",eC="[object Float32Array]",tC="[object Float64Array]",rC="[object Int8Array]",iC="[object Int16Array]",nC="[object Int32Array]",sC="[object Uint8Array]",oC="[object Uint8ClampedArray]",aC="[object Uint16Array]",lC="[object Uint32Array]",uC=/[\\^$.*+?()[\]{}|]/g,cC=/^\[object .+?Constructor\]$/,dC=/^(?:0|[1-9]\d*)$/,ne={};ne[eC]=ne[tC]=ne[rC]=ne[iC]=ne[nC]=ne[sC]=ne[oC]=ne[aC]=ne[lC]=!0;ne[Ua]=ne[vc]=ne[gb]=ne[ub]=ne[Va]=ne[cb]=ne[db]=ne[hb]=ne[za]=ne[fb]=ne[Cn]=ne[pb]=ne[$a]=ne[mb]=ne[yc]=!1;var bb=typeof global=="object"&&global&&global.Object===Object&&global,hC=typeof self=="object"&&self&&self.Object===Object&&self,pr=bb||hC||Function("return this")(),vb=typeof Is=="object"&&Is&&!Is.nodeType&&Is,Yg=vb&&typeof Tn=="object"&&Tn&&!Tn.nodeType&&Tn,yb=Yg&&Yg.exports===vb,mc=yb&&bb.process,Zg=function(){try{return mc&&mc.binding&&mc.binding("util")}catch{}}(),Qg=Zg&&Zg.isTypedArray;function fC(r,e){for(var t=-1,i=r==null?0:r.length,n=0,s=[];++t<i;){var o=r[t];e(o,t,r)&&(s[n++]=o)}return s}function pC(r,e){for(var t=-1,i=e.length,n=r.length;++t<i;)r[n+t]=e[t];return r}function mC(r,e){for(var t=-1,i=r==null?0:r.length;++t<i;)if(e(r[t],t,r))return!0;return!1}function gC(r,e){for(var t=-1,i=Array(r);++t<r;)i[t]=e(t);return i}function bC(r){return function(e){return r(e)}}function vC(r,e){return r.has(e)}function yC(r,e){return r?.[e]}function wC(r){var e=-1,t=Array(r.size);return r.forEach(function(i,n){t[++e]=[n,i]}),t}function AC(r,e){return function(t){return r(e(t))}}function EC(r){var e=-1,t=Array(r.size);return r.forEach(function(i){t[++e]=i}),t}var xC=Array.prototype,_C=Function.prototype,Xa=Object.prototype,gc=pr["__core-js_shared__"],wb=_C.toString,Xt=Xa.hasOwnProperty,eb=function(){var r=/[^.]+$/.exec(gc&&gc.keys&&gc.keys.IE_PROTO||"");return r?"Symbol(src)_1."+r:""}(),Ab=Xa.toString,kC=RegExp("^"+wb.call(Xt).replace(uC,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),tb=yb?pr.Buffer:void 0,Wa=pr.Symbol,rb=pr.Uint8Array,Eb=Xa.propertyIsEnumerable,SC=xC.splice,Ei=Wa?Wa.toStringTag:void 0,ib=Object.getOwnPropertySymbols,CC=tb?tb.isBuffer:void 0,TC=AC(Object.keys,Object),wc=Ln(pr,"DataView"),Ms=Ln(pr,"Map"),Ac=Ln(pr,"Promise"),Ec=Ln(pr,"Set"),xc=Ln(pr,"WeakMap"),Bs=Ln(Object,"create"),LC=ki(wc),RC=ki(Ms),NC=ki(Ac),OC=ki(Ec),PC=ki(xc),nb=Wa?Wa.prototype:void 0,bc=nb?nb.valueOf:void 0;function xi(r){var e=-1,t=r==null?0:r.length;for(this.clear();++e<t;){var i=r[e];this.set(i[0],i[1])}}function DC(){this.__data__=Bs?Bs(null):{},this.size=0}function IC(r){var e=this.has(r)&&delete this.__data__[r];return this.size-=e?1:0,e}function MC(r){var e=this.__data__;if(Bs){var t=e[r];return t===kc?void 0:t}return Xt.call(e,r)?e[r]:void 0}function BC(r){var e=this.__data__;return Bs?e[r]!==void 0:Xt.call(e,r)}function FC(r,e){var t=this.__data__;return this.size+=this.has(r)?0:1,t[r]=Bs&&e===void 0?kc:e,this}xi.prototype.clear=DC;xi.prototype.delete=IC;xi.prototype.get=MC;xi.prototype.has=BC;xi.prototype.set=FC;function mr(r){var e=-1,t=r==null?0:r.length;for(this.clear();++e<t;){var i=r[e];this.set(i[0],i[1])}}function jC(){this.__data__=[],this.size=0}function qC(r){var e=this.__data__,t=Ya(e,r);if(t<0)return!1;var i=e.length-1;return t==i?e.pop():SC.call(e,t,1),--this.size,!0}function HC(r){var e=this.__data__,t=Ya(e,r);return t<0?void 0:e[t][1]}function UC(r){return Ya(this.__data__,r)>-1}function zC(r,e){var t=this.__data__,i=Ya(t,r);return i<0?(++this.size,t.push([r,e])):t[i][1]=e,this}mr.prototype.clear=jC;mr.prototype.delete=qC;mr.prototype.get=HC;mr.prototype.has=UC;mr.prototype.set=zC;function _i(r){var e=-1,t=r==null?0:r.length;for(this.clear();++e<t;){var i=r[e];this.set(i[0],i[1])}}function $C(){this.size=0,this.__data__={hash:new xi,map:new(Ms||mr),string:new xi}}function VC(r){var e=Za(this,r).delete(r);return this.size-=e?1:0,e}function WC(r){return Za(this,r).get(r)}function KC(r){return Za(this,r).has(r)}function GC(r,e){var t=Za(this,r),i=t.size;return t.set(r,e),this.size+=t.size==i?0:1,this}_i.prototype.clear=$C;_i.prototype.delete=VC;_i.prototype.get=WC;_i.prototype.has=KC;_i.prototype.set=GC;function Ka(r){var e=-1,t=r==null?0:r.length;for(this.__data__=new _i;++e<t;)this.add(r[e])}function JC(r){return this.__data__.set(r,kc),this}function XC(r){return this.__data__.has(r)}Ka.prototype.add=Ka.prototype.push=JC;Ka.prototype.has=XC;function $r(r){var e=this.__data__=new mr(r);this.size=e.size}function YC(){this.__data__=new mr,this.size=0}function ZC(r){var e=this.__data__,t=e.delete(r);return this.size=e.size,t}function QC(r){return this.__data__.get(r)}function e3(r){return this.__data__.has(r)}function t3(r,e){var t=this.__data__;if(t instanceof mr){var i=t.__data__;if(!Ms||i.length<KS-1)return i.push([r,e]),this.size=++t.size,this;t=this.__data__=new _i(i)}return t.set(r,e),this.size=t.size,this}$r.prototype.clear=YC;$r.prototype.delete=ZC;$r.prototype.get=QC;$r.prototype.has=e3;$r.prototype.set=t3;function r3(r,e){var t=Ga(r),i=!t&&b3(r),n=!t&&!i&&_c(r),s=!t&&!i&&!n&&Lb(r),o=t||i||n||s,a=o?gC(r.length,String):[],l=a.length;for(var c in r)(e||Xt.call(r,c))&&!(o&&(c=="length"||n&&(c=="offset"||c=="parent")||s&&(c=="buffer"||c=="byteLength"||c=="byteOffset")||h3(c,l)))&&a.push(c);return a}function Ya(r,e){for(var t=r.length;t--;)if(kb(r[t][0],e))return t;return-1}function i3(r,e,t){var i=e(r);return Ga(r)?i:pC(i,t(r))}function js(r){return r==null?r===void 0?QS:XS:Ei&&Ei in Object(r)?c3(r):g3(r)}function sb(r){return Fs(r)&&js(r)==Ua}function xb(r,e,t,i,n){return r===e?!0:r==null||e==null||!Fs(r)&&!Fs(e)?r!==r&&e!==e:n3(r,e,t,i,xb,n)}function n3(r,e,t,i,n,s){var o=Ga(r),a=Ga(e),l=o?vc:zr(r),c=a?vc:zr(e);l=l==Ua?Cn:l,c=c==Ua?Cn:c;var f=l==Cn,m=c==Cn,y=l==c;if(y&&_c(r)){if(!_c(e))return!1;o=!0,f=!1}if(y&&!f)return s||(s=new $r),o||Lb(r)?_b(r,e,t,i,n,s):l3(r,e,l,t,i,n,s);if(!(t&Ja)){var v=f&&Xt.call(r,"__wrapped__"),g=m&&Xt.call(e,"__wrapped__");if(v||g){var x=v?r.value():r,S=g?e.value():e;return s||(s=new $r),n(x,S,t,i,s)}}return y?(s||(s=new $r),u3(r,e,t,i,n,s)):!1}function s3(r){if(!Tb(r)||p3(r))return!1;var e=Sb(r)?kC:cC;return e.test(ki(r))}function o3(r){return Fs(r)&&Cb(r.length)&&!!ne[js(r)]}function a3(r){if(!m3(r))return TC(r);var e=[];for(var t in Object(r))Xt.call(r,t)&&t!="constructor"&&e.push(t);return e}function _b(r,e,t,i,n,s){var o=t&Ja,a=r.length,l=e.length;if(a!=l&&!(o&&l>a))return!1;var c=s.get(r);if(c&&s.get(e))return c==e;var f=-1,m=!0,y=t&ab?new Ka:void 0;for(s.set(r,e),s.set(e,r);++f<a;){var v=r[f],g=e[f];if(i)var x=o?i(g,v,f,e,r,s):i(v,g,f,r,e,s);if(x!==void 0){if(x)continue;m=!1;break}if(y){if(!mC(e,function(S,T){if(!vC(y,T)&&(v===S||n(v,S,t,i,s)))return y.push(T)})){m=!1;break}}else if(!(v===g||n(v,g,t,i,s))){m=!1;break}}return s.delete(r),s.delete(e),m}function l3(r,e,t,i,n,s,o){switch(t){case Va:if(r.byteLength!=e.byteLength||r.byteOffset!=e.byteOffset)return!1;r=r.buffer,e=e.buffer;case gb:return!(r.byteLength!=e.byteLength||!s(new rb(r),new rb(e)));case ub:case cb:case fb:return kb(+r,+e);case db:return r.name==e.name&&r.message==e.message;case pb:case mb:return r==e+"";case za:var a=wC;case $a:var l=i&Ja;if(a||(a=EC),r.size!=e.size&&!l)return!1;var c=o.get(r);if(c)return c==e;i|=ab,o.set(r,e);var f=_b(a(r),a(e),i,n,s,o);return o.delete(r),f;case ZS:if(bc)return bc.call(r)==bc.call(e)}return!1}function u3(r,e,t,i,n,s){var o=t&Ja,a=ob(r),l=a.length,c=ob(e),f=c.length;if(l!=f&&!o)return!1;for(var m=l;m--;){var y=a[m];if(!(o?y in e:Xt.call(e,y)))return!1}var v=s.get(r);if(v&&s.get(e))return v==e;var g=!0;s.set(r,e),s.set(e,r);for(var x=o;++m<l;){y=a[m];var S=r[y],T=e[y];if(i)var I=o?i(T,S,y,e,r,s):i(S,T,y,r,e,s);if(!(I===void 0?S===T||n(S,T,t,i,s):I)){g=!1;break}x||(x=y=="constructor")}if(g&&!x){var u=r.constructor,h=e.constructor;u!=h&&"constructor"in r&&"constructor"in e&&!(typeof u=="function"&&u instanceof u&&typeof h=="function"&&h instanceof h)&&(g=!1)}return s.delete(r),s.delete(e),g}function ob(r){return i3(r,w3,d3)}function Za(r,e){var t=r.__data__;return f3(e)?t[typeof e=="string"?"string":"hash"]:t.map}function Ln(r,e){var t=yC(r,e);return s3(t)?t:void 0}function c3(r){var e=Xt.call(r,Ei),t=r[Ei];try{r[Ei]=void 0;var i=!0}catch{}var n=Ab.call(r);return i&&(e?r[Ei]=t:delete r[Ei]),n}var d3=ib?function(r){return r==null?[]:(r=Object(r),fC(ib(r),function(e){return Eb.call(r,e)}))}:A3,zr=js;(wc&&zr(new wc(new ArrayBuffer(1)))!=Va||Ms&&zr(new Ms)!=za||Ac&&zr(Ac.resolve())!=Xg||Ec&&zr(new Ec)!=$a||xc&&zr(new xc)!=yc)&&(zr=function(r){var e=js(r),t=e==Cn?r.constructor:void 0,i=t?ki(t):"";if(i)switch(i){case LC:return Va;case RC:return za;case NC:return Xg;case OC:return $a;case PC:return yc}return e});function h3(r,e){return e=e??lb,!!e&&(typeof r=="number"||dC.test(r))&&r>-1&&r%1==0&&r<e}function f3(r){var e=typeof r;return e=="string"||e=="number"||e=="symbol"||e=="boolean"?r!=="__proto__":r===null}function p3(r){return!!eb&&eb in r}function m3(r){var e=r&&r.constructor,t=typeof e=="function"&&e.prototype||Xa;return r===t}function g3(r){return Ab.call(r)}function ki(r){if(r!=null){try{return wb.call(r)}catch{}try{return r+""}catch{}}return""}function kb(r,e){return r===e||r!==r&&e!==e}var b3=sb(function(){return arguments}())?sb:function(r){return Fs(r)&&Xt.call(r,"callee")&&!Eb.call(r,"callee")},Ga=Array.isArray;function v3(r){return r!=null&&Cb(r.length)&&!Sb(r)}var _c=CC||E3;function y3(r,e){return xb(r,e)}function Sb(r){if(!Tb(r))return!1;var e=js(r);return e==hb||e==JS||e==GS||e==YS}function Cb(r){return typeof r=="number"&&r>-1&&r%1==0&&r<=lb}function Tb(r){var e=typeof r;return r!=null&&(e=="object"||e=="function")}function Fs(r){return r!=null&&typeof r=="object"}var Lb=Qg?bC(Qg):o3;function w3(r){return v3(r)?r3(r):a3(r)}function A3(){return[]}function E3(){return!1}Tn.exports=y3});var Rb=jt(Tc=>{"use strict";Object.defineProperty(Tc,"__esModule",{value:!0});var x3=pc(),_3=Sc(),Cc;(function(r){function e(s={},o={},a=!1){typeof s!="object"&&(s={}),typeof o!="object"&&(o={});let l=x3(o);a||(l=Object.keys(l).reduce((c,f)=>(l[f]!=null&&(c[f]=l[f]),c),{}));for(let c in s)s[c]!==void 0&&o[c]===void 0&&(l[c]=s[c]);return Object.keys(l).length>0?l:void 0}r.compose=e;function t(s={},o={}){typeof s!="object"&&(s={}),typeof o!="object"&&(o={});let a=Object.keys(s).concat(Object.keys(o)).reduce((l,c)=>(_3(s[c],o[c])||(l[c]=o[c]===void 0?null:o[c]),l),{});return Object.keys(a).length>0?a:void 0}r.diff=t;function i(s={},o={}){s=s||{};let a=Object.keys(o).reduce((l,c)=>(o[c]!==s[c]&&s[c]!==void 0&&(l[c]=o[c]),l),{});return Object.keys(s).reduce((l,c)=>(s[c]!==o[c]&&o[c]===void 0&&(l[c]=null),l),a)}r.invert=i;function n(s,o,a=!1){if(typeof s!="object")return o;if(typeof o!="object")return;if(!a)return o;let l=Object.keys(o).reduce((c,f)=>(s[f]===void 0&&(c[f]=o[f]),c),{});return Object.keys(l).length>0?l:void 0}r.transform=n})(Cc||(Cc={}));Tc.default=Cc});var Nc=jt(Rc=>{"use strict";Object.defineProperty(Rc,"__esModule",{value:!0});var Lc;(function(r){function e(t){return typeof t.delete=="number"?t.delete:typeof t.retain=="number"?t.retain:typeof t.retain=="object"&&t.retain!==null?1:typeof t.insert=="string"?t.insert.length:1}r.length=e})(Lc||(Lc={}));Rc.default=Lc});var Ob=jt(Pc=>{"use strict";Object.defineProperty(Pc,"__esModule",{value:!0});var Nb=Nc(),Oc=class{constructor(e){this.ops=e,this.index=0,this.offset=0}hasNext(){return this.peekLength()<1/0}next(e){e||(e=1/0);let t=this.ops[this.index];if(t){let i=this.offset,n=Nb.default.length(t);if(e>=n-i?(e=n-i,this.index+=1,this.offset=0):this.offset+=e,typeof t.delete=="number")return{delete:e};{let s={};return t.attributes&&(s.attributes=t.attributes),typeof t.retain=="number"?s.retain=e:typeof t.retain=="object"&&t.retain!==null?s.retain=t.retain:typeof t.insert=="string"?s.insert=t.insert.substr(i,e):s.insert=t.insert,s}}else return{retain:1/0}}peek(){return this.ops[this.index]}peekLength(){return this.ops[this.index]?Nb.default.length(this.ops[this.index])-this.offset:1/0}peekType(){let e=this.ops[this.index];return e?typeof e.delete=="number"?"delete":typeof e.retain=="number"||typeof e.retain=="object"&&e.retain!==null?"retain":"insert":"retain"}rest(){if(this.hasNext()){if(this.offset===0)return this.ops.slice(this.index);{let e=this.offset,t=this.index,i=this.next(),n=this.ops.slice(this.index);return this.offset=e,this.index=t,[i].concat(n)}}else return[]}};Pc.default=Oc});var vt=jt((br,el)=>{"use strict";Object.defineProperty(br,"__esModule",{value:!0});br.AttributeMap=br.OpIterator=br.Op=void 0;var Qa=lg(),k3=pc(),Dc=Sc(),Si=Rb();br.AttributeMap=Si.default;var gr=Nc();br.Op=gr.default;var Tt=Ob();br.OpIterator=Tt.default;var S3=String.fromCharCode(0),Pb=(r,e)=>{if(typeof r!="object"||r===null)throw new Error(`cannot retain a ${typeof r}`);if(typeof e!="object"||e===null)throw new Error(`cannot retain a ${typeof e}`);let t=Object.keys(r)[0];if(!t||t!==Object.keys(e)[0])throw new Error(`embed types not matched: ${t} != ${Object.keys(e)[0]}`);return[t,r[t],e[t]]},de=class{constructor(e){Array.isArray(e)?this.ops=e:e!=null&&Array.isArray(e.ops)?this.ops=e.ops:this.ops=[]}static registerEmbed(e,t){this.handlers[e]=t}static unregisterEmbed(e){delete this.handlers[e]}static getHandler(e){let t=this.handlers[e];if(!t)throw new Error(`no handlers for embed type "${e}"`);return t}insert(e,t){let i={};return typeof e=="string"&&e.length===0?this:(i.insert=e,t!=null&&typeof t=="object"&&Object.keys(t).length>0&&(i.attributes=t),this.push(i))}delete(e){return e<=0?this:this.push({delete:e})}retain(e,t){if(typeof e=="number"&&e<=0)return this;let i={retain:e};return t!=null&&typeof t=="object"&&Object.keys(t).length>0&&(i.attributes=t),this.push(i)}push(e){let t=this.ops.length,i=this.ops[t-1];if(e=k3(e),typeof i=="object"){if(typeof e.delete=="number"&&typeof i.delete=="number")return this.ops[t-1]={delete:i.delete+e.delete},this;if(typeof i.delete=="number"&&e.insert!=null&&(t-=1,i=this.ops[t-1],typeof i!="object"))return this.ops.unshift(e),this;if(Dc(e.attributes,i.attributes)){if(typeof e.insert=="string"&&typeof i.insert=="string")return this.ops[t-1]={insert:i.insert+e.insert},typeof e.attributes=="object"&&(this.ops[t-1].attributes=e.attributes),this;if(typeof e.retain=="number"&&typeof i.retain=="number")return this.ops[t-1]={retain:i.retain+e.retain},typeof e.attributes=="object"&&(this.ops[t-1].attributes=e.attributes),this}}return t===this.ops.length?this.ops.push(e):this.ops.splice(t,0,e),this}chop(){let e=this.ops[this.ops.length-1];return e&&typeof e.retain=="number"&&!e.attributes&&this.ops.pop(),this}filter(e){return this.ops.filter(e)}forEach(e){this.ops.forEach(e)}map(e){return this.ops.map(e)}partition(e){let t=[],i=[];return this.forEach(n=>{(e(n)?t:i).push(n)}),[t,i]}reduce(e,t){return this.ops.reduce(e,t)}changeLength(){return this.reduce((e,t)=>t.insert?e+gr.default.length(t):t.delete?e-t.delete:e,0)}length(){return this.reduce((e,t)=>e+gr.default.length(t),0)}slice(e=0,t=1/0){let i=[],n=new Tt.default(this.ops),s=0;for(;s<t&&n.hasNext();){let o;s<e?o=n.next(e-s):(o=n.next(t-s),i.push(o)),s+=gr.default.length(o)}return new de(i)}compose(e){let t=new Tt.default(this.ops),i=new Tt.default(e.ops),n=[],s=i.peek();if(s!=null&&typeof s.retain=="number"&&s.attributes==null){let a=s.retain;for(;t.peekType()==="insert"&&t.peekLength()<=a;)a-=t.peekLength(),n.push(t.next());s.retain-a>0&&i.next(s.retain-a)}let o=new de(n);for(;t.hasNext()||i.hasNext();)if(i.peekType()==="insert")o.push(i.next());else if(t.peekType()==="delete")o.push(t.next());else{let a=Math.min(t.peekLength(),i.peekLength()),l=t.next(a),c=i.next(a);if(c.retain){let f={};if(typeof l.retain=="number")f.retain=typeof c.retain=="number"?a:c.retain;else if(typeof c.retain=="number")l.retain==null?f.insert=l.insert:f.retain=l.retain;else{let y=l.retain==null?"insert":"retain",[v,g,x]=Pb(l[y],c.retain),S=de.getHandler(v);f[y]={[v]:S.compose(g,x,y==="retain")}}let m=Si.default.compose(l.attributes,c.attributes,typeof l.retain=="number");if(m&&(f.attributes=m),o.push(f),!i.hasNext()&&Dc(o.ops[o.ops.length-1],f)){let y=new de(t.rest());return o.concat(y).chop()}}else typeof c.delete=="number"&&(typeof l.retain=="number"||typeof l.retain=="object"&&l.retain!==null)&&o.push(c)}return o.chop()}concat(e){let t=new de(this.ops.slice());return e.ops.length>0&&(t.push(e.ops[0]),t.ops=t.ops.concat(e.ops.slice(1))),t}diff(e,t){if(this.ops===e.ops)return new de;let i=[this,e].map(l=>l.map(c=>{if(c.insert!=null)return typeof c.insert=="string"?c.insert:S3;let f=l===e?"on":"with";throw new Error("diff() called "+f+" non-document")}).join("")),n=new de,s=Qa(i[0],i[1],t,!0),o=new Tt.default(this.ops),a=new Tt.default(e.ops);return s.forEach(l=>{let c=l[1].length;for(;c>0;){let f=0;switch(l[0]){case Qa.INSERT:f=Math.min(a.peekLength(),c),n.push(a.next(f));break;case Qa.DELETE:f=Math.min(c,o.peekLength()),o.next(f),n.delete(f);break;case Qa.EQUAL:f=Math.min(o.peekLength(),a.peekLength(),c);let m=o.next(f),y=a.next(f);Dc(m.insert,y.insert)?n.retain(f,Si.default.diff(m.attributes,y.attributes)):n.push(y).delete(f);break}c-=f}}),n.chop()}eachLine(e,t=`
`){let i=new Tt.default(this.ops),n=new de,s=0;for(;i.hasNext();){if(i.peekType()!=="insert")return;let o=i.peek(),a=gr.default.length(o)-i.peekLength(),l=typeof o.insert=="string"?o.insert.indexOf(t,a)-a:-1;if(l<0)n.push(i.next());else if(l>0)n.push(i.next(l));else{if(e(n,i.next(1).attributes||{},s)===!1)return;s+=1,n=new de}}n.length()>0&&e(n,{},s)}invert(e){let t=new de;return this.reduce((i,n)=>{if(n.insert)t.delete(gr.default.length(n));else{if(typeof n.retain=="number"&&n.attributes==null)return t.retain(n.retain),i+n.retain;if(n.delete||typeof n.retain=="number"){let s=n.delete||n.retain;return e.slice(i,i+s).forEach(a=>{n.delete?t.push(a):n.retain&&n.attributes&&t.retain(gr.default.length(a),Si.default.invert(n.attributes,a.attributes))}),i+s}else if(typeof n.retain=="object"&&n.retain!==null){let s=e.slice(i,i+1),o=new Tt.default(s.ops).next(),[a,l,c]=Pb(n.retain,o.insert),f=de.getHandler(a);return t.retain({[a]:f.invert(l,c)},Si.default.invert(n.attributes,o.attributes)),i+1}}return i},0),t.chop()}transform(e,t=!1){if(t=!!t,typeof e=="number")return this.transformPosition(e,t);let i=e,n=new Tt.default(this.ops),s=new Tt.default(i.ops),o=new de;for(;n.hasNext()||s.hasNext();)if(n.peekType()==="insert"&&(t||s.peekType()!=="insert"))o.retain(gr.default.length(n.next()));else if(s.peekType()==="insert")o.push(s.next());else{let a=Math.min(n.peekLength(),s.peekLength()),l=n.next(a),c=s.next(a);if(l.delete)continue;if(c.delete)o.push(c);else{let f=l.retain,m=c.retain,y=typeof m=="object"&&m!==null?m:a;if(typeof f=="object"&&f!==null&&typeof m=="object"&&m!==null){let v=Object.keys(f)[0];if(v===Object.keys(m)[0]){let g=de.getHandler(v);g&&(y={[v]:g.transform(f[v],m[v],t)})}}o.retain(y,Si.default.transform(l.attributes,c.attributes,t))}}return o.chop()}transformPosition(e,t=!1){t=!!t;let i=new Tt.default(this.ops),n=0;for(;i.hasNext()&&n<=e;){let s=i.peekLength(),o=i.peekType();if(i.next(),o==="delete"){e-=Math.min(s,e-n);continue}else o==="insert"&&(n<e||!t)&&(e+=s);n+=s}return e}};de.Op=gr.default;de.OpIterator=Tt.default;de.AttributeMap=Si.default;de.handlers={};br.default=de;typeof el=="object"&&(el.exports=de,el.exports.default=de)});var Mb=jt((BB,Bc)=>{"use strict";var C3=Object.prototype.hasOwnProperty,Ke="~";function Us(){}Object.create&&(Us.prototype=Object.create(null),new Us().__proto__||(Ke=!1));function T3(r,e,t){this.fn=r,this.context=e,this.once=t||!1}function Ib(r,e,t,i,n){if(typeof t!="function")throw new TypeError("The listener must be a function");var s=new T3(t,i||r,n),o=Ke?Ke+e:e;return r._events[o]?r._events[o].fn?r._events[o]=[r._events[o],s]:r._events[o].push(s):(r._events[o]=s,r._eventsCount++),r}function tl(r,e){--r._eventsCount===0?r._events=new Us:delete r._events[e]}function Fe(){this._events=new Us,this._eventsCount=0}Fe.prototype.eventNames=function(){var e=[],t,i;if(this._eventsCount===0)return e;for(i in t=this._events)C3.call(t,i)&&e.push(Ke?i.slice(1):i);return Object.getOwnPropertySymbols?e.concat(Object.getOwnPropertySymbols(t)):e};Fe.prototype.listeners=function(e){var t=Ke?Ke+e:e,i=this._events[t];if(!i)return[];if(i.fn)return[i.fn];for(var n=0,s=i.length,o=new Array(s);n<s;n++)o[n]=i[n].fn;return o};Fe.prototype.listenerCount=function(e){var t=Ke?Ke+e:e,i=this._events[t];return i?i.fn?1:i.length:0};Fe.prototype.emit=function(e,t,i,n,s,o){var a=Ke?Ke+e:e;if(!this._events[a])return!1;var l=this._events[a],c=arguments.length,f,m;if(l.fn){switch(l.once&&this.removeListener(e,l.fn,void 0,!0),c){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,t),!0;case 3:return l.fn.call(l.context,t,i),!0;case 4:return l.fn.call(l.context,t,i,n),!0;case 5:return l.fn.call(l.context,t,i,n,s),!0;case 6:return l.fn.call(l.context,t,i,n,s,o),!0}for(m=1,f=new Array(c-1);m<c;m++)f[m-1]=arguments[m];l.fn.apply(l.context,f)}else{var y=l.length,v;for(m=0;m<y;m++)switch(l[m].once&&this.removeListener(e,l[m].fn,void 0,!0),c){case 1:l[m].fn.call(l[m].context);break;case 2:l[m].fn.call(l[m].context,t);break;case 3:l[m].fn.call(l[m].context,t,i);break;case 4:l[m].fn.call(l[m].context,t,i,n);break;default:if(!f)for(v=1,f=new Array(c-1);v<c;v++)f[v-1]=arguments[v];l[m].fn.apply(l[m].context,f)}}return!0};Fe.prototype.on=function(e,t,i){return Ib(this,e,t,i,!1)};Fe.prototype.once=function(e,t,i){return Ib(this,e,t,i,!0)};Fe.prototype.removeListener=function(e,t,i,n){var s=Ke?Ke+e:e;if(!this._events[s])return this;if(!t)return tl(this,s),this;var o=this._events[s];if(o.fn)o.fn===t&&(!n||o.once)&&(!i||o.context===i)&&tl(this,s);else{for(var a=0,l=[],c=o.length;a<c;a++)(o[a].fn!==t||n&&!o[a].once||i&&o[a].context!==i)&&l.push(o[a]);l.length?this._events[s]=l.length===1?l[0]:l:tl(this,s)}return this};Fe.prototype.removeAllListeners=function(e){var t;return e?(t=Ke?Ke+e:e,this._events[t]&&tl(this,t)):(this._events=new Us,this._eventsCount=0),this};Fe.prototype.off=Fe.prototype.removeListener;Fe.prototype.addListener=Fe.prototype.on;Fe.prefixed=Ke;Fe.EventEmitter=Fe;typeof Bc<"u"&&(Bc.exports=Fe)});var Bv=jt((Mv,_l)=>{(function(){function r(u){"use strict";var h={omitExtraWLInCodeBlocks:{defaultValue:!1,describe:"Omit the default extra whiteline added to code blocks",type:"boolean"},noHeaderId:{defaultValue:!1,describe:"Turn on/off generated header id",type:"boolean"},prefixHeaderId:{defaultValue:!1,describe:"Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",type:"string"},rawPrefixHeaderId:{defaultValue:!1,describe:'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',type:"boolean"},ghCompatibleHeaderId:{defaultValue:!1,describe:"Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)",type:"boolean"},rawHeaderId:{defaultValue:!1,describe:`Remove only spaces, ' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids`,type:"boolean"},headerLevelStart:{defaultValue:!1,describe:"The header blocks level start",type:"integer"},parseImgDimensions:{defaultValue:!1,describe:"Turn on/off image dimension parsing",type:"boolean"},simplifiedAutoLink:{defaultValue:!1,describe:"Turn on/off GFM autolink style",type:"boolean"},excludeTrailingPunctuationFromURLs:{defaultValue:!1,describe:"Excludes trailing punctuation from links generated with autoLinking",type:"boolean"},literalMidWordUnderscores:{defaultValue:!1,describe:"Parse midword underscores as literal underscores",type:"boolean"},literalMidWordAsterisks:{defaultValue:!1,describe:"Parse midword asterisks as literal asterisks",type:"boolean"},strikethrough:{defaultValue:!1,describe:"Turn on/off strikethrough support",type:"boolean"},tables:{defaultValue:!1,describe:"Turn on/off tables support",type:"boolean"},tablesHeaderId:{defaultValue:!1,describe:"Add an id to table headers",type:"boolean"},ghCodeBlocks:{defaultValue:!0,describe:"Turn on/off GFM fenced code blocks support",type:"boolean"},tasklists:{defaultValue:!1,describe:"Turn on/off GFM tasklist support",type:"boolean"},smoothLivePreview:{defaultValue:!1,describe:"Prevents weird effects in live previews due to incomplete input",type:"boolean"},smartIndentationFix:{defaultValue:!1,describe:"Tries to smartly fix indentation in es6 strings",type:"boolean"},disableForced4SpacesIndentedSublists:{defaultValue:!1,describe:"Disables the requirement of indenting nested sublists by 4 spaces",type:"boolean"},simpleLineBreaks:{defaultValue:!1,describe:"Parses simple line breaks as <br> (GFM Style)",type:"boolean"},requireSpaceBeforeHeadingText:{defaultValue:!1,describe:"Makes adding a space between `#` and the header text mandatory (GFM Style)",type:"boolean"},ghMentions:{defaultValue:!1,describe:"Enables github @mentions",type:"boolean"},ghMentionsLink:{defaultValue:"https://github.com/{u}",describe:"Changes the link generated by @mentions. Only applies if ghMentions option is enabled.",type:"string"},encodeEmails:{defaultValue:!0,describe:"Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities",type:"boolean"},openLinksInNewWindow:{defaultValue:!1,describe:"Open all links in new windows",type:"boolean"},backslashEscapesHTMLTags:{defaultValue:!1,describe:"Support for HTML Tag escaping. ex: <div>foo</div>",type:"boolean"},emoji:{defaultValue:!1,describe:"Enable emoji support. Ex: `this is a :smile: emoji`",type:"boolean"},underline:{defaultValue:!1,describe:"Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`",type:"boolean"},ellipsis:{defaultValue:!0,describe:"Replaces three dots with the ellipsis unicode character",type:"boolean"},completeHTMLDocument:{defaultValue:!1,describe:"Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags",type:"boolean"},metadata:{defaultValue:!1,describe:"Enable support for document metadata (defined at the top of the document between `\xAB\xAB\xAB` and `\xBB\xBB\xBB` or between `---` and `---`).",type:"boolean"},splitAdjacentBlockquotes:{defaultValue:!1,describe:"Split adjacent blockquote blocks",type:"boolean"}};if(u===!1)return JSON.parse(JSON.stringify(h));var d={};for(var p in h)h.hasOwnProperty(p)&&(d[p]=h[p].defaultValue);return d}function e(){"use strict";var u=r(!0),h={};for(var d in u)u.hasOwnProperty(d)&&(h[d]=!0);return h}var t={},i={},n={},s=r(!0),o="vanilla",a={github:{omitExtraWLInCodeBlocks:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,disableForced4SpacesIndentedSublists:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghCompatibleHeaderId:!0,ghMentions:!0,backslashEscapesHTMLTags:!0,emoji:!0,splitAdjacentBlockquotes:!0},original:{noHeaderId:!0,ghCodeBlocks:!1},ghost:{omitExtraWLInCodeBlocks:!0,parseImgDimensions:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,smoothLivePreview:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghMentions:!1,encodeEmails:!0},vanilla:r(!0),allOn:e()};t.helper={},t.extensions={},t.setOption=function(u,h){"use strict";return s[u]=h,this},t.getOption=function(u){"use strict";return s[u]},t.getOptions=function(){"use strict";return s},t.resetOptions=function(){"use strict";s=r(!0)},t.setFlavor=function(u){"use strict";if(!a.hasOwnProperty(u))throw Error(u+" flavor was not found");t.resetOptions();var h=a[u];o=u;for(var d in h)h.hasOwnProperty(d)&&(s[d]=h[d])},t.getFlavor=function(){"use strict";return o},t.getFlavorOptions=function(u){"use strict";if(a.hasOwnProperty(u))return a[u]},t.getDefaultOptions=function(u){"use strict";return r(u)},t.subParser=function(u,h){"use strict";if(t.helper.isString(u))if(typeof h<"u")i[u]=h;else{if(i.hasOwnProperty(u))return i[u];throw Error("SubParser named "+u+" not registered!")}},t.extension=function(u,h){"use strict";if(!t.helper.isString(u))throw Error("Extension 'name' must be a string");if(u=t.helper.stdExtName(u),t.helper.isUndefined(h)){if(!n.hasOwnProperty(u))throw Error("Extension named "+u+" is not registered!");return n[u]}else{typeof h=="function"&&(h=h()),t.helper.isArray(h)||(h=[h]);var d=l(h,u);if(d.valid)n[u]=h;else throw Error(d.error)}},t.getAllExtensions=function(){"use strict";return n},t.removeExtension=function(u){"use strict";delete n[u]},t.resetExtensions=function(){"use strict";n={}};function l(u,h){"use strict";var d=h?"Error in "+h+" extension->":"Error in unnamed extension",p={valid:!0,error:""};t.helper.isArray(u)||(u=[u]);for(var b=0;b<u.length;++b){var E=d+" sub-extension "+b+": ",w=u[b];if(typeof w!="object")return p.valid=!1,p.error=E+"must be an object, but "+typeof w+" given",p;if(!t.helper.isString(w.type))return p.valid=!1,p.error=E+'property "type" must be a string, but '+typeof w.type+" given",p;var _=w.type=w.type.toLowerCase();if(_==="language"&&(_=w.type="lang"),_==="html"&&(_=w.type="output"),_!=="lang"&&_!=="output"&&_!=="listener")return p.valid=!1,p.error=E+"type "+_+' is not recognized. Valid values: "lang/language", "output/html" or "listener"',p;if(_==="listener"){if(t.helper.isUndefined(w.listeners))return p.valid=!1,p.error=E+'. Extensions of type "listener" must have a property called "listeners"',p}else if(t.helper.isUndefined(w.filter)&&t.helper.isUndefined(w.regex))return p.valid=!1,p.error=E+_+' extensions must define either a "regex" property or a "filter" method',p;if(w.listeners){if(typeof w.listeners!="object")return p.valid=!1,p.error=E+'"listeners" property must be an object but '+typeof w.listeners+" given",p;for(var R in w.listeners)if(w.listeners.hasOwnProperty(R)&&typeof w.listeners[R]!="function")return p.valid=!1,p.error=E+'"listeners" property must be an hash of [event name]: [callback]. listeners.'+R+" must be a function but "+typeof w.listeners[R]+" given",p}if(w.filter){if(typeof w.filter!="function")return p.valid=!1,p.error=E+'"filter" must be a function, but '+typeof w.filter+" given",p}else if(w.regex){if(t.helper.isString(w.regex)&&(w.regex=new RegExp(w.regex,"g")),!(w.regex instanceof RegExp))return p.valid=!1,p.error=E+'"regex" property must either be a string or a RegExp object, but '+typeof w.regex+" given",p;if(t.helper.isUndefined(w.replace))return p.valid=!1,p.error=E+'"regex" extensions must implement a replace string or function',p}}return p}t.validateExtension=function(u){"use strict";var h=l(u,null);return h.valid?!0:(console.warn(h.error),!1)},t.hasOwnProperty("helper")||(t.helper={}),t.helper.isString=function(u){"use strict";return typeof u=="string"||u instanceof String},t.helper.isFunction=function(u){"use strict";var h={};return u&&h.toString.call(u)==="[object Function]"},t.helper.isArray=function(u){"use strict";return Array.isArray(u)},t.helper.isUndefined=function(u){"use strict";return typeof u>"u"},t.helper.forEach=function(u,h){"use strict";if(t.helper.isUndefined(u))throw new Error("obj param is required");if(t.helper.isUndefined(h))throw new Error("callback param is required");if(!t.helper.isFunction(h))throw new Error("callback param must be a function/closure");if(typeof u.forEach=="function")u.forEach(h);else if(t.helper.isArray(u))for(var d=0;d<u.length;d++)h(u[d],d,u);else if(typeof u=="object")for(var p in u)u.hasOwnProperty(p)&&h(u[p],p,u);else throw new Error("obj does not seem to be an array or an iterable object")},t.helper.stdExtName=function(u){"use strict";return u.replace(/[_?*+\/\\.^-]/g,"").replace(/\s/g,"").toLowerCase()};function c(u,h){"use strict";var d=h.charCodeAt(0);return"\xA8E"+d+"E"}t.helper.escapeCharactersCallback=c,t.helper.escapeCharacters=function(u,h,d){"use strict";var p="(["+h.replace(/([\[\]\\])/g,"\\$1")+"])";d&&(p="\\\\"+p);var b=new RegExp(p,"g");return u=u.replace(b,c),u},t.helper.unescapeHTMLEntities=function(u){"use strict";return u.replace(/&quot;/g,'"').replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")};var f=function(u,h,d,p){"use strict";var b=p||"",E=b.indexOf("g")>-1,w=new RegExp(h+"|"+d,"g"+b.replace(/g/g,"")),_=new RegExp(h,b.replace(/g/g,"")),R=[],P,O,M,A,N;do for(P=0;M=w.exec(u);)if(_.test(M[0]))P++||(O=w.lastIndex,A=O-M[0].length);else if(P&&!--P){N=M.index+M[0].length;var L={left:{start:A,end:O},match:{start:O,end:M.index},right:{start:M.index,end:N},wholeMatch:{start:A,end:N}};if(R.push(L),!E)return R}while(P&&(w.lastIndex=O));return R};t.helper.matchRecursiveRegExp=function(u,h,d,p){"use strict";for(var b=f(u,h,d,p),E=[],w=0;w<b.length;++w)E.push([u.slice(b[w].wholeMatch.start,b[w].wholeMatch.end),u.slice(b[w].match.start,b[w].match.end),u.slice(b[w].left.start,b[w].left.end),u.slice(b[w].right.start,b[w].right.end)]);return E},t.helper.replaceRecursiveRegExp=function(u,h,d,p,b){"use strict";if(!t.helper.isFunction(h)){var E=h;h=function(){return E}}var w=f(u,d,p,b),_=u,R=w.length;if(R>0){var P=[];w[0].wholeMatch.start!==0&&P.push(u.slice(0,w[0].wholeMatch.start));for(var O=0;O<R;++O)P.push(h(u.slice(w[O].wholeMatch.start,w[O].wholeMatch.end),u.slice(w[O].match.start,w[O].match.end),u.slice(w[O].left.start,w[O].left.end),u.slice(w[O].right.start,w[O].right.end))),O<R-1&&P.push(u.slice(w[O].wholeMatch.end,w[O+1].wholeMatch.start));w[R-1].wholeMatch.end<u.length&&P.push(u.slice(w[R-1].wholeMatch.end)),_=P.join("")}return _},t.helper.regexIndexOf=function(u,h,d){"use strict";if(!t.helper.isString(u))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";if(!(h instanceof RegExp))throw"InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";var p=u.substring(d||0).search(h);return p>=0?p+(d||0):p},t.helper.splitAtIndex=function(u,h){"use strict";if(!t.helper.isString(u))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";return[u.substring(0,h),u.substring(h)]},t.helper.encodeEmailAddress=function(u){"use strict";var h=[function(d){return"&#"+d.charCodeAt(0)+";"},function(d){return"&#x"+d.charCodeAt(0).toString(16)+";"},function(d){return d}];return u=u.replace(/./g,function(d){if(d==="@")d=h[Math.floor(Math.random()*2)](d);else{var p=Math.random();d=p>.9?h[2](d):p>.45?h[1](d):h[0](d)}return d}),u},t.helper.padEnd=function(h,d,p){"use strict";return d=d>>0,p=String(p||" "),h.length>d?String(h):(d=d-h.length,d>p.length&&(p+=p.repeat(d/p.length)),String(h)+p.slice(0,d))},typeof console>"u"&&(console={warn:function(u){"use strict";alert(u)},log:function(u){"use strict";alert(u)},error:function(u){"use strict";throw u}}),t.helper.regexes={asteriskDashAndColon:/([*_:~])/g},t.helper.emojis={"+1":"\u{1F44D}","-1":"\u{1F44E}",100:"\u{1F4AF}",1234:"\u{1F522}","1st_place_medal":"\u{1F947}","2nd_place_medal":"\u{1F948}","3rd_place_medal":"\u{1F949}","8ball":"\u{1F3B1}",a:"\u{1F170}\uFE0F",ab:"\u{1F18E}",abc:"\u{1F524}",abcd:"\u{1F521}",accept:"\u{1F251}",aerial_tramway:"\u{1F6A1}",airplane:"\u2708\uFE0F",alarm_clock:"\u23F0",alembic:"\u2697\uFE0F",alien:"\u{1F47D}",ambulance:"\u{1F691}",amphora:"\u{1F3FA}",anchor:"\u2693\uFE0F",angel:"\u{1F47C}",anger:"\u{1F4A2}",angry:"\u{1F620}",anguished:"\u{1F627}",ant:"\u{1F41C}",apple:"\u{1F34E}",aquarius:"\u2652\uFE0F",aries:"\u2648\uFE0F",arrow_backward:"\u25C0\uFE0F",arrow_double_down:"\u23EC",arrow_double_up:"\u23EB",arrow_down:"\u2B07\uFE0F",arrow_down_small:"\u{1F53D}",arrow_forward:"\u25B6\uFE0F",arrow_heading_down:"\u2935\uFE0F",arrow_heading_up:"\u2934\uFE0F",arrow_left:"\u2B05\uFE0F",arrow_lower_left:"\u2199\uFE0F",arrow_lower_right:"\u2198\uFE0F",arrow_right:"\u27A1\uFE0F",arrow_right_hook:"\u21AA\uFE0F",arrow_up:"\u2B06\uFE0F",arrow_up_down:"\u2195\uFE0F",arrow_up_small:"\u{1F53C}",arrow_upper_left:"\u2196\uFE0F",arrow_upper_right:"\u2197\uFE0F",arrows_clockwise:"\u{1F503}",arrows_counterclockwise:"\u{1F504}",art:"\u{1F3A8}",articulated_lorry:"\u{1F69B}",artificial_satellite:"\u{1F6F0}",astonished:"\u{1F632}",athletic_shoe:"\u{1F45F}",atm:"\u{1F3E7}",atom_symbol:"\u269B\uFE0F",avocado:"\u{1F951}",b:"\u{1F171}\uFE0F",baby:"\u{1F476}",baby_bottle:"\u{1F37C}",baby_chick:"\u{1F424}",baby_symbol:"\u{1F6BC}",back:"\u{1F519}",bacon:"\u{1F953}",badminton:"\u{1F3F8}",baggage_claim:"\u{1F6C4}",baguette_bread:"\u{1F956}",balance_scale:"\u2696\uFE0F",balloon:"\u{1F388}",ballot_box:"\u{1F5F3}",ballot_box_with_check:"\u2611\uFE0F",bamboo:"\u{1F38D}",banana:"\u{1F34C}",bangbang:"\u203C\uFE0F",bank:"\u{1F3E6}",bar_chart:"\u{1F4CA}",barber:"\u{1F488}",baseball:"\u26BE\uFE0F",basketball:"\u{1F3C0}",basketball_man:"\u26F9\uFE0F",basketball_woman:"\u26F9\uFE0F&zwj;\u2640\uFE0F",bat:"\u{1F987}",bath:"\u{1F6C0}",bathtub:"\u{1F6C1}",battery:"\u{1F50B}",beach_umbrella:"\u{1F3D6}",bear:"\u{1F43B}",bed:"\u{1F6CF}",bee:"\u{1F41D}",beer:"\u{1F37A}",beers:"\u{1F37B}",beetle:"\u{1F41E}",beginner:"\u{1F530}",bell:"\u{1F514}",bellhop_bell:"\u{1F6CE}",bento:"\u{1F371}",biking_man:"\u{1F6B4}",bike:"\u{1F6B2}",biking_woman:"\u{1F6B4}&zwj;\u2640\uFE0F",bikini:"\u{1F459}",biohazard:"\u2623\uFE0F",bird:"\u{1F426}",birthday:"\u{1F382}",black_circle:"\u26AB\uFE0F",black_flag:"\u{1F3F4}",black_heart:"\u{1F5A4}",black_joker:"\u{1F0CF}",black_large_square:"\u2B1B\uFE0F",black_medium_small_square:"\u25FE\uFE0F",black_medium_square:"\u25FC\uFE0F",black_nib:"\u2712\uFE0F",black_small_square:"\u25AA\uFE0F",black_square_button:"\u{1F532}",blonde_man:"\u{1F471}",blonde_woman:"\u{1F471}&zwj;\u2640\uFE0F",blossom:"\u{1F33C}",blowfish:"\u{1F421}",blue_book:"\u{1F4D8}",blue_car:"\u{1F699}",blue_heart:"\u{1F499}",blush:"\u{1F60A}",boar:"\u{1F417}",boat:"\u26F5\uFE0F",bomb:"\u{1F4A3}",book:"\u{1F4D6}",bookmark:"\u{1F516}",bookmark_tabs:"\u{1F4D1}",books:"\u{1F4DA}",boom:"\u{1F4A5}",boot:"\u{1F462}",bouquet:"\u{1F490}",bowing_man:"\u{1F647}",bow_and_arrow:"\u{1F3F9}",bowing_woman:"\u{1F647}&zwj;\u2640\uFE0F",bowling:"\u{1F3B3}",boxing_glove:"\u{1F94A}",boy:"\u{1F466}",bread:"\u{1F35E}",bride_with_veil:"\u{1F470}",bridge_at_night:"\u{1F309}",briefcase:"\u{1F4BC}",broken_heart:"\u{1F494}",bug:"\u{1F41B}",building_construction:"\u{1F3D7}",bulb:"\u{1F4A1}",bullettrain_front:"\u{1F685}",bullettrain_side:"\u{1F684}",burrito:"\u{1F32F}",bus:"\u{1F68C}",business_suit_levitating:"\u{1F574}",busstop:"\u{1F68F}",bust_in_silhouette:"\u{1F464}",busts_in_silhouette:"\u{1F465}",butterfly:"\u{1F98B}",cactus:"\u{1F335}",cake:"\u{1F370}",calendar:"\u{1F4C6}",call_me_hand:"\u{1F919}",calling:"\u{1F4F2}",camel:"\u{1F42B}",camera:"\u{1F4F7}",camera_flash:"\u{1F4F8}",camping:"\u{1F3D5}",cancer:"\u264B\uFE0F",candle:"\u{1F56F}",candy:"\u{1F36C}",canoe:"\u{1F6F6}",capital_abcd:"\u{1F520}",capricorn:"\u2651\uFE0F",car:"\u{1F697}",card_file_box:"\u{1F5C3}",card_index:"\u{1F4C7}",card_index_dividers:"\u{1F5C2}",carousel_horse:"\u{1F3A0}",carrot:"\u{1F955}",cat:"\u{1F431}",cat2:"\u{1F408}",cd:"\u{1F4BF}",chains:"\u26D3",champagne:"\u{1F37E}",chart:"\u{1F4B9}",chart_with_downwards_trend:"\u{1F4C9}",chart_with_upwards_trend:"\u{1F4C8}",checkered_flag:"\u{1F3C1}",cheese:"\u{1F9C0}",cherries:"\u{1F352}",cherry_blossom:"\u{1F338}",chestnut:"\u{1F330}",chicken:"\u{1F414}",children_crossing:"\u{1F6B8}",chipmunk:"\u{1F43F}",chocolate_bar:"\u{1F36B}",christmas_tree:"\u{1F384}",church:"\u26EA\uFE0F",cinema:"\u{1F3A6}",circus_tent:"\u{1F3AA}",city_sunrise:"\u{1F307}",city_sunset:"\u{1F306}",cityscape:"\u{1F3D9}",cl:"\u{1F191}",clamp:"\u{1F5DC}",clap:"\u{1F44F}",clapper:"\u{1F3AC}",classical_building:"\u{1F3DB}",clinking_glasses:"\u{1F942}",clipboard:"\u{1F4CB}",clock1:"\u{1F550}",clock10:"\u{1F559}",clock1030:"\u{1F565}",clock11:"\u{1F55A}",clock1130:"\u{1F566}",clock12:"\u{1F55B}",clock1230:"\u{1F567}",clock130:"\u{1F55C}",clock2:"\u{1F551}",clock230:"\u{1F55D}",clock3:"\u{1F552}",clock330:"\u{1F55E}",clock4:"\u{1F553}",clock430:"\u{1F55F}",clock5:"\u{1F554}",clock530:"\u{1F560}",clock6:"\u{1F555}",clock630:"\u{1F561}",clock7:"\u{1F556}",clock730:"\u{1F562}",clock8:"\u{1F557}",clock830:"\u{1F563}",clock9:"\u{1F558}",clock930:"\u{1F564}",closed_book:"\u{1F4D5}",closed_lock_with_key:"\u{1F510}",closed_umbrella:"\u{1F302}",cloud:"\u2601\uFE0F",cloud_with_lightning:"\u{1F329}",cloud_with_lightning_and_rain:"\u26C8",cloud_with_rain:"\u{1F327}",cloud_with_snow:"\u{1F328}",clown_face:"\u{1F921}",clubs:"\u2663\uFE0F",cocktail:"\u{1F378}",coffee:"\u2615\uFE0F",coffin:"\u26B0\uFE0F",cold_sweat:"\u{1F630}",comet:"\u2604\uFE0F",computer:"\u{1F4BB}",computer_mouse:"\u{1F5B1}",confetti_ball:"\u{1F38A}",confounded:"\u{1F616}",confused:"\u{1F615}",congratulations:"\u3297\uFE0F",construction:"\u{1F6A7}",construction_worker_man:"\u{1F477}",construction_worker_woman:"\u{1F477}&zwj;\u2640\uFE0F",control_knobs:"\u{1F39B}",convenience_store:"\u{1F3EA}",cookie:"\u{1F36A}",cool:"\u{1F192}",policeman:"\u{1F46E}",copyright:"\xA9\uFE0F",corn:"\u{1F33D}",couch_and_lamp:"\u{1F6CB}",couple:"\u{1F46B}",couple_with_heart_woman_man:"\u{1F491}",couple_with_heart_man_man:"\u{1F468}&zwj;\u2764\uFE0F&zwj;\u{1F468}",couple_with_heart_woman_woman:"\u{1F469}&zwj;\u2764\uFE0F&zwj;\u{1F469}",couplekiss_man_man:"\u{1F468}&zwj;\u2764\uFE0F&zwj;\u{1F48B}&zwj;\u{1F468}",couplekiss_man_woman:"\u{1F48F}",couplekiss_woman_woman:"\u{1F469}&zwj;\u2764\uFE0F&zwj;\u{1F48B}&zwj;\u{1F469}",cow:"\u{1F42E}",cow2:"\u{1F404}",cowboy_hat_face:"\u{1F920}",crab:"\u{1F980}",crayon:"\u{1F58D}",credit_card:"\u{1F4B3}",crescent_moon:"\u{1F319}",cricket:"\u{1F3CF}",crocodile:"\u{1F40A}",croissant:"\u{1F950}",crossed_fingers:"\u{1F91E}",crossed_flags:"\u{1F38C}",crossed_swords:"\u2694\uFE0F",crown:"\u{1F451}",cry:"\u{1F622}",crying_cat_face:"\u{1F63F}",crystal_ball:"\u{1F52E}",cucumber:"\u{1F952}",cupid:"\u{1F498}",curly_loop:"\u27B0",currency_exchange:"\u{1F4B1}",curry:"\u{1F35B}",custard:"\u{1F36E}",customs:"\u{1F6C3}",cyclone:"\u{1F300}",dagger:"\u{1F5E1}",dancer:"\u{1F483}",dancing_women:"\u{1F46F}",dancing_men:"\u{1F46F}&zwj;\u2642\uFE0F",dango:"\u{1F361}",dark_sunglasses:"\u{1F576}",dart:"\u{1F3AF}",dash:"\u{1F4A8}",date:"\u{1F4C5}",deciduous_tree:"\u{1F333}",deer:"\u{1F98C}",department_store:"\u{1F3EC}",derelict_house:"\u{1F3DA}",desert:"\u{1F3DC}",desert_island:"\u{1F3DD}",desktop_computer:"\u{1F5A5}",male_detective:"\u{1F575}\uFE0F",diamond_shape_with_a_dot_inside:"\u{1F4A0}",diamonds:"\u2666\uFE0F",disappointed:"\u{1F61E}",disappointed_relieved:"\u{1F625}",dizzy:"\u{1F4AB}",dizzy_face:"\u{1F635}",do_not_litter:"\u{1F6AF}",dog:"\u{1F436}",dog2:"\u{1F415}",dollar:"\u{1F4B5}",dolls:"\u{1F38E}",dolphin:"\u{1F42C}",door:"\u{1F6AA}",doughnut:"\u{1F369}",dove:"\u{1F54A}",dragon:"\u{1F409}",dragon_face:"\u{1F432}",dress:"\u{1F457}",dromedary_camel:"\u{1F42A}",drooling_face:"\u{1F924}",droplet:"\u{1F4A7}",drum:"\u{1F941}",duck:"\u{1F986}",dvd:"\u{1F4C0}","e-mail":"\u{1F4E7}",eagle:"\u{1F985}",ear:"\u{1F442}",ear_of_rice:"\u{1F33E}",earth_africa:"\u{1F30D}",earth_americas:"\u{1F30E}",earth_asia:"\u{1F30F}",egg:"\u{1F95A}",eggplant:"\u{1F346}",eight_pointed_black_star:"\u2734\uFE0F",eight_spoked_asterisk:"\u2733\uFE0F",electric_plug:"\u{1F50C}",elephant:"\u{1F418}",email:"\u2709\uFE0F",end:"\u{1F51A}",envelope_with_arrow:"\u{1F4E9}",euro:"\u{1F4B6}",european_castle:"\u{1F3F0}",european_post_office:"\u{1F3E4}",evergreen_tree:"\u{1F332}",exclamation:"\u2757\uFE0F",expressionless:"\u{1F611}",eye:"\u{1F441}",eye_speech_bubble:"\u{1F441}&zwj;\u{1F5E8}",eyeglasses:"\u{1F453}",eyes:"\u{1F440}",face_with_head_bandage:"\u{1F915}",face_with_thermometer:"\u{1F912}",fist_oncoming:"\u{1F44A}",factory:"\u{1F3ED}",fallen_leaf:"\u{1F342}",family_man_woman_boy:"\u{1F46A}",family_man_boy:"\u{1F468}&zwj;\u{1F466}",family_man_boy_boy:"\u{1F468}&zwj;\u{1F466}&zwj;\u{1F466}",family_man_girl:"\u{1F468}&zwj;\u{1F467}",family_man_girl_boy:"\u{1F468}&zwj;\u{1F467}&zwj;\u{1F466}",family_man_girl_girl:"\u{1F468}&zwj;\u{1F467}&zwj;\u{1F467}",family_man_man_boy:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F466}",family_man_man_boy_boy:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F466}&zwj;\u{1F466}",family_man_man_girl:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}",family_man_man_girl_boy:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}&zwj;\u{1F466}",family_man_man_girl_girl:"\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}&zwj;\u{1F467}",family_man_woman_boy_boy:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",family_man_woman_girl:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}",family_man_woman_girl_boy:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",family_man_woman_girl_girl:"\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",family_woman_boy:"\u{1F469}&zwj;\u{1F466}",family_woman_boy_boy:"\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",family_woman_girl:"\u{1F469}&zwj;\u{1F467}",family_woman_girl_boy:"\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",family_woman_girl_girl:"\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",family_woman_woman_boy:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F466}",family_woman_woman_boy_boy:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",family_woman_woman_girl:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}",family_woman_woman_girl_boy:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",family_woman_woman_girl_girl:"\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",fast_forward:"\u23E9",fax:"\u{1F4E0}",fearful:"\u{1F628}",feet:"\u{1F43E}",female_detective:"\u{1F575}\uFE0F&zwj;\u2640\uFE0F",ferris_wheel:"\u{1F3A1}",ferry:"\u26F4",field_hockey:"\u{1F3D1}",file_cabinet:"\u{1F5C4}",file_folder:"\u{1F4C1}",film_projector:"\u{1F4FD}",film_strip:"\u{1F39E}",fire:"\u{1F525}",fire_engine:"\u{1F692}",fireworks:"\u{1F386}",first_quarter_moon:"\u{1F313}",first_quarter_moon_with_face:"\u{1F31B}",fish:"\u{1F41F}",fish_cake:"\u{1F365}",fishing_pole_and_fish:"\u{1F3A3}",fist_raised:"\u270A",fist_left:"\u{1F91B}",fist_right:"\u{1F91C}",flags:"\u{1F38F}",flashlight:"\u{1F526}",fleur_de_lis:"\u269C\uFE0F",flight_arrival:"\u{1F6EC}",flight_departure:"\u{1F6EB}",floppy_disk:"\u{1F4BE}",flower_playing_cards:"\u{1F3B4}",flushed:"\u{1F633}",fog:"\u{1F32B}",foggy:"\u{1F301}",football:"\u{1F3C8}",footprints:"\u{1F463}",fork_and_knife:"\u{1F374}",fountain:"\u26F2\uFE0F",fountain_pen:"\u{1F58B}",four_leaf_clover:"\u{1F340}",fox_face:"\u{1F98A}",framed_picture:"\u{1F5BC}",free:"\u{1F193}",fried_egg:"\u{1F373}",fried_shrimp:"\u{1F364}",fries:"\u{1F35F}",frog:"\u{1F438}",frowning:"\u{1F626}",frowning_face:"\u2639\uFE0F",frowning_man:"\u{1F64D}&zwj;\u2642\uFE0F",frowning_woman:"\u{1F64D}",middle_finger:"\u{1F595}",fuelpump:"\u26FD\uFE0F",full_moon:"\u{1F315}",full_moon_with_face:"\u{1F31D}",funeral_urn:"\u26B1\uFE0F",game_die:"\u{1F3B2}",gear:"\u2699\uFE0F",gem:"\u{1F48E}",gemini:"\u264A\uFE0F",ghost:"\u{1F47B}",gift:"\u{1F381}",gift_heart:"\u{1F49D}",girl:"\u{1F467}",globe_with_meridians:"\u{1F310}",goal_net:"\u{1F945}",goat:"\u{1F410}",golf:"\u26F3\uFE0F",golfing_man:"\u{1F3CC}\uFE0F",golfing_woman:"\u{1F3CC}\uFE0F&zwj;\u2640\uFE0F",gorilla:"\u{1F98D}",grapes:"\u{1F347}",green_apple:"\u{1F34F}",green_book:"\u{1F4D7}",green_heart:"\u{1F49A}",green_salad:"\u{1F957}",grey_exclamation:"\u2755",grey_question:"\u2754",grimacing:"\u{1F62C}",grin:"\u{1F601}",grinning:"\u{1F600}",guardsman:"\u{1F482}",guardswoman:"\u{1F482}&zwj;\u2640\uFE0F",guitar:"\u{1F3B8}",gun:"\u{1F52B}",haircut_woman:"\u{1F487}",haircut_man:"\u{1F487}&zwj;\u2642\uFE0F",hamburger:"\u{1F354}",hammer:"\u{1F528}",hammer_and_pick:"\u2692",hammer_and_wrench:"\u{1F6E0}",hamster:"\u{1F439}",hand:"\u270B",handbag:"\u{1F45C}",handshake:"\u{1F91D}",hankey:"\u{1F4A9}",hatched_chick:"\u{1F425}",hatching_chick:"\u{1F423}",headphones:"\u{1F3A7}",hear_no_evil:"\u{1F649}",heart:"\u2764\uFE0F",heart_decoration:"\u{1F49F}",heart_eyes:"\u{1F60D}",heart_eyes_cat:"\u{1F63B}",heartbeat:"\u{1F493}",heartpulse:"\u{1F497}",hearts:"\u2665\uFE0F",heavy_check_mark:"\u2714\uFE0F",heavy_division_sign:"\u2797",heavy_dollar_sign:"\u{1F4B2}",heavy_heart_exclamation:"\u2763\uFE0F",heavy_minus_sign:"\u2796",heavy_multiplication_x:"\u2716\uFE0F",heavy_plus_sign:"\u2795",helicopter:"\u{1F681}",herb:"\u{1F33F}",hibiscus:"\u{1F33A}",high_brightness:"\u{1F506}",high_heel:"\u{1F460}",hocho:"\u{1F52A}",hole:"\u{1F573}",honey_pot:"\u{1F36F}",horse:"\u{1F434}",horse_racing:"\u{1F3C7}",hospital:"\u{1F3E5}",hot_pepper:"\u{1F336}",hotdog:"\u{1F32D}",hotel:"\u{1F3E8}",hotsprings:"\u2668\uFE0F",hourglass:"\u231B\uFE0F",hourglass_flowing_sand:"\u23F3",house:"\u{1F3E0}",house_with_garden:"\u{1F3E1}",houses:"\u{1F3D8}",hugs:"\u{1F917}",hushed:"\u{1F62F}",ice_cream:"\u{1F368}",ice_hockey:"\u{1F3D2}",ice_skate:"\u26F8",icecream:"\u{1F366}",id:"\u{1F194}",ideograph_advantage:"\u{1F250}",imp:"\u{1F47F}",inbox_tray:"\u{1F4E5}",incoming_envelope:"\u{1F4E8}",tipping_hand_woman:"\u{1F481}",information_source:"\u2139\uFE0F",innocent:"\u{1F607}",interrobang:"\u2049\uFE0F",iphone:"\u{1F4F1}",izakaya_lantern:"\u{1F3EE}",jack_o_lantern:"\u{1F383}",japan:"\u{1F5FE}",japanese_castle:"\u{1F3EF}",japanese_goblin:"\u{1F47A}",japanese_ogre:"\u{1F479}",jeans:"\u{1F456}",joy:"\u{1F602}",joy_cat:"\u{1F639}",joystick:"\u{1F579}",kaaba:"\u{1F54B}",key:"\u{1F511}",keyboard:"\u2328\uFE0F",keycap_ten:"\u{1F51F}",kick_scooter:"\u{1F6F4}",kimono:"\u{1F458}",kiss:"\u{1F48B}",kissing:"\u{1F617}",kissing_cat:"\u{1F63D}",kissing_closed_eyes:"\u{1F61A}",kissing_heart:"\u{1F618}",kissing_smiling_eyes:"\u{1F619}",kiwi_fruit:"\u{1F95D}",koala:"\u{1F428}",koko:"\u{1F201}",label:"\u{1F3F7}",large_blue_circle:"\u{1F535}",large_blue_diamond:"\u{1F537}",large_orange_diamond:"\u{1F536}",last_quarter_moon:"\u{1F317}",last_quarter_moon_with_face:"\u{1F31C}",latin_cross:"\u271D\uFE0F",laughing:"\u{1F606}",leaves:"\u{1F343}",ledger:"\u{1F4D2}",left_luggage:"\u{1F6C5}",left_right_arrow:"\u2194\uFE0F",leftwards_arrow_with_hook:"\u21A9\uFE0F",lemon:"\u{1F34B}",leo:"\u264C\uFE0F",leopard:"\u{1F406}",level_slider:"\u{1F39A}",libra:"\u264E\uFE0F",light_rail:"\u{1F688}",link:"\u{1F517}",lion:"\u{1F981}",lips:"\u{1F444}",lipstick:"\u{1F484}",lizard:"\u{1F98E}",lock:"\u{1F512}",lock_with_ink_pen:"\u{1F50F}",lollipop:"\u{1F36D}",loop:"\u27BF",loud_sound:"\u{1F50A}",loudspeaker:"\u{1F4E2}",love_hotel:"\u{1F3E9}",love_letter:"\u{1F48C}",low_brightness:"\u{1F505}",lying_face:"\u{1F925}",m:"\u24C2\uFE0F",mag:"\u{1F50D}",mag_right:"\u{1F50E}",mahjong:"\u{1F004}\uFE0F",mailbox:"\u{1F4EB}",mailbox_closed:"\u{1F4EA}",mailbox_with_mail:"\u{1F4EC}",mailbox_with_no_mail:"\u{1F4ED}",man:"\u{1F468}",man_artist:"\u{1F468}&zwj;\u{1F3A8}",man_astronaut:"\u{1F468}&zwj;\u{1F680}",man_cartwheeling:"\u{1F938}&zwj;\u2642\uFE0F",man_cook:"\u{1F468}&zwj;\u{1F373}",man_dancing:"\u{1F57A}",man_facepalming:"\u{1F926}&zwj;\u2642\uFE0F",man_factory_worker:"\u{1F468}&zwj;\u{1F3ED}",man_farmer:"\u{1F468}&zwj;\u{1F33E}",man_firefighter:"\u{1F468}&zwj;\u{1F692}",man_health_worker:"\u{1F468}&zwj;\u2695\uFE0F",man_in_tuxedo:"\u{1F935}",man_judge:"\u{1F468}&zwj;\u2696\uFE0F",man_juggling:"\u{1F939}&zwj;\u2642\uFE0F",man_mechanic:"\u{1F468}&zwj;\u{1F527}",man_office_worker:"\u{1F468}&zwj;\u{1F4BC}",man_pilot:"\u{1F468}&zwj;\u2708\uFE0F",man_playing_handball:"\u{1F93E}&zwj;\u2642\uFE0F",man_playing_water_polo:"\u{1F93D}&zwj;\u2642\uFE0F",man_scientist:"\u{1F468}&zwj;\u{1F52C}",man_shrugging:"\u{1F937}&zwj;\u2642\uFE0F",man_singer:"\u{1F468}&zwj;\u{1F3A4}",man_student:"\u{1F468}&zwj;\u{1F393}",man_teacher:"\u{1F468}&zwj;\u{1F3EB}",man_technologist:"\u{1F468}&zwj;\u{1F4BB}",man_with_gua_pi_mao:"\u{1F472}",man_with_turban:"\u{1F473}",tangerine:"\u{1F34A}",mans_shoe:"\u{1F45E}",mantelpiece_clock:"\u{1F570}",maple_leaf:"\u{1F341}",martial_arts_uniform:"\u{1F94B}",mask:"\u{1F637}",massage_woman:"\u{1F486}",massage_man:"\u{1F486}&zwj;\u2642\uFE0F",meat_on_bone:"\u{1F356}",medal_military:"\u{1F396}",medal_sports:"\u{1F3C5}",mega:"\u{1F4E3}",melon:"\u{1F348}",memo:"\u{1F4DD}",men_wrestling:"\u{1F93C}&zwj;\u2642\uFE0F",menorah:"\u{1F54E}",mens:"\u{1F6B9}",metal:"\u{1F918}",metro:"\u{1F687}",microphone:"\u{1F3A4}",microscope:"\u{1F52C}",milk_glass:"\u{1F95B}",milky_way:"\u{1F30C}",minibus:"\u{1F690}",minidisc:"\u{1F4BD}",mobile_phone_off:"\u{1F4F4}",money_mouth_face:"\u{1F911}",money_with_wings:"\u{1F4B8}",moneybag:"\u{1F4B0}",monkey:"\u{1F412}",monkey_face:"\u{1F435}",monorail:"\u{1F69D}",moon:"\u{1F314}",mortar_board:"\u{1F393}",mosque:"\u{1F54C}",motor_boat:"\u{1F6E5}",motor_scooter:"\u{1F6F5}",motorcycle:"\u{1F3CD}",motorway:"\u{1F6E3}",mount_fuji:"\u{1F5FB}",mountain:"\u26F0",mountain_biking_man:"\u{1F6B5}",mountain_biking_woman:"\u{1F6B5}&zwj;\u2640\uFE0F",mountain_cableway:"\u{1F6A0}",mountain_railway:"\u{1F69E}",mountain_snow:"\u{1F3D4}",mouse:"\u{1F42D}",mouse2:"\u{1F401}",movie_camera:"\u{1F3A5}",moyai:"\u{1F5FF}",mrs_claus:"\u{1F936}",muscle:"\u{1F4AA}",mushroom:"\u{1F344}",musical_keyboard:"\u{1F3B9}",musical_note:"\u{1F3B5}",musical_score:"\u{1F3BC}",mute:"\u{1F507}",nail_care:"\u{1F485}",name_badge:"\u{1F4DB}",national_park:"\u{1F3DE}",nauseated_face:"\u{1F922}",necktie:"\u{1F454}",negative_squared_cross_mark:"\u274E",nerd_face:"\u{1F913}",neutral_face:"\u{1F610}",new:"\u{1F195}",new_moon:"\u{1F311}",new_moon_with_face:"\u{1F31A}",newspaper:"\u{1F4F0}",newspaper_roll:"\u{1F5DE}",next_track_button:"\u23ED",ng:"\u{1F196}",no_good_man:"\u{1F645}&zwj;\u2642\uFE0F",no_good_woman:"\u{1F645}",night_with_stars:"\u{1F303}",no_bell:"\u{1F515}",no_bicycles:"\u{1F6B3}",no_entry:"\u26D4\uFE0F",no_entry_sign:"\u{1F6AB}",no_mobile_phones:"\u{1F4F5}",no_mouth:"\u{1F636}",no_pedestrians:"\u{1F6B7}",no_smoking:"\u{1F6AD}","non-potable_water":"\u{1F6B1}",nose:"\u{1F443}",notebook:"\u{1F4D3}",notebook_with_decorative_cover:"\u{1F4D4}",notes:"\u{1F3B6}",nut_and_bolt:"\u{1F529}",o:"\u2B55\uFE0F",o2:"\u{1F17E}\uFE0F",ocean:"\u{1F30A}",octopus:"\u{1F419}",oden:"\u{1F362}",office:"\u{1F3E2}",oil_drum:"\u{1F6E2}",ok:"\u{1F197}",ok_hand:"\u{1F44C}",ok_man:"\u{1F646}&zwj;\u2642\uFE0F",ok_woman:"\u{1F646}",old_key:"\u{1F5DD}",older_man:"\u{1F474}",older_woman:"\u{1F475}",om:"\u{1F549}",on:"\u{1F51B}",oncoming_automobile:"\u{1F698}",oncoming_bus:"\u{1F68D}",oncoming_police_car:"\u{1F694}",oncoming_taxi:"\u{1F696}",open_file_folder:"\u{1F4C2}",open_hands:"\u{1F450}",open_mouth:"\u{1F62E}",open_umbrella:"\u2602\uFE0F",ophiuchus:"\u26CE",orange_book:"\u{1F4D9}",orthodox_cross:"\u2626\uFE0F",outbox_tray:"\u{1F4E4}",owl:"\u{1F989}",ox:"\u{1F402}",package:"\u{1F4E6}",page_facing_up:"\u{1F4C4}",page_with_curl:"\u{1F4C3}",pager:"\u{1F4DF}",paintbrush:"\u{1F58C}",palm_tree:"\u{1F334}",pancakes:"\u{1F95E}",panda_face:"\u{1F43C}",paperclip:"\u{1F4CE}",paperclips:"\u{1F587}",parasol_on_ground:"\u26F1",parking:"\u{1F17F}\uFE0F",part_alternation_mark:"\u303D\uFE0F",partly_sunny:"\u26C5\uFE0F",passenger_ship:"\u{1F6F3}",passport_control:"\u{1F6C2}",pause_button:"\u23F8",peace_symbol:"\u262E\uFE0F",peach:"\u{1F351}",peanuts:"\u{1F95C}",pear:"\u{1F350}",pen:"\u{1F58A}",pencil2:"\u270F\uFE0F",penguin:"\u{1F427}",pensive:"\u{1F614}",performing_arts:"\u{1F3AD}",persevere:"\u{1F623}",person_fencing:"\u{1F93A}",pouting_woman:"\u{1F64E}",phone:"\u260E\uFE0F",pick:"\u26CF",pig:"\u{1F437}",pig2:"\u{1F416}",pig_nose:"\u{1F43D}",pill:"\u{1F48A}",pineapple:"\u{1F34D}",ping_pong:"\u{1F3D3}",pisces:"\u2653\uFE0F",pizza:"\u{1F355}",place_of_worship:"\u{1F6D0}",plate_with_cutlery:"\u{1F37D}",play_or_pause_button:"\u23EF",point_down:"\u{1F447}",point_left:"\u{1F448}",point_right:"\u{1F449}",point_up:"\u261D\uFE0F",point_up_2:"\u{1F446}",police_car:"\u{1F693}",policewoman:"\u{1F46E}&zwj;\u2640\uFE0F",poodle:"\u{1F429}",popcorn:"\u{1F37F}",post_office:"\u{1F3E3}",postal_horn:"\u{1F4EF}",postbox:"\u{1F4EE}",potable_water:"\u{1F6B0}",potato:"\u{1F954}",pouch:"\u{1F45D}",poultry_leg:"\u{1F357}",pound:"\u{1F4B7}",rage:"\u{1F621}",pouting_cat:"\u{1F63E}",pouting_man:"\u{1F64E}&zwj;\u2642\uFE0F",pray:"\u{1F64F}",prayer_beads:"\u{1F4FF}",pregnant_woman:"\u{1F930}",previous_track_button:"\u23EE",prince:"\u{1F934}",princess:"\u{1F478}",printer:"\u{1F5A8}",purple_heart:"\u{1F49C}",purse:"\u{1F45B}",pushpin:"\u{1F4CC}",put_litter_in_its_place:"\u{1F6AE}",question:"\u2753",rabbit:"\u{1F430}",rabbit2:"\u{1F407}",racehorse:"\u{1F40E}",racing_car:"\u{1F3CE}",radio:"\u{1F4FB}",radio_button:"\u{1F518}",radioactive:"\u2622\uFE0F",railway_car:"\u{1F683}",railway_track:"\u{1F6E4}",rainbow:"\u{1F308}",rainbow_flag:"\u{1F3F3}\uFE0F&zwj;\u{1F308}",raised_back_of_hand:"\u{1F91A}",raised_hand_with_fingers_splayed:"\u{1F590}",raised_hands:"\u{1F64C}",raising_hand_woman:"\u{1F64B}",raising_hand_man:"\u{1F64B}&zwj;\u2642\uFE0F",ram:"\u{1F40F}",ramen:"\u{1F35C}",rat:"\u{1F400}",record_button:"\u23FA",recycle:"\u267B\uFE0F",red_circle:"\u{1F534}",registered:"\xAE\uFE0F",relaxed:"\u263A\uFE0F",relieved:"\u{1F60C}",reminder_ribbon:"\u{1F397}",repeat:"\u{1F501}",repeat_one:"\u{1F502}",rescue_worker_helmet:"\u26D1",restroom:"\u{1F6BB}",revolving_hearts:"\u{1F49E}",rewind:"\u23EA",rhinoceros:"\u{1F98F}",ribbon:"\u{1F380}",rice:"\u{1F35A}",rice_ball:"\u{1F359}",rice_cracker:"\u{1F358}",rice_scene:"\u{1F391}",right_anger_bubble:"\u{1F5EF}",ring:"\u{1F48D}",robot:"\u{1F916}",rocket:"\u{1F680}",rofl:"\u{1F923}",roll_eyes:"\u{1F644}",roller_coaster:"\u{1F3A2}",rooster:"\u{1F413}",rose:"\u{1F339}",rosette:"\u{1F3F5}",rotating_light:"\u{1F6A8}",round_pushpin:"\u{1F4CD}",rowing_man:"\u{1F6A3}",rowing_woman:"\u{1F6A3}&zwj;\u2640\uFE0F",rugby_football:"\u{1F3C9}",running_man:"\u{1F3C3}",running_shirt_with_sash:"\u{1F3BD}",running_woman:"\u{1F3C3}&zwj;\u2640\uFE0F",sa:"\u{1F202}\uFE0F",sagittarius:"\u2650\uFE0F",sake:"\u{1F376}",sandal:"\u{1F461}",santa:"\u{1F385}",satellite:"\u{1F4E1}",saxophone:"\u{1F3B7}",school:"\u{1F3EB}",school_satchel:"\u{1F392}",scissors:"\u2702\uFE0F",scorpion:"\u{1F982}",scorpius:"\u264F\uFE0F",scream:"\u{1F631}",scream_cat:"\u{1F640}",scroll:"\u{1F4DC}",seat:"\u{1F4BA}",secret:"\u3299\uFE0F",see_no_evil:"\u{1F648}",seedling:"\u{1F331}",selfie:"\u{1F933}",shallow_pan_of_food:"\u{1F958}",shamrock:"\u2618\uFE0F",shark:"\u{1F988}",shaved_ice:"\u{1F367}",sheep:"\u{1F411}",shell:"\u{1F41A}",shield:"\u{1F6E1}",shinto_shrine:"\u26E9",ship:"\u{1F6A2}",shirt:"\u{1F455}",shopping:"\u{1F6CD}",shopping_cart:"\u{1F6D2}",shower:"\u{1F6BF}",shrimp:"\u{1F990}",signal_strength:"\u{1F4F6}",six_pointed_star:"\u{1F52F}",ski:"\u{1F3BF}",skier:"\u26F7",skull:"\u{1F480}",skull_and_crossbones:"\u2620\uFE0F",sleeping:"\u{1F634}",sleeping_bed:"\u{1F6CC}",sleepy:"\u{1F62A}",slightly_frowning_face:"\u{1F641}",slightly_smiling_face:"\u{1F642}",slot_machine:"\u{1F3B0}",small_airplane:"\u{1F6E9}",small_blue_diamond:"\u{1F539}",small_orange_diamond:"\u{1F538}",small_red_triangle:"\u{1F53A}",small_red_triangle_down:"\u{1F53B}",smile:"\u{1F604}",smile_cat:"\u{1F638}",smiley:"\u{1F603}",smiley_cat:"\u{1F63A}",smiling_imp:"\u{1F608}",smirk:"\u{1F60F}",smirk_cat:"\u{1F63C}",smoking:"\u{1F6AC}",snail:"\u{1F40C}",snake:"\u{1F40D}",sneezing_face:"\u{1F927}",snowboarder:"\u{1F3C2}",snowflake:"\u2744\uFE0F",snowman:"\u26C4\uFE0F",snowman_with_snow:"\u2603\uFE0F",sob:"\u{1F62D}",soccer:"\u26BD\uFE0F",soon:"\u{1F51C}",sos:"\u{1F198}",sound:"\u{1F509}",space_invader:"\u{1F47E}",spades:"\u2660\uFE0F",spaghetti:"\u{1F35D}",sparkle:"\u2747\uFE0F",sparkler:"\u{1F387}",sparkles:"\u2728",sparkling_heart:"\u{1F496}",speak_no_evil:"\u{1F64A}",speaker:"\u{1F508}",speaking_head:"\u{1F5E3}",speech_balloon:"\u{1F4AC}",speedboat:"\u{1F6A4}",spider:"\u{1F577}",spider_web:"\u{1F578}",spiral_calendar:"\u{1F5D3}",spiral_notepad:"\u{1F5D2}",spoon:"\u{1F944}",squid:"\u{1F991}",stadium:"\u{1F3DF}",star:"\u2B50\uFE0F",star2:"\u{1F31F}",star_and_crescent:"\u262A\uFE0F",star_of_david:"\u2721\uFE0F",stars:"\u{1F320}",station:"\u{1F689}",statue_of_liberty:"\u{1F5FD}",steam_locomotive:"\u{1F682}",stew:"\u{1F372}",stop_button:"\u23F9",stop_sign:"\u{1F6D1}",stopwatch:"\u23F1",straight_ruler:"\u{1F4CF}",strawberry:"\u{1F353}",stuck_out_tongue:"\u{1F61B}",stuck_out_tongue_closed_eyes:"\u{1F61D}",stuck_out_tongue_winking_eye:"\u{1F61C}",studio_microphone:"\u{1F399}",stuffed_flatbread:"\u{1F959}",sun_behind_large_cloud:"\u{1F325}",sun_behind_rain_cloud:"\u{1F326}",sun_behind_small_cloud:"\u{1F324}",sun_with_face:"\u{1F31E}",sunflower:"\u{1F33B}",sunglasses:"\u{1F60E}",sunny:"\u2600\uFE0F",sunrise:"\u{1F305}",sunrise_over_mountains:"\u{1F304}",surfing_man:"\u{1F3C4}",surfing_woman:"\u{1F3C4}&zwj;\u2640\uFE0F",sushi:"\u{1F363}",suspension_railway:"\u{1F69F}",sweat:"\u{1F613}",sweat_drops:"\u{1F4A6}",sweat_smile:"\u{1F605}",sweet_potato:"\u{1F360}",swimming_man:"\u{1F3CA}",swimming_woman:"\u{1F3CA}&zwj;\u2640\uFE0F",symbols:"\u{1F523}",synagogue:"\u{1F54D}",syringe:"\u{1F489}",taco:"\u{1F32E}",tada:"\u{1F389}",tanabata_tree:"\u{1F38B}",taurus:"\u2649\uFE0F",taxi:"\u{1F695}",tea:"\u{1F375}",telephone_receiver:"\u{1F4DE}",telescope:"\u{1F52D}",tennis:"\u{1F3BE}",tent:"\u26FA\uFE0F",thermometer:"\u{1F321}",thinking:"\u{1F914}",thought_balloon:"\u{1F4AD}",ticket:"\u{1F3AB}",tickets:"\u{1F39F}",tiger:"\u{1F42F}",tiger2:"\u{1F405}",timer_clock:"\u23F2",tipping_hand_man:"\u{1F481}&zwj;\u2642\uFE0F",tired_face:"\u{1F62B}",tm:"\u2122\uFE0F",toilet:"\u{1F6BD}",tokyo_tower:"\u{1F5FC}",tomato:"\u{1F345}",tongue:"\u{1F445}",top:"\u{1F51D}",tophat:"\u{1F3A9}",tornado:"\u{1F32A}",trackball:"\u{1F5B2}",tractor:"\u{1F69C}",traffic_light:"\u{1F6A5}",train:"\u{1F68B}",train2:"\u{1F686}",tram:"\u{1F68A}",triangular_flag_on_post:"\u{1F6A9}",triangular_ruler:"\u{1F4D0}",trident:"\u{1F531}",triumph:"\u{1F624}",trolleybus:"\u{1F68E}",trophy:"\u{1F3C6}",tropical_drink:"\u{1F379}",tropical_fish:"\u{1F420}",truck:"\u{1F69A}",trumpet:"\u{1F3BA}",tulip:"\u{1F337}",tumbler_glass:"\u{1F943}",turkey:"\u{1F983}",turtle:"\u{1F422}",tv:"\u{1F4FA}",twisted_rightwards_arrows:"\u{1F500}",two_hearts:"\u{1F495}",two_men_holding_hands:"\u{1F46C}",two_women_holding_hands:"\u{1F46D}",u5272:"\u{1F239}",u5408:"\u{1F234}",u55b6:"\u{1F23A}",u6307:"\u{1F22F}\uFE0F",u6708:"\u{1F237}\uFE0F",u6709:"\u{1F236}",u6e80:"\u{1F235}",u7121:"\u{1F21A}\uFE0F",u7533:"\u{1F238}",u7981:"\u{1F232}",u7a7a:"\u{1F233}",umbrella:"\u2614\uFE0F",unamused:"\u{1F612}",underage:"\u{1F51E}",unicorn:"\u{1F984}",unlock:"\u{1F513}",up:"\u{1F199}",upside_down_face:"\u{1F643}",v:"\u270C\uFE0F",vertical_traffic_light:"\u{1F6A6}",vhs:"\u{1F4FC}",vibration_mode:"\u{1F4F3}",video_camera:"\u{1F4F9}",video_game:"\u{1F3AE}",violin:"\u{1F3BB}",virgo:"\u264D\uFE0F",volcano:"\u{1F30B}",volleyball:"\u{1F3D0}",vs:"\u{1F19A}",vulcan_salute:"\u{1F596}",walking_man:"\u{1F6B6}",walking_woman:"\u{1F6B6}&zwj;\u2640\uFE0F",waning_crescent_moon:"\u{1F318}",waning_gibbous_moon:"\u{1F316}",warning:"\u26A0\uFE0F",wastebasket:"\u{1F5D1}",watch:"\u231A\uFE0F",water_buffalo:"\u{1F403}",watermelon:"\u{1F349}",wave:"\u{1F44B}",wavy_dash:"\u3030\uFE0F",waxing_crescent_moon:"\u{1F312}",wc:"\u{1F6BE}",weary:"\u{1F629}",wedding:"\u{1F492}",weight_lifting_man:"\u{1F3CB}\uFE0F",weight_lifting_woman:"\u{1F3CB}\uFE0F&zwj;\u2640\uFE0F",whale:"\u{1F433}",whale2:"\u{1F40B}",wheel_of_dharma:"\u2638\uFE0F",wheelchair:"\u267F\uFE0F",white_check_mark:"\u2705",white_circle:"\u26AA\uFE0F",white_flag:"\u{1F3F3}\uFE0F",white_flower:"\u{1F4AE}",white_large_square:"\u2B1C\uFE0F",white_medium_small_square:"\u25FD\uFE0F",white_medium_square:"\u25FB\uFE0F",white_small_square:"\u25AB\uFE0F",white_square_button:"\u{1F533}",wilted_flower:"\u{1F940}",wind_chime:"\u{1F390}",wind_face:"\u{1F32C}",wine_glass:"\u{1F377}",wink:"\u{1F609}",wolf:"\u{1F43A}",woman:"\u{1F469}",woman_artist:"\u{1F469}&zwj;\u{1F3A8}",woman_astronaut:"\u{1F469}&zwj;\u{1F680}",woman_cartwheeling:"\u{1F938}&zwj;\u2640\uFE0F",woman_cook:"\u{1F469}&zwj;\u{1F373}",woman_facepalming:"\u{1F926}&zwj;\u2640\uFE0F",woman_factory_worker:"\u{1F469}&zwj;\u{1F3ED}",woman_farmer:"\u{1F469}&zwj;\u{1F33E}",woman_firefighter:"\u{1F469}&zwj;\u{1F692}",woman_health_worker:"\u{1F469}&zwj;\u2695\uFE0F",woman_judge:"\u{1F469}&zwj;\u2696\uFE0F",woman_juggling:"\u{1F939}&zwj;\u2640\uFE0F",woman_mechanic:"\u{1F469}&zwj;\u{1F527}",woman_office_worker:"\u{1F469}&zwj;\u{1F4BC}",woman_pilot:"\u{1F469}&zwj;\u2708\uFE0F",woman_playing_handball:"\u{1F93E}&zwj;\u2640\uFE0F",woman_playing_water_polo:"\u{1F93D}&zwj;\u2640\uFE0F",woman_scientist:"\u{1F469}&zwj;\u{1F52C}",woman_shrugging:"\u{1F937}&zwj;\u2640\uFE0F",woman_singer:"\u{1F469}&zwj;\u{1F3A4}",woman_student:"\u{1F469}&zwj;\u{1F393}",woman_teacher:"\u{1F469}&zwj;\u{1F3EB}",woman_technologist:"\u{1F469}&zwj;\u{1F4BB}",woman_with_turban:"\u{1F473}&zwj;\u2640\uFE0F",womans_clothes:"\u{1F45A}",womans_hat:"\u{1F452}",women_wrestling:"\u{1F93C}&zwj;\u2640\uFE0F",womens:"\u{1F6BA}",world_map:"\u{1F5FA}",worried:"\u{1F61F}",wrench:"\u{1F527}",writing_hand:"\u270D\uFE0F",x:"\u274C",yellow_heart:"\u{1F49B}",yen:"\u{1F4B4}",yin_yang:"\u262F\uFE0F",yum:"\u{1F60B}",zap:"\u26A1\uFE0F",zipper_mouth_face:"\u{1F910}",zzz:"\u{1F4A4}",octocat:'<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',showdown:`<span style="font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>`},t.Converter=function(u){"use strict";var h={},d=[],p=[],b={},E=o,w={parsed:{},raw:"",format:""};_();function _(){u=u||{};for(var A in s)s.hasOwnProperty(A)&&(h[A]=s[A]);if(typeof u=="object")for(var N in u)u.hasOwnProperty(N)&&(h[N]=u[N]);else throw Error("Converter expects the passed parameter to be an object, but "+typeof u+" was passed instead.");h.extensions&&t.helper.forEach(h.extensions,R)}function R(A,N){if(N=N||null,t.helper.isString(A))if(A=t.helper.stdExtName(A),N=A,t.extensions[A]){console.warn("DEPRECATION WARNING: "+A+" is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!"),P(t.extensions[A],A);return}else if(!t.helper.isUndefined(n[A]))A=n[A];else throw Error('Extension "'+A+'" could not be loaded. It was either not found or is not a valid extension.');typeof A=="function"&&(A=A()),t.helper.isArray(A)||(A=[A]);var L=l(A,N);if(!L.valid)throw Error(L.error);for(var D=0;D<A.length;++D){switch(A[D].type){case"lang":d.push(A[D]);break;case"output":p.push(A[D]);break}if(A[D].hasOwnProperty("listeners"))for(var U in A[D].listeners)A[D].listeners.hasOwnProperty(U)&&O(U,A[D].listeners[U])}}function P(A,N){typeof A=="function"&&(A=A(new t.Converter)),t.helper.isArray(A)||(A=[A]);var L=l(A,N);if(!L.valid)throw Error(L.error);for(var D=0;D<A.length;++D)switch(A[D].type){case"lang":d.push(A[D]);break;case"output":p.push(A[D]);break;default:throw Error("Extension loader error: Type unrecognized!!!")}}function O(A,N){if(!t.helper.isString(A))throw Error("Invalid argument in converter.listen() method: name must be a string, but "+typeof A+" given");if(typeof N!="function")throw Error("Invalid argument in converter.listen() method: callback must be a function, but "+typeof N+" given");b.hasOwnProperty(A)||(b[A]=[]),b[A].push(N)}function M(A){var N=A.match(/^\s*/)[0].length,L=new RegExp("^\\s{0,"+N+"}","gm");return A.replace(L,"")}this._dispatch=function(N,L,D,U){if(b.hasOwnProperty(N))for(var F=0;F<b[N].length;++F){var z=b[N][F](N,L,this,D,U);z&&typeof z<"u"&&(L=z)}return L},this.listen=function(A,N){return O(A,N),this},this.makeHtml=function(A){if(!A)return A;var N={gHtmlBlocks:[],gHtmlMdBlocks:[],gHtmlSpans:[],gUrls:{},gTitles:{},gDimensions:{},gListLevel:0,hashLinkCounts:{},langExtensions:d,outputModifiers:p,converter:this,ghCodeBlocks:[],metadata:{parsed:{},raw:"",format:""}};return A=A.replace(/¨/g,"\xA8T"),A=A.replace(/\$/g,"\xA8D"),A=A.replace(/\r\n/g,`
`),A=A.replace(/\r/g,`
`),A=A.replace(/\u00A0/g,"&nbsp;"),h.smartIndentationFix&&(A=M(A)),A=`

`+A+`

`,A=t.subParser("detab")(A,h,N),A=A.replace(/^[ \t]+$/mg,""),t.helper.forEach(d,function(L){A=t.subParser("runExtension")(L,A,h,N)}),A=t.subParser("metadata")(A,h,N),A=t.subParser("hashPreCodeTags")(A,h,N),A=t.subParser("githubCodeBlocks")(A,h,N),A=t.subParser("hashHTMLBlocks")(A,h,N),A=t.subParser("hashCodeTags")(A,h,N),A=t.subParser("stripLinkDefinitions")(A,h,N),A=t.subParser("blockGamut")(A,h,N),A=t.subParser("unhashHTMLSpans")(A,h,N),A=t.subParser("unescapeSpecialChars")(A,h,N),A=A.replace(/¨D/g,"$$"),A=A.replace(/¨T/g,"\xA8"),A=t.subParser("completeHTMLDocument")(A,h,N),t.helper.forEach(p,function(L){A=t.subParser("runExtension")(L,A,h,N)}),w=N.metadata,A},this.makeMarkdown=this.makeMd=function(A,N){if(A=A.replace(/\r\n/g,`
`),A=A.replace(/\r/g,`
`),A=A.replace(/>[ \t]+</,">\xA8NBSP;<"),!N)if(window&&window.document)N=window.document;else throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");var L=N.createElement("div");L.innerHTML=A;var D={preList:ve(L)};ae(L);for(var U=L.childNodes,F="",z=0;z<U.length;z++)F+=t.subParser("makeMarkdown.node")(U[z],D);function ae(se){for(var Ee=0;Ee<se.childNodes.length;++Ee){var le=se.childNodes[Ee];le.nodeType===3?!/\S/.test(le.nodeValue)&&!/^[ ]+$/.test(le.nodeValue)?(se.removeChild(le),--Ee):(le.nodeValue=le.nodeValue.split(`
`).join(" "),le.nodeValue=le.nodeValue.replace(/(\s)+/g,"$1")):le.nodeType===1&&ae(le)}}function ve(se){for(var Ee=se.querySelectorAll("pre"),le=[],Re=0;Re<Ee.length;++Re)if(Ee[Re].childElementCount===1&&Ee[Re].firstChild.tagName.toLowerCase()==="code"){var xt=Ee[Re].firstChild.innerHTML.trim(),oi=Ee[Re].firstChild.getAttribute("data-language")||"";if(oi==="")for(var Xn=Ee[Re].firstChild.className.split(" "),iu=0;iu<Xn.length;++iu){var Eh=Xn[iu].match(/^language-(.+)$/);if(Eh!==null){oi=Eh[1];break}}xt=t.helper.unescapeHTMLEntities(xt),le.push(xt),Ee[Re].outerHTML='<precode language="'+oi+'" precodenum="'+Re.toString()+'"></precode>'}else le.push(Ee[Re].innerHTML),Ee[Re].innerHTML="",Ee[Re].setAttribute("prenum",Re.toString());return le}return F},this.setOption=function(A,N){h[A]=N},this.getOption=function(A){return h[A]},this.getOptions=function(){return h},this.addExtension=function(A,N){N=N||null,R(A,N)},this.useExtension=function(A){R(A)},this.setFlavor=function(A){if(!a.hasOwnProperty(A))throw Error(A+" flavor was not found");var N=a[A];E=A;for(var L in N)N.hasOwnProperty(L)&&(h[L]=N[L])},this.getFlavor=function(){return E},this.removeExtension=function(A){t.helper.isArray(A)||(A=[A]);for(var N=0;N<A.length;++N){for(var L=A[N],D=0;D<d.length;++D)d[D]===L&&d.splice(D,1);for(var U=0;U<p.length;++U)p[U]===L&&p.splice(U,1)}},this.getAllExtensions=function(){return{language:d,output:p}},this.getMetadata=function(A){return A?w.raw:w.parsed},this.getMetadataFormat=function(){return w.format},this._setMetadataPair=function(A,N){w.parsed[A]=N},this._setMetadataFormat=function(A){w.format=A},this._setMetadataRaw=function(A){w.raw=A}},t.subParser("anchors",function(u,h,d){"use strict";u=d.converter._dispatch("anchors.before",u,h,d);var p=function(b,E,w,_,R,P,O){if(t.helper.isUndefined(O)&&(O=""),w=w.toLowerCase(),b.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)_="";else if(!_)if(w||(w=E.toLowerCase().replace(/ ?\n/g," ")),_="#"+w,!t.helper.isUndefined(d.gUrls[w]))_=d.gUrls[w],t.helper.isUndefined(d.gTitles[w])||(O=d.gTitles[w]);else return b;_=_.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var M='<a href="'+_+'"';return O!==""&&O!==null&&(O=O.replace(/"/g,"&quot;"),O=O.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),M+=' title="'+O+'"'),h.openLinksInNewWindow&&!/^#/.test(_)&&(M+=' rel="noopener noreferrer" target="\xA8E95Eblank"'),M+=">"+E+"</a>",M};return u=u.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g,p),u=u.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,p),u=u.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,p),u=u.replace(/\[([^\[\]]+)]()()()()()/g,p),h.ghMentions&&(u=u.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gmi,function(b,E,w,_,R){if(w==="\\")return E+_;if(!t.helper.isString(h.ghMentionsLink))throw new Error("ghMentionsLink option must be a string");var P=h.ghMentionsLink.replace(/\{u}/g,R),O="";return h.openLinksInNewWindow&&(O=' rel="noopener noreferrer" target="\xA8E95Eblank"'),E+'<a href="'+P+'"'+O+">"+_+"</a>"})),u=d.converter._dispatch("anchors.after",u,h,d),u});var m=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,y=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,v=/()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,g=/(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gmi,x=/<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,S=function(u){"use strict";return function(h,d,p,b,E,w,_){p=p.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var R=p,P="",O="",M=d||"",A=_||"";return/^www\./i.test(p)&&(p=p.replace(/^www\./i,"http://www.")),u.excludeTrailingPunctuationFromURLs&&w&&(P=w),u.openLinksInNewWindow&&(O=' rel="noopener noreferrer" target="\xA8E95Eblank"'),M+'<a href="'+p+'"'+O+">"+R+"</a>"+P+A}},T=function(u,h){"use strict";return function(d,p,b){var E="mailto:";return p=p||"",b=t.subParser("unescapeSpecialChars")(b,u,h),u.encodeEmails?(E=t.helper.encodeEmailAddress(E+b),b=t.helper.encodeEmailAddress(b)):E=E+b,p+'<a href="'+E+'">'+b+"</a>"}};t.subParser("autoLinks",function(u,h,d){"use strict";return u=d.converter._dispatch("autoLinks.before",u,h,d),u=u.replace(v,S(h)),u=u.replace(x,T(h,d)),u=d.converter._dispatch("autoLinks.after",u,h,d),u}),t.subParser("simplifiedAutoLinks",function(u,h,d){"use strict";return h.simplifiedAutoLink&&(u=d.converter._dispatch("simplifiedAutoLinks.before",u,h,d),h.excludeTrailingPunctuationFromURLs?u=u.replace(y,S(h)):u=u.replace(m,S(h)),u=u.replace(g,T(h,d)),u=d.converter._dispatch("simplifiedAutoLinks.after",u,h,d)),u}),t.subParser("blockGamut",function(u,h,d){"use strict";return u=d.converter._dispatch("blockGamut.before",u,h,d),u=t.subParser("blockQuotes")(u,h,d),u=t.subParser("headers")(u,h,d),u=t.subParser("horizontalRule")(u,h,d),u=t.subParser("lists")(u,h,d),u=t.subParser("codeBlocks")(u,h,d),u=t.subParser("tables")(u,h,d),u=t.subParser("hashHTMLBlocks")(u,h,d),u=t.subParser("paragraphs")(u,h,d),u=d.converter._dispatch("blockGamut.after",u,h,d),u}),t.subParser("blockQuotes",function(u,h,d){"use strict";u=d.converter._dispatch("blockQuotes.before",u,h,d),u=u+`

`;var p=/(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;return h.splitAdjacentBlockquotes&&(p=/^ {0,3}>[\s\S]*?(?:\n\n)/gm),u=u.replace(p,function(b){return b=b.replace(/^[ \t]*>[ \t]?/gm,""),b=b.replace(/¨0/g,""),b=b.replace(/^[ \t]+$/gm,""),b=t.subParser("githubCodeBlocks")(b,h,d),b=t.subParser("blockGamut")(b,h,d),b=b.replace(/(^|\n)/g,"$1  "),b=b.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm,function(E,w){var _=w;return _=_.replace(/^  /mg,"\xA80"),_=_.replace(/¨0/g,""),_}),t.subParser("hashBlock")(`<blockquote>
`+b+`
</blockquote>`,h,d)}),u=d.converter._dispatch("blockQuotes.after",u,h,d),u}),t.subParser("codeBlocks",function(u,h,d){"use strict";u=d.converter._dispatch("codeBlocks.before",u,h,d),u+="\xA80";var p=/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g;return u=u.replace(p,function(b,E,w){var _=E,R=w,P=`
`;return _=t.subParser("outdent")(_,h,d),_=t.subParser("encodeCode")(_,h,d),_=t.subParser("detab")(_,h,d),_=_.replace(/^\n+/g,""),_=_.replace(/\n+$/g,""),h.omitExtraWLInCodeBlocks&&(P=""),_="<pre><code>"+_+P+"</code></pre>",t.subParser("hashBlock")(_,h,d)+R}),u=u.replace(/¨0/,""),u=d.converter._dispatch("codeBlocks.after",u,h,d),u}),t.subParser("codeSpans",function(u,h,d){"use strict";return u=d.converter._dispatch("codeSpans.before",u,h,d),typeof u>"u"&&(u=""),u=u.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,function(p,b,E,w){var _=w;return _=_.replace(/^([ \t]*)/g,""),_=_.replace(/[ \t]*$/g,""),_=t.subParser("encodeCode")(_,h,d),_=b+"<code>"+_+"</code>",_=t.subParser("hashHTMLSpans")(_,h,d),_}),u=d.converter._dispatch("codeSpans.after",u,h,d),u}),t.subParser("completeHTMLDocument",function(u,h,d){"use strict";if(!h.completeHTMLDocument)return u;u=d.converter._dispatch("completeHTMLDocument.before",u,h,d);var p="html",b=`<!DOCTYPE HTML>
`,E="",w=`<meta charset="utf-8">
`,_="",R="";typeof d.metadata.parsed.doctype<"u"&&(b="<!DOCTYPE "+d.metadata.parsed.doctype+`>
`,p=d.metadata.parsed.doctype.toString().toLowerCase(),(p==="html"||p==="html5")&&(w='<meta charset="utf-8">'));for(var P in d.metadata.parsed)if(d.metadata.parsed.hasOwnProperty(P))switch(P.toLowerCase()){case"doctype":break;case"title":E="<title>"+d.metadata.parsed.title+`</title>
`;break;case"charset":p==="html"||p==="html5"?w='<meta charset="'+d.metadata.parsed.charset+`">
`:w='<meta name="charset" content="'+d.metadata.parsed.charset+`">
`;break;case"language":case"lang":_=' lang="'+d.metadata.parsed[P]+'"',R+='<meta name="'+P+'" content="'+d.metadata.parsed[P]+`">
`;break;default:R+='<meta name="'+P+'" content="'+d.metadata.parsed[P]+`">
`}return u=b+"<html"+_+`>
<head>
`+E+w+R+`</head>
<body>
`+u.trim()+`
</body>
</html>`,u=d.converter._dispatch("completeHTMLDocument.after",u,h,d),u}),t.subParser("detab",function(u,h,d){"use strict";return u=d.converter._dispatch("detab.before",u,h,d),u=u.replace(/\t(?=\t)/g,"    "),u=u.replace(/\t/g,"\xA8A\xA8B"),u=u.replace(/¨B(.+?)¨A/g,function(p,b){for(var E=b,w=4-E.length%4,_=0;_<w;_++)E+=" ";return E}),u=u.replace(/¨A/g,"    "),u=u.replace(/¨B/g,""),u=d.converter._dispatch("detab.after",u,h,d),u}),t.subParser("ellipsis",function(u,h,d){"use strict";return h.ellipsis&&(u=d.converter._dispatch("ellipsis.before",u,h,d),u=u.replace(/\.\.\./g,"\u2026"),u=d.converter._dispatch("ellipsis.after",u,h,d)),u}),t.subParser("emoji",function(u,h,d){"use strict";if(!h.emoji)return u;u=d.converter._dispatch("emoji.before",u,h,d);var p=/:([\S]+?):/g;return u=u.replace(p,function(b,E){return t.helper.emojis.hasOwnProperty(E)?t.helper.emojis[E]:b}),u=d.converter._dispatch("emoji.after",u,h,d),u}),t.subParser("encodeAmpsAndAngles",function(u,h,d){"use strict";return u=d.converter._dispatch("encodeAmpsAndAngles.before",u,h,d),u=u.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,"&amp;"),u=u.replace(/<(?![a-z\/?$!])/gi,"&lt;"),u=u.replace(/</g,"&lt;"),u=u.replace(/>/g,"&gt;"),u=d.converter._dispatch("encodeAmpsAndAngles.after",u,h,d),u}),t.subParser("encodeBackslashEscapes",function(u,h,d){"use strict";return u=d.converter._dispatch("encodeBackslashEscapes.before",u,h,d),u=u.replace(/\\(\\)/g,t.helper.escapeCharactersCallback),u=u.replace(/\\([`*_{}\[\]()>#+.!~=|:-])/g,t.helper.escapeCharactersCallback),u=d.converter._dispatch("encodeBackslashEscapes.after",u,h,d),u}),t.subParser("encodeCode",function(u,h,d){"use strict";return u=d.converter._dispatch("encodeCode.before",u,h,d),u=u.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/([*_{}\[\]\\=~-])/g,t.helper.escapeCharactersCallback),u=d.converter._dispatch("encodeCode.after",u,h,d),u}),t.subParser("escapeSpecialCharsWithinTagAttributes",function(u,h,d){"use strict";u=d.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before",u,h,d);var p=/<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,b=/<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;return u=u.replace(p,function(E){return E.replace(/(.)<\/?code>(?=.)/g,"$1`").replace(/([\\`*_~=|])/g,t.helper.escapeCharactersCallback)}),u=u.replace(b,function(E){return E.replace(/([\\`*_~=|])/g,t.helper.escapeCharactersCallback)}),u=d.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after",u,h,d),u}),t.subParser("githubCodeBlocks",function(u,h,d){"use strict";return h.ghCodeBlocks?(u=d.converter._dispatch("githubCodeBlocks.before",u,h,d),u+="\xA80",u=u.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g,function(p,b,E,w){var _=h.omitExtraWLInCodeBlocks?"":`
`;return w=t.subParser("encodeCode")(w,h,d),w=t.subParser("detab")(w,h,d),w=w.replace(/^\n+/g,""),w=w.replace(/\n+$/g,""),w="<pre><code"+(E?' class="'+E+" language-"+E+'"':"")+">"+w+_+"</code></pre>",w=t.subParser("hashBlock")(w,h,d),`

\xA8G`+(d.ghCodeBlocks.push({text:p,codeblock:w})-1)+`G

`}),u=u.replace(/¨0/,""),d.converter._dispatch("githubCodeBlocks.after",u,h,d)):u}),t.subParser("hashBlock",function(u,h,d){"use strict";return u=d.converter._dispatch("hashBlock.before",u,h,d),u=u.replace(/(^\n+|\n+$)/g,""),u=`

\xA8K`+(d.gHtmlBlocks.push(u)-1)+`K

`,u=d.converter._dispatch("hashBlock.after",u,h,d),u}),t.subParser("hashCodeTags",function(u,h,d){"use strict";u=d.converter._dispatch("hashCodeTags.before",u,h,d);var p=function(b,E,w,_){var R=w+t.subParser("encodeCode")(E,h,d)+_;return"\xA8C"+(d.gHtmlSpans.push(R)-1)+"C"};return u=t.helper.replaceRecursiveRegExp(u,p,"<code\\b[^>]*>","</code>","gim"),u=d.converter._dispatch("hashCodeTags.after",u,h,d),u}),t.subParser("hashElement",function(u,h,d){"use strict";return function(p,b){var E=b;return E=E.replace(/\n\n/g,`
`),E=E.replace(/^\n/,""),E=E.replace(/\n+$/g,""),E=`

\xA8K`+(d.gHtmlBlocks.push(E)-1)+`K

`,E}}),t.subParser("hashHTMLBlocks",function(u,h,d){"use strict";u=d.converter._dispatch("hashHTMLBlocks.before",u,h,d);var p=["pre","div","h1","h2","h3","h4","h5","h6","blockquote","table","dl","ol","ul","script","noscript","form","fieldset","iframe","math","style","section","header","footer","nav","article","aside","address","audio","canvas","figure","hgroup","output","video","p"],b=function(A,N,L,D){var U=A;return L.search(/\bmarkdown\b/)!==-1&&(U=L+d.converter.makeHtml(N)+D),`

\xA8K`+(d.gHtmlBlocks.push(U)-1)+`K

`};h.backslashEscapesHTMLTags&&(u=u.replace(/\\<(\/?[^>]+?)>/g,function(A,N){return"&lt;"+N+"&gt;"}));for(var E=0;E<p.length;++E)for(var w,_=new RegExp("^ {0,3}(<"+p[E]+"\\b[^>]*>)","im"),R="<"+p[E]+"\\b[^>]*>",P="</"+p[E]+">";(w=t.helper.regexIndexOf(u,_))!==-1;){var O=t.helper.splitAtIndex(u,w),M=t.helper.replaceRecursiveRegExp(O[1],b,R,P,"im");if(M===O[1])break;u=O[0].concat(M)}return u=u.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,t.subParser("hashElement")(u,h,d)),u=t.helper.replaceRecursiveRegExp(u,function(A){return`

\xA8K`+(d.gHtmlBlocks.push(A)-1)+`K

`},"^ {0,3}<!--","-->","gm"),u=u.replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,t.subParser("hashElement")(u,h,d)),u=d.converter._dispatch("hashHTMLBlocks.after",u,h,d),u}),t.subParser("hashHTMLSpans",function(u,h,d){"use strict";u=d.converter._dispatch("hashHTMLSpans.before",u,h,d);function p(b){return"\xA8C"+(d.gHtmlSpans.push(b)-1)+"C"}return u=u.replace(/<[^>]+?\/>/gi,function(b){return p(b)}),u=u.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g,function(b){return p(b)}),u=u.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g,function(b){return p(b)}),u=u.replace(/<[^>]+?>/gi,function(b){return p(b)}),u=d.converter._dispatch("hashHTMLSpans.after",u,h,d),u}),t.subParser("unhashHTMLSpans",function(u,h,d){"use strict";u=d.converter._dispatch("unhashHTMLSpans.before",u,h,d);for(var p=0;p<d.gHtmlSpans.length;++p){for(var b=d.gHtmlSpans[p],E=0;/¨C(\d+)C/.test(b);){var w=RegExp.$1;if(b=b.replace("\xA8C"+w+"C",d.gHtmlSpans[w]),E===10){console.error("maximum nesting of 10 spans reached!!!");break}++E}u=u.replace("\xA8C"+p+"C",b)}return u=d.converter._dispatch("unhashHTMLSpans.after",u,h,d),u}),t.subParser("hashPreCodeTags",function(u,h,d){"use strict";u=d.converter._dispatch("hashPreCodeTags.before",u,h,d);var p=function(b,E,w,_){var R=w+t.subParser("encodeCode")(E,h,d)+_;return`

\xA8G`+(d.ghCodeBlocks.push({text:b,codeblock:R})-1)+`G

`};return u=t.helper.replaceRecursiveRegExp(u,p,"^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>","^ {0,3}</code>\\s*</pre>","gim"),u=d.converter._dispatch("hashPreCodeTags.after",u,h,d),u}),t.subParser("headers",function(u,h,d){"use strict";u=d.converter._dispatch("headers.before",u,h,d);var p=isNaN(parseInt(h.headerLevelStart))?1:parseInt(h.headerLevelStart),b=h.smoothLivePreview?/^(.+)[ \t]*\n={2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n=+[ \t]*\n+/gm,E=h.smoothLivePreview?/^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n-+[ \t]*\n+/gm;u=u.replace(b,function(R,P){var O=t.subParser("spanGamut")(P,h,d),M=h.noHeaderId?"":' id="'+_(P)+'"',A=p,N="<h"+A+M+">"+O+"</h"+A+">";return t.subParser("hashBlock")(N,h,d)}),u=u.replace(E,function(R,P){var O=t.subParser("spanGamut")(P,h,d),M=h.noHeaderId?"":' id="'+_(P)+'"',A=p+1,N="<h"+A+M+">"+O+"</h"+A+">";return t.subParser("hashBlock")(N,h,d)});var w=h.requireSpaceBeforeHeadingText?/^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm:/^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;u=u.replace(w,function(R,P,O){var M=O;h.customizedHeaderId&&(M=O.replace(/\s?\{([^{]+?)}\s*$/,""));var A=t.subParser("spanGamut")(M,h,d),N=h.noHeaderId?"":' id="'+_(O)+'"',L=p-1+P.length,D="<h"+L+N+">"+A+"</h"+L+">";return t.subParser("hashBlock")(D,h,d)});function _(R){var P,O;if(h.customizedHeaderId){var M=R.match(/\{([^{]+?)}\s*$/);M&&M[1]&&(R=M[1])}return P=R,t.helper.isString(h.prefixHeaderId)?O=h.prefixHeaderId:h.prefixHeaderId===!0?O="section-":O="",h.rawPrefixHeaderId||(P=O+P),h.ghCompatibleHeaderId?P=P.replace(/ /g,"-").replace(/&amp;/g,"").replace(/¨T/g,"").replace(/¨D/g,"").replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g,"").toLowerCase():h.rawHeaderId?P=P.replace(/ /g,"-").replace(/&amp;/g,"&").replace(/¨T/g,"\xA8").replace(/¨D/g,"$").replace(/["']/g,"-").toLowerCase():P=P.replace(/[^\w]/g,"").toLowerCase(),h.rawPrefixHeaderId&&(P=O+P),d.hashLinkCounts[P]?P=P+"-"+d.hashLinkCounts[P]++:d.hashLinkCounts[P]=1,P}return u=d.converter._dispatch("headers.after",u,h,d),u}),t.subParser("horizontalRule",function(u,h,d){"use strict";u=d.converter._dispatch("horizontalRule.before",u,h,d);var p=t.subParser("hashBlock")("<hr />",h,d);return u=u.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm,p),u=u.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm,p),u=u.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm,p),u=d.converter._dispatch("horizontalRule.after",u,h,d),u}),t.subParser("images",function(u,h,d){"use strict";u=d.converter._dispatch("images.before",u,h,d);var p=/!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,b=/!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,E=/!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,w=/!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,_=/!\[([^\[\]]+)]()()()()()/g;function R(O,M,A,N,L,D,U,F){return N=N.replace(/\s/g,""),P(O,M,A,N,L,D,U,F)}function P(O,M,A,N,L,D,U,F){var z=d.gUrls,ae=d.gTitles,ve=d.gDimensions;if(A=A.toLowerCase(),F||(F=""),O.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)N="";else if(N===""||N===null)if((A===""||A===null)&&(A=M.toLowerCase().replace(/ ?\n/g," ")),N="#"+A,!t.helper.isUndefined(z[A]))N=z[A],t.helper.isUndefined(ae[A])||(F=ae[A]),t.helper.isUndefined(ve[A])||(L=ve[A].width,D=ve[A].height);else return O;M=M.replace(/"/g,"&quot;").replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),N=N.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var se='<img src="'+N+'" alt="'+M+'"';return F&&t.helper.isString(F)&&(F=F.replace(/"/g,"&quot;").replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),se+=' title="'+F+'"'),L&&D&&(L=L==="*"?"auto":L,D=D==="*"?"auto":D,se+=' width="'+L+'"',se+=' height="'+D+'"'),se+=" />",se}return u=u.replace(w,P),u=u.replace(E,R),u=u.replace(b,P),u=u.replace(p,P),u=u.replace(_,P),u=d.converter._dispatch("images.after",u,h,d),u}),t.subParser("italicsAndBold",function(u,h,d){"use strict";u=d.converter._dispatch("italicsAndBold.before",u,h,d);function p(b,E,w){return E+b+w}return h.literalMidWordUnderscores?(u=u.replace(/\b___(\S[\s\S]*?)___\b/g,function(b,E){return p(E,"<strong><em>","</em></strong>")}),u=u.replace(/\b__(\S[\s\S]*?)__\b/g,function(b,E){return p(E,"<strong>","</strong>")}),u=u.replace(/\b_(\S[\s\S]*?)_\b/g,function(b,E){return p(E,"<em>","</em>")})):(u=u.replace(/___(\S[\s\S]*?)___/g,function(b,E){return/\S$/.test(E)?p(E,"<strong><em>","</em></strong>"):b}),u=u.replace(/__(\S[\s\S]*?)__/g,function(b,E){return/\S$/.test(E)?p(E,"<strong>","</strong>"):b}),u=u.replace(/_([^\s_][\s\S]*?)_/g,function(b,E){return/\S$/.test(E)?p(E,"<em>","</em>"):b})),h.literalMidWordAsterisks?(u=u.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g,function(b,E,w){return p(w,E+"<strong><em>","</em></strong>")}),u=u.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g,function(b,E,w){return p(w,E+"<strong>","</strong>")}),u=u.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g,function(b,E,w){return p(w,E+"<em>","</em>")})):(u=u.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g,function(b,E){return/\S$/.test(E)?p(E,"<strong><em>","</em></strong>"):b}),u=u.replace(/\*\*(\S[\s\S]*?)\*\*/g,function(b,E){return/\S$/.test(E)?p(E,"<strong>","</strong>"):b}),u=u.replace(/\*([^\s*][\s\S]*?)\*/g,function(b,E){return/\S$/.test(E)?p(E,"<em>","</em>"):b})),u=d.converter._dispatch("italicsAndBold.after",u,h,d),u}),t.subParser("lists",function(u,h,d){"use strict";function p(w,_){d.gListLevel++,w=w.replace(/\n{2,}$/,`
`),w+="\xA80";var R=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,P=/\n[ \t]*\n(?!¨0)/.test(w);return h.disableForced4SpacesIndentedSublists&&(R=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm),w=w.replace(R,function(O,M,A,N,L,D,U){U=U&&U.trim()!=="";var F=t.subParser("outdent")(L,h,d),z="";return D&&h.tasklists&&(z=' class="task-list-item" style="list-style-type: none;"',F=F.replace(/^[ \t]*\[(x|X| )?]/m,function(){var ae='<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';return U&&(ae+=" checked"),ae+=">",ae})),F=F.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g,function(ae){return"\xA8A"+ae}),M||F.search(/\n{2,}/)>-1?(F=t.subParser("githubCodeBlocks")(F,h,d),F=t.subParser("blockGamut")(F,h,d)):(F=t.subParser("lists")(F,h,d),F=F.replace(/\n$/,""),F=t.subParser("hashHTMLBlocks")(F,h,d),F=F.replace(/\n\n+/g,`

`),P?F=t.subParser("paragraphs")(F,h,d):F=t.subParser("spanGamut")(F,h,d)),F=F.replace("\xA8A",""),F="<li"+z+">"+F+`</li>
`,F}),w=w.replace(/¨0/g,""),d.gListLevel--,_&&(w=w.replace(/\s+$/,"")),w}function b(w,_){if(_==="ol"){var R=w.match(/^ *(\d+)\./);if(R&&R[1]!=="1")return' start="'+R[1]+'"'}return""}function E(w,_,R){var P=h.disableForced4SpacesIndentedSublists?/^ ?\d+\.[ \t]/gm:/^ {0,3}\d+\.[ \t]/gm,O=h.disableForced4SpacesIndentedSublists?/^ ?[*+-][ \t]/gm:/^ {0,3}[*+-][ \t]/gm,M=_==="ul"?P:O,A="";if(w.search(M)!==-1)(function L(D){var U=D.search(M),F=b(w,_);U!==-1?(A+=`

<`+_+F+`>
`+p(D.slice(0,U),!!R)+"</"+_+`>
`,_=_==="ul"?"ol":"ul",M=_==="ul"?P:O,L(D.slice(U))):A+=`

<`+_+F+`>
`+p(D,!!R)+"</"+_+`>
`})(w);else{var N=b(w,_);A=`

<`+_+N+`>
`+p(w,!!R)+"</"+_+`>
`}return A}return u=d.converter._dispatch("lists.before",u,h,d),u+="\xA80",d.gListLevel?u=u.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(w,_,R){var P=R.search(/[*+-]/g)>-1?"ul":"ol";return E(_,P,!0)}):u=u.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(w,_,R,P){var O=P.search(/[*+-]/g)>-1?"ul":"ol";return E(R,O,!1)}),u=u.replace(/¨0/,""),u=d.converter._dispatch("lists.after",u,h,d),u}),t.subParser("metadata",function(u,h,d){"use strict";if(!h.metadata)return u;u=d.converter._dispatch("metadata.before",u,h,d);function p(b){d.metadata.raw=b,b=b.replace(/&/g,"&amp;").replace(/"/g,"&quot;"),b=b.replace(/\n {4}/g," "),b.replace(/^([\S ]+): +([\s\S]+?)$/gm,function(E,w,_){return d.metadata.parsed[w]=_,""})}return u=u.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/,function(b,E,w){return p(w),"\xA8M"}),u=u.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/,function(b,E,w){return E&&(d.metadata.format=E),p(w),"\xA8M"}),u=u.replace(/¨M/g,""),u=d.converter._dispatch("metadata.after",u,h,d),u}),t.subParser("outdent",function(u,h,d){"use strict";return u=d.converter._dispatch("outdent.before",u,h,d),u=u.replace(/^(\t|[ ]{1,4})/gm,"\xA80"),u=u.replace(/¨0/g,""),u=d.converter._dispatch("outdent.after",u,h,d),u}),t.subParser("paragraphs",function(u,h,d){"use strict";u=d.converter._dispatch("paragraphs.before",u,h,d),u=u.replace(/^\n+/g,""),u=u.replace(/\n+$/g,"");for(var p=u.split(/\n{2,}/g),b=[],E=p.length,w=0;w<E;w++){var _=p[w];_.search(/¨(K|G)(\d+)\1/g)>=0?b.push(_):_.search(/\S/)>=0&&(_=t.subParser("spanGamut")(_,h,d),_=_.replace(/^([ \t]*)/g,"<p>"),_+="</p>",b.push(_))}for(E=b.length,w=0;w<E;w++){for(var R="",P=b[w],O=!1;/¨(K|G)(\d+)\1/.test(P);){var M=RegExp.$1,A=RegExp.$2;M==="K"?R=d.gHtmlBlocks[A]:O?R=t.subParser("encodeCode")(d.ghCodeBlocks[A].text,h,d):R=d.ghCodeBlocks[A].codeblock,R=R.replace(/\$/g,"$$$$"),P=P.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/,R),/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(P)&&(O=!0)}b[w]=P}return u=b.join(`
`),u=u.replace(/^\n+/g,""),u=u.replace(/\n+$/g,""),d.converter._dispatch("paragraphs.after",u,h,d)}),t.subParser("runExtension",function(u,h,d,p){"use strict";if(u.filter)h=u.filter(h,p.converter,d);else if(u.regex){var b=u.regex;b instanceof RegExp||(b=new RegExp(b,"g")),h=h.replace(b,u.replace)}return h}),t.subParser("spanGamut",function(u,h,d){"use strict";return u=d.converter._dispatch("spanGamut.before",u,h,d),u=t.subParser("codeSpans")(u,h,d),u=t.subParser("escapeSpecialCharsWithinTagAttributes")(u,h,d),u=t.subParser("encodeBackslashEscapes")(u,h,d),u=t.subParser("images")(u,h,d),u=t.subParser("anchors")(u,h,d),u=t.subParser("autoLinks")(u,h,d),u=t.subParser("simplifiedAutoLinks")(u,h,d),u=t.subParser("emoji")(u,h,d),u=t.subParser("underline")(u,h,d),u=t.subParser("italicsAndBold")(u,h,d),u=t.subParser("strikethrough")(u,h,d),u=t.subParser("ellipsis")(u,h,d),u=t.subParser("hashHTMLSpans")(u,h,d),u=t.subParser("encodeAmpsAndAngles")(u,h,d),h.simpleLineBreaks?/\n\n¨K/.test(u)||(u=u.replace(/\n+/g,`<br />
`)):u=u.replace(/  +\n/g,`<br />
`),u=d.converter._dispatch("spanGamut.after",u,h,d),u}),t.subParser("strikethrough",function(u,h,d){"use strict";function p(b){return h.simplifiedAutoLink&&(b=t.subParser("simplifiedAutoLinks")(b,h,d)),"<del>"+b+"</del>"}return h.strikethrough&&(u=d.converter._dispatch("strikethrough.before",u,h,d),u=u.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g,function(b,E){return p(E)}),u=d.converter._dispatch("strikethrough.after",u,h,d)),u}),t.subParser("stripLinkDefinitions",function(u,h,d){"use strict";var p=/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,b=/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm;u+="\xA80";var E=function(w,_,R,P,O,M,A){return _=_.toLowerCase(),u.toLowerCase().split(_).length-1<2?w:(R.match(/^data:.+?\/.+?;base64,/)?d.gUrls[_]=R.replace(/\s/g,""):d.gUrls[_]=t.subParser("encodeAmpsAndAngles")(R,h,d),M?M+A:(A&&(d.gTitles[_]=A.replace(/"|'/g,"&quot;")),h.parseImgDimensions&&P&&O&&(d.gDimensions[_]={width:P,height:O}),""))};return u=u.replace(b,E),u=u.replace(p,E),u=u.replace(/¨0/,""),u}),t.subParser("tables",function(u,h,d){"use strict";if(!h.tables)return u;var p=/^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,b=/^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm;function E(O){return/^:[ \t]*--*$/.test(O)?' style="text-align:left;"':/^--*[ \t]*:[ \t]*$/.test(O)?' style="text-align:right;"':/^:[ \t]*--*[ \t]*:$/.test(O)?' style="text-align:center;"':""}function w(O,M){var A="";return O=O.trim(),(h.tablesHeaderId||h.tableHeaderId)&&(A=' id="'+O.replace(/ /g,"_").toLowerCase()+'"'),O=t.subParser("spanGamut")(O,h,d),"<th"+A+M+">"+O+`</th>
`}function _(O,M){var A=t.subParser("spanGamut")(O,h,d);return"<td"+M+">"+A+`</td>
`}function R(O,M){for(var A=`<table>
<thead>
<tr>
`,N=O.length,L=0;L<N;++L)A+=O[L];for(A+=`</tr>
</thead>
<tbody>
`,L=0;L<M.length;++L){A+=`<tr>
`;for(var D=0;D<N;++D)A+=M[L][D];A+=`</tr>
`}return A+=`</tbody>
</table>
`,A}function P(O){var M,A=O.split(`
`);for(M=0;M<A.length;++M)/^ {0,3}\|/.test(A[M])&&(A[M]=A[M].replace(/^ {0,3}\|/,"")),/\|[ \t]*$/.test(A[M])&&(A[M]=A[M].replace(/\|[ \t]*$/,"")),A[M]=t.subParser("codeSpans")(A[M],h,d);var N=A[0].split("|").map(function(se){return se.trim()}),L=A[1].split("|").map(function(se){return se.trim()}),D=[],U=[],F=[],z=[];for(A.shift(),A.shift(),M=0;M<A.length;++M)A[M].trim()!==""&&D.push(A[M].split("|").map(function(se){return se.trim()}));if(N.length<L.length)return O;for(M=0;M<L.length;++M)F.push(E(L[M]));for(M=0;M<N.length;++M)t.helper.isUndefined(F[M])&&(F[M]=""),U.push(w(N[M],F[M]));for(M=0;M<D.length;++M){for(var ae=[],ve=0;ve<U.length;++ve)t.helper.isUndefined(D[M][ve]),ae.push(_(D[M][ve],F[ve]));z.push(ae)}return R(U,z)}return u=d.converter._dispatch("tables.before",u,h,d),u=u.replace(/\\(\|)/g,t.helper.escapeCharactersCallback),u=u.replace(p,P),u=u.replace(b,P),u=d.converter._dispatch("tables.after",u,h,d),u}),t.subParser("underline",function(u,h,d){"use strict";return h.underline&&(u=d.converter._dispatch("underline.before",u,h,d),h.literalMidWordUnderscores?(u=u.replace(/\b___(\S[\s\S]*?)___\b/g,function(p,b){return"<u>"+b+"</u>"}),u=u.replace(/\b__(\S[\s\S]*?)__\b/g,function(p,b){return"<u>"+b+"</u>"})):(u=u.replace(/___(\S[\s\S]*?)___/g,function(p,b){return/\S$/.test(b)?"<u>"+b+"</u>":p}),u=u.replace(/__(\S[\s\S]*?)__/g,function(p,b){return/\S$/.test(b)?"<u>"+b+"</u>":p})),u=u.replace(/(_)/g,t.helper.escapeCharactersCallback),u=d.converter._dispatch("underline.after",u,h,d)),u}),t.subParser("unescapeSpecialChars",function(u,h,d){"use strict";return u=d.converter._dispatch("unescapeSpecialChars.before",u,h,d),u=u.replace(/¨E(\d+)E/g,function(p,b){var E=parseInt(b);return String.fromCharCode(E)}),u=d.converter._dispatch("unescapeSpecialChars.after",u,h,d),u}),t.subParser("makeMarkdown.blockquote",function(u,h){"use strict";var d="";if(u.hasChildNodes())for(var p=u.childNodes,b=p.length,E=0;E<b;++E){var w=t.subParser("makeMarkdown.node")(p[E],h);w!==""&&(d+=w)}return d=d.trim(),d="> "+d.split(`
`).join(`
> `),d}),t.subParser("makeMarkdown.codeBlock",function(u,h){"use strict";var d=u.getAttribute("language"),p=u.getAttribute("precodenum");return"```"+d+`
`+h.preList[p]+"\n```"}),t.subParser("makeMarkdown.codeSpan",function(u){"use strict";return"`"+u.innerHTML+"`"}),t.subParser("makeMarkdown.emphasis",function(u,h){"use strict";var d="";if(u.hasChildNodes()){d+="*";for(var p=u.childNodes,b=p.length,E=0;E<b;++E)d+=t.subParser("makeMarkdown.node")(p[E],h);d+="*"}return d}),t.subParser("makeMarkdown.header",function(u,h,d){"use strict";var p=new Array(d+1).join("#"),b="";if(u.hasChildNodes()){b=p+" ";for(var E=u.childNodes,w=E.length,_=0;_<w;++_)b+=t.subParser("makeMarkdown.node")(E[_],h)}return b}),t.subParser("makeMarkdown.hr",function(){"use strict";return"---"}),t.subParser("makeMarkdown.image",function(u){"use strict";var h="";return u.hasAttribute("src")&&(h+="!["+u.getAttribute("alt")+"](",h+="<"+u.getAttribute("src")+">",u.hasAttribute("width")&&u.hasAttribute("height")&&(h+=" ="+u.getAttribute("width")+"x"+u.getAttribute("height")),u.hasAttribute("title")&&(h+=' "'+u.getAttribute("title")+'"'),h+=")"),h}),t.subParser("makeMarkdown.links",function(u,h){"use strict";var d="";if(u.hasChildNodes()&&u.hasAttribute("href")){var p=u.childNodes,b=p.length;d="[";for(var E=0;E<b;++E)d+=t.subParser("makeMarkdown.node")(p[E],h);d+="](",d+="<"+u.getAttribute("href")+">",u.hasAttribute("title")&&(d+=' "'+u.getAttribute("title")+'"'),d+=")"}return d}),t.subParser("makeMarkdown.list",function(u,h,d){"use strict";var p="";if(!u.hasChildNodes())return"";for(var b=u.childNodes,E=b.length,w=u.getAttribute("start")||1,_=0;_<E;++_)if(!(typeof b[_].tagName>"u"||b[_].tagName.toLowerCase()!=="li")){var R="";d==="ol"?R=w.toString()+". ":R="- ",p+=R+t.subParser("makeMarkdown.listItem")(b[_],h),++w}return p+=`
<!-- -->
`,p.trim()}),t.subParser("makeMarkdown.listItem",function(u,h){"use strict";for(var d="",p=u.childNodes,b=p.length,E=0;E<b;++E)d+=t.subParser("makeMarkdown.node")(p[E],h);return/\n$/.test(d)?d=d.split(`
`).join(`
    `).replace(/^ {4}$/gm,"").replace(/\n\n+/g,`

`):d+=`
`,d}),t.subParser("makeMarkdown.node",function(u,h,d){"use strict";d=d||!1;var p="";if(u.nodeType===3)return t.subParser("makeMarkdown.txt")(u,h);if(u.nodeType===8)return"<!--"+u.data+`-->

`;if(u.nodeType!==1)return"";var b=u.tagName.toLowerCase();switch(b){case"h1":d||(p=t.subParser("makeMarkdown.header")(u,h,1)+`

`);break;case"h2":d||(p=t.subParser("makeMarkdown.header")(u,h,2)+`

`);break;case"h3":d||(p=t.subParser("makeMarkdown.header")(u,h,3)+`

`);break;case"h4":d||(p=t.subParser("makeMarkdown.header")(u,h,4)+`

`);break;case"h5":d||(p=t.subParser("makeMarkdown.header")(u,h,5)+`

`);break;case"h6":d||(p=t.subParser("makeMarkdown.header")(u,h,6)+`

`);break;case"p":d||(p=t.subParser("makeMarkdown.paragraph")(u,h)+`

`);break;case"blockquote":d||(p=t.subParser("makeMarkdown.blockquote")(u,h)+`

`);break;case"hr":d||(p=t.subParser("makeMarkdown.hr")(u,h)+`

`);break;case"ol":d||(p=t.subParser("makeMarkdown.list")(u,h,"ol")+`

`);break;case"ul":d||(p=t.subParser("makeMarkdown.list")(u,h,"ul")+`

`);break;case"precode":d||(p=t.subParser("makeMarkdown.codeBlock")(u,h)+`

`);break;case"pre":d||(p=t.subParser("makeMarkdown.pre")(u,h)+`

`);break;case"table":d||(p=t.subParser("makeMarkdown.table")(u,h)+`

`);break;case"code":p=t.subParser("makeMarkdown.codeSpan")(u,h);break;case"em":case"i":p=t.subParser("makeMarkdown.emphasis")(u,h);break;case"strong":case"b":p=t.subParser("makeMarkdown.strong")(u,h);break;case"del":p=t.subParser("makeMarkdown.strikethrough")(u,h);break;case"a":p=t.subParser("makeMarkdown.links")(u,h);break;case"img":p=t.subParser("makeMarkdown.image")(u,h);break;default:p=u.outerHTML+`

`}return p}),t.subParser("makeMarkdown.paragraph",function(u,h){"use strict";var d="";if(u.hasChildNodes())for(var p=u.childNodes,b=p.length,E=0;E<b;++E)d+=t.subParser("makeMarkdown.node")(p[E],h);return d=d.trim(),d}),t.subParser("makeMarkdown.pre",function(u,h){"use strict";var d=u.getAttribute("prenum");return"<pre>"+h.preList[d]+"</pre>"}),t.subParser("makeMarkdown.strikethrough",function(u,h){"use strict";var d="";if(u.hasChildNodes()){d+="~~";for(var p=u.childNodes,b=p.length,E=0;E<b;++E)d+=t.subParser("makeMarkdown.node")(p[E],h);d+="~~"}return d}),t.subParser("makeMarkdown.strong",function(u,h){"use strict";var d="";if(u.hasChildNodes()){d+="**";for(var p=u.childNodes,b=p.length,E=0;E<b;++E)d+=t.subParser("makeMarkdown.node")(p[E],h);d+="**"}return d}),t.subParser("makeMarkdown.table",function(u,h){"use strict";var d="",p=[[],[]],b=u.querySelectorAll("thead>tr>th"),E=u.querySelectorAll("tbody>tr"),w,_;for(w=0;w<b.length;++w){var R=t.subParser("makeMarkdown.tableCell")(b[w],h),P="---";if(b[w].hasAttribute("style")){var O=b[w].getAttribute("style").toLowerCase().replace(/\s/g,"");switch(O){case"text-align:left;":P=":---";break;case"text-align:right;":P="---:";break;case"text-align:center;":P=":---:";break}}p[0][w]=R.trim(),p[1][w]=P}for(w=0;w<E.length;++w){var M=p.push([])-1,A=E[w].getElementsByTagName("td");for(_=0;_<b.length;++_){var N=" ";typeof A[_]<"u"&&(N=t.subParser("makeMarkdown.tableCell")(A[_],h)),p[M].push(N)}}var L=3;for(w=0;w<p.length;++w)for(_=0;_<p[w].length;++_){var D=p[w][_].length;D>L&&(L=D)}for(w=0;w<p.length;++w){for(_=0;_<p[w].length;++_)w===1?p[w][_].slice(-1)===":"?p[w][_]=t.helper.padEnd(p[w][_].slice(-1),L-1,"-")+":":p[w][_]=t.helper.padEnd(p[w][_],L,"-"):p[w][_]=t.helper.padEnd(p[w][_],L);d+="| "+p[w].join(" | ")+` |
`}return d.trim()}),t.subParser("makeMarkdown.tableCell",function(u,h){"use strict";var d="";if(!u.hasChildNodes())return"";for(var p=u.childNodes,b=p.length,E=0;E<b;++E)d+=t.subParser("makeMarkdown.node")(p[E],h,!0);return d.trim()}),t.subParser("makeMarkdown.txt",function(u){"use strict";var h=u.nodeValue;return h=h.replace(/ +/g," "),h=h.replace(/¨NBSP;/g," "),h=t.helper.unescapeHTMLEntities(h),h=h.replace(/([*_~|`])/g,"\\$1"),h=h.replace(/^(\s*)>/g,"\\$1>"),h=h.replace(/^#/gm,"\\#"),h=h.replace(/^(\s*)([-=]{3,})(\s*)$/,"$1\\$2$3"),h=h.replace(/^( {0,3}\d+)\./gm,"$1\\."),h=h.replace(/^( {0,3})([+-])/gm,"$1\\$2"),h=h.replace(/]([\s]*)\(/g,"\\]$1\\("),h=h.replace(/^ {0,3}\[([\S \t]*?)]:/gm,"\\[$1]:"),h});var I=this;typeof define=="function"&&define.amd?define(function(){"use strict";return t}):typeof _l<"u"&&_l.exports?_l.exports=t:I.showdown=t}).call(Mv)});(function(){var r=e();function e(){if(typeof window.CustomEvent=="function")return window.CustomEvent;function n(s,o){o=o||{bubbles:!1,cancelable:!1,detail:void 0};var a=document.createEvent("CustomEvent");return a.initCustomEvent(s,o.bubbles,o.cancelable,o.detail),a}return n.prototype=window.Event.prototype,n}function t(n,s){var o=document.createElement("input");return o.type="hidden",o.name=n,o.value=s,o}function i(n,s){var o=n.getAttribute("data-to"),a=t("_method",n.getAttribute("data-method")),l=t("_csrf_token",n.getAttribute("data-csrf")),c=document.createElement("form"),f=document.createElement("input"),m=n.getAttribute("target");c.method=n.getAttribute("data-method")==="get"?"get":"post",c.action=o,c.style.display="none",m?c.target=m:s&&(c.target="_blank"),c.appendChild(l),c.appendChild(a),document.body.appendChild(c),f.type="submit",c.appendChild(f),f.click()}window.addEventListener("click",function(n){var s=n.target;if(!n.defaultPrevented)for(;s&&s.getAttribute;){var o=new r("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!s.dispatchEvent(o))return n.preventDefault(),n.stopImmediatePropagation(),!1;if(s.getAttribute("data-method")&&s.getAttribute("data-to"))return i(s,n.metaKey||n.shiftKey),n.preventDefault(),!1;s=s.parentNode}},!1),window.addEventListener("phoenix.link.click",function(n){var s=n.target.getAttribute("data-confirm");s&&!window.confirm(s)&&n.preventDefault()},!1)})();var Qn=r=>typeof r=="function"?r:function(){return r},ty=typeof self<"u"?self:null,Zn=typeof window<"u"?window:null,ai=ty||Zn||ai,ry="2.0.0",qt={connecting:0,open:1,closing:2,closed:3},iy=1e4,ny=1e3,ft={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},er={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},nu={longpoll:"longpoll",websocket:"websocket"},sy={complete:4},Ro=class{constructor(r,e,t,i){this.channel=r,this.event=e,this.payload=t||function(){return{}},this.receivedResp=null,this.timeout=i,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}resend(r){this.timeout=r,this.reset(),this.send()}send(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}receive(r,e){return this.hasReceived(r)&&e(this.receivedResp.response),this.recHooks.push({status:r,callback:e}),this}reset(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}matchReceive({status:r,response:e,_ref:t}){this.recHooks.filter(i=>i.status===r).forEach(i=>i.callback(e))}cancelRefEvent(){this.refEvent&&this.channel.off(this.refEvent)}cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}startTimeout(){this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,r=>{this.cancelRefEvent(),this.cancelTimeout(),this.receivedResp=r,this.matchReceive(r)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}hasReceived(r){return this.receivedResp&&this.receivedResp.status===r}trigger(r,e){this.channel.trigger(this.refEvent,{status:r,response:e})}},xh=class{constructor(r,e){this.callback=r,this.timerCalc=e,this.timer=null,this.tries=0}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}},oy=class{constructor(r,e,t){this.state=ft.closed,this.topic=r,this.params=Qn(e||{}),this.socket=t,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new Ro(this,er.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new xh(()=>{this.socket.isConnected()&&this.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(()=>this.rejoinTimer.reset())),this.stateChangeRefs.push(this.socket.onOpen(()=>{this.rejoinTimer.reset(),this.isErrored()&&this.rejoin()})),this.joinPush.receive("ok",()=>{this.state=ft.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(i=>i.send()),this.pushBuffer=[]}),this.joinPush.receive("error",()=>{this.state=ft.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.onClose(()=>{this.rejoinTimer.reset(),this.socket.hasLogger()&&this.socket.log("channel",`close ${this.topic} ${this.joinRef()}`),this.state=ft.closed,this.socket.remove(this)}),this.onError(i=>{this.socket.hasLogger()&&this.socket.log("channel",`error ${this.topic}`,i),this.isJoining()&&this.joinPush.reset(),this.state=ft.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",()=>{this.socket.hasLogger()&&this.socket.log("channel",`timeout ${this.topic} (${this.joinRef()})`,this.joinPush.timeout),new Ro(this,er.leave,Qn({}),this.timeout).send(),this.state=ft.errored,this.joinPush.reset(),this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.on(er.reply,(i,n)=>{this.trigger(this.replyEventName(n),i)})}join(r=this.timeout){if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=r,this.joinedOnce=!0,this.rejoin(),this.joinPush}onClose(r){this.on(er.close,r)}onError(r){return this.on(er.error,e=>r(e))}on(r,e){let t=this.bindingRef++;return this.bindings.push({event:r,ref:t,callback:e}),t}off(r,e){this.bindings=this.bindings.filter(t=>!(t.event===r&&(typeof e>"u"||e===t.ref)))}canPush(){return this.socket.isConnected()&&this.isJoined()}push(r,e,t=this.timeout){if(e=e||{},!this.joinedOnce)throw new Error(`tried to push '${r}' to '${this.topic}' before joining. Use channel.join() before pushing events`);let i=new Ro(this,r,function(){return e},t);return this.canPush()?i.send():(i.startTimeout(),this.pushBuffer.push(i)),i}leave(r=this.timeout){this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=ft.leaving;let e=()=>{this.socket.hasLogger()&&this.socket.log("channel",`leave ${this.topic}`),this.trigger(er.close,"leave")},t=new Ro(this,er.leave,Qn({}),r);return t.receive("ok",()=>e()).receive("timeout",()=>e()),t.send(),this.canPush()||t.trigger("ok",{}),t}onMessage(r,e,t){return e}isMember(r,e,t,i){return this.topic!==r?!1:i&&i!==this.joinRef()?(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:r,event:e,payload:t,joinRef:i}),!1):!0}joinRef(){return this.joinPush.ref}rejoin(r=this.timeout){this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=ft.joining,this.joinPush.resend(r))}trigger(r,e,t,i){let n=this.onMessage(r,e,t,i);if(e&&!n)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");let s=this.bindings.filter(o=>o.event===r);for(let o=0;o<s.length;o++)s[o].callback(n,t,i||this.joinRef())}replyEventName(r){return`chan_reply_${r}`}isClosed(){return this.state===ft.closed}isErrored(){return this.state===ft.errored}isJoined(){return this.state===ft.joined}isJoining(){return this.state===ft.joining}isLeaving(){return this.state===ft.leaving}},Oo=class{static request(r,e,t,i,n,s,o){if(ai.XDomainRequest){let a=new ai.XDomainRequest;return this.xdomainRequest(a,r,e,i,n,s,o)}else{let a=new ai.XMLHttpRequest;return this.xhrRequest(a,r,e,t,i,n,s,o)}}static xdomainRequest(r,e,t,i,n,s,o){return r.timeout=n,r.open(e,t),r.onload=()=>{let a=this.parseJSON(r.responseText);o&&o(a)},s&&(r.ontimeout=s),r.onprogress=()=>{},r.send(i),r}static xhrRequest(r,e,t,i,n,s,o,a){return r.open(e,t,!0),r.timeout=s,r.setRequestHeader("Content-Type",i),r.onerror=()=>a&&a(null),r.onreadystatechange=()=>{if(r.readyState===sy.complete&&a){let l=this.parseJSON(r.responseText);a(l)}},o&&(r.ontimeout=o),r.send(n),r}static parseJSON(r){if(!r||r==="")return null;try{return JSON.parse(r)}catch{return console&&console.log("failed to parse JSON response",r),null}}static serialize(r,e){let t=[];for(var i in r){if(!Object.prototype.hasOwnProperty.call(r,i))continue;let n=e?`${e}[${i}]`:i,s=r[i];typeof s=="object"?t.push(this.serialize(s,n)):t.push(encodeURIComponent(n)+"="+encodeURIComponent(s))}return t.join("&")}static appendParams(r,e){if(Object.keys(e).length===0)return r;let t=r.match(/\?/)?"&":"?";return`${r}${t}${this.serialize(e)}`}},ay=r=>{let e="",t=new Uint8Array(r),i=t.byteLength;for(let n=0;n<i;n++)e+=String.fromCharCode(t[n]);return btoa(e)},Yn=class{constructor(r){this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.reqs=new Set,this.awaitingBatchAck=!1,this.currentBatch=null,this.currentBatchTimer=null,this.batchBuffer=[],this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(r),this.readyState=qt.connecting,setTimeout(()=>this.poll(),0)}normalizeEndpoint(r){return r.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+nu.websocket),"$1/"+nu.longpoll)}endpointURL(){return Oo.appendParams(this.pollEndpoint,{token:this.token})}closeAndRetry(r,e,t){this.close(r,e,t),this.readyState=qt.connecting}ontimeout(){this.onerror("timeout"),this.closeAndRetry(1005,"timeout",!1)}isActive(){return this.readyState===qt.open||this.readyState===qt.connecting}poll(){this.ajax("GET","application/json",null,()=>this.ontimeout(),r=>{if(r){var{status:e,token:t,messages:i}=r;this.token=t}else e=0;switch(e){case 200:i.forEach(n=>{setTimeout(()=>this.onmessage({data:n}),0)}),this.poll();break;case 204:this.poll();break;case 410:this.readyState=qt.open,this.onopen({}),this.poll();break;case 403:this.onerror(403),this.close(1008,"forbidden",!1);break;case 0:case 500:this.onerror(500),this.closeAndRetry(1011,"internal server error",500);break;default:throw new Error(`unhandled poll status ${e}`)}})}send(r){typeof r!="string"&&(r=ay(r)),this.currentBatch?this.currentBatch.push(r):this.awaitingBatchAck?this.batchBuffer.push(r):(this.currentBatch=[r],this.currentBatchTimer=setTimeout(()=>{this.batchSend(this.currentBatch),this.currentBatch=null},0))}batchSend(r){this.awaitingBatchAck=!0,this.ajax("POST","application/x-ndjson",r.join(`
`),()=>this.onerror("timeout"),e=>{this.awaitingBatchAck=!1,!e||e.status!==200?(this.onerror(e&&e.status),this.closeAndRetry(1011,"internal server error",!1)):this.batchBuffer.length>0&&(this.batchSend(this.batchBuffer),this.batchBuffer=[])})}close(r,e,t){for(let n of this.reqs)n.abort();this.readyState=qt.closed;let i=Object.assign({code:1e3,reason:void 0,wasClean:!0},{code:r,reason:e,wasClean:t});this.batchBuffer=[],clearTimeout(this.currentBatchTimer),this.currentBatchTimer=null,typeof CloseEvent<"u"?this.onclose(new CloseEvent("close",i)):this.onclose(i)}ajax(r,e,t,i,n){let s,o=()=>{this.reqs.delete(s),i()};s=Oo.request(r,this.endpointURL(),e,t,this.timeout,o,a=>{this.reqs.delete(s),this.isActive()&&n(a)}),this.reqs.add(s)}};var No={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode(r,e){if(r.payload.constructor===ArrayBuffer)return e(this.binaryEncode(r));{let t=[r.join_ref,r.ref,r.topic,r.event,r.payload];return e(JSON.stringify(t))}},decode(r,e){if(r.constructor===ArrayBuffer)return e(this.binaryDecode(r));{let[t,i,n,s,o]=JSON.parse(r);return e({join_ref:t,ref:i,topic:n,event:s,payload:o})}},binaryEncode(r){let{join_ref:e,ref:t,event:i,topic:n,payload:s}=r,o=this.META_LENGTH+e.length+t.length+n.length+i.length,a=new ArrayBuffer(this.HEADER_LENGTH+o),l=new DataView(a),c=0;l.setUint8(c++,this.KINDS.push),l.setUint8(c++,e.length),l.setUint8(c++,t.length),l.setUint8(c++,n.length),l.setUint8(c++,i.length),Array.from(e,m=>l.setUint8(c++,m.charCodeAt(0))),Array.from(t,m=>l.setUint8(c++,m.charCodeAt(0))),Array.from(n,m=>l.setUint8(c++,m.charCodeAt(0))),Array.from(i,m=>l.setUint8(c++,m.charCodeAt(0)));var f=new Uint8Array(a.byteLength+s.byteLength);return f.set(new Uint8Array(a),0),f.set(new Uint8Array(s),a.byteLength),f.buffer},binaryDecode(r){let e=new DataView(r),t=e.getUint8(0),i=new TextDecoder;switch(t){case this.KINDS.push:return this.decodePush(r,e,i);case this.KINDS.reply:return this.decodeReply(r,e,i);case this.KINDS.broadcast:return this.decodeBroadcast(r,e,i)}},decodePush(r,e,t){let i=e.getUint8(1),n=e.getUint8(2),s=e.getUint8(3),o=this.HEADER_LENGTH+this.META_LENGTH-1,a=t.decode(r.slice(o,o+i));o=o+i;let l=t.decode(r.slice(o,o+n));o=o+n;let c=t.decode(r.slice(o,o+s));o=o+s;let f=r.slice(o,r.byteLength);return{join_ref:a,ref:null,topic:l,event:c,payload:f}},decodeReply(r,e,t){let i=e.getUint8(1),n=e.getUint8(2),s=e.getUint8(3),o=e.getUint8(4),a=this.HEADER_LENGTH+this.META_LENGTH,l=t.decode(r.slice(a,a+i));a=a+i;let c=t.decode(r.slice(a,a+n));a=a+n;let f=t.decode(r.slice(a,a+s));a=a+s;let m=t.decode(r.slice(a,a+o));a=a+o;let y=r.slice(a,r.byteLength),v={status:m,response:y};return{join_ref:l,ref:c,topic:f,event:er.reply,payload:v}},decodeBroadcast(r,e,t){let i=e.getUint8(1),n=e.getUint8(2),s=this.HEADER_LENGTH+2,o=t.decode(r.slice(s,s+i));s=s+i;let a=t.decode(r.slice(s,s+n));s=s+n;let l=r.slice(s,r.byteLength);return{join_ref:null,ref:null,topic:o,event:a,payload:l}}},_h=class{constructor(r,e={}){this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=e.timeout||iy,this.transport=e.transport||ai.WebSocket||Yn,this.primaryPassedHealthCheck=!1,this.longPollFallbackMs=e.longPollFallbackMs,this.fallbackTimer=null,this.sessionStore=e.sessionStorage||ai&&ai.sessionStorage,this.establishedConnections=0,this.defaultEncoder=No.encode.bind(No),this.defaultDecoder=No.decode.bind(No),this.closeWasClean=!1,this.binaryType=e.binaryType||"arraybuffer",this.connectClock=1,this.transport!==Yn?(this.encode=e.encode||this.defaultEncoder,this.decode=e.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder);let t=null;Zn&&Zn.addEventListener&&(Zn.addEventListener("pagehide",i=>{this.conn&&(this.disconnect(),t=this.connectClock)}),Zn.addEventListener("pageshow",i=>{t===this.connectClock&&(t=null,this.connect())})),this.heartbeatIntervalMs=e.heartbeatIntervalMs||3e4,this.rejoinAfterMs=i=>e.rejoinAfterMs?e.rejoinAfterMs(i):[1e3,2e3,5e3][i-1]||1e4,this.reconnectAfterMs=i=>e.reconnectAfterMs?e.reconnectAfterMs(i):[10,50,100,150,200,250,500,1e3,2e3][i-1]||5e3,this.logger=e.logger||null,!this.logger&&e.debug&&(this.logger=(i,n,s)=>{console.log(`${i}: ${n}`,s)}),this.longpollerTimeout=e.longpollerTimeout||2e4,this.params=Qn(e.params||{}),this.endPoint=`${r}/${nu.websocket}`,this.vsn=e.vsn||ry,this.heartbeatTimeoutTimer=null,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new xh(()=>{this.teardown(()=>this.connect())},this.reconnectAfterMs)}getLongPollTransport(){return Yn}replaceTransport(r){this.connectClock++,this.closeWasClean=!0,clearTimeout(this.fallbackTimer),this.reconnectTimer.reset(),this.conn&&(this.conn.close(),this.conn=null),this.transport=r}protocol(){return location.protocol.match(/^https/)?"wss":"ws"}endPointURL(){let r=Oo.appendParams(Oo.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return r.charAt(0)!=="/"?r:r.charAt(1)==="/"?`${this.protocol()}:${r}`:`${this.protocol()}://${location.host}${r}`}disconnect(r,e,t){this.connectClock++,this.closeWasClean=!0,clearTimeout(this.fallbackTimer),this.reconnectTimer.reset(),this.teardown(r,e,t)}connect(r){r&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=Qn(r)),!this.conn&&(this.longPollFallbackMs&&this.transport!==Yn?this.connectWithFallback(Yn,this.longPollFallbackMs):this.transportConnect())}log(r,e,t){this.logger&&this.logger(r,e,t)}hasLogger(){return this.logger!==null}onOpen(r){let e=this.makeRef();return this.stateChangeCallbacks.open.push([e,r]),e}onClose(r){let e=this.makeRef();return this.stateChangeCallbacks.close.push([e,r]),e}onError(r){let e=this.makeRef();return this.stateChangeCallbacks.error.push([e,r]),e}onMessage(r){let e=this.makeRef();return this.stateChangeCallbacks.message.push([e,r]),e}ping(r){if(!this.isConnected())return!1;let e=this.makeRef(),t=Date.now();this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:e});let i=this.onMessage(n=>{n.ref===e&&(this.off([i]),r(Date.now()-t))});return!0}transportConnect(){this.connectClock++,this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=()=>this.onConnOpen(),this.conn.onerror=r=>this.onConnError(r),this.conn.onmessage=r=>this.onConnMessage(r),this.conn.onclose=r=>this.onConnClose(r)}getSession(r){return this.sessionStore&&this.sessionStore.getItem(r)}storeSession(r,e){this.sessionStore&&this.sessionStore.setItem(r,e)}connectWithFallback(r,e=2500){clearTimeout(this.fallbackTimer);let t=!1,i=!0,n,s,o=a=>{this.log("transport",`falling back to ${r.name}...`,a),this.off([n,s]),i=!1,this.replaceTransport(r),this.transportConnect()};if(this.getSession(`phx:fallback:${r.name}`))return o("memorized");this.fallbackTimer=setTimeout(o,e),s=this.onError(a=>{this.log("transport","error",a),i&&!t&&(clearTimeout(this.fallbackTimer),o(a))}),this.onOpen(()=>{if(t=!0,!i)return this.primaryPassedHealthCheck||this.storeSession(`phx:fallback:${r.name}`,"true"),this.log("transport",`established ${r.name} fallback`);clearTimeout(this.fallbackTimer),this.fallbackTimer=setTimeout(o,e),this.ping(a=>{this.log("transport","connected to primary after",a),this.primaryPassedHealthCheck=!0,clearTimeout(this.fallbackTimer)})}),this.transportConnect()}clearHeartbeats(){clearTimeout(this.heartbeatTimer),clearTimeout(this.heartbeatTimeoutTimer)}onConnOpen(){this.hasLogger()&&this.log("transport",`${this.transport.name} connected to ${this.endPointURL()}`),this.closeWasClean=!1,this.establishedConnections++,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(([,r])=>r())}heartbeatTimeout(){this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.triggerChanError(),this.closeWasClean=!1,this.teardown(()=>this.reconnectTimer.scheduleTimeout(),ny,"heartbeat timeout"))}resetHeartbeat(){this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,this.clearHeartbeats(),this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs))}teardown(r,e,t){if(!this.conn)return r&&r();this.waitForBufferDone(()=>{this.conn&&(e?this.conn.close(e,t||""):this.conn.close()),this.waitForSocketClosed(()=>{this.conn&&(this.conn.onopen=function(){},this.conn.onerror=function(){},this.conn.onmessage=function(){},this.conn.onclose=function(){},this.conn=null),r&&r()})})}waitForBufferDone(r,e=1){if(e===5||!this.conn||!this.conn.bufferedAmount){r();return}setTimeout(()=>{this.waitForBufferDone(r,e+1)},150*e)}waitForSocketClosed(r,e=1){if(e===5||!this.conn||this.conn.readyState===qt.closed){r();return}setTimeout(()=>{this.waitForSocketClosed(r,e+1)},150*e)}onConnClose(r){let e=r&&r.code;this.hasLogger()&&this.log("transport","close",r),this.triggerChanError(),this.clearHeartbeats(),!this.closeWasClean&&e!==1e3&&this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(([,t])=>t(r))}onConnError(r){this.hasLogger()&&this.log("transport",r);let e=this.transport,t=this.establishedConnections;this.stateChangeCallbacks.error.forEach(([,i])=>{i(r,e,t)}),(e===this.transport||t>0)&&this.triggerChanError()}triggerChanError(){this.channels.forEach(r=>{r.isErrored()||r.isLeaving()||r.isClosed()||r.trigger(er.error)})}connectionState(){switch(this.conn&&this.conn.readyState){case qt.connecting:return"connecting";case qt.open:return"open";case qt.closing:return"closing";default:return"closed"}}isConnected(){return this.connectionState()==="open"}remove(r){this.off(r.stateChangeRefs),this.channels=this.channels.filter(e=>e!==r)}off(r){for(let e in this.stateChangeCallbacks)this.stateChangeCallbacks[e]=this.stateChangeCallbacks[e].filter(([t])=>r.indexOf(t)===-1)}channel(r,e={}){let t=new oy(r,e,this);return this.channels.push(t),t}push(r){if(this.hasLogger()){let{topic:e,event:t,payload:i,ref:n,join_ref:s}=r;this.log("push",`${e} ${t} (${s}, ${n})`,i)}this.isConnected()?this.encode(r,e=>this.conn.send(e)):this.sendBuffer.push(()=>this.encode(r,e=>this.conn.send(e)))}makeRef(){let r=this.ref+1;return r===this.ref?this.ref=0:this.ref=r,this.ref.toString()}sendHeartbeat(){this.pendingHeartbeatRef&&!this.isConnected()||(this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatTimeoutTimer=setTimeout(()=>this.heartbeatTimeout(),this.heartbeatIntervalMs))}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(r=>r()),this.sendBuffer=[])}onConnMessage(r){this.decode(r.data,e=>{let{topic:t,event:i,payload:n,ref:s,join_ref:o}=e;s&&s===this.pendingHeartbeatRef&&(this.clearHeartbeats(),this.pendingHeartbeatRef=null,this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)),this.hasLogger()&&this.log("receive",`${n.status||""} ${t} ${i} ${s&&"("+s+")"||""}`,n);for(let a=0;a<this.channels.length;a++){let l=this.channels[a];l.isMember(t,i,n,o)&&l.trigger(i,n,s,o)}for(let a=0;a<this.stateChangeCallbacks.message.length;a++){let[,l]=this.stateChangeCallbacks.message[a];l(e)}})}leaveOpenTopic(r){let e=this.channels.find(t=>t.topic===r&&(t.isJoined()||t.isJoining()));e&&(this.hasLogger()&&this.log("transport",`leaving duplicate topic "${r}"`),e.leave())}};var ef="consecutive-reloads",ly=10,uy=5e3,cy=1e4,dy=3e4,tf=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading","phx-hook-loading"],rr="data-phx-component",su="data-phx-link",hy="track-static",fy="data-phx-link-state",Ki="data-phx-ref-loading",_t="data-phx-ref-src",pt="data-phx-ref-lock",rf="track-uploads",ir="data-phx-upload-ref",bu="data-phx-preflighted-refs",py="data-phx-done-refs",kh="drop-target",hu="data-phx-active-refs",qo="phx:live-file:updated",nf="data-phx-skip",sf="data-phx-id",Sh="data-phx-prune",Ch="phx-connected",li="phx-loading",$i="phx-error",Th="phx-client-error",es="phx-server-error",di="data-phx-parent-id",vu="data-phx-main",Lr="data-phx-root-id",fu="viewport-top",pu="viewport-bottom",my="trigger-action",Uo="phx-has-focused",gy=["text","textarea","number","email","password","search","tel","url","date","time","datetime-local","color","range"],of=["checkbox","radio"],ds="phx-has-submitted",zt="data-phx-session",hi=`[${zt}]`,Lh="data-phx-sticky",ci="data-phx-static",mu="data-phx-readonly",Wi="data-phx-disabled",Rh="disable-with",zo="data-phx-disable-with-restore",ts="hook",by="debounce",vy="throttle",us="update",ou="stream",rs="data-phx-stream",yy="key",Ht="phxPrivate",Nh="auto-recover",Po="phx:live-socket:debug",au="phx:live-socket:profiling",lu="phx:live-socket:latency-sim",Do="phx:nav-history-position",wy="progress",Oh="mounted",Ph="__phoenix_reload_status__",Ay=1,Dh=3,Ey=200,xy="phx-",_y=3e4,is="debounce-trigger",ns="throttled",Ih="debounce-prev-key",ky={debounce:300,throttle:300},Mh=[Ki,_t,pt],Io="d",Ut="s",uu="r",ze="c",Bh="e",Fh="r",jh="t",Sy="p",qh="stream",Cy=class{constructor(r,e,t){let{chunk_size:i,chunk_timeout:n}=e;this.liveSocket=t,this.entry=r,this.offset=0,this.chunkSize=i,this.chunkTimeout=n,this.chunkTimer=null,this.errored=!1,this.uploadChannel=t.channel(`lvu:${r.ref}`,{token:r.metadata()})}error(r){this.errored||(this.uploadChannel.leave(),this.errored=!0,clearTimeout(this.chunkTimer),this.entry.error(r))}upload(){this.uploadChannel.onError(r=>this.error(r)),this.uploadChannel.join().receive("ok",r=>this.readNextChunk()).receive("error",r=>this.error(r))}isDone(){return this.offset>=this.entry.file.size}readNextChunk(){let r=new window.FileReader,e=this.entry.file.slice(this.offset,this.chunkSize+this.offset);r.onload=t=>{if(t.target.error===null)this.offset+=t.target.result.byteLength,this.pushChunk(t.target.result);else return Qe("Read error: "+t.target.error)},r.readAsArrayBuffer(e)}pushChunk(r){this.uploadChannel.isJoined()&&this.uploadChannel.push("chunk",r,this.chunkTimeout).receive("ok",()=>{this.entry.progress(this.offset/this.entry.file.size*100),this.isDone()||(this.chunkTimer=setTimeout(()=>this.readNextChunk(),this.liveSocket.getLatencySim()||0))}).receive("error",({reason:e})=>this.error(e))}},Qe=(r,e)=>console.error&&console.error(r,e),tr=r=>{let e=typeof r;return e==="number"||e==="string"&&/^(0|[1-9]\d*)$/.test(r)};function Ty(){let r=new Set,e=document.querySelectorAll("*[id]");for(let t=0,i=e.length;t<i;t++)r.has(e[t].id)?console.error(`Multiple IDs detected: ${e[t].id}. Ensure unique element ids.`):r.add(e[t].id)}var Ly=(r,e,t,i)=>{r.liveSocket.isDebugEnabled()&&console.log(`${r.id} ${e}: ${t} - `,i)},ss=r=>typeof r=="function"?r:function(){return r},Ho=r=>JSON.parse(JSON.stringify(r)),cs=(r,e,t)=>{do{if(r.matches(`[${e}]`)&&!r.disabled)return r;r=r.parentElement||r.parentNode}while(r!==null&&r.nodeType===1&&!(t&&t.isSameNode(r)||r.matches(hi)));return null},Vi=r=>r!==null&&typeof r=="object"&&!(r instanceof Array),Ry=(r,e)=>JSON.stringify(r)===JSON.stringify(e),Hh=r=>{for(let e in r)return!1;return!0},Tr=(r,e)=>r&&e(r),Ny=function(r,e,t,i){r.forEach(n=>{new Cy(n,t.config,i).upload()})},Oy={canPushState(){return typeof history.pushState<"u"},dropLocal(r,e,t){return r.removeItem(this.localKey(e,t))},updateLocal(r,e,t,i,n){let s=this.getLocal(r,e,t),o=this.localKey(e,t),a=s===null?i:n(s);return r.setItem(o,JSON.stringify(a)),a},getLocal(r,e,t){return JSON.parse(r.getItem(this.localKey(e,t)))},updateCurrentState(r){this.canPushState()&&history.replaceState(r(history.state||{}),"",window.location.href)},pushState(r,e,t){if(this.canPushState()){if(t!==window.location.href){if(e.type=="redirect"&&e.scroll){let i=history.state||{};i.scroll=e.scroll,history.replaceState(i,"",window.location.href)}delete e.scroll,history[r+"State"](e,"",t||null),window.requestAnimationFrame(()=>{let i=this.getHashTargetEl(window.location.hash);i?i.scrollIntoView():e.type==="redirect"&&window.scroll(0,0)})}}else this.redirect(t)},setCookie(r,e,t){let i=typeof t=="number"?` max-age=${t};`:"";document.cookie=`${r}=${e};${i} path=/`},getCookie(r){return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${r}s*=s*([^;]*).*$)|^.*$`),"$1")},deleteCookie(r){document.cookie=`${r}=; max-age=-1; path=/`},redirect(r,e){e&&this.setCookie("__phoenix_flash__",e,60),window.location=r},localKey(r,e){return`${r}-${e}`},getHashTargetEl(r){let e=r.toString().substring(1);if(e!=="")return document.getElementById(e)||document.querySelector(`a[name="${e}"]`)}},Ze=Oy,ui={byId(r){return document.getElementById(r)||Qe(`no id found for ${r}`)},removeClass(r,e){r.classList.remove(e),r.classList.length===0&&r.removeAttribute("class")},all(r,e,t){if(!r)return[];let i=Array.from(r.querySelectorAll(e));return t?i.forEach(t):i},childNodeLength(r){let e=document.createElement("template");return e.innerHTML=r,e.content.childElementCount},isUploadInput(r){return r.type==="file"&&r.getAttribute(ir)!==null},isAutoUpload(r){return r.hasAttribute("data-phx-auto-upload")},findUploadInputs(r){let e=r.id,t=this.all(document,`input[type="file"][${ir}][form="${e}"]`);return this.all(r,`input[type="file"][${ir}]`).concat(t)},findComponentNodeList(r,e){return this.filterWithinSameLiveView(this.all(r,`[${rr}="${e}"]`),r)},isPhxDestroyed(r){return!!(r.id&&ui.private(r,"destroyed"))},wantsNewTab(r){let e=r.ctrlKey||r.shiftKey||r.metaKey||r.button&&r.button===1,t=r.target instanceof HTMLAnchorElement&&r.target.hasAttribute("download"),i=r.target.hasAttribute("target")&&r.target.getAttribute("target").toLowerCase()==="_blank",n=r.target.hasAttribute("target")&&!r.target.getAttribute("target").startsWith("_");return e||i||t||n},isUnloadableFormSubmit(r){return r.target&&r.target.getAttribute("method")==="dialog"||r.submitter&&r.submitter.getAttribute("formmethod")==="dialog"?!1:!r.defaultPrevented&&!this.wantsNewTab(r)},isNewPageClick(r,e){let t=r.target instanceof HTMLAnchorElement?r.target.getAttribute("href"):null,i;if(r.defaultPrevented||t===null||this.wantsNewTab(r)||t.startsWith("mailto:")||t.startsWith("tel:")||r.target.isContentEditable)return!1;try{i=new URL(t)}catch{try{i=new URL(t,e)}catch{return!0}}return i.host===e.host&&i.protocol===e.protocol&&i.pathname===e.pathname&&i.search===e.search?i.hash===""&&!i.href.endsWith("#"):i.protocol.startsWith("http")},markPhxChildDestroyed(r){this.isPhxChild(r)&&r.setAttribute(zt,""),this.putPrivate(r,"destroyed",!0)},findPhxChildrenInFragment(r,e){let t=document.createElement("template");return t.innerHTML=r,this.findPhxChildren(t.content,e)},isIgnored(r,e){return(r.getAttribute(e)||r.getAttribute("data-phx-update"))==="ignore"},isPhxUpdate(r,e,t){return r.getAttribute&&t.indexOf(r.getAttribute(e))>=0},findPhxSticky(r){return this.all(r,`[${Lh}]`)},findPhxChildren(r,e){return this.all(r,`${hi}[${di}="${e}"]`)},findExistingParentCIDs(r,e){let t=new Set,i=new Set;return e.forEach(n=>{this.filterWithinSameLiveView(this.all(r,`[${rr}="${n}"]`),r).forEach(s=>{t.add(n),this.all(s,`[${rr}]`).map(o=>parseInt(o.getAttribute(rr))).forEach(o=>i.add(o))})}),i.forEach(n=>t.delete(n)),t},filterWithinSameLiveView(r,e){return e.querySelector(hi)?r.filter(t=>this.withinSameLiveView(t,e)):r},withinSameLiveView(r,e){for(;r=r.parentNode;){if(r.isSameNode(e))return!0;if(r.getAttribute(zt)!==null)return!1}},private(r,e){return r[Ht]&&r[Ht][e]},deletePrivate(r,e){r[Ht]&&delete r[Ht][e]},putPrivate(r,e,t){r[Ht]||(r[Ht]={}),r[Ht][e]=t},updatePrivate(r,e,t,i){let n=this.private(r,e);n===void 0?this.putPrivate(r,e,i(t)):this.putPrivate(r,e,i(n))},syncPendingAttrs(r,e){r.hasAttribute(_t)&&(tf.forEach(t=>{r.classList.contains(t)&&e.classList.add(t)}),Mh.filter(t=>r.hasAttribute(t)).forEach(t=>{e.setAttribute(t,r.getAttribute(t))}))},copyPrivates(r,e){e[Ht]&&(r[Ht]=e[Ht])},putTitle(r){let e=document.querySelector("title");if(e){let{prefix:t,suffix:i,default:n}=e.dataset,s=typeof r!="string"||r.trim()==="";if(s&&typeof n!="string")return;let o=s?n:r;document.title=`${t||""}${o||""}${i||""}`}else document.title=r},debounce(r,e,t,i,n,s,o,a){let l=r.getAttribute(t),c=r.getAttribute(n);l===""&&(l=i),c===""&&(c=s);let f=l||c;switch(f){case null:return a();case"blur":this.once(r,"debounce-blur")&&r.addEventListener("blur",()=>{o()&&a()});return;default:let m=parseInt(f),y=()=>c?this.deletePrivate(r,ns):a(),v=this.incCycle(r,is,y);if(isNaN(m))return Qe(`invalid throttle/debounce value: ${f}`);if(c){let x=!1;if(e.type==="keydown"){let S=this.private(r,Ih);this.putPrivate(r,Ih,e.key),x=S!==e.key}if(!x&&this.private(r,ns))return!1;{a();let S=setTimeout(()=>{o()&&this.triggerCycle(r,is)},m);this.putPrivate(r,ns,S)}}else setTimeout(()=>{o()&&this.triggerCycle(r,is,v)},m);let g=r.form;g&&this.once(g,"bind-debounce")&&g.addEventListener("submit",()=>{Array.from(new FormData(g).entries(),([x])=>{let S=g.querySelector(`[name="${x}"]`);this.incCycle(S,is),this.deletePrivate(S,ns)})}),this.once(r,"bind-debounce")&&r.addEventListener("blur",()=>{clearTimeout(this.private(r,ns)),this.triggerCycle(r,is)})}},triggerCycle(r,e,t){let[i,n]=this.private(r,e);t||(t=i),t===i&&(this.incCycle(r,e),n())},once(r,e){return this.private(r,e)===!0?!1:(this.putPrivate(r,e,!0),!0)},incCycle(r,e,t=function(){}){let[i]=this.private(r,e)||[0,t];return i++,this.putPrivate(r,e,[i,t]),i},maintainPrivateHooks(r,e,t,i){r.hasAttribute&&r.hasAttribute("data-phx-hook")&&!e.hasAttribute("data-phx-hook")&&e.setAttribute("data-phx-hook",r.getAttribute("data-phx-hook")),e.hasAttribute&&(e.hasAttribute(t)||e.hasAttribute(i))&&e.setAttribute("data-phx-hook","Phoenix.InfiniteScroll")},putCustomElHook(r,e){r.isConnected?r.setAttribute("data-phx-hook",""):console.error(`
        hook attached to non-connected DOM element
        ensure you are calling createHook within your connectedCallback. ${r.outerHTML}
      `),this.putPrivate(r,"custom-el-hook",e)},getCustomElHook(r){return this.private(r,"custom-el-hook")},isUsedInput(r){return r.nodeType===Node.ELEMENT_NODE&&(this.private(r,Uo)||this.private(r,ds))},resetForm(r){Array.from(r.elements).forEach(e=>{this.deletePrivate(e,Uo),this.deletePrivate(e,ds)})},isPhxChild(r){return r.getAttribute&&r.getAttribute(di)},isPhxSticky(r){return r.getAttribute&&r.getAttribute(Lh)!==null},isChildOfAny(r,e){return!!e.find(t=>t.contains(r))},firstPhxChild(r){return this.isPhxChild(r)?r:this.all(r,`[${di}]`)[0]},dispatchEvent(r,e,t={}){let i=!0;r.nodeName==="INPUT"&&r.type==="file"&&e==="click"&&(i=!1);let o={bubbles:t.bubbles===void 0?i:!!t.bubbles,cancelable:!0,detail:t.detail||{}},a=e==="click"?new MouseEvent("click",o):new CustomEvent(e,o);r.dispatchEvent(a)},cloneNode(r,e){if(typeof e>"u")return r.cloneNode(!0);{let t=r.cloneNode(!1);return t.innerHTML=e,t}},mergeAttrs(r,e,t={}){let i=new Set(t.exclude||[]),n=t.isIgnored,s=e.attributes;for(let a=s.length-1;a>=0;a--){let l=s[a].name;if(i.has(l))l==="value"&&r.value===e.value&&r.setAttribute("value",e.getAttribute(l));else{let c=e.getAttribute(l);r.getAttribute(l)!==c&&(!n||n&&l.startsWith("data-"))&&r.setAttribute(l,c)}}let o=r.attributes;for(let a=o.length-1;a>=0;a--){let l=o[a].name;n?l.startsWith("data-")&&!e.hasAttribute(l)&&!Mh.includes(l)&&r.removeAttribute(l):e.hasAttribute(l)||r.removeAttribute(l)}},mergeFocusedInput(r,e){r instanceof HTMLSelectElement||ui.mergeAttrs(r,e,{exclude:["value"]}),e.readOnly?r.setAttribute("readonly",!0):r.removeAttribute("readonly")},hasSelectionRange(r){return r.setSelectionRange&&(r.type==="text"||r.type==="textarea")},restoreFocus(r,e,t){if(r instanceof HTMLSelectElement&&r.focus(),!ui.isTextualInput(r))return;r.matches(":focus")||r.focus(),this.hasSelectionRange(r)&&r.setSelectionRange(e,t)},isFormInput(r){return/^(?:input|select|textarea)$/i.test(r.tagName)&&r.type!=="button"},syncAttrsToProps(r){r instanceof HTMLInputElement&&of.indexOf(r.type.toLocaleLowerCase())>=0&&(r.checked=r.getAttribute("checked")!==null)},isTextualInput(r){return gy.indexOf(r.type)>=0},isNowTriggerFormExternal(r,e){return r.getAttribute&&r.getAttribute(e)!==null},cleanChildNodes(r,e){if(ui.isPhxUpdate(r,e,["append","prepend"])){let t=[];r.childNodes.forEach(i=>{i.id||(!(i.nodeType===Node.TEXT_NODE&&i.nodeValue.trim()==="")&&i.nodeType!==Node.COMMENT_NODE&&Qe(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(i.outerHTML||i.nodeValue).trim()}"

`),t.push(i))}),t.forEach(i=>i.remove())}},replaceRootContainer(r,e,t){let i=new Set(["id",zt,ci,vu,Lr]);if(r.tagName.toLowerCase()===e.toLowerCase())return Array.from(r.attributes).filter(n=>!i.has(n.name.toLowerCase())).forEach(n=>r.removeAttribute(n.name)),Object.keys(t).filter(n=>!i.has(n.toLowerCase())).forEach(n=>r.setAttribute(n,t[n])),r;{let n=document.createElement(e);return Object.keys(t).forEach(s=>n.setAttribute(s,t[s])),i.forEach(s=>n.setAttribute(s,r.getAttribute(s))),n.innerHTML=r.innerHTML,r.replaceWith(n),n}},getSticky(r,e,t){let i=(ui.private(r,"sticky")||[]).find(([n])=>e===n);if(i){let[n,s,o]=i;return o}else return typeof t=="function"?t():t},deleteSticky(r,e){this.updatePrivate(r,"sticky",[],t=>t.filter(([i,n])=>i!==e))},putSticky(r,e,t){let i=t(r);this.updatePrivate(r,"sticky",[],n=>{let s=n.findIndex(([o])=>e===o);return s>=0?n[s]=[e,t,i]:n.push([e,t,i]),n})},applyStickyOperations(r){let e=ui.private(r,"sticky");e&&e.forEach(([t,i,n])=>this.putSticky(r,t,i))}},k=ui,os=class{static isActive(r,e){let t=e._phxRef===void 0,n=r.getAttribute(hu).split(",").indexOf(Ne.genFileRef(e))>=0;return e.size>0&&(t||n)}static isPreflighted(r,e){return r.getAttribute(bu).split(",").indexOf(Ne.genFileRef(e))>=0&&this.isActive(r,e)}static isPreflightInProgress(r){return r._preflightInProgress===!0}static markPreflightInProgress(r){r._preflightInProgress=!0}constructor(r,e,t,i){this.ref=Ne.genFileRef(e),this.fileEl=r,this.file=e,this.view=t,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._lastProgressSent=-1,this._onDone=function(){},this._onElUpdated=this.onElUpdated.bind(this),this.fileEl.addEventListener(qo,this._onElUpdated),this.autoUpload=i}metadata(){return this.meta}progress(r){this._progress=Math.floor(r),this._progress>this._lastProgressSent&&(this._progress>=100?(this._progress=100,this._lastProgressSent=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,()=>{Ne.untrackFile(this.fileEl,this.file),this._onDone()})):(this._lastProgressSent=this._progress,this.view.pushFileProgress(this.fileEl,this.ref,this._progress)))}isCancelled(){return this._isCancelled}cancel(){this.file._preflightInProgress=!1,this._isCancelled=!0,this._isDone=!0,this._onDone()}isDone(){return this._isDone}error(r="failed"){this.fileEl.removeEventListener(qo,this._onElUpdated),this.view.pushFileProgress(this.fileEl,this.ref,{error:r}),this.isAutoUpload()||Ne.clearFiles(this.fileEl)}isAutoUpload(){return this.autoUpload}onDone(r){this._onDone=()=>{this.fileEl.removeEventListener(qo,this._onElUpdated),r()}}onElUpdated(){this.fileEl.getAttribute(hu).split(",").indexOf(this.ref)===-1&&(Ne.untrackFile(this.fileEl,this.file),this.cancel())}toPreflightPayload(){return{last_modified:this.file.lastModified,name:this.file.name,relative_path:this.file.webkitRelativePath,size:this.file.size,type:this.file.type,ref:this.ref,meta:typeof this.file.meta=="function"?this.file.meta():void 0}}uploader(r){if(this.meta.uploader){let e=r[this.meta.uploader]||Qe(`no uploader configured for ${this.meta.uploader}`);return{name:this.meta.uploader,callback:e}}else return{name:"channel",callback:Ny}}zipPostFlight(r){this.meta=r.entries[this.ref],this.meta||Qe(`no preflight upload response returned with ref ${this.ref}`,{input:this.fileEl,response:r})}},Py=0,Ne=class gu{static genFileRef(e){let t=e._phxRef;return t!==void 0?t:(e._phxRef=(Py++).toString(),e._phxRef)}static getEntryDataURL(e,t,i){let n=this.activeFiles(e).find(s=>this.genFileRef(s)===t);i(URL.createObjectURL(n))}static hasUploadsInProgress(e){let t=0;return k.findUploadInputs(e).forEach(i=>{i.getAttribute(bu)!==i.getAttribute(py)&&t++}),t>0}static serializeUploads(e){let t=this.activeFiles(e),i={};return t.forEach(n=>{let s={path:e.name},o=e.getAttribute(ir);i[o]=i[o]||[],s.ref=this.genFileRef(n),s.last_modified=n.lastModified,s.name=n.name||s.ref,s.relative_path=n.webkitRelativePath,s.type=n.type,s.size=n.size,typeof n.meta=="function"&&(s.meta=n.meta()),i[o].push(s)}),i}static clearFiles(e){e.value=null,e.removeAttribute(ir),k.putPrivate(e,"files",[])}static untrackFile(e,t){k.putPrivate(e,"files",k.private(e,"files").filter(i=>!Object.is(i,t)))}static trackFiles(e,t,i){if(e.getAttribute("multiple")!==null){let n=t.filter(s=>!this.activeFiles(e).find(o=>Object.is(o,s)));k.updatePrivate(e,"files",[],s=>s.concat(n)),e.value=null}else i&&i.files.length>0&&(e.files=i.files),k.putPrivate(e,"files",t)}static activeFileInputs(e){let t=k.findUploadInputs(e);return Array.from(t).filter(i=>i.files&&this.activeFiles(i).length>0)}static activeFiles(e){return(k.private(e,"files")||[]).filter(t=>os.isActive(e,t))}static inputsAwaitingPreflight(e){let t=k.findUploadInputs(e);return Array.from(t).filter(i=>this.filesAwaitingPreflight(i).length>0)}static filesAwaitingPreflight(e){return this.activeFiles(e).filter(t=>!os.isPreflighted(e,t)&&!os.isPreflightInProgress(t))}static markPreflightInProgress(e){e.forEach(t=>os.markPreflightInProgress(t.file))}constructor(e,t,i){this.autoUpload=k.isAutoUpload(e),this.view=t,this.onComplete=i,this._entries=Array.from(gu.filesAwaitingPreflight(e)||[]).map(n=>new os(e,n,t,this.autoUpload)),gu.markPreflightInProgress(this._entries),this.numEntriesInProgress=this._entries.length}isAutoUpload(){return this.autoUpload}entries(){return this._entries}initAdapterUpload(e,t,i){this._entries=this._entries.map(s=>(s.isCancelled()?(this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()):(s.zipPostFlight(e),s.onDone(()=>{this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()})),s));let n=this._entries.reduce((s,o)=>{if(!o.meta)return s;let{name:a,callback:l}=o.uploader(i.uploaders);return s[a]=s[a]||{callback:l,entries:[]},s[a].entries.push(o),s},{});for(let s in n){let{callback:o,entries:a}=n[s];o(a,t,e,i)}}},Dy={anyOf(r,e){return e.find(t=>r instanceof t)},isFocusable(r,e){return r instanceof HTMLAnchorElement&&r.rel!=="ignore"||r instanceof HTMLAreaElement&&r.href!==void 0||!r.disabled&&this.anyOf(r,[HTMLInputElement,HTMLSelectElement,HTMLTextAreaElement,HTMLButtonElement])||r instanceof HTMLIFrameElement||r.tabIndex>0||!e&&r.getAttribute("tabindex")!==null&&r.getAttribute("aria-hidden")!=="true"},attemptFocus(r,e){if(this.isFocusable(r,e))try{r.focus()}catch{}return!!document.activeElement&&document.activeElement.isSameNode(r)},focusFirstInteractive(r){let e=r.firstElementChild;for(;e;){if(this.attemptFocus(e,!0)||this.focusFirstInteractive(e,!0))return!0;e=e.nextElementSibling}},focusFirst(r){let e=r.firstElementChild;for(;e;){if(this.attemptFocus(e)||this.focusFirst(e))return!0;e=e.nextElementSibling}},focusLast(r){let e=r.lastElementChild;for(;e;){if(this.attemptFocus(e)||this.focusLast(e))return!0;e=e.previousElementSibling}}},Gi=Dy,af={LiveFileUpload:{activeRefs(){return this.el.getAttribute(hu)},preflightedRefs(){return this.el.getAttribute(bu)},mounted(){this.preflightedWas=this.preflightedRefs()},updated(){let r=this.preflightedRefs();this.preflightedWas!==r&&(this.preflightedWas=r,r===""&&this.__view().cancelSubmit(this.el.form)),this.activeRefs()===""&&(this.el.value=null),this.el.dispatchEvent(new CustomEvent(qo))}},LiveImgPreview:{mounted(){this.ref=this.el.getAttribute("data-phx-entry-ref"),this.inputEl=document.getElementById(this.el.getAttribute(ir)),Ne.getEntryDataURL(this.inputEl,this.ref,r=>{this.url=r,this.el.src=r})},destroyed(){URL.revokeObjectURL(this.url)}},FocusWrap:{mounted(){this.focusStart=this.el.firstElementChild,this.focusEnd=this.el.lastElementChild,this.focusStart.addEventListener("focus",()=>Gi.focusLast(this.el)),this.focusEnd.addEventListener("focus",()=>Gi.focusFirst(this.el)),this.el.addEventListener("phx:show-end",()=>this.el.focus()),window.getComputedStyle(this.el).display!=="none"&&Gi.focusFirst(this.el)}}},lf=r=>["HTML","BODY"].indexOf(r.nodeName.toUpperCase())>=0?null:["scroll","auto"].indexOf(getComputedStyle(r).overflowY)>=0?r:lf(r.parentElement),Uh=r=>r?r.scrollTop:document.documentElement.scrollTop||document.body.scrollTop,yu=r=>r?r.getBoundingClientRect().bottom:window.innerHeight||document.documentElement.clientHeight,wu=r=>r?r.getBoundingClientRect().top:0,Iy=(r,e)=>{let t=r.getBoundingClientRect();return Math.ceil(t.top)>=wu(e)&&Math.ceil(t.left)>=0&&Math.floor(t.top)<=yu(e)},My=(r,e)=>{let t=r.getBoundingClientRect();return Math.ceil(t.bottom)>=wu(e)&&Math.ceil(t.left)>=0&&Math.floor(t.bottom)<=yu(e)},zh=(r,e)=>{let t=r.getBoundingClientRect();return Math.ceil(t.top)>=wu(e)&&Math.ceil(t.left)>=0&&Math.floor(t.top)<=yu(e)};af.InfiniteScroll={mounted(){this.scrollContainer=lf(this.el);let r=Uh(this.scrollContainer),e=!1,t=500,i=null,n=this.throttle(t,(a,l)=>{i=()=>!0,this.liveSocket.execJSHookPush(this.el,a,{id:l.id,_overran:!0},()=>{i=null})}),s=this.throttle(t,(a,l)=>{i=()=>l.scrollIntoView({block:"start"}),this.liveSocket.execJSHookPush(this.el,a,{id:l.id},()=>{i=null,window.requestAnimationFrame(()=>{zh(l,this.scrollContainer)||l.scrollIntoView({block:"start"})})})}),o=this.throttle(t,(a,l)=>{i=()=>l.scrollIntoView({block:"end"}),this.liveSocket.execJSHookPush(this.el,a,{id:l.id},()=>{i=null,window.requestAnimationFrame(()=>{zh(l,this.scrollContainer)||l.scrollIntoView({block:"end"})})})});this.onScroll=a=>{let l=Uh(this.scrollContainer);if(i)return r=l,i();let c=this.el.getBoundingClientRect(),f=this.el.getAttribute(this.liveSocket.binding("viewport-top")),m=this.el.getAttribute(this.liveSocket.binding("viewport-bottom")),y=this.el.lastElementChild,v=this.el.firstElementChild,g=l<r,x=l>r;g&&f&&!e&&c.top>=0?(e=!0,n(f,v)):x&&e&&c.top<=0&&(e=!1),f&&g&&Iy(v,this.scrollContainer)?s(f,v):m&&x&&My(y,this.scrollContainer)&&o(m,y),r=l},this.scrollContainer?this.scrollContainer.addEventListener("scroll",this.onScroll):window.addEventListener("scroll",this.onScroll)},destroyed(){this.scrollContainer?this.scrollContainer.removeEventListener("scroll",this.onScroll):window.removeEventListener("scroll",this.onScroll)},throttle(r,e){let t=0,i;return(...n)=>{let s=Date.now(),o=r-(s-t);o<=0||o>r?(i&&(clearTimeout(i),i=null),t=s,e(...n)):i||(i=setTimeout(()=>{t=Date.now(),i=null,e(...n)},o))}}};var By=af,Fy=class{constructor(r){this.el=r,this.loadingRef=r.hasAttribute(Ki)?parseInt(r.getAttribute(Ki),10):null,this.lockRef=r.hasAttribute(pt)?parseInt(r.getAttribute(pt),10):null}maybeUndo(r,e,t){this.isWithin(r)&&(this.undoLocks(r,e,t),this.undoLoading(r,e),this.isFullyResolvedBy(r)&&this.el.removeAttribute(_t))}isWithin(r){return!(this.loadingRef!==null&&this.loadingRef>r&&this.lockRef!==null&&this.lockRef>r)}undoLocks(r,e,t){if(!this.isLockUndoneBy(r))return;let i=k.private(this.el,pt);i&&(t(i),k.deletePrivate(this.el,pt)),this.el.removeAttribute(pt);let n={detail:{ref:r,event:e},bubbles:!0,cancelable:!1};this.el.dispatchEvent(new CustomEvent(`phx:undo-lock:${this.lockRef}`,n))}undoLoading(r,e){if(!this.isLoadingUndoneBy(r)){this.canUndoLoading(r)&&this.el.classList.contains("phx-submit-loading")&&this.el.classList.remove("phx-change-loading");return}if(this.canUndoLoading(r)){this.el.removeAttribute(Ki);let t=this.el.getAttribute(Wi),i=this.el.getAttribute(mu);i!==null&&(this.el.readOnly=i==="true",this.el.removeAttribute(mu)),t!==null&&(this.el.disabled=t==="true",this.el.removeAttribute(Wi));let n=this.el.getAttribute(zo);n!==null&&(this.el.innerText=n,this.el.removeAttribute(zo));let s={detail:{ref:r,event:e},bubbles:!0,cancelable:!1};this.el.dispatchEvent(new CustomEvent(`phx:undo-loading:${this.loadingRef}`,s))}tf.forEach(t=>{(t!=="phx-submit-loading"||this.canUndoLoading(r))&&k.removeClass(this.el,t)})}isLoadingUndoneBy(r){return this.loadingRef===null?!1:this.loadingRef<=r}isLockUndoneBy(r){return this.lockRef===null?!1:this.lockRef<=r}isFullyResolvedBy(r){return(this.loadingRef===null||this.loadingRef<=r)&&(this.lockRef===null||this.lockRef<=r)}canUndoLoading(r){return this.lockRef===null||this.lockRef<=r}},jy=class{constructor(r,e,t){let i=new Set,n=new Set([...e.children].map(o=>o.id)),s=[];Array.from(r.children).forEach(o=>{if(o.id&&(i.add(o.id),n.has(o.id))){let a=o.previousElementSibling&&o.previousElementSibling.id;s.push({elementId:o.id,previousElementId:a})}}),this.containerId=e.id,this.updateType=t,this.elementsToModify=s,this.elementIdsToAdd=[...n].filter(o=>!i.has(o))}perform(){let r=k.byId(this.containerId);this.elementsToModify.forEach(e=>{e.previousElementId?Tr(document.getElementById(e.previousElementId),t=>{Tr(document.getElementById(e.elementId),i=>{i.previousElementSibling&&i.previousElementSibling.id==t.id||t.insertAdjacentElement("afterend",i)})}):Tr(document.getElementById(e.elementId),t=>{t.previousElementSibling==null||r.insertAdjacentElement("afterbegin",t)})}),this.updateType=="prepend"&&this.elementIdsToAdd.reverse().forEach(e=>{Tr(document.getElementById(e),t=>r.insertAdjacentElement("afterbegin",t))})}},$h=11;function qy(r,e){var t=e.attributes,i,n,s,o,a;if(!(e.nodeType===$h||r.nodeType===$h)){for(var l=t.length-1;l>=0;l--)i=t[l],n=i.name,s=i.namespaceURI,o=i.value,s?(n=i.localName||n,a=r.getAttributeNS(s,n),a!==o&&(i.prefix==="xmlns"&&(n=i.name),r.setAttributeNS(s,n,o))):(a=r.getAttribute(n),a!==o&&r.setAttribute(n,o));for(var c=r.attributes,f=c.length-1;f>=0;f--)i=c[f],n=i.name,s=i.namespaceURI,s?(n=i.localName||n,e.hasAttributeNS(s,n)||r.removeAttributeNS(s,n)):e.hasAttribute(n)||r.removeAttribute(n)}}var Mo,Hy="http://www.w3.org/1999/xhtml",et=typeof document>"u"?void 0:document,Uy=!!et&&"content"in et.createElement("template"),zy=!!et&&et.createRange&&"createContextualFragment"in et.createRange();function $y(r){var e=et.createElement("template");return e.innerHTML=r,e.content.childNodes[0]}function Vy(r){Mo||(Mo=et.createRange(),Mo.selectNode(et.body));var e=Mo.createContextualFragment(r);return e.childNodes[0]}function Wy(r){var e=et.createElement("body");return e.innerHTML=r,e.childNodes[0]}function Ky(r){return r=r.trim(),Uy?$y(r):zy?Vy(r):Wy(r)}function Bo(r,e){var t=r.nodeName,i=e.nodeName,n,s;return t===i?!0:(n=t.charCodeAt(0),s=i.charCodeAt(0),n<=90&&s>=97?t===i.toUpperCase():s<=90&&n>=97?i===t.toUpperCase():!1)}function Gy(r,e){return!e||e===Hy?et.createElement(r):et.createElementNS(e,r)}function Jy(r,e){for(var t=r.firstChild;t;){var i=t.nextSibling;e.appendChild(t),t=i}return e}function cu(r,e,t){r[t]!==e[t]&&(r[t]=e[t],r[t]?r.setAttribute(t,""):r.removeAttribute(t))}var Vh={OPTION:function(r,e){var t=r.parentNode;if(t){var i=t.nodeName.toUpperCase();i==="OPTGROUP"&&(t=t.parentNode,i=t&&t.nodeName.toUpperCase()),i==="SELECT"&&!t.hasAttribute("multiple")&&(r.hasAttribute("selected")&&!e.selected&&(r.setAttribute("selected","selected"),r.removeAttribute("selected")),t.selectedIndex=-1)}cu(r,e,"selected")},INPUT:function(r,e){cu(r,e,"checked"),cu(r,e,"disabled"),r.value!==e.value&&(r.value=e.value),e.hasAttribute("value")||r.removeAttribute("value")},TEXTAREA:function(r,e){var t=e.value;r.value!==t&&(r.value=t);var i=r.firstChild;if(i){var n=i.nodeValue;if(n==t||!t&&n==r.placeholder)return;i.nodeValue=t}},SELECT:function(r,e){if(!e.hasAttribute("multiple")){for(var t=-1,i=0,n=r.firstChild,s,o;n;)if(o=n.nodeName&&n.nodeName.toUpperCase(),o==="OPTGROUP")s=n,n=s.firstChild;else{if(o==="OPTION"){if(n.hasAttribute("selected")){t=i;break}i++}n=n.nextSibling,!n&&s&&(n=s.nextSibling,s=null)}r.selectedIndex=t}}},as=1,Wh=11,Kh=3,Gh=8;function Cr(){}function Xy(r){if(r)return r.getAttribute&&r.getAttribute("id")||r.id}function Yy(r){return function(t,i,n){if(n||(n={}),typeof i=="string")if(t.nodeName==="#document"||t.nodeName==="HTML"||t.nodeName==="BODY"){var s=i;i=et.createElement("html"),i.innerHTML=s}else i=Ky(i);else i.nodeType===Wh&&(i=i.firstElementChild);var o=n.getNodeKey||Xy,a=n.onBeforeNodeAdded||Cr,l=n.onNodeAdded||Cr,c=n.onBeforeElUpdated||Cr,f=n.onElUpdated||Cr,m=n.onBeforeNodeDiscarded||Cr,y=n.onNodeDiscarded||Cr,v=n.onBeforeElChildrenUpdated||Cr,g=n.skipFromChildren||Cr,x=n.addChild||function(L,D){return L.appendChild(D)},S=n.childrenOnly===!0,T=Object.create(null),I=[];function u(L){I.push(L)}function h(L,D){if(L.nodeType===as)for(var U=L.firstChild;U;){var F=void 0;D&&(F=o(U))?u(F):(y(U),U.firstChild&&h(U,D)),U=U.nextSibling}}function d(L,D,U){m(L)!==!1&&(D&&D.removeChild(L),y(L),h(L,U))}function p(L){if(L.nodeType===as||L.nodeType===Wh)for(var D=L.firstChild;D;){var U=o(D);U&&(T[U]=D),p(D),D=D.nextSibling}}p(t);function b(L){l(L);for(var D=L.firstChild;D;){var U=D.nextSibling,F=o(D);if(F){var z=T[F];z&&Bo(D,z)?(D.parentNode.replaceChild(z,D),w(z,D)):b(D)}else b(D);D=U}}function E(L,D,U){for(;D;){var F=D.nextSibling;(U=o(D))?u(U):d(D,L,!0),D=F}}function w(L,D,U){var F=o(D);if(F&&delete T[F],!U){var z=c(L,D);if(z===!1||(z instanceof HTMLElement&&(L=z,p(L)),r(L,D),f(L),v(L,D)===!1))return}L.nodeName!=="TEXTAREA"?_(L,D):Vh.TEXTAREA(L,D)}function _(L,D){var U=g(L,D),F=D.firstChild,z=L.firstChild,ae,ve,se,Ee,le;e:for(;F;){for(Ee=F.nextSibling,ae=o(F);!U&&z;){if(se=z.nextSibling,F.isSameNode&&F.isSameNode(z)){F=Ee,z=se;continue e}ve=o(z);var Re=z.nodeType,xt=void 0;if(Re===F.nodeType&&(Re===as?(ae?ae!==ve&&((le=T[ae])?se===le?xt=!1:(L.insertBefore(le,z),ve?u(ve):d(z,L,!0),z=le,ve=o(z)):xt=!1):ve&&(xt=!1),xt=xt!==!1&&Bo(z,F),xt&&w(z,F)):(Re===Kh||Re==Gh)&&(xt=!0,z.nodeValue!==F.nodeValue&&(z.nodeValue=F.nodeValue))),xt){F=Ee,z=se;continue e}ve?u(ve):d(z,L,!0),z=se}if(ae&&(le=T[ae])&&Bo(le,F))U||x(L,le),w(le,F);else{var oi=a(F);oi!==!1&&(oi&&(F=oi),F.actualize&&(F=F.actualize(L.ownerDocument||et)),x(L,F),b(F))}F=Ee,z=se}E(L,z,ve);var Xn=Vh[L.nodeName];Xn&&Xn(L,D)}var R=t,P=R.nodeType,O=i.nodeType;if(!S){if(P===as)O===as?Bo(t,i)||(y(t),R=Jy(t,Gy(i.nodeName,i.namespaceURI))):R=i;else if(P===Kh||P===Gh){if(O===P)return R.nodeValue!==i.nodeValue&&(R.nodeValue=i.nodeValue),R;R=i}}if(R===i)y(t);else{if(i.isSameNode&&i.isSameNode(R))return;if(w(R,i,S),I)for(var M=0,A=I.length;M<A;M++){var N=T[I[M]];N&&d(N,N.parentNode,!1)}}return!S&&R!==t&&t.parentNode&&(R.actualize&&(R=R.actualize(t.ownerDocument||et)),t.parentNode.replaceChild(R,t)),R}}var Zy=Yy(qy),Jh=Zy,Fo=class{static patchWithClonedTree(r,e,t){let i=t.getActiveElement(),{selectionStart:n,selectionEnd:s}=i&&k.hasSelectionRange(i)?i:{},o=t.binding(us);Jh(r,e,{childrenOnly:!1,onBeforeElUpdated:(a,l)=>{if(k.syncPendingAttrs(a,l),!r.isSameNode(a)&&a.hasAttribute(pt)||k.isIgnored(a,o))return!1;if(i&&i.isSameNode(a)&&k.isFormInput(a))return k.mergeFocusedInput(a,l),!1}}),t.silenceEvents(()=>k.restoreFocus(i,n,s))}constructor(r,e,t,i,n,s){this.view=r,this.liveSocket=r.liveSocket,this.container=e,this.id=t,this.rootID=r.root.id,this.html=i,this.streams=n,this.streamInserts={},this.streamComponentRestore={},this.targetCID=s,this.cidPatch=tr(this.targetCID),this.pendingRemoves=[],this.phxRemove=this.liveSocket.binding("remove"),this.targetContainer=this.isCIDPatch()?this.targetCIDContainer(i):e,this.callbacks={beforeadded:[],beforeupdated:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[],aftertransitionsDiscarded:[]}}before(r,e){this.callbacks[`before${r}`].push(e)}after(r,e){this.callbacks[`after${r}`].push(e)}trackBefore(r,...e){this.callbacks[`before${r}`].forEach(t=>t(...e))}trackAfter(r,...e){this.callbacks[`after${r}`].forEach(t=>t(...e))}markPrunableContentForRemoval(){let r=this.liveSocket.binding(us);k.all(this.container,`[${r}=append] > *, [${r}=prepend] > *`,e=>{e.setAttribute(Sh,"")})}perform(r){let{view:e,liveSocket:t,html:i,container:n,targetContainer:s}=this;if(this.isCIDPatch()&&!s)return;let o=t.getActiveElement(),{selectionStart:a,selectionEnd:l}=o&&k.hasSelectionRange(o)?o:{},c=t.binding(us),f=t.binding(fu),m=t.binding(pu),y=t.binding(my),v=[],g=[],x=[],S=null;function T(I,u,h=!1){let d={childrenOnly:I.getAttribute(rr)===null&&!h,getNodeKey:p=>k.isPhxDestroyed(p)?null:r?p.id:p.id||p.getAttribute&&p.getAttribute(sf),skipFromChildren:p=>p.getAttribute(c)===ou,addChild:(p,b)=>{let{ref:E,streamAt:w}=this.getStreamInsert(b);if(E===void 0)return p.appendChild(b);if(this.setStreamRef(b,E),w===0)p.insertAdjacentElement("afterbegin",b);else if(w===-1){let _=p.lastElementChild;if(_&&!_.hasAttribute(rs)){let R=Array.from(p.children).find(P=>!P.hasAttribute(rs));p.insertBefore(b,R)}else p.appendChild(b)}else if(w>0){let _=Array.from(p.children)[w];p.insertBefore(b,_)}},onBeforeNodeAdded:p=>{k.maintainPrivateHooks(p,p,f,m),this.trackBefore("added",p);let b=p;return this.streamComponentRestore[p.id]&&(b=this.streamComponentRestore[p.id],delete this.streamComponentRestore[p.id],T.call(this,b,p,!0)),b},onNodeAdded:p=>{p.getAttribute&&this.maybeReOrderStream(p,!0),p instanceof HTMLImageElement&&p.srcset?p.srcset=p.srcset:p instanceof HTMLVideoElement&&p.autoplay&&p.play(),k.isNowTriggerFormExternal(p,y)&&(S=p),(k.isPhxChild(p)&&e.ownsElement(p)||k.isPhxSticky(p)&&e.ownsElement(p.parentNode))&&this.trackAfter("phxChildAdded",p),v.push(p)},onNodeDiscarded:p=>this.onNodeDiscarded(p),onBeforeNodeDiscarded:p=>p.getAttribute&&p.getAttribute(Sh)!==null?!0:!(p.parentElement!==null&&p.id&&k.isPhxUpdate(p.parentElement,c,[ou,"append","prepend"])||this.maybePendingRemove(p)||this.skipCIDSibling(p)),onElUpdated:p=>{k.isNowTriggerFormExternal(p,y)&&(S=p),g.push(p),this.maybeReOrderStream(p,!1)},onBeforeElUpdated:(p,b)=>{if(p.id&&p.isSameNode(I)&&p.id!==b.id)return d.onNodeDiscarded(p),p.replaceWith(b),d.onNodeAdded(b);if(k.syncPendingAttrs(p,b),k.maintainPrivateHooks(p,b,f,m),k.cleanChildNodes(b,c),this.skipCIDSibling(b))return this.maybeReOrderStream(p),!1;if(k.isPhxSticky(p))return[zt,ci,Lr].map(_=>[_,p.getAttribute(_),b.getAttribute(_)]).forEach(([_,R,P])=>{P&&R!==P&&p.setAttribute(_,P)}),!1;if(k.isIgnored(p,c)||p.form&&p.form.isSameNode(S))return this.trackBefore("updated",p,b),k.mergeAttrs(p,b,{isIgnored:k.isIgnored(p,c)}),g.push(p),k.applyStickyOperations(p),!1;if(p.type==="number"&&p.validity&&p.validity.badInput)return!1;let E=o&&p.isSameNode(o)&&k.isFormInput(p),w=E&&this.isChangedSelect(p,b);if(p.hasAttribute(_t)){k.isUploadInput(p)&&(k.mergeAttrs(p,b,{isIgnored:!0}),this.trackBefore("updated",p,b),g.push(p)),k.applyStickyOperations(p);let R=p.hasAttribute(pt)?k.private(p,pt)||p.cloneNode(!0):null;R&&(k.putPrivate(p,pt,R),E||(p=R))}if(k.isPhxChild(b)){let _=p.getAttribute(zt);return k.mergeAttrs(p,b,{exclude:[ci]}),_!==""&&p.setAttribute(zt,_),p.setAttribute(Lr,this.rootID),k.applyStickyOperations(p),!1}return k.copyPrivates(b,p),E&&p.type!=="hidden"&&!w?(this.trackBefore("updated",p,b),k.mergeFocusedInput(p,b),k.syncAttrsToProps(p),g.push(p),k.applyStickyOperations(p),!1):(w&&p.blur(),k.isPhxUpdate(b,c,["append","prepend"])&&x.push(new jy(p,b,b.getAttribute(c))),k.syncAttrsToProps(b),k.applyStickyOperations(b),this.trackBefore("updated",p,b),p)}};Jh(I,u,d)}return this.trackBefore("added",n),this.trackBefore("updated",n,n),t.time("morphdom",()=>{this.streams.forEach(([I,u,h,d])=>{u.forEach(([p,b,E])=>{this.streamInserts[p]={ref:I,streamAt:b,limit:E,reset:d}}),d!==void 0&&k.all(n,`[${rs}="${I}"]`,p=>{this.removeStreamChildElement(p)}),h.forEach(p=>{let b=n.querySelector(`[id="${p}"]`);b&&this.removeStreamChildElement(b)})}),r&&k.all(this.container,`[${c}=${ou}]`,I=>{this.liveSocket.owner(I,u=>{u===this.view&&Array.from(I.children).forEach(h=>{this.removeStreamChildElement(h)})})}),T.call(this,s,i)}),t.isDebugEnabled()&&(Ty(),Array.from(document.querySelectorAll("input[name=id]")).forEach(I=>{I.form&&console.error(`Detected an input with name="id" inside a form! This will cause problems when patching the DOM.
`,I)})),x.length>0&&t.time("post-morph append/prepend restoration",()=>{x.forEach(I=>I.perform())}),t.silenceEvents(()=>k.restoreFocus(o,a,l)),k.dispatchEvent(document,"phx:update"),v.forEach(I=>this.trackAfter("added",I)),g.forEach(I=>this.trackAfter("updated",I)),this.transitionPendingRemoves(),S&&(t.unload(),Object.getPrototypeOf(S).submit.call(S)),!0}onNodeDiscarded(r){(k.isPhxChild(r)||k.isPhxSticky(r))&&this.liveSocket.destroyViewByEl(r),this.trackAfter("discarded",r)}maybePendingRemove(r){return r.getAttribute&&r.getAttribute(this.phxRemove)!==null?(this.pendingRemoves.push(r),!0):!1}removeStreamChildElement(r){this.streamInserts[r.id]?(this.streamComponentRestore[r.id]=r,r.remove()):this.maybePendingRemove(r)||(r.remove(),this.onNodeDiscarded(r))}getStreamInsert(r){return(r.id?this.streamInserts[r.id]:{})||{}}setStreamRef(r,e){k.putSticky(r,rs,t=>t.setAttribute(rs,e))}maybeReOrderStream(r,e){let{ref:t,streamAt:i,reset:n}=this.getStreamInsert(r);if(i!==void 0&&(this.setStreamRef(r,t),!(!n&&!e)&&r.parentElement)){if(i===0)r.parentElement.insertBefore(r,r.parentElement.firstElementChild);else if(i>0){let s=Array.from(r.parentElement.children),o=s.indexOf(r);if(i>=s.length-1)r.parentElement.appendChild(r);else{let a=s[i];o>i?r.parentElement.insertBefore(r,a):r.parentElement.insertBefore(r,a.nextElementSibling)}}this.maybeLimitStream(r)}}maybeLimitStream(r){let{limit:e}=this.getStreamInsert(r),t=e!==null&&Array.from(r.parentElement.children);e&&e<0&&t.length>e*-1?t.slice(0,t.length+e).forEach(i=>this.removeStreamChildElement(i)):e&&e>=0&&t.length>e&&t.slice(e).forEach(i=>this.removeStreamChildElement(i))}transitionPendingRemoves(){let{pendingRemoves:r,liveSocket:e}=this;r.length>0&&e.transitionRemoves(r,!1,()=>{r.forEach(t=>{let i=k.firstPhxChild(t);i&&e.destroyViewByEl(i),t.remove()}),this.trackAfter("transitionsDiscarded",r)})}isChangedSelect(r,e){return!(r instanceof HTMLSelectElement)||r.multiple?!1:r.options.length!==e.options.length?!0:(e.value=r.value,!r.isEqualNode(e))}isCIDPatch(){return this.cidPatch}skipCIDSibling(r){return r.nodeType===Node.ELEMENT_NODE&&r.hasAttribute(nf)}targetCIDContainer(r){if(!this.isCIDPatch())return;let[e,...t]=k.findComponentNodeList(this.container,this.targetCID);return t.length===0&&k.childNodeLength(r)===1?e:e&&e.parentNode}indexOf(r,e){return Array.from(r.children).indexOf(e)}},Qy=new Set(["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"]),ew=new Set(["'",'"']),Xh=(r,e,t)=>{let i=0,n=!1,s,o,a,l,c,f,m=r.match(/^(\s*(?:<!--.*?-->\s*)*)<([^\s\/>]+)/);if(m===null)throw new Error(`malformed html ${r}`);for(i=m[0].length,s=m[1],a=m[2],l=i,i;i<r.length&&r.charAt(i)!==">";i++)if(r.charAt(i)==="="){let g=r.slice(i-3,i)===" id";i++;let x=r.charAt(i);if(ew.has(x)){let S=i;for(i++,i;i<r.length&&r.charAt(i)!==x;i++);if(g){c=r.slice(S+1,i);break}}}let y=r.length-1;for(n=!1;y>=s.length+a.length;){let g=r.charAt(y);if(n)g==="-"&&r.slice(y-3,y)==="<!-"?(n=!1,y-=4):y-=1;else if(g===">"&&r.slice(y-2,y)==="--")n=!0,y-=3;else{if(g===">")break;y-=1}}o=r.slice(y+1,r.length);let v=Object.keys(e).map(g=>e[g]===!0?g:`${g}="${e[g]}"`).join(" ");if(t){let g=c?` id="${c}"`:"";Qy.has(a)?f=`<${a}${g}${v===""?"":" "}${v}/>`:f=`<${a}${g}${v===""?"":" "}${v}></${a}>`}else{let g=r.slice(l,y+1);f=`<${a}${v===""?"":" "}${v}${g}`}return[f,s,o]},Yh=class{static extract(r){let{[Fh]:e,[Bh]:t,[jh]:i}=r;return delete r[Fh],delete r[Bh],delete r[jh],{diff:r,title:i,reply:e||null,events:t||[]}}constructor(r,e){this.viewId=r,this.rendered={},this.magicId=0,this.mergeDiff(e)}parentViewId(){return this.viewId}toString(r){let[e,t]=this.recursiveToString(this.rendered,this.rendered[ze],r,!0,{});return[e,t]}recursiveToString(r,e=r[ze],t,i,n){t=t?new Set(t):null;let s={buffer:"",components:e,onlyCids:t,streams:new Set};return this.toOutputBuffer(r,null,s,i,n),[s.buffer,s.streams]}componentCIDs(r){return Object.keys(r[ze]||{}).map(e=>parseInt(e))}isComponentOnlyDiff(r){return r[ze]?Object.keys(r).length===1:!1}getComponent(r,e){return r[ze][e]}resetRender(r){this.rendered[ze][r]&&(this.rendered[ze][r].reset=!0)}mergeDiff(r){let e=r[ze],t={};if(delete r[ze],this.rendered=this.mutableMerge(this.rendered,r),this.rendered[ze]=this.rendered[ze]||{},e){let i=this.rendered[ze];for(let n in e)e[n]=this.cachedFindComponent(n,e[n],i,e,t);for(let n in e)i[n]=e[n];r[ze]=e}}cachedFindComponent(r,e,t,i,n){if(n[r])return n[r];{let s,o,a=e[Ut];if(tr(a)){let l;a>0?l=this.cachedFindComponent(a,i[a],t,i,n):l=t[-a],o=l[Ut],s=this.cloneMerge(l,e,!0),s[Ut]=o}else s=e[Ut]!==void 0||t[r]===void 0?e:this.cloneMerge(t[r],e,!1);return n[r]=s,s}}mutableMerge(r,e){return e[Ut]!==void 0?e:(this.doMutableMerge(r,e),r)}doMutableMerge(r,e){for(let t in e){let i=e[t],n=r[t];Vi(i)&&i[Ut]===void 0&&Vi(n)?this.doMutableMerge(n,i):r[t]=i}r[uu]&&(r.newRender=!0)}cloneMerge(r,e,t){let i={...r,...e};for(let n in i){let s=e[n],o=r[n];Vi(s)&&s[Ut]===void 0&&Vi(o)?i[n]=this.cloneMerge(o,s,t):s===void 0&&Vi(o)&&(i[n]=this.cloneMerge(o,{},t))}return t?(delete i.magicId,delete i.newRender):r[uu]&&(i.newRender=!0),i}componentToString(r){let[e,t]=this.recursiveCIDToString(this.rendered[ze],r,null),[i,n,s]=Xh(e,{});return[i,t]}pruneCIDs(r){r.forEach(e=>delete this.rendered[ze][e])}get(){return this.rendered}isNewFingerprint(r={}){return!!r[Ut]}templateStatic(r,e){return typeof r=="number"?e[r]:r}nextMagicID(){return this.magicId++,`m${this.magicId}-${this.parentViewId()}`}toOutputBuffer(r,e,t,i,n={}){if(r[Io])return this.comprehensionToBuffer(r,e,t);let{[Ut]:s}=r;s=this.templateStatic(s,e);let o=r[uu],a=t.buffer;o&&(t.buffer=""),i&&o&&!r.magicId&&(r.newRender=!0,r.magicId=this.nextMagicID()),t.buffer+=s[0];for(let l=1;l<s.length;l++)this.dynamicToBuffer(r[l-1],e,t,i),t.buffer+=s[l];if(o){let l=!1,c;i||r.magicId?(l=i&&!r.newRender,c={[sf]:r.magicId,...n}):c=n,l&&(c[nf]=!0);let[f,m,y]=Xh(t.buffer,c,l);r.newRender=!1,t.buffer=a+m+f+y}}comprehensionToBuffer(r,e,t){let{[Io]:i,[Ut]:n,[qh]:s}=r,[o,a,l,c]=s||[null,{},[],null];n=this.templateStatic(n,e);let f=e||r[Sy];for(let m=0;m<i.length;m++){let y=i[m];t.buffer+=n[0];for(let v=1;v<n.length;v++){let g=!1;this.dynamicToBuffer(y[v-1],f,t,g),t.buffer+=n[v]}}s!==void 0&&(r[Io].length>0||l.length>0||c)&&(delete r[qh],r[Io]=[],t.streams.add(s))}dynamicToBuffer(r,e,t,i){if(typeof r=="number"){let[n,s]=this.recursiveCIDToString(t.components,r,t.onlyCids);t.buffer+=n,t.streams=new Set([...t.streams,...s])}else Vi(r)?this.toOutputBuffer(r,e,t,i,{}):t.buffer+=r}recursiveCIDToString(r,e,t){let i=r[e]||Qe(`no component for CID ${e}`,r),n={[rr]:e},s=t&&!t.has(e);i.newRender=!s,i.magicId=`c${e}-${this.parentViewId()}`;let o=!i.reset,[a,l]=this.recursiveToString(i,r,t,o,n);return delete i.reset,[a,l]}},Zh=[],Qh=200,tw={exec(r,e,t,i,n,s){let[o,a]=s||[null,{callback:s&&s.callback}];(t.charAt(0)==="["?JSON.parse(t):[[o,a]]).forEach(([c,f])=>{c===o&&(f={...a,...f},f.callback=f.callback||a.callback),this.filterToEls(i.liveSocket,n,f).forEach(m=>{this[`exec_${c}`](r,e,t,i,n,m,f)})})},isVisible(r){return!!(r.offsetWidth||r.offsetHeight||r.getClientRects().length>0)},isInViewport(r){let e=r.getBoundingClientRect(),t=window.innerHeight||document.documentElement.clientHeight,i=window.innerWidth||document.documentElement.clientWidth;return e.right>0&&e.bottom>0&&e.left<i&&e.top<t},exec_exec(r,e,t,i,n,s,{attr:o,to:a}){(a?k.all(document,a):[n]).forEach(c=>{let f=c.getAttribute(o);if(!f)throw new Error(`expected ${o} to contain JS command on "${a}"`);i.liveSocket.execJS(c,f,e)})},exec_dispatch(r,e,t,i,n,s,{event:o,detail:a,bubbles:l}){a=a||{},a.dispatcher=n,k.dispatchEvent(s,o,{detail:a,bubbles:l})},exec_push(r,e,t,i,n,s,o){let{event:a,data:l,target:c,page_loading:f,loading:m,value:y,dispatcher:v,callback:g}=o,x={loading:m,value:y,target:c,page_loading:!!f},S=e==="change"&&v?v:n,T=c||S.getAttribute(i.binding("target"))||S;i.withinTargets(T,(I,u)=>{if(I.isConnected())if(e==="change"){let{newCid:h,_target:d}=o;d=d||(k.isFormInput(n)?n.name:void 0),d&&(x._target=d),I.pushInput(n,u,h,a||t,x,g)}else if(e==="submit"){let{submitter:h}=o;I.submitForm(n,u,a||t,h,x,g)}else I.pushEvent(e,n,u,a||t,l,x,g)})},exec_navigate(r,e,t,i,n,s,{href:o,replace:a}){i.liveSocket.historyRedirect(r,o,a?"replace":"push",null,n)},exec_patch(r,e,t,i,n,s,{href:o,replace:a}){i.liveSocket.pushHistoryPatch(r,o,a?"replace":"push",n)},exec_focus(r,e,t,i,n,s){window.requestAnimationFrame(()=>Gi.attemptFocus(s))},exec_focus_first(r,e,t,i,n,s){window.requestAnimationFrame(()=>Gi.focusFirstInteractive(s)||Gi.focusFirst(s))},exec_push_focus(r,e,t,i,n,s){window.requestAnimationFrame(()=>Zh.push(s||n))},exec_pop_focus(r,e,t,i,n,s){window.requestAnimationFrame(()=>{let o=Zh.pop();o&&o.focus()})},exec_add_class(r,e,t,i,n,s,{names:o,transition:a,time:l,blocking:c}){this.addOrRemoveClasses(s,o,[],a,l,i,c)},exec_remove_class(r,e,t,i,n,s,{names:o,transition:a,time:l,blocking:c}){this.addOrRemoveClasses(s,[],o,a,l,i,c)},exec_toggle_class(r,e,t,i,n,s,{names:o,transition:a,time:l,blocking:c}){this.toggleClasses(s,o,a,l,i,c)},exec_toggle_attr(r,e,t,i,n,s,{attr:[o,a,l]}){this.toggleAttr(s,o,a,l)},exec_transition(r,e,t,i,n,s,{time:o,transition:a,blocking:l}){this.addOrRemoveClasses(s,[],[],a,o,i,l)},exec_toggle(r,e,t,i,n,s,{display:o,ins:a,outs:l,time:c,blocking:f}){this.toggle(e,i,s,o,a,l,c,f)},exec_show(r,e,t,i,n,s,{display:o,transition:a,time:l,blocking:c}){this.show(e,i,s,o,a,l,c)},exec_hide(r,e,t,i,n,s,{display:o,transition:a,time:l,blocking:c}){this.hide(e,i,s,o,a,l,c)},exec_set_attr(r,e,t,i,n,s,{attr:[o,a]}){this.setOrRemoveAttrs(s,[[o,a]],[])},exec_remove_attr(r,e,t,i,n,s,{attr:o}){this.setOrRemoveAttrs(s,[],[o])},show(r,e,t,i,n,s,o){this.isVisible(t)||this.toggle(r,e,t,i,n,null,s,o)},hide(r,e,t,i,n,s,o){this.isVisible(t)&&this.toggle(r,e,t,i,null,n,s,o)},toggle(r,e,t,i,n,s,o,a){o=o||Qh;let[l,c,f]=n||[[],[],[]],[m,y,v]=s||[[],[],[]];if(l.length>0||m.length>0)if(this.isVisible(t)){let g=()=>{this.addOrRemoveClasses(t,y,l.concat(c).concat(f)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(t,m,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(t,v,y))})},x=()=>{this.addOrRemoveClasses(t,[],m.concat(v)),k.putSticky(t,"toggle",S=>S.style.display="none"),t.dispatchEvent(new Event("phx:hide-end"))};t.dispatchEvent(new Event("phx:hide-start")),a===!1?(g(),setTimeout(x,o)):e.transition(o,g,x)}else{if(r==="remove")return;let g=()=>{this.addOrRemoveClasses(t,c,m.concat(y).concat(v));let S=i||this.defaultDisplay(t);k.putSticky(t,"toggle",T=>T.style.display=S),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(t,l,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(t,f,c))})},x=()=>{this.addOrRemoveClasses(t,[],l.concat(f)),t.dispatchEvent(new Event("phx:show-end"))};t.dispatchEvent(new Event("phx:show-start")),a===!1?(g(),setTimeout(x,o)):e.transition(o,g,x)}else this.isVisible(t)?window.requestAnimationFrame(()=>{t.dispatchEvent(new Event("phx:hide-start")),k.putSticky(t,"toggle",g=>g.style.display="none"),t.dispatchEvent(new Event("phx:hide-end"))}):window.requestAnimationFrame(()=>{t.dispatchEvent(new Event("phx:show-start"));let g=i||this.defaultDisplay(t);k.putSticky(t,"toggle",x=>x.style.display=g),t.dispatchEvent(new Event("phx:show-end"))})},toggleClasses(r,e,t,i,n,s){window.requestAnimationFrame(()=>{let[o,a]=k.getSticky(r,"classes",[[],[]]),l=e.filter(f=>o.indexOf(f)<0&&!r.classList.contains(f)),c=e.filter(f=>a.indexOf(f)<0&&r.classList.contains(f));this.addOrRemoveClasses(r,l,c,t,i,n,s)})},toggleAttr(r,e,t,i){r.hasAttribute(e)?i!==void 0?r.getAttribute(e)===t?this.setOrRemoveAttrs(r,[[e,i]],[]):this.setOrRemoveAttrs(r,[[e,t]],[]):this.setOrRemoveAttrs(r,[],[e]):this.setOrRemoveAttrs(r,[[e,t]],[])},addOrRemoveClasses(r,e,t,i,n,s,o){n=n||Qh;let[a,l,c]=i||[[],[],[]];if(a.length>0){let f=()=>{this.addOrRemoveClasses(r,l,[].concat(a).concat(c)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(r,a,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(r,c,l))})},m=()=>this.addOrRemoveClasses(r,e.concat(c),t.concat(a).concat(l));o===!1?(f(),setTimeout(m,n)):s.transition(n,f,m);return}window.requestAnimationFrame(()=>{let[f,m]=k.getSticky(r,"classes",[[],[]]),y=e.filter(S=>f.indexOf(S)<0&&!r.classList.contains(S)),v=t.filter(S=>m.indexOf(S)<0&&r.classList.contains(S)),g=f.filter(S=>t.indexOf(S)<0).concat(y),x=m.filter(S=>e.indexOf(S)<0).concat(v);k.putSticky(r,"classes",S=>(S.classList.remove(...x),S.classList.add(...g),[g,x]))})},setOrRemoveAttrs(r,e,t){let[i,n]=k.getSticky(r,"attrs",[[],[]]),s=e.map(([l,c])=>l).concat(t),o=i.filter(([l,c])=>!s.includes(l)).concat(e),a=n.filter(l=>!s.includes(l)).concat(t);k.putSticky(r,"attrs",l=>(a.forEach(c=>l.removeAttribute(c)),o.forEach(([c,f])=>l.setAttribute(c,f)),[o,a]))},hasAllClasses(r,e){return e.every(t=>r.classList.contains(t))},isToggledOut(r,e){return!this.isVisible(r)||this.hasAllClasses(r,e)},filterToEls(r,e,{to:t}){let i=()=>{if(typeof t=="string")return document.querySelectorAll(t);if(t.closest){let n=e.closest(t.closest);return n?[n]:[]}else if(t.inner)return e.querySelectorAll(t.inner)};return t?r.jsQuerySelectorAll(e,t,i):[e]},defaultDisplay(r){return{tr:"table-row",td:"table-cell"}[r.tagName.toLowerCase()]||"block"},transitionClasses(r){if(!r)return null;let[e,t,i]=Array.isArray(r)?r:[r.split(" "),[],[]];return e=Array.isArray(e)?e:e.split(" "),t=Array.isArray(t)?t:t.split(" "),i=Array.isArray(i)?i:i.split(" "),[e,t,i]}},Q=tw,du="hookId",rw=1,ls=class{static makeID(){return rw++}static elementID(r){return k.private(r,du)}constructor(r,e,t){this.el=e,this.__attachView(r),this.__callbacks=t,this.__listeners=new Set,this.__isDisconnected=!1,k.putPrivate(this.el,du,this.constructor.makeID());for(let i in this.__callbacks)this[i]=this.__callbacks[i]}__attachView(r){r?(this.__view=()=>r,this.liveSocket=r.liveSocket):(this.__view=()=>{throw new Error(`hook not yet attached to a live view: ${this.el.outerHTML}`)},this.liveSocket=null)}__mounted(){this.mounted&&this.mounted()}__updated(){this.updated&&this.updated()}__beforeUpdate(){this.beforeUpdate&&this.beforeUpdate()}__destroyed(){this.destroyed&&this.destroyed(),k.deletePrivate(this.el,du)}__reconnected(){this.__isDisconnected&&(this.__isDisconnected=!1,this.reconnected&&this.reconnected())}__disconnected(){this.__isDisconnected=!0,this.disconnected&&this.disconnected()}js(){let r=this;return{exec(e){r.__view().liveSocket.execJS(r.el,e,"hook")},show(e,t={}){let i=r.__view().liveSocket.owner(e);Q.show("hook",i,e,t.display,t.transition,t.time,t.blocking)},hide(e,t={}){let i=r.__view().liveSocket.owner(e);Q.hide("hook",i,e,null,t.transition,t.time,t.blocking)},toggle(e,t={}){let i=r.__view().liveSocket.owner(e);t.in=Q.transitionClasses(t.in),t.out=Q.transitionClasses(t.out),Q.toggle("hook",i,e,t.display,t.in,t.out,t.time,t.blocking)},addClass(e,t,i={}){t=Array.isArray(t)?t:t.split(" ");let n=r.__view().liveSocket.owner(e);Q.addOrRemoveClasses(e,t,[],i.transition,i.time,n,i.blocking)},removeClass(e,t,i={}){i.transition=Q.transitionClasses(i.transition),t=Array.isArray(t)?t:t.split(" ");let n=r.__view().liveSocket.owner(e);Q.addOrRemoveClasses(e,[],t,i.transition,i.time,n,i.blocking)},toggleClass(e,t,i={}){i.transition=Q.transitionClasses(i.transition),t=Array.isArray(t)?t:t.split(" ");let n=r.__view().liveSocket.owner(e);Q.toggleClasses(e,t,i.transition,i.time,n,i.blocking)},transition(e,t,i={}){let n=r.__view().liveSocket.owner(e);Q.addOrRemoveClasses(e,[],[],Q.transitionClasses(t),i.time,n,i.blocking)},setAttribute(e,t,i){Q.setOrRemoveAttrs(e,[[t,i]],[])},removeAttribute(e,t){Q.setOrRemoveAttrs(e,[],[t])},toggleAttribute(e,t,i,n){Q.toggleAttr(e,t,i,n)}}}pushEvent(r,e={},t){return t===void 0?new Promise((i,n)=>{try{this.__view().pushHookEvent(this.el,null,r,e,(o,a)=>i(o))===!1&&n(new Error("unable to push hook event. LiveView not connected"))}catch(s){n(s)}}):this.__view().pushHookEvent(this.el,null,r,e,t)}pushEventTo(r,e,t={},i){return i===void 0?new Promise((n,s)=>{try{this.__view().withinTargets(r,(o,a)=>{o.pushHookEvent(this.el,a,e,t,(c,f)=>n(c))===!1&&s(new Error("unable to push hook event. LiveView not connected"))})}catch(o){s(o)}}):this.__view().withinTargets(r,(n,s)=>n.pushHookEvent(this.el,s,e,t,i))}handleEvent(r,e){let t=(i,n)=>n?r:e(i.detail);return window.addEventListener(`phx:${r}`,t),this.__listeners.add(t),t}removeHandleEvent(r){let e=r(null,!0);window.removeEventListener(`phx:${e}`,r),this.__listeners.delete(r)}upload(r,e){return this.__view().dispatchUploads(null,r,e)}uploadTo(r,e,t){return this.__view().withinTargets(r,(i,n)=>{i.dispatchUploads(n,e,t)})}__cleanup__(){this.__listeners.forEach(r=>this.removeHandleEvent(r))}},iw=(r,e)=>{let t=r.endsWith("[]"),i=t?r.slice(0,-2):r;return i=i.replace(/([^\[\]]+)(\]?$)/,`${e}$1$2`),t&&(i+="[]"),i},jo=(r,e,t=[])=>{let{submitter:i,...n}=e,s;if(i&&i.name){let f=document.createElement("input");f.type="hidden";let m=i.getAttribute("form");m&&f.setAttribute("form",m),f.name=i.name,f.value=i.value,i.parentElement.insertBefore(f,i),s=f}let o=new FormData(r),a=[];o.forEach((f,m,y)=>{f instanceof File&&a.push(m)}),a.forEach(f=>o.delete(f));let l=new URLSearchParams,c=Array.from(r.elements);for(let[f,m]of o.entries())if(t.length===0||t.indexOf(f)>=0){let y=c.filter(x=>x.name===f),v=!y.some(x=>k.private(x,Uo)||k.private(x,ds)),g=y.every(x=>x.type==="hidden");v&&!(i&&i.name==f)&&!g&&l.append(iw(f,"_unused_"),""),l.append(f,m)}i&&s&&i.parentElement.removeChild(s);for(let f in n)l.append(f,n[f]);return l.toString()},nw=class uf{static closestView(e){let t=e.closest(hi);return t?k.private(t,"view"):null}constructor(e,t,i,n,s){this.isDead=!1,this.liveSocket=t,this.flash=n,this.parent=i,this.root=i?i.root:this,this.el=e,k.putPrivate(this.el,"view",this),this.id=this.el.id,this.ref=0,this.lastAckRef=null,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.pendingForms=new Set,this.redirect=!1,this.href=null,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinAttempts=0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(o){o&&o()},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.formsForRecovery={},this.channel=this.liveSocket.channel(`lv:${this.id}`,()=>{let o=this.href&&this.expandURL(this.href);return{redirect:this.redirect?o:void 0,url:this.redirect?void 0:o||void 0,params:this.connectParams(s),session:this.getSession(),static:this.getStatic(),flash:this.flash}})}setHref(e){this.href=e}setRedirect(e){this.redirect=!0,this.href=e}isMain(){return this.el.hasAttribute(vu)}connectParams(e){let t=this.liveSocket.params(this.el),i=k.all(document,`[${this.binding(hy)}]`).map(n=>n.src||n.href).filter(n=>typeof n=="string");return i.length>0&&(t._track_static=i),t._mounts=this.joinCount,t._mount_attempts=this.joinAttempts,t._live_referer=e,this.joinAttempts++,t}isConnected(){return this.channel.canPush()}getSession(){return this.el.getAttribute(zt)}getStatic(){let e=this.el.getAttribute(ci);return e===""?null:e}destroy(e=function(){}){this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);let t=()=>{e();for(let i in this.viewHooks)this.destroyHook(this.viewHooks[i])};k.markPhxChildDestroyed(this.el),this.log("destroyed",()=>["the child has been removed from the parent"]),this.channel.leave().receive("ok",t).receive("error",t).receive("timeout",t)}setContainerClasses(...e){this.el.classList.remove(Ch,li,$i,Th,es),this.el.classList.add(...e)}showLoader(e){if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout(()=>this.showLoader(),e);else{for(let t in this.viewHooks)this.viewHooks[t].__disconnected();this.setContainerClasses(li)}}execAll(e){k.all(this.el,`[${e}]`,t=>this.liveSocket.execJS(t,t.getAttribute(e)))}hideLoader(){clearTimeout(this.loaderTimer),this.setContainerClasses(Ch),this.execAll(this.binding("connected"))}triggerReconnected(){for(let e in this.viewHooks)this.viewHooks[e].__reconnected()}log(e,t){this.liveSocket.log(this,e,t)}transition(e,t,i=function(){}){this.liveSocket.transition(e,t,i)}withinTargets(e,t,i=document,n){if(e instanceof HTMLElement||e instanceof SVGElement)return this.liveSocket.owner(e,s=>t(s,e));if(tr(e))k.findComponentNodeList(n||this.el,e).length===0?Qe(`no component found matching phx-target of ${e}`):t(this,parseInt(e));else{let s=Array.from(i.querySelectorAll(e));s.length===0&&Qe(`nothing found matching the phx-target selector "${e}"`),s.forEach(o=>this.liveSocket.owner(o,a=>t(a,o)))}}applyDiff(e,t,i){this.log(e,()=>["",Ho(t)]);let{diff:n,reply:s,events:o,title:a}=Yh.extract(t);i({diff:n,reply:s,events:o}),(typeof a=="string"||e=="mount")&&window.requestAnimationFrame(()=>k.putTitle(a))}onJoin(e){let{rendered:t,container:i,liveview_version:n}=e;if(i){let[s,o]=i;this.el=k.replaceRootContainer(this.el,s,o)}this.childJoins=0,this.joinPending=!0,this.flash=null,this.root===this&&(this.formsForRecovery=this.getFormsForRecovery()),this.isMain()&&window.history.state===null&&this.liveSocket.replaceRootHistory(),n!==this.liveSocket.version()&&console.error(`LiveView asset version mismatch. JavaScript version ${this.liveSocket.version()} vs. server ${n}. To avoid issues, please ensure that your assets use the same version as the server.`),Ze.dropLocal(this.liveSocket.localStorage,window.location.pathname,ef),this.applyDiff("mount",t,({diff:s,events:o})=>{this.rendered=new Yh(this.id,s);let[a,l]=this.renderContainer(null,"join");this.dropPendingRefs(),this.joinCount++,this.joinAttempts=0,this.maybeRecoverForms(a,()=>{this.onJoinComplete(e,a,l,o)})})}dropPendingRefs(){k.all(document,`[${_t}="${this.refSrc()}"]`,e=>{e.removeAttribute(Ki),e.removeAttribute(_t),e.removeAttribute(pt)})}onJoinComplete({live_patch:e},t,i,n){if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(e,t,i,n);k.findPhxChildrenInFragment(t,this.id).filter(o=>{let a=o.id&&this.el.querySelector(`[id="${o.id}"]`),l=a&&a.getAttribute(ci);return l&&o.setAttribute(ci,l),a&&a.setAttribute(Lr,this.root.id),this.joinChild(o)}).length===0?this.parent?(this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i,n)]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(e,t,i,n)):this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i,n)])}attachTrueDocEl(){this.el=k.byId(this.id),this.el.setAttribute(Lr,this.root.id)}execNewMounted(e=this.el){let t=this.binding(fu),i=this.binding(pu);k.all(e,`[${t}], [${i}]`,n=>{this.ownsElement(n)&&(k.maintainPrivateHooks(n,n,t,i),this.maybeAddNewHook(n))}),k.all(e,`[${this.binding(ts)}], [data-phx-${ts}]`,n=>{this.ownsElement(n)&&this.maybeAddNewHook(n)}),k.all(e,`[${this.binding(Oh)}]`,n=>{this.ownsElement(n)&&this.maybeMounted(n)})}applyJoinPatch(e,t,i,n){this.attachTrueDocEl();let s=new Fo(this,this.el,this.id,t,i,null);if(s.markPrunableContentForRemoval(),this.performPatch(s,!1,!0),this.joinNewChildren(),this.execNewMounted(),this.joinPending=!1,this.liveSocket.dispatchEvents(n),this.applyPendingUpdates(),e){let{kind:o,to:a}=e;this.liveSocket.historyPatch(a,o)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}triggerBeforeUpdateHook(e,t){this.liveSocket.triggerDOM("onBeforeElUpdated",[e,t]);let i=this.getHook(e),n=i&&k.isIgnored(e,this.binding(us));if(i&&!e.isEqualNode(t)&&!(n&&Ry(e.dataset,t.dataset)))return i.__beforeUpdate(),i}maybeMounted(e){let t=e.getAttribute(this.binding(Oh)),i=t&&k.private(e,"mounted");t&&!i&&(this.liveSocket.execJS(e,t),k.putPrivate(e,"mounted",!0))}maybeAddNewHook(e){let t=this.addHook(e);t&&t.__mounted()}performPatch(e,t,i=!1){let n=[],s=!1,o=new Set;return this.liveSocket.triggerDOM("onPatchStart",[e.targetContainer]),e.after("added",a=>{this.liveSocket.triggerDOM("onNodeAdded",[a]);let l=this.binding(fu),c=this.binding(pu);k.maintainPrivateHooks(a,a,l,c),this.maybeAddNewHook(a),a.getAttribute&&this.maybeMounted(a)}),e.after("phxChildAdded",a=>{k.isPhxSticky(a)?this.liveSocket.joinRootViews():s=!0}),e.before("updated",(a,l)=>{this.triggerBeforeUpdateHook(a,l)&&o.add(a.id)}),e.after("updated",a=>{o.has(a.id)&&this.getHook(a).__updated()}),e.after("discarded",a=>{a.nodeType===Node.ELEMENT_NODE&&n.push(a)}),e.after("transitionsDiscarded",a=>this.afterElementsRemoved(a,t)),e.perform(i),this.afterElementsRemoved(n,t),this.liveSocket.triggerDOM("onPatchEnd",[e.targetContainer]),s}afterElementsRemoved(e,t){let i=[];e.forEach(n=>{let s=k.all(n,`[${rr}]`),o=k.all(n,`[${this.binding(ts)}], [data-phx-hook]`);s.concat(n).forEach(a=>{let l=this.componentID(a);tr(l)&&i.indexOf(l)===-1&&i.push(l)}),o.concat(n).forEach(a=>{let l=this.getHook(a);l&&this.destroyHook(l)})}),t&&this.maybePushComponentsDestroyed(i)}joinNewChildren(){k.findPhxChildren(this.el,this.id).forEach(e=>this.joinChild(e))}maybeRecoverForms(e,t){let i=this.binding("change"),n=this.root.formsForRecovery,s=document.createElement("template");s.innerHTML=e;let o=s.content.firstElementChild;o.id=this.id,o.setAttribute(Lr,this.root.id),o.setAttribute(zt,this.getSession()),o.setAttribute(ci,this.getStatic()),o.setAttribute(di,this.parent?this.parent.id:null);let a=k.all(s.content,"form").filter(l=>l.id&&n[l.id]).filter(l=>!this.pendingForms.has(l.id)).filter(l=>n[l.id].getAttribute(i)===l.getAttribute(i)).map(l=>[n[l.id],l]);if(a.length===0)return t();a.forEach(([l,c],f)=>{this.pendingForms.add(c.id),this.pushFormRecovery(l,c,s.content.firstElementChild,()=>{this.pendingForms.delete(c.id),f===a.length-1&&t()})})}getChildById(e){return this.root.children[this.id][e]}getDescendentByEl(e){return e.id===this.id?this:this.children[e.getAttribute(di)]?.[e.id]}destroyDescendent(e){for(let t in this.root.children)for(let i in this.root.children[t])if(i===e)return this.root.children[t][i].destroy()}joinChild(e){if(!this.getChildById(e.id)){let i=new uf(e,this.liveSocket,this);return this.root.children[this.id][i.id]=i,i.join(),this.childJoins++,!0}}isJoinPending(){return this.joinPending}ackJoin(e){this.childJoins--,this.childJoins===0&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}onAllChildJoinsComplete(){this.pendingForms.clear(),this.formsForRecovery={},this.joinCallback(()=>{this.pendingJoinOps.forEach(([e,t])=>{e.isDestroyed()||t()}),this.pendingJoinOps=[]})}update(e,t){if(this.isJoinPending()||this.liveSocket.hasPendingLink()&&this.root.isMain())return this.pendingDiffs.push({diff:e,events:t});this.rendered.mergeDiff(e);let i=!1;this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time("component patch complete",()=>{k.findExistingParentCIDs(this.el,this.rendered.componentCIDs(e)).forEach(s=>{this.componentPatch(this.rendered.getComponent(e,s),s)&&(i=!0)})}):Hh(e)||this.liveSocket.time("full patch complete",()=>{let[n,s]=this.renderContainer(e,"update"),o=new Fo(this,this.el,this.id,n,s,null);i=this.performPatch(o,!0)}),this.liveSocket.dispatchEvents(t),i&&this.joinNewChildren()}renderContainer(e,t){return this.liveSocket.time(`toString diff (${t})`,()=>{let i=this.el.tagName,n=e?this.rendered.componentCIDs(e):null,[s,o]=this.rendered.toString(n);return[`<${i}>${s}</${i}>`,o]})}componentPatch(e,t){if(Hh(e))return!1;let[i,n]=this.rendered.componentToString(t),s=new Fo(this,this.el,this.id,i,n,t);return this.performPatch(s,!0)}getHook(e){return this.viewHooks[ls.elementID(e)]}addHook(e){let t=ls.elementID(e);if(t&&!this.viewHooks[t]){let i=k.getCustomElHook(e)||Qe(`no hook found for custom element: ${e.id}`);return this.viewHooks[t]=i,i.__attachView(this),i}else{if(t||!e.getAttribute)return;{let i=e.getAttribute(`data-phx-${ts}`)||e.getAttribute(this.binding(ts));if(i&&!this.ownsElement(e))return;let n=this.liveSocket.getHookCallbacks(i);if(n){e.id||Qe(`no DOM ID for hook "${i}". Hooks require a unique ID on each element.`,e);let s=new ls(this,e,n);return this.viewHooks[ls.elementID(s.el)]=s,s}else i!==null&&Qe(`unknown hook found for "${i}"`,e)}}}destroyHook(e){e.__destroyed(),e.__cleanup__(),delete this.viewHooks[ls.elementID(e.el)]}applyPendingUpdates(){this.pendingDiffs.forEach(({diff:e,events:t})=>this.update(e,t)),this.pendingDiffs=[],this.eachChild(e=>e.applyPendingUpdates())}eachChild(e){let t=this.root.children[this.id]||{};for(let i in t)e(this.getChildById(i))}onChannel(e,t){this.liveSocket.onChannel(this.channel,e,i=>{this.isJoinPending()?this.root.pendingJoinOps.push([this,()=>t(i)]):this.liveSocket.requestDOMUpdate(()=>t(i))})}bindChannel(){this.liveSocket.onChannel(this.channel,"diff",e=>{this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",e,({diff:t,events:i})=>this.update(t,i))})}),this.onChannel("redirect",({to:e,flash:t})=>this.onRedirect({to:e,flash:t})),this.onChannel("live_patch",e=>this.onLivePatch(e)),this.onChannel("live_redirect",e=>this.onLiveRedirect(e)),this.channel.onError(e=>this.onError(e)),this.channel.onClose(e=>this.onClose(e))}destroyAllChildren(){this.eachChild(e=>e.destroy())}onLiveRedirect(e){let{to:t,kind:i,flash:n}=e,s=this.expandURL(t),o=new CustomEvent("phx:server-navigate",{detail:{to:t,kind:i,flash:n}});this.liveSocket.historyRedirect(o,s,i,n)}onLivePatch(e){let{to:t,kind:i}=e;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,i)}expandURL(e){return e.startsWith("/")?`${window.location.protocol}//${window.location.host}${e}`:e}onRedirect({to:e,flash:t,reloadToken:i}){this.liveSocket.redirect(e,t,i)}isDestroyed(){return this.destroyed}joinDead(){this.isDead=!0}joinPush(){return this.joinPush=this.joinPush||this.channel.join(),this.joinPush}join(e){this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel(),this.isMain()&&(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=t=>{t=t||function(){},e?e(this.joinCount,t):t()},this.wrapPush(()=>this.channel.join(),{ok:t=>this.liveSocket.requestDOMUpdate(()=>this.onJoin(t)),error:t=>this.onJoinError(t),timeout:()=>this.onJoinError({reason:"timeout"})})}onJoinError(e){if(e.reason==="reload"){this.log("error",()=>[`failed mount with ${e.status}. Falling back to page reload`,e]),this.onRedirect({to:this.root.href,reloadToken:e.token});return}else if(e.reason==="unauthorized"||e.reason==="stale"){this.log("error",()=>["unauthorized live_redirect. Falling back to page request",e]),this.onRedirect({to:this.root.href});return}if((e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect)return this.onRedirect(e.redirect);if(e.live_redirect)return this.onLiveRedirect(e.live_redirect);if(this.log("error",()=>["unable to join",e]),this.isMain())this.displayError([li,$i,es]),this.liveSocket.isConnected()&&this.liveSocket.reloadWithJitter(this);else{this.joinAttempts>=Dh&&(this.root.displayError([li,$i,es]),this.log("error",()=>[`giving up trying to mount after ${Dh} tries`,e]),this.destroy());let t=k.byId(this.el.id);t?(k.mergeAttrs(t,this.el),this.displayError([li,$i,es]),this.el=t):this.destroy()}}onClose(e){if(!this.isDestroyed()){if(this.isMain()&&this.liveSocket.hasPendingLink()&&e!=="leave")return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(Ey)}}onError(e){this.onClose(e),this.liveSocket.isConnected()&&this.log("error",()=>["view crashed",e]),this.liveSocket.isUnloaded()||(this.liveSocket.isConnected()?this.displayError([li,$i,es]):this.displayError([li,$i,Th]))}displayError(e){this.isMain()&&k.dispatchEvent(window,"phx:page-loading-start",{detail:{to:this.href,kind:"error"}}),this.showLoader(),this.setContainerClasses(...e),this.execAll(this.binding("disconnected"))}wrapPush(e,t){let i=this.liveSocket.getLatencySim(),n=i?s=>setTimeout(()=>!this.isDestroyed()&&s(),i):s=>!this.isDestroyed()&&s();n(()=>{e().receive("ok",s=>n(()=>t.ok&&t.ok(s))).receive("error",s=>n(()=>t.error&&t.error(s))).receive("timeout",()=>n(()=>t.timeout&&t.timeout()))})}pushWithReply(e,t,i){if(!this.isConnected())return Promise.reject({error:"noconnection"});let[n,[s],o]=e?e():[null,[],{}],a=this.joinCount,l=function(){};return o.page_loading&&(l=this.liveSocket.withPageLoading({kind:"element",target:s})),typeof i.cid!="number"&&delete i.cid,new Promise((c,f)=>{this.wrapPush(()=>this.channel.push(t,i,_y),{ok:m=>{n!==null&&(this.lastAckRef=n);let y=v=>{m.redirect&&this.onRedirect(m.redirect),m.live_patch&&this.onLivePatch(m.live_patch),m.live_redirect&&this.onLiveRedirect(m.live_redirect),l(),c({resp:m,reply:v})};m.diff?this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",m.diff,({diff:v,reply:g,events:x})=>{n!==null&&this.undoRefs(n,i.event),this.update(v,x),y(g)})}):(n!==null&&this.undoRefs(n,i.event),y(null))},error:m=>f({error:m}),timeout:()=>{f({timeout:!0}),this.joinCount===a&&this.liveSocket.reloadWithJitter(this,()=>{this.log("timeout",()=>["received timeout while communicating with server. Falling back to hard refresh for recovery"])})}})})}undoRefs(e,t,i){if(!this.isConnected())return;let n=`[${_t}="${this.refSrc()}"]`;i?(i=new Set(i),k.all(document,n,s=>{i&&!i.has(s)||(k.all(s,n,o=>this.undoElRef(o,e,t)),this.undoElRef(s,e,t))})):k.all(document,n,s=>this.undoElRef(s,e,t))}undoElRef(e,t,i){new Fy(e).maybeUndo(t,i,s=>{let o=this.triggerBeforeUpdateHook(e,s);Fo.patchWithClonedTree(e,s,this.liveSocket),k.all(e,`[${_t}="${this.refSrc()}"]`,a=>this.undoElRef(a,t,i)),this.execNewMounted(e),o&&o.__updated()})}refSrc(){return this.el.id}putRef(e,t,i,n={}){let s=this.ref++,o=this.binding(Rh);if(n.loading){let a=k.all(document,n.loading).map(l=>({el:l,lock:!0,loading:!0}));e=e.concat(a)}for(let{el:a,lock:l,loading:c}of e){if(!l&&!c)throw new Error("putRef requires lock or loading");if(a.setAttribute(_t,this.refSrc()),c&&a.setAttribute(Ki,s),l&&a.setAttribute(pt,s),!c||n.submitter&&!(a===n.submitter||a===n.form))continue;let f=new Promise(g=>{a.addEventListener(`phx:undo-lock:${s}`,()=>g(v),{once:!0})}),m=new Promise(g=>{a.addEventListener(`phx:undo-loading:${s}`,()=>g(v),{once:!0})});a.classList.add(`phx-${i}-loading`);let y=a.getAttribute(o);y!==null&&(a.getAttribute(zo)||a.setAttribute(zo,a.innerText),y!==""&&(a.innerText=y),a.setAttribute(Wi,a.getAttribute(Wi)||a.disabled),a.setAttribute("disabled",""));let v={event:t,eventType:i,ref:s,isLoading:c,isLocked:l,lockElements:e.filter(({lock:g})=>g).map(({el:g})=>g),loadingElements:e.filter(({loading:g})=>g).map(({el:g})=>g),unlock:g=>{g=Array.isArray(g)?g:[g],this.undoRefs(s,t,g)},lockComplete:f,loadingComplete:m,lock:g=>new Promise(x=>{if(this.isAcked(s))return x(v);g.setAttribute(pt,s),g.setAttribute(_t,this.refSrc()),g.addEventListener(`phx:lock-stop:${s}`,()=>x(v),{once:!0})})};a.dispatchEvent(new CustomEvent("phx:push",{detail:v,bubbles:!0,cancelable:!1})),t&&a.dispatchEvent(new CustomEvent(`phx:push:${t}`,{detail:v,bubbles:!0,cancelable:!1}))}return[s,e.map(({el:a})=>a),n]}isAcked(e){return this.lastAckRef!==null&&this.lastAckRef>=e}componentID(e){let t=e.getAttribute&&e.getAttribute(rr);return t?parseInt(t):null}targetComponentID(e,t,i={}){if(tr(t))return t;let n=i.target||e.getAttribute(this.binding("target"));return tr(n)?parseInt(n):t&&(n!==null||i.target)?this.closestComponentID(t):null}closestComponentID(e){return tr(e)?e:e?Tr(e.closest(`[${rr}]`),t=>this.ownsElement(t)&&this.componentID(t)):null}pushHookEvent(e,t,i,n,s){if(!this.isConnected())return this.log("hook",()=>["unable to push hook event. LiveView not connected",i,n]),!1;let[o,a,l]=this.putRef([{el:e,loading:!0,lock:!0}],i,"hook");return this.pushWithReply(()=>[o,a,l],"event",{type:"hook",event:i,value:n,cid:this.closestComponentID(t)}).then(({resp:c,reply:f})=>s(f,o)),o}extractMeta(e,t,i){let n=this.binding("value-");for(let s=0;s<e.attributes.length;s++){t||(t={});let o=e.attributes[s].name;o.startsWith(n)&&(t[o.replace(n,"")]=e.getAttribute(o))}if(e.value!==void 0&&!(e instanceof HTMLFormElement)&&(t||(t={}),t.value=e.value,e.tagName==="INPUT"&&of.indexOf(e.type)>=0&&!e.checked&&delete t.value),i){t||(t={});for(let s in i)t[s]=i[s]}return t}pushEvent(e,t,i,n,s,o={},a){this.pushWithReply(()=>this.putRef([{el:t,loading:!0,lock:!0}],n,e,o),"event",{type:e,event:n,value:this.extractMeta(t,s,o.value),cid:this.targetComponentID(t,i,o)}).then(({reply:l})=>a&&a(l))}pushFileProgress(e,t,i,n=function(){}){this.liveSocket.withinOwners(e.form,(s,o)=>{s.pushWithReply(null,"progress",{event:e.getAttribute(s.binding(wy)),ref:e.getAttribute(ir),entry_ref:t,progress:i,cid:s.targetComponentID(e.form,o)}).then(({resp:a})=>n(a))})}pushInput(e,t,i,n,s,o){if(!e.form)throw new Error("form events require the input to be inside a form");let a,l=tr(i)?i:this.targetComponentID(e.form,t,s),c=()=>this.putRef([{el:e,loading:!0,lock:!0},{el:e.form,loading:!0,lock:!0}],n,"change",s),f,m=this.extractMeta(e.form);e instanceof HTMLButtonElement&&(m.submitter=e),e.getAttribute(this.binding("change"))?f=jo(e.form,{_target:s._target,...m},[e.name]):f=jo(e.form,{_target:s._target,...m}),k.isUploadInput(e)&&e.files&&e.files.length>0&&Ne.trackFiles(e,Array.from(e.files)),a=Ne.serializeUploads(e);let y={type:"form",event:n,value:f,uploads:a,cid:l};this.pushWithReply(c,"event",y).then(({resp:v})=>{if(k.isUploadInput(e)&&k.isAutoUpload(e)){if(Ne.filesAwaitingPreflight(e).length>0){let[g,x]=c();this.undoRefs(g,n,[e.form]),this.uploadFiles(e.form,n,t,g,l,S=>{o&&o(v),this.triggerAwaitingSubmit(e.form,n),this.undoRefs(g,n)})}}else o&&o(v)})}triggerAwaitingSubmit(e,t){let i=this.getScheduledSubmit(e);if(i){let[n,s,o,a]=i;this.cancelSubmit(e,t),a()}}getScheduledSubmit(e){return this.formSubmits.find(([t,i,n,s])=>t.isSameNode(e))}scheduleSubmit(e,t,i,n){if(this.getScheduledSubmit(e))return!0;this.formSubmits.push([e,t,i,n])}cancelSubmit(e,t){this.formSubmits=this.formSubmits.filter(([i,n,s,o])=>i.isSameNode(e)?(this.undoRefs(n,t),!1):!0)}disableForm(e,t,i={}){let n=g=>!(cs(g,`${this.binding(us)}=ignore`,g.form)||cs(g,"data-phx-update=ignore",g.form)),s=g=>g.hasAttribute(this.binding(Rh)),o=g=>g.tagName=="BUTTON",a=g=>["INPUT","TEXTAREA","SELECT"].includes(g.tagName),l=Array.from(e.elements),c=l.filter(s),f=l.filter(o).filter(n),m=l.filter(a).filter(n);f.forEach(g=>{g.setAttribute(Wi,g.disabled),g.disabled=!0}),m.forEach(g=>{g.setAttribute(mu,g.readOnly),g.readOnly=!0,g.files&&(g.setAttribute(Wi,g.disabled),g.disabled=!0)});let y=c.concat(f).concat(m).map(g=>({el:g,loading:!0,lock:!0})),v=[{el:e,loading:!0,lock:!1}].concat(y).reverse();return this.putRef(v,t,"submit",i)}pushFormSubmit(e,t,i,n,s,o){let a=()=>this.disableForm(e,i,{...s,form:e,submitter:n}),l=this.targetComponentID(e,t);if(Ne.hasUploadsInProgress(e)){let[c,f]=a(),m=()=>this.pushFormSubmit(e,t,i,n,s,o);return this.scheduleSubmit(e,c,s,m)}else if(Ne.inputsAwaitingPreflight(e).length>0){let[c,f]=a(),m=()=>[c,f,s];this.uploadFiles(e,i,t,c,l,y=>{if(Ne.inputsAwaitingPreflight(e).length>0)return this.undoRefs(c,i);let v=this.extractMeta(e),g=jo(e,{submitter:n,...v});this.pushWithReply(m,"event",{type:"form",event:i,value:g,cid:l}).then(({resp:x})=>o(x))})}else if(!(e.hasAttribute(_t)&&e.classList.contains("phx-submit-loading"))){let c=this.extractMeta(e),f=jo(e,{submitter:n,...c});this.pushWithReply(a,"event",{type:"form",event:i,value:f,cid:l}).then(({resp:m})=>o(m))}}uploadFiles(e,t,i,n,s,o){let a=this.joinCount,l=Ne.activeFileInputs(e),c=l.length;l.forEach(f=>{let m=new Ne(f,this,()=>{c--,c===0&&o()}),y=m.entries().map(g=>g.toPreflightPayload());if(y.length===0){c--;return}let v={ref:f.getAttribute(ir),entries:y,cid:this.targetComponentID(f.form,i)};this.log("upload",()=>["sending preflight request",v]),this.pushWithReply(null,"allow_upload",v).then(({resp:g})=>{if(this.log("upload",()=>["got preflight response",g]),m.entries().forEach(x=>{g.entries&&!g.entries[x.ref]&&this.handleFailedEntryPreflight(x.ref,"failed preflight",m)}),g.error||Object.keys(g.entries).length===0)this.undoRefs(n,t),(g.error||[]).map(([S,T])=>{this.handleFailedEntryPreflight(S,T,m)});else{let x=S=>{this.channel.onError(()=>{this.joinCount===a&&S()})};m.initAdapterUpload(g,x,this.liveSocket)}})})}handleFailedEntryPreflight(e,t,i){if(i.isAutoUpload()){let n=i.entries().find(s=>s.ref===e.toString());n&&n.cancel()}else i.entries().map(n=>n.cancel());this.log("upload",()=>[`error for entry ${e}`,t])}dispatchUploads(e,t,i){let n=this.targetCtxElement(e)||this.el,s=k.findUploadInputs(n).filter(o=>o.name===t);s.length===0?Qe(`no live file inputs found matching the name "${t}"`):s.length>1?Qe(`duplicate live file inputs found matching the name "${t}"`):k.dispatchEvent(s[0],rf,{detail:{files:i}})}targetCtxElement(e){if(tr(e)){let[t]=k.findComponentNodeList(this.el,e);return t}else return e||null}pushFormRecovery(e,t,i,n){let s=this.binding("change"),o=t.getAttribute(this.binding("target"))||t,a=t.getAttribute(this.binding(Nh))||t.getAttribute(this.binding("change")),l=Array.from(e.elements).filter(m=>k.isFormInput(m)&&m.name&&!m.hasAttribute(s));if(l.length===0)return;l.forEach(m=>m.hasAttribute(ir)&&Ne.clearFiles(m));let c=l.find(m=>m.type!=="hidden")||l[0],f=0;this.withinTargets(o,(m,y)=>{let v=this.targetComponentID(t,y);f++,m.pushInput(c,y,v,a,{_target:c.name},()=>{f--,f===0&&n()})},i,i)}pushLinkPatch(e,t,i,n){let s=this.liveSocket.setPendingLink(t),o=e.isTrusted&&e.type!=="popstate",a=i?()=>this.putRef([{el:i,loading:o,lock:!0}],null,"click"):null,l=()=>this.liveSocket.redirect(window.location.href),c=t.startsWith("/")?`${location.protocol}//${location.host}${t}`:t;this.pushWithReply(a,"live_patch",{url:c}).then(({resp:f})=>{this.liveSocket.requestDOMUpdate(()=>{f.link_redirect?this.liveSocket.replaceMain(t,null,n,s):(this.liveSocket.commitPendingLink(s)&&(this.href=t),this.applyPendingUpdates(),n&&n(s))})},({error:f,timeout:m})=>l())}getFormsForRecovery(){if(this.joinCount===0)return{};let e=this.binding("change");return k.all(this.el,`form[${e}]`).filter(t=>t.id).filter(t=>t.elements.length>0).filter(t=>t.getAttribute(this.binding(Nh))!=="ignore").map(t=>t.cloneNode(!0)).reduce((t,i)=>(t[i.id]=i,t),{})}maybePushComponentsDestroyed(e){let t=e.filter(i=>k.findComponentNodeList(this.el,i).length===0);t.length>0&&(t.forEach(i=>this.rendered.resetRender(i)),this.pushWithReply(null,"cids_will_destroy",{cids:t}).then(()=>{this.liveSocket.requestDOMUpdate(()=>{let i=t.filter(n=>k.findComponentNodeList(this.el,n).length===0);i.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:i}).then(({resp:n})=>{this.rendered.pruneCIDs(n.cids)})})}))}ownsElement(e){let t=e.closest(hi);return e.getAttribute(di)===this.id||t&&t.id===this.id||!t&&this.isDead}submitForm(e,t,i,n,s={}){k.putPrivate(e,ds,!0),Array.from(e.elements).forEach(a=>k.putPrivate(a,ds,!0)),this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,i,n,s,()=>{this.liveSocket.restorePreviouslyActiveFocus()})}binding(e){return this.liveSocket.binding(e)}};var cf=class{constructor(r,e,t={}){if(this.unloaded=!1,!e||e.constructor.name==="Object")throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);this.socket=new e(r,t),this.bindingPrefix=t.bindingPrefix||xy,this.opts=t,this.params=ss(t.params||{}),this.viewLogger=t.viewLogger,this.metadataCallbacks=t.metadata||{},this.defaults=Object.assign(Ho(ky),t.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.outgoingMainEl=null,this.clickStartedAtTarget=null,this.linkRef=1,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=Ho(window.location),this.hooks=t.hooks||{},this.uploaders=t.uploaders||{},this.loaderTimeout=t.loaderTimeout||Ay,this.reloadWithJitterTimer=null,this.maxReloads=t.maxReloads||ly,this.reloadJitterMin=t.reloadJitterMin||uy,this.reloadJitterMax=t.reloadJitterMax||cy,this.failsafeJitter=t.failsafeJitter||dy,this.localStorage=t.localStorage||window.localStorage,this.sessionStorage=t.sessionStorage||window.sessionStorage,this.boundTopLevelEvents=!1,this.boundEventNames=new Set,this.serverCloseRef=null,this.domCallbacks=Object.assign({jsQuerySelectorAll:null,onPatchStart:ss(),onPatchEnd:ss(),onNodeAdded:ss(),onBeforeElUpdated:ss()},t.dom||{}),this.transitions=new sw,this.currentHistoryPosition=parseInt(this.sessionStorage.getItem(Do))||0,window.addEventListener("pagehide",i=>{this.unloaded=!0}),this.socket.onOpen(()=>{this.isUnloaded()&&window.location.reload()})}version(){return"1.0.0"}isProfileEnabled(){return this.sessionStorage.getItem(au)==="true"}isDebugEnabled(){return this.sessionStorage.getItem(Po)==="true"}isDebugDisabled(){return this.sessionStorage.getItem(Po)==="false"}enableDebug(){this.sessionStorage.setItem(Po,"true")}enableProfiling(){this.sessionStorage.setItem(au,"true")}disableDebug(){this.sessionStorage.setItem(Po,"false")}disableProfiling(){this.sessionStorage.removeItem(au)}enableLatencySim(r){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),this.sessionStorage.setItem(lu,r)}disableLatencySim(){this.sessionStorage.removeItem(lu)}getLatencySim(){let r=this.sessionStorage.getItem(lu);return r?parseInt(r):null}getSocket(){return this.socket}connect(){window.location.hostname==="localhost"&&!this.isDebugDisabled()&&this.enableDebug();let r=()=>{this.resetReloadStatus(),this.joinRootViews()?(this.bindTopLevelEvents(),this.socket.connect()):this.main?this.socket.connect():this.bindTopLevelEvents({dead:!0}),this.joinDeadView()};["complete","loaded","interactive"].indexOf(document.readyState)>=0?r():document.addEventListener("DOMContentLoaded",()=>r())}disconnect(r){clearTimeout(this.reloadWithJitterTimer),this.serverCloseRef&&(this.socket.off(this.serverCloseRef),this.serverCloseRef=null),this.socket.disconnect(r)}replaceTransport(r){clearTimeout(this.reloadWithJitterTimer),this.socket.replaceTransport(r),this.connect()}execJS(r,e,t=null){let i=new CustomEvent("phx:exec",{detail:{sourceElement:r}});this.owner(r,n=>Q.exec(i,t,e,n,r))}execJSHookPush(r,e,t,i){this.withinOwners(r,n=>{let s=new CustomEvent("phx:exec",{detail:{sourceElement:r}});Q.exec(s,"hook",e,n,r,["push",{data:t,callback:i}])})}unload(){this.unloaded||(this.main&&this.isConnected()&&this.log(this.main,"socket",()=>["disconnect for page nav"]),this.unloaded=!0,this.destroyAllViews(),this.disconnect())}triggerDOM(r,e){this.domCallbacks[r](...e)}time(r,e){if(!this.isProfileEnabled()||!console.time)return e();console.time(r);let t=e();return console.timeEnd(r),t}log(r,e,t){if(this.viewLogger){let[i,n]=t();this.viewLogger(r,e,i,n)}else if(this.isDebugEnabled()){let[i,n]=t();Ly(r,e,i,n)}}requestDOMUpdate(r){this.transitions.after(r)}transition(r,e,t=function(){}){this.transitions.addTransition(r,e,t)}onChannel(r,e,t){r.on(e,i=>{let n=this.getLatencySim();n?setTimeout(()=>t(i),n):t(i)})}reloadWithJitter(r,e){clearTimeout(this.reloadWithJitterTimer),this.disconnect();let t=this.reloadJitterMin,i=this.reloadJitterMax,n=Math.floor(Math.random()*(i-t+1))+t,s=Ze.updateLocal(this.localStorage,window.location.pathname,ef,0,o=>o+1);s>=this.maxReloads&&(n=this.failsafeJitter),this.reloadWithJitterTimer=setTimeout(()=>{r.isDestroyed()||r.isConnected()||(r.destroy(),e?e():this.log(r,"join",()=>[`encountered ${s} consecutive reloads`]),s>=this.maxReloads&&this.log(r,"join",()=>[`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]),this.hasPendingLink()?window.location=this.pendingLink:window.location.reload())},n)}getHookCallbacks(r){return r&&r.startsWith("Phoenix.")?By[r.split(".")[1]]:this.hooks[r]}isUnloaded(){return this.unloaded}isConnected(){return this.socket.isConnected()}getBindingPrefix(){return this.bindingPrefix}binding(r){return`${this.getBindingPrefix()}${r}`}channel(r,e){return this.socket.channel(r,e)}joinDeadView(){let r=document.body;if(r&&!this.isPhxView(r)&&!this.isPhxView(document.firstElementChild)){let e=this.newRootView(r);e.setHref(this.getHref()),e.joinDead(),this.main||(this.main=e),window.requestAnimationFrame(()=>e.execNewMounted())}}joinRootViews(){let r=!1;return k.all(document,`${hi}:not([${di}])`,e=>{if(!this.getRootById(e.id)){let t=this.newRootView(e);t.setHref(this.getHref()),t.join(),e.hasAttribute(vu)&&(this.main=t)}r=!0}),r}redirect(r,e,t){t&&Ze.setCookie(Ph,t,60),this.unload(),Ze.redirect(r,e)}replaceMain(r,e,t=null,i=this.setPendingLink(r)){let n=this.currentLocation.href;this.outgoingMainEl=this.outgoingMainEl||this.main.el;let s=k.all(this.outgoingMainEl,`[${this.binding("remove")}]`),o=k.cloneNode(this.outgoingMainEl,"");this.main.showLoader(this.loaderTimeout),this.main.destroy(),this.main=this.newRootView(o,e,n),this.main.setRedirect(r),this.transitionRemoves(s,!0),this.main.join((a,l)=>{a===1&&this.commitPendingLink(i)&&this.requestDOMUpdate(()=>{s.forEach(c=>c.remove()),k.findPhxSticky(document).forEach(c=>o.appendChild(c)),this.outgoingMainEl.replaceWith(o),this.outgoingMainEl=null,t&&t(i),l()})})}transitionRemoves(r,e,t){let i=this.binding("remove");if(e){let s=k.findPhxSticky(document)||[];r=r.filter(o=>!k.isChildOfAny(o,s))}let n=s=>{s.preventDefault(),s.stopImmediatePropagation()};r.forEach(s=>{for(let o of this.boundEventNames)s.addEventListener(o,n,!0);this.execJS(s,s.getAttribute(i),"remove")}),this.requestDOMUpdate(()=>{r.forEach(s=>{for(let o of this.boundEventNames)s.removeEventListener(o,n,!0)}),t&&t()})}isPhxView(r){return r.getAttribute&&r.getAttribute(zt)!==null}newRootView(r,e,t){let i=new nw(r,this,null,e,t);return this.roots[i.id]=i,i}owner(r,e){let t=Tr(r.closest(hi),i=>this.getViewByEl(i))||this.main;return t&&e?e(t):t}withinOwners(r,e){this.owner(r,t=>e(t,r))}getViewByEl(r){let e=r.getAttribute(Lr);return Tr(this.getRootById(e),t=>t.getDescendentByEl(r))}getRootById(r){return this.roots[r]}destroyAllViews(){for(let r in this.roots)this.roots[r].destroy(),delete this.roots[r];this.main=null}destroyViewByEl(r){let e=this.getRootById(r.getAttribute(Lr));e&&e.id===r.id?(e.destroy(),delete this.roots[e.id]):e&&e.destroyDescendent(r.id)}getActiveElement(){return document.activeElement}dropActiveElement(r){this.prevActive&&r.ownsElement(this.prevActive)&&(this.prevActive=null)}restorePreviouslyActiveFocus(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}blurActiveElement(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}bindTopLevelEvents({dead:r}={}){this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,this.serverCloseRef=this.socket.onClose(e=>{if(e&&e.code===1e3&&this.main)return this.reloadWithJitter(this.main)}),document.body.addEventListener("click",function(){}),window.addEventListener("pageshow",e=>{e.persisted&&(this.getSocket().disconnect(),this.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())},!0),r||this.bindNav(),this.bindClicks(),r||this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(e,t,i,n,s,o)=>{let a=n.getAttribute(this.binding(yy)),l=e.key&&e.key.toLowerCase();if(a&&a.toLowerCase()!==l)return;let c={key:e.key,...this.eventMeta(t,e,n)};Q.exec(e,t,s,i,n,["push",{data:c}])}),this.bind({blur:"focusout",focus:"focusin"},(e,t,i,n,s,o)=>{if(!o){let a={key:e.key,...this.eventMeta(t,e,n)};Q.exec(e,t,s,i,n,["push",{data:a}])}}),this.bind({blur:"blur",focus:"focus"},(e,t,i,n,s,o)=>{if(o==="window"){let a=this.eventMeta(t,e,n);Q.exec(e,t,s,i,n,["push",{data:a}])}}),this.on("dragover",e=>e.preventDefault()),this.on("drop",e=>{e.preventDefault();let t=Tr(cs(e.target,this.binding(kh)),s=>s.getAttribute(this.binding(kh))),i=t&&document.getElementById(t),n=Array.from(e.dataTransfer.files||[]);!i||i.disabled||n.length===0||!(i.files instanceof FileList)||(Ne.trackFiles(i,n,e.dataTransfer),i.dispatchEvent(new Event("input",{bubbles:!0})))}),this.on(rf,e=>{let t=e.target;if(!k.isUploadInput(t))return;let i=Array.from(e.detail.files||[]).filter(n=>n instanceof File||n instanceof Blob);Ne.trackFiles(t,i),t.dispatchEvent(new Event("input",{bubbles:!0}))}))}eventMeta(r,e,t){let i=this.metadataCallbacks[r];return i?i(e,t):{}}setPendingLink(r){return this.linkRef++,this.pendingLink=r,this.resetReloadStatus(),this.linkRef}resetReloadStatus(){Ze.deleteCookie(Ph)}commitPendingLink(r){return this.linkRef!==r?!1:(this.href=this.pendingLink,this.pendingLink=null,!0)}getHref(){return this.href}hasPendingLink(){return!!this.pendingLink}bind(r,e){for(let t in r){let i=r[t];this.on(i,n=>{let s=this.binding(t),o=this.binding(`window-${t}`),a=n.target.getAttribute&&n.target.getAttribute(s);a?this.debounce(n.target,n,i,()=>{this.withinOwners(n.target,l=>{e(n,t,l,n.target,a,null)})}):k.all(document,`[${o}]`,l=>{let c=l.getAttribute(o);this.debounce(l,n,i,()=>{this.withinOwners(l,f=>{e(n,t,f,l,c,"window")})})})})}}bindClicks(){this.on("mousedown",r=>this.clickStartedAtTarget=r.target),this.bindClick("click","click")}bindClick(r,e){let t=this.binding(e);window.addEventListener(r,i=>{let n=null;i.detail===0&&(this.clickStartedAtTarget=i.target);let s=this.clickStartedAtTarget||i.target;n=cs(i.target,t),this.dispatchClickAway(i,s),this.clickStartedAtTarget=null;let o=n&&n.getAttribute(t);if(!o){k.isNewPageClick(i,window.location)&&this.unload();return}n.getAttribute("href")==="#"&&i.preventDefault(),!n.hasAttribute(_t)&&this.debounce(n,i,"click",()=>{this.withinOwners(n,a=>{Q.exec(i,"click",o,a,n,["push",{data:this.eventMeta("click",i,n)}])})})},!1)}dispatchClickAway(r,e){let t=this.binding("click-away");k.all(document,`[${t}]`,i=>{i.isSameNode(e)||i.contains(e)||this.withinOwners(i,n=>{let s=i.getAttribute(t);Q.isVisible(i)&&Q.isInViewport(i)&&Q.exec(r,"click",s,n,i,["push",{data:this.eventMeta("click",r,r.target)}])})})}bindNav(){if(!Ze.canPushState())return;history.scrollRestoration&&(history.scrollRestoration="manual");let r=null;window.addEventListener("scroll",e=>{clearTimeout(r),r=setTimeout(()=>{Ze.updateCurrentState(t=>Object.assign(t,{scroll:window.scrollY}))},100)}),window.addEventListener("popstate",e=>{if(!this.registerNewLocation(window.location))return;let{type:t,backType:i,id:n,root:s,scroll:o,position:a}=e.state||{},l=window.location.href,c=a>this.currentHistoryPosition;t=c?t:i||t,this.currentHistoryPosition=a||0,this.sessionStorage.setItem(Do,this.currentHistoryPosition.toString()),k.dispatchEvent(window,"phx:navigate",{detail:{href:l,patch:t==="patch",pop:!0,direction:c?"forward":"backward"}}),this.requestDOMUpdate(()=>{this.main.isConnected()&&t==="patch"&&n===this.main.id?this.main.pushLinkPatch(e,l,null,()=>{this.maybeScroll(o)}):this.replaceMain(l,null,()=>{s&&this.replaceRootHistory(),this.maybeScroll(o)})})},!1),window.addEventListener("click",e=>{let t=cs(e.target,su),i=t&&t.getAttribute(su);if(!i||!this.isConnected()||!this.main||k.wantsNewTab(e))return;let n=t.href instanceof SVGAnimatedString?t.href.baseVal:t.href,s=t.getAttribute(fy);e.preventDefault(),e.stopImmediatePropagation(),this.pendingLink!==n&&this.requestDOMUpdate(()=>{if(i==="patch")this.pushHistoryPatch(e,n,s,t);else if(i==="redirect")this.historyRedirect(e,n,s,null,t);else throw new Error(`expected ${su} to be "patch" or "redirect", got: ${i}`);let o=t.getAttribute(this.binding("click"));o&&this.requestDOMUpdate(()=>this.execJS(t,o,"click"))})},!1)}maybeScroll(r){typeof r=="number"&&requestAnimationFrame(()=>{window.scrollTo(0,r)})}dispatchEvent(r,e={}){k.dispatchEvent(window,`phx:${r}`,{detail:e})}dispatchEvents(r){r.forEach(([e,t])=>this.dispatchEvent(e,t))}withPageLoading(r,e){k.dispatchEvent(window,"phx:page-loading-start",{detail:r});let t=()=>k.dispatchEvent(window,"phx:page-loading-stop",{detail:r});return e?e(t):t}pushHistoryPatch(r,e,t,i){if(!this.isConnected()||!this.main.isMain())return Ze.redirect(e);this.withPageLoading({to:e,kind:"patch"},n=>{this.main.pushLinkPatch(r,e,i,s=>{this.historyPatch(e,t,s),n()})})}historyPatch(r,e,t=this.setPendingLink(r)){this.commitPendingLink(t)&&(this.currentHistoryPosition++,this.sessionStorage.setItem(Do,this.currentHistoryPosition.toString()),Ze.updateCurrentState(i=>({...i,backType:"patch"})),Ze.pushState(e,{type:"patch",id:this.main.id,position:this.currentHistoryPosition},r),k.dispatchEvent(window,"phx:navigate",{detail:{patch:!0,href:r,pop:!1,direction:"forward"}}),this.registerNewLocation(window.location))}historyRedirect(r,e,t,i,n){if(n&&r.isTrusted&&r.type!=="popstate"&&n.classList.add("phx-click-loading"),!this.isConnected()||!this.main.isMain())return Ze.redirect(e,i);if(/^\/$|^\/[^\/]+.*$/.test(e)){let{protocol:o,host:a}=window.location;e=`${o}//${a}${e}`}let s=window.scrollY;this.withPageLoading({to:e,kind:"redirect"},o=>{this.replaceMain(e,i,a=>{a===this.linkRef&&(this.currentHistoryPosition++,this.sessionStorage.setItem(Do,this.currentHistoryPosition.toString()),Ze.updateCurrentState(l=>({...l,backType:"redirect"})),Ze.pushState(t,{type:"redirect",id:this.main.id,scroll:s,position:this.currentHistoryPosition},e),k.dispatchEvent(window,"phx:navigate",{detail:{href:e,patch:!1,pop:!1,direction:"forward"}}),this.registerNewLocation(window.location)),o()})})}replaceRootHistory(){Ze.pushState("replace",{root:!0,type:"patch",id:this.main.id,position:this.currentHistoryPosition})}registerNewLocation(r){let{pathname:e,search:t}=this.currentLocation;return e+t===r.pathname+r.search?!1:(this.currentLocation=Ho(r),!0)}bindForms(){let r=0,e=!1;this.on("submit",t=>{let i=t.target.getAttribute(this.binding("submit")),n=t.target.getAttribute(this.binding("change"));!e&&n&&!i&&(e=!0,t.preventDefault(),this.withinOwners(t.target,s=>{s.disableForm(t.target),window.requestAnimationFrame(()=>{k.isUnloadableFormSubmit(t)&&this.unload(),t.target.submit()})}))}),this.on("submit",t=>{let i=t.target.getAttribute(this.binding("submit"));if(!i){k.isUnloadableFormSubmit(t)&&this.unload();return}t.preventDefault(),t.target.disabled=!0,this.withinOwners(t.target,n=>{Q.exec(t,"submit",i,n,t.target,["push",{submitter:t.submitter}])})});for(let t of["change","input"])this.on(t,i=>{if(i instanceof CustomEvent&&i.target.form===void 0){if(i.detail&&i.detail.dispatcher)throw new Error(`dispatching a custom ${t} event is only supported on input elements inside a form`);return}let n=this.binding("change"),s=i.target;if(i.isComposing){let v=`composition-listener-${t}`;k.private(s,v)||(k.putPrivate(s,v,!0),s.addEventListener("compositionend",()=>{s.dispatchEvent(new Event(t,{bubbles:!0})),k.deletePrivate(s,v)},{once:!0}));return}let o=s.getAttribute(n),a=s.form&&s.form.getAttribute(n),l=o||a;if(!l||s.type==="number"&&s.validity&&s.validity.badInput)return;let c=o?s:s.form,f=r;r++;let{at:m,type:y}=k.private(s,"prev-iteration")||{};m===f-1&&t==="change"&&y==="input"||(k.putPrivate(s,"prev-iteration",{at:f,type:t}),this.debounce(s,i,t,()=>{this.withinOwners(c,v=>{k.putPrivate(s,Uo,!0),Q.exec(i,"change",l,v,s,["push",{_target:i.target.name,dispatcher:c}])})}))});this.on("reset",t=>{let i=t.target;k.resetForm(i);let n=Array.from(i.elements).find(s=>s.type==="reset");n&&window.requestAnimationFrame(()=>{n.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!1}))})})}debounce(r,e,t,i){if(t==="blur"||t==="focusout")return i();let n=this.binding(by),s=this.binding(vy),o=this.defaults.debounce.toString(),a=this.defaults.throttle.toString();this.withinOwners(r,l=>{let c=()=>!l.isDestroyed()&&document.body.contains(r);k.debounce(r,e,n,o,s,a,c,()=>{i()})})}silenceEvents(r){this.silenced=!0,r(),this.silenced=!1}on(r,e){this.boundEventNames.add(r),window.addEventListener(r,t=>{this.silenced||e(t)})}jsQuerySelectorAll(r,e,t){let i=this.domCallbacks.jsQuerySelectorAll;return i?i(r,e,t):t()}},sw=class{constructor(){this.transitions=new Set,this.pendingOps=[]}reset(){this.transitions.forEach(r=>{clearTimeout(r),this.transitions.delete(r)}),this.flushPendingOps()}after(r){this.size()===0?r():this.pushPendingOp(r)}addTransition(r,e,t){e();let i=setTimeout(()=>{this.transitions.delete(i),t(),this.flushPendingOps()},r);this.transitions.add(i)}pushPendingOp(r){this.pendingOps.push(r)}size(){return this.transitions.size}flushPendingOps(){if(this.size()>0)return;let r=this.pendingOps.shift();r&&(r(),this.flushPendingOps())}};var ru=Ue(hf());function ff(r,e){var t=Object.keys(r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(r);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(r,n).enumerable})),t.push.apply(t,i)}return t}function Vt(r){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ff(Object(t),!0).forEach(function(i){ow(r,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(t)):ff(Object(t)).forEach(function(i){Object.defineProperty(r,i,Object.getOwnPropertyDescriptor(t,i))})}return r}function Jo(r){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Jo=function(e){return typeof e}:Jo=function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Jo(r)}function ow(r,e,t){return e in r?Object.defineProperty(r,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):r[e]=t,r}function sr(){return sr=Object.assign||function(r){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(r[i]=t[i])}return r},sr.apply(this,arguments)}function aw(r,e){if(r==null)return{};var t={},i=Object.keys(r),n,s;for(s=0;s<i.length;s++)n=i[s],!(e.indexOf(n)>=0)&&(t[n]=r[n]);return t}function lw(r,e){if(r==null)return{};var t=aw(r,e),i,n;if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(r);for(n=0;n<s.length;n++)i=s[n],!(e.indexOf(i)>=0)&&Object.prototype.propertyIsEnumerable.call(r,i)&&(t[i]=r[i])}return t}var uw="1.15.4";function nr(r){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(r)}var or=nr(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),ws=nr(/Edge/i),pf=nr(/firefox/i),ms=nr(/safari/i)&&!nr(/chrome/i)&&!nr(/android/i),Ef=nr(/iP(ad|od|hone)/i),xf=nr(/chrome/i)&&nr(/android/i),_f={capture:!1,passive:!1};function X(r,e,t){r.addEventListener(e,t,!or&&_f)}function J(r,e,t){r.removeEventListener(e,t,!or&&_f)}function ea(r,e){if(e){if(e[0]===">"&&(e=e.substring(1)),r)try{if(r.matches)return r.matches(e);if(r.msMatchesSelector)return r.msMatchesSelector(e);if(r.webkitMatchesSelector)return r.webkitMatchesSelector(e)}catch{return!1}return!1}}function kf(r){return r.host&&r!==document&&r.host.nodeType?r.host:r.parentNode}function Dt(r,e,t,i){if(r){t=t||document;do{if(e!=null&&(e[0]===">"?r.parentNode===t&&ea(r,e):ea(r,e))||i&&r===t)return r;if(r===t)break}while(r=kf(r))}return null}var mf=/\s+/g;function mt(r,e,t){if(r&&e)if(r.classList)r.classList[t?"add":"remove"](e);else{var i=(" "+r.className+" ").replace(mf," ").replace(" "+e+" "," ");r.className=(i+(t?" "+e:"")).replace(mf," ")}}function $(r,e,t){var i=r&&r.style;if(i){if(t===void 0)return document.defaultView&&document.defaultView.getComputedStyle?t=document.defaultView.getComputedStyle(r,""):r.currentStyle&&(t=r.currentStyle),e===void 0?t:t[e];!(e in i)&&e.indexOf("webkit")===-1&&(e="-webkit-"+e),i[e]=t+(typeof t=="string"?"":"px")}}function Qi(r,e){var t="";if(typeof r=="string")t=r;else do{var i=$(r,"transform");i&&i!=="none"&&(t=i+" "+t)}while(!e&&(r=r.parentNode));var n=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return n&&new n(t)}function Sf(r,e,t){if(r){var i=r.getElementsByTagName(e),n=0,s=i.length;if(t)for(;n<s;n++)t(i[n],n);return i}return[]}function $t(){var r=document.scrollingElement;return r||document.documentElement}function _e(r,e,t,i,n){if(!(!r.getBoundingClientRect&&r!==window)){var s,o,a,l,c,f,m;if(r!==window&&r.parentNode&&r!==$t()?(s=r.getBoundingClientRect(),o=s.top,a=s.left,l=s.bottom,c=s.right,f=s.height,m=s.width):(o=0,a=0,l=window.innerHeight,c=window.innerWidth,f=window.innerHeight,m=window.innerWidth),(e||t)&&r!==window&&(n=n||r.parentNode,!or))do if(n&&n.getBoundingClientRect&&($(n,"transform")!=="none"||t&&$(n,"position")!=="static")){var y=n.getBoundingClientRect();o-=y.top+parseInt($(n,"border-top-width")),a-=y.left+parseInt($(n,"border-left-width")),l=o+s.height,c=a+s.width;break}while(n=n.parentNode);if(i&&r!==window){var v=Qi(n||r),g=v&&v.a,x=v&&v.d;v&&(o/=x,a/=g,m/=g,f/=x,l=o+f,c=a+m)}return{top:o,left:a,bottom:l,right:c,width:m,height:f}}}function gf(r,e,t){for(var i=Or(r,!0),n=_e(r)[e];i;){var s=_e(i)[t],o=void 0;if(t==="top"||t==="left"?o=n>=s:o=n<=s,!o)return i;if(i===$t())break;i=Or(i,!1)}return!1}function en(r,e,t,i){for(var n=0,s=0,o=r.children;s<o.length;){if(o[s].style.display!=="none"&&o[s]!==V.ghost&&(i||o[s]!==V.dragged)&&Dt(o[s],t.draggable,r,!1)){if(n===e)return o[s];n++}s++}return null}function Du(r,e){for(var t=r.lastElementChild;t&&(t===V.ghost||$(t,"display")==="none"||e&&!ea(t,e));)t=t.previousElementSibling;return t||null}function kt(r,e){var t=0;if(!r||!r.parentNode)return-1;for(;r=r.previousElementSibling;)r.nodeName.toUpperCase()!=="TEMPLATE"&&r!==V.clone&&(!e||ea(r,e))&&t++;return t}function bf(r){var e=0,t=0,i=$t();if(r)do{var n=Qi(r),s=n.a,o=n.d;e+=r.scrollLeft*s,t+=r.scrollTop*o}while(r!==i&&(r=r.parentNode));return[e,t]}function cw(r,e){for(var t in r)if(r.hasOwnProperty(t)){for(var i in e)if(e.hasOwnProperty(i)&&e[i]===r[t][i])return Number(t)}return-1}function Or(r,e){if(!r||!r.getBoundingClientRect)return $t();var t=r,i=!1;do if(t.clientWidth<t.scrollWidth||t.clientHeight<t.scrollHeight){var n=$(t);if(t.clientWidth<t.scrollWidth&&(n.overflowX=="auto"||n.overflowX=="scroll")||t.clientHeight<t.scrollHeight&&(n.overflowY=="auto"||n.overflowY=="scroll")){if(!t.getBoundingClientRect||t===document.body)return $t();if(i||e)return t;i=!0}}while(t=t.parentNode);return $t()}function dw(r,e){if(r&&e)for(var t in e)e.hasOwnProperty(t)&&(r[t]=e[t]);return r}function Au(r,e){return Math.round(r.top)===Math.round(e.top)&&Math.round(r.left)===Math.round(e.left)&&Math.round(r.height)===Math.round(e.height)&&Math.round(r.width)===Math.round(e.width)}var gs;function Cf(r,e){return function(){if(!gs){var t=arguments,i=this;t.length===1?r.call(i,t[0]):r.apply(i,t),gs=setTimeout(function(){gs=void 0},e)}}}function hw(){clearTimeout(gs),gs=void 0}function Tf(r,e,t){r.scrollLeft+=e,r.scrollTop+=t}function Lf(r){var e=window.Polymer,t=window.jQuery||window.Zepto;return e&&e.dom?e.dom(r).cloneNode(!0):t?t(r).clone(!0)[0]:r.cloneNode(!0)}function Rf(r,e,t){var i={};return Array.from(r.children).forEach(function(n){var s,o,a,l;if(!(!Dt(n,e.draggable,r,!1)||n.animated||n===t)){var c=_e(n);i.left=Math.min((s=i.left)!==null&&s!==void 0?s:1/0,c.left),i.top=Math.min((o=i.top)!==null&&o!==void 0?o:1/0,c.top),i.right=Math.max((a=i.right)!==null&&a!==void 0?a:-1/0,c.right),i.bottom=Math.max((l=i.bottom)!==null&&l!==void 0?l:-1/0,c.bottom)}}),i.width=i.right-i.left,i.height=i.bottom-i.top,i.x=i.left,i.y=i.top,i}var rt="Sortable"+new Date().getTime();function fw(){var r=[],e;return{captureAnimationState:function(){if(r=[],!!this.options.animation){var i=[].slice.call(this.el.children);i.forEach(function(n){if(!($(n,"display")==="none"||n===V.ghost)){r.push({target:n,rect:_e(n)});var s=Vt({},r[r.length-1].rect);if(n.thisAnimationDuration){var o=Qi(n,!0);o&&(s.top-=o.f,s.left-=o.e)}n.fromRect=s}})}},addAnimationState:function(i){r.push(i)},removeAnimationState:function(i){r.splice(cw(r,{target:i}),1)},animateAll:function(i){var n=this;if(!this.options.animation){clearTimeout(e),typeof i=="function"&&i();return}var s=!1,o=0;r.forEach(function(a){var l=0,c=a.target,f=c.fromRect,m=_e(c),y=c.prevFromRect,v=c.prevToRect,g=a.rect,x=Qi(c,!0);x&&(m.top-=x.f,m.left-=x.e),c.toRect=m,c.thisAnimationDuration&&Au(y,m)&&!Au(f,m)&&(g.top-m.top)/(g.left-m.left)===(f.top-m.top)/(f.left-m.left)&&(l=mw(g,y,v,n.options)),Au(m,f)||(c.prevFromRect=f,c.prevToRect=m,l||(l=n.options.animation),n.animate(c,g,m,l)),l&&(s=!0,o=Math.max(o,l),clearTimeout(c.animationResetTimer),c.animationResetTimer=setTimeout(function(){c.animationTime=0,c.prevFromRect=null,c.fromRect=null,c.prevToRect=null,c.thisAnimationDuration=null},l),c.thisAnimationDuration=l)}),clearTimeout(e),s?e=setTimeout(function(){typeof i=="function"&&i()},o):typeof i=="function"&&i(),r=[]},animate:function(i,n,s,o){if(o){$(i,"transition",""),$(i,"transform","");var a=Qi(this.el),l=a&&a.a,c=a&&a.d,f=(n.left-s.left)/(l||1),m=(n.top-s.top)/(c||1);i.animatingX=!!f,i.animatingY=!!m,$(i,"transform","translate3d("+f+"px,"+m+"px,0)"),this.forRepaintDummy=pw(i),$(i,"transition","transform "+o+"ms"+(this.options.easing?" "+this.options.easing:"")),$(i,"transform","translate3d(0,0,0)"),typeof i.animated=="number"&&clearTimeout(i.animated),i.animated=setTimeout(function(){$(i,"transition",""),$(i,"transform",""),i.animated=!1,i.animatingX=!1,i.animatingY=!1},o)}}}}function pw(r){return r.offsetWidth}function mw(r,e,t,i){return Math.sqrt(Math.pow(e.top-r.top,2)+Math.pow(e.left-r.left,2))/Math.sqrt(Math.pow(e.top-t.top,2)+Math.pow(e.left-t.left,2))*i.animation}var Ji=[],Eu={initializeByDefault:!0},As={mount:function(e){for(var t in Eu)Eu.hasOwnProperty(t)&&!(t in e)&&(e[t]=Eu[t]);Ji.forEach(function(i){if(i.pluginName===e.pluginName)throw"Sortable: Cannot mount plugin ".concat(e.pluginName," more than once")}),Ji.push(e)},pluginEvent:function(e,t,i){var n=this;this.eventCanceled=!1,i.cancel=function(){n.eventCanceled=!0};var s=e+"Global";Ji.forEach(function(o){t[o.pluginName]&&(t[o.pluginName][s]&&t[o.pluginName][s](Vt({sortable:t},i)),t.options[o.pluginName]&&t[o.pluginName][e]&&t[o.pluginName][e](Vt({sortable:t},i)))})},initializePlugins:function(e,t,i,n){Ji.forEach(function(a){var l=a.pluginName;if(!(!e.options[l]&&!a.initializeByDefault)){var c=new a(e,t,e.options);c.sortable=e,c.options=e.options,e[l]=c,sr(i,c.defaults)}});for(var s in e.options)if(e.options.hasOwnProperty(s)){var o=this.modifyOption(e,s,e.options[s]);typeof o<"u"&&(e.options[s]=o)}},getEventProperties:function(e,t){var i={};return Ji.forEach(function(n){typeof n.eventProperties=="function"&&sr(i,n.eventProperties.call(t[n.pluginName],e))}),i},modifyOption:function(e,t,i){var n;return Ji.forEach(function(s){e[s.pluginName]&&s.optionListeners&&typeof s.optionListeners[t]=="function"&&(n=s.optionListeners[t].call(e[s.pluginName],i))}),n}};function gw(r){var e=r.sortable,t=r.rootEl,i=r.name,n=r.targetEl,s=r.cloneEl,o=r.toEl,a=r.fromEl,l=r.oldIndex,c=r.newIndex,f=r.oldDraggableIndex,m=r.newDraggableIndex,y=r.originalEvent,v=r.putSortable,g=r.extraEventProperties;if(e=e||t&&t[rt],!!e){var x,S=e.options,T="on"+i.charAt(0).toUpperCase()+i.substr(1);window.CustomEvent&&!or&&!ws?x=new CustomEvent(i,{bubbles:!0,cancelable:!0}):(x=document.createEvent("Event"),x.initEvent(i,!0,!0)),x.to=o||t,x.from=a||t,x.item=n||t,x.clone=s,x.oldIndex=l,x.newIndex=c,x.oldDraggableIndex=f,x.newDraggableIndex=m,x.originalEvent=y,x.pullMode=v?v.lastPutMode:void 0;var I=Vt(Vt({},g),As.getEventProperties(i,e));for(var u in I)x[u]=I[u];t&&t.dispatchEvent(x),S[T]&&S[T].call(e,x)}}var bw=["evt"],tt=function(e,t){var i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},n=i.evt,s=lw(i,bw);As.pluginEvent.bind(V)(e,t,Vt({dragEl:j,parentEl:me,ghostEl:W,rootEl:oe,nextEl:mi,lastDownEl:Xo,cloneEl:ue,cloneHidden:Nr,dragStarted:hs,putSortable:Oe,activeSortable:V.active,originalEvent:n,oldIndex:Zi,oldDraggableIndex:bs,newIndex:gt,newDraggableIndex:Rr,hideGhostForTarget:Df,unhideGhostForTarget:If,cloneNowHidden:function(){Nr=!0},cloneNowShown:function(){Nr=!1},dispatchSortableEvent:function(a){$e({sortable:t,name:a,originalEvent:n})}},s))};function $e(r){gw(Vt({putSortable:Oe,cloneEl:ue,targetEl:j,rootEl:oe,oldIndex:Zi,oldDraggableIndex:bs,newIndex:gt,newDraggableIndex:Rr},r))}var j,me,W,oe,mi,Xo,ue,Nr,Zi,gt,bs,Rr,Vo,Oe,Yi=!1,ta=!1,ra=[],fi,Pt,xu,_u,vf,yf,hs,Xi,vs,ys=!1,Wo=!1,Yo,De,ku=[],Ru=!1,ia=[],sa=typeof document<"u",Ko=Ef,wf=ws||or?"cssFloat":"float",vw=sa&&!xf&&!Ef&&"draggable"in document.createElement("div"),Nf=function(){if(sa){if(or)return!1;var r=document.createElement("x");return r.style.cssText="pointer-events:auto",r.style.pointerEvents==="auto"}}(),Of=function(e,t){var i=$(e),n=parseInt(i.width)-parseInt(i.paddingLeft)-parseInt(i.paddingRight)-parseInt(i.borderLeftWidth)-parseInt(i.borderRightWidth),s=en(e,0,t),o=en(e,1,t),a=s&&$(s),l=o&&$(o),c=a&&parseInt(a.marginLeft)+parseInt(a.marginRight)+_e(s).width,f=l&&parseInt(l.marginLeft)+parseInt(l.marginRight)+_e(o).width;if(i.display==="flex")return i.flexDirection==="column"||i.flexDirection==="column-reverse"?"vertical":"horizontal";if(i.display==="grid")return i.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(s&&a.float&&a.float!=="none"){var m=a.float==="left"?"left":"right";return o&&(l.clear==="both"||l.clear===m)?"vertical":"horizontal"}return s&&(a.display==="block"||a.display==="flex"||a.display==="table"||a.display==="grid"||c>=n&&i[wf]==="none"||o&&i[wf]==="none"&&c+f>n)?"vertical":"horizontal"},yw=function(e,t,i){var n=i?e.left:e.top,s=i?e.right:e.bottom,o=i?e.width:e.height,a=i?t.left:t.top,l=i?t.right:t.bottom,c=i?t.width:t.height;return n===a||s===l||n+o/2===a+c/2},ww=function(e,t){var i;return ra.some(function(n){var s=n[rt].options.emptyInsertThreshold;if(!(!s||Du(n))){var o=_e(n),a=e>=o.left-s&&e<=o.right+s,l=t>=o.top-s&&t<=o.bottom+s;if(a&&l)return i=n}}),i},Pf=function(e){function t(s,o){return function(a,l,c,f){var m=a.options.group.name&&l.options.group.name&&a.options.group.name===l.options.group.name;if(s==null&&(o||m))return!0;if(s==null||s===!1)return!1;if(o&&s==="clone")return s;if(typeof s=="function")return t(s(a,l,c,f),o)(a,l,c,f);var y=(o?a:l).options.group.name;return s===!0||typeof s=="string"&&s===y||s.join&&s.indexOf(y)>-1}}var i={},n=e.group;(!n||Jo(n)!="object")&&(n={name:n}),i.name=n.name,i.checkPull=t(n.pull,!0),i.checkPut=t(n.put),i.revertClone=n.revertClone,e.group=i},Df=function(){!Nf&&W&&$(W,"display","none")},If=function(){!Nf&&W&&$(W,"display","")};sa&&!xf&&document.addEventListener("click",function(r){if(ta)return r.preventDefault(),r.stopPropagation&&r.stopPropagation(),r.stopImmediatePropagation&&r.stopImmediatePropagation(),ta=!1,!1},!0);var pi=function(e){if(j){e=e.touches?e.touches[0]:e;var t=ww(e.clientX,e.clientY);if(t){var i={};for(var n in e)e.hasOwnProperty(n)&&(i[n]=e[n]);i.target=i.rootEl=t,i.preventDefault=void 0,i.stopPropagation=void 0,t[rt]._onDragOver(i)}}},Aw=function(e){j&&j.parentNode[rt]._isOutsideThisEl(e.target)};function V(r,e){if(!(r&&r.nodeType&&r.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(r));this.el=r,this.options=e=sr({},e),r[rt]=this;var t={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(r.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Of(r,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(o,a){o.setData("Text",a.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:V.supportPointer!==!1&&"PointerEvent"in window&&!ms,emptyInsertThreshold:5};As.initializePlugins(this,r,t);for(var i in t)!(i in e)&&(e[i]=t[i]);Pf(e);for(var n in this)n.charAt(0)==="_"&&typeof this[n]=="function"&&(this[n]=this[n].bind(this));this.nativeDraggable=e.forceFallback?!1:vw,this.nativeDraggable&&(this.options.touchStartThreshold=1),e.supportPointer?X(r,"pointerdown",this._onTapStart):(X(r,"mousedown",this._onTapStart),X(r,"touchstart",this._onTapStart)),this.nativeDraggable&&(X(r,"dragover",this),X(r,"dragenter",this)),ra.push(this.el),e.store&&e.store.get&&this.sort(e.store.get(this)||[]),sr(this,fw())}V.prototype={constructor:V,_isOutsideThisEl:function(e){!this.el.contains(e)&&e!==this.el&&(Xi=null)},_getDirection:function(e,t){return typeof this.options.direction=="function"?this.options.direction.call(this,e,t,j):this.options.direction},_onTapStart:function(e){if(e.cancelable){var t=this,i=this.el,n=this.options,s=n.preventOnFilter,o=e.type,a=e.touches&&e.touches[0]||e.pointerType&&e.pointerType==="touch"&&e,l=(a||e).target,c=e.target.shadowRoot&&(e.path&&e.path[0]||e.composedPath&&e.composedPath()[0])||l,f=n.filter;if(Lw(i),!j&&!(/mousedown|pointerdown/.test(o)&&e.button!==0||n.disabled)&&!c.isContentEditable&&!(!this.nativeDraggable&&ms&&l&&l.tagName.toUpperCase()==="SELECT")&&(l=Dt(l,n.draggable,i,!1),!(l&&l.animated)&&Xo!==l)){if(Zi=kt(l),bs=kt(l,n.draggable),typeof f=="function"){if(f.call(this,e,l,this)){$e({sortable:t,rootEl:c,name:"filter",targetEl:l,toEl:i,fromEl:i}),tt("filter",t,{evt:e}),s&&e.preventDefault();return}}else if(f&&(f=f.split(",").some(function(m){if(m=Dt(c,m.trim(),i,!1),m)return $e({sortable:t,rootEl:m,name:"filter",targetEl:l,fromEl:i,toEl:i}),tt("filter",t,{evt:e}),!0}),f)){s&&e.preventDefault();return}n.handle&&!Dt(c,n.handle,i,!1)||this._prepareDragStart(e,a,l)}}},_prepareDragStart:function(e,t,i){var n=this,s=n.el,o=n.options,a=s.ownerDocument,l;if(i&&!j&&i.parentNode===s){var c=_e(i);if(oe=s,j=i,me=j.parentNode,mi=j.nextSibling,Xo=i,Vo=o.group,V.dragged=j,fi={target:j,clientX:(t||e).clientX,clientY:(t||e).clientY},vf=fi.clientX-c.left,yf=fi.clientY-c.top,this._lastX=(t||e).clientX,this._lastY=(t||e).clientY,j.style["will-change"]="all",l=function(){if(tt("delayEnded",n,{evt:e}),V.eventCanceled){n._onDrop();return}n._disableDelayedDragEvents(),!pf&&n.nativeDraggable&&(j.draggable=!0),n._triggerDragStart(e,t),$e({sortable:n,name:"choose",originalEvent:e}),mt(j,o.chosenClass,!0)},o.ignore.split(",").forEach(function(f){Sf(j,f.trim(),Su)}),X(a,"dragover",pi),X(a,"mousemove",pi),X(a,"touchmove",pi),o.supportPointer?(X(a,"pointerup",n._onDrop),!this.nativeDraggable&&X(a,"pointercancel",n._onDrop)):(X(a,"mouseup",n._onDrop),X(a,"touchend",n._onDrop),X(a,"touchcancel",n._onDrop)),pf&&this.nativeDraggable&&(this.options.touchStartThreshold=4,j.draggable=!0),tt("delayStart",this,{evt:e}),o.delay&&(!o.delayOnTouchOnly||t)&&(!this.nativeDraggable||!(ws||or))){if(V.eventCanceled){this._onDrop();return}o.supportPointer?(X(a,"pointerup",n._disableDelayedDrag),X(a,"pointercancel",n._disableDelayedDrag)):(X(a,"mouseup",n._disableDelayedDrag),X(a,"touchend",n._disableDelayedDrag),X(a,"touchcancel",n._disableDelayedDrag)),X(a,"mousemove",n._delayedDragTouchMoveHandler),X(a,"touchmove",n._delayedDragTouchMoveHandler),o.supportPointer&&X(a,"pointermove",n._delayedDragTouchMoveHandler),n._dragStartTimer=setTimeout(l,o.delay)}else l()}},_delayedDragTouchMoveHandler:function(e){var t=e.touches?e.touches[0]:e;Math.max(Math.abs(t.clientX-this._lastX),Math.abs(t.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){j&&Su(j),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var e=this.el.ownerDocument;J(e,"mouseup",this._disableDelayedDrag),J(e,"touchend",this._disableDelayedDrag),J(e,"touchcancel",this._disableDelayedDrag),J(e,"pointerup",this._disableDelayedDrag),J(e,"pointercancel",this._disableDelayedDrag),J(e,"mousemove",this._delayedDragTouchMoveHandler),J(e,"touchmove",this._delayedDragTouchMoveHandler),J(e,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(e,t){t=t||e.pointerType=="touch"&&e,!this.nativeDraggable||t?this.options.supportPointer?X(document,"pointermove",this._onTouchMove):t?X(document,"touchmove",this._onTouchMove):X(document,"mousemove",this._onTouchMove):(X(j,"dragend",this),X(oe,"dragstart",this._onDragStart));try{Zo(function(){document.selection?document.selection.empty():window.getSelection().removeAllRanges()})}catch{}},_dragStarted:function(e,t){if(Yi=!1,oe&&j){tt("dragStarted",this,{evt:t}),this.nativeDraggable&&X(document,"dragover",Aw);var i=this.options;!e&&mt(j,i.dragClass,!1),mt(j,i.ghostClass,!0),V.active=this,e&&this._appendGhost(),$e({sortable:this,name:"start",originalEvent:t})}else this._nulling()},_emulateDragOver:function(){if(Pt){this._lastX=Pt.clientX,this._lastY=Pt.clientY,Df();for(var e=document.elementFromPoint(Pt.clientX,Pt.clientY),t=e;e&&e.shadowRoot&&(e=e.shadowRoot.elementFromPoint(Pt.clientX,Pt.clientY),e!==t);)t=e;if(j.parentNode[rt]._isOutsideThisEl(e),t)do{if(t[rt]){var i=void 0;if(i=t[rt]._onDragOver({clientX:Pt.clientX,clientY:Pt.clientY,target:e,rootEl:t}),i&&!this.options.dragoverBubble)break}e=t}while(t=kf(t));If()}},_onTouchMove:function(e){if(fi){var t=this.options,i=t.fallbackTolerance,n=t.fallbackOffset,s=e.touches?e.touches[0]:e,o=W&&Qi(W,!0),a=W&&o&&o.a,l=W&&o&&o.d,c=Ko&&De&&bf(De),f=(s.clientX-fi.clientX+n.x)/(a||1)+(c?c[0]-ku[0]:0)/(a||1),m=(s.clientY-fi.clientY+n.y)/(l||1)+(c?c[1]-ku[1]:0)/(l||1);if(!V.active&&!Yi){if(i&&Math.max(Math.abs(s.clientX-this._lastX),Math.abs(s.clientY-this._lastY))<i)return;this._onDragStart(e,!0)}if(W){o?(o.e+=f-(xu||0),o.f+=m-(_u||0)):o={a:1,b:0,c:0,d:1,e:f,f:m};var y="matrix(".concat(o.a,",").concat(o.b,",").concat(o.c,",").concat(o.d,",").concat(o.e,",").concat(o.f,")");$(W,"webkitTransform",y),$(W,"mozTransform",y),$(W,"msTransform",y),$(W,"transform",y),xu=f,_u=m,Pt=s}e.cancelable&&e.preventDefault()}},_appendGhost:function(){if(!W){var e=this.options.fallbackOnBody?document.body:oe,t=_e(j,!0,Ko,!0,e),i=this.options;if(Ko){for(De=e;$(De,"position")==="static"&&$(De,"transform")==="none"&&De!==document;)De=De.parentNode;De!==document.body&&De!==document.documentElement?(De===document&&(De=$t()),t.top+=De.scrollTop,t.left+=De.scrollLeft):De=$t(),ku=bf(De)}W=j.cloneNode(!0),mt(W,i.ghostClass,!1),mt(W,i.fallbackClass,!0),mt(W,i.dragClass,!0),$(W,"transition",""),$(W,"transform",""),$(W,"box-sizing","border-box"),$(W,"margin",0),$(W,"top",t.top),$(W,"left",t.left),$(W,"width",t.width),$(W,"height",t.height),$(W,"opacity","0.8"),$(W,"position",Ko?"absolute":"fixed"),$(W,"zIndex","100000"),$(W,"pointerEvents","none"),V.ghost=W,e.appendChild(W),$(W,"transform-origin",vf/parseInt(W.style.width)*100+"% "+yf/parseInt(W.style.height)*100+"%")}},_onDragStart:function(e,t){var i=this,n=e.dataTransfer,s=i.options;if(tt("dragStart",this,{evt:e}),V.eventCanceled){this._onDrop();return}tt("setupClone",this),V.eventCanceled||(ue=Lf(j),ue.removeAttribute("id"),ue.draggable=!1,ue.style["will-change"]="",this._hideClone(),mt(ue,this.options.chosenClass,!1),V.clone=ue),i.cloneId=Zo(function(){tt("clone",i),!V.eventCanceled&&(i.options.removeCloneOnHide||oe.insertBefore(ue,j),i._hideClone(),$e({sortable:i,name:"clone"}))}),!t&&mt(j,s.dragClass,!0),t?(ta=!0,i._loopId=setInterval(i._emulateDragOver,50)):(J(document,"mouseup",i._onDrop),J(document,"touchend",i._onDrop),J(document,"touchcancel",i._onDrop),n&&(n.effectAllowed="move",s.setData&&s.setData.call(i,n,j)),X(document,"drop",i),$(j,"transform","translateZ(0)")),Yi=!0,i._dragStartId=Zo(i._dragStarted.bind(i,t,e)),X(document,"selectstart",i),hs=!0,ms&&$(document.body,"user-select","none")},_onDragOver:function(e){var t=this.el,i=e.target,n,s,o,a=this.options,l=a.group,c=V.active,f=Vo===l,m=a.sort,y=Oe||c,v,g=this,x=!1;if(Ru)return;function S(D,U){tt(D,g,Vt({evt:e,isOwner:f,axis:v?"vertical":"horizontal",revert:o,dragRect:n,targetRect:s,canSort:m,fromSortable:y,target:i,completed:I,onMove:function(z,ae){return Go(oe,t,j,n,z,_e(z),e,ae)},changed:u},U))}function T(){S("dragOverAnimationCapture"),g.captureAnimationState(),g!==y&&y.captureAnimationState()}function I(D){return S("dragOverCompleted",{insertion:D}),D&&(f?c._hideClone():c._showClone(g),g!==y&&(mt(j,Oe?Oe.options.ghostClass:c.options.ghostClass,!1),mt(j,a.ghostClass,!0)),Oe!==g&&g!==V.active?Oe=g:g===V.active&&Oe&&(Oe=null),y===g&&(g._ignoreWhileAnimating=i),g.animateAll(function(){S("dragOverAnimationComplete"),g._ignoreWhileAnimating=null}),g!==y&&(y.animateAll(),y._ignoreWhileAnimating=null)),(i===j&&!j.animated||i===t&&!i.animated)&&(Xi=null),!a.dragoverBubble&&!e.rootEl&&i!==document&&(j.parentNode[rt]._isOutsideThisEl(e.target),!D&&pi(e)),!a.dragoverBubble&&e.stopPropagation&&e.stopPropagation(),x=!0}function u(){gt=kt(j),Rr=kt(j,a.draggable),$e({sortable:g,name:"change",toEl:t,newIndex:gt,newDraggableIndex:Rr,originalEvent:e})}if(e.preventDefault!==void 0&&e.cancelable&&e.preventDefault(),i=Dt(i,a.draggable,t,!0),S("dragOver"),V.eventCanceled)return x;if(j.contains(e.target)||i.animated&&i.animatingX&&i.animatingY||g._ignoreWhileAnimating===i)return I(!1);if(ta=!1,c&&!a.disabled&&(f?m||(o=me!==oe):Oe===this||(this.lastPutMode=Vo.checkPull(this,c,j,e))&&l.checkPut(this,c,j,e))){if(v=this._getDirection(e,i)==="vertical",n=_e(j),S("dragOverValid"),V.eventCanceled)return x;if(o)return me=oe,T(),this._hideClone(),S("revert"),V.eventCanceled||(mi?oe.insertBefore(j,mi):oe.appendChild(j)),I(!0);var h=Du(t,a.draggable);if(!h||kw(e,v,this)&&!h.animated){if(h===j)return I(!1);if(h&&t===e.target&&(i=h),i&&(s=_e(i)),Go(oe,t,j,n,i,s,e,!!i)!==!1)return T(),h&&h.nextSibling?t.insertBefore(j,h.nextSibling):t.appendChild(j),me=t,u(),I(!0)}else if(h&&_w(e,v,this)){var d=en(t,0,a,!0);if(d===j)return I(!1);if(i=d,s=_e(i),Go(oe,t,j,n,i,s,e,!1)!==!1)return T(),t.insertBefore(j,d),me=t,u(),I(!0)}else if(i.parentNode===t){s=_e(i);var p=0,b,E=j.parentNode!==t,w=!yw(j.animated&&j.toRect||n,i.animated&&i.toRect||s,v),_=v?"top":"left",R=gf(i,"top","top")||gf(j,"top","top"),P=R?R.scrollTop:void 0;Xi!==i&&(b=s[_],ys=!1,Wo=!w&&a.invertSwap||E),p=Sw(e,i,s,v,w?1:a.swapThreshold,a.invertedSwapThreshold==null?a.swapThreshold:a.invertedSwapThreshold,Wo,Xi===i);var O;if(p!==0){var M=kt(j);do M-=p,O=me.children[M];while(O&&($(O,"display")==="none"||O===W))}if(p===0||O===i)return I(!1);Xi=i,vs=p;var A=i.nextElementSibling,N=!1;N=p===1;var L=Go(oe,t,j,n,i,s,e,N);if(L!==!1)return(L===1||L===-1)&&(N=L===1),Ru=!0,setTimeout(xw,30),T(),N&&!A?t.appendChild(j):i.parentNode.insertBefore(j,N?A:i),R&&Tf(R,0,P-R.scrollTop),me=j.parentNode,b!==void 0&&!Wo&&(Yo=Math.abs(b-_e(i)[_])),u(),I(!0)}if(t.contains(j))return I(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){J(document,"mousemove",this._onTouchMove),J(document,"touchmove",this._onTouchMove),J(document,"pointermove",this._onTouchMove),J(document,"dragover",pi),J(document,"mousemove",pi),J(document,"touchmove",pi)},_offUpEvents:function(){var e=this.el.ownerDocument;J(e,"mouseup",this._onDrop),J(e,"touchend",this._onDrop),J(e,"pointerup",this._onDrop),J(e,"pointercancel",this._onDrop),J(e,"touchcancel",this._onDrop),J(document,"selectstart",this)},_onDrop:function(e){var t=this.el,i=this.options;if(gt=kt(j),Rr=kt(j,i.draggable),tt("drop",this,{evt:e}),me=j&&j.parentNode,gt=kt(j),Rr=kt(j,i.draggable),V.eventCanceled){this._nulling();return}Yi=!1,Wo=!1,ys=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),Nu(this.cloneId),Nu(this._dragStartId),this.nativeDraggable&&(J(document,"drop",this),J(t,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),ms&&$(document.body,"user-select",""),$(j,"transform",""),e&&(hs&&(e.cancelable&&e.preventDefault(),!i.dropBubble&&e.stopPropagation()),W&&W.parentNode&&W.parentNode.removeChild(W),(oe===me||Oe&&Oe.lastPutMode!=="clone")&&ue&&ue.parentNode&&ue.parentNode.removeChild(ue),j&&(this.nativeDraggable&&J(j,"dragend",this),Su(j),j.style["will-change"]="",hs&&!Yi&&mt(j,Oe?Oe.options.ghostClass:this.options.ghostClass,!1),mt(j,this.options.chosenClass,!1),$e({sortable:this,name:"unchoose",toEl:me,newIndex:null,newDraggableIndex:null,originalEvent:e}),oe!==me?(gt>=0&&($e({rootEl:me,name:"add",toEl:me,fromEl:oe,originalEvent:e}),$e({sortable:this,name:"remove",toEl:me,originalEvent:e}),$e({rootEl:me,name:"sort",toEl:me,fromEl:oe,originalEvent:e}),$e({sortable:this,name:"sort",toEl:me,originalEvent:e})),Oe&&Oe.save()):gt!==Zi&&gt>=0&&($e({sortable:this,name:"update",toEl:me,originalEvent:e}),$e({sortable:this,name:"sort",toEl:me,originalEvent:e})),V.active&&((gt==null||gt===-1)&&(gt=Zi,Rr=bs),$e({sortable:this,name:"end",toEl:me,originalEvent:e}),this.save()))),this._nulling()},_nulling:function(){tt("nulling",this),oe=j=me=W=mi=ue=Xo=Nr=fi=Pt=hs=gt=Rr=Zi=bs=Xi=vs=Oe=Vo=V.dragged=V.ghost=V.clone=V.active=null,ia.forEach(function(e){e.checked=!0}),ia.length=xu=_u=0},handleEvent:function(e){switch(e.type){case"drop":case"dragend":this._onDrop(e);break;case"dragenter":case"dragover":j&&(this._onDragOver(e),Ew(e));break;case"selectstart":e.preventDefault();break}},toArray:function(){for(var e=[],t,i=this.el.children,n=0,s=i.length,o=this.options;n<s;n++)t=i[n],Dt(t,o.draggable,this.el,!1)&&e.push(t.getAttribute(o.dataIdAttr)||Tw(t));return e},sort:function(e,t){var i={},n=this.el;this.toArray().forEach(function(s,o){var a=n.children[o];Dt(a,this.options.draggable,n,!1)&&(i[s]=a)},this),t&&this.captureAnimationState(),e.forEach(function(s){i[s]&&(n.removeChild(i[s]),n.appendChild(i[s]))}),t&&this.animateAll()},save:function(){var e=this.options.store;e&&e.set&&e.set(this)},closest:function(e,t){return Dt(e,t||this.options.draggable,this.el,!1)},option:function(e,t){var i=this.options;if(t===void 0)return i[e];var n=As.modifyOption(this,e,t);typeof n<"u"?i[e]=n:i[e]=t,e==="group"&&Pf(i)},destroy:function(){tt("destroy",this);var e=this.el;e[rt]=null,J(e,"mousedown",this._onTapStart),J(e,"touchstart",this._onTapStart),J(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(J(e,"dragover",this),J(e,"dragenter",this)),Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),function(t){t.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),ra.splice(ra.indexOf(this.el),1),this.el=e=null},_hideClone:function(){if(!Nr){if(tt("hideClone",this),V.eventCanceled)return;$(ue,"display","none"),this.options.removeCloneOnHide&&ue.parentNode&&ue.parentNode.removeChild(ue),Nr=!0}},_showClone:function(e){if(e.lastPutMode!=="clone"){this._hideClone();return}if(Nr){if(tt("showClone",this),V.eventCanceled)return;j.parentNode==oe&&!this.options.group.revertClone?oe.insertBefore(ue,j):mi?oe.insertBefore(ue,mi):oe.appendChild(ue),this.options.group.revertClone&&this.animate(j,ue),$(ue,"display",""),Nr=!1}}};function Ew(r){r.dataTransfer&&(r.dataTransfer.dropEffect="move"),r.cancelable&&r.preventDefault()}function Go(r,e,t,i,n,s,o,a){var l,c=r[rt],f=c.options.onMove,m;return window.CustomEvent&&!or&&!ws?l=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(l=document.createEvent("Event"),l.initEvent("move",!0,!0)),l.to=e,l.from=r,l.dragged=t,l.draggedRect=i,l.related=n||e,l.relatedRect=s||_e(e),l.willInsertAfter=a,l.originalEvent=o,r.dispatchEvent(l),f&&(m=f.call(c,l,o)),m}function Su(r){r.draggable=!1}function xw(){Ru=!1}function _w(r,e,t){var i=_e(en(t.el,0,t.options,!0)),n=Rf(t.el,t.options,W),s=10;return e?r.clientX<n.left-s||r.clientY<i.top&&r.clientX<i.right:r.clientY<n.top-s||r.clientY<i.bottom&&r.clientX<i.left}function kw(r,e,t){var i=_e(Du(t.el,t.options.draggable)),n=Rf(t.el,t.options,W),s=10;return e?r.clientX>n.right+s||r.clientY>i.bottom&&r.clientX>i.left:r.clientY>n.bottom+s||r.clientX>i.right&&r.clientY>i.top}function Sw(r,e,t,i,n,s,o,a){var l=i?r.clientY:r.clientX,c=i?t.height:t.width,f=i?t.top:t.left,m=i?t.bottom:t.right,y=!1;if(!o){if(a&&Yo<c*n){if(!ys&&(vs===1?l>f+c*s/2:l<m-c*s/2)&&(ys=!0),ys)y=!0;else if(vs===1?l<f+Yo:l>m-Yo)return-vs}else if(l>f+c*(1-n)/2&&l<m-c*(1-n)/2)return Cw(e)}return y=y||o,y&&(l<f+c*s/2||l>m-c*s/2)?l>f+c/2?1:-1:0}function Cw(r){return kt(j)<kt(r)?1:-1}function Tw(r){for(var e=r.tagName+r.className+r.src+r.href+r.textContent,t=e.length,i=0;t--;)i+=e.charCodeAt(t);return i.toString(36)}function Lw(r){ia.length=0;for(var e=r.getElementsByTagName("input"),t=e.length;t--;){var i=e[t];i.checked&&ia.push(i)}}function Zo(r){return setTimeout(r,0)}function Nu(r){return clearTimeout(r)}sa&&X(document,"touchmove",function(r){(V.active||Yi)&&r.cancelable&&r.preventDefault()});V.utils={on:X,off:J,css:$,find:Sf,is:function(e,t){return!!Dt(e,t,e,!1)},extend:dw,throttle:Cf,closest:Dt,toggleClass:mt,clone:Lf,index:kt,nextTick:Zo,cancelNextTick:Nu,detectDirection:Of,getChild:en,expando:rt};V.get=function(r){return r[rt]};V.mount=function(){for(var r=arguments.length,e=new Array(r),t=0;t<r;t++)e[t]=arguments[t];e[0].constructor===Array&&(e=e[0]),e.forEach(function(i){if(!i.prototype||!i.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(i));i.utils&&(V.utils=Vt(Vt({},V.utils),i.utils)),As.mount(i)})};V.create=function(r,e){return new V(r,e)};V.version=uw;var xe=[],fs,Ou,Pu=!1,Cu,Tu,na,ps;function Rw(){function r(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var e in this)e.charAt(0)==="_"&&typeof this[e]=="function"&&(this[e]=this[e].bind(this))}return r.prototype={dragStarted:function(t){var i=t.originalEvent;this.sortable.nativeDraggable?X(document,"dragover",this._handleAutoScroll):this.options.supportPointer?X(document,"pointermove",this._handleFallbackAutoScroll):i.touches?X(document,"touchmove",this._handleFallbackAutoScroll):X(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(t){var i=t.originalEvent;!this.options.dragOverBubble&&!i.rootEl&&this._handleAutoScroll(i)},drop:function(){this.sortable.nativeDraggable?J(document,"dragover",this._handleAutoScroll):(J(document,"pointermove",this._handleFallbackAutoScroll),J(document,"touchmove",this._handleFallbackAutoScroll),J(document,"mousemove",this._handleFallbackAutoScroll)),Af(),Qo(),hw()},nulling:function(){na=Ou=fs=Pu=ps=Cu=Tu=null,xe.length=0},_handleFallbackAutoScroll:function(t){this._handleAutoScroll(t,!0)},_handleAutoScroll:function(t,i){var n=this,s=(t.touches?t.touches[0]:t).clientX,o=(t.touches?t.touches[0]:t).clientY,a=document.elementFromPoint(s,o);if(na=t,i||this.options.forceAutoScrollFallback||ws||or||ms){Lu(t,this.options,a,i);var l=Or(a,!0);Pu&&(!ps||s!==Cu||o!==Tu)&&(ps&&Af(),ps=setInterval(function(){var c=Or(document.elementFromPoint(s,o),!0);c!==l&&(l=c,Qo()),Lu(t,n.options,c,i)},10),Cu=s,Tu=o)}else{if(!this.options.bubbleScroll||Or(a,!0)===$t()){Qo();return}Lu(t,this.options,Or(a,!1),!1)}}},sr(r,{pluginName:"scroll",initializeByDefault:!0})}function Qo(){xe.forEach(function(r){clearInterval(r.pid)}),xe=[]}function Af(){clearInterval(ps)}var Lu=Cf(function(r,e,t,i){if(e.scroll){var n=(r.touches?r.touches[0]:r).clientX,s=(r.touches?r.touches[0]:r).clientY,o=e.scrollSensitivity,a=e.scrollSpeed,l=$t(),c=!1,f;Ou!==t&&(Ou=t,Qo(),fs=e.scroll,f=e.scrollFn,fs===!0&&(fs=Or(t,!0)));var m=0,y=fs;do{var v=y,g=_e(v),x=g.top,S=g.bottom,T=g.left,I=g.right,u=g.width,h=g.height,d=void 0,p=void 0,b=v.scrollWidth,E=v.scrollHeight,w=$(v),_=v.scrollLeft,R=v.scrollTop;v===l?(d=u<b&&(w.overflowX==="auto"||w.overflowX==="scroll"||w.overflowX==="visible"),p=h<E&&(w.overflowY==="auto"||w.overflowY==="scroll"||w.overflowY==="visible")):(d=u<b&&(w.overflowX==="auto"||w.overflowX==="scroll"),p=h<E&&(w.overflowY==="auto"||w.overflowY==="scroll"));var P=d&&(Math.abs(I-n)<=o&&_+u<b)-(Math.abs(T-n)<=o&&!!_),O=p&&(Math.abs(S-s)<=o&&R+h<E)-(Math.abs(x-s)<=o&&!!R);if(!xe[m])for(var M=0;M<=m;M++)xe[M]||(xe[M]={});(xe[m].vx!=P||xe[m].vy!=O||xe[m].el!==v)&&(xe[m].el=v,xe[m].vx=P,xe[m].vy=O,clearInterval(xe[m].pid),(P!=0||O!=0)&&(c=!0,xe[m].pid=setInterval(function(){i&&this.layer===0&&V.active._onTouchMove(na);var A=xe[this.layer].vy?xe[this.layer].vy*a:0,N=xe[this.layer].vx?xe[this.layer].vx*a:0;typeof f=="function"&&f.call(V.dragged.parentNode[rt],N,A,r,na,xe[this.layer].el)!=="continue"||Tf(xe[this.layer].el,N,A)}.bind({layer:m}),24))),m++}while(e.bubbleScroll&&y!==l&&(y=Or(y,!1)));Pu=c}},30),Mf=function(e){var t=e.originalEvent,i=e.putSortable,n=e.dragEl,s=e.activeSortable,o=e.dispatchSortableEvent,a=e.hideGhostForTarget,l=e.unhideGhostForTarget;if(t){var c=i||s;a();var f=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,m=document.elementFromPoint(f.clientX,f.clientY);l(),c&&!c.el.contains(m)&&(o("spill"),this.onSpill({dragEl:n,putSortable:i}))}};function Iu(){}Iu.prototype={startIndex:null,dragStart:function(e){var t=e.oldDraggableIndex;this.startIndex=t},onSpill:function(e){var t=e.dragEl,i=e.putSortable;this.sortable.captureAnimationState(),i&&i.captureAnimationState();var n=en(this.sortable.el,this.startIndex,this.options);n?this.sortable.el.insertBefore(t,n):this.sortable.el.appendChild(t),this.sortable.animateAll(),i&&i.animateAll()},drop:Mf};sr(Iu,{pluginName:"revertOnSpill"});function Mu(){}Mu.prototype={onSpill:function(e){var t=e.dragEl,i=e.putSortable,n=i||this.sortable;n.captureAnimationState(),t.parentNode&&t.parentNode.removeChild(t),n.animateAll()},drop:Mf};sr(Mu,{pluginName:"removeOnSpill"});V.mount(new Rw);V.mount(Mu,Iu);var Bf=V;var Ff={mounted(){let r=new Bf(this.el,{animation:1,delay:4,delayOnTouchOnly:!0,group:"shared",draggable:".draggable",ghostClass:".sortable-ghost",handle:".drag-handle",onEnd:e=>{e.preventDefault(),console.log("onEnd"),this.pushEvent("dropped",{draggedId:e.item.id,toDropzoneId:e.to.id,fromDropzoneId:e.from.id,newDraggableIndex:e.newDraggableIndex,oldDraggableIndex:e.oldDraggableIndex,newOrder:r.toArray()})}})}};var Nw=typeof global=="object"&&global&&global.Object===Object&&global,oa=Nw;var Ow=typeof self=="object"&&self&&self.Object===Object&&self,Pw=oa||Ow||Function("return this")(),ke=Pw;var Dw=ke.Symbol,St=Dw;var jf=Object.prototype,Iw=jf.hasOwnProperty,Mw=jf.toString,Es=St?St.toStringTag:void 0;function Bw(r){var e=Iw.call(r,Es),t=r[Es];try{r[Es]=void 0;var i=!0}catch{}var n=Mw.call(r);return i&&(e?r[Es]=t:delete r[Es]),n}var qf=Bw;var Fw=Object.prototype,jw=Fw.toString;function qw(r){return jw.call(r)}var Hf=qw;var Hw="[object Null]",Uw="[object Undefined]",Uf=St?St.toStringTag:void 0;function zw(r){return r==null?r===void 0?Uw:Hw:Uf&&Uf in Object(r)?qf(r):Hf(r)}var It=zw;function $w(r){return r!=null&&typeof r=="object"}var Pe=$w;var Vw=Array.isArray,Ct=Vw;function Ww(r){var e=typeof r;return r!=null&&(e=="object"||e=="function")}var Ie=Ww;function Kw(r){return r}var aa=Kw;var Gw="[object AsyncFunction]",Jw="[object Function]",Xw="[object GeneratorFunction]",Yw="[object Proxy]";function Zw(r){if(!Ie(r))return!1;var e=It(r);return e==Jw||e==Xw||e==Gw||e==Yw}var tn=Zw;var Qw=ke["__core-js_shared__"],la=Qw;var zf=function(){var r=/[^.]+$/.exec(la&&la.keys&&la.keys.IE_PROTO||"");return r?"Symbol(src)_1."+r:""}();function eA(r){return!!zf&&zf in r}var $f=eA;var tA=Function.prototype,rA=tA.toString;function iA(r){if(r!=null){try{return rA.call(r)}catch{}try{return r+""}catch{}}return""}var ar=iA;var nA=/[\\^$.*+?()[\]{}|]/g,sA=/^\[object .+?Constructor\]$/,oA=Function.prototype,aA=Object.prototype,lA=oA.toString,uA=aA.hasOwnProperty,cA=RegExp("^"+lA.call(uA).replace(nA,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function dA(r){if(!Ie(r)||$f(r))return!1;var e=tn(r)?cA:sA;return e.test(ar(r))}var Vf=dA;function hA(r,e){return r?.[e]}var Wf=hA;function fA(r,e){var t=Wf(r,e);return Vf(t)?t:void 0}var it=fA;var pA=it(ke,"WeakMap"),ua=pA;var Kf=Object.create,mA=function(){function r(){}return function(e){if(!Ie(e))return{};if(Kf)return Kf(e);r.prototype=e;var t=new r;return r.prototype=void 0,t}}(),Gf=mA;function gA(r,e,t){switch(t.length){case 0:return r.call(e);case 1:return r.call(e,t[0]);case 2:return r.call(e,t[0],t[1]);case 3:return r.call(e,t[0],t[1],t[2])}return r.apply(e,t)}var Jf=gA;function bA(r,e){var t=-1,i=r.length;for(e||(e=Array(i));++t<i;)e[t]=r[t];return e}var ca=bA;var vA=800,yA=16,wA=Date.now;function AA(r){var e=0,t=0;return function(){var i=wA(),n=yA-(i-t);if(t=i,n>0){if(++e>=vA)return arguments[0]}else e=0;return r.apply(void 0,arguments)}}var Xf=AA;function EA(r){return function(){return r}}var Yf=EA;var xA=function(){try{var r=it(Object,"defineProperty");return r({},"",{}),r}catch{}}(),rn=xA;var _A=rn?function(r,e){return rn(r,"toString",{configurable:!0,enumerable:!1,value:Yf(e),writable:!0})}:aa,Zf=_A;var kA=Xf(Zf),Qf=kA;function SA(r,e){for(var t=-1,i=r==null?0:r.length;++t<i&&e(r[t],t,r)!==!1;);return r}var ep=SA;var CA=9007199254740991,TA=/^(?:0|[1-9]\d*)$/;function LA(r,e){var t=typeof r;return e=e??CA,!!e&&(t=="number"||t!="symbol"&&TA.test(r))&&r>-1&&r%1==0&&r<e}var da=LA;function RA(r,e,t){e=="__proto__"&&rn?rn(r,e,{configurable:!0,enumerable:!0,value:t,writable:!0}):r[e]=t}var nn=RA;function NA(r,e){return r===e||r!==r&&e!==e}var Wt=NA;var OA=Object.prototype,PA=OA.hasOwnProperty;function DA(r,e,t){var i=r[e];(!(PA.call(r,e)&&Wt(i,t))||t===void 0&&!(e in r))&&nn(r,e,t)}var ha=DA;function IA(r,e,t,i){var n=!t;t||(t={});for(var s=-1,o=e.length;++s<o;){var a=e[s],l=i?i(t[a],r[a],a,t,r):void 0;l===void 0&&(l=r[a]),n?nn(t,a,l):ha(t,a,l)}return t}var Kt=IA;var tp=Math.max;function MA(r,e,t){return e=tp(e===void 0?r.length-1:e,0),function(){for(var i=arguments,n=-1,s=tp(i.length-e,0),o=Array(s);++n<s;)o[n]=i[e+n];n=-1;for(var a=Array(e+1);++n<e;)a[n]=i[n];return a[e]=t(o),Jf(r,this,a)}}var rp=MA;function BA(r,e){return Qf(rp(r,e,aa),r+"")}var ip=BA;var FA=9007199254740991;function jA(r){return typeof r=="number"&&r>-1&&r%1==0&&r<=FA}var fa=jA;function qA(r){return r!=null&&fa(r.length)&&!tn(r)}var Pr=qA;function HA(r,e,t){if(!Ie(t))return!1;var i=typeof e;return(i=="number"?Pr(t)&&da(e,t.length):i=="string"&&e in t)?Wt(t[e],r):!1}var np=HA;function UA(r){return ip(function(e,t){var i=-1,n=t.length,s=n>1?t[n-1]:void 0,o=n>2?t[2]:void 0;for(s=r.length>3&&typeof s=="function"?(n--,s):void 0,o&&np(t[0],t[1],o)&&(s=n<3?void 0:s,n=1),e=Object(e);++i<n;){var a=t[i];a&&r(e,a,i,s)}return e})}var sp=UA;var zA=Object.prototype;function $A(r){var e=r&&r.constructor,t=typeof e=="function"&&e.prototype||zA;return r===t}var sn=$A;function VA(r,e){for(var t=-1,i=Array(r);++t<r;)i[t]=e(t);return i}var op=VA;var WA="[object Arguments]";function KA(r){return Pe(r)&&It(r)==WA}var Bu=KA;var ap=Object.prototype,GA=ap.hasOwnProperty,JA=ap.propertyIsEnumerable,XA=Bu(function(){return arguments}())?Bu:function(r){return Pe(r)&&GA.call(r,"callee")&&!JA.call(r,"callee")},xs=XA;function YA(){return!1}var lp=YA;var dp=typeof exports=="object"&&exports&&!exports.nodeType&&exports,up=dp&&typeof module=="object"&&module&&!module.nodeType&&module,ZA=up&&up.exports===dp,cp=ZA?ke.Buffer:void 0,QA=cp?cp.isBuffer:void 0,e1=QA||lp,lr=e1;var t1="[object Arguments]",r1="[object Array]",i1="[object Boolean]",n1="[object Date]",s1="[object Error]",o1="[object Function]",a1="[object Map]",l1="[object Number]",u1="[object Object]",c1="[object RegExp]",d1="[object Set]",h1="[object String]",f1="[object WeakMap]",p1="[object ArrayBuffer]",m1="[object DataView]",g1="[object Float32Array]",b1="[object Float64Array]",v1="[object Int8Array]",y1="[object Int16Array]",w1="[object Int32Array]",A1="[object Uint8Array]",E1="[object Uint8ClampedArray]",x1="[object Uint16Array]",_1="[object Uint32Array]",ie={};ie[g1]=ie[b1]=ie[v1]=ie[y1]=ie[w1]=ie[A1]=ie[E1]=ie[x1]=ie[_1]=!0;ie[t1]=ie[r1]=ie[p1]=ie[i1]=ie[m1]=ie[n1]=ie[s1]=ie[o1]=ie[a1]=ie[l1]=ie[u1]=ie[c1]=ie[d1]=ie[h1]=ie[f1]=!1;function k1(r){return Pe(r)&&fa(r.length)&&!!ie[It(r)]}var hp=k1;function S1(r){return function(e){return r(e)}}var on=S1;var fp=typeof exports=="object"&&exports&&!exports.nodeType&&exports,_s=fp&&typeof module=="object"&&module&&!module.nodeType&&module,C1=_s&&_s.exports===fp,Fu=C1&&oa.process,T1=function(){try{var r=_s&&_s.require&&_s.require("util").types;return r||Fu&&Fu.binding&&Fu.binding("util")}catch{}}(),ur=T1;var pp=ur&&ur.isTypedArray,L1=pp?on(pp):hp,an=L1;var R1=Object.prototype,N1=R1.hasOwnProperty;function O1(r,e){var t=Ct(r),i=!t&&xs(r),n=!t&&!i&&lr(r),s=!t&&!i&&!n&&an(r),o=t||i||n||s,a=o?op(r.length,String):[],l=a.length;for(var c in r)(e||N1.call(r,c))&&!(o&&(c=="length"||n&&(c=="offset"||c=="parent")||s&&(c=="buffer"||c=="byteLength"||c=="byteOffset")||da(c,l)))&&a.push(c);return a}var pa=O1;function P1(r,e){return function(t){return r(e(t))}}var ma=P1;var D1=ma(Object.keys,Object),mp=D1;var I1=Object.prototype,M1=I1.hasOwnProperty;function B1(r){if(!sn(r))return mp(r);var e=[];for(var t in Object(r))M1.call(r,t)&&t!="constructor"&&e.push(t);return e}var gp=B1;function F1(r){return Pr(r)?pa(r):gp(r)}var ln=F1;function j1(r){var e=[];if(r!=null)for(var t in Object(r))e.push(t);return e}var bp=j1;var q1=Object.prototype,H1=q1.hasOwnProperty;function U1(r){if(!Ie(r))return bp(r);var e=sn(r),t=[];for(var i in r)i=="constructor"&&(e||!H1.call(r,i))||t.push(i);return t}var vp=U1;function z1(r){return Pr(r)?pa(r,!0):vp(r)}var Gt=z1;var $1=it(Object,"create"),cr=$1;function V1(){this.__data__=cr?cr(null):{},this.size=0}var yp=V1;function W1(r){var e=this.has(r)&&delete this.__data__[r];return this.size-=e?1:0,e}var wp=W1;var K1="__lodash_hash_undefined__",G1=Object.prototype,J1=G1.hasOwnProperty;function X1(r){var e=this.__data__;if(cr){var t=e[r];return t===K1?void 0:t}return J1.call(e,r)?e[r]:void 0}var Ap=X1;var Y1=Object.prototype,Z1=Y1.hasOwnProperty;function Q1(r){var e=this.__data__;return cr?e[r]!==void 0:Z1.call(e,r)}var Ep=Q1;var eE="__lodash_hash_undefined__";function tE(r,e){var t=this.__data__;return this.size+=this.has(r)?0:1,t[r]=cr&&e===void 0?eE:e,this}var xp=tE;function un(r){var e=-1,t=r==null?0:r.length;for(this.clear();++e<t;){var i=r[e];this.set(i[0],i[1])}}un.prototype.clear=yp;un.prototype.delete=wp;un.prototype.get=Ap;un.prototype.has=Ep;un.prototype.set=xp;var ju=un;function rE(){this.__data__=[],this.size=0}var _p=rE;function iE(r,e){for(var t=r.length;t--;)if(Wt(r[t][0],e))return t;return-1}var Dr=iE;var nE=Array.prototype,sE=nE.splice;function oE(r){var e=this.__data__,t=Dr(e,r);if(t<0)return!1;var i=e.length-1;return t==i?e.pop():sE.call(e,t,1),--this.size,!0}var kp=oE;function aE(r){var e=this.__data__,t=Dr(e,r);return t<0?void 0:e[t][1]}var Sp=aE;function lE(r){return Dr(this.__data__,r)>-1}var Cp=lE;function uE(r,e){var t=this.__data__,i=Dr(t,r);return i<0?(++this.size,t.push([r,e])):t[i][1]=e,this}var Tp=uE;function cn(r){var e=-1,t=r==null?0:r.length;for(this.clear();++e<t;){var i=r[e];this.set(i[0],i[1])}}cn.prototype.clear=_p;cn.prototype.delete=kp;cn.prototype.get=Sp;cn.prototype.has=Cp;cn.prototype.set=Tp;var Ir=cn;var cE=it(ke,"Map"),Mr=cE;function dE(){this.size=0,this.__data__={hash:new ju,map:new(Mr||Ir),string:new ju}}var Lp=dE;function hE(r){var e=typeof r;return e=="string"||e=="number"||e=="symbol"||e=="boolean"?r!=="__proto__":r===null}var Rp=hE;function fE(r,e){var t=r.__data__;return Rp(e)?t[typeof e=="string"?"string":"hash"]:t.map}var Br=fE;function pE(r){var e=Br(this,r).delete(r);return this.size-=e?1:0,e}var Np=pE;function mE(r){return Br(this,r).get(r)}var Op=mE;function gE(r){return Br(this,r).has(r)}var Pp=gE;function bE(r,e){var t=Br(this,r),i=t.size;return t.set(r,e),this.size+=t.size==i?0:1,this}var Dp=bE;function dn(r){var e=-1,t=r==null?0:r.length;for(this.clear();++e<t;){var i=r[e];this.set(i[0],i[1])}}dn.prototype.clear=Lp;dn.prototype.delete=Np;dn.prototype.get=Op;dn.prototype.has=Pp;dn.prototype.set=Dp;var ga=dn;function vE(r,e){for(var t=-1,i=e.length,n=r.length;++t<i;)r[n+t]=e[t];return r}var ba=vE;var yE=ma(Object.getPrototypeOf,Object),hn=yE;var wE="[object Object]",AE=Function.prototype,EE=Object.prototype,Ip=AE.toString,xE=EE.hasOwnProperty,_E=Ip.call(Object);function kE(r){if(!Pe(r)||It(r)!=wE)return!1;var e=hn(r);if(e===null)return!0;var t=xE.call(e,"constructor")&&e.constructor;return typeof t=="function"&&t instanceof t&&Ip.call(t)==_E}var Mp=kE;function SE(){this.__data__=new Ir,this.size=0}var Bp=SE;function CE(r){var e=this.__data__,t=e.delete(r);return this.size=e.size,t}var Fp=CE;function TE(r){return this.__data__.get(r)}var jp=TE;function LE(r){return this.__data__.has(r)}var qp=LE;var RE=200;function NE(r,e){var t=this.__data__;if(t instanceof Ir){var i=t.__data__;if(!Mr||i.length<RE-1)return i.push([r,e]),this.size=++t.size,this;t=this.__data__=new ga(i)}return t.set(r,e),this.size=t.size,this}var Hp=NE;function fn(r){var e=this.__data__=new Ir(r);this.size=e.size}fn.prototype.clear=Bp;fn.prototype.delete=Fp;fn.prototype.get=jp;fn.prototype.has=qp;fn.prototype.set=Hp;var Fr=fn;function OE(r,e){return r&&Kt(e,ln(e),r)}var Up=OE;function PE(r,e){return r&&Kt(e,Gt(e),r)}var zp=PE;var Kp=typeof exports=="object"&&exports&&!exports.nodeType&&exports,$p=Kp&&typeof module=="object"&&module&&!module.nodeType&&module,DE=$p&&$p.exports===Kp,Vp=DE?ke.Buffer:void 0,Wp=Vp?Vp.allocUnsafe:void 0;function IE(r,e){if(e)return r.slice();var t=r.length,i=Wp?Wp(t):new r.constructor(t);return r.copy(i),i}var va=IE;function ME(r,e){for(var t=-1,i=r==null?0:r.length,n=0,s=[];++t<i;){var o=r[t];e(o,t,r)&&(s[n++]=o)}return s}var Gp=ME;function BE(){return[]}var ya=BE;var FE=Object.prototype,jE=FE.propertyIsEnumerable,Jp=Object.getOwnPropertySymbols,qE=Jp?function(r){return r==null?[]:(r=Object(r),Gp(Jp(r),function(e){return jE.call(r,e)}))}:ya,pn=qE;function HE(r,e){return Kt(r,pn(r),e)}var Xp=HE;var UE=Object.getOwnPropertySymbols,zE=UE?function(r){for(var e=[];r;)ba(e,pn(r)),r=hn(r);return e}:ya,wa=zE;function $E(r,e){return Kt(r,wa(r),e)}var Yp=$E;function VE(r,e,t){var i=e(r);return Ct(r)?i:ba(i,t(r))}var Aa=VE;function WE(r){return Aa(r,ln,pn)}var ks=WE;function KE(r){return Aa(r,Gt,wa)}var Zp=KE;var GE=it(ke,"DataView"),Ea=GE;var JE=it(ke,"Promise"),xa=JE;var XE=it(ke,"Set"),_a=XE;var Qp="[object Map]",YE="[object Object]",em="[object Promise]",tm="[object Set]",rm="[object WeakMap]",im="[object DataView]",ZE=ar(Ea),QE=ar(Mr),ex=ar(xa),tx=ar(_a),rx=ar(ua),gi=It;(Ea&&gi(new Ea(new ArrayBuffer(1)))!=im||Mr&&gi(new Mr)!=Qp||xa&&gi(xa.resolve())!=em||_a&&gi(new _a)!=tm||ua&&gi(new ua)!=rm)&&(gi=function(r){var e=It(r),t=e==YE?r.constructor:void 0,i=t?ar(t):"";if(i)switch(i){case ZE:return im;case QE:return Qp;case ex:return em;case tx:return tm;case rx:return rm}return e});var dr=gi;var ix=Object.prototype,nx=ix.hasOwnProperty;function sx(r){var e=r.length,t=new r.constructor(e);return e&&typeof r[0]=="string"&&nx.call(r,"index")&&(t.index=r.index,t.input=r.input),t}var nm=sx;var ox=ke.Uint8Array,mn=ox;function ax(r){var e=new r.constructor(r.byteLength);return new mn(e).set(new mn(r)),e}var gn=ax;function lx(r,e){var t=e?gn(r.buffer):r.buffer;return new r.constructor(t,r.byteOffset,r.byteLength)}var sm=lx;var ux=/\w*$/;function cx(r){var e=new r.constructor(r.source,ux.exec(r));return e.lastIndex=r.lastIndex,e}var om=cx;var am=St?St.prototype:void 0,lm=am?am.valueOf:void 0;function dx(r){return lm?Object(lm.call(r)):{}}var um=dx;function hx(r,e){var t=e?gn(r.buffer):r.buffer;return new r.constructor(t,r.byteOffset,r.length)}var ka=hx;var fx="[object Boolean]",px="[object Date]",mx="[object Map]",gx="[object Number]",bx="[object RegExp]",vx="[object Set]",yx="[object String]",wx="[object Symbol]",Ax="[object ArrayBuffer]",Ex="[object DataView]",xx="[object Float32Array]",_x="[object Float64Array]",kx="[object Int8Array]",Sx="[object Int16Array]",Cx="[object Int32Array]",Tx="[object Uint8Array]",Lx="[object Uint8ClampedArray]",Rx="[object Uint16Array]",Nx="[object Uint32Array]";function Ox(r,e,t){var i=r.constructor;switch(e){case Ax:return gn(r);case fx:case px:return new i(+r);case Ex:return sm(r,t);case xx:case _x:case kx:case Sx:case Cx:case Tx:case Lx:case Rx:case Nx:return ka(r,t);case mx:return new i;case gx:case yx:return new i(r);case bx:return om(r);case vx:return new i;case wx:return um(r)}}var cm=Ox;function Px(r){return typeof r.constructor=="function"&&!sn(r)?Gf(hn(r)):{}}var Sa=Px;var Dx="[object Map]";function Ix(r){return Pe(r)&&dr(r)==Dx}var dm=Ix;var hm=ur&&ur.isMap,Mx=hm?on(hm):dm,fm=Mx;var Bx="[object Set]";function Fx(r){return Pe(r)&&dr(r)==Bx}var pm=Fx;var mm=ur&&ur.isSet,jx=mm?on(mm):pm,gm=jx;var qx=1,Hx=2,Ux=4,bm="[object Arguments]",zx="[object Array]",$x="[object Boolean]",Vx="[object Date]",Wx="[object Error]",vm="[object Function]",Kx="[object GeneratorFunction]",Gx="[object Map]",Jx="[object Number]",ym="[object Object]",Xx="[object RegExp]",Yx="[object Set]",Zx="[object String]",Qx="[object Symbol]",e_="[object WeakMap]",t_="[object ArrayBuffer]",r_="[object DataView]",i_="[object Float32Array]",n_="[object Float64Array]",s_="[object Int8Array]",o_="[object Int16Array]",a_="[object Int32Array]",l_="[object Uint8Array]",u_="[object Uint8ClampedArray]",c_="[object Uint16Array]",d_="[object Uint32Array]",ee={};ee[bm]=ee[zx]=ee[t_]=ee[r_]=ee[$x]=ee[Vx]=ee[i_]=ee[n_]=ee[s_]=ee[o_]=ee[a_]=ee[Gx]=ee[Jx]=ee[ym]=ee[Xx]=ee[Yx]=ee[Zx]=ee[Qx]=ee[l_]=ee[u_]=ee[c_]=ee[d_]=!0;ee[Wx]=ee[vm]=ee[e_]=!1;function Ca(r,e,t,i,n,s){var o,a=e&qx,l=e&Hx,c=e&Ux;if(t&&(o=n?t(r,i,n,s):t(r)),o!==void 0)return o;if(!Ie(r))return r;var f=Ct(r);if(f){if(o=nm(r),!a)return ca(r,o)}else{var m=dr(r),y=m==vm||m==Kx;if(lr(r))return va(r,a);if(m==ym||m==bm||y&&!n){if(o=l||y?{}:Sa(r),!a)return l?Yp(r,zp(o,r)):Xp(r,Up(o,r))}else{if(!ee[m])return n?r:{};o=cm(r,m,a)}}s||(s=new Fr);var v=s.get(r);if(v)return v;s.set(r,o),gm(r)?r.forEach(function(S){o.add(Ca(S,e,t,S,r,s))}):fm(r)&&r.forEach(function(S,T){o.set(T,Ca(S,e,t,T,r,s))});var g=c?l?Zp:ks:l?Gt:ln,x=f?void 0:g(r);return ep(x||r,function(S,T){x&&(T=S,S=r[T]),ha(o,T,Ca(S,e,t,T,r,s))}),o}var wm=Ca;var h_=1,f_=4;function p_(r){return wm(r,h_|f_)}var Jt=p_;var m_="__lodash_hash_undefined__";function g_(r){return this.__data__.set(r,m_),this}var Am=g_;function b_(r){return this.__data__.has(r)}var Em=b_;function Ta(r){var e=-1,t=r==null?0:r.length;for(this.__data__=new ga;++e<t;)this.add(r[e])}Ta.prototype.add=Ta.prototype.push=Am;Ta.prototype.has=Em;var xm=Ta;function v_(r,e){for(var t=-1,i=r==null?0:r.length;++t<i;)if(e(r[t],t,r))return!0;return!1}var _m=v_;function y_(r,e){return r.has(e)}var km=y_;var w_=1,A_=2;function E_(r,e,t,i,n,s){var o=t&w_,a=r.length,l=e.length;if(a!=l&&!(o&&l>a))return!1;var c=s.get(r),f=s.get(e);if(c&&f)return c==e&&f==r;var m=-1,y=!0,v=t&A_?new xm:void 0;for(s.set(r,e),s.set(e,r);++m<a;){var g=r[m],x=e[m];if(i)var S=o?i(x,g,m,e,r,s):i(g,x,m,r,e,s);if(S!==void 0){if(S)continue;y=!1;break}if(v){if(!_m(e,function(T,I){if(!km(v,I)&&(g===T||n(g,T,t,i,s)))return v.push(I)})){y=!1;break}}else if(!(g===x||n(g,x,t,i,s))){y=!1;break}}return s.delete(r),s.delete(e),y}var La=E_;function x_(r){var e=-1,t=Array(r.size);return r.forEach(function(i,n){t[++e]=[n,i]}),t}var Sm=x_;function __(r){var e=-1,t=Array(r.size);return r.forEach(function(i){t[++e]=i}),t}var Cm=__;var k_=1,S_=2,C_="[object Boolean]",T_="[object Date]",L_="[object Error]",R_="[object Map]",N_="[object Number]",O_="[object RegExp]",P_="[object Set]",D_="[object String]",I_="[object Symbol]",M_="[object ArrayBuffer]",B_="[object DataView]",Tm=St?St.prototype:void 0,qu=Tm?Tm.valueOf:void 0;function F_(r,e,t,i,n,s,o){switch(t){case B_:if(r.byteLength!=e.byteLength||r.byteOffset!=e.byteOffset)return!1;r=r.buffer,e=e.buffer;case M_:return!(r.byteLength!=e.byteLength||!s(new mn(r),new mn(e)));case C_:case T_:case N_:return Wt(+r,+e);case L_:return r.name==e.name&&r.message==e.message;case O_:case D_:return r==e+"";case R_:var a=Sm;case P_:var l=i&k_;if(a||(a=Cm),r.size!=e.size&&!l)return!1;var c=o.get(r);if(c)return c==e;i|=S_,o.set(r,e);var f=La(a(r),a(e),i,n,s,o);return o.delete(r),f;case I_:if(qu)return qu.call(r)==qu.call(e)}return!1}var Lm=F_;var j_=1,q_=Object.prototype,H_=q_.hasOwnProperty;function U_(r,e,t,i,n,s){var o=t&j_,a=ks(r),l=a.length,c=ks(e),f=c.length;if(l!=f&&!o)return!1;for(var m=l;m--;){var y=a[m];if(!(o?y in e:H_.call(e,y)))return!1}var v=s.get(r),g=s.get(e);if(v&&g)return v==e&&g==r;var x=!0;s.set(r,e),s.set(e,r);for(var S=o;++m<l;){y=a[m];var T=r[y],I=e[y];if(i)var u=o?i(I,T,y,e,r,s):i(T,I,y,r,e,s);if(!(u===void 0?T===I||n(T,I,t,i,s):u)){x=!1;break}S||(S=y=="constructor")}if(x&&!S){var h=r.constructor,d=e.constructor;h!=d&&"constructor"in r&&"constructor"in e&&!(typeof h=="function"&&h instanceof h&&typeof d=="function"&&d instanceof d)&&(x=!1)}return s.delete(r),s.delete(e),x}var Rm=U_;var z_=1,Nm="[object Arguments]",Om="[object Array]",Ra="[object Object]",$_=Object.prototype,Pm=$_.hasOwnProperty;function V_(r,e,t,i,n,s){var o=Ct(r),a=Ct(e),l=o?Om:dr(r),c=a?Om:dr(e);l=l==Nm?Ra:l,c=c==Nm?Ra:c;var f=l==Ra,m=c==Ra,y=l==c;if(y&&lr(r)){if(!lr(e))return!1;o=!0,f=!1}if(y&&!f)return s||(s=new Fr),o||an(r)?La(r,e,t,i,n,s):Lm(r,e,l,t,i,n,s);if(!(t&z_)){var v=f&&Pm.call(r,"__wrapped__"),g=m&&Pm.call(e,"__wrapped__");if(v||g){var x=v?r.value():r,S=g?e.value():e;return s||(s=new Fr),n(x,S,t,i,s)}}return y?(s||(s=new Fr),Rm(r,e,t,i,n,s)):!1}var Dm=V_;function Im(r,e,t,i,n){return r===e?!0:r==null||e==null||!Pe(r)&&!Pe(e)?r!==r&&e!==e:Dm(r,e,t,i,Im,n)}var Mm=Im;function W_(r){return function(e,t,i){for(var n=-1,s=Object(e),o=i(e),a=o.length;a--;){var l=o[r?a:++n];if(t(s[l],l,s)===!1)break}return e}}var Bm=W_;var K_=Bm(),Fm=K_;function G_(r,e,t){(t!==void 0&&!Wt(r[e],t)||t===void 0&&!(e in r))&&nn(r,e,t)}var Ss=G_;function J_(r){return Pe(r)&&Pr(r)}var jm=J_;function X_(r,e){if(!(e==="constructor"&&typeof r[e]=="function")&&e!="__proto__")return r[e]}var Cs=X_;function Y_(r){return Kt(r,Gt(r))}var qm=Y_;function Z_(r,e,t,i,n,s,o){var a=Cs(r,t),l=Cs(e,t),c=o.get(l);if(c){Ss(r,t,c);return}var f=s?s(a,l,t+"",r,e,o):void 0,m=f===void 0;if(m){var y=Ct(l),v=!y&&lr(l),g=!y&&!v&&an(l);f=l,y||v||g?Ct(a)?f=a:jm(a)?f=ca(a):v?(m=!1,f=va(l,!0)):g?(m=!1,f=ka(l,!0)):f=[]:Mp(l)||xs(l)?(f=a,xs(a)?f=qm(a):(!Ie(a)||tn(a))&&(f=Sa(l))):m=!1}m&&(o.set(l,f),n(f,l,i,s,o),o.delete(l)),Ss(r,t,f)}var Hm=Z_;function Um(r,e,t,i,n){r!==e&&Fm(e,function(s,o){if(n||(n=new Fr),Ie(s))Hm(r,e,o,t,Um,i,n);else{var a=i?i(Cs(r,o),s,o+"",r,e,n):void 0;a===void 0&&(a=s),Ss(r,o,a)}},Gt)}var zm=Um;function Q_(r,e){return Mm(r,e)}var bi=Q_;var ek=sp(function(r,e,t){zm(r,e,t)}),nt=ek;var Rs={};Q0(Rs,{Attributor:()=>Ve,AttributorStore:()=>Ts,BlockBlot:()=>vi,ClassAttributor:()=>Se,ContainerBlot:()=>An,EmbedBlot:()=>ce,InlineBlot:()=>Na,LeafBlot:()=>Ce,ParentBlot:()=>st,Registry:()=>Hr,Scope:()=>q,ScrollBlot:()=>Ls,StyleAttributor:()=>ot,TextBlot:()=>En});var q=(r=>(r[r.TYPE=3]="TYPE",r[r.LEVEL=12]="LEVEL",r[r.ATTRIBUTE=13]="ATTRIBUTE",r[r.BLOT=14]="BLOT",r[r.INLINE=7]="INLINE",r[r.BLOCK=11]="BLOCK",r[r.BLOCK_BLOT=10]="BLOCK_BLOT",r[r.INLINE_BLOT=6]="INLINE_BLOT",r[r.BLOCK_ATTRIBUTE=9]="BLOCK_ATTRIBUTE",r[r.INLINE_ATTRIBUTE=5]="INLINE_ATTRIBUTE",r[r.ANY=15]="ANY",r))(q||{}),Ve=class{constructor(e,t,i={}){this.attrName=e,this.keyName=t;let n=q.TYPE&q.ATTRIBUTE;this.scope=i.scope!=null?i.scope&q.LEVEL|n:q.ATTRIBUTE,i.whitelist!=null&&(this.whitelist=i.whitelist)}static keys(e){return Array.from(e.attributes).map(t=>t.name)}add(e,t){return this.canAdd(e,t)?(e.setAttribute(this.keyName,t),!0):!1}canAdd(e,t){return this.whitelist==null?!0:typeof t=="string"?this.whitelist.indexOf(t.replace(/["']/g,""))>-1:this.whitelist.indexOf(t)>-1}remove(e){e.removeAttribute(this.keyName)}value(e){let t=e.getAttribute(this.keyName);return this.canAdd(e,t)&&t?t:""}},qr=class extends Error{constructor(e){e="[Parchment] "+e,super(e),this.message=e,this.name=this.constructor.name}},Wm=class Uu{constructor(){this.attributes={},this.classes={},this.tags={},this.types={}}static find(e,t=!1){if(e==null)return null;if(this.blots.has(e))return this.blots.get(e)||null;if(t){let i=null;try{i=e.parentNode}catch{return null}return this.find(i,t)}return null}create(e,t,i){let n=this.query(t);if(n==null)throw new qr(`Unable to create ${t} blot`);let s=n,o=t instanceof Node||t.nodeType===Node.TEXT_NODE?t:s.create(i),a=new s(e,o,i);return Uu.blots.set(a.domNode,a),a}find(e,t=!1){return Uu.find(e,t)}query(e,t=q.ANY){let i;return typeof e=="string"?i=this.types[e]||this.attributes[e]:e instanceof Text||e.nodeType===Node.TEXT_NODE?i=this.types.text:typeof e=="number"?e&q.LEVEL&q.BLOCK?i=this.types.block:e&q.LEVEL&q.INLINE&&(i=this.types.inline):e instanceof Element&&((e.getAttribute("class")||"").split(/\s+/).some(n=>(i=this.classes[n],!!i)),i=i||this.tags[e.tagName]),i==null?null:"scope"in i&&t&q.LEVEL&i.scope&&t&q.TYPE&i.scope?i:null}register(...e){return e.map(t=>{let i="blotName"in t,n="attrName"in t;if(!i&&!n)throw new qr("Invalid definition");if(i&&t.blotName==="abstract")throw new qr("Cannot register abstract class");let s=i?t.blotName:n?t.attrName:void 0;return this.types[s]=t,n?typeof t.keyName=="string"&&(this.attributes[t.keyName]=t):i&&(t.className&&(this.classes[t.className]=t),t.tagName&&(Array.isArray(t.tagName)?t.tagName=t.tagName.map(o=>o.toUpperCase()):t.tagName=t.tagName.toUpperCase(),(Array.isArray(t.tagName)?t.tagName:[t.tagName]).forEach(o=>{(this.tags[o]==null||t.className==null)&&(this.tags[o]=t)}))),t})}};Wm.blots=new WeakMap;var Hr=Wm;function $m(r,e){return(r.getAttribute("class")||"").split(/\s+/).filter(t=>t.indexOf(`${e}-`)===0)}var zu=class extends Ve{static keys(e){return(e.getAttribute("class")||"").split(/\s+/).map(t=>t.split("-").slice(0,-1).join("-"))}add(e,t){return this.canAdd(e,t)?(this.remove(e),e.classList.add(`${this.keyName}-${t}`),!0):!1}remove(e){$m(e,this.keyName).forEach(t=>{e.classList.remove(t)}),e.classList.length===0&&e.removeAttribute("class")}value(e){let t=($m(e,this.keyName)[0]||"").slice(this.keyName.length+1);return this.canAdd(e,t)?t:""}},Se=zu;function Hu(r){let e=r.split("-"),t=e.slice(1).map(i=>i[0].toUpperCase()+i.slice(1)).join("");return e[0]+t}var $u=class extends Ve{static keys(e){return(e.getAttribute("style")||"").split(";").map(t=>t.split(":")[0].trim())}add(e,t){return this.canAdd(e,t)?(e.style[Hu(this.keyName)]=t,!0):!1}remove(e){e.style[Hu(this.keyName)]="",e.getAttribute("style")||e.removeAttribute("style")}value(e){let t=e.style[Hu(this.keyName)];return this.canAdd(e,t)?t:""}},ot=$u,Vu=class{constructor(e){this.attributes={},this.domNode=e,this.build()}attribute(e,t){t?e.add(this.domNode,t)&&(e.value(this.domNode)!=null?this.attributes[e.attrName]=e:delete this.attributes[e.attrName]):(e.remove(this.domNode),delete this.attributes[e.attrName])}build(){this.attributes={};let e=Hr.find(this.domNode);if(e==null)return;let t=Ve.keys(this.domNode),i=Se.keys(this.domNode),n=ot.keys(this.domNode);t.concat(i).concat(n).forEach(s=>{let o=e.scroll.query(s,q.ATTRIBUTE);o instanceof Ve&&(this.attributes[o.attrName]=o)})}copy(e){Object.keys(this.attributes).forEach(t=>{let i=this.attributes[t].value(this.domNode);e.format(t,i)})}move(e){this.copy(e),Object.keys(this.attributes).forEach(t=>{this.attributes[t].remove(this.domNode)}),this.attributes={}}values(){return Object.keys(this.attributes).reduce((e,t)=>(e[t]=this.attributes[t].value(this.domNode),e),{})}},Ts=Vu,Km=class{constructor(e,t){this.scroll=e,this.domNode=t,Hr.blots.set(t,this),this.prev=null,this.next=null}static create(e){if(this.tagName==null)throw new qr("Blot definition missing tagName");let t,i;return Array.isArray(this.tagName)?(typeof e=="string"?(i=e.toUpperCase(),parseInt(i,10).toString()===i&&(i=parseInt(i,10))):typeof e=="number"&&(i=e),typeof i=="number"?t=document.createElement(this.tagName[i-1]):i&&this.tagName.indexOf(i)>-1?t=document.createElement(i):t=document.createElement(this.tagName[0])):t=document.createElement(this.tagName),this.className&&t.classList.add(this.className),t}get statics(){return this.constructor}attach(){}clone(){let e=this.domNode.cloneNode(!1);return this.scroll.create(e)}detach(){this.parent!=null&&this.parent.removeChild(this),Hr.blots.delete(this.domNode)}deleteAt(e,t){this.isolate(e,t).remove()}formatAt(e,t,i,n){let s=this.isolate(e,t);if(this.scroll.query(i,q.BLOT)!=null&&n)s.wrap(i,n);else if(this.scroll.query(i,q.ATTRIBUTE)!=null){let o=this.scroll.create(this.statics.scope);s.wrap(o),o.format(i,n)}}insertAt(e,t,i){let n=i==null?this.scroll.create("text",t):this.scroll.create(t,i),s=this.split(e);this.parent.insertBefore(n,s||void 0)}isolate(e,t){let i=this.split(e);if(i==null)throw new Error("Attempt to isolate at end");return i.split(t),i}length(){return 1}offset(e=this.parent){return this.parent==null||this===e?0:this.parent.children.offset(this)+this.parent.offset(e)}optimize(e){this.statics.requiredContainer&&!(this.parent instanceof this.statics.requiredContainer)&&this.wrap(this.statics.requiredContainer.blotName)}remove(){this.domNode.parentNode!=null&&this.domNode.parentNode.removeChild(this.domNode),this.detach()}replaceWith(e,t){let i=typeof e=="string"?this.scroll.create(e,t):e;return this.parent!=null&&(this.parent.insertBefore(i,this.next||void 0),this.remove()),i}split(e,t){return e===0?this:this.next}update(e,t){}wrap(e,t){let i=typeof e=="string"?this.scroll.create(e,t):e;if(this.parent!=null&&this.parent.insertBefore(i,this.next||void 0),typeof i.appendChild!="function")throw new qr(`Cannot wrap ${e}`);return i.appendChild(this),i}};Km.blotName="abstract";var Gm=Km,Jm=class extends Gm{static value(e){return!0}index(e,t){return this.domNode===e||this.domNode.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_CONTAINED_BY?Math.min(t,1):-1}position(e,t){let i=Array.from(this.parent.domNode.childNodes).indexOf(this.domNode);return e>0&&(i+=1),[this.parent.domNode,i]}value(){return{[this.statics.blotName]:this.statics.value(this.domNode)||!0}}};Jm.scope=q.INLINE_BLOT;var tk=Jm,Ce=tk,Wu=class{constructor(){this.head=null,this.tail=null,this.length=0}append(...e){if(this.insertBefore(e[0],null),e.length>1){let t=e.slice(1);this.append(...t)}}at(e){let t=this.iterator(),i=t();for(;i&&e>0;)e-=1,i=t();return i}contains(e){let t=this.iterator(),i=t();for(;i;){if(i===e)return!0;i=t()}return!1}indexOf(e){let t=this.iterator(),i=t(),n=0;for(;i;){if(i===e)return n;n+=1,i=t()}return-1}insertBefore(e,t){e!=null&&(this.remove(e),e.next=t,t!=null?(e.prev=t.prev,t.prev!=null&&(t.prev.next=e),t.prev=e,t===this.head&&(this.head=e)):this.tail!=null?(this.tail.next=e,e.prev=this.tail,this.tail=e):(e.prev=null,this.head=this.tail=e),this.length+=1)}offset(e){let t=0,i=this.head;for(;i!=null;){if(i===e)return t;t+=i.length(),i=i.next}return-1}remove(e){this.contains(e)&&(e.prev!=null&&(e.prev.next=e.next),e.next!=null&&(e.next.prev=e.prev),e===this.head&&(this.head=e.next),e===this.tail&&(this.tail=e.prev),this.length-=1)}iterator(e=this.head){return()=>{let t=e;return e!=null&&(e=e.next),t}}find(e,t=!1){let i=this.iterator(),n=i();for(;n;){let s=n.length();if(e<s||t&&e===s&&(n.next==null||n.next.length()!==0))return[n,e];e-=s,n=i()}return[null,0]}forEach(e){let t=this.iterator(),i=t();for(;i;)e(i),i=t()}forEachAt(e,t,i){if(t<=0)return;let[n,s]=this.find(e),o=e-s,a=this.iterator(n),l=a();for(;l&&o<e+t;){let c=l.length();e>o?i(l,e-o,Math.min(t,o+c-e)):i(l,0,Math.min(c,e+t-o)),o+=c,l=a()}}map(e){return this.reduce((t,i)=>(t.push(e(i)),t),[])}reduce(e,t){let i=this.iterator(),n=i();for(;n;)t=e(t,n),n=i();return t}};function Vm(r,e){let t=e.find(r);if(t)return t;try{return e.create(r)}catch{let i=e.create(q.INLINE);return Array.from(r.childNodes).forEach(n=>{i.domNode.appendChild(n)}),r.parentNode&&r.parentNode.replaceChild(i.domNode,r),i.attach(),i}}var Xm=class jr extends Gm{constructor(e,t){super(e,t),this.uiNode=null,this.build()}appendChild(e){this.insertBefore(e)}attach(){super.attach(),this.children.forEach(e=>{e.attach()})}attachUI(e){this.uiNode!=null&&this.uiNode.remove(),this.uiNode=e,jr.uiClass&&this.uiNode.classList.add(jr.uiClass),this.uiNode.setAttribute("contenteditable","false"),this.domNode.insertBefore(this.uiNode,this.domNode.firstChild)}build(){this.children=new Wu,Array.from(this.domNode.childNodes).filter(e=>e!==this.uiNode).reverse().forEach(e=>{try{let t=Vm(e,this.scroll);this.insertBefore(t,this.children.head||void 0)}catch(t){if(t instanceof qr)return;throw t}})}deleteAt(e,t){if(e===0&&t===this.length())return this.remove();this.children.forEachAt(e,t,(i,n,s)=>{i.deleteAt(n,s)})}descendant(e,t=0){let[i,n]=this.children.find(t);return e.blotName==null&&e(i)||e.blotName!=null&&i instanceof e?[i,n]:i instanceof jr?i.descendant(e,n):[null,-1]}descendants(e,t=0,i=Number.MAX_VALUE){let n=[],s=i;return this.children.forEachAt(t,i,(o,a,l)=>{(e.blotName==null&&e(o)||e.blotName!=null&&o instanceof e)&&n.push(o),o instanceof jr&&(n=n.concat(o.descendants(e,a,s))),s-=l}),n}detach(){this.children.forEach(e=>{e.detach()}),super.detach()}enforceAllowedChildren(){let e=!1;this.children.forEach(t=>{e||this.statics.allowedChildren.some(i=>t instanceof i)||(t.statics.scope===q.BLOCK_BLOT?(t.next!=null&&this.splitAfter(t),t.prev!=null&&this.splitAfter(t.prev),t.parent.unwrap(),e=!0):t instanceof jr?t.unwrap():t.remove())})}formatAt(e,t,i,n){this.children.forEachAt(e,t,(s,o,a)=>{s.formatAt(o,a,i,n)})}insertAt(e,t,i){let[n,s]=this.children.find(e);if(n)n.insertAt(s,t,i);else{let o=i==null?this.scroll.create("text",t):this.scroll.create(t,i);this.appendChild(o)}}insertBefore(e,t){e.parent!=null&&e.parent.children.remove(e);let i=null;this.children.insertBefore(e,t||null),e.parent=this,t!=null&&(i=t.domNode),(this.domNode.parentNode!==e.domNode||this.domNode.nextSibling!==i)&&this.domNode.insertBefore(e.domNode,i),e.attach()}length(){return this.children.reduce((e,t)=>e+t.length(),0)}moveChildren(e,t){this.children.forEach(i=>{e.insertBefore(i,t)})}optimize(e){if(super.optimize(e),this.enforceAllowedChildren(),this.uiNode!=null&&this.uiNode!==this.domNode.firstChild&&this.domNode.insertBefore(this.uiNode,this.domNode.firstChild),this.children.length===0)if(this.statics.defaultChild!=null){let t=this.scroll.create(this.statics.defaultChild.blotName);this.appendChild(t)}else this.remove()}path(e,t=!1){let[i,n]=this.children.find(e,t),s=[[this,e]];return i instanceof jr?s.concat(i.path(n,t)):(i!=null&&s.push([i,n]),s)}removeChild(e){this.children.remove(e)}replaceWith(e,t){let i=typeof e=="string"?this.scroll.create(e,t):e;return i instanceof jr&&this.moveChildren(i),super.replaceWith(i)}split(e,t=!1){if(!t){if(e===0)return this;if(e===this.length())return this.next}let i=this.clone();return this.parent&&this.parent.insertBefore(i,this.next||void 0),this.children.forEachAt(e,this.length(),(n,s,o)=>{let a=n.split(s,t);a!=null&&i.appendChild(a)}),i}splitAfter(e){let t=this.clone();for(;e.next!=null;)t.appendChild(e.next);return this.parent&&this.parent.insertBefore(t,this.next||void 0),t}unwrap(){this.parent&&this.moveChildren(this.parent,this.next||void 0),this.remove()}update(e,t){let i=[],n=[];e.forEach(s=>{s.target===this.domNode&&s.type==="childList"&&(i.push(...s.addedNodes),n.push(...s.removedNodes))}),n.forEach(s=>{if(s.parentNode!=null&&s.tagName!=="IFRAME"&&document.body.compareDocumentPosition(s)&Node.DOCUMENT_POSITION_CONTAINED_BY)return;let o=this.scroll.find(s);o!=null&&(o.domNode.parentNode==null||o.domNode.parentNode===this.domNode)&&o.detach()}),i.filter(s=>s.parentNode===this.domNode&&s!==this.uiNode).sort((s,o)=>s===o?0:s.compareDocumentPosition(o)&Node.DOCUMENT_POSITION_FOLLOWING?1:-1).forEach(s=>{let o=null;s.nextSibling!=null&&(o=this.scroll.find(s.nextSibling));let a=Vm(s,this.scroll);(a.next!==o||a.next==null)&&(a.parent!=null&&a.parent.removeChild(this),this.insertBefore(a,o||void 0))}),this.enforceAllowedChildren()}};Xm.uiClass="";var rk=Xm,st=rk;function ik(r,e){if(Object.keys(r).length!==Object.keys(e).length)return!1;for(let t in r)if(r[t]!==e[t])return!1;return!0}var bn=class vn extends st{static create(e){return super.create(e)}static formats(e,t){let i=t.query(vn.blotName);if(!(i!=null&&e.tagName===i.tagName)){if(typeof this.tagName=="string")return!0;if(Array.isArray(this.tagName))return e.tagName.toLowerCase()}}constructor(e,t){super(e,t),this.attributes=new Ts(this.domNode)}format(e,t){if(e===this.statics.blotName&&!t)this.children.forEach(i=>{i instanceof vn||(i=i.wrap(vn.blotName,!0)),this.attributes.copy(i)}),this.unwrap();else{let i=this.scroll.query(e,q.INLINE);if(i==null)return;i instanceof Ve?this.attributes.attribute(i,t):t&&(e!==this.statics.blotName||this.formats()[e]!==t)&&this.replaceWith(e,t)}}formats(){let e=this.attributes.values(),t=this.statics.formats(this.domNode,this.scroll);return t!=null&&(e[this.statics.blotName]=t),e}formatAt(e,t,i,n){this.formats()[i]!=null||this.scroll.query(i,q.ATTRIBUTE)?this.isolate(e,t).format(i,n):super.formatAt(e,t,i,n)}optimize(e){super.optimize(e);let t=this.formats();if(Object.keys(t).length===0)return this.unwrap();let i=this.next;i instanceof vn&&i.prev===this&&ik(t,i.formats())&&(i.moveChildren(this),i.remove())}replaceWith(e,t){let i=super.replaceWith(e,t);return this.attributes.copy(i),i}update(e,t){super.update(e,t),e.some(i=>i.target===this.domNode&&i.type==="attributes")&&this.attributes.build()}wrap(e,t){let i=super.wrap(e,t);return i instanceof vn&&this.attributes.move(i),i}};bn.allowedChildren=[bn,Ce],bn.blotName="inline",bn.scope=q.INLINE_BLOT,bn.tagName="SPAN";var nk=bn,Na=nk,yn=class Ku extends st{static create(e){return super.create(e)}static formats(e,t){let i=t.query(Ku.blotName);if(!(i!=null&&e.tagName===i.tagName)){if(typeof this.tagName=="string")return!0;if(Array.isArray(this.tagName))return e.tagName.toLowerCase()}}constructor(e,t){super(e,t),this.attributes=new Ts(this.domNode)}format(e,t){let i=this.scroll.query(e,q.BLOCK);i!=null&&(i instanceof Ve?this.attributes.attribute(i,t):e===this.statics.blotName&&!t?this.replaceWith(Ku.blotName):t&&(e!==this.statics.blotName||this.formats()[e]!==t)&&this.replaceWith(e,t))}formats(){let e=this.attributes.values(),t=this.statics.formats(this.domNode,this.scroll);return t!=null&&(e[this.statics.blotName]=t),e}formatAt(e,t,i,n){this.scroll.query(i,q.BLOCK)!=null?this.format(i,n):super.formatAt(e,t,i,n)}insertAt(e,t,i){if(i==null||this.scroll.query(t,q.INLINE)!=null)super.insertAt(e,t,i);else{let n=this.split(e);if(n!=null){let s=this.scroll.create(t,i);n.parent.insertBefore(s,n)}else throw new Error("Attempt to insertAt after block boundaries")}}replaceWith(e,t){let i=super.replaceWith(e,t);return this.attributes.copy(i),i}update(e,t){super.update(e,t),e.some(i=>i.target===this.domNode&&i.type==="attributes")&&this.attributes.build()}};yn.blotName="block",yn.scope=q.BLOCK_BLOT,yn.tagName="P",yn.allowedChildren=[Na,yn,Ce];var sk=yn,vi=sk,Gu=class extends st{checkMerge(){return this.next!==null&&this.next.statics.blotName===this.statics.blotName}deleteAt(e,t){super.deleteAt(e,t),this.enforceAllowedChildren()}formatAt(e,t,i,n){super.formatAt(e,t,i,n),this.enforceAllowedChildren()}insertAt(e,t,i){super.insertAt(e,t,i),this.enforceAllowedChildren()}optimize(e){super.optimize(e),this.children.length>0&&this.next!=null&&this.checkMerge()&&(this.next.moveChildren(this),this.next.remove())}};Gu.blotName="container",Gu.scope=q.BLOCK_BLOT;var ok=Gu,An=ok,Ju=class extends Ce{static formats(e,t){}format(e,t){super.formatAt(0,this.length(),e,t)}formatAt(e,t,i,n){e===0&&t===this.length()?this.format(i,n):super.formatAt(e,t,i,n)}formats(){return this.statics.formats(this.domNode,this.scroll)}},ce=Ju,ak={attributes:!0,characterData:!0,characterDataOldValue:!0,childList:!0,subtree:!0},lk=100,wn=class extends st{constructor(e,t){super(null,t),this.registry=e,this.scroll=this,this.build(),this.observer=new MutationObserver(i=>{this.update(i)}),this.observer.observe(this.domNode,ak),this.attach()}create(e,t){return this.registry.create(this,e,t)}find(e,t=!1){let i=this.registry.find(e,t);return i?i.scroll===this?i:t?this.find(i.scroll.domNode.parentNode,!0):null:null}query(e,t=q.ANY){return this.registry.query(e,t)}register(...e){return this.registry.register(...e)}build(){this.scroll!=null&&super.build()}detach(){super.detach(),this.observer.disconnect()}deleteAt(e,t){this.update(),e===0&&t===this.length()?this.children.forEach(i=>{i.remove()}):super.deleteAt(e,t)}formatAt(e,t,i,n){this.update(),super.formatAt(e,t,i,n)}insertAt(e,t,i){this.update(),super.insertAt(e,t,i)}optimize(e=[],t={}){super.optimize(t);let i=t.mutationsMap||new WeakMap,n=Array.from(this.observer.takeRecords());for(;n.length>0;)e.push(n.pop());let s=(l,c=!0)=>{l==null||l===this||l.domNode.parentNode!=null&&(i.has(l.domNode)||i.set(l.domNode,[]),c&&s(l.parent))},o=l=>{i.has(l.domNode)&&(l instanceof st&&l.children.forEach(o),i.delete(l.domNode),l.optimize(t))},a=e;for(let l=0;a.length>0;l+=1){if(l>=lk)throw new Error("[Parchment] Maximum optimize iterations reached");for(a.forEach(c=>{let f=this.find(c.target,!0);f!=null&&(f.domNode===c.target&&(c.type==="childList"?(s(this.find(c.previousSibling,!1)),Array.from(c.addedNodes).forEach(m=>{let y=this.find(m,!1);s(y,!1),y instanceof st&&y.children.forEach(v=>{s(v,!1)})})):c.type==="attributes"&&s(f.prev)),s(f))}),this.children.forEach(o),a=Array.from(this.observer.takeRecords()),n=a.slice();n.length>0;)e.push(n.pop())}}update(e,t={}){e=e||this.observer.takeRecords();let i=new WeakMap;e.map(n=>{let s=this.find(n.target,!0);return s==null?null:i.has(s.domNode)?(i.get(s.domNode).push(n),null):(i.set(s.domNode,[n]),s)}).forEach(n=>{n!=null&&n!==this&&i.has(n.domNode)&&n.update(i.get(n.domNode)||[],t)}),t.mutationsMap=i,i.has(this.domNode)&&super.update(i.get(this.domNode),t),this.optimize(e,t)}};wn.blotName="scroll",wn.defaultChild=vi,wn.allowedChildren=[vi,An],wn.scope=q.BLOCK_BLOT,wn.tagName="DIV";var uk=wn,Ls=uk,Xu=class Ym extends Ce{static create(e){return document.createTextNode(e)}static value(e){return e.data}constructor(e,t){super(e,t),this.text=this.statics.value(this.domNode)}deleteAt(e,t){this.domNode.data=this.text=this.text.slice(0,e)+this.text.slice(e+t)}index(e,t){return this.domNode===e?t:-1}insertAt(e,t,i){i==null?(this.text=this.text.slice(0,e)+t+this.text.slice(e),this.domNode.data=this.text):super.insertAt(e,t,i)}length(){return this.text.length}optimize(e){super.optimize(e),this.text=this.statics.value(this.domNode),this.text.length===0?this.remove():this.next instanceof Ym&&this.next.prev===this&&(this.insertAt(this.length(),this.next.value()),this.next.remove())}position(e,t=!1){return[this.domNode,e]}split(e,t=!1){if(!t){if(e===0)return this;if(e===this.length())return this.next}let i=this.scroll.create(this.domNode.splitText(e));return this.parent.insertBefore(i,this.next||void 0),this.text=this.statics.value(this.domNode),i}update(e,t){e.some(i=>i.type==="characterData"&&i.target===this.domNode)&&(this.text=this.statics.value(this.domNode))}value(){return this.text}};Xu.blotName="text",Xu.scope=q.INLINE_BLOT;var ck=Xu,En=ck;var Gr=Ue(vt(),1);var he=Ue(vt(),1);var Ic=Ue(vt(),1);var qs=class extends ce{static value(){}optimize(){(this.prev||this.next)&&this.remove()}length(){return 0}value(){return""}};qs.blotName="break";qs.tagName="BR";var Me=qs;var ye=class extends En{};function Ci(r){return r.replace(/[&<>"']/g,e=>({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"})[e])}var Vr=class extends Na{static compare(e,t){let i=Vr.order.indexOf(e),n=Vr.order.indexOf(t);return i>=0||n>=0?i-n:e===t?0:e<t?-1:1}formatAt(e,t,i,n){if(Vr.compare(this.statics.blotName,i)<0&&this.scroll.query(i,q.BLOT)){let s=this.isolate(e,t);n&&s.wrap(i,n)}else super.formatAt(e,t,i,n)}optimize(e){if(super.optimize(e),this.parent instanceof Vr&&Vr.compare(this.statics.blotName,this.parent.statics.blotName)>0){let t=this.parent.isolate(this.offset(),this.length());this.moveChildren(t),t.wrap(this)}}},Hs=Vr;B(Hs,"allowedChildren",[Vr,Me,ce,ye]),B(Hs,"order",["cursor","inline","link","underline","strike","italic","bold","script","code"]);var Be=Hs;var Db=1,Z=class extends vi{constructor(){super(...arguments);B(this,"cache",{})}delta(){return this.cache.delta==null&&(this.cache.delta=Mc(this)),this.cache.delta}deleteAt(t,i){super.deleteAt(t,i),this.cache={}}formatAt(t,i,n,s){i<=0||(this.scroll.query(n,q.BLOCK)?t+i===this.length()&&this.format(n,s):super.formatAt(t,Math.min(i,this.length()-t-1),n,s),this.cache={})}insertAt(t,i,n){if(n!=null){super.insertAt(t,i,n),this.cache={};return}if(i.length===0)return;let s=i.split(`
`),o=s.shift();o.length>0&&(t<this.length()-1||this.children.tail==null?super.insertAt(Math.min(t,this.length()-1),o):this.children.tail.insertAt(this.children.tail.length(),o),this.cache={});let a=this;s.reduce((l,c)=>(a=a.split(l,!0),a.insertAt(0,c),c.length),t+o.length)}insertBefore(t,i){let{head:n}=this.children;super.insertBefore(t,i),n instanceof Me&&n.remove(),this.cache={}}length(){return this.cache.length==null&&(this.cache.length=super.length()+Db),this.cache.length}moveChildren(t,i){super.moveChildren(t,i),this.cache={}}optimize(t){super.optimize(t),this.cache={}}path(t){return super.path(t,!0)}removeChild(t){super.removeChild(t),this.cache={}}split(t){let i=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;if(i&&(t===0||t>=this.length()-Db)){let s=this.clone();return t===0?(this.parent.insertBefore(s,this),this):(this.parent.insertBefore(s,this.next),s)}let n=super.split(t,i);return this.cache={},n}};Z.blotName="block";Z.tagName="P";Z.defaultChild=Me;Z.allowedChildren=[Me,Be,ce,ye];var Le=class extends ce{attach(){super.attach(),this.attributes=new Ts(this.domNode)}delta(){return new Ic.default().insert(this.value(),{...this.formats(),...this.attributes.values()})}format(e,t){let i=this.scroll.query(e,q.BLOCK_ATTRIBUTE);i!=null&&this.attributes.attribute(i,t)}formatAt(e,t,i,n){this.format(i,n)}insertAt(e,t,i){if(i!=null){super.insertAt(e,t,i);return}let n=t.split(`
`),s=n.pop(),o=n.map(l=>{let c=this.scroll.create(Z.blotName);return c.insertAt(0,l),c}),a=this.split(e);o.forEach(l=>{this.parent.insertBefore(l,a)}),s&&this.parent.insertBefore(this.scroll.create("text",s),a)}};Le.scope=q.BLOCK_BLOT;function Mc(r){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return r.descendants(Ce).reduce((t,i)=>i.length()===0?t:t.insert(i.value(),at(i,{},e)),new Ic.default).insert(`
`,at(r))}function at(r){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},t=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;return r==null||("formats"in r&&typeof r.formats=="function"&&(e={...e,...r.formats()},t&&delete e["code-token"]),r.parent==null||r.parent.statics.blotName==="scroll"||r.parent.statics.scope!==r.statics.scope)?e:at(r.parent,e,t)}var Wr=class extends ce{static value(){}constructor(e,t,i){super(e,t),this.selection=i,this.textNode=document.createTextNode(Wr.CONTENTS),this.domNode.appendChild(this.textNode),this.savedLength=0}detach(){this.parent!=null&&this.parent.removeChild(this)}format(e,t){if(this.savedLength!==0){super.format(e,t);return}let i=this,n=0;for(;i!=null&&i.statics.scope!==q.BLOCK_BLOT;)n+=i.offset(i.parent),i=i.parent;i!=null&&(this.savedLength=Wr.CONTENTS.length,i.optimize(),i.formatAt(n,Wr.CONTENTS.length,e,t),this.savedLength=0)}index(e,t){return e===this.textNode?0:super.index(e,t)}length(){return this.savedLength}position(){return[this.textNode,this.textNode.data.length]}remove(){super.remove(),this.parent=null}restore(){if(this.selection.composing||this.parent==null)return null;let e=this.selection.getNativeRange();for(;this.domNode.lastChild!=null&&this.domNode.lastChild!==this.textNode;)this.domNode.parentNode.insertBefore(this.domNode.lastChild,this.domNode);let t=this.prev instanceof ye?this.prev:null,i=t?t.length():0,n=this.next instanceof ye?this.next:null,s=n?n.text:"",{textNode:o}=this,a=o.data.split(Wr.CONTENTS).join("");o.data=Wr.CONTENTS;let l;if(t)l=t,(a||n)&&(t.insertAt(t.length(),a+s),n&&n.remove());else if(n)l=n,n.insertAt(0,a);else{let c=document.createTextNode(a);l=this.scroll.create(c),this.parent.insertBefore(l,this)}if(this.remove(),e){let c=(y,v)=>t&&y===t.domNode?v:y===o?i+v-1:n&&y===n.domNode?i+a.length+v:null,f=c(e.start.node,e.start.offset),m=c(e.end.node,e.end.offset);if(f!==null&&m!==null)return{startNode:l.domNode,startOffset:f,endNode:l.domNode,endOffset:m}}return null}update(e,t){if(e.some(i=>i.type==="characterData"&&i.target===this.textNode)){let i=this.restore();i&&(t.range=i)}}optimize(e){super.optimize(e);let{parent:t}=this;for(;t;){if(t.domNode.tagName==="A"){this.savedLength=Wr.CONTENTS.length,t.isolate(this.offset(t),this.length()).unwrap(),this.savedLength=0;break}t=t.parent}}value(){return""}},Ti=Wr;B(Ti,"blotName","cursor"),B(Ti,"className","ql-cursor"),B(Ti,"tagName","span"),B(Ti,"CONTENTS","\uFEFF");var Kr=Ti;var Fc=Ue(Mb(),1);var zs=new WeakMap;var jc=["error","warn","log","info"],qc="warn";function Bb(r){if(qc&&jc.indexOf(r)<=jc.indexOf(qc)){for(var e=arguments.length,t=new Array(e>1?e-1:0),i=1;i<e;i++)t[i-1]=arguments[i];console[r](...t)}}function Hc(r){return jc.reduce((e,t)=>(e[t]=Bb.bind(console,t,r),e),{})}Hc.level=r=>{qc=r};Bb.level=Hc.level;var yt=Hc;var Uc=yt("quill:events"),L3=["selectionchange","mousedown","mouseup","click"];L3.forEach(r=>{document.addEventListener(r,function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];Array.from(document.querySelectorAll(".ql-container")).forEach(n=>{let s=zs.get(n);s&&s.emitter&&s.emitter.handleDOM(...t)})})});var $s=class extends Fc.default{constructor(){super(),this.domListeners={},this.on("error",Uc.error)}emit(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return Uc.log.call(Uc,...t),super.emit(...t)}handleDOM(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),n=1;n<t;n++)i[n-1]=arguments[n];(this.domListeners[e.type]||[]).forEach(s=>{let{node:o,handler:a}=s;(e.target===o||o.contains(e.target))&&a(e,...i)})}listenDOM(e,t,i){this.domListeners[e]||(this.domListeners[e]=[]),this.domListeners[e].push({node:t,handler:i})}};B($s,"events",{EDITOR_CHANGE:"editor-change",SCROLL_BEFORE_UPDATE:"scroll-before-update",SCROLL_BLOT_MOUNT:"scroll-blot-mount",SCROLL_BLOT_UNMOUNT:"scroll-blot-unmount",SCROLL_OPTIMIZE:"scroll-optimize",SCROLL_UPDATE:"scroll-update",SCROLL_EMBED_UPDATE:"scroll-embed-update",SELECTION_CHANGE:"selection-change",TEXT_CHANGE:"text-change",COMPOSITION_BEFORE_START:"composition-before-start",COMPOSITION_START:"composition-start",COMPOSITION_BEFORE_END:"composition-before-end",COMPOSITION_END:"composition-end"}),B($s,"sources",{API:"api",SILENT:"silent",USER:"user"});var H=$s;var zc=yt("quill:selection"),Ge=class{constructor(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0;this.index=e,this.length=t}},Vc=class{constructor(e,t){this.emitter=t,this.scroll=e,this.composing=!1,this.mouseDown=!1,this.root=this.scroll.domNode,this.cursor=this.scroll.create("cursor",this),this.savedRange=new Ge(0,0),this.lastRange=this.savedRange,this.lastNative=null,this.handleComposition(),this.handleDragging(),this.emitter.listenDOM("selectionchange",document,()=>{!this.mouseDown&&!this.composing&&setTimeout(this.update.bind(this,H.sources.USER),1)}),this.emitter.on(H.events.SCROLL_BEFORE_UPDATE,()=>{if(!this.hasFocus())return;let i=this.getNativeRange();i!=null&&i.start.node!==this.cursor.textNode&&this.emitter.once(H.events.SCROLL_UPDATE,(n,s)=>{try{this.root.contains(i.start.node)&&this.root.contains(i.end.node)&&this.setNativeRange(i.start.node,i.start.offset,i.end.node,i.end.offset);let o=s.some(a=>a.type==="characterData"||a.type==="childList"||a.type==="attributes"&&a.target===this.root);this.update(o?H.sources.SILENT:n)}catch{}})}),this.emitter.on(H.events.SCROLL_OPTIMIZE,(i,n)=>{if(n.range){let{startNode:s,startOffset:o,endNode:a,endOffset:l}=n.range;this.setNativeRange(s,o,a,l),this.update(H.sources.SILENT)}}),this.update(H.sources.SILENT)}handleComposition(){this.emitter.on(H.events.COMPOSITION_BEFORE_START,()=>{this.composing=!0}),this.emitter.on(H.events.COMPOSITION_END,()=>{if(this.composing=!1,this.cursor.parent){let e=this.cursor.restore();if(!e)return;setTimeout(()=>{this.setNativeRange(e.startNode,e.startOffset,e.endNode,e.endOffset)},1)}})}handleDragging(){this.emitter.listenDOM("mousedown",document.body,()=>{this.mouseDown=!0}),this.emitter.listenDOM("mouseup",document.body,()=>{this.mouseDown=!1,this.update(H.sources.USER)})}focus(){this.hasFocus()||(this.root.focus({preventScroll:!0}),this.setRange(this.savedRange))}format(e,t){this.scroll.update();let i=this.getNativeRange();if(!(i==null||!i.native.collapsed||this.scroll.query(e,q.BLOCK))){if(i.start.node!==this.cursor.textNode){let n=this.scroll.find(i.start.node,!1);if(n==null)return;if(n instanceof Ce){let s=n.split(i.start.offset);n.parent.insertBefore(this.cursor,s)}else n.insertBefore(this.cursor,i.start.node);this.cursor.attach()}this.cursor.format(e,t),this.scroll.optimize(),this.setNativeRange(this.cursor.textNode,this.cursor.textNode.data.length),this.update()}}getBounds(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,i=this.scroll.length();e=Math.min(e,i-1),t=Math.min(e+t,i-1)-e;let n,[s,o]=this.scroll.leaf(e);if(s==null)return null;if(t>0&&o===s.length()){let[f]=this.scroll.leaf(e+1);if(f){let[m]=this.scroll.line(e),[y]=this.scroll.line(e+1);m===y&&(s=f,o=0)}}[n,o]=s.position(o,!0);let a=document.createRange();if(t>0)return a.setStart(n,o),[s,o]=this.scroll.leaf(e+t),s==null?null:([n,o]=s.position(o,!0),a.setEnd(n,o),a.getBoundingClientRect());let l="left",c;if(n instanceof Text){if(!n.data.length)return null;o<n.data.length?(a.setStart(n,o),a.setEnd(n,o+1)):(a.setStart(n,o-1),a.setEnd(n,o),l="right"),c=a.getBoundingClientRect()}else{if(!(s.domNode instanceof Element))return null;c=s.domNode.getBoundingClientRect(),o>0&&(l="right")}return{bottom:c.top+c.height,height:c.height,left:c[l],right:c[l],top:c.top,width:0}}getNativeRange(){let e=document.getSelection();if(e==null||e.rangeCount<=0)return null;let t=e.getRangeAt(0);if(t==null)return null;let i=this.normalizeNative(t);return zc.info("getNativeRange",i),i}getRange(){let e=this.scroll.domNode;if("isConnected"in e&&!e.isConnected)return[null,null];let t=this.getNativeRange();return t==null?[null,null]:[this.normalizedToRange(t),t]}hasFocus(){return document.activeElement===this.root||document.activeElement!=null&&$c(this.root,document.activeElement)}normalizedToRange(e){let t=[[e.start.node,e.start.offset]];e.native.collapsed||t.push([e.end.node,e.end.offset]);let i=t.map(o=>{let[a,l]=o,c=this.scroll.find(a,!0),f=c.offset(this.scroll);return l===0?f:c instanceof Ce?f+c.index(a,l):f+c.length()}),n=Math.min(Math.max(...i),this.scroll.length()-1),s=Math.min(n,...i);return new Ge(s,n-s)}normalizeNative(e){if(!$c(this.root,e.startContainer)||!e.collapsed&&!$c(this.root,e.endContainer))return null;let t={start:{node:e.startContainer,offset:e.startOffset},end:{node:e.endContainer,offset:e.endOffset},native:e};return[t.start,t.end].forEach(i=>{let{node:n,offset:s}=i;for(;!(n instanceof Text)&&n.childNodes.length>0;)if(n.childNodes.length>s)n=n.childNodes[s],s=0;else if(n.childNodes.length===s)n=n.lastChild,n instanceof Text?s=n.data.length:n.childNodes.length>0?s=n.childNodes.length:s=n.childNodes.length+1;else break;i.node=n,i.offset=s}),t}rangeToNative(e){let t=this.scroll.length(),i=(n,s)=>{n=Math.min(t-1,n);let[o,a]=this.scroll.leaf(n);return o?o.position(a,s):[null,-1]};return[...i(e.index,!1),...i(e.index+e.length,!0)]}setNativeRange(e,t){let i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:e,n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:t,s=arguments.length>4&&arguments[4]!==void 0?arguments[4]:!1;if(zc.info("setNativeRange",e,t,i,n),e!=null&&(this.root.parentNode==null||e.parentNode==null||i.parentNode==null))return;let o=document.getSelection();if(o!=null)if(e!=null){this.hasFocus()||this.root.focus({preventScroll:!0});let{native:a}=this.getNativeRange()||{};if(a==null||s||e!==a.startContainer||t!==a.startOffset||i!==a.endContainer||n!==a.endOffset){e instanceof Element&&e.tagName==="BR"&&(t=Array.from(e.parentNode.childNodes).indexOf(e),e=e.parentNode),i instanceof Element&&i.tagName==="BR"&&(n=Array.from(i.parentNode.childNodes).indexOf(i),i=i.parentNode);let l=document.createRange();l.setStart(e,t),l.setEnd(i,n),o.removeAllRanges(),o.addRange(l)}}else o.removeAllRanges(),this.root.blur()}setRange(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:H.sources.API;if(typeof t=="string"&&(i=t,t=!1),zc.info("setRange",e),e!=null){let n=this.rangeToNative(e);this.setNativeRange(...n,t)}else this.setNativeRange(null);this.update(i)}update(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:H.sources.USER,t=this.lastRange,[i,n]=this.getRange();if(this.lastRange=i,this.lastNative=n,this.lastRange!=null&&(this.savedRange=this.lastRange),!bi(t,this.lastRange)){if(!this.composing&&n!=null&&n.native.collapsed&&n.start.node!==this.cursor.textNode){let o=this.cursor.restore();o&&this.setNativeRange(o.startNode,o.startOffset,o.endNode,o.endOffset)}let s=[H.events.SELECTION_CHANGE,Jt(this.lastRange),Jt(t),e];this.emitter.emit(H.events.EDITOR_CHANGE,...s),e!==H.sources.SILENT&&this.emitter.emit(...s)}}};function $c(r,e){try{e.parentNode}catch{return!1}return r.contains(e)}var Fb=Vc;var R3=/^[ -~]*$/,Kc=class{constructor(e){this.scroll=e,this.delta=this.getDelta()}applyDelta(e){this.scroll.update();let t=this.scroll.length();this.scroll.batchStart();let i=jb(e),n=new he.default;return O3(i.ops.slice()).reduce((o,a)=>{let l=he.Op.length(a),c=a.attributes||{},f=!1,m=!1;if(a.insert!=null){if(n.retain(l),typeof a.insert=="string"){let g=a.insert;m=!g.endsWith(`
`)&&(t<=o||!!this.scroll.descendant(Le,o)[0]),this.scroll.insertAt(o,g);let[x,S]=this.scroll.line(o),T=nt({},at(x));if(x instanceof Z){let[I]=x.descendant(Ce,S);I&&(T=nt(T,at(I)))}c=he.AttributeMap.diff(T,c)||{}}else if(typeof a.insert=="object"){let g=Object.keys(a.insert)[0];if(g==null)return o;let x=this.scroll.query(g,q.INLINE)!=null;if(x)(t<=o||this.scroll.descendant(Le,o)[0])&&(m=!0);else if(o>0){let[S,T]=this.scroll.descendant(Ce,o-1);S instanceof ye?S.value()[T]!==`
`&&(f=!0):S instanceof ce&&S.statics.scope===q.INLINE_BLOT&&(f=!0)}if(this.scroll.insertAt(o,g,a.insert[g]),x){let[S]=this.scroll.descendant(Ce,o);if(S){let T=nt({},at(S));c=he.AttributeMap.diff(T,c)||{}}}}t+=l}else if(n.push(a),a.retain!==null&&typeof a.retain=="object"){let g=Object.keys(a.retain)[0];if(g==null)return o;this.scroll.updateEmbedAt(o,g,a.retain[g])}Object.keys(c).forEach(g=>{this.scroll.formatAt(o,l,g,c[g])});let y=f?1:0,v=m?1:0;return t+=y+v,n.retain(y),n.delete(v),o+l+y+v},0),n.reduce((o,a)=>typeof a.delete=="number"?(this.scroll.deleteAt(o,a.delete),o):o+he.Op.length(a),0),this.scroll.batchEnd(),this.scroll.optimize(),this.update(i)}deleteText(e,t){return this.scroll.deleteAt(e,t),this.update(new he.default().retain(e).delete(t))}formatLine(e,t){let i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};this.scroll.update(),Object.keys(i).forEach(s=>{this.scroll.lines(e,Math.max(t,1)).forEach(o=>{o.format(s,i[s])})}),this.scroll.optimize();let n=new he.default().retain(e).retain(t,Jt(i));return this.update(n)}formatText(e,t){let i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};Object.keys(i).forEach(s=>{this.scroll.formatAt(e,t,s,i[s])});let n=new he.default().retain(e).retain(t,Jt(i));return this.update(n)}getContents(e,t){return this.delta.slice(e,e+t)}getDelta(){return this.scroll.lines().reduce((e,t)=>e.concat(t.delta()),new he.default)}getFormat(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,i=[],n=[];t===0?this.scroll.path(e).forEach(a=>{let[l]=a;l instanceof Z?i.push(l):l instanceof Ce&&n.push(l)}):(i=this.scroll.lines(e,t),n=this.scroll.descendants(Ce,e,t));let[s,o]=[i,n].map(a=>{let l=a.shift();if(l==null)return{};let c=at(l);for(;Object.keys(c).length>0;){let f=a.shift();if(f==null)return c;c=N3(at(f),c)}return c});return{...s,...o}}getHTML(e,t){let[i,n]=this.scroll.line(e);if(i){let s=i.length();return i.length()>=n+t&&!(n===0&&t===s)?Vs(i,n,t,!0):Vs(this.scroll,e,t,!0)}return""}getText(e,t){return this.getContents(e,t).filter(i=>typeof i.insert=="string").map(i=>i.insert).join("")}insertContents(e,t){let i=jb(t),n=new he.default().retain(e).concat(i);return this.scroll.insertContents(e,i),this.update(n)}insertEmbed(e,t,i){return this.scroll.insertAt(e,t,i),this.update(new he.default().retain(e).insert({[t]:i}))}insertText(e,t){let i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return t=t.replace(/\r\n/g,`
`).replace(/\r/g,`
`),this.scroll.insertAt(e,t),Object.keys(i).forEach(n=>{this.scroll.formatAt(e,t.length,n,i[n])}),this.update(new he.default().retain(e).insert(t,Jt(i)))}isBlank(){if(this.scroll.children.length===0)return!0;if(this.scroll.children.length>1)return!1;let e=this.scroll.children.head;if(e?.statics.blotName!==Z.blotName)return!1;let t=e;return t.children.length>1?!1:t.children.head instanceof Me}removeFormat(e,t){let i=this.getText(e,t),[n,s]=this.scroll.line(e+t),o=0,a=new he.default;n!=null&&(o=n.length()-s,a=n.delta().slice(s,s+o-1).insert(`
`));let c=this.getContents(e,t+o).diff(new he.default().insert(i).concat(a)),f=new he.default().retain(e).concat(c);return this.applyDelta(f)}update(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[],i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:void 0,n=this.delta;if(t.length===1&&t[0].type==="characterData"&&t[0].target.data.match(R3)&&this.scroll.find(t[0].target)){let s=this.scroll.find(t[0].target),o=at(s),a=s.offset(this.scroll),l=t[0].oldValue.replace(Kr.CONTENTS,""),c=new he.default().insert(l),f=new he.default().insert(s.value()),m=i&&{oldRange:qb(i.oldRange,-a),newRange:qb(i.newRange,-a)};e=new he.default().retain(a).concat(c.diff(f,m)).reduce((v,g)=>g.insert?v.insert(g.insert,o):v.push(g),new he.default),this.delta=n.compose(e)}else this.delta=this.getDelta(),(!e||!bi(n.compose(e),this.delta))&&(e=n.diff(this.delta,i));return e}};function Rn(r,e,t){if(r.length===0){let[v]=Wc(t.pop());return e<=0?`</li></${v}>`:`</li></${v}>${Rn([],e-1,t)}`}let[{child:i,offset:n,length:s,indent:o,type:a},...l]=r,[c,f]=Wc(a);if(o>e)return t.push(a),o===e+1?`<${c}><li${f}>${Vs(i,n,s)}${Rn(l,o,t)}`:`<${c}><li>${Rn(r,e+1,t)}`;let m=t[t.length-1];if(o===e&&a===m)return`</li><li${f}>${Vs(i,n,s)}${Rn(l,o,t)}`;let[y]=Wc(t.pop());return`</li></${y}>${Rn(r,e-1,t)}`}function Vs(r,e,t){let i=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!1;if("html"in r&&typeof r.html=="function")return r.html(e,t);if(r instanceof ye)return Ci(r.value().slice(e,e+t));if(r instanceof st){if(r.statics.blotName==="list-container"){let c=[];return r.children.forEachAt(e,t,(f,m,y)=>{let v="formats"in f&&typeof f.formats=="function"?f.formats():{};c.push({child:f,offset:m,length:y,indent:v.indent||0,type:v.list})}),Rn(c,-1,[])}let n=[];if(r.children.forEachAt(e,t,(c,f,m)=>{n.push(Vs(c,f,m))}),i||r.statics.blotName==="list")return n.join("");let{outerHTML:s,innerHTML:o}=r.domNode,[a,l]=s.split(`>${o}<`);return a==="<table"?`<table style="border: 1px solid #000;">${n.join("")}<${l}`:`${a}>${n.join("")}<${l}`}return r.domNode instanceof Element?r.domNode.outerHTML:""}function N3(r,e){return Object.keys(e).reduce((t,i)=>{if(r[i]==null)return t;let n=e[i];return n===r[i]?t[i]=n:Array.isArray(n)?n.indexOf(r[i])<0?t[i]=n.concat([r[i]]):t[i]=n:t[i]=[n,r[i]],t},{})}function Wc(r){let e=r==="ordered"?"ol":"ul";switch(r){case"checked":return[e,' data-list="checked"'];case"unchecked":return[e,' data-list="unchecked"'];default:return[e,""]}}function jb(r){return r.reduce((e,t)=>{if(typeof t.insert=="string"){let i=t.insert.replace(/\r\n/g,`
`).replace(/\r/g,`
`);return e.insert(i,t.attributes)}return e.push(t)},new he.default)}function qb(r,e){let{index:t,length:i}=r;return new Ge(t+e,i)}function O3(r){let e=[];return r.forEach(t=>{typeof t.insert=="string"?t.insert.split(`
`).forEach((n,s)=>{s&&e.push({insert:`
`,attributes:t.attributes}),n&&e.push({insert:n,attributes:t.attributes})}):e.push(t)}),e}var Hb=Kc;var rl=class{constructor(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};this.quill=e,this.options=t}};B(rl,"DEFAULTS",{});var ge=rl;var il="\uFEFF",Gc=class extends ce{constructor(e,t){super(e,t),this.contentNode=document.createElement("span"),this.contentNode.setAttribute("contenteditable","false"),Array.from(this.domNode.childNodes).forEach(i=>{this.contentNode.appendChild(i)}),this.leftGuard=document.createTextNode(il),this.rightGuard=document.createTextNode(il),this.domNode.appendChild(this.leftGuard),this.domNode.appendChild(this.contentNode),this.domNode.appendChild(this.rightGuard)}index(e,t){return e===this.leftGuard?0:e===this.rightGuard?1:super.index(e,t)}restore(e){let t=null,i,n=e.data.split(il).join("");if(e===this.leftGuard)if(this.prev instanceof ye){let s=this.prev.length();this.prev.insertAt(s,n),t={startNode:this.prev.domNode,startOffset:s+n.length}}else i=document.createTextNode(n),this.parent.insertBefore(this.scroll.create(i),this),t={startNode:i,startOffset:n.length};else e===this.rightGuard&&(this.next instanceof ye?(this.next.insertAt(0,n),t={startNode:this.next.domNode,startOffset:n.length}):(i=document.createTextNode(n),this.parent.insertBefore(this.scroll.create(i),this.next),t={startNode:i,startOffset:n.length}));return e.data=il,t}update(e,t){e.forEach(i=>{if(i.type==="characterData"&&(i.target===this.leftGuard||i.target===this.rightGuard)){let n=this.restore(i.target);n&&(t.range=n)}})}},Nn=Gc;var Jc=class{constructor(e,t){B(this,"isComposing",!1);this.scroll=e,this.emitter=t,this.setupListeners()}setupListeners(){this.scroll.domNode.addEventListener("compositionstart",e=>{this.isComposing||this.handleCompositionStart(e)}),this.scroll.domNode.addEventListener("compositionend",e=>{this.isComposing&&queueMicrotask(()=>{this.handleCompositionEnd(e)})})}handleCompositionStart(e){let t=e.target instanceof Node?this.scroll.find(e.target,!0):null;t&&!(t instanceof Nn)&&(this.emitter.emit(H.events.COMPOSITION_BEFORE_START,e),this.scroll.batchStart(),this.emitter.emit(H.events.COMPOSITION_START,e),this.isComposing=!0)}handleCompositionEnd(e){this.emitter.emit(H.events.COMPOSITION_BEFORE_END,e),this.scroll.batchEnd(),this.emitter.emit(H.events.COMPOSITION_END,e),this.isComposing=!1}},Ub=Jc;var Xc=class{constructor(e,t){B(this,"modules",{});this.quill=e,this.options=t}init(){Object.keys(this.options.modules).forEach(e=>{this.modules[e]==null&&this.addModule(e)})}addModule(e){let t=this.quill.constructor.import(`modules/${e}`);return this.modules[e]=new t(this.quill,this.options.modules[e]||{}),this.modules[e]}},Ws=Xc;B(Ws,"DEFAULTS",{modules:{}}),B(Ws,"themes",{default:Xc});var On=Ws;var P3=r=>r.parentElement||r.getRootNode().host||null,D3=r=>{let e=r.getBoundingClientRect(),t="offsetWidth"in r&&Math.abs(e.width)/r.offsetWidth||1,i="offsetHeight"in r&&Math.abs(e.height)/r.offsetHeight||1;return{top:e.top,right:e.left+r.clientWidth*t,bottom:e.top+r.clientHeight*i,left:e.left}},nl=r=>{let e=parseInt(r,10);return Number.isNaN(e)?0:e},zb=(r,e,t,i,n,s)=>r<t&&e>i?0:r<t?-(t-r+n):e>i?e-r>i-t?r+n-t:e-i+s:0,I3=(r,e)=>{let t=r.ownerDocument,i=e,n=r;for(;n;){let s=n===t.body,o=s?{top:0,right:window.visualViewport?.width??t.documentElement.clientWidth,bottom:window.visualViewport?.height??t.documentElement.clientHeight,left:0}:D3(n),a=getComputedStyle(n),l=zb(i.left,i.right,o.left,o.right,nl(a.scrollPaddingLeft),nl(a.scrollPaddingRight)),c=zb(i.top,i.bottom,o.top,o.bottom,nl(a.scrollPaddingTop),nl(a.scrollPaddingBottom));if(l||c)if(s)t.defaultView?.scrollBy(l,c);else{let{scrollLeft:f,scrollTop:m}=n;c&&(n.scrollTop+=c),l&&(n.scrollLeft+=l);let y=n.scrollLeft-f,v=n.scrollTop-m;i={left:i.left-y,top:i.top-v,right:i.right-y,bottom:i.bottom-v}}n=s||a.position==="fixed"?null:P3(n)}},$b=I3;var M3=100,B3=["block","break","cursor","inline","scroll","text"],F3=(r,e,t)=>{let i=new Hr;return B3.forEach(n=>{let s=e.query(n);s&&i.register(s)}),r.forEach(n=>{let s=e.query(n);s||t.error(`Cannot register "${n}" specified in "formats" config. Are you sure it was registered?`);let o=0;for(;s;)if(i.register(s),s="blotName"in s?s.requiredContainer??null:null,o+=1,o>M3){t.error(`Cycle detected in registering blot requiredContainer: "${n}"`);break}}),i},Vb=F3;var Dn=yt("quill"),sl=new Hr;st.uiClass="ql-ui";var Pn=class{static debug(e){e===!0&&(e="log"),yt.level(e)}static find(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;return zs.get(e)||sl.find(e,t)}static import(e){return this.imports[e]==null&&Dn.error(`Cannot import ${e}. Are you sure it was registered?`),this.imports[e]}static register(){if(typeof(arguments.length<=0?void 0:arguments[0])!="string"){let e=arguments.length<=0?void 0:arguments[0],t=!!(!(arguments.length<=1)&&arguments[1]),i="attrName"in e?e.attrName:e.blotName;typeof i=="string"?this.register(`formats/${i}`,e,t):Object.keys(e).forEach(n=>{this.register(n,e[n],t)})}else{let e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],i=!!(!(arguments.length<=2)&&arguments[2]);this.imports[e]!=null&&!i&&Dn.warn(`Overwriting ${e} with`,t),this.imports[e]=t,(e.startsWith("blots/")||e.startsWith("formats/"))&&t&&typeof t!="boolean"&&t.blotName!=="abstract"&&sl.register(t),typeof t.register=="function"&&t.register(sl)}}constructor(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(this.options=j3(e,t),this.container=this.options.container,this.container==null){Dn.error("Invalid Quill container",e);return}this.options.debug&&Pn.debug(this.options.debug);let i=this.container.innerHTML.trim();this.container.classList.add("ql-container"),this.container.innerHTML="",zs.set(this.container,this),this.root=this.addContainer("ql-editor"),this.root.classList.add("ql-blank"),this.emitter=new H;let n=Ls.blotName,s=this.options.registry.query(n);if(!s||!("blotName"in s))throw new Error(`Cannot initialize Quill without "${n}" blot`);if(this.scroll=new s(this.options.registry,this.root,{emitter:this.emitter}),this.editor=new Hb(this.scroll),this.selection=new Fb(this.scroll,this.emitter),this.composition=new Ub(this.scroll,this.emitter),this.theme=new this.options.theme(this,this.options),this.keyboard=this.theme.addModule("keyboard"),this.clipboard=this.theme.addModule("clipboard"),this.history=this.theme.addModule("history"),this.uploader=this.theme.addModule("uploader"),this.theme.addModule("input"),this.theme.addModule("uiNode"),this.theme.init(),this.emitter.on(H.events.EDITOR_CHANGE,o=>{o===H.events.TEXT_CHANGE&&this.root.classList.toggle("ql-blank",this.editor.isBlank())}),this.emitter.on(H.events.SCROLL_UPDATE,(o,a)=>{let l=this.selection.lastRange,[c]=this.selection.getRange(),f=l&&c?{oldRange:l,newRange:c}:void 0;Mt.call(this,()=>this.editor.update(null,a,f),o)}),this.emitter.on(H.events.SCROLL_EMBED_UPDATE,(o,a)=>{let l=this.selection.lastRange,[c]=this.selection.getRange(),f=l&&c?{oldRange:l,newRange:c}:void 0;Mt.call(this,()=>{let m=new Gr.default().retain(o.offset(this)).retain({[o.statics.blotName]:a});return this.editor.update(m,[],f)},Pn.sources.USER)}),i){let o=this.clipboard.convert({html:`${i}<p><br></p>`,text:`
`});this.setContents(o)}this.history.clear(),this.options.placeholder&&this.root.setAttribute("data-placeholder",this.options.placeholder),this.options.readOnly&&this.disable(),this.allowReadOnlyEdits=!1}addContainer(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null;if(typeof e=="string"){let i=e;e=document.createElement("div"),e.classList.add(i)}return this.container.insertBefore(e,t),e}blur(){this.selection.setRange(null)}deleteText(e,t,i){return[e,t,,i]=vr(e,t,i),Mt.call(this,()=>this.editor.deleteText(e,t),i,e,-1*t)}disable(){this.enable(!1)}editReadOnly(e){this.allowReadOnlyEdits=!0;let t=e();return this.allowReadOnlyEdits=!1,t}enable(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0;this.scroll.enable(e),this.container.classList.toggle("ql-disabled",!e)}focus(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};this.selection.focus(),e.preventScroll||this.scrollSelectionIntoView()}format(e,t){let i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:H.sources.API;return Mt.call(this,()=>{let n=this.getSelection(!0),s=new Gr.default;if(n==null)return s;if(this.scroll.query(e,q.BLOCK))s=this.editor.formatLine(n.index,n.length,{[e]:t});else{if(n.length===0)return this.selection.format(e,t),s;s=this.editor.formatText(n.index,n.length,{[e]:t})}return this.setSelection(n,H.sources.SILENT),s},i)}formatLine(e,t,i,n,s){let o;return[e,t,o,s]=vr(e,t,i,n,s),Mt.call(this,()=>this.editor.formatLine(e,t,o),s,e,0)}formatText(e,t,i,n,s){let o;return[e,t,o,s]=vr(e,t,i,n,s),Mt.call(this,()=>this.editor.formatText(e,t,o),s,e,0)}getBounds(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,i=null;if(typeof e=="number"?i=this.selection.getBounds(e,t):i=this.selection.getBounds(e.index,e.length),!i)return null;let n=this.container.getBoundingClientRect();return{bottom:i.bottom-n.top,height:i.height,left:i.left-n.left,right:i.right-n.left,top:i.top-n.top,width:i.width}}getContents(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:this.getLength()-e;return[e,t]=vr(e,t),this.editor.getContents(e,t)}getFormat(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:this.getSelection(!0),t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0;return typeof e=="number"?this.editor.getFormat(e,t):this.editor.getFormat(e.index,e.length)}getIndex(e){return e.offset(this.scroll)}getLength(){return this.scroll.length()}getLeaf(e){return this.scroll.leaf(e)}getLine(e){return this.scroll.line(e)}getLines(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Number.MAX_VALUE;return typeof e!="number"?this.scroll.lines(e.index,e.length):this.scroll.lines(e,t)}getModule(e){return this.theme.modules[e]}getSelection(){return(arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1)&&this.focus(),this.update(),this.selection.getRange()[0]}getSemanticHTML(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,t=arguments.length>1?arguments[1]:void 0;return typeof e=="number"&&(t=t??this.getLength()-e),[e,t]=vr(e,t),this.editor.getHTML(e,t)}getText(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,t=arguments.length>1?arguments[1]:void 0;return typeof e=="number"&&(t=t??this.getLength()-e),[e,t]=vr(e,t),this.editor.getText(e,t)}hasFocus(){return this.selection.hasFocus()}insertEmbed(e,t,i){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:Pn.sources.API;return Mt.call(this,()=>this.editor.insertEmbed(e,t,i),n,e)}insertText(e,t,i,n,s){let o;return[e,,o,s]=vr(e,0,i,n,s),Mt.call(this,()=>this.editor.insertText(e,t,o),s,e,t.length)}isEnabled(){return this.scroll.isEnabled()}off(){return this.emitter.off(...arguments)}on(){return this.emitter.on(...arguments)}once(){return this.emitter.once(...arguments)}removeFormat(e,t,i){return[e,t,,i]=vr(e,t,i),Mt.call(this,()=>this.editor.removeFormat(e,t),i,e)}scrollRectIntoView(e){$b(this.root,e)}scrollIntoView(){console.warn("Quill#scrollIntoView() has been deprecated and will be removed in the near future. Please use Quill#scrollSelectionIntoView() instead."),this.scrollSelectionIntoView()}scrollSelectionIntoView(){let e=this.selection.lastRange,t=e&&this.selection.getBounds(e.index,e.length);t&&this.scrollRectIntoView(t)}setContents(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:H.sources.API;return Mt.call(this,()=>{e=new Gr.default(e);let i=this.getLength(),n=this.editor.deleteText(0,i),s=this.editor.insertContents(0,e),o=this.editor.deleteText(this.getLength()-1,1);return n.compose(s).compose(o)},t)}setSelection(e,t,i){e==null?this.selection.setRange(null,t||Pn.sources.API):([e,t,,i]=vr(e,t,i),this.selection.setRange(new Ge(Math.max(0,e),t),i),i!==H.sources.SILENT&&this.scrollSelectionIntoView())}setText(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:H.sources.API,i=new Gr.default().insert(e);return this.setContents(i,t)}update(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:H.sources.USER,t=this.scroll.update(e);return this.selection.update(e),t}updateContents(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:H.sources.API;return Mt.call(this,()=>(e=new Gr.default(e),this.editor.applyDelta(e)),t,!0)}},C=Pn;B(C,"DEFAULTS",{bounds:null,modules:{clipboard:!0,keyboard:!0,history:!0,uploader:!0},placeholder:"",readOnly:!1,registry:sl,theme:"default"}),B(C,"events",H.events),B(C,"sources",H.sources),B(C,"version","2.0.2"),B(C,"imports",{delta:Gr.default,parchment:Rs,"core/module":ge,"core/theme":On});function Wb(r){return typeof r=="string"?document.querySelector(r):r}function Yc(r){return Object.entries(r??{}).reduce((e,t)=>{let[i,n]=t;return{...e,[i]:n===!0?{}:n}},{})}function Kb(r){return Object.fromEntries(Object.entries(r).filter(e=>e[1]!==void 0))}function j3(r,e){let t=Wb(r);if(!t)throw new Error("Invalid Quill container");let n=!e.theme||e.theme===C.DEFAULTS.theme?On:C.import(`themes/${e.theme}`);if(!n)throw new Error(`Invalid theme ${e.theme}. Did you register it?`);let{modules:s,...o}=C.DEFAULTS,{modules:a,...l}=n.DEFAULTS,c=Yc(e.modules);c!=null&&c.toolbar&&c.toolbar.constructor!==Object&&(c={...c,toolbar:{container:c.toolbar}});let f=nt({},Yc(s),Yc(a),c),m={...o,...Kb(l),...Kb(e)},y=e.registry;return y?e.formats&&Dn.warn('Ignoring "formats" option because "registry" is specified'):y=e.formats?Vb(e.formats,m.registry,Dn):m.registry,{...m,registry:y,container:t,theme:n,modules:Object.entries(f).reduce((v,g)=>{let[x,S]=g;if(!S)return v;let T=C.import(`modules/${x}`);return T==null?(Dn.error(`Cannot load ${x} module. Are you sure you registered it?`),v):{...v,[x]:nt({},T.DEFAULTS||{},S)}},{}),bounds:Wb(m.bounds)}}function Mt(r,e,t,i){if(!this.isEnabled()&&e===H.sources.USER&&!this.allowReadOnlyEdits)return new Gr.default;let n=t==null?null:this.getSelection(),s=this.editor.delta,o=r();if(n!=null&&(t===!0&&(t=n.index),i==null?n=Gb(n,o,e):i!==0&&(n=Gb(n,t,i,e)),this.setSelection(n,H.sources.SILENT)),o.length()>0){let a=[H.events.TEXT_CHANGE,o,s,e];this.emitter.emit(H.events.EDITOR_CHANGE,...a),e!==H.sources.SILENT&&this.emitter.emit(...a)}return o}function vr(r,e,t,i,n){let s={};return typeof r.index=="number"&&typeof r.length=="number"?typeof e!="number"?(n=i,i=t,t=e,e=r.length,r=r.index):(e=r.length,r=r.index):typeof e!="number"&&(n=i,i=t,t=e,e=0),typeof t=="object"?(s=t,n=i):typeof t=="string"&&(i!=null?s[t]=i:n=t),n=n||H.sources.API,[r,e,s,n]}function Gb(r,e,t,i){let n=typeof t=="number"?t:0;if(r==null)return null;let s,o;return e&&typeof e.transformPosition=="function"?[s,o]=[r.index,r.index+r.length].map(a=>e.transformPosition(a,i!==H.sources.USER)):[s,o]=[r.index,r.index+r.length].map(a=>a<e||a===e&&i===H.sources.USER?a:n>=0?a+n:Math.max(e,a+n)),new Ge(s,o-s)}var Zc=class extends An{},Lt=Zc;var Rt=Ue(vt(),1);function Jb(r){return r instanceof Z||r instanceof Le}function Xb(r){return typeof r.updateContent=="function"}var Jr=class extends Ls{constructor(e,t,i){let{emitter:n}=i;super(e,t),this.emitter=n,this.batch=!1,this.optimize(),this.enable(),this.domNode.addEventListener("dragstart",s=>this.handleDragStart(s))}batchStart(){Array.isArray(this.batch)||(this.batch=[])}batchEnd(){if(!this.batch)return;let e=this.batch;this.batch=!1,this.update(e)}emitMount(e){this.emitter.emit(H.events.SCROLL_BLOT_MOUNT,e)}emitUnmount(e){this.emitter.emit(H.events.SCROLL_BLOT_UNMOUNT,e)}emitEmbedUpdate(e,t){this.emitter.emit(H.events.SCROLL_EMBED_UPDATE,e,t)}deleteAt(e,t){let[i,n]=this.line(e),[s]=this.line(e+t);if(super.deleteAt(e,t),s!=null&&i!==s&&n>0){if(i instanceof Le||s instanceof Le){this.optimize();return}let o=s.children.head instanceof Me?null:s.children.head;i.moveChildren(s,o),i.remove()}this.optimize()}enable(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0;this.domNode.setAttribute("contenteditable",e?"true":"false")}formatAt(e,t,i,n){super.formatAt(e,t,i,n),this.optimize()}insertAt(e,t,i){if(e>=this.length())if(i==null||this.scroll.query(t,q.BLOCK)==null){let n=this.scroll.create(this.statics.defaultChild.blotName);this.appendChild(n),i==null&&t.endsWith(`
`)?n.insertAt(0,t.slice(0,-1),i):n.insertAt(0,t,i)}else{let n=this.scroll.create(t,i);this.appendChild(n)}else super.insertAt(e,t,i);this.optimize()}insertBefore(e,t){if(e.statics.scope===q.INLINE_BLOT){let i=this.scroll.create(this.statics.defaultChild.blotName);i.appendChild(e),super.insertBefore(i,t)}else super.insertBefore(e,t)}insertContents(e,t){let i=this.deltaToRenderBlocks(t.concat(new Rt.default().insert(`
`))),n=i.pop();if(n==null)return;this.batchStart();let s=i.shift();if(s){let l=s.type==="block"&&(s.delta.length()===0||!this.descendant(Le,e)[0]&&e<this.length()),c=s.type==="block"?s.delta:new Rt.default().insert({[s.key]:s.value});Qc(this,e,c);let f=s.type==="block"?1:0,m=e+c.length()+f;l&&this.insertAt(m-1,`
`);let y=at(this.line(e)[0]),v=Rt.AttributeMap.diff(y,s.attributes)||{};Object.keys(v).forEach(g=>{this.formatAt(m-1,1,g,v[g])}),e=m}let[o,a]=this.children.find(e);if(i.length&&(o&&(o=o.split(a),a=0),i.forEach(l=>{if(l.type==="block"){let c=this.createBlock(l.attributes,o||void 0);Qc(c,0,l.delta)}else{let c=this.create(l.key,l.value);this.insertBefore(c,o||void 0),Object.keys(l.attributes).forEach(f=>{c.format(f,l.attributes[f])})}})),n.type==="block"&&n.delta.length()){let l=o?o.offset(o.scroll)+a:this.length();Qc(this,l,n.delta)}this.batchEnd(),this.optimize()}isEnabled(){return this.domNode.getAttribute("contenteditable")==="true"}leaf(e){let t=this.path(e).pop();if(!t)return[null,-1];let[i,n]=t;return i instanceof Ce?[i,n]:[null,-1]}line(e){return e===this.length()?this.line(e-1):this.descendant(Jb,e)}lines(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Number.MAX_VALUE,i=(n,s,o)=>{let a=[],l=o;return n.children.forEachAt(s,o,(c,f,m)=>{Jb(c)?a.push(c):c instanceof An&&(a=a.concat(i(c,f,l))),l-=m}),a};return i(this,e,t)}optimize(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};this.batch||(super.optimize(e,t),e.length>0&&this.emitter.emit(H.events.SCROLL_OPTIMIZE,e,t))}path(e){return super.path(e).slice(1)}remove(){}update(e){if(this.batch){Array.isArray(e)&&(this.batch=this.batch.concat(e));return}let t=H.sources.USER;typeof e=="string"&&(t=e),Array.isArray(e)||(e=this.observer.takeRecords()),e=e.filter(i=>{let{target:n}=i,s=this.find(n,!0);return s&&!Xb(s)}),e.length>0&&this.emitter.emit(H.events.SCROLL_BEFORE_UPDATE,t,e),super.update(e.concat([])),e.length>0&&this.emitter.emit(H.events.SCROLL_UPDATE,t,e)}updateEmbedAt(e,t,i){let[n]=this.descendant(s=>s instanceof Le,e);n&&n.statics.blotName===t&&Xb(n)&&n.updateContent(i)}handleDragStart(e){e.preventDefault()}deltaToRenderBlocks(e){let t=[],i=new Rt.default;return e.forEach(n=>{let s=n?.insert;if(s)if(typeof s=="string"){let o=s.split(`
`);o.slice(0,-1).forEach(l=>{i.insert(l,n.attributes),t.push({type:"block",delta:i,attributes:n.attributes??{}}),i=new Rt.default});let a=o[o.length-1];a&&i.insert(a,n.attributes)}else{let o=Object.keys(s)[0];if(!o)return;this.query(o,q.INLINE)?i.push(n):(i.length()&&t.push({type:"block",delta:i,attributes:{}}),i=new Rt.default,t.push({type:"blockEmbed",key:o,value:s[o],attributes:n.attributes??{}}))}}),i.length()&&t.push({type:"block",delta:i,attributes:{}}),t}createBlock(e,t){let i,n={};Object.entries(e).forEach(a=>{let[l,c]=a;this.query(l,q.BLOCK&q.BLOT)!=null?i=l:n[l]=c});let s=this.create(i||this.statics.defaultChild.blotName,i?e[i]:void 0);this.insertBefore(s,t||void 0);let o=s.length();return Object.entries(n).forEach(a=>{let[l,c]=a;s.formatAt(0,o,l,c)}),s}};B(Jr,"blotName","scroll"),B(Jr,"className","ql-editor"),B(Jr,"tagName","DIV"),B(Jr,"defaultChild",Z),B(Jr,"allowedChildren",[Z,Le,Lt]);function Qc(r,e,t){t.reduce((i,n)=>{let s=Rt.Op.length(n),o=n.attributes||{};if(n.insert!=null){if(typeof n.insert=="string"){let a=n.insert;r.insertAt(i,a);let[l]=r.descendant(Ce,i),c=at(l);o=Rt.AttributeMap.diff(c,o)||{}}else if(typeof n.insert=="object"){let a=Object.keys(n.insert)[0];if(a==null)return i;if(r.insertAt(i,a,n.insert[a]),r.scroll.query(a,q.INLINE)!=null){let[c]=r.descendant(Ce,i),f=at(c);o=Rt.AttributeMap.diff(f,o)||{}}}}return Object.keys(o).forEach(a=>{r.formatAt(i,s,a,o[a])}),i+s},e)}var Yb=Jr;var lt=Ue(vt(),1);var ed={scope:q.BLOCK,whitelist:["right","center","justify"]},Zb=new Ve("align","align",ed),td=new Se("align","ql-align",ed),ol=new ot("align","text-align",ed);var Ks=class extends ot{value(e){let t=super.value(e);return t.startsWith("rgb(")?(t=t.replace(/^[^\d]+/,"").replace(/[^\d]+$/,""),`#${t.split(",").map(n=>`00${parseInt(n,10).toString(16)}`.slice(-2)).join("")}`):t}},Qb=new Se("color","ql-color",{scope:q.INLINE}),Gs=new Ks("color","color",{scope:q.INLINE});var ev=new Se("background","ql-bg",{scope:q.INLINE}),Js=new Ks("background","background-color",{scope:q.INLINE});var Yt=class extends Lt{static create(e){let t=super.create(e);return t.setAttribute("spellcheck","false"),t}code(e,t){return this.children.map(i=>i.length()<=1?"":i.domNode.innerText).join(`
`).slice(e,e+t)}html(e,t){return`<pre>
${Ci(this.code(e,t))}
</pre>`}},we=class extends Z{static register(){C.register(Yt)}};B(we,"TAB","  ");var In=class extends Be{};In.blotName="code";In.tagName="CODE";we.blotName="code-block";we.className="ql-code-block";we.tagName="DIV";Yt.blotName="code-block-container";Yt.className="ql-code-block-container";Yt.tagName="DIV";Yt.allowedChildren=[we];we.allowedChildren=[ye,Me,Kr];we.requiredContainer=Yt;var rd={scope:q.BLOCK,whitelist:["rtl"]},al=new Ve("direction","dir",rd),id=new Se("direction","ql-direction",rd),ll=new ot("direction","direction",rd);var tv={scope:q.INLINE,whitelist:["serif","monospace"]},sd=new Se("font","ql-font",tv),nd=class extends ot{value(e){return super.value(e).replace(/["']/g,"")}},ul=new nd("font","font-family",tv);var od=new Se("size","ql-size",{scope:q.INLINE,whitelist:["small","large","huge"]}),cl=new ot("size","font-size",{scope:q.INLINE,whitelist:["10px","18px","32px"]});var je=Ue(vt(),1);var q3=yt("quill:keyboard"),H3=/Mac/i.test(navigator.platform)?"metaKey":"ctrlKey",Li=class extends ge{static match(e,t){return["altKey","ctrlKey","metaKey","shiftKey"].some(i=>!!t[i]!==e[i]&&t[i]!==null)?!1:t.key===e.key||t.key===e.which}constructor(e,t){super(e,t),this.bindings={},Object.keys(this.options.bindings).forEach(i=>{this.options.bindings[i]&&this.addBinding(this.options.bindings[i])}),this.addBinding({key:"Enter",shiftKey:null},this.handleEnter),this.addBinding({key:"Enter",metaKey:null,ctrlKey:null,altKey:null},()=>{}),/Firefox/i.test(navigator.userAgent)?(this.addBinding({key:"Backspace"},{collapsed:!0},this.handleBackspace),this.addBinding({key:"Delete"},{collapsed:!0},this.handleDelete)):(this.addBinding({key:"Backspace"},{collapsed:!0,prefix:/^.?$/},this.handleBackspace),this.addBinding({key:"Delete"},{collapsed:!0,suffix:/^.?$/},this.handleDelete)),this.addBinding({key:"Backspace"},{collapsed:!1},this.handleDeleteRange),this.addBinding({key:"Delete"},{collapsed:!1},this.handleDeleteRange),this.addBinding({key:"Backspace",altKey:null,ctrlKey:null,metaKey:null,shiftKey:null},{collapsed:!0,offset:0},this.handleBackspace),this.listen()}addBinding(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},n=z3(e);if(n==null){q3.warn("Attempted to add invalid keyboard binding",n);return}typeof t=="function"&&(t={handler:t}),typeof i=="function"&&(i={handler:i}),(Array.isArray(n.key)?n.key:[n.key]).forEach(o=>{let a={...n,key:o,...t,...i};this.bindings[a.key]=this.bindings[a.key]||[],this.bindings[a.key].push(a)})}listen(){this.quill.root.addEventListener("keydown",e=>{if(e.defaultPrevented||e.isComposing||e.keyCode===229&&(e.key==="Enter"||e.key==="Backspace"))return;let n=(this.bindings[e.key]||[]).concat(this.bindings[e.which]||[]).filter(T=>Li.match(e,T));if(n.length===0)return;let s=C.find(e.target,!0);if(s&&s.scroll!==this.quill.scroll)return;let o=this.quill.getSelection();if(o==null||!this.quill.hasFocus())return;let[a,l]=this.quill.getLine(o.index),[c,f]=this.quill.getLeaf(o.index),[m,y]=o.length===0?[c,f]:this.quill.getLeaf(o.index+o.length),v=c instanceof En?c.value().slice(0,f):"",g=m instanceof En?m.value().slice(y):"",x={collapsed:o.length===0,empty:o.length===0&&a.length()<=1,format:this.quill.getFormat(o),line:a,offset:l,prefix:v,suffix:g,event:e};n.some(T=>{if(T.collapsed!=null&&T.collapsed!==x.collapsed||T.empty!=null&&T.empty!==x.empty||T.offset!=null&&T.offset!==x.offset)return!1;if(Array.isArray(T.format)){if(T.format.every(I=>x.format[I]==null))return!1}else if(typeof T.format=="object"&&!Object.keys(T.format).every(I=>T.format[I]===!0?x.format[I]!=null:T.format[I]===!1?x.format[I]==null:bi(T.format[I],x.format[I])))return!1;return T.prefix!=null&&!T.prefix.test(x.prefix)||T.suffix!=null&&!T.suffix.test(x.suffix)?!1:T.handler.call(this,o,x,T)!==!0})&&e.preventDefault()})}handleBackspace(e,t){let i=/[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(t.prefix)?2:1;if(e.index===0||this.quill.getLength()<=1)return;let n={},[s]=this.quill.getLine(e.index),o=new je.default().retain(e.index-i).delete(i);if(t.offset===0){let[a]=this.quill.getLine(e.index-1);if(a&&!(a.statics.blotName==="block"&&a.length()<=1)){let c=s.formats(),f=this.quill.getFormat(e.index-1,1);if(n=je.AttributeMap.diff(c,f)||{},Object.keys(n).length>0){let m=new je.default().retain(e.index+s.length()-2).retain(1,n);o=o.compose(m)}}}this.quill.updateContents(o,C.sources.USER),this.quill.focus()}handleDelete(e,t){let i=/^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(t.suffix)?2:1;if(e.index>=this.quill.getLength()-i)return;let n={},[s]=this.quill.getLine(e.index),o=new je.default().retain(e.index).delete(i);if(t.offset>=s.length()-1){let[a]=this.quill.getLine(e.index+1);if(a){let l=s.formats(),c=this.quill.getFormat(e.index,1);n=je.AttributeMap.diff(l,c)||{},Object.keys(n).length>0&&(o=o.retain(a.length()-1).retain(1,n))}}this.quill.updateContents(o,C.sources.USER),this.quill.focus()}handleDeleteRange(e){Xs({range:e,quill:this.quill}),this.quill.focus()}handleEnter(e,t){let i=Object.keys(t.format).reduce((s,o)=>(this.quill.scroll.query(o,q.BLOCK)&&!Array.isArray(t.format[o])&&(s[o]=t.format[o]),s),{}),n=new je.default().retain(e.index).delete(e.length).insert(`
`,i);this.quill.updateContents(n,C.sources.USER),this.quill.setSelection(e.index+1,C.sources.SILENT),this.quill.focus()}},U3={bindings:{bold:ad("bold"),italic:ad("italic"),underline:ad("underline"),indent:{key:"Tab",format:["blockquote","indent","list"],handler(r,e){return e.collapsed&&e.offset!==0?!0:(this.quill.format("indent","+1",C.sources.USER),!1)}},outdent:{key:"Tab",shiftKey:!0,format:["blockquote","indent","list"],handler(r,e){return e.collapsed&&e.offset!==0?!0:(this.quill.format("indent","-1",C.sources.USER),!1)}},"outdent backspace":{key:"Backspace",collapsed:!0,shiftKey:null,metaKey:null,ctrlKey:null,altKey:null,format:["indent","list"],offset:0,handler(r,e){e.format.indent!=null?this.quill.format("indent","-1",C.sources.USER):e.format.list!=null&&this.quill.format("list",!1,C.sources.USER)}},"indent code-block":rv(!0),"outdent code-block":rv(!1),"remove tab":{key:"Tab",shiftKey:!0,collapsed:!0,prefix:/\t$/,handler(r){this.quill.deleteText(r.index-1,1,C.sources.USER)}},tab:{key:"Tab",handler(r,e){if(e.format.table)return!0;this.quill.history.cutoff();let t=new je.default().retain(r.index).delete(r.length).insert("	");return this.quill.updateContents(t,C.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(r.index+1,C.sources.SILENT),!1}},"blockquote empty enter":{key:"Enter",collapsed:!0,format:["blockquote"],empty:!0,handler(){this.quill.format("blockquote",!1,C.sources.USER)}},"list empty enter":{key:"Enter",collapsed:!0,format:["list"],empty:!0,handler(r,e){let t={list:!1};e.format.indent&&(t.indent=!1),this.quill.formatLine(r.index,r.length,t,C.sources.USER)}},"checklist enter":{key:"Enter",collapsed:!0,format:{list:"checked"},handler(r){let[e,t]=this.quill.getLine(r.index),i={...e.formats(),list:"checked"},n=new je.default().retain(r.index).insert(`
`,i).retain(e.length()-t-1).retain(1,{list:"unchecked"});this.quill.updateContents(n,C.sources.USER),this.quill.setSelection(r.index+1,C.sources.SILENT),this.quill.scrollSelectionIntoView()}},"header enter":{key:"Enter",collapsed:!0,format:["header"],suffix:/^$/,handler(r,e){let[t,i]=this.quill.getLine(r.index),n=new je.default().retain(r.index).insert(`
`,e.format).retain(t.length()-i-1).retain(1,{header:null});this.quill.updateContents(n,C.sources.USER),this.quill.setSelection(r.index+1,C.sources.SILENT),this.quill.scrollSelectionIntoView()}},"table backspace":{key:"Backspace",format:["table"],collapsed:!0,offset:0,handler(){}},"table delete":{key:"Delete",format:["table"],collapsed:!0,suffix:/^$/,handler(){}},"table enter":{key:"Enter",shiftKey:null,format:["table"],handler(r){let e=this.quill.getModule("table");if(e){let[t,i,n,s]=e.getTable(r),o=$3(t,i,n,s);if(o==null)return;let a=t.offset();if(o<0){let l=new je.default().retain(a).insert(`
`);this.quill.updateContents(l,C.sources.USER),this.quill.setSelection(r.index+1,r.length,C.sources.SILENT)}else if(o>0){a+=t.length();let l=new je.default().retain(a).insert(`
`);this.quill.updateContents(l,C.sources.USER),this.quill.setSelection(a,C.sources.USER)}}}},"table tab":{key:"Tab",shiftKey:null,format:["table"],handler(r,e){let{event:t,line:i}=e,n=i.offset(this.quill.scroll);t.shiftKey?this.quill.setSelection(n-1,C.sources.USER):this.quill.setSelection(n+i.length(),C.sources.USER)}},"list autofill":{key:" ",shiftKey:null,collapsed:!0,format:{"code-block":!1,blockquote:!1,table:!1},prefix:/^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,handler(r,e){if(this.quill.scroll.query("list")==null)return!0;let{length:t}=e.prefix,[i,n]=this.quill.getLine(r.index);if(n>t)return!0;let s;switch(e.prefix.trim()){case"[]":case"[ ]":s="unchecked";break;case"[x]":s="checked";break;case"-":case"*":s="bullet";break;default:s="ordered"}this.quill.insertText(r.index," ",C.sources.USER),this.quill.history.cutoff();let o=new je.default().retain(r.index-n).delete(t+1).retain(i.length()-2-n).retain(1,{list:s});return this.quill.updateContents(o,C.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(r.index-t,C.sources.SILENT),!1}},"code exit":{key:"Enter",collapsed:!0,format:["code-block"],prefix:/^$/,suffix:/^\s*$/,handler(r){let[e,t]=this.quill.getLine(r.index),i=2,n=e;for(;n!=null&&n.length()<=1&&n.formats()["code-block"];)if(n=n.prev,i-=1,i<=0){let s=new je.default().retain(r.index+e.length()-t-2).retain(1,{"code-block":null}).delete(1);return this.quill.updateContents(s,C.sources.USER),this.quill.setSelection(r.index-1,C.sources.SILENT),!1}return!0}},"embed left":dl("ArrowLeft",!1),"embed left shift":dl("ArrowLeft",!0),"embed right":dl("ArrowRight",!1),"embed right shift":dl("ArrowRight",!0),"table down":iv(!1),"table up":iv(!0)}};Li.DEFAULTS=U3;function rv(r){return{key:"Tab",shiftKey:!r,format:{"code-block":!0},handler(e,t){let{event:i}=t,n=this.quill.scroll.query("code-block"),{TAB:s}=n;if(e.length===0&&!i.shiftKey){this.quill.insertText(e.index,s,C.sources.USER),this.quill.setSelection(e.index+s.length,C.sources.SILENT);return}let o=e.length===0?this.quill.getLines(e.index,1):this.quill.getLines(e),{index:a,length:l}=e;o.forEach((c,f)=>{r?(c.insertAt(0,s),f===0?a+=s.length:l+=s.length):c.domNode.textContent.startsWith(s)&&(c.deleteAt(0,s.length),f===0?a-=s.length:l-=s.length)}),this.quill.update(C.sources.USER),this.quill.setSelection(a,l,C.sources.SILENT)}}}function dl(r,e){return{key:r,shiftKey:e,altKey:null,[r==="ArrowLeft"?"prefix":"suffix"]:/^$/,handler(i){let{index:n}=i;r==="ArrowRight"&&(n+=i.length+1);let[s]=this.quill.getLeaf(n);return s instanceof ce?(r==="ArrowLeft"?e?this.quill.setSelection(i.index-1,i.length+1,C.sources.USER):this.quill.setSelection(i.index-1,C.sources.USER):e?this.quill.setSelection(i.index,i.length+1,C.sources.USER):this.quill.setSelection(i.index+i.length+1,C.sources.USER),!1):!0}}}function ad(r){return{key:r[0],shortKey:!0,handler(e,t){this.quill.format(r,!t.format[r],C.sources.USER)}}}function iv(r){return{key:r?"ArrowUp":"ArrowDown",collapsed:!0,format:["table"],handler(e,t){let i=r?"prev":"next",n=t.line,s=n.parent[i];if(s!=null){if(s.statics.blotName==="table-row"){let o=s.children.head,a=n;for(;a.prev!=null;)a=a.prev,o=o.next;let l=o.offset(this.quill.scroll)+Math.min(t.offset,o.length()-1);this.quill.setSelection(l,0,C.sources.USER)}}else{let o=n.table()[i];o!=null&&(r?this.quill.setSelection(o.offset(this.quill.scroll)+o.length()-1,0,C.sources.USER):this.quill.setSelection(o.offset(this.quill.scroll),0,C.sources.USER))}return!1}}}function z3(r){if(typeof r=="string"||typeof r=="number")r={key:r};else if(typeof r=="object")r=Jt(r);else return null;return r.shortKey&&(r[H3]=r.shortKey,delete r.shortKey),r}function Xs(r){let{quill:e,range:t}=r,i=e.getLines(t),n={};if(i.length>1){let s=i[0].formats(),o=i[i.length-1].formats();n=je.AttributeMap.diff(o,s)||{}}e.deleteText(t,C.sources.USER),Object.keys(n).length>0&&e.formatLine(t.index,1,n,C.sources.USER),e.setSelection(t.index,C.sources.SILENT)}function $3(r,e,t,i){return e.prev==null&&e.next==null?t.prev==null&&t.next==null?i===0?-1:1:t.prev==null?-1:1:e.prev==null?-1:e.next==null?1:null}var V3=/font-weight:\s*normal/,W3=["P","OL","UL"],nv=r=>r&&W3.includes(r.tagName),K3=r=>{Array.from(r.querySelectorAll("br")).filter(e=>nv(e.previousElementSibling)&&nv(e.nextElementSibling)).forEach(e=>{e.parentNode?.removeChild(e)})},G3=r=>{Array.from(r.querySelectorAll('b[style*="font-weight"]')).filter(e=>e.getAttribute("style")?.match(V3)).forEach(e=>{let t=r.createDocumentFragment();t.append(...e.childNodes),e.parentNode?.replaceChild(t,e)})};function ld(r){r.querySelector('[id^="docs-internal-guid-"]')&&(G3(r),K3(r))}var J3=/\bmso-list:[^;]*ignore/i,X3=/\bmso-list:[^;]*\bl(\d+)/i,Y3=/\bmso-list:[^;]*\blevel(\d+)/i,Z3=(r,e)=>{let t=r.getAttribute("style"),i=t?.match(X3);if(!i)return null;let n=Number(i[1]),s=t?.match(Y3),o=s?Number(s[1]):1,a=new RegExp(`@list l${n}:level${o}\\s*\\{[^\\}]*mso-level-number-format:\\s*([\\w-]+)`,"i"),l=e.match(a),c=l&&l[1]==="bullet"?"bullet":"ordered";return{id:n,indent:o,type:c,element:r}},Q3=r=>{let e=Array.from(r.querySelectorAll("[style*=mso-list]")),t=[],i=[];e.forEach(o=>{(o.getAttribute("style")||"").match(J3)?t.push(o):i.push(o)}),t.forEach(o=>o.parentNode?.removeChild(o));let n=r.documentElement.innerHTML,s=i.map(o=>Z3(o,n)).filter(o=>o);for(;s.length;){let o=[],a=s.shift();for(;a;)o.push(a),a=s.length&&s[0]?.element===a.element.nextElementSibling&&s[0].id===a.id?s.shift():null;let l=document.createElement("ul");o.forEach(m=>{let y=document.createElement("li");y.setAttribute("data-list",m.type),m.indent>1&&y.setAttribute("class",`ql-indent-${m.indent-1}`),y.innerHTML=m.element.innerHTML,l.appendChild(y)});let c=o[0]?.element,{parentNode:f}=c??{};c&&f?.replaceChild(l,c),o.slice(1).forEach(m=>{let{element:y}=m;f?.removeChild(y)})}};function ud(r){r.documentElement.getAttribute("xmlns:w")==="urn:schemas-microsoft-com:office:word"&&Q3(r)}var eT=[ud,ld],tT=r=>{r.documentElement&&eT.forEach(e=>{e(r)})},sv=tT;var rT=yt("quill:clipboard"),iT=[[Node.TEXT_NODE,mT],[Node.TEXT_NODE,av],["br",lT],[Node.ELEMENT_NODE,av],[Node.ELEMENT_NODE,aT],[Node.ELEMENT_NODE,oT],[Node.ELEMENT_NODE,fT],["li",dT],["ol, ul",hT],["pre",uT],["tr",pT],["b",cd("bold")],["i",cd("italic")],["strike",cd("strike")],["style",cT]],nT=[Zb,al].reduce((r,e)=>(r[e.keyName]=e,r),{}),ov=[ol,Js,Gs,ll,ul,cl].reduce((r,e)=>(r[e.keyName]=e,r),{}),Ys=class extends ge{constructor(e,t){super(e,t),this.quill.root.addEventListener("copy",i=>this.onCaptureCopy(i,!1)),this.quill.root.addEventListener("cut",i=>this.onCaptureCopy(i,!0)),this.quill.root.addEventListener("paste",this.onCapturePaste.bind(this)),this.matchers=[],iT.concat(this.options.matchers??[]).forEach(i=>{let[n,s]=i;this.addMatcher(n,s)})}addMatcher(e,t){this.matchers.push([e,t])}convert(e){let{html:t,text:i}=e,n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(n[we.blotName])return new lt.default().insert(i||"",{[we.blotName]:n[we.blotName]});if(!t)return new lt.default().insert(i||"",n);let s=this.convertHTML(t);return Zs(s,`
`)&&(s.ops[s.ops.length-1].attributes==null||n.table)?s.compose(new lt.default().retain(s.length()-1).delete(1)):s}normalizeHTML(e){sv(e)}convertHTML(e){let t=new DOMParser().parseFromString(e,"text/html");this.normalizeHTML(t);let i=t.body,n=new WeakMap,[s,o]=this.prepareMatching(i,n);return fl(this.quill.scroll,i,s,o,n)}dangerouslyPasteHTML(e,t){let i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:C.sources.API;if(typeof e=="string"){let n=this.convert({html:e,text:""});this.quill.setContents(n,t),this.quill.setSelection(0,C.sources.SILENT)}else{let n=this.convert({html:t,text:""});this.quill.updateContents(new lt.default().retain(e).concat(n),i),this.quill.setSelection(e+n.length(),C.sources.SILENT)}}onCaptureCopy(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;if(e.defaultPrevented)return;e.preventDefault();let[i]=this.quill.selection.getRange();if(i==null)return;let{html:n,text:s}=this.onCopy(i,t);e.clipboardData?.setData("text/plain",s),e.clipboardData?.setData("text/html",n),t&&Xs({range:i,quill:this.quill})}normalizeURIList(e){return e.split(/\r?\n/).filter(t=>t[0]!=="#").join(`
`)}onCapturePaste(e){if(e.defaultPrevented||!this.quill.isEnabled())return;e.preventDefault();let t=this.quill.getSelection(!0);if(t==null)return;let i=e.clipboardData?.getData("text/html"),n=e.clipboardData?.getData("text/plain");if(!i&&!n){let o=e.clipboardData?.getData("text/uri-list");o&&(n=this.normalizeURIList(o))}let s=Array.from(e.clipboardData?.files||[]);if(!i&&s.length>0){this.quill.uploader.upload(t,s);return}if(i&&s.length>0){let o=new DOMParser().parseFromString(i,"text/html");if(o.body.childElementCount===1&&o.body.firstElementChild?.tagName==="IMG"){this.quill.uploader.upload(t,s);return}}this.onPaste(t,{html:i,text:n})}onCopy(e){let t=this.quill.getText(e);return{html:this.quill.getSemanticHTML(e),text:t}}onPaste(e,t){let{text:i,html:n}=t,s=this.quill.getFormat(e.index),o=this.convert({text:i,html:n},s);rT.log("onPaste",o,{text:i,html:n});let a=new lt.default().retain(e.index).delete(e.length).concat(o);this.quill.updateContents(a,C.sources.USER),this.quill.setSelection(a.length()-e.length,C.sources.SILENT),this.quill.scrollSelectionIntoView()}prepareMatching(e,t){let i=[],n=[];return this.matchers.forEach(s=>{let[o,a]=s;switch(o){case Node.TEXT_NODE:n.push(a);break;case Node.ELEMENT_NODE:i.push(a);break;default:Array.from(e.querySelectorAll(o)).forEach(l=>{t.has(l)?t.get(l)?.push(a):t.set(l,[a])});break}}),[i,n]}};B(Ys,"DEFAULTS",{matchers:[]});function Ri(r,e,t,i){return i.query(e)?r.reduce((n,s)=>{if(!s.insert)return n;if(s.attributes&&s.attributes[e])return n.push(s);let o=t?{[e]:t}:{};return n.insert(s.insert,{...o,...s.attributes})},new lt.default):r}function Zs(r,e){let t="";for(let i=r.ops.length-1;i>=0&&t.length<e.length;--i){let n=r.ops[i];if(typeof n.insert!="string")break;t=n.insert+t}return t.slice(-1*e.length)===e}function Xr(r,e){if(!(r instanceof Element))return!1;let t=e.query(r);return t&&t.prototype instanceof ce?!1:["address","article","blockquote","canvas","dd","div","dl","dt","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","iframe","li","main","nav","ol","output","p","pre","section","table","td","tr","ul","video"].includes(r.tagName.toLowerCase())}function sT(r,e){return r.previousElementSibling&&r.nextElementSibling&&!Xr(r.previousElementSibling,e)&&!Xr(r.nextElementSibling,e)}var hl=new WeakMap;function lv(r){return r==null?!1:(hl.has(r)||(r.tagName==="PRE"?hl.set(r,!0):hl.set(r,lv(r.parentNode))),hl.get(r))}function fl(r,e,t,i,n){return e.nodeType===e.TEXT_NODE?i.reduce((s,o)=>o(e,s,r),new lt.default):e.nodeType===e.ELEMENT_NODE?Array.from(e.childNodes||[]).reduce((s,o)=>{let a=fl(r,o,t,i,n);return o.nodeType===e.ELEMENT_NODE&&(a=t.reduce((l,c)=>c(o,l,r),a),a=(n.get(o)||[]).reduce((l,c)=>c(o,l,r),a)),s.concat(a)},new lt.default):new lt.default}function cd(r){return(e,t,i)=>Ri(t,r,!0,i)}function oT(r,e,t){let i=Ve.keys(r),n=Se.keys(r),s=ot.keys(r),o={};return i.concat(n).concat(s).forEach(a=>{let l=t.query(a,q.ATTRIBUTE);l!=null&&(o[l.attrName]=l.value(r),o[l.attrName])||(l=nT[a],l!=null&&(l.attrName===a||l.keyName===a)&&(o[l.attrName]=l.value(r)||void 0),l=ov[a],l!=null&&(l.attrName===a||l.keyName===a)&&(l=ov[a],o[l.attrName]=l.value(r)||void 0))}),Object.entries(o).reduce((a,l)=>{let[c,f]=l;return Ri(a,c,f,t)},e)}function aT(r,e,t){let i=t.query(r);if(i==null)return e;if(i.prototype instanceof ce){let n={},s=i.value(r);if(s!=null)return n[i.blotName]=s,new lt.default().insert(n,i.formats(r,t))}else if(i.prototype instanceof vi&&!Zs(e,`
`)&&e.insert(`
`),"blotName"in i&&"formats"in i&&typeof i.formats=="function")return Ri(e,i.blotName,i.formats(r,t),t);return e}function lT(r,e){return Zs(e,`
`)||e.insert(`
`),e}function uT(r,e,t){let i=t.query("code-block"),n=i&&"formats"in i&&typeof i.formats=="function"?i.formats(r,t):!0;return Ri(e,"code-block",n,t)}function cT(){return new lt.default}function dT(r,e,t){let i=t.query(r);if(i==null||i.blotName!=="list"||!Zs(e,`
`))return e;let n=-1,s=r.parentNode;for(;s!=null;)["OL","UL"].includes(s.tagName)&&(n+=1),s=s.parentNode;return n<=0?e:e.reduce((o,a)=>a.insert?a.attributes&&typeof a.attributes.indent=="number"?o.push(a):o.insert(a.insert,{indent:n,...a.attributes||{}}):o,new lt.default)}function hT(r,e,t){let i=r,n=i.tagName==="OL"?"ordered":"bullet",s=i.getAttribute("data-checked");return s&&(n=s==="true"?"checked":"unchecked"),Ri(e,"list",n,t)}function av(r,e,t){if(!Zs(e,`
`)){if(Xr(r,t)&&(r.childNodes.length>0||r instanceof HTMLParagraphElement))return e.insert(`
`);if(e.length()>0&&r.nextSibling){let i=r.nextSibling;for(;i!=null;){if(Xr(i,t))return e.insert(`
`);let n=t.query(i);if(n&&n.prototype instanceof Le)return e.insert(`
`);i=i.firstChild}}}return e}function fT(r,e,t){let i={},n=r.style||{};return n.fontStyle==="italic"&&(i.italic=!0),n.textDecoration==="underline"&&(i.underline=!0),n.textDecoration==="line-through"&&(i.strike=!0),(n.fontWeight?.startsWith("bold")||parseInt(n.fontWeight,10)>=700)&&(i.bold=!0),e=Object.entries(i).reduce((s,o)=>{let[a,l]=o;return Ri(s,a,l,t)},e),parseFloat(n.textIndent||0)>0?new lt.default().insert("	").concat(e):e}function pT(r,e,t){let i=r.parentElement?.tagName==="TABLE"?r.parentElement:r.parentElement?.parentElement;if(i!=null){let s=Array.from(i.querySelectorAll("tr")).indexOf(r)+1;return Ri(e,"table",s,t)}return e}function mT(r,e,t){let i=r.data;if(r.parentElement?.tagName==="O:P")return e.insert(i.trim());if(!lv(r)){if(i.trim().length===0&&i.includes(`
`)&&!sT(r,t))return e;let n=(s,o)=>{let a=o.replace(/[^\u00a0]/g,"");return a.length<1&&s?" ":a};i=i.replace(/\r\n/g," ").replace(/\n/g," "),i=i.replace(/\s\s+/g,n.bind(n,!0)),(r.previousSibling==null&&r.parentElement!=null&&Xr(r.parentElement,t)||r.previousSibling instanceof Element&&Xr(r.previousSibling,t))&&(i=i.replace(/^\s+/,n.bind(n,!1))),(r.nextSibling==null&&r.parentElement!=null&&Xr(r.parentElement,t)||r.nextSibling instanceof Element&&Xr(r.nextSibling,t))&&(i=i.replace(/\s+$/,n.bind(n,!1)))}return e.insert(i)}var Qs=class extends ge{constructor(t,i){super(t,i);B(this,"lastRecorded",0);B(this,"ignoreChange",!1);B(this,"stack",{undo:[],redo:[]});B(this,"currentRange",null);this.quill.on(C.events.EDITOR_CHANGE,(n,s,o,a)=>{n===C.events.SELECTION_CHANGE?s&&a!==C.sources.SILENT&&(this.currentRange=s):n===C.events.TEXT_CHANGE&&(this.ignoreChange||(!this.options.userOnly||a===C.sources.USER?this.record(s,o):this.transform(s)),this.currentRange=dd(this.currentRange,s))}),this.quill.keyboard.addBinding({key:"z",shortKey:!0},this.undo.bind(this)),this.quill.keyboard.addBinding({key:["z","Z"],shortKey:!0,shiftKey:!0},this.redo.bind(this)),/Win/i.test(navigator.platform)&&this.quill.keyboard.addBinding({key:"y",shortKey:!0},this.redo.bind(this)),this.quill.root.addEventListener("beforeinput",n=>{n.inputType==="historyUndo"?(this.undo(),n.preventDefault()):n.inputType==="historyRedo"&&(this.redo(),n.preventDefault())})}change(t,i){if(this.stack[t].length===0)return;let n=this.stack[t].pop();if(!n)return;let s=this.quill.getContents(),o=n.delta.invert(s);this.stack[i].push({delta:o,range:dd(n.range,o)}),this.lastRecorded=0,this.ignoreChange=!0,this.quill.updateContents(n.delta,C.sources.USER),this.ignoreChange=!1,this.restoreSelection(n)}clear(){this.stack={undo:[],redo:[]}}cutoff(){this.lastRecorded=0}record(t,i){if(t.ops.length===0)return;this.stack.redo=[];let n=t.invert(i),s=this.currentRange,o=Date.now();if(this.lastRecorded+this.options.delay>o&&this.stack.undo.length>0){let a=this.stack.undo.pop();a&&(n=n.compose(a.delta),s=a.range)}else this.lastRecorded=o;n.length()!==0&&(this.stack.undo.push({delta:n,range:s}),this.stack.undo.length>this.options.maxStack&&this.stack.undo.shift())}redo(){this.change("redo","undo")}transform(t){uv(this.stack.undo,t),uv(this.stack.redo,t)}undo(){this.change("undo","redo")}restoreSelection(t){if(t.range)this.quill.setSelection(t.range,C.sources.USER);else{let i=bT(this.quill.scroll,t.delta);this.quill.setSelection(i,C.sources.USER)}}};B(Qs,"DEFAULTS",{delay:1e3,maxStack:100,userOnly:!1});function uv(r,e){let t=e;for(let i=r.length-1;i>=0;i-=1){let n=r[i];r[i]={delta:t.transform(n.delta,!0),range:n.range&&dd(n.range,t)},t=n.delta.transform(t),r[i].delta.length()===0&&r.splice(i,1)}}function gT(r,e){let t=e.ops[e.ops.length-1];return t==null?!1:t.insert!=null?typeof t.insert=="string"&&t.insert.endsWith(`
`):t.attributes!=null?Object.keys(t.attributes).some(i=>r.query(i,q.BLOCK)!=null):!1}function bT(r,e){let t=e.reduce((n,s)=>n+(s.delete||0),0),i=e.length()-t;return gT(r,e)&&(i-=1),i}function dd(r,e){if(!r)return r;let t=e.transformPosition(r.index),i=e.transformPosition(r.index+r.length);return{index:t,length:i-t}}var cv=Ue(vt(),1);var pl=class extends ge{constructor(e,t){super(e,t),e.root.addEventListener("drop",i=>{i.preventDefault();let n=null;if(document.caretRangeFromPoint)n=document.caretRangeFromPoint(i.clientX,i.clientY);else if(document.caretPositionFromPoint){let o=document.caretPositionFromPoint(i.clientX,i.clientY);n=document.createRange(),n.setStart(o.offsetNode,o.offset),n.setEnd(o.offsetNode,o.offset)}let s=n&&e.selection.normalizeNative(n);if(s){let o=e.selection.normalizedToRange(s);i.dataTransfer?.files&&this.upload(o,i.dataTransfer.files)}})}upload(e,t){let i=[];Array.from(t).forEach(n=>{n&&this.options.mimetypes?.includes(n.type)&&i.push(n)}),i.length>0&&this.options.handler.call(this,e,i)}};pl.DEFAULTS={mimetypes:["image/png","image/jpeg"],handler(r,e){if(!this.quill.scroll.query("image"))return;let t=e.map(i=>new Promise(n=>{let s=new FileReader;s.onload=()=>{n(s.result)},s.readAsDataURL(i)}));Promise.all(t).then(i=>{let n=i.reduce((s,o)=>s.insert({image:o}),new cv.default().retain(r.index).delete(r.length));this.quill.updateContents(n,H.sources.USER),this.quill.setSelection(r.index+i.length,H.sources.SILENT)})}};var dv=pl;var ml=Ue(vt(),1);var hv=Ue(vt(),1);var vT=["insertText","insertReplacementText"],hd=class extends ge{constructor(e,t){super(e,t),e.root.addEventListener("beforeinput",i=>{this.handleBeforeInput(i)}),/Android/i.test(navigator.userAgent)||e.on(C.events.COMPOSITION_BEFORE_START,()=>{this.handleCompositionStart()})}deleteRange(e){Xs({range:e,quill:this.quill})}replaceText(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"";if(e.length===0)return!1;if(t){let i=this.quill.getFormat(e.index,1);this.deleteRange(e),this.quill.updateContents(new hv.default().retain(e.index).insert(t,i),C.sources.USER)}else this.deleteRange(e);return this.quill.setSelection(e.index+t.length,0,C.sources.SILENT),!0}handleBeforeInput(e){if(this.quill.composition.isComposing||e.defaultPrevented||!vT.includes(e.inputType))return;let t=e.getTargetRanges?e.getTargetRanges()[0]:null;if(!t||t.collapsed===!0)return;let i=yT(e);if(i==null)return;let n=this.quill.selection.normalizeNative(t),s=n?this.quill.selection.normalizedToRange(n):null;s&&this.replaceText(s,i)&&e.preventDefault()}handleCompositionStart(){let e=this.quill.getSelection();e&&this.replaceText(e)}};function yT(r){return typeof r.data=="string"?r.data:r.dataTransfer?.types.includes("text/plain")?r.dataTransfer.getData("text/plain"):null}var fv=hd;var wT=/Mac/i.test(navigator.platform),AT=100,ET=r=>!!(r.key==="ArrowLeft"||r.key==="ArrowRight"||r.key==="ArrowUp"||r.key==="ArrowDown"||r.key==="Home"||wT&&r.key==="a"&&r.ctrlKey===!0),fd=class extends ge{constructor(t,i){super(t,i);B(this,"isListening",!1);B(this,"selectionChangeDeadline",0);this.handleArrowKeys(),this.handleNavigationShortcuts()}handleArrowKeys(){this.quill.keyboard.addBinding({key:["ArrowLeft","ArrowRight"],offset:0,shiftKey:null,handler(t,i){let{line:n,event:s}=i;if(!(n instanceof st)||!n.uiNode)return!0;let o=getComputedStyle(n.domNode).direction==="rtl";return o&&s.key!=="ArrowRight"||!o&&s.key!=="ArrowLeft"?!0:(this.quill.setSelection(t.index-1,t.length+(s.shiftKey?1:0),C.sources.USER),!1)}})}handleNavigationShortcuts(){this.quill.root.addEventListener("keydown",t=>{!t.defaultPrevented&&ET(t)&&this.ensureListeningToSelectionChange()})}ensureListeningToSelectionChange(){if(this.selectionChangeDeadline=Date.now()+AT,this.isListening)return;this.isListening=!0;let t=()=>{this.isListening=!1,Date.now()<=this.selectionChangeDeadline&&this.handleSelectionChange()};document.addEventListener("selectionchange",t,{once:!0})}handleSelectionChange(){let t=document.getSelection();if(!t)return;let i=t.getRangeAt(0);if(i.collapsed!==!0||i.startOffset!==0)return;let n=this.quill.scroll.find(i.startContainer);if(!(n instanceof st)||!n.uiNode)return;let s=document.createRange();s.setStartAfter(n.uiNode),s.setEndAfter(n.uiNode),t.removeAllRanges(),t.addRange(s)}},pv=fd;C.register({"blots/block":Z,"blots/block/embed":Le,"blots/break":Me,"blots/container":Lt,"blots/cursor":Kr,"blots/embed":Nn,"blots/inline":Be,"blots/scroll":Yb,"blots/text":ye,"modules/clipboard":Ys,"modules/history":Qs,"modules/keyboard":Li,"modules/uploader":dv,"modules/input":fv,"modules/uiNode":pv});var pd=C;var md=class extends Se{add(e,t){let i=0;if(t==="+1"||t==="-1"){let n=this.value(e)||0;i=t==="+1"?n+1:n-1}else typeof t=="number"&&(i=t);return i===0?(this.remove(e),!0):super.add(e,i.toString())}canAdd(e,t){return super.canAdd(e,t)||super.canAdd(e,parseInt(t,10))}value(e){return parseInt(super.value(e),10)||void 0}},xT=new md("indent","ql-indent",{scope:q.BLOCK,whitelist:[1,2,3,4,5,6,7,8]}),mv=xT;var eo=class extends Z{};B(eo,"blotName","blockquote"),B(eo,"tagName","blockquote");var gv=eo;var to=class extends Z{static formats(e){return this.tagName.indexOf(e.tagName)+1}};B(to,"blotName","header"),B(to,"tagName",["H1","H2","H3","H4","H5","H6"]);var bv=to;var Ni=class extends Lt{};Ni.blotName="list-container";Ni.tagName="OL";var Yr=class extends Z{static create(e){let t=super.create();return t.setAttribute("data-list",e),t}static formats(e){return e.getAttribute("data-list")||void 0}static register(){C.register(Ni)}constructor(e,t){super(e,t);let i=t.ownerDocument.createElement("span"),n=s=>{if(!e.isEnabled())return;let o=this.statics.formats(t,e);o==="checked"?(this.format("list","unchecked"),s.preventDefault()):o==="unchecked"&&(this.format("list","checked"),s.preventDefault())};i.addEventListener("mousedown",n),i.addEventListener("touchstart",n),this.attachUI(i)}format(e,t){e===this.statics.blotName&&t?this.domNode.setAttribute("data-list",t):super.format(e,t)}};Yr.blotName="list";Yr.tagName="LI";Ni.allowedChildren=[Yr];Yr.requiredContainer=Ni;var ro=class extends Be{static create(){return super.create()}static formats(){return!0}optimize(e){super.optimize(e),this.domNode.tagName!==this.statics.tagName[0]&&this.replaceWith(this.statics.blotName)}};B(ro,"blotName","bold"),B(ro,"tagName",["STRONG","B"]);var Mn=ro;var io=class extends Mn{};B(io,"blotName","italic"),B(io,"tagName",["EM","I"]);var vv=io;var wt=class extends Be{static create(e){let t=super.create(e);return t.setAttribute("href",this.sanitize(e)),t.setAttribute("rel","noopener noreferrer"),t.setAttribute("target","_blank"),t}static formats(e){return e.getAttribute("href")}static sanitize(e){return gd(e,this.PROTOCOL_WHITELIST)?e:this.SANITIZED_URL}format(e,t){e!==this.statics.blotName||!t?super.format(e,t):this.domNode.setAttribute("href",this.constructor.sanitize(t))}};B(wt,"blotName","link"),B(wt,"tagName","A"),B(wt,"SANITIZED_URL","about:blank"),B(wt,"PROTOCOL_WHITELIST",["http","https","mailto","tel","sms"]);function gd(r,e){let t=document.createElement("a");t.href=r;let i=t.href.slice(0,t.href.indexOf(":"));return e.indexOf(i)>-1}var no=class extends Be{static create(e){return e==="super"?document.createElement("sup"):e==="sub"?document.createElement("sub"):super.create(e)}static formats(e){if(e.tagName==="SUB")return"sub";if(e.tagName==="SUP")return"super"}};B(no,"blotName","script"),B(no,"tagName",["SUB","SUP"]);var yv=no;var so=class extends Mn{};B(so,"blotName","strike"),B(so,"tagName",["S","STRIKE"]);var wv=so;var oo=class extends Be{};B(oo,"blotName","underline"),B(oo,"tagName","U");var Av=oo;var Bn=class extends Nn{static create(e){if(window.katex==null)throw new Error("Formula module requires KaTeX.");let t=super.create(e);return typeof e=="string"&&(window.katex.render(e,t,{throwOnError:!1,errorColor:"#f00"}),t.setAttribute("data-value",e)),t}static value(e){return e.getAttribute("data-value")}html(){let{formula:e}=this.value();return`<span>${e}</span>`}};B(Bn,"blotName","formula"),B(Bn,"className","ql-formula"),B(Bn,"tagName","SPAN");var Ev=Bn;var xv=["alt","height","width"],ao=class extends ce{static create(e){let t=super.create(e);return typeof e=="string"&&t.setAttribute("src",this.sanitize(e)),t}static formats(e){return xv.reduce((t,i)=>(e.hasAttribute(i)&&(t[i]=e.getAttribute(i)),t),{})}static match(e){return/\.(jpe?g|gif|png)$/.test(e)||/^data:image\/.+;base64/.test(e)}static sanitize(e){return gd(e,["http","https","data"])?e:"//:0"}static value(e){return e.getAttribute("src")}format(e,t){xv.indexOf(e)>-1?t?this.domNode.setAttribute(e,t):this.domNode.removeAttribute(e):super.format(e,t)}};B(ao,"blotName","image"),B(ao,"tagName","IMG");var _v=ao;var kv=["height","width"],Fn=class extends Le{static create(e){let t=super.create(e);return t.setAttribute("frameborder","0"),t.setAttribute("allowfullscreen","true"),t.setAttribute("src",this.sanitize(e)),t}static formats(e){return kv.reduce((t,i)=>(e.hasAttribute(i)&&(t[i]=e.getAttribute(i)),t),{})}static sanitize(e){return wt.sanitize(e)}static value(e){return e.getAttribute("src")}format(e,t){kv.indexOf(e)>-1?t?this.domNode.setAttribute(e,t):this.domNode.removeAttribute(e):super.format(e,t)}html(){let{video:e}=this.value();return`<a href="${e}">${e}</a>`}};B(Fn,"blotName","video"),B(Fn,"className","ql-video"),B(Fn,"tagName","IFRAME");var Sv=Fn;var gl=Ue(vt(),1);var lo=new Se("code-token","hljs",{scope:q.INLINE}),Bt=class extends Be{static formats(e,t){for(;e!=null&&e!==t.domNode;){if(e.classList&&e.classList.contains(we.className))return super.formats(e,t);e=e.parentNode}}constructor(e,t,i){super(e,t,i),lo.add(this.domNode,i)}format(e,t){e!==Bt.blotName?super.format(e,t):t?lo.add(this.domNode,t):(lo.remove(this.domNode),this.domNode.classList.remove(this.statics.className))}optimize(){super.optimize(...arguments),lo.value(this.domNode)||this.unwrap()}};Bt.blotName="code-token";Bt.className="ql-token";var ut=class extends we{static create(e){let t=super.create(e);return typeof e=="string"&&t.setAttribute("data-language",e),t}static formats(e){return e.getAttribute("data-language")||"plain"}static register(){}format(e,t){e===this.statics.blotName&&t?this.domNode.setAttribute("data-language",t):super.format(e,t)}replaceWith(e,t){return this.formatAt(0,this.length(),Bt.blotName,!1),super.replaceWith(e,t)}},Oi=class extends Yt{attach(){super.attach(),this.forceNext=!1,this.scroll.emitMount(this)}format(e,t){e===ut.blotName&&(this.forceNext=!0,this.children.forEach(i=>{i.format(e,t)}))}formatAt(e,t,i,n){i===ut.blotName&&(this.forceNext=!0),super.formatAt(e,t,i,n)}highlight(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;if(this.children.head==null)return;let n=`${Array.from(this.domNode.childNodes).filter(o=>o!==this.uiNode).map(o=>o.textContent).join(`
`)}
`,s=ut.formats(this.children.head.domNode);if(t||this.forceNext||this.cachedText!==n){if(n.trim().length>0||this.cachedText==null){let o=this.children.reduce((l,c)=>l.concat(Mc(c,!1)),new gl.default),a=e(n,s);o.diff(a).reduce((l,c)=>{let{retain:f,attributes:m}=c;return f?(m&&Object.keys(m).forEach(y=>{[ut.blotName,Bt.blotName].includes(y)&&this.formatAt(l,f,y,m[y])}),l+f):l},0)}this.cachedText=n,this.forceNext=!1}}html(e,t){let[i]=this.children.find(e);return`<pre data-language="${i?ut.formats(i.domNode):"plain"}">
${Ci(this.code(e,t))}
</pre>`}optimize(e){if(super.optimize(e),this.parent!=null&&this.children.head!=null&&this.uiNode!=null){let t=ut.formats(this.children.head.domNode);t!==this.uiNode.value&&(this.uiNode.value=t)}}};Oi.allowedChildren=[ut];ut.requiredContainer=Oi;ut.allowedChildren=[Bt,Kr,ye,Me];var _T=(r,e,t)=>{if(typeof r.versionString=="string"){let i=r.versionString.split(".")[0];if(parseInt(i,10)>=11)return r.highlight(t,{language:e}).value}return r.highlight(e,t).value},uo=class extends ge{static register(){C.register(Bt,!0),C.register(ut,!0),C.register(Oi,!0)}constructor(e,t){if(super(e,t),this.options.hljs==null)throw new Error("Syntax module requires highlight.js. Please include the library on the page before Quill.");this.languages=this.options.languages.reduce((i,n)=>{let{key:s}=n;return i[s]=!0,i},{}),this.highlightBlot=this.highlightBlot.bind(this),this.initListener(),this.initTimer()}initListener(){this.quill.on(C.events.SCROLL_BLOT_MOUNT,e=>{if(!(e instanceof Oi))return;let t=this.quill.root.ownerDocument.createElement("select");this.options.languages.forEach(i=>{let{key:n,label:s}=i,o=t.ownerDocument.createElement("option");o.textContent=s,o.setAttribute("value",n),t.appendChild(o)}),t.addEventListener("change",()=>{e.format(ut.blotName,t.value),this.quill.root.focus(),this.highlight(e,!0)}),e.uiNode==null&&(e.attachUI(t),e.children.head&&(t.value=ut.formats(e.children.head.domNode)))})}initTimer(){let e=null;this.quill.on(C.events.SCROLL_OPTIMIZE,()=>{e&&clearTimeout(e),e=setTimeout(()=>{this.highlight(),e=null},this.options.interval)})}highlight(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null,t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;if(this.quill.selection.composing)return;this.quill.update(C.sources.USER);let i=this.quill.getSelection();(e==null?this.quill.scroll.descendants(Oi):[e]).forEach(s=>{s.highlight(this.highlightBlot,t)}),this.quill.update(C.sources.SILENT),i!=null&&this.quill.setSelection(i,C.sources.SILENT)}highlightBlot(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"plain";if(t=this.languages[t]?t:"plain",t==="plain")return Ci(e).split(`
`).reduce((n,s,o)=>(o!==0&&n.insert(`
`,{[we.blotName]:t}),n.insert(s)),new gl.default);let i=this.quill.root.ownerDocument.createElement("div");return i.classList.add(we.className),i.innerHTML=_T(this.options.hljs,t,e),fl(this.quill.scroll,i,[(n,s)=>{let o=lo.value(n);return o?s.compose(new gl.default().retain(s.length(),{[Bt.blotName]:o})):s}],[(n,s)=>n.data.split(`
`).reduce((o,a,l)=>(l!==0&&o.insert(`
`,{[we.blotName]:t}),o.insert(a)),s)],new WeakMap)}};uo.DEFAULTS={hljs:(()=>window.hljs)(),interval:1e3,languages:[{key:"plain",label:"Plain"},{key:"bash",label:"Bash"},{key:"cpp",label:"C++"},{key:"cs",label:"C#"},{key:"css",label:"CSS"},{key:"diff",label:"Diff"},{key:"xml",label:"HTML/XML"},{key:"java",label:"Java"},{key:"javascript",label:"JavaScript"},{key:"markdown",label:"Markdown"},{key:"php",label:"PHP"},{key:"python",label:"Python"},{key:"ruby",label:"Ruby"},{key:"sql",label:"SQL"}]};var Cv=Ue(vt(),1);var bd=class extends Z{static create(e){let t=super.create();return e?t.setAttribute("data-row",e):t.setAttribute("data-row",bl()),t}static formats(e){if(e.hasAttribute("data-row"))return e.getAttribute("data-row")}cellOffset(){return this.parent?this.parent.children.indexOf(this):-1}format(e,t){e===bd.blotName&&t?this.domNode.setAttribute("data-row",t):super.format(e,t)}row(){return this.parent}rowOffset(){return this.row()?this.row().rowOffset():-1}table(){return this.row()&&this.row().table()}},ct=bd;B(ct,"blotName","table"),B(ct,"tagName","TD");var Nt=class extends Lt{checkMerge(){if(super.checkMerge()&&this.next.children.head!=null){let e=this.children.head.formats(),t=this.children.tail.formats(),i=this.next.children.head.formats(),n=this.next.children.tail.formats();return e.table===t.table&&e.table===i.table&&e.table===n.table}return!1}optimize(e){super.optimize(e),this.children.forEach(t=>{if(t.next==null)return;let i=t.formats(),n=t.next.formats();if(i.table!==n.table){let s=this.splitAfter(t);s&&s.optimize(),this.prev&&this.prev.optimize()}})}rowOffset(){return this.parent?this.parent.children.indexOf(this):-1}table(){return this.parent&&this.parent.parent}};B(Nt,"blotName","table-row"),B(Nt,"tagName","TR");var At=class extends Lt{};B(At,"blotName","table-body"),B(At,"tagName","TBODY");var yr=class extends Lt{balanceCells(){let e=this.descendants(Nt),t=e.reduce((i,n)=>Math.max(n.children.length,i),0);e.forEach(i=>{new Array(t-i.children.length).fill(0).forEach(()=>{let n;i.children.head!=null&&(n=ct.formats(i.children.head.domNode));let s=this.scroll.create(ct.blotName,n);i.appendChild(s),s.optimize()})})}cells(e){return this.rows().map(t=>t.children.at(e))}deleteColumn(e){let[t]=this.descendant(At);t==null||t.children.head==null||t.children.forEach(i=>{let n=i.children.at(e);n?.remove()})}insertColumn(e){let[t]=this.descendant(At);t==null||t.children.head==null||t.children.forEach(i=>{let n=i.children.at(e),s=ct.formats(i.children.head.domNode),o=this.scroll.create(ct.blotName,s);i.insertBefore(o,n)})}insertRow(e){let[t]=this.descendant(At);if(t==null||t.children.head==null)return;let i=bl(),n=this.scroll.create(Nt.blotName);t.children.head.children.forEach(()=>{let o=this.scroll.create(ct.blotName,i);n.appendChild(o)});let s=t.children.at(e);t.insertBefore(n,s)}rows(){let e=this.children.head;return e==null?[]:e.children.map(t=>t)}};B(yr,"blotName","table-container"),B(yr,"tagName","TABLE");yr.allowedChildren=[At];At.requiredContainer=yr;At.allowedChildren=[Nt];Nt.requiredContainer=At;Nt.allowedChildren=[ct];ct.requiredContainer=Nt;function bl(){return`row-${Math.random().toString(36).slice(2,6)}`}var vd=class extends ge{static register(){C.register(ct),C.register(Nt),C.register(At),C.register(yr)}constructor(){super(...arguments),this.listenBalanceCells()}balanceTables(){this.quill.scroll.descendants(yr).forEach(e=>{e.balanceCells()})}deleteColumn(){let[e,,t]=this.getTable();t!=null&&(e.deleteColumn(t.cellOffset()),this.quill.update(C.sources.USER))}deleteRow(){let[,e]=this.getTable();e!=null&&(e.remove(),this.quill.update(C.sources.USER))}deleteTable(){let[e]=this.getTable();if(e==null)return;let t=e.offset();e.remove(),this.quill.update(C.sources.USER),this.quill.setSelection(t,C.sources.SILENT)}getTable(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:this.quill.getSelection();if(e==null)return[null,null,null,-1];let[t,i]=this.quill.getLine(e.index);if(t==null||t.statics.blotName!==ct.blotName)return[null,null,null,-1];let n=t.parent;return[n.parent.parent,n,t,i]}insertColumn(e){let t=this.quill.getSelection();if(!t)return;let[i,n,s]=this.getTable(t);if(s==null)return;let o=s.cellOffset();i.insertColumn(o+e),this.quill.update(C.sources.USER);let a=n.rowOffset();e===0&&(a+=1),this.quill.setSelection(t.index+a,t.length,C.sources.SILENT)}insertColumnLeft(){this.insertColumn(0)}insertColumnRight(){this.insertColumn(1)}insertRow(e){let t=this.quill.getSelection();if(!t)return;let[i,n,s]=this.getTable(t);if(s==null)return;let o=n.rowOffset();i.insertRow(o+e),this.quill.update(C.sources.USER),e>0?this.quill.setSelection(t,C.sources.SILENT):this.quill.setSelection(t.index+n.children.length,t.length,C.sources.SILENT)}insertRowAbove(){this.insertRow(0)}insertRowBelow(){this.insertRow(1)}insertTable(e,t){let i=this.quill.getSelection();if(i==null)return;let n=new Array(e).fill(0).reduce(s=>{let o=new Array(t).fill(`
`).join("");return s.insert(o,{table:bl()})},new Cv.default().retain(i.index));this.quill.updateContents(n,C.sources.USER),this.quill.setSelection(i.index,C.sources.SILENT),this.balanceTables()}listenBalanceCells(){this.quill.on(C.events.SCROLL_OPTIMIZE,e=>{e.some(t=>["TD","TR","TBODY","TABLE"].includes(t.target.tagName)?(this.quill.once(C.events.TEXT_CHANGE,(i,n,s)=>{s===C.sources.USER&&this.balanceTables()}),!0):!1)})}},Tv=vd;var Nv=Ue(vt(),1);var Lv=yt("quill:toolbar"),jn=class extends ge{constructor(e,t){if(super(e,t),Array.isArray(this.options.container)){let i=document.createElement("div");i.setAttribute("role","toolbar"),kT(i,this.options.container),e.container?.parentNode?.insertBefore(i,e.container),this.container=i}else typeof this.options.container=="string"?this.container=document.querySelector(this.options.container):this.container=this.options.container;if(!(this.container instanceof HTMLElement)){Lv.error("Container required for toolbar",this.options);return}this.container.classList.add("ql-toolbar"),this.controls=[],this.handlers={},this.options.handlers&&Object.keys(this.options.handlers).forEach(i=>{let n=this.options.handlers?.[i];n&&this.addHandler(i,n)}),Array.from(this.container.querySelectorAll("button, select")).forEach(i=>{this.attach(i)}),this.quill.on(C.events.EDITOR_CHANGE,()=>{let[i]=this.quill.selection.getRange();this.update(i)})}addHandler(e,t){this.handlers[e]=t}attach(e){let t=Array.from(e.classList).find(n=>n.indexOf("ql-")===0);if(!t)return;if(t=t.slice(3),e.tagName==="BUTTON"&&e.setAttribute("type","button"),this.handlers[t]==null&&this.quill.scroll.query(t)==null){Lv.warn("ignoring attaching to nonexistent format",t,e);return}let i=e.tagName==="SELECT"?"change":"click";e.addEventListener(i,n=>{let s;if(e.tagName==="SELECT"){if(e.selectedIndex<0)return;let a=e.options[e.selectedIndex];a.hasAttribute("selected")?s=!1:s=a.value||!1}else e.classList.contains("ql-active")?s=!1:s=e.value||!e.hasAttribute("value"),n.preventDefault();this.quill.focus();let[o]=this.quill.selection.getRange();if(this.handlers[t]!=null)this.handlers[t].call(this,s);else if(this.quill.scroll.query(t).prototype instanceof ce){if(s=prompt(`Enter ${t}`),!s)return;this.quill.updateContents(new Nv.default().retain(o.index).delete(o.length).insert({[t]:s}),C.sources.USER)}else this.quill.format(t,s,C.sources.USER);this.update(o)}),this.controls.push([t,e])}update(e){let t=e==null?{}:this.quill.getFormat(e);this.controls.forEach(i=>{let[n,s]=i;if(s.tagName==="SELECT"){let o=null;if(e==null)o=null;else if(t[n]==null)o=s.querySelector("option[selected]");else if(!Array.isArray(t[n])){let a=t[n];typeof a=="string"&&(a=a.replace(/"/g,'\\"')),o=s.querySelector(`option[value="${a}"]`)}o==null?(s.value="",s.selectedIndex=-1):o.selected=!0}else if(e==null)s.classList.remove("ql-active"),s.setAttribute("aria-pressed","false");else if(s.hasAttribute("value")){let o=t[n],a=o===s.getAttribute("value")||o!=null&&o.toString()===s.getAttribute("value")||o==null&&!s.getAttribute("value");s.classList.toggle("ql-active",a),s.setAttribute("aria-pressed",a.toString())}else{let o=t[n]!=null;s.classList.toggle("ql-active",o),s.setAttribute("aria-pressed",o.toString())}})}};jn.DEFAULTS={};function Rv(r,e,t){let i=document.createElement("button");i.setAttribute("type","button"),i.classList.add(`ql-${e}`),i.setAttribute("aria-pressed","false"),t!=null?(i.value=t,i.setAttribute("aria-label",`${e}: ${t}`)):i.setAttribute("aria-label",e),r.appendChild(i)}function kT(r,e){Array.isArray(e[0])||(e=[e]),e.forEach(t=>{let i=document.createElement("span");i.classList.add("ql-formats"),t.forEach(n=>{if(typeof n=="string")Rv(i,n);else{let s=Object.keys(n)[0],o=n[s];Array.isArray(o)?ST(i,s,o):Rv(i,s,o)}}),r.appendChild(i)})}function ST(r,e,t){let i=document.createElement("select");i.classList.add(`ql-${e}`),t.forEach(n=>{let s=document.createElement("option");n!==!1?s.setAttribute("value",String(n)):s.setAttribute("selected","selected"),i.appendChild(s)}),r.appendChild(i)}jn.DEFAULTS={container:null,handlers:{clean(){let r=this.quill.getSelection();if(r!=null)if(r.length===0){let e=this.quill.getFormat();Object.keys(e).forEach(t=>{this.quill.scroll.query(t,q.INLINE)!=null&&this.quill.format(t,!1,C.sources.USER)})}else this.quill.removeFormat(r.index,r.length,C.sources.USER)},direction(r){let{align:e}=this.quill.getFormat();r==="rtl"&&e==null?this.quill.format("align","right",C.sources.USER):!r&&e==="right"&&this.quill.format("align",!1,C.sources.USER),this.quill.format("direction",r,C.sources.USER)},indent(r){let e=this.quill.getSelection(),t=this.quill.getFormat(e),i=parseInt(t.indent||0,10);if(r==="+1"||r==="-1"){let n=r==="+1"?1:-1;t.direction==="rtl"&&(n*=-1),this.quill.format("indent",i+n,C.sources.USER)}},link(r){r===!0&&(r=prompt("Enter link URL:")),this.quill.format("link",r,C.sources.USER)},list(r){let e=this.quill.getSelection(),t=this.quill.getFormat(e);r==="check"?t.list==="checked"||t.list==="unchecked"?this.quill.format("list",!1,C.sources.USER):this.quill.format("list","unchecked",C.sources.USER):this.quill.format("list",r,C.sources.USER)}}};var CT='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="3" x2="15" y1="9" y2="9"/><line class="ql-stroke" x1="3" x2="13" y1="14" y2="14"/><line class="ql-stroke" x1="3" x2="9" y1="4" y2="4"/></svg>',TT='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"/><line class="ql-stroke" x1="14" x2="4" y1="14" y2="14"/><line class="ql-stroke" x1="12" x2="6" y1="4" y2="4"/></svg>',LT='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"/><line class="ql-stroke" x1="15" x2="5" y1="14" y2="14"/><line class="ql-stroke" x1="15" x2="9" y1="4" y2="4"/></svg>',RT='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"/><line class="ql-stroke" x1="15" x2="3" y1="14" y2="14"/><line class="ql-stroke" x1="15" x2="3" y1="4" y2="4"/></svg>',NT='<svg viewbox="0 0 18 18"><g class="ql-fill ql-color-label"><polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"/><rect height="1" width="1" x="4" y="4"/><polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"/><rect height="1" width="1" x="2" y="6"/><rect height="1" width="1" x="3" y="5"/><rect height="1" width="1" x="4" y="7"/><polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"/><rect height="1" width="1" x="2" y="12"/><rect height="1" width="1" x="2" y="9"/><rect height="1" width="1" x="2" y="15"/><polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"/><rect height="1" width="1" x="3" y="8"/><path d="M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z"/><path d="M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z"/><path d="M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z"/><rect height="1" width="1" x="12" y="2"/><rect height="1" width="1" x="11" y="3"/><path d="M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z"/><rect height="1" width="1" x="2" y="3"/><rect height="1" width="1" x="6" y="2"/><rect height="1" width="1" x="3" y="2"/><rect height="1" width="1" x="5" y="3"/><rect height="1" width="1" x="9" y="2"/><rect height="1" width="1" x="15" y="14"/><polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"/><rect height="1" width="1" x="13" y="7"/><rect height="1" width="1" x="15" y="5"/><rect height="1" width="1" x="14" y="6"/><rect height="1" width="1" x="15" y="8"/><rect height="1" width="1" x="14" y="9"/><path d="M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z"/><rect height="1" width="1" x="14" y="3"/><polygon points="12 6.868 12 6 11.62 6 12 6.868"/><rect height="1" width="1" x="15" y="2"/><rect height="1" width="1" x="12" y="5"/><rect height="1" width="1" x="13" y="4"/><polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"/><rect height="1" width="1" x="9" y="14"/><rect height="1" width="1" x="8" y="15"/><path d="M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z"/><rect height="1" width="1" x="5" y="15"/><path d="M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z"/><rect height="1" width="1" x="11" y="15"/><path d="M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z"/><rect height="1" width="1" x="14" y="15"/><rect height="1" width="1" x="15" y="11"/></g><polyline class="ql-stroke" points="5.5 13 9 5 12.5 13"/><line class="ql-stroke" x1="11.63" x2="6.38" y1="11" y2="11"/></svg>',OT='<svg viewbox="0 0 18 18"><rect class="ql-fill ql-stroke" height="3" width="3" x="4" y="5"/><rect class="ql-fill ql-stroke" height="3" width="3" x="11" y="5"/><path class="ql-even ql-fill ql-stroke" d="M7,8c0,4.031-3,5-3,5"/><path class="ql-even ql-fill ql-stroke" d="M14,8c0,4.031-3,5-3,5"/></svg>',PT='<svg viewbox="0 0 18 18"><path class="ql-stroke" d="M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z"/><path class="ql-stroke" d="M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z"/></svg>',DT='<svg class="" viewbox="0 0 18 18"><line class="ql-stroke" x1="5" x2="13" y1="3" y2="3"/><line class="ql-stroke" x1="6" x2="9.35" y1="12" y2="3"/><line class="ql-stroke" x1="11" x2="15" y1="11" y2="15"/><line class="ql-stroke" x1="15" x2="11" y1="11" y2="15"/><rect class="ql-fill" height="1" rx="0.5" ry="0.5" width="7" x="2" y="14"/></svg>',Ov='<svg viewbox="0 0 18 18"><polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"/><polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"/><line class="ql-stroke" x1="10" x2="8" y1="5" y2="13"/></svg>',IT='<svg viewbox="0 0 18 18"><line class="ql-color-label ql-stroke ql-transparent" x1="3" x2="15" y1="15" y2="15"/><polyline class="ql-stroke" points="5.5 11 9 3 12.5 11"/><line class="ql-stroke" x1="11.63" x2="6.38" y1="9" y2="9"/></svg>',MT='<svg viewbox="0 0 18 18"><polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"/><line class="ql-stroke ql-fill" x1="15" x2="11" y1="4" y2="4"/><path class="ql-fill" d="M11,3a3,3,0,0,0,0,6h1V3H11Z"/><rect class="ql-fill" height="11" width="1" x="11" y="4"/><rect class="ql-fill" height="11" width="1" x="13" y="4"/></svg>',BT='<svg viewbox="0 0 18 18"><polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"/><line class="ql-stroke ql-fill" x1="9" x2="5" y1="4" y2="4"/><path class="ql-fill" d="M5,3A3,3,0,0,0,5,9H6V3H5Z"/><rect class="ql-fill" height="11" width="1" x="5" y="4"/><rect class="ql-fill" height="11" width="1" x="7" y="4"/></svg>',FT='<svg viewbox="0 0 18 18"><path class="ql-fill" d="M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z"/><rect class="ql-fill" height="1.6" rx="0.8" ry="0.8" width="5" x="5.15" y="6.2"/><path class="ql-fill" d="M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z"/></svg>',jT='<svg viewBox="0 0 18 18"><path class="ql-fill" d="M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z"/></svg>',qT='<svg viewBox="0 0 18 18"><path class="ql-fill" d="M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z"/></svg>',HT='<svg viewBox="0 0 18 18"><path class="ql-fill" d="M16.65186,12.30664a2.6742,2.6742,0,0,1-2.915,2.68457,3.96592,3.96592,0,0,1-2.25537-.6709.56007.56007,0,0,1-.13232-.83594L11.64648,13c.209-.34082.48389-.36328.82471-.1543a2.32654,2.32654,0,0,0,1.12256.33008c.71484,0,1.12207-.35156,1.12207-.78125,0-.61523-.61621-.86816-1.46338-.86816H13.2085a.65159.65159,0,0,1-.68213-.41895l-.05518-.10937a.67114.67114,0,0,1,.14307-.78125l.71533-.86914a8.55289,8.55289,0,0,1,.68213-.7373V8.58887a3.93913,3.93913,0,0,1-.748.05469H11.9873a.54085.54085,0,0,1-.605-.60547V7.59863a.54085.54085,0,0,1,.605-.60547h3.75146a.53773.53773,0,0,1,.60547.59375v.17676a1.03723,1.03723,0,0,1-.27539.748L14.74854,10.0293A2.31132,2.31132,0,0,1,16.65186,12.30664ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z"/></svg>',UT='<svg viewBox="0 0 18 18"><path class="ql-fill" d="M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm7.05371,7.96582v.38477c0,.39648-.165.60547-.46191.60547h-.47314v1.29785a.54085.54085,0,0,1-.605.60547h-.69336a.54085.54085,0,0,1-.605-.60547V12.95605H11.333a.5412.5412,0,0,1-.60547-.60547v-.15332a1.199,1.199,0,0,1,.22021-.748l2.56348-4.05957a.7819.7819,0,0,1,.72607-.39648h1.27637a.54085.54085,0,0,1,.605.60547v3.7627h.33008A.54055.54055,0,0,1,17.05371,11.96582ZM14.28125,8.7207h-.022a4.18969,4.18969,0,0,1-.38525.81348l-1.188,1.80469v.02246h1.5293V9.60059A7.04058,7.04058,0,0,1,14.28125,8.7207Z"/></svg>',zT='<svg viewBox="0 0 18 18"><path class="ql-fill" d="M16.74023,12.18555a2.75131,2.75131,0,0,1-2.91553,2.80566,3.908,3.908,0,0,1-2.25537-.68164.54809.54809,0,0,1-.13184-.8252L11.73438,13c.209-.34082.48389-.36328.8252-.1543a2.23757,2.23757,0,0,0,1.1001.33008,1.01827,1.01827,0,0,0,1.1001-.96777c0-.61621-.53906-.97949-1.25439-.97949a2.15554,2.15554,0,0,0-.64893.09961,1.15209,1.15209,0,0,1-.814.01074l-.12109-.04395a.64116.64116,0,0,1-.45117-.71484l.231-3.00391a.56666.56666,0,0,1,.62744-.583H15.541a.54085.54085,0,0,1,.605.60547v.43945a.54085.54085,0,0,1-.605.60547H13.41748l-.04395.72559a1.29306,1.29306,0,0,1-.04395.30859h.022a2.39776,2.39776,0,0,1,.57227-.07715A2.53266,2.53266,0,0,1,16.74023,12.18555ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z"/></svg>',$T='<svg viewBox="0 0 18 18"><path class="ql-fill" d="M14.51758,9.64453a1.85627,1.85627,0,0,0-1.24316.38477H13.252a1.73532,1.73532,0,0,1,1.72754-1.4082,2.66491,2.66491,0,0,1,.5498.06641c.35254.05469.57227.01074.70508-.40723l.16406-.5166a.53393.53393,0,0,0-.373-.75977,4.83723,4.83723,0,0,0-1.17773-.14258c-2.43164,0-3.7627,2.17773-3.7627,4.43359,0,2.47559,1.60645,3.69629,3.19043,3.69629A2.70585,2.70585,0,0,0,16.96,12.19727,2.43861,2.43861,0,0,0,14.51758,9.64453Zm-.23047,3.58691c-.67187,0-1.22168-.81445-1.22168-1.45215,0-.47363.30762-.583.72559-.583.96875,0,1.27734.59375,1.27734,1.12207A.82182.82182,0,0,1,14.28711,13.23145ZM10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Z"/></svg>',VT='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="7" x2="13" y1="4" y2="4"/><line class="ql-stroke" x1="5" x2="11" y1="14" y2="14"/><line class="ql-stroke" x1="8" x2="10" y1="14" y2="4"/></svg>',WT='<svg viewbox="0 0 18 18"><rect class="ql-stroke" height="10" width="12" x="3" y="4"/><circle class="ql-fill" cx="6" cy="7" r="1"/><polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"/></svg>',KT='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="3" x2="15" y1="14" y2="14"/><line class="ql-stroke" x1="3" x2="15" y1="4" y2="4"/><line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"/><polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"/></svg>',GT='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="3" x2="15" y1="14" y2="14"/><line class="ql-stroke" x1="3" x2="15" y1="4" y2="4"/><line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"/><polyline class="ql-stroke" points="5 7 5 11 3 9 5 7"/></svg>',JT='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="7" x2="11" y1="7" y2="11"/><path class="ql-even ql-stroke" d="M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z"/><path class="ql-even ql-stroke" d="M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z"/></svg>',XT='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="6" x2="15" y1="4" y2="4"/><line class="ql-stroke" x1="6" x2="15" y1="9" y2="9"/><line class="ql-stroke" x1="6" x2="15" y1="14" y2="14"/><line class="ql-stroke" x1="3" x2="3" y1="4" y2="4"/><line class="ql-stroke" x1="3" x2="3" y1="9" y2="9"/><line class="ql-stroke" x1="3" x2="3" y1="14" y2="14"/></svg>',YT='<svg class="" viewbox="0 0 18 18"><line class="ql-stroke" x1="9" x2="15" y1="4" y2="4"/><polyline class="ql-stroke" points="3 4 4 5 6 3"/><line class="ql-stroke" x1="9" x2="15" y1="14" y2="14"/><polyline class="ql-stroke" points="3 14 4 15 6 13"/><line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"/><polyline class="ql-stroke" points="3 9 4 10 6 8"/></svg>',ZT='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="7" x2="15" y1="4" y2="4"/><line class="ql-stroke" x1="7" x2="15" y1="9" y2="9"/><line class="ql-stroke" x1="7" x2="15" y1="14" y2="14"/><line class="ql-stroke ql-thin" x1="2.5" x2="4.5" y1="5.5" y2="5.5"/><path class="ql-fill" d="M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z"/><path class="ql-stroke ql-thin" d="M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156"/><path class="ql-stroke ql-thin" d="M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109"/></svg>',QT='<svg viewbox="0 0 18 18"><path class="ql-fill" d="M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z"/><path class="ql-fill" d="M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z"/></svg>',e8='<svg viewbox="0 0 18 18"><path class="ql-fill" d="M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z"/><path class="ql-fill" d="M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z"/></svg>',t8='<svg viewbox="0 0 18 18"><line class="ql-stroke ql-thin" x1="15.5" x2="2.5" y1="8.5" y2="9.5"/><path class="ql-fill" d="M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z"/><path class="ql-fill" d="M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z"/></svg>',r8='<svg viewbox="0 0 18 18"><rect class="ql-stroke" height="12" width="12" x="3" y="3"/><rect class="ql-fill" height="2" width="3" x="5" y="5"/><rect class="ql-fill" height="2" width="4" x="9" y="5"/><g class="ql-fill ql-transparent"><rect height="2" width="3" x="5" y="8"/><rect height="2" width="4" x="9" y="8"/><rect height="2" width="3" x="5" y="11"/><rect height="2" width="4" x="9" y="11"/></g></svg>',i8='<svg viewbox="0 0 18 18"><path class="ql-stroke" d="M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3"/><rect class="ql-fill" height="1" rx="0.5" ry="0.5" width="12" x="3" y="15"/></svg>',n8='<svg viewbox="0 0 18 18"><rect class="ql-stroke" height="12" width="12" x="3" y="3"/><rect class="ql-fill" height="12" width="1" x="5" y="3"/><rect class="ql-fill" height="12" width="1" x="12" y="3"/><rect class="ql-fill" height="2" width="8" x="5" y="8"/><rect class="ql-fill" height="1" width="3" x="3" y="5"/><rect class="ql-fill" height="1" width="3" x="3" y="7"/><rect class="ql-fill" height="1" width="3" x="3" y="10"/><rect class="ql-fill" height="1" width="3" x="3" y="12"/><rect class="ql-fill" height="1" width="3" x="12" y="5"/><rect class="ql-fill" height="1" width="3" x="12" y="7"/><rect class="ql-fill" height="1" width="3" x="12" y="10"/><rect class="ql-fill" height="1" width="3" x="12" y="12"/></svg>',Zr={align:{"":CT,center:TT,right:LT,justify:RT},background:NT,blockquote:OT,bold:PT,clean:DT,code:Ov,"code-block":Ov,color:IT,direction:{"":MT,rtl:BT},formula:FT,header:{1:jT,2:qT,3:HT,4:UT,5:zT,6:$T},italic:VT,image:WT,indent:{"+1":KT,"-1":GT},link:JT,list:{bullet:XT,check:YT,ordered:ZT},script:{sub:QT,super:e8},strike:t8,table:r8,underline:i8,video:n8};var s8='<svg viewbox="0 0 18 18"><polygon class="ql-stroke" points="7 11 9 13 11 11 7 11"/><polygon class="ql-stroke" points="7 7 9 5 11 7 7 7"/></svg>',Pv=0;function Dv(r,e){r.setAttribute(e,`${r.getAttribute(e)!=="true"}`)}var yd=class{constructor(e){this.select=e,this.container=document.createElement("span"),this.buildPicker(),this.select.style.display="none",this.select.parentNode.insertBefore(this.container,this.select),this.label.addEventListener("mousedown",()=>{this.togglePicker()}),this.label.addEventListener("keydown",t=>{switch(t.key){case"Enter":this.togglePicker();break;case"Escape":this.escape(),t.preventDefault();break;default:}}),this.select.addEventListener("change",this.update.bind(this))}togglePicker(){this.container.classList.toggle("ql-expanded"),Dv(this.label,"aria-expanded"),Dv(this.options,"aria-hidden")}buildItem(e){let t=document.createElement("span");t.tabIndex="0",t.setAttribute("role","button"),t.classList.add("ql-picker-item");let i=e.getAttribute("value");return i&&t.setAttribute("data-value",i),e.textContent&&t.setAttribute("data-label",e.textContent),t.addEventListener("click",()=>{this.selectItem(t,!0)}),t.addEventListener("keydown",n=>{switch(n.key){case"Enter":this.selectItem(t,!0),n.preventDefault();break;case"Escape":this.escape(),n.preventDefault();break;default:}}),t}buildLabel(){let e=document.createElement("span");return e.classList.add("ql-picker-label"),e.innerHTML=s8,e.tabIndex="0",e.setAttribute("role","button"),e.setAttribute("aria-expanded","false"),this.container.appendChild(e),e}buildOptions(){let e=document.createElement("span");e.classList.add("ql-picker-options"),e.setAttribute("aria-hidden","true"),e.tabIndex="-1",e.id=`ql-picker-options-${Pv}`,Pv+=1,this.label.setAttribute("aria-controls",e.id),this.options=e,Array.from(this.select.options).forEach(t=>{let i=this.buildItem(t);e.appendChild(i),t.selected===!0&&this.selectItem(i)}),this.container.appendChild(e)}buildPicker(){Array.from(this.select.attributes).forEach(e=>{this.container.setAttribute(e.name,e.value)}),this.container.classList.add("ql-picker"),this.label=this.buildLabel(),this.buildOptions()}escape(){this.close(),setTimeout(()=>this.label.focus(),1)}close(){this.container.classList.remove("ql-expanded"),this.label.setAttribute("aria-expanded","false"),this.options.setAttribute("aria-hidden","true")}selectItem(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,i=this.container.querySelector(".ql-selected");e!==i&&(i?.classList.remove("ql-selected"),e!=null&&(e.classList.add("ql-selected"),this.select.selectedIndex=Array.from(e.parentNode.children).indexOf(e),e.hasAttribute("data-value")?this.label.setAttribute("data-value",e.getAttribute("data-value")):this.label.removeAttribute("data-value"),e.hasAttribute("data-label")?this.label.setAttribute("data-label",e.getAttribute("data-label")):this.label.removeAttribute("data-label"),t&&(this.select.dispatchEvent(new Event("change")),this.close())))}update(){let e;if(this.select.selectedIndex>-1){let i=this.container.querySelector(".ql-picker-options").children[this.select.selectedIndex];e=this.select.options[this.select.selectedIndex],this.selectItem(i)}else this.selectItem(null);let t=e!=null&&e!==this.select.querySelector("option[selected]");this.label.classList.toggle("ql-active",t)}},Qr=yd;var wd=class extends Qr{constructor(e,t){super(e),this.label.innerHTML=t,this.container.classList.add("ql-color-picker"),Array.from(this.container.querySelectorAll(".ql-picker-item")).slice(0,7).forEach(i=>{i.classList.add("ql-primary")})}buildItem(e){let t=super.buildItem(e);return t.style.backgroundColor=e.getAttribute("value")||"",t}selectItem(e,t){super.selectItem(e,t);let i=this.label.querySelector(".ql-color-label"),n=e&&e.getAttribute("data-value")||"";i&&(i.tagName==="line"?i.style.stroke=n:i.style.fill=n)}},vl=wd;var Ad=class extends Qr{constructor(e,t){super(e),this.container.classList.add("ql-icon-picker"),Array.from(this.container.querySelectorAll(".ql-picker-item")).forEach(i=>{i.innerHTML=t[i.getAttribute("data-value")||""]}),this.defaultItem=this.container.querySelector(".ql-selected"),this.selectItem(this.defaultItem)}selectItem(e,t){super.selectItem(e,t);let i=e||this.defaultItem;if(i!=null){if(this.label.innerHTML===i.innerHTML)return;this.label.innerHTML=i.innerHTML}}},yl=Ad;var o8=r=>{let{overflowY:e}=getComputedStyle(r,null);return e!=="visible"&&e!=="clip"},Ed=class{constructor(e,t){this.quill=e,this.boundsContainer=t||document.body,this.root=e.addContainer("ql-tooltip"),this.root.innerHTML=this.constructor.TEMPLATE,o8(this.quill.root)&&this.quill.root.addEventListener("scroll",()=>{this.root.style.marginTop=`${-1*this.quill.root.scrollTop}px`}),this.hide()}hide(){this.root.classList.add("ql-hidden")}position(e){let t=e.left+e.width/2-this.root.offsetWidth/2,i=e.bottom+this.quill.root.scrollTop;this.root.style.left=`${t}px`,this.root.style.top=`${i}px`,this.root.classList.remove("ql-flip");let n=this.boundsContainer.getBoundingClientRect(),s=this.root.getBoundingClientRect(),o=0;if(s.right>n.right&&(o=n.right-s.right,this.root.style.left=`${t+o}px`),s.left<n.left&&(o=n.left-s.left,this.root.style.left=`${t+o}px`),s.bottom>n.bottom){let a=s.bottom-s.top,l=e.bottom-e.top+a;this.root.style.top=`${i-l}px`,this.root.classList.add("ql-flip")}return o}show(){this.root.classList.remove("ql-editing"),this.root.classList.remove("ql-hidden")}},wl=Ed;var a8=[!1,"center","right","justify"],l8=["#000000","#e60000","#ff9900","#ffff00","#008a00","#0066cc","#9933ff","#ffffff","#facccc","#ffebcc","#ffffcc","#cce8cc","#cce0f5","#ebd6ff","#bbbbbb","#f06666","#ffc266","#ffff66","#66b966","#66a3e0","#c285ff","#888888","#a10000","#b26b00","#b2b200","#006100","#0047b2","#6b24b2","#444444","#5c0000","#663d00","#666600","#003700","#002966","#3d1466"],u8=[!1,"serif","monospace"],c8=["1","2","3",!1],d8=["small",!1,"large","huge"],wr=class extends On{constructor(e,t){super(e,t);let i=n=>{if(!document.body.contains(e.root)){document.body.removeEventListener("click",i);return}this.tooltip!=null&&!this.tooltip.root.contains(n.target)&&document.activeElement!==this.tooltip.textbox&&!this.quill.hasFocus()&&this.tooltip.hide(),this.pickers!=null&&this.pickers.forEach(s=>{s.container.contains(n.target)||s.close()})};e.emitter.listenDOM("click",document.body,i)}addModule(e){let t=super.addModule(e);return e==="toolbar"&&this.extendToolbar(t),t}buildButtons(e,t){Array.from(e).forEach(i=>{(i.getAttribute("class")||"").split(/\s+/).forEach(s=>{if(s.startsWith("ql-")&&(s=s.slice(3),t[s]!=null))if(s==="direction")i.innerHTML=t[s][""]+t[s].rtl;else if(typeof t[s]=="string")i.innerHTML=t[s];else{let o=i.value||"";o!=null&&t[s][o]&&(i.innerHTML=t[s][o])}})})}buildPickers(e,t){this.pickers=Array.from(e).map(n=>{if(n.classList.contains("ql-align")&&(n.querySelector("option")==null&&co(n,a8),typeof t.align=="object"))return new yl(n,t.align);if(n.classList.contains("ql-background")||n.classList.contains("ql-color")){let s=n.classList.contains("ql-background")?"background":"color";return n.querySelector("option")==null&&co(n,l8,s==="background"?"#ffffff":"#000000"),new vl(n,t[s])}return n.querySelector("option")==null&&(n.classList.contains("ql-font")?co(n,u8):n.classList.contains("ql-header")?co(n,c8):n.classList.contains("ql-size")&&co(n,d8)),new Qr(n)});let i=()=>{this.pickers.forEach(n=>{n.update()})};this.quill.on(H.events.EDITOR_CHANGE,i)}};wr.DEFAULTS=nt({},On.DEFAULTS,{modules:{toolbar:{handlers:{formula(){this.quill.theme.tooltip.edit("formula")},image(){let r=this.container.querySelector("input.ql-image[type=file]");r==null&&(r=document.createElement("input"),r.setAttribute("type","file"),r.setAttribute("accept",this.quill.uploader.options.mimetypes.join(", ")),r.classList.add("ql-image"),r.addEventListener("change",()=>{let e=this.quill.getSelection(!0);this.quill.uploader.upload(e,r.files),r.value=""}),this.container.appendChild(r)),r.click()},video(){this.quill.theme.tooltip.edit("video")}}}}});var qn=class extends wl{constructor(e,t){super(e,t),this.textbox=this.root.querySelector('input[type="text"]'),this.listen()}listen(){this.textbox.addEventListener("keydown",e=>{e.key==="Enter"?(this.save(),e.preventDefault()):e.key==="Escape"&&(this.cancel(),e.preventDefault())})}cancel(){this.hide(),this.restoreFocus()}edit(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"link",t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null;if(this.root.classList.remove("ql-hidden"),this.root.classList.add("ql-editing"),this.textbox==null)return;t!=null?this.textbox.value=t:e!==this.root.getAttribute("data-mode")&&(this.textbox.value="");let i=this.quill.getBounds(this.quill.selection.savedRange);i!=null&&this.position(i),this.textbox.select(),this.textbox.setAttribute("placeholder",this.textbox.getAttribute(`data-${e}`)||""),this.root.setAttribute("data-mode",e)}restoreFocus(){this.quill.focus({preventScroll:!0})}save(){let{value:e}=this.textbox;switch(this.root.getAttribute("data-mode")){case"link":{let{scrollTop:t}=this.quill.root;this.linkRange?(this.quill.formatText(this.linkRange,"link",e,H.sources.USER),delete this.linkRange):(this.restoreFocus(),this.quill.format("link",e,H.sources.USER)),this.quill.root.scrollTop=t;break}case"video":e=h8(e);case"formula":{if(!e)break;let t=this.quill.getSelection(!0);if(t!=null){let i=t.index+t.length;this.quill.insertEmbed(i,this.root.getAttribute("data-mode"),e,H.sources.USER),this.root.getAttribute("data-mode")==="formula"&&this.quill.insertText(i+1," ",H.sources.USER),this.quill.setSelection(i+2,H.sources.USER)}break}default:}this.textbox.value="",this.hide()}};function h8(r){let e=r.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/)||r.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);return e?`${e[1]||"https"}://www.youtube.com/embed/${e[2]}?showinfo=0`:(e=r.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/))?`${e[1]||"https"}://player.vimeo.com/video/${e[2]}/`:r}function co(r,e){let t=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1;e.forEach(i=>{let n=document.createElement("option");i===t?n.setAttribute("selected","selected"):n.setAttribute("value",String(i)),r.appendChild(n)})}var f8=[["bold","italic","link"],[{header:1},{header:2},"blockquote"]],Al=class extends qn{constructor(e,t){super(e,t),this.quill.on(H.events.EDITOR_CHANGE,(i,n,s,o)=>{if(i===H.events.SELECTION_CHANGE)if(n!=null&&n.length>0&&o===H.sources.USER){this.show(),this.root.style.left="0px",this.root.style.width="",this.root.style.width=`${this.root.offsetWidth}px`;let a=this.quill.getLines(n.index,n.length);if(a.length===1){let l=this.quill.getBounds(n);l!=null&&this.position(l)}else{let l=a[a.length-1],c=this.quill.getIndex(l),f=Math.min(l.length()-1,n.index+n.length-c),m=this.quill.getBounds(new Ge(c,f));m!=null&&this.position(m)}}else document.activeElement!==this.textbox&&this.quill.hasFocus()&&this.hide()})}listen(){super.listen(),this.root.querySelector(".ql-close").addEventListener("click",()=>{this.root.classList.remove("ql-editing")}),this.quill.on(H.events.SCROLL_OPTIMIZE,()=>{setTimeout(()=>{if(this.root.classList.contains("ql-hidden"))return;let e=this.quill.getSelection();if(e!=null){let t=this.quill.getBounds(e);t!=null&&this.position(t)}},1)})}cancel(){this.show()}position(e){let t=super.position(e),i=this.root.querySelector(".ql-tooltip-arrow");return i.style.marginLeft="",t!==0&&(i.style.marginLeft=`${-1*t-i.offsetWidth/2}px`),t}};B(Al,"TEMPLATE",['<span class="ql-tooltip-arrow"></span>','<div class="ql-tooltip-editor">','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-close"></a>',"</div>"].join(""));var ho=class extends wr{constructor(e,t){t.modules.toolbar!=null&&t.modules.toolbar.container==null&&(t.modules.toolbar.container=f8),super(e,t),this.quill.container.classList.add("ql-bubble")}extendToolbar(e){this.tooltip=new Al(this.quill,this.options.bounds),e.container!=null&&(this.tooltip.root.appendChild(e.container),this.buildButtons(e.container.querySelectorAll("button"),Zr),this.buildPickers(e.container.querySelectorAll("select"),Zr))}};ho.DEFAULTS=nt({},wr.DEFAULTS,{modules:{toolbar:{handlers:{link(r){r?this.quill.theme.tooltip.edit():this.quill.format("link",!1,C.sources.USER)}}}}});var p8=[[{header:["1","2","3",!1]}],["bold","italic","underline","link"],[{list:"ordered"},{list:"bullet"}],["clean"]],El=class extends qn{constructor(){super(...arguments);B(this,"preview",this.root.querySelector("a.ql-preview"))}listen(){super.listen(),this.root.querySelector("a.ql-action").addEventListener("click",t=>{this.root.classList.contains("ql-editing")?this.save():this.edit("link",this.preview.textContent),t.preventDefault()}),this.root.querySelector("a.ql-remove").addEventListener("click",t=>{if(this.linkRange!=null){let i=this.linkRange;this.restoreFocus(),this.quill.formatText(i,"link",!1,H.sources.USER),delete this.linkRange}t.preventDefault(),this.hide()}),this.quill.on(H.events.SELECTION_CHANGE,(t,i,n)=>{if(t!=null){if(t.length===0&&n===H.sources.USER){let[s,o]=this.quill.scroll.descendant(wt,t.index);if(s!=null){this.linkRange=new Ge(t.index-o,s.length());let a=wt.formats(s.domNode);this.preview.textContent=a,this.preview.setAttribute("href",a),this.show();let l=this.quill.getBounds(this.linkRange);l!=null&&this.position(l);return}}else delete this.linkRange;this.hide()}})}show(){super.show(),this.root.removeAttribute("data-mode")}};B(El,"TEMPLATE",['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-action"></a>','<a class="ql-remove"></a>'].join(""));var xl=class extends wr{constructor(e,t){t.modules.toolbar!=null&&t.modules.toolbar.container==null&&(t.modules.toolbar.container=p8),super(e,t),this.quill.container.classList.add("ql-snow")}extendToolbar(e){e.container!=null&&(e.container.classList.add("ql-snow"),this.buildButtons(e.container.querySelectorAll("button"),Zr),this.buildPickers(e.container.querySelectorAll("select"),Zr),this.tooltip=new El(this.quill,this.options.bounds),e.container.querySelector(".ql-link")&&this.quill.keyboard.addBinding({key:"k",shortKey:!0},(t,i)=>{e.handlers.link.call(e,!i.format.link)}))}};xl.DEFAULTS=nt({},wr.DEFAULTS,{modules:{toolbar:{handlers:{link(r){if(r){let e=this.quill.getSelection();if(e==null||e.length===0)return;let t=this.quill.getText(e);/^\S+@\S+\.\S+$/.test(t)&&t.indexOf("mailto:")!==0&&(t=`mailto:${t}`);let{tooltip:i}=this.quill.theme;i.edit("link",t)}else this.quill.format("link",!1,C.sources.USER)}}}}});var Iv=xl;pd.register({"attributors/attribute/direction":al,"attributors/class/align":td,"attributors/class/background":ev,"attributors/class/color":Qb,"attributors/class/direction":id,"attributors/class/font":sd,"attributors/class/size":od,"attributors/style/align":ol,"attributors/style/background":Js,"attributors/style/color":Gs,"attributors/style/direction":ll,"attributors/style/font":ul,"attributors/style/size":cl},!0);pd.register({"formats/align":td,"formats/direction":id,"formats/indent":mv,"formats/background":Js,"formats/color":Gs,"formats/font":sd,"formats/size":od,"formats/blockquote":gv,"formats/code-block":we,"formats/header":bv,"formats/list":Yr,"formats/bold":Mn,"formats/code":In,"formats/italic":vv,"formats/link":wt,"formats/script":yv,"formats/strike":wv,"formats/underline":Av,"formats/formula":Ev,"formats/image":_v,"formats/video":Sv,"modules/syntax":uo,"modules/table":Tv,"modules/toolbar":jn,"themes/bubble":ho,"themes/snow":Iv,"ui/icons":Zr,"ui/picker":Qr,"ui/icon-picker":yl,"ui/color-picker":vl,"ui/tooltip":wl},!0);var U0=Ue(Bv());function m8(r){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var i in t)t.hasOwnProperty(i)&&(r[i]=t[i])}return r}function Sd(r,e){return Array(e+1).join(r)}function g8(r){return r.replace(/^\n*/,"")}function b8(r){for(var e=r.length;e>0&&r[e-1]===`
`;)e--;return r.substring(0,e)}var v8=["ADDRESS","ARTICLE","ASIDE","AUDIO","BLOCKQUOTE","BODY","CANVAS","CENTER","DD","DIR","DIV","DL","DT","FIELDSET","FIGCAPTION","FIGURE","FOOTER","FORM","FRAMESET","H1","H2","H3","H4","H5","H6","HEADER","HGROUP","HR","HTML","ISINDEX","LI","MAIN","MENU","NAV","NOFRAMES","NOSCRIPT","OL","OUTPUT","P","PRE","SECTION","TABLE","TBODY","TD","TFOOT","TH","THEAD","TR","UL"];function Cd(r){return Td(r,v8)}var qv=["AREA","BASE","BR","COL","COMMAND","EMBED","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR"];function Hv(r){return Td(r,qv)}function y8(r){return zv(r,qv)}var Uv=["A","TABLE","THEAD","TBODY","TFOOT","TH","TD","IFRAME","SCRIPT","AUDIO","VIDEO"];function w8(r){return Td(r,Uv)}function A8(r){return zv(r,Uv)}function Td(r,e){return e.indexOf(r.nodeName)>=0}function zv(r,e){return r.getElementsByTagName&&e.some(function(t){return r.getElementsByTagName(t).length})}var qe={};qe.paragraph={filter:"p",replacement:function(r){return`

`+r+`

`}};qe.lineBreak={filter:"br",replacement:function(r,e,t){return t.br+`
`}};qe.heading={filter:["h1","h2","h3","h4","h5","h6"],replacement:function(r,e,t){var i=Number(e.nodeName.charAt(1));if(t.headingStyle==="setext"&&i<3){var n=Sd(i===1?"=":"-",r.length);return`

`+r+`
`+n+`

`}else return`

`+Sd("#",i)+" "+r+`

`}};qe.blockquote={filter:"blockquote",replacement:function(r){return r=r.replace(/^\n+|\n+$/g,""),r=r.replace(/^/gm,"> "),`

`+r+`

`}};qe.list={filter:["ul","ol"],replacement:function(r,e){var t=e.parentNode;return t.nodeName==="LI"&&t.lastElementChild===e?`
`+r:`

`+r+`

`}};qe.listItem={filter:"li",replacement:function(r,e,t){r=r.replace(/^\n+/,"").replace(/\n+$/,`
`).replace(/\n/gm,`
    `);var i=t.bulletListMarker+"   ",n=e.parentNode;if(n.nodeName==="OL"){var s=n.getAttribute("start"),o=Array.prototype.indexOf.call(n.children,e);i=(s?Number(s)+o:o+1)+".  "}return i+r+(e.nextSibling&&!/\n$/.test(r)?`
`:"")}};qe.indentedCodeBlock={filter:function(r,e){return e.codeBlockStyle==="indented"&&r.nodeName==="PRE"&&r.firstChild&&r.firstChild.nodeName==="CODE"},replacement:function(r,e,t){return`

    `+e.firstChild.textContent.replace(/\n/g,`
    `)+`

`}};qe.fencedCodeBlock={filter:function(r,e){return e.codeBlockStyle==="fenced"&&r.nodeName==="PRE"&&r.firstChild&&r.firstChild.nodeName==="CODE"},replacement:function(r,e,t){for(var i=e.firstChild.getAttribute("class")||"",n=(i.match(/language-(\S+)/)||[null,""])[1],s=e.firstChild.textContent,o=t.fence.charAt(0),a=3,l=new RegExp("^"+o+"{3,}","gm"),c;c=l.exec(s);)c[0].length>=a&&(a=c[0].length+1);var f=Sd(o,a);return`

`+f+n+`
`+s.replace(/\n$/,"")+`
`+f+`

`}};qe.horizontalRule={filter:"hr",replacement:function(r,e,t){return`

`+t.hr+`

`}};qe.inlineLink={filter:function(r,e){return e.linkStyle==="inlined"&&r.nodeName==="A"&&r.getAttribute("href")},replacement:function(r,e){var t=e.getAttribute("href");t&&(t=t.replace(/([()])/g,"\\$1"));var i=kl(e.getAttribute("title"));return i&&(i=' "'+i.replace(/"/g,'\\"')+'"'),"["+r+"]("+t+i+")"}};qe.referenceLink={filter:function(r,e){return e.linkStyle==="referenced"&&r.nodeName==="A"&&r.getAttribute("href")},replacement:function(r,e,t){var i=e.getAttribute("href"),n=kl(e.getAttribute("title"));n&&(n=' "'+n+'"');var s,o;switch(t.linkReferenceStyle){case"collapsed":s="["+r+"][]",o="["+r+"]: "+i+n;break;case"shortcut":s="["+r+"]",o="["+r+"]: "+i+n;break;default:var a=this.references.length+1;s="["+r+"]["+a+"]",o="["+a+"]: "+i+n}return this.references.push(o),s},references:[],append:function(r){var e="";return this.references.length&&(e=`

`+this.references.join(`
`)+`

`,this.references=[]),e}};qe.emphasis={filter:["em","i"],replacement:function(r,e,t){return r.trim()?t.emDelimiter+r+t.emDelimiter:""}};qe.strong={filter:["strong","b"],replacement:function(r,e,t){return r.trim()?t.strongDelimiter+r+t.strongDelimiter:""}};qe.code={filter:function(r){var e=r.previousSibling||r.nextSibling,t=r.parentNode.nodeName==="PRE"&&!e;return r.nodeName==="CODE"&&!t},replacement:function(r){if(!r)return"";r=r.replace(/\r?\n|\r/g," ");for(var e=/^`|^ .*?[^ ].* $|`$/.test(r)?" ":"",t="`",i=r.match(/`+/gm)||[];i.indexOf(t)!==-1;)t=t+"`";return t+e+r+e+t}};qe.image={filter:"img",replacement:function(r,e){var t=kl(e.getAttribute("alt")),i=e.getAttribute("src")||"",n=kl(e.getAttribute("title")),s=n?' "'+n+'"':"";return i?"!["+t+"]("+i+s+")":""}};function kl(r){return r?r.replace(/(\n+\s*)+/g,`
`):""}function $v(r){this.options=r,this._keep=[],this._remove=[],this.blankRule={replacement:r.blankReplacement},this.keepReplacement=r.keepReplacement,this.defaultRule={replacement:r.defaultReplacement},this.array=[];for(var e in r.rules)this.array.push(r.rules[e])}$v.prototype={add:function(r,e){this.array.unshift(e)},keep:function(r){this._keep.unshift({filter:r,replacement:this.keepReplacement})},remove:function(r){this._remove.unshift({filter:r,replacement:function(){return""}})},forNode:function(r){if(r.isBlank)return this.blankRule;var e;return(e=xd(this.array,r,this.options))||(e=xd(this._keep,r,this.options))||(e=xd(this._remove,r,this.options))?e:this.defaultRule},forEach:function(r){for(var e=0;e<this.array.length;e++)r(this.array[e],e)}};function xd(r,e,t){for(var i=0;i<r.length;i++){var n=r[i];if(E8(n,e,t))return n}}function E8(r,e,t){var i=r.filter;if(typeof i=="string"){if(i===e.nodeName.toLowerCase())return!0}else if(Array.isArray(i)){if(i.indexOf(e.nodeName.toLowerCase())>-1)return!0}else if(typeof i=="function"){if(i.call(r,e,t))return!0}else throw new TypeError("`filter` needs to be a string, array, or function")}function x8(r){var e=r.element,t=r.isBlock,i=r.isVoid,n=r.isPre||function(m){return m.nodeName==="PRE"};if(!(!e.firstChild||n(e))){for(var s=null,o=!1,a=null,l=Fv(a,e,n);l!==e;){if(l.nodeType===3||l.nodeType===4){var c=l.data.replace(/[ \r\n\t]+/g," ");if((!s||/ $/.test(s.data))&&!o&&c[0]===" "&&(c=c.substr(1)),!c){l=_d(l);continue}l.data=c,s=l}else if(l.nodeType===1)t(l)||l.nodeName==="BR"?(s&&(s.data=s.data.replace(/ $/,"")),s=null,o=!1):i(l)||n(l)?(s=null,o=!0):s&&(o=!1);else{l=_d(l);continue}var f=Fv(a,l,n);a=l,l=f}s&&(s.data=s.data.replace(/ $/,""),s.data||_d(s))}}function _d(r){var e=r.nextSibling||r.parentNode;return r.parentNode.removeChild(r),e}function Fv(r,e,t){return r&&r.parentNode===e||t(e)?e.nextSibling||e.parentNode:e.firstChild||e.nextSibling||e.parentNode}var Ld=typeof window<"u"?window:{};function _8(){var r=Ld.DOMParser,e=!1;try{new r().parseFromString("","text/html")&&(e=!0)}catch{}return e}function k8(){var r=function(){};return S8()?r.prototype.parseFromString=function(e){var t=new window.ActiveXObject("htmlfile");return t.designMode="on",t.open(),t.write(e),t.close(),t}:r.prototype.parseFromString=function(e){var t=document.implementation.createHTMLDocument("");return t.open(),t.write(e),t.close(),t},r}function S8(){var r=!1;try{document.implementation.createHTMLDocument("").open()}catch{Ld.ActiveXObject&&(r=!0)}return r}var C8=_8()?Ld.DOMParser:k8();function T8(r,e){var t;if(typeof r=="string"){var i=L8().parseFromString('<x-turndown id="turndown-root">'+r+"</x-turndown>","text/html");t=i.getElementById("turndown-root")}else t=r.cloneNode(!0);return x8({element:t,isBlock:Cd,isVoid:Hv,isPre:e.preformattedCode?R8:null}),t}var kd;function L8(){return kd=kd||new C8,kd}function R8(r){return r.nodeName==="PRE"||r.nodeName==="CODE"}function N8(r,e){return r.isBlock=Cd(r),r.isCode=r.nodeName==="CODE"||r.parentNode.isCode,r.isBlank=O8(r),r.flankingWhitespace=P8(r,e),r}function O8(r){return!Hv(r)&&!w8(r)&&/^\s*$/i.test(r.textContent)&&!y8(r)&&!A8(r)}function P8(r,e){if(r.isBlock||e.preformattedCode&&r.isCode)return{leading:"",trailing:""};var t=D8(r.textContent);return t.leadingAscii&&jv("left",r,e)&&(t.leading=t.leadingNonAscii),t.trailingAscii&&jv("right",r,e)&&(t.trailing=t.trailingNonAscii),{leading:t.leading,trailing:t.trailing}}function D8(r){var e=r.match(/^(([ \t\r\n]*)(\s*))(?:(?=\S)[\s\S]*\S)?((\s*?)([ \t\r\n]*))$/);return{leading:e[1],leadingAscii:e[2],leadingNonAscii:e[3],trailing:e[4],trailingNonAscii:e[5],trailingAscii:e[6]}}function jv(r,e,t){var i,n,s;return r==="left"?(i=e.previousSibling,n=/ $/):(i=e.nextSibling,n=/^ /),i&&(i.nodeType===3?s=n.test(i.nodeValue):t.preformattedCode&&i.nodeName==="CODE"?s=!1:i.nodeType===1&&!Cd(i)&&(s=n.test(i.textContent))),s}var I8=Array.prototype.reduce,M8=[[/\\/g,"\\\\"],[/\*/g,"\\*"],[/^-/g,"\\-"],[/^\+ /g,"\\+ "],[/^(=+)/g,"\\$1"],[/^(#{1,6}) /g,"\\$1 "],[/`/g,"\\`"],[/^~~~/g,"\\~~~"],[/\[/g,"\\["],[/\]/g,"\\]"],[/^>/g,"\\>"],[/_/g,"\\_"],[/^(\d+)\. /g,"$1\\. "]];function Sl(r){if(!(this instanceof Sl))return new Sl(r);var e={rules:qe,headingStyle:"setext",hr:"* * *",bulletListMarker:"*",codeBlockStyle:"indented",fence:"```",emDelimiter:"_",strongDelimiter:"**",linkStyle:"inlined",linkReferenceStyle:"full",br:"  ",preformattedCode:!1,blankReplacement:function(t,i){return i.isBlock?`

`:""},keepReplacement:function(t,i){return i.isBlock?`

`+i.outerHTML+`

`:i.outerHTML},defaultReplacement:function(t,i){return i.isBlock?`

`+t+`

`:t}};this.options=m8({},e,r),this.rules=new $v(this.options)}Sl.prototype={turndown:function(r){if(!j8(r))throw new TypeError(r+" is not a string, or an element/document/fragment node.");if(r==="")return"";var e=Vv.call(this,new T8(r,this.options));return B8.call(this,e)},use:function(r){if(Array.isArray(r))for(var e=0;e<r.length;e++)this.use(r[e]);else if(typeof r=="function")r(this);else throw new TypeError("plugin must be a Function or an Array of Functions");return this},addRule:function(r,e){return this.rules.add(r,e),this},keep:function(r){return this.rules.keep(r),this},remove:function(r){return this.rules.remove(r),this},escape:function(r){return M8.reduce(function(e,t){return e.replace(t[0],t[1])},r)}};function Vv(r){var e=this;return I8.call(r.childNodes,function(t,i){i=new N8(i,e.options);var n="";return i.nodeType===3?n=i.isCode?i.nodeValue:e.escape(i.nodeValue):i.nodeType===1&&(n=F8.call(e,i)),Wv(t,n)},"")}function B8(r){var e=this;return this.rules.forEach(function(t){typeof t.append=="function"&&(r=Wv(r,t.append(e.options)))}),r.replace(/^[\t\r\n]+/,"").replace(/[\t\r\n\s]+$/,"")}function F8(r){var e=this.rules.forNode(r),t=Vv.call(this,r),i=r.flankingWhitespace;return(i.leading||i.trailing)&&(t=t.trim()),i.leading+e.replacement(t,r,this.options)+i.trailing}function Wv(r,e){var t=b8(r),i=g8(e),n=Math.max(r.length-t.length,e.length-i.length),s=`

`.substring(0,n);return t+s+i}function j8(r){return r!=null&&(typeof r=="string"||r.nodeType&&(r.nodeType===1||r.nodeType===9||r.nodeType===11))}var Kv=Sl;var q8="2.1.8",Ii="[data-trix-attachment]",fh={preview:{presentation:"gallery",caption:{name:!0,size:!0}},file:{caption:{size:!0}}},Xe={default:{tagName:"div",parse:!1},quote:{tagName:"blockquote",nestable:!0},heading1:{tagName:"h1",terminal:!0,breakOnReturn:!0,group:!1},code:{tagName:"pre",terminal:!0,htmlAttributes:["language"],text:{plaintext:!0}},bulletList:{tagName:"ul",parse:!1},bullet:{tagName:"li",listAttribute:"bulletList",group:!1,nestable:!0,test(r){return Gv(r.parentNode)===Xe[this.listAttribute].tagName}},numberList:{tagName:"ol",parse:!1},number:{tagName:"li",listAttribute:"numberList",group:!1,nestable:!0,test(r){return Gv(r.parentNode)===Xe[this.listAttribute].tagName}},attachmentGallery:{tagName:"div",exclusive:!0,terminal:!0,parse:!1,group:!1}},Gv=r=>{var e;return r==null||(e=r.tagName)===null||e===void 0?void 0:e.toLowerCase()},Jv=navigator.userAgent.match(/android\s([0-9]+.*Chrome)/i),Rd=Jv&&parseInt(Jv[1]),Co={composesExistingText:/Android.*Chrome/.test(navigator.userAgent),recentAndroid:Rd&&Rd>12,samsungAndroid:Rd&&navigator.userAgent.match(/Android.*SM-/),forcesObjectResizing:/Trident.*rv:11/.test(navigator.userAgent),supportsInputEvents:typeof InputEvent<"u"&&["data","getTargetRanges","inputType"].every(r=>r in InputEvent.prototype)},K={attachFiles:"Attach Files",bold:"Bold",bullets:"Bullets",byte:"Byte",bytes:"Bytes",captionPlaceholder:"Add a caption\u2026",code:"Code",heading1:"Heading",indent:"Increase Level",italic:"Italic",link:"Link",numbers:"Numbers",outdent:"Decrease Level",quote:"Quote",redo:"Redo",remove:"Remove",strike:"Strikethrough",undo:"Undo",unlink:"Unlink",url:"URL",urlPlaceholder:"Enter a URL\u2026",GB:"GB",KB:"KB",MB:"MB",PB:"PB",TB:"TB"},H8=[K.bytes,K.KB,K.MB,K.GB,K.TB,K.PB],A0={prefix:"IEC",precision:2,formatter(r){switch(r){case 0:return"0 ".concat(K.bytes);case 1:return"1 ".concat(K.byte);default:let e;this.prefix==="SI"?e=1e3:this.prefix==="IEC"&&(e=1024);let t=Math.floor(Math.log(r)/Math.log(e)),i=(r/Math.pow(e,t)).toFixed(this.precision).replace(/0*$/,"").replace(/\.$/,"");return"".concat(i," ").concat(H8[t])}}},eu="\uFEFF",ti="\xA0",E0=function(r){for(let e in r){let t=r[e];this[e]=t}return this},ph=document.documentElement,U8=ph.matches,pe=function(r){let{onElement:e,matchingSelector:t,withCallback:i,inPhase:n,preventDefault:s,times:o}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},a=e||ph,l=t,c=n==="capturing",f=function(m){o!=null&&--o==0&&f.destroy();let y=ri(m.target,{matchingSelector:l});y!=null&&(i?.call(y,m,y),s&&m.preventDefault())};return f.destroy=()=>a.removeEventListener(r,f,c),a.addEventListener(r,f,c),f},bo=function(r){let{onElement:e,bubbles:t,cancelable:i,attributes:n}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},s=e??ph;t=t!==!1,i=i!==!1;let o=document.createEvent("Events");return o.initEvent(r,t,i),n!=null&&E0.call(o,n),s.dispatchEvent(o)},x0=function(r,e){if(r?.nodeType===1)return U8.call(r,e)},ri=function(r){let{matchingSelector:e,untilNode:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};for(;r&&r.nodeType!==Node.ELEMENT_NODE;)r=r.parentNode;if(r!=null){if(e==null)return r;if(r.closest&&t==null)return r.closest(e);for(;r&&r!==t;){if(x0(r,e))return r;r=r.parentNode}}},mh=r=>document.activeElement!==r&&Di(r,document.activeElement),Di=function(r,e){if(r&&e)for(;e;){if(e===r)return!0;e=e.parentNode}},Nd=function(r){var e;if((e=r)===null||e===void 0||!e.parentNode)return;let t=0;for(r=r.previousSibling;r;)t++,r=r.previousSibling;return t},ii=r=>{var e;return r==null||(e=r.parentNode)===null||e===void 0?void 0:e.removeChild(r)},Pl=function(r){let{onlyNodesOfType:e,usingFilter:t,expandEntityReferences:i}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=(()=>{switch(e){case"element":return NodeFilter.SHOW_ELEMENT;case"text":return NodeFilter.SHOW_TEXT;case"comment":return NodeFilter.SHOW_COMMENT;default:return NodeFilter.SHOW_ALL}})();return document.createTreeWalker(r,n,t??null,i===!0)},Je=r=>{var e;return r==null||(e=r.tagName)===null||e===void 0?void 0:e.toLowerCase()},G=function(r){let e,t,i=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};typeof r=="object"?(i=r,r=i.tagName):i={attributes:i};let n=document.createElement(r);if(i.editable!=null&&(i.attributes==null&&(i.attributes={}),i.attributes.contenteditable=i.editable),i.attributes)for(e in i.attributes)t=i.attributes[e],n.setAttribute(e,t);if(i.style)for(e in i.style)t=i.style[e],n.style[e]=t;if(i.data)for(e in i.data)t=i.data[e],n.dataset[e]=t;return i.className&&i.className.split(" ").forEach(s=>{n.classList.add(s)}),i.textContent&&(n.textContent=i.textContent),i.childNodes&&[].concat(i.childNodes).forEach(s=>{n.appendChild(s)}),n},fo,vo=function(){if(fo!=null)return fo;fo=[];for(let r in Xe){let e=Xe[r];e.tagName&&fo.push(e.tagName)}return fo},Od=r=>Un(r?.firstChild),Xv=function(r){let{strict:e}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{strict:!0};return e?Un(r):Un(r)||!Un(r.firstChild)&&function(t){return vo().includes(Je(t))&&!vo().includes(Je(t.firstChild))}(r)},Un=r=>z8(r)&&r?.data==="block",z8=r=>r?.nodeType===Node.COMMENT_NODE,zn=function(r){let{name:e}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(r)return yo(r)?r.data===eu?!e||r.parentNode.dataset.trixCursorTarget===e:void 0:zn(r.firstChild)},Mi=r=>x0(r,Ii),_0=r=>yo(r)&&r?.data==="",yo=r=>r?.nodeType===Node.TEXT_NODE,gh={level2Enabled:!0,getLevel(){return this.level2Enabled&&Co.supportsInputEvents?2:0},pickFiles(r){let e=G("input",{type:"file",multiple:!0,hidden:!0,id:this.fileInputId});e.addEventListener("change",()=>{r(e.files),ii(e)}),ii(document.getElementById(this.fileInputId)),document.body.appendChild(e),e.click()}},Nl={removeBlankTableCells:!1,tableCellSeparator:" | ",tableRowSeparator:`
`},ji={bold:{tagName:"strong",inheritable:!0,parser(r){let e=window.getComputedStyle(r);return e.fontWeight==="bold"||e.fontWeight>=600}},italic:{tagName:"em",inheritable:!0,parser:r=>window.getComputedStyle(r).fontStyle==="italic"},href:{groupTagName:"a",parser(r){let e="a:not(".concat(Ii,")"),t=r.closest(e);if(t)return t.getAttribute("href")}},strike:{tagName:"del",inheritable:!0},frozen:{style:{backgroundColor:"highlight"}}},k0={getDefaultHTML:()=>`<div class="trix-button-row">
      <span class="trix-button-group trix-button-group--text-tools" data-trix-button-group="text-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-bold" data-trix-attribute="bold" data-trix-key="b" title="`.concat(K.bold,'" tabindex="-1">').concat(K.bold,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-italic" data-trix-attribute="italic" data-trix-key="i" title="`).concat(K.italic,'" tabindex="-1">').concat(K.italic,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-strike" data-trix-attribute="strike" title="`).concat(K.strike,'" tabindex="-1">').concat(K.strike,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-link" data-trix-attribute="href" data-trix-action="link" data-trix-key="k" title="`).concat(K.link,'" tabindex="-1">').concat(K.link,`</button>
      </span>

      <span class="trix-button-group trix-button-group--block-tools" data-trix-button-group="block-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-heading-1" data-trix-attribute="heading1" title="`).concat(K.heading1,'" tabindex="-1">').concat(K.heading1,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-quote" data-trix-attribute="quote" title="`).concat(K.quote,'" tabindex="-1">').concat(K.quote,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-code" data-trix-attribute="code" title="`).concat(K.code,'" tabindex="-1">').concat(K.code,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-bullet-list" data-trix-attribute="bullet" title="`).concat(K.bullets,'" tabindex="-1">').concat(K.bullets,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-number-list" data-trix-attribute="number" title="`).concat(K.numbers,'" tabindex="-1">').concat(K.numbers,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-decrease-nesting-level" data-trix-action="decreaseNestingLevel" title="`).concat(K.outdent,'" tabindex="-1">').concat(K.outdent,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-increase-nesting-level" data-trix-action="increaseNestingLevel" title="`).concat(K.indent,'" tabindex="-1">').concat(K.indent,`</button>
      </span>

      <span class="trix-button-group trix-button-group--file-tools" data-trix-button-group="file-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-attach" data-trix-action="attachFiles" title="`).concat(K.attachFiles,'" tabindex="-1">').concat(K.attachFiles,`</button>
      </span>

      <span class="trix-button-group-spacer"></span>

      <span class="trix-button-group trix-button-group--history-tools" data-trix-button-group="history-tools">
        <button type="button" class="trix-button trix-button--icon trix-button--icon-undo" data-trix-action="undo" data-trix-key="z" title="`).concat(K.undo,'" tabindex="-1">').concat(K.undo,`</button>
        <button type="button" class="trix-button trix-button--icon trix-button--icon-redo" data-trix-action="redo" data-trix-key="shift+z" title="`).concat(K.redo,'" tabindex="-1">').concat(K.redo,`</button>
      </span>
    </div>

    <div class="trix-dialogs" data-trix-dialogs>
      <div class="trix-dialog trix-dialog--link" data-trix-dialog="href" data-trix-dialog-attribute="href">
        <div class="trix-dialog__link-fields">
          <input type="url" name="href" class="trix-input trix-input--dialog" placeholder="`).concat(K.urlPlaceholder,'" aria-label="').concat(K.url,`" required data-trix-input>
          <div class="trix-button-group">
            <input type="button" class="trix-button trix-button--dialog" value="`).concat(K.link,`" data-trix-method="setAttribute">
            <input type="button" class="trix-button trix-button--dialog" value="`).concat(K.unlink,`" data-trix-method="removeAttribute">
          </div>
        </div>
      </div>
    </div>`)},Yd={interval:5e3},To=Object.freeze({__proto__:null,attachments:fh,blockAttributes:Xe,browser:Co,css:{attachment:"attachment",attachmentCaption:"attachment__caption",attachmentCaptionEditor:"attachment__caption-editor",attachmentMetadata:"attachment__metadata",attachmentMetadataContainer:"attachment__metadata-container",attachmentName:"attachment__name",attachmentProgress:"attachment__progress",attachmentSize:"attachment__size",attachmentToolbar:"attachment__toolbar",attachmentGallery:"attachment-gallery"},fileSize:A0,input:gh,keyNames:{8:"backspace",9:"tab",13:"return",27:"escape",37:"left",39:"right",46:"delete",68:"d",72:"h",79:"o"},lang:K,parser:Nl,textAttributes:ji,toolbar:k0,undo:Yd}),be=class{static proxyMethod(e){let{name:t,toMethod:i,toProperty:n,optional:s}=$8(e);this.prototype[t]=function(){let o,a;var l,c;return i?a=s?(l=this[i])===null||l===void 0?void 0:l.call(this):this[i]():n&&(a=this[n]),s?(o=(c=a)===null||c===void 0?void 0:c[t],o?Yv.call(o,a,arguments):void 0):(o=a[t],Yv.call(o,a,arguments))}}},$8=function(r){let e=r.match(V8);if(!e)throw new Error("can't parse @proxyMethod expression: ".concat(r));let t={name:e[4]};return e[2]!=null?t.toMethod=e[1]:t.toProperty=e[1],e[3]!=null&&(t.optional=!0),t},{apply:Yv}=Function.prototype,V8=new RegExp("^(.+?)(\\(\\))?(\\?)?\\.(.+?)$"),Pd,Dd,Id,qi=class extends be{static box(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";return e instanceof this?e:this.fromUCS2String(e?.toString())}static fromUCS2String(e){return new this(e,Zd(e))}static fromCodepoints(e){return new this(Qd(e),e)}constructor(e,t){super(...arguments),this.ucs2String=e,this.codepoints=t,this.length=this.codepoints.length,this.ucs2Length=this.ucs2String.length}offsetToUCS2Offset(e){return Qd(this.codepoints.slice(0,Math.max(0,e))).length}offsetFromUCS2Offset(e){return Zd(this.ucs2String.slice(0,Math.max(0,e))).length}slice(){return this.constructor.fromCodepoints(this.codepoints.slice(...arguments))}charAt(e){return this.slice(e,e+1)}isEqualTo(e){return this.constructor.box(e).ucs2String===this.ucs2String}toJSON(){return this.ucs2String}getCacheKey(){return this.ucs2String}toString(){return this.ucs2String}},W8=((Pd=Array.from)===null||Pd===void 0?void 0:Pd.call(Array,"\u{1F47C}").length)===1,K8=((Dd=" ".codePointAt)===null||Dd===void 0?void 0:Dd.call(" ",0))!=null,G8=((Id=String.fromCodePoint)===null||Id===void 0?void 0:Id.call(String,32,128124))===" \u{1F47C}",Zd,Qd;Zd=W8&&K8?r=>Array.from(r).map(e=>e.codePointAt(0)):function(r){let e=[],t=0,{length:i}=r;for(;t<i;){let n=r.charCodeAt(t++);if(55296<=n&&n<=56319&&t<i){let s=r.charCodeAt(t++);(64512&s)==56320?n=((1023&n)<<10)+(1023&s)+65536:t--}e.push(n)}return e},Qd=G8?r=>String.fromCodePoint(...Array.from(r||[])):function(r){return(()=>{let e=[];return Array.from(r).forEach(t=>{let i="";t>65535&&(t-=65536,i+=String.fromCharCode(t>>>10&1023|55296),t=56320|1023&t),e.push(i+String.fromCharCode(t))}),e})().join("")};var J8=0,_r=class extends be{static fromJSONString(e){return this.fromJSON(JSON.parse(e))}constructor(){super(...arguments),this.id=++J8}hasSameConstructorAs(e){return this.constructor===e?.constructor}isEqualTo(e){return this===e}inspect(){let e=[],t=this.contentsForInspection()||{};for(let i in t){let n=t[i];e.push("".concat(i,"=").concat(n))}return"#<".concat(this.constructor.name,":").concat(this.id).concat(e.length?" ".concat(e.join(", ")):"",">")}contentsForInspection(){}toJSONString(){return JSON.stringify(this)}toUTF16String(){return qi.box(this)}getCacheKey(){return this.id.toString()}},Hi=function(){let r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];if(r.length!==e.length)return!1;for(let t=0;t<r.length;t++)if(r[t]!==e[t])return!1;return!0},bh=function(r){let e=r.slice(0);for(var t=arguments.length,i=new Array(t>1?t-1:0),n=1;n<t;n++)i[n-1]=arguments[n];return e.splice(...i),e},X8=/[\u05BE\u05C0\u05C3\u05D0-\u05EA\u05F0-\u05F4\u061B\u061F\u0621-\u063A\u0640-\u064A\u066D\u0671-\u06B7\u06BA-\u06BE\u06C0-\u06CE\u06D0-\u06D5\u06E5\u06E6\u200F\u202B\u202E\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE72\uFE74\uFE76-\uFEFC]/,Y8=function(){let r=G("input",{dir:"auto",name:"x",dirName:"x.dir"}),e=G("textarea",{dir:"auto",name:"y",dirName:"y.dir"}),t=G("form");t.appendChild(r),t.appendChild(e);let i=function(){try{return new FormData(t).has(e.dirName)}catch{return!1}}(),n=function(){try{return r.matches(":dir(ltr),:dir(rtl)")}catch{return!1}}();return i?function(s){return e.value=s,new FormData(t).get(e.dirName)}:n?function(s){return r.value=s,r.matches(":dir(rtl)")?"rtl":"ltr"}:function(s){let o=s.trim().charAt(0);return X8.test(o)?"rtl":"ltr"}}(),Md=null,Bd=null,Fd=null,Cl=null,eh=()=>(Md||(Md=Q8().concat(Z8())),Md),Ae=r=>Xe[r],Z8=()=>(Bd||(Bd=Object.keys(Xe)),Bd),th=r=>ji[r],Q8=()=>(Fd||(Fd=Object.keys(ji)),Fd),S0=function(r,e){eL(r).textContent=e.replace(/%t/g,r)},eL=function(r){let e=document.createElement("style");e.setAttribute("type","text/css"),e.setAttribute("data-tag-name",r.toLowerCase());let t=tL();return t&&e.setAttribute("nonce",t),document.head.insertBefore(e,document.head.firstChild),e},tL=function(){let r=Zv("trix-csp-nonce")||Zv("csp-nonce");if(r){let{nonce:e,content:t}=r;return e==""?t:e}},Zv=r=>document.head.querySelector("meta[name=".concat(r,"]")),Qv={"application/x-trix-feature-detection":"test"},C0=function(r){let e=r.getData("text/plain"),t=r.getData("text/html");if(!e||!t)return e?.length;{let{body:i}=new DOMParser().parseFromString(t,"text/html");if(i.textContent===e)return!i.querySelector("*")}},T0=/Mac|^iP/.test(navigator.platform)?r=>r.metaKey:r=>r.ctrlKey,vh=r=>setTimeout(r,1),L0=function(){let r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e={};for(let t in r){let i=r[t];e[t]=i}return e},Jn=function(){let r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(Object.keys(r).length!==Object.keys(e).length)return!1;for(let t in r)if(r[t]!==e[t])return!1;return!0},Y=function(r){if(r!=null)return Array.isArray(r)||(r=[r,r]),[e0(r[0]),e0(r[1]!=null?r[1]:r[0])]},xr=function(r){if(r==null)return;let[e,t]=Y(r);return rh(e,t)},Dl=function(r,e){if(r==null||e==null)return;let[t,i]=Y(r),[n,s]=Y(e);return rh(t,n)&&rh(i,s)},e0=function(r){return typeof r=="number"?r:L0(r)},rh=function(r,e){return typeof r=="number"?r===e:Jn(r,e)},Il=class extends be{constructor(){super(...arguments),this.update=this.update.bind(this),this.selectionManagers=[]}start(){this.started||(this.started=!0,document.addEventListener("selectionchange",this.update,!0))}stop(){if(this.started)return this.started=!1,document.removeEventListener("selectionchange",this.update,!0)}registerSelectionManager(e){if(!this.selectionManagers.includes(e))return this.selectionManagers.push(e),this.start()}unregisterSelectionManager(e){if(this.selectionManagers=this.selectionManagers.filter(t=>t!==e),this.selectionManagers.length===0)return this.stop()}notifySelectionManagersOfSelectionChange(){return this.selectionManagers.map(e=>e.selectionDidChange())}update(){this.notifySelectionManagersOfSelectionChange()}reset(){this.update()}},Ui=new Il,R0=function(){let r=window.getSelection();if(r.rangeCount>0)return r},wo=function(){var r;let e=(r=R0())===null||r===void 0?void 0:r.getRangeAt(0);if(e&&!rL(e))return e},N0=function(r){let e=window.getSelection();return e.removeAllRanges(),e.addRange(r),Ui.update()},rL=r=>t0(r.startContainer)||t0(r.endContainer),t0=r=>!Object.getPrototypeOf(r),go=r=>r.replace(new RegExp("".concat(eu),"g"),"").replace(new RegExp("".concat(ti),"g")," "),yh=new RegExp("[^\\S".concat(ti,"]")),wh=r=>r.replace(new RegExp("".concat(yh.source),"g")," ").replace(/\ {2,}/g," "),r0=function(r,e){if(r.isEqualTo(e))return["",""];let t=jd(r,e),{length:i}=t.utf16String,n;if(i){let{offset:s}=t,o=r.codepoints.slice(0,s).concat(r.codepoints.slice(s+i));n=jd(e,qi.fromCodepoints(o))}else n=jd(e,r);return[t.utf16String.toString(),n.utf16String.toString()]},jd=function(r,e){let t=0,i=r.length,n=e.length;for(;t<i&&r.charAt(t).isEqualTo(e.charAt(t));)t++;for(;i>t+1&&r.charAt(i-1).isEqualTo(e.charAt(n-1));)i--,n--;return{utf16String:r.slice(t,i),offset:t}},Ye=class extends _r{static fromCommonAttributesOfObjects(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];if(!e.length)return new this;let t=po(e[0]),i=t.getKeys();return e.slice(1).forEach(n=>{i=t.getKeysCommonToHash(po(n)),t=t.slice(i)}),t}static box(e){return po(e)}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};super(...arguments),this.values=Ol(e)}add(e,t){return this.merge(iL(e,t))}remove(e){return new Ye(Ol(this.values,e))}get(e){return this.values[e]}has(e){return e in this.values}merge(e){return new Ye(nL(this.values,sL(e)))}slice(e){let t={};return Array.from(e).forEach(i=>{this.has(i)&&(t[i]=this.values[i])}),new Ye(t)}getKeys(){return Object.keys(this.values)}getKeysCommonToHash(e){return e=po(e),this.getKeys().filter(t=>this.values[t]===e.values[t])}isEqualTo(e){return Hi(this.toArray(),po(e).toArray())}isEmpty(){return this.getKeys().length===0}toArray(){if(!this.array){let e=[];for(let t in this.values){let i=this.values[t];e.push(e.push(t,i))}this.array=e.slice(0)}return this.array}toObject(){return Ol(this.values)}toJSON(){return this.toObject()}contentsForInspection(){return{values:JSON.stringify(this.values)}}},iL=function(r,e){let t={};return t[r]=e,t},nL=function(r,e){let t=Ol(r);for(let i in e){let n=e[i];t[i]=n}return t},Ol=function(r,e){let t={};return Object.keys(r).sort().forEach(i=>{i!==e&&(t[i]=r[i])}),t},po=function(r){return r instanceof Ye?r:new Ye(r)},sL=function(r){return r instanceof Ye?r.values:r},Eo=class{static groupObjects(){let e,t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],{depth:i,asTree:n}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};n&&i==null&&(i=0);let s=[];return Array.from(t).forEach(o=>{var a;if(e){var l,c,f;if((l=o.canBeGrouped)!==null&&l!==void 0&&l.call(o,i)&&(c=(f=e[e.length-1]).canBeGroupedWith)!==null&&c!==void 0&&c.call(f,o,i))return void e.push(o);s.push(new this(e,{depth:i,asTree:n})),e=null}(a=o.canBeGrouped)!==null&&a!==void 0&&a.call(o,i)?e=[o]:s.push(o)}),e&&s.push(new this(e,{depth:i,asTree:n})),s}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],{depth:t,asTree:i}=arguments.length>1?arguments[1]:void 0;this.objects=e,i&&(this.depth=t,this.objects=this.constructor.groupObjects(this.objects,{asTree:i,depth:this.depth+1}))}getObjects(){return this.objects}getDepth(){return this.depth}getCacheKey(){let e=["objectGroup"];return Array.from(this.getObjects()).forEach(t=>{e.push(t.getCacheKey())}),e.join("/")}},ih=class extends be{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),this.objects={},Array.from(e).forEach(t=>{let i=JSON.stringify(t);this.objects[i]==null&&(this.objects[i]=t)})}find(e){let t=JSON.stringify(e);return this.objects[t]}},nh=class{constructor(e){this.reset(e)}add(e){let t=i0(e);this.elements[t]=e}remove(e){let t=i0(e),i=this.elements[t];if(i)return delete this.elements[t],i}reset(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];return this.elements={},Array.from(e).forEach(t=>{this.add(t)}),e}},i0=r=>r.dataset.trixStoreKey,$n=class extends be{isPerforming(){return this.performing===!0}hasPerformed(){return this.performed===!0}hasSucceeded(){return this.performed&&this.succeeded}hasFailed(){return this.performed&&!this.succeeded}getPromise(){return this.promise||(this.promise=new Promise((e,t)=>(this.performing=!0,this.perform((i,n)=>{this.succeeded=i,this.performing=!1,this.performed=!0,this.succeeded?e(n):t(n)})))),this.promise}perform(e){return e(!1)}release(){var e,t;(e=this.promise)===null||e===void 0||(t=e.cancel)===null||t===void 0||t.call(e),this.promise=null,this.performing=null,this.performed=null,this.succeeded=null}};$n.proxyMethod("getPromise().then"),$n.proxyMethod("getPromise().catch");var kr=class extends be{constructor(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.object=e,this.options=t,this.childViews=[],this.rootView=this}getNodes(){return this.nodes||(this.nodes=this.createNodes()),this.nodes.map(e=>e.cloneNode(!0))}invalidate(){var e;return this.nodes=null,this.childViews=[],(e=this.parentView)===null||e===void 0?void 0:e.invalidate()}invalidateViewForObject(e){var t;return(t=this.findViewForObject(e))===null||t===void 0?void 0:t.invalidate()}findOrCreateCachedChildView(e,t,i){let n=this.getCachedViewForObject(t);return n?this.recordChildView(n):(n=this.createChildView(...arguments),this.cacheViewForObject(n,t)),n}createChildView(e,t){let i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};t instanceof Eo&&(i.viewClass=e,e=sh);let n=new e(t,i);return this.recordChildView(n)}recordChildView(e){return e.parentView=this,e.rootView=this.rootView,this.childViews.push(e),e}getAllChildViews(){let e=[];return this.childViews.forEach(t=>{e.push(t),e=e.concat(t.getAllChildViews())}),e}findElement(){return this.findElementForObject(this.object)}findElementForObject(e){let t=e?.id;if(t)return this.rootView.element.querySelector("[data-trix-id='".concat(t,"']"))}findViewForObject(e){for(let t of this.getAllChildViews())if(t.object===e)return t}getViewCache(){return this.rootView!==this?this.rootView.getViewCache():this.isViewCachingEnabled()?(this.viewCache||(this.viewCache={}),this.viewCache):void 0}isViewCachingEnabled(){return this.shouldCacheViews!==!1}enableViewCaching(){this.shouldCacheViews=!0}disableViewCaching(){this.shouldCacheViews=!1}getCachedViewForObject(e){var t;return(t=this.getViewCache())===null||t===void 0?void 0:t[e.getCacheKey()]}cacheViewForObject(e,t){let i=this.getViewCache();i&&(i[t.getCacheKey()]=e)}garbageCollectCachedViews(){let e=this.getViewCache();if(e){let t=this.getAllChildViews().concat(this).map(i=>i.object.getCacheKey());for(let i in e)t.includes(i)||delete e[i]}}},sh=class extends kr{constructor(){super(...arguments),this.objectGroup=this.object,this.viewClass=this.options.viewClass,delete this.options.viewClass}getChildViews(){return this.childViews.length||Array.from(this.objectGroup.getObjects()).forEach(e=>{this.findOrCreateCachedChildView(this.viewClass,e,this.options)}),this.childViews}createNodes(){let e=this.createContainerElement();return this.getChildViews().forEach(t=>{Array.from(t.getNodes()).forEach(i=>{e.appendChild(i)})}),[e]}createContainerElement(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:this.objectGroup.getDepth();return this.getChildViews()[0].createContainerElement(e)}},oL="style href src width height language class".split(" "),aL="javascript:".split(" "),lL="script iframe form noscript".split(" "),Vn=class extends be{static setHTML(e,t){let i=new this(t).sanitize(),n=i.getHTML?i.getHTML():i.outerHTML;e.innerHTML=n}static sanitize(e,t){let i=new this(e,t);return i.sanitize(),i}constructor(e){let{allowedAttributes:t,forbiddenProtocols:i,forbiddenElements:n}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.allowedAttributes=t||oL,this.forbiddenProtocols=i||aL,this.forbiddenElements=n||lL,this.body=uL(e)}sanitize(){return this.sanitizeElements(),this.normalizeListElementNesting()}getHTML(){return this.body.innerHTML}getBody(){return this.body}sanitizeElements(){let e=Pl(this.body),t=[];for(;e.nextNode();){let i=e.currentNode;switch(i.nodeType){case Node.ELEMENT_NODE:this.elementIsRemovable(i)?t.push(i):this.sanitizeElement(i);break;case Node.COMMENT_NODE:t.push(i)}}return t.forEach(i=>ii(i)),this.body}sanitizeElement(e){return e.hasAttribute("href")&&this.forbiddenProtocols.includes(e.protocol)&&e.removeAttribute("href"),Array.from(e.attributes).forEach(t=>{let{name:i}=t;this.allowedAttributes.includes(i)||i.indexOf("data-trix")===0||e.removeAttribute(i)}),e}normalizeListElementNesting(){return Array.from(this.body.querySelectorAll("ul,ol")).forEach(e=>{let t=e.previousElementSibling;t&&Je(t)==="li"&&t.appendChild(e)}),this.body}elementIsRemovable(e){if(e?.nodeType===Node.ELEMENT_NODE)return this.elementIsForbidden(e)||this.elementIsntSerializable(e)}elementIsForbidden(e){return this.forbiddenElements.includes(Je(e))}elementIsntSerializable(e){return e.getAttribute("data-trix-serialize")==="false"&&!Mi(e)}},uL=function(){let r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";r=r.replace(/<\/html[^>]*>[^]*$/i,"</html>");let e=document.implementation.createHTMLDocument("");return e.documentElement.innerHTML=r,Array.from(e.head.querySelectorAll("style")).forEach(t=>{e.body.appendChild(t)}),e.body},{css:ei}=To,xo=class extends kr{constructor(){super(...arguments),this.attachment=this.object,this.attachment.uploadProgressDelegate=this,this.attachmentPiece=this.options.piece}createContentNodes(){return[]}createNodes(){let e,t=e=G({tagName:"figure",className:this.getClassName(),data:this.getData(),editable:!1}),i=this.getHref();return i&&(e=G({tagName:"a",editable:!1,attributes:{href:i,tabindex:-1}}),t.appendChild(e)),this.attachment.hasContent()?Vn.setHTML(e,this.attachment.getContent()):this.createContentNodes().forEach(n=>{e.appendChild(n)}),e.appendChild(this.createCaptionElement()),this.attachment.isPending()&&(this.progressElement=G({tagName:"progress",attributes:{class:ei.attachmentProgress,value:this.attachment.getUploadProgress(),max:100},data:{trixMutable:!0,trixStoreKey:["progressElement",this.attachment.id].join("/")}}),t.appendChild(this.progressElement)),[n0("left"),t,n0("right")]}createCaptionElement(){let e=G({tagName:"figcaption",className:ei.attachmentCaption}),t=this.attachmentPiece.getCaption();if(t)e.classList.add("".concat(ei.attachmentCaption,"--edited")),e.textContent=t;else{let i,n,s=this.getCaptionConfig();if(s.name&&(i=this.attachment.getFilename()),s.size&&(n=this.attachment.getFormattedFilesize()),i){let o=G({tagName:"span",className:ei.attachmentName,textContent:i});e.appendChild(o)}if(n){i&&e.appendChild(document.createTextNode(" "));let o=G({tagName:"span",className:ei.attachmentSize,textContent:n});e.appendChild(o)}}return e}getClassName(){let e=[ei.attachment,"".concat(ei.attachment,"--").concat(this.attachment.getType())],t=this.attachment.getExtension();return t&&e.push("".concat(ei.attachment,"--").concat(t)),e.join(" ")}getData(){let e={trixAttachment:JSON.stringify(this.attachment),trixContentType:this.attachment.getContentType(),trixId:this.attachment.id},{attributes:t}=this.attachmentPiece;return t.isEmpty()||(e.trixAttributes=JSON.stringify(t)),this.attachment.isPending()&&(e.trixSerialize=!1),e}getHref(){if(!cL(this.attachment.getContent(),"a"))return this.attachment.getHref()}getCaptionConfig(){var e;let t=this.attachment.getType(),i=L0((e=fh[t])===null||e===void 0?void 0:e.caption);return t==="file"&&(i.name=!0),i}findProgressElement(){var e;return(e=this.findElement())===null||e===void 0?void 0:e.querySelector("progress")}attachmentDidChangeUploadProgress(){let e=this.attachment.getUploadProgress(),t=this.findProgressElement();t&&(t.value=e)}},n0=r=>G({tagName:"span",textContent:eu,data:{trixCursorTarget:r,trixSerialize:!1}}),cL=function(r,e){let t=G("div");return Vn.setHTML(t,r||""),t.querySelector(e)},Ml=class extends xo{constructor(){super(...arguments),this.attachment.previewDelegate=this}createContentNodes(){return this.image=G({tagName:"img",attributes:{src:""},data:{trixMutable:!0}}),this.refresh(this.image),[this.image]}createCaptionElement(){let e=super.createCaptionElement(...arguments);return e.textContent||e.setAttribute("data-trix-placeholder",K.captionPlaceholder),e}refresh(e){var t;if(e||(e=(t=this.findElement())===null||t===void 0?void 0:t.querySelector("img")),e)return this.updateAttributesForImage(e)}updateAttributesForImage(e){let t=this.attachment.getURL(),i=this.attachment.getPreviewURL();if(e.src=i||t,i===t)e.removeAttribute("data-trix-serialized-attributes");else{let a=JSON.stringify({src:t});e.setAttribute("data-trix-serialized-attributes",a)}let n=this.attachment.getWidth(),s=this.attachment.getHeight();n!=null&&(e.width=n),s!=null&&(e.height=s);let o=["imageElement",this.attachment.id,e.src,e.width,e.height].join("/");e.dataset.trixStoreKey=o}attachmentDidChangeAttributes(){return this.refresh(this.image),this.refresh()}},Bl=class extends kr{constructor(){super(...arguments),this.piece=this.object,this.attributes=this.piece.getAttributes(),this.textConfig=this.options.textConfig,this.context=this.options.context,this.piece.attachment?this.attachment=this.piece.attachment:this.string=this.piece.toString()}createNodes(){let e=this.attachment?this.createAttachmentNodes():this.createStringNodes(),t=this.createElement();if(t){let i=function(n){for(;(s=n)!==null&&s!==void 0&&s.firstElementChild;){var s;n=n.firstElementChild}return n}(t);Array.from(e).forEach(n=>{i.appendChild(n)}),e=[t]}return e}createAttachmentNodes(){let e=this.attachment.isPreviewable()?Ml:xo;return this.createChildView(e,this.piece.attachment,{piece:this.piece}).getNodes()}createStringNodes(){var e;if((e=this.textConfig)!==null&&e!==void 0&&e.plaintext)return[document.createTextNode(this.string)];{let t=[],i=this.string.split(`
`);for(let n=0;n<i.length;n++){let s=i[n];if(n>0){let o=G("br");t.push(o)}if(s.length){let o=document.createTextNode(this.preserveSpaces(s));t.push(o)}}return t}}createElement(){let e,t,i,n={};for(t in this.attributes){i=this.attributes[t];let o=th(t);if(o){if(o.tagName){var s;let a=G(o.tagName);s?(s.appendChild(a),s=a):e=s=a}if(o.styleProperty&&(n[o.styleProperty]=i),o.style)for(t in o.style)i=o.style[t],n[t]=i}}if(Object.keys(n).length)for(t in e||(e=G("span")),n)i=n[t],e.style[t]=i;return e}createContainerElement(){for(let e in this.attributes){let t=this.attributes[e],i=th(e);if(i&&i.groupTagName){let n={};return n[e]=t,G(i.groupTagName,n)}}}preserveSpaces(e){return this.context.isLast&&(e=e.replace(/\ $/,ti)),e=e.replace(/(\S)\ {3}(\S)/g,"$1 ".concat(ti," $2")).replace(/\ {2}/g,"".concat(ti," ")).replace(/\ {2}/g," ".concat(ti)),(this.context.isFirst||this.context.followsWhitespace)&&(e=e.replace(/^\ /,ti)),e}},Fl=class extends kr{constructor(){super(...arguments),this.text=this.object,this.textConfig=this.options.textConfig}createNodes(){let e=[],t=Eo.groupObjects(this.getPieces()),i=t.length-1;for(let s=0;s<t.length;s++){let o=t[s],a={};s===0&&(a.isFirst=!0),s===i&&(a.isLast=!0),dL(n)&&(a.followsWhitespace=!0);let l=this.findOrCreateCachedChildView(Bl,o,{textConfig:this.textConfig,context:a});e.push(...Array.from(l.getNodes()||[]));var n=o}return e}getPieces(){return Array.from(this.text.getPieces()).filter(e=>!e.hasAttribute("blockBreak"))}},dL=r=>/\s$/.test(r?.toString()),{css:s0}=To,jl=class extends kr{constructor(){super(...arguments),this.block=this.object,this.attributes=this.block.getAttributes()}createNodes(){let e=[document.createComment("block")];if(this.block.isEmpty())e.push(G("br"));else{var t;let i=(t=Ae(this.block.getLastAttribute()))===null||t===void 0?void 0:t.text,n=this.findOrCreateCachedChildView(Fl,this.block.text,{textConfig:i});e.push(...Array.from(n.getNodes()||[])),this.shouldAddExtraNewlineElement()&&e.push(G("br"))}if(this.attributes.length)return e;{let i,{tagName:n}=Xe.default;this.block.isRTL()&&(i={dir:"rtl"});let s=G({tagName:n,attributes:i});return e.forEach(o=>s.appendChild(o)),[s]}}createContainerElement(e){let t={},i,n=this.attributes[e],{tagName:s,htmlAttributes:o=[]}=Ae(n);if(e===0&&this.block.isRTL()&&Object.assign(t,{dir:"rtl"}),n==="attachmentGallery"){let a=this.block.getBlockBreakPosition();i="".concat(s0.attachmentGallery," ").concat(s0.attachmentGallery,"--").concat(a)}return Object.entries(this.block.htmlAttributes).forEach(a=>{let[l,c]=a;o.includes(l)&&(t[l]=c)}),G({tagName:s,className:i,attributes:t})}shouldAddExtraNewlineElement(){return/\n\n$/.test(this.block.toString())}},Wn=class extends kr{static render(e){let t=G("div"),i=new this(e,{element:t});return i.render(),i.sync(),t}constructor(){super(...arguments),this.element=this.options.element,this.elementStore=new nh,this.setDocument(this.object)}setDocument(e){e.isEqualTo(this.document)||(this.document=this.object=e)}render(){if(this.childViews=[],this.shadowElement=G("div"),!this.document.isEmpty()){let e=Eo.groupObjects(this.document.getBlocks(),{asTree:!0});Array.from(e).forEach(t=>{let i=this.findOrCreateCachedChildView(jl,t);Array.from(i.getNodes()).map(n=>this.shadowElement.appendChild(n))})}}isSynced(){return hL(this.shadowElement,this.element)}sync(){let e=this.createDocumentFragmentForSync();for(;this.element.lastChild;)this.element.removeChild(this.element.lastChild);return this.element.appendChild(e),this.didSync()}didSync(){return this.elementStore.reset(o0(this.element)),vh(()=>this.garbageCollectCachedViews())}createDocumentFragmentForSync(){let e=document.createDocumentFragment();return Array.from(this.shadowElement.childNodes).forEach(t=>{e.appendChild(t.cloneNode(!0))}),Array.from(o0(e)).forEach(t=>{let i=this.elementStore.remove(t);i&&t.parentNode.replaceChild(i,t)}),e}},o0=r=>r.querySelectorAll("[data-trix-store-key]"),hL=(r,e)=>a0(r.innerHTML)===a0(e.innerHTML),a0=r=>r.replace(/&nbsp;/g," ");function Tl(r){var e,t;function i(s,o){try{var a=r[s](o),l=a.value,c=l instanceof fL;Promise.resolve(c?l.v:l).then(function(f){if(c){var m=s==="return"?"return":"next";if(!l.k||f.done)return i(m,f);f=r[m](f).value}n(a.done?"return":"normal",f)},function(f){i("throw",f)})}catch(f){n("throw",f)}}function n(s,o){switch(s){case"return":e.resolve({value:o,done:!0});break;case"throw":e.reject(o);break;default:e.resolve({value:o,done:!1})}(e=e.next)?i(e.key,e.arg):t=null}this._invoke=function(s,o){return new Promise(function(a,l){var c={key:s,arg:o,resolve:a,reject:l,next:null};t?t=t.next=c:(e=t=c,i(s,o))})},typeof r.return!="function"&&(this.return=void 0)}function fL(r,e){this.v=r,this.k=e}function ht(r,e,t){return(e=pL(e))in r?Object.defineProperty(r,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):r[e]=t,r}function pL(r){var e=function(t,i){if(typeof t!="object"||t===null)return t;var n=t[Symbol.toPrimitive];if(n!==void 0){var s=n.call(t,i||"default");if(typeof s!="object")return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return(i==="string"?String:Number)(t)}(r,"string");return typeof e=="symbol"?e:String(e)}Tl.prototype[typeof Symbol=="function"&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},Tl.prototype.next=function(r){return this._invoke("next",r)},Tl.prototype.throw=function(r){return this._invoke("throw",r)},Tl.prototype.return=function(r){return this._invoke("return",r)};function re(r,e){return mL(r,O0(r,e,"get"))}function Ah(r,e,t){return gL(r,O0(r,e,"set"),t),t}function O0(r,e,t){if(!e.has(r))throw new TypeError("attempted to "+t+" private field on non-instance");return e.get(r)}function mL(r,e){return e.get?e.get.call(r):e.value}function gL(r,e,t){if(e.set)e.set.call(r,t);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=t}}function Ll(r,e,t){if(!e.has(r))throw new TypeError("attempted to get private field on non-instance");return t}function P0(r,e){if(e.has(r))throw new TypeError("Cannot initialize the same private elements twice on an object")}function Ao(r,e,t){P0(r,e),e.set(r,t)}var Sr=class extends _r{static registerType(e,t){t.type=e,this.types[e]=t}static fromJSON(e){let t=this.types[e.type];if(t)return t.fromJSON(e)}constructor(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.attributes=Ye.box(t)}copyWithAttributes(e){return new this.constructor(this.getValue(),e)}copyWithAdditionalAttributes(e){return this.copyWithAttributes(this.attributes.merge(e))}copyWithoutAttribute(e){return this.copyWithAttributes(this.attributes.remove(e))}copy(){return this.copyWithAttributes(this.attributes)}getAttribute(e){return this.attributes.get(e)}getAttributesHash(){return this.attributes}getAttributes(){return this.attributes.toObject()}hasAttribute(e){return this.attributes.has(e)}hasSameStringValueAsPiece(e){return e&&this.toString()===e.toString()}hasSameAttributesAsPiece(e){return e&&(this.attributes===e.attributes||this.attributes.isEqualTo(e.attributes))}isBlockBreak(){return!1}isEqualTo(e){return super.isEqualTo(...arguments)||this.hasSameConstructorAs(e)&&this.hasSameStringValueAsPiece(e)&&this.hasSameAttributesAsPiece(e)}isEmpty(){return this.length===0}isSerializable(){return!0}toJSON(){return{type:this.constructor.type,attributes:this.getAttributes()}}contentsForInspection(){return{type:this.constructor.type,attributes:this.attributes.inspect()}}canBeGrouped(){return this.hasAttribute("href")}canBeGroupedWith(e){return this.getAttribute("href")===e.getAttribute("href")}getLength(){return this.length}canBeConsolidatedWith(e){return!1}};ht(Sr,"types",{});var ql=class extends $n{constructor(e){super(...arguments),this.url=e}perform(e){let t=new Image;t.onload=()=>(t.width=this.width=t.naturalWidth,t.height=this.height=t.naturalHeight,e(!0,t)),t.onerror=()=>e(!1),t.src=this.url}},ni=class extends _r{static attachmentForFile(e){let t=new this(this.attributesForFile(e));return t.setFile(e),t}static attributesForFile(e){return new Ye({filename:e.name,filesize:e.size,contentType:e.type})}static fromJSON(e){return new this(e)}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};super(e),this.releaseFile=this.releaseFile.bind(this),this.attributes=Ye.box(e),this.didChangeAttributes()}getAttribute(e){return this.attributes.get(e)}hasAttribute(e){return this.attributes.has(e)}getAttributes(){return this.attributes.toObject()}setAttributes(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=this.attributes.merge(e);var i,n,s,o;if(!this.attributes.isEqualTo(t))return this.attributes=t,this.didChangeAttributes(),(i=this.previewDelegate)===null||i===void 0||(n=i.attachmentDidChangeAttributes)===null||n===void 0||n.call(i,this),(s=this.delegate)===null||s===void 0||(o=s.attachmentDidChangeAttributes)===null||o===void 0?void 0:o.call(s,this)}didChangeAttributes(){if(this.isPreviewable())return this.preloadURL()}isPending(){return this.file!=null&&!(this.getURL()||this.getHref())}isPreviewable(){return this.attributes.has("previewable")?this.attributes.get("previewable"):ni.previewablePattern.test(this.getContentType())}getType(){return this.hasContent()?"content":this.isPreviewable()?"preview":"file"}getURL(){return this.attributes.get("url")}getHref(){return this.attributes.get("href")}getFilename(){return this.attributes.get("filename")||""}getFilesize(){return this.attributes.get("filesize")}getFormattedFilesize(){let e=this.attributes.get("filesize");return typeof e=="number"?A0.formatter(e):""}getExtension(){var e;return(e=this.getFilename().match(/\.(\w+)$/))===null||e===void 0?void 0:e[1].toLowerCase()}getContentType(){return this.attributes.get("contentType")}hasContent(){return this.attributes.has("content")}getContent(){return this.attributes.get("content")}getWidth(){return this.attributes.get("width")}getHeight(){return this.attributes.get("height")}getFile(){return this.file}setFile(e){if(this.file=e,this.isPreviewable())return this.preloadFile()}releaseFile(){this.releasePreloadedFile(),this.file=null}getUploadProgress(){return this.uploadProgress!=null?this.uploadProgress:0}setUploadProgress(e){var t,i;if(this.uploadProgress!==e)return this.uploadProgress=e,(t=this.uploadProgressDelegate)===null||t===void 0||(i=t.attachmentDidChangeUploadProgress)===null||i===void 0?void 0:i.call(t,this)}toJSON(){return this.getAttributes()}getCacheKey(){return[super.getCacheKey(...arguments),this.attributes.getCacheKey(),this.getPreviewURL()].join("/")}getPreviewURL(){return this.previewURL||this.preloadingURL}setPreviewURL(e){var t,i,n,s;if(e!==this.getPreviewURL())return this.previewURL=e,(t=this.previewDelegate)===null||t===void 0||(i=t.attachmentDidChangeAttributes)===null||i===void 0||i.call(t,this),(n=this.delegate)===null||n===void 0||(s=n.attachmentDidChangePreviewURL)===null||s===void 0?void 0:s.call(n,this)}preloadURL(){return this.preload(this.getURL(),this.releaseFile)}preloadFile(){if(this.file)return this.fileObjectURL=URL.createObjectURL(this.file),this.preload(this.fileObjectURL)}releasePreloadedFile(){this.fileObjectURL&&(URL.revokeObjectURL(this.fileObjectURL),this.fileObjectURL=null)}preload(e,t){if(e&&e!==this.getPreviewURL())return this.preloadingURL=e,new ql(e).then(i=>{let{width:n,height:s}=i;return this.getWidth()&&this.getHeight()||this.setAttributes({width:n,height:s}),this.preloadingURL=null,this.setPreviewURL(e),t?.()}).catch(()=>(this.preloadingURL=null,t?.()))}};ht(ni,"previewablePattern",/^image(\/(gif|png|webp|jpe?g)|$)/);var si=class extends Sr{static fromJSON(e){return new this(ni.fromJSON(e.attachment),e.attributes)}constructor(e){super(...arguments),this.attachment=e,this.length=1,this.ensureAttachmentExclusivelyHasAttribute("href"),this.attachment.hasContent()||this.removeProhibitedAttributes()}ensureAttachmentExclusivelyHasAttribute(e){this.hasAttribute(e)&&(this.attachment.hasAttribute(e)||this.attachment.setAttributes(this.attributes.slice([e])),this.attributes=this.attributes.remove(e))}removeProhibitedAttributes(){let e=this.attributes.slice(si.permittedAttributes);e.isEqualTo(this.attributes)||(this.attributes=e)}getValue(){return this.attachment}isSerializable(){return!this.attachment.isPending()}getCaption(){return this.attributes.get("caption")||""}isEqualTo(e){var t;return super.isEqualTo(e)&&this.attachment.id===(e==null||(t=e.attachment)===null||t===void 0?void 0:t.id)}toString(){return"\uFFFC"}toJSON(){let e=super.toJSON(...arguments);return e.attachment=this.attachment,e}getCacheKey(){return[super.getCacheKey(...arguments),this.attachment.getCacheKey()].join("/")}toConsole(){return JSON.stringify(this.toString())}};ht(si,"permittedAttributes",["caption","presentation"]),Sr.registerType("attachment",si);var _o=class extends Sr{static fromJSON(e){return new this(e.string,e.attributes)}constructor(e){super(...arguments),this.string=(t=>t.replace(/\r\n?/g,`
`))(e),this.length=this.string.length}getValue(){return this.string}toString(){return this.string.toString()}isBlockBreak(){return this.toString()===`
`&&this.getAttribute("blockBreak")===!0}toJSON(){let e=super.toJSON(...arguments);return e.string=this.string,e}canBeConsolidatedWith(e){return e&&this.hasSameConstructorAs(e)&&this.hasSameAttributesAsPiece(e)}consolidateWith(e){return new this.constructor(this.toString()+e.toString(),this.attributes)}splitAtOffset(e){let t,i;return e===0?(t=null,i=this):e===this.length?(t=this,i=null):(t=new this.constructor(this.string.slice(0,e),this.attributes),i=new this.constructor(this.string.slice(e),this.attributes)),[t,i]}toConsole(){let{string:e}=this;return e.length>15&&(e=e.slice(0,14)+"\u2026"),JSON.stringify(e.toString())}};Sr.registerType("string",_o);var Kn=class extends _r{static box(e){return e instanceof this?e:new this(e)}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),this.objects=e.slice(0),this.length=this.objects.length}indexOf(e){return this.objects.indexOf(e)}splice(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return new this.constructor(bh(this.objects,...t))}eachObject(e){return this.objects.map((t,i)=>e(t,i))}insertObjectAtIndex(e,t){return this.splice(t,0,e)}insertSplittableListAtIndex(e,t){return this.splice(t,0,...e.objects)}insertSplittableListAtPosition(e,t){let[i,n]=this.splitObjectAtPosition(t);return new this.constructor(i).insertSplittableListAtIndex(e,n)}editObjectAtIndex(e,t){return this.replaceObjectAtIndex(t(this.objects[e]),e)}replaceObjectAtIndex(e,t){return this.splice(t,1,e)}removeObjectAtIndex(e){return this.splice(e,1)}getObjectAtIndex(e){return this.objects[e]}getSplittableListInRange(e){let[t,i,n]=this.splitObjectsAtRange(e);return new this.constructor(t.slice(i,n+1))}selectSplittableList(e){let t=this.objects.filter(i=>e(i));return new this.constructor(t)}removeObjectsInRange(e){let[t,i,n]=this.splitObjectsAtRange(e);return new this.constructor(t).splice(i,n-i+1)}transformObjectsInRange(e,t){let[i,n,s]=this.splitObjectsAtRange(e),o=i.map((a,l)=>n<=l&&l<=s?t(a):a);return new this.constructor(o)}splitObjectsAtRange(e){let t,[i,n,s]=this.splitObjectAtPosition(vL(e));return[i,t]=new this.constructor(i).splitObjectAtPosition(yL(e)+s),[i,n,t-1]}getObjectAtPosition(e){let{index:t}=this.findIndexAndOffsetAtPosition(e);return this.objects[t]}splitObjectAtPosition(e){let t,i,{index:n,offset:s}=this.findIndexAndOffsetAtPosition(e),o=this.objects.slice(0);if(n!=null)if(s===0)t=n,i=0;else{let a=this.getObjectAtIndex(n),[l,c]=a.splitAtOffset(s);o.splice(n,1,l,c),t=n+1,i=l.getLength()-s}else t=o.length,i=0;return[o,t,i]}consolidate(){let e=[],t=this.objects[0];return this.objects.slice(1).forEach(i=>{var n,s;(n=(s=t).canBeConsolidatedWith)!==null&&n!==void 0&&n.call(s,i)?t=t.consolidateWith(i):(e.push(t),t=i)}),t&&e.push(t),new this.constructor(e)}consolidateFromIndexToIndex(e,t){let i=this.objects.slice(0).slice(e,t+1),n=new this.constructor(i).consolidate().toArray();return this.splice(e,i.length,...n)}findIndexAndOffsetAtPosition(e){let t,i=0;for(t=0;t<this.objects.length;t++){let n=i+this.objects[t].getLength();if(i<=e&&e<n)return{index:t,offset:e-i};i=n}return{index:null,offset:null}}findPositionAtIndexAndOffset(e,t){let i=0;for(let n=0;n<this.objects.length;n++){let s=this.objects[n];if(n<e)i+=s.getLength();else if(n===e){i+=t;break}}return i}getEndPosition(){return this.endPosition==null&&(this.endPosition=0,this.objects.forEach(e=>this.endPosition+=e.getLength())),this.endPosition}toString(){return this.objects.join("")}toArray(){return this.objects.slice(0)}toJSON(){return this.toArray()}isEqualTo(e){return super.isEqualTo(...arguments)||bL(this.objects,e?.objects)}contentsForInspection(){return{objects:"[".concat(this.objects.map(e=>e.inspect()).join(", "),"]")}}},bL=function(r){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];if(r.length!==e.length)return!1;let t=!0;for(let i=0;i<r.length;i++){let n=r[i];t&&!n.isEqualTo(e[i])&&(t=!1)}return t},vL=r=>r[0],yL=r=>r[1],Et=class extends _r{static textForAttachmentWithAttributes(e,t){return new this([new si(e,t)])}static textForStringWithAttributes(e,t){return new this([new _o(e,t)])}static fromJSON(e){return new this(Array.from(e).map(t=>Sr.fromJSON(t)))}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments);let t=e.filter(i=>!i.isEmpty());this.pieceList=new Kn(t)}copy(){return this.copyWithPieceList(this.pieceList)}copyWithPieceList(e){return new this.constructor(e.consolidate().toArray())}copyUsingObjectMap(e){let t=this.getPieces().map(i=>e.find(i)||i);return new this.constructor(t)}appendText(e){return this.insertTextAtPosition(e,this.getLength())}insertTextAtPosition(e,t){return this.copyWithPieceList(this.pieceList.insertSplittableListAtPosition(e.pieceList,t))}removeTextAtRange(e){return this.copyWithPieceList(this.pieceList.removeObjectsInRange(e))}replaceTextAtRange(e,t){return this.removeTextAtRange(t).insertTextAtPosition(e,t[0])}moveTextFromRangeToPosition(e,t){if(e[0]<=t&&t<=e[1])return;let i=this.getTextAtRange(e),n=i.getLength();return e[0]<t&&(t-=n),this.removeTextAtRange(e).insertTextAtPosition(i,t)}addAttributeAtRange(e,t,i){let n={};return n[e]=t,this.addAttributesAtRange(n,i)}addAttributesAtRange(e,t){return this.copyWithPieceList(this.pieceList.transformObjectsInRange(t,i=>i.copyWithAdditionalAttributes(e)))}removeAttributeAtRange(e,t){return this.copyWithPieceList(this.pieceList.transformObjectsInRange(t,i=>i.copyWithoutAttribute(e)))}setAttributesAtRange(e,t){return this.copyWithPieceList(this.pieceList.transformObjectsInRange(t,i=>i.copyWithAttributes(e)))}getAttributesAtPosition(e){var t;return((t=this.pieceList.getObjectAtPosition(e))===null||t===void 0?void 0:t.getAttributes())||{}}getCommonAttributes(){let e=Array.from(this.pieceList.toArray()).map(t=>t.getAttributes());return Ye.fromCommonAttributesOfObjects(e).toObject()}getCommonAttributesAtRange(e){return this.getTextAtRange(e).getCommonAttributes()||{}}getExpandedRangeForAttributeAtOffset(e,t){let i,n=i=t,s=this.getLength();for(;n>0&&this.getCommonAttributesAtRange([n-1,i])[e];)n--;for(;i<s&&this.getCommonAttributesAtRange([t,i+1])[e];)i++;return[n,i]}getTextAtRange(e){return this.copyWithPieceList(this.pieceList.getSplittableListInRange(e))}getStringAtRange(e){return this.pieceList.getSplittableListInRange(e).toString()}getStringAtPosition(e){return this.getStringAtRange([e,e+1])}startsWithString(e){return this.getStringAtRange([0,e.length])===e}endsWithString(e){let t=this.getLength();return this.getStringAtRange([t-e.length,t])===e}getAttachmentPieces(){return this.pieceList.toArray().filter(e=>!!e.attachment)}getAttachments(){return this.getAttachmentPieces().map(e=>e.attachment)}getAttachmentAndPositionById(e){let t=0;for(let n of this.pieceList.toArray()){var i;if(((i=n.attachment)===null||i===void 0?void 0:i.id)===e)return{attachment:n.attachment,position:t};t+=n.length}return{attachment:null,position:null}}getAttachmentById(e){let{attachment:t}=this.getAttachmentAndPositionById(e);return t}getRangeOfAttachment(e){let t=this.getAttachmentAndPositionById(e.id),i=t.position;if(e=t.attachment)return[i,i+1]}updateAttributesForAttachment(e,t){let i=this.getRangeOfAttachment(t);return i?this.addAttributesAtRange(e,i):this}getLength(){return this.pieceList.getEndPosition()}isEmpty(){return this.getLength()===0}isEqualTo(e){var t;return super.isEqualTo(e)||(e==null||(t=e.pieceList)===null||t===void 0?void 0:t.isEqualTo(this.pieceList))}isBlockBreak(){return this.getLength()===1&&this.pieceList.getObjectAtIndex(0).isBlockBreak()}eachPiece(e){return this.pieceList.eachObject(e)}getPieces(){return this.pieceList.toArray()}getPieceAtPosition(e){return this.pieceList.getObjectAtPosition(e)}contentsForInspection(){return{pieceList:this.pieceList.inspect()}}toSerializableText(){let e=this.pieceList.selectSplittableList(t=>t.isSerializable());return this.copyWithPieceList(e)}toString(){return this.pieceList.toString()}toJSON(){return this.pieceList.toJSON()}toConsole(){return JSON.stringify(this.pieceList.toArray().map(e=>JSON.parse(e.toConsole())))}getDirection(){return Y8(this.toString())}isRTL(){return this.getDirection()==="rtl"}},Ot=class extends _r{static fromJSON(e){return new this(Et.fromJSON(e.text),e.attributes,e.htmlAttributes)}constructor(e,t,i){super(...arguments),this.text=wL(e||new Et),this.attributes=t||[],this.htmlAttributes=i||{}}isEmpty(){return this.text.isBlockBreak()}isEqualTo(e){return!!super.isEqualTo(e)||this.text.isEqualTo(e?.text)&&Hi(this.attributes,e?.attributes)&&Jn(this.htmlAttributes,e?.htmlAttributes)}copyWithText(e){return new Ot(e,this.attributes,this.htmlAttributes)}copyWithoutText(){return this.copyWithText(null)}copyWithAttributes(e){return new Ot(this.text,e,this.htmlAttributes)}copyWithoutAttributes(){return this.copyWithAttributes(null)}copyUsingObjectMap(e){let t=e.find(this.text);return t?this.copyWithText(t):this.copyWithText(this.text.copyUsingObjectMap(e))}addAttribute(e){let t=this.attributes.concat(l0(e));return this.copyWithAttributes(t)}addHTMLAttribute(e,t){let i=Object.assign({},this.htmlAttributes,{[e]:t});return new Ot(this.text,this.attributes,i)}removeAttribute(e){let{listAttribute:t}=Ae(e),i=c0(c0(this.attributes,e),t);return this.copyWithAttributes(i)}removeLastAttribute(){return this.removeAttribute(this.getLastAttribute())}getLastAttribute(){return u0(this.attributes)}getAttributes(){return this.attributes.slice(0)}getAttributeLevel(){return this.attributes.length}getAttributeAtLevel(e){return this.attributes[e-1]}hasAttribute(e){return this.attributes.includes(e)}hasAttributes(){return this.getAttributeLevel()>0}getLastNestableAttribute(){return u0(this.getNestableAttributes())}getNestableAttributes(){return this.attributes.filter(e=>Ae(e).nestable)}getNestingLevel(){return this.getNestableAttributes().length}decreaseNestingLevel(){let e=this.getLastNestableAttribute();return e?this.removeAttribute(e):this}increaseNestingLevel(){let e=this.getLastNestableAttribute();if(e){let t=this.attributes.lastIndexOf(e),i=bh(this.attributes,t+1,0,...l0(e));return this.copyWithAttributes(i)}return this}getListItemAttributes(){return this.attributes.filter(e=>Ae(e).listAttribute)}isListItem(){var e;return(e=Ae(this.getLastAttribute()))===null||e===void 0?void 0:e.listAttribute}isTerminalBlock(){var e;return(e=Ae(this.getLastAttribute()))===null||e===void 0?void 0:e.terminal}breaksOnReturn(){var e;return(e=Ae(this.getLastAttribute()))===null||e===void 0?void 0:e.breakOnReturn}findLineBreakInDirectionFromPosition(e,t){let i=this.toString(),n;switch(e){case"forward":n=i.indexOf(`
`,t);break;case"backward":n=i.slice(0,t).lastIndexOf(`
`)}if(n!==-1)return n}contentsForInspection(){return{text:this.text.inspect(),attributes:this.attributes}}toString(){return this.text.toString()}toJSON(){return{text:this.text,attributes:this.attributes,htmlAttributes:this.htmlAttributes}}getDirection(){return this.text.getDirection()}isRTL(){return this.text.isRTL()}getLength(){return this.text.getLength()}canBeConsolidatedWith(e){return!this.hasAttributes()&&!e.hasAttributes()&&this.getDirection()===e.getDirection()}consolidateWith(e){let t=Et.textForStringWithAttributes(`
`),i=this.getTextWithoutBlockBreak().appendText(t);return this.copyWithText(i.appendText(e.text))}splitAtOffset(e){let t,i;return e===0?(t=null,i=this):e===this.getLength()?(t=this,i=null):(t=this.copyWithText(this.text.getTextAtRange([0,e])),i=this.copyWithText(this.text.getTextAtRange([e,this.getLength()]))),[t,i]}getBlockBreakPosition(){return this.text.getLength()-1}getTextWithoutBlockBreak(){return D0(this.text)?this.text.getTextAtRange([0,this.getBlockBreakPosition()]):this.text.copy()}canBeGrouped(e){return this.attributes[e]}canBeGroupedWith(e,t){let i=e.getAttributes(),n=i[t],s=this.attributes[t];return s===n&&!(Ae(s).group===!1&&!(()=>{if(!Cl){Cl=[];for(let o in Xe){let{listAttribute:a}=Xe[o];a!=null&&Cl.push(a)}}return Cl})().includes(i[t+1]))&&(this.getDirection()===e.getDirection()||e.isEmpty())}},wL=function(r){return r=AL(r),r=xL(r)},AL=function(r){let e=!1,t=r.getPieces(),i=t.slice(0,t.length-1),n=t[t.length-1];return n?(i=i.map(s=>s.isBlockBreak()?(e=!0,_L(s)):s),e?new Et([...i,n]):r):r},EL=Et.textForStringWithAttributes(`
`,{blockBreak:!0}),xL=function(r){return D0(r)?r:r.appendText(EL)},D0=function(r){let e=r.getLength();return e===0?!1:r.getTextAtRange([e-1,e]).isBlockBreak()},_L=r=>r.copyWithoutAttribute("blockBreak"),l0=function(r){let{listAttribute:e}=Ae(r);return e?[e,r]:[r]},u0=r=>r.slice(-1)[0],c0=function(r,e){let t=r.lastIndexOf(e);return t===-1?r:bh(r,t,1)},dt=class extends _r{static fromJSON(e){return new this(Array.from(e).map(t=>Ot.fromJSON(t)))}static fromString(e,t){let i=Et.textForStringWithAttributes(e,t);return new this([new Ot(i)])}constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),e.length===0&&(e=[new Ot]),this.blockList=Kn.box(e)}isEmpty(){let e=this.getBlockAtIndex(0);return this.blockList.length===1&&e.isEmpty()&&!e.hasAttributes()}copy(){let e=(arguments.length>0&&arguments[0]!==void 0?arguments[0]:{}).consolidateBlocks?this.blockList.consolidate().toArray():this.blockList.toArray();return new this.constructor(e)}copyUsingObjectsFromDocument(e){let t=new ih(e.getObjects());return this.copyUsingObjectMap(t)}copyUsingObjectMap(e){let t=this.getBlocks().map(i=>e.find(i)||i.copyUsingObjectMap(e));return new this.constructor(t)}copyWithBaseBlockAttributes(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],t=this.getBlocks().map(i=>{let n=e.concat(i.getAttributes());return i.copyWithAttributes(n)});return new this.constructor(t)}replaceBlock(e,t){let i=this.blockList.indexOf(e);return i===-1?this:new this.constructor(this.blockList.replaceObjectAtIndex(t,i))}insertDocumentAtRange(e,t){let{blockList:i}=e;t=Y(t);let[n]=t,{index:s,offset:o}=this.locationFromPosition(n),a=this,l=this.getBlockAtPosition(n);return xr(t)&&l.isEmpty()&&!l.hasAttributes()?a=new this.constructor(a.blockList.removeObjectAtIndex(s)):l.getBlockBreakPosition()===o&&n++,a=a.removeTextAtRange(t),new this.constructor(a.blockList.insertSplittableListAtPosition(i,n))}mergeDocumentAtRange(e,t){let i,n;t=Y(t);let[s]=t,o=this.locationFromPosition(s),a=this.getBlockAtIndex(o.index).getAttributes(),l=e.getBaseBlockAttributes(),c=a.slice(-l.length);if(Hi(l,c)){let y=a.slice(0,-l.length);i=e.copyWithBaseBlockAttributes(y)}else i=e.copy({consolidateBlocks:!0}).copyWithBaseBlockAttributes(a);let f=i.getBlockCount(),m=i.getBlockAtIndex(0);if(Hi(a,m.getAttributes())){let y=m.getTextWithoutBlockBreak();if(n=this.insertTextAtRange(y,t),f>1){i=new this.constructor(i.getBlocks().slice(1));let v=s+y.getLength();n=n.insertDocumentAtRange(i,v)}}else n=this.insertDocumentAtRange(i,t);return n}insertTextAtRange(e,t){t=Y(t);let[i]=t,{index:n,offset:s}=this.locationFromPosition(i),o=this.removeTextAtRange(t);return new this.constructor(o.blockList.editObjectAtIndex(n,a=>a.copyWithText(a.text.insertTextAtPosition(e,s))))}removeTextAtRange(e){let t;e=Y(e);let[i,n]=e;if(xr(e))return this;let[s,o]=Array.from(this.locationRangeFromRange(e)),a=s.index,l=s.offset,c=this.getBlockAtIndex(a),f=o.index,m=o.offset,y=this.getBlockAtIndex(f);if(n-i==1&&c.getBlockBreakPosition()===l&&y.getBlockBreakPosition()!==m&&y.text.getStringAtPosition(m)===`
`)t=this.blockList.editObjectAtIndex(f,v=>v.copyWithText(v.text.removeTextAtRange([m,m+1])));else{let v,g=c.text.getTextAtRange([0,l]),x=y.text.getTextAtRange([m,y.getLength()]),S=g.appendText(x);v=a!==f&&l===0&&c.getAttributeLevel()>=y.getAttributeLevel()?y.copyWithText(S):c.copyWithText(S);let T=f+1-a;t=this.blockList.splice(a,T,v)}return new this.constructor(t)}moveTextFromRangeToPosition(e,t){let i;e=Y(e);let[n,s]=e;if(n<=t&&t<=s)return this;let o=this.getDocumentAtRange(e),a=this.removeTextAtRange(e),l=n<t;l&&(t-=o.getLength());let[c,...f]=o.getBlocks();return f.length===0?(i=c.getTextWithoutBlockBreak(),l&&(t+=1)):i=c.text,a=a.insertTextAtRange(i,t),f.length===0?a:(o=new this.constructor(f),t+=i.getLength(),a.insertDocumentAtRange(o,t))}addAttributeAtRange(e,t,i){let{blockList:n}=this;return this.eachBlockAtRange(i,(s,o,a)=>n=n.editObjectAtIndex(a,function(){return Ae(e)?s.addAttribute(e,t):o[0]===o[1]?s:s.copyWithText(s.text.addAttributeAtRange(e,t,o))})),new this.constructor(n)}addAttribute(e,t){let{blockList:i}=this;return this.eachBlock((n,s)=>i=i.editObjectAtIndex(s,()=>n.addAttribute(e,t))),new this.constructor(i)}removeAttributeAtRange(e,t){let{blockList:i}=this;return this.eachBlockAtRange(t,function(n,s,o){Ae(e)?i=i.editObjectAtIndex(o,()=>n.removeAttribute(e)):s[0]!==s[1]&&(i=i.editObjectAtIndex(o,()=>n.copyWithText(n.text.removeAttributeAtRange(e,s))))}),new this.constructor(i)}updateAttributesForAttachment(e,t){let i=this.getRangeOfAttachment(t),[n]=Array.from(i),{index:s}=this.locationFromPosition(n),o=this.getTextAtIndex(s);return new this.constructor(this.blockList.editObjectAtIndex(s,a=>a.copyWithText(o.updateAttributesForAttachment(e,t))))}removeAttributeForAttachment(e,t){let i=this.getRangeOfAttachment(t);return this.removeAttributeAtRange(e,i)}setHTMLAttributeAtPosition(e,t,i){let n=this.getBlockAtPosition(e),s=n.addHTMLAttribute(t,i);return this.replaceBlock(n,s)}insertBlockBreakAtRange(e){let t;e=Y(e);let[i]=e,{offset:n}=this.locationFromPosition(i),s=this.removeTextAtRange(e);return n===0&&(t=[new Ot]),new this.constructor(s.blockList.insertSplittableListAtPosition(new Kn(t),i))}applyBlockAttributeAtRange(e,t,i){let n=this.expandRangeToLineBreaksAndSplitBlocks(i),s=n.document;i=n.range;let o=Ae(e);if(o.listAttribute){s=s.removeLastListAttributeAtRange(i,{exceptAttributeName:e});let a=s.convertLineBreaksToBlockBreaksInRange(i);s=a.document,i=a.range}else s=o.exclusive?s.removeBlockAttributesAtRange(i):o.terminal?s.removeLastTerminalAttributeAtRange(i):s.consolidateBlocksAtRange(i);return s.addAttributeAtRange(e,t,i)}removeLastListAttributeAtRange(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},{blockList:i}=this;return this.eachBlockAtRange(e,function(n,s,o){let a=n.getLastAttribute();a&&Ae(a).listAttribute&&a!==t.exceptAttributeName&&(i=i.editObjectAtIndex(o,()=>n.removeAttribute(a)))}),new this.constructor(i)}removeLastTerminalAttributeAtRange(e){let{blockList:t}=this;return this.eachBlockAtRange(e,function(i,n,s){let o=i.getLastAttribute();o&&Ae(o).terminal&&(t=t.editObjectAtIndex(s,()=>i.removeAttribute(o)))}),new this.constructor(t)}removeBlockAttributesAtRange(e){let{blockList:t}=this;return this.eachBlockAtRange(e,function(i,n,s){i.hasAttributes()&&(t=t.editObjectAtIndex(s,()=>i.copyWithoutAttributes()))}),new this.constructor(t)}expandRangeToLineBreaksAndSplitBlocks(e){let t;e=Y(e);let[i,n]=e,s=this.locationFromPosition(i),o=this.locationFromPosition(n),a=this,l=a.getBlockAtIndex(s.index);if(s.offset=l.findLineBreakInDirectionFromPosition("backward",s.offset),s.offset!=null&&(t=a.positionFromLocation(s),a=a.insertBlockBreakAtRange([t,t+1]),o.index+=1,o.offset-=a.getBlockAtIndex(s.index).getLength(),s.index+=1),s.offset=0,o.offset===0&&o.index>s.index)o.index-=1,o.offset=a.getBlockAtIndex(o.index).getBlockBreakPosition();else{let c=a.getBlockAtIndex(o.index);c.text.getStringAtRange([o.offset-1,o.offset])===`
`?o.offset-=1:o.offset=c.findLineBreakInDirectionFromPosition("forward",o.offset),o.offset!==c.getBlockBreakPosition()&&(t=a.positionFromLocation(o),a=a.insertBlockBreakAtRange([t,t+1]))}return i=a.positionFromLocation(s),n=a.positionFromLocation(o),{document:a,range:e=Y([i,n])}}convertLineBreaksToBlockBreaksInRange(e){e=Y(e);let[t]=e,i=this.getStringAtRange(e).slice(0,-1),n=this;return i.replace(/.*?\n/g,function(s){t+=s.length,n=n.insertBlockBreakAtRange([t-1,t])}),{document:n,range:e}}consolidateBlocksAtRange(e){e=Y(e);let[t,i]=e,n=this.locationFromPosition(t).index,s=this.locationFromPosition(i).index;return new this.constructor(this.blockList.consolidateFromIndexToIndex(n,s))}getDocumentAtRange(e){e=Y(e);let t=this.blockList.getSplittableListInRange(e).toArray();return new this.constructor(t)}getStringAtRange(e){let t,i=e=Y(e);return i[i.length-1]!==this.getLength()&&(t=-1),this.getDocumentAtRange(e).toString().slice(0,t)}getBlockAtIndex(e){return this.blockList.getObjectAtIndex(e)}getBlockAtPosition(e){let{index:t}=this.locationFromPosition(e);return this.getBlockAtIndex(t)}getTextAtIndex(e){var t;return(t=this.getBlockAtIndex(e))===null||t===void 0?void 0:t.text}getTextAtPosition(e){let{index:t}=this.locationFromPosition(e);return this.getTextAtIndex(t)}getPieceAtPosition(e){let{index:t,offset:i}=this.locationFromPosition(e);return this.getTextAtIndex(t).getPieceAtPosition(i)}getCharacterAtPosition(e){let{index:t,offset:i}=this.locationFromPosition(e);return this.getTextAtIndex(t).getStringAtRange([i,i+1])}getLength(){return this.blockList.getEndPosition()}getBlocks(){return this.blockList.toArray()}getBlockCount(){return this.blockList.length}getEditCount(){return this.editCount}eachBlock(e){return this.blockList.eachObject(e)}eachBlockAtRange(e,t){let i,n;e=Y(e);let[s,o]=e,a=this.locationFromPosition(s),l=this.locationFromPosition(o);if(a.index===l.index)return i=this.getBlockAtIndex(a.index),n=[a.offset,l.offset],t(i,n,a.index);for(let c=a.index;c<=l.index;c++)if(i=this.getBlockAtIndex(c),i){switch(c){case a.index:n=[a.offset,i.text.getLength()];break;case l.index:n=[0,l.offset];break;default:n=[0,i.text.getLength()]}t(i,n,c)}}getCommonAttributesAtRange(e){e=Y(e);let[t]=e;if(xr(e))return this.getCommonAttributesAtPosition(t);{let i=[],n=[];return this.eachBlockAtRange(e,function(s,o){if(o[0]!==o[1])return i.push(s.text.getCommonAttributesAtRange(o)),n.push(d0(s))}),Ye.fromCommonAttributesOfObjects(i).merge(Ye.fromCommonAttributesOfObjects(n)).toObject()}}getCommonAttributesAtPosition(e){let t,i,{index:n,offset:s}=this.locationFromPosition(e),o=this.getBlockAtIndex(n);if(!o)return{};let a=d0(o),l=o.text.getAttributesAtPosition(s),c=o.text.getAttributesAtPosition(s-1),f=Object.keys(ji).filter(m=>ji[m].inheritable);for(t in c)i=c[t],(i===l[t]||f.includes(t))&&(a[t]=i);return a}getRangeOfCommonAttributeAtPosition(e,t){let{index:i,offset:n}=this.locationFromPosition(t),s=this.getTextAtIndex(i),[o,a]=Array.from(s.getExpandedRangeForAttributeAtOffset(e,n)),l=this.positionFromLocation({index:i,offset:o}),c=this.positionFromLocation({index:i,offset:a});return Y([l,c])}getBaseBlockAttributes(){let e=this.getBlockAtIndex(0).getAttributes();for(let t=1;t<this.getBlockCount();t++){let i=this.getBlockAtIndex(t).getAttributes(),n=Math.min(e.length,i.length);e=(()=>{let s=[];for(let o=0;o<n&&i[o]===e[o];o++)s.push(i[o]);return s})()}return e}getAttachmentById(e){for(let t of this.getAttachments())if(t.id===e)return t}getAttachmentPieces(){let e=[];return this.blockList.eachObject(t=>{let{text:i}=t;return e=e.concat(i.getAttachmentPieces())}),e}getAttachments(){return this.getAttachmentPieces().map(e=>e.attachment)}getRangeOfAttachment(e){let t=0,i=this.blockList.toArray();for(let n=0;n<i.length;n++){let{text:s}=i[n],o=s.getRangeOfAttachment(e);if(o)return Y([t+o[0],t+o[1]]);t+=s.getLength()}}getLocationRangeOfAttachment(e){let t=this.getRangeOfAttachment(e);return this.locationRangeFromRange(t)}getAttachmentPieceForAttachment(e){for(let t of this.getAttachmentPieces())if(t.attachment===e)return t}findRangesForBlockAttribute(e){let t=0,i=[];return this.getBlocks().forEach(n=>{let s=n.getLength();n.hasAttribute(e)&&i.push([t,t+s]),t+=s}),i}findRangesForTextAttribute(e){let{withValue:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},i=0,n=[],s=[];return this.getPieces().forEach(o=>{let a=o.getLength();(function(l){return t?l.getAttribute(e)===t:l.hasAttribute(e)})(o)&&(n[1]===i?n[1]=i+a:s.push(n=[i,i+a])),i+=a}),s}locationFromPosition(e){let t=this.blockList.findIndexAndOffsetAtPosition(Math.max(0,e));if(t.index!=null)return t;{let i=this.getBlocks();return{index:i.length-1,offset:i[i.length-1].getLength()}}}positionFromLocation(e){return this.blockList.findPositionAtIndexAndOffset(e.index,e.offset)}locationRangeFromPosition(e){return Y(this.locationFromPosition(e))}locationRangeFromRange(e){if(!(e=Y(e)))return;let[t,i]=Array.from(e),n=this.locationFromPosition(t),s=this.locationFromPosition(i);return Y([n,s])}rangeFromLocationRange(e){let t;e=Y(e);let i=this.positionFromLocation(e[0]);return xr(e)||(t=this.positionFromLocation(e[1])),Y([i,t])}isEqualTo(e){return this.blockList.isEqualTo(e?.blockList)}getTexts(){return this.getBlocks().map(e=>e.text)}getPieces(){let e=[];return Array.from(this.getTexts()).forEach(t=>{e.push(...Array.from(t.getPieces()||[]))}),e}getObjects(){return this.getBlocks().concat(this.getTexts()).concat(this.getPieces())}toSerializableDocument(){let e=[];return this.blockList.eachObject(t=>e.push(t.copyWithText(t.text.toSerializableText()))),new this.constructor(e)}toString(){return this.blockList.toString()}toJSON(){return this.blockList.toJSON()}toConsole(){return JSON.stringify(this.blockList.toArray().map(e=>JSON.parse(e.text.toConsole())))}},d0=function(r){let e={},t=r.getLastAttribute();return t&&(e[t]=!0),e},qd=function(r){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return{string:r=go(r),attributes:e,type:"string"}},h0=(r,e)=>{try{return JSON.parse(r.getAttribute("data-trix-".concat(e)))}catch{return{}}},zi=class extends be{static parse(e,t){let i=new this(e,t);return i.parse(),i}constructor(e){let{referenceElement:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(...arguments),this.html=e,this.referenceElement=t,this.blocks=[],this.blockElements=[],this.processedElements=[]}getDocument(){return dt.fromJSON(this.blocks)}parse(){try{this.createHiddenContainer(),Vn.setHTML(this.containerElement,this.html);let e=Pl(this.containerElement,{usingFilter:SL});for(;e.nextNode();)this.processNode(e.currentNode);return this.translateBlockElementMarginsToNewlines()}finally{this.removeHiddenContainer()}}createHiddenContainer(){return this.referenceElement?(this.containerElement=this.referenceElement.cloneNode(!1),this.containerElement.removeAttribute("id"),this.containerElement.setAttribute("data-trix-internal",""),this.containerElement.style.display="none",this.referenceElement.parentNode.insertBefore(this.containerElement,this.referenceElement.nextSibling)):(this.containerElement=G({tagName:"div",style:{display:"none"}}),document.body.appendChild(this.containerElement))}removeHiddenContainer(){return ii(this.containerElement)}processNode(e){switch(e.nodeType){case Node.TEXT_NODE:if(!this.isInsignificantTextNode(e))return this.appendBlockForTextNode(e),this.processTextNode(e);break;case Node.ELEMENT_NODE:return this.appendBlockForElement(e),this.processElement(e)}}appendBlockForTextNode(e){let t=e.parentNode;if(t===this.currentBlockElement&&this.isBlockElement(e.previousSibling))return this.appendStringWithAttributes(`
`);if(t===this.containerElement||this.isBlockElement(t)){var i;let n=this.getBlockAttributes(t),s=this.getBlockHTMLAttributes(t);Hi(n,(i=this.currentBlock)===null||i===void 0?void 0:i.attributes)||(this.currentBlock=this.appendBlockForAttributesWithElement(n,t,s),this.currentBlockElement=t)}}appendBlockForElement(e){let t=this.isBlockElement(e),i=Di(this.currentBlockElement,e);if(t&&!this.isBlockElement(e.firstChild)){if(!this.isInsignificantTextNode(e.firstChild)||!this.isBlockElement(e.firstElementChild)){let n=this.getBlockAttributes(e),s=this.getBlockHTMLAttributes(e);if(e.firstChild){if(i&&Hi(n,this.currentBlock.attributes))return this.appendStringWithAttributes(`
`);this.currentBlock=this.appendBlockForAttributesWithElement(n,e,s),this.currentBlockElement=e}}}else if(this.currentBlockElement&&!i&&!t){let n=this.findParentBlockElement(e);if(n)return this.appendBlockForElement(n);this.currentBlock=this.appendEmptyBlock(),this.currentBlockElement=null}}findParentBlockElement(e){let{parentElement:t}=e;for(;t&&t!==this.containerElement;){if(this.isBlockElement(t)&&this.blockElements.includes(t))return t;t=t.parentElement}return null}processTextNode(e){let t=e.data;var i;return f0(e.parentNode)||(t=wh(t),I0((i=e.previousSibling)===null||i===void 0?void 0:i.textContent)&&(t=CL(t))),this.appendStringWithAttributes(t,this.getTextAttributes(e.parentNode))}processElement(e){let t;if(Mi(e)){if(t=h0(e,"attachment"),Object.keys(t).length){let i=this.getTextAttributes(e);this.appendAttachmentWithAttributes(t,i),e.innerHTML=""}return this.processedElements.push(e)}switch(Je(e)){case"br":return this.isExtraBR(e)||this.isBlockElement(e.nextSibling)||this.appendStringWithAttributes(`
`,this.getTextAttributes(e)),this.processedElements.push(e);case"img":t={url:e.getAttribute("src"),contentType:"image"};let i=(n=>{let s=n.getAttribute("width"),o=n.getAttribute("height"),a={};return s&&(a.width=parseInt(s,10)),o&&(a.height=parseInt(o,10)),a})(e);for(let n in i){let s=i[n];t[n]=s}return this.appendAttachmentWithAttributes(t,this.getTextAttributes(e)),this.processedElements.push(e);case"tr":if(this.needsTableSeparator(e))return this.appendStringWithAttributes(Nl.tableRowSeparator);break;case"td":if(this.needsTableSeparator(e))return this.appendStringWithAttributes(Nl.tableCellSeparator)}}appendBlockForAttributesWithElement(e,t){let i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};this.blockElements.push(t);let n=function(){return{text:[],attributes:arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},htmlAttributes:arguments.length>1&&arguments[1]!==void 0?arguments[1]:{}}}(e,i);return this.blocks.push(n),n}appendEmptyBlock(){return this.appendBlockForAttributesWithElement([],null)}appendStringWithAttributes(e,t){return this.appendPiece(qd(e,t))}appendAttachmentWithAttributes(e,t){return this.appendPiece(function(i){return{attachment:i,attributes:arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},type:"attachment"}}(e,t))}appendPiece(e){return this.blocks.length===0&&this.appendEmptyBlock(),this.blocks[this.blocks.length-1].text.push(e)}appendStringToTextAtIndex(e,t){let{text:i}=this.blocks[t],n=i[i.length-1];if(n?.type!=="string")return i.push(qd(e));n.string+=e}prependStringToTextAtIndex(e,t){let{text:i}=this.blocks[t],n=i[0];if(n?.type!=="string")return i.unshift(qd(e));n.string=e+n.string}getTextAttributes(e){let t,i={};for(let n in ji){let s=ji[n];if(s.tagName&&ri(e,{matchingSelector:s.tagName,untilNode:this.containerElement}))i[n]=!0;else if(s.parser){if(t=s.parser(e),t){let o=!1;for(let a of this.findBlockElementAncestors(e))if(s.parser(a)===t){o=!0;break}o||(i[n]=t)}}else s.styleProperty&&(t=e.style[s.styleProperty],t&&(i[n]=t))}if(Mi(e)){let n=h0(e,"attributes");for(let s in n)t=n[s],i[s]=t}return i}getBlockAttributes(e){let t=[];for(;e&&e!==this.containerElement;){for(let n in Xe){let s=Xe[n];var i;s.parse!==!1&&Je(e)===s.tagName&&((i=s.test)!==null&&i!==void 0&&i.call(s,e)||!s.test)&&(t.push(n),s.listAttribute&&t.push(s.listAttribute))}e=e.parentNode}return t.reverse()}getBlockHTMLAttributes(e){let t={},i=Object.values(Xe).find(n=>n.tagName===Je(e));return(i?.htmlAttributes||[]).forEach(n=>{e.hasAttribute(n)&&(t[n]=e.getAttribute(n))}),t}findBlockElementAncestors(e){let t=[];for(;e&&e!==this.containerElement;){let i=Je(e);vo().includes(i)&&t.push(e),e=e.parentNode}return t}isBlockElement(e){if(e?.nodeType===Node.ELEMENT_NODE&&!Mi(e)&&!ri(e,{matchingSelector:"td",untilNode:this.containerElement}))return vo().includes(Je(e))||window.getComputedStyle(e).display==="block"}isInsignificantTextNode(e){if(e?.nodeType!==Node.TEXT_NODE||!TL(e.data))return;let{parentNode:t,previousSibling:i,nextSibling:n}=e;return kL(t.previousSibling)&&!this.isBlockElement(t.previousSibling)||f0(t)?void 0:!i||this.isBlockElement(i)||!n||this.isBlockElement(n)}isExtraBR(e){return Je(e)==="br"&&this.isBlockElement(e.parentNode)&&e.parentNode.lastChild===e}needsTableSeparator(e){if(Nl.removeBlankTableCells){var t;let i=(t=e.previousSibling)===null||t===void 0?void 0:t.textContent;return i&&/\S/.test(i)}return e.previousSibling}translateBlockElementMarginsToNewlines(){let e=this.getMarginOfDefaultBlockElement();for(let t=0;t<this.blocks.length;t++){let i=this.getMarginOfBlockElementAtIndex(t);i&&(i.top>2*e.top&&this.prependStringToTextAtIndex(`
`,t),i.bottom>2*e.bottom&&this.appendStringToTextAtIndex(`
`,t))}}getMarginOfBlockElementAtIndex(e){let t=this.blockElements[e];if(t&&t.textContent&&!vo().includes(Je(t))&&!this.processedElements.includes(t))return p0(t)}getMarginOfDefaultBlockElement(){let e=G(Xe.default.tagName);return this.containerElement.appendChild(e),p0(e)}},f0=function(r){let{whiteSpace:e}=window.getComputedStyle(r);return["pre","pre-wrap","pre-line"].includes(e)},kL=r=>r&&!I0(r.textContent),p0=function(r){let e=window.getComputedStyle(r);if(e.display==="block")return{top:parseInt(e.marginTop),bottom:parseInt(e.marginBottom)}},SL=function(r){return Je(r)==="style"?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},CL=r=>r.replace(new RegExp("^".concat(yh.source,"+")),""),TL=r=>new RegExp("^".concat(yh.source,"*$")).test(r),I0=r=>/\s$/.test(r),LL=["contenteditable","data-trix-id","data-trix-store-key","data-trix-mutable","data-trix-placeholder","tabindex"],oh="data-trix-serialized-attributes",RL="[".concat(oh,"]"),NL=new RegExp("<!--block-->","g"),OL={"application/json":function(r){let e;if(r instanceof dt)e=r;else{if(!(r instanceof HTMLElement))throw new Error("unserializable object");e=zi.parse(r.innerHTML).getDocument()}return e.toSerializableDocument().toJSONString()},"text/html":function(r){let e;if(r instanceof dt)e=Wn.render(r);else{if(!(r instanceof HTMLElement))throw new Error("unserializable object");e=r.cloneNode(!0)}return Array.from(e.querySelectorAll("[data-trix-serialize=false]")).forEach(t=>{ii(t)}),LL.forEach(t=>{Array.from(e.querySelectorAll("[".concat(t,"]"))).forEach(i=>{i.removeAttribute(t)})}),Array.from(e.querySelectorAll(RL)).forEach(t=>{try{let i=JSON.parse(t.getAttribute(oh));t.removeAttribute(oh);for(let n in i){let s=i[n];t.setAttribute(n,s)}}catch{}}),e.innerHTML.replace(NL,"")}},PL=Object.freeze({__proto__:null}),fe=class extends be{constructor(e,t){super(...arguments),this.attachmentManager=e,this.attachment=t,this.id=this.attachment.id,this.file=this.attachment.file}remove(){return this.attachmentManager.requestRemovalOfAttachment(this.attachment)}};fe.proxyMethod("attachment.getAttribute"),fe.proxyMethod("attachment.hasAttribute"),fe.proxyMethod("attachment.setAttribute"),fe.proxyMethod("attachment.getAttributes"),fe.proxyMethod("attachment.setAttributes"),fe.proxyMethod("attachment.isPending"),fe.proxyMethod("attachment.isPreviewable"),fe.proxyMethod("attachment.getURL"),fe.proxyMethod("attachment.getHref"),fe.proxyMethod("attachment.getFilename"),fe.proxyMethod("attachment.getFilesize"),fe.proxyMethod("attachment.getFormattedFilesize"),fe.proxyMethod("attachment.getExtension"),fe.proxyMethod("attachment.getContentType"),fe.proxyMethod("attachment.getFile"),fe.proxyMethod("attachment.setFile"),fe.proxyMethod("attachment.releaseFile"),fe.proxyMethod("attachment.getUploadProgress"),fe.proxyMethod("attachment.setUploadProgress");var Hl=class extends be{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];super(...arguments),this.managedAttachments={},Array.from(e).forEach(t=>{this.manageAttachment(t)})}getAttachments(){let e=[];for(let t in this.managedAttachments){let i=this.managedAttachments[t];e.push(i)}return e}manageAttachment(e){return this.managedAttachments[e.id]||(this.managedAttachments[e.id]=new fe(this,e)),this.managedAttachments[e.id]}attachmentIsManaged(e){return e.id in this.managedAttachments}requestRemovalOfAttachment(e){var t,i;if(this.attachmentIsManaged(e))return(t=this.delegate)===null||t===void 0||(i=t.attachmentManagerDidRequestRemovalOfAttachment)===null||i===void 0?void 0:i.call(t,e)}unmanageAttachment(e){let t=this.managedAttachments[e.id];return delete this.managedAttachments[e.id],t}},Ul=class{constructor(e){this.composition=e,this.document=this.composition.document;let t=this.composition.getSelectedRange();this.startPosition=t[0],this.endPosition=t[1],this.startLocation=this.document.locationFromPosition(this.startPosition),this.endLocation=this.document.locationFromPosition(this.endPosition),this.block=this.document.getBlockAtIndex(this.endLocation.index),this.breaksOnReturn=this.block.breaksOnReturn(),this.previousCharacter=this.block.text.getStringAtPosition(this.endLocation.offset-1),this.nextCharacter=this.block.text.getStringAtPosition(this.endLocation.offset)}shouldInsertBlockBreak(){return this.block.hasAttributes()&&this.block.isListItem()&&!this.block.isEmpty()?this.startLocation.offset!==0:this.breaksOnReturn&&this.nextCharacter!==`
`}shouldBreakFormattedBlock(){return this.block.hasAttributes()&&!this.block.isListItem()&&(this.breaksOnReturn&&this.nextCharacter===`
`||this.previousCharacter===`
`)}shouldDecreaseListLevel(){return this.block.hasAttributes()&&this.block.isListItem()&&this.block.isEmpty()}shouldPrependListItem(){return this.block.isListItem()&&this.startLocation.offset===0&&!this.block.isEmpty()}shouldRemoveLastBlockAttribute(){return this.block.hasAttributes()&&!this.block.isListItem()&&this.block.isEmpty()}},Qt=class extends be{constructor(){super(...arguments),this.document=new dt,this.attachments=[],this.currentAttributes={},this.revision=0}setDocument(e){var t,i;if(!e.isEqualTo(this.document))return this.document=e,this.refreshAttachments(),this.revision++,(t=this.delegate)===null||t===void 0||(i=t.compositionDidChangeDocument)===null||i===void 0?void 0:i.call(t,e)}getSnapshot(){return{document:this.document,selectedRange:this.getSelectedRange()}}loadSnapshot(e){var t,i,n,s;let{document:o,selectedRange:a}=e;return(t=this.delegate)===null||t===void 0||(i=t.compositionWillLoadSnapshot)===null||i===void 0||i.call(t),this.setDocument(o??new dt),this.setSelection(a??[0,0]),(n=this.delegate)===null||n===void 0||(s=n.compositionDidLoadSnapshot)===null||s===void 0?void 0:s.call(n)}insertText(e){let{updatePosition:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{updatePosition:!0},i=this.getSelectedRange();this.setDocument(this.document.insertTextAtRange(e,i));let n=i[0],s=n+e.getLength();return t&&this.setSelection(s),this.notifyDelegateOfInsertionAtRange([n,s])}insertBlock(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:new Ot,t=new dt([e]);return this.insertDocument(t)}insertDocument(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:new dt,t=this.getSelectedRange();this.setDocument(this.document.insertDocumentAtRange(e,t));let i=t[0],n=i+e.getLength();return this.setSelection(n),this.notifyDelegateOfInsertionAtRange([i,n])}insertString(e,t){let i=this.getCurrentTextAttributes(),n=Et.textForStringWithAttributes(e,i);return this.insertText(n,t)}insertBlockBreak(){let e=this.getSelectedRange();this.setDocument(this.document.insertBlockBreakAtRange(e));let t=e[0],i=t+1;return this.setSelection(i),this.notifyDelegateOfInsertionAtRange([t,i])}insertLineBreak(){let e=new Ul(this);if(e.shouldDecreaseListLevel())return this.decreaseListLevel(),this.setSelection(e.startPosition);if(e.shouldPrependListItem()){let t=new dt([e.block.copyWithoutText()]);return this.insertDocument(t)}return e.shouldInsertBlockBreak()?this.insertBlockBreak():e.shouldRemoveLastBlockAttribute()?this.removeLastBlockAttribute():e.shouldBreakFormattedBlock()?this.breakFormattedBlock(e):this.insertString(`
`)}insertHTML(e){let t=zi.parse(e).getDocument(),i=this.getSelectedRange();this.setDocument(this.document.mergeDocumentAtRange(t,i));let n=i[0],s=n+t.getLength()-1;return this.setSelection(s),this.notifyDelegateOfInsertionAtRange([n,s])}replaceHTML(e){let t=zi.parse(e).getDocument().copyUsingObjectsFromDocument(this.document),i=this.getLocationRange({strict:!1}),n=this.document.rangeFromLocationRange(i);return this.setDocument(t),this.setSelection(n)}insertFile(e){return this.insertFiles([e])}insertFiles(e){let t=[];return Array.from(e).forEach(i=>{var n;if((n=this.delegate)!==null&&n!==void 0&&n.compositionShouldAcceptFile(i)){let s=ni.attachmentForFile(i);t.push(s)}}),this.insertAttachments(t)}insertAttachment(e){return this.insertAttachments([e])}insertAttachments(e){let t=new Et;return Array.from(e).forEach(i=>{var n;let s=i.getType(),o=(n=fh[s])===null||n===void 0?void 0:n.presentation,a=this.getCurrentTextAttributes();o&&(a.presentation=o);let l=Et.textForAttachmentWithAttributes(i,a);t=t.appendText(l)}),this.insertText(t)}shouldManageDeletingInDirection(e){let t=this.getLocationRange();if(xr(t)){if(e==="backward"&&t[0].offset===0||this.shouldManageMovingCursorInDirection(e))return!0}else if(t[0].index!==t[1].index)return!0;return!1}deleteInDirection(e){let t,i,n,{length:s}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},o=this.getLocationRange(),a=this.getSelectedRange(),l=xr(a);if(l?i=e==="backward"&&o[0].offset===0:n=o[0].index!==o[1].index,i&&this.canDecreaseBlockAttributeLevel()){let c=this.getBlock();if(c.isListItem()?this.decreaseListLevel():this.decreaseBlockAttributeLevel(),this.setSelection(a[0]),c.isEmpty())return!1}return l&&(a=this.getExpandedRangeInDirection(e,{length:s}),e==="backward"&&(t=this.getAttachmentAtRange(a))),t?(this.editAttachment(t),!1):(this.setDocument(this.document.removeTextAtRange(a)),this.setSelection(a[0]),!i&&!n&&void 0)}moveTextFromRange(e){let[t]=Array.from(this.getSelectedRange());return this.setDocument(this.document.moveTextFromRangeToPosition(e,t)),this.setSelection(t)}removeAttachment(e){let t=this.document.getRangeOfAttachment(e);if(t)return this.stopEditingAttachment(),this.setDocument(this.document.removeTextAtRange(t)),this.setSelection(t[0])}removeLastBlockAttribute(){let[e,t]=Array.from(this.getSelectedRange()),i=this.document.getBlockAtPosition(t);return this.removeCurrentAttribute(i.getLastAttribute()),this.setSelection(e)}insertPlaceholder(){return this.placeholderPosition=this.getPosition(),this.insertString(" ")}selectPlaceholder(){if(this.placeholderPosition!=null)return this.setSelectedRange([this.placeholderPosition,this.placeholderPosition+1]),this.getSelectedRange()}forgetPlaceholder(){this.placeholderPosition=null}hasCurrentAttribute(e){let t=this.currentAttributes[e];return t!=null&&t!==!1}toggleCurrentAttribute(e){let t=!this.currentAttributes[e];return t?this.setCurrentAttribute(e,t):this.removeCurrentAttribute(e)}canSetCurrentAttribute(e){return Ae(e)?this.canSetCurrentBlockAttribute(e):this.canSetCurrentTextAttribute(e)}canSetCurrentTextAttribute(e){let t=this.getSelectedDocument();if(t){for(let i of Array.from(t.getAttachments()))if(!i.hasContent())return!1;return!0}}canSetCurrentBlockAttribute(e){let t=this.getBlock();if(t)return!t.isTerminalBlock()}setCurrentAttribute(e,t){return Ae(e)?this.setBlockAttribute(e,t):(this.setTextAttribute(e,t),this.currentAttributes[e]=t,this.notifyDelegateOfCurrentAttributesChange())}setHTMLAtributeAtPosition(e,t,i){var n;let s=this.document.getBlockAtPosition(e),o=(n=Ae(s.getLastAttribute()))===null||n===void 0?void 0:n.htmlAttributes;if(s&&o!=null&&o.includes(t)){let a=this.document.setHTMLAttributeAtPosition(e,t,i);this.setDocument(a)}}setTextAttribute(e,t){let i=this.getSelectedRange();if(!i)return;let[n,s]=Array.from(i);if(n!==s)return this.setDocument(this.document.addAttributeAtRange(e,t,i));if(e==="href"){let o=Et.textForStringWithAttributes(t,{href:t});return this.insertText(o)}}setBlockAttribute(e,t){let i=this.getSelectedRange();if(this.canSetCurrentAttribute(e))return this.setDocument(this.document.applyBlockAttributeAtRange(e,t,i)),this.setSelection(i)}removeCurrentAttribute(e){return Ae(e)?(this.removeBlockAttribute(e),this.updateCurrentAttributes()):(this.removeTextAttribute(e),delete this.currentAttributes[e],this.notifyDelegateOfCurrentAttributesChange())}removeTextAttribute(e){let t=this.getSelectedRange();if(t)return this.setDocument(this.document.removeAttributeAtRange(e,t))}removeBlockAttribute(e){let t=this.getSelectedRange();if(t)return this.setDocument(this.document.removeAttributeAtRange(e,t))}canDecreaseNestingLevel(){var e;return((e=this.getBlock())===null||e===void 0?void 0:e.getNestingLevel())>0}canIncreaseNestingLevel(){var e;let t=this.getBlock();if(t){if((e=Ae(t.getLastNestableAttribute()))===null||e===void 0||!e.listAttribute)return t.getNestingLevel()>0;{let i=this.getPreviousBlock();if(i)return function(){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];return Hi((arguments.length>0&&arguments[0]!==void 0?arguments[0]:[]).slice(0,n.length),n)}(i.getListItemAttributes(),t.getListItemAttributes())}}}decreaseNestingLevel(){let e=this.getBlock();if(e)return this.setDocument(this.document.replaceBlock(e,e.decreaseNestingLevel()))}increaseNestingLevel(){let e=this.getBlock();if(e)return this.setDocument(this.document.replaceBlock(e,e.increaseNestingLevel()))}canDecreaseBlockAttributeLevel(){var e;return((e=this.getBlock())===null||e===void 0?void 0:e.getAttributeLevel())>0}decreaseBlockAttributeLevel(){var e;let t=(e=this.getBlock())===null||e===void 0?void 0:e.getLastAttribute();if(t)return this.removeCurrentAttribute(t)}decreaseListLevel(){let[e]=Array.from(this.getSelectedRange()),{index:t}=this.document.locationFromPosition(e),i=t,n=this.getBlock().getAttributeLevel(),s=this.document.getBlockAtIndex(i+1);for(;s&&s.isListItem()&&!(s.getAttributeLevel()<=n);)i++,s=this.document.getBlockAtIndex(i+1);e=this.document.positionFromLocation({index:t,offset:0});let o=this.document.positionFromLocation({index:i,offset:0});return this.setDocument(this.document.removeLastListAttributeAtRange([e,o]))}updateCurrentAttributes(){let e=this.getSelectedRange({ignoreLock:!0});if(e){let t=this.document.getCommonAttributesAtRange(e);if(Array.from(eh()).forEach(i=>{t[i]||this.canSetCurrentAttribute(i)||(t[i]=!1)}),!Jn(t,this.currentAttributes))return this.currentAttributes=t,this.notifyDelegateOfCurrentAttributesChange()}}getCurrentAttributes(){return E0.call({},this.currentAttributes)}getCurrentTextAttributes(){let e={};for(let t in this.currentAttributes){let i=this.currentAttributes[t];i!==!1&&th(t)&&(e[t]=i)}return e}freezeSelection(){return this.setCurrentAttribute("frozen",!0)}thawSelection(){return this.removeCurrentAttribute("frozen")}hasFrozenSelection(){return this.hasCurrentAttribute("frozen")}setSelection(e){var t;let i=this.document.locationRangeFromRange(e);return(t=this.delegate)===null||t===void 0?void 0:t.compositionDidRequestChangingSelectionToLocationRange(i)}getSelectedRange(){let e=this.getLocationRange();if(e)return this.document.rangeFromLocationRange(e)}setSelectedRange(e){let t=this.document.locationRangeFromRange(e);return this.getSelectionManager().setLocationRange(t)}getPosition(){let e=this.getLocationRange();if(e)return this.document.positionFromLocation(e[0])}getLocationRange(e){return this.targetLocationRange?this.targetLocationRange:this.getSelectionManager().getLocationRange(e)||Y({index:0,offset:0})}withTargetLocationRange(e,t){let i;this.targetLocationRange=e;try{i=t()}finally{this.targetLocationRange=null}return i}withTargetRange(e,t){let i=this.document.locationRangeFromRange(e);return this.withTargetLocationRange(i,t)}withTargetDOMRange(e,t){let i=this.createLocationRangeFromDOMRange(e,{strict:!1});return this.withTargetLocationRange(i,t)}getExpandedRangeInDirection(e){let{length:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},[i,n]=Array.from(this.getSelectedRange());return e==="backward"?t?i-=t:i=this.translateUTF16PositionFromOffset(i,-1):t?n+=t:n=this.translateUTF16PositionFromOffset(n,1),Y([i,n])}shouldManageMovingCursorInDirection(e){if(this.editingAttachment)return!0;let t=this.getExpandedRangeInDirection(e);return this.getAttachmentAtRange(t)!=null}moveCursorInDirection(e){let t,i;if(this.editingAttachment)i=this.document.getRangeOfAttachment(this.editingAttachment);else{let n=this.getSelectedRange();i=this.getExpandedRangeInDirection(e),t=!Dl(n,i)}if(e==="backward"?this.setSelectedRange(i[0]):this.setSelectedRange(i[1]),t){let n=this.getAttachmentAtRange(i);if(n)return this.editAttachment(n)}}expandSelectionInDirection(e){let{length:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},i=this.getExpandedRangeInDirection(e,{length:t});return this.setSelectedRange(i)}expandSelectionForEditing(){if(this.hasCurrentAttribute("href"))return this.expandSelectionAroundCommonAttribute("href")}expandSelectionAroundCommonAttribute(e){let t=this.getPosition(),i=this.document.getRangeOfCommonAttributeAtPosition(e,t);return this.setSelectedRange(i)}selectionContainsAttachments(){var e;return((e=this.getSelectedAttachments())===null||e===void 0?void 0:e.length)>0}selectionIsInCursorTarget(){return this.editingAttachment||this.positionIsCursorTarget(this.getPosition())}positionIsCursorTarget(e){let t=this.document.locationFromPosition(e);if(t)return this.locationIsCursorTarget(t)}positionIsBlockBreak(e){var t;return(t=this.document.getPieceAtPosition(e))===null||t===void 0?void 0:t.isBlockBreak()}getSelectedDocument(){let e=this.getSelectedRange();if(e)return this.document.getDocumentAtRange(e)}getSelectedAttachments(){var e;return(e=this.getSelectedDocument())===null||e===void 0?void 0:e.getAttachments()}getAttachments(){return this.attachments.slice(0)}refreshAttachments(){let e=this.document.getAttachments(),{added:t,removed:i}=function(){let n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[],o=[],a=[],l=new Set;n.forEach(f=>{l.add(f)});let c=new Set;return s.forEach(f=>{c.add(f),l.has(f)||o.push(f)}),n.forEach(f=>{c.has(f)||a.push(f)}),{added:o,removed:a}}(this.attachments,e);return this.attachments=e,Array.from(i).forEach(n=>{var s,o;n.delegate=null,(s=this.delegate)===null||s===void 0||(o=s.compositionDidRemoveAttachment)===null||o===void 0||o.call(s,n)}),(()=>{let n=[];return Array.from(t).forEach(s=>{var o,a;s.delegate=this,n.push((o=this.delegate)===null||o===void 0||(a=o.compositionDidAddAttachment)===null||a===void 0?void 0:a.call(o,s))}),n})()}attachmentDidChangeAttributes(e){var t,i;return this.revision++,(t=this.delegate)===null||t===void 0||(i=t.compositionDidEditAttachment)===null||i===void 0?void 0:i.call(t,e)}attachmentDidChangePreviewURL(e){var t,i;return this.revision++,(t=this.delegate)===null||t===void 0||(i=t.compositionDidChangeAttachmentPreviewURL)===null||i===void 0?void 0:i.call(t,e)}editAttachment(e,t){var i,n;if(e!==this.editingAttachment)return this.stopEditingAttachment(),this.editingAttachment=e,(i=this.delegate)===null||i===void 0||(n=i.compositionDidStartEditingAttachment)===null||n===void 0?void 0:n.call(i,this.editingAttachment,t)}stopEditingAttachment(){var e,t;this.editingAttachment&&((e=this.delegate)===null||e===void 0||(t=e.compositionDidStopEditingAttachment)===null||t===void 0||t.call(e,this.editingAttachment),this.editingAttachment=null)}updateAttributesForAttachment(e,t){return this.setDocument(this.document.updateAttributesForAttachment(e,t))}removeAttributeForAttachment(e,t){return this.setDocument(this.document.removeAttributeForAttachment(e,t))}breakFormattedBlock(e){let{document:t}=e,{block:i}=e,n=e.startPosition,s=[n-1,n];i.getBlockBreakPosition()===e.startLocation.offset?(i.breaksOnReturn()&&e.nextCharacter===`
`?n+=1:t=t.removeTextAtRange(s),s=[n,n]):e.nextCharacter===`
`?e.previousCharacter===`
`?s=[n-1,n+1]:(s=[n,n+1],n+=1):e.startLocation.offset-1!=0&&(n+=1);let o=new dt([i.removeLastAttribute().copyWithoutText()]);return this.setDocument(t.insertDocumentAtRange(o,s)),this.setSelection(n)}getPreviousBlock(){let e=this.getLocationRange();if(e){let{index:t}=e[0];if(t>0)return this.document.getBlockAtIndex(t-1)}}getBlock(){let e=this.getLocationRange();if(e)return this.document.getBlockAtIndex(e[0].index)}getAttachmentAtRange(e){let t=this.document.getDocumentAtRange(e);if(t.toString()==="".concat("\uFFFC",`
`))return t.getAttachments()[0]}notifyDelegateOfCurrentAttributesChange(){var e,t;return(e=this.delegate)===null||e===void 0||(t=e.compositionDidChangeCurrentAttributes)===null||t===void 0?void 0:t.call(e,this.currentAttributes)}notifyDelegateOfInsertionAtRange(e){var t,i;return(t=this.delegate)===null||t===void 0||(i=t.compositionDidPerformInsertionAtRange)===null||i===void 0?void 0:i.call(t,e)}translateUTF16PositionFromOffset(e,t){let i=this.document.toUTF16String(),n=i.offsetFromUCS2Offset(e);return i.offsetToUCS2Offset(n+t)}};Qt.proxyMethod("getSelectionManager().getPointRange"),Qt.proxyMethod("getSelectionManager().setLocationRangeFromPointRange"),Qt.proxyMethod("getSelectionManager().createLocationRangeFromDOMRange"),Qt.proxyMethod("getSelectionManager().locationIsCursorTarget"),Qt.proxyMethod("getSelectionManager().selectionIsExpanded"),Qt.proxyMethod("delegate?.getSelectionManager");var ko=class extends be{constructor(e){super(...arguments),this.composition=e,this.undoEntries=[],this.redoEntries=[]}recordUndoEntry(e){let{context:t,consolidatable:i}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=this.undoEntries.slice(-1)[0];if(!i||!DL(n,e,t)){let s=this.createEntry({description:e,context:t});this.undoEntries.push(s),this.redoEntries=[]}}undo(){let e=this.undoEntries.pop();if(e){let t=this.createEntry(e);return this.redoEntries.push(t),this.composition.loadSnapshot(e.snapshot)}}redo(){let e=this.redoEntries.pop();if(e){let t=this.createEntry(e);return this.undoEntries.push(t),this.composition.loadSnapshot(e.snapshot)}}canUndo(){return this.undoEntries.length>0}canRedo(){return this.redoEntries.length>0}createEntry(){let{description:e,context:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return{description:e?.toString(),context:JSON.stringify(t),snapshot:this.composition.getSnapshot()}}},DL=(r,e,t)=>r?.description===e?.toString()&&r?.context===JSON.stringify(t),Hd="attachmentGallery",zl=class{constructor(e){this.document=e.document,this.selectedRange=e.selectedRange}perform(){return this.removeBlockAttribute(),this.applyBlockAttribute()}getSnapshot(){return{document:this.document,selectedRange:this.selectedRange}}removeBlockAttribute(){return this.findRangesOfBlocks().map(e=>this.document=this.document.removeAttributeAtRange(Hd,e))}applyBlockAttribute(){let e=0;this.findRangesOfPieces().forEach(t=>{t[1]-t[0]>1&&(t[0]+=e,t[1]+=e,this.document.getCharacterAtPosition(t[1])!==`
`&&(this.document=this.document.insertBlockBreakAtRange(t[1]),t[1]<this.selectedRange[1]&&this.moveSelectedRangeForward(),t[1]++,e++),t[0]!==0&&this.document.getCharacterAtPosition(t[0]-1)!==`
`&&(this.document=this.document.insertBlockBreakAtRange(t[0]),t[0]<this.selectedRange[0]&&this.moveSelectedRangeForward(),t[0]++,e++),this.document=this.document.applyBlockAttributeAtRange(Hd,!0,t))})}findRangesOfBlocks(){return this.document.findRangesForBlockAttribute(Hd)}findRangesOfPieces(){return this.document.findRangesForTextAttribute("presentation",{withValue:"gallery"})}moveSelectedRangeForward(){this.selectedRange[0]+=1,this.selectedRange[1]+=1}},M0=function(r){let e=new zl(r);return e.perform(),e.getSnapshot()},IL=[M0],$l=class{constructor(e,t,i){this.insertFiles=this.insertFiles.bind(this),this.composition=e,this.selectionManager=t,this.element=i,this.undoManager=new ko(this.composition),this.filters=IL.slice(0)}loadDocument(e){return this.loadSnapshot({document:e,selectedRange:[0,0]})}loadHTML(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",t=zi.parse(e,{referenceElement:this.element}).getDocument();return this.loadDocument(t)}loadJSON(e){let{document:t,selectedRange:i}=e;return t=dt.fromJSON(t),this.loadSnapshot({document:t,selectedRange:i})}loadSnapshot(e){return this.undoManager=new ko(this.composition),this.composition.loadSnapshot(e)}getDocument(){return this.composition.document}getSelectedDocument(){return this.composition.getSelectedDocument()}getSnapshot(){return this.composition.getSnapshot()}toJSON(){return this.getSnapshot()}deleteInDirection(e){return this.composition.deleteInDirection(e)}insertAttachment(e){return this.composition.insertAttachment(e)}insertAttachments(e){return this.composition.insertAttachments(e)}insertDocument(e){return this.composition.insertDocument(e)}insertFile(e){return this.composition.insertFile(e)}insertFiles(e){return this.composition.insertFiles(e)}insertHTML(e){return this.composition.insertHTML(e)}insertString(e){return this.composition.insertString(e)}insertText(e){return this.composition.insertText(e)}insertLineBreak(){return this.composition.insertLineBreak()}getSelectedRange(){return this.composition.getSelectedRange()}getPosition(){return this.composition.getPosition()}getClientRectAtPosition(e){let t=this.getDocument().locationRangeFromRange([e,e+1]);return this.selectionManager.getClientRectAtLocationRange(t)}expandSelectionInDirection(e){return this.composition.expandSelectionInDirection(e)}moveCursorInDirection(e){return this.composition.moveCursorInDirection(e)}setSelectedRange(e){return this.composition.setSelectedRange(e)}activateAttribute(e){let t=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1];return this.composition.setCurrentAttribute(e,t)}attributeIsActive(e){return this.composition.hasCurrentAttribute(e)}canActivateAttribute(e){return this.composition.canSetCurrentAttribute(e)}deactivateAttribute(e){return this.composition.removeCurrentAttribute(e)}setHTMLAtributeAtPosition(e,t,i){this.composition.setHTMLAtributeAtPosition(e,t,i)}canDecreaseNestingLevel(){return this.composition.canDecreaseNestingLevel()}canIncreaseNestingLevel(){return this.composition.canIncreaseNestingLevel()}decreaseNestingLevel(){if(this.canDecreaseNestingLevel())return this.composition.decreaseNestingLevel()}increaseNestingLevel(){if(this.canIncreaseNestingLevel())return this.composition.increaseNestingLevel()}canRedo(){return this.undoManager.canRedo()}canUndo(){return this.undoManager.canUndo()}recordUndoEntry(e){let{context:t,consolidatable:i}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.undoManager.recordUndoEntry(e,{context:t,consolidatable:i})}redo(){if(this.canRedo())return this.undoManager.redo()}undo(){if(this.canUndo())return this.undoManager.undo()}},Vl=class{constructor(e){this.element=e}findLocationFromContainerAndOffset(e,t){let{strict:i}=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{strict:!0},n=0,s=!1,o={index:0,offset:0},a=this.findAttachmentElementParentForNode(e);a&&(e=a.parentNode,t=Nd(a));let l=Pl(this.element,{usingFilter:B0});for(;l.nextNode();){let c=l.currentNode;if(c===e&&yo(e)){zn(c)||(o.offset+=t);break}if(c.parentNode===e){if(n++===t)break}else if(!Di(e,c)&&n>0)break;Xv(c,{strict:i})?(s&&o.index++,o.offset=0,s=!0):o.offset+=Ud(c)}return o}findContainerAndOffsetFromLocation(e){let t,i;if(e.index===0&&e.offset===0){for(t=this.element,i=0;t.firstChild;)if(t=t.firstChild,Od(t)){i=1;break}return[t,i]}let[n,s]=this.findNodeAndOffsetFromLocation(e);if(n){if(yo(n))Ud(n)===0?(t=n.parentNode.parentNode,i=Nd(n.parentNode),zn(n,{name:"right"})&&i++):(t=n,i=e.offset-s);else{if(t=n.parentNode,!Xv(n.previousSibling)&&!Od(t))for(;n===t.lastChild&&(n=t,t=t.parentNode,!Od(t)););i=Nd(n),e.offset!==0&&i++}return[t,i]}}findNodeAndOffsetFromLocation(e){let t,i,n=0;for(let s of this.getSignificantNodesForIndex(e.index)){let o=Ud(s);if(e.offset<=n+o)if(yo(s)){if(t=s,i=n,e.offset===i&&zn(t))break}else t||(t=s,i=n);if(n+=o,n>e.offset)break}return[t,i]}findAttachmentElementParentForNode(e){for(;e&&e!==this.element;){if(Mi(e))return e;e=e.parentNode}}getSignificantNodesForIndex(e){let t=[],i=Pl(this.element,{usingFilter:ML}),n=!1;for(;i.nextNode();){let o=i.currentNode;var s;if(Un(o)){if(s!=null?s++:s=0,s===e)n=!0;else if(n)break}else n&&t.push(o)}return t}},Ud=function(r){return r.nodeType===Node.TEXT_NODE?zn(r)?0:r.textContent.length:Je(r)==="br"||Mi(r)?1:0},ML=function(r){return BL(r)===NodeFilter.FILTER_ACCEPT?B0(r):NodeFilter.FILTER_REJECT},BL=function(r){return _0(r)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},B0=function(r){return Mi(r.parentNode)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},Wl=class{createDOMRangeFromPoint(e){let t,{x:i,y:n}=e;if(document.caretPositionFromPoint){let{offsetNode:s,offset:o}=document.caretPositionFromPoint(i,n);return t=document.createRange(),t.setStart(s,o),t}if(document.caretRangeFromPoint)return document.caretRangeFromPoint(i,n);if(document.body.createTextRange){let s=wo();try{let o=document.body.createTextRange();o.moveToPoint(i,n),o.select()}catch{}return t=wo(),N0(s),t}}getClientRectsForDOMRange(e){let t=Array.from(e.getClientRects());return[t[0],t[t.length-1]]}},Er=class extends be{constructor(e){super(...arguments),this.didMouseDown=this.didMouseDown.bind(this),this.selectionDidChange=this.selectionDidChange.bind(this),this.element=e,this.locationMapper=new Vl(this.element),this.pointMapper=new Wl,this.lockCount=0,pe("mousedown",{onElement:this.element,withCallback:this.didMouseDown})}getLocationRange(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return e.strict===!1?this.createLocationRangeFromDOMRange(wo()):e.ignoreLock?this.currentLocationRange:this.lockedLocationRange?this.lockedLocationRange:this.currentLocationRange}setLocationRange(e){if(this.lockedLocationRange)return;e=Y(e);let t=this.createDOMRangeFromLocationRange(e);t&&(N0(t),this.updateCurrentLocationRange(e))}setLocationRangeFromPointRange(e){e=Y(e);let t=this.getLocationAtPoint(e[0]),i=this.getLocationAtPoint(e[1]);this.setLocationRange([t,i])}getClientRectAtLocationRange(e){let t=this.createDOMRangeFromLocationRange(e);if(t)return this.getClientRectsForDOMRange(t)[1]}locationIsCursorTarget(e){let t=Array.from(this.findNodeAndOffsetFromLocation(e))[0];return zn(t)}lock(){this.lockCount++==0&&(this.updateCurrentLocationRange(),this.lockedLocationRange=this.getLocationRange())}unlock(){if(--this.lockCount==0){let{lockedLocationRange:e}=this;if(this.lockedLocationRange=null,e!=null)return this.setLocationRange(e)}}clearSelection(){var e;return(e=R0())===null||e===void 0?void 0:e.removeAllRanges()}selectionIsCollapsed(){var e;return((e=wo())===null||e===void 0?void 0:e.collapsed)===!0}selectionIsExpanded(){return!this.selectionIsCollapsed()}createLocationRangeFromDOMRange(e,t){if(e==null||!this.domRangeWithinElement(e))return;let i=this.findLocationFromContainerAndOffset(e.startContainer,e.startOffset,t);if(!i)return;let n=e.collapsed?void 0:this.findLocationFromContainerAndOffset(e.endContainer,e.endOffset,t);return Y([i,n])}didMouseDown(){return this.pauseTemporarily()}pauseTemporarily(){let e;this.paused=!0;let t=()=>{if(this.paused=!1,clearTimeout(i),Array.from(e).forEach(n=>{n.destroy()}),Di(document,this.element))return this.selectionDidChange()},i=setTimeout(t,200);e=["mousemove","keydown"].map(n=>pe(n,{onElement:document,withCallback:t}))}selectionDidChange(){if(!this.paused&&!mh(this.element))return this.updateCurrentLocationRange()}updateCurrentLocationRange(e){var t,i;if((e??(e=this.createLocationRangeFromDOMRange(wo())))&&!Dl(e,this.currentLocationRange))return this.currentLocationRange=e,(t=this.delegate)===null||t===void 0||(i=t.locationRangeDidChange)===null||i===void 0?void 0:i.call(t,this.currentLocationRange.slice(0))}createDOMRangeFromLocationRange(e){let t=this.findContainerAndOffsetFromLocation(e[0]),i=xr(e)?t:this.findContainerAndOffsetFromLocation(e[1])||t;if(t!=null&&i!=null){let n=document.createRange();return n.setStart(...Array.from(t||[])),n.setEnd(...Array.from(i||[])),n}}getLocationAtPoint(e){let t=this.createDOMRangeFromPoint(e);var i;if(t)return(i=this.createLocationRangeFromDOMRange(t))===null||i===void 0?void 0:i[0]}domRangeWithinElement(e){return e.collapsed?Di(this.element,e.startContainer):Di(this.element,e.startContainer)&&Di(this.element,e.endContainer)}};Er.proxyMethod("locationMapper.findLocationFromContainerAndOffset"),Er.proxyMethod("locationMapper.findContainerAndOffsetFromLocation"),Er.proxyMethod("locationMapper.findNodeAndOffsetFromLocation"),Er.proxyMethod("pointMapper.createDOMRangeFromPoint"),Er.proxyMethod("pointMapper.getClientRectsForDOMRange");var F0=Object.freeze({__proto__:null,Attachment:ni,AttachmentManager:Hl,AttachmentPiece:si,Block:Ot,Composition:Qt,Document:dt,Editor:$l,HTMLParser:zi,HTMLSanitizer:Vn,LineBreakInsertion:Ul,LocationMapper:Vl,ManagedAttachment:fe,Piece:Sr,PointMapper:Wl,SelectionManager:Er,SplittableList:Kn,StringPiece:_o,Text:Et,UndoManager:ko}),FL=Object.freeze({__proto__:null,ObjectView:kr,AttachmentView:xo,BlockView:jl,DocumentView:Wn,PieceView:Bl,PreviewableAttachmentView:Ml,TextView:Fl}),{lang:zd,css:Pi,keyNames:jL}=To,$d=function(r){return function(){let e=r.apply(this,arguments);e.do(),this.undos||(this.undos=[]),this.undos.push(e.undo)}},Kl=class extends be{constructor(e,t,i){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{};super(...arguments),ht(this,"makeElementMutable",$d(()=>({do:()=>{this.element.dataset.trixMutable=!0},undo:()=>delete this.element.dataset.trixMutable}))),ht(this,"addToolbar",$d(()=>{let s=G({tagName:"div",className:Pi.attachmentToolbar,data:{trixMutable:!0},childNodes:G({tagName:"div",className:"trix-button-row",childNodes:G({tagName:"span",className:"trix-button-group trix-button-group--actions",childNodes:G({tagName:"button",className:"trix-button trix-button--remove",textContent:zd.remove,attributes:{title:zd.remove},data:{trixAction:"remove"}})})})});return this.attachment.isPreviewable()&&s.appendChild(G({tagName:"div",className:Pi.attachmentMetadataContainer,childNodes:G({tagName:"span",className:Pi.attachmentMetadata,childNodes:[G({tagName:"span",className:Pi.attachmentName,textContent:this.attachment.getFilename(),attributes:{title:this.attachment.getFilename()}}),G({tagName:"span",className:Pi.attachmentSize,textContent:this.attachment.getFormattedFilesize()})]})})),pe("click",{onElement:s,withCallback:this.didClickToolbar}),pe("click",{onElement:s,matchingSelector:"[data-trix-action]",withCallback:this.didClickActionButton}),bo("trix-attachment-before-toolbar",{onElement:this.element,attributes:{toolbar:s,attachment:this.attachment}}),{do:()=>this.element.appendChild(s),undo:()=>ii(s)}})),ht(this,"installCaptionEditor",$d(()=>{let s=G({tagName:"textarea",className:Pi.attachmentCaptionEditor,attributes:{placeholder:zd.captionPlaceholder},data:{trixMutable:!0}});s.value=this.attachmentPiece.getCaption();let o=s.cloneNode();o.classList.add("trix-autoresize-clone"),o.tabIndex=-1;let a=function(){o.value=s.value,s.style.height=o.scrollHeight+"px"};pe("input",{onElement:s,withCallback:a}),pe("input",{onElement:s,withCallback:this.didInputCaption}),pe("keydown",{onElement:s,withCallback:this.didKeyDownCaption}),pe("change",{onElement:s,withCallback:this.didChangeCaption}),pe("blur",{onElement:s,withCallback:this.didBlurCaption});let l=this.element.querySelector("figcaption"),c=l.cloneNode();return{do:()=>{if(l.style.display="none",c.appendChild(s),c.appendChild(o),c.classList.add("".concat(Pi.attachmentCaption,"--editing")),l.parentElement.insertBefore(c,l),a(),this.options.editCaption)return vh(()=>s.focus())},undo(){ii(c),l.style.display=null}}})),this.didClickToolbar=this.didClickToolbar.bind(this),this.didClickActionButton=this.didClickActionButton.bind(this),this.didKeyDownCaption=this.didKeyDownCaption.bind(this),this.didInputCaption=this.didInputCaption.bind(this),this.didChangeCaption=this.didChangeCaption.bind(this),this.didBlurCaption=this.didBlurCaption.bind(this),this.attachmentPiece=e,this.element=t,this.container=i,this.options=n,this.attachment=this.attachmentPiece.attachment,Je(this.element)==="a"&&(this.element=this.element.firstChild),this.install()}install(){this.makeElementMutable(),this.addToolbar(),this.attachment.isPreviewable()&&this.installCaptionEditor()}uninstall(){var e;let t=this.undos.pop();for(this.savePendingCaption();t;)t(),t=this.undos.pop();(e=this.delegate)===null||e===void 0||e.didUninstallAttachmentEditor(this)}savePendingCaption(){if(this.pendingCaption!=null){let s=this.pendingCaption;var e,t,i,n;this.pendingCaption=null,s?(e=this.delegate)===null||e===void 0||(t=e.attachmentEditorDidRequestUpdatingAttributesForAttachment)===null||t===void 0||t.call(e,{caption:s},this.attachment):(i=this.delegate)===null||i===void 0||(n=i.attachmentEditorDidRequestRemovingAttributeForAttachment)===null||n===void 0||n.call(i,"caption",this.attachment)}}didClickToolbar(e){return e.preventDefault(),e.stopPropagation()}didClickActionButton(e){var t;if(e.target.getAttribute("data-trix-action")==="remove")return(t=this.delegate)===null||t===void 0?void 0:t.attachmentEditorDidRequestRemovalOfAttachment(this.attachment)}didKeyDownCaption(e){var t,i;if(jL[e.keyCode]==="return")return e.preventDefault(),this.savePendingCaption(),(t=this.delegate)===null||t===void 0||(i=t.attachmentEditorDidRequestDeselectingAttachment)===null||i===void 0?void 0:i.call(t,this.attachment)}didInputCaption(e){this.pendingCaption=e.target.value.replace(/\s/g," ").trim()}didChangeCaption(e){return this.savePendingCaption()}didBlurCaption(e){return this.savePendingCaption()}},Gl=class extends be{constructor(e,t){super(...arguments),this.didFocus=this.didFocus.bind(this),this.didBlur=this.didBlur.bind(this),this.didClickAttachment=this.didClickAttachment.bind(this),this.element=e,this.composition=t,this.documentView=new Wn(this.composition.document,{element:this.element}),pe("focus",{onElement:this.element,withCallback:this.didFocus}),pe("blur",{onElement:this.element,withCallback:this.didBlur}),pe("click",{onElement:this.element,matchingSelector:"a[contenteditable=false]",preventDefault:!0}),pe("mousedown",{onElement:this.element,matchingSelector:Ii,withCallback:this.didClickAttachment}),pe("click",{onElement:this.element,matchingSelector:"a".concat(Ii),preventDefault:!0})}didFocus(e){var t;let i=()=>{var n,s;if(!this.focused)return this.focused=!0,(n=this.delegate)===null||n===void 0||(s=n.compositionControllerDidFocus)===null||s===void 0?void 0:s.call(n)};return((t=this.blurPromise)===null||t===void 0?void 0:t.then(i))||i()}didBlur(e){this.blurPromise=new Promise(t=>vh(()=>{var i,n;return mh(this.element)||(this.focused=null,(i=this.delegate)===null||i===void 0||(n=i.compositionControllerDidBlur)===null||n===void 0||n.call(i)),this.blurPromise=null,t()}))}didClickAttachment(e,t){var i,n;let s=this.findAttachmentForElement(t),o=!!ri(e.target,{matchingSelector:"figcaption"});return(i=this.delegate)===null||i===void 0||(n=i.compositionControllerDidSelectAttachment)===null||n===void 0?void 0:n.call(i,s,{editCaption:o})}getSerializableElement(){return this.isEditingAttachment()?this.documentView.shadowElement:this.element}render(){var e,t,i,n,s,o;return this.revision!==this.composition.revision&&(this.documentView.setDocument(this.composition.document),this.documentView.render(),this.revision=this.composition.revision),this.canSyncDocumentView()&&!this.documentView.isSynced()&&((i=this.delegate)===null||i===void 0||(n=i.compositionControllerWillSyncDocumentView)===null||n===void 0||n.call(i),this.documentView.sync(),(s=this.delegate)===null||s===void 0||(o=s.compositionControllerDidSyncDocumentView)===null||o===void 0||o.call(s)),(e=this.delegate)===null||e===void 0||(t=e.compositionControllerDidRender)===null||t===void 0?void 0:t.call(e)}rerenderViewForObject(e){return this.invalidateViewForObject(e),this.render()}invalidateViewForObject(e){return this.documentView.invalidateViewForObject(e)}isViewCachingEnabled(){return this.documentView.isViewCachingEnabled()}enableViewCaching(){return this.documentView.enableViewCaching()}disableViewCaching(){return this.documentView.disableViewCaching()}refreshViewCache(){return this.documentView.garbageCollectCachedViews()}isEditingAttachment(){return!!this.attachmentEditor}installAttachmentEditorForAttachment(e,t){var i;if(((i=this.attachmentEditor)===null||i===void 0?void 0:i.attachment)===e)return;let n=this.documentView.findElementForObject(e);if(!n)return;this.uninstallAttachmentEditor();let s=this.composition.document.getAttachmentPieceForAttachment(e);this.attachmentEditor=new Kl(s,n,this.element,t),this.attachmentEditor.delegate=this}uninstallAttachmentEditor(){var e;return(e=this.attachmentEditor)===null||e===void 0?void 0:e.uninstall()}didUninstallAttachmentEditor(){return this.attachmentEditor=null,this.render()}attachmentEditorDidRequestUpdatingAttributesForAttachment(e,t){var i,n;return(i=this.delegate)===null||i===void 0||(n=i.compositionControllerWillUpdateAttachment)===null||n===void 0||n.call(i,t),this.composition.updateAttributesForAttachment(e,t)}attachmentEditorDidRequestRemovingAttributeForAttachment(e,t){var i,n;return(i=this.delegate)===null||i===void 0||(n=i.compositionControllerWillUpdateAttachment)===null||n===void 0||n.call(i,t),this.composition.removeAttributeForAttachment(e,t)}attachmentEditorDidRequestRemovalOfAttachment(e){var t,i;return(t=this.delegate)===null||t===void 0||(i=t.compositionControllerDidRequestRemovalOfAttachment)===null||i===void 0?void 0:i.call(t,e)}attachmentEditorDidRequestDeselectingAttachment(e){var t,i;return(t=this.delegate)===null||t===void 0||(i=t.compositionControllerDidRequestDeselectingAttachment)===null||i===void 0?void 0:i.call(t,e)}canSyncDocumentView(){return!this.isEditingAttachment()}findAttachmentForElement(e){return this.composition.document.getAttachmentById(parseInt(e.dataset.trixId,10))}},Jl=class extends be{},j0="data-trix-mutable",qL="[".concat(j0,"]"),HL={attributes:!0,childList:!0,characterData:!0,characterDataOldValue:!0,subtree:!0},Xl=class extends be{constructor(e){super(e),this.didMutate=this.didMutate.bind(this),this.element=e,this.observer=new window.MutationObserver(this.didMutate),this.start()}start(){return this.reset(),this.observer.observe(this.element,HL)}stop(){return this.observer.disconnect()}didMutate(e){var t,i;if(this.mutations.push(...Array.from(this.findSignificantMutations(e)||[])),this.mutations.length)return(t=this.delegate)===null||t===void 0||(i=t.elementDidMutate)===null||i===void 0||i.call(t,this.getMutationSummary()),this.reset()}reset(){this.mutations=[]}findSignificantMutations(e){return e.filter(t=>this.mutationIsSignificant(t))}mutationIsSignificant(e){if(this.nodeIsMutable(e.target))return!1;for(let t of Array.from(this.nodesModifiedByMutation(e)))if(this.nodeIsSignificant(t))return!0;return!1}nodeIsSignificant(e){return e!==this.element&&!this.nodeIsMutable(e)&&!_0(e)}nodeIsMutable(e){return ri(e,{matchingSelector:qL})}nodesModifiedByMutation(e){let t=[];switch(e.type){case"attributes":e.attributeName!==j0&&t.push(e.target);break;case"characterData":t.push(e.target.parentNode),t.push(e.target);break;case"childList":t.push(...Array.from(e.addedNodes||[])),t.push(...Array.from(e.removedNodes||[]))}return t}getMutationSummary(){return this.getTextMutationSummary()}getTextMutationSummary(){let{additions:e,deletions:t}=this.getTextChangesFromCharacterData(),i=this.getTextChangesFromChildList();Array.from(i.additions).forEach(a=>{Array.from(e).includes(a)||e.push(a)}),t.push(...Array.from(i.deletions||[]));let n={},s=e.join("");s&&(n.textAdded=s);let o=t.join("");return o&&(n.textDeleted=o),n}getMutationsByType(e){return Array.from(this.mutations).filter(t=>t.type===e)}getTextChangesFromChildList(){let e,t,i=[],n=[];return Array.from(this.getMutationsByType("childList")).forEach(s=>{i.push(...Array.from(s.addedNodes||[])),n.push(...Array.from(s.removedNodes||[]))}),i.length===0&&n.length===1&&Un(n[0])?(e=[],t=[`
`]):(e=ah(i),t=ah(n)),{additions:e.filter((s,o)=>s!==t[o]).map(go),deletions:t.filter((s,o)=>s!==e[o]).map(go)}}getTextChangesFromCharacterData(){let e,t,i=this.getMutationsByType("characterData");if(i.length){let n=i[0],s=i[i.length-1],o=function(a,l){let c,f;return a=qi.box(a),(l=qi.box(l)).length<a.length?[f,c]=r0(a,l):[c,f]=r0(l,a),{added:c,removed:f}}(go(n.oldValue),go(s.target.data));e=o.added,t=o.removed}return{additions:e?[e]:[],deletions:t?[t]:[]}}},ah=function(){let r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],e=[];for(let t of Array.from(r))switch(t.nodeType){case Node.TEXT_NODE:e.push(t.data);break;case Node.ELEMENT_NODE:Je(t)==="br"?e.push(`
`):e.push(...Array.from(ah(t.childNodes)||[]))}return e},Yl=class extends $n{constructor(e){super(...arguments),this.file=e}perform(e){let t=new FileReader;return t.onerror=()=>e(!1),t.onload=()=>{t.onerror=null;try{t.abort()}catch{}return e(!0,this.file)},t.readAsArrayBuffer(this.file)}},lh=class{constructor(e){this.element=e}shouldIgnore(e){return!!Co.samsungAndroid&&(this.previousEvent=this.event,this.event=e,this.checkSamsungKeyboardBuggyModeStart(),this.checkSamsungKeyboardBuggyModeEnd(),this.buggyMode)}checkSamsungKeyboardBuggyModeStart(){this.insertingLongTextAfterUnidentifiedChar()&&UL(this.element.innerText,this.event.data)&&(this.buggyMode=!0,this.event.preventDefault())}checkSamsungKeyboardBuggyModeEnd(){this.buggyMode&&this.event.inputType!=="insertText"&&(this.buggyMode=!1)}insertingLongTextAfterUnidentifiedChar(){var e;return this.isBeforeInputInsertText()&&this.previousEventWasUnidentifiedKeydown()&&((e=this.event.data)===null||e===void 0?void 0:e.length)>50}isBeforeInputInsertText(){return this.event.type==="beforeinput"&&this.event.inputType==="insertText"}previousEventWasUnidentifiedKeydown(){var e,t;return((e=this.previousEvent)===null||e===void 0?void 0:e.type)==="keydown"&&((t=this.previousEvent)===null||t===void 0?void 0:t.key)==="Unidentified"}},UL=(r,e)=>m0(r)===m0(e),zL=new RegExp("(".concat("\uFFFC","|").concat(eu,"|").concat(ti,"|\\s)+"),"g"),m0=r=>r.replace(zL," ").trim(),Gn=class extends be{constructor(e){super(...arguments),this.element=e,this.mutationObserver=new Xl(this.element),this.mutationObserver.delegate=this,this.flakyKeyboardDetector=new lh(this.element);for(let t in this.constructor.events)pe(t,{onElement:this.element,withCallback:this.handlerFor(t)})}elementDidMutate(e){}editorWillSyncDocumentView(){return this.mutationObserver.stop()}editorDidSyncDocumentView(){return this.mutationObserver.start()}requestRender(){var e,t;return(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidRequestRender)===null||t===void 0?void 0:t.call(e)}requestReparse(){var e,t;return(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidRequestReparse)===null||t===void 0||t.call(e),this.requestRender()}attachFiles(e){let t=Array.from(e).map(i=>new Yl(i));return Promise.all(t).then(i=>{this.handleInput(function(){var n,s;return(n=this.delegate)===null||n===void 0||n.inputControllerWillAttachFiles(),(s=this.responder)===null||s===void 0||s.insertFiles(i),this.requestRender()})})}handlerFor(e){return t=>{t.defaultPrevented||this.handleInput(()=>{if(!mh(this.element)){if(this.flakyKeyboardDetector.shouldIgnore(t))return;this.eventName=e,this.constructor.events[e].call(this,t)}})}}handleInput(e){try{var t;(t=this.delegate)===null||t===void 0||t.inputControllerWillHandleInput(),e.call(this)}finally{var i;(i=this.delegate)===null||i===void 0||i.inputControllerDidHandleInput()}}createLinkHTML(e,t){let i=document.createElement("a");return i.href=e,i.textContent=t||e,i.outerHTML}},Vd;ht(Gn,"events",{});var{browser:$L,keyNames:q0}=To,VL=0,Ft=class extends Gn{constructor(){super(...arguments),this.resetInputSummary()}setInputSummary(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};this.inputSummary.eventName=this.eventName;for(let t in e){let i=e[t];this.inputSummary[t]=i}return this.inputSummary}resetInputSummary(){this.inputSummary={}}reset(){return this.resetInputSummary(),Ui.reset()}elementDidMutate(e){var t,i;return this.isComposing()?(t=this.delegate)===null||t===void 0||(i=t.inputControllerDidAllowUnhandledInput)===null||i===void 0?void 0:i.call(t):this.handleInput(function(){return this.mutationIsSignificant(e)&&(this.mutationIsExpected(e)?this.requestRender():this.requestReparse()),this.reset()})}mutationIsExpected(e){let{textAdded:t,textDeleted:i}=e;if(this.inputSummary.preferDocument)return!0;let n=t!=null?t===this.inputSummary.textAdded:!this.inputSummary.textAdded,s=i!=null?this.inputSummary.didDelete:!this.inputSummary.didDelete,o=[`
`,` 
`].includes(t)&&!n,a=i===`
`&&!s;if(o&&!a||a&&!o){let c=this.getSelectedRange();if(c){var l;let f=o?t.replace(/\n$/,"").length||-1:t?.length||1;if((l=this.responder)!==null&&l!==void 0&&l.positionIsBlockBreak(c[1]+f))return!0}}return n&&s}mutationIsSignificant(e){var t;let i=Object.keys(e).length>0,n=((t=this.compositionInput)===null||t===void 0?void 0:t.getEndData())==="";return i||!n}getCompositionInput(){if(this.isComposing())return this.compositionInput;this.compositionInput=new Zt(this)}isComposing(){return this.compositionInput&&!this.compositionInput.isEnded()}deleteInDirection(e,t){var i;return((i=this.responder)===null||i===void 0?void 0:i.deleteInDirection(e))!==!1?this.setInputSummary({didDelete:!0}):t?(t.preventDefault(),this.requestRender()):void 0}serializeSelectionToDataTransfer(e){var t;if(!function(n){if(n==null||!n.setData)return!1;for(let s in Qv){let o=Qv[s];try{if(n.setData(s,o),!n.getData(s)===o)return!1}catch{return!1}}return!0}(e))return;let i=(t=this.responder)===null||t===void 0?void 0:t.getSelectedDocument().toSerializableDocument();return e.setData("application/x-trix-document",JSON.stringify(i)),e.setData("text/html",Wn.render(i).innerHTML),e.setData("text/plain",i.toString().replace(/\n$/,"")),!0}canAcceptDataTransfer(e){let t={};return Array.from(e?.types||[]).forEach(i=>{t[i]=!0}),t.Files||t["application/x-trix-document"]||t["text/html"]||t["text/plain"]}getPastedHTMLUsingHiddenElement(e){let t=this.getSelectedRange(),i={position:"absolute",left:"".concat(window.pageXOffset,"px"),top:"".concat(window.pageYOffset,"px"),opacity:0},n=G({style:i,tagName:"div",editable:!0});return document.body.appendChild(n),n.focus(),requestAnimationFrame(()=>{let s=n.innerHTML;return ii(n),this.setSelectedRange(t),e(s)})}};ht(Ft,"events",{keydown(r){this.isComposing()||this.resetInputSummary(),this.inputSummary.didInput=!0;let e=q0[r.keyCode];if(e){var t;let n=this.keys;["ctrl","alt","shift","meta"].forEach(s=>{var o;r["".concat(s,"Key")]&&(s==="ctrl"&&(s="control"),n=(o=n)===null||o===void 0?void 0:o[s])}),((t=n)===null||t===void 0?void 0:t[e])!=null&&(this.setInputSummary({keyName:e}),Ui.reset(),n[e].call(this,r))}if(T0(r)){let n=String.fromCharCode(r.keyCode).toLowerCase();if(n){var i;let s=["alt","shift"].map(o=>{if(r["".concat(o,"Key")])return o}).filter(o=>o);s.push(n),(i=this.delegate)!==null&&i!==void 0&&i.inputControllerDidReceiveKeyboardCommand(s)&&r.preventDefault()}}},keypress(r){if(this.inputSummary.eventName!=null||r.metaKey||r.ctrlKey&&!r.altKey)return;let e=GL(r);var t,i;return e?((t=this.delegate)===null||t===void 0||t.inputControllerWillPerformTyping(),(i=this.responder)===null||i===void 0||i.insertString(e),this.setInputSummary({textAdded:e,didDelete:this.selectionIsExpanded()})):void 0},textInput(r){let{data:e}=r,{textAdded:t}=this.inputSummary;if(t&&t!==e&&t.toUpperCase()===e){var i;let n=this.getSelectedRange();return this.setSelectedRange([n[0],n[1]+t.length]),(i=this.responder)===null||i===void 0||i.insertString(e),this.setInputSummary({textAdded:e}),this.setSelectedRange(n)}},dragenter(r){r.preventDefault()},dragstart(r){var e,t;return this.serializeSelectionToDataTransfer(r.dataTransfer),this.draggedRange=this.getSelectedRange(),(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidStartDrag)===null||t===void 0?void 0:t.call(e)},dragover(r){if(this.draggedRange||this.canAcceptDataTransfer(r.dataTransfer)){r.preventDefault();let i={x:r.clientX,y:r.clientY};var e,t;if(!Jn(i,this.draggingPoint))return this.draggingPoint=i,(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidReceiveDragOverPoint)===null||t===void 0?void 0:t.call(e,this.draggingPoint)}},dragend(r){var e,t;(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidCancelDrag)===null||t===void 0||t.call(e),this.draggedRange=null,this.draggingPoint=null},drop(r){var e,t;r.preventDefault();let i=(e=r.dataTransfer)===null||e===void 0?void 0:e.files,n=r.dataTransfer.getData("application/x-trix-document"),s={x:r.clientX,y:r.clientY};if((t=this.responder)===null||t===void 0||t.setLocationRangeFromPointRange(s),i!=null&&i.length)this.attachFiles(i);else if(this.draggedRange){var o,a;(o=this.delegate)===null||o===void 0||o.inputControllerWillMoveText(),(a=this.responder)===null||a===void 0||a.moveTextFromRange(this.draggedRange),this.draggedRange=null,this.requestRender()}else if(n){var l;let c=dt.fromJSONString(n);(l=this.responder)===null||l===void 0||l.insertDocument(c),this.requestRender()}this.draggedRange=null,this.draggingPoint=null},cut(r){var e,t;if((e=this.responder)!==null&&e!==void 0&&e.selectionIsExpanded()&&(this.serializeSelectionToDataTransfer(r.clipboardData)&&r.preventDefault(),(t=this.delegate)===null||t===void 0||t.inputControllerWillCutText(),this.deleteInDirection("backward"),r.defaultPrevented))return this.requestRender()},copy(r){var e;(e=this.responder)!==null&&e!==void 0&&e.selectionIsExpanded()&&this.serializeSelectionToDataTransfer(r.clipboardData)&&r.preventDefault()},paste(r){let e=r.clipboardData||r.testClipboardData,t={clipboard:e};if(!e||JL(r))return void this.getPastedHTMLUsingHiddenElement(h=>{var d,p,b;return t.type="text/html",t.html=h,(d=this.delegate)===null||d===void 0||d.inputControllerWillPaste(t),(p=this.responder)===null||p===void 0||p.insertHTML(t.html),this.requestRender(),(b=this.delegate)===null||b===void 0?void 0:b.inputControllerDidPaste(t)});let i=e.getData("URL"),n=e.getData("text/html"),s=e.getData("public.url-name");if(i){var o,a,l;let h;t.type="text/html",h=s?wh(s).trim():i,t.html=this.createLinkHTML(i,h),(o=this.delegate)===null||o===void 0||o.inputControllerWillPaste(t),this.setInputSummary({textAdded:h,didDelete:this.selectionIsExpanded()}),(a=this.responder)===null||a===void 0||a.insertHTML(t.html),this.requestRender(),(l=this.delegate)===null||l===void 0||l.inputControllerDidPaste(t)}else if(C0(e)){var c,f,m;t.type="text/plain",t.string=e.getData("text/plain"),(c=this.delegate)===null||c===void 0||c.inputControllerWillPaste(t),this.setInputSummary({textAdded:t.string,didDelete:this.selectionIsExpanded()}),(f=this.responder)===null||f===void 0||f.insertString(t.string),this.requestRender(),(m=this.delegate)===null||m===void 0||m.inputControllerDidPaste(t)}else if(n){var y,v,g;t.type="text/html",t.html=n,(y=this.delegate)===null||y===void 0||y.inputControllerWillPaste(t),(v=this.responder)===null||v===void 0||v.insertHTML(t.html),this.requestRender(),(g=this.delegate)===null||g===void 0||g.inputControllerDidPaste(t)}else if(Array.from(e.types).includes("Files")){var x,S;let h=(x=e.items)===null||x===void 0||(x=x[0])===null||x===void 0||(S=x.getAsFile)===null||S===void 0?void 0:S.call(x);if(h){var T,I,u;let d=WL(h);!h.name&&d&&(h.name="pasted-file-".concat(++VL,".").concat(d)),t.type="File",t.file=h,(T=this.delegate)===null||T===void 0||T.inputControllerWillAttachFiles(),(I=this.responder)===null||I===void 0||I.insertFile(t.file),this.requestRender(),(u=this.delegate)===null||u===void 0||u.inputControllerDidPaste(t)}}r.preventDefault()},compositionstart(r){return this.getCompositionInput().start(r.data)},compositionupdate(r){return this.getCompositionInput().update(r.data)},compositionend(r){return this.getCompositionInput().end(r.data)},beforeinput(r){this.inputSummary.didInput=!0},input(r){return this.inputSummary.didInput=!0,r.stopPropagation()}}),ht(Ft,"keys",{backspace(r){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("backward",r)},delete(r){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("forward",r)},return(r){var e,t;return this.setInputSummary({preferDocument:!0}),(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0?void 0:t.insertLineBreak()},tab(r){var e,t;(e=this.responder)!==null&&e!==void 0&&e.canIncreaseNestingLevel()&&((t=this.responder)===null||t===void 0||t.increaseNestingLevel(),this.requestRender(),r.preventDefault())},left(r){var e;if(this.selectionIsInCursorTarget())return r.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("backward")},right(r){var e;if(this.selectionIsInCursorTarget())return r.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("forward")},control:{d(r){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("forward",r)},h(r){var e;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.deleteInDirection("backward",r)},o(r){var e,t;return r.preventDefault(),(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0||t.insertString(`
`,{updatePosition:!1}),this.requestRender()}},shift:{return(r){var e,t;(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0||t.insertString(`
`),this.requestRender(),r.preventDefault()},tab(r){var e,t;(e=this.responder)!==null&&e!==void 0&&e.canDecreaseNestingLevel()&&((t=this.responder)===null||t===void 0||t.decreaseNestingLevel(),this.requestRender(),r.preventDefault())},left(r){if(this.selectionIsInCursorTarget())return r.preventDefault(),this.expandSelectionInDirection("backward")},right(r){if(this.selectionIsInCursorTarget())return r.preventDefault(),this.expandSelectionInDirection("forward")}},alt:{backspace(r){var e;return this.setInputSummary({preferDocument:!1}),(e=this.delegate)===null||e===void 0?void 0:e.inputControllerWillPerformTyping()}},meta:{backspace(r){var e;return this.setInputSummary({preferDocument:!1}),(e=this.delegate)===null||e===void 0?void 0:e.inputControllerWillPerformTyping()}}}),Ft.proxyMethod("responder?.getSelectedRange"),Ft.proxyMethod("responder?.setSelectedRange"),Ft.proxyMethod("responder?.expandSelectionInDirection"),Ft.proxyMethod("responder?.selectionIsInCursorTarget"),Ft.proxyMethod("responder?.selectionIsExpanded");var WL=r=>{var e;return(e=r.type)===null||e===void 0||(e=e.match(/\/(\w+)$/))===null||e===void 0?void 0:e[1]},KL=!((Vd=" ".codePointAt)===null||Vd===void 0||!Vd.call(" ",0)),GL=function(r){if(r.key&&KL&&r.key.codePointAt(0)===r.keyCode)return r.key;{let e;if(r.which===null?e=r.keyCode:r.which!==0&&r.charCode!==0&&(e=r.charCode),e!=null&&q0[e]!=="escape")return qi.fromCodepoints([e]).toString()}},JL=function(r){let e=r.clipboardData;if(e){if(e.types.includes("text/html")){for(let t of e.types){let i=/^CorePasteboardFlavorType/.test(t),n=/^dyn\./.test(t)&&e.getData(t);if(i||n)return!0}return!1}{let t=e.types.includes("com.apple.webarchive"),i=e.types.includes("com.apple.flat-rtfd");return t||i}}},Zt=class extends be{constructor(e){super(...arguments),this.inputController=e,this.responder=this.inputController.responder,this.delegate=this.inputController.delegate,this.inputSummary=this.inputController.inputSummary,this.data={}}start(e){if(this.data.start=e,this.isSignificant()){var t,i;this.inputSummary.eventName==="keypress"&&this.inputSummary.textAdded&&((i=this.responder)===null||i===void 0||i.deleteInDirection("left")),this.selectionIsExpanded()||(this.insertPlaceholder(),this.requestRender()),this.range=(t=this.responder)===null||t===void 0?void 0:t.getSelectedRange()}}update(e){if(this.data.update=e,this.isSignificant()){let t=this.selectPlaceholder();t&&(this.forgetPlaceholder(),this.range=t)}}end(e){return this.data.end=e,this.isSignificant()?(this.forgetPlaceholder(),this.canApplyToDocument()?(this.setInputSummary({preferDocument:!0,didInput:!1}),(t=this.delegate)===null||t===void 0||t.inputControllerWillPerformTyping(),(i=this.responder)===null||i===void 0||i.setSelectedRange(this.range),(n=this.responder)===null||n===void 0||n.insertString(this.data.end),(s=this.responder)===null||s===void 0?void 0:s.setSelectedRange(this.range[0]+this.data.end.length)):this.data.start!=null||this.data.update!=null?(this.requestReparse(),this.inputController.reset()):void 0):this.inputController.reset();var t,i,n,s}getEndData(){return this.data.end}isEnded(){return this.getEndData()!=null}isSignificant(){return!$L.composesExistingText||this.inputSummary.didInput}canApplyToDocument(){var e,t;return((e=this.data.start)===null||e===void 0?void 0:e.length)===0&&((t=this.data.end)===null||t===void 0?void 0:t.length)>0&&this.range}};Zt.proxyMethod("inputController.setInputSummary"),Zt.proxyMethod("inputController.requestRender"),Zt.proxyMethod("inputController.requestReparse"),Zt.proxyMethod("responder?.selectionIsExpanded"),Zt.proxyMethod("responder?.insertPlaceholder"),Zt.proxyMethod("responder?.selectPlaceholder"),Zt.proxyMethod("responder?.forgetPlaceholder");var Bi=class extends Gn{constructor(){super(...arguments),this.render=this.render.bind(this)}elementDidMutate(){return this.scheduledRender?this.composing?(e=this.delegate)===null||e===void 0||(t=e.inputControllerDidAllowUnhandledInput)===null||t===void 0?void 0:t.call(e):void 0:this.reparse();var e,t}scheduleRender(){return this.scheduledRender?this.scheduledRender:this.scheduledRender=requestAnimationFrame(this.render)}render(){var e,t;cancelAnimationFrame(this.scheduledRender),this.scheduledRender=null,this.composing||(t=this.delegate)===null||t===void 0||t.render(),(e=this.afterRender)===null||e===void 0||e.call(this),this.afterRender=null}reparse(){var e;return(e=this.delegate)===null||e===void 0?void 0:e.reparse()}insertString(){var e;let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",i=arguments.length>1?arguments[1]:void 0;return(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),this.withTargetDOMRange(function(){var n;return(n=this.responder)===null||n===void 0?void 0:n.insertString(t,i)})}toggleAttributeIfSupported(e){var t;if(eh().includes(e))return(t=this.delegate)===null||t===void 0||t.inputControllerWillPerformFormatting(e),this.withTargetDOMRange(function(){var i;return(i=this.responder)===null||i===void 0?void 0:i.toggleCurrentAttribute(e)})}activateAttributeIfSupported(e,t){var i;if(eh().includes(e))return(i=this.delegate)===null||i===void 0||i.inputControllerWillPerformFormatting(e),this.withTargetDOMRange(function(){var n;return(n=this.responder)===null||n===void 0?void 0:n.setCurrentAttribute(e,t)})}deleteInDirection(e){let{recordUndoEntry:t}=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{recordUndoEntry:!0};var i;t&&((i=this.delegate)===null||i===void 0||i.inputControllerWillPerformTyping());let n=()=>{var o;return(o=this.responder)===null||o===void 0?void 0:o.deleteInDirection(e)},s=this.getTargetDOMRange({minLength:this.composing?1:2});return s?this.withTargetDOMRange(s,n):n()}withTargetDOMRange(e,t){var i;return typeof e=="function"&&(t=e,e=this.getTargetDOMRange()),e?(i=this.responder)===null||i===void 0?void 0:i.withTargetDOMRange(e,t.bind(this)):(Ui.reset(),t.call(this))}getTargetDOMRange(){var e,t;let{minLength:i}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{minLength:0},n=(e=(t=this.event).getTargetRanges)===null||e===void 0?void 0:e.call(t);if(n&&n.length){let s=XL(n[0]);if(i===0||s.toString().length>=i)return s}}withEvent(e,t){let i;this.event=e;try{i=t.call(this)}finally{this.event=null}return i}};ht(Bi,"events",{keydown(r){if(T0(r)){var e;let t=QL(r);(e=this.delegate)!==null&&e!==void 0&&e.inputControllerDidReceiveKeyboardCommand(t)&&r.preventDefault()}else{let t=r.key;r.altKey&&(t+="+Alt"),r.shiftKey&&(t+="+Shift");let i=this.constructor.keys[t];if(i)return this.withEvent(r,i)}},paste(r){var e;let t,i=(e=r.clipboardData)===null||e===void 0?void 0:e.getData("URL");return H0(r)?(r.preventDefault(),this.attachFiles(r.clipboardData.files)):ZL(r)?(r.preventDefault(),t={type:"text/plain",string:r.clipboardData.getData("text/plain")},(n=this.delegate)===null||n===void 0||n.inputControllerWillPaste(t),(s=this.responder)===null||s===void 0||s.insertString(t.string),this.render(),(o=this.delegate)===null||o===void 0?void 0:o.inputControllerDidPaste(t)):i?(r.preventDefault(),t={type:"text/html",html:this.createLinkHTML(i)},(a=this.delegate)===null||a===void 0||a.inputControllerWillPaste(t),(l=this.responder)===null||l===void 0||l.insertHTML(t.html),this.render(),(c=this.delegate)===null||c===void 0?void 0:c.inputControllerDidPaste(t)):void 0;var n,s,o,a,l,c},beforeinput(r){let e=this.constructor.inputTypes[r.inputType],t=(i=r,!(!/iPhone|iPad/.test(navigator.userAgent)||i.inputType&&i.inputType!=="insertParagraph"));var i;e&&(this.withEvent(r,e),t||this.scheduleRender()),t&&this.render()},input(r){Ui.reset()},dragstart(r){var e,t;(e=this.responder)!==null&&e!==void 0&&e.selectionContainsAttachments()&&(r.dataTransfer.setData("application/x-trix-dragging",!0),this.dragging={range:(t=this.responder)===null||t===void 0?void 0:t.getSelectedRange(),point:Kd(r)})},dragenter(r){Wd(r)&&r.preventDefault()},dragover(r){if(this.dragging){r.preventDefault();let t=Kd(r);var e;if(!Jn(t,this.dragging.point))return this.dragging.point=t,(e=this.responder)===null||e===void 0?void 0:e.setLocationRangeFromPointRange(t)}else Wd(r)&&r.preventDefault()},drop(r){var e,t;if(this.dragging)return r.preventDefault(),(e=this.delegate)===null||e===void 0||e.inputControllerWillMoveText(),(t=this.responder)===null||t===void 0||t.moveTextFromRange(this.dragging.range),this.dragging=null,this.scheduleRender();if(Wd(r)){var i;r.preventDefault();let n=Kd(r);return(i=this.responder)===null||i===void 0||i.setLocationRangeFromPointRange(n),this.attachFiles(r.dataTransfer.files)}},dragend(){var r;this.dragging&&((r=this.responder)===null||r===void 0||r.setSelectedRange(this.dragging.range),this.dragging=null)},compositionend(r){this.composing&&(this.composing=!1,Co.recentAndroid||this.scheduleRender())}}),ht(Bi,"keys",{ArrowLeft(){var r,e;if((r=this.responder)!==null&&r!==void 0&&r.shouldManageMovingCursorInDirection("backward"))return this.event.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("backward")},ArrowRight(){var r,e;if((r=this.responder)!==null&&r!==void 0&&r.shouldManageMovingCursorInDirection("forward"))return this.event.preventDefault(),(e=this.responder)===null||e===void 0?void 0:e.moveCursorInDirection("forward")},Backspace(){var r,e,t;if((r=this.responder)!==null&&r!==void 0&&r.shouldManageDeletingInDirection("backward"))return this.event.preventDefault(),(e=this.delegate)===null||e===void 0||e.inputControllerWillPerformTyping(),(t=this.responder)===null||t===void 0||t.deleteInDirection("backward"),this.render()},Tab(){var r,e;if((r=this.responder)!==null&&r!==void 0&&r.canIncreaseNestingLevel())return this.event.preventDefault(),(e=this.responder)===null||e===void 0||e.increaseNestingLevel(),this.render()},"Tab+Shift"(){var r,e;if((r=this.responder)!==null&&r!==void 0&&r.canDecreaseNestingLevel())return this.event.preventDefault(),(e=this.responder)===null||e===void 0||e.decreaseNestingLevel(),this.render()}}),ht(Bi,"inputTypes",{deleteByComposition(){return this.deleteInDirection("backward",{recordUndoEntry:!1})},deleteByCut(){return this.deleteInDirection("backward")},deleteByDrag(){return this.event.preventDefault(),this.withTargetDOMRange(function(){var r;this.deleteByDragRange=(r=this.responder)===null||r===void 0?void 0:r.getSelectedRange()})},deleteCompositionText(){return this.deleteInDirection("backward",{recordUndoEntry:!1})},deleteContent(){return this.deleteInDirection("backward")},deleteContentBackward(){return this.deleteInDirection("backward")},deleteContentForward(){return this.deleteInDirection("forward")},deleteEntireSoftLine(){return this.deleteInDirection("forward")},deleteHardLineBackward(){return this.deleteInDirection("backward")},deleteHardLineForward(){return this.deleteInDirection("forward")},deleteSoftLineBackward(){return this.deleteInDirection("backward")},deleteSoftLineForward(){return this.deleteInDirection("forward")},deleteWordBackward(){return this.deleteInDirection("backward")},deleteWordForward(){return this.deleteInDirection("forward")},formatBackColor(){return this.activateAttributeIfSupported("backgroundColor",this.event.data)},formatBold(){return this.toggleAttributeIfSupported("bold")},formatFontColor(){return this.activateAttributeIfSupported("color",this.event.data)},formatFontName(){return this.activateAttributeIfSupported("font",this.event.data)},formatIndent(){var r;if((r=this.responder)!==null&&r!==void 0&&r.canIncreaseNestingLevel())return this.withTargetDOMRange(function(){var e;return(e=this.responder)===null||e===void 0?void 0:e.increaseNestingLevel()})},formatItalic(){return this.toggleAttributeIfSupported("italic")},formatJustifyCenter(){return this.toggleAttributeIfSupported("justifyCenter")},formatJustifyFull(){return this.toggleAttributeIfSupported("justifyFull")},formatJustifyLeft(){return this.toggleAttributeIfSupported("justifyLeft")},formatJustifyRight(){return this.toggleAttributeIfSupported("justifyRight")},formatOutdent(){var r;if((r=this.responder)!==null&&r!==void 0&&r.canDecreaseNestingLevel())return this.withTargetDOMRange(function(){var e;return(e=this.responder)===null||e===void 0?void 0:e.decreaseNestingLevel()})},formatRemove(){this.withTargetDOMRange(function(){for(let t in(r=this.responder)===null||r===void 0?void 0:r.getCurrentAttributes()){var r,e;(e=this.responder)===null||e===void 0||e.removeCurrentAttribute(t)}})},formatSetBlockTextDirection(){return this.activateAttributeIfSupported("blockDir",this.event.data)},formatSetInlineTextDirection(){return this.activateAttributeIfSupported("textDir",this.event.data)},formatStrikeThrough(){return this.toggleAttributeIfSupported("strike")},formatSubscript(){return this.toggleAttributeIfSupported("sub")},formatSuperscript(){return this.toggleAttributeIfSupported("sup")},formatUnderline(){return this.toggleAttributeIfSupported("underline")},historyRedo(){var r;return(r=this.delegate)===null||r===void 0?void 0:r.inputControllerWillPerformRedo()},historyUndo(){var r;return(r=this.delegate)===null||r===void 0?void 0:r.inputControllerWillPerformUndo()},insertCompositionText(){return this.composing=!0,this.insertString(this.event.data)},insertFromComposition(){return this.composing=!1,this.insertString(this.event.data)},insertFromDrop(){let r=this.deleteByDragRange;var e;if(r)return this.deleteByDragRange=null,(e=this.delegate)===null||e===void 0||e.inputControllerWillMoveText(),this.withTargetDOMRange(function(){var t;return(t=this.responder)===null||t===void 0?void 0:t.moveTextFromRange(r)})},insertFromPaste(){let{dataTransfer:r}=this.event,e={dataTransfer:r},t=r.getData("URL"),i=r.getData("text/html");if(t){var n;let l;this.event.preventDefault(),e.type="text/html";let c=r.getData("public.url-name");l=c?wh(c).trim():t,e.html=this.createLinkHTML(t,l),(n=this.delegate)===null||n===void 0||n.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var f;return(f=this.responder)===null||f===void 0?void 0:f.insertHTML(e.html)}),this.afterRender=()=>{var f;return(f=this.delegate)===null||f===void 0?void 0:f.inputControllerDidPaste(e)}}else if(C0(r)){var s;e.type="text/plain",e.string=r.getData("text/plain"),(s=this.delegate)===null||s===void 0||s.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var l;return(l=this.responder)===null||l===void 0?void 0:l.insertString(e.string)}),this.afterRender=()=>{var l;return(l=this.delegate)===null||l===void 0?void 0:l.inputControllerDidPaste(e)}}else if(YL(this.event)){var o;e.type="File",e.file=r.files[0],(o=this.delegate)===null||o===void 0||o.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var l;return(l=this.responder)===null||l===void 0?void 0:l.insertFile(e.file)}),this.afterRender=()=>{var l;return(l=this.delegate)===null||l===void 0?void 0:l.inputControllerDidPaste(e)}}else if(i){var a;this.event.preventDefault(),e.type="text/html",e.html=i,(a=this.delegate)===null||a===void 0||a.inputControllerWillPaste(e),this.withTargetDOMRange(function(){var l;return(l=this.responder)===null||l===void 0?void 0:l.insertHTML(e.html)}),this.afterRender=()=>{var l;return(l=this.delegate)===null||l===void 0?void 0:l.inputControllerDidPaste(e)}}},insertFromYank(){return this.insertString(this.event.data)},insertLineBreak(){return this.insertString(`
`)},insertLink(){return this.activateAttributeIfSupported("href",this.event.data)},insertOrderedList(){return this.toggleAttributeIfSupported("number")},insertParagraph(){var r;return(r=this.delegate)===null||r===void 0||r.inputControllerWillPerformTyping(),this.withTargetDOMRange(function(){var e;return(e=this.responder)===null||e===void 0?void 0:e.insertLineBreak()})},insertReplacementText(){let r=this.event.dataTransfer.getData("text/plain"),e=this.event.getTargetRanges()[0];this.withTargetDOMRange(e,()=>{this.insertString(r,{updatePosition:!1})})},insertText(){var r;return this.insertString(this.event.data||((r=this.event.dataTransfer)===null||r===void 0?void 0:r.getData("text/plain")))},insertTranspose(){return this.insertString(this.event.data)},insertUnorderedList(){return this.toggleAttributeIfSupported("bullet")}});var XL=function(r){let e=document.createRange();return e.setStart(r.startContainer,r.startOffset),e.setEnd(r.endContainer,r.endOffset),e},Wd=r=>{var e;return Array.from(((e=r.dataTransfer)===null||e===void 0?void 0:e.types)||[]).includes("Files")},YL=r=>{var e;return((e=r.dataTransfer.files)===null||e===void 0?void 0:e[0])&&!H0(r)&&!(t=>{let{dataTransfer:i}=t;return i.types.includes("Files")&&i.types.includes("text/html")&&i.getData("text/html").includes("urn:schemas-microsoft-com:office:office")})(r)},H0=function(r){let e=r.clipboardData;if(e)return Array.from(e.types).filter(t=>t.match(/file/i)).length===e.types.length&&e.files.length>=1},ZL=function(r){let e=r.clipboardData;if(e)return e.types.includes("text/plain")&&e.types.length===1},QL=function(r){let e=[];return r.altKey&&e.push("alt"),r.shiftKey&&e.push("shift"),e.push(r.key),e},Kd=r=>({x:r.clientX,y:r.clientY}),uh="[data-trix-attribute]",ch="[data-trix-action]",eR="".concat(uh,", ").concat(ch),tu="[data-trix-dialog]",tR="".concat(tu,"[data-trix-active]"),rR="".concat(tu," [data-trix-method]"),g0="".concat(tu," [data-trix-input]"),b0=(r,e)=>(e||(e=Hn(r)),r.querySelector("[data-trix-input][name='".concat(e,"']"))),v0=r=>r.getAttribute("data-trix-action"),Hn=r=>r.getAttribute("data-trix-attribute")||r.getAttribute("data-trix-dialog-attribute"),Zl=class extends be{constructor(e){super(e),this.didClickActionButton=this.didClickActionButton.bind(this),this.didClickAttributeButton=this.didClickAttributeButton.bind(this),this.didClickDialogButton=this.didClickDialogButton.bind(this),this.didKeyDownDialogInput=this.didKeyDownDialogInput.bind(this),this.element=e,this.attributes={},this.actions={},this.resetDialogInputs(),pe("mousedown",{onElement:this.element,matchingSelector:ch,withCallback:this.didClickActionButton}),pe("mousedown",{onElement:this.element,matchingSelector:uh,withCallback:this.didClickAttributeButton}),pe("click",{onElement:this.element,matchingSelector:eR,preventDefault:!0}),pe("click",{onElement:this.element,matchingSelector:rR,withCallback:this.didClickDialogButton}),pe("keydown",{onElement:this.element,matchingSelector:g0,withCallback:this.didKeyDownDialogInput})}didClickActionButton(e,t){var i;(i=this.delegate)===null||i===void 0||i.toolbarDidClickButton(),e.preventDefault();let n=v0(t);return this.getDialog(n)?this.toggleDialog(n):(s=this.delegate)===null||s===void 0?void 0:s.toolbarDidInvokeAction(n,t);var s}didClickAttributeButton(e,t){var i;(i=this.delegate)===null||i===void 0||i.toolbarDidClickButton(),e.preventDefault();let n=Hn(t);var s;return this.getDialog(n)?this.toggleDialog(n):(s=this.delegate)===null||s===void 0||s.toolbarDidToggleAttribute(n),this.refreshAttributeButtons()}didClickDialogButton(e,t){let i=ri(t,{matchingSelector:tu});return this[t.getAttribute("data-trix-method")].call(this,i)}didKeyDownDialogInput(e,t){if(e.keyCode===13){e.preventDefault();let i=t.getAttribute("name"),n=this.getDialog(i);this.setAttribute(n)}if(e.keyCode===27)return e.preventDefault(),this.hideDialog()}updateActions(e){return this.actions=e,this.refreshActionButtons()}refreshActionButtons(){return this.eachActionButton((e,t)=>{e.disabled=this.actions[t]===!1})}eachActionButton(e){return Array.from(this.element.querySelectorAll(ch)).map(t=>e(t,v0(t)))}updateAttributes(e){return this.attributes=e,this.refreshAttributeButtons()}refreshAttributeButtons(){return this.eachAttributeButton((e,t)=>(e.disabled=this.attributes[t]===!1,this.attributes[t]||this.dialogIsVisible(t)?(e.setAttribute("data-trix-active",""),e.classList.add("trix-active")):(e.removeAttribute("data-trix-active"),e.classList.remove("trix-active"))))}eachAttributeButton(e){return Array.from(this.element.querySelectorAll(uh)).map(t=>e(t,Hn(t)))}applyKeyboardCommand(e){let t=JSON.stringify(e.sort());for(let i of Array.from(this.element.querySelectorAll("[data-trix-key]"))){let n=i.getAttribute("data-trix-key").split("+");if(JSON.stringify(n.sort())===t)return bo("mousedown",{onElement:i}),!0}return!1}dialogIsVisible(e){let t=this.getDialog(e);if(t)return t.hasAttribute("data-trix-active")}toggleDialog(e){return this.dialogIsVisible(e)?this.hideDialog():this.showDialog(e)}showDialog(e){var t,i;this.hideDialog(),(t=this.delegate)===null||t===void 0||t.toolbarWillShowDialog();let n=this.getDialog(e);n.setAttribute("data-trix-active",""),n.classList.add("trix-active"),Array.from(n.querySelectorAll("input[disabled]")).forEach(o=>{o.removeAttribute("disabled")});let s=Hn(n);if(s){let o=b0(n,e);o&&(o.value=this.attributes[s]||"",o.select())}return(i=this.delegate)===null||i===void 0?void 0:i.toolbarDidShowDialog(e)}setAttribute(e){let t=Hn(e),i=b0(e,t);return i.willValidate&&!i.checkValidity()?(i.setAttribute("data-trix-validate",""),i.classList.add("trix-validate"),i.focus()):((n=this.delegate)===null||n===void 0||n.toolbarDidUpdateAttribute(t,i.value),this.hideDialog());var n}removeAttribute(e){var t;let i=Hn(e);return(t=this.delegate)===null||t===void 0||t.toolbarDidRemoveAttribute(i),this.hideDialog()}hideDialog(){let e=this.element.querySelector(tR);var t;if(e)return e.removeAttribute("data-trix-active"),e.classList.remove("trix-active"),this.resetDialogInputs(),(t=this.delegate)===null||t===void 0?void 0:t.toolbarDidHideDialog((i=>i.getAttribute("data-trix-dialog"))(e))}resetDialogInputs(){Array.from(this.element.querySelectorAll(g0)).forEach(e=>{e.setAttribute("disabled","disabled"),e.removeAttribute("data-trix-validate"),e.classList.remove("trix-validate")})}getDialog(e){return this.element.querySelector("[data-trix-dialog=".concat(e,"]"))}},Fi=class extends Jl{constructor(e){let{editorElement:t,document:i,html:n}=e;super(...arguments),this.editorElement=t,this.selectionManager=new Er(this.editorElement),this.selectionManager.delegate=this,this.composition=new Qt,this.composition.delegate=this,this.attachmentManager=new Hl(this.composition.getAttachments()),this.attachmentManager.delegate=this,this.inputController=gh.getLevel()===2?new Bi(this.editorElement):new Ft(this.editorElement),this.inputController.delegate=this,this.inputController.responder=this.composition,this.compositionController=new Gl(this.editorElement,this.composition),this.compositionController.delegate=this,this.toolbarController=new Zl(this.editorElement.toolbarElement),this.toolbarController.delegate=this,this.editor=new $l(this.composition,this.selectionManager,this.editorElement),i?this.editor.loadDocument(i):this.editor.loadHTML(n)}registerSelectionManager(){return Ui.registerSelectionManager(this.selectionManager)}unregisterSelectionManager(){return Ui.unregisterSelectionManager(this.selectionManager)}render(){return this.compositionController.render()}reparse(){return this.composition.replaceHTML(this.editorElement.innerHTML)}compositionDidChangeDocument(e){if(this.notifyEditorElement("document-change"),!this.handlingInput)return this.render()}compositionDidChangeCurrentAttributes(e){return this.currentAttributes=e,this.toolbarController.updateAttributes(this.currentAttributes),this.updateCurrentActions(),this.notifyEditorElement("attributes-change",{attributes:this.currentAttributes})}compositionDidPerformInsertionAtRange(e){this.pasting&&(this.pastedRange=e)}compositionShouldAcceptFile(e){return this.notifyEditorElement("file-accept",{file:e})}compositionDidAddAttachment(e){let t=this.attachmentManager.manageAttachment(e);return this.notifyEditorElement("attachment-add",{attachment:t})}compositionDidEditAttachment(e){this.compositionController.rerenderViewForObject(e);let t=this.attachmentManager.manageAttachment(e);return this.notifyEditorElement("attachment-edit",{attachment:t}),this.notifyEditorElement("change")}compositionDidChangeAttachmentPreviewURL(e){return this.compositionController.invalidateViewForObject(e),this.notifyEditorElement("change")}compositionDidRemoveAttachment(e){let t=this.attachmentManager.unmanageAttachment(e);return this.notifyEditorElement("attachment-remove",{attachment:t})}compositionDidStartEditingAttachment(e,t){return this.attachmentLocationRange=this.composition.document.getLocationRangeOfAttachment(e),this.compositionController.installAttachmentEditorForAttachment(e,t),this.selectionManager.setLocationRange(this.attachmentLocationRange)}compositionDidStopEditingAttachment(e){this.compositionController.uninstallAttachmentEditor(),this.attachmentLocationRange=null}compositionDidRequestChangingSelectionToLocationRange(e){if(!this.loadingSnapshot||this.isFocused())return this.requestedLocationRange=e,this.compositionRevisionWhenLocationRangeRequested=this.composition.revision,this.handlingInput?void 0:this.render()}compositionWillLoadSnapshot(){this.loadingSnapshot=!0}compositionDidLoadSnapshot(){this.compositionController.refreshViewCache(),this.render(),this.loadingSnapshot=!1}getSelectionManager(){return this.selectionManager}attachmentManagerDidRequestRemovalOfAttachment(e){return this.removeAttachment(e)}compositionControllerWillSyncDocumentView(){return this.inputController.editorWillSyncDocumentView(),this.selectionManager.lock(),this.selectionManager.clearSelection()}compositionControllerDidSyncDocumentView(){return this.inputController.editorDidSyncDocumentView(),this.selectionManager.unlock(),this.updateCurrentActions(),this.notifyEditorElement("sync")}compositionControllerDidRender(){this.requestedLocationRange&&(this.compositionRevisionWhenLocationRangeRequested===this.composition.revision&&this.selectionManager.setLocationRange(this.requestedLocationRange),this.requestedLocationRange=null,this.compositionRevisionWhenLocationRangeRequested=null),this.renderedCompositionRevision!==this.composition.revision&&(this.runEditorFilters(),this.composition.updateCurrentAttributes(),this.notifyEditorElement("render")),this.renderedCompositionRevision=this.composition.revision}compositionControllerDidFocus(){return this.isFocusedInvisibly()&&this.setLocationRange({index:0,offset:0}),this.toolbarController.hideDialog(),this.notifyEditorElement("focus")}compositionControllerDidBlur(){return this.notifyEditorElement("blur")}compositionControllerDidSelectAttachment(e,t){return this.toolbarController.hideDialog(),this.composition.editAttachment(e,t)}compositionControllerDidRequestDeselectingAttachment(e){let t=this.attachmentLocationRange||this.composition.document.getLocationRangeOfAttachment(e);return this.selectionManager.setLocationRange(t[1])}compositionControllerWillUpdateAttachment(e){return this.editor.recordUndoEntry("Edit Attachment",{context:e.id,consolidatable:!0})}compositionControllerDidRequestRemovalOfAttachment(e){return this.removeAttachment(e)}inputControllerWillHandleInput(){this.handlingInput=!0,this.requestedRender=!1}inputControllerDidRequestRender(){this.requestedRender=!0}inputControllerDidHandleInput(){if(this.handlingInput=!1,this.requestedRender)return this.requestedRender=!1,this.render()}inputControllerDidAllowUnhandledInput(){return this.notifyEditorElement("change")}inputControllerDidRequestReparse(){return this.reparse()}inputControllerWillPerformTyping(){return this.recordTypingUndoEntry()}inputControllerWillPerformFormatting(e){return this.recordFormattingUndoEntry(e)}inputControllerWillCutText(){return this.editor.recordUndoEntry("Cut")}inputControllerWillPaste(e){return this.editor.recordUndoEntry("Paste"),this.pasting=!0,this.notifyEditorElement("before-paste",{paste:e})}inputControllerDidPaste(e){return e.range=this.pastedRange,this.pastedRange=null,this.pasting=null,this.notifyEditorElement("paste",{paste:e})}inputControllerWillMoveText(){return this.editor.recordUndoEntry("Move")}inputControllerWillAttachFiles(){return this.editor.recordUndoEntry("Drop Files")}inputControllerWillPerformUndo(){return this.editor.undo()}inputControllerWillPerformRedo(){return this.editor.redo()}inputControllerDidReceiveKeyboardCommand(e){return this.toolbarController.applyKeyboardCommand(e)}inputControllerDidStartDrag(){this.locationRangeBeforeDrag=this.selectionManager.getLocationRange()}inputControllerDidReceiveDragOverPoint(e){return this.selectionManager.setLocationRangeFromPointRange(e)}inputControllerDidCancelDrag(){this.selectionManager.setLocationRange(this.locationRangeBeforeDrag),this.locationRangeBeforeDrag=null}locationRangeDidChange(e){return this.composition.updateCurrentAttributes(),this.updateCurrentActions(),this.attachmentLocationRange&&!Dl(this.attachmentLocationRange,e)&&this.composition.stopEditingAttachment(),this.notifyEditorElement("selection-change")}toolbarDidClickButton(){if(!this.getLocationRange())return this.setLocationRange({index:0,offset:0})}toolbarDidInvokeAction(e,t){return this.invokeAction(e,t)}toolbarDidToggleAttribute(e){if(this.recordFormattingUndoEntry(e),this.composition.toggleCurrentAttribute(e),this.render(),!this.selectionFrozen)return this.editorElement.focus()}toolbarDidUpdateAttribute(e,t){if(this.recordFormattingUndoEntry(e),this.composition.setCurrentAttribute(e,t),this.render(),!this.selectionFrozen)return this.editorElement.focus()}toolbarDidRemoveAttribute(e){if(this.recordFormattingUndoEntry(e),this.composition.removeCurrentAttribute(e),this.render(),!this.selectionFrozen)return this.editorElement.focus()}toolbarWillShowDialog(e){return this.composition.expandSelectionForEditing(),this.freezeSelection()}toolbarDidShowDialog(e){return this.notifyEditorElement("toolbar-dialog-show",{dialogName:e})}toolbarDidHideDialog(e){return this.thawSelection(),this.editorElement.focus(),this.notifyEditorElement("toolbar-dialog-hide",{dialogName:e})}freezeSelection(){if(!this.selectionFrozen)return this.selectionManager.lock(),this.composition.freezeSelection(),this.selectionFrozen=!0,this.render()}thawSelection(){if(this.selectionFrozen)return this.composition.thawSelection(),this.selectionManager.unlock(),this.selectionFrozen=!1,this.render()}canInvokeAction(e){return!!this.actionIsExternal(e)||!((t=this.actions[e])===null||t===void 0||(t=t.test)===null||t===void 0||!t.call(this));var t}invokeAction(e,t){return this.actionIsExternal(e)?this.notifyEditorElement("action-invoke",{actionName:e,invokingElement:t}):(i=this.actions[e])===null||i===void 0||(i=i.perform)===null||i===void 0?void 0:i.call(this);var i}actionIsExternal(e){return/^x-./.test(e)}getCurrentActions(){let e={};for(let t in this.actions)e[t]=this.canInvokeAction(t);return e}updateCurrentActions(){let e=this.getCurrentActions();if(!Jn(e,this.currentActions))return this.currentActions=e,this.toolbarController.updateActions(this.currentActions),this.notifyEditorElement("actions-change",{actions:this.currentActions})}runEditorFilters(){let e=this.composition.getSnapshot();if(Array.from(this.editor.filters).forEach(n=>{let{document:s,selectedRange:o}=e;e=n.call(this.editor,e)||{},e.document||(e.document=s),e.selectedRange||(e.selectedRange=o)}),t=e,i=this.composition.getSnapshot(),!Dl(t.selectedRange,i.selectedRange)||!t.document.isEqualTo(i.document))return this.composition.loadSnapshot(e);var t,i}updateInputElement(){let e=function(t,i){let n=OL[i];if(n)return n(t);throw new Error("unknown content type: ".concat(i))}(this.compositionController.getSerializableElement(),"text/html");return this.editorElement.setFormValue(e)}notifyEditorElement(e,t){switch(e){case"document-change":this.documentChangedSinceLastRender=!0;break;case"render":this.documentChangedSinceLastRender&&(this.documentChangedSinceLastRender=!1,this.notifyEditorElement("change"));break;case"change":case"attachment-add":case"attachment-edit":case"attachment-remove":this.updateInputElement()}return this.editorElement.notify(e,t)}removeAttachment(e){return this.editor.recordUndoEntry("Delete Attachment"),this.composition.removeAttachment(e),this.render()}recordFormattingUndoEntry(e){let t=Ae(e),i=this.selectionManager.getLocationRange();if(t||!xr(i))return this.editor.recordUndoEntry("Formatting",{context:this.getUndoContext(),consolidatable:!0})}recordTypingUndoEntry(){return this.editor.recordUndoEntry("Typing",{context:this.getUndoContext(this.currentAttributes),consolidatable:!0})}getUndoContext(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return[this.getLocationContext(),this.getTimeContext(),...Array.from(t)]}getLocationContext(){let e=this.selectionManager.getLocationRange();return xr(e)?e[0].index:e}getTimeContext(){return Yd.interval>0?Math.floor(new Date().getTime()/Yd.interval):0}isFocused(){var e;return this.editorElement===((e=this.editorElement.ownerDocument)===null||e===void 0?void 0:e.activeElement)}isFocusedInvisibly(){return this.isFocused()&&!this.getLocationRange()}get actions(){return this.constructor.actions}};ht(Fi,"actions",{undo:{test(){return this.editor.canUndo()},perform(){return this.editor.undo()}},redo:{test(){return this.editor.canRedo()},perform(){return this.editor.redo()}},link:{test(){return this.editor.canActivateAttribute("href")}},increaseNestingLevel:{test(){return this.editor.canIncreaseNestingLevel()},perform(){return this.editor.increaseNestingLevel()&&this.render()}},decreaseNestingLevel:{test(){return this.editor.canDecreaseNestingLevel()},perform(){return this.editor.decreaseNestingLevel()&&this.render()}},attachFiles:{test:()=>!0,perform(){return gh.pickFiles(this.editor.insertFiles)}}}),Fi.proxyMethod("getSelectionManager().setLocationRange"),Fi.proxyMethod("getSelectionManager().getLocationRange");var iR=Object.freeze({__proto__:null,AttachmentEditorController:Kl,CompositionController:Gl,Controller:Jl,EditorController:Fi,InputController:Gn,Level0InputController:Ft,Level2InputController:Bi,ToolbarController:Zl}),nR=Object.freeze({__proto__:null,MutationObserver:Xl,SelectionChangeObserver:Il}),sR=Object.freeze({__proto__:null,FileVerificationOperation:Yl,ImagePreloadOperation:ql});S0("trix-toolbar",`%t {
  display: block;
}

%t {
  white-space: nowrap;
}

%t [data-trix-dialog] {
  display: none;
}

%t [data-trix-dialog][data-trix-active] {
  display: block;
}

%t [data-trix-dialog] [data-trix-validate]:invalid {
  background-color: #ffdddd;
}`);var Ql=class extends HTMLElement{connectedCallback(){this.innerHTML===""&&(this.innerHTML=k0.getDefaultHTML())}},oR=0,aR=function(r){if(!r.hasAttribute("contenteditable"))return r.setAttribute("contenteditable",""),function(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return t.times=1,pe(e,t)}("focus",{onElement:r,withCallback:()=>lR(r)})},lR=function(r){return uR(r),cR(r)},uR=function(r){var e,t;if((e=(t=document).queryCommandSupported)!==null&&e!==void 0&&e.call(t,"enableObjectResizing"))return document.execCommand("enableObjectResizing",!1,!1),pe("mscontrolselect",{onElement:r,preventDefault:!0})},cR=function(r){var e,t;if((e=(t=document).queryCommandSupported)!==null&&e!==void 0&&e.call(t,"DefaultParagraphSeparator")){let{tagName:i}=Xe.default;if(["div","p"].includes(i))return document.execCommand("DefaultParagraphSeparator",!1,i)}},y0=Co.forcesObjectResizing?{display:"inline",width:"auto"}:{display:"inline-block",width:"1px"};S0("trix-editor",`%t {
    display: block;
}

%t:empty::before {
    content: attr(placeholder);
    color: graytext;
    cursor: text;
    pointer-events: none;
    white-space: pre-line;
}

%t a[contenteditable=false] {
    cursor: text;
}

%t img {
    max-width: 100%;
    height: auto;
}

%t `.concat(Ii,` figcaption textarea {
    resize: none;
}

%t `).concat(Ii,` figcaption textarea.trix-autoresize-clone {
    position: absolute;
    left: -9999px;
    max-height: 0px;
}

%t `).concat(Ii,` figcaption[data-trix-placeholder]:empty::before {
    content: attr(data-trix-placeholder);
    color: graytext;
}

%t [data-trix-cursor-target] {
    display: `).concat(y0.display,` !important;
    width: `).concat(y0.width,` !important;
    padding: 0 !important;
    margin: 0 !important;
    border: none !important;
}

%t [data-trix-cursor-target=left] {
    vertical-align: top !important;
    margin-left: -1px !important;
}

%t [data-trix-cursor-target=right] {
    vertical-align: bottom !important;
    margin-right: -1px !important;
}`));var Ar=new WeakMap,mo=new WeakSet,dh=class{constructor(e){var t,i;P0(t=this,i=mo),i.add(t),Ao(this,Ar,{writable:!0,value:void 0}),this.element=e,Ah(this,Ar,e.attachInternals())}connectedCallback(){Ll(this,mo,Rl).call(this)}disconnectedCallback(){}get labels(){return re(this,Ar).labels}get disabled(){var e;return(e=this.element.inputElement)===null||e===void 0?void 0:e.disabled}set disabled(e){this.element.toggleAttribute("disabled",e)}get required(){return this.element.hasAttribute("required")}set required(e){this.element.toggleAttribute("required",e),Ll(this,mo,Rl).call(this)}get validity(){return re(this,Ar).validity}get validationMessage(){return re(this,Ar).validationMessage}get willValidate(){return re(this,Ar).willValidate}setFormValue(e){Ll(this,mo,Rl).call(this)}checkValidity(){return re(this,Ar).checkValidity()}reportValidity(){return re(this,Ar).reportValidity()}setCustomValidity(e){Ll(this,mo,Rl).call(this,e)}};function Rl(){let r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",{required:e,value:t}=this.element,i=e&&!t,n=!!r,s=G("input",{required:e}),o=r||s.validationMessage;re(this,Ar).setValidity({valueMissing:i,customError:n},o)}var Gd=new WeakMap,Jd=new WeakMap,Xd=new WeakMap,hh=class{constructor(e){Ao(this,Gd,{writable:!0,value:void 0}),Ao(this,Jd,{writable:!0,value:t=>{t.defaultPrevented||t.target===this.element.form&&this.element.reset()}}),Ao(this,Xd,{writable:!0,value:t=>{if(t.defaultPrevented||this.element.contains(t.target))return;let i=ri(t.target,{matchingSelector:"label"});i&&Array.from(this.labels).includes(i)&&this.element.focus()}}),this.element=e}connectedCallback(){Ah(this,Gd,function(e){if(e.hasAttribute("aria-label")||e.hasAttribute("aria-labelledby"))return;let t=function(){let i=Array.from(e.labels).map(s=>{if(!s.contains(e))return s.textContent}).filter(s=>s),n=i.join(" ");return n?e.setAttribute("aria-label",n):e.removeAttribute("aria-label")};return t(),pe("focus",{onElement:e,withCallback:t})}(this.element)),window.addEventListener("reset",re(this,Jd),!1),window.addEventListener("click",re(this,Xd),!1)}disconnectedCallback(){var e;(e=re(this,Gd))===null||e===void 0||e.destroy(),window.removeEventListener("reset",re(this,Jd),!1),window.removeEventListener("click",re(this,Xd),!1)}get labels(){let e=[];this.element.id&&this.element.ownerDocument&&e.push(...Array.from(this.element.ownerDocument.querySelectorAll("label[for='".concat(this.element.id,"']"))||[]));let t=ri(this.element,{matchingSelector:"label"});return t&&[this.element,null].includes(t.control)&&e.push(t),e}get disabled(){return console.warn("This browser does not support the [disabled] attribute for trix-editor elements."),!1}set disabled(e){console.warn("This browser does not support the [disabled] attribute for trix-editor elements.")}get required(){return console.warn("This browser does not support the [required] attribute for trix-editor elements."),!1}set required(e){console.warn("This browser does not support the [required] attribute for trix-editor elements.")}get validity(){return console.warn("This browser does not support the validity property for trix-editor elements."),null}get validationMessage(){return console.warn("This browser does not support the validationMessage property for trix-editor elements."),""}get willValidate(){return console.warn("This browser does not support the willValidate property for trix-editor elements."),!1}setFormValue(e){}checkValidity(){return console.warn("This browser does not support checkValidity() for trix-editor elements."),!0}reportValidity(){return console.warn("This browser does not support reportValidity() for trix-editor elements."),!0}setCustomValidity(e){console.warn("This browser does not support setCustomValidity(validationMessage) for trix-editor elements.")}},He=new WeakMap,So=class extends HTMLElement{constructor(){super(),Ao(this,He,{writable:!0,value:void 0}),Ah(this,He,this.constructor.formAssociated?new dh(this):new hh(this))}get trixId(){return this.hasAttribute("trix-id")?this.getAttribute("trix-id"):(this.setAttribute("trix-id",++oR),this.trixId)}get labels(){return re(this,He).labels}get disabled(){return re(this,He).disabled}set disabled(e){re(this,He).disabled=e}get required(){return re(this,He).required}set required(e){re(this,He).required=e}get validity(){return re(this,He).validity}get validationMessage(){return re(this,He).validationMessage}get willValidate(){return re(this,He).willValidate}get type(){return this.localName}get toolbarElement(){var e;if(this.hasAttribute("toolbar"))return(e=this.ownerDocument)===null||e===void 0?void 0:e.getElementById(this.getAttribute("toolbar"));if(this.parentNode){let t="trix-toolbar-".concat(this.trixId);this.setAttribute("toolbar",t);let i=G("trix-toolbar",{id:t});return this.parentNode.insertBefore(i,this),i}}get form(){var e;return(e=this.inputElement)===null||e===void 0?void 0:e.form}get inputElement(){var e;if(this.hasAttribute("input"))return(e=this.ownerDocument)===null||e===void 0?void 0:e.getElementById(this.getAttribute("input"));if(this.parentNode){let t="trix-input-".concat(this.trixId);this.setAttribute("input",t);let i=G("input",{type:"hidden",id:t});return this.parentNode.insertBefore(i,this.nextElementSibling),i}}get editor(){var e;return(e=this.editorController)===null||e===void 0?void 0:e.editor}get name(){var e;return(e=this.inputElement)===null||e===void 0?void 0:e.name}get value(){var e;return(e=this.inputElement)===null||e===void 0?void 0:e.value}set value(e){var t;this.defaultValue=e,(t=this.editor)===null||t===void 0||t.loadHTML(this.defaultValue)}notify(e,t){if(this.editorController)return bo("trix-".concat(e),{onElement:this,attributes:t})}setFormValue(e){this.inputElement&&(this.inputElement.value=e,re(this,He).setFormValue(e))}connectedCallback(){this.hasAttribute("data-trix-internal")||(aR(this),function(e){e.hasAttribute("role")||e.setAttribute("role","textbox")}(this),this.editorController||(bo("trix-before-initialize",{onElement:this}),this.editorController=new Fi({editorElement:this,html:this.defaultValue=this.value}),requestAnimationFrame(()=>bo("trix-initialize",{onElement:this}))),this.editorController.registerSelectionManager(),re(this,He).connectedCallback(),function(e){!document.querySelector(":focus")&&e.hasAttribute("autofocus")&&document.querySelector("[autofocus]")===e&&e.focus()}(this))}disconnectedCallback(){var e;(e=this.editorController)===null||e===void 0||e.unregisterSelectionManager(),re(this,He).disconnectedCallback()}checkValidity(){return re(this,He).checkValidity()}reportValidity(){return re(this,He).reportValidity()}setCustomValidity(e){re(this,He).setCustomValidity(e)}formDisabledCallback(e){this.inputElement&&(this.inputElement.disabled=e),this.toggleAttribute("contenteditable",!e)}formResetCallback(){this.reset()}reset(){this.value=this.defaultValue}};ht(So,"formAssociated","ElementInternals"in window);var w0={VERSION:q8,config:To,core:PL,models:F0,views:FL,controllers:iR,observers:nR,operations:sR,elements:Object.freeze({__proto__:null,TrixEditorElement:So,TrixToolbarElement:Ql}),filters:Object.freeze({__proto__:null,Filter:zl,attachmentGalleryFilter:M0})};Object.assign(w0,F0),window.Trix=w0,setTimeout(function(){customElements.get("trix-toolbar")||customElements.define("trix-toolbar",Ql),customElements.get("trix-editor")||customElements.define("trix-editor",So)},0);var dR=new U0.default.Converter,hR=new Kv,z0={mounted(){console.log("loading MD editor");let r=this.el.getElementsByTagName("trix-editor")?.[0],e=r.editor;console.log(r),console.log(r.editor);let t=document.getElementById(r.id.replace("editor","content"));e.insertHTML(dR.makeHtml(t.value)),this.el.addEventListener("trix-change",i=>{console.log(i);let n=hR.turndown(r.innerHTML);t.value=n,t.dispatchEvent(new Event("input",{bubbles:!0}))})},destroyed(){}};var fR=function(r,e){r.forEach(t=>{let i=new XMLHttpRequest;e(()=>i.abort()),i.onload=()=>i.status===200?t.progress(100):t.error(),i.onerror=()=>t.error(),i.upload.addEventListener("progress",s=>{if(s.lengthComputable){let o=Math.round(s.loaded/s.total*100);o<100&&t.progress(o)}});let n=t.meta.url;i.open("PUT",n,!0),i.send(t.file)})},$0=fR;var pR={mounted(){sessionStorage.getItem("locale")&&this.pushEventTo(this.el,"got-locale",{locale:sessionStorage.getItem("locale")}),this.handleEvent("set-locale",({locale:r})=>sessionStorage.setItem("locale",r))}},V0=pR;var mR={Drag:Ff,Markdown:z0,LocalLocaleStorage:V0},gR=document.querySelector("meta[name='csrf-token']").getAttribute("content"),W0=new cf("/live",_h,{longPollFallbackMs:2500,params:{_csrf_token:gR},uploaders:{S3:$0},hooks:mR});ru.default.config({barColors:{0:"#29d"},shadowColor:"rgba(0, 0, 0, .3)"});window.addEventListener("phx:page-loading-start",r=>ru.default.show(300));window.addEventListener("phx:page-loading-stop",r=>ru.default.hide());W0.connect();window.liveSocket=W0;})();
/**
 * @license MIT
 * topbar 2.0.0, 2023-02-04
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
/*! Bundled license information:

showdown/dist/showdown.js:
  (*! showdown v 2.1.0 - 21-04-2022 *)

sortablejs/modular/sortable.esm.js:
  (**!
   * Sortable 1.15.4
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   *)

lodash-es/lodash.js:
  (**
   * @license
   * Lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="es" -o ./`
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/
//# sourceMappingURL=data:application/json;base64,
